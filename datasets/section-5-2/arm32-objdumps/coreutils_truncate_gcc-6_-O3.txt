
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c14 <.init>:
   10c14:	push	{r3, lr}
   10c18:	bl	11944 <__assert_fail@plt+0xab8>
   10c1c:	pop	{r3, pc}

Disassembly of section .plt:

00010c20 <calloc@plt-0x14>:
   10c20:	push	{lr}		; (str lr, [sp, #-4]!)
   10c24:	ldr	lr, [pc, #4]	; 10c30 <calloc@plt-0x4>
   10c28:	add	lr, pc, lr
   10c2c:	ldr	pc, [lr, #8]!
   10c30:	ldrdeq	r9, [r1], -r0

00010c34 <calloc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #102400	; 0x19000
   10c3c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c40 <fputs_unlocked@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #102400	; 0x19000
   10c48:	ldr	pc, [ip, #968]!	; 0x3c8

00010c4c <raise@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #102400	; 0x19000
   10c54:	ldr	pc, [ip, #960]!	; 0x3c0

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #102400	; 0x19000
   10c60:	ldr	pc, [ip, #952]!	; 0x3b8

00010c64 <fflush@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #102400	; 0x19000
   10c6c:	ldr	pc, [ip, #944]!	; 0x3b0

00010c70 <free@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #102400	; 0x19000
   10c78:	ldr	pc, [ip, #936]!	; 0x3a8

00010c7c <_exit@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #102400	; 0x19000
   10c84:	ldr	pc, [ip, #928]!	; 0x3a0

00010c88 <memcpy@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #102400	; 0x19000
   10c90:	ldr	pc, [ip, #920]!	; 0x398

00010c94 <mbsinit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #102400	; 0x19000
   10c9c:	ldr	pc, [ip, #912]!	; 0x390

00010ca0 <ftruncate64@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #102400	; 0x19000
   10ca8:	ldr	pc, [ip, #904]!	; 0x388

00010cac <memcmp@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #102400	; 0x19000
   10cb4:	ldr	pc, [ip, #896]!	; 0x380

00010cb8 <fputc_unlocked@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #102400	; 0x19000
   10cc0:	ldr	pc, [ip, #888]!	; 0x378

00010cc4 <dcgettext@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #102400	; 0x19000
   10ccc:	ldr	pc, [ip, #880]!	; 0x370

00010cd0 <realloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #102400	; 0x19000
   10cd8:	ldr	pc, [ip, #872]!	; 0x368

00010cdc <textdomain@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #102400	; 0x19000
   10ce4:	ldr	pc, [ip, #864]!	; 0x360

00010ce8 <iswprint@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #102400	; 0x19000
   10cf0:	ldr	pc, [ip, #856]!	; 0x358

00010cf4 <__fxstat64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #102400	; 0x19000
   10cfc:	ldr	pc, [ip, #848]!	; 0x350

00010d00 <fwrite@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #102400	; 0x19000
   10d08:	ldr	pc, [ip, #840]!	; 0x348

00010d0c <lseek64@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #102400	; 0x19000
   10d14:	ldr	pc, [ip, #832]!	; 0x340

00010d18 <__ctype_get_mb_cur_max@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #102400	; 0x19000
   10d20:	ldr	pc, [ip, #824]!	; 0x338

00010d24 <__fpending@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #102400	; 0x19000
   10d2c:	ldr	pc, [ip, #816]!	; 0x330

00010d30 <mbrtowc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #102400	; 0x19000
   10d38:	ldr	pc, [ip, #808]!	; 0x328

00010d3c <error@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #102400	; 0x19000
   10d44:	ldr	pc, [ip, #800]!	; 0x320

00010d48 <open64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #102400	; 0x19000
   10d50:	ldr	pc, [ip, #792]!	; 0x318

00010d54 <malloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #102400	; 0x19000
   10d5c:	ldr	pc, [ip, #784]!	; 0x310

00010d60 <__libc_start_main@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #102400	; 0x19000
   10d68:	ldr	pc, [ip, #776]!	; 0x308

00010d6c <__freading@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #102400	; 0x19000
   10d74:	ldr	pc, [ip, #768]!	; 0x300

00010d78 <__gmon_start__@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #102400	; 0x19000
   10d80:	ldr	pc, [ip, #760]!	; 0x2f8

00010d84 <getopt_long@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #102400	; 0x19000
   10d8c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d90 <__ctype_b_loc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #102400	; 0x19000
   10d98:	ldr	pc, [ip, #744]!	; 0x2e8

00010d9c <exit@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #102400	; 0x19000
   10da4:	ldr	pc, [ip, #736]!	; 0x2e0

00010da8 <strlen@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #102400	; 0x19000
   10db0:	ldr	pc, [ip, #728]!	; 0x2d8

00010db4 <strchr@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #102400	; 0x19000
   10dbc:	ldr	pc, [ip, #720]!	; 0x2d0

00010dc0 <__errno_location@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #102400	; 0x19000
   10dc8:	ldr	pc, [ip, #712]!	; 0x2c8

00010dcc <__cxa_atexit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #102400	; 0x19000
   10dd4:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd8 <memset@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #102400	; 0x19000
   10de0:	ldr	pc, [ip, #696]!	; 0x2b8

00010de4 <__printf_chk@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #102400	; 0x19000
   10dec:	ldr	pc, [ip, #688]!	; 0x2b0

00010df0 <fileno@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #102400	; 0x19000
   10df8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dfc <__fprintf_chk@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #102400	; 0x19000
   10e04:	ldr	pc, [ip, #672]!	; 0x2a0

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #102400	; 0x19000
   10e10:	ldr	pc, [ip, #664]!	; 0x298

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #102400	; 0x19000
   10e1c:	ldr	pc, [ip, #656]!	; 0x290

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #102400	; 0x19000
   10e28:	ldr	pc, [ip, #648]!	; 0x288

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #102400	; 0x19000
   10e34:	ldr	pc, [ip, #640]!	; 0x280

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #102400	; 0x19000
   10e40:	ldr	pc, [ip, #632]!	; 0x278

00010e44 <__strtoll_internal@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #102400	; 0x19000
   10e4c:	ldr	pc, [ip, #624]!	; 0x270

00010e50 <bindtextdomain@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #102400	; 0x19000
   10e58:	ldr	pc, [ip, #616]!	; 0x268

00010e5c <__xstat64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #102400	; 0x19000
   10e64:	ldr	pc, [ip, #608]!	; 0x260

00010e68 <strncmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #102400	; 0x19000
   10e70:	ldr	pc, [ip, #600]!	; 0x258

00010e74 <abort@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #102400	; 0x19000
   10e7c:	ldr	pc, [ip, #592]!	; 0x250

00010e80 <close@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #102400	; 0x19000
   10e88:	ldr	pc, [ip, #584]!	; 0x248

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #102400	; 0x19000
   10e94:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	mov	r7, r0
   10ea0:	sub	sp, sp, #172	; 0xac
   10ea4:	ldr	r0, [r1]
   10ea8:	mov	r6, r1
   10eac:	bl	11ea4 <__assert_fail@plt+0x1018>
   10eb0:	ldr	r1, [pc, #2492]	; 11874 <__assert_fail@plt+0x9e8>
   10eb4:	mov	r0, #6
   10eb8:	bl	10e20 <setlocale@plt>
   10ebc:	ldr	r1, [pc, #2484]	; 11878 <__assert_fail@plt+0x9ec>
   10ec0:	ldr	r0, [pc, #2484]	; 1187c <__assert_fail@plt+0x9f0>
   10ec4:	bl	10e50 <bindtextdomain@plt>
   10ec8:	ldr	r0, [pc, #2476]	; 1187c <__assert_fail@plt+0x9f0>
   10ecc:	bl	10cdc <textdomain@plt>
   10ed0:	ldr	r9, [pc, #2472]	; 11880 <__assert_fail@plt+0x9f4>
   10ed4:	ldr	r0, [pc, #2472]	; 11884 <__assert_fail@plt+0x9f8>
   10ed8:	ldr	r8, [pc, #2472]	; 11888 <__assert_fail@plt+0x9fc>
   10edc:	ldr	sl, [pc, #2472]	; 1188c <__assert_fail@plt+0xa00>
   10ee0:	ldr	r5, [pc, #2472]	; 11890 <__assert_fail@plt+0xa04>
   10ee4:	bl	189a4 <__assert_fail@plt+0x7b18>
   10ee8:	mov	r2, #0
   10eec:	mov	r3, #0
   10ef0:	mov	fp, #0
   10ef4:	str	fp, [sp, #32]
   10ef8:	strd	r2, [sp, #24]
   10efc:	mov	r4, #0
   10f00:	str	r4, [sp]
   10f04:	mov	r3, r9
   10f08:	mov	r2, r8
   10f0c:	mov	r1, r6
   10f10:	mov	r0, r7
   10f14:	bl	10d84 <getopt_long@plt>
   10f18:	cmn	r0, #1
   10f1c:	beq	11128 <__assert_fail@plt+0x29c>
   10f20:	cmp	r0, #99	; 0x63
   10f24:	beq	11080 <__assert_fail@plt+0x1f4>
   10f28:	ble	10f4c <__assert_fail@plt+0xc0>
   10f2c:	cmp	r0, #114	; 0x72
   10f30:	beq	11074 <__assert_fail@plt+0x1e8>
   10f34:	cmp	r0, #115	; 0x73
   10f38:	beq	10f94 <__assert_fail@plt+0x108>
   10f3c:	cmp	r0, #111	; 0x6f
   10f40:	beq	11068 <__assert_fail@plt+0x1dc>
   10f44:	mov	r0, #1
   10f48:	bl	11a30 <__assert_fail@plt+0xba4>
   10f4c:	cmn	r0, #3
   10f50:	beq	10f64 <__assert_fail@plt+0xd8>
   10f54:	cmn	r0, #2
   10f58:	bne	10f44 <__assert_fail@plt+0xb8>
   10f5c:	mov	r0, r4
   10f60:	bl	11a30 <__assert_fail@plt+0xba4>
   10f64:	ldr	r1, [pc, #2344]	; 11894 <__assert_fail@plt+0xa08>
   10f68:	ldr	r3, [pc, #2344]	; 11898 <__assert_fail@plt+0xa0c>
   10f6c:	ldr	r2, [pc, #2344]	; 1189c <__assert_fail@plt+0xa10>
   10f70:	str	r4, [sp, #4]
   10f74:	ldr	r0, [r1]
   10f78:	ldr	r3, [r3]
   10f7c:	ldr	r1, [pc, #2332]	; 118a0 <__assert_fail@plt+0xa14>
   10f80:	str	r2, [sp]
   10f84:	ldr	r2, [pc, #2328]	; 118a4 <__assert_fail@plt+0xa18>
   10f88:	bl	16744 <__assert_fail@plt+0x58b8>
   10f8c:	mov	r0, r4
   10f90:	bl	10d9c <exit@plt>
   10f94:	bl	10d90 <__ctype_b_loc@plt>
   10f98:	ldr	r3, [r5]
   10f9c:	ldr	r1, [r0]
   10fa0:	b	10fa8 <__assert_fail@plt+0x11c>
   10fa4:	str	r3, [r5]
   10fa8:	mov	ip, r3
   10fac:	ldrb	r2, [r3], #1
   10fb0:	lsl	r0, r2, #1
   10fb4:	ldrh	r0, [r1, r0]
   10fb8:	tst	r0, #8192	; 0x2000
   10fbc:	bne	10fa4 <__assert_fail@plt+0x118>
   10fc0:	cmp	r2, #47	; 0x2f
   10fc4:	beq	11118 <__assert_fail@plt+0x28c>
   10fc8:	bls	1108c <__assert_fail@plt+0x200>
   10fcc:	cmp	r2, #60	; 0x3c
   10fd0:	beq	11108 <__assert_fail@plt+0x27c>
   10fd4:	cmp	r2, #62	; 0x3e
   10fd8:	moveq	fp, #2
   10fdc:	addeq	ip, ip, #1
   10fe0:	streq	ip, [r5]
   10fe4:	ldr	r4, [r5]
   10fe8:	b	10ff4 <__assert_fail@plt+0x168>
   10fec:	add	r4, r4, #1
   10ff0:	str	r4, [r5]
   10ff4:	ldrb	r3, [r4]
   10ff8:	lsl	r2, r3, #1
   10ffc:	ldrh	r2, [r1, r2]
   11000:	tst	r2, #8192	; 0x2000
   11004:	bne	10fec <__assert_fail@plt+0x160>
   11008:	sub	r3, r3, #43	; 0x2b
   1100c:	ands	r3, r3, #253	; 0xfd
   11010:	mov	r2, #5
   11014:	bne	110a0 <__assert_fail@plt+0x214>
   11018:	cmp	fp, #0
   1101c:	bne	117f0 <__assert_fail@plt+0x964>
   11020:	ldr	r1, [pc, #2176]	; 118a8 <__assert_fail@plt+0xa1c>
   11024:	mov	r0, fp
   11028:	bl	10cc4 <dcgettext@plt>
   1102c:	ldr	r3, [pc, #2168]	; 118ac <__assert_fail@plt+0xa20>
   11030:	mvn	r2, #0
   11034:	str	r3, [sp, #8]
   11038:	mvn	r3, #-2147483648	; 0x80000000
   1103c:	str	fp, [sp, #16]
   11040:	strd	r2, [sp]
   11044:	mov	fp, #1
   11048:	mov	r2, #0
   1104c:	mov	r3, #-2147483648	; 0x80000000
   11050:	str	fp, [sp, #32]
   11054:	str	r0, [sp, #12]
   11058:	mov	r0, r4
   1105c:	bl	170fc <__assert_fail@plt+0x6270>
   11060:	strd	r0, [sp, #24]
   11064:	b	10efc <__assert_fail@plt+0x70>
   11068:	mov	r3, #1
   1106c:	strb	r3, [sl, #1]
   11070:	b	10efc <__assert_fail@plt+0x70>
   11074:	ldr	r3, [r5]
   11078:	str	r3, [sl, #4]
   1107c:	b	10efc <__assert_fail@plt+0x70>
   11080:	mov	r3, #1
   11084:	strb	r3, [sl]
   11088:	b	10efc <__assert_fail@plt+0x70>
   1108c:	cmp	r2, #37	; 0x25
   11090:	addeq	ip, ip, #1
   11094:	streq	ip, [r5]
   11098:	moveq	fp, #5
   1109c:	b	10fe4 <__assert_fail@plt+0x158>
   110a0:	ldr	r1, [pc, #2048]	; 118a8 <__assert_fail@plt+0xa1c>
   110a4:	mov	r0, #0
   110a8:	bl	10cc4 <dcgettext@plt>
   110ac:	ldr	r3, [pc, #2040]	; 118ac <__assert_fail@plt+0xa20>
   110b0:	mvn	r2, #0
   110b4:	str	r3, [sp, #8]
   110b8:	mvn	r3, #-2147483648	; 0x80000000
   110bc:	strd	r2, [sp]
   110c0:	mov	r3, #0
   110c4:	str	r3, [sp, #16]
   110c8:	mov	r2, #0
   110cc:	mov	r3, #-2147483648	; 0x80000000
   110d0:	str	r0, [sp, #12]
   110d4:	mov	r0, r4
   110d8:	bl	170fc <__assert_fail@plt+0x6270>
   110dc:	mov	r2, r0
   110e0:	mov	r3, r1
   110e4:	strd	r2, [sp, #24]
   110e8:	orr	r3, r0, r3
   110ec:	sub	r2, fp, #4
   110f0:	cmp	r2, #1
   110f4:	cmpls	r3, #0
   110f8:	beq	117d0 <__assert_fail@plt+0x944>
   110fc:	mov	r3, #1
   11100:	str	r3, [sp, #32]
   11104:	b	10efc <__assert_fail@plt+0x70>
   11108:	add	ip, ip, #1
   1110c:	str	ip, [r5]
   11110:	mov	fp, #3
   11114:	b	10fe4 <__assert_fail@plt+0x158>
   11118:	add	ip, ip, #1
   1111c:	str	ip, [r5]
   11120:	mov	fp, #4
   11124:	b	10fe4 <__assert_fail@plt+0x158>
   11128:	ldr	r3, [pc, #1920]	; 118b0 <__assert_fail@plt+0xa24>
   1112c:	ldr	r5, [r3]
   11130:	ldr	r3, [pc, #1876]	; 1188c <__assert_fail@plt+0xa00>
   11134:	sub	r7, r7, r5
   11138:	lsl	r5, r5, #2
   1113c:	ldr	r8, [r3, #4]
   11140:	cmp	r8, r4
   11144:	beq	116d4 <__assert_fail@plt+0x848>
   11148:	ldr	r9, [sp, #32]
   1114c:	cmp	fp, #0
   11150:	movne	r9, #0
   11154:	andeq	r9, r9, #1
   11158:	cmp	r9, #0
   1115c:	bne	11808 <__assert_fail@plt+0x97c>
   11160:	ldr	r3, [pc, #1828]	; 1188c <__assert_fail@plt+0xa00>
   11164:	ldrb	r4, [r3, #1]
   11168:	ldr	r3, [sp, #32]
   1116c:	eor	r4, r4, #1
   11170:	orrs	r4, r3, r4
   11174:	beq	11848 <__assert_fail@plt+0x9bc>
   11178:	cmp	r7, #0
   1117c:	ble	116e8 <__assert_fail@plt+0x85c>
   11180:	mov	r1, r8
   11184:	add	r2, sp, #64	; 0x40
   11188:	mov	r0, #3
   1118c:	bl	10e5c <__xstat64@plt>
   11190:	subs	r1, r0, #0
   11194:	bne	117ac <__assert_fail@plt+0x920>
   11198:	ldr	r3, [sp, #80]	; 0x50
   1119c:	and	r3, r3, #53248	; 0xd000
   111a0:	cmp	r3, #32768	; 0x8000
   111a4:	bne	11648 <__assert_fail@plt+0x7bc>
   111a8:	ldrd	r2, [sp, #112]	; 0x70
   111ac:	cmp	r2, #0
   111b0:	strd	r2, [sp, #48]	; 0x30
   111b4:	sbcs	r3, r3, #0
   111b8:	blt	11658 <__assert_fail@plt+0x7cc>
   111bc:	ldr	r3, [sp, #32]
   111c0:	cmp	r3, #0
   111c4:	bne	111dc <__assert_fail@plt+0x350>
   111c8:	ldrd	r2, [sp, #48]	; 0x30
   111cc:	strd	r2, [sp, #24]
   111d0:	mvn	r2, #0
   111d4:	mvn	r3, #0
   111d8:	strd	r2, [sp, #48]	; 0x30
   111dc:	ldr	r3, [pc, #1704]	; 1188c <__assert_fail@plt+0xa00>
   111e0:	ldr	r2, [pc, #1740]	; 118b4 <__assert_fail@plt+0xa28>
   111e4:	sub	r5, r5, #4
   111e8:	ldrb	r0, [r3]
   111ec:	ldr	r3, [sp, #52]	; 0x34
   111f0:	ldr	r1, [pc, #1728]	; 118b8 <__assert_fail@plt+0xa2c>
   111f4:	cmp	r0, #0
   111f8:	lsr	r3, r3, #31
   111fc:	add	r7, r6, r5
   11200:	mov	sl, #0
   11204:	movne	r1, r2
   11208:	cmp	fp, #0
   1120c:	moveq	r3, #0
   11210:	andne	r3, r3, #1
   11214:	str	r1, [sp, #44]	; 0x2c
   11218:	str	r3, [sp, #56]	; 0x38
   1121c:	ldr	r4, [r7, #4]!
   11220:	cmp	r4, #0
   11224:	beq	11304 <__assert_fail@plt+0x478>
   11228:	ldr	r2, [pc, #1676]	; 118bc <__assert_fail@plt+0xa30>
   1122c:	ldr	r1, [sp, #44]	; 0x2c
   11230:	mov	r0, r4
   11234:	bl	10d48 <open64@plt>
   11238:	ldr	r3, [pc, #1612]	; 1188c <__assert_fail@plt+0xa00>
   1123c:	subs	r5, r0, #0
   11240:	blt	11310 <__assert_fail@plt+0x484>
   11244:	ldrb	r3, [r3, #1]
   11248:	cmp	r3, #0
   1124c:	bne	11478 <__assert_fail@plt+0x5ec>
   11250:	ldr	r3, [sp, #56]	; 0x38
   11254:	cmp	r3, #0
   11258:	bne	1141c <__assert_fail@plt+0x590>
   1125c:	ldrd	r2, [sp, #24]
   11260:	strd	r2, [sp, #32]
   11264:	cmp	fp, #0
   11268:	bne	11378 <__assert_fail@plt+0x4ec>
   1126c:	ldrd	r8, [sp, #32]
   11270:	cmp	r8, #0
   11274:	sbcs	r3, r9, #0
   11278:	movlt	r8, #0
   1127c:	movlt	r9, r8
   11280:	mov	r2, r8
   11284:	mov	r3, r9
   11288:	mov	r0, r5
   1128c:	bl	10ca0 <ftruncate64@plt>
   11290:	cmp	r0, #0
   11294:	moveq	r6, #1
   11298:	beq	112e8 <__assert_fail@plt+0x45c>
   1129c:	bl	10dc0 <__errno_location@plt>
   112a0:	mov	r6, #0
   112a4:	mov	r2, #5
   112a8:	ldr	r1, [pc, #1552]	; 118c0 <__assert_fail@plt+0xa34>
   112ac:	ldr	r3, [r0]
   112b0:	mov	r0, r6
   112b4:	str	r3, [sp, #60]	; 0x3c
   112b8:	bl	10cc4 <dcgettext@plt>
   112bc:	mov	r1, r4
   112c0:	str	r0, [sp, #32]
   112c4:	mov	r0, #4
   112c8:	bl	14400 <__assert_fail@plt+0x3574>
   112cc:	ldr	r3, [sp, #60]	; 0x3c
   112d0:	ldr	r2, [sp, #32]
   112d4:	mov	r1, r3
   112d8:	strd	r8, [sp]
   112dc:	mov	r3, r0
   112e0:	mov	r0, r6
   112e4:	bl	10d3c <error@plt>
   112e8:	mov	r0, r5
   112ec:	bl	10e80 <close@plt>
   112f0:	cmp	r0, #0
   112f4:	bne	11508 <__assert_fail@plt+0x67c>
   112f8:	eor	r6, r6, #1
   112fc:	orr	sl, sl, r6
   11300:	b	1121c <__assert_fail@plt+0x390>
   11304:	mov	r0, sl
   11308:	add	sp, sp, #172	; 0xac
   1130c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11310:	ldrb	r3, [r3]
   11314:	cmp	r3, #0
   11318:	beq	1132c <__assert_fail@plt+0x4a0>
   1131c:	bl	10dc0 <__errno_location@plt>
   11320:	ldr	r3, [r0]
   11324:	cmp	r3, #2
   11328:	beq	1121c <__assert_fail@plt+0x390>
   1132c:	bl	10dc0 <__errno_location@plt>
   11330:	ldr	r1, [pc, #1420]	; 118c4 <__assert_fail@plt+0xa38>
   11334:	mov	r2, #5
   11338:	ldr	r5, [r0]
   1133c:	mov	r0, #0
   11340:	bl	10cc4 <dcgettext@plt>
   11344:	mov	r1, r4
   11348:	mov	sl, #1
   1134c:	mov	r6, r0
   11350:	mov	r0, #4
   11354:	bl	14400 <__assert_fail@plt+0x3574>
   11358:	mov	r2, r6
   1135c:	mov	r1, r5
   11360:	mov	r3, r0
   11364:	mov	r0, #0
   11368:	bl	10d3c <error@plt>
   1136c:	b	1121c <__assert_fail@plt+0x390>
   11370:	ldrd	r2, [sp, #24]
   11374:	strd	r2, [sp, #32]
   11378:	ldrd	r2, [sp, #48]	; 0x30
   1137c:	mvn	r1, #0
   11380:	mvn	r0, #0
   11384:	cmp	r3, r1
   11388:	cmpeq	r2, r0
   1138c:	beq	11574 <__assert_fail@plt+0x6e8>
   11390:	ldrd	r8, [sp, #48]	; 0x30
   11394:	cmp	fp, #2
   11398:	ldrd	r2, [sp, #32]
   1139c:	beq	11560 <__assert_fail@plt+0x6d4>
   113a0:	cmp	fp, #3
   113a4:	beq	115a0 <__assert_fail@plt+0x714>
   113a8:	cmp	fp, #4
   113ac:	beq	115c4 <__assert_fail@plt+0x738>
   113b0:	cmp	fp, #5
   113b4:	beq	1161c <__assert_fail@plt+0x790>
   113b8:	cmp	r2, #0
   113bc:	sbcs	r1, r3, #0
   113c0:	blt	115b4 <__assert_fail@plt+0x728>
   113c4:	mvn	r0, #0
   113c8:	subs	r0, r0, r2
   113cc:	mvn	r1, #-2147483648	; 0x80000000
   113d0:	sbc	r1, r1, r3
   113d4:	cmp	r0, r8
   113d8:	sbcs	r1, r1, r9
   113dc:	bge	115b4 <__assert_fail@plt+0x728>
   113e0:	ldr	r1, [pc, #1248]	; 118c8 <__assert_fail@plt+0xa3c>
   113e4:	mov	r2, #5
   113e8:	mov	r0, #0
   113ec:	bl	10cc4 <dcgettext@plt>
   113f0:	mov	r1, r4
   113f4:	mov	r6, r0
   113f8:	mov	r0, #4
   113fc:	bl	14400 <__assert_fail@plt+0x3574>
   11400:	mov	r1, #0
   11404:	mov	r2, r6
   11408:	mov	r6, #0
   1140c:	mov	r3, r0
   11410:	mov	r0, r1
   11414:	bl	10d3c <error@plt>
   11418:	b	112e8 <__assert_fail@plt+0x45c>
   1141c:	add	r2, sp, #64	; 0x40
   11420:	mov	r1, r5
   11424:	mov	r0, #3
   11428:	bl	10cf4 <__fxstat64@plt>
   1142c:	cmp	r0, #0
   11430:	beq	11370 <__assert_fail@plt+0x4e4>
   11434:	bl	10dc0 <__errno_location@plt>
   11438:	ldr	r1, [pc, #1164]	; 118cc <__assert_fail@plt+0xa40>
   1143c:	mov	r2, #5
   11440:	mov	r6, #0
   11444:	ldr	r8, [r0]
   11448:	mov	r0, r6
   1144c:	bl	10cc4 <dcgettext@plt>
   11450:	mov	r1, r4
   11454:	mov	r9, r0
   11458:	mov	r0, #4
   1145c:	bl	14400 <__assert_fail@plt+0x3574>
   11460:	mov	r2, r9
   11464:	mov	r1, r8
   11468:	mov	r3, r0
   1146c:	mov	r0, r6
   11470:	bl	10d3c <error@plt>
   11474:	b	112e8 <__assert_fail@plt+0x45c>
   11478:	add	r2, sp, #64	; 0x40
   1147c:	mov	r1, r5
   11480:	mov	r0, #3
   11484:	bl	10cf4 <__fxstat64@plt>
   11488:	cmp	r0, #0
   1148c:	bne	11434 <__assert_fail@plt+0x5a8>
   11490:	ldr	r6, [sp, #120]	; 0x78
   11494:	sub	r3, r6, #1
   11498:	cmn	r3, #-536870911	; 0xe0000001
   1149c:	ldrd	r2, [sp, #24]
   114a0:	movhi	r6, #512	; 0x200
   114a4:	cmp	r2, #0
   114a8:	sbcs	r3, r3, #0
   114ac:	blt	115dc <__assert_fail@plt+0x750>
   114b0:	mov	r2, r6
   114b4:	asr	r3, r6, #31
   114b8:	mvn	r0, #0
   114bc:	mvn	r1, #-2147483648	; 0x80000000
   114c0:	bl	18734 <__assert_fail@plt+0x78a8>
   114c4:	ldrd	r2, [sp, #24]
   114c8:	cmp	r0, r2
   114cc:	sbcs	r3, r1, r3
   114d0:	movlt	r3, #1
   114d4:	movge	r3, #0
   114d8:	cmp	r3, #0
   114dc:	bne	11518 <__assert_fail@plt+0x68c>
   114e0:	ldrd	r8, [sp, #24]
   114e4:	asr	r1, r6, #31
   114e8:	umull	r2, r3, r6, r8
   114ec:	mul	ip, r6, r9
   114f0:	strd	r2, [sp, #32]
   114f4:	mla	r3, r8, r1, ip
   114f8:	ldr	r2, [sp, #36]	; 0x24
   114fc:	add	r3, r3, r2
   11500:	str	r3, [sp, #36]	; 0x24
   11504:	b	11264 <__assert_fail@plt+0x3d8>
   11508:	bl	10dc0 <__errno_location@plt>
   1150c:	mov	r2, #5
   11510:	ldr	r1, [pc, #952]	; 118d0 <__assert_fail@plt+0xa44>
   11514:	b	11338 <__assert_fail@plt+0x4ac>
   11518:	mov	r2, #5
   1151c:	ldr	r1, [pc, #944]	; 118d4 <__assert_fail@plt+0xa48>
   11520:	mov	r0, #0
   11524:	bl	10cc4 <dcgettext@plt>
   11528:	mov	r1, r4
   1152c:	mov	r8, r0
   11530:	mov	r0, #4
   11534:	bl	14400 <__assert_fail@plt+0x3574>
   11538:	mov	r2, r8
   1153c:	ldrd	r8, [sp, #24]
   11540:	mov	r1, #0
   11544:	str	r6, [sp, #8]
   11548:	strd	r8, [sp]
   1154c:	mov	r6, r1
   11550:	str	r0, [sp, #12]
   11554:	mov	r0, r1
   11558:	bl	10d3c <error@plt>
   1155c:	b	112e8 <__assert_fail@plt+0x45c>
   11560:	cmp	r8, r2
   11564:	sbcs	r1, r9, r3
   11568:	movlt	r8, r2
   1156c:	movlt	r9, r3
   11570:	b	11280 <__assert_fail@plt+0x3f4>
   11574:	ldr	r3, [sp, #80]	; 0x50
   11578:	and	r3, r3, #53248	; 0xd000
   1157c:	cmp	r3, #32768	; 0x8000
   11580:	bne	11698 <__assert_fail@plt+0x80c>
   11584:	ldrd	r8, [sp, #112]	; 0x70
   11588:	cmp	r8, #0
   1158c:	sbcs	r3, r9, #0
   11590:	movlt	r2, #5
   11594:	ldrlt	r1, [pc, #828]	; 118d8 <__assert_fail@plt+0xa4c>
   11598:	bge	11394 <__assert_fail@plt+0x508>
   1159c:	b	113e8 <__assert_fail@plt+0x55c>
   115a0:	cmp	r8, r2
   115a4:	sbcs	r3, r9, r3
   115a8:	bge	1126c <__assert_fail@plt+0x3e0>
   115ac:	strd	r8, [sp, #32]
   115b0:	b	1126c <__assert_fail@plt+0x3e0>
   115b4:	adds	r0, r8, r2
   115b8:	adc	r1, r9, r3
   115bc:	strd	r0, [sp, #32]
   115c0:	b	1126c <__assert_fail@plt+0x3e0>
   115c4:	mov	r0, r8
   115c8:	mov	r1, r9
   115cc:	bl	18734 <__assert_fail@plt+0x78a8>
   115d0:	subs	r8, r8, r2
   115d4:	sbc	r9, r9, r3
   115d8:	b	115ac <__assert_fail@plt+0x720>
   115dc:	ldrd	r2, [sp, #24]
   115e0:	mvn	r9, #0
   115e4:	mvn	r8, #0
   115e8:	cmp	r3, r9
   115ec:	cmpeq	r2, r8
   115f0:	moveq	r3, r0
   115f4:	beq	114d8 <__assert_fail@plt+0x64c>
   115f8:	mov	r0, #0
   115fc:	mov	r1, #-2147483648	; 0x80000000
   11600:	bl	18734 <__assert_fail@plt+0x78a8>
   11604:	asr	r3, r6, #31
   11608:	cmp	r0, r6
   1160c:	sbcs	r3, r1, r3
   11610:	movlt	r3, #1
   11614:	movge	r3, #0
   11618:	b	114d8 <__assert_fail@plt+0x64c>
   1161c:	mov	r0, r8
   11620:	mov	r1, r9
   11624:	bl	18734 <__assert_fail@plt+0x78a8>
   11628:	orrs	r1, r2, r3
   1162c:	beq	115b4 <__assert_fail@plt+0x728>
   11630:	ldrd	r0, [sp, #32]
   11634:	subs	r0, r0, r2
   11638:	sbc	r1, r1, r3
   1163c:	mov	r2, r0
   11640:	mov	r3, r1
   11644:	b	113b8 <__assert_fail@plt+0x52c>
   11648:	mov	r0, r8
   1164c:	bl	10d48 <open64@plt>
   11650:	subs	r4, r0, #0
   11654:	bge	11710 <__assert_fail@plt+0x884>
   11658:	bl	10dc0 <__errno_location@plt>
   1165c:	ldr	r1, [pc, #632]	; 118dc <__assert_fail@plt+0xa50>
   11660:	mov	r2, #5
   11664:	ldr	r4, [r0]
   11668:	mov	r0, #0
   1166c:	bl	10cc4 <dcgettext@plt>
   11670:	ldr	r3, [pc, #532]	; 1188c <__assert_fail@plt+0xa00>
   11674:	ldr	r1, [r3, #4]
   11678:	mov	r5, r0
   1167c:	mov	r0, #4
   11680:	bl	14400 <__assert_fail@plt+0x3574>
   11684:	mov	r2, r5
   11688:	mov	r1, r4
   1168c:	mov	r3, r0
   11690:	mov	r0, #1
   11694:	bl	10d3c <error@plt>
   11698:	mov	r3, #2
   1169c:	mov	r2, #0
   116a0:	str	r3, [sp]
   116a4:	mov	r0, r5
   116a8:	mov	r3, r2
   116ac:	bl	10d0c <lseek64@plt>
   116b0:	cmp	r0, #0
   116b4:	sbcs	r3, r1, #0
   116b8:	mov	r8, r0
   116bc:	mov	r9, r1
   116c0:	bge	11394 <__assert_fail@plt+0x508>
   116c4:	bl	10dc0 <__errno_location@plt>
   116c8:	mov	r2, #5
   116cc:	ldr	r1, [pc, #520]	; 118dc <__assert_fail@plt+0xa50>
   116d0:	b	11440 <__assert_fail@plt+0x5b4>
   116d4:	ldr	r3, [sp, #32]
   116d8:	cmp	r3, r4
   116dc:	beq	1175c <__assert_fail@plt+0x8d0>
   116e0:	cmp	r7, #0
   116e4:	bgt	111d0 <__assert_fail@plt+0x344>
   116e8:	mov	r2, #5
   116ec:	ldr	r1, [pc, #492]	; 118e0 <__assert_fail@plt+0xa54>
   116f0:	mov	r0, #0
   116f4:	bl	10cc4 <dcgettext@plt>
   116f8:	mov	r2, r0
   116fc:	mov	r1, #0
   11700:	mov	r0, r1
   11704:	bl	10d3c <error@plt>
   11708:	mov	r0, #1
   1170c:	bl	11a30 <__assert_fail@plt+0xba4>
   11710:	mov	r3, #2
   11714:	mov	r2, #0
   11718:	str	r3, [sp]
   1171c:	mov	r3, #0
   11720:	bl	10d0c <lseek64@plt>
   11724:	mov	r9, r1
   11728:	mov	r8, r0
   1172c:	strd	r8, [sp, #48]	; 0x30
   11730:	bl	10dc0 <__errno_location@plt>
   11734:	mov	r7, r0
   11738:	mov	r0, r4
   1173c:	ldr	r4, [r7]
   11740:	bl	10e80 <close@plt>
   11744:	mov	r3, r9
   11748:	cmp	r8, #0
   1174c:	sbcs	r3, r3, #0
   11750:	bge	111bc <__assert_fail@plt+0x330>
   11754:	str	r4, [r7]
   11758:	b	11658 <__assert_fail@plt+0x7cc>
   1175c:	mov	r2, #5
   11760:	mov	r0, r3
   11764:	ldr	r1, [pc, #376]	; 118e4 <__assert_fail@plt+0xa58>
   11768:	mov	r6, r3
   1176c:	bl	10cc4 <dcgettext@plt>
   11770:	ldr	r1, [pc, #368]	; 118e8 <__assert_fail@plt+0xa5c>
   11774:	mov	r4, r0
   11778:	mov	r0, r6
   1177c:	bl	15bbc <__assert_fail@plt+0x4d30>
   11780:	ldr	r1, [pc, #356]	; 118ec <__assert_fail@plt+0xa60>
   11784:	mov	r5, r0
   11788:	mov	r0, #1
   1178c:	bl	15bbc <__assert_fail@plt+0x4d30>
   11790:	mov	r3, r5
   11794:	mov	r2, r4
   11798:	mov	r1, r6
   1179c:	str	r0, [sp]
   117a0:	mov	r0, r1
   117a4:	bl	10d3c <error@plt>
   117a8:	b	10f44 <__assert_fail@plt+0xb8>
   117ac:	bl	10dc0 <__errno_location@plt>
   117b0:	ldr	r1, [pc, #312]	; 118f0 <__assert_fail@plt+0xa64>
   117b4:	mov	r2, #5
   117b8:	ldr	r4, [r0]
   117bc:	mov	r0, r9
   117c0:	bl	10cc4 <dcgettext@plt>
   117c4:	mov	r1, r8
   117c8:	mov	r5, r0
   117cc:	b	1167c <__assert_fail@plt+0x7f0>
   117d0:	mov	r2, #5
   117d4:	ldr	r1, [pc, #280]	; 118f4 <__assert_fail@plt+0xa68>
   117d8:	mov	r0, #0
   117dc:	bl	10cc4 <dcgettext@plt>
   117e0:	mov	r1, #0
   117e4:	mov	r2, r0
   117e8:	mov	r0, #1
   117ec:	bl	10d3c <error@plt>
   117f0:	ldr	r1, [pc, #256]	; 118f8 <__assert_fail@plt+0xa6c>
   117f4:	mov	r0, r3
   117f8:	str	r3, [sp, #24]
   117fc:	bl	10cc4 <dcgettext@plt>
   11800:	mov	r2, r0
   11804:	b	116fc <__assert_fail@plt+0x870>
   11808:	mov	r2, #5
   1180c:	ldr	r1, [pc, #232]	; 118fc <__assert_fail@plt+0xa70>
   11810:	mov	r0, r4
   11814:	bl	10cc4 <dcgettext@plt>
   11818:	ldr	r1, [pc, #200]	; 118e8 <__assert_fail@plt+0xa5c>
   1181c:	mov	r5, r0
   11820:	mov	r0, r4
   11824:	bl	15bbc <__assert_fail@plt+0x4d30>
   11828:	ldr	r1, [pc, #188]	; 118ec <__assert_fail@plt+0xa60>
   1182c:	mov	r6, r0
   11830:	mov	r0, #1
   11834:	bl	15bbc <__assert_fail@plt+0x4d30>
   11838:	mov	r3, r6
   1183c:	mov	r2, r5
   11840:	mov	r1, r4
   11844:	b	1179c <__assert_fail@plt+0x910>
   11848:	mov	r2, #5
   1184c:	ldr	r1, [pc, #172]	; 11900 <__assert_fail@plt+0xa74>
   11850:	mov	r0, r4
   11854:	bl	10cc4 <dcgettext@plt>
   11858:	ldr	r1, [pc, #164]	; 11904 <__assert_fail@plt+0xa78>
   1185c:	mov	r5, r0
   11860:	mov	r0, r4
   11864:	bl	15bbc <__assert_fail@plt+0x4d30>
   11868:	ldr	r1, [pc, #120]	; 118e8 <__assert_fail@plt+0xa5c>
   1186c:	mov	r6, r0
   11870:	b	11830 <__assert_fail@plt+0x9a4>
   11874:	andeq	r8, r1, r0, asr #21
   11878:	andeq	r9, r1, r0
   1187c:	andeq	r8, r1, r8, asr pc
   11880:	andeq	r8, r1, r0, lsl #20
   11884:	andeq	r1, r1, r0, asr #27
   11888:	andeq	r9, r1, r4, lsl #1
   1188c:	andeq	sl, r2, r0, asr r1
   11890:	andeq	sl, r2, r8, asr #2
   11894:	andeq	sl, r2, r4, asr #2
   11898:	andeq	sl, r2, r4, ror #1
   1189c:	andeq	r9, r1, r4, ror r0
   118a0:	andeq	r8, r1, r0, ror sl
   118a4:	andeq	r8, r1, r4, asr pc
   118a8:	andeq	r9, r1, r0, asr #32
   118ac:	andeq	r9, r1, r0, asr r0
   118b0:	andeq	sl, r2, r8, lsr r1
   118b4:	andeq	r0, r0, r1, lsl #16
   118b8:	andeq	r0, r0, r1, asr #16
   118bc:			; <UNDEFINED> instruction: 0x000001b6
   118c0:			; <UNDEFINED> instruction: 0x000191b4
   118c4:	andeq	r9, r1, ip, asr r1
   118c8:	andeq	r9, r1, ip, lsl r2
   118cc:	andeq	r9, r1, r8, ror r1
   118d0:	ldrdeq	r9, [r1], -r8
   118d4:	andeq	r9, r1, ip, ror #3
   118d8:	andeq	r9, r1, r8, lsl #3
   118dc:	andeq	r9, r1, r0, asr #2
   118e0:	andeq	r9, r1, r8, lsl r1
   118e4:	andeq	r9, r1, ip, lsl #1
   118e8:	strheq	r9, [r1], -r0
   118ec:	strheq	r9, [r1], -r8
   118f0:	andeq	r9, r1, r0, lsr r1
   118f4:	andeq	r9, r1, r0, rrx
   118f8:	andeq	r9, r1, r8, lsl r0
   118fc:	andeq	r9, r1, r4, asr #1
   11900:	andeq	r9, r1, ip, ror #1
   11904:	andeq	r9, r1, ip, lsl #2
   11908:	mov	fp, #0
   1190c:	mov	lr, #0
   11910:	pop	{r1}		; (ldr r1, [sp], #4)
   11914:	mov	r2, sp
   11918:	push	{r2}		; (str r2, [sp, #-4]!)
   1191c:	push	{r0}		; (str r0, [sp, #-4]!)
   11920:	ldr	ip, [pc, #16]	; 11938 <__assert_fail@plt+0xaac>
   11924:	push	{ip}		; (str ip, [sp, #-4]!)
   11928:	ldr	r0, [pc, #12]	; 1193c <__assert_fail@plt+0xab0>
   1192c:	ldr	r3, [pc, #12]	; 11940 <__assert_fail@plt+0xab4>
   11930:	bl	10d60 <__libc_start_main@plt>
   11934:	bl	10e74 <abort@plt>
   11938:	andeq	r8, r1, r0, lsr #19
   1193c:	muleq	r1, r8, lr
   11940:	andeq	r8, r1, r0, asr #18
   11944:	ldr	r3, [pc, #20]	; 11960 <__assert_fail@plt+0xad4>
   11948:	ldr	r2, [pc, #20]	; 11964 <__assert_fail@plt+0xad8>
   1194c:	add	r3, pc, r3
   11950:	ldr	r2, [r3, r2]
   11954:	cmp	r2, #0
   11958:	bxeq	lr
   1195c:	b	10d78 <__gmon_start__@plt>
   11960:	andeq	r8, r1, ip, lsr #13
   11964:	ldrdeq	r0, [r0], -r8
   11968:	ldr	r3, [pc, #28]	; 1198c <__assert_fail@plt+0xb00>
   1196c:	ldr	r0, [pc, #28]	; 11990 <__assert_fail@plt+0xb04>
   11970:	sub	r3, r3, r0
   11974:	cmp	r3, #6
   11978:	bxls	lr
   1197c:	ldr	r3, [pc, #16]	; 11994 <__assert_fail@plt+0xb08>
   11980:	cmp	r3, #0
   11984:	bxeq	lr
   11988:	bx	r3
   1198c:	andeq	sl, r2, pc, lsr #2
   11990:	andeq	sl, r2, ip, lsr #2
   11994:	andeq	r0, r0, r0
   11998:	ldr	r1, [pc, #36]	; 119c4 <__assert_fail@plt+0xb38>
   1199c:	ldr	r0, [pc, #36]	; 119c8 <__assert_fail@plt+0xb3c>
   119a0:	sub	r1, r1, r0
   119a4:	asr	r1, r1, #2
   119a8:	add	r1, r1, r1, lsr #31
   119ac:	asrs	r1, r1, #1
   119b0:	bxeq	lr
   119b4:	ldr	r3, [pc, #16]	; 119cc <__assert_fail@plt+0xb40>
   119b8:	cmp	r3, #0
   119bc:	bxeq	lr
   119c0:	bx	r3
   119c4:	andeq	sl, r2, ip, lsr #2
   119c8:	andeq	sl, r2, ip, lsr #2
   119cc:	andeq	r0, r0, r0
   119d0:	push	{r4, lr}
   119d4:	ldr	r4, [pc, #24]	; 119f4 <__assert_fail@plt+0xb68>
   119d8:	ldrb	r3, [r4]
   119dc:	cmp	r3, #0
   119e0:	popne	{r4, pc}
   119e4:	bl	11968 <__assert_fail@plt+0xadc>
   119e8:	mov	r3, #1
   119ec:	strb	r3, [r4]
   119f0:	pop	{r4, pc}
   119f4:	andeq	sl, r2, ip, asr #2
   119f8:	ldr	r0, [pc, #40]	; 11a28 <__assert_fail@plt+0xb9c>
   119fc:	ldr	r3, [r0]
   11a00:	cmp	r3, #0
   11a04:	bne	11a0c <__assert_fail@plt+0xb80>
   11a08:	b	11998 <__assert_fail@plt+0xb0c>
   11a0c:	ldr	r3, [pc, #24]	; 11a2c <__assert_fail@plt+0xba0>
   11a10:	cmp	r3, #0
   11a14:	beq	11a08 <__assert_fail@plt+0xb7c>
   11a18:	push	{r4, lr}
   11a1c:	blx	r3
   11a20:	pop	{r4, lr}
   11a24:	b	11998 <__assert_fail@plt+0xb0c>
   11a28:	andeq	r9, r2, r4, lsl pc
   11a2c:	andeq	r0, r0, r0
   11a30:	subs	r5, r0, #0
   11a34:	push	{r7, lr}
   11a38:	sub	sp, sp, #56	; 0x38
   11a3c:	beq	11a78 <__assert_fail@plt+0xbec>
   11a40:	ldr	r3, [pc, #756]	; 11d3c <__assert_fail@plt+0xeb0>
   11a44:	mov	r2, #5
   11a48:	ldr	r1, [pc, #752]	; 11d40 <__assert_fail@plt+0xeb4>
   11a4c:	mov	r0, #0
   11a50:	ldr	r4, [r3]
   11a54:	bl	10cc4 <dcgettext@plt>
   11a58:	ldr	r3, [pc, #740]	; 11d44 <__assert_fail@plt+0xeb8>
   11a5c:	mov	r1, #1
   11a60:	ldr	r3, [r3]
   11a64:	mov	r2, r0
   11a68:	mov	r0, r4
   11a6c:	bl	10dfc <__fprintf_chk@plt>
   11a70:	mov	r0, r5
   11a74:	bl	10d9c <exit@plt>
   11a78:	mov	r2, #5
   11a7c:	ldr	r1, [pc, #708]	; 11d48 <__assert_fail@plt+0xebc>
   11a80:	bl	10cc4 <dcgettext@plt>
   11a84:	ldr	r3, [pc, #696]	; 11d44 <__assert_fail@plt+0xeb8>
   11a88:	ldr	r7, [pc, #700]	; 11d4c <__assert_fail@plt+0xec0>
   11a8c:	ldr	r4, [pc, #700]	; 11d50 <__assert_fail@plt+0xec4>
   11a90:	ldr	r2, [r3]
   11a94:	mov	r1, r0
   11a98:	mov	r0, #1
   11a9c:	bl	10de4 <__printf_chk@plt>
   11aa0:	mov	r2, #5
   11aa4:	ldr	r1, [pc, #680]	; 11d54 <__assert_fail@plt+0xec8>
   11aa8:	mov	r0, r5
   11aac:	bl	10cc4 <dcgettext@plt>
   11ab0:	ldr	r1, [r7]
   11ab4:	bl	10c40 <fputs_unlocked@plt>
   11ab8:	mov	r2, #5
   11abc:	ldr	r1, [pc, #660]	; 11d58 <__assert_fail@plt+0xecc>
   11ac0:	mov	r0, r5
   11ac4:	bl	10cc4 <dcgettext@plt>
   11ac8:	ldr	r1, [r7]
   11acc:	bl	10c40 <fputs_unlocked@plt>
   11ad0:	mov	r2, #5
   11ad4:	ldr	r1, [pc, #640]	; 11d5c <__assert_fail@plt+0xed0>
   11ad8:	mov	r0, r5
   11adc:	bl	10cc4 <dcgettext@plt>
   11ae0:	ldr	r1, [r7]
   11ae4:	bl	10c40 <fputs_unlocked@plt>
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #620]	; 11d60 <__assert_fail@plt+0xed4>
   11af0:	mov	r0, r5
   11af4:	bl	10cc4 <dcgettext@plt>
   11af8:	ldr	r1, [r7]
   11afc:	bl	10c40 <fputs_unlocked@plt>
   11b00:	mov	r2, #5
   11b04:	ldr	r1, [pc, #600]	; 11d64 <__assert_fail@plt+0xed8>
   11b08:	mov	r0, r5
   11b0c:	bl	10cc4 <dcgettext@plt>
   11b10:	ldr	r1, [r7]
   11b14:	bl	10c40 <fputs_unlocked@plt>
   11b18:	mov	r2, #5
   11b1c:	ldr	r1, [pc, #580]	; 11d68 <__assert_fail@plt+0xedc>
   11b20:	mov	r0, r5
   11b24:	bl	10cc4 <dcgettext@plt>
   11b28:	ldr	r1, [r7]
   11b2c:	bl	10c40 <fputs_unlocked@plt>
   11b30:	mov	r2, #5
   11b34:	ldr	r1, [pc, #560]	; 11d6c <__assert_fail@plt+0xee0>
   11b38:	mov	r0, r5
   11b3c:	bl	10cc4 <dcgettext@plt>
   11b40:	ldr	r1, [r7]
   11b44:	bl	10c40 <fputs_unlocked@plt>
   11b48:	mov	r2, #5
   11b4c:	ldr	r1, [pc, #540]	; 11d70 <__assert_fail@plt+0xee4>
   11b50:	mov	r0, r5
   11b54:	bl	10cc4 <dcgettext@plt>
   11b58:	ldr	r1, [r7]
   11b5c:	bl	10c40 <fputs_unlocked@plt>
   11b60:	mov	r2, #5
   11b64:	ldr	r1, [pc, #520]	; 11d74 <__assert_fail@plt+0xee8>
   11b68:	mov	r0, r5
   11b6c:	bl	10cc4 <dcgettext@plt>
   11b70:	ldr	r1, [r7]
   11b74:	bl	10c40 <fputs_unlocked@plt>
   11b78:	ldm	r4!, {r0, r1, r2, r3}
   11b7c:	mov	lr, sp
   11b80:	stmia	lr!, {r0, r1, r2, r3}
   11b84:	ldm	r4!, {r0, r1, r2, r3}
   11b88:	ldr	ip, [sp]
   11b8c:	stmia	lr!, {r0, r1, r2, r3}
   11b90:	cmp	ip, #0
   11b94:	ldm	r4!, {r0, r1, r2, r3}
   11b98:	stmia	lr!, {r0, r1, r2, r3}
   11b9c:	ldm	r4, {r0, r1}
   11ba0:	moveq	r4, sp
   11ba4:	stm	lr, {r0, r1}
   11ba8:	beq	11bd8 <__assert_fail@plt+0xd4c>
   11bac:	ldr	r6, [pc, #452]	; 11d78 <__assert_fail@plt+0xeec>
   11bb0:	mov	r4, sp
   11bb4:	b	11bc4 <__assert_fail@plt+0xd38>
   11bb8:	ldr	ip, [r4, #8]!
   11bbc:	cmp	ip, #0
   11bc0:	beq	11bd8 <__assert_fail@plt+0xd4c>
   11bc4:	mov	r1, ip
   11bc8:	mov	r0, r6
   11bcc:	bl	10c58 <strcmp@plt>
   11bd0:	cmp	r0, #0
   11bd4:	bne	11bb8 <__assert_fail@plt+0xd2c>
   11bd8:	ldr	r4, [r4, #4]
   11bdc:	mov	r2, #5
   11be0:	cmp	r4, #0
   11be4:	ldr	r1, [pc, #400]	; 11d7c <__assert_fail@plt+0xef0>
   11be8:	beq	11c90 <__assert_fail@plt+0xe04>
   11bec:	mov	r0, #0
   11bf0:	bl	10cc4 <dcgettext@plt>
   11bf4:	ldr	r3, [pc, #388]	; 11d80 <__assert_fail@plt+0xef4>
   11bf8:	ldr	r2, [pc, #388]	; 11d84 <__assert_fail@plt+0xef8>
   11bfc:	mov	r1, r0
   11c00:	mov	r0, #1
   11c04:	bl	10de4 <__printf_chk@plt>
   11c08:	mov	r1, #0
   11c0c:	mov	r0, #5
   11c10:	bl	10e20 <setlocale@plt>
   11c14:	cmp	r0, #0
   11c18:	ldreq	r6, [pc, #344]	; 11d78 <__assert_fail@plt+0xeec>
   11c1c:	beq	11c38 <__assert_fail@plt+0xdac>
   11c20:	mov	r2, #3
   11c24:	ldr	r1, [pc, #348]	; 11d88 <__assert_fail@plt+0xefc>
   11c28:	bl	10e68 <strncmp@plt>
   11c2c:	ldr	r6, [pc, #324]	; 11d78 <__assert_fail@plt+0xeec>
   11c30:	cmp	r0, #0
   11c34:	bne	11d20 <__assert_fail@plt+0xe94>
   11c38:	mov	r2, #5
   11c3c:	ldr	r1, [pc, #328]	; 11d8c <__assert_fail@plt+0xf00>
   11c40:	mov	r0, #0
   11c44:	bl	10cc4 <dcgettext@plt>
   11c48:	ldr	r3, [pc, #296]	; 11d78 <__assert_fail@plt+0xeec>
   11c4c:	ldr	r2, [pc, #300]	; 11d80 <__assert_fail@plt+0xef4>
   11c50:	mov	r1, r0
   11c54:	mov	r0, #1
   11c58:	bl	10de4 <__printf_chk@plt>
   11c5c:	mov	r2, #5
   11c60:	ldr	r1, [pc, #296]	; 11d90 <__assert_fail@plt+0xf04>
   11c64:	mov	r0, #0
   11c68:	bl	10cc4 <dcgettext@plt>
   11c6c:	ldr	r2, [pc, #288]	; 11d94 <__assert_fail@plt+0xf08>
   11c70:	cmp	r4, r6
   11c74:	ldr	r3, [pc, #284]	; 11d98 <__assert_fail@plt+0xf0c>
   11c78:	movne	r3, r2
   11c7c:	mov	r1, r0
   11c80:	mov	r2, r4
   11c84:	mov	r0, #1
   11c88:	bl	10de4 <__printf_chk@plt>
   11c8c:	b	11a70 <__assert_fail@plt+0xbe4>
   11c90:	mov	r0, r4
   11c94:	bl	10cc4 <dcgettext@plt>
   11c98:	ldr	r3, [pc, #224]	; 11d80 <__assert_fail@plt+0xef4>
   11c9c:	ldr	r2, [pc, #224]	; 11d84 <__assert_fail@plt+0xef8>
   11ca0:	mov	r1, r0
   11ca4:	mov	r0, #1
   11ca8:	bl	10de4 <__printf_chk@plt>
   11cac:	mov	r1, r4
   11cb0:	mov	r0, #5
   11cb4:	bl	10e20 <setlocale@plt>
   11cb8:	cmp	r0, #0
   11cbc:	beq	11cd4 <__assert_fail@plt+0xe48>
   11cc0:	mov	r2, #3
   11cc4:	ldr	r1, [pc, #188]	; 11d88 <__assert_fail@plt+0xefc>
   11cc8:	bl	10e68 <strncmp@plt>
   11ccc:	cmp	r0, #0
   11cd0:	bne	11d18 <__assert_fail@plt+0xe8c>
   11cd4:	mov	r2, #5
   11cd8:	ldr	r1, [pc, #172]	; 11d8c <__assert_fail@plt+0xf00>
   11cdc:	mov	r0, #0
   11ce0:	bl	10cc4 <dcgettext@plt>
   11ce4:	ldr	r3, [pc, #140]	; 11d78 <__assert_fail@plt+0xeec>
   11ce8:	ldr	r2, [pc, #144]	; 11d80 <__assert_fail@plt+0xef4>
   11cec:	mov	r4, r3
   11cf0:	mov	r1, r0
   11cf4:	mov	r0, #1
   11cf8:	bl	10de4 <__printf_chk@plt>
   11cfc:	ldr	r1, [pc, #140]	; 11d90 <__assert_fail@plt+0xf04>
   11d00:	mov	r2, #5
   11d04:	mov	r0, #0
   11d08:	bl	10cc4 <dcgettext@plt>
   11d0c:	ldr	r3, [pc, #132]	; 11d98 <__assert_fail@plt+0xf0c>
   11d10:	mov	r1, r0
   11d14:	b	11c80 <__assert_fail@plt+0xdf4>
   11d18:	ldr	r6, [pc, #88]	; 11d78 <__assert_fail@plt+0xeec>
   11d1c:	mov	r4, r6
   11d20:	mov	r2, #5
   11d24:	ldr	r1, [pc, #112]	; 11d9c <__assert_fail@plt+0xf10>
   11d28:	mov	r0, #0
   11d2c:	bl	10cc4 <dcgettext@plt>
   11d30:	ldr	r1, [r7]
   11d34:	bl	10c40 <fputs_unlocked@plt>
   11d38:	b	11c38 <__assert_fail@plt+0xdac>
   11d3c:	andeq	sl, r2, r0, asr #2
   11d40:	andeq	r8, r1, ip, ror sl
   11d44:	andeq	sl, r2, r0, ror #2
   11d48:	andeq	r8, r1, r4, lsr #21
   11d4c:	andeq	sl, r2, r4, asr #2
   11d50:	andeq	r8, r1, r8, asr #19
   11d54:	andeq	r8, r1, r4, asr #21
   11d58:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11d5c:	andeq	r8, r1, r4, lsr #24
   11d60:	andeq	r8, r1, r8, asr ip
   11d64:	andeq	r8, r1, r8, lsr #25
   11d68:	andeq	r8, r1, r8, lsl sp
   11d6c:	andeq	r8, r1, r8, asr #26
   11d70:	andeq	r8, r1, r0, lsl #27
   11d74:	andeq	r8, r1, r4, asr lr
   11d78:	andeq	r8, r1, r0, ror sl
   11d7c:	andeq	r8, r1, r4, lsl pc
   11d80:	andeq	r8, r1, ip, lsr #30
   11d84:	andeq	r8, r1, r4, asr pc
   11d88:	andeq	r8, r1, r4, ror #30
   11d8c:			; <UNDEFINED> instruction: 0x00018fb0
   11d90:	andeq	r8, r1, ip, asr #31
   11d94:	andeq	r8, r1, r0, asr #21
   11d98:	andeq	r9, r1, r8, asr #4
   11d9c:	andeq	r8, r1, r8, ror #30
   11da0:	ldr	r3, [pc, #4]	; 11dac <__assert_fail@plt+0xf20>
   11da4:	str	r0, [r3]
   11da8:	bx	lr
   11dac:	andeq	sl, r2, r8, asr r1
   11db0:	ldr	r3, [pc, #4]	; 11dbc <__assert_fail@plt+0xf30>
   11db4:	strb	r0, [r3, #4]
   11db8:	bx	lr
   11dbc:	andeq	sl, r2, r8, asr r1
   11dc0:	ldr	r3, [pc, #192]	; 11e88 <__assert_fail@plt+0xffc>
   11dc4:	push	{r4, r5, r6, lr}
   11dc8:	sub	sp, sp, #8
   11dcc:	ldr	r0, [r3]
   11dd0:	bl	17eac <__assert_fail@plt+0x7020>
   11dd4:	cmp	r0, #0
   11dd8:	beq	11dfc <__assert_fail@plt+0xf70>
   11ddc:	ldr	r4, [pc, #168]	; 11e8c <__assert_fail@plt+0x1000>
   11de0:	ldrb	r3, [r4, #4]
   11de4:	cmp	r3, #0
   11de8:	beq	11e18 <__assert_fail@plt+0xf8c>
   11dec:	bl	10dc0 <__errno_location@plt>
   11df0:	ldr	r3, [r0]
   11df4:	cmp	r3, #32
   11df8:	bne	11e18 <__assert_fail@plt+0xf8c>
   11dfc:	ldr	r3, [pc, #140]	; 11e90 <__assert_fail@plt+0x1004>
   11e00:	ldr	r0, [r3]
   11e04:	bl	17eac <__assert_fail@plt+0x7020>
   11e08:	cmp	r0, #0
   11e0c:	bne	11e60 <__assert_fail@plt+0xfd4>
   11e10:	add	sp, sp, #8
   11e14:	pop	{r4, r5, r6, pc}
   11e18:	mov	r2, #5
   11e1c:	ldr	r1, [pc, #112]	; 11e94 <__assert_fail@plt+0x1008>
   11e20:	mov	r0, #0
   11e24:	bl	10cc4 <dcgettext@plt>
   11e28:	ldr	r4, [r4]
   11e2c:	cmp	r4, #0
   11e30:	mov	r5, r0
   11e34:	beq	11e6c <__assert_fail@plt+0xfe0>
   11e38:	bl	10dc0 <__errno_location@plt>
   11e3c:	ldr	r6, [r0]
   11e40:	mov	r0, r4
   11e44:	bl	14b10 <__assert_fail@plt+0x3c84>
   11e48:	mov	r1, r6
   11e4c:	str	r5, [sp]
   11e50:	ldr	r2, [pc, #64]	; 11e98 <__assert_fail@plt+0x100c>
   11e54:	mov	r3, r0
   11e58:	mov	r0, #0
   11e5c:	bl	10d3c <error@plt>
   11e60:	ldr	r3, [pc, #52]	; 11e9c <__assert_fail@plt+0x1010>
   11e64:	ldr	r0, [r3]
   11e68:	bl	10c7c <_exit@plt>
   11e6c:	bl	10dc0 <__errno_location@plt>
   11e70:	mov	r3, r5
   11e74:	ldr	r2, [pc, #36]	; 11ea0 <__assert_fail@plt+0x1014>
   11e78:	ldr	r1, [r0]
   11e7c:	mov	r0, r4
   11e80:	bl	10d3c <error@plt>
   11e84:	b	11e60 <__assert_fail@plt+0xfd4>
   11e88:	andeq	sl, r2, r4, asr #2
   11e8c:	andeq	sl, r2, r8, asr r1
   11e90:	andeq	sl, r2, r0, asr #2
   11e94:	strdeq	r9, [r1], -r8
   11e98:	andeq	r9, r1, r4, lsl #6
   11e9c:	andeq	sl, r2, r8, ror #1
   11ea0:	andeq	r9, r1, r8, lsl #6
   11ea4:	push	{r4, r5, r6, lr}
   11ea8:	subs	r4, r0, #0
   11eac:	beq	11f20 <__assert_fail@plt+0x1094>
   11eb0:	mov	r1, #47	; 0x2f
   11eb4:	bl	10e2c <strrchr@plt>
   11eb8:	subs	r5, r0, #0
   11ebc:	beq	11f0c <__assert_fail@plt+0x1080>
   11ec0:	add	r6, r5, #1
   11ec4:	sub	r3, r6, r4
   11ec8:	cmp	r3, #6
   11ecc:	ble	11f0c <__assert_fail@plt+0x1080>
   11ed0:	mov	r2, #7
   11ed4:	ldr	r1, [pc, #96]	; 11f3c <__assert_fail@plt+0x10b0>
   11ed8:	sub	r0, r5, #6
   11edc:	bl	10e68 <strncmp@plt>
   11ee0:	cmp	r0, #0
   11ee4:	bne	11f0c <__assert_fail@plt+0x1080>
   11ee8:	mov	r2, #3
   11eec:	ldr	r1, [pc, #76]	; 11f40 <__assert_fail@plt+0x10b4>
   11ef0:	mov	r0, r6
   11ef4:	bl	10e68 <strncmp@plt>
   11ef8:	cmp	r0, #0
   11efc:	movne	r4, r6
   11f00:	ldreq	r3, [pc, #60]	; 11f44 <__assert_fail@plt+0x10b8>
   11f04:	addeq	r4, r5, #4
   11f08:	streq	r4, [r3]
   11f0c:	ldr	r2, [pc, #52]	; 11f48 <__assert_fail@plt+0x10bc>
   11f10:	ldr	r3, [pc, #52]	; 11f4c <__assert_fail@plt+0x10c0>
   11f14:	str	r4, [r2]
   11f18:	str	r4, [r3]
   11f1c:	pop	{r4, r5, r6, pc}
   11f20:	ldr	r3, [pc, #40]	; 11f50 <__assert_fail@plt+0x10c4>
   11f24:	mov	r2, #55	; 0x37
   11f28:	mov	r1, #1
   11f2c:	ldr	r3, [r3]
   11f30:	ldr	r0, [pc, #28]	; 11f54 <__assert_fail@plt+0x10c8>
   11f34:	bl	10d00 <fwrite@plt>
   11f38:	bl	10e74 <abort@plt>
   11f3c:	andeq	r9, r1, r4, asr #6
   11f40:	andeq	r9, r1, ip, asr #6
   11f44:	andeq	sl, r2, r0, lsr r1
   11f48:	andeq	sl, r2, r0, ror #2
   11f4c:	andeq	sl, r2, r4, lsr r1
   11f50:	andeq	sl, r2, r0, asr #2
   11f54:	andeq	r9, r1, ip, lsl #6
   11f58:	push	{r4, r5, r6, lr}
   11f5c:	mov	r4, r0
   11f60:	mov	r5, r1
   11f64:	bl	18120 <__assert_fail@plt+0x7294>
   11f68:	ldrb	r3, [r0]
   11f6c:	bic	r3, r3, #32
   11f70:	cmp	r3, #85	; 0x55
   11f74:	bne	11fd4 <__assert_fail@plt+0x1148>
   11f78:	ldrb	r3, [r0, #1]
   11f7c:	bic	r3, r3, #32
   11f80:	cmp	r3, #84	; 0x54
   11f84:	bne	12010 <__assert_fail@plt+0x1184>
   11f88:	ldrb	r3, [r0, #2]
   11f8c:	bic	r3, r3, #32
   11f90:	cmp	r3, #70	; 0x46
   11f94:	bne	12010 <__assert_fail@plt+0x1184>
   11f98:	ldrb	r3, [r0, #3]
   11f9c:	cmp	r3, #45	; 0x2d
   11fa0:	bne	12010 <__assert_fail@plt+0x1184>
   11fa4:	ldrb	r3, [r0, #4]
   11fa8:	cmp	r3, #56	; 0x38
   11fac:	bne	12010 <__assert_fail@plt+0x1184>
   11fb0:	ldrb	r3, [r0, #5]
   11fb4:	cmp	r3, #0
   11fb8:	bne	12010 <__assert_fail@plt+0x1184>
   11fbc:	ldrb	r2, [r4]
   11fc0:	ldr	r3, [pc, #152]	; 12060 <__assert_fail@plt+0x11d4>
   11fc4:	ldr	r0, [pc, #152]	; 12064 <__assert_fail@plt+0x11d8>
   11fc8:	cmp	r2, #96	; 0x60
   11fcc:	movne	r0, r3
   11fd0:	pop	{r4, r5, r6, pc}
   11fd4:	cmp	r3, #71	; 0x47
   11fd8:	bne	12010 <__assert_fail@plt+0x1184>
   11fdc:	ldrb	r3, [r0, #1]
   11fe0:	bic	r3, r3, #32
   11fe4:	cmp	r3, #66	; 0x42
   11fe8:	bne	12010 <__assert_fail@plt+0x1184>
   11fec:	ldrb	r3, [r0, #2]
   11ff0:	cmp	r3, #49	; 0x31
   11ff4:	bne	12010 <__assert_fail@plt+0x1184>
   11ff8:	ldrb	r3, [r0, #3]
   11ffc:	cmp	r3, #56	; 0x38
   12000:	bne	12010 <__assert_fail@plt+0x1184>
   12004:	ldrb	r3, [r0, #4]
   12008:	cmp	r3, #48	; 0x30
   1200c:	beq	12024 <__assert_fail@plt+0x1198>
   12010:	ldr	r3, [pc, #80]	; 12068 <__assert_fail@plt+0x11dc>
   12014:	cmp	r5, #9
   12018:	ldr	r0, [pc, #76]	; 1206c <__assert_fail@plt+0x11e0>
   1201c:	movne	r0, r3
   12020:	pop	{r4, r5, r6, pc}
   12024:	ldrb	r3, [r0, #5]
   12028:	cmp	r3, #51	; 0x33
   1202c:	bne	12010 <__assert_fail@plt+0x1184>
   12030:	ldrb	r3, [r0, #6]
   12034:	cmp	r3, #48	; 0x30
   12038:	bne	12010 <__assert_fail@plt+0x1184>
   1203c:	ldrb	r3, [r0, #7]
   12040:	cmp	r3, #0
   12044:	bne	12010 <__assert_fail@plt+0x1184>
   12048:	ldrb	r2, [r4]
   1204c:	ldr	r3, [pc, #28]	; 12070 <__assert_fail@plt+0x11e4>
   12050:	ldr	r0, [pc, #28]	; 12074 <__assert_fail@plt+0x11e8>
   12054:	cmp	r2, #96	; 0x60
   12058:	movne	r0, r3
   1205c:	pop	{r4, r5, r6, pc}
   12060:	andeq	r9, r1, r8, lsr #7
   12064:	andeq	r9, r1, r4, lsr #7
   12068:			; <UNDEFINED> instruction: 0x000193b8
   1206c:			; <UNDEFINED> instruction: 0x000193b4
   12070:			; <UNDEFINED> instruction: 0x000193b0
   12074:	andeq	r9, r1, ip, lsr #7
   12078:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1207c:	sub	sp, sp, #140	; 0x8c
   12080:	mov	r9, r1
   12084:	str	r3, [sp, #24]
   12088:	mov	r3, #1
   1208c:	mov	sl, r0
   12090:	str	r2, [sp, #44]	; 0x2c
   12094:	str	r3, [sp, #28]
   12098:	bl	10d18 <__ctype_get_mb_cur_max@plt>
   1209c:	ldr	r3, [sp, #180]	; 0xb4
   120a0:	mov	fp, r9
   120a4:	mov	r9, sl
   120a8:	lsr	r3, r3, #1
   120ac:	and	r3, r3, #1
   120b0:	str	r3, [sp, #40]	; 0x28
   120b4:	ldr	r3, [sp, #180]	; 0xb4
   120b8:	mov	r2, #0
   120bc:	and	r3, r3, #4
   120c0:	str	r3, [sp, #100]	; 0x64
   120c4:	ldr	r3, [sp, #180]	; 0xb4
   120c8:	str	r2, [sp, #76]	; 0x4c
   120cc:	and	r3, r3, #1
   120d0:	str	r3, [sp, #96]	; 0x60
   120d4:	str	r2, [sp, #36]	; 0x24
   120d8:	str	r2, [sp, #56]	; 0x38
   120dc:	str	r2, [sp, #68]	; 0x44
   120e0:	str	r2, [sp, #72]	; 0x48
   120e4:	str	r2, [sp, #84]	; 0x54
   120e8:	str	r0, [sp, #80]	; 0x50
   120ec:	ldr	r3, [sp, #176]	; 0xb0
   120f0:	cmp	r3, #10
   120f4:	ldrls	pc, [pc, r3, lsl #2]
   120f8:	b	132d0 <__assert_fail@plt+0x2444>
   120fc:	andeq	r2, r1, r8, lsr #2
   12100:	andeq	r2, r1, r8, asr #8
   12104:	andeq	r2, r1, r0, lsr #11
   12108:	andeq	r2, r1, ip, ror r4
   1210c:	strdeq	r2, [r1], -r4
   12110:	ldrdeq	r2, [r1], -r4
   12114:	muleq	r1, ip, r4
   12118:	andeq	r2, r1, r0, asr #9
   1211c:	andeq	r2, r1, r8, ror #9
   12120:	andeq	r2, r1, r8, ror #9
   12124:	andeq	r2, r1, r8, ror #9
   12128:	mov	r3, #0
   1212c:	ldr	r1, [sp, #56]	; 0x38
   12130:	ldr	r2, [sp, #176]	; 0xb0
   12134:	ldr	lr, [sp, #176]	; 0xb0
   12138:	mov	r8, r3
   1213c:	mov	ip, r3
   12140:	str	r3, [sp, #40]	; 0x28
   12144:	mov	r3, r1
   12148:	cmp	r2, #2
   1214c:	moveq	r3, #0
   12150:	andne	r3, r3, #1
   12154:	mov	r0, r3
   12158:	str	r3, [sp, #92]	; 0x5c
   1215c:	ldr	r3, [sp, #68]	; 0x44
   12160:	sub	lr, lr, #2
   12164:	adds	r2, r3, #0
   12168:	movne	r2, #1
   1216c:	and	r3, r1, ip
   12170:	and	r3, r2, r3
   12174:	clz	lr, lr
   12178:	str	r3, [sp, #88]	; 0x58
   1217c:	lsr	lr, lr, #5
   12180:	mov	r3, ip
   12184:	and	r3, r3, lr
   12188:	mov	sl, #0
   1218c:	and	r0, r2, r0
   12190:	str	r3, [sp, #64]	; 0x40
   12194:	eor	r3, r1, #1
   12198:	str	lr, [sp, #52]	; 0x34
   1219c:	str	r0, [sp, #48]	; 0x30
   121a0:	str	r3, [sp, #60]	; 0x3c
   121a4:	ldr	r3, [sp, #24]
   121a8:	cmn	r3, #1
   121ac:	beq	126dc <__assert_fail@plt+0x1850>
   121b0:	subs	r7, r3, sl
   121b4:	movne	r7, #1
   121b8:	cmp	r7, #0
   121bc:	beq	126f4 <__assert_fail@plt+0x1868>
   121c0:	ldr	r3, [sp, #48]	; 0x30
   121c4:	cmp	r3, #0
   121c8:	beq	12a60 <__assert_fail@plt+0x1bd4>
   121cc:	ldr	r2, [sp, #68]	; 0x44
   121d0:	ldr	r1, [sp, #24]
   121d4:	cmp	r2, #1
   121d8:	mov	r3, r2
   121dc:	movls	r3, #0
   121e0:	movhi	r3, #1
   121e4:	cmn	r1, #1
   121e8:	movne	r3, #0
   121ec:	cmp	r3, #0
   121f0:	add	r4, sl, r2
   121f4:	beq	12204 <__assert_fail@plt+0x1378>
   121f8:	ldr	r0, [sp, #44]	; 0x2c
   121fc:	bl	10da8 <strlen@plt>
   12200:	str	r0, [sp, #24]
   12204:	ldr	r3, [sp, #24]
   12208:	cmp	r3, r4
   1220c:	ldr	r3, [sp, #44]	; 0x2c
   12210:	add	r5, r3, sl
   12214:	bcc	12a68 <__assert_fail@plt+0x1bdc>
   12218:	mov	r0, r5
   1221c:	ldr	r2, [sp, #68]	; 0x44
   12220:	ldr	r1, [sp, #72]	; 0x48
   12224:	bl	10cac <memcmp@plt>
   12228:	cmp	r0, #0
   1222c:	bne	12a68 <__assert_fail@plt+0x1bdc>
   12230:	ldr	r3, [sp, #40]	; 0x28
   12234:	cmp	r3, #0
   12238:	bne	13424 <__assert_fail@plt+0x2598>
   1223c:	ldrb	r4, [r5]
   12240:	cmp	r4, #126	; 0x7e
   12244:	ldrls	pc, [pc, r4, lsl #2]
   12248:	b	13360 <__assert_fail@plt+0x24d4>
   1224c:	andeq	r2, r1, r0, lsr #18
   12250:	andeq	r3, r1, r0, ror #6
   12254:	andeq	r3, r1, r0, ror #6
   12258:	andeq	r3, r1, r0, ror #6
   1225c:	andeq	r3, r1, r0, ror #6
   12260:	andeq	r3, r1, r0, ror #6
   12264:	andeq	r3, r1, r0, ror #6
   12268:	andeq	r2, r1, ip, lsl #18
   1226c:	strdeq	r2, [r1], -r8
   12270:	ldrdeq	r2, [r1], -r4
   12274:			; <UNDEFINED> instruction: 0x000128b4
   12278:	andeq	r2, r1, r4, ror #17
   1227c:	andeq	r2, r1, ip, lsl r8
   12280:	andeq	r2, r1, r0, asr sl
   12284:	andeq	r3, r1, r0, ror #6
   12288:	andeq	r3, r1, r0, ror #6
   1228c:	andeq	r3, r1, r0, ror #6
   12290:	andeq	r3, r1, r0, ror #6
   12294:	andeq	r3, r1, r0, ror #6
   12298:	andeq	r3, r1, r0, ror #6
   1229c:	andeq	r3, r1, r0, ror #6
   122a0:	andeq	r3, r1, r0, ror #6
   122a4:	andeq	r3, r1, r0, ror #6
   122a8:	andeq	r3, r1, r0, ror #6
   122ac:	andeq	r3, r1, r0, ror #6
   122b0:	andeq	r3, r1, r0, ror #6
   122b4:	andeq	r3, r1, r0, ror #6
   122b8:	andeq	r3, r1, r0, ror #6
   122bc:	andeq	r3, r1, r0, ror #6
   122c0:	andeq	r3, r1, r0, ror #6
   122c4:	andeq	r3, r1, r0, ror #6
   122c8:	andeq	r3, r1, r0, ror #6
   122cc:	andeq	r2, r1, r0, asr #20
   122d0:	andeq	r2, r1, r0, lsr #20
   122d4:	andeq	r2, r1, r0, lsr #20
   122d8:	andeq	r2, r1, r0, lsl #20
   122dc:	andeq	r2, r1, r0, lsr #20
   122e0:	andeq	r2, r1, ip, lsl #16
   122e4:	andeq	r2, r1, r0, lsr #20
   122e8:	andeq	r2, r1, r8, ror #15
   122ec:	andeq	r2, r1, r0, lsr #20
   122f0:	andeq	r2, r1, r0, lsr #20
   122f4:	andeq	r2, r1, r0, lsr #20
   122f8:	andeq	r2, r1, ip, lsl #16
   122fc:	andeq	r2, r1, ip, lsl #16
   12300:	andeq	r2, r1, ip, lsl #16
   12304:	andeq	r2, r1, ip, lsl #16
   12308:	andeq	r2, r1, ip, lsl #16
   1230c:	andeq	r2, r1, ip, lsl #16
   12310:	andeq	r2, r1, ip, lsl #16
   12314:	andeq	r2, r1, ip, lsl #16
   12318:	andeq	r2, r1, ip, lsl #16
   1231c:	andeq	r2, r1, ip, lsl #16
   12320:	andeq	r2, r1, ip, lsl #16
   12324:	andeq	r2, r1, ip, lsl #16
   12328:	andeq	r2, r1, ip, lsl #16
   1232c:	andeq	r2, r1, ip, lsl #16
   12330:	andeq	r2, r1, ip, lsl #16
   12334:	andeq	r2, r1, ip, lsl #16
   12338:	andeq	r2, r1, r0, lsr #20
   1233c:	andeq	r2, r1, r0, lsr #20
   12340:	andeq	r2, r1, r0, lsr #20
   12344:	andeq	r2, r1, r0, lsr #20
   12348:	muleq	r1, r8, r7
   1234c:	andeq	r3, r1, r0, ror #6
   12350:	andeq	r2, r1, ip, lsl #16
   12354:	andeq	r2, r1, ip, lsl #16
   12358:	andeq	r2, r1, ip, lsl #16
   1235c:	andeq	r2, r1, ip, lsl #16
   12360:	andeq	r2, r1, ip, lsl #16
   12364:	andeq	r2, r1, ip, lsl #16
   12368:	andeq	r2, r1, ip, lsl #16
   1236c:	andeq	r2, r1, ip, lsl #16
   12370:	andeq	r2, r1, ip, lsl #16
   12374:	andeq	r2, r1, ip, lsl #16
   12378:	andeq	r2, r1, ip, lsl #16
   1237c:	andeq	r2, r1, ip, lsl #16
   12380:	andeq	r2, r1, ip, lsl #16
   12384:	andeq	r2, r1, ip, lsl #16
   12388:	andeq	r2, r1, ip, lsl #16
   1238c:	andeq	r2, r1, ip, lsl #16
   12390:	andeq	r2, r1, ip, lsl #16
   12394:	andeq	r2, r1, ip, lsl #16
   12398:	andeq	r2, r1, ip, lsl #16
   1239c:	andeq	r2, r1, ip, lsl #16
   123a0:	andeq	r2, r1, ip, lsl #16
   123a4:	andeq	r2, r1, ip, lsl #16
   123a8:	andeq	r2, r1, ip, lsl #16
   123ac:	andeq	r2, r1, ip, lsl #16
   123b0:	andeq	r2, r1, ip, lsl #16
   123b4:	andeq	r2, r1, ip, lsl #16
   123b8:	andeq	r2, r1, r0, lsr #20
   123bc:	andeq	r2, r1, r4, ror #14
   123c0:	andeq	r2, r1, ip, lsl #16
   123c4:	andeq	r2, r1, r0, lsr #20
   123c8:	andeq	r2, r1, ip, lsl #16
   123cc:	andeq	r2, r1, r0, lsr #20
   123d0:	andeq	r2, r1, ip, lsl #16
   123d4:	andeq	r2, r1, ip, lsl #16
   123d8:	andeq	r2, r1, ip, lsl #16
   123dc:	andeq	r2, r1, ip, lsl #16
   123e0:	andeq	r2, r1, ip, lsl #16
   123e4:	andeq	r2, r1, ip, lsl #16
   123e8:	andeq	r2, r1, ip, lsl #16
   123ec:	andeq	r2, r1, ip, lsl #16
   123f0:	andeq	r2, r1, ip, lsl #16
   123f4:	andeq	r2, r1, ip, lsl #16
   123f8:	andeq	r2, r1, ip, lsl #16
   123fc:	andeq	r2, r1, ip, lsl #16
   12400:	andeq	r2, r1, ip, lsl #16
   12404:	andeq	r2, r1, ip, lsl #16
   12408:	andeq	r2, r1, ip, lsl #16
   1240c:	andeq	r2, r1, ip, lsl #16
   12410:	andeq	r2, r1, ip, lsl #16
   12414:	andeq	r2, r1, ip, lsl #16
   12418:	andeq	r2, r1, ip, lsl #16
   1241c:	andeq	r2, r1, ip, lsl #16
   12420:	andeq	r2, r1, ip, lsl #16
   12424:	andeq	r2, r1, ip, lsl #16
   12428:	andeq	r2, r1, ip, lsl #16
   1242c:	andeq	r2, r1, ip, lsl #16
   12430:	andeq	r2, r1, ip, lsl #16
   12434:	andeq	r2, r1, ip, lsl #16
   12438:	andeq	r2, r1, ip, lsl r6
   1243c:	andeq	r2, r1, r0, lsr #20
   12440:	andeq	r2, r1, ip, lsl r6
   12444:	andeq	r2, r1, r0, lsl #20
   12448:	mov	r3, #1
   1244c:	str	r3, [sp, #40]	; 0x28
   12450:	str	r3, [sp, #68]	; 0x44
   12454:	mov	r8, #0
   12458:	ldr	r3, [pc, #4056]	; 13438 <__assert_fail@plt+0x25ac>
   1245c:	str	r3, [sp, #72]	; 0x48
   12460:	mov	r3, #2
   12464:	str	r3, [sp, #176]	; 0xb0
   12468:	ldr	r1, [sp, #56]	; 0x38
   1246c:	mov	r2, r3
   12470:	ldr	ip, [sp, #40]	; 0x28
   12474:	mov	lr, r3
   12478:	b	12144 <__assert_fail@plt+0x12b8>
   1247c:	mov	r3, #1
   12480:	str	r3, [sp, #56]	; 0x38
   12484:	str	r3, [sp, #68]	; 0x44
   12488:	str	r3, [sp, #40]	; 0x28
   1248c:	ldr	r3, [pc, #4004]	; 13438 <__assert_fail@plt+0x25ac>
   12490:	mov	r8, #0
   12494:	str	r3, [sp, #72]	; 0x48
   12498:	b	12460 <__assert_fail@plt+0x15d4>
   1249c:	mov	r3, #1
   124a0:	str	r3, [sp, #56]	; 0x38
   124a4:	str	r3, [sp, #68]	; 0x44
   124a8:	str	r3, [sp, #40]	; 0x28
   124ac:	ldr	r3, [pc, #3976]	; 1343c <__assert_fail@plt+0x25b0>
   124b0:	mov	r8, #0
   124b4:	str	r3, [sp, #72]	; 0x48
   124b8:	mov	r3, #5
   124bc:	b	12464 <__assert_fail@plt+0x15d8>
   124c0:	mov	r3, #0
   124c4:	str	r3, [sp, #40]	; 0x28
   124c8:	mov	r3, #1
   124cc:	str	r3, [sp, #56]	; 0x38
   124d0:	mov	r8, #0
   124d4:	mov	r1, r3
   124d8:	ldr	r2, [sp, #176]	; 0xb0
   124dc:	ldr	ip, [sp, #40]	; 0x28
   124e0:	ldr	lr, [sp, #176]	; 0xb0
   124e4:	b	12144 <__assert_fail@plt+0x12b8>
   124e8:	ldr	r3, [sp, #176]	; 0xb0
   124ec:	cmp	r3, #10
   124f0:	beq	12534 <__assert_fail@plt+0x16a8>
   124f4:	mov	r2, #5
   124f8:	ldr	r1, [pc, #3904]	; 13440 <__assert_fail@plt+0x25b4>
   124fc:	mov	r0, #0
   12500:	bl	10cc4 <dcgettext@plt>
   12504:	ldr	r2, [pc, #3892]	; 13440 <__assert_fail@plt+0x25b4>
   12508:	cmp	r0, r2
   1250c:	str	r0, [sp, #188]	; 0xbc
   12510:	beq	135cc <__assert_fail@plt+0x2740>
   12514:	mov	r2, #5
   12518:	ldr	r1, [pc, #3864]	; 13438 <__assert_fail@plt+0x25ac>
   1251c:	mov	r0, #0
   12520:	bl	10cc4 <dcgettext@plt>
   12524:	ldr	r2, [pc, #3852]	; 13438 <__assert_fail@plt+0x25ac>
   12528:	cmp	r0, r2
   1252c:	str	r0, [sp, #192]	; 0xc0
   12530:	beq	135bc <__assert_fail@plt+0x2730>
   12534:	ldr	r8, [sp, #40]	; 0x28
   12538:	cmp	r8, #0
   1253c:	movne	r8, #0
   12540:	bne	12570 <__assert_fail@plt+0x16e4>
   12544:	ldr	r3, [sp, #188]	; 0xbc
   12548:	ldrb	r3, [r3]
   1254c:	cmp	r3, #0
   12550:	beq	12570 <__assert_fail@plt+0x16e4>
   12554:	ldr	r2, [sp, #188]	; 0xbc
   12558:	cmp	fp, r8
   1255c:	strbhi	r3, [r9, r8]
   12560:	ldrb	r3, [r2, #1]!
   12564:	add	r8, r8, #1
   12568:	cmp	r3, #0
   1256c:	bne	12558 <__assert_fail@plt+0x16cc>
   12570:	ldr	r0, [sp, #192]	; 0xc0
   12574:	bl	10da8 <strlen@plt>
   12578:	ldr	r3, [sp, #192]	; 0xc0
   1257c:	ldr	r2, [sp, #176]	; 0xb0
   12580:	str	r3, [sp, #72]	; 0x48
   12584:	mov	r3, #1
   12588:	str	r3, [sp, #56]	; 0x38
   1258c:	mov	r1, r3
   12590:	ldr	ip, [sp, #40]	; 0x28
   12594:	ldr	lr, [sp, #176]	; 0xb0
   12598:	str	r0, [sp, #68]	; 0x44
   1259c:	b	12144 <__assert_fail@plt+0x12b8>
   125a0:	ldr	r3, [sp, #40]	; 0x28
   125a4:	cmp	r3, #0
   125a8:	beq	13250 <__assert_fail@plt+0x23c4>
   125ac:	mov	r3, #1
   125b0:	str	r3, [sp, #68]	; 0x44
   125b4:	ldr	r3, [pc, #3708]	; 13438 <__assert_fail@plt+0x25ac>
   125b8:	str	r3, [sp, #72]	; 0x48
   125bc:	mov	r8, #0
   125c0:	ldr	r1, [sp, #56]	; 0x38
   125c4:	ldr	r2, [sp, #176]	; 0xb0
   125c8:	ldr	ip, [sp, #40]	; 0x28
   125cc:	ldr	lr, [sp, #176]	; 0xb0
   125d0:	b	12144 <__assert_fail@plt+0x12b8>
   125d4:	ldr	r3, [sp, #40]	; 0x28
   125d8:	cmp	r3, #0
   125dc:	beq	132d4 <__assert_fail@plt+0x2448>
   125e0:	str	r3, [sp, #56]	; 0x38
   125e4:	mov	r3, #1
   125e8:	str	r3, [sp, #68]	; 0x44
   125ec:	ldr	r3, [pc, #3656]	; 1343c <__assert_fail@plt+0x25b0>
   125f0:	b	125b8 <__assert_fail@plt+0x172c>
   125f4:	ldr	r3, [sp, #40]	; 0x28
   125f8:	cmp	r3, #0
   125fc:	mov	r3, #1
   12600:	streq	r3, [sp, #56]	; 0x38
   12604:	beq	13250 <__assert_fail@plt+0x23c4>
   12608:	str	r3, [sp, #68]	; 0x44
   1260c:	ldr	r3, [pc, #3620]	; 13438 <__assert_fail@plt+0x25ac>
   12610:	mov	r8, #0
   12614:	str	r3, [sp, #72]	; 0x48
   12618:	b	12460 <__assert_fail@plt+0x15d4>
   1261c:	ldr	r3, [sp, #24]
   12620:	ldr	r6, [sp, #48]	; 0x30
   12624:	cmn	r3, #1
   12628:	beq	12c84 <__assert_fail@plt+0x1df8>
   1262c:	subs	r3, r3, #1
   12630:	movne	r3, #1
   12634:	cmp	r3, #0
   12638:	beq	12a04 <__assert_fail@plt+0x1b78>
   1263c:	ldr	r1, [sp, #52]	; 0x34
   12640:	mov	r7, r3
   12644:	mov	r3, #0
   12648:	str	r3, [sp, #32]
   1264c:	ldr	r3, [sp, #60]	; 0x3c
   12650:	orr	r2, r1, r3
   12654:	ldr	r3, [sp, #40]	; 0x28
   12658:	eor	r2, r2, #1
   1265c:	orr	r2, r3, r2
   12660:	tst	r2, #255	; 0xff
   12664:	bne	12f88 <__assert_fail@plt+0x20fc>
   12668:	cmp	r6, #0
   1266c:	bne	12848 <__assert_fail@plt+0x19bc>
   12670:	ldr	r3, [sp, #36]	; 0x24
   12674:	add	sl, sl, #1
   12678:	and	r3, r3, r7
   1267c:	uxtb	r6, r3
   12680:	cmp	r6, #0
   12684:	beq	126b0 <__assert_fail@plt+0x1824>
   12688:	cmp	fp, r8
   1268c:	movhi	r3, #39	; 0x27
   12690:	strbhi	r3, [r9, r8]
   12694:	add	r3, r8, #1
   12698:	cmp	fp, r3
   1269c:	movhi	r2, #39	; 0x27
   126a0:	add	r8, r8, #2
   126a4:	strbhi	r2, [r9, r3]
   126a8:	mov	r3, #0
   126ac:	str	r3, [sp, #36]	; 0x24
   126b0:	ldr	r2, [sp, #32]
   126b4:	cmp	r8, fp
   126b8:	ldr	r3, [sp, #28]
   126bc:	strbcc	r4, [r9, r8]
   126c0:	cmp	r2, #0
   126c4:	moveq	r3, #0
   126c8:	str	r3, [sp, #28]
   126cc:	ldr	r3, [sp, #24]
   126d0:	add	r8, r8, #1
   126d4:	cmn	r3, #1
   126d8:	bne	121b0 <__assert_fail@plt+0x1324>
   126dc:	ldr	r3, [sp, #44]	; 0x2c
   126e0:	ldrb	r3, [r3, sl]
   126e4:	adds	r7, r3, #0
   126e8:	movne	r7, #1
   126ec:	cmp	r7, #0
   126f0:	bne	121c0 <__assert_fail@plt+0x1334>
   126f4:	ldr	r3, [sp, #64]	; 0x40
   126f8:	cmp	r8, #0
   126fc:	movne	r3, #0
   12700:	andeq	r3, r3, #1
   12704:	cmp	r3, #0
   12708:	str	r3, [sp, #64]	; 0x40
   1270c:	bne	131b0 <__assert_fail@plt+0x2324>
   12710:	ldr	r3, [sp, #40]	; 0x28
   12714:	ldr	r2, [sp, #52]	; 0x34
   12718:	eor	r3, r3, #1
   1271c:	ands	r2, r2, r3
   12720:	beq	135dc <__assert_fail@plt+0x2750>
   12724:	ldr	r3, [sp, #76]	; 0x4c
   12728:	cmp	r3, #0
   1272c:	beq	135ac <__assert_fail@plt+0x2720>
   12730:	ldr	r3, [sp, #28]
   12734:	cmp	r3, #0
   12738:	bne	13568 <__assert_fail@plt+0x26dc>
   1273c:	ldr	r2, [sp, #84]	; 0x54
   12740:	clz	r3, fp
   12744:	cmp	r2, #0
   12748:	lsr	r3, r3, #5
   1274c:	moveq	r3, #0
   12750:	cmp	r3, #0
   12754:	beq	13508 <__assert_fail@plt+0x267c>
   12758:	mov	fp, r2
   1275c:	str	r3, [sp, #76]	; 0x4c
   12760:	b	120ec <__assert_fail@plt+0x1260>
   12764:	ldr	r3, [sp, #176]	; 0xb0
   12768:	ldr	r6, [sp, #48]	; 0x30
   1276c:	cmp	r3, #2
   12770:	beq	12ca8 <__assert_fail@plt+0x1e1c>
   12774:	ldr	r3, [sp, #88]	; 0x58
   12778:	cmp	r3, #0
   1277c:	beq	1322c <__assert_fail@plt+0x23a0>
   12780:	mov	r3, #0
   12784:	add	sl, sl, #1
   12788:	ldr	r6, [sp, #36]	; 0x24
   1278c:	str	r3, [sp, #32]
   12790:	mov	r4, #92	; 0x5c
   12794:	b	12680 <__assert_fail@plt+0x17f4>
   12798:	ldr	r3, [sp, #176]	; 0xb0
   1279c:	ldr	r6, [sp, #48]	; 0x30
   127a0:	cmp	r3, #2
   127a4:	beq	12cd8 <__assert_fail@plt+0x1e4c>
   127a8:	cmp	r3, #5
   127ac:	bne	1323c <__assert_fail@plt+0x23b0>
   127b0:	ldr	r3, [sp, #100]	; 0x64
   127b4:	cmp	r3, #0
   127b8:	beq	132a0 <__assert_fail@plt+0x2414>
   127bc:	ldr	r2, [sp, #24]
   127c0:	add	r3, sl, #2
   127c4:	cmp	r2, r3
   127c8:	bls	127d8 <__assert_fail@plt+0x194c>
   127cc:	ldrb	r4, [r5, #1]
   127d0:	cmp	r4, #63	; 0x3f
   127d4:	beq	13448 <__assert_fail@plt+0x25bc>
   127d8:	mov	r1, #0
   127dc:	str	r1, [sp, #32]
   127e0:	mov	r4, #63	; 0x3f
   127e4:	b	1264c <__assert_fail@plt+0x17c0>
   127e8:	ldr	r3, [sp, #176]	; 0xb0
   127ec:	ldr	r6, [sp, #48]	; 0x30
   127f0:	cmp	r3, #2
   127f4:	beq	12d04 <__assert_fail@plt+0x1e78>
   127f8:	str	r7, [sp, #32]
   127fc:	str	r7, [sp, #76]	; 0x4c
   12800:	mov	r1, #0
   12804:	mov	r4, #39	; 0x27
   12808:	b	1264c <__assert_fail@plt+0x17c0>
   1280c:	ldr	r6, [sp, #48]	; 0x30
   12810:	ldr	r1, [sp, #52]	; 0x34
   12814:	str	r7, [sp, #32]
   12818:	b	1264c <__assert_fail@plt+0x17c0>
   1281c:	ldr	r6, [sp, #48]	; 0x30
   12820:	ldr	r1, [sp, #52]	; 0x34
   12824:	mov	r4, #12
   12828:	mov	r3, #102	; 0x66
   1282c:	ldr	r2, [sp, #56]	; 0x38
   12830:	cmp	r2, #0
   12834:	streq	r2, [sp, #32]
   12838:	beq	1264c <__assert_fail@plt+0x17c0>
   1283c:	mov	r4, r3
   12840:	mov	r3, #0
   12844:	str	r3, [sp, #32]
   12848:	ldr	r3, [sp, #40]	; 0x28
   1284c:	cmp	r3, #0
   12850:	bne	12fc0 <__assert_fail@plt+0x2134>
   12854:	ldr	r3, [sp, #36]	; 0x24
   12858:	eor	r3, r3, #1
   1285c:	and	r3, r3, r1
   12860:	ands	r3, r3, #255	; 0xff
   12864:	beq	1289c <__assert_fail@plt+0x1a10>
   12868:	cmp	fp, r8
   1286c:	movhi	r2, #39	; 0x27
   12870:	strbhi	r2, [r9, r8]
   12874:	add	r2, r8, #1
   12878:	cmp	fp, r2
   1287c:	movhi	r1, #36	; 0x24
   12880:	strbhi	r1, [r9, r2]
   12884:	add	r2, r8, #2
   12888:	cmp	fp, r2
   1288c:	add	r8, r8, #3
   12890:	movhi	r1, #39	; 0x27
   12894:	strbhi	r1, [r9, r2]
   12898:	str	r3, [sp, #36]	; 0x24
   1289c:	cmp	fp, r8
   128a0:	movhi	r3, #92	; 0x5c
   128a4:	strbhi	r3, [r9, r8]
   128a8:	add	sl, sl, #1
   128ac:	add	r8, r8, #1
   128b0:	b	126b0 <__assert_fail@plt+0x1824>
   128b4:	ldr	r6, [sp, #48]	; 0x30
   128b8:	mov	r4, #10
   128bc:	mov	r3, #110	; 0x6e
   128c0:	ldr	r2, [sp, #64]	; 0x40
   128c4:	cmp	r2, #0
   128c8:	bne	13348 <__assert_fail@plt+0x24bc>
   128cc:	ldr	r1, [sp, #52]	; 0x34
   128d0:	b	1282c <__assert_fail@plt+0x19a0>
   128d4:	ldr	r6, [sp, #48]	; 0x30
   128d8:	ldr	r1, [sp, #52]	; 0x34
   128dc:	mov	r3, #116	; 0x74
   128e0:	b	1282c <__assert_fail@plt+0x19a0>
   128e4:	ldr	r6, [sp, #48]	; 0x30
   128e8:	ldr	r1, [sp, #52]	; 0x34
   128ec:	mov	r4, #11
   128f0:	mov	r3, #118	; 0x76
   128f4:	b	1282c <__assert_fail@plt+0x19a0>
   128f8:	ldr	r6, [sp, #48]	; 0x30
   128fc:	ldr	r1, [sp, #52]	; 0x34
   12900:	mov	r4, #8
   12904:	mov	r3, #98	; 0x62
   12908:	b	1282c <__assert_fail@plt+0x19a0>
   1290c:	ldr	r6, [sp, #48]	; 0x30
   12910:	ldr	r1, [sp, #52]	; 0x34
   12914:	mov	r4, #7
   12918:	mov	r3, #97	; 0x61
   1291c:	b	1282c <__assert_fail@plt+0x19a0>
   12920:	ldr	r3, [sp, #56]	; 0x38
   12924:	ldr	r6, [sp, #48]	; 0x30
   12928:	cmp	r3, #0
   1292c:	beq	12df0 <__assert_fail@plt+0x1f64>
   12930:	ldr	r3, [sp, #40]	; 0x28
   12934:	cmp	r3, #0
   12938:	bne	13424 <__assert_fail@plt+0x2598>
   1293c:	ldr	r3, [sp, #36]	; 0x24
   12940:	ldr	r2, [sp, #52]	; 0x34
   12944:	eor	r3, r3, #1
   12948:	ands	r3, r2, r3
   1294c:	moveq	r2, r8
   12950:	beq	12988 <__assert_fail@plt+0x1afc>
   12954:	cmp	fp, r8
   12958:	movhi	r2, #39	; 0x27
   1295c:	strbhi	r2, [r9, r8]
   12960:	add	r2, r8, #1
   12964:	cmp	fp, r2
   12968:	movhi	r1, #36	; 0x24
   1296c:	strbhi	r1, [r9, r2]
   12970:	add	r2, r8, #2
   12974:	cmp	fp, r2
   12978:	movhi	r1, #39	; 0x27
   1297c:	strbhi	r1, [r9, r2]
   12980:	add	r2, r8, #3
   12984:	str	r3, [sp, #36]	; 0x24
   12988:	cmp	fp, r2
   1298c:	movhi	r3, #92	; 0x5c
   12990:	strbhi	r3, [r9, r2]
   12994:	ldr	r3, [sp, #92]	; 0x5c
   12998:	add	r8, r2, #1
   1299c:	cmp	r3, #0
   129a0:	beq	13324 <__assert_fail@plt+0x2498>
   129a4:	ldr	r1, [sp, #24]
   129a8:	add	r3, sl, #1
   129ac:	cmp	r1, r3
   129b0:	bls	129e8 <__assert_fail@plt+0x1b5c>
   129b4:	ldr	r1, [sp, #44]	; 0x2c
   129b8:	ldrb	r3, [r1, r3]
   129bc:	sub	r3, r3, #48	; 0x30
   129c0:	cmp	r3, #9
   129c4:	bhi	129e8 <__assert_fail@plt+0x1b5c>
   129c8:	cmp	fp, r8
   129cc:	movhi	r3, #48	; 0x30
   129d0:	strbhi	r3, [r9, r8]
   129d4:	add	r3, r2, #2
   129d8:	cmp	fp, r3
   129dc:	add	r8, r2, #3
   129e0:	movhi	r1, #48	; 0x30
   129e4:	strbhi	r1, [r9, r3]
   129e8:	ldr	r3, [sp, #40]	; 0x28
   129ec:	ldr	r1, [sp, #52]	; 0x34
   129f0:	mov	r7, r3
   129f4:	str	r3, [sp, #32]
   129f8:	mov	r4, #48	; 0x30
   129fc:	b	1264c <__assert_fail@plt+0x17c0>
   12a00:	ldr	r6, [sp, #48]	; 0x30
   12a04:	cmp	sl, #0
   12a08:	streq	r7, [sp, #32]
   12a0c:	beq	12a2c <__assert_fail@plt+0x1ba0>
   12a10:	mov	r3, #0
   12a14:	ldr	r1, [sp, #52]	; 0x34
   12a18:	str	r3, [sp, #32]
   12a1c:	b	1264c <__assert_fail@plt+0x17c0>
   12a20:	ldr	r6, [sp, #48]	; 0x30
   12a24:	mov	r3, #0
   12a28:	str	r3, [sp, #32]
   12a2c:	ldr	r3, [sp, #64]	; 0x40
   12a30:	cmp	r3, #0
   12a34:	bne	131b0 <__assert_fail@plt+0x2324>
   12a38:	ldr	r1, [sp, #52]	; 0x34
   12a3c:	b	1264c <__assert_fail@plt+0x17c0>
   12a40:	ldr	r3, [sp, #48]	; 0x30
   12a44:	mov	r6, r3
   12a48:	str	r3, [sp, #32]
   12a4c:	b	12a2c <__assert_fail@plt+0x1ba0>
   12a50:	ldr	r6, [sp, #48]	; 0x30
   12a54:	mov	r4, #13
   12a58:	mov	r3, #114	; 0x72
   12a5c:	b	128c0 <__assert_fail@plt+0x1a34>
   12a60:	ldr	r3, [sp, #44]	; 0x2c
   12a64:	add	r5, r3, sl
   12a68:	ldrb	r4, [r5]
   12a6c:	cmp	r4, #126	; 0x7e
   12a70:	ldrls	pc, [pc, r4, lsl #2]
   12a74:	b	12e10 <__assert_fail@plt+0x1f84>
   12a78:	andeq	r2, r1, r0, ror #27
   12a7c:	andeq	r2, r1, r0, lsl lr
   12a80:	andeq	r2, r1, r0, lsl lr
   12a84:	andeq	r2, r1, r0, lsl lr
   12a88:	andeq	r2, r1, r0, lsl lr
   12a8c:	andeq	r2, r1, r0, lsl lr
   12a90:	andeq	r2, r1, r0, lsl lr
   12a94:	ldrdeq	r2, [r1], -r8
   12a98:	ldrdeq	r2, [r1], -r0
   12a9c:	andeq	r2, r1, r4, asr #27
   12aa0:			; <UNDEFINED> instruction: 0x00012dbc
   12aa4:			; <UNDEFINED> instruction: 0x00012db4
   12aa8:	andeq	r2, r1, ip, lsr #27
   12aac:	andeq	r2, r1, r4, lsr #27
   12ab0:	andeq	r2, r1, r0, lsl lr
   12ab4:	andeq	r2, r1, r0, lsl lr
   12ab8:	andeq	r2, r1, r0, lsl lr
   12abc:	andeq	r2, r1, r0, lsl lr
   12ac0:	andeq	r2, r1, r0, lsl lr
   12ac4:	andeq	r2, r1, r0, lsl lr
   12ac8:	andeq	r2, r1, r0, lsl lr
   12acc:	andeq	r2, r1, r0, lsl lr
   12ad0:	andeq	r2, r1, r0, lsl lr
   12ad4:	andeq	r2, r1, r0, lsl lr
   12ad8:	andeq	r2, r1, r0, lsl lr
   12adc:	andeq	r2, r1, r0, lsl lr
   12ae0:	andeq	r2, r1, r0, lsl lr
   12ae4:	andeq	r2, r1, r0, lsl lr
   12ae8:	andeq	r2, r1, r0, lsl lr
   12aec:	andeq	r2, r1, r0, lsl lr
   12af0:	andeq	r2, r1, r0, lsl lr
   12af4:	andeq	r2, r1, r0, lsl lr
   12af8:	muleq	r1, r8, sp
   12afc:	muleq	r1, r0, sp
   12b00:	muleq	r1, r0, sp
   12b04:	andeq	r2, r1, r8, lsl #27
   12b08:	muleq	r1, r0, sp
   12b0c:	andeq	r2, r1, r0, lsl #27
   12b10:	muleq	r1, r0, sp
   12b14:	strdeq	r2, [r1], -r4
   12b18:	muleq	r1, r0, sp
   12b1c:	muleq	r1, r0, sp
   12b20:	muleq	r1, r0, sp
   12b24:	andeq	r2, r1, r0, lsl #27
   12b28:	andeq	r2, r1, r0, lsl #27
   12b2c:	andeq	r2, r1, r0, lsl #27
   12b30:	andeq	r2, r1, r0, lsl #27
   12b34:	andeq	r2, r1, r0, lsl #27
   12b38:	andeq	r2, r1, r0, lsl #27
   12b3c:	andeq	r2, r1, r0, lsl #27
   12b40:	andeq	r2, r1, r0, lsl #27
   12b44:	andeq	r2, r1, r0, lsl #27
   12b48:	andeq	r2, r1, r0, lsl #27
   12b4c:	andeq	r2, r1, r0, lsl #27
   12b50:	andeq	r2, r1, r0, lsl #27
   12b54:	andeq	r2, r1, r0, lsl #27
   12b58:	andeq	r2, r1, r0, lsl #27
   12b5c:	andeq	r2, r1, r0, lsl #27
   12b60:	andeq	r2, r1, r0, lsl #27
   12b64:	muleq	r1, r0, sp
   12b68:	muleq	r1, r0, sp
   12b6c:	muleq	r1, r0, sp
   12b70:	muleq	r1, r0, sp
   12b74:	andeq	r2, r1, r8, asr #25
   12b78:	andeq	r2, r1, r0, lsl lr
   12b7c:	andeq	r2, r1, r0, lsl #27
   12b80:	andeq	r2, r1, r0, lsl #27
   12b84:	andeq	r2, r1, r0, lsl #27
   12b88:	andeq	r2, r1, r0, lsl #27
   12b8c:	andeq	r2, r1, r0, lsl #27
   12b90:	andeq	r2, r1, r0, lsl #27
   12b94:	andeq	r2, r1, r0, lsl #27
   12b98:	andeq	r2, r1, r0, lsl #27
   12b9c:	andeq	r2, r1, r0, lsl #27
   12ba0:	andeq	r2, r1, r0, lsl #27
   12ba4:	andeq	r2, r1, r0, lsl #27
   12ba8:	andeq	r2, r1, r0, lsl #27
   12bac:	andeq	r2, r1, r0, lsl #27
   12bb0:	andeq	r2, r1, r0, lsl #27
   12bb4:	andeq	r2, r1, r0, lsl #27
   12bb8:	andeq	r2, r1, r0, lsl #27
   12bbc:	andeq	r2, r1, r0, lsl #27
   12bc0:	andeq	r2, r1, r0, lsl #27
   12bc4:	andeq	r2, r1, r0, lsl #27
   12bc8:	andeq	r2, r1, r0, lsl #27
   12bcc:	andeq	r2, r1, r0, lsl #27
   12bd0:	andeq	r2, r1, r0, lsl #27
   12bd4:	andeq	r2, r1, r0, lsl #27
   12bd8:	andeq	r2, r1, r0, lsl #27
   12bdc:	andeq	r2, r1, r0, lsl #27
   12be0:	andeq	r2, r1, r0, lsl #27
   12be4:	muleq	r1, r0, sp
   12be8:	muleq	r1, r8, ip
   12bec:	andeq	r2, r1, r0, lsl #27
   12bf0:	muleq	r1, r0, sp
   12bf4:	andeq	r2, r1, r0, lsl #27
   12bf8:	muleq	r1, r0, sp
   12bfc:	andeq	r2, r1, r0, lsl #27
   12c00:	andeq	r2, r1, r0, lsl #27
   12c04:	andeq	r2, r1, r0, lsl #27
   12c08:	andeq	r2, r1, r0, lsl #27
   12c0c:	andeq	r2, r1, r0, lsl #27
   12c10:	andeq	r2, r1, r0, lsl #27
   12c14:	andeq	r2, r1, r0, lsl #27
   12c18:	andeq	r2, r1, r0, lsl #27
   12c1c:	andeq	r2, r1, r0, lsl #27
   12c20:	andeq	r2, r1, r0, lsl #27
   12c24:	andeq	r2, r1, r0, lsl #27
   12c28:	andeq	r2, r1, r0, lsl #27
   12c2c:	andeq	r2, r1, r0, lsl #27
   12c30:	andeq	r2, r1, r0, lsl #27
   12c34:	andeq	r2, r1, r0, lsl #27
   12c38:	andeq	r2, r1, r0, lsl #27
   12c3c:	andeq	r2, r1, r0, lsl #27
   12c40:	andeq	r2, r1, r0, lsl #27
   12c44:	andeq	r2, r1, r0, lsl #27
   12c48:	andeq	r2, r1, r0, lsl #27
   12c4c:	andeq	r2, r1, r0, lsl #27
   12c50:	andeq	r2, r1, r0, lsl #27
   12c54:	andeq	r2, r1, r0, lsl #27
   12c58:	andeq	r2, r1, r0, lsl #27
   12c5c:	andeq	r2, r1, r0, lsl #27
   12c60:	andeq	r2, r1, r0, lsl #27
   12c64:	andeq	r2, r1, r4, ror ip
   12c68:	muleq	r1, r0, sp
   12c6c:	andeq	r2, r1, r4, ror ip
   12c70:	andeq	r2, r1, r8, lsl #27
   12c74:	ldr	r3, [sp, #24]
   12c78:	mov	r6, #0
   12c7c:	cmn	r3, #1
   12c80:	bne	1262c <__assert_fail@plt+0x17a0>
   12c84:	ldr	r3, [sp, #44]	; 0x2c
   12c88:	ldrb	r3, [r3, #1]
   12c8c:	adds	r3, r3, #0
   12c90:	movne	r3, #1
   12c94:	b	12634 <__assert_fail@plt+0x17a8>
   12c98:	ldr	r3, [sp, #176]	; 0xb0
   12c9c:	mov	r6, #0
   12ca0:	cmp	r3, #2
   12ca4:	bne	12774 <__assert_fail@plt+0x18e8>
   12ca8:	ldr	r3, [sp, #64]	; 0x40
   12cac:	cmp	r3, #0
   12cb0:	bne	134e8 <__assert_fail@plt+0x265c>
   12cb4:	add	sl, sl, #1
   12cb8:	ldr	r6, [sp, #36]	; 0x24
   12cbc:	str	r3, [sp, #32]
   12cc0:	mov	r4, #92	; 0x5c
   12cc4:	b	12680 <__assert_fail@plt+0x17f4>
   12cc8:	ldr	r3, [sp, #176]	; 0xb0
   12ccc:	mov	r6, #0
   12cd0:	cmp	r3, #2
   12cd4:	bne	127a8 <__assert_fail@plt+0x191c>
   12cd8:	ldr	r3, [sp, #40]	; 0x28
   12cdc:	cmp	r3, #0
   12ce0:	bne	12fc4 <__assert_fail@plt+0x2138>
   12ce4:	mov	r1, r7
   12ce8:	str	r3, [sp, #32]
   12cec:	mov	r4, #63	; 0x3f
   12cf0:	b	1264c <__assert_fail@plt+0x17c0>
   12cf4:	ldr	r3, [sp, #176]	; 0xb0
   12cf8:	mov	r6, #0
   12cfc:	cmp	r3, #2
   12d00:	bne	127f8 <__assert_fail@plt+0x196c>
   12d04:	ldr	r3, [sp, #64]	; 0x40
   12d08:	cmp	r3, #0
   12d0c:	bne	134e8 <__assert_fail@plt+0x265c>
   12d10:	ldr	r2, [sp, #84]	; 0x54
   12d14:	adds	r3, fp, #0
   12d18:	movne	r3, #1
   12d1c:	cmp	r2, #0
   12d20:	movne	r3, #0
   12d24:	cmp	r3, #0
   12d28:	strne	fp, [sp, #84]	; 0x54
   12d2c:	movne	fp, #0
   12d30:	bne	12d60 <__assert_fail@plt+0x1ed4>
   12d34:	cmp	fp, r8
   12d38:	movhi	r3, #39	; 0x27
   12d3c:	strbhi	r3, [r9, r8]
   12d40:	add	r3, r8, #1
   12d44:	cmp	fp, r3
   12d48:	movhi	r2, #92	; 0x5c
   12d4c:	strbhi	r2, [r9, r3]
   12d50:	add	r3, r8, #2
   12d54:	cmp	fp, r3
   12d58:	movhi	r2, #39	; 0x27
   12d5c:	strbhi	r2, [r9, r3]
   12d60:	ldr	r3, [sp, #64]	; 0x40
   12d64:	add	r8, r8, #3
   12d68:	mov	r1, r7
   12d6c:	str	r7, [sp, #32]
   12d70:	str	r7, [sp, #76]	; 0x4c
   12d74:	str	r3, [sp, #36]	; 0x24
   12d78:	mov	r4, #39	; 0x27
   12d7c:	b	1264c <__assert_fail@plt+0x17c0>
   12d80:	mov	r6, #0
   12d84:	b	12810 <__assert_fail@plt+0x1984>
   12d88:	mov	r6, #0
   12d8c:	b	12a04 <__assert_fail@plt+0x1b78>
   12d90:	mov	r6, #0
   12d94:	b	12a24 <__assert_fail@plt+0x1b98>
   12d98:	str	r7, [sp, #32]
   12d9c:	mov	r6, #0
   12da0:	b	12a2c <__assert_fail@plt+0x1ba0>
   12da4:	mov	r6, #0
   12da8:	b	12a54 <__assert_fail@plt+0x1bc8>
   12dac:	mov	r6, #0
   12db0:	b	12820 <__assert_fail@plt+0x1994>
   12db4:	mov	r6, #0
   12db8:	b	128e8 <__assert_fail@plt+0x1a5c>
   12dbc:	mov	r6, #0
   12dc0:	b	128b8 <__assert_fail@plt+0x1a2c>
   12dc4:	mov	r6, #0
   12dc8:	mov	r3, #116	; 0x74
   12dcc:	b	128c0 <__assert_fail@plt+0x1a34>
   12dd0:	mov	r6, #0
   12dd4:	b	128fc <__assert_fail@plt+0x1a70>
   12dd8:	mov	r6, #0
   12ddc:	b	12910 <__assert_fail@plt+0x1a84>
   12de0:	ldr	r3, [sp, #56]	; 0x38
   12de4:	mov	r6, #0
   12de8:	cmp	r3, #0
   12dec:	bne	12930 <__assert_fail@plt+0x1aa4>
   12df0:	ldr	r3, [sp, #96]	; 0x60
   12df4:	cmp	r3, #0
   12df8:	addne	sl, sl, #1
   12dfc:	bne	121a4 <__assert_fail@plt+0x1318>
   12e00:	ldr	r1, [sp, #52]	; 0x34
   12e04:	str	r3, [sp, #32]
   12e08:	mov	r4, r3
   12e0c:	b	1264c <__assert_fail@plt+0x17c0>
   12e10:	mov	r6, #0
   12e14:	ldr	r3, [sp, #80]	; 0x50
   12e18:	cmp	r3, #1
   12e1c:	bne	1300c <__assert_fail@plt+0x2180>
   12e20:	bl	10d90 <__ctype_b_loc@plt>
   12e24:	ldr	r2, [sp, #80]	; 0x50
   12e28:	sxth	r3, r4
   12e2c:	mov	r1, r2
   12e30:	lsl	r3, r3, #1
   12e34:	ldr	r2, [r0]
   12e38:	ldrh	r3, [r2, r3]
   12e3c:	and	r3, r3, #16384	; 0x4000
   12e40:	cmp	r3, #0
   12e44:	movne	r3, #1
   12e48:	moveq	r3, #0
   12e4c:	str	r3, [sp, #32]
   12e50:	moveq	r3, #1
   12e54:	movne	r3, #0
   12e58:	ldr	r2, [sp, #56]	; 0x38
   12e5c:	and	r3, r3, r2
   12e60:	ands	r3, r3, #255	; 0xff
   12e64:	beq	12a38 <__assert_fail@plt+0x1bac>
   12e68:	add	r1, sl, r1
   12e6c:	mov	r0, #0
   12e70:	ldr	r7, [sp, #40]	; 0x28
   12e74:	ldr	r2, [sp, #36]	; 0x24
   12e78:	ldr	lr, [sp, #52]	; 0x34
   12e7c:	b	12f2c <__assert_fail@plt+0x20a0>
   12e80:	cmp	r7, #0
   12e84:	bne	13280 <__assert_fail@plt+0x23f4>
   12e88:	eor	r0, r2, #1
   12e8c:	ands	r0, lr, r0
   12e90:	beq	12ec8 <__assert_fail@plt+0x203c>
   12e94:	cmp	fp, r8
   12e98:	movhi	r2, #39	; 0x27
   12e9c:	strbhi	r2, [r9, r8]
   12ea0:	add	r2, r8, #1
   12ea4:	cmp	fp, r2
   12ea8:	movhi	ip, #36	; 0x24
   12eac:	strbhi	ip, [r9, r2]
   12eb0:	add	r2, r8, #2
   12eb4:	cmp	fp, r2
   12eb8:	movhi	ip, #39	; 0x27
   12ebc:	strbhi	ip, [r9, r2]
   12ec0:	add	r8, r8, #3
   12ec4:	mov	r2, r0
   12ec8:	cmp	fp, r8
   12ecc:	movhi	r0, #92	; 0x5c
   12ed0:	strbhi	r0, [r9, r8]
   12ed4:	add	r0, r8, #1
   12ed8:	cmp	fp, r0
   12edc:	lsrhi	ip, r4, #6
   12ee0:	addhi	ip, ip, #48	; 0x30
   12ee4:	strbhi	ip, [r9, r0]
   12ee8:	add	ip, r8, #2
   12eec:	cmp	fp, ip
   12ef0:	lsrhi	r0, r4, #3
   12ef4:	andhi	r0, r0, #7
   12ef8:	addhi	r0, r0, #48	; 0x30
   12efc:	add	sl, sl, #1
   12f00:	strbhi	r0, [r9, ip]
   12f04:	and	r4, r4, #7
   12f08:	cmp	sl, r1
   12f0c:	add	r4, r4, #48	; 0x30
   12f10:	add	r8, r8, #3
   12f14:	bcs	13298 <__assert_fail@plt+0x240c>
   12f18:	mov	r0, r3
   12f1c:	cmp	fp, r8
   12f20:	strbhi	r4, [r9, r8]
   12f24:	ldrb	r4, [r5, #1]!
   12f28:	add	r8, r8, #1
   12f2c:	cmp	r3, #0
   12f30:	bne	12e80 <__assert_fail@plt+0x1ff4>
   12f34:	cmp	r6, #0
   12f38:	bne	12fdc <__assert_fail@plt+0x2150>
   12f3c:	eor	r6, r0, #1
   12f40:	and	r6, r6, r2
   12f44:	add	sl, sl, #1
   12f48:	cmp	r1, sl
   12f4c:	uxtb	r6, r6
   12f50:	bls	13004 <__assert_fail@plt+0x2178>
   12f54:	cmp	r6, #0
   12f58:	beq	12f1c <__assert_fail@plt+0x2090>
   12f5c:	cmp	fp, r8
   12f60:	movhi	r2, #39	; 0x27
   12f64:	strbhi	r2, [r9, r8]
   12f68:	add	r2, r8, #1
   12f6c:	cmp	fp, r2
   12f70:	movhi	ip, #39	; 0x27
   12f74:	strbhi	ip, [r9, r2]
   12f78:	add	r8, r8, #2
   12f7c:	mov	r6, r3
   12f80:	mov	r2, r3
   12f84:	b	12f1c <__assert_fail@plt+0x2090>
   12f88:	ldr	r3, [sp, #184]	; 0xb8
   12f8c:	cmp	r3, #0
   12f90:	beq	12668 <__assert_fail@plt+0x17dc>
   12f94:	lsr	r2, r4, #5
   12f98:	mov	r0, r3
   12f9c:	uxtb	r2, r2
   12fa0:	and	r3, r4, #31
   12fa4:	ldr	r2, [r0, r2, lsl #2]
   12fa8:	lsr	r3, r2, r3
   12fac:	tst	r3, #1
   12fb0:	beq	12668 <__assert_fail@plt+0x17dc>
   12fb4:	ldr	r3, [sp, #40]	; 0x28
   12fb8:	cmp	r3, #0
   12fbc:	beq	12854 <__assert_fail@plt+0x19c8>
   12fc0:	mov	r3, r1
   12fc4:	str	r3, [sp, #64]	; 0x40
   12fc8:	mov	sl, r9
   12fcc:	ldr	r3, [sp, #56]	; 0x38
   12fd0:	mov	r9, fp
   12fd4:	ldr	r2, [sp, #64]	; 0x40
   12fd8:	b	131c8 <__assert_fail@plt+0x233c>
   12fdc:	cmp	fp, r8
   12fe0:	eor	r6, r0, #1
   12fe4:	movhi	ip, #92	; 0x5c
   12fe8:	and	r6, r6, r2
   12fec:	add	sl, sl, #1
   12ff0:	strbhi	ip, [r9, r8]
   12ff4:	cmp	r1, sl
   12ff8:	add	r8, r8, #1
   12ffc:	uxtb	r6, r6
   13000:	bhi	12f54 <__assert_fail@plt+0x20c8>
   13004:	str	r2, [sp, #36]	; 0x24
   13008:	b	12680 <__assert_fail@plt+0x17f4>
   1300c:	ldr	r3, [sp, #24]
   13010:	cmn	r3, #1
   13014:	mov	r3, #0
   13018:	str	r3, [sp, #128]	; 0x80
   1301c:	str	r3, [sp, #132]	; 0x84
   13020:	beq	13314 <__assert_fail@plt+0x2488>
   13024:	mov	r2, r7
   13028:	mov	r3, #0
   1302c:	str	r7, [sp, #104]	; 0x68
   13030:	str	r5, [sp, #116]	; 0x74
   13034:	mov	r7, r3
   13038:	mov	r5, r2
   1303c:	str	r4, [sp, #32]
   13040:	str	r6, [sp, #108]	; 0x6c
   13044:	str	r8, [sp, #112]	; 0x70
   13048:	ldr	r3, [sp, #44]	; 0x2c
   1304c:	add	r6, sl, r7
   13050:	add	r4, r3, r6
   13054:	ldr	r3, [sp, #24]
   13058:	mov	r1, r4
   1305c:	sub	r2, r3, r6
   13060:	add	r0, sp, #124	; 0x7c
   13064:	add	r3, sp, #128	; 0x80
   13068:	bl	18154 <__assert_fail@plt+0x72c8>
   1306c:	subs	r8, r0, #0
   13070:	beq	133f8 <__assert_fail@plt+0x256c>
   13074:	cmn	r8, #1
   13078:	beq	133d0 <__assert_fail@plt+0x2544>
   1307c:	cmn	r8, #2
   13080:	beq	13368 <__assert_fail@plt+0x24dc>
   13084:	ldr	r3, [sp, #64]	; 0x40
   13088:	cmp	r3, #0
   1308c:	beq	1314c <__assert_fail@plt+0x22c0>
   13090:	cmp	r8, #1
   13094:	beq	1314c <__assert_fail@plt+0x22c0>
   13098:	sub	r3, r8, #1
   1309c:	add	r6, r3, r6
   130a0:	ldr	r3, [sp, #44]	; 0x2c
   130a4:	add	r6, r3, r6
   130a8:	ldrb	r3, [r4, #1]!
   130ac:	sub	r3, r3, #91	; 0x5b
   130b0:	cmp	r3, #33	; 0x21
   130b4:	ldrls	pc, [pc, r3, lsl #2]
   130b8:	b	13144 <__assert_fail@plt+0x22b8>
   130bc:			; <UNDEFINED> instruction: 0x000131b0
   130c0:			; <UNDEFINED> instruction: 0x000131b0
   130c4:	andeq	r3, r1, r4, asr #2
   130c8:			; <UNDEFINED> instruction: 0x000131b0
   130cc:	andeq	r3, r1, r4, asr #2
   130d0:			; <UNDEFINED> instruction: 0x000131b0
   130d4:	andeq	r3, r1, r4, asr #2
   130d8:	andeq	r3, r1, r4, asr #2
   130dc:	andeq	r3, r1, r4, asr #2
   130e0:	andeq	r3, r1, r4, asr #2
   130e4:	andeq	r3, r1, r4, asr #2
   130e8:	andeq	r3, r1, r4, asr #2
   130ec:	andeq	r3, r1, r4, asr #2
   130f0:	andeq	r3, r1, r4, asr #2
   130f4:	andeq	r3, r1, r4, asr #2
   130f8:	andeq	r3, r1, r4, asr #2
   130fc:	andeq	r3, r1, r4, asr #2
   13100:	andeq	r3, r1, r4, asr #2
   13104:	andeq	r3, r1, r4, asr #2
   13108:	andeq	r3, r1, r4, asr #2
   1310c:	andeq	r3, r1, r4, asr #2
   13110:	andeq	r3, r1, r4, asr #2
   13114:	andeq	r3, r1, r4, asr #2
   13118:	andeq	r3, r1, r4, asr #2
   1311c:	andeq	r3, r1, r4, asr #2
   13120:	andeq	r3, r1, r4, asr #2
   13124:	andeq	r3, r1, r4, asr #2
   13128:	andeq	r3, r1, r4, asr #2
   1312c:	andeq	r3, r1, r4, asr #2
   13130:	andeq	r3, r1, r4, asr #2
   13134:	andeq	r3, r1, r4, asr #2
   13138:	andeq	r3, r1, r4, asr #2
   1313c:	andeq	r3, r1, r4, asr #2
   13140:			; <UNDEFINED> instruction: 0x000131b0
   13144:	cmp	r6, r4
   13148:	bne	130a8 <__assert_fail@plt+0x221c>
   1314c:	ldr	r0, [sp, #124]	; 0x7c
   13150:	bl	10ce8 <iswprint@plt>
   13154:	add	r7, r7, r8
   13158:	cmp	r0, #0
   1315c:	add	r0, sp, #128	; 0x80
   13160:	moveq	r5, #0
   13164:	bl	10c94 <mbsinit@plt>
   13168:	cmp	r0, #0
   1316c:	beq	13048 <__assert_fail@plt+0x21bc>
   13170:	ldr	r4, [sp, #32]
   13174:	str	r5, [sp, #32]
   13178:	ldr	r3, [sp, #32]
   1317c:	mov	r1, r7
   13180:	eor	r3, r3, #1
   13184:	ldr	r7, [sp, #104]	; 0x68
   13188:	ldr	r6, [sp, #108]	; 0x6c
   1318c:	ldr	r8, [sp, #112]	; 0x70
   13190:	ldr	r5, [sp, #116]	; 0x74
   13194:	uxtb	r3, r3
   13198:	cmp	r1, #1
   1319c:	bls	12e58 <__assert_fail@plt+0x1fcc>
   131a0:	ldr	r2, [sp, #56]	; 0x38
   131a4:	and	r3, r3, r2
   131a8:	uxtb	r3, r3
   131ac:	b	12e68 <__assert_fail@plt+0x1fdc>
   131b0:	mov	r3, #2
   131b4:	str	r3, [sp, #176]	; 0xb0
   131b8:	ldr	r2, [sp, #64]	; 0x40
   131bc:	ldr	r3, [sp, #56]	; 0x38
   131c0:	mov	sl, r9
   131c4:	mov	r9, fp
   131c8:	and	r3, r3, r2
   131cc:	tst	r3, #255	; 0xff
   131d0:	ldr	r3, [sp, #176]	; 0xb0
   131d4:	movne	r3, #4
   131d8:	str	r3, [sp, #176]	; 0xb0
   131dc:	ldr	r3, [sp, #180]	; 0xb4
   131e0:	mov	ip, #0
   131e4:	bic	r3, r3, #2
   131e8:	str	r3, [sp, #4]
   131ec:	ldr	r3, [sp, #192]	; 0xc0
   131f0:	ldr	r2, [sp, #44]	; 0x2c
   131f4:	str	r3, [sp, #16]
   131f8:	ldr	r3, [sp, #188]	; 0xbc
   131fc:	mov	r1, r9
   13200:	str	r3, [sp, #12]
   13204:	ldr	r3, [sp, #176]	; 0xb0
   13208:	mov	r0, sl
   1320c:	str	r3, [sp]
   13210:	str	ip, [sp, #8]
   13214:	ldr	r3, [sp, #24]
   13218:	bl	12078 <__assert_fail@plt+0x11ec>
   1321c:	mov	fp, r0
   13220:	mov	r0, fp
   13224:	add	sp, sp, #140	; 0x8c
   13228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1322c:	mov	r4, #92	; 0x5c
   13230:	mov	r1, #0
   13234:	mov	r3, r4
   13238:	b	1282c <__assert_fail@plt+0x19a0>
   1323c:	mov	r3, #0
   13240:	ldr	r1, [sp, #52]	; 0x34
   13244:	str	r3, [sp, #32]
   13248:	mov	r4, #63	; 0x3f
   1324c:	b	1264c <__assert_fail@plt+0x17c0>
   13250:	cmp	fp, #0
   13254:	beq	132b0 <__assert_fail@plt+0x2424>
   13258:	mov	r3, #39	; 0x27
   1325c:	strb	r3, [r9]
   13260:	mov	r3, #0
   13264:	str	r3, [sp, #40]	; 0x28
   13268:	mov	r3, #1
   1326c:	str	r3, [sp, #68]	; 0x44
   13270:	ldr	r3, [pc, #448]	; 13438 <__assert_fail@plt+0x25ac>
   13274:	mov	r8, #1
   13278:	str	r3, [sp, #72]	; 0x48
   1327c:	b	12460 <__assert_fail@plt+0x15d4>
   13280:	ldr	r3, [sp, #40]	; 0x28
   13284:	mov	sl, r9
   13288:	str	r3, [sp, #56]	; 0x38
   1328c:	mov	r9, fp
   13290:	ldr	r2, [sp, #64]	; 0x40
   13294:	b	131c8 <__assert_fail@plt+0x233c>
   13298:	str	r2, [sp, #36]	; 0x24
   1329c:	b	126b0 <__assert_fail@plt+0x1824>
   132a0:	mov	r1, #0
   132a4:	str	r3, [sp, #32]
   132a8:	mov	r4, #63	; 0x3f
   132ac:	b	1264c <__assert_fail@plt+0x17c0>
   132b0:	ldr	r3, [pc, #384]	; 13438 <__assert_fail@plt+0x25ac>
   132b4:	str	r3, [sp, #72]	; 0x48
   132b8:	mov	r3, #0
   132bc:	str	r3, [sp, #40]	; 0x28
   132c0:	mov	r3, #1
   132c4:	str	r3, [sp, #68]	; 0x44
   132c8:	mov	r8, r3
   132cc:	b	12460 <__assert_fail@plt+0x15d4>
   132d0:	bl	10e74 <abort@plt>
   132d4:	cmp	fp, #0
   132d8:	beq	13338 <__assert_fail@plt+0x24ac>
   132dc:	mov	r2, #1
   132e0:	mov	r3, #34	; 0x22
   132e4:	strb	r3, [r9]
   132e8:	mov	r8, r2
   132ec:	mov	r3, r2
   132f0:	str	r2, [sp, #68]	; 0x44
   132f4:	str	r3, [sp, #56]	; 0x38
   132f8:	ldr	r3, [pc, #316]	; 1343c <__assert_fail@plt+0x25b0>
   132fc:	ldr	r1, [sp, #56]	; 0x38
   13300:	str	r3, [sp, #72]	; 0x48
   13304:	ldr	r2, [sp, #176]	; 0xb0
   13308:	ldr	ip, [sp, #40]	; 0x28
   1330c:	ldr	lr, [sp, #176]	; 0xb0
   13310:	b	12144 <__assert_fail@plt+0x12b8>
   13314:	ldr	r0, [sp, #44]	; 0x2c
   13318:	bl	10da8 <strlen@plt>
   1331c:	str	r0, [sp, #24]
   13320:	b	13024 <__assert_fail@plt+0x2198>
   13324:	mov	r7, #0
   13328:	ldr	r1, [sp, #52]	; 0x34
   1332c:	str	r3, [sp, #32]
   13330:	mov	r4, #48	; 0x30
   13334:	b	1264c <__assert_fail@plt+0x17c0>
   13338:	mov	r3, #1
   1333c:	str	r3, [sp, #68]	; 0x44
   13340:	mov	r8, r3
   13344:	b	132f4 <__assert_fail@plt+0x2468>
   13348:	mov	r3, #2
   1334c:	mov	sl, r9
   13350:	str	r3, [sp, #176]	; 0xb0
   13354:	mov	r9, fp
   13358:	ldr	r3, [sp, #56]	; 0x38
   1335c:	b	131c8 <__assert_fail@plt+0x233c>
   13360:	ldr	r6, [sp, #48]	; 0x30
   13364:	b	12e14 <__assert_fail@plt+0x1f88>
   13368:	ldr	r0, [sp, #24]
   1336c:	mov	ip, r6
   13370:	cmp	r0, ip
   13374:	mov	r1, r7
   13378:	mov	r2, r4
   1337c:	ldr	r7, [sp, #104]	; 0x68
   13380:	ldr	r4, [sp, #32]
   13384:	ldr	r6, [sp, #108]	; 0x6c
   13388:	ldr	r8, [sp, #112]	; 0x70
   1338c:	ldr	r5, [sp, #116]	; 0x74
   13390:	bls	133c0 <__assert_fail@plt+0x2534>
   13394:	ldrb	r3, [r2]
   13398:	cmp	r3, #0
   1339c:	bne	133b0 <__assert_fail@plt+0x2524>
   133a0:	b	134d0 <__assert_fail@plt+0x2644>
   133a4:	ldrb	r3, [r2, #1]!
   133a8:	cmp	r3, #0
   133ac:	beq	134d0 <__assert_fail@plt+0x2644>
   133b0:	add	r1, r1, #1
   133b4:	add	r3, sl, r1
   133b8:	cmp	r0, r3
   133bc:	bhi	133a4 <__assert_fail@plt+0x2518>
   133c0:	mov	r2, #0
   133c4:	mov	r3, r7
   133c8:	str	r2, [sp, #32]
   133cc:	b	13198 <__assert_fail@plt+0x230c>
   133d0:	mov	r1, r7
   133d4:	ldr	r7, [sp, #104]	; 0x68
   133d8:	mov	r2, #0
   133dc:	ldr	r4, [sp, #32]
   133e0:	ldr	r6, [sp, #108]	; 0x6c
   133e4:	ldr	r8, [sp, #112]	; 0x70
   133e8:	ldr	r5, [sp, #116]	; 0x74
   133ec:	mov	r3, r7
   133f0:	str	r2, [sp, #32]
   133f4:	b	13198 <__assert_fail@plt+0x230c>
   133f8:	mov	r3, r5
   133fc:	eor	r3, r3, #1
   13400:	ldr	r4, [sp, #32]
   13404:	mov	r1, r7
   13408:	str	r5, [sp, #32]
   1340c:	ldr	r7, [sp, #104]	; 0x68
   13410:	ldr	r6, [sp, #108]	; 0x6c
   13414:	ldr	r8, [sp, #112]	; 0x70
   13418:	ldr	r5, [sp, #116]	; 0x74
   1341c:	uxtb	r3, r3
   13420:	b	13198 <__assert_fail@plt+0x230c>
   13424:	mov	sl, r9
   13428:	str	r3, [sp, #56]	; 0x38
   1342c:	mov	r9, fp
   13430:	ldr	r2, [sp, #64]	; 0x40
   13434:	b	131c8 <__assert_fail@plt+0x233c>
   13438:			; <UNDEFINED> instruction: 0x000193b8
   1343c:			; <UNDEFINED> instruction: 0x000193b4
   13440:			; <UNDEFINED> instruction: 0x000193bc
   13444:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13448:	ldr	r2, [sp, #44]	; 0x2c
   1344c:	ldrb	r1, [r2, r3]
   13450:	sub	r2, r1, #33	; 0x21
   13454:	uxtb	r2, r2
   13458:	cmp	r2, #29
   1345c:	bhi	134dc <__assert_fail@plt+0x2650>
   13460:	ldr	r0, [pc, #-36]	; 13444 <__assert_fail@plt+0x25b8>
   13464:	mov	ip, #1
   13468:	ands	r2, r0, ip, lsl r2
   1346c:	beq	134fc <__assert_fail@plt+0x2670>
   13470:	ldr	r2, [sp, #40]	; 0x28
   13474:	cmp	r2, #0
   13478:	bne	135f0 <__assert_fail@plt+0x2764>
   1347c:	add	r2, r8, #1
   13480:	cmp	fp, r8
   13484:	strbhi	r4, [r9, r8]
   13488:	cmp	fp, r2
   1348c:	movhi	r0, #34	; 0x22
   13490:	strbhi	r0, [r9, r2]
   13494:	add	r2, r8, #2
   13498:	cmp	fp, r2
   1349c:	movhi	r0, #34	; 0x22
   134a0:	strbhi	r0, [r9, r2]
   134a4:	add	r2, r8, #3
   134a8:	cmp	fp, r2
   134ac:	mov	sl, r3
   134b0:	ldr	r3, [sp, #40]	; 0x28
   134b4:	movhi	r0, #63	; 0x3f
   134b8:	mov	r4, r1
   134bc:	strbhi	r0, [r9, r2]
   134c0:	add	r8, r8, #4
   134c4:	mov	r1, r3
   134c8:	str	r3, [sp, #32]
   134cc:	b	1264c <__assert_fail@plt+0x17c0>
   134d0:	str	r3, [sp, #32]
   134d4:	mov	r3, r7
   134d8:	b	13198 <__assert_fail@plt+0x230c>
   134dc:	mov	r1, #0
   134e0:	str	r1, [sp, #32]
   134e4:	b	1264c <__assert_fail@plt+0x17c0>
   134e8:	mov	sl, r9
   134ec:	ldr	r3, [sp, #56]	; 0x38
   134f0:	mov	r9, fp
   134f4:	ldr	r2, [sp, #64]	; 0x40
   134f8:	b	131c8 <__assert_fail@plt+0x233c>
   134fc:	str	r2, [sp, #32]
   13500:	mov	r1, #0
   13504:	b	1264c <__assert_fail@plt+0x17c0>
   13508:	ldr	r2, [sp, #76]	; 0x4c
   1350c:	mov	sl, r9
   13510:	mov	r9, fp
   13514:	mov	fp, r8
   13518:	ldr	r1, [sp, #72]	; 0x48
   1351c:	cmp	r1, #0
   13520:	moveq	r3, #0
   13524:	andne	r3, r2, #1
   13528:	cmp	r3, #0
   1352c:	beq	13558 <__assert_fail@plt+0x26cc>
   13530:	ldrb	r3, [r1]
   13534:	cmp	r3, #0
   13538:	beq	13558 <__assert_fail@plt+0x26cc>
   1353c:	mov	r2, r1
   13540:	cmp	r9, fp
   13544:	strbhi	r3, [sl, fp]
   13548:	ldrb	r3, [r2, #1]!
   1354c:	add	fp, fp, #1
   13550:	cmp	r3, #0
   13554:	bne	13540 <__assert_fail@plt+0x26b4>
   13558:	cmp	r9, fp
   1355c:	movhi	r3, #0
   13560:	strbhi	r3, [sl, fp]
   13564:	b	13220 <__assert_fail@plt+0x2394>
   13568:	ldr	r3, [sp, #192]	; 0xc0
   1356c:	mov	ip, #5
   13570:	str	r3, [sp, #16]
   13574:	ldr	r3, [sp, #188]	; 0xbc
   13578:	ldr	r2, [sp, #44]	; 0x2c
   1357c:	str	r3, [sp, #12]
   13580:	ldr	r3, [sp, #184]	; 0xb8
   13584:	ldr	r1, [sp, #84]	; 0x54
   13588:	str	r3, [sp, #8]
   1358c:	ldr	r3, [sp, #180]	; 0xb4
   13590:	mov	r0, r9
   13594:	str	r3, [sp, #4]
   13598:	str	ip, [sp]
   1359c:	ldr	r3, [sp, #24]
   135a0:	bl	12078 <__assert_fail@plt+0x11ec>
   135a4:	mov	fp, r0
   135a8:	b	13220 <__assert_fail@plt+0x2394>
   135ac:	mov	sl, r9
   135b0:	mov	r9, fp
   135b4:	mov	fp, r8
   135b8:	b	13518 <__assert_fail@plt+0x268c>
   135bc:	ldr	r1, [sp, #176]	; 0xb0
   135c0:	bl	11f58 <__assert_fail@plt+0x10cc>
   135c4:	str	r0, [sp, #192]	; 0xc0
   135c8:	b	12534 <__assert_fail@plt+0x16a8>
   135cc:	ldr	r1, [sp, #176]	; 0xb0
   135d0:	bl	11f58 <__assert_fail@plt+0x10cc>
   135d4:	str	r0, [sp, #188]	; 0xbc
   135d8:	b	12514 <__assert_fail@plt+0x1688>
   135dc:	mov	sl, r9
   135e0:	mov	r2, r3
   135e4:	mov	r9, fp
   135e8:	mov	fp, r8
   135ec:	b	13518 <__assert_fail@plt+0x268c>
   135f0:	mov	sl, r9
   135f4:	mov	r9, fp
   135f8:	b	131dc <__assert_fail@plt+0x2350>
   135fc:	push	{r4, r5, r6, lr}
   13600:	mov	r5, r0
   13604:	bl	10dc0 <__errno_location@plt>
   13608:	cmp	r5, #0
   1360c:	mov	r1, #48	; 0x30
   13610:	mov	r4, r0
   13614:	ldr	r0, [pc, #16]	; 1362c <__assert_fail@plt+0x27a0>
   13618:	ldr	r6, [r4]
   1361c:	movne	r0, r5
   13620:	bl	16e98 <__assert_fail@plt+0x600c>
   13624:	str	r6, [r4]
   13628:	pop	{r4, r5, r6, pc}
   1362c:	andeq	sl, r2, r4, ror #2
   13630:	ldr	r3, [pc, #12]	; 13644 <__assert_fail@plt+0x27b8>
   13634:	cmp	r0, #0
   13638:	moveq	r0, r3
   1363c:	ldr	r0, [r0]
   13640:	bx	lr
   13644:	andeq	sl, r2, r4, ror #2
   13648:	ldr	r3, [pc, #12]	; 1365c <__assert_fail@plt+0x27d0>
   1364c:	cmp	r0, #0
   13650:	moveq	r0, r3
   13654:	str	r1, [r0]
   13658:	bx	lr
   1365c:	andeq	sl, r2, r4, ror #2
   13660:	ldr	r3, [pc, #52]	; 1369c <__assert_fail@plt+0x2810>
   13664:	cmp	r0, #0
   13668:	moveq	r0, r3
   1366c:	add	r3, r0, #8
   13670:	push	{lr}		; (str lr, [sp, #-4]!)
   13674:	lsr	lr, r1, #5
   13678:	and	r1, r1, #31
   1367c:	ldr	ip, [r3, lr, lsl #2]
   13680:	lsr	r0, ip, r1
   13684:	eor	r2, r2, r0
   13688:	and	r2, r2, #1
   1368c:	and	r0, r0, #1
   13690:	eor	r1, ip, r2, lsl r1
   13694:	str	r1, [r3, lr, lsl #2]
   13698:	pop	{pc}		; (ldr pc, [sp], #4)
   1369c:	andeq	sl, r2, r4, ror #2
   136a0:	ldr	r3, [pc, #16]	; 136b8 <__assert_fail@plt+0x282c>
   136a4:	cmp	r0, #0
   136a8:	movne	r3, r0
   136ac:	ldr	r0, [r3, #4]
   136b0:	str	r1, [r3, #4]
   136b4:	bx	lr
   136b8:	andeq	sl, r2, r4, ror #2
   136bc:	ldr	r3, [pc, #44]	; 136f0 <__assert_fail@plt+0x2864>
   136c0:	cmp	r0, #0
   136c4:	moveq	r0, r3
   136c8:	mov	ip, #10
   136cc:	cmp	r2, #0
   136d0:	cmpne	r1, #0
   136d4:	str	ip, [r0]
   136d8:	beq	136e8 <__assert_fail@plt+0x285c>
   136dc:	str	r1, [r0, #40]	; 0x28
   136e0:	str	r2, [r0, #44]	; 0x2c
   136e4:	bx	lr
   136e8:	push	{r4, lr}
   136ec:	bl	10e74 <abort@plt>
   136f0:	andeq	sl, r2, r4, ror #2
   136f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   136f8:	sub	sp, sp, #24
   136fc:	ldr	ip, [pc, #108]	; 13770 <__assert_fail@plt+0x28e4>
   13700:	ldr	r4, [sp, #56]	; 0x38
   13704:	mov	r9, r2
   13708:	cmp	r4, #0
   1370c:	moveq	r4, ip
   13710:	mov	sl, r3
   13714:	mov	r7, r0
   13718:	mov	r8, r1
   1371c:	bl	10dc0 <__errno_location@plt>
   13720:	ldr	r3, [r4, #44]	; 0x2c
   13724:	mov	r1, r8
   13728:	ldr	r6, [r0]
   1372c:	str	r3, [sp, #16]
   13730:	ldr	r2, [r4, #40]	; 0x28
   13734:	add	r3, r4, #8
   13738:	str	r3, [sp, #8]
   1373c:	str	r2, [sp, #12]
   13740:	ldr	r2, [r4, #4]
   13744:	mov	r5, r0
   13748:	str	r2, [sp, #4]
   1374c:	ldr	ip, [r4]
   13750:	mov	r3, sl
   13754:	mov	r2, r9
   13758:	mov	r0, r7
   1375c:	str	ip, [sp]
   13760:	bl	12078 <__assert_fail@plt+0x11ec>
   13764:	str	r6, [r5]
   13768:	add	sp, sp, #24
   1376c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13770:	andeq	sl, r2, r4, ror #2
   13774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13778:	cmp	r2, #0
   1377c:	sub	sp, sp, #36	; 0x24
   13780:	ldr	r4, [pc, #164]	; 1382c <__assert_fail@plt+0x29a0>
   13784:	mov	r8, r1
   13788:	movne	r4, r2
   1378c:	mov	r7, r0
   13790:	bl	10dc0 <__errno_location@plt>
   13794:	ldr	r3, [r4, #44]	; 0x2c
   13798:	ldr	r5, [r4, #4]
   1379c:	add	r9, r4, #8
   137a0:	orr	r5, r5, #1
   137a4:	mov	r1, #0
   137a8:	mov	r2, r7
   137ac:	ldr	fp, [r0]
   137b0:	str	r3, [sp, #16]
   137b4:	ldr	r3, [r4, #40]	; 0x28
   137b8:	stmib	sp, {r5, r9}
   137bc:	str	r3, [sp, #12]
   137c0:	ldr	r3, [r4]
   137c4:	mov	r6, r0
   137c8:	str	r3, [sp]
   137cc:	mov	r0, r1
   137d0:	mov	r3, r8
   137d4:	bl	12078 <__assert_fail@plt+0x11ec>
   137d8:	add	r1, r0, #1
   137dc:	mov	r0, r1
   137e0:	str	r1, [sp, #28]
   137e4:	bl	16954 <__assert_fail@plt+0x5ac8>
   137e8:	ldr	r3, [r4, #44]	; 0x2c
   137ec:	ldr	r1, [sp, #28]
   137f0:	str	r3, [sp, #16]
   137f4:	ldr	r3, [r4, #40]	; 0x28
   137f8:	str	r5, [sp, #4]
   137fc:	str	r3, [sp, #12]
   13800:	str	r9, [sp, #8]
   13804:	ldr	ip, [r4]
   13808:	mov	r3, r8
   1380c:	mov	r2, r7
   13810:	str	ip, [sp]
   13814:	mov	sl, r0
   13818:	bl	12078 <__assert_fail@plt+0x11ec>
   1381c:	mov	r0, sl
   13820:	str	fp, [r6]
   13824:	add	sp, sp, #36	; 0x24
   13828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1382c:	andeq	sl, r2, r4, ror #2
   13830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13834:	cmp	r3, #0
   13838:	sub	sp, sp, #44	; 0x2c
   1383c:	ldr	r4, [pc, #192]	; 13904 <__assert_fail@plt+0x2a78>
   13840:	mov	r6, r2
   13844:	movne	r4, r3
   13848:	mov	r9, r1
   1384c:	mov	r8, r0
   13850:	bl	10dc0 <__errno_location@plt>
   13854:	ldr	r3, [r4, #44]	; 0x2c
   13858:	ldr	r5, [r4, #4]
   1385c:	add	sl, r4, #8
   13860:	cmp	r6, #0
   13864:	orreq	r5, r5, #1
   13868:	mov	r1, #0
   1386c:	ldr	r2, [r0]
   13870:	str	r3, [sp, #16]
   13874:	ldr	r3, [r4, #40]	; 0x28
   13878:	stmib	sp, {r5, sl}
   1387c:	str	r3, [sp, #12]
   13880:	ldr	r3, [r4]
   13884:	mov	r7, r0
   13888:	str	r2, [sp, #28]
   1388c:	str	r3, [sp]
   13890:	mov	r2, r8
   13894:	mov	r3, r9
   13898:	mov	r0, r1
   1389c:	bl	12078 <__assert_fail@plt+0x11ec>
   138a0:	add	r1, r0, #1
   138a4:	mov	fp, r0
   138a8:	mov	r0, r1
   138ac:	str	r1, [sp, #36]	; 0x24
   138b0:	bl	16954 <__assert_fail@plt+0x5ac8>
   138b4:	ldr	r3, [r4, #44]	; 0x2c
   138b8:	mov	r2, r8
   138bc:	str	r3, [sp, #16]
   138c0:	ldr	r3, [r4, #40]	; 0x28
   138c4:	str	r5, [sp, #4]
   138c8:	str	r3, [sp, #12]
   138cc:	str	sl, [sp, #8]
   138d0:	ldr	ip, [r4]
   138d4:	ldr	r1, [sp, #36]	; 0x24
   138d8:	mov	r3, r9
   138dc:	str	ip, [sp]
   138e0:	str	r0, [sp, #32]
   138e4:	bl	12078 <__assert_fail@plt+0x11ec>
   138e8:	ldr	r2, [sp, #28]
   138ec:	cmp	r6, #0
   138f0:	str	r2, [r7]
   138f4:	ldr	r0, [sp, #32]
   138f8:	strne	fp, [r6]
   138fc:	add	sp, sp, #44	; 0x2c
   13900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13904:	andeq	sl, r2, r4, ror #2
   13908:	push	{r4, r5, r6, r7, r8, lr}
   1390c:	ldr	r6, [pc, #116]	; 13988 <__assert_fail@plt+0x2afc>
   13910:	ldr	r3, [r6, #4]
   13914:	ldr	r7, [r6]
   13918:	cmp	r3, #1
   1391c:	movgt	r5, r7
   13920:	movgt	r4, #1
   13924:	ble	13944 <__assert_fail@plt+0x2ab8>
   13928:	ldr	r0, [r5, #12]
   1392c:	bl	18028 <__assert_fail@plt+0x719c>
   13930:	ldr	r3, [r6, #4]
   13934:	add	r4, r4, #1
   13938:	cmp	r3, r4
   1393c:	add	r5, r5, #8
   13940:	bgt	13928 <__assert_fail@plt+0x2a9c>
   13944:	ldr	r0, [r7, #4]
   13948:	ldr	r4, [pc, #60]	; 1398c <__assert_fail@plt+0x2b00>
   1394c:	cmp	r0, r4
   13950:	beq	13964 <__assert_fail@plt+0x2ad8>
   13954:	bl	18028 <__assert_fail@plt+0x719c>
   13958:	mov	r3, #256	; 0x100
   1395c:	str	r4, [r6, #12]
   13960:	str	r3, [r6, #8]
   13964:	ldr	r4, [pc, #36]	; 13990 <__assert_fail@plt+0x2b04>
   13968:	cmp	r7, r4
   1396c:	beq	1397c <__assert_fail@plt+0x2af0>
   13970:	mov	r0, r7
   13974:	bl	18028 <__assert_fail@plt+0x719c>
   13978:	str	r4, [r6]
   1397c:	mov	r3, #1
   13980:	str	r3, [r6, #4]
   13984:	pop	{r4, r5, r6, r7, r8, pc}
   13988:	andeq	sl, r2, ip, ror #1
   1398c:	muleq	r2, r4, r1
   13990:	strdeq	sl, [r2], -r4
   13994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13998:	sub	sp, sp, #44	; 0x2c
   1399c:	mov	r5, r0
   139a0:	mov	sl, r1
   139a4:	bl	10dc0 <__errno_location@plt>
   139a8:	ldr	r4, [pc, #400]	; 13b40 <__assert_fail@plt+0x2cb4>
   139ac:	cmn	r5, #-2147483647	; 0x80000001
   139b0:	ldr	r6, [r4]
   139b4:	mov	r8, r0
   139b8:	movne	r0, #0
   139bc:	moveq	r0, #1
   139c0:	ldr	r3, [r8]
   139c4:	orrs	r0, r0, r5, lsr #31
   139c8:	str	r3, [sp, #24]
   139cc:	bne	13b3c <__assert_fail@plt+0x2cb0>
   139d0:	ldr	r2, [r4, #4]
   139d4:	cmp	r5, r2
   139d8:	blt	13a38 <__assert_fail@plt+0x2bac>
   139dc:	add	r7, r4, #8
   139e0:	cmp	r6, r7
   139e4:	str	r2, [sp, #36]	; 0x24
   139e8:	beq	13b0c <__assert_fail@plt+0x2c80>
   139ec:	mov	r3, #8
   139f0:	sub	r2, r5, r2
   139f4:	mov	r0, r6
   139f8:	str	r3, [sp]
   139fc:	add	r2, r2, #1
   13a00:	mvn	r3, #-2147483648	; 0x80000000
   13a04:	add	r1, sp, #36	; 0x24
   13a08:	bl	16b70 <__assert_fail@plt+0x5ce4>
   13a0c:	mov	r6, r0
   13a10:	str	r0, [r4]
   13a14:	ldr	r0, [r4, #4]
   13a18:	ldr	r2, [sp, #36]	; 0x24
   13a1c:	mov	r1, #0
   13a20:	sub	r2, r2, r0
   13a24:	add	r0, r6, r0, lsl #3
   13a28:	lsl	r2, r2, #3
   13a2c:	bl	10dd8 <memset@plt>
   13a30:	ldr	r3, [sp, #36]	; 0x24
   13a34:	str	r3, [r4, #4]
   13a38:	ldr	r4, [pc, #260]	; 13b44 <__assert_fail@plt+0x2cb8>
   13a3c:	add	fp, r6, r5, lsl #3
   13a40:	ldr	r9, [r6, r5, lsl #3]
   13a44:	ldr	r0, [r4, #4]
   13a48:	ldr	r3, [r4]
   13a4c:	ldr	r7, [fp, #4]
   13a50:	ldr	r1, [r4, #44]	; 0x2c
   13a54:	ldr	r2, [r4, #40]	; 0x28
   13a58:	orr	r0, r0, #1
   13a5c:	str	r3, [sp]
   13a60:	add	r3, r4, #8
   13a64:	str	r0, [sp, #28]
   13a68:	str	r0, [sp, #4]
   13a6c:	str	r1, [sp, #16]
   13a70:	str	r2, [sp, #12]
   13a74:	str	r3, [sp, #8]
   13a78:	mov	r0, r7
   13a7c:	mov	r1, r9
   13a80:	mvn	r3, #0
   13a84:	mov	r2, sl
   13a88:	bl	12078 <__assert_fail@plt+0x11ec>
   13a8c:	cmp	r9, r0
   13a90:	bhi	13af8 <__assert_fail@plt+0x2c6c>
   13a94:	add	r3, r4, #48	; 0x30
   13a98:	add	r9, r0, #1
   13a9c:	cmp	r7, r3
   13aa0:	str	r9, [r6, r5, lsl #3]
   13aa4:	beq	13ab0 <__assert_fail@plt+0x2c24>
   13aa8:	mov	r0, r7
   13aac:	bl	18028 <__assert_fail@plt+0x719c>
   13ab0:	mov	r0, r9
   13ab4:	bl	16954 <__assert_fail@plt+0x5ac8>
   13ab8:	ldr	ip, [r4, #44]	; 0x2c
   13abc:	ldr	r3, [r4]
   13ac0:	ldr	lr, [r4, #40]	; 0x28
   13ac4:	ldr	r4, [pc, #124]	; 13b48 <__assert_fail@plt+0x2cbc>
   13ac8:	mov	r2, sl
   13acc:	mov	r1, r9
   13ad0:	str	r0, [fp, #4]
   13ad4:	str	r4, [sp, #8]
   13ad8:	ldr	r4, [sp, #28]
   13adc:	str	r3, [sp]
   13ae0:	str	r4, [sp, #4]
   13ae4:	str	ip, [sp, #16]
   13ae8:	str	lr, [sp, #12]
   13aec:	mvn	r3, #0
   13af0:	mov	r7, r0
   13af4:	bl	12078 <__assert_fail@plt+0x11ec>
   13af8:	ldr	r3, [sp, #24]
   13afc:	mov	r0, r7
   13b00:	str	r3, [r8]
   13b04:	add	sp, sp, #44	; 0x2c
   13b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b0c:	mov	r3, #8
   13b10:	sub	r2, r5, r2
   13b14:	str	r3, [sp]
   13b18:	add	r1, sp, #36	; 0x24
   13b1c:	add	r2, r2, #1
   13b20:	mvn	r3, #-2147483648	; 0x80000000
   13b24:	bl	16b70 <__assert_fail@plt+0x5ce4>
   13b28:	mov	r6, r0
   13b2c:	ldm	r7, {r0, r1}
   13b30:	str	r6, [r4]
   13b34:	stm	r6, {r0, r1}
   13b38:	b	13a14 <__assert_fail@plt+0x2b88>
   13b3c:	bl	10e74 <abort@plt>
   13b40:	andeq	sl, r2, ip, ror #1
   13b44:	andeq	sl, r2, r4, ror #2
   13b48:	andeq	sl, r2, ip, ror #2
   13b4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b50:	sub	sp, sp, #52	; 0x34
   13b54:	mov	r5, r0
   13b58:	mov	sl, r1
   13b5c:	mov	fp, r2
   13b60:	bl	10dc0 <__errno_location@plt>
   13b64:	ldr	r4, [pc, #408]	; 13d04 <__assert_fail@plt+0x2e78>
   13b68:	cmn	r5, #-2147483647	; 0x80000001
   13b6c:	ldr	r6, [r4]
   13b70:	mov	r8, r0
   13b74:	movne	r0, #0
   13b78:	moveq	r0, #1
   13b7c:	ldr	r3, [r8]
   13b80:	orrs	r0, r0, r5, lsr #31
   13b84:	str	r3, [sp, #28]
   13b88:	bne	13d00 <__assert_fail@plt+0x2e74>
   13b8c:	ldr	r2, [r4, #4]
   13b90:	cmp	r5, r2
   13b94:	blt	13bf4 <__assert_fail@plt+0x2d68>
   13b98:	add	r7, r4, #8
   13b9c:	cmp	r6, r7
   13ba0:	str	r2, [sp, #44]	; 0x2c
   13ba4:	beq	13cd0 <__assert_fail@plt+0x2e44>
   13ba8:	mov	r3, #8
   13bac:	sub	r2, r5, r2
   13bb0:	mov	r0, r6
   13bb4:	str	r3, [sp]
   13bb8:	add	r2, r2, #1
   13bbc:	mvn	r3, #-2147483648	; 0x80000000
   13bc0:	add	r1, sp, #44	; 0x2c
   13bc4:	bl	16b70 <__assert_fail@plt+0x5ce4>
   13bc8:	mov	r6, r0
   13bcc:	str	r0, [r4]
   13bd0:	ldr	r0, [r4, #4]
   13bd4:	ldr	r2, [sp, #44]	; 0x2c
   13bd8:	mov	r1, #0
   13bdc:	sub	r2, r2, r0
   13be0:	add	r0, r6, r0, lsl #3
   13be4:	lsl	r2, r2, #3
   13be8:	bl	10dd8 <memset@plt>
   13bec:	ldr	r3, [sp, #44]	; 0x2c
   13bf0:	str	r3, [r4, #4]
   13bf4:	ldr	r4, [pc, #268]	; 13d08 <__assert_fail@plt+0x2e7c>
   13bf8:	add	r3, r6, r5, lsl #3
   13bfc:	str	r3, [sp, #32]
   13c00:	ldr	r7, [r3, #4]
   13c04:	ldr	r0, [r4, #4]
   13c08:	ldr	r3, [r4]
   13c0c:	ldr	r9, [r6, r5, lsl #3]
   13c10:	ldr	r1, [r4, #44]	; 0x2c
   13c14:	ldr	r2, [r4, #40]	; 0x28
   13c18:	orr	r0, r0, #1
   13c1c:	str	r3, [sp]
   13c20:	add	r3, r4, #8
   13c24:	str	r0, [sp, #36]	; 0x24
   13c28:	str	r0, [sp, #4]
   13c2c:	str	r1, [sp, #16]
   13c30:	str	r2, [sp, #12]
   13c34:	str	r3, [sp, #8]
   13c38:	mov	r0, r7
   13c3c:	mov	r1, r9
   13c40:	mov	r3, fp
   13c44:	mov	r2, sl
   13c48:	bl	12078 <__assert_fail@plt+0x11ec>
   13c4c:	cmp	r9, r0
   13c50:	bhi	13cbc <__assert_fail@plt+0x2e30>
   13c54:	add	r3, r4, #48	; 0x30
   13c58:	add	r9, r0, #1
   13c5c:	cmp	r7, r3
   13c60:	str	r9, [r6, r5, lsl #3]
   13c64:	beq	13c70 <__assert_fail@plt+0x2de4>
   13c68:	mov	r0, r7
   13c6c:	bl	18028 <__assert_fail@plt+0x719c>
   13c70:	mov	r0, r9
   13c74:	bl	16954 <__assert_fail@plt+0x5ac8>
   13c78:	ldr	ip, [sp, #32]
   13c7c:	ldr	lr, [r4, #44]	; 0x2c
   13c80:	ldr	r5, [r4, #40]	; 0x28
   13c84:	mov	r3, fp
   13c88:	mov	r2, sl
   13c8c:	mov	r1, r9
   13c90:	str	r0, [ip, #4]
   13c94:	ldr	ip, [r4]
   13c98:	ldr	r4, [pc, #108]	; 13d0c <__assert_fail@plt+0x2e80>
   13c9c:	str	lr, [sp, #16]
   13ca0:	str	r4, [sp, #8]
   13ca4:	ldr	r4, [sp, #36]	; 0x24
   13ca8:	str	r5, [sp, #12]
   13cac:	str	r4, [sp, #4]
   13cb0:	str	ip, [sp]
   13cb4:	mov	r7, r0
   13cb8:	bl	12078 <__assert_fail@plt+0x11ec>
   13cbc:	ldr	r3, [sp, #28]
   13cc0:	mov	r0, r7
   13cc4:	str	r3, [r8]
   13cc8:	add	sp, sp, #52	; 0x34
   13ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cd0:	mov	r3, #8
   13cd4:	sub	r2, r5, r2
   13cd8:	str	r3, [sp]
   13cdc:	add	r1, sp, #44	; 0x2c
   13ce0:	add	r2, r2, #1
   13ce4:	mvn	r3, #-2147483648	; 0x80000000
   13ce8:	bl	16b70 <__assert_fail@plt+0x5ce4>
   13cec:	mov	r6, r0
   13cf0:	ldm	r7, {r0, r1}
   13cf4:	str	r6, [r4]
   13cf8:	stm	r6, {r0, r1}
   13cfc:	b	13bd0 <__assert_fail@plt+0x2d44>
   13d00:	bl	10e74 <abort@plt>
   13d04:	andeq	sl, r2, ip, ror #1
   13d08:	andeq	sl, r2, r4, ror #2
   13d0c:	andeq	sl, r2, ip, ror #2
   13d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d14:	sub	sp, sp, #44	; 0x2c
   13d18:	mov	sl, r0
   13d1c:	bl	10dc0 <__errno_location@plt>
   13d20:	ldr	r4, [pc, #352]	; 13e88 <__assert_fail@plt+0x2ffc>
   13d24:	ldr	r2, [r4, #4]
   13d28:	ldr	r5, [r4]
   13d2c:	cmp	r2, #0
   13d30:	ldr	r3, [r0]
   13d34:	mov	r8, r0
   13d38:	str	r3, [sp, #28]
   13d3c:	bgt	13d98 <__assert_fail@plt+0x2f0c>
   13d40:	add	r6, r4, #8
   13d44:	cmp	r5, r6
   13d48:	str	r2, [sp, #36]	; 0x24
   13d4c:	beq	13e58 <__assert_fail@plt+0x2fcc>
   13d50:	mov	r3, #8
   13d54:	mov	r0, r5
   13d58:	str	r3, [sp]
   13d5c:	rsb	r2, r2, #1
   13d60:	mvn	r3, #-2147483648	; 0x80000000
   13d64:	add	r1, sp, #36	; 0x24
   13d68:	bl	16b70 <__assert_fail@plt+0x5ce4>
   13d6c:	mov	r5, r0
   13d70:	str	r0, [r4]
   13d74:	ldr	r0, [r4, #4]
   13d78:	ldr	r2, [sp, #36]	; 0x24
   13d7c:	mov	r1, #0
   13d80:	sub	r2, r2, r0
   13d84:	add	r0, r5, r0, lsl #3
   13d88:	lsl	r2, r2, #3
   13d8c:	bl	10dd8 <memset@plt>
   13d90:	ldr	r3, [sp, #36]	; 0x24
   13d94:	str	r3, [r4, #4]
   13d98:	ldr	r4, [pc, #236]	; 13e8c <__assert_fail@plt+0x3000>
   13d9c:	ldr	r9, [r5]
   13da0:	ldr	r6, [r5, #4]
   13da4:	ldr	r7, [r4, #4]
   13da8:	ldr	r1, [r4, #44]	; 0x2c
   13dac:	ldr	r2, [r4, #40]	; 0x28
   13db0:	ldr	r3, [r4]
   13db4:	orr	r7, r7, #1
   13db8:	add	fp, r4, #8
   13dbc:	str	r1, [sp, #16]
   13dc0:	str	r2, [sp, #12]
   13dc4:	str	r3, [sp]
   13dc8:	str	r7, [sp, #4]
   13dcc:	str	fp, [sp, #8]
   13dd0:	mov	r1, r9
   13dd4:	mov	r0, r6
   13dd8:	mvn	r3, #0
   13ddc:	mov	r2, sl
   13de0:	bl	12078 <__assert_fail@plt+0x11ec>
   13de4:	cmp	r9, r0
   13de8:	bhi	13e44 <__assert_fail@plt+0x2fb8>
   13dec:	add	r3, r4, #48	; 0x30
   13df0:	add	r9, r0, #1
   13df4:	cmp	r6, r3
   13df8:	str	r9, [r5]
   13dfc:	beq	13e08 <__assert_fail@plt+0x2f7c>
   13e00:	mov	r0, r6
   13e04:	bl	18028 <__assert_fail@plt+0x719c>
   13e08:	mov	r0, r9
   13e0c:	bl	16954 <__assert_fail@plt+0x5ac8>
   13e10:	ldr	ip, [r4, #44]	; 0x2c
   13e14:	ldr	r3, [r4]
   13e18:	ldr	lr, [r4, #40]	; 0x28
   13e1c:	mov	r2, sl
   13e20:	mov	r1, r9
   13e24:	str	r0, [r5, #4]
   13e28:	str	r3, [sp]
   13e2c:	stmib	sp, {r7, fp}
   13e30:	str	ip, [sp, #16]
   13e34:	str	lr, [sp, #12]
   13e38:	mvn	r3, #0
   13e3c:	mov	r6, r0
   13e40:	bl	12078 <__assert_fail@plt+0x11ec>
   13e44:	ldr	r3, [sp, #28]
   13e48:	mov	r0, r6
   13e4c:	str	r3, [r8]
   13e50:	add	sp, sp, #44	; 0x2c
   13e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e58:	mov	r3, #8
   13e5c:	str	r3, [sp]
   13e60:	add	r1, sp, #36	; 0x24
   13e64:	rsb	r2, r2, #1
   13e68:	mvn	r3, #-2147483648	; 0x80000000
   13e6c:	mov	r0, #0
   13e70:	bl	16b70 <__assert_fail@plt+0x5ce4>
   13e74:	mov	r5, r0
   13e78:	ldm	r6, {r0, r1}
   13e7c:	str	r5, [r4]
   13e80:	stm	r5, {r0, r1}
   13e84:	b	13d74 <__assert_fail@plt+0x2ee8>
   13e88:	andeq	sl, r2, ip, ror #1
   13e8c:	andeq	sl, r2, r4, ror #2
   13e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e94:	sub	sp, sp, #44	; 0x2c
   13e98:	mov	r9, r0
   13e9c:	mov	sl, r1
   13ea0:	bl	10dc0 <__errno_location@plt>
   13ea4:	ldr	r4, [pc, #364]	; 14018 <__assert_fail@plt+0x318c>
   13ea8:	ldr	r2, [r4, #4]
   13eac:	ldr	r5, [r4]
   13eb0:	cmp	r2, #0
   13eb4:	ldr	r3, [r0]
   13eb8:	mov	r7, r0
   13ebc:	str	r3, [sp, #24]
   13ec0:	bgt	13f1c <__assert_fail@plt+0x3090>
   13ec4:	add	r6, r4, #8
   13ec8:	cmp	r5, r6
   13ecc:	str	r2, [sp, #36]	; 0x24
   13ed0:	beq	13fe8 <__assert_fail@plt+0x315c>
   13ed4:	mov	r3, #8
   13ed8:	mov	r0, r5
   13edc:	str	r3, [sp]
   13ee0:	rsb	r2, r2, #1
   13ee4:	mvn	r3, #-2147483648	; 0x80000000
   13ee8:	add	r1, sp, #36	; 0x24
   13eec:	bl	16b70 <__assert_fail@plt+0x5ce4>
   13ef0:	mov	r5, r0
   13ef4:	str	r0, [r4]
   13ef8:	ldr	r0, [r4, #4]
   13efc:	ldr	r2, [sp, #36]	; 0x24
   13f00:	mov	r1, #0
   13f04:	sub	r2, r2, r0
   13f08:	add	r0, r5, r0, lsl #3
   13f0c:	lsl	r2, r2, #3
   13f10:	bl	10dd8 <memset@plt>
   13f14:	ldr	r3, [sp, #36]	; 0x24
   13f18:	str	r3, [r4, #4]
   13f1c:	ldr	r4, [pc, #248]	; 1401c <__assert_fail@plt+0x3190>
   13f20:	ldr	r8, [r5]
   13f24:	ldr	r6, [r5, #4]
   13f28:	ldr	r0, [r4, #4]
   13f2c:	ldr	r1, [r4, #44]	; 0x2c
   13f30:	ldr	r2, [r4, #40]	; 0x28
   13f34:	ldr	r3, [r4]
   13f38:	orr	r0, r0, #1
   13f3c:	add	fp, r4, #8
   13f40:	str	r0, [sp, #28]
   13f44:	str	r0, [sp, #4]
   13f48:	str	r1, [sp, #16]
   13f4c:	str	r2, [sp, #12]
   13f50:	str	r3, [sp]
   13f54:	str	fp, [sp, #8]
   13f58:	mov	r1, r8
   13f5c:	mov	r0, r6
   13f60:	mov	r3, sl
   13f64:	mov	r2, r9
   13f68:	bl	12078 <__assert_fail@plt+0x11ec>
   13f6c:	cmp	r8, r0
   13f70:	bhi	13fd4 <__assert_fail@plt+0x3148>
   13f74:	add	r3, r4, #48	; 0x30
   13f78:	add	r8, r0, #1
   13f7c:	cmp	r6, r3
   13f80:	str	r8, [r5]
   13f84:	beq	13f90 <__assert_fail@plt+0x3104>
   13f88:	mov	r0, r6
   13f8c:	bl	18028 <__assert_fail@plt+0x719c>
   13f90:	mov	r0, r8
   13f94:	bl	16954 <__assert_fail@plt+0x5ac8>
   13f98:	ldr	lr, [r4, #44]	; 0x2c
   13f9c:	ldr	ip, [r4]
   13fa0:	mov	r3, sl
   13fa4:	mov	r2, r9
   13fa8:	mov	r1, r8
   13fac:	str	r0, [r5, #4]
   13fb0:	ldr	r5, [r4, #40]	; 0x28
   13fb4:	ldr	r4, [sp, #28]
   13fb8:	str	fp, [sp, #8]
   13fbc:	str	r4, [sp, #4]
   13fc0:	str	lr, [sp, #16]
   13fc4:	str	r5, [sp, #12]
   13fc8:	str	ip, [sp]
   13fcc:	mov	r6, r0
   13fd0:	bl	12078 <__assert_fail@plt+0x11ec>
   13fd4:	ldr	r3, [sp, #24]
   13fd8:	mov	r0, r6
   13fdc:	str	r3, [r7]
   13fe0:	add	sp, sp, #44	; 0x2c
   13fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe8:	mov	r3, #8
   13fec:	str	r3, [sp]
   13ff0:	add	r1, sp, #36	; 0x24
   13ff4:	rsb	r2, r2, #1
   13ff8:	mvn	r3, #-2147483648	; 0x80000000
   13ffc:	mov	r0, #0
   14000:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14004:	mov	r5, r0
   14008:	ldm	r6, {r0, r1}
   1400c:	str	r5, [r4]
   14010:	stm	r5, {r0, r1}
   14014:	b	13ef8 <__assert_fail@plt+0x306c>
   14018:	andeq	sl, r2, ip, ror #1
   1401c:	andeq	sl, r2, r4, ror #2
   14020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14024:	sub	sp, sp, #132	; 0x84
   14028:	mov	r5, r1
   1402c:	mov	r4, r0
   14030:	mov	r9, r2
   14034:	add	r0, sp, #80	; 0x50
   14038:	mov	r2, #48	; 0x30
   1403c:	mov	r1, #0
   14040:	bl	10dd8 <memset@plt>
   14044:	cmp	r5, #10
   14048:	beq	14200 <__assert_fail@plt+0x3374>
   1404c:	add	lr, sp, #80	; 0x50
   14050:	str	r5, [sp, #80]	; 0x50
   14054:	ldm	lr!, {r0, r1, r2, r3}
   14058:	add	ip, sp, #32
   1405c:	ldr	r6, [pc, #416]	; 14204 <__assert_fail@plt+0x3378>
   14060:	stmia	ip!, {r0, r1, r2, r3}
   14064:	ldm	lr!, {r0, r1, r2, r3}
   14068:	stmia	ip!, {r0, r1, r2, r3}
   1406c:	ldm	lr, {r0, r1, r2, r3}
   14070:	stm	ip, {r0, r1, r2, r3}
   14074:	bl	10dc0 <__errno_location@plt>
   14078:	cmn	r4, #-2147483647	; 0x80000001
   1407c:	ldr	r5, [r6]
   14080:	mov	r7, r0
   14084:	movne	r0, #0
   14088:	moveq	r0, #1
   1408c:	ldr	r3, [r7]
   14090:	orrs	r0, r0, r4, lsr #31
   14094:	str	r3, [sp, #24]
   14098:	bne	14200 <__assert_fail@plt+0x3374>
   1409c:	ldr	r2, [r6, #4]
   140a0:	cmp	r4, r2
   140a4:	blt	14104 <__assert_fail@plt+0x3278>
   140a8:	add	r8, r6, #8
   140ac:	cmp	r5, r8
   140b0:	str	r2, [sp, #80]	; 0x50
   140b4:	beq	141d0 <__assert_fail@plt+0x3344>
   140b8:	mov	r3, #8
   140bc:	sub	r2, r4, r2
   140c0:	mov	r0, r5
   140c4:	str	r3, [sp]
   140c8:	add	r2, r2, #1
   140cc:	add	r1, sp, #80	; 0x50
   140d0:	mvn	r3, #-2147483648	; 0x80000000
   140d4:	bl	16b70 <__assert_fail@plt+0x5ce4>
   140d8:	mov	r5, r0
   140dc:	str	r0, [r6]
   140e0:	ldr	r0, [r6, #4]
   140e4:	ldr	r2, [sp, #80]	; 0x50
   140e8:	mov	r1, #0
   140ec:	sub	r2, r2, r0
   140f0:	add	r0, r5, r0, lsl #3
   140f4:	lsl	r2, r2, #3
   140f8:	bl	10dd8 <memset@plt>
   140fc:	ldr	r3, [sp, #80]	; 0x50
   14100:	str	r3, [r6, #4]
   14104:	add	fp, r5, r4, lsl #3
   14108:	ldr	r1, [sp, #36]	; 0x24
   1410c:	ldr	r8, [r5, r4, lsl #3]
   14110:	ldr	r6, [fp, #4]
   14114:	ldr	r2, [sp, #72]	; 0x48
   14118:	ldr	r3, [sp, #32]
   1411c:	ldr	ip, [sp, #76]	; 0x4c
   14120:	orr	r1, r1, #1
   14124:	add	sl, sp, #40	; 0x28
   14128:	str	r1, [sp, #28]
   1412c:	str	r1, [sp, #4]
   14130:	str	r2, [sp, #12]
   14134:	str	r3, [sp]
   14138:	mov	r0, r6
   1413c:	mov	r1, r8
   14140:	str	ip, [sp, #16]
   14144:	str	sl, [sp, #8]
   14148:	mvn	r3, #0
   1414c:	mov	r2, r9
   14150:	bl	12078 <__assert_fail@plt+0x11ec>
   14154:	cmp	r8, r0
   14158:	bhi	141bc <__assert_fail@plt+0x3330>
   1415c:	ldr	r3, [pc, #164]	; 14208 <__assert_fail@plt+0x337c>
   14160:	add	r8, r0, #1
   14164:	cmp	r6, r3
   14168:	str	r8, [r5, r4, lsl #3]
   1416c:	beq	14178 <__assert_fail@plt+0x32ec>
   14170:	mov	r0, r6
   14174:	bl	18028 <__assert_fail@plt+0x719c>
   14178:	mov	r0, r8
   1417c:	bl	16954 <__assert_fail@plt+0x5ac8>
   14180:	ldr	lr, [sp, #76]	; 0x4c
   14184:	ldr	r3, [sp, #32]
   14188:	ldr	ip, [sp, #72]	; 0x48
   1418c:	ldr	r4, [sp, #28]
   14190:	mov	r2, r9
   14194:	mov	r1, r8
   14198:	str	r0, [fp, #4]
   1419c:	str	r3, [sp]
   141a0:	str	sl, [sp, #8]
   141a4:	str	r4, [sp, #4]
   141a8:	str	lr, [sp, #16]
   141ac:	str	ip, [sp, #12]
   141b0:	mvn	r3, #0
   141b4:	mov	r6, r0
   141b8:	bl	12078 <__assert_fail@plt+0x11ec>
   141bc:	ldr	r3, [sp, #24]
   141c0:	mov	r0, r6
   141c4:	str	r3, [r7]
   141c8:	add	sp, sp, #132	; 0x84
   141cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d0:	mov	r3, #8
   141d4:	sub	r2, r4, r2
   141d8:	add	r1, sp, #80	; 0x50
   141dc:	str	r3, [sp]
   141e0:	add	r2, r2, #1
   141e4:	mvn	r3, #-2147483648	; 0x80000000
   141e8:	bl	16b70 <__assert_fail@plt+0x5ce4>
   141ec:	mov	r5, r0
   141f0:	ldm	r8, {r0, r1}
   141f4:	str	r5, [r6]
   141f8:	stm	r5, {r0, r1}
   141fc:	b	140e0 <__assert_fail@plt+0x3254>
   14200:	bl	10e74 <abort@plt>
   14204:	andeq	sl, r2, ip, ror #1
   14208:	muleq	r2, r4, r1
   1420c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14210:	sub	sp, sp, #132	; 0x84
   14214:	mov	r5, r1
   14218:	mov	r4, r0
   1421c:	mov	r9, r2
   14220:	add	r0, sp, #80	; 0x50
   14224:	mov	r2, #48	; 0x30
   14228:	mov	r1, #0
   1422c:	mov	sl, r3
   14230:	bl	10dd8 <memset@plt>
   14234:	cmp	r5, #10
   14238:	beq	143f4 <__assert_fail@plt+0x3568>
   1423c:	add	lr, sp, #80	; 0x50
   14240:	str	r5, [sp, #80]	; 0x50
   14244:	ldm	lr!, {r0, r1, r2, r3}
   14248:	add	ip, sp, #32
   1424c:	ldr	r6, [pc, #420]	; 143f8 <__assert_fail@plt+0x356c>
   14250:	stmia	ip!, {r0, r1, r2, r3}
   14254:	ldm	lr!, {r0, r1, r2, r3}
   14258:	stmia	ip!, {r0, r1, r2, r3}
   1425c:	ldm	lr, {r0, r1, r2, r3}
   14260:	stm	ip, {r0, r1, r2, r3}
   14264:	bl	10dc0 <__errno_location@plt>
   14268:	cmn	r4, #-2147483647	; 0x80000001
   1426c:	ldr	r5, [r6]
   14270:	mov	r7, r0
   14274:	movne	r0, #0
   14278:	moveq	r0, #1
   1427c:	ldr	r3, [r7]
   14280:	orrs	r0, r0, r4, lsr #31
   14284:	str	r3, [sp, #24]
   14288:	bne	143f4 <__assert_fail@plt+0x3568>
   1428c:	ldr	r2, [r6, #4]
   14290:	cmp	r4, r2
   14294:	blt	142f4 <__assert_fail@plt+0x3468>
   14298:	add	r8, r6, #8
   1429c:	cmp	r5, r8
   142a0:	str	r2, [sp, #80]	; 0x50
   142a4:	beq	143c4 <__assert_fail@plt+0x3538>
   142a8:	mov	r3, #8
   142ac:	sub	r2, r4, r2
   142b0:	mov	r0, r5
   142b4:	str	r3, [sp]
   142b8:	add	r2, r2, #1
   142bc:	add	r1, sp, #80	; 0x50
   142c0:	mvn	r3, #-2147483648	; 0x80000000
   142c4:	bl	16b70 <__assert_fail@plt+0x5ce4>
   142c8:	mov	r5, r0
   142cc:	str	r0, [r6]
   142d0:	ldr	r0, [r6, #4]
   142d4:	ldr	r2, [sp, #80]	; 0x50
   142d8:	mov	r1, #0
   142dc:	sub	r2, r2, r0
   142e0:	add	r0, r5, r0, lsl #3
   142e4:	lsl	r2, r2, #3
   142e8:	bl	10dd8 <memset@plt>
   142ec:	ldr	r3, [sp, #80]	; 0x50
   142f0:	str	r3, [r6, #4]
   142f4:	add	fp, r5, r4, lsl #3
   142f8:	ldr	r3, [sp, #32]
   142fc:	ldr	r1, [sp, #36]	; 0x24
   14300:	ldr	r8, [r5, r4, lsl #3]
   14304:	ldr	r6, [fp, #4]
   14308:	ldr	r2, [sp, #72]	; 0x48
   1430c:	ldr	ip, [sp, #76]	; 0x4c
   14310:	orr	r1, r1, #1
   14314:	str	r3, [sp]
   14318:	add	r3, sp, #40	; 0x28
   1431c:	str	r1, [sp, #28]
   14320:	str	r1, [sp, #4]
   14324:	str	r2, [sp, #12]
   14328:	str	r3, [sp, #8]
   1432c:	mov	r0, r6
   14330:	mov	r1, r8
   14334:	str	ip, [sp, #16]
   14338:	mov	r3, sl
   1433c:	mov	r2, r9
   14340:	bl	12078 <__assert_fail@plt+0x11ec>
   14344:	cmp	r8, r0
   14348:	bhi	143b0 <__assert_fail@plt+0x3524>
   1434c:	ldr	r3, [pc, #168]	; 143fc <__assert_fail@plt+0x3570>
   14350:	add	r8, r0, #1
   14354:	cmp	r6, r3
   14358:	str	r8, [r5, r4, lsl #3]
   1435c:	beq	14368 <__assert_fail@plt+0x34dc>
   14360:	mov	r0, r6
   14364:	bl	18028 <__assert_fail@plt+0x719c>
   14368:	mov	r0, r8
   1436c:	bl	16954 <__assert_fail@plt+0x5ac8>
   14370:	add	lr, sp, #40	; 0x28
   14374:	ldr	ip, [sp, #76]	; 0x4c
   14378:	ldr	r4, [sp, #72]	; 0x48
   1437c:	ldr	r5, [sp, #28]
   14380:	mov	r3, sl
   14384:	mov	r2, r9
   14388:	mov	r1, r8
   1438c:	str	r0, [fp, #4]
   14390:	str	lr, [sp, #8]
   14394:	ldr	lr, [sp, #32]
   14398:	str	r5, [sp, #4]
   1439c:	str	ip, [sp, #16]
   143a0:	str	r4, [sp, #12]
   143a4:	str	lr, [sp]
   143a8:	mov	r6, r0
   143ac:	bl	12078 <__assert_fail@plt+0x11ec>
   143b0:	ldr	r3, [sp, #24]
   143b4:	mov	r0, r6
   143b8:	str	r3, [r7]
   143bc:	add	sp, sp, #132	; 0x84
   143c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143c4:	mov	r3, #8
   143c8:	sub	r2, r4, r2
   143cc:	add	r1, sp, #80	; 0x50
   143d0:	str	r3, [sp]
   143d4:	add	r2, r2, #1
   143d8:	mvn	r3, #-2147483648	; 0x80000000
   143dc:	bl	16b70 <__assert_fail@plt+0x5ce4>
   143e0:	mov	r5, r0
   143e4:	ldm	r8, {r0, r1}
   143e8:	str	r5, [r6]
   143ec:	stm	r5, {r0, r1}
   143f0:	b	142d0 <__assert_fail@plt+0x3444>
   143f4:	bl	10e74 <abort@plt>
   143f8:	andeq	sl, r2, ip, ror #1
   143fc:	muleq	r2, r4, r1
   14400:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14404:	sub	sp, sp, #124	; 0x7c
   14408:	mov	r4, r0
   1440c:	mov	r9, r1
   14410:	add	r0, sp, #72	; 0x48
   14414:	mov	r2, #48	; 0x30
   14418:	mov	r1, #0
   1441c:	bl	10dd8 <memset@plt>
   14420:	cmp	r4, #10
   14424:	beq	145b0 <__assert_fail@plt+0x3724>
   14428:	add	lr, sp, #72	; 0x48
   1442c:	str	r4, [sp, #72]	; 0x48
   14430:	ldm	lr!, {r0, r1, r2, r3}
   14434:	add	ip, sp, #24
   14438:	ldr	r5, [pc, #372]	; 145b4 <__assert_fail@plt+0x3728>
   1443c:	stmia	ip!, {r0, r1, r2, r3}
   14440:	ldm	lr!, {r0, r1, r2, r3}
   14444:	stmia	ip!, {r0, r1, r2, r3}
   14448:	ldm	lr, {r0, r1, r2, r3}
   1444c:	stm	ip, {r0, r1, r2, r3}
   14450:	bl	10dc0 <__errno_location@plt>
   14454:	ldr	r2, [r5, #4]
   14458:	ldr	r4, [r5]
   1445c:	cmp	r2, #0
   14460:	mov	r7, r0
   14464:	ldr	fp, [r0]
   14468:	bgt	144c4 <__assert_fail@plt+0x3638>
   1446c:	add	r6, r5, #8
   14470:	cmp	r4, r6
   14474:	str	r2, [sp, #72]	; 0x48
   14478:	beq	14580 <__assert_fail@plt+0x36f4>
   1447c:	mov	r3, #8
   14480:	mov	r0, r4
   14484:	str	r3, [sp]
   14488:	rsb	r2, r2, #1
   1448c:	add	r1, sp, #72	; 0x48
   14490:	mvn	r3, #-2147483648	; 0x80000000
   14494:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14498:	mov	r4, r0
   1449c:	str	r0, [r5]
   144a0:	ldr	r0, [r5, #4]
   144a4:	ldr	r2, [sp, #72]	; 0x48
   144a8:	mov	r1, #0
   144ac:	sub	r2, r2, r0
   144b0:	add	r0, r4, r0, lsl #3
   144b4:	lsl	r2, r2, #3
   144b8:	bl	10dd8 <memset@plt>
   144bc:	ldr	r3, [sp, #72]	; 0x48
   144c0:	str	r3, [r5, #4]
   144c4:	ldr	r6, [sp, #28]
   144c8:	ldr	r8, [r4]
   144cc:	ldr	r5, [r4, #4]
   144d0:	ldr	r2, [sp, #64]	; 0x40
   144d4:	ldr	r3, [sp, #24]
   144d8:	ldr	ip, [sp, #68]	; 0x44
   144dc:	orr	r6, r6, #1
   144e0:	add	sl, sp, #32
   144e4:	str	r2, [sp, #12]
   144e8:	str	r3, [sp]
   144ec:	str	r6, [sp, #4]
   144f0:	mov	r1, r8
   144f4:	mov	r0, r5
   144f8:	str	ip, [sp, #16]
   144fc:	str	sl, [sp, #8]
   14500:	mvn	r3, #0
   14504:	mov	r2, r9
   14508:	bl	12078 <__assert_fail@plt+0x11ec>
   1450c:	cmp	r8, r0
   14510:	bhi	14570 <__assert_fail@plt+0x36e4>
   14514:	ldr	r3, [pc, #156]	; 145b8 <__assert_fail@plt+0x372c>
   14518:	add	r8, r0, #1
   1451c:	cmp	r5, r3
   14520:	str	r8, [r4]
   14524:	beq	14530 <__assert_fail@plt+0x36a4>
   14528:	mov	r0, r5
   1452c:	bl	18028 <__assert_fail@plt+0x719c>
   14530:	mov	r0, r8
   14534:	bl	16954 <__assert_fail@plt+0x5ac8>
   14538:	ldr	lr, [sp, #68]	; 0x44
   1453c:	ldr	r3, [sp, #24]
   14540:	ldr	ip, [sp, #64]	; 0x40
   14544:	mov	r2, r9
   14548:	mov	r1, r8
   1454c:	str	r0, [r4, #4]
   14550:	str	r3, [sp]
   14554:	str	sl, [sp, #8]
   14558:	str	r6, [sp, #4]
   1455c:	str	lr, [sp, #16]
   14560:	str	ip, [sp, #12]
   14564:	mvn	r3, #0
   14568:	mov	r5, r0
   1456c:	bl	12078 <__assert_fail@plt+0x11ec>
   14570:	mov	r0, r5
   14574:	str	fp, [r7]
   14578:	add	sp, sp, #124	; 0x7c
   1457c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14580:	mov	r3, #8
   14584:	add	r1, sp, #72	; 0x48
   14588:	str	r3, [sp]
   1458c:	rsb	r2, r2, #1
   14590:	mvn	r3, #-2147483648	; 0x80000000
   14594:	mov	r0, #0
   14598:	bl	16b70 <__assert_fail@plt+0x5ce4>
   1459c:	mov	r4, r0
   145a0:	ldm	r6, {r0, r1}
   145a4:	str	r4, [r5]
   145a8:	stm	r4, {r0, r1}
   145ac:	b	144a0 <__assert_fail@plt+0x3614>
   145b0:	bl	10e74 <abort@plt>
   145b4:	andeq	sl, r2, ip, ror #1
   145b8:	muleq	r2, r4, r1
   145bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145c0:	sub	sp, sp, #132	; 0x84
   145c4:	mov	r4, r0
   145c8:	mov	r9, r1
   145cc:	mov	sl, r2
   145d0:	add	r0, sp, #80	; 0x50
   145d4:	mov	r2, #48	; 0x30
   145d8:	mov	r1, #0
   145dc:	bl	10dd8 <memset@plt>
   145e0:	cmp	r4, #10
   145e4:	beq	14778 <__assert_fail@plt+0x38ec>
   145e8:	add	lr, sp, #80	; 0x50
   145ec:	str	r4, [sp, #80]	; 0x50
   145f0:	ldm	lr!, {r0, r1, r2, r3}
   145f4:	add	ip, sp, #32
   145f8:	ldr	r5, [pc, #380]	; 1477c <__assert_fail@plt+0x38f0>
   145fc:	stmia	ip!, {r0, r1, r2, r3}
   14600:	ldm	lr!, {r0, r1, r2, r3}
   14604:	stmia	ip!, {r0, r1, r2, r3}
   14608:	ldm	lr, {r0, r1, r2, r3}
   1460c:	stm	ip, {r0, r1, r2, r3}
   14610:	bl	10dc0 <__errno_location@plt>
   14614:	ldr	r2, [r5, #4]
   14618:	ldr	r4, [r5]
   1461c:	cmp	r2, #0
   14620:	ldr	r3, [r0]
   14624:	mov	r7, r0
   14628:	str	r3, [sp, #28]
   1462c:	bgt	14688 <__assert_fail@plt+0x37fc>
   14630:	add	r6, r5, #8
   14634:	cmp	r4, r6
   14638:	str	r2, [sp, #80]	; 0x50
   1463c:	beq	14748 <__assert_fail@plt+0x38bc>
   14640:	mov	r3, #8
   14644:	mov	r0, r4
   14648:	str	r3, [sp]
   1464c:	rsb	r2, r2, #1
   14650:	add	r1, sp, #80	; 0x50
   14654:	mvn	r3, #-2147483648	; 0x80000000
   14658:	bl	16b70 <__assert_fail@plt+0x5ce4>
   1465c:	mov	r4, r0
   14660:	str	r0, [r5]
   14664:	ldr	r0, [r5, #4]
   14668:	ldr	r2, [sp, #80]	; 0x50
   1466c:	mov	r1, #0
   14670:	sub	r2, r2, r0
   14674:	add	r0, r4, r0, lsl #3
   14678:	lsl	r2, r2, #3
   1467c:	bl	10dd8 <memset@plt>
   14680:	ldr	r3, [sp, #80]	; 0x50
   14684:	str	r3, [r5, #4]
   14688:	ldr	r6, [sp, #36]	; 0x24
   1468c:	ldr	r8, [r4]
   14690:	ldr	r5, [r4, #4]
   14694:	ldr	r2, [sp, #72]	; 0x48
   14698:	ldr	r3, [sp, #32]
   1469c:	ldr	ip, [sp, #76]	; 0x4c
   146a0:	orr	r6, r6, #1
   146a4:	add	fp, sp, #40	; 0x28
   146a8:	str	r2, [sp, #12]
   146ac:	str	r3, [sp]
   146b0:	str	r6, [sp, #4]
   146b4:	mov	r1, r8
   146b8:	mov	r0, r5
   146bc:	str	ip, [sp, #16]
   146c0:	str	fp, [sp, #8]
   146c4:	mov	r3, sl
   146c8:	mov	r2, r9
   146cc:	bl	12078 <__assert_fail@plt+0x11ec>
   146d0:	cmp	r8, r0
   146d4:	bhi	14734 <__assert_fail@plt+0x38a8>
   146d8:	ldr	r3, [pc, #160]	; 14780 <__assert_fail@plt+0x38f4>
   146dc:	add	r8, r0, #1
   146e0:	cmp	r5, r3
   146e4:	str	r8, [r4]
   146e8:	beq	146f4 <__assert_fail@plt+0x3868>
   146ec:	mov	r0, r5
   146f0:	bl	18028 <__assert_fail@plt+0x719c>
   146f4:	mov	r0, r8
   146f8:	bl	16954 <__assert_fail@plt+0x5ac8>
   146fc:	ldr	ip, [sp, #76]	; 0x4c
   14700:	ldr	lr, [sp, #32]
   14704:	mov	r3, sl
   14708:	mov	r2, r9
   1470c:	mov	r1, r8
   14710:	str	r0, [r4, #4]
   14714:	ldr	r4, [sp, #72]	; 0x48
   14718:	str	fp, [sp, #8]
   1471c:	str	r6, [sp, #4]
   14720:	str	ip, [sp, #16]
   14724:	str	r4, [sp, #12]
   14728:	str	lr, [sp]
   1472c:	mov	r5, r0
   14730:	bl	12078 <__assert_fail@plt+0x11ec>
   14734:	ldr	r3, [sp, #28]
   14738:	mov	r0, r5
   1473c:	str	r3, [r7]
   14740:	add	sp, sp, #132	; 0x84
   14744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14748:	mov	r3, #8
   1474c:	add	r1, sp, #80	; 0x50
   14750:	str	r3, [sp]
   14754:	rsb	r2, r2, #1
   14758:	mvn	r3, #-2147483648	; 0x80000000
   1475c:	mov	r0, #0
   14760:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14764:	mov	r4, r0
   14768:	ldm	r6, {r0, r1}
   1476c:	str	r4, [r5]
   14770:	stm	r4, {r0, r1}
   14774:	b	14664 <__assert_fail@plt+0x37d8>
   14778:	bl	10e74 <abort@plt>
   1477c:	andeq	sl, r2, ip, ror #1
   14780:	muleq	r2, r4, r1
   14784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14788:	mov	r4, r2
   1478c:	ldr	lr, [pc, #432]	; 14944 <__assert_fail@plt+0x3ab8>
   14790:	mov	sl, r0
   14794:	mov	fp, r1
   14798:	ldm	lr!, {r0, r1, r2, r3}
   1479c:	sub	sp, sp, #92	; 0x5c
   147a0:	add	ip, sp, #40	; 0x28
   147a4:	lsr	r7, r4, #5
   147a8:	stmia	ip!, {r0, r1, r2, r3}
   147ac:	add	r6, sp, #48	; 0x30
   147b0:	ldm	lr!, {r0, r1, r2, r3}
   147b4:	and	r4, r4, #31
   147b8:	ldr	r5, [pc, #392]	; 14948 <__assert_fail@plt+0x3abc>
   147bc:	stmia	ip!, {r0, r1, r2, r3}
   147c0:	ldm	lr, {r0, r1, r2, r3}
   147c4:	stm	ip, {r0, r1, r2, r3}
   147c8:	ldr	r2, [r6, r7, lsl #2]
   147cc:	lsr	r3, r2, r4
   147d0:	eor	r3, r3, #1
   147d4:	and	r3, r3, #1
   147d8:	eor	r4, r2, r3, lsl r4
   147dc:	str	r4, [r6, r7, lsl #2]
   147e0:	bl	10dc0 <__errno_location@plt>
   147e4:	ldr	r2, [r5, #4]
   147e8:	ldr	r4, [r5]
   147ec:	cmp	r2, #0
   147f0:	ldr	r3, [r0]
   147f4:	mov	r8, r0
   147f8:	str	r3, [sp, #28]
   147fc:	bgt	14858 <__assert_fail@plt+0x39cc>
   14800:	add	r7, r5, #8
   14804:	cmp	r4, r7
   14808:	str	r2, [sp, #36]	; 0x24
   1480c:	beq	14914 <__assert_fail@plt+0x3a88>
   14810:	mov	r3, #8
   14814:	mov	r0, r4
   14818:	str	r3, [sp]
   1481c:	rsb	r2, r2, #1
   14820:	mvn	r3, #-2147483648	; 0x80000000
   14824:	add	r1, sp, #36	; 0x24
   14828:	bl	16b70 <__assert_fail@plt+0x5ce4>
   1482c:	mov	r4, r0
   14830:	str	r0, [r5]
   14834:	ldr	r0, [r5, #4]
   14838:	ldr	r2, [sp, #36]	; 0x24
   1483c:	mov	r1, #0
   14840:	sub	r2, r2, r0
   14844:	add	r0, r4, r0, lsl #3
   14848:	lsl	r2, r2, #3
   1484c:	bl	10dd8 <memset@plt>
   14850:	ldr	r3, [sp, #36]	; 0x24
   14854:	str	r3, [r5, #4]
   14858:	ldr	r7, [sp, #44]	; 0x2c
   1485c:	ldr	r9, [r4]
   14860:	ldr	r5, [r4, #4]
   14864:	ldr	r2, [sp, #80]	; 0x50
   14868:	ldr	r3, [sp, #40]	; 0x28
   1486c:	ldr	ip, [sp, #84]	; 0x54
   14870:	orr	r7, r7, #1
   14874:	str	r2, [sp, #12]
   14878:	str	r3, [sp]
   1487c:	str	r7, [sp, #4]
   14880:	str	r6, [sp, #8]
   14884:	mov	r1, r9
   14888:	mov	r0, r5
   1488c:	str	ip, [sp, #16]
   14890:	mov	r3, fp
   14894:	mov	r2, sl
   14898:	bl	12078 <__assert_fail@plt+0x11ec>
   1489c:	cmp	r9, r0
   148a0:	bhi	14900 <__assert_fail@plt+0x3a74>
   148a4:	ldr	r3, [pc, #160]	; 1494c <__assert_fail@plt+0x3ac0>
   148a8:	add	r9, r0, #1
   148ac:	cmp	r5, r3
   148b0:	str	r9, [r4]
   148b4:	beq	148c0 <__assert_fail@plt+0x3a34>
   148b8:	mov	r0, r5
   148bc:	bl	18028 <__assert_fail@plt+0x719c>
   148c0:	mov	r0, r9
   148c4:	bl	16954 <__assert_fail@plt+0x5ac8>
   148c8:	ldr	ip, [sp, #84]	; 0x54
   148cc:	ldr	lr, [sp, #40]	; 0x28
   148d0:	mov	r3, fp
   148d4:	mov	r2, sl
   148d8:	mov	r1, r9
   148dc:	str	r0, [r4, #4]
   148e0:	ldr	r4, [sp, #80]	; 0x50
   148e4:	str	r6, [sp, #8]
   148e8:	str	r7, [sp, #4]
   148ec:	str	ip, [sp, #16]
   148f0:	str	r4, [sp, #12]
   148f4:	str	lr, [sp]
   148f8:	mov	r5, r0
   148fc:	bl	12078 <__assert_fail@plt+0x11ec>
   14900:	ldr	r3, [sp, #28]
   14904:	mov	r0, r5
   14908:	str	r3, [r8]
   1490c:	add	sp, sp, #92	; 0x5c
   14910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14914:	mov	r3, #8
   14918:	str	r3, [sp]
   1491c:	add	r1, sp, #36	; 0x24
   14920:	rsb	r2, r2, #1
   14924:	mvn	r3, #-2147483648	; 0x80000000
   14928:	mov	r0, #0
   1492c:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14930:	mov	r4, r0
   14934:	ldm	r7, {r0, r1}
   14938:	str	r4, [r5]
   1493c:	stm	r4, {r0, r1}
   14940:	b	14834 <__assert_fail@plt+0x39a8>
   14944:	andeq	sl, r2, r4, ror #2
   14948:	andeq	sl, r2, ip, ror #1
   1494c:	muleq	r2, r4, r1
   14950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14954:	mov	r4, r1
   14958:	ldr	lr, [pc, #420]	; 14b04 <__assert_fail@plt+0x3c78>
   1495c:	mov	r6, r0
   14960:	sub	sp, sp, #84	; 0x54
   14964:	ldm	lr!, {r0, r1, r2, r3}
   14968:	add	ip, sp, #32
   1496c:	lsr	r8, r4, #5
   14970:	add	r5, sp, #40	; 0x28
   14974:	stmia	ip!, {r0, r1, r2, r3}
   14978:	and	r4, r4, #31
   1497c:	ldm	lr!, {r0, r1, r2, r3}
   14980:	ldr	r7, [pc, #384]	; 14b08 <__assert_fail@plt+0x3c7c>
   14984:	stmia	ip!, {r0, r1, r2, r3}
   14988:	ldm	lr, {r0, r1, r2, r3}
   1498c:	stm	ip, {r0, r1, r2, r3}
   14990:	ldr	r2, [r5, r8, lsl #2]
   14994:	lsr	r3, r2, r4
   14998:	eor	r3, r3, #1
   1499c:	and	r3, r3, #1
   149a0:	eor	r4, r2, r3, lsl r4
   149a4:	str	r4, [r5, r8, lsl #2]
   149a8:	bl	10dc0 <__errno_location@plt>
   149ac:	ldr	r2, [r7, #4]
   149b0:	ldr	r4, [r7]
   149b4:	cmp	r2, #0
   149b8:	mov	r9, r0
   149bc:	ldr	sl, [r0]
   149c0:	bgt	14a1c <__assert_fail@plt+0x3b90>
   149c4:	add	r8, r7, #8
   149c8:	cmp	r4, r8
   149cc:	str	r2, [sp, #28]
   149d0:	beq	14ad4 <__assert_fail@plt+0x3c48>
   149d4:	mov	r3, #8
   149d8:	mov	r0, r4
   149dc:	str	r3, [sp]
   149e0:	rsb	r2, r2, #1
   149e4:	mvn	r3, #-2147483648	; 0x80000000
   149e8:	add	r1, sp, #28
   149ec:	bl	16b70 <__assert_fail@plt+0x5ce4>
   149f0:	mov	r4, r0
   149f4:	str	r0, [r7]
   149f8:	ldr	r0, [r7, #4]
   149fc:	ldr	r2, [sp, #28]
   14a00:	mov	r1, #0
   14a04:	sub	r2, r2, r0
   14a08:	add	r0, r4, r0, lsl #3
   14a0c:	lsl	r2, r2, #3
   14a10:	bl	10dd8 <memset@plt>
   14a14:	ldr	r3, [sp, #28]
   14a18:	str	r3, [r7, #4]
   14a1c:	ldr	r8, [sp, #36]	; 0x24
   14a20:	ldr	fp, [r4]
   14a24:	ldr	r7, [r4, #4]
   14a28:	ldr	r2, [sp, #72]	; 0x48
   14a2c:	ldr	r3, [sp, #32]
   14a30:	ldr	ip, [sp, #76]	; 0x4c
   14a34:	orr	r8, r8, #1
   14a38:	str	r2, [sp, #12]
   14a3c:	str	r3, [sp]
   14a40:	str	r8, [sp, #4]
   14a44:	str	r5, [sp, #8]
   14a48:	mov	r1, fp
   14a4c:	mov	r0, r7
   14a50:	str	ip, [sp, #16]
   14a54:	mvn	r3, #0
   14a58:	mov	r2, r6
   14a5c:	bl	12078 <__assert_fail@plt+0x11ec>
   14a60:	cmp	fp, r0
   14a64:	bhi	14ac4 <__assert_fail@plt+0x3c38>
   14a68:	ldr	r3, [pc, #156]	; 14b0c <__assert_fail@plt+0x3c80>
   14a6c:	add	fp, r0, #1
   14a70:	cmp	r7, r3
   14a74:	str	fp, [r4]
   14a78:	beq	14a84 <__assert_fail@plt+0x3bf8>
   14a7c:	mov	r0, r7
   14a80:	bl	18028 <__assert_fail@plt+0x719c>
   14a84:	mov	r0, fp
   14a88:	bl	16954 <__assert_fail@plt+0x5ac8>
   14a8c:	ldr	lr, [sp, #76]	; 0x4c
   14a90:	ldr	r3, [sp, #32]
   14a94:	ldr	ip, [sp, #72]	; 0x48
   14a98:	mov	r2, r6
   14a9c:	mov	r1, fp
   14aa0:	str	r0, [r4, #4]
   14aa4:	str	r3, [sp]
   14aa8:	str	r5, [sp, #8]
   14aac:	str	r8, [sp, #4]
   14ab0:	str	lr, [sp, #16]
   14ab4:	str	ip, [sp, #12]
   14ab8:	mvn	r3, #0
   14abc:	mov	r7, r0
   14ac0:	bl	12078 <__assert_fail@plt+0x11ec>
   14ac4:	mov	r0, r7
   14ac8:	str	sl, [r9]
   14acc:	add	sp, sp, #84	; 0x54
   14ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad4:	mov	r3, #8
   14ad8:	str	r3, [sp]
   14adc:	add	r1, sp, #28
   14ae0:	rsb	r2, r2, #1
   14ae4:	mvn	r3, #-2147483648	; 0x80000000
   14ae8:	mov	r0, #0
   14aec:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14af0:	mov	r4, r0
   14af4:	ldm	r8, {r0, r1}
   14af8:	str	r4, [r7]
   14afc:	stm	r4, {r0, r1}
   14b00:	b	149f8 <__assert_fail@plt+0x3b6c>
   14b04:	andeq	sl, r2, r4, ror #2
   14b08:	andeq	sl, r2, ip, ror #1
   14b0c:	muleq	r2, r4, r1
   14b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b14:	mov	r6, r0
   14b18:	ldr	lr, [pc, #404]	; 14cb4 <__assert_fail@plt+0x3e28>
   14b1c:	sub	sp, sp, #84	; 0x54
   14b20:	add	ip, sp, #32
   14b24:	ldm	lr!, {r0, r1, r2, r3}
   14b28:	ldr	r5, [pc, #392]	; 14cb8 <__assert_fail@plt+0x3e2c>
   14b2c:	stmia	ip!, {r0, r1, r2, r3}
   14b30:	ldm	lr!, {r0, r1, r2, r3}
   14b34:	ldr	r4, [sp, #44]	; 0x2c
   14b38:	stmia	ip!, {r0, r1, r2, r3}
   14b3c:	ldm	lr, {r0, r1, r2, r3}
   14b40:	mvn	lr, r4
   14b44:	and	lr, lr, #67108864	; 0x4000000
   14b48:	eor	lr, lr, r4
   14b4c:	stm	ip, {r0, r1, r2, r3}
   14b50:	str	lr, [sp, #44]	; 0x2c
   14b54:	bl	10dc0 <__errno_location@plt>
   14b58:	ldr	r2, [r5, #4]
   14b5c:	ldr	r4, [r5]
   14b60:	cmp	r2, #0
   14b64:	mov	r8, r0
   14b68:	ldr	sl, [r0]
   14b6c:	bgt	14bc8 <__assert_fail@plt+0x3d3c>
   14b70:	add	r7, r5, #8
   14b74:	cmp	r4, r7
   14b78:	str	r2, [sp, #28]
   14b7c:	beq	14c84 <__assert_fail@plt+0x3df8>
   14b80:	mov	r3, #8
   14b84:	mov	r0, r4
   14b88:	str	r3, [sp]
   14b8c:	rsb	r2, r2, #1
   14b90:	mvn	r3, #-2147483648	; 0x80000000
   14b94:	add	r1, sp, #28
   14b98:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14b9c:	mov	r4, r0
   14ba0:	str	r0, [r5]
   14ba4:	ldr	r0, [r5, #4]
   14ba8:	ldr	r2, [sp, #28]
   14bac:	mov	r1, #0
   14bb0:	sub	r2, r2, r0
   14bb4:	add	r0, r4, r0, lsl #3
   14bb8:	lsl	r2, r2, #3
   14bbc:	bl	10dd8 <memset@plt>
   14bc0:	ldr	r3, [sp, #28]
   14bc4:	str	r3, [r5, #4]
   14bc8:	ldr	r7, [sp, #36]	; 0x24
   14bcc:	ldr	r9, [r4]
   14bd0:	ldr	r5, [r4, #4]
   14bd4:	ldr	r2, [sp, #72]	; 0x48
   14bd8:	ldr	r3, [sp, #32]
   14bdc:	ldr	ip, [sp, #76]	; 0x4c
   14be0:	orr	r7, r7, #1
   14be4:	add	fp, sp, #40	; 0x28
   14be8:	str	r2, [sp, #12]
   14bec:	str	r3, [sp]
   14bf0:	str	r7, [sp, #4]
   14bf4:	mov	r1, r9
   14bf8:	mov	r0, r5
   14bfc:	str	ip, [sp, #16]
   14c00:	str	fp, [sp, #8]
   14c04:	mvn	r3, #0
   14c08:	mov	r2, r6
   14c0c:	bl	12078 <__assert_fail@plt+0x11ec>
   14c10:	cmp	r9, r0
   14c14:	bhi	14c74 <__assert_fail@plt+0x3de8>
   14c18:	ldr	r3, [pc, #156]	; 14cbc <__assert_fail@plt+0x3e30>
   14c1c:	add	r9, r0, #1
   14c20:	cmp	r5, r3
   14c24:	str	r9, [r4]
   14c28:	beq	14c34 <__assert_fail@plt+0x3da8>
   14c2c:	mov	r0, r5
   14c30:	bl	18028 <__assert_fail@plt+0x719c>
   14c34:	mov	r0, r9
   14c38:	bl	16954 <__assert_fail@plt+0x5ac8>
   14c3c:	ldr	lr, [sp, #76]	; 0x4c
   14c40:	ldr	r3, [sp, #32]
   14c44:	ldr	ip, [sp, #72]	; 0x48
   14c48:	mov	r2, r6
   14c4c:	mov	r1, r9
   14c50:	str	r0, [r4, #4]
   14c54:	str	r3, [sp]
   14c58:	str	fp, [sp, #8]
   14c5c:	str	r7, [sp, #4]
   14c60:	str	lr, [sp, #16]
   14c64:	str	ip, [sp, #12]
   14c68:	mvn	r3, #0
   14c6c:	mov	r5, r0
   14c70:	bl	12078 <__assert_fail@plt+0x11ec>
   14c74:	mov	r0, r5
   14c78:	str	sl, [r8]
   14c7c:	add	sp, sp, #84	; 0x54
   14c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c84:	mov	r3, #8
   14c88:	str	r3, [sp]
   14c8c:	add	r1, sp, #28
   14c90:	rsb	r2, r2, #1
   14c94:	mvn	r3, #-2147483648	; 0x80000000
   14c98:	mov	r0, #0
   14c9c:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14ca0:	mov	r4, r0
   14ca4:	ldm	r7, {r0, r1}
   14ca8:	str	r4, [r5]
   14cac:	stm	r4, {r0, r1}
   14cb0:	b	14ba4 <__assert_fail@plt+0x3d18>
   14cb4:	andeq	sl, r2, r4, ror #2
   14cb8:	andeq	sl, r2, ip, ror #1
   14cbc:	muleq	r2, r4, r1
   14cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cc4:	mov	r9, r0
   14cc8:	ldr	lr, [pc, #416]	; 14e70 <__assert_fail@plt+0x3fe4>
   14ccc:	mov	sl, r1
   14cd0:	sub	sp, sp, #92	; 0x5c
   14cd4:	ldm	lr!, {r0, r1, r2, r3}
   14cd8:	add	ip, sp, #40	; 0x28
   14cdc:	ldr	r5, [pc, #400]	; 14e74 <__assert_fail@plt+0x3fe8>
   14ce0:	stmia	ip!, {r0, r1, r2, r3}
   14ce4:	ldm	lr!, {r0, r1, r2, r3}
   14ce8:	ldr	r4, [sp, #52]	; 0x34
   14cec:	stmia	ip!, {r0, r1, r2, r3}
   14cf0:	ldm	lr, {r0, r1, r2, r3}
   14cf4:	mvn	lr, r4
   14cf8:	and	lr, lr, #67108864	; 0x4000000
   14cfc:	eor	lr, lr, r4
   14d00:	stm	ip, {r0, r1, r2, r3}
   14d04:	str	lr, [sp, #52]	; 0x34
   14d08:	bl	10dc0 <__errno_location@plt>
   14d0c:	ldr	r2, [r5, #4]
   14d10:	ldr	r4, [r5]
   14d14:	cmp	r2, #0
   14d18:	ldr	r3, [r0]
   14d1c:	mov	r7, r0
   14d20:	str	r3, [sp, #28]
   14d24:	bgt	14d80 <__assert_fail@plt+0x3ef4>
   14d28:	add	r6, r5, #8
   14d2c:	cmp	r4, r6
   14d30:	str	r2, [sp, #36]	; 0x24
   14d34:	beq	14e40 <__assert_fail@plt+0x3fb4>
   14d38:	mov	r3, #8
   14d3c:	mov	r0, r4
   14d40:	str	r3, [sp]
   14d44:	rsb	r2, r2, #1
   14d48:	mvn	r3, #-2147483648	; 0x80000000
   14d4c:	add	r1, sp, #36	; 0x24
   14d50:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14d54:	mov	r4, r0
   14d58:	str	r0, [r5]
   14d5c:	ldr	r0, [r5, #4]
   14d60:	ldr	r2, [sp, #36]	; 0x24
   14d64:	mov	r1, #0
   14d68:	sub	r2, r2, r0
   14d6c:	add	r0, r4, r0, lsl #3
   14d70:	lsl	r2, r2, #3
   14d74:	bl	10dd8 <memset@plt>
   14d78:	ldr	r3, [sp, #36]	; 0x24
   14d7c:	str	r3, [r5, #4]
   14d80:	ldr	r6, [sp, #44]	; 0x2c
   14d84:	ldr	r8, [r4]
   14d88:	ldr	r5, [r4, #4]
   14d8c:	ldr	r2, [sp, #80]	; 0x50
   14d90:	ldr	r3, [sp, #40]	; 0x28
   14d94:	ldr	ip, [sp, #84]	; 0x54
   14d98:	orr	r6, r6, #1
   14d9c:	add	fp, sp, #48	; 0x30
   14da0:	str	r2, [sp, #12]
   14da4:	str	r3, [sp]
   14da8:	str	r6, [sp, #4]
   14dac:	mov	r1, r8
   14db0:	mov	r0, r5
   14db4:	str	ip, [sp, #16]
   14db8:	str	fp, [sp, #8]
   14dbc:	mov	r3, sl
   14dc0:	mov	r2, r9
   14dc4:	bl	12078 <__assert_fail@plt+0x11ec>
   14dc8:	cmp	r8, r0
   14dcc:	bhi	14e2c <__assert_fail@plt+0x3fa0>
   14dd0:	ldr	r3, [pc, #160]	; 14e78 <__assert_fail@plt+0x3fec>
   14dd4:	add	r8, r0, #1
   14dd8:	cmp	r5, r3
   14ddc:	str	r8, [r4]
   14de0:	beq	14dec <__assert_fail@plt+0x3f60>
   14de4:	mov	r0, r5
   14de8:	bl	18028 <__assert_fail@plt+0x719c>
   14dec:	mov	r0, r8
   14df0:	bl	16954 <__assert_fail@plt+0x5ac8>
   14df4:	ldr	ip, [sp, #84]	; 0x54
   14df8:	ldr	lr, [sp, #40]	; 0x28
   14dfc:	mov	r3, sl
   14e00:	mov	r2, r9
   14e04:	mov	r1, r8
   14e08:	str	r0, [r4, #4]
   14e0c:	ldr	r4, [sp, #80]	; 0x50
   14e10:	str	fp, [sp, #8]
   14e14:	str	r6, [sp, #4]
   14e18:	str	ip, [sp, #16]
   14e1c:	str	r4, [sp, #12]
   14e20:	str	lr, [sp]
   14e24:	mov	r5, r0
   14e28:	bl	12078 <__assert_fail@plt+0x11ec>
   14e2c:	ldr	r3, [sp, #28]
   14e30:	mov	r0, r5
   14e34:	str	r3, [r7]
   14e38:	add	sp, sp, #92	; 0x5c
   14e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e40:	mov	r3, #8
   14e44:	str	r3, [sp]
   14e48:	add	r1, sp, #36	; 0x24
   14e4c:	rsb	r2, r2, #1
   14e50:	mvn	r3, #-2147483648	; 0x80000000
   14e54:	mov	r0, #0
   14e58:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14e5c:	mov	r4, r0
   14e60:	ldm	r6, {r0, r1}
   14e64:	str	r4, [r5]
   14e68:	stm	r4, {r0, r1}
   14e6c:	b	14d5c <__assert_fail@plt+0x3ed0>
   14e70:	andeq	sl, r2, r4, ror #2
   14e74:	andeq	sl, r2, ip, ror #1
   14e78:	muleq	r2, r4, r1
   14e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e80:	sub	sp, sp, #180	; 0xb4
   14e84:	mov	r6, r1
   14e88:	mov	r4, r0
   14e8c:	mov	r9, r2
   14e90:	add	r0, sp, #80	; 0x50
   14e94:	mov	r2, #48	; 0x30
   14e98:	mov	r1, #0
   14e9c:	bl	10dd8 <memset@plt>
   14ea0:	cmp	r6, #10
   14ea4:	beq	15084 <__assert_fail@plt+0x41f8>
   14ea8:	add	r5, sp, #80	; 0x50
   14eac:	str	r6, [sp, #80]	; 0x50
   14eb0:	ldm	r5!, {r0, r1, r2, r3}
   14eb4:	add	ip, sp, #128	; 0x80
   14eb8:	mov	r7, ip
   14ebc:	add	lr, sp, #32
   14ec0:	stmia	ip!, {r0, r1, r2, r3}
   14ec4:	mov	r8, #67108864	; 0x4000000
   14ec8:	ldm	r5!, {r0, r1, r2, r3}
   14ecc:	ldr	r6, [pc, #436]	; 15088 <__assert_fail@plt+0x41fc>
   14ed0:	stmia	ip!, {r0, r1, r2, r3}
   14ed4:	ldm	r5, {r0, r1, r2, r3}
   14ed8:	stm	ip, {r0, r1, r2, r3}
   14edc:	ldm	r7!, {r0, r1, r2, r3}
   14ee0:	stmia	lr!, {r0, r1, r2, r3}
   14ee4:	ldm	r7!, {r0, r1, r2, r3}
   14ee8:	str	r8, [sp, #44]	; 0x2c
   14eec:	stmia	lr!, {r0, r1, r2, r3}
   14ef0:	ldm	ip, {r0, r1, r2, r3}
   14ef4:	stm	lr, {r0, r1, r2, r3}
   14ef8:	bl	10dc0 <__errno_location@plt>
   14efc:	cmn	r4, #-2147483647	; 0x80000001
   14f00:	ldr	r5, [r6]
   14f04:	mov	r7, r0
   14f08:	movne	r0, #0
   14f0c:	moveq	r0, #1
   14f10:	ldr	r3, [r7]
   14f14:	orrs	r0, r0, r4, lsr #31
   14f18:	str	r3, [sp, #24]
   14f1c:	bne	15084 <__assert_fail@plt+0x41f8>
   14f20:	ldr	r2, [r6, #4]
   14f24:	cmp	r4, r2
   14f28:	blt	14f88 <__assert_fail@plt+0x40fc>
   14f2c:	add	r8, r6, #8
   14f30:	cmp	r5, r8
   14f34:	str	r2, [sp, #80]	; 0x50
   14f38:	beq	15054 <__assert_fail@plt+0x41c8>
   14f3c:	mov	r3, #8
   14f40:	sub	r2, r4, r2
   14f44:	mov	r0, r5
   14f48:	str	r3, [sp]
   14f4c:	add	r2, r2, #1
   14f50:	add	r1, sp, #80	; 0x50
   14f54:	mvn	r3, #-2147483648	; 0x80000000
   14f58:	bl	16b70 <__assert_fail@plt+0x5ce4>
   14f5c:	mov	r5, r0
   14f60:	str	r0, [r6]
   14f64:	ldr	r0, [r6, #4]
   14f68:	ldr	r2, [sp, #80]	; 0x50
   14f6c:	mov	r1, #0
   14f70:	sub	r2, r2, r0
   14f74:	add	r0, r5, r0, lsl #3
   14f78:	lsl	r2, r2, #3
   14f7c:	bl	10dd8 <memset@plt>
   14f80:	ldr	r3, [sp, #80]	; 0x50
   14f84:	str	r3, [r6, #4]
   14f88:	add	fp, r5, r4, lsl #3
   14f8c:	ldr	r1, [sp, #36]	; 0x24
   14f90:	ldr	r8, [r5, r4, lsl #3]
   14f94:	ldr	r6, [fp, #4]
   14f98:	ldr	r2, [sp, #72]	; 0x48
   14f9c:	ldr	r3, [sp, #32]
   14fa0:	ldr	ip, [sp, #76]	; 0x4c
   14fa4:	orr	r1, r1, #1
   14fa8:	add	sl, sp, #40	; 0x28
   14fac:	str	r1, [sp, #28]
   14fb0:	str	r1, [sp, #4]
   14fb4:	str	r2, [sp, #12]
   14fb8:	str	r3, [sp]
   14fbc:	mov	r0, r6
   14fc0:	mov	r1, r8
   14fc4:	str	ip, [sp, #16]
   14fc8:	str	sl, [sp, #8]
   14fcc:	mvn	r3, #0
   14fd0:	mov	r2, r9
   14fd4:	bl	12078 <__assert_fail@plt+0x11ec>
   14fd8:	cmp	r8, r0
   14fdc:	bhi	15040 <__assert_fail@plt+0x41b4>
   14fe0:	ldr	r3, [pc, #164]	; 1508c <__assert_fail@plt+0x4200>
   14fe4:	add	r8, r0, #1
   14fe8:	cmp	r6, r3
   14fec:	str	r8, [r5, r4, lsl #3]
   14ff0:	beq	14ffc <__assert_fail@plt+0x4170>
   14ff4:	mov	r0, r6
   14ff8:	bl	18028 <__assert_fail@plt+0x719c>
   14ffc:	mov	r0, r8
   15000:	bl	16954 <__assert_fail@plt+0x5ac8>
   15004:	ldr	lr, [sp, #76]	; 0x4c
   15008:	ldr	r3, [sp, #32]
   1500c:	ldr	ip, [sp, #72]	; 0x48
   15010:	ldr	r4, [sp, #28]
   15014:	mov	r2, r9
   15018:	mov	r1, r8
   1501c:	str	r0, [fp, #4]
   15020:	str	r3, [sp]
   15024:	str	sl, [sp, #8]
   15028:	str	r4, [sp, #4]
   1502c:	str	lr, [sp, #16]
   15030:	str	ip, [sp, #12]
   15034:	mvn	r3, #0
   15038:	mov	r6, r0
   1503c:	bl	12078 <__assert_fail@plt+0x11ec>
   15040:	ldr	r3, [sp, #24]
   15044:	mov	r0, r6
   15048:	str	r3, [r7]
   1504c:	add	sp, sp, #180	; 0xb4
   15050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15054:	mov	r3, #8
   15058:	sub	r2, r4, r2
   1505c:	add	r1, sp, #80	; 0x50
   15060:	str	r3, [sp]
   15064:	add	r2, r2, #1
   15068:	mvn	r3, #-2147483648	; 0x80000000
   1506c:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15070:	mov	r5, r0
   15074:	ldm	r8, {r0, r1}
   15078:	str	r5, [r6]
   1507c:	stm	r5, {r0, r1}
   15080:	b	14f64 <__assert_fail@plt+0x40d8>
   15084:	bl	10e74 <abort@plt>
   15088:	andeq	sl, r2, ip, ror #1
   1508c:	muleq	r2, r4, r1
   15090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15094:	mov	r7, r1
   15098:	ldr	lr, [pc, #492]	; 1528c <__assert_fail@plt+0x4400>
   1509c:	mov	r8, r2
   150a0:	mov	r4, r0
   150a4:	mov	fp, r3
   150a8:	ldm	lr!, {r0, r1, r2, r3}
   150ac:	sub	sp, sp, #100	; 0x64
   150b0:	add	ip, sp, #48	; 0x30
   150b4:	mov	sl, #10
   150b8:	stmia	ip!, {r0, r1, r2, r3}
   150bc:	cmp	r8, #0
   150c0:	cmpne	r7, #0
   150c4:	ldm	lr!, {r0, r1, r2, r3}
   150c8:	str	sl, [sp, #48]	; 0x30
   150cc:	stmia	ip!, {r0, r1, r2, r3}
   150d0:	ldm	lr, {r0, r1, r2, r3}
   150d4:	stm	ip, {r0, r1, r2, r3}
   150d8:	beq	15288 <__assert_fail@plt+0x43fc>
   150dc:	str	r7, [sp, #88]	; 0x58
   150e0:	str	r8, [sp, #92]	; 0x5c
   150e4:	bl	10dc0 <__errno_location@plt>
   150e8:	ldr	r6, [pc, #416]	; 15290 <__assert_fail@plt+0x4404>
   150ec:	cmn	r4, #-2147483647	; 0x80000001
   150f0:	ldr	r5, [r6]
   150f4:	mov	r9, r0
   150f8:	movne	r0, #0
   150fc:	moveq	r0, #1
   15100:	ldr	r3, [r9]
   15104:	orrs	r0, r0, r4, lsr #31
   15108:	str	r3, [sp, #28]
   1510c:	bne	15288 <__assert_fail@plt+0x43fc>
   15110:	ldr	r2, [r6, #4]
   15114:	cmp	r4, r2
   15118:	movlt	r3, sl
   1511c:	blt	15188 <__assert_fail@plt+0x42fc>
   15120:	add	r7, r6, #8
   15124:	cmp	r5, r7
   15128:	str	r2, [sp, #44]	; 0x2c
   1512c:	beq	15258 <__assert_fail@plt+0x43cc>
   15130:	mov	r3, #8
   15134:	sub	r2, r4, r2
   15138:	mov	r0, r5
   1513c:	str	r3, [sp]
   15140:	add	r2, r2, #1
   15144:	mvn	r3, #-2147483648	; 0x80000000
   15148:	add	r1, sp, #44	; 0x2c
   1514c:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15150:	mov	r5, r0
   15154:	str	r0, [r6]
   15158:	ldr	r0, [r6, #4]
   1515c:	ldr	r2, [sp, #44]	; 0x2c
   15160:	mov	r1, #0
   15164:	sub	r2, r2, r0
   15168:	add	r0, r5, r0, lsl #3
   1516c:	lsl	r2, r2, #3
   15170:	bl	10dd8 <memset@plt>
   15174:	ldr	r3, [sp, #48]	; 0x30
   15178:	ldr	r7, [sp, #88]	; 0x58
   1517c:	ldr	r8, [sp, #92]	; 0x5c
   15180:	ldr	r2, [sp, #44]	; 0x2c
   15184:	str	r2, [r6, #4]
   15188:	add	r2, r5, r4, lsl #3
   1518c:	mov	r1, r2
   15190:	str	r2, [sp, #32]
   15194:	ldr	r2, [sp, #52]	; 0x34
   15198:	ldr	r6, [r1, #4]
   1519c:	ldr	sl, [r5, r4, lsl #3]
   151a0:	orr	r2, r2, #1
   151a4:	str	r3, [sp]
   151a8:	add	r3, sp, #56	; 0x38
   151ac:	str	r2, [sp, #36]	; 0x24
   151b0:	str	r2, [sp, #4]
   151b4:	str	r3, [sp, #8]
   151b8:	mov	r0, r6
   151bc:	str	r8, [sp, #16]
   151c0:	str	r7, [sp, #12]
   151c4:	mov	r1, sl
   151c8:	mvn	r3, #0
   151cc:	mov	r2, fp
   151d0:	bl	12078 <__assert_fail@plt+0x11ec>
   151d4:	cmp	sl, r0
   151d8:	bhi	15244 <__assert_fail@plt+0x43b8>
   151dc:	ldr	r3, [pc, #176]	; 15294 <__assert_fail@plt+0x4408>
   151e0:	add	r7, r0, #1
   151e4:	cmp	r6, r3
   151e8:	str	r7, [r5, r4, lsl #3]
   151ec:	beq	151f8 <__assert_fail@plt+0x436c>
   151f0:	mov	r0, r6
   151f4:	bl	18028 <__assert_fail@plt+0x719c>
   151f8:	mov	r0, r7
   151fc:	bl	16954 <__assert_fail@plt+0x5ac8>
   15200:	ldr	r3, [sp, #32]
   15204:	ldr	lr, [sp, #92]	; 0x5c
   15208:	ldr	ip, [sp, #88]	; 0x58
   1520c:	ldr	r4, [sp, #36]	; 0x24
   15210:	mov	r2, fp
   15214:	mov	r1, r7
   15218:	str	r0, [r3, #4]
   1521c:	add	r3, sp, #56	; 0x38
   15220:	str	r3, [sp, #8]
   15224:	ldr	r3, [sp, #48]	; 0x30
   15228:	str	r4, [sp, #4]
   1522c:	str	r3, [sp]
   15230:	str	lr, [sp, #16]
   15234:	str	ip, [sp, #12]
   15238:	mvn	r3, #0
   1523c:	mov	r6, r0
   15240:	bl	12078 <__assert_fail@plt+0x11ec>
   15244:	ldr	r3, [sp, #28]
   15248:	mov	r0, r6
   1524c:	str	r3, [r9]
   15250:	add	sp, sp, #100	; 0x64
   15254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15258:	mov	r3, #8
   1525c:	sub	r2, r4, r2
   15260:	str	r3, [sp]
   15264:	add	r1, sp, #44	; 0x2c
   15268:	add	r2, r2, #1
   1526c:	mvn	r3, #-2147483648	; 0x80000000
   15270:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15274:	mov	r5, r0
   15278:	ldm	r7, {r0, r1}
   1527c:	str	r5, [r6]
   15280:	stm	r5, {r0, r1}
   15284:	b	15158 <__assert_fail@plt+0x42cc>
   15288:	bl	10e74 <abort@plt>
   1528c:	andeq	sl, r2, r4, ror #2
   15290:	andeq	sl, r2, ip, ror #1
   15294:	muleq	r2, r4, r1
   15298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1529c:	mov	r7, r1
   152a0:	ldr	lr, [pc, #492]	; 15494 <__assert_fail@plt+0x4608>
   152a4:	mov	r8, r2
   152a8:	mov	r4, r0
   152ac:	mov	fp, r3
   152b0:	ldm	lr!, {r0, r1, r2, r3}
   152b4:	sub	sp, sp, #100	; 0x64
   152b8:	add	ip, sp, #48	; 0x30
   152bc:	mov	sl, #10
   152c0:	stmia	ip!, {r0, r1, r2, r3}
   152c4:	cmp	r8, #0
   152c8:	cmpne	r7, #0
   152cc:	ldm	lr!, {r0, r1, r2, r3}
   152d0:	str	sl, [sp, #48]	; 0x30
   152d4:	stmia	ip!, {r0, r1, r2, r3}
   152d8:	ldm	lr, {r0, r1, r2, r3}
   152dc:	stm	ip, {r0, r1, r2, r3}
   152e0:	beq	15490 <__assert_fail@plt+0x4604>
   152e4:	str	r7, [sp, #88]	; 0x58
   152e8:	str	r8, [sp, #92]	; 0x5c
   152ec:	bl	10dc0 <__errno_location@plt>
   152f0:	ldr	r6, [pc, #416]	; 15498 <__assert_fail@plt+0x460c>
   152f4:	cmn	r4, #-2147483647	; 0x80000001
   152f8:	ldr	r5, [r6]
   152fc:	mov	r9, r0
   15300:	movne	r0, #0
   15304:	moveq	r0, #1
   15308:	ldr	r3, [r9]
   1530c:	orrs	r0, r0, r4, lsr #31
   15310:	str	r3, [sp, #28]
   15314:	bne	15490 <__assert_fail@plt+0x4604>
   15318:	ldr	r2, [r6, #4]
   1531c:	cmp	r4, r2
   15320:	movlt	r3, sl
   15324:	blt	15390 <__assert_fail@plt+0x4504>
   15328:	add	r7, r6, #8
   1532c:	cmp	r5, r7
   15330:	str	r2, [sp, #44]	; 0x2c
   15334:	beq	15460 <__assert_fail@plt+0x45d4>
   15338:	mov	r3, #8
   1533c:	sub	r2, r4, r2
   15340:	mov	r0, r5
   15344:	str	r3, [sp]
   15348:	add	r2, r2, #1
   1534c:	mvn	r3, #-2147483648	; 0x80000000
   15350:	add	r1, sp, #44	; 0x2c
   15354:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15358:	mov	r5, r0
   1535c:	str	r0, [r6]
   15360:	ldr	r0, [r6, #4]
   15364:	ldr	r2, [sp, #44]	; 0x2c
   15368:	mov	r1, #0
   1536c:	sub	r2, r2, r0
   15370:	add	r0, r5, r0, lsl #3
   15374:	lsl	r2, r2, #3
   15378:	bl	10dd8 <memset@plt>
   1537c:	ldr	r3, [sp, #48]	; 0x30
   15380:	ldr	r7, [sp, #88]	; 0x58
   15384:	ldr	r8, [sp, #92]	; 0x5c
   15388:	ldr	r2, [sp, #44]	; 0x2c
   1538c:	str	r2, [r6, #4]
   15390:	add	r2, r5, r4, lsl #3
   15394:	mov	r1, r2
   15398:	str	r2, [sp, #32]
   1539c:	ldr	r2, [sp, #52]	; 0x34
   153a0:	ldr	r6, [r1, #4]
   153a4:	ldr	sl, [r5, r4, lsl #3]
   153a8:	orr	r2, r2, #1
   153ac:	str	r3, [sp]
   153b0:	add	r3, sp, #56	; 0x38
   153b4:	str	r2, [sp, #36]	; 0x24
   153b8:	str	r2, [sp, #4]
   153bc:	str	r3, [sp, #8]
   153c0:	mov	r0, r6
   153c4:	str	r8, [sp, #16]
   153c8:	str	r7, [sp, #12]
   153cc:	mov	r1, sl
   153d0:	ldr	r3, [sp, #136]	; 0x88
   153d4:	mov	r2, fp
   153d8:	bl	12078 <__assert_fail@plt+0x11ec>
   153dc:	cmp	sl, r0
   153e0:	bhi	1544c <__assert_fail@plt+0x45c0>
   153e4:	ldr	r3, [pc, #176]	; 1549c <__assert_fail@plt+0x4610>
   153e8:	add	r7, r0, #1
   153ec:	cmp	r6, r3
   153f0:	str	r7, [r5, r4, lsl #3]
   153f4:	beq	15400 <__assert_fail@plt+0x4574>
   153f8:	mov	r0, r6
   153fc:	bl	18028 <__assert_fail@plt+0x719c>
   15400:	mov	r0, r7
   15404:	bl	16954 <__assert_fail@plt+0x5ac8>
   15408:	ldr	r3, [sp, #32]
   1540c:	ldr	lr, [sp, #92]	; 0x5c
   15410:	ldr	ip, [sp, #88]	; 0x58
   15414:	ldr	r4, [sp, #36]	; 0x24
   15418:	mov	r2, fp
   1541c:	mov	r1, r7
   15420:	str	r0, [r3, #4]
   15424:	add	r3, sp, #56	; 0x38
   15428:	str	r3, [sp, #8]
   1542c:	ldr	r3, [sp, #48]	; 0x30
   15430:	str	r4, [sp, #4]
   15434:	str	r3, [sp]
   15438:	str	lr, [sp, #16]
   1543c:	str	ip, [sp, #12]
   15440:	ldr	r3, [sp, #136]	; 0x88
   15444:	mov	r6, r0
   15448:	bl	12078 <__assert_fail@plt+0x11ec>
   1544c:	ldr	r3, [sp, #28]
   15450:	mov	r0, r6
   15454:	str	r3, [r9]
   15458:	add	sp, sp, #100	; 0x64
   1545c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15460:	mov	r3, #8
   15464:	sub	r2, r4, r2
   15468:	str	r3, [sp]
   1546c:	add	r1, sp, #44	; 0x2c
   15470:	add	r2, r2, #1
   15474:	mvn	r3, #-2147483648	; 0x80000000
   15478:	bl	16b70 <__assert_fail@plt+0x5ce4>
   1547c:	mov	r5, r0
   15480:	ldm	r7, {r0, r1}
   15484:	str	r5, [r6]
   15488:	stm	r5, {r0, r1}
   1548c:	b	15360 <__assert_fail@plt+0x44d4>
   15490:	bl	10e74 <abort@plt>
   15494:	andeq	sl, r2, r4, ror #2
   15498:	andeq	sl, r2, ip, ror #1
   1549c:	muleq	r2, r4, r1
   154a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a4:	mov	r5, r0
   154a8:	ldr	lr, [pc, #452]	; 15674 <__assert_fail@plt+0x47e8>
   154ac:	mov	r6, r1
   154b0:	mov	sl, r2
   154b4:	ldm	lr!, {r0, r1, r2, r3}
   154b8:	sub	sp, sp, #92	; 0x5c
   154bc:	add	ip, sp, #40	; 0x28
   154c0:	cmp	r6, #0
   154c4:	cmpne	r5, #0
   154c8:	stmia	ip!, {r0, r1, r2, r3}
   154cc:	mov	r9, #10
   154d0:	ldm	lr!, {r0, r1, r2, r3}
   154d4:	moveq	fp, #1
   154d8:	movne	fp, #0
   154dc:	str	r9, [sp, #40]	; 0x28
   154e0:	stmia	ip!, {r0, r1, r2, r3}
   154e4:	ldm	lr, {r0, r1, r2, r3}
   154e8:	stm	ip, {r0, r1, r2, r3}
   154ec:	beq	15670 <__assert_fail@plt+0x47e4>
   154f0:	str	r5, [sp, #80]	; 0x50
   154f4:	str	r6, [sp, #84]	; 0x54
   154f8:	bl	10dc0 <__errno_location@plt>
   154fc:	ldr	r7, [pc, #372]	; 15678 <__assert_fail@plt+0x47ec>
   15500:	ldr	r2, [r7, #4]
   15504:	ldr	r4, [r7]
   15508:	cmp	r2, #0
   1550c:	ldr	r3, [r0]
   15510:	mov	r8, r0
   15514:	str	r3, [sp, #24]
   15518:	movgt	r3, r9
   1551c:	bgt	15584 <__assert_fail@plt+0x46f8>
   15520:	add	r5, r7, #8
   15524:	cmp	r4, r5
   15528:	str	r2, [sp, #36]	; 0x24
   1552c:	beq	15640 <__assert_fail@plt+0x47b4>
   15530:	mov	r3, #8
   15534:	mov	r0, r4
   15538:	str	r3, [sp]
   1553c:	rsb	r2, r2, #1
   15540:	mvn	r3, #-2147483648	; 0x80000000
   15544:	add	r1, sp, #36	; 0x24
   15548:	bl	16b70 <__assert_fail@plt+0x5ce4>
   1554c:	mov	r4, r0
   15550:	str	r0, [r7]
   15554:	ldr	r0, [r7, #4]
   15558:	ldr	r2, [sp, #36]	; 0x24
   1555c:	mov	r1, #0
   15560:	sub	r2, r2, r0
   15564:	add	r0, r4, r0, lsl #3
   15568:	lsl	r2, r2, #3
   1556c:	bl	10dd8 <memset@plt>
   15570:	ldr	r3, [sp, #40]	; 0x28
   15574:	ldr	r5, [sp, #80]	; 0x50
   15578:	ldr	r6, [sp, #84]	; 0x54
   1557c:	ldr	r2, [sp, #36]	; 0x24
   15580:	str	r2, [r7, #4]
   15584:	ldr	r2, [sp, #44]	; 0x2c
   15588:	ldr	r9, [r4]
   1558c:	ldr	r7, [r4, #4]
   15590:	orr	r2, r2, #1
   15594:	add	fp, sp, #48	; 0x30
   15598:	str	r2, [sp, #28]
   1559c:	str	r2, [sp, #4]
   155a0:	str	r3, [sp]
   155a4:	str	r6, [sp, #16]
   155a8:	str	r5, [sp, #12]
   155ac:	mov	r1, r9
   155b0:	mov	r0, r7
   155b4:	str	fp, [sp, #8]
   155b8:	mvn	r3, #0
   155bc:	mov	r2, sl
   155c0:	bl	12078 <__assert_fail@plt+0x11ec>
   155c4:	cmp	r9, r0
   155c8:	bhi	1562c <__assert_fail@plt+0x47a0>
   155cc:	ldr	r3, [pc, #168]	; 1567c <__assert_fail@plt+0x47f0>
   155d0:	add	r5, r0, #1
   155d4:	cmp	r7, r3
   155d8:	str	r5, [r4]
   155dc:	beq	155e8 <__assert_fail@plt+0x475c>
   155e0:	mov	r0, r7
   155e4:	bl	18028 <__assert_fail@plt+0x719c>
   155e8:	mov	r0, r5
   155ec:	bl	16954 <__assert_fail@plt+0x5ac8>
   155f0:	ldr	lr, [sp, #84]	; 0x54
   155f4:	ldr	r3, [sp, #40]	; 0x28
   155f8:	ldr	ip, [sp, #80]	; 0x50
   155fc:	mov	r2, sl
   15600:	mov	r1, r5
   15604:	str	r0, [r4, #4]
   15608:	ldr	r4, [sp, #28]
   1560c:	str	r3, [sp]
   15610:	str	fp, [sp, #8]
   15614:	str	r4, [sp, #4]
   15618:	str	lr, [sp, #16]
   1561c:	str	ip, [sp, #12]
   15620:	mvn	r3, #0
   15624:	mov	r7, r0
   15628:	bl	12078 <__assert_fail@plt+0x11ec>
   1562c:	ldr	r3, [sp, #24]
   15630:	mov	r0, r7
   15634:	str	r3, [r8]
   15638:	add	sp, sp, #92	; 0x5c
   1563c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15640:	mov	r3, #8
   15644:	str	r3, [sp]
   15648:	add	r1, sp, #36	; 0x24
   1564c:	rsb	r2, r2, #1
   15650:	mov	r0, fp
   15654:	mvn	r3, #-2147483648	; 0x80000000
   15658:	bl	16b70 <__assert_fail@plt+0x5ce4>
   1565c:	mov	r4, r0
   15660:	ldm	r5, {r0, r1}
   15664:	str	r4, [r7]
   15668:	stm	r4, {r0, r1}
   1566c:	b	15554 <__assert_fail@plt+0x46c8>
   15670:	bl	10e74 <abort@plt>
   15674:	andeq	sl, r2, r4, ror #2
   15678:	andeq	sl, r2, ip, ror #1
   1567c:	muleq	r2, r4, r1
   15680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15684:	mov	r5, r0
   15688:	ldr	lr, [pc, #464]	; 15860 <__assert_fail@plt+0x49d4>
   1568c:	mov	r6, r1
   15690:	mov	sl, r2
   15694:	mov	fp, r3
   15698:	ldm	lr!, {r0, r1, r2, r3}
   1569c:	sub	sp, sp, #92	; 0x5c
   156a0:	add	ip, sp, #40	; 0x28
   156a4:	cmp	r6, #0
   156a8:	cmpne	r5, #0
   156ac:	stmia	ip!, {r0, r1, r2, r3}
   156b0:	moveq	r4, #1
   156b4:	ldm	lr!, {r0, r1, r2, r3}
   156b8:	movne	r4, #0
   156bc:	mov	r9, #10
   156c0:	str	r4, [sp, #28]
   156c4:	stmia	ip!, {r0, r1, r2, r3}
   156c8:	ldm	lr, {r0, r1, r2, r3}
   156cc:	str	r9, [sp, #40]	; 0x28
   156d0:	stm	ip, {r0, r1, r2, r3}
   156d4:	beq	1585c <__assert_fail@plt+0x49d0>
   156d8:	str	r5, [sp, #80]	; 0x50
   156dc:	str	r6, [sp, #84]	; 0x54
   156e0:	bl	10dc0 <__errno_location@plt>
   156e4:	ldr	r7, [pc, #376]	; 15864 <__assert_fail@plt+0x49d8>
   156e8:	ldr	r2, [r7, #4]
   156ec:	ldr	r4, [r7]
   156f0:	cmp	r2, #0
   156f4:	ldr	r3, [r0]
   156f8:	mov	r8, r0
   156fc:	str	r3, [sp, #24]
   15700:	movgt	r3, r9
   15704:	bgt	1576c <__assert_fail@plt+0x48e0>
   15708:	add	r5, r7, #8
   1570c:	cmp	r4, r5
   15710:	str	r2, [sp, #36]	; 0x24
   15714:	beq	1582c <__assert_fail@plt+0x49a0>
   15718:	mov	r3, #8
   1571c:	mov	r0, r4
   15720:	str	r3, [sp]
   15724:	rsb	r2, r2, #1
   15728:	mvn	r3, #-2147483648	; 0x80000000
   1572c:	add	r1, sp, #36	; 0x24
   15730:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15734:	mov	r4, r0
   15738:	str	r0, [r7]
   1573c:	ldr	r0, [r7, #4]
   15740:	ldr	r2, [sp, #36]	; 0x24
   15744:	mov	r1, #0
   15748:	sub	r2, r2, r0
   1574c:	add	r0, r4, r0, lsl #3
   15750:	lsl	r2, r2, #3
   15754:	bl	10dd8 <memset@plt>
   15758:	ldr	r3, [sp, #40]	; 0x28
   1575c:	ldr	r5, [sp, #80]	; 0x50
   15760:	ldr	r6, [sp, #84]	; 0x54
   15764:	ldr	r2, [sp, #36]	; 0x24
   15768:	str	r2, [r7, #4]
   1576c:	ldr	r2, [sp, #44]	; 0x2c
   15770:	ldr	r9, [r4]
   15774:	ldr	r7, [r4, #4]
   15778:	orr	r2, r2, #1
   1577c:	str	r3, [sp]
   15780:	add	r3, sp, #48	; 0x30
   15784:	str	r2, [sp, #28]
   15788:	str	r2, [sp, #4]
   1578c:	str	r3, [sp, #8]
   15790:	str	r6, [sp, #16]
   15794:	str	r5, [sp, #12]
   15798:	mov	r1, r9
   1579c:	mov	r0, r7
   157a0:	mov	r3, fp
   157a4:	mov	r2, sl
   157a8:	bl	12078 <__assert_fail@plt+0x11ec>
   157ac:	cmp	r9, r0
   157b0:	bhi	15818 <__assert_fail@plt+0x498c>
   157b4:	ldr	r3, [pc, #172]	; 15868 <__assert_fail@plt+0x49dc>
   157b8:	add	r5, r0, #1
   157bc:	cmp	r7, r3
   157c0:	str	r5, [r4]
   157c4:	beq	157d0 <__assert_fail@plt+0x4944>
   157c8:	mov	r0, r7
   157cc:	bl	18028 <__assert_fail@plt+0x719c>
   157d0:	mov	r0, r5
   157d4:	bl	16954 <__assert_fail@plt+0x5ac8>
   157d8:	add	lr, sp, #48	; 0x30
   157dc:	ldr	ip, [sp, #84]	; 0x54
   157e0:	mov	r1, r5
   157e4:	ldr	r5, [sp, #28]
   157e8:	mov	r3, fp
   157ec:	mov	r2, sl
   157f0:	str	r0, [r4, #4]
   157f4:	ldr	r4, [sp, #80]	; 0x50
   157f8:	str	lr, [sp, #8]
   157fc:	ldr	lr, [sp, #40]	; 0x28
   15800:	str	r5, [sp, #4]
   15804:	str	ip, [sp, #16]
   15808:	str	r4, [sp, #12]
   1580c:	str	lr, [sp]
   15810:	mov	r7, r0
   15814:	bl	12078 <__assert_fail@plt+0x11ec>
   15818:	ldr	r3, [sp, #24]
   1581c:	mov	r0, r7
   15820:	str	r3, [r8]
   15824:	add	sp, sp, #92	; 0x5c
   15828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1582c:	mov	r3, #8
   15830:	str	r3, [sp]
   15834:	add	r1, sp, #36	; 0x24
   15838:	rsb	r2, r2, #1
   1583c:	ldr	r0, [sp, #28]
   15840:	mvn	r3, #-2147483648	; 0x80000000
   15844:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15848:	mov	r4, r0
   1584c:	ldm	r5, {r0, r1}
   15850:	str	r4, [r7]
   15854:	stm	r4, {r0, r1}
   15858:	b	1573c <__assert_fail@plt+0x48b0>
   1585c:	bl	10e74 <abort@plt>
   15860:	andeq	sl, r2, r4, ror #2
   15864:	andeq	sl, r2, ip, ror #1
   15868:	muleq	r2, r4, r1
   1586c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15870:	sub	sp, sp, #52	; 0x34
   15874:	mov	r5, r0
   15878:	mov	sl, r1
   1587c:	mov	fp, r2
   15880:	bl	10dc0 <__errno_location@plt>
   15884:	ldr	r4, [pc, #404]	; 15a20 <__assert_fail@plt+0x4b94>
   15888:	cmn	r5, #-2147483647	; 0x80000001
   1588c:	ldr	r6, [r4]
   15890:	mov	r8, r0
   15894:	movne	r0, #0
   15898:	moveq	r0, #1
   1589c:	ldr	r3, [r8]
   158a0:	orrs	r0, r0, r5, lsr #31
   158a4:	str	r3, [sp, #28]
   158a8:	bne	15a1c <__assert_fail@plt+0x4b90>
   158ac:	ldr	r2, [r4, #4]
   158b0:	cmp	r5, r2
   158b4:	blt	15914 <__assert_fail@plt+0x4a88>
   158b8:	add	r7, r4, #8
   158bc:	cmp	r6, r7
   158c0:	str	r2, [sp, #44]	; 0x2c
   158c4:	beq	159ec <__assert_fail@plt+0x4b60>
   158c8:	mov	r3, #8
   158cc:	sub	r2, r5, r2
   158d0:	mov	r0, r6
   158d4:	str	r3, [sp]
   158d8:	add	r2, r2, #1
   158dc:	mvn	r3, #-2147483648	; 0x80000000
   158e0:	add	r1, sp, #44	; 0x2c
   158e4:	bl	16b70 <__assert_fail@plt+0x5ce4>
   158e8:	mov	r6, r0
   158ec:	str	r0, [r4]
   158f0:	ldr	r0, [r4, #4]
   158f4:	ldr	r2, [sp, #44]	; 0x2c
   158f8:	mov	r1, #0
   158fc:	sub	r2, r2, r0
   15900:	add	r0, r6, r0, lsl #3
   15904:	lsl	r2, r2, #3
   15908:	bl	10dd8 <memset@plt>
   1590c:	ldr	r3, [sp, #44]	; 0x2c
   15910:	str	r3, [r4, #4]
   15914:	ldr	r2, [r4, #56]	; 0x38
   15918:	add	r3, r6, r5, lsl #3
   1591c:	ldr	r1, [r4, #20]
   15920:	ldr	r7, [r3, #4]
   15924:	ldr	r9, [r6, r5, lsl #3]
   15928:	ldr	ip, [r4, #60]	; 0x3c
   1592c:	str	r3, [sp, #32]
   15930:	ldr	r3, [r4, #16]
   15934:	str	r2, [sp, #12]
   15938:	ldr	r2, [pc, #228]	; 15a24 <__assert_fail@plt+0x4b98>
   1593c:	orr	r1, r1, #1
   15940:	str	r1, [sp, #36]	; 0x24
   15944:	str	r1, [sp, #4]
   15948:	str	r2, [sp, #8]
   1594c:	str	r3, [sp]
   15950:	mov	r0, r7
   15954:	mov	r1, r9
   15958:	str	ip, [sp, #16]
   1595c:	mov	r3, fp
   15960:	mov	r2, sl
   15964:	bl	12078 <__assert_fail@plt+0x11ec>
   15968:	cmp	r9, r0
   1596c:	bhi	159d8 <__assert_fail@plt+0x4b4c>
   15970:	ldr	r3, [pc, #176]	; 15a28 <__assert_fail@plt+0x4b9c>
   15974:	add	r9, r0, #1
   15978:	cmp	r7, r3
   1597c:	str	r9, [r6, r5, lsl #3]
   15980:	beq	1598c <__assert_fail@plt+0x4b00>
   15984:	mov	r0, r7
   15988:	bl	18028 <__assert_fail@plt+0x719c>
   1598c:	mov	r0, r9
   15990:	bl	16954 <__assert_fail@plt+0x5ac8>
   15994:	ldr	ip, [sp, #32]
   15998:	ldr	lr, [r4, #60]	; 0x3c
   1599c:	ldr	r5, [r4, #56]	; 0x38
   159a0:	mov	r3, fp
   159a4:	mov	r2, sl
   159a8:	mov	r1, r9
   159ac:	str	r0, [ip, #4]
   159b0:	ldr	ip, [r4, #16]
   159b4:	ldr	r4, [pc, #104]	; 15a24 <__assert_fail@plt+0x4b98>
   159b8:	str	lr, [sp, #16]
   159bc:	str	r4, [sp, #8]
   159c0:	ldr	r4, [sp, #36]	; 0x24
   159c4:	str	r5, [sp, #12]
   159c8:	str	r4, [sp, #4]
   159cc:	str	ip, [sp]
   159d0:	mov	r7, r0
   159d4:	bl	12078 <__assert_fail@plt+0x11ec>
   159d8:	ldr	r3, [sp, #28]
   159dc:	mov	r0, r7
   159e0:	str	r3, [r8]
   159e4:	add	sp, sp, #52	; 0x34
   159e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159ec:	mov	r3, #8
   159f0:	sub	r2, r5, r2
   159f4:	str	r3, [sp]
   159f8:	add	r1, sp, #44	; 0x2c
   159fc:	add	r2, r2, #1
   15a00:	mvn	r3, #-2147483648	; 0x80000000
   15a04:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15a08:	mov	r6, r0
   15a0c:	ldm	r7, {r0, r1}
   15a10:	str	r6, [r4]
   15a14:	stm	r6, {r0, r1}
   15a18:	b	158f0 <__assert_fail@plt+0x4a64>
   15a1c:	bl	10e74 <abort@plt>
   15a20:	andeq	sl, r2, ip, ror #1
   15a24:	andeq	sl, r2, r4, lsl #2
   15a28:	muleq	r2, r4, r1
   15a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a30:	sub	sp, sp, #44	; 0x2c
   15a34:	mov	r9, r0
   15a38:	mov	sl, r1
   15a3c:	bl	10dc0 <__errno_location@plt>
   15a40:	ldr	r4, [pc, #360]	; 15bb0 <__assert_fail@plt+0x4d24>
   15a44:	ldr	r2, [r4, #4]
   15a48:	ldr	r5, [r4]
   15a4c:	cmp	r2, #0
   15a50:	ldr	r3, [r0]
   15a54:	mov	r7, r0
   15a58:	str	r3, [sp, #24]
   15a5c:	bgt	15ab8 <__assert_fail@plt+0x4c2c>
   15a60:	add	r6, r4, #8
   15a64:	cmp	r5, r6
   15a68:	str	r2, [sp, #36]	; 0x24
   15a6c:	beq	15b80 <__assert_fail@plt+0x4cf4>
   15a70:	mov	r3, #8
   15a74:	mov	r0, r5
   15a78:	str	r3, [sp]
   15a7c:	rsb	r2, r2, #1
   15a80:	mvn	r3, #-2147483648	; 0x80000000
   15a84:	add	r1, sp, #36	; 0x24
   15a88:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15a8c:	mov	r5, r0
   15a90:	str	r0, [r4]
   15a94:	ldr	r0, [r4, #4]
   15a98:	ldr	r2, [sp, #36]	; 0x24
   15a9c:	mov	r1, #0
   15aa0:	sub	r2, r2, r0
   15aa4:	add	r0, r5, r0, lsl #3
   15aa8:	lsl	r2, r2, #3
   15aac:	bl	10dd8 <memset@plt>
   15ab0:	ldr	r3, [sp, #36]	; 0x24
   15ab4:	str	r3, [r4, #4]
   15ab8:	ldr	r1, [r4, #20]
   15abc:	ldr	r8, [r5]
   15ac0:	ldr	r6, [r5, #4]
   15ac4:	ldr	r2, [r4, #56]	; 0x38
   15ac8:	ldr	r3, [r4, #16]
   15acc:	ldr	ip, [r4, #60]	; 0x3c
   15ad0:	ldr	fp, [pc, #220]	; 15bb4 <__assert_fail@plt+0x4d28>
   15ad4:	orr	r1, r1, #1
   15ad8:	str	r1, [sp, #28]
   15adc:	str	r1, [sp, #4]
   15ae0:	str	r2, [sp, #12]
   15ae4:	str	r3, [sp]
   15ae8:	mov	r1, r8
   15aec:	mov	r0, r6
   15af0:	str	ip, [sp, #16]
   15af4:	str	fp, [sp, #8]
   15af8:	mov	r3, sl
   15afc:	mov	r2, r9
   15b00:	bl	12078 <__assert_fail@plt+0x11ec>
   15b04:	cmp	r8, r0
   15b08:	bhi	15b6c <__assert_fail@plt+0x4ce0>
   15b0c:	ldr	r3, [pc, #164]	; 15bb8 <__assert_fail@plt+0x4d2c>
   15b10:	add	r8, r0, #1
   15b14:	cmp	r6, r3
   15b18:	str	r8, [r5]
   15b1c:	beq	15b28 <__assert_fail@plt+0x4c9c>
   15b20:	mov	r0, r6
   15b24:	bl	18028 <__assert_fail@plt+0x719c>
   15b28:	mov	r0, r8
   15b2c:	bl	16954 <__assert_fail@plt+0x5ac8>
   15b30:	ldr	lr, [r4, #60]	; 0x3c
   15b34:	ldr	ip, [r4, #16]
   15b38:	mov	r3, sl
   15b3c:	mov	r2, r9
   15b40:	mov	r1, r8
   15b44:	str	r0, [r5, #4]
   15b48:	ldr	r5, [r4, #56]	; 0x38
   15b4c:	ldr	r4, [sp, #28]
   15b50:	str	fp, [sp, #8]
   15b54:	str	r4, [sp, #4]
   15b58:	str	lr, [sp, #16]
   15b5c:	str	r5, [sp, #12]
   15b60:	str	ip, [sp]
   15b64:	mov	r6, r0
   15b68:	bl	12078 <__assert_fail@plt+0x11ec>
   15b6c:	ldr	r3, [sp, #24]
   15b70:	mov	r0, r6
   15b74:	str	r3, [r7]
   15b78:	add	sp, sp, #44	; 0x2c
   15b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b80:	mov	r3, #8
   15b84:	str	r3, [sp]
   15b88:	add	r1, sp, #36	; 0x24
   15b8c:	rsb	r2, r2, #1
   15b90:	mvn	r3, #-2147483648	; 0x80000000
   15b94:	mov	r0, #0
   15b98:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15b9c:	mov	r5, r0
   15ba0:	ldm	r6, {r0, r1}
   15ba4:	str	r5, [r4]
   15ba8:	stm	r5, {r0, r1}
   15bac:	b	15a94 <__assert_fail@plt+0x4c08>
   15bb0:	andeq	sl, r2, ip, ror #1
   15bb4:	andeq	sl, r2, r4, lsl #2
   15bb8:	muleq	r2, r4, r1
   15bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc0:	sub	sp, sp, #44	; 0x2c
   15bc4:	mov	r5, r0
   15bc8:	mov	sl, r1
   15bcc:	bl	10dc0 <__errno_location@plt>
   15bd0:	ldr	r4, [pc, #396]	; 15d64 <__assert_fail@plt+0x4ed8>
   15bd4:	cmn	r5, #-2147483647	; 0x80000001
   15bd8:	ldr	r6, [r4]
   15bdc:	mov	r8, r0
   15be0:	movne	r0, #0
   15be4:	moveq	r0, #1
   15be8:	ldr	r3, [r8]
   15bec:	orrs	r0, r0, r5, lsr #31
   15bf0:	str	r3, [sp, #24]
   15bf4:	bne	15d60 <__assert_fail@plt+0x4ed4>
   15bf8:	ldr	r2, [r4, #4]
   15bfc:	cmp	r5, r2
   15c00:	blt	15c60 <__assert_fail@plt+0x4dd4>
   15c04:	add	r7, r4, #8
   15c08:	cmp	r6, r7
   15c0c:	str	r2, [sp, #36]	; 0x24
   15c10:	beq	15d30 <__assert_fail@plt+0x4ea4>
   15c14:	mov	r3, #8
   15c18:	sub	r2, r5, r2
   15c1c:	mov	r0, r6
   15c20:	str	r3, [sp]
   15c24:	add	r2, r2, #1
   15c28:	mvn	r3, #-2147483648	; 0x80000000
   15c2c:	add	r1, sp, #36	; 0x24
   15c30:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15c34:	mov	r6, r0
   15c38:	str	r0, [r4]
   15c3c:	ldr	r0, [r4, #4]
   15c40:	ldr	r2, [sp, #36]	; 0x24
   15c44:	mov	r1, #0
   15c48:	sub	r2, r2, r0
   15c4c:	add	r0, r6, r0, lsl #3
   15c50:	lsl	r2, r2, #3
   15c54:	bl	10dd8 <memset@plt>
   15c58:	ldr	r3, [sp, #36]	; 0x24
   15c5c:	str	r3, [r4, #4]
   15c60:	ldr	r2, [r4, #56]	; 0x38
   15c64:	add	fp, r6, r5, lsl #3
   15c68:	ldr	r1, [r4, #20]
   15c6c:	ldr	r9, [r6, r5, lsl #3]
   15c70:	ldr	r7, [fp, #4]
   15c74:	ldr	r3, [r4, #16]
   15c78:	ldr	ip, [r4, #60]	; 0x3c
   15c7c:	str	r2, [sp, #12]
   15c80:	ldr	r2, [pc, #224]	; 15d68 <__assert_fail@plt+0x4edc>
   15c84:	orr	r1, r1, #1
   15c88:	str	r1, [sp, #28]
   15c8c:	str	r1, [sp, #4]
   15c90:	str	r2, [sp, #8]
   15c94:	str	r3, [sp]
   15c98:	mov	r0, r7
   15c9c:	mov	r1, r9
   15ca0:	str	ip, [sp, #16]
   15ca4:	mvn	r3, #0
   15ca8:	mov	r2, sl
   15cac:	bl	12078 <__assert_fail@plt+0x11ec>
   15cb0:	cmp	r9, r0
   15cb4:	bhi	15d1c <__assert_fail@plt+0x4e90>
   15cb8:	ldr	r3, [pc, #172]	; 15d6c <__assert_fail@plt+0x4ee0>
   15cbc:	add	r9, r0, #1
   15cc0:	cmp	r7, r3
   15cc4:	str	r9, [r6, r5, lsl #3]
   15cc8:	beq	15cd4 <__assert_fail@plt+0x4e48>
   15ccc:	mov	r0, r7
   15cd0:	bl	18028 <__assert_fail@plt+0x719c>
   15cd4:	mov	r0, r9
   15cd8:	bl	16954 <__assert_fail@plt+0x5ac8>
   15cdc:	ldr	ip, [r4, #60]	; 0x3c
   15ce0:	ldr	r3, [r4, #16]
   15ce4:	ldr	lr, [r4, #56]	; 0x38
   15ce8:	ldr	r4, [pc, #120]	; 15d68 <__assert_fail@plt+0x4edc>
   15cec:	mov	r2, sl
   15cf0:	mov	r1, r9
   15cf4:	str	r0, [fp, #4]
   15cf8:	str	r4, [sp, #8]
   15cfc:	ldr	r4, [sp, #28]
   15d00:	str	r3, [sp]
   15d04:	str	r4, [sp, #4]
   15d08:	str	ip, [sp, #16]
   15d0c:	str	lr, [sp, #12]
   15d10:	mvn	r3, #0
   15d14:	mov	r7, r0
   15d18:	bl	12078 <__assert_fail@plt+0x11ec>
   15d1c:	ldr	r3, [sp, #24]
   15d20:	mov	r0, r7
   15d24:	str	r3, [r8]
   15d28:	add	sp, sp, #44	; 0x2c
   15d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d30:	mov	r3, #8
   15d34:	sub	r2, r5, r2
   15d38:	str	r3, [sp]
   15d3c:	add	r1, sp, #36	; 0x24
   15d40:	add	r2, r2, #1
   15d44:	mvn	r3, #-2147483648	; 0x80000000
   15d48:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15d4c:	mov	r6, r0
   15d50:	ldm	r7, {r0, r1}
   15d54:	str	r6, [r4]
   15d58:	stm	r6, {r0, r1}
   15d5c:	b	15c3c <__assert_fail@plt+0x4db0>
   15d60:	bl	10e74 <abort@plt>
   15d64:	andeq	sl, r2, ip, ror #1
   15d68:	andeq	sl, r2, r4, lsl #2
   15d6c:	muleq	r2, r4, r1
   15d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d74:	sub	sp, sp, #44	; 0x2c
   15d78:	mov	sl, r0
   15d7c:	bl	10dc0 <__errno_location@plt>
   15d80:	ldr	r4, [pc, #348]	; 15ee4 <__assert_fail@plt+0x5058>
   15d84:	ldr	r2, [r4, #4]
   15d88:	ldr	r5, [r4]
   15d8c:	cmp	r2, #0
   15d90:	ldr	r3, [r0]
   15d94:	mov	r8, r0
   15d98:	str	r3, [sp, #28]
   15d9c:	bgt	15df8 <__assert_fail@plt+0x4f6c>
   15da0:	add	r6, r4, #8
   15da4:	cmp	r5, r6
   15da8:	str	r2, [sp, #36]	; 0x24
   15dac:	beq	15eb4 <__assert_fail@plt+0x5028>
   15db0:	mov	r3, #8
   15db4:	mov	r0, r5
   15db8:	str	r3, [sp]
   15dbc:	rsb	r2, r2, #1
   15dc0:	mvn	r3, #-2147483648	; 0x80000000
   15dc4:	add	r1, sp, #36	; 0x24
   15dc8:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15dcc:	mov	r5, r0
   15dd0:	str	r0, [r4]
   15dd4:	ldr	r0, [r4, #4]
   15dd8:	ldr	r2, [sp, #36]	; 0x24
   15ddc:	mov	r1, #0
   15de0:	sub	r2, r2, r0
   15de4:	add	r0, r5, r0, lsl #3
   15de8:	lsl	r2, r2, #3
   15dec:	bl	10dd8 <memset@plt>
   15df0:	ldr	r3, [sp, #36]	; 0x24
   15df4:	str	r3, [r4, #4]
   15df8:	ldr	r7, [r4, #20]
   15dfc:	ldr	r9, [r5]
   15e00:	ldr	r6, [r5, #4]
   15e04:	ldr	r2, [r4, #56]	; 0x38
   15e08:	ldr	r3, [r4, #16]
   15e0c:	ldr	ip, [r4, #60]	; 0x3c
   15e10:	ldr	fp, [pc, #208]	; 15ee8 <__assert_fail@plt+0x505c>
   15e14:	orr	r7, r7, #1
   15e18:	str	r2, [sp, #12]
   15e1c:	str	r3, [sp]
   15e20:	str	r7, [sp, #4]
   15e24:	mov	r1, r9
   15e28:	mov	r0, r6
   15e2c:	str	ip, [sp, #16]
   15e30:	str	fp, [sp, #8]
   15e34:	mvn	r3, #0
   15e38:	mov	r2, sl
   15e3c:	bl	12078 <__assert_fail@plt+0x11ec>
   15e40:	cmp	r9, r0
   15e44:	bhi	15ea0 <__assert_fail@plt+0x5014>
   15e48:	ldr	r3, [pc, #156]	; 15eec <__assert_fail@plt+0x5060>
   15e4c:	add	r9, r0, #1
   15e50:	cmp	r6, r3
   15e54:	str	r9, [r5]
   15e58:	beq	15e64 <__assert_fail@plt+0x4fd8>
   15e5c:	mov	r0, r6
   15e60:	bl	18028 <__assert_fail@plt+0x719c>
   15e64:	mov	r0, r9
   15e68:	bl	16954 <__assert_fail@plt+0x5ac8>
   15e6c:	ldr	ip, [r4, #60]	; 0x3c
   15e70:	ldr	r3, [r4, #16]
   15e74:	ldr	lr, [r4, #56]	; 0x38
   15e78:	mov	r2, sl
   15e7c:	mov	r1, r9
   15e80:	str	r0, [r5, #4]
   15e84:	str	r3, [sp]
   15e88:	stmib	sp, {r7, fp}
   15e8c:	str	ip, [sp, #16]
   15e90:	str	lr, [sp, #12]
   15e94:	mvn	r3, #0
   15e98:	mov	r6, r0
   15e9c:	bl	12078 <__assert_fail@plt+0x11ec>
   15ea0:	ldr	r3, [sp, #28]
   15ea4:	mov	r0, r6
   15ea8:	str	r3, [r8]
   15eac:	add	sp, sp, #44	; 0x2c
   15eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb4:	mov	r3, #8
   15eb8:	str	r3, [sp]
   15ebc:	add	r1, sp, #36	; 0x24
   15ec0:	rsb	r2, r2, #1
   15ec4:	mvn	r3, #-2147483648	; 0x80000000
   15ec8:	mov	r0, #0
   15ecc:	bl	16b70 <__assert_fail@plt+0x5ce4>
   15ed0:	mov	r5, r0
   15ed4:	ldm	r6, {r0, r1}
   15ed8:	str	r5, [r4]
   15edc:	stm	r5, {r0, r1}
   15ee0:	b	15dd4 <__assert_fail@plt+0x4f48>
   15ee4:	andeq	sl, r2, ip, ror #1
   15ee8:	andeq	sl, r2, r4, lsl #2
   15eec:	muleq	r2, r4, r1
   15ef0:	push	{r4, r5, r6, lr}
   15ef4:	sub	sp, sp, #32
   15ef8:	cmp	r1, #0
   15efc:	mov	r4, r0
   15f00:	ldr	r5, [sp, #48]	; 0x30
   15f04:	ldr	r6, [sp, #52]	; 0x34
   15f08:	beq	16220 <__assert_fail@plt+0x5394>
   15f0c:	stm	sp, {r2, r3}
   15f10:	mov	r3, r1
   15f14:	ldr	r2, [pc, #808]	; 16244 <__assert_fail@plt+0x53b8>
   15f18:	mov	r1, #1
   15f1c:	bl	10dfc <__fprintf_chk@plt>
   15f20:	mov	r2, #5
   15f24:	ldr	r1, [pc, #796]	; 16248 <__assert_fail@plt+0x53bc>
   15f28:	mov	r0, #0
   15f2c:	bl	10cc4 <dcgettext@plt>
   15f30:	ldr	r3, [pc, #788]	; 1624c <__assert_fail@plt+0x53c0>
   15f34:	ldr	r2, [pc, #788]	; 16250 <__assert_fail@plt+0x53c4>
   15f38:	str	r3, [sp]
   15f3c:	mov	r1, #1
   15f40:	mov	r3, r0
   15f44:	mov	r0, r4
   15f48:	bl	10dfc <__fprintf_chk@plt>
   15f4c:	mov	r1, r4
   15f50:	mov	r0, #10
   15f54:	bl	10cb8 <fputc_unlocked@plt>
   15f58:	mov	r2, #5
   15f5c:	ldr	r1, [pc, #752]	; 16254 <__assert_fail@plt+0x53c8>
   15f60:	mov	r0, #0
   15f64:	bl	10cc4 <dcgettext@plt>
   15f68:	mov	r1, #1
   15f6c:	ldr	r3, [pc, #740]	; 16258 <__assert_fail@plt+0x53cc>
   15f70:	mov	r2, r0
   15f74:	mov	r0, r4
   15f78:	bl	10dfc <__fprintf_chk@plt>
   15f7c:	mov	r1, r4
   15f80:	mov	r0, #10
   15f84:	bl	10cb8 <fputc_unlocked@plt>
   15f88:	cmp	r6, #9
   15f8c:	ldrls	pc, [pc, r6, lsl #2]
   15f90:	b	16238 <__assert_fail@plt+0x53ac>
   15f94:	andeq	r6, r1, r8, lsl r0
   15f98:	andeq	r6, r1, r0, lsr #32
   15f9c:	andeq	r6, r1, ip, asr #32
   15fa0:	andeq	r6, r1, r0, lsl #1
   15fa4:	strheq	r6, [r1], -ip
   15fa8:	strdeq	r6, [r1], -r8
   15fac:	andeq	r6, r1, r4, lsr r1
   15fb0:	andeq	r6, r1, r8, ror r1
   15fb4:	andeq	r6, r1, r8, asr #3
   15fb8:			; <UNDEFINED> instruction: 0x00015fbc
   15fbc:	ldr	r1, [pc, #664]	; 1625c <__assert_fail@plt+0x53d0>
   15fc0:	mov	r2, #5
   15fc4:	mov	r0, #0
   15fc8:	bl	10cc4 <dcgettext@plt>
   15fcc:	ldr	ip, [r5, #32]
   15fd0:	ldr	r1, [r5, #28]
   15fd4:	ldr	r2, [r5, #24]
   15fd8:	ldr	r3, [r5]
   15fdc:	ldr	r6, [r5, #20]
   15fe0:	str	ip, [sp, #28]
   15fe4:	ldr	lr, [r5, #16]
   15fe8:	str	r1, [sp, #24]
   15fec:	ldr	ip, [r5, #12]
   15ff0:	str	r2, [sp, #20]
   15ff4:	ldr	r1, [r5, #8]
   15ff8:	ldr	r2, [r5, #4]
   15ffc:	str	r6, [sp, #16]
   16000:	stmib	sp, {r1, ip, lr}
   16004:	mov	r1, #1
   16008:	str	r2, [sp]
   1600c:	mov	r2, r0
   16010:	mov	r0, r4
   16014:	bl	10dfc <__fprintf_chk@plt>
   16018:	add	sp, sp, #32
   1601c:	pop	{r4, r5, r6, pc}
   16020:	mov	r2, #5
   16024:	ldr	r1, [pc, #564]	; 16260 <__assert_fail@plt+0x53d4>
   16028:	mov	r0, #0
   1602c:	bl	10cc4 <dcgettext@plt>
   16030:	ldr	r3, [r5]
   16034:	mov	r1, #1
   16038:	mov	r2, r0
   1603c:	mov	r0, r4
   16040:	add	sp, sp, #32
   16044:	pop	{r4, r5, r6, lr}
   16048:	b	10dfc <__fprintf_chk@plt>
   1604c:	mov	r2, #5
   16050:	ldr	r1, [pc, #524]	; 16264 <__assert_fail@plt+0x53d8>
   16054:	mov	r0, #0
   16058:	bl	10cc4 <dcgettext@plt>
   1605c:	ldr	r2, [r5, #4]
   16060:	ldr	r3, [r5]
   16064:	mov	r1, #1
   16068:	str	r2, [sp, #48]	; 0x30
   1606c:	mov	r2, r0
   16070:	mov	r0, r4
   16074:	add	sp, sp, #32
   16078:	pop	{r4, r5, r6, lr}
   1607c:	b	10dfc <__fprintf_chk@plt>
   16080:	mov	r2, #5
   16084:	ldr	r1, [pc, #476]	; 16268 <__assert_fail@plt+0x53dc>
   16088:	mov	r0, #0
   1608c:	bl	10cc4 <dcgettext@plt>
   16090:	ldr	r1, [r5, #8]
   16094:	ldr	r2, [r5, #4]
   16098:	ldr	r3, [r5]
   1609c:	str	r1, [sp, #52]	; 0x34
   160a0:	str	r2, [sp, #48]	; 0x30
   160a4:	mov	r1, #1
   160a8:	mov	r2, r0
   160ac:	mov	r0, r4
   160b0:	add	sp, sp, #32
   160b4:	pop	{r4, r5, r6, lr}
   160b8:	b	10dfc <__fprintf_chk@plt>
   160bc:	mov	r2, #5
   160c0:	ldr	r1, [pc, #420]	; 1626c <__assert_fail@plt+0x53e0>
   160c4:	mov	r0, #0
   160c8:	bl	10cc4 <dcgettext@plt>
   160cc:	ldr	r1, [r5, #8]
   160d0:	ldr	ip, [r5, #12]
   160d4:	ldr	r2, [r5, #4]
   160d8:	ldr	r3, [r5]
   160dc:	stmib	sp, {r1, ip}
   160e0:	str	r2, [sp]
   160e4:	mov	r1, #1
   160e8:	mov	r2, r0
   160ec:	mov	r0, r4
   160f0:	bl	10dfc <__fprintf_chk@plt>
   160f4:	b	16018 <__assert_fail@plt+0x518c>
   160f8:	mov	r2, #5
   160fc:	ldr	r1, [pc, #364]	; 16270 <__assert_fail@plt+0x53e4>
   16100:	mov	r0, #0
   16104:	bl	10cc4 <dcgettext@plt>
   16108:	add	r1, r5, #8
   1610c:	ldr	r2, [r5, #4]
   16110:	ldm	r1, {r1, ip, lr}
   16114:	ldr	r3, [r5]
   16118:	str	r2, [sp]
   1611c:	stmib	sp, {r1, ip, lr}
   16120:	mov	r1, #1
   16124:	mov	r2, r0
   16128:	mov	r0, r4
   1612c:	bl	10dfc <__fprintf_chk@plt>
   16130:	b	16018 <__assert_fail@plt+0x518c>
   16134:	mov	r2, #5
   16138:	ldr	r1, [pc, #308]	; 16274 <__assert_fail@plt+0x53e8>
   1613c:	mov	r0, #0
   16140:	bl	10cc4 <dcgettext@plt>
   16144:	add	r1, r5, #8
   16148:	ldr	r2, [r5, #4]
   1614c:	ldm	r1, {r1, ip, lr}
   16150:	ldr	r6, [r5, #20]
   16154:	ldr	r3, [r5]
   16158:	stmib	sp, {r1, ip, lr}
   1615c:	mov	r1, #1
   16160:	str	r2, [sp]
   16164:	str	r6, [sp, #16]
   16168:	mov	r2, r0
   1616c:	mov	r0, r4
   16170:	bl	10dfc <__fprintf_chk@plt>
   16174:	b	16018 <__assert_fail@plt+0x518c>
   16178:	mov	r2, #5
   1617c:	ldr	r1, [pc, #244]	; 16278 <__assert_fail@plt+0x53ec>
   16180:	mov	r0, #0
   16184:	bl	10cc4 <dcgettext@plt>
   16188:	ldr	r2, [r5, #24]
   1618c:	ldr	r3, [r5]
   16190:	ldr	r6, [r5, #20]
   16194:	ldr	lr, [r5, #16]
   16198:	ldr	ip, [r5, #12]
   1619c:	str	r2, [sp, #20]
   161a0:	ldr	r1, [r5, #8]
   161a4:	ldr	r2, [r5, #4]
   161a8:	str	r6, [sp, #16]
   161ac:	stmib	sp, {r1, ip, lr}
   161b0:	mov	r1, #1
   161b4:	str	r2, [sp]
   161b8:	mov	r2, r0
   161bc:	mov	r0, r4
   161c0:	bl	10dfc <__fprintf_chk@plt>
   161c4:	b	16018 <__assert_fail@plt+0x518c>
   161c8:	mov	r2, #5
   161cc:	ldr	r1, [pc, #168]	; 1627c <__assert_fail@plt+0x53f0>
   161d0:	mov	r0, #0
   161d4:	bl	10cc4 <dcgettext@plt>
   161d8:	ldr	r1, [r5, #28]
   161dc:	ldr	r2, [r5, #24]
   161e0:	ldr	r3, [r5]
   161e4:	ldr	r6, [r5, #20]
   161e8:	ldr	lr, [r5, #16]
   161ec:	str	r1, [sp, #24]
   161f0:	ldr	ip, [r5, #12]
   161f4:	str	r2, [sp, #20]
   161f8:	ldr	r1, [r5, #8]
   161fc:	ldr	r2, [r5, #4]
   16200:	str	r6, [sp, #16]
   16204:	stmib	sp, {r1, ip, lr}
   16208:	mov	r1, #1
   1620c:	str	r2, [sp]
   16210:	mov	r2, r0
   16214:	mov	r0, r4
   16218:	bl	10dfc <__fprintf_chk@plt>
   1621c:	b	16018 <__assert_fail@plt+0x518c>
   16220:	str	r3, [sp]
   16224:	mov	r1, #1
   16228:	mov	r3, r2
   1622c:	ldr	r2, [pc, #76]	; 16280 <__assert_fail@plt+0x53f4>
   16230:	bl	10dfc <__fprintf_chk@plt>
   16234:	b	15f20 <__assert_fail@plt+0x5094>
   16238:	mov	r2, #5
   1623c:	ldr	r1, [pc, #64]	; 16284 <__assert_fail@plt+0x53f8>
   16240:	b	15fc4 <__assert_fail@plt+0x5138>
   16244:	andeq	r9, r1, r4, lsr #8
   16248:	andeq	r9, r1, r8, lsr r4
   1624c:	andeq	r0, r0, r6, ror #15
   16250:	andeq	r9, r1, r0, lsl r7
   16254:	andeq	r9, r1, ip, lsr r4
   16258:	andeq	r9, r1, r8, ror #9
   1625c:	andeq	r9, r1, r8, lsl r6
   16260:	andeq	r9, r1, ip, lsl #10
   16264:	andeq	r9, r1, ip, lsl r5
   16268:	andeq	r9, r1, r4, lsr r5
   1626c:	andeq	r9, r1, r0, asr r5
   16270:	andeq	r9, r1, r0, ror r5
   16274:	muleq	r1, r4, r5
   16278:			; <UNDEFINED> instruction: 0x000195bc
   1627c:	andeq	r9, r1, r8, ror #11
   16280:	andeq	r9, r1, r0, lsr r4
   16284:	andeq	r9, r1, ip, asr #12
   16288:	push	{r4, r5, lr}
   1628c:	sub	sp, sp, #12
   16290:	ldr	r5, [sp, #24]
   16294:	ldr	ip, [r5]
   16298:	cmp	ip, #0
   1629c:	beq	162b8 <__assert_fail@plt+0x542c>
   162a0:	mov	lr, r5
   162a4:	mov	ip, #0
   162a8:	ldr	r4, [lr, #4]!
   162ac:	add	ip, ip, #1
   162b0:	cmp	r4, #0
   162b4:	bne	162a8 <__assert_fail@plt+0x541c>
   162b8:	stm	sp, {r5, ip}
   162bc:	bl	15ef0 <__assert_fail@plt+0x5064>
   162c0:	add	sp, sp, #12
   162c4:	pop	{r4, r5, pc}
   162c8:	push	{r4, r5, lr}
   162cc:	sub	sp, sp, #76	; 0x4c
   162d0:	mov	r5, r0
   162d4:	ldr	ip, [sp, #88]	; 0x58
   162d8:	ldr	r0, [ip]
   162dc:	cmp	r0, #0
   162e0:	str	r0, [sp, #32]
   162e4:	beq	166b8 <__assert_fail@plt+0x582c>
   162e8:	ldr	r0, [ip, #4]
   162ec:	cmp	r0, #0
   162f0:	str	r0, [sp, #36]	; 0x24
   162f4:	beq	166c0 <__assert_fail@plt+0x5834>
   162f8:	ldr	r0, [ip, #8]
   162fc:	cmp	r0, #0
   16300:	str	r0, [sp, #40]	; 0x28
   16304:	beq	166c8 <__assert_fail@plt+0x583c>
   16308:	ldr	r0, [ip, #12]
   1630c:	cmp	r0, #0
   16310:	str	r0, [sp, #44]	; 0x2c
   16314:	beq	166d0 <__assert_fail@plt+0x5844>
   16318:	ldr	r0, [ip, #16]
   1631c:	cmp	r0, #0
   16320:	str	r0, [sp, #48]	; 0x30
   16324:	beq	166d8 <__assert_fail@plt+0x584c>
   16328:	ldr	r0, [ip, #20]
   1632c:	cmp	r0, #0
   16330:	str	r0, [sp, #52]	; 0x34
   16334:	beq	166e0 <__assert_fail@plt+0x5854>
   16338:	ldr	r0, [ip, #24]
   1633c:	cmp	r0, #0
   16340:	str	r0, [sp, #56]	; 0x38
   16344:	beq	166e8 <__assert_fail@plt+0x585c>
   16348:	ldr	r0, [ip, #28]
   1634c:	cmp	r0, #0
   16350:	str	r0, [sp, #60]	; 0x3c
   16354:	beq	166f0 <__assert_fail@plt+0x5864>
   16358:	ldr	r0, [ip, #32]
   1635c:	cmp	r0, #0
   16360:	str	r0, [sp, #64]	; 0x40
   16364:	beq	166f8 <__assert_fail@plt+0x586c>
   16368:	ldr	r0, [ip, #36]	; 0x24
   1636c:	cmp	r0, #0
   16370:	movne	r4, #10
   16374:	moveq	r4, #9
   16378:	cmp	r1, #0
   1637c:	beq	16690 <__assert_fail@plt+0x5804>
   16380:	stm	sp, {r2, r3}
   16384:	mov	r0, r5
   16388:	mov	r3, r1
   1638c:	ldr	r2, [pc, #876]	; 16700 <__assert_fail@plt+0x5874>
   16390:	mov	r1, #1
   16394:	bl	10dfc <__fprintf_chk@plt>
   16398:	mov	r2, #5
   1639c:	ldr	r1, [pc, #864]	; 16704 <__assert_fail@plt+0x5878>
   163a0:	mov	r0, #0
   163a4:	bl	10cc4 <dcgettext@plt>
   163a8:	ldr	r3, [pc, #856]	; 16708 <__assert_fail@plt+0x587c>
   163ac:	ldr	r2, [pc, #856]	; 1670c <__assert_fail@plt+0x5880>
   163b0:	str	r3, [sp]
   163b4:	mov	r1, #1
   163b8:	mov	r3, r0
   163bc:	mov	r0, r5
   163c0:	bl	10dfc <__fprintf_chk@plt>
   163c4:	mov	r1, r5
   163c8:	mov	r0, #10
   163cc:	bl	10cb8 <fputc_unlocked@plt>
   163d0:	mov	r2, #5
   163d4:	ldr	r1, [pc, #820]	; 16710 <__assert_fail@plt+0x5884>
   163d8:	mov	r0, #0
   163dc:	bl	10cc4 <dcgettext@plt>
   163e0:	mov	r1, #1
   163e4:	ldr	r3, [pc, #808]	; 16714 <__assert_fail@plt+0x5888>
   163e8:	mov	r2, r0
   163ec:	mov	r0, r5
   163f0:	bl	10dfc <__fprintf_chk@plt>
   163f4:	mov	r1, r5
   163f8:	mov	r0, #10
   163fc:	bl	10cb8 <fputc_unlocked@plt>
   16400:	cmp	r4, #9
   16404:	ldrls	pc, [pc, r4, lsl #2]
   16408:	b	166ac <__assert_fail@plt+0x5820>
   1640c:	muleq	r1, r0, r4
   16410:	muleq	r1, r8, r4
   16414:	andeq	r6, r1, r4, asr #9
   16418:	strdeq	r6, [r1], -r8
   1641c:	andeq	r6, r1, r0, lsr r5
   16420:	andeq	r6, r1, ip, ror #10
   16424:	andeq	r6, r1, r8, lsr #11
   16428:	andeq	r6, r1, ip, ror #11
   1642c:	andeq	r6, r1, r8, lsr r6
   16430:	andeq	r6, r1, r4, lsr r4
   16434:	ldr	r1, [pc, #732]	; 16718 <__assert_fail@plt+0x588c>
   16438:	mov	r2, #5
   1643c:	mov	r0, #0
   16440:	bl	10cc4 <dcgettext@plt>
   16444:	ldr	ip, [sp, #64]	; 0x40
   16448:	ldr	r1, [sp, #60]	; 0x3c
   1644c:	ldr	r2, [sp, #56]	; 0x38
   16450:	ldr	lr, [sp, #48]	; 0x30
   16454:	str	ip, [sp, #28]
   16458:	str	r1, [sp, #24]
   1645c:	ldr	ip, [sp, #44]	; 0x2c
   16460:	ldr	r1, [sp, #40]	; 0x28
   16464:	ldr	r4, [sp, #52]	; 0x34
   16468:	str	r2, [sp, #20]
   1646c:	ldr	r2, [sp, #36]	; 0x24
   16470:	stmib	sp, {r1, ip, lr}
   16474:	mov	r1, #1
   16478:	str	r2, [sp]
   1647c:	ldr	r3, [sp, #32]
   16480:	str	r4, [sp, #16]
   16484:	mov	r2, r0
   16488:	mov	r0, r5
   1648c:	bl	10dfc <__fprintf_chk@plt>
   16490:	add	sp, sp, #76	; 0x4c
   16494:	pop	{r4, r5, pc}
   16498:	mov	r2, #5
   1649c:	ldr	r1, [pc, #632]	; 1671c <__assert_fail@plt+0x5890>
   164a0:	mov	r0, #0
   164a4:	bl	10cc4 <dcgettext@plt>
   164a8:	ldr	r3, [sp, #32]
   164ac:	mov	r1, #1
   164b0:	mov	r2, r0
   164b4:	mov	r0, r5
   164b8:	add	sp, sp, #76	; 0x4c
   164bc:	pop	{r4, r5, lr}
   164c0:	b	10dfc <__fprintf_chk@plt>
   164c4:	mov	r2, #5
   164c8:	ldr	r1, [pc, #592]	; 16720 <__assert_fail@plt+0x5894>
   164cc:	mov	r0, #0
   164d0:	bl	10cc4 <dcgettext@plt>
   164d4:	ldr	r2, [sp, #36]	; 0x24
   164d8:	ldr	r3, [sp, #32]
   164dc:	str	r2, [sp, #88]	; 0x58
   164e0:	mov	r1, #1
   164e4:	mov	r2, r0
   164e8:	mov	r0, r5
   164ec:	add	sp, sp, #76	; 0x4c
   164f0:	pop	{r4, r5, lr}
   164f4:	b	10dfc <__fprintf_chk@plt>
   164f8:	mov	r2, #5
   164fc:	ldr	r1, [pc, #544]	; 16724 <__assert_fail@plt+0x5898>
   16500:	mov	r0, #0
   16504:	bl	10cc4 <dcgettext@plt>
   16508:	ldr	r1, [sp, #40]	; 0x28
   1650c:	ldr	r2, [sp, #36]	; 0x24
   16510:	str	r1, [sp, #4]
   16514:	str	r2, [sp]
   16518:	ldr	r3, [sp, #32]
   1651c:	mov	r1, #1
   16520:	mov	r2, r0
   16524:	mov	r0, r5
   16528:	bl	10dfc <__fprintf_chk@plt>
   1652c:	b	16490 <__assert_fail@plt+0x5604>
   16530:	mov	r2, #5
   16534:	ldr	r1, [pc, #492]	; 16728 <__assert_fail@plt+0x589c>
   16538:	mov	r0, #0
   1653c:	bl	10cc4 <dcgettext@plt>
   16540:	ldr	r1, [sp, #40]	; 0x28
   16544:	ldr	ip, [sp, #44]	; 0x2c
   16548:	ldr	r2, [sp, #36]	; 0x24
   1654c:	ldr	r3, [sp, #32]
   16550:	stmib	sp, {r1, ip}
   16554:	str	r2, [sp]
   16558:	mov	r1, #1
   1655c:	mov	r2, r0
   16560:	mov	r0, r5
   16564:	bl	10dfc <__fprintf_chk@plt>
   16568:	b	16490 <__assert_fail@plt+0x5604>
   1656c:	mov	r2, #5
   16570:	ldr	r1, [pc, #436]	; 1672c <__assert_fail@plt+0x58a0>
   16574:	mov	r0, #0
   16578:	bl	10cc4 <dcgettext@plt>
   1657c:	add	r1, sp, #40	; 0x28
   16580:	ldr	r2, [sp, #36]	; 0x24
   16584:	ldm	r1, {r1, ip, lr}
   16588:	ldr	r3, [sp, #32]
   1658c:	str	r2, [sp]
   16590:	stmib	sp, {r1, ip, lr}
   16594:	mov	r1, #1
   16598:	mov	r2, r0
   1659c:	mov	r0, r5
   165a0:	bl	10dfc <__fprintf_chk@plt>
   165a4:	b	16490 <__assert_fail@plt+0x5604>
   165a8:	mov	r2, #5
   165ac:	ldr	r1, [pc, #380]	; 16730 <__assert_fail@plt+0x58a4>
   165b0:	mov	r0, #0
   165b4:	bl	10cc4 <dcgettext@plt>
   165b8:	add	r1, sp, #40	; 0x28
   165bc:	ldr	r2, [sp, #36]	; 0x24
   165c0:	ldm	r1, {r1, ip, lr}
   165c4:	ldr	r4, [sp, #52]	; 0x34
   165c8:	str	r2, [sp]
   165cc:	stmib	sp, {r1, ip, lr}
   165d0:	mov	r1, #1
   165d4:	ldr	r3, [sp, #32]
   165d8:	str	r4, [sp, #16]
   165dc:	mov	r2, r0
   165e0:	mov	r0, r5
   165e4:	bl	10dfc <__fprintf_chk@plt>
   165e8:	b	16490 <__assert_fail@plt+0x5604>
   165ec:	mov	r2, #5
   165f0:	ldr	r1, [pc, #316]	; 16734 <__assert_fail@plt+0x58a8>
   165f4:	mov	r0, #0
   165f8:	bl	10cc4 <dcgettext@plt>
   165fc:	add	r1, sp, #40	; 0x28
   16600:	ldr	r2, [sp, #56]	; 0x38
   16604:	ldm	r1, {r1, ip, lr}
   16608:	ldr	r4, [sp, #52]	; 0x34
   1660c:	str	r2, [sp, #20]
   16610:	ldr	r2, [sp, #36]	; 0x24
   16614:	stmib	sp, {r1, ip, lr}
   16618:	mov	r1, #1
   1661c:	str	r2, [sp]
   16620:	ldr	r3, [sp, #32]
   16624:	str	r4, [sp, #16]
   16628:	mov	r2, r0
   1662c:	mov	r0, r5
   16630:	bl	10dfc <__fprintf_chk@plt>
   16634:	b	16490 <__assert_fail@plt+0x5604>
   16638:	mov	r2, #5
   1663c:	ldr	r1, [pc, #244]	; 16738 <__assert_fail@plt+0x58ac>
   16640:	mov	r0, #0
   16644:	bl	10cc4 <dcgettext@plt>
   16648:	ldr	r1, [sp, #60]	; 0x3c
   1664c:	ldr	r2, [sp, #56]	; 0x38
   16650:	ldr	lr, [sp, #48]	; 0x30
   16654:	ldr	ip, [sp, #44]	; 0x2c
   16658:	str	r1, [sp, #24]
   1665c:	ldr	r1, [sp, #40]	; 0x28
   16660:	ldr	r4, [sp, #52]	; 0x34
   16664:	str	r2, [sp, #20]
   16668:	ldr	r2, [sp, #36]	; 0x24
   1666c:	stmib	sp, {r1, ip, lr}
   16670:	mov	r1, #1
   16674:	str	r2, [sp]
   16678:	ldr	r3, [sp, #32]
   1667c:	str	r4, [sp, #16]
   16680:	mov	r2, r0
   16684:	mov	r0, r5
   16688:	bl	10dfc <__fprintf_chk@plt>
   1668c:	b	16490 <__assert_fail@plt+0x5604>
   16690:	str	r3, [sp]
   16694:	mov	r1, #1
   16698:	mov	r3, r2
   1669c:	mov	r0, r5
   166a0:	ldr	r2, [pc, #148]	; 1673c <__assert_fail@plt+0x58b0>
   166a4:	bl	10dfc <__fprintf_chk@plt>
   166a8:	b	16398 <__assert_fail@plt+0x550c>
   166ac:	mov	r2, #5
   166b0:	ldr	r1, [pc, #136]	; 16740 <__assert_fail@plt+0x58b4>
   166b4:	b	1643c <__assert_fail@plt+0x55b0>
   166b8:	mov	r4, r0
   166bc:	b	16378 <__assert_fail@plt+0x54ec>
   166c0:	mov	r4, #1
   166c4:	b	16378 <__assert_fail@plt+0x54ec>
   166c8:	mov	r4, #2
   166cc:	b	16378 <__assert_fail@plt+0x54ec>
   166d0:	mov	r4, #3
   166d4:	b	16378 <__assert_fail@plt+0x54ec>
   166d8:	mov	r4, #4
   166dc:	b	16378 <__assert_fail@plt+0x54ec>
   166e0:	mov	r4, #5
   166e4:	b	16378 <__assert_fail@plt+0x54ec>
   166e8:	mov	r4, #6
   166ec:	b	16378 <__assert_fail@plt+0x54ec>
   166f0:	mov	r4, #7
   166f4:	b	16378 <__assert_fail@plt+0x54ec>
   166f8:	mov	r4, #8
   166fc:	b	16378 <__assert_fail@plt+0x54ec>
   16700:	andeq	r9, r1, r4, lsr #8
   16704:	andeq	r9, r1, r8, lsr r4
   16708:	andeq	r0, r0, r6, ror #15
   1670c:	andeq	r9, r1, r0, lsl r7
   16710:	andeq	r9, r1, ip, lsr r4
   16714:	andeq	r9, r1, r8, ror #9
   16718:	andeq	r9, r1, r8, lsl r6
   1671c:	andeq	r9, r1, ip, lsl #10
   16720:	andeq	r9, r1, ip, lsl r5
   16724:	andeq	r9, r1, r4, lsr r5
   16728:	andeq	r9, r1, r0, asr r5
   1672c:	andeq	r9, r1, r0, ror r5
   16730:	muleq	r1, r4, r5
   16734:			; <UNDEFINED> instruction: 0x000195bc
   16738:	andeq	r9, r1, r8, ror #11
   1673c:	andeq	r9, r1, r0, lsr r4
   16740:	andeq	r9, r1, ip, asr #12
   16744:	push	{r3}		; (str r3, [sp, #-4]!)
   16748:	push	{lr}		; (str lr, [sp, #-4]!)
   1674c:	sub	sp, sp, #56	; 0x38
   16750:	add	r3, sp, #64	; 0x40
   16754:	ldr	ip, [sp, #64]	; 0x40
   16758:	str	r3, [sp, #12]
   1675c:	cmp	ip, #0
   16760:	str	ip, [sp, #16]
   16764:	beq	167fc <__assert_fail@plt+0x5970>
   16768:	ldr	ip, [sp, #68]	; 0x44
   1676c:	cmp	ip, #0
   16770:	str	ip, [sp, #20]
   16774:	beq	1681c <__assert_fail@plt+0x5990>
   16778:	ldr	ip, [sp, #72]	; 0x48
   1677c:	cmp	ip, #0
   16780:	str	ip, [sp, #24]
   16784:	beq	16824 <__assert_fail@plt+0x5998>
   16788:	ldr	ip, [sp, #76]	; 0x4c
   1678c:	cmp	ip, #0
   16790:	str	ip, [sp, #28]
   16794:	beq	1682c <__assert_fail@plt+0x59a0>
   16798:	ldr	ip, [sp, #80]	; 0x50
   1679c:	cmp	ip, #0
   167a0:	str	ip, [sp, #32]
   167a4:	beq	16834 <__assert_fail@plt+0x59a8>
   167a8:	ldr	ip, [sp, #84]	; 0x54
   167ac:	cmp	ip, #0
   167b0:	str	ip, [sp, #36]	; 0x24
   167b4:	beq	1683c <__assert_fail@plt+0x59b0>
   167b8:	ldr	ip, [sp, #88]	; 0x58
   167bc:	cmp	ip, #0
   167c0:	str	ip, [sp, #40]	; 0x28
   167c4:	beq	16844 <__assert_fail@plt+0x59b8>
   167c8:	ldr	ip, [sp, #92]	; 0x5c
   167cc:	cmp	ip, #0
   167d0:	str	ip, [sp, #44]	; 0x2c
   167d4:	beq	1684c <__assert_fail@plt+0x59c0>
   167d8:	ldr	ip, [sp, #96]	; 0x60
   167dc:	cmp	ip, #0
   167e0:	str	ip, [sp, #48]	; 0x30
   167e4:	beq	16854 <__assert_fail@plt+0x59c8>
   167e8:	ldr	ip, [sp, #100]	; 0x64
   167ec:	cmp	ip, #0
   167f0:	str	ip, [sp, #52]	; 0x34
   167f4:	movne	ip, #10
   167f8:	moveq	ip, #9
   167fc:	add	r3, sp, #16
   16800:	stm	sp, {r3, ip}
   16804:	ldr	r3, [sp, #60]	; 0x3c
   16808:	bl	15ef0 <__assert_fail@plt+0x5064>
   1680c:	add	sp, sp, #56	; 0x38
   16810:	pop	{lr}		; (ldr lr, [sp], #4)
   16814:	add	sp, sp, #4
   16818:	bx	lr
   1681c:	mov	ip, #1
   16820:	b	167fc <__assert_fail@plt+0x5970>
   16824:	mov	ip, #2
   16828:	b	167fc <__assert_fail@plt+0x5970>
   1682c:	mov	ip, #3
   16830:	b	167fc <__assert_fail@plt+0x5970>
   16834:	mov	ip, #4
   16838:	b	167fc <__assert_fail@plt+0x5970>
   1683c:	mov	ip, #5
   16840:	b	167fc <__assert_fail@plt+0x5970>
   16844:	mov	ip, #6
   16848:	b	167fc <__assert_fail@plt+0x5970>
   1684c:	mov	ip, #7
   16850:	b	167fc <__assert_fail@plt+0x5970>
   16854:	mov	ip, #8
   16858:	b	167fc <__assert_fail@plt+0x5970>
   1685c:	ldr	r3, [pc, #116]	; 168d8 <__assert_fail@plt+0x5a4c>
   16860:	push	{r4, lr}
   16864:	mov	r0, #10
   16868:	ldr	r1, [r3]
   1686c:	bl	10cb8 <fputc_unlocked@plt>
   16870:	mov	r2, #5
   16874:	ldr	r1, [pc, #96]	; 168dc <__assert_fail@plt+0x5a50>
   16878:	mov	r0, #0
   1687c:	bl	10cc4 <dcgettext@plt>
   16880:	ldr	r2, [pc, #88]	; 168e0 <__assert_fail@plt+0x5a54>
   16884:	mov	r1, r0
   16888:	mov	r0, #1
   1688c:	bl	10de4 <__printf_chk@plt>
   16890:	mov	r2, #5
   16894:	ldr	r1, [pc, #72]	; 168e4 <__assert_fail@plt+0x5a58>
   16898:	mov	r0, #0
   1689c:	bl	10cc4 <dcgettext@plt>
   168a0:	ldr	r3, [pc, #64]	; 168e8 <__assert_fail@plt+0x5a5c>
   168a4:	ldr	r2, [pc, #64]	; 168ec <__assert_fail@plt+0x5a60>
   168a8:	mov	r1, r0
   168ac:	mov	r0, #1
   168b0:	bl	10de4 <__printf_chk@plt>
   168b4:	mov	r2, #5
   168b8:	ldr	r1, [pc, #48]	; 168f0 <__assert_fail@plt+0x5a64>
   168bc:	mov	r0, #0
   168c0:	bl	10cc4 <dcgettext@plt>
   168c4:	ldr	r2, [pc, #40]	; 168f4 <__assert_fail@plt+0x5a68>
   168c8:	pop	{r4, lr}
   168cc:	mov	r1, r0
   168d0:	mov	r0, #1
   168d4:	b	10de4 <__printf_chk@plt>
   168d8:	andeq	sl, r2, r4, asr #2
   168dc:	andeq	r9, r1, r8, lsl #13
   168e0:	muleq	r1, ip, r6
   168e4:			; <UNDEFINED> instruction: 0x000196b4
   168e8:	andeq	r8, r1, ip, lsr #30
   168ec:	andeq	r8, r1, r4, asr pc
   168f0:	andeq	r9, r1, r8, asr #13
   168f4:	strdeq	r9, [r1], -r0
   168f8:	push	{r4, r5, r6, lr}
   168fc:	mov	r6, r0
   16900:	mov	r5, r1
   16904:	mov	r4, r2
   16908:	bl	181a8 <__assert_fail@plt+0x731c>
   1690c:	cmp	r0, #0
   16910:	popne	{r4, r5, r6, pc}
   16914:	cmp	r6, #0
   16918:	beq	16928 <__assert_fail@plt+0x5a9c>
   1691c:	cmp	r5, #0
   16920:	cmpne	r4, #0
   16924:	popeq	{r4, r5, r6, pc}
   16928:	bl	16f74 <__assert_fail@plt+0x60e8>
   1692c:	push	{r4, lr}
   16930:	bl	17e24 <__assert_fail@plt+0x6f98>
   16934:	cmp	r0, #0
   16938:	popne	{r4, pc}
   1693c:	bl	16f74 <__assert_fail@plt+0x60e8>
   16940:	push	{r4, lr}
   16944:	bl	17e24 <__assert_fail@plt+0x6f98>
   16948:	cmp	r0, #0
   1694c:	popne	{r4, pc}
   16950:	bl	16f74 <__assert_fail@plt+0x60e8>
   16954:	push	{r4, lr}
   16958:	bl	17e24 <__assert_fail@plt+0x6f98>
   1695c:	cmp	r0, #0
   16960:	popne	{r4, pc}
   16964:	bl	16f74 <__assert_fail@plt+0x60e8>
   16968:	push	{r4, r5, r6, lr}
   1696c:	mov	r5, r0
   16970:	mov	r4, r1
   16974:	bl	17e50 <__assert_fail@plt+0x6fc4>
   16978:	cmp	r0, #0
   1697c:	popne	{r4, r5, r6, pc}
   16980:	adds	r4, r4, #0
   16984:	movne	r4, #1
   16988:	cmp	r5, #0
   1698c:	orreq	r4, r4, #1
   16990:	cmp	r4, #0
   16994:	popeq	{r4, r5, r6, pc}
   16998:	bl	16f74 <__assert_fail@plt+0x60e8>
   1699c:	push	{r4, lr}
   169a0:	cmp	r1, #0
   169a4:	orreq	r1, r1, #1
   169a8:	bl	17e50 <__assert_fail@plt+0x6fc4>
   169ac:	cmp	r0, #0
   169b0:	popne	{r4, pc}
   169b4:	bl	16f74 <__assert_fail@plt+0x60e8>
   169b8:	push	{r4, r5, r6, lr}
   169bc:	mov	r6, r0
   169c0:	mov	r5, r1
   169c4:	mov	r4, r2
   169c8:	bl	181a8 <__assert_fail@plt+0x731c>
   169cc:	cmp	r0, #0
   169d0:	popne	{r4, r5, r6, pc}
   169d4:	cmp	r6, #0
   169d8:	beq	169e8 <__assert_fail@plt+0x5b5c>
   169dc:	cmp	r5, #0
   169e0:	cmpne	r4, #0
   169e4:	popeq	{r4, r5, r6, pc}
   169e8:	bl	16f74 <__assert_fail@plt+0x60e8>
   169ec:	cmp	r2, #0
   169f0:	cmpne	r1, #0
   169f4:	moveq	r2, #1
   169f8:	moveq	r1, r2
   169fc:	push	{r4, lr}
   16a00:	bl	181a8 <__assert_fail@plt+0x731c>
   16a04:	cmp	r0, #0
   16a08:	popne	{r4, pc}
   16a0c:	bl	16f74 <__assert_fail@plt+0x60e8>
   16a10:	push	{r4, lr}
   16a14:	mov	r2, r1
   16a18:	mov	r1, r0
   16a1c:	mov	r0, #0
   16a20:	bl	181a8 <__assert_fail@plt+0x731c>
   16a24:	cmp	r0, #0
   16a28:	popne	{r4, pc}
   16a2c:	bl	16f74 <__assert_fail@plt+0x60e8>
   16a30:	cmp	r1, #0
   16a34:	cmpne	r0, #0
   16a38:	moveq	r2, #1
   16a3c:	movne	r2, r1
   16a40:	moveq	r1, r2
   16a44:	movne	r1, r0
   16a48:	push	{r4, lr}
   16a4c:	mov	r0, #0
   16a50:	bl	181a8 <__assert_fail@plt+0x731c>
   16a54:	cmp	r0, #0
   16a58:	popne	{r4, pc}
   16a5c:	bl	16f74 <__assert_fail@plt+0x60e8>
   16a60:	cmp	r0, #0
   16a64:	push	{r4, r5, r6, lr}
   16a68:	mov	r5, r1
   16a6c:	ldr	r4, [r1]
   16a70:	beq	16aac <__assert_fail@plt+0x5c20>
   16a74:	lsr	r2, r4, #1
   16a78:	add	r3, r2, #1
   16a7c:	mvn	r3, r3
   16a80:	cmp	r4, r3
   16a84:	bhi	16ac8 <__assert_fail@plt+0x5c3c>
   16a88:	add	r4, r4, #1
   16a8c:	add	r4, r4, r2
   16a90:	mov	r1, r4
   16a94:	mov	r2, #1
   16a98:	bl	181a8 <__assert_fail@plt+0x731c>
   16a9c:	cmp	r0, #0
   16aa0:	beq	16acc <__assert_fail@plt+0x5c40>
   16aa4:	str	r4, [r5]
   16aa8:	pop	{r4, r5, r6, pc}
   16aac:	cmp	r4, #0
   16ab0:	moveq	r4, #64	; 0x40
   16ab4:	mov	r1, r4
   16ab8:	mov	r2, #1
   16abc:	bl	181a8 <__assert_fail@plt+0x731c>
   16ac0:	cmp	r0, #0
   16ac4:	bne	16aa4 <__assert_fail@plt+0x5c18>
   16ac8:	bl	16f74 <__assert_fail@plt+0x60e8>
   16acc:	cmp	r4, #0
   16ad0:	bne	16ac8 <__assert_fail@plt+0x5c3c>
   16ad4:	str	r4, [r5]
   16ad8:	pop	{r4, r5, r6, pc}
   16adc:	cmp	r0, #0
   16ae0:	push	{r4, r5, r6, lr}
   16ae4:	mov	r5, r1
   16ae8:	ldr	r4, [r1]
   16aec:	mov	r6, r2
   16af0:	beq	16b34 <__assert_fail@plt+0x5ca8>
   16af4:	lsr	r1, r4, #1
   16af8:	add	r3, r1, #1
   16afc:	mvn	r3, r3
   16b00:	cmp	r4, r3
   16b04:	bhi	16b6c <__assert_fail@plt+0x5ce0>
   16b08:	add	r4, r4, #1
   16b0c:	add	r4, r4, r1
   16b10:	mov	r1, r4
   16b14:	bl	181a8 <__assert_fail@plt+0x731c>
   16b18:	cmp	r0, #0
   16b1c:	bne	16b2c <__assert_fail@plt+0x5ca0>
   16b20:	cmp	r4, #0
   16b24:	cmpne	r6, #0
   16b28:	bne	16b6c <__assert_fail@plt+0x5ce0>
   16b2c:	str	r4, [r5]
   16b30:	pop	{r4, r5, r6, pc}
   16b34:	cmp	r4, #0
   16b38:	bne	16b54 <__assert_fail@plt+0x5cc8>
   16b3c:	mov	r1, r2
   16b40:	mov	r0, #64	; 0x40
   16b44:	bl	182e8 <__assert_fail@plt+0x745c>
   16b48:	cmp	r0, #0
   16b4c:	movne	r4, r0
   16b50:	addeq	r4, r0, #1
   16b54:	mov	r2, r6
   16b58:	mov	r1, r4
   16b5c:	mov	r0, #0
   16b60:	bl	181a8 <__assert_fail@plt+0x731c>
   16b64:	cmp	r0, #0
   16b68:	bne	16b2c <__assert_fail@plt+0x5ca0>
   16b6c:	bl	16f74 <__assert_fail@plt+0x60e8>
   16b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b74:	sub	sp, sp, #12
   16b78:	ldr	r6, [r1]
   16b7c:	mov	r8, r1
   16b80:	mov	r9, r0
   16b84:	asrs	r4, r6, #1
   16b88:	mov	sl, r2
   16b8c:	mov	fp, r3
   16b90:	ldr	r7, [sp, #48]	; 0x30
   16b94:	bmi	16d10 <__assert_fail@plt+0x5e84>
   16b98:	mvn	r1, #-2147483648	; 0x80000000
   16b9c:	sub	r1, r1, r4
   16ba0:	cmp	r6, r1
   16ba4:	movle	r1, #0
   16ba8:	movgt	r1, #1
   16bac:	mvn	r3, fp
   16bb0:	cmp	r1, #0
   16bb4:	addeq	r4, r4, r6
   16bb8:	mvnne	r4, #-2147483648	; 0x80000000
   16bbc:	lsr	r3, r3, #31
   16bc0:	cmp	fp, r4
   16bc4:	movge	r2, #0
   16bc8:	andlt	r2, r3, #1
   16bcc:	cmp	r2, #0
   16bd0:	beq	16cc0 <__assert_fail@plt+0x5e34>
   16bd4:	cmp	r7, #0
   16bd8:	blt	16da8 <__assert_fail@plt+0x5f1c>
   16bdc:	bne	16da0 <__assert_fail@plt+0x5f14>
   16be0:	mov	r5, #64	; 0x40
   16be4:	mov	r1, r7
   16be8:	mov	r0, r5
   16bec:	str	r3, [sp, #4]
   16bf0:	bl	184f4 <__assert_fail@plt+0x7668>
   16bf4:	mov	r1, r7
   16bf8:	mov	r4, r0
   16bfc:	mov	r0, r5
   16c00:	bl	18714 <__assert_fail@plt+0x7888>
   16c04:	ldr	r3, [sp, #4]
   16c08:	sub	r5, r5, r1
   16c0c:	cmp	r9, #0
   16c10:	sub	r2, r4, r6
   16c14:	streq	r9, [r8]
   16c18:	cmp	r2, sl
   16c1c:	bge	16ca0 <__assert_fail@plt+0x5e14>
   16c20:	cmp	sl, #0
   16c24:	blt	16d40 <__assert_fail@plt+0x5eb4>
   16c28:	cmp	r6, #0
   16c2c:	blt	16c4c <__assert_fail@plt+0x5dc0>
   16c30:	mvn	r2, #-2147483648	; 0x80000000
   16c34:	sub	r2, r2, sl
   16c38:	cmp	r6, r2
   16c3c:	movle	r2, #0
   16c40:	movgt	r2, #1
   16c44:	cmp	r2, #0
   16c48:	bne	16d3c <__assert_fail@plt+0x5eb0>
   16c4c:	add	r6, r6, sl
   16c50:	cmp	fp, r6
   16c54:	movge	r3, #0
   16c58:	andlt	r3, r3, #1
   16c5c:	cmp	r3, #0
   16c60:	mov	r4, r6
   16c64:	bne	16d3c <__assert_fail@plt+0x5eb0>
   16c68:	cmp	r7, #0
   16c6c:	blt	16d54 <__assert_fail@plt+0x5ec8>
   16c70:	beq	16c9c <__assert_fail@plt+0x5e10>
   16c74:	cmp	r6, #0
   16c78:	blt	16df8 <__assert_fail@plt+0x5f6c>
   16c7c:	mov	r1, r7
   16c80:	mvn	r0, #-2147483648	; 0x80000000
   16c84:	bl	184f4 <__assert_fail@plt+0x7668>
   16c88:	cmp	r6, r0
   16c8c:	movle	r0, #0
   16c90:	movgt	r0, #1
   16c94:	cmp	r0, #0
   16c98:	bne	16d3c <__assert_fail@plt+0x5eb0>
   16c9c:	mul	r5, r6, r7
   16ca0:	mov	r1, r5
   16ca4:	mov	r0, r9
   16ca8:	bl	17e50 <__assert_fail@plt+0x6fc4>
   16cac:	cmp	r0, #0
   16cb0:	beq	16d24 <__assert_fail@plt+0x5e98>
   16cb4:	str	r4, [r8]
   16cb8:	add	sp, sp, #12
   16cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cc0:	cmp	r7, #0
   16cc4:	blt	16d80 <__assert_fail@plt+0x5ef4>
   16cc8:	beq	16be0 <__assert_fail@plt+0x5d54>
   16ccc:	cmp	r4, #0
   16cd0:	blt	16db0 <__assert_fail@plt+0x5f24>
   16cd4:	mov	r1, r7
   16cd8:	mvn	r0, #-2147483648	; 0x80000000
   16cdc:	str	r3, [sp, #4]
   16ce0:	bl	184f4 <__assert_fail@plt+0x7668>
   16ce4:	ldr	r3, [sp, #4]
   16ce8:	cmp	r0, r4
   16cec:	movge	r0, #0
   16cf0:	movlt	r0, #1
   16cf4:	cmp	r0, #0
   16cf8:	mvnne	r5, #-2147483648	; 0x80000000
   16cfc:	bne	16be4 <__assert_fail@plt+0x5d58>
   16d00:	mul	r5, r7, r4
   16d04:	cmp	r5, #63	; 0x3f
   16d08:	bgt	16c0c <__assert_fail@plt+0x5d80>
   16d0c:	b	16be0 <__assert_fail@plt+0x5d54>
   16d10:	rsb	r1, r4, #-2147483648	; 0x80000000
   16d14:	cmp	r6, r1
   16d18:	movge	r1, #0
   16d1c:	movlt	r1, #1
   16d20:	b	16bac <__assert_fail@plt+0x5d20>
   16d24:	adds	r5, r5, #0
   16d28:	movne	r5, #1
   16d2c:	cmp	r9, #0
   16d30:	orreq	r5, r5, #1
   16d34:	cmp	r5, #0
   16d38:	beq	16cb4 <__assert_fail@plt+0x5e28>
   16d3c:	bl	16f74 <__assert_fail@plt+0x60e8>
   16d40:	rsb	r2, sl, #-2147483648	; 0x80000000
   16d44:	cmp	r6, r2
   16d48:	movge	r2, #0
   16d4c:	movlt	r2, #1
   16d50:	b	16c44 <__assert_fail@plt+0x5db8>
   16d54:	cmp	r6, #0
   16d58:	blt	16ddc <__assert_fail@plt+0x5f50>
   16d5c:	cmn	r7, #1
   16d60:	beq	16c9c <__assert_fail@plt+0x5e10>
   16d64:	mov	r1, r7
   16d68:	mov	r0, #-2147483648	; 0x80000000
   16d6c:	bl	184f4 <__assert_fail@plt+0x7668>
   16d70:	cmp	r6, r0
   16d74:	movle	r0, #0
   16d78:	movgt	r0, #1
   16d7c:	b	16c94 <__assert_fail@plt+0x5e08>
   16d80:	cmp	r4, #0
   16d84:	blt	16e1c <__assert_fail@plt+0x5f90>
   16d88:	cmn	r7, #1
   16d8c:	beq	16d00 <__assert_fail@plt+0x5e74>
   16d90:	str	r3, [sp, #4]
   16d94:	mov	r1, r7
   16d98:	mov	r0, #-2147483648	; 0x80000000
   16d9c:	b	16ce0 <__assert_fail@plt+0x5e54>
   16da0:	mov	r4, fp
   16da4:	b	16cd4 <__assert_fail@plt+0x5e48>
   16da8:	mov	r4, fp
   16dac:	b	16d88 <__assert_fail@plt+0x5efc>
   16db0:	cmn	r4, #1
   16db4:	beq	16d00 <__assert_fail@plt+0x5e74>
   16db8:	mov	r1, r4
   16dbc:	mov	r0, #-2147483648	; 0x80000000
   16dc0:	str	r3, [sp, #4]
   16dc4:	bl	184f4 <__assert_fail@plt+0x7668>
   16dc8:	ldr	r3, [sp, #4]
   16dcc:	cmp	r7, r0
   16dd0:	movle	r0, #0
   16dd4:	movgt	r0, #1
   16dd8:	b	16cf4 <__assert_fail@plt+0x5e68>
   16ddc:	mov	r1, r7
   16de0:	mvn	r0, #-2147483648	; 0x80000000
   16de4:	bl	184f4 <__assert_fail@plt+0x7668>
   16de8:	cmp	r6, r0
   16dec:	movge	r0, #0
   16df0:	movlt	r0, #1
   16df4:	b	16c94 <__assert_fail@plt+0x5e08>
   16df8:	cmn	r6, #1
   16dfc:	beq	16c9c <__assert_fail@plt+0x5e10>
   16e00:	mov	r1, r6
   16e04:	mov	r0, #-2147483648	; 0x80000000
   16e08:	bl	184f4 <__assert_fail@plt+0x7668>
   16e0c:	cmp	r7, r0
   16e10:	movle	r0, #0
   16e14:	movgt	r0, #1
   16e18:	b	16c94 <__assert_fail@plt+0x5e08>
   16e1c:	mov	r1, r7
   16e20:	mvn	r0, #-2147483648	; 0x80000000
   16e24:	str	r3, [sp, #4]
   16e28:	bl	184f4 <__assert_fail@plt+0x7668>
   16e2c:	ldr	r3, [sp, #4]
   16e30:	cmp	r0, r4
   16e34:	movle	r0, #0
   16e38:	movgt	r0, #1
   16e3c:	b	16cf4 <__assert_fail@plt+0x5e68>
   16e40:	push	{r4, lr}
   16e44:	mov	r1, #1
   16e48:	bl	17ddc <__assert_fail@plt+0x6f50>
   16e4c:	cmp	r0, #0
   16e50:	popne	{r4, pc}
   16e54:	bl	16f74 <__assert_fail@plt+0x60e8>
   16e58:	push	{r4, lr}
   16e5c:	mov	r1, #1
   16e60:	bl	17ddc <__assert_fail@plt+0x6f50>
   16e64:	cmp	r0, #0
   16e68:	popne	{r4, pc}
   16e6c:	bl	16f74 <__assert_fail@plt+0x60e8>
   16e70:	push	{r4, lr}
   16e74:	bl	17ddc <__assert_fail@plt+0x6f50>
   16e78:	cmp	r0, #0
   16e7c:	popne	{r4, pc}
   16e80:	bl	16f74 <__assert_fail@plt+0x60e8>
   16e84:	push	{r4, lr}
   16e88:	bl	17ddc <__assert_fail@plt+0x6f50>
   16e8c:	cmp	r0, #0
   16e90:	popne	{r4, pc}
   16e94:	bl	16f74 <__assert_fail@plt+0x60e8>
   16e98:	push	{r4, r5, r6, lr}
   16e9c:	mov	r6, r0
   16ea0:	mov	r0, r1
   16ea4:	mov	r4, r1
   16ea8:	bl	17e24 <__assert_fail@plt+0x6f98>
   16eac:	subs	r5, r0, #0
   16eb0:	beq	16ec8 <__assert_fail@plt+0x603c>
   16eb4:	mov	r2, r4
   16eb8:	mov	r1, r6
   16ebc:	bl	10c88 <memcpy@plt>
   16ec0:	mov	r0, r5
   16ec4:	pop	{r4, r5, r6, pc}
   16ec8:	bl	16f74 <__assert_fail@plt+0x60e8>
   16ecc:	push	{r4, r5, r6, lr}
   16ed0:	mov	r6, r0
   16ed4:	mov	r0, r1
   16ed8:	mov	r4, r1
   16edc:	bl	17e24 <__assert_fail@plt+0x6f98>
   16ee0:	subs	r5, r0, #0
   16ee4:	beq	16efc <__assert_fail@plt+0x6070>
   16ee8:	mov	r2, r4
   16eec:	mov	r1, r6
   16ef0:	bl	10c88 <memcpy@plt>
   16ef4:	mov	r0, r5
   16ef8:	pop	{r4, r5, r6, pc}
   16efc:	bl	16f74 <__assert_fail@plt+0x60e8>
   16f00:	push	{r4, r5, r6, lr}
   16f04:	mov	r6, r0
   16f08:	add	r0, r1, #1
   16f0c:	mov	r4, r1
   16f10:	bl	17e24 <__assert_fail@plt+0x6f98>
   16f14:	subs	r5, r0, #0
   16f18:	beq	16f38 <__assert_fail@plt+0x60ac>
   16f1c:	mov	r3, #0
   16f20:	mov	r1, r6
   16f24:	strb	r3, [r5, r4]
   16f28:	mov	r2, r4
   16f2c:	bl	10c88 <memcpy@plt>
   16f30:	mov	r0, r5
   16f34:	pop	{r4, r5, r6, pc}
   16f38:	bl	16f74 <__assert_fail@plt+0x60e8>
   16f3c:	push	{r4, r5, r6, lr}
   16f40:	mov	r6, r0
   16f44:	bl	10da8 <strlen@plt>
   16f48:	add	r4, r0, #1
   16f4c:	mov	r0, r4
   16f50:	bl	17e24 <__assert_fail@plt+0x6f98>
   16f54:	subs	r5, r0, #0
   16f58:	beq	16f70 <__assert_fail@plt+0x60e4>
   16f5c:	mov	r2, r4
   16f60:	mov	r1, r6
   16f64:	bl	10c88 <memcpy@plt>
   16f68:	mov	r0, r5
   16f6c:	pop	{r4, r5, r6, pc}
   16f70:	bl	16f74 <__assert_fail@plt+0x60e8>
   16f74:	ldr	r3, [pc, #44]	; 16fa8 <__assert_fail@plt+0x611c>
   16f78:	push	{r4, lr}
   16f7c:	mov	r2, #5
   16f80:	ldr	r1, [pc, #36]	; 16fac <__assert_fail@plt+0x6120>
   16f84:	mov	r0, #0
   16f88:	ldr	r4, [r3]
   16f8c:	bl	10cc4 <dcgettext@plt>
   16f90:	ldr	r2, [pc, #24]	; 16fb0 <__assert_fail@plt+0x6124>
   16f94:	mov	r1, #0
   16f98:	mov	r3, r0
   16f9c:	mov	r0, r4
   16fa0:	bl	10d3c <error@plt>
   16fa4:	bl	10e74 <abort@plt>
   16fa8:	andeq	sl, r2, r8, ror #1
   16fac:	andeq	r9, r1, r0, asr #14
   16fb0:	andeq	r9, r1, r8, lsl #6
   16fb4:	push	{r4, r5, r6, r7, lr}
   16fb8:	sub	sp, sp, #20
   16fbc:	mov	r6, r2
   16fc0:	ldr	ip, [sp, #48]	; 0x30
   16fc4:	mov	r2, r1
   16fc8:	mov	r7, r3
   16fcc:	str	ip, [sp]
   16fd0:	add	r3, sp, #8
   16fd4:	mov	r1, #0
   16fd8:	mov	r5, r0
   16fdc:	ldr	r4, [sp, #56]	; 0x38
   16fe0:	bl	17248 <__assert_fail@plt+0x63bc>
   16fe4:	cmp	r0, #0
   16fe8:	bne	17064 <__assert_fail@plt+0x61d8>
   16fec:	ldrd	r0, [sp, #8]
   16ff0:	cmp	r0, r6
   16ff4:	sbcs	r3, r1, r7
   16ff8:	ldrd	r6, [sp, #40]	; 0x28
   16ffc:	movlt	r3, #1
   17000:	movge	r3, #0
   17004:	cmp	r6, r0
   17008:	sbcs	r2, r7, r1
   1700c:	orrlt	r3, r3, #1
   17010:	cmp	r3, #0
   17014:	beq	1705c <__assert_fail@plt+0x61d0>
   17018:	cmp	r0, #1073741824	; 0x40000000
   1701c:	sbcs	r3, r1, #0
   17020:	blt	17090 <__assert_fail@plt+0x6204>
   17024:	bl	10dc0 <__errno_location@plt>
   17028:	mov	r3, #75	; 0x4b
   1702c:	mov	r6, r3
   17030:	str	r3, [r0]
   17034:	cmp	r4, #0
   17038:	moveq	r4, #1
   1703c:	mov	r0, r5
   17040:	bl	15d70 <__assert_fail@plt+0x4ee4>
   17044:	mov	r1, r6
   17048:	ldr	r3, [sp, #52]	; 0x34
   1704c:	ldr	r2, [pc, #164]	; 170f8 <__assert_fail@plt+0x626c>
   17050:	str	r0, [sp]
   17054:	mov	r0, r4
   17058:	bl	10d3c <error@plt>
   1705c:	add	sp, sp, #20
   17060:	pop	{r4, r5, r6, r7, pc}
   17064:	cmp	r0, #1
   17068:	beq	170b8 <__assert_fail@plt+0x622c>
   1706c:	cmp	r0, #3
   17070:	beq	170e8 <__assert_fail@plt+0x625c>
   17074:	cmp	r4, #0
   17078:	beq	170d8 <__assert_fail@plt+0x624c>
   1707c:	bl	10dc0 <__errno_location@plt>
   17080:	ldr	r6, [r0]
   17084:	cmp	r6, #22
   17088:	moveq	r6, #0
   1708c:	b	1703c <__assert_fail@plt+0x61b0>
   17090:	mov	r2, #-1073741824	; 0xc0000000
   17094:	mvn	r3, #0
   17098:	cmp	r0, r2
   1709c:	sbcs	r3, r1, r3
   170a0:	blt	17024 <__assert_fail@plt+0x6198>
   170a4:	bl	10dc0 <__errno_location@plt>
   170a8:	mov	r3, #34	; 0x22
   170ac:	mov	r6, r3
   170b0:	str	r3, [r0]
   170b4:	b	17034 <__assert_fail@plt+0x61a8>
   170b8:	bl	10dc0 <__errno_location@plt>
   170bc:	mov	r3, #75	; 0x4b
   170c0:	mov	r6, r3
   170c4:	str	r3, [r0]
   170c8:	cmp	r4, #0
   170cc:	moveq	r4, #1
   170d0:	bne	17084 <__assert_fail@plt+0x61f8>
   170d4:	b	1703c <__assert_fail@plt+0x61b0>
   170d8:	bl	10dc0 <__errno_location@plt>
   170dc:	mov	r4, #1
   170e0:	ldr	r6, [r0]
   170e4:	b	17084 <__assert_fail@plt+0x61f8>
   170e8:	bl	10dc0 <__errno_location@plt>
   170ec:	mov	r6, #0
   170f0:	str	r6, [r0]
   170f4:	b	170c8 <__assert_fail@plt+0x623c>
   170f8:	andeq	r9, r1, r4, lsl #6
   170fc:	push	{r4, r5, r6, r7, lr}
   17100:	sub	sp, sp, #20
   17104:	mov	r6, r2
   17108:	ldr	r1, [sp, #48]	; 0x30
   1710c:	mov	r7, r3
   17110:	str	r1, [sp]
   17114:	add	r3, sp, #8
   17118:	mov	r2, #10
   1711c:	mov	r1, #0
   17120:	mov	r5, r0
   17124:	ldr	r4, [sp, #56]	; 0x38
   17128:	bl	17248 <__assert_fail@plt+0x63bc>
   1712c:	cmp	r0, #0
   17130:	bne	171ac <__assert_fail@plt+0x6320>
   17134:	ldrd	r0, [sp, #8]
   17138:	cmp	r0, r6
   1713c:	sbcs	r3, r1, r7
   17140:	ldrd	r6, [sp, #40]	; 0x28
   17144:	movlt	r3, #1
   17148:	movge	r3, #0
   1714c:	cmp	r6, r0
   17150:	sbcs	r2, r7, r1
   17154:	orrlt	r3, r3, #1
   17158:	cmp	r3, #0
   1715c:	beq	171a4 <__assert_fail@plt+0x6318>
   17160:	cmp	r0, #1073741824	; 0x40000000
   17164:	sbcs	r3, r1, #0
   17168:	blt	171d8 <__assert_fail@plt+0x634c>
   1716c:	bl	10dc0 <__errno_location@plt>
   17170:	mov	r3, #75	; 0x4b
   17174:	mov	r6, r3
   17178:	str	r3, [r0]
   1717c:	cmp	r4, #0
   17180:	moveq	r4, #1
   17184:	mov	r0, r5
   17188:	bl	15d70 <__assert_fail@plt+0x4ee4>
   1718c:	mov	r1, r6
   17190:	ldr	r3, [sp, #52]	; 0x34
   17194:	ldr	r2, [pc, #164]	; 17240 <__assert_fail@plt+0x63b4>
   17198:	str	r0, [sp]
   1719c:	mov	r0, r4
   171a0:	bl	10d3c <error@plt>
   171a4:	add	sp, sp, #20
   171a8:	pop	{r4, r5, r6, r7, pc}
   171ac:	cmp	r0, #1
   171b0:	beq	17200 <__assert_fail@plt+0x6374>
   171b4:	cmp	r0, #3
   171b8:	beq	17230 <__assert_fail@plt+0x63a4>
   171bc:	cmp	r4, #0
   171c0:	beq	17220 <__assert_fail@plt+0x6394>
   171c4:	bl	10dc0 <__errno_location@plt>
   171c8:	ldr	r6, [r0]
   171cc:	cmp	r6, #22
   171d0:	moveq	r6, #0
   171d4:	b	17184 <__assert_fail@plt+0x62f8>
   171d8:	mov	r2, #-1073741824	; 0xc0000000
   171dc:	mvn	r3, #0
   171e0:	cmp	r0, r2
   171e4:	sbcs	r3, r1, r3
   171e8:	blt	1716c <__assert_fail@plt+0x62e0>
   171ec:	bl	10dc0 <__errno_location@plt>
   171f0:	mov	r3, #34	; 0x22
   171f4:	mov	r6, r3
   171f8:	str	r3, [r0]
   171fc:	b	1717c <__assert_fail@plt+0x62f0>
   17200:	bl	10dc0 <__errno_location@plt>
   17204:	mov	r3, #75	; 0x4b
   17208:	mov	r6, r3
   1720c:	str	r3, [r0]
   17210:	cmp	r4, #0
   17214:	moveq	r4, #1
   17218:	bne	171cc <__assert_fail@plt+0x6340>
   1721c:	b	17184 <__assert_fail@plt+0x62f8>
   17220:	bl	10dc0 <__errno_location@plt>
   17224:	mov	r4, #1
   17228:	ldr	r6, [r0]
   1722c:	b	171cc <__assert_fail@plt+0x6340>
   17230:	bl	10dc0 <__errno_location@plt>
   17234:	mov	r6, #0
   17238:	str	r6, [r0]
   1723c:	b	17210 <__assert_fail@plt+0x6384>
   17240:	andeq	r9, r1, r4, lsl #6
   17244:	andeq	r0, r0, r0
   17248:	cmp	r2, #36	; 0x24
   1724c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17250:	sub	sp, sp, #52	; 0x34
   17254:	bhi	17dc8 <__assert_fail@plt+0x6f3c>
   17258:	cmp	r1, #0
   1725c:	mov	r5, r1
   17260:	mov	r6, r2
   17264:	addeq	r5, sp, #44	; 0x2c
   17268:	mov	sl, r0
   1726c:	mov	r9, r3
   17270:	bl	10dc0 <__errno_location@plt>
   17274:	mov	r4, #0
   17278:	mov	r2, r6
   1727c:	mov	r3, r4
   17280:	mov	r1, r5
   17284:	str	r4, [r0]
   17288:	mov	fp, r0
   1728c:	mov	r0, sl
   17290:	bl	10e44 <__strtoll_internal@plt>
   17294:	ldr	r8, [r5]
   17298:	cmp	sl, r8
   1729c:	mov	r6, r0
   172a0:	mov	r7, r1
   172a4:	beq	172f4 <__assert_fail@plt+0x6468>
   172a8:	ldr	r4, [fp]
   172ac:	cmp	r4, #0
   172b0:	bne	172dc <__assert_fail@plt+0x6450>
   172b4:	ldr	r3, [sp, #88]	; 0x58
   172b8:	cmp	r3, #0
   172bc:	beq	172cc <__assert_fail@plt+0x6440>
   172c0:	ldrb	sl, [r8]
   172c4:	cmp	sl, #0
   172c8:	bne	17328 <__assert_fail@plt+0x649c>
   172cc:	strd	r6, [r9]
   172d0:	mov	r0, r4
   172d4:	add	sp, sp, #52	; 0x34
   172d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172dc:	cmp	r4, #34	; 0x22
   172e0:	beq	17588 <__assert_fail@plt+0x66fc>
   172e4:	mov	r4, #4
   172e8:	mov	r0, r4
   172ec:	add	sp, sp, #52	; 0x34
   172f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f4:	ldr	r3, [sp, #88]	; 0x58
   172f8:	cmp	r3, r4
   172fc:	beq	172e4 <__assert_fail@plt+0x6458>
   17300:	ldrb	sl, [sl]
   17304:	cmp	sl, r4
   17308:	beq	172e4 <__assert_fail@plt+0x6458>
   1730c:	mov	r1, sl
   17310:	mov	r0, r3
   17314:	bl	10db4 <strchr@plt>
   17318:	cmp	r0, r4
   1731c:	movne	r6, #1
   17320:	movne	r7, #0
   17324:	beq	172e4 <__assert_fail@plt+0x6458>
   17328:	mov	r1, sl
   1732c:	ldr	r0, [sp, #88]	; 0x58
   17330:	bl	10db4 <strchr@plt>
   17334:	cmp	r0, #0
   17338:	beq	17940 <__assert_fail@plt+0x6ab4>
   1733c:	sub	r3, sl, #69	; 0x45
   17340:	cmp	r3, #47	; 0x2f
   17344:	ldrls	pc, [pc, r3, lsl #2]
   17348:	b	1740c <__assert_fail@plt+0x6580>
   1734c:	andeq	r7, r1, r4, lsr #10
   17350:	andeq	r7, r1, ip, lsl #8
   17354:	andeq	r7, r1, r4, lsr #10
   17358:	andeq	r7, r1, ip, lsl #8
   1735c:	andeq	r7, r1, ip, lsl #8
   17360:	andeq	r7, r1, ip, lsl #8
   17364:	andeq	r7, r1, r4, lsr #10
   17368:	andeq	r7, r1, ip, lsl #8
   1736c:	andeq	r7, r1, r4, lsr #10
   17370:	andeq	r7, r1, ip, lsl #8
   17374:	andeq	r7, r1, ip, lsl #8
   17378:	andeq	r7, r1, r4, lsr #10
   1737c:	andeq	r7, r1, ip, lsl #8
   17380:	andeq	r7, r1, ip, lsl #8
   17384:	andeq	r7, r1, ip, lsl #8
   17388:	andeq	r7, r1, r4, lsr #10
   1738c:	andeq	r7, r1, ip, lsl #8
   17390:	andeq	r7, r1, ip, lsl #8
   17394:	andeq	r7, r1, ip, lsl #8
   17398:	andeq	r7, r1, ip, lsl #8
   1739c:	andeq	r7, r1, r4, lsr #10
   173a0:	andeq	r7, r1, r4, lsr #10
   173a4:	andeq	r7, r1, ip, lsl #8
   173a8:	andeq	r7, r1, ip, lsl #8
   173ac:	andeq	r7, r1, ip, lsl #8
   173b0:	andeq	r7, r1, ip, lsl #8
   173b4:	andeq	r7, r1, ip, lsl #8
   173b8:	andeq	r7, r1, ip, lsl #8
   173bc:	andeq	r7, r1, ip, lsl #8
   173c0:	andeq	r7, r1, ip, lsl #8
   173c4:	andeq	r7, r1, ip, lsl #8
   173c8:	andeq	r7, r1, ip, lsl #8
   173cc:	andeq	r7, r1, ip, lsl #8
   173d0:	andeq	r7, r1, ip, lsl #8
   173d4:	andeq	r7, r1, r4, lsr #10
   173d8:	andeq	r7, r1, ip, lsl #8
   173dc:	andeq	r7, r1, ip, lsl #8
   173e0:	andeq	r7, r1, ip, lsl #8
   173e4:	andeq	r7, r1, r4, lsr #10
   173e8:	andeq	r7, r1, ip, lsl #8
   173ec:	andeq	r7, r1, r4, lsr #10
   173f0:	andeq	r7, r1, ip, lsl #8
   173f4:	andeq	r7, r1, ip, lsl #8
   173f8:	andeq	r7, r1, ip, lsl #8
   173fc:	andeq	r7, r1, ip, lsl #8
   17400:	andeq	r7, r1, ip, lsl #8
   17404:	andeq	r7, r1, ip, lsl #8
   17408:	andeq	r7, r1, r4, lsr #10
   1740c:	mov	r3, #1024	; 0x400
   17410:	str	r3, [sp, #12]
   17414:	mov	r3, #0
   17418:	str	r3, [sp, #8]
   1741c:	ldr	r3, [pc, #1292]	; 17930 <__assert_fail@plt+0x6aa4>
   17420:	mvn	r2, #0
   17424:	strd	r2, [sp, #16]
   17428:	mov	r3, #0
   1742c:	mov	r2, #1024	; 0x400
   17430:	strd	r2, [sp, #24]
   17434:	mov	r3, #1
   17438:	str	r3, [sp, #4]
   1743c:	sub	sl, sl, #66	; 0x42
   17440:	cmp	sl, #53	; 0x35
   17444:	ldrls	pc, [pc, sl, lsl #2]
   17448:	b	17940 <__assert_fail@plt+0x6ab4>
   1744c:	andeq	r7, r1, r4, lsr #17
   17450:	andeq	r7, r1, r0, asr #18
   17454:	andeq	r7, r1, r0, asr #18
   17458:			; <UNDEFINED> instruction: 0x000176b8
   1745c:	andeq	r7, r1, r0, asr #18
   17460:	andeq	r7, r1, r8, asr r6
   17464:	andeq	r7, r1, r0, asr #18
   17468:	andeq	r7, r1, r0, asr #18
   1746c:	andeq	r7, r1, r0, asr #18
   17470:	andeq	r7, r1, ip, asr #18
   17474:	andeq	r7, r1, r0, asr #18
   17478:	strdeq	r7, [r1], -r8
   1747c:	andeq	r7, r1, r0, asr #18
   17480:	andeq	r7, r1, r0, asr #18
   17484:	andeq	r7, r1, r8, asr #15
   17488:	andeq	r7, r1, r0, asr #18
   1748c:	andeq	r7, r1, r0, asr #18
   17490:	andeq	r7, r1, r0, asr #18
   17494:	andeq	r7, r1, r4, ror r7
   17498:	andeq	r7, r1, r0, asr #18
   1749c:	andeq	r7, r1, r0, asr #18
   174a0:	andeq	r7, r1, r0, asr #18
   174a4:	andeq	r7, r1, r0, asr #18
   174a8:	andeq	r7, r1, ip, lsl r8
   174ac:	andeq	r7, r1, ip, lsl r7
   174b0:	andeq	r7, r1, r0, asr #18
   174b4:	andeq	r7, r1, r0, asr #18
   174b8:	andeq	r7, r1, r0, asr #18
   174bc:	andeq	r7, r1, r0, asr #18
   174c0:	andeq	r7, r1, r0, asr #18
   174c4:	andeq	r7, r1, r0, asr #18
   174c8:	andeq	r7, r1, r0, asr #18
   174cc:	andeq	r7, r1, ip, asr #17
   174d0:	ldrdeq	r7, [r1], -r4
   174d4:	andeq	r7, r1, r0, asr #18
   174d8:	andeq	r7, r1, r0, asr #18
   174dc:	andeq	r7, r1, r0, asr #18
   174e0:	andeq	r7, r1, r8, asr r6
   174e4:	andeq	r7, r1, r0, asr #18
   174e8:	andeq	r7, r1, r0, asr #18
   174ec:	andeq	r7, r1, r0, asr #18
   174f0:	andeq	r7, r1, ip, asr #18
   174f4:	andeq	r7, r1, r0, asr #18
   174f8:	strdeq	r7, [r1], -r8
   174fc:	andeq	r7, r1, r0, asr #18
   17500:	andeq	r7, r1, r0, asr #18
   17504:	andeq	r7, r1, r0, asr #18
   17508:	andeq	r7, r1, r0, asr #18
   1750c:	andeq	r7, r1, r0, asr #18
   17510:	andeq	r7, r1, r0, asr #18
   17514:	andeq	r7, r1, r4, ror r7
   17518:	andeq	r7, r1, r0, asr #18
   1751c:	andeq	r7, r1, r0, asr #18
   17520:	andeq	r7, r1, r0, lsl #18
   17524:	mov	r1, #48	; 0x30
   17528:	ldr	r0, [sp, #88]	; 0x58
   1752c:	bl	10db4 <strchr@plt>
   17530:	cmp	r0, #0
   17534:	beq	17988 <__assert_fail@plt+0x6afc>
   17538:	ldrb	r3, [r8, #1]
   1753c:	cmp	r3, #68	; 0x44
   17540:	beq	17554 <__assert_fail@plt+0x66c8>
   17544:	cmp	r3, #105	; 0x69
   17548:	beq	17590 <__assert_fail@plt+0x6704>
   1754c:	cmp	r3, #66	; 0x42
   17550:	bne	1740c <__assert_fail@plt+0x6580>
   17554:	mov	r3, #1000	; 0x3e8
   17558:	str	r3, [sp, #12]
   1755c:	mov	r3, #0
   17560:	str	r3, [sp, #8]
   17564:	add	r3, pc, #956	; 0x3bc
   17568:	ldrd	r2, [r3]
   1756c:	strd	r2, [sp, #16]
   17570:	mov	r3, #0
   17574:	mov	r2, #1000	; 0x3e8
   17578:	strd	r2, [sp, #24]
   1757c:	mov	r3, #2
   17580:	str	r3, [sp, #4]
   17584:	b	1743c <__assert_fail@plt+0x65b0>
   17588:	mov	r4, #1
   1758c:	b	172b4 <__assert_fail@plt+0x6428>
   17590:	ldrb	r3, [r8, #2]
   17594:	mvn	r2, #0
   17598:	cmp	r3, #66	; 0x42
   1759c:	mov	r3, #1024	; 0x400
   175a0:	str	r3, [sp, #12]
   175a4:	mov	r3, #0
   175a8:	str	r3, [sp, #8]
   175ac:	ldr	r3, [pc, #892]	; 17930 <__assert_fail@plt+0x6aa4>
   175b0:	strd	r2, [sp, #16]
   175b4:	mov	r3, #0
   175b8:	mov	r2, #1024	; 0x400
   175bc:	strd	r2, [sp, #24]
   175c0:	moveq	r3, #3
   175c4:	streq	r3, [sp, #4]
   175c8:	movne	r3, #1
   175cc:	strne	r3, [sp, #4]
   175d0:	b	1743c <__assert_fail@plt+0x65b0>
   175d4:	mov	sl, #0
   175d8:	ldr	r2, [sp, #4]
   175dc:	orr	r4, r4, sl
   175e0:	add	r3, r8, r2
   175e4:	str	r3, [r5]
   175e8:	ldrb	r3, [r8, r2]
   175ec:	cmp	r3, #0
   175f0:	orrne	r4, r4, #2
   175f4:	b	172cc <__assert_fail@plt+0x6440>
   175f8:	mov	sl, #0
   175fc:	mov	r3, r9
   17600:	mov	fp, #1
   17604:	mov	r9, r5
   17608:	mov	r5, r4
   1760c:	mov	r4, sl
   17610:	mov	sl, r3
   17614:	cmp	r6, #0
   17618:	sbcs	r3, r7, #0
   1761c:	blt	17d44 <__assert_fail@plt+0x6eb8>
   17620:	ldrd	r2, [sp, #16]
   17624:	cmp	r2, r6
   17628:	sbcs	r1, r3, r7
   1762c:	bge	17c54 <__assert_fail@plt+0x6dc8>
   17630:	sub	fp, fp, #1
   17634:	cmn	fp, #1
   17638:	mov	r4, #1
   1763c:	mvn	r6, #0
   17640:	mvn	r7, #-2147483648	; 0x80000000
   17644:	bne	17624 <__assert_fail@plt+0x6798>
   17648:	mov	r4, r5
   1764c:	mov	r5, r9
   17650:	mov	r9, sl
   17654:	b	178bc <__assert_fail@plt+0x6a30>
   17658:	mov	sl, #0
   1765c:	str	r9, [sp, #32]
   17660:	mov	r9, r5
   17664:	mov	r5, r4
   17668:	mov	r4, sl
   1766c:	ldr	sl, [sp, #12]
   17670:	mov	fp, #2
   17674:	cmp	r6, #0
   17678:	sbcs	r3, r7, #0
   1767c:	blt	17c90 <__assert_fail@plt+0x6e04>
   17680:	ldrd	r2, [sp, #16]
   17684:	cmp	r2, r6
   17688:	sbcs	r1, r3, r7
   1768c:	bge	17cf8 <__assert_fail@plt+0x6e6c>
   17690:	sub	fp, fp, #1
   17694:	cmn	fp, #1
   17698:	mvn	r6, #0
   1769c:	mvn	r7, #-2147483648	; 0x80000000
   176a0:	mov	r4, #1
   176a4:	bne	17684 <__assert_fail@plt+0x67f8>
   176a8:	mov	r4, r5
   176ac:	mov	r5, r9
   176b0:	ldr	r9, [sp, #32]
   176b4:	b	178bc <__assert_fail@plt+0x6a30>
   176b8:	mov	sl, #0
   176bc:	str	r4, [sp, #32]
   176c0:	str	r9, [sp, #36]	; 0x24
   176c4:	mov	r4, sl
   176c8:	mov	r9, r5
   176cc:	ldr	sl, [sp, #12]
   176d0:	ldr	r5, [sp, #8]
   176d4:	mov	fp, #5
   176d8:	cmp	r6, #0
   176dc:	sbcs	r3, r7, #0
   176e0:	blt	17b04 <__assert_fail@plt+0x6c78>
   176e4:	ldrd	r2, [sp, #16]
   176e8:	cmp	r2, r6
   176ec:	sbcs	r1, r3, r7
   176f0:	bge	17b3c <__assert_fail@plt+0x6cb0>
   176f4:	sub	fp, fp, #1
   176f8:	cmn	fp, #1
   176fc:	mvn	r6, #0
   17700:	mvn	r7, #-2147483648	; 0x80000000
   17704:	mov	r4, #1
   17708:	bne	176e8 <__assert_fail@plt+0x685c>
   1770c:	mov	r5, r9
   17710:	ldr	r4, [sp, #32]
   17714:	ldr	r9, [sp, #36]	; 0x24
   17718:	b	178bc <__assert_fail@plt+0x6a30>
   1771c:	mov	sl, #0
   17720:	str	r4, [sp, #32]
   17724:	str	r9, [sp, #36]	; 0x24
   17728:	mov	r4, sl
   1772c:	mov	r9, r5
   17730:	ldr	sl, [sp, #12]
   17734:	ldr	r5, [sp, #8]
   17738:	mov	fp, #6
   1773c:	cmp	r6, #0
   17740:	sbcs	r3, r7, #0
   17744:	blt	179b8 <__assert_fail@plt+0x6b2c>
   17748:	ldrd	r2, [sp, #16]
   1774c:	cmp	r2, r6
   17750:	sbcs	r1, r3, r7
   17754:	bge	17998 <__assert_fail@plt+0x6b0c>
   17758:	sub	fp, fp, #1
   1775c:	cmn	fp, #1
   17760:	mov	r4, #1
   17764:	mvn	r6, #0
   17768:	mvn	r7, #-2147483648	; 0x80000000
   1776c:	bne	1774c <__assert_fail@plt+0x68c0>
   17770:	b	1770c <__assert_fail@plt+0x6880>
   17774:	mov	sl, #0
   17778:	str	r9, [sp, #32]
   1777c:	mov	r9, r5
   17780:	mov	r5, r4
   17784:	mov	r4, sl
   17788:	ldr	sl, [sp, #12]
   1778c:	mov	fp, #3
   17790:	cmp	r6, #0
   17794:	sbcs	r3, r7, #0
   17798:	blt	17a98 <__assert_fail@plt+0x6c0c>
   1779c:	ldrd	r2, [sp, #16]
   177a0:	cmp	r2, r6
   177a4:	sbcs	r1, r3, r7
   177a8:	bge	17ad0 <__assert_fail@plt+0x6c44>
   177ac:	sub	fp, fp, #1
   177b0:	cmn	fp, #1
   177b4:	mov	r4, #1
   177b8:	mvn	r6, #0
   177bc:	mvn	r7, #-2147483648	; 0x80000000
   177c0:	bne	177a0 <__assert_fail@plt+0x6914>
   177c4:	b	176a8 <__assert_fail@plt+0x681c>
   177c8:	mov	sl, #0
   177cc:	str	r9, [sp, #32]
   177d0:	mov	r9, r5
   177d4:	mov	r5, r4
   177d8:	mov	r4, sl
   177dc:	ldr	sl, [sp, #12]
   177e0:	mov	fp, #4
   177e4:	cmp	r6, #0
   177e8:	sbcs	r3, r7, #0
   177ec:	blt	17c0c <__assert_fail@plt+0x6d80>
   177f0:	ldrd	r2, [sp, #16]
   177f4:	cmp	r2, r6
   177f8:	sbcs	r1, r3, r7
   177fc:	bge	17be8 <__assert_fail@plt+0x6d5c>
   17800:	sub	fp, fp, #1
   17804:	cmn	fp, #1
   17808:	mvn	r6, #0
   1780c:	mvn	r7, #-2147483648	; 0x80000000
   17810:	mov	r4, #1
   17814:	bne	177f4 <__assert_fail@plt+0x6968>
   17818:	b	176a8 <__assert_fail@plt+0x681c>
   1781c:	mov	sl, #0
   17820:	str	r4, [sp, #32]
   17824:	str	r9, [sp, #36]	; 0x24
   17828:	mov	r4, sl
   1782c:	mov	r9, r5
   17830:	ldr	sl, [sp, #12]
   17834:	ldr	r5, [sp, #8]
   17838:	mov	fp, #7
   1783c:	cmp	r6, #0
   17840:	sbcs	r3, r7, #0
   17844:	blt	17a5c <__assert_fail@plt+0x6bd0>
   17848:	ldrd	r2, [sp, #16]
   1784c:	b	17868 <__assert_fail@plt+0x69dc>
   17850:	sub	fp, fp, #1
   17854:	cmn	fp, #1
   17858:	mvn	r6, #0
   1785c:	mvn	r7, #-2147483648	; 0x80000000
   17860:	mov	r4, #1
   17864:	beq	1770c <__assert_fail@plt+0x6880>
   17868:	cmp	r2, r6
   1786c:	sbcs	r1, r3, r7
   17870:	blt	17850 <__assert_fail@plt+0x69c4>
   17874:	mul	r3, r6, r5
   17878:	cmp	fp, #0
   1787c:	mla	r3, sl, r7, r3
   17880:	umull	r6, r7, r6, sl
   17884:	sub	fp, fp, #1
   17888:	add	r7, r3, r7
   1788c:	bne	1783c <__assert_fail@plt+0x69b0>
   17890:	mov	sl, r4
   17894:	mov	r5, r9
   17898:	ldr	r4, [sp, #32]
   1789c:	ldr	r9, [sp, #36]	; 0x24
   178a0:	b	175d8 <__assert_fail@plt+0x674c>
   178a4:	cmp	r6, #0
   178a8:	sbcs	r3, r7, #0
   178ac:	blt	17a0c <__assert_fail@plt+0x6b80>
   178b0:	cmp	r6, #0
   178b4:	sbcs	r3, r7, #2097152	; 0x200000
   178b8:	blt	17a40 <__assert_fail@plt+0x6bb4>
   178bc:	mvn	r6, #0
   178c0:	mvn	r7, #-2147483648	; 0x80000000
   178c4:	mov	sl, #1
   178c8:	b	175d8 <__assert_fail@plt+0x674c>
   178cc:	cmp	r6, #0
   178d0:	sbcs	r3, r7, #0
   178d4:	blt	17bb0 <__assert_fail@plt+0x6d24>
   178d8:	cmp	r6, #0
   178dc:	sbcs	r3, r7, #4194304	; 0x400000
   178e0:	bge	178bc <__assert_fail@plt+0x6a30>
   178e4:	lsl	r3, r7, #9
   178e8:	orr	r3, r3, r6, lsr #23
   178ec:	lsl	r2, r6, #9
   178f0:	mov	r6, r2
   178f4:	mov	r7, r3
   178f8:	mov	sl, #0
   178fc:	b	175d8 <__assert_fail@plt+0x674c>
   17900:	cmp	r6, #0
   17904:	sbcs	r3, r7, #0
   17908:	blt	17b78 <__assert_fail@plt+0x6cec>
   1790c:	cmp	r6, #0
   17910:	sbcs	r3, r7, #1073741824	; 0x40000000
   17914:	bge	178bc <__assert_fail@plt+0x6a30>
   17918:	adds	r6, r6, r6
   1791c:	adc	r7, r7, r7
   17920:	mov	sl, #0
   17924:	b	175d8 <__assert_fail@plt+0x674c>
   17928:	strbge	r5, [r3, #1015]!	; 0x3f7
   1792c:	mlaeq	r0, fp, r4, ip
   17930:			; <UNDEFINED> instruction: 0x001fffff
   17934:	andeq	r9, r1, r4, asr r7
   17938:	andeq	r9, r1, r0, ror #14
   1793c:	andeq	r9, r1, r0, ror r7
   17940:	strd	r6, [r9]
   17944:	orr	r4, r4, #2
   17948:	b	172d0 <__assert_fail@plt+0x6444>
   1794c:	cmp	r6, #0
   17950:	sbcs	r3, r7, #0
   17954:	blt	17d8c <__assert_fail@plt+0x6f00>
   17958:	ldrd	r2, [sp, #16]
   1795c:	cmp	r2, r6
   17960:	sbcs	r3, r3, r7
   17964:	blt	178bc <__assert_fail@plt+0x6a30>
   17968:	ldr	r3, [sp, #8]
   1796c:	ldr	r2, [sp, #12]
   17970:	mov	sl, #0
   17974:	mul	r3, r6, r3
   17978:	mla	r3, r2, r7, r3
   1797c:	umull	r6, r7, r6, r2
   17980:	add	r7, r3, r7
   17984:	b	175d8 <__assert_fail@plt+0x674c>
   17988:	mov	r3, #1024	; 0x400
   1798c:	str	r0, [sp, #8]
   17990:	str	r3, [sp, #12]
   17994:	b	1741c <__assert_fail@plt+0x6590>
   17998:	mul	r3, r6, r5
   1799c:	cmp	fp, #0
   179a0:	mla	r3, sl, r7, r3
   179a4:	umull	r6, r7, r6, sl
   179a8:	sub	fp, fp, #1
   179ac:	add	r7, r3, r7
   179b0:	bne	1773c <__assert_fail@plt+0x68b0>
   179b4:	b	17890 <__assert_fail@plt+0x6a04>
   179b8:	mvn	r3, #0
   179bc:	mvn	r2, #0
   179c0:	cmp	r7, r3
   179c4:	cmpeq	r6, r2
   179c8:	beq	17998 <__assert_fail@plt+0x6b0c>
   179cc:	mov	r2, r6
   179d0:	mov	r3, r7
   179d4:	mov	r0, #0
   179d8:	mov	r1, #-2147483648	; 0x80000000
   179dc:	bl	18734 <__assert_fail@plt+0x78a8>
   179e0:	ldrd	r2, [sp, #24]
   179e4:	cmp	r0, r2
   179e8:	sbcs	r3, r1, r3
   179ec:	bge	17998 <__assert_fail@plt+0x6b0c>
   179f0:	mov	r5, r9
   179f4:	ldr	r4, [sp, #32]
   179f8:	ldr	r9, [sp, #36]	; 0x24
   179fc:	mov	r6, #0
   17a00:	mov	r7, #-2147483648	; 0x80000000
   17a04:	mov	sl, #1
   17a08:	b	175d8 <__assert_fail@plt+0x674c>
   17a0c:	mvn	r3, #0
   17a10:	mvn	r2, #0
   17a14:	cmp	r7, r3
   17a18:	cmpeq	r6, r2
   17a1c:	beq	17a40 <__assert_fail@plt+0x6bb4>
   17a20:	mov	r3, r7
   17a24:	mov	r2, r6
   17a28:	mov	r0, #0
   17a2c:	mov	r1, #-2147483648	; 0x80000000
   17a30:	bl	18734 <__assert_fail@plt+0x78a8>
   17a34:	cmp	r0, #1024	; 0x400
   17a38:	sbcs	r3, r1, #0
   17a3c:	blt	179fc <__assert_fail@plt+0x6b70>
   17a40:	lsl	r3, r7, #10
   17a44:	orr	r3, r3, r6, lsr #22
   17a48:	lsl	r2, r6, #10
   17a4c:	mov	r6, r2
   17a50:	mov	r7, r3
   17a54:	mov	sl, #0
   17a58:	b	175d8 <__assert_fail@plt+0x674c>
   17a5c:	mvn	r3, #0
   17a60:	mvn	r2, #0
   17a64:	cmp	r7, r3
   17a68:	cmpeq	r6, r2
   17a6c:	beq	17874 <__assert_fail@plt+0x69e8>
   17a70:	mov	r2, r6
   17a74:	mov	r3, r7
   17a78:	mov	r0, #0
   17a7c:	mov	r1, #-2147483648	; 0x80000000
   17a80:	bl	18734 <__assert_fail@plt+0x78a8>
   17a84:	ldrd	r2, [sp, #24]
   17a88:	cmp	r0, r2
   17a8c:	sbcs	r3, r1, r3
   17a90:	bge	17874 <__assert_fail@plt+0x69e8>
   17a94:	b	179f0 <__assert_fail@plt+0x6b64>
   17a98:	mvn	r3, #0
   17a9c:	mvn	r2, #0
   17aa0:	cmp	r7, r3
   17aa4:	cmpeq	r6, r2
   17aa8:	beq	17ad0 <__assert_fail@plt+0x6c44>
   17aac:	mov	r2, r6
   17ab0:	mov	r3, r7
   17ab4:	mov	r0, #0
   17ab8:	mov	r1, #-2147483648	; 0x80000000
   17abc:	bl	18734 <__assert_fail@plt+0x78a8>
   17ac0:	ldrd	r2, [sp, #24]
   17ac4:	cmp	r0, r2
   17ac8:	sbcs	r3, r1, r3
   17acc:	blt	17c44 <__assert_fail@plt+0x6db8>
   17ad0:	ldr	r3, [sp, #8]
   17ad4:	cmp	fp, #0
   17ad8:	sub	fp, fp, #1
   17adc:	mul	r3, r6, r3
   17ae0:	mla	r3, sl, r7, r3
   17ae4:	umull	r6, r7, r6, sl
   17ae8:	add	r7, r3, r7
   17aec:	bne	17790 <__assert_fail@plt+0x6904>
   17af0:	mov	sl, r4
   17af4:	mov	r4, r5
   17af8:	mov	r5, r9
   17afc:	ldr	r9, [sp, #32]
   17b00:	b	175d8 <__assert_fail@plt+0x674c>
   17b04:	mvn	r3, #0
   17b08:	mvn	r2, #0
   17b0c:	cmp	r7, r3
   17b10:	cmpeq	r6, r2
   17b14:	beq	17b3c <__assert_fail@plt+0x6cb0>
   17b18:	mov	r2, r6
   17b1c:	mov	r3, r7
   17b20:	mov	r0, #0
   17b24:	mov	r1, #-2147483648	; 0x80000000
   17b28:	bl	18734 <__assert_fail@plt+0x78a8>
   17b2c:	ldrd	r2, [sp, #24]
   17b30:	cmp	r0, r2
   17b34:	sbcs	r3, r1, r3
   17b38:	blt	17b5c <__assert_fail@plt+0x6cd0>
   17b3c:	mul	r3, r6, r5
   17b40:	cmp	fp, #0
   17b44:	mla	r3, sl, r7, r3
   17b48:	umull	r6, r7, r6, sl
   17b4c:	sub	fp, fp, #1
   17b50:	add	r7, r3, r7
   17b54:	bne	176d8 <__assert_fail@plt+0x684c>
   17b58:	b	17890 <__assert_fail@plt+0x6a04>
   17b5c:	sub	fp, fp, #1
   17b60:	cmn	fp, #1
   17b64:	mov	r6, #0
   17b68:	mov	r7, #-2147483648	; 0x80000000
   17b6c:	mov	r4, #1
   17b70:	bne	17b18 <__assert_fail@plt+0x6c8c>
   17b74:	b	179f0 <__assert_fail@plt+0x6b64>
   17b78:	mvn	r3, #0
   17b7c:	mvn	r2, #0
   17b80:	cmp	r7, r3
   17b84:	cmpeq	r6, r2
   17b88:	beq	17918 <__assert_fail@plt+0x6a8c>
   17b8c:	mov	r2, r6
   17b90:	mov	r3, r7
   17b94:	mov	r0, #0
   17b98:	mov	r1, #-2147483648	; 0x80000000
   17b9c:	bl	18734 <__assert_fail@plt+0x78a8>
   17ba0:	cmp	r1, #0
   17ba4:	cmpeq	r0, #1
   17ba8:	beq	179fc <__assert_fail@plt+0x6b70>
   17bac:	b	17918 <__assert_fail@plt+0x6a8c>
   17bb0:	mvn	r3, #0
   17bb4:	mvn	r2, #0
   17bb8:	cmp	r7, r3
   17bbc:	cmpeq	r6, r2
   17bc0:	beq	178e4 <__assert_fail@plt+0x6a58>
   17bc4:	mov	r3, r7
   17bc8:	mov	r2, r6
   17bcc:	mov	r0, #0
   17bd0:	mov	r1, #-2147483648	; 0x80000000
   17bd4:	bl	18734 <__assert_fail@plt+0x78a8>
   17bd8:	cmp	r0, #512	; 0x200
   17bdc:	sbcs	r3, r1, #0
   17be0:	blt	179fc <__assert_fail@plt+0x6b70>
   17be4:	b	178e4 <__assert_fail@plt+0x6a58>
   17be8:	ldr	r3, [sp, #8]
   17bec:	cmp	fp, #0
   17bf0:	sub	fp, fp, #1
   17bf4:	mul	r3, r6, r3
   17bf8:	mla	r3, sl, r7, r3
   17bfc:	umull	r6, r7, r6, sl
   17c00:	add	r7, r3, r7
   17c04:	bne	177e4 <__assert_fail@plt+0x6958>
   17c08:	b	17af0 <__assert_fail@plt+0x6c64>
   17c0c:	mvn	r3, #0
   17c10:	mvn	r2, #0
   17c14:	cmp	r7, r3
   17c18:	cmpeq	r6, r2
   17c1c:	beq	17be8 <__assert_fail@plt+0x6d5c>
   17c20:	mov	r2, r6
   17c24:	mov	r3, r7
   17c28:	mov	r0, #0
   17c2c:	mov	r1, #-2147483648	; 0x80000000
   17c30:	bl	18734 <__assert_fail@plt+0x78a8>
   17c34:	ldrd	r2, [sp, #24]
   17c38:	cmp	r0, r2
   17c3c:	sbcs	r3, r1, r3
   17c40:	bge	17be8 <__assert_fail@plt+0x6d5c>
   17c44:	mov	r4, r5
   17c48:	mov	r5, r9
   17c4c:	ldr	r9, [sp, #32]
   17c50:	b	179fc <__assert_fail@plt+0x6b70>
   17c54:	ldr	r3, [sp, #8]
   17c58:	ldr	r2, [sp, #12]
   17c5c:	cmp	fp, #0
   17c60:	mul	r3, r6, r3
   17c64:	sub	fp, fp, #1
   17c68:	mla	r3, r2, r7, r3
   17c6c:	umull	r6, r7, r6, r2
   17c70:	add	r7, r3, r7
   17c74:	bne	17614 <__assert_fail@plt+0x6788>
   17c78:	mov	r3, sl
   17c7c:	mov	sl, r4
   17c80:	mov	r4, r5
   17c84:	mov	r5, r9
   17c88:	mov	r9, r3
   17c8c:	b	175d8 <__assert_fail@plt+0x674c>
   17c90:	mvn	r3, #0
   17c94:	mvn	r2, #0
   17c98:	cmp	r7, r3
   17c9c:	cmpeq	r6, r2
   17ca0:	beq	17cf8 <__assert_fail@plt+0x6e6c>
   17ca4:	mov	r3, sl
   17ca8:	mov	sl, r9
   17cac:	mov	r9, r5
   17cb0:	mov	r5, r4
   17cb4:	mov	r4, fp
   17cb8:	mov	fp, r3
   17cbc:	mov	r2, r6
   17cc0:	mov	r3, r7
   17cc4:	mov	r0, #0
   17cc8:	mov	r1, #-2147483648	; 0x80000000
   17ccc:	bl	18734 <__assert_fail@plt+0x78a8>
   17cd0:	ldrd	r2, [sp, #24]
   17cd4:	cmp	r0, r2
   17cd8:	sbcs	r3, r1, r3
   17cdc:	blt	17d1c <__assert_fail@plt+0x6e90>
   17ce0:	mov	r3, fp
   17ce4:	mov	fp, r4
   17ce8:	mov	r4, r5
   17cec:	mov	r5, r9
   17cf0:	mov	r9, sl
   17cf4:	mov	sl, r3
   17cf8:	ldr	r3, [sp, #8]
   17cfc:	cmp	fp, #0
   17d00:	sub	fp, fp, #1
   17d04:	mul	r3, r6, r3
   17d08:	mla	r3, sl, r7, r3
   17d0c:	umull	r6, r7, r6, sl
   17d10:	add	r7, r3, r7
   17d14:	bne	17674 <__assert_fail@plt+0x67e8>
   17d18:	b	17af0 <__assert_fail@plt+0x6c64>
   17d1c:	sub	r4, r4, #1
   17d20:	cmn	r4, #1
   17d24:	mov	r6, #0
   17d28:	mov	r7, #-2147483648	; 0x80000000
   17d2c:	mov	r5, #1
   17d30:	bne	17cbc <__assert_fail@plt+0x6e30>
   17d34:	mov	r4, r9
   17d38:	mov	r5, sl
   17d3c:	ldr	r9, [sp, #32]
   17d40:	b	179fc <__assert_fail@plt+0x6b70>
   17d44:	mvn	r3, #0
   17d48:	mvn	r2, #0
   17d4c:	cmp	r7, r3
   17d50:	cmpeq	r6, r2
   17d54:	beq	17c54 <__assert_fail@plt+0x6dc8>
   17d58:	mov	r2, r6
   17d5c:	mov	r3, r7
   17d60:	mov	r0, #0
   17d64:	mov	r1, #-2147483648	; 0x80000000
   17d68:	bl	18734 <__assert_fail@plt+0x78a8>
   17d6c:	ldrd	r2, [sp, #24]
   17d70:	cmp	r0, r2
   17d74:	sbcs	r3, r1, r3
   17d78:	bge	17c54 <__assert_fail@plt+0x6dc8>
   17d7c:	mov	r4, r5
   17d80:	mov	r5, r9
   17d84:	mov	r9, sl
   17d88:	b	179fc <__assert_fail@plt+0x6b70>
   17d8c:	mvn	r3, #0
   17d90:	mvn	r2, #0
   17d94:	cmp	r7, r3
   17d98:	cmpeq	r6, r2
   17d9c:	beq	17968 <__assert_fail@plt+0x6adc>
   17da0:	mov	r2, r6
   17da4:	mov	r3, r7
   17da8:	mov	r0, #0
   17dac:	mov	r1, #-2147483648	; 0x80000000
   17db0:	bl	18734 <__assert_fail@plt+0x78a8>
   17db4:	ldrd	r2, [sp, #24]
   17db8:	cmp	r0, r2
   17dbc:	sbcs	r3, r1, r3
   17dc0:	blt	179fc <__assert_fail@plt+0x6b70>
   17dc4:	b	17968 <__assert_fail@plt+0x6adc>
   17dc8:	ldr	r3, [pc, #-1180]	; 17934 <__assert_fail@plt+0x6aa8>
   17dcc:	mov	r2, #85	; 0x55
   17dd0:	ldr	r1, [pc, #-1184]	; 17938 <__assert_fail@plt+0x6aac>
   17dd4:	ldr	r0, [pc, #-1184]	; 1793c <__assert_fail@plt+0x6ab0>
   17dd8:	bl	10e8c <__assert_fail@plt>
   17ddc:	cmp	r1, #0
   17de0:	cmpne	r0, #0
   17de4:	moveq	r1, #1
   17de8:	moveq	r0, r1
   17dec:	umull	r2, r3, r0, r1
   17df0:	adds	r3, r3, #0
   17df4:	movne	r3, #1
   17df8:	cmp	r2, #0
   17dfc:	blt	17e0c <__assert_fail@plt+0x6f80>
   17e00:	cmp	r3, #0
   17e04:	bne	17e0c <__assert_fail@plt+0x6f80>
   17e08:	b	10c34 <calloc@plt>
   17e0c:	push	{r4, lr}
   17e10:	bl	10dc0 <__errno_location@plt>
   17e14:	mov	r3, #12
   17e18:	str	r3, [r0]
   17e1c:	mov	r0, #0
   17e20:	pop	{r4, pc}
   17e24:	cmp	r0, #0
   17e28:	moveq	r0, #1
   17e2c:	cmp	r0, #0
   17e30:	blt	17e38 <__assert_fail@plt+0x6fac>
   17e34:	b	10d54 <malloc@plt>
   17e38:	push	{r4, lr}
   17e3c:	bl	10dc0 <__errno_location@plt>
   17e40:	mov	r3, #12
   17e44:	str	r3, [r0]
   17e48:	mov	r0, #0
   17e4c:	pop	{r4, pc}
   17e50:	cmp	r0, #0
   17e54:	beq	17e78 <__assert_fail@plt+0x6fec>
   17e58:	cmp	r1, #0
   17e5c:	push	{lr}		; (str lr, [sp, #-4]!)
   17e60:	sub	sp, sp, #12
   17e64:	beq	17e80 <__assert_fail@plt+0x6ff4>
   17e68:	blt	17e98 <__assert_fail@plt+0x700c>
   17e6c:	add	sp, sp, #12
   17e70:	pop	{lr}		; (ldr lr, [sp], #4)
   17e74:	b	10cd0 <realloc@plt>
   17e78:	mov	r0, r1
   17e7c:	b	17e24 <__assert_fail@plt+0x6f98>
   17e80:	str	r1, [sp, #4]
   17e84:	bl	18028 <__assert_fail@plt+0x719c>
   17e88:	ldr	r3, [sp, #4]
   17e8c:	mov	r0, r3
   17e90:	add	sp, sp, #12
   17e94:	pop	{pc}		; (ldr pc, [sp], #4)
   17e98:	bl	10dc0 <__errno_location@plt>
   17e9c:	mov	r2, #12
   17ea0:	mov	r3, #0
   17ea4:	str	r2, [r0]
   17ea8:	b	17e8c <__assert_fail@plt+0x7000>
   17eac:	push	{r4, r5, r6, lr}
   17eb0:	mov	r4, r0
   17eb4:	bl	10d24 <__fpending@plt>
   17eb8:	ldr	r5, [r4]
   17ebc:	and	r5, r5, #32
   17ec0:	mov	r6, r0
   17ec4:	mov	r0, r4
   17ec8:	bl	17f28 <__assert_fail@plt+0x709c>
   17ecc:	cmp	r5, #0
   17ed0:	mov	r4, r0
   17ed4:	bne	17ef4 <__assert_fail@plt+0x7068>
   17ed8:	cmp	r0, #0
   17edc:	beq	17eec <__assert_fail@plt+0x7060>
   17ee0:	cmp	r6, #0
   17ee4:	beq	17f10 <__assert_fail@plt+0x7084>
   17ee8:	mvn	r4, #0
   17eec:	mov	r0, r4
   17ef0:	pop	{r4, r5, r6, pc}
   17ef4:	cmp	r0, #0
   17ef8:	bne	17ee8 <__assert_fail@plt+0x705c>
   17efc:	bl	10dc0 <__errno_location@plt>
   17f00:	str	r4, [r0]
   17f04:	mvn	r4, #0
   17f08:	mov	r0, r4
   17f0c:	pop	{r4, r5, r6, pc}
   17f10:	bl	10dc0 <__errno_location@plt>
   17f14:	ldr	r4, [r0]
   17f18:	subs	r4, r4, #9
   17f1c:	mvnne	r4, #0
   17f20:	mov	r0, r4
   17f24:	pop	{r4, r5, r6, pc}
   17f28:	push	{r4, r5, lr}
   17f2c:	sub	sp, sp, #12
   17f30:	mov	r4, r0
   17f34:	bl	10df0 <fileno@plt>
   17f38:	cmp	r0, #0
   17f3c:	mov	r0, r4
   17f40:	blt	17fbc <__assert_fail@plt+0x7130>
   17f44:	bl	10d6c <__freading@plt>
   17f48:	cmp	r0, #0
   17f4c:	bne	17f88 <__assert_fail@plt+0x70fc>
   17f50:	mov	r0, r4
   17f54:	bl	17fc8 <__assert_fail@plt+0x713c>
   17f58:	cmp	r0, #0
   17f5c:	beq	17fb8 <__assert_fail@plt+0x712c>
   17f60:	bl	10dc0 <__errno_location@plt>
   17f64:	mov	r5, r0
   17f68:	mov	r0, r4
   17f6c:	ldr	r4, [r5]
   17f70:	bl	10e08 <fclose@plt>
   17f74:	cmp	r4, #0
   17f78:	mvnne	r0, #0
   17f7c:	strne	r4, [r5]
   17f80:	add	sp, sp, #12
   17f84:	pop	{r4, r5, pc}
   17f88:	mov	r0, r4
   17f8c:	bl	10df0 <fileno@plt>
   17f90:	mov	r3, #1
   17f94:	str	r3, [sp]
   17f98:	mov	r2, #0
   17f9c:	mov	r3, #0
   17fa0:	bl	10d0c <lseek64@plt>
   17fa4:	mvn	r3, #0
   17fa8:	mvn	r2, #0
   17fac:	cmp	r1, r3
   17fb0:	cmpeq	r0, r2
   17fb4:	bne	17f50 <__assert_fail@plt+0x70c4>
   17fb8:	mov	r0, r4
   17fbc:	add	sp, sp, #12
   17fc0:	pop	{r4, r5, lr}
   17fc4:	b	10e08 <fclose@plt>
   17fc8:	push	{r4, lr}
   17fcc:	subs	r4, r0, #0
   17fd0:	sub	sp, sp, #8
   17fd4:	beq	17ff0 <__assert_fail@plt+0x7164>
   17fd8:	bl	10d6c <__freading@plt>
   17fdc:	cmp	r0, #0
   17fe0:	beq	17ff0 <__assert_fail@plt+0x7164>
   17fe4:	ldr	r3, [r4]
   17fe8:	tst	r3, #256	; 0x100
   17fec:	bne	18000 <__assert_fail@plt+0x7174>
   17ff0:	mov	r0, r4
   17ff4:	add	sp, sp, #8
   17ff8:	pop	{r4, lr}
   17ffc:	b	10c64 <fflush@plt>
   18000:	mov	r3, #1
   18004:	str	r3, [sp]
   18008:	mov	r2, #0
   1800c:	mov	r3, #0
   18010:	mov	r0, r4
   18014:	bl	18080 <__assert_fail@plt+0x71f4>
   18018:	mov	r0, r4
   1801c:	add	sp, sp, #8
   18020:	pop	{r4, lr}
   18024:	b	10c64 <fflush@plt>
   18028:	push	{r4, r5, lr}
   1802c:	sub	sp, sp, #12
   18030:	mov	r5, r0
   18034:	bl	10dc0 <__errno_location@plt>
   18038:	mov	r2, #0
   1803c:	mov	r4, r0
   18040:	ldr	r3, [r0]
   18044:	str	r2, [r4]
   18048:	mov	r0, r5
   1804c:	str	r3, [sp]
   18050:	str	r3, [sp, #4]
   18054:	bl	10c70 <free@plt>
   18058:	ldr	r3, [r4]
   1805c:	add	r2, sp, #8
   18060:	cmp	r3, #0
   18064:	moveq	r3, #4
   18068:	movne	r3, #0
   1806c:	add	r3, r2, r3
   18070:	ldr	r3, [r3, #-8]
   18074:	str	r3, [r4]
   18078:	add	sp, sp, #12
   1807c:	pop	{r4, r5, pc}
   18080:	push	{r4, r5, r6, r7, r8, lr}
   18084:	sub	sp, sp, #8
   18088:	ldmib	r0, {ip, lr}
   1808c:	mov	r4, r0
   18090:	ldr	r5, [sp, #32]
   18094:	cmp	lr, ip
   18098:	beq	180b0 <__assert_fail@plt+0x7224>
   1809c:	str	r5, [sp, #32]
   180a0:	mov	r0, r4
   180a4:	add	sp, sp, #8
   180a8:	pop	{r4, r5, r6, r7, r8, lr}
   180ac:	b	10e14 <fseeko64@plt>
   180b0:	ldr	lr, [r0, #20]
   180b4:	ldr	ip, [r0, #16]
   180b8:	cmp	lr, ip
   180bc:	bne	1809c <__assert_fail@plt+0x7210>
   180c0:	ldr	r8, [r0, #36]	; 0x24
   180c4:	cmp	r8, #0
   180c8:	bne	1809c <__assert_fail@plt+0x7210>
   180cc:	mov	r6, r2
   180d0:	mov	r7, r3
   180d4:	bl	10df0 <fileno@plt>
   180d8:	mov	r2, r6
   180dc:	mov	r3, r7
   180e0:	str	r5, [sp]
   180e4:	bl	10d0c <lseek64@plt>
   180e8:	mvn	r3, #0
   180ec:	mvn	r2, #0
   180f0:	cmp	r1, r3
   180f4:	cmpeq	r0, r2
   180f8:	beq	18118 <__assert_fail@plt+0x728c>
   180fc:	ldr	r3, [r4]
   18100:	strd	r0, [r4, #80]	; 0x50
   18104:	mov	r0, r8
   18108:	bic	r3, r3, #16
   1810c:	str	r3, [r4]
   18110:	add	sp, sp, #8
   18114:	pop	{r4, r5, r6, r7, r8, pc}
   18118:	mvn	r0, #0
   1811c:	b	18110 <__assert_fail@plt+0x7284>
   18120:	push	{r4, lr}
   18124:	mov	r0, #14
   18128:	bl	10e38 <nl_langinfo@plt>
   1812c:	cmp	r0, #0
   18130:	beq	18148 <__assert_fail@plt+0x72bc>
   18134:	ldrb	r2, [r0]
   18138:	ldr	r3, [pc, #16]	; 18150 <__assert_fail@plt+0x72c4>
   1813c:	cmp	r2, #0
   18140:	moveq	r0, r3
   18144:	pop	{r4, pc}
   18148:	ldr	r0, [pc]	; 18150 <__assert_fail@plt+0x72c4>
   1814c:	pop	{r4, pc}
   18150:	muleq	r1, r8, r7
   18154:	push	{r4, r5, r6, r7, lr}
   18158:	subs	r6, r0, #0
   1815c:	sub	sp, sp, #12
   18160:	addeq	r6, sp, #4
   18164:	mov	r0, r6
   18168:	mov	r5, r2
   1816c:	mov	r7, r1
   18170:	bl	10d30 <mbrtowc@plt>
   18174:	cmp	r5, #0
   18178:	cmnne	r0, #3
   1817c:	mov	r4, r0
   18180:	bls	1819c <__assert_fail@plt+0x7310>
   18184:	mov	r0, #0
   18188:	bl	181f4 <__assert_fail@plt+0x7368>
   1818c:	cmp	r0, #0
   18190:	moveq	r4, #1
   18194:	ldrbeq	r3, [r7]
   18198:	streq	r3, [r6]
   1819c:	mov	r0, r4
   181a0:	add	sp, sp, #12
   181a4:	pop	{r4, r5, r6, r7, pc}
   181a8:	push	{r4, r5, r6, lr}
   181ac:	subs	r4, r2, #0
   181b0:	mov	r6, r0
   181b4:	mov	r5, r1
   181b8:	beq	181e4 <__assert_fail@plt+0x7358>
   181bc:	mov	r1, r4
   181c0:	mvn	r0, #0
   181c4:	bl	182e8 <__assert_fail@plt+0x745c>
   181c8:	cmp	r0, r5
   181cc:	bcs	181e4 <__assert_fail@plt+0x7358>
   181d0:	bl	10dc0 <__errno_location@plt>
   181d4:	mov	r3, #12
   181d8:	str	r3, [r0]
   181dc:	mov	r0, #0
   181e0:	pop	{r4, r5, r6, pc}
   181e4:	mul	r1, r5, r4
   181e8:	mov	r0, r6
   181ec:	pop	{r4, r5, r6, lr}
   181f0:	b	17e50 <__assert_fail@plt+0x6fc4>
   181f4:	push	{lr}		; (str lr, [sp, #-4]!)
   181f8:	sub	sp, sp, #268	; 0x10c
   181fc:	add	r1, sp, #4
   18200:	ldr	r2, [pc, #60]	; 18244 <__assert_fail@plt+0x73b8>
   18204:	bl	18250 <__assert_fail@plt+0x73c4>
   18208:	cmp	r0, #0
   1820c:	movne	r0, #0
   18210:	bne	1823c <__assert_fail@plt+0x73b0>
   18214:	ldr	r1, [pc, #44]	; 18248 <__assert_fail@plt+0x73bc>
   18218:	add	r0, sp, #4
   1821c:	bl	10c58 <strcmp@plt>
   18220:	cmp	r0, #0
   18224:	beq	1823c <__assert_fail@plt+0x73b0>
   18228:	add	r0, sp, #4
   1822c:	ldr	r1, [pc, #24]	; 1824c <__assert_fail@plt+0x73c0>
   18230:	bl	10c58 <strcmp@plt>
   18234:	adds	r0, r0, #0
   18238:	movne	r0, #1
   1823c:	add	sp, sp, #268	; 0x10c
   18240:	pop	{pc}		; (ldr pc, [sp], #4)
   18244:	andeq	r0, r0, r1, lsl #2
   18248:	andeq	r9, r1, r0, lsr #15
   1824c:	andeq	r9, r1, r4, lsr #15
   18250:	push	{r4, r5, r6, lr}
   18254:	mov	r5, r1
   18258:	mov	r1, #0
   1825c:	mov	r4, r2
   18260:	bl	10e20 <setlocale@plt>
   18264:	subs	r6, r0, #0
   18268:	beq	182c4 <__assert_fail@plt+0x7438>
   1826c:	bl	10da8 <strlen@plt>
   18270:	cmp	r4, r0
   18274:	bhi	182ac <__assert_fail@plt+0x7420>
   18278:	cmp	r4, #0
   1827c:	bne	18288 <__assert_fail@plt+0x73fc>
   18280:	mov	r0, #34	; 0x22
   18284:	pop	{r4, r5, r6, pc}
   18288:	sub	r4, r4, #1
   1828c:	mov	r1, r6
   18290:	mov	r2, r4
   18294:	mov	r0, r5
   18298:	bl	10c88 <memcpy@plt>
   1829c:	mov	r3, #0
   182a0:	strb	r3, [r5, r4]
   182a4:	mov	r0, #34	; 0x22
   182a8:	pop	{r4, r5, r6, pc}
   182ac:	add	r2, r0, #1
   182b0:	mov	r1, r6
   182b4:	mov	r0, r5
   182b8:	bl	10c88 <memcpy@plt>
   182bc:	mov	r0, #0
   182c0:	pop	{r4, r5, r6, pc}
   182c4:	cmp	r4, #0
   182c8:	beq	182d8 <__assert_fail@plt+0x744c>
   182cc:	strb	r6, [r5]
   182d0:	mov	r0, #22
   182d4:	pop	{r4, r5, r6, pc}
   182d8:	mov	r0, #22
   182dc:	pop	{r4, r5, r6, pc}
   182e0:	mov	r1, #0
   182e4:	b	10e20 <setlocale@plt>
   182e8:	subs	r2, r1, #1
   182ec:	bxeq	lr
   182f0:	bcc	184c8 <__assert_fail@plt+0x763c>
   182f4:	cmp	r0, r1
   182f8:	bls	184ac <__assert_fail@plt+0x7620>
   182fc:	tst	r1, r2
   18300:	beq	184b8 <__assert_fail@plt+0x762c>
   18304:	clz	r3, r0
   18308:	clz	r2, r1
   1830c:	sub	r3, r2, r3
   18310:	rsbs	r3, r3, #31
   18314:	addne	r3, r3, r3, lsl #1
   18318:	mov	r2, #0
   1831c:	addne	pc, pc, r3, lsl #2
   18320:	nop			; (mov r0, r0)
   18324:	cmp	r0, r1, lsl #31
   18328:	adc	r2, r2, r2
   1832c:	subcs	r0, r0, r1, lsl #31
   18330:	cmp	r0, r1, lsl #30
   18334:	adc	r2, r2, r2
   18338:	subcs	r0, r0, r1, lsl #30
   1833c:	cmp	r0, r1, lsl #29
   18340:	adc	r2, r2, r2
   18344:	subcs	r0, r0, r1, lsl #29
   18348:	cmp	r0, r1, lsl #28
   1834c:	adc	r2, r2, r2
   18350:	subcs	r0, r0, r1, lsl #28
   18354:	cmp	r0, r1, lsl #27
   18358:	adc	r2, r2, r2
   1835c:	subcs	r0, r0, r1, lsl #27
   18360:	cmp	r0, r1, lsl #26
   18364:	adc	r2, r2, r2
   18368:	subcs	r0, r0, r1, lsl #26
   1836c:	cmp	r0, r1, lsl #25
   18370:	adc	r2, r2, r2
   18374:	subcs	r0, r0, r1, lsl #25
   18378:	cmp	r0, r1, lsl #24
   1837c:	adc	r2, r2, r2
   18380:	subcs	r0, r0, r1, lsl #24
   18384:	cmp	r0, r1, lsl #23
   18388:	adc	r2, r2, r2
   1838c:	subcs	r0, r0, r1, lsl #23
   18390:	cmp	r0, r1, lsl #22
   18394:	adc	r2, r2, r2
   18398:	subcs	r0, r0, r1, lsl #22
   1839c:	cmp	r0, r1, lsl #21
   183a0:	adc	r2, r2, r2
   183a4:	subcs	r0, r0, r1, lsl #21
   183a8:	cmp	r0, r1, lsl #20
   183ac:	adc	r2, r2, r2
   183b0:	subcs	r0, r0, r1, lsl #20
   183b4:	cmp	r0, r1, lsl #19
   183b8:	adc	r2, r2, r2
   183bc:	subcs	r0, r0, r1, lsl #19
   183c0:	cmp	r0, r1, lsl #18
   183c4:	adc	r2, r2, r2
   183c8:	subcs	r0, r0, r1, lsl #18
   183cc:	cmp	r0, r1, lsl #17
   183d0:	adc	r2, r2, r2
   183d4:	subcs	r0, r0, r1, lsl #17
   183d8:	cmp	r0, r1, lsl #16
   183dc:	adc	r2, r2, r2
   183e0:	subcs	r0, r0, r1, lsl #16
   183e4:	cmp	r0, r1, lsl #15
   183e8:	adc	r2, r2, r2
   183ec:	subcs	r0, r0, r1, lsl #15
   183f0:	cmp	r0, r1, lsl #14
   183f4:	adc	r2, r2, r2
   183f8:	subcs	r0, r0, r1, lsl #14
   183fc:	cmp	r0, r1, lsl #13
   18400:	adc	r2, r2, r2
   18404:	subcs	r0, r0, r1, lsl #13
   18408:	cmp	r0, r1, lsl #12
   1840c:	adc	r2, r2, r2
   18410:	subcs	r0, r0, r1, lsl #12
   18414:	cmp	r0, r1, lsl #11
   18418:	adc	r2, r2, r2
   1841c:	subcs	r0, r0, r1, lsl #11
   18420:	cmp	r0, r1, lsl #10
   18424:	adc	r2, r2, r2
   18428:	subcs	r0, r0, r1, lsl #10
   1842c:	cmp	r0, r1, lsl #9
   18430:	adc	r2, r2, r2
   18434:	subcs	r0, r0, r1, lsl #9
   18438:	cmp	r0, r1, lsl #8
   1843c:	adc	r2, r2, r2
   18440:	subcs	r0, r0, r1, lsl #8
   18444:	cmp	r0, r1, lsl #7
   18448:	adc	r2, r2, r2
   1844c:	subcs	r0, r0, r1, lsl #7
   18450:	cmp	r0, r1, lsl #6
   18454:	adc	r2, r2, r2
   18458:	subcs	r0, r0, r1, lsl #6
   1845c:	cmp	r0, r1, lsl #5
   18460:	adc	r2, r2, r2
   18464:	subcs	r0, r0, r1, lsl #5
   18468:	cmp	r0, r1, lsl #4
   1846c:	adc	r2, r2, r2
   18470:	subcs	r0, r0, r1, lsl #4
   18474:	cmp	r0, r1, lsl #3
   18478:	adc	r2, r2, r2
   1847c:	subcs	r0, r0, r1, lsl #3
   18480:	cmp	r0, r1, lsl #2
   18484:	adc	r2, r2, r2
   18488:	subcs	r0, r0, r1, lsl #2
   1848c:	cmp	r0, r1, lsl #1
   18490:	adc	r2, r2, r2
   18494:	subcs	r0, r0, r1, lsl #1
   18498:	cmp	r0, r1
   1849c:	adc	r2, r2, r2
   184a0:	subcs	r0, r0, r1
   184a4:	mov	r0, r2
   184a8:	bx	lr
   184ac:	moveq	r0, #1
   184b0:	movne	r0, #0
   184b4:	bx	lr
   184b8:	clz	r2, r1
   184bc:	rsb	r2, r2, #31
   184c0:	lsr	r0, r0, r2
   184c4:	bx	lr
   184c8:	cmp	r0, #0
   184cc:	mvnne	r0, #0
   184d0:	b	18808 <__assert_fail@plt+0x797c>
   184d4:	cmp	r1, #0
   184d8:	beq	184c8 <__assert_fail@plt+0x763c>
   184dc:	push	{r0, r1, lr}
   184e0:	bl	182e8 <__assert_fail@plt+0x745c>
   184e4:	pop	{r1, r2, lr}
   184e8:	mul	r3, r2, r0
   184ec:	sub	r1, r1, r3
   184f0:	bx	lr
   184f4:	cmp	r1, #0
   184f8:	beq	18704 <__assert_fail@plt+0x7878>
   184fc:	eor	ip, r0, r1
   18500:	rsbmi	r1, r1, #0
   18504:	subs	r2, r1, #1
   18508:	beq	186d0 <__assert_fail@plt+0x7844>
   1850c:	movs	r3, r0
   18510:	rsbmi	r3, r0, #0
   18514:	cmp	r3, r1
   18518:	bls	186dc <__assert_fail@plt+0x7850>
   1851c:	tst	r1, r2
   18520:	beq	186ec <__assert_fail@plt+0x7860>
   18524:	clz	r2, r3
   18528:	clz	r0, r1
   1852c:	sub	r2, r0, r2
   18530:	rsbs	r2, r2, #31
   18534:	addne	r2, r2, r2, lsl #1
   18538:	mov	r0, #0
   1853c:	addne	pc, pc, r2, lsl #2
   18540:	nop			; (mov r0, r0)
   18544:	cmp	r3, r1, lsl #31
   18548:	adc	r0, r0, r0
   1854c:	subcs	r3, r3, r1, lsl #31
   18550:	cmp	r3, r1, lsl #30
   18554:	adc	r0, r0, r0
   18558:	subcs	r3, r3, r1, lsl #30
   1855c:	cmp	r3, r1, lsl #29
   18560:	adc	r0, r0, r0
   18564:	subcs	r3, r3, r1, lsl #29
   18568:	cmp	r3, r1, lsl #28
   1856c:	adc	r0, r0, r0
   18570:	subcs	r3, r3, r1, lsl #28
   18574:	cmp	r3, r1, lsl #27
   18578:	adc	r0, r0, r0
   1857c:	subcs	r3, r3, r1, lsl #27
   18580:	cmp	r3, r1, lsl #26
   18584:	adc	r0, r0, r0
   18588:	subcs	r3, r3, r1, lsl #26
   1858c:	cmp	r3, r1, lsl #25
   18590:	adc	r0, r0, r0
   18594:	subcs	r3, r3, r1, lsl #25
   18598:	cmp	r3, r1, lsl #24
   1859c:	adc	r0, r0, r0
   185a0:	subcs	r3, r3, r1, lsl #24
   185a4:	cmp	r3, r1, lsl #23
   185a8:	adc	r0, r0, r0
   185ac:	subcs	r3, r3, r1, lsl #23
   185b0:	cmp	r3, r1, lsl #22
   185b4:	adc	r0, r0, r0
   185b8:	subcs	r3, r3, r1, lsl #22
   185bc:	cmp	r3, r1, lsl #21
   185c0:	adc	r0, r0, r0
   185c4:	subcs	r3, r3, r1, lsl #21
   185c8:	cmp	r3, r1, lsl #20
   185cc:	adc	r0, r0, r0
   185d0:	subcs	r3, r3, r1, lsl #20
   185d4:	cmp	r3, r1, lsl #19
   185d8:	adc	r0, r0, r0
   185dc:	subcs	r3, r3, r1, lsl #19
   185e0:	cmp	r3, r1, lsl #18
   185e4:	adc	r0, r0, r0
   185e8:	subcs	r3, r3, r1, lsl #18
   185ec:	cmp	r3, r1, lsl #17
   185f0:	adc	r0, r0, r0
   185f4:	subcs	r3, r3, r1, lsl #17
   185f8:	cmp	r3, r1, lsl #16
   185fc:	adc	r0, r0, r0
   18600:	subcs	r3, r3, r1, lsl #16
   18604:	cmp	r3, r1, lsl #15
   18608:	adc	r0, r0, r0
   1860c:	subcs	r3, r3, r1, lsl #15
   18610:	cmp	r3, r1, lsl #14
   18614:	adc	r0, r0, r0
   18618:	subcs	r3, r3, r1, lsl #14
   1861c:	cmp	r3, r1, lsl #13
   18620:	adc	r0, r0, r0
   18624:	subcs	r3, r3, r1, lsl #13
   18628:	cmp	r3, r1, lsl #12
   1862c:	adc	r0, r0, r0
   18630:	subcs	r3, r3, r1, lsl #12
   18634:	cmp	r3, r1, lsl #11
   18638:	adc	r0, r0, r0
   1863c:	subcs	r3, r3, r1, lsl #11
   18640:	cmp	r3, r1, lsl #10
   18644:	adc	r0, r0, r0
   18648:	subcs	r3, r3, r1, lsl #10
   1864c:	cmp	r3, r1, lsl #9
   18650:	adc	r0, r0, r0
   18654:	subcs	r3, r3, r1, lsl #9
   18658:	cmp	r3, r1, lsl #8
   1865c:	adc	r0, r0, r0
   18660:	subcs	r3, r3, r1, lsl #8
   18664:	cmp	r3, r1, lsl #7
   18668:	adc	r0, r0, r0
   1866c:	subcs	r3, r3, r1, lsl #7
   18670:	cmp	r3, r1, lsl #6
   18674:	adc	r0, r0, r0
   18678:	subcs	r3, r3, r1, lsl #6
   1867c:	cmp	r3, r1, lsl #5
   18680:	adc	r0, r0, r0
   18684:	subcs	r3, r3, r1, lsl #5
   18688:	cmp	r3, r1, lsl #4
   1868c:	adc	r0, r0, r0
   18690:	subcs	r3, r3, r1, lsl #4
   18694:	cmp	r3, r1, lsl #3
   18698:	adc	r0, r0, r0
   1869c:	subcs	r3, r3, r1, lsl #3
   186a0:	cmp	r3, r1, lsl #2
   186a4:	adc	r0, r0, r0
   186a8:	subcs	r3, r3, r1, lsl #2
   186ac:	cmp	r3, r1, lsl #1
   186b0:	adc	r0, r0, r0
   186b4:	subcs	r3, r3, r1, lsl #1
   186b8:	cmp	r3, r1
   186bc:	adc	r0, r0, r0
   186c0:	subcs	r3, r3, r1
   186c4:	cmp	ip, #0
   186c8:	rsbmi	r0, r0, #0
   186cc:	bx	lr
   186d0:	teq	ip, r0
   186d4:	rsbmi	r0, r0, #0
   186d8:	bx	lr
   186dc:	movcc	r0, #0
   186e0:	asreq	r0, ip, #31
   186e4:	orreq	r0, r0, #1
   186e8:	bx	lr
   186ec:	clz	r2, r1
   186f0:	rsb	r2, r2, #31
   186f4:	cmp	ip, #0
   186f8:	lsr	r0, r3, r2
   186fc:	rsbmi	r0, r0, #0
   18700:	bx	lr
   18704:	cmp	r0, #0
   18708:	mvngt	r0, #-2147483648	; 0x80000000
   1870c:	movlt	r0, #-2147483648	; 0x80000000
   18710:	b	18808 <__assert_fail@plt+0x797c>
   18714:	cmp	r1, #0
   18718:	beq	18704 <__assert_fail@plt+0x7878>
   1871c:	push	{r0, r1, lr}
   18720:	bl	184fc <__assert_fail@plt+0x7670>
   18724:	pop	{r1, r2, lr}
   18728:	mul	r3, r2, r0
   1872c:	sub	r1, r1, r3
   18730:	bx	lr
   18734:	cmp	r3, #0
   18738:	cmpeq	r2, #0
   1873c:	bne	18760 <__assert_fail@plt+0x78d4>
   18740:	cmp	r1, #0
   18744:	movlt	r1, #-2147483648	; 0x80000000
   18748:	movlt	r0, #0
   1874c:	blt	1875c <__assert_fail@plt+0x78d0>
   18750:	cmpeq	r0, #0
   18754:	mvnne	r1, #-2147483648	; 0x80000000
   18758:	mvnne	r0, #0
   1875c:	b	18808 <__assert_fail@plt+0x797c>
   18760:	sub	sp, sp, #8
   18764:	push	{sp, lr}
   18768:	cmp	r1, #0
   1876c:	blt	1878c <__assert_fail@plt+0x7900>
   18770:	cmp	r3, #0
   18774:	blt	187c0 <__assert_fail@plt+0x7934>
   18778:	bl	18818 <__assert_fail@plt+0x798c>
   1877c:	ldr	lr, [sp, #4]
   18780:	add	sp, sp, #8
   18784:	pop	{r2, r3}
   18788:	bx	lr
   1878c:	rsbs	r0, r0, #0
   18790:	sbc	r1, r1, r1, lsl #1
   18794:	cmp	r3, #0
   18798:	blt	187e4 <__assert_fail@plt+0x7958>
   1879c:	bl	18818 <__assert_fail@plt+0x798c>
   187a0:	ldr	lr, [sp, #4]
   187a4:	add	sp, sp, #8
   187a8:	pop	{r2, r3}
   187ac:	rsbs	r0, r0, #0
   187b0:	sbc	r1, r1, r1, lsl #1
   187b4:	rsbs	r2, r2, #0
   187b8:	sbc	r3, r3, r3, lsl #1
   187bc:	bx	lr
   187c0:	rsbs	r2, r2, #0
   187c4:	sbc	r3, r3, r3, lsl #1
   187c8:	bl	18818 <__assert_fail@plt+0x798c>
   187cc:	ldr	lr, [sp, #4]
   187d0:	add	sp, sp, #8
   187d4:	pop	{r2, r3}
   187d8:	rsbs	r0, r0, #0
   187dc:	sbc	r1, r1, r1, lsl #1
   187e0:	bx	lr
   187e4:	rsbs	r2, r2, #0
   187e8:	sbc	r3, r3, r3, lsl #1
   187ec:	bl	18818 <__assert_fail@plt+0x798c>
   187f0:	ldr	lr, [sp, #4]
   187f4:	add	sp, sp, #8
   187f8:	pop	{r2, r3}
   187fc:	rsbs	r2, r2, #0
   18800:	sbc	r3, r3, r3, lsl #1
   18804:	bx	lr
   18808:	push	{r1, lr}
   1880c:	mov	r0, #8
   18810:	bl	10c4c <raise@plt>
   18814:	pop	{r1, pc}
   18818:	cmp	r1, r3
   1881c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18820:	cmpeq	r0, r2
   18824:	mov	r4, r0
   18828:	mov	r5, r1
   1882c:	ldr	r9, [sp, #28]
   18830:	movcc	r0, #0
   18834:	movcc	r1, #0
   18838:	bcc	18930 <__assert_fail@plt+0x7aa4>
   1883c:	cmp	r3, #0
   18840:	clzeq	ip, r2
   18844:	clzne	ip, r3
   18848:	addeq	ip, ip, #32
   1884c:	cmp	r5, #0
   18850:	clzeq	r1, r4
   18854:	addeq	r1, r1, #32
   18858:	clzne	r1, r5
   1885c:	sub	ip, ip, r1
   18860:	sub	lr, ip, #32
   18864:	lsl	r7, r3, ip
   18868:	rsb	r8, ip, #32
   1886c:	orr	r7, r7, r2, lsl lr
   18870:	orr	r7, r7, r2, lsr r8
   18874:	lsl	r6, r2, ip
   18878:	cmp	r5, r7
   1887c:	cmpeq	r4, r6
   18880:	movcc	r0, #0
   18884:	movcc	r1, #0
   18888:	bcc	188a4 <__assert_fail@plt+0x7a18>
   1888c:	mov	r3, #1
   18890:	subs	r4, r4, r6
   18894:	lsl	r1, r3, lr
   18898:	lsl	r0, r3, ip
   1889c:	orr	r1, r1, r3, lsr r8
   188a0:	sbc	r5, r5, r7
   188a4:	cmp	ip, #0
   188a8:	beq	18930 <__assert_fail@plt+0x7aa4>
   188ac:	lsrs	r3, r7, #1
   188b0:	rrx	r2, r6
   188b4:	mov	r6, ip
   188b8:	b	188dc <__assert_fail@plt+0x7a50>
   188bc:	subs	r4, r4, r2
   188c0:	sbc	r5, r5, r3
   188c4:	adds	r4, r4, r4
   188c8:	adc	r5, r5, r5
   188cc:	adds	r4, r4, #1
   188d0:	adc	r5, r5, #0
   188d4:	subs	r6, r6, #1
   188d8:	beq	188f8 <__assert_fail@plt+0x7a6c>
   188dc:	cmp	r5, r3
   188e0:	cmpeq	r4, r2
   188e4:	bcs	188bc <__assert_fail@plt+0x7a30>
   188e8:	adds	r4, r4, r4
   188ec:	adc	r5, r5, r5
   188f0:	subs	r6, r6, #1
   188f4:	bne	188dc <__assert_fail@plt+0x7a50>
   188f8:	lsr	r6, r4, ip
   188fc:	lsr	r7, r5, ip
   18900:	orr	r6, r6, r5, lsl r8
   18904:	adds	r2, r0, r4
   18908:	orr	r6, r6, r5, lsr lr
   1890c:	adc	r3, r1, r5
   18910:	lsl	r1, r7, ip
   18914:	orr	r1, r1, r6, lsl lr
   18918:	lsl	r0, r6, ip
   1891c:	orr	r1, r1, r6, lsr r8
   18920:	subs	r0, r2, r0
   18924:	mov	r4, r6
   18928:	mov	r5, r7
   1892c:	sbc	r1, r3, r1
   18930:	cmp	r9, #0
   18934:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18938:	strd	r4, [r9]
   1893c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18940:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18944:	mov	r7, r0
   18948:	ldr	r6, [pc, #72]	; 18998 <__assert_fail@plt+0x7b0c>
   1894c:	ldr	r5, [pc, #72]	; 1899c <__assert_fail@plt+0x7b10>
   18950:	add	r6, pc, r6
   18954:	add	r5, pc, r5
   18958:	sub	r6, r6, r5
   1895c:	mov	r8, r1
   18960:	mov	r9, r2
   18964:	bl	10c14 <calloc@plt-0x20>
   18968:	asrs	r6, r6, #2
   1896c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18970:	mov	r4, #0
   18974:	add	r4, r4, #1
   18978:	ldr	r3, [r5], #4
   1897c:	mov	r2, r9
   18980:	mov	r1, r8
   18984:	mov	r0, r7
   18988:	blx	r3
   1898c:	cmp	r6, r4
   18990:	bne	18974 <__assert_fail@plt+0x7ae8>
   18994:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18998:			; <UNDEFINED> instruction: 0x000115b8
   1899c:			; <UNDEFINED> instruction: 0x000115b0
   189a0:	bx	lr
   189a4:	ldr	r3, [pc, #12]	; 189b8 <__assert_fail@plt+0x7b2c>
   189a8:	mov	r1, #0
   189ac:	add	r3, pc, r3
   189b0:	ldr	r2, [r3]
   189b4:	b	10dcc <__cxa_atexit@plt>
   189b8:	andeq	r1, r1, ip, lsr #14

Disassembly of section .fini:

000189bc <.fini>:
   189bc:	push	{r3, lr}
   189c0:	pop	{r3, pc}
