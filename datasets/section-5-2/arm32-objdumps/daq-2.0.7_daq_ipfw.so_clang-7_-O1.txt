
../repos/daq-2.0.7/os-daq-modules/.libs/daq_ipfw.so:     file format elf32-littlearm


Disassembly of section .init:

000006ec <_init>:
 6ec:	push	{r3, lr}
 6f0:	bl	808 <call_weak_fn>
 6f4:	pop	{r3, pc}

Disassembly of section .plt:

000006f8 <.plt>:
 6f8:	push	{lr}		; (str lr, [sp, #-4]!)
 6fc:	ldr	lr, [pc, #4]	; 708 <.plt+0x10>
 700:	add	lr, pc, lr
 704:	ldr	pc, [lr, #8]!
 708:	.word	0x000118f8

0000070c <calloc@plt>:
 70c:	add	ip, pc, #0, 12
 710:	add	ip, ip, #69632	; 0x11000
 714:	ldr	pc, [ip, #2296]!	; 0x8f8

00000718 <strcmp@plt>:
 718:	add	ip, pc, #0, 12
 71c:	add	ip, ip, #69632	; 0x11000
 720:	ldr	pc, [ip, #2288]!	; 0x8f0

00000724 <__cxa_finalize@plt>:
 724:	add	ip, pc, #0, 12
 728:	add	ip, ip, #69632	; 0x11000
 72c:	ldr	pc, [ip, #2280]!	; 0x8e8

00000730 <strtol@plt>:
 730:	add	ip, pc, #0, 12
 734:	add	ip, ip, #69632	; 0x11000
 738:	ldr	pc, [ip, #2272]!	; 0x8e0

0000073c <free@plt>:
 73c:	add	ip, pc, #0, 12
 740:	add	ip, ip, #69632	; 0x11000
 744:	ldr	pc, [ip, #2264]!	; 0x8d8

00000748 <memcpy@plt>:
 748:	add	ip, pc, #0, 12
 74c:	add	ip, ip, #69632	; 0x11000
 750:	ldr	pc, [ip, #2256]!	; 0x8d0

00000754 <select@plt>:
 754:	add	ip, pc, #0, 12
 758:	add	ip, ip, #69632	; 0x11000
 75c:	ldr	pc, [ip, #2248]!	; 0x8c8

00000760 <recvfrom@plt>:
 760:	add	ip, pc, #0, 12
 764:	add	ip, ip, #69632	; 0x11000
 768:	ldr	pc, [ip, #2240]!	; 0x8c0

0000076c <strdup@plt>:
 76c:	add	ip, pc, #0, 12
 770:	add	ip, ip, #69632	; 0x11000
 774:	ldr	pc, [ip, #2232]!	; 0x8b8

00000778 <gettimeofday@plt>:
 778:	add	ip, pc, #0, 12
 77c:	add	ip, ip, #69632	; 0x11000
 780:	ldr	pc, [ip, #2224]!	; 0x8b0

00000784 <malloc@plt>:
 784:	add	ip, pc, #0, 12
 788:	add	ip, ip, #69632	; 0x11000
 78c:	ldr	pc, [ip, #2216]!	; 0x8a8

00000790 <sfbpf_compile@plt>:
 790:	add	ip, pc, #0, 12
 794:	add	ip, ip, #69632	; 0x11000
 798:	ldr	pc, [ip, #2208]!	; 0x8a0

0000079c <strerror@plt>:
 79c:	add	ip, pc, #0, 12
 7a0:	add	ip, ip, #69632	; 0x11000
 7a4:	ldr	pc, [ip, #2200]!	; 0x898

000007a8 <__gmon_start__@plt>:
 7a8:	add	ip, pc, #0, 12
 7ac:	add	ip, ip, #69632	; 0x11000
 7b0:	ldr	pc, [ip, #2192]!	; 0x890

000007b4 <__errno_location@plt>:
 7b4:	add	ip, pc, #0, 12
 7b8:	add	ip, ip, #69632	; 0x11000
 7bc:	ldr	pc, [ip, #2184]!	; 0x888

000007c0 <snprintf@plt>:
 7c0:	add	ip, pc, #0, 12
 7c4:	add	ip, ip, #69632	; 0x11000
 7c8:	ldr	pc, [ip, #2176]!	; 0x880

000007cc <bind@plt>:
 7cc:	add	ip, pc, #0, 12
 7d0:	add	ip, ip, #69632	; 0x11000
 7d4:	ldr	pc, [ip, #2168]!	; 0x878

000007d8 <sendto@plt>:
 7d8:	add	ip, pc, #0, 12
 7dc:	add	ip, ip, #69632	; 0x11000
 7e0:	ldr	pc, [ip, #2160]!	; 0x870

000007e4 <sfbpf_filter@plt>:
 7e4:	add	ip, pc, #0, 12
 7e8:	add	ip, ip, #69632	; 0x11000
 7ec:	ldr	pc, [ip, #2152]!	; 0x868

000007f0 <socket@plt>:
 7f0:	add	ip, pc, #0, 12
 7f4:	add	ip, ip, #69632	; 0x11000
 7f8:	ldr	pc, [ip, #2144]!	; 0x860

000007fc <close@plt>:
 7fc:	add	ip, pc, #0, 12
 800:	add	ip, ip, #69632	; 0x11000
 804:	ldr	pc, [ip, #2136]!	; 0x858

Disassembly of section .text:

00000808 <call_weak_fn>:
     808:	ldr	r3, [pc, #20]	; 824 <call_weak_fn+0x1c>
     80c:	ldr	r2, [pc, #20]	; 828 <call_weak_fn+0x20>
     810:	add	r3, pc, r3
     814:	ldr	r2, [r3, r2]
     818:	cmp	r2, #0
     81c:	bxeq	lr
     820:	b	7a8 <__gmon_start__@plt>
     824:	.word	0x000117e8
     828:	.word	0x00000068

0000082c <deregister_tm_clones>:
     82c:	ldr	r0, [pc, #44]	; 860 <deregister_tm_clones+0x34>
     830:	ldr	r3, [pc, #44]	; 864 <deregister_tm_clones+0x38>
     834:	add	r0, pc, r0
     838:	add	r3, pc, r3
     83c:	cmp	r3, r0
     840:	ldr	r3, [pc, #32]	; 868 <deregister_tm_clones+0x3c>
     844:	add	r3, pc, r3
     848:	bxeq	lr
     84c:	ldr	r2, [pc, #24]	; 86c <deregister_tm_clones+0x40>
     850:	ldr	r3, [r3, r2]
     854:	cmp	r3, #0
     858:	bxeq	lr
     85c:	bx	r3
     860:	.word	0x000118a0
     864:	.word	0x0001189c
     868:	.word	0x000117b4
     86c:	.word	0x00000064

00000870 <register_tm_clones>:
     870:	ldr	r0, [pc, #56]	; 8b0 <register_tm_clones+0x40>
     874:	ldr	r3, [pc, #56]	; 8b4 <register_tm_clones+0x44>
     878:	add	r0, pc, r0
     87c:	add	r3, pc, r3
     880:	sub	r1, r3, r0
     884:	ldr	r3, [pc, #44]	; 8b8 <register_tm_clones+0x48>
     888:	asr	r1, r1, #2
     88c:	add	r3, pc, r3
     890:	add	r1, r1, r1, lsr #31
     894:	asrs	r1, r1, #1
     898:	bxeq	lr
     89c:	ldr	r2, [pc, #24]	; 8bc <register_tm_clones+0x4c>
     8a0:	ldr	r3, [r3, r2]
     8a4:	cmp	r3, #0
     8a8:	bxeq	lr
     8ac:	bx	r3
     8b0:	.word	0x0001185c
     8b4:	.word	0x00011858
     8b8:	.word	0x0001176c
     8bc:	.word	0x0000006c

000008c0 <__do_global_dtors_aux>:
     8c0:	ldr	r3, [pc, #76]	; 914 <__do_global_dtors_aux+0x54>
     8c4:	ldr	r2, [pc, #76]	; 918 <__do_global_dtors_aux+0x58>
     8c8:	add	r3, pc, r3
     8cc:	add	r2, pc, r2
     8d0:	ldrb	r3, [r3]
     8d4:	cmp	r3, #0
     8d8:	bxne	lr
     8dc:	ldr	r3, [pc, #56]	; 91c <__do_global_dtors_aux+0x5c>
     8e0:	push	{r4, lr}
     8e4:	ldr	r3, [r2, r3]
     8e8:	cmp	r3, #0
     8ec:	beq	8fc <__do_global_dtors_aux+0x3c>
     8f0:	ldr	r3, [pc, #40]	; 920 <__do_global_dtors_aux+0x60>
     8f4:	ldr	r0, [pc, r3]
     8f8:	bl	724 <__cxa_finalize@plt>
     8fc:	bl	82c <deregister_tm_clones>
     900:	ldr	r3, [pc, #28]	; 924 <__do_global_dtors_aux+0x64>
     904:	mov	r2, #1
     908:	add	r3, pc, r3
     90c:	strb	r2, [r3]
     910:	pop	{r4, pc}
     914:	.word	0x00011810
     918:	.word	0x0001172c
     91c:	.word	0x00000060
     920:	.word	0x00011774
     924:	.word	0x000117d0

00000928 <frame_dummy>:
     928:	b	870 <register_tm_clones>

0000092c <ipfw_daq_initialize>:
     92c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     930:	add	fp, sp, #24
     934:	mov	r4, r3
     938:	mov	r6, r2
     93c:	mov	r8, r1
     940:	mov	r7, r0
     944:	mov	r0, #1
     948:	mov	r1, #416	; 0x1a0
     94c:	bl	70c <calloc@plt>
     950:	cmp	r0, #0
     954:	beq	984 <ipfw_daq_initialize+0x58>
     958:	mov	r5, r0
     95c:	mov	r1, r7
     960:	mov	r2, r6
     964:	mov	r3, r4
     968:	bl	f80 <ipfw_daq_get_setup>
     96c:	cmp	r0, #0
     970:	beq	9a8 <ipfw_daq_initialize+0x7c>
     974:	mov	r0, r5
     978:	bl	e90 <ipfw_daq_shutdown>
     97c:	mvn	r0, #0
     980:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     984:	ldr	r2, [pc, #120]	; a04 <ipfw_daq_initialize+0xd8>
     988:	add	r2, pc, r2
     98c:	ldr	r3, [pc, #116]	; a08 <ipfw_daq_initialize+0xdc>
     990:	add	r3, pc, r3
     994:	mov	r0, r6
     998:	mov	r1, r4
     99c:	bl	7c0 <snprintf@plt>
     9a0:	mvn	r0, #1
     9a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     9a8:	ldr	r0, [r5, #24]
     9ac:	bl	784 <malloc@plt>
     9b0:	str	r0, [r5, #28]
     9b4:	cmp	r0, #0
     9b8:	beq	9d8 <ipfw_daq_initialize+0xac>
     9bc:	mov	r0, #1
     9c0:	str	r0, [r5, #316]	; 0x13c
     9c4:	mvn	r0, #0
     9c8:	str	r0, [r5]
     9cc:	str	r5, [r8]
     9d0:	mov	r0, #0
     9d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     9d8:	ldr	r2, [pc, #44]	; a0c <ipfw_daq_initialize+0xe0>
     9dc:	add	r2, pc, r2
     9e0:	ldr	r3, [pc, #40]	; a10 <ipfw_daq_initialize+0xe4>
     9e4:	add	r3, pc, r3
     9e8:	mov	r0, r6
     9ec:	mov	r1, r4
     9f0:	bl	7c0 <snprintf@plt>
     9f4:	mov	r0, r5
     9f8:	bl	e90 <ipfw_daq_shutdown>
     9fc:	mvn	r0, #1
     a00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     a04:	.word	0x00000859
     a08:	.word	0x0000087a
     a0c:	.word	0x00000842
     a10:	.word	0x00000826

00000a14 <ipfw_daq_set_filter>:
     a14:	push	{r4, r5, r6, sl, fp, lr}
     a18:	add	fp, sp, #16
     a1c:	sub	sp, sp, #16
     a20:	mov	r5, r1
     a24:	mov	r4, r0
     a28:	ldr	r0, [r0, #24]
     a2c:	mov	r1, #0
     a30:	mov	r2, #1
     a34:	str	r2, [sp]
     a38:	str	r1, [sp, #4]
     a3c:	add	r2, sp, #8
     a40:	mov	r1, #228	; 0xe4
     a44:	mov	r3, r5
     a48:	bl	790 <sfbpf_compile@plt>
     a4c:	cmp	r0, #0
     a50:	mvnlt	r0, #0
     a54:	sublt	sp, fp, #16
     a58:	poplt	{r4, r5, r6, sl, fp, pc}
     a5c:	ldr	r0, [r4, #32]
     a60:	cmp	r0, #0
     a64:	beq	a6c <ipfw_daq_set_filter+0x58>
     a68:	bl	73c <free@plt>
     a6c:	add	r6, r4, #292	; 0x124
     a70:	ldr	r0, [r4, #296]	; 0x128
     a74:	cmp	r0, #0
     a78:	beq	a80 <ipfw_daq_set_filter+0x6c>
     a7c:	bl	73c <free@plt>
     a80:	mov	r0, r5
     a84:	bl	76c <strdup@plt>
     a88:	str	r0, [r4, #32]
     a8c:	ldr	r0, [sp, #8]
     a90:	ldr	r1, [sp, #12]
     a94:	stm	r6, {r0, r1}
     a98:	mov	r0, #0
     a9c:	sub	sp, fp, #16
     aa0:	pop	{r4, r5, r6, sl, fp, pc}

00000aa4 <ipfw_daq_start>:
     aa4:	push	{r4, sl, fp, lr}
     aa8:	add	fp, sp, #8
     aac:	sub	sp, sp, #8
     ab0:	mov	r4, r0
     ab4:	ldr	r0, [r0, #8]
     ab8:	mov	r1, #3
     abc:	mov	r2, #254	; 0xfe
     ac0:	bl	7f0 <socket@plt>
     ac4:	str	r0, [r4]
     ac8:	cmn	r0, #1
     acc:	beq	b14 <ipfw_daq_start+0x70>
     ad0:	add	r1, r4, #300	; 0x12c
     ad4:	mov	r2, #16
     ad8:	bl	7cc <bind@plt>
     adc:	cmn	r0, #1
     ae0:	movne	r0, #2
     ae4:	strne	r0, [r4, #316]	; 0x13c
     ae8:	movne	r0, #0
     aec:	subne	sp, fp, #8
     af0:	popne	{r4, sl, fp, pc}
     af4:	bl	7b4 <__errno_location@plt>
     af8:	ldr	r0, [r0]
     afc:	bl	79c <strerror@plt>
     b00:	str	r0, [sp]
     b04:	add	r0, r4, #36	; 0x24
     b08:	ldr	r2, [pc, #68]	; b54 <ipfw_daq_start+0xb0>
     b0c:	add	r2, pc, r2
     b10:	b	b30 <ipfw_daq_start+0x8c>
     b14:	bl	7b4 <__errno_location@plt>
     b18:	ldr	r0, [r0]
     b1c:	bl	79c <strerror@plt>
     b20:	str	r0, [sp]
     b24:	add	r0, r4, #36	; 0x24
     b28:	ldr	r2, [pc, #28]	; b4c <ipfw_daq_start+0xa8>
     b2c:	add	r2, pc, r2
     b30:	ldr	r3, [pc, #24]	; b50 <ipfw_daq_start+0xac>
     b34:	add	r3, pc, r3
     b38:	mov	r1, #256	; 0x100
     b3c:	bl	7c0 <snprintf@plt>
     b40:	mvn	r0, #0
     b44:	sub	sp, fp, #8
     b48:	pop	{r4, sl, fp, pc}
     b4c:	.word	0x00000786
     b50:	.word	0x000007a3
     b54:	.word	0x000007da

00000b58 <ipfw_daq_acquire>:
     b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b5c:	add	fp, sp, #28
     b60:	sub	sp, sp, #4
     b64:	vpush	{d8-d9}
     b68:	sub	sp, sp, #248	; 0xf8
     b6c:	str	r2, [sp, #24]
     b70:	mov	r4, r0
     b74:	mov	r7, #0
     b78:	str	r7, [sp, #108]	; 0x6c
     b7c:	cmp	r1, #0
     b80:	mvneq	r1, #0
     b84:	str	r1, [r0, #12]
     b88:	add	r0, r0, #344	; 0x158
     b8c:	str	r0, [sp, #12]
     b90:	add	r0, r4, #336	; 0x150
     b94:	str	r0, [sp, #20]
     b98:	add	r0, r4, #360	; 0x168
     b9c:	str	r0, [sp, #16]
     ba0:	add	sl, r4, #320	; 0x140
     ba4:	add	r0, r4, #300	; 0x12c
     ba8:	str	r0, [sp, #28]
     bac:	vmov.i32	q4, #0	; 0x00000000
     bb0:	add	r6, sp, #112	; 0x70
     bb4:	add	r0, r6, #96	; 0x60
     bb8:	str	r0, [sp, #44]	; 0x2c
     bbc:	add	r0, r6, #80	; 0x50
     bc0:	str	r0, [sp, #40]	; 0x28
     bc4:	add	r0, r6, #64	; 0x40
     bc8:	str	r0, [sp, #36]	; 0x24
     bcc:	add	r0, r6, #48	; 0x30
     bd0:	str	r0, [sp, #32]
     bd4:	add	r9, r6, #32
     bd8:	mov	r8, #1
     bdc:	mov	r0, r6
     be0:	mov	r1, #112	; 0x70
     be4:	vst1.64	{d8-d9}, [r0], r1
     be8:	vst1.64	{d8-d9}, [r0]
     bec:	ldr	r0, [sp, #44]	; 0x2c
     bf0:	vst1.64	{d8-d9}, [r0]
     bf4:	ldr	r0, [sp, #40]	; 0x28
     bf8:	vst1.64	{d8-d9}, [r0]
     bfc:	ldr	r0, [sp, #36]	; 0x24
     c00:	vst1.64	{d8-d9}, [r0]
     c04:	ldr	r0, [sp, #32]
     c08:	vst1.64	{d8-d9}, [r0]
     c0c:	vst1.64	{d8-d9}, [r9]
     c10:	add	r0, r6, #16
     c14:	vst1.64	{d8-d9}, [r0]
     c18:	ldr	r0, [r4]
     c1c:	asr	r1, r0, #31
     c20:	add	r1, r0, r1, lsr #27
     c24:	asr	r1, r1, #5
     c28:	ldr	r2, [r6, r1, lsl #2]
     c2c:	and	r3, r0, #31
     c30:	orr	r2, r2, r8, lsl r3
     c34:	str	r2, [r6, r1, lsl #2]
     c38:	ldr	r1, [r4, #20]
     c3c:	str	r1, [sp, #104]	; 0x68
     c40:	add	r1, sp, #104	; 0x68
     c44:	str	r1, [sp]
     c48:	add	r0, r0, #1
     c4c:	mov	r1, r6
     c50:	mov	r2, #0
     c54:	mov	r3, #0
     c58:	bl	754 <select@plt>
     c5c:	cmn	r0, #1
     c60:	ble	da4 <ipfw_daq_acquire+0x24c>
     c64:	ldr	r0, [r4]
     c68:	asr	r1, r0, #31
     c6c:	add	r1, r0, r1, lsr #27
     c70:	asr	r1, r1, #5
     c74:	ldr	r1, [r6, r1, lsl #2]
     c78:	and	r2, r0, #31
     c7c:	tst	r1, r8, lsl r2
     c80:	beq	d8c <ipfw_daq_acquire+0x234>
     c84:	mov	r1, #16
     c88:	str	r1, [sp, #100]	; 0x64
     c8c:	ldrd	r2, [r4, #24]
     c90:	ldr	r1, [sp, #28]
     c94:	str	r1, [sp]
     c98:	add	r1, sp, #100	; 0x64
     c9c:	str	r1, [sp, #4]
     ca0:	mov	r1, r3
     ca4:	mov	r3, #0
     ca8:	bl	760 <recvfrom@plt>
     cac:	mov	r5, r0
     cb0:	cmn	r0, #1
     cb4:	bne	cc8 <ipfw_daq_acquire+0x170>
     cb8:	bl	7b4 <__errno_location@plt>
     cbc:	ldr	r0, [r0]
     cc0:	cmp	r0, #4
     cc4:	bne	dd4 <ipfw_daq_acquire+0x27c>
     cc8:	add	r0, sp, #48	; 0x30
     ccc:	mov	r1, r5
     cd0:	bl	10f0 <SetPktHdr>
     cd4:	ldrd	r0, [sl]
     cd8:	adds	r0, r0, #1
     cdc:	adc	r1, r1, #0
     ce0:	strd	r0, [sl]
     ce4:	ldr	r0, [r4, #296]	; 0x128
     ce8:	cmp	r0, #0
     cec:	beq	d08 <ipfw_daq_acquire+0x1b0>
     cf0:	ldr	r1, [r4, #28]
     cf4:	ldr	r2, [sp, #56]	; 0x38
     cf8:	mov	r3, r2
     cfc:	bl	7e4 <sfbpf_filter@plt>
     d00:	cmp	r0, #0
     d04:	beq	d48 <ipfw_daq_acquire+0x1f0>
     d08:	ldr	r2, [r4, #28]
     d0c:	mov	r0, #0
     d10:	add	r1, sp, #48	; 0x30
     d14:	ldr	r3, [sp, #24]
     d18:	blx	r3
     d1c:	cmp	r0, #6
     d20:	movwhi	r0, #1
     d24:	ldr	r1, [sp, #16]
     d28:	ldr	r2, [r1, r0, lsl #3]!
     d2c:	adds	r2, r2, #1
     d30:	str	r2, [r1]
     d34:	ldr	r2, [r1, #4]
     d38:	adc	r2, r2, #0
     d3c:	str	r2, [r1, #4]
     d40:	ldr	r1, [sp, #20]
     d44:	b	d50 <ipfw_daq_acquire+0x1f8>
     d48:	mov	r0, #0
     d4c:	ldr	r1, [sp, #12]
     d50:	ldrd	r2, [r1]
     d54:	adds	r2, r2, #1
     d58:	adc	r3, r3, #0
     d5c:	strd	r2, [r1]
     d60:	ldr	r1, [r4, #16]
     d64:	cmp	r1, #0
     d68:	bne	d78 <ipfw_daq_acquire+0x220>
     d6c:	mov	r1, #45	; 0x2d
     d70:	tst	r8, r1, lsr r0
     d74:	beq	d88 <ipfw_daq_acquire+0x230>
     d78:	ldr	r1, [r4, #28]
     d7c:	ldr	r2, [sp, #60]	; 0x3c
     d80:	mov	r0, r4
     d84:	bl	1164 <ipfw_daq_forward>
     d88:	add	r7, r7, #1
     d8c:	ldr	r0, [r4, #12]
     d90:	cmp	r0, #0
     d94:	cmpge	r7, r0
     d98:	blt	bdc <ipfw_daq_acquire+0x84>
     d9c:	mov	r0, #0
     da0:	b	dfc <ipfw_daq_acquire+0x2a4>
     da4:	bl	7b4 <__errno_location@plt>
     da8:	ldr	r1, [r0]
     dac:	mov	r0, #0
     db0:	cmp	r1, #4
     db4:	beq	dfc <ipfw_daq_acquire+0x2a4>
     db8:	mov	r0, r1
     dbc:	bl	79c <strerror@plt>
     dc0:	str	r0, [sp]
     dc4:	add	r0, r4, #36	; 0x24
     dc8:	ldr	r2, [pc, #60]	; e0c <ipfw_daq_acquire+0x2b4>
     dcc:	add	r2, pc, r2
     dd0:	b	de8 <ipfw_daq_acquire+0x290>
     dd4:	bl	79c <strerror@plt>
     dd8:	str	r0, [sp]
     ddc:	add	r0, r4, #36	; 0x24
     de0:	ldr	r2, [pc, #40]	; e10 <ipfw_daq_acquire+0x2b8>
     de4:	add	r2, pc, r2
     de8:	ldr	r3, [pc, #36]	; e14 <ipfw_daq_acquire+0x2bc>
     dec:	add	r3, pc, r3
     df0:	mov	r1, #256	; 0x100
     df4:	bl	7c0 <snprintf@plt>
     df8:	mvn	r0, #0
     dfc:	sub	sp, fp, #48	; 0x30
     e00:	vpop	{d8-d9}
     e04:	add	sp, sp, #4
     e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e0c:	.word	0x0000053d
     e10:	.word	0x0000055b
     e14:	.word	0x00000542

00000e18 <ipfw_daq_inject>:
     e18:	push	{r4, sl, fp, lr}
     e1c:	add	fp, sp, #8
     e20:	mov	r1, r2
     e24:	mov	r4, r0
     e28:	mov	r2, r3
     e2c:	bl	1164 <ipfw_daq_forward>
     e30:	cmp	r0, #0
     e34:	popne	{r4, sl, fp, pc}
     e38:	ldr	r1, [r4, #352]	; 0x160
     e3c:	ldr	r2, [r4, #356]	; 0x164
     e40:	adds	r1, r1, #1
     e44:	adc	r2, r2, #0
     e48:	str	r1, [r4, #352]	; 0x160
     e4c:	str	r2, [r4, #356]	; 0x164
     e50:	pop	{r4, sl, fp, pc}

00000e54 <ipfw_daq_breakloop>:
     e54:	mov	r1, #0
     e58:	str	r1, [r0, #12]
     e5c:	mov	r0, #0
     e60:	bx	lr

00000e64 <ipfw_daq_stop>:
     e64:	push	{r4, sl, fp, lr}
     e68:	add	fp, sp, #8
     e6c:	mov	r4, r0
     e70:	ldr	r0, [r0]
     e74:	bl	7fc <close@plt>
     e78:	mvn	r0, #0
     e7c:	str	r0, [r4]
     e80:	mov	r0, #3
     e84:	str	r0, [r4, #316]	; 0x13c
     e88:	mov	r0, #0
     e8c:	pop	{r4, sl, fp, pc}

00000e90 <ipfw_daq_shutdown>:
     e90:	push	{r4, sl, fp, lr}
     e94:	add	fp, sp, #8
     e98:	mov	r4, r0
     e9c:	ldr	r0, [r0, #32]
     ea0:	cmp	r0, #0
     ea4:	beq	eac <ipfw_daq_shutdown+0x1c>
     ea8:	bl	73c <free@plt>
     eac:	ldr	r0, [r4, #28]
     eb0:	cmp	r0, #0
     eb4:	beq	ebc <ipfw_daq_shutdown+0x2c>
     eb8:	bl	73c <free@plt>
     ebc:	mov	r0, r4
     ec0:	pop	{r4, sl, fp, lr}
     ec4:	b	73c <free@plt>

00000ec8 <ipfw_daq_check_status>:
     ec8:	ldr	r0, [r0, #316]	; 0x13c
     ecc:	bx	lr

00000ed0 <ipfw_daq_get_stats>:
     ed0:	push	{fp, lr}
     ed4:	mov	fp, sp
     ed8:	mov	r2, r1
     edc:	add	r1, r0, #320	; 0x140
     ee0:	mov	r0, r2
     ee4:	mov	r2, #96	; 0x60
     ee8:	bl	748 <memcpy@plt>
     eec:	mov	r0, #0
     ef0:	pop	{fp, pc}

00000ef4 <ipfw_daq_reset_stats>:
     ef4:	vmov.i32	q8, #0	; 0x00000000
     ef8:	add	r1, r0, #400	; 0x190
     efc:	vst1.64	{d16-d17}, [r1]
     f00:	add	r1, r0, #384	; 0x180
     f04:	vst1.64	{d16-d17}, [r1]
     f08:	add	r1, r0, #368	; 0x170
     f0c:	vst1.64	{d16-d17}, [r1]
     f10:	add	r1, r0, #352	; 0x160
     f14:	vst1.64	{d16-d17}, [r1]
     f18:	add	r1, r0, #336	; 0x150
     f1c:	vst1.64	{d16-d17}, [r1]
     f20:	add	r0, r0, #320	; 0x140
     f24:	vst1.64	{d16-d17}, [r0]
     f28:	bx	lr

00000f2c <ipfw_daq_get_snaplen>:
     f2c:	ldr	r0, [r0, #24]
     f30:	bx	lr

00000f34 <ipfw_daq_get_capabilities>:
     f34:	movw	r0, #743	; 0x2e7
     f38:	bx	lr

00000f3c <ipfw_daq_get_datalink_type>:
     f3c:	mov	r0, #228	; 0xe4
     f40:	bx	lr

00000f44 <ipfw_daq_get_errbuf>:
     f44:	add	r0, r0, #36	; 0x24
     f48:	bx	lr

00000f4c <ipfw_daq_set_errbuf>:
     f4c:	ldr	r3, [pc, #28]	; f70 <ipfw_daq_set_errbuf+0x24>
     f50:	add	r3, pc, r3
     f54:	cmp	r1, #0
     f58:	movne	r3, r1
     f5c:	add	r0, r0, #36	; 0x24
     f60:	ldr	r2, [pc, #12]	; f74 <ipfw_daq_set_errbuf+0x28>
     f64:	add	r2, pc, r2
     f68:	mov	r1, #256	; 0x100
     f6c:	b	7c0 <snprintf@plt>
     f70:	.word	0x00000314
     f74:	.word	0x00000438

00000f78 <ipfw_daq_get_device_index>:
     f78:	mvn	r0, #3
     f7c:	bx	lr

00000f80 <ipfw_daq_get_setup>:
     f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f84:	add	fp, sp, #28
     f88:	sub	sp, sp, #20
     f8c:	str	r3, [sp, #12]
     f90:	str	r2, [sp, #8]
     f94:	mov	r7, r1
     f98:	mov	r5, r0
     f9c:	mov	r0, #8000	; 0x1f40
     fa0:	mov	r1, #2
     fa4:	stmib	r5, {r0, r1}
     fa8:	ldr	r8, [r7, #20]
     fac:	cmp	r8, #0
     fb0:	beq	102c <ipfw_daq_get_setup+0xac>
     fb4:	ldr	r4, [pc, #280]	; 10d4 <ipfw_daq_get_setup+0x154>
     fb8:	add	r4, pc, r4
     fbc:	movw	r9, #65534	; 0xfffe
     fc0:	ldr	sl, [r8, #4]
     fc4:	cmp	sl, #0
     fc8:	ldrbne	r0, [sl]
     fcc:	cmpne	r0, #0
     fd0:	beq	107c <ipfw_daq_get_setup+0xfc>
     fd4:	ldr	r6, [r8]
     fd8:	mov	r0, r6
     fdc:	mov	r1, r4
     fe0:	bl	718 <strcmp@plt>
     fe4:	cmp	r0, #0
     fe8:	bne	1090 <ipfw_daq_get_setup+0x110>
     fec:	ldr	r0, [r8, #4]
     ff0:	str	r0, [sp, #16]
     ff4:	add	r1, sp, #16
     ff8:	mov	r2, #0
     ffc:	bl	730 <strtol@plt>
    1000:	str	r0, [r5, #4]
    1004:	sub	r0, r0, #1
    1008:	cmp	r0, r9
    100c:	bhi	10a0 <ipfw_daq_get_setup+0x120>
    1010:	ldr	r0, [sp, #16]
    1014:	ldrb	r0, [r0]
    1018:	cmp	r0, #0
    101c:	bne	10a0 <ipfw_daq_get_setup+0x120>
    1020:	ldr	r8, [r8, #8]
    1024:	cmp	r8, #0
    1028:	bne	fc0 <ipfw_daq_get_setup+0x40>
    102c:	ldr	r0, [r7, #4]
    1030:	cmp	r0, #0
    1034:	movweq	r0, #65535	; 0xffff
    1038:	str	r0, [r5, #24]
    103c:	ldr	r0, [r7, #8]
    1040:	str	r0, [r5, #20]
    1044:	ldr	r0, [r7, #12]
    1048:	ldr	r1, [r5, #8]
    104c:	mov	r2, #300	; 0x12c
    1050:	strh	r1, [r5, r2]
    1054:	mov	r4, #0
    1058:	str	r4, [r5, #304]	; 0x130
    105c:	clz	r0, r0
    1060:	lsr	r0, r0, #5
    1064:	str	r0, [r5, #16]
    1068:	ldrh	r0, [r5, #4]
    106c:	bl	10e8 <__bswap_16>
    1070:	movw	r1, #302	; 0x12e
    1074:	strh	r0, [r5, r1]
    1078:	b	10c8 <ipfw_daq_get_setup+0x148>
    107c:	ldr	r0, [r8]
    1080:	str	r0, [sp]
    1084:	ldr	r2, [pc, #76]	; 10d8 <ipfw_daq_get_setup+0x158>
    1088:	add	r2, pc, r2
    108c:	b	10b0 <ipfw_daq_get_setup+0x130>
    1090:	stm	sp, {r6, sl}
    1094:	ldr	r2, [pc, #72]	; 10e4 <ipfw_daq_get_setup+0x164>
    1098:	add	r2, pc, r2
    109c:	b	10b0 <ipfw_daq_get_setup+0x130>
    10a0:	ldr	r0, [r8, #4]
    10a4:	str	r0, [sp]
    10a8:	ldr	r2, [pc, #48]	; 10e0 <ipfw_daq_get_setup+0x160>
    10ac:	add	r2, pc, r2
    10b0:	ldr	r3, [pc, #36]	; 10dc <ipfw_daq_get_setup+0x15c>
    10b4:	add	r3, pc, r3
    10b8:	ldr	r0, [sp, #8]
    10bc:	ldr	r1, [sp, #12]
    10c0:	bl	7c0 <snprintf@plt>
    10c4:	mvn	r4, #0
    10c8:	mov	r0, r4
    10cc:	sub	sp, fp, #28
    10d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10d4:	.word	0x000002c0
    10d8:	.word	0x000001be
    10dc:	.word	0x000001b1
    10e0:	.word	0x000001d1
    10e4:	.word	0x000001f8

000010e8 <__bswap_16>:
    10e8:	rev16	r0, r0
    10ec:	bx	lr

000010f0 <SetPktHdr>:
    10f0:	push	{r4, r5, r6, r7, fp, lr}
    10f4:	add	fp, sp, #16
    10f8:	mov	r4, r1
    10fc:	mov	r5, r0
    1100:	ldr	r6, [pc, #84]	; 115c <SetPktHdr+0x6c>
    1104:	add	r6, pc, r6
    1108:	mov	r7, #0
    110c:	str	r7, [r6]
    1110:	str	r7, [r6, #4]
    1114:	mov	r0, r6
    1118:	mov	r1, #0
    111c:	bl	778 <gettimeofday@plt>
    1120:	ldr	r0, [pc, #56]	; 1160 <SetPktHdr+0x70>
    1124:	ldr	r0, [pc, r0]
    1128:	str	r0, [r5]
    112c:	ldr	r0, [r6, #4]
    1130:	str	r4, [r5, #12]
    1134:	str	r4, [r5, #8]
    1138:	mvn	r1, #0
    113c:	str	r1, [r5, #28]
    1140:	str	r1, [r5, #24]
    1144:	str	r1, [r5, #20]
    1148:	str	r1, [r5, #16]
    114c:	str	r7, [r5, #32]
    1150:	strh	r7, [r5, #48]	; 0x30
    1154:	str	r0, [r5, #4]
    1158:	pop	{r4, r5, r6, r7, fp, pc}
    115c:	.word	0x00010fdc
    1160:	.word	0x00010fbc

00001164 <ipfw_daq_forward>:
    1164:	push	{r4, r5, fp, lr}
    1168:	add	fp, sp, #8
    116c:	sub	sp, sp, #8
    1170:	mov	r4, r0
    1174:	mov	r3, r0
    1178:	ldr	r0, [r3], #300	; 0x12c
    117c:	mov	r5, #16
    1180:	stm	sp, {r3, r5}
    1184:	mov	r5, #0
    1188:	mov	r3, #0
    118c:	bl	7d8 <sendto@plt>
    1190:	cmn	r0, #1
    1194:	bne	11c8 <ipfw_daq_forward+0x64>
    1198:	bl	7b4 <__errno_location@plt>
    119c:	ldr	r0, [r0]
    11a0:	bl	79c <strerror@plt>
    11a4:	str	r0, [sp]
    11a8:	add	r0, r4, #36	; 0x24
    11ac:	ldr	r2, [pc, #32]	; 11d4 <ipfw_daq_forward+0x70>
    11b0:	add	r2, pc, r2
    11b4:	ldr	r3, [pc, #28]	; 11d8 <ipfw_daq_forward+0x74>
    11b8:	add	r3, pc, r3
    11bc:	mov	r1, #256	; 0x100
    11c0:	bl	7c0 <snprintf@plt>
    11c4:	mvn	r5, #0
    11c8:	mov	r0, r5
    11cc:	sub	sp, fp, #8
    11d0:	pop	{r4, r5, fp, pc}
    11d4:	.word	0x000001b6
    11d8:	.word	0x000001d3

Disassembly of section .fini:

000011dc <_fini>:
    11dc:	push	{r3, lr}
    11e0:	pop	{r3, pc}
