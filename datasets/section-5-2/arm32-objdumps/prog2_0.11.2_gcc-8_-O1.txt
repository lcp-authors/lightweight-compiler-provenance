
../repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

00010660 <.init>:
   10660:	push	{r3, lr}
   10664:	bl	10728 <_start@@Base+0x3c>
   10668:	pop	{r3, pc}

Disassembly of section .plt:

0001066c <strcmp@plt-0x14>:
   1066c:	push	{lr}		; (str lr, [sp, #-4]!)
   10670:	ldr	lr, [pc, #4]	; 1067c <strcmp@plt-0x4>
   10674:	add	lr, pc, lr
   10678:	ldr	pc, [lr, #8]!
   1067c:	andeq	r0, r1, r4, lsl #19

00010680 <strcmp@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2436]!	; 0x984

0001068c <strcat@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2428]!	; 0x97c

00010698 <strcpy@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2420]!	; 0x974

000106a4 <puts@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2412]!	; 0x96c

000106b0 <__libc_start_main@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2404]!	; 0x964

000106bc <__gmon_start__@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2396]!	; 0x95c

000106c8 <strlen@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2388]!	; 0x954

000106d4 <__isoc99_scanf@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2380]!	; 0x94c

000106e0 <abort@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2372]!	; 0x944

Disassembly of section .text:

000106ec <_start@@Base>:
   106ec:	mov	fp, #0
   106f0:	mov	lr, #0
   106f4:	pop	{r1}		; (ldr r1, [sp], #4)
   106f8:	mov	r2, sp
   106fc:	push	{r2}		; (str r2, [sp, #-4]!)
   10700:	push	{r0}		; (str r0, [sp, #-4]!)
   10704:	ldr	ip, [pc, #16]	; 1071c <_start@@Base+0x30>
   10708:	push	{ip}		; (str ip, [sp, #-4]!)
   1070c:	ldr	r0, [pc, #12]	; 10720 <_start@@Base+0x34>
   10710:	ldr	r3, [pc, #12]	; 10724 <_start@@Base+0x38>
   10714:	bl	106b0 <__libc_start_main@plt>
   10718:	bl	106e0 <abort@plt>
   1071c:	andeq	r0, r1, r0, ror #20
   10720:	andeq	r0, r1, r4, lsl r9
   10724:	andeq	r0, r1, r0, lsl #20
   10728:	ldr	r3, [pc, #20]	; 10744 <_start@@Base+0x58>
   1072c:	ldr	r2, [pc, #20]	; 10748 <_start@@Base+0x5c>
   10730:	add	r3, pc, r3
   10734:	ldr	r2, [r3, r2]
   10738:	cmp	r2, #0
   1073c:	bxeq	lr
   10740:	b	106bc <__gmon_start__@plt>
   10744:	andeq	r0, r1, r8, asr #17
   10748:	andeq	r0, r0, r0, lsr r0
   1074c:	ldr	r0, [pc, #24]	; 1076c <_start@@Base+0x80>
   10750:	ldr	r3, [pc, #24]	; 10770 <_start@@Base+0x84>
   10754:	cmp	r3, r0
   10758:	bxeq	lr
   1075c:	ldr	r3, [pc, #16]	; 10774 <_start@@Base+0x88>
   10760:	cmp	r3, #0
   10764:	bxeq	lr
   10768:	bx	r3
   1076c:	andeq	r1, r2, ip, lsr r0
   10770:	andeq	r1, r2, ip, lsr r0
   10774:	andeq	r0, r0, r0
   10778:	ldr	r0, [pc, #36]	; 107a4 <_start@@Base+0xb8>
   1077c:	ldr	r1, [pc, #36]	; 107a8 <_start@@Base+0xbc>
   10780:	sub	r1, r1, r0
   10784:	asr	r1, r1, #2
   10788:	add	r1, r1, r1, lsr #31
   1078c:	asrs	r1, r1, #1
   10790:	bxeq	lr
   10794:	ldr	r3, [pc, #16]	; 107ac <_start@@Base+0xc0>
   10798:	cmp	r3, #0
   1079c:	bxeq	lr
   107a0:	bx	r3
   107a4:	andeq	r1, r2, ip, lsr r0
   107a8:	andeq	r1, r2, ip, lsr r0
   107ac:	andeq	r0, r0, r0
   107b0:	push	{r4, lr}
   107b4:	ldr	r4, [pc, #24]	; 107d4 <_start@@Base+0xe8>
   107b8:	ldrb	r3, [r4]
   107bc:	cmp	r3, #0
   107c0:	popne	{r4, pc}
   107c4:	bl	1074c <_start@@Base+0x60>
   107c8:	mov	r3, #1
   107cc:	strb	r3, [r4]
   107d0:	pop	{r4, pc}
   107d4:	andeq	r1, r2, ip, lsr r0
   107d8:	b	10778 <_start@@Base+0x8c>

000107dc <R_ShiftString@@Base>:
   107dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   107e0:	strd	r6, [sp, #8]
   107e4:	str	r8, [sp, #16]
   107e8:	str	lr, [sp, #20]
   107ec:	mov	r7, r0
   107f0:	mov	r8, r1
   107f4:	bl	106c8 <strlen@plt>
   107f8:	add	r0, r7, r0
   107fc:	ldrb	r3, [r0, #-1]
   10800:	strb	r3, [r8]
   10804:	sub	r6, r7, #1
   10808:	mov	r5, r8
   1080c:	mov	r4, #1
   10810:	mov	r0, r7
   10814:	bl	106c8 <strlen@plt>
   10818:	cmp	r0, r4
   1081c:	bls	10830 <R_ShiftString@@Base+0x54>
   10820:	ldrb	r3, [r6, #1]!
   10824:	strb	r3, [r5, #1]!
   10828:	add	r4, r4, #1
   1082c:	b	10810 <R_ShiftString@@Base+0x34>
   10830:	mov	r2, #0
   10834:	strb	r2, [r8, r4]
   10838:	ldrd	r4, [sp]
   1083c:	ldrd	r6, [sp, #8]
   10840:	ldr	r8, [sp, #16]
   10844:	add	sp, sp, #20
   10848:	pop	{pc}		; (ldr pc, [sp], #4)

0001084c <L_ShiftString@@Base>:
   1084c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10850:	strd	r6, [sp, #8]
   10854:	str	r8, [sp, #16]
   10858:	str	lr, [sp, #20]
   1085c:	mov	r7, r0
   10860:	mov	r8, r1
   10864:	bl	106c8 <strlen@plt>
   10868:	ldrb	r3, [r7]
   1086c:	add	r0, r8, r0
   10870:	strb	r3, [r0, #-1]
   10874:	mov	r6, r7
   10878:	sub	r5, r8, #1
   1087c:	mov	r4, #1
   10880:	mov	r0, r7
   10884:	bl	106c8 <strlen@plt>
   10888:	cmp	r0, r4
   1088c:	bls	108a0 <L_ShiftString@@Base+0x54>
   10890:	ldrb	r3, [r6, #1]!
   10894:	strb	r3, [r5, #1]!
   10898:	add	r4, r4, #1
   1089c:	b	10880 <L_ShiftString@@Base+0x34>
   108a0:	mov	r2, #0
   108a4:	strb	r2, [r8, r4]
   108a8:	ldrd	r4, [sp]
   108ac:	ldrd	r6, [sp, #8]
   108b0:	ldr	r8, [sp, #16]
   108b4:	add	sp, sp, #20
   108b8:	pop	{pc}		; (ldr pc, [sp], #4)

000108bc <StringSet@@Base>:
   108bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   108c0:	strd	r6, [sp, #8]
   108c4:	str	r8, [sp, #16]
   108c8:	str	lr, [sp, #20]
   108cc:	mov	r3, #0
   108d0:	strb	r3, [r1]
   108d4:	subs	r7, r2, #0
   108d8:	ble	10900 <StringSet@@Base+0x44>
   108dc:	mov	r5, r1
   108e0:	mov	r6, r0
   108e4:	mov	r4, r3
   108e8:	mov	r1, r6
   108ec:	mov	r0, r5
   108f0:	bl	1068c <strcat@plt>
   108f4:	add	r4, r4, #1
   108f8:	cmp	r7, r4
   108fc:	bne	108e8 <StringSet@@Base+0x2c>
   10900:	ldrd	r4, [sp]
   10904:	ldrd	r6, [sp, #8]
   10908:	ldr	r8, [sp, #16]
   1090c:	add	sp, sp, #20
   10910:	pop	{pc}		; (ldr pc, [sp], #4)

00010914 <main@@Base>:
   10914:	strd	r4, [sp, #-12]!
   10918:	str	lr, [sp, #8]
   1091c:	sub	sp, sp, #108	; 0x6c
   10920:	mov	r3, #0
   10924:	str	r3, [sp, #64]	; 0x40
   10928:	str	r3, [sp, #68]	; 0x44
   1092c:	str	r3, [sp, #72]	; 0x48
   10930:	str	r3, [sp, #76]	; 0x4c
   10934:	str	r3, [sp, #80]	; 0x50
   10938:	str	r3, [sp, #84]	; 0x54
   1093c:	strh	r3, [sp, #88]	; 0x58
   10940:	movw	r4, #2672	; 0xa70
   10944:	movt	r4, #1
   10948:	movw	r5, #2676	; 0xa74
   1094c:	movt	r5, #1
   10950:	b	109a8 <main@@Base+0x94>
   10954:	add	r0, sp, #64	; 0x40
   10958:	bl	106a4 <puts@plt>
   1095c:	add	r1, sp, #64	; 0x40
   10960:	add	r0, sp, #8
   10964:	bl	10698 <strcpy@plt>
   10968:	add	r1, sp, #64	; 0x40
   1096c:	add	r0, sp, #8
   10970:	bl	1084c <L_ShiftString@@Base>
   10974:	add	r1, sp, #36	; 0x24
   10978:	add	r0, sp, #64	; 0x40
   1097c:	bl	10680 <strcmp@plt>
   10980:	cmp	r0, #0
   10984:	bne	10954 <main@@Base+0x40>
   10988:	add	r0, sp, #64	; 0x40
   1098c:	bl	106a4 <puts@plt>
   10990:	add	r1, sp, #64	; 0x40
   10994:	add	r0, sp, #8
   10998:	bl	10698 <strcpy@plt>
   1099c:	add	r1, sp, #64	; 0x40
   109a0:	add	r0, sp, #8
   109a4:	bl	1084c <L_ShiftString@@Base>
   109a8:	add	r1, sp, #92	; 0x5c
   109ac:	mov	r0, r4
   109b0:	bl	106d4 <__isoc99_scanf@plt>
   109b4:	ldrb	r3, [sp, #92]	; 0x5c
   109b8:	cmp	r3, #46	; 0x2e
   109bc:	beq	109ec <main@@Base+0xd8>
   109c0:	add	r1, sp, #4
   109c4:	mov	r0, r5
   109c8:	bl	106d4 <__isoc99_scanf@plt>
   109cc:	ldr	r2, [sp, #4]
   109d0:	add	r1, sp, #64	; 0x40
   109d4:	add	r0, sp, #92	; 0x5c
   109d8:	bl	108bc <StringSet@@Base>
   109dc:	add	r1, sp, #36	; 0x24
   109e0:	add	r0, sp, #64	; 0x40
   109e4:	bl	107dc <R_ShiftString@@Base>
   109e8:	b	10974 <main@@Base+0x60>
   109ec:	mov	r0, #0
   109f0:	add	sp, sp, #108	; 0x6c
   109f4:	ldrd	r4, [sp]
   109f8:	add	sp, sp, #8
   109fc:	pop	{pc}		; (ldr pc, [sp], #4)

00010a00 <__libc_csu_init@@Base>:
   10a00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a04:	mov	r7, r0
   10a08:	ldr	r6, [pc, #72]	; 10a58 <__libc_csu_init@@Base+0x58>
   10a0c:	ldr	r5, [pc, #72]	; 10a5c <__libc_csu_init@@Base+0x5c>
   10a10:	add	r6, pc, r6
   10a14:	add	r5, pc, r5
   10a18:	sub	r6, r6, r5
   10a1c:	mov	r8, r1
   10a20:	mov	r9, r2
   10a24:	bl	10660 <strcmp@plt-0x20>
   10a28:	asrs	r6, r6, #2
   10a2c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a30:	mov	r4, #0
   10a34:	add	r4, r4, #1
   10a38:	ldr	r3, [r5], #4
   10a3c:	mov	r2, r9
   10a40:	mov	r1, r8
   10a44:	mov	r0, r7
   10a48:	blx	r3
   10a4c:	cmp	r6, r4
   10a50:	bne	10a34 <__libc_csu_init@@Base+0x34>
   10a54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a58:	strdeq	r0, [r1], -ip
   10a5c:	strdeq	r0, [r1], -r4

00010a60 <__libc_csu_fini@@Base>:
   10a60:	bx	lr

Disassembly of section .fini:

00010a64 <.fini>:
   10a64:	push	{r3, lr}
   10a68:	pop	{r3, pc}
