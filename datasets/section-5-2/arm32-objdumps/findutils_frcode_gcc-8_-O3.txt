
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010b1c <.init>:
   10b1c:	push	{r3, lr}
   10b20:	bl	112d0 <__assert_fail@plt+0x584>
   10b24:	pop	{r3, pc}

Disassembly of section .plt:

00010b28 <calloc@plt-0x14>:
   10b28:	push	{lr}		; (str lr, [sp, #-4]!)
   10b2c:	ldr	lr, [pc, #4]	; 10b38 <calloc@plt-0x4>
   10b30:	add	lr, pc, lr
   10b34:	ldr	pc, [lr, #8]!
   10b38:	andeq	r6, r1, r8, asr #9

00010b3c <calloc@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #90112	; 0x16000
   10b44:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b48 <strcmp@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #90112	; 0x16000
   10b50:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b54 <strtol@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #90112	; 0x16000
   10b5c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b60 <printf@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #90112	; 0x16000
   10b68:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b6c <fflush@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #90112	; 0x16000
   10b74:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b78 <free@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #90112	; 0x16000
   10b80:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b84 <ferror@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #90112	; 0x16000
   10b8c:	ldr	pc, [ip, #1176]!	; 0x498

00010b90 <_exit@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #90112	; 0x16000
   10b98:	ldr	pc, [ip, #1168]!	; 0x490

00010b9c <memcpy@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #90112	; 0x16000
   10ba4:	ldr	pc, [ip, #1160]!	; 0x488

00010ba8 <mbsinit@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #90112	; 0x16000
   10bb0:	ldr	pc, [ip, #1152]!	; 0x480

00010bb4 <memcmp@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #90112	; 0x16000
   10bbc:	ldr	pc, [ip, #1144]!	; 0x478

00010bc0 <dcgettext@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #90112	; 0x16000
   10bc8:	ldr	pc, [ip, #1136]!	; 0x470

00010bcc <realloc@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #90112	; 0x16000
   10bd4:	ldr	pc, [ip, #1128]!	; 0x468

00010bd8 <iswprint@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #90112	; 0x16000
   10be0:	ldr	pc, [ip, #1120]!	; 0x460

00010be4 <fwrite@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #90112	; 0x16000
   10bec:	ldr	pc, [ip, #1112]!	; 0x458

00010bf0 <lseek64@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #90112	; 0x16000
   10bf8:	ldr	pc, [ip, #1104]!	; 0x450

00010bfc <__ctype_get_mb_cur_max@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #90112	; 0x16000
   10c04:	ldr	pc, [ip, #1096]!	; 0x448

00010c08 <__fpending@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #90112	; 0x16000
   10c10:	ldr	pc, [ip, #1088]!	; 0x440

00010c14 <mbrtowc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #90112	; 0x16000
   10c1c:	ldr	pc, [ip, #1080]!	; 0x438

00010c20 <error@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #90112	; 0x16000
   10c28:	ldr	pc, [ip, #1072]!	; 0x430

00010c2c <malloc@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #90112	; 0x16000
   10c34:	ldr	pc, [ip, #1064]!	; 0x428

00010c38 <__libc_start_main@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #90112	; 0x16000
   10c40:	ldr	pc, [ip, #1056]!	; 0x420

00010c44 <__freading@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #90112	; 0x16000
   10c4c:	ldr	pc, [ip, #1048]!	; 0x418

00010c50 <__gmon_start__@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #90112	; 0x16000
   10c58:	ldr	pc, [ip, #1040]!	; 0x410

00010c5c <getopt_long@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #90112	; 0x16000
   10c64:	ldr	pc, [ip, #1032]!	; 0x408

00010c68 <__ctype_b_loc@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #90112	; 0x16000
   10c70:	ldr	pc, [ip, #1024]!	; 0x400

00010c74 <exit@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #90112	; 0x16000
   10c7c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c80 <strlen@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #90112	; 0x16000
   10c88:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c8c <fprintf@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #90112	; 0x16000
   10c94:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c98 <__errno_location@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #90112	; 0x16000
   10ca0:	ldr	pc, [ip, #992]!	; 0x3e0

00010ca4 <__cxa_atexit@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #90112	; 0x16000
   10cac:	ldr	pc, [ip, #984]!	; 0x3d8

00010cb0 <memset@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #90112	; 0x16000
   10cb8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cbc <fileno@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #90112	; 0x16000
   10cc4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cc8 <fclose@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #90112	; 0x16000
   10cd0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cd4 <fseeko64@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #90112	; 0x16000
   10cdc:	ldr	pc, [ip, #952]!	; 0x3b8

00010ce0 <setlocale@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #90112	; 0x16000
   10ce8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cec <strrchr@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #90112	; 0x16000
   10cf4:	ldr	pc, [ip, #936]!	; 0x3a8

00010cf8 <nl_langinfo@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #90112	; 0x16000
   10d00:	ldr	pc, [ip, #928]!	; 0x3a0

00010d04 <fputc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #920]!	; 0x398

00010d10 <putc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #912]!	; 0x390

00010d1c <getdelim@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #904]!	; 0x388

00010d28 <fputs@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #896]!	; 0x380

00010d34 <strncmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #888]!	; 0x378

00010d40 <abort@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #880]!	; 0x370

00010d4c <__assert_fail@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #872]!	; 0x368

Disassembly of section .text:

00010d58 <.text>:
   10d58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d5c:	strd	r6, [sp, #8]
   10d60:	mov	r7, r1
   10d64:	strd	r8, [sp, #16]
   10d68:	strd	sl, [sp, #24]
   10d6c:	str	lr, [sp, #32]
   10d70:	sub	sp, sp, #44	; 0x2c
   10d74:	str	r0, [sp, #12]
   10d78:	ldr	r0, [r1]
   10d7c:	cmp	r0, #0
   10d80:	movweq	r0, #25860	; 0x6504
   10d84:	movteq	r0, #1
   10d88:	bl	11698 <__assert_fail@plt+0x94c>
   10d8c:	movw	r0, #5548	; 0x15ac
   10d90:	movt	r0, #1
   10d94:	bl	16424 <__assert_fail@plt+0x56d8>
   10d98:	subs	r6, r0, #0
   10d9c:	bne	1124c <__assert_fail@plt+0x500>
   10da0:	movw	r4, #1026	; 0x402
   10da4:	str	r6, [sp, #16]
   10da8:	movw	r5, #25672	; 0x6448
   10dac:	movt	r5, #1
   10db0:	mov	r0, r4
   10db4:	str	r4, [sp, #32]
   10db8:	movw	r8, #28984	; 0x7138
   10dbc:	movt	r8, #2
   10dc0:	bl	15890 <__assert_fail@plt+0x4b44>
   10dc4:	mov	fp, r6
   10dc8:	mov	r9, #10
   10dcc:	str	r0, [sp, #28]
   10dd0:	mov	r0, r4
   10dd4:	movw	r4, #26104	; 0x65f8
   10dd8:	movt	r4, #1
   10ddc:	bl	15890 <__assert_fail@plt+0x4b44>
   10de0:	strb	r6, [r0]
   10de4:	str	r0, [sp, #20]
   10de8:	mov	r6, #0
   10dec:	b	10dfc <__assert_fail@plt+0xb0>
   10df0:	cmp	r0, #48	; 0x30
   10df4:	mov	r9, #0
   10df8:	bne	11200 <__assert_fail@plt+0x4b4>
   10dfc:	mov	r3, r5
   10e00:	mov	r2, r4
   10e04:	str	r6, [sp]
   10e08:	mov	r1, r7
   10e0c:	ldr	r0, [sp, #12]
   10e10:	bl	10c5c <getopt_long@plt>
   10e14:	cmn	r0, #1
   10e18:	beq	10f10 <__assert_fail@plt+0x1c4>
   10e1c:	cmp	r0, #83	; 0x53
   10e20:	beq	10e64 <__assert_fail@plt+0x118>
   10e24:	ble	10df0 <__assert_fail@plt+0xa4>
   10e28:	cmp	r0, #104	; 0x68
   10e2c:	beq	11284 <__assert_fail@plt+0x538>
   10e30:	cmp	r0, #118	; 0x76
   10e34:	bne	11200 <__assert_fail@plt+0x4b4>
   10e38:	movw	r0, #25860	; 0x6504
   10e3c:	movt	r0, #1
   10e40:	bl	11450 <__assert_fail@plt+0x704>
   10e44:	mov	r0, #0
   10e48:	add	sp, sp, #44	; 0x2c
   10e4c:	ldrd	r4, [sp]
   10e50:	ldrd	r6, [sp, #8]
   10e54:	ldrd	r8, [sp, #16]
   10e58:	ldrd	sl, [sp, #24]
   10e5c:	add	sp, sp, #32
   10e60:	pop	{pc}		; (ldr pc, [sp], #4)
   10e64:	bl	10c98 <__errno_location@plt>
   10e68:	ldr	fp, [r8]
   10e6c:	mov	sl, r0
   10e70:	mov	r2, #10
   10e74:	add	r1, sp, #36	; 0x24
   10e78:	str	r6, [sl]
   10e7c:	mov	r0, fp
   10e80:	bl	10b54 <strtol@plt>
   10e84:	subs	r3, r0, #0
   10e88:	str	r3, [sp, #16]
   10e8c:	beq	10eec <__assert_fail@plt+0x1a0>
   10e90:	ldr	r3, [sp, #16]
   10e94:	sub	r2, r3, #-2147483647	; 0x80000001
   10e98:	cmn	r2, #3
   10e9c:	bls	11208 <__assert_fail@plt+0x4bc>
   10ea0:	ldr	r3, [sl]
   10ea4:	cmp	r3, #0
   10ea8:	bne	1125c <__assert_fail@plt+0x510>
   10eac:	ldr	r3, [sp, #36]	; 0x24
   10eb0:	ldrb	r3, [r3]
   10eb4:	cmp	r3, #0
   10eb8:	beq	11224 <__assert_fail@plt+0x4d8>
   10ebc:	mov	r2, #5
   10ec0:	movw	r1, #26016	; 0x65a0
   10ec4:	movt	r1, #1
   10ec8:	mov	r0, #0
   10ecc:	bl	10bc0 <dcgettext@plt>
   10ed0:	ldr	ip, [sp, #36]	; 0x24
   10ed4:	mov	r2, r0
   10ed8:	mov	r3, fp
   10edc:	mov	r1, #0
   10ee0:	mov	r0, #1
   10ee4:	str	ip, [sp]
   10ee8:	bl	10c20 <error@plt>
   10eec:	ldr	r2, [r8]
   10ef0:	ldr	r3, [sp, #36]	; 0x24
   10ef4:	cmp	r3, r2
   10ef8:	beq	111bc <__assert_fail@plt+0x470>
   10efc:	ldrb	r3, [r3]
   10f00:	cmp	r3, #0
   10f04:	bne	10ebc <__assert_fail@plt+0x170>
   10f08:	mov	fp, #1
   10f0c:	b	10de8 <__assert_fail@plt+0x9c>
   10f10:	movw	r3, #28960	; 0x7120
   10f14:	movt	r3, #2
   10f18:	ldr	r2, [sp, #12]
   10f1c:	ldr	r3, [r3]
   10f20:	ldr	sl, [sp, #20]
   10f24:	cmp	r3, r2
   10f28:	bne	111dc <__assert_fail@plt+0x490>
   10f2c:	movw	r5, #28980	; 0x7134
   10f30:	movt	r5, #2
   10f34:	cmp	fp, #0
   10f38:	ldr	r3, [r5]
   10f3c:	beq	110b0 <__assert_fail@plt+0x364>
   10f40:	ldr	r2, [sp, #16]
   10f44:	mov	r1, r3
   10f48:	cmp	r2, #0
   10f4c:	movne	r0, #49	; 0x31
   10f50:	moveq	r0, #48	; 0x30
   10f54:	bl	10d04 <fputc@plt>
   10f58:	mov	r0, #0
   10f5c:	ldr	r1, [r5]
   10f60:	bl	10d04 <fputc@plt>
   10f64:	movw	r3, #28976	; 0x7130
   10f68:	movt	r3, #2
   10f6c:	mov	r6, #0
   10f70:	movw	r7, #1026	; 0x402
   10f74:	str	r3, [sp, #12]
   10f78:	movw	r3, #26172	; 0x663c
   10f7c:	movt	r3, #1
   10f80:	str	r3, [sp, #16]
   10f84:	ldr	r3, [sp, #12]
   10f88:	mov	r2, r9
   10f8c:	add	r1, sp, #32
   10f90:	add	r0, sp, #28
   10f94:	ldr	r3, [r3]
   10f98:	bl	10d1c <getdelim@plt>
   10f9c:	cmp	r0, #0
   10fa0:	ble	11170 <__assert_fail@plt+0x424>
   10fa4:	ldr	r3, [sp, #28]
   10fa8:	sub	r0, r0, #1
   10fac:	ldrb	r2, [r3, r0]
   10fb0:	cmp	r2, r9
   10fb4:	moveq	r2, #0
   10fb8:	strbeq	r2, [r3, r0]
   10fbc:	beq	10fe0 <__assert_fail@plt+0x294>
   10fc0:	mov	r2, #5
   10fc4:	mov	r0, #0
   10fc8:	ldr	r1, [sp, #16]
   10fcc:	bl	10bc0 <dcgettext@plt>
   10fd0:	mov	r1, #0
   10fd4:	mov	r2, r0
   10fd8:	mov	r0, r1
   10fdc:	bl	10c20 <error@plt>
   10fe0:	ldr	r0, [sp, #28]
   10fe4:	ldrb	r2, [sl]
   10fe8:	ldrb	r1, [r0]
   10fec:	cmp	r2, #0
   10ff0:	sub	r3, r1, r2
   10ff4:	clz	r3, r3
   10ff8:	lsr	r3, r3, #5
   10ffc:	moveq	r3, #0
   11000:	cmp	r3, #0
   11004:	beq	11168 <__assert_fail@plt+0x41c>
   11008:	mov	r1, r0
   1100c:	sub	ip, sl, #-2147483646	; 0x80000002
   11010:	mov	r4, sl
   11014:	b	11020 <__assert_fail@plt+0x2d4>
   11018:	cmp	r4, ip
   1101c:	beq	11044 <__assert_fail@plt+0x2f8>
   11020:	ldrb	r2, [r4, #1]!
   11024:	ldrb	lr, [r1, #1]!
   11028:	cmp	r2, #0
   1102c:	sub	r3, lr, r2
   11030:	clz	r3, r3
   11034:	lsr	r3, r3, #5
   11038:	moveq	r3, #0
   1103c:	cmp	r3, #0
   11040:	bne	11018 <__assert_fail@plt+0x2cc>
   11044:	sub	r4, r4, sl
   11048:	ldr	r1, [r5]
   1104c:	sub	r8, r4, r6
   11050:	add	r2, r8, #32768	; 0x8000
   11054:	cmp	r2, #65536	; 0x10000
   11058:	rsbcs	r8, r6, #0
   1105c:	movcs	r4, #0
   11060:	cmp	fp, #0
   11064:	bne	1110c <__assert_fail@plt+0x3c0>
   11068:	add	r2, r8, #127	; 0x7f
   1106c:	cmp	r2, #254	; 0xfe
   11070:	bls	110f4 <__assert_fail@plt+0x3a8>
   11074:	mov	r0, #128	; 0x80
   11078:	bl	10d10 <putc@plt>
   1107c:	cmn	r0, #1
   11080:	beq	110ac <__assert_fail@plt+0x360>
   11084:	cmp	r8, #32768	; 0x8000
   11088:	ldr	r6, [r5]
   1108c:	bge	111a0 <__assert_fail@plt+0x454>
   11090:	cmn	r8, #32768	; 0x8000
   11094:	blt	11184 <__assert_fail@plt+0x438>
   11098:	mov	r1, r6
   1109c:	asr	r0, r8, #8
   110a0:	bl	10d10 <putc@plt>
   110a4:	cmn	r0, #1
   110a8:	bne	11150 <__assert_fail@plt+0x404>
   110ac:	bl	11384 <__assert_fail@plt+0x638>
   110b0:	mov	r2, #10
   110b4:	ldr	r0, [pc, #464]	; 1128c <__assert_fail@plt+0x540>
   110b8:	mov	r1, #1
   110bc:	bl	10be4 <fwrite@plt>
   110c0:	cmp	r0, #10
   110c4:	beq	10f64 <__assert_fail@plt+0x218>
   110c8:	bl	10c98 <__errno_location@plt>
   110cc:	movw	r1, #26136	; 0x6618
   110d0:	movt	r1, #1
   110d4:	ldr	r4, [r0]
   110d8:	mov	r2, #5
   110dc:	mov	r0, #0
   110e0:	bl	10bc0 <dcgettext@plt>
   110e4:	mov	r2, r0
   110e8:	mov	r0, #1
   110ec:	mov	r1, r4
   110f0:	bl	10c20 <error@plt>
   110f4:	mov	r0, r8
   110f8:	bl	10d10 <putc@plt>
   110fc:	cmn	r0, #1
   11100:	beq	110ac <__assert_fail@plt+0x360>
   11104:	ldr	r1, [r5]
   11108:	ldr	r0, [sp, #28]
   1110c:	add	r0, r0, r4
   11110:	bl	10d28 <fputs@plt>
   11114:	cmn	r0, #1
   11118:	beq	110ac <__assert_fail@plt+0x360>
   1111c:	mov	r0, #0
   11120:	ldr	r1, [r5]
   11124:	bl	10d10 <putc@plt>
   11128:	cmn	r0, #1
   1112c:	beq	110ac <__assert_fail@plt+0x360>
   11130:	ldrd	r2, [sp, #28]
   11134:	mov	r6, r4
   11138:	mov	fp, #0
   1113c:	str	sl, [sp, #28]
   11140:	str	r7, [sp, #32]
   11144:	mov	sl, r2
   11148:	mov	r7, r3
   1114c:	b	10f84 <__assert_fail@plt+0x238>
   11150:	mov	r1, r6
   11154:	mov	r0, r8
   11158:	bl	10d10 <putc@plt>
   1115c:	cmn	r0, #1
   11160:	bne	11104 <__assert_fail@plt+0x3b8>
   11164:	b	110ac <__assert_fail@plt+0x360>
   11168:	mov	r4, sl
   1116c:	b	11044 <__assert_fail@plt+0x2f8>
   11170:	ldr	r0, [sp, #28]
   11174:	bl	15f60 <__assert_fail@plt+0x5214>
   11178:	mov	r0, sl
   1117c:	bl	15f60 <__assert_fail@plt+0x5214>
   11180:	b	10e44 <__assert_fail@plt+0xf8>
   11184:	movw	r1, #26220	; 0x666c
   11188:	movt	r1, #1
   1118c:	ldr	r3, [pc, #252]	; 11290 <__assert_fail@plt+0x544>
   11190:	movw	r0, #26248	; 0x6688
   11194:	movt	r0, #1
   11198:	mov	r2, #105	; 0x69
   1119c:	bl	10d4c <__assert_fail@plt>
   111a0:	movw	r1, #26220	; 0x666c
   111a4:	movt	r1, #1
   111a8:	ldr	r3, [pc, #224]	; 11290 <__assert_fail@plt+0x544>
   111ac:	movw	r0, #26232	; 0x6678
   111b0:	movt	r0, #1
   111b4:	mov	r2, #104	; 0x68
   111b8:	bl	10d4c <__assert_fail@plt>
   111bc:	mov	r2, #5
   111c0:	movw	r1, #25904	; 0x6530
   111c4:	movt	r1, #1
   111c8:	bl	10bc0 <dcgettext@plt>
   111cc:	mov	r2, r0
   111d0:	mov	r0, #1
   111d4:	ldr	r1, [sp, #16]
   111d8:	bl	10c20 <error@plt>
   111dc:	mov	r2, #5
   111e0:	movw	r1, #26112	; 0x6600
   111e4:	movt	r1, #1
   111e8:	mov	r0, #0
   111ec:	bl	10bc0 <dcgettext@plt>
   111f0:	mov	r1, #0
   111f4:	mov	r2, r0
   111f8:	mov	r0, r1
   111fc:	bl	10c20 <error@plt>
   11200:	mov	r0, #1
   11204:	bl	113b8 <__assert_fail@plt+0x66c>
   11208:	ldr	r3, [sp, #36]	; 0x24
   1120c:	ldrb	r3, [r3]
   11210:	cmp	r3, #0
   11214:	bne	10ebc <__assert_fail@plt+0x170>
   11218:	ldr	r3, [sp, #16]
   1121c:	cmp	r3, #1
   11220:	beq	10f08 <__assert_fail@plt+0x1bc>
   11224:	mov	r2, #5
   11228:	movw	r1, #26060	; 0x65cc
   1122c:	movt	r1, #1
   11230:	mov	r0, #0
   11234:	bl	10bc0 <dcgettext@plt>
   11238:	mov	r2, r0
   1123c:	mov	r1, #0
   11240:	ldr	r3, [sp, #16]
   11244:	mov	r0, #1
   11248:	bl	10c20 <error@plt>
   1124c:	bl	10c98 <__errno_location@plt>
   11250:	movw	r1, #25868	; 0x650c
   11254:	movt	r1, #1
   11258:	b	110d4 <__assert_fail@plt+0x388>
   1125c:	mov	r2, #5
   11260:	movw	r1, #25964	; 0x656c
   11264:	movt	r1, #1
   11268:	mov	r0, #0
   1126c:	bl	10bc0 <dcgettext@plt>
   11270:	mov	r2, r0
   11274:	mov	r3, fp
   11278:	mov	r1, #0
   1127c:	mov	r0, #1
   11280:	bl	10c20 <error@plt>
   11284:	mov	r0, #0
   11288:	bl	113b8 <__assert_fail@plt+0x66c>
   1128c:	andeq	r6, r1, r8, lsl #9
   11290:	muleq	r1, r4, r4
   11294:	mov	fp, #0
   11298:	mov	lr, #0
   1129c:	pop	{r1}		; (ldr r1, [sp], #4)
   112a0:	mov	r2, sp
   112a4:	push	{r2}		; (str r2, [sp, #-4]!)
   112a8:	push	{r0}		; (str r0, [sp, #-4]!)
   112ac:	ldr	ip, [pc, #16]	; 112c4 <__assert_fail@plt+0x578>
   112b0:	push	{ip}		; (str ip, [sp, #-4]!)
   112b4:	ldr	r0, [pc, #12]	; 112c8 <__assert_fail@plt+0x57c>
   112b8:	ldr	r3, [pc, #12]	; 112cc <__assert_fail@plt+0x580>
   112bc:	bl	10c38 <__libc_start_main@plt>
   112c0:	bl	10d40 <abort@plt>
   112c4:	andeq	r6, r1, r0, lsr #8
   112c8:	andeq	r0, r1, r8, asr sp
   112cc:	andeq	r6, r1, r0, asr #7
   112d0:	ldr	r3, [pc, #20]	; 112ec <__assert_fail@plt+0x5a0>
   112d4:	ldr	r2, [pc, #20]	; 112f0 <__assert_fail@plt+0x5a4>
   112d8:	add	r3, pc, r3
   112dc:	ldr	r2, [r3, r2]
   112e0:	cmp	r2, #0
   112e4:	bxeq	lr
   112e8:	b	10c50 <__gmon_start__@plt>
   112ec:	andeq	r5, r1, r0, lsr #26
   112f0:	andeq	r0, r0, r0, asr #1
   112f4:	ldr	r0, [pc, #24]	; 11314 <__assert_fail@plt+0x5c8>
   112f8:	ldr	r3, [pc, #24]	; 11318 <__assert_fail@plt+0x5cc>
   112fc:	cmp	r3, r0
   11300:	bxeq	lr
   11304:	ldr	r3, [pc, #16]	; 1131c <__assert_fail@plt+0x5d0>
   11308:	cmp	r3, #0
   1130c:	bxeq	lr
   11310:	bx	r3
   11314:	andeq	r7, r2, r4, lsl r1
   11318:	andeq	r7, r2, r4, lsl r1
   1131c:	andeq	r0, r0, r0
   11320:	ldr	r0, [pc, #36]	; 1134c <__assert_fail@plt+0x600>
   11324:	ldr	r1, [pc, #36]	; 11350 <__assert_fail@plt+0x604>
   11328:	sub	r1, r1, r0
   1132c:	asr	r1, r1, #2
   11330:	add	r1, r1, r1, lsr #31
   11334:	asrs	r1, r1, #1
   11338:	bxeq	lr
   1133c:	ldr	r3, [pc, #16]	; 11354 <__assert_fail@plt+0x608>
   11340:	cmp	r3, #0
   11344:	bxeq	lr
   11348:	bx	r3
   1134c:	andeq	r7, r2, r4, lsl r1
   11350:	andeq	r7, r2, r4, lsl r1
   11354:	andeq	r0, r0, r0
   11358:	push	{r4, lr}
   1135c:	ldr	r4, [pc, #24]	; 1137c <__assert_fail@plt+0x630>
   11360:	ldrb	r3, [r4]
   11364:	cmp	r3, #0
   11368:	popne	{r4, pc}
   1136c:	bl	112f4 <__assert_fail@plt+0x5a8>
   11370:	mov	r3, #1
   11374:	strb	r3, [r4]
   11378:	pop	{r4, pc}
   1137c:	andeq	r7, r2, ip, lsr r1
   11380:	b	11320 <__assert_fail@plt+0x5d4>
   11384:	str	r4, [sp, #-8]!
   11388:	str	lr, [sp, #4]
   1138c:	bl	10c98 <__errno_location@plt>
   11390:	ldr	r4, [r0]
   11394:	mov	r2, #5
   11398:	movw	r1, #25760	; 0x64a0
   1139c:	movt	r1, #1
   113a0:	mov	r0, #0
   113a4:	bl	10bc0 <dcgettext@plt>
   113a8:	mov	r2, r0
   113ac:	mov	r0, #1
   113b0:	mov	r1, r4
   113b4:	bl	10c20 <error@plt>
   113b8:	subs	r6, r0, #0
   113bc:	str	r7, [sp, #-8]!
   113c0:	str	lr, [sp, #4]
   113c4:	beq	11408 <__assert_fail@plt+0x6bc>
   113c8:	movw	r3, #28968	; 0x7128
   113cc:	movt	r3, #2
   113d0:	ldr	r4, [r3]
   113d4:	mov	r2, #5
   113d8:	movw	r1, #25772	; 0x64ac
   113dc:	movt	r1, #1
   113e0:	mov	r0, #0
   113e4:	bl	10bc0 <dcgettext@plt>
   113e8:	movw	r3, #29000	; 0x7148
   113ec:	movt	r3, #2
   113f0:	mov	r1, r0
   113f4:	ldr	r2, [r3]
   113f8:	mov	r0, r4
   113fc:	bl	10c8c <fprintf@plt>
   11400:	mov	r0, #1
   11404:	bl	10c74 <exit@plt>
   11408:	movw	r4, #28980	; 0x7134
   1140c:	movt	r4, #2
   11410:	ldr	r7, [r4]
   11414:	mov	r2, #5
   11418:	movw	r1, #25812	; 0x64d4
   1141c:	movt	r1, #1
   11420:	movw	r5, #29000	; 0x7148
   11424:	movt	r5, #2
   11428:	bl	10bc0 <dcgettext@plt>
   1142c:	mov	r1, r0
   11430:	ldr	r2, [r5]
   11434:	mov	r0, r7
   11438:	bl	10c8c <fprintf@plt>
   1143c:	ldr	r0, [r4]
   11440:	ldr	r1, [r5]
   11444:	bl	11518 <__assert_fail@plt+0x7cc>
   11448:	mov	r0, r6
   1144c:	bl	10c74 <exit@plt>
   11450:	movw	r3, #28968	; 0x7128
   11454:	movt	r3, #2
   11458:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1145c:	strd	r6, [sp, #8]
   11460:	mov	r6, r0
   11464:	str	r8, [sp, #16]
   11468:	str	lr, [sp, #20]
   1146c:	sub	sp, sp, #16
   11470:	ldr	r0, [r3]
   11474:	bl	15f00 <__assert_fail@plt+0x51b4>
   11478:	movw	r2, #28980	; 0x7134
   1147c:	movt	r2, #2
   11480:	movw	r3, #28876	; 0x70cc
   11484:	movt	r3, #2
   11488:	ldr	r4, [r2]
   1148c:	movw	r1, #26288	; 0x66b0
   11490:	movt	r1, #1
   11494:	mov	r2, #5
   11498:	mov	r0, #0
   1149c:	ldr	r8, [r3]
   114a0:	bl	10bc0 <dcgettext@plt>
   114a4:	mov	r7, r0
   114a8:	mov	r2, #5
   114ac:	movw	r1, #26304	; 0x66c0
   114b0:	movt	r1, #1
   114b4:	mov	r0, #0
   114b8:	bl	10bc0 <dcgettext@plt>
   114bc:	mov	r5, r0
   114c0:	mov	r2, #5
   114c4:	movw	r1, #26320	; 0x66d0
   114c8:	movt	r1, #1
   114cc:	mov	r0, #0
   114d0:	bl	10bc0 <dcgettext@plt>
   114d4:	mov	ip, #0
   114d8:	mov	r3, r8
   114dc:	str	r7, [sp]
   114e0:	mov	r1, r6
   114e4:	movw	r2, #26336	; 0x66e0
   114e8:	movt	r2, #1
   114ec:	str	r5, [sp, #4]
   114f0:	str	r0, [sp, #8]
   114f4:	mov	r0, r4
   114f8:	str	ip, [sp, #12]
   114fc:	bl	15698 <__assert_fail@plt+0x494c>
   11500:	add	sp, sp, #16
   11504:	ldrd	r4, [sp]
   11508:	ldrd	r6, [sp, #8]
   1150c:	ldr	r8, [sp, #16]
   11510:	add	sp, sp, #20
   11514:	pop	{pc}		; (ldr pc, [sp], #4)
   11518:	mov	r2, #5
   1151c:	strd	r4, [sp, #-12]!
   11520:	mov	r5, r1
   11524:	mov	r4, r0
   11528:	movw	r1, #26368	; 0x6700
   1152c:	movt	r1, #1
   11530:	mov	r0, #0
   11534:	str	lr, [sp, #8]
   11538:	sub	sp, sp, #20
   1153c:	bl	10bc0 <dcgettext@plt>
   11540:	movw	r1, #26616	; 0x67f8
   11544:	movt	r1, #1
   11548:	movw	r2, #26640	; 0x6810
   1154c:	movt	r2, #1
   11550:	movw	ip, #26336	; 0x66e0
   11554:	movt	ip, #1
   11558:	mov	r3, r5
   1155c:	str	ip, [sp]
   11560:	str	r2, [sp, #4]
   11564:	movw	r2, #26576	; 0x67d0
   11568:	movt	r2, #1
   1156c:	str	r1, [sp, #8]
   11570:	mov	r1, r0
   11574:	mov	r0, r4
   11578:	bl	10c8c <fprintf@plt>
   1157c:	add	sp, sp, #20
   11580:	ldrd	r4, [sp]
   11584:	add	sp, sp, #8
   11588:	pop	{pc}		; (ldr pc, [sp], #4)
   1158c:	movw	r3, #28992	; 0x7140
   11590:	movt	r3, #2
   11594:	str	r0, [r3]
   11598:	bx	lr
   1159c:	movw	r3, #28992	; 0x7140
   115a0:	movt	r3, #2
   115a4:	strb	r0, [r3, #4]
   115a8:	bx	lr
   115ac:	movw	r3, #28980	; 0x7134
   115b0:	movt	r3, #2
   115b4:	strd	r4, [sp, #-16]!
   115b8:	ldr	r0, [r3]
   115bc:	str	r6, [sp, #8]
   115c0:	str	lr, [sp, #12]
   115c4:	sub	sp, sp, #8
   115c8:	bl	161cc <__assert_fail@plt+0x5480>
   115cc:	cmp	r0, #0
   115d0:	beq	115fc <__assert_fail@plt+0x8b0>
   115d4:	movw	r4, #28992	; 0x7140
   115d8:	movt	r4, #2
   115dc:	ldrb	r6, [r4, #4]
   115e0:	bl	10c98 <__errno_location@plt>
   115e4:	mov	r5, r0
   115e8:	cmp	r6, #0
   115ec:	beq	11628 <__assert_fail@plt+0x8dc>
   115f0:	ldr	r3, [r0]
   115f4:	cmp	r3, #32
   115f8:	bne	11628 <__assert_fail@plt+0x8dc>
   115fc:	movw	r3, #28968	; 0x7128
   11600:	movt	r3, #2
   11604:	ldr	r0, [r3]
   11608:	bl	161cc <__assert_fail@plt+0x5480>
   1160c:	cmp	r0, #0
   11610:	bne	11670 <__assert_fail@plt+0x924>
   11614:	add	sp, sp, #8
   11618:	ldrd	r4, [sp]
   1161c:	ldr	r6, [sp, #8]
   11620:	add	sp, sp, #12
   11624:	pop	{pc}		; (ldr pc, [sp], #4)
   11628:	movw	r1, #25760	; 0x64a0
   1162c:	movt	r1, #1
   11630:	mov	r2, #5
   11634:	mov	r0, #0
   11638:	bl	10bc0 <dcgettext@plt>
   1163c:	mov	r6, r0
   11640:	ldr	r0, [r4]
   11644:	cmp	r0, #0
   11648:	beq	11680 <__assert_fail@plt+0x934>
   1164c:	ldr	r4, [r5]
   11650:	bl	1448c <__assert_fail@plt+0x3740>
   11654:	mov	r3, r0
   11658:	movw	r2, #26688	; 0x6840
   1165c:	movt	r2, #1
   11660:	mov	r0, #0
   11664:	str	r6, [sp]
   11668:	mov	r1, r4
   1166c:	bl	10c20 <error@plt>
   11670:	movw	r3, #28880	; 0x70d0
   11674:	movt	r3, #2
   11678:	ldr	r0, [r3]
   1167c:	bl	10b90 <_exit@plt>
   11680:	mov	r3, r6
   11684:	movw	r2, #26692	; 0x6844
   11688:	movt	r2, #1
   1168c:	ldr	r1, [r5]
   11690:	bl	10c20 <error@plt>
   11694:	b	11670 <__assert_fail@plt+0x924>
   11698:	strd	r4, [sp, #-16]!
   1169c:	subs	r4, r0, #0
   116a0:	str	r6, [sp, #8]
   116a4:	str	lr, [sp, #12]
   116a8:	beq	11740 <__assert_fail@plt+0x9f4>
   116ac:	mov	r1, #47	; 0x2f
   116b0:	bl	10cec <strrchr@plt>
   116b4:	subs	r5, r0, #0
   116b8:	beq	11718 <__assert_fail@plt+0x9cc>
   116bc:	add	r6, r5, #1
   116c0:	sub	r3, r6, r4
   116c4:	cmp	r3, #6
   116c8:	ble	11718 <__assert_fail@plt+0x9cc>
   116cc:	movw	r1, #26752	; 0x6880
   116d0:	movt	r1, #1
   116d4:	mov	r2, #7
   116d8:	sub	r0, r5, #6
   116dc:	bl	10d34 <strncmp@plt>
   116e0:	cmp	r0, #0
   116e4:	bne	11718 <__assert_fail@plt+0x9cc>
   116e8:	movw	r1, #26760	; 0x6888
   116ec:	movt	r1, #1
   116f0:	mov	r2, #3
   116f4:	mov	r0, r6
   116f8:	bl	10d34 <strncmp@plt>
   116fc:	cmp	r0, #0
   11700:	movne	r4, r6
   11704:	bne	11718 <__assert_fail@plt+0x9cc>
   11708:	add	r4, r5, #4
   1170c:	movw	r3, #28952	; 0x7118
   11710:	movt	r3, #2
   11714:	str	r4, [r3]
   11718:	movw	r2, #29000	; 0x7148
   1171c:	movt	r2, #2
   11720:	ldr	r6, [sp, #8]
   11724:	movw	r3, #28956	; 0x711c
   11728:	movt	r3, #2
   1172c:	str	r4, [r2]
   11730:	str	r4, [r3]
   11734:	ldrd	r4, [sp]
   11738:	add	sp, sp, #12
   1173c:	pop	{pc}		; (ldr pc, [sp], #4)
   11740:	movw	r3, #28968	; 0x7128
   11744:	movt	r3, #2
   11748:	movw	r0, #26696	; 0x6848
   1174c:	movt	r0, #1
   11750:	ldr	r3, [r3]
   11754:	mov	r2, #55	; 0x37
   11758:	mov	r1, #1
   1175c:	bl	10be4 <fwrite@plt>
   11760:	bl	10d40 <abort@plt>
   11764:	mov	r2, #5
   11768:	strd	r4, [sp, #-16]!
   1176c:	mov	r5, r0
   11770:	str	r6, [sp, #8]
   11774:	mov	r6, r1
   11778:	mov	r1, r0
   1177c:	mov	r0, #0
   11780:	str	lr, [sp, #12]
   11784:	bl	10bc0 <dcgettext@plt>
   11788:	cmp	r5, r0
   1178c:	mov	r4, r0
   11790:	beq	117a8 <__assert_fail@plt+0xa5c>
   11794:	mov	r0, r4
   11798:	ldrd	r4, [sp]
   1179c:	ldr	r6, [sp, #8]
   117a0:	add	sp, sp, #12
   117a4:	pop	{pc}		; (ldr pc, [sp], #4)
   117a8:	bl	162b0 <__assert_fail@plt+0x5564>
   117ac:	ldrb	r3, [r0]
   117b0:	bic	r3, r3, #32
   117b4:	cmp	r3, #85	; 0x55
   117b8:	bne	11820 <__assert_fail@plt+0xad4>
   117bc:	ldrb	r3, [r0, #1]
   117c0:	bic	r3, r3, #32
   117c4:	cmp	r3, #84	; 0x54
   117c8:	bne	118a0 <__assert_fail@plt+0xb54>
   117cc:	ldrb	r3, [r0, #2]
   117d0:	bic	r3, r3, #32
   117d4:	cmp	r3, #70	; 0x46
   117d8:	bne	118a0 <__assert_fail@plt+0xb54>
   117dc:	ldrb	r3, [r0, #3]
   117e0:	cmp	r3, #45	; 0x2d
   117e4:	bne	118a0 <__assert_fail@plt+0xb54>
   117e8:	ldrb	r3, [r0, #4]
   117ec:	cmp	r3, #56	; 0x38
   117f0:	bne	118a0 <__assert_fail@plt+0xb54>
   117f4:	ldrb	r3, [r0, #5]
   117f8:	cmp	r3, #0
   117fc:	bne	118a0 <__assert_fail@plt+0xb54>
   11800:	ldrb	r2, [r4]
   11804:	movw	r3, #26852	; 0x68e4
   11808:	movt	r3, #1
   1180c:	movw	r4, #26864	; 0x68f0
   11810:	movt	r4, #1
   11814:	cmp	r2, #96	; 0x60
   11818:	movne	r4, r3
   1181c:	b	11794 <__assert_fail@plt+0xa48>
   11820:	cmp	r3, #71	; 0x47
   11824:	bne	118a0 <__assert_fail@plt+0xb54>
   11828:	ldrb	r3, [r0, #1]
   1182c:	bic	r3, r3, #32
   11830:	cmp	r3, #66	; 0x42
   11834:	bne	118a0 <__assert_fail@plt+0xb54>
   11838:	ldrb	r3, [r0, #2]
   1183c:	cmp	r3, #49	; 0x31
   11840:	bne	118a0 <__assert_fail@plt+0xb54>
   11844:	ldrb	r3, [r0, #3]
   11848:	cmp	r3, #56	; 0x38
   1184c:	bne	118a0 <__assert_fail@plt+0xb54>
   11850:	ldrb	r3, [r0, #4]
   11854:	cmp	r3, #48	; 0x30
   11858:	bne	118a0 <__assert_fail@plt+0xb54>
   1185c:	ldrb	r3, [r0, #5]
   11860:	cmp	r3, #51	; 0x33
   11864:	bne	118a0 <__assert_fail@plt+0xb54>
   11868:	ldrb	r3, [r0, #6]
   1186c:	cmp	r3, #48	; 0x30
   11870:	bne	118a0 <__assert_fail@plt+0xb54>
   11874:	ldrb	r3, [r0, #7]
   11878:	cmp	r3, #0
   1187c:	bne	118a0 <__assert_fail@plt+0xb54>
   11880:	ldrb	r2, [r4]
   11884:	movw	r3, #26856	; 0x68e8
   11888:	movt	r3, #1
   1188c:	movw	r4, #26860	; 0x68ec
   11890:	movt	r4, #1
   11894:	cmp	r2, #96	; 0x60
   11898:	movne	r4, r3
   1189c:	b	11794 <__assert_fail@plt+0xa48>
   118a0:	movw	r3, #26868	; 0x68f4
   118a4:	movt	r3, #1
   118a8:	cmp	r6, #9
   118ac:	movw	r4, #26848	; 0x68e0
   118b0:	movt	r4, #1
   118b4:	movne	r4, r3
   118b8:	b	11794 <__assert_fail@plt+0xa48>
   118bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   118c0:	strd	r6, [sp, #8]
   118c4:	strd	r8, [sp, #16]
   118c8:	mov	r8, r3
   118cc:	strd	sl, [sp, #24]
   118d0:	mov	fp, r0
   118d4:	mov	sl, r1
   118d8:	str	lr, [sp, #32]
   118dc:	sub	sp, sp, #140	; 0x8c
   118e0:	ldr	r3, [sp, #180]	; 0xb4
   118e4:	str	r2, [sp, #28]
   118e8:	and	r4, r3, #2
   118ec:	ubfx	r3, r3, #1, #1
   118f0:	str	r3, [sp, #44]	; 0x2c
   118f4:	bl	10bfc <__ctype_get_mb_cur_max@plt>
   118f8:	ldr	r3, [sp, #176]	; 0xb0
   118fc:	str	r0, [sp, #76]	; 0x4c
   11900:	cmp	r3, #10
   11904:	ldrls	pc, [pc, r3, lsl #2]
   11908:	b	132a4 <__assert_fail@plt+0x2558>
   1190c:	andeq	r1, r1, ip, lsl #27
   11910:	andeq	r1, r1, r8, lsr #29
   11914:	andeq	r2, r1, r4, lsr #8
   11918:	andeq	r1, r1, r4, lsl pc
   1191c:	muleq	r1, r4, ip
   11920:	andeq	r1, r1, r0, lsl sp
   11924:	andeq	r1, r1, r8, ror #27
   11928:	andeq	r1, r1, r0, asr lr
   1192c:	andeq	r1, r1, r8, lsr r9
   11930:	andeq	r1, r1, r8, lsr r9
   11934:	andeq	r1, r1, r8, lsr r9
   11938:	ldr	r3, [sp, #176]	; 0xb0
   1193c:	cmp	r3, #10
   11940:	beq	1196c <__assert_fail@plt+0xc20>
   11944:	mov	r1, r3
   11948:	movw	r0, #26872	; 0x68f8
   1194c:	movt	r0, #1
   11950:	bl	11764 <__assert_fail@plt+0xa18>
   11954:	str	r0, [sp, #188]	; 0xbc
   11958:	movw	r0, #26868	; 0x68f4
   1195c:	movt	r0, #1
   11960:	ldr	r1, [sp, #176]	; 0xb0
   11964:	bl	11764 <__assert_fail@plt+0xa18>
   11968:	str	r0, [sp, #192]	; 0xc0
   1196c:	cmp	r4, #0
   11970:	movne	r4, #0
   11974:	beq	13030 <__assert_fail@plt+0x22e4>
   11978:	mov	r5, #0
   1197c:	ldr	r0, [sp, #192]	; 0xc0
   11980:	mov	r9, r5
   11984:	str	r5, [sp, #64]	; 0x40
   11988:	bl	10c80 <strlen@plt>
   1198c:	mov	r3, #1
   11990:	ldr	r2, [sp, #44]	; 0x2c
   11994:	cmp	r0, r5
   11998:	moveq	r2, r5
   1199c:	str	r3, [sp, #32]
   119a0:	str	r3, [sp, #48]	; 0x30
   119a4:	str	r5, [sp, #52]	; 0x34
   119a8:	str	r3, [sp, #60]	; 0x3c
   119ac:	ldr	r3, [sp, #180]	; 0xb4
   119b0:	str	r0, [sp, #56]	; 0x38
   119b4:	str	r5, [sp, #68]	; 0x44
   119b8:	str	r5, [sp, #80]	; 0x50
   119bc:	str	r5, [sp, #84]	; 0x54
   119c0:	and	r3, r3, #1
   119c4:	str	r2, [sp, #88]	; 0x58
   119c8:	str	r3, [sp, #92]	; 0x5c
   119cc:	ldr	r3, [sp, #180]	; 0xb4
   119d0:	and	r3, r3, #4
   119d4:	str	r3, [sp, #96]	; 0x60
   119d8:	ldr	r3, [sp, #192]	; 0xc0
   119dc:	str	r3, [sp, #72]	; 0x48
   119e0:	mov	r3, fp
   119e4:	mov	r7, #0
   119e8:	mov	fp, r9
   119ec:	mov	r9, r3
   119f0:	cmn	r8, #1
   119f4:	beq	11ff8 <__assert_fail@plt+0x12ac>
   119f8:	subs	r6, r8, r7
   119fc:	movne	r6, #1
   11a00:	cmp	r6, #0
   11a04:	beq	12010 <__assert_fail@plt+0x12c4>
   11a08:	ldr	r0, [sp, #28]
   11a0c:	ldr	r3, [sp, #48]	; 0x30
   11a10:	cmp	r3, #0
   11a14:	add	r3, r0, r7
   11a18:	str	r3, [sp, #36]	; 0x24
   11a1c:	beq	1249c <__assert_fail@plt+0x1750>
   11a20:	ldr	r2, [sp, #56]	; 0x38
   11a24:	cmp	r2, #0
   11a28:	beq	1299c <__assert_fail@plt+0x1c50>
   11a2c:	cmp	r2, #1
   11a30:	mov	r3, r2
   11a34:	movls	r3, #0
   11a38:	movhi	r3, #1
   11a3c:	cmn	r8, #1
   11a40:	add	r5, r7, r2
   11a44:	movne	r3, #0
   11a48:	cmp	r3, #0
   11a4c:	beq	11a58 <__assert_fail@plt+0xd0c>
   11a50:	bl	10c80 <strlen@plt>
   11a54:	mov	r8, r0
   11a58:	cmp	r5, r8
   11a5c:	bhi	1299c <__assert_fail@plt+0x1c50>
   11a60:	ldr	r0, [sp, #36]	; 0x24
   11a64:	ldr	r2, [sp, #56]	; 0x38
   11a68:	ldr	r1, [sp, #72]	; 0x48
   11a6c:	bl	10bb4 <memcmp@plt>
   11a70:	cmp	r0, #0
   11a74:	bne	1299c <__assert_fail@plt+0x1c50>
   11a78:	ldr	r3, [sp, #44]	; 0x2c
   11a7c:	cmp	r3, #0
   11a80:	bne	13148 <__assert_fail@plt+0x23fc>
   11a84:	ldr	r3, [sp, #36]	; 0x24
   11a88:	ldrb	r5, [r3]
   11a8c:	cmp	r5, #126	; 0x7e
   11a90:	ldrls	pc, [pc, r5, lsl #2]
   11a94:	b	12f30 <__assert_fail@plt+0x21e4>
   11a98:	andeq	r2, r1, ip, ror #2
   11a9c:	andeq	r2, r1, r0, lsr pc
   11aa0:	andeq	r2, r1, r0, lsr pc
   11aa4:	andeq	r2, r1, r0, lsr pc
   11aa8:	andeq	r2, r1, r0, lsr pc
   11aac:	andeq	r2, r1, r0, lsr pc
   11ab0:	andeq	r2, r1, r0, lsr pc
   11ab4:	andeq	r2, r1, r4, asr #1
   11ab8:	strheq	r2, [r1], -ip
   11abc:	andeq	r2, r1, ip, asr #1
   11ac0:	andeq	r2, r1, r0, asr r2
   11ac4:	andeq	r2, r1, r0, asr #4
   11ac8:	andeq	r1, r1, r8, ror #30
   11acc:	andeq	r2, r1, ip, lsl r2
   11ad0:	andeq	r2, r1, r0, lsr pc
   11ad4:	andeq	r2, r1, r0, lsr pc
   11ad8:	andeq	r2, r1, r0, lsr pc
   11adc:	andeq	r2, r1, r0, lsr pc
   11ae0:	andeq	r2, r1, r0, lsr pc
   11ae4:	andeq	r2, r1, r0, lsr pc
   11ae8:	andeq	r2, r1, r0, lsr pc
   11aec:	andeq	r2, r1, r0, lsr pc
   11af0:	andeq	r2, r1, r0, lsr pc
   11af4:	andeq	r2, r1, r0, lsr pc
   11af8:	andeq	r2, r1, r0, lsr pc
   11afc:	andeq	r2, r1, r0, lsr pc
   11b00:	andeq	r2, r1, r0, lsr pc
   11b04:	andeq	r2, r1, r0, lsr pc
   11b08:	andeq	r2, r1, r0, lsr pc
   11b0c:	andeq	r2, r1, r0, lsr pc
   11b10:	andeq	r2, r1, r0, lsr pc
   11b14:	andeq	r2, r1, r0, lsr pc
   11b18:	andeq	r2, r1, r8, asr #5
   11b1c:			; <UNDEFINED> instruction: 0x000122bc
   11b20:			; <UNDEFINED> instruction: 0x000122bc
   11b24:			; <UNDEFINED> instruction: 0x000122b0
   11b28:			; <UNDEFINED> instruction: 0x000122bc
   11b2c:	muleq	r1, r4, r3
   11b30:			; <UNDEFINED> instruction: 0x000122bc
   11b34:	andeq	r2, r1, r4, lsl #8
   11b38:			; <UNDEFINED> instruction: 0x000122bc
   11b3c:			; <UNDEFINED> instruction: 0x000122bc
   11b40:			; <UNDEFINED> instruction: 0x000122bc
   11b44:	muleq	r1, r4, r3
   11b48:	muleq	r1, r4, r3
   11b4c:	muleq	r1, r4, r3
   11b50:	muleq	r1, r4, r3
   11b54:	muleq	r1, r4, r3
   11b58:	muleq	r1, r4, r3
   11b5c:	muleq	r1, r4, r3
   11b60:	muleq	r1, r4, r3
   11b64:	muleq	r1, r4, r3
   11b68:	muleq	r1, r4, r3
   11b6c:	muleq	r1, r4, r3
   11b70:	muleq	r1, r4, r3
   11b74:	muleq	r1, r4, r3
   11b78:	muleq	r1, r4, r3
   11b7c:	muleq	r1, r4, r3
   11b80:	muleq	r1, r4, r3
   11b84:			; <UNDEFINED> instruction: 0x000122bc
   11b88:			; <UNDEFINED> instruction: 0x000122bc
   11b8c:			; <UNDEFINED> instruction: 0x000122bc
   11b90:			; <UNDEFINED> instruction: 0x000122bc
   11b94:			; <UNDEFINED> instruction: 0x000123b4
   11b98:	andeq	r2, r1, r0, lsr pc
   11b9c:	muleq	r1, r4, r3
   11ba0:	muleq	r1, r4, r3
   11ba4:	muleq	r1, r4, r3
   11ba8:	muleq	r1, r4, r3
   11bac:	muleq	r1, r4, r3
   11bb0:	muleq	r1, r4, r3
   11bb4:	muleq	r1, r4, r3
   11bb8:	muleq	r1, r4, r3
   11bbc:	muleq	r1, r4, r3
   11bc0:	muleq	r1, r4, r3
   11bc4:	muleq	r1, r4, r3
   11bc8:	muleq	r1, r4, r3
   11bcc:	muleq	r1, r4, r3
   11bd0:	muleq	r1, r4, r3
   11bd4:	muleq	r1, r4, r3
   11bd8:	muleq	r1, r4, r3
   11bdc:	muleq	r1, r4, r3
   11be0:	muleq	r1, r4, r3
   11be4:	muleq	r1, r4, r3
   11be8:	muleq	r1, r4, r3
   11bec:	muleq	r1, r4, r3
   11bf0:	muleq	r1, r4, r3
   11bf4:	muleq	r1, r4, r3
   11bf8:	muleq	r1, r4, r3
   11bfc:	muleq	r1, r4, r3
   11c00:	muleq	r1, r4, r3
   11c04:			; <UNDEFINED> instruction: 0x000122bc
   11c08:	andeq	r2, r1, r8, asr r3
   11c0c:	muleq	r1, r4, r3
   11c10:			; <UNDEFINED> instruction: 0x000122bc
   11c14:	muleq	r1, r4, r3
   11c18:			; <UNDEFINED> instruction: 0x000122bc
   11c1c:	muleq	r1, r4, r3
   11c20:	muleq	r1, r4, r3
   11c24:	muleq	r1, r4, r3
   11c28:	muleq	r1, r4, r3
   11c2c:	muleq	r1, r4, r3
   11c30:	muleq	r1, r4, r3
   11c34:	muleq	r1, r4, r3
   11c38:	muleq	r1, r4, r3
   11c3c:	muleq	r1, r4, r3
   11c40:	muleq	r1, r4, r3
   11c44:	muleq	r1, r4, r3
   11c48:	muleq	r1, r4, r3
   11c4c:	muleq	r1, r4, r3
   11c50:	muleq	r1, r4, r3
   11c54:	muleq	r1, r4, r3
   11c58:	muleq	r1, r4, r3
   11c5c:	muleq	r1, r4, r3
   11c60:	muleq	r1, r4, r3
   11c64:	muleq	r1, r4, r3
   11c68:	muleq	r1, r4, r3
   11c6c:	muleq	r1, r4, r3
   11c70:	muleq	r1, r4, r3
   11c74:	muleq	r1, r4, r3
   11c78:	muleq	r1, r4, r3
   11c7c:	muleq	r1, r4, r3
   11c80:	muleq	r1, r4, r3
   11c84:	andeq	r2, r1, r4, ror #4
   11c88:			; <UNDEFINED> instruction: 0x000122bc
   11c8c:	andeq	r2, r1, r4, ror #4
   11c90:			; <UNDEFINED> instruction: 0x000122b0
   11c94:	ldr	r3, [sp, #180]	; 0xb4
   11c98:	cmp	r4, #0
   11c9c:	and	r3, r3, #1
   11ca0:	str	r3, [sp, #92]	; 0x5c
   11ca4:	ldr	r3, [sp, #180]	; 0xb4
   11ca8:	and	r3, r3, #4
   11cac:	str	r3, [sp, #96]	; 0x60
   11cb0:	moveq	r3, #1
   11cb4:	streq	r3, [sp, #60]	; 0x3c
   11cb8:	beq	12448 <__assert_fail@plt+0x16fc>
   11cbc:	mov	r3, #0
   11cc0:	mov	r2, #1
   11cc4:	mov	r4, r3
   11cc8:	mov	r9, r3
   11ccc:	str	r2, [sp, #32]
   11cd0:	str	r2, [sp, #44]	; 0x2c
   11cd4:	str	r3, [sp, #48]	; 0x30
   11cd8:	str	r2, [sp, #52]	; 0x34
   11cdc:	str	r2, [sp, #56]	; 0x38
   11ce0:	str	r3, [sp, #60]	; 0x3c
   11ce4:	str	r2, [sp, #64]	; 0x40
   11ce8:	str	r2, [sp, #68]	; 0x44
   11cec:	str	r3, [sp, #80]	; 0x50
   11cf0:	str	r3, [sp, #84]	; 0x54
   11cf4:	str	r3, [sp, #88]	; 0x58
   11cf8:	movw	r3, #26868	; 0x68f4
   11cfc:	movt	r3, #1
   11d00:	str	r3, [sp, #72]	; 0x48
   11d04:	mov	r3, #2
   11d08:	str	r3, [sp, #176]	; 0xb0
   11d0c:	b	119e0 <__assert_fail@plt+0xc94>
   11d10:	ldr	r3, [sp, #180]	; 0xb4
   11d14:	cmp	r4, #0
   11d18:	and	r3, r3, #1
   11d1c:	str	r3, [sp, #92]	; 0x5c
   11d20:	ldr	r3, [sp, #180]	; 0xb4
   11d24:	and	r3, r3, #4
   11d28:	str	r3, [sp, #96]	; 0x60
   11d2c:	bne	13100 <__assert_fail@plt+0x23b4>
   11d30:	cmp	sl, #0
   11d34:	beq	12eac <__assert_fail@plt+0x2160>
   11d38:	mov	r3, #34	; 0x22
   11d3c:	mov	r2, r4
   11d40:	mov	r1, #1
   11d44:	mov	r9, r2
   11d48:	strb	r3, [fp]
   11d4c:	movw	r3, #26848	; 0x68e0
   11d50:	movt	r3, #1
   11d54:	mov	r4, r1
   11d58:	str	r1, [sp, #32]
   11d5c:	str	r2, [sp, #44]	; 0x2c
   11d60:	str	r1, [sp, #48]	; 0x30
   11d64:	str	r2, [sp, #52]	; 0x34
   11d68:	str	r1, [sp, #56]	; 0x38
   11d6c:	str	r1, [sp, #60]	; 0x3c
   11d70:	str	r2, [sp, #64]	; 0x40
   11d74:	str	r2, [sp, #68]	; 0x44
   11d78:	str	r3, [sp, #72]	; 0x48
   11d7c:	str	r2, [sp, #80]	; 0x50
   11d80:	str	r2, [sp, #84]	; 0x54
   11d84:	str	r2, [sp, #88]	; 0x58
   11d88:	b	119e0 <__assert_fail@plt+0xc94>
   11d8c:	mov	r3, #0
   11d90:	mov	r2, #1
   11d94:	mov	r9, r3
   11d98:	str	r2, [sp, #32]
   11d9c:	str	r3, [sp, #44]	; 0x2c
   11da0:	str	r3, [sp, #48]	; 0x30
   11da4:	str	r3, [sp, #52]	; 0x34
   11da8:	str	r3, [sp, #60]	; 0x3c
   11dac:	strd	r2, [sp, #64]	; 0x40
   11db0:	str	r3, [sp, #72]	; 0x48
   11db4:	str	r3, [sp, #80]	; 0x50
   11db8:	str	r3, [sp, #88]	; 0x58
   11dbc:	ldr	r3, [sp, #180]	; 0xb4
   11dc0:	and	r3, r3, r2
   11dc4:	str	r3, [sp, #92]	; 0x5c
   11dc8:	ldr	r3, [sp, #180]	; 0xb4
   11dcc:	and	r3, r3, #4
   11dd0:	str	r3, [sp, #96]	; 0x60
   11dd4:	ldr	r3, [sp, #176]	; 0xb0
   11dd8:	mov	r4, r3
   11ddc:	str	r3, [sp, #56]	; 0x38
   11de0:	str	r3, [sp, #84]	; 0x54
   11de4:	b	119e0 <__assert_fail@plt+0xc94>
   11de8:	mov	r3, #1
   11dec:	mov	r4, #0
   11df0:	mov	r9, r4
   11df4:	str	r3, [sp, #32]
   11df8:	str	r3, [sp, #44]	; 0x2c
   11dfc:	str	r3, [sp, #48]	; 0x30
   11e00:	str	r4, [sp, #52]	; 0x34
   11e04:	str	r3, [sp, #56]	; 0x38
   11e08:	str	r3, [sp, #60]	; 0x3c
   11e0c:	str	r3, [sp, #88]	; 0x58
   11e10:	movw	r3, #26848	; 0x68e0
   11e14:	movt	r3, #1
   11e18:	str	r4, [sp, #64]	; 0x40
   11e1c:	str	r4, [sp, #68]	; 0x44
   11e20:	str	r3, [sp, #72]	; 0x48
   11e24:	ldr	r3, [sp, #180]	; 0xb4
   11e28:	str	r4, [sp, #80]	; 0x50
   11e2c:	str	r4, [sp, #84]	; 0x54
   11e30:	and	r3, r3, #1
   11e34:	str	r3, [sp, #92]	; 0x5c
   11e38:	ldr	r3, [sp, #180]	; 0xb4
   11e3c:	and	r3, r3, #4
   11e40:	str	r3, [sp, #96]	; 0x60
   11e44:	mov	r3, #5
   11e48:	str	r3, [sp, #176]	; 0xb0
   11e4c:	b	119e0 <__assert_fail@plt+0xc94>
   11e50:	mov	r3, #1
   11e54:	mov	r4, #0
   11e58:	mov	r9, r4
   11e5c:	str	r3, [sp, #32]
   11e60:	str	r4, [sp, #44]	; 0x2c
   11e64:	str	r3, [sp, #48]	; 0x30
   11e68:	str	r3, [sp, #60]	; 0x3c
   11e6c:	ldr	r3, [sp, #180]	; 0xb4
   11e70:	str	r4, [sp, #52]	; 0x34
   11e74:	str	r4, [sp, #56]	; 0x38
   11e78:	str	r4, [sp, #64]	; 0x40
   11e7c:	str	r4, [sp, #68]	; 0x44
   11e80:	and	r3, r3, #1
   11e84:	str	r4, [sp, #72]	; 0x48
   11e88:	str	r4, [sp, #80]	; 0x50
   11e8c:	str	r4, [sp, #84]	; 0x54
   11e90:	str	r3, [sp, #92]	; 0x5c
   11e94:	ldr	r3, [sp, #180]	; 0xb4
   11e98:	str	r4, [sp, #88]	; 0x58
   11e9c:	and	r3, r3, #4
   11ea0:	str	r3, [sp, #96]	; 0x60
   11ea4:	b	119e0 <__assert_fail@plt+0xc94>
   11ea8:	mov	r3, #0
   11eac:	mov	r2, #1
   11eb0:	ldr	r1, [sp, #176]	; 0xb0
   11eb4:	mov	r4, r3
   11eb8:	mov	r9, r3
   11ebc:	movw	r3, #26868	; 0x68f4
   11ec0:	movt	r3, #1
   11ec4:	str	r2, [sp, #32]
   11ec8:	str	r2, [sp, #44]	; 0x2c
   11ecc:	str	r4, [sp, #48]	; 0x30
   11ed0:	strd	r2, [sp, #68]	; 0x44
   11ed4:	ldr	r3, [sp, #180]	; 0xb4
   11ed8:	str	r2, [sp, #52]	; 0x34
   11edc:	str	r1, [sp, #56]	; 0x38
   11ee0:	str	r4, [sp, #60]	; 0x3c
   11ee4:	str	r2, [sp, #64]	; 0x40
   11ee8:	and	r3, r3, r2
   11eec:	str	r4, [sp, #80]	; 0x50
   11ef0:	str	r4, [sp, #84]	; 0x54
   11ef4:	str	r4, [sp, #88]	; 0x58
   11ef8:	str	r3, [sp, #92]	; 0x5c
   11efc:	ldr	r3, [sp, #180]	; 0xb4
   11f00:	and	r3, r3, #4
   11f04:	str	r3, [sp, #96]	; 0x60
   11f08:	mov	r3, #2
   11f0c:	str	r3, [sp, #176]	; 0xb0
   11f10:	b	119e0 <__assert_fail@plt+0xc94>
   11f14:	mov	r3, #1
   11f18:	mov	r2, #0
   11f1c:	mov	r4, r2
   11f20:	mov	r9, r2
   11f24:	str	r3, [sp, #32]
   11f28:	str	r3, [sp, #44]	; 0x2c
   11f2c:	str	r2, [sp, #48]	; 0x30
   11f30:	str	r3, [sp, #52]	; 0x34
   11f34:	str	r3, [sp, #56]	; 0x38
   11f38:	str	r3, [sp, #60]	; 0x3c
   11f3c:	str	r3, [sp, #64]	; 0x40
   11f40:	str	r3, [sp, #68]	; 0x44
   11f44:	str	r3, [sp, #88]	; 0x58
   11f48:	movw	r3, #26868	; 0x68f4
   11f4c:	movt	r3, #1
   11f50:	str	r3, [sp, #72]	; 0x48
   11f54:	ldr	r3, [sp, #180]	; 0xb4
   11f58:	str	r2, [sp, #80]	; 0x50
   11f5c:	str	r2, [sp, #84]	; 0x54
   11f60:	and	r3, r3, #1
   11f64:	b	11ef8 <__assert_fail@plt+0x11ac>
   11f68:	mov	r5, #102	; 0x66
   11f6c:	mov	r6, #0
   11f70:	ldr	r3, [sp, #44]	; 0x2c
   11f74:	cmp	r3, #0
   11f78:	bne	12e28 <__assert_fail@plt+0x20dc>
   11f7c:	ldr	r2, [sp, #52]	; 0x34
   11f80:	eor	r3, fp, #1
   11f84:	ands	r3, r2, r3
   11f88:	beq	11fc0 <__assert_fail@plt+0x1274>
   11f8c:	cmp	sl, r4
   11f90:	mov	fp, r3
   11f94:	movhi	r2, #39	; 0x27
   11f98:	strbhi	r2, [r9, r4]
   11f9c:	add	r2, r4, #1
   11fa0:	cmp	sl, r2
   11fa4:	movhi	r1, #36	; 0x24
   11fa8:	strbhi	r1, [r9, r2]
   11fac:	add	r2, r4, #2
   11fb0:	add	r4, r4, #3
   11fb4:	cmp	sl, r2
   11fb8:	movhi	r1, #39	; 0x27
   11fbc:	strbhi	r1, [r9, r2]
   11fc0:	cmp	sl, r4
   11fc4:	add	r7, r7, #1
   11fc8:	movhi	r3, #92	; 0x5c
   11fcc:	strbhi	r3, [r9, r4]
   11fd0:	add	r4, r4, #1
   11fd4:	cmp	r4, sl
   11fd8:	ldr	r3, [sp, #32]
   11fdc:	strbcc	r5, [r9, r4]
   11fe0:	cmp	r6, #0
   11fe4:	add	r4, r4, #1
   11fe8:	moveq	r3, #0
   11fec:	cmn	r8, #1
   11ff0:	str	r3, [sp, #32]
   11ff4:	bne	119f8 <__assert_fail@plt+0xcac>
   11ff8:	ldr	r3, [sp, #28]
   11ffc:	ldrb	r6, [r3, r7]
   12000:	adds	r6, r6, #0
   12004:	movne	r6, #1
   12008:	cmp	r6, #0
   1200c:	bne	11a08 <__assert_fail@plt+0xcbc>
   12010:	mov	r3, r9
   12014:	mov	r9, fp
   12018:	mov	fp, r3
   1201c:	ldr	r3, [sp, #68]	; 0x44
   12020:	cmp	r4, #0
   12024:	movne	r3, #0
   12028:	cmp	r3, #0
   1202c:	bne	13220 <__assert_fail@plt+0x24d4>
   12030:	ldr	r3, [sp, #44]	; 0x2c
   12034:	ldr	r2, [sp, #52]	; 0x34
   12038:	eor	r3, r3, #1
   1203c:	ands	r2, r3, r2
   12040:	beq	13158 <__assert_fail@plt+0x240c>
   12044:	ldr	r3, [sp, #80]	; 0x50
   12048:	cmp	r3, #0
   1204c:	beq	1315c <__assert_fail@plt+0x2410>
   12050:	ldr	r3, [sp, #32]
   12054:	cmp	r3, #0
   12058:	bne	131d0 <__assert_fail@plt+0x2484>
   1205c:	ldr	r3, [sp, #84]	; 0x54
   12060:	adds	r3, r3, #0
   12064:	movne	r3, #1
   12068:	cmp	sl, #0
   1206c:	movne	r3, #0
   12070:	cmp	r3, #0
   12074:	ldreq	r2, [sp, #80]	; 0x50
   12078:	beq	1315c <__assert_fail@plt+0x2410>
   1207c:	ldr	r2, [sp, #84]	; 0x54
   12080:	mov	sl, r2
   12084:	mov	r0, #0
   12088:	mov	r4, #1
   1208c:	mov	r1, #39	; 0x27
   12090:	str	r0, [sp, #44]	; 0x2c
   12094:	strb	r1, [fp]
   12098:	str	r0, [sp, #48]	; 0x30
   1209c:	str	r4, [sp, #52]	; 0x34
   120a0:	str	r4, [sp, #56]	; 0x38
   120a4:	str	r4, [sp, #64]	; 0x40
   120a8:	str	r0, [sp, #68]	; 0x44
   120ac:	str	r3, [sp, #80]	; 0x50
   120b0:	str	r2, [sp, #84]	; 0x54
   120b4:	str	r0, [sp, #88]	; 0x58
   120b8:	b	11cf8 <__assert_fail@plt+0xfac>
   120bc:	mov	r5, #98	; 0x62
   120c0:	b	11f6c <__assert_fail@plt+0x1220>
   120c4:	mov	r5, #97	; 0x61
   120c8:	b	11f6c <__assert_fail@plt+0x1220>
   120cc:	ldr	r3, [sp, #48]	; 0x30
   120d0:	str	r3, [sp, #40]	; 0x28
   120d4:	mov	r3, #116	; 0x74
   120d8:	ldr	r2, [sp, #68]	; 0x44
   120dc:	cmp	r2, #0
   120e0:	bne	122dc <__assert_fail@plt+0x1590>
   120e4:	ldr	r2, [sp, #60]	; 0x3c
   120e8:	cmp	r2, #0
   120ec:	bne	12238 <__assert_fail@plt+0x14ec>
   120f0:	ldr	r3, [sp, #44]	; 0x2c
   120f4:	mov	r6, #0
   120f8:	cmp	r3, #0
   120fc:	beq	122a8 <__assert_fail@plt+0x155c>
   12100:	mov	r3, fp
   12104:	ldr	r2, [sp, #184]	; 0xb8
   12108:	cmp	r2, #0
   1210c:	beq	1212c <__assert_fail@plt+0x13e0>
   12110:	ubfx	r1, r5, #5, #8
   12114:	mov	r0, r2
   12118:	and	r2, r5, #31
   1211c:	ldr	r1, [r0, r1, lsl #2]
   12120:	lsr	r2, r1, r2
   12124:	tst	r2, #1
   12128:	bne	11f70 <__assert_fail@plt+0x1224>
   1212c:	ldr	r2, [sp, #40]	; 0x28
   12130:	cmp	r2, #0
   12134:	addeq	r7, r7, #1
   12138:	bne	11f70 <__assert_fail@plt+0x1224>
   1213c:	cmp	r3, #0
   12140:	beq	11fd4 <__assert_fail@plt+0x1288>
   12144:	cmp	sl, r4
   12148:	mov	fp, #0
   1214c:	movhi	r3, #39	; 0x27
   12150:	strbhi	r3, [r9, r4]
   12154:	add	r3, r4, #1
   12158:	add	r4, r4, #2
   1215c:	cmp	sl, r3
   12160:	movhi	r2, #39	; 0x27
   12164:	strbhi	r2, [r9, r3]
   12168:	b	11fd4 <__assert_fail@plt+0x1288>
   1216c:	ldr	r3, [sp, #48]	; 0x30
   12170:	str	r3, [sp, #40]	; 0x28
   12174:	eor	r3, fp, #1
   12178:	ldr	r2, [sp, #52]	; 0x34
   1217c:	ands	r2, r2, r3
   12180:	beq	12e40 <__assert_fail@plt+0x20f4>
   12184:	cmp	sl, r4
   12188:	movhi	r3, #39	; 0x27
   1218c:	strbhi	r3, [r9, r4]
   12190:	add	r3, r4, #1
   12194:	cmp	sl, r3
   12198:	movhi	r1, #36	; 0x24
   1219c:	strbhi	r1, [r9, r3]
   121a0:	add	r3, r4, #2
   121a4:	cmp	sl, r3
   121a8:	movhi	r1, #39	; 0x27
   121ac:	strbhi	r1, [r9, r3]
   121b0:	add	r3, r4, #3
   121b4:	cmp	sl, r3
   121b8:	bls	12e8c <__assert_fail@plt+0x2140>
   121bc:	mov	r4, r3
   121c0:	mov	r3, #92	; 0x5c
   121c4:	mov	fp, r2
   121c8:	mov	r2, r4
   121cc:	strb	r3, [r9, r4]
   121d0:	ldr	r3, [sp, #176]	; 0xb0
   121d4:	add	r4, r4, #1
   121d8:	cmp	r3, #2
   121dc:	beq	12ef4 <__assert_fail@plt+0x21a8>
   121e0:	add	r3, r7, #1
   121e4:	cmp	r3, r8
   121e8:	bcs	12200 <__assert_fail@plt+0x14b4>
   121ec:	ldr	r1, [sp, #28]
   121f0:	ldrb	r3, [r1, r3]
   121f4:	sub	r3, r3, #48	; 0x30
   121f8:	cmp	r3, #9
   121fc:	bls	12f04 <__assert_fail@plt+0x21b8>
   12200:	mov	r3, #0
   12204:	mov	r5, #48	; 0x30
   12208:	ldr	r6, [sp, #64]	; 0x40
   1220c:	cmp	r6, #0
   12210:	beq	12104 <__assert_fail@plt+0x13b8>
   12214:	mov	r6, #0
   12218:	b	1212c <__assert_fail@plt+0x13e0>
   1221c:	ldr	r3, [sp, #48]	; 0x30
   12220:	str	r3, [sp, #40]	; 0x28
   12224:	ldr	r2, [sp, #60]	; 0x3c
   12228:	mov	r5, #13
   1222c:	mov	r3, #114	; 0x72
   12230:	cmp	r2, #0
   12234:	beq	120f0 <__assert_fail@plt+0x13a4>
   12238:	mov	r5, r3
   1223c:	b	11f6c <__assert_fail@plt+0x1220>
   12240:	ldr	r3, [sp, #48]	; 0x30
   12244:	str	r3, [sp, #40]	; 0x28
   12248:	mov	r3, #118	; 0x76
   1224c:	b	120e4 <__assert_fail@plt+0x1398>
   12250:	ldr	r3, [sp, #48]	; 0x30
   12254:	str	r3, [sp, #40]	; 0x28
   12258:	mov	r5, #10
   1225c:	mov	r3, #110	; 0x6e
   12260:	b	120e4 <__assert_fail@plt+0x1398>
   12264:	ldr	r3, [sp, #48]	; 0x30
   12268:	cmn	r8, #1
   1226c:	str	r3, [sp, #40]	; 0x28
   12270:	beq	126b8 <__assert_fail@plt+0x196c>
   12274:	subs	r3, r8, #1
   12278:	movne	r3, #1
   1227c:	cmp	r3, #0
   12280:	bne	1228c <__assert_fail@plt+0x1540>
   12284:	cmp	r7, #0
   12288:	beq	122d0 <__assert_fail@plt+0x1584>
   1228c:	mov	r6, #0
   12290:	ldr	r3, [sp, #64]	; 0x40
   12294:	cmp	r3, #0
   12298:	beq	12100 <__assert_fail@plt+0x13b4>
   1229c:	ldr	r3, [sp, #44]	; 0x2c
   122a0:	cmp	r3, #0
   122a4:	bne	12100 <__assert_fail@plt+0x13b4>
   122a8:	mov	r3, fp
   122ac:	b	1212c <__assert_fail@plt+0x13e0>
   122b0:	ldr	r3, [sp, #48]	; 0x30
   122b4:	str	r3, [sp, #40]	; 0x28
   122b8:	b	12284 <__assert_fail@plt+0x1538>
   122bc:	ldr	r3, [sp, #48]	; 0x30
   122c0:	str	r3, [sp, #40]	; 0x28
   122c4:	b	1228c <__assert_fail@plt+0x1540>
   122c8:	ldr	r6, [sp, #48]	; 0x30
   122cc:	str	r6, [sp, #40]	; 0x28
   122d0:	ldr	r3, [sp, #68]	; 0x44
   122d4:	cmp	r3, #0
   122d8:	beq	12290 <__assert_fail@plt+0x1544>
   122dc:	mov	r3, #2
   122e0:	mov	fp, r9
   122e4:	str	r3, [sp, #176]	; 0xb0
   122e8:	ldr	r3, [sp, #60]	; 0x3c
   122ec:	cmp	r3, #0
   122f0:	ldr	r3, [sp, #176]	; 0xb0
   122f4:	movne	r3, #4
   122f8:	str	r3, [sp, #176]	; 0xb0
   122fc:	mov	lr, #0
   12300:	mov	r0, fp
   12304:	ldr	r2, [sp, #28]
   12308:	ldr	r3, [sp, #180]	; 0xb4
   1230c:	ldr	r1, [sp, #188]	; 0xbc
   12310:	bic	ip, r3, #2
   12314:	ldr	r3, [sp, #176]	; 0xb0
   12318:	stm	sp, {r3, ip, lr}
   1231c:	mov	r3, r8
   12320:	ldr	ip, [sp, #192]	; 0xc0
   12324:	str	r1, [sp, #12]
   12328:	mov	r1, sl
   1232c:	str	ip, [sp, #16]
   12330:	bl	118bc <__assert_fail@plt+0xb70>
   12334:	mov	r4, r0
   12338:	mov	r0, r4
   1233c:	add	sp, sp, #140	; 0x8c
   12340:	ldrd	r4, [sp]
   12344:	ldrd	r6, [sp, #8]
   12348:	ldrd	r8, [sp, #16]
   1234c:	ldrd	sl, [sp, #24]
   12350:	add	sp, sp, #32
   12354:	pop	{pc}		; (ldr pc, [sp], #4)
   12358:	ldr	r3, [sp, #48]	; 0x30
   1235c:	str	r3, [sp, #40]	; 0x28
   12360:	ldr	r3, [sp, #176]	; 0xb0
   12364:	cmp	r3, #2
   12368:	beq	126e0 <__assert_fail@plt+0x1994>
   1236c:	ldr	r3, [sp, #88]	; 0x58
   12370:	cmp	r3, #0
   12374:	moveq	r5, #92	; 0x5c
   12378:	moveq	r3, r5
   1237c:	beq	120e4 <__assert_fail@plt+0x1398>
   12380:	add	r7, r7, #1
   12384:	mov	r3, fp
   12388:	mov	r6, #0
   1238c:	mov	r5, #92	; 0x5c
   12390:	b	1213c <__assert_fail@plt+0x13f0>
   12394:	ldr	r3, [sp, #64]	; 0x40
   12398:	cmp	r3, #0
   1239c:	bne	13214 <__assert_fail@plt+0x24c8>
   123a0:	ldr	r2, [sp, #48]	; 0x30
   123a4:	mov	r3, fp
   123a8:	mov	r6, r2
   123ac:	str	r2, [sp, #40]	; 0x28
   123b0:	b	12104 <__assert_fail@plt+0x13b8>
   123b4:	ldr	r3, [sp, #176]	; 0xb0
   123b8:	cmp	r3, #2
   123bc:	beq	13150 <__assert_fail@plt+0x2404>
   123c0:	cmp	r3, #5
   123c4:	ldr	r3, [sp, #48]	; 0x30
   123c8:	str	r3, [sp, #40]	; 0x28
   123cc:	bne	123f8 <__assert_fail@plt+0x16ac>
   123d0:	ldr	r3, [sp, #96]	; 0x60
   123d4:	cmp	r3, #0
   123d8:	beq	12e54 <__assert_fail@plt+0x2108>
   123dc:	add	r3, r7, #2
   123e0:	cmp	r3, r8
   123e4:	bcs	123f8 <__assert_fail@plt+0x16ac>
   123e8:	ldr	r2, [sp, #36]	; 0x24
   123ec:	ldrb	r5, [r2, #1]
   123f0:	cmp	r5, #63	; 0x3f
   123f4:	beq	12f3c <__assert_fail@plt+0x21f0>
   123f8:	mov	r6, #0
   123fc:	mov	r5, #63	; 0x3f
   12400:	b	12290 <__assert_fail@plt+0x1544>
   12404:	ldr	r3, [sp, #176]	; 0xb0
   12408:	cmp	r3, #2
   1240c:	ldr	r3, [sp, #48]	; 0x30
   12410:	beq	12bf8 <__assert_fail@plt+0x1eac>
   12414:	mov	r5, #39	; 0x27
   12418:	str	r3, [sp, #40]	; 0x28
   1241c:	str	r6, [sp, #80]	; 0x50
   12420:	b	12290 <__assert_fail@plt+0x1544>
   12424:	ldr	r3, [sp, #180]	; 0xb4
   12428:	cmp	r4, #0
   1242c:	and	r3, r3, #1
   12430:	str	r3, [sp, #92]	; 0x5c
   12434:	ldr	r3, [sp, #180]	; 0xb4
   12438:	and	r3, r3, #4
   1243c:	str	r3, [sp, #96]	; 0x60
   12440:	bne	13260 <__assert_fail@plt+0x2514>
   12444:	str	r4, [sp, #60]	; 0x3c
   12448:	cmp	sl, #0
   1244c:	bne	13244 <__assert_fail@plt+0x24f8>
   12450:	mov	r3, #1
   12454:	movw	r2, #26868	; 0x68f4
   12458:	movt	r2, #1
   1245c:	mov	r4, r3
   12460:	mov	r3, #2
   12464:	mov	r9, sl
   12468:	str	r4, [sp, #32]
   1246c:	str	sl, [sp, #44]	; 0x2c
   12470:	str	sl, [sp, #48]	; 0x30
   12474:	str	r4, [sp, #52]	; 0x34
   12478:	str	r4, [sp, #56]	; 0x38
   1247c:	str	r4, [sp, #64]	; 0x40
   12480:	str	sl, [sp, #68]	; 0x44
   12484:	str	r2, [sp, #72]	; 0x48
   12488:	str	sl, [sp, #80]	; 0x50
   1248c:	str	sl, [sp, #84]	; 0x54
   12490:	str	sl, [sp, #88]	; 0x58
   12494:	str	r3, [sp, #176]	; 0xb0
   12498:	b	119e0 <__assert_fail@plt+0xc94>
   1249c:	ldrb	r5, [r0, r7]
   124a0:	cmp	r5, #126	; 0x7e
   124a4:	ldrls	pc, [pc, r5, lsl #2]
   124a8:	b	1280c <__assert_fail@plt+0x1ac0>
   124ac:	ldrdeq	r2, [r1], -r8
   124b0:	andeq	r2, r1, ip, lsl #16
   124b4:	andeq	r2, r1, ip, lsl #16
   124b8:	andeq	r2, r1, ip, lsl #16
   124bc:	andeq	r2, r1, ip, lsl #16
   124c0:	andeq	r2, r1, ip, lsl #16
   124c4:	andeq	r2, r1, ip, lsl #16
   124c8:	andeq	r2, r1, r8, asr #15
   124cc:			; <UNDEFINED> instruction: 0x000127b8
   124d0:	andeq	r2, r1, ip, lsr r7
   124d4:	andeq	r2, r1, r8, lsr #15
   124d8:	andeq	r2, r1, ip, lsl r7
   124dc:	strdeq	r2, [r1], -ip
   124e0:	andeq	r2, r1, r8, lsl #15
   124e4:	andeq	r2, r1, ip, lsl #16
   124e8:	andeq	r2, r1, ip, lsl #16
   124ec:	andeq	r2, r1, ip, lsl #16
   124f0:	andeq	r2, r1, ip, lsl #16
   124f4:	andeq	r2, r1, ip, lsl #16
   124f8:	andeq	r2, r1, ip, lsl #16
   124fc:	andeq	r2, r1, ip, lsl #16
   12500:	andeq	r2, r1, ip, lsl #16
   12504:	andeq	r2, r1, ip, lsl #16
   12508:	andeq	r2, r1, ip, lsl #16
   1250c:	andeq	r2, r1, ip, lsl #16
   12510:	andeq	r2, r1, ip, lsl #16
   12514:	andeq	r2, r1, ip, lsl #16
   12518:	andeq	r2, r1, ip, lsl #16
   1251c:	andeq	r2, r1, ip, lsl #16
   12520:	andeq	r2, r1, ip, lsl #16
   12524:	andeq	r2, r1, ip, lsl #16
   12528:	andeq	r2, r1, ip, lsl #16
   1252c:	andeq	r2, r1, r0, lsr r7
   12530:	muleq	r1, r8, r7
   12534:	muleq	r1, r8, r7
   12538:	andeq	r2, r1, r0, lsl r7
   1253c:	muleq	r1, r8, r7
   12540:	andeq	r2, r1, r4, lsl #14
   12544:	muleq	r1, r8, r7
   12548:	andeq	r2, r1, r4, ror r7
   1254c:	muleq	r1, r8, r7
   12550:	muleq	r1, r8, r7
   12554:	muleq	r1, r8, r7
   12558:	andeq	r2, r1, r4, lsl #14
   1255c:	andeq	r2, r1, r4, lsl #14
   12560:	andeq	r2, r1, r4, lsl #14
   12564:	andeq	r2, r1, r4, lsl #14
   12568:	andeq	r2, r1, r4, lsl #14
   1256c:	andeq	r2, r1, r4, lsl #14
   12570:	andeq	r2, r1, r4, lsl #14
   12574:	andeq	r2, r1, r4, lsl #14
   12578:	andeq	r2, r1, r4, lsl #14
   1257c:	andeq	r2, r1, r4, lsl #14
   12580:	andeq	r2, r1, r4, lsl #14
   12584:	andeq	r2, r1, r4, lsl #14
   12588:	andeq	r2, r1, r4, lsl #14
   1258c:	andeq	r2, r1, r4, lsl #14
   12590:	andeq	r2, r1, r4, lsl #14
   12594:	andeq	r2, r1, r4, lsl #14
   12598:	muleq	r1, r8, r7
   1259c:	muleq	r1, r8, r7
   125a0:	muleq	r1, r8, r7
   125a4:	muleq	r1, r8, r7
   125a8:	andeq	r2, r1, ip, asr #14
   125ac:	andeq	r2, r1, ip, lsl #16
   125b0:	andeq	r2, r1, r4, lsl #14
   125b4:	andeq	r2, r1, r4, lsl #14
   125b8:	andeq	r2, r1, r4, lsl #14
   125bc:	andeq	r2, r1, r4, lsl #14
   125c0:	andeq	r2, r1, r4, lsl #14
   125c4:	andeq	r2, r1, r4, lsl #14
   125c8:	andeq	r2, r1, r4, lsl #14
   125cc:	andeq	r2, r1, r4, lsl #14
   125d0:	andeq	r2, r1, r4, lsl #14
   125d4:	andeq	r2, r1, r4, lsl #14
   125d8:	andeq	r2, r1, r4, lsl #14
   125dc:	andeq	r2, r1, r4, lsl #14
   125e0:	andeq	r2, r1, r4, lsl #14
   125e4:	andeq	r2, r1, r4, lsl #14
   125e8:	andeq	r2, r1, r4, lsl #14
   125ec:	andeq	r2, r1, r4, lsl #14
   125f0:	andeq	r2, r1, r4, lsl #14
   125f4:	andeq	r2, r1, r4, lsl #14
   125f8:	andeq	r2, r1, r4, lsl #14
   125fc:	andeq	r2, r1, r4, lsl #14
   12600:	andeq	r2, r1, r4, lsl #14
   12604:	andeq	r2, r1, r4, lsl #14
   12608:	andeq	r2, r1, r4, lsl #14
   1260c:	andeq	r2, r1, r4, lsl #14
   12610:	andeq	r2, r1, r4, lsl #14
   12614:	andeq	r2, r1, r4, lsl #14
   12618:	muleq	r1, r8, r7
   1261c:	andeq	r2, r1, ip, asr #13
   12620:	andeq	r2, r1, r4, lsl #14
   12624:	muleq	r1, r8, r7
   12628:	andeq	r2, r1, r4, lsl #14
   1262c:	muleq	r1, r8, r7
   12630:	andeq	r2, r1, r4, lsl #14
   12634:	andeq	r2, r1, r4, lsl #14
   12638:	andeq	r2, r1, r4, lsl #14
   1263c:	andeq	r2, r1, r4, lsl #14
   12640:	andeq	r2, r1, r4, lsl #14
   12644:	andeq	r2, r1, r4, lsl #14
   12648:	andeq	r2, r1, r4, lsl #14
   1264c:	andeq	r2, r1, r4, lsl #14
   12650:	andeq	r2, r1, r4, lsl #14
   12654:	andeq	r2, r1, r4, lsl #14
   12658:	andeq	r2, r1, r4, lsl #14
   1265c:	andeq	r2, r1, r4, lsl #14
   12660:	andeq	r2, r1, r4, lsl #14
   12664:	andeq	r2, r1, r4, lsl #14
   12668:	andeq	r2, r1, r4, lsl #14
   1266c:	andeq	r2, r1, r4, lsl #14
   12670:	andeq	r2, r1, r4, lsl #14
   12674:	andeq	r2, r1, r4, lsl #14
   12678:	andeq	r2, r1, r4, lsl #14
   1267c:	andeq	r2, r1, r4, lsl #14
   12680:	andeq	r2, r1, r4, lsl #14
   12684:	andeq	r2, r1, r4, lsl #14
   12688:	andeq	r2, r1, r4, lsl #14
   1268c:	andeq	r2, r1, r4, lsl #14
   12690:	andeq	r2, r1, r4, lsl #14
   12694:	andeq	r2, r1, r4, lsl #14
   12698:	andeq	r2, r1, r8, lsr #13
   1269c:	muleq	r1, r8, r7
   126a0:	andeq	r2, r1, r8, lsr #13
   126a4:	andeq	r2, r1, r0, lsl r7
   126a8:	mov	r3, #0
   126ac:	cmn	r8, #1
   126b0:	str	r3, [sp, #40]	; 0x28
   126b4:	bne	12274 <__assert_fail@plt+0x1528>
   126b8:	ldr	r3, [sp, #28]
   126bc:	ldrb	r3, [r3, #1]
   126c0:	adds	r3, r3, #0
   126c4:	movne	r3, #1
   126c8:	b	1227c <__assert_fail@plt+0x1530>
   126cc:	mov	r3, #0
   126d0:	str	r3, [sp, #40]	; 0x28
   126d4:	ldr	r3, [sp, #176]	; 0xb0
   126d8:	cmp	r3, #2
   126dc:	bne	1236c <__assert_fail@plt+0x1620>
   126e0:	ldr	r3, [sp, #44]	; 0x2c
   126e4:	cmp	r3, #0
   126e8:	bne	13028 <__assert_fail@plt+0x22dc>
   126ec:	mov	r6, r3
   126f0:	add	r7, r7, #1
   126f4:	mov	r3, fp
   126f8:	mov	r5, #92	; 0x5c
   126fc:	b	1213c <__assert_fail@plt+0x13f0>
   12700:	ldr	r6, [sp, #48]	; 0x30
   12704:	mov	r3, #0
   12708:	str	r3, [sp, #40]	; 0x28
   1270c:	b	12290 <__assert_fail@plt+0x1544>
   12710:	mov	r3, #0
   12714:	str	r3, [sp, #40]	; 0x28
   12718:	b	12284 <__assert_fail@plt+0x1538>
   1271c:	mov	r3, #0
   12720:	str	r3, [sp, #40]	; 0x28
   12724:	mov	r3, #118	; 0x76
   12728:	b	120e4 <__assert_fail@plt+0x1398>
   1272c:	ldr	r6, [sp, #48]	; 0x30
   12730:	mov	r3, #0
   12734:	str	r3, [sp, #40]	; 0x28
   12738:	b	122d0 <__assert_fail@plt+0x1584>
   1273c:	mov	r3, #0
   12740:	str	r3, [sp, #40]	; 0x28
   12744:	mov	r3, #116	; 0x74
   12748:	b	120d8 <__assert_fail@plt+0x138c>
   1274c:	ldr	r3, [sp, #176]	; 0xb0
   12750:	cmp	r3, #2
   12754:	beq	12c64 <__assert_fail@plt+0x1f18>
   12758:	cmp	r3, #5
   1275c:	mov	r3, #0
   12760:	str	r3, [sp, #40]	; 0x28
   12764:	beq	123d0 <__assert_fail@plt+0x1684>
   12768:	mov	r6, #0
   1276c:	mov	r5, #63	; 0x3f
   12770:	b	12290 <__assert_fail@plt+0x1544>
   12774:	ldr	r3, [sp, #176]	; 0xb0
   12778:	cmp	r3, #2
   1277c:	beq	12bec <__assert_fail@plt+0x1ea0>
   12780:	mov	r3, #0
   12784:	b	12414 <__assert_fail@plt+0x16c8>
   12788:	mov	r3, #0
   1278c:	str	r3, [sp, #40]	; 0x28
   12790:	mov	r3, #114	; 0x72
   12794:	b	120d8 <__assert_fail@plt+0x138c>
   12798:	mov	r3, #0
   1279c:	mov	r6, r3
   127a0:	str	r3, [sp, #40]	; 0x28
   127a4:	b	122d0 <__assert_fail@plt+0x1584>
   127a8:	mov	r3, #0
   127ac:	str	r3, [sp, #40]	; 0x28
   127b0:	mov	r3, #110	; 0x6e
   127b4:	b	120d8 <__assert_fail@plt+0x138c>
   127b8:	mov	r3, #0
   127bc:	str	r3, [sp, #40]	; 0x28
   127c0:	mov	r3, #98	; 0x62
   127c4:	b	120e4 <__assert_fail@plt+0x1398>
   127c8:	mov	r3, #0
   127cc:	str	r3, [sp, #40]	; 0x28
   127d0:	mov	r3, #97	; 0x61
   127d4:	b	120e4 <__assert_fail@plt+0x1398>
   127d8:	ldr	r3, [sp, #60]	; 0x3c
   127dc:	cmp	r3, #0
   127e0:	bne	12bd0 <__assert_fail@plt+0x1e84>
   127e4:	ldr	r3, [sp, #92]	; 0x5c
   127e8:	cmp	r3, #0
   127ec:	addne	r7, r7, #1
   127f0:	bne	119f0 <__assert_fail@plt+0xca4>
   127f4:	str	r3, [sp, #40]	; 0x28
   127f8:	b	120f0 <__assert_fail@plt+0x13a4>
   127fc:	mov	r3, #0
   12800:	str	r3, [sp, #40]	; 0x28
   12804:	mov	r3, #102	; 0x66
   12808:	b	120e4 <__assert_fail@plt+0x1398>
   1280c:	mov	r3, #0
   12810:	str	r3, [sp, #40]	; 0x28
   12814:	ldr	r3, [sp, #76]	; 0x4c
   12818:	cmp	r3, #1
   1281c:	bne	12c84 <__assert_fail@plt+0x1f38>
   12820:	bl	10c68 <__ctype_b_loc@plt>
   12824:	ldr	r2, [r0]
   12828:	sxth	r3, r5
   1282c:	lsl	r3, r3, #1
   12830:	ldr	r1, [sp, #76]	; 0x4c
   12834:	ldrh	r3, [r2, r3]
   12838:	mov	r0, r1
   1283c:	and	r3, r3, #16384	; 0x4000
   12840:	cmp	r3, #0
   12844:	ldr	r3, [sp, #60]	; 0x3c
   12848:	movne	r6, #1
   1284c:	moveq	r6, #0
   12850:	movne	r2, #0
   12854:	andeq	r2, r3, #1
   12858:	cmp	r2, #0
   1285c:	beq	12290 <__assert_fail@plt+0x1544>
   12860:	ldr	r2, [sp, #60]	; 0x3c
   12864:	mov	r6, #0
   12868:	add	r1, r7, r0
   1286c:	mov	ip, #39	; 0x27
   12870:	str	r6, [sp, #100]	; 0x64
   12874:	mov	r0, #0
   12878:	ldr	lr, [sp, #36]	; 0x24
   1287c:	str	r8, [sp, #36]	; 0x24
   12880:	ldr	r6, [sp, #40]	; 0x28
   12884:	ldr	r8, [sp, #44]	; 0x2c
   12888:	b	12938 <__assert_fail@plt+0x1bec>
   1288c:	cmp	r8, #0
   12890:	bne	12e6c <__assert_fail@plt+0x2120>
   12894:	ldr	r0, [sp, #52]	; 0x34
   12898:	eor	r3, fp, #1
   1289c:	ands	r3, r0, r3
   128a0:	beq	128d0 <__assert_fail@plt+0x1b84>
   128a4:	cmp	sl, r4
   128a8:	add	r0, r4, #1
   128ac:	strbhi	ip, [r9, r4]
   128b0:	cmp	sl, r0
   128b4:	movhi	fp, #36	; 0x24
   128b8:	strbhi	fp, [r9, r0]
   128bc:	add	r0, r4, #2
   128c0:	mov	fp, r3
   128c4:	cmp	sl, r0
   128c8:	add	r4, r4, #3
   128cc:	strbhi	ip, [r9, r0]
   128d0:	cmp	sl, r4
   128d4:	movhi	r3, #92	; 0x5c
   128d8:	strbhi	r3, [r9, r4]
   128dc:	add	r3, r4, #1
   128e0:	cmp	sl, r3
   128e4:	bls	128f4 <__assert_fail@plt+0x1ba8>
   128e8:	lsr	r0, r5, #6
   128ec:	add	r0, r0, #48	; 0x30
   128f0:	strb	r0, [r9, r3]
   128f4:	add	r3, r4, #2
   128f8:	cmp	sl, r3
   128fc:	bls	1290c <__assert_fail@plt+0x1bc0>
   12900:	ubfx	r0, r5, #3, #3
   12904:	add	r0, r0, #48	; 0x30
   12908:	strb	r0, [r9, r3]
   1290c:	add	r7, r7, #1
   12910:	and	r5, r5, #7
   12914:	cmp	r1, r7
   12918:	add	r5, r5, #48	; 0x30
   1291c:	add	r4, r4, #3
   12920:	bls	12e80 <__assert_fail@plt+0x2134>
   12924:	mov	r0, r2
   12928:	cmp	sl, r4
   1292c:	strbhi	r5, [r9, r4]
   12930:	add	r4, r4, #1
   12934:	ldrb	r5, [lr, #1]!
   12938:	cmp	r2, #0
   1293c:	bne	1288c <__assert_fail@plt+0x1b40>
   12940:	eor	r3, r0, #1
   12944:	cmp	r6, #0
   12948:	and	r3, r3, fp
   1294c:	uxtb	r3, r3
   12950:	beq	12964 <__assert_fail@plt+0x1c18>
   12954:	cmp	sl, r4
   12958:	movhi	r6, #92	; 0x5c
   1295c:	strbhi	r6, [r9, r4]
   12960:	add	r4, r4, #1
   12964:	add	r7, r7, #1
   12968:	cmp	r7, r1
   1296c:	bcs	12e60 <__assert_fail@plt+0x2114>
   12970:	cmp	r3, #0
   12974:	beq	12ea4 <__assert_fail@plt+0x2158>
   12978:	cmp	sl, r4
   1297c:	add	r3, r4, #1
   12980:	mov	r6, #0
   12984:	strbhi	ip, [r9, r4]
   12988:	cmp	sl, r3
   1298c:	add	r4, r4, #2
   12990:	mov	fp, r6
   12994:	strbhi	ip, [r9, r3]
   12998:	b	12928 <__assert_fail@plt+0x1bdc>
   1299c:	ldr	r3, [sp, #36]	; 0x24
   129a0:	ldrb	r5, [r3]
   129a4:	cmp	r5, #126	; 0x7e
   129a8:	ldrls	pc, [pc, r5, lsl #2]
   129ac:	b	1280c <__assert_fail@plt+0x1ac0>
   129b0:	ldrdeq	r2, [r1], -r0
   129b4:	andeq	r2, r1, ip, lsl #16
   129b8:	andeq	r2, r1, ip, lsl #16
   129bc:	andeq	r2, r1, ip, lsl #16
   129c0:	andeq	r2, r1, ip, lsl #16
   129c4:	andeq	r2, r1, ip, lsl #16
   129c8:	andeq	r2, r1, ip, lsl #16
   129cc:	andeq	r2, r1, r4, asr #1
   129d0:	strheq	r2, [r1], -ip
   129d4:	andeq	r2, r1, ip, lsr r7
   129d8:	andeq	r2, r1, r4, asr #23
   129dc:	andeq	r2, r1, ip, lsl r7
   129e0:	andeq	r1, r1, r8, ror #30
   129e4:			; <UNDEFINED> instruction: 0x00012bb8
   129e8:	andeq	r2, r1, ip, lsl #16
   129ec:	andeq	r2, r1, ip, lsl #16
   129f0:	andeq	r2, r1, ip, lsl #16
   129f4:	andeq	r2, r1, ip, lsl #16
   129f8:	andeq	r2, r1, ip, lsl #16
   129fc:	andeq	r2, r1, ip, lsl #16
   12a00:	andeq	r2, r1, ip, lsl #16
   12a04:	andeq	r2, r1, ip, lsl #16
   12a08:	andeq	r2, r1, ip, lsl #16
   12a0c:	andeq	r2, r1, ip, lsl #16
   12a10:	andeq	r2, r1, ip, lsl #16
   12a14:	andeq	r2, r1, ip, lsl #16
   12a18:	andeq	r2, r1, ip, lsl #16
   12a1c:	andeq	r2, r1, ip, lsl #16
   12a20:	andeq	r2, r1, ip, lsl #16
   12a24:	andeq	r2, r1, ip, lsl #16
   12a28:	andeq	r2, r1, ip, lsl #16
   12a2c:	andeq	r2, r1, ip, lsl #16
   12a30:	andeq	r2, r1, ip, lsr #14
   12a34:	andeq	r2, r1, ip, lsr #23
   12a38:	andeq	r2, r1, ip, lsr #23
   12a3c:	andeq	r2, r1, r0, lsl r7
   12a40:	andeq	r2, r1, ip, lsr #23
   12a44:	andeq	r2, r1, r0, lsl #14
   12a48:	andeq	r2, r1, ip, lsr #23
   12a4c:	andeq	r2, r1, r4, ror r7
   12a50:	andeq	r2, r1, ip, lsr #23
   12a54:	andeq	r2, r1, ip, lsr #23
   12a58:	andeq	r2, r1, ip, lsr #23
   12a5c:	andeq	r2, r1, r0, lsl #14
   12a60:	andeq	r2, r1, r0, lsl #14
   12a64:	andeq	r2, r1, r0, lsl #14
   12a68:	andeq	r2, r1, r0, lsl #14
   12a6c:	andeq	r2, r1, r0, lsl #14
   12a70:	andeq	r2, r1, r0, lsl #14
   12a74:	andeq	r2, r1, r0, lsl #14
   12a78:	andeq	r2, r1, r0, lsl #14
   12a7c:	andeq	r2, r1, r0, lsl #14
   12a80:	andeq	r2, r1, r0, lsl #14
   12a84:	andeq	r2, r1, r0, lsl #14
   12a88:	andeq	r2, r1, r0, lsl #14
   12a8c:	andeq	r2, r1, r0, lsl #14
   12a90:	andeq	r2, r1, r0, lsl #14
   12a94:	andeq	r2, r1, r0, lsl #14
   12a98:	andeq	r2, r1, r0, lsl #14
   12a9c:	andeq	r2, r1, ip, lsr #23
   12aa0:	andeq	r2, r1, ip, lsr #23
   12aa4:	andeq	r2, r1, ip, lsr #23
   12aa8:	andeq	r2, r1, ip, lsr #23
   12aac:	andeq	r2, r1, ip, asr #14
   12ab0:	andeq	r2, r1, ip, lsl #16
   12ab4:	andeq	r2, r1, r0, lsl #14
   12ab8:	andeq	r2, r1, r0, lsl #14
   12abc:	andeq	r2, r1, r0, lsl #14
   12ac0:	andeq	r2, r1, r0, lsl #14
   12ac4:	andeq	r2, r1, r0, lsl #14
   12ac8:	andeq	r2, r1, r0, lsl #14
   12acc:	andeq	r2, r1, r0, lsl #14
   12ad0:	andeq	r2, r1, r0, lsl #14
   12ad4:	andeq	r2, r1, r0, lsl #14
   12ad8:	andeq	r2, r1, r0, lsl #14
   12adc:	andeq	r2, r1, r0, lsl #14
   12ae0:	andeq	r2, r1, r0, lsl #14
   12ae4:	andeq	r2, r1, r0, lsl #14
   12ae8:	andeq	r2, r1, r0, lsl #14
   12aec:	andeq	r2, r1, r0, lsl #14
   12af0:	andeq	r2, r1, r0, lsl #14
   12af4:	andeq	r2, r1, r0, lsl #14
   12af8:	andeq	r2, r1, r0, lsl #14
   12afc:	andeq	r2, r1, r0, lsl #14
   12b00:	andeq	r2, r1, r0, lsl #14
   12b04:	andeq	r2, r1, r0, lsl #14
   12b08:	andeq	r2, r1, r0, lsl #14
   12b0c:	andeq	r2, r1, r0, lsl #14
   12b10:	andeq	r2, r1, r0, lsl #14
   12b14:	andeq	r2, r1, r0, lsl #14
   12b18:	andeq	r2, r1, r0, lsl #14
   12b1c:	andeq	r2, r1, ip, lsr #23
   12b20:	andeq	r2, r1, ip, asr #13
   12b24:	andeq	r2, r1, r0, lsl #14
   12b28:	andeq	r2, r1, ip, lsr #23
   12b2c:	andeq	r2, r1, r0, lsl #14
   12b30:	andeq	r2, r1, ip, lsr #23
   12b34:	andeq	r2, r1, r0, lsl #14
   12b38:	andeq	r2, r1, r0, lsl #14
   12b3c:	andeq	r2, r1, r0, lsl #14
   12b40:	andeq	r2, r1, r0, lsl #14
   12b44:	andeq	r2, r1, r0, lsl #14
   12b48:	andeq	r2, r1, r0, lsl #14
   12b4c:	andeq	r2, r1, r0, lsl #14
   12b50:	andeq	r2, r1, r0, lsl #14
   12b54:	andeq	r2, r1, r0, lsl #14
   12b58:	andeq	r2, r1, r0, lsl #14
   12b5c:	andeq	r2, r1, r0, lsl #14
   12b60:	andeq	r2, r1, r0, lsl #14
   12b64:	andeq	r2, r1, r0, lsl #14
   12b68:	andeq	r2, r1, r0, lsl #14
   12b6c:	andeq	r2, r1, r0, lsl #14
   12b70:	andeq	r2, r1, r0, lsl #14
   12b74:	andeq	r2, r1, r0, lsl #14
   12b78:	andeq	r2, r1, r0, lsl #14
   12b7c:	andeq	r2, r1, r0, lsl #14
   12b80:	andeq	r2, r1, r0, lsl #14
   12b84:	andeq	r2, r1, r0, lsl #14
   12b88:	andeq	r2, r1, r0, lsl #14
   12b8c:	andeq	r2, r1, r0, lsl #14
   12b90:	andeq	r2, r1, r0, lsl #14
   12b94:	andeq	r2, r1, r0, lsl #14
   12b98:	andeq	r2, r1, r0, lsl #14
   12b9c:	andeq	r2, r1, r8, lsr #13
   12ba0:	andeq	r2, r1, ip, lsr #23
   12ba4:	andeq	r2, r1, r8, lsr #13
   12ba8:	andeq	r2, r1, r0, lsl r7
   12bac:	mov	r3, #0
   12bb0:	str	r3, [sp, #40]	; 0x28
   12bb4:	b	1228c <__assert_fail@plt+0x1540>
   12bb8:	mov	r3, #0
   12bbc:	str	r3, [sp, #40]	; 0x28
   12bc0:	b	12224 <__assert_fail@plt+0x14d8>
   12bc4:	mov	r3, #0
   12bc8:	str	r3, [sp, #40]	; 0x28
   12bcc:	b	12258 <__assert_fail@plt+0x150c>
   12bd0:	ldr	r3, [sp, #44]	; 0x2c
   12bd4:	cmp	r3, #0
   12bd8:	beq	12170 <__assert_fail@plt+0x1424>
   12bdc:	ldr	r3, [sp, #52]	; 0x34
   12be0:	mov	fp, r9
   12be4:	str	r3, [sp, #60]	; 0x3c
   12be8:	b	122e8 <__assert_fail@plt+0x159c>
   12bec:	ldr	r3, [sp, #44]	; 0x2c
   12bf0:	cmp	r3, #0
   12bf4:	bne	13028 <__assert_fail@plt+0x22dc>
   12bf8:	str	r3, [sp, #40]	; 0x28
   12bfc:	cmp	sl, #0
   12c00:	ldr	r3, [sp, #84]	; 0x54
   12c04:	clz	r3, r3
   12c08:	lsr	r3, r3, #5
   12c0c:	moveq	r3, #0
   12c10:	cmp	r3, #0
   12c14:	strne	sl, [sp, #84]	; 0x54
   12c18:	movne	sl, #0
   12c1c:	bne	12c4c <__assert_fail@plt+0x1f00>
   12c20:	cmp	sl, r4
   12c24:	movhi	r3, #39	; 0x27
   12c28:	strbhi	r3, [r9, r4]
   12c2c:	add	r3, r4, #1
   12c30:	cmp	sl, r3
   12c34:	movhi	r2, #92	; 0x5c
   12c38:	strbhi	r2, [r9, r3]
   12c3c:	add	r3, r4, #2
   12c40:	cmp	sl, r3
   12c44:	movhi	r2, #39	; 0x27
   12c48:	strbhi	r2, [r9, r3]
   12c4c:	mov	r3, #0
   12c50:	add	r4, r4, #3
   12c54:	str	r6, [sp, #80]	; 0x50
   12c58:	mov	fp, r3
   12c5c:	mov	r5, #39	; 0x27
   12c60:	b	1212c <__assert_fail@plt+0x13e0>
   12c64:	ldr	r3, [sp, #44]	; 0x2c
   12c68:	cmp	r3, #0
   12c6c:	bne	13028 <__assert_fail@plt+0x22dc>
   12c70:	mov	r6, #0
   12c74:	mov	r5, #63	; 0x3f
   12c78:	str	r3, [sp, #40]	; 0x28
   12c7c:	mov	r3, fp
   12c80:	b	1212c <__assert_fail@plt+0x13e0>
   12c84:	mov	r2, #0
   12c88:	mov	r3, #0
   12c8c:	cmn	r8, #1
   12c90:	strd	r2, [sp, #128]	; 0x80
   12c94:	bne	12ca4 <__assert_fail@plt+0x1f58>
   12c98:	ldr	r0, [sp, #28]
   12c9c:	bl	10c80 <strlen@plt>
   12ca0:	mov	r8, r0
   12ca4:	str	r9, [sp, #100]	; 0x64
   12ca8:	mov	r3, #0
   12cac:	strd	sl, [sp, #104]	; 0x68
   12cb0:	ldr	sl, [sp, #28]
   12cb4:	str	r5, [sp, #112]	; 0x70
   12cb8:	mov	r5, r3
   12cbc:	ldr	r9, [sp, #68]	; 0x44
   12cc0:	str	r4, [sp, #116]	; 0x74
   12cc4:	add	r4, r7, r5
   12cc8:	add	r3, sp, #128	; 0x80
   12ccc:	add	fp, sl, r4
   12cd0:	sub	r2, r8, r4
   12cd4:	mov	r1, fp
   12cd8:	add	r0, sp, #124	; 0x7c
   12cdc:	bl	160cc <__assert_fail@plt+0x5380>
   12ce0:	subs	r1, r0, #0
   12ce4:	beq	12d24 <__assert_fail@plt+0x1fd8>
   12ce8:	cmn	r1, #1
   12cec:	beq	1307c <__assert_fail@plt+0x2330>
   12cf0:	cmn	r1, #2
   12cf4:	beq	1309c <__assert_fail@plt+0x2350>
   12cf8:	cmp	r9, #0
   12cfc:	bne	12d54 <__assert_fail@plt+0x2008>
   12d00:	ldr	r0, [sp, #124]	; 0x7c
   12d04:	add	r5, r5, r1
   12d08:	bl	10bd8 <iswprint@plt>
   12d0c:	cmp	r0, #0
   12d10:	add	r0, sp, #128	; 0x80
   12d14:	moveq	r6, #0
   12d18:	bl	10ba8 <mbsinit@plt>
   12d1c:	cmp	r0, #0
   12d20:	beq	12cc4 <__assert_fail@plt+0x1f78>
   12d24:	ldr	r3, [sp, #60]	; 0x3c
   12d28:	add	r9, sp, #100	; 0x64
   12d2c:	mov	r0, r5
   12d30:	ldm	r9, {r9, sl, fp}
   12d34:	eor	r2, r6, #1
   12d38:	ldr	r5, [sp, #112]	; 0x70
   12d3c:	and	r2, r2, r3
   12d40:	uxtb	r2, r2
   12d44:	ldr	r4, [sp, #116]	; 0x74
   12d48:	cmp	r0, #1
   12d4c:	bhi	12868 <__assert_fail@plt+0x1b1c>
   12d50:	b	12858 <__assert_fail@plt+0x1b0c>
   12d54:	cmp	r1, #1
   12d58:	beq	12d00 <__assert_fail@plt+0x1fb4>
   12d5c:	add	r2, r4, #1
   12d60:	add	r3, sl, r1
   12d64:	add	r2, sl, r2
   12d68:	add	r4, r3, r4
   12d6c:	ldrb	r3, [r2], #1
   12d70:	sub	r3, r3, #91	; 0x5b
   12d74:	cmp	r3, #33	; 0x21
   12d78:	ldrls	pc, [pc, r3, lsl #2]
   12d7c:	b	12e08 <__assert_fail@plt+0x20bc>
   12d80:	andeq	r2, r1, r4, lsl lr
   12d84:	andeq	r2, r1, r4, lsl lr
   12d88:	andeq	r2, r1, r8, lsl #28
   12d8c:	andeq	r2, r1, r4, lsl lr
   12d90:	andeq	r2, r1, r8, lsl #28
   12d94:	andeq	r2, r1, r4, lsl lr
   12d98:	andeq	r2, r1, r8, lsl #28
   12d9c:	andeq	r2, r1, r8, lsl #28
   12da0:	andeq	r2, r1, r8, lsl #28
   12da4:	andeq	r2, r1, r8, lsl #28
   12da8:	andeq	r2, r1, r8, lsl #28
   12dac:	andeq	r2, r1, r8, lsl #28
   12db0:	andeq	r2, r1, r8, lsl #28
   12db4:	andeq	r2, r1, r8, lsl #28
   12db8:	andeq	r2, r1, r8, lsl #28
   12dbc:	andeq	r2, r1, r8, lsl #28
   12dc0:	andeq	r2, r1, r8, lsl #28
   12dc4:	andeq	r2, r1, r8, lsl #28
   12dc8:	andeq	r2, r1, r8, lsl #28
   12dcc:	andeq	r2, r1, r8, lsl #28
   12dd0:	andeq	r2, r1, r8, lsl #28
   12dd4:	andeq	r2, r1, r8, lsl #28
   12dd8:	andeq	r2, r1, r8, lsl #28
   12ddc:	andeq	r2, r1, r8, lsl #28
   12de0:	andeq	r2, r1, r8, lsl #28
   12de4:	andeq	r2, r1, r8, lsl #28
   12de8:	andeq	r2, r1, r8, lsl #28
   12dec:	andeq	r2, r1, r8, lsl #28
   12df0:	andeq	r2, r1, r8, lsl #28
   12df4:	andeq	r2, r1, r8, lsl #28
   12df8:	andeq	r2, r1, r8, lsl #28
   12dfc:	andeq	r2, r1, r8, lsl #28
   12e00:	andeq	r2, r1, r8, lsl #28
   12e04:	andeq	r2, r1, r4, lsl lr
   12e08:	cmp	r4, r2
   12e0c:	bne	12d6c <__assert_fail@plt+0x2020>
   12e10:	b	12d00 <__assert_fail@plt+0x1fb4>
   12e14:	mov	r3, #2
   12e18:	ldr	fp, [sp, #100]	; 0x64
   12e1c:	str	r3, [sp, #176]	; 0xb0
   12e20:	ldr	sl, [sp, #104]	; 0x68
   12e24:	b	122e8 <__assert_fail@plt+0x159c>
   12e28:	ldr	r2, [sp, #52]	; 0x34
   12e2c:	mov	fp, r9
   12e30:	ldr	r3, [sp, #60]	; 0x3c
   12e34:	and	r3, r3, r2
   12e38:	str	r3, [sp, #60]	; 0x3c
   12e3c:	b	122e8 <__assert_fail@plt+0x159c>
   12e40:	cmp	sl, r4
   12e44:	movhi	r2, fp
   12e48:	bhi	121c0 <__assert_fail@plt+0x1474>
   12e4c:	mov	r2, r4
   12e50:	b	121d0 <__assert_fail@plt+0x1484>
   12e54:	mov	r6, r3
   12e58:	mov	r5, #63	; 0x3f
   12e5c:	b	12290 <__assert_fail@plt+0x1544>
   12e60:	ldr	r8, [sp, #36]	; 0x24
   12e64:	ldr	r6, [sp, #100]	; 0x64
   12e68:	b	1213c <__assert_fail@plt+0x13f0>
   12e6c:	mov	fp, r9
   12e70:	ldr	r8, [sp, #36]	; 0x24
   12e74:	ldr	r3, [sp, #52]	; 0x34
   12e78:	str	r3, [sp, #60]	; 0x3c
   12e7c:	b	122e8 <__assert_fail@plt+0x159c>
   12e80:	ldr	r8, [sp, #36]	; 0x24
   12e84:	ldr	r6, [sp, #100]	; 0x64
   12e88:	b	11fd4 <__assert_fail@plt+0x1288>
   12e8c:	mov	r3, #0
   12e90:	add	r4, r4, #4
   12e94:	mov	fp, r2
   12e98:	mov	r6, r3
   12e9c:	mov	r5, #48	; 0x30
   12ea0:	b	1212c <__assert_fail@plt+0x13e0>
   12ea4:	mov	r6, r3
   12ea8:	b	12928 <__assert_fail@plt+0x1bdc>
   12eac:	mov	r3, #1
   12eb0:	movw	r2, #26848	; 0x68e0
   12eb4:	movt	r2, #1
   12eb8:	mov	r4, r3
   12ebc:	mov	r9, sl
   12ec0:	str	r3, [sp, #32]
   12ec4:	str	sl, [sp, #44]	; 0x2c
   12ec8:	str	r3, [sp, #48]	; 0x30
   12ecc:	str	sl, [sp, #52]	; 0x34
   12ed0:	str	r3, [sp, #56]	; 0x38
   12ed4:	str	r3, [sp, #60]	; 0x3c
   12ed8:	str	sl, [sp, #64]	; 0x40
   12edc:	str	sl, [sp, #68]	; 0x44
   12ee0:	str	r2, [sp, #72]	; 0x48
   12ee4:	str	sl, [sp, #80]	; 0x50
   12ee8:	str	sl, [sp, #84]	; 0x54
   12eec:	str	sl, [sp, #88]	; 0x58
   12ef0:	b	119e0 <__assert_fail@plt+0xc94>
   12ef4:	mov	r3, #0
   12ef8:	mov	r5, #48	; 0x30
   12efc:	mov	r6, r3
   12f00:	b	1212c <__assert_fail@plt+0x13e0>
   12f04:	cmp	sl, r4
   12f08:	mov	r5, #48	; 0x30
   12f0c:	movhi	r3, #48	; 0x30
   12f10:	strbhi	r3, [r9, r4]
   12f14:	add	r3, r2, #2
   12f18:	add	r4, r2, #3
   12f1c:	cmp	sl, r3
   12f20:	movhi	r1, #48	; 0x30
   12f24:	strbhi	r1, [r9, r3]
   12f28:	mov	r3, #0
   12f2c:	b	12208 <__assert_fail@plt+0x14bc>
   12f30:	ldr	r3, [sp, #48]	; 0x30
   12f34:	str	r3, [sp, #40]	; 0x28
   12f38:	b	12814 <__assert_fail@plt+0x1ac8>
   12f3c:	ldr	r2, [sp, #28]
   12f40:	ldrb	r2, [r2, r3]
   12f44:	sub	r1, r2, #33	; 0x21
   12f48:	cmp	r1, #29
   12f4c:	ldrls	pc, [pc, r1, lsl #2]
   12f50:	b	1228c <__assert_fail@plt+0x1540>
   12f54:	andeq	r2, r1, ip, asr #31
   12f58:	andeq	r2, r1, ip, lsl #5
   12f5c:	andeq	r2, r1, ip, lsl #5
   12f60:	andeq	r2, r1, ip, lsl #5
   12f64:	andeq	r2, r1, ip, lsl #5
   12f68:	andeq	r2, r1, ip, lsl #5
   12f6c:	andeq	r2, r1, ip, asr #31
   12f70:	andeq	r2, r1, ip, asr #31
   12f74:	andeq	r2, r1, ip, asr #31
   12f78:	andeq	r2, r1, ip, lsl #5
   12f7c:	andeq	r2, r1, ip, lsl #5
   12f80:	andeq	r2, r1, ip, lsl #5
   12f84:	andeq	r2, r1, ip, asr #31
   12f88:	andeq	r2, r1, ip, lsl #5
   12f8c:	andeq	r2, r1, ip, asr #31
   12f90:	andeq	r2, r1, ip, lsl #5
   12f94:	andeq	r2, r1, ip, lsl #5
   12f98:	andeq	r2, r1, ip, lsl #5
   12f9c:	andeq	r2, r1, ip, lsl #5
   12fa0:	andeq	r2, r1, ip, lsl #5
   12fa4:	andeq	r2, r1, ip, lsl #5
   12fa8:	andeq	r2, r1, ip, lsl #5
   12fac:	andeq	r2, r1, ip, lsl #5
   12fb0:	andeq	r2, r1, ip, lsl #5
   12fb4:	andeq	r2, r1, ip, lsl #5
   12fb8:	andeq	r2, r1, ip, lsl #5
   12fbc:	andeq	r2, r1, ip, lsl #5
   12fc0:	andeq	r2, r1, ip, asr #31
   12fc4:	andeq	r2, r1, ip, asr #31
   12fc8:	andeq	r2, r1, ip, asr #31
   12fcc:	ldr	r1, [sp, #44]	; 0x2c
   12fd0:	cmp	r1, #0
   12fd4:	bne	13234 <__assert_fail@plt+0x24e8>
   12fd8:	cmp	sl, r4
   12fdc:	mov	r7, r3
   12fe0:	movhi	r1, #63	; 0x3f
   12fe4:	mov	r5, r2
   12fe8:	mov	r3, fp
   12fec:	strbhi	r1, [r9, r4]
   12ff0:	add	r1, r4, #1
   12ff4:	cmp	sl, r1
   12ff8:	movhi	r0, #34	; 0x22
   12ffc:	strbhi	r0, [r9, r1]
   13000:	add	r1, r4, #2
   13004:	cmp	sl, r1
   13008:	movhi	r0, #34	; 0x22
   1300c:	strbhi	r0, [r9, r1]
   13010:	add	r1, r4, #3
   13014:	add	r4, r4, #4
   13018:	cmp	sl, r1
   1301c:	movhi	r0, #63	; 0x3f
   13020:	strbhi	r0, [r9, r1]
   13024:	b	12208 <__assert_fail@plt+0x14bc>
   13028:	mov	fp, r9
   1302c:	b	122e8 <__assert_fail@plt+0x159c>
   13030:	ldr	r3, [sp, #188]	; 0xbc
   13034:	ldrb	r3, [r3]
   13038:	cmp	r3, #0
   1303c:	beq	11978 <__assert_fail@plt+0xc2c>
   13040:	ldr	r2, [sp, #188]	; 0xbc
   13044:	cmp	sl, r4
   13048:	bls	13068 <__assert_fail@plt+0x231c>
   1304c:	strb	r3, [fp, r4]
   13050:	add	r4, r4, #1
   13054:	ldrb	r3, [r2, #1]!
   13058:	cmp	r3, #0
   1305c:	beq	11978 <__assert_fail@plt+0xc2c>
   13060:	cmp	sl, r4
   13064:	bhi	1304c <__assert_fail@plt+0x2300>
   13068:	ldrb	r3, [r2, #1]!
   1306c:	add	r4, r4, #1
   13070:	cmp	r3, #0
   13074:	bne	13044 <__assert_fail@plt+0x22f8>
   13078:	b	11978 <__assert_fail@plt+0xc2c>
   1307c:	add	r9, sp, #100	; 0x64
   13080:	mov	r0, r5
   13084:	ldr	r2, [sp, #60]	; 0x3c
   13088:	mov	r6, #0
   1308c:	ldm	r9, {r9, sl, fp}
   13090:	ldr	r5, [sp, #112]	; 0x70
   13094:	ldr	r4, [sp, #116]	; 0x74
   13098:	b	12d48 <__assert_fail@plt+0x1ffc>
   1309c:	cmp	r4, r8
   130a0:	add	r9, sp, #100	; 0x64
   130a4:	mov	r1, r4
   130a8:	mov	r2, fp
   130ac:	ldm	r9, {r9, sl, fp}
   130b0:	mov	r3, r5
   130b4:	mov	r0, r5
   130b8:	ldr	r5, [sp, #112]	; 0x70
   130bc:	ldr	r4, [sp, #116]	; 0x74
   130c0:	bcs	130f4 <__assert_fail@plt+0x23a8>
   130c4:	ldrb	r6, [r2]
   130c8:	cmp	r6, #0
   130cc:	bne	130e0 <__assert_fail@plt+0x2394>
   130d0:	b	1322c <__assert_fail@plt+0x24e0>
   130d4:	ldrb	r6, [r2, #1]!
   130d8:	cmp	r6, #0
   130dc:	beq	131c4 <__assert_fail@plt+0x2478>
   130e0:	add	r3, r3, #1
   130e4:	add	r1, r7, r3
   130e8:	cmp	r8, r1
   130ec:	bhi	130d4 <__assert_fail@plt+0x2388>
   130f0:	mov	r0, r3
   130f4:	mov	r6, #0
   130f8:	ldr	r2, [sp, #60]	; 0x3c
   130fc:	b	12d48 <__assert_fail@plt+0x1ffc>
   13100:	mov	r3, #1
   13104:	mov	r4, #0
   13108:	mov	r9, r4
   1310c:	str	r3, [sp, #32]
   13110:	str	r3, [sp, #44]	; 0x2c
   13114:	str	r3, [sp, #48]	; 0x30
   13118:	str	r4, [sp, #52]	; 0x34
   1311c:	str	r3, [sp, #56]	; 0x38
   13120:	str	r3, [sp, #60]	; 0x3c
   13124:	str	r3, [sp, #88]	; 0x58
   13128:	movw	r3, #26848	; 0x68e0
   1312c:	movt	r3, #1
   13130:	str	r4, [sp, #64]	; 0x40
   13134:	str	r4, [sp, #68]	; 0x44
   13138:	str	r3, [sp, #72]	; 0x48
   1313c:	str	r4, [sp, #80]	; 0x50
   13140:	str	r4, [sp, #84]	; 0x54
   13144:	b	119e0 <__assert_fail@plt+0xc94>
   13148:	mov	fp, r9
   1314c:	b	122fc <__assert_fail@plt+0x15b0>
   13150:	ldr	r3, [sp, #48]	; 0x30
   13154:	b	12c70 <__assert_fail@plt+0x1f24>
   13158:	mov	r2, r3
   1315c:	ldr	r3, [sp, #72]	; 0x48
   13160:	cmp	r3, #0
   13164:	moveq	r2, #0
   13168:	andne	r2, r2, #1
   1316c:	cmp	r2, #0
   13170:	beq	131a0 <__assert_fail@plt+0x2454>
   13174:	mov	r2, r3
   13178:	ldrb	r3, [r3]
   1317c:	cmp	r3, #0
   13180:	beq	131a0 <__assert_fail@plt+0x2454>
   13184:	cmp	sl, r4
   13188:	bls	131b0 <__assert_fail@plt+0x2464>
   1318c:	strb	r3, [fp, r4]
   13190:	add	r4, r4, #1
   13194:	ldrb	r3, [r2, #1]!
   13198:	cmp	r3, #0
   1319c:	bne	13184 <__assert_fail@plt+0x2438>
   131a0:	cmp	sl, r4
   131a4:	movhi	r3, #0
   131a8:	strbhi	r3, [fp, r4]
   131ac:	b	12338 <__assert_fail@plt+0x15ec>
   131b0:	ldrb	r3, [r2, #1]!
   131b4:	add	r4, r4, #1
   131b8:	cmp	r3, #0
   131bc:	bne	13184 <__assert_fail@plt+0x2438>
   131c0:	b	131a0 <__assert_fail@plt+0x2454>
   131c4:	mov	r0, r3
   131c8:	ldr	r2, [sp, #60]	; 0x3c
   131cc:	b	12d48 <__assert_fail@plt+0x1ffc>
   131d0:	mov	ip, #5
   131d4:	mov	r3, r8
   131d8:	ldr	r1, [sp, #84]	; 0x54
   131dc:	str	ip, [sp]
   131e0:	ldr	r2, [sp, #180]	; 0xb4
   131e4:	ldr	ip, [sp, #188]	; 0xbc
   131e8:	ldr	r0, [sp, #184]	; 0xb8
   131ec:	str	r2, [sp, #4]
   131f0:	ldr	r2, [sp, #28]
   131f4:	str	ip, [sp, #12]
   131f8:	ldr	ip, [sp, #192]	; 0xc0
   131fc:	str	r0, [sp, #8]
   13200:	mov	r0, fp
   13204:	str	ip, [sp, #16]
   13208:	bl	118bc <__assert_fail@plt+0xb70>
   1320c:	mov	r4, r0
   13210:	b	12338 <__assert_fail@plt+0x15ec>
   13214:	mov	r6, r3
   13218:	str	r3, [sp, #40]	; 0x28
   1321c:	b	122a8 <__assert_fail@plt+0x155c>
   13220:	mov	r3, #2
   13224:	str	r3, [sp, #176]	; 0xb0
   13228:	b	122e8 <__assert_fail@plt+0x159c>
   1322c:	ldr	r2, [sp, #60]	; 0x3c
   13230:	b	12d48 <__assert_fail@plt+0x1ffc>
   13234:	mov	r3, #5
   13238:	mov	fp, r9
   1323c:	str	r3, [sp, #176]	; 0xb0
   13240:	b	122fc <__assert_fail@plt+0x15b0>
   13244:	mov	r1, #1
   13248:	mov	r3, #0
   1324c:	mov	r2, r3
   13250:	mov	r9, r3
   13254:	str	r1, [sp, #32]
   13258:	str	sl, [sp, #84]	; 0x54
   1325c:	b	12084 <__assert_fail@plt+0x1338>
   13260:	mov	r3, #0
   13264:	mov	r2, #1
   13268:	mov	r9, r3
   1326c:	mov	r4, r3
   13270:	str	r2, [sp, #32]
   13274:	strd	r2, [sp, #44]	; 0x2c
   13278:	strd	r2, [sp, #56]	; 0x38
   1327c:	str	r3, [sp, #80]	; 0x50
   13280:	str	r3, [sp, #84]	; 0x54
   13284:	str	r3, [sp, #88]	; 0x58
   13288:	movw	r3, #26868	; 0x68f4
   1328c:	movt	r3, #1
   13290:	str	r2, [sp, #52]	; 0x34
   13294:	str	r2, [sp, #64]	; 0x40
   13298:	str	r2, [sp, #68]	; 0x44
   1329c:	str	r3, [sp, #72]	; 0x48
   132a0:	b	119e0 <__assert_fail@plt+0xc94>
   132a4:	bl	10d40 <abort@plt>
   132a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   132ac:	mov	r4, r0
   132b0:	mov	r5, r3
   132b4:	strd	r6, [sp, #8]
   132b8:	movw	r7, #28884	; 0x70d4
   132bc:	movt	r7, #2
   132c0:	strd	r8, [sp, #16]
   132c4:	strd	sl, [sp, #24]
   132c8:	mov	sl, r1
   132cc:	mov	fp, r2
   132d0:	str	lr, [sp, #32]
   132d4:	sub	sp, sp, #60	; 0x3c
   132d8:	bl	10c98 <__errno_location@plt>
   132dc:	mov	r8, r0
   132e0:	cmn	r4, #-2147483647	; 0x80000001
   132e4:	ldr	r6, [r7]
   132e8:	movne	r0, #0
   132ec:	moveq	r0, #1
   132f0:	ldr	r3, [r8]
   132f4:	orrs	r0, r0, r4, lsr #31
   132f8:	str	r3, [sp, #28]
   132fc:	bne	1348c <__assert_fail@plt+0x2740>
   13300:	ldr	r3, [r7, #4]
   13304:	cmp	r3, r4
   13308:	bgt	13368 <__assert_fail@plt+0x261c>
   1330c:	add	r1, r7, #8
   13310:	sub	r2, r4, r3
   13314:	str	r3, [sp, #52]	; 0x34
   13318:	cmp	r6, r1
   1331c:	add	r2, r2, #1
   13320:	beq	13464 <__assert_fail@plt+0x2718>
   13324:	mov	r1, #8
   13328:	mov	r0, r6
   1332c:	mvn	r3, #-2147483648	; 0x80000000
   13330:	str	r1, [sp]
   13334:	add	r1, sp, #52	; 0x34
   13338:	bl	15b7c <__assert_fail@plt+0x4e30>
   1333c:	mov	r6, r0
   13340:	str	r0, [r7]
   13344:	ldr	r0, [r7, #4]
   13348:	mov	r1, #0
   1334c:	ldr	r2, [sp, #52]	; 0x34
   13350:	sub	r2, r2, r0
   13354:	add	r0, r6, r0, lsl #3
   13358:	lsl	r2, r2, #3
   1335c:	bl	10cb0 <memset@plt>
   13360:	ldr	r3, [sp, #52]	; 0x34
   13364:	str	r3, [r7, #4]
   13368:	ldr	r1, [r5, #4]
   1336c:	add	r0, r6, r4, lsl #3
   13370:	add	ip, r5, #8
   13374:	mov	r3, fp
   13378:	mov	r2, sl
   1337c:	ldr	r7, [r0, #4]
   13380:	str	r0, [sp, #36]	; 0x24
   13384:	str	ip, [sp, #40]	; 0x28
   13388:	orr	r0, r1, #1
   1338c:	ldr	r9, [r6, r4, lsl #3]
   13390:	str	ip, [sp, #8]
   13394:	ldr	lr, [r5, #44]	; 0x2c
   13398:	str	r0, [sp, #4]
   1339c:	ldr	ip, [r5]
   133a0:	mov	r1, r9
   133a4:	str	ip, [sp, #32]
   133a8:	ldr	ip, [r5, #40]	; 0x28
   133ac:	str	ip, [sp, #12]
   133b0:	ldr	ip, [sp, #32]
   133b4:	str	lr, [sp, #16]
   133b8:	str	r0, [sp, #44]	; 0x2c
   133bc:	mov	r0, r7
   133c0:	str	ip, [sp]
   133c4:	bl	118bc <__assert_fail@plt+0xb70>
   133c8:	cmp	r9, r0
   133cc:	bhi	1343c <__assert_fail@plt+0x26f0>
   133d0:	add	r9, r0, #1
   133d4:	movw	r3, #29004	; 0x714c
   133d8:	movt	r3, #2
   133dc:	cmp	r7, r3
   133e0:	str	r9, [r6, r4, lsl #3]
   133e4:	beq	133f0 <__assert_fail@plt+0x26a4>
   133e8:	mov	r0, r7
   133ec:	bl	15f60 <__assert_fail@plt+0x5214>
   133f0:	mov	r0, r9
   133f4:	bl	158d8 <__assert_fail@plt+0x4b8c>
   133f8:	ldr	ip, [r5]
   133fc:	mov	r3, fp
   13400:	mov	r2, sl
   13404:	mov	r1, r9
   13408:	mov	r7, r0
   1340c:	ldr	lr, [sp, #36]	; 0x24
   13410:	ldr	r4, [r5, #40]	; 0x28
   13414:	str	r0, [lr, #4]
   13418:	ldr	lr, [r5, #44]	; 0x2c
   1341c:	str	ip, [sp]
   13420:	ldr	ip, [sp, #44]	; 0x2c
   13424:	str	ip, [sp, #4]
   13428:	ldr	ip, [sp, #40]	; 0x28
   1342c:	str	r4, [sp, #12]
   13430:	str	lr, [sp, #16]
   13434:	str	ip, [sp, #8]
   13438:	bl	118bc <__assert_fail@plt+0xb70>
   1343c:	ldr	r3, [sp, #28]
   13440:	mov	r0, r7
   13444:	str	r3, [r8]
   13448:	add	sp, sp, #60	; 0x3c
   1344c:	ldrd	r4, [sp]
   13450:	ldrd	r6, [sp, #8]
   13454:	ldrd	r8, [sp, #16]
   13458:	ldrd	sl, [sp, #24]
   1345c:	add	sp, sp, #32
   13460:	pop	{pc}		; (ldr pc, [sp], #4)
   13464:	mov	r1, #8
   13468:	mvn	r3, #-2147483648	; 0x80000000
   1346c:	str	r1, [sp]
   13470:	add	r1, sp, #52	; 0x34
   13474:	bl	15b7c <__assert_fail@plt+0x4e30>
   13478:	ldrd	r2, [r7, #8]
   1347c:	mov	r6, r0
   13480:	str	r0, [r7]
   13484:	strd	r2, [r0]
   13488:	b	13344 <__assert_fail@plt+0x25f8>
   1348c:	bl	10d40 <abort@plt>
   13490:	strd	r4, [sp, #-16]!
   13494:	mov	r5, r0
   13498:	str	r6, [sp, #8]
   1349c:	str	lr, [sp, #12]
   134a0:	bl	10c98 <__errno_location@plt>
   134a4:	mov	r4, r0
   134a8:	cmp	r5, #0
   134ac:	ldr	r0, [pc, #32]	; 134d4 <__assert_fail@plt+0x2788>
   134b0:	mov	r1, #48	; 0x30
   134b4:	movne	r0, r5
   134b8:	ldr	r6, [r4]
   134bc:	bl	15d1c <__assert_fail@plt+0x4fd0>
   134c0:	str	r6, [r4]
   134c4:	ldrd	r4, [sp]
   134c8:	ldr	r6, [sp, #8]
   134cc:	add	sp, sp, #12
   134d0:	pop	{pc}		; (ldr pc, [sp], #4)
   134d4:	andeq	r7, r2, ip, asr #4
   134d8:	ldr	r3, [pc, #12]	; 134ec <__assert_fail@plt+0x27a0>
   134dc:	cmp	r0, #0
   134e0:	moveq	r0, r3
   134e4:	ldr	r0, [r0]
   134e8:	bx	lr
   134ec:	andeq	r7, r2, ip, asr #4
   134f0:	ldr	r3, [pc, #12]	; 13504 <__assert_fail@plt+0x27b8>
   134f4:	cmp	r0, #0
   134f8:	moveq	r0, r3
   134fc:	str	r1, [r0]
   13500:	bx	lr
   13504:	andeq	r7, r2, ip, asr #4
   13508:	ldr	r3, [pc, #52]	; 13544 <__assert_fail@plt+0x27f8>
   1350c:	cmp	r0, #0
   13510:	push	{lr}		; (str lr, [sp, #-4]!)
   13514:	lsr	lr, r1, #5
   13518:	and	r1, r1, #31
   1351c:	moveq	r0, r3
   13520:	add	r3, r0, #8
   13524:	ldr	ip, [r3, lr, lsl #2]
   13528:	lsr	r0, ip, r1
   1352c:	eor	r2, r2, r0
   13530:	and	r0, r0, #1
   13534:	and	r2, r2, #1
   13538:	eor	r1, ip, r2, lsl r1
   1353c:	str	r1, [r3, lr, lsl #2]
   13540:	pop	{pc}		; (ldr pc, [sp], #4)
   13544:	andeq	r7, r2, ip, asr #4
   13548:	ldr	r3, [pc, #16]	; 13560 <__assert_fail@plt+0x2814>
   1354c:	cmp	r0, #0
   13550:	movne	r3, r0
   13554:	ldr	r0, [r3, #4]
   13558:	str	r1, [r3, #4]
   1355c:	bx	lr
   13560:	andeq	r7, r2, ip, asr #4
   13564:	ldr	r3, [pc, #48]	; 1359c <__assert_fail@plt+0x2850>
   13568:	cmp	r0, #0
   1356c:	mov	ip, #10
   13570:	moveq	r0, r3
   13574:	cmp	r2, #0
   13578:	cmpne	r1, #0
   1357c:	str	ip, [r0]
   13580:	beq	13590 <__assert_fail@plt+0x2844>
   13584:	str	r1, [r0, #40]	; 0x28
   13588:	str	r2, [r0, #44]	; 0x2c
   1358c:	bx	lr
   13590:	str	r4, [sp, #-8]!
   13594:	str	lr, [sp, #4]
   13598:	bl	10d40 <abort@plt>
   1359c:	andeq	r7, r2, ip, asr #4
   135a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   135a4:	strd	r6, [sp, #8]
   135a8:	mov	r7, r0
   135ac:	mov	r6, r1
   135b0:	strd	r8, [sp, #16]
   135b4:	mov	r8, r2
   135b8:	mov	r9, r3
   135bc:	str	lr, [sp, #24]
   135c0:	sub	sp, sp, #28
   135c4:	ldr	r4, [sp, #56]	; 0x38
   135c8:	ldr	ip, [pc, #104]	; 13638 <__assert_fail@plt+0x28ec>
   135cc:	cmp	r4, #0
   135d0:	moveq	r4, ip
   135d4:	bl	10c98 <__errno_location@plt>
   135d8:	ldr	ip, [r4, #44]	; 0x2c
   135dc:	mov	r5, r0
   135e0:	mov	r1, r6
   135e4:	add	lr, r4, #8
   135e8:	mov	r3, r9
   135ec:	ldr	r6, [r5]
   135f0:	mov	r2, r8
   135f4:	mov	r0, r7
   135f8:	str	ip, [sp, #16]
   135fc:	ldr	ip, [r4, #40]	; 0x28
   13600:	str	lr, [sp, #8]
   13604:	str	ip, [sp, #12]
   13608:	ldr	ip, [r4, #4]
   1360c:	str	ip, [sp, #4]
   13610:	ldr	ip, [r4]
   13614:	str	ip, [sp]
   13618:	bl	118bc <__assert_fail@plt+0xb70>
   1361c:	str	r6, [r5]
   13620:	add	sp, sp, #28
   13624:	ldrd	r4, [sp]
   13628:	ldrd	r6, [sp, #8]
   1362c:	ldrd	r8, [sp, #16]
   13630:	add	sp, sp, #24
   13634:	pop	{pc}		; (ldr pc, [sp], #4)
   13638:	andeq	r7, r2, ip, asr #4
   1363c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13640:	cmp	r2, #0
   13644:	ldr	r4, [pc, #192]	; 1370c <__assert_fail@plt+0x29c0>
   13648:	movne	r4, r2
   1364c:	strd	r6, [sp, #8]
   13650:	strd	r8, [sp, #16]
   13654:	mov	r9, r1
   13658:	mov	r8, r0
   1365c:	strd	sl, [sp, #24]
   13660:	str	lr, [sp, #32]
   13664:	sub	sp, sp, #36	; 0x24
   13668:	bl	10c98 <__errno_location@plt>
   1366c:	ldr	r5, [r4, #4]
   13670:	mov	r6, r0
   13674:	add	r7, r4, #8
   13678:	mov	r1, #0
   1367c:	mov	r3, r9
   13680:	ldr	ip, [r4, #44]	; 0x2c
   13684:	mov	r2, r8
   13688:	mov	r0, r1
   1368c:	ldr	sl, [r6]
   13690:	orr	r5, r5, #1
   13694:	str	ip, [sp, #16]
   13698:	ldr	ip, [r4, #40]	; 0x28
   1369c:	stmib	sp, {r5, r7, ip}
   136a0:	ldr	ip, [r4]
   136a4:	str	ip, [sp]
   136a8:	bl	118bc <__assert_fail@plt+0xb70>
   136ac:	add	r1, r0, #1
   136b0:	mov	r0, r1
   136b4:	str	r1, [sp, #28]
   136b8:	bl	158d8 <__assert_fail@plt+0x4b8c>
   136bc:	ldr	ip, [r4, #44]	; 0x2c
   136c0:	mov	fp, r0
   136c4:	mov	r3, r9
   136c8:	mov	r2, r8
   136cc:	ldr	r1, [sp, #28]
   136d0:	str	ip, [sp, #16]
   136d4:	ldr	ip, [r4, #40]	; 0x28
   136d8:	stmib	sp, {r5, r7, ip}
   136dc:	ldr	ip, [r4]
   136e0:	str	ip, [sp]
   136e4:	bl	118bc <__assert_fail@plt+0xb70>
   136e8:	mov	r0, fp
   136ec:	str	sl, [r6]
   136f0:	add	sp, sp, #36	; 0x24
   136f4:	ldrd	r4, [sp]
   136f8:	ldrd	r6, [sp, #8]
   136fc:	ldrd	r8, [sp, #16]
   13700:	ldrd	sl, [sp, #24]
   13704:	add	sp, sp, #32
   13708:	pop	{pc}		; (ldr pc, [sp], #4)
   1370c:	andeq	r7, r2, ip, asr #4
   13710:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13714:	cmp	r3, #0
   13718:	ldr	r4, [pc, #220]	; 137fc <__assert_fail@plt+0x2ab0>
   1371c:	movne	r4, r3
   13720:	strd	r6, [sp, #8]
   13724:	mov	r6, r2
   13728:	strd	r8, [sp, #16]
   1372c:	mov	r9, r0
   13730:	strd	sl, [sp, #24]
   13734:	mov	sl, r1
   13738:	str	lr, [sp, #32]
   1373c:	sub	sp, sp, #44	; 0x2c
   13740:	bl	10c98 <__errno_location@plt>
   13744:	ldr	r5, [r4, #4]
   13748:	mov	r7, r0
   1374c:	mov	r1, #0
   13750:	add	r8, r4, #8
   13754:	mov	r3, sl
   13758:	ldr	ip, [r4, #44]	; 0x2c
   1375c:	mov	r2, r9
   13760:	mov	r0, r1
   13764:	ldr	lr, [r7]
   13768:	cmp	r6, r1
   1376c:	orreq	r5, r5, #1
   13770:	str	ip, [sp, #16]
   13774:	ldr	ip, [r4, #40]	; 0x28
   13778:	stmib	sp, {r5, r8, ip}
   1377c:	ldr	ip, [r4]
   13780:	str	lr, [sp, #28]
   13784:	str	ip, [sp]
   13788:	bl	118bc <__assert_fail@plt+0xb70>
   1378c:	add	r1, r0, #1
   13790:	mov	fp, r0
   13794:	mov	r0, r1
   13798:	str	r1, [sp, #36]	; 0x24
   1379c:	bl	158d8 <__assert_fail@plt+0x4b8c>
   137a0:	ldr	ip, [r4, #44]	; 0x2c
   137a4:	mov	r3, sl
   137a8:	mov	r2, r9
   137ac:	ldr	r1, [sp, #36]	; 0x24
   137b0:	str	ip, [sp, #16]
   137b4:	ldr	ip, [r4, #40]	; 0x28
   137b8:	str	r0, [sp, #32]
   137bc:	stmib	sp, {r5, r8, ip}
   137c0:	ldr	ip, [r4]
   137c4:	str	ip, [sp]
   137c8:	bl	118bc <__assert_fail@plt+0xb70>
   137cc:	ldr	lr, [sp, #28]
   137d0:	cmp	r6, #0
   137d4:	ldr	r0, [sp, #32]
   137d8:	str	lr, [r7]
   137dc:	strne	fp, [r6]
   137e0:	add	sp, sp, #44	; 0x2c
   137e4:	ldrd	r4, [sp]
   137e8:	ldrd	r6, [sp, #8]
   137ec:	ldrd	r8, [sp, #16]
   137f0:	ldrd	sl, [sp, #24]
   137f4:	add	sp, sp, #32
   137f8:	pop	{pc}		; (ldr pc, [sp], #4)
   137fc:	andeq	r7, r2, ip, asr #4
   13800:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13804:	movw	r5, #28884	; 0x70d4
   13808:	movt	r5, #2
   1380c:	ldr	r3, [r5, #4]
   13810:	strd	r6, [sp, #8]
   13814:	str	r8, [sp, #16]
   13818:	str	lr, [sp, #20]
   1381c:	ldr	r7, [r5]
   13820:	cmp	r3, #1
   13824:	ble	13848 <__assert_fail@plt+0x2afc>
   13828:	mov	r4, #1
   1382c:	add	r6, r7, #4
   13830:	ldr	r0, [r6, r4, lsl #3]
   13834:	add	r4, r4, #1
   13838:	bl	15f60 <__assert_fail@plt+0x5214>
   1383c:	ldr	r3, [r5, #4]
   13840:	cmp	r3, r4
   13844:	bgt	13830 <__assert_fail@plt+0x2ae4>
   13848:	ldr	r0, [r7, #4]
   1384c:	movw	r4, #29004	; 0x714c
   13850:	movt	r4, #2
   13854:	cmp	r0, r4
   13858:	beq	1386c <__assert_fail@plt+0x2b20>
   1385c:	bl	15f60 <__assert_fail@plt+0x5214>
   13860:	mov	r3, #256	; 0x100
   13864:	str	r3, [r5, #8]
   13868:	str	r4, [r5, #12]
   1386c:	ldr	r4, [pc, #44]	; 138a0 <__assert_fail@plt+0x2b54>
   13870:	cmp	r7, r4
   13874:	beq	13884 <__assert_fail@plt+0x2b38>
   13878:	mov	r0, r7
   1387c:	bl	15f60 <__assert_fail@plt+0x5214>
   13880:	str	r4, [r5]
   13884:	mov	r3, #1
   13888:	ldrd	r6, [sp, #8]
   1388c:	str	r3, [r5, #4]
   13890:	ldrd	r4, [sp]
   13894:	ldr	r8, [sp, #16]
   13898:	add	sp, sp, #20
   1389c:	pop	{pc}		; (ldr pc, [sp], #4)
   138a0:	ldrdeq	r7, [r2], -ip
   138a4:	ldr	r3, [pc, #4]	; 138b0 <__assert_fail@plt+0x2b64>
   138a8:	mvn	r2, #0
   138ac:	b	132a8 <__assert_fail@plt+0x255c>
   138b0:	andeq	r7, r2, ip, asr #4
   138b4:	ldr	r3, [pc]	; 138bc <__assert_fail@plt+0x2b70>
   138b8:	b	132a8 <__assert_fail@plt+0x255c>
   138bc:	andeq	r7, r2, ip, asr #4
   138c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138c4:	movw	r4, #28884	; 0x70d4
   138c8:	movt	r4, #2
   138cc:	strd	r6, [sp, #8]
   138d0:	strd	r8, [sp, #16]
   138d4:	strd	sl, [sp, #24]
   138d8:	mov	sl, r0
   138dc:	str	lr, [sp, #32]
   138e0:	sub	sp, sp, #44	; 0x2c
   138e4:	bl	10c98 <__errno_location@plt>
   138e8:	ldr	r3, [r0]
   138ec:	mov	r8, r0
   138f0:	ldr	r2, [r4, #4]
   138f4:	ldr	r5, [r4]
   138f8:	str	r3, [sp, #28]
   138fc:	cmp	r2, #0
   13900:	bgt	1395c <__assert_fail@plt+0x2c10>
   13904:	add	r3, r4, #8
   13908:	str	r2, [sp, #36]	; 0x24
   1390c:	rsb	r2, r2, #1
   13910:	cmp	r5, r3
   13914:	beq	13a28 <__assert_fail@plt+0x2cdc>
   13918:	mov	r1, #8
   1391c:	mov	r0, r5
   13920:	mvn	r3, #-2147483648	; 0x80000000
   13924:	str	r1, [sp]
   13928:	add	r1, sp, #36	; 0x24
   1392c:	bl	15b7c <__assert_fail@plt+0x4e30>
   13930:	mov	r5, r0
   13934:	str	r0, [r4]
   13938:	ldr	r0, [r4, #4]
   1393c:	mov	r1, #0
   13940:	ldr	r2, [sp, #36]	; 0x24
   13944:	sub	r2, r2, r0
   13948:	add	r0, r5, r0, lsl #3
   1394c:	lsl	r2, r2, #3
   13950:	bl	10cb0 <memset@plt>
   13954:	ldr	r3, [sp, #36]	; 0x24
   13958:	str	r3, [r4, #4]
   1395c:	movw	r4, #29004	; 0x714c
   13960:	movt	r4, #2
   13964:	ldr	r9, [r5]
   13968:	add	fp, r4, #264	; 0x108
   1396c:	mvn	r3, #0
   13970:	ldr	r7, [r4, #260]	; 0x104
   13974:	mov	r2, sl
   13978:	ldr	r6, [r5, #4]
   1397c:	str	fp, [sp, #8]
   13980:	mov	r1, r9
   13984:	ldr	ip, [r4, #256]	; 0x100
   13988:	orr	r7, r7, #1
   1398c:	ldr	lr, [r4, #300]	; 0x12c
   13990:	mov	r0, r6
   13994:	str	ip, [sp]
   13998:	str	r7, [sp, #4]
   1399c:	str	lr, [sp, #16]
   139a0:	ldr	ip, [r4, #296]	; 0x128
   139a4:	str	ip, [sp, #12]
   139a8:	bl	118bc <__assert_fail@plt+0xb70>
   139ac:	cmp	r9, r0
   139b0:	bhi	13a00 <__assert_fail@plt+0x2cb4>
   139b4:	add	r9, r0, #1
   139b8:	cmp	r6, r4
   139bc:	str	r9, [r5]
   139c0:	beq	139cc <__assert_fail@plt+0x2c80>
   139c4:	mov	r0, r6
   139c8:	bl	15f60 <__assert_fail@plt+0x5214>
   139cc:	mov	r0, r9
   139d0:	bl	158d8 <__assert_fail@plt+0x4b8c>
   139d4:	ldr	r3, [r4, #256]	; 0x100
   139d8:	mov	r2, sl
   139dc:	mov	r1, r9
   139e0:	mov	r6, r0
   139e4:	ldr	lr, [r4, #296]	; 0x128
   139e8:	ldr	ip, [r4, #300]	; 0x12c
   139ec:	str	r0, [r5, #4]
   139f0:	stm	sp, {r3, r7, fp, lr}
   139f4:	mvn	r3, #0
   139f8:	str	ip, [sp, #16]
   139fc:	bl	118bc <__assert_fail@plt+0xb70>
   13a00:	ldr	r3, [sp, #28]
   13a04:	mov	r0, r6
   13a08:	str	r3, [r8]
   13a0c:	add	sp, sp, #44	; 0x2c
   13a10:	ldrd	r4, [sp]
   13a14:	ldrd	r6, [sp, #8]
   13a18:	ldrd	r8, [sp, #16]
   13a1c:	ldrd	sl, [sp, #24]
   13a20:	add	sp, sp, #32
   13a24:	pop	{pc}		; (ldr pc, [sp], #4)
   13a28:	mov	r0, #8
   13a2c:	mvn	r3, #-2147483648	; 0x80000000
   13a30:	add	r1, sp, #36	; 0x24
   13a34:	str	r0, [sp]
   13a38:	mov	r0, #0
   13a3c:	bl	15b7c <__assert_fail@plt+0x4e30>
   13a40:	ldrd	r2, [r4, #8]
   13a44:	mov	r5, r0
   13a48:	str	r0, [r4]
   13a4c:	strd	r2, [r0]
   13a50:	b	13938 <__assert_fail@plt+0x2bec>
   13a54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13a58:	movw	r4, #28884	; 0x70d4
   13a5c:	movt	r4, #2
   13a60:	strd	r6, [sp, #8]
   13a64:	strd	r8, [sp, #16]
   13a68:	strd	sl, [sp, #24]
   13a6c:	mov	sl, r0
   13a70:	mov	fp, r1
   13a74:	str	lr, [sp, #32]
   13a78:	sub	sp, sp, #44	; 0x2c
   13a7c:	bl	10c98 <__errno_location@plt>
   13a80:	ldr	r3, [r0]
   13a84:	mov	r8, r0
   13a88:	ldr	r2, [r4, #4]
   13a8c:	ldr	r5, [r4]
   13a90:	str	r3, [sp, #28]
   13a94:	cmp	r2, #0
   13a98:	bgt	13af4 <__assert_fail@plt+0x2da8>
   13a9c:	add	r3, r4, #8
   13aa0:	str	r2, [sp, #36]	; 0x24
   13aa4:	rsb	r2, r2, #1
   13aa8:	cmp	r5, r3
   13aac:	beq	13bd0 <__assert_fail@plt+0x2e84>
   13ab0:	mov	r1, #8
   13ab4:	mov	r0, r5
   13ab8:	mvn	r3, #-2147483648	; 0x80000000
   13abc:	str	r1, [sp]
   13ac0:	add	r1, sp, #36	; 0x24
   13ac4:	bl	15b7c <__assert_fail@plt+0x4e30>
   13ac8:	mov	r5, r0
   13acc:	str	r0, [r4]
   13ad0:	ldr	r0, [r4, #4]
   13ad4:	mov	r1, #0
   13ad8:	ldr	r2, [sp, #36]	; 0x24
   13adc:	sub	r2, r2, r0
   13ae0:	add	r0, r5, r0, lsl #3
   13ae4:	lsl	r2, r2, #3
   13ae8:	bl	10cb0 <memset@plt>
   13aec:	ldr	r3, [sp, #36]	; 0x24
   13af0:	str	r3, [r4, #4]
   13af4:	movw	r4, #29004	; 0x714c
   13af8:	movt	r4, #2
   13afc:	ldr	r9, [r5]
   13b00:	add	r0, r4, #264	; 0x108
   13b04:	mov	r3, fp
   13b08:	ldr	r7, [r4, #260]	; 0x104
   13b0c:	mov	r2, sl
   13b10:	ldr	r6, [r5, #4]
   13b14:	str	r0, [sp, #8]
   13b18:	mov	r1, r9
   13b1c:	ldr	ip, [r4, #256]	; 0x100
   13b20:	orr	r7, r7, #1
   13b24:	ldr	lr, [r4, #300]	; 0x12c
   13b28:	mov	r0, r6
   13b2c:	str	ip, [sp]
   13b30:	str	r7, [sp, #4]
   13b34:	str	lr, [sp, #16]
   13b38:	ldr	ip, [r4, #296]	; 0x128
   13b3c:	str	ip, [sp, #12]
   13b40:	bl	118bc <__assert_fail@plt+0xb70>
   13b44:	cmp	r9, r0
   13b48:	bhi	13ba8 <__assert_fail@plt+0x2e5c>
   13b4c:	add	r9, r0, #1
   13b50:	cmp	r6, r4
   13b54:	str	r9, [r5]
   13b58:	beq	13b64 <__assert_fail@plt+0x2e18>
   13b5c:	mov	r0, r6
   13b60:	bl	15f60 <__assert_fail@plt+0x5214>
   13b64:	mov	r0, r9
   13b68:	bl	158d8 <__assert_fail@plt+0x4b8c>
   13b6c:	ldr	ip, [r4, #256]	; 0x100
   13b70:	mov	r1, r9
   13b74:	mov	r3, fp
   13b78:	mov	r2, sl
   13b7c:	mov	r6, r0
   13b80:	ldr	r9, [r4, #296]	; 0x128
   13b84:	ldr	lr, [r4, #300]	; 0x12c
   13b88:	str	r0, [r5, #4]
   13b8c:	str	ip, [sp]
   13b90:	ldr	ip, [pc, #100]	; 13bfc <__assert_fail@plt+0x2eb0>
   13b94:	str	r7, [sp, #4]
   13b98:	str	ip, [sp, #8]
   13b9c:	str	r9, [sp, #12]
   13ba0:	str	lr, [sp, #16]
   13ba4:	bl	118bc <__assert_fail@plt+0xb70>
   13ba8:	ldr	r3, [sp, #28]
   13bac:	mov	r0, r6
   13bb0:	str	r3, [r8]
   13bb4:	add	sp, sp, #44	; 0x2c
   13bb8:	ldrd	r4, [sp]
   13bbc:	ldrd	r6, [sp, #8]
   13bc0:	ldrd	r8, [sp, #16]
   13bc4:	ldrd	sl, [sp, #24]
   13bc8:	add	sp, sp, #32
   13bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   13bd0:	mov	r0, #8
   13bd4:	mvn	r3, #-2147483648	; 0x80000000
   13bd8:	add	r1, sp, #36	; 0x24
   13bdc:	str	r0, [sp]
   13be0:	mov	r0, #0
   13be4:	bl	15b7c <__assert_fail@plt+0x4e30>
   13be8:	ldrd	r2, [r4, #8]
   13bec:	mov	r5, r0
   13bf0:	str	r0, [r4]
   13bf4:	strd	r2, [r0]
   13bf8:	b	13ad0 <__assert_fail@plt+0x2d84>
   13bfc:	andeq	r7, r2, r4, asr r2
   13c00:	strd	r4, [sp, #-20]!	; 0xffffffec
   13c04:	mov	r4, #0
   13c08:	mov	r5, #0
   13c0c:	strd	r6, [sp, #8]
   13c10:	cmp	r1, #10
   13c14:	str	lr, [sp, #16]
   13c18:	sub	sp, sp, #100	; 0x64
   13c1c:	strd	r4, [sp, #48]	; 0x30
   13c20:	beq	13c68 <__assert_fail@plt+0x2f1c>
   13c24:	mov	r3, sp
   13c28:	strd	r4, [sp, #8]
   13c2c:	str	r1, [sp, #48]	; 0x30
   13c30:	mov	r1, r2
   13c34:	mvn	r2, #0
   13c38:	ldrd	r6, [sp, #48]	; 0x30
   13c3c:	strd	r6, [sp]
   13c40:	strd	r4, [sp, #16]
   13c44:	strd	r4, [sp, #24]
   13c48:	strd	r4, [sp, #32]
   13c4c:	strd	r4, [sp, #40]	; 0x28
   13c50:	bl	132a8 <__assert_fail@plt+0x255c>
   13c54:	add	sp, sp, #100	; 0x64
   13c58:	ldrd	r4, [sp]
   13c5c:	ldrd	r6, [sp, #8]
   13c60:	add	sp, sp, #16
   13c64:	pop	{pc}		; (ldr pc, [sp], #4)
   13c68:	bl	10d40 <abort@plt>
   13c6c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13c70:	mov	r4, #0
   13c74:	mov	r5, #0
   13c78:	strd	r6, [sp, #8]
   13c7c:	cmp	r1, #10
   13c80:	str	lr, [sp, #16]
   13c84:	sub	sp, sp, #100	; 0x64
   13c88:	strd	r4, [sp, #48]	; 0x30
   13c8c:	beq	13cd8 <__assert_fail@plt+0x2f8c>
   13c90:	mov	ip, r2
   13c94:	mov	r2, r3
   13c98:	strd	r4, [sp, #8]
   13c9c:	str	r1, [sp, #48]	; 0x30
   13ca0:	mov	r3, sp
   13ca4:	mov	r1, ip
   13ca8:	ldrd	r6, [sp, #48]	; 0x30
   13cac:	strd	r6, [sp]
   13cb0:	strd	r4, [sp, #16]
   13cb4:	strd	r4, [sp, #24]
   13cb8:	strd	r4, [sp, #32]
   13cbc:	strd	r4, [sp, #40]	; 0x28
   13cc0:	bl	132a8 <__assert_fail@plt+0x255c>
   13cc4:	add	sp, sp, #100	; 0x64
   13cc8:	ldrd	r4, [sp]
   13ccc:	ldrd	r6, [sp, #8]
   13cd0:	add	sp, sp, #16
   13cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   13cd8:	bl	10d40 <abort@plt>
   13cdc:	mov	r2, #0
   13ce0:	mov	r3, #0
   13ce4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ce8:	strd	r6, [sp, #8]
   13cec:	cmp	r0, #10
   13cf0:	strd	r8, [sp, #16]
   13cf4:	strd	sl, [sp, #24]
   13cf8:	str	lr, [sp, #32]
   13cfc:	sub	sp, sp, #124	; 0x7c
   13d00:	strd	r2, [sp, #72]	; 0x48
   13d04:	strd	r2, [sp, #80]	; 0x50
   13d08:	strd	r2, [sp, #88]	; 0x58
   13d0c:	strd	r2, [sp, #96]	; 0x60
   13d10:	strd	r2, [sp, #104]	; 0x68
   13d14:	strd	r2, [sp, #112]	; 0x70
   13d18:	beq	13ebc <__assert_fail@plt+0x3170>
   13d1c:	mov	r6, r1
   13d20:	movw	r4, #28884	; 0x70d4
   13d24:	movt	r4, #2
   13d28:	str	r0, [sp, #72]	; 0x48
   13d2c:	ldrd	r0, [sp, #72]	; 0x48
   13d30:	strd	r0, [sp, #24]
   13d34:	strd	r2, [sp, #32]
   13d38:	strd	r2, [sp, #40]	; 0x28
   13d3c:	strd	r2, [sp, #48]	; 0x30
   13d40:	strd	r2, [sp, #56]	; 0x38
   13d44:	strd	r2, [sp, #64]	; 0x40
   13d48:	bl	10c98 <__errno_location@plt>
   13d4c:	mov	r8, r0
   13d50:	ldr	r5, [r4]
   13d54:	ldr	r2, [r4, #4]
   13d58:	ldr	r9, [r0]
   13d5c:	cmp	r2, #0
   13d60:	bgt	13dbc <__assert_fail@plt+0x3070>
   13d64:	add	r3, r4, #8
   13d68:	str	r2, [sp, #72]	; 0x48
   13d6c:	rsb	r2, r2, #1
   13d70:	cmp	r5, r3
   13d74:	beq	13e90 <__assert_fail@plt+0x3144>
   13d78:	mov	r3, #8
   13d7c:	mov	r0, r5
   13d80:	add	r1, sp, #72	; 0x48
   13d84:	str	r3, [sp]
   13d88:	mvn	r3, #-2147483648	; 0x80000000
   13d8c:	bl	15b7c <__assert_fail@plt+0x4e30>
   13d90:	mov	r5, r0
   13d94:	str	r0, [r4]
   13d98:	ldr	r0, [r4, #4]
   13d9c:	mov	r1, #0
   13da0:	ldr	r2, [sp, #72]	; 0x48
   13da4:	sub	r2, r2, r0
   13da8:	add	r0, r5, r0, lsl #3
   13dac:	lsl	r2, r2, #3
   13db0:	bl	10cb0 <memset@plt>
   13db4:	ldr	r3, [sp, #72]	; 0x48
   13db8:	str	r3, [r4, #4]
   13dbc:	ldr	sl, [r5]
   13dc0:	add	r0, sp, #32
   13dc4:	mvn	r3, #0
   13dc8:	mov	r2, r6
   13dcc:	ldr	r7, [sp, #28]
   13dd0:	ldr	r4, [r5, #4]
   13dd4:	mov	r1, sl
   13dd8:	str	r0, [sp, #8]
   13ddc:	ldr	lr, [sp, #24]
   13de0:	orr	r7, r7, #1
   13de4:	ldr	ip, [sp, #64]	; 0x40
   13de8:	mov	r0, r4
   13dec:	ldr	fp, [sp, #68]	; 0x44
   13df0:	str	lr, [sp]
   13df4:	str	r7, [sp, #4]
   13df8:	str	ip, [sp, #12]
   13dfc:	str	fp, [sp, #16]
   13e00:	bl	118bc <__assert_fail@plt+0xb70>
   13e04:	cmp	sl, r0
   13e08:	bhi	13e6c <__assert_fail@plt+0x3120>
   13e0c:	add	sl, r0, #1
   13e10:	movw	r3, #29004	; 0x714c
   13e14:	movt	r3, #2
   13e18:	cmp	r4, r3
   13e1c:	str	sl, [r5]
   13e20:	beq	13e2c <__assert_fail@plt+0x30e0>
   13e24:	mov	r0, r4
   13e28:	bl	15f60 <__assert_fail@plt+0x5214>
   13e2c:	mov	r0, sl
   13e30:	bl	158d8 <__assert_fail@plt+0x4b8c>
   13e34:	ldr	r3, [sp, #24]
   13e38:	mov	r2, r6
   13e3c:	mov	r1, sl
   13e40:	mov	r4, r0
   13e44:	ldr	lr, [sp, #64]	; 0x40
   13e48:	ldr	ip, [sp, #68]	; 0x44
   13e4c:	str	r0, [r5, #4]
   13e50:	add	r5, sp, #32
   13e54:	stm	sp, {r3, r7}
   13e58:	mvn	r3, #0
   13e5c:	str	r5, [sp, #8]
   13e60:	str	lr, [sp, #12]
   13e64:	str	ip, [sp, #16]
   13e68:	bl	118bc <__assert_fail@plt+0xb70>
   13e6c:	mov	r0, r4
   13e70:	str	r9, [r8]
   13e74:	add	sp, sp, #124	; 0x7c
   13e78:	ldrd	r4, [sp]
   13e7c:	ldrd	r6, [sp, #8]
   13e80:	ldrd	r8, [sp, #16]
   13e84:	ldrd	sl, [sp, #24]
   13e88:	add	sp, sp, #32
   13e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e90:	mov	r0, #8
   13e94:	mvn	r3, #-2147483648	; 0x80000000
   13e98:	add	r1, sp, #72	; 0x48
   13e9c:	str	r0, [sp]
   13ea0:	mov	r0, #0
   13ea4:	bl	15b7c <__assert_fail@plt+0x4e30>
   13ea8:	ldrd	r2, [r4, #8]
   13eac:	mov	r5, r0
   13eb0:	str	r0, [r4]
   13eb4:	strd	r2, [r0]
   13eb8:	b	13d98 <__assert_fail@plt+0x304c>
   13ebc:	bl	10d40 <abort@plt>
   13ec0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ec4:	cmp	r0, #10
   13ec8:	strd	r6, [sp, #8]
   13ecc:	mov	r6, #0
   13ed0:	mov	r7, #0
   13ed4:	strd	r8, [sp, #16]
   13ed8:	strd	sl, [sp, #24]
   13edc:	str	lr, [sp, #32]
   13ee0:	sub	sp, sp, #124	; 0x7c
   13ee4:	strd	r6, [sp, #72]	; 0x48
   13ee8:	strd	r6, [sp, #80]	; 0x50
   13eec:	strd	r6, [sp, #88]	; 0x58
   13ef0:	strd	r6, [sp, #96]	; 0x60
   13ef4:	strd	r6, [sp, #104]	; 0x68
   13ef8:	strd	r6, [sp, #112]	; 0x70
   13efc:	beq	140a8 <__assert_fail@plt+0x335c>
   13f00:	mov	sl, r2
   13f04:	movw	r5, #28884	; 0x70d4
   13f08:	movt	r5, #2
   13f0c:	str	r0, [sp, #72]	; 0x48
   13f10:	mov	r9, r1
   13f14:	ldrd	r2, [sp, #72]	; 0x48
   13f18:	strd	r2, [sp, #24]
   13f1c:	strd	r6, [sp, #32]
   13f20:	strd	r6, [sp, #40]	; 0x28
   13f24:	strd	r6, [sp, #48]	; 0x30
   13f28:	strd	r6, [sp, #56]	; 0x38
   13f2c:	strd	r6, [sp, #64]	; 0x40
   13f30:	bl	10c98 <__errno_location@plt>
   13f34:	mov	r7, r0
   13f38:	ldr	r4, [r5]
   13f3c:	ldr	r2, [r5, #4]
   13f40:	ldr	fp, [r0]
   13f44:	cmp	r2, #0
   13f48:	bgt	13fa4 <__assert_fail@plt+0x3258>
   13f4c:	add	r3, r5, #8
   13f50:	str	r2, [sp, #72]	; 0x48
   13f54:	rsb	r2, r2, #1
   13f58:	cmp	r4, r3
   13f5c:	beq	1407c <__assert_fail@plt+0x3330>
   13f60:	mov	r3, #8
   13f64:	mov	r0, r4
   13f68:	add	r1, sp, #72	; 0x48
   13f6c:	str	r3, [sp]
   13f70:	mvn	r3, #-2147483648	; 0x80000000
   13f74:	bl	15b7c <__assert_fail@plt+0x4e30>
   13f78:	mov	r4, r0
   13f7c:	str	r0, [r5]
   13f80:	ldr	r0, [r5, #4]
   13f84:	mov	r1, #0
   13f88:	ldr	r2, [sp, #72]	; 0x48
   13f8c:	sub	r2, r2, r0
   13f90:	add	r0, r4, r0, lsl #3
   13f94:	lsl	r2, r2, #3
   13f98:	bl	10cb0 <memset@plt>
   13f9c:	ldr	r3, [sp, #72]	; 0x48
   13fa0:	str	r3, [r5, #4]
   13fa4:	ldr	ip, [sp, #24]
   13fa8:	add	r0, sp, #32
   13fac:	mov	r3, sl
   13fb0:	mov	r2, r9
   13fb4:	ldr	r6, [sp, #28]
   13fb8:	ldr	r8, [r4]
   13fbc:	ldr	r5, [r4, #4]
   13fc0:	str	ip, [sp]
   13fc4:	orr	r6, r6, #1
   13fc8:	ldr	ip, [sp, #64]	; 0x40
   13fcc:	mov	r1, r8
   13fd0:	str	r6, [sp, #4]
   13fd4:	ldr	lr, [sp, #68]	; 0x44
   13fd8:	str	r0, [sp, #8]
   13fdc:	mov	r0, r5
   13fe0:	str	ip, [sp, #12]
   13fe4:	str	lr, [sp, #16]
   13fe8:	bl	118bc <__assert_fail@plt+0xb70>
   13fec:	cmp	r8, r0
   13ff0:	bhi	14058 <__assert_fail@plt+0x330c>
   13ff4:	add	r8, r0, #1
   13ff8:	movw	r3, #29004	; 0x714c
   13ffc:	movt	r3, #2
   14000:	cmp	r5, r3
   14004:	str	r8, [r4]
   14008:	beq	14014 <__assert_fail@plt+0x32c8>
   1400c:	mov	r0, r5
   14010:	bl	15f60 <__assert_fail@plt+0x5214>
   14014:	mov	r0, r8
   14018:	bl	158d8 <__assert_fail@plt+0x4b8c>
   1401c:	ldr	lr, [sp, #24]
   14020:	mov	r1, r8
   14024:	mov	r3, sl
   14028:	mov	r2, r9
   1402c:	mov	r5, r0
   14030:	ldr	r8, [sp, #64]	; 0x40
   14034:	ldr	ip, [sp, #68]	; 0x44
   14038:	str	r0, [r4, #4]
   1403c:	str	lr, [sp]
   14040:	add	lr, sp, #32
   14044:	str	r6, [sp, #4]
   14048:	str	lr, [sp, #8]
   1404c:	str	r8, [sp, #12]
   14050:	str	ip, [sp, #16]
   14054:	bl	118bc <__assert_fail@plt+0xb70>
   14058:	mov	r0, r5
   1405c:	str	fp, [r7]
   14060:	add	sp, sp, #124	; 0x7c
   14064:	ldrd	r4, [sp]
   14068:	ldrd	r6, [sp, #8]
   1406c:	ldrd	r8, [sp, #16]
   14070:	ldrd	sl, [sp, #24]
   14074:	add	sp, sp, #32
   14078:	pop	{pc}		; (ldr pc, [sp], #4)
   1407c:	mov	r0, #8
   14080:	mvn	r3, #-2147483648	; 0x80000000
   14084:	add	r1, sp, #72	; 0x48
   14088:	str	r0, [sp]
   1408c:	mov	r0, #0
   14090:	bl	15b7c <__assert_fail@plt+0x4e30>
   14094:	ldrd	r2, [r5, #8]
   14098:	mov	r4, r0
   1409c:	str	r0, [r5]
   140a0:	strd	r2, [r0]
   140a4:	b	13f80 <__assert_fail@plt+0x3234>
   140a8:	bl	10d40 <abort@plt>
   140ac:	ldr	r3, [pc, #492]	; 142a0 <__assert_fail@plt+0x3554>
   140b0:	lsr	ip, r2, #5
   140b4:	and	r2, r2, #31
   140b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   140bc:	movw	r5, #28884	; 0x70d4
   140c0:	movt	r5, #2
   140c4:	strd	r6, [sp, #8]
   140c8:	strd	r8, [sp, #16]
   140cc:	strd	sl, [sp, #24]
   140d0:	mov	sl, r0
   140d4:	mov	fp, r1
   140d8:	ldrd	r0, [r3]
   140dc:	str	lr, [sp, #32]
   140e0:	sub	sp, sp, #92	; 0x5c
   140e4:	ldrd	r8, [r3, #8]
   140e8:	add	r6, sp, #48	; 0x30
   140ec:	strd	r0, [sp, #40]	; 0x28
   140f0:	ldrd	r0, [r3, #16]
   140f4:	strd	r8, [sp, #48]	; 0x30
   140f8:	ldrd	r8, [r3, #24]
   140fc:	strd	r0, [sp, #56]	; 0x38
   14100:	ldrd	r0, [r3, #32]
   14104:	strd	r8, [sp, #64]	; 0x40
   14108:	ldrd	r8, [r3, #40]	; 0x28
   1410c:	strd	r0, [sp, #72]	; 0x48
   14110:	strd	r8, [sp, #80]	; 0x50
   14114:	ldr	r3, [r6, ip, lsl #2]
   14118:	mvn	r1, r3, lsr r2
   1411c:	and	r1, r1, #1
   14120:	eor	r2, r3, r1, lsl r2
   14124:	str	r2, [r6, ip, lsl #2]
   14128:	bl	10c98 <__errno_location@plt>
   1412c:	ldr	r3, [r0]
   14130:	mov	r8, r0
   14134:	ldr	r2, [r5, #4]
   14138:	ldr	r4, [r5]
   1413c:	str	r3, [sp, #28]
   14140:	cmp	r2, #0
   14144:	bgt	141a0 <__assert_fail@plt+0x3454>
   14148:	add	r3, r5, #8
   1414c:	str	r2, [sp, #36]	; 0x24
   14150:	rsb	r2, r2, #1
   14154:	cmp	r4, r3
   14158:	beq	14274 <__assert_fail@plt+0x3528>
   1415c:	mov	r1, #8
   14160:	mov	r0, r4
   14164:	mvn	r3, #-2147483648	; 0x80000000
   14168:	str	r1, [sp]
   1416c:	add	r1, sp, #36	; 0x24
   14170:	bl	15b7c <__assert_fail@plt+0x4e30>
   14174:	mov	r4, r0
   14178:	str	r0, [r5]
   1417c:	ldr	r0, [r5, #4]
   14180:	mov	r1, #0
   14184:	ldr	r2, [sp, #36]	; 0x24
   14188:	sub	r2, r2, r0
   1418c:	add	r0, r4, r0, lsl #3
   14190:	lsl	r2, r2, #3
   14194:	bl	10cb0 <memset@plt>
   14198:	ldr	r3, [sp, #36]	; 0x24
   1419c:	str	r3, [r5, #4]
   141a0:	ldr	ip, [sp, #40]	; 0x28
   141a4:	mov	r3, fp
   141a8:	mov	r2, sl
   141ac:	ldr	r7, [sp, #44]	; 0x2c
   141b0:	ldr	r9, [r4]
   141b4:	ldr	r5, [r4, #4]
   141b8:	str	ip, [sp]
   141bc:	orr	r7, r7, #1
   141c0:	ldr	ip, [sp, #80]	; 0x50
   141c4:	mov	r1, r9
   141c8:	str	r7, [sp, #4]
   141cc:	ldr	lr, [sp, #84]	; 0x54
   141d0:	mov	r0, r5
   141d4:	str	r6, [sp, #8]
   141d8:	str	ip, [sp, #12]
   141dc:	str	lr, [sp, #16]
   141e0:	bl	118bc <__assert_fail@plt+0xb70>
   141e4:	cmp	r9, r0
   141e8:	bhi	1424c <__assert_fail@plt+0x3500>
   141ec:	add	r9, r0, #1
   141f0:	movw	r3, #29004	; 0x714c
   141f4:	movt	r3, #2
   141f8:	cmp	r5, r3
   141fc:	str	r9, [r4]
   14200:	beq	1420c <__assert_fail@plt+0x34c0>
   14204:	mov	r0, r5
   14208:	bl	15f60 <__assert_fail@plt+0x5214>
   1420c:	mov	r0, r9
   14210:	bl	158d8 <__assert_fail@plt+0x4b8c>
   14214:	mov	r1, r9
   14218:	ldr	ip, [sp, #40]	; 0x28
   1421c:	mov	r3, fp
   14220:	mov	r2, sl
   14224:	mov	r5, r0
   14228:	ldr	r9, [sp, #80]	; 0x50
   1422c:	ldr	lr, [sp, #84]	; 0x54
   14230:	str	r0, [r4, #4]
   14234:	str	ip, [sp]
   14238:	str	r7, [sp, #4]
   1423c:	str	r6, [sp, #8]
   14240:	str	r9, [sp, #12]
   14244:	str	lr, [sp, #16]
   14248:	bl	118bc <__assert_fail@plt+0xb70>
   1424c:	ldr	r3, [sp, #28]
   14250:	mov	r0, r5
   14254:	str	r3, [r8]
   14258:	add	sp, sp, #92	; 0x5c
   1425c:	ldrd	r4, [sp]
   14260:	ldrd	r6, [sp, #8]
   14264:	ldrd	r8, [sp, #16]
   14268:	ldrd	sl, [sp, #24]
   1426c:	add	sp, sp, #32
   14270:	pop	{pc}		; (ldr pc, [sp], #4)
   14274:	mov	r0, #8
   14278:	mvn	r3, #-2147483648	; 0x80000000
   1427c:	add	r1, sp, #36	; 0x24
   14280:	str	r0, [sp]
   14284:	mov	r0, #0
   14288:	bl	15b7c <__assert_fail@plt+0x4e30>
   1428c:	ldrd	r2, [r5, #8]
   14290:	mov	r4, r0
   14294:	str	r0, [r5]
   14298:	strd	r2, [r0]
   1429c:	b	1417c <__assert_fail@plt+0x3430>
   142a0:	andeq	r7, r2, ip, asr #4
   142a4:	ldr	ip, [pc, #476]	; 14488 <__assert_fail@plt+0x373c>
   142a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   142ac:	movw	r4, #28884	; 0x70d4
   142b0:	movt	r4, #2
   142b4:	ldrd	r2, [ip, #8]
   142b8:	strd	r6, [sp, #8]
   142bc:	lsr	r7, r1, #5
   142c0:	mov	r6, r0
   142c4:	strd	r8, [sp, #16]
   142c8:	str	lr, [sp, #32]
   142cc:	and	lr, r1, #31
   142d0:	ldrd	r0, [ip]
   142d4:	strd	sl, [sp, #24]
   142d8:	sub	sp, sp, #84	; 0x54
   142dc:	add	r5, sp, #40	; 0x28
   142e0:	strd	r0, [sp, #32]
   142e4:	strd	r2, [sp, #40]	; 0x28
   142e8:	ldrd	r0, [ip, #16]
   142ec:	ldrd	r2, [ip, #24]
   142f0:	strd	r0, [sp, #48]	; 0x30
   142f4:	ldrd	r0, [ip, #32]
   142f8:	strd	r2, [sp, #56]	; 0x38
   142fc:	ldrd	r2, [ip, #40]	; 0x28
   14300:	strd	r0, [sp, #64]	; 0x40
   14304:	strd	r2, [sp, #72]	; 0x48
   14308:	ldr	r1, [r5, r7, lsl #2]
   1430c:	mvn	r3, r1, lsr lr
   14310:	and	r3, r3, #1
   14314:	eor	r1, r1, r3, lsl lr
   14318:	str	r1, [r5, r7, lsl #2]
   1431c:	bl	10c98 <__errno_location@plt>
   14320:	mov	r9, r0
   14324:	ldr	sl, [r0]
   14328:	ldr	r2, [r4, #4]
   1432c:	ldr	r7, [r4]
   14330:	cmp	r2, #0
   14334:	bgt	14390 <__assert_fail@plt+0x3644>
   14338:	add	r3, r4, #8
   1433c:	str	r2, [sp, #28]
   14340:	rsb	r2, r2, #1
   14344:	cmp	r7, r3
   14348:	beq	1445c <__assert_fail@plt+0x3710>
   1434c:	mov	r1, #8
   14350:	mov	r0, r7
   14354:	mvn	r3, #-2147483648	; 0x80000000
   14358:	str	r1, [sp]
   1435c:	add	r1, sp, #28
   14360:	bl	15b7c <__assert_fail@plt+0x4e30>
   14364:	mov	r7, r0
   14368:	str	r0, [r4]
   1436c:	ldr	r0, [r4, #4]
   14370:	mov	r1, #0
   14374:	ldr	r2, [sp, #28]
   14378:	sub	r2, r2, r0
   1437c:	add	r0, r7, r0, lsl #3
   14380:	lsl	r2, r2, #3
   14384:	bl	10cb0 <memset@plt>
   14388:	ldr	r3, [sp, #28]
   1438c:	str	r3, [r4, #4]
   14390:	ldr	ip, [sp, #32]
   14394:	mvn	r3, #0
   14398:	mov	r2, r6
   1439c:	ldr	r8, [sp, #36]	; 0x24
   143a0:	ldr	fp, [r7]
   143a4:	ldr	r4, [r7, #4]
   143a8:	str	ip, [sp]
   143ac:	orr	r8, r8, #1
   143b0:	ldr	ip, [sp, #72]	; 0x48
   143b4:	mov	r1, fp
   143b8:	str	r8, [sp, #4]
   143bc:	ldr	lr, [sp, #76]	; 0x4c
   143c0:	mov	r0, r4
   143c4:	str	r5, [sp, #8]
   143c8:	str	ip, [sp, #12]
   143cc:	str	lr, [sp, #16]
   143d0:	bl	118bc <__assert_fail@plt+0xb70>
   143d4:	cmp	fp, r0
   143d8:	bhi	14438 <__assert_fail@plt+0x36ec>
   143dc:	add	fp, r0, #1
   143e0:	movw	r3, #29004	; 0x714c
   143e4:	movt	r3, #2
   143e8:	cmp	r4, r3
   143ec:	str	fp, [r7]
   143f0:	beq	143fc <__assert_fail@plt+0x36b0>
   143f4:	mov	r0, r4
   143f8:	bl	15f60 <__assert_fail@plt+0x5214>
   143fc:	mov	r0, fp
   14400:	bl	158d8 <__assert_fail@plt+0x4b8c>
   14404:	ldr	r3, [sp, #32]
   14408:	mov	r2, r6
   1440c:	mov	r1, fp
   14410:	mov	r4, r0
   14414:	ldr	lr, [sp, #72]	; 0x48
   14418:	ldr	ip, [sp, #76]	; 0x4c
   1441c:	str	r0, [r7, #4]
   14420:	stm	sp, {r3, r8}
   14424:	mvn	r3, #0
   14428:	str	r5, [sp, #8]
   1442c:	str	lr, [sp, #12]
   14430:	str	ip, [sp, #16]
   14434:	bl	118bc <__assert_fail@plt+0xb70>
   14438:	mov	r0, r4
   1443c:	str	sl, [r9]
   14440:	add	sp, sp, #84	; 0x54
   14444:	ldrd	r4, [sp]
   14448:	ldrd	r6, [sp, #8]
   1444c:	ldrd	r8, [sp, #16]
   14450:	ldrd	sl, [sp, #24]
   14454:	add	sp, sp, #32
   14458:	pop	{pc}		; (ldr pc, [sp], #4)
   1445c:	mov	r0, #8
   14460:	mvn	r3, #-2147483648	; 0x80000000
   14464:	add	r1, sp, #28
   14468:	str	r0, [sp]
   1446c:	mov	r0, #0
   14470:	bl	15b7c <__assert_fail@plt+0x4e30>
   14474:	ldrd	r2, [r4, #8]
   14478:	mov	r7, r0
   1447c:	str	r0, [r4]
   14480:	strd	r2, [r0]
   14484:	b	1436c <__assert_fail@plt+0x3620>
   14488:	andeq	r7, r2, ip, asr #4
   1448c:	ldr	ip, [pc, #472]	; 1466c <__assert_fail@plt+0x3920>
   14490:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14494:	mov	r5, r0
   14498:	movw	r4, #28884	; 0x70d4
   1449c:	movt	r4, #2
   144a0:	ldrd	r2, [ip]
   144a4:	ldrd	r0, [ip, #8]
   144a8:	strd	r6, [sp, #8]
   144ac:	strd	r8, [sp, #16]
   144b0:	strd	sl, [sp, #24]
   144b4:	str	lr, [sp, #32]
   144b8:	sub	sp, sp, #84	; 0x54
   144bc:	strd	r2, [sp, #32]
   144c0:	strd	r0, [sp, #40]	; 0x28
   144c4:	ldr	r6, [sp, #44]	; 0x2c
   144c8:	ldrd	r2, [ip, #16]
   144cc:	ldrd	r0, [ip, #24]
   144d0:	mvn	lr, r6
   144d4:	and	lr, lr, #67108864	; 0x4000000
   144d8:	eor	lr, lr, r6
   144dc:	ldrd	r6, [ip, #40]	; 0x28
   144e0:	strd	r2, [sp, #48]	; 0x30
   144e4:	ldrd	r2, [ip, #32]
   144e8:	str	lr, [sp, #44]	; 0x2c
   144ec:	strd	r0, [sp, #56]	; 0x38
   144f0:	strd	r2, [sp, #64]	; 0x40
   144f4:	strd	r6, [sp, #72]	; 0x48
   144f8:	bl	10c98 <__errno_location@plt>
   144fc:	mov	r8, r0
   14500:	ldr	r9, [r0]
   14504:	ldr	r2, [r4, #4]
   14508:	ldr	r6, [r4]
   1450c:	cmp	r2, #0
   14510:	bgt	1456c <__assert_fail@plt+0x3820>
   14514:	add	r3, r4, #8
   14518:	str	r2, [sp, #28]
   1451c:	rsb	r2, r2, #1
   14520:	cmp	r6, r3
   14524:	beq	14640 <__assert_fail@plt+0x38f4>
   14528:	mov	r1, #8
   1452c:	mov	r0, r6
   14530:	mvn	r3, #-2147483648	; 0x80000000
   14534:	str	r1, [sp]
   14538:	add	r1, sp, #28
   1453c:	bl	15b7c <__assert_fail@plt+0x4e30>
   14540:	mov	r6, r0
   14544:	str	r0, [r4]
   14548:	ldr	r0, [r4, #4]
   1454c:	mov	r1, #0
   14550:	ldr	r2, [sp, #28]
   14554:	sub	r2, r2, r0
   14558:	add	r0, r6, r0, lsl #3
   1455c:	lsl	r2, r2, #3
   14560:	bl	10cb0 <memset@plt>
   14564:	ldr	r3, [sp, #28]
   14568:	str	r3, [r4, #4]
   1456c:	ldr	sl, [r6]
   14570:	add	r0, sp, #40	; 0x28
   14574:	mvn	r3, #0
   14578:	mov	r2, r5
   1457c:	ldr	r7, [sp, #36]	; 0x24
   14580:	ldr	r4, [r6, #4]
   14584:	mov	r1, sl
   14588:	str	r0, [sp, #8]
   1458c:	ldr	lr, [sp, #32]
   14590:	orr	r7, r7, #1
   14594:	ldr	ip, [sp, #72]	; 0x48
   14598:	mov	r0, r4
   1459c:	ldr	fp, [sp, #76]	; 0x4c
   145a0:	str	lr, [sp]
   145a4:	str	r7, [sp, #4]
   145a8:	str	ip, [sp, #12]
   145ac:	str	fp, [sp, #16]
   145b0:	bl	118bc <__assert_fail@plt+0xb70>
   145b4:	cmp	sl, r0
   145b8:	bhi	1461c <__assert_fail@plt+0x38d0>
   145bc:	add	sl, r0, #1
   145c0:	movw	r3, #29004	; 0x714c
   145c4:	movt	r3, #2
   145c8:	cmp	r4, r3
   145cc:	str	sl, [r6]
   145d0:	beq	145dc <__assert_fail@plt+0x3890>
   145d4:	mov	r0, r4
   145d8:	bl	15f60 <__assert_fail@plt+0x5214>
   145dc:	mov	r0, sl
   145e0:	bl	158d8 <__assert_fail@plt+0x4b8c>
   145e4:	ldr	r3, [sp, #32]
   145e8:	mov	r2, r5
   145ec:	add	r5, sp, #40	; 0x28
   145f0:	mov	r1, sl
   145f4:	mov	r4, r0
   145f8:	ldr	lr, [sp, #72]	; 0x48
   145fc:	ldr	ip, [sp, #76]	; 0x4c
   14600:	str	r0, [r6, #4]
   14604:	stm	sp, {r3, r7}
   14608:	mvn	r3, #0
   1460c:	str	r5, [sp, #8]
   14610:	str	lr, [sp, #12]
   14614:	str	ip, [sp, #16]
   14618:	bl	118bc <__assert_fail@plt+0xb70>
   1461c:	mov	r0, r4
   14620:	str	r9, [r8]
   14624:	add	sp, sp, #84	; 0x54
   14628:	ldrd	r4, [sp]
   1462c:	ldrd	r6, [sp, #8]
   14630:	ldrd	r8, [sp, #16]
   14634:	ldrd	sl, [sp, #24]
   14638:	add	sp, sp, #32
   1463c:	pop	{pc}		; (ldr pc, [sp], #4)
   14640:	mov	r0, #8
   14644:	mvn	r3, #-2147483648	; 0x80000000
   14648:	add	r1, sp, #28
   1464c:	str	r0, [sp]
   14650:	mov	r0, #0
   14654:	bl	15b7c <__assert_fail@plt+0x4e30>
   14658:	ldrd	r2, [r4, #8]
   1465c:	mov	r6, r0
   14660:	str	r0, [r4]
   14664:	strd	r2, [r0]
   14668:	b	14548 <__assert_fail@plt+0x37fc>
   1466c:	andeq	r7, r2, ip, asr #4
   14670:	ldr	ip, [pc, #480]	; 14858 <__assert_fail@plt+0x3b0c>
   14674:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14678:	mov	r5, r0
   1467c:	movw	r4, #28884	; 0x70d4
   14680:	movt	r4, #2
   14684:	ldrd	r2, [ip]
   14688:	strd	r6, [sp, #8]
   1468c:	mov	r6, r1
   14690:	ldrd	r0, [ip, #8]
   14694:	strd	r8, [sp, #16]
   14698:	strd	sl, [sp, #24]
   1469c:	str	lr, [sp, #32]
   146a0:	sub	sp, sp, #84	; 0x54
   146a4:	ldrd	r8, [ip, #40]	; 0x28
   146a8:	strd	r2, [sp, #32]
   146ac:	strd	r0, [sp, #40]	; 0x28
   146b0:	ldrd	r2, [ip, #16]
   146b4:	ldr	r7, [sp, #44]	; 0x2c
   146b8:	ldrd	r0, [ip, #24]
   146bc:	strd	r2, [sp, #48]	; 0x30
   146c0:	ldrd	r2, [ip, #32]
   146c4:	mvn	lr, r7
   146c8:	and	lr, lr, #67108864	; 0x4000000
   146cc:	eor	lr, lr, r7
   146d0:	str	lr, [sp, #44]	; 0x2c
   146d4:	strd	r0, [sp, #56]	; 0x38
   146d8:	strd	r2, [sp, #64]	; 0x40
   146dc:	strd	r8, [sp, #72]	; 0x48
   146e0:	bl	10c98 <__errno_location@plt>
   146e4:	mov	r9, r0
   146e8:	ldr	sl, [r0]
   146ec:	ldr	r2, [r4, #4]
   146f0:	ldr	r7, [r4]
   146f4:	cmp	r2, #0
   146f8:	bgt	14754 <__assert_fail@plt+0x3a08>
   146fc:	add	r3, r4, #8
   14700:	str	r2, [sp, #28]
   14704:	rsb	r2, r2, #1
   14708:	cmp	r7, r3
   1470c:	beq	1482c <__assert_fail@plt+0x3ae0>
   14710:	mov	r1, #8
   14714:	mov	r0, r7
   14718:	mvn	r3, #-2147483648	; 0x80000000
   1471c:	str	r1, [sp]
   14720:	add	r1, sp, #28
   14724:	bl	15b7c <__assert_fail@plt+0x4e30>
   14728:	mov	r7, r0
   1472c:	str	r0, [r4]
   14730:	ldr	r0, [r4, #4]
   14734:	mov	r1, #0
   14738:	ldr	r2, [sp, #28]
   1473c:	sub	r2, r2, r0
   14740:	add	r0, r7, r0, lsl #3
   14744:	lsl	r2, r2, #3
   14748:	bl	10cb0 <memset@plt>
   1474c:	ldr	r3, [sp, #28]
   14750:	str	r3, [r4, #4]
   14754:	ldr	ip, [sp, #32]
   14758:	add	r0, sp, #40	; 0x28
   1475c:	mov	r3, r6
   14760:	mov	r2, r5
   14764:	ldr	r8, [sp, #36]	; 0x24
   14768:	ldr	fp, [r7]
   1476c:	ldr	r4, [r7, #4]
   14770:	str	ip, [sp]
   14774:	orr	r8, r8, #1
   14778:	ldr	ip, [sp, #72]	; 0x48
   1477c:	mov	r1, fp
   14780:	str	r8, [sp, #4]
   14784:	ldr	lr, [sp, #76]	; 0x4c
   14788:	str	r0, [sp, #8]
   1478c:	mov	r0, r4
   14790:	str	ip, [sp, #12]
   14794:	str	lr, [sp, #16]
   14798:	bl	118bc <__assert_fail@plt+0xb70>
   1479c:	cmp	fp, r0
   147a0:	bhi	14808 <__assert_fail@plt+0x3abc>
   147a4:	add	fp, r0, #1
   147a8:	movw	r3, #29004	; 0x714c
   147ac:	movt	r3, #2
   147b0:	cmp	r4, r3
   147b4:	str	fp, [r7]
   147b8:	beq	147c4 <__assert_fail@plt+0x3a78>
   147bc:	mov	r0, r4
   147c0:	bl	15f60 <__assert_fail@plt+0x5214>
   147c4:	mov	r0, fp
   147c8:	bl	158d8 <__assert_fail@plt+0x4b8c>
   147cc:	ldr	lr, [sp, #32]
   147d0:	mov	r2, r5
   147d4:	mov	r3, r6
   147d8:	mov	r1, fp
   147dc:	mov	r4, r0
   147e0:	ldr	r5, [sp, #72]	; 0x48
   147e4:	ldr	ip, [sp, #76]	; 0x4c
   147e8:	str	r0, [r7, #4]
   147ec:	str	lr, [sp]
   147f0:	add	lr, sp, #40	; 0x28
   147f4:	str	r8, [sp, #4]
   147f8:	str	lr, [sp, #8]
   147fc:	str	r5, [sp, #12]
   14800:	str	ip, [sp, #16]
   14804:	bl	118bc <__assert_fail@plt+0xb70>
   14808:	mov	r0, r4
   1480c:	str	sl, [r9]
   14810:	add	sp, sp, #84	; 0x54
   14814:	ldrd	r4, [sp]
   14818:	ldrd	r6, [sp, #8]
   1481c:	ldrd	r8, [sp, #16]
   14820:	ldrd	sl, [sp, #24]
   14824:	add	sp, sp, #32
   14828:	pop	{pc}		; (ldr pc, [sp], #4)
   1482c:	mov	r0, #8
   14830:	mvn	r3, #-2147483648	; 0x80000000
   14834:	add	r1, sp, #28
   14838:	str	r0, [sp]
   1483c:	mov	r0, #0
   14840:	bl	15b7c <__assert_fail@plt+0x4e30>
   14844:	ldrd	r2, [r4, #8]
   14848:	mov	r7, r0
   1484c:	str	r0, [r4]
   14850:	strd	r2, [r0]
   14854:	b	14730 <__assert_fail@plt+0x39e4>
   14858:	andeq	r7, r2, ip, asr #4
   1485c:	strd	r4, [sp, #-12]!
   14860:	mov	r4, #0
   14864:	mov	r5, #0
   14868:	str	lr, [sp, #8]
   1486c:	sub	sp, sp, #100	; 0x64
   14870:	cmp	r1, #10
   14874:	strd	r4, [sp]
   14878:	strd	r4, [sp, #8]
   1487c:	strd	r4, [sp, #16]
   14880:	strd	r4, [sp, #24]
   14884:	strd	r4, [sp, #32]
   14888:	strd	r4, [sp, #40]	; 0x28
   1488c:	beq	148bc <__assert_fail@plt+0x3b70>
   14890:	mov	ip, #67108864	; 0x4000000
   14894:	mov	r3, sp
   14898:	str	r1, [sp]
   1489c:	mov	r1, r2
   148a0:	mvn	r2, #0
   148a4:	str	ip, [sp, #12]
   148a8:	bl	132a8 <__assert_fail@plt+0x255c>
   148ac:	add	sp, sp, #100	; 0x64
   148b0:	ldrd	r4, [sp]
   148b4:	add	sp, sp, #8
   148b8:	pop	{pc}		; (ldr pc, [sp], #4)
   148bc:	bl	10d40 <abort@plt>
   148c0:	ldr	ip, [pc, #156]	; 14964 <__assert_fail@plt+0x3c18>
   148c4:	cmp	r2, #0
   148c8:	cmpne	r1, #0
   148cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   148d0:	strd	r6, [sp, #8]
   148d4:	mov	r6, r2
   148d8:	str	r8, [sp, #16]
   148dc:	mov	r8, r3
   148e0:	strd	sl, [sp, #20]
   148e4:	ldrd	r4, [ip]
   148e8:	str	lr, [sp, #28]
   148ec:	sub	sp, sp, #48	; 0x30
   148f0:	mov	lr, #10
   148f4:	ldrd	r2, [ip, #8]
   148f8:	ldrd	sl, [ip, #16]
   148fc:	strd	r4, [sp]
   14900:	ldrd	r4, [ip, #32]
   14904:	str	lr, [sp]
   14908:	strd	r2, [sp, #8]
   1490c:	strd	sl, [sp, #16]
   14910:	ldrd	r2, [ip, #24]
   14914:	ldrd	sl, [ip, #40]	; 0x28
   14918:	strd	r2, [sp, #24]
   1491c:	strd	r4, [sp, #32]
   14920:	strd	sl, [sp, #40]	; 0x28
   14924:	beq	14960 <__assert_fail@plt+0x3c14>
   14928:	mov	r7, r1
   1492c:	mov	r3, sp
   14930:	mov	r1, r8
   14934:	mvn	r2, #0
   14938:	str	r7, [sp, #40]	; 0x28
   1493c:	str	r6, [sp, #44]	; 0x2c
   14940:	bl	132a8 <__assert_fail@plt+0x255c>
   14944:	add	sp, sp, #48	; 0x30
   14948:	ldrd	r4, [sp]
   1494c:	ldrd	r6, [sp, #8]
   14950:	ldr	r8, [sp, #16]
   14954:	ldrd	sl, [sp, #20]
   14958:	add	sp, sp, #28
   1495c:	pop	{pc}		; (ldr pc, [sp], #4)
   14960:	bl	10d40 <abort@plt>
   14964:	andeq	r7, r2, ip, asr #4
   14968:	ldr	ip, [pc, #156]	; 14a0c <__assert_fail@plt+0x3cc0>
   1496c:	cmp	r2, #0
   14970:	cmpne	r1, #0
   14974:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14978:	strd	r6, [sp, #8]
   1497c:	mov	r6, r2
   14980:	str	r8, [sp, #16]
   14984:	mov	r8, r3
   14988:	strd	sl, [sp, #20]
   1498c:	ldrd	r4, [ip]
   14990:	str	lr, [sp, #28]
   14994:	sub	sp, sp, #48	; 0x30
   14998:	mov	lr, #10
   1499c:	ldrd	r2, [ip, #8]
   149a0:	ldrd	sl, [ip, #16]
   149a4:	strd	r4, [sp]
   149a8:	ldrd	r4, [ip, #32]
   149ac:	str	lr, [sp]
   149b0:	strd	r2, [sp, #8]
   149b4:	strd	sl, [sp, #16]
   149b8:	ldrd	r2, [ip, #24]
   149bc:	ldrd	sl, [ip, #40]	; 0x28
   149c0:	strd	r2, [sp, #24]
   149c4:	strd	r4, [sp, #32]
   149c8:	strd	sl, [sp, #40]	; 0x28
   149cc:	beq	14a08 <__assert_fail@plt+0x3cbc>
   149d0:	ldr	r2, [sp, #80]	; 0x50
   149d4:	mov	r7, r1
   149d8:	mov	r3, sp
   149dc:	mov	r1, r8
   149e0:	str	r7, [sp, #40]	; 0x28
   149e4:	str	r6, [sp, #44]	; 0x2c
   149e8:	bl	132a8 <__assert_fail@plt+0x255c>
   149ec:	add	sp, sp, #48	; 0x30
   149f0:	ldrd	r4, [sp]
   149f4:	ldrd	r6, [sp, #8]
   149f8:	ldr	r8, [sp, #16]
   149fc:	ldrd	sl, [sp, #20]
   14a00:	add	sp, sp, #28
   14a04:	pop	{pc}		; (ldr pc, [sp], #4)
   14a08:	bl	10d40 <abort@plt>
   14a0c:	andeq	r7, r2, ip, asr #4
   14a10:	ldr	ip, [pc, #512]	; 14c18 <__assert_fail@plt+0x3ecc>
   14a14:	cmp	r0, #0
   14a18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a1c:	ldrd	r4, [ip, #16]
   14a20:	strd	r6, [sp, #8]
   14a24:	clz	r6, r1
   14a28:	mov	r7, r1
   14a2c:	strd	r8, [sp, #16]
   14a30:	mov	r8, r0
   14a34:	lsr	r6, r6, #5
   14a38:	strd	sl, [sp, #24]
   14a3c:	mov	fp, r2
   14a40:	mov	sl, #10
   14a44:	ldrd	r2, [ip]
   14a48:	moveq	r6, #1
   14a4c:	str	lr, [sp, #32]
   14a50:	sub	sp, sp, #92	; 0x5c
   14a54:	cmp	r6, #0
   14a58:	ldrd	r0, [ip, #8]
   14a5c:	strd	r2, [sp, #40]	; 0x28
   14a60:	strd	r4, [sp, #56]	; 0x38
   14a64:	ldrd	r2, [ip, #24]
   14a68:	strd	r0, [sp, #48]	; 0x30
   14a6c:	ldrd	r0, [ip, #32]
   14a70:	str	sl, [sp, #40]	; 0x28
   14a74:	ldrd	r4, [ip, #40]	; 0x28
   14a78:	strd	r2, [sp, #64]	; 0x40
   14a7c:	strd	r0, [sp, #72]	; 0x48
   14a80:	strd	r4, [sp, #80]	; 0x50
   14a84:	bne	14c14 <__assert_fail@plt+0x3ec8>
   14a88:	movw	r5, #28884	; 0x70d4
   14a8c:	movt	r5, #2
   14a90:	str	r8, [sp, #80]	; 0x50
   14a94:	str	r7, [sp, #84]	; 0x54
   14a98:	bl	10c98 <__errno_location@plt>
   14a9c:	ldr	r3, [r0]
   14aa0:	mov	r9, r0
   14aa4:	ldr	r2, [r5, #4]
   14aa8:	ldr	r4, [r5]
   14aac:	str	r3, [sp, #28]
   14ab0:	cmp	r2, #0
   14ab4:	movgt	r1, sl
   14ab8:	bgt	14b20 <__assert_fail@plt+0x3dd4>
   14abc:	add	r3, r5, #8
   14ac0:	str	r2, [sp, #36]	; 0x24
   14ac4:	rsb	r2, r2, #1
   14ac8:	cmp	r4, r3
   14acc:	beq	14be8 <__assert_fail@plt+0x3e9c>
   14ad0:	mov	r1, #8
   14ad4:	mov	r0, r4
   14ad8:	mvn	r3, #-2147483648	; 0x80000000
   14adc:	str	r1, [sp]
   14ae0:	add	r1, sp, #36	; 0x24
   14ae4:	bl	15b7c <__assert_fail@plt+0x4e30>
   14ae8:	mov	r4, r0
   14aec:	str	r0, [r5]
   14af0:	ldr	r0, [r5, #4]
   14af4:	mov	r1, #0
   14af8:	ldr	r2, [sp, #36]	; 0x24
   14afc:	sub	r2, r2, r0
   14b00:	add	r0, r4, r0, lsl #3
   14b04:	lsl	r2, r2, #3
   14b08:	bl	10cb0 <memset@plt>
   14b0c:	ldr	r3, [sp, #36]	; 0x24
   14b10:	ldr	r1, [sp, #40]	; 0x28
   14b14:	ldr	r8, [sp, #80]	; 0x50
   14b18:	str	r3, [r5, #4]
   14b1c:	ldr	r7, [sp, #84]	; 0x54
   14b20:	mvn	r3, #0
   14b24:	mov	r2, fp
   14b28:	ldr	r6, [sp, #44]	; 0x2c
   14b2c:	ldr	sl, [r4]
   14b30:	ldr	r5, [r4, #4]
   14b34:	orr	r6, r6, #1
   14b38:	stm	sp, {r1, r6}
   14b3c:	add	r1, sp, #48	; 0x30
   14b40:	str	r8, [sp, #12]
   14b44:	mov	r0, r5
   14b48:	str	r1, [sp, #8]
   14b4c:	mov	r1, sl
   14b50:	str	r7, [sp, #16]
   14b54:	bl	118bc <__assert_fail@plt+0xb70>
   14b58:	cmp	sl, r0
   14b5c:	bhi	14bc0 <__assert_fail@plt+0x3e74>
   14b60:	add	r7, r0, #1
   14b64:	movw	r3, #29004	; 0x714c
   14b68:	movt	r3, #2
   14b6c:	cmp	r5, r3
   14b70:	str	r7, [r4]
   14b74:	beq	14b80 <__assert_fail@plt+0x3e34>
   14b78:	mov	r0, r5
   14b7c:	bl	15f60 <__assert_fail@plt+0x5214>
   14b80:	mov	r0, r7
   14b84:	bl	158d8 <__assert_fail@plt+0x4b8c>
   14b88:	ldr	r3, [sp, #40]	; 0x28
   14b8c:	mov	r2, fp
   14b90:	mov	r1, r7
   14b94:	mov	r5, r0
   14b98:	ldr	lr, [sp, #80]	; 0x50
   14b9c:	ldr	ip, [sp, #84]	; 0x54
   14ba0:	str	r0, [r4, #4]
   14ba4:	add	r4, sp, #48	; 0x30
   14ba8:	stm	sp, {r3, r6}
   14bac:	mvn	r3, #0
   14bb0:	str	r4, [sp, #8]
   14bb4:	str	lr, [sp, #12]
   14bb8:	str	ip, [sp, #16]
   14bbc:	bl	118bc <__assert_fail@plt+0xb70>
   14bc0:	ldr	r3, [sp, #28]
   14bc4:	mov	r0, r5
   14bc8:	str	r3, [r9]
   14bcc:	add	sp, sp, #92	; 0x5c
   14bd0:	ldrd	r4, [sp]
   14bd4:	ldrd	r6, [sp, #8]
   14bd8:	ldrd	r8, [sp, #16]
   14bdc:	ldrd	sl, [sp, #24]
   14be0:	add	sp, sp, #32
   14be4:	pop	{pc}		; (ldr pc, [sp], #4)
   14be8:	mov	r1, #8
   14bec:	mvn	r3, #-2147483648	; 0x80000000
   14bf0:	mov	r0, r6
   14bf4:	str	r1, [sp]
   14bf8:	add	r1, sp, #36	; 0x24
   14bfc:	bl	15b7c <__assert_fail@plt+0x4e30>
   14c00:	ldrd	r2, [r5, #8]
   14c04:	mov	r4, r0
   14c08:	str	r0, [r5]
   14c0c:	strd	r2, [r0]
   14c10:	b	14af0 <__assert_fail@plt+0x3da4>
   14c14:	bl	10d40 <abort@plt>
   14c18:	andeq	r7, r2, ip, asr #4
   14c1c:	ldr	ip, [pc, #536]	; 14e3c <__assert_fail@plt+0x40f0>
   14c20:	cmp	r0, #0
   14c24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c28:	ldrd	r4, [ip, #16]
   14c2c:	strd	r6, [sp, #8]
   14c30:	mov	r6, r1
   14c34:	mov	r7, r0
   14c38:	strd	r8, [sp, #16]
   14c3c:	mov	r9, #10
   14c40:	strd	sl, [sp, #24]
   14c44:	mov	sl, r2
   14c48:	mov	fp, r3
   14c4c:	str	lr, [sp, #32]
   14c50:	clz	lr, r1
   14c54:	sub	sp, sp, #92	; 0x5c
   14c58:	ldrd	r2, [ip]
   14c5c:	lsr	lr, lr, #5
   14c60:	moveq	lr, #1
   14c64:	ldrd	r0, [ip, #8]
   14c68:	cmp	lr, #0
   14c6c:	strd	r4, [sp, #56]	; 0x38
   14c70:	ldrd	r4, [ip, #40]	; 0x28
   14c74:	str	lr, [sp, #28]
   14c78:	strd	r2, [sp, #40]	; 0x28
   14c7c:	ldrd	r2, [ip, #24]
   14c80:	strd	r0, [sp, #48]	; 0x30
   14c84:	ldrd	r0, [ip, #32]
   14c88:	str	r9, [sp, #40]	; 0x28
   14c8c:	strd	r2, [sp, #64]	; 0x40
   14c90:	strd	r4, [sp, #80]	; 0x50
   14c94:	strd	r0, [sp, #72]	; 0x48
   14c98:	bne	14e38 <__assert_fail@plt+0x40ec>
   14c9c:	movw	r5, #28884	; 0x70d4
   14ca0:	movt	r5, #2
   14ca4:	str	r7, [sp, #80]	; 0x50
   14ca8:	str	r6, [sp, #84]	; 0x54
   14cac:	bl	10c98 <__errno_location@plt>
   14cb0:	ldr	r3, [r0]
   14cb4:	mov	r8, r0
   14cb8:	ldr	r2, [r5, #4]
   14cbc:	ldr	r4, [r5]
   14cc0:	str	r3, [sp, #24]
   14cc4:	cmp	r2, #0
   14cc8:	movgt	r1, r9
   14ccc:	bgt	14d34 <__assert_fail@plt+0x3fe8>
   14cd0:	add	r3, r5, #8
   14cd4:	str	r2, [sp, #36]	; 0x24
   14cd8:	rsb	r2, r2, #1
   14cdc:	cmp	r4, r3
   14ce0:	beq	14e0c <__assert_fail@plt+0x40c0>
   14ce4:	mov	r1, #8
   14ce8:	mov	r0, r4
   14cec:	mvn	r3, #-2147483648	; 0x80000000
   14cf0:	str	r1, [sp]
   14cf4:	add	r1, sp, #36	; 0x24
   14cf8:	bl	15b7c <__assert_fail@plt+0x4e30>
   14cfc:	mov	r4, r0
   14d00:	str	r0, [r5]
   14d04:	ldr	r0, [r5, #4]
   14d08:	mov	r1, #0
   14d0c:	ldr	r2, [sp, #36]	; 0x24
   14d10:	sub	r2, r2, r0
   14d14:	add	r0, r4, r0, lsl #3
   14d18:	lsl	r2, r2, #3
   14d1c:	bl	10cb0 <memset@plt>
   14d20:	ldr	r3, [sp, #36]	; 0x24
   14d24:	ldr	r1, [sp, #40]	; 0x28
   14d28:	ldr	r7, [sp, #80]	; 0x50
   14d2c:	str	r3, [r5, #4]
   14d30:	ldr	r6, [sp, #84]	; 0x54
   14d34:	mov	r3, fp
   14d38:	mov	r2, sl
   14d3c:	ldr	r0, [sp, #44]	; 0x2c
   14d40:	ldr	r9, [r4]
   14d44:	ldr	r5, [r4, #4]
   14d48:	orr	r0, r0, #1
   14d4c:	str	r1, [sp]
   14d50:	add	r1, sp, #48	; 0x30
   14d54:	str	r0, [sp, #4]
   14d58:	str	r1, [sp, #8]
   14d5c:	mov	r1, r9
   14d60:	str	r7, [sp, #12]
   14d64:	str	r6, [sp, #16]
   14d68:	str	r0, [sp, #28]
   14d6c:	mov	r0, r5
   14d70:	bl	118bc <__assert_fail@plt+0xb70>
   14d74:	cmp	r9, r0
   14d78:	bhi	14de4 <__assert_fail@plt+0x4098>
   14d7c:	add	r6, r0, #1
   14d80:	movw	r3, #29004	; 0x714c
   14d84:	movt	r3, #2
   14d88:	cmp	r5, r3
   14d8c:	str	r6, [r4]
   14d90:	beq	14d9c <__assert_fail@plt+0x4050>
   14d94:	mov	r0, r5
   14d98:	bl	15f60 <__assert_fail@plt+0x5214>
   14d9c:	mov	r0, r6
   14da0:	bl	158d8 <__assert_fail@plt+0x4b8c>
   14da4:	ldr	lr, [sp, #40]	; 0x28
   14da8:	mov	r1, r6
   14dac:	mov	r3, fp
   14db0:	mov	r2, sl
   14db4:	mov	r5, r0
   14db8:	ldr	r6, [sp, #80]	; 0x50
   14dbc:	ldr	ip, [sp, #84]	; 0x54
   14dc0:	str	r0, [r4, #4]
   14dc4:	str	lr, [sp]
   14dc8:	ldr	lr, [sp, #28]
   14dcc:	str	lr, [sp, #4]
   14dd0:	add	lr, sp, #48	; 0x30
   14dd4:	str	r6, [sp, #12]
   14dd8:	str	lr, [sp, #8]
   14ddc:	str	ip, [sp, #16]
   14de0:	bl	118bc <__assert_fail@plt+0xb70>
   14de4:	ldr	r3, [sp, #24]
   14de8:	mov	r0, r5
   14dec:	str	r3, [r8]
   14df0:	add	sp, sp, #92	; 0x5c
   14df4:	ldrd	r4, [sp]
   14df8:	ldrd	r6, [sp, #8]
   14dfc:	ldrd	r8, [sp, #16]
   14e00:	ldrd	sl, [sp, #24]
   14e04:	add	sp, sp, #32
   14e08:	pop	{pc}		; (ldr pc, [sp], #4)
   14e0c:	mov	r1, #8
   14e10:	mvn	r3, #-2147483648	; 0x80000000
   14e14:	ldr	r0, [sp, #28]
   14e18:	str	r1, [sp]
   14e1c:	add	r1, sp, #36	; 0x24
   14e20:	bl	15b7c <__assert_fail@plt+0x4e30>
   14e24:	ldrd	r2, [r5, #8]
   14e28:	mov	r4, r0
   14e2c:	str	r0, [r5]
   14e30:	strd	r2, [r0]
   14e34:	b	14d04 <__assert_fail@plt+0x3fb8>
   14e38:	bl	10d40 <abort@plt>
   14e3c:	andeq	r7, r2, ip, asr #4
   14e40:	ldr	r3, [pc]	; 14e48 <__assert_fail@plt+0x40fc>
   14e44:	b	132a8 <__assert_fail@plt+0x255c>
   14e48:	andeq	r7, r2, r4, ror #1
   14e4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e50:	movw	r4, #28884	; 0x70d4
   14e54:	movt	r4, #2
   14e58:	strd	r6, [sp, #8]
   14e5c:	strd	r8, [sp, #16]
   14e60:	strd	sl, [sp, #24]
   14e64:	mov	sl, r0
   14e68:	mov	fp, r1
   14e6c:	str	lr, [sp, #32]
   14e70:	sub	sp, sp, #44	; 0x2c
   14e74:	bl	10c98 <__errno_location@plt>
   14e78:	ldr	r3, [r0]
   14e7c:	mov	r8, r0
   14e80:	ldr	r2, [r4, #4]
   14e84:	ldr	r5, [r4]
   14e88:	str	r3, [sp, #28]
   14e8c:	cmp	r2, #0
   14e90:	bgt	14eec <__assert_fail@plt+0x41a0>
   14e94:	add	r3, r4, #8
   14e98:	str	r2, [sp, #36]	; 0x24
   14e9c:	rsb	r2, r2, #1
   14ea0:	cmp	r5, r3
   14ea4:	beq	14fc8 <__assert_fail@plt+0x427c>
   14ea8:	mov	r1, #8
   14eac:	mov	r0, r5
   14eb0:	mvn	r3, #-2147483648	; 0x80000000
   14eb4:	str	r1, [sp]
   14eb8:	add	r1, sp, #36	; 0x24
   14ebc:	bl	15b7c <__assert_fail@plt+0x4e30>
   14ec0:	mov	r5, r0
   14ec4:	str	r0, [r4]
   14ec8:	ldr	r0, [r4, #4]
   14ecc:	mov	r1, #0
   14ed0:	ldr	r2, [sp, #36]	; 0x24
   14ed4:	sub	r2, r2, r0
   14ed8:	add	r0, r5, r0, lsl #3
   14edc:	lsl	r2, r2, #3
   14ee0:	bl	10cb0 <memset@plt>
   14ee4:	ldr	r3, [sp, #36]	; 0x24
   14ee8:	str	r3, [r4, #4]
   14eec:	ldr	ip, [r4, #16]
   14ef0:	mov	r3, fp
   14ef4:	mov	r2, sl
   14ef8:	ldr	r7, [r4, #20]
   14efc:	ldr	r0, [pc, #240]	; 14ff4 <__assert_fail@plt+0x42a8>
   14f00:	ldr	r9, [r5]
   14f04:	orr	r7, r7, #1
   14f08:	ldr	r6, [r5, #4]
   14f0c:	str	ip, [sp]
   14f10:	ldr	ip, [r4, #56]	; 0x38
   14f14:	mov	r1, r9
   14f18:	str	r7, [sp, #4]
   14f1c:	ldr	lr, [r4, #60]	; 0x3c
   14f20:	str	r0, [sp, #8]
   14f24:	mov	r0, r6
   14f28:	str	ip, [sp, #12]
   14f2c:	str	lr, [sp, #16]
   14f30:	bl	118bc <__assert_fail@plt+0xb70>
   14f34:	cmp	r9, r0
   14f38:	bhi	14fa0 <__assert_fail@plt+0x4254>
   14f3c:	add	r9, r0, #1
   14f40:	movw	r3, #29004	; 0x714c
   14f44:	movt	r3, #2
   14f48:	cmp	r6, r3
   14f4c:	str	r9, [r5]
   14f50:	beq	14f5c <__assert_fail@plt+0x4210>
   14f54:	mov	r0, r6
   14f58:	bl	15f60 <__assert_fail@plt+0x5214>
   14f5c:	mov	r0, r9
   14f60:	bl	158d8 <__assert_fail@plt+0x4b8c>
   14f64:	ldr	ip, [r4, #16]
   14f68:	mov	r1, r9
   14f6c:	mov	r3, fp
   14f70:	mov	r2, sl
   14f74:	mov	r6, r0
   14f78:	ldr	r9, [r4, #56]	; 0x38
   14f7c:	ldr	lr, [r4, #60]	; 0x3c
   14f80:	str	r0, [r5, #4]
   14f84:	str	ip, [sp]
   14f88:	ldr	ip, [pc, #100]	; 14ff4 <__assert_fail@plt+0x42a8>
   14f8c:	str	r7, [sp, #4]
   14f90:	str	ip, [sp, #8]
   14f94:	str	r9, [sp, #12]
   14f98:	str	lr, [sp, #16]
   14f9c:	bl	118bc <__assert_fail@plt+0xb70>
   14fa0:	ldr	r3, [sp, #28]
   14fa4:	mov	r0, r6
   14fa8:	str	r3, [r8]
   14fac:	add	sp, sp, #44	; 0x2c
   14fb0:	ldrd	r4, [sp]
   14fb4:	ldrd	r6, [sp, #8]
   14fb8:	ldrd	r8, [sp, #16]
   14fbc:	ldrd	sl, [sp, #24]
   14fc0:	add	sp, sp, #32
   14fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc8:	mov	r0, #8
   14fcc:	mvn	r3, #-2147483648	; 0x80000000
   14fd0:	add	r1, sp, #36	; 0x24
   14fd4:	str	r0, [sp]
   14fd8:	mov	r0, #0
   14fdc:	bl	15b7c <__assert_fail@plt+0x4e30>
   14fe0:	ldrd	r2, [r4, #8]
   14fe4:	mov	r5, r0
   14fe8:	str	r0, [r4]
   14fec:	strd	r2, [r0]
   14ff0:	b	14ec8 <__assert_fail@plt+0x417c>
   14ff4:	andeq	r7, r2, ip, ror #1
   14ff8:	ldr	r3, [pc, #4]	; 15004 <__assert_fail@plt+0x42b8>
   14ffc:	mvn	r2, #0
   15000:	b	132a8 <__assert_fail@plt+0x255c>
   15004:	andeq	r7, r2, r4, ror #1
   15008:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1500c:	movw	r4, #28884	; 0x70d4
   15010:	movt	r4, #2
   15014:	strd	r6, [sp, #8]
   15018:	strd	r8, [sp, #16]
   1501c:	strd	sl, [sp, #24]
   15020:	mov	sl, r0
   15024:	str	lr, [sp, #32]
   15028:	sub	sp, sp, #44	; 0x2c
   1502c:	bl	10c98 <__errno_location@plt>
   15030:	ldr	r3, [r0]
   15034:	mov	r8, r0
   15038:	ldr	r2, [r4, #4]
   1503c:	ldr	r5, [r4]
   15040:	str	r3, [sp, #28]
   15044:	cmp	r2, #0
   15048:	bgt	150a4 <__assert_fail@plt+0x4358>
   1504c:	add	r3, r4, #8
   15050:	str	r2, [sp, #36]	; 0x24
   15054:	rsb	r2, r2, #1
   15058:	cmp	r5, r3
   1505c:	beq	1516c <__assert_fail@plt+0x4420>
   15060:	mov	r1, #8
   15064:	mov	r0, r5
   15068:	mvn	r3, #-2147483648	; 0x80000000
   1506c:	str	r1, [sp]
   15070:	add	r1, sp, #36	; 0x24
   15074:	bl	15b7c <__assert_fail@plt+0x4e30>
   15078:	mov	r5, r0
   1507c:	str	r0, [r4]
   15080:	ldr	r0, [r4, #4]
   15084:	mov	r1, #0
   15088:	ldr	r2, [sp, #36]	; 0x24
   1508c:	sub	r2, r2, r0
   15090:	add	r0, r5, r0, lsl #3
   15094:	lsl	r2, r2, #3
   15098:	bl	10cb0 <memset@plt>
   1509c:	ldr	r3, [sp, #36]	; 0x24
   150a0:	str	r3, [r4, #4]
   150a4:	ldr	ip, [r4, #16]
   150a8:	mvn	r3, #0
   150ac:	mov	r2, sl
   150b0:	ldr	r7, [r4, #20]
   150b4:	ldr	fp, [pc, #220]	; 15198 <__assert_fail@plt+0x444c>
   150b8:	ldr	r9, [r5]
   150bc:	orr	r7, r7, #1
   150c0:	ldr	r6, [r5, #4]
   150c4:	str	ip, [sp]
   150c8:	ldr	ip, [r4, #56]	; 0x38
   150cc:	mov	r1, r9
   150d0:	stmib	sp, {r7, fp}
   150d4:	ldr	lr, [r4, #60]	; 0x3c
   150d8:	mov	r0, r6
   150dc:	str	ip, [sp, #12]
   150e0:	str	lr, [sp, #16]
   150e4:	bl	118bc <__assert_fail@plt+0xb70>
   150e8:	cmp	r9, r0
   150ec:	bhi	15144 <__assert_fail@plt+0x43f8>
   150f0:	add	r9, r0, #1
   150f4:	movw	r3, #29004	; 0x714c
   150f8:	movt	r3, #2
   150fc:	cmp	r6, r3
   15100:	str	r9, [r5]
   15104:	beq	15110 <__assert_fail@plt+0x43c4>
   15108:	mov	r0, r6
   1510c:	bl	15f60 <__assert_fail@plt+0x5214>
   15110:	mov	r0, r9
   15114:	bl	158d8 <__assert_fail@plt+0x4b8c>
   15118:	ldr	r3, [r4, #16]
   1511c:	mov	r2, sl
   15120:	mov	r1, r9
   15124:	mov	r6, r0
   15128:	ldr	lr, [r4, #56]	; 0x38
   1512c:	ldr	ip, [r4, #60]	; 0x3c
   15130:	str	r0, [r5, #4]
   15134:	stm	sp, {r3, r7, fp, lr}
   15138:	mvn	r3, #0
   1513c:	str	ip, [sp, #16]
   15140:	bl	118bc <__assert_fail@plt+0xb70>
   15144:	ldr	r3, [sp, #28]
   15148:	mov	r0, r6
   1514c:	str	r3, [r8]
   15150:	add	sp, sp, #44	; 0x2c
   15154:	ldrd	r4, [sp]
   15158:	ldrd	r6, [sp, #8]
   1515c:	ldrd	r8, [sp, #16]
   15160:	ldrd	sl, [sp, #24]
   15164:	add	sp, sp, #32
   15168:	pop	{pc}		; (ldr pc, [sp], #4)
   1516c:	mov	r0, #8
   15170:	mvn	r3, #-2147483648	; 0x80000000
   15174:	add	r1, sp, #36	; 0x24
   15178:	str	r0, [sp]
   1517c:	mov	r0, #0
   15180:	bl	15b7c <__assert_fail@plt+0x4e30>
   15184:	ldrd	r2, [r4, #8]
   15188:	mov	r5, r0
   1518c:	str	r0, [r4]
   15190:	strd	r2, [r0]
   15194:	b	15080 <__assert_fail@plt+0x4334>
   15198:	andeq	r7, r2, ip, ror #1
   1519c:	cmp	r1, #0
   151a0:	strd	r4, [sp, #-16]!
   151a4:	mov	r4, r0
   151a8:	str	r6, [sp, #8]
   151ac:	str	lr, [sp, #12]
   151b0:	sub	sp, sp, #32
   151b4:	ldr	r5, [sp, #48]	; 0x30
   151b8:	ldr	r6, [sp, #52]	; 0x34
   151bc:	beq	152f0 <__assert_fail@plt+0x45a4>
   151c0:	mov	ip, r3
   151c4:	mov	r3, r2
   151c8:	mov	r2, r1
   151cc:	movw	r1, #26980	; 0x6964
   151d0:	movt	r1, #1
   151d4:	str	ip, [sp]
   151d8:	bl	10c8c <fprintf@plt>
   151dc:	mov	r2, #5
   151e0:	movw	r1, #27000	; 0x6978
   151e4:	movt	r1, #1
   151e8:	mov	r0, #0
   151ec:	bl	10bc0 <dcgettext@plt>
   151f0:	mov	r2, r0
   151f4:	movw	r3, #2022	; 0x7e6
   151f8:	movw	r1, #27704	; 0x6c38
   151fc:	movt	r1, #1
   15200:	mov	r0, r4
   15204:	bl	10c8c <fprintf@plt>
   15208:	mov	r1, r4
   1520c:	mov	r0, #10
   15210:	bl	10d04 <fputc@plt>
   15214:	mov	r2, #5
   15218:	movw	r1, #27004	; 0x697c
   1521c:	movt	r1, #1
   15220:	mov	r0, #0
   15224:	bl	10bc0 <dcgettext@plt>
   15228:	mov	r1, r0
   1522c:	movw	r2, #27176	; 0x6a28
   15230:	movt	r2, #1
   15234:	mov	r0, r4
   15238:	bl	10c8c <fprintf@plt>
   1523c:	mov	r1, r4
   15240:	mov	r0, #10
   15244:	bl	10d04 <fputc@plt>
   15248:	cmp	r6, #9
   1524c:	ldrls	pc, [pc, r6, lsl #2]
   15250:	b	1553c <__assert_fail@plt+0x47f0>
   15254:	ldrdeq	r5, [r1], -ip
   15258:	andeq	r5, r1, r0, lsl #6
   1525c:	andeq	r5, r1, r8, lsr r3
   15260:	andeq	r5, r1, r0, ror r3
   15264:			; <UNDEFINED> instruction: 0x000153b0
   15268:	strdeq	r5, [r1], -ip
   1526c:	andeq	r5, r1, r0, asr #8
   15270:	andeq	r5, r1, ip, lsl #9
   15274:	andeq	r5, r1, r0, ror #9
   15278:	andeq	r5, r1, ip, ror r2
   1527c:	movw	r1, #27480	; 0x6b58
   15280:	movt	r1, #1
   15284:	mov	r2, #5
   15288:	mov	r0, #0
   1528c:	bl	10bc0 <dcgettext@plt>
   15290:	ldr	ip, [r5, #8]
   15294:	mov	r1, r0
   15298:	mov	r0, r4
   1529c:	ldr	r3, [r5, #12]
   152a0:	ldr	r2, [r5, #32]
   152a4:	str	ip, [sp]
   152a8:	ldr	ip, [r5, #16]
   152ac:	str	r2, [sp, #24]
   152b0:	ldr	r2, [r5, #28]
   152b4:	str	r3, [sp, #4]
   152b8:	ldr	r3, [r5, #20]
   152bc:	str	ip, [sp, #8]
   152c0:	ldr	ip, [r5, #24]
   152c4:	str	r2, [sp, #20]
   152c8:	ldr	r2, [r5]
   152cc:	str	r3, [sp, #12]
   152d0:	ldr	r3, [r5, #4]
   152d4:	str	ip, [sp, #16]
   152d8:	bl	10c8c <fprintf@plt>
   152dc:	add	sp, sp, #32
   152e0:	ldrd	r4, [sp]
   152e4:	ldr	r6, [sp, #8]
   152e8:	add	sp, sp, #12
   152ec:	pop	{pc}		; (ldr pc, [sp], #4)
   152f0:	movw	r1, #26992	; 0x6970
   152f4:	movt	r1, #1
   152f8:	bl	10c8c <fprintf@plt>
   152fc:	b	151dc <__assert_fail@plt+0x4490>
   15300:	mov	r2, #5
   15304:	movw	r1, #27212	; 0x6a4c
   15308:	movt	r1, #1
   1530c:	mov	r0, #0
   15310:	bl	10bc0 <dcgettext@plt>
   15314:	ldr	r2, [r5]
   15318:	mov	r1, r0
   1531c:	mov	r0, r4
   15320:	add	sp, sp, #32
   15324:	ldrd	r4, [sp]
   15328:	ldr	r6, [sp, #8]
   1532c:	ldr	lr, [sp, #12]
   15330:	add	sp, sp, #16
   15334:	b	10c8c <fprintf@plt>
   15338:	mov	r2, #5
   1533c:	movw	r1, #27228	; 0x6a5c
   15340:	movt	r1, #1
   15344:	mov	r0, #0
   15348:	bl	10bc0 <dcgettext@plt>
   1534c:	ldrd	r2, [r5]
   15350:	mov	r1, r0
   15354:	mov	r0, r4
   15358:	add	sp, sp, #32
   1535c:	ldrd	r4, [sp]
   15360:	ldr	r6, [sp, #8]
   15364:	ldr	lr, [sp, #12]
   15368:	add	sp, sp, #16
   1536c:	b	10c8c <fprintf@plt>
   15370:	mov	r2, #5
   15374:	movw	r1, #27252	; 0x6a74
   15378:	movt	r1, #1
   1537c:	mov	r0, #0
   15380:	bl	10bc0 <dcgettext@plt>
   15384:	ldrd	r2, [r5]
   15388:	mov	r1, r0
   1538c:	mov	r0, r4
   15390:	ldr	ip, [r5, #8]
   15394:	str	ip, [sp, #48]	; 0x30
   15398:	add	sp, sp, #32
   1539c:	ldrd	r4, [sp]
   153a0:	ldr	r6, [sp, #8]
   153a4:	ldr	lr, [sp, #12]
   153a8:	add	sp, sp, #16
   153ac:	b	10c8c <fprintf@plt>
   153b0:	mov	r2, #5
   153b4:	movw	r1, #27280	; 0x6a90
   153b8:	movt	r1, #1
   153bc:	mov	r0, #0
   153c0:	bl	10bc0 <dcgettext@plt>
   153c4:	ldr	r2, [r5]
   153c8:	mov	r1, r0
   153cc:	mov	r0, r4
   153d0:	ldr	r3, [r5, #8]
   153d4:	ldr	ip, [r5, #12]
   153d8:	str	r3, [sp, #48]	; 0x30
   153dc:	ldr	r3, [r5, #4]
   153e0:	str	ip, [sp, #52]	; 0x34
   153e4:	add	sp, sp, #32
   153e8:	ldrd	r4, [sp]
   153ec:	ldr	r6, [sp, #8]
   153f0:	ldr	lr, [sp, #12]
   153f4:	add	sp, sp, #16
   153f8:	b	10c8c <fprintf@plt>
   153fc:	mov	r2, #5
   15400:	movw	r1, #27312	; 0x6ab0
   15404:	movt	r1, #1
   15408:	mov	r0, #0
   1540c:	bl	10bc0 <dcgettext@plt>
   15410:	ldr	r2, [r5, #8]
   15414:	mov	r1, r0
   15418:	mov	r0, r4
   1541c:	ldr	ip, [r5, #12]
   15420:	ldr	r3, [r5, #16]
   15424:	str	r2, [sp]
   15428:	ldr	r2, [r5]
   1542c:	str	r3, [sp, #8]
   15430:	ldr	r3, [r5, #4]
   15434:	str	ip, [sp, #4]
   15438:	bl	10c8c <fprintf@plt>
   1543c:	b	152dc <__assert_fail@plt+0x4590>
   15440:	mov	r2, #5
   15444:	movw	r1, #27348	; 0x6ad4
   15448:	movt	r1, #1
   1544c:	mov	r0, #0
   15450:	bl	10bc0 <dcgettext@plt>
   15454:	ldr	ip, [r5, #8]
   15458:	mov	r1, r0
   1545c:	mov	r0, r4
   15460:	ldr	r3, [r5, #12]
   15464:	ldr	r2, [r5, #20]
   15468:	str	ip, [sp]
   1546c:	ldr	ip, [r5, #16]
   15470:	str	r2, [sp, #12]
   15474:	ldr	r2, [r5]
   15478:	str	r3, [sp, #4]
   1547c:	ldr	r3, [r5, #4]
   15480:	str	ip, [sp, #8]
   15484:	bl	10c8c <fprintf@plt>
   15488:	b	152dc <__assert_fail@plt+0x4590>
   1548c:	mov	r2, #5
   15490:	movw	r1, #27388	; 0x6afc
   15494:	movt	r1, #1
   15498:	mov	r0, #0
   1549c:	bl	10bc0 <dcgettext@plt>
   154a0:	ldr	r3, [r5, #8]
   154a4:	mov	r1, r0
   154a8:	mov	r0, r4
   154ac:	ldr	r2, [r5, #12]
   154b0:	ldr	ip, [r5, #24]
   154b4:	str	r3, [sp]
   154b8:	ldr	r3, [r5, #16]
   154bc:	str	ip, [sp, #16]
   154c0:	ldr	ip, [r5, #20]
   154c4:	str	r2, [sp, #4]
   154c8:	ldr	r2, [r5]
   154cc:	str	r3, [sp, #8]
   154d0:	ldr	r3, [r5, #4]
   154d4:	str	ip, [sp, #12]
   154d8:	bl	10c8c <fprintf@plt>
   154dc:	b	152dc <__assert_fail@plt+0x4590>
   154e0:	mov	r2, #5
   154e4:	movw	r1, #27432	; 0x6b28
   154e8:	movt	r1, #1
   154ec:	mov	r0, #0
   154f0:	bl	10bc0 <dcgettext@plt>
   154f4:	ldr	r2, [r5, #8]
   154f8:	mov	r1, r0
   154fc:	mov	r0, r4
   15500:	ldr	ip, [r5, #12]
   15504:	ldr	r3, [r5, #28]
   15508:	str	r2, [sp]
   1550c:	ldr	r2, [r5, #16]
   15510:	str	r3, [sp, #20]
   15514:	ldr	r3, [r5, #24]
   15518:	str	ip, [sp, #4]
   1551c:	ldr	ip, [r5, #20]
   15520:	str	r2, [sp, #8]
   15524:	ldr	r2, [r5]
   15528:	str	r3, [sp, #16]
   1552c:	ldr	r3, [r5, #4]
   15530:	str	ip, [sp, #12]
   15534:	bl	10c8c <fprintf@plt>
   15538:	b	152dc <__assert_fail@plt+0x4590>
   1553c:	movw	r1, #27532	; 0x6b8c
   15540:	movt	r1, #1
   15544:	b	15284 <__assert_fail@plt+0x4538>
   15548:	strd	r4, [sp, #-12]!
   1554c:	str	lr, [sp, #8]
   15550:	sub	sp, sp, #12
   15554:	ldr	r5, [sp, #24]
   15558:	ldr	ip, [r5]
   1555c:	cmp	ip, #0
   15560:	beq	1557c <__assert_fail@plt+0x4830>
   15564:	mov	lr, r5
   15568:	mov	ip, #0
   1556c:	ldr	r4, [lr, #4]!
   15570:	add	ip, ip, #1
   15574:	cmp	r4, #0
   15578:	bne	1556c <__assert_fail@plt+0x4820>
   1557c:	stm	sp, {r5, ip}
   15580:	bl	1519c <__assert_fail@plt+0x4450>
   15584:	add	sp, sp, #12
   15588:	ldrd	r4, [sp]
   1558c:	add	sp, sp, #8
   15590:	pop	{pc}		; (ldr pc, [sp], #4)
   15594:	push	{lr}		; (str lr, [sp, #-4]!)
   15598:	sub	sp, sp, #52	; 0x34
   1559c:	ldr	ip, [sp, #56]	; 0x38
   155a0:	ldr	lr, [ip]
   155a4:	cmp	lr, #0
   155a8:	str	lr, [sp, #8]
   155ac:	beq	15644 <__assert_fail@plt+0x48f8>
   155b0:	ldr	lr, [ip, #4]
   155b4:	cmp	lr, #0
   155b8:	str	lr, [sp, #12]
   155bc:	beq	15658 <__assert_fail@plt+0x490c>
   155c0:	ldr	lr, [ip, #8]
   155c4:	cmp	lr, #0
   155c8:	str	lr, [sp, #16]
   155cc:	beq	15660 <__assert_fail@plt+0x4914>
   155d0:	ldr	lr, [ip, #12]
   155d4:	cmp	lr, #0
   155d8:	str	lr, [sp, #20]
   155dc:	beq	15668 <__assert_fail@plt+0x491c>
   155e0:	ldr	lr, [ip, #16]
   155e4:	cmp	lr, #0
   155e8:	str	lr, [sp, #24]
   155ec:	beq	15670 <__assert_fail@plt+0x4924>
   155f0:	ldr	lr, [ip, #20]
   155f4:	cmp	lr, #0
   155f8:	str	lr, [sp, #28]
   155fc:	beq	15678 <__assert_fail@plt+0x492c>
   15600:	ldr	lr, [ip, #24]
   15604:	cmp	lr, #0
   15608:	str	lr, [sp, #32]
   1560c:	beq	15680 <__assert_fail@plt+0x4934>
   15610:	ldr	lr, [ip, #28]
   15614:	cmp	lr, #0
   15618:	str	lr, [sp, #36]	; 0x24
   1561c:	beq	15688 <__assert_fail@plt+0x493c>
   15620:	ldr	lr, [ip, #32]
   15624:	cmp	lr, #0
   15628:	str	lr, [sp, #40]	; 0x28
   1562c:	beq	15690 <__assert_fail@plt+0x4944>
   15630:	ldr	ip, [ip, #36]	; 0x24
   15634:	cmp	ip, #0
   15638:	str	ip, [sp, #44]	; 0x2c
   1563c:	movne	lr, #10
   15640:	moveq	lr, #9
   15644:	add	ip, sp, #8
   15648:	stm	sp, {ip, lr}
   1564c:	bl	1519c <__assert_fail@plt+0x4450>
   15650:	add	sp, sp, #52	; 0x34
   15654:	pop	{pc}		; (ldr pc, [sp], #4)
   15658:	mov	lr, #1
   1565c:	b	15644 <__assert_fail@plt+0x48f8>
   15660:	mov	lr, #2
   15664:	b	15644 <__assert_fail@plt+0x48f8>
   15668:	mov	lr, #3
   1566c:	b	15644 <__assert_fail@plt+0x48f8>
   15670:	mov	lr, #4
   15674:	b	15644 <__assert_fail@plt+0x48f8>
   15678:	mov	lr, #5
   1567c:	b	15644 <__assert_fail@plt+0x48f8>
   15680:	mov	lr, #6
   15684:	b	15644 <__assert_fail@plt+0x48f8>
   15688:	mov	lr, #7
   1568c:	b	15644 <__assert_fail@plt+0x48f8>
   15690:	mov	lr, #8
   15694:	b	15644 <__assert_fail@plt+0x48f8>
   15698:	push	{r3}		; (str r3, [sp, #-4]!)
   1569c:	push	{lr}		; (str lr, [sp, #-4]!)
   156a0:	sub	sp, sp, #56	; 0x38
   156a4:	ldr	ip, [sp, #64]	; 0x40
   156a8:	add	r3, sp, #64	; 0x40
   156ac:	str	r3, [sp, #12]
   156b0:	cmp	ip, #0
   156b4:	str	ip, [sp, #16]
   156b8:	beq	15750 <__assert_fail@plt+0x4a04>
   156bc:	ldr	ip, [sp, #68]	; 0x44
   156c0:	cmp	ip, #0
   156c4:	str	ip, [sp, #20]
   156c8:	beq	15774 <__assert_fail@plt+0x4a28>
   156cc:	ldr	ip, [sp, #72]	; 0x48
   156d0:	cmp	ip, #0
   156d4:	str	ip, [sp, #24]
   156d8:	beq	1577c <__assert_fail@plt+0x4a30>
   156dc:	ldr	ip, [sp, #76]	; 0x4c
   156e0:	cmp	ip, #0
   156e4:	str	ip, [sp, #28]
   156e8:	beq	15784 <__assert_fail@plt+0x4a38>
   156ec:	ldr	ip, [sp, #80]	; 0x50
   156f0:	cmp	ip, #0
   156f4:	str	ip, [sp, #32]
   156f8:	beq	1578c <__assert_fail@plt+0x4a40>
   156fc:	ldr	ip, [sp, #84]	; 0x54
   15700:	cmp	ip, #0
   15704:	str	ip, [sp, #36]	; 0x24
   15708:	beq	15794 <__assert_fail@plt+0x4a48>
   1570c:	ldr	ip, [sp, #88]	; 0x58
   15710:	cmp	ip, #0
   15714:	str	ip, [sp, #40]	; 0x28
   15718:	beq	1579c <__assert_fail@plt+0x4a50>
   1571c:	ldr	ip, [sp, #92]	; 0x5c
   15720:	cmp	ip, #0
   15724:	str	ip, [sp, #44]	; 0x2c
   15728:	beq	157a4 <__assert_fail@plt+0x4a58>
   1572c:	ldr	ip, [sp, #96]	; 0x60
   15730:	cmp	ip, #0
   15734:	str	ip, [sp, #48]	; 0x30
   15738:	beq	157ac <__assert_fail@plt+0x4a60>
   1573c:	ldr	r3, [sp, #100]	; 0x64
   15740:	cmp	r3, #0
   15744:	str	r3, [sp, #52]	; 0x34
   15748:	movne	ip, #10
   1574c:	moveq	ip, #9
   15750:	ldr	r3, [sp, #60]	; 0x3c
   15754:	add	lr, sp, #16
   15758:	str	lr, [sp]
   1575c:	str	ip, [sp, #4]
   15760:	bl	1519c <__assert_fail@plt+0x4450>
   15764:	add	sp, sp, #56	; 0x38
   15768:	pop	{lr}		; (ldr lr, [sp], #4)
   1576c:	add	sp, sp, #4
   15770:	bx	lr
   15774:	mov	ip, #1
   15778:	b	15750 <__assert_fail@plt+0x4a04>
   1577c:	mov	ip, #2
   15780:	b	15750 <__assert_fail@plt+0x4a04>
   15784:	mov	ip, #3
   15788:	b	15750 <__assert_fail@plt+0x4a04>
   1578c:	mov	ip, #4
   15790:	b	15750 <__assert_fail@plt+0x4a04>
   15794:	mov	ip, #5
   15798:	b	15750 <__assert_fail@plt+0x4a04>
   1579c:	mov	ip, #6
   157a0:	b	15750 <__assert_fail@plt+0x4a04>
   157a4:	mov	ip, #7
   157a8:	b	15750 <__assert_fail@plt+0x4a04>
   157ac:	mov	ip, #8
   157b0:	b	15750 <__assert_fail@plt+0x4a04>
   157b4:	movw	r3, #28980	; 0x7134
   157b8:	movt	r3, #2
   157bc:	str	r4, [sp, #-8]!
   157c0:	mov	r0, #10
   157c4:	ldr	r1, [r3]
   157c8:	str	lr, [sp, #4]
   157cc:	bl	10d04 <fputc@plt>
   157d0:	mov	r2, #5
   157d4:	movw	r1, #27592	; 0x6bc8
   157d8:	movt	r1, #1
   157dc:	mov	r0, #0
   157e0:	bl	10bc0 <dcgettext@plt>
   157e4:	movw	r1, #26616	; 0x67f8
   157e8:	movt	r1, #1
   157ec:	bl	10b60 <printf@plt>
   157f0:	mov	r2, #5
   157f4:	movw	r1, #27612	; 0x6bdc
   157f8:	movt	r1, #1
   157fc:	mov	r0, #0
   15800:	bl	10bc0 <dcgettext@plt>
   15804:	movw	r2, #26576	; 0x67d0
   15808:	movt	r2, #1
   1580c:	movw	r1, #26336	; 0x66e0
   15810:	movt	r1, #1
   15814:	bl	10b60 <printf@plt>
   15818:	movw	r1, #27632	; 0x6bf0
   1581c:	movt	r1, #1
   15820:	mov	r2, #5
   15824:	mov	r0, #0
   15828:	bl	10bc0 <dcgettext@plt>
   1582c:	movw	r1, #27672	; 0x6c18
   15830:	movt	r1, #1
   15834:	ldr	r4, [sp]
   15838:	ldr	lr, [sp, #4]
   1583c:	add	sp, sp, #8
   15840:	b	10b60 <printf@plt>
   15844:	strd	r4, [sp, #-16]!
   15848:	mov	r4, r0
   1584c:	mov	r5, r2
   15850:	str	r6, [sp, #8]
   15854:	mov	r6, r1
   15858:	str	lr, [sp, #12]
   1585c:	bl	16194 <__assert_fail@plt+0x5448>
   15860:	cmp	r0, #0
   15864:	beq	15878 <__assert_fail@plt+0x4b2c>
   15868:	ldrd	r4, [sp]
   1586c:	ldr	r6, [sp, #8]
   15870:	add	sp, sp, #12
   15874:	pop	{pc}		; (ldr pc, [sp], #4)
   15878:	cmp	r4, #0
   1587c:	beq	1588c <__assert_fail@plt+0x4b40>
   15880:	cmp	r6, #0
   15884:	cmpne	r5, #0
   15888:	beq	15868 <__assert_fail@plt+0x4b1c>
   1588c:	bl	15e48 <__assert_fail@plt+0x50fc>
   15890:	str	r4, [sp, #-8]!
   15894:	str	lr, [sp, #4]
   15898:	bl	16090 <__assert_fail@plt+0x5344>
   1589c:	cmp	r0, #0
   158a0:	beq	158b0 <__assert_fail@plt+0x4b64>
   158a4:	ldr	r4, [sp]
   158a8:	add	sp, sp, #4
   158ac:	pop	{pc}		; (ldr pc, [sp], #4)
   158b0:	bl	15e48 <__assert_fail@plt+0x50fc>
   158b4:	str	r4, [sp, #-8]!
   158b8:	str	lr, [sp, #4]
   158bc:	bl	16090 <__assert_fail@plt+0x5344>
   158c0:	cmp	r0, #0
   158c4:	beq	158d4 <__assert_fail@plt+0x4b88>
   158c8:	ldr	r4, [sp]
   158cc:	add	sp, sp, #4
   158d0:	pop	{pc}		; (ldr pc, [sp], #4)
   158d4:	bl	15e48 <__assert_fail@plt+0x50fc>
   158d8:	str	r4, [sp, #-8]!
   158dc:	str	lr, [sp, #4]
   158e0:	bl	16090 <__assert_fail@plt+0x5344>
   158e4:	cmp	r0, #0
   158e8:	beq	158f8 <__assert_fail@plt+0x4bac>
   158ec:	ldr	r4, [sp]
   158f0:	add	sp, sp, #4
   158f4:	pop	{pc}		; (ldr pc, [sp], #4)
   158f8:	bl	15e48 <__assert_fail@plt+0x50fc>
   158fc:	strd	r4, [sp, #-16]!
   15900:	mov	r5, r0
   15904:	mov	r4, r1
   15908:	str	r6, [sp, #8]
   1590c:	str	lr, [sp, #12]
   15910:	bl	1613c <__assert_fail@plt+0x53f0>
   15914:	cmp	r0, #0
   15918:	beq	1592c <__assert_fail@plt+0x4be0>
   1591c:	ldrd	r4, [sp]
   15920:	ldr	r6, [sp, #8]
   15924:	add	sp, sp, #12
   15928:	pop	{pc}		; (ldr pc, [sp], #4)
   1592c:	adds	r4, r4, #0
   15930:	movne	r4, #1
   15934:	cmp	r5, #0
   15938:	moveq	r4, #1
   1593c:	cmp	r4, #0
   15940:	beq	1591c <__assert_fail@plt+0x4bd0>
   15944:	bl	15e48 <__assert_fail@plt+0x50fc>
   15948:	cmp	r1, #0
   1594c:	orreq	r1, r1, #1
   15950:	str	r4, [sp, #-8]!
   15954:	str	lr, [sp, #4]
   15958:	bl	1613c <__assert_fail@plt+0x53f0>
   1595c:	cmp	r0, #0
   15960:	beq	15970 <__assert_fail@plt+0x4c24>
   15964:	ldr	r4, [sp]
   15968:	add	sp, sp, #4
   1596c:	pop	{pc}		; (ldr pc, [sp], #4)
   15970:	bl	15e48 <__assert_fail@plt+0x50fc>
   15974:	strd	r4, [sp, #-16]!
   15978:	mov	r4, r0
   1597c:	mov	r5, r2
   15980:	str	r6, [sp, #8]
   15984:	mov	r6, r1
   15988:	str	lr, [sp, #12]
   1598c:	bl	16194 <__assert_fail@plt+0x5448>
   15990:	cmp	r0, #0
   15994:	beq	159a8 <__assert_fail@plt+0x4c5c>
   15998:	ldrd	r4, [sp]
   1599c:	ldr	r6, [sp, #8]
   159a0:	add	sp, sp, #12
   159a4:	pop	{pc}		; (ldr pc, [sp], #4)
   159a8:	cmp	r4, #0
   159ac:	beq	159bc <__assert_fail@plt+0x4c70>
   159b0:	cmp	r6, #0
   159b4:	cmpne	r5, #0
   159b8:	beq	15998 <__assert_fail@plt+0x4c4c>
   159bc:	bl	15e48 <__assert_fail@plt+0x50fc>
   159c0:	cmp	r2, #0
   159c4:	cmpne	r1, #0
   159c8:	str	r4, [sp, #-8]!
   159cc:	moveq	r2, #1
   159d0:	str	lr, [sp, #4]
   159d4:	moveq	r1, r2
   159d8:	bl	16194 <__assert_fail@plt+0x5448>
   159dc:	cmp	r0, #0
   159e0:	beq	159f0 <__assert_fail@plt+0x4ca4>
   159e4:	ldr	r4, [sp]
   159e8:	add	sp, sp, #4
   159ec:	pop	{pc}		; (ldr pc, [sp], #4)
   159f0:	bl	15e48 <__assert_fail@plt+0x50fc>
   159f4:	mov	r2, r1
   159f8:	mov	r1, r0
   159fc:	str	r4, [sp, #-8]!
   15a00:	mov	r0, #0
   15a04:	str	lr, [sp, #4]
   15a08:	bl	16194 <__assert_fail@plt+0x5448>
   15a0c:	cmp	r0, #0
   15a10:	beq	15a20 <__assert_fail@plt+0x4cd4>
   15a14:	ldr	r4, [sp]
   15a18:	add	sp, sp, #4
   15a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a20:	bl	15e48 <__assert_fail@plt+0x50fc>
   15a24:	cmp	r1, #0
   15a28:	cmpne	r0, #0
   15a2c:	str	r4, [sp, #-8]!
   15a30:	moveq	r2, #1
   15a34:	movne	r2, r1
   15a38:	str	lr, [sp, #4]
   15a3c:	movne	r1, r0
   15a40:	moveq	r1, r2
   15a44:	mov	r0, #0
   15a48:	bl	16194 <__assert_fail@plt+0x5448>
   15a4c:	cmp	r0, #0
   15a50:	beq	15a60 <__assert_fail@plt+0x4d14>
   15a54:	ldr	r4, [sp]
   15a58:	add	sp, sp, #4
   15a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a60:	bl	15e48 <__assert_fail@plt+0x50fc>
   15a64:	cmp	r0, #0
   15a68:	strd	r4, [sp, #-16]!
   15a6c:	mov	r5, r1
   15a70:	ldr	r4, [r1]
   15a74:	str	r6, [sp, #8]
   15a78:	str	lr, [sp, #12]
   15a7c:	beq	15ac4 <__assert_fail@plt+0x4d78>
   15a80:	lsr	r3, r4, #1
   15a84:	add	r3, r3, #1
   15a88:	adds	r4, r4, r3
   15a8c:	bcs	15ac0 <__assert_fail@plt+0x4d74>
   15a90:	mov	r2, #1
   15a94:	mov	r1, r4
   15a98:	bl	16194 <__assert_fail@plt+0x5448>
   15a9c:	cmp	r0, #0
   15aa0:	beq	15ab8 <__assert_fail@plt+0x4d6c>
   15aa4:	ldr	r6, [sp, #8]
   15aa8:	str	r4, [r5]
   15aac:	ldrd	r4, [sp]
   15ab0:	add	sp, sp, #12
   15ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab8:	cmp	r4, #0
   15abc:	beq	15aa4 <__assert_fail@plt+0x4d58>
   15ac0:	bl	15e48 <__assert_fail@plt+0x50fc>
   15ac4:	cmp	r4, #0
   15ac8:	mov	r2, #1
   15acc:	moveq	r4, #64	; 0x40
   15ad0:	mov	r1, r4
   15ad4:	bl	16194 <__assert_fail@plt+0x5448>
   15ad8:	cmp	r0, #0
   15adc:	bne	15aa4 <__assert_fail@plt+0x4d58>
   15ae0:	b	15ac0 <__assert_fail@plt+0x4d74>
   15ae4:	cmp	r0, #0
   15ae8:	strd	r4, [sp, #-16]!
   15aec:	mov	r5, r1
   15af0:	ldr	r4, [r1]
   15af4:	str	r6, [sp, #8]
   15af8:	mov	r6, r2
   15afc:	str	lr, [sp, #12]
   15b00:	beq	15b48 <__assert_fail@plt+0x4dfc>
   15b04:	lsr	r3, r4, #1
   15b08:	add	r3, r3, #1
   15b0c:	adds	r4, r4, r3
   15b10:	bcs	15b44 <__assert_fail@plt+0x4df8>
   15b14:	mov	r1, r4
   15b18:	bl	16194 <__assert_fail@plt+0x5448>
   15b1c:	cmp	r0, #0
   15b20:	beq	15b38 <__assert_fail@plt+0x4dec>
   15b24:	ldr	r6, [sp, #8]
   15b28:	str	r4, [r5]
   15b2c:	ldrd	r4, [sp]
   15b30:	add	sp, sp, #12
   15b34:	pop	{pc}		; (ldr pc, [sp], #4)
   15b38:	cmp	r4, #0
   15b3c:	cmpne	r6, #0
   15b40:	beq	15b24 <__assert_fail@plt+0x4dd8>
   15b44:	bl	15e48 <__assert_fail@plt+0x50fc>
   15b48:	cmp	r4, #0
   15b4c:	bne	15b60 <__assert_fail@plt+0x4e14>
   15b50:	mov	r4, #64	; 0x40
   15b54:	udiv	r4, r4, r2
   15b58:	cmp	r2, #64	; 0x40
   15b5c:	addhi	r4, r4, #1
   15b60:	mov	r2, r6
   15b64:	mov	r1, r4
   15b68:	mov	r0, #0
   15b6c:	bl	16194 <__assert_fail@plt+0x5448>
   15b70:	cmp	r0, #0
   15b74:	bne	15b24 <__assert_fail@plt+0x4dd8>
   15b78:	b	15b44 <__assert_fail@plt+0x4df8>
   15b7c:	ldr	ip, [r1]
   15b80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b84:	strd	r6, [sp, #8]
   15b88:	mov	r7, r1
   15b8c:	mov	r6, r0
   15b90:	str	r8, [sp, #16]
   15b94:	mvn	r8, r3
   15b98:	lsr	r8, r8, #31
   15b9c:	str	lr, [sp, #20]
   15ba0:	asr	r1, ip, #1
   15ba4:	ldr	lr, [sp, #24]
   15ba8:	adds	r4, ip, r1
   15bac:	mvnvs	r4, #-2147483648	; 0x80000000
   15bb0:	cmp	r3, r4
   15bb4:	movge	r1, #0
   15bb8:	andlt	r1, r8, #1
   15bbc:	cmp	r1, #0
   15bc0:	movne	r4, r3
   15bc4:	smull	r0, r1, r4, lr
   15bc8:	cmp	r1, r0, asr #31
   15bcc:	bne	15c7c <__assert_fail@plt+0x4f30>
   15bd0:	cmp	r0, #63	; 0x3f
   15bd4:	mov	r5, r0
   15bd8:	ble	15c48 <__assert_fail@plt+0x4efc>
   15bdc:	cmp	r6, #0
   15be0:	sub	r1, r4, ip
   15be4:	streq	r6, [r7]
   15be8:	cmp	r1, r2
   15bec:	bge	15c1c <__assert_fail@plt+0x4ed0>
   15bf0:	adds	r4, ip, r2
   15bf4:	bvs	15c78 <__assert_fail@plt+0x4f2c>
   15bf8:	cmp	r4, r3
   15bfc:	movle	r3, #0
   15c00:	andgt	r3, r8, #1
   15c04:	cmp	r3, #0
   15c08:	bne	15c78 <__assert_fail@plt+0x4f2c>
   15c0c:	smull	r0, r1, r4, lr
   15c10:	cmp	r1, r0, asr #31
   15c14:	mov	r5, r0
   15c18:	bne	15c78 <__assert_fail@plt+0x4f2c>
   15c1c:	mov	r1, r5
   15c20:	mov	r0, r6
   15c24:	bl	1613c <__assert_fail@plt+0x53f0>
   15c28:	cmp	r0, #0
   15c2c:	beq	15c5c <__assert_fail@plt+0x4f10>
   15c30:	ldr	r8, [sp, #16]
   15c34:	str	r4, [r7]
   15c38:	ldrd	r4, [sp]
   15c3c:	ldrd	r6, [sp, #8]
   15c40:	add	sp, sp, #20
   15c44:	pop	{pc}		; (ldr pc, [sp], #4)
   15c48:	mov	r0, #64	; 0x40
   15c4c:	sdiv	r4, r0, lr
   15c50:	mls	r5, lr, r4, r0
   15c54:	sub	r5, r0, r5
   15c58:	b	15bdc <__assert_fail@plt+0x4e90>
   15c5c:	adds	r5, r5, #0
   15c60:	movne	r5, #1
   15c64:	cmp	r6, #0
   15c68:	movne	r6, r5
   15c6c:	moveq	r6, #1
   15c70:	cmp	r6, #0
   15c74:	beq	15c30 <__assert_fail@plt+0x4ee4>
   15c78:	bl	15e48 <__assert_fail@plt+0x50fc>
   15c7c:	mvn	r0, #-2147483648	; 0x80000000
   15c80:	b	15c4c <__assert_fail@plt+0x4f00>
   15c84:	mov	r1, #1
   15c88:	str	r4, [sp, #-8]!
   15c8c:	str	lr, [sp, #4]
   15c90:	bl	15e8c <__assert_fail@plt+0x5140>
   15c94:	cmp	r0, #0
   15c98:	beq	15ca8 <__assert_fail@plt+0x4f5c>
   15c9c:	ldr	r4, [sp]
   15ca0:	add	sp, sp, #4
   15ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ca8:	bl	15e48 <__assert_fail@plt+0x50fc>
   15cac:	mov	r1, #1
   15cb0:	str	r4, [sp, #-8]!
   15cb4:	str	lr, [sp, #4]
   15cb8:	bl	15e8c <__assert_fail@plt+0x5140>
   15cbc:	cmp	r0, #0
   15cc0:	beq	15cd0 <__assert_fail@plt+0x4f84>
   15cc4:	ldr	r4, [sp]
   15cc8:	add	sp, sp, #4
   15ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd0:	bl	15e48 <__assert_fail@plt+0x50fc>
   15cd4:	str	r4, [sp, #-8]!
   15cd8:	str	lr, [sp, #4]
   15cdc:	bl	15e8c <__assert_fail@plt+0x5140>
   15ce0:	cmp	r0, #0
   15ce4:	beq	15cf4 <__assert_fail@plt+0x4fa8>
   15ce8:	ldr	r4, [sp]
   15cec:	add	sp, sp, #4
   15cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cf4:	bl	15e48 <__assert_fail@plt+0x50fc>
   15cf8:	str	r4, [sp, #-8]!
   15cfc:	str	lr, [sp, #4]
   15d00:	bl	15e8c <__assert_fail@plt+0x5140>
   15d04:	cmp	r0, #0
   15d08:	beq	15d18 <__assert_fail@plt+0x4fcc>
   15d0c:	ldr	r4, [sp]
   15d10:	add	sp, sp, #4
   15d14:	pop	{pc}		; (ldr pc, [sp], #4)
   15d18:	bl	15e48 <__assert_fail@plt+0x50fc>
   15d1c:	strd	r4, [sp, #-16]!
   15d20:	mov	r4, r1
   15d24:	str	r6, [sp, #8]
   15d28:	mov	r6, r0
   15d2c:	mov	r0, r1
   15d30:	str	lr, [sp, #12]
   15d34:	bl	16090 <__assert_fail@plt+0x5344>
   15d38:	subs	r5, r0, #0
   15d3c:	beq	15d60 <__assert_fail@plt+0x5014>
   15d40:	mov	r2, r4
   15d44:	mov	r1, r6
   15d48:	bl	10b9c <memcpy@plt>
   15d4c:	mov	r0, r5
   15d50:	ldrd	r4, [sp]
   15d54:	ldr	r6, [sp, #8]
   15d58:	add	sp, sp, #12
   15d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d60:	bl	15e48 <__assert_fail@plt+0x50fc>
   15d64:	strd	r4, [sp, #-16]!
   15d68:	mov	r4, r1
   15d6c:	str	r6, [sp, #8]
   15d70:	mov	r6, r0
   15d74:	mov	r0, r1
   15d78:	str	lr, [sp, #12]
   15d7c:	bl	16090 <__assert_fail@plt+0x5344>
   15d80:	subs	r5, r0, #0
   15d84:	beq	15da8 <__assert_fail@plt+0x505c>
   15d88:	mov	r2, r4
   15d8c:	mov	r1, r6
   15d90:	bl	10b9c <memcpy@plt>
   15d94:	mov	r0, r5
   15d98:	ldrd	r4, [sp]
   15d9c:	ldr	r6, [sp, #8]
   15da0:	add	sp, sp, #12
   15da4:	pop	{pc}		; (ldr pc, [sp], #4)
   15da8:	bl	15e48 <__assert_fail@plt+0x50fc>
   15dac:	strd	r4, [sp, #-16]!
   15db0:	mov	r4, r1
   15db4:	str	r6, [sp, #8]
   15db8:	mov	r6, r0
   15dbc:	add	r0, r1, #1
   15dc0:	str	lr, [sp, #12]
   15dc4:	bl	16090 <__assert_fail@plt+0x5344>
   15dc8:	subs	r5, r0, #0
   15dcc:	beq	15df8 <__assert_fail@plt+0x50ac>
   15dd0:	mov	r3, #0
   15dd4:	mov	r1, r6
   15dd8:	mov	r2, r4
   15ddc:	strb	r3, [r5, r4]
   15de0:	bl	10b9c <memcpy@plt>
   15de4:	mov	r0, r5
   15de8:	ldrd	r4, [sp]
   15dec:	ldr	r6, [sp, #8]
   15df0:	add	sp, sp, #12
   15df4:	pop	{pc}		; (ldr pc, [sp], #4)
   15df8:	bl	15e48 <__assert_fail@plt+0x50fc>
   15dfc:	strd	r4, [sp, #-16]!
   15e00:	str	r6, [sp, #8]
   15e04:	mov	r6, r0
   15e08:	str	lr, [sp, #12]
   15e0c:	bl	10c80 <strlen@plt>
   15e10:	add	r4, r0, #1
   15e14:	mov	r0, r4
   15e18:	bl	16090 <__assert_fail@plt+0x5344>
   15e1c:	subs	r5, r0, #0
   15e20:	beq	15e44 <__assert_fail@plt+0x50f8>
   15e24:	mov	r2, r4
   15e28:	mov	r1, r6
   15e2c:	bl	10b9c <memcpy@plt>
   15e30:	mov	r0, r5
   15e34:	ldrd	r4, [sp]
   15e38:	ldr	r6, [sp, #8]
   15e3c:	add	sp, sp, #12
   15e40:	pop	{pc}		; (ldr pc, [sp], #4)
   15e44:	bl	15e48 <__assert_fail@plt+0x50fc>
   15e48:	movw	r3, #28880	; 0x70d0
   15e4c:	movt	r3, #2
   15e50:	str	r4, [sp, #-8]!
   15e54:	ldr	r4, [r3]
   15e58:	mov	r2, #5
   15e5c:	movw	r1, #27752	; 0x6c68
   15e60:	movt	r1, #1
   15e64:	mov	r0, #0
   15e68:	str	lr, [sp, #4]
   15e6c:	bl	10bc0 <dcgettext@plt>
   15e70:	mov	r3, r0
   15e74:	movw	r2, #26692	; 0x6844
   15e78:	movt	r2, #1
   15e7c:	mov	r1, #0
   15e80:	mov	r0, r4
   15e84:	bl	10c20 <error@plt>
   15e88:	bl	10d40 <abort@plt>
   15e8c:	cmp	r1, #0
   15e90:	cmpne	r0, #0
   15e94:	beq	15ee0 <__assert_fail@plt+0x5194>
   15e98:	strd	r4, [sp, #-16]!
   15e9c:	umull	r4, r5, r0, r1
   15ea0:	str	r6, [sp, #8]
   15ea4:	str	lr, [sp, #12]
   15ea8:	adds	r3, r5, #0
   15eac:	movne	r3, #1
   15eb0:	cmp	r4, #0
   15eb4:	blt	15ec0 <__assert_fail@plt+0x5174>
   15eb8:	cmp	r3, #0
   15ebc:	beq	15eec <__assert_fail@plt+0x51a0>
   15ec0:	bl	10c98 <__errno_location@plt>
   15ec4:	mov	r3, #12
   15ec8:	ldrd	r4, [sp]
   15ecc:	ldr	r6, [sp, #8]
   15ed0:	add	sp, sp, #12
   15ed4:	str	r3, [r0]
   15ed8:	mov	r0, #0
   15edc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ee0:	mov	r1, #1
   15ee4:	mov	r0, r1
   15ee8:	b	10b3c <calloc@plt>
   15eec:	ldrd	r4, [sp]
   15ef0:	ldr	r6, [sp, #8]
   15ef4:	ldr	lr, [sp, #12]
   15ef8:	add	sp, sp, #16
   15efc:	b	10b3c <calloc@plt>
   15f00:	str	r4, [sp, #-8]!
   15f04:	subs	r4, r0, #0
   15f08:	str	lr, [sp, #4]
   15f0c:	sub	sp, sp, #8
   15f10:	beq	15f2c <__assert_fail@plt+0x51e0>
   15f14:	bl	10c44 <__freading@plt>
   15f18:	cmp	r0, #0
   15f1c:	beq	15f2c <__assert_fail@plt+0x51e0>
   15f20:	ldr	r3, [r4]
   15f24:	tst	r3, #256	; 0x100
   15f28:	bne	15f44 <__assert_fail@plt+0x51f8>
   15f2c:	mov	r0, r4
   15f30:	add	sp, sp, #8
   15f34:	ldr	r4, [sp]
   15f38:	ldr	lr, [sp, #4]
   15f3c:	add	sp, sp, #8
   15f40:	b	10b6c <fflush@plt>
   15f44:	mov	r1, #1
   15f48:	mov	r2, #0
   15f4c:	mov	r3, #0
   15f50:	mov	r0, r4
   15f54:	str	r1, [sp]
   15f58:	bl	15fc0 <__assert_fail@plt+0x5274>
   15f5c:	b	15f2c <__assert_fail@plt+0x51e0>
   15f60:	strd	r4, [sp, #-12]!
   15f64:	mov	r5, r0
   15f68:	str	lr, [sp, #8]
   15f6c:	sub	sp, sp, #12
   15f70:	bl	10c98 <__errno_location@plt>
   15f74:	mov	r4, r0
   15f78:	mov	r2, #0
   15f7c:	ldr	r3, [r4]
   15f80:	mov	r0, r5
   15f84:	str	r2, [r4]
   15f88:	str	r3, [sp]
   15f8c:	str	r3, [sp, #4]
   15f90:	bl	10b78 <free@plt>
   15f94:	ldr	r3, [r4]
   15f98:	add	r2, sp, #8
   15f9c:	clz	r3, r3
   15fa0:	lsr	r3, r3, #5
   15fa4:	add	r3, r2, r3, lsl #2
   15fa8:	ldr	r3, [r3, #-8]
   15fac:	str	r3, [r4]
   15fb0:	add	sp, sp, #12
   15fb4:	ldrd	r4, [sp]
   15fb8:	add	sp, sp, #8
   15fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15fc4:	mov	r4, r0
   15fc8:	ldr	ip, [r0, #4]
   15fcc:	strd	r6, [sp, #8]
   15fd0:	str	lr, [sp, #20]
   15fd4:	ldr	lr, [r0, #8]
   15fd8:	str	r8, [sp, #16]
   15fdc:	sub	sp, sp, #8
   15fe0:	ldr	r5, [sp, #32]
   15fe4:	cmp	lr, ip
   15fe8:	beq	16010 <__assert_fail@plt+0x52c4>
   15fec:	mov	r0, r4
   15ff0:	str	r5, [sp, #32]
   15ff4:	add	sp, sp, #8
   15ff8:	ldrd	r4, [sp]
   15ffc:	ldrd	r6, [sp, #8]
   16000:	ldr	r8, [sp, #16]
   16004:	ldr	lr, [sp, #20]
   16008:	add	sp, sp, #24
   1600c:	b	10cd4 <fseeko64@plt>
   16010:	ldr	ip, [r0, #16]
   16014:	ldr	lr, [r0, #20]
   16018:	cmp	lr, ip
   1601c:	bne	15fec <__assert_fail@plt+0x52a0>
   16020:	ldr	r8, [r0, #36]	; 0x24
   16024:	cmp	r8, #0
   16028:	bne	15fec <__assert_fail@plt+0x52a0>
   1602c:	mov	r6, r2
   16030:	mov	r7, r3
   16034:	bl	10cbc <fileno@plt>
   16038:	mov	r2, r6
   1603c:	mov	r3, r7
   16040:	str	r5, [sp]
   16044:	bl	10bf0 <lseek64@plt>
   16048:	mvn	r3, #0
   1604c:	mvn	r2, #0
   16050:	cmp	r1, r3
   16054:	cmpeq	r0, r2
   16058:	beq	16088 <__assert_fail@plt+0x533c>
   1605c:	ldr	r3, [r4]
   16060:	strd	r0, [r4, #80]	; 0x50
   16064:	bic	r3, r3, #16
   16068:	str	r3, [r4]
   1606c:	mov	r0, r8
   16070:	add	sp, sp, #8
   16074:	ldrd	r4, [sp]
   16078:	ldrd	r6, [sp, #8]
   1607c:	ldr	r8, [sp, #16]
   16080:	add	sp, sp, #20
   16084:	pop	{pc}		; (ldr pc, [sp], #4)
   16088:	mvn	r8, #0
   1608c:	b	1606c <__assert_fail@plt+0x5320>
   16090:	cmp	r0, #0
   16094:	beq	160a0 <__assert_fail@plt+0x5354>
   16098:	blt	160a8 <__assert_fail@plt+0x535c>
   1609c:	b	10c2c <malloc@plt>
   160a0:	mov	r0, #1
   160a4:	b	10c2c <malloc@plt>
   160a8:	str	r4, [sp, #-8]!
   160ac:	str	lr, [sp, #4]
   160b0:	bl	10c98 <__errno_location@plt>
   160b4:	mov	r3, #12
   160b8:	ldr	r4, [sp]
   160bc:	add	sp, sp, #4
   160c0:	str	r3, [r0]
   160c4:	mov	r0, #0
   160c8:	pop	{pc}		; (ldr pc, [sp], #4)
   160cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   160d0:	mov	r5, r2
   160d4:	strd	r6, [sp, #8]
   160d8:	subs	r6, r0, #0
   160dc:	mov	r7, r1
   160e0:	str	lr, [sp, #16]
   160e4:	sub	sp, sp, #12
   160e8:	addeq	r6, sp, #4
   160ec:	mov	r0, r6
   160f0:	bl	10c14 <mbrtowc@plt>
   160f4:	cmp	r5, #0
   160f8:	cmnne	r0, #3
   160fc:	mov	r4, r0
   16100:	bhi	1611c <__assert_fail@plt+0x53d0>
   16104:	mov	r0, r4
   16108:	add	sp, sp, #12
   1610c:	ldrd	r4, [sp]
   16110:	ldrd	r6, [sp, #8]
   16114:	add	sp, sp, #16
   16118:	pop	{pc}		; (ldr pc, [sp], #4)
   1611c:	mov	r0, #0
   16120:	bl	16258 <__assert_fail@plt+0x550c>
   16124:	cmp	r0, #0
   16128:	bne	16104 <__assert_fail@plt+0x53b8>
   1612c:	ldrb	r3, [r7]
   16130:	mov	r4, #1
   16134:	str	r3, [r6]
   16138:	b	16104 <__assert_fail@plt+0x53b8>
   1613c:	cmp	r0, #0
   16140:	beq	16168 <__assert_fail@plt+0x541c>
   16144:	cmp	r1, #0
   16148:	str	r4, [sp, #-8]!
   1614c:	str	lr, [sp, #4]
   16150:	beq	16170 <__assert_fail@plt+0x5424>
   16154:	blt	16184 <__assert_fail@plt+0x5438>
   16158:	ldr	r4, [sp]
   1615c:	ldr	lr, [sp, #4]
   16160:	add	sp, sp, #8
   16164:	b	10bcc <realloc@plt>
   16168:	mov	r0, r1
   1616c:	b	16090 <__assert_fail@plt+0x5344>
   16170:	bl	15f60 <__assert_fail@plt+0x5214>
   16174:	ldr	r4, [sp]
   16178:	add	sp, sp, #4
   1617c:	mov	r0, #0
   16180:	pop	{pc}		; (ldr pc, [sp], #4)
   16184:	bl	10c98 <__errno_location@plt>
   16188:	mov	r3, #12
   1618c:	str	r3, [r0]
   16190:	b	16174 <__assert_fail@plt+0x5428>
   16194:	umull	r2, r3, r1, r2
   16198:	cmp	r3, #0
   1619c:	bne	161a8 <__assert_fail@plt+0x545c>
   161a0:	mov	r1, r2
   161a4:	b	1613c <__assert_fail@plt+0x53f0>
   161a8:	str	r4, [sp, #-8]!
   161ac:	str	lr, [sp, #4]
   161b0:	bl	10c98 <__errno_location@plt>
   161b4:	mov	r3, #12
   161b8:	ldr	r4, [sp]
   161bc:	add	sp, sp, #4
   161c0:	str	r3, [r0]
   161c4:	mov	r0, #0
   161c8:	pop	{pc}		; (ldr pc, [sp], #4)
   161cc:	strd	r4, [sp, #-16]!
   161d0:	mov	r4, r0
   161d4:	str	r6, [sp, #8]
   161d8:	str	lr, [sp, #12]
   161dc:	bl	10c08 <__fpending@plt>
   161e0:	mov	r6, r0
   161e4:	mov	r0, r4
   161e8:	bl	10b84 <ferror@plt>
   161ec:	mov	r5, r0
   161f0:	mov	r0, r4
   161f4:	bl	10cc8 <fclose@plt>
   161f8:	cmp	r5, #0
   161fc:	mov	r4, r0
   16200:	bne	16238 <__assert_fail@plt+0x54ec>
   16204:	cmp	r0, #0
   16208:	beq	16224 <__assert_fail@plt+0x54d8>
   1620c:	cmp	r6, #0
   16210:	bne	16250 <__assert_fail@plt+0x5504>
   16214:	bl	10c98 <__errno_location@plt>
   16218:	ldr	r4, [r0]
   1621c:	subs	r4, r4, #9
   16220:	mvnne	r4, #0
   16224:	mov	r0, r4
   16228:	ldrd	r4, [sp]
   1622c:	ldr	r6, [sp, #8]
   16230:	add	sp, sp, #12
   16234:	pop	{pc}		; (ldr pc, [sp], #4)
   16238:	cmp	r0, #0
   1623c:	bne	16250 <__assert_fail@plt+0x5504>
   16240:	bl	10c98 <__errno_location@plt>
   16244:	str	r4, [r0]
   16248:	mvn	r4, #0
   1624c:	b	16224 <__assert_fail@plt+0x54d8>
   16250:	mvn	r4, #0
   16254:	b	16224 <__assert_fail@plt+0x54d8>
   16258:	push	{lr}		; (str lr, [sp, #-4]!)
   1625c:	sub	sp, sp, #268	; 0x10c
   16260:	movw	r2, #257	; 0x101
   16264:	add	r1, sp, #4
   16268:	bl	162fc <__assert_fail@plt+0x55b0>
   1626c:	cmp	r0, #0
   16270:	movne	r0, #0
   16274:	bne	162a8 <__assert_fail@plt+0x555c>
   16278:	movw	r1, #27772	; 0x6c7c
   1627c:	movt	r1, #1
   16280:	add	r0, sp, #4
   16284:	bl	10b48 <strcmp@plt>
   16288:	cmp	r0, #0
   1628c:	beq	162a8 <__assert_fail@plt+0x555c>
   16290:	add	r0, sp, #4
   16294:	movw	r1, #27776	; 0x6c80
   16298:	movt	r1, #1
   1629c:	bl	10b48 <strcmp@plt>
   162a0:	adds	r0, r0, #0
   162a4:	movne	r0, #1
   162a8:	add	sp, sp, #268	; 0x10c
   162ac:	pop	{pc}		; (ldr pc, [sp], #4)
   162b0:	mov	r0, #14
   162b4:	str	r4, [sp, #-8]!
   162b8:	str	lr, [sp, #4]
   162bc:	bl	10cf8 <nl_langinfo@plt>
   162c0:	cmp	r0, #0
   162c4:	beq	162e8 <__assert_fail@plt+0x559c>
   162c8:	ldrb	r2, [r0]
   162cc:	movw	r3, #27784	; 0x6c88
   162d0:	movt	r3, #1
   162d4:	ldr	r4, [sp]
   162d8:	add	sp, sp, #4
   162dc:	cmp	r2, #0
   162e0:	moveq	r0, r3
   162e4:	pop	{pc}		; (ldr pc, [sp], #4)
   162e8:	ldr	r4, [sp]
   162ec:	add	sp, sp, #4
   162f0:	movw	r0, #27784	; 0x6c88
   162f4:	movt	r0, #1
   162f8:	pop	{pc}		; (ldr pc, [sp], #4)
   162fc:	strd	r4, [sp, #-16]!
   16300:	mov	r5, r1
   16304:	mov	r1, #0
   16308:	mov	r4, r2
   1630c:	str	r6, [sp, #8]
   16310:	str	lr, [sp, #12]
   16314:	bl	10ce0 <setlocale@plt>
   16318:	subs	r6, r0, #0
   1631c:	beq	1639c <__assert_fail@plt+0x5650>
   16320:	bl	10c80 <strlen@plt>
   16324:	cmp	r4, r0
   16328:	bhi	16348 <__assert_fail@plt+0x55fc>
   1632c:	cmp	r4, #0
   16330:	moveq	r0, #34	; 0x22
   16334:	bne	1636c <__assert_fail@plt+0x5620>
   16338:	ldrd	r4, [sp]
   1633c:	ldr	r6, [sp, #8]
   16340:	add	sp, sp, #12
   16344:	pop	{pc}		; (ldr pc, [sp], #4)
   16348:	add	r2, r0, #1
   1634c:	mov	r1, r6
   16350:	mov	r0, r5
   16354:	bl	10b9c <memcpy@plt>
   16358:	ldrd	r4, [sp]
   1635c:	mov	r0, #0
   16360:	ldr	r6, [sp, #8]
   16364:	add	sp, sp, #12
   16368:	pop	{pc}		; (ldr pc, [sp], #4)
   1636c:	sub	r4, r4, #1
   16370:	mov	r1, r6
   16374:	mov	r2, r4
   16378:	mov	r0, r5
   1637c:	bl	10b9c <memcpy@plt>
   16380:	mov	r3, #0
   16384:	mov	r0, #34	; 0x22
   16388:	strb	r3, [r5, r4]
   1638c:	ldrd	r4, [sp]
   16390:	ldr	r6, [sp, #8]
   16394:	add	sp, sp, #12
   16398:	pop	{pc}		; (ldr pc, [sp], #4)
   1639c:	cmp	r4, #0
   163a0:	mov	r0, #22
   163a4:	strbne	r6, [r5]
   163a8:	ldrd	r4, [sp]
   163ac:	ldr	r6, [sp, #8]
   163b0:	add	sp, sp, #12
   163b4:	pop	{pc}		; (ldr pc, [sp], #4)
   163b8:	mov	r1, #0
   163bc:	b	10ce0 <setlocale@plt>
   163c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   163c4:	mov	r7, r0
   163c8:	ldr	r6, [pc, #72]	; 16418 <__assert_fail@plt+0x56cc>
   163cc:	ldr	r5, [pc, #72]	; 1641c <__assert_fail@plt+0x56d0>
   163d0:	add	r6, pc, r6
   163d4:	add	r5, pc, r5
   163d8:	sub	r6, r6, r5
   163dc:	mov	r8, r1
   163e0:	mov	r9, r2
   163e4:	bl	10b1c <calloc@plt-0x20>
   163e8:	asrs	r6, r6, #2
   163ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   163f0:	mov	r4, #0
   163f4:	add	r4, r4, #1
   163f8:	ldr	r3, [r5], #4
   163fc:	mov	r2, r9
   16400:	mov	r1, r8
   16404:	mov	r0, r7
   16408:	blx	r3
   1640c:	cmp	r6, r4
   16410:	bne	163f4 <__assert_fail@plt+0x56a8>
   16414:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16418:	andeq	r0, r1, ip, lsr fp
   1641c:	andeq	r0, r1, r4, lsr fp
   16420:	bx	lr
   16424:	ldr	r3, [pc, #12]	; 16438 <__assert_fail@plt+0x56ec>
   16428:	mov	r1, #0
   1642c:	add	r3, pc, r3
   16430:	ldr	r2, [r3]
   16434:	b	10ca4 <__cxa_atexit@plt>
   16438:	muleq	r1, r4, ip

Disassembly of section .fini:

0001643c <.fini>:
   1643c:	push	{r3, lr}
   16440:	pop	{r3, pc}
