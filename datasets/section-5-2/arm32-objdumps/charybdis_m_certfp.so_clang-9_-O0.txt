
../repos/charybdis/modules/.libs/m_certfp.so:     file format elf32-littlearm


Disassembly of section .init:

000004ac <_init>:
 4ac:	push	{r3, lr}
 4b0:	bl	520 <call_weak_fn>
 4b4:	pop	{r3, pc}

Disassembly of section .plt:

000004b8 <.plt>:
 4b8:	push	{lr}		; (str lr, [sp, #-4]!)
 4bc:	ldr	lr, [pc, #4]	; 4c8 <.plt+0x10>
 4c0:	add	lr, pc, lr
 4c4:	ldr	pc, [lr, #8]!
 4c8:	.word	0x00010b38

000004cc <__cxa_finalize@plt>:
 4cc:	add	ip, pc, #0, 12
 4d0:	add	ip, ip, #16, 20	; 0x10000
 4d4:	ldr	pc, [ip, #2872]!	; 0xb38

000004d8 <free@plt>:
 4d8:	add	ip, pc, #0, 12
 4dc:	add	ip, ip, #16, 20	; 0x10000
 4e0:	ldr	pc, [ip, #2864]!	; 0xb30

000004e4 <rb_outofmemory@plt>:
 4e4:	add	ip, pc, #0, 12
 4e8:	add	ip, ip, #16, 20	; 0x10000
 4ec:	ldr	pc, [ip, #2856]!	; 0xb28

000004f0 <strcpy@plt>:
 4f0:	add	ip, pc, #0, 12
 4f4:	add	ip, ip, #16, 20	; 0x10000
 4f8:	ldr	pc, [ip, #2848]!	; 0xb20

000004fc <malloc@plt>:
 4fc:	add	ip, pc, #0, 12
 500:	add	ip, ip, #16, 20	; 0x10000
 504:	ldr	pc, [ip, #2840]!	; 0xb18

00000508 <__gmon_start__@plt>:
 508:	add	ip, pc, #0, 12
 50c:	add	ip, ip, #16, 20	; 0x10000
 510:	ldr	pc, [ip, #2832]!	; 0xb10

00000514 <strlen@plt>:
 514:	add	ip, pc, #0, 12
 518:	add	ip, ip, #16, 20	; 0x10000
 51c:	ldr	pc, [ip, #2824]!	; 0xb08

Disassembly of section .text:

00000520 <call_weak_fn>:
 520:	ldr	r3, [pc, #20]	; 53c <call_weak_fn+0x1c>
 524:	ldr	r2, [pc, #20]	; 540 <call_weak_fn+0x20>
 528:	add	r3, pc, r3
 52c:	ldr	r2, [r3, r2]
 530:	cmp	r2, #0
 534:	bxeq	lr
 538:	b	508 <__gmon_start__@plt>
 53c:	.word	0x00010ad0
 540:	.word	0x00000030

00000544 <deregister_tm_clones>:
 544:	ldr	r0, [pc, #44]	; 578 <deregister_tm_clones+0x34>
 548:	ldr	r3, [pc, #44]	; 57c <deregister_tm_clones+0x38>
 54c:	add	r0, pc, r0
 550:	add	r3, pc, r3
 554:	cmp	r3, r0
 558:	ldr	r3, [pc, #32]	; 580 <deregister_tm_clones+0x3c>
 55c:	add	r3, pc, r3
 560:	bxeq	lr
 564:	ldr	r2, [pc, #24]	; 584 <deregister_tm_clones+0x40>
 568:	ldr	r3, [r3, r2]
 56c:	cmp	r3, #0
 570:	bxeq	lr
 574:	bx	r3
 578:	.word	0x00010b5c
 57c:	.word	0x00010b58
 580:	.word	0x00010a9c
 584:	.word	0x0000002c

00000588 <register_tm_clones>:
 588:	ldr	r0, [pc, #56]	; 5c8 <register_tm_clones+0x40>
 58c:	ldr	r3, [pc, #56]	; 5cc <register_tm_clones+0x44>
 590:	add	r0, pc, r0
 594:	add	r3, pc, r3
 598:	sub	r1, r3, r0
 59c:	ldr	r3, [pc, #44]	; 5d0 <register_tm_clones+0x48>
 5a0:	asr	r1, r1, #2
 5a4:	add	r3, pc, r3
 5a8:	add	r1, r1, r1, lsr #31
 5ac:	asrs	r1, r1, #1
 5b0:	bxeq	lr
 5b4:	ldr	r2, [pc, #24]	; 5d4 <register_tm_clones+0x4c>
 5b8:	ldr	r3, [r3, r2]
 5bc:	cmp	r3, #0
 5c0:	bxeq	lr
 5c4:	bx	r3
 5c8:	.word	0x00010b18
 5cc:	.word	0x00010b14
 5d0:	.word	0x00010a54
 5d4:	.word	0x00000034

000005d8 <__do_global_dtors_aux>:
 5d8:	ldr	r3, [pc, #76]	; 62c <__do_global_dtors_aux+0x54>
 5dc:	ldr	r2, [pc, #76]	; 630 <__do_global_dtors_aux+0x58>
 5e0:	add	r3, pc, r3
 5e4:	add	r2, pc, r2
 5e8:	ldrb	r3, [r3]
 5ec:	cmp	r3, #0
 5f0:	bxne	lr
 5f4:	ldr	r3, [pc, #56]	; 634 <__do_global_dtors_aux+0x5c>
 5f8:	push	{r4, lr}
 5fc:	ldr	r3, [r2, r3]
 600:	cmp	r3, #0
 604:	beq	614 <__do_global_dtors_aux+0x3c>
 608:	ldr	r3, [pc, #40]	; 638 <__do_global_dtors_aux+0x60>
 60c:	ldr	r0, [pc, r3]
 610:	bl	4cc <__cxa_finalize@plt>
 614:	bl	544 <deregister_tm_clones>
 618:	ldr	r3, [pc, #28]	; 63c <__do_global_dtors_aux+0x64>
 61c:	mov	r2, #1
 620:	add	r3, pc, r3
 624:	strb	r2, [r3]
 628:	pop	{r4, pc}
 62c:	.word	0x00010ac8
 630:	.word	0x00010a14
 634:	.word	0x00000028
 638:	.word	0x00010a24
 63c:	.word	0x00010a88

00000640 <frame_dummy>:
 640:	b	588 <register_tm_clones>

00000644 <me_certfp>:
 644:	push	{fp, lr}
 648:	mov	fp, sp
 64c:	sub	sp, sp, #16
 650:	ldr	ip, [fp, #8]
 654:	str	r0, [fp, #-4]
 658:	str	r1, [sp, #8]
 65c:	str	r2, [sp, #4]
 660:	str	r3, [sp]
 664:	ldr	r0, [sp, #4]
 668:	ldrh	r0, [r0, #80]	; 0x50
 66c:	cmp	r0, #64	; 0x40
 670:	bne	688 <me_certfp+0x44>
 674:	ldr	r0, [sp, #4]
 678:	ldr	r0, [r0, #24]
 67c:	movw	r1, #0
 680:	cmp	r0, r1
 684:	bne	68c <me_certfp+0x48>
 688:	b	6dc <me_certfp+0x98>
 68c:	ldr	r0, [sp, #4]
 690:	ldr	r0, [r0, #444]	; 0x1bc
 694:	bl	6e4 <rb_free>
 698:	ldr	r0, [sp, #4]
 69c:	movw	r1, #0
 6a0:	str	r1, [r0, #444]	; 0x1bc
 6a4:	ldr	r0, [fp, #8]
 6a8:	ldr	r0, [r0, #4]
 6ac:	cmp	r0, r1
 6b0:	beq	6dc <me_certfp+0x98>
 6b4:	ldr	r0, [fp, #8]
 6b8:	ldr	r0, [r0, #4]
 6bc:	ldrb	r0, [r0]
 6c0:	cmp	r0, #0
 6c4:	beq	6dc <me_certfp+0x98>
 6c8:	ldr	r0, [fp, #8]
 6cc:	ldr	r0, [r0, #4]
 6d0:	bl	72c <rb_strdup>
 6d4:	ldr	r1, [sp, #4]
 6d8:	str	r0, [r1, #444]	; 0x1bc
 6dc:	mov	sp, fp
 6e0:	pop	{fp, pc}

000006e4 <rb_free>:
 6e4:	push	{fp, lr}
 6e8:	mov	fp, sp
 6ec:	sub	sp, sp, #8
 6f0:	str	r0, [sp, #4]
 6f4:	ldr	r0, [sp, #4]
 6f8:	movw	r1, #0
 6fc:	cmp	r0, r1
 700:	movw	r0, #0
 704:	movne	r0, #1
 708:	mvn	r1, #0
 70c:	eor	r0, r0, r1
 710:	eor	r0, r0, r1
 714:	tst	r0, #1
 718:	beq	724 <rb_free+0x40>
 71c:	ldr	r0, [sp, #4]
 720:	bl	4d8 <free@plt>
 724:	mov	sp, fp
 728:	pop	{fp, pc}

0000072c <rb_strdup>:
 72c:	push	{fp, lr}
 730:	mov	fp, sp
 734:	sub	sp, sp, #16
 738:	str	r0, [fp, #-4]
 73c:	ldr	r0, [fp, #-4]
 740:	bl	514 <strlen@plt>
 744:	add	r0, r0, #1
 748:	bl	4fc <malloc@plt>
 74c:	str	r0, [sp, #8]
 750:	ldr	r0, [sp, #8]
 754:	movw	r1, #0
 758:	cmp	r0, r1
 75c:	movw	r0, #0
 760:	moveq	r0, #1
 764:	mvn	r1, #0
 768:	eor	r0, r0, r1
 76c:	eor	r0, r0, r1
 770:	tst	r0, #1
 774:	beq	77c <rb_strdup+0x50>
 778:	bl	4e4 <rb_outofmemory@plt>
 77c:	ldr	r0, [sp, #8]
 780:	ldr	r1, [fp, #-4]
 784:	bl	4f0 <strcpy@plt>
 788:	ldr	r1, [sp, #8]
 78c:	str	r0, [sp, #4]
 790:	mov	r0, r1
 794:	mov	sp, fp
 798:	pop	{fp, pc}

Disassembly of section .fini:

0000079c <_fini>:
 79c:	push	{r3, lr}
 7a0:	pop	{r3, pc}
