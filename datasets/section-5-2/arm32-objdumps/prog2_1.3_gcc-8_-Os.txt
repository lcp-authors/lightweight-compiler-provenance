
../repos/prog2/1.3:     file format elf32-littlearm


Disassembly of section .init:

000105e8 <.init>:
   105e8:	push	{r3, lr}
   105ec:	bl	10810 <_start@@Base+0x3c>
   105f0:	pop	{r3, pc}

Disassembly of section .plt:

000105f4 <printf@plt-0x14>:
   105f4:	push	{lr}		; (str lr, [sp, #-4]!)
   105f8:	ldr	lr, [pc, #4]	; 10604 <printf@plt-0x4>
   105fc:	add	lr, pc, lr
   10600:	ldr	pc, [lr, #8]!
   10604:	strdeq	r0, [r1], -ip

00010608 <printf@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2556]!	; 0x9fc

00010614 <fopen@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2548]!	; 0x9f4

00010620 <strcpy@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2540]!	; 0x9ec

0001062c <__libc_start_main@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2532]!	; 0x9e4

00010638 <__gmon_start__@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2524]!	; 0x9dc

00010644 <fclose@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2516]!	; 0x9d4

00010650 <fseek@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2508]!	; 0x9cc

0001065c <abort@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2500]!	; 0x9c4

00010668 <getc@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2492]!	; 0x9bc

Disassembly of section .text:

00010674 <main@@Base>:
   10674:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10678:	sub	sp, sp, #2256	; 0x8d0
   1067c:	add	r5, sp, #204	; 0xcc
   10680:	add	r7, sp, #4
   10684:	ldr	r8, [pc, #316]	; 107c8 <main@@Base+0x154>
   10688:	ldr	r1, [pc, #316]	; 107cc <main@@Base+0x158>
   1068c:	ldr	r0, [pc, #316]	; 107d0 <main@@Base+0x15c>
   10690:	bl	10614 <fopen@plt>
   10694:	mov	r6, r0
   10698:	mov	r0, r6
   1069c:	bl	10668 <getc@plt>
   106a0:	cmn	r0, #1
   106a4:	beq	107b4 <main@@Base+0x140>
   106a8:	cmp	r0, #60	; 0x3c
   106ac:	bne	10698 <main@@Base+0x24>
   106b0:	mov	r0, r6
   106b4:	bl	10668 <getc@plt>
   106b8:	cmp	r0, #97	; 0x61
   106bc:	bne	10698 <main@@Base+0x24>
   106c0:	mov	r1, #200	; 0xc8
   106c4:	mov	r0, r7
   106c8:	bl	108c4 <esvaziastring@@Base>
   106cc:	mov	r4, #0
   106d0:	mov	r2, #1
   106d4:	mov	r1, #7
   106d8:	mov	r0, r6
   106dc:	bl	10650 <fseek@plt>
   106e0:	mov	r0, r6
   106e4:	bl	10668 <getc@plt>
   106e8:	cmp	r0, #34	; 0x22
   106ec:	strbne	r0, [r7, r4]
   106f0:	addne	r4, r4, #1
   106f4:	bne	106e0 <main@@Base+0x6c>
   106f8:	add	r3, sp, #2256	; 0x8d0
   106fc:	mov	r1, r7
   10700:	add	r3, r3, r4
   10704:	mov	r4, #0
   10708:	mov	r0, r5
   1070c:	mvn	r9, #60	; 0x3c
   10710:	strb	r4, [r3, #-2252]	; 0xfffff734
   10714:	mvn	sl, #94	; 0x5e
   10718:	bl	10620 <strcpy@plt>
   1071c:	mov	r1, #200	; 0xc8
   10720:	mov	r0, r7
   10724:	bl	108c4 <esvaziastring@@Base>
   10728:	mov	r2, #1
   1072c:	mov	r0, r6
   10730:	mov	r1, r2
   10734:	bl	10650 <fseek@plt>
   10738:	mov	r0, r6
   1073c:	bl	10668 <getc@plt>
   10740:	cmp	r0, #60	; 0x3c
   10744:	add	r3, sp, #2256	; 0x8d0
   10748:	add	r3, r3, r4
   1074c:	beq	10774 <main@@Base+0x100>
   10750:	cmp	r0, #225	; 0xe1
   10754:	addeq	r4, r4, #1
   10758:	strbeq	r9, [r3, #-2252]	; 0xfffff734
   1075c:	addeq	r3, sp, #2256	; 0x8d0
   10760:	addeq	r3, r3, r4
   10764:	strbne	r0, [r3, #-2252]	; 0xfffff734
   10768:	add	r4, r4, #1
   1076c:	strbeq	sl, [r3, #-2252]	; 0xfffff734
   10770:	b	10738 <main@@Base+0xc4>
   10774:	mov	r2, #0
   10778:	add	r4, r5, #205	; 0xcd
   1077c:	mov	r1, r7
   10780:	mov	r0, r4
   10784:	strb	r2, [r3, #-2252]	; 0xfffff734
   10788:	bl	10620 <strcpy@plt>
   1078c:	mov	r1, #80	; 0x50
   10790:	mov	r0, r7
   10794:	bl	108c4 <esvaziastring@@Base>
   10798:	mov	r2, r5
   1079c:	mov	r1, r4
   107a0:	mov	r0, r8
   107a4:	add	r5, r5, #408	; 0x198
   107a8:	bl	10608 <printf@plt>
   107ac:	add	r5, r5, #2
   107b0:	b	10698 <main@@Base+0x24>
   107b4:	mov	r0, r6
   107b8:	bl	10644 <fclose@plt>
   107bc:	mov	r0, #0
   107c0:	add	sp, sp, #2256	; 0x8d0
   107c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   107c8:	andeq	r0, r1, r8, ror #18
   107cc:	andeq	r0, r1, r0, asr r9
   107d0:	andeq	r0, r1, r2, asr r9

000107d4 <_start@@Base>:
   107d4:	mov	fp, #0
   107d8:	mov	lr, #0
   107dc:	pop	{r1}		; (ldr r1, [sp], #4)
   107e0:	mov	r2, sp
   107e4:	push	{r2}		; (str r2, [sp, #-4]!)
   107e8:	push	{r0}		; (str r0, [sp, #-4]!)
   107ec:	ldr	ip, [pc, #16]	; 10804 <_start@@Base+0x30>
   107f0:	push	{ip}		; (str ip, [sp, #-4]!)
   107f4:	ldr	r0, [pc, #12]	; 10808 <_start@@Base+0x34>
   107f8:	ldr	r3, [pc, #12]	; 1080c <_start@@Base+0x38>
   107fc:	bl	1062c <__libc_start_main@plt>
   10800:	bl	1065c <abort@plt>
   10804:	andeq	r0, r1, r0, asr #18
   10808:	andeq	r0, r1, r4, ror r6
   1080c:	andeq	r0, r1, r0, ror #17
   10810:	ldr	r3, [pc, #20]	; 1082c <_start@@Base+0x58>
   10814:	ldr	r2, [pc, #20]	; 10830 <_start@@Base+0x5c>
   10818:	add	r3, pc, r3
   1081c:	ldr	r2, [r3, r2]
   10820:	cmp	r2, #0
   10824:	bxeq	lr
   10828:	b	10638 <__gmon_start__@plt>
   1082c:	andeq	r0, r1, r0, ror #15
   10830:	andeq	r0, r0, r0, lsr r0
   10834:	ldr	r0, [pc, #24]	; 10854 <_start@@Base+0x80>
   10838:	ldr	r3, [pc, #24]	; 10858 <_start@@Base+0x84>
   1083c:	cmp	r3, r0
   10840:	bxeq	lr
   10844:	ldr	r3, [pc, #16]	; 1085c <_start@@Base+0x88>
   10848:	cmp	r3, #0
   1084c:	bxeq	lr
   10850:	bx	r3
   10854:	andeq	r1, r2, ip, lsr r0
   10858:	andeq	r1, r2, ip, lsr r0
   1085c:	andeq	r0, r0, r0
   10860:	ldr	r0, [pc, #36]	; 1088c <_start@@Base+0xb8>
   10864:	ldr	r1, [pc, #36]	; 10890 <_start@@Base+0xbc>
   10868:	sub	r1, r1, r0
   1086c:	asr	r1, r1, #2
   10870:	add	r1, r1, r1, lsr #31
   10874:	asrs	r1, r1, #1
   10878:	bxeq	lr
   1087c:	ldr	r3, [pc, #16]	; 10894 <_start@@Base+0xc0>
   10880:	cmp	r3, #0
   10884:	bxeq	lr
   10888:	bx	r3
   1088c:	andeq	r1, r2, ip, lsr r0
   10890:	andeq	r1, r2, ip, lsr r0
   10894:	andeq	r0, r0, r0
   10898:	push	{r4, lr}
   1089c:	ldr	r4, [pc, #24]	; 108bc <_start@@Base+0xe8>
   108a0:	ldrb	r3, [r4]
   108a4:	cmp	r3, #0
   108a8:	popne	{r4, pc}
   108ac:	bl	10834 <_start@@Base+0x60>
   108b0:	mov	r3, #1
   108b4:	strb	r3, [r4]
   108b8:	pop	{r4, pc}
   108bc:	andeq	r1, r2, ip, lsr r0
   108c0:	b	10860 <_start@@Base+0x8c>

000108c4 <esvaziastring@@Base>:
   108c4:	mov	r3, #0
   108c8:	mov	r2, r3
   108cc:	cmp	r3, r1
   108d0:	bxge	lr
   108d4:	strb	r2, [r0, r3]
   108d8:	add	r3, r3, #1
   108dc:	b	108cc <esvaziastring@@Base+0x8>

000108e0 <__libc_csu_init@@Base>:
   108e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108e4:	mov	r7, r0
   108e8:	ldr	r6, [pc, #72]	; 10938 <__libc_csu_init@@Base+0x58>
   108ec:	ldr	r5, [pc, #72]	; 1093c <__libc_csu_init@@Base+0x5c>
   108f0:	add	r6, pc, r6
   108f4:	add	r5, pc, r5
   108f8:	sub	r6, r6, r5
   108fc:	mov	r8, r1
   10900:	mov	r9, r2
   10904:	bl	105e8 <printf@plt-0x20>
   10908:	asrs	r6, r6, #2
   1090c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10910:	mov	r4, #0
   10914:	add	r4, r4, #1
   10918:	ldr	r3, [r5], #4
   1091c:	mov	r2, r9
   10920:	mov	r1, r8
   10924:	mov	r0, r7
   10928:	blx	r3
   1092c:	cmp	r6, r4
   10930:	bne	10914 <__libc_csu_init@@Base+0x34>
   10934:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10938:	andeq	r0, r1, ip, lsl r6
   1093c:	andeq	r0, r1, r4, lsl r6

00010940 <__libc_csu_fini@@Base>:
   10940:	bx	lr

Disassembly of section .fini:

00010944 <.fini>:
   10944:	push	{r3, lr}
   10948:	pop	{r3, pc}
