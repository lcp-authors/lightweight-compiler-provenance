
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010cdc <.init>:
   10cdc:	push	{r3, lr}
   10ce0:	bl	10fcc <__assert_fail@plt+0x48>
   10ce4:	pop	{r3, pc}

Disassembly of section .plt:

00010ce8 <calloc@plt-0x14>:
   10ce8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cec:	ldr	lr, [pc, #4]	; 10cf8 <calloc@plt-0x4>
   10cf0:	add	lr, pc, lr
   10cf4:	ldr	pc, [lr, #8]!
   10cf8:	andeq	r6, r1, r8, lsl #6

00010cfc <calloc@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #776]!	; 0x308

00010d08 <fputs_unlocked@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #768]!	; 0x300

00010d14 <strcmp@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d20 <fflush@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #752]!	; 0x2f0

00010d2c <free@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #744]!	; 0x2e8

00010d38 <_exit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #736]!	; 0x2e0

00010d44 <memcpy@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d50 <execvp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #720]!	; 0x2d0

00010d5c <__strtoull_internal@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #712]!	; 0x2c8

00010d68 <mbsinit@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #704]!	; 0x2c0

00010d74 <memcmp@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #696]!	; 0x2b8

00010d80 <fputc_unlocked@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #688]!	; 0x2b0

00010d8c <dcgettext@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #680]!	; 0x2a8

00010d98 <realloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #672]!	; 0x2a0

00010da4 <textdomain@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #664]!	; 0x298

00010db0 <iswprint@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #656]!	; 0x290

00010dbc <readlink@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #648]!	; 0x288

00010dc8 <fwrite@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #640]!	; 0x280

00010dd4 <lseek64@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #632]!	; 0x278

00010de0 <__ctype_get_mb_cur_max@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #624]!	; 0x270

00010dec <__fpending@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #616]!	; 0x268

00010df8 <mbrtowc@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #608]!	; 0x260

00010e04 <error@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #600]!	; 0x258

00010e10 <__asprintf_chk@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #592]!	; 0x250

00010e1c <getenv@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #584]!	; 0x248

00010e28 <malloc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #576]!	; 0x240

00010e34 <__libc_start_main@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #568]!	; 0x238

00010e40 <__freading@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #560]!	; 0x230

00010e4c <__ctype_toupper_loc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #552]!	; 0x228

00010e58 <__gmon_start__@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #544]!	; 0x220

00010e64 <mempcpy@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #536]!	; 0x218

00010e70 <getopt_long@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #528]!	; 0x210

00010e7c <__ctype_b_loc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #520]!	; 0x208

00010e88 <exit@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #512]!	; 0x200

00010e94 <strlen@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #504]!	; 0x1f8

00010ea0 <strchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #496]!	; 0x1f0

00010eac <__errno_location@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #488]!	; 0x1e8

00010eb8 <__cxa_atexit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ec4 <memset@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #472]!	; 0x1d8

00010ed0 <__printf_chk@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #464]!	; 0x1d0

00010edc <fileno@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #456]!	; 0x1c8

00010ee8 <__fprintf_chk@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #448]!	; 0x1c0

00010ef4 <access@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #440]!	; 0x1b8

00010f00 <fclose@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #432]!	; 0x1b0

00010f0c <fseeko64@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #424]!	; 0x1a8

00010f18 <strtok@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #416]!	; 0x1a0

00010f24 <setlocale@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #408]!	; 0x198

00010f30 <putenv@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #400]!	; 0x190

00010f3c <strrchr@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #392]!	; 0x188

00010f48 <nl_langinfo@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #384]!	; 0x180

00010f54 <bindtextdomain@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #376]!	; 0x178

00010f60 <__xstat64@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #368]!	; 0x170

00010f6c <strncmp@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #360]!	; 0x168

00010f78 <abort@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #352]!	; 0x160

00010f84 <__assert_fail@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #344]!	; 0x158

Disassembly of section .text:

00010f90 <.text>:
   10f90:	mov	fp, #0
   10f94:	mov	lr, #0
   10f98:	pop	{r1}		; (ldr r1, [sp], #4)
   10f9c:	mov	r2, sp
   10fa0:	push	{r2}		; (str r2, [sp, #-4]!)
   10fa4:	push	{r0}		; (str r0, [sp, #-4]!)
   10fa8:	ldr	ip, [pc, #16]	; 10fc0 <__assert_fail@plt+0x3c>
   10fac:	push	{ip}		; (str ip, [sp, #-4]!)
   10fb0:	ldr	r0, [pc, #12]	; 10fc4 <__assert_fail@plt+0x40>
   10fb4:	ldr	r3, [pc, #12]	; 10fc8 <__assert_fail@plt+0x44>
   10fb8:	bl	10e34 <__libc_start_main@plt>
   10fbc:	bl	10f78 <abort@plt>
   10fc0:	andeq	r5, r1, r0, lsl #27
   10fc4:	muleq	r1, r8, r4
   10fc8:	andeq	r5, r1, r0, lsr #26
   10fcc:	ldr	r3, [pc, #20]	; 10fe8 <__assert_fail@plt+0x64>
   10fd0:	ldr	r2, [pc, #20]	; 10fec <__assert_fail@plt+0x68>
   10fd4:	add	r3, pc, r3
   10fd8:	ldr	r2, [r3, r2]
   10fdc:	cmp	r2, #0
   10fe0:	bxeq	lr
   10fe4:	b	10e58 <__gmon_start__@plt>
   10fe8:	andeq	r6, r1, r4, lsr #32
   10fec:	andeq	r0, r0, r8, ror #1
   10ff0:	ldr	r0, [pc, #24]	; 11010 <__assert_fail@plt+0x8c>
   10ff4:	ldr	r3, [pc, #24]	; 11014 <__assert_fail@plt+0x90>
   10ff8:	cmp	r3, r0
   10ffc:	bxeq	lr
   11000:	ldr	r3, [pc, #16]	; 11018 <__assert_fail@plt+0x94>
   11004:	cmp	r3, #0
   11008:	bxeq	lr
   1100c:	bx	r3
   11010:	andeq	r7, r2, ip, lsr r1
   11014:	andeq	r7, r2, ip, lsr r1
   11018:	andeq	r0, r0, r0
   1101c:	ldr	r0, [pc, #36]	; 11048 <__assert_fail@plt+0xc4>
   11020:	ldr	r1, [pc, #36]	; 1104c <__assert_fail@plt+0xc8>
   11024:	sub	r1, r1, r0
   11028:	asr	r1, r1, #2
   1102c:	add	r1, r1, r1, lsr #31
   11030:	asrs	r1, r1, #1
   11034:	bxeq	lr
   11038:	ldr	r3, [pc, #16]	; 11050 <__assert_fail@plt+0xcc>
   1103c:	cmp	r3, #0
   11040:	bxeq	lr
   11044:	bx	r3
   11048:	andeq	r7, r2, ip, lsr r1
   1104c:	andeq	r7, r2, ip, lsr r1
   11050:	andeq	r0, r0, r0
   11054:	push	{r4, lr}
   11058:	ldr	r4, [pc, #24]	; 11078 <__assert_fail@plt+0xf4>
   1105c:	ldrb	r3, [r4]
   11060:	cmp	r3, #0
   11064:	popne	{r4, pc}
   11068:	bl	10ff0 <__assert_fail@plt+0x6c>
   1106c:	mov	r3, #1
   11070:	strb	r3, [r4]
   11074:	pop	{r4, pc}
   11078:	andeq	r7, r2, ip, asr r1
   1107c:	b	1101c <__assert_fail@plt+0x98>
   11080:	push	{lr}		; (str lr, [sp, #-4]!)
   11084:	sub	sp, sp, #60	; 0x3c
   11088:	subs	r5, r0, #0
   1108c:	beq	110d4 <__assert_fail@plt+0x150>
   11090:	movw	r3, #29008	; 0x7150
   11094:	movt	r3, #2
   11098:	ldr	r4, [r3]
   1109c:	mov	r2, #5
   110a0:	movw	r1, #24144	; 0x5e50
   110a4:	movt	r1, #1
   110a8:	mov	r0, #0
   110ac:	bl	10d8c <dcgettext@plt>
   110b0:	movw	r3, #29072	; 0x7190
   110b4:	movt	r3, #2
   110b8:	ldr	r3, [r3]
   110bc:	mov	r2, r0
   110c0:	mov	r1, #1
   110c4:	mov	r0, r4
   110c8:	bl	10ee8 <__fprintf_chk@plt>
   110cc:	mov	r0, r5
   110d0:	bl	10e88 <exit@plt>
   110d4:	mov	r2, #5
   110d8:	movw	r1, #24184	; 0x5e78
   110dc:	movt	r1, #1
   110e0:	mov	r0, #0
   110e4:	bl	10d8c <dcgettext@plt>
   110e8:	movw	r3, #29072	; 0x7190
   110ec:	movt	r3, #2
   110f0:	ldr	r2, [r3]
   110f4:	mov	r1, r0
   110f8:	mov	r0, #1
   110fc:	bl	10ed0 <__printf_chk@plt>
   11100:	mov	r2, #5
   11104:	movw	r1, #24216	; 0x5e98
   11108:	movt	r1, #1
   1110c:	mov	r0, #0
   11110:	bl	10d8c <dcgettext@plt>
   11114:	movw	r4, #29012	; 0x7154
   11118:	movt	r4, #2
   1111c:	ldr	r1, [r4]
   11120:	bl	10d08 <fputs_unlocked@plt>
   11124:	mov	r2, #5
   11128:	movw	r1, #24292	; 0x5ee4
   1112c:	movt	r1, #1
   11130:	mov	r0, #0
   11134:	bl	10d8c <dcgettext@plt>
   11138:	ldr	r1, [r4]
   1113c:	bl	10d08 <fputs_unlocked@plt>
   11140:	mov	r2, #5
   11144:	movw	r1, #24368	; 0x5f30
   11148:	movt	r1, #1
   1114c:	mov	r0, #0
   11150:	bl	10d8c <dcgettext@plt>
   11154:	ldr	r1, [r4]
   11158:	bl	10d08 <fputs_unlocked@plt>
   1115c:	mov	r2, #5
   11160:	movw	r1, #24552	; 0x5fe8
   11164:	movt	r1, #1
   11168:	mov	r0, #0
   1116c:	bl	10d8c <dcgettext@plt>
   11170:	ldr	r1, [r4]
   11174:	bl	10d08 <fputs_unlocked@plt>
   11178:	mov	r2, #5
   1117c:	movw	r1, #24600	; 0x6018
   11180:	movt	r1, #1
   11184:	mov	r0, #0
   11188:	bl	10d8c <dcgettext@plt>
   1118c:	ldr	r1, [r4]
   11190:	bl	10d08 <fputs_unlocked@plt>
   11194:	mov	r2, #5
   11198:	movw	r1, #24656	; 0x6050
   1119c:	movt	r1, #1
   111a0:	mov	r0, #0
   111a4:	bl	10d8c <dcgettext@plt>
   111a8:	ldr	r1, [r4]
   111ac:	bl	10d08 <fputs_unlocked@plt>
   111b0:	mov	r2, #5
   111b4:	movw	r1, #24768	; 0x60c0
   111b8:	movt	r1, #1
   111bc:	mov	r0, #0
   111c0:	bl	10d8c <dcgettext@plt>
   111c4:	ldr	r1, [r4]
   111c8:	bl	10d08 <fputs_unlocked@plt>
   111cc:	mov	r2, #5
   111d0:	movw	r1, #24832	; 0x6100
   111d4:	movt	r1, #1
   111d8:	mov	r0, #0
   111dc:	bl	10d8c <dcgettext@plt>
   111e0:	ldr	r1, [r4]
   111e4:	bl	10d08 <fputs_unlocked@plt>
   111e8:	mov	r2, #5
   111ec:	movw	r1, #25144	; 0x6238
   111f0:	movt	r1, #1
   111f4:	mov	r0, #0
   111f8:	bl	10d8c <dcgettext@plt>
   111fc:	ldr	r1, [r4]
   11200:	bl	10d08 <fputs_unlocked@plt>
   11204:	movw	r0, #23976	; 0x5da8
   11208:	movt	r0, #1
   1120c:	ldr	r1, [r0]
   11210:	ldr	r3, [r0, #4]
   11214:	str	r1, [sp]
   11218:	str	r3, [sp, #4]
   1121c:	ldrd	r2, [r0, #8]
   11220:	strd	r2, [sp, #8]
   11224:	ldrd	r2, [r0, #16]
   11228:	strd	r2, [sp, #16]
   1122c:	ldrd	r2, [r0, #24]
   11230:	strd	r2, [sp, #24]
   11234:	ldrd	r2, [r0, #32]
   11238:	strd	r2, [sp, #32]
   1123c:	ldrd	r2, [r0, #40]	; 0x28
   11240:	strd	r2, [sp, #40]	; 0x28
   11244:	ldrd	r2, [r0, #48]	; 0x30
   11248:	strd	r2, [sp, #48]	; 0x30
   1124c:	cmp	r1, #0
   11250:	moveq	r4, sp
   11254:	beq	11280 <__assert_fail@plt+0x2fc>
   11258:	mov	r4, sp
   1125c:	movw	r6, #24136	; 0x5e48
   11260:	movt	r6, #1
   11264:	mov	r0, r6
   11268:	bl	10d14 <strcmp@plt>
   1126c:	cmp	r0, #0
   11270:	beq	11280 <__assert_fail@plt+0x2fc>
   11274:	ldr	r1, [r4, #8]!
   11278:	cmp	r1, #0
   1127c:	bne	11264 <__assert_fail@plt+0x2e0>
   11280:	ldr	r4, [r4, #4]
   11284:	cmp	r4, #0
   11288:	beq	113e4 <__assert_fail@plt+0x460>
   1128c:	mov	r2, #5
   11290:	movw	r1, #25412	; 0x6344
   11294:	movt	r1, #1
   11298:	mov	r0, #0
   1129c:	bl	10d8c <dcgettext@plt>
   112a0:	movw	r3, #25436	; 0x635c
   112a4:	movt	r3, #1
   112a8:	movw	r2, #25476	; 0x6384
   112ac:	movt	r2, #1
   112b0:	mov	r1, r0
   112b4:	mov	r0, #1
   112b8:	bl	10ed0 <__printf_chk@plt>
   112bc:	mov	r1, #0
   112c0:	mov	r0, #5
   112c4:	bl	10f24 <setlocale@plt>
   112c8:	cmp	r0, #0
   112cc:	beq	112e8 <__assert_fail@plt+0x364>
   112d0:	mov	r2, #3
   112d4:	movw	r1, #25492	; 0x6394
   112d8:	movt	r1, #1
   112dc:	bl	10f6c <strncmp@plt>
   112e0:	cmp	r0, #0
   112e4:	bne	11364 <__assert_fail@plt+0x3e0>
   112e8:	mov	r2, #5
   112ec:	movw	r1, #25568	; 0x63e0
   112f0:	movt	r1, #1
   112f4:	mov	r0, #0
   112f8:	bl	10d8c <dcgettext@plt>
   112fc:	movw	r6, #24136	; 0x5e48
   11300:	movt	r6, #1
   11304:	mov	r3, r6
   11308:	movw	r2, #25436	; 0x635c
   1130c:	movt	r2, #1
   11310:	mov	r1, r0
   11314:	mov	r0, #1
   11318:	bl	10ed0 <__printf_chk@plt>
   1131c:	mov	r2, #5
   11320:	movw	r1, #25596	; 0x63fc
   11324:	movt	r1, #1
   11328:	mov	r0, #0
   1132c:	bl	10d8c <dcgettext@plt>
   11330:	mov	r1, r0
   11334:	movw	r2, #26176	; 0x6640
   11338:	movt	r2, #1
   1133c:	movw	r3, #24764	; 0x60bc
   11340:	movt	r3, #1
   11344:	cmp	r4, r6
   11348:	moveq	r3, r2
   1134c:	mov	r2, r4
   11350:	mov	r0, #1
   11354:	bl	10ed0 <__printf_chk@plt>
   11358:	b	110cc <__assert_fail@plt+0x148>
   1135c:	movw	r4, #24136	; 0x5e48
   11360:	movt	r4, #1
   11364:	mov	r2, #5
   11368:	movw	r1, #25496	; 0x6398
   1136c:	movt	r1, #1
   11370:	mov	r0, #0
   11374:	bl	10d8c <dcgettext@plt>
   11378:	movw	r3, #29012	; 0x7154
   1137c:	movt	r3, #2
   11380:	ldr	r1, [r3]
   11384:	bl	10d08 <fputs_unlocked@plt>
   11388:	b	112e8 <__assert_fail@plt+0x364>
   1138c:	mov	r2, #5
   11390:	movw	r1, #25568	; 0x63e0
   11394:	movt	r1, #1
   11398:	mov	r0, #0
   1139c:	bl	10d8c <dcgettext@plt>
   113a0:	movw	r4, #24136	; 0x5e48
   113a4:	movt	r4, #1
   113a8:	mov	r3, r4
   113ac:	movw	r2, #25436	; 0x635c
   113b0:	movt	r2, #1
   113b4:	mov	r1, r0
   113b8:	mov	r0, #1
   113bc:	bl	10ed0 <__printf_chk@plt>
   113c0:	mov	r2, #5
   113c4:	movw	r1, #25596	; 0x63fc
   113c8:	movt	r1, #1
   113cc:	mov	r0, #0
   113d0:	bl	10d8c <dcgettext@plt>
   113d4:	mov	r1, r0
   113d8:	movw	r3, #26176	; 0x6640
   113dc:	movt	r3, #1
   113e0:	b	1134c <__assert_fail@plt+0x3c8>
   113e4:	mov	r2, #5
   113e8:	movw	r1, #25412	; 0x6344
   113ec:	movt	r1, #1
   113f0:	mov	r0, #0
   113f4:	bl	10d8c <dcgettext@plt>
   113f8:	movw	r3, #25436	; 0x635c
   113fc:	movt	r3, #1
   11400:	movw	r2, #25476	; 0x6384
   11404:	movt	r2, #1
   11408:	mov	r1, r0
   1140c:	mov	r0, #1
   11410:	bl	10ed0 <__printf_chk@plt>
   11414:	mov	r1, #0
   11418:	mov	r0, #5
   1141c:	bl	10f24 <setlocale@plt>
   11420:	cmp	r0, #0
   11424:	beq	1138c <__assert_fail@plt+0x408>
   11428:	mov	r2, #3
   1142c:	movw	r1, #25492	; 0x6394
   11430:	movt	r1, #1
   11434:	bl	10f6c <strncmp@plt>
   11438:	cmp	r0, #0
   1143c:	bne	1135c <__assert_fail@plt+0x3d8>
   11440:	mov	r2, #5
   11444:	movw	r1, #25568	; 0x63e0
   11448:	movt	r1, #1
   1144c:	mov	r0, #0
   11450:	bl	10d8c <dcgettext@plt>
   11454:	movw	r4, #24136	; 0x5e48
   11458:	movt	r4, #1
   1145c:	mov	r3, r4
   11460:	movw	r2, #25436	; 0x635c
   11464:	movt	r2, #1
   11468:	mov	r1, r0
   1146c:	mov	r0, #1
   11470:	bl	10ed0 <__printf_chk@plt>
   11474:	mov	r2, #5
   11478:	movw	r1, #25596	; 0x63fc
   1147c:	movt	r1, #1
   11480:	mov	r0, #0
   11484:	bl	10d8c <dcgettext@plt>
   11488:	mov	r1, r0
   1148c:	movw	r3, #26176	; 0x6640
   11490:	movt	r3, #1
   11494:	b	1134c <__assert_fail@plt+0x3c8>
   11498:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1149c:	strd	r6, [sp, #8]
   114a0:	strd	r8, [sp, #16]
   114a4:	strd	sl, [sp, #24]
   114a8:	str	lr, [sp, #32]
   114ac:	sub	sp, sp, #148	; 0x94
   114b0:	mov	r6, r0
   114b4:	mov	r4, r1
   114b8:	ldr	r0, [r1]
   114bc:	bl	1205c <__assert_fail@plt+0x10d8>
   114c0:	movw	r1, #24764	; 0x60bc
   114c4:	movt	r1, #1
   114c8:	mov	r0, #6
   114cc:	bl	10f24 <setlocale@plt>
   114d0:	movw	r5, #25480	; 0x6388
   114d4:	movt	r5, #1
   114d8:	movw	r1, #25648	; 0x6430
   114dc:	movt	r1, #1
   114e0:	mov	r0, r5
   114e4:	bl	10f54 <bindtextdomain@plt>
   114e8:	mov	r0, r5
   114ec:	bl	10da4 <textdomain@plt>
   114f0:	movw	r3, #28920	; 0x70f8
   114f4:	movt	r3, #2
   114f8:	mov	r2, #125	; 0x7d
   114fc:	str	r2, [r3]
   11500:	movw	r0, #7356	; 0x1cbc
   11504:	movt	r0, #1
   11508:	bl	15d84 <__assert_fail@plt+0x4e00>
   1150c:	ldr	sl, [pc, #1920]	; 11c94 <__assert_fail@plt+0xd10>
   11510:	movw	r5, #29016	; 0x7158
   11514:	movt	r5, #2
   11518:	mov	r3, #0
   1151c:	str	r3, [sp]
   11520:	mov	r3, sl
   11524:	movw	r2, #25832	; 0x64e8
   11528:	movt	r2, #1
   1152c:	mov	r1, r4
   11530:	mov	r0, r6
   11534:	bl	10e70 <getopt_long@plt>
   11538:	cmn	r0, #1
   1153c:	beq	11728 <__assert_fail@plt+0x7a4>
   11540:	cmp	r0, #101	; 0x65
   11544:	beq	115bc <__assert_fail@plt+0x638>
   11548:	bgt	115ac <__assert_fail@plt+0x628>
   1154c:	cmn	r0, #3
   11550:	bne	1159c <__assert_fail@plt+0x618>
   11554:	movw	r3, #28916	; 0x70f4
   11558:	movt	r3, #2
   1155c:	movw	r0, #29012	; 0x7154
   11560:	movt	r0, #2
   11564:	mov	r4, #0
   11568:	str	r4, [sp, #4]
   1156c:	movw	r2, #25816	; 0x64d8
   11570:	movt	r2, #1
   11574:	str	r2, [sp]
   11578:	ldr	r3, [r3]
   1157c:	movw	r2, #25476	; 0x6384
   11580:	movt	r2, #1
   11584:	movw	r1, #24136	; 0x5e48
   11588:	movt	r1, #1
   1158c:	ldr	r0, [r0]
   11590:	bl	14854 <__assert_fail@plt+0x38d0>
   11594:	mov	r0, r4
   11598:	bl	10e88 <exit@plt>
   1159c:	cmn	r0, #2
   115a0:	bne	11720 <__assert_fail@plt+0x79c>
   115a4:	mov	r0, #0
   115a8:	bl	11080 <__assert_fail@plt+0xfc>
   115ac:	cmp	r0, #105	; 0x69
   115b0:	beq	115bc <__assert_fail@plt+0x638>
   115b4:	cmp	r0, #111	; 0x6f
   115b8:	bne	11720 <__assert_fail@plt+0x79c>
   115bc:	cmp	r0, #105	; 0x69
   115c0:	beq	11c40 <__assert_fail@plt+0xcbc>
   115c4:	cmp	r0, #111	; 0x6f
   115c8:	beq	11c48 <__assert_fail@plt+0xcc4>
   115cc:	cmp	r0, #101	; 0x65
   115d0:	beq	11c8c <__assert_fail@plt+0xd08>
   115d4:	ldr	r3, [pc, #1724]	; 11c98 <__assert_fail@plt+0xd14>
   115d8:	mov	r2, #336	; 0x150
   115dc:	movw	r1, #25672	; 0x6448
   115e0:	movt	r1, #1
   115e4:	movw	r0, #25688	; 0x6458
   115e8:	movt	r0, #1
   115ec:	bl	10f84 <__assert_fail@plt>
   115f0:	movw	r3, #29024	; 0x7160
   115f4:	movt	r3, #2
   115f8:	add	r2, r7, r7, lsl #1
   115fc:	add	r3, r3, r2, lsl #2
   11600:	str	r8, [r3, #8]
   11604:	cmp	r0, #105	; 0x69
   11608:	beq	11688 <__assert_fail@plt+0x704>
   1160c:	movw	r1, #25784	; 0x64b8
   11610:	movt	r1, #1
   11614:	mov	r0, r8
   11618:	bl	10d14 <strcmp@plt>
   1161c:	cmp	r0, #0
   11620:	beq	11518 <__assert_fail@plt+0x594>
   11624:	movw	r3, #25788	; 0x64bc
   11628:	movt	r3, #1
   1162c:	str	r3, [sp]
   11630:	add	r3, sp, #40	; 0x28
   11634:	mov	r2, #10
   11638:	mov	r1, #0
   1163c:	mov	r0, r8
   11640:	bl	14f60 <__assert_fail@plt+0x3fdc>
   11644:	cmp	r0, #0
   11648:	bne	116c0 <__assert_fail@plt+0x73c>
   1164c:	ldrd	r8, [sp, #40]	; 0x28
   11650:	mvn	r2, #0
   11654:	mov	r3, #0
   11658:	cmp	r9, r3
   1165c:	cmpeq	r8, r2
   11660:	bhi	11718 <__assert_fail@plt+0x794>
   11664:	bl	10eac <__errno_location@plt>
   11668:	mov	r3, #0
   1166c:	str	r3, [r0]
   11670:	movw	r2, #29024	; 0x7160
   11674:	movt	r2, #2
   11678:	mov	r3, #12
   1167c:	mul	r7, r3, r7
   11680:	str	r8, [r2, r7]
   11684:	b	11518 <__assert_fail@plt+0x594>
   11688:	ldrb	r3, [r8]
   1168c:	cmp	r3, #76	; 0x4c
   11690:	bne	1160c <__assert_fail@plt+0x688>
   11694:	mov	r2, #5
   11698:	movw	r1, #25748	; 0x6494
   1169c:	movt	r1, #1
   116a0:	mov	r0, #0
   116a4:	bl	10d8c <dcgettext@plt>
   116a8:	mov	r2, r0
   116ac:	mov	r1, #0
   116b0:	mov	r0, r1
   116b4:	bl	10e04 <error@plt>
   116b8:	mov	r0, #125	; 0x7d
   116bc:	bl	11080 <__assert_fail@plt+0xfc>
   116c0:	cmp	r0, #1
   116c4:	moveq	r4, #75	; 0x4b
   116c8:	beq	116d4 <__assert_fail@plt+0x750>
   116cc:	bl	10eac <__errno_location@plt>
   116d0:	ldr	r4, [r0]
   116d4:	bl	10eac <__errno_location@plt>
   116d8:	str	r4, [r0]
   116dc:	mov	r2, #5
   116e0:	movw	r1, #25800	; 0x64c8
   116e4:	movt	r1, #1
   116e8:	mov	r0, #0
   116ec:	bl	10d8c <dcgettext@plt>
   116f0:	mov	r5, r0
   116f4:	movw	r3, #29016	; 0x7158
   116f8:	movt	r3, #2
   116fc:	ldr	r0, [r3]
   11700:	bl	14358 <__assert_fail@plt+0x33d4>
   11704:	mov	r3, r0
   11708:	mov	r2, r5
   1170c:	mov	r1, r4
   11710:	mov	r0, #125	; 0x7d
   11714:	bl	10e04 <error@plt>
   11718:	mov	r4, #75	; 0x4b
   1171c:	b	116d4 <__assert_fail@plt+0x750>
   11720:	mov	r0, #125	; 0x7d
   11724:	bl	11080 <__assert_fail@plt+0xfc>
   11728:	movw	r3, #29000	; 0x7148
   1172c:	movt	r3, #2
   11730:	ldr	r9, [r3]
   11734:	add	r3, r4, r9, lsl #2
   11738:	str	r3, [sp, #16]
   1173c:	sub	r6, r6, r9
   11740:	cmp	r6, #0
   11744:	ble	11778 <__assert_fail@plt+0x7f4>
   11748:	movw	r5, #29024	; 0x7160
   1174c:	movt	r5, #2
   11750:	mov	r2, #0
   11754:	mov	r6, r2
   11758:	movw	r8, #25856	; 0x6500
   1175c:	movt	r8, #1
   11760:	movw	fp, #25876	; 0x6514
   11764:	movt	fp, #1
   11768:	movw	r3, #25868	; 0x650c
   1176c:	movt	r3, #1
   11770:	str	r3, [sp, #20]
   11774:	b	11830 <__assert_fail@plt+0x8ac>
   11778:	mov	r2, #5
   1177c:	movw	r1, #25840	; 0x64f0
   11780:	movt	r1, #1
   11784:	mov	r0, #0
   11788:	bl	10d8c <dcgettext@plt>
   1178c:	mov	r2, r0
   11790:	mov	r1, #0
   11794:	mov	r0, r1
   11798:	bl	10e04 <error@plt>
   1179c:	mov	r0, #125	; 0x7d
   117a0:	bl	11080 <__assert_fail@plt+0xfc>
   117a4:	ldr	r7, [r5, #4]
   117a8:	add	r3, r7, #128	; 0x80
   117ac:	cmp	r3, #384	; 0x180
   117b0:	bcs	117c0 <__assert_fail@plt+0x83c>
   117b4:	bl	10e4c <__ctype_toupper_loc@plt>
   117b8:	ldr	r3, [r0]
   117bc:	ldr	r7, [r3, r7, lsl #2]
   117c0:	str	r7, [sp]
   117c4:	mov	r3, r8
   117c8:	ldr	r2, [sp, #20]
   117cc:	mov	r1, #1
   117d0:	add	r0, sp, #40	; 0x28
   117d4:	bl	10e10 <__asprintf_chk@plt>
   117d8:	b	11804 <__assert_fail@plt+0x880>
   117dc:	ldr	r3, [r7]
   117e0:	str	r3, [sp, #8]
   117e4:	mov	r3, #0
   117e8:	str	r3, [sp, #12]
   117ec:	str	sl, [sp]
   117f0:	mov	r3, r8
   117f4:	mov	r2, fp
   117f8:	mov	r1, #1
   117fc:	add	r0, sp, #40	; 0x28
   11800:	bl	10e10 <__asprintf_chk@plt>
   11804:	cmp	r0, #0
   11808:	blt	1186c <__assert_fail@plt+0x8e8>
   1180c:	ldr	r0, [sp, #40]	; 0x28
   11810:	bl	10f30 <putenv@plt>
   11814:	cmp	r0, #0
   11818:	bne	11870 <__assert_fail@plt+0x8ec>
   1181c:	mov	r2, #1
   11820:	add	r6, r6, #1
   11824:	add	r5, r5, #12
   11828:	cmp	r6, #3
   1182c:	beq	118ac <__assert_fail@plt+0x928>
   11830:	mov	r7, r5
   11834:	ldr	r3, [r5, #8]
   11838:	cmp	r3, #0
   1183c:	beq	11820 <__assert_fail@plt+0x89c>
   11840:	ldrb	r3, [r3]
   11844:	cmp	r3, #76	; 0x4c
   11848:	beq	117a4 <__assert_fail@plt+0x820>
   1184c:	ldr	sl, [r5, #4]
   11850:	add	r3, sl, #128	; 0x80
   11854:	cmp	r3, #384	; 0x180
   11858:	bcs	117dc <__assert_fail@plt+0x858>
   1185c:	bl	10e4c <__ctype_toupper_loc@plt>
   11860:	ldr	r3, [r0]
   11864:	ldr	sl, [r3, sl, lsl #2]
   11868:	b	117dc <__assert_fail@plt+0x858>
   1186c:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   11870:	bl	10eac <__errno_location@plt>
   11874:	ldr	r4, [r0]
   11878:	mov	r2, #5
   1187c:	movw	r1, #25888	; 0x6520
   11880:	movt	r1, #1
   11884:	mov	r0, #0
   11888:	bl	10d8c <dcgettext@plt>
   1188c:	mov	r5, r0
   11890:	ldr	r0, [sp, #40]	; 0x28
   11894:	bl	14358 <__assert_fail@plt+0x33d4>
   11898:	mov	r3, r0
   1189c:	mov	r2, r5
   118a0:	mov	r1, r4
   118a4:	mov	r0, #125	; 0x7d
   118a8:	bl	10e04 <error@plt>
   118ac:	cmp	r2, #0
   118b0:	beq	11a74 <__assert_fail@plt+0xaf0>
   118b4:	movw	r3, #29072	; 0x7190
   118b8:	movt	r3, #2
   118bc:	ldr	r5, [r3]
   118c0:	mov	r1, #47	; 0x2f
   118c4:	mov	r0, r5
   118c8:	bl	10ea0 <strchr@plt>
   118cc:	cmp	r0, #0
   118d0:	beq	11aa0 <__assert_fail@plt+0xb1c>
   118d4:	mov	r0, r5
   118d8:	bl	11dcc <__assert_fail@plt+0xe48>
   118dc:	movw	r3, #29024	; 0x7160
   118e0:	movt	r3, #2
   118e4:	str	r0, [r3, #36]	; 0x24
   118e8:	movw	r0, #26032	; 0x65b0
   118ec:	movt	r0, #1
   118f0:	bl	10e1c <getenv@plt>
   118f4:	mov	r8, r0
   118f8:	movw	r3, #29024	; 0x7160
   118fc:	movt	r3, #2
   11900:	ldr	r3, [r3, #36]	; 0x24
   11904:	str	r3, [sp, #28]
   11908:	movw	r2, #26044	; 0x65bc
   1190c:	movt	r2, #1
   11910:	str	r2, [sp, #32]
   11914:	mov	r2, #0
   11918:	str	r2, [sp, #36]	; 0x24
   1191c:	ldrb	r2, [r3]
   11920:	cmp	r2, #0
   11924:	beq	11990 <__assert_fail@plt+0xa0c>
   11928:	add	r5, sp, #28
   1192c:	movw	r7, #26092	; 0x65ec
   11930:	movt	r7, #1
   11934:	movw	r6, #26076	; 0x65dc
   11938:	movt	r6, #1
   1193c:	str	r6, [sp]
   11940:	mov	r2, r7
   11944:	mov	r1, #1
   11948:	add	r0, sp, #24
   1194c:	bl	10e10 <__asprintf_chk@plt>
   11950:	cmp	r0, #0
   11954:	blt	11b9c <__assert_fail@plt+0xc18>
   11958:	add	r2, sp, #40	; 0x28
   1195c:	ldr	r1, [sp, #24]
   11960:	mov	r0, #3
   11964:	bl	10f60 <__xstat64@plt>
   11968:	cmp	r0, #0
   1196c:	beq	119a0 <__assert_fail@plt+0xa1c>
   11970:	ldr	r0, [sp, #24]
   11974:	bl	11ffc <__assert_fail@plt+0x1078>
   11978:	ldr	r3, [r5, #4]!
   1197c:	cmp	r3, #0
   11980:	beq	11ba0 <__assert_fail@plt+0xc1c>
   11984:	ldrb	r2, [r3]
   11988:	cmp	r2, #0
   1198c:	bne	1193c <__assert_fail@plt+0x9b8>
   11990:	movw	r0, #26076	; 0x65dc
   11994:	movt	r0, #1
   11998:	bl	14d98 <__assert_fail@plt+0x3e14>
   1199c:	str	r0, [sp, #24]
   119a0:	cmp	r8, #0
   119a4:	beq	11bd8 <__assert_fail@plt+0xc54>
   119a8:	ldr	r3, [sp, #24]
   119ac:	str	r3, [sp, #4]
   119b0:	str	r8, [sp]
   119b4:	movw	r3, #26032	; 0x65b0
   119b8:	movt	r3, #1
   119bc:	movw	r2, #26120	; 0x6608
   119c0:	movt	r2, #1
   119c4:	mov	r1, #1
   119c8:	add	r0, sp, #40	; 0x28
   119cc:	bl	10e10 <__asprintf_chk@plt>
   119d0:	cmp	r0, #0
   119d4:	blt	11c00 <__assert_fail@plt+0xc7c>
   119d8:	ldr	r0, [sp, #24]
   119dc:	bl	11ffc <__assert_fail@plt+0x1078>
   119e0:	ldr	r0, [sp, #40]	; 0x28
   119e4:	bl	10f30 <putenv@plt>
   119e8:	cmp	r0, #0
   119ec:	bne	11c04 <__assert_fail@plt+0xc80>
   119f0:	movw	r3, #29024	; 0x7160
   119f4:	movt	r3, #2
   119f8:	ldr	r0, [r3, #36]	; 0x24
   119fc:	bl	11ffc <__assert_fail@plt+0x1078>
   11a00:	ldr	r1, [sp, #16]
   11a04:	ldr	r0, [r4, r9, lsl #2]
   11a08:	bl	10d50 <execvp@plt>
   11a0c:	bl	10eac <__errno_location@plt>
   11a10:	ldr	r5, [r0]
   11a14:	cmp	r5, #2
   11a18:	moveq	r6, #127	; 0x7f
   11a1c:	movne	r6, #126	; 0x7e
   11a20:	mov	r2, #5
   11a24:	movw	r1, #26140	; 0x661c
   11a28:	movt	r1, #1
   11a2c:	mov	r0, #0
   11a30:	bl	10d8c <dcgettext@plt>
   11a34:	mov	r7, r0
   11a38:	ldr	r0, [r4, r9, lsl #2]
   11a3c:	bl	14358 <__assert_fail@plt+0x33d4>
   11a40:	mov	r3, r0
   11a44:	mov	r2, r7
   11a48:	mov	r1, r5
   11a4c:	mov	r0, #0
   11a50:	bl	10e04 <error@plt>
   11a54:	mov	r0, r6
   11a58:	add	sp, sp, #148	; 0x94
   11a5c:	ldrd	r4, [sp]
   11a60:	ldrd	r6, [sp, #8]
   11a64:	ldrd	r8, [sp, #16]
   11a68:	ldrd	sl, [sp, #24]
   11a6c:	add	sp, sp, #32
   11a70:	pop	{pc}		; (ldr pc, [sp], #4)
   11a74:	mov	r2, #5
   11a78:	movw	r1, #25932	; 0x654c
   11a7c:	movt	r1, #1
   11a80:	mov	r0, #0
   11a84:	bl	10d8c <dcgettext@plt>
   11a88:	mov	r2, r0
   11a8c:	mov	r1, #0
   11a90:	mov	r0, r1
   11a94:	bl	10e04 <error@plt>
   11a98:	mov	r0, #125	; 0x7d
   11a9c:	bl	11080 <__assert_fail@plt+0xfc>
   11aa0:	movw	r0, #25976	; 0x6578
   11aa4:	movt	r0, #1
   11aa8:	bl	14e04 <__assert_fail@plt+0x3e80>
   11aac:	subs	r6, r0, #0
   11ab0:	beq	11b00 <__assert_fail@plt+0xb7c>
   11ab4:	mov	r0, r6
   11ab8:	bl	11dcc <__assert_fail@plt+0xe48>
   11abc:	movw	r3, #29024	; 0x7160
   11ac0:	movt	r3, #2
   11ac4:	str	r0, [r3, #36]	; 0x24
   11ac8:	mov	r0, r6
   11acc:	bl	11ffc <__assert_fail@plt+0x1078>
   11ad0:	movw	r3, #29024	; 0x7160
   11ad4:	movt	r3, #2
   11ad8:	ldr	r3, [r3, #36]	; 0x24
   11adc:	cmp	r3, #0
   11ae0:	bne	118e8 <__assert_fail@plt+0x964>
   11ae4:	movw	r0, #26004	; 0x6594
   11ae8:	movt	r0, #1
   11aec:	bl	14d98 <__assert_fail@plt+0x3e14>
   11af0:	movw	r3, #29024	; 0x7160
   11af4:	movt	r3, #2
   11af8:	str	r0, [r3, #36]	; 0x24
   11afc:	b	118e8 <__assert_fail@plt+0x964>
   11b00:	movw	r0, #25992	; 0x6588
   11b04:	movt	r0, #1
   11b08:	bl	10e1c <getenv@plt>
   11b0c:	subs	r6, r0, #0
   11b10:	beq	11ac8 <__assert_fail@plt+0xb44>
   11b14:	mov	r0, r6
   11b18:	bl	14d98 <__assert_fail@plt+0x3e14>
   11b1c:	mov	r6, r0
   11b20:	movw	r1, #26000	; 0x6590
   11b24:	movt	r1, #1
   11b28:	bl	10f18 <strtok@plt>
   11b2c:	mov	r8, #0
   11b30:	mov	fp, #1
   11b34:	movw	sl, #26000	; 0x6590
   11b38:	movt	sl, #1
   11b3c:	cmp	r0, #0
   11b40:	beq	11ac8 <__assert_fail@plt+0xb44>
   11b44:	mov	r2, r8
   11b48:	mov	r1, r5
   11b4c:	bl	11ee0 <__assert_fail@plt+0xf5c>
   11b50:	mov	r7, r0
   11b54:	mov	r1, fp
   11b58:	bl	10ef4 <access@plt>
   11b5c:	cmp	r0, #0
   11b60:	beq	11b7c <__assert_fail@plt+0xbf8>
   11b64:	mov	r0, r7
   11b68:	bl	11ffc <__assert_fail@plt+0x1078>
   11b6c:	mov	r1, sl
   11b70:	mov	r0, r8
   11b74:	bl	10f18 <strtok@plt>
   11b78:	b	11b3c <__assert_fail@plt+0xbb8>
   11b7c:	mov	r0, r7
   11b80:	bl	11dcc <__assert_fail@plt+0xe48>
   11b84:	movw	r3, #29024	; 0x7160
   11b88:	movt	r3, #2
   11b8c:	str	r0, [r3, #36]	; 0x24
   11b90:	mov	r0, r7
   11b94:	bl	11ffc <__assert_fail@plt+0x1078>
   11b98:	b	11ac8 <__assert_fail@plt+0xb44>
   11b9c:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   11ba0:	mov	r2, #5
   11ba4:	movw	r1, #26100	; 0x65f4
   11ba8:	movt	r1, #1
   11bac:	mov	r0, #0
   11bb0:	bl	10d8c <dcgettext@plt>
   11bb4:	mov	r4, r0
   11bb8:	movw	r0, #26076	; 0x65dc
   11bbc:	movt	r0, #1
   11bc0:	bl	14358 <__assert_fail@plt+0x33d4>
   11bc4:	mov	r3, r0
   11bc8:	mov	r2, r4
   11bcc:	mov	r1, #0
   11bd0:	mov	r0, #125	; 0x7d
   11bd4:	bl	10e04 <error@plt>
   11bd8:	ldr	r3, [sp, #24]
   11bdc:	str	r3, [sp]
   11be0:	movw	r3, #26032	; 0x65b0
   11be4:	movt	r3, #1
   11be8:	movw	r2, #26132	; 0x6614
   11bec:	movt	r2, #1
   11bf0:	mov	r1, #1
   11bf4:	add	r0, sp, #40	; 0x28
   11bf8:	bl	10e10 <__asprintf_chk@plt>
   11bfc:	b	119d0 <__assert_fail@plt+0xa4c>
   11c00:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   11c04:	bl	10eac <__errno_location@plt>
   11c08:	ldr	r4, [r0]
   11c0c:	mov	r2, #5
   11c10:	movw	r1, #25888	; 0x6520
   11c14:	movt	r1, #1
   11c18:	mov	r0, #0
   11c1c:	bl	10d8c <dcgettext@plt>
   11c20:	mov	r5, r0
   11c24:	ldr	r0, [sp, #40]	; 0x28
   11c28:	bl	14358 <__assert_fail@plt+0x33d4>
   11c2c:	mov	r3, r0
   11c30:	mov	r2, r5
   11c34:	mov	r1, r4
   11c38:	mov	r0, #125	; 0x7d
   11c3c:	bl	10e04 <error@plt>
   11c40:	mov	r7, #0
   11c44:	b	11c4c <__assert_fail@plt+0xcc8>
   11c48:	mov	r7, #1
   11c4c:	movw	r3, #29024	; 0x7160
   11c50:	movt	r3, #2
   11c54:	add	r2, r7, r7, lsl #1
   11c58:	add	r3, r3, r2, lsl #2
   11c5c:	str	r0, [r3, #4]
   11c60:	ldr	r8, [r5]
   11c64:	ldrb	r3, [r8]
   11c68:	cmp	r3, #9
   11c6c:	bcc	115f0 <__assert_fail@plt+0x66c>
   11c70:	cmp	r3, #13
   11c74:	bls	11c80 <__assert_fail@plt+0xcfc>
   11c78:	cmp	r3, #32
   11c7c:	bne	115f0 <__assert_fail@plt+0x66c>
   11c80:	add	r8, r8, #1
   11c84:	str	r8, [r5]
   11c88:	b	11c60 <__assert_fail@plt+0xcdc>
   11c8c:	mov	r7, #2
   11c90:	b	11c4c <__assert_fail@plt+0xcc8>
   11c94:	andeq	r5, r1, r8, ror #27
   11c98:	andeq	r5, r1, r0, ror #27
   11c9c:	movw	r3, #29064	; 0x7188
   11ca0:	movt	r3, #2
   11ca4:	str	r0, [r3]
   11ca8:	bx	lr
   11cac:	movw	r3, #29064	; 0x7188
   11cb0:	movt	r3, #2
   11cb4:	strb	r0, [r3, #4]
   11cb8:	bx	lr
   11cbc:	strd	r4, [sp, #-16]!
   11cc0:	str	r6, [sp, #8]
   11cc4:	str	lr, [sp, #12]
   11cc8:	sub	sp, sp, #8
   11ccc:	movw	r3, #29012	; 0x7154
   11cd0:	movt	r3, #2
   11cd4:	ldr	r0, [r3]
   11cd8:	bl	1589c <__assert_fail@plt+0x4918>
   11cdc:	cmp	r0, #0
   11ce0:	beq	11d08 <__assert_fail@plt+0xd84>
   11ce4:	movw	r3, #29064	; 0x7188
   11ce8:	movt	r3, #2
   11cec:	ldrb	r3, [r3, #4]
   11cf0:	cmp	r3, #0
   11cf4:	beq	11d34 <__assert_fail@plt+0xdb0>
   11cf8:	bl	10eac <__errno_location@plt>
   11cfc:	ldr	r3, [r0]
   11d00:	cmp	r3, #32
   11d04:	bne	11d34 <__assert_fail@plt+0xdb0>
   11d08:	movw	r3, #29008	; 0x7150
   11d0c:	movt	r3, #2
   11d10:	ldr	r0, [r3]
   11d14:	bl	1589c <__assert_fail@plt+0x4918>
   11d18:	cmp	r0, #0
   11d1c:	bne	11dbc <__assert_fail@plt+0xe38>
   11d20:	add	sp, sp, #8
   11d24:	ldrd	r4, [sp]
   11d28:	ldr	r6, [sp, #8]
   11d2c:	add	sp, sp, #12
   11d30:	pop	{pc}		; (ldr pc, [sp], #4)
   11d34:	mov	r2, #5
   11d38:	movw	r1, #26332	; 0x66dc
   11d3c:	movt	r1, #1
   11d40:	mov	r0, #0
   11d44:	bl	10d8c <dcgettext@plt>
   11d48:	mov	r4, r0
   11d4c:	movw	r3, #29064	; 0x7188
   11d50:	movt	r3, #2
   11d54:	ldr	r5, [r3]
   11d58:	cmp	r5, #0
   11d5c:	beq	11d9c <__assert_fail@plt+0xe18>
   11d60:	bl	10eac <__errno_location@plt>
   11d64:	ldr	r6, [r0]
   11d68:	mov	r0, r5
   11d6c:	bl	14154 <__assert_fail@plt+0x31d0>
   11d70:	str	r4, [sp]
   11d74:	mov	r3, r0
   11d78:	movw	r2, #26344	; 0x66e8
   11d7c:	movt	r2, #1
   11d80:	mov	r1, r6
   11d84:	mov	r0, #0
   11d88:	bl	10e04 <error@plt>
   11d8c:	movw	r3, #28920	; 0x70f8
   11d90:	movt	r3, #2
   11d94:	ldr	r0, [r3]
   11d98:	bl	10d38 <_exit@plt>
   11d9c:	bl	10eac <__errno_location@plt>
   11da0:	mov	r3, r4
   11da4:	movw	r2, #26348	; 0x66ec
   11da8:	movt	r2, #1
   11dac:	ldr	r1, [r0]
   11db0:	mov	r0, #0
   11db4:	bl	10e04 <error@plt>
   11db8:	b	11d8c <__assert_fail@plt+0xe08>
   11dbc:	movw	r3, #28920	; 0x70f8
   11dc0:	movt	r3, #2
   11dc4:	ldr	r0, [r3]
   11dc8:	bl	10d38 <_exit@plt>
   11dcc:	str	r4, [sp, #-8]!
   11dd0:	str	lr, [sp, #4]
   11dd4:	bl	11e6c <__assert_fail@plt+0xee8>
   11dd8:	cmp	r0, #0
   11ddc:	beq	11dec <__assert_fail@plt+0xe68>
   11de0:	ldr	r4, [sp]
   11de4:	add	sp, sp, #4
   11de8:	pop	{pc}		; (ldr pc, [sp], #4)
   11dec:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   11df0:	strd	r4, [sp, #-16]!
   11df4:	str	r6, [sp, #8]
   11df8:	str	lr, [sp, #12]
   11dfc:	mov	r4, r0
   11e00:	ldrb	ip, [r0]
   11e04:	cmp	ip, #47	; 0x2f
   11e08:	movne	r5, #0
   11e0c:	moveq	r5, #1
   11e10:	bl	15624 <__assert_fail@plt+0x46a0>
   11e14:	sub	r0, r0, r4
   11e18:	cmp	r0, r5
   11e1c:	bls	11e5c <__assert_fail@plt+0xed8>
   11e20:	add	r3, r4, r0
   11e24:	ldrb	r3, [r3, #-1]
   11e28:	cmp	r3, #47	; 0x2f
   11e2c:	bne	11e5c <__assert_fail@plt+0xed8>
   11e30:	sub	r0, r0, #2
   11e34:	add	r3, r4, r0
   11e38:	sub	ip, r4, #1
   11e3c:	add	ip, ip, r5
   11e40:	rsb	r2, r4, #1
   11e44:	add	r0, r2, r3
   11e48:	cmp	r3, ip
   11e4c:	beq	11e5c <__assert_fail@plt+0xed8>
   11e50:	ldrb	r1, [r3], #-1
   11e54:	cmp	r1, #47	; 0x2f
   11e58:	beq	11e44 <__assert_fail@plt+0xec0>
   11e5c:	ldrd	r4, [sp]
   11e60:	ldr	r6, [sp, #8]
   11e64:	add	sp, sp, #12
   11e68:	pop	{pc}		; (ldr pc, [sp], #4)
   11e6c:	strd	r4, [sp, #-16]!
   11e70:	str	r6, [sp, #8]
   11e74:	str	lr, [sp, #12]
   11e78:	mov	r6, r0
   11e7c:	bl	11df0 <__assert_fail@plt+0xe6c>
   11e80:	mov	r4, r0
   11e84:	add	r3, r0, #1
   11e88:	cmp	r0, #0
   11e8c:	movne	r0, r3
   11e90:	addeq	r0, r3, #1
   11e94:	bl	15524 <__assert_fail@plt+0x45a0>
   11e98:	subs	r5, r0, #0
   11e9c:	beq	11ecc <__assert_fail@plt+0xf48>
   11ea0:	mov	r2, r4
   11ea4:	mov	r1, r6
   11ea8:	mov	r0, r5
   11eac:	bl	10d44 <memcpy@plt>
   11eb0:	cmp	r4, #0
   11eb4:	bne	11ec4 <__assert_fail@plt+0xf40>
   11eb8:	mov	r3, #46	; 0x2e
   11ebc:	strb	r3, [r5]
   11ec0:	mov	r4, #1
   11ec4:	mov	r3, #0
   11ec8:	strb	r3, [r5, r4]
   11ecc:	mov	r0, r5
   11ed0:	ldrd	r4, [sp]
   11ed4:	ldr	r6, [sp, #8]
   11ed8:	add	sp, sp, #12
   11edc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ee0:	str	r4, [sp, #-8]!
   11ee4:	str	lr, [sp, #4]
   11ee8:	bl	11f04 <__assert_fail@plt+0xf80>
   11eec:	cmp	r0, #0
   11ef0:	beq	11f00 <__assert_fail@plt+0xf7c>
   11ef4:	ldr	r4, [sp]
   11ef8:	add	sp, sp, #4
   11efc:	pop	{pc}		; (ldr pc, [sp], #4)
   11f00:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   11f04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f08:	strd	r6, [sp, #8]
   11f0c:	strd	r8, [sp, #16]
   11f10:	strd	sl, [sp, #24]
   11f14:	str	lr, [sp, #32]
   11f18:	sub	sp, sp, #4
   11f1c:	mov	r6, r0
   11f20:	mov	r5, r1
   11f24:	mov	r9, r2
   11f28:	bl	15624 <__assert_fail@plt+0x46a0>
   11f2c:	mov	r4, r0
   11f30:	bl	1568c <__assert_fail@plt+0x4708>
   11f34:	mov	r8, r0
   11f38:	sub	r4, r4, r6
   11f3c:	add	r4, r4, r0
   11f40:	mov	r0, r5
   11f44:	bl	10e94 <strlen@plt>
   11f48:	mov	r7, r0
   11f4c:	cmp	r8, #0
   11f50:	beq	11f7c <__assert_fail@plt+0xff8>
   11f54:	add	r3, r6, r4
   11f58:	ldrb	r3, [r3, #-1]
   11f5c:	cmp	r3, #47	; 0x2f
   11f60:	moveq	r8, #0
   11f64:	beq	11f8c <__assert_fail@plt+0x1008>
   11f68:	ldrb	r3, [r5]
   11f6c:	cmp	r3, #47	; 0x2f
   11f70:	moveq	r8, #0
   11f74:	movne	r8, #47	; 0x2f
   11f78:	b	11f8c <__assert_fail@plt+0x1008>
   11f7c:	ldrb	r3, [r5]
   11f80:	cmp	r3, #47	; 0x2f
   11f84:	movne	r8, #0
   11f88:	moveq	r8, #46	; 0x2e
   11f8c:	adds	sl, r8, #0
   11f90:	movne	sl, #1
   11f94:	add	r0, r7, #1
   11f98:	add	r0, r0, r4
   11f9c:	add	r0, r0, sl
   11fa0:	bl	15524 <__assert_fail@plt+0x45a0>
   11fa4:	subs	fp, r0, #0
   11fa8:	beq	11fdc <__assert_fail@plt+0x1058>
   11fac:	mov	r2, r4
   11fb0:	mov	r1, r6
   11fb4:	mov	r0, fp
   11fb8:	bl	10e64 <mempcpy@plt>
   11fbc:	strb	r8, [r0], sl
   11fc0:	cmp	r9, #0
   11fc4:	strne	r0, [r9]
   11fc8:	mov	r2, r7
   11fcc:	mov	r1, r5
   11fd0:	bl	10e64 <mempcpy@plt>
   11fd4:	mov	r3, #0
   11fd8:	strb	r3, [r0]
   11fdc:	mov	r0, fp
   11fe0:	add	sp, sp, #4
   11fe4:	ldrd	r4, [sp]
   11fe8:	ldrd	r6, [sp, #8]
   11fec:	ldrd	r8, [sp, #16]
   11ff0:	ldrd	sl, [sp, #24]
   11ff4:	add	sp, sp, #32
   11ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   11ffc:	strd	r4, [sp, #-12]!
   12000:	str	lr, [sp, #8]
   12004:	sub	sp, sp, #12
   12008:	mov	r5, r0
   1200c:	bl	10eac <__errno_location@plt>
   12010:	mov	r4, r0
   12014:	ldr	r3, [r0]
   12018:	str	r3, [sp]
   1201c:	str	r3, [sp, #4]
   12020:	mov	r3, #0
   12024:	str	r3, [r0]
   12028:	mov	r0, r5
   1202c:	bl	10d2c <free@plt>
   12030:	ldr	r3, [r4]
   12034:	clz	r3, r3
   12038:	lsr	r3, r3, #5
   1203c:	add	r2, sp, #8
   12040:	add	r3, r2, r3, lsl #2
   12044:	ldr	r3, [r3, #-8]
   12048:	str	r3, [r4]
   1204c:	add	sp, sp, #12
   12050:	ldrd	r4, [sp]
   12054:	add	sp, sp, #8
   12058:	pop	{pc}		; (ldr pc, [sp], #4)
   1205c:	strd	r4, [sp, #-16]!
   12060:	str	r6, [sp, #8]
   12064:	str	lr, [sp, #12]
   12068:	subs	r4, r0, #0
   1206c:	beq	12108 <__assert_fail@plt+0x1184>
   12070:	mov	r1, #47	; 0x2f
   12074:	mov	r0, r4
   12078:	bl	10f3c <strrchr@plt>
   1207c:	subs	r5, r0, #0
   12080:	beq	120e0 <__assert_fail@plt+0x115c>
   12084:	add	r6, r5, #1
   12088:	sub	r3, r6, r4
   1208c:	cmp	r3, #6
   12090:	ble	120e0 <__assert_fail@plt+0x115c>
   12094:	mov	r2, #7
   12098:	movw	r1, #26408	; 0x6728
   1209c:	movt	r1, #1
   120a0:	sub	r0, r5, #6
   120a4:	bl	10f6c <strncmp@plt>
   120a8:	cmp	r0, #0
   120ac:	bne	120e0 <__assert_fail@plt+0x115c>
   120b0:	mov	r2, #3
   120b4:	movw	r1, #26416	; 0x6730
   120b8:	movt	r1, #1
   120bc:	mov	r0, r6
   120c0:	bl	10f6c <strncmp@plt>
   120c4:	cmp	r0, #0
   120c8:	movne	r4, r6
   120cc:	bne	120e0 <__assert_fail@plt+0x115c>
   120d0:	add	r4, r5, #4
   120d4:	movw	r3, #28992	; 0x7140
   120d8:	movt	r3, #2
   120dc:	str	r4, [r3]
   120e0:	movw	r3, #29072	; 0x7190
   120e4:	movt	r3, #2
   120e8:	str	r4, [r3]
   120ec:	movw	r3, #28996	; 0x7144
   120f0:	movt	r3, #2
   120f4:	str	r4, [r3]
   120f8:	ldrd	r4, [sp]
   120fc:	ldr	r6, [sp, #8]
   12100:	add	sp, sp, #12
   12104:	pop	{pc}		; (ldr pc, [sp], #4)
   12108:	movw	r3, #29008	; 0x7150
   1210c:	movt	r3, #2
   12110:	ldr	r3, [r3]
   12114:	mov	r2, #55	; 0x37
   12118:	mov	r1, #1
   1211c:	movw	r0, #26352	; 0x66f0
   12120:	movt	r0, #1
   12124:	bl	10dc8 <fwrite@plt>
   12128:	bl	10f78 <abort@plt>
   1212c:	mov	r2, #0
   12130:	mov	r3, #0
   12134:	strd	r2, [r0]
   12138:	strd	r2, [r0, #8]
   1213c:	strd	r2, [r0, #16]
   12140:	strd	r2, [r0, #24]
   12144:	strd	r2, [r0, #32]
   12148:	strd	r2, [r0, #40]	; 0x28
   1214c:	cmp	r1, #10
   12150:	beq	1215c <__assert_fail@plt+0x11d8>
   12154:	str	r1, [r0]
   12158:	bx	lr
   1215c:	str	r4, [sp, #-8]!
   12160:	str	lr, [sp, #4]
   12164:	bl	10f78 <abort@plt>
   12168:	strd	r4, [sp, #-16]!
   1216c:	str	r6, [sp, #8]
   12170:	str	lr, [sp, #12]
   12174:	mov	r5, r0
   12178:	mov	r6, r1
   1217c:	mov	r2, #5
   12180:	mov	r1, r0
   12184:	mov	r0, #0
   12188:	bl	10d8c <dcgettext@plt>
   1218c:	mov	r4, r0
   12190:	cmp	r5, r0
   12194:	beq	121ac <__assert_fail@plt+0x1228>
   12198:	mov	r0, r4
   1219c:	ldrd	r4, [sp]
   121a0:	ldr	r6, [sp, #8]
   121a4:	add	sp, sp, #12
   121a8:	pop	{pc}		; (ldr pc, [sp], #4)
   121ac:	bl	15b14 <__assert_fail@plt+0x4b90>
   121b0:	ldrb	r3, [r0]
   121b4:	bic	r3, r3, #32
   121b8:	cmp	r3, #85	; 0x55
   121bc:	bne	12240 <__assert_fail@plt+0x12bc>
   121c0:	ldrb	r3, [r0, #1]
   121c4:	bic	r3, r3, #32
   121c8:	cmp	r3, #84	; 0x54
   121cc:	bne	12204 <__assert_fail@plt+0x1280>
   121d0:	ldrb	r3, [r0, #2]
   121d4:	bic	r3, r3, #32
   121d8:	cmp	r3, #70	; 0x46
   121dc:	bne	12204 <__assert_fail@plt+0x1280>
   121e0:	ldrb	r3, [r0, #3]
   121e4:	cmp	r3, #45	; 0x2d
   121e8:	bne	12204 <__assert_fail@plt+0x1280>
   121ec:	ldrb	r3, [r0, #4]
   121f0:	cmp	r3, #56	; 0x38
   121f4:	bne	12204 <__assert_fail@plt+0x1280>
   121f8:	ldrb	r3, [r0, #5]
   121fc:	cmp	r3, #0
   12200:	beq	12220 <__assert_fail@plt+0x129c>
   12204:	movw	r4, #26504	; 0x6788
   12208:	movt	r4, #1
   1220c:	movw	r3, #26524	; 0x679c
   12210:	movt	r3, #1
   12214:	cmp	r6, #9
   12218:	movne	r4, r3
   1221c:	b	12198 <__assert_fail@plt+0x1214>
   12220:	ldrb	r2, [r4]
   12224:	movw	r4, #26520	; 0x6798
   12228:	movt	r4, #1
   1222c:	movw	r3, #26508	; 0x678c
   12230:	movt	r3, #1
   12234:	cmp	r2, #96	; 0x60
   12238:	movne	r4, r3
   1223c:	b	12198 <__assert_fail@plt+0x1214>
   12240:	cmp	r3, #71	; 0x47
   12244:	bne	12204 <__assert_fail@plt+0x1280>
   12248:	ldrb	r3, [r0, #1]
   1224c:	bic	r3, r3, #32
   12250:	cmp	r3, #66	; 0x42
   12254:	bne	12204 <__assert_fail@plt+0x1280>
   12258:	ldrb	r3, [r0, #2]
   1225c:	cmp	r3, #49	; 0x31
   12260:	bne	12204 <__assert_fail@plt+0x1280>
   12264:	ldrb	r3, [r0, #3]
   12268:	cmp	r3, #56	; 0x38
   1226c:	bne	12204 <__assert_fail@plt+0x1280>
   12270:	ldrb	r3, [r0, #4]
   12274:	cmp	r3, #48	; 0x30
   12278:	bne	12204 <__assert_fail@plt+0x1280>
   1227c:	ldrb	r3, [r0, #5]
   12280:	cmp	r3, #51	; 0x33
   12284:	bne	12204 <__assert_fail@plt+0x1280>
   12288:	ldrb	r3, [r0, #6]
   1228c:	cmp	r3, #48	; 0x30
   12290:	bne	12204 <__assert_fail@plt+0x1280>
   12294:	ldrb	r3, [r0, #7]
   12298:	cmp	r3, #0
   1229c:	bne	12204 <__assert_fail@plt+0x1280>
   122a0:	ldrb	r2, [r4]
   122a4:	movw	r4, #26516	; 0x6794
   122a8:	movt	r4, #1
   122ac:	movw	r3, #26512	; 0x6790
   122b0:	movt	r3, #1
   122b4:	cmp	r2, #96	; 0x60
   122b8:	movne	r4, r3
   122bc:	b	12198 <__assert_fail@plt+0x1214>
   122c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   122c4:	strd	r6, [sp, #8]
   122c8:	strd	r8, [sp, #16]
   122cc:	strd	sl, [sp, #24]
   122d0:	str	lr, [sp, #32]
   122d4:	sub	sp, sp, #116	; 0x74
   122d8:	str	r0, [sp, #64]	; 0x40
   122dc:	mov	r8, r1
   122e0:	str	r2, [sp, #48]	; 0x30
   122e4:	str	r3, [sp, #24]
   122e8:	ldr	r7, [sp, #152]	; 0x98
   122ec:	bl	10de0 <__ctype_get_mb_cur_max@plt>
   122f0:	str	r0, [sp, #76]	; 0x4c
   122f4:	ldr	r3, [sp, #156]	; 0x9c
   122f8:	ubfx	r3, r3, #1, #1
   122fc:	str	r3, [sp, #32]
   12300:	mov	r3, #1
   12304:	str	r3, [sp, #40]	; 0x28
   12308:	mov	r3, #0
   1230c:	str	r3, [sp, #68]	; 0x44
   12310:	str	r3, [sp, #36]	; 0x24
   12314:	str	r3, [sp, #28]
   12318:	str	r3, [sp, #52]	; 0x34
   1231c:	str	r3, [sp, #60]	; 0x3c
   12320:	str	r3, [sp, #72]	; 0x48
   12324:	movw	r3, #26528	; 0x67a0
   12328:	movt	r3, #1
   1232c:	str	r3, [sp, #80]	; 0x50
   12330:	mov	r9, r8
   12334:	mov	sl, r7
   12338:	cmp	sl, #10
   1233c:	ldrls	pc, [pc, sl, lsl #2]
   12340:	b	12504 <__assert_fail@plt+0x1580>
   12344:	andeq	r2, r1, r4, lsr #7
   12348:	andeq	r2, r1, r8, ror r3
   1234c:	ldrdeq	r2, [r1], -ip
   12350:	andeq	r2, r1, r0, ror r3
   12354:	muleq	r1, r0, r4
   12358:			; <UNDEFINED> instruction: 0x000123b4
   1235c:	andeq	r3, r1, r0, lsl #15
   12360:	andeq	r2, r1, r8, lsl #10
   12364:	strdeq	r2, [r1], -r0
   12368:	strdeq	r2, [r1], -r0
   1236c:	strdeq	r2, [r1], -r0
   12370:	mov	r3, #1
   12374:	str	r3, [sp, #28]
   12378:	mov	r3, #1
   1237c:	str	r3, [sp, #32]
   12380:	str	r3, [sp, #52]	; 0x34
   12384:	movw	r3, #26524	; 0x679c
   12388:	movt	r3, #1
   1238c:	str	r3, [sp, #60]	; 0x3c
   12390:	mov	fp, #0
   12394:	mov	sl, #2
   12398:	mov	r6, #0
   1239c:	ldr	r8, [sp, #64]	; 0x40
   123a0:	b	12c18 <__assert_fail@plt+0x1c94>
   123a4:	mov	fp, sl
   123a8:	mov	r3, #0
   123ac:	str	r3, [sp, #32]
   123b0:	b	12398 <__assert_fail@plt+0x1414>
   123b4:	ldr	r3, [sp, #32]
   123b8:	cmp	r3, #0
   123bc:	bne	1251c <__assert_fail@plt+0x1598>
   123c0:	cmp	r9, #0
   123c4:	beq	12540 <__assert_fail@plt+0x15bc>
   123c8:	mov	r3, #34	; 0x22
   123cc:	ldr	r2, [sp, #64]	; 0x40
   123d0:	strb	r3, [r2]
   123d4:	mov	fp, #1
   123d8:	str	fp, [sp, #28]
   123dc:	str	fp, [sp, #52]	; 0x34
   123e0:	movw	r3, #26504	; 0x6788
   123e4:	movt	r3, #1
   123e8:	str	r3, [sp, #60]	; 0x3c
   123ec:	b	12398 <__assert_fail@plt+0x1414>
   123f0:	cmp	sl, #10
   123f4:	bne	12428 <__assert_fail@plt+0x14a4>
   123f8:	ldr	r3, [sp, #32]
   123fc:	cmp	r3, #0
   12400:	movne	fp, #0
   12404:	beq	12450 <__assert_fail@plt+0x14cc>
   12408:	ldr	r0, [sp, #168]	; 0xa8
   1240c:	bl	10e94 <strlen@plt>
   12410:	str	r0, [sp, #52]	; 0x34
   12414:	ldr	r3, [sp, #168]	; 0xa8
   12418:	str	r3, [sp, #60]	; 0x3c
   1241c:	mov	r3, #1
   12420:	str	r3, [sp, #28]
   12424:	b	12398 <__assert_fail@plt+0x1414>
   12428:	mov	r1, sl
   1242c:	ldr	r0, [sp, #80]	; 0x50
   12430:	bl	12168 <__assert_fail@plt+0x11e4>
   12434:	str	r0, [sp, #164]	; 0xa4
   12438:	mov	r1, sl
   1243c:	movw	r0, #26524	; 0x679c
   12440:	movt	r0, #1
   12444:	bl	12168 <__assert_fail@plt+0x11e4>
   12448:	str	r0, [sp, #168]	; 0xa8
   1244c:	b	123f8 <__assert_fail@plt+0x1474>
   12450:	ldr	r3, [sp, #164]	; 0xa4
   12454:	ldrb	r3, [r3]
   12458:	cmp	r3, #0
   1245c:	beq	12488 <__assert_fail@plt+0x1504>
   12460:	ldr	r2, [sp, #164]	; 0xa4
   12464:	mov	fp, #0
   12468:	ldr	r1, [sp, #64]	; 0x40
   1246c:	cmp	r9, fp
   12470:	strbhi	r3, [r1, fp]
   12474:	add	fp, fp, #1
   12478:	ldrb	r3, [r2, #1]!
   1247c:	cmp	r3, #0
   12480:	bne	1246c <__assert_fail@plt+0x14e8>
   12484:	b	12408 <__assert_fail@plt+0x1484>
   12488:	mov	fp, #0
   1248c:	b	12408 <__assert_fail@plt+0x1484>
   12490:	ldr	r3, [sp, #32]
   12494:	cmp	r3, #0
   12498:	bne	12378 <__assert_fail@plt+0x13f4>
   1249c:	mov	r3, #1
   124a0:	str	r3, [sp, #28]
   124a4:	cmp	r9, #0
   124a8:	beq	1255c <__assert_fail@plt+0x15d8>
   124ac:	mov	r3, #39	; 0x27
   124b0:	ldr	r2, [sp, #64]	; 0x40
   124b4:	strb	r3, [r2]
   124b8:	mov	r3, #0
   124bc:	str	r3, [sp, #32]
   124c0:	mov	fp, #1
   124c4:	str	fp, [sp, #52]	; 0x34
   124c8:	movw	r3, #26524	; 0x679c
   124cc:	movt	r3, #1
   124d0:	str	r3, [sp, #60]	; 0x3c
   124d4:	mov	sl, #2
   124d8:	b	12398 <__assert_fail@plt+0x1414>
   124dc:	ldr	r3, [sp, #32]
   124e0:	cmp	r3, #0
   124e4:	beq	124a4 <__assert_fail@plt+0x1520>
   124e8:	mov	r3, #1
   124ec:	str	r3, [sp, #52]	; 0x34
   124f0:	movw	r3, #26524	; 0x679c
   124f4:	movt	r3, #1
   124f8:	str	r3, [sp, #60]	; 0x3c
   124fc:	mov	fp, #0
   12500:	b	12398 <__assert_fail@plt+0x1414>
   12504:	bl	10f78 <abort@plt>
   12508:	mov	fp, #0
   1250c:	str	fp, [sp, #32]
   12510:	mov	r3, #1
   12514:	str	r3, [sp, #28]
   12518:	b	12398 <__assert_fail@plt+0x1414>
   1251c:	ldr	r3, [sp, #32]
   12520:	str	r3, [sp, #28]
   12524:	mov	r3, #1
   12528:	str	r3, [sp, #52]	; 0x34
   1252c:	movw	r3, #26504	; 0x6788
   12530:	movt	r3, #1
   12534:	str	r3, [sp, #60]	; 0x3c
   12538:	mov	fp, #0
   1253c:	b	12398 <__assert_fail@plt+0x1414>
   12540:	mov	fp, #1
   12544:	str	fp, [sp, #28]
   12548:	str	fp, [sp, #52]	; 0x34
   1254c:	movw	r3, #26504	; 0x6788
   12550:	movt	r3, #1
   12554:	str	r3, [sp, #60]	; 0x3c
   12558:	b	12398 <__assert_fail@plt+0x1414>
   1255c:	mov	r3, #0
   12560:	str	r3, [sp, #32]
   12564:	mov	fp, #1
   12568:	str	fp, [sp, #52]	; 0x34
   1256c:	movw	r3, #26524	; 0x679c
   12570:	movt	r3, #1
   12574:	str	r3, [sp, #60]	; 0x3c
   12578:	mov	sl, #2
   1257c:	b	12398 <__assert_fail@plt+0x1414>
   12580:	mov	r3, r2
   12584:	add	r4, r6, r2
   12588:	ldr	r2, [sp, #24]
   1258c:	cmp	r3, #1
   12590:	movls	r3, #0
   12594:	movhi	r3, #1
   12598:	cmn	r2, #1
   1259c:	movne	r3, #0
   125a0:	cmp	r3, #0
   125a4:	beq	125b4 <__assert_fail@plt+0x1630>
   125a8:	ldr	r0, [sp, #48]	; 0x30
   125ac:	bl	10e94 <strlen@plt>
   125b0:	str	r0, [sp, #24]
   125b4:	ldr	r3, [sp, #24]
   125b8:	cmp	r4, r3
   125bc:	bhi	137a8 <__assert_fail@plt+0x2824>
   125c0:	ldr	r3, [sp, #48]	; 0x30
   125c4:	add	r4, r3, r6
   125c8:	ldr	r2, [sp, #52]	; 0x34
   125cc:	ldr	r1, [sp, #60]	; 0x3c
   125d0:	mov	r0, r4
   125d4:	bl	10d74 <memcmp@plt>
   125d8:	cmp	r0, #0
   125dc:	bne	137a8 <__assert_fail@plt+0x2824>
   125e0:	ldr	r3, [sp, #32]
   125e4:	cmp	r3, #0
   125e8:	bne	127f8 <__assert_fail@plt+0x1874>
   125ec:	ldrb	r4, [r4]
   125f0:	cmp	r4, #126	; 0x7e
   125f4:	ldrls	pc, [pc, r4, lsl #2]
   125f8:	b	130ac <__assert_fail@plt+0x2128>
   125fc:	andeq	r2, r1, ip, lsr r8
   12600:	andeq	r3, r1, ip, lsr #1
   12604:	andeq	r3, r1, ip, lsr #1
   12608:	andeq	r3, r1, ip, lsr #1
   1260c:	andeq	r3, r1, ip, lsr #1
   12610:	andeq	r3, r1, ip, lsr #1
   12614:	andeq	r3, r1, ip, lsr #1
   12618:	andeq	r2, r1, r4, asr pc
   1261c:	ldrdeq	r2, [r1], -r8
   12620:	andeq	r2, r1, ip, ror lr
   12624:	andeq	r2, r1, r8, lsr #30
   12628:	muleq	r1, r0, lr
   1262c:	andeq	r2, r1, ip, ror #21
   12630:	andeq	r2, r1, r0, lsl #22
   12634:	andeq	r3, r1, ip, lsr #1
   12638:	andeq	r3, r1, ip, lsr #1
   1263c:	andeq	r3, r1, ip, lsr #1
   12640:	andeq	r3, r1, ip, lsr #1
   12644:	andeq	r3, r1, ip, lsr #1
   12648:	andeq	r3, r1, ip, lsr #1
   1264c:	andeq	r3, r1, ip, lsr #1
   12650:	andeq	r3, r1, ip, lsr #1
   12654:	andeq	r3, r1, ip, lsr #1
   12658:	andeq	r3, r1, ip, lsr #1
   1265c:	andeq	r3, r1, ip, lsr #1
   12660:	andeq	r3, r1, ip, lsr #1
   12664:	andeq	r3, r1, ip, lsr #1
   12668:	andeq	r3, r1, ip, lsr #1
   1266c:	andeq	r3, r1, ip, lsr #1
   12670:	andeq	r3, r1, ip, lsr #1
   12674:	andeq	r3, r1, ip, lsr #1
   12678:	andeq	r3, r1, ip, lsr #1
   1267c:	andeq	r2, r1, r8, asr #31
   12680:	andeq	r2, r1, ip, ror #31
   12684:	andeq	r2, r1, ip, ror #31
   12688:	andeq	r2, r1, r4, lsl #31
   1268c:	andeq	r2, r1, ip, ror #31
   12690:	andeq	r3, r1, ip, lsl #10
   12694:	andeq	r2, r1, ip, ror #31
   12698:	andeq	r3, r1, ip
   1269c:	andeq	r2, r1, ip, ror #31
   126a0:	andeq	r2, r1, ip, ror #31
   126a4:	andeq	r2, r1, ip, ror #31
   126a8:	andeq	r3, r1, ip, lsl #10
   126ac:	andeq	r3, r1, ip, lsl #10
   126b0:	andeq	r3, r1, ip, lsl #10
   126b4:	andeq	r3, r1, ip, lsl #10
   126b8:	andeq	r3, r1, ip, lsl #10
   126bc:	andeq	r3, r1, ip, lsl #10
   126c0:	andeq	r3, r1, ip, lsl #10
   126c4:	andeq	r3, r1, ip, lsl #10
   126c8:	andeq	r3, r1, ip, lsl #10
   126cc:	andeq	r3, r1, ip, lsl #10
   126d0:	andeq	r3, r1, ip, lsl #10
   126d4:	andeq	r3, r1, ip, lsl #10
   126d8:	andeq	r3, r1, ip, lsl #10
   126dc:	andeq	r3, r1, ip, lsl #10
   126e0:	andeq	r3, r1, ip, lsl #10
   126e4:	andeq	r3, r1, ip, lsl #10
   126e8:	andeq	r2, r1, ip, ror #31
   126ec:	andeq	r2, r1, ip, ror #31
   126f0:	andeq	r2, r1, ip, ror #31
   126f4:	andeq	r2, r1, ip, ror #31
   126f8:	andeq	r2, r1, ip, ror #18
   126fc:	andeq	r3, r1, ip, lsr #1
   12700:	andeq	r3, r1, ip, lsl #10
   12704:	andeq	r3, r1, ip, lsl #10
   12708:	andeq	r3, r1, ip, lsl #10
   1270c:	andeq	r3, r1, ip, lsl #10
   12710:	andeq	r3, r1, ip, lsl #10
   12714:	andeq	r3, r1, ip, lsl #10
   12718:	andeq	r3, r1, ip, lsl #10
   1271c:	andeq	r3, r1, ip, lsl #10
   12720:	andeq	r3, r1, ip, lsl #10
   12724:	andeq	r3, r1, ip, lsl #10
   12728:	andeq	r3, r1, ip, lsl #10
   1272c:	andeq	r3, r1, ip, lsl #10
   12730:	andeq	r3, r1, ip, lsl #10
   12734:	andeq	r3, r1, ip, lsl #10
   12738:	andeq	r3, r1, ip, lsl #10
   1273c:	andeq	r3, r1, ip, lsl #10
   12740:	andeq	r3, r1, ip, lsl #10
   12744:	andeq	r3, r1, ip, lsl #10
   12748:	andeq	r3, r1, ip, lsl #10
   1274c:	andeq	r3, r1, ip, lsl #10
   12750:	andeq	r3, r1, ip, lsl #10
   12754:	andeq	r3, r1, ip, lsl #10
   12758:	andeq	r3, r1, ip, lsl #10
   1275c:	andeq	r3, r1, ip, lsl #10
   12760:	andeq	r3, r1, ip, lsl #10
   12764:	andeq	r3, r1, ip, lsl #10
   12768:	andeq	r2, r1, ip, ror #31
   1276c:	andeq	r2, r1, r4, lsr #29
   12770:	andeq	r3, r1, ip, lsl #10
   12774:	andeq	r2, r1, ip, ror #31
   12778:	andeq	r3, r1, ip, lsl #10
   1277c:	andeq	r2, r1, ip, ror #31
   12780:	andeq	r3, r1, ip, lsl #10
   12784:	andeq	r3, r1, ip, lsl #10
   12788:	andeq	r3, r1, ip, lsl #10
   1278c:	andeq	r3, r1, ip, lsl #10
   12790:	andeq	r3, r1, ip, lsl #10
   12794:	andeq	r3, r1, ip, lsl #10
   12798:	andeq	r3, r1, ip, lsl #10
   1279c:	andeq	r3, r1, ip, lsl #10
   127a0:	andeq	r3, r1, ip, lsl #10
   127a4:	andeq	r3, r1, ip, lsl #10
   127a8:	andeq	r3, r1, ip, lsl #10
   127ac:	andeq	r3, r1, ip, lsl #10
   127b0:	andeq	r3, r1, ip, lsl #10
   127b4:	andeq	r3, r1, ip, lsl #10
   127b8:	andeq	r3, r1, ip, lsl #10
   127bc:	andeq	r3, r1, ip, lsl #10
   127c0:	andeq	r3, r1, ip, lsl #10
   127c4:	andeq	r3, r1, ip, lsl #10
   127c8:	andeq	r3, r1, ip, lsl #10
   127cc:	andeq	r3, r1, ip, lsl #10
   127d0:	andeq	r3, r1, ip, lsl #10
   127d4:	andeq	r3, r1, ip, lsl #10
   127d8:	andeq	r3, r1, ip, lsl #10
   127dc:	andeq	r3, r1, ip, lsl #10
   127e0:	andeq	r3, r1, ip, lsl #10
   127e4:	andeq	r3, r1, ip, lsl #10
   127e8:	andeq	r2, r1, r4, ror #30
   127ec:	andeq	r2, r1, ip, ror #31
   127f0:	andeq	r2, r1, r4, ror #30
   127f4:	andeq	r2, r1, r4, lsl #31
   127f8:	mov	r8, r9
   127fc:	mov	r7, sl
   12800:	b	13700 <__assert_fail@plt+0x277c>
   12804:	ldr	r3, [sp, #28]
   12808:	cmp	r3, #0
   1280c:	bne	1282c <__assert_fail@plt+0x18a8>
   12810:	ldr	r3, [sp, #156]	; 0x9c
   12814:	tst	r3, #1
   12818:	bne	12c14 <__assert_fail@plt+0x1c90>
   1281c:	ldr	r3, [sp, #28]
   12820:	str	r3, [sp, #44]	; 0x2c
   12824:	mov	r5, r3
   12828:	b	12b34 <__assert_fail@plt+0x1bb0>
   1282c:	ldr	r3, [sp, #32]
   12830:	cmp	r3, #0
   12834:	bne	136b0 <__assert_fail@plt+0x272c>
   12838:	str	r3, [sp, #44]	; 0x2c
   1283c:	ldr	r3, [sp, #36]	; 0x24
   12840:	eor	r3, r3, #1
   12844:	cmp	sl, #2
   12848:	movne	r3, #0
   1284c:	andeq	r3, r3, #1
   12850:	cmp	r3, #0
   12854:	beq	128ac <__assert_fail@plt+0x1928>
   12858:	cmp	r9, fp
   1285c:	movhi	r2, #39	; 0x27
   12860:	strbhi	r2, [r8, fp]
   12864:	add	r2, fp, #1
   12868:	cmp	r9, r2
   1286c:	movhi	r1, #36	; 0x24
   12870:	strbhi	r1, [r8, r2]
   12874:	add	r2, fp, #2
   12878:	cmp	r9, r2
   1287c:	movhi	r1, #39	; 0x27
   12880:	strbhi	r1, [r8, r2]
   12884:	add	r2, fp, #3
   12888:	cmp	r9, r2
   1288c:	bls	1376c <__assert_fail@plt+0x27e8>
   12890:	mov	r1, #92	; 0x5c
   12894:	strb	r1, [r8, r2]
   12898:	add	fp, fp, #4
   1289c:	str	r3, [sp, #36]	; 0x24
   128a0:	mov	r5, #0
   128a4:	mov	r4, #48	; 0x30
   128a8:	b	12b80 <__assert_fail@plt+0x1bfc>
   128ac:	cmp	r9, fp
   128b0:	bhi	128d8 <__assert_fail@plt+0x1954>
   128b4:	add	r1, fp, #1
   128b8:	ldr	r2, [sp, #56]	; 0x38
   128bc:	cmp	r2, #0
   128c0:	bne	12900 <__assert_fail@plt+0x197c>
   128c4:	mov	r3, r5
   128c8:	ldr	r5, [sp, #56]	; 0x38
   128cc:	mov	fp, r1
   128d0:	mov	r4, #48	; 0x30
   128d4:	b	12b34 <__assert_fail@plt+0x1bb0>
   128d8:	mov	r2, #92	; 0x5c
   128dc:	strb	r2, [r8, fp]
   128e0:	add	r1, fp, #1
   128e4:	ldr	r2, [sp, #56]	; 0x38
   128e8:	cmp	r2, #0
   128ec:	moveq	r3, r5
   128f0:	moveq	r5, r2
   128f4:	moveq	fp, r1
   128f8:	moveq	r4, #48	; 0x30
   128fc:	beq	12b80 <__assert_fail@plt+0x1bfc>
   12900:	add	r2, r6, #1
   12904:	ldr	r0, [sp, #24]
   12908:	cmp	r2, r0
   1290c:	bcs	12928 <__assert_fail@plt+0x19a4>
   12910:	ldr	r0, [sp, #48]	; 0x30
   12914:	ldrb	r2, [r0, r2]
   12918:	sub	r2, r2, #48	; 0x30
   1291c:	uxtb	r2, r2
   12920:	cmp	r2, #9
   12924:	bls	12940 <__assert_fail@plt+0x19bc>
   12928:	mov	r2, r3
   1292c:	mov	r3, r5
   12930:	mov	r5, r2
   12934:	mov	fp, r1
   12938:	mov	r4, #48	; 0x30
   1293c:	b	12b58 <__assert_fail@plt+0x1bd4>
   12940:	cmp	r9, r1
   12944:	movhi	r2, #48	; 0x30
   12948:	strbhi	r2, [r8, r1]
   1294c:	add	r2, fp, #2
   12950:	cmp	r9, r2
   12954:	movhi	r1, #48	; 0x30
   12958:	strbhi	r1, [r8, r2]
   1295c:	add	r1, fp, #3
   12960:	b	12928 <__assert_fail@plt+0x19a4>
   12964:	mov	r3, #0
   12968:	str	r3, [sp, #44]	; 0x2c
   1296c:	cmp	sl, #2
   12970:	beq	1298c <__assert_fail@plt+0x1a08>
   12974:	cmp	sl, #5
   12978:	beq	129a4 <__assert_fail@plt+0x1a20>
   1297c:	mov	r5, #0
   12980:	mov	r3, r5
   12984:	mov	r4, #63	; 0x3f
   12988:	b	12b34 <__assert_fail@plt+0x1bb0>
   1298c:	ldr	r3, [sp, #32]
   12990:	cmp	r3, #0
   12994:	bne	136bc <__assert_fail@plt+0x2738>
   12998:	mov	r5, r3
   1299c:	mov	r4, #63	; 0x3f
   129a0:	b	1309c <__assert_fail@plt+0x2118>
   129a4:	ldr	r3, [sp, #156]	; 0x9c
   129a8:	tst	r3, #4
   129ac:	beq	134d4 <__assert_fail@plt+0x2550>
   129b0:	add	r2, r6, #2
   129b4:	ldr	r3, [sp, #24]
   129b8:	cmp	r2, r3
   129bc:	bcs	134e4 <__assert_fail@plt+0x2560>
   129c0:	ldr	r3, [sp, #48]	; 0x30
   129c4:	add	r3, r3, r6
   129c8:	ldrb	r4, [r3, #1]
   129cc:	cmp	r4, #63	; 0x3f
   129d0:	movne	r5, #0
   129d4:	movne	r3, r5
   129d8:	movne	r4, #63	; 0x3f
   129dc:	bne	12b34 <__assert_fail@plt+0x1bb0>
   129e0:	ldr	r3, [sp, #48]	; 0x30
   129e4:	ldrb	r1, [r3, r2]
   129e8:	sub	r3, r1, #33	; 0x21
   129ec:	cmp	r3, #29
   129f0:	ldrls	pc, [pc, r3, lsl #2]
   129f4:	b	134f4 <__assert_fail@plt+0x2570>
   129f8:	andeq	r2, r1, r0, ror sl
   129fc:	strdeq	r3, [r1], -r4
   12a00:	strdeq	r3, [r1], -r4
   12a04:	strdeq	r3, [r1], -r4
   12a08:	strdeq	r3, [r1], -r4
   12a0c:	strdeq	r3, [r1], -r4
   12a10:	andeq	r2, r1, r0, ror sl
   12a14:	andeq	r2, r1, r0, ror sl
   12a18:	andeq	r2, r1, r0, ror sl
   12a1c:	strdeq	r3, [r1], -r4
   12a20:	strdeq	r3, [r1], -r4
   12a24:	strdeq	r3, [r1], -r4
   12a28:	andeq	r2, r1, r0, ror sl
   12a2c:	strdeq	r3, [r1], -r4
   12a30:	andeq	r2, r1, r0, ror sl
   12a34:	strdeq	r3, [r1], -r4
   12a38:	strdeq	r3, [r1], -r4
   12a3c:	strdeq	r3, [r1], -r4
   12a40:	strdeq	r3, [r1], -r4
   12a44:	strdeq	r3, [r1], -r4
   12a48:	strdeq	r3, [r1], -r4
   12a4c:	strdeq	r3, [r1], -r4
   12a50:	strdeq	r3, [r1], -r4
   12a54:	strdeq	r3, [r1], -r4
   12a58:	strdeq	r3, [r1], -r4
   12a5c:	strdeq	r3, [r1], -r4
   12a60:	strdeq	r3, [r1], -r4
   12a64:	andeq	r2, r1, r0, ror sl
   12a68:	andeq	r2, r1, r0, ror sl
   12a6c:	andeq	r2, r1, r0, ror sl
   12a70:	ldr	r3, [sp, #32]
   12a74:	cmp	r3, #0
   12a78:	bne	13760 <__assert_fail@plt+0x27dc>
   12a7c:	cmp	r9, fp
   12a80:	movhi	r3, #63	; 0x3f
   12a84:	strbhi	r3, [r8, fp]
   12a88:	add	r3, fp, #1
   12a8c:	cmp	r9, r3
   12a90:	movhi	r0, #34	; 0x22
   12a94:	strbhi	r0, [r8, r3]
   12a98:	add	r3, fp, #2
   12a9c:	cmp	r9, r3
   12aa0:	movhi	r0, #34	; 0x22
   12aa4:	strbhi	r0, [r8, r3]
   12aa8:	add	r3, fp, #3
   12aac:	cmp	r9, r3
   12ab0:	movhi	r0, #63	; 0x3f
   12ab4:	strbhi	r0, [r8, r3]
   12ab8:	add	fp, fp, #4
   12abc:	ldr	r3, [sp, #32]
   12ac0:	mov	r5, r3
   12ac4:	mov	r4, r1
   12ac8:	mov	r6, r2
   12acc:	b	12b34 <__assert_fail@plt+0x1bb0>
   12ad0:	mov	r3, #0
   12ad4:	str	r3, [sp, #44]	; 0x2c
   12ad8:	mov	r4, #8
   12adc:	mov	r3, #98	; 0x62
   12ae0:	b	12b20 <__assert_fail@plt+0x1b9c>
   12ae4:	mov	r3, #0
   12ae8:	str	r3, [sp, #44]	; 0x2c
   12aec:	mov	r4, #12
   12af0:	mov	r3, #102	; 0x66
   12af4:	b	12b20 <__assert_fail@plt+0x1b9c>
   12af8:	mov	r3, #0
   12afc:	str	r3, [sp, #44]	; 0x2c
   12b00:	mov	r4, #13
   12b04:	mov	r3, #114	; 0x72
   12b08:	ldr	r2, [sp, #32]
   12b0c:	cmp	sl, #2
   12b10:	movne	r2, #0
   12b14:	andeq	r2, r2, #1
   12b18:	cmp	r2, #0
   12b1c:	bne	12f40 <__assert_fail@plt+0x1fbc>
   12b20:	ldr	r2, [sp, #28]
   12b24:	cmp	r2, #0
   12b28:	bne	13528 <__assert_fail@plt+0x25a4>
   12b2c:	mov	r5, r2
   12b30:	mov	r3, r2
   12b34:	ldr	r2, [sp, #28]
   12b38:	eor	r2, r2, #1
   12b3c:	cmp	sl, #2
   12b40:	orreq	r2, r2, #1
   12b44:	eor	r2, r2, #1
   12b48:	ldr	r1, [sp, #32]
   12b4c:	orr	r2, r1, r2
   12b50:	tst	r2, #255	; 0xff
   12b54:	beq	12b80 <__assert_fail@plt+0x1bfc>
   12b58:	ldr	r2, [sp, #160]	; 0xa0
   12b5c:	cmp	r2, #0
   12b60:	beq	12b80 <__assert_fail@plt+0x1bfc>
   12b64:	ubfx	r1, r4, #5, #8
   12b68:	and	r2, r4, #31
   12b6c:	ldr	r0, [sp, #160]	; 0xa0
   12b70:	ldr	r1, [r0, r1, lsl #2]
   12b74:	lsr	r2, r1, r2
   12b78:	tst	r2, #1
   12b7c:	bne	12b8c <__assert_fail@plt+0x1c08>
   12b80:	ldr	r2, [sp, #44]	; 0x2c
   12b84:	cmp	r2, #0
   12b88:	beq	12ee0 <__assert_fail@plt+0x1f5c>
   12b8c:	ldr	r3, [sp, #32]
   12b90:	cmp	r3, #0
   12b94:	bne	136e0 <__assert_fail@plt+0x275c>
   12b98:	ldr	r3, [sp, #36]	; 0x24
   12b9c:	eor	r3, r3, #1
   12ba0:	cmp	sl, #2
   12ba4:	movne	r3, #0
   12ba8:	andeq	r3, r3, #1
   12bac:	cmp	r3, #0
   12bb0:	beq	12be8 <__assert_fail@plt+0x1c64>
   12bb4:	cmp	r9, fp
   12bb8:	movhi	r2, #39	; 0x27
   12bbc:	strbhi	r2, [r8, fp]
   12bc0:	add	r2, fp, #1
   12bc4:	cmp	r9, r2
   12bc8:	movhi	r1, #36	; 0x24
   12bcc:	strbhi	r1, [r8, r2]
   12bd0:	add	r2, fp, #2
   12bd4:	cmp	r9, r2
   12bd8:	movhi	r1, #39	; 0x27
   12bdc:	strbhi	r1, [r8, r2]
   12be0:	add	fp, fp, #3
   12be4:	str	r3, [sp, #36]	; 0x24
   12be8:	cmp	r9, fp
   12bec:	movhi	r3, #92	; 0x5c
   12bf0:	strbhi	r3, [r8, fp]
   12bf4:	add	fp, fp, #1
   12bf8:	cmp	fp, r9
   12bfc:	strbcc	r4, [r8, fp]
   12c00:	add	fp, fp, #1
   12c04:	cmp	r5, #0
   12c08:	ldr	r3, [sp, #40]	; 0x28
   12c0c:	moveq	r3, r5
   12c10:	str	r3, [sp, #40]	; 0x28
   12c14:	add	r6, r6, #1
   12c18:	ldr	r3, [sp, #24]
   12c1c:	cmn	r3, #1
   12c20:	beq	13550 <__assert_fail@plt+0x25cc>
   12c24:	ldr	r3, [sp, #24]
   12c28:	subs	r5, r3, r6
   12c2c:	movne	r5, #1
   12c30:	cmp	r5, #0
   12c34:	beq	13564 <__assert_fail@plt+0x25e0>
   12c38:	ldr	r3, [sp, #28]
   12c3c:	cmp	sl, #2
   12c40:	moveq	r3, #0
   12c44:	andne	r3, r3, #1
   12c48:	str	r3, [sp, #56]	; 0x38
   12c4c:	ldr	r2, [sp, #52]	; 0x34
   12c50:	adds	r7, r2, #0
   12c54:	movne	r7, #1
   12c58:	ands	r3, r3, r7
   12c5c:	str	r3, [sp, #44]	; 0x2c
   12c60:	bne	12580 <__assert_fail@plt+0x15fc>
   12c64:	ldr	r3, [sp, #48]	; 0x30
   12c68:	ldrb	r4, [r3, r6]
   12c6c:	cmp	r4, #126	; 0x7e
   12c70:	ldrls	pc, [pc, r4, lsl #2]
   12c74:	b	130ac <__assert_fail@plt+0x2128>
   12c78:	andeq	r2, r1, r4, lsl #16
   12c7c:	andeq	r3, r1, ip, lsr #1
   12c80:	andeq	r3, r1, ip, lsr #1
   12c84:	andeq	r3, r1, ip, lsr #1
   12c88:	andeq	r3, r1, ip, lsr #1
   12c8c:	andeq	r3, r1, ip, lsr #1
   12c90:	andeq	r3, r1, ip, lsr #1
   12c94:	andeq	r2, r1, ip, asr #30
   12c98:	ldrdeq	r2, [r1], -r8
   12c9c:	andeq	r2, r1, ip, ror lr
   12ca0:	andeq	r2, r1, r0, lsr #30
   12ca4:	muleq	r1, r0, lr
   12ca8:	andeq	r2, r1, ip, ror #21
   12cac:	andeq	r2, r1, r0, lsl #22
   12cb0:	andeq	r3, r1, ip, lsr #1
   12cb4:	andeq	r3, r1, ip, lsr #1
   12cb8:	andeq	r3, r1, ip, lsr #1
   12cbc:	andeq	r3, r1, ip, lsr #1
   12cc0:	andeq	r3, r1, ip, lsr #1
   12cc4:	andeq	r3, r1, ip, lsr #1
   12cc8:	andeq	r3, r1, ip, lsr #1
   12ccc:	andeq	r3, r1, ip, lsr #1
   12cd0:	andeq	r3, r1, ip, lsr #1
   12cd4:	andeq	r3, r1, ip, lsr #1
   12cd8:	andeq	r3, r1, ip, lsr #1
   12cdc:	andeq	r3, r1, ip, lsr #1
   12ce0:	andeq	r3, r1, ip, lsr #1
   12ce4:	andeq	r3, r1, ip, lsr #1
   12ce8:	andeq	r3, r1, ip, lsr #1
   12cec:	andeq	r3, r1, ip, lsr #1
   12cf0:	andeq	r3, r1, ip, lsr #1
   12cf4:	andeq	r3, r1, ip, lsr #1
   12cf8:	andeq	r2, r1, r8, asr #31
   12cfc:	andeq	r2, r1, r4, asr #31
   12d00:	andeq	r2, r1, r4, asr #31
   12d04:	andeq	r2, r1, r4, lsl #31
   12d08:	andeq	r2, r1, r4, asr #31
   12d0c:	andeq	r3, r1, ip, asr #9
   12d10:	andeq	r2, r1, r4, asr #31
   12d14:	andeq	r3, r1, ip
   12d18:	andeq	r2, r1, r4, asr #31
   12d1c:	andeq	r2, r1, r4, asr #31
   12d20:	andeq	r2, r1, r4, asr #31
   12d24:	andeq	r3, r1, ip, asr #9
   12d28:	andeq	r3, r1, ip, asr #9
   12d2c:	andeq	r3, r1, ip, asr #9
   12d30:	andeq	r3, r1, ip, asr #9
   12d34:	andeq	r3, r1, ip, asr #9
   12d38:	andeq	r3, r1, ip, asr #9
   12d3c:	andeq	r3, r1, ip, asr #9
   12d40:	andeq	r3, r1, ip, asr #9
   12d44:	andeq	r3, r1, ip, asr #9
   12d48:	andeq	r3, r1, ip, asr #9
   12d4c:	andeq	r3, r1, ip, asr #9
   12d50:	andeq	r3, r1, ip, asr #9
   12d54:	andeq	r3, r1, ip, asr #9
   12d58:	andeq	r3, r1, ip, asr #9
   12d5c:	andeq	r3, r1, ip, asr #9
   12d60:	andeq	r3, r1, ip, asr #9
   12d64:	andeq	r2, r1, r4, asr #31
   12d68:	andeq	r2, r1, r4, asr #31
   12d6c:	andeq	r2, r1, r4, asr #31
   12d70:	andeq	r2, r1, r4, asr #31
   12d74:	andeq	r2, r1, ip, ror #18
   12d78:	andeq	r3, r1, ip, lsr #1
   12d7c:	andeq	r3, r1, ip, asr #9
   12d80:	andeq	r3, r1, ip, asr #9
   12d84:	andeq	r3, r1, ip, asr #9
   12d88:	andeq	r3, r1, ip, asr #9
   12d8c:	andeq	r3, r1, ip, asr #9
   12d90:	andeq	r3, r1, ip, asr #9
   12d94:	andeq	r3, r1, ip, asr #9
   12d98:	andeq	r3, r1, ip, asr #9
   12d9c:	andeq	r3, r1, ip, asr #9
   12da0:	andeq	r3, r1, ip, asr #9
   12da4:	andeq	r3, r1, ip, asr #9
   12da8:	andeq	r3, r1, ip, asr #9
   12dac:	andeq	r3, r1, ip, asr #9
   12db0:	andeq	r3, r1, ip, asr #9
   12db4:	andeq	r3, r1, ip, asr #9
   12db8:	andeq	r3, r1, ip, asr #9
   12dbc:	andeq	r3, r1, ip, asr #9
   12dc0:	andeq	r3, r1, ip, asr #9
   12dc4:	andeq	r3, r1, ip, asr #9
   12dc8:	andeq	r3, r1, ip, asr #9
   12dcc:	andeq	r3, r1, ip, asr #9
   12dd0:	andeq	r3, r1, ip, asr #9
   12dd4:	andeq	r3, r1, ip, asr #9
   12dd8:	andeq	r3, r1, ip, asr #9
   12ddc:	andeq	r3, r1, ip, asr #9
   12de0:	andeq	r3, r1, ip, asr #9
   12de4:	andeq	r2, r1, r4, asr #31
   12de8:	andeq	r2, r1, r4, lsr #29
   12dec:	andeq	r3, r1, ip, asr #9
   12df0:	andeq	r2, r1, r4, asr #31
   12df4:	andeq	r3, r1, ip, asr #9
   12df8:	andeq	r2, r1, r4, asr #31
   12dfc:	andeq	r3, r1, ip, asr #9
   12e00:	andeq	r3, r1, ip, asr #9
   12e04:	andeq	r3, r1, ip, asr #9
   12e08:	andeq	r3, r1, ip, asr #9
   12e0c:	andeq	r3, r1, ip, asr #9
   12e10:	andeq	r3, r1, ip, asr #9
   12e14:	andeq	r3, r1, ip, asr #9
   12e18:	andeq	r3, r1, ip, asr #9
   12e1c:	andeq	r3, r1, ip, asr #9
   12e20:	andeq	r3, r1, ip, asr #9
   12e24:	andeq	r3, r1, ip, asr #9
   12e28:	andeq	r3, r1, ip, asr #9
   12e2c:	andeq	r3, r1, ip, asr #9
   12e30:	andeq	r3, r1, ip, asr #9
   12e34:	andeq	r3, r1, ip, asr #9
   12e38:	andeq	r3, r1, ip, asr #9
   12e3c:	andeq	r3, r1, ip, asr #9
   12e40:	andeq	r3, r1, ip, asr #9
   12e44:	andeq	r3, r1, ip, asr #9
   12e48:	andeq	r3, r1, ip, asr #9
   12e4c:	andeq	r3, r1, ip, asr #9
   12e50:	andeq	r3, r1, ip, asr #9
   12e54:	andeq	r3, r1, ip, asr #9
   12e58:	andeq	r3, r1, ip, asr #9
   12e5c:	andeq	r3, r1, ip, asr #9
   12e60:	andeq	r3, r1, ip, asr #9
   12e64:	andeq	r2, r1, r4, ror #30
   12e68:	andeq	r2, r1, r4, asr #31
   12e6c:	andeq	r2, r1, r4, ror #30
   12e70:	andeq	r2, r1, r4, lsl #31
   12e74:	mov	r3, #0
   12e78:	str	r3, [sp, #44]	; 0x2c
   12e7c:	mov	r4, #9
   12e80:	mov	r3, #116	; 0x74
   12e84:	b	12b08 <__assert_fail@plt+0x1b84>
   12e88:	mov	r3, #0
   12e8c:	str	r3, [sp, #44]	; 0x2c
   12e90:	mov	r4, #11
   12e94:	mov	r3, #118	; 0x76
   12e98:	b	12b20 <__assert_fail@plt+0x1b9c>
   12e9c:	mov	r3, #0
   12ea0:	str	r3, [sp, #44]	; 0x2c
   12ea4:	cmp	sl, #2
   12ea8:	beq	12ecc <__assert_fail@plt+0x1f48>
   12eac:	ldr	r3, [sp, #28]
   12eb0:	ldr	r2, [sp, #32]
   12eb4:	and	r3, r3, r2
   12eb8:	tst	r7, r3
   12ebc:	bne	13540 <__assert_fail@plt+0x25bc>
   12ec0:	mov	r4, #92	; 0x5c
   12ec4:	mov	r3, r4
   12ec8:	b	12b20 <__assert_fail@plt+0x1b9c>
   12ecc:	ldr	r3, [sp, #32]
   12ed0:	cmp	r3, #0
   12ed4:	bne	136c8 <__assert_fail@plt+0x2744>
   12ed8:	mov	r5, r3
   12edc:	mov	r4, #92	; 0x5c
   12ee0:	eor	r3, r3, #1
   12ee4:	ldr	r2, [sp, #36]	; 0x24
   12ee8:	and	r3, r3, r2
   12eec:	tst	r3, #255	; 0xff
   12ef0:	beq	12bf8 <__assert_fail@plt+0x1c74>
   12ef4:	cmp	r9, fp
   12ef8:	movhi	r3, #39	; 0x27
   12efc:	strbhi	r3, [r8, fp]
   12f00:	add	r3, fp, #1
   12f04:	cmp	r9, r3
   12f08:	movhi	r2, #39	; 0x27
   12f0c:	strbhi	r2, [r8, r3]
   12f10:	add	fp, fp, #2
   12f14:	mov	r3, #0
   12f18:	str	r3, [sp, #36]	; 0x24
   12f1c:	b	12bf8 <__assert_fail@plt+0x1c74>
   12f20:	mov	r3, #110	; 0x6e
   12f24:	b	12b08 <__assert_fail@plt+0x1b84>
   12f28:	mov	r3, #110	; 0x6e
   12f2c:	b	12b08 <__assert_fail@plt+0x1b84>
   12f30:	mov	r3, #0
   12f34:	str	r3, [sp, #44]	; 0x2c
   12f38:	mov	r3, #110	; 0x6e
   12f3c:	b	12b08 <__assert_fail@plt+0x1b84>
   12f40:	mov	r8, r9
   12f44:	mov	r7, #2
   12f48:	b	136e8 <__assert_fail@plt+0x2764>
   12f4c:	mov	r3, #97	; 0x61
   12f50:	b	12b20 <__assert_fail@plt+0x1b9c>
   12f54:	mov	r3, #97	; 0x61
   12f58:	b	12b20 <__assert_fail@plt+0x1b9c>
   12f5c:	mov	r3, #0
   12f60:	str	r3, [sp, #44]	; 0x2c
   12f64:	ldr	r3, [sp, #24]
   12f68:	cmn	r3, #1
   12f6c:	beq	12f98 <__assert_fail@plt+0x2014>
   12f70:	ldr	r3, [sp, #24]
   12f74:	subs	r3, r3, #1
   12f78:	movne	r3, #1
   12f7c:	cmp	r3, #0
   12f80:	bne	13500 <__assert_fail@plt+0x257c>
   12f84:	cmp	r6, #0
   12f88:	beq	12fc8 <__assert_fail@plt+0x2044>
   12f8c:	mov	r5, #0
   12f90:	mov	r3, r5
   12f94:	b	12b34 <__assert_fail@plt+0x1bb0>
   12f98:	ldr	r3, [sp, #48]	; 0x30
   12f9c:	ldrb	r3, [r3, #1]
   12fa0:	adds	r3, r3, #0
   12fa4:	movne	r3, #1
   12fa8:	b	12f7c <__assert_fail@plt+0x1ff8>
   12fac:	mov	r3, #0
   12fb0:	str	r3, [sp, #44]	; 0x2c
   12fb4:	b	12f84 <__assert_fail@plt+0x2000>
   12fb8:	mov	r3, #0
   12fbc:	str	r3, [sp, #44]	; 0x2c
   12fc0:	b	12fc8 <__assert_fail@plt+0x2044>
   12fc4:	ldr	r5, [sp, #44]	; 0x2c
   12fc8:	ldr	r3, [sp, #32]
   12fcc:	cmp	sl, #2
   12fd0:	movne	r3, #0
   12fd4:	andeq	r3, r3, #1
   12fd8:	cmp	r3, #0
   12fdc:	beq	12b34 <__assert_fail@plt+0x1bb0>
   12fe0:	mov	r8, r9
   12fe4:	mov	r7, #2
   12fe8:	b	136e8 <__assert_fail@plt+0x2764>
   12fec:	ldr	r5, [sp, #32]
   12ff0:	b	12fc8 <__assert_fail@plt+0x2044>
   12ff4:	mov	r3, #0
   12ff8:	str	r3, [sp, #44]	; 0x2c
   12ffc:	mov	r5, r3
   13000:	b	12fc8 <__assert_fail@plt+0x2044>
   13004:	mov	r3, #0
   13008:	str	r3, [sp, #44]	; 0x2c
   1300c:	cmp	sl, #2
   13010:	strne	r5, [sp, #68]	; 0x44
   13014:	movne	r3, #0
   13018:	movne	r4, #39	; 0x27
   1301c:	bne	12b34 <__assert_fail@plt+0x1bb0>
   13020:	ldr	r3, [sp, #32]
   13024:	cmp	r3, #0
   13028:	bne	136d4 <__assert_fail@plt+0x2750>
   1302c:	ldr	r3, [sp, #72]	; 0x48
   13030:	clz	r3, r3
   13034:	lsr	r3, r3, #5
   13038:	cmp	r9, #0
   1303c:	moveq	r3, #0
   13040:	cmp	r3, #0
   13044:	movne	r3, #0
   13048:	bne	13070 <__assert_fail@plt+0x20ec>
   1304c:	cmp	r9, fp
   13050:	movhi	r3, #39	; 0x27
   13054:	strbhi	r3, [r8, fp]
   13058:	add	r3, fp, #1
   1305c:	cmp	r9, r3
   13060:	movhi	r2, #92	; 0x5c
   13064:	strbhi	r2, [r8, r3]
   13068:	mov	r3, r9
   1306c:	ldr	r9, [sp, #72]	; 0x48
   13070:	add	r2, fp, #2
   13074:	cmp	r2, r3
   13078:	movcc	r1, #39	; 0x27
   1307c:	strbcc	r1, [r8, r2]
   13080:	add	fp, fp, #3
   13084:	str	r5, [sp, #68]	; 0x44
   13088:	ldr	r2, [sp, #32]
   1308c:	str	r2, [sp, #36]	; 0x24
   13090:	str	r9, [sp, #72]	; 0x48
   13094:	mov	r9, r3
   13098:	mov	r4, #39	; 0x27
   1309c:	mov	r3, #0
   130a0:	b	12b80 <__assert_fail@plt+0x1bfc>
   130a4:	mov	r3, #0
   130a8:	str	r3, [sp, #44]	; 0x2c
   130ac:	ldr	r7, [sp, #76]	; 0x4c
   130b0:	cmp	r7, #1
   130b4:	bne	130ec <__assert_fail@plt+0x2168>
   130b8:	bl	10e7c <__ctype_b_loc@plt>
   130bc:	ldr	r2, [r0]
   130c0:	lsl	r3, r4, #1
   130c4:	ldrh	r5, [r2, r3]
   130c8:	ubfx	r5, r5, #14, #1
   130cc:	mov	ip, r7
   130d0:	eor	r3, r5, #1
   130d4:	ldr	r2, [sp, #28]
   130d8:	and	r3, r3, r2
   130dc:	ands	r3, r3, #255	; 0xff
   130e0:	beq	12b34 <__assert_fail@plt+0x1bb0>
   130e4:	mov	r5, #0
   130e8:	b	13348 <__assert_fail@plt+0x23c4>
   130ec:	mov	r2, #0
   130f0:	mov	r3, #0
   130f4:	strd	r2, [sp, #104]	; 0x68
   130f8:	ldr	r3, [sp, #24]
   130fc:	cmn	r3, #1
   13100:	beq	13124 <__assert_fail@plt+0x21a0>
   13104:	mov	r3, #0
   13108:	str	r4, [sp, #88]	; 0x58
   1310c:	str	fp, [sp, #92]	; 0x5c
   13110:	str	r8, [sp, #56]	; 0x38
   13114:	mov	r8, r3
   13118:	str	r9, [sp, #84]	; 0x54
   1311c:	ldr	r9, [sp, #48]	; 0x30
   13120:	b	13270 <__assert_fail@plt+0x22ec>
   13124:	ldr	r0, [sp, #48]	; 0x30
   13128:	bl	10e94 <strlen@plt>
   1312c:	str	r0, [sp, #24]
   13130:	b	13104 <__assert_fail@plt+0x2180>
   13134:	mov	r1, fp
   13138:	ldr	r4, [sp, #88]	; 0x58
   1313c:	mov	r2, r8
   13140:	mov	ip, r8
   13144:	ldr	fp, [sp, #92]	; 0x5c
   13148:	ldr	r8, [sp, #56]	; 0x38
   1314c:	ldr	r9, [sp, #84]	; 0x54
   13150:	ldr	r0, [sp, #24]
   13154:	cmp	r7, r0
   13158:	bcs	13310 <__assert_fail@plt+0x238c>
   1315c:	ldrb	r3, [r1]
   13160:	cmp	r3, #0
   13164:	beq	13318 <__assert_fail@plt+0x2394>
   13168:	mov	r3, r1
   1316c:	add	r2, r2, #1
   13170:	add	r1, r6, r2
   13174:	cmp	r0, r1
   13178:	bls	13320 <__assert_fail@plt+0x239c>
   1317c:	ldrb	r1, [r3, #1]!
   13180:	cmp	r1, #0
   13184:	bne	1316c <__assert_fail@plt+0x21e8>
   13188:	mov	ip, r2
   1318c:	mov	r5, #0
   13190:	b	13340 <__assert_fail@plt+0x23bc>
   13194:	ldr	r3, [sp, #56]	; 0x38
   13198:	str	r3, [sp, #64]	; 0x40
   1319c:	ldr	r8, [sp, #84]	; 0x54
   131a0:	mov	r7, #2
   131a4:	b	136e8 <__assert_fail@plt+0x2764>
   131a8:	cmp	r2, r7
   131ac:	beq	1324c <__assert_fail@plt+0x22c8>
   131b0:	ldrb	r3, [r2], #1
   131b4:	sub	r3, r3, #91	; 0x5b
   131b8:	cmp	r3, #33	; 0x21
   131bc:	ldrls	pc, [pc, r3, lsl #2]
   131c0:	b	131a8 <__assert_fail@plt+0x2224>
   131c4:	muleq	r1, r4, r1
   131c8:	muleq	r1, r4, r1
   131cc:	andeq	r3, r1, r8, lsr #3
   131d0:	muleq	r1, r4, r1
   131d4:	andeq	r3, r1, r8, lsr #3
   131d8:	muleq	r1, r4, r1
   131dc:	andeq	r3, r1, r8, lsr #3
   131e0:	andeq	r3, r1, r8, lsr #3
   131e4:	andeq	r3, r1, r8, lsr #3
   131e8:	andeq	r3, r1, r8, lsr #3
   131ec:	andeq	r3, r1, r8, lsr #3
   131f0:	andeq	r3, r1, r8, lsr #3
   131f4:	andeq	r3, r1, r8, lsr #3
   131f8:	andeq	r3, r1, r8, lsr #3
   131fc:	andeq	r3, r1, r8, lsr #3
   13200:	andeq	r3, r1, r8, lsr #3
   13204:	andeq	r3, r1, r8, lsr #3
   13208:	andeq	r3, r1, r8, lsr #3
   1320c:	andeq	r3, r1, r8, lsr #3
   13210:	andeq	r3, r1, r8, lsr #3
   13214:	andeq	r3, r1, r8, lsr #3
   13218:	andeq	r3, r1, r8, lsr #3
   1321c:	andeq	r3, r1, r8, lsr #3
   13220:	andeq	r3, r1, r8, lsr #3
   13224:	andeq	r3, r1, r8, lsr #3
   13228:	andeq	r3, r1, r8, lsr #3
   1322c:	andeq	r3, r1, r8, lsr #3
   13230:	andeq	r3, r1, r8, lsr #3
   13234:	andeq	r3, r1, r8, lsr #3
   13238:	andeq	r3, r1, r8, lsr #3
   1323c:	andeq	r3, r1, r8, lsr #3
   13240:	andeq	r3, r1, r8, lsr #3
   13244:	andeq	r3, r1, r8, lsr #3
   13248:	muleq	r1, r4, r1
   1324c:	ldr	r0, [sp, #100]	; 0x64
   13250:	bl	10db0 <iswprint@plt>
   13254:	cmp	r0, #0
   13258:	moveq	r5, #0
   1325c:	add	r8, r8, r4
   13260:	add	r0, sp, #104	; 0x68
   13264:	bl	10d68 <mbsinit@plt>
   13268:	cmp	r0, #0
   1326c:	bne	132dc <__assert_fail@plt+0x2358>
   13270:	add	r7, r6, r8
   13274:	add	fp, r9, r7
   13278:	add	r3, sp, #104	; 0x68
   1327c:	ldr	r2, [sp, #24]
   13280:	sub	r2, r2, r7
   13284:	mov	r1, fp
   13288:	add	r0, sp, #100	; 0x64
   1328c:	bl	15b58 <__assert_fail@plt+0x4bd4>
   13290:	subs	r4, r0, #0
   13294:	beq	1332c <__assert_fail@plt+0x23a8>
   13298:	cmn	r4, #1
   1329c:	beq	132f4 <__assert_fail@plt+0x2370>
   132a0:	cmn	r4, #2
   132a4:	beq	13134 <__assert_fail@plt+0x21b0>
   132a8:	ldr	r3, [sp, #32]
   132ac:	cmp	sl, #2
   132b0:	movne	r3, #0
   132b4:	andeq	r3, r3, #1
   132b8:	cmp	r3, #0
   132bc:	beq	1324c <__assert_fail@plt+0x22c8>
   132c0:	cmp	r4, #1
   132c4:	bls	1324c <__assert_fail@plt+0x22c8>
   132c8:	add	r2, r7, #1
   132cc:	add	r2, r9, r2
   132d0:	add	r3, r9, r4
   132d4:	add	r7, r3, r7
   132d8:	b	131b0 <__assert_fail@plt+0x222c>
   132dc:	ldr	r4, [sp, #88]	; 0x58
   132e0:	mov	ip, r8
   132e4:	ldr	fp, [sp, #92]	; 0x5c
   132e8:	ldr	r8, [sp, #56]	; 0x38
   132ec:	ldr	r9, [sp, #84]	; 0x54
   132f0:	b	13340 <__assert_fail@plt+0x23bc>
   132f4:	ldr	r4, [sp, #88]	; 0x58
   132f8:	mov	ip, r8
   132fc:	ldr	fp, [sp, #92]	; 0x5c
   13300:	ldr	r8, [sp, #56]	; 0x38
   13304:	ldr	r9, [sp, #84]	; 0x54
   13308:	mov	r5, #0
   1330c:	b	13340 <__assert_fail@plt+0x23bc>
   13310:	mov	r5, #0
   13314:	b	13340 <__assert_fail@plt+0x23bc>
   13318:	mov	r5, #0
   1331c:	b	13340 <__assert_fail@plt+0x23bc>
   13320:	mov	ip, r2
   13324:	mov	r5, #0
   13328:	b	13340 <__assert_fail@plt+0x23bc>
   1332c:	ldr	r4, [sp, #88]	; 0x58
   13330:	mov	ip, r8
   13334:	ldr	fp, [sp, #92]	; 0x5c
   13338:	ldr	r8, [sp, #56]	; 0x38
   1333c:	ldr	r9, [sp, #84]	; 0x54
   13340:	cmp	ip, #1
   13344:	bls	130d0 <__assert_fail@plt+0x214c>
   13348:	add	lr, r6, ip
   1334c:	ldr	r3, [sp, #48]	; 0x30
   13350:	add	r1, r3, r6
   13354:	mov	r3, #0
   13358:	eor	r0, r5, #1
   1335c:	ldr	r2, [sp, #28]
   13360:	and	r0, r0, r2
   13364:	uxtb	r0, r0
   13368:	str	r0, [sp, #56]	; 0x38
   1336c:	mov	r7, #92	; 0x5c
   13370:	ldr	ip, [sp, #36]	; 0x24
   13374:	str	r5, [sp, #84]	; 0x54
   13378:	ldr	r2, [sp, #44]	; 0x2c
   1337c:	b	133ec <__assert_fail@plt+0x2468>
   13380:	cmp	r2, #0
   13384:	beq	13394 <__assert_fail@plt+0x2410>
   13388:	cmp	r9, fp
   1338c:	strbhi	r7, [r8, fp]
   13390:	add	fp, fp, #1
   13394:	add	r5, r6, #1
   13398:	cmp	r5, lr
   1339c:	bcs	134a8 <__assert_fail@plt+0x2524>
   133a0:	eor	r2, r3, #1
   133a4:	and	r2, r2, ip
   133a8:	ands	r2, r2, #255	; 0xff
   133ac:	beq	134c4 <__assert_fail@plt+0x2540>
   133b0:	cmp	r9, fp
   133b4:	movhi	r2, #39	; 0x27
   133b8:	strbhi	r2, [r8, fp]
   133bc:	add	r2, fp, #1
   133c0:	cmp	r9, r2
   133c4:	movhi	ip, #39	; 0x27
   133c8:	strbhi	ip, [r8, r2]
   133cc:	add	fp, fp, #2
   133d0:	ldr	ip, [sp, #56]	; 0x38
   133d4:	mov	r2, ip
   133d8:	mov	r6, r5
   133dc:	cmp	r9, fp
   133e0:	strbhi	r4, [r8, fp]
   133e4:	add	fp, fp, #1
   133e8:	ldrb	r4, [r1, #1]!
   133ec:	cmp	r0, #0
   133f0:	beq	13380 <__assert_fail@plt+0x23fc>
   133f4:	ldr	r3, [sp, #32]
   133f8:	cmp	r3, #0
   133fc:	bne	13690 <__assert_fail@plt+0x270c>
   13400:	eor	r3, ip, #1
   13404:	cmp	sl, #2
   13408:	movne	r3, #0
   1340c:	andeq	r3, r3, #1
   13410:	cmp	r3, #0
   13414:	beq	1344c <__assert_fail@plt+0x24c8>
   13418:	cmp	r9, fp
   1341c:	movhi	ip, #39	; 0x27
   13420:	strbhi	ip, [r8, fp]
   13424:	add	ip, fp, #1
   13428:	cmp	r9, ip
   1342c:	movhi	r5, #36	; 0x24
   13430:	strbhi	r5, [r8, ip]
   13434:	add	ip, fp, #2
   13438:	cmp	r9, ip
   1343c:	movhi	r5, #39	; 0x27
   13440:	strbhi	r5, [r8, ip]
   13444:	add	fp, fp, #3
   13448:	mov	ip, r3
   1344c:	cmp	r9, fp
   13450:	strbhi	r7, [r8, fp]
   13454:	add	r3, fp, #1
   13458:	cmp	r9, r3
   1345c:	bls	1346c <__assert_fail@plt+0x24e8>
   13460:	lsr	r5, r4, #6
   13464:	add	r5, r5, #48	; 0x30
   13468:	strb	r5, [r8, r3]
   1346c:	add	r3, fp, #2
   13470:	cmp	r9, r3
   13474:	bls	13484 <__assert_fail@plt+0x2500>
   13478:	ubfx	r5, r4, #3, #3
   1347c:	add	r5, r5, #48	; 0x30
   13480:	strb	r5, [r8, r3]
   13484:	add	fp, fp, #3
   13488:	and	r4, r4, #7
   1348c:	add	r4, r4, #48	; 0x30
   13490:	add	r5, r6, #1
   13494:	cmp	r5, lr
   13498:	bcs	134b4 <__assert_fail@plt+0x2530>
   1349c:	ldr	r3, [sp, #56]	; 0x38
   134a0:	mov	r6, r5
   134a4:	b	133dc <__assert_fail@plt+0x2458>
   134a8:	str	ip, [sp, #36]	; 0x24
   134ac:	ldr	r5, [sp, #84]	; 0x54
   134b0:	b	12ee0 <__assert_fail@plt+0x1f5c>
   134b4:	str	ip, [sp, #36]	; 0x24
   134b8:	ldr	r5, [sp, #84]	; 0x54
   134bc:	mov	r3, r0
   134c0:	b	12ee0 <__assert_fail@plt+0x1f5c>
   134c4:	mov	r6, r5
   134c8:	b	133dc <__assert_fail@plt+0x2458>
   134cc:	ldr	r3, [sp, #44]	; 0x2c
   134d0:	b	12b34 <__assert_fail@plt+0x1bb0>
   134d4:	mov	r5, #0
   134d8:	mov	r3, r5
   134dc:	mov	r4, #63	; 0x3f
   134e0:	b	12b34 <__assert_fail@plt+0x1bb0>
   134e4:	mov	r5, #0
   134e8:	mov	r3, r5
   134ec:	mov	r4, #63	; 0x3f
   134f0:	b	12b34 <__assert_fail@plt+0x1bb0>
   134f4:	mov	r5, #0
   134f8:	mov	r3, r5
   134fc:	b	12b34 <__assert_fail@plt+0x1bb0>
   13500:	mov	r5, #0
   13504:	mov	r3, r5
   13508:	b	12b34 <__assert_fail@plt+0x1bb0>
   1350c:	ldr	r5, [sp, #44]	; 0x2c
   13510:	ldr	r3, [sp, #32]
   13514:	b	12b34 <__assert_fail@plt+0x1bb0>
   13518:	ldr	r5, [sp, #44]	; 0x2c
   1351c:	mov	r3, #0
   13520:	str	r3, [sp, #44]	; 0x2c
   13524:	b	12b34 <__assert_fail@plt+0x1bb0>
   13528:	mov	r4, r3
   1352c:	mov	r5, #0
   13530:	b	12b8c <__assert_fail@plt+0x1c08>
   13534:	mov	r5, #0
   13538:	mov	r4, #97	; 0x61
   1353c:	b	12b8c <__assert_fail@plt+0x1c08>
   13540:	mov	r5, #0
   13544:	mov	r3, r5
   13548:	mov	r4, #92	; 0x5c
   1354c:	b	12ee0 <__assert_fail@plt+0x1f5c>
   13550:	ldr	r3, [sp, #48]	; 0x30
   13554:	ldrb	r5, [r3, r6]
   13558:	adds	r5, r5, #0
   1355c:	movne	r5, #1
   13560:	b	12c30 <__assert_fail@plt+0x1cac>
   13564:	cmp	sl, #2
   13568:	movne	r3, #0
   1356c:	moveq	r3, #1
   13570:	ldr	r1, [sp, #32]
   13574:	cmp	fp, #0
   13578:	andeq	r2, r3, r1
   1357c:	movne	r2, #0
   13580:	cmp	r2, #0
   13584:	bne	136a4 <__assert_fail@plt+0x2720>
   13588:	eor	r2, r1, #1
   1358c:	uxtb	r2, r2
   13590:	and	r3, r3, r2
   13594:	ldr	r1, [sp, #68]	; 0x44
   13598:	ands	r3, r1, r3
   1359c:	beq	13630 <__assert_fail@plt+0x26ac>
   135a0:	ldr	r2, [sp, #40]	; 0x28
   135a4:	cmp	r2, #0
   135a8:	bne	135e0 <__assert_fail@plt+0x265c>
   135ac:	ldr	r2, [sp, #72]	; 0x48
   135b0:	adds	r2, r2, #0
   135b4:	movne	r2, #1
   135b8:	cmp	r9, #0
   135bc:	movne	r2, #0
   135c0:	str	r2, [sp, #68]	; 0x44
   135c4:	mov	sl, #2
   135c8:	ldr	r1, [sp, #40]	; 0x28
   135cc:	str	r1, [sp, #32]
   135d0:	cmp	r2, #0
   135d4:	beq	13624 <__assert_fail@plt+0x26a0>
   135d8:	ldr	r9, [sp, #72]	; 0x48
   135dc:	b	12338 <__assert_fail@plt+0x13b4>
   135e0:	ldr	r3, [sp, #168]	; 0xa8
   135e4:	str	r3, [sp, #16]
   135e8:	ldr	r3, [sp, #164]	; 0xa4
   135ec:	str	r3, [sp, #12]
   135f0:	ldr	r3, [sp, #160]	; 0xa0
   135f4:	str	r3, [sp, #8]
   135f8:	ldr	r3, [sp, #156]	; 0x9c
   135fc:	str	r3, [sp, #4]
   13600:	mov	r3, #5
   13604:	str	r3, [sp]
   13608:	ldr	r3, [sp, #24]
   1360c:	ldr	r2, [sp, #48]	; 0x30
   13610:	ldr	r1, [sp, #72]	; 0x48
   13614:	ldr	r0, [sp, #64]	; 0x40
   13618:	bl	122c0 <__assert_fail@plt+0x133c>
   1361c:	mov	fp, r0
   13620:	b	13740 <__assert_fail@plt+0x27bc>
   13624:	mov	r8, r9
   13628:	mov	r2, r3
   1362c:	b	13634 <__assert_fail@plt+0x26b0>
   13630:	mov	r8, r9
   13634:	ldr	r3, [sp, #60]	; 0x3c
   13638:	cmp	r3, #0
   1363c:	moveq	r2, #0
   13640:	andne	r2, r2, #1
   13644:	cmp	r2, #0
   13648:	beq	13678 <__assert_fail@plt+0x26f4>
   1364c:	mov	r2, r3
   13650:	ldrb	r3, [r3]
   13654:	cmp	r3, #0
   13658:	beq	13678 <__assert_fail@plt+0x26f4>
   1365c:	ldr	r1, [sp, #64]	; 0x40
   13660:	cmp	r8, fp
   13664:	strbhi	r3, [r1, fp]
   13668:	add	fp, fp, #1
   1366c:	ldrb	r3, [r2, #1]!
   13670:	cmp	r3, #0
   13674:	bne	13660 <__assert_fail@plt+0x26dc>
   13678:	cmp	r8, fp
   1367c:	bls	13740 <__assert_fail@plt+0x27bc>
   13680:	mov	r3, #0
   13684:	ldr	r2, [sp, #64]	; 0x40
   13688:	strb	r3, [r2, fp]
   1368c:	b	13740 <__assert_fail@plt+0x27bc>
   13690:	mov	r8, r9
   13694:	mov	r7, sl
   13698:	ldr	r3, [sp, #32]
   1369c:	str	r3, [sp, #28]
   136a0:	b	136e8 <__assert_fail@plt+0x2764>
   136a4:	mov	r8, r9
   136a8:	mov	r7, #2
   136ac:	b	136e8 <__assert_fail@plt+0x2764>
   136b0:	mov	r8, r9
   136b4:	mov	r7, sl
   136b8:	b	136e8 <__assert_fail@plt+0x2764>
   136bc:	mov	r8, r9
   136c0:	mov	r7, sl
   136c4:	b	136e8 <__assert_fail@plt+0x2764>
   136c8:	mov	r8, r9
   136cc:	mov	r7, sl
   136d0:	b	136e8 <__assert_fail@plt+0x2764>
   136d4:	mov	r8, r9
   136d8:	mov	r7, sl
   136dc:	b	136e8 <__assert_fail@plt+0x2764>
   136e0:	mov	r8, r9
   136e4:	mov	r7, sl
   136e8:	ldr	r3, [sp, #28]
   136ec:	cmp	r7, #2
   136f0:	movne	r3, #0
   136f4:	andeq	r3, r3, #1
   136f8:	cmp	r3, #0
   136fc:	movne	r7, #4
   13700:	ldr	r3, [sp, #168]	; 0xa8
   13704:	str	r3, [sp, #16]
   13708:	ldr	r3, [sp, #164]	; 0xa4
   1370c:	str	r3, [sp, #12]
   13710:	mov	r3, #0
   13714:	str	r3, [sp, #8]
   13718:	ldr	r3, [sp, #156]	; 0x9c
   1371c:	bic	r3, r3, #2
   13720:	str	r3, [sp, #4]
   13724:	str	r7, [sp]
   13728:	ldr	r3, [sp, #24]
   1372c:	ldr	r2, [sp, #48]	; 0x30
   13730:	mov	r1, r8
   13734:	ldr	r0, [sp, #64]	; 0x40
   13738:	bl	122c0 <__assert_fail@plt+0x133c>
   1373c:	mov	fp, r0
   13740:	mov	r0, fp
   13744:	add	sp, sp, #116	; 0x74
   13748:	ldrd	r4, [sp]
   1374c:	ldrd	r6, [sp, #8]
   13750:	ldrd	r8, [sp, #16]
   13754:	ldrd	sl, [sp, #24]
   13758:	add	sp, sp, #32
   1375c:	pop	{pc}		; (ldr pc, [sp], #4)
   13760:	mov	r8, r9
   13764:	mov	r7, sl
   13768:	b	13700 <__assert_fail@plt+0x277c>
   1376c:	add	fp, fp, #4
   13770:	str	r3, [sp, #36]	; 0x24
   13774:	mov	r5, #0
   13778:	mov	r4, #48	; 0x30
   1377c:	b	12b34 <__assert_fail@plt+0x1bb0>
   13780:	mov	r3, #1
   13784:	str	r3, [sp, #32]
   13788:	str	r3, [sp, #28]
   1378c:	str	r3, [sp, #52]	; 0x34
   13790:	movw	r3, #26504	; 0x6788
   13794:	movt	r3, #1
   13798:	str	r3, [sp, #60]	; 0x3c
   1379c:	mov	fp, #0
   137a0:	mov	sl, #5
   137a4:	b	12398 <__assert_fail@plt+0x1414>
   137a8:	ldr	r3, [sp, #48]	; 0x30
   137ac:	ldrb	r4, [r3, r6]
   137b0:	cmp	r4, #126	; 0x7e
   137b4:	ldrls	pc, [pc, r4, lsl #2]
   137b8:	b	130a4 <__assert_fail@plt+0x2120>
   137bc:	andeq	r2, r1, ip, lsr #16
   137c0:	andeq	r3, r1, r4, lsr #1
   137c4:	andeq	r3, r1, r4, lsr #1
   137c8:	andeq	r3, r1, r4, lsr #1
   137cc:	andeq	r3, r1, r4, lsr #1
   137d0:	andeq	r3, r1, r4, lsr #1
   137d4:	andeq	r3, r1, r4, lsr #1
   137d8:	andeq	r3, r1, r4, lsr r5
   137dc:	ldrdeq	r2, [r1], -r0
   137e0:	andeq	r2, r1, r4, ror lr
   137e4:	andeq	r2, r1, r0, lsr pc
   137e8:	andeq	r2, r1, r8, lsl #29
   137ec:	andeq	r2, r1, r4, ror #21
   137f0:	strdeq	r2, [r1], -r8
   137f4:	andeq	r3, r1, r4, lsr #1
   137f8:	andeq	r3, r1, r4, lsr #1
   137fc:	andeq	r3, r1, r4, lsr #1
   13800:	andeq	r3, r1, r4, lsr #1
   13804:	andeq	r3, r1, r4, lsr #1
   13808:	andeq	r3, r1, r4, lsr #1
   1380c:	andeq	r3, r1, r4, lsr #1
   13810:	andeq	r3, r1, r4, lsr #1
   13814:	andeq	r3, r1, r4, lsr #1
   13818:	andeq	r3, r1, r4, lsr #1
   1381c:	andeq	r3, r1, r4, lsr #1
   13820:	andeq	r3, r1, r4, lsr #1
   13824:	andeq	r3, r1, r4, lsr #1
   13828:	andeq	r3, r1, r4, lsr #1
   1382c:	andeq	r3, r1, r4, lsr #1
   13830:	andeq	r3, r1, r4, lsr #1
   13834:	andeq	r3, r1, r4, lsr #1
   13838:	andeq	r3, r1, r4, lsr #1
   1383c:			; <UNDEFINED> instruction: 0x00012fb8
   13840:	strdeq	r2, [r1], -r4
   13844:	strdeq	r2, [r1], -r4
   13848:	andeq	r2, r1, ip, lsr #31
   1384c:	strdeq	r2, [r1], -r4
   13850:	andeq	r3, r1, r8, lsl r5
   13854:	strdeq	r2, [r1], -r4
   13858:	andeq	r3, r1, r4
   1385c:	strdeq	r2, [r1], -r4
   13860:	strdeq	r2, [r1], -r4
   13864:	strdeq	r2, [r1], -r4
   13868:	andeq	r3, r1, r8, lsl r5
   1386c:	andeq	r3, r1, r8, lsl r5
   13870:	andeq	r3, r1, r8, lsl r5
   13874:	andeq	r3, r1, r8, lsl r5
   13878:	andeq	r3, r1, r8, lsl r5
   1387c:	andeq	r3, r1, r8, lsl r5
   13880:	andeq	r3, r1, r8, lsl r5
   13884:	andeq	r3, r1, r8, lsl r5
   13888:	andeq	r3, r1, r8, lsl r5
   1388c:	andeq	r3, r1, r8, lsl r5
   13890:	andeq	r3, r1, r8, lsl r5
   13894:	andeq	r3, r1, r8, lsl r5
   13898:	andeq	r3, r1, r8, lsl r5
   1389c:	andeq	r3, r1, r8, lsl r5
   138a0:	andeq	r3, r1, r8, lsl r5
   138a4:	andeq	r3, r1, r8, lsl r5
   138a8:	strdeq	r2, [r1], -r4
   138ac:	strdeq	r2, [r1], -r4
   138b0:	strdeq	r2, [r1], -r4
   138b4:	strdeq	r2, [r1], -r4
   138b8:	andeq	r2, r1, r4, ror #18
   138bc:	andeq	r3, r1, r4, lsr #1
   138c0:	andeq	r3, r1, r8, lsl r5
   138c4:	andeq	r3, r1, r8, lsl r5
   138c8:	andeq	r3, r1, r8, lsl r5
   138cc:	andeq	r3, r1, r8, lsl r5
   138d0:	andeq	r3, r1, r8, lsl r5
   138d4:	andeq	r3, r1, r8, lsl r5
   138d8:	andeq	r3, r1, r8, lsl r5
   138dc:	andeq	r3, r1, r8, lsl r5
   138e0:	andeq	r3, r1, r8, lsl r5
   138e4:	andeq	r3, r1, r8, lsl r5
   138e8:	andeq	r3, r1, r8, lsl r5
   138ec:	andeq	r3, r1, r8, lsl r5
   138f0:	andeq	r3, r1, r8, lsl r5
   138f4:	andeq	r3, r1, r8, lsl r5
   138f8:	andeq	r3, r1, r8, lsl r5
   138fc:	andeq	r3, r1, r8, lsl r5
   13900:	andeq	r3, r1, r8, lsl r5
   13904:	andeq	r3, r1, r8, lsl r5
   13908:	andeq	r3, r1, r8, lsl r5
   1390c:	andeq	r3, r1, r8, lsl r5
   13910:	andeq	r3, r1, r8, lsl r5
   13914:	andeq	r3, r1, r8, lsl r5
   13918:	andeq	r3, r1, r8, lsl r5
   1391c:	andeq	r3, r1, r8, lsl r5
   13920:	andeq	r3, r1, r8, lsl r5
   13924:	andeq	r3, r1, r8, lsl r5
   13928:	strdeq	r2, [r1], -r4
   1392c:	muleq	r1, ip, lr
   13930:	andeq	r3, r1, r8, lsl r5
   13934:	strdeq	r2, [r1], -r4
   13938:	andeq	r3, r1, r8, lsl r5
   1393c:	strdeq	r2, [r1], -r4
   13940:	andeq	r3, r1, r8, lsl r5
   13944:	andeq	r3, r1, r8, lsl r5
   13948:	andeq	r3, r1, r8, lsl r5
   1394c:	andeq	r3, r1, r8, lsl r5
   13950:	andeq	r3, r1, r8, lsl r5
   13954:	andeq	r3, r1, r8, lsl r5
   13958:	andeq	r3, r1, r8, lsl r5
   1395c:	andeq	r3, r1, r8, lsl r5
   13960:	andeq	r3, r1, r8, lsl r5
   13964:	andeq	r3, r1, r8, lsl r5
   13968:	andeq	r3, r1, r8, lsl r5
   1396c:	andeq	r3, r1, r8, lsl r5
   13970:	andeq	r3, r1, r8, lsl r5
   13974:	andeq	r3, r1, r8, lsl r5
   13978:	andeq	r3, r1, r8, lsl r5
   1397c:	andeq	r3, r1, r8, lsl r5
   13980:	andeq	r3, r1, r8, lsl r5
   13984:	andeq	r3, r1, r8, lsl r5
   13988:	andeq	r3, r1, r8, lsl r5
   1398c:	andeq	r3, r1, r8, lsl r5
   13990:	andeq	r3, r1, r8, lsl r5
   13994:	andeq	r3, r1, r8, lsl r5
   13998:	andeq	r3, r1, r8, lsl r5
   1399c:	andeq	r3, r1, r8, lsl r5
   139a0:	andeq	r3, r1, r8, lsl r5
   139a4:	andeq	r3, r1, r8, lsl r5
   139a8:	andeq	r2, r1, ip, asr pc
   139ac:	strdeq	r2, [r1], -r4
   139b0:	andeq	r2, r1, ip, asr pc
   139b4:	andeq	r2, r1, ip, lsr #31
   139b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   139bc:	strd	r6, [sp, #8]
   139c0:	strd	r8, [sp, #16]
   139c4:	strd	sl, [sp, #24]
   139c8:	str	lr, [sp, #32]
   139cc:	sub	sp, sp, #52	; 0x34
   139d0:	mov	r5, r0
   139d4:	str	r1, [sp, #24]
   139d8:	str	r2, [sp, #28]
   139dc:	mov	r4, r3
   139e0:	bl	10eac <__errno_location@plt>
   139e4:	str	r0, [sp, #32]
   139e8:	ldr	r3, [r0]
   139ec:	str	r3, [sp, #36]	; 0x24
   139f0:	movw	r3, #28924	; 0x70fc
   139f4:	movt	r3, #2
   139f8:	ldr	r6, [r3]
   139fc:	cmn	r5, #-2147483647	; 0x80000001
   13a00:	movne	r3, #0
   13a04:	moveq	r3, #1
   13a08:	orrs	r3, r3, r5, lsr #31
   13a0c:	bne	13b70 <__assert_fail@plt+0x2bec>
   13a10:	movw	r3, #28924	; 0x70fc
   13a14:	movt	r3, #2
   13a18:	ldr	r2, [r3, #4]
   13a1c:	cmp	r2, r5
   13a20:	bgt	13a90 <__assert_fail@plt+0x2b0c>
   13a24:	str	r2, [sp, #44]	; 0x2c
   13a28:	add	r3, r3, #8
   13a2c:	cmp	r6, r3
   13a30:	beq	13b74 <__assert_fail@plt+0x2bf0>
   13a34:	sub	r2, r5, r2
   13a38:	mov	r3, #8
   13a3c:	str	r3, [sp]
   13a40:	mvn	r3, #-2147483648	; 0x80000000
   13a44:	add	r2, r2, #1
   13a48:	add	r1, sp, #44	; 0x2c
   13a4c:	mov	r0, r6
   13a50:	bl	14b78 <__assert_fail@plt+0x3bf4>
   13a54:	mov	r6, r0
   13a58:	movw	r3, #28924	; 0x70fc
   13a5c:	movt	r3, #2
   13a60:	str	r0, [r3]
   13a64:	movw	r7, #28924	; 0x70fc
   13a68:	movt	r7, #2
   13a6c:	ldr	r0, [r7, #4]
   13a70:	ldr	r2, [sp, #44]	; 0x2c
   13a74:	sub	r2, r2, r0
   13a78:	lsl	r2, r2, #3
   13a7c:	mov	r1, #0
   13a80:	add	r0, r6, r0, lsl #3
   13a84:	bl	10ec4 <memset@plt>
   13a88:	ldr	r3, [sp, #44]	; 0x2c
   13a8c:	str	r3, [r7, #4]
   13a90:	add	fp, r6, r5, lsl #3
   13a94:	ldr	r8, [r6, r5, lsl #3]
   13a98:	ldr	r7, [fp, #4]
   13a9c:	ldr	r3, [r4, #4]
   13aa0:	orr	r9, r3, #1
   13aa4:	add	sl, r4, #8
   13aa8:	ldr	r3, [r4, #44]	; 0x2c
   13aac:	str	r3, [sp, #16]
   13ab0:	ldr	r3, [r4, #40]	; 0x28
   13ab4:	str	r3, [sp, #12]
   13ab8:	str	sl, [sp, #8]
   13abc:	str	r9, [sp, #4]
   13ac0:	ldr	r3, [r4]
   13ac4:	str	r3, [sp]
   13ac8:	ldr	r3, [sp, #28]
   13acc:	ldr	r2, [sp, #24]
   13ad0:	mov	r1, r8
   13ad4:	mov	r0, r7
   13ad8:	bl	122c0 <__assert_fail@plt+0x133c>
   13adc:	cmp	r8, r0
   13ae0:	bhi	13b44 <__assert_fail@plt+0x2bc0>
   13ae4:	add	r8, r0, #1
   13ae8:	str	r8, [r6, r5, lsl #3]
   13aec:	movw	r3, #29076	; 0x7194
   13af0:	movt	r3, #2
   13af4:	cmp	r7, r3
   13af8:	beq	13b04 <__assert_fail@plt+0x2b80>
   13afc:	mov	r0, r7
   13b00:	bl	11ffc <__assert_fail@plt+0x1078>
   13b04:	mov	r0, r8
   13b08:	bl	14974 <__assert_fail@plt+0x39f0>
   13b0c:	mov	r7, r0
   13b10:	str	r0, [fp, #4]
   13b14:	ldr	r3, [r4, #44]	; 0x2c
   13b18:	str	r3, [sp, #16]
   13b1c:	ldr	r3, [r4, #40]	; 0x28
   13b20:	str	r3, [sp, #12]
   13b24:	str	sl, [sp, #8]
   13b28:	str	r9, [sp, #4]
   13b2c:	ldr	r3, [r4]
   13b30:	str	r3, [sp]
   13b34:	ldr	r3, [sp, #28]
   13b38:	ldr	r2, [sp, #24]
   13b3c:	mov	r1, r8
   13b40:	bl	122c0 <__assert_fail@plt+0x133c>
   13b44:	ldr	r3, [sp, #32]
   13b48:	ldr	r2, [sp, #36]	; 0x24
   13b4c:	str	r2, [r3]
   13b50:	mov	r0, r7
   13b54:	add	sp, sp, #52	; 0x34
   13b58:	ldrd	r4, [sp]
   13b5c:	ldrd	r6, [sp, #8]
   13b60:	ldrd	r8, [sp, #16]
   13b64:	ldrd	sl, [sp, #24]
   13b68:	add	sp, sp, #32
   13b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b70:	bl	10f78 <abort@plt>
   13b74:	sub	r2, r5, r2
   13b78:	mov	r3, #8
   13b7c:	str	r3, [sp]
   13b80:	mvn	r3, #-2147483648	; 0x80000000
   13b84:	add	r2, r2, #1
   13b88:	add	r1, sp, #44	; 0x2c
   13b8c:	mov	r0, #0
   13b90:	bl	14b78 <__assert_fail@plt+0x3bf4>
   13b94:	mov	r6, r0
   13b98:	movw	r3, #28924	; 0x70fc
   13b9c:	movt	r3, #2
   13ba0:	str	r0, [r3]
   13ba4:	ldrd	r2, [r3, #8]
   13ba8:	strd	r2, [r0]
   13bac:	b	13a64 <__assert_fail@plt+0x2ae0>
   13bb0:	strd	r4, [sp, #-16]!
   13bb4:	str	r6, [sp, #8]
   13bb8:	str	lr, [sp, #12]
   13bbc:	mov	r4, r0
   13bc0:	bl	10eac <__errno_location@plt>
   13bc4:	mov	r5, r0
   13bc8:	ldr	r6, [r0]
   13bcc:	cmp	r4, #0
   13bd0:	ldr	r3, [pc, #32]	; 13bf8 <__assert_fail@plt+0x2c74>
   13bd4:	moveq	r4, r3
   13bd8:	mov	r1, #48	; 0x30
   13bdc:	mov	r0, r4
   13be0:	bl	14ce8 <__assert_fail@plt+0x3d64>
   13be4:	str	r6, [r5]
   13be8:	ldrd	r4, [sp]
   13bec:	ldr	r6, [sp, #8]
   13bf0:	add	sp, sp, #12
   13bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf8:	muleq	r2, r4, r2
   13bfc:	subs	r3, r0, #0
   13c00:	ldr	r2, [pc, #8]	; 13c10 <__assert_fail@plt+0x2c8c>
   13c04:	moveq	r3, r2
   13c08:	ldr	r0, [r3]
   13c0c:	bx	lr
   13c10:	muleq	r2, r4, r2
   13c14:	subs	r3, r0, #0
   13c18:	ldr	r2, [pc, #8]	; 13c28 <__assert_fail@plt+0x2ca4>
   13c1c:	moveq	r3, r2
   13c20:	str	r1, [r3]
   13c24:	bx	lr
   13c28:	muleq	r2, r4, r2
   13c2c:	push	{lr}		; (str lr, [sp, #-4]!)
   13c30:	subs	r3, r0, #0
   13c34:	ldr	r0, [pc, #44]	; 13c68 <__assert_fail@plt+0x2ce4>
   13c38:	moveq	r3, r0
   13c3c:	add	r3, r3, #8
   13c40:	lsr	lr, r1, #5
   13c44:	and	r1, r1, #31
   13c48:	ldr	ip, [r3, lr, lsl #2]
   13c4c:	lsr	r0, ip, r1
   13c50:	eor	r2, r2, r0
   13c54:	and	r2, r2, #1
   13c58:	eor	r1, ip, r2, lsl r1
   13c5c:	str	r1, [r3, lr, lsl #2]
   13c60:	and	r0, r0, #1
   13c64:	pop	{pc}		; (ldr pc, [sp], #4)
   13c68:	muleq	r2, r4, r2
   13c6c:	subs	r3, r0, #0
   13c70:	ldr	r2, [pc, #12]	; 13c84 <__assert_fail@plt+0x2d00>
   13c74:	moveq	r3, r2
   13c78:	ldr	r0, [r3, #4]
   13c7c:	str	r1, [r3, #4]
   13c80:	bx	lr
   13c84:	muleq	r2, r4, r2
   13c88:	subs	r3, r0, #0
   13c8c:	ldr	r0, [pc, #44]	; 13cc0 <__assert_fail@plt+0x2d3c>
   13c90:	moveq	r3, r0
   13c94:	mov	r0, #10
   13c98:	str	r0, [r3]
   13c9c:	cmp	r2, #0
   13ca0:	cmpne	r1, #0
   13ca4:	beq	13cb4 <__assert_fail@plt+0x2d30>
   13ca8:	str	r1, [r3, #40]	; 0x28
   13cac:	str	r2, [r3, #44]	; 0x2c
   13cb0:	bx	lr
   13cb4:	str	r4, [sp, #-8]!
   13cb8:	str	lr, [sp, #4]
   13cbc:	bl	10f78 <abort@plt>
   13cc0:	muleq	r2, r4, r2
   13cc4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13cc8:	strd	r6, [sp, #8]
   13ccc:	strd	r8, [sp, #16]
   13cd0:	str	sl, [sp, #24]
   13cd4:	str	lr, [sp, #28]
   13cd8:	sub	sp, sp, #24
   13cdc:	mov	r7, r0
   13ce0:	mov	r8, r1
   13ce4:	mov	r9, r2
   13ce8:	mov	sl, r3
   13cec:	ldr	r4, [sp, #56]	; 0x38
   13cf0:	cmp	r4, #0
   13cf4:	ldr	r3, [pc, #104]	; 13d64 <__assert_fail@plt+0x2de0>
   13cf8:	moveq	r4, r3
   13cfc:	bl	10eac <__errno_location@plt>
   13d00:	mov	r5, r0
   13d04:	ldr	r6, [r0]
   13d08:	ldr	r3, [r4, #44]	; 0x2c
   13d0c:	str	r3, [sp, #16]
   13d10:	ldr	r3, [r4, #40]	; 0x28
   13d14:	str	r3, [sp, #12]
   13d18:	add	r3, r4, #8
   13d1c:	str	r3, [sp, #8]
   13d20:	ldr	r3, [r4, #4]
   13d24:	str	r3, [sp, #4]
   13d28:	ldr	r3, [r4]
   13d2c:	str	r3, [sp]
   13d30:	mov	r3, sl
   13d34:	mov	r2, r9
   13d38:	mov	r1, r8
   13d3c:	mov	r0, r7
   13d40:	bl	122c0 <__assert_fail@plt+0x133c>
   13d44:	str	r6, [r5]
   13d48:	add	sp, sp, #24
   13d4c:	ldrd	r4, [sp]
   13d50:	ldrd	r6, [sp, #8]
   13d54:	ldrd	r8, [sp, #16]
   13d58:	ldr	sl, [sp, #24]
   13d5c:	add	sp, sp, #28
   13d60:	pop	{pc}		; (ldr pc, [sp], #4)
   13d64:	muleq	r2, r4, r2
   13d68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d6c:	strd	r6, [sp, #8]
   13d70:	strd	r8, [sp, #16]
   13d74:	strd	sl, [sp, #24]
   13d78:	str	lr, [sp, #32]
   13d7c:	sub	sp, sp, #44	; 0x2c
   13d80:	mov	r8, r0
   13d84:	mov	sl, r1
   13d88:	mov	r6, r2
   13d8c:	subs	r4, r3, #0
   13d90:	ldr	r3, [pc, #200]	; 13e60 <__assert_fail@plt+0x2edc>
   13d94:	moveq	r4, r3
   13d98:	bl	10eac <__errno_location@plt>
   13d9c:	mov	r7, r0
   13da0:	ldr	fp, [r0]
   13da4:	ldr	r5, [r4, #4]
   13da8:	cmp	r6, #0
   13dac:	orreq	r5, r5, #1
   13db0:	add	r9, r4, #8
   13db4:	ldr	r3, [r4, #44]	; 0x2c
   13db8:	str	r3, [sp, #16]
   13dbc:	ldr	r3, [r4, #40]	; 0x28
   13dc0:	str	r3, [sp, #12]
   13dc4:	str	r9, [sp, #8]
   13dc8:	str	r5, [sp, #4]
   13dcc:	ldr	r3, [r4]
   13dd0:	str	r3, [sp]
   13dd4:	str	sl, [sp, #36]	; 0x24
   13dd8:	mov	r3, sl
   13ddc:	str	r8, [sp, #32]
   13de0:	mov	r2, r8
   13de4:	mov	r1, #0
   13de8:	mov	r0, r1
   13dec:	bl	122c0 <__assert_fail@plt+0x133c>
   13df0:	mov	sl, r0
   13df4:	add	r8, r0, #1
   13df8:	mov	r0, r8
   13dfc:	bl	14974 <__assert_fail@plt+0x39f0>
   13e00:	str	r0, [sp, #28]
   13e04:	ldr	r3, [r4, #44]	; 0x2c
   13e08:	str	r3, [sp, #16]
   13e0c:	ldr	r3, [r4, #40]	; 0x28
   13e10:	str	r3, [sp, #12]
   13e14:	str	r9, [sp, #8]
   13e18:	str	r5, [sp, #4]
   13e1c:	ldr	r3, [r4]
   13e20:	str	r3, [sp]
   13e24:	ldr	r3, [sp, #36]	; 0x24
   13e28:	ldr	r2, [sp, #32]
   13e2c:	mov	r1, r8
   13e30:	bl	122c0 <__assert_fail@plt+0x133c>
   13e34:	str	fp, [r7]
   13e38:	cmp	r6, #0
   13e3c:	strne	sl, [r6]
   13e40:	ldr	r0, [sp, #28]
   13e44:	add	sp, sp, #44	; 0x2c
   13e48:	ldrd	r4, [sp]
   13e4c:	ldrd	r6, [sp, #8]
   13e50:	ldrd	r8, [sp, #16]
   13e54:	ldrd	sl, [sp, #24]
   13e58:	add	sp, sp, #32
   13e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e60:	muleq	r2, r4, r2
   13e64:	str	r4, [sp, #-8]!
   13e68:	str	lr, [sp, #4]
   13e6c:	mov	r3, r2
   13e70:	mov	r2, #0
   13e74:	bl	13d68 <__assert_fail@plt+0x2de4>
   13e78:	ldr	r4, [sp]
   13e7c:	add	sp, sp, #4
   13e80:	pop	{pc}		; (ldr pc, [sp], #4)
   13e84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13e88:	strd	r6, [sp, #8]
   13e8c:	str	r8, [sp, #16]
   13e90:	str	lr, [sp, #20]
   13e94:	movw	r3, #28924	; 0x70fc
   13e98:	movt	r3, #2
   13e9c:	ldr	r7, [r3]
   13ea0:	ldr	r3, [r3, #4]
   13ea4:	cmp	r3, #1
   13ea8:	ble	13ed4 <__assert_fail@plt+0x2f50>
   13eac:	mov	r4, #1
   13eb0:	add	r6, r7, #4
   13eb4:	movw	r5, #28924	; 0x70fc
   13eb8:	movt	r5, #2
   13ebc:	ldr	r0, [r6, r4, lsl #3]
   13ec0:	bl	11ffc <__assert_fail@plt+0x1078>
   13ec4:	add	r4, r4, #1
   13ec8:	ldr	r3, [r5, #4]
   13ecc:	cmp	r3, r4
   13ed0:	bgt	13ebc <__assert_fail@plt+0x2f38>
   13ed4:	ldr	r0, [r7, #4]
   13ed8:	movw	r3, #29076	; 0x7194
   13edc:	movt	r3, #2
   13ee0:	cmp	r0, r3
   13ee4:	beq	13f08 <__assert_fail@plt+0x2f84>
   13ee8:	bl	11ffc <__assert_fail@plt+0x1078>
   13eec:	movw	r3, #28924	; 0x70fc
   13ef0:	movt	r3, #2
   13ef4:	mov	r2, #256	; 0x100
   13ef8:	str	r2, [r3, #8]
   13efc:	movw	r2, #29076	; 0x7194
   13f00:	movt	r2, #2
   13f04:	str	r2, [r3, #12]
   13f08:	ldr	r3, [pc, #64]	; 13f50 <__assert_fail@plt+0x2fcc>
   13f0c:	cmp	r7, r3
   13f10:	beq	13f2c <__assert_fail@plt+0x2fa8>
   13f14:	mov	r0, r7
   13f18:	bl	11ffc <__assert_fail@plt+0x1078>
   13f1c:	movw	r3, #28924	; 0x70fc
   13f20:	movt	r3, #2
   13f24:	add	r2, r3, #8
   13f28:	str	r2, [r3]
   13f2c:	movw	r3, #28924	; 0x70fc
   13f30:	movt	r3, #2
   13f34:	mov	r2, #1
   13f38:	str	r2, [r3, #4]
   13f3c:	ldrd	r4, [sp]
   13f40:	ldrd	r6, [sp, #8]
   13f44:	ldr	r8, [sp, #16]
   13f48:	add	sp, sp, #20
   13f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f50:	andeq	r7, r2, r4, lsl #2
   13f54:	str	r4, [sp, #-8]!
   13f58:	str	lr, [sp, #4]
   13f5c:	ldr	r3, [pc, #16]	; 13f74 <__assert_fail@plt+0x2ff0>
   13f60:	mvn	r2, #0
   13f64:	bl	139b8 <__assert_fail@plt+0x2a34>
   13f68:	ldr	r4, [sp]
   13f6c:	add	sp, sp, #4
   13f70:	pop	{pc}		; (ldr pc, [sp], #4)
   13f74:	muleq	r2, r4, r2
   13f78:	str	r4, [sp, #-8]!
   13f7c:	str	lr, [sp, #4]
   13f80:	ldr	r3, [pc, #12]	; 13f94 <__assert_fail@plt+0x3010>
   13f84:	bl	139b8 <__assert_fail@plt+0x2a34>
   13f88:	ldr	r4, [sp]
   13f8c:	add	sp, sp, #4
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	muleq	r2, r4, r2
   13f98:	str	r4, [sp, #-8]!
   13f9c:	str	lr, [sp, #4]
   13fa0:	mov	r1, r0
   13fa4:	mov	r0, #0
   13fa8:	bl	13f54 <__assert_fail@plt+0x2fd0>
   13fac:	ldr	r4, [sp]
   13fb0:	add	sp, sp, #4
   13fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb8:	str	r4, [sp, #-8]!
   13fbc:	str	lr, [sp, #4]
   13fc0:	mov	r2, r1
   13fc4:	mov	r1, r0
   13fc8:	mov	r0, #0
   13fcc:	bl	13f78 <__assert_fail@plt+0x2ff4>
   13fd0:	ldr	r4, [sp]
   13fd4:	add	sp, sp, #4
   13fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fdc:	strd	r4, [sp, #-12]!
   13fe0:	str	lr, [sp, #8]
   13fe4:	sub	sp, sp, #52	; 0x34
   13fe8:	mov	r4, r0
   13fec:	mov	r5, r2
   13ff0:	mov	r0, sp
   13ff4:	bl	1212c <__assert_fail@plt+0x11a8>
   13ff8:	mov	r3, sp
   13ffc:	mvn	r2, #0
   14000:	mov	r1, r5
   14004:	mov	r0, r4
   14008:	bl	139b8 <__assert_fail@plt+0x2a34>
   1400c:	add	sp, sp, #52	; 0x34
   14010:	ldrd	r4, [sp]
   14014:	add	sp, sp, #8
   14018:	pop	{pc}		; (ldr pc, [sp], #4)
   1401c:	strd	r4, [sp, #-16]!
   14020:	str	r6, [sp, #8]
   14024:	str	lr, [sp, #12]
   14028:	sub	sp, sp, #48	; 0x30
   1402c:	mov	r4, r0
   14030:	mov	r5, r2
   14034:	mov	r6, r3
   14038:	mov	r0, sp
   1403c:	bl	1212c <__assert_fail@plt+0x11a8>
   14040:	mov	r3, sp
   14044:	mov	r2, r6
   14048:	mov	r1, r5
   1404c:	mov	r0, r4
   14050:	bl	139b8 <__assert_fail@plt+0x2a34>
   14054:	add	sp, sp, #48	; 0x30
   14058:	ldrd	r4, [sp]
   1405c:	ldr	r6, [sp, #8]
   14060:	add	sp, sp, #12
   14064:	pop	{pc}		; (ldr pc, [sp], #4)
   14068:	str	r4, [sp, #-8]!
   1406c:	str	lr, [sp, #4]
   14070:	mov	r2, r1
   14074:	mov	r1, r0
   14078:	mov	r0, #0
   1407c:	bl	13fdc <__assert_fail@plt+0x3058>
   14080:	ldr	r4, [sp]
   14084:	add	sp, sp, #4
   14088:	pop	{pc}		; (ldr pc, [sp], #4)
   1408c:	str	r4, [sp, #-8]!
   14090:	str	lr, [sp, #4]
   14094:	mov	r3, r2
   14098:	mov	r2, r1
   1409c:	mov	r1, r0
   140a0:	mov	r0, #0
   140a4:	bl	1401c <__assert_fail@plt+0x3098>
   140a8:	ldr	r4, [sp]
   140ac:	add	sp, sp, #4
   140b0:	pop	{pc}		; (ldr pc, [sp], #4)
   140b4:	strd	r4, [sp, #-12]!
   140b8:	str	lr, [sp, #8]
   140bc:	sub	sp, sp, #52	; 0x34
   140c0:	mov	r4, r0
   140c4:	mov	r5, r1
   140c8:	mov	r1, r2
   140cc:	ldr	r0, [pc, #92]	; 14130 <__assert_fail@plt+0x31ac>
   140d0:	ldrd	r2, [r0]
   140d4:	strd	r2, [sp]
   140d8:	ldrd	r2, [r0, #8]
   140dc:	strd	r2, [sp, #8]
   140e0:	ldrd	r2, [r0, #16]
   140e4:	strd	r2, [sp, #16]
   140e8:	ldrd	r2, [r0, #24]
   140ec:	strd	r2, [sp, #24]
   140f0:	ldrd	r2, [r0, #32]
   140f4:	strd	r2, [sp, #32]
   140f8:	ldrd	r2, [r0, #40]	; 0x28
   140fc:	strd	r2, [sp, #40]	; 0x28
   14100:	mov	r2, #1
   14104:	mov	r0, sp
   14108:	bl	13c2c <__assert_fail@plt+0x2ca8>
   1410c:	mov	r3, sp
   14110:	mov	r2, r5
   14114:	mov	r1, r4
   14118:	mov	r0, #0
   1411c:	bl	139b8 <__assert_fail@plt+0x2a34>
   14120:	add	sp, sp, #52	; 0x34
   14124:	ldrd	r4, [sp]
   14128:	add	sp, sp, #8
   1412c:	pop	{pc}		; (ldr pc, [sp], #4)
   14130:	muleq	r2, r4, r2
   14134:	str	r4, [sp, #-8]!
   14138:	str	lr, [sp, #4]
   1413c:	mov	r2, r1
   14140:	mvn	r1, #0
   14144:	bl	140b4 <__assert_fail@plt+0x3130>
   14148:	ldr	r4, [sp]
   1414c:	add	sp, sp, #4
   14150:	pop	{pc}		; (ldr pc, [sp], #4)
   14154:	str	r4, [sp, #-8]!
   14158:	str	lr, [sp, #4]
   1415c:	mov	r1, #58	; 0x3a
   14160:	bl	14134 <__assert_fail@plt+0x31b0>
   14164:	ldr	r4, [sp]
   14168:	add	sp, sp, #4
   1416c:	pop	{pc}		; (ldr pc, [sp], #4)
   14170:	str	r4, [sp, #-8]!
   14174:	str	lr, [sp, #4]
   14178:	mov	r2, #58	; 0x3a
   1417c:	bl	140b4 <__assert_fail@plt+0x3130>
   14180:	ldr	r4, [sp]
   14184:	add	sp, sp, #4
   14188:	pop	{pc}		; (ldr pc, [sp], #4)
   1418c:	strd	r4, [sp, #-12]!
   14190:	str	lr, [sp, #8]
   14194:	sub	sp, sp, #100	; 0x64
   14198:	mov	r4, r0
   1419c:	mov	r5, r2
   141a0:	mov	r0, sp
   141a4:	bl	1212c <__assert_fail@plt+0x11a8>
   141a8:	ldrd	r2, [sp]
   141ac:	strd	r2, [sp, #48]	; 0x30
   141b0:	ldrd	r2, [sp, #8]
   141b4:	strd	r2, [sp, #56]	; 0x38
   141b8:	ldrd	r2, [sp, #16]
   141bc:	strd	r2, [sp, #64]	; 0x40
   141c0:	ldrd	r2, [sp, #24]
   141c4:	strd	r2, [sp, #72]	; 0x48
   141c8:	ldrd	r2, [sp, #32]
   141cc:	strd	r2, [sp, #80]	; 0x50
   141d0:	ldrd	r2, [sp, #40]	; 0x28
   141d4:	strd	r2, [sp, #88]	; 0x58
   141d8:	mov	r2, #1
   141dc:	mov	r1, #58	; 0x3a
   141e0:	add	r0, sp, #48	; 0x30
   141e4:	bl	13c2c <__assert_fail@plt+0x2ca8>
   141e8:	add	r3, sp, #48	; 0x30
   141ec:	mvn	r2, #0
   141f0:	mov	r1, r5
   141f4:	mov	r0, r4
   141f8:	bl	139b8 <__assert_fail@plt+0x2a34>
   141fc:	add	sp, sp, #100	; 0x64
   14200:	ldrd	r4, [sp]
   14204:	add	sp, sp, #8
   14208:	pop	{pc}		; (ldr pc, [sp], #4)
   1420c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14210:	strd	r6, [sp, #8]
   14214:	str	lr, [sp, #16]
   14218:	sub	sp, sp, #52	; 0x34
   1421c:	mov	r4, r0
   14220:	mov	r5, r3
   14224:	ldr	r3, [pc, #92]	; 14288 <__assert_fail@plt+0x3304>
   14228:	ldrd	r6, [r3]
   1422c:	strd	r6, [sp]
   14230:	ldrd	r6, [r3, #8]
   14234:	strd	r6, [sp, #8]
   14238:	ldrd	r6, [r3, #16]
   1423c:	strd	r6, [sp, #16]
   14240:	ldrd	r6, [r3, #24]
   14244:	strd	r6, [sp, #24]
   14248:	ldrd	r6, [r3, #32]
   1424c:	strd	r6, [sp, #32]
   14250:	ldrd	r6, [r3, #40]	; 0x28
   14254:	strd	r6, [sp, #40]	; 0x28
   14258:	mov	r0, sp
   1425c:	bl	13c88 <__assert_fail@plt+0x2d04>
   14260:	mov	r3, sp
   14264:	ldr	r2, [sp, #72]	; 0x48
   14268:	mov	r1, r5
   1426c:	mov	r0, r4
   14270:	bl	139b8 <__assert_fail@plt+0x2a34>
   14274:	add	sp, sp, #52	; 0x34
   14278:	ldrd	r4, [sp]
   1427c:	ldrd	r6, [sp, #8]
   14280:	add	sp, sp, #16
   14284:	pop	{pc}		; (ldr pc, [sp], #4)
   14288:	muleq	r2, r4, r2
   1428c:	push	{lr}		; (str lr, [sp, #-4]!)
   14290:	sub	sp, sp, #12
   14294:	mvn	ip, #0
   14298:	str	ip, [sp]
   1429c:	bl	1420c <__assert_fail@plt+0x3288>
   142a0:	add	sp, sp, #12
   142a4:	pop	{pc}		; (ldr pc, [sp], #4)
   142a8:	str	r4, [sp, #-8]!
   142ac:	str	lr, [sp, #4]
   142b0:	mov	r3, r2
   142b4:	mov	r2, r1
   142b8:	mov	r1, r0
   142bc:	mov	r0, #0
   142c0:	bl	1428c <__assert_fail@plt+0x3308>
   142c4:	ldr	r4, [sp]
   142c8:	add	sp, sp, #4
   142cc:	pop	{pc}		; (ldr pc, [sp], #4)
   142d0:	push	{lr}		; (str lr, [sp, #-4]!)
   142d4:	sub	sp, sp, #12
   142d8:	str	r3, [sp]
   142dc:	mov	r3, r2
   142e0:	mov	r2, r1
   142e4:	mov	r1, r0
   142e8:	mov	r0, #0
   142ec:	bl	1420c <__assert_fail@plt+0x3288>
   142f0:	add	sp, sp, #12
   142f4:	pop	{pc}		; (ldr pc, [sp], #4)
   142f8:	str	r4, [sp, #-8]!
   142fc:	str	lr, [sp, #4]
   14300:	ldr	r3, [pc, #12]	; 14314 <__assert_fail@plt+0x3390>
   14304:	bl	139b8 <__assert_fail@plt+0x2a34>
   14308:	ldr	r4, [sp]
   1430c:	add	sp, sp, #4
   14310:	pop	{pc}		; (ldr pc, [sp], #4)
   14314:	andeq	r7, r2, ip, lsl #2
   14318:	str	r4, [sp, #-8]!
   1431c:	str	lr, [sp, #4]
   14320:	mov	r2, r1
   14324:	mov	r1, r0
   14328:	mov	r0, #0
   1432c:	bl	142f8 <__assert_fail@plt+0x3374>
   14330:	ldr	r4, [sp]
   14334:	add	sp, sp, #4
   14338:	pop	{pc}		; (ldr pc, [sp], #4)
   1433c:	str	r4, [sp, #-8]!
   14340:	str	lr, [sp, #4]
   14344:	mvn	r2, #0
   14348:	bl	142f8 <__assert_fail@plt+0x3374>
   1434c:	ldr	r4, [sp]
   14350:	add	sp, sp, #4
   14354:	pop	{pc}		; (ldr pc, [sp], #4)
   14358:	str	r4, [sp, #-8]!
   1435c:	str	lr, [sp, #4]
   14360:	mov	r1, r0
   14364:	mov	r0, #0
   14368:	bl	1433c <__assert_fail@plt+0x33b8>
   1436c:	ldr	r4, [sp]
   14370:	add	sp, sp, #4
   14374:	pop	{pc}		; (ldr pc, [sp], #4)
   14378:	strd	r4, [sp, #-16]!
   1437c:	str	r6, [sp, #8]
   14380:	str	lr, [sp, #12]
   14384:	sub	sp, sp, #32
   14388:	mov	r4, r0
   1438c:	ldr	r5, [sp, #48]	; 0x30
   14390:	ldr	r6, [sp, #52]	; 0x34
   14394:	cmp	r1, #0
   14398:	beq	14464 <__assert_fail@plt+0x34e0>
   1439c:	str	r3, [sp, #4]
   143a0:	str	r2, [sp]
   143a4:	mov	r3, r1
   143a8:	movw	r2, #26632	; 0x6808
   143ac:	movt	r2, #1
   143b0:	mov	r1, #1
   143b4:	bl	10ee8 <__fprintf_chk@plt>
   143b8:	mov	r2, #5
   143bc:	movw	r1, #26652	; 0x681c
   143c0:	movt	r1, #1
   143c4:	mov	r0, #0
   143c8:	bl	10d8c <dcgettext@plt>
   143cc:	movw	r3, #2022	; 0x7e6
   143d0:	str	r3, [sp]
   143d4:	mov	r3, r0
   143d8:	movw	r2, #27380	; 0x6af4
   143dc:	movt	r2, #1
   143e0:	mov	r1, #1
   143e4:	mov	r0, r4
   143e8:	bl	10ee8 <__fprintf_chk@plt>
   143ec:	mov	r1, r4
   143f0:	mov	r0, #10
   143f4:	bl	10d80 <fputc_unlocked@plt>
   143f8:	mov	r2, #5
   143fc:	movw	r1, #26656	; 0x6820
   14400:	movt	r1, #1
   14404:	mov	r0, #0
   14408:	bl	10d8c <dcgettext@plt>
   1440c:	movw	r3, #26828	; 0x68cc
   14410:	movt	r3, #1
   14414:	mov	r2, r0
   14418:	mov	r1, #1
   1441c:	mov	r0, r4
   14420:	bl	10ee8 <__fprintf_chk@plt>
   14424:	mov	r1, r4
   14428:	mov	r0, #10
   1442c:	bl	10d80 <fputc_unlocked@plt>
   14430:	cmp	r6, #9
   14434:	ldrls	pc, [pc, r6, lsl #2]
   14438:	b	1473c <__assert_fail@plt+0x37b8>
   1443c:	andeq	r4, r1, r8, lsr #9
   14440:	andeq	r4, r1, r0, lsl #9
   14444:			; <UNDEFINED> instruction: 0x000144bc
   14448:	strdeq	r4, [r1], -r0
   1444c:	andeq	r4, r1, ip, lsr #10
   14450:	andeq	r4, r1, r0, ror r5
   14454:			; <UNDEFINED> instruction: 0x000145bc
   14458:	andeq	r4, r1, r0, lsl r6
   1445c:	andeq	r4, r1, ip, ror #12
   14460:	ldrdeq	r4, [r1], -r0
   14464:	str	r3, [sp]
   14468:	mov	r3, r2
   1446c:	movw	r2, #26644	; 0x6814
   14470:	movt	r2, #1
   14474:	mov	r1, #1
   14478:	bl	10ee8 <__fprintf_chk@plt>
   1447c:	b	143b8 <__assert_fail@plt+0x3434>
   14480:	mov	r2, #5
   14484:	movw	r1, #26864	; 0x68f0
   14488:	movt	r1, #1
   1448c:	mov	r0, #0
   14490:	bl	10d8c <dcgettext@plt>
   14494:	ldr	r3, [r5]
   14498:	mov	r2, r0
   1449c:	mov	r1, #1
   144a0:	mov	r0, r4
   144a4:	bl	10ee8 <__fprintf_chk@plt>
   144a8:	add	sp, sp, #32
   144ac:	ldrd	r4, [sp]
   144b0:	ldr	r6, [sp, #8]
   144b4:	add	sp, sp, #12
   144b8:	pop	{pc}		; (ldr pc, [sp], #4)
   144bc:	mov	r2, #5
   144c0:	movw	r1, #26880	; 0x6900
   144c4:	movt	r1, #1
   144c8:	mov	r0, #0
   144cc:	bl	10d8c <dcgettext@plt>
   144d0:	ldr	r3, [r5, #4]
   144d4:	str	r3, [sp]
   144d8:	ldr	r3, [r5]
   144dc:	mov	r2, r0
   144e0:	mov	r1, #1
   144e4:	mov	r0, r4
   144e8:	bl	10ee8 <__fprintf_chk@plt>
   144ec:	b	144a8 <__assert_fail@plt+0x3524>
   144f0:	mov	r2, #5
   144f4:	movw	r1, #26904	; 0x6918
   144f8:	movt	r1, #1
   144fc:	mov	r0, #0
   14500:	bl	10d8c <dcgettext@plt>
   14504:	ldr	r3, [r5, #8]
   14508:	str	r3, [sp, #4]
   1450c:	ldr	r3, [r5, #4]
   14510:	str	r3, [sp]
   14514:	ldr	r3, [r5]
   14518:	mov	r2, r0
   1451c:	mov	r1, #1
   14520:	mov	r0, r4
   14524:	bl	10ee8 <__fprintf_chk@plt>
   14528:	b	144a8 <__assert_fail@plt+0x3524>
   1452c:	mov	r2, #5
   14530:	movw	r1, #26932	; 0x6934
   14534:	movt	r1, #1
   14538:	mov	r0, #0
   1453c:	bl	10d8c <dcgettext@plt>
   14540:	ldr	r3, [r5, #12]
   14544:	str	r3, [sp, #8]
   14548:	ldr	r3, [r5, #8]
   1454c:	str	r3, [sp, #4]
   14550:	ldr	r3, [r5, #4]
   14554:	str	r3, [sp]
   14558:	ldr	r3, [r5]
   1455c:	mov	r2, r0
   14560:	mov	r1, #1
   14564:	mov	r0, r4
   14568:	bl	10ee8 <__fprintf_chk@plt>
   1456c:	b	144a8 <__assert_fail@plt+0x3524>
   14570:	mov	r2, #5
   14574:	movw	r1, #26964	; 0x6954
   14578:	movt	r1, #1
   1457c:	mov	r0, #0
   14580:	bl	10d8c <dcgettext@plt>
   14584:	ldr	r3, [r5, #16]
   14588:	str	r3, [sp, #12]
   1458c:	ldr	r3, [r5, #12]
   14590:	str	r3, [sp, #8]
   14594:	ldr	r3, [r5, #8]
   14598:	str	r3, [sp, #4]
   1459c:	ldr	r3, [r5, #4]
   145a0:	str	r3, [sp]
   145a4:	ldr	r3, [r5]
   145a8:	mov	r2, r0
   145ac:	mov	r1, #1
   145b0:	mov	r0, r4
   145b4:	bl	10ee8 <__fprintf_chk@plt>
   145b8:	b	144a8 <__assert_fail@plt+0x3524>
   145bc:	mov	r2, #5
   145c0:	movw	r1, #27000	; 0x6978
   145c4:	movt	r1, #1
   145c8:	mov	r0, #0
   145cc:	bl	10d8c <dcgettext@plt>
   145d0:	ldr	r3, [r5, #20]
   145d4:	str	r3, [sp, #16]
   145d8:	ldr	r3, [r5, #16]
   145dc:	str	r3, [sp, #12]
   145e0:	ldr	r3, [r5, #12]
   145e4:	str	r3, [sp, #8]
   145e8:	ldr	r3, [r5, #8]
   145ec:	str	r3, [sp, #4]
   145f0:	ldr	r3, [r5, #4]
   145f4:	str	r3, [sp]
   145f8:	ldr	r3, [r5]
   145fc:	mov	r2, r0
   14600:	mov	r1, #1
   14604:	mov	r0, r4
   14608:	bl	10ee8 <__fprintf_chk@plt>
   1460c:	b	144a8 <__assert_fail@plt+0x3524>
   14610:	mov	r2, #5
   14614:	movw	r1, #27040	; 0x69a0
   14618:	movt	r1, #1
   1461c:	mov	r0, #0
   14620:	bl	10d8c <dcgettext@plt>
   14624:	ldr	r3, [r5, #24]
   14628:	str	r3, [sp, #20]
   1462c:	ldr	r3, [r5, #20]
   14630:	str	r3, [sp, #16]
   14634:	ldr	r3, [r5, #16]
   14638:	str	r3, [sp, #12]
   1463c:	ldr	r3, [r5, #12]
   14640:	str	r3, [sp, #8]
   14644:	ldr	r3, [r5, #8]
   14648:	str	r3, [sp, #4]
   1464c:	ldr	r3, [r5, #4]
   14650:	str	r3, [sp]
   14654:	ldr	r3, [r5]
   14658:	mov	r2, r0
   1465c:	mov	r1, #1
   14660:	mov	r0, r4
   14664:	bl	10ee8 <__fprintf_chk@plt>
   14668:	b	144a8 <__assert_fail@plt+0x3524>
   1466c:	mov	r2, #5
   14670:	movw	r1, #27084	; 0x69cc
   14674:	movt	r1, #1
   14678:	mov	r0, #0
   1467c:	bl	10d8c <dcgettext@plt>
   14680:	ldr	r3, [r5, #28]
   14684:	str	r3, [sp, #24]
   14688:	ldr	r3, [r5, #24]
   1468c:	str	r3, [sp, #20]
   14690:	ldr	r3, [r5, #20]
   14694:	str	r3, [sp, #16]
   14698:	ldr	r3, [r5, #16]
   1469c:	str	r3, [sp, #12]
   146a0:	ldr	r3, [r5, #12]
   146a4:	str	r3, [sp, #8]
   146a8:	ldr	r3, [r5, #8]
   146ac:	str	r3, [sp, #4]
   146b0:	ldr	r3, [r5, #4]
   146b4:	str	r3, [sp]
   146b8:	ldr	r3, [r5]
   146bc:	mov	r2, r0
   146c0:	mov	r1, #1
   146c4:	mov	r0, r4
   146c8:	bl	10ee8 <__fprintf_chk@plt>
   146cc:	b	144a8 <__assert_fail@plt+0x3524>
   146d0:	mov	r2, #5
   146d4:	movw	r1, #27132	; 0x69fc
   146d8:	movt	r1, #1
   146dc:	mov	r0, #0
   146e0:	bl	10d8c <dcgettext@plt>
   146e4:	ldr	r3, [r5, #32]
   146e8:	str	r3, [sp, #28]
   146ec:	ldr	r3, [r5, #28]
   146f0:	str	r3, [sp, #24]
   146f4:	ldr	r3, [r5, #24]
   146f8:	str	r3, [sp, #20]
   146fc:	ldr	r3, [r5, #20]
   14700:	str	r3, [sp, #16]
   14704:	ldr	r3, [r5, #16]
   14708:	str	r3, [sp, #12]
   1470c:	ldr	r3, [r5, #12]
   14710:	str	r3, [sp, #8]
   14714:	ldr	r3, [r5, #8]
   14718:	str	r3, [sp, #4]
   1471c:	ldr	r3, [r5, #4]
   14720:	str	r3, [sp]
   14724:	ldr	r3, [r5]
   14728:	mov	r2, r0
   1472c:	mov	r1, #1
   14730:	mov	r0, r4
   14734:	bl	10ee8 <__fprintf_chk@plt>
   14738:	b	144a8 <__assert_fail@plt+0x3524>
   1473c:	mov	r2, #5
   14740:	movw	r1, #27184	; 0x6a30
   14744:	movt	r1, #1
   14748:	mov	r0, #0
   1474c:	bl	10d8c <dcgettext@plt>
   14750:	ldr	r3, [r5, #32]
   14754:	str	r3, [sp, #28]
   14758:	ldr	r3, [r5, #28]
   1475c:	str	r3, [sp, #24]
   14760:	ldr	r3, [r5, #24]
   14764:	str	r3, [sp, #20]
   14768:	ldr	r3, [r5, #20]
   1476c:	str	r3, [sp, #16]
   14770:	ldr	r3, [r5, #16]
   14774:	str	r3, [sp, #12]
   14778:	ldr	r3, [r5, #12]
   1477c:	str	r3, [sp, #8]
   14780:	ldr	r3, [r5, #8]
   14784:	str	r3, [sp, #4]
   14788:	ldr	r3, [r5, #4]
   1478c:	str	r3, [sp]
   14790:	ldr	r3, [r5]
   14794:	mov	r2, r0
   14798:	mov	r1, #1
   1479c:	mov	r0, r4
   147a0:	bl	10ee8 <__fprintf_chk@plt>
   147a4:	b	144a8 <__assert_fail@plt+0x3524>
   147a8:	strd	r4, [sp, #-12]!
   147ac:	str	lr, [sp, #8]
   147b0:	sub	sp, sp, #12
   147b4:	ldr	r5, [sp, #24]
   147b8:	ldr	ip, [r5]
   147bc:	cmp	ip, #0
   147c0:	beq	147f8 <__assert_fail@plt+0x3874>
   147c4:	mov	lr, r5
   147c8:	mov	ip, #0
   147cc:	add	ip, ip, #1
   147d0:	ldr	r4, [lr, #4]!
   147d4:	cmp	r4, #0
   147d8:	bne	147cc <__assert_fail@plt+0x3848>
   147dc:	str	ip, [sp, #4]
   147e0:	str	r5, [sp]
   147e4:	bl	14378 <__assert_fail@plt+0x33f4>
   147e8:	add	sp, sp, #12
   147ec:	ldrd	r4, [sp]
   147f0:	add	sp, sp, #8
   147f4:	pop	{pc}		; (ldr pc, [sp], #4)
   147f8:	mov	ip, #0
   147fc:	b	147dc <__assert_fail@plt+0x3858>
   14800:	strd	r4, [sp, #-12]!
   14804:	str	lr, [sp, #8]
   14808:	sub	sp, sp, #52	; 0x34
   1480c:	ldr	r5, [sp, #64]	; 0x40
   14810:	add	r4, sp, #8
   14814:	mov	ip, #0
   14818:	ldr	lr, [r5], #4
   1481c:	str	lr, [r4], #4
   14820:	cmp	lr, #0
   14824:	beq	14834 <__assert_fail@plt+0x38b0>
   14828:	add	ip, ip, #1
   1482c:	cmp	ip, #10
   14830:	bne	14818 <__assert_fail@plt+0x3894>
   14834:	str	ip, [sp, #4]
   14838:	add	ip, sp, #8
   1483c:	str	ip, [sp]
   14840:	bl	14378 <__assert_fail@plt+0x33f4>
   14844:	add	sp, sp, #52	; 0x34
   14848:	ldrd	r4, [sp]
   1484c:	add	sp, sp, #8
   14850:	pop	{pc}		; (ldr pc, [sp], #4)
   14854:	push	{r3}		; (str r3, [sp, #-4]!)
   14858:	push	{lr}		; (str lr, [sp, #-4]!)
   1485c:	sub	sp, sp, #16
   14860:	add	r3, sp, #24
   14864:	str	r3, [sp, #12]
   14868:	str	r3, [sp]
   1486c:	ldr	r3, [sp, #20]
   14870:	bl	14800 <__assert_fail@plt+0x387c>
   14874:	add	sp, sp, #16
   14878:	pop	{lr}		; (ldr lr, [sp], #4)
   1487c:	add	sp, sp, #4
   14880:	bx	lr
   14884:	str	r4, [sp, #-8]!
   14888:	str	lr, [sp, #4]
   1488c:	movw	r3, #29012	; 0x7154
   14890:	movt	r3, #2
   14894:	ldr	r1, [r3]
   14898:	mov	r0, #10
   1489c:	bl	10d80 <fputc_unlocked@plt>
   148a0:	mov	r2, #5
   148a4:	movw	r1, #27244	; 0x6a6c
   148a8:	movt	r1, #1
   148ac:	mov	r0, #0
   148b0:	bl	10d8c <dcgettext@plt>
   148b4:	movw	r2, #27264	; 0x6a80
   148b8:	movt	r2, #1
   148bc:	mov	r1, r0
   148c0:	mov	r0, #1
   148c4:	bl	10ed0 <__printf_chk@plt>
   148c8:	mov	r2, #5
   148cc:	movw	r1, #27288	; 0x6a98
   148d0:	movt	r1, #1
   148d4:	mov	r0, #0
   148d8:	bl	10d8c <dcgettext@plt>
   148dc:	movw	r3, #25436	; 0x635c
   148e0:	movt	r3, #1
   148e4:	movw	r2, #25476	; 0x6384
   148e8:	movt	r2, #1
   148ec:	mov	r1, r0
   148f0:	mov	r0, #1
   148f4:	bl	10ed0 <__printf_chk@plt>
   148f8:	mov	r2, #5
   148fc:	movw	r1, #27308	; 0x6aac
   14900:	movt	r1, #1
   14904:	mov	r0, #0
   14908:	bl	10d8c <dcgettext@plt>
   1490c:	movw	r2, #27348	; 0x6ad4
   14910:	movt	r2, #1
   14914:	mov	r1, r0
   14918:	mov	r0, #1
   1491c:	bl	10ed0 <__printf_chk@plt>
   14920:	ldr	r4, [sp]
   14924:	add	sp, sp, #4
   14928:	pop	{pc}		; (ldr pc, [sp], #4)
   1492c:	str	r4, [sp, #-8]!
   14930:	str	lr, [sp, #4]
   14934:	bl	15524 <__assert_fail@plt+0x45a0>
   14938:	cmp	r0, #0
   1493c:	beq	1494c <__assert_fail@plt+0x39c8>
   14940:	ldr	r4, [sp]
   14944:	add	sp, sp, #4
   14948:	pop	{pc}		; (ldr pc, [sp], #4)
   1494c:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14950:	str	r4, [sp, #-8]!
   14954:	str	lr, [sp, #4]
   14958:	bl	15524 <__assert_fail@plt+0x45a0>
   1495c:	cmp	r0, #0
   14960:	beq	14970 <__assert_fail@plt+0x39ec>
   14964:	ldr	r4, [sp]
   14968:	add	sp, sp, #4
   1496c:	pop	{pc}		; (ldr pc, [sp], #4)
   14970:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14974:	str	r4, [sp, #-8]!
   14978:	str	lr, [sp, #4]
   1497c:	bl	1492c <__assert_fail@plt+0x39a8>
   14980:	ldr	r4, [sp]
   14984:	add	sp, sp, #4
   14988:	pop	{pc}		; (ldr pc, [sp], #4)
   1498c:	strd	r4, [sp, #-16]!
   14990:	str	r6, [sp, #8]
   14994:	str	lr, [sp, #12]
   14998:	mov	r5, r0
   1499c:	mov	r4, r1
   149a0:	bl	15560 <__assert_fail@plt+0x45dc>
   149a4:	cmp	r0, #0
   149a8:	beq	149bc <__assert_fail@plt+0x3a38>
   149ac:	ldrd	r4, [sp]
   149b0:	ldr	r6, [sp, #8]
   149b4:	add	sp, sp, #12
   149b8:	pop	{pc}		; (ldr pc, [sp], #4)
   149bc:	adds	r4, r4, #0
   149c0:	movne	r4, #1
   149c4:	cmp	r5, #0
   149c8:	moveq	r4, #1
   149cc:	cmp	r4, #0
   149d0:	beq	149ac <__assert_fail@plt+0x3a28>
   149d4:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   149d8:	str	r4, [sp, #-8]!
   149dc:	str	lr, [sp, #4]
   149e0:	cmp	r1, #0
   149e4:	orreq	r1, r1, #1
   149e8:	bl	15560 <__assert_fail@plt+0x45dc>
   149ec:	cmp	r0, #0
   149f0:	beq	14a00 <__assert_fail@plt+0x3a7c>
   149f4:	ldr	r4, [sp]
   149f8:	add	sp, sp, #4
   149fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14a00:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14a04:	strd	r4, [sp, #-16]!
   14a08:	str	r6, [sp, #8]
   14a0c:	str	lr, [sp, #12]
   14a10:	mov	r4, r0
   14a14:	mov	r6, r1
   14a18:	mov	r5, r2
   14a1c:	bl	15bc8 <__assert_fail@plt+0x4c44>
   14a20:	cmp	r0, #0
   14a24:	beq	14a38 <__assert_fail@plt+0x3ab4>
   14a28:	ldrd	r4, [sp]
   14a2c:	ldr	r6, [sp, #8]
   14a30:	add	sp, sp, #12
   14a34:	pop	{pc}		; (ldr pc, [sp], #4)
   14a38:	cmp	r4, #0
   14a3c:	beq	14a4c <__assert_fail@plt+0x3ac8>
   14a40:	cmp	r6, #0
   14a44:	cmpne	r5, #0
   14a48:	beq	14a28 <__assert_fail@plt+0x3aa4>
   14a4c:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14a50:	str	r4, [sp, #-8]!
   14a54:	str	lr, [sp, #4]
   14a58:	bl	14a04 <__assert_fail@plt+0x3a80>
   14a5c:	ldr	r4, [sp]
   14a60:	add	sp, sp, #4
   14a64:	pop	{pc}		; (ldr pc, [sp], #4)
   14a68:	str	r4, [sp, #-8]!
   14a6c:	str	lr, [sp, #4]
   14a70:	mov	ip, r1
   14a74:	mov	r3, r2
   14a78:	cmp	r2, #0
   14a7c:	cmpne	r1, #0
   14a80:	moveq	r3, #1
   14a84:	moveq	ip, r3
   14a88:	mov	r2, r3
   14a8c:	mov	r1, ip
   14a90:	bl	15bc8 <__assert_fail@plt+0x4c44>
   14a94:	cmp	r0, #0
   14a98:	beq	14aa8 <__assert_fail@plt+0x3b24>
   14a9c:	ldr	r4, [sp]
   14aa0:	add	sp, sp, #4
   14aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   14aa8:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14aac:	str	r4, [sp, #-8]!
   14ab0:	str	lr, [sp, #4]
   14ab4:	mov	r2, r1
   14ab8:	mov	r1, r0
   14abc:	mov	r0, #0
   14ac0:	bl	14a04 <__assert_fail@plt+0x3a80>
   14ac4:	ldr	r4, [sp]
   14ac8:	add	sp, sp, #4
   14acc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad0:	str	r4, [sp, #-8]!
   14ad4:	str	lr, [sp, #4]
   14ad8:	mov	r2, r1
   14adc:	mov	r1, r0
   14ae0:	mov	r0, #0
   14ae4:	bl	14a68 <__assert_fail@plt+0x3ae4>
   14ae8:	ldr	r4, [sp]
   14aec:	add	sp, sp, #4
   14af0:	pop	{pc}		; (ldr pc, [sp], #4)
   14af4:	strd	r4, [sp, #-16]!
   14af8:	str	r6, [sp, #8]
   14afc:	str	lr, [sp, #12]
   14b00:	mov	r5, r1
   14b04:	ldr	r4, [r1]
   14b08:	cmp	r0, #0
   14b0c:	beq	14b3c <__assert_fail@plt+0x3bb8>
   14b10:	lsr	r3, r4, #1
   14b14:	add	r3, r3, #1
   14b18:	adds	r4, r4, r3
   14b1c:	bcs	14b58 <__assert_fail@plt+0x3bd4>
   14b20:	mov	r1, r4
   14b24:	bl	14a04 <__assert_fail@plt+0x3a80>
   14b28:	str	r4, [r5]
   14b2c:	ldrd	r4, [sp]
   14b30:	ldr	r6, [sp, #8]
   14b34:	add	sp, sp, #12
   14b38:	pop	{pc}		; (ldr pc, [sp], #4)
   14b3c:	cmp	r4, #0
   14b40:	bne	14b20 <__assert_fail@plt+0x3b9c>
   14b44:	mov	r4, #64	; 0x40
   14b48:	udiv	r4, r4, r2
   14b4c:	cmp	r2, #64	; 0x40
   14b50:	addhi	r4, r4, #1
   14b54:	b	14b20 <__assert_fail@plt+0x3b9c>
   14b58:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14b5c:	str	r4, [sp, #-8]!
   14b60:	str	lr, [sp, #4]
   14b64:	mov	r2, #1
   14b68:	bl	14af4 <__assert_fail@plt+0x3b70>
   14b6c:	ldr	r4, [sp]
   14b70:	add	sp, sp, #4
   14b74:	pop	{pc}		; (ldr pc, [sp], #4)
   14b78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b7c:	strd	r6, [sp, #8]
   14b80:	str	r8, [sp, #16]
   14b84:	str	lr, [sp, #20]
   14b88:	mov	r5, r1
   14b8c:	ldr	lr, [sp, #24]
   14b90:	ldr	ip, [r1]
   14b94:	asr	r4, ip, #1
   14b98:	adds	r4, ip, r4
   14b9c:	movvs	r1, #1
   14ba0:	movvc	r1, #0
   14ba4:	cmp	r1, #0
   14ba8:	mvnne	r4, #-2147483648	; 0x80000000
   14bac:	mvn	r8, r3
   14bb0:	lsr	r8, r8, #31
   14bb4:	cmp	r3, r4
   14bb8:	movge	r1, #0
   14bbc:	andlt	r1, r8, #1
   14bc0:	cmp	r1, #0
   14bc4:	movne	r4, r3
   14bc8:	smull	r6, r7, r4, lr
   14bcc:	asr	r1, r6, #31
   14bd0:	cmp	r1, r7
   14bd4:	bne	14bec <__assert_fail@plt+0x3c68>
   14bd8:	mov	r1, r6
   14bdc:	cmp	r6, #63	; 0x3f
   14be0:	movle	r1, #64	; 0x40
   14be4:	ble	14bf0 <__assert_fail@plt+0x3c6c>
   14be8:	b	14bfc <__assert_fail@plt+0x3c78>
   14bec:	mvn	r1, #-2147483648	; 0x80000000
   14bf0:	sdiv	r4, r1, lr
   14bf4:	mls	r6, lr, r4, r1
   14bf8:	sub	r1, r1, r6
   14bfc:	cmp	r0, #0
   14c00:	moveq	r6, #0
   14c04:	streq	r6, [r5]
   14c08:	sub	r6, r4, ip
   14c0c:	cmp	r6, r2
   14c10:	bge	14c48 <__assert_fail@plt+0x3cc4>
   14c14:	adds	r2, ip, r2
   14c18:	mov	r4, r2
   14c1c:	bvs	14c64 <__assert_fail@plt+0x3ce0>
   14c20:	cmp	r2, r3
   14c24:	movle	r3, #0
   14c28:	andgt	r3, r8, #1
   14c2c:	cmp	r3, #0
   14c30:	bne	14c64 <__assert_fail@plt+0x3ce0>
   14c34:	smull	r2, r3, r2, lr
   14c38:	asr	ip, r2, #31
   14c3c:	mov	r1, r2
   14c40:	cmp	ip, r3
   14c44:	bne	14c64 <__assert_fail@plt+0x3ce0>
   14c48:	bl	1498c <__assert_fail@plt+0x3a08>
   14c4c:	str	r4, [r5]
   14c50:	ldrd	r4, [sp]
   14c54:	ldrd	r6, [sp, #8]
   14c58:	ldr	r8, [sp, #16]
   14c5c:	add	sp, sp, #20
   14c60:	pop	{pc}		; (ldr pc, [sp], #4)
   14c64:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14c68:	str	r4, [sp, #-8]!
   14c6c:	str	lr, [sp, #4]
   14c70:	bl	154b0 <__assert_fail@plt+0x452c>
   14c74:	cmp	r0, #0
   14c78:	beq	14c88 <__assert_fail@plt+0x3d04>
   14c7c:	ldr	r4, [sp]
   14c80:	add	sp, sp, #4
   14c84:	pop	{pc}		; (ldr pc, [sp], #4)
   14c88:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14c8c:	str	r4, [sp, #-8]!
   14c90:	str	lr, [sp, #4]
   14c94:	mov	r1, #1
   14c98:	bl	14c68 <__assert_fail@plt+0x3ce4>
   14c9c:	ldr	r4, [sp]
   14ca0:	add	sp, sp, #4
   14ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ca8:	str	r4, [sp, #-8]!
   14cac:	str	lr, [sp, #4]
   14cb0:	bl	154b0 <__assert_fail@plt+0x452c>
   14cb4:	cmp	r0, #0
   14cb8:	beq	14cc8 <__assert_fail@plt+0x3d44>
   14cbc:	ldr	r4, [sp]
   14cc0:	add	sp, sp, #4
   14cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cc8:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14ccc:	str	r4, [sp, #-8]!
   14cd0:	str	lr, [sp, #4]
   14cd4:	mov	r1, #1
   14cd8:	bl	14ca8 <__assert_fail@plt+0x3d24>
   14cdc:	ldr	r4, [sp]
   14ce0:	add	sp, sp, #4
   14ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ce8:	strd	r4, [sp, #-16]!
   14cec:	str	r6, [sp, #8]
   14cf0:	str	lr, [sp, #12]
   14cf4:	mov	r5, r0
   14cf8:	mov	r4, r1
   14cfc:	mov	r0, r1
   14d00:	bl	1492c <__assert_fail@plt+0x39a8>
   14d04:	mov	r2, r4
   14d08:	mov	r1, r5
   14d0c:	bl	10d44 <memcpy@plt>
   14d10:	ldrd	r4, [sp]
   14d14:	ldr	r6, [sp, #8]
   14d18:	add	sp, sp, #12
   14d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d20:	strd	r4, [sp, #-16]!
   14d24:	str	r6, [sp, #8]
   14d28:	str	lr, [sp, #12]
   14d2c:	mov	r5, r0
   14d30:	mov	r4, r1
   14d34:	mov	r0, r1
   14d38:	bl	14950 <__assert_fail@plt+0x39cc>
   14d3c:	mov	r2, r4
   14d40:	mov	r1, r5
   14d44:	bl	10d44 <memcpy@plt>
   14d48:	ldrd	r4, [sp]
   14d4c:	ldr	r6, [sp, #8]
   14d50:	add	sp, sp, #12
   14d54:	pop	{pc}		; (ldr pc, [sp], #4)
   14d58:	strd	r4, [sp, #-16]!
   14d5c:	str	r6, [sp, #8]
   14d60:	str	lr, [sp, #12]
   14d64:	mov	r5, r0
   14d68:	mov	r4, r1
   14d6c:	add	r0, r1, #1
   14d70:	bl	14950 <__assert_fail@plt+0x39cc>
   14d74:	mov	r2, #0
   14d78:	strb	r2, [r0, r4]
   14d7c:	mov	r2, r4
   14d80:	mov	r1, r5
   14d84:	bl	10d44 <memcpy@plt>
   14d88:	ldrd	r4, [sp]
   14d8c:	ldr	r6, [sp, #8]
   14d90:	add	sp, sp, #12
   14d94:	pop	{pc}		; (ldr pc, [sp], #4)
   14d98:	str	r4, [sp, #-8]!
   14d9c:	str	lr, [sp, #4]
   14da0:	mov	r4, r0
   14da4:	bl	10e94 <strlen@plt>
   14da8:	add	r1, r0, #1
   14dac:	mov	r0, r4
   14db0:	bl	14ce8 <__assert_fail@plt+0x3d64>
   14db4:	ldr	r4, [sp]
   14db8:	add	sp, sp, #4
   14dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc0:	str	r4, [sp, #-8]!
   14dc4:	str	lr, [sp, #4]
   14dc8:	movw	r3, #28920	; 0x70f8
   14dcc:	movt	r3, #2
   14dd0:	ldr	r4, [r3]
   14dd4:	mov	r2, #5
   14dd8:	movw	r1, #27428	; 0x6b24
   14ddc:	movt	r1, #1
   14de0:	mov	r0, #0
   14de4:	bl	10d8c <dcgettext@plt>
   14de8:	mov	r3, r0
   14dec:	movw	r2, #26348	; 0x66ec
   14df0:	movt	r2, #1
   14df4:	mov	r1, #0
   14df8:	mov	r0, r4
   14dfc:	bl	10e04 <error@plt>
   14e00:	bl	10f78 <abort@plt>
   14e04:	str	r4, [sp, #-8]!
   14e08:	str	lr, [sp, #4]
   14e0c:	bl	155f0 <__assert_fail@plt+0x466c>
   14e10:	subs	r4, r0, #0
   14e14:	beq	14e28 <__assert_fail@plt+0x3ea4>
   14e18:	mov	r0, r4
   14e1c:	ldr	r4, [sp]
   14e20:	add	sp, sp, #4
   14e24:	pop	{pc}		; (ldr pc, [sp], #4)
   14e28:	bl	10eac <__errno_location@plt>
   14e2c:	ldr	r3, [r0]
   14e30:	cmp	r3, #12
   14e34:	bne	14e18 <__assert_fail@plt+0x3e94>
   14e38:	bl	14dc0 <__assert_fail@plt+0x3e3c>
   14e3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e40:	strd	r6, [sp, #8]
   14e44:	strd	r8, [sp, #16]
   14e48:	strd	sl, [sp, #24]
   14e4c:	str	lr, [sp, #32]
   14e50:	sub	sp, sp, #12
   14e54:	str	r0, [sp, #4]
   14e58:	cmp	r2, #0
   14e5c:	beq	14f58 <__assert_fail@plt+0x3fd4>
   14e60:	sub	ip, r2, #1
   14e64:	ldrd	r2, [r0]
   14e68:	mov	r0, #0
   14e6c:	mov	r8, r1
   14e70:	asr	r9, r1, #31
   14e74:	str	r1, [sp]
   14e78:	b	14ec8 <__assert_fail@plt+0x3f44>
   14e7c:	orrs	r4, r2, r3
   14e80:	movne	lr, #1
   14e84:	b	14ed8 <__assert_fail@plt+0x3f54>
   14e88:	mov	sl, r3
   14e8c:	ldr	fp, [sp]
   14e90:	umull	r6, r7, r1, r2
   14e94:	mov	r4, r7
   14e98:	mov	r5, #0
   14e9c:	umlal	r4, r5, sl, fp
   14ea0:	cmp	r5, #0
   14ea4:	bne	14f0c <__assert_fail@plt+0x3f88>
   14ea8:	cmp	lr, #0
   14eac:	bne	14f24 <__assert_fail@plt+0x3fa0>
   14eb0:	mov	r2, r6
   14eb4:	mov	r3, r4
   14eb8:	orr	r0, r0, lr
   14ebc:	sub	ip, ip, #1
   14ec0:	cmn	ip, #1
   14ec4:	beq	14f34 <__assert_fail@plt+0x3fb0>
   14ec8:	mov	lr, #0
   14ecc:	cmp	r8, #0
   14ed0:	sbcs	r4, r9, #0
   14ed4:	blt	14e7c <__assert_fail@plt+0x3ef8>
   14ed8:	cmp	r9, #0
   14edc:	bne	14ef8 <__assert_fail@plt+0x3f74>
   14ee0:	cmp	r3, #0
   14ee4:	bne	14e88 <__assert_fail@plt+0x3f04>
   14ee8:	umull	r2, r3, r1, r2
   14eec:	mov	r6, r2
   14ef0:	mov	r4, r3
   14ef4:	b	14ea8 <__assert_fail@plt+0x3f24>
   14ef8:	cmp	r3, #0
   14efc:	bne	14f0c <__assert_fail@plt+0x3f88>
   14f00:	mov	sl, r9
   14f04:	mov	fp, r2
   14f08:	b	14e90 <__assert_fail@plt+0x3f0c>
   14f0c:	mul	r4, r1, r3
   14f10:	mla	r4, r2, r9, r4
   14f14:	umull	r6, r7, r1, r2
   14f18:	add	r4, r4, r7
   14f1c:	mov	lr, #1
   14f20:	b	14ea8 <__assert_fail@plt+0x3f24>
   14f24:	mvn	r2, #0
   14f28:	mvn	r3, #0
   14f2c:	mov	lr, #1
   14f30:	b	14eb8 <__assert_fail@plt+0x3f34>
   14f34:	ldr	r1, [sp, #4]
   14f38:	strd	r2, [r1]
   14f3c:	add	sp, sp, #12
   14f40:	ldrd	r4, [sp]
   14f44:	ldrd	r6, [sp, #8]
   14f48:	ldrd	r8, [sp, #16]
   14f4c:	ldrd	sl, [sp, #24]
   14f50:	add	sp, sp, #32
   14f54:	pop	{pc}		; (ldr pc, [sp], #4)
   14f58:	mov	r0, #0
   14f5c:	b	14f3c <__assert_fail@plt+0x3fb8>
   14f60:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14f64:	strd	r6, [sp, #8]
   14f68:	strd	r8, [sp, #16]
   14f6c:	str	lr, [sp, #24]
   14f70:	sub	sp, sp, #20
   14f74:	cmp	r2, #36	; 0x24
   14f78:	bhi	14fcc <__assert_fail@plt+0x4048>
   14f7c:	mov	r5, r0
   14f80:	mov	r6, r1
   14f84:	mov	r7, r2
   14f88:	mov	r9, r3
   14f8c:	cmp	r1, #0
   14f90:	addeq	r6, sp, #12
   14f94:	bl	10eac <__errno_location@plt>
   14f98:	mov	r8, r0
   14f9c:	mov	r3, #0
   14fa0:	str	r3, [r0]
   14fa4:	ldrb	r4, [r5]
   14fa8:	bl	10e7c <__ctype_b_loc@plt>
   14fac:	ldr	r1, [r0]
   14fb0:	mov	r2, r5
   14fb4:	lsl	r3, r4, #1
   14fb8:	ldrh	r3, [r1, r3]
   14fbc:	tst	r3, #8192	; 0x2000
   14fc0:	beq	14fec <__assert_fail@plt+0x4068>
   14fc4:	ldrb	r4, [r2, #1]!
   14fc8:	b	14fb4 <__assert_fail@plt+0x4030>
   14fcc:	movw	r3, #27448	; 0x6b38
   14fd0:	movt	r3, #1
   14fd4:	mov	r2, #85	; 0x55
   14fd8:	movw	r1, #27460	; 0x6b44
   14fdc:	movt	r1, #1
   14fe0:	movw	r0, #27476	; 0x6b54
   14fe4:	movt	r0, #1
   14fe8:	bl	10f84 <__assert_fail@plt>
   14fec:	cmp	r4, #45	; 0x2d
   14ff0:	moveq	r4, #4
   14ff4:	beq	15188 <__assert_fail@plt+0x4204>
   14ff8:	mov	r3, #0
   14ffc:	mov	r2, r7
   15000:	mov	r1, r6
   15004:	mov	r0, r5
   15008:	bl	10d5c <__strtoull_internal@plt>
   1500c:	strd	r0, [sp]
   15010:	ldr	r7, [r6]
   15014:	cmp	r7, r5
   15018:	beq	1503c <__assert_fail@plt+0x40b8>
   1501c:	ldr	r3, [r8]
   15020:	cmp	r3, #0
   15024:	beq	15160 <__assert_fail@plt+0x41dc>
   15028:	cmp	r3, #34	; 0x22
   1502c:	moveq	r4, #1
   15030:	beq	15164 <__assert_fail@plt+0x41e0>
   15034:	mov	r4, #4
   15038:	b	15188 <__assert_fail@plt+0x4204>
   1503c:	ldr	r3, [sp, #48]	; 0x30
   15040:	cmp	r3, #0
   15044:	beq	154a0 <__assert_fail@plt+0x451c>
   15048:	ldrb	r1, [r5]
   1504c:	cmp	r1, #0
   15050:	moveq	r4, #4
   15054:	beq	15188 <__assert_fail@plt+0x4204>
   15058:	mov	r0, r3
   1505c:	bl	10ea0 <strchr@plt>
   15060:	cmp	r0, #0
   15064:	beq	154a8 <__assert_fail@plt+0x4524>
   15068:	mov	r2, #1
   1506c:	mov	r3, #0
   15070:	strd	r2, [sp]
   15074:	ldrb	r5, [r7]
   15078:	mov	r4, #0
   1507c:	mov	r1, r5
   15080:	ldr	r0, [sp, #48]	; 0x30
   15084:	bl	10ea0 <strchr@plt>
   15088:	cmp	r0, #0
   1508c:	beq	151a4 <__assert_fail@plt+0x4220>
   15090:	sub	r3, r5, #69	; 0x45
   15094:	cmp	r3, #47	; 0x2f
   15098:	ldrls	pc, [pc, r3, lsl #2]
   1509c:	b	152f0 <__assert_fail@plt+0x436c>
   150a0:			; <UNDEFINED> instruction: 0x000151b4
   150a4:	strdeq	r5, [r1], -r0
   150a8:			; <UNDEFINED> instruction: 0x000151b4
   150ac:	strdeq	r5, [r1], -r0
   150b0:	strdeq	r5, [r1], -r0
   150b4:	strdeq	r5, [r1], -r0
   150b8:			; <UNDEFINED> instruction: 0x000151b4
   150bc:	strdeq	r5, [r1], -r0
   150c0:			; <UNDEFINED> instruction: 0x000151b4
   150c4:	strdeq	r5, [r1], -r0
   150c8:	strdeq	r5, [r1], -r0
   150cc:			; <UNDEFINED> instruction: 0x000151b4
   150d0:	strdeq	r5, [r1], -r0
   150d4:	strdeq	r5, [r1], -r0
   150d8:	strdeq	r5, [r1], -r0
   150dc:			; <UNDEFINED> instruction: 0x000151b4
   150e0:	strdeq	r5, [r1], -r0
   150e4:	strdeq	r5, [r1], -r0
   150e8:	strdeq	r5, [r1], -r0
   150ec:	strdeq	r5, [r1], -r0
   150f0:			; <UNDEFINED> instruction: 0x000151b4
   150f4:			; <UNDEFINED> instruction: 0x000151b4
   150f8:	strdeq	r5, [r1], -r0
   150fc:	strdeq	r5, [r1], -r0
   15100:	strdeq	r5, [r1], -r0
   15104:	strdeq	r5, [r1], -r0
   15108:	strdeq	r5, [r1], -r0
   1510c:	strdeq	r5, [r1], -r0
   15110:	strdeq	r5, [r1], -r0
   15114:	strdeq	r5, [r1], -r0
   15118:	strdeq	r5, [r1], -r0
   1511c:	strdeq	r5, [r1], -r0
   15120:	strdeq	r5, [r1], -r0
   15124:	strdeq	r5, [r1], -r0
   15128:			; <UNDEFINED> instruction: 0x000151b4
   1512c:	strdeq	r5, [r1], -r0
   15130:	strdeq	r5, [r1], -r0
   15134:	strdeq	r5, [r1], -r0
   15138:			; <UNDEFINED> instruction: 0x000151b4
   1513c:	strdeq	r5, [r1], -r0
   15140:			; <UNDEFINED> instruction: 0x000151b4
   15144:	strdeq	r5, [r1], -r0
   15148:	strdeq	r5, [r1], -r0
   1514c:	strdeq	r5, [r1], -r0
   15150:	strdeq	r5, [r1], -r0
   15154:	strdeq	r5, [r1], -r0
   15158:	strdeq	r5, [r1], -r0
   1515c:			; <UNDEFINED> instruction: 0x000151b4
   15160:	mov	r4, #0
   15164:	ldr	r3, [sp, #48]	; 0x30
   15168:	cmp	r3, #0
   1516c:	strdeq	r0, [r9]
   15170:	beq	15188 <__assert_fail@plt+0x4204>
   15174:	ldrb	r5, [r7]
   15178:	cmp	r5, #0
   1517c:	bne	1507c <__assert_fail@plt+0x40f8>
   15180:	ldrd	r2, [sp]
   15184:	strd	r2, [r9]
   15188:	mov	r0, r4
   1518c:	add	sp, sp, #20
   15190:	ldrd	r4, [sp]
   15194:	ldrd	r6, [sp, #8]
   15198:	ldrd	r8, [sp, #16]
   1519c:	add	sp, sp, #24
   151a0:	pop	{pc}		; (ldr pc, [sp], #4)
   151a4:	ldrd	r2, [sp]
   151a8:	strd	r2, [r9]
   151ac:	orr	r4, r4, #2
   151b0:	b	15188 <__assert_fail@plt+0x4204>
   151b4:	mov	r1, #48	; 0x30
   151b8:	ldr	r0, [sp, #48]	; 0x30
   151bc:	bl	10ea0 <strchr@plt>
   151c0:	cmp	r0, #0
   151c4:	beq	152fc <__assert_fail@plt+0x4378>
   151c8:	ldrb	r3, [r7, #1]
   151cc:	cmp	r3, #68	; 0x44
   151d0:	beq	15308 <__assert_fail@plt+0x4384>
   151d4:	cmp	r3, #105	; 0x69
   151d8:	beq	152d8 <__assert_fail@plt+0x4354>
   151dc:	cmp	r3, #66	; 0x42
   151e0:	moveq	r7, #2
   151e4:	movne	r7, #1
   151e8:	moveq	r1, #1000	; 0x3e8
   151ec:	movne	r1, #1024	; 0x400
   151f0:	sub	r5, r5, #66	; 0x42
   151f4:	cmp	r5, #53	; 0x35
   151f8:	ldrls	pc, [pc, r5, lsl #2]
   151fc:	b	1546c <__assert_fail@plt+0x44e8>
   15200:	andeq	r5, r1, ip, asr r3
   15204:	andeq	r5, r1, ip, ror #8
   15208:	andeq	r5, r1, ip, ror #8
   1520c:	andeq	r5, r1, r4, lsr #7
   15210:	andeq	r5, r1, ip, ror #8
   15214:			; <UNDEFINED> instruction: 0x000153b4
   15218:	andeq	r5, r1, ip, ror #8
   1521c:	andeq	r5, r1, ip, ror #8
   15220:	andeq	r5, r1, ip, ror #8
   15224:	andeq	r5, r1, r4, asr #7
   15228:	andeq	r5, r1, ip, ror #8
   1522c:	ldrdeq	r5, [r1], -r4
   15230:	andeq	r5, r1, ip, ror #8
   15234:	andeq	r5, r1, ip, ror #8
   15238:	andeq	r5, r1, r4, ror #7
   1523c:	andeq	r5, r1, ip, ror #8
   15240:	andeq	r5, r1, ip, ror #8
   15244:	andeq	r5, r1, ip, ror #8
   15248:	strdeq	r5, [r1], -r4
   1524c:	andeq	r5, r1, ip, ror #8
   15250:	andeq	r5, r1, ip, ror #8
   15254:	andeq	r5, r1, ip, ror #8
   15258:	andeq	r5, r1, ip, ror #8
   1525c:	andeq	r5, r1, ip, asr #8
   15260:	andeq	r5, r1, ip, asr r4
   15264:	andeq	r5, r1, ip, ror #8
   15268:	andeq	r5, r1, ip, ror #8
   1526c:	andeq	r5, r1, ip, ror #8
   15270:	andeq	r5, r1, ip, ror #8
   15274:	andeq	r5, r1, ip, ror #8
   15278:	andeq	r5, r1, ip, ror #8
   1527c:	andeq	r5, r1, ip, ror #8
   15280:	andeq	r5, r1, r4, lsl r3
   15284:	andeq	r5, r1, ip, ror r4
   15288:	andeq	r5, r1, ip, ror #8
   1528c:	andeq	r5, r1, ip, ror #8
   15290:	andeq	r5, r1, ip, ror #8
   15294:			; <UNDEFINED> instruction: 0x000153b4
   15298:	andeq	r5, r1, ip, ror #8
   1529c:	andeq	r5, r1, ip, ror #8
   152a0:	andeq	r5, r1, ip, ror #8
   152a4:	andeq	r5, r1, r4, asr #7
   152a8:	andeq	r5, r1, ip, ror #8
   152ac:	ldrdeq	r5, [r1], -r4
   152b0:	andeq	r5, r1, ip, ror #8
   152b4:	andeq	r5, r1, ip, ror #8
   152b8:	andeq	r5, r1, ip, ror #8
   152bc:	andeq	r5, r1, ip, ror #8
   152c0:	andeq	r5, r1, ip, ror #8
   152c4:	andeq	r5, r1, ip, ror #8
   152c8:	strdeq	r5, [r1], -r4
   152cc:	andeq	r5, r1, ip, ror #8
   152d0:	andeq	r5, r1, ip, ror #8
   152d4:	andeq	r5, r1, r4, lsl #8
   152d8:	ldrb	r3, [r7, #2]
   152dc:	cmp	r3, #66	; 0x42
   152e0:	movne	r7, #1
   152e4:	moveq	r7, #3
   152e8:	mov	r1, #1024	; 0x400
   152ec:	b	151f0 <__assert_fail@plt+0x426c>
   152f0:	mov	r7, #1
   152f4:	mov	r1, #1024	; 0x400
   152f8:	b	151f0 <__assert_fail@plt+0x426c>
   152fc:	mov	r7, #1
   15300:	mov	r1, #1024	; 0x400
   15304:	b	151f0 <__assert_fail@plt+0x426c>
   15308:	mov	r7, #2
   1530c:	mov	r1, #1000	; 0x3e8
   15310:	b	151f0 <__assert_fail@plt+0x426c>
   15314:	ldr	r3, [sp]
   15318:	ldr	ip, [sp, #4]
   1531c:	lsl	r2, ip, #9
   15320:	orr	r2, r2, r3, lsr #23
   15324:	lsl	r3, r3, #9
   15328:	mov	r0, #0
   1532c:	mov	r1, r0
   15330:	lsr	r0, ip, #23
   15334:	orrs	r1, r0, r1
   15338:	streq	r3, [sp]
   1533c:	streq	r2, [sp, #4]
   15340:	moveq	r0, #0
   15344:	beq	15480 <__assert_fail@plt+0x44fc>
   15348:	mvn	r2, #0
   1534c:	mvn	r3, #0
   15350:	strd	r2, [sp]
   15354:	mov	r0, #1
   15358:	b	15480 <__assert_fail@plt+0x44fc>
   1535c:	ldr	r3, [sp]
   15360:	ldr	ip, [sp, #4]
   15364:	lsl	r2, ip, #10
   15368:	orr	r2, r2, r3, lsr #22
   1536c:	lsl	r3, r3, #10
   15370:	mov	r0, #0
   15374:	mov	r1, r0
   15378:	lsr	r0, ip, #22
   1537c:	orrs	r1, r0, r1
   15380:	streq	r3, [sp]
   15384:	streq	r2, [sp, #4]
   15388:	moveq	r0, #0
   1538c:	beq	15480 <__assert_fail@plt+0x44fc>
   15390:	mvn	r2, #0
   15394:	mvn	r3, #0
   15398:	strd	r2, [sp]
   1539c:	mov	r0, #1
   153a0:	b	15480 <__assert_fail@plt+0x44fc>
   153a4:	mov	r2, #6
   153a8:	mov	r0, sp
   153ac:	bl	14e3c <__assert_fail@plt+0x3eb8>
   153b0:	b	15480 <__assert_fail@plt+0x44fc>
   153b4:	mov	r2, #3
   153b8:	mov	r0, sp
   153bc:	bl	14e3c <__assert_fail@plt+0x3eb8>
   153c0:	b	15480 <__assert_fail@plt+0x44fc>
   153c4:	mov	r2, #1
   153c8:	mov	r0, sp
   153cc:	bl	14e3c <__assert_fail@plt+0x3eb8>
   153d0:	b	15480 <__assert_fail@plt+0x44fc>
   153d4:	mov	r2, #2
   153d8:	mov	r0, sp
   153dc:	bl	14e3c <__assert_fail@plt+0x3eb8>
   153e0:	b	15480 <__assert_fail@plt+0x44fc>
   153e4:	mov	r2, #5
   153e8:	mov	r0, sp
   153ec:	bl	14e3c <__assert_fail@plt+0x3eb8>
   153f0:	b	15480 <__assert_fail@plt+0x44fc>
   153f4:	mov	r2, #4
   153f8:	mov	r0, sp
   153fc:	bl	14e3c <__assert_fail@plt+0x3eb8>
   15400:	b	15480 <__assert_fail@plt+0x44fc>
   15404:	ldr	r3, [sp]
   15408:	ldr	r2, [sp, #4]
   1540c:	adds	r3, r3, r3
   15410:	adc	r2, r2, r2
   15414:	mov	r1, #0
   15418:	mov	r0, r1
   1541c:	ldr	r1, [sp, #4]
   15420:	lsr	r1, r1, #31
   15424:	orrs	r1, r1, r0
   15428:	streq	r3, [sp]
   1542c:	streq	r2, [sp, #4]
   15430:	moveq	r0, #0
   15434:	beq	15480 <__assert_fail@plt+0x44fc>
   15438:	mvn	r2, #0
   1543c:	mvn	r3, #0
   15440:	strd	r2, [sp]
   15444:	mov	r0, #1
   15448:	b	15480 <__assert_fail@plt+0x44fc>
   1544c:	mov	r2, #8
   15450:	mov	r0, sp
   15454:	bl	14e3c <__assert_fail@plt+0x3eb8>
   15458:	b	15480 <__assert_fail@plt+0x44fc>
   1545c:	mov	r2, #7
   15460:	mov	r0, sp
   15464:	bl	14e3c <__assert_fail@plt+0x3eb8>
   15468:	b	15480 <__assert_fail@plt+0x44fc>
   1546c:	ldrd	r2, [sp]
   15470:	strd	r2, [r9]
   15474:	orr	r4, r4, #2
   15478:	b	15188 <__assert_fail@plt+0x4204>
   1547c:	mov	r0, #0
   15480:	orr	r4, r4, r0
   15484:	ldr	r3, [r6]
   15488:	add	r2, r3, r7
   1548c:	str	r2, [r6]
   15490:	ldrb	r3, [r3, r7]
   15494:	cmp	r3, #0
   15498:	orrne	r4, r4, #2
   1549c:	b	15180 <__assert_fail@plt+0x41fc>
   154a0:	mov	r4, #4
   154a4:	b	15188 <__assert_fail@plt+0x4204>
   154a8:	mov	r4, #4
   154ac:	b	15188 <__assert_fail@plt+0x4204>
   154b0:	strd	r4, [sp, #-16]!
   154b4:	str	r6, [sp, #8]
   154b8:	str	lr, [sp, #12]
   154bc:	cmp	r1, #0
   154c0:	cmpne	r0, #0
   154c4:	beq	15500 <__assert_fail@plt+0x457c>
   154c8:	mov	r2, r0
   154cc:	mov	r3, r1
   154d0:	umull	r4, r5, r0, r1
   154d4:	adds	r1, r5, #0
   154d8:	movne	r1, #1
   154dc:	cmp	r4, #0
   154e0:	movlt	r1, #1
   154e4:	cmp	r1, #0
   154e8:	beq	15508 <__assert_fail@plt+0x4584>
   154ec:	bl	10eac <__errno_location@plt>
   154f0:	mov	r3, #12
   154f4:	str	r3, [r0]
   154f8:	mov	r0, #0
   154fc:	b	15514 <__assert_fail@plt+0x4590>
   15500:	mov	r3, #1
   15504:	mov	r2, r3
   15508:	mov	r1, r3
   1550c:	mov	r0, r2
   15510:	bl	10cfc <calloc@plt>
   15514:	ldrd	r4, [sp]
   15518:	ldr	r6, [sp, #8]
   1551c:	add	sp, sp, #12
   15520:	pop	{pc}		; (ldr pc, [sp], #4)
   15524:	str	r4, [sp, #-8]!
   15528:	str	lr, [sp, #4]
   1552c:	cmp	r0, #0
   15530:	beq	1554c <__assert_fail@plt+0x45c8>
   15534:	bge	15550 <__assert_fail@plt+0x45cc>
   15538:	bl	10eac <__errno_location@plt>
   1553c:	mov	r3, #12
   15540:	str	r3, [r0]
   15544:	mov	r0, #0
   15548:	b	15554 <__assert_fail@plt+0x45d0>
   1554c:	mov	r0, #1
   15550:	bl	10e28 <malloc@plt>
   15554:	ldr	r4, [sp]
   15558:	add	sp, sp, #4
   1555c:	pop	{pc}		; (ldr pc, [sp], #4)
   15560:	str	r4, [sp, #-8]!
   15564:	str	lr, [sp, #4]
   15568:	cmp	r0, #0
   1556c:	beq	15590 <__assert_fail@plt+0x460c>
   15570:	cmp	r1, #0
   15574:	beq	1559c <__assert_fail@plt+0x4618>
   15578:	cmp	r1, #0
   1557c:	blt	155a8 <__assert_fail@plt+0x4624>
   15580:	bl	10d98 <realloc@plt>
   15584:	ldr	r4, [sp]
   15588:	add	sp, sp, #4
   1558c:	pop	{pc}		; (ldr pc, [sp], #4)
   15590:	mov	r0, r1
   15594:	bl	15524 <__assert_fail@plt+0x45a0>
   15598:	b	15584 <__assert_fail@plt+0x4600>
   1559c:	bl	11ffc <__assert_fail@plt+0x1078>
   155a0:	mov	r0, #0
   155a4:	b	15584 <__assert_fail@plt+0x4600>
   155a8:	bl	10eac <__errno_location@plt>
   155ac:	mov	r3, #12
   155b0:	str	r3, [r0]
   155b4:	mov	r0, #0
   155b8:	b	15584 <__assert_fail@plt+0x4600>
   155bc:	str	r4, [sp, #-8]!
   155c0:	str	lr, [sp, #4]
   155c4:	cmn	r0, #100	; 0x64
   155c8:	bne	155ec <__assert_fail@plt+0x4668>
   155cc:	mov	ip, r1
   155d0:	mov	r1, r2
   155d4:	mov	r2, r3
   155d8:	mov	r0, ip
   155dc:	bl	10dbc <readlink@plt>
   155e0:	ldr	r4, [sp]
   155e4:	add	sp, sp, #4
   155e8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ec:	bl	10f78 <abort@plt>
   155f0:	push	{lr}		; (str lr, [sp, #-4]!)
   155f4:	sub	sp, sp, #12
   155f8:	movw	r3, #21948	; 0x55bc
   155fc:	movt	r3, #1
   15600:	str	r3, [sp, #4]
   15604:	mov	r2, #0
   15608:	str	r2, [sp]
   1560c:	mov	r3, r2
   15610:	mov	r1, r0
   15614:	mvn	r0, #99	; 0x63
   15618:	bl	156e8 <__assert_fail@plt+0x4764>
   1561c:	add	sp, sp, #12
   15620:	pop	{pc}		; (ldr pc, [sp], #4)
   15624:	ldrb	r3, [r0]
   15628:	cmp	r3, #47	; 0x2f
   1562c:	bne	1563c <__assert_fail@plt+0x46b8>
   15630:	ldrb	r3, [r0, #1]!
   15634:	cmp	r3, #47	; 0x2f
   15638:	beq	15630 <__assert_fail@plt+0x46ac>
   1563c:	ldrb	r2, [r0]
   15640:	cmp	r2, #0
   15644:	bxeq	lr
   15648:	push	{lr}		; (str lr, [sp, #-4]!)
   1564c:	mov	r1, r0
   15650:	mov	r3, #0
   15654:	mov	lr, #1
   15658:	mov	ip, r3
   1565c:	b	15678 <__assert_fail@plt+0x46f4>
   15660:	cmp	r3, #0
   15664:	movne	r0, r1
   15668:	movne	r3, ip
   1566c:	ldrb	r2, [r1, #1]!
   15670:	cmp	r2, #0
   15674:	beq	15688 <__assert_fail@plt+0x4704>
   15678:	cmp	r2, #47	; 0x2f
   1567c:	moveq	r3, lr
   15680:	bne	15660 <__assert_fail@plt+0x46dc>
   15684:	b	1566c <__assert_fail@plt+0x46e8>
   15688:	pop	{pc}		; (ldr pc, [sp], #4)
   1568c:	str	r4, [sp, #-8]!
   15690:	str	lr, [sp, #4]
   15694:	mov	r4, r0
   15698:	bl	10e94 <strlen@plt>
   1569c:	cmp	r0, #1
   156a0:	bls	156c0 <__assert_fail@plt+0x473c>
   156a4:	add	r3, r4, r0
   156a8:	ldrb	r3, [r3, #-1]
   156ac:	cmp	r3, #47	; 0x2f
   156b0:	subeq	r0, r0, #2
   156b4:	addeq	r3, r4, r0
   156b8:	rsbeq	r1, r4, #1
   156bc:	beq	156cc <__assert_fail@plt+0x4748>
   156c0:	ldr	r4, [sp]
   156c4:	add	sp, sp, #4
   156c8:	pop	{pc}		; (ldr pc, [sp], #4)
   156cc:	add	r0, r1, r3
   156d0:	cmp	r3, r4
   156d4:	beq	156c0 <__assert_fail@plt+0x473c>
   156d8:	ldrb	r2, [r3], #-1
   156dc:	cmp	r2, #47	; 0x2f
   156e0:	bne	156c0 <__assert_fail@plt+0x473c>
   156e4:	b	156cc <__assert_fail@plt+0x4748>
   156e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   156ec:	strd	r6, [sp, #8]
   156f0:	strd	r8, [sp, #16]
   156f4:	str	sl, [sp, #24]
   156f8:	str	lr, [sp, #28]
   156fc:	sub	sp, sp, #1024	; 0x400
   15700:	mov	r7, r0
   15704:	mov	r8, r1
   15708:	ldr	r6, [sp, #1056]	; 0x420
   1570c:	ldr	r9, [sp, #1060]	; 0x424
   15710:	movw	r1, #27524	; 0x6b84
   15714:	movt	r1, #1
   15718:	cmp	r6, #0
   1571c:	moveq	r6, r1
   15720:	subs	sl, r2, #0
   15724:	moveq	r3, #1024	; 0x400
   15728:	moveq	sl, sp
   1572c:	mvn	r4, #-2147483648	; 0x80000000
   15730:	cmp	r3, r4
   15734:	movcc	r4, r3
   15738:	mov	r5, sl
   1573c:	b	15804 <__assert_fail@plt+0x4880>
   15740:	cmp	r5, sl
   15744:	moveq	r5, #0
   15748:	beq	1587c <__assert_fail@plt+0x48f8>
   1574c:	bl	10eac <__errno_location@plt>
   15750:	mov	r4, r0
   15754:	ldr	r7, [r0]
   15758:	ldr	r3, [r6, #8]
   1575c:	mov	r0, r5
   15760:	blx	r3
   15764:	str	r7, [r4]
   15768:	mov	r5, #0
   1576c:	b	1587c <__assert_fail@plt+0x48f8>
   15770:	add	r7, r0, #1
   15774:	mov	r3, #0
   15778:	strb	r3, [r5, r0]
   1577c:	mov	r3, sp
   15780:	cmp	r5, r3
   15784:	beq	157b8 <__assert_fail@plt+0x4834>
   15788:	cmp	r5, sl
   1578c:	cmpne	r7, r4
   15790:	bge	1587c <__assert_fail@plt+0x48f8>
   15794:	ldr	r3, [r6, #4]
   15798:	cmp	r3, #0
   1579c:	beq	1587c <__assert_fail@plt+0x48f8>
   157a0:	mov	r1, r7
   157a4:	mov	r0, r5
   157a8:	blx	r3
   157ac:	cmp	r0, #0
   157b0:	movne	r5, r0
   157b4:	b	1587c <__assert_fail@plt+0x48f8>
   157b8:	ldr	r3, [r6]
   157bc:	mov	r0, r7
   157c0:	blx	r3
   157c4:	cmp	r0, #0
   157c8:	beq	15854 <__assert_fail@plt+0x48d0>
   157cc:	mov	r2, r7
   157d0:	mov	r1, r5
   157d4:	bl	10d44 <memcpy@plt>
   157d8:	mov	r5, r0
   157dc:	b	1587c <__assert_fail@plt+0x48f8>
   157e0:	cmn	r4, #-1073741822	; 0xc0000002
   157e4:	bgt	15840 <__assert_fail@plt+0x48bc>
   157e8:	lsl	r4, r4, #1
   157ec:	add	r4, r4, #1
   157f0:	ldr	r3, [r6]
   157f4:	mov	r0, r4
   157f8:	blx	r3
   157fc:	subs	r5, r0, #0
   15800:	beq	15858 <__assert_fail@plt+0x48d4>
   15804:	mov	r3, r4
   15808:	mov	r2, r5
   1580c:	mov	r1, r8
   15810:	mov	r0, r7
   15814:	blx	r9
   15818:	cmp	r0, #0
   1581c:	blt	15740 <__assert_fail@plt+0x47bc>
   15820:	cmp	r0, r4
   15824:	blt	15770 <__assert_fail@plt+0x47ec>
   15828:	cmp	r5, sl
   1582c:	beq	157e0 <__assert_fail@plt+0x485c>
   15830:	ldr	r3, [r6, #8]
   15834:	mov	r0, r5
   15838:	blx	r3
   1583c:	b	157e0 <__assert_fail@plt+0x485c>
   15840:	bl	10eac <__errno_location@plt>
   15844:	mov	r3, #36	; 0x24
   15848:	str	r3, [r0]
   1584c:	mov	r5, #0
   15850:	b	1587c <__assert_fail@plt+0x48f8>
   15854:	mov	r4, r7
   15858:	ldr	r3, [r6, #12]
   1585c:	cmp	r3, #0
   15860:	beq	1586c <__assert_fail@plt+0x48e8>
   15864:	mov	r0, r4
   15868:	blx	r3
   1586c:	bl	10eac <__errno_location@plt>
   15870:	mov	r3, #12
   15874:	str	r3, [r0]
   15878:	mov	r5, #0
   1587c:	mov	r0, r5
   15880:	add	sp, sp, #1024	; 0x400
   15884:	ldrd	r4, [sp]
   15888:	ldrd	r6, [sp, #8]
   1588c:	ldrd	r8, [sp, #16]
   15890:	ldr	sl, [sp, #24]
   15894:	add	sp, sp, #28
   15898:	pop	{pc}		; (ldr pc, [sp], #4)
   1589c:	strd	r4, [sp, #-16]!
   158a0:	str	r6, [sp, #8]
   158a4:	str	lr, [sp, #12]
   158a8:	mov	r5, r0
   158ac:	bl	10dec <__fpending@plt>
   158b0:	mov	r6, r0
   158b4:	ldr	r4, [r5]
   158b8:	and	r4, r4, #32
   158bc:	mov	r0, r5
   158c0:	bl	15928 <__assert_fail@plt+0x49a4>
   158c4:	cmp	r4, #0
   158c8:	bne	158fc <__assert_fail@plt+0x4978>
   158cc:	cmp	r0, #0
   158d0:	beq	158ec <__assert_fail@plt+0x4968>
   158d4:	cmp	r6, #0
   158d8:	bne	15918 <__assert_fail@plt+0x4994>
   158dc:	bl	10eac <__errno_location@plt>
   158e0:	ldr	r0, [r0]
   158e4:	subs	r0, r0, #9
   158e8:	mvnne	r0, #0
   158ec:	ldrd	r4, [sp]
   158f0:	ldr	r6, [sp, #8]
   158f4:	add	sp, sp, #12
   158f8:	pop	{pc}		; (ldr pc, [sp], #4)
   158fc:	cmp	r0, #0
   15900:	bne	15920 <__assert_fail@plt+0x499c>
   15904:	bl	10eac <__errno_location@plt>
   15908:	mov	r3, #0
   1590c:	str	r3, [r0]
   15910:	mvn	r0, #0
   15914:	b	158ec <__assert_fail@plt+0x4968>
   15918:	mvn	r0, #0
   1591c:	b	158ec <__assert_fail@plt+0x4968>
   15920:	mvn	r0, #0
   15924:	b	158ec <__assert_fail@plt+0x4968>
   15928:	strd	r4, [sp, #-16]!
   1592c:	str	r6, [sp, #8]
   15930:	str	lr, [sp, #12]
   15934:	sub	sp, sp, #8
   15938:	mov	r4, r0
   1593c:	bl	10edc <fileno@plt>
   15940:	cmp	r0, #0
   15944:	blt	159bc <__assert_fail@plt+0x4a38>
   15948:	mov	r0, r4
   1594c:	bl	10e40 <__freading@plt>
   15950:	cmp	r0, #0
   15954:	beq	15988 <__assert_fail@plt+0x4a04>
   15958:	mov	r0, r4
   1595c:	bl	10edc <fileno@plt>
   15960:	mov	r3, #1
   15964:	str	r3, [sp]
   15968:	mov	r2, #0
   1596c:	mov	r3, #0
   15970:	bl	10dd4 <lseek64@plt>
   15974:	mvn	r2, #0
   15978:	mvn	r3, #0
   1597c:	cmp	r1, r3
   15980:	cmpeq	r0, r2
   15984:	beq	159c8 <__assert_fail@plt+0x4a44>
   15988:	mov	r0, r4
   1598c:	bl	159e4 <__assert_fail@plt+0x4a60>
   15990:	cmp	r0, #0
   15994:	beq	159c8 <__assert_fail@plt+0x4a44>
   15998:	bl	10eac <__errno_location@plt>
   1599c:	mov	r5, r0
   159a0:	ldr	r6, [r0]
   159a4:	mov	r0, r4
   159a8:	bl	10f00 <fclose@plt>
   159ac:	cmp	r6, #0
   159b0:	strne	r6, [r5]
   159b4:	mvnne	r0, #0
   159b8:	b	159d0 <__assert_fail@plt+0x4a4c>
   159bc:	mov	r0, r4
   159c0:	bl	10f00 <fclose@plt>
   159c4:	b	159d0 <__assert_fail@plt+0x4a4c>
   159c8:	mov	r0, r4
   159cc:	bl	10f00 <fclose@plt>
   159d0:	add	sp, sp, #8
   159d4:	ldrd	r4, [sp]
   159d8:	ldr	r6, [sp, #8]
   159dc:	add	sp, sp, #12
   159e0:	pop	{pc}		; (ldr pc, [sp], #4)
   159e4:	str	r4, [sp, #-8]!
   159e8:	str	lr, [sp, #4]
   159ec:	sub	sp, sp, #8
   159f0:	subs	r4, r0, #0
   159f4:	beq	15a08 <__assert_fail@plt+0x4a84>
   159f8:	mov	r0, r4
   159fc:	bl	10e40 <__freading@plt>
   15a00:	cmp	r0, #0
   15a04:	bne	15a20 <__assert_fail@plt+0x4a9c>
   15a08:	mov	r0, r4
   15a0c:	bl	10d20 <fflush@plt>
   15a10:	add	sp, sp, #8
   15a14:	ldr	r4, [sp]
   15a18:	add	sp, sp, #4
   15a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a20:	ldr	r3, [r4]
   15a24:	tst	r3, #256	; 0x100
   15a28:	bne	15a38 <__assert_fail@plt+0x4ab4>
   15a2c:	mov	r0, r4
   15a30:	bl	10d20 <fflush@plt>
   15a34:	b	15a10 <__assert_fail@plt+0x4a8c>
   15a38:	mov	r3, #1
   15a3c:	str	r3, [sp]
   15a40:	mov	r2, #0
   15a44:	mov	r3, #0
   15a48:	mov	r0, r4
   15a4c:	bl	15a54 <__assert_fail@plt+0x4ad0>
   15a50:	b	15a2c <__assert_fail@plt+0x4aa8>
   15a54:	str	r4, [sp, #-16]!
   15a58:	strd	r6, [sp, #4]
   15a5c:	str	lr, [sp, #12]
   15a60:	sub	sp, sp, #8
   15a64:	mov	r4, r0
   15a68:	mov	r6, r2
   15a6c:	mov	r7, r3
   15a70:	ldr	r2, [r0, #8]
   15a74:	ldr	r3, [r0, #4]
   15a78:	cmp	r2, r3
   15a7c:	beq	15aac <__assert_fail@plt+0x4b28>
   15a80:	ldr	r3, [sp, #24]
   15a84:	str	r3, [sp]
   15a88:	mov	r2, r6
   15a8c:	mov	r3, r7
   15a90:	mov	r0, r4
   15a94:	bl	10f0c <fseeko64@plt>
   15a98:	add	sp, sp, #8
   15a9c:	ldr	r4, [sp]
   15aa0:	ldrd	r6, [sp, #4]
   15aa4:	add	sp, sp, #12
   15aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aac:	ldr	r2, [r0, #20]
   15ab0:	ldr	r3, [r0, #16]
   15ab4:	cmp	r2, r3
   15ab8:	bne	15a80 <__assert_fail@plt+0x4afc>
   15abc:	ldr	r3, [r0, #36]	; 0x24
   15ac0:	cmp	r3, #0
   15ac4:	bne	15a80 <__assert_fail@plt+0x4afc>
   15ac8:	bl	10edc <fileno@plt>
   15acc:	ldr	r3, [sp, #24]
   15ad0:	str	r3, [sp]
   15ad4:	mov	r2, r6
   15ad8:	mov	r3, r7
   15adc:	bl	10dd4 <lseek64@plt>
   15ae0:	mvn	r2, #0
   15ae4:	mvn	r3, #0
   15ae8:	cmp	r1, r3
   15aec:	cmpeq	r0, r2
   15af0:	beq	15b0c <__assert_fail@plt+0x4b88>
   15af4:	ldr	r3, [r4]
   15af8:	bic	r3, r3, #16
   15afc:	str	r3, [r4]
   15b00:	strd	r0, [r4, #80]	; 0x50
   15b04:	mov	r0, #0
   15b08:	b	15a98 <__assert_fail@plt+0x4b14>
   15b0c:	mvn	r0, #0
   15b10:	b	15a98 <__assert_fail@plt+0x4b14>
   15b14:	str	r4, [sp, #-8]!
   15b18:	str	lr, [sp, #4]
   15b1c:	mov	r0, #14
   15b20:	bl	10f48 <nl_langinfo@plt>
   15b24:	cmp	r0, #0
   15b28:	beq	15b4c <__assert_fail@plt+0x4bc8>
   15b2c:	ldrb	r2, [r0]
   15b30:	movw	r3, #27516	; 0x6b7c
   15b34:	movt	r3, #1
   15b38:	cmp	r2, #0
   15b3c:	moveq	r0, r3
   15b40:	ldr	r4, [sp]
   15b44:	add	sp, sp, #4
   15b48:	pop	{pc}		; (ldr pc, [sp], #4)
   15b4c:	movw	r0, #27516	; 0x6b7c
   15b50:	movt	r0, #1
   15b54:	b	15b40 <__assert_fail@plt+0x4bbc>
   15b58:	strd	r4, [sp, #-20]!	; 0xffffffec
   15b5c:	strd	r6, [sp, #8]
   15b60:	str	lr, [sp, #16]
   15b64:	sub	sp, sp, #12
   15b68:	mov	r7, r1
   15b6c:	mov	r5, r2
   15b70:	subs	r6, r0, #0
   15b74:	addeq	r6, sp, #4
   15b78:	mov	r0, r6
   15b7c:	bl	10df8 <mbrtowc@plt>
   15b80:	mov	r4, r0
   15b84:	cmp	r5, #0
   15b88:	cmnne	r0, #3
   15b8c:	bhi	15ba8 <__assert_fail@plt+0x4c24>
   15b90:	mov	r0, r4
   15b94:	add	sp, sp, #12
   15b98:	ldrd	r4, [sp]
   15b9c:	ldrd	r6, [sp, #8]
   15ba0:	add	sp, sp, #16
   15ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ba8:	mov	r0, #0
   15bac:	bl	15c04 <__assert_fail@plt+0x4c80>
   15bb0:	cmp	r0, #0
   15bb4:	bne	15b90 <__assert_fail@plt+0x4c0c>
   15bb8:	ldrb	r3, [r7]
   15bbc:	str	r3, [r6]
   15bc0:	mov	r4, #1
   15bc4:	b	15b90 <__assert_fail@plt+0x4c0c>
   15bc8:	str	r4, [sp, #-8]!
   15bcc:	str	lr, [sp, #4]
   15bd0:	umull	r2, r3, r1, r2
   15bd4:	cmp	r3, #0
   15bd8:	bne	15bf0 <__assert_fail@plt+0x4c6c>
   15bdc:	mov	r1, r2
   15be0:	bl	15560 <__assert_fail@plt+0x45dc>
   15be4:	ldr	r4, [sp]
   15be8:	add	sp, sp, #4
   15bec:	pop	{pc}		; (ldr pc, [sp], #4)
   15bf0:	bl	10eac <__errno_location@plt>
   15bf4:	mov	r3, #12
   15bf8:	str	r3, [r0]
   15bfc:	mov	r0, #0
   15c00:	b	15be4 <__assert_fail@plt+0x4c60>
   15c04:	push	{lr}		; (str lr, [sp, #-4]!)
   15c08:	sub	sp, sp, #268	; 0x10c
   15c0c:	movw	r2, #257	; 0x101
   15c10:	add	r1, sp, #4
   15c14:	bl	15c60 <__assert_fail@plt+0x4cdc>
   15c18:	cmp	r0, #0
   15c1c:	movne	r0, #0
   15c20:	bne	15c58 <__assert_fail@plt+0x4cd4>
   15c24:	movw	r1, #27540	; 0x6b94
   15c28:	movt	r1, #1
   15c2c:	add	r0, sp, #4
   15c30:	bl	10d14 <strcmp@plt>
   15c34:	cmp	r0, #0
   15c38:	beq	15c54 <__assert_fail@plt+0x4cd0>
   15c3c:	movw	r1, #27544	; 0x6b98
   15c40:	movt	r1, #1
   15c44:	add	r0, sp, #4
   15c48:	bl	10d14 <strcmp@plt>
   15c4c:	adds	r0, r0, #0
   15c50:	movne	r0, #1
   15c54:	and	r0, r0, #1
   15c58:	add	sp, sp, #268	; 0x10c
   15c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c60:	strd	r4, [sp, #-16]!
   15c64:	str	r6, [sp, #8]
   15c68:	str	lr, [sp, #12]
   15c6c:	mov	r6, r1
   15c70:	mov	r4, r2
   15c74:	mov	r1, #0
   15c78:	bl	10f24 <setlocale@plt>
   15c7c:	subs	r5, r0, #0
   15c80:	beq	15cc4 <__assert_fail@plt+0x4d40>
   15c84:	mov	r0, r5
   15c88:	bl	10e94 <strlen@plt>
   15c8c:	cmp	r4, r0
   15c90:	bhi	15ce0 <__assert_fail@plt+0x4d5c>
   15c94:	cmp	r4, #0
   15c98:	moveq	r0, #34	; 0x22
   15c9c:	beq	15cf4 <__assert_fail@plt+0x4d70>
   15ca0:	sub	r4, r4, #1
   15ca4:	mov	r2, r4
   15ca8:	mov	r1, r5
   15cac:	mov	r0, r6
   15cb0:	bl	10d44 <memcpy@plt>
   15cb4:	mov	r3, #0
   15cb8:	strb	r3, [r6, r4]
   15cbc:	mov	r0, #34	; 0x22
   15cc0:	b	15cf4 <__assert_fail@plt+0x4d70>
   15cc4:	cmp	r4, #0
   15cc8:	moveq	r0, #22
   15ccc:	beq	15cf4 <__assert_fail@plt+0x4d70>
   15cd0:	mov	r3, #0
   15cd4:	strb	r3, [r6]
   15cd8:	mov	r0, #22
   15cdc:	b	15cf4 <__assert_fail@plt+0x4d70>
   15ce0:	add	r2, r0, #1
   15ce4:	mov	r1, r5
   15ce8:	mov	r0, r6
   15cec:	bl	10d44 <memcpy@plt>
   15cf0:	mov	r0, #0
   15cf4:	ldrd	r4, [sp]
   15cf8:	ldr	r6, [sp, #8]
   15cfc:	add	sp, sp, #12
   15d00:	pop	{pc}		; (ldr pc, [sp], #4)
   15d04:	str	r4, [sp, #-8]!
   15d08:	str	lr, [sp, #4]
   15d0c:	mov	r1, #0
   15d10:	bl	10f24 <setlocale@plt>
   15d14:	ldr	r4, [sp]
   15d18:	add	sp, sp, #4
   15d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d24:	mov	r7, r0
   15d28:	ldr	r6, [pc, #72]	; 15d78 <__assert_fail@plt+0x4df4>
   15d2c:	ldr	r5, [pc, #72]	; 15d7c <__assert_fail@plt+0x4df8>
   15d30:	add	r6, pc, r6
   15d34:	add	r5, pc, r5
   15d38:	sub	r6, r6, r5
   15d3c:	mov	r8, r1
   15d40:	mov	r9, r2
   15d44:	bl	10cdc <calloc@plt-0x20>
   15d48:	asrs	r6, r6, #2
   15d4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d50:	mov	r4, #0
   15d54:	add	r4, r4, #1
   15d58:	ldr	r3, [r5], #4
   15d5c:	mov	r2, r9
   15d60:	mov	r1, r8
   15d64:	mov	r0, r7
   15d68:	blx	r3
   15d6c:	cmp	r6, r4
   15d70:	bne	15d54 <__assert_fail@plt+0x4dd0>
   15d74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d78:	ldrdeq	r1, [r1], -ip
   15d7c:	ldrdeq	r1, [r1], -r4
   15d80:	bx	lr
   15d84:	ldr	r3, [pc, #12]	; 15d98 <__assert_fail@plt+0x4e14>
   15d88:	mov	r1, #0
   15d8c:	add	r3, pc, r3
   15d90:	ldr	r2, [r3]
   15d94:	b	10eb8 <__cxa_atexit@plt>
   15d98:	andeq	r1, r1, ip, asr r3

Disassembly of section .fini:

00015d9c <.fini>:
   15d9c:	push	{r3, lr}
   15da0:	pop	{r3, pc}
