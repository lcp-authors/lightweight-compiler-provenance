
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012394 <.init>:
   12394:	push	{r3, lr}
   12398:	bl	124e4 <_start@@Base+0x3c>
   1239c:	pop	{r3, pc}

Disassembly of section .plt:

000123a0 <strcmp@plt-0x14>:
   123a0:	push	{lr}		; (str lr, [sp, #-4]!)
   123a4:	ldr	lr, [pc, #4]	; 123b0 <strcmp@plt-0x4>
   123a8:	add	lr, pc, lr
   123ac:	ldr	pc, [lr, #8]!
   123b0:	andeq	r7, r1, r0, asr ip

000123b4 <strcmp@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #94208	; 0x17000
   123bc:	ldr	pc, [ip, #3152]!	; 0xc50

000123c0 <printf@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #94208	; 0x17000
   123c8:	ldr	pc, [ip, #3144]!	; 0xc48

000123cc <fopen@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #94208	; 0x17000
   123d4:	ldr	pc, [ip, #3136]!	; 0xc40

000123d8 <free@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #94208	; 0x17000
   123e0:	ldr	pc, [ip, #3128]!	; 0xc38

000123e4 <memcpy@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #94208	; 0x17000
   123ec:	ldr	pc, [ip, #3120]!	; 0xc30

000123f0 <fwrite_unlocked@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #94208	; 0x17000
   123f8:	ldr	pc, [ip, #3112]!	; 0xc28

000123fc <realloc@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #94208	; 0x17000
   12404:	ldr	pc, [ip, #3104]!	; 0xc20

00012408 <gettimeofday@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #94208	; 0x17000
   12410:	ldr	pc, [ip, #3096]!	; 0xc18

00012414 <puts@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #94208	; 0x17000
   1241c:	ldr	pc, [ip, #3088]!	; 0xc10

00012420 <malloc@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #94208	; 0x17000
   12428:	ldr	pc, [ip, #3080]!	; 0xc08

0001242c <__libc_start_main@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #94208	; 0x17000
   12434:	ldr	pc, [ip, #3072]!	; 0xc00

00012438 <__gmon_start__@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #94208	; 0x17000
   12440:	ldr	pc, [ip, #3064]!	; 0xbf8

00012444 <bcmp@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #94208	; 0x17000
   1244c:	ldr	pc, [ip, #3056]!	; 0xbf0

00012450 <strlen@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #94208	; 0x17000
   12458:	ldr	pc, [ip, #3048]!	; 0xbe8

0001245c <posix_memalign@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #94208	; 0x17000
   12464:	ldr	pc, [ip, #3040]!	; 0xbe0

00012468 <memset@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #94208	; 0x17000
   12470:	ldr	pc, [ip, #3032]!	; 0xbd8

00012474 <memchr@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #94208	; 0x17000
   1247c:	ldr	pc, [ip, #3024]!	; 0xbd0

00012480 <fclose@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #94208	; 0x17000
   12488:	ldr	pc, [ip, #3016]!	; 0xbc8

0001248c <abort@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #94208	; 0x17000
   12494:	ldr	pc, [ip, #3008]!	; 0xbc0

00012498 <__assert_fail@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #94208	; 0x17000
   124a0:	ldr	pc, [ip, #3000]!	; 0xbb8

Disassembly of section .text:

000124a8 <_start@@Base>:
   124a8:	mov	fp, #0
   124ac:	mov	lr, #0
   124b0:	pop	{r1}		; (ldr r1, [sp], #4)
   124b4:	mov	r2, sp
   124b8:	push	{r2}		; (str r2, [sp, #-4]!)
   124bc:	push	{r0}		; (str r0, [sp, #-4]!)
   124c0:	ldr	ip, [pc, #16]	; 124d8 <_start@@Base+0x30>
   124c4:	push	{ip}		; (str ip, [sp, #-4]!)
   124c8:	ldr	r0, [pc, #12]	; 124dc <_start@@Base+0x34>
   124cc:	ldr	r3, [pc, #12]	; 124e0 <_start@@Base+0x38>
   124d0:	bl	1242c <__libc_start_main@plt>
   124d4:	bl	1248c <abort@plt>
   124d8:	andeq	r8, r1, r4, lsl r3
   124dc:	muleq	r1, r8, r5
   124e0:			; <UNDEFINED> instruction: 0x000182b4
   124e4:	ldr	r3, [pc, #20]	; 12500 <_start@@Base+0x58>
   124e8:	ldr	r2, [pc, #20]	; 12504 <_start@@Base+0x5c>
   124ec:	add	r3, pc, r3
   124f0:	ldr	r2, [r3, r2]
   124f4:	cmp	r2, #0
   124f8:	bxeq	lr
   124fc:	b	12438 <__gmon_start__@plt>
   12500:	andeq	r7, r1, ip, lsl #22
   12504:	andeq	r0, r0, r0, rrx
   12508:	ldr	r0, [pc, #24]	; 12528 <_start@@Base+0x80>
   1250c:	ldr	r3, [pc, #24]	; 1252c <_start@@Base+0x84>
   12510:	cmp	r3, r0
   12514:	bxeq	lr
   12518:	ldr	r3, [pc, #16]	; 12530 <_start@@Base+0x88>
   1251c:	cmp	r3, #0
   12520:	bxeq	lr
   12524:	bx	r3
   12528:	andeq	sl, r2, r4, ror r0
   1252c:	andeq	sl, r2, r4, ror r0
   12530:	andeq	r0, r0, r0
   12534:	ldr	r0, [pc, #36]	; 12560 <_start@@Base+0xb8>
   12538:	ldr	r1, [pc, #36]	; 12564 <_start@@Base+0xbc>
   1253c:	sub	r1, r1, r0
   12540:	asr	r1, r1, #2
   12544:	add	r1, r1, r1, lsr #31
   12548:	asrs	r1, r1, #1
   1254c:	bxeq	lr
   12550:	ldr	r3, [pc, #16]	; 12568 <_start@@Base+0xc0>
   12554:	cmp	r3, #0
   12558:	bxeq	lr
   1255c:	bx	r3
   12560:	andeq	sl, r2, r4, ror r0
   12564:	andeq	sl, r2, r4, ror r0
   12568:	andeq	r0, r0, r0
   1256c:	push	{r4, lr}
   12570:	ldr	r4, [pc, #24]	; 12590 <_start@@Base+0xe8>
   12574:	ldrb	r3, [r4]
   12578:	cmp	r3, #0
   1257c:	popne	{r4, pc}
   12580:	bl	12508 <_start@@Base+0x60>
   12584:	mov	r3, #1
   12588:	strb	r3, [r4]
   1258c:	pop	{r4, pc}
   12590:	andeq	sl, r2, r8, ror r0
   12594:	b	12534 <_start@@Base+0x8c>

00012598 <main@@Base>:
   12598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1259c:	add	fp, sp, #28
   125a0:	sub	sp, sp, #4
   125a4:	vpush	{d8-d10}
   125a8:	sub	sp, sp, #280	; 0x118
   125ac:	add	r4, sp, #28
   125b0:	mov	r0, r4
   125b4:	bl	1308c <flatcc_builder_init@@Base>
   125b8:	mov	r0, r4
   125bc:	bl	12c48 <main@@Base+0x6b0>
   125c0:	sub	r1, fp, #76	; 0x4c
   125c4:	mov	r0, r4
   125c8:	bl	17b00 <flatcc_builder_finalize_buffer@@Base>
   125cc:	mov	r7, r0
   125d0:	ldr	r0, [pc, #1456]	; 12b88 <main@@Base+0x5f0>
   125d4:	ldr	r1, [pc, #1456]	; 12b8c <main@@Base+0x5f4>
   125d8:	add	r0, pc, r0
   125dc:	add	r1, pc, r1
   125e0:	bl	123cc <fopen@plt>
   125e4:	cmp	r0, #0
   125e8:	beq	1266c <main@@Base+0xd4>
   125ec:	ldr	r6, [fp, #-76]	; 0xffffffb4
   125f0:	mov	r5, r0
   125f4:	mov	r0, r7
   125f8:	mov	r1, #1
   125fc:	mov	r4, #1
   12600:	mov	r3, r5
   12604:	mov	r2, r6
   12608:	bl	123f0 <fwrite_unlocked@plt>
   1260c:	mov	r8, r0
   12610:	mov	r0, r5
   12614:	bl	12480 <fclose@plt>
   12618:	cmp	r6, r8
   1261c:	bne	12a1c <main@@Base+0x484>
   12620:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12624:	ldr	r0, [pc, #1380]	; 12b90 <main@@Base+0x5f8>
   12628:	add	r0, pc, r0
   1262c:	bl	123c0 <printf@plt>
   12630:	ldr	r0, [pc, #1372]	; 12b94 <main@@Base+0x5fc>
   12634:	add	r0, pc, r0
   12638:	bl	12414 <puts@plt>
   1263c:	sub	r0, fp, #72	; 0x48
   12640:	mov	r1, #0
   12644:	bl	12408 <gettimeofday@plt>
   12648:	ldr	r0, [pc, #1352]	; 12b98 <main@@Base+0x600>
   1264c:	ldr	r0, [pc, r0]
   12650:	ldr	r2, [pc, #1348]	; 12b9c <main@@Base+0x604>
   12654:	cmp	r0, #0
   12658:	add	r2, pc, r2
   1265c:	beq	12674 <main@@Base+0xdc>
   12660:	ldr	r1, [r2, #4]
   12664:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12668:	b	12684 <main@@Base+0xec>
   1266c:	mvn	r4, #0
   12670:	b	12a1c <main@@Base+0x484>
   12674:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12678:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1267c:	strd	r0, [r2]
   12680:	mov	r2, r0
   12684:	sub	r0, r2, r0
   12688:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1268c:	vldr	d8, [pc, #964]	; 12a58 <main@@Base+0x4c0>
   12690:	vmov	s2, r0
   12694:	add	r0, r7, #8
   12698:	sub	r1, r2, r1
   1269c:	vmov	s0, r1
   126a0:	vcvt.f64.s32	d16, s0
   126a4:	vcvt.f64.s32	d17, s2
   126a8:	str	r0, [sp, #8]
   126ac:	mov	r0, #0
   126b0:	ldr	sl, [pc, #1256]	; 12ba0 <main@@Base+0x608>
   126b4:	ldr	r6, [pc, #1256]	; 12ba4 <main@@Base+0x60c>
   126b8:	str	r7, [sp, #4]
   126bc:	vdiv.f64	d16, d16, d8
   126c0:	add	sl, pc, sl
   126c4:	add	r6, pc, r6
   126c8:	vadd.f64	d9, d16, d17
   126cc:	add	r4, sp, #28
   126d0:	str	r0, [sp, #12]
   126d4:	mov	r0, r4
   126d8:	bl	12c48 <main@@Base+0x6b0>
   126dc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   126e0:	mov	r0, r4
   126e4:	mov	r1, r7
   126e8:	bl	17aa8 <flatcc_builder_copy_buffer@@Base>
   126ec:	cmp	r7, #0
   126f0:	beq	12b48 <main@@Base+0x5b0>
   126f4:	ldr	r0, [r7, #4]
   126f8:	movw	r1, #20301	; 0x4f4d
   126fc:	movt	r1, #21326	; 0x534e
   12700:	cmp	r0, r1
   12704:	bne	12b48 <main@@Base+0x5b0>
   12708:	ldr	r8, [r7]
   1270c:	mov	r5, r7
   12710:	ldr	r0, [r5, r8]!
   12714:	mov	r4, r5
   12718:	ldrh	r9, [r4, -r0]!
   1271c:	cmp	r9, #11
   12720:	bls	12ac8 <main@@Base+0x530>
   12724:	ldrh	r0, [r4, #10]
   12728:	cmp	r0, #0
   1272c:	beq	12ac8 <main@@Base+0x530>
   12730:	mov	r1, r5
   12734:	ldr	r0, [r1, r0]!
   12738:	add	r0, r1, r0
   1273c:	ldr	r1, [pc, #1140]	; 12bb8 <main@@Base+0x620>
   12740:	add	r0, r0, #4
   12744:	add	r1, pc, r1
   12748:	bl	123b4 <strcmp@plt>
   1274c:	cmp	r0, #0
   12750:	bne	12b54 <main@@Base+0x5bc>
   12754:	cmp	r9, #28
   12758:	bcc	12b28 <main@@Base+0x590>
   1275c:	ldrh	r0, [r4, #26]
   12760:	cmp	r0, #0
   12764:	beq	12b28 <main@@Base+0x590>
   12768:	ldr	r1, [r5, r0]!
   1276c:	ldr	r2, [r5, r1]!
   12770:	cmp	r2, #1000	; 0x3e8
   12774:	bne	12b28 <main@@Base+0x590>
   12778:	add	r1, r1, r8
   1277c:	add	r2, r5, #4
   12780:	add	r0, r1, r0
   12784:	ldr	r1, [sp, #8]
   12788:	str	r2, [sp, #16]
   1278c:	add	r7, r1, r0
   12790:	mov	r0, #0
   12794:	ldr	r4, [sp, #16]
   12798:	str	r0, [sp, #20]
   1279c:	ldr	lr, [r4, r0, lsl #2]!
   127a0:	ldr	r1, [r4, lr]!
   127a4:	mov	r0, r4
   127a8:	ldrh	r2, [r0, -r1]!
   127ac:	cmp	r2, #12
   127b0:	bcc	12ac8 <main@@Base+0x530>
   127b4:	ldrh	r1, [r0, #10]
   127b8:	cmp	r1, #0
   127bc:	beq	12ac8 <main@@Base+0x530>
   127c0:	mov	r3, r4
   127c4:	mov	r5, #0
   127c8:	cmp	r2, #16
   127cc:	ldr	ip, [r3, r1]!
   127d0:	add	r3, r3, ip
   127d4:	add	r3, r3, #4
   127d8:	bcc	127f0 <main@@Base+0x258>
   127dc:	ldrh	r2, [r0, #14]
   127e0:	cmp	r2, #0
   127e4:	ldrne	r0, [r4, r2]!
   127e8:	addne	r0, r4, r0
   127ec:	addne	r5, r0, #4
   127f0:	ldr	r0, [r3, #-4]
   127f4:	cmp	r0, #700	; 0x2bc
   127f8:	bne	12b08 <main@@Base+0x570>
   127fc:	cmp	r5, #0
   12800:	beq	12ae8 <main@@Base+0x550>
   12804:	ldr	r0, [r5, #-4]
   12808:	movw	r2, #34464	; 0x86a0
   1280c:	movt	r2, #1
   12810:	cmp	r0, r2
   12814:	bne	12ae8 <main@@Base+0x550>
   12818:	add	r0, ip, lr
   1281c:	mov	r4, r3
   12820:	mov	r9, #0
   12824:	str	r7, [sp, #24]
   12828:	add	r0, r0, r1
   1282c:	add	r8, r7, r0
   12830:	mov	r0, r8
   12834:	mov	r1, sl
   12838:	mov	r2, #7
   1283c:	bl	12444 <bcmp@plt>
   12840:	cmp	r0, #0
   12844:	bne	12a60 <main@@Base+0x4c8>
   12848:	add	r9, r9, #1
   1284c:	add	r8, r8, #7
   12850:	cmp	r9, #100	; 0x64
   12854:	bne	12830 <main@@Base+0x298>
   12858:	ldr	r7, [sp, #24]
   1285c:	mov	r4, #100	; 0x64
   12860:	mov	r0, r5
   12864:	mov	r1, r6
   12868:	mov	r2, #1000	; 0x3e8
   1286c:	bl	12444 <bcmp@plt>
   12870:	cmp	r0, #0
   12874:	bne	12aa8 <main@@Base+0x510>
   12878:	add	r5, r5, #1000	; 0x3e8
   1287c:	subs	r4, r4, #1
   12880:	bne	12860 <main@@Base+0x2c8>
   12884:	ldr	r0, [sp, #20]
   12888:	add	r7, r7, #4
   1288c:	add	r0, r0, #1
   12890:	cmp	r0, #1000	; 0x3e8
   12894:	bne	12794 <main@@Base+0x1fc>
   12898:	ldr	r0, [sp, #12]
   1289c:	ldr	r7, [sp, #4]
   128a0:	add	r0, r0, #1
   128a4:	cmp	r0, #10
   128a8:	bne	126cc <main@@Base+0x134>
   128ac:	sub	r0, fp, #72	; 0x48
   128b0:	mov	r1, #0
   128b4:	bl	12408 <gettimeofday@plt>
   128b8:	ldr	r6, [pc, #776]	; 12bc8 <main@@Base+0x630>
   128bc:	ldr	r6, [pc, r6]
   128c0:	cmp	r6, #0
   128c4:	beq	128dc <main@@Base+0x344>
   128c8:	ldr	r0, [pc, #764]	; 12bcc <main@@Base+0x634>
   128cc:	ldr	r8, [fp, #-72]	; 0xffffffb8
   128d0:	add	r0, pc, r0
   128d4:	ldr	r9, [r0, #4]
   128d8:	b	128f4 <main@@Base+0x35c>
   128dc:	ldr	r6, [fp, #-72]	; 0xffffffb8
   128e0:	ldr	r9, [fp, #-68]	; 0xffffffbc
   128e4:	ldr	r0, [pc, #740]	; 12bd0 <main@@Base+0x638>
   128e8:	add	r0, pc, r0
   128ec:	mov	r8, r6
   128f0:	stm	r0, {r6, r9}
   128f4:	ldr	r5, [fp, #-68]	; 0xffffffbc
   128f8:	ldr	r4, [fp, #-76]	; 0xffffffb4
   128fc:	ldr	r0, [pc, #720]	; 12bd4 <main@@Base+0x63c>
   12900:	ldr	r1, [pc, #720]	; 12bd8 <main@@Base+0x640>
   12904:	add	r0, pc, r0
   12908:	add	r1, pc, r1
   1290c:	bl	123c0 <printf@plt>
   12910:	sub	r1, r5, r9
   12914:	sub	r0, r8, r6
   12918:	vmov	s0, r1
   1291c:	vmov	s2, r0
   12920:	vcvt.f64.s32	d16, s0
   12924:	vcvt.f64.s32	d17, s2
   12928:	ldr	r0, [pc, #684]	; 12bdc <main@@Base+0x644>
   1292c:	add	r0, pc, r0
   12930:	vdiv.f64	d16, d16, d8
   12934:	vadd.f64	d16, d16, d17
   12938:	vsub.f64	d9, d16, d9
   1293c:	vmov	r2, r3, d9
   12940:	bl	123c0 <printf@plt>
   12944:	ldr	r0, [pc, #660]	; 12be0 <main@@Base+0x648>
   12948:	mov	r1, #10
   1294c:	add	r0, pc, r0
   12950:	bl	123c0 <printf@plt>
   12954:	ldr	r0, [pc, #648]	; 12be4 <main@@Base+0x64c>
   12958:	mov	r1, r4
   1295c:	add	r0, pc, r0
   12960:	bl	123c0 <printf@plt>
   12964:	vmov	s0, r4
   12968:	vmov.f64	d10, #36	; 0x41200000  10.0
   1296c:	vcvt.f64.u32	d16, s0
   12970:	ldr	r0, [pc, #624]	; 12be8 <main@@Base+0x650>
   12974:	add	r0, pc, r0
   12978:	vmul.f64	d16, d16, d10
   1297c:	vdiv.f64	d16, d16, d8
   12980:	vdiv.f64	d16, d16, d9
   12984:	vmov	r2, r3, d16
   12988:	bl	123c0 <printf@plt>
   1298c:	vdiv.f64	d16, d10, d9
   12990:	ldr	r0, [pc, #596]	; 12bec <main@@Base+0x654>
   12994:	add	r0, pc, r0
   12998:	vmov	r2, r3, d16
   1299c:	bl	123c0 <printf@plt>
   129a0:	vldr	d17, [pc, #464]	; 12b78 <main@@Base+0x5e0>
   129a4:	vldr	d18, [pc, #468]	; 12b80 <main@@Base+0x5e8>
   129a8:	vmul.f64	d16, d9, d17
   129ac:	vdiv.f64	d16, d16, d10
   129b0:	vcmpe.f64	d16, d18
   129b4:	vmrs	APSR_nzcv, fpscr
   129b8:	bpl	129cc <main@@Base+0x434>
   129bc:	ldr	r0, [pc, #556]	; 12bf0 <main@@Base+0x658>
   129c0:	vmov	r2, r3, d16
   129c4:	add	r0, pc, r0
   129c8:	b	12a14 <main@@Base+0x47c>
   129cc:	vcmpe.f64	d16, d8
   129d0:	vmrs	APSR_nzcv, fpscr
   129d4:	bpl	129e8 <main@@Base+0x450>
   129d8:	vdiv.f64	d16, d16, d18
   129dc:	ldr	r0, [pc, #528]	; 12bf4 <main@@Base+0x65c>
   129e0:	add	r0, pc, r0
   129e4:	b	12a10 <main@@Base+0x478>
   129e8:	vcmpe.f64	d16, d17
   129ec:	vmrs	APSR_nzcv, fpscr
   129f0:	bpl	12a04 <main@@Base+0x46c>
   129f4:	vdiv.f64	d16, d16, d8
   129f8:	ldr	r0, [pc, #504]	; 12bf8 <main@@Base+0x660>
   129fc:	add	r0, pc, r0
   12a00:	b	12a10 <main@@Base+0x478>
   12a04:	vdiv.f64	d16, d16, d17
   12a08:	ldr	r0, [pc, #492]	; 12bfc <main@@Base+0x664>
   12a0c:	add	r0, pc, r0
   12a10:	vmov	r2, r3, d16
   12a14:	bl	123c0 <printf@plt>
   12a18:	mov	r4, #0
   12a1c:	add	r0, sp, #28
   12a20:	bl	133fc <flatcc_builder_clear@@Base>
   12a24:	mov	r0, r7
   12a28:	bl	123d8 <free@plt>
   12a2c:	cmp	r4, #0
   12a30:	beq	12a40 <main@@Base+0x4a8>
   12a34:	ldr	r0, [pc, #452]	; 12c00 <main@@Base+0x668>
   12a38:	add	r0, pc, r0
   12a3c:	bl	12414 <puts@plt>
   12a40:	mov	r0, r4
   12a44:	sub	sp, fp, #56	; 0x38
   12a48:	vpop	{d8-d10}
   12a4c:	add	sp, sp, #4
   12a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a54:	nop	{0}
   12a58:	andeq	r0, r0, r0
   12a5c:	smlawbmi	lr, r0, r4, r8
   12a60:	ldr	r0, [pc, #460]	; 12c34 <main@@Base+0x69c>
   12a64:	mov	r1, r9
   12a68:	mov	r2, r4
   12a6c:	add	r0, pc, r0
   12a70:	bl	123c0 <printf@plt>
   12a74:	ldr	r0, [sp, #4]
   12a78:	sub	r1, r8, r0
   12a7c:	ldr	r0, [pc, #436]	; 12c38 <main@@Base+0x6a0>
   12a80:	add	r0, pc, r0
   12a84:	bl	123c0 <printf@plt>
   12a88:	ldr	r0, [pc, #428]	; 12c3c <main@@Base+0x6a4>
   12a8c:	ldr	r1, [pc, #428]	; 12c40 <main@@Base+0x6a8>
   12a90:	ldr	r3, [pc, #428]	; 12c44 <main@@Base+0x6ac>
   12a94:	mov	r2, #85	; 0x55
   12a98:	add	r0, pc, r0
   12a9c:	add	r1, pc, r1
   12aa0:	add	r3, pc, r3
   12aa4:	bl	12498 <__assert_fail@plt>
   12aa8:	ldr	r0, [pc, #268]	; 12bbc <main@@Base+0x624>
   12aac:	ldr	r1, [pc, #268]	; 12bc0 <main@@Base+0x628>
   12ab0:	ldr	r3, [pc, #268]	; 12bc4 <main@@Base+0x62c>
   12ab4:	mov	r2, #91	; 0x5b
   12ab8:	add	r0, pc, r0
   12abc:	add	r1, pc, r1
   12ac0:	add	r3, pc, r3
   12ac4:	bl	12498 <__assert_fail@plt>
   12ac8:	ldr	r0, [pc, #216]	; 12ba8 <main@@Base+0x610>
   12acc:	add	r0, pc, r0
   12ad0:	ldr	r1, [pc, #216]	; 12bb0 <main@@Base+0x618>
   12ad4:	ldr	r3, [pc, #216]	; 12bb4 <main@@Base+0x61c>
   12ad8:	movw	r2, #699	; 0x2bb
   12adc:	add	r1, pc, r1
   12ae0:	add	r3, pc, r3
   12ae4:	bl	12498 <__assert_fail@plt>
   12ae8:	ldr	r0, [pc, #312]	; 12c28 <main@@Base+0x690>
   12aec:	ldr	r1, [pc, #312]	; 12c2c <main@@Base+0x694>
   12af0:	ldr	r3, [pc, #312]	; 12c30 <main@@Base+0x698>
   12af4:	mov	r2, #78	; 0x4e
   12af8:	add	r0, pc, r0
   12afc:	add	r1, pc, r1
   12b00:	add	r3, pc, r3
   12b04:	bl	12498 <__assert_fail@plt>
   12b08:	ldr	r0, [pc, #268]	; 12c1c <main@@Base+0x684>
   12b0c:	ldr	r1, [pc, #268]	; 12c20 <main@@Base+0x688>
   12b10:	ldr	r3, [pc, #268]	; 12c24 <main@@Base+0x68c>
   12b14:	mov	r2, #74	; 0x4a
   12b18:	add	r0, pc, r0
   12b1c:	add	r1, pc, r1
   12b20:	add	r3, pc, r3
   12b24:	bl	12498 <__assert_fail@plt>
   12b28:	ldr	r0, [pc, #224]	; 12c10 <main@@Base+0x678>
   12b2c:	ldr	r1, [pc, #224]	; 12c14 <main@@Base+0x67c>
   12b30:	ldr	r3, [pc, #224]	; 12c18 <main@@Base+0x680>
   12b34:	mov	r2, #143	; 0x8f
   12b38:	add	r0, pc, r0
   12b3c:	add	r1, pc, r1
   12b40:	add	r3, pc, r3
   12b44:	bl	12498 <__assert_fail@plt>
   12b48:	ldr	r0, [pc, #92]	; 12bac <main@@Base+0x614>
   12b4c:	add	r0, pc, r0
   12b50:	b	12ad0 <main@@Base+0x538>
   12b54:	ldr	r0, [pc, #168]	; 12c04 <main@@Base+0x66c>
   12b58:	ldr	r1, [pc, #168]	; 12c08 <main@@Base+0x670>
   12b5c:	ldr	r3, [pc, #168]	; 12c0c <main@@Base+0x674>
   12b60:	mov	r2, #139	; 0x8b
   12b64:	add	r0, pc, r0
   12b68:	add	r1, pc, r1
   12b6c:	add	r3, pc, r3
   12b70:	bl	12498 <__assert_fail@plt>
   12b74:	nop	{0}
   12b78:	andeq	r0, r0, r0
   12b7c:	bicmi	ip, sp, r5, ror #26
   12b80:	andeq	r0, r0, r0
   12b84:	addmi	r4, pc, r0
   12b88:	andeq	r5, r0, r4, asr #26
   12b8c:	andeq	r5, r0, r6, asr sp
   12b90:	andeq	r5, r0, sp, lsl #26
   12b94:	andeq	r6, r0, r7, lsr #4
   12b98:	andeq	r7, r1, r4, lsl lr
   12b9c:	andeq	r7, r1, r8, lsl #28
   12ba0:			; <UNDEFINED> instruction: 0x00005dba
   12ba4:			; <UNDEFINED> instruction: 0x000179b4
   12ba8:	andeq	r5, r0, sp, lsl #24
   12bac:	andeq	r5, r0, r0, lsr #21
   12bb0:	andeq	r5, r0, r6, lsr fp
   12bb4:	andeq	r5, r0, r8, lsr #23
   12bb8:	andeq	r5, r0, r3, lsl #24
   12bbc:	andeq	r7, r0, r7, lsl #3
   12bc0:	andeq	r5, r0, r1, lsr #17
   12bc4:	andeq	r5, r0, sl, lsr ip
   12bc8:	andeq	r7, r1, r4, lsr #23
   12bcc:	muleq	r1, r0, fp
   12bd0:	andeq	r7, r1, r8, ror fp
   12bd4:	andeq	r5, r0, r4, ror #28
   12bd8:	andeq	r5, r0, lr, asr #21
   12bdc:	andeq	r5, r0, fp, asr #28
   12be0:	andeq	r5, r0, r3, asr #28
   12be4:	andeq	r5, r0, r3, asr #28
   12be8:	andeq	r5, r0, lr, lsr lr
   12bec:	andeq	r5, r0, r6, lsr lr
   12bf0:	andeq	r5, r0, r7, lsr #28
   12bf4:	andeq	r5, r0, r3, lsr #28
   12bf8:	andeq	r5, r0, pc, lsl lr
   12bfc:	andeq	r5, r0, r7, lsr #28
   12c00:	andeq	r5, r0, r2, lsl lr
   12c04:	strdeq	r5, [r0], -r0
   12c08:	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   12c0c:	andeq	r5, r0, r3, asr r8
   12c10:	andeq	r5, r0, ip, lsl r8
   12c14:	andeq	r5, r0, r1, lsr #16
   12c18:	andeq	r5, r0, pc, ror r8
   12c1c:	andeq	r7, r0, r7, lsr #2
   12c20:	andeq	r5, r0, r1, asr #16
   12c24:	ldrdeq	r5, [r0], -sl
   12c28:	andeq	r7, r0, r7, asr #2
   12c2c:	andeq	r5, r0, r1, ror #16
   12c30:	strdeq	r5, [r0], -sl
   12c34:	andeq	r5, r0, pc, asr #25
   12c38:	ldrdeq	r5, [r0], -fp
   12c3c:	andeq	r7, r0, r7, lsr #3
   12c40:	andeq	r5, r0, r1, asr #17
   12c44:	andeq	r5, r0, sl, asr ip
   12c48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c4c:	add	fp, sp, #24
   12c50:	mov	r4, r0
   12c54:	bl	13238 <flatcc_builder_reset@@Base>
   12c58:	ldr	r1, [pc, #548]	; 12e84 <main@@Base+0x8ec>
   12c5c:	mov	r0, r4
   12c60:	mov	r2, #0
   12c64:	mov	r3, #0
   12c68:	add	r1, pc, r1
   12c6c:	bl	13e34 <flatcc_builder_start_buffer@@Base>
   12c70:	cmp	r0, #0
   12c74:	bne	12c84 <main@@Base+0x6ec>
   12c78:	mov	r0, r4
   12c7c:	mov	r1, #36	; 0x24
   12c80:	bl	15410 <flatcc_builder_start_table@@Base>
   12c84:	ldr	r1, [pc, #508]	; 12e88 <main@@Base+0x8f0>
   12c88:	mov	r0, r4
   12c8c:	add	r1, pc, r1
   12c90:	bl	17748 <flatcc_builder_create_string_str@@Base>
   12c94:	cmp	r0, #0
   12c98:	beq	12cb4 <main@@Base+0x71c>
   12c9c:	mov	r5, r0
   12ca0:	mov	r0, r4
   12ca4:	mov	r1, #3
   12ca8:	bl	166f8 <flatcc_builder_table_add_offset@@Base>
   12cac:	cmp	r0, #0
   12cb0:	strne	r5, [r0]
   12cb4:	mov	r0, r4
   12cb8:	bl	14f8c <flatcc_builder_start_offset_vector@@Base>
   12cbc:	ldr	r5, [pc, #456]	; 12e8c <main@@Base+0x8f4>
   12cc0:	ldr	r6, [pc, #456]	; 12e90 <main@@Base+0x8f8>
   12cc4:	ldr	r8, [pc, #456]	; 12e94 <main@@Base+0x8fc>
   12cc8:	mov	r9, #0
   12ccc:	add	r5, pc, r5
   12cd0:	add	r6, pc, r6
   12cd4:	add	r8, pc, r8
   12cd8:	mov	r0, r4
   12cdc:	mov	r1, #36	; 0x24
   12ce0:	bl	15410 <flatcc_builder_start_table@@Base>
   12ce4:	mov	r0, r4
   12ce8:	bl	15258 <flatcc_builder_start_string@@Base>
   12cec:	mov	r7, #100	; 0x64
   12cf0:	mov	r0, r4
   12cf4:	mov	r1, r5
   12cf8:	mov	r2, #7
   12cfc:	bl	14b40 <flatcc_builder_append_string@@Base>
   12d00:	subs	r7, r7, #1
   12d04:	bne	12cf0 <main@@Base+0x758>
   12d08:	mov	r0, r4
   12d0c:	bl	177b0 <flatcc_builder_end_string@@Base>
   12d10:	cmp	r0, #0
   12d14:	beq	12d30 <main@@Base+0x798>
   12d18:	mov	r7, r0
   12d1c:	mov	r0, r4
   12d20:	mov	r1, #3
   12d24:	bl	166f8 <flatcc_builder_table_add_offset@@Base>
   12d28:	cmp	r0, #0
   12d2c:	strne	r7, [r0]
   12d30:	mov	r0, r4
   12d34:	mov	r1, #1
   12d38:	mov	r2, #1
   12d3c:	mvn	r3, #0
   12d40:	bl	14f00 <flatcc_builder_start_vector@@Base>
   12d44:	mov	r7, #100	; 0x64
   12d48:	mov	r0, r4
   12d4c:	mov	r1, r6
   12d50:	mov	r2, #1000	; 0x3e8
   12d54:	bl	1458c <flatcc_builder_append_vector@@Base>
   12d58:	subs	r7, r7, #1
   12d5c:	bne	12d48 <main@@Base+0x7b0>
   12d60:	mov	r0, r4
   12d64:	bl	16178 <flatcc_builder_end_vector@@Base>
   12d68:	cmp	r0, #0
   12d6c:	beq	12d88 <main@@Base+0x7f0>
   12d70:	mov	r7, r0
   12d74:	mov	r0, r4
   12d78:	mov	r1, #5
   12d7c:	bl	166f8 <flatcc_builder_table_add_offset@@Base>
   12d80:	cmp	r0, #0
   12d84:	strne	r7, [r0]
   12d88:	mov	r0, r4
   12d8c:	mov	r1, r8
   12d90:	mov	r2, #1
   12d94:	bl	15dac <flatcc_builder_check_required@@Base>
   12d98:	cmp	r0, #0
   12d9c:	beq	12e24 <main@@Base+0x88c>
   12da0:	mov	r0, r4
   12da4:	bl	15e38 <flatcc_builder_end_table@@Base>
   12da8:	cmp	r0, #0
   12dac:	beq	12e44 <main@@Base+0x8ac>
   12db0:	mov	r1, r0
   12db4:	mov	r0, r4
   12db8:	bl	147d4 <flatcc_builder_offset_vector_push@@Base>
   12dbc:	add	r9, r9, #1
   12dc0:	cmp	r9, #1000	; 0x3e8
   12dc4:	bne	12cd8 <main@@Base+0x740>
   12dc8:	mov	r0, r4
   12dcc:	bl	15174 <flatcc_builder_end_offset_vector@@Base>
   12dd0:	cmp	r0, #0
   12dd4:	beq	12e64 <main@@Base+0x8cc>
   12dd8:	mov	r5, r0
   12ddc:	mov	r0, r4
   12de0:	mov	r1, #11
   12de4:	bl	166f8 <flatcc_builder_table_add_offset@@Base>
   12de8:	cmp	r0, #0
   12dec:	mov	r2, #1
   12df0:	strne	r5, [r0]
   12df4:	mov	r0, r4
   12df8:	ldr	r1, [pc, #152]	; 12e98 <main@@Base+0x900>
   12dfc:	add	r1, pc, r1
   12e00:	bl	15dac <flatcc_builder_check_required@@Base>
   12e04:	cmp	r0, #0
   12e08:	beq	12e24 <main@@Base+0x88c>
   12e0c:	mov	r0, r4
   12e10:	bl	15e38 <flatcc_builder_end_table@@Base>
   12e14:	mov	r1, r0
   12e18:	mov	r0, r4
   12e1c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e20:	b	14034 <flatcc_builder_end_buffer@@Base>
   12e24:	ldr	r0, [pc, #112]	; 12e9c <main@@Base+0x904>
   12e28:	ldr	r1, [pc, #112]	; 12ea0 <main@@Base+0x908>
   12e2c:	ldr	r3, [pc, #112]	; 12ea4 <main@@Base+0x90c>
   12e30:	mov	r2, #235	; 0xeb
   12e34:	add	r0, pc, r0
   12e38:	add	r1, pc, r1
   12e3c:	add	r3, pc, r3
   12e40:	bl	12498 <__assert_fail@plt>
   12e44:	ldr	r0, [pc, #92]	; 12ea8 <main@@Base+0x910>
   12e48:	ldr	r1, [pc, #92]	; 12eac <main@@Base+0x914>
   12e4c:	ldr	r3, [pc, #92]	; 12eb0 <main@@Base+0x918>
   12e50:	mov	r2, #42	; 0x2a
   12e54:	add	r0, pc, r0
   12e58:	add	r1, pc, r1
   12e5c:	add	r3, pc, r3
   12e60:	bl	12498 <__assert_fail@plt>
   12e64:	ldr	r0, [pc, #72]	; 12eb4 <main@@Base+0x91c>
   12e68:	ldr	r1, [pc, #72]	; 12eb8 <main@@Base+0x920>
   12e6c:	ldr	r3, [pc, #72]	; 12ebc <main@@Base+0x924>
   12e70:	mov	r2, #56	; 0x38
   12e74:	add	r0, pc, r0
   12e78:	add	r1, pc, r1
   12e7c:	add	r3, pc, r3
   12e80:	bl	12498 <__assert_fail@plt>
   12e84:	andeq	r5, r0, r6, asr #15
   12e88:			; <UNDEFINED> instruction: 0x000056bb
   12e8c:	andeq	r5, r0, lr, lsr #15
   12e90:	andeq	r7, r1, r8, lsr #7
   12e94:	muleq	r0, r8, fp
   12e98:	andeq	r5, r0, r0, ror sl
   12e9c:	andeq	r5, r0, lr, asr #12
   12ea0:	andeq	r5, r0, ip, ror #13
   12ea4:	andeq	r5, r0, pc, asr r7
   12ea8:	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   12eac:	andeq	r5, r0, r5, lsl #10
   12eb0:	ldrdeq	r5, [r0], -r9
   12eb4:	andeq	r5, r0, fp, lsl #11
   12eb8:	andeq	r5, r0, r5, ror #9
   12ebc:	andeq	r5, r0, r6, lsl #11

00012ec0 <flatcc_builder_default_alloc@@Base>:
   12ec0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ec4:	add	fp, sp, #24
   12ec8:	mov	r4, r1
   12ecc:	cmp	r2, #0
   12ed0:	beq	12f1c <flatcc_builder_default_alloc@@Base+0x5c>
   12ed4:	ldr	r0, [fp, #8]
   12ed8:	mov	r8, r3
   12edc:	sub	r1, r0, #1
   12ee0:	cmp	r1, #6
   12ee4:	bhi	12f4c <flatcc_builder_default_alloc@@Base+0x8c>
   12ee8:	add	r3, pc, #8
   12eec:	mov	r0, #256	; 0x100
   12ef0:	ldr	r1, [r3, r1, lsl #2]
   12ef4:	add	pc, r3, r1
   12ef8:	andeq	r0, r0, r8, rrx
   12efc:	andeq	r0, r0, r4, asr r0
   12f00:	andeq	r0, r0, r4, asr r0
   12f04:	andeq	r0, r0, ip, lsl r0
   12f08:	andeq	r0, r0, ip, asr r0
   12f0c:	andeq	r0, r0, r4, asr r0
   12f10:	andeq	r0, r0, r4, rrx
   12f14:	mov	r0, #288	; 0x120
   12f18:	b	12f60 <flatcc_builder_default_alloc@@Base+0xa0>
   12f1c:	ldr	r0, [r4]
   12f20:	cmp	r0, #0
   12f24:	beq	12f40 <flatcc_builder_default_alloc@@Base+0x80>
   12f28:	bl	123d8 <free@plt>
   12f2c:	mov	r6, #0
   12f30:	mov	r0, r6
   12f34:	str	r6, [r4]
   12f38:	str	r6, [r4, #4]
   12f3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f40:	mov	r6, #0
   12f44:	mov	r0, r6
   12f48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f4c:	mov	r0, #32
   12f50:	b	12f60 <flatcc_builder_default_alloc@@Base+0xa0>
   12f54:	mov	r0, r2
   12f58:	b	12f60 <flatcc_builder_default_alloc@@Base+0xa0>
   12f5c:	mov	r0, #64	; 0x40
   12f60:	mov	r7, r0
   12f64:	lsl	r0, r0, #1
   12f68:	cmp	r7, r2
   12f6c:	bcc	12f60 <flatcc_builder_default_alloc@@Base+0xa0>
   12f70:	ldr	r0, [r4, #4]
   12f74:	mov	r6, #0
   12f78:	cmp	r0, r2
   12f7c:	lsrcs	r0, r0, #1
   12f80:	cmpcs	r0, r7
   12f84:	bcs	12fc8 <flatcc_builder_default_alloc@@Base+0x108>
   12f88:	ldr	r0, [r4]
   12f8c:	mov	r1, r7
   12f90:	bl	123fc <realloc@plt>
   12f94:	cmp	r0, #0
   12f98:	beq	12fd0 <flatcc_builder_default_alloc@@Base+0x110>
   12f9c:	mov	r5, r0
   12fa0:	cmp	r8, #0
   12fa4:	beq	12fc4 <flatcc_builder_default_alloc@@Base+0x104>
   12fa8:	ldr	r1, [r4, #4]
   12fac:	cmp	r7, r1
   12fb0:	bls	12fc4 <flatcc_builder_default_alloc@@Base+0x104>
   12fb4:	add	r0, r5, r1
   12fb8:	sub	r2, r7, r1
   12fbc:	mov	r1, #0
   12fc0:	bl	12468 <memset@plt>
   12fc4:	stm	r4, {r5, r7}
   12fc8:	mov	r0, r6
   12fcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fd0:	mvn	r6, #0
   12fd4:	mov	r0, r6
   12fd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012fdc <flatcc_builder_flush_vtable_cache@@Base>:
   12fdc:	push	{r4, r5, fp, lr}
   12fe0:	add	fp, sp, #8
   12fe4:	mov	r4, r0
   12fe8:	ldr	r0, [r0, #116]	; 0x74
   12fec:	cmp	r0, #0
   12ff0:	popeq	{r4, r5, fp, pc}
   12ff4:	ldr	r0, [r4, #92]	; 0x5c
   12ff8:	ldr	r2, [r4, #96]	; 0x60
   12ffc:	mov	r1, #0
   13000:	mov	r5, #0
   13004:	bl	12468 <memset@plt>
   13008:	mov	r0, #16
   1300c:	str	r5, [r4, #120]	; 0x78
   13010:	str	r0, [r4, #124]	; 0x7c
   13014:	pop	{r4, r5, fp, pc}

00013018 <flatcc_builder_custom_init@@Base>:
   13018:	push	{r4, r5, r6, r7, fp, lr}
   1301c:	add	fp, sp, #16
   13020:	mov	r6, r2
   13024:	mov	r7, r1
   13028:	mov	r1, #0
   1302c:	mov	r2, #232	; 0xe8
   13030:	mov	r5, r3
   13034:	mov	r4, r0
   13038:	bl	12468 <memset@plt>
   1303c:	ldr	r0, [fp, #8]
   13040:	cmp	r7, #0
   13044:	bne	1305c <flatcc_builder_custom_init@@Base+0x44>
   13048:	mov	r1, #1
   1304c:	add	r6, r4, #188	; 0xbc
   13050:	str	r1, [r4, #184]	; 0xb8
   13054:	ldr	r7, [pc, #40]	; 13084 <flatcc_builder_custom_init@@Base+0x6c>
   13058:	ldr	r7, [pc, r7]
   1305c:	ldr	r1, [pc, #36]	; 13088 <flatcc_builder_custom_init@@Base+0x70>
   13060:	cmp	r5, #0
   13064:	ldr	r1, [pc, r1]
   13068:	str	r6, [r4, #36]	; 0x24
   1306c:	str	r0, [r4, #40]	; 0x28
   13070:	mov	r0, #0
   13074:	movne	r1, r5
   13078:	str	r7, [r4, #44]	; 0x2c
   1307c:	str	r1, [r4, #48]	; 0x30
   13080:	pop	{r4, r5, r6, r7, fp, pc}
   13084:	andeq	r7, r1, r8
   13088:	strdeq	r6, [r1], -r8

0001308c <flatcc_builder_init@@Base>:
   1308c:	push	{r4, r5, fp, lr}
   13090:	add	fp, sp, #8
   13094:	mov	r1, #0
   13098:	mov	r2, #232	; 0xe8
   1309c:	mov	r4, r0
   130a0:	mov	r5, #0
   130a4:	bl	12468 <memset@plt>
   130a8:	mov	r0, #1
   130ac:	str	r0, [r4, #184]	; 0xb8
   130b0:	add	r0, r4, #188	; 0xbc
   130b4:	ldr	r1, [pc, #32]	; 130dc <flatcc_builder_init@@Base+0x50>
   130b8:	ldr	r1, [pc, r1]
   130bc:	ldr	r2, [pc, #28]	; 130e0 <flatcc_builder_init@@Base+0x54>
   130c0:	ldr	r2, [pc, r2]
   130c4:	str	r0, [r4, #36]	; 0x24
   130c8:	mov	r0, #0
   130cc:	str	r5, [r4, #40]	; 0x28
   130d0:	str	r2, [r4, #44]	; 0x2c
   130d4:	str	r1, [r4, #48]	; 0x30
   130d8:	pop	{r4, r5, fp, pc}
   130dc:	andeq	r6, r1, r4, lsr #31
   130e0:	andeq	r6, r1, r0, lsr #31

000130e4 <flatcc_builder_custom_reset@@Base>:
   130e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e8:	add	fp, sp, #28
   130ec:	sub	sp, sp, #4
   130f0:	mov	r9, r2
   130f4:	mov	r8, r1
   130f8:	mov	sl, r0
   130fc:	add	r7, r0, #52	; 0x34
   13100:	mov	r5, #0
   13104:	b	13124 <flatcc_builder_custom_reset@@Base+0x40>
   13108:	ldr	r0, [r6, #56]	; 0x38
   1310c:	cmp	r0, #0
   13110:	bne	1320c <flatcc_builder_custom_reset@@Base+0x128>
   13114:	add	r5, r5, #1
   13118:	add	r7, r7, #8
   1311c:	cmp	r5, #8
   13120:	beq	13178 <flatcc_builder_custom_reset@@Base+0x94>
   13124:	add	r6, sl, r5, lsl #3
   13128:	ldr	r0, [r6, #52]	; 0x34
   1312c:	cmp	r0, #0
   13130:	beq	13108 <flatcc_builder_custom_reset@@Base+0x24>
   13134:	cmp	r9, #0
   13138:	cmpne	r5, #5
   1313c:	beq	13168 <flatcc_builder_custom_reset@@Base+0x84>
   13140:	ldr	r0, [sl, #40]	; 0x28
   13144:	ldr	r4, [sl, #48]	; 0x30
   13148:	mov	r1, r7
   1314c:	mov	r2, #1
   13150:	mov	r3, #1
   13154:	str	r5, [sp]
   13158:	blx	r4
   1315c:	cmp	r0, #0
   13160:	bne	131fc <flatcc_builder_custom_reset@@Base+0x118>
   13164:	ldr	r0, [r6, #52]	; 0x34
   13168:	ldr	r2, [r6, #56]	; 0x38
   1316c:	mov	r1, #0
   13170:	bl	12468 <memset@plt>
   13174:	b	13114 <flatcc_builder_custom_reset@@Base+0x30>
   13178:	mov	r0, #0
   1317c:	vmov.i32	q8, #0	; 0x00000000
   13180:	mov	r5, #0
   13184:	str	r0, [sl, #120]	; 0x78
   13188:	ldr	r1, [sl, #124]	; 0x7c
   1318c:	cmp	r1, #0
   13190:	movne	r1, #16
   13194:	strne	r1, [sl, #124]	; 0x7c
   13198:	add	r1, sl, #148	; 0x94
   1319c:	str	r0, [sl, #136]	; 0x88
   131a0:	str	r0, [sl, #140]	; 0x8c
   131a4:	strh	r0, [sl, #128]	; 0x80
   131a8:	str	r0, [sl, #32]
   131ac:	cmp	r8, #0
   131b0:	vst1.32	{d16-d17}, [r1]
   131b4:	ldr	r2, [sl, #60]	; 0x3c
   131b8:	ldr	r1, [sl, #52]	; 0x34
   131bc:	ldr	r3, [sl, #76]	; 0x4c
   131c0:	str	r2, [sl, #16]
   131c4:	str	r0, [sl, #20]
   131c8:	str	r0, [sl, #24]
   131cc:	movne	r0, #0
   131d0:	str	r3, [sl]
   131d4:	str	r1, [sl, #4]
   131d8:	strne	r0, [sl, #172]	; 0xac
   131dc:	strne	r0, [sl, #176]	; 0xb0
   131e0:	strne	r0, [sl, #180]	; 0xb4
   131e4:	ldr	r0, [sl, #184]	; 0xb8
   131e8:	cmp	r0, #0
   131ec:	beq	13200 <flatcc_builder_custom_reset@@Base+0x11c>
   131f0:	add	r0, sl, #188	; 0xbc
   131f4:	bl	17d80 <flatcc_emitter_reset@@Base>
   131f8:	b	13200 <flatcc_builder_custom_reset@@Base+0x11c>
   131fc:	mvn	r5, #0
   13200:	mov	r0, r5
   13204:	sub	sp, fp, #28
   13208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1320c:	ldr	r0, [pc, #24]	; 1322c <flatcc_builder_custom_reset@@Base+0x148>
   13210:	ldr	r1, [pc, #24]	; 13230 <flatcc_builder_custom_reset@@Base+0x14c>
   13214:	ldr	r3, [pc, #24]	; 13234 <flatcc_builder_custom_reset@@Base+0x150>
   13218:	movw	r2, #434	; 0x1b2
   1321c:	add	r0, pc, r0
   13220:	add	r1, pc, r1
   13224:	add	r3, pc, r3
   13228:	bl	12498 <__assert_fail@plt>
   1322c:	andeq	r5, r0, r4, asr r8
   13230:	andeq	r5, r0, r2, ror #16
   13234:			; <UNDEFINED> instruction: 0x000058bb

00013238 <flatcc_builder_reset@@Base>:
   13238:	push	{r4, sl, fp, lr}
   1323c:	add	fp, sp, #8
   13240:	mov	r4, r0
   13244:	ldr	r0, [r0, #52]	; 0x34
   13248:	ldr	r2, [r4, #56]	; 0x38
   1324c:	cmp	r0, #0
   13250:	beq	13260 <flatcc_builder_reset@@Base+0x28>
   13254:	mov	r1, #0
   13258:	bl	12468 <memset@plt>
   1325c:	b	13268 <flatcc_builder_reset@@Base+0x30>
   13260:	cmp	r2, #0
   13264:	bne	133d0 <flatcc_builder_reset@@Base+0x198>
   13268:	ldr	r0, [r4, #60]	; 0x3c
   1326c:	ldr	r2, [r4, #64]	; 0x40
   13270:	cmp	r0, #0
   13274:	beq	13284 <flatcc_builder_reset@@Base+0x4c>
   13278:	mov	r1, #0
   1327c:	bl	12468 <memset@plt>
   13280:	b	1328c <flatcc_builder_reset@@Base+0x54>
   13284:	cmp	r2, #0
   13288:	bne	133d0 <flatcc_builder_reset@@Base+0x198>
   1328c:	ldr	r0, [r4, #68]	; 0x44
   13290:	ldr	r2, [r4, #72]	; 0x48
   13294:	cmp	r0, #0
   13298:	beq	132a8 <flatcc_builder_reset@@Base+0x70>
   1329c:	mov	r1, #0
   132a0:	bl	12468 <memset@plt>
   132a4:	b	132b0 <flatcc_builder_reset@@Base+0x78>
   132a8:	cmp	r2, #0
   132ac:	bne	133d0 <flatcc_builder_reset@@Base+0x198>
   132b0:	ldr	r0, [r4, #76]	; 0x4c
   132b4:	ldr	r2, [r4, #80]	; 0x50
   132b8:	cmp	r0, #0
   132bc:	beq	132cc <flatcc_builder_reset@@Base+0x94>
   132c0:	mov	r1, #0
   132c4:	bl	12468 <memset@plt>
   132c8:	b	132d4 <flatcc_builder_reset@@Base+0x9c>
   132cc:	cmp	r2, #0
   132d0:	bne	133d0 <flatcc_builder_reset@@Base+0x198>
   132d4:	ldr	r0, [r4, #84]	; 0x54
   132d8:	ldr	r2, [r4, #88]	; 0x58
   132dc:	cmp	r0, #0
   132e0:	beq	132f0 <flatcc_builder_reset@@Base+0xb8>
   132e4:	mov	r1, #0
   132e8:	bl	12468 <memset@plt>
   132ec:	b	132f8 <flatcc_builder_reset@@Base+0xc0>
   132f0:	cmp	r2, #0
   132f4:	bne	133d0 <flatcc_builder_reset@@Base+0x198>
   132f8:	ldr	r0, [r4, #92]	; 0x5c
   132fc:	ldr	r2, [r4, #96]	; 0x60
   13300:	cmp	r0, #0
   13304:	beq	13314 <flatcc_builder_reset@@Base+0xdc>
   13308:	mov	r1, #0
   1330c:	bl	12468 <memset@plt>
   13310:	b	1331c <flatcc_builder_reset@@Base+0xe4>
   13314:	cmp	r2, #0
   13318:	bne	133d0 <flatcc_builder_reset@@Base+0x198>
   1331c:	ldr	r0, [r4, #100]	; 0x64
   13320:	ldr	r2, [r4, #104]	; 0x68
   13324:	cmp	r0, #0
   13328:	beq	13338 <flatcc_builder_reset@@Base+0x100>
   1332c:	mov	r1, #0
   13330:	bl	12468 <memset@plt>
   13334:	b	13340 <flatcc_builder_reset@@Base+0x108>
   13338:	cmp	r2, #0
   1333c:	bne	133d0 <flatcc_builder_reset@@Base+0x198>
   13340:	ldr	r0, [r4, #108]	; 0x6c
   13344:	ldr	r2, [r4, #112]	; 0x70
   13348:	cmp	r0, #0
   1334c:	beq	1335c <flatcc_builder_reset@@Base+0x124>
   13350:	mov	r1, #0
   13354:	bl	12468 <memset@plt>
   13358:	b	13364 <flatcc_builder_reset@@Base+0x12c>
   1335c:	cmp	r2, #0
   13360:	bne	133d0 <flatcc_builder_reset@@Base+0x198>
   13364:	mov	r0, #0
   13368:	str	r0, [r4, #120]	; 0x78
   1336c:	ldr	r1, [r4, #124]	; 0x7c
   13370:	cmp	r1, #0
   13374:	movne	r1, #16
   13378:	strne	r1, [r4, #124]	; 0x7c
   1337c:	vmov.i32	q8, #0	; 0x00000000
   13380:	add	r1, r4, #148	; 0x94
   13384:	str	r0, [r4, #136]	; 0x88
   13388:	str	r0, [r4, #140]	; 0x8c
   1338c:	strh	r0, [r4, #128]	; 0x80
   13390:	str	r0, [r4, #32]
   13394:	vst1.32	{d16-d17}, [r1]
   13398:	ldr	r1, [r4, #184]	; 0xb8
   1339c:	ldr	r2, [r4, #60]	; 0x3c
   133a0:	ldr	r3, [r4, #76]	; 0x4c
   133a4:	ldr	ip, [r4, #52]	; 0x34
   133a8:	cmp	r1, #0
   133ac:	str	r2, [r4, #16]
   133b0:	str	r0, [r4, #20]
   133b4:	str	r0, [r4, #24]
   133b8:	stm	r4, {r3, ip}
   133bc:	beq	133c8 <flatcc_builder_reset@@Base+0x190>
   133c0:	add	r0, r4, #188	; 0xbc
   133c4:	bl	17d80 <flatcc_emitter_reset@@Base>
   133c8:	mov	r0, #0
   133cc:	pop	{r4, sl, fp, pc}
   133d0:	ldr	r0, [pc, #24]	; 133f0 <flatcc_builder_reset@@Base+0x1b8>
   133d4:	ldr	r1, [pc, #24]	; 133f4 <flatcc_builder_reset@@Base+0x1bc>
   133d8:	ldr	r3, [pc, #24]	; 133f8 <flatcc_builder_reset@@Base+0x1c0>
   133dc:	movw	r2, #434	; 0x1b2
   133e0:	add	r0, pc, r0
   133e4:	add	r1, pc, r1
   133e8:	add	r3, pc, r3
   133ec:	bl	12498 <__assert_fail@plt>
   133f0:	muleq	r0, r0, r6
   133f4:	muleq	r0, lr, r6
   133f8:	strdeq	r5, [r0], -r7

000133fc <flatcc_builder_clear@@Base>:
   133fc:	push	{r4, sl, fp, lr}
   13400:	add	fp, sp, #8
   13404:	sub	sp, sp, #8
   13408:	mov	r4, r0
   1340c:	ldr	r0, [r0, #40]	; 0x28
   13410:	mov	r1, #0
   13414:	mov	r2, #0
   13418:	mov	r3, #0
   1341c:	ldr	ip, [r4, #48]	; 0x30
   13420:	str	r1, [sp]
   13424:	add	r1, r4, #52	; 0x34
   13428:	blx	ip
   1342c:	ldr	r0, [r4, #40]	; 0x28
   13430:	ldr	ip, [r4, #48]	; 0x30
   13434:	mov	r1, #1
   13438:	mov	r2, #0
   1343c:	mov	r3, #0
   13440:	str	r1, [sp]
   13444:	add	r1, r4, #60	; 0x3c
   13448:	blx	ip
   1344c:	ldr	r0, [r4, #40]	; 0x28
   13450:	ldr	ip, [r4, #48]	; 0x30
   13454:	mov	r1, #2
   13458:	mov	r2, #0
   1345c:	mov	r3, #0
   13460:	str	r1, [sp]
   13464:	add	r1, r4, #68	; 0x44
   13468:	blx	ip
   1346c:	ldr	r0, [r4, #40]	; 0x28
   13470:	ldr	ip, [r4, #48]	; 0x30
   13474:	mov	r1, #3
   13478:	mov	r2, #0
   1347c:	mov	r3, #0
   13480:	str	r1, [sp]
   13484:	add	r1, r4, #76	; 0x4c
   13488:	blx	ip
   1348c:	ldr	r0, [r4, #40]	; 0x28
   13490:	ldr	ip, [r4, #48]	; 0x30
   13494:	mov	r1, #4
   13498:	mov	r2, #0
   1349c:	mov	r3, #0
   134a0:	str	r1, [sp]
   134a4:	add	r1, r4, #84	; 0x54
   134a8:	blx	ip
   134ac:	ldr	r0, [r4, #40]	; 0x28
   134b0:	ldr	ip, [r4, #48]	; 0x30
   134b4:	mov	r1, #5
   134b8:	mov	r2, #0
   134bc:	mov	r3, #0
   134c0:	str	r1, [sp]
   134c4:	add	r1, r4, #92	; 0x5c
   134c8:	blx	ip
   134cc:	ldr	r0, [r4, #40]	; 0x28
   134d0:	ldr	ip, [r4, #48]	; 0x30
   134d4:	mov	r1, #6
   134d8:	mov	r2, #0
   134dc:	mov	r3, #0
   134e0:	str	r1, [sp]
   134e4:	add	r1, r4, #100	; 0x64
   134e8:	blx	ip
   134ec:	ldr	r0, [r4, #40]	; 0x28
   134f0:	ldr	ip, [r4, #48]	; 0x30
   134f4:	mov	r1, #7
   134f8:	mov	r2, #0
   134fc:	mov	r3, #0
   13500:	str	r1, [sp]
   13504:	add	r1, r4, #108	; 0x6c
   13508:	blx	ip
   1350c:	ldr	r0, [r4, #184]	; 0xb8
   13510:	cmp	r0, #0
   13514:	beq	13520 <flatcc_builder_clear@@Base+0x124>
   13518:	add	r0, r4, #188	; 0xbc
   1351c:	bl	17e4c <flatcc_emitter_clear@@Base>
   13520:	mov	r0, r4
   13524:	mov	r1, #0
   13528:	mov	r2, #232	; 0xe8
   1352c:	sub	sp, fp, #8
   13530:	pop	{r4, sl, fp, lr}
   13534:	b	12468 <memset@plt>

00013538 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13538:	push	{r4, r5, r6, r7, fp, lr}
   1353c:	add	fp, sp, #16
   13540:	sub	sp, sp, #8
   13544:	mov	r4, r0
   13548:	ldr	r0, [r0, #112]	; 0x70
   1354c:	add	r1, r1, #7
   13550:	ldr	r7, [r4, #228]	; 0xe4
   13554:	bic	r5, r1, #3
   13558:	add	r6, r4, #108	; 0x6c
   1355c:	add	r2, r7, r5
   13560:	cmp	r2, r0
   13564:	bls	1358c <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13568:	ldr	r0, [r4, #40]	; 0x28
   1356c:	ldr	ip, [r4, #48]	; 0x30
   13570:	mov	r1, #7
   13574:	mov	r3, #0
   13578:	str	r1, [sp]
   1357c:	mov	r1, r6
   13580:	blx	ip
   13584:	cmp	r0, #0
   13588:	bne	135d8 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   1358c:	ldr	r0, [r6]
   13590:	adds	r6, r0, r7
   13594:	beq	135c8 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   13598:	mov	r0, r6
   1359c:	mov	r1, #0
   135a0:	mov	r2, r5
   135a4:	bl	12468 <memset@plt>
   135a8:	ldr	r0, [r4, #224]	; 0xe0
   135ac:	str	r0, [r6], #4
   135b0:	ldr	r0, [r4, #228]	; 0xe4
   135b4:	add	r1, r0, #4
   135b8:	add	r0, r0, r5
   135bc:	str	r1, [r4, #224]	; 0xe0
   135c0:	str	r0, [r4, #228]	; 0xe4
   135c4:	b	135cc <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   135c8:	mov	r6, #0
   135cc:	mov	r0, r6
   135d0:	sub	sp, fp, #16
   135d4:	pop	{r4, r5, r6, r7, fp, pc}
   135d8:	ldr	r0, [pc, #24]	; 135f8 <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   135dc:	ldr	r1, [pc, #24]	; 135fc <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   135e0:	ldr	r3, [pc, #24]	; 13600 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   135e4:	mov	r2, #308	; 0x134
   135e8:	add	r0, pc, r0
   135ec:	add	r1, pc, r1
   135f0:	add	r3, pc, r3
   135f4:	bl	12498 <__assert_fail@plt>
   135f8:	andeq	r6, r0, r7, asr r6
   135fc:	muleq	r0, r6, r4
   13600:	andeq	r6, r0, r9, lsl #9

00013604 <flatcc_builder_enter_user_frame@@Base>:
   13604:	push	{r4, r5, r6, r7, fp, lr}
   13608:	add	fp, sp, #16
   1360c:	sub	sp, sp, #8
   13610:	mov	r4, r0
   13614:	ldr	r0, [r0, #112]	; 0x70
   13618:	add	r1, r1, #7
   1361c:	ldr	r7, [r4, #228]	; 0xe4
   13620:	bic	r5, r1, #3
   13624:	add	r6, r4, #108	; 0x6c
   13628:	add	r2, r7, r5
   1362c:	cmp	r2, r0
   13630:	bls	13658 <flatcc_builder_enter_user_frame@@Base+0x54>
   13634:	ldr	r0, [r4, #40]	; 0x28
   13638:	ldr	ip, [r4, #48]	; 0x30
   1363c:	mov	r1, #7
   13640:	mov	r3, #0
   13644:	str	r1, [sp]
   13648:	mov	r1, r6
   1364c:	blx	ip
   13650:	cmp	r0, #0
   13654:	bne	136a4 <flatcc_builder_enter_user_frame@@Base+0xa0>
   13658:	ldr	r0, [r6]
   1365c:	adds	r6, r0, r7
   13660:	beq	13698 <flatcc_builder_enter_user_frame@@Base+0x94>
   13664:	mov	r0, r6
   13668:	mov	r1, #0
   1366c:	mov	r2, r5
   13670:	bl	12468 <memset@plt>
   13674:	ldr	r0, [r4, #224]	; 0xe0
   13678:	str	r0, [r6]
   1367c:	ldr	r1, [r4, #228]	; 0xe4
   13680:	add	r0, r1, #4
   13684:	add	r1, r1, r5
   13688:	str	r0, [r4, #224]	; 0xe0
   1368c:	str	r1, [r4, #228]	; 0xe4
   13690:	sub	sp, fp, #16
   13694:	pop	{r4, r5, r6, r7, fp, pc}
   13698:	mov	r0, #0
   1369c:	sub	sp, fp, #16
   136a0:	pop	{r4, r5, r6, r7, fp, pc}
   136a4:	ldr	r0, [pc, #24]	; 136c4 <flatcc_builder_enter_user_frame@@Base+0xc0>
   136a8:	ldr	r1, [pc, #24]	; 136c8 <flatcc_builder_enter_user_frame@@Base+0xc4>
   136ac:	ldr	r3, [pc, #24]	; 136cc <flatcc_builder_enter_user_frame@@Base+0xc8>
   136b0:	mov	r2, #308	; 0x134
   136b4:	add	r0, pc, r0
   136b8:	add	r1, pc, r1
   136bc:	add	r3, pc, r3
   136c0:	bl	12498 <__assert_fail@plt>
   136c4:	andeq	r6, r0, fp, lsl #11
   136c8:	andeq	r5, r0, sl, asr #7
   136cc:			; <UNDEFINED> instruction: 0x000063bd

000136d0 <flatcc_builder_exit_user_frame@@Base>:
   136d0:	push	{fp, lr}
   136d4:	mov	fp, sp
   136d8:	ldr	r1, [r0, #224]	; 0xe0
   136dc:	cmp	r1, #0
   136e0:	subne	r2, r1, #4
   136e4:	strne	r2, [r0, #228]	; 0xe4
   136e8:	ldrne	r2, [r0, #108]	; 0x6c
   136ec:	addne	r1, r2, r1
   136f0:	ldrne	r1, [r1, #-4]
   136f4:	strne	r1, [r0, #224]	; 0xe0
   136f8:	movne	r0, r1
   136fc:	popne	{fp, pc}
   13700:	ldr	r0, [pc, #24]	; 13720 <flatcc_builder_exit_user_frame@@Base+0x50>
   13704:	ldr	r1, [pc, #24]	; 13724 <flatcc_builder_exit_user_frame@@Base+0x54>
   13708:	ldr	r3, [pc, #24]	; 13728 <flatcc_builder_exit_user_frame@@Base+0x58>
   1370c:	movw	r2, #542	; 0x21e
   13710:	add	r0, pc, r0
   13714:	add	r1, pc, r1
   13718:	add	r3, pc, r3
   1371c:	bl	12498 <__assert_fail@plt>
   13720:	andeq	r5, r0, sp, lsl #8
   13724:	andeq	r5, r0, lr, ror #6
   13728:	andeq	r5, r0, lr, lsl r4

0001372c <flatcc_builder_exit_user_frame_at@@Base>:
   1372c:	push	{fp, lr}
   13730:	mov	fp, sp
   13734:	ldr	r2, [r0, #224]	; 0xe0
   13738:	cmp	r2, r1
   1373c:	bcc	13788 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13740:	cmp	r1, #0
   13744:	str	r1, [r0, #224]	; 0xe0
   13748:	subne	r2, r1, #4
   1374c:	strne	r2, [r0, #228]	; 0xe4
   13750:	ldrne	r2, [r0, #108]	; 0x6c
   13754:	addne	r1, r2, r1
   13758:	ldrne	r1, [r1, #-4]
   1375c:	strne	r1, [r0, #224]	; 0xe0
   13760:	movne	r0, r1
   13764:	popne	{fp, pc}
   13768:	ldr	r0, [pc, #68]	; 137b4 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   1376c:	ldr	r1, [pc, #68]	; 137b8 <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   13770:	ldr	r3, [pc, #68]	; 137bc <flatcc_builder_exit_user_frame_at@@Base+0x90>
   13774:	movw	r2, #542	; 0x21e
   13778:	add	r0, pc, r0
   1377c:	add	r1, pc, r1
   13780:	add	r3, pc, r3
   13784:	bl	12498 <__assert_fail@plt>
   13788:	ldr	r0, [pc, #24]	; 137a8 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   1378c:	ldr	r1, [pc, #24]	; 137ac <flatcc_builder_exit_user_frame_at@@Base+0x80>
   13790:	ldr	r3, [pc, #24]	; 137b0 <flatcc_builder_exit_user_frame_at@@Base+0x84>
   13794:	movw	r2, #551	; 0x227
   13798:	add	r0, pc, r0
   1379c:	add	r1, pc, r1
   137a0:	add	r3, pc, r3
   137a4:	bl	12498 <__assert_fail@plt>
   137a8:	ldrdeq	r5, [r0], -r8
   137ac:	andeq	r5, r0, r6, ror #5
   137b0:	andeq	r5, r0, pc, ror #7
   137b4:	andeq	r5, r0, r5, lsr #7
   137b8:	andeq	r5, r0, r6, lsl #6
   137bc:			; <UNDEFINED> instruction: 0x000053b6

000137c0 <flatcc_builder_get_current_user_frame@@Base>:
   137c0:	ldr	r0, [r0, #224]	; 0xe0
   137c4:	bx	lr

000137c8 <flatcc_builder_get_user_frame_ptr@@Base>:
   137c8:	ldr	r0, [r0, #108]	; 0x6c
   137cc:	add	r0, r0, r1
   137d0:	bx	lr

000137d4 <flatcc_builder_embed_buffer@@Base>:
   137d4:	push	{r4, r5, r6, r7, fp, lr}
   137d8:	add	fp, sp, #16
   137dc:	sub	sp, sp, #88	; 0x58
   137e0:	mov	r4, r0
   137e4:	ldr	r0, [fp, #8]
   137e8:	mov	r5, r3
   137ec:	mov	r7, r2
   137f0:	mov	r2, r1
   137f4:	sub	r1, fp, #18
   137f8:	strh	r0, [fp, #-18]	; 0xffffffee
   137fc:	mov	r0, r4
   13800:	ldr	r3, [r4, #152]	; 0x98
   13804:	cmp	r3, #0
   13808:	movwne	r3, #1
   1380c:	bl	13960 <flatcc_builder_embed_buffer@@Base+0x18c>
   13810:	ldr	r1, [fp, #12]
   13814:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13818:	ldr	r0, [r4, #136]	; 0x88
   1381c:	mov	r2, #0
   13820:	str	r2, [sp, #12]
   13824:	str	r2, [sp, #8]
   13828:	and	r1, r1, #2
   1382c:	sub	r3, r3, #1
   13830:	add	r1, r5, r1, lsl #1
   13834:	sub	r1, r0, r1
   13838:	and	r3, r1, r3
   1383c:	add	r1, r3, r5
   13840:	str	r1, [fp, #-24]	; 0xffffffe8
   13844:	ldr	r1, [r4, #152]	; 0x98
   13848:	cmp	r1, #0
   1384c:	mov	r1, #0
   13850:	beq	13870 <flatcc_builder_embed_buffer@@Base+0x9c>
   13854:	mov	r1, #4
   13858:	sub	r2, fp, #24
   1385c:	str	r1, [sp, #20]
   13860:	str	r2, [sp, #16]
   13864:	mov	r2, #1
   13868:	str	r1, [sp, #8]
   1386c:	str	r2, [sp, #12]
   13870:	cmp	r5, #0
   13874:	beq	13898 <flatcc_builder_embed_buffer@@Base+0xc4>
   13878:	add	r6, sp, #8
   1387c:	add	r1, r1, r5
   13880:	add	r6, r6, r2, lsl #3
   13884:	add	r2, r2, #1
   13888:	str	r1, [sp, #8]
   1388c:	str	r7, [r6, #8]
   13890:	str	r5, [r6, #12]
   13894:	str	r2, [sp, #12]
   13898:	cmp	r3, #0
   1389c:	beq	138c8 <flatcc_builder_embed_buffer@@Base+0xf4>
   138a0:	add	r1, r1, r3
   138a4:	add	r7, sp, #8
   138a8:	str	r1, [sp, #8]
   138ac:	add	r7, r7, r2, lsl #3
   138b0:	add	r2, r2, #1
   138b4:	ldr	r6, [pc, #136]	; 13944 <flatcc_builder_embed_buffer@@Base+0x170>
   138b8:	ldr	r6, [pc, r6]
   138bc:	str	r6, [r7, #8]
   138c0:	str	r3, [r7, #12]
   138c4:	str	r2, [sp, #12]
   138c8:	cmp	r1, #0
   138cc:	ble	13924 <flatcc_builder_embed_buffer@@Base+0x150>
   138d0:	sub	r5, r0, r1
   138d4:	ldr	r0, [r4, #36]	; 0x24
   138d8:	ldr	r7, [r4, #44]	; 0x2c
   138dc:	str	r1, [sp]
   138e0:	add	r1, sp, #8
   138e4:	add	r1, r1, #8
   138e8:	mov	r3, r5
   138ec:	blx	r7
   138f0:	cmp	r0, #0
   138f4:	streq	r5, [r4, #136]	; 0x88
   138f8:	moveq	r0, r5
   138fc:	subeq	sp, fp, #16
   13900:	popeq	{r4, r5, r6, r7, fp, pc}
   13904:	ldr	r0, [pc, #72]	; 13954 <flatcc_builder_embed_buffer@@Base+0x180>
   13908:	ldr	r1, [pc, #72]	; 13958 <flatcc_builder_embed_buffer@@Base+0x184>
   1390c:	ldr	r3, [pc, #72]	; 1395c <flatcc_builder_embed_buffer@@Base+0x188>
   13910:	movw	r2, #651	; 0x28b
   13914:	add	r0, pc, r0
   13918:	add	r1, pc, r1
   1391c:	add	r3, pc, r3
   13920:	bl	12498 <__assert_fail@plt>
   13924:	ldr	r0, [pc, #28]	; 13948 <flatcc_builder_embed_buffer@@Base+0x174>
   13928:	ldr	r1, [pc, #28]	; 1394c <flatcc_builder_embed_buffer@@Base+0x178>
   1392c:	ldr	r3, [pc, #28]	; 13950 <flatcc_builder_embed_buffer@@Base+0x17c>
   13930:	movw	r2, #647	; 0x287
   13934:	add	r0, pc, r0
   13938:	add	r1, pc, r1
   1393c:	add	r3, pc, r3
   13940:	bl	12498 <__assert_fail@plt>
   13944:	muleq	r1, ip, r7
   13948:	andeq	r6, r0, fp, lsl #6
   1394c:	andeq	r5, r0, sl, asr #2
   13950:	andeq	r6, r0, r2, asr #3
   13954:	andeq	r6, r0, fp, lsr #6
   13958:	andeq	r5, r0, sl, ror #2
   1395c:	andeq	r6, r0, r2, ror #3
   13960:	push	{r4, sl, fp, lr}
   13964:	add	fp, sp, #8
   13968:	sub	sp, sp, #80	; 0x50
   1396c:	cmp	r2, #0
   13970:	bne	13980 <flatcc_builder_embed_buffer@@Base+0x1ac>
   13974:	ldrh	r2, [r0, #132]	; 0x84
   13978:	cmp	r2, #0
   1397c:	movweq	r2, #1
   13980:	ldrh	r4, [r1]
   13984:	cmp	r4, #4
   13988:	movwcc	r4, #4
   1398c:	cmpcs	r4, r2
   13990:	bcs	139a0 <flatcc_builder_embed_buffer@@Base+0x1cc>
   13994:	cmp	r4, r2
   13998:	movcc	r4, r2
   1399c:	strh	r4, [r1]
   139a0:	cmp	r3, #0
   139a4:	bne	13a18 <flatcc_builder_embed_buffer@@Base+0x244>
   139a8:	ldr	r4, [r0, #140]	; 0x8c
   139ac:	sub	r1, r2, #1
   139b0:	ands	r1, r4, r1
   139b4:	beq	13a18 <flatcc_builder_embed_buffer@@Base+0x244>
   139b8:	mov	r2, #1
   139bc:	str	r1, [sp, #20]
   139c0:	str	r1, [sp, #8]
   139c4:	cmn	r1, #1
   139c8:	str	r2, [sp, #12]
   139cc:	ldr	r2, [pc, #172]	; 13a80 <flatcc_builder_embed_buffer@@Base+0x2ac>
   139d0:	ldr	r2, [pc, r2]
   139d4:	str	r2, [sp, #16]
   139d8:	add	r2, r1, r4
   139dc:	str	r2, [r0, #140]	; 0x8c
   139e0:	ble	13a20 <flatcc_builder_embed_buffer@@Base+0x24c>
   139e4:	ldr	r2, [r0, #36]	; 0x24
   139e8:	ldr	ip, [r0, #44]	; 0x2c
   139ec:	add	r0, sp, #8
   139f0:	str	r1, [sp]
   139f4:	mov	r3, r4
   139f8:	add	r1, r0, #8
   139fc:	mov	r0, r2
   13a00:	mov	r2, #1
   13a04:	blx	ip
   13a08:	cmp	r0, #0
   13a0c:	bne	13a40 <flatcc_builder_embed_buffer@@Base+0x26c>
   13a10:	cmn	r4, #1
   13a14:	beq	13a60 <flatcc_builder_embed_buffer@@Base+0x28c>
   13a18:	sub	sp, fp, #8
   13a1c:	pop	{r4, sl, fp, pc}
   13a20:	ldr	r0, [pc, #92]	; 13a84 <flatcc_builder_embed_buffer@@Base+0x2b0>
   13a24:	ldr	r1, [pc, #92]	; 13a88 <flatcc_builder_embed_buffer@@Base+0x2b4>
   13a28:	ldr	r3, [pc, #92]	; 13a8c <flatcc_builder_embed_buffer@@Base+0x2b8>
   13a2c:	movw	r2, #673	; 0x2a1
   13a30:	add	r0, pc, r0
   13a34:	add	r1, pc, r1
   13a38:	add	r3, pc, r3
   13a3c:	bl	12498 <__assert_fail@plt>
   13a40:	ldr	r0, [pc, #72]	; 13a90 <flatcc_builder_embed_buffer@@Base+0x2bc>
   13a44:	ldr	r1, [pc, #72]	; 13a94 <flatcc_builder_embed_buffer@@Base+0x2c0>
   13a48:	ldr	r3, [pc, #72]	; 13a98 <flatcc_builder_embed_buffer@@Base+0x2c4>
   13a4c:	movw	r2, #677	; 0x2a5
   13a50:	add	r0, pc, r0
   13a54:	add	r1, pc, r1
   13a58:	add	r3, pc, r3
   13a5c:	bl	12498 <__assert_fail@plt>
   13a60:	ldr	r0, [pc, #52]	; 13a9c <flatcc_builder_embed_buffer@@Base+0x2c8>
   13a64:	ldr	r1, [pc, #52]	; 13aa0 <flatcc_builder_embed_buffer@@Base+0x2cc>
   13a68:	ldr	r3, [pc, #52]	; 13aa4 <flatcc_builder_embed_buffer@@Base+0x2d0>
   13a6c:	movw	r2, #702	; 0x2be
   13a70:	add	r0, pc, r0
   13a74:	add	r1, pc, r1
   13a78:	add	r3, pc, r3
   13a7c:	bl	12498 <__assert_fail@plt>
   13a80:	andeq	r6, r1, r4, lsl #13
   13a84:	andeq	r6, r0, pc, lsl #4
   13a88:	andeq	r5, r0, lr, asr #32
   13a8c:	andeq	r6, r0, r2, lsl #3
   13a90:	andeq	r6, r0, pc, ror #3
   13a94:	andeq	r5, r0, lr, lsr #32
   13a98:	andeq	r6, r0, r2, ror #2
   13a9c:	andeq	r6, r0, pc, asr #3
   13aa0:	andeq	r5, r0, lr
   13aa4:	andeq	r6, r0, r4, asr #32

00013aa8 <flatcc_builder_create_buffer@@Base>:
   13aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13aac:	add	fp, sp, #28
   13ab0:	sub	sp, sp, #100	; 0x64
   13ab4:	ldr	sl, [fp, #12]
   13ab8:	mov	r4, r0
   13abc:	ldr	r0, [fp, #8]
   13ac0:	mov	r7, r1
   13ac4:	mov	r5, #0
   13ac8:	mov	r6, r3
   13acc:	sub	r1, fp, #30
   13ad0:	str	r5, [sp, #12]
   13ad4:	and	r9, sl, #1
   13ad8:	strh	r0, [fp, #-30]	; 0xffffffe2
   13adc:	mov	r0, r4
   13ae0:	mov	r3, r9
   13ae4:	bl	13960 <flatcc_builder_embed_buffer@@Base+0x18c>
   13ae8:	ldrh	r0, [r4, #128]	; 0x80
   13aec:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13af0:	str	r6, [sp, #8]
   13af4:	cmp	r0, r1
   13af8:	strhcc	r1, [r4, #128]	; 0x80
   13afc:	cmp	r7, #0
   13b00:	beq	13b1c <flatcc_builder_create_buffer@@Base+0x74>
   13b04:	ldr	r5, [r7]
   13b08:	cmp	r5, #0
   13b0c:	str	r5, [sp, #12]
   13b10:	movwne	r5, #1
   13b14:	lsl	r7, r5, #2
   13b18:	b	13b20 <flatcc_builder_create_buffer@@Base+0x78>
   13b1c:	mov	r7, #0
   13b20:	ldr	r0, [r4, #136]	; 0x88
   13b24:	and	r2, sl, #2
   13b28:	mov	r3, #0
   13b2c:	sub	r6, r1, #1
   13b30:	ands	ip, sl, #3
   13b34:	mov	sl, #4
   13b38:	mov	r1, #4
   13b3c:	str	r3, [sp, #20]
   13b40:	str	r3, [sp, #16]
   13b44:	sub	r2, r0, r2, lsl #1
   13b48:	sub	r2, r2, r7
   13b4c:	sub	r2, r2, #4
   13b50:	beq	13b74 <flatcc_builder_create_buffer@@Base+0xcc>
   13b54:	mov	r1, #4
   13b58:	sub	r3, fp, #40	; 0x28
   13b5c:	str	r1, [sp, #28]
   13b60:	str	r3, [sp, #24]
   13b64:	str	r1, [sp, #16]
   13b68:	mov	r3, #1
   13b6c:	mov	r1, #8
   13b70:	str	r3, [sp, #20]
   13b74:	add	lr, sp, #16
   13b78:	and	r6, r2, r6
   13b7c:	sub	r8, fp, #36	; 0x24
   13b80:	str	r1, [sp, #16]
   13b84:	cmp	r5, #0
   13b88:	add	r2, lr, r3, lsl #3
   13b8c:	str	r8, [r2, #8]
   13b90:	str	sl, [r2, #12]
   13b94:	add	r2, r3, #1
   13b98:	str	r2, [sp, #20]
   13b9c:	beq	13bc0 <flatcc_builder_create_buffer@@Base+0x118>
   13ba0:	add	r2, lr, r2, lsl #3
   13ba4:	add	r1, r1, r7
   13ba8:	add	r5, sp, #12
   13bac:	str	r1, [sp, #16]
   13bb0:	str	r5, [r2, #8]
   13bb4:	str	r7, [r2, #12]
   13bb8:	orr	r2, r3, #2
   13bbc:	str	r2, [sp, #20]
   13bc0:	cmp	r6, #0
   13bc4:	beq	13bec <flatcc_builder_create_buffer@@Base+0x144>
   13bc8:	add	r1, r1, r6
   13bcc:	add	r3, lr, r2, lsl #3
   13bd0:	add	r2, r2, #1
   13bd4:	str	r1, [sp, #16]
   13bd8:	ldr	r5, [pc, #220]	; 13cbc <flatcc_builder_create_buffer@@Base+0x214>
   13bdc:	ldr	r5, [pc, r5]
   13be0:	str	r5, [r3, #8]
   13be4:	str	r6, [r3, #12]
   13be8:	str	r2, [sp, #20]
   13bec:	sub	r7, r0, r1
   13bf0:	cmp	ip, #0
   13bf4:	mov	r6, #144	; 0x90
   13bf8:	ldr	r3, [sp, #8]
   13bfc:	mov	r0, r7
   13c00:	addne	r0, r0, #4
   13c04:	cmp	r9, #0
   13c08:	movweq	r6, #140	; 0x8c
   13c0c:	cmp	r1, #0
   13c10:	ldr	r6, [r4, r6]
   13c14:	sub	r3, r3, r0
   13c18:	str	r3, [fp, #-36]	; 0xffffffdc
   13c1c:	sub	r0, r6, r0
   13c20:	str	r0, [fp, #-40]	; 0xffffffd8
   13c24:	ble	13c7c <flatcc_builder_create_buffer@@Base+0x1d4>
   13c28:	ldr	r0, [r4, #36]	; 0x24
   13c2c:	ldr	r6, [r4, #44]	; 0x2c
   13c30:	str	r1, [sp]
   13c34:	add	r1, lr, #8
   13c38:	mov	r3, r7
   13c3c:	blx	r6
   13c40:	cmp	r0, #0
   13c44:	bne	13c9c <flatcc_builder_create_buffer@@Base+0x1f4>
   13c48:	cmp	r7, #0
   13c4c:	str	r7, [r4, #136]	; 0x88
   13c50:	movne	r0, r7
   13c54:	subne	sp, fp, #28
   13c58:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c5c:	ldr	r0, [pc, #116]	; 13cd8 <flatcc_builder_create_buffer@@Base+0x230>
   13c60:	ldr	r1, [pc, #116]	; 13cdc <flatcc_builder_create_buffer@@Base+0x234>
   13c64:	ldr	r3, [pc, #116]	; 13ce0 <flatcc_builder_create_buffer@@Base+0x238>
   13c68:	mov	r2, #772	; 0x304
   13c6c:	add	r0, pc, r0
   13c70:	add	r1, pc, r1
   13c74:	add	r3, pc, r3
   13c78:	bl	12498 <__assert_fail@plt>
   13c7c:	ldr	r0, [pc, #60]	; 13cc0 <flatcc_builder_create_buffer@@Base+0x218>
   13c80:	ldr	r1, [pc, #60]	; 13cc4 <flatcc_builder_create_buffer@@Base+0x21c>
   13c84:	ldr	r3, [pc, #60]	; 13cc8 <flatcc_builder_create_buffer@@Base+0x220>
   13c88:	movw	r2, #647	; 0x287
   13c8c:	add	r0, pc, r0
   13c90:	add	r1, pc, r1
   13c94:	add	r3, pc, r3
   13c98:	bl	12498 <__assert_fail@plt>
   13c9c:	ldr	r0, [pc, #40]	; 13ccc <flatcc_builder_create_buffer@@Base+0x224>
   13ca0:	ldr	r1, [pc, #40]	; 13cd0 <flatcc_builder_create_buffer@@Base+0x228>
   13ca4:	ldr	r3, [pc, #40]	; 13cd4 <flatcc_builder_create_buffer@@Base+0x22c>
   13ca8:	movw	r2, #651	; 0x28b
   13cac:	add	r0, pc, r0
   13cb0:	add	r1, pc, r1
   13cb4:	add	r3, pc, r3
   13cb8:	bl	12498 <__assert_fail@plt>
   13cbc:	andeq	r6, r1, r8, ror r4
   13cc0:			; <UNDEFINED> instruction: 0x00005fb3
   13cc4:	strdeq	r4, [r0], -r2
   13cc8:	andeq	r5, r0, sl, ror #28
   13ccc:	muleq	r0, r3, pc	; <UNPREDICTABLE>
   13cd0:	ldrdeq	r4, [r0], -r2
   13cd4:	andeq	r5, r0, sl, asr #28
   13cd8:	ldrdeq	r5, [r0], -r3
   13cdc:	andeq	r4, r0, r2, lsl lr
   13ce0:	andeq	r4, r0, r0, ror #30

00013ce4 <flatcc_builder_create_struct@@Base>:
   13ce4:	push	{r4, r5, r6, sl, fp, lr}
   13ce8:	add	fp, sp, #16
   13cec:	sub	sp, sp, #80	; 0x50
   13cf0:	cmp	r3, #0
   13cf4:	beq	13dcc <flatcc_builder_create_struct@@Base+0xe8>
   13cf8:	mov	r5, r0
   13cfc:	ldrh	r0, [r0, #128]	; 0x80
   13d00:	mov	r4, #0
   13d04:	cmp	r0, r3
   13d08:	strhcc	r3, [r5, #128]	; 0x80
   13d0c:	sub	r3, r3, #1
   13d10:	cmp	r2, #0
   13d14:	ldr	r0, [r5, #136]	; 0x88
   13d18:	str	r4, [sp, #12]
   13d1c:	str	r4, [sp, #8]
   13d20:	movne	r4, #1
   13d24:	strne	r2, [sp, #20]
   13d28:	strne	r1, [sp, #16]
   13d2c:	strne	r2, [sp, #8]
   13d30:	strne	r4, [sp, #12]
   13d34:	sub	r6, r0, r2
   13d38:	and	r3, r6, r3
   13d3c:	cmp	r3, #0
   13d40:	beq	13d6c <flatcc_builder_create_struct@@Base+0x88>
   13d44:	add	r2, r3, r2
   13d48:	add	r1, sp, #8
   13d4c:	str	r2, [sp, #8]
   13d50:	add	r1, r1, r4, lsl #3
   13d54:	add	r4, r4, #1
   13d58:	ldr	r6, [pc, #172]	; 13e0c <flatcc_builder_create_struct@@Base+0x128>
   13d5c:	ldr	r6, [pc, r6]
   13d60:	str	r6, [r1, #8]
   13d64:	str	r3, [r1, #12]
   13d68:	str	r4, [sp, #12]
   13d6c:	cmp	r2, #0
   13d70:	ble	13dec <flatcc_builder_create_struct@@Base+0x108>
   13d74:	sub	r6, r0, r2
   13d78:	ldr	r0, [r5, #36]	; 0x24
   13d7c:	ldr	ip, [r5, #44]	; 0x2c
   13d80:	add	r1, sp, #8
   13d84:	str	r2, [sp]
   13d88:	mov	r2, r4
   13d8c:	add	r1, r1, #8
   13d90:	mov	r3, r6
   13d94:	blx	ip
   13d98:	cmp	r0, #0
   13d9c:	streq	r6, [r5, #136]	; 0x88
   13da0:	moveq	r0, r6
   13da4:	subeq	sp, fp, #16
   13da8:	popeq	{r4, r5, r6, sl, fp, pc}
   13dac:	ldr	r0, [pc, #116]	; 13e28 <flatcc_builder_create_struct@@Base+0x144>
   13db0:	ldr	r1, [pc, #116]	; 13e2c <flatcc_builder_create_struct@@Base+0x148>
   13db4:	ldr	r3, [pc, #116]	; 13e30 <flatcc_builder_create_struct@@Base+0x14c>
   13db8:	movw	r2, #651	; 0x28b
   13dbc:	add	r0, pc, r0
   13dc0:	add	r1, pc, r1
   13dc4:	add	r3, pc, r3
   13dc8:	bl	12498 <__assert_fail@plt>
   13dcc:	ldr	r0, [pc, #60]	; 13e10 <flatcc_builder_create_struct@@Base+0x12c>
   13dd0:	ldr	r1, [pc, #60]	; 13e14 <flatcc_builder_create_struct@@Base+0x130>
   13dd4:	ldr	r3, [pc, #60]	; 13e18 <flatcc_builder_create_struct@@Base+0x134>
   13dd8:	movw	r2, #783	; 0x30f
   13ddc:	add	r0, pc, r0
   13de0:	add	r1, pc, r1
   13de4:	add	r3, pc, r3
   13de8:	bl	12498 <__assert_fail@plt>
   13dec:	ldr	r0, [pc, #40]	; 13e1c <flatcc_builder_create_struct@@Base+0x138>
   13df0:	ldr	r1, [pc, #40]	; 13e20 <flatcc_builder_create_struct@@Base+0x13c>
   13df4:	ldr	r3, [pc, #40]	; 13e24 <flatcc_builder_create_struct@@Base+0x140>
   13df8:	movw	r2, #647	; 0x287
   13dfc:	add	r0, pc, r0
   13e00:	add	r1, pc, r1
   13e04:	add	r3, pc, r3
   13e08:	bl	12498 <__assert_fail@plt>
   13e0c:	strdeq	r6, [r1], -r8
   13e10:	andeq	r4, r0, fp, ror lr
   13e14:	andeq	r4, r0, r2, lsr #25
   13e18:	andeq	r4, r0, lr, ror lr
   13e1c:	andeq	r5, r0, r3, asr #28
   13e20:	andeq	r4, r0, r2, lsl #25
   13e24:	strdeq	r5, [r0], -sl
   13e28:	andeq	r5, r0, r3, lsl #29
   13e2c:	andeq	r4, r0, r2, asr #25
   13e30:	andeq	r5, r0, sl, lsr sp

00013e34 <flatcc_builder_start_buffer@@Base>:
   13e34:	push	{r4, r5, r6, r7, fp, lr}
   13e38:	add	fp, sp, #16
   13e3c:	mov	r5, r1
   13e40:	ldrh	r1, [r0, #128]	; 0x80
   13e44:	mov	r6, r3
   13e48:	mov	r7, r2
   13e4c:	mov	r4, r0
   13e50:	bl	13ef4 <flatcc_builder_start_buffer@@Base+0xc0>
   13e54:	mov	r1, r0
   13e58:	mvn	r0, #0
   13e5c:	cmp	r1, #0
   13e60:	popne	{r4, r5, r6, r7, fp, pc}
   13e64:	mov	r0, #1
   13e68:	cmp	r5, #0
   13e6c:	strh	r0, [r4, #128]	; 0x80
   13e70:	ldrh	r1, [r4, #132]	; 0x84
   13e74:	ldr	r2, [r4, #32]
   13e78:	strh	r1, [r2, #34]	; 0x22
   13e7c:	strh	r7, [r4, #132]	; 0x84
   13e80:	ldrh	r1, [r4, #164]	; 0xa4
   13e84:	ldr	r2, [r4, #32]
   13e88:	strh	r1, [r2, #32]
   13e8c:	strh	r6, [r4, #164]	; 0xa4
   13e90:	ldr	r1, [r4, #32]
   13e94:	ldr	r2, [r4, #144]	; 0x90
   13e98:	str	r2, [r1, #20]
   13e9c:	ldr	r1, [r4, #32]
   13ea0:	ldr	r2, [r4, #152]	; 0x98
   13ea4:	str	r2, [r1, #28]
   13ea8:	ldr	r3, [r4, #148]	; 0x94
   13eac:	ldr	r1, [r4, #32]
   13eb0:	ldr	r2, [r4, #136]	; 0x88
   13eb4:	ldr	r7, [r4, #168]	; 0xa8
   13eb8:	add	r6, r3, #1
   13ebc:	str	r2, [r4, #144]	; 0x90
   13ec0:	str	r6, [r4, #148]	; 0x94
   13ec4:	str	r3, [r4, #152]	; 0x98
   13ec8:	str	r7, [r1, #16]
   13ecc:	ldr	r1, [pc, #28]	; 13ef0 <flatcc_builder_start_buffer@@Base+0xbc>
   13ed0:	ldr	r1, [pc, r1]
   13ed4:	movne	r1, r5
   13ed8:	ldr	r1, [r1]
   13edc:	str	r1, [r4, #168]	; 0xa8
   13ee0:	ldr	r1, [r4, #32]
   13ee4:	strh	r0, [r1, #14]
   13ee8:	mov	r0, #0
   13eec:	pop	{r4, r5, r6, r7, fp, pc}
   13ef0:	andeq	r6, r1, r4, lsl #3
   13ef4:	push	{r4, r5, r6, r7, fp, lr}
   13ef8:	add	fp, sp, #16
   13efc:	sub	sp, sp, #8
   13f00:	mov	r5, r1
   13f04:	ldr	r1, [r0, #156]	; 0x9c
   13f08:	ldr	r2, [r0, #160]	; 0xa0
   13f0c:	mov	r4, r0
   13f10:	add	r0, r1, #1
   13f14:	cmp	r1, r2
   13f18:	str	r0, [r4, #156]	; 0x9c
   13f1c:	bge	13f30 <flatcc_builder_start_buffer@@Base+0xfc>
   13f20:	ldr	r0, [r4, #32]
   13f24:	add	r0, r0, #36	; 0x24
   13f28:	str	r0, [r4, #32]
   13f2c:	b	13fc4 <flatcc_builder_start_buffer@@Base+0x190>
   13f30:	ldr	r2, [r4, #176]	; 0xb0
   13f34:	mvn	r6, #0
   13f38:	cmp	r2, #1
   13f3c:	cmpge	r1, r2
   13f40:	bge	13ffc <flatcc_builder_start_buffer@@Base+0x1c8>
   13f44:	add	r7, r0, r0, lsl #3
   13f48:	ldr	r0, [r4, #88]	; 0x58
   13f4c:	lsl	r2, r7, #2
   13f50:	cmp	r2, r0
   13f54:	bls	13f7c <flatcc_builder_start_buffer@@Base+0x148>
   13f58:	ldr	r0, [r4, #40]	; 0x28
   13f5c:	ldr	ip, [r4, #48]	; 0x30
   13f60:	mov	r3, #4
   13f64:	add	r1, r4, #84	; 0x54
   13f68:	str	r3, [sp]
   13f6c:	mov	r3, #0
   13f70:	blx	ip
   13f74:	cmp	r0, #0
   13f78:	bne	14008 <flatcc_builder_start_buffer@@Base+0x1d4>
   13f7c:	ldr	r1, [r4, #84]	; 0x54
   13f80:	mvn	r0, #35	; 0x23
   13f84:	add	r0, r0, r7, lsl #2
   13f88:	adds	r0, r0, r1
   13f8c:	str	r0, [r4, #32]
   13f90:	beq	13ffc <flatcc_builder_start_buffer@@Base+0x1c8>
   13f94:	ldr	r1, [r4, #88]	; 0x58
   13f98:	movw	r3, #36409	; 0x8e39
   13f9c:	ldr	r2, [r4, #176]	; 0xb0
   13fa0:	movt	r3, #14563	; 0x38e3
   13fa4:	umull	r1, r3, r1, r3
   13fa8:	cmp	r2, r3, lsr #3
   13fac:	lsr	r1, r3, #3
   13fb0:	mov	r3, r1
   13fb4:	movlt	r3, r2
   13fb8:	cmp	r2, #0
   13fbc:	movle	r3, r1
   13fc0:	str	r3, [r4, #160]	; 0xa0
   13fc4:	ldr	r1, [r4, #20]
   13fc8:	mvn	r3, #3
   13fcc:	mov	r6, #0
   13fd0:	str	r1, [r0, #8]
   13fd4:	ldrh	r2, [r4, #130]	; 0x82
   13fd8:	strh	r2, [r0, #12]
   13fdc:	strh	r5, [r4, #130]	; 0x82
   13fe0:	ldr	r2, [r4, #28]
   13fe4:	stm	r0, {r2, r3}
   13fe8:	add	r0, r1, r2
   13fec:	str	r6, [r4, #20]
   13ff0:	add	r0, r0, #7
   13ff4:	bic	r0, r0, #7
   13ff8:	str	r0, [r4, #28]
   13ffc:	mov	r0, r6
   14000:	sub	sp, fp, #16
   14004:	pop	{r4, r5, r6, r7, fp, pc}
   14008:	ldr	r0, [pc, #24]	; 14028 <flatcc_builder_start_buffer@@Base+0x1f4>
   1400c:	ldr	r1, [pc, #24]	; 1402c <flatcc_builder_start_buffer@@Base+0x1f8>
   14010:	ldr	r3, [pc, #24]	; 14030 <flatcc_builder_start_buffer@@Base+0x1fc>
   14014:	mov	r2, #308	; 0x134
   14018:	add	r0, pc, r0
   1401c:	add	r1, pc, r1
   14020:	add	r3, pc, r3
   14024:	bl	12498 <__assert_fail@plt>
   14028:	andeq	r5, r0, r7, lsr #24
   1402c:	andeq	r4, r0, r6, ror #20
   14030:	andeq	r5, r0, r9, asr sl

00014034 <flatcc_builder_end_buffer@@Base>:
   14034:	push	{r4, r5, r6, sl, fp, lr}
   14038:	add	fp, sp, #16
   1403c:	sub	sp, sp, #8
   14040:	mov	r4, r0
   14044:	ldr	r0, [r0, #32]
   14048:	ldrh	r0, [r0, #14]
   1404c:	cmp	r0, #1
   14050:	bne	14144 <flatcc_builder_end_buffer@@Base+0x110>
   14054:	mov	r3, r1
   14058:	ldr	r1, [r4, #152]	; 0x98
   1405c:	ldrh	r0, [r4, #164]	; 0xa4
   14060:	ldrh	r2, [r4, #132]	; 0x84
   14064:	cmp	r1, #0
   14068:	ldrh	r1, [r4, #128]	; 0x80
   1406c:	and	r0, r0, #2
   14070:	orrne	r0, r0, #1
   14074:	cmp	r1, r2
   14078:	movcc	r1, r2
   1407c:	strhcc	r2, [r4, #128]	; 0x80
   14080:	str	r0, [sp, #4]
   14084:	mov	r0, r4
   14088:	str	r1, [sp]
   1408c:	add	r1, r4, #168	; 0xa8
   14090:	bl	13aa8 <flatcc_builder_create_buffer@@Base>
   14094:	mov	r6, r0
   14098:	cmp	r0, #0
   1409c:	beq	14138 <flatcc_builder_end_buffer@@Base+0x104>
   140a0:	ldr	r1, [r4, #32]
   140a4:	ldr	r0, [r4, #16]
   140a8:	ldr	r2, [r4, #20]
   140ac:	ldr	r3, [r1, #20]
   140b0:	str	r3, [r4, #144]	; 0x90
   140b4:	ldr	r3, [r1, #28]
   140b8:	str	r3, [r4, #152]	; 0x98
   140bc:	ldr	r3, [r1, #16]
   140c0:	str	r3, [r4, #168]	; 0xa8
   140c4:	ldrh	r1, [r1, #32]
   140c8:	strh	r1, [r4, #164]	; 0xa4
   140cc:	mov	r1, #0
   140d0:	bl	12468 <memset@plt>
   140d4:	ldr	r0, [r4, #32]
   140d8:	ldr	r1, [r4, #60]	; 0x3c
   140dc:	ldr	r2, [r4, #64]	; 0x40
   140e0:	ldr	r3, [r0, #8]
   140e4:	str	r3, [r4, #20]
   140e8:	ldr	r3, [r0]
   140ec:	str	r3, [r4, #28]
   140f0:	add	r1, r1, r3
   140f4:	ldr	r5, [r0, #4]
   140f8:	str	r1, [r4, #16]
   140fc:	sub	r1, r2, r3
   14100:	cmp	r1, r5
   14104:	movhi	r1, r5
   14108:	str	r1, [r4, #24]
   1410c:	ldrh	r1, [r4, #130]	; 0x82
   14110:	ldrh	r2, [r4, #128]	; 0x80
   14114:	cmp	r2, r1
   14118:	strhcc	r1, [r4, #128]	; 0x80
   1411c:	ldrh	r1, [r0, #12]
   14120:	sub	r0, r0, #36	; 0x24
   14124:	str	r0, [r4, #32]
   14128:	strh	r1, [r4, #130]	; 0x82
   1412c:	ldr	r0, [r4, #156]	; 0x9c
   14130:	sub	r0, r0, #1
   14134:	str	r0, [r4, #156]	; 0x9c
   14138:	mov	r0, r6
   1413c:	sub	sp, fp, #16
   14140:	pop	{r4, r5, r6, sl, fp, pc}
   14144:	ldr	r0, [pc, #24]	; 14164 <flatcc_builder_end_buffer@@Base+0x130>
   14148:	ldr	r1, [pc, #24]	; 14168 <flatcc_builder_end_buffer@@Base+0x134>
   1414c:	ldr	r3, [pc, #24]	; 1416c <flatcc_builder_end_buffer@@Base+0x138>
   14150:	movw	r2, #838	; 0x346
   14154:	add	r0, pc, r0
   14158:	add	r1, pc, r1
   1415c:	add	r3, pc, r3
   14160:	bl	12498 <__assert_fail@plt>
   14164:	andeq	r4, r0, r4, ror fp
   14168:	andeq	r4, r0, sl, lsr #18
   1416c:	muleq	r0, r8, fp

00014170 <flatcc_builder_start_struct@@Base>:
   14170:	push	{r4, r5, r6, r7, fp, lr}
   14174:	add	fp, sp, #16
   14178:	sub	sp, sp, #8
   1417c:	mov	r6, r1
   14180:	mov	r1, r2
   14184:	mov	r4, r0
   14188:	bl	13ef4 <flatcc_builder_start_buffer@@Base+0xc0>
   1418c:	mov	r5, #0
   14190:	cmp	r0, #0
   14194:	bne	14244 <flatcc_builder_start_struct@@Base+0xd4>
   14198:	ldr	r2, [r4, #32]
   1419c:	mov	r0, #2
   141a0:	mvn	r7, #3
   141a4:	strh	r0, [r2, #14]
   141a8:	ldr	r1, [r4, #28]
   141ac:	ldr	r3, [r4, #64]	; 0x40
   141b0:	ldr	r0, [r4, #60]	; 0x3c
   141b4:	sub	r3, r3, r1
   141b8:	add	r0, r0, r1
   141bc:	cmn	r3, #4
   141c0:	str	r0, [r4, #16]
   141c4:	movcs	r3, r7
   141c8:	str	r3, [r4, #24]
   141cc:	str	r7, [r2, #4]
   141d0:	ldr	r7, [r4, #20]
   141d4:	add	r2, r7, r6
   141d8:	cmp	r2, r3
   141dc:	str	r2, [r4, #20]
   141e0:	bcc	14240 <flatcc_builder_start_struct@@Base+0xd0>
   141e4:	ldr	r0, [r4, #40]	; 0x28
   141e8:	ldr	r6, [r4, #48]	; 0x30
   141ec:	add	r1, r1, r2
   141f0:	mov	r3, #1
   141f4:	str	r3, [sp]
   141f8:	add	r2, r1, #1
   141fc:	add	r1, r4, #60	; 0x3c
   14200:	mov	r3, #1
   14204:	blx	r6
   14208:	cmp	r0, #0
   1420c:	bne	14244 <flatcc_builder_start_struct@@Base+0xd4>
   14210:	ldr	r1, [r4, #28]
   14214:	ldr	r0, [r4, #60]	; 0x3c
   14218:	ldr	r3, [r4, #64]	; 0x40
   1421c:	ldr	r2, [r4, #32]
   14220:	add	r0, r0, r1
   14224:	sub	r1, r3, r1
   14228:	mvn	r3, #3
   1422c:	cmn	r1, #4
   14230:	str	r0, [r4, #16]
   14234:	movcs	r1, r3
   14238:	str	r1, [r4, #24]
   1423c:	str	r3, [r2, #4]
   14240:	add	r5, r0, r7
   14244:	mov	r0, r5
   14248:	sub	sp, fp, #16
   1424c:	pop	{r4, r5, r6, r7, fp, pc}

00014250 <flatcc_builder_struct_edit@@Base>:
   14250:	ldr	r0, [r0, #16]
   14254:	bx	lr

00014258 <flatcc_builder_end_struct@@Base>:
   14258:	push	{r4, r5, fp, lr}
   1425c:	add	fp, sp, #8
   14260:	mov	r4, r0
   14264:	ldr	r0, [r0, #32]
   14268:	ldrh	r0, [r0, #14]
   1426c:	cmp	r0, #2
   14270:	bne	14310 <flatcc_builder_end_struct@@Base+0xb8>
   14274:	ldrh	r3, [r4, #130]	; 0x82
   14278:	ldr	r1, [r4, #16]
   1427c:	ldr	r2, [r4, #20]
   14280:	mov	r0, r4
   14284:	bl	13ce4 <flatcc_builder_create_struct@@Base>
   14288:	mov	r5, r0
   1428c:	cmp	r0, #0
   14290:	beq	14308 <flatcc_builder_end_struct@@Base+0xb0>
   14294:	ldr	r0, [r4, #16]
   14298:	ldr	r2, [r4, #20]
   1429c:	mov	r1, #0
   142a0:	bl	12468 <memset@plt>
   142a4:	ldr	r0, [r4, #32]
   142a8:	ldr	r1, [r4, #60]	; 0x3c
   142ac:	ldr	ip, [r4, #64]	; 0x40
   142b0:	ldr	r3, [r0, #8]
   142b4:	str	r3, [r4, #20]
   142b8:	ldr	r3, [r0]
   142bc:	str	r3, [r4, #28]
   142c0:	add	r1, r1, r3
   142c4:	ldr	r2, [r0, #4]
   142c8:	str	r1, [r4, #16]
   142cc:	sub	r1, ip, r3
   142d0:	cmp	r1, r2
   142d4:	movhi	r1, r2
   142d8:	str	r1, [r4, #24]
   142dc:	ldrh	r1, [r4, #130]	; 0x82
   142e0:	ldrh	r2, [r4, #128]	; 0x80
   142e4:	cmp	r2, r1
   142e8:	strhcc	r1, [r4, #128]	; 0x80
   142ec:	ldrh	r1, [r0, #12]
   142f0:	sub	r0, r0, #36	; 0x24
   142f4:	str	r0, [r4, #32]
   142f8:	strh	r1, [r4, #130]	; 0x82
   142fc:	ldr	r0, [r4, #156]	; 0x9c
   14300:	sub	r0, r0, #1
   14304:	str	r0, [r4, #156]	; 0x9c
   14308:	mov	r0, r5
   1430c:	pop	{r4, r5, fp, pc}
   14310:	ldr	r0, [pc, #24]	; 14330 <flatcc_builder_end_struct@@Base+0xd8>
   14314:	ldr	r1, [pc, #24]	; 14334 <flatcc_builder_end_struct@@Base+0xdc>
   14318:	ldr	r3, [pc, #24]	; 14338 <flatcc_builder_end_struct@@Base+0xe0>
   1431c:	mov	r2, #872	; 0x368
   14320:	add	r0, pc, r0
   14324:	add	r1, pc, r1
   14328:	add	r3, pc, r3
   1432c:	bl	12498 <__assert_fail@plt>
   14330:	andeq	r4, r0, sp, lsr #20
   14334:	andeq	r4, r0, lr, asr r7
   14338:	andeq	r4, r0, r1, asr sl

0001433c <flatcc_builder_extend_vector@@Base>:
   1433c:	push	{r4, r5, fp, lr}
   14340:	add	fp, sp, #8
   14344:	sub	sp, sp, #8
   14348:	mov	r4, r0
   1434c:	ldr	r0, [r0, #32]
   14350:	ldr	r2, [r0, #20]
   14354:	adds	r2, r2, r1
   14358:	bcs	14410 <flatcc_builder_extend_vector@@Base+0xd4>
   1435c:	ldr	r3, [r0, #24]
   14360:	cmp	r2, r3
   14364:	bhi	14410 <flatcc_builder_extend_vector@@Base+0xd4>
   14368:	str	r2, [r0, #20]
   1436c:	ldr	r2, [r4, #32]
   14370:	ldr	r5, [r4, #20]
   14374:	ldr	r0, [r4, #24]
   14378:	ldr	r2, [r2, #16]
   1437c:	mla	r1, r2, r1, r5
   14380:	cmp	r1, r0
   14384:	str	r1, [r4, #20]
   14388:	bcs	14394 <flatcc_builder_extend_vector@@Base+0x58>
   1438c:	ldr	r0, [r4, #16]
   14390:	b	14404 <flatcc_builder_extend_vector@@Base+0xc8>
   14394:	ldr	r2, [r4, #28]
   14398:	ldr	r0, [r4, #40]	; 0x28
   1439c:	ldr	ip, [r4, #48]	; 0x30
   143a0:	mov	r3, #1
   143a4:	str	r3, [sp]
   143a8:	mov	r3, #1
   143ac:	add	r1, r1, r2
   143b0:	add	r2, r1, #1
   143b4:	add	r1, r4, #60	; 0x3c
   143b8:	blx	ip
   143bc:	mov	r1, r0
   143c0:	mov	r0, #0
   143c4:	cmp	r1, #0
   143c8:	beq	143d4 <flatcc_builder_extend_vector@@Base+0x98>
   143cc:	sub	sp, fp, #8
   143d0:	pop	{r4, r5, fp, pc}
   143d4:	ldr	r1, [r4, #28]
   143d8:	ldr	r0, [r4, #60]	; 0x3c
   143dc:	ldr	r3, [r4, #64]	; 0x40
   143e0:	ldr	r2, [r4, #32]
   143e4:	add	r0, r0, r1
   143e8:	sub	r1, r3, r1
   143ec:	mvn	r3, #3
   143f0:	cmn	r1, #4
   143f4:	str	r0, [r4, #16]
   143f8:	movcs	r1, r3
   143fc:	str	r1, [r4, #24]
   14400:	str	r3, [r2, #4]
   14404:	add	r0, r0, r5
   14408:	sub	sp, fp, #8
   1440c:	pop	{r4, r5, fp, pc}
   14410:	ldr	r0, [pc, #24]	; 14430 <flatcc_builder_extend_vector@@Base+0xf4>
   14414:	ldr	r1, [pc, #24]	; 14434 <flatcc_builder_extend_vector@@Base+0xf8>
   14418:	ldr	r3, [pc, #24]	; 14438 <flatcc_builder_extend_vector@@Base+0xfc>
   1441c:	mov	r2, #892	; 0x37c
   14420:	add	r0, pc, r0
   14424:	add	r1, pc, r1
   14428:	add	r3, pc, r3
   1442c:	bl	12498 <__assert_fail@plt>
   14430:	andeq	r5, r0, r8, lsr #14
   14434:	andeq	r4, r0, lr, asr r6
   14438:	andeq	r5, r0, fp, lsr r7

0001443c <flatcc_builder_vector_push@@Base>:
   1443c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14440:	add	fp, sp, #24
   14444:	sub	sp, sp, #8
   14448:	mov	r5, r0
   1444c:	ldr	r0, [r0, #32]
   14450:	mov	r8, r1
   14454:	ldrh	r1, [r0, #14]
   14458:	cmp	r1, #4
   1445c:	bne	14534 <flatcc_builder_vector_push@@Base+0xf8>
   14460:	ldr	r1, [r0, #20]
   14464:	ldr	r2, [r0, #24]
   14468:	cmp	r1, r2
   1446c:	bhi	14554 <flatcc_builder_vector_push@@Base+0x118>
   14470:	add	r1, r1, #1
   14474:	str	r1, [r0, #20]
   14478:	ldr	r1, [r5, #32]
   1447c:	ldr	r4, [r5, #20]
   14480:	ldr	r0, [r5, #24]
   14484:	ldr	r6, [r1, #16]
   14488:	add	r1, r4, r6
   1448c:	cmp	r1, r0
   14490:	str	r1, [r5, #20]
   14494:	bcs	144b8 <flatcc_builder_vector_push@@Base+0x7c>
   14498:	ldr	r0, [r5, #16]
   1449c:	adds	r7, r0, r4
   144a0:	beq	14524 <flatcc_builder_vector_push@@Base+0xe8>
   144a4:	mov	r0, r7
   144a8:	mov	r1, r8
   144ac:	mov	r2, r6
   144b0:	bl	123e4 <memcpy@plt>
   144b4:	b	14528 <flatcc_builder_vector_push@@Base+0xec>
   144b8:	ldr	r2, [r5, #28]
   144bc:	ldr	r0, [r5, #40]	; 0x28
   144c0:	ldr	r7, [r5, #48]	; 0x30
   144c4:	mov	r3, #1
   144c8:	str	r3, [sp]
   144cc:	mov	r3, #1
   144d0:	add	r1, r1, r2
   144d4:	add	r2, r1, #1
   144d8:	add	r1, r5, #60	; 0x3c
   144dc:	blx	r7
   144e0:	mov	r7, #0
   144e4:	cmp	r0, #0
   144e8:	bne	14528 <flatcc_builder_vector_push@@Base+0xec>
   144ec:	ldr	r1, [r5, #28]
   144f0:	ldr	r0, [r5, #60]	; 0x3c
   144f4:	ldr	r3, [r5, #64]	; 0x40
   144f8:	ldr	r2, [r5, #32]
   144fc:	add	r0, r0, r1
   14500:	sub	r1, r3, r1
   14504:	mvn	r3, #3
   14508:	cmn	r1, #4
   1450c:	str	r0, [r5, #16]
   14510:	movcs	r1, r3
   14514:	str	r1, [r5, #24]
   14518:	str	r3, [r2, #4]
   1451c:	adds	r7, r0, r4
   14520:	bne	144a4 <flatcc_builder_vector_push@@Base+0x68>
   14524:	mov	r7, #0
   14528:	mov	r0, r7
   1452c:	sub	sp, fp, #24
   14530:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14534:	ldr	r0, [pc, #56]	; 14574 <flatcc_builder_vector_push@@Base+0x138>
   14538:	ldr	r1, [pc, #56]	; 14578 <flatcc_builder_vector_push@@Base+0x13c>
   1453c:	ldr	r3, [pc, #56]	; 1457c <flatcc_builder_vector_push@@Base+0x140>
   14540:	movw	r2, #907	; 0x38b
   14544:	add	r0, pc, r0
   14548:	add	r1, pc, r1
   1454c:	add	r3, pc, r3
   14550:	bl	12498 <__assert_fail@plt>
   14554:	ldr	r0, [pc, #36]	; 14580 <flatcc_builder_vector_push@@Base+0x144>
   14558:	ldr	r1, [pc, #36]	; 14584 <flatcc_builder_vector_push@@Base+0x148>
   1455c:	ldr	r3, [pc, #36]	; 14588 <flatcc_builder_vector_push@@Base+0x14c>
   14560:	mov	r2, #908	; 0x38c
   14564:	add	r0, pc, r0
   14568:	add	r1, pc, r1
   1456c:	add	r3, pc, r3
   14570:	bl	12498 <__assert_fail@plt>
   14574:	andeq	r4, r0, r8, ror r8
   14578:	andeq	r4, r0, sl, lsr r5
   1457c:	muleq	r0, ip, r8
   14580:	andeq	r4, r0, r7, asr #17
   14584:	andeq	r4, r0, sl, lsl r5
   14588:	andeq	r4, r0, ip, ror r8

0001458c <flatcc_builder_append_vector@@Base>:
   1458c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14590:	add	fp, sp, #24
   14594:	sub	sp, sp, #8
   14598:	mov	r6, r0
   1459c:	ldr	r0, [r0, #32]
   145a0:	mov	r8, r1
   145a4:	ldrh	r1, [r0, #14]
   145a8:	cmp	r1, #4
   145ac:	bne	146ac <flatcc_builder_append_vector@@Base+0x120>
   145b0:	ldr	r1, [r0, #20]
   145b4:	mov	r5, r2
   145b8:	adds	r1, r1, r2
   145bc:	bcs	1468c <flatcc_builder_append_vector@@Base+0x100>
   145c0:	ldr	r2, [r0, #24]
   145c4:	cmp	r1, r2
   145c8:	bhi	1468c <flatcc_builder_append_vector@@Base+0x100>
   145cc:	str	r1, [r0, #20]
   145d0:	ldr	r1, [r6, #32]
   145d4:	ldr	r4, [r6, #20]
   145d8:	ldr	r0, [r6, #24]
   145dc:	ldr	r9, [r1, #16]
   145e0:	mla	r1, r9, r5, r4
   145e4:	cmp	r1, r0
   145e8:	str	r1, [r6, #20]
   145ec:	bcs	14610 <flatcc_builder_append_vector@@Base+0x84>
   145f0:	ldr	r0, [r6, #16]
   145f4:	adds	r7, r0, r4
   145f8:	beq	1467c <flatcc_builder_append_vector@@Base+0xf0>
   145fc:	mul	r2, r9, r5
   14600:	mov	r0, r7
   14604:	mov	r1, r8
   14608:	bl	123e4 <memcpy@plt>
   1460c:	b	14680 <flatcc_builder_append_vector@@Base+0xf4>
   14610:	ldr	r2, [r6, #28]
   14614:	ldr	r0, [r6, #40]	; 0x28
   14618:	ldr	r7, [r6, #48]	; 0x30
   1461c:	mov	r3, #1
   14620:	str	r3, [sp]
   14624:	mov	r3, #1
   14628:	add	r1, r1, r2
   1462c:	add	r2, r1, #1
   14630:	add	r1, r6, #60	; 0x3c
   14634:	blx	r7
   14638:	mov	r7, #0
   1463c:	cmp	r0, #0
   14640:	bne	14680 <flatcc_builder_append_vector@@Base+0xf4>
   14644:	ldr	r1, [r6, #28]
   14648:	ldr	r0, [r6, #60]	; 0x3c
   1464c:	ldr	r3, [r6, #64]	; 0x40
   14650:	ldr	r2, [r6, #32]
   14654:	add	r0, r0, r1
   14658:	sub	r1, r3, r1
   1465c:	mvn	r3, #3
   14660:	cmn	r1, #4
   14664:	str	r0, [r6, #16]
   14668:	movcs	r1, r3
   1466c:	str	r1, [r6, #24]
   14670:	str	r3, [r2, #4]
   14674:	adds	r7, r0, r4
   14678:	bne	145fc <flatcc_builder_append_vector@@Base+0x70>
   1467c:	mov	r7, #0
   14680:	mov	r0, r7
   14684:	sub	sp, fp, #24
   14688:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1468c:	ldr	r0, [pc, #68]	; 146d8 <flatcc_builder_append_vector@@Base+0x14c>
   14690:	ldr	r1, [pc, #68]	; 146dc <flatcc_builder_append_vector@@Base+0x150>
   14694:	ldr	r3, [pc, #68]	; 146e0 <flatcc_builder_append_vector@@Base+0x154>
   14698:	mov	r2, #892	; 0x37c
   1469c:	add	r0, pc, r0
   146a0:	add	r1, pc, r1
   146a4:	add	r3, pc, r3
   146a8:	bl	12498 <__assert_fail@plt>
   146ac:	ldr	r0, [pc, #24]	; 146cc <flatcc_builder_append_vector@@Base+0x140>
   146b0:	ldr	r1, [pc, #24]	; 146d0 <flatcc_builder_append_vector@@Base+0x144>
   146b4:	ldr	r3, [pc, #24]	; 146d4 <flatcc_builder_append_vector@@Base+0x148>
   146b8:	movw	r2, #915	; 0x393
   146bc:	add	r0, pc, r0
   146c0:	add	r1, pc, r1
   146c4:	add	r3, pc, r3
   146c8:	bl	12498 <__assert_fail@plt>
   146cc:	andeq	r4, r0, r0, lsl #14
   146d0:	andeq	r4, r0, r2, asr #7
   146d4:	andeq	r4, r0, r4, lsr #15
   146d8:	andeq	r5, r0, ip, lsr #9
   146dc:	andeq	r4, r0, r2, ror #7
   146e0:			; <UNDEFINED> instruction: 0x000054bf

000146e4 <flatcc_builder_extend_offset_vector@@Base>:
   146e4:	push	{r4, r5, fp, lr}
   146e8:	add	fp, sp, #8
   146ec:	sub	sp, sp, #8
   146f0:	mov	r4, r0
   146f4:	ldr	r0, [r0, #32]
   146f8:	ldr	r2, [r0, #20]
   146fc:	adds	r2, r2, r1
   14700:	cmpcc	r2, #1073741824	; 0x40000000
   14704:	bcc	14728 <flatcc_builder_extend_offset_vector@@Base+0x44>
   14708:	ldr	r0, [pc, #184]	; 147c8 <flatcc_builder_extend_offset_vector@@Base+0xe4>
   1470c:	ldr	r1, [pc, #184]	; 147cc <flatcc_builder_extend_offset_vector@@Base+0xe8>
   14710:	ldr	r3, [pc, #184]	; 147d0 <flatcc_builder_extend_offset_vector@@Base+0xec>
   14714:	mov	r2, #892	; 0x37c
   14718:	add	r0, pc, r0
   1471c:	add	r1, pc, r1
   14720:	add	r3, pc, r3
   14724:	bl	12498 <__assert_fail@plt>
   14728:	str	r2, [r0, #20]
   1472c:	ldr	r5, [r4, #20]
   14730:	ldr	r0, [r4, #24]
   14734:	add	r1, r5, r1, lsl #2
   14738:	cmp	r1, r0
   1473c:	str	r1, [r4, #20]
   14740:	bcs	1474c <flatcc_builder_extend_offset_vector@@Base+0x68>
   14744:	ldr	r0, [r4, #16]
   14748:	b	147bc <flatcc_builder_extend_offset_vector@@Base+0xd8>
   1474c:	ldr	r2, [r4, #28]
   14750:	ldr	r0, [r4, #40]	; 0x28
   14754:	ldr	ip, [r4, #48]	; 0x30
   14758:	mov	r3, #1
   1475c:	str	r3, [sp]
   14760:	mov	r3, #1
   14764:	add	r1, r1, r2
   14768:	add	r2, r1, #1
   1476c:	add	r1, r4, #60	; 0x3c
   14770:	blx	ip
   14774:	mov	r1, r0
   14778:	mov	r0, #0
   1477c:	cmp	r1, #0
   14780:	beq	1478c <flatcc_builder_extend_offset_vector@@Base+0xa8>
   14784:	sub	sp, fp, #8
   14788:	pop	{r4, r5, fp, pc}
   1478c:	ldr	r1, [r4, #28]
   14790:	ldr	r0, [r4, #60]	; 0x3c
   14794:	ldr	r3, [r4, #64]	; 0x40
   14798:	ldr	r2, [r4, #32]
   1479c:	add	r0, r0, r1
   147a0:	sub	r1, r3, r1
   147a4:	mvn	r3, #3
   147a8:	cmn	r1, #4
   147ac:	str	r0, [r4, #16]
   147b0:	movcs	r1, r3
   147b4:	str	r1, [r4, #24]
   147b8:	str	r3, [r2, #4]
   147bc:	add	r0, r0, r5
   147c0:	sub	sp, fp, #8
   147c4:	pop	{r4, r5, fp, pc}
   147c8:	andeq	r5, r0, r0, lsr r4
   147cc:	andeq	r4, r0, r6, ror #6
   147d0:	andeq	r5, r0, r3, asr #8

000147d4 <flatcc_builder_offset_vector_push@@Base>:
   147d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147d8:	add	fp, sp, #24
   147dc:	sub	sp, sp, #8
   147e0:	mov	r6, r0
   147e4:	ldr	r0, [r0, #32]
   147e8:	mov	r8, r1
   147ec:	ldrh	r1, [r0, #14]
   147f0:	cmp	r1, #5
   147f4:	bne	148a8 <flatcc_builder_offset_vector_push@@Base+0xd4>
   147f8:	ldr	r1, [r0, #20]
   147fc:	mov	r5, #0
   14800:	cmn	r1, #-1073741823	; 0xc0000001
   14804:	beq	1489c <flatcc_builder_offset_vector_push@@Base+0xc8>
   14808:	add	r1, r1, #1
   1480c:	str	r1, [r0, #20]
   14810:	ldr	r7, [r6, #20]
   14814:	ldr	r0, [r6, #24]
   14818:	add	r1, r7, #4
   1481c:	cmp	r1, r0
   14820:	str	r1, [r6, #20]
   14824:	bcs	14830 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14828:	ldr	r0, [r6, #16]
   1482c:	b	14890 <flatcc_builder_offset_vector_push@@Base+0xbc>
   14830:	ldr	r1, [r6, #28]
   14834:	ldr	r0, [r6, #40]	; 0x28
   14838:	ldr	r4, [r6, #48]	; 0x30
   1483c:	mov	r2, #1
   14840:	mov	r3, #1
   14844:	str	r2, [sp]
   14848:	add	r1, r7, r1
   1484c:	add	r2, r1, #5
   14850:	add	r1, r6, #60	; 0x3c
   14854:	blx	r4
   14858:	cmp	r0, #0
   1485c:	bne	1489c <flatcc_builder_offset_vector_push@@Base+0xc8>
   14860:	ldr	r1, [r6, #28]
   14864:	ldr	r0, [r6, #60]	; 0x3c
   14868:	ldr	r3, [r6, #64]	; 0x40
   1486c:	ldr	r2, [r6, #32]
   14870:	add	r0, r0, r1
   14874:	sub	r1, r3, r1
   14878:	mvn	r3, #3
   1487c:	cmn	r1, #4
   14880:	str	r0, [r6, #16]
   14884:	movcs	r1, r3
   14888:	str	r1, [r6, #24]
   1488c:	str	r3, [r2, #4]
   14890:	adds	r0, r0, r7
   14894:	movne	r5, r0
   14898:	strne	r8, [r0]
   1489c:	mov	r0, r5
   148a0:	sub	sp, fp, #24
   148a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148a8:	ldr	r0, [pc, #24]	; 148c8 <flatcc_builder_offset_vector_push@@Base+0xf4>
   148ac:	ldr	r1, [pc, #24]	; 148cc <flatcc_builder_offset_vector_push@@Base+0xf8>
   148b0:	ldr	r3, [pc, #24]	; 148d0 <flatcc_builder_offset_vector_push@@Base+0xfc>
   148b4:	movw	r2, #934	; 0x3a6
   148b8:	add	r0, pc, r0
   148bc:	add	r1, pc, r1
   148c0:	add	r3, pc, r3
   148c4:	bl	12498 <__assert_fail@plt>
   148c8:	strdeq	r4, [r0], -sp
   148cc:	andeq	r4, r0, r6, asr #3
   148d0:	andeq	r4, r0, r8, lsr #12

000148d4 <flatcc_builder_append_offset_vector@@Base>:
   148d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   148d8:	add	fp, sp, #24
   148dc:	sub	sp, sp, #8
   148e0:	mov	r6, r0
   148e4:	ldr	r0, [r0, #32]
   148e8:	mov	r8, r1
   148ec:	ldrh	r1, [r0, #14]
   148f0:	cmp	r1, #5
   148f4:	bne	149e4 <flatcc_builder_append_offset_vector@@Base+0x110>
   148f8:	ldr	r1, [r0, #20]
   148fc:	mov	r5, r2
   14900:	adds	r1, r1, r2
   14904:	cmpcc	r1, #1073741824	; 0x40000000
   14908:	bcc	1492c <flatcc_builder_append_offset_vector@@Base+0x58>
   1490c:	ldr	r0, [pc, #252]	; 14a10 <flatcc_builder_append_offset_vector@@Base+0x13c>
   14910:	ldr	r1, [pc, #252]	; 14a14 <flatcc_builder_append_offset_vector@@Base+0x140>
   14914:	ldr	r3, [pc, #252]	; 14a18 <flatcc_builder_append_offset_vector@@Base+0x144>
   14918:	mov	r2, #892	; 0x37c
   1491c:	add	r0, pc, r0
   14920:	add	r1, pc, r1
   14924:	add	r3, pc, r3
   14928:	bl	12498 <__assert_fail@plt>
   1492c:	str	r1, [r0, #20]
   14930:	ldr	r4, [r6, #20]
   14934:	ldr	r0, [r6, #24]
   14938:	add	r1, r4, r5, lsl #2
   1493c:	cmp	r1, r0
   14940:	str	r1, [r6, #20]
   14944:	bcs	14968 <flatcc_builder_append_offset_vector@@Base+0x94>
   14948:	ldr	r0, [r6, #16]
   1494c:	adds	r7, r0, r4
   14950:	beq	149d4 <flatcc_builder_append_offset_vector@@Base+0x100>
   14954:	lsl	r2, r5, #2
   14958:	mov	r0, r7
   1495c:	mov	r1, r8
   14960:	bl	123e4 <memcpy@plt>
   14964:	b	149d8 <flatcc_builder_append_offset_vector@@Base+0x104>
   14968:	ldr	r2, [r6, #28]
   1496c:	ldr	r0, [r6, #40]	; 0x28
   14970:	ldr	r7, [r6, #48]	; 0x30
   14974:	mov	r3, #1
   14978:	str	r3, [sp]
   1497c:	mov	r3, #1
   14980:	add	r1, r1, r2
   14984:	add	r2, r1, #1
   14988:	add	r1, r6, #60	; 0x3c
   1498c:	blx	r7
   14990:	mov	r7, #0
   14994:	cmp	r0, #0
   14998:	bne	149d8 <flatcc_builder_append_offset_vector@@Base+0x104>
   1499c:	ldr	r1, [r6, #28]
   149a0:	ldr	r0, [r6, #60]	; 0x3c
   149a4:	ldr	r3, [r6, #64]	; 0x40
   149a8:	ldr	r2, [r6, #32]
   149ac:	add	r0, r0, r1
   149b0:	sub	r1, r3, r1
   149b4:	mvn	r3, #3
   149b8:	cmn	r1, #4
   149bc:	str	r0, [r6, #16]
   149c0:	movcs	r1, r3
   149c4:	str	r1, [r6, #24]
   149c8:	str	r3, [r2, #4]
   149cc:	adds	r7, r0, r4
   149d0:	bne	14954 <flatcc_builder_append_offset_vector@@Base+0x80>
   149d4:	mov	r7, #0
   149d8:	mov	r0, r7
   149dc:	sub	sp, fp, #24
   149e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149e4:	ldr	r0, [pc, #24]	; 14a04 <flatcc_builder_append_offset_vector@@Base+0x130>
   149e8:	ldr	r1, [pc, #24]	; 14a08 <flatcc_builder_append_offset_vector@@Base+0x134>
   149ec:	ldr	r3, [pc, #24]	; 14a0c <flatcc_builder_append_offset_vector@@Base+0x138>
   149f0:	mov	r2, #948	; 0x3b4
   149f4:	add	r0, pc, r0
   149f8:	add	r1, pc, r1
   149fc:	add	r3, pc, r3
   14a00:	bl	12498 <__assert_fail@plt>
   14a04:	andeq	r4, r0, r1, asr #9
   14a08:	andeq	r4, r0, sl, lsl #1
   14a0c:	andeq	r4, r0, lr, asr #10
   14a10:	andeq	r5, r0, ip, lsr #4
   14a14:	andeq	r4, r0, r2, ror #2
   14a18:	andeq	r5, r0, pc, lsr r2

00014a1c <flatcc_builder_extend_string@@Base>:
   14a1c:	push	{r4, r5, fp, lr}
   14a20:	add	fp, sp, #8
   14a24:	sub	sp, sp, #8
   14a28:	mov	r4, r0
   14a2c:	ldr	r0, [r0, #32]
   14a30:	ldrh	r2, [r0, #14]
   14a34:	cmp	r2, #6
   14a38:	bne	14ae8 <flatcc_builder_extend_string@@Base+0xcc>
   14a3c:	ldr	r2, [r0, #20]
   14a40:	adds	r2, r2, r1
   14a44:	bcs	14b08 <flatcc_builder_extend_string@@Base+0xec>
   14a48:	str	r2, [r0, #20]
   14a4c:	ldr	r5, [r4, #20]
   14a50:	ldr	r0, [r4, #24]
   14a54:	add	r1, r5, r1
   14a58:	cmp	r1, r0
   14a5c:	str	r1, [r4, #20]
   14a60:	bcs	14a6c <flatcc_builder_extend_string@@Base+0x50>
   14a64:	ldr	r0, [r4, #16]
   14a68:	b	14adc <flatcc_builder_extend_string@@Base+0xc0>
   14a6c:	ldr	r2, [r4, #28]
   14a70:	ldr	r0, [r4, #40]	; 0x28
   14a74:	ldr	ip, [r4, #48]	; 0x30
   14a78:	mov	r3, #1
   14a7c:	str	r3, [sp]
   14a80:	mov	r3, #1
   14a84:	add	r1, r1, r2
   14a88:	add	r2, r1, #1
   14a8c:	add	r1, r4, #60	; 0x3c
   14a90:	blx	ip
   14a94:	mov	r1, r0
   14a98:	mov	r0, #0
   14a9c:	cmp	r1, #0
   14aa0:	beq	14aac <flatcc_builder_extend_string@@Base+0x90>
   14aa4:	sub	sp, fp, #8
   14aa8:	pop	{r4, r5, fp, pc}
   14aac:	ldr	r1, [r4, #28]
   14ab0:	ldr	r0, [r4, #60]	; 0x3c
   14ab4:	ldr	r3, [r4, #64]	; 0x40
   14ab8:	ldr	r2, [r4, #32]
   14abc:	add	r0, r0, r1
   14ac0:	sub	r1, r3, r1
   14ac4:	mvn	r3, #3
   14ac8:	cmn	r1, #4
   14acc:	str	r0, [r4, #16]
   14ad0:	movcs	r1, r3
   14ad4:	str	r1, [r4, #24]
   14ad8:	str	r3, [r2, #4]
   14adc:	add	r0, r0, r5
   14ae0:	sub	sp, fp, #8
   14ae4:	pop	{r4, r5, fp, pc}
   14ae8:	ldr	r0, [pc, #56]	; 14b28 <flatcc_builder_extend_string@@Base+0x10c>
   14aec:	ldr	r1, [pc, #56]	; 14b2c <flatcc_builder_extend_string@@Base+0x110>
   14af0:	ldr	r3, [pc, #56]	; 14b30 <flatcc_builder_extend_string@@Base+0x114>
   14af4:	movw	r2, #957	; 0x3bd
   14af8:	add	r0, pc, r0
   14afc:	add	r1, pc, r1
   14b00:	add	r3, pc, r3
   14b04:	bl	12498 <__assert_fail@plt>
   14b08:	ldr	r0, [pc, #36]	; 14b34 <flatcc_builder_extend_string@@Base+0x118>
   14b0c:	ldr	r1, [pc, #36]	; 14b38 <flatcc_builder_extend_string@@Base+0x11c>
   14b10:	ldr	r3, [pc, #36]	; 14b3c <flatcc_builder_extend_string@@Base+0x120>
   14b14:	mov	r2, #892	; 0x37c
   14b18:	add	r0, pc, r0
   14b1c:	add	r1, pc, r1
   14b20:	add	r3, pc, r3
   14b24:	bl	12498 <__assert_fail@plt>
   14b28:	andeq	r4, r0, r6, asr #9
   14b2c:	andeq	r3, r0, r6, lsl #31
   14b30:	andeq	r4, r0, sl, ror #9
   14b34:	andeq	r5, r0, r0, lsr r0
   14b38:	andeq	r3, r0, r6, ror #30
   14b3c:	andeq	r5, r0, r3, asr #32

00014b40 <flatcc_builder_append_string@@Base>:
   14b40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b44:	add	fp, sp, #24
   14b48:	sub	sp, sp, #8
   14b4c:	mov	r6, r0
   14b50:	ldr	r0, [r0, #32]
   14b54:	mov	r8, r1
   14b58:	ldrh	r1, [r0, #14]
   14b5c:	cmp	r1, #6
   14b60:	bne	14c2c <flatcc_builder_append_string@@Base+0xec>
   14b64:	ldr	r1, [r0, #20]
   14b68:	mov	r4, r2
   14b6c:	adds	r1, r1, r2
   14b70:	bcs	14c4c <flatcc_builder_append_string@@Base+0x10c>
   14b74:	str	r1, [r0, #20]
   14b78:	ldr	r5, [r6, #20]
   14b7c:	ldr	r0, [r6, #24]
   14b80:	add	r1, r5, r4
   14b84:	cmp	r1, r0
   14b88:	str	r1, [r6, #20]
   14b8c:	bcs	14bb0 <flatcc_builder_append_string@@Base+0x70>
   14b90:	ldr	r0, [r6, #16]
   14b94:	adds	r7, r0, r5
   14b98:	beq	14c1c <flatcc_builder_append_string@@Base+0xdc>
   14b9c:	mov	r0, r7
   14ba0:	mov	r1, r8
   14ba4:	mov	r2, r4
   14ba8:	bl	123e4 <memcpy@plt>
   14bac:	b	14c20 <flatcc_builder_append_string@@Base+0xe0>
   14bb0:	ldr	r2, [r6, #28]
   14bb4:	ldr	r0, [r6, #40]	; 0x28
   14bb8:	ldr	r7, [r6, #48]	; 0x30
   14bbc:	mov	r3, #1
   14bc0:	str	r3, [sp]
   14bc4:	mov	r3, #1
   14bc8:	add	r1, r1, r2
   14bcc:	add	r2, r1, #1
   14bd0:	add	r1, r6, #60	; 0x3c
   14bd4:	blx	r7
   14bd8:	mov	r7, #0
   14bdc:	cmp	r0, #0
   14be0:	bne	14c20 <flatcc_builder_append_string@@Base+0xe0>
   14be4:	ldr	r1, [r6, #28]
   14be8:	ldr	r0, [r6, #60]	; 0x3c
   14bec:	ldr	r3, [r6, #64]	; 0x40
   14bf0:	ldr	r2, [r6, #32]
   14bf4:	add	r0, r0, r1
   14bf8:	sub	r1, r3, r1
   14bfc:	mvn	r3, #3
   14c00:	cmn	r1, #4
   14c04:	str	r0, [r6, #16]
   14c08:	movcs	r1, r3
   14c0c:	str	r1, [r6, #24]
   14c10:	str	r3, [r2, #4]
   14c14:	adds	r7, r0, r5
   14c18:	bne	14b9c <flatcc_builder_append_string@@Base+0x5c>
   14c1c:	mov	r7, #0
   14c20:	mov	r0, r7
   14c24:	sub	sp, fp, #24
   14c28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c2c:	ldr	r0, [pc, #56]	; 14c6c <flatcc_builder_append_string@@Base+0x12c>
   14c30:	ldr	r1, [pc, #56]	; 14c70 <flatcc_builder_append_string@@Base+0x130>
   14c34:	ldr	r3, [pc, #56]	; 14c74 <flatcc_builder_append_string@@Base+0x134>
   14c38:	movw	r2, #966	; 0x3c6
   14c3c:	add	r0, pc, r0
   14c40:	add	r1, pc, r1
   14c44:	add	r3, pc, r3
   14c48:	bl	12498 <__assert_fail@plt>
   14c4c:	ldr	r0, [pc, #36]	; 14c78 <flatcc_builder_append_string@@Base+0x138>
   14c50:	ldr	r1, [pc, #36]	; 14c7c <flatcc_builder_append_string@@Base+0x13c>
   14c54:	ldr	r3, [pc, #36]	; 14c80 <flatcc_builder_append_string@@Base+0x140>
   14c58:	mov	r2, #892	; 0x37c
   14c5c:	add	r0, pc, r0
   14c60:	add	r1, pc, r1
   14c64:	add	r3, pc, r3
   14c68:	bl	12498 <__assert_fail@plt>
   14c6c:	andeq	r4, r0, r2, lsl #7
   14c70:	andeq	r3, r0, r2, asr #28
   14c74:	andeq	r4, r0, r5, ror #7
   14c78:	andeq	r4, r0, ip, ror #29
   14c7c:	andeq	r3, r0, r2, lsr #28
   14c80:	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>

00014c84 <flatcc_builder_append_string_str@@Base>:
   14c84:	push	{r4, r5, fp, lr}
   14c88:	add	fp, sp, #8
   14c8c:	mov	r5, r0
   14c90:	mov	r0, r1
   14c94:	mov	r4, r1
   14c98:	bl	12450 <strlen@plt>
   14c9c:	mov	r2, r0
   14ca0:	mov	r0, r5
   14ca4:	mov	r1, r4
   14ca8:	pop	{r4, r5, fp, lr}
   14cac:	b	14b40 <flatcc_builder_append_string@@Base>

00014cb0 <flatcc_builder_append_string_strn@@Base>:
   14cb0:	push	{r4, r5, r6, sl, fp, lr}
   14cb4:	add	fp, sp, #16
   14cb8:	mov	r6, r0
   14cbc:	mov	r5, r1
   14cc0:	mov	r0, r1
   14cc4:	mov	r1, #0
   14cc8:	mov	r4, r2
   14ccc:	bl	12474 <memchr@plt>
   14cd0:	cmp	r0, #0
   14cd4:	mov	r1, r5
   14cd8:	subne	r4, r0, r5
   14cdc:	mov	r0, r6
   14ce0:	mov	r2, r4
   14ce4:	pop	{r4, r5, r6, sl, fp, lr}
   14ce8:	b	14b40 <flatcc_builder_append_string@@Base>

00014cec <flatcc_builder_truncate_vector@@Base>:
   14cec:	push	{fp, lr}
   14cf0:	mov	fp, sp
   14cf4:	ldr	r2, [r0, #32]
   14cf8:	ldrh	r3, [r2, #14]
   14cfc:	cmp	r3, #4
   14d00:	bne	14d48 <flatcc_builder_truncate_vector@@Base+0x5c>
   14d04:	ldr	r3, [r2, #20]
   14d08:	cmp	r3, r1
   14d0c:	bcc	14d68 <flatcc_builder_truncate_vector@@Base+0x7c>
   14d10:	sub	r3, r3, r1
   14d14:	str	r3, [r2, #20]
   14d18:	ldr	r2, [r0, #32]
   14d1c:	ldr	r3, [r0, #20]
   14d20:	ldr	ip, [r0, #16]
   14d24:	ldr	r2, [r2, #16]
   14d28:	mls	r3, r2, r1, r3
   14d2c:	mul	r2, r2, r1
   14d30:	mov	r1, #0
   14d34:	str	r3, [r0, #20]
   14d38:	add	r0, ip, r3
   14d3c:	bl	12468 <memset@plt>
   14d40:	mov	r0, #0
   14d44:	pop	{fp, pc}
   14d48:	ldr	r0, [pc, #56]	; 14d88 <flatcc_builder_truncate_vector@@Base+0x9c>
   14d4c:	ldr	r1, [pc, #56]	; 14d8c <flatcc_builder_truncate_vector@@Base+0xa0>
   14d50:	ldr	r3, [pc, #56]	; 14d90 <flatcc_builder_truncate_vector@@Base+0xa4>
   14d54:	movw	r2, #985	; 0x3d9
   14d58:	add	r0, pc, r0
   14d5c:	add	r1, pc, r1
   14d60:	add	r3, pc, r3
   14d64:	bl	12498 <__assert_fail@plt>
   14d68:	ldr	r0, [pc, #36]	; 14d94 <flatcc_builder_truncate_vector@@Base+0xa8>
   14d6c:	ldr	r1, [pc, #36]	; 14d98 <flatcc_builder_truncate_vector@@Base+0xac>
   14d70:	ldr	r3, [pc, #36]	; 14d9c <flatcc_builder_truncate_vector@@Base+0xb0>
   14d74:	movw	r2, #986	; 0x3da
   14d78:	add	r0, pc, r0
   14d7c:	add	r1, pc, r1
   14d80:	add	r3, pc, r3
   14d84:	bl	12498 <__assert_fail@plt>
   14d88:	andeq	r4, r0, r4, rrx
   14d8c:	andeq	r3, r0, r6, lsr #26
   14d90:	andeq	r4, r0, r6, lsl r3
   14d94:	andeq	r4, r0, sp, lsr r3
   14d98:	andeq	r3, r0, r6, lsl #26
   14d9c:	strdeq	r4, [r0], -r6

00014da0 <flatcc_builder_truncate_offset_vector@@Base>:
   14da0:	push	{fp, lr}
   14da4:	mov	fp, sp
   14da8:	ldr	r2, [r0, #32]
   14dac:	ldrh	r3, [r2, #14]
   14db0:	cmp	r3, #5
   14db4:	bne	14dfc <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14db8:	ldr	r3, [r2, #20]
   14dbc:	cmp	r3, r1
   14dc0:	bcc	14e1c <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14dc4:	sub	r3, r3, r1
   14dc8:	str	r3, [r2, #20]
   14dcc:	ldr	r2, [r0, #32]
   14dd0:	ldr	r3, [r0, #20]
   14dd4:	ldr	ip, [r0, #16]
   14dd8:	ldr	r2, [r2, #16]
   14ddc:	mls	r3, r2, r1, r3
   14de0:	mul	r2, r2, r1
   14de4:	mov	r1, #0
   14de8:	str	r3, [r0, #20]
   14dec:	add	r0, ip, r3
   14df0:	bl	12468 <memset@plt>
   14df4:	mov	r0, #0
   14df8:	pop	{fp, pc}
   14dfc:	ldr	r0, [pc, #56]	; 14e3c <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14e00:	ldr	r1, [pc, #56]	; 14e40 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   14e04:	ldr	r3, [pc, #56]	; 14e44 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   14e08:	movw	r2, #994	; 0x3e2
   14e0c:	add	r0, pc, r0
   14e10:	add	r1, pc, r1
   14e14:	add	r3, pc, r3
   14e18:	bl	12498 <__assert_fail@plt>
   14e1c:	ldr	r0, [pc, #36]	; 14e48 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   14e20:	ldr	r1, [pc, #36]	; 14e4c <flatcc_builder_truncate_offset_vector@@Base+0xac>
   14e24:	ldr	r3, [pc, #36]	; 14e50 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   14e28:	movw	r2, #995	; 0x3e3
   14e2c:	add	r0, pc, r0
   14e30:	add	r1, pc, r1
   14e34:	add	r3, pc, r3
   14e38:	bl	12498 <__assert_fail@plt>
   14e3c:	andeq	r4, r0, r9, lsr #1
   14e40:	andeq	r3, r0, r2, ror ip
   14e44:	andeq	r4, r0, r5, asr #5
   14e48:	strdeq	r4, [r0], -r3
   14e4c:	andeq	r3, r0, r2, asr ip
   14e50:	andeq	r4, r0, r5, lsr #5

00014e54 <flatcc_builder_truncate_string@@Base>:
   14e54:	push	{fp, lr}
   14e58:	mov	fp, sp
   14e5c:	mov	r2, r1
   14e60:	ldr	r1, [r0, #32]
   14e64:	ldrh	r3, [r1, #14]
   14e68:	cmp	r3, #6
   14e6c:	bne	14ea8 <flatcc_builder_truncate_string@@Base+0x54>
   14e70:	ldr	r3, [r1, #20]
   14e74:	cmp	r3, r2
   14e78:	bcc	14ec8 <flatcc_builder_truncate_string@@Base+0x74>
   14e7c:	sub	r3, r3, r2
   14e80:	str	r3, [r1, #20]
   14e84:	ldr	r3, [r0, #20]
   14e88:	ldr	r1, [r0, #16]
   14e8c:	sub	r3, r3, r2
   14e90:	str	r3, [r0, #20]
   14e94:	add	r0, r1, r3
   14e98:	mov	r1, #0
   14e9c:	bl	12468 <memset@plt>
   14ea0:	mov	r0, #0
   14ea4:	pop	{fp, pc}
   14ea8:	ldr	r0, [pc, #56]	; 14ee8 <flatcc_builder_truncate_string@@Base+0x94>
   14eac:	ldr	r1, [pc, #56]	; 14eec <flatcc_builder_truncate_string@@Base+0x98>
   14eb0:	ldr	r3, [pc, #56]	; 14ef0 <flatcc_builder_truncate_string@@Base+0x9c>
   14eb4:	movw	r2, #1003	; 0x3eb
   14eb8:	add	r0, pc, r0
   14ebc:	add	r1, pc, r1
   14ec0:	add	r3, pc, r3
   14ec4:	bl	12498 <__assert_fail@plt>
   14ec8:	ldr	r0, [pc, #36]	; 14ef4 <flatcc_builder_truncate_string@@Base+0xa0>
   14ecc:	ldr	r1, [pc, #36]	; 14ef8 <flatcc_builder_truncate_string@@Base+0xa4>
   14ed0:	ldr	r3, [pc, #36]	; 14efc <flatcc_builder_truncate_string@@Base+0xa8>
   14ed4:	mov	r2, #1004	; 0x3ec
   14ed8:	add	r0, pc, r0
   14edc:	add	r1, pc, r1
   14ee0:	add	r3, pc, r3
   14ee4:	bl	12498 <__assert_fail@plt>
   14ee8:	andeq	r4, r0, r6, lsl #2
   14eec:	andeq	r3, r0, r6, asr #23
   14ef0:	muleq	r0, sl, r2
   14ef4:	andeq	r4, r0, r1, asr #5
   14ef8:	andeq	r3, r0, r6, lsr #23
   14efc:	andeq	r4, r0, sl, ror r2

00014f00 <flatcc_builder_start_vector@@Base>:
   14f00:	push	{r4, r5, r6, r7, fp, lr}
   14f04:	add	fp, sp, #16
   14f08:	mov	r7, #4
   14f0c:	cmp	r2, #4
   14f10:	mov	r6, r1
   14f14:	mov	r5, r3
   14f18:	mov	r4, r0
   14f1c:	movls	r2, r7
   14f20:	mov	r1, r2
   14f24:	bl	13ef4 <flatcc_builder_start_buffer@@Base+0xc0>
   14f28:	mov	r1, r0
   14f2c:	mvn	r0, #0
   14f30:	cmp	r1, #0
   14f34:	popne	{r4, r5, r6, r7, fp, pc}
   14f38:	ldr	r0, [r4, #32]
   14f3c:	str	r6, [r0, #16]
   14f40:	mov	r0, #0
   14f44:	ldr	r1, [r4, #32]
   14f48:	str	r0, [r1, #20]
   14f4c:	ldr	r1, [r4, #32]
   14f50:	str	r5, [r1, #24]
   14f54:	ldr	r1, [r4, #32]
   14f58:	strh	r7, [r1, #14]
   14f5c:	ldr	r2, [r4, #28]
   14f60:	ldr	r3, [r4, #60]	; 0x3c
   14f64:	ldr	r7, [r4, #64]	; 0x40
   14f68:	add	r3, r3, r2
   14f6c:	sub	r2, r7, r2
   14f70:	str	r3, [r4, #16]
   14f74:	mvn	r3, #3
   14f78:	cmn	r2, #4
   14f7c:	movcs	r2, r3
   14f80:	str	r2, [r4, #24]
   14f84:	str	r3, [r1, #4]
   14f88:	pop	{r4, r5, r6, r7, fp, pc}

00014f8c <flatcc_builder_start_offset_vector@@Base>:
   14f8c:	push	{r4, r5, fp, lr}
   14f90:	add	fp, sp, #8
   14f94:	mov	r1, #4
   14f98:	mov	r4, r0
   14f9c:	mov	r5, #4
   14fa0:	bl	13ef4 <flatcc_builder_start_buffer@@Base+0xc0>
   14fa4:	mov	r1, r0
   14fa8:	mvn	r0, #0
   14fac:	cmp	r1, #0
   14fb0:	popne	{r4, r5, fp, pc}
   14fb4:	ldr	r0, [r4, #32]
   14fb8:	mov	r2, #5
   14fbc:	str	r5, [r0, #16]
   14fc0:	mov	r0, #0
   14fc4:	ldr	r1, [r4, #32]
   14fc8:	str	r0, [r1, #20]
   14fcc:	ldr	r1, [r4, #32]
   14fd0:	strh	r2, [r1, #14]
   14fd4:	ldr	r2, [r4, #28]
   14fd8:	ldr	r3, [r4, #60]	; 0x3c
   14fdc:	ldr	r5, [r4, #64]	; 0x40
   14fe0:	add	r3, r3, r2
   14fe4:	sub	r2, r5, r2
   14fe8:	str	r3, [r4, #16]
   14fec:	mvn	r3, #3
   14ff0:	cmn	r2, #4
   14ff4:	movcs	r2, r3
   14ff8:	str	r2, [r4, #24]
   14ffc:	str	r3, [r1, #4]
   15000:	pop	{r4, r5, fp, pc}

00015004 <flatcc_builder_create_offset_vector@@Base>:
   15004:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15008:	add	fp, sp, #24
   1500c:	sub	sp, sp, #8
   15010:	mov	r8, r1
   15014:	mov	r1, #4
   15018:	mov	r6, r2
   1501c:	mov	r4, r0
   15020:	mov	r7, #4
   15024:	bl	13ef4 <flatcc_builder_start_buffer@@Base+0xc0>
   15028:	cmp	r0, #0
   1502c:	beq	1503c <flatcc_builder_create_offset_vector@@Base+0x38>
   15030:	mov	r0, #0
   15034:	sub	sp, fp, #24
   15038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1503c:	ldr	r0, [r4, #32]
   15040:	mov	r1, #0
   15044:	str	r7, [r0, #16]
   15048:	ldr	r0, [r4, #32]
   1504c:	str	r1, [r0, #20]
   15050:	mov	r1, #5
   15054:	ldr	r0, [r4, #32]
   15058:	strh	r1, [r0, #14]
   1505c:	ldr	r1, [r4, #28]
   15060:	ldr	r2, [r4, #60]	; 0x3c
   15064:	ldr	r3, [r4, #64]	; 0x40
   15068:	add	r2, r2, r1
   1506c:	sub	r1, r3, r1
   15070:	str	r2, [r4, #16]
   15074:	mvn	r2, #3
   15078:	cmn	r1, #4
   1507c:	movcs	r1, r2
   15080:	str	r1, [r4, #24]
   15084:	str	r2, [r0, #4]
   15088:	ldr	r1, [r0, #20]
   1508c:	adds	r1, r1, r6
   15090:	cmpcc	r1, #1073741824	; 0x40000000
   15094:	bcc	150b8 <flatcc_builder_create_offset_vector@@Base+0xb4>
   15098:	ldr	r0, [pc, #200]	; 15168 <flatcc_builder_create_offset_vector@@Base+0x164>
   1509c:	ldr	r1, [pc, #200]	; 1516c <flatcc_builder_create_offset_vector@@Base+0x168>
   150a0:	ldr	r3, [pc, #200]	; 15170 <flatcc_builder_create_offset_vector@@Base+0x16c>
   150a4:	mov	r2, #892	; 0x37c
   150a8:	add	r0, pc, r0
   150ac:	add	r1, pc, r1
   150b0:	add	r3, pc, r3
   150b4:	bl	12498 <__assert_fail@plt>
   150b8:	str	r1, [r0, #20]
   150bc:	ldr	r7, [r4, #20]
   150c0:	ldr	r0, [r4, #24]
   150c4:	add	r1, r7, r6, lsl #2
   150c8:	cmp	r1, r0
   150cc:	str	r1, [r4, #20]
   150d0:	bcs	150e4 <flatcc_builder_create_offset_vector@@Base+0xe0>
   150d4:	ldr	r0, [r4, #16]
   150d8:	adds	r0, r0, r7
   150dc:	bne	1514c <flatcc_builder_create_offset_vector@@Base+0x148>
   150e0:	b	15030 <flatcc_builder_create_offset_vector@@Base+0x2c>
   150e4:	ldr	r2, [r4, #28]
   150e8:	ldr	r0, [r4, #40]	; 0x28
   150ec:	ldr	r5, [r4, #48]	; 0x30
   150f0:	mov	r3, #1
   150f4:	str	r3, [sp]
   150f8:	mov	r3, #1
   150fc:	add	r1, r1, r2
   15100:	add	r2, r1, #1
   15104:	add	r1, r4, #60	; 0x3c
   15108:	blx	r5
   1510c:	cmp	r0, #0
   15110:	bne	15030 <flatcc_builder_create_offset_vector@@Base+0x2c>
   15114:	ldr	r1, [r4, #28]
   15118:	ldr	r0, [r4, #60]	; 0x3c
   1511c:	ldr	r3, [r4, #64]	; 0x40
   15120:	ldr	r2, [r4, #32]
   15124:	add	r0, r0, r1
   15128:	sub	r1, r3, r1
   1512c:	mvn	r3, #3
   15130:	cmn	r1, #4
   15134:	str	r0, [r4, #16]
   15138:	movcs	r1, r3
   1513c:	str	r1, [r4, #24]
   15140:	str	r3, [r2, #4]
   15144:	adds	r0, r0, r7
   15148:	beq	15030 <flatcc_builder_create_offset_vector@@Base+0x2c>
   1514c:	lsl	r2, r6, #2
   15150:	mov	r1, r8
   15154:	bl	123e4 <memcpy@plt>
   15158:	mov	r0, r4
   1515c:	sub	sp, fp, #24
   15160:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15164:	b	15174 <flatcc_builder_end_offset_vector@@Base>
   15168:	andeq	r4, r0, r0, lsr #21
   1516c:	ldrdeq	r3, [r0], -r6
   15170:			; <UNDEFINED> instruction: 0x00004ab3

00015174 <flatcc_builder_end_offset_vector@@Base>:
   15174:	push	{r4, r5, fp, lr}
   15178:	add	fp, sp, #8
   1517c:	mov	r4, r0
   15180:	ldr	r0, [r0, #32]
   15184:	ldrh	r1, [r0, #14]
   15188:	cmp	r1, #5
   1518c:	bne	1522c <flatcc_builder_end_offset_vector@@Base+0xb8>
   15190:	ldr	r2, [r0, #20]
   15194:	ldr	r1, [r4, #16]
   15198:	mov	r0, r4
   1519c:	mov	r3, #0
   151a0:	bl	16290 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   151a4:	mov	r5, r0
   151a8:	cmp	r0, #0
   151ac:	beq	15224 <flatcc_builder_end_offset_vector@@Base+0xb0>
   151b0:	ldr	r0, [r4, #16]
   151b4:	ldr	r2, [r4, #20]
   151b8:	mov	r1, #0
   151bc:	bl	12468 <memset@plt>
   151c0:	ldr	r0, [r4, #32]
   151c4:	ldr	r1, [r4, #60]	; 0x3c
   151c8:	ldr	ip, [r4, #64]	; 0x40
   151cc:	ldr	r3, [r0, #8]
   151d0:	str	r3, [r4, #20]
   151d4:	ldr	r3, [r0]
   151d8:	str	r3, [r4, #28]
   151dc:	add	r1, r1, r3
   151e0:	ldr	r2, [r0, #4]
   151e4:	str	r1, [r4, #16]
   151e8:	sub	r1, ip, r3
   151ec:	cmp	r1, r2
   151f0:	movhi	r1, r2
   151f4:	str	r1, [r4, #24]
   151f8:	ldrh	r1, [r4, #130]	; 0x82
   151fc:	ldrh	r2, [r4, #128]	; 0x80
   15200:	cmp	r2, r1
   15204:	strhcc	r1, [r4, #128]	; 0x80
   15208:	ldrh	r1, [r0, #12]
   1520c:	sub	r0, r0, #36	; 0x24
   15210:	str	r0, [r4, #32]
   15214:	strh	r1, [r4, #130]	; 0x82
   15218:	ldr	r0, [r4, #156]	; 0x9c
   1521c:	sub	r0, r0, #1
   15220:	str	r0, [r4, #156]	; 0x9c
   15224:	mov	r0, r5
   15228:	pop	{r4, r5, fp, pc}
   1522c:	ldr	r0, [pc, #24]	; 1524c <flatcc_builder_end_offset_vector@@Base+0xd8>
   15230:	ldr	r1, [pc, #24]	; 15250 <flatcc_builder_end_offset_vector@@Base+0xdc>
   15234:	ldr	r3, [pc, #24]	; 15254 <flatcc_builder_end_offset_vector@@Base+0xe0>
   15238:	movw	r2, #1480	; 0x5c8
   1523c:	add	r0, pc, r0
   15240:	add	r1, pc, r1
   15244:	add	r3, pc, r3
   15248:	bl	12498 <__assert_fail@plt>
   1524c:	andeq	r3, r0, r9, ror ip
   15250:	andeq	r3, r0, r2, asr #16
   15254:	andeq	r4, r0, r0, lsr #5

00015258 <flatcc_builder_start_string@@Base>:
   15258:	push	{r4, r5, fp, lr}
   1525c:	add	fp, sp, #8
   15260:	mov	r1, #1
   15264:	mov	r4, r0
   15268:	mov	r5, #1
   1526c:	bl	13ef4 <flatcc_builder_start_buffer@@Base+0xc0>
   15270:	mov	r1, r0
   15274:	mvn	r0, #0
   15278:	cmp	r1, #0
   1527c:	popne	{r4, r5, fp, pc}
   15280:	ldr	r0, [r4, #32]
   15284:	mov	r2, #6
   15288:	str	r5, [r0, #16]
   1528c:	mov	r0, #0
   15290:	ldr	r1, [r4, #32]
   15294:	str	r0, [r1, #20]
   15298:	ldr	r1, [r4, #32]
   1529c:	strh	r2, [r1, #14]
   152a0:	ldr	r2, [r4, #28]
   152a4:	ldr	r3, [r4, #60]	; 0x3c
   152a8:	ldr	r5, [r4, #64]	; 0x40
   152ac:	add	r3, r3, r2
   152b0:	sub	r2, r5, r2
   152b4:	str	r3, [r4, #16]
   152b8:	mvn	r3, #3
   152bc:	cmn	r2, #4
   152c0:	movcs	r2, r3
   152c4:	str	r2, [r4, #24]
   152c8:	str	r3, [r1, #4]
   152cc:	pop	{r4, r5, fp, pc}

000152d0 <flatcc_builder_reserve_table@@Base>:
   152d0:	push	{r4, r5, r6, sl, fp, lr}
   152d4:	add	fp, sp, #16
   152d8:	sub	sp, sp, #8
   152dc:	cmn	r1, #1
   152e0:	ble	153b8 <flatcc_builder_reserve_table@@Base+0xe8>
   152e4:	mov	r4, r0
   152e8:	ldr	r0, [r0, #32]
   152ec:	mov	r5, r1
   152f0:	ldr	r1, [r4, #56]	; 0x38
   152f4:	ldrh	r2, [r0, #28]
   152f8:	ldr	r0, [r0, #16]
   152fc:	add	r6, r0, r2, lsl #1
   15300:	add	r0, r6, r5, lsl #1
   15304:	add	r2, r0, #4
   15308:	cmp	r2, r1
   1530c:	bls	15334 <flatcc_builder_reserve_table@@Base+0x64>
   15310:	ldr	r0, [r4, #40]	; 0x28
   15314:	ldr	ip, [r4, #48]	; 0x30
   15318:	mov	r3, #0
   1531c:	add	r1, r4, #52	; 0x34
   15320:	str	r3, [sp]
   15324:	mov	r3, #1
   15328:	blx	ip
   1532c:	cmp	r0, #0
   15330:	bne	153d8 <flatcc_builder_reserve_table@@Base+0x108>
   15334:	ldr	r0, [r4, #52]	; 0x34
   15338:	adds	r0, r0, r6
   1533c:	str	r0, [r4, #4]
   15340:	beq	153ac <flatcc_builder_reserve_table@@Base+0xdc>
   15344:	add	r0, r0, #4
   15348:	lsl	r1, r5, #1
   1534c:	str	r0, [r4, #4]
   15350:	ldr	r0, [r4, #32]
   15354:	ldr	r3, [r4, #80]	; 0x50
   15358:	ldr	r5, [r0, #20]
   1535c:	orr	r0, r1, #1
   15360:	add	r2, r5, r0
   15364:	cmp	r2, r3
   15368:	bls	15390 <flatcc_builder_reserve_table@@Base+0xc0>
   1536c:	ldr	r0, [r4, #40]	; 0x28
   15370:	ldr	r6, [r4, #48]	; 0x30
   15374:	mov	r3, #3
   15378:	add	r1, r4, #76	; 0x4c
   1537c:	str	r3, [sp]
   15380:	mov	r3, #0
   15384:	blx	r6
   15388:	cmp	r0, #0
   1538c:	bne	153d8 <flatcc_builder_reserve_table@@Base+0x108>
   15390:	ldr	r0, [r4, #76]	; 0x4c
   15394:	adds	r0, r0, r5
   15398:	str	r0, [r4]
   1539c:	mov	r0, #0
   153a0:	mvneq	r0, #0
   153a4:	sub	sp, fp, #16
   153a8:	pop	{r4, r5, r6, sl, fp, pc}
   153ac:	mvn	r0, #0
   153b0:	sub	sp, fp, #16
   153b4:	pop	{r4, r5, r6, sl, fp, pc}
   153b8:	ldr	r0, [pc, #56]	; 153f8 <flatcc_builder_reserve_table@@Base+0x128>
   153bc:	ldr	r1, [pc, #56]	; 153fc <flatcc_builder_reserve_table@@Base+0x12c>
   153c0:	ldr	r3, [pc, #56]	; 15400 <flatcc_builder_reserve_table@@Base+0x130>
   153c4:	movw	r2, #1065	; 0x429
   153c8:	add	r0, pc, r0
   153cc:	add	r1, pc, r1
   153d0:	add	r3, pc, r3
   153d4:	bl	12498 <__assert_fail@plt>
   153d8:	ldr	r0, [pc, #36]	; 15404 <flatcc_builder_reserve_table@@Base+0x134>
   153dc:	ldr	r1, [pc, #36]	; 15408 <flatcc_builder_reserve_table@@Base+0x138>
   153e0:	ldr	r3, [pc, #36]	; 1540c <flatcc_builder_reserve_table@@Base+0x13c>
   153e4:	mov	r2, #308	; 0x134
   153e8:	add	r0, pc, r0
   153ec:	add	r1, pc, r1
   153f0:	add	r3, pc, r3
   153f4:	bl	12498 <__assert_fail@plt>
   153f8:	andeq	r3, r0, r4, lsr lr
   153fc:			; <UNDEFINED> instruction: 0x000036b6
   15400:	andeq	r3, r0, fp, ror #27
   15404:	andeq	r4, r0, r7, asr r8
   15408:	muleq	r0, r6, r6
   1540c:	andeq	r4, r0, r9, lsl #13

00015410 <flatcc_builder_start_table@@Base>:
   15410:	push	{r4, r5, r6, r7, fp, lr}
   15414:	add	fp, sp, #16
   15418:	sub	sp, sp, #8
   1541c:	mov	r6, r1
   15420:	mov	r1, #4
   15424:	mov	r4, r0
   15428:	bl	13ef4 <flatcc_builder_start_buffer@@Base+0xc0>
   1542c:	mvn	r5, #0
   15430:	cmp	r0, #0
   15434:	beq	15444 <flatcc_builder_start_table@@Base+0x34>
   15438:	mov	r0, r5
   1543c:	sub	sp, fp, #16
   15440:	pop	{r4, r5, r6, r7, fp, pc}
   15444:	mov	r1, r4
   15448:	ldr	r2, [r4, #4]
   1544c:	ldr	r3, [r4, #32]
   15450:	ldr	r0, [r1, #52]!	; 0x34
   15454:	sub	r0, r2, r0
   15458:	str	r0, [r3, #16]
   1545c:	ldr	r0, [r4]
   15460:	ldr	r3, [r4, #76]	; 0x4c
   15464:	ldr	r2, [r4, #32]
   15468:	sub	r0, r0, r3
   1546c:	mov	r3, #0
   15470:	str	r0, [r2, #20]
   15474:	ldr	r0, [r4, #12]
   15478:	ldr	r2, [r4, #32]
   1547c:	str	r0, [r2, #24]
   15480:	ldr	r0, [r4, #32]
   15484:	ldrh	r2, [r4, #8]
   15488:	strh	r2, [r0, #28]
   1548c:	movw	r0, #15186	; 0x3b52
   15490:	strh	r3, [r4, #8]
   15494:	mov	r2, #3
   15498:	movt	r0, #12137	; 0x2f69
   1549c:	str	r0, [r4, #12]
   154a0:	ldr	r0, [r4, #32]
   154a4:	strh	r2, [r0, #14]
   154a8:	ldrh	r2, [r0, #28]
   154ac:	ldr	r0, [r0, #16]
   154b0:	add	r7, r0, r2, lsl #1
   154b4:	add	r0, r7, r6, lsl #1
   154b8:	add	r2, r0, #4
   154bc:	ldr	r0, [r4, #56]	; 0x38
   154c0:	cmp	r2, r0
   154c4:	bls	154e4 <flatcc_builder_start_table@@Base+0xd4>
   154c8:	ldr	r0, [r4, #40]	; 0x28
   154cc:	ldr	ip, [r4, #48]	; 0x30
   154d0:	str	r3, [sp]
   154d4:	mov	r3, #1
   154d8:	blx	ip
   154dc:	cmp	r0, #0
   154e0:	bne	15588 <flatcc_builder_start_table@@Base+0x178>
   154e4:	ldr	r0, [r4, #52]	; 0x34
   154e8:	adds	r0, r0, r7
   154ec:	str	r0, [r4, #4]
   154f0:	beq	15438 <flatcc_builder_start_table@@Base+0x28>
   154f4:	add	r0, r0, #4
   154f8:	lsl	r1, r6, #1
   154fc:	str	r0, [r4, #4]
   15500:	ldr	r0, [r4, #32]
   15504:	ldr	r3, [r4, #80]	; 0x50
   15508:	ldr	r6, [r0, #20]
   1550c:	orr	r0, r1, #1
   15510:	add	r2, r6, r0
   15514:	cmp	r2, r3
   15518:	bls	15540 <flatcc_builder_start_table@@Base+0x130>
   1551c:	ldr	r0, [r4, #40]	; 0x28
   15520:	ldr	r7, [r4, #48]	; 0x30
   15524:	mov	r3, #3
   15528:	add	r1, r4, #76	; 0x4c
   1552c:	str	r3, [sp]
   15530:	mov	r3, #0
   15534:	blx	r7
   15538:	cmp	r0, #0
   1553c:	bne	15588 <flatcc_builder_start_table@@Base+0x178>
   15540:	ldr	r0, [r4, #76]	; 0x4c
   15544:	adds	r0, r0, r6
   15548:	str	r0, [r4]
   1554c:	beq	15438 <flatcc_builder_start_table@@Base+0x28>
   15550:	ldr	r0, [r4, #28]
   15554:	ldr	r2, [r4, #60]	; 0x3c
   15558:	ldr	r3, [r4, #64]	; 0x40
   1555c:	ldr	r1, [r4, #32]
   15560:	mov	r5, #0
   15564:	add	r2, r2, r0
   15568:	sub	r0, r3, r0
   1556c:	str	r2, [r4, #16]
   15570:	movw	r2, #65532	; 0xfffc
   15574:	cmp	r0, r2
   15578:	movcs	r0, r2
   1557c:	str	r0, [r4, #24]
   15580:	str	r2, [r1, #4]
   15584:	b	15438 <flatcc_builder_start_table@@Base+0x28>
   15588:	ldr	r0, [pc, #24]	; 155a8 <flatcc_builder_start_table@@Base+0x198>
   1558c:	ldr	r1, [pc, #24]	; 155ac <flatcc_builder_start_table@@Base+0x19c>
   15590:	ldr	r3, [pc, #24]	; 155b0 <flatcc_builder_start_table@@Base+0x1a0>
   15594:	mov	r2, #308	; 0x134
   15598:	add	r0, pc, r0
   1559c:	add	r1, pc, r1
   155a0:	add	r3, pc, r3
   155a4:	bl	12498 <__assert_fail@plt>
   155a8:	andeq	r4, r0, r7, lsr #13
   155ac:	andeq	r3, r0, r6, ror #9
   155b0:	ldrdeq	r4, [r0], -r9

000155b4 <flatcc_builder_create_vtable@@Base>:
   155b4:	push	{r4, r5, fp, lr}
   155b8:	add	fp, sp, #8
   155bc:	sub	sp, sp, #80	; 0x50
   155c0:	mov	r3, r2
   155c4:	mov	r2, #0
   155c8:	mov	r4, r0
   155cc:	cmp	r3, #0
   155d0:	str	r2, [sp, #12]
   155d4:	str	r2, [sp, #8]
   155d8:	movne	r2, #1
   155dc:	strne	r3, [sp, #20]
   155e0:	strne	r1, [sp, #16]
   155e4:	strne	r3, [sp, #8]
   155e8:	strne	r2, [sp, #12]
   155ec:	ldr	r0, [r4, #152]	; 0x98
   155f0:	cmp	r0, #0
   155f4:	bne	15604 <flatcc_builder_create_vtable@@Base+0x50>
   155f8:	ldr	r0, [r4, #180]	; 0xb4
   155fc:	cmp	r0, #0
   15600:	beq	15660 <flatcc_builder_create_vtable@@Base+0xac>
   15604:	cmp	r3, #0
   15608:	beq	156a4 <flatcc_builder_create_vtable@@Base+0xf0>
   1560c:	ldr	r0, [r4, #136]	; 0x88
   15610:	ldr	ip, [r4, #44]	; 0x2c
   15614:	add	r1, sp, #8
   15618:	add	r1, r1, #8
   1561c:	sub	r5, r0, r3
   15620:	ldr	r0, [r4, #36]	; 0x24
   15624:	str	r3, [sp]
   15628:	mov	r3, r5
   1562c:	blx	ip
   15630:	cmp	r0, #0
   15634:	bne	156c4 <flatcc_builder_create_vtable@@Base+0x110>
   15638:	cmp	r5, #0
   1563c:	str	r5, [r4, #136]	; 0x88
   15640:	beq	15654 <flatcc_builder_create_vtable@@Base+0xa0>
   15644:	add	r1, r5, #1
   15648:	mov	r0, r1
   1564c:	sub	sp, fp, #8
   15650:	pop	{r4, r5, fp, pc}
   15654:	mov	r0, #0
   15658:	sub	sp, fp, #8
   1565c:	pop	{r4, r5, fp, pc}
   15660:	ldr	r5, [r4, #140]	; 0x8c
   15664:	ldr	r0, [r4, #36]	; 0x24
   15668:	ldr	ip, [r4, #44]	; 0x2c
   1566c:	add	r1, r5, r3
   15670:	str	r1, [r4, #140]	; 0x8c
   15674:	add	r1, sp, #8
   15678:	str	r3, [sp]
   1567c:	mov	r3, r5
   15680:	add	r1, r1, #8
   15684:	blx	ip
   15688:	cmp	r0, #0
   1568c:	bne	156e4 <flatcc_builder_create_vtable@@Base+0x130>
   15690:	adds	r1, r5, #1
   15694:	mov	r0, #0
   15698:	movcc	r0, r1
   1569c:	sub	sp, fp, #8
   156a0:	pop	{r4, r5, fp, pc}
   156a4:	ldr	r0, [pc, #100]	; 15710 <flatcc_builder_create_vtable@@Base+0x15c>
   156a8:	ldr	r1, [pc, #100]	; 15714 <flatcc_builder_create_vtable@@Base+0x160>
   156ac:	ldr	r3, [pc, #100]	; 15718 <flatcc_builder_create_vtable@@Base+0x164>
   156b0:	movw	r2, #647	; 0x287
   156b4:	add	r0, pc, r0
   156b8:	add	r1, pc, r1
   156bc:	add	r3, pc, r3
   156c0:	bl	12498 <__assert_fail@plt>
   156c4:	ldr	r0, [pc, #80]	; 1571c <flatcc_builder_create_vtable@@Base+0x168>
   156c8:	ldr	r1, [pc, #80]	; 15720 <flatcc_builder_create_vtable@@Base+0x16c>
   156cc:	ldr	r3, [pc, #80]	; 15724 <flatcc_builder_create_vtable@@Base+0x170>
   156d0:	movw	r2, #651	; 0x28b
   156d4:	add	r0, pc, r0
   156d8:	add	r1, pc, r1
   156dc:	add	r3, pc, r3
   156e0:	bl	12498 <__assert_fail@plt>
   156e4:	ldr	r0, [pc, #24]	; 15704 <flatcc_builder_create_vtable@@Base+0x150>
   156e8:	ldr	r1, [pc, #24]	; 15708 <flatcc_builder_create_vtable@@Base+0x154>
   156ec:	ldr	r3, [pc, #24]	; 1570c <flatcc_builder_create_vtable@@Base+0x158>
   156f0:	movw	r2, #677	; 0x2a5
   156f4:	add	r0, pc, r0
   156f8:	add	r1, pc, r1
   156fc:	add	r3, pc, r3
   15700:	bl	12498 <__assert_fail@plt>
   15704:	andeq	r4, r0, fp, asr #10
   15708:	andeq	r3, r0, sl, lsl #7
   1570c:			; <UNDEFINED> instruction: 0x000044be
   15710:	andeq	r4, r0, fp, lsl #11
   15714:	andeq	r3, r0, sl, asr #7
   15718:	andeq	r4, r0, r2, asr #8
   1571c:	andeq	r4, r0, fp, ror #10
   15720:	andeq	r3, r0, sl, lsr #7
   15724:	andeq	r4, r0, r2, lsr #8

00015728 <flatcc_builder_create_cached_vtable@@Base>:
   15728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1572c:	add	fp, sp, #28
   15730:	sub	sp, sp, #20
   15734:	mov	sl, r0
   15738:	ldr	r0, [r0, #116]	; 0x74
   1573c:	mov	r8, r3
   15740:	mov	r5, r2
   15744:	str	r1, [sp, #16]
   15748:	cmp	r0, #0
   1574c:	beq	157f0 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15750:	ldr	r1, [sl, #92]	; 0x5c
   15754:	rsb	r0, r0, #32
   15758:	lsr	r0, r8, r0
   1575c:	add	r6, r1, r0, lsl #2
   15760:	cmp	r6, #0
   15764:	beq	158b4 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15768:	ldr	r7, [r6]
   1576c:	str	r6, [sp, #12]
   15770:	cmp	r7, #0
   15774:	beq	158bc <flatcc_builder_create_cached_vtable@@Base+0x194>
   15778:	ldr	r4, [sl, #68]	; 0x44
   1577c:	ldr	r8, [sl, #100]	; 0x64
   15780:	mov	r0, #0
   15784:	str	r0, [sp, #8]
   15788:	b	1579c <flatcc_builder_create_cached_vtable@@Base+0x74>
   1578c:	ldr	r7, [r9, #12]!
   15790:	mov	r6, r9
   15794:	cmp	r7, #0
   15798:	beq	158ac <flatcc_builder_create_cached_vtable@@Base+0x184>
   1579c:	add	r9, r8, r7
   157a0:	mov	r1, r4
   157a4:	ldr	r0, [r9, #8]
   157a8:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   157ac:	cmp	r0, r5
   157b0:	bne	1578c <flatcc_builder_create_cached_vtable@@Base+0x64>
   157b4:	ldr	r0, [sp, #16]
   157b8:	mov	r2, r5
   157bc:	bl	12444 <bcmp@plt>
   157c0:	cmp	r0, #0
   157c4:	bne	1578c <flatcc_builder_create_cached_vtable@@Base+0x64>
   157c8:	ldr	r0, [sl, #152]	; 0x98
   157cc:	ldr	r1, [r9, #4]
   157d0:	cmp	r1, r0
   157d4:	beq	15a20 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   157d8:	mov	r6, r9
   157dc:	mov	r0, r9
   157e0:	ldr	r7, [r6, #12]!
   157e4:	cmp	r7, #0
   157e8:	bne	15784 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   157ec:	b	158c0 <flatcc_builder_create_cached_vtable@@Base+0x198>
   157f0:	ldr	r0, [sl, #124]	; 0x7c
   157f4:	cmp	r0, #0
   157f8:	bne	15a6c <flatcc_builder_create_cached_vtable@@Base+0x344>
   157fc:	ldr	r0, [sl, #104]	; 0x68
   15800:	add	r7, sl, #100	; 0x64
   15804:	cmp	r0, #15
   15808:	bhi	15834 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   1580c:	ldr	r0, [sl, #40]	; 0x28
   15810:	ldr	r6, [sl, #48]	; 0x30
   15814:	mov	r1, #6
   15818:	mov	r2, #16
   1581c:	mov	r3, #0
   15820:	str	r1, [sp]
   15824:	mov	r1, r7
   15828:	blx	r6
   1582c:	cmp	r0, #0
   15830:	bne	15a4c <flatcc_builder_create_cached_vtable@@Base+0x324>
   15834:	ldr	r0, [r7]
   15838:	mov	r7, #0
   1583c:	cmp	r0, #0
   15840:	beq	15960 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15844:	mov	r0, #16
   15848:	mov	r2, #5
   1584c:	add	r1, sl, #92	; 0x5c
   15850:	mov	r3, #1
   15854:	mov	r4, #256	; 0x100
   15858:	str	r0, [sl, #124]	; 0x7c
   1585c:	ldr	r0, [sl, #40]	; 0x28
   15860:	ldr	r6, [sl, #48]	; 0x30
   15864:	str	r2, [sp]
   15868:	mov	r2, #256	; 0x100
   1586c:	blx	r6
   15870:	cmp	r0, #0
   15874:	bne	15960 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15878:	ldr	r0, [sl, #96]	; 0x60
   1587c:	mov	r1, r4
   15880:	lsl	r4, r4, #1
   15884:	cmp	r0, r1, lsl #1
   15888:	bcs	1587c <flatcc_builder_create_cached_vtable@@Base+0x154>
   1588c:	lsr	r1, r1, #2
   15890:	mvn	r0, #0
   15894:	mov	r2, #1
   15898:	add	r0, r0, #1
   1589c:	cmp	r1, r2, lsl r0
   158a0:	bhi	15898 <flatcc_builder_create_cached_vtable@@Base+0x170>
   158a4:	str	r0, [sl, #116]	; 0x74
   158a8:	b	15750 <flatcc_builder_create_cached_vtable@@Base+0x28>
   158ac:	ldr	r9, [sp, #8]
   158b0:	b	158c0 <flatcc_builder_create_cached_vtable@@Base+0x198>
   158b4:	mov	r7, #0
   158b8:	b	15960 <flatcc_builder_create_cached_vtable@@Base+0x238>
   158bc:	mov	r9, #0
   158c0:	ldr	r4, [sl, #124]	; 0x7c
   158c4:	ldr	r0, [sl, #104]	; 0x68
   158c8:	add	r7, sl, #100	; 0x64
   158cc:	add	r2, r4, #16
   158d0:	cmp	r2, r0
   158d4:	bls	158fc <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   158d8:	ldr	r0, [sl, #40]	; 0x28
   158dc:	ldr	r6, [sl, #48]	; 0x30
   158e0:	mov	r1, #6
   158e4:	mov	r3, #0
   158e8:	str	r1, [sp]
   158ec:	mov	r1, r7
   158f0:	blx	r6
   158f4:	cmp	r0, #0
   158f8:	bne	15a4c <flatcc_builder_create_cached_vtable@@Base+0x324>
   158fc:	ldr	r0, [r7]
   15900:	mov	r7, #0
   15904:	adds	r4, r0, r4
   15908:	beq	15960 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1590c:	ldr	r0, [sl, #124]	; 0x7c
   15910:	ldr	r1, [sl, #152]	; 0x98
   15914:	add	r2, r0, #16
   15918:	str	r2, [sl, #124]	; 0x7c
   1591c:	ldr	r2, [sp, #12]
   15920:	str	r1, [r4, #4]
   15924:	ldr	r1, [r2]
   15928:	str	r1, [r4, #12]
   1592c:	ldr	r1, [sp, #16]
   15930:	str	r0, [r2]
   15934:	mov	r0, sl
   15938:	mov	r2, r5
   1593c:	bl	155b4 <flatcc_builder_create_vtable@@Base>
   15940:	cmp	r0, #0
   15944:	str	r0, [r4]
   15948:	beq	15960 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1594c:	cmp	r9, #0
   15950:	beq	1596c <flatcc_builder_create_cached_vtable@@Base+0x244>
   15954:	ldr	r0, [r9, #8]
   15958:	str	r0, [r4, #8]
   1595c:	ldr	r7, [r4]
   15960:	mov	r0, r7
   15964:	sub	sp, fp, #28
   15968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1596c:	ldr	r6, [sl, #120]	; 0x78
   15970:	ldr	r0, [sl, #172]	; 0xac
   15974:	add	r2, r6, r5
   15978:	cmp	r0, #0
   1597c:	beq	159b8 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15980:	cmp	r0, r2
   15984:	bcs	159b8 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15988:	ldr	r0, [sl, #116]	; 0x74
   1598c:	cmp	r0, #0
   15990:	beq	1595c <flatcc_builder_create_cached_vtable@@Base+0x234>
   15994:	ldr	r0, [sl, #92]	; 0x5c
   15998:	ldr	r2, [sl, #96]	; 0x60
   1599c:	mov	r1, #0
   159a0:	mov	r5, #0
   159a4:	bl	12468 <memset@plt>
   159a8:	mov	r0, #16
   159ac:	str	r5, [sl, #120]	; 0x78
   159b0:	str	r0, [sl, #124]	; 0x7c
   159b4:	b	1595c <flatcc_builder_create_cached_vtable@@Base+0x234>
   159b8:	ldr	r0, [sl, #72]	; 0x48
   159bc:	add	r7, sl, #68	; 0x44
   159c0:	cmp	r2, r0
   159c4:	bls	159ec <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   159c8:	ldr	r0, [sl, #40]	; 0x28
   159cc:	ldr	ip, [sl, #48]	; 0x30
   159d0:	mov	r1, #2
   159d4:	mov	r3, #0
   159d8:	str	r1, [sp]
   159dc:	mov	r1, r7
   159e0:	blx	ip
   159e4:	cmp	r0, #0
   159e8:	bne	15a4c <flatcc_builder_create_cached_vtable@@Base+0x324>
   159ec:	ldr	r0, [r7]
   159f0:	adds	r0, r0, r6
   159f4:	beq	15a18 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   159f8:	ldr	r1, [sl, #120]	; 0x78
   159fc:	mov	r2, r5
   15a00:	str	r1, [r4, #8]
   15a04:	add	r1, r1, r5
   15a08:	str	r1, [sl, #120]	; 0x78
   15a0c:	ldr	r1, [sp, #16]
   15a10:	bl	123e4 <memcpy@plt>
   15a14:	b	1595c <flatcc_builder_create_cached_vtable@@Base+0x234>
   15a18:	mvn	r7, #0
   15a1c:	b	15960 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15a20:	ldr	r0, [sp, #12]
   15a24:	cmp	r6, r0
   15a28:	beq	15a44 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15a2c:	mov	r1, r0
   15a30:	ldr	r0, [r9, #12]
   15a34:	str	r0, [r6]
   15a38:	ldr	r0, [r1]
   15a3c:	str	r0, [r9, #12]
   15a40:	str	r7, [r1]
   15a44:	ldr	r7, [r9]
   15a48:	b	15960 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15a4c:	ldr	r0, [pc, #68]	; 15a98 <flatcc_builder_create_cached_vtable@@Base+0x370>
   15a50:	ldr	r1, [pc, #68]	; 15a9c <flatcc_builder_create_cached_vtable@@Base+0x374>
   15a54:	ldr	r3, [pc, #68]	; 15aa0 <flatcc_builder_create_cached_vtable@@Base+0x378>
   15a58:	mov	r2, #308	; 0x134
   15a5c:	add	r0, pc, r0
   15a60:	add	r1, pc, r1
   15a64:	add	r3, pc, r3
   15a68:	bl	12498 <__assert_fail@plt>
   15a6c:	ldr	r0, [pc, #24]	; 15a8c <flatcc_builder_create_cached_vtable@@Base+0x364>
   15a70:	ldr	r1, [pc, #24]	; 15a90 <flatcc_builder_create_cached_vtable@@Base+0x368>
   15a74:	ldr	r3, [pc, #24]	; 15a94 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   15a78:	movw	r2, #342	; 0x156
   15a7c:	add	r0, pc, r0
   15a80:	add	r1, pc, r1
   15a84:	add	r3, pc, r3
   15a88:	bl	12498 <__assert_fail@plt>
   15a8c:	andeq	r4, r0, r7, lsl #3
   15a90:	andeq	r3, r0, r2
   15a94:	andeq	r4, r0, lr, lsl #3
   15a98:	andeq	r4, r0, r3, ror #3
   15a9c:	andeq	r3, r0, r2, lsr #32
   15aa0:	andeq	r4, r0, r5, lsl r0

00015aa4 <flatcc_builder_create_table@@Base>:
   15aa4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15aa8:	add	fp, sp, #24
   15aac:	sub	sp, sp, #80	; 0x50
   15ab0:	ldr	r5, [fp, #12]
   15ab4:	cmn	r5, #1
   15ab8:	ble	15c04 <flatcc_builder_create_table@@Base+0x160>
   15abc:	ldr	ip, [fp, #16]
   15ac0:	tst	ip, #1
   15ac4:	beq	15c24 <flatcc_builder_create_table@@Base+0x180>
   15ac8:	mov	r8, r0
   15acc:	ldrh	r0, [r0, #128]	; 0x80
   15ad0:	cmp	r3, #4
   15ad4:	movls	r3, #4
   15ad8:	cmp	r0, r3
   15adc:	strhcc	r3, [r8, #128]	; 0x80
   15ae0:	cmp	r5, #1
   15ae4:	ldr	r0, [r8, #136]	; 0x88
   15ae8:	sub	r4, r0, r2
   15aec:	sub	r0, r3, #1
   15af0:	and	r0, r4, r0
   15af4:	sub	r4, r4, #4
   15af8:	add	r3, ip, r0
   15afc:	sub	r3, r4, r3
   15b00:	add	r3, r3, #1
   15b04:	str	r3, [fp, #-28]	; 0xffffffe4
   15b08:	blt	15b38 <flatcc_builder_create_table@@Base+0x94>
   15b0c:	ldr	r3, [fp, #8]
   15b10:	sub	ip, r4, r0
   15b14:	mvn	r4, #3
   15b18:	sub	r4, r4, ip
   15b1c:	ldrh	r6, [r3], #2
   15b20:	subs	r5, r5, #1
   15b24:	ldr	r7, [r6, r1]
   15b28:	add	r7, r4, r7
   15b2c:	sub	r7, r7, r6
   15b30:	str	r7, [r6, r1]
   15b34:	bne	15b1c <flatcc_builder_create_table@@Base+0x78>
   15b38:	mov	r4, #4
   15b3c:	sub	r3, fp, #28
   15b40:	cmp	r2, #0
   15b44:	str	r4, [sp, #16]
   15b48:	str	r3, [sp, #12]
   15b4c:	mov	r3, #1
   15b50:	str	r4, [sp, #4]
   15b54:	addne	r4, r2, #4
   15b58:	str	r3, [sp, #8]
   15b5c:	movne	r3, #2
   15b60:	strne	r2, [sp, #24]
   15b64:	strne	r1, [sp, #20]
   15b68:	strne	r3, [sp, #8]
   15b6c:	strne	r4, [sp, #4]
   15b70:	cmp	r0, #0
   15b74:	beq	15ba0 <flatcc_builder_create_table@@Base+0xfc>
   15b78:	add	r4, r4, r0
   15b7c:	add	r1, sp, #4
   15b80:	str	r4, [sp, #4]
   15b84:	add	r1, r1, r3, lsl #3
   15b88:	add	r3, r3, #1
   15b8c:	ldr	r2, [pc, #208]	; 15c64 <flatcc_builder_create_table@@Base+0x1c0>
   15b90:	ldr	r2, [pc, r2]
   15b94:	str	r2, [r1, #8]
   15b98:	str	r0, [r1, #12]
   15b9c:	str	r3, [sp, #8]
   15ba0:	cmp	r4, #0
   15ba4:	ble	15c44 <flatcc_builder_create_table@@Base+0x1a0>
   15ba8:	ldr	r0, [r8, #136]	; 0x88
   15bac:	ldr	r7, [r8, #44]	; 0x2c
   15bb0:	add	r1, sp, #4
   15bb4:	mov	r2, r3
   15bb8:	add	r1, r1, #8
   15bbc:	sub	r5, r0, r4
   15bc0:	ldr	r0, [r8, #36]	; 0x24
   15bc4:	str	r4, [sp]
   15bc8:	mov	r3, r5
   15bcc:	blx	r7
   15bd0:	cmp	r0, #0
   15bd4:	streq	r5, [r8, #136]	; 0x88
   15bd8:	moveq	r0, r5
   15bdc:	subeq	sp, fp, #24
   15be0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15be4:	ldr	r0, [pc, #160]	; 15c8c <flatcc_builder_create_table@@Base+0x1e8>
   15be8:	ldr	r1, [pc, #160]	; 15c90 <flatcc_builder_create_table@@Base+0x1ec>
   15bec:	ldr	r3, [pc, #160]	; 15c94 <flatcc_builder_create_table@@Base+0x1f0>
   15bf0:	movw	r2, #651	; 0x28b
   15bf4:	add	r0, pc, r0
   15bf8:	add	r1, pc, r1
   15bfc:	add	r3, pc, r3
   15c00:	bl	12498 <__assert_fail@plt>
   15c04:	ldr	r0, [pc, #92]	; 15c68 <flatcc_builder_create_table@@Base+0x1c4>
   15c08:	ldr	r1, [pc, #92]	; 15c6c <flatcc_builder_create_table@@Base+0x1c8>
   15c0c:	ldr	r3, [pc, #92]	; 15c70 <flatcc_builder_create_table@@Base+0x1cc>
   15c10:	movw	r2, #1237	; 0x4d5
   15c14:	add	r0, pc, r0
   15c18:	add	r1, pc, r1
   15c1c:	add	r3, pc, r3
   15c20:	bl	12498 <__assert_fail@plt>
   15c24:	ldr	r0, [pc, #72]	; 15c74 <flatcc_builder_create_table@@Base+0x1d0>
   15c28:	ldr	r1, [pc, #72]	; 15c78 <flatcc_builder_create_table@@Base+0x1d4>
   15c2c:	ldr	r3, [pc, #72]	; 15c7c <flatcc_builder_create_table@@Base+0x1d8>
   15c30:	movw	r2, #1243	; 0x4db
   15c34:	add	r0, pc, r0
   15c38:	add	r1, pc, r1
   15c3c:	add	r3, pc, r3
   15c40:	bl	12498 <__assert_fail@plt>
   15c44:	ldr	r0, [pc, #52]	; 15c80 <flatcc_builder_create_table@@Base+0x1dc>
   15c48:	ldr	r1, [pc, #52]	; 15c84 <flatcc_builder_create_table@@Base+0x1e0>
   15c4c:	ldr	r3, [pc, #52]	; 15c88 <flatcc_builder_create_table@@Base+0x1e4>
   15c50:	movw	r2, #647	; 0x287
   15c54:	add	r0, pc, r0
   15c58:	add	r1, pc, r1
   15c5c:	add	r3, pc, r3
   15c60:	bl	12498 <__assert_fail@plt>
   15c64:	andeq	r4, r1, r4, asr #9
   15c68:	andeq	r3, r0, r1, ror #11
   15c6c:	andeq	r2, r0, sl, ror #28
   15c70:	andeq	r3, r0, fp, ror #11
   15c74:	andeq	r3, r0, pc, ror #12
   15c78:	andeq	r2, r0, sl, asr #28
   15c7c:	andeq	r3, r0, fp, asr #11
   15c80:	andeq	r3, r0, fp, ror #31
   15c84:	andeq	r2, r0, sl, lsr #28
   15c88:	andeq	r3, r0, r2, lsr #29
   15c8c:	andeq	r4, r0, fp, asr #32
   15c90:	andeq	r2, r0, sl, lsl #29
   15c94:	andeq	r3, r0, r2, lsl #30

00015c98 <flatcc_builder_check_required_field@@Base>:
   15c98:	push	{fp, lr}
   15c9c:	mov	fp, sp
   15ca0:	ldr	r2, [r0, #32]
   15ca4:	ldrh	r2, [r2, #14]
   15ca8:	cmp	r2, #3
   15cac:	bne	15cdc <flatcc_builder_check_required_field@@Base+0x44>
   15cb0:	ldrh	r3, [r0, #8]
   15cb4:	mov	r2, #0
   15cb8:	cmp	r3, r1
   15cbc:	bls	15cd4 <flatcc_builder_check_required_field@@Base+0x3c>
   15cc0:	ldr	r0, [r0, #4]
   15cc4:	add	r0, r0, r1, lsl #1
   15cc8:	ldrh	r2, [r0]
   15ccc:	cmp	r2, #0
   15cd0:	movwne	r2, #1
   15cd4:	mov	r0, r2
   15cd8:	pop	{fp, pc}
   15cdc:	ldr	r0, [pc, #24]	; 15cfc <flatcc_builder_check_required_field@@Base+0x64>
   15ce0:	ldr	r1, [pc, #24]	; 15d00 <flatcc_builder_check_required_field@@Base+0x68>
   15ce4:	ldr	r3, [pc, #24]	; 15d04 <flatcc_builder_check_required_field@@Base+0x6c>
   15ce8:	movw	r2, #1272	; 0x4f8
   15cec:	add	r0, pc, r0
   15cf0:	add	r1, pc, r1
   15cf4:	add	r3, pc, r3
   15cf8:	bl	12498 <__assert_fail@plt>
   15cfc:	andeq	r3, r0, r2, asr #11
   15d00:	muleq	r0, r2, sp
   15d04:	andeq	r3, r0, r5, ror #11

00015d08 <flatcc_builder_check_union_field@@Base>:
   15d08:	push	{fp, lr}
   15d0c:	mov	fp, sp
   15d10:	mov	r2, r0
   15d14:	ldr	r0, [r0, #32]
   15d18:	ldrh	r0, [r0, #14]
   15d1c:	cmp	r0, #3
   15d20:	bne	15d80 <flatcc_builder_check_union_field@@Base+0x78>
   15d24:	mov	r0, #0
   15d28:	cmp	r1, #0
   15d2c:	beq	15d6c <flatcc_builder_check_union_field@@Base+0x64>
   15d30:	ldrh	r3, [r2, #8]
   15d34:	cmp	r3, r1
   15d38:	popls	{fp, pc}
   15d3c:	ldr	r0, [r2, #4]
   15d40:	add	r0, r0, r1, lsl #1
   15d44:	ldrh	r1, [r0, #-2]
   15d48:	cmp	r1, #0
   15d4c:	beq	15d70 <flatcc_builder_check_union_field@@Base+0x68>
   15d50:	ldr	r2, [r2, #16]
   15d54:	ldrh	r0, [r0]
   15d58:	ldrb	r1, [r2, r1]
   15d5c:	cmp	r1, #0
   15d60:	beq	15d74 <flatcc_builder_check_union_field@@Base+0x6c>
   15d64:	cmp	r0, #0
   15d68:	movwne	r0, #1
   15d6c:	pop	{fp, pc}
   15d70:	ldrh	r0, [r0]
   15d74:	clz	r0, r0
   15d78:	lsr	r0, r0, #5
   15d7c:	pop	{fp, pc}
   15d80:	ldr	r0, [pc, #24]	; 15da0 <flatcc_builder_check_union_field@@Base+0x98>
   15d84:	ldr	r1, [pc, #24]	; 15da4 <flatcc_builder_check_union_field@@Base+0x9c>
   15d88:	ldr	r3, [pc, #24]	; 15da8 <flatcc_builder_check_union_field@@Base+0xa0>
   15d8c:	movw	r2, #1279	; 0x4ff
   15d90:	add	r0, pc, r0
   15d94:	add	r1, pc, r1
   15d98:	add	r3, pc, r3
   15d9c:	bl	12498 <__assert_fail@plt>
   15da0:	andeq	r3, r0, lr, lsl r5
   15da4:	andeq	r2, r0, lr, ror #25
   15da8:	muleq	r0, r4, r5

00015dac <flatcc_builder_check_required@@Base>:
   15dac:	push	{fp, lr}
   15db0:	mov	fp, sp
   15db4:	mov	r3, r0
   15db8:	ldr	r0, [r0, #32]
   15dbc:	ldrh	r0, [r0, #14]
   15dc0:	cmp	r0, #3
   15dc4:	bne	15e0c <flatcc_builder_check_required@@Base+0x60>
   15dc8:	ldrh	ip, [r3, #8]
   15dcc:	mov	r0, #0
   15dd0:	cmp	ip, r2
   15dd4:	poplt	{fp, pc}
   15dd8:	cmp	r2, #1
   15ddc:	blt	15e04 <flatcc_builder_check_required@@Base+0x58>
   15de0:	ldr	ip, [r3, #4]
   15de4:	ldrh	r3, [r1]
   15de8:	add	r3, ip, r3, lsl #1
   15dec:	ldrh	r3, [r3]
   15df0:	cmp	r3, #0
   15df4:	beq	15e08 <flatcc_builder_check_required@@Base+0x5c>
   15df8:	add	r1, r1, #2
   15dfc:	subs	r2, r2, #1
   15e00:	bne	15de4 <flatcc_builder_check_required@@Base+0x38>
   15e04:	mov	r0, #1
   15e08:	pop	{fp, pc}
   15e0c:	ldr	r0, [pc, #24]	; 15e2c <flatcc_builder_check_required@@Base+0x80>
   15e10:	ldr	r1, [pc, #24]	; 15e30 <flatcc_builder_check_required@@Base+0x84>
   15e14:	ldr	r3, [pc, #24]	; 15e34 <flatcc_builder_check_required@@Base+0x88>
   15e18:	movw	r2, #1297	; 0x511
   15e1c:	add	r0, pc, r0
   15e20:	add	r1, pc, r1
   15e24:	add	r3, pc, r3
   15e28:	bl	12498 <__assert_fail@plt>
   15e2c:	muleq	r0, r2, r4
   15e30:	andeq	r2, r0, r2, ror #24
   15e34:	andeq	r3, r0, r8, asr r5

00015e38 <flatcc_builder_end_table@@Base>:
   15e38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e3c:	add	fp, sp, #24
   15e40:	sub	sp, sp, #16
   15e44:	mov	r4, r0
   15e48:	ldr	r0, [r0, #32]
   15e4c:	ldrh	r0, [r0, #14]
   15e50:	cmp	r0, #3
   15e54:	bne	15fd0 <flatcc_builder_end_table@@Base+0x198>
   15e58:	ldrh	r0, [r4, #8]
   15e5c:	ldr	r5, [r4, #4]
   15e60:	mov	r1, #4
   15e64:	movw	r2, #31153	; 0x79b1
   15e68:	movt	r2, #40503	; 0x9e37
   15e6c:	add	r0, r1, r0, lsl #1
   15e70:	strh	r0, [r5, #-4]!
   15e74:	ldrh	r1, [r4, #20]
   15e78:	uxth	r6, r0
   15e7c:	add	r1, r1, #4
   15e80:	strh	r1, [r5, #2]
   15e84:	uxth	r1, r1
   15e88:	ldr	r0, [r4, #12]
   15e8c:	eor	r0, r0, r6
   15e90:	mul	r0, r0, r2
   15e94:	eor	r0, r0, r1
   15e98:	mov	r1, r5
   15e9c:	mul	r3, r0, r2
   15ea0:	mov	r0, r4
   15ea4:	mov	r2, r6
   15ea8:	str	r3, [r4, #12]
   15eac:	bl	15728 <flatcc_builder_create_cached_vtable@@Base>
   15eb0:	cmp	r0, #0
   15eb4:	beq	15fc0 <flatcc_builder_end_table@@Base+0x188>
   15eb8:	mov	r7, r0
   15ebc:	mov	r0, r5
   15ec0:	mov	r1, #0
   15ec4:	mov	r2, r6
   15ec8:	mov	r8, #0
   15ecc:	bl	12468 <memset@plt>
   15ed0:	ldr	r5, [r4, #32]
   15ed4:	ldr	r0, [r4, #76]	; 0x4c
   15ed8:	ldr	r6, [r4]
   15edc:	ldrh	r3, [r4, #130]	; 0x82
   15ee0:	ldr	r1, [r4, #16]
   15ee4:	ldr	r2, [r4, #20]
   15ee8:	ldr	r5, [r5, #20]
   15eec:	add	r0, r0, r5
   15ef0:	sub	r6, r6, r0
   15ef4:	asr	r6, r6, #1
   15ef8:	stm	sp, {r0, r6, r7}
   15efc:	mov	r0, r4
   15f00:	bl	15aa4 <flatcc_builder_create_table@@Base>
   15f04:	cmp	r0, #0
   15f08:	beq	15fc4 <flatcc_builder_end_table@@Base+0x18c>
   15f0c:	ldr	r1, [r4, #32]
   15f10:	mov	r5, r0
   15f14:	ldr	r0, [r4, #16]
   15f18:	ldr	r2, [r4, #20]
   15f1c:	ldr	r3, [r4, #52]	; 0x34
   15f20:	ldr	r7, [r1, #24]
   15f24:	str	r7, [r4, #12]
   15f28:	ldrh	r7, [r1, #28]
   15f2c:	strh	r7, [r4, #8]
   15f30:	ldr	r7, [r1, #16]
   15f34:	add	r3, r3, r7
   15f38:	str	r3, [r4, #4]
   15f3c:	ldr	r3, [r4, #76]	; 0x4c
   15f40:	ldr	r1, [r1, #20]
   15f44:	add	r1, r3, r1
   15f48:	str	r1, [r4]
   15f4c:	mov	r1, #0
   15f50:	bl	12468 <memset@plt>
   15f54:	ldr	r0, [r4, #32]
   15f58:	ldr	r1, [r4, #60]	; 0x3c
   15f5c:	ldr	r2, [r4, #64]	; 0x40
   15f60:	mov	r8, r5
   15f64:	ldr	r3, [r0, #8]
   15f68:	str	r3, [r4, #20]
   15f6c:	ldr	r3, [r0]
   15f70:	str	r3, [r4, #28]
   15f74:	add	r1, r1, r3
   15f78:	ldr	r7, [r0, #4]
   15f7c:	str	r1, [r4, #16]
   15f80:	sub	r1, r2, r3
   15f84:	cmp	r1, r7
   15f88:	movhi	r1, r7
   15f8c:	str	r1, [r4, #24]
   15f90:	ldrh	r1, [r4, #130]	; 0x82
   15f94:	ldrh	r2, [r4, #128]	; 0x80
   15f98:	cmp	r2, r1
   15f9c:	strhcc	r1, [r4, #128]	; 0x80
   15fa0:	ldrh	r1, [r0, #12]
   15fa4:	sub	r0, r0, #36	; 0x24
   15fa8:	str	r0, [r4, #32]
   15fac:	strh	r1, [r4, #130]	; 0x82
   15fb0:	ldr	r0, [r4, #156]	; 0x9c
   15fb4:	sub	r0, r0, #1
   15fb8:	str	r0, [r4, #156]	; 0x9c
   15fbc:	b	15fc4 <flatcc_builder_end_table@@Base+0x18c>
   15fc0:	mov	r8, #0
   15fc4:	mov	r0, r8
   15fc8:	sub	sp, fp, #24
   15fcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fd0:	ldr	r0, [pc, #24]	; 15ff0 <flatcc_builder_end_table@@Base+0x1b8>
   15fd4:	ldr	r1, [pc, #24]	; 15ff4 <flatcc_builder_end_table@@Base+0x1bc>
   15fd8:	ldr	r3, [pc, #24]	; 15ff8 <flatcc_builder_end_table@@Base+0x1c0>
   15fdc:	movw	r2, #1317	; 0x525
   15fe0:	add	r0, pc, r0
   15fe4:	add	r1, pc, r1
   15fe8:	add	r3, pc, r3
   15fec:	bl	12498 <__assert_fail@plt>
   15ff0:	andeq	r3, r0, lr, asr #5
   15ff4:	muleq	r0, lr, sl
   15ff8:	andeq	r3, r0, lr, ror #7

00015ffc <flatcc_builder_create_vector@@Base>:
   15ffc:	push	{r4, r5, r6, r7, fp, lr}
   16000:	add	fp, sp, #16
   16004:	sub	sp, sp, #80	; 0x50
   16008:	mov	r7, r0
   1600c:	ldr	r0, [fp, #12]
   16010:	cmp	r2, r0
   16014:	bhi	16110 <flatcc_builder_create_vector@@Base+0x114>
   16018:	ldr	r0, [fp, #8]
   1601c:	mov	r4, r2
   16020:	ldrh	r2, [r7, #128]	; 0x80
   16024:	mov	r5, #4
   16028:	cmp	r0, #4
   1602c:	movls	r0, r5
   16030:	cmp	r2, r0
   16034:	sub	r2, fp, #20
   16038:	strhcc	r0, [r7, #128]	; 0x80
   1603c:	str	r4, [fp, #-20]	; 0xffffffec
   16040:	sub	r0, r0, #1
   16044:	ldr	ip, [r7, #136]	; 0x88
   16048:	str	r5, [sp, #16]
   1604c:	str	r2, [sp, #12]
   16050:	mov	r2, #1
   16054:	str	r5, [sp, #4]
   16058:	str	r2, [sp, #8]
   1605c:	mls	r6, r3, r4, ip
   16060:	mul	r3, r3, r4
   16064:	cmp	r3, #0
   16068:	and	r0, r6, r0
   1606c:	movne	r2, #2
   16070:	addne	r5, r3, #4
   16074:	strne	r3, [sp, #24]
   16078:	strne	r1, [sp, #20]
   1607c:	strne	r2, [sp, #8]
   16080:	strne	r5, [sp, #4]
   16084:	cmp	r0, #0
   16088:	beq	160b4 <flatcc_builder_create_vector@@Base+0xb8>
   1608c:	add	r5, r5, r0
   16090:	add	r1, sp, #4
   16094:	str	r5, [sp, #4]
   16098:	add	r1, r1, r2, lsl #3
   1609c:	add	r2, r2, #1
   160a0:	ldr	r3, [pc, #168]	; 16150 <flatcc_builder_create_vector@@Base+0x154>
   160a4:	ldr	r3, [pc, r3]
   160a8:	str	r3, [r1, #8]
   160ac:	str	r0, [r1, #12]
   160b0:	str	r2, [sp, #8]
   160b4:	cmp	r5, #0
   160b8:	ble	16130 <flatcc_builder_create_vector@@Base+0x134>
   160bc:	ldr	r0, [r7, #36]	; 0x24
   160c0:	ldr	r6, [r7, #44]	; 0x2c
   160c4:	add	r1, sp, #4
   160c8:	sub	r4, ip, r5
   160cc:	str	r5, [sp]
   160d0:	add	r1, r1, #8
   160d4:	mov	r3, r4
   160d8:	blx	r6
   160dc:	cmp	r0, #0
   160e0:	streq	r4, [r7, #136]	; 0x88
   160e4:	moveq	r0, r4
   160e8:	subeq	sp, fp, #16
   160ec:	popeq	{r4, r5, r6, r7, fp, pc}
   160f0:	ldr	r0, [pc, #116]	; 1616c <flatcc_builder_create_vector@@Base+0x170>
   160f4:	ldr	r1, [pc, #116]	; 16170 <flatcc_builder_create_vector@@Base+0x174>
   160f8:	ldr	r3, [pc, #116]	; 16174 <flatcc_builder_create_vector@@Base+0x178>
   160fc:	movw	r2, #651	; 0x28b
   16100:	add	r0, pc, r0
   16104:	add	r1, pc, r1
   16108:	add	r3, pc, r3
   1610c:	bl	12498 <__assert_fail@plt>
   16110:	ldr	r0, [pc, #60]	; 16154 <flatcc_builder_create_vector@@Base+0x158>
   16114:	ldr	r1, [pc, #60]	; 16158 <flatcc_builder_create_vector@@Base+0x15c>
   16118:	ldr	r3, [pc, #60]	; 1615c <flatcc_builder_create_vector@@Base+0x160>
   1611c:	movw	r2, #1365	; 0x555
   16120:	add	r0, pc, r0
   16124:	add	r1, pc, r1
   16128:	add	r3, pc, r3
   1612c:	bl	12498 <__assert_fail@plt>
   16130:	ldr	r0, [pc, #40]	; 16160 <flatcc_builder_create_vector@@Base+0x164>
   16134:	ldr	r1, [pc, #40]	; 16164 <flatcc_builder_create_vector@@Base+0x168>
   16138:	ldr	r3, [pc, #40]	; 16168 <flatcc_builder_create_vector@@Base+0x16c>
   1613c:	movw	r2, #647	; 0x287
   16140:	add	r0, pc, r0
   16144:	add	r1, pc, r1
   16148:	add	r3, pc, r3
   1614c:	bl	12498 <__assert_fail@plt>
   16150:			; <UNDEFINED> instruction: 0x00013fb0
   16154:	strdeq	r3, [r0], -r8
   16158:	andeq	r2, r0, lr, asr r9
   1615c:	andeq	r3, r0, r3, lsl #6
   16160:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   16164:	andeq	r2, r0, lr, lsr r9
   16168:			; <UNDEFINED> instruction: 0x000039b6
   1616c:	andeq	r3, r0, pc, lsr fp
   16170:	andeq	r2, r0, lr, ror r9
   16174:	strdeq	r3, [r0], -r6

00016178 <flatcc_builder_end_vector@@Base>:
   16178:	push	{r4, r5, fp, lr}
   1617c:	add	fp, sp, #8
   16180:	sub	sp, sp, #8
   16184:	mov	r4, r0
   16188:	ldr	r0, [r0, #32]
   1618c:	ldrh	r1, [r0, #14]
   16190:	cmp	r1, #4
   16194:	bne	16248 <flatcc_builder_end_vector@@Base+0xd0>
   16198:	ldr	r3, [r0, #16]
   1619c:	ldr	r2, [r0, #20]
   161a0:	ldr	r0, [r0, #24]
   161a4:	ldr	r1, [r4, #16]
   161a8:	ldrh	r5, [r4, #130]	; 0x82
   161ac:	str	r0, [sp, #4]
   161b0:	mov	r0, r4
   161b4:	str	r5, [sp]
   161b8:	bl	15ffc <flatcc_builder_create_vector@@Base>
   161bc:	mov	r5, r0
   161c0:	cmp	r0, #0
   161c4:	beq	1623c <flatcc_builder_end_vector@@Base+0xc4>
   161c8:	ldr	r0, [r4, #16]
   161cc:	ldr	r2, [r4, #20]
   161d0:	mov	r1, #0
   161d4:	bl	12468 <memset@plt>
   161d8:	ldr	r0, [r4, #32]
   161dc:	ldr	r1, [r4, #60]	; 0x3c
   161e0:	ldr	ip, [r4, #64]	; 0x40
   161e4:	ldr	r3, [r0, #8]
   161e8:	str	r3, [r4, #20]
   161ec:	ldr	r3, [r0]
   161f0:	str	r3, [r4, #28]
   161f4:	add	r1, r1, r3
   161f8:	ldr	r2, [r0, #4]
   161fc:	str	r1, [r4, #16]
   16200:	sub	r1, ip, r3
   16204:	cmp	r1, r2
   16208:	movhi	r1, r2
   1620c:	str	r1, [r4, #24]
   16210:	ldrh	r1, [r4, #130]	; 0x82
   16214:	ldrh	r2, [r4, #128]	; 0x80
   16218:	cmp	r2, r1
   1621c:	strhcc	r1, [r4, #128]	; 0x80
   16220:	ldrh	r1, [r0, #12]
   16224:	sub	r0, r0, #36	; 0x24
   16228:	str	r0, [r4, #32]
   1622c:	strh	r1, [r4, #130]	; 0x82
   16230:	ldr	r0, [r4, #156]	; 0x9c
   16234:	sub	r0, r0, #1
   16238:	str	r0, [r4, #156]	; 0x9c
   1623c:	mov	r0, r5
   16240:	sub	sp, fp, #8
   16244:	pop	{r4, r5, fp, pc}
   16248:	ldr	r0, [pc, #24]	; 16268 <flatcc_builder_end_vector@@Base+0xf0>
   1624c:	ldr	r1, [pc, #24]	; 1626c <flatcc_builder_end_vector@@Base+0xf4>
   16250:	ldr	r3, [pc, #24]	; 16270 <flatcc_builder_end_vector@@Base+0xf8>
   16254:	movw	r2, #1400	; 0x578
   16258:	add	r0, pc, r0
   1625c:	add	r1, pc, r1
   16260:	add	r3, pc, r3
   16264:	bl	12498 <__assert_fail@plt>
   16268:	andeq	r2, r0, r4, ror #22
   1626c:	andeq	r2, r0, r6, lsr #16
   16270:	andeq	r3, r0, r1, asr #4

00016274 <flatcc_builder_vector_count@@Base>:
   16274:	ldr	r0, [r0, #32]
   16278:	ldr	r0, [r0, #20]
   1627c:	bx	lr

00016280 <flatcc_builder_vector_edit@@Base>:
   16280:	ldr	r0, [r0, #16]
   16284:	bx	lr

00016288 <flatcc_builder_create_offset_vector_direct@@Base>:
   16288:	mov	r3, #0
   1628c:	b	16290 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16290:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16294:	add	fp, sp, #24
   16298:	sub	sp, sp, #80	; 0x50
   1629c:	mov	r6, #0
   162a0:	cmn	r2, #-1073741823	; 0xc0000001
   162a4:	bhi	16404 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   162a8:	mov	r8, r0
   162ac:	ldrh	r0, [r0, #128]	; 0x80
   162b0:	mov	r5, #4
   162b4:	sub	r7, fp, #28
   162b8:	mov	r4, #1
   162bc:	cmp	r0, #3
   162c0:	movls	r0, #4
   162c4:	strhls	r0, [r8, #128]	; 0x80
   162c8:	str	r2, [fp, #-28]	; 0xffffffe4
   162cc:	ldr	ip, [r8, #136]	; 0x88
   162d0:	str	r5, [sp, #16]
   162d4:	str	r7, [sp, #12]
   162d8:	mov	r7, #0
   162dc:	str	r5, [sp, #4]
   162e0:	str	r4, [sp, #8]
   162e4:	cmp	r7, r2, lsl #2
   162e8:	and	r6, ip, #3
   162ec:	beq	1630c <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   162f0:	lsl	r7, r2, #2
   162f4:	mov	r4, #2
   162f8:	add	r5, r7, #4
   162fc:	str	r7, [sp, #24]
   16300:	str	r1, [sp, #20]
   16304:	str	r4, [sp, #8]
   16308:	str	r5, [sp, #4]
   1630c:	cmp	r6, #0
   16310:	beq	1633c <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16314:	add	r5, r5, r6
   16318:	add	r7, sp, #4
   1631c:	str	r5, [sp, #4]
   16320:	add	r7, r7, r4, lsl #3
   16324:	add	r4, r4, #1
   16328:	ldr	r0, [pc, #352]	; 16490 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   1632c:	ldr	r0, [pc, r0]
   16330:	str	r0, [r7, #8]
   16334:	str	r6, [r7, #12]
   16338:	str	r4, [sp, #8]
   1633c:	cmp	r2, #0
   16340:	beq	163cc <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   16344:	sub	r0, r5, ip
   16348:	mov	r6, r3
   1634c:	sub	r0, r0, #4
   16350:	b	16368 <flatcc_builder_create_offset_vector_direct@@Base+0xe0>
   16354:	sub	r0, r0, #4
   16358:	add	r1, r1, #4
   1635c:	add	r6, r6, #1
   16360:	subs	r2, r2, #1
   16364:	beq	163c8 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   16368:	ldr	r7, [r1]
   1636c:	cmp	r7, #0
   16370:	beq	16394 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16374:	add	r7, r0, r7
   16378:	cmp	r3, #0
   1637c:	str	r7, [r1]
   16380:	beq	16354 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16384:	ldrb	r7, [r6]
   16388:	cmp	r7, #0
   1638c:	bne	16354 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16390:	b	16410 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   16394:	cmp	r3, #0
   16398:	beq	16430 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   1639c:	ldrb	r7, [r6]
   163a0:	cmp	r7, #0
   163a4:	beq	16354 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   163a8:	ldr	r0, [pc, #240]	; 164a0 <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   163ac:	ldr	r1, [pc, #240]	; 164a4 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   163b0:	ldr	r3, [pc, #240]	; 164a8 <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   163b4:	movw	r2, #1461	; 0x5b5
   163b8:	add	r0, pc, r0
   163bc:	add	r1, pc, r1
   163c0:	add	r3, pc, r3
   163c4:	bl	12498 <__assert_fail@plt>
   163c8:	ldr	ip, [r8, #136]	; 0x88
   163cc:	cmp	r5, #0
   163d0:	ble	16450 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   163d4:	ldr	r0, [r8, #36]	; 0x24
   163d8:	ldr	r7, [r8, #44]	; 0x2c
   163dc:	add	r1, sp, #4
   163e0:	sub	r6, ip, r5
   163e4:	mov	r2, r4
   163e8:	str	r5, [sp]
   163ec:	add	r1, r1, #8
   163f0:	mov	r3, r6
   163f4:	blx	r7
   163f8:	cmp	r0, #0
   163fc:	bne	16470 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   16400:	str	r6, [r8, #136]	; 0x88
   16404:	mov	r0, r6
   16408:	sub	sp, fp, #24
   1640c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16410:	ldr	r0, [pc, #124]	; 16494 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   16414:	ldr	r1, [pc, #124]	; 16498 <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   16418:	ldr	r3, [pc, #124]	; 1649c <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   1641c:	movw	r2, #1457	; 0x5b1
   16420:	add	r0, pc, r0
   16424:	add	r1, pc, r1
   16428:	add	r3, pc, r3
   1642c:	bl	12498 <__assert_fail@plt>
   16430:	ldr	r0, [pc, #116]	; 164ac <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   16434:	ldr	r1, [pc, #116]	; 164b0 <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   16438:	ldr	r3, [pc, #116]	; 164b4 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   1643c:	movw	r2, #1463	; 0x5b7
   16440:	add	r0, pc, r0
   16444:	add	r1, pc, r1
   16448:	add	r3, pc, r3
   1644c:	bl	12498 <__assert_fail@plt>
   16450:	ldr	r0, [pc, #96]	; 164b8 <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   16454:	ldr	r1, [pc, #96]	; 164bc <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   16458:	ldr	r3, [pc, #96]	; 164c0 <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   1645c:	movw	r2, #647	; 0x287
   16460:	add	r0, pc, r0
   16464:	add	r1, pc, r1
   16468:	add	r3, pc, r3
   1646c:	bl	12498 <__assert_fail@plt>
   16470:	ldr	r0, [pc, #76]	; 164c4 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   16474:	ldr	r1, [pc, #76]	; 164c8 <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   16478:	ldr	r3, [pc, #76]	; 164cc <flatcc_builder_create_offset_vector_direct@@Base+0x244>
   1647c:	movw	r2, #651	; 0x28b
   16480:	add	r0, pc, r0
   16484:	add	r1, pc, r1
   16488:	add	r3, pc, r3
   1648c:	bl	12498 <__assert_fail@plt>
   16490:	andeq	r3, r1, r8, lsr #26
   16494:	andeq	r3, r0, r3, lsl r8
   16498:	andeq	r2, r0, lr, asr r6
   1649c:	andeq	r3, r0, r9, lsl r8
   164a0:	andeq	r3, r0, ip, lsl #18
   164a4:	andeq	r2, r0, r6, asr #13
   164a8:	andeq	r3, r0, r1, lsl #17
   164ac:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   164b0:	andeq	r2, r0, lr, lsr r6
   164b4:	strdeq	r3, [r0], -r9
   164b8:	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   164bc:	andeq	r2, r0, lr, lsl r6
   164c0:	muleq	r0, r6, r6
   164c4:			; <UNDEFINED> instruction: 0x000037bf
   164c8:	strdeq	r2, [r0], -lr
   164cc:	andeq	r3, r0, r6, ror r6

000164d0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   164d0:	push	{r4, r5, fp, lr}
   164d4:	add	fp, sp, #8
   164d8:	mov	r4, r0
   164dc:	ldr	r0, [r0, #32]
   164e0:	mov	r3, r1
   164e4:	ldrh	r1, [r0, #14]
   164e8:	cmp	r1, #5
   164ec:	bne	16588 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   164f0:	ldr	r2, [r0, #20]
   164f4:	ldr	r1, [r4, #16]
   164f8:	mov	r0, r4
   164fc:	bl	16290 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16500:	mov	r5, r0
   16504:	cmp	r0, #0
   16508:	beq	16580 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   1650c:	ldr	r0, [r4, #16]
   16510:	ldr	r2, [r4, #20]
   16514:	mov	r1, #0
   16518:	bl	12468 <memset@plt>
   1651c:	ldr	r0, [r4, #32]
   16520:	ldr	r1, [r4, #60]	; 0x3c
   16524:	ldr	ip, [r4, #64]	; 0x40
   16528:	ldr	r3, [r0, #8]
   1652c:	str	r3, [r4, #20]
   16530:	ldr	r3, [r0]
   16534:	str	r3, [r4, #28]
   16538:	add	r1, r1, r3
   1653c:	ldr	r2, [r0, #4]
   16540:	str	r1, [r4, #16]
   16544:	sub	r1, ip, r3
   16548:	cmp	r1, r2
   1654c:	movhi	r1, r2
   16550:	str	r1, [r4, #24]
   16554:	ldrh	r1, [r4, #130]	; 0x82
   16558:	ldrh	r2, [r4, #128]	; 0x80
   1655c:	cmp	r2, r1
   16560:	strhcc	r1, [r4, #128]	; 0x80
   16564:	ldrh	r1, [r0, #12]
   16568:	sub	r0, r0, #36	; 0x24
   1656c:	str	r0, [r4, #32]
   16570:	strh	r1, [r4, #130]	; 0x82
   16574:	ldr	r0, [r4, #156]	; 0x9c
   16578:	sub	r0, r0, #1
   1657c:	str	r0, [r4, #156]	; 0x9c
   16580:	mov	r0, r5
   16584:	pop	{r4, r5, fp, pc}
   16588:	ldr	r0, [pc, #24]	; 165a8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   1658c:	ldr	r1, [pc, #24]	; 165ac <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   16590:	ldr	r3, [pc, #24]	; 165b0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   16594:	movw	r2, #1493	; 0x5d5
   16598:	add	r0, pc, r0
   1659c:	add	r1, pc, r1
   165a0:	add	r3, pc, r3
   165a4:	bl	12498 <__assert_fail@plt>
   165a8:	andeq	r2, r0, sp, lsl r9
   165ac:	andeq	r2, r0, r6, ror #9
   165b0:	andeq	r2, r0, lr, lsl #31

000165b4 <flatcc_builder_offset_vector_edit@@Base>:
   165b4:	ldr	r0, [r0, #16]
   165b8:	bx	lr

000165bc <flatcc_builder_offset_vector_count@@Base>:
   165bc:	ldr	r0, [r0, #32]
   165c0:	ldr	r0, [r0, #20]
   165c4:	bx	lr

000165c8 <flatcc_builder_table_add_union@@Base>:
   165c8:	push	{r4, r5, r6, r7, fp, lr}
   165cc:	add	fp, sp, #16
   165d0:	mov	r5, r0
   165d4:	ldr	r0, [r0, #32]
   165d8:	ldrh	r0, [r0, #14]
   165dc:	cmp	r0, #3
   165e0:	bne	16668 <flatcc_builder_table_add_union@@Base+0xa0>
   165e4:	mov	r7, r3
   165e8:	mov	r4, r2
   165ec:	mov	r6, r1
   165f0:	cmp	r3, #0
   165f4:	beq	16604 <flatcc_builder_table_add_union@@Base+0x3c>
   165f8:	uxtb	r0, r4
   165fc:	cmp	r0, #0
   16600:	beq	16688 <flatcc_builder_table_add_union@@Base+0xc0>
   16604:	cmp	r7, #0
   16608:	beq	16624 <flatcc_builder_table_add_union@@Base+0x5c>
   1660c:	mov	r0, r5
   16610:	mov	r1, r6
   16614:	bl	166f8 <flatcc_builder_table_add_offset@@Base>
   16618:	cmp	r0, #0
   1661c:	beq	166a8 <flatcc_builder_table_add_union@@Base+0xe0>
   16620:	str	r7, [r0]
   16624:	sub	r1, r6, #1
   16628:	mov	r0, r5
   1662c:	mov	r2, #1
   16630:	mov	r3, #1
   16634:	bl	168ac <flatcc_builder_table_add@@Base>
   16638:	cmp	r0, #0
   1663c:	strbne	r4, [r0]
   16640:	movne	r0, #0
   16644:	popne	{r4, r5, r6, r7, fp, pc}
   16648:	ldr	r0, [pc, #156]	; 166ec <flatcc_builder_table_add_union@@Base+0x124>
   1664c:	ldr	r1, [pc, #156]	; 166f0 <flatcc_builder_table_add_union@@Base+0x128>
   16650:	ldr	r3, [pc, #156]	; 166f4 <flatcc_builder_table_add_union@@Base+0x12c>
   16654:	movw	r2, #1526	; 0x5f6
   16658:	add	r0, pc, r0
   1665c:	add	r1, pc, r1
   16660:	add	r3, pc, r3
   16664:	bl	12498 <__assert_fail@plt>
   16668:	ldr	r0, [pc, #88]	; 166c8 <flatcc_builder_table_add_union@@Base+0x100>
   1666c:	ldr	r1, [pc, #88]	; 166cc <flatcc_builder_table_add_union@@Base+0x104>
   16670:	ldr	r3, [pc, #88]	; 166d0 <flatcc_builder_table_add_union@@Base+0x108>
   16674:	movw	r2, #1518	; 0x5ee
   16678:	add	r0, pc, r0
   1667c:	add	r1, pc, r1
   16680:	add	r3, pc, r3
   16684:	bl	12498 <__assert_fail@plt>
   16688:	ldr	r0, [pc, #68]	; 166d4 <flatcc_builder_table_add_union@@Base+0x10c>
   1668c:	ldr	r1, [pc, #68]	; 166d8 <flatcc_builder_table_add_union@@Base+0x110>
   16690:	ldr	r3, [pc, #68]	; 166dc <flatcc_builder_table_add_union@@Base+0x114>
   16694:	movw	r2, #1519	; 0x5ef
   16698:	add	r0, pc, r0
   1669c:	add	r1, pc, r1
   166a0:	add	r3, pc, r3
   166a4:	bl	12498 <__assert_fail@plt>
   166a8:	ldr	r0, [pc, #48]	; 166e0 <flatcc_builder_table_add_union@@Base+0x118>
   166ac:	ldr	r1, [pc, #48]	; 166e4 <flatcc_builder_table_add_union@@Base+0x11c>
   166b0:	ldr	r3, [pc, #48]	; 166e8 <flatcc_builder_table_add_union@@Base+0x120>
   166b4:	movw	r2, #1522	; 0x5f2
   166b8:	add	r0, pc, r0
   166bc:	add	r1, pc, r1
   166c0:	add	r3, pc, r3
   166c4:	bl	12498 <__assert_fail@plt>
   166c8:	andeq	r2, r0, r6, lsr ip
   166cc:	andeq	r2, r0, r6, lsl #8
   166d0:	andeq	r2, r0, r0, lsr #30
   166d4:	andeq	r2, r0, r0, ror #30
   166d8:	andeq	r2, r0, r6, ror #7
   166dc:	andeq	r2, r0, r0, lsl #30
   166e0:	andeq	r2, r0, r2, ror #30
   166e4:	andeq	r2, r0, r6, asr #7
   166e8:	andeq	r2, r0, r0, ror #29
   166ec:	andeq	r2, r0, ip, asr #31
   166f0:	andeq	r2, r0, r6, lsr #8
   166f4:	andeq	r2, r0, r0, asr #30

000166f8 <flatcc_builder_table_add_offset@@Base>:
   166f8:	push	{r4, r5, r6, r7, fp, lr}
   166fc:	add	fp, sp, #16
   16700:	sub	sp, sp, #8
   16704:	mov	r4, r0
   16708:	ldr	r0, [r0, #32]
   1670c:	ldrh	r0, [r0, #14]
   16710:	cmp	r0, #3
   16714:	bne	16828 <flatcc_builder_table_add_offset@@Base+0x130>
   16718:	movw	r0, #32765	; 0x7ffd
   1671c:	mov	r5, r1
   16720:	cmp	r1, r0
   16724:	bcs	16848 <flatcc_builder_table_add_offset@@Base+0x150>
   16728:	ldr	r0, [r4, #4]
   1672c:	add	r1, r0, r5, lsl #1
   16730:	ldrh	r1, [r1]
   16734:	cmp	r1, #0
   16738:	bne	16868 <flatcc_builder_table_add_offset@@Base+0x170>
   1673c:	ldr	r2, [r4, #20]
   16740:	ldr	r1, [r4, #12]
   16744:	ldr	r3, [r4, #24]
   16748:	add	r2, r2, #3
   1674c:	eor	r1, r1, r5
   16750:	bic	r6, r2, #3
   16754:	movw	r2, #31153	; 0x79b1
   16758:	movt	r2, #40503	; 0x9e37
   1675c:	add	r7, r6, #4
   16760:	cmp	r7, r3
   16764:	str	r7, [r4, #20]
   16768:	mul	r1, r1, r2
   1676c:	eor	r1, r1, #4
   16770:	mul	r1, r1, r2
   16774:	str	r1, [r4, #12]
   16778:	bls	167ec <flatcc_builder_table_add_offset@@Base+0xf4>
   1677c:	ldr	r1, [r4, #28]
   16780:	ldr	r0, [r4, #40]	; 0x28
   16784:	ldr	ip, [r4, #48]	; 0x30
   16788:	mov	r2, #1
   1678c:	mov	r3, #1
   16790:	str	r2, [sp]
   16794:	add	r2, r1, r7
   16798:	add	r1, r4, #60	; 0x3c
   1679c:	blx	ip
   167a0:	mov	r1, r0
   167a4:	mov	r0, #0
   167a8:	cmp	r1, #0
   167ac:	beq	167b8 <flatcc_builder_table_add_offset@@Base+0xc0>
   167b0:	sub	sp, fp, #16
   167b4:	pop	{r4, r5, r6, r7, fp, pc}
   167b8:	ldr	r0, [r4, #28]
   167bc:	ldr	r2, [r4, #60]	; 0x3c
   167c0:	ldr	r3, [r4, #64]	; 0x40
   167c4:	ldr	r1, [r4, #32]
   167c8:	add	r2, r2, r0
   167cc:	sub	r0, r3, r0
   167d0:	str	r2, [r4, #16]
   167d4:	movw	r2, #65532	; 0xfffc
   167d8:	cmp	r0, r2
   167dc:	movcs	r0, r2
   167e0:	str	r0, [r4, #24]
   167e4:	str	r2, [r1, #4]
   167e8:	ldr	r0, [r4, #4]
   167ec:	uxth	r1, r5
   167f0:	add	r0, r0, r1, lsl #1
   167f4:	strh	r7, [r0]
   167f8:	ldrh	r0, [r4, #8]
   167fc:	cmp	r0, r1
   16800:	addls	r0, r5, #1
   16804:	strhls	r0, [r4, #8]
   16808:	ldr	r0, [r4]
   1680c:	add	r1, r0, #2
   16810:	str	r1, [r4]
   16814:	strh	r6, [r0]
   16818:	ldr	r0, [r4, #16]
   1681c:	add	r0, r0, r6
   16820:	sub	sp, fp, #16
   16824:	pop	{r4, r5, r6, r7, fp, pc}
   16828:	ldr	r0, [pc, #88]	; 16888 <flatcc_builder_table_add_offset@@Base+0x190>
   1682c:	ldr	r1, [pc, #88]	; 1688c <flatcc_builder_table_add_offset@@Base+0x194>
   16830:	ldr	r3, [pc, #88]	; 16890 <flatcc_builder_table_add_offset@@Base+0x198>
   16834:	movw	r2, #1811	; 0x713
   16838:	add	r0, pc, r0
   1683c:	add	r1, pc, r1
   16840:	add	r3, pc, r3
   16844:	bl	12498 <__assert_fail@plt>
   16848:	ldr	r0, [pc, #68]	; 16894 <flatcc_builder_table_add_offset@@Base+0x19c>
   1684c:	ldr	r1, [pc, #68]	; 16898 <flatcc_builder_table_add_offset@@Base+0x1a0>
   16850:	ldr	r3, [pc, #68]	; 1689c <flatcc_builder_table_add_offset@@Base+0x1a4>
   16854:	movw	r2, #1812	; 0x714
   16858:	add	r0, pc, r0
   1685c:	add	r1, pc, r1
   16860:	add	r3, pc, r3
   16864:	bl	12498 <__assert_fail@plt>
   16868:	ldr	r0, [pc, #48]	; 168a0 <flatcc_builder_table_add_offset@@Base+0x1a8>
   1686c:	ldr	r1, [pc, #48]	; 168a4 <flatcc_builder_table_add_offset@@Base+0x1ac>
   16870:	ldr	r3, [pc, #48]	; 168a8 <flatcc_builder_table_add_offset@@Base+0x1b0>
   16874:	movw	r2, #1819	; 0x71b
   16878:	add	r0, pc, r0
   1687c:	add	r1, pc, r1
   16880:	add	r3, pc, r3
   16884:	bl	12498 <__assert_fail@plt>
   16888:	andeq	r2, r0, r6, ror sl
   1688c:	andeq	r2, r0, r6, asr #4
   16890:	andeq	r3, r0, r2, ror #2
   16894:	andeq	r3, r0, sl, asr #1
   16898:	andeq	r2, r0, r6, lsr #4
   1689c:	andeq	r3, r0, r2, asr #2
   168a0:	andeq	r3, r0, r7, asr #7
   168a4:	andeq	r2, r0, r6, lsl #4
   168a8:	andeq	r3, r0, r2, lsr #2

000168ac <flatcc_builder_table_add@@Base>:
   168ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   168b0:	add	fp, sp, #24
   168b4:	sub	sp, sp, #8
   168b8:	mov	r4, r0
   168bc:	ldr	r0, [r0, #32]
   168c0:	ldrh	r0, [r0, #14]
   168c4:	cmp	r0, #3
   168c8:	bne	169e8 <flatcc_builder_table_add@@Base+0x13c>
   168cc:	movw	r0, #32765	; 0x7ffd
   168d0:	mov	r8, r1
   168d4:	cmp	r1, r0
   168d8:	bcs	16a08 <flatcc_builder_table_add@@Base+0x15c>
   168dc:	ldrh	r0, [r4, #130]	; 0x82
   168e0:	cmp	r0, r3
   168e4:	strhcc	r3, [r4, #130]	; 0x82
   168e8:	ldr	r0, [r4, #4]
   168ec:	add	r1, r0, r8, lsl #1
   168f0:	ldrh	r1, [r1]
   168f4:	cmp	r1, #0
   168f8:	bne	16a28 <flatcc_builder_table_add@@Base+0x17c>
   168fc:	ldr	r1, [r4, #12]
   16900:	movw	r7, #31153	; 0x79b1
   16904:	ldr	r6, [r4, #20]
   16908:	ldr	r5, [r4, #24]
   1690c:	movt	r7, #40503	; 0x9e37
   16910:	eor	r1, r1, r8
   16914:	mul	r1, r1, r7
   16918:	eor	r1, r1, r2
   1691c:	mul	r1, r1, r7
   16920:	str	r1, [r4, #12]
   16924:	add	r1, r3, r6
   16928:	rsb	r3, r3, #0
   1692c:	sub	r1, r1, #1
   16930:	and	r6, r1, r3
   16934:	add	r1, r6, r2
   16938:	cmp	r1, r5
   1693c:	str	r1, [r4, #20]
   16940:	bcc	169b8 <flatcc_builder_table_add@@Base+0x10c>
   16944:	ldr	r2, [r4, #28]
   16948:	ldr	r0, [r4, #40]	; 0x28
   1694c:	ldr	r7, [r4, #48]	; 0x30
   16950:	mov	r3, #1
   16954:	str	r3, [sp]
   16958:	mov	r3, #1
   1695c:	add	r1, r1, r2
   16960:	add	r2, r1, #1
   16964:	add	r1, r4, #60	; 0x3c
   16968:	blx	r7
   1696c:	mov	r1, r0
   16970:	mov	r0, #0
   16974:	cmp	r1, #0
   16978:	beq	16984 <flatcc_builder_table_add@@Base+0xd8>
   1697c:	sub	sp, fp, #24
   16980:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16984:	ldr	r0, [r4, #28]
   16988:	ldr	r2, [r4, #60]	; 0x3c
   1698c:	ldr	r3, [r4, #64]	; 0x40
   16990:	ldr	r1, [r4, #32]
   16994:	add	r2, r2, r0
   16998:	sub	r0, r3, r0
   1699c:	str	r2, [r4, #16]
   169a0:	movw	r2, #65532	; 0xfffc
   169a4:	cmp	r0, r2
   169a8:	movcs	r0, r2
   169ac:	str	r0, [r4, #24]
   169b0:	str	r2, [r1, #4]
   169b4:	ldr	r0, [r4, #4]
   169b8:	uxth	r1, r8
   169bc:	add	r2, r6, #4
   169c0:	add	r0, r0, r1, lsl #1
   169c4:	strh	r2, [r0]
   169c8:	ldrh	r0, [r4, #8]
   169cc:	cmp	r0, r1
   169d0:	addls	r0, r8, #1
   169d4:	strhls	r0, [r4, #8]
   169d8:	ldr	r0, [r4, #16]
   169dc:	add	r0, r0, r6
   169e0:	sub	sp, fp, #24
   169e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169e8:	ldr	r0, [pc, #88]	; 16a48 <flatcc_builder_table_add@@Base+0x19c>
   169ec:	ldr	r1, [pc, #88]	; 16a4c <flatcc_builder_table_add@@Base+0x1a0>
   169f0:	ldr	r3, [pc, #88]	; 16a50 <flatcc_builder_table_add@@Base+0x1a4>
   169f4:	movw	r2, #1773	; 0x6ed
   169f8:	add	r0, pc, r0
   169fc:	add	r1, pc, r1
   16a00:	add	r3, pc, r3
   16a04:	bl	12498 <__assert_fail@plt>
   16a08:	ldr	r0, [pc, #68]	; 16a54 <flatcc_builder_table_add@@Base+0x1a8>
   16a0c:	ldr	r1, [pc, #68]	; 16a58 <flatcc_builder_table_add@@Base+0x1ac>
   16a10:	ldr	r3, [pc, #68]	; 16a5c <flatcc_builder_table_add@@Base+0x1b0>
   16a14:	movw	r2, #1774	; 0x6ee
   16a18:	add	r0, pc, r0
   16a1c:	add	r1, pc, r1
   16a20:	add	r3, pc, r3
   16a24:	bl	12498 <__assert_fail@plt>
   16a28:	ldr	r0, [pc, #48]	; 16a60 <flatcc_builder_table_add@@Base+0x1b4>
   16a2c:	ldr	r1, [pc, #48]	; 16a64 <flatcc_builder_table_add@@Base+0x1b8>
   16a30:	ldr	r3, [pc, #48]	; 16a68 <flatcc_builder_table_add@@Base+0x1bc>
   16a34:	movw	r2, #1784	; 0x6f8
   16a38:	add	r0, pc, r0
   16a3c:	add	r1, pc, r1
   16a40:	add	r3, pc, r3
   16a44:	bl	12498 <__assert_fail@plt>
   16a48:			; <UNDEFINED> instruction: 0x000028b6
   16a4c:	andeq	r2, r0, r6, lsl #1
   16a50:	ldrdeq	r2, [r0], -r8
   16a54:	andeq	r2, r0, sl, lsl #30
   16a58:	andeq	r2, r0, r6, rrx
   16a5c:			; <UNDEFINED> instruction: 0x00002eb8
   16a60:	andeq	r3, r0, r7, lsl #4
   16a64:	andeq	r2, r0, r6, asr #32
   16a68:	muleq	r0, r8, lr

00016a6c <flatcc_builder_table_add_union_vector@@Base>:
   16a6c:	push	{r4, r5, r6, r7, fp, lr}
   16a70:	add	fp, sp, #16
   16a74:	mov	r6, r0
   16a78:	ldr	r0, [r0, #32]
   16a7c:	ldrh	r0, [r0, #14]
   16a80:	cmp	r0, #3
   16a84:	bne	16af0 <flatcc_builder_table_add_union_vector@@Base+0x84>
   16a88:	mov	r5, r1
   16a8c:	clz	r1, r3
   16a90:	cmp	r2, #0
   16a94:	mov	r0, r2
   16a98:	mov	r4, r3
   16a9c:	mov	r7, r2
   16aa0:	movwne	r0, #1
   16aa4:	lsr	r1, r1, #5
   16aa8:	teq	r1, r0
   16aac:	beq	16b10 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   16ab0:	cmp	r7, #0
   16ab4:	beq	16ae8 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   16ab8:	sub	r1, r5, #1
   16abc:	mov	r0, r6
   16ac0:	bl	166f8 <flatcc_builder_table_add_offset@@Base>
   16ac4:	cmp	r0, #0
   16ac8:	beq	16b30 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   16acc:	str	r7, [r0]
   16ad0:	mov	r0, r6
   16ad4:	mov	r1, r5
   16ad8:	bl	166f8 <flatcc_builder_table_add_offset@@Base>
   16adc:	cmp	r0, #0
   16ae0:	beq	16b50 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   16ae4:	str	r4, [r0]
   16ae8:	mov	r0, #0
   16aec:	pop	{r4, r5, r6, r7, fp, pc}
   16af0:	ldr	r0, [pc, #120]	; 16b70 <flatcc_builder_table_add_union_vector@@Base+0x104>
   16af4:	ldr	r1, [pc, #120]	; 16b74 <flatcc_builder_table_add_union_vector@@Base+0x108>
   16af8:	ldr	r3, [pc, #120]	; 16b78 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16afc:	mov	r2, #1536	; 0x600
   16b00:	add	r0, pc, r0
   16b04:	add	r1, pc, r1
   16b08:	add	r3, pc, r3
   16b0c:	bl	12498 <__assert_fail@plt>
   16b10:	ldr	r0, [pc, #100]	; 16b7c <flatcc_builder_table_add_union_vector@@Base+0x110>
   16b14:	ldr	r1, [pc, #100]	; 16b80 <flatcc_builder_table_add_union_vector@@Base+0x114>
   16b18:	ldr	r3, [pc, #100]	; 16b84 <flatcc_builder_table_add_union_vector@@Base+0x118>
   16b1c:	movw	r2, #1537	; 0x601
   16b20:	add	r0, pc, r0
   16b24:	add	r1, pc, r1
   16b28:	add	r3, pc, r3
   16b2c:	bl	12498 <__assert_fail@plt>
   16b30:	ldr	r0, [pc, #80]	; 16b88 <flatcc_builder_table_add_union_vector@@Base+0x11c>
   16b34:	ldr	r1, [pc, #80]	; 16b8c <flatcc_builder_table_add_union_vector@@Base+0x120>
   16b38:	ldr	r3, [pc, #80]	; 16b90 <flatcc_builder_table_add_union_vector@@Base+0x124>
   16b3c:	movw	r2, #1540	; 0x604
   16b40:	add	r0, pc, r0
   16b44:	add	r1, pc, r1
   16b48:	add	r3, pc, r3
   16b4c:	bl	12498 <__assert_fail@plt>
   16b50:	ldr	r0, [pc, #60]	; 16b94 <flatcc_builder_table_add_union_vector@@Base+0x128>
   16b54:	ldr	r1, [pc, #60]	; 16b98 <flatcc_builder_table_add_union_vector@@Base+0x12c>
   16b58:	ldr	r3, [pc, #60]	; 16b9c <flatcc_builder_table_add_union_vector@@Base+0x130>
   16b5c:	movw	r2, #1544	; 0x608
   16b60:	add	r0, pc, r0
   16b64:	add	r1, pc, r1
   16b68:	add	r3, pc, r3
   16b6c:	bl	12498 <__assert_fail@plt>
   16b70:	andeq	r2, r0, lr, lsr #15
   16b74:	andeq	r1, r0, lr, ror pc
   16b78:	andeq	r2, r0, r8, lsr #22
   16b7c:	andeq	r2, r0, r3, ror fp
   16b80:	andeq	r1, r0, lr, asr pc
   16b84:	andeq	r2, r0, r8, lsl #22
   16b88:	ldrdeq	r2, [r0], -sl
   16b8c:	andeq	r1, r0, lr, lsr pc
   16b90:	andeq	r2, r0, r8, ror #21
   16b94:			; <UNDEFINED> instruction: 0x00002aba
   16b98:	andeq	r1, r0, lr, lsl pc
   16b9c:	andeq	r2, r0, r8, asr #21

00016ba0 <flatcc_builder_create_union_vector@@Base>:
   16ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ba4:	add	fp, sp, #28
   16ba8:	sub	sp, sp, #12
   16bac:	mov	r6, #0
   16bb0:	mov	r4, r1
   16bb4:	mov	r8, r0
   16bb8:	mov	sl, r3
   16bbc:	mov	r9, r2
   16bc0:	mov	r7, #4
   16bc4:	str	r6, [r0]
   16bc8:	str	r6, [r0, #4]
   16bcc:	mov	r0, r1
   16bd0:	mov	r1, #4
   16bd4:	bl	13ef4 <flatcc_builder_start_buffer@@Base+0xc0>
   16bd8:	cmp	r0, #0
   16bdc:	beq	16be8 <flatcc_builder_create_union_vector@@Base+0x48>
   16be0:	sub	sp, fp, #28
   16be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16be8:	ldr	r0, [r4, #32]
   16bec:	mov	r1, #5
   16bf0:	str	r7, [r0, #16]
   16bf4:	ldr	r0, [r4, #32]
   16bf8:	str	r6, [r0, #20]
   16bfc:	ldr	r0, [r4, #32]
   16c00:	strh	r1, [r0, #14]
   16c04:	ldr	r1, [r4, #28]
   16c08:	ldr	r2, [r4, #60]	; 0x3c
   16c0c:	ldr	r3, [r4, #64]	; 0x40
   16c10:	add	r2, r2, r1
   16c14:	sub	r1, r3, r1
   16c18:	str	r2, [r4, #16]
   16c1c:	mvn	r2, #3
   16c20:	cmn	r1, #4
   16c24:	movcs	r1, r2
   16c28:	str	r1, [r4, #24]
   16c2c:	str	r2, [r0, #4]
   16c30:	ldr	r1, [r0, #20]
   16c34:	adds	r1, r1, sl
   16c38:	cmpcc	r1, #1073741824	; 0x40000000
   16c3c:	bcc	16c60 <flatcc_builder_create_union_vector@@Base+0xc0>
   16c40:	ldr	r0, [pc, #644]	; 16ecc <flatcc_builder_create_union_vector@@Base+0x32c>
   16c44:	ldr	r1, [pc, #644]	; 16ed0 <flatcc_builder_create_union_vector@@Base+0x330>
   16c48:	ldr	r3, [pc, #644]	; 16ed4 <flatcc_builder_create_union_vector@@Base+0x334>
   16c4c:	mov	r2, #892	; 0x37c
   16c50:	add	r0, pc, r0
   16c54:	add	r1, pc, r1
   16c58:	add	r3, pc, r3
   16c5c:	bl	12498 <__assert_fail@plt>
   16c60:	str	r1, [r0, #20]
   16c64:	ldr	r7, [r4, #20]
   16c68:	ldr	r0, [r4, #24]
   16c6c:	add	r1, r7, sl, lsl #2
   16c70:	cmp	r1, r0
   16c74:	str	r1, [r4, #20]
   16c78:	bcs	16c8c <flatcc_builder_create_union_vector@@Base+0xec>
   16c7c:	ldr	r1, [r4, #16]
   16c80:	adds	r2, r1, r7
   16c84:	bne	16cf4 <flatcc_builder_create_union_vector@@Base+0x154>
   16c88:	b	16be0 <flatcc_builder_create_union_vector@@Base+0x40>
   16c8c:	ldr	r2, [r4, #28]
   16c90:	ldr	r0, [r4, #40]	; 0x28
   16c94:	ldr	r6, [r4, #48]	; 0x30
   16c98:	mov	r3, #1
   16c9c:	str	r3, [sp]
   16ca0:	mov	r3, #1
   16ca4:	add	r1, r1, r2
   16ca8:	add	r2, r1, #1
   16cac:	add	r1, r4, #60	; 0x3c
   16cb0:	blx	r6
   16cb4:	cmp	r0, #0
   16cb8:	bne	16be0 <flatcc_builder_create_union_vector@@Base+0x40>
   16cbc:	ldr	r0, [r4, #28]
   16cc0:	ldr	r1, [r4, #60]	; 0x3c
   16cc4:	ldr	r3, [r4, #64]	; 0x40
   16cc8:	ldr	r2, [r4, #32]
   16ccc:	add	r1, r1, r0
   16cd0:	sub	r0, r3, r0
   16cd4:	mvn	r3, #3
   16cd8:	cmn	r0, #4
   16cdc:	str	r1, [r4, #16]
   16ce0:	movcs	r0, r3
   16ce4:	str	r0, [r4, #24]
   16ce8:	str	r3, [r2, #4]
   16cec:	adds	r2, r1, r7
   16cf0:	beq	16be0 <flatcc_builder_create_union_vector@@Base+0x40>
   16cf4:	ldr	r7, [r4, #20]
   16cf8:	add	r2, r7, sl
   16cfc:	cmp	r2, r0
   16d00:	str	r2, [r4, #20]
   16d04:	bcc	16d68 <flatcc_builder_create_union_vector@@Base+0x1c8>
   16d08:	ldr	r1, [r4, #28]
   16d0c:	ldr	r0, [r4, #40]	; 0x28
   16d10:	ldr	r6, [r4, #48]	; 0x30
   16d14:	mov	r3, #1
   16d18:	str	r3, [sp]
   16d1c:	mov	r3, #1
   16d20:	add	r1, r2, r1
   16d24:	add	r2, r1, #1
   16d28:	add	r1, r4, #60	; 0x3c
   16d2c:	blx	r6
   16d30:	cmp	r0, #0
   16d34:	bne	16be0 <flatcc_builder_create_union_vector@@Base+0x40>
   16d38:	ldr	r0, [r4, #28]
   16d3c:	ldr	r1, [r4, #60]	; 0x3c
   16d40:	ldr	r3, [r4, #64]	; 0x40
   16d44:	ldr	r2, [r4, #32]
   16d48:	add	r1, r1, r0
   16d4c:	sub	r0, r3, r0
   16d50:	mvn	r3, #3
   16d54:	cmn	r0, #4
   16d58:	str	r1, [r4, #16]
   16d5c:	movcs	r0, r3
   16d60:	str	r0, [r4, #24]
   16d64:	str	r3, [r2, #4]
   16d68:	adds	r5, r1, r7
   16d6c:	beq	16be0 <flatcc_builder_create_union_vector@@Base+0x40>
   16d70:	cmp	sl, #0
   16d74:	beq	16dfc <flatcc_builder_create_union_vector@@Base+0x25c>
   16d78:	and	ip, sl, #1
   16d7c:	mov	r0, #0
   16d80:	cmp	sl, #1
   16d84:	str	r5, [sp, #8]
   16d88:	beq	16de0 <flatcc_builder_create_union_vector@@Base+0x240>
   16d8c:	ldr	r0, [sp, #8]
   16d90:	sub	lr, sl, ip
   16d94:	add	r2, r1, #4
   16d98:	add	r6, r9, #8
   16d9c:	add	r7, r0, #1
   16da0:	mov	r0, #0
   16da4:	ldrb	r3, [r6, #-8]
   16da8:	add	r5, r7, r0
   16dac:	strb	r3, [r5, #-1]
   16db0:	add	r3, r9, r0, lsl #3
   16db4:	ldr	r5, [r3, #4]
   16db8:	str	r5, [r2, #-4]
   16dbc:	ldrb	r5, [r6]
   16dc0:	add	r6, r6, #16
   16dc4:	strb	r5, [r7, r0]
   16dc8:	add	r0, r0, #2
   16dcc:	ldr	r3, [r3, #12]
   16dd0:	cmp	lr, r0
   16dd4:	str	r3, [r2]
   16dd8:	add	r2, r2, #8
   16ddc:	bne	16da4 <flatcc_builder_create_union_vector@@Base+0x204>
   16de0:	ldr	r5, [sp, #8]
   16de4:	cmp	ip, #0
   16de8:	beq	16dfc <flatcc_builder_create_union_vector@@Base+0x25c>
   16dec:	ldrb	r2, [r9, r0, lsl #3]!
   16df0:	strb	r2, [r5, r0]
   16df4:	ldr	r2, [r9, #4]
   16df8:	str	r2, [r1, r0, lsl #2]
   16dfc:	mov	r0, r4
   16e00:	mov	r2, sl
   16e04:	mov	r3, r5
   16e08:	bl	16290 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16e0c:	mov	r7, r0
   16e10:	mov	r6, #0
   16e14:	cmp	r0, #0
   16e18:	beq	16e44 <flatcc_builder_create_union_vector@@Base+0x2a4>
   16e1c:	mvn	r0, #0
   16e20:	mov	r1, #1
   16e24:	mov	r2, sl
   16e28:	mov	r3, #1
   16e2c:	str	r1, [sp]
   16e30:	str	r0, [sp, #4]
   16e34:	mov	r0, r4
   16e38:	mov	r1, r5
   16e3c:	bl	15ffc <flatcc_builder_create_vector@@Base>
   16e40:	b	16e48 <flatcc_builder_create_union_vector@@Base+0x2a8>
   16e44:	mov	r0, #0
   16e48:	orr	r1, r6, r7
   16e4c:	stm	r8, {r0, r1}
   16e50:	mov	r1, #0
   16e54:	ldr	r0, [r4, #16]
   16e58:	ldr	r2, [r4, #20]
   16e5c:	bl	12468 <memset@plt>
   16e60:	ldr	r0, [r4, #32]
   16e64:	ldr	r1, [r4, #60]	; 0x3c
   16e68:	ldr	r2, [r4, #64]	; 0x40
   16e6c:	ldr	r3, [r0, #8]
   16e70:	str	r3, [r4, #20]
   16e74:	ldr	r3, [r0]
   16e78:	str	r3, [r4, #28]
   16e7c:	add	r1, r1, r3
   16e80:	ldr	r7, [r0, #4]
   16e84:	str	r1, [r4, #16]
   16e88:	sub	r1, r2, r3
   16e8c:	cmp	r1, r7
   16e90:	movhi	r1, r7
   16e94:	str	r1, [r4, #24]
   16e98:	ldrh	r1, [r4, #130]	; 0x82
   16e9c:	ldrh	r2, [r4, #128]	; 0x80
   16ea0:	cmp	r2, r1
   16ea4:	strhcc	r1, [r4, #128]	; 0x80
   16ea8:	ldrh	r1, [r0, #12]
   16eac:	sub	r0, r0, #36	; 0x24
   16eb0:	str	r0, [r4, #32]
   16eb4:	strh	r1, [r4, #130]	; 0x82
   16eb8:	ldr	r0, [r4, #156]	; 0x9c
   16ebc:	sub	r0, r0, #1
   16ec0:	str	r0, [r4, #156]	; 0x9c
   16ec4:	sub	sp, fp, #28
   16ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ecc:	strdeq	r2, [r0], -r8
   16ed0:	andeq	r1, r0, lr, lsr #28
   16ed4:	andeq	r2, r0, fp, lsl #30

00016ed8 <flatcc_builder_create_union_vector_direct@@Base>:
   16ed8:	push	{r4, r5, r6, r7, fp, lr}
   16edc:	add	fp, sp, #16
   16ee0:	sub	sp, sp, #8
   16ee4:	ldr	r7, [fp, #8]
   16ee8:	mov	r5, r2
   16eec:	mov	r4, r0
   16ef0:	mov	r0, #0
   16ef4:	mov	r6, r1
   16ef8:	str	r0, [r4]
   16efc:	str	r0, [r4, #4]
   16f00:	mov	r0, r1
   16f04:	mov	r1, r3
   16f08:	mov	r3, r5
   16f0c:	mov	r2, r7
   16f10:	bl	16290 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16f14:	cmp	r0, #0
   16f18:	str	r0, [r4, #4]
   16f1c:	beq	16f48 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16f20:	mvn	r0, #0
   16f24:	mov	r1, #1
   16f28:	mov	r2, r7
   16f2c:	mov	r3, #1
   16f30:	str	r1, [sp]
   16f34:	str	r0, [sp, #4]
   16f38:	mov	r0, r6
   16f3c:	mov	r1, r5
   16f40:	bl	15ffc <flatcc_builder_create_vector@@Base>
   16f44:	str	r0, [r4]
   16f48:	sub	sp, fp, #16
   16f4c:	pop	{r4, r5, r6, r7, fp, pc}

00016f50 <flatcc_builder_start_union_vector@@Base>:
   16f50:	push	{r4, sl, fp, lr}
   16f54:	add	fp, sp, #8
   16f58:	mov	r1, #4
   16f5c:	mov	r4, r0
   16f60:	bl	13ef4 <flatcc_builder_start_buffer@@Base+0xc0>
   16f64:	mov	r1, r0
   16f68:	mvn	r0, #0
   16f6c:	cmp	r1, #0
   16f70:	popne	{r4, sl, fp, pc}
   16f74:	ldr	r0, [r4, #32]
   16f78:	mov	r1, #8
   16f7c:	mov	r2, #7
   16f80:	str	r1, [r0, #16]
   16f84:	mov	r0, #0
   16f88:	ldr	r1, [r4, #32]
   16f8c:	str	r0, [r1, #20]
   16f90:	ldr	r1, [r4, #32]
   16f94:	strh	r2, [r1, #14]
   16f98:	ldr	r2, [r4, #28]
   16f9c:	ldr	r3, [r4, #60]	; 0x3c
   16fa0:	ldr	ip, [r4, #64]	; 0x40
   16fa4:	add	r3, r3, r2
   16fa8:	sub	r2, ip, r2
   16fac:	str	r3, [r4, #16]
   16fb0:	mvn	r3, #3
   16fb4:	cmn	r2, #4
   16fb8:	movcs	r2, r3
   16fbc:	str	r2, [r4, #24]
   16fc0:	str	r3, [r1, #4]
   16fc4:	pop	{r4, sl, fp, pc}

00016fc8 <flatcc_builder_end_union_vector@@Base>:
   16fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fcc:	add	fp, sp, #28
   16fd0:	sub	sp, sp, #20
   16fd4:	mov	r4, r0
   16fd8:	mov	r0, #0
   16fdc:	mov	r8, r1
   16fe0:	str	r0, [r4]
   16fe4:	str	r0, [r4, #4]
   16fe8:	ldr	r0, [r1, #32]
   16fec:	ldrh	r1, [r0, #14]
   16ff0:	cmp	r1, #7
   16ff4:	bne	171f8 <flatcc_builder_end_union_vector@@Base+0x230>
   16ff8:	ldr	r9, [r0, #20]
   16ffc:	ldr	r5, [r8, #20]
   17000:	ldr	r2, [r8, #24]
   17004:	add	r0, r9, r9, lsl #2
   17008:	add	r1, r5, r0
   1700c:	cmp	r1, r2
   17010:	str	r1, [r8, #20]
   17014:	bcs	17028 <flatcc_builder_end_union_vector@@Base+0x60>
   17018:	ldr	r0, [r8, #16]
   1701c:	adds	r1, r0, r5
   17020:	bne	17090 <flatcc_builder_end_union_vector@@Base+0xc8>
   17024:	b	171f0 <flatcc_builder_end_union_vector@@Base+0x228>
   17028:	ldr	r2, [r8, #28]
   1702c:	ldr	r0, [r8, #40]	; 0x28
   17030:	ldr	r7, [r8, #48]	; 0x30
   17034:	mov	r3, #1
   17038:	str	r3, [sp]
   1703c:	mov	r3, #1
   17040:	add	r1, r1, r2
   17044:	add	r2, r1, #1
   17048:	add	r1, r8, #60	; 0x3c
   1704c:	blx	r7
   17050:	cmp	r0, #0
   17054:	bne	171f0 <flatcc_builder_end_union_vector@@Base+0x228>
   17058:	ldr	r1, [r8, #28]
   1705c:	ldr	r0, [r8, #60]	; 0x3c
   17060:	ldr	r3, [r8, #64]	; 0x40
   17064:	ldr	r2, [r8, #32]
   17068:	add	r0, r0, r1
   1706c:	sub	r1, r3, r1
   17070:	mvn	r3, #3
   17074:	cmn	r1, #4
   17078:	str	r0, [r8, #16]
   1707c:	movcs	r1, r3
   17080:	str	r1, [r8, #24]
   17084:	str	r3, [r2, #4]
   17088:	adds	r1, r0, r5
   1708c:	beq	171f0 <flatcc_builder_end_union_vector@@Base+0x228>
   17090:	add	sl, r1, r9, lsl #2
   17094:	cmp	r9, #0
   17098:	beq	17128 <flatcc_builder_end_union_vector@@Base+0x160>
   1709c:	and	r2, r9, #1
   170a0:	cmp	r9, #1
   170a4:	str	r4, [sp, #12]
   170a8:	str	r2, [sp, #16]
   170ac:	mov	r2, #0
   170b0:	beq	17108 <flatcc_builder_end_union_vector@@Base+0x140>
   170b4:	ldr	r2, [sp, #16]
   170b8:	add	r5, r5, #4
   170bc:	add	r6, r0, #8
   170c0:	sub	lr, r9, r2
   170c4:	mov	r2, #0
   170c8:	ldrb	r7, [r6, #-8]
   170cc:	mov	r4, sl
   170d0:	add	r3, r0, r2, lsl #3
   170d4:	strb	r7, [r4, r2]!
   170d8:	add	r7, r0, r5
   170dc:	add	r2, r2, #2
   170e0:	ldr	ip, [r3, #4]
   170e4:	cmp	lr, r2
   170e8:	str	ip, [r7, #-4]
   170ec:	ldrb	r7, [r6]
   170f0:	add	r6, r6, #16
   170f4:	strb	r7, [r4, #1]
   170f8:	ldr	r3, [r3, #12]
   170fc:	str	r3, [r0, r5]
   17100:	add	r5, r5, #8
   17104:	bne	170c8 <flatcc_builder_end_union_vector@@Base+0x100>
   17108:	ldr	r3, [sp, #16]
   1710c:	ldr	r4, [sp, #12]
   17110:	cmp	r3, #0
   17114:	beq	17128 <flatcc_builder_end_union_vector@@Base+0x160>
   17118:	ldrb	r3, [r0, r2, lsl #3]!
   1711c:	strb	r3, [sl, r2]
   17120:	ldr	r0, [r0, #4]
   17124:	str	r0, [r1, r2, lsl #2]
   17128:	mov	r0, r8
   1712c:	mov	r2, r9
   17130:	mov	r3, sl
   17134:	bl	16290 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17138:	mov	r5, r0
   1713c:	mov	r6, #0
   17140:	cmp	r0, #0
   17144:	beq	17170 <flatcc_builder_end_union_vector@@Base+0x1a8>
   17148:	mvn	r0, #0
   1714c:	mov	r1, #1
   17150:	mov	r2, r9
   17154:	mov	r3, #1
   17158:	str	r1, [sp]
   1715c:	str	r0, [sp, #4]
   17160:	mov	r0, r8
   17164:	mov	r1, sl
   17168:	bl	15ffc <flatcc_builder_create_vector@@Base>
   1716c:	b	17174 <flatcc_builder_end_union_vector@@Base+0x1ac>
   17170:	mov	r0, #0
   17174:	orr	r1, r6, r5
   17178:	stm	r4, {r0, r1}
   1717c:	mov	r1, #0
   17180:	ldr	r0, [r8, #16]
   17184:	ldr	r2, [r8, #20]
   17188:	bl	12468 <memset@plt>
   1718c:	ldr	r0, [r8, #32]
   17190:	ldr	r1, [r8, #60]	; 0x3c
   17194:	ldr	r2, [r8, #64]	; 0x40
   17198:	ldr	r3, [r0, #8]
   1719c:	str	r3, [r8, #20]
   171a0:	ldr	r3, [r0]
   171a4:	str	r3, [r8, #28]
   171a8:	add	r1, r1, r3
   171ac:	ldr	r7, [r0, #4]
   171b0:	str	r1, [r8, #16]
   171b4:	sub	r1, r2, r3
   171b8:	cmp	r1, r7
   171bc:	movhi	r1, r7
   171c0:	str	r1, [r8, #24]
   171c4:	ldrh	r1, [r8, #130]	; 0x82
   171c8:	ldrh	r2, [r8, #128]	; 0x80
   171cc:	cmp	r2, r1
   171d0:	strhcc	r1, [r8, #128]	; 0x80
   171d4:	ldrh	r1, [r0, #12]
   171d8:	sub	r0, r0, #36	; 0x24
   171dc:	str	r0, [r8, #32]
   171e0:	strh	r1, [r8, #130]	; 0x82
   171e4:	ldr	r0, [r8, #156]	; 0x9c
   171e8:	sub	r0, r0, #1
   171ec:	str	r0, [r8, #156]	; 0x9c
   171f0:	sub	sp, fp, #28
   171f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171f8:	ldr	r0, [pc, #24]	; 17218 <flatcc_builder_end_union_vector@@Base+0x250>
   171fc:	ldr	r1, [pc, #24]	; 1721c <flatcc_builder_end_union_vector@@Base+0x254>
   17200:	ldr	r3, [pc, #24]	; 17220 <flatcc_builder_end_union_vector@@Base+0x258>
   17204:	movw	r2, #1617	; 0x651
   17208:	add	r0, pc, r0
   1720c:	add	r1, pc, r1
   17210:	add	r3, pc, r3
   17214:	bl	12498 <__assert_fail@plt>
   17218:			; <UNDEFINED> instruction: 0x000024b3
   1721c:	andeq	r1, r0, r6, ror r8
   17220:	ldrdeq	r2, [r0], -sp

00017224 <flatcc_builder_union_vector_count@@Base>:
   17224:	ldr	r0, [r0, #32]
   17228:	ldr	r0, [r0, #20]
   1722c:	bx	lr

00017230 <flatcc_builder_union_vector_edit@@Base>:
   17230:	ldr	r0, [r0, #16]
   17234:	bx	lr

00017238 <flatcc_builder_extend_union_vector@@Base>:
   17238:	push	{r4, r5, fp, lr}
   1723c:	add	fp, sp, #8
   17240:	sub	sp, sp, #8
   17244:	mov	r4, r0
   17248:	ldr	r0, [r0, #32]
   1724c:	ldr	r2, [r0, #20]
   17250:	adds	r2, r2, r1
   17254:	cmpcc	r2, #536870912	; 0x20000000
   17258:	bcc	1727c <flatcc_builder_extend_union_vector@@Base+0x44>
   1725c:	ldr	r0, [pc, #184]	; 1731c <flatcc_builder_extend_union_vector@@Base+0xe4>
   17260:	ldr	r1, [pc, #184]	; 17320 <flatcc_builder_extend_union_vector@@Base+0xe8>
   17264:	ldr	r3, [pc, #184]	; 17324 <flatcc_builder_extend_union_vector@@Base+0xec>
   17268:	mov	r2, #892	; 0x37c
   1726c:	add	r0, pc, r0
   17270:	add	r1, pc, r1
   17274:	add	r3, pc, r3
   17278:	bl	12498 <__assert_fail@plt>
   1727c:	str	r2, [r0, #20]
   17280:	ldr	r5, [r4, #20]
   17284:	ldr	r0, [r4, #24]
   17288:	add	r1, r5, r1, lsl #3
   1728c:	cmp	r1, r0
   17290:	str	r1, [r4, #20]
   17294:	bcs	172a0 <flatcc_builder_extend_union_vector@@Base+0x68>
   17298:	ldr	r0, [r4, #16]
   1729c:	b	17310 <flatcc_builder_extend_union_vector@@Base+0xd8>
   172a0:	ldr	r2, [r4, #28]
   172a4:	ldr	r0, [r4, #40]	; 0x28
   172a8:	ldr	ip, [r4, #48]	; 0x30
   172ac:	mov	r3, #1
   172b0:	str	r3, [sp]
   172b4:	mov	r3, #1
   172b8:	add	r1, r1, r2
   172bc:	add	r2, r1, #1
   172c0:	add	r1, r4, #60	; 0x3c
   172c4:	blx	ip
   172c8:	mov	r1, r0
   172cc:	mov	r0, #0
   172d0:	cmp	r1, #0
   172d4:	beq	172e0 <flatcc_builder_extend_union_vector@@Base+0xa8>
   172d8:	sub	sp, fp, #8
   172dc:	pop	{r4, r5, fp, pc}
   172e0:	ldr	r1, [r4, #28]
   172e4:	ldr	r0, [r4, #60]	; 0x3c
   172e8:	ldr	r3, [r4, #64]	; 0x40
   172ec:	ldr	r2, [r4, #32]
   172f0:	add	r0, r0, r1
   172f4:	sub	r1, r3, r1
   172f8:	mvn	r3, #3
   172fc:	cmn	r1, #4
   17300:	str	r0, [r4, #16]
   17304:	movcs	r1, r3
   17308:	str	r1, [r4, #24]
   1730c:	str	r3, [r2, #4]
   17310:	add	r0, r0, r5
   17314:	sub	sp, fp, #8
   17318:	pop	{r4, r5, fp, pc}
   1731c:	ldrdeq	r2, [r0], -ip
   17320:	andeq	r1, r0, r2, lsl r8
   17324:	andeq	r2, r0, pc, ror #17

00017328 <flatcc_builder_truncate_union_vector@@Base>:
   17328:	push	{fp, lr}
   1732c:	mov	fp, sp
   17330:	ldr	r2, [r0, #32]
   17334:	ldrh	r3, [r2, #14]
   17338:	cmp	r3, #7
   1733c:	bne	17384 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   17340:	ldr	r3, [r2, #20]
   17344:	cmp	r3, r1
   17348:	bcc	173a4 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   1734c:	sub	r3, r3, r1
   17350:	str	r3, [r2, #20]
   17354:	ldr	r2, [r0, #32]
   17358:	ldr	r3, [r0, #20]
   1735c:	ldr	ip, [r0, #16]
   17360:	ldr	r2, [r2, #16]
   17364:	mls	r3, r2, r1, r3
   17368:	mul	r2, r2, r1
   1736c:	mov	r1, #0
   17370:	str	r3, [r0, #20]
   17374:	add	r0, ip, r3
   17378:	bl	12468 <memset@plt>
   1737c:	mov	r0, #0
   17380:	pop	{fp, pc}
   17384:	ldr	r0, [pc, #56]	; 173c4 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   17388:	ldr	r1, [pc, #56]	; 173c8 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   1738c:	ldr	r3, [pc, #56]	; 173cc <flatcc_builder_truncate_union_vector@@Base+0xa4>
   17390:	movw	r2, #1665	; 0x681
   17394:	add	r0, pc, r0
   17398:	add	r1, pc, r1
   1739c:	add	r3, pc, r3
   173a0:	bl	12498 <__assert_fail@plt>
   173a4:	ldr	r0, [pc, #36]	; 173d0 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   173a8:	ldr	r1, [pc, #36]	; 173d4 <flatcc_builder_truncate_union_vector@@Base+0xac>
   173ac:	ldr	r3, [pc, #36]	; 173d8 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   173b0:	movw	r2, #1666	; 0x682
   173b4:	add	r0, pc, r0
   173b8:	add	r1, pc, r1
   173bc:	add	r3, pc, r3
   173c0:	bl	12498 <__assert_fail@plt>
   173c4:	andeq	r2, r0, r7, lsr #6
   173c8:	andeq	r1, r0, sl, ror #13
   173cc:	andeq	r2, r0, r4, lsr #7
   173d0:	andeq	r1, r0, fp, ror #26
   173d4:	andeq	r1, r0, sl, asr #13
   173d8:	andeq	r2, r0, r4, lsl #7

000173dc <flatcc_builder_union_vector_push@@Base>:
   173dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   173e0:	add	fp, sp, #24
   173e4:	sub	sp, sp, #8
   173e8:	mov	r7, r0
   173ec:	ldr	r0, [r0, #32]
   173f0:	mov	r9, r1
   173f4:	ldrh	r1, [r0, #14]
   173f8:	cmp	r1, #7
   173fc:	bne	174b8 <flatcc_builder_union_vector_push@@Base+0xdc>
   17400:	ldr	r1, [r0, #20]
   17404:	mov	r6, #0
   17408:	cmn	r1, #-536870911	; 0xe0000001
   1740c:	beq	174ac <flatcc_builder_union_vector_push@@Base+0xd0>
   17410:	add	r1, r1, #1
   17414:	mov	r8, r2
   17418:	str	r1, [r0, #20]
   1741c:	ldr	r4, [r7, #20]
   17420:	ldr	r0, [r7, #24]
   17424:	add	r1, r4, #8
   17428:	cmp	r1, r0
   1742c:	str	r1, [r7, #20]
   17430:	bcs	1743c <flatcc_builder_union_vector_push@@Base+0x60>
   17434:	ldr	r0, [r7, #16]
   17438:	b	1749c <flatcc_builder_union_vector_push@@Base+0xc0>
   1743c:	ldr	r1, [r7, #28]
   17440:	ldr	r0, [r7, #40]	; 0x28
   17444:	ldr	r5, [r7, #48]	; 0x30
   17448:	mov	r2, #1
   1744c:	mov	r3, #1
   17450:	str	r2, [sp]
   17454:	add	r1, r4, r1
   17458:	add	r2, r1, #9
   1745c:	add	r1, r7, #60	; 0x3c
   17460:	blx	r5
   17464:	cmp	r0, #0
   17468:	bne	174ac <flatcc_builder_union_vector_push@@Base+0xd0>
   1746c:	ldr	r1, [r7, #28]
   17470:	ldr	r0, [r7, #60]	; 0x3c
   17474:	ldr	r3, [r7, #64]	; 0x40
   17478:	ldr	r2, [r7, #32]
   1747c:	add	r0, r0, r1
   17480:	sub	r1, r3, r1
   17484:	mvn	r3, #3
   17488:	cmn	r1, #4
   1748c:	str	r0, [r7, #16]
   17490:	movcs	r1, r3
   17494:	str	r1, [r7, #24]
   17498:	str	r3, [r2, #4]
   1749c:	adds	r0, r0, r4
   174a0:	movne	r6, r0
   174a4:	strne	r9, [r0]
   174a8:	strne	r8, [r0, #4]
   174ac:	mov	r0, r6
   174b0:	sub	sp, fp, #24
   174b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   174b8:	ldr	r0, [pc, #24]	; 174d8 <flatcc_builder_union_vector_push@@Base+0xfc>
   174bc:	ldr	r1, [pc, #24]	; 174dc <flatcc_builder_union_vector_push@@Base+0x100>
   174c0:	ldr	r3, [pc, #24]	; 174e0 <flatcc_builder_union_vector_push@@Base+0x104>
   174c4:	movw	r2, #1677	; 0x68d
   174c8:	add	r0, pc, r0
   174cc:	add	r1, pc, r1
   174d0:	add	r3, pc, r3
   174d4:	bl	12498 <__assert_fail@plt>
   174d8:	strdeq	r2, [r0], -r3
   174dc:			; <UNDEFINED> instruction: 0x000015b6
   174e0:			; <UNDEFINED> instruction: 0x000022b5

000174e4 <flatcc_builder_append_union_vector@@Base>:
   174e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   174e8:	add	fp, sp, #24
   174ec:	sub	sp, sp, #8
   174f0:	mov	r6, r0
   174f4:	ldr	r0, [r0, #32]
   174f8:	mov	r8, r1
   174fc:	ldrh	r1, [r0, #14]
   17500:	cmp	r1, #7
   17504:	bne	175f4 <flatcc_builder_append_union_vector@@Base+0x110>
   17508:	ldr	r1, [r0, #20]
   1750c:	mov	r5, r2
   17510:	adds	r1, r1, r2
   17514:	cmpcc	r1, #536870912	; 0x20000000
   17518:	bcc	1753c <flatcc_builder_append_union_vector@@Base+0x58>
   1751c:	ldr	r0, [pc, #252]	; 17620 <flatcc_builder_append_union_vector@@Base+0x13c>
   17520:	ldr	r1, [pc, #252]	; 17624 <flatcc_builder_append_union_vector@@Base+0x140>
   17524:	ldr	r3, [pc, #252]	; 17628 <flatcc_builder_append_union_vector@@Base+0x144>
   17528:	mov	r2, #892	; 0x37c
   1752c:	add	r0, pc, r0
   17530:	add	r1, pc, r1
   17534:	add	r3, pc, r3
   17538:	bl	12498 <__assert_fail@plt>
   1753c:	str	r1, [r0, #20]
   17540:	ldr	r4, [r6, #20]
   17544:	ldr	r0, [r6, #24]
   17548:	add	r1, r4, r5, lsl #3
   1754c:	cmp	r1, r0
   17550:	str	r1, [r6, #20]
   17554:	bcs	17578 <flatcc_builder_append_union_vector@@Base+0x94>
   17558:	ldr	r0, [r6, #16]
   1755c:	adds	r7, r0, r4
   17560:	beq	175e4 <flatcc_builder_append_union_vector@@Base+0x100>
   17564:	lsl	r2, r5, #3
   17568:	mov	r0, r7
   1756c:	mov	r1, r8
   17570:	bl	123e4 <memcpy@plt>
   17574:	b	175e8 <flatcc_builder_append_union_vector@@Base+0x104>
   17578:	ldr	r2, [r6, #28]
   1757c:	ldr	r0, [r6, #40]	; 0x28
   17580:	ldr	r7, [r6, #48]	; 0x30
   17584:	mov	r3, #1
   17588:	str	r3, [sp]
   1758c:	mov	r3, #1
   17590:	add	r1, r1, r2
   17594:	add	r2, r1, #1
   17598:	add	r1, r6, #60	; 0x3c
   1759c:	blx	r7
   175a0:	mov	r7, #0
   175a4:	cmp	r0, #0
   175a8:	bne	175e8 <flatcc_builder_append_union_vector@@Base+0x104>
   175ac:	ldr	r1, [r6, #28]
   175b0:	ldr	r0, [r6, #60]	; 0x3c
   175b4:	ldr	r3, [r6, #64]	; 0x40
   175b8:	ldr	r2, [r6, #32]
   175bc:	add	r0, r0, r1
   175c0:	sub	r1, r3, r1
   175c4:	mvn	r3, #3
   175c8:	cmn	r1, #4
   175cc:	str	r0, [r6, #16]
   175d0:	movcs	r1, r3
   175d4:	str	r1, [r6, #24]
   175d8:	str	r3, [r2, #4]
   175dc:	adds	r7, r0, r4
   175e0:	bne	17564 <flatcc_builder_append_union_vector@@Base+0x80>
   175e4:	mov	r7, #0
   175e8:	mov	r0, r7
   175ec:	sub	sp, fp, #24
   175f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175f4:	ldr	r0, [pc, #24]	; 17614 <flatcc_builder_append_union_vector@@Base+0x130>
   175f8:	ldr	r1, [pc, #24]	; 17618 <flatcc_builder_append_union_vector@@Base+0x134>
   175fc:	ldr	r3, [pc, #24]	; 1761c <flatcc_builder_append_union_vector@@Base+0x138>
   17600:	movw	r2, #1692	; 0x69c
   17604:	add	r0, pc, r0
   17608:	add	r1, pc, r1
   1760c:	add	r3, pc, r3
   17610:	bl	12498 <__assert_fail@plt>
   17614:	strheq	r2, [r0], -r7
   17618:	andeq	r1, r0, sl, ror r4
   1761c:	andeq	r2, r0, r6, ror #3
   17620:	andeq	r2, r0, ip, lsl r6
   17624:	andeq	r1, r0, r2, asr r5
   17628:	andeq	r2, r0, pc, lsr #12

0001762c <flatcc_builder_create_string@@Base>:
   1762c:	push	{r4, r5, r6, sl, fp, lr}
   17630:	add	fp, sp, #16
   17634:	sub	sp, sp, #80	; 0x50
   17638:	str	r2, [fp, #-20]	; 0xffffffec
   1763c:	mvn	r5, r2
   17640:	mov	r6, r0
   17644:	sub	r3, fp, #20
   17648:	cmp	r2, #0
   1764c:	add	lr, sp, #4
   17650:	ldr	ip, [r0, #136]	; 0x88
   17654:	mov	r0, #4
   17658:	str	r0, [sp, #16]
   1765c:	str	r3, [sp, #12]
   17660:	str	r0, [sp, #4]
   17664:	mov	r3, #1
   17668:	addne	r0, r2, #4
   1766c:	str	r3, [sp, #8]
   17670:	strne	r2, [sp, #24]
   17674:	strne	r1, [sp, #20]
   17678:	movne	r3, #2
   1767c:	strne	r3, [sp, #8]
   17680:	strne	r0, [sp, #4]
   17684:	add	r5, ip, r5
   17688:	and	r5, r5, #3
   1768c:	add	r5, r5, #1
   17690:	add	r1, r0, r5
   17694:	add	r0, lr, r3, lsl #3
   17698:	str	r1, [sp, #4]
   1769c:	cmp	r1, #0
   176a0:	ldr	r2, [pc, #132]	; 1772c <flatcc_builder_create_string@@Base+0x100>
   176a4:	ldr	r2, [pc, r2]
   176a8:	str	r2, [r0, #8]
   176ac:	add	r2, r3, #1
   176b0:	str	r5, [r0, #12]
   176b4:	str	r2, [sp, #8]
   176b8:	ble	1770c <flatcc_builder_create_string@@Base+0xe0>
   176bc:	ldr	r0, [r6, #36]	; 0x24
   176c0:	ldr	r4, [r6, #44]	; 0x2c
   176c4:	sub	r5, ip, r1
   176c8:	str	r1, [sp]
   176cc:	add	r1, lr, #8
   176d0:	mov	r3, r5
   176d4:	blx	r4
   176d8:	cmp	r0, #0
   176dc:	streq	r5, [r6, #136]	; 0x88
   176e0:	moveq	r0, r5
   176e4:	subeq	sp, fp, #16
   176e8:	popeq	{r4, r5, r6, sl, fp, pc}
   176ec:	ldr	r0, [pc, #72]	; 1773c <flatcc_builder_create_string@@Base+0x110>
   176f0:	ldr	r1, [pc, #72]	; 17740 <flatcc_builder_create_string@@Base+0x114>
   176f4:	ldr	r3, [pc, #72]	; 17744 <flatcc_builder_create_string@@Base+0x118>
   176f8:	movw	r2, #651	; 0x28b
   176fc:	add	r0, pc, r0
   17700:	add	r1, pc, r1
   17704:	add	r3, pc, r3
   17708:	bl	12498 <__assert_fail@plt>
   1770c:	ldr	r0, [pc, #28]	; 17730 <flatcc_builder_create_string@@Base+0x104>
   17710:	ldr	r1, [pc, #28]	; 17734 <flatcc_builder_create_string@@Base+0x108>
   17714:	ldr	r3, [pc, #28]	; 17738 <flatcc_builder_create_string@@Base+0x10c>
   17718:	movw	r2, #647	; 0x287
   1771c:	add	r0, pc, r0
   17720:	add	r1, pc, r1
   17724:	add	r3, pc, r3
   17728:	bl	12498 <__assert_fail@plt>
   1772c:			; <UNDEFINED> instruction: 0x000129b0
   17730:	andeq	r2, r0, r3, lsr #10
   17734:	andeq	r1, r0, r2, ror #6
   17738:	ldrdeq	r2, [r0], -sl
   1773c:	andeq	r2, r0, r3, asr #10
   17740:	andeq	r1, r0, r2, lsl #7
   17744:	strdeq	r2, [r0], -sl

00017748 <flatcc_builder_create_string_str@@Base>:
   17748:	push	{r4, r5, fp, lr}
   1774c:	add	fp, sp, #8
   17750:	mov	r5, r0
   17754:	mov	r0, r1
   17758:	mov	r4, r1
   1775c:	bl	12450 <strlen@plt>
   17760:	mov	r2, r0
   17764:	mov	r0, r5
   17768:	mov	r1, r4
   1776c:	pop	{r4, r5, fp, lr}
   17770:	b	1762c <flatcc_builder_create_string@@Base>

00017774 <flatcc_builder_create_string_strn@@Base>:
   17774:	push	{r4, r5, r6, sl, fp, lr}
   17778:	add	fp, sp, #16
   1777c:	mov	r6, r0
   17780:	mov	r5, r1
   17784:	mov	r0, r1
   17788:	mov	r1, #0
   1778c:	mov	r4, r2
   17790:	bl	12474 <memchr@plt>
   17794:	cmp	r0, #0
   17798:	mov	r1, r5
   1779c:	subne	r4, r0, r5
   177a0:	mov	r0, r6
   177a4:	mov	r2, r4
   177a8:	pop	{r4, r5, r6, sl, fp, lr}
   177ac:	b	1762c <flatcc_builder_create_string@@Base>

000177b0 <flatcc_builder_end_string@@Base>:
   177b0:	push	{r4, r5, fp, lr}
   177b4:	add	fp, sp, #8
   177b8:	mov	r4, r0
   177bc:	ldr	r0, [r0, #32]
   177c0:	ldrh	r1, [r0, #14]
   177c4:	cmp	r1, #6
   177c8:	bne	17870 <flatcc_builder_end_string@@Base+0xc0>
   177cc:	ldr	r2, [r0, #20]
   177d0:	ldr	r0, [r4, #20]
   177d4:	cmp	r2, r0
   177d8:	bne	17890 <flatcc_builder_end_string@@Base+0xe0>
   177dc:	ldr	r1, [r4, #16]
   177e0:	mov	r0, r4
   177e4:	bl	1762c <flatcc_builder_create_string@@Base>
   177e8:	mov	r5, r0
   177ec:	cmp	r0, #0
   177f0:	beq	17868 <flatcc_builder_end_string@@Base+0xb8>
   177f4:	ldr	r0, [r4, #16]
   177f8:	ldr	r2, [r4, #20]
   177fc:	mov	r1, #0
   17800:	bl	12468 <memset@plt>
   17804:	ldr	r0, [r4, #32]
   17808:	ldr	r1, [r4, #60]	; 0x3c
   1780c:	ldr	ip, [r4, #64]	; 0x40
   17810:	ldr	r3, [r0, #8]
   17814:	str	r3, [r4, #20]
   17818:	ldr	r3, [r0]
   1781c:	str	r3, [r4, #28]
   17820:	add	r1, r1, r3
   17824:	ldr	r2, [r0, #4]
   17828:	str	r1, [r4, #16]
   1782c:	sub	r1, ip, r3
   17830:	cmp	r1, r2
   17834:	movhi	r1, r2
   17838:	str	r1, [r4, #24]
   1783c:	ldrh	r1, [r4, #130]	; 0x82
   17840:	ldrh	r2, [r4, #128]	; 0x80
   17844:	cmp	r2, r1
   17848:	strhcc	r1, [r4, #128]	; 0x80
   1784c:	ldrh	r1, [r0, #12]
   17850:	sub	r0, r0, #36	; 0x24
   17854:	str	r0, [r4, #32]
   17858:	strh	r1, [r4, #130]	; 0x82
   1785c:	ldr	r0, [r4, #156]	; 0x9c
   17860:	sub	r0, r0, #1
   17864:	str	r0, [r4, #156]	; 0x9c
   17868:	mov	r0, r5
   1786c:	pop	{r4, r5, fp, pc}
   17870:	ldr	r0, [pc, #56]	; 178b0 <flatcc_builder_end_string@@Base+0x100>
   17874:	ldr	r1, [pc, #56]	; 178b4 <flatcc_builder_end_string@@Base+0x104>
   17878:	ldr	r3, [pc, #56]	; 178b8 <flatcc_builder_end_string@@Base+0x108>
   1787c:	movw	r2, #1732	; 0x6c4
   17880:	add	r0, pc, r0
   17884:	add	r1, pc, r1
   17888:	add	r3, pc, r3
   1788c:	bl	12498 <__assert_fail@plt>
   17890:	ldr	r0, [pc, #36]	; 178bc <flatcc_builder_end_string@@Base+0x10c>
   17894:	ldr	r1, [pc, #36]	; 178c0 <flatcc_builder_end_string@@Base+0x110>
   17898:	ldr	r3, [pc, #36]	; 178c4 <flatcc_builder_end_string@@Base+0x114>
   1789c:	movw	r2, #1733	; 0x6c5
   178a0:	add	r0, pc, r0
   178a4:	add	r1, pc, r1
   178a8:	add	r3, pc, r3
   178ac:	bl	12498 <__assert_fail@plt>
   178b0:	andeq	r1, r0, lr, lsr r7
   178b4:	strdeq	r1, [r0], -lr
   178b8:	andeq	r1, r0, r9, ror #31
   178bc:	andeq	r2, r0, r4, lsl r0
   178c0:	ldrdeq	r1, [r0], -lr
   178c4:	andeq	r1, r0, r9, asr #31

000178c8 <flatcc_builder_string_edit@@Base>:
   178c8:	ldr	r0, [r0, #16]
   178cc:	bx	lr

000178d0 <flatcc_builder_string_len@@Base>:
   178d0:	ldr	r0, [r0, #32]
   178d4:	ldr	r0, [r0, #20]
   178d8:	bx	lr

000178dc <flatcc_builder_table_edit@@Base>:
   178dc:	push	{fp, lr}
   178e0:	mov	fp, sp
   178e4:	ldr	r2, [r0, #32]
   178e8:	ldrh	r2, [r2, #14]
   178ec:	cmp	r2, #3
   178f0:	ldreq	r2, [r0, #16]
   178f4:	ldreq	r0, [r0, #20]
   178f8:	addeq	r0, r2, r0
   178fc:	subeq	r0, r0, r1
   17900:	popeq	{fp, pc}
   17904:	ldr	r0, [pc, #24]	; 17924 <flatcc_builder_table_edit@@Base+0x48>
   17908:	ldr	r1, [pc, #24]	; 17928 <flatcc_builder_table_edit@@Base+0x4c>
   1790c:	ldr	r3, [pc, #24]	; 1792c <flatcc_builder_table_edit@@Base+0x50>
   17910:	movw	r2, #1794	; 0x702
   17914:	add	r0, pc, r0
   17918:	add	r1, pc, r1
   1791c:	add	r3, pc, r3
   17920:	bl	12498 <__assert_fail@plt>
   17924:	muleq	r0, sl, r9
   17928:	andeq	r1, r0, sl, ror #2
   1792c:	andeq	r2, r0, sl, asr #32

00017930 <flatcc_builder_table_add_copy@@Base>:
   17930:	push	{r4, r5, r6, sl, fp, lr}
   17934:	add	fp, sp, #16
   17938:	mov	r4, r3
   1793c:	ldr	r3, [fp, #8]
   17940:	mov	r5, r2
   17944:	mov	r2, r4
   17948:	bl	168ac <flatcc_builder_table_add@@Base>
   1794c:	mov	r6, r0
   17950:	cmp	r0, #0
   17954:	beq	17968 <flatcc_builder_table_add_copy@@Base+0x38>
   17958:	mov	r0, r6
   1795c:	mov	r1, r5
   17960:	mov	r2, r4
   17964:	bl	123e4 <memcpy@plt>
   17968:	mov	r0, r6
   1796c:	pop	{r4, r5, r6, sl, fp, pc}

00017970 <flatcc_builder_push_buffer_alignment@@Base>:
   17970:	ldrh	r1, [r0, #128]	; 0x80
   17974:	mov	r2, #4
   17978:	strh	r2, [r0, #128]	; 0x80
   1797c:	mov	r0, r1
   17980:	bx	lr

00017984 <flatcc_builder_pop_buffer_alignment@@Base>:
   17984:	ldrh	r2, [r0, #128]	; 0x80
   17988:	cmp	r2, r1
   1798c:	strhcc	r1, [r0, #128]	; 0x80
   17990:	bx	lr

00017994 <flatcc_builder_get_buffer_alignment@@Base>:
   17994:	ldrh	r0, [r0, #128]	; 0x80
   17998:	bx	lr

0001799c <flatcc_builder_set_vtable_clustering@@Base>:
   1799c:	clz	r1, r1
   179a0:	lsr	r1, r1, #5
   179a4:	str	r1, [r0, #180]	; 0xb4
   179a8:	bx	lr

000179ac <flatcc_builder_set_block_align@@Base>:
   179ac:	strh	r1, [r0, #132]	; 0x84
   179b0:	bx	lr

000179b4 <flatcc_builder_get_level@@Base>:
   179b4:	ldr	r0, [r0, #156]	; 0x9c
   179b8:	bx	lr

000179bc <flatcc_builder_set_max_level@@Base>:
   179bc:	str	r1, [r0, #176]	; 0xb0
   179c0:	ldr	r2, [r0, #160]	; 0xa0
   179c4:	cmp	r2, r1
   179c8:	strlt	r1, [r0, #160]	; 0xa0
   179cc:	bx	lr

000179d0 <flatcc_builder_get_buffer_size@@Base>:
   179d0:	ldr	r1, [r0, #136]	; 0x88
   179d4:	ldr	r0, [r0, #140]	; 0x8c
   179d8:	sub	r0, r0, r1
   179dc:	bx	lr

000179e0 <flatcc_builder_get_buffer_start@@Base>:
   179e0:	ldr	r0, [r0, #136]	; 0x88
   179e4:	bx	lr

000179e8 <flatcc_builder_get_buffer_end@@Base>:
   179e8:	ldr	r0, [r0, #140]	; 0x8c
   179ec:	bx	lr

000179f0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   179f0:	str	r1, [r0, #172]	; 0xac
   179f4:	bx	lr

000179f8 <flatcc_builder_set_identifier@@Base>:
   179f8:	ldr	r2, [pc, #20]	; 17a14 <flatcc_builder_set_identifier@@Base+0x1c>
   179fc:	cmp	r1, #0
   17a00:	ldr	r2, [pc, r2]
   17a04:	movne	r2, r1
   17a08:	ldr	r1, [r2]
   17a0c:	str	r1, [r0, #168]	; 0xa8
   17a10:	bx	lr
   17a14:	andeq	r2, r1, r4, asr r6

00017a18 <flatcc_builder_get_type@@Base>:
   17a18:	ldr	r0, [r0, #32]
   17a1c:	cmp	r0, #0
   17a20:	ldrhne	r0, [r0, #14]
   17a24:	moveq	r0, #0
   17a28:	bx	lr

00017a2c <flatcc_builder_get_type_at@@Base>:
   17a2c:	mov	r2, r0
   17a30:	mov	r0, #0
   17a34:	cmp	r1, #1
   17a38:	blt	17a5c <flatcc_builder_get_type_at@@Base+0x30>
   17a3c:	ldr	r3, [r2, #156]	; 0x9c
   17a40:	cmp	r3, r1
   17a44:	bxlt	lr
   17a48:	sub	r0, r1, r3
   17a4c:	ldr	r1, [r2, #32]
   17a50:	add	r0, r0, r0, lsl #3
   17a54:	add	r0, r1, r0, lsl #2
   17a58:	ldrh	r0, [r0, #14]
   17a5c:	bx	lr

00017a60 <flatcc_builder_get_direct_buffer@@Base>:
   17a60:	ldr	r2, [r0, #184]	; 0xb8
   17a64:	cmp	r2, #0
   17a68:	beq	17a7c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17a6c:	ldr	r2, [r0, #188]	; 0xbc
   17a70:	ldr	r3, [r0, #192]	; 0xc0
   17a74:	cmp	r2, r3
   17a78:	beq	17a94 <flatcc_builder_get_direct_buffer@@Base+0x34>
   17a7c:	cmp	r1, #0
   17a80:	moveq	r0, #0
   17a84:	bxeq	lr
   17a88:	mov	r0, #0
   17a8c:	str	r0, [r1]
   17a90:	bx	lr
   17a94:	cmp	r1, #0
   17a98:	ldrne	r2, [r0, #212]	; 0xd4
   17a9c:	strne	r2, [r1]
   17aa0:	ldr	r0, [r0, #196]	; 0xc4
   17aa4:	bx	lr

00017aa8 <flatcc_builder_copy_buffer@@Base>:
   17aa8:	push	{fp, lr}
   17aac:	mov	fp, sp
   17ab0:	ldr	r3, [r0, #184]	; 0xb8
   17ab4:	cmp	r3, #0
   17ab8:	beq	17aec <flatcc_builder_copy_buffer@@Base+0x44>
   17abc:	add	r0, r0, #188	; 0xbc
   17ac0:	bl	181f8 <flatcc_emitter_copy_buffer@@Base>
   17ac4:	cmp	r0, #0
   17ac8:	popne	{fp, pc}
   17acc:	ldr	r0, [pc, #32]	; 17af4 <flatcc_builder_copy_buffer@@Base+0x4c>
   17ad0:	ldr	r1, [pc, #32]	; 17af8 <flatcc_builder_copy_buffer@@Base+0x50>
   17ad4:	ldr	r3, [pc, #32]	; 17afc <flatcc_builder_copy_buffer@@Base+0x54>
   17ad8:	movw	r2, #1926	; 0x786
   17adc:	add	r0, pc, r0
   17ae0:	add	r1, pc, r1
   17ae4:	add	r3, pc, r3
   17ae8:	bl	12498 <__assert_fail@plt>
   17aec:	mov	r0, #0
   17af0:	pop	{fp, pc}
   17af4:	andeq	r0, r0, ip, lsl r9
   17af8:	andeq	r0, r0, r2, lsr #31
   17afc:	andeq	r1, r0, sp, lsl #30

00017b00 <flatcc_builder_finalize_buffer@@Base>:
   17b00:	push	{r4, r5, r6, sl, fp, lr}
   17b04:	add	fp, sp, #16
   17b08:	mov	r5, r0
   17b0c:	ldr	r0, [r0, #136]	; 0x88
   17b10:	cmp	r1, #0
   17b14:	ldr	r2, [r5, #140]	; 0x8c
   17b18:	sub	r4, r2, r0
   17b1c:	mov	r0, r4
   17b20:	strne	r4, [r1]
   17b24:	bl	12420 <malloc@plt>
   17b28:	cmp	r0, #0
   17b2c:	beq	17b7c <flatcc_builder_finalize_buffer@@Base+0x7c>
   17b30:	mov	r6, r0
   17b34:	ldr	r0, [r5, #184]	; 0xb8
   17b38:	cmp	r0, #0
   17b3c:	beq	17b9c <flatcc_builder_finalize_buffer@@Base+0x9c>
   17b40:	add	r0, r5, #188	; 0xbc
   17b44:	mov	r1, r6
   17b48:	mov	r2, r4
   17b4c:	bl	181f8 <flatcc_emitter_copy_buffer@@Base>
   17b50:	cmp	r0, #0
   17b54:	movne	r0, r6
   17b58:	popne	{r4, r5, r6, sl, fp, pc}
   17b5c:	ldr	r0, [pc, #88]	; 17bbc <flatcc_builder_finalize_buffer@@Base+0xbc>
   17b60:	ldr	r1, [pc, #88]	; 17bc0 <flatcc_builder_finalize_buffer@@Base+0xc0>
   17b64:	ldr	r3, [pc, #88]	; 17bc4 <flatcc_builder_finalize_buffer@@Base+0xc4>
   17b68:	movw	r2, #1926	; 0x786
   17b6c:	add	r0, pc, r0
   17b70:	add	r1, pc, r1
   17b74:	add	r3, pc, r3
   17b78:	bl	12498 <__assert_fail@plt>
   17b7c:	ldr	r0, [pc, #80]	; 17bd4 <flatcc_builder_finalize_buffer@@Base+0xd4>
   17b80:	ldr	r1, [pc, #80]	; 17bd8 <flatcc_builder_finalize_buffer@@Base+0xd8>
   17b84:	ldr	r3, [pc, #80]	; 17bdc <flatcc_builder_finalize_buffer@@Base+0xdc>
   17b88:	movw	r2, #1944	; 0x798
   17b8c:	add	r0, pc, r0
   17b90:	add	r1, pc, r1
   17b94:	add	r3, pc, r3
   17b98:	bl	12498 <__assert_fail@plt>
   17b9c:	ldr	r0, [pc, #36]	; 17bc8 <flatcc_builder_finalize_buffer@@Base+0xc8>
   17ba0:	ldr	r1, [pc, #36]	; 17bcc <flatcc_builder_finalize_buffer@@Base+0xcc>
   17ba4:	ldr	r3, [pc, #36]	; 17bd0 <flatcc_builder_finalize_buffer@@Base+0xd0>
   17ba8:	movw	r2, #1948	; 0x79c
   17bac:	add	r0, pc, r0
   17bb0:	add	r1, pc, r1
   17bb4:	add	r3, pc, r3
   17bb8:	bl	12498 <__assert_fail@plt>
   17bbc:	andeq	r0, r0, ip, lsl #17
   17bc0:	andeq	r0, r0, r2, lsl pc
   17bc4:	andeq	r1, r0, sp, ror lr
   17bc8:	muleq	r0, r3, r0
   17bcc:	ldrdeq	r0, [r0], -r2
   17bd0:	andeq	r1, r0, r2, lsl #29
   17bd4:	strheq	r2, [r0], -r3
   17bd8:	strdeq	r0, [r0], -r2
   17bdc:	andeq	r1, r0, r2, lsr #29

00017be0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17be0:	push	{r4, r5, r6, r7, fp, lr}
   17be4:	add	fp, sp, #16
   17be8:	sub	sp, sp, #8
   17bec:	mov	r5, r0
   17bf0:	mov	r4, r1
   17bf4:	ldr	r0, [r0, #136]	; 0x88
   17bf8:	ldr	r1, [r5, #140]	; 0x8c
   17bfc:	cmp	r4, #0
   17c00:	sub	r0, r1, r0
   17c04:	mov	r1, #0
   17c08:	strne	r0, [r4]
   17c0c:	ldrh	r2, [r5, #128]	; 0x80
   17c10:	str	r1, [sp, #4]
   17c14:	add	r0, r0, r2
   17c18:	cmp	r2, #4
   17c1c:	mov	r1, r2
   17c20:	rsb	r2, r2, #0
   17c24:	sub	r0, r0, #1
   17c28:	movls	r1, #4
   17c2c:	and	r7, r0, r2
   17c30:	add	r0, sp, #4
   17c34:	mov	r2, r7
   17c38:	bl	1245c <posix_memalign@plt>
   17c3c:	ldr	r6, [sp, #4]
   17c40:	cmp	r0, #0
   17c44:	cmpne	r6, #0
   17c48:	bne	17c98 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   17c4c:	cmp	r6, #0
   17c50:	beq	17ca0 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   17c54:	ldr	r0, [r5, #184]	; 0xb8
   17c58:	cmp	r0, #0
   17c5c:	beq	17c98 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   17c60:	add	r0, r5, #188	; 0xbc
   17c64:	mov	r1, r6
   17c68:	mov	r2, r7
   17c6c:	bl	181f8 <flatcc_emitter_copy_buffer@@Base>
   17c70:	cmp	r0, #0
   17c74:	bne	17cac <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   17c78:	ldr	r0, [pc, #56]	; 17cb8 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   17c7c:	ldr	r1, [pc, #56]	; 17cbc <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   17c80:	ldr	r3, [pc, #56]	; 17cc0 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   17c84:	movw	r2, #1926	; 0x786
   17c88:	add	r0, pc, r0
   17c8c:	add	r1, pc, r1
   17c90:	add	r3, pc, r3
   17c94:	bl	12498 <__assert_fail@plt>
   17c98:	mov	r0, r6
   17c9c:	bl	123d8 <free@plt>
   17ca0:	mov	r6, #0
   17ca4:	cmp	r4, #0
   17ca8:	strne	r6, [r4]
   17cac:	mov	r0, r6
   17cb0:	sub	sp, fp, #16
   17cb4:	pop	{r4, r5, r6, r7, fp, pc}
   17cb8:	andeq	r0, r0, r0, ror r7
   17cbc:	strdeq	r0, [r0], -r6
   17cc0:	andeq	r1, r0, r1, ror #26

00017cc4 <flatcc_builder_aligned_alloc@@Base>:
   17cc4:	push	{fp, lr}
   17cc8:	mov	fp, sp
   17ccc:	sub	sp, sp, #8
   17cd0:	mov	r2, r1
   17cd4:	mov	r1, r0
   17cd8:	mov	r0, #0
   17cdc:	cmp	r1, #4
   17ce0:	str	r0, [sp, #4]
   17ce4:	add	r0, sp, #4
   17ce8:	movls	r1, #4
   17cec:	bl	1245c <posix_memalign@plt>
   17cf0:	mov	r1, r0
   17cf4:	ldr	r0, [sp, #4]
   17cf8:	cmp	r1, #0
   17cfc:	cmpne	r0, #0
   17d00:	bne	17d0c <flatcc_builder_aligned_alloc@@Base+0x48>
   17d04:	mov	sp, fp
   17d08:	pop	{fp, pc}
   17d0c:	bl	123d8 <free@plt>
   17d10:	mov	r0, #0
   17d14:	str	r0, [sp, #4]
   17d18:	mov	sp, fp
   17d1c:	pop	{fp, pc}

00017d20 <flatcc_builder_aligned_free@@Base>:
   17d20:	b	123d8 <free@plt>

00017d24 <flatcc_builder_get_emit_context@@Base>:
   17d24:	ldr	r0, [r0, #36]	; 0x24
   17d28:	bx	lr

00017d2c <flatcc_emitter_recycle_page@@Base>:
   17d2c:	ldr	r3, [r0]
   17d30:	mov	r2, r0
   17d34:	mvn	r0, #0
   17d38:	cmp	r3, r1
   17d3c:	beq	17d7c <flatcc_emitter_recycle_page@@Base+0x50>
   17d40:	ldr	r2, [r2, #4]
   17d44:	cmp	r2, r1
   17d48:	bxeq	lr
   17d4c:	ldr	r0, [r1, #2944]	; 0xb80
   17d50:	ldr	r2, [r1, #2948]	; 0xb84
   17d54:	str	r2, [r0, #2948]	; 0xb84
   17d58:	ldr	r2, [r1, #2948]	; 0xb84
   17d5c:	str	r0, [r2, #2944]	; 0xb80
   17d60:	ldr	r0, [r3, #2948]	; 0xb84
   17d64:	str	r3, [r1, #2944]	; 0xb80
   17d68:	str	r0, [r1, #2948]	; 0xb84
   17d6c:	str	r1, [r0, #2944]	; 0xb80
   17d70:	ldr	r0, [r1, #2944]	; 0xb80
   17d74:	str	r1, [r0, #2948]	; 0xb84
   17d78:	mov	r0, #0
   17d7c:	bx	lr

00017d80 <flatcc_emitter_reset@@Base>:
   17d80:	push	{r4, sl, fp, lr}
   17d84:	add	fp, sp, #8
   17d88:	ldr	r1, [r0]
   17d8c:	cmp	r1, #0
   17d90:	beq	17e48 <flatcc_emitter_reset@@Base+0xc8>
   17d94:	mov	r4, r0
   17d98:	add	r2, r1, #1472	; 0x5c0
   17d9c:	mov	r0, #1472	; 0x5c0
   17da0:	mov	r3, #0
   17da4:	stmib	r4, {r1, r2}
   17da8:	str	r0, [r4, #12]
   17dac:	str	r2, [r4, #16]
   17db0:	str	r0, [r4, #20]
   17db4:	movw	r0, #64064	; 0xfa40
   17db8:	movt	r0, #65535	; 0xffff
   17dbc:	str	r0, [r1, #2952]	; 0xb88
   17dc0:	ldr	r2, [r4, #32]
   17dc4:	ldr	r0, [r4, #24]
   17dc8:	cmp	r2, #0
   17dcc:	moveq	r2, r0
   17dd0:	streq	r0, [r4, #32]
   17dd4:	str	r3, [r4, #24]
   17dd8:	add	r2, r2, r2, lsl #1
   17ddc:	lsr	r2, r2, #2
   17de0:	add	r0, r2, r0, lsr #2
   17de4:	str	r0, [r4, #32]
   17de8:	ldr	r2, [r4, #28]
   17dec:	cmp	r2, r0, lsl #1
   17df0:	bls	17e48 <flatcc_emitter_reset@@Base+0xc8>
   17df4:	mov	r2, r1
   17df8:	ldr	r0, [r2, #2944]!	; 0xb80
   17dfc:	cmp	r0, r1
   17e00:	popeq	{r4, sl, fp, pc}
   17e04:	ldr	r3, [r0, #2944]	; 0xb80
   17e08:	str	r3, [r2]
   17e0c:	ldr	r2, [r0, #2944]	; 0xb80
   17e10:	str	r1, [r2, #2948]	; 0xb84
   17e14:	bl	123d8 <free@plt>
   17e18:	ldr	r0, [r4, #28]
   17e1c:	ldr	r1, [r4, #32]
   17e20:	sub	r0, r0, #2944	; 0xb80
   17e24:	cmp	r0, r1, lsl #1
   17e28:	str	r0, [r4, #28]
   17e2c:	bls	17e48 <flatcc_emitter_reset@@Base+0xc8>
   17e30:	ldr	r1, [r4, #4]
   17e34:	ldr	r3, [r4]
   17e38:	mov	r2, r1
   17e3c:	ldr	r0, [r2, #2944]!	; 0xb80
   17e40:	cmp	r0, r3
   17e44:	bne	17e04 <flatcc_emitter_reset@@Base+0x84>
   17e48:	pop	{r4, sl, fp, pc}

00017e4c <flatcc_emitter_clear@@Base>:
   17e4c:	push	{r4, r5, r6, sl, fp, lr}
   17e50:	add	fp, sp, #16
   17e54:	ldr	r5, [r0]
   17e58:	cmp	r5, #0
   17e5c:	beq	17eac <flatcc_emitter_clear@@Base+0x60>
   17e60:	mov	r4, r0
   17e64:	ldr	r0, [r5, #2948]	; 0xb84
   17e68:	mov	r6, #0
   17e6c:	str	r6, [r0, #2944]	; 0xb80
   17e70:	ldr	r0, [r5, #2944]	; 0xb80
   17e74:	cmp	r0, #0
   17e78:	beq	17e8c <flatcc_emitter_clear@@Base+0x40>
   17e7c:	mov	r5, r0
   17e80:	ldr	r0, [r0, #2948]	; 0xb84
   17e84:	bl	123d8 <free@plt>
   17e88:	b	17e70 <flatcc_emitter_clear@@Base+0x24>
   17e8c:	mov	r0, r5
   17e90:	bl	123d8 <free@plt>
   17e94:	vmov.i32	q8, #0	; 0x00000000
   17e98:	add	r0, r4, #16
   17e9c:	vst1.32	{d16-d17}, [r0]
   17ea0:	mov	r0, #32
   17ea4:	vst1.32	{d16-d17}, [r4], r0
   17ea8:	str	r6, [r4]
   17eac:	pop	{r4, r5, r6, sl, fp, pc}

00017eb0 <flatcc_emitter@@Base>:
   17eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eb4:	add	fp, sp, #28
   17eb8:	sub	sp, sp, #4
   17ebc:	mov	r6, r0
   17ec0:	mov	r7, r1
   17ec4:	ldr	r0, [r0, #24]
   17ec8:	ldr	r1, [fp, #8]
   17ecc:	mov	r4, r2
   17ed0:	cmn	r3, #1
   17ed4:	mov	r9, r6
   17ed8:	add	r0, r0, r1
   17edc:	str	r0, [r6, #24]
   17ee0:	ble	18034 <flatcc_emitter@@Base+0x184>
   17ee4:	ldr	r0, [r9, #20]!
   17ee8:	cmp	r0, r1
   17eec:	bcs	18194 <flatcc_emitter@@Base+0x2e4>
   17ef0:	mov	r8, #0
   17ef4:	cmp	r4, #0
   17ef8:	beq	181ec <flatcc_emitter@@Base+0x33c>
   17efc:	movw	sl, #64064	; 0xfa40
   17f00:	movt	sl, #65535	; 0xffff
   17f04:	ldr	r8, [r7, #4]
   17f08:	cmp	r8, #0
   17f0c:	beq	18020 <flatcc_emitter@@Base+0x170>
   17f10:	ldr	r9, [r7]
   17f14:	b	17f50 <flatcc_emitter@@Base+0xa0>
   17f18:	mov	r5, r8
   17f1c:	ldr	r0, [r6, #16]
   17f20:	mov	r1, r9
   17f24:	mov	r2, r5
   17f28:	bl	123e4 <memcpy@plt>
   17f2c:	ldr	r0, [r6, #16]
   17f30:	ldr	r1, [r6, #20]
   17f34:	add	r9, r9, r5
   17f38:	subs	r8, r8, r5
   17f3c:	add	r2, r0, r5
   17f40:	sub	r0, r1, r5
   17f44:	str	r2, [r6, #16]
   17f48:	str	r0, [r6, #20]
   17f4c:	beq	18020 <flatcc_emitter@@Base+0x170>
   17f50:	cmp	r8, r0
   17f54:	mov	r5, r8
   17f58:	bls	17f1c <flatcc_emitter@@Base+0x6c>
   17f5c:	mov	r5, r0
   17f60:	cmp	r5, #0
   17f64:	beq	17fb0 <flatcc_emitter@@Base+0x100>
   17f68:	b	17f1c <flatcc_emitter@@Base+0x6c>
   17f6c:	ldr	r1, [r6]
   17f70:	str	r1, [r0, #2944]	; 0xb80
   17f74:	str	r5, [r0, #2948]	; 0xb84
   17f78:	str	r0, [r1, #2948]	; 0xb84
   17f7c:	str	r0, [r5, #2944]	; 0xb80
   17f80:	mov	r5, #2944	; 0xb80
   17f84:	str	r0, [r6, #4]
   17f88:	str	r0, [r6, #16]
   17f8c:	str	r5, [r6, #20]
   17f90:	ldr	r1, [r0, #2948]	; 0xb84
   17f94:	ldr	r1, [r1, #2952]	; 0xb88
   17f98:	add	r1, r1, #2944	; 0xb80
   17f9c:	str	r1, [r0, #2952]	; 0xb88
   17fa0:	cmp	r8, r5
   17fa4:	bls	17f18 <flatcc_emitter@@Base+0x68>
   17fa8:	cmp	r5, #0
   17fac:	bne	17f1c <flatcc_emitter@@Base+0x6c>
   17fb0:	ldr	r5, [r6, #4]
   17fb4:	cmp	r5, #0
   17fb8:	beq	17fcc <flatcc_emitter@@Base+0x11c>
   17fbc:	ldr	r0, [r5, #2944]	; 0xb80
   17fc0:	ldr	r1, [r6]
   17fc4:	cmp	r0, r1
   17fc8:	bne	17f80 <flatcc_emitter@@Base+0xd0>
   17fcc:	movw	r0, #2956	; 0xb8c
   17fd0:	bl	12420 <malloc@plt>
   17fd4:	cmp	r0, #0
   17fd8:	beq	181a4 <flatcc_emitter@@Base+0x2f4>
   17fdc:	ldr	r1, [r6, #28]
   17fe0:	cmp	r5, #0
   17fe4:	add	r1, r1, #2944	; 0xb80
   17fe8:	str	r1, [r6, #28]
   17fec:	bne	17f6c <flatcc_emitter@@Base+0xbc>
   17ff0:	add	r1, r0, #1472	; 0x5c0
   17ff4:	mov	r5, #1472	; 0x5c0
   17ff8:	str	r0, [r6]
   17ffc:	stmib	r6, {r0, r1, r5}
   18000:	str	r1, [r6, #16]
   18004:	str	r5, [r6, #20]
   18008:	str	r0, [r0, #2944]	; 0xb80
   1800c:	str	r0, [r0, #2948]	; 0xb84
   18010:	str	sl, [r0, #2952]	; 0xb88
   18014:	cmp	r8, r5
   18018:	bhi	17fa8 <flatcc_emitter@@Base+0xf8>
   1801c:	b	17f18 <flatcc_emitter@@Base+0x68>
   18020:	subs	r4, r4, #1
   18024:	add	r7, r7, #8
   18028:	bne	17f04 <flatcc_emitter@@Base+0x54>
   1802c:	mov	r8, #0
   18030:	b	181ec <flatcc_emitter@@Base+0x33c>
   18034:	ldr	r0, [r9, #12]!
   18038:	cmp	r0, r1
   1803c:	bcs	181ac <flatcc_emitter@@Base+0x2fc>
   18040:	mov	r8, #0
   18044:	cmp	r4, #0
   18048:	beq	181ec <flatcc_emitter@@Base+0x33c>
   1804c:	add	r0, r7, r4, lsl #3
   18050:	ldr	sl, [r0, #-4]
   18054:	sub	r1, r0, #8
   18058:	str	r1, [sp]
   1805c:	cmp	sl, #0
   18060:	beq	18184 <flatcc_emitter@@Base+0x2d4>
   18064:	ldr	r0, [sp]
   18068:	ldr	r0, [r0]
   1806c:	add	r7, r0, sl
   18070:	ldr	r1, [r9]
   18074:	cmp	sl, r1
   18078:	bhi	180b8 <flatcc_emitter@@Base+0x208>
   1807c:	b	18154 <flatcc_emitter@@Base+0x2a4>
   18080:	ldr	r1, [r5, #2952]	; 0xb88
   18084:	sub	r1, r1, #2944	; 0xb80
   18088:	str	r1, [r0, #2952]	; 0xb88
   1808c:	mov	r1, #2944	; 0xb80
   18090:	add	r2, r0, #2944	; 0xb80
   18094:	str	r0, [r6]
   18098:	str	r2, [r6, #8]
   1809c:	str	r1, [r6, #12]
   180a0:	ldr	r2, [r0, #2944]	; 0xb80
   180a4:	ldr	r2, [r2, #2952]	; 0xb88
   180a8:	sub	r2, r2, #2944	; 0xb80
   180ac:	str	r2, [r0, #2952]	; 0xb88
   180b0:	cmp	sl, r1
   180b4:	bls	18154 <flatcc_emitter@@Base+0x2a4>
   180b8:	cmp	r1, #0
   180bc:	mov	r5, r1
   180c0:	bne	18158 <flatcc_emitter@@Base+0x2a8>
   180c4:	ldr	r5, [r6]
   180c8:	cmp	r5, #0
   180cc:	beq	180e0 <flatcc_emitter@@Base+0x230>
   180d0:	ldr	r0, [r5, #2948]	; 0xb84
   180d4:	ldr	r1, [r6, #4]
   180d8:	cmp	r0, r1
   180dc:	bne	18080 <flatcc_emitter@@Base+0x1d0>
   180e0:	movw	r0, #2956	; 0xb8c
   180e4:	bl	12420 <malloc@plt>
   180e8:	cmp	r0, #0
   180ec:	beq	181a4 <flatcc_emitter@@Base+0x2f4>
   180f0:	ldr	r1, [r6, #28]
   180f4:	cmp	r5, #0
   180f8:	add	r1, r1, #2944	; 0xb80
   180fc:	str	r1, [r6, #28]
   18100:	beq	1811c <flatcc_emitter@@Base+0x26c>
   18104:	ldr	r1, [r6, #4]
   18108:	str	r5, [r0, #2944]	; 0xb80
   1810c:	str	r1, [r0, #2948]	; 0xb84
   18110:	str	r0, [r5, #2948]	; 0xb84
   18114:	str	r0, [r1, #2944]	; 0xb80
   18118:	b	1808c <flatcc_emitter@@Base+0x1dc>
   1811c:	add	r2, r0, #1472	; 0x5c0
   18120:	mov	r1, #1472	; 0x5c0
   18124:	str	r0, [r6]
   18128:	stmib	r6, {r0, r2}
   1812c:	str	r1, [r6, #12]
   18130:	str	r2, [r6, #16]
   18134:	movw	r2, #64064	; 0xfa40
   18138:	str	r1, [r6, #20]
   1813c:	str	r0, [r0, #2944]	; 0xb80
   18140:	str	r0, [r0, #2948]	; 0xb84
   18144:	movt	r2, #65535	; 0xffff
   18148:	str	r2, [r0, #2952]	; 0xb88
   1814c:	cmp	sl, r1
   18150:	bhi	180b8 <flatcc_emitter@@Base+0x208>
   18154:	mov	r5, sl
   18158:	sub	r0, r1, r5
   1815c:	sub	r7, r7, r5
   18160:	mov	r2, r5
   18164:	str	r0, [r6, #12]
   18168:	mov	r1, r7
   1816c:	ldr	r0, [r6, #8]
   18170:	sub	r0, r0, r5
   18174:	str	r0, [r6, #8]
   18178:	bl	123e4 <memcpy@plt>
   1817c:	subs	sl, sl, r5
   18180:	bne	18070 <flatcc_emitter@@Base+0x1c0>
   18184:	ldr	r0, [sp]
   18188:	subs	r4, r4, #1
   1818c:	bne	18050 <flatcc_emitter@@Base+0x1a0>
   18190:	b	181ec <flatcc_emitter@@Base+0x33c>
   18194:	ldr	r5, [r6, #16]
   18198:	add	r2, r5, r1
   1819c:	str	r2, [r6, #16]
   181a0:	b	181b8 <flatcc_emitter@@Base+0x308>
   181a4:	mvn	r8, #0
   181a8:	b	181ec <flatcc_emitter@@Base+0x33c>
   181ac:	ldr	r2, [r6, #8]
   181b0:	sub	r5, r2, r1
   181b4:	str	r5, [r6, #8]
   181b8:	sub	r0, r0, r1
   181bc:	mov	r8, #0
   181c0:	cmp	r4, #0
   181c4:	str	r0, [r9]
   181c8:	beq	181ec <flatcc_emitter@@Base+0x33c>
   181cc:	ldm	r7, {r1, r2}
   181d0:	mov	r0, r5
   181d4:	bl	123e4 <memcpy@plt>
   181d8:	ldr	r0, [r7, #4]
   181dc:	add	r7, r7, #8
   181e0:	subs	r4, r4, #1
   181e4:	add	r5, r5, r0
   181e8:	bne	181cc <flatcc_emitter@@Base+0x31c>
   181ec:	mov	r0, r8
   181f0:	sub	sp, fp, #28
   181f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000181f8 <flatcc_emitter_copy_buffer@@Base>:
   181f8:	push	{r4, r5, r6, sl, fp, lr}
   181fc:	add	fp, sp, #16
   18200:	mov	r3, r2
   18204:	ldr	r2, [r0, #24]
   18208:	mov	r5, #0
   1820c:	cmp	r2, r3
   18210:	bhi	18298 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18214:	mov	r4, r0
   18218:	ldr	r0, [r0]
   1821c:	cmp	r0, #0
   18220:	beq	18298 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18224:	mov	r6, r1
   18228:	ldr	r1, [r4, #4]
   1822c:	cmp	r0, r1
   18230:	beq	182a0 <flatcc_emitter_copy_buffer@@Base+0xa8>
   18234:	ldr	r0, [r4, #12]
   18238:	ldr	r1, [r4, #8]
   1823c:	rsb	r5, r0, #2944	; 0xb80
   18240:	mov	r0, r6
   18244:	mov	r2, r5
   18248:	bl	123e4 <memcpy@plt>
   1824c:	ldm	r4, {r0, r1}
   18250:	add	r5, r6, r5
   18254:	ldr	r6, [r0, #2944]	; 0xb80
   18258:	cmp	r6, r1
   1825c:	beq	18284 <flatcc_emitter_copy_buffer@@Base+0x8c>
   18260:	mov	r0, r5
   18264:	mov	r1, r6
   18268:	mov	r2, #2944	; 0xb80
   1826c:	bl	123e4 <memcpy@plt>
   18270:	ldr	r6, [r6, #2944]	; 0xb80
   18274:	ldr	r0, [r4, #4]
   18278:	add	r5, r5, #2944	; 0xb80
   1827c:	cmp	r6, r0
   18280:	bne	18260 <flatcc_emitter_copy_buffer@@Base+0x68>
   18284:	ldr	r0, [r4, #20]
   18288:	mov	r1, r6
   1828c:	rsb	r2, r0, #2944	; 0xb80
   18290:	mov	r0, r5
   18294:	bl	123e4 <memcpy@plt>
   18298:	mov	r0, r5
   1829c:	pop	{r4, r5, r6, sl, fp, pc}
   182a0:	ldr	r1, [r4, #8]
   182a4:	mov	r0, r6
   182a8:	bl	123e4 <memcpy@plt>
   182ac:	mov	r0, r6
   182b0:	pop	{r4, r5, r6, sl, fp, pc}

000182b4 <__libc_csu_init@@Base>:
   182b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   182b8:	mov	r7, r0
   182bc:	ldr	r6, [pc, #72]	; 1830c <__libc_csu_init@@Base+0x58>
   182c0:	ldr	r5, [pc, #72]	; 18310 <__libc_csu_init@@Base+0x5c>
   182c4:	add	r6, pc, r6
   182c8:	add	r5, pc, r5
   182cc:	sub	r6, r6, r5
   182d0:	mov	r8, r1
   182d4:	mov	r9, r2
   182d8:	bl	12394 <strcmp@plt-0x20>
   182dc:	asrs	r6, r6, #2
   182e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   182e4:	mov	r4, #0
   182e8:	add	r4, r4, #1
   182ec:	ldr	r3, [r5], #4
   182f0:	mov	r2, r9
   182f4:	mov	r1, r8
   182f8:	mov	r0, r7
   182fc:	blx	r3
   18300:	cmp	r6, r4
   18304:	bne	182e8 <__libc_csu_init@@Base+0x34>
   18308:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1830c:	andeq	r1, r1, r0, asr #24
   18310:	andeq	r1, r1, r8, lsr ip

00018314 <__libc_csu_fini@@Base>:
   18314:	bx	lr

Disassembly of section .fini:

00018318 <.fini>:
   18318:	push	{r3, lr}
   1831c:	pop	{r3, pc}
