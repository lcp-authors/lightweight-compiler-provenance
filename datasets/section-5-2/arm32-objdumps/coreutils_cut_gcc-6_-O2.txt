
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010d68 <.init>:
   10d68:	push	{r3, lr}
   10d6c:	bl	11458 <__assert_fail@plt+0x424>
   10d70:	pop	{r3, pc}

Disassembly of section .plt:

00010d74 <calloc@plt-0x14>:
   10d74:	push	{lr}		; (str lr, [sp, #-4]!)
   10d78:	ldr	lr, [pc, #4]	; 10d84 <calloc@plt-0x4>
   10d7c:	add	lr, pc, lr
   10d80:	ldr	pc, [lr, #8]!
   10d84:	andeq	r7, r1, ip, ror r2

00010d88 <calloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #636]!	; 0x27c

00010d94 <fputs_unlocked@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #628]!	; 0x274

00010da0 <raise@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #620]!	; 0x26c

00010dac <strcmp@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #612]!	; 0x264

00010db8 <posix_fadvise64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #604]!	; 0x25c

00010dc4 <fflush@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #596]!	; 0x254

00010dd0 <memmove@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #588]!	; 0x24c

00010ddc <free@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #580]!	; 0x244

00010de8 <ferror@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #572]!	; 0x23c

00010df4 <_exit@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #564]!	; 0x234

00010e00 <memcpy@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #556]!	; 0x22c

00010e0c <mbsinit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #548]!	; 0x224

00010e18 <fwrite_unlocked@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #540]!	; 0x21c

00010e24 <memcmp@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #532]!	; 0x214

00010e30 <fputc_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #524]!	; 0x20c

00010e3c <dcgettext@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #516]!	; 0x204

00010e48 <realloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #508]!	; 0x1fc

00010e54 <textdomain@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e60 <iswprint@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #492]!	; 0x1ec

00010e6c <fwrite@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #484]!	; 0x1e4

00010e78 <lseek64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #476]!	; 0x1dc

00010e84 <__ctype_get_mb_cur_max@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e90 <__fpending@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #460]!	; 0x1cc

00010e9c <mbrtowc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea8 <error@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #444]!	; 0x1bc

00010eb4 <malloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #436]!	; 0x1b4

00010ec0 <__libc_start_main@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #428]!	; 0x1ac

00010ecc <__freading@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed8 <__gmon_start__@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #412]!	; 0x19c

00010ee4 <getopt_long@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #404]!	; 0x194

00010ef0 <__ctype_b_loc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #396]!	; 0x18c

00010efc <exit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #388]!	; 0x184

00010f08 <strlen@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #380]!	; 0x17c

00010f14 <ungetc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #372]!	; 0x174

00010f20 <__errno_location@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #364]!	; 0x16c

00010f2c <__cxa_atexit@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #356]!	; 0x164

00010f38 <memset@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #348]!	; 0x15c

00010f44 <fgetc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #340]!	; 0x154

00010f50 <__printf_chk@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #332]!	; 0x14c

00010f5c <fileno@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #324]!	; 0x144

00010f68 <__fprintf_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #316]!	; 0x13c

00010f74 <memchr@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #308]!	; 0x134

00010f80 <fclose@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #300]!	; 0x12c

00010f8c <fseeko64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #292]!	; 0x124

00010f98 <__fread_chk@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #284]!	; 0x11c

00010fa4 <__uflow@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #276]!	; 0x114

00010fb0 <__overflow@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #268]!	; 0x10c

00010fbc <setlocale@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #260]!	; 0x104

00010fc8 <strrchr@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #252]!	; 0xfc

00010fd4 <nl_langinfo@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #244]!	; 0xf4

00010fe0 <clearerr_unlocked@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #236]!	; 0xec

00010fec <fopen64@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #228]!	; 0xe4

00010ff8 <qsort@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #220]!	; 0xdc

00011004 <bindtextdomain@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #212]!	; 0xd4

00011010 <strncmp@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #204]!	; 0xcc

0001101c <abort@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #196]!	; 0xc4

00011028 <strspn@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #188]!	; 0xbc

00011034 <__assert_fail@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #180]!	; 0xb4

Disassembly of section .text:

00011040 <.text>:
   11040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11044:	mov	r7, r0
   11048:	sub	sp, sp, #28
   1104c:	ldr	r0, [r1]
   11050:	mov	r5, r1
   11054:	bl	12fc8 <__assert_fail@plt+0x1f94>
   11058:	ldr	r1, [pc, #844]	; 113ac <__assert_fail@plt+0x378>
   1105c:	mov	r0, #6
   11060:	bl	10fbc <setlocale@plt>
   11064:	ldr	r1, [pc, #836]	; 113b0 <__assert_fail@plt+0x37c>
   11068:	ldr	r0, [pc, #836]	; 113b4 <__assert_fail@plt+0x380>
   1106c:	bl	11004 <bindtextdomain@plt>
   11070:	ldr	r0, [pc, #828]	; 113b4 <__assert_fail@plt+0x380>
   11074:	bl	10e54 <textdomain@plt>
   11078:	ldr	r0, [pc, #824]	; 113b8 <__assert_fail@plt+0x384>
   1107c:	bl	162e4 <__assert_fail@plt+0x52b0>
   11080:	ldr	r6, [pc, #820]	; 113bc <__assert_fail@plt+0x388>
   11084:	mov	r3, #0
   11088:	ldr	r9, [pc, #816]	; 113c0 <__assert_fail@plt+0x38c>
   1108c:	ldr	r8, [pc, #816]	; 113c4 <__assert_fail@plt+0x390>
   11090:	mov	sl, r3
   11094:	mov	fp, #1
   11098:	str	r3, [sp, #16]
   1109c:	str	r3, [sp, #20]
   110a0:	strb	r3, [r6, #4]
   110a4:	strb	r3, [r6, #16]
   110a8:	strb	r3, [r6, #29]
   110ac:	mov	r4, #0
   110b0:	str	r4, [sp]
   110b4:	mov	r3, r9
   110b8:	mov	r2, r8
   110bc:	mov	r1, r5
   110c0:	mov	r0, r7
   110c4:	bl	10ee4 <getopt_long@plt>
   110c8:	cmn	r0, #1
   110cc:	beq	1122c <__assert_fail@plt+0x1f8>
   110d0:	cmp	r0, #102	; 0x66
   110d4:	beq	11148 <__assert_fail@plt+0x114>
   110d8:	ble	11100 <__assert_fail@plt+0xcc>
   110dc:	cmp	r0, #122	; 0x7a
   110e0:	beq	11220 <__assert_fail@plt+0x1ec>
   110e4:	bgt	11128 <__assert_fail@plt+0xf4>
   110e8:	cmp	r0, #110	; 0x6e
   110ec:	beq	110ac <__assert_fail@plt+0x78>
   110f0:	cmp	r0, #115	; 0x73
   110f4:	bne	11218 <__assert_fail@plt+0x1e4>
   110f8:	strb	fp, [r6, #4]
   110fc:	b	110ac <__assert_fail@plt+0x78>
   11100:	cmp	r0, #99	; 0x63
   11104:	bgt	111c4 <__assert_fail@plt+0x190>
   11108:	cmp	r0, #98	; 0x62
   1110c:	bge	11144 <__assert_fail@plt+0x110>
   11110:	cmn	r0, #3
   11114:	beq	1115c <__assert_fail@plt+0x128>
   11118:	cmn	r0, #2
   1111c:	bne	11218 <__assert_fail@plt+0x1e4>
   11120:	mov	r0, r4
   11124:	bl	11da0 <__assert_fail@plt+0xd6c>
   11128:	cmp	r0, #256	; 0x100
   1112c:	beq	11198 <__assert_fail@plt+0x164>
   11130:	ldr	r3, [pc, #656]	; 113c8 <__assert_fail@plt+0x394>
   11134:	cmp	r0, r3
   11138:	bne	11218 <__assert_fail@plt+0x1e4>
   1113c:	strb	fp, [r6, #30]
   11140:	b	110ac <__assert_fail@plt+0x78>
   11144:	str	fp, [sp, #16]
   11148:	cmp	sl, #0
   1114c:	bne	111f8 <__assert_fail@plt+0x1c4>
   11150:	ldr	r3, [pc, #628]	; 113cc <__assert_fail@plt+0x398>
   11154:	ldr	sl, [r3]
   11158:	b	110ac <__assert_fail@plt+0x78>
   1115c:	ldr	ip, [pc, #620]	; 113d0 <__assert_fail@plt+0x39c>
   11160:	ldr	r1, [pc, #620]	; 113d4 <__assert_fail@plt+0x3a0>
   11164:	ldr	r3, [pc, #620]	; 113d8 <__assert_fail@plt+0x3a4>
   11168:	ldr	r0, [pc, #620]	; 113dc <__assert_fail@plt+0x3a8>
   1116c:	ldr	r2, [pc, #620]	; 113e0 <__assert_fail@plt+0x3ac>
   11170:	str	r4, [sp, #12]
   11174:	ldr	r0, [r0]
   11178:	ldr	r3, [r3]
   1117c:	stmib	sp, {r1, ip}
   11180:	str	r2, [sp]
   11184:	ldr	r1, [pc, #600]	; 113e4 <__assert_fail@plt+0x3b0>
   11188:	ldr	r2, [pc, #600]	; 113e8 <__assert_fail@plt+0x3b4>
   1118c:	bl	152c4 <__assert_fail@plt+0x4290>
   11190:	mov	r0, r4
   11194:	bl	10efc <exit@plt>
   11198:	ldr	r3, [pc, #556]	; 113cc <__assert_fail@plt+0x398>
   1119c:	ldr	r4, [r3]
   111a0:	ldrb	r3, [r4]
   111a4:	cmp	r3, #0
   111a8:	moveq	r0, fp
   111ac:	beq	111b8 <__assert_fail@plt+0x184>
   111b0:	mov	r0, r4
   111b4:	bl	10f08 <strlen@plt>
   111b8:	str	r0, [r6, #20]
   111bc:	str	r4, [r6, #24]
   111c0:	b	110ac <__assert_fail@plt+0x78>
   111c4:	cmp	r0, #100	; 0x64
   111c8:	bne	11218 <__assert_fail@plt+0x1e4>
   111cc:	ldr	r3, [pc, #504]	; 113cc <__assert_fail@plt+0x398>
   111d0:	ldr	r2, [r3]
   111d4:	ldrb	r3, [r2]
   111d8:	cmp	r3, #0
   111dc:	beq	111ec <__assert_fail@plt+0x1b8>
   111e0:	ldrb	r2, [r2, #1]
   111e4:	cmp	r2, #0
   111e8:	bne	113a0 <__assert_fail@plt+0x36c>
   111ec:	strb	r3, [r6, #16]
   111f0:	str	fp, [sp, #20]
   111f4:	b	110ac <__assert_fail@plt+0x78>
   111f8:	ldr	r1, [pc, #492]	; 113ec <__assert_fail@plt+0x3b8>
   111fc:	mov	r2, #5
   11200:	mov	r0, #0
   11204:	bl	10e3c <dcgettext@plt>
   11208:	mov	r1, #0
   1120c:	mov	r2, r0
   11210:	mov	r0, r1
   11214:	bl	10ea8 <error@plt>
   11218:	mov	r0, #1
   1121c:	bl	11da0 <__assert_fail@plt+0xd6c>
   11220:	ldr	r3, [pc, #456]	; 113f0 <__assert_fail@plt+0x3bc>
   11224:	strb	r4, [r3]
   11228:	b	110ac <__assert_fail@plt+0x78>
   1122c:	cmp	sl, r4
   11230:	moveq	r2, #5
   11234:	ldreq	r1, [pc, #440]	; 113f4 <__assert_fail@plt+0x3c0>
   11238:	beq	11200 <__assert_fail@plt+0x1cc>
   1123c:	ldr	r3, [sp, #16]
   11240:	cmp	r3, #0
   11244:	beq	11294 <__assert_fail@plt+0x260>
   11248:	ldr	r3, [sp, #20]
   1124c:	cmp	r3, #0
   11250:	movne	r2, #5
   11254:	ldrne	r1, [pc, #412]	; 113f8 <__assert_fail@plt+0x3c4>
   11258:	bne	11200 <__assert_fail@plt+0x1cc>
   1125c:	ldrb	r3, [r6, #4]
   11260:	cmp	r3, #0
   11264:	movne	r2, #5
   11268:	ldrne	r1, [pc, #396]	; 113fc <__assert_fail@plt+0x3c8>
   1126c:	bne	11200 <__assert_fail@plt+0x1cc>
   11270:	ldrb	r3, [r6, #30]
   11274:	mov	r0, sl
   11278:	cmp	r3, #0
   1127c:	bne	11364 <__assert_fail@plt+0x330>
   11280:	mov	r1, #4
   11284:	bl	121f8 <__assert_fail@plt+0x11c4>
   11288:	mov	r3, #9
   1128c:	strb	r3, [r6, #16]
   11290:	b	112b8 <__assert_fail@plt+0x284>
   11294:	ldrb	r1, [r6, #30]
   11298:	mov	r0, sl
   1129c:	cmp	r1, #0
   112a0:	movne	r1, #2
   112a4:	moveq	r1, #0
   112a8:	bl	121f8 <__assert_fail@plt+0x11c4>
   112ac:	ldr	r3, [sp, #20]
   112b0:	cmp	r3, #0
   112b4:	beq	11288 <__assert_fail@plt+0x254>
   112b8:	ldr	r3, [r6, #24]
   112bc:	cmp	r3, #0
   112c0:	beq	11370 <__assert_fail@plt+0x33c>
   112c4:	ldr	r9, [pc, #308]	; 11400 <__assert_fail@plt+0x3cc>
   112c8:	ldr	r1, [sp, #16]
   112cc:	ldr	r2, [pc, #304]	; 11404 <__assert_fail@plt+0x3d0>
   112d0:	ldr	r3, [r9]
   112d4:	cmp	r1, #0
   112d8:	ldr	r8, [pc, #296]	; 11408 <__assert_fail@plt+0x3d4>
   112dc:	moveq	r8, r2
   112e0:	cmp	r7, r3
   112e4:	beq	1138c <__assert_fail@plt+0x358>
   112e8:	mov	r4, #1
   112ec:	ble	11318 <__assert_fail@plt+0x2e4>
   112f0:	ldr	r0, [r5, r3, lsl #2]
   112f4:	mov	r1, r8
   112f8:	bl	11c9c <__assert_fail@plt+0xc68>
   112fc:	ldr	r3, [r9]
   11300:	add	r3, r3, #1
   11304:	cmp	r7, r3
   11308:	str	r3, [r9]
   1130c:	and	r4, r4, r0
   11310:	uxtb	r4, r4
   11314:	bgt	112f0 <__assert_fail@plt+0x2bc>
   11318:	ldrb	r3, [r6, #29]
   1131c:	cmp	r3, #0
   11320:	bne	11334 <__assert_fail@plt+0x300>
   11324:	eor	r0, r4, #1
   11328:	uxtb	r0, r0
   1132c:	add	sp, sp, #28
   11330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11334:	ldr	r3, [pc, #208]	; 1140c <__assert_fail@plt+0x3d8>
   11338:	ldr	r0, [r3]
   1133c:	bl	12984 <__assert_fail@plt+0x1950>
   11340:	cmn	r0, #1
   11344:	bne	11324 <__assert_fail@plt+0x2f0>
   11348:	bl	10f20 <__errno_location@plt>
   1134c:	mov	r4, #0
   11350:	ldr	r2, [pc, #184]	; 11410 <__assert_fail@plt+0x3dc>
   11354:	ldr	r1, [r0]
   11358:	mov	r0, r4
   1135c:	bl	10ea8 <error@plt>
   11360:	b	11324 <__assert_fail@plt+0x2f0>
   11364:	mov	r1, #6
   11368:	bl	121f8 <__assert_fail@plt+0x11c4>
   1136c:	b	11288 <__assert_fail@plt+0x254>
   11370:	ldrb	r1, [r6, #16]
   11374:	ldr	r2, [pc, #152]	; 11414 <__assert_fail@plt+0x3e0>
   11378:	mov	r3, #1
   1137c:	strb	r1, [r6, #28]
   11380:	str	r2, [r6, #24]
   11384:	str	r3, [r6, #20]
   11388:	b	112c4 <__assert_fail@plt+0x290>
   1138c:	mov	r1, r8
   11390:	ldr	r0, [pc, #120]	; 11410 <__assert_fail@plt+0x3dc>
   11394:	bl	11c9c <__assert_fail@plt+0xc68>
   11398:	mov	r4, r0
   1139c:	b	11318 <__assert_fail@plt+0x2e4>
   113a0:	mov	r2, #5
   113a4:	ldr	r1, [pc, #108]	; 11418 <__assert_fail@plt+0x3e4>
   113a8:	b	11200 <__assert_fail@plt+0x1cc>
   113ac:	ldrdeq	r6, [r1], -ip
   113b0:	andeq	r6, r1, r0, lsl #23
   113b4:	ldrdeq	r6, [r1], -r8
   113b8:	andeq	r2, r1, r0, ror #16
   113bc:	andeq	r8, r2, r8, ror r1
   113c0:	andeq	r6, r1, ip, asr #6
   113c4:	andeq	r6, r1, r4, lsl ip
   113c8:	andeq	r0, r0, r1, lsl #2
   113cc:	andeq	r8, r2, r0, ror r1
   113d0:	andeq	r6, r1, r4, ror #23
   113d4:	strdeq	r6, [r1], -r4
   113d8:	andeq	r8, r2, r4, lsl #2
   113dc:	andeq	r8, r2, ip, ror #2
   113e0:	andeq	r6, r1, r4, lsl #24
   113e4:	andeq	r6, r1, r8, lsl r4
   113e8:	ldrdeq	r6, [r1], -r4
   113ec:	muleq	r1, r8, fp
   113f0:	andeq	r8, r2, r0, lsl #2
   113f4:	andeq	r6, r1, r0, lsr #24
   113f8:	andeq	r6, r1, r8, asr ip
   113fc:	muleq	r1, ip, ip
   11400:	andeq	r8, r2, r8, asr r1
   11404:	andeq	r1, r1, r4, asr #10
   11408:	ldrdeq	r1, [r1], -r0
   1140c:	andeq	r8, r2, r8, ror #2
   11410:	andeq	r6, r1, r4, ror #28
   11414:	muleq	r2, r4, r1
   11418:			; <UNDEFINED> instruction: 0x00016bb8
   1141c:	mov	fp, #0
   11420:	mov	lr, #0
   11424:	pop	{r1}		; (ldr r1, [sp], #4)
   11428:	mov	r2, sp
   1142c:	push	{r2}		; (str r2, [sp, #-4]!)
   11430:	push	{r0}		; (str r0, [sp, #-4]!)
   11434:	ldr	ip, [pc, #16]	; 1144c <__assert_fail@plt+0x418>
   11438:	push	{ip}		; (str ip, [sp, #-4]!)
   1143c:	ldr	r0, [pc, #12]	; 11450 <__assert_fail@plt+0x41c>
   11440:	ldr	r3, [pc, #12]	; 11454 <__assert_fail@plt+0x420>
   11444:	bl	10ec0 <__libc_start_main@plt>
   11448:	bl	1101c <abort@plt>
   1144c:	andeq	r6, r1, r0, ror #5
   11450:	andeq	r1, r1, r0, asr #32
   11454:	andeq	r6, r1, r0, lsl #5
   11458:	ldr	r3, [pc, #20]	; 11474 <__assert_fail@plt+0x440>
   1145c:	ldr	r2, [pc, #20]	; 11478 <__assert_fail@plt+0x444>
   11460:	add	r3, pc, r3
   11464:	ldr	r2, [r3, r2]
   11468:	cmp	r2, #0
   1146c:	bxeq	lr
   11470:	b	10ed8 <__gmon_start__@plt>
   11474:	muleq	r1, r8, fp
   11478:	strdeq	r0, [r0], -r4
   1147c:	ldr	r3, [pc, #28]	; 114a0 <__assert_fail@plt+0x46c>
   11480:	ldr	r0, [pc, #28]	; 114a4 <__assert_fail@plt+0x470>
   11484:	sub	r3, r3, r0
   11488:	cmp	r3, #6
   1148c:	bxls	lr
   11490:	ldr	r3, [pc, #16]	; 114a8 <__assert_fail@plt+0x474>
   11494:	cmp	r3, #0
   11498:	bxeq	lr
   1149c:	bx	r3
   114a0:	andeq	r8, r2, pc, asr #2
   114a4:	andeq	r8, r2, ip, asr #2
   114a8:	andeq	r0, r0, r0
   114ac:	ldr	r1, [pc, #36]	; 114d8 <__assert_fail@plt+0x4a4>
   114b0:	ldr	r0, [pc, #36]	; 114dc <__assert_fail@plt+0x4a8>
   114b4:	sub	r1, r1, r0
   114b8:	asr	r1, r1, #2
   114bc:	add	r1, r1, r1, lsr #31
   114c0:	asrs	r1, r1, #1
   114c4:	bxeq	lr
   114c8:	ldr	r3, [pc, #16]	; 114e0 <__assert_fail@plt+0x4ac>
   114cc:	cmp	r3, #0
   114d0:	bxeq	lr
   114d4:	bx	r3
   114d8:	andeq	r8, r2, ip, asr #2
   114dc:	andeq	r8, r2, ip, asr #2
   114e0:	andeq	r0, r0, r0
   114e4:	push	{r4, lr}
   114e8:	ldr	r4, [pc, #24]	; 11508 <__assert_fail@plt+0x4d4>
   114ec:	ldrb	r3, [r4]
   114f0:	cmp	r3, #0
   114f4:	popne	{r4, pc}
   114f8:	bl	1147c <__assert_fail@plt+0x448>
   114fc:	mov	r3, #1
   11500:	strb	r3, [r4]
   11504:	pop	{r4, pc}
   11508:	andeq	r8, r2, r4, ror r1
   1150c:	ldr	r0, [pc, #40]	; 1153c <__assert_fail@plt+0x508>
   11510:	ldr	r3, [r0]
   11514:	cmp	r3, #0
   11518:	bne	11520 <__assert_fail@plt+0x4ec>
   1151c:	b	114ac <__assert_fail@plt+0x478>
   11520:	ldr	r3, [pc, #24]	; 11540 <__assert_fail@plt+0x50c>
   11524:	cmp	r3, #0
   11528:	beq	1151c <__assert_fail@plt+0x4e8>
   1152c:	push	{r4, lr}
   11530:	blx	r3
   11534:	pop	{r4, lr}
   11538:	b	114ac <__assert_fail@plt+0x478>
   1153c:	andeq	r7, r2, r4, lsl pc
   11540:	andeq	r0, r0, r0
   11544:	ldr	r2, [pc, #1376]	; 11aac <__assert_fail@plt+0xa78>
   11548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1154c:	mov	r4, r0
   11550:	ldr	r3, [r0, #4]
   11554:	ldr	r1, [r0, #8]
   11558:	ldr	r5, [pc, #1360]	; 11ab0 <__assert_fail@plt+0xa7c>
   1155c:	ldr	r2, [r2]
   11560:	cmp	r3, r1
   11564:	sub	sp, sp, #28
   11568:	str	r2, [r5]
   1156c:	bcs	11a6c <__assert_fail@plt+0xa38>
   11570:	add	r2, r3, #1
   11574:	str	r2, [r0, #4]
   11578:	ldrb	r0, [r3]
   1157c:	mov	r1, r4
   11580:	bl	10f14 <ungetc@plt>
   11584:	ldr	r3, [r5]
   11588:	mov	r2, #0
   1158c:	mov	r6, r2
   11590:	str	r2, [sp, #16]
   11594:	ldrd	r2, [r3]
   11598:	ldrb	fp, [r5, #4]
   1159c:	ldr	r7, [pc, #1296]	; 11ab4 <__assert_fail@plt+0xa80>
   115a0:	cmp	r3, #0
   115a4:	cmpeq	r2, #1
   115a8:	movhi	r3, #1
   115ac:	movls	r3, r6
   115b0:	ldr	r8, [pc, #1280]	; 11ab8 <__assert_fail@plt+0xa84>
   115b4:	eor	r3, r3, fp
   115b8:	mov	sl, #1
   115bc:	mov	fp, #0
   115c0:	str	r3, [sp, #20]
   115c4:	cmp	fp, #0
   115c8:	ldr	r3, [sp, #20]
   115cc:	cmpeq	sl, #1
   115d0:	movne	r9, #0
   115d4:	andeq	r9, r3, #1
   115d8:	cmp	r9, #0
   115dc:	bne	11740 <__assert_fail@plt+0x70c>
   115e0:	ldr	r1, [r5]
   115e4:	ldrd	r2, [r1]
   115e8:	cmp	r3, fp
   115ec:	cmpeq	r2, sl
   115f0:	bhi	116dc <__assert_fail@plt+0x6a8>
   115f4:	ldr	r3, [sp, #16]
   115f8:	cmp	r3, #0
   115fc:	beq	11668 <__assert_fail@plt+0x634>
   11600:	ldr	r3, [r8]
   11604:	ldr	r2, [r5, #20]
   11608:	mov	r1, #1
   1160c:	ldr	r0, [r5, #24]
   11610:	bl	10e18 <fwrite_unlocked@plt>
   11614:	b	11668 <__assert_fail@plt+0x634>
   11618:	add	r2, r3, #1
   1161c:	str	r2, [r4, #4]
   11620:	ldrb	r9, [r3]
   11624:	ldrb	r3, [r5, #16]
   11628:	cmp	r3, r9
   1162c:	beq	11690 <__assert_fail@plt+0x65c>
   11630:	ldrb	r2, [r7]
   11634:	cmp	r2, r9
   11638:	beq	118c4 <__assert_fail@plt+0x890>
   1163c:	cmn	r9, #1
   11640:	beq	118f4 <__assert_fail@plt+0x8c0>
   11644:	ldr	r0, [r8]
   11648:	ldr	r3, [r0, #20]
   1164c:	ldr	r2, [r0, #24]
   11650:	cmp	r3, r2
   11654:	addcc	r2, r3, #1
   11658:	strcc	r2, [r0, #20]
   1165c:	strbcc	r9, [r3]
   11660:	bcs	11734 <__assert_fail@plt+0x700>
   11664:	mov	r6, r9
   11668:	ldr	r3, [r4, #4]
   1166c:	ldr	r2, [r4, #8]
   11670:	cmp	r3, r2
   11674:	bcc	11618 <__assert_fail@plt+0x5e4>
   11678:	mov	r0, r4
   1167c:	bl	10fa4 <__uflow@plt>
   11680:	ldrb	r3, [r5, #16]
   11684:	mov	r9, r0
   11688:	cmp	r3, r9
   1168c:	bne	11630 <__assert_fail@plt+0x5fc>
   11690:	ldrb	r3, [r7]
   11694:	cmp	r3, r9
   11698:	beq	1195c <__assert_fail@plt+0x928>
   1169c:	mov	r3, #1
   116a0:	mov	r6, r9
   116a4:	str	r3, [sp, #16]
   116a8:	b	11710 <__assert_fail@plt+0x6dc>
   116ac:	add	r2, r3, #1
   116b0:	str	r2, [r4, #4]
   116b4:	ldrb	r0, [r3]
   116b8:	ldrb	r3, [r5, #16]
   116bc:	cmp	r3, r0
   116c0:	beq	11700 <__assert_fail@plt+0x6cc>
   116c4:	ldrb	r2, [r7]
   116c8:	cmp	r2, r0
   116cc:	beq	117e4 <__assert_fail@plt+0x7b0>
   116d0:	cmn	r0, #1
   116d4:	beq	1190c <__assert_fail@plt+0x8d8>
   116d8:	mov	r6, r0
   116dc:	ldr	r3, [r4, #4]
   116e0:	ldr	r2, [r4, #8]
   116e4:	cmp	r3, r2
   116e8:	bcc	116ac <__assert_fail@plt+0x678>
   116ec:	mov	r0, r4
   116f0:	bl	10fa4 <__uflow@plt>
   116f4:	ldrb	r3, [r5, #16]
   116f8:	cmp	r3, r0
   116fc:	bne	116c4 <__assert_fail@plt+0x690>
   11700:	ldrb	r3, [r7]
   11704:	cmp	r3, r0
   11708:	movne	r6, r0
   1170c:	beq	11998 <__assert_fail@plt+0x964>
   11710:	ldr	r1, [r5]
   11714:	adds	sl, sl, #1
   11718:	adc	fp, fp, #0
   1171c:	ldrd	r2, [r1, #8]
   11720:	cmp	fp, r3
   11724:	cmpeq	sl, r2
   11728:	addhi	r1, r1, #16
   1172c:	strhi	r1, [r5]
   11730:	b	115c4 <__assert_fail@plt+0x590>
   11734:	uxtb	r1, r9
   11738:	bl	10fb0 <__overflow@plt>
   1173c:	b	11664 <__assert_fail@plt+0x630>
   11740:	ldrb	r2, [r7]
   11744:	ldrb	r3, [r5, #16]
   11748:	ldr	r1, [pc, #876]	; 11abc <__assert_fail@plt+0xa88>
   1174c:	stmib	sp, {r2, r4}
   11750:	str	r3, [sp]
   11754:	mov	r2, #0
   11758:	mvn	r3, #0
   1175c:	add	r0, r1, #4
   11760:	bl	12b7c <__assert_fail@plt+0x1b48>
   11764:	subs	r2, r0, #0
   11768:	blt	11a0c <__assert_fail@plt+0x9d8>
   1176c:	beq	11a98 <__assert_fail@plt+0xa64>
   11770:	ldr	r0, [r5, #12]
   11774:	sub	sl, r2, #1
   11778:	ldrb	r3, [r5, #16]
   1177c:	ldrb	r1, [r0, sl]
   11780:	cmp	r1, r3
   11784:	beq	11924 <__assert_fail@plt+0x8f0>
   11788:	ldrb	r3, [r5, #4]
   1178c:	cmp	r3, #0
   11790:	bne	11914 <__assert_fail@plt+0x8e0>
   11794:	ldr	r3, [r8]
   11798:	mov	r1, #1
   1179c:	bl	10e18 <fwrite_unlocked@plt>
   117a0:	ldr	r3, [r5, #12]
   117a4:	ldrb	r6, [r7]
   117a8:	ldrb	r3, [r3, sl]
   117ac:	cmp	r3, r6
   117b0:	moveq	r6, r3
   117b4:	beq	117d8 <__assert_fail@plt+0x7a4>
   117b8:	ldr	r0, [r8]
   117bc:	ldr	r3, [r0, #20]
   117c0:	ldr	r2, [r0, #24]
   117c4:	cmp	r3, r2
   117c8:	addcc	r2, r3, #1
   117cc:	strcc	r2, [r0, #20]
   117d0:	strbcc	r6, [r3]
   117d4:	bcs	11a2c <__assert_fail@plt+0x9f8>
   117d8:	mov	sl, #1
   117dc:	mov	fp, #0
   117e0:	b	115c4 <__assert_fail@plt+0x590>
   117e4:	cmp	r3, r2
   117e8:	mov	ip, r6
   117ec:	mov	r6, r0
   117f0:	beq	118dc <__assert_fail@plt+0x8a8>
   117f4:	cmp	r6, r3
   117f8:	beq	11710 <__assert_fail@plt+0x6dc>
   117fc:	ldrb	r1, [r7]
   11800:	cmn	r6, #1
   11804:	movne	r0, #0
   11808:	moveq	r0, #1
   1180c:	sub	r2, r1, r6
   11810:	clz	r2, r2
   11814:	lsr	r2, r2, #5
   11818:	orrs	lr, r0, r2
   1181c:	beq	115c4 <__assert_fail@plt+0x590>
   11820:	ldr	lr, [sp, #16]
   11824:	str	r0, [sp, #16]
   11828:	cmp	lr, #0
   1182c:	bne	1184c <__assert_fail@plt+0x818>
   11830:	ldrb	r0, [r5, #4]
   11834:	cmp	fp, #0
   11838:	cmpeq	sl, #1
   1183c:	eor	r0, r0, #1
   11840:	orrne	r0, r0, #1
   11844:	cmp	r0, #0
   11848:	beq	11868 <__assert_fail@plt+0x834>
   1184c:	subs	ip, ip, r1
   11850:	movne	ip, #1
   11854:	cmp	r3, r1
   11858:	movne	r3, ip
   1185c:	orreq	r3, ip, #1
   11860:	orrs	r3, r2, r3
   11864:	bne	1188c <__assert_fail@plt+0x858>
   11868:	ldr	r3, [sp, #16]
   1186c:	cmp	r3, #0
   11870:	bne	118bc <__assert_fail@plt+0x888>
   11874:	ldr	r3, [pc, #560]	; 11aac <__assert_fail@plt+0xa78>
   11878:	mov	sl, #1
   1187c:	mov	fp, #0
   11880:	ldr	r3, [r3]
   11884:	str	r3, [r5]
   11888:	b	115c4 <__assert_fail@plt+0x590>
   1188c:	ldr	r0, [r8]
   11890:	ldr	r3, [r0, #20]
   11894:	ldr	r2, [r0, #24]
   11898:	cmp	r3, r2
   1189c:	addcc	r2, r3, #1
   118a0:	strcc	r2, [r0, #20]
   118a4:	strbcc	r1, [r3]
   118a8:	bcc	11868 <__assert_fail@plt+0x834>
   118ac:	bl	10fb0 <__overflow@plt>
   118b0:	ldr	r3, [sp, #16]
   118b4:	cmp	r3, #0
   118b8:	beq	11874 <__assert_fail@plt+0x840>
   118bc:	add	sp, sp, #28
   118c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118c4:	mov	r1, #1
   118c8:	cmp	r3, r2
   118cc:	mov	ip, r6
   118d0:	str	r1, [sp, #16]
   118d4:	mov	r6, r9
   118d8:	bne	117f4 <__assert_fail@plt+0x7c0>
   118dc:	cmp	r6, r3
   118e0:	moveq	r6, ip
   118e4:	moveq	r9, r3
   118e8:	beq	11964 <__assert_fail@plt+0x930>
   118ec:	ldrb	r3, [r5, #16]
   118f0:	b	117fc <__assert_fail@plt+0x7c8>
   118f4:	mov	ip, r6
   118f8:	mov	r3, #1
   118fc:	str	r3, [sp, #16]
   11900:	ldrb	r3, [r5, #16]
   11904:	mvn	r6, #0
   11908:	b	117fc <__assert_fail@plt+0x7c8>
   1190c:	mov	ip, r6
   11910:	b	11900 <__assert_fail@plt+0x8cc>
   11914:	mov	sl, #1
   11918:	mov	fp, #0
   1191c:	mov	r6, #0
   11920:	b	115c4 <__assert_fail@plt+0x590>
   11924:	ldr	r1, [r5]
   11928:	ldrd	r2, [r1]
   1192c:	cmp	r3, #0
   11930:	cmpeq	r2, #1
   11934:	bls	119e0 <__assert_fail@plt+0x9ac>
   11938:	ldrd	r2, [r1, #8]
   1193c:	mov	sl, #2
   11940:	mov	fp, #0
   11944:	cmp	r3, #0
   11948:	cmpeq	r2, #1
   1194c:	addls	r1, r1, #16
   11950:	strls	r1, [r5]
   11954:	mov	r6, #0
   11958:	b	115e4 <__assert_fail@plt+0x5b0>
   1195c:	mov	r3, #1
   11960:	str	r3, [sp, #16]
   11964:	ldr	r3, [r4, #4]
   11968:	ldr	r2, [r4, #8]
   1196c:	cmp	r3, r2
   11970:	bcs	119ac <__assert_fail@plt+0x978>
   11974:	add	r2, r3, #1
   11978:	str	r2, [r4, #4]
   1197c:	ldrb	r0, [r3]
   11980:	mov	r1, r4
   11984:	bl	10f14 <ungetc@plt>
   11988:	mov	ip, r6
   1198c:	ldrb	r3, [r5, #16]
   11990:	mov	r6, r9
   11994:	b	117f4 <__assert_fail@plt+0x7c0>
   11998:	ldr	r3, [r4, #4]
   1199c:	ldr	r2, [r4, #8]
   119a0:	mov	r9, r0
   119a4:	cmp	r3, r2
   119a8:	bcc	11974 <__assert_fail@plt+0x940>
   119ac:	mov	r0, r4
   119b0:	bl	10fa4 <__uflow@plt>
   119b4:	cmn	r0, #1
   119b8:	bne	11980 <__assert_fail@plt+0x94c>
   119bc:	mov	r0, #1
   119c0:	mov	ip, r6
   119c4:	ldr	lr, [sp, #16]
   119c8:	ldrb	r3, [r5, #16]
   119cc:	ldrb	r1, [r7]
   119d0:	mvn	r6, #0
   119d4:	mov	r2, #0
   119d8:	str	r0, [sp, #16]
   119dc:	b	11828 <__assert_fail@plt+0x7f4>
   119e0:	mov	r2, sl
   119e4:	ldr	r3, [r8]
   119e8:	mov	r1, #1
   119ec:	bl	10e18 <fwrite_unlocked@plt>
   119f0:	ldrb	r2, [r5, #16]
   119f4:	ldrb	r3, [r7]
   119f8:	cmp	r2, r3
   119fc:	beq	11a3c <__assert_fail@plt+0xa08>
   11a00:	str	r9, [sp, #16]
   11a04:	ldr	r1, [r5]
   11a08:	b	11938 <__assert_fail@plt+0x904>
   11a0c:	ldr	r0, [r5, #12]
   11a10:	bl	12a84 <__assert_fail@plt+0x1a50>
   11a14:	ldr	r2, [r4]
   11a18:	mov	r3, #0
   11a1c:	tst	r2, #48	; 0x30
   11a20:	str	r3, [r5, #12]
   11a24:	bne	118bc <__assert_fail@plt+0x888>
   11a28:	bl	15908 <__assert_fail@plt+0x48d4>
   11a2c:	mov	r1, r6
   11a30:	bl	10fb0 <__overflow@plt>
   11a34:	ldrb	r6, [r7]
   11a38:	b	117d8 <__assert_fail@plt+0x7a4>
   11a3c:	ldr	r3, [r4, #4]
   11a40:	ldr	r2, [r4, #8]
   11a44:	cmp	r3, r2
   11a48:	bcs	11a80 <__assert_fail@plt+0xa4c>
   11a4c:	add	r2, r3, #1
   11a50:	str	r2, [r4, #4]
   11a54:	ldrb	r0, [r3]
   11a58:	mov	r1, r4
   11a5c:	bl	10f14 <ungetc@plt>
   11a60:	ldr	r1, [r5]
   11a64:	str	r9, [sp, #16]
   11a68:	b	11938 <__assert_fail@plt+0x904>
   11a6c:	bl	10fa4 <__uflow@plt>
   11a70:	cmn	r0, #1
   11a74:	bne	1157c <__assert_fail@plt+0x548>
   11a78:	add	sp, sp, #28
   11a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a80:	mov	r0, r4
   11a84:	bl	10fa4 <__uflow@plt>
   11a88:	cmn	r0, #1
   11a8c:	bne	11a58 <__assert_fail@plt+0xa24>
   11a90:	ldr	r1, [r5]
   11a94:	b	11938 <__assert_fail@plt+0x904>
   11a98:	ldr	r3, [pc, #32]	; 11ac0 <__assert_fail@plt+0xa8c>
   11a9c:	ldr	r2, [pc, #32]	; 11ac4 <__assert_fail@plt+0xa90>
   11aa0:	ldr	r1, [pc, #32]	; 11ac8 <__assert_fail@plt+0xa94>
   11aa4:	ldr	r0, [pc, #32]	; 11acc <__assert_fail@plt+0xa98>
   11aa8:	bl	11034 <__assert_fail@plt>
   11aac:	andeq	r8, r2, r0, lsr #3
   11ab0:	andeq	r8, r2, r8, ror r1
   11ab4:	andeq	r8, r2, r0, lsl #2
   11ab8:	andeq	r8, r2, ip, ror #2
   11abc:	andeq	r8, r2, r0, lsl #3
   11ac0:	andeq	r6, r1, r8, lsl #6
   11ac4:	andeq	r0, r0, fp, lsr r1
   11ac8:	strdeq	r6, [r1], -ip
   11acc:	andeq	r6, r1, r8, lsl #8
   11ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad4:	mov	sl, #0
   11ad8:	ldr	fp, [pc, #428]	; 11c8c <__assert_fail@plt+0xc58>
   11adc:	ldr	r8, [pc, #428]	; 11c90 <__assert_fail@plt+0xc5c>
   11ae0:	ldr	r9, [pc, #428]	; 11c94 <__assert_fail@plt+0xc60>
   11ae4:	mov	r2, r8
   11ae8:	sub	sp, sp, #12
   11aec:	ldr	r3, [fp]
   11af0:	mov	r6, r0
   11af4:	mov	r4, #0
   11af8:	mov	r5, #0
   11afc:	str	r3, [r2], #28
   11b00:	str	r2, [sp, #4]
   11b04:	ldr	r3, [r6, #4]
   11b08:	ldr	r2, [r6, #8]
   11b0c:	cmp	r2, r3
   11b10:	bls	11bc4 <__assert_fail@plt+0xb90>
   11b14:	add	r2, r3, #1
   11b18:	str	r2, [r6, #4]
   11b1c:	ldrb	r0, [r9]
   11b20:	ldrb	r7, [r3]
   11b24:	cmp	r7, r0
   11b28:	beq	11c14 <__assert_fail@plt+0xbe0>
   11b2c:	ldr	r1, [r8]
   11b30:	adds	r4, r4, #1
   11b34:	adc	r5, r5, #0
   11b38:	ldrd	r2, [r1, #8]
   11b3c:	cmp	r5, r3
   11b40:	cmpeq	r4, r2
   11b44:	addhi	r1, r1, #16
   11b48:	strhi	r1, [r8]
   11b4c:	ldrd	r2, [r1]
   11b50:	cmp	r3, r5
   11b54:	cmpeq	r2, r4
   11b58:	bhi	11b04 <__assert_fail@plt+0xad0>
   11b5c:	ldr	r0, [r8, #24]
   11b60:	ldr	r1, [sp, #4]
   11b64:	cmp	r0, r1
   11b68:	beq	11b88 <__assert_fail@plt+0xb54>
   11b6c:	cmp	r3, r5
   11b70:	cmpeq	r2, r4
   11b74:	movne	sl, #0
   11b78:	andeq	sl, sl, #1
   11b7c:	cmp	sl, #0
   11b80:	moveq	sl, #1
   11b84:	bne	11c50 <__assert_fail@plt+0xc1c>
   11b88:	ldr	r3, [pc, #264]	; 11c98 <__assert_fail@plt+0xc64>
   11b8c:	ldr	r0, [r3]
   11b90:	ldr	r3, [r0, #20]
   11b94:	ldr	r2, [r0, #24]
   11b98:	cmp	r3, r2
   11b9c:	addcc	r2, r3, #1
   11ba0:	strcc	r2, [r0, #20]
   11ba4:	strbcc	r7, [r3]
   11ba8:	bcc	11b04 <__assert_fail@plt+0xad0>
   11bac:	uxtb	r1, r7
   11bb0:	bl	10fb0 <__overflow@plt>
   11bb4:	ldr	r3, [r6, #4]
   11bb8:	ldr	r2, [r6, #8]
   11bbc:	cmp	r2, r3
   11bc0:	bhi	11b14 <__assert_fail@plt+0xae0>
   11bc4:	mov	r0, r6
   11bc8:	bl	10fa4 <__uflow@plt>
   11bcc:	ldrb	r1, [r9]
   11bd0:	cmp	r1, r0
   11bd4:	beq	11c14 <__assert_fail@plt+0xbe0>
   11bd8:	cmn	r0, #1
   11bdc:	bne	11c78 <__assert_fail@plt+0xc44>
   11be0:	orrs	r3, r4, r5
   11be4:	beq	11c0c <__assert_fail@plt+0xbd8>
   11be8:	ldr	r3, [pc, #168]	; 11c98 <__assert_fail@plt+0xc64>
   11bec:	ldr	r0, [r3]
   11bf0:	ldr	r3, [r0, #20]
   11bf4:	ldr	r2, [r0, #24]
   11bf8:	cmp	r3, r2
   11bfc:	addcc	r2, r3, #1
   11c00:	strcc	r2, [r0, #20]
   11c04:	strbcc	r1, [r3]
   11c08:	bcs	11c80 <__assert_fail@plt+0xc4c>
   11c0c:	add	sp, sp, #12
   11c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c14:	ldr	r3, [pc, #124]	; 11c98 <__assert_fail@plt+0xc64>
   11c18:	ldr	r3, [r3]
   11c1c:	ldr	r2, [r3, #20]
   11c20:	ldr	r1, [r3, #24]
   11c24:	cmp	r2, r1
   11c28:	addcc	r1, r2, #1
   11c2c:	strcc	r1, [r3, #20]
   11c30:	strbcc	r0, [r2]
   11c34:	bcs	11c68 <__assert_fail@plt+0xc34>
   11c38:	ldr	r3, [fp]
   11c3c:	mov	r4, #0
   11c40:	mov	r5, #0
   11c44:	str	r3, [r8]
   11c48:	mov	sl, #0
   11c4c:	b	11b04 <__assert_fail@plt+0xad0>
   11c50:	ldr	r3, [pc, #64]	; 11c98 <__assert_fail@plt+0xc64>
   11c54:	ldr	r2, [r8, #20]
   11c58:	mov	r1, #1
   11c5c:	ldr	r3, [r3]
   11c60:	bl	10e18 <fwrite_unlocked@plt>
   11c64:	b	11b88 <__assert_fail@plt+0xb54>
   11c68:	mov	r1, r0
   11c6c:	mov	r0, r3
   11c70:	bl	10fb0 <__overflow@plt>
   11c74:	b	11c38 <__assert_fail@plt+0xc04>
   11c78:	mov	r7, r0
   11c7c:	b	11b2c <__assert_fail@plt+0xaf8>
   11c80:	add	sp, sp, #12
   11c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c88:	b	10fb0 <__overflow@plt>
   11c8c:	andeq	r8, r2, r0, lsr #3
   11c90:	andeq	r8, r2, r8, ror r1
   11c94:	andeq	r8, r2, r0, lsl #2
   11c98:	andeq	r8, r2, ip, ror #2
   11c9c:	push	{r4, r5, r6, r7, r8, lr}
   11ca0:	mov	r5, r1
   11ca4:	ldr	r1, [pc, #224]	; 11d8c <__assert_fail@plt+0xd58>
   11ca8:	mov	r6, r0
   11cac:	bl	10dac <strcmp@plt>
   11cb0:	cmp	r0, #0
   11cb4:	bne	11d64 <__assert_fail@plt+0xd30>
   11cb8:	ldr	r3, [pc, #208]	; 11d90 <__assert_fail@plt+0xd5c>
   11cbc:	ldr	r2, [pc, #208]	; 11d94 <__assert_fail@plt+0xd60>
   11cc0:	mov	r1, #1
   11cc4:	ldr	r4, [r3]
   11cc8:	strb	r1, [r2, #29]
   11ccc:	mov	r1, #2
   11cd0:	mov	r0, r4
   11cd4:	bl	12950 <__assert_fail@plt+0x191c>
   11cd8:	mov	r0, r4
   11cdc:	blx	r5
   11ce0:	bl	10f20 <__errno_location@plt>
   11ce4:	ldr	r3, [r4]
   11ce8:	ldr	r1, [pc, #156]	; 11d8c <__assert_fail@plt+0xd58>
   11cec:	tst	r3, #32
   11cf0:	ldr	r5, [r0]
   11cf4:	mov	r7, r0
   11cf8:	mov	r0, r6
   11cfc:	moveq	r5, #0
   11d00:	bl	10dac <strcmp@plt>
   11d04:	cmp	r0, #0
   11d08:	mov	r0, r4
   11d0c:	beq	11d2c <__assert_fail@plt+0xcf8>
   11d10:	bl	12984 <__assert_fail@plt+0x1950>
   11d14:	cmn	r0, #1
   11d18:	ldreq	r5, [r7]
   11d1c:	cmp	r5, #0
   11d20:	bne	11d38 <__assert_fail@plt+0xd04>
   11d24:	mov	r0, #1
   11d28:	pop	{r4, r5, r6, r7, r8, pc}
   11d2c:	bl	10fe0 <clearerr_unlocked@plt>
   11d30:	cmp	r5, #0
   11d34:	beq	11d24 <__assert_fail@plt+0xcf0>
   11d38:	mov	r2, r6
   11d3c:	mov	r1, #3
   11d40:	mov	r0, #0
   11d44:	bl	14d04 <__assert_fail@plt+0x3cd0>
   11d48:	mov	r1, r5
   11d4c:	ldr	r2, [pc, #68]	; 11d98 <__assert_fail@plt+0xd64>
   11d50:	mov	r3, r0
   11d54:	mov	r0, #0
   11d58:	bl	10ea8 <error@plt>
   11d5c:	mov	r0, #0
   11d60:	pop	{r4, r5, r6, r7, r8, pc}
   11d64:	ldr	r1, [pc, #48]	; 11d9c <__assert_fail@plt+0xd68>
   11d68:	mov	r0, r6
   11d6c:	bl	10fec <fopen64@plt>
   11d70:	subs	r4, r0, #0
   11d74:	bne	11ccc <__assert_fail@plt+0xc98>
   11d78:	bl	10f20 <__errno_location@plt>
   11d7c:	mov	r2, r6
   11d80:	mov	r1, #3
   11d84:	ldr	r5, [r0]
   11d88:	b	11d40 <__assert_fail@plt+0xd0c>
   11d8c:	andeq	r6, r1, r4, ror #28
   11d90:	andeq	r8, r2, r8, ror #2
   11d94:	andeq	r8, r2, r8, ror r1
   11d98:	andeq	r6, r1, r8, ror pc
   11d9c:	andeq	r6, r1, r0, ror sp
   11da0:	subs	r5, r0, #0
   11da4:	push	{r7, lr}
   11da8:	sub	sp, sp, #56	; 0x38
   11dac:	beq	11de8 <__assert_fail@plt+0xdb4>
   11db0:	ldr	r3, [pc, #828]	; 120f4 <__assert_fail@plt+0x10c0>
   11db4:	mov	r2, #5
   11db8:	ldr	r1, [pc, #824]	; 120f8 <__assert_fail@plt+0x10c4>
   11dbc:	mov	r0, #0
   11dc0:	ldr	r4, [r3]
   11dc4:	bl	10e3c <dcgettext@plt>
   11dc8:	ldr	r3, [pc, #812]	; 120fc <__assert_fail@plt+0x10c8>
   11dcc:	mov	r1, #1
   11dd0:	ldr	r3, [r3]
   11dd4:	mov	r2, r0
   11dd8:	mov	r0, r4
   11ddc:	bl	10f68 <__fprintf_chk@plt>
   11de0:	mov	r0, r5
   11de4:	bl	10efc <exit@plt>
   11de8:	mov	r2, #5
   11dec:	ldr	r1, [pc, #780]	; 12100 <__assert_fail@plt+0x10cc>
   11df0:	bl	10e3c <dcgettext@plt>
   11df4:	ldr	r3, [pc, #768]	; 120fc <__assert_fail@plt+0x10c8>
   11df8:	ldr	r6, [pc, #772]	; 12104 <__assert_fail@plt+0x10d0>
   11dfc:	ldr	r4, [pc, #772]	; 12108 <__assert_fail@plt+0x10d4>
   11e00:	ldr	r2, [r3]
   11e04:	mov	r1, r0
   11e08:	mov	r0, #1
   11e0c:	bl	10f50 <__printf_chk@plt>
   11e10:	mov	r2, #5
   11e14:	ldr	r1, [pc, #752]	; 1210c <__assert_fail@plt+0x10d8>
   11e18:	mov	r0, r5
   11e1c:	bl	10e3c <dcgettext@plt>
   11e20:	ldr	r1, [r6]
   11e24:	bl	10d94 <fputs_unlocked@plt>
   11e28:	mov	r2, #5
   11e2c:	ldr	r1, [pc, #732]	; 12110 <__assert_fail@plt+0x10dc>
   11e30:	mov	r0, r5
   11e34:	bl	10e3c <dcgettext@plt>
   11e38:	ldr	r1, [r6]
   11e3c:	bl	10d94 <fputs_unlocked@plt>
   11e40:	mov	r2, #5
   11e44:	ldr	r1, [pc, #712]	; 12114 <__assert_fail@plt+0x10e0>
   11e48:	mov	r0, r5
   11e4c:	bl	10e3c <dcgettext@plt>
   11e50:	ldr	r1, [r6]
   11e54:	bl	10d94 <fputs_unlocked@plt>
   11e58:	mov	r2, #5
   11e5c:	ldr	r1, [pc, #692]	; 12118 <__assert_fail@plt+0x10e4>
   11e60:	mov	r0, r5
   11e64:	bl	10e3c <dcgettext@plt>
   11e68:	ldr	r1, [r6]
   11e6c:	bl	10d94 <fputs_unlocked@plt>
   11e70:	mov	r2, #5
   11e74:	ldr	r1, [pc, #672]	; 1211c <__assert_fail@plt+0x10e8>
   11e78:	mov	r0, r5
   11e7c:	bl	10e3c <dcgettext@plt>
   11e80:	ldr	r1, [r6]
   11e84:	bl	10d94 <fputs_unlocked@plt>
   11e88:	mov	r2, #5
   11e8c:	ldr	r1, [pc, #652]	; 12120 <__assert_fail@plt+0x10ec>
   11e90:	mov	r0, r5
   11e94:	bl	10e3c <dcgettext@plt>
   11e98:	ldr	r1, [r6]
   11e9c:	bl	10d94 <fputs_unlocked@plt>
   11ea0:	mov	r2, #5
   11ea4:	ldr	r1, [pc, #632]	; 12124 <__assert_fail@plt+0x10f0>
   11ea8:	mov	r0, r5
   11eac:	bl	10e3c <dcgettext@plt>
   11eb0:	ldr	r1, [r6]
   11eb4:	bl	10d94 <fputs_unlocked@plt>
   11eb8:	mov	r2, #5
   11ebc:	ldr	r1, [pc, #612]	; 12128 <__assert_fail@plt+0x10f4>
   11ec0:	mov	r0, r5
   11ec4:	bl	10e3c <dcgettext@plt>
   11ec8:	ldr	r1, [r6]
   11ecc:	bl	10d94 <fputs_unlocked@plt>
   11ed0:	mov	r2, #5
   11ed4:	ldr	r1, [pc, #592]	; 1212c <__assert_fail@plt+0x10f8>
   11ed8:	mov	r0, r5
   11edc:	bl	10e3c <dcgettext@plt>
   11ee0:	ldr	r1, [r6]
   11ee4:	bl	10d94 <fputs_unlocked@plt>
   11ee8:	mov	r2, #5
   11eec:	ldr	r1, [pc, #572]	; 12130 <__assert_fail@plt+0x10fc>
   11ef0:	mov	r0, r5
   11ef4:	bl	10e3c <dcgettext@plt>
   11ef8:	ldr	r1, [r6]
   11efc:	bl	10d94 <fputs_unlocked@plt>
   11f00:	mov	r2, #5
   11f04:	ldr	r1, [pc, #552]	; 12134 <__assert_fail@plt+0x1100>
   11f08:	mov	r0, r5
   11f0c:	bl	10e3c <dcgettext@plt>
   11f10:	ldr	r1, [r6]
   11f14:	bl	10d94 <fputs_unlocked@plt>
   11f18:	mov	r2, #5
   11f1c:	ldr	r1, [pc, #532]	; 12138 <__assert_fail@plt+0x1104>
   11f20:	mov	r0, r5
   11f24:	bl	10e3c <dcgettext@plt>
   11f28:	ldr	r1, [r6]
   11f2c:	bl	10d94 <fputs_unlocked@plt>
   11f30:	ldm	r4!, {r0, r1, r2, r3}
   11f34:	mov	lr, sp
   11f38:	stmia	lr!, {r0, r1, r2, r3}
   11f3c:	ldm	r4!, {r0, r1, r2, r3}
   11f40:	ldr	ip, [sp]
   11f44:	stmia	lr!, {r0, r1, r2, r3}
   11f48:	cmp	ip, #0
   11f4c:	ldm	r4!, {r0, r1, r2, r3}
   11f50:	stmia	lr!, {r0, r1, r2, r3}
   11f54:	ldm	r4, {r0, r1}
   11f58:	moveq	r4, sp
   11f5c:	stm	lr, {r0, r1}
   11f60:	beq	11f90 <__assert_fail@plt+0xf5c>
   11f64:	ldr	r7, [pc, #464]	; 1213c <__assert_fail@plt+0x1108>
   11f68:	mov	r4, sp
   11f6c:	b	11f7c <__assert_fail@plt+0xf48>
   11f70:	ldr	ip, [r4, #8]!
   11f74:	cmp	ip, #0
   11f78:	beq	11f90 <__assert_fail@plt+0xf5c>
   11f7c:	mov	r1, ip
   11f80:	mov	r0, r7
   11f84:	bl	10dac <strcmp@plt>
   11f88:	cmp	r0, #0
   11f8c:	bne	11f70 <__assert_fail@plt+0xf3c>
   11f90:	ldr	r4, [r4, #4]
   11f94:	mov	r2, #5
   11f98:	cmp	r4, #0
   11f9c:	ldr	r1, [pc, #412]	; 12140 <__assert_fail@plt+0x110c>
   11fa0:	beq	12048 <__assert_fail@plt+0x1014>
   11fa4:	mov	r0, #0
   11fa8:	bl	10e3c <dcgettext@plt>
   11fac:	ldr	r3, [pc, #400]	; 12144 <__assert_fail@plt+0x1110>
   11fb0:	ldr	r2, [pc, #400]	; 12148 <__assert_fail@plt+0x1114>
   11fb4:	mov	r1, r0
   11fb8:	mov	r0, #1
   11fbc:	bl	10f50 <__printf_chk@plt>
   11fc0:	mov	r1, #0
   11fc4:	mov	r0, #5
   11fc8:	bl	10fbc <setlocale@plt>
   11fcc:	cmp	r0, #0
   11fd0:	ldreq	r7, [pc, #356]	; 1213c <__assert_fail@plt+0x1108>
   11fd4:	beq	11ff0 <__assert_fail@plt+0xfbc>
   11fd8:	mov	r2, #3
   11fdc:	ldr	r1, [pc, #360]	; 1214c <__assert_fail@plt+0x1118>
   11fe0:	bl	11010 <strncmp@plt>
   11fe4:	ldr	r7, [pc, #336]	; 1213c <__assert_fail@plt+0x1108>
   11fe8:	cmp	r0, #0
   11fec:	bne	120d8 <__assert_fail@plt+0x10a4>
   11ff0:	mov	r2, #5
   11ff4:	ldr	r1, [pc, #340]	; 12150 <__assert_fail@plt+0x111c>
   11ff8:	mov	r0, #0
   11ffc:	bl	10e3c <dcgettext@plt>
   12000:	ldr	r3, [pc, #308]	; 1213c <__assert_fail@plt+0x1108>
   12004:	ldr	r2, [pc, #312]	; 12144 <__assert_fail@plt+0x1110>
   12008:	mov	r1, r0
   1200c:	mov	r0, #1
   12010:	bl	10f50 <__printf_chk@plt>
   12014:	mov	r2, #5
   12018:	ldr	r1, [pc, #308]	; 12154 <__assert_fail@plt+0x1120>
   1201c:	mov	r0, #0
   12020:	bl	10e3c <dcgettext@plt>
   12024:	ldr	r2, [pc, #300]	; 12158 <__assert_fail@plt+0x1124>
   12028:	cmp	r4, r7
   1202c:	ldr	r3, [pc, #296]	; 1215c <__assert_fail@plt+0x1128>
   12030:	movne	r3, r2
   12034:	mov	r1, r0
   12038:	mov	r2, r4
   1203c:	mov	r0, #1
   12040:	bl	10f50 <__printf_chk@plt>
   12044:	b	11de0 <__assert_fail@plt+0xdac>
   12048:	mov	r0, r4
   1204c:	bl	10e3c <dcgettext@plt>
   12050:	ldr	r3, [pc, #236]	; 12144 <__assert_fail@plt+0x1110>
   12054:	ldr	r2, [pc, #236]	; 12148 <__assert_fail@plt+0x1114>
   12058:	mov	r1, r0
   1205c:	mov	r0, #1
   12060:	bl	10f50 <__printf_chk@plt>
   12064:	mov	r1, r4
   12068:	mov	r0, #5
   1206c:	bl	10fbc <setlocale@plt>
   12070:	cmp	r0, #0
   12074:	beq	1208c <__assert_fail@plt+0x1058>
   12078:	mov	r2, #3
   1207c:	ldr	r1, [pc, #200]	; 1214c <__assert_fail@plt+0x1118>
   12080:	bl	11010 <strncmp@plt>
   12084:	cmp	r0, #0
   12088:	bne	120d0 <__assert_fail@plt+0x109c>
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #184]	; 12150 <__assert_fail@plt+0x111c>
   12094:	mov	r0, #0
   12098:	bl	10e3c <dcgettext@plt>
   1209c:	ldr	r3, [pc, #152]	; 1213c <__assert_fail@plt+0x1108>
   120a0:	ldr	r2, [pc, #156]	; 12144 <__assert_fail@plt+0x1110>
   120a4:	mov	r4, r3
   120a8:	mov	r1, r0
   120ac:	mov	r0, #1
   120b0:	bl	10f50 <__printf_chk@plt>
   120b4:	ldr	r1, [pc, #152]	; 12154 <__assert_fail@plt+0x1120>
   120b8:	mov	r2, #5
   120bc:	mov	r0, #0
   120c0:	bl	10e3c <dcgettext@plt>
   120c4:	ldr	r3, [pc, #144]	; 1215c <__assert_fail@plt+0x1128>
   120c8:	mov	r1, r0
   120cc:	b	12038 <__assert_fail@plt+0x1004>
   120d0:	ldr	r7, [pc, #100]	; 1213c <__assert_fail@plt+0x1108>
   120d4:	mov	r4, r7
   120d8:	mov	r2, #5
   120dc:	ldr	r1, [pc, #124]	; 12160 <__assert_fail@plt+0x112c>
   120e0:	mov	r0, #0
   120e4:	bl	10e3c <dcgettext@plt>
   120e8:	ldr	r1, [r6]
   120ec:	bl	10d94 <fputs_unlocked@plt>
   120f0:	b	11ff0 <__assert_fail@plt+0xfbc>
   120f4:	andeq	r8, r2, r0, ror #2
   120f8:	andeq	r6, r1, ip, lsl r4
   120fc:			; <UNDEFINED> instruction: 0x000281b0
   12100:	andeq	r6, r1, r4, asr #8
   12104:	andeq	r8, r2, ip, ror #2
   12108:	andeq	r6, r1, r4, lsl r3
   1210c:	andeq	r6, r1, r4, ror #8
   12110:	andeq	r6, r1, r8, lsr #9
   12114:	andeq	r6, r1, r0, ror #9
   12118:	andeq	r6, r1, ip, lsr #10
   1211c:	andeq	r6, r1, r0, ror #11
   12120:	ldrdeq	r6, [r1], -r0
   12124:	andeq	r6, r1, r4, asr #14
   12128:	andeq	r6, r1, r8, lsl r8
   1212c:	andeq	r6, r1, r8, asr r8
   12130:	andeq	r6, r1, r8, lsl #17
   12134:	andeq	r6, r1, r0, asr #17
   12138:	andeq	r6, r1, ip, lsl #19
   1213c:	andeq	r6, r1, r8, lsl r4
   12140:	muleq	r1, r4, sl
   12144:	andeq	r6, r1, ip, lsr #21
   12148:	ldrdeq	r6, [r1], -r4
   1214c:	andeq	r6, r1, r4, ror #21
   12150:	andeq	r6, r1, r0, lsr fp
   12154:	andeq	r6, r1, ip, asr #22
   12158:	ldrdeq	r6, [r1], -ip
   1215c:	strdeq	r6, [r1], -r0
   12160:	andeq	r6, r1, r8, ror #21
   12164:	andeq	r0, r0, r0
   12168:	ldr	r2, [r0]
   1216c:	ldr	r3, [r1]
   12170:	cmp	r2, r3
   12174:	blt	12184 <__assert_fail@plt+0x1150>
   12178:	movgt	r0, #1
   1217c:	movle	r0, #0
   12180:	bx	lr
   12184:	mvn	r0, #0
   12188:	bx	lr
   1218c:	push	{r4, r5, r6, r7, r8, lr}
   12190:	mov	r6, r2
   12194:	ldr	r8, [pc, #88]	; 121f4 <__assert_fail@plt+0x11c0>
   12198:	mov	r7, r3
   1219c:	mov	r4, r0
   121a0:	ldr	r3, [r8]
   121a4:	ldr	r2, [r8, #4]
   121a8:	mov	r5, r1
   121ac:	cmp	r3, r2
   121b0:	beq	121d4 <__assert_fail@plt+0x11a0>
   121b4:	ldr	r1, [r8, #8]
   121b8:	lsl	r2, r3, #4
   121bc:	add	r0, r1, r2
   121c0:	add	r3, r3, #1
   121c4:	strd	r4, [r1, r2]
   121c8:	strd	r6, [r0, #8]
   121cc:	str	r3, [r8]
   121d0:	pop	{r4, r5, r6, r7, r8, pc}
   121d4:	add	r1, r8, #4
   121d8:	mov	r2, #16
   121dc:	ldr	r0, [r8, #8]
   121e0:	bl	154c8 <__assert_fail@plt+0x4494>
   121e4:	ldr	r3, [r8]
   121e8:	mov	r1, r0
   121ec:	str	r0, [r8, #8]
   121f0:	b	121b8 <__assert_fail@plt+0x1184>
   121f4:	muleq	r2, r8, r1
   121f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121fc:	sub	sp, sp, #36	; 0x24
   12200:	ands	r3, r1, #1
   12204:	str	r1, [sp, #28]
   12208:	str	r3, [sp, #24]
   1220c:	mov	r6, r0
   12210:	beq	12224 <__assert_fail@plt+0x11f0>
   12214:	ldr	r1, [pc, #1148]	; 12698 <__assert_fail@plt+0x1664>
   12218:	bl	10dac <strcmp@plt>
   1221c:	cmp	r0, #0
   12220:	beq	125c4 <__assert_fail@plt+0x1590>
   12224:	mov	r4, #0
   12228:	mov	r5, #0
   1222c:	mov	r9, #0
   12230:	mov	r3, #0
   12234:	mov	r2, #1
   12238:	mov	fp, #0
   1223c:	strd	r2, [sp]
   12240:	str	r3, [sp, #20]
   12244:	mov	r7, fp
   12248:	mov	r3, fp
   1224c:	add	r6, r6, #1
   12250:	str	r2, [sp, #16]
   12254:	mov	r8, r9
   12258:	mov	sl, #1
   1225c:	mov	fp, #0
   12260:	b	12334 <__assert_fail@plt+0x1300>
   12264:	cmp	r1, #44	; 0x2c
   12268:	str	r2, [sp, #12]
   1226c:	str	r3, [sp, #8]
   12270:	str	r1, [sp]
   12274:	beq	12384 <__assert_fail@plt+0x1350>
   12278:	bl	10ef0 <__ctype_b_loc@plt>
   1227c:	ldr	r1, [sp]
   12280:	ldr	r3, [sp, #8]
   12284:	ldr	r2, [sp, #12]
   12288:	lsl	ip, r1, #1
   1228c:	ldr	r0, [r0]
   12290:	ldrh	r0, [r0, ip]
   12294:	and	r0, r0, #1
   12298:	cmp	r1, #0
   1229c:	orreq	r0, r0, #1
   122a0:	cmp	r0, #0
   122a4:	bne	12384 <__assert_fail@plt+0x1350>
   122a8:	sub	r1, r1, #48	; 0x30
   122ac:	cmp	r1, #9
   122b0:	bhi	127c4 <__assert_fail@plt+0x1790>
   122b4:	cmp	r3, #0
   122b8:	beq	125b8 <__assert_fail@plt+0x1584>
   122bc:	ldr	r3, [pc, #1008]	; 126b4 <__assert_fail@plt+0x1680>
   122c0:	ldr	r3, [r3, #12]
   122c4:	cmp	r3, #0
   122c8:	beq	125b8 <__assert_fail@plt+0x1584>
   122cc:	add	r3, pc, #956	; 0x3bc
   122d0:	ldrd	r2, [r3]
   122d4:	cmp	r8, #0
   122d8:	movne	r7, r8
   122dc:	moveq	r9, #1
   122e0:	cmp	r5, r3
   122e4:	cmpeq	r4, r2
   122e8:	bhi	12754 <__assert_fail@plt+0x1720>
   122ec:	mov	r0, #10
   122f0:	umull	r2, r3, r4, r0
   122f4:	mla	r3, r0, r5, r3
   122f8:	adds	r2, r2, r1
   122fc:	adc	r3, r3, r1, asr #31
   12300:	and	r1, r2, r3
   12304:	cmn	r1, #1
   12308:	movne	r1, #0
   1230c:	moveq	r1, #1
   12310:	cmp	r3, r5
   12314:	cmpeq	r2, r4
   12318:	orrcc	r1, r1, #1
   1231c:	cmp	r1, #0
   12320:	bne	12754 <__assert_fail@plt+0x1720>
   12324:	mov	r5, r3
   12328:	mov	r4, r2
   1232c:	mov	r3, #1
   12330:	add	r6, r6, #1
   12334:	ldrb	r1, [r6, #-1]
   12338:	sub	r2, r6, #1
   1233c:	cmp	r1, #45	; 0x2d
   12340:	bne	12264 <__assert_fail@plt+0x1230>
   12344:	cmp	r8, #0
   12348:	bne	12734 <__assert_fail@plt+0x1700>
   1234c:	orrs	r3, r4, r5
   12350:	movne	r3, #0
   12354:	andeq	r3, r9, #1
   12358:	cmp	r3, #0
   1235c:	bne	126d8 <__assert_fail@plt+0x16a4>
   12360:	cmp	r9, #0
   12364:	bne	125a0 <__assert_fail@plt+0x156c>
   12368:	mov	r4, #0
   1236c:	ldr	sl, [sp, #16]
   12370:	mov	r5, r4
   12374:	ldr	fp, [sp, #20]
   12378:	mov	r3, r4
   1237c:	mov	r8, #1
   12380:	b	12330 <__assert_fail@plt+0x12fc>
   12384:	cmp	r8, #0
   12388:	beq	123e8 <__assert_fail@plt+0x13b4>
   1238c:	orr	r9, r9, r7
   12390:	tst	r9, #255	; 0xff
   12394:	bne	12574 <__assert_fail@plt+0x1540>
   12398:	ldr	r3, [sp, #24]
   1239c:	cmp	r3, #0
   123a0:	beq	12810 <__assert_fail@plt+0x17dc>
   123a4:	ldr	sl, [sp, #16]
   123a8:	ldr	fp, [sp, #20]
   123ac:	mvn	r2, #0
   123b0:	mvn	r3, #0
   123b4:	mov	r0, sl
   123b8:	mov	r1, fp
   123bc:	bl	1218c <__assert_fail@plt+0x1158>
   123c0:	ldrb	r3, [r6, #-1]
   123c4:	cmp	r3, #0
   123c8:	beq	12410 <__assert_fail@plt+0x13dc>
   123cc:	mov	r8, #0
   123d0:	mov	r4, r8
   123d4:	mov	r5, r8
   123d8:	mov	r7, r8
   123dc:	mov	r9, r8
   123e0:	mov	r3, r8
   123e4:	b	12330 <__assert_fail@plt+0x12fc>
   123e8:	orrs	r3, r4, r5
   123ec:	beq	126d8 <__assert_fail@plt+0x16a4>
   123f0:	mov	r3, r5
   123f4:	mov	r2, r4
   123f8:	mov	r0, r4
   123fc:	mov	r1, r5
   12400:	bl	1218c <__assert_fail@plt+0x1158>
   12404:	ldrb	r3, [r6, #-1]
   12408:	cmp	r3, #0
   1240c:	bne	123cc <__assert_fail@plt+0x1398>
   12410:	ldr	fp, [pc, #668]	; 126b4 <__assert_fail@plt+0x1680>
   12414:	ldr	r1, [fp]
   12418:	cmp	r1, #0
   1241c:	beq	1281c <__assert_fail@plt+0x17e8>
   12420:	mov	r9, r3
   12424:	mov	r2, #16
   12428:	ldr	r3, [pc, #620]	; 1269c <__assert_fail@plt+0x1668>
   1242c:	ldr	r0, [fp, #8]
   12430:	bl	10ff8 <qsort@plt>
   12434:	ldr	sl, [fp]
   12438:	str	r9, [sp]
   1243c:	ldr	r3, [sp]
   12440:	ldr	r4, [fp, #8]
   12444:	mov	r2, sl
   12448:	cmp	r3, r2
   1244c:	str	r9, [sp, #8]
   12450:	mov	r1, r4
   12454:	bcs	12520 <__assert_fail@plt+0x14ec>
   12458:	ldr	r3, [sp]
   1245c:	add	r3, r3, #1
   12460:	cmp	r3, r2
   12464:	str	r3, [sp]
   12468:	mov	ip, r3
   1246c:	bcs	12508 <__assert_fail@plt+0x14d4>
   12470:	ldr	lr, [sp, #8]
   12474:	lsl	r5, r3, #4
   12478:	add	r3, r1, lr
   1247c:	ldrd	r6, [r1, r5]
   12480:	ldrd	r8, [r3, #8]
   12484:	add	r0, r1, r5
   12488:	cmp	r9, r7
   1248c:	cmpeq	r8, r6
   12490:	bcc	12508 <__assert_fail@plt+0x14d4>
   12494:	mvn	sl, #-268435456	; 0xf0000000
   12498:	add	r4, lr, #32
   1249c:	sub	sl, sl, ip
   124a0:	b	124c4 <__assert_fail@plt+0x1490>
   124a4:	ldr	r3, [sp, #8]
   124a8:	ldrd	r6, [r1, r5]
   124ac:	add	r3, r1, r3
   124b0:	add	r0, r1, r5
   124b4:	ldrd	r8, [r3, #8]
   124b8:	cmp	r7, r9
   124bc:	cmpeq	r6, r8
   124c0:	bhi	12508 <__assert_fail@plt+0x14d4>
   124c4:	ldrd	r6, [r0, #8]
   124c8:	add	r2, sl, r2
   124cc:	add	r1, r1, r4
   124d0:	cmp	r7, r9
   124d4:	cmpeq	r6, r8
   124d8:	movcc	r6, r8
   124dc:	movcc	r7, r9
   124e0:	lsl	r2, r2, #4
   124e4:	strd	r6, [r3, #8]
   124e8:	bl	10dd0 <memmove@plt>
   124ec:	ldr	r2, [fp]
   124f0:	ldr	r3, [sp]
   124f4:	sub	r2, r2, #1
   124f8:	cmp	r3, r2
   124fc:	str	r2, [fp]
   12500:	ldr	r1, [fp, #8]
   12504:	bcc	124a4 <__assert_fail@plt+0x1470>
   12508:	ldr	r3, [sp, #8]
   1250c:	add	r3, r3, #16
   12510:	str	r3, [sp, #8]
   12514:	ldr	r3, [sp]
   12518:	cmp	r3, r2
   1251c:	bcc	12458 <__assert_fail@plt+0x1424>
   12520:	ldr	r3, [sp, #28]
   12524:	mov	sl, r2
   12528:	tst	r3, #2
   1252c:	mov	r4, r1
   12530:	bne	125d8 <__assert_fail@plt+0x15a4>
   12534:	add	sl, sl, #1
   12538:	mov	r0, r4
   1253c:	lsl	r1, sl, #4
   12540:	str	sl, [fp]
   12544:	bl	153fc <__assert_fail@plt+0x43c8>
   12548:	ldr	r3, [fp]
   1254c:	mvn	r4, #0
   12550:	sub	r3, r3, #-268435455	; 0xf0000001
   12554:	mvn	r5, #0
   12558:	lsl	r3, r3, #4
   1255c:	add	r2, r0, r3
   12560:	str	r0, [fp, #8]
   12564:	strd	r4, [r2, #8]
   12568:	strd	r4, [r0, r3]
   1256c:	add	sp, sp, #36	; 0x24
   12570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12574:	cmp	r7, #0
   12578:	beq	123ac <__assert_fail@plt+0x1378>
   1257c:	cmp	fp, r5
   12580:	cmpeq	sl, r4
   12584:	bhi	1270c <__assert_fail@plt+0x16d8>
   12588:	mov	r2, r4
   1258c:	mov	r3, r5
   12590:	mov	r0, sl
   12594:	mov	r1, fp
   12598:	bl	1218c <__assert_fail@plt+0x1158>
   1259c:	b	123c0 <__assert_fail@plt+0x138c>
   125a0:	mov	sl, r4
   125a4:	mov	r4, #0
   125a8:	mov	fp, r5
   125ac:	mov	r8, r9
   125b0:	mov	r5, r4
   125b4:	b	12330 <__assert_fail@plt+0x12fc>
   125b8:	ldr	r3, [pc, #244]	; 126b4 <__assert_fail@plt+0x1680>
   125bc:	str	r2, [r3, #12]
   125c0:	b	122cc <__assert_fail@plt+0x1298>
   125c4:	add	r6, r6, #1
   125c8:	mov	r4, #1
   125cc:	mov	r5, #0
   125d0:	mov	r9, #1
   125d4:	b	12230 <__assert_fail@plt+0x11fc>
   125d8:	ldrd	r0, [r1]
   125dc:	mov	r3, #0
   125e0:	str	r3, [fp, #8]
   125e4:	cmp	r1, #0
   125e8:	cmpeq	r0, #1
   125ec:	str	r3, [fp]
   125f0:	str	r3, [fp, #4]
   125f4:	bls	1260c <__assert_fail@plt+0x15d8>
   125f8:	subs	r2, r0, #1
   125fc:	sbc	r3, r1, #0
   12600:	mov	r0, #1
   12604:	mov	r1, #0
   12608:	bl	1218c <__assert_fail@plt+0x1158>
   1260c:	cmp	sl, #1
   12610:	movhi	r5, r4
   12614:	movhi	r6, #1
   12618:	bls	12654 <__assert_fail@plt+0x1620>
   1261c:	ldrd	r0, [r5, #8]
   12620:	ldrd	r2, [r5, #16]
   12624:	adds	r0, r0, #1
   12628:	adc	r1, r1, #0
   1262c:	cmp	r1, r3
   12630:	cmpeq	r0, r2
   12634:	beq	12644 <__assert_fail@plt+0x1610>
   12638:	subs	r2, r2, #1
   1263c:	sbc	r3, r3, #0
   12640:	bl	1218c <__assert_fail@plt+0x1158>
   12644:	add	r6, r6, #1
   12648:	cmp	r6, sl
   1264c:	add	r5, r5, #16
   12650:	bne	1261c <__assert_fail@plt+0x15e8>
   12654:	add	sl, r4, sl, lsl #4
   12658:	mvn	r3, #0
   1265c:	ldrd	r0, [sl, #-8]
   12660:	mvn	r2, #0
   12664:	cmp	r1, r3
   12668:	cmpeq	r0, r2
   1266c:	beq	1267c <__assert_fail@plt+0x1648>
   12670:	adds	r0, r0, #1
   12674:	adc	r1, r1, #0
   12678:	bl	1218c <__assert_fail@plt+0x1158>
   1267c:	mov	r0, r4
   12680:	bl	12a84 <__assert_fail@plt+0x1a50>
   12684:	ldr	sl, [fp]
   12688:	ldr	r4, [fp, #8]
   1268c:	b	12534 <__assert_fail@plt+0x1500>
   12690:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12694:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12698:	andeq	r6, r1, r4, ror #28
   1269c:	andeq	r2, r1, r8, ror #2
   126a0:	strdeq	r6, [r1], -r8
   126a4:	andeq	r6, r1, r8, lsr #28
   126a8:	andeq	r6, r1, r8, ror #28
   126ac:	andeq	r6, r1, r4, asr #27
   126b0:	andeq	r6, r1, r4, ror #27
   126b4:	muleq	r2, r8, r1
   126b8:	andeq	r6, r1, r4, lsl #29
   126bc:	muleq	r1, r0, lr
   126c0:			; <UNDEFINED> instruction: 0x00016eb8
   126c4:	ldrdeq	r6, [r1], -r8
   126c8:	strdeq	r6, [r1], -ip
   126cc:	andeq	r6, r1, r4, asr #28
   126d0:	andeq	r6, r1, r4, lsl pc
   126d4:	andeq	r6, r1, r0, asr #30
   126d8:	ldr	r3, [sp, #28]
   126dc:	mov	r0, r8
   126e0:	tst	r3, #4
   126e4:	mov	r2, #5
   126e8:	ldrne	r1, [pc, #-80]	; 126a0 <__assert_fail@plt+0x166c>
   126ec:	ldreq	r1, [pc, #-80]	; 126a4 <__assert_fail@plt+0x1670>
   126f0:	bl	10e3c <dcgettext@plt>
   126f4:	mov	r1, #0
   126f8:	mov	r2, r0
   126fc:	mov	r0, r1
   12700:	bl	10ea8 <error@plt>
   12704:	mov	r0, #1
   12708:	bl	11da0 <__assert_fail@plt+0xd6c>
   1270c:	ldr	r1, [pc, #-108]	; 126a8 <__assert_fail@plt+0x1674>
   12710:	mov	r2, #5
   12714:	mov	r0, #0
   12718:	bl	10e3c <dcgettext@plt>
   1271c:	mov	r1, #0
   12720:	mov	r2, r0
   12724:	mov	r0, r1
   12728:	bl	10ea8 <error@plt>
   1272c:	mov	r0, #1
   12730:	bl	11da0 <__assert_fail@plt+0xd6c>
   12734:	ldr	r3, [sp, #28]
   12738:	mov	r2, #5
   1273c:	ands	r0, r3, #4
   12740:	movne	r0, #0
   12744:	ldrne	r1, [pc, #-160]	; 126ac <__assert_fail@plt+0x1678>
   12748:	ldreq	r1, [pc, #-160]	; 126b0 <__assert_fail@plt+0x167c>
   1274c:	bl	10e3c <dcgettext@plt>
   12750:	b	126f4 <__assert_fail@plt+0x16c0>
   12754:	ldr	r3, [pc, #-168]	; 126b4 <__assert_fail@plt+0x1680>
   12758:	ldr	r1, [pc, #-168]	; 126b8 <__assert_fail@plt+0x1684>
   1275c:	ldr	r4, [r3, #12]
   12760:	mov	r0, r4
   12764:	bl	11028 <strspn@plt>
   12768:	mov	r1, r0
   1276c:	mov	r0, r4
   12770:	bl	158b0 <__assert_fail@plt+0x487c>
   12774:	ldr	r3, [sp, #28]
   12778:	mov	r2, #5
   1277c:	mov	r4, r0
   12780:	ands	r0, r3, #4
   12784:	movne	r0, #0
   12788:	ldrne	r1, [pc, #-212]	; 126bc <__assert_fail@plt+0x1688>
   1278c:	ldreq	r1, [pc, #-212]	; 126c0 <__assert_fail@plt+0x168c>
   12790:	bl	10e3c <dcgettext@plt>
   12794:	mov	r5, r0
   12798:	mov	r0, r4
   1279c:	bl	14e88 <__assert_fail@plt+0x3e54>
   127a0:	mov	r1, #0
   127a4:	mov	r2, r5
   127a8:	mov	r3, r0
   127ac:	mov	r0, r1
   127b0:	bl	10ea8 <error@plt>
   127b4:	mov	r0, r4
   127b8:	bl	12a84 <__assert_fail@plt+0x1a50>
   127bc:	mov	r0, #1
   127c0:	bl	11da0 <__assert_fail@plt+0xd6c>
   127c4:	ldr	r3, [sp, #28]
   127c8:	mov	sl, r2
   127cc:	ands	r2, r3, #4
   127d0:	moveq	r0, r2
   127d4:	movne	r2, #5
   127d8:	ldrne	r1, [pc, #-284]	; 126c4 <__assert_fail@plt+0x1690>
   127dc:	moveq	r2, #5
   127e0:	ldreq	r1, [pc, #-288]	; 126c8 <__assert_fail@plt+0x1694>
   127e4:	bl	10e3c <dcgettext@plt>
   127e8:	mov	r4, r0
   127ec:	mov	r0, sl
   127f0:	bl	14e88 <__assert_fail@plt+0x3e54>
   127f4:	mov	r1, #0
   127f8:	mov	r2, r4
   127fc:	mov	r3, r0
   12800:	mov	r0, r1
   12804:	bl	10ea8 <error@plt>
   12808:	mov	r0, #1
   1280c:	bl	11da0 <__assert_fail@plt+0xd6c>
   12810:	mov	r2, #5
   12814:	ldr	r1, [pc, #-336]	; 126cc <__assert_fail@plt+0x1698>
   12818:	b	12714 <__assert_fail@plt+0x16e0>
   1281c:	ldr	r3, [sp, #28]
   12820:	ands	r0, r3, #4
   12824:	movne	r0, r1
   12828:	movne	r2, #5
   1282c:	ldrne	r1, [pc, #-356]	; 126d0 <__assert_fail@plt+0x169c>
   12830:	moveq	r2, #5
   12834:	ldreq	r1, [pc, #-360]	; 126d4 <__assert_fail@plt+0x16a0>
   12838:	bl	10e3c <dcgettext@plt>
   1283c:	b	126f4 <__assert_fail@plt+0x16c0>
   12840:	ldr	r3, [pc, #4]	; 1284c <__assert_fail@plt+0x1818>
   12844:	str	r0, [r3]
   12848:	bx	lr
   1284c:	andeq	r8, r2, r8, lsr #3
   12850:	ldr	r3, [pc, #4]	; 1285c <__assert_fail@plt+0x1828>
   12854:	strb	r0, [r3, #4]
   12858:	bx	lr
   1285c:	andeq	r8, r2, r8, lsr #3
   12860:	ldr	r3, [pc, #192]	; 12928 <__assert_fail@plt+0x18f4>
   12864:	push	{r4, r5, r6, lr}
   12868:	sub	sp, sp, #8
   1286c:	ldr	r0, [r3]
   12870:	bl	15a18 <__assert_fail@plt+0x49e4>
   12874:	cmp	r0, #0
   12878:	beq	1289c <__assert_fail@plt+0x1868>
   1287c:	ldr	r4, [pc, #168]	; 1292c <__assert_fail@plt+0x18f8>
   12880:	ldrb	r3, [r4, #4]
   12884:	cmp	r3, #0
   12888:	beq	128b8 <__assert_fail@plt+0x1884>
   1288c:	bl	10f20 <__errno_location@plt>
   12890:	ldr	r3, [r0]
   12894:	cmp	r3, #32
   12898:	bne	128b8 <__assert_fail@plt+0x1884>
   1289c:	ldr	r3, [pc, #140]	; 12930 <__assert_fail@plt+0x18fc>
   128a0:	ldr	r0, [r3]
   128a4:	bl	15a18 <__assert_fail@plt+0x49e4>
   128a8:	cmp	r0, #0
   128ac:	bne	12900 <__assert_fail@plt+0x18cc>
   128b0:	add	sp, sp, #8
   128b4:	pop	{r4, r5, r6, pc}
   128b8:	mov	r2, #5
   128bc:	ldr	r1, [pc, #112]	; 12934 <__assert_fail@plt+0x1900>
   128c0:	mov	r0, #0
   128c4:	bl	10e3c <dcgettext@plt>
   128c8:	ldr	r4, [r4]
   128cc:	cmp	r4, #0
   128d0:	mov	r5, r0
   128d4:	beq	1290c <__assert_fail@plt+0x18d8>
   128d8:	bl	10f20 <__errno_location@plt>
   128dc:	ldr	r6, [r0]
   128e0:	mov	r0, r4
   128e4:	bl	14cf0 <__assert_fail@plt+0x3cbc>
   128e8:	mov	r1, r6
   128ec:	str	r5, [sp]
   128f0:	ldr	r2, [pc, #64]	; 12938 <__assert_fail@plt+0x1904>
   128f4:	mov	r3, r0
   128f8:	mov	r0, #0
   128fc:	bl	10ea8 <error@plt>
   12900:	ldr	r3, [pc, #52]	; 1293c <__assert_fail@plt+0x1908>
   12904:	ldr	r0, [r3]
   12908:	bl	10df4 <_exit@plt>
   1290c:	bl	10f20 <__errno_location@plt>
   12910:	mov	r3, r5
   12914:	ldr	r2, [pc, #36]	; 12940 <__assert_fail@plt+0x190c>
   12918:	ldr	r1, [r0]
   1291c:	mov	r0, r4
   12920:	bl	10ea8 <error@plt>
   12924:	b	12900 <__assert_fail@plt+0x18cc>
   12928:	andeq	r8, r2, ip, ror #2
   1292c:	andeq	r8, r2, r8, lsr #3
   12930:	andeq	r8, r2, r0, ror #2
   12934:	andeq	r6, r1, r8, ror #30
   12938:	andeq	r6, r1, r4, ror pc
   1293c:	andeq	r8, r2, r8, lsl #2
   12940:	andeq	r6, r1, r8, ror pc
   12944:	push	{r4, r5}
   12948:	pop	{r4, r5}
   1294c:	b	10db8 <posix_fadvise64@plt>
   12950:	cmp	r0, #0
   12954:	bxeq	lr
   12958:	push	{r4, lr}
   1295c:	sub	sp, sp, #16
   12960:	mov	r4, r1
   12964:	bl	10f5c <fileno@plt>
   12968:	mov	r2, #0
   1296c:	mov	r3, #0
   12970:	str	r4, [sp, #8]
   12974:	strd	r2, [sp]
   12978:	bl	10db8 <posix_fadvise64@plt>
   1297c:	add	sp, sp, #16
   12980:	pop	{r4, pc}
   12984:	push	{r4, r5, lr}
   12988:	sub	sp, sp, #12
   1298c:	mov	r4, r0
   12990:	bl	10f5c <fileno@plt>
   12994:	cmp	r0, #0
   12998:	mov	r0, r4
   1299c:	blt	12a18 <__assert_fail@plt+0x19e4>
   129a0:	bl	10ecc <__freading@plt>
   129a4:	cmp	r0, #0
   129a8:	bne	129e4 <__assert_fail@plt+0x19b0>
   129ac:	mov	r0, r4
   129b0:	bl	12a24 <__assert_fail@plt+0x19f0>
   129b4:	cmp	r0, #0
   129b8:	beq	12a14 <__assert_fail@plt+0x19e0>
   129bc:	bl	10f20 <__errno_location@plt>
   129c0:	mov	r5, r0
   129c4:	mov	r0, r4
   129c8:	ldr	r4, [r5]
   129cc:	bl	10f80 <fclose@plt>
   129d0:	cmp	r4, #0
   129d4:	mvnne	r0, #0
   129d8:	strne	r4, [r5]
   129dc:	add	sp, sp, #12
   129e0:	pop	{r4, r5, pc}
   129e4:	mov	r0, r4
   129e8:	bl	10f5c <fileno@plt>
   129ec:	mov	r3, #1
   129f0:	str	r3, [sp]
   129f4:	mov	r2, #0
   129f8:	mov	r3, #0
   129fc:	bl	10e78 <lseek64@plt>
   12a00:	mvn	r3, #0
   12a04:	mvn	r2, #0
   12a08:	cmp	r1, r3
   12a0c:	cmpeq	r0, r2
   12a10:	bne	129ac <__assert_fail@plt+0x1978>
   12a14:	mov	r0, r4
   12a18:	add	sp, sp, #12
   12a1c:	pop	{r4, r5, lr}
   12a20:	b	10f80 <fclose@plt>
   12a24:	push	{r4, lr}
   12a28:	subs	r4, r0, #0
   12a2c:	sub	sp, sp, #8
   12a30:	beq	12a4c <__assert_fail@plt+0x1a18>
   12a34:	bl	10ecc <__freading@plt>
   12a38:	cmp	r0, #0
   12a3c:	beq	12a4c <__assert_fail@plt+0x1a18>
   12a40:	ldr	r3, [r4]
   12a44:	tst	r3, #256	; 0x100
   12a48:	bne	12a5c <__assert_fail@plt+0x1a28>
   12a4c:	mov	r0, r4
   12a50:	add	sp, sp, #8
   12a54:	pop	{r4, lr}
   12a58:	b	10dc4 <fflush@plt>
   12a5c:	mov	r3, #1
   12a60:	str	r3, [sp]
   12a64:	mov	r2, #0
   12a68:	mov	r3, #0
   12a6c:	mov	r0, r4
   12a70:	bl	12adc <__assert_fail@plt+0x1aa8>
   12a74:	mov	r0, r4
   12a78:	add	sp, sp, #8
   12a7c:	pop	{r4, lr}
   12a80:	b	10dc4 <fflush@plt>
   12a84:	push	{r4, r5, lr}
   12a88:	sub	sp, sp, #12
   12a8c:	mov	r5, r0
   12a90:	bl	10f20 <__errno_location@plt>
   12a94:	mov	r2, #0
   12a98:	mov	r4, r0
   12a9c:	ldr	r3, [r0]
   12aa0:	str	r2, [r4]
   12aa4:	mov	r0, r5
   12aa8:	str	r3, [sp]
   12aac:	str	r3, [sp, #4]
   12ab0:	bl	10ddc <free@plt>
   12ab4:	ldr	r3, [r4]
   12ab8:	add	r2, sp, #8
   12abc:	cmp	r3, #0
   12ac0:	moveq	r3, #4
   12ac4:	movne	r3, #0
   12ac8:	add	r3, r2, r3
   12acc:	ldr	r3, [r3, #-8]
   12ad0:	str	r3, [r4]
   12ad4:	add	sp, sp, #12
   12ad8:	pop	{r4, r5, pc}
   12adc:	push	{r4, r5, r6, r7, r8, lr}
   12ae0:	sub	sp, sp, #8
   12ae4:	ldmib	r0, {ip, lr}
   12ae8:	mov	r4, r0
   12aec:	ldr	r5, [sp, #32]
   12af0:	cmp	lr, ip
   12af4:	beq	12b0c <__assert_fail@plt+0x1ad8>
   12af8:	str	r5, [sp, #32]
   12afc:	mov	r0, r4
   12b00:	add	sp, sp, #8
   12b04:	pop	{r4, r5, r6, r7, r8, lr}
   12b08:	b	10f8c <fseeko64@plt>
   12b0c:	ldr	lr, [r0, #20]
   12b10:	ldr	ip, [r0, #16]
   12b14:	cmp	lr, ip
   12b18:	bne	12af8 <__assert_fail@plt+0x1ac4>
   12b1c:	ldr	r8, [r0, #36]	; 0x24
   12b20:	cmp	r8, #0
   12b24:	bne	12af8 <__assert_fail@plt+0x1ac4>
   12b28:	mov	r6, r2
   12b2c:	mov	r7, r3
   12b30:	bl	10f5c <fileno@plt>
   12b34:	mov	r2, r6
   12b38:	mov	r3, r7
   12b3c:	str	r5, [sp]
   12b40:	bl	10e78 <lseek64@plt>
   12b44:	mvn	r3, #0
   12b48:	mvn	r2, #0
   12b4c:	cmp	r1, r3
   12b50:	cmpeq	r0, r2
   12b54:	beq	12b74 <__assert_fail@plt+0x1b40>
   12b58:	ldr	r3, [r4]
   12b5c:	strd	r0, [r4, #80]	; 0x50
   12b60:	mov	r0, r8
   12b64:	bic	r3, r3, #16
   12b68:	str	r3, [r4]
   12b6c:	add	sp, sp, #8
   12b70:	pop	{r4, r5, r6, r7, r8, pc}
   12b74:	mvn	r0, #0
   12b78:	b	12b6c <__assert_fail@plt+0x1b38>
   12b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b80:	sub	sp, sp, #44	; 0x2c
   12b84:	ldr	fp, [r0]
   12b88:	str	r0, [sp, #24]
   12b8c:	cmp	fp, #0
   12b90:	str	r1, [sp, #28]
   12b94:	str	r2, [sp, #16]
   12b98:	mov	sl, r3
   12b9c:	ldr	r7, [r1]
   12ba0:	ldr	r8, [sp, #88]	; 0x58
   12ba4:	beq	12e20 <__assert_fail@plt+0x1dec>
   12ba8:	ldr	r3, [sp, #16]
   12bac:	cmp	r7, r3
   12bb0:	bcc	12bd0 <__assert_fail@plt+0x1b9c>
   12bb4:	cmp	r7, sl
   12bb8:	cmpcs	r7, r3
   12bbc:	moveq	r2, #1
   12bc0:	movne	r2, #0
   12bc4:	str	r2, [sp, #8]
   12bc8:	sub	r4, r7, r3
   12bcc:	bne	12bec <__assert_fail@plt+0x1bb8>
   12bd0:	ldr	r3, [sp, #24]
   12bd4:	mvn	r0, #0
   12bd8:	str	fp, [r3]
   12bdc:	ldr	r3, [sp, #28]
   12be0:	str	r7, [r3]
   12be4:	add	sp, sp, #44	; 0x2c
   12be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bec:	ldr	r3, [sp, #80]	; 0x50
   12bf0:	cmn	r3, #1
   12bf4:	ldr	r3, [sp, #84]	; 0x54
   12bf8:	streq	r3, [sp, #80]	; 0x50
   12bfc:	beq	12c10 <__assert_fail@plt+0x1bdc>
   12c00:	ldr	r2, [sp, #80]	; 0x50
   12c04:	cmn	r3, #1
   12c08:	moveq	r3, r2
   12c0c:	str	r3, [sp, #84]	; 0x54
   12c10:	ldr	r3, [sp, #16]
   12c14:	str	fp, [sp, #12]
   12c18:	add	r5, fp, r3
   12c1c:	ldr	fp, [sp, #80]	; 0x50
   12c20:	b	12d20 <__assert_fail@plt+0x1cec>
   12c24:	cmn	fp, #1
   12c28:	bne	12d88 <__assert_fail@plt+0x1d54>
   12c2c:	ldr	r1, [sp, #36]	; 0x24
   12c30:	ldr	r9, [sp, #8]
   12c34:	add	r1, r1, #1
   12c38:	mov	r2, #0
   12c3c:	cmp	r7, sl
   12c40:	cmpcc	r4, r1
   12c44:	bcs	12cb8 <__assert_fail@plt+0x1c84>
   12c48:	ldr	r0, [sp, #12]
   12c4c:	cmp	r7, #63	; 0x3f
   12c50:	addls	r3, r7, #64	; 0x40
   12c54:	lslhi	r3, r7, #1
   12c58:	sub	r5, r5, r0
   12c5c:	sub	r0, r3, r5
   12c60:	cmp	r0, r1
   12c64:	addcc	r3, r5, r1
   12c68:	cmp	r3, sl
   12c6c:	cmpls	r7, r3
   12c70:	ldr	r0, [sp, #16]
   12c74:	movcs	r3, sl
   12c78:	sub	r1, r3, r0
   12c7c:	cmp	r1, #0
   12c80:	blt	12d74 <__assert_fail@plt+0x1d40>
   12c84:	mov	r1, r3
   12c88:	ldr	r0, [sp, #12]
   12c8c:	str	r3, [sp, #4]
   12c90:	str	r2, [sp, #20]
   12c94:	bl	159bc <__assert_fail@plt+0x4988>
   12c98:	ldr	r3, [sp, #4]
   12c9c:	sub	r4, r3, r5
   12ca0:	cmp	r0, #0
   12ca4:	beq	12d80 <__assert_fail@plt+0x1d4c>
   12ca8:	ldr	r2, [sp, #20]
   12cac:	add	r5, r0, r5
   12cb0:	mov	r7, r3
   12cb4:	str	r0, [sp, #12]
   12cb8:	cmp	r4, #1
   12cbc:	bls	12cfc <__assert_fail@plt+0x1cc8>
   12cc0:	ldr	r3, [sp, #36]	; 0x24
   12cc4:	sub	r1, r4, #1
   12cc8:	cmp	r1, r3
   12ccc:	movcc	r3, r1
   12cd0:	cmp	r6, #0
   12cd4:	strbeq	r2, [r5]
   12cd8:	beq	12cf4 <__assert_fail@plt+0x1cc0>
   12cdc:	mov	r2, r3
   12ce0:	mov	r1, r6
   12ce4:	mov	r0, r5
   12ce8:	str	r3, [sp, #4]
   12cec:	bl	10e00 <memcpy@plt>
   12cf0:	ldr	r3, [sp, #4]
   12cf4:	add	r5, r5, r3
   12cf8:	sub	r4, r4, r3
   12cfc:	cmp	r6, #0
   12d00:	beq	12d18 <__assert_fail@plt+0x1ce4>
   12d04:	ldr	r1, [sp, #36]	; 0x24
   12d08:	mov	r0, r8
   12d0c:	bl	15ac4 <__assert_fail@plt+0x4a90>
   12d10:	cmp	r0, #0
   12d14:	bne	12d80 <__assert_fail@plt+0x1d4c>
   12d18:	cmp	r9, #0
   12d1c:	bne	12dc8 <__assert_fail@plt+0x1d94>
   12d20:	add	r1, sp, #36	; 0x24
   12d24:	mov	r0, r8
   12d28:	bl	15a94 <__assert_fail@plt+0x4a60>
   12d2c:	subs	r6, r0, #0
   12d30:	bne	12c24 <__assert_fail@plt+0x1bf0>
   12d34:	ldr	r3, [r8, #4]
   12d38:	ldr	r2, [r8, #8]
   12d3c:	cmp	r3, r2
   12d40:	bcs	12dfc <__assert_fail@plt+0x1dc8>
   12d44:	add	r2, r3, #1
   12d48:	str	r2, [r8, #4]
   12d4c:	ldrb	r2, [r3]
   12d50:	ldr	r3, [sp, #84]	; 0x54
   12d54:	mov	r1, #2
   12d58:	cmp	r3, r2
   12d5c:	cmpne	fp, r2
   12d60:	mov	r3, #1
   12d64:	moveq	r9, #1
   12d68:	movne	r9, #0
   12d6c:	str	r3, [sp, #36]	; 0x24
   12d70:	b	12c3c <__assert_fail@plt+0x1c08>
   12d74:	add	r3, r0, #-2147483648	; 0x80000000
   12d78:	cmp	r7, r3
   12d7c:	bne	12c84 <__assert_fail@plt+0x1c50>
   12d80:	ldr	fp, [sp, #12]
   12d84:	b	12bd0 <__assert_fail@plt+0x1b9c>
   12d88:	ldr	r9, [sp, #36]	; 0x24
   12d8c:	ldr	r2, [sp, #84]	; 0x54
   12d90:	mov	r3, r9
   12d94:	mov	r1, fp
   12d98:	bl	12e40 <__assert_fail@plt+0x1e0c>
   12d9c:	cmp	r0, #0
   12da0:	subne	r9, r0, r6
   12da4:	addne	r9, r9, #1
   12da8:	addeq	r1, r9, #1
   12dac:	strne	r9, [sp, #36]	; 0x24
   12db0:	addne	r1, r9, #1
   12db4:	ldreq	r9, [sp, #8]
   12db8:	moveq	r2, #0
   12dbc:	movne	r2, #0
   12dc0:	movne	r9, #1
   12dc4:	b	12c3c <__assert_fail@plt+0x1c08>
   12dc8:	ldr	fp, [sp, #12]
   12dcc:	ldr	r3, [sp, #16]
   12dd0:	add	r0, fp, r3
   12dd4:	mov	r3, #0
   12dd8:	strb	r3, [r5]
   12ddc:	ldr	r3, [sp, #24]
   12de0:	subs	r0, r5, r0
   12de4:	str	fp, [r3]
   12de8:	ldr	r3, [sp, #28]
   12dec:	str	r7, [r3]
   12df0:	bne	12be4 <__assert_fail@plt+0x1bb0>
   12df4:	mvn	r0, #0
   12df8:	b	12be4 <__assert_fail@plt+0x1bb0>
   12dfc:	mov	r0, r8
   12e00:	bl	10fa4 <__uflow@plt>
   12e04:	cmn	r0, #1
   12e08:	mov	r2, r0
   12e0c:	bne	12d50 <__assert_fail@plt+0x1d1c>
   12e10:	ldr	fp, [sp, #12]
   12e14:	cmp	r5, fp
   12e18:	bne	12dcc <__assert_fail@plt+0x1d98>
   12e1c:	b	12bd0 <__assert_fail@plt+0x1b9c>
   12e20:	cmp	r3, #64	; 0x40
   12e24:	movcc	r7, r3
   12e28:	movcs	r7, #64	; 0x40
   12e2c:	mov	r0, r7
   12e30:	bl	15990 <__assert_fail@plt+0x495c>
   12e34:	subs	fp, r0, #0
   12e38:	bne	12ba8 <__assert_fail@plt+0x1b74>
   12e3c:	b	12df4 <__assert_fail@plt+0x1dc0>
   12e40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e44:	uxtb	lr, r1
   12e48:	uxtb	r4, r2
   12e4c:	cmp	lr, r4
   12e50:	beq	12f84 <__assert_fail@plt+0x1f50>
   12e54:	cmp	r3, #0
   12e58:	mov	r6, r0
   12e5c:	beq	12ea4 <__assert_fail@plt+0x1e70>
   12e60:	tst	r0, #3
   12e64:	beq	12ea4 <__assert_fail@plt+0x1e70>
   12e68:	ldrb	r0, [r0]
   12e6c:	cmp	lr, r0
   12e70:	cmpne	r4, r0
   12e74:	beq	12f94 <__assert_fail@plt+0x1f60>
   12e78:	add	ip, r6, #1
   12e7c:	b	12e98 <__assert_fail@plt+0x1e64>
   12e80:	tst	ip, #3
   12e84:	beq	12ea4 <__assert_fail@plt+0x1e70>
   12e88:	ldrb	r5, [ip], #1
   12e8c:	cmp	r4, r5
   12e90:	cmpne	lr, r5
   12e94:	beq	12f94 <__assert_fail@plt+0x1f60>
   12e98:	subs	r3, r3, #1
   12e9c:	mov	r6, ip
   12ea0:	bne	12e80 <__assert_fail@plt+0x1e4c>
   12ea4:	ldr	r7, [pc, #272]	; 12fbc <__assert_fail@plt+0x1f88>
   12ea8:	cmp	r3, #3
   12eac:	and	r5, r7, r1, lsl #8
   12eb0:	and	r7, r7, r2, lsl #8
   12eb4:	orr	r5, r5, lr
   12eb8:	orr	r7, r7, r4
   12ebc:	orr	r5, r5, r5, lsl #16
   12ec0:	orr	r7, r7, r7, lsl #16
   12ec4:	bls	12fa4 <__assert_fail@plt+0x1f70>
   12ec8:	ldr	r0, [r6]
   12ecc:	ldr	r1, [pc, #236]	; 12fc0 <__assert_fail@plt+0x1f8c>
   12ed0:	eor	r8, r5, r0
   12ed4:	eor	r0, r0, r7
   12ed8:	add	ip, r0, r1
   12edc:	add	r2, r8, r1
   12ee0:	bic	r0, ip, r0
   12ee4:	bic	r2, r2, r8
   12ee8:	ldr	ip, [pc, #212]	; 12fc4 <__assert_fail@plt+0x1f90>
   12eec:	orr	r2, r2, r0
   12ef0:	tst	r2, ip
   12ef4:	addeq	r2, r6, #4
   12ef8:	moveq	r6, ip
   12efc:	beq	12f2c <__assert_fail@plt+0x1ef8>
   12f00:	b	12fac <__assert_fail@plt+0x1f78>
   12f04:	ldr	ip, [r2], #4
   12f08:	eor	sl, r5, ip
   12f0c:	eor	ip, ip, r7
   12f10:	add	r0, sl, r1
   12f14:	add	r9, ip, r1
   12f18:	bic	r0, r0, sl
   12f1c:	bic	ip, r9, ip
   12f20:	orr	r0, r0, ip
   12f24:	tst	r0, r6
   12f28:	bne	12f9c <__assert_fail@plt+0x1f68>
   12f2c:	sub	r3, r3, #4
   12f30:	cmp	r3, #3
   12f34:	mov	r8, r2
   12f38:	bhi	12f04 <__assert_fail@plt+0x1ed0>
   12f3c:	cmp	r3, #0
   12f40:	beq	12f7c <__assert_fail@plt+0x1f48>
   12f44:	ldrb	r1, [r2]
   12f48:	cmp	r4, r1
   12f4c:	cmpne	lr, r1
   12f50:	beq	12fb4 <__assert_fail@plt+0x1f80>
   12f54:	add	r3, r2, r3
   12f58:	add	r2, r2, #1
   12f5c:	b	12f70 <__assert_fail@plt+0x1f3c>
   12f60:	ldrb	r1, [r2], #1
   12f64:	cmp	lr, r1
   12f68:	cmpne	r4, r1
   12f6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f70:	cmp	r2, r3
   12f74:	mov	r0, r2
   12f78:	bne	12f60 <__assert_fail@plt+0x1f2c>
   12f7c:	mov	r0, #0
   12f80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f84:	mov	r1, lr
   12f88:	mov	r2, r3
   12f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f90:	b	10f74 <memchr@plt>
   12f94:	mov	r0, r6
   12f98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f9c:	mov	r2, r8
   12fa0:	b	12f44 <__assert_fail@plt+0x1f10>
   12fa4:	mov	r2, r6
   12fa8:	b	12f3c <__assert_fail@plt+0x1f08>
   12fac:	mov	r2, r6
   12fb0:	b	12f44 <__assert_fail@plt+0x1f10>
   12fb4:	mov	r0, r2
   12fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fbc:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   12fc0:	mrc2	14, 7, pc, cr14, cr15, {7}
   12fc4:	addhi	r8, r0, r0, lsl #1
   12fc8:	push	{r4, r5, r6, lr}
   12fcc:	subs	r4, r0, #0
   12fd0:	beq	13044 <__assert_fail@plt+0x2010>
   12fd4:	mov	r1, #47	; 0x2f
   12fd8:	bl	10fc8 <strrchr@plt>
   12fdc:	subs	r5, r0, #0
   12fe0:	beq	13030 <__assert_fail@plt+0x1ffc>
   12fe4:	add	r6, r5, #1
   12fe8:	sub	r3, r6, r4
   12fec:	cmp	r3, #6
   12ff0:	ble	13030 <__assert_fail@plt+0x1ffc>
   12ff4:	mov	r2, #7
   12ff8:	ldr	r1, [pc, #96]	; 13060 <__assert_fail@plt+0x202c>
   12ffc:	sub	r0, r5, #6
   13000:	bl	11010 <strncmp@plt>
   13004:	cmp	r0, #0
   13008:	bne	13030 <__assert_fail@plt+0x1ffc>
   1300c:	mov	r2, #3
   13010:	ldr	r1, [pc, #76]	; 13064 <__assert_fail@plt+0x2030>
   13014:	mov	r0, r6
   13018:	bl	11010 <strncmp@plt>
   1301c:	cmp	r0, #0
   13020:	movne	r4, r6
   13024:	ldreq	r3, [pc, #60]	; 13068 <__assert_fail@plt+0x2034>
   13028:	addeq	r4, r5, #4
   1302c:	streq	r4, [r3]
   13030:	ldr	r2, [pc, #52]	; 1306c <__assert_fail@plt+0x2038>
   13034:	ldr	r3, [pc, #52]	; 13070 <__assert_fail@plt+0x203c>
   13038:	str	r4, [r2]
   1303c:	str	r4, [r3]
   13040:	pop	{r4, r5, r6, pc}
   13044:	ldr	r3, [pc, #40]	; 13074 <__assert_fail@plt+0x2040>
   13048:	mov	r2, #55	; 0x37
   1304c:	mov	r1, #1
   13050:	ldr	r3, [r3]
   13054:	ldr	r0, [pc, #28]	; 13078 <__assert_fail@plt+0x2044>
   13058:	bl	10e6c <fwrite@plt>
   1305c:	bl	1101c <abort@plt>
   13060:			; <UNDEFINED> instruction: 0x00016fb4
   13064:			; <UNDEFINED> instruction: 0x00016fbc
   13068:	andeq	r8, r2, r0, asr r1
   1306c:			; <UNDEFINED> instruction: 0x000281b0
   13070:	andeq	r8, r2, r4, asr r1
   13074:	andeq	r8, r2, r0, ror #2
   13078:	andeq	r6, r1, ip, ror pc
   1307c:	push	{r4, r5, r6, lr}
   13080:	mov	r2, #48	; 0x30
   13084:	mov	r4, r1
   13088:	mov	r1, #0
   1308c:	mov	r5, r0
   13090:	bl	10f38 <memset@plt>
   13094:	cmp	r4, #10
   13098:	beq	130a8 <__assert_fail@plt+0x2074>
   1309c:	str	r4, [r5]
   130a0:	mov	r0, r5
   130a4:	pop	{r4, r5, r6, pc}
   130a8:	bl	1101c <abort@plt>
   130ac:	push	{r4, r5, r6, lr}
   130b0:	mov	r4, r0
   130b4:	mov	r5, r1
   130b8:	bl	15c20 <__assert_fail@plt+0x4bec>
   130bc:	ldrb	r3, [r0]
   130c0:	bic	r3, r3, #32
   130c4:	cmp	r3, #85	; 0x55
   130c8:	bne	13128 <__assert_fail@plt+0x20f4>
   130cc:	ldrb	r3, [r0, #1]
   130d0:	bic	r3, r3, #32
   130d4:	cmp	r3, #84	; 0x54
   130d8:	bne	13164 <__assert_fail@plt+0x2130>
   130dc:	ldrb	r3, [r0, #2]
   130e0:	bic	r3, r3, #32
   130e4:	cmp	r3, #70	; 0x46
   130e8:	bne	13164 <__assert_fail@plt+0x2130>
   130ec:	ldrb	r3, [r0, #3]
   130f0:	cmp	r3, #45	; 0x2d
   130f4:	bne	13164 <__assert_fail@plt+0x2130>
   130f8:	ldrb	r3, [r0, #4]
   130fc:	cmp	r3, #56	; 0x38
   13100:	bne	13164 <__assert_fail@plt+0x2130>
   13104:	ldrb	r3, [r0, #5]
   13108:	cmp	r3, #0
   1310c:	bne	13164 <__assert_fail@plt+0x2130>
   13110:	ldrb	r2, [r4]
   13114:	ldr	r3, [pc, #152]	; 131b4 <__assert_fail@plt+0x2180>
   13118:	ldr	r0, [pc, #152]	; 131b8 <__assert_fail@plt+0x2184>
   1311c:	cmp	r2, #96	; 0x60
   13120:	movne	r0, r3
   13124:	pop	{r4, r5, r6, pc}
   13128:	cmp	r3, #71	; 0x47
   1312c:	bne	13164 <__assert_fail@plt+0x2130>
   13130:	ldrb	r3, [r0, #1]
   13134:	bic	r3, r3, #32
   13138:	cmp	r3, #66	; 0x42
   1313c:	bne	13164 <__assert_fail@plt+0x2130>
   13140:	ldrb	r3, [r0, #2]
   13144:	cmp	r3, #49	; 0x31
   13148:	bne	13164 <__assert_fail@plt+0x2130>
   1314c:	ldrb	r3, [r0, #3]
   13150:	cmp	r3, #56	; 0x38
   13154:	bne	13164 <__assert_fail@plt+0x2130>
   13158:	ldrb	r3, [r0, #4]
   1315c:	cmp	r3, #48	; 0x30
   13160:	beq	13178 <__assert_fail@plt+0x2144>
   13164:	ldr	r3, [pc, #80]	; 131bc <__assert_fail@plt+0x2188>
   13168:	cmp	r5, #9
   1316c:	ldr	r0, [pc, #76]	; 131c0 <__assert_fail@plt+0x218c>
   13170:	movne	r0, r3
   13174:	pop	{r4, r5, r6, pc}
   13178:	ldrb	r3, [r0, #5]
   1317c:	cmp	r3, #51	; 0x33
   13180:	bne	13164 <__assert_fail@plt+0x2130>
   13184:	ldrb	r3, [r0, #6]
   13188:	cmp	r3, #48	; 0x30
   1318c:	bne	13164 <__assert_fail@plt+0x2130>
   13190:	ldrb	r3, [r0, #7]
   13194:	cmp	r3, #0
   13198:	bne	13164 <__assert_fail@plt+0x2130>
   1319c:	ldrb	r2, [r4]
   131a0:	ldr	r3, [pc, #28]	; 131c4 <__assert_fail@plt+0x2190>
   131a4:	ldr	r0, [pc, #28]	; 131c8 <__assert_fail@plt+0x2194>
   131a8:	cmp	r2, #96	; 0x60
   131ac:	movne	r0, r3
   131b0:	pop	{r4, r5, r6, pc}
   131b4:	andeq	r7, r1, r8, lsl r0
   131b8:	andeq	r7, r1, r4, lsl r0
   131bc:	andeq	r7, r1, r8, lsr #32
   131c0:	andeq	r7, r1, r4, lsr #32
   131c4:	andeq	r7, r1, r0, lsr #32
   131c8:	andeq	r7, r1, ip, lsl r0
   131cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131d0:	sub	sp, sp, #116	; 0x74
   131d4:	mov	sl, r0
   131d8:	str	r3, [sp, #24]
   131dc:	mov	r3, #1
   131e0:	mov	r8, r1
   131e4:	str	r2, [sp, #56]	; 0x38
   131e8:	str	r3, [sp, #36]	; 0x24
   131ec:	bl	10e84 <__ctype_get_mb_cur_max@plt>
   131f0:	ldr	r3, [sp, #156]	; 0x9c
   131f4:	mov	fp, r8
   131f8:	mov	r2, #0
   131fc:	lsr	r3, r3, #1
   13200:	and	r3, r3, #1
   13204:	str	r2, [sp, #68]	; 0x44
   13208:	str	r3, [sp, #28]
   1320c:	str	r2, [sp, #40]	; 0x28
   13210:	str	r2, [sp, #44]	; 0x2c
   13214:	str	r2, [sp, #52]	; 0x34
   13218:	str	r2, [sp, #64]	; 0x40
   1321c:	str	r2, [sp, #72]	; 0x48
   13220:	str	sl, [sp, #32]
   13224:	str	r0, [sp, #76]	; 0x4c
   13228:	ldr	r3, [sp, #152]	; 0x98
   1322c:	cmp	r3, #10
   13230:	ldrls	pc, [pc, r3, lsl #2]
   13234:	b	143f4 <__assert_fail@plt+0x33c0>
   13238:	andeq	r3, r1, r4, ror #4
   1323c:	andeq	r3, r1, ip, asr #10
   13240:	andeq	r3, r1, r0, ror r5
   13244:	muleq	r1, r4, r5
   13248:	andeq	r3, r1, r0, asr #13
   1324c:	muleq	r1, r4, r6
   13250:	andeq	r3, r1, ip, ror #12
   13254:	andeq	r3, r1, r8, lsr #11
   13258:	andeq	r3, r1, r0, asr #11
   1325c:	andeq	r3, r1, r0, asr #11
   13260:	andeq	r3, r1, r0, asr #11
   13264:	mov	r3, #0
   13268:	mov	r7, r3
   1326c:	str	r3, [sp, #28]
   13270:	ldr	r3, [sp, #44]	; 0x2c
   13274:	mov	sl, #0
   13278:	eor	r3, r3, #1
   1327c:	str	r3, [sp, #60]	; 0x3c
   13280:	ldr	r3, [sp, #24]
   13284:	cmn	r3, #1
   13288:	beq	137ec <__assert_fail@plt+0x27b8>
   1328c:	ldr	r3, [sp, #24]
   13290:	subs	r5, r3, sl
   13294:	movne	r5, #1
   13298:	cmp	r5, #0
   1329c:	beq	13804 <__assert_fail@plt+0x27d0>
   132a0:	ldr	r3, [sp, #152]	; 0x98
   132a4:	ldr	r8, [sp, #44]	; 0x2c
   132a8:	cmp	r3, #2
   132ac:	moveq	r8, #0
   132b0:	andne	r8, r8, #1
   132b4:	ldr	r3, [sp, #52]	; 0x34
   132b8:	adds	r9, r3, #0
   132bc:	movne	r9, #1
   132c0:	ands	r6, r9, r8
   132c4:	beq	13c6c <__assert_fail@plt+0x2c38>
   132c8:	ldr	r2, [sp, #52]	; 0x34
   132cc:	ldr	r1, [sp, #24]
   132d0:	cmp	r2, #1
   132d4:	mov	r3, r2
   132d8:	movls	r3, #0
   132dc:	movhi	r3, #1
   132e0:	cmn	r1, #1
   132e4:	movne	r3, #0
   132e8:	cmp	r3, #0
   132ec:	add	r4, sl, r2
   132f0:	beq	13300 <__assert_fail@plt+0x22cc>
   132f4:	ldr	r0, [sp, #56]	; 0x38
   132f8:	bl	10f08 <strlen@plt>
   132fc:	str	r0, [sp, #24]
   13300:	ldr	r3, [sp, #24]
   13304:	cmp	r3, r4
   13308:	ldr	r3, [sp, #56]	; 0x38
   1330c:	add	r3, r3, sl
   13310:	str	r3, [sp, #48]	; 0x30
   13314:	bcc	13c78 <__assert_fail@plt+0x2c44>
   13318:	mov	r0, r3
   1331c:	ldr	r2, [sp, #52]	; 0x34
   13320:	ldr	r1, [sp, #64]	; 0x40
   13324:	bl	10e24 <memcmp@plt>
   13328:	cmp	r0, #0
   1332c:	bne	13c78 <__assert_fail@plt+0x2c44>
   13330:	ldr	r3, [sp, #28]
   13334:	cmp	r3, #0
   13338:	bne	144f4 <__assert_fail@plt+0x34c0>
   1333c:	ldr	r3, [sp, #48]	; 0x30
   13340:	ldrb	r4, [r3]
   13344:	cmp	r4, #126	; 0x7e
   13348:	ldrls	pc, [pc, r4, lsl #2]
   1334c:	b	13c0c <__assert_fail@plt+0x2bd8>
   13350:	andeq	r3, r1, r0, lsr sl
   13354:	andeq	r3, r1, ip, lsl #24
   13358:	andeq	r3, r1, ip, lsl #24
   1335c:	andeq	r3, r1, ip, lsl #24
   13360:	andeq	r3, r1, ip, lsl #24
   13364:	andeq	r3, r1, ip, lsl #24
   13368:	andeq	r3, r1, ip, lsl #24
   1336c:	andeq	r3, r1, r4, lsl sl
   13370:	strdeq	r3, [r1], -r8
   13374:	strdeq	r3, [r1], -r4
   13378:	andeq	r3, r1, r8, asr r9
   1337c:	andeq	r3, r1, ip, lsr r9
   13380:	ldrdeq	r3, [r1], -r0
   13384:	andeq	r3, r1, ip, lsr #23
   13388:	andeq	r3, r1, ip, lsl #24
   1338c:	andeq	r3, r1, ip, lsl #24
   13390:	andeq	r3, r1, ip, lsl #24
   13394:	andeq	r3, r1, ip, lsl #24
   13398:	andeq	r3, r1, ip, lsl #24
   1339c:	andeq	r3, r1, ip, lsl #24
   133a0:	andeq	r3, r1, ip, lsl #24
   133a4:	andeq	r3, r1, ip, lsl #24
   133a8:	andeq	r3, r1, ip, lsl #24
   133ac:	andeq	r3, r1, ip, lsl #24
   133b0:	andeq	r3, r1, ip, lsl #24
   133b4:	andeq	r3, r1, ip, lsl #24
   133b8:	andeq	r3, r1, ip, lsl #24
   133bc:	andeq	r3, r1, ip, lsl #24
   133c0:	andeq	r3, r1, ip, lsl #24
   133c4:	andeq	r3, r1, ip, lsl #24
   133c8:	andeq	r3, r1, ip, lsl #24
   133cc:	andeq	r3, r1, ip, lsl #24
   133d0:	andeq	r3, r1, ip, ror #23
   133d4:	andeq	r3, r1, r0, lsr #22
   133d8:	andeq	r3, r1, r0, lsr #22
   133dc:	andeq	r3, r1, r0, lsr r7
   133e0:	andeq	r3, r1, r0, lsr #22
   133e4:			; <UNDEFINED> instruction: 0x00013bb8
   133e8:	andeq	r3, r1, r0, lsr #22
   133ec:	andeq	r3, r1, ip, lsl #23
   133f0:	andeq	r3, r1, r0, lsr #22
   133f4:	andeq	r3, r1, r0, lsr #22
   133f8:	andeq	r3, r1, r0, lsr #22
   133fc:			; <UNDEFINED> instruction: 0x00013bb8
   13400:			; <UNDEFINED> instruction: 0x00013bb8
   13404:			; <UNDEFINED> instruction: 0x00013bb8
   13408:			; <UNDEFINED> instruction: 0x00013bb8
   1340c:			; <UNDEFINED> instruction: 0x00013bb8
   13410:			; <UNDEFINED> instruction: 0x00013bb8
   13414:			; <UNDEFINED> instruction: 0x00013bb8
   13418:			; <UNDEFINED> instruction: 0x00013bb8
   1341c:			; <UNDEFINED> instruction: 0x00013bb8
   13420:			; <UNDEFINED> instruction: 0x00013bb8
   13424:			; <UNDEFINED> instruction: 0x00013bb8
   13428:			; <UNDEFINED> instruction: 0x00013bb8
   1342c:			; <UNDEFINED> instruction: 0x00013bb8
   13430:			; <UNDEFINED> instruction: 0x00013bb8
   13434:			; <UNDEFINED> instruction: 0x00013bb8
   13438:			; <UNDEFINED> instruction: 0x00013bb8
   1343c:	andeq	r3, r1, r0, lsr #22
   13440:	andeq	r3, r1, r0, lsr #22
   13444:	andeq	r3, r1, r0, lsr #22
   13448:	andeq	r3, r1, r0, lsr #22
   1344c:	andeq	r3, r1, ip, asr fp
   13450:	andeq	r3, r1, ip, lsl #24
   13454:			; <UNDEFINED> instruction: 0x00013bb8
   13458:			; <UNDEFINED> instruction: 0x00013bb8
   1345c:			; <UNDEFINED> instruction: 0x00013bb8
   13460:			; <UNDEFINED> instruction: 0x00013bb8
   13464:			; <UNDEFINED> instruction: 0x00013bb8
   13468:			; <UNDEFINED> instruction: 0x00013bb8
   1346c:			; <UNDEFINED> instruction: 0x00013bb8
   13470:			; <UNDEFINED> instruction: 0x00013bb8
   13474:			; <UNDEFINED> instruction: 0x00013bb8
   13478:			; <UNDEFINED> instruction: 0x00013bb8
   1347c:			; <UNDEFINED> instruction: 0x00013bb8
   13480:			; <UNDEFINED> instruction: 0x00013bb8
   13484:			; <UNDEFINED> instruction: 0x00013bb8
   13488:			; <UNDEFINED> instruction: 0x00013bb8
   1348c:			; <UNDEFINED> instruction: 0x00013bb8
   13490:			; <UNDEFINED> instruction: 0x00013bb8
   13494:			; <UNDEFINED> instruction: 0x00013bb8
   13498:			; <UNDEFINED> instruction: 0x00013bb8
   1349c:			; <UNDEFINED> instruction: 0x00013bb8
   134a0:			; <UNDEFINED> instruction: 0x00013bb8
   134a4:			; <UNDEFINED> instruction: 0x00013bb8
   134a8:			; <UNDEFINED> instruction: 0x00013bb8
   134ac:			; <UNDEFINED> instruction: 0x00013bb8
   134b0:			; <UNDEFINED> instruction: 0x00013bb8
   134b4:			; <UNDEFINED> instruction: 0x00013bb8
   134b8:			; <UNDEFINED> instruction: 0x00013bb8
   134bc:	andeq	r3, r1, r0, lsr #22
   134c0:	andeq	r3, r1, ip, ror r8
   134c4:			; <UNDEFINED> instruction: 0x00013bb8
   134c8:	andeq	r3, r1, r0, lsr #22
   134cc:			; <UNDEFINED> instruction: 0x00013bb8
   134d0:	andeq	r3, r1, r0, lsr #22
   134d4:			; <UNDEFINED> instruction: 0x00013bb8
   134d8:			; <UNDEFINED> instruction: 0x00013bb8
   134dc:			; <UNDEFINED> instruction: 0x00013bb8
   134e0:			; <UNDEFINED> instruction: 0x00013bb8
   134e4:			; <UNDEFINED> instruction: 0x00013bb8
   134e8:			; <UNDEFINED> instruction: 0x00013bb8
   134ec:			; <UNDEFINED> instruction: 0x00013bb8
   134f0:			; <UNDEFINED> instruction: 0x00013bb8
   134f4:			; <UNDEFINED> instruction: 0x00013bb8
   134f8:			; <UNDEFINED> instruction: 0x00013bb8
   134fc:			; <UNDEFINED> instruction: 0x00013bb8
   13500:			; <UNDEFINED> instruction: 0x00013bb8
   13504:			; <UNDEFINED> instruction: 0x00013bb8
   13508:			; <UNDEFINED> instruction: 0x00013bb8
   1350c:			; <UNDEFINED> instruction: 0x00013bb8
   13510:			; <UNDEFINED> instruction: 0x00013bb8
   13514:			; <UNDEFINED> instruction: 0x00013bb8
   13518:			; <UNDEFINED> instruction: 0x00013bb8
   1351c:			; <UNDEFINED> instruction: 0x00013bb8
   13520:			; <UNDEFINED> instruction: 0x00013bb8
   13524:			; <UNDEFINED> instruction: 0x00013bb8
   13528:			; <UNDEFINED> instruction: 0x00013bb8
   1352c:			; <UNDEFINED> instruction: 0x00013bb8
   13530:			; <UNDEFINED> instruction: 0x00013bb8
   13534:			; <UNDEFINED> instruction: 0x00013bb8
   13538:			; <UNDEFINED> instruction: 0x00013bb8
   1353c:	andeq	r3, r1, r0, lsl r7
   13540:	andeq	r3, r1, r0, lsr #22
   13544:	andeq	r3, r1, r0, lsl r7
   13548:	andeq	r3, r1, r0, lsr r7
   1354c:	mov	r3, #1
   13550:	str	r3, [sp, #28]
   13554:	str	r3, [sp, #52]	; 0x34
   13558:	ldr	r3, [pc, #4000]	; 14500 <__assert_fail@plt+0x34cc>
   1355c:	mov	r7, #0
   13560:	str	r3, [sp, #64]	; 0x40
   13564:	mov	r3, #2
   13568:	str	r3, [sp, #152]	; 0x98
   1356c:	b	13270 <__assert_fail@plt+0x223c>
   13570:	ldr	r3, [sp, #28]
   13574:	cmp	r3, #0
   13578:	beq	136d4 <__assert_fail@plt+0x26a0>
   1357c:	mov	r3, #1
   13580:	str	r3, [sp, #52]	; 0x34
   13584:	ldr	r3, [pc, #3956]	; 14500 <__assert_fail@plt+0x34cc>
   13588:	mov	r7, #0
   1358c:	str	r3, [sp, #64]	; 0x40
   13590:	b	13270 <__assert_fail@plt+0x223c>
   13594:	mov	r3, #1
   13598:	str	r3, [sp, #44]	; 0x2c
   1359c:	str	r3, [sp, #52]	; 0x34
   135a0:	str	r3, [sp, #28]
   135a4:	b	13558 <__assert_fail@plt+0x2524>
   135a8:	mov	r3, #0
   135ac:	str	r3, [sp, #28]
   135b0:	mov	r3, #1
   135b4:	str	r3, [sp, #44]	; 0x2c
   135b8:	mov	r7, #0
   135bc:	b	13270 <__assert_fail@plt+0x223c>
   135c0:	ldr	r3, [sp, #152]	; 0x98
   135c4:	cmp	r3, #10
   135c8:	beq	1360c <__assert_fail@plt+0x25d8>
   135cc:	mov	r2, #5
   135d0:	ldr	r1, [pc, #3884]	; 14504 <__assert_fail@plt+0x34d0>
   135d4:	mov	r0, #0
   135d8:	bl	10e3c <dcgettext@plt>
   135dc:	ldr	r2, [pc, #3872]	; 14504 <__assert_fail@plt+0x34d0>
   135e0:	cmp	r0, r2
   135e4:	str	r0, [sp, #164]	; 0xa4
   135e8:	beq	145f0 <__assert_fail@plt+0x35bc>
   135ec:	mov	r2, #5
   135f0:	ldr	r1, [pc, #3848]	; 14500 <__assert_fail@plt+0x34cc>
   135f4:	mov	r0, #0
   135f8:	bl	10e3c <dcgettext@plt>
   135fc:	ldr	r2, [pc, #3836]	; 14500 <__assert_fail@plt+0x34cc>
   13600:	cmp	r0, r2
   13604:	str	r0, [sp, #168]	; 0xa8
   13608:	beq	145e0 <__assert_fail@plt+0x35ac>
   1360c:	ldr	r7, [sp, #28]
   13610:	cmp	r7, #0
   13614:	movne	r7, #0
   13618:	bne	1364c <__assert_fail@plt+0x2618>
   1361c:	ldr	r3, [sp, #164]	; 0xa4
   13620:	ldrb	r3, [r3]
   13624:	cmp	r3, #0
   13628:	beq	14600 <__assert_fail@plt+0x35cc>
   1362c:	ldr	r2, [sp, #164]	; 0xa4
   13630:	ldr	r1, [sp, #32]
   13634:	cmp	fp, r7
   13638:	strbhi	r3, [r1, r7]
   1363c:	ldrb	r3, [r2, #1]!
   13640:	add	r7, r7, #1
   13644:	cmp	r3, #0
   13648:	bne	13634 <__assert_fail@plt+0x2600>
   1364c:	ldr	r0, [sp, #168]	; 0xa8
   13650:	bl	10f08 <strlen@plt>
   13654:	ldr	r3, [sp, #168]	; 0xa8
   13658:	str	r3, [sp, #64]	; 0x40
   1365c:	mov	r3, #1
   13660:	str	r3, [sp, #44]	; 0x2c
   13664:	str	r0, [sp, #52]	; 0x34
   13668:	b	13270 <__assert_fail@plt+0x223c>
   1366c:	mov	r3, #1
   13670:	str	r3, [sp, #44]	; 0x2c
   13674:	str	r3, [sp, #52]	; 0x34
   13678:	str	r3, [sp, #28]
   1367c:	ldr	r3, [pc, #3716]	; 14508 <__assert_fail@plt+0x34d4>
   13680:	mov	r7, #0
   13684:	str	r3, [sp, #64]	; 0x40
   13688:	mov	r3, #5
   1368c:	str	r3, [sp, #152]	; 0x98
   13690:	b	13270 <__assert_fail@plt+0x223c>
   13694:	ldr	r3, [sp, #28]
   13698:	cmp	r3, #0
   1369c:	beq	1439c <__assert_fail@plt+0x3368>
   136a0:	ldr	r3, [sp, #28]
   136a4:	mov	r7, #0
   136a8:	str	r3, [sp, #44]	; 0x2c
   136ac:	mov	r3, #1
   136b0:	str	r3, [sp, #52]	; 0x34
   136b4:	ldr	r3, [pc, #3660]	; 14508 <__assert_fail@plt+0x34d4>
   136b8:	str	r3, [sp, #64]	; 0x40
   136bc:	b	13270 <__assert_fail@plt+0x223c>
   136c0:	ldr	r3, [sp, #28]
   136c4:	cmp	r3, #0
   136c8:	mov	r3, #1
   136cc:	streq	r3, [sp, #44]	; 0x2c
   136d0:	bne	13554 <__assert_fail@plt+0x2520>
   136d4:	cmp	fp, #0
   136d8:	beq	143cc <__assert_fail@plt+0x3398>
   136dc:	ldr	r3, [sp, #32]
   136e0:	mov	r2, #39	; 0x27
   136e4:	mov	r7, #1
   136e8:	strb	r2, [r3]
   136ec:	mov	r3, #0
   136f0:	str	r3, [sp, #28]
   136f4:	mov	r3, #1
   136f8:	str	r3, [sp, #52]	; 0x34
   136fc:	ldr	r3, [pc, #3580]	; 14500 <__assert_fail@plt+0x34cc>
   13700:	str	r3, [sp, #64]	; 0x40
   13704:	mov	r3, #2
   13708:	str	r3, [sp, #152]	; 0x98
   1370c:	b	13270 <__assert_fail@plt+0x223c>
   13710:	ldr	r3, [sp, #24]
   13714:	cmn	r3, #1
   13718:	beq	14330 <__assert_fail@plt+0x32fc>
   1371c:	ldr	r3, [sp, #24]
   13720:	subs	r3, r3, #1
   13724:	movne	r3, #1
   13728:	cmp	r3, #0
   1372c:	bne	13738 <__assert_fail@plt+0x2704>
   13730:	cmp	sl, #0
   13734:	beq	13b24 <__assert_fail@plt+0x2af0>
   13738:	ldr	r3, [sp, #152]	; 0x98
   1373c:	mov	r5, #0
   13740:	sub	r2, r3, #2
   13744:	mov	r8, r5
   13748:	clz	r2, r2
   1374c:	lsr	r2, r2, #5
   13750:	ldr	r3, [sp, #60]	; 0x3c
   13754:	ldr	r1, [sp, #28]
   13758:	orr	r3, r2, r3
   1375c:	eor	r3, r3, #1
   13760:	orr	r3, r1, r3
   13764:	tst	r3, #255	; 0xff
   13768:	bne	13e94 <__assert_fail@plt+0x2e60>
   1376c:	cmp	r6, #0
   13770:	bne	138c0 <__assert_fail@plt+0x288c>
   13774:	ldr	r3, [sp, #40]	; 0x28
   13778:	eor	r8, r8, #1
   1377c:	and	r8, r8, r3
   13780:	add	sl, sl, #1
   13784:	uxtb	r6, r8
   13788:	cmp	r6, #0
   1378c:	beq	137c0 <__assert_fail@plt+0x278c>
   13790:	cmp	fp, r7
   13794:	movhi	r2, #39	; 0x27
   13798:	ldrhi	r3, [sp, #32]
   1379c:	strbhi	r2, [r3, r7]
   137a0:	add	r3, r7, #1
   137a4:	cmp	fp, r3
   137a8:	movhi	r1, #39	; 0x27
   137ac:	ldrhi	r2, [sp, #32]
   137b0:	add	r7, r7, #2
   137b4:	strbhi	r1, [r2, r3]
   137b8:	mov	r3, #0
   137bc:	str	r3, [sp, #40]	; 0x28
   137c0:	cmp	r7, fp
   137c4:	ldrcc	r3, [sp, #32]
   137c8:	strbcc	r4, [r3, r7]
   137cc:	ldr	r3, [sp, #36]	; 0x24
   137d0:	cmp	r5, #0
   137d4:	moveq	r3, #0
   137d8:	str	r3, [sp, #36]	; 0x24
   137dc:	ldr	r3, [sp, #24]
   137e0:	add	r7, r7, #1
   137e4:	cmn	r3, #1
   137e8:	bne	1328c <__assert_fail@plt+0x2258>
   137ec:	ldr	r3, [sp, #56]	; 0x38
   137f0:	ldrb	r5, [r3, sl]
   137f4:	adds	r5, r5, #0
   137f8:	movne	r5, #1
   137fc:	cmp	r5, #0
   13800:	bne	132a0 <__assert_fail@plt+0x226c>
   13804:	ldr	r3, [sp, #152]	; 0x98
   13808:	ldr	r1, [sp, #28]
   1380c:	sub	r3, r3, #2
   13810:	clz	r3, r3
   13814:	lsr	r3, r3, #5
   13818:	and	r9, r1, r3
   1381c:	cmp	r7, #0
   13820:	movne	r2, #0
   13824:	andeq	r2, r9, #1
   13828:	cmp	r2, #0
   1382c:	bne	14208 <__assert_fail@plt+0x31d4>
   13830:	eor	r2, r1, #1
   13834:	ands	r3, r3, r2
   13838:	beq	146c4 <__assert_fail@plt+0x3690>
   1383c:	ldr	r2, [sp, #68]	; 0x44
   13840:	cmp	r2, #0
   13844:	beq	146b0 <__assert_fail@plt+0x367c>
   13848:	ldr	r3, [sp, #36]	; 0x24
   1384c:	cmp	r3, #0
   13850:	bne	14668 <__assert_fail@plt+0x3634>
   13854:	ldr	r2, [sp, #72]	; 0x48
   13858:	clz	r3, fp
   1385c:	cmp	r2, #0
   13860:	lsr	r3, r3, #5
   13864:	moveq	r3, #0
   13868:	cmp	r3, #0
   1386c:	beq	14608 <__assert_fail@plt+0x35d4>
   13870:	str	r3, [sp, #68]	; 0x44
   13874:	ldr	fp, [sp, #72]	; 0x48
   13878:	b	13228 <__assert_fail@plt+0x21f4>
   1387c:	ldr	r3, [sp, #152]	; 0x98
   13880:	cmp	r3, #2
   13884:	beq	13ed8 <__assert_fail@plt+0x2ea4>
   13888:	ldr	r3, [sp, #44]	; 0x2c
   1388c:	ldr	r2, [sp, #28]
   13890:	and	r2, r3, r2
   13894:	ands	r2, r9, r2
   13898:	bne	13ee4 <__assert_fail@plt+0x2eb0>
   1389c:	mov	r4, #92	; 0x5c
   138a0:	mov	r3, r4
   138a4:	ldr	r1, [sp, #44]	; 0x2c
   138a8:	cmp	r1, #0
   138ac:	moveq	r5, #0
   138b0:	moveq	r8, r1
   138b4:	beq	13750 <__assert_fail@plt+0x271c>
   138b8:	mov	r4, r3
   138bc:	mov	r5, #0
   138c0:	ldr	r3, [sp, #28]
   138c4:	cmp	r3, #0
   138c8:	bne	13ecc <__assert_fail@plt+0x2e98>
   138cc:	ldr	r3, [sp, #40]	; 0x28
   138d0:	eor	r9, r3, #1
   138d4:	and	r9, r9, r2
   138d8:	ands	r9, r9, #255	; 0xff
   138dc:	beq	13920 <__assert_fail@plt+0x28ec>
   138e0:	cmp	fp, r7
   138e4:	movhi	r2, #39	; 0x27
   138e8:	ldrhi	r3, [sp, #32]
   138ec:	str	r9, [sp, #40]	; 0x28
   138f0:	strbhi	r2, [r3, r7]
   138f4:	add	r3, r7, #1
   138f8:	cmp	fp, r3
   138fc:	movhi	r1, #36	; 0x24
   13900:	ldrhi	r2, [sp, #32]
   13904:	strbhi	r1, [r2, r3]
   13908:	add	r3, r7, #2
   1390c:	cmp	fp, r3
   13910:	add	r7, r7, #3
   13914:	ldrhi	r2, [sp, #32]
   13918:	movhi	r1, #39	; 0x27
   1391c:	strbhi	r1, [r2, r3]
   13920:	cmp	fp, r7
   13924:	movhi	r2, #92	; 0x5c
   13928:	ldrhi	r3, [sp, #32]
   1392c:	add	sl, sl, #1
   13930:	strbhi	r2, [r3, r7]
   13934:	add	r7, r7, #1
   13938:	b	137c0 <__assert_fail@plt+0x278c>
   1393c:	ldr	r3, [sp, #152]	; 0x98
   13940:	mov	r4, #11
   13944:	sub	r2, r3, #2
   13948:	mov	r3, #118	; 0x76
   1394c:	clz	r2, r2
   13950:	lsr	r2, r2, #5
   13954:	b	138a4 <__assert_fail@plt+0x2870>
   13958:	mov	r4, #10
   1395c:	mov	r3, #110	; 0x6e
   13960:	ldr	r2, [sp, #152]	; 0x98
   13964:	ldr	r1, [sp, #28]
   13968:	sub	r2, r2, #2
   1396c:	clz	r2, r2
   13970:	lsr	r2, r2, #5
   13974:	ands	r1, r1, r2
   13978:	beq	138a4 <__assert_fail@plt+0x2870>
   1397c:	ldr	sl, [sp, #32]
   13980:	mov	r8, fp
   13984:	mov	r2, r1
   13988:	mov	r3, #2
   1398c:	str	r3, [sp, #152]	; 0x98
   13990:	ldr	r9, [sp, #44]	; 0x2c
   13994:	ldr	r3, [sp, #152]	; 0x98
   13998:	and	r9, r9, r2
   1399c:	tst	r9, #255	; 0xff
   139a0:	movne	r3, #4
   139a4:	str	r3, [sp, #152]	; 0x98
   139a8:	ldr	r3, [sp, #156]	; 0x9c
   139ac:	mov	ip, #0
   139b0:	bic	r3, r3, #2
   139b4:	str	r3, [sp, #4]
   139b8:	ldr	r3, [sp, #168]	; 0xa8
   139bc:	ldr	r2, [sp, #56]	; 0x38
   139c0:	str	r3, [sp, #16]
   139c4:	ldr	r3, [sp, #164]	; 0xa4
   139c8:	mov	r1, r8
   139cc:	str	r3, [sp, #12]
   139d0:	ldr	r3, [sp, #152]	; 0x98
   139d4:	mov	r0, sl
   139d8:	str	r3, [sp]
   139dc:	str	ip, [sp, #8]
   139e0:	ldr	r3, [sp, #24]
   139e4:	bl	131cc <__assert_fail@plt+0x2198>
   139e8:	mov	fp, r0
   139ec:	mov	r0, fp
   139f0:	add	sp, sp, #116	; 0x74
   139f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f8:	ldr	r3, [sp, #152]	; 0x98
   139fc:	mov	r4, #8
   13a00:	sub	r2, r3, #2
   13a04:	mov	r3, #98	; 0x62
   13a08:	clz	r2, r2
   13a0c:	lsr	r2, r2, #5
   13a10:	b	138a4 <__assert_fail@plt+0x2870>
   13a14:	ldr	r3, [sp, #152]	; 0x98
   13a18:	mov	r4, #7
   13a1c:	sub	r2, r3, #2
   13a20:	mov	r3, #97	; 0x61
   13a24:	clz	r2, r2
   13a28:	lsr	r2, r2, #5
   13a2c:	b	138a4 <__assert_fail@plt+0x2870>
   13a30:	ldr	r3, [sp, #44]	; 0x2c
   13a34:	cmp	r3, #0
   13a38:	beq	1421c <__assert_fail@plt+0x31e8>
   13a3c:	ldr	r3, [sp, #28]
   13a40:	cmp	r3, #0
   13a44:	bne	144f4 <__assert_fail@plt+0x34c0>
   13a48:	ldr	r3, [sp, #152]	; 0x98
   13a4c:	sub	r2, r3, #2
   13a50:	ldr	r3, [sp, #40]	; 0x28
   13a54:	clz	r2, r2
   13a58:	eor	r3, r3, #1
   13a5c:	lsr	r2, r2, #5
   13a60:	ands	r3, r2, r3
   13a64:	moveq	r1, r7
   13a68:	beq	13aac <__assert_fail@plt+0x2a78>
   13a6c:	cmp	fp, r7
   13a70:	movhi	r0, #39	; 0x27
   13a74:	ldrhi	r1, [sp, #32]
   13a78:	str	r3, [sp, #40]	; 0x28
   13a7c:	strbhi	r0, [r1, r7]
   13a80:	add	r1, r7, #1
   13a84:	cmp	fp, r1
   13a88:	movhi	ip, #36	; 0x24
   13a8c:	ldrhi	r0, [sp, #32]
   13a90:	strbhi	ip, [r0, r1]
   13a94:	add	r1, r7, #2
   13a98:	cmp	fp, r1
   13a9c:	movhi	ip, #39	; 0x27
   13aa0:	ldrhi	r0, [sp, #32]
   13aa4:	strbhi	ip, [r0, r1]
   13aa8:	add	r1, r7, #3
   13aac:	cmp	fp, r1
   13ab0:	movhi	r0, #92	; 0x5c
   13ab4:	ldrhi	r3, [sp, #32]
   13ab8:	add	r7, r1, #1
   13abc:	strbhi	r0, [r3, r1]
   13ac0:	cmp	r8, #0
   13ac4:	beq	14408 <__assert_fail@plt+0x33d4>
   13ac8:	ldr	r0, [sp, #24]
   13acc:	add	r3, sl, #1
   13ad0:	cmp	r3, r0
   13ad4:	bcs	14344 <__assert_fail@plt+0x3310>
   13ad8:	ldr	r0, [sp, #56]	; 0x38
   13adc:	ldrb	r3, [r0, r3]
   13ae0:	sub	r3, r3, #48	; 0x30
   13ae4:	cmp	r3, #9
   13ae8:	bhi	14344 <__assert_fail@plt+0x3310>
   13aec:	cmp	fp, r7
   13af0:	movhi	r3, #48	; 0x30
   13af4:	ldrhi	r0, [sp, #32]
   13af8:	ldr	r5, [sp, #28]
   13afc:	mov	r4, #48	; 0x30
   13b00:	strbhi	r3, [r0, r7]
   13b04:	add	r3, r1, #2
   13b08:	cmp	fp, r3
   13b0c:	movhi	r0, #48	; 0x30
   13b10:	ldrhi	ip, [sp, #32]
   13b14:	add	r7, r1, #3
   13b18:	strbhi	r0, [ip, r3]
   13b1c:	b	13750 <__assert_fail@plt+0x271c>
   13b20:	mov	r5, #0
   13b24:	ldr	r3, [sp, #152]	; 0x98
   13b28:	sub	r2, r3, #2
   13b2c:	ldr	r3, [sp, #28]
   13b30:	clz	r2, r2
   13b34:	lsr	r2, r2, #5
   13b38:	ands	r8, r3, r2
   13b3c:	beq	13750 <__assert_fail@plt+0x271c>
   13b40:	mov	r3, r8
   13b44:	mov	r2, r3
   13b48:	mov	r3, #2
   13b4c:	ldr	sl, [sp, #32]
   13b50:	mov	r8, fp
   13b54:	str	r3, [sp, #152]	; 0x98
   13b58:	b	13990 <__assert_fail@plt+0x295c>
   13b5c:	ldr	r3, [sp, #152]	; 0x98
   13b60:	cmp	r3, #2
   13b64:	beq	14288 <__assert_fail@plt+0x3254>
   13b68:	cmp	r3, #5
   13b6c:	beq	14248 <__assert_fail@plt+0x3214>
   13b70:	mov	r5, #0
   13b74:	sub	r2, r3, #2
   13b78:	mov	r8, r5
   13b7c:	clz	r2, r2
   13b80:	mov	r4, #63	; 0x3f
   13b84:	lsr	r2, r2, #5
   13b88:	b	13750 <__assert_fail@plt+0x271c>
   13b8c:	ldr	r3, [sp, #152]	; 0x98
   13b90:	cmp	r3, #2
   13b94:	beq	142a8 <__assert_fail@plt+0x3274>
   13b98:	mov	r2, #0
   13b9c:	str	r5, [sp, #68]	; 0x44
   13ba0:	mov	r8, r2
   13ba4:	mov	r4, #39	; 0x27
   13ba8:	b	13750 <__assert_fail@plt+0x271c>
   13bac:	mov	r4, #13
   13bb0:	mov	r3, #114	; 0x72
   13bb4:	b	13960 <__assert_fail@plt+0x292c>
   13bb8:	ldr	r3, [sp, #152]	; 0x98
   13bbc:	mov	r8, #0
   13bc0:	sub	r2, r3, #2
   13bc4:	clz	r2, r2
   13bc8:	lsr	r2, r2, #5
   13bcc:	b	13750 <__assert_fail@plt+0x271c>
   13bd0:	ldr	r3, [sp, #152]	; 0x98
   13bd4:	mov	r4, #12
   13bd8:	sub	r2, r3, #2
   13bdc:	mov	r3, #102	; 0x66
   13be0:	clz	r2, r2
   13be4:	lsr	r2, r2, #5
   13be8:	b	138a4 <__assert_fail@plt+0x2870>
   13bec:	mov	r5, r6
   13bf0:	b	13b24 <__assert_fail@plt+0x2af0>
   13bf4:	ldr	r3, [sp, #152]	; 0x98
   13bf8:	sub	r2, r3, #2
   13bfc:	mov	r3, #116	; 0x74
   13c00:	clz	r2, r2
   13c04:	lsr	r2, r2, #5
   13c08:	b	138a4 <__assert_fail@plt+0x2870>
   13c0c:	ldr	r8, [sp, #76]	; 0x4c
   13c10:	cmp	r8, #1
   13c14:	bne	140c4 <__assert_fail@plt+0x3090>
   13c18:	bl	10ef0 <__ctype_b_loc@plt>
   13c1c:	sxth	r3, r4
   13c20:	mov	ip, r8
   13c24:	lsl	r3, r3, #1
   13c28:	ldr	r2, [r0]
   13c2c:	ldrh	r3, [r2, r3]
   13c30:	and	r3, r3, #16384	; 0x4000
   13c34:	cmp	r3, #0
   13c38:	movne	r5, #1
   13c3c:	moveq	r5, #0
   13c40:	moveq	r3, #1
   13c44:	movne	r3, #0
   13c48:	ldr	r2, [sp, #44]	; 0x2c
   13c4c:	and	r3, r3, r2
   13c50:	ands	r8, r3, #255	; 0xff
   13c54:	bne	13f58 <__assert_fail@plt+0x2f24>
   13c58:	ldr	r3, [sp, #152]	; 0x98
   13c5c:	sub	r2, r3, #2
   13c60:	clz	r2, r2
   13c64:	lsr	r2, r2, #5
   13c68:	b	13750 <__assert_fail@plt+0x271c>
   13c6c:	ldr	r3, [sp, #56]	; 0x38
   13c70:	add	r3, r3, sl
   13c74:	str	r3, [sp, #48]	; 0x30
   13c78:	ldr	r3, [sp, #48]	; 0x30
   13c7c:	mov	r6, #0
   13c80:	ldrb	r4, [r3]
   13c84:	cmp	r4, #126	; 0x7e
   13c88:	ldrls	pc, [pc, r4, lsl #2]
   13c8c:	b	13c0c <__assert_fail@plt+0x2bd8>
   13c90:	andeq	r3, r1, r0, lsr sl
   13c94:	andeq	r3, r1, ip, lsl #24
   13c98:	andeq	r3, r1, ip, lsl #24
   13c9c:	andeq	r3, r1, ip, lsl #24
   13ca0:	andeq	r3, r1, ip, lsl #24
   13ca4:	andeq	r3, r1, ip, lsl #24
   13ca8:	andeq	r3, r1, ip, lsl #24
   13cac:	andeq	r3, r1, r4, lsl sl
   13cb0:	strdeq	r3, [r1], -r8
   13cb4:	andeq	r3, r1, ip, lsl #29
   13cb8:	andeq	r3, r1, r8, asr r9
   13cbc:	andeq	r3, r1, ip, lsr r9
   13cc0:	ldrdeq	r3, [r1], -r0
   13cc4:	andeq	r3, r1, ip, lsr #23
   13cc8:	andeq	r3, r1, ip, lsl #24
   13ccc:	andeq	r3, r1, ip, lsl #24
   13cd0:	andeq	r3, r1, ip, lsl #24
   13cd4:	andeq	r3, r1, ip, lsl #24
   13cd8:	andeq	r3, r1, ip, lsl #24
   13cdc:	andeq	r3, r1, ip, lsl #24
   13ce0:	andeq	r3, r1, ip, lsl #24
   13ce4:	andeq	r3, r1, ip, lsl #24
   13ce8:	andeq	r3, r1, ip, lsl #24
   13cec:	andeq	r3, r1, ip, lsl #24
   13cf0:	andeq	r3, r1, ip, lsl #24
   13cf4:	andeq	r3, r1, ip, lsl #24
   13cf8:	andeq	r3, r1, ip, lsl #24
   13cfc:	andeq	r3, r1, ip, lsl #24
   13d00:	andeq	r3, r1, ip, lsl #24
   13d04:	andeq	r3, r1, ip, lsl #24
   13d08:	andeq	r3, r1, ip, lsl #24
   13d0c:	andeq	r3, r1, ip, lsl #24
   13d10:	andeq	r3, r1, r4, lsr #22
   13d14:	andeq	r3, r1, r0, lsr #22
   13d18:	andeq	r3, r1, r0, lsr #22
   13d1c:	andeq	r3, r1, r0, lsr r7
   13d20:	andeq	r3, r1, r0, lsr #22
   13d24:			; <UNDEFINED> instruction: 0x00013bb8
   13d28:	andeq	r3, r1, r0, lsr #22
   13d2c:	andeq	r3, r1, ip, lsl #23
   13d30:	andeq	r3, r1, r0, lsr #22
   13d34:	andeq	r3, r1, r0, lsr #22
   13d38:	andeq	r3, r1, r0, lsr #22
   13d3c:			; <UNDEFINED> instruction: 0x00013bb8
   13d40:			; <UNDEFINED> instruction: 0x00013bb8
   13d44:			; <UNDEFINED> instruction: 0x00013bb8
   13d48:			; <UNDEFINED> instruction: 0x00013bb8
   13d4c:			; <UNDEFINED> instruction: 0x00013bb8
   13d50:			; <UNDEFINED> instruction: 0x00013bb8
   13d54:			; <UNDEFINED> instruction: 0x00013bb8
   13d58:			; <UNDEFINED> instruction: 0x00013bb8
   13d5c:			; <UNDEFINED> instruction: 0x00013bb8
   13d60:			; <UNDEFINED> instruction: 0x00013bb8
   13d64:			; <UNDEFINED> instruction: 0x00013bb8
   13d68:			; <UNDEFINED> instruction: 0x00013bb8
   13d6c:			; <UNDEFINED> instruction: 0x00013bb8
   13d70:			; <UNDEFINED> instruction: 0x00013bb8
   13d74:			; <UNDEFINED> instruction: 0x00013bb8
   13d78:			; <UNDEFINED> instruction: 0x00013bb8
   13d7c:	andeq	r3, r1, r0, lsr #22
   13d80:	andeq	r3, r1, r0, lsr #22
   13d84:	andeq	r3, r1, r0, lsr #22
   13d88:	andeq	r3, r1, r0, lsr #22
   13d8c:	andeq	r3, r1, ip, asr fp
   13d90:	andeq	r3, r1, ip, lsl #24
   13d94:			; <UNDEFINED> instruction: 0x00013bb8
   13d98:			; <UNDEFINED> instruction: 0x00013bb8
   13d9c:			; <UNDEFINED> instruction: 0x00013bb8
   13da0:			; <UNDEFINED> instruction: 0x00013bb8
   13da4:			; <UNDEFINED> instruction: 0x00013bb8
   13da8:			; <UNDEFINED> instruction: 0x00013bb8
   13dac:			; <UNDEFINED> instruction: 0x00013bb8
   13db0:			; <UNDEFINED> instruction: 0x00013bb8
   13db4:			; <UNDEFINED> instruction: 0x00013bb8
   13db8:			; <UNDEFINED> instruction: 0x00013bb8
   13dbc:			; <UNDEFINED> instruction: 0x00013bb8
   13dc0:			; <UNDEFINED> instruction: 0x00013bb8
   13dc4:			; <UNDEFINED> instruction: 0x00013bb8
   13dc8:			; <UNDEFINED> instruction: 0x00013bb8
   13dcc:			; <UNDEFINED> instruction: 0x00013bb8
   13dd0:			; <UNDEFINED> instruction: 0x00013bb8
   13dd4:			; <UNDEFINED> instruction: 0x00013bb8
   13dd8:			; <UNDEFINED> instruction: 0x00013bb8
   13ddc:			; <UNDEFINED> instruction: 0x00013bb8
   13de0:			; <UNDEFINED> instruction: 0x00013bb8
   13de4:			; <UNDEFINED> instruction: 0x00013bb8
   13de8:			; <UNDEFINED> instruction: 0x00013bb8
   13dec:			; <UNDEFINED> instruction: 0x00013bb8
   13df0:			; <UNDEFINED> instruction: 0x00013bb8
   13df4:			; <UNDEFINED> instruction: 0x00013bb8
   13df8:			; <UNDEFINED> instruction: 0x00013bb8
   13dfc:	andeq	r3, r1, r0, lsr #22
   13e00:	andeq	r3, r1, ip, ror r8
   13e04:			; <UNDEFINED> instruction: 0x00013bb8
   13e08:	andeq	r3, r1, r0, lsr #22
   13e0c:			; <UNDEFINED> instruction: 0x00013bb8
   13e10:	andeq	r3, r1, r0, lsr #22
   13e14:			; <UNDEFINED> instruction: 0x00013bb8
   13e18:			; <UNDEFINED> instruction: 0x00013bb8
   13e1c:			; <UNDEFINED> instruction: 0x00013bb8
   13e20:			; <UNDEFINED> instruction: 0x00013bb8
   13e24:			; <UNDEFINED> instruction: 0x00013bb8
   13e28:			; <UNDEFINED> instruction: 0x00013bb8
   13e2c:			; <UNDEFINED> instruction: 0x00013bb8
   13e30:			; <UNDEFINED> instruction: 0x00013bb8
   13e34:			; <UNDEFINED> instruction: 0x00013bb8
   13e38:			; <UNDEFINED> instruction: 0x00013bb8
   13e3c:			; <UNDEFINED> instruction: 0x00013bb8
   13e40:			; <UNDEFINED> instruction: 0x00013bb8
   13e44:			; <UNDEFINED> instruction: 0x00013bb8
   13e48:			; <UNDEFINED> instruction: 0x00013bb8
   13e4c:			; <UNDEFINED> instruction: 0x00013bb8
   13e50:			; <UNDEFINED> instruction: 0x00013bb8
   13e54:			; <UNDEFINED> instruction: 0x00013bb8
   13e58:			; <UNDEFINED> instruction: 0x00013bb8
   13e5c:			; <UNDEFINED> instruction: 0x00013bb8
   13e60:			; <UNDEFINED> instruction: 0x00013bb8
   13e64:			; <UNDEFINED> instruction: 0x00013bb8
   13e68:			; <UNDEFINED> instruction: 0x00013bb8
   13e6c:			; <UNDEFINED> instruction: 0x00013bb8
   13e70:			; <UNDEFINED> instruction: 0x00013bb8
   13e74:			; <UNDEFINED> instruction: 0x00013bb8
   13e78:			; <UNDEFINED> instruction: 0x00013bb8
   13e7c:	andeq	r3, r1, r0, lsl r7
   13e80:	andeq	r3, r1, r0, lsr #22
   13e84:	andeq	r3, r1, r0, lsl r7
   13e88:	andeq	r3, r1, r0, lsr r7
   13e8c:	mov	r3, #116	; 0x74
   13e90:	b	13960 <__assert_fail@plt+0x292c>
   13e94:	ldr	r3, [sp, #160]	; 0xa0
   13e98:	cmp	r3, #0
   13e9c:	beq	1376c <__assert_fail@plt+0x2738>
   13ea0:	lsr	r3, r4, #5
   13ea4:	ldr	r0, [sp, #160]	; 0xa0
   13ea8:	uxtb	r3, r3
   13eac:	and	r1, r4, #31
   13eb0:	ldr	r0, [r0, r3, lsl #2]
   13eb4:	lsr	r3, r0, r1
   13eb8:	tst	r3, #1
   13ebc:	beq	1376c <__assert_fail@plt+0x2738>
   13ec0:	ldr	r3, [sp, #28]
   13ec4:	cmp	r3, #0
   13ec8:	beq	138cc <__assert_fail@plt+0x2898>
   13ecc:	ldr	sl, [sp, #32]
   13ed0:	mov	r8, fp
   13ed4:	b	13990 <__assert_fail@plt+0x295c>
   13ed8:	ldr	r3, [sp, #28]
   13edc:	cmp	r3, #0
   13ee0:	bne	14434 <__assert_fail@plt+0x3400>
   13ee4:	add	sl, sl, #1
   13ee8:	ldr	r6, [sp, #40]	; 0x28
   13eec:	mov	r5, #0
   13ef0:	mov	r4, #92	; 0x5c
   13ef4:	b	13788 <__assert_fail@plt+0x2754>
   13ef8:	cmp	r9, r8
   13efc:	bne	1416c <__assert_fail@plt+0x3138>
   13f00:	ldr	r0, [sp, #100]	; 0x64
   13f04:	bl	10e60 <iswprint@plt>
   13f08:	add	r5, r5, r4
   13f0c:	cmp	r0, #0
   13f10:	add	r0, sp, #104	; 0x68
   13f14:	moveq	r6, #0
   13f18:	bl	10e0c <mbsinit@plt>
   13f1c:	cmp	r0, #0
   13f20:	beq	14100 <__assert_fail@plt+0x30cc>
   13f24:	mov	r2, r6
   13f28:	mov	ip, r5
   13f2c:	eor	r5, r2, #1
   13f30:	ldr	r4, [sp, #80]	; 0x50
   13f34:	ldr	r6, [sp, #84]	; 0x54
   13f38:	ldr	r7, [sp, #88]	; 0x58
   13f3c:	uxtb	r5, r5
   13f40:	cmp	ip, #1
   13f44:	bls	14444 <__assert_fail@plt+0x3410>
   13f48:	ldr	r3, [sp, #44]	; 0x2c
   13f4c:	and	r8, r3, r5
   13f50:	mov	r5, r2
   13f54:	uxtb	r8, r8
   13f58:	add	r2, sl, ip
   13f5c:	ldr	r0, [sp, #48]	; 0x30
   13f60:	mov	r1, #0
   13f64:	str	r5, [sp, #48]	; 0x30
   13f68:	ldr	r9, [sp, #28]
   13f6c:	ldr	ip, [sp, #40]	; 0x28
   13f70:	ldr	r3, [sp, #32]
   13f74:	ldr	r5, [sp, #152]	; 0x98
   13f78:	b	14034 <__assert_fail@plt+0x3000>
   13f7c:	cmp	r9, #0
   13f80:	bne	14358 <__assert_fail@plt+0x3324>
   13f84:	eor	r1, ip, #1
   13f88:	cmp	r5, #2
   13f8c:	movne	r1, #0
   13f90:	andeq	r1, r1, #1
   13f94:	cmp	r1, #0
   13f98:	beq	13fd0 <__assert_fail@plt+0x2f9c>
   13f9c:	cmp	fp, r7
   13fa0:	movhi	ip, #39	; 0x27
   13fa4:	strbhi	ip, [r3, r7]
   13fa8:	add	ip, r7, #1
   13fac:	cmp	fp, ip
   13fb0:	movhi	lr, #36	; 0x24
   13fb4:	strbhi	lr, [r3, ip]
   13fb8:	add	ip, r7, #2
   13fbc:	cmp	fp, ip
   13fc0:	movhi	lr, #39	; 0x27
   13fc4:	strbhi	lr, [r3, ip]
   13fc8:	add	r7, r7, #3
   13fcc:	mov	ip, r1
   13fd0:	cmp	fp, r7
   13fd4:	movhi	r1, #92	; 0x5c
   13fd8:	strbhi	r1, [r3, r7]
   13fdc:	add	r1, r7, #1
   13fe0:	cmp	fp, r1
   13fe4:	lsrhi	lr, r4, #6
   13fe8:	addhi	lr, lr, #48	; 0x30
   13fec:	strbhi	lr, [r3, r1]
   13ff0:	add	lr, r7, #2
   13ff4:	cmp	fp, lr
   13ff8:	lsrhi	r1, r4, #3
   13ffc:	andhi	r1, r1, #7
   14000:	addhi	r1, r1, #48	; 0x30
   14004:	add	sl, sl, #1
   14008:	strbhi	r1, [r3, lr]
   1400c:	and	r4, r4, #7
   14010:	cmp	r2, sl
   14014:	add	r4, r4, #48	; 0x30
   14018:	add	r7, r7, #3
   1401c:	bls	1437c <__assert_fail@plt+0x3348>
   14020:	mov	r1, r8
   14024:	cmp	fp, r7
   14028:	strbhi	r4, [r3, r7]
   1402c:	ldrb	r4, [r0, #1]!
   14030:	add	r7, r7, #1
   14034:	cmp	r8, #0
   14038:	bne	13f7c <__assert_fail@plt+0x2f48>
   1403c:	cmp	r6, #0
   14040:	bne	14090 <__assert_fail@plt+0x305c>
   14044:	eor	r6, r1, #1
   14048:	and	r6, r6, ip
   1404c:	add	sl, sl, #1
   14050:	cmp	r2, sl
   14054:	uxtb	r6, r6
   14058:	bls	140b8 <__assert_fail@plt+0x3084>
   1405c:	cmp	r6, #0
   14060:	beq	14024 <__assert_fail@plt+0x2ff0>
   14064:	cmp	fp, r7
   14068:	movhi	ip, #39	; 0x27
   1406c:	strbhi	ip, [r3, r7]
   14070:	add	ip, r7, #1
   14074:	cmp	fp, ip
   14078:	movhi	lr, #39	; 0x27
   1407c:	strbhi	lr, [r3, ip]
   14080:	add	r7, r7, #2
   14084:	mov	r6, r8
   14088:	mov	ip, r8
   1408c:	b	14024 <__assert_fail@plt+0x2ff0>
   14090:	cmp	fp, r7
   14094:	eor	r6, r1, #1
   14098:	movhi	lr, #92	; 0x5c
   1409c:	and	r6, r6, ip
   140a0:	add	sl, sl, #1
   140a4:	strbhi	lr, [r3, r7]
   140a8:	cmp	r2, sl
   140ac:	add	r7, r7, #1
   140b0:	uxtb	r6, r6
   140b4:	bhi	1405c <__assert_fail@plt+0x3028>
   140b8:	str	ip, [sp, #40]	; 0x28
   140bc:	ldr	r5, [sp, #48]	; 0x30
   140c0:	b	13788 <__assert_fail@plt+0x2754>
   140c4:	ldr	r3, [sp, #24]
   140c8:	cmn	r3, #1
   140cc:	mov	r3, #0
   140d0:	str	r3, [sp, #104]	; 0x68
   140d4:	str	r3, [sp, #108]	; 0x6c
   140d8:	beq	143f8 <__assert_fail@plt+0x33c4>
   140dc:	mov	r2, r5
   140e0:	mov	r3, #0
   140e4:	str	r7, [sp, #88]	; 0x58
   140e8:	ldr	r7, [sp, #152]	; 0x98
   140ec:	str	r5, [sp, #92]	; 0x5c
   140f0:	str	r6, [sp, #84]	; 0x54
   140f4:	mov	r5, r3
   140f8:	mov	r6, r2
   140fc:	str	r4, [sp, #80]	; 0x50
   14100:	ldr	r3, [sp, #56]	; 0x38
   14104:	add	r9, sl, r5
   14108:	add	r8, r3, r9
   1410c:	ldr	r3, [sp, #24]
   14110:	mov	r1, r8
   14114:	sub	r2, r3, r9
   14118:	add	r0, sp, #100	; 0x64
   1411c:	add	r3, sp, #104	; 0x68
   14120:	bl	15c54 <__assert_fail@plt+0x4c20>
   14124:	subs	r4, r0, #0
   14128:	beq	144d0 <__assert_fail@plt+0x349c>
   1412c:	cmn	r4, #1
   14130:	beq	144b0 <__assert_fail@plt+0x347c>
   14134:	cmn	r4, #2
   14138:	beq	14450 <__assert_fail@plt+0x341c>
   1413c:	ldr	r2, [sp, #28]
   14140:	cmp	r7, #2
   14144:	movne	r2, #0
   14148:	andeq	r2, r2, #1
   1414c:	cmp	r2, #0
   14150:	beq	13f00 <__assert_fail@plt+0x2ecc>
   14154:	cmp	r4, #1
   14158:	beq	13f00 <__assert_fail@plt+0x2ecc>
   1415c:	sub	r3, r4, #1
   14160:	add	r9, r3, r9
   14164:	ldr	r3, [sp, #56]	; 0x38
   14168:	add	r9, r3, r9
   1416c:	ldrb	r3, [r8, #1]!
   14170:	sub	r3, r3, #91	; 0x5b
   14174:	cmp	r3, #33	; 0x21
   14178:	ldrls	pc, [pc, r3, lsl #2]
   1417c:	b	13ef8 <__assert_fail@plt+0x2ec4>
   14180:	andeq	r4, r1, r8, lsl #4
   14184:	andeq	r4, r1, r8, lsl #4
   14188:	strdeq	r3, [r1], -r8
   1418c:	andeq	r4, r1, r8, lsl #4
   14190:	strdeq	r3, [r1], -r8
   14194:	andeq	r4, r1, r8, lsl #4
   14198:	strdeq	r3, [r1], -r8
   1419c:	strdeq	r3, [r1], -r8
   141a0:	strdeq	r3, [r1], -r8
   141a4:	strdeq	r3, [r1], -r8
   141a8:	strdeq	r3, [r1], -r8
   141ac:	strdeq	r3, [r1], -r8
   141b0:	strdeq	r3, [r1], -r8
   141b4:	strdeq	r3, [r1], -r8
   141b8:	strdeq	r3, [r1], -r8
   141bc:	strdeq	r3, [r1], -r8
   141c0:	strdeq	r3, [r1], -r8
   141c4:	strdeq	r3, [r1], -r8
   141c8:	strdeq	r3, [r1], -r8
   141cc:	strdeq	r3, [r1], -r8
   141d0:	strdeq	r3, [r1], -r8
   141d4:	strdeq	r3, [r1], -r8
   141d8:	strdeq	r3, [r1], -r8
   141dc:	strdeq	r3, [r1], -r8
   141e0:	strdeq	r3, [r1], -r8
   141e4:	strdeq	r3, [r1], -r8
   141e8:	strdeq	r3, [r1], -r8
   141ec:	strdeq	r3, [r1], -r8
   141f0:	strdeq	r3, [r1], -r8
   141f4:	strdeq	r3, [r1], -r8
   141f8:	strdeq	r3, [r1], -r8
   141fc:	strdeq	r3, [r1], -r8
   14200:	strdeq	r3, [r1], -r8
   14204:	andeq	r4, r1, r8, lsl #4
   14208:	mov	r3, #2
   1420c:	ldr	sl, [sp, #32]
   14210:	mov	r8, fp
   14214:	str	r3, [sp, #152]	; 0x98
   14218:	b	13990 <__assert_fail@plt+0x295c>
   1421c:	ldr	r3, [sp, #156]	; 0x9c
   14220:	tst	r3, #1
   14224:	bne	14350 <__assert_fail@plt+0x331c>
   14228:	ldr	r3, [sp, #152]	; 0x98
   1422c:	ldr	r4, [sp, #44]	; 0x2c
   14230:	sub	r2, r3, #2
   14234:	mov	r5, #0
   14238:	clz	r2, r2
   1423c:	mov	r8, r4
   14240:	lsr	r2, r2, #5
   14244:	b	13750 <__assert_fail@plt+0x271c>
   14248:	ldr	r3, [sp, #156]	; 0x9c
   1424c:	ands	r9, r3, #4
   14250:	beq	14388 <__assert_fail@plt+0x3354>
   14254:	ldr	r2, [sp, #24]
   14258:	add	r3, sl, #2
   1425c:	cmp	r3, r2
   14260:	bcs	14274 <__assert_fail@plt+0x3240>
   14264:	ldr	r2, [sp, #48]	; 0x30
   14268:	ldrb	r4, [r2, #1]
   1426c:	cmp	r4, #63	; 0x3f
   14270:	beq	14510 <__assert_fail@plt+0x34dc>
   14274:	mov	r2, #0
   14278:	mov	r8, r2
   1427c:	mov	r5, r2
   14280:	mov	r4, #63	; 0x3f
   14284:	b	13750 <__assert_fail@plt+0x271c>
   14288:	ldr	r3, [sp, #28]
   1428c:	cmp	r3, #0
   14290:	bne	145b4 <__assert_fail@plt+0x3580>
   14294:	mov	r2, r5
   14298:	mov	r8, r3
   1429c:	mov	r5, #0
   142a0:	mov	r4, #63	; 0x3f
   142a4:	b	13750 <__assert_fail@plt+0x271c>
   142a8:	ldr	r3, [sp, #28]
   142ac:	cmp	r3, #0
   142b0:	bne	145b4 <__assert_fail@plt+0x3580>
   142b4:	ldr	r2, [sp, #72]	; 0x48
   142b8:	adds	r3, fp, #0
   142bc:	movne	r3, #1
   142c0:	cmp	r2, #0
   142c4:	movne	r3, #0
   142c8:	cmp	r3, #0
   142cc:	strne	fp, [sp, #72]	; 0x48
   142d0:	movne	fp, #0
   142d4:	bne	14310 <__assert_fail@plt+0x32dc>
   142d8:	cmp	fp, r7
   142dc:	movhi	r2, #39	; 0x27
   142e0:	ldrhi	r3, [sp, #32]
   142e4:	strbhi	r2, [r3, r7]
   142e8:	add	r3, r7, #1
   142ec:	cmp	fp, r3
   142f0:	movhi	r1, #92	; 0x5c
   142f4:	ldrhi	r2, [sp, #32]
   142f8:	strbhi	r1, [r2, r3]
   142fc:	add	r3, r7, #2
   14300:	cmp	fp, r3
   14304:	movhi	r1, #39	; 0x27
   14308:	ldrhi	r2, [sp, #32]
   1430c:	strbhi	r1, [r2, r3]
   14310:	ldr	r3, [sp, #28]
   14314:	add	r7, r7, #3
   14318:	mov	r2, r5
   1431c:	mov	r8, r3
   14320:	str	r5, [sp, #68]	; 0x44
   14324:	str	r3, [sp, #40]	; 0x28
   14328:	mov	r4, #39	; 0x27
   1432c:	b	13750 <__assert_fail@plt+0x271c>
   14330:	ldr	r3, [sp, #56]	; 0x38
   14334:	ldrb	r3, [r3, #1]
   14338:	adds	r3, r3, #0
   1433c:	movne	r3, #1
   14340:	b	13728 <__assert_fail@plt+0x26f4>
   14344:	ldr	r5, [sp, #28]
   14348:	mov	r4, #48	; 0x30
   1434c:	b	13750 <__assert_fail@plt+0x271c>
   14350:	add	sl, sl, #1
   14354:	b	13280 <__assert_fail@plt+0x224c>
   14358:	mov	sl, r3
   1435c:	ldr	r3, [sp, #28]
   14360:	mov	r8, fp
   14364:	str	r3, [sp, #44]	; 0x2c
   14368:	ldr	r3, [sp, #152]	; 0x98
   1436c:	sub	r2, r3, #2
   14370:	clz	r2, r2
   14374:	lsr	r2, r2, #5
   14378:	b	13990 <__assert_fail@plt+0x295c>
   1437c:	str	ip, [sp, #40]	; 0x28
   14380:	ldr	r5, [sp, #48]	; 0x30
   14384:	b	137c0 <__assert_fail@plt+0x278c>
   14388:	mov	r2, r9
   1438c:	mov	r8, r9
   14390:	mov	r5, #0
   14394:	mov	r4, #63	; 0x3f
   14398:	b	13750 <__assert_fail@plt+0x271c>
   1439c:	cmp	fp, #0
   143a0:	beq	14418 <__assert_fail@plt+0x33e4>
   143a4:	ldr	r1, [sp, #32]
   143a8:	mov	r3, #34	; 0x22
   143ac:	mov	r2, #1
   143b0:	strb	r3, [r1]
   143b4:	ldr	r3, [pc, #332]	; 14508 <__assert_fail@plt+0x34d4>
   143b8:	str	r2, [sp, #52]	; 0x34
   143bc:	mov	r7, r2
   143c0:	str	r2, [sp, #44]	; 0x2c
   143c4:	str	r3, [sp, #64]	; 0x40
   143c8:	b	13270 <__assert_fail@plt+0x223c>
   143cc:	ldr	r3, [pc, #300]	; 14500 <__assert_fail@plt+0x34cc>
   143d0:	str	r3, [sp, #64]	; 0x40
   143d4:	mov	r3, #0
   143d8:	str	r3, [sp, #28]
   143dc:	mov	r3, #1
   143e0:	str	r3, [sp, #52]	; 0x34
   143e4:	mov	r7, r3
   143e8:	mov	r3, #2
   143ec:	str	r3, [sp, #152]	; 0x98
   143f0:	b	13270 <__assert_fail@plt+0x223c>
   143f4:	bl	1101c <abort@plt>
   143f8:	ldr	r0, [sp, #56]	; 0x38
   143fc:	bl	10f08 <strlen@plt>
   14400:	str	r0, [sp, #24]
   14404:	b	140dc <__assert_fail@plt+0x30a8>
   14408:	mov	r5, r8
   1440c:	mov	r4, #48	; 0x30
   14410:	ldr	r8, [sp, #44]	; 0x2c
   14414:	b	13750 <__assert_fail@plt+0x271c>
   14418:	mov	r3, #1
   1441c:	str	r3, [sp, #52]	; 0x34
   14420:	mov	r7, r3
   14424:	str	r3, [sp, #44]	; 0x2c
   14428:	ldr	r3, [pc, #216]	; 14508 <__assert_fail@plt+0x34d4>
   1442c:	str	r3, [sp, #64]	; 0x40
   14430:	b	13270 <__assert_fail@plt+0x223c>
   14434:	ldr	sl, [sp, #32]
   14438:	mov	r8, fp
   1443c:	mov	r2, r3
   14440:	b	13990 <__assert_fail@plt+0x295c>
   14444:	mov	r3, r5
   14448:	mov	r5, r2
   1444c:	b	13c48 <__assert_fail@plt+0x2c14>
   14450:	ldr	r1, [sp, #24]
   14454:	mov	r2, r5
   14458:	cmp	r1, r9
   1445c:	mov	ip, r5
   14460:	ldr	r4, [sp, #80]	; 0x50
   14464:	ldr	r5, [sp, #92]	; 0x5c
   14468:	ldr	r6, [sp, #84]	; 0x54
   1446c:	ldr	r7, [sp, #88]	; 0x58
   14470:	bls	144a4 <__assert_fail@plt+0x3470>
   14474:	ldrb	r3, [r8]
   14478:	cmp	r3, #0
   1447c:	bne	14490 <__assert_fail@plt+0x345c>
   14480:	b	144a8 <__assert_fail@plt+0x3474>
   14484:	ldrb	r3, [r8, #1]!
   14488:	cmp	r3, #0
   1448c:	beq	145a8 <__assert_fail@plt+0x3574>
   14490:	add	r2, r2, #1
   14494:	add	r3, sl, r2
   14498:	cmp	r1, r3
   1449c:	bhi	14484 <__assert_fail@plt+0x3450>
   144a0:	mov	ip, r2
   144a4:	mov	r3, #0
   144a8:	mov	r2, r3
   144ac:	b	13f40 <__assert_fail@plt+0x2f0c>
   144b0:	mov	r3, #0
   144b4:	mov	ip, r5
   144b8:	ldr	r4, [sp, #80]	; 0x50
   144bc:	ldr	r5, [sp, #92]	; 0x5c
   144c0:	ldr	r6, [sp, #84]	; 0x54
   144c4:	ldr	r7, [sp, #88]	; 0x58
   144c8:	mov	r2, r3
   144cc:	b	13f40 <__assert_fail@plt+0x2f0c>
   144d0:	mov	r3, r6
   144d4:	mov	ip, r5
   144d8:	eor	r5, r3, #1
   144dc:	mov	r2, r6
   144e0:	ldr	r4, [sp, #80]	; 0x50
   144e4:	ldr	r6, [sp, #84]	; 0x54
   144e8:	ldr	r7, [sp, #88]	; 0x58
   144ec:	uxtb	r5, r5
   144f0:	b	13f40 <__assert_fail@plt+0x2f0c>
   144f4:	ldr	sl, [sp, #32]
   144f8:	mov	r8, fp
   144fc:	b	14364 <__assert_fail@plt+0x3330>
   14500:	andeq	r7, r1, r8, lsr #32
   14504:	andeq	r7, r1, ip, lsr #32
   14508:	andeq	r7, r1, r4, lsr #32
   1450c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14510:	ldr	r2, [sp, #56]	; 0x38
   14514:	ldrb	r1, [r2, r3]
   14518:	sub	r2, r1, #33	; 0x21
   1451c:	uxtb	r2, r2
   14520:	cmp	r2, #29
   14524:	bhi	145c4 <__assert_fail@plt+0x3590>
   14528:	ldr	r0, [pc, #-36]	; 1450c <__assert_fail@plt+0x34d8>
   1452c:	mov	ip, #1
   14530:	ands	r2, r0, ip, lsl r2
   14534:	beq	145d4 <__assert_fail@plt+0x35a0>
   14538:	ldr	r2, [sp, #28]
   1453c:	cmp	r2, #0
   14540:	bne	146d4 <__assert_fail@plt+0x36a0>
   14544:	cmp	fp, r7
   14548:	ldr	r8, [sp, #28]
   1454c:	ldrhi	r2, [sp, #32]
   14550:	mov	sl, r3
   14554:	mov	r5, r8
   14558:	strbhi	r4, [r2, r7]
   1455c:	add	r2, r7, #1
   14560:	cmp	fp, r2
   14564:	movhi	r0, #34	; 0x22
   14568:	ldrhi	ip, [sp, #32]
   1456c:	mov	r4, r1
   14570:	strbhi	r0, [ip, r2]
   14574:	add	r2, r7, #2
   14578:	cmp	fp, r2
   1457c:	movhi	r0, #34	; 0x22
   14580:	ldrhi	ip, [sp, #32]
   14584:	strbhi	r0, [ip, r2]
   14588:	add	r2, r7, #3
   1458c:	cmp	fp, r2
   14590:	movhi	r0, #63	; 0x3f
   14594:	ldrhi	ip, [sp, #32]
   14598:	add	r7, r7, #4
   1459c:	strbhi	r0, [ip, r2]
   145a0:	mov	r2, r8
   145a4:	b	13750 <__assert_fail@plt+0x271c>
   145a8:	mov	ip, r2
   145ac:	mov	r2, r3
   145b0:	b	13f40 <__assert_fail@plt+0x2f0c>
   145b4:	ldr	sl, [sp, #32]
   145b8:	mov	r8, fp
   145bc:	ldr	r2, [sp, #28]
   145c0:	b	13990 <__assert_fail@plt+0x295c>
   145c4:	mov	r2, #0
   145c8:	mov	r8, r2
   145cc:	mov	r5, r2
   145d0:	b	13750 <__assert_fail@plt+0x271c>
   145d4:	mov	r8, r2
   145d8:	mov	r5, #0
   145dc:	b	13750 <__assert_fail@plt+0x271c>
   145e0:	ldr	r1, [sp, #152]	; 0x98
   145e4:	bl	130ac <__assert_fail@plt+0x2078>
   145e8:	str	r0, [sp, #168]	; 0xa8
   145ec:	b	1360c <__assert_fail@plt+0x25d8>
   145f0:	ldr	r1, [sp, #152]	; 0x98
   145f4:	bl	130ac <__assert_fail@plt+0x2078>
   145f8:	str	r0, [sp, #164]	; 0xa4
   145fc:	b	135ec <__assert_fail@plt+0x25b8>
   14600:	ldr	r7, [sp, #28]
   14604:	b	1364c <__assert_fail@plt+0x2618>
   14608:	ldr	sl, [sp, #32]
   1460c:	ldr	r2, [sp, #68]	; 0x44
   14610:	mov	r8, fp
   14614:	mov	fp, r7
   14618:	ldr	r3, [sp, #64]	; 0x40
   1461c:	cmp	r3, #0
   14620:	moveq	r2, #0
   14624:	andne	r2, r2, #1
   14628:	cmp	r2, #0
   1462c:	beq	14658 <__assert_fail@plt+0x3624>
   14630:	mov	r2, r3
   14634:	ldrb	r3, [r3]
   14638:	cmp	r3, #0
   1463c:	beq	14658 <__assert_fail@plt+0x3624>
   14640:	cmp	r8, fp
   14644:	strbhi	r3, [sl, fp]
   14648:	ldrb	r3, [r2, #1]!
   1464c:	add	fp, fp, #1
   14650:	cmp	r3, #0
   14654:	bne	14640 <__assert_fail@plt+0x360c>
   14658:	cmp	r8, fp
   1465c:	movhi	r3, #0
   14660:	strbhi	r3, [sl, fp]
   14664:	b	139ec <__assert_fail@plt+0x29b8>
   14668:	ldr	r3, [sp, #168]	; 0xa8
   1466c:	ldr	sl, [sp, #32]
   14670:	str	r3, [sp, #16]
   14674:	ldr	r3, [sp, #164]	; 0xa4
   14678:	mov	ip, #5
   1467c:	str	r3, [sp, #12]
   14680:	ldr	r3, [sp, #160]	; 0xa0
   14684:	ldr	r2, [sp, #56]	; 0x38
   14688:	str	r3, [sp, #8]
   1468c:	ldr	r3, [sp, #156]	; 0x9c
   14690:	ldr	r1, [sp, #72]	; 0x48
   14694:	str	r3, [sp, #4]
   14698:	mov	r0, sl
   1469c:	ldr	r3, [sp, #24]
   146a0:	str	ip, [sp]
   146a4:	bl	131cc <__assert_fail@plt+0x2198>
   146a8:	mov	fp, r0
   146ac:	b	139ec <__assert_fail@plt+0x29b8>
   146b0:	mov	r8, fp
   146b4:	ldr	sl, [sp, #32]
   146b8:	mov	fp, r7
   146bc:	mov	r2, r3
   146c0:	b	14618 <__assert_fail@plt+0x35e4>
   146c4:	mov	r8, fp
   146c8:	ldr	sl, [sp, #32]
   146cc:	mov	fp, r7
   146d0:	b	14618 <__assert_fail@plt+0x35e4>
   146d4:	ldr	sl, [sp, #32]
   146d8:	mov	r8, fp
   146dc:	b	139a8 <__assert_fail@plt+0x2974>
   146e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146e4:	sub	sp, sp, #52	; 0x34
   146e8:	mov	r4, r0
   146ec:	mov	r5, r3
   146f0:	mov	sl, r1
   146f4:	mov	fp, r2
   146f8:	bl	10f20 <__errno_location@plt>
   146fc:	ldr	r7, [pc, #412]	; 148a0 <__assert_fail@plt+0x386c>
   14700:	cmn	r4, #-2147483647	; 0x80000001
   14704:	ldr	r6, [r7]
   14708:	mov	r8, r0
   1470c:	movne	r0, #0
   14710:	moveq	r0, #1
   14714:	ldr	r3, [r8]
   14718:	orrs	r0, r0, r4, lsr #31
   1471c:	str	r3, [sp, #24]
   14720:	bne	1489c <__assert_fail@plt+0x3868>
   14724:	ldr	r2, [r7, #4]
   14728:	cmp	r4, r2
   1472c:	blt	1478c <__assert_fail@plt+0x3758>
   14730:	add	r9, r7, #8
   14734:	cmp	r6, r9
   14738:	str	r2, [sp, #44]	; 0x2c
   1473c:	beq	1486c <__assert_fail@plt+0x3838>
   14740:	mov	r3, #8
   14744:	sub	r2, r4, r2
   14748:	mov	r0, r6
   1474c:	str	r3, [sp]
   14750:	add	r2, r2, #1
   14754:	mvn	r3, #-2147483648	; 0x80000000
   14758:	add	r1, sp, #44	; 0x2c
   1475c:	bl	1554c <__assert_fail@plt+0x4518>
   14760:	mov	r6, r0
   14764:	str	r0, [r7]
   14768:	ldr	r0, [r7, #4]
   1476c:	ldr	r2, [sp, #44]	; 0x2c
   14770:	mov	r1, #0
   14774:	sub	r2, r2, r0
   14778:	add	r0, r6, r0, lsl #3
   1477c:	lsl	r2, r2, #3
   14780:	bl	10f38 <memset@plt>
   14784:	ldr	r3, [sp, #44]	; 0x2c
   14788:	str	r3, [r7, #4]
   1478c:	add	r3, r6, r4, lsl #3
   14790:	ldr	r1, [r5, #4]
   14794:	ldr	r7, [r3, #4]
   14798:	ldr	r9, [r6, r4, lsl #3]
   1479c:	ldr	r2, [r5, #40]	; 0x28
   147a0:	ldr	ip, [r5, #44]	; 0x2c
   147a4:	add	r0, r5, #8
   147a8:	str	r3, [sp, #28]
   147ac:	ldr	r3, [r5]
   147b0:	orr	r1, r1, #1
   147b4:	mov	lr, r0
   147b8:	str	r1, [sp, #32]
   147bc:	str	r0, [sp, #36]	; 0x24
   147c0:	str	r1, [sp, #4]
   147c4:	str	r2, [sp, #12]
   147c8:	str	r3, [sp]
   147cc:	mov	r0, r7
   147d0:	mov	r1, r9
   147d4:	str	ip, [sp, #16]
   147d8:	str	lr, [sp, #8]
   147dc:	mov	r3, fp
   147e0:	mov	r2, sl
   147e4:	bl	131cc <__assert_fail@plt+0x2198>
   147e8:	cmp	r9, r0
   147ec:	bhi	14858 <__assert_fail@plt+0x3824>
   147f0:	ldr	r3, [pc, #172]	; 148a4 <__assert_fail@plt+0x3870>
   147f4:	add	r9, r0, #1
   147f8:	cmp	r7, r3
   147fc:	str	r9, [r6, r4, lsl #3]
   14800:	beq	1480c <__assert_fail@plt+0x37d8>
   14804:	mov	r0, r7
   14808:	bl	12a84 <__assert_fail@plt+0x1a50>
   1480c:	mov	r0, r9
   14810:	bl	153e8 <__assert_fail@plt+0x43b4>
   14814:	ldr	lr, [sp, #28]
   14818:	ldr	ip, [r5, #44]	; 0x2c
   1481c:	ldr	r4, [r5, #40]	; 0x28
   14820:	mov	r3, fp
   14824:	mov	r2, sl
   14828:	mov	r1, r9
   1482c:	str	r0, [lr, #4]
   14830:	ldr	lr, [r5]
   14834:	ldr	r5, [sp, #36]	; 0x24
   14838:	str	ip, [sp, #16]
   1483c:	str	r5, [sp, #8]
   14840:	ldr	r5, [sp, #32]
   14844:	str	r4, [sp, #12]
   14848:	str	r5, [sp, #4]
   1484c:	str	lr, [sp]
   14850:	mov	r7, r0
   14854:	bl	131cc <__assert_fail@plt+0x2198>
   14858:	ldr	r3, [sp, #24]
   1485c:	mov	r0, r7
   14860:	str	r3, [r8]
   14864:	add	sp, sp, #52	; 0x34
   14868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1486c:	mov	r3, #8
   14870:	sub	r2, r4, r2
   14874:	str	r3, [sp]
   14878:	add	r1, sp, #44	; 0x2c
   1487c:	add	r2, r2, #1
   14880:	mvn	r3, #-2147483648	; 0x80000000
   14884:	bl	1554c <__assert_fail@plt+0x4518>
   14888:	mov	r6, r0
   1488c:	ldm	r9, {r0, r1}
   14890:	str	r6, [r7]
   14894:	stm	r6, {r0, r1}
   14898:	b	14768 <__assert_fail@plt+0x3734>
   1489c:	bl	1101c <abort@plt>
   148a0:	andeq	r8, r2, ip, lsl #2
   148a4:			; <UNDEFINED> instruction: 0x000281b4
   148a8:	push	{r4, r5, r6, lr}
   148ac:	mov	r5, r0
   148b0:	bl	10f20 <__errno_location@plt>
   148b4:	cmp	r5, #0
   148b8:	mov	r1, #48	; 0x30
   148bc:	mov	r4, r0
   148c0:	ldr	r0, [pc, #16]	; 148d8 <__assert_fail@plt+0x38a4>
   148c4:	ldr	r6, [r4]
   148c8:	movne	r0, r5
   148cc:	bl	15848 <__assert_fail@plt+0x4814>
   148d0:	str	r6, [r4]
   148d4:	pop	{r4, r5, r6, pc}
   148d8:			; <UNDEFINED> instruction: 0x000282b4
   148dc:	ldr	r3, [pc, #12]	; 148f0 <__assert_fail@plt+0x38bc>
   148e0:	cmp	r0, #0
   148e4:	moveq	r0, r3
   148e8:	ldr	r0, [r0]
   148ec:	bx	lr
   148f0:			; <UNDEFINED> instruction: 0x000282b4
   148f4:	ldr	r3, [pc, #12]	; 14908 <__assert_fail@plt+0x38d4>
   148f8:	cmp	r0, #0
   148fc:	moveq	r0, r3
   14900:	str	r1, [r0]
   14904:	bx	lr
   14908:			; <UNDEFINED> instruction: 0x000282b4
   1490c:	ldr	r3, [pc, #52]	; 14948 <__assert_fail@plt+0x3914>
   14910:	cmp	r0, #0
   14914:	moveq	r0, r3
   14918:	add	r3, r0, #8
   1491c:	push	{lr}		; (str lr, [sp, #-4]!)
   14920:	lsr	lr, r1, #5
   14924:	and	r1, r1, #31
   14928:	ldr	ip, [r3, lr, lsl #2]
   1492c:	lsr	r0, ip, r1
   14930:	eor	r2, r2, r0
   14934:	and	r2, r2, #1
   14938:	and	r0, r0, #1
   1493c:	eor	r1, ip, r2, lsl r1
   14940:	str	r1, [r3, lr, lsl #2]
   14944:	pop	{pc}		; (ldr pc, [sp], #4)
   14948:			; <UNDEFINED> instruction: 0x000282b4
   1494c:	ldr	r3, [pc, #16]	; 14964 <__assert_fail@plt+0x3930>
   14950:	cmp	r0, #0
   14954:	movne	r3, r0
   14958:	ldr	r0, [r3, #4]
   1495c:	str	r1, [r3, #4]
   14960:	bx	lr
   14964:			; <UNDEFINED> instruction: 0x000282b4
   14968:	ldr	r3, [pc, #44]	; 1499c <__assert_fail@plt+0x3968>
   1496c:	cmp	r0, #0
   14970:	moveq	r0, r3
   14974:	mov	ip, #10
   14978:	cmp	r2, #0
   1497c:	cmpne	r1, #0
   14980:	str	ip, [r0]
   14984:	beq	14994 <__assert_fail@plt+0x3960>
   14988:	str	r1, [r0, #40]	; 0x28
   1498c:	str	r2, [r0, #44]	; 0x2c
   14990:	bx	lr
   14994:	push	{r4, lr}
   14998:	bl	1101c <abort@plt>
   1499c:			; <UNDEFINED> instruction: 0x000282b4
   149a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   149a4:	sub	sp, sp, #24
   149a8:	ldr	ip, [pc, #108]	; 14a1c <__assert_fail@plt+0x39e8>
   149ac:	ldr	r4, [sp, #56]	; 0x38
   149b0:	mov	r9, r2
   149b4:	cmp	r4, #0
   149b8:	moveq	r4, ip
   149bc:	mov	sl, r3
   149c0:	mov	r7, r0
   149c4:	mov	r8, r1
   149c8:	bl	10f20 <__errno_location@plt>
   149cc:	ldr	r3, [r4, #44]	; 0x2c
   149d0:	mov	r1, r8
   149d4:	ldr	r6, [r0]
   149d8:	str	r3, [sp, #16]
   149dc:	ldr	r2, [r4, #40]	; 0x28
   149e0:	add	r3, r4, #8
   149e4:	str	r3, [sp, #8]
   149e8:	str	r2, [sp, #12]
   149ec:	ldr	r2, [r4, #4]
   149f0:	mov	r5, r0
   149f4:	str	r2, [sp, #4]
   149f8:	ldr	ip, [r4]
   149fc:	mov	r3, sl
   14a00:	mov	r2, r9
   14a04:	mov	r0, r7
   14a08:	str	ip, [sp]
   14a0c:	bl	131cc <__assert_fail@plt+0x2198>
   14a10:	str	r6, [r5]
   14a14:	add	sp, sp, #24
   14a18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a1c:			; <UNDEFINED> instruction: 0x000282b4
   14a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a24:	cmp	r3, #0
   14a28:	sub	sp, sp, #44	; 0x2c
   14a2c:	ldr	r4, [pc, #192]	; 14af4 <__assert_fail@plt+0x3ac0>
   14a30:	mov	r6, r2
   14a34:	movne	r4, r3
   14a38:	mov	r9, r1
   14a3c:	mov	r8, r0
   14a40:	bl	10f20 <__errno_location@plt>
   14a44:	ldr	r3, [r4, #44]	; 0x2c
   14a48:	ldr	r5, [r4, #4]
   14a4c:	add	sl, r4, #8
   14a50:	cmp	r6, #0
   14a54:	orreq	r5, r5, #1
   14a58:	mov	r1, #0
   14a5c:	ldr	r2, [r0]
   14a60:	str	r3, [sp, #16]
   14a64:	ldr	r3, [r4, #40]	; 0x28
   14a68:	stmib	sp, {r5, sl}
   14a6c:	str	r3, [sp, #12]
   14a70:	ldr	r3, [r4]
   14a74:	mov	r7, r0
   14a78:	str	r2, [sp, #28]
   14a7c:	str	r3, [sp]
   14a80:	mov	r2, r8
   14a84:	mov	r3, r9
   14a88:	mov	r0, r1
   14a8c:	bl	131cc <__assert_fail@plt+0x2198>
   14a90:	add	r1, r0, #1
   14a94:	mov	fp, r0
   14a98:	mov	r0, r1
   14a9c:	str	r1, [sp, #36]	; 0x24
   14aa0:	bl	153e8 <__assert_fail@plt+0x43b4>
   14aa4:	ldr	r3, [r4, #44]	; 0x2c
   14aa8:	mov	r2, r8
   14aac:	str	r3, [sp, #16]
   14ab0:	ldr	r3, [r4, #40]	; 0x28
   14ab4:	str	r5, [sp, #4]
   14ab8:	str	r3, [sp, #12]
   14abc:	str	sl, [sp, #8]
   14ac0:	ldr	ip, [r4]
   14ac4:	ldr	r1, [sp, #36]	; 0x24
   14ac8:	mov	r3, r9
   14acc:	str	ip, [sp]
   14ad0:	str	r0, [sp, #32]
   14ad4:	bl	131cc <__assert_fail@plt+0x2198>
   14ad8:	ldr	r2, [sp, #28]
   14adc:	cmp	r6, #0
   14ae0:	str	r2, [r7]
   14ae4:	ldr	r0, [sp, #32]
   14ae8:	strne	fp, [r6]
   14aec:	add	sp, sp, #44	; 0x2c
   14af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14af4:			; <UNDEFINED> instruction: 0x000282b4
   14af8:	mov	r3, r2
   14afc:	mov	r2, #0
   14b00:	b	14a20 <__assert_fail@plt+0x39ec>
   14b04:	push	{r4, r5, r6, r7, r8, lr}
   14b08:	ldr	r6, [pc, #116]	; 14b84 <__assert_fail@plt+0x3b50>
   14b0c:	ldr	r3, [r6, #4]
   14b10:	ldr	r7, [r6]
   14b14:	cmp	r3, #1
   14b18:	movgt	r5, r7
   14b1c:	movgt	r4, #1
   14b20:	ble	14b40 <__assert_fail@plt+0x3b0c>
   14b24:	ldr	r0, [r5, #12]
   14b28:	bl	12a84 <__assert_fail@plt+0x1a50>
   14b2c:	ldr	r3, [r6, #4]
   14b30:	add	r4, r4, #1
   14b34:	cmp	r3, r4
   14b38:	add	r5, r5, #8
   14b3c:	bgt	14b24 <__assert_fail@plt+0x3af0>
   14b40:	ldr	r0, [r7, #4]
   14b44:	ldr	r4, [pc, #60]	; 14b88 <__assert_fail@plt+0x3b54>
   14b48:	cmp	r0, r4
   14b4c:	beq	14b60 <__assert_fail@plt+0x3b2c>
   14b50:	bl	12a84 <__assert_fail@plt+0x1a50>
   14b54:	mov	r3, #256	; 0x100
   14b58:	str	r4, [r6, #12]
   14b5c:	str	r3, [r6, #8]
   14b60:	ldr	r4, [pc, #36]	; 14b8c <__assert_fail@plt+0x3b58>
   14b64:	cmp	r7, r4
   14b68:	beq	14b78 <__assert_fail@plt+0x3b44>
   14b6c:	mov	r0, r7
   14b70:	bl	12a84 <__assert_fail@plt+0x1a50>
   14b74:	str	r4, [r6]
   14b78:	mov	r3, #1
   14b7c:	str	r3, [r6, #4]
   14b80:	pop	{r4, r5, r6, r7, r8, pc}
   14b84:	andeq	r8, r2, ip, lsl #2
   14b88:			; <UNDEFINED> instruction: 0x000281b4
   14b8c:	andeq	r8, r2, r4, lsl r1
   14b90:	ldr	r3, [pc, #4]	; 14b9c <__assert_fail@plt+0x3b68>
   14b94:	mvn	r2, #0
   14b98:	b	146e0 <__assert_fail@plt+0x36ac>
   14b9c:			; <UNDEFINED> instruction: 0x000282b4
   14ba0:	ldr	r3, [pc]	; 14ba8 <__assert_fail@plt+0x3b74>
   14ba4:	b	146e0 <__assert_fail@plt+0x36ac>
   14ba8:			; <UNDEFINED> instruction: 0x000282b4
   14bac:	mov	r1, r0
   14bb0:	ldr	r3, [pc, #8]	; 14bc0 <__assert_fail@plt+0x3b8c>
   14bb4:	mvn	r2, #0
   14bb8:	mov	r0, #0
   14bbc:	b	146e0 <__assert_fail@plt+0x36ac>
   14bc0:			; <UNDEFINED> instruction: 0x000282b4
   14bc4:	mov	r2, r1
   14bc8:	ldr	r3, [pc, #8]	; 14bd8 <__assert_fail@plt+0x3ba4>
   14bcc:	mov	r1, r0
   14bd0:	mov	r0, #0
   14bd4:	b	146e0 <__assert_fail@plt+0x36ac>
   14bd8:			; <UNDEFINED> instruction: 0x000282b4
   14bdc:	push	{r4, r5, lr}
   14be0:	sub	sp, sp, #52	; 0x34
   14be4:	mov	r5, r2
   14be8:	mov	r4, r0
   14bec:	mov	r0, sp
   14bf0:	bl	1307c <__assert_fail@plt+0x2048>
   14bf4:	mov	r3, sp
   14bf8:	mov	r1, r5
   14bfc:	mov	r0, r4
   14c00:	mvn	r2, #0
   14c04:	bl	146e0 <__assert_fail@plt+0x36ac>
   14c08:	add	sp, sp, #52	; 0x34
   14c0c:	pop	{r4, r5, pc}
   14c10:	push	{r4, r5, r6, lr}
   14c14:	sub	sp, sp, #48	; 0x30
   14c18:	mov	r5, r2
   14c1c:	mov	r6, r3
   14c20:	mov	r4, r0
   14c24:	mov	r0, sp
   14c28:	bl	1307c <__assert_fail@plt+0x2048>
   14c2c:	mov	r3, sp
   14c30:	mov	r2, r6
   14c34:	mov	r1, r5
   14c38:	mov	r0, r4
   14c3c:	bl	146e0 <__assert_fail@plt+0x36ac>
   14c40:	add	sp, sp, #48	; 0x30
   14c44:	pop	{r4, r5, r6, pc}
   14c48:	mov	r2, r1
   14c4c:	mov	r1, r0
   14c50:	mov	r0, #0
   14c54:	b	14bdc <__assert_fail@plt+0x3ba8>
   14c58:	mov	r3, r2
   14c5c:	mov	r2, r1
   14c60:	mov	r1, r0
   14c64:	mov	r0, #0
   14c68:	b	14c10 <__assert_fail@plt+0x3bdc>
   14c6c:	push	{r4, r5, r6, r7, r8, lr}
   14c70:	mov	r7, r0
   14c74:	ldr	lr, [pc, #100]	; 14ce0 <__assert_fail@plt+0x3cac>
   14c78:	mov	r8, r1
   14c7c:	mov	r4, r2
   14c80:	ldm	lr!, {r0, r1, r2, r3}
   14c84:	sub	sp, sp, #48	; 0x30
   14c88:	mov	ip, sp
   14c8c:	lsr	r5, r4, #5
   14c90:	stmia	ip!, {r0, r1, r2, r3}
   14c94:	add	r6, sp, #8
   14c98:	ldm	lr!, {r0, r1, r2, r3}
   14c9c:	and	r4, r4, #31
   14ca0:	stmia	ip!, {r0, r1, r2, r3}
   14ca4:	ldm	lr, {r0, r1, r2, r3}
   14ca8:	stm	ip, {r0, r1, r2, r3}
   14cac:	mov	r2, r8
   14cb0:	ldr	lr, [r6, r5, lsl #2]
   14cb4:	mov	r1, r7
   14cb8:	mov	r3, sp
   14cbc:	lsr	ip, lr, r4
   14cc0:	eor	ip, ip, #1
   14cc4:	and	ip, ip, #1
   14cc8:	mov	r0, #0
   14ccc:	eor	r4, lr, ip, lsl r4
   14cd0:	str	r4, [r6, r5, lsl #2]
   14cd4:	bl	146e0 <__assert_fail@plt+0x36ac>
   14cd8:	add	sp, sp, #48	; 0x30
   14cdc:	pop	{r4, r5, r6, r7, r8, pc}
   14ce0:			; <UNDEFINED> instruction: 0x000282b4
   14ce4:	mov	r2, r1
   14ce8:	mvn	r1, #0
   14cec:	b	14c6c <__assert_fail@plt+0x3c38>
   14cf0:	mov	r2, #58	; 0x3a
   14cf4:	mvn	r1, #0
   14cf8:	b	14c6c <__assert_fail@plt+0x3c38>
   14cfc:	mov	r2, #58	; 0x3a
   14d00:	b	14c6c <__assert_fail@plt+0x3c38>
   14d04:	push	{r4, r5, r6, r7, lr}
   14d08:	sub	sp, sp, #100	; 0x64
   14d0c:	mov	r6, r0
   14d10:	mov	r0, sp
   14d14:	mov	r7, r2
   14d18:	bl	1307c <__assert_fail@plt+0x2048>
   14d1c:	mov	ip, sp
   14d20:	add	lr, sp, #48	; 0x30
   14d24:	ldm	ip!, {r0, r1, r2, r3}
   14d28:	stmia	lr!, {r0, r1, r2, r3}
   14d2c:	ldm	ip!, {r0, r1, r2, r3}
   14d30:	ldr	r5, [sp, #60]	; 0x3c
   14d34:	stmia	lr!, {r0, r1, r2, r3}
   14d38:	mvn	r4, r5
   14d3c:	ldm	ip, {r0, r1, r2, r3}
   14d40:	and	ip, r4, #67108864	; 0x4000000
   14d44:	eor	ip, ip, r5
   14d48:	str	ip, [sp, #60]	; 0x3c
   14d4c:	stm	lr, {r0, r1, r2, r3}
   14d50:	mov	r1, r7
   14d54:	mov	r0, r6
   14d58:	add	r3, sp, #48	; 0x30
   14d5c:	mvn	r2, #0
   14d60:	bl	146e0 <__assert_fail@plt+0x36ac>
   14d64:	add	sp, sp, #100	; 0x64
   14d68:	pop	{r4, r5, r6, r7, pc}
   14d6c:	push	{r4, r5, r6, r7, r8, lr}
   14d70:	mov	r5, r1
   14d74:	ldr	lr, [pc, #100]	; 14de0 <__assert_fail@plt+0x3dac>
   14d78:	mov	r4, r2
   14d7c:	mov	r7, r0
   14d80:	mov	r8, r3
   14d84:	ldm	lr!, {r0, r1, r2, r3}
   14d88:	sub	sp, sp, #48	; 0x30
   14d8c:	mov	ip, sp
   14d90:	mov	r6, #10
   14d94:	stmia	ip!, {r0, r1, r2, r3}
   14d98:	cmp	r4, #0
   14d9c:	cmpne	r5, #0
   14da0:	ldm	lr!, {r0, r1, r2, r3}
   14da4:	str	r6, [sp]
   14da8:	stmia	ip!, {r0, r1, r2, r3}
   14dac:	ldm	lr, {r0, r1, r2, r3}
   14db0:	stm	ip, {r0, r1, r2, r3}
   14db4:	beq	14ddc <__assert_fail@plt+0x3da8>
   14db8:	mov	r3, sp
   14dbc:	mov	r1, r8
   14dc0:	mov	r0, r7
   14dc4:	ldr	r2, [sp, #72]	; 0x48
   14dc8:	str	r5, [sp, #40]	; 0x28
   14dcc:	str	r4, [sp, #44]	; 0x2c
   14dd0:	bl	146e0 <__assert_fail@plt+0x36ac>
   14dd4:	add	sp, sp, #48	; 0x30
   14dd8:	pop	{r4, r5, r6, r7, r8, pc}
   14ddc:	bl	1101c <abort@plt>
   14de0:			; <UNDEFINED> instruction: 0x000282b4
   14de4:	push	{lr}		; (str lr, [sp, #-4]!)
   14de8:	sub	sp, sp, #12
   14dec:	mvn	ip, #0
   14df0:	str	ip, [sp]
   14df4:	bl	14d6c <__assert_fail@plt+0x3d38>
   14df8:	add	sp, sp, #12
   14dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   14e00:	push	{lr}		; (str lr, [sp, #-4]!)
   14e04:	sub	sp, sp, #12
   14e08:	mvn	ip, #0
   14e0c:	mov	r3, r2
   14e10:	str	ip, [sp]
   14e14:	mov	r2, r1
   14e18:	mov	r1, r0
   14e1c:	mov	r0, #0
   14e20:	bl	14d6c <__assert_fail@plt+0x3d38>
   14e24:	add	sp, sp, #12
   14e28:	pop	{pc}		; (ldr pc, [sp], #4)
   14e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   14e30:	sub	sp, sp, #12
   14e34:	str	r3, [sp]
   14e38:	mov	r3, r2
   14e3c:	mov	r2, r1
   14e40:	mov	r1, r0
   14e44:	mov	r0, #0
   14e48:	bl	14d6c <__assert_fail@plt+0x3d38>
   14e4c:	add	sp, sp, #12
   14e50:	pop	{pc}		; (ldr pc, [sp], #4)
   14e54:	ldr	r3, [pc]	; 14e5c <__assert_fail@plt+0x3e28>
   14e58:	b	146e0 <__assert_fail@plt+0x36ac>
   14e5c:	andeq	r8, r2, ip, lsl r1
   14e60:	mov	r2, r1
   14e64:	ldr	r3, [pc, #8]	; 14e74 <__assert_fail@plt+0x3e40>
   14e68:	mov	r1, r0
   14e6c:	mov	r0, #0
   14e70:	b	146e0 <__assert_fail@plt+0x36ac>
   14e74:	andeq	r8, r2, ip, lsl r1
   14e78:	ldr	r3, [pc, #4]	; 14e84 <__assert_fail@plt+0x3e50>
   14e7c:	mvn	r2, #0
   14e80:	b	146e0 <__assert_fail@plt+0x36ac>
   14e84:	andeq	r8, r2, ip, lsl r1
   14e88:	mov	r1, r0
   14e8c:	ldr	r3, [pc, #8]	; 14e9c <__assert_fail@plt+0x3e68>
   14e90:	mvn	r2, #0
   14e94:	mov	r0, #0
   14e98:	b	146e0 <__assert_fail@plt+0x36ac>
   14e9c:	andeq	r8, r2, ip, lsl r1
   14ea0:	push	{r4, r5, r6, lr}
   14ea4:	sub	sp, sp, #32
   14ea8:	cmp	r1, #0
   14eac:	mov	r4, r0
   14eb0:	ldr	r5, [sp, #48]	; 0x30
   14eb4:	ldr	r6, [sp, #52]	; 0x34
   14eb8:	beq	151d0 <__assert_fail@plt+0x419c>
   14ebc:	stm	sp, {r2, r3}
   14ec0:	mov	r3, r1
   14ec4:	ldr	r2, [pc, #808]	; 151f4 <__assert_fail@plt+0x41c0>
   14ec8:	mov	r1, #1
   14ecc:	bl	10f68 <__fprintf_chk@plt>
   14ed0:	mov	r2, #5
   14ed4:	ldr	r1, [pc, #796]	; 151f8 <__assert_fail@plt+0x41c4>
   14ed8:	mov	r0, #0
   14edc:	bl	10e3c <dcgettext@plt>
   14ee0:	ldr	r3, [pc, #788]	; 151fc <__assert_fail@plt+0x41c8>
   14ee4:	ldr	r2, [pc, #788]	; 15200 <__assert_fail@plt+0x41cc>
   14ee8:	str	r3, [sp]
   14eec:	mov	r1, #1
   14ef0:	mov	r3, r0
   14ef4:	mov	r0, r4
   14ef8:	bl	10f68 <__fprintf_chk@plt>
   14efc:	mov	r1, r4
   14f00:	mov	r0, #10
   14f04:	bl	10e30 <fputc_unlocked@plt>
   14f08:	mov	r2, #5
   14f0c:	ldr	r1, [pc, #752]	; 15204 <__assert_fail@plt+0x41d0>
   14f10:	mov	r0, #0
   14f14:	bl	10e3c <dcgettext@plt>
   14f18:	mov	r1, #1
   14f1c:	ldr	r3, [pc, #740]	; 15208 <__assert_fail@plt+0x41d4>
   14f20:	mov	r2, r0
   14f24:	mov	r0, r4
   14f28:	bl	10f68 <__fprintf_chk@plt>
   14f2c:	mov	r1, r4
   14f30:	mov	r0, #10
   14f34:	bl	10e30 <fputc_unlocked@plt>
   14f38:	cmp	r6, #9
   14f3c:	ldrls	pc, [pc, r6, lsl #2]
   14f40:	b	151e8 <__assert_fail@plt+0x41b4>
   14f44:	andeq	r4, r1, r8, asr #31
   14f48:	ldrdeq	r4, [r1], -r0
   14f4c:	strdeq	r4, [r1], -ip
   14f50:	andeq	r5, r1, r0, lsr r0
   14f54:	andeq	r5, r1, ip, rrx
   14f58:	andeq	r5, r1, r8, lsr #1
   14f5c:	andeq	r5, r1, r4, ror #1
   14f60:	andeq	r5, r1, r8, lsr #2
   14f64:	andeq	r5, r1, r8, ror r1
   14f68:	andeq	r4, r1, ip, ror #30
   14f6c:	ldr	r1, [pc, #664]	; 1520c <__assert_fail@plt+0x41d8>
   14f70:	mov	r2, #5
   14f74:	mov	r0, #0
   14f78:	bl	10e3c <dcgettext@plt>
   14f7c:	ldr	ip, [r5, #32]
   14f80:	ldr	r1, [r5, #28]
   14f84:	ldr	r2, [r5, #24]
   14f88:	ldr	r3, [r5]
   14f8c:	ldr	r6, [r5, #20]
   14f90:	str	ip, [sp, #28]
   14f94:	ldr	lr, [r5, #16]
   14f98:	str	r1, [sp, #24]
   14f9c:	ldr	ip, [r5, #12]
   14fa0:	str	r2, [sp, #20]
   14fa4:	ldr	r1, [r5, #8]
   14fa8:	ldr	r2, [r5, #4]
   14fac:	str	r6, [sp, #16]
   14fb0:	stmib	sp, {r1, ip, lr}
   14fb4:	mov	r1, #1
   14fb8:	str	r2, [sp]
   14fbc:	mov	r2, r0
   14fc0:	mov	r0, r4
   14fc4:	bl	10f68 <__fprintf_chk@plt>
   14fc8:	add	sp, sp, #32
   14fcc:	pop	{r4, r5, r6, pc}
   14fd0:	mov	r2, #5
   14fd4:	ldr	r1, [pc, #564]	; 15210 <__assert_fail@plt+0x41dc>
   14fd8:	mov	r0, #0
   14fdc:	bl	10e3c <dcgettext@plt>
   14fe0:	ldr	r3, [r5]
   14fe4:	mov	r1, #1
   14fe8:	mov	r2, r0
   14fec:	mov	r0, r4
   14ff0:	add	sp, sp, #32
   14ff4:	pop	{r4, r5, r6, lr}
   14ff8:	b	10f68 <__fprintf_chk@plt>
   14ffc:	mov	r2, #5
   15000:	ldr	r1, [pc, #524]	; 15214 <__assert_fail@plt+0x41e0>
   15004:	mov	r0, #0
   15008:	bl	10e3c <dcgettext@plt>
   1500c:	ldr	r2, [r5, #4]
   15010:	ldr	r3, [r5]
   15014:	mov	r1, #1
   15018:	str	r2, [sp, #48]	; 0x30
   1501c:	mov	r2, r0
   15020:	mov	r0, r4
   15024:	add	sp, sp, #32
   15028:	pop	{r4, r5, r6, lr}
   1502c:	b	10f68 <__fprintf_chk@plt>
   15030:	mov	r2, #5
   15034:	ldr	r1, [pc, #476]	; 15218 <__assert_fail@plt+0x41e4>
   15038:	mov	r0, #0
   1503c:	bl	10e3c <dcgettext@plt>
   15040:	ldr	r1, [r5, #8]
   15044:	ldr	r2, [r5, #4]
   15048:	ldr	r3, [r5]
   1504c:	str	r1, [sp, #52]	; 0x34
   15050:	str	r2, [sp, #48]	; 0x30
   15054:	mov	r1, #1
   15058:	mov	r2, r0
   1505c:	mov	r0, r4
   15060:	add	sp, sp, #32
   15064:	pop	{r4, r5, r6, lr}
   15068:	b	10f68 <__fprintf_chk@plt>
   1506c:	mov	r2, #5
   15070:	ldr	r1, [pc, #420]	; 1521c <__assert_fail@plt+0x41e8>
   15074:	mov	r0, #0
   15078:	bl	10e3c <dcgettext@plt>
   1507c:	ldr	r1, [r5, #8]
   15080:	ldr	ip, [r5, #12]
   15084:	ldr	r2, [r5, #4]
   15088:	ldr	r3, [r5]
   1508c:	stmib	sp, {r1, ip}
   15090:	str	r2, [sp]
   15094:	mov	r1, #1
   15098:	mov	r2, r0
   1509c:	mov	r0, r4
   150a0:	bl	10f68 <__fprintf_chk@plt>
   150a4:	b	14fc8 <__assert_fail@plt+0x3f94>
   150a8:	mov	r2, #5
   150ac:	ldr	r1, [pc, #364]	; 15220 <__assert_fail@plt+0x41ec>
   150b0:	mov	r0, #0
   150b4:	bl	10e3c <dcgettext@plt>
   150b8:	add	r1, r5, #8
   150bc:	ldr	r2, [r5, #4]
   150c0:	ldm	r1, {r1, ip, lr}
   150c4:	ldr	r3, [r5]
   150c8:	str	r2, [sp]
   150cc:	stmib	sp, {r1, ip, lr}
   150d0:	mov	r1, #1
   150d4:	mov	r2, r0
   150d8:	mov	r0, r4
   150dc:	bl	10f68 <__fprintf_chk@plt>
   150e0:	b	14fc8 <__assert_fail@plt+0x3f94>
   150e4:	mov	r2, #5
   150e8:	ldr	r1, [pc, #308]	; 15224 <__assert_fail@plt+0x41f0>
   150ec:	mov	r0, #0
   150f0:	bl	10e3c <dcgettext@plt>
   150f4:	add	r1, r5, #8
   150f8:	ldr	r2, [r5, #4]
   150fc:	ldm	r1, {r1, ip, lr}
   15100:	ldr	r6, [r5, #20]
   15104:	ldr	r3, [r5]
   15108:	stmib	sp, {r1, ip, lr}
   1510c:	mov	r1, #1
   15110:	str	r2, [sp]
   15114:	str	r6, [sp, #16]
   15118:	mov	r2, r0
   1511c:	mov	r0, r4
   15120:	bl	10f68 <__fprintf_chk@plt>
   15124:	b	14fc8 <__assert_fail@plt+0x3f94>
   15128:	mov	r2, #5
   1512c:	ldr	r1, [pc, #244]	; 15228 <__assert_fail@plt+0x41f4>
   15130:	mov	r0, #0
   15134:	bl	10e3c <dcgettext@plt>
   15138:	ldr	r2, [r5, #24]
   1513c:	ldr	r3, [r5]
   15140:	ldr	r6, [r5, #20]
   15144:	ldr	lr, [r5, #16]
   15148:	ldr	ip, [r5, #12]
   1514c:	str	r2, [sp, #20]
   15150:	ldr	r1, [r5, #8]
   15154:	ldr	r2, [r5, #4]
   15158:	str	r6, [sp, #16]
   1515c:	stmib	sp, {r1, ip, lr}
   15160:	mov	r1, #1
   15164:	str	r2, [sp]
   15168:	mov	r2, r0
   1516c:	mov	r0, r4
   15170:	bl	10f68 <__fprintf_chk@plt>
   15174:	b	14fc8 <__assert_fail@plt+0x3f94>
   15178:	mov	r2, #5
   1517c:	ldr	r1, [pc, #168]	; 1522c <__assert_fail@plt+0x41f8>
   15180:	mov	r0, #0
   15184:	bl	10e3c <dcgettext@plt>
   15188:	ldr	r1, [r5, #28]
   1518c:	ldr	r2, [r5, #24]
   15190:	ldr	r3, [r5]
   15194:	ldr	r6, [r5, #20]
   15198:	ldr	lr, [r5, #16]
   1519c:	str	r1, [sp, #24]
   151a0:	ldr	ip, [r5, #12]
   151a4:	str	r2, [sp, #20]
   151a8:	ldr	r1, [r5, #8]
   151ac:	ldr	r2, [r5, #4]
   151b0:	str	r6, [sp, #16]
   151b4:	stmib	sp, {r1, ip, lr}
   151b8:	mov	r1, #1
   151bc:	str	r2, [sp]
   151c0:	mov	r2, r0
   151c4:	mov	r0, r4
   151c8:	bl	10f68 <__fprintf_chk@plt>
   151cc:	b	14fc8 <__assert_fail@plt+0x3f94>
   151d0:	str	r3, [sp]
   151d4:	mov	r1, #1
   151d8:	mov	r3, r2
   151dc:	ldr	r2, [pc, #76]	; 15230 <__assert_fail@plt+0x41fc>
   151e0:	bl	10f68 <__fprintf_chk@plt>
   151e4:	b	14ed0 <__assert_fail@plt+0x3e9c>
   151e8:	mov	r2, #5
   151ec:	ldr	r1, [pc, #64]	; 15234 <__assert_fail@plt+0x4200>
   151f0:	b	14f74 <__assert_fail@plt+0x3f40>
   151f4:	muleq	r1, r4, r0
   151f8:	andeq	r7, r1, r8, lsr #1
   151fc:	andeq	r0, r0, r6, ror #15
   15200:	andeq	r7, r1, r0, lsl #7
   15204:	andeq	r7, r1, ip, lsr #1
   15208:	andeq	r7, r1, r8, asr r1
   1520c:	andeq	r7, r1, r8, lsl #5
   15210:	andeq	r7, r1, ip, ror r1
   15214:	andeq	r7, r1, ip, lsl #3
   15218:	andeq	r7, r1, r4, lsr #3
   1521c:	andeq	r7, r1, r0, asr #3
   15220:	andeq	r7, r1, r0, ror #3
   15224:	andeq	r7, r1, r4, lsl #4
   15228:	andeq	r7, r1, ip, lsr #4
   1522c:	andeq	r7, r1, r8, asr r2
   15230:	andeq	r7, r1, r0, lsr #1
   15234:			; <UNDEFINED> instruction: 0x000172bc
   15238:	push	{r4, r5, lr}
   1523c:	sub	sp, sp, #12
   15240:	ldr	r5, [sp, #24]
   15244:	ldr	ip, [r5]
   15248:	cmp	ip, #0
   1524c:	beq	15268 <__assert_fail@plt+0x4234>
   15250:	mov	lr, r5
   15254:	mov	ip, #0
   15258:	ldr	r4, [lr, #4]!
   1525c:	add	ip, ip, #1
   15260:	cmp	r4, #0
   15264:	bne	15258 <__assert_fail@plt+0x4224>
   15268:	stm	sp, {r5, ip}
   1526c:	bl	14ea0 <__assert_fail@plt+0x3e6c>
   15270:	add	sp, sp, #12
   15274:	pop	{r4, r5, pc}
   15278:	push	{r4, r5, lr}
   1527c:	sub	sp, sp, #52	; 0x34
   15280:	add	r5, sp, #4
   15284:	ldr	r4, [sp, #64]	; 0x40
   15288:	mov	ip, #0
   1528c:	sub	r4, r4, #4
   15290:	ldr	lr, [r4, #4]!
   15294:	cmp	lr, #0
   15298:	str	lr, [r5, #4]!
   1529c:	beq	152ac <__assert_fail@plt+0x4278>
   152a0:	add	ip, ip, #1
   152a4:	cmp	ip, #10
   152a8:	bne	15290 <__assert_fail@plt+0x425c>
   152ac:	add	lr, sp, #8
   152b0:	str	ip, [sp, #4]
   152b4:	str	lr, [sp]
   152b8:	bl	14ea0 <__assert_fail@plt+0x3e6c>
   152bc:	add	sp, sp, #52	; 0x34
   152c0:	pop	{r4, r5, pc}
   152c4:	push	{r3}		; (str r3, [sp, #-4]!)
   152c8:	push	{r4, lr}
   152cc:	sub	sp, sp, #60	; 0x3c
   152d0:	add	lr, sp, #56	; 0x38
   152d4:	add	r3, sp, #72	; 0x48
   152d8:	str	r3, [lr, #-44]!	; 0xffffffd4
   152dc:	add	r4, sp, #68	; 0x44
   152e0:	mov	r3, #0
   152e4:	ldr	ip, [r4, #4]!
   152e8:	cmp	ip, #0
   152ec:	str	ip, [lr, #4]!
   152f0:	beq	15300 <__assert_fail@plt+0x42cc>
   152f4:	add	r3, r3, #1
   152f8:	cmp	r3, #10
   152fc:	bne	152e4 <__assert_fail@plt+0x42b0>
   15300:	add	ip, sp, #16
   15304:	str	r3, [sp, #4]
   15308:	str	ip, [sp]
   1530c:	ldr	r3, [sp, #68]	; 0x44
   15310:	bl	14ea0 <__assert_fail@plt+0x3e6c>
   15314:	add	sp, sp, #60	; 0x3c
   15318:	pop	{r4, lr}
   1531c:	add	sp, sp, #4
   15320:	bx	lr
   15324:	ldr	r3, [pc, #116]	; 153a0 <__assert_fail@plt+0x436c>
   15328:	push	{r4, lr}
   1532c:	mov	r0, #10
   15330:	ldr	r1, [r3]
   15334:	bl	10e30 <fputc_unlocked@plt>
   15338:	mov	r2, #5
   1533c:	ldr	r1, [pc, #96]	; 153a4 <__assert_fail@plt+0x4370>
   15340:	mov	r0, #0
   15344:	bl	10e3c <dcgettext@plt>
   15348:	ldr	r2, [pc, #88]	; 153a8 <__assert_fail@plt+0x4374>
   1534c:	mov	r1, r0
   15350:	mov	r0, #1
   15354:	bl	10f50 <__printf_chk@plt>
   15358:	mov	r2, #5
   1535c:	ldr	r1, [pc, #72]	; 153ac <__assert_fail@plt+0x4378>
   15360:	mov	r0, #0
   15364:	bl	10e3c <dcgettext@plt>
   15368:	ldr	r3, [pc, #64]	; 153b0 <__assert_fail@plt+0x437c>
   1536c:	ldr	r2, [pc, #64]	; 153b4 <__assert_fail@plt+0x4380>
   15370:	mov	r1, r0
   15374:	mov	r0, #1
   15378:	bl	10f50 <__printf_chk@plt>
   1537c:	mov	r2, #5
   15380:	ldr	r1, [pc, #48]	; 153b8 <__assert_fail@plt+0x4384>
   15384:	mov	r0, #0
   15388:	bl	10e3c <dcgettext@plt>
   1538c:	ldr	r2, [pc, #40]	; 153bc <__assert_fail@plt+0x4388>
   15390:	pop	{r4, lr}
   15394:	mov	r1, r0
   15398:	mov	r0, #1
   1539c:	b	10f50 <__printf_chk@plt>
   153a0:	andeq	r8, r2, ip, ror #2
   153a4:	strdeq	r7, [r1], -r8
   153a8:	andeq	r7, r1, ip, lsl #6
   153ac:	andeq	r7, r1, r4, lsr #6
   153b0:	andeq	r6, r1, ip, lsr #21
   153b4:	ldrdeq	r6, [r1], -r4
   153b8:	andeq	r7, r1, r8, lsr r3
   153bc:	andeq	r7, r1, r0, ror #6
   153c0:	push	{r4, lr}
   153c4:	bl	15990 <__assert_fail@plt+0x495c>
   153c8:	cmp	r0, #0
   153cc:	popne	{r4, pc}
   153d0:	bl	15908 <__assert_fail@plt+0x48d4>
   153d4:	push	{r4, lr}
   153d8:	bl	15990 <__assert_fail@plt+0x495c>
   153dc:	cmp	r0, #0
   153e0:	popne	{r4, pc}
   153e4:	bl	15908 <__assert_fail@plt+0x48d4>
   153e8:	push	{r4, lr}
   153ec:	bl	15990 <__assert_fail@plt+0x495c>
   153f0:	cmp	r0, #0
   153f4:	popne	{r4, pc}
   153f8:	bl	15908 <__assert_fail@plt+0x48d4>
   153fc:	push	{r4, r5, r6, lr}
   15400:	mov	r5, r0
   15404:	mov	r4, r1
   15408:	bl	159bc <__assert_fail@plt+0x4988>
   1540c:	cmp	r0, #0
   15410:	popne	{r4, r5, r6, pc}
   15414:	adds	r4, r4, #0
   15418:	movne	r4, #1
   1541c:	cmp	r5, #0
   15420:	orreq	r4, r4, #1
   15424:	cmp	r4, #0
   15428:	popeq	{r4, r5, r6, pc}
   1542c:	bl	15908 <__assert_fail@plt+0x48d4>
   15430:	push	{r4, lr}
   15434:	cmp	r1, #0
   15438:	orreq	r1, r1, #1
   1543c:	bl	159bc <__assert_fail@plt+0x4988>
   15440:	cmp	r0, #0
   15444:	popne	{r4, pc}
   15448:	bl	15908 <__assert_fail@plt+0x48d4>
   1544c:	push	{r4, r5, r6, lr}
   15450:	mov	r6, r0
   15454:	mov	r5, r1
   15458:	mov	r4, r2
   1545c:	bl	15ca8 <__assert_fail@plt+0x4c74>
   15460:	cmp	r0, #0
   15464:	popne	{r4, r5, r6, pc}
   15468:	cmp	r6, #0
   1546c:	beq	1547c <__assert_fail@plt+0x4448>
   15470:	cmp	r5, #0
   15474:	cmpne	r4, #0
   15478:	popeq	{r4, r5, r6, pc}
   1547c:	bl	15908 <__assert_fail@plt+0x48d4>
   15480:	b	1544c <__assert_fail@plt+0x4418>
   15484:	cmp	r2, #0
   15488:	cmpne	r1, #0
   1548c:	moveq	r2, #1
   15490:	moveq	r1, r2
   15494:	push	{r4, lr}
   15498:	bl	15ca8 <__assert_fail@plt+0x4c74>
   1549c:	cmp	r0, #0
   154a0:	popne	{r4, pc}
   154a4:	bl	15908 <__assert_fail@plt+0x48d4>
   154a8:	mov	r2, r1
   154ac:	mov	r1, r0
   154b0:	mov	r0, #0
   154b4:	b	1544c <__assert_fail@plt+0x4418>
   154b8:	mov	r2, r1
   154bc:	mov	r1, r0
   154c0:	mov	r0, #0
   154c4:	b	15484 <__assert_fail@plt+0x4450>
   154c8:	push	{r4, r5, r6, lr}
   154cc:	subs	r6, r0, #0
   154d0:	sub	sp, sp, #8
   154d4:	mov	r5, r1
   154d8:	ldr	r4, [r1]
   154dc:	beq	15518 <__assert_fail@plt+0x44e4>
   154e0:	lsr	r1, r4, #1
   154e4:	add	r3, r1, #1
   154e8:	mvn	r3, r3
   154ec:	cmp	r4, r3
   154f0:	bhi	15514 <__assert_fail@plt+0x44e0>
   154f4:	add	r4, r4, #1
   154f8:	add	r4, r4, r1
   154fc:	mov	r0, r6
   15500:	mov	r1, r4
   15504:	bl	1544c <__assert_fail@plt+0x4418>
   15508:	str	r4, [r5]
   1550c:	add	sp, sp, #8
   15510:	pop	{r4, r5, r6, pc}
   15514:	bl	15908 <__assert_fail@plt+0x48d4>
   15518:	cmp	r4, #0
   1551c:	bne	154fc <__assert_fail@plt+0x44c8>
   15520:	mov	r1, r2
   15524:	mov	r0, #64	; 0x40
   15528:	str	r2, [sp, #4]
   1552c:	bl	15e24 <__assert_fail@plt+0x4df0>
   15530:	ldr	r2, [sp, #4]
   15534:	cmp	r0, #0
   15538:	movne	r4, r0
   1553c:	addeq	r4, r0, #1
   15540:	b	154fc <__assert_fail@plt+0x44c8>
   15544:	mov	r2, #1
   15548:	b	154c8 <__assert_fail@plt+0x4494>
   1554c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15550:	sub	sp, sp, #12
   15554:	ldr	r6, [r1]
   15558:	mov	sl, r1
   1555c:	mov	r9, r0
   15560:	asrs	r4, r6, #1
   15564:	mov	r5, r2
   15568:	mov	fp, r3
   1556c:	ldr	r7, [sp, #48]	; 0x30
   15570:	bmi	156dc <__assert_fail@plt+0x46a8>
   15574:	mvn	r3, #-2147483648	; 0x80000000
   15578:	sub	r3, r3, r4
   1557c:	cmp	r6, r3
   15580:	movle	r3, #0
   15584:	movgt	r3, #1
   15588:	mvn	r8, fp
   1558c:	cmp	r3, #0
   15590:	addeq	r4, r4, r6
   15594:	mvnne	r4, #-2147483648	; 0x80000000
   15598:	lsr	r8, r8, #31
   1559c:	cmp	fp, r4
   155a0:	movge	r3, #0
   155a4:	andlt	r3, r8, #1
   155a8:	cmp	r3, #0
   155ac:	beq	15694 <__assert_fail@plt+0x4660>
   155b0:	cmp	r7, #0
   155b4:	blt	15764 <__assert_fail@plt+0x4730>
   155b8:	bne	1575c <__assert_fail@plt+0x4728>
   155bc:	mov	r2, #64	; 0x40
   155c0:	mov	r1, r7
   155c4:	mov	r0, r2
   155c8:	str	r2, [sp, #4]
   155cc:	bl	16030 <__assert_fail@plt+0x4ffc>
   155d0:	ldr	r2, [sp, #4]
   155d4:	mov	r1, r7
   155d8:	mov	r4, r0
   155dc:	mov	r0, r2
   155e0:	bl	16250 <__assert_fail@plt+0x521c>
   155e4:	ldr	r2, [sp, #4]
   155e8:	sub	r1, r2, r1
   155ec:	cmp	r9, #0
   155f0:	sub	r3, r4, r6
   155f4:	streq	r9, [sl]
   155f8:	cmp	r3, r5
   155fc:	bge	15680 <__assert_fail@plt+0x464c>
   15600:	cmp	r5, #0
   15604:	blt	156f0 <__assert_fail@plt+0x46bc>
   15608:	cmp	r6, #0
   1560c:	blt	1562c <__assert_fail@plt+0x45f8>
   15610:	mvn	r3, #-2147483648	; 0x80000000
   15614:	sub	r3, r3, r5
   15618:	cmp	r6, r3
   1561c:	movle	r3, #0
   15620:	movgt	r3, #1
   15624:	cmp	r3, #0
   15628:	bne	157ec <__assert_fail@plt+0x47b8>
   1562c:	add	r5, r6, r5
   15630:	cmp	fp, r5
   15634:	movge	r8, #0
   15638:	andlt	r8, r8, #1
   1563c:	cmp	r8, #0
   15640:	mov	r4, r5
   15644:	bne	157ec <__assert_fail@plt+0x47b8>
   15648:	cmp	r7, #0
   1564c:	blt	15704 <__assert_fail@plt+0x46d0>
   15650:	beq	1567c <__assert_fail@plt+0x4648>
   15654:	cmp	r5, #0
   15658:	blt	157ac <__assert_fail@plt+0x4778>
   1565c:	mov	r1, r7
   15660:	mvn	r0, #-2147483648	; 0x80000000
   15664:	bl	16030 <__assert_fail@plt+0x4ffc>
   15668:	cmp	r5, r0
   1566c:	movle	r0, #0
   15670:	movgt	r0, #1
   15674:	cmp	r0, #0
   15678:	bne	157ec <__assert_fail@plt+0x47b8>
   1567c:	mul	r1, r5, r7
   15680:	mov	r0, r9
   15684:	bl	153fc <__assert_fail@plt+0x43c8>
   15688:	str	r4, [sl]
   1568c:	add	sp, sp, #12
   15690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15694:	cmp	r7, #0
   15698:	blt	15730 <__assert_fail@plt+0x46fc>
   1569c:	beq	155bc <__assert_fail@plt+0x4588>
   156a0:	cmp	r4, #0
   156a4:	blt	1576c <__assert_fail@plt+0x4738>
   156a8:	mov	r1, r7
   156ac:	mvn	r0, #-2147483648	; 0x80000000
   156b0:	bl	16030 <__assert_fail@plt+0x4ffc>
   156b4:	cmp	r0, r4
   156b8:	movge	r0, #0
   156bc:	movlt	r0, #1
   156c0:	cmp	r0, #0
   156c4:	mvnne	r2, #-2147483648	; 0x80000000
   156c8:	bne	155c0 <__assert_fail@plt+0x458c>
   156cc:	mul	r1, r7, r4
   156d0:	cmp	r1, #63	; 0x3f
   156d4:	bgt	155ec <__assert_fail@plt+0x45b8>
   156d8:	b	155bc <__assert_fail@plt+0x4588>
   156dc:	rsb	r3, r4, #-2147483648	; 0x80000000
   156e0:	cmp	r6, r3
   156e4:	movge	r3, #0
   156e8:	movlt	r3, #1
   156ec:	b	15588 <__assert_fail@plt+0x4554>
   156f0:	rsb	r3, r5, #-2147483648	; 0x80000000
   156f4:	cmp	r6, r3
   156f8:	movge	r3, #0
   156fc:	movlt	r3, #1
   15700:	b	15624 <__assert_fail@plt+0x45f0>
   15704:	cmp	r5, #0
   15708:	blt	15790 <__assert_fail@plt+0x475c>
   1570c:	cmn	r7, #1
   15710:	beq	1567c <__assert_fail@plt+0x4648>
   15714:	mov	r1, r7
   15718:	mov	r0, #-2147483648	; 0x80000000
   1571c:	bl	16030 <__assert_fail@plt+0x4ffc>
   15720:	cmp	r5, r0
   15724:	movle	r0, #0
   15728:	movgt	r0, #1
   1572c:	b	15674 <__assert_fail@plt+0x4640>
   15730:	cmp	r4, #0
   15734:	blt	157d0 <__assert_fail@plt+0x479c>
   15738:	cmn	r7, #1
   1573c:	beq	156cc <__assert_fail@plt+0x4698>
   15740:	mov	r1, r7
   15744:	mov	r0, #-2147483648	; 0x80000000
   15748:	bl	16030 <__assert_fail@plt+0x4ffc>
   1574c:	cmp	r0, r4
   15750:	movge	r0, #0
   15754:	movlt	r0, #1
   15758:	b	156c0 <__assert_fail@plt+0x468c>
   1575c:	mov	r4, fp
   15760:	b	156a8 <__assert_fail@plt+0x4674>
   15764:	mov	r4, fp
   15768:	b	15738 <__assert_fail@plt+0x4704>
   1576c:	cmn	r4, #1
   15770:	beq	156cc <__assert_fail@plt+0x4698>
   15774:	mov	r1, r4
   15778:	mov	r0, #-2147483648	; 0x80000000
   1577c:	bl	16030 <__assert_fail@plt+0x4ffc>
   15780:	cmp	r7, r0
   15784:	movle	r0, #0
   15788:	movgt	r0, #1
   1578c:	b	156c0 <__assert_fail@plt+0x468c>
   15790:	mov	r1, r7
   15794:	mvn	r0, #-2147483648	; 0x80000000
   15798:	bl	16030 <__assert_fail@plt+0x4ffc>
   1579c:	cmp	r5, r0
   157a0:	movge	r0, #0
   157a4:	movlt	r0, #1
   157a8:	b	15674 <__assert_fail@plt+0x4640>
   157ac:	cmn	r5, #1
   157b0:	beq	1567c <__assert_fail@plt+0x4648>
   157b4:	mov	r1, r5
   157b8:	mov	r0, #-2147483648	; 0x80000000
   157bc:	bl	16030 <__assert_fail@plt+0x4ffc>
   157c0:	cmp	r7, r0
   157c4:	movle	r0, #0
   157c8:	movgt	r0, #1
   157cc:	b	15674 <__assert_fail@plt+0x4640>
   157d0:	mov	r1, r7
   157d4:	mvn	r0, #-2147483648	; 0x80000000
   157d8:	bl	16030 <__assert_fail@plt+0x4ffc>
   157dc:	cmp	r0, r4
   157e0:	movle	r0, #0
   157e4:	movgt	r0, #1
   157e8:	b	156c0 <__assert_fail@plt+0x468c>
   157ec:	bl	15908 <__assert_fail@plt+0x48d4>
   157f0:	push	{r4, lr}
   157f4:	mov	r1, #1
   157f8:	bl	15948 <__assert_fail@plt+0x4914>
   157fc:	cmp	r0, #0
   15800:	popne	{r4, pc}
   15804:	bl	15908 <__assert_fail@plt+0x48d4>
   15808:	push	{r4, lr}
   1580c:	mov	r1, #1
   15810:	bl	15948 <__assert_fail@plt+0x4914>
   15814:	cmp	r0, #0
   15818:	popne	{r4, pc}
   1581c:	bl	15908 <__assert_fail@plt+0x48d4>
   15820:	push	{r4, lr}
   15824:	bl	15948 <__assert_fail@plt+0x4914>
   15828:	cmp	r0, #0
   1582c:	popne	{r4, pc}
   15830:	bl	15908 <__assert_fail@plt+0x48d4>
   15834:	push	{r4, lr}
   15838:	bl	15948 <__assert_fail@plt+0x4914>
   1583c:	cmp	r0, #0
   15840:	popne	{r4, pc}
   15844:	bl	15908 <__assert_fail@plt+0x48d4>
   15848:	push	{r4, r5, r6, lr}
   1584c:	mov	r6, r0
   15850:	mov	r0, r1
   15854:	mov	r4, r1
   15858:	bl	15990 <__assert_fail@plt+0x495c>
   1585c:	subs	r5, r0, #0
   15860:	beq	15878 <__assert_fail@plt+0x4844>
   15864:	mov	r2, r4
   15868:	mov	r1, r6
   1586c:	bl	10e00 <memcpy@plt>
   15870:	mov	r0, r5
   15874:	pop	{r4, r5, r6, pc}
   15878:	bl	15908 <__assert_fail@plt+0x48d4>
   1587c:	push	{r4, r5, r6, lr}
   15880:	mov	r6, r0
   15884:	mov	r0, r1
   15888:	mov	r4, r1
   1588c:	bl	15990 <__assert_fail@plt+0x495c>
   15890:	subs	r5, r0, #0
   15894:	beq	158ac <__assert_fail@plt+0x4878>
   15898:	mov	r2, r4
   1589c:	mov	r1, r6
   158a0:	bl	10e00 <memcpy@plt>
   158a4:	mov	r0, r5
   158a8:	pop	{r4, r5, r6, pc}
   158ac:	bl	15908 <__assert_fail@plt+0x48d4>
   158b0:	push	{r4, r5, r6, lr}
   158b4:	mov	r6, r0
   158b8:	add	r0, r1, #1
   158bc:	mov	r4, r1
   158c0:	bl	15990 <__assert_fail@plt+0x495c>
   158c4:	subs	r5, r0, #0
   158c8:	beq	158e8 <__assert_fail@plt+0x48b4>
   158cc:	mov	r3, #0
   158d0:	mov	r1, r6
   158d4:	strb	r3, [r5, r4]
   158d8:	mov	r2, r4
   158dc:	bl	10e00 <memcpy@plt>
   158e0:	mov	r0, r5
   158e4:	pop	{r4, r5, r6, pc}
   158e8:	bl	15908 <__assert_fail@plt+0x48d4>
   158ec:	push	{r4, lr}
   158f0:	mov	r4, r0
   158f4:	bl	10f08 <strlen@plt>
   158f8:	add	r1, r0, #1
   158fc:	mov	r0, r4
   15900:	pop	{r4, lr}
   15904:	b	15848 <__assert_fail@plt+0x4814>
   15908:	ldr	r3, [pc, #44]	; 1593c <__assert_fail@plt+0x4908>
   1590c:	push	{r4, lr}
   15910:	mov	r2, #5
   15914:	ldr	r1, [pc, #36]	; 15940 <__assert_fail@plt+0x490c>
   15918:	mov	r0, #0
   1591c:	ldr	r4, [r3]
   15920:	bl	10e3c <dcgettext@plt>
   15924:	ldr	r2, [pc, #24]	; 15944 <__assert_fail@plt+0x4910>
   15928:	mov	r1, #0
   1592c:	mov	r3, r0
   15930:	mov	r0, r4
   15934:	bl	10ea8 <error@plt>
   15938:	bl	1101c <abort@plt>
   1593c:	andeq	r8, r2, r8, lsl #2
   15940:			; <UNDEFINED> instruction: 0x000173b0
   15944:	andeq	r6, r1, r8, ror pc
   15948:	cmp	r1, #0
   1594c:	cmpne	r0, #0
   15950:	moveq	r1, #1
   15954:	moveq	r0, r1
   15958:	umull	r2, r3, r0, r1
   1595c:	adds	r3, r3, #0
   15960:	movne	r3, #1
   15964:	cmp	r2, #0
   15968:	blt	15978 <__assert_fail@plt+0x4944>
   1596c:	cmp	r3, #0
   15970:	bne	15978 <__assert_fail@plt+0x4944>
   15974:	b	10d88 <calloc@plt>
   15978:	push	{r4, lr}
   1597c:	bl	10f20 <__errno_location@plt>
   15980:	mov	r3, #12
   15984:	str	r3, [r0]
   15988:	mov	r0, #0
   1598c:	pop	{r4, pc}
   15990:	cmp	r0, #0
   15994:	moveq	r0, #1
   15998:	cmp	r0, #0
   1599c:	blt	159a4 <__assert_fail@plt+0x4970>
   159a0:	b	10eb4 <malloc@plt>
   159a4:	push	{r4, lr}
   159a8:	bl	10f20 <__errno_location@plt>
   159ac:	mov	r3, #12
   159b0:	str	r3, [r0]
   159b4:	mov	r0, #0
   159b8:	pop	{r4, pc}
   159bc:	cmp	r0, #0
   159c0:	beq	159e4 <__assert_fail@plt+0x49b0>
   159c4:	cmp	r1, #0
   159c8:	push	{lr}		; (str lr, [sp, #-4]!)
   159cc:	sub	sp, sp, #12
   159d0:	beq	159ec <__assert_fail@plt+0x49b8>
   159d4:	blt	15a04 <__assert_fail@plt+0x49d0>
   159d8:	add	sp, sp, #12
   159dc:	pop	{lr}		; (ldr lr, [sp], #4)
   159e0:	b	10e48 <realloc@plt>
   159e4:	mov	r0, r1
   159e8:	b	15990 <__assert_fail@plt+0x495c>
   159ec:	str	r1, [sp, #4]
   159f0:	bl	12a84 <__assert_fail@plt+0x1a50>
   159f4:	ldr	r3, [sp, #4]
   159f8:	mov	r0, r3
   159fc:	add	sp, sp, #12
   15a00:	pop	{pc}		; (ldr pc, [sp], #4)
   15a04:	bl	10f20 <__errno_location@plt>
   15a08:	mov	r2, #12
   15a0c:	mov	r3, #0
   15a10:	str	r2, [r0]
   15a14:	b	159f8 <__assert_fail@plt+0x49c4>
   15a18:	push	{r4, r5, r6, lr}
   15a1c:	mov	r4, r0
   15a20:	bl	10e90 <__fpending@plt>
   15a24:	ldr	r5, [r4]
   15a28:	and	r5, r5, #32
   15a2c:	mov	r6, r0
   15a30:	mov	r0, r4
   15a34:	bl	12984 <__assert_fail@plt+0x1950>
   15a38:	cmp	r5, #0
   15a3c:	mov	r4, r0
   15a40:	bne	15a60 <__assert_fail@plt+0x4a2c>
   15a44:	cmp	r0, #0
   15a48:	beq	15a58 <__assert_fail@plt+0x4a24>
   15a4c:	cmp	r6, #0
   15a50:	beq	15a7c <__assert_fail@plt+0x4a48>
   15a54:	mvn	r4, #0
   15a58:	mov	r0, r4
   15a5c:	pop	{r4, r5, r6, pc}
   15a60:	cmp	r0, #0
   15a64:	bne	15a54 <__assert_fail@plt+0x4a20>
   15a68:	bl	10f20 <__errno_location@plt>
   15a6c:	str	r4, [r0]
   15a70:	mvn	r4, #0
   15a74:	mov	r0, r4
   15a78:	pop	{r4, r5, r6, pc}
   15a7c:	bl	10f20 <__errno_location@plt>
   15a80:	ldr	r4, [r0]
   15a84:	subs	r4, r4, #9
   15a88:	mvnne	r4, #0
   15a8c:	mov	r0, r4
   15a90:	pop	{r4, r5, r6, pc}
   15a94:	ldr	r2, [r0, #20]
   15a98:	ldr	r3, [r0, #16]
   15a9c:	cmp	r2, r3
   15aa0:	bhi	15abc <__assert_fail@plt+0x4a88>
   15aa4:	ldr	r3, [r0, #4]
   15aa8:	ldr	r0, [r0, #8]
   15aac:	subs	r0, r0, r3
   15ab0:	strne	r0, [r1]
   15ab4:	movne	r0, r3
   15ab8:	bx	lr
   15abc:	mov	r0, #0
   15ac0:	bx	lr
   15ac4:	push	{r4, r5, r6, r7, r8, r9, lr}
   15ac8:	subs	r4, r1, #0
   15acc:	sub	sp, sp, #4096	; 0x1000
   15ad0:	sub	sp, sp, #12
   15ad4:	beq	15b70 <__assert_fail@plt+0x4b3c>
   15ad8:	mov	r6, r0
   15adc:	bl	15cf4 <__assert_fail@plt+0x4cc0>
   15ae0:	subs	r5, r0, #0
   15ae4:	beq	15b80 <__assert_fail@plt+0x4b4c>
   15ae8:	add	r7, sp, #8
   15aec:	b	15b00 <__assert_fail@plt+0x4acc>
   15af0:	subs	r4, r4, #1
   15af4:	beq	15bf8 <__assert_fail@plt+0x4bc4>
   15af8:	subs	r5, r5, #1
   15afc:	beq	15b80 <__assert_fail@plt+0x4b4c>
   15b00:	mov	r1, r7
   15b04:	mov	r0, r6
   15b08:	bl	15a94 <__assert_fail@plt+0x4a60>
   15b0c:	cmp	r0, #0
   15b10:	mov	r0, r6
   15b14:	beq	15b48 <__assert_fail@plt+0x4b14>
   15b18:	ldr	r3, [r7]
   15b1c:	cmp	r3, #0
   15b20:	beq	15b48 <__assert_fail@plt+0x4b14>
   15b24:	cmp	r3, r4
   15b28:	ldr	r2, [r6, #4]
   15b2c:	movcs	r3, r4
   15b30:	add	r2, r2, r3
   15b34:	subs	r4, r4, r3
   15b38:	str	r2, [r6, #4]
   15b3c:	beq	15bf8 <__assert_fail@plt+0x4bc4>
   15b40:	subs	r5, r5, r3
   15b44:	beq	15b80 <__assert_fail@plt+0x4b4c>
   15b48:	bl	10f44 <fgetc@plt>
   15b4c:	cmn	r0, #1
   15b50:	bne	15af0 <__assert_fail@plt+0x4abc>
   15b54:	mov	r0, r6
   15b58:	bl	10de8 <ferror@plt>
   15b5c:	adds	r0, r0, #0
   15b60:	mvnne	r0, #0
   15b64:	add	sp, sp, #4096	; 0x1000
   15b68:	add	sp, sp, #12
   15b6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15b70:	mov	r0, r4
   15b74:	add	sp, sp, #4096	; 0x1000
   15b78:	add	sp, sp, #12
   15b7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15b80:	mov	r0, r6
   15b84:	bl	10f5c <fileno@plt>
   15b88:	cmp	r0, #0
   15b8c:	blt	15bb0 <__assert_fail@plt+0x4b7c>
   15b90:	mov	r5, #1
   15b94:	mov	r3, #0
   15b98:	str	r5, [sp]
   15b9c:	mov	r2, #0
   15ba0:	bl	10e78 <lseek64@plt>
   15ba4:	cmp	r0, #0
   15ba8:	sbcs	r3, r1, #0
   15bac:	bge	15c08 <__assert_fail@plt+0x4bd4>
   15bb0:	add	r7, sp, #8
   15bb4:	mov	r9, #1
   15bb8:	mov	r8, #4096	; 0x1000
   15bbc:	b	15bc8 <__assert_fail@plt+0x4b94>
   15bc0:	subs	r4, r4, r5
   15bc4:	beq	15b70 <__assert_fail@plt+0x4b3c>
   15bc8:	cmp	r4, #4096	; 0x1000
   15bcc:	movcc	r5, r4
   15bd0:	movcs	r5, #4096	; 0x1000
   15bd4:	str	r6, [sp]
   15bd8:	mov	r3, r5
   15bdc:	mov	r2, r9
   15be0:	mov	r1, r8
   15be4:	mov	r0, r7
   15be8:	bl	10f98 <__fread_chk@plt>
   15bec:	cmp	r5, r0
   15bf0:	bls	15bc0 <__assert_fail@plt+0x4b8c>
   15bf4:	b	15b54 <__assert_fail@plt+0x4b20>
   15bf8:	mov	r0, #0
   15bfc:	add	sp, sp, #4096	; 0x1000
   15c00:	add	sp, sp, #12
   15c04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15c08:	str	r5, [sp]
   15c0c:	mov	r2, r4
   15c10:	mov	r0, r6
   15c14:	mov	r3, #0
   15c18:	bl	12adc <__assert_fail@plt+0x1aa8>
   15c1c:	b	15b64 <__assert_fail@plt+0x4b30>
   15c20:	push	{r4, lr}
   15c24:	mov	r0, #14
   15c28:	bl	10fd4 <nl_langinfo@plt>
   15c2c:	cmp	r0, #0
   15c30:	beq	15c48 <__assert_fail@plt+0x4c14>
   15c34:	ldrb	r2, [r0]
   15c38:	ldr	r3, [pc, #16]	; 15c50 <__assert_fail@plt+0x4c1c>
   15c3c:	cmp	r2, #0
   15c40:	moveq	r0, r3
   15c44:	pop	{r4, pc}
   15c48:	ldr	r0, [pc]	; 15c50 <__assert_fail@plt+0x4c1c>
   15c4c:	pop	{r4, pc}
   15c50:	andeq	r7, r1, r4, asr #7
   15c54:	push	{r4, r5, r6, r7, lr}
   15c58:	subs	r6, r0, #0
   15c5c:	sub	sp, sp, #12
   15c60:	addeq	r6, sp, #4
   15c64:	mov	r0, r6
   15c68:	mov	r5, r2
   15c6c:	mov	r7, r1
   15c70:	bl	10e9c <mbrtowc@plt>
   15c74:	cmp	r5, #0
   15c78:	cmnne	r0, #3
   15c7c:	mov	r4, r0
   15c80:	bls	15c9c <__assert_fail@plt+0x4c68>
   15c84:	mov	r0, #0
   15c88:	bl	15d30 <__assert_fail@plt+0x4cfc>
   15c8c:	cmp	r0, #0
   15c90:	moveq	r4, #1
   15c94:	ldrbeq	r3, [r7]
   15c98:	streq	r3, [r6]
   15c9c:	mov	r0, r4
   15ca0:	add	sp, sp, #12
   15ca4:	pop	{r4, r5, r6, r7, pc}
   15ca8:	push	{r4, r5, r6, lr}
   15cac:	subs	r4, r2, #0
   15cb0:	mov	r6, r0
   15cb4:	mov	r5, r1
   15cb8:	beq	15ce4 <__assert_fail@plt+0x4cb0>
   15cbc:	mov	r1, r4
   15cc0:	mvn	r0, #0
   15cc4:	bl	15e24 <__assert_fail@plt+0x4df0>
   15cc8:	cmp	r0, r5
   15ccc:	bcs	15ce4 <__assert_fail@plt+0x4cb0>
   15cd0:	bl	10f20 <__errno_location@plt>
   15cd4:	mov	r3, #12
   15cd8:	str	r3, [r0]
   15cdc:	mov	r0, #0
   15ce0:	pop	{r4, r5, r6, pc}
   15ce4:	mul	r1, r5, r4
   15ce8:	mov	r0, r6
   15cec:	pop	{r4, r5, r6, lr}
   15cf0:	b	159bc <__assert_fail@plt+0x4988>
   15cf4:	ldr	r2, [r0, #20]
   15cf8:	ldr	r3, [r0, #16]
   15cfc:	cmp	r2, r3
   15d00:	bhi	15d28 <__assert_fail@plt+0x4cf4>
   15d04:	ldr	r3, [r0]
   15d08:	ldmib	r0, {r1, r2}
   15d0c:	ands	r3, r3, #256	; 0x100
   15d10:	ldrne	r3, [r0, #44]	; 0x2c
   15d14:	ldrne	r0, [r0, #36]	; 0x24
   15d18:	sub	r2, r2, r1
   15d1c:	subne	r3, r3, r0
   15d20:	add	r0, r3, r2
   15d24:	bx	lr
   15d28:	mov	r0, #0
   15d2c:	bx	lr
   15d30:	push	{lr}		; (str lr, [sp, #-4]!)
   15d34:	sub	sp, sp, #268	; 0x10c
   15d38:	add	r1, sp, #4
   15d3c:	ldr	r2, [pc, #60]	; 15d80 <__assert_fail@plt+0x4d4c>
   15d40:	bl	15d8c <__assert_fail@plt+0x4d58>
   15d44:	cmp	r0, #0
   15d48:	movne	r0, #0
   15d4c:	bne	15d78 <__assert_fail@plt+0x4d44>
   15d50:	ldr	r1, [pc, #44]	; 15d84 <__assert_fail@plt+0x4d50>
   15d54:	add	r0, sp, #4
   15d58:	bl	10dac <strcmp@plt>
   15d5c:	cmp	r0, #0
   15d60:	beq	15d78 <__assert_fail@plt+0x4d44>
   15d64:	add	r0, sp, #4
   15d68:	ldr	r1, [pc, #24]	; 15d88 <__assert_fail@plt+0x4d54>
   15d6c:	bl	10dac <strcmp@plt>
   15d70:	adds	r0, r0, #0
   15d74:	movne	r0, #1
   15d78:	add	sp, sp, #268	; 0x10c
   15d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d80:	andeq	r0, r0, r1, lsl #2
   15d84:	andeq	r7, r1, ip, asr #7
   15d88:	ldrdeq	r7, [r1], -r0
   15d8c:	push	{r4, r5, r6, lr}
   15d90:	mov	r5, r1
   15d94:	mov	r1, #0
   15d98:	mov	r4, r2
   15d9c:	bl	10fbc <setlocale@plt>
   15da0:	subs	r6, r0, #0
   15da4:	beq	15e00 <__assert_fail@plt+0x4dcc>
   15da8:	bl	10f08 <strlen@plt>
   15dac:	cmp	r4, r0
   15db0:	bhi	15de8 <__assert_fail@plt+0x4db4>
   15db4:	cmp	r4, #0
   15db8:	bne	15dc4 <__assert_fail@plt+0x4d90>
   15dbc:	mov	r0, #34	; 0x22
   15dc0:	pop	{r4, r5, r6, pc}
   15dc4:	sub	r4, r4, #1
   15dc8:	mov	r1, r6
   15dcc:	mov	r2, r4
   15dd0:	mov	r0, r5
   15dd4:	bl	10e00 <memcpy@plt>
   15dd8:	mov	r3, #0
   15ddc:	strb	r3, [r5, r4]
   15de0:	mov	r0, #34	; 0x22
   15de4:	pop	{r4, r5, r6, pc}
   15de8:	add	r2, r0, #1
   15dec:	mov	r1, r6
   15df0:	mov	r0, r5
   15df4:	bl	10e00 <memcpy@plt>
   15df8:	mov	r0, #0
   15dfc:	pop	{r4, r5, r6, pc}
   15e00:	cmp	r4, #0
   15e04:	beq	15e14 <__assert_fail@plt+0x4de0>
   15e08:	strb	r6, [r5]
   15e0c:	mov	r0, #22
   15e10:	pop	{r4, r5, r6, pc}
   15e14:	mov	r0, #22
   15e18:	pop	{r4, r5, r6, pc}
   15e1c:	mov	r1, #0
   15e20:	b	10fbc <setlocale@plt>
   15e24:	subs	r2, r1, #1
   15e28:	bxeq	lr
   15e2c:	bcc	16004 <__assert_fail@plt+0x4fd0>
   15e30:	cmp	r0, r1
   15e34:	bls	15fe8 <__assert_fail@plt+0x4fb4>
   15e38:	tst	r1, r2
   15e3c:	beq	15ff4 <__assert_fail@plt+0x4fc0>
   15e40:	clz	r3, r0
   15e44:	clz	r2, r1
   15e48:	sub	r3, r2, r3
   15e4c:	rsbs	r3, r3, #31
   15e50:	addne	r3, r3, r3, lsl #1
   15e54:	mov	r2, #0
   15e58:	addne	pc, pc, r3, lsl #2
   15e5c:	nop			; (mov r0, r0)
   15e60:	cmp	r0, r1, lsl #31
   15e64:	adc	r2, r2, r2
   15e68:	subcs	r0, r0, r1, lsl #31
   15e6c:	cmp	r0, r1, lsl #30
   15e70:	adc	r2, r2, r2
   15e74:	subcs	r0, r0, r1, lsl #30
   15e78:	cmp	r0, r1, lsl #29
   15e7c:	adc	r2, r2, r2
   15e80:	subcs	r0, r0, r1, lsl #29
   15e84:	cmp	r0, r1, lsl #28
   15e88:	adc	r2, r2, r2
   15e8c:	subcs	r0, r0, r1, lsl #28
   15e90:	cmp	r0, r1, lsl #27
   15e94:	adc	r2, r2, r2
   15e98:	subcs	r0, r0, r1, lsl #27
   15e9c:	cmp	r0, r1, lsl #26
   15ea0:	adc	r2, r2, r2
   15ea4:	subcs	r0, r0, r1, lsl #26
   15ea8:	cmp	r0, r1, lsl #25
   15eac:	adc	r2, r2, r2
   15eb0:	subcs	r0, r0, r1, lsl #25
   15eb4:	cmp	r0, r1, lsl #24
   15eb8:	adc	r2, r2, r2
   15ebc:	subcs	r0, r0, r1, lsl #24
   15ec0:	cmp	r0, r1, lsl #23
   15ec4:	adc	r2, r2, r2
   15ec8:	subcs	r0, r0, r1, lsl #23
   15ecc:	cmp	r0, r1, lsl #22
   15ed0:	adc	r2, r2, r2
   15ed4:	subcs	r0, r0, r1, lsl #22
   15ed8:	cmp	r0, r1, lsl #21
   15edc:	adc	r2, r2, r2
   15ee0:	subcs	r0, r0, r1, lsl #21
   15ee4:	cmp	r0, r1, lsl #20
   15ee8:	adc	r2, r2, r2
   15eec:	subcs	r0, r0, r1, lsl #20
   15ef0:	cmp	r0, r1, lsl #19
   15ef4:	adc	r2, r2, r2
   15ef8:	subcs	r0, r0, r1, lsl #19
   15efc:	cmp	r0, r1, lsl #18
   15f00:	adc	r2, r2, r2
   15f04:	subcs	r0, r0, r1, lsl #18
   15f08:	cmp	r0, r1, lsl #17
   15f0c:	adc	r2, r2, r2
   15f10:	subcs	r0, r0, r1, lsl #17
   15f14:	cmp	r0, r1, lsl #16
   15f18:	adc	r2, r2, r2
   15f1c:	subcs	r0, r0, r1, lsl #16
   15f20:	cmp	r0, r1, lsl #15
   15f24:	adc	r2, r2, r2
   15f28:	subcs	r0, r0, r1, lsl #15
   15f2c:	cmp	r0, r1, lsl #14
   15f30:	adc	r2, r2, r2
   15f34:	subcs	r0, r0, r1, lsl #14
   15f38:	cmp	r0, r1, lsl #13
   15f3c:	adc	r2, r2, r2
   15f40:	subcs	r0, r0, r1, lsl #13
   15f44:	cmp	r0, r1, lsl #12
   15f48:	adc	r2, r2, r2
   15f4c:	subcs	r0, r0, r1, lsl #12
   15f50:	cmp	r0, r1, lsl #11
   15f54:	adc	r2, r2, r2
   15f58:	subcs	r0, r0, r1, lsl #11
   15f5c:	cmp	r0, r1, lsl #10
   15f60:	adc	r2, r2, r2
   15f64:	subcs	r0, r0, r1, lsl #10
   15f68:	cmp	r0, r1, lsl #9
   15f6c:	adc	r2, r2, r2
   15f70:	subcs	r0, r0, r1, lsl #9
   15f74:	cmp	r0, r1, lsl #8
   15f78:	adc	r2, r2, r2
   15f7c:	subcs	r0, r0, r1, lsl #8
   15f80:	cmp	r0, r1, lsl #7
   15f84:	adc	r2, r2, r2
   15f88:	subcs	r0, r0, r1, lsl #7
   15f8c:	cmp	r0, r1, lsl #6
   15f90:	adc	r2, r2, r2
   15f94:	subcs	r0, r0, r1, lsl #6
   15f98:	cmp	r0, r1, lsl #5
   15f9c:	adc	r2, r2, r2
   15fa0:	subcs	r0, r0, r1, lsl #5
   15fa4:	cmp	r0, r1, lsl #4
   15fa8:	adc	r2, r2, r2
   15fac:	subcs	r0, r0, r1, lsl #4
   15fb0:	cmp	r0, r1, lsl #3
   15fb4:	adc	r2, r2, r2
   15fb8:	subcs	r0, r0, r1, lsl #3
   15fbc:	cmp	r0, r1, lsl #2
   15fc0:	adc	r2, r2, r2
   15fc4:	subcs	r0, r0, r1, lsl #2
   15fc8:	cmp	r0, r1, lsl #1
   15fcc:	adc	r2, r2, r2
   15fd0:	subcs	r0, r0, r1, lsl #1
   15fd4:	cmp	r0, r1
   15fd8:	adc	r2, r2, r2
   15fdc:	subcs	r0, r0, r1
   15fe0:	mov	r0, r2
   15fe4:	bx	lr
   15fe8:	moveq	r0, #1
   15fec:	movne	r0, #0
   15ff0:	bx	lr
   15ff4:	clz	r2, r1
   15ff8:	rsb	r2, r2, #31
   15ffc:	lsr	r0, r0, r2
   16000:	bx	lr
   16004:	cmp	r0, #0
   16008:	mvnne	r0, #0
   1600c:	b	16270 <__assert_fail@plt+0x523c>
   16010:	cmp	r1, #0
   16014:	beq	16004 <__assert_fail@plt+0x4fd0>
   16018:	push	{r0, r1, lr}
   1601c:	bl	15e24 <__assert_fail@plt+0x4df0>
   16020:	pop	{r1, r2, lr}
   16024:	mul	r3, r2, r0
   16028:	sub	r1, r1, r3
   1602c:	bx	lr
   16030:	cmp	r1, #0
   16034:	beq	16240 <__assert_fail@plt+0x520c>
   16038:	eor	ip, r0, r1
   1603c:	rsbmi	r1, r1, #0
   16040:	subs	r2, r1, #1
   16044:	beq	1620c <__assert_fail@plt+0x51d8>
   16048:	movs	r3, r0
   1604c:	rsbmi	r3, r0, #0
   16050:	cmp	r3, r1
   16054:	bls	16218 <__assert_fail@plt+0x51e4>
   16058:	tst	r1, r2
   1605c:	beq	16228 <__assert_fail@plt+0x51f4>
   16060:	clz	r2, r3
   16064:	clz	r0, r1
   16068:	sub	r2, r0, r2
   1606c:	rsbs	r2, r2, #31
   16070:	addne	r2, r2, r2, lsl #1
   16074:	mov	r0, #0
   16078:	addne	pc, pc, r2, lsl #2
   1607c:	nop			; (mov r0, r0)
   16080:	cmp	r3, r1, lsl #31
   16084:	adc	r0, r0, r0
   16088:	subcs	r3, r3, r1, lsl #31
   1608c:	cmp	r3, r1, lsl #30
   16090:	adc	r0, r0, r0
   16094:	subcs	r3, r3, r1, lsl #30
   16098:	cmp	r3, r1, lsl #29
   1609c:	adc	r0, r0, r0
   160a0:	subcs	r3, r3, r1, lsl #29
   160a4:	cmp	r3, r1, lsl #28
   160a8:	adc	r0, r0, r0
   160ac:	subcs	r3, r3, r1, lsl #28
   160b0:	cmp	r3, r1, lsl #27
   160b4:	adc	r0, r0, r0
   160b8:	subcs	r3, r3, r1, lsl #27
   160bc:	cmp	r3, r1, lsl #26
   160c0:	adc	r0, r0, r0
   160c4:	subcs	r3, r3, r1, lsl #26
   160c8:	cmp	r3, r1, lsl #25
   160cc:	adc	r0, r0, r0
   160d0:	subcs	r3, r3, r1, lsl #25
   160d4:	cmp	r3, r1, lsl #24
   160d8:	adc	r0, r0, r0
   160dc:	subcs	r3, r3, r1, lsl #24
   160e0:	cmp	r3, r1, lsl #23
   160e4:	adc	r0, r0, r0
   160e8:	subcs	r3, r3, r1, lsl #23
   160ec:	cmp	r3, r1, lsl #22
   160f0:	adc	r0, r0, r0
   160f4:	subcs	r3, r3, r1, lsl #22
   160f8:	cmp	r3, r1, lsl #21
   160fc:	adc	r0, r0, r0
   16100:	subcs	r3, r3, r1, lsl #21
   16104:	cmp	r3, r1, lsl #20
   16108:	adc	r0, r0, r0
   1610c:	subcs	r3, r3, r1, lsl #20
   16110:	cmp	r3, r1, lsl #19
   16114:	adc	r0, r0, r0
   16118:	subcs	r3, r3, r1, lsl #19
   1611c:	cmp	r3, r1, lsl #18
   16120:	adc	r0, r0, r0
   16124:	subcs	r3, r3, r1, lsl #18
   16128:	cmp	r3, r1, lsl #17
   1612c:	adc	r0, r0, r0
   16130:	subcs	r3, r3, r1, lsl #17
   16134:	cmp	r3, r1, lsl #16
   16138:	adc	r0, r0, r0
   1613c:	subcs	r3, r3, r1, lsl #16
   16140:	cmp	r3, r1, lsl #15
   16144:	adc	r0, r0, r0
   16148:	subcs	r3, r3, r1, lsl #15
   1614c:	cmp	r3, r1, lsl #14
   16150:	adc	r0, r0, r0
   16154:	subcs	r3, r3, r1, lsl #14
   16158:	cmp	r3, r1, lsl #13
   1615c:	adc	r0, r0, r0
   16160:	subcs	r3, r3, r1, lsl #13
   16164:	cmp	r3, r1, lsl #12
   16168:	adc	r0, r0, r0
   1616c:	subcs	r3, r3, r1, lsl #12
   16170:	cmp	r3, r1, lsl #11
   16174:	adc	r0, r0, r0
   16178:	subcs	r3, r3, r1, lsl #11
   1617c:	cmp	r3, r1, lsl #10
   16180:	adc	r0, r0, r0
   16184:	subcs	r3, r3, r1, lsl #10
   16188:	cmp	r3, r1, lsl #9
   1618c:	adc	r0, r0, r0
   16190:	subcs	r3, r3, r1, lsl #9
   16194:	cmp	r3, r1, lsl #8
   16198:	adc	r0, r0, r0
   1619c:	subcs	r3, r3, r1, lsl #8
   161a0:	cmp	r3, r1, lsl #7
   161a4:	adc	r0, r0, r0
   161a8:	subcs	r3, r3, r1, lsl #7
   161ac:	cmp	r3, r1, lsl #6
   161b0:	adc	r0, r0, r0
   161b4:	subcs	r3, r3, r1, lsl #6
   161b8:	cmp	r3, r1, lsl #5
   161bc:	adc	r0, r0, r0
   161c0:	subcs	r3, r3, r1, lsl #5
   161c4:	cmp	r3, r1, lsl #4
   161c8:	adc	r0, r0, r0
   161cc:	subcs	r3, r3, r1, lsl #4
   161d0:	cmp	r3, r1, lsl #3
   161d4:	adc	r0, r0, r0
   161d8:	subcs	r3, r3, r1, lsl #3
   161dc:	cmp	r3, r1, lsl #2
   161e0:	adc	r0, r0, r0
   161e4:	subcs	r3, r3, r1, lsl #2
   161e8:	cmp	r3, r1, lsl #1
   161ec:	adc	r0, r0, r0
   161f0:	subcs	r3, r3, r1, lsl #1
   161f4:	cmp	r3, r1
   161f8:	adc	r0, r0, r0
   161fc:	subcs	r3, r3, r1
   16200:	cmp	ip, #0
   16204:	rsbmi	r0, r0, #0
   16208:	bx	lr
   1620c:	teq	ip, r0
   16210:	rsbmi	r0, r0, #0
   16214:	bx	lr
   16218:	movcc	r0, #0
   1621c:	asreq	r0, ip, #31
   16220:	orreq	r0, r0, #1
   16224:	bx	lr
   16228:	clz	r2, r1
   1622c:	rsb	r2, r2, #31
   16230:	cmp	ip, #0
   16234:	lsr	r0, r3, r2
   16238:	rsbmi	r0, r0, #0
   1623c:	bx	lr
   16240:	cmp	r0, #0
   16244:	mvngt	r0, #-2147483648	; 0x80000000
   16248:	movlt	r0, #-2147483648	; 0x80000000
   1624c:	b	16270 <__assert_fail@plt+0x523c>
   16250:	cmp	r1, #0
   16254:	beq	16240 <__assert_fail@plt+0x520c>
   16258:	push	{r0, r1, lr}
   1625c:	bl	16038 <__assert_fail@plt+0x5004>
   16260:	pop	{r1, r2, lr}
   16264:	mul	r3, r2, r0
   16268:	sub	r1, r1, r3
   1626c:	bx	lr
   16270:	push	{r1, lr}
   16274:	mov	r0, #8
   16278:	bl	10da0 <raise@plt>
   1627c:	pop	{r1, pc}
   16280:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16284:	mov	r7, r0
   16288:	ldr	r6, [pc, #72]	; 162d8 <__assert_fail@plt+0x52a4>
   1628c:	ldr	r5, [pc, #72]	; 162dc <__assert_fail@plt+0x52a8>
   16290:	add	r6, pc, r6
   16294:	add	r5, pc, r5
   16298:	sub	r6, r6, r5
   1629c:	mov	r8, r1
   162a0:	mov	r9, r2
   162a4:	bl	10d68 <calloc@plt-0x20>
   162a8:	asrs	r6, r6, #2
   162ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   162b0:	mov	r4, #0
   162b4:	add	r4, r4, #1
   162b8:	ldr	r3, [r5], #4
   162bc:	mov	r2, r9
   162c0:	mov	r1, r8
   162c4:	mov	r0, r7
   162c8:	blx	r3
   162cc:	cmp	r6, r4
   162d0:	bne	162b4 <__assert_fail@plt+0x5280>
   162d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162d8:	andeq	r1, r1, r8, ror ip
   162dc:	andeq	r1, r1, r0, ror ip
   162e0:	bx	lr
   162e4:	ldr	r3, [pc, #12]	; 162f8 <__assert_fail@plt+0x52c4>
   162e8:	mov	r1, #0
   162ec:	add	r3, pc, r3
   162f0:	ldr	r2, [r3]
   162f4:	b	10f2c <__cxa_atexit@plt>
   162f8:	andeq	r1, r1, r8, lsl #28

Disassembly of section .fini:

000162fc <.fini>:
   162fc:	push	{r3, lr}
   16300:	pop	{r3, pc}
