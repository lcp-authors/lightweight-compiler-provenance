
../repos/charybdis/extensions/.libs/ip_cloaking_3.0.so:     file format elf32-littlearm


Disassembly of section .init:

00000660 <_init>:
 660:	push	{r3, lr}
 664:	bl	758 <call_weak_fn>
 668:	pop	{r3, pc}

Disassembly of section .plt:

0000066c <.plt>:
 66c:	push	{lr}		; (str lr, [sp, #-4]!)
 670:	ldr	lr, [pc, #4]	; 67c <.plt+0x10>
 674:	add	lr, pc, lr
 678:	ldr	pc, [lr, #8]!
 67c:	.word	0x00011984

00000680 <calloc@plt>:
 680:	add	ip, pc, #0, 12
 684:	add	ip, ip, #69632	; 0x11000
 688:	ldr	pc, [ip, #2436]!	; 0x984

0000068c <raise@plt>:
 68c:	add	ip, pc, #0, 12
 690:	add	ip, ip, #69632	; 0x11000
 694:	ldr	pc, [ip, #2428]!	; 0x97c

00000698 <strcmp@plt>:
 698:	add	ip, pc, #0, 12
 69c:	add	ip, ip, #69632	; 0x11000
 6a0:	ldr	pc, [ip, #2420]!	; 0x974

000006a4 <__cxa_finalize@plt>:
 6a4:	add	ip, pc, #0, 12
 6a8:	add	ip, ip, #69632	; 0x11000
 6ac:	ldr	pc, [ip, #2412]!	; 0x96c

000006b0 <rb_outofmemory@plt>:
 6b0:	add	ip, pc, #0, 12
 6b4:	add	ip, ip, #69632	; 0x11000
 6b8:	ldr	pc, [ip, #2404]!	; 0x964

000006bc <find_umode_slot@plt>:
 6bc:	add	ip, pc, #0, 12
 6c0:	add	ip, ip, #69632	; 0x11000
 6c4:	ldr	pc, [ip, #2396]!	; 0x95c

000006c8 <sendto_server@plt>:
 6c8:	add	ip, pc, #0, 12
 6cc:	add	ip, ip, #69632	; 0x11000
 6d0:	ldr	pc, [ip, #2388]!	; 0x954

000006d4 <__gmon_start__@plt>:
 6d4:	add	ip, pc, #0, 12
 6d8:	add	ip, ip, #69632	; 0x11000
 6dc:	ldr	pc, [ip, #2380]!	; 0x94c

000006e0 <__ctype_b_loc@plt>:
 6e0:	add	ip, pc, #0, 12
 6e4:	add	ip, ip, #69632	; 0x11000
 6e8:	ldr	pc, [ip, #2372]!	; 0x944

000006ec <sendto_one_numeric@plt>:
 6ec:	add	ip, pc, #0, 12
 6f0:	add	ip, ip, #69632	; 0x11000
 6f4:	ldr	pc, [ip, #2364]!	; 0x93c

000006f8 <snprintf@plt>:
 6f8:	add	ip, pc, #0, 12
 6fc:	add	ip, ip, #69632	; 0x11000
 700:	ldr	pc, [ip, #2356]!	; 0x934

00000704 <memset@plt>:
 704:	add	ip, pc, #0, 12
 708:	add	ip, ip, #69632	; 0x11000
 70c:	ldr	pc, [ip, #2348]!	; 0x92c

00000710 <strncpy@plt>:
 710:	add	ip, pc, #0, 12
 714:	add	ip, ip, #69632	; 0x11000
 718:	ldr	pc, [ip, #2340]!	; 0x924

0000071c <strrchr@plt>:
 71c:	add	ip, pc, #0, 12
 720:	add	ip, ip, #69632	; 0x11000
 724:	ldr	pc, [ip, #2332]!	; 0x91c

00000728 <change_nick_user_host@plt>:
 728:	add	ip, pc, #0, 12
 72c:	add	ip, ip, #69632	; 0x11000
 730:	ldr	pc, [ip, #2324]!	; 0x914

00000734 <rb_strlcpy@plt>:
 734:	add	ip, pc, #0, 12
 738:	add	ip, ip, #69632	; 0x11000
 73c:	ldr	pc, [ip, #2316]!	; 0x90c

00000740 <irccmp@plt>:
 740:	add	ip, pc, #0, 12
 744:	add	ip, ip, #69632	; 0x11000
 748:	ldr	pc, [ip, #2308]!	; 0x904

0000074c <construct_umodebuf@plt>:
 74c:	add	ip, pc, #0, 12
 750:	add	ip, ip, #69632	; 0x11000
 754:	ldr	pc, [ip, #2300]!	; 0x8fc

Disassembly of section .text:

00000758 <call_weak_fn>:
     758:	ldr	r3, [pc, #20]	; 774 <call_weak_fn+0x1c>
     75c:	ldr	r2, [pc, #20]	; 778 <call_weak_fn+0x20>
     760:	add	r3, pc, r3
     764:	ldr	r2, [r3, r2]
     768:	cmp	r2, #0
     76c:	bxeq	lr
     770:	b	6d4 <__gmon_start__@plt>
     774:	.word	0x00011898
     778:	.word	0x00000064

0000077c <deregister_tm_clones>:
     77c:	ldr	r3, [pc, #52]	; 7b8 <deregister_tm_clones+0x3c>
     780:	ldr	r0, [pc, #52]	; 7bc <deregister_tm_clones+0x40>
     784:	add	r3, pc, r3
     788:	add	r0, pc, r0
     78c:	add	r3, r3, #3
     790:	sub	r3, r3, r0
     794:	cmp	r3, #6
     798:	ldr	r3, [pc, #32]	; 7c0 <deregister_tm_clones+0x44>
     79c:	add	r3, pc, r3
     7a0:	bxls	lr
     7a4:	ldr	r2, [pc, #24]	; 7c4 <deregister_tm_clones+0x48>
     7a8:	ldr	r3, [r3, r2]
     7ac:	cmp	r3, #0
     7b0:	bxeq	lr
     7b4:	bx	r3
     7b8:	.word	0x0001193c
     7bc:	.word	0x00011938
     7c0:	.word	0x0001185c
     7c4:	.word	0x00000058

000007c8 <register_tm_clones>:
     7c8:	ldr	r1, [pc, #56]	; 808 <register_tm_clones+0x40>
     7cc:	ldr	r0, [pc, #56]	; 80c <register_tm_clones+0x44>
     7d0:	add	r1, pc, r1
     7d4:	add	r0, pc, r0
     7d8:	sub	r1, r1, r0
     7dc:	ldr	r3, [pc, #44]	; 810 <register_tm_clones+0x48>
     7e0:	asr	r1, r1, #2
     7e4:	add	r3, pc, r3
     7e8:	add	r1, r1, r1, lsr #31
     7ec:	asrs	r1, r1, #1
     7f0:	bxeq	lr
     7f4:	ldr	r2, [pc, #24]	; 814 <register_tm_clones+0x4c>
     7f8:	ldr	r3, [r3, r2]
     7fc:	cmp	r3, #0
     800:	bxeq	lr
     804:	bx	r3
     808:	.word	0x000118f0
     80c:	.word	0x000118ec
     810:	.word	0x00011814
     814:	.word	0x00000070

00000818 <__do_global_dtors_aux>:
     818:	ldr	r3, [pc, #76]	; 86c <__do_global_dtors_aux+0x54>
     81c:	ldr	r2, [pc, #76]	; 870 <__do_global_dtors_aux+0x58>
     820:	add	r3, pc, r3
     824:	add	r2, pc, r2
     828:	ldrb	r3, [r3]
     82c:	cmp	r3, #0
     830:	bxne	lr
     834:	ldr	r3, [pc, #56]	; 874 <__do_global_dtors_aux+0x5c>
     838:	push	{r4, lr}
     83c:	ldr	r3, [r2, r3]
     840:	cmp	r3, #0
     844:	beq	854 <__do_global_dtors_aux+0x3c>
     848:	ldr	r3, [pc, #40]	; 878 <__do_global_dtors_aux+0x60>
     84c:	ldr	r0, [pc, r3]
     850:	bl	6a4 <__cxa_finalize@plt>
     854:	bl	77c <deregister_tm_clones>
     858:	ldr	r3, [pc, #28]	; 87c <__do_global_dtors_aux+0x64>
     85c:	mov	r2, #1
     860:	add	r3, pc, r3
     864:	strb	r2, [r3]
     868:	pop	{r4, pc}
     86c:	.word	0x000118a0
     870:	.word	0x000117d4
     874:	.word	0x00000054
     878:	.word	0x00011824
     87c:	.word	0x00011860

00000880 <frame_dummy>:
     880:	ldr	r0, [pc, #56]	; 8c0 <frame_dummy+0x40>
     884:	ldr	r3, [pc, #56]	; 8c4 <frame_dummy+0x44>
     888:	add	r0, pc, r0
     88c:	ldr	r2, [r0]
     890:	add	r3, pc, r3
     894:	cmp	r2, #0
     898:	bne	8a0 <frame_dummy+0x20>
     89c:	b	7c8 <register_tm_clones>
     8a0:	ldr	r2, [pc, #32]	; 8c8 <frame_dummy+0x48>
     8a4:	ldr	r3, [r3, r2]
     8a8:	cmp	r3, #0
     8ac:	beq	89c <frame_dummy+0x1c>
     8b0:	push	{r4, lr}
     8b4:	blx	r3
     8b8:	pop	{r4, lr}
     8bc:	b	7c8 <register_tm_clones>
     8c0:	.word	0x0001166c
     8c4:	.word	0x00011768
     8c8:	.word	0x0000006c

000008cc <distribute_hostchange>:
     8cc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
     8d0:	add	r7, r0, #227	; 0xe3
     8d4:	ldr	r5, [pc, #308]	; a10 <distribute_hostchange+0x144>
     8d8:	cmp	r7, r1
     8dc:	add	r5, pc, r5
     8e0:	mov	r4, r0
     8e4:	mov	r6, r1
     8e8:	beq	a00 <distribute_hostchange+0x134>
     8ec:	ldr	r2, [pc, #288]	; a14 <distribute_hostchange+0x148>
     8f0:	mov	r3, r1
     8f4:	add	r2, pc, r2
     8f8:	mov	r1, #396	; 0x18c
     8fc:	bl	6ec <sendto_one_numeric@plt>
     900:	ldr	r3, [pc, #272]	; a18 <distribute_hostchange+0x14c>
     904:	ldrb	r1, [r4, #396]	; 0x18c
     908:	add	r8, r4, #88	; 0x58
     90c:	ldr	r9, [r5, r3]
     910:	ldr	r3, [pc, #260]	; a1c <distribute_hostchange+0x150>
     914:	ldr	sl, [r5, r3]
     918:	ldr	r3, [r9]
     91c:	ldr	r2, [sl]
     920:	orr	r2, r3, r2
     924:	ldr	r3, [pc, #244]	; a20 <distribute_hostchange+0x154>
     928:	ldr	r5, [r5, r3]
     92c:	ldrb	r3, [r5, #396]	; 0x18c
     930:	str	r6, [sp, #12]
     934:	cmp	r3, #0
     938:	addeq	r3, r5, #88	; 0x58
     93c:	addne	r3, r5, #396	; 0x18c
     940:	str	r3, [sp, #4]
     944:	ldr	r3, [pc, #216]	; a24 <distribute_hostchange+0x158>
     948:	cmp	r1, #0
     94c:	add	r3, pc, r3
     950:	addne	r1, r4, #396	; 0x18c
     954:	moveq	r1, r8
     958:	str	r3, [sp]
     95c:	mov	r3, #0
     960:	str	r1, [sp, #8]
     964:	mov	r0, r3
     968:	mov	r1, r3
     96c:	bl	6c8 <sendto_server@plt>
     970:	ldrb	r1, [r5, #396]	; 0x18c
     974:	ldr	r2, [sl]
     978:	ldr	r3, [r9]
     97c:	cmp	r1, #0
     980:	ldrb	r1, [r4, #396]	; 0x18c
     984:	addeq	r5, r5, #88	; 0x58
     988:	addne	r5, r5, #396	; 0x18c
     98c:	cmp	r1, #0
     990:	addne	r1, r4, #396	; 0x18c
     994:	moveq	r1, r8
     998:	str	r1, [sp, #8]
     99c:	ldr	r1, [pc, #132]	; a28 <distribute_hostchange+0x15c>
     9a0:	str	r6, [sp, #12]
     9a4:	add	r1, pc, r1
     9a8:	str	r1, [sp]
     9ac:	mov	r1, #0
     9b0:	mov	r0, r1
     9b4:	str	r5, [sp, #4]
     9b8:	bl	6c8 <sendto_server@plt>
     9bc:	ldr	r3, [pc, #104]	; a2c <distribute_hostchange+0x160>
     9c0:	add	r2, r4, #152	; 0x98
     9c4:	add	r3, pc, r3
     9c8:	str	r3, [sp, #4]
     9cc:	mov	r3, #0
     9d0:	str	r3, [sp]
     9d4:	mov	r1, r8
     9d8:	mov	r3, r6
     9dc:	mov	r0, r4
     9e0:	bl	728 <change_nick_user_host@plt>
     9e4:	ldrd	r2, [r4, #64]	; 0x40
     9e8:	cmp	r7, r6
     9ec:	orrne	r2, r2, #131072	; 0x20000
     9f0:	biceq	r2, r2, #131072	; 0x20000
     9f4:	strd	r2, [r4, #64]	; 0x40
     9f8:	add	sp, sp, #16
     9fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     a00:	ldr	r2, [pc, #40]	; a30 <distribute_hostchange+0x164>
     a04:	mov	r3, r7
     a08:	add	r2, pc, r2
     a0c:	b	8f8 <distribute_hostchange+0x2c>
     a10:	.word	0x0001171c
     a14:	.word	0x0000082e
     a18:	.word	0x00000068
     a1c:	.word	0x0000005c
     a20:	.word	0x00000074
     a24:	.word	0x00000805
     a28:	.word	0x000007c0
     a2c:	.word	0x000007bb
     a30:	.word	0x00000736

00000a34 <check_umode_change>:
     a34:	push	{r4, r5, r6, r7, r8, lr}
     a38:	mov	r7, #0
     a3c:	ldr	r4, [r0]
     a40:	ldr	r1, [pc, #252]	; b44 <check_umode_change+0x110>
     a44:	ldrd	r2, [r4, #64]	; 0x40
     a48:	add	r1, pc, r1
     a4c:	and	r6, r2, #8192	; 0x2000
     a50:	orrs	ip, r6, r7
     a54:	popeq	{r4, r5, r6, r7, r8, pc}
     a58:	ldrh	ip, [r4, #80]	; 0x50
     a5c:	cmp	ip, #64	; 0x40
     a60:	popne	{r4, r5, r6, r7, r8, pc}
     a64:	ldr	ip, [pc, #220]	; b48 <check_umode_change+0x114>
     a68:	ldr	r5, [r4, #56]	; 0x38
     a6c:	ldr	r1, [r1, ip]
     a70:	ldr	r8, [r1, #416]	; 0x1a0
     a74:	ldr	r1, [r0, #4]
     a78:	eor	r1, r1, r5
     a7c:	tst	r1, r8
     a80:	popeq	{r4, r5, r6, r7, r8, pc}
     a84:	tst	r5, r8
     a88:	beq	b14 <check_umode_change+0xe0>
     a8c:	and	r0, r2, #16777216	; 0x1000000
     a90:	mov	r1, #0
     a94:	orrs	r1, r0, r1
     a98:	bne	ad4 <check_umode_change+0xa0>
     a9c:	ldr	r1, [r4, #432]	; 0x1b0
     aa0:	ldr	r6, [r1, #432]	; 0x1b0
     aa4:	cmp	r6, #0
     aa8:	beq	ad4 <check_umode_change+0xa0>
     aac:	and	r2, r2, #131072	; 0x20000
     ab0:	mov	r3, #0
     ab4:	orrs	r3, r2, r3
     ab8:	add	r7, r4, #163	; 0xa3
     abc:	beq	ae0 <check_umode_change+0xac>
     ac0:	mov	r1, r6
     ac4:	mov	r0, r7
     ac8:	bl	698 <strcmp@plt>
     acc:	cmp	r0, #0
     ad0:	beq	ae0 <check_umode_change+0xac>
     ad4:	bic	r5, r5, r8
     ad8:	str	r5, [r4, #56]	; 0x38
     adc:	pop	{r4, r5, r6, r7, r8, pc}
     ae0:	mov	r1, r6
     ae4:	mov	r0, r7
     ae8:	bl	698 <strcmp@plt>
     aec:	cmp	r0, #0
     af0:	movne	r1, r6
     af4:	bne	b38 <check_umode_change+0x104>
     af8:	ldr	r2, [pc, #76]	; b4c <check_umode_change+0x118>
     afc:	mov	r3, r7
     b00:	mov	r0, r4
     b04:	add	r2, pc, r2
     b08:	mov	r1, #396	; 0x18c
     b0c:	pop	{r4, r5, r6, r7, r8, lr}
     b10:	b	6ec <sendto_one_numeric@plt>
     b14:	ldr	r3, [r4, #432]	; 0x1b0
     b18:	ldr	r1, [r3, #432]	; 0x1b0
     b1c:	cmp	r1, #0
     b20:	popeq	{r4, r5, r6, r7, r8, pc}
     b24:	add	r0, r4, #163	; 0xa3
     b28:	bl	698 <strcmp@plt>
     b2c:	cmp	r0, #0
     b30:	popne	{r4, r5, r6, r7, r8, pc}
     b34:	add	r1, r4, #227	; 0xe3
     b38:	mov	r0, r4
     b3c:	pop	{r4, r5, r6, r7, r8, lr}
     b40:	b	8cc <distribute_hostchange>
     b44:	.word	0x000115b0
     b48:	.word	0x00000060
     b4c:	.word	0x0000061e

00000b50 <_moddeinit>:
     b50:	ldr	r3, [pc, #20]	; b6c <_moddeinit+0x1c>
     b54:	ldr	r2, [pc, #20]	; b70 <_moddeinit+0x20>
     b58:	add	r3, pc, r3
     b5c:	ldr	r3, [r3, r2]
     b60:	mov	r2, #0
     b64:	str	r2, [r3, #416]	; 0x1a0
     b68:	b	74c <construct_umodebuf@plt>
     b6c:	.word	0x000114a0
     b70:	.word	0x00000060

00000b74 <_modinit>:
     b74:	push	{r4, lr}
     b78:	bl	6bc <find_umode_slot@plt>
     b7c:	ldr	r4, [pc, #24]	; b9c <_modinit+0x28>
     b80:	ldr	r3, [pc, #24]	; ba0 <_modinit+0x2c>
     b84:	add	r4, pc, r4
     b88:	ldr	r3, [r4, r3]
     b8c:	str	r0, [r3, #416]	; 0x1a0
     b90:	bl	74c <construct_umodebuf@plt>
     b94:	mov	r0, #0
     b98:	pop	{r4, pc}
     b9c:	.word	0x00011474
     ba0:	.word	0x00000060

00000ba4 <get_string_weighted_entropy>:
     ba4:	sub	r0, r0, #1
     ba8:	mov	r2, #1
     bac:	ldrb	r3, [r0, #1]!
     bb0:	cmp	r3, #0
     bb4:	bne	c08 <get_string_weighted_entropy+0x64>
     bb8:	ldr	r3, [pc, #88]	; c18 <get_string_weighted_entropy+0x74>
     bbc:	add	r3, pc, r3
     bc0:	ldr	r3, [r3]
     bc4:	cmp	r3, #0
     bc8:	bne	bf0 <get_string_weighted_entropy+0x4c>
     bcc:	ldr	r0, [pc, #72]	; c1c <get_string_weighted_entropy+0x78>
     bd0:	mov	r3, #1
     bd4:	add	r0, pc, r0
     bd8:	ldrb	r1, [r0], #1
     bdc:	cmp	r1, #0
     be0:	bne	c10 <get_string_weighted_entropy+0x6c>
     be4:	ldr	r1, [pc, #52]	; c20 <get_string_weighted_entropy+0x7c>
     be8:	add	r1, pc, r1
     bec:	str	r3, [r1]
     bf0:	ldr	r3, [pc, #44]	; c24 <get_string_weighted_entropy+0x80>
     bf4:	mul	r3, r3, r2
     bf8:	ldr	r2, [pc, #40]	; c28 <get_string_weighted_entropy+0x84>
     bfc:	ldr	r0, [pc, r2]
     c00:	eor	r0, r0, r3
     c04:	bx	lr
     c08:	add	r2, r2, r3
     c0c:	b	bac <get_string_weighted_entropy+0x8>
     c10:	add	r3, r3, r1
     c14:	b	bd8 <get_string_weighted_entropy+0x34>
     c18:	.word	0x00011508
     c1c:	.word	0x000005b9
     c20:	.word	0x000114dc
     c24:	.word	0x8c3a48ac
     c28:	.word	0x000114c8

00000c2c <check_new_user>:
     c2c:	ldrd	r2, [r0, #64]	; 0x40
     c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c34:	mov	r3, #0
     c38:	ldr	r8, [pc, #648]	; ec8 <check_new_user+0x29c>
     c3c:	and	r2, r2, #16777216	; 0x1000000
     c40:	orrs	r3, r2, r3
     c44:	add	r8, pc, r8
     c48:	sub	sp, sp, #76	; 0x4c
     c4c:	beq	c70 <check_new_user+0x44>
     c50:	ldr	r3, [pc, #628]	; ecc <check_new_user+0x2a0>
     c54:	ldr	r3, [r8, r3]
     c58:	ldr	r2, [r3, #416]	; 0x1a0
     c5c:	ldr	r3, [r0, #56]	; 0x38
     c60:	bic	r3, r3, r2
     c64:	str	r3, [r0, #56]	; 0x38
     c68:	add	sp, sp, #76	; 0x4c
     c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c70:	ldr	r5, [r0, #432]	; 0x1b0
     c74:	mov	r4, r0
     c78:	mov	r1, #64	; 0x40
     c7c:	mov	r0, #1
     c80:	bl	680 <calloc@plt>
     c84:	cmp	r0, #0
     c88:	bne	c90 <check_new_user+0x64>
     c8c:	bl	6b0 <rb_outofmemory@plt>
     c90:	add	r6, r4, #227	; 0xe3
     c94:	add	r1, r4, #288	; 0x120
     c98:	str	r0, [r5, #432]	; 0x1b0
     c9c:	add	r1, r1, #3
     ca0:	mov	r0, r6
     ca4:	bl	740 <irccmp@plt>
     ca8:	ldr	r3, [r4, #432]	; 0x1b0
     cac:	add	r5, sp, #8
     cb0:	ldr	r7, [r3, #432]	; 0x1b0
     cb4:	subs	fp, r0, #0
     cb8:	bne	d90 <check_new_user+0x164>
     cbc:	mov	r0, r6
     cc0:	bl	ba4 <get_string_weighted_entropy>
     cc4:	mov	r2, #64	; 0x40
     cc8:	mov	r1, fp
     ccc:	mov	r9, r0
     cd0:	mov	r0, r5
     cd4:	bl	704 <memset@plt>
     cd8:	mov	r2, #63	; 0x3f
     cdc:	mov	r1, r6
     ce0:	mov	r0, r5
     ce4:	bl	710 <strncpy@plt>
     ce8:	mov	r1, #46	; 0x2e
     cec:	mov	r0, r5
     cf0:	bl	71c <strrchr@plt>
     cf4:	subs	sl, r0, #0
     cf8:	bne	e8c <check_new_user+0x260>
     cfc:	mov	r1, #58	; 0x3a
     d00:	mov	r0, r5
     d04:	bl	71c <strrchr@plt>
     d08:	cmp	r0, #0
     d0c:	bne	eb0 <check_new_user+0x284>
     d10:	mov	r2, #63	; 0x3f
     d14:	mov	r1, r6
     d18:	mov	r0, r7
     d1c:	bl	710 <strncpy@plt>
     d20:	ldrd	r2, [r4, #64]	; 0x40
     d24:	mov	r3, #0
     d28:	and	r2, r2, #131072	; 0x20000
     d2c:	orrs	r3, r2, r3
     d30:	ldr	r3, [pc, #404]	; ecc <check_new_user+0x2a0>
     d34:	ldr	r2, [r8, r3]
     d38:	ldrne	r3, [r4, #56]	; 0x38
     d3c:	ldrne	r1, [r2, #416]	; 0x1a0
     d40:	bicne	r3, r3, r1
     d44:	strne	r3, [r4, #56]	; 0x38
     d48:	ldr	r1, [r4, #56]	; 0x38
     d4c:	ldr	r3, [r2, #416]	; 0x1a0
     d50:	tst	r1, r3
     d54:	beq	c68 <check_new_user+0x3c>
     d58:	ldr	r3, [r4, #432]	; 0x1b0
     d5c:	add	r5, r4, #163	; 0xa3
     d60:	mov	r2, #64	; 0x40
     d64:	ldr	r1, [r3, #432]	; 0x1b0
     d68:	mov	r0, r5
     d6c:	bl	734 <rb_strlcpy@plt>
     d70:	mov	r1, r6
     d74:	mov	r0, r5
     d78:	bl	740 <irccmp@plt>
     d7c:	cmp	r0, #0
     d80:	ldrdne	r2, [r4, #64]	; 0x40
     d84:	orrne	r2, r2, #131072	; 0x20000
     d88:	strdne	r2, [r4, #64]	; 0x40
     d8c:	b	c68 <check_new_user+0x3c>
     d90:	ldr	r3, [pc, #312]	; ed0 <check_new_user+0x2a4>
     d94:	add	r3, pc, r3
     d98:	add	ip, r3, #24
     d9c:	ldr	r0, [r3]
     da0:	ldr	r1, [r3, #4]
     da4:	mov	r2, r5
     da8:	add	r3, r3, #8
     dac:	cmp	r3, ip
     db0:	stmia	r2!, {r0, r1}
     db4:	mov	r5, r2
     db8:	bne	d9c <check_new_user+0x170>
     dbc:	ldrh	r2, [r3]
     dc0:	ldrb	r3, [r3, #2]
     dc4:	mov	r0, r6
     dc8:	strh	r2, [r5]
     dcc:	strb	r3, [r5, #2]
     dd0:	bl	ba4 <get_string_weighted_entropy>
     dd4:	mov	r2, #63	; 0x3f
     dd8:	mov	r1, r6
     ddc:	mov	fp, r7
     de0:	mov	sl, #26
     de4:	mov	r9, r0
     de8:	mov	r0, r7
     dec:	bl	710 <strncpy@plt>
     df0:	ldrb	r5, [fp]
     df4:	cmp	r5, #46	; 0x2e
     df8:	cmpne	r5, #0
     dfc:	bne	e44 <check_new_user+0x218>
     e00:	mov	sl, #10
     e04:	ldrb	r5, [r7]
     e08:	cmp	r5, #0
     e0c:	beq	d20 <check_new_user+0xf4>
     e10:	bl	6e0 <__ctype_b_loc@plt>
     e14:	lsl	r3, r5, #1
     e18:	ldr	r2, [r0]
     e1c:	ldrh	r3, [r2, r3]
     e20:	tst	r3, #2048	; 0x800
     e24:	beq	e3c <check_new_user+0x210>
     e28:	mov	r1, sl
     e2c:	mul	r0, r5, r9
     e30:	bl	10c8 <__aeabi_uidivmod>
     e34:	add	r1, r1, #48	; 0x30
     e38:	strb	r1, [r7]
     e3c:	add	r7, r7, #1
     e40:	b	e04 <check_new_user+0x1d8>
     e44:	bl	6e0 <__ctype_b_loc@plt>
     e48:	lsl	r3, r5, #1
     e4c:	ldr	r2, [r0]
     e50:	ldrh	r3, [r2, r3]
     e54:	lsr	r3, r3, #11
     e58:	cmp	r5, #45	; 0x2d
     e5c:	orreq	r3, r3, #1
     e60:	tst	r3, #1
     e64:	bne	e84 <check_new_user+0x258>
     e68:	mov	r1, sl
     e6c:	mul	r0, r5, r9
     e70:	bl	10c8 <__aeabi_uidivmod>
     e74:	add	r3, sp, #72	; 0x48
     e78:	add	r1, r3, r1
     e7c:	ldrb	r3, [r1, #-64]	; 0xffffffc0
     e80:	strb	r3, [fp]
     e84:	add	fp, fp, #1
     e88:	b	df0 <check_new_user+0x1c4>
     e8c:	ldr	r2, [pc, #64]	; ed4 <check_new_user+0x2a8>
     e90:	mov	r3, r5
     e94:	add	r2, pc, r2
     e98:	strb	fp, [sl]
     e9c:	str	r9, [sp]
     ea0:	mov	r1, #63	; 0x3f
     ea4:	mov	r0, r7
     ea8:	bl	6f8 <snprintf@plt>
     eac:	b	d20 <check_new_user+0xf4>
     eb0:	ldr	r2, [pc, #32]	; ed8 <check_new_user+0x2ac>
     eb4:	strb	sl, [r0]
     eb8:	mov	r3, r5
     ebc:	str	r9, [sp]
     ec0:	add	r2, pc, r2
     ec4:	b	ea0 <check_new_user+0x274>
     ec8:	.word	0x000113b4
     ecc:	.word	0x00000060
     ed0:	.word	0x00000434
     ed4:	.word	0x00000322
     ed8:	.word	0x000002ff

00000edc <__udivsi3>:
     edc:	subs	r2, r1, #1
     ee0:	bxeq	lr
     ee4:	bcc	10bc <__udivsi3+0x1e0>
     ee8:	cmp	r0, r1
     eec:	bls	10a0 <__udivsi3+0x1c4>
     ef0:	tst	r1, r2
     ef4:	beq	10ac <__udivsi3+0x1d0>
     ef8:	clz	r3, r0
     efc:	clz	r2, r1
     f00:	sub	r3, r2, r3
     f04:	rsbs	r3, r3, #31
     f08:	addne	r3, r3, r3, lsl #1
     f0c:	mov	r2, #0
     f10:	addne	pc, pc, r3, lsl #2
     f14:	nop			; (mov r0, r0)
     f18:	cmp	r0, r1, lsl #31
     f1c:	adc	r2, r2, r2
     f20:	subcs	r0, r0, r1, lsl #31
     f24:	cmp	r0, r1, lsl #30
     f28:	adc	r2, r2, r2
     f2c:	subcs	r0, r0, r1, lsl #30
     f30:	cmp	r0, r1, lsl #29
     f34:	adc	r2, r2, r2
     f38:	subcs	r0, r0, r1, lsl #29
     f3c:	cmp	r0, r1, lsl #28
     f40:	adc	r2, r2, r2
     f44:	subcs	r0, r0, r1, lsl #28
     f48:	cmp	r0, r1, lsl #27
     f4c:	adc	r2, r2, r2
     f50:	subcs	r0, r0, r1, lsl #27
     f54:	cmp	r0, r1, lsl #26
     f58:	adc	r2, r2, r2
     f5c:	subcs	r0, r0, r1, lsl #26
     f60:	cmp	r0, r1, lsl #25
     f64:	adc	r2, r2, r2
     f68:	subcs	r0, r0, r1, lsl #25
     f6c:	cmp	r0, r1, lsl #24
     f70:	adc	r2, r2, r2
     f74:	subcs	r0, r0, r1, lsl #24
     f78:	cmp	r0, r1, lsl #23
     f7c:	adc	r2, r2, r2
     f80:	subcs	r0, r0, r1, lsl #23
     f84:	cmp	r0, r1, lsl #22
     f88:	adc	r2, r2, r2
     f8c:	subcs	r0, r0, r1, lsl #22
     f90:	cmp	r0, r1, lsl #21
     f94:	adc	r2, r2, r2
     f98:	subcs	r0, r0, r1, lsl #21
     f9c:	cmp	r0, r1, lsl #20
     fa0:	adc	r2, r2, r2
     fa4:	subcs	r0, r0, r1, lsl #20
     fa8:	cmp	r0, r1, lsl #19
     fac:	adc	r2, r2, r2
     fb0:	subcs	r0, r0, r1, lsl #19
     fb4:	cmp	r0, r1, lsl #18
     fb8:	adc	r2, r2, r2
     fbc:	subcs	r0, r0, r1, lsl #18
     fc0:	cmp	r0, r1, lsl #17
     fc4:	adc	r2, r2, r2
     fc8:	subcs	r0, r0, r1, lsl #17
     fcc:	cmp	r0, r1, lsl #16
     fd0:	adc	r2, r2, r2
     fd4:	subcs	r0, r0, r1, lsl #16
     fd8:	cmp	r0, r1, lsl #15
     fdc:	adc	r2, r2, r2
     fe0:	subcs	r0, r0, r1, lsl #15
     fe4:	cmp	r0, r1, lsl #14
     fe8:	adc	r2, r2, r2
     fec:	subcs	r0, r0, r1, lsl #14
     ff0:	cmp	r0, r1, lsl #13
     ff4:	adc	r2, r2, r2
     ff8:	subcs	r0, r0, r1, lsl #13
     ffc:	cmp	r0, r1, lsl #12
    1000:	adc	r2, r2, r2
    1004:	subcs	r0, r0, r1, lsl #12
    1008:	cmp	r0, r1, lsl #11
    100c:	adc	r2, r2, r2
    1010:	subcs	r0, r0, r1, lsl #11
    1014:	cmp	r0, r1, lsl #10
    1018:	adc	r2, r2, r2
    101c:	subcs	r0, r0, r1, lsl #10
    1020:	cmp	r0, r1, lsl #9
    1024:	adc	r2, r2, r2
    1028:	subcs	r0, r0, r1, lsl #9
    102c:	cmp	r0, r1, lsl #8
    1030:	adc	r2, r2, r2
    1034:	subcs	r0, r0, r1, lsl #8
    1038:	cmp	r0, r1, lsl #7
    103c:	adc	r2, r2, r2
    1040:	subcs	r0, r0, r1, lsl #7
    1044:	cmp	r0, r1, lsl #6
    1048:	adc	r2, r2, r2
    104c:	subcs	r0, r0, r1, lsl #6
    1050:	cmp	r0, r1, lsl #5
    1054:	adc	r2, r2, r2
    1058:	subcs	r0, r0, r1, lsl #5
    105c:	cmp	r0, r1, lsl #4
    1060:	adc	r2, r2, r2
    1064:	subcs	r0, r0, r1, lsl #4
    1068:	cmp	r0, r1, lsl #3
    106c:	adc	r2, r2, r2
    1070:	subcs	r0, r0, r1, lsl #3
    1074:	cmp	r0, r1, lsl #2
    1078:	adc	r2, r2, r2
    107c:	subcs	r0, r0, r1, lsl #2
    1080:	cmp	r0, r1, lsl #1
    1084:	adc	r2, r2, r2
    1088:	subcs	r0, r0, r1, lsl #1
    108c:	cmp	r0, r1
    1090:	adc	r2, r2, r2
    1094:	subcs	r0, r0, r1
    1098:	mov	r0, r2
    109c:	bx	lr
    10a0:	moveq	r0, #1
    10a4:	movne	r0, #0
    10a8:	bx	lr
    10ac:	clz	r2, r1
    10b0:	rsb	r2, r2, #31
    10b4:	lsr	r0, r0, r2
    10b8:	bx	lr
    10bc:	cmp	r0, #0
    10c0:	mvnne	r0, #0
    10c4:	b	10e8 <__aeabi_idiv0>

000010c8 <__aeabi_uidivmod>:
    10c8:	cmp	r1, #0
    10cc:	beq	10bc <__udivsi3+0x1e0>
    10d0:	push	{r0, r1, lr}
    10d4:	bl	edc <__udivsi3>
    10d8:	pop	{r1, r2, lr}
    10dc:	mul	r3, r2, r0
    10e0:	sub	r1, r1, r3
    10e4:	bx	lr

000010e8 <__aeabi_idiv0>:
    10e8:	push	{r1, lr}
    10ec:	mov	r0, #8
    10f0:	bl	68c <raise@plt>
    10f4:	pop	{r1, pc}

Disassembly of section .fini:

000010f8 <_fini>:
    10f8:	push	{r3, lr}
    10fc:	pop	{r3, pc}
