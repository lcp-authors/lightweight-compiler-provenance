
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f68 <.init>:
   11f68:	push	{r3, lr}
   11f6c:	bl	12840 <_start@@Base+0x3c>
   11f70:	pop	{r3, pc}

Disassembly of section .plt:

00011f74 <strcmp@plt-0x14>:
   11f74:	push	{lr}		; (str lr, [sp, #-4]!)
   11f78:	ldr	lr, [pc, #4]	; 11f84 <strcmp@plt-0x4>
   11f7c:	add	lr, pc, lr
   11f80:	ldr	pc, [lr, #8]!
   11f84:	andeq	r7, r1, ip, ror r0

00011f88 <strcmp@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #94208	; 0x17000
   11f90:	ldr	pc, [ip, #124]!	; 0x7c

00011f94 <printf@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #94208	; 0x17000
   11f9c:	ldr	pc, [ip, #116]!	; 0x74

00011fa0 <fopen@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #94208	; 0x17000
   11fa8:	ldr	pc, [ip, #108]!	; 0x6c

00011fac <free@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #94208	; 0x17000
   11fb4:	ldr	pc, [ip, #100]!	; 0x64

00011fb8 <memcpy@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #94208	; 0x17000
   11fc0:	ldr	pc, [ip, #92]!	; 0x5c

00011fc4 <memcmp@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #94208	; 0x17000
   11fcc:	ldr	pc, [ip, #84]!	; 0x54

00011fd0 <realloc@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #94208	; 0x17000
   11fd8:	ldr	pc, [ip, #76]!	; 0x4c

00011fdc <fwrite@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #94208	; 0x17000
   11fe4:	ldr	pc, [ip, #68]!	; 0x44

00011fe8 <gettimeofday@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #94208	; 0x17000
   11ff0:	ldr	pc, [ip, #60]!	; 0x3c

00011ff4 <puts@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #94208	; 0x17000
   11ffc:	ldr	pc, [ip, #52]!	; 0x34

00012000 <malloc@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #94208	; 0x17000
   12008:	ldr	pc, [ip, #44]!	; 0x2c

0001200c <__libc_start_main@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #94208	; 0x17000
   12014:	ldr	pc, [ip, #36]!	; 0x24

00012018 <__gmon_start__@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #94208	; 0x17000
   12020:	ldr	pc, [ip, #28]!

00012024 <strlen@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #94208	; 0x17000
   1202c:	ldr	pc, [ip, #20]!

00012030 <posix_memalign@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #94208	; 0x17000
   12038:	ldr	pc, [ip, #12]!

0001203c <memset@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #94208	; 0x17000
   12044:	ldr	pc, [ip, #4]!

00012048 <memchr@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #90112	; 0x16000
   12050:	ldr	pc, [ip, #4092]!	; 0xffc

00012054 <fclose@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #90112	; 0x16000
   1205c:	ldr	pc, [ip, #4084]!	; 0xff4

00012060 <abort@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #90112	; 0x16000
   12068:	ldr	pc, [ip, #4076]!	; 0xfec

0001206c <__assert_fail@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #90112	; 0x16000
   12074:	ldr	pc, [ip, #4068]!	; 0xfe4

Disassembly of section .text:

00012078 <main@@Base-0x140>:
   12078:	ldr	r3, [pc, #28]	; 1209c <__assert_fail@plt+0x30>
   1207c:	ldr	r1, [pc, #28]	; 120a0 <__assert_fail@plt+0x34>
   12080:	ldr	r0, [pc, #28]	; 120a4 <__assert_fail@plt+0x38>
   12084:	push	{r4, lr}
   12088:	add	r3, pc, r3
   1208c:	ldr	r2, [pc, #20]	; 120a8 <__assert_fail@plt+0x3c>
   12090:	add	r1, pc, r1
   12094:	add	r0, pc, r0
   12098:	bl	1206c <__assert_fail@plt>
   1209c:	andeq	r5, r0, r4, lsl #8
   120a0:	andeq	r5, r0, r4, ror r4
   120a4:	andeq	r5, r0, r8, ror #9
   120a8:			; <UNDEFINED> instruction: 0x000002bb
   120ac:	ldr	r3, [pc, #32]	; 120d4 <__assert_fail@plt+0x68>
   120b0:	ldr	r1, [pc, #32]	; 120d8 <__assert_fail@plt+0x6c>
   120b4:	ldr	r0, [pc, #32]	; 120dc <__assert_fail@plt+0x70>
   120b8:	add	r3, pc, r3
   120bc:	push	{r4, lr}
   120c0:	mov	r2, #235	; 0xeb
   120c4:	add	r3, r3, #28
   120c8:	add	r1, pc, r1
   120cc:	add	r0, pc, r0
   120d0:	bl	1206c <__assert_fail@plt>
   120d4:	ldrdeq	r5, [r0], -r4
   120d8:	ldrdeq	r5, [r0], -ip
   120dc:	andeq	r5, r0, r0, asr r5
   120e0:	ldr	r3, [pc, #28]	; 12104 <__assert_fail@plt+0x98>
   120e4:	ldr	r1, [pc, #28]	; 12108 <__assert_fail@plt+0x9c>
   120e8:	ldr	r0, [pc, #28]	; 1210c <__assert_fail@plt+0xa0>
   120ec:	push	{r4, lr}
   120f0:	add	r3, pc, r3
   120f4:	mov	r2, #308	; 0x134
   120f8:	add	r1, pc, r1
   120fc:	add	r0, pc, r0
   12100:	bl	1206c <__assert_fail@plt>
   12104:	andeq	r5, r0, r8, lsr #16
   12108:	andeq	r5, r0, r0, ror pc
   1210c:	strdeq	r5, [r0], -r4
   12110:	ldr	r3, [pc, #32]	; 12138 <__assert_fail@plt+0xcc>
   12114:	ldr	r1, [pc, #32]	; 1213c <__assert_fail@plt+0xd0>
   12118:	ldr	r0, [pc, #32]	; 12140 <__assert_fail@plt+0xd4>
   1211c:	add	r3, pc, r3
   12120:	push	{r4, lr}
   12124:	add	r3, r3, #16
   12128:	ldr	r2, [pc, #20]	; 12144 <__assert_fail@plt+0xd8>
   1212c:	add	r1, pc, r1
   12130:	add	r0, pc, r0
   12134:	bl	1206c <__assert_fail@plt>
   12138:	strdeq	r5, [r0], -ip
   1213c:	andeq	r5, r0, ip, lsr pc
   12140:	andeq	r5, r0, r0, asr #31
   12144:	andeq	r0, r0, r1, lsr #5
   12148:	ldr	r3, [pc, #32]	; 12170 <__assert_fail@plt+0x104>
   1214c:	ldr	r1, [pc, #32]	; 12174 <__assert_fail@plt+0x108>
   12150:	ldr	r0, [pc, #32]	; 12178 <__assert_fail@plt+0x10c>
   12154:	add	r3, pc, r3
   12158:	push	{r4, lr}
   1215c:	add	r3, r3, #28
   12160:	ldr	r2, [pc, #20]	; 1217c <__assert_fail@plt+0x110>
   12164:	add	r1, pc, r1
   12168:	add	r0, pc, r0
   1216c:	bl	1206c <__assert_fail@plt>
   12170:	andeq	r5, r0, r4, asr #15
   12174:	andeq	r5, r0, r4, lsl #30
   12178:	andeq	r5, r0, r8, lsl #31
   1217c:	andeq	r0, r0, r7, lsl #5
   12180:	ldr	r3, [pc, #32]	; 121a8 <__assert_fail@plt+0x13c>
   12184:	ldr	r1, [pc, #32]	; 121ac <__assert_fail@plt+0x140>
   12188:	ldr	r0, [pc, #32]	; 121b0 <__assert_fail@plt+0x144>
   1218c:	add	r3, pc, r3
   12190:	push	{r4, lr}
   12194:	mov	r2, #892	; 0x37c
   12198:	add	r3, r3, #40	; 0x28
   1219c:	add	r1, pc, r1
   121a0:	add	r0, pc, r0
   121a4:	bl	1206c <__assert_fail@plt>
   121a8:	andeq	r5, r0, ip, lsl #15
   121ac:	andeq	r5, r0, ip, asr #29
   121b0:	andeq	r5, r0, r8, lsr #30
   121b4:	andeq	r0, r0, r0

000121b8 <main@@Base>:
   121b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121bc:	vpush	{d8-d10}
   121c0:	sub	sp, sp, #276	; 0x114
   121c4:	add	r3, sp, #40	; 0x28
   121c8:	mov	r4, r3
   121cc:	mov	r0, r3
   121d0:	str	r3, [sp, #12]
   121d4:	bl	132c0 <flatcc_builder_init@@Base>
   121d8:	mov	r0, r4
   121dc:	bl	129b8 <_start@@Base+0x1b4>
   121e0:	mov	r0, r4
   121e4:	add	r1, sp, #36	; 0x24
   121e8:	bl	16ca4 <flatcc_builder_finalize_buffer@@Base>
   121ec:	ldr	r1, [pc, #1372]	; 12750 <main@@Base+0x598>
   121f0:	add	r1, pc, r1
   121f4:	str	r0, [sp, #8]
   121f8:	mov	r5, r0
   121fc:	ldr	r0, [pc, #1360]	; 12754 <main@@Base+0x59c>
   12200:	add	r0, pc, r0
   12204:	bl	11fa0 <fopen@plt>
   12208:	subs	r4, r0, #0
   1220c:	beq	12714 <main@@Base+0x55c>
   12210:	mov	r3, r4
   12214:	ldr	r2, [sp, #36]	; 0x24
   12218:	mov	r1, #1
   1221c:	mov	r0, r5
   12220:	bl	11fdc <fwrite@plt>
   12224:	ldr	r5, [sp, #36]	; 0x24
   12228:	mov	r6, r0
   1222c:	mov	r0, r4
   12230:	bl	12054 <fclose@plt>
   12234:	cmp	r6, r5
   12238:	beq	1226c <main@@Base+0xb4>
   1223c:	ldr	r0, [sp, #12]
   12240:	bl	13448 <flatcc_builder_clear@@Base>
   12244:	ldr	r0, [sp, #8]
   12248:	bl	11fac <free@plt>
   1224c:	mov	r4, #1
   12250:	ldr	r0, [pc, #1280]	; 12758 <main@@Base+0x5a0>
   12254:	add	r0, pc, r0
   12258:	bl	11ff4 <puts@plt>
   1225c:	mov	r0, r4
   12260:	add	sp, sp, #276	; 0x114
   12264:	vpop	{d8-d10}
   12268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1226c:	ldr	r0, [pc, #1256]	; 1275c <main@@Base+0x5a4>
   12270:	ldr	r1, [sp, #36]	; 0x24
   12274:	add	r0, pc, r0
   12278:	bl	11f94 <printf@plt>
   1227c:	ldr	r0, [pc, #1244]	; 12760 <main@@Base+0x5a8>
   12280:	ldr	r8, [pc, #1244]	; 12764 <main@@Base+0x5ac>
   12284:	add	r0, pc, r0
   12288:	bl	11ff4 <puts@plt>
   1228c:	bl	12930 <_start@@Base+0x12c>
   12290:	ldr	r6, [pc, #1232]	; 12768 <main@@Base+0x5b0>
   12294:	ldr	r3, [pc, #1232]	; 1276c <main@@Base+0x5b4>
   12298:	add	r8, pc, r8
   1229c:	add	r3, pc, r3
   122a0:	add	r6, pc, r6
   122a4:	add	r8, r8, #8
   122a8:	str	r3, [sp, #28]
   122ac:	mov	r3, #10
   122b0:	str	r3, [sp, #24]
   122b4:	vmov.f64	d8, d0
   122b8:	ldr	r5, [sp, #12]
   122bc:	mov	r0, r5
   122c0:	bl	129b8 <_start@@Base+0x1b4>
   122c4:	ldr	r4, [sp, #8]
   122c8:	ldr	r2, [sp, #36]	; 0x24
   122cc:	mov	r1, r4
   122d0:	mov	r0, r5
   122d4:	bl	16c44 <flatcc_builder_copy_buffer@@Base>
   122d8:	ldr	r3, [r4, #4]
   122dc:	ldr	r2, [pc, #1164]	; 12770 <main@@Base+0x5b8>
   122e0:	cmp	r3, r2
   122e4:	beq	122ec <main@@Base+0x134>
   122e8:	bl	12078 <__assert_fail@plt+0xc>
   122ec:	ldr	r2, [sp, #8]
   122f0:	ldr	r3, [r2]
   122f4:	adds	fp, r2, r3
   122f8:	beq	122e8 <main@@Base+0x130>
   122fc:	ldr	r2, [sp, #8]
   12300:	ldr	r4, [r2, r3]
   12304:	sub	r4, fp, r4
   12308:	ldrh	r5, [r4]
   1230c:	cmp	r5, #11
   12310:	bhi	12334 <main@@Base+0x17c>
   12314:	ldr	r3, [pc, #1112]	; 12774 <main@@Base+0x5bc>
   12318:	ldr	r1, [pc, #1112]	; 12778 <main@@Base+0x5c0>
   1231c:	ldr	r0, [pc, #1112]	; 1277c <main@@Base+0x5c4>
   12320:	add	r3, pc, r3
   12324:	ldr	r2, [pc, #1108]	; 12780 <main@@Base+0x5c8>
   12328:	add	r1, pc, r1
   1232c:	add	r0, pc, r0
   12330:	bl	1206c <__assert_fail@plt>
   12334:	ldrh	r3, [r4, #10]
   12338:	cmp	r3, #0
   1233c:	beq	12314 <main@@Base+0x15c>
   12340:	ldr	r0, [fp, r3]
   12344:	add	r3, fp, r3
   12348:	add	r0, r0, #4
   1234c:	add	r0, r3, r0
   12350:	ldr	r1, [sp, #28]
   12354:	bl	11f88 <strcmp@plt>
   12358:	cmp	r0, #0
   1235c:	bne	126ac <main@@Base+0x4f4>
   12360:	cmp	r5, #27
   12364:	bhi	1238c <main@@Base+0x1d4>
   12368:	ldr	r3, [pc, #1044]	; 12784 <main@@Base+0x5cc>
   1236c:	ldr	r1, [pc, #1044]	; 12788 <main@@Base+0x5d0>
   12370:	ldr	r0, [pc, #1044]	; 1278c <main@@Base+0x5d4>
   12374:	add	r3, pc, r3
   12378:	mov	r2, #143	; 0x8f
   1237c:	add	r3, r3, #96	; 0x60
   12380:	add	r1, pc, r1
   12384:	add	r0, pc, r0
   12388:	bl	1206c <__assert_fail@plt>
   1238c:	ldrh	r3, [r4, #26]
   12390:	cmp	r3, #0
   12394:	beq	12368 <main@@Base+0x1b0>
   12398:	ldr	r2, [fp, r3]
   1239c:	add	fp, fp, r3
   123a0:	add	r3, r2, #4
   123a4:	adds	fp, fp, r3
   123a8:	beq	12368 <main@@Base+0x1b0>
   123ac:	ldr	r9, [fp, #-4]
   123b0:	cmp	r9, #1000	; 0x3e8
   123b4:	bne	12368 <main@@Base+0x1b0>
   123b8:	mov	r7, #7
   123bc:	add	r3, fp, #4000	; 0xfa0
   123c0:	str	fp, [sp, #4]
   123c4:	str	r0, [sp, #20]
   123c8:	str	r3, [sp, #16]
   123cc:	ldr	r3, [sp, #4]
   123d0:	mov	r2, r3
   123d4:	add	r3, r3, #4
   123d8:	ldr	r1, [r2]
   123dc:	str	r3, [sp, #4]
   123e0:	adds	r3, r2, r1
   123e4:	beq	122e8 <main@@Base+0x130>
   123e8:	ldr	r2, [r2, r1]
   123ec:	sub	r2, r3, r2
   123f0:	ldrh	r0, [r2]
   123f4:	cmp	r0, #11
   123f8:	bls	12314 <main@@Base+0x15c>
   123fc:	ldrh	r1, [r2, #10]
   12400:	cmp	r1, #0
   12404:	beq	12314 <main@@Base+0x15c>
   12408:	ldr	sl, [r3, r1]
   1240c:	cmp	r0, #15
   12410:	add	sl, sl, #4
   12414:	add	r1, r3, r1
   12418:	add	sl, r1, sl
   1241c:	bls	125d4 <main@@Base+0x41c>
   12420:	ldrh	r2, [r2, #14]
   12424:	cmp	r2, #0
   12428:	beq	12604 <main@@Base+0x44c>
   1242c:	ldr	r4, [r3, r2]
   12430:	cmp	sl, #0
   12434:	add	r3, r3, r2
   12438:	add	r4, r4, #4
   1243c:	add	r4, r3, r4
   12440:	beq	125e0 <main@@Base+0x428>
   12444:	ldr	r3, [sl, #-4]
   12448:	cmp	r3, #700	; 0x2bc
   1244c:	bne	125e0 <main@@Base+0x428>
   12450:	cmp	r4, #0
   12454:	beq	12618 <main@@Base+0x460>
   12458:	ldr	r3, [r4, #-4]
   1245c:	ldr	r2, [pc, #812]	; 12790 <main@@Base+0x5d8>
   12460:	cmp	r3, r2
   12464:	bne	12618 <main@@Base+0x460>
   12468:	mov	r5, sl
   1246c:	mov	fp, #0
   12470:	mov	r2, r7
   12474:	mov	r1, r6
   12478:	mov	r0, r5
   1247c:	bl	11fc4 <memcmp@plt>
   12480:	cmp	r0, #0
   12484:	bne	1263c <main@@Base+0x484>
   12488:	add	fp, fp, #1
   1248c:	cmp	fp, #100	; 0x64
   12490:	add	r5, r5, #7
   12494:	bne	12470 <main@@Base+0x2b8>
   12498:	add	r5, r4, #99328	; 0x18400
   1249c:	add	r5, r5, #672	; 0x2a0
   124a0:	mov	r2, r9
   124a4:	mov	r1, r8
   124a8:	mov	r0, r4
   124ac:	bl	11fc4 <memcmp@plt>
   124b0:	cmp	r0, #0
   124b4:	bne	12688 <main@@Base+0x4d0>
   124b8:	add	r4, r4, #1000	; 0x3e8
   124bc:	cmp	r4, r5
   124c0:	bne	124a0 <main@@Base+0x2e8>
   124c4:	ldr	r3, [sp, #4]
   124c8:	ldr	r2, [sp, #16]
   124cc:	cmp	r3, r2
   124d0:	bne	123cc <main@@Base+0x214>
   124d4:	ldr	r3, [sp, #24]
   124d8:	subs	r3, r3, #1
   124dc:	str	r3, [sp, #24]
   124e0:	bne	122b8 <main@@Base+0x100>
   124e4:	mov	r4, r0
   124e8:	bl	12930 <_start@@Base+0x12c>
   124ec:	ldr	r1, [pc, #672]	; 12794 <main@@Base+0x5dc>
   124f0:	ldr	r0, [pc, #672]	; 12798 <main@@Base+0x5e0>
   124f4:	add	r1, pc, r1
   124f8:	add	r0, pc, r0
   124fc:	ldr	r5, [sp, #36]	; 0x24
   12500:	vldr	d9, [pc, #552]	; 12730 <main@@Base+0x578>
   12504:	vldr	d10, [pc, #556]	; 12738 <main@@Base+0x580>
   12508:	vsub.f64	d8, d0, d8
   1250c:	bl	11f94 <printf@plt>
   12510:	ldr	r0, [pc, #644]	; 1279c <main@@Base+0x5e4>
   12514:	add	r0, pc, r0
   12518:	vmov	r2, r3, d8
   1251c:	bl	11f94 <printf@plt>
   12520:	ldr	r0, [pc, #632]	; 127a0 <main@@Base+0x5e8>
   12524:	mov	r1, #10
   12528:	add	r0, pc, r0
   1252c:	bl	11f94 <printf@plt>
   12530:	ldr	r0, [pc, #620]	; 127a4 <main@@Base+0x5ec>
   12534:	mov	r1, r5
   12538:	add	r0, pc, r0
   1253c:	bl	11f94 <printf@plt>
   12540:	vmov	s15, r5
   12544:	ldr	r0, [pc, #604]	; 127a8 <main@@Base+0x5f0>
   12548:	add	r0, pc, r0
   1254c:	vcvt.f64.u32	d7, s15
   12550:	vmul.f64	d7, d7, d9
   12554:	vdiv.f64	d6, d7, d10
   12558:	vdiv.f64	d7, d6, d8
   1255c:	vmov	r2, r3, d7
   12560:	bl	11f94 <printf@plt>
   12564:	vdiv.f64	d7, d9, d8
   12568:	ldr	r0, [pc, #572]	; 127ac <main@@Base+0x5f4>
   1256c:	add	r0, pc, r0
   12570:	vmov	r2, r3, d7
   12574:	bl	11f94 <printf@plt>
   12578:	vldr	d6, [pc, #448]	; 12740 <main@@Base+0x588>
   1257c:	vldr	d5, [pc, #452]	; 12748 <main@@Base+0x590>
   12580:	vmul.f64	d8, d8, d6
   12584:	vdiv.f64	d7, d8, d9
   12588:	vcmpe.f64	d7, d5
   1258c:	vmrs	APSR_nzcv, fpscr
   12590:	bmi	12700 <main@@Base+0x548>
   12594:	vcmpe.f64	d7, d10
   12598:	vmrs	APSR_nzcv, fpscr
   1259c:	bmi	126e8 <main@@Base+0x530>
   125a0:	vcmpe.f64	d7, d6
   125a4:	vmrs	APSR_nzcv, fpscr
   125a8:	bmi	126d0 <main@@Base+0x518>
   125ac:	vdiv.f64	d5, d7, d6
   125b0:	ldr	r0, [pc, #504]	; 127b0 <main@@Base+0x5f8>
   125b4:	add	r0, pc, r0
   125b8:	vmov	r2, r3, d5
   125bc:	bl	11f94 <printf@plt>
   125c0:	ldr	r0, [sp, #12]
   125c4:	bl	13448 <flatcc_builder_clear@@Base>
   125c8:	ldr	r0, [sp, #8]
   125cc:	bl	11fac <free@plt>
   125d0:	b	1225c <main@@Base+0xa4>
   125d4:	cmp	sl, #0
   125d8:	ldr	r4, [sp, #20]
   125dc:	bne	12444 <main@@Base+0x28c>
   125e0:	ldr	r3, [pc, #460]	; 127b4 <main@@Base+0x5fc>
   125e4:	ldr	r1, [pc, #460]	; 127b8 <main@@Base+0x600>
   125e8:	ldr	r0, [pc, #460]	; 127bc <main@@Base+0x604>
   125ec:	add	r3, pc, r3
   125f0:	mov	r2, #74	; 0x4a
   125f4:	add	r3, r3, #104	; 0x68
   125f8:	add	r1, pc, r1
   125fc:	add	r0, pc, r0
   12600:	bl	1206c <__assert_fail@plt>
   12604:	cmp	sl, #0
   12608:	beq	125e0 <main@@Base+0x428>
   1260c:	ldr	r3, [sl, #-4]
   12610:	cmp	r3, #700	; 0x2bc
   12614:	bne	125e0 <main@@Base+0x428>
   12618:	ldr	r3, [pc, #416]	; 127c0 <main@@Base+0x608>
   1261c:	ldr	r1, [pc, #416]	; 127c4 <main@@Base+0x60c>
   12620:	ldr	r0, [pc, #416]	; 127c8 <main@@Base+0x610>
   12624:	add	r3, pc, r3
   12628:	mov	r2, #78	; 0x4e
   1262c:	add	r3, r3, #104	; 0x68
   12630:	add	r1, pc, r1
   12634:	add	r0, pc, r0
   12638:	bl	1206c <__assert_fail@plt>
   1263c:	ldr	r0, [pc, #392]	; 127cc <main@@Base+0x614>
   12640:	mov	r2, sl
   12644:	mov	r1, fp
   12648:	add	r0, pc, r0
   1264c:	bl	11f94 <printf@plt>
   12650:	ldr	r3, [sp, #8]
   12654:	ldr	r0, [pc, #372]	; 127d0 <main@@Base+0x618>
   12658:	sub	r1, r5, r3
   1265c:	add	r0, pc, r0
   12660:	bl	11f94 <printf@plt>
   12664:	ldr	r3, [pc, #360]	; 127d4 <main@@Base+0x61c>
   12668:	ldr	r1, [pc, #360]	; 127d8 <main@@Base+0x620>
   1266c:	ldr	r0, [pc, #360]	; 127dc <main@@Base+0x624>
   12670:	add	r3, pc, r3
   12674:	mov	r2, #85	; 0x55
   12678:	add	r3, r3, #104	; 0x68
   1267c:	add	r1, pc, r1
   12680:	add	r0, pc, r0
   12684:	bl	1206c <__assert_fail@plt>
   12688:	ldr	r3, [pc, #336]	; 127e0 <main@@Base+0x628>
   1268c:	ldr	r1, [pc, #336]	; 127e4 <main@@Base+0x62c>
   12690:	ldr	r0, [pc, #336]	; 127e8 <main@@Base+0x630>
   12694:	add	r3, pc, r3
   12698:	mov	r2, #91	; 0x5b
   1269c:	add	r3, r3, #104	; 0x68
   126a0:	add	r1, pc, r1
   126a4:	add	r0, pc, r0
   126a8:	bl	1206c <__assert_fail@plt>
   126ac:	ldr	r3, [pc, #312]	; 127ec <main@@Base+0x634>
   126b0:	ldr	r1, [pc, #312]	; 127f0 <main@@Base+0x638>
   126b4:	ldr	r0, [pc, #312]	; 127f4 <main@@Base+0x63c>
   126b8:	add	r3, pc, r3
   126bc:	mov	r2, #139	; 0x8b
   126c0:	add	r3, r3, #96	; 0x60
   126c4:	add	r1, pc, r1
   126c8:	add	r0, pc, r0
   126cc:	bl	1206c <__assert_fail@plt>
   126d0:	vdiv.f64	d6, d7, d10
   126d4:	ldr	r0, [pc, #284]	; 127f8 <main@@Base+0x640>
   126d8:	add	r0, pc, r0
   126dc:	vmov	r2, r3, d6
   126e0:	bl	11f94 <printf@plt>
   126e4:	b	125c0 <main@@Base+0x408>
   126e8:	vdiv.f64	d6, d7, d5
   126ec:	ldr	r0, [pc, #264]	; 127fc <main@@Base+0x644>
   126f0:	add	r0, pc, r0
   126f4:	vmov	r2, r3, d6
   126f8:	bl	11f94 <printf@plt>
   126fc:	b	125c0 <main@@Base+0x408>
   12700:	ldr	r0, [pc, #248]	; 12800 <main@@Base+0x648>
   12704:	vmov	r2, r3, d7
   12708:	add	r0, pc, r0
   1270c:	bl	11f94 <printf@plt>
   12710:	b	125c0 <main@@Base+0x408>
   12714:	ldr	r0, [sp, #12]
   12718:	bl	13448 <flatcc_builder_clear@@Base>
   1271c:	ldr	r0, [sp, #8]
   12720:	bl	11fac <free@plt>
   12724:	mvn	r4, #0
   12728:	b	12250 <main@@Base+0x98>
   1272c:	nop			; (mov r0, r0)
   12730:	andeq	r0, r0, r0
   12734:	eormi	r0, r4, r0
   12738:	andeq	r0, r0, r0
   1273c:	smlawbmi	lr, r0, r4, r8
   12740:	andeq	r0, r0, r0
   12744:	bicmi	ip, sp, r5, ror #26
   12748:	andeq	r0, r0, r0
   1274c:	addmi	r4, pc, r0
   12750:	andeq	r5, r0, ip, asr r5
   12754:	andeq	r5, r0, r0, asr r5
   12758:			; <UNDEFINED> instruction: 0x000056b0
   1275c:	strdeq	r5, [r0], -r4
   12760:	strdeq	r5, [r0], -r8
   12764:	ldrdeq	r6, [r1], -r8
   12768:	andeq	r5, r0, r8, lsr r4
   1276c:	andeq	r5, r0, ip, lsr #8
   12770:	movtpl	r4, #61261	; 0xef4d
   12774:	andeq	r5, r0, ip, ror #2
   12778:	ldrdeq	r5, [r0], -ip
   1277c:	andeq	r5, r0, r4, ror #8
   12780:			; <UNDEFINED> instruction: 0x000002bb
   12784:	andeq	r5, r0, r8, lsl r1
   12788:	andeq	r5, r0, r0, ror #6
   1278c:	andeq	r5, r0, r0, lsr r4
   12790:	andeq	r8, r1, r0, lsr #13
   12794:	strdeq	r5, [r0], -ip
   12798:	andeq	r5, r0, r4, lsr #6
   1279c:	andeq	r5, r0, r8, lsl r3
   127a0:	andeq	r5, r0, ip, lsl r3
   127a4:	andeq	r5, r0, ip, lsl r3
   127a8:	andeq	r5, r0, r0, lsr #6
   127ac:	andeq	r5, r0, r4, lsl r3
   127b0:	andeq	r5, r0, r8, lsr r3
   127b4:	andeq	r4, r0, r0, lsr #29
   127b8:	andeq	r5, r0, r8, ror #1
   127bc:	strdeq	r5, [r0], -r4
   127c0:	andeq	r4, r0, r8, ror #28
   127c4:	strheq	r5, [r0], -r0
   127c8:			; <UNDEFINED> instruction: 0x00005abc
   127cc:	andeq	r5, r0, r8, ror r1
   127d0:	andeq	r5, r0, r4, lsl #3
   127d4:	andeq	r4, r0, ip, lsl lr
   127d8:	andeq	r5, r0, r4, rrx
   127dc:	andeq	r5, r0, r0, ror sl
   127e0:	strdeq	r4, [r0], -r8
   127e4:	andeq	r5, r0, r0, asr #32
   127e8:	andeq	r5, r0, ip, asr #20
   127ec:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   127f0:	andeq	r5, r0, ip, lsl r0
   127f4:	andeq	r5, r0, ip, ror #1
   127f8:	strdeq	r5, [r0], -ip
   127fc:	andeq	r5, r0, ip, asr #3
   12800:	muleq	r0, ip, r1

00012804 <_start@@Base>:
   12804:	mov	fp, #0
   12808:	mov	lr, #0
   1280c:	pop	{r1}		; (ldr r1, [sp], #4)
   12810:	mov	r2, sp
   12814:	push	{r2}		; (str r2, [sp, #-4]!)
   12818:	push	{r0}		; (str r0, [sp, #-4]!)
   1281c:	ldr	ip, [pc, #16]	; 12834 <_start@@Base+0x30>
   12820:	push	{ip}		; (str ip, [sp, #-4]!)
   12824:	ldr	r0, [pc, #12]	; 12838 <_start@@Base+0x34>
   12828:	ldr	r3, [pc, #12]	; 1283c <_start@@Base+0x38>
   1282c:	bl	1200c <__libc_start_main@plt>
   12830:	bl	12060 <abort@plt>
   12834:	andeq	r7, r1, r4, lsl #9
   12838:			; <UNDEFINED> instruction: 0x000121b8
   1283c:	andeq	r7, r1, r4, lsr #8
   12840:	ldr	r3, [pc, #20]	; 1285c <_start@@Base+0x58>
   12844:	ldr	r2, [pc, #20]	; 12860 <_start@@Base+0x5c>
   12848:	add	r3, pc, r3
   1284c:	ldr	r2, [r3, r2]
   12850:	cmp	r2, #0
   12854:	bxeq	lr
   12858:	b	12018 <__gmon_start__@plt>
   1285c:			; <UNDEFINED> instruction: 0x000167b0
   12860:	andeq	r0, r0, r0, rrx
   12864:	ldr	r3, [pc, #28]	; 12888 <_start@@Base+0x84>
   12868:	ldr	r0, [pc, #28]	; 1288c <_start@@Base+0x88>
   1286c:	sub	r3, r3, r0
   12870:	cmp	r3, #6
   12874:	bxls	lr
   12878:	ldr	r3, [pc, #16]	; 12890 <_start@@Base+0x8c>
   1287c:	cmp	r3, #0
   12880:	bxeq	lr
   12884:	bx	r3
   12888:	andeq	r9, r2, r7, ror r0
   1288c:	andeq	r9, r2, r4, ror r0
   12890:	andeq	r0, r0, r0
   12894:	ldr	r1, [pc, #36]	; 128c0 <_start@@Base+0xbc>
   12898:	ldr	r0, [pc, #36]	; 128c4 <_start@@Base+0xc0>
   1289c:	sub	r1, r1, r0
   128a0:	asr	r1, r1, #2
   128a4:	add	r1, r1, r1, lsr #31
   128a8:	asrs	r1, r1, #1
   128ac:	bxeq	lr
   128b0:	ldr	r3, [pc, #16]	; 128c8 <_start@@Base+0xc4>
   128b4:	cmp	r3, #0
   128b8:	bxeq	lr
   128bc:	bx	r3
   128c0:	andeq	r9, r2, r4, ror r0
   128c4:	andeq	r9, r2, r4, ror r0
   128c8:	andeq	r0, r0, r0
   128cc:	push	{r4, lr}
   128d0:	ldr	r4, [pc, #24]	; 128f0 <_start@@Base+0xec>
   128d4:	ldrb	r3, [r4]
   128d8:	cmp	r3, #0
   128dc:	popne	{r4, pc}
   128e0:	bl	12864 <_start@@Base+0x60>
   128e4:	mov	r3, #1
   128e8:	strb	r3, [r4]
   128ec:	pop	{r4, pc}
   128f0:	andeq	r9, r2, r4, ror r0
   128f4:	ldr	r0, [pc, #40]	; 12924 <_start@@Base+0x120>
   128f8:	ldr	r3, [r0]
   128fc:	cmp	r3, #0
   12900:	bne	12908 <_start@@Base+0x104>
   12904:	b	12894 <_start@@Base+0x90>
   12908:	ldr	r3, [pc, #24]	; 12928 <_start@@Base+0x124>
   1290c:	cmp	r3, #0
   12910:	beq	12904 <_start@@Base+0x100>
   12914:	push	{r4, lr}
   12918:	blx	r3
   1291c:	pop	{r4, lr}
   12920:	b	12894 <_start@@Base+0x90>
   12924:	andeq	r8, r2, r4, lsl pc
	...
   12930:	push	{r4, lr}
   12934:	sub	sp, sp, #8
   12938:	mov	r1, #0
   1293c:	mov	r0, sp
   12940:	bl	11fe8 <gettimeofday@plt>
   12944:	ldr	r3, [pc, #100]	; 129b0 <_start@@Base+0x1ac>
   12948:	vldr	d5, [pc, #88]	; 129a8 <_start@@Base+0x1a4>
   1294c:	add	r3, pc, r3
   12950:	ldr	r2, [r3]
   12954:	cmp	r2, #0
   12958:	moveq	r4, sp
   1295c:	ldr	r2, [sp, #4]
   12960:	ldmeq	r4, {r0, r1}
   12964:	stmeq	r3, {r0, r1}
   12968:	ldr	r3, [pc, #68]	; 129b4 <_start@@Base+0x1b0>
   1296c:	add	r3, pc, r3
   12970:	ldr	r0, [r3, #4]
   12974:	ldr	r1, [r3]
   12978:	sub	r2, r2, r0
   1297c:	ldr	r3, [sp]
   12980:	vmov	s15, r2
   12984:	sub	r3, r3, r1
   12988:	vmov	s0, r3
   1298c:	vcvt.f64.s32	d7, s15
   12990:	vcvt.f64.s32	d0, s0
   12994:	vdiv.f64	d6, d7, d5
   12998:	vadd.f64	d0, d6, d0
   1299c:	add	sp, sp, #8
   129a0:	pop	{r4, pc}
   129a4:	nop			; (mov r0, r0)
   129a8:	andeq	r0, r0, r0
   129ac:	smlawbmi	lr, r0, r4, r8
   129b0:	andeq	r6, r1, r4, lsr #14
   129b4:	andeq	r6, r1, r4, lsl #14
   129b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129bc:	sub	sp, sp, #12
   129c0:	mov	r4, r0
   129c4:	bl	1343c <flatcc_builder_reset@@Base>
   129c8:	ldr	r1, [pc, #536]	; 12be8 <_start@@Base+0x3e4>
   129cc:	mov	r3, #0
   129d0:	mov	r0, r4
   129d4:	mov	r2, r3
   129d8:	add	r1, pc, r1
   129dc:	bl	13c00 <flatcc_builder_start_buffer@@Base>
   129e0:	cmp	r0, #0
   129e4:	bne	129f4 <_start@@Base+0x1f0>
   129e8:	mov	r1, #36	; 0x24
   129ec:	mov	r0, r4
   129f0:	bl	14a38 <flatcc_builder_start_table@@Base>
   129f4:	ldr	r1, [pc, #496]	; 12bec <_start@@Base+0x3e8>
   129f8:	mov	r0, r4
   129fc:	add	r1, pc, r1
   12a00:	bl	162dc <flatcc_builder_create_string_str@@Base>
   12a04:	subs	r5, r0, #0
   12a08:	beq	12a20 <_start@@Base+0x21c>
   12a0c:	mov	r1, #3
   12a10:	mov	r0, r4
   12a14:	bl	16698 <flatcc_builder_table_add_offset@@Base>
   12a18:	cmp	r0, #0
   12a1c:	strne	r5, [r0]
   12a20:	mov	r0, r4
   12a24:	ldr	r6, [pc, #452]	; 12bf0 <_start@@Base+0x3ec>
   12a28:	bl	14850 <flatcc_builder_start_offset_vector@@Base>
   12a2c:	ldr	r8, [pc, #448]	; 12bf4 <_start@@Base+0x3f0>
   12a30:	ldr	r3, [pc, #448]	; 12bf8 <_start@@Base+0x3f4>
   12a34:	add	r6, pc, r6
   12a38:	add	r3, pc, r3
   12a3c:	add	r8, pc, r8
   12a40:	add	r6, r6, #8
   12a44:	mov	r9, #1000	; 0x3e8
   12a48:	mov	r7, #7
   12a4c:	mov	sl, #1
   12a50:	str	r3, [sp, #4]
   12a54:	add	r3, r3, #56	; 0x38
   12a58:	str	r3, [sp]
   12a5c:	mov	r1, #36	; 0x24
   12a60:	mov	r0, r4
   12a64:	bl	14a38 <flatcc_builder_start_table@@Base>
   12a68:	mov	r0, r4
   12a6c:	bl	148b8 <flatcc_builder_start_string@@Base>
   12a70:	mov	r5, #100	; 0x64
   12a74:	mov	r2, r7
   12a78:	mov	r1, r8
   12a7c:	mov	r0, r4
   12a80:	bl	14488 <flatcc_builder_append_string@@Base>
   12a84:	subs	r5, r5, #1
   12a88:	bne	12a74 <_start@@Base+0x270>
   12a8c:	mov	r0, r4
   12a90:	bl	1633c <flatcc_builder_end_string@@Base>
   12a94:	subs	r5, r0, #0
   12a98:	beq	12ab0 <_start@@Base+0x2ac>
   12a9c:	mov	r1, #3
   12aa0:	mov	r0, r4
   12aa4:	bl	16698 <flatcc_builder_table_add_offset@@Base>
   12aa8:	cmp	r0, #0
   12aac:	strne	r5, [r0]
   12ab0:	mvn	r3, #0
   12ab4:	mov	r2, sl
   12ab8:	mov	r1, #1
   12abc:	mov	r0, r4
   12ac0:	bl	147d8 <flatcc_builder_start_vector@@Base>
   12ac4:	mov	fp, #100	; 0x64
   12ac8:	mov	r5, #1000	; 0x3e8
   12acc:	mov	r2, r5
   12ad0:	mov	r1, r6
   12ad4:	mov	r0, r4
   12ad8:	bl	14100 <flatcc_builder_append_vector@@Base>
   12adc:	subs	fp, fp, #1
   12ae0:	bne	12acc <_start@@Base+0x2c8>
   12ae4:	mov	r0, r4
   12ae8:	bl	15774 <flatcc_builder_end_vector@@Base>
   12aec:	subs	r5, r0, #0
   12af0:	beq	12b08 <_start@@Base+0x304>
   12af4:	mov	r1, #5
   12af8:	mov	r0, r4
   12afc:	bl	16698 <flatcc_builder_table_add_offset@@Base>
   12b00:	cmp	r0, #0
   12b04:	strne	r5, [r0]
   12b08:	mov	r2, sl
   12b0c:	ldr	r1, [sp]
   12b10:	mov	r0, r4
   12b14:	bl	15384 <flatcc_builder_check_required@@Base>
   12b18:	cmp	r0, #0
   12b1c:	beq	12bc4 <_start@@Base+0x3c0>
   12b20:	mov	r0, r4
   12b24:	bl	1542c <flatcc_builder_end_table@@Base>
   12b28:	subs	r1, r0, #0
   12b2c:	beq	12ba4 <_start@@Base+0x3a0>
   12b30:	mov	r0, r4
   12b34:	bl	14260 <flatcc_builder_offset_vector_push@@Base>
   12b38:	subs	r9, r9, #1
   12b3c:	bne	12a5c <_start@@Base+0x258>
   12b40:	mov	r0, r4
   12b44:	bl	1589c <flatcc_builder_end_offset_vector@@Base>
   12b48:	subs	r5, r0, #0
   12b4c:	beq	12bc8 <_start@@Base+0x3c4>
   12b50:	mov	r1, #11
   12b54:	mov	r0, r4
   12b58:	bl	16698 <flatcc_builder_table_add_offset@@Base>
   12b5c:	ldr	r1, [pc, #152]	; 12bfc <_start@@Base+0x3f8>
   12b60:	mov	r2, #1
   12b64:	add	r1, pc, r1
   12b68:	add	r1, r1, #56	; 0x38
   12b6c:	cmp	r0, #0
   12b70:	strne	r5, [r0]
   12b74:	mov	r0, r4
   12b78:	bl	15384 <flatcc_builder_check_required@@Base>
   12b7c:	cmp	r0, #0
   12b80:	beq	12bc4 <_start@@Base+0x3c0>
   12b84:	mov	r0, r4
   12b88:	bl	1542c <flatcc_builder_end_table@@Base>
   12b8c:	mov	r1, r0
   12b90:	mov	r0, r4
   12b94:	bl	13cb8 <flatcc_builder_end_buffer@@Base>
   12b98:	mov	r0, #0
   12b9c:	add	sp, sp, #12
   12ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ba4:	ldr	r3, [sp, #4]
   12ba8:	ldr	r1, [pc, #80]	; 12c00 <_start@@Base+0x3fc>
   12bac:	ldr	r0, [pc, #80]	; 12c04 <_start@@Base+0x400>
   12bb0:	add	r3, r3, #60	; 0x3c
   12bb4:	mov	r2, #42	; 0x2a
   12bb8:	add	r1, pc, r1
   12bbc:	add	r0, pc, r0
   12bc0:	bl	1206c <__assert_fail@plt>
   12bc4:	bl	120ac <__assert_fail@plt+0x40>
   12bc8:	ldr	r3, [sp, #4]
   12bcc:	ldr	r1, [pc, #52]	; 12c08 <_start@@Base+0x404>
   12bd0:	ldr	r0, [pc, #52]	; 12c0c <_start@@Base+0x408>
   12bd4:	add	r3, r3, #76	; 0x4c
   12bd8:	mov	r2, #56	; 0x38
   12bdc:	add	r1, pc, r1
   12be0:	add	r0, pc, r0
   12be4:	bl	1206c <__assert_fail@plt>
   12be8:	andeq	r4, r0, r8, ror #25
   12bec:	andeq	r4, r0, ip, asr #25
   12bf0:	andeq	r6, r1, ip, lsr r6
   12bf4:	muleq	r0, ip, ip
   12bf8:	andeq	r4, r0, r4, asr sl
   12bfc:	andeq	r4, r0, r8, lsr #18
   12c00:	andeq	r4, r0, r8, lsr #22
   12c04:	andeq	r4, r0, r8, lsl #23
   12c08:	andeq	r4, r0, r4, lsl #22
   12c0c:	andeq	r4, r0, r8, ror #22
   12c10:	push	{r4, r5, r6, lr}
   12c14:	mov	r4, r0
   12c18:	ldr	ip, [r0, #28]
   12c1c:	sub	sp, sp, #8
   12c20:	mov	r3, #1
   12c24:	ldr	r0, [r0, #40]	; 0x28
   12c28:	ldr	r6, [r4, #48]	; 0x30
   12c2c:	mov	r5, r2
   12c30:	str	r3, [sp]
   12c34:	add	r2, r1, ip
   12c38:	add	r1, r4, #60	; 0x3c
   12c3c:	blx	r6
   12c40:	cmp	r0, #0
   12c44:	bne	12c7c <_start@@Base+0x478>
   12c48:	ldr	r1, [r4, #28]
   12c4c:	ldr	r3, [r4, #64]	; 0x40
   12c50:	ldr	r2, [r4, #60]	; 0x3c
   12c54:	sub	r3, r3, r1
   12c58:	ldr	ip, [r4, #32]
   12c5c:	cmp	r3, r5
   12c60:	movcs	r3, r5
   12c64:	add	r2, r2, r1
   12c68:	str	r3, [r4, #24]
   12c6c:	str	r2, [r4, #16]
   12c70:	str	r5, [ip, #4]
   12c74:	add	sp, sp, #8
   12c78:	pop	{r4, r5, r6, pc}
   12c7c:	mvn	r0, #0
   12c80:	b	12c74 <_start@@Base+0x470>

00012c84 <flatcc_builder_default_alloc@@Base>:
   12c84:	push	{r4, r5, r6, r7, r8, lr}
   12c88:	subs	r5, r2, #0
   12c8c:	mov	r6, r1
   12c90:	bne	12cb4 <flatcc_builder_default_alloc@@Base+0x30>
   12c94:	ldr	r0, [r1]
   12c98:	cmp	r0, #0
   12c9c:	popeq	{r4, r5, r6, r7, r8, pc}
   12ca0:	bl	11fac <free@plt>
   12ca4:	str	r5, [r6]
   12ca8:	str	r5, [r6, #4]
   12cac:	mov	r0, r5
   12cb0:	pop	{r4, r5, r6, r7, r8, pc}
   12cb4:	mov	r7, r3
   12cb8:	ldr	r3, [sp, #24]
   12cbc:	sub	r2, r3, #1
   12cc0:	cmp	r2, #6
   12cc4:	addls	pc, pc, r2, lsl #2
   12cc8:	b	12d64 <flatcc_builder_default_alloc@@Base+0xe0>
   12ccc:	b	12d38 <flatcc_builder_default_alloc@@Base+0xb4>
   12cd0:	b	12d64 <flatcc_builder_default_alloc@@Base+0xe0>
   12cd4:	b	12d64 <flatcc_builder_default_alloc@@Base+0xe0>
   12cd8:	b	12d5c <flatcc_builder_default_alloc@@Base+0xd8>
   12cdc:	b	12ce8 <flatcc_builder_default_alloc@@Base+0x64>
   12ce0:	b	12d64 <flatcc_builder_default_alloc@@Base+0xe0>
   12ce4:	b	12d54 <flatcc_builder_default_alloc@@Base+0xd0>
   12ce8:	mov	r4, r5
   12cec:	ldr	r3, [r6, #4]
   12cf0:	cmp	r5, r3
   12cf4:	bhi	12d00 <flatcc_builder_default_alloc@@Base+0x7c>
   12cf8:	cmp	r4, r3, lsr #1
   12cfc:	bls	12d6c <flatcc_builder_default_alloc@@Base+0xe8>
   12d00:	mov	r1, r4
   12d04:	ldr	r0, [r6]
   12d08:	bl	11fd0 <realloc@plt>
   12d0c:	subs	r5, r0, #0
   12d10:	beq	12d88 <flatcc_builder_default_alloc@@Base+0x104>
   12d14:	cmp	r7, #0
   12d18:	beq	12d28 <flatcc_builder_default_alloc@@Base+0xa4>
   12d1c:	ldr	r0, [r6, #4]
   12d20:	cmp	r0, r4
   12d24:	bcc	12d74 <flatcc_builder_default_alloc@@Base+0xf0>
   12d28:	str	r5, [r6]
   12d2c:	str	r4, [r6, #4]
   12d30:	mov	r0, #0
   12d34:	pop	{r4, r5, r6, r7, r8, pc}
   12d38:	mov	r4, #256	; 0x100
   12d3c:	cmp	r5, r4
   12d40:	bls	12cec <flatcc_builder_default_alloc@@Base+0x68>
   12d44:	lsl	r4, r4, #1
   12d48:	cmp	r5, r4
   12d4c:	bhi	12d44 <flatcc_builder_default_alloc@@Base+0xc0>
   12d50:	b	12cec <flatcc_builder_default_alloc@@Base+0x68>
   12d54:	mov	r4, #64	; 0x40
   12d58:	b	12d3c <flatcc_builder_default_alloc@@Base+0xb8>
   12d5c:	mov	r4, #288	; 0x120
   12d60:	b	12d3c <flatcc_builder_default_alloc@@Base+0xb8>
   12d64:	mov	r4, #32
   12d68:	b	12d3c <flatcc_builder_default_alloc@@Base+0xb8>
   12d6c:	mov	r0, #0
   12d70:	pop	{r4, r5, r6, r7, r8, pc}
   12d74:	sub	r2, r4, r0
   12d78:	mov	r1, #0
   12d7c:	add	r0, r5, r0
   12d80:	bl	1203c <memset@plt>
   12d84:	b	12d28 <flatcc_builder_default_alloc@@Base+0xa4>
   12d88:	mvn	r0, #0
   12d8c:	pop	{r4, r5, r6, r7, r8, pc}
   12d90:	push	{r4, r5, lr}
   12d94:	cmp	r2, #0
   12d98:	ldr	lr, [pc, #248]	; 12e98 <flatcc_builder_default_alloc@@Base+0x214>
   12d9c:	sub	sp, sp, #84	; 0x54
   12da0:	mov	ip, r0
   12da4:	add	lr, pc, lr
   12da8:	bne	12db8 <flatcc_builder_default_alloc@@Base+0x134>
   12dac:	ldrh	r2, [r0, #132]	; 0x84
   12db0:	cmp	r2, #0
   12db4:	moveq	r2, #1
   12db8:	ldrh	r0, [r1]
   12dbc:	cmp	r0, #3
   12dc0:	movls	r4, #4
   12dc4:	movls	r0, r4
   12dc8:	strhls	r4, [r1]
   12dcc:	cmp	r2, r0
   12dd0:	strhhi	r2, [r1]
   12dd4:	cmp	r3, #0
   12dd8:	bne	12dec <flatcc_builder_default_alloc@@Base+0x168>
   12ddc:	ldr	r4, [ip, #140]	; 0x8c
   12de0:	sub	r2, r2, #1
   12de4:	ands	r3, r2, r4
   12de8:	bne	12df8 <flatcc_builder_default_alloc@@Base+0x174>
   12dec:	mov	r0, #0
   12df0:	add	sp, sp, #84	; 0x54
   12df4:	pop	{r4, r5, pc}
   12df8:	ldr	r2, [pc, #156]	; 12e9c <flatcc_builder_default_alloc@@Base+0x218>
   12dfc:	add	r1, r4, r3
   12e00:	str	r3, [sp, #8]
   12e04:	ldr	r0, [lr, r2]
   12e08:	cmp	r4, r1
   12e0c:	mov	r2, #1
   12e10:	str	r0, [sp, #16]
   12e14:	str	r3, [sp, #20]
   12e18:	str	r1, [ip, #140]	; 0x8c
   12e1c:	str	r2, [sp, #12]
   12e20:	bgt	12e70 <flatcc_builder_default_alloc@@Base+0x1ec>
   12e24:	ldr	r0, [ip, #36]	; 0x24
   12e28:	add	r1, sp, #16
   12e2c:	str	r3, [sp]
   12e30:	mov	r3, r4
   12e34:	ldr	r5, [ip, #44]	; 0x2c
   12e38:	blx	r5
   12e3c:	cmp	r0, #0
   12e40:	bne	12e74 <flatcc_builder_default_alloc@@Base+0x1f0>
   12e44:	cmn	r4, #1
   12e48:	bne	12dec <flatcc_builder_default_alloc@@Base+0x168>
   12e4c:	ldr	r3, [pc, #76]	; 12ea0 <flatcc_builder_default_alloc@@Base+0x21c>
   12e50:	ldr	r1, [pc, #76]	; 12ea4 <flatcc_builder_default_alloc@@Base+0x220>
   12e54:	ldr	r0, [pc, #76]	; 12ea8 <flatcc_builder_default_alloc@@Base+0x224>
   12e58:	add	r3, pc, r3
   12e5c:	ldr	r2, [pc, #72]	; 12eac <flatcc_builder_default_alloc@@Base+0x228>
   12e60:	add	r3, r3, #60	; 0x3c
   12e64:	add	r1, pc, r1
   12e68:	add	r0, pc, r0
   12e6c:	bl	1206c <__assert_fail@plt>
   12e70:	bl	12110 <__assert_fail@plt+0xa4>
   12e74:	ldr	r3, [pc, #52]	; 12eb0 <flatcc_builder_default_alloc@@Base+0x22c>
   12e78:	ldr	r1, [pc, #52]	; 12eb4 <flatcc_builder_default_alloc@@Base+0x230>
   12e7c:	ldr	r0, [pc, #52]	; 12eb8 <flatcc_builder_default_alloc@@Base+0x234>
   12e80:	add	r3, pc, r3
   12e84:	ldr	r2, [pc, #48]	; 12ebc <flatcc_builder_default_alloc@@Base+0x238>
   12e88:	add	r3, r3, #16
   12e8c:	add	r1, pc, r1
   12e90:	add	r0, pc, r0
   12e94:	bl	1206c <__assert_fail@plt>
   12e98:	andeq	r6, r1, r4, asr r2
   12e9c:	andeq	r0, r0, ip, asr r0
   12ea0:	andeq	r4, r0, r0, asr #21
   12ea4:	andeq	r5, r0, r4, lsl #4
   12ea8:	andeq	r5, r0, r8, lsl #5
   12eac:			; <UNDEFINED> instruction: 0x000002be
   12eb0:	muleq	r0, r8, sl
   12eb4:	ldrdeq	r5, [r0], -ip
   12eb8:	andeq	r5, r0, r0, ror #4
   12ebc:	andeq	r0, r0, r5, lsr #5
   12ec0:	push	{r4, r5, r6, r7, lr}
   12ec4:	mov	r5, r1
   12ec8:	ldr	r1, [r0, #156]	; 0x9c
   12ecc:	ldr	r3, [r0, #160]	; 0xa0
   12ed0:	add	r2, r1, #1
   12ed4:	cmp	r2, r3
   12ed8:	sub	sp, sp, #12
   12edc:	mov	r4, r0
   12ee0:	str	r2, [r0, #156]	; 0x9c
   12ee4:	ble	12f54 <flatcc_builder_default_alloc@@Base+0x2d0>
   12ee8:	ldr	r3, [r0, #176]	; 0xb0
   12eec:	cmp	r3, #0
   12ef0:	cmpgt	r2, r3
   12ef4:	movgt	r3, #1
   12ef8:	movle	r3, #0
   12efc:	bgt	12fc8 <flatcc_builder_default_alloc@@Base+0x344>
   12f00:	add	r1, r1, r1, lsl #3
   12f04:	ldr	r0, [r0, #88]	; 0x58
   12f08:	lsl	r6, r1, #2
   12f0c:	add	r2, r6, #36	; 0x24
   12f10:	cmp	r2, r0
   12f14:	bhi	12fa4 <flatcc_builder_default_alloc@@Base+0x320>
   12f18:	ldr	r3, [r4, #84]	; 0x54
   12f1c:	add	r3, r3, r6
   12f20:	cmp	r3, #0
   12f24:	str	r3, [r4, #32]
   12f28:	beq	12fc8 <flatcc_builder_default_alloc@@Base+0x344>
   12f2c:	ldr	r2, [r4, #88]	; 0x58
   12f30:	ldr	r0, [pc, #152]	; 12fd0 <flatcc_builder_default_alloc@@Base+0x34c>
   12f34:	ldr	r1, [r4, #176]	; 0xb0
   12f38:	umull	r0, r2, r0, r2
   12f3c:	lsr	r2, r2, #3
   12f40:	cmp	r1, #0
   12f44:	cmpgt	r2, r1
   12f48:	str	r2, [r4, #160]	; 0xa0
   12f4c:	strgt	r1, [r4, #160]	; 0xa0
   12f50:	b	12f60 <flatcc_builder_default_alloc@@Base+0x2dc>
   12f54:	ldr	r3, [r0, #32]
   12f58:	add	r3, r3, #36	; 0x24
   12f5c:	str	r3, [r0, #32]
   12f60:	ldr	r0, [r4, #20]
   12f64:	ldr	ip, [r4, #28]
   12f68:	ldrh	lr, [r4, #130]	; 0x82
   12f6c:	add	r2, r0, ip
   12f70:	mov	r1, #0
   12f74:	str	r0, [r3, #8]
   12f78:	strh	lr, [r3, #12]
   12f7c:	add	r2, r2, #7
   12f80:	mvn	lr, #3
   12f84:	mov	r0, r1
   12f88:	bic	r2, r2, #7
   12f8c:	strh	r5, [r4, #130]	; 0x82
   12f90:	stm	r3, {ip, lr}
   12f94:	str	r2, [r4, #28]
   12f98:	str	r1, [r4, #20]
   12f9c:	add	sp, sp, #12
   12fa0:	pop	{r4, r5, r6, r7, pc}
   12fa4:	mov	r1, #4
   12fa8:	ldr	r0, [r4, #40]	; 0x28
   12fac:	str	r1, [sp]
   12fb0:	add	r1, r4, #84	; 0x54
   12fb4:	ldr	r7, [r4, #48]	; 0x30
   12fb8:	blx	r7
   12fbc:	cmp	r0, #0
   12fc0:	beq	12f18 <flatcc_builder_default_alloc@@Base+0x294>
   12fc4:	bl	120e0 <__assert_fail@plt+0x74>
   12fc8:	mvn	r0, #0
   12fcc:	b	12f9c <flatcc_builder_default_alloc@@Base+0x318>
   12fd0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   12fd4:	push	{r4, r5, r6, r7, lr}
   12fd8:	mov	r5, r0
   12fdc:	ldrh	r0, [r0, #128]	; 0x80
   12fe0:	sub	sp, sp, #92	; 0x5c
   12fe4:	add	ip, sp, #12
   12fe8:	cmp	r0, #3
   12fec:	movls	r0, #4
   12ff0:	strhls	r0, [r5, #128]	; 0x80
   12ff4:	ldr	r4, [pc, #448]	; 131bc <flatcc_builder_default_alloc@@Base+0x538>
   12ff8:	ldr	r0, [r5, #136]	; 0x88
   12ffc:	mov	r7, #4
   13000:	mov	r6, #1
   13004:	str	ip, [sp, #24]
   13008:	lsls	ip, r2, #2
   1300c:	add	r4, pc, r4
   13010:	str	r2, [sp, #12]
   13014:	and	lr, r0, #3
   13018:	str	r7, [sp, #16]
   1301c:	str	r7, [sp, #28]
   13020:	str	r6, [sp, #20]
   13024:	beq	13040 <flatcc_builder_default_alloc@@Base+0x3bc>
   13028:	add	r7, ip, r7
   1302c:	mov	r6, #2
   13030:	str	r1, [sp, #32]
   13034:	str	ip, [sp, #36]	; 0x24
   13038:	str	r7, [sp, #16]
   1303c:	str	r6, [sp, #20]
   13040:	cmp	lr, #0
   13044:	beq	13074 <flatcc_builder_default_alloc@@Base+0x3f0>
   13048:	ldr	ip, [sp, #20]
   1304c:	ldr	r6, [pc, #364]	; 131c0 <flatcc_builder_default_alloc@@Base+0x53c>
   13050:	add	ip, ip, #1
   13054:	add	r7, r7, lr
   13058:	str	r7, [sp, #16]
   1305c:	ldr	r6, [r4, r6]
   13060:	add	r4, sp, #88	; 0x58
   13064:	add	r4, r4, ip, lsl #3
   13068:	str	ip, [sp, #20]
   1306c:	str	r6, [r4, #-72]	; 0xffffffb8
   13070:	str	lr, [r4, #-68]	; 0xffffffbc
   13074:	cmp	r2, #0
   13078:	sub	r4, r0, r7
   1307c:	beq	13110 <flatcc_builder_default_alloc@@Base+0x48c>
   13080:	add	r6, r3, r2
   13084:	mvn	ip, #3
   13088:	mov	r2, r3
   1308c:	b	130c4 <flatcc_builder_default_alloc@@Base+0x440>
   13090:	sub	r0, ip, r4
   13094:	add	r0, r0, lr
   13098:	cmp	r3, #0
   1309c:	str	r0, [r1]
   130a0:	beq	130b0 <flatcc_builder_default_alloc@@Base+0x42c>
   130a4:	ldrb	r0, [r2]
   130a8:	cmp	r0, #0
   130ac:	beq	13170 <flatcc_builder_default_alloc@@Base+0x4ec>
   130b0:	add	r2, r2, #1
   130b4:	cmp	r2, r6
   130b8:	add	r1, r1, #4
   130bc:	sub	ip, ip, #4
   130c0:	beq	13108 <flatcc_builder_default_alloc@@Base+0x484>
   130c4:	ldr	lr, [r1]
   130c8:	cmp	lr, #0
   130cc:	bne	13090 <flatcc_builder_default_alloc@@Base+0x40c>
   130d0:	cmp	r3, #0
   130d4:	beq	1314c <flatcc_builder_default_alloc@@Base+0x4c8>
   130d8:	ldrb	r0, [r2]
   130dc:	cmp	r0, #0
   130e0:	beq	130b0 <flatcc_builder_default_alloc@@Base+0x42c>
   130e4:	ldr	r3, [pc, #216]	; 131c4 <flatcc_builder_default_alloc@@Base+0x540>
   130e8:	ldr	r1, [pc, #216]	; 131c8 <flatcc_builder_default_alloc@@Base+0x544>
   130ec:	ldr	r0, [pc, #216]	; 131cc <flatcc_builder_default_alloc@@Base+0x548>
   130f0:	add	r3, pc, r3
   130f4:	ldr	r2, [pc, #212]	; 131d0 <flatcc_builder_default_alloc@@Base+0x54c>
   130f8:	add	r3, r3, #76	; 0x4c
   130fc:	add	r1, pc, r1
   13100:	add	r0, pc, r0
   13104:	bl	1206c <__assert_fail@plt>
   13108:	ldr	r0, [r5, #136]	; 0x88
   1310c:	sub	r4, r0, r7
   13110:	cmp	r4, r0
   13114:	bge	131b8 <flatcc_builder_default_alloc@@Base+0x534>
   13118:	ldr	r0, [r5, #36]	; 0x24
   1311c:	ldr	r2, [sp, #20]
   13120:	str	r7, [sp]
   13124:	mov	r3, r4
   13128:	ldr	r6, [r5, #44]	; 0x2c
   1312c:	add	r1, sp, #24
   13130:	blx	r6
   13134:	cmp	r0, #0
   13138:	bne	13194 <flatcc_builder_default_alloc@@Base+0x510>
   1313c:	mov	r0, r4
   13140:	str	r4, [r5, #136]	; 0x88
   13144:	add	sp, sp, #92	; 0x5c
   13148:	pop	{r4, r5, r6, r7, pc}
   1314c:	ldr	r3, [pc, #128]	; 131d4 <flatcc_builder_default_alloc@@Base+0x550>
   13150:	ldr	r1, [pc, #128]	; 131d8 <flatcc_builder_default_alloc@@Base+0x554>
   13154:	ldr	r0, [pc, #128]	; 131dc <flatcc_builder_default_alloc@@Base+0x558>
   13158:	add	r3, pc, r3
   1315c:	ldr	r2, [pc, #124]	; 131e0 <flatcc_builder_default_alloc@@Base+0x55c>
   13160:	add	r3, r3, #76	; 0x4c
   13164:	add	r1, pc, r1
   13168:	add	r0, pc, r0
   1316c:	bl	1206c <__assert_fail@plt>
   13170:	ldr	r3, [pc, #108]	; 131e4 <flatcc_builder_default_alloc@@Base+0x560>
   13174:	ldr	r1, [pc, #108]	; 131e8 <flatcc_builder_default_alloc@@Base+0x564>
   13178:	ldr	r0, [pc, #108]	; 131ec <flatcc_builder_default_alloc@@Base+0x568>
   1317c:	add	r3, pc, r3
   13180:	ldr	r2, [pc, #104]	; 131f0 <flatcc_builder_default_alloc@@Base+0x56c>
   13184:	add	r3, r3, #76	; 0x4c
   13188:	add	r1, pc, r1
   1318c:	add	r0, pc, r0
   13190:	bl	1206c <__assert_fail@plt>
   13194:	ldr	r3, [pc, #88]	; 131f4 <flatcc_builder_default_alloc@@Base+0x570>
   13198:	ldr	r1, [pc, #88]	; 131f8 <flatcc_builder_default_alloc@@Base+0x574>
   1319c:	ldr	r0, [pc, #88]	; 131fc <flatcc_builder_default_alloc@@Base+0x578>
   131a0:	add	r3, pc, r3
   131a4:	ldr	r2, [pc, #84]	; 13200 <flatcc_builder_default_alloc@@Base+0x57c>
   131a8:	add	r3, r3, #28
   131ac:	add	r1, pc, r1
   131b0:	add	r0, pc, r0
   131b4:	bl	1206c <__assert_fail@plt>
   131b8:	bl	12148 <__assert_fail@plt+0xdc>
   131bc:	andeq	r5, r1, ip, ror #31
   131c0:	andeq	r0, r0, ip, asr r0
   131c4:	andeq	r4, r0, r8, lsr #16
   131c8:	andeq	r4, r0, ip, ror #30
   131cc:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   131d0:			; <UNDEFINED> instruction: 0x000005b5
   131d4:	andeq	r4, r0, r0, asr #15
   131d8:	andeq	r4, r0, r4, lsl #30
   131dc:	andeq	r4, r0, r8, lsl #31
   131e0:			; <UNDEFINED> instruction: 0x000005b7
   131e4:	muleq	r0, ip, r7
   131e8:	andeq	r4, r0, r0, ror #29
   131ec:	andeq	r4, r0, r8, asr pc
   131f0:			; <UNDEFINED> instruction: 0x000005b1
   131f4:	andeq	r4, r0, r8, ror r7
   131f8:			; <UNDEFINED> instruction: 0x00004ebc
   131fc:	andeq	r4, r0, r0, asr #30
   13200:	andeq	r0, r0, fp, lsl #5

00013204 <flatcc_builder_flush_vtable_cache@@Base>:
   13204:	ldr	r3, [r0, #116]	; 0x74
   13208:	cmp	r3, #0
   1320c:	bxeq	lr
   13210:	ldr	r2, [r0, #96]	; 0x60
   13214:	push	{r4, lr}
   13218:	mov	r1, #0
   1321c:	mov	r4, r0
   13220:	ldr	r0, [r0, #92]	; 0x5c
   13224:	bl	1203c <memset@plt>
   13228:	mov	r2, #16
   1322c:	mov	r3, #0
   13230:	str	r2, [r4, #124]	; 0x7c
   13234:	str	r3, [r4, #120]	; 0x78
   13238:	pop	{r4, pc}

0001323c <flatcc_builder_custom_init@@Base>:
   1323c:	push	{r4, r5, r6, r7, r8, lr}
   13240:	mov	r6, r1
   13244:	mov	r7, r2
   13248:	mov	r1, #0
   1324c:	mov	r2, #232	; 0xe8
   13250:	mov	r5, r3
   13254:	mov	r4, r0
   13258:	ldr	r8, [sp, #24]
   1325c:	bl	1203c <memset@plt>
   13260:	ldr	r3, [pc, #76]	; 132b4 <flatcc_builder_custom_init@@Base+0x78>
   13264:	cmp	r6, #0
   13268:	add	r3, pc, r3
   1326c:	beq	1329c <flatcc_builder_custom_init@@Base+0x60>
   13270:	cmp	r5, #0
   13274:	beq	13290 <flatcc_builder_custom_init@@Base+0x54>
   13278:	str	r8, [r4, #40]	; 0x28
   1327c:	str	r5, [r4, #48]	; 0x30
   13280:	str	r7, [r4, #36]	; 0x24
   13284:	str	r6, [r4, #44]	; 0x2c
   13288:	mov	r0, #0
   1328c:	pop	{r4, r5, r6, r7, r8, pc}
   13290:	ldr	r2, [pc, #32]	; 132b8 <flatcc_builder_custom_init@@Base+0x7c>
   13294:	ldr	r5, [r3, r2]
   13298:	b	13278 <flatcc_builder_custom_init@@Base+0x3c>
   1329c:	ldr	r2, [pc, #24]	; 132bc <flatcc_builder_custom_init@@Base+0x80>
   132a0:	mov	r1, #1
   132a4:	str	r1, [r4, #184]	; 0xb8
   132a8:	add	r7, r4, #188	; 0xbc
   132ac:	ldr	r6, [r3, r2]
   132b0:	b	13270 <flatcc_builder_custom_init@@Base+0x34>
   132b4:	muleq	r1, r0, sp
   132b8:	andeq	r0, r0, r4, rrx
   132bc:	andeq	r0, r0, r8, rrx

000132c0 <flatcc_builder_init@@Base>:
   132c0:	push	{lr}		; (str lr, [sp, #-4]!)
   132c4:	sub	sp, sp, #12
   132c8:	mov	r3, #0
   132cc:	str	r3, [sp]
   132d0:	mov	r2, r3
   132d4:	mov	r1, r3
   132d8:	bl	1323c <flatcc_builder_custom_init@@Base>
   132dc:	add	sp, sp, #12
   132e0:	pop	{pc}		; (ldr pc, [sp], #4)

000132e4 <flatcc_builder_custom_reset@@Base>:
   132e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132e8:	add	r7, r0, #52	; 0x34
   132ec:	mov	r4, #0
   132f0:	sub	sp, sp, #12
   132f4:	mov	r5, r0
   132f8:	mov	sl, r1
   132fc:	mov	r8, r2
   13300:	mov	r6, r7
   13304:	mov	r9, r4
   13308:	mov	fp, #1
   1330c:	b	13360 <flatcc_builder_custom_reset@@Base+0x7c>
   13310:	cmp	r4, #5
   13314:	cmpne	r8, #0
   13318:	beq	13344 <flatcc_builder_custom_reset@@Base+0x60>
   1331c:	ldr	r0, [r5, #40]	; 0x28
   13320:	mov	r3, fp
   13324:	str	r4, [sp]
   13328:	mov	r2, #1
   1332c:	mov	r1, r6
   13330:	ldr	ip, [r5, #48]	; 0x30
   13334:	blx	ip
   13338:	cmp	r0, #0
   1333c:	bne	13424 <flatcc_builder_custom_reset@@Base+0x140>
   13340:	ldr	r0, [r7, r4, lsl #3]
   13344:	ldr	r2, [r6, #4]
   13348:	mov	r1, r9
   1334c:	bl	1203c <memset@plt>
   13350:	add	r4, r4, #1
   13354:	cmp	r4, #8
   13358:	add	r6, r6, #8
   1335c:	beq	1339c <flatcc_builder_custom_reset@@Base+0xb8>
   13360:	ldr	r0, [r7, r4, lsl #3]
   13364:	cmp	r0, #0
   13368:	bne	13310 <flatcc_builder_custom_reset@@Base+0x2c>
   1336c:	ldr	r3, [r6, #4]
   13370:	cmp	r3, #0
   13374:	beq	13350 <flatcc_builder_custom_reset@@Base+0x6c>
   13378:	ldr	r3, [pc, #172]	; 1342c <flatcc_builder_custom_reset@@Base+0x148>
   1337c:	ldr	r1, [pc, #172]	; 13430 <flatcc_builder_custom_reset@@Base+0x14c>
   13380:	ldr	r0, [pc, #172]	; 13434 <flatcc_builder_custom_reset@@Base+0x150>
   13384:	add	r3, pc, r3
   13388:	ldr	r2, [pc, #168]	; 13438 <flatcc_builder_custom_reset@@Base+0x154>
   1338c:	add	r3, r3, #108	; 0x6c
   13390:	add	r1, pc, r1
   13394:	add	r0, pc, r0
   13398:	bl	1206c <__assert_fail@plt>
   1339c:	ldr	r2, [r5, #124]	; 0x7c
   133a0:	mov	r3, #0
   133a4:	ldr	r0, [r5, #60]	; 0x3c
   133a8:	cmp	r2, r3
   133ac:	str	r3, [r5, #120]	; 0x78
   133b0:	ldr	r1, [r5, #76]	; 0x4c
   133b4:	movne	r3, #16
   133b8:	ldr	r2, [r5, #52]	; 0x34
   133bc:	str	r0, [r5, #16]
   133c0:	ldr	r0, [r5, #184]	; 0xb8
   133c4:	strne	r3, [r5, #124]	; 0x7c
   133c8:	mov	r3, #0
   133cc:	cmp	sl, #0
   133d0:	strne	r3, [r5, #172]	; 0xac
   133d4:	strne	r3, [r5, #176]	; 0xb0
   133d8:	strne	r3, [r5, #180]	; 0xb4
   133dc:	cmp	r0, #0
   133e0:	stm	r5, {r1, r2}
   133e4:	strh	r3, [r5, #128]	; 0x80
   133e8:	str	r3, [r5, #136]	; 0x88
   133ec:	str	r3, [r5, #140]	; 0x8c
   133f0:	str	r3, [r5, #156]	; 0x9c
   133f4:	str	r3, [r5, #160]	; 0xa0
   133f8:	str	r3, [r5, #20]
   133fc:	str	r3, [r5, #24]
   13400:	str	r3, [r5, #148]	; 0x94
   13404:	str	r3, [r5, #152]	; 0x98
   13408:	str	r3, [r5, #32]
   1340c:	beq	1341c <flatcc_builder_custom_reset@@Base+0x138>
   13410:	add	r0, r5, #188	; 0xbc
   13414:	bl	16ec0 <flatcc_emitter_reset@@Base>
   13418:	mov	r0, #0
   1341c:	add	sp, sp, #12
   13420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13424:	mvn	r0, #0
   13428:	b	1341c <flatcc_builder_custom_reset@@Base+0x138>
   1342c:	muleq	r0, r4, r5
   13430:	ldrdeq	r4, [r0], -r8
   13434:	andeq	r4, r0, r0, ror sp
   13438:			; <UNDEFINED> instruction: 0x000001b2

0001343c <flatcc_builder_reset@@Base>:
   1343c:	mov	r2, #0
   13440:	mov	r1, r2
   13444:	b	132e4 <flatcc_builder_custom_reset@@Base>

00013448 <flatcc_builder_clear@@Base>:
   13448:	push	{r4, r5, r6, r7, r8, lr}
   1344c:	mov	r4, #0
   13450:	sub	sp, sp, #8
   13454:	mov	r6, r0
   13458:	add	r5, r0, #52	; 0x34
   1345c:	mov	r8, r4
   13460:	ldr	r0, [r6, #40]	; 0x28
   13464:	mov	r1, r5
   13468:	str	r4, [sp]
   1346c:	mov	r3, r8
   13470:	add	r4, r4, #1
   13474:	ldr	r7, [r6, #48]	; 0x30
   13478:	mov	r2, #0
   1347c:	blx	r7
   13480:	cmp	r4, #8
   13484:	add	r5, r5, #8
   13488:	bne	13460 <flatcc_builder_clear@@Base+0x18>
   1348c:	ldr	r3, [r6, #184]	; 0xb8
   13490:	cmp	r3, #0
   13494:	beq	134a0 <flatcc_builder_clear@@Base+0x58>
   13498:	add	r0, r6, #188	; 0xbc
   1349c:	bl	16f7c <flatcc_emitter_clear@@Base>
   134a0:	mov	r0, r6
   134a4:	mov	r2, #232	; 0xe8
   134a8:	mov	r1, #0
   134ac:	add	sp, sp, #8
   134b0:	pop	{r4, r5, r6, r7, r8, lr}
   134b4:	b	1203c <memset@plt>

000134b8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   134b8:	push	{r4, r5, r6, r7, r8, lr}
   134bc:	add	r4, r1, #3
   134c0:	bic	r4, r4, #3
   134c4:	ldr	r7, [r0, #228]	; 0xe4
   134c8:	add	r4, r4, #4
   134cc:	ldr	r3, [r0, #112]	; 0x70
   134d0:	add	r2, r4, r7
   134d4:	cmp	r2, r3
   134d8:	sub	sp, sp, #8
   134dc:	mov	r6, r0
   134e0:	bhi	13528 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   134e4:	ldr	r8, [r6, #108]	; 0x6c
   134e8:	adds	r5, r8, r7
   134ec:	beq	13550 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   134f0:	mov	r2, r4
   134f4:	mov	r1, #0
   134f8:	mov	r0, r5
   134fc:	bl	1203c <memset@plt>
   13500:	ldr	r3, [r6, #224]	; 0xe0
   13504:	add	r0, r5, #4
   13508:	str	r3, [r8, r7]
   1350c:	ldr	r3, [r6, #228]	; 0xe4
   13510:	add	r4, r4, r3
   13514:	add	r3, r3, #4
   13518:	str	r4, [r6, #228]	; 0xe4
   1351c:	str	r3, [r6, #224]	; 0xe0
   13520:	add	sp, sp, #8
   13524:	pop	{r4, r5, r6, r7, r8, pc}
   13528:	mov	r3, #7
   1352c:	ldr	r0, [r0, #40]	; 0x28
   13530:	add	r1, r6, #108	; 0x6c
   13534:	str	r3, [sp]
   13538:	mov	r3, #0
   1353c:	ldr	r5, [r6, #48]	; 0x30
   13540:	blx	r5
   13544:	cmp	r0, #0
   13548:	beq	134e4 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   1354c:	bl	120e0 <__assert_fail@plt+0x74>
   13550:	mov	r0, r5
   13554:	b	13520 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00013558 <flatcc_builder_enter_user_frame@@Base>:
   13558:	push	{r4, r5, r6, r7, lr}
   1355c:	add	r4, r1, #3
   13560:	bic	r4, r4, #3
   13564:	ldr	r6, [r0, #228]	; 0xe4
   13568:	add	r4, r4, #4
   1356c:	ldr	r3, [r0, #112]	; 0x70
   13570:	add	r2, r4, r6
   13574:	cmp	r2, r3
   13578:	sub	sp, sp, #12
   1357c:	mov	r5, r0
   13580:	bhi	135c0 <flatcc_builder_enter_user_frame@@Base+0x68>
   13584:	ldr	r7, [r5, #108]	; 0x6c
   13588:	adds	r0, r7, r6
   1358c:	beq	135b8 <flatcc_builder_enter_user_frame@@Base+0x60>
   13590:	mov	r2, r4
   13594:	mov	r1, #0
   13598:	bl	1203c <memset@plt>
   1359c:	ldr	r3, [r5, #224]	; 0xe0
   135a0:	str	r3, [r7, r6]
   135a4:	ldr	r0, [r5, #228]	; 0xe4
   135a8:	add	r4, r4, r0
   135ac:	add	r0, r0, #4
   135b0:	str	r4, [r5, #228]	; 0xe4
   135b4:	str	r0, [r5, #224]	; 0xe0
   135b8:	add	sp, sp, #12
   135bc:	pop	{r4, r5, r6, r7, pc}
   135c0:	mov	r3, #7
   135c4:	ldr	r0, [r0, #40]	; 0x28
   135c8:	add	r1, r5, #108	; 0x6c
   135cc:	str	r3, [sp]
   135d0:	mov	r3, #0
   135d4:	ldr	r7, [r5, #48]	; 0x30
   135d8:	blx	r7
   135dc:	cmp	r0, #0
   135e0:	beq	13584 <flatcc_builder_enter_user_frame@@Base+0x2c>
   135e4:	bl	120e0 <__assert_fail@plt+0x74>

000135e8 <flatcc_builder_exit_user_frame@@Base>:
   135e8:	ldr	r3, [r0, #224]	; 0xe0
   135ec:	cmp	r3, #0
   135f0:	beq	13614 <flatcc_builder_exit_user_frame@@Base+0x2c>
   135f4:	ldr	r2, [r0, #108]	; 0x6c
   135f8:	sub	r1, r3, #4
   135fc:	add	r3, r2, r3
   13600:	str	r1, [r0, #228]	; 0xe4
   13604:	ldr	r3, [r3, #-4]
   13608:	str	r3, [r0, #224]	; 0xe0
   1360c:	mov	r0, r3
   13610:	bx	lr
   13614:	ldr	r3, [pc, #32]	; 1363c <flatcc_builder_exit_user_frame@@Base+0x54>
   13618:	ldr	r1, [pc, #32]	; 13640 <flatcc_builder_exit_user_frame@@Base+0x58>
   1361c:	ldr	r0, [pc, #32]	; 13644 <flatcc_builder_exit_user_frame@@Base+0x5c>
   13620:	add	r3, pc, r3
   13624:	push	{r4, lr}
   13628:	add	r3, r3, #136	; 0x88
   1362c:	ldr	r2, [pc, #20]	; 13648 <flatcc_builder_exit_user_frame@@Base+0x60>
   13630:	add	r1, pc, r1
   13634:	add	r0, pc, r0
   13638:	bl	1206c <__assert_fail@plt>
   1363c:	strdeq	r4, [r0], -r8
   13640:	andeq	r4, r0, r8, lsr sl
   13644:	andeq	r4, r0, r4, ror #21
   13648:	andeq	r0, r0, lr, lsl r2

0001364c <flatcc_builder_exit_user_frame_at@@Base>:
   1364c:	ldr	r2, [r0, #224]	; 0xe0
   13650:	cmp	r2, r1
   13654:	bcc	13660 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   13658:	str	r1, [r0, #224]	; 0xe0
   1365c:	b	135e8 <flatcc_builder_exit_user_frame@@Base>
   13660:	ldr	r3, [pc, #32]	; 13688 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13664:	ldr	r1, [pc, #32]	; 1368c <flatcc_builder_exit_user_frame_at@@Base+0x40>
   13668:	ldr	r0, [pc, #32]	; 13690 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   1366c:	add	r3, pc, r3
   13670:	push	{r4, lr}
   13674:	add	r3, r3, #168	; 0xa8
   13678:	ldr	r2, [pc, #20]	; 13694 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   1367c:	add	r1, pc, r1
   13680:	add	r0, pc, r0
   13684:	bl	1206c <__assert_fail@plt>
   13688:	andeq	r4, r0, ip, lsr #5
   1368c:	andeq	r4, r0, ip, ror #19
   13690:			; <UNDEFINED> instruction: 0x00004ab4
   13694:	andeq	r0, r0, r7, lsr #4

00013698 <flatcc_builder_get_current_user_frame@@Base>:
   13698:	ldr	r0, [r0, #224]	; 0xe0
   1369c:	bx	lr

000136a0 <flatcc_builder_get_user_frame_ptr@@Base>:
   136a0:	ldr	r0, [r0, #108]	; 0x6c
   136a4:	add	r0, r0, r1
   136a8:	bx	lr

000136ac <flatcc_builder_embed_buffer@@Base>:
   136ac:	ldr	ip, [r0, #152]	; 0x98
   136b0:	push	{r4, r5, r6, lr}
   136b4:	mov	r5, r3
   136b8:	sub	sp, sp, #88	; 0x58
   136bc:	adds	r3, ip, #0
   136c0:	movne	r3, #1
   136c4:	mov	r6, r2
   136c8:	mov	r2, r1
   136cc:	add	r1, sp, #104	; 0x68
   136d0:	mov	r4, r0
   136d4:	bl	12d90 <flatcc_builder_default_alloc@@Base+0x10c>
   136d8:	ldr	ip, [pc, #324]	; 13824 <flatcc_builder_embed_buffer@@Base+0x178>
   136dc:	add	ip, pc, ip
   136e0:	cmp	r0, #0
   136e4:	bne	137ec <flatcc_builder_embed_buffer@@Base+0x140>
   136e8:	ldr	r2, [sp, #108]	; 0x6c
   136ec:	ldr	r1, [r4, #136]	; 0x88
   136f0:	ldrh	r3, [sp, #104]	; 0x68
   136f4:	tst	r2, #2
   136f8:	moveq	lr, #0
   136fc:	movne	lr, #4
   13700:	sub	r2, r1, r5
   13704:	sub	r3, r3, #1
   13708:	sub	r2, r2, lr
   1370c:	and	r2, r2, r3
   13710:	ldr	r3, [r4, #152]	; 0x98
   13714:	str	r0, [sp, #16]
   13718:	str	r0, [sp, #20]
   1371c:	cmp	r3, #0
   13720:	add	r0, r5, r2
   13724:	str	r0, [sp, #12]
   13728:	beq	13748 <flatcc_builder_embed_buffer@@Base+0x9c>
   1372c:	mov	r3, #4
   13730:	mov	lr, #1
   13734:	add	r0, sp, #12
   13738:	str	r3, [sp, #16]
   1373c:	str	r3, [sp, #28]
   13740:	str	r0, [sp, #24]
   13744:	str	lr, [sp, #20]
   13748:	cmp	r5, #0
   1374c:	beq	13774 <flatcc_builder_embed_buffer@@Base+0xc8>
   13750:	ldr	r0, [sp, #20]
   13754:	add	lr, sp, #88	; 0x58
   13758:	add	r0, r0, #1
   1375c:	add	r3, r3, r5
   13760:	add	lr, lr, r0, lsl #3
   13764:	str	r3, [sp, #16]
   13768:	str	r0, [sp, #20]
   1376c:	str	r6, [lr, #-72]	; 0xffffffb8
   13770:	str	r5, [lr, #-68]	; 0xffffffbc
   13774:	cmp	r2, #0
   13778:	bne	137bc <flatcc_builder_embed_buffer@@Base+0x110>
   1377c:	sub	r5, r1, r3
   13780:	cmp	r1, r5
   13784:	ble	13820 <flatcc_builder_embed_buffer@@Base+0x174>
   13788:	ldr	r0, [r4, #36]	; 0x24
   1378c:	ldr	r2, [sp, #20]
   13790:	str	r3, [sp]
   13794:	add	r1, sp, #24
   13798:	ldr	r6, [r4, #44]	; 0x2c
   1379c:	mov	r3, r5
   137a0:	blx	r6
   137a4:	cmp	r0, #0
   137a8:	streq	r5, [r4, #136]	; 0x88
   137ac:	bne	137fc <flatcc_builder_embed_buffer@@Base+0x150>
   137b0:	mov	r0, r5
   137b4:	add	sp, sp, #88	; 0x58
   137b8:	pop	{r4, r5, r6, pc}
   137bc:	ldr	r0, [sp, #20]
   137c0:	ldr	lr, [pc, #96]	; 13828 <flatcc_builder_embed_buffer@@Base+0x17c>
   137c4:	add	r0, r0, #1
   137c8:	add	r3, r3, r2
   137cc:	str	r3, [sp, #16]
   137d0:	ldr	lr, [ip, lr]
   137d4:	add	ip, sp, #88	; 0x58
   137d8:	add	ip, ip, r0, lsl #3
   137dc:	str	r0, [sp, #20]
   137e0:	str	lr, [ip, #-72]	; 0xffffffb8
   137e4:	str	r2, [ip, #-68]	; 0xffffffbc
   137e8:	b	1377c <flatcc_builder_embed_buffer@@Base+0xd0>
   137ec:	mov	r5, #0
   137f0:	mov	r0, r5
   137f4:	add	sp, sp, #88	; 0x58
   137f8:	pop	{r4, r5, r6, pc}
   137fc:	ldr	r3, [pc, #40]	; 1382c <flatcc_builder_embed_buffer@@Base+0x180>
   13800:	ldr	r1, [pc, #40]	; 13830 <flatcc_builder_embed_buffer@@Base+0x184>
   13804:	ldr	r0, [pc, #40]	; 13834 <flatcc_builder_embed_buffer@@Base+0x188>
   13808:	add	r3, pc, r3
   1380c:	ldr	r2, [pc, #36]	; 13838 <flatcc_builder_embed_buffer@@Base+0x18c>
   13810:	add	r3, r3, #28
   13814:	add	r1, pc, r1
   13818:	add	r0, pc, r0
   1381c:	bl	1206c <__assert_fail@plt>
   13820:	bl	12148 <__assert_fail@plt+0xdc>
   13824:	andeq	r5, r1, ip, lsl r9
   13828:	andeq	r0, r0, ip, asr r0
   1382c:	andeq	r4, r0, r0, lsl r1
   13830:	andeq	r4, r0, r4, asr r8
   13834:	ldrdeq	r4, [r0], -r8
   13838:	andeq	r0, r0, fp, lsl #5

0001383c <flatcc_builder_create_buffer@@Base>:
   1383c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13840:	sub	sp, sp, #100	; 0x64
   13844:	mov	r5, #0
   13848:	ldr	r8, [sp, #140]	; 0x8c
   1384c:	mov	r9, r1
   13850:	and	r6, r8, #1
   13854:	mov	r7, r3
   13858:	add	r1, sp, #136	; 0x88
   1385c:	mov	r3, r6
   13860:	str	r5, [sp, #20]
   13864:	mov	r4, r0
   13868:	bl	12d90 <flatcc_builder_default_alloc@@Base+0x10c>
   1386c:	ldr	lr, [pc, #516]	; 13a78 <flatcc_builder_create_buffer@@Base+0x23c>
   13870:	add	lr, pc, lr
   13874:	cmp	r0, r5
   13878:	bne	13a0c <flatcc_builder_create_buffer@@Base+0x1d0>
   1387c:	ldrh	r3, [r4, #128]	; 0x80
   13880:	ldrh	r2, [sp, #136]	; 0x88
   13884:	uxtb	r5, r6
   13888:	cmp	r3, r2
   1388c:	strhcc	r2, [r4, #128]	; 0x80
   13890:	cmp	r9, #0
   13894:	sub	r2, r2, #1
   13898:	ldrne	r3, [r9]
   1389c:	ldreq	r0, [sp, #20]
   138a0:	ldrne	r0, [r9]
   138a4:	strne	r3, [sp, #20]
   138a8:	cmp	r0, #0
   138ac:	movne	r0, #4
   138b0:	moveq	r0, #0
   138b4:	ands	r3, r8, #2
   138b8:	ldr	r8, [r4, #136]	; 0x88
   138bc:	bne	139dc <flatcc_builder_create_buffer@@Base+0x1a0>
   138c0:	sub	r1, r8, #4
   138c4:	cmp	r5, #0
   138c8:	sub	r1, r1, r0
   138cc:	and	r2, r2, r1
   138d0:	moveq	r9, #1
   138d4:	moveq	ip, #4
   138d8:	bne	139e8 <flatcc_builder_create_buffer@@Base+0x1ac>
   138dc:	add	r1, r3, #1
   138e0:	add	sl, sp, #96	; 0x60
   138e4:	add	r1, sl, r1, lsl #3
   138e8:	mov	fp, #4
   138ec:	add	sl, sp, #12
   138f0:	cmp	r0, #0
   138f4:	str	ip, [sp, #24]
   138f8:	str	r9, [sp, #28]
   138fc:	str	sl, [r1, #-72]	; 0xffffffb8
   13900:	str	fp, [r1, #-68]	; 0xffffffbc
   13904:	beq	13930 <flatcc_builder_create_buffer@@Base+0xf4>
   13908:	add	r9, r9, #1
   1390c:	add	r1, sp, #96	; 0x60
   13910:	add	r9, r1, r9, lsl #3
   13914:	add	r3, r3, #2
   13918:	add	ip, ip, r0
   1391c:	str	r3, [sp, #28]
   13920:	add	r3, sp, #20
   13924:	str	r0, [r9, #-68]	; 0xffffffbc
   13928:	str	ip, [sp, #24]
   1392c:	str	r3, [r9, #-72]	; 0xffffffb8
   13930:	cmp	r2, #0
   13934:	beq	13964 <flatcc_builder_create_buffer@@Base+0x128>
   13938:	ldr	r3, [sp, #28]
   1393c:	ldr	r1, [pc, #312]	; 13a7c <flatcc_builder_create_buffer@@Base+0x240>
   13940:	add	r3, r3, #1
   13944:	add	ip, ip, r2
   13948:	str	ip, [sp, #24]
   1394c:	ldr	r0, [lr, r1]
   13950:	add	r1, sp, #96	; 0x60
   13954:	add	r1, r1, r3, lsl #3
   13958:	str	r3, [sp, #28]
   1395c:	str	r0, [r1, #-72]	; 0xffffffb8
   13960:	str	r2, [r1, #-68]	; 0xffffffbc
   13964:	cmp	r5, #0
   13968:	sub	r5, r8, ip
   1396c:	mov	r3, r5
   13970:	beq	13a1c <flatcc_builder_create_buffer@@Base+0x1e0>
   13974:	cmp	r6, #0
   13978:	add	r3, r5, #4
   1397c:	beq	13a1c <flatcc_builder_create_buffer@@Base+0x1e0>
   13980:	ldr	r2, [r4, #144]	; 0x90
   13984:	sub	r2, r2, r3
   13988:	str	r2, [sp, #16]
   1398c:	sub	r7, r7, r3
   13990:	cmp	r5, r8
   13994:	str	r7, [sp, #12]
   13998:	mov	r6, r5
   1399c:	bge	13a2c <flatcc_builder_create_buffer@@Base+0x1f0>
   139a0:	ldr	r0, [r4, #36]	; 0x24
   139a4:	ldr	r2, [sp, #28]
   139a8:	str	ip, [sp]
   139ac:	mov	r3, r5
   139b0:	ldr	r7, [r4, #44]	; 0x2c
   139b4:	add	r1, sp, #32
   139b8:	blx	r7
   139bc:	cmp	r0, #0
   139c0:	bne	13a30 <flatcc_builder_create_buffer@@Base+0x1f4>
   139c4:	cmp	r5, #0
   139c8:	str	r5, [r4, #136]	; 0x88
   139cc:	beq	13a54 <flatcc_builder_create_buffer@@Base+0x218>
   139d0:	mov	r0, r6
   139d4:	add	sp, sp, #100	; 0x64
   139d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139dc:	sub	r3, r8, #8
   139e0:	sub	r3, r3, r0
   139e4:	and	r2, r2, r3
   139e8:	mov	ip, #4
   139ec:	mov	r3, #1
   139f0:	add	r1, sp, #16
   139f4:	str	ip, [sp, #36]	; 0x24
   139f8:	str	r1, [sp, #32]
   139fc:	mov	r5, r3
   13a00:	mov	r9, #2
   13a04:	mov	ip, #8
   13a08:	b	138dc <flatcc_builder_create_buffer@@Base+0xa0>
   13a0c:	mov	r6, r5
   13a10:	mov	r0, r6
   13a14:	add	sp, sp, #100	; 0x64
   13a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a1c:	ldr	r2, [r4, #140]	; 0x8c
   13a20:	sub	r2, r2, r3
   13a24:	str	r2, [sp, #16]
   13a28:	b	1398c <flatcc_builder_create_buffer@@Base+0x150>
   13a2c:	bl	12148 <__assert_fail@plt+0xdc>
   13a30:	ldr	r3, [pc, #72]	; 13a80 <flatcc_builder_create_buffer@@Base+0x244>
   13a34:	ldr	r1, [pc, #72]	; 13a84 <flatcc_builder_create_buffer@@Base+0x248>
   13a38:	ldr	r0, [pc, #72]	; 13a88 <flatcc_builder_create_buffer@@Base+0x24c>
   13a3c:	add	r3, pc, r3
   13a40:	ldr	r2, [pc, #68]	; 13a8c <flatcc_builder_create_buffer@@Base+0x250>
   13a44:	add	r3, r3, #28
   13a48:	add	r1, pc, r1
   13a4c:	add	r0, pc, r0
   13a50:	bl	1206c <__assert_fail@plt>
   13a54:	ldr	r3, [pc, #52]	; 13a90 <flatcc_builder_create_buffer@@Base+0x254>
   13a58:	ldr	r1, [pc, #52]	; 13a94 <flatcc_builder_create_buffer@@Base+0x258>
   13a5c:	ldr	r0, [pc, #52]	; 13a98 <flatcc_builder_create_buffer@@Base+0x25c>
   13a60:	add	r3, pc, r3
   13a64:	mov	r2, #772	; 0x304
   13a68:	add	r3, r3, #204	; 0xcc
   13a6c:	add	r1, pc, r1
   13a70:	add	r0, pc, r0
   13a74:	bl	1206c <__assert_fail@plt>
   13a78:	andeq	r5, r1, r8, lsl #15
   13a7c:	andeq	r0, r0, ip, asr r0
   13a80:	ldrdeq	r3, [r0], -ip
   13a84:	andeq	r4, r0, r0, lsr #12
   13a88:	andeq	r4, r0, r4, lsr #13
   13a8c:	andeq	r0, r0, fp, lsl #5
   13a90:			; <UNDEFINED> instruction: 0x00003eb8
   13a94:	strdeq	r4, [r0], -ip
   13a98:	andeq	r4, r0, r0, lsl #13

00013a9c <flatcc_builder_create_struct@@Base>:
   13a9c:	push	{r4, r5, r6, lr}
   13aa0:	cmp	r3, #0
   13aa4:	ldr	lr, [pc, #300]	; 13bd8 <flatcc_builder_create_struct@@Base+0x13c>
   13aa8:	sub	sp, sp, #80	; 0x50
   13aac:	add	lr, pc, lr
   13ab0:	beq	13bb4 <flatcc_builder_create_struct@@Base+0x118>
   13ab4:	mov	r5, r0
   13ab8:	ldrh	r0, [r0, #128]	; 0x80
   13abc:	ldr	ip, [r5, #136]	; 0x88
   13ac0:	cmp	r0, r3
   13ac4:	strhcc	r3, [r5, #128]	; 0x80
   13ac8:	mov	r0, #0
   13acc:	sub	r3, r3, #1
   13ad0:	sub	r4, ip, r2
   13ad4:	cmp	r2, #0
   13ad8:	and	r3, r3, r4
   13adc:	str	r0, [sp, #8]
   13ae0:	str	r0, [sp, #12]
   13ae4:	bne	13b64 <flatcc_builder_create_struct@@Base+0xc8>
   13ae8:	cmp	r3, #0
   13aec:	movne	r6, #1
   13af0:	movne	r1, r2
   13af4:	beq	13b8c <flatcc_builder_create_struct@@Base+0xf0>
   13af8:	ldr	r0, [pc, #220]	; 13bdc <flatcc_builder_create_struct@@Base+0x140>
   13afc:	add	r1, r1, #1
   13b00:	add	r2, r2, r3
   13b04:	add	r4, sp, #80	; 0x50
   13b08:	add	r1, r4, r1, lsl #3
   13b0c:	str	r2, [sp, #8]
   13b10:	sub	r4, ip, r2
   13b14:	ldr	r0, [lr, r0]
   13b18:	str	r3, [r1, #-68]	; 0xffffffbc
   13b1c:	str	r0, [r1, #-72]	; 0xffffffb8
   13b20:	str	r6, [sp, #12]
   13b24:	cmp	ip, r4
   13b28:	ble	13b8c <flatcc_builder_create_struct@@Base+0xf0>
   13b2c:	ldr	r3, [sp, #12]
   13b30:	ldr	r0, [r5, #36]	; 0x24
   13b34:	add	r1, sp, #16
   13b38:	str	r2, [sp]
   13b3c:	mov	r2, r3
   13b40:	ldr	r6, [r5, #44]	; 0x2c
   13b44:	mov	r3, r4
   13b48:	blx	r6
   13b4c:	cmp	r0, #0
   13b50:	bne	13b90 <flatcc_builder_create_struct@@Base+0xf4>
   13b54:	mov	r0, r4
   13b58:	str	r4, [r5, #136]	; 0x88
   13b5c:	add	sp, sp, #80	; 0x50
   13b60:	pop	{r4, r5, r6, pc}
   13b64:	cmp	r3, r0
   13b68:	mov	r0, #1
   13b6c:	str	r1, [sp, #16]
   13b70:	str	r2, [sp, #8]
   13b74:	str	r2, [sp, #20]
   13b78:	str	r0, [sp, #12]
   13b7c:	movne	r1, r0
   13b80:	movne	r6, #2
   13b84:	beq	13b24 <flatcc_builder_create_struct@@Base+0x88>
   13b88:	b	13af8 <flatcc_builder_create_struct@@Base+0x5c>
   13b8c:	bl	12148 <__assert_fail@plt+0xdc>
   13b90:	ldr	r3, [pc, #72]	; 13be0 <flatcc_builder_create_struct@@Base+0x144>
   13b94:	ldr	r1, [pc, #72]	; 13be4 <flatcc_builder_create_struct@@Base+0x148>
   13b98:	ldr	r0, [pc, #72]	; 13be8 <flatcc_builder_create_struct@@Base+0x14c>
   13b9c:	add	r3, pc, r3
   13ba0:	ldr	r2, [pc, #68]	; 13bec <flatcc_builder_create_struct@@Base+0x150>
   13ba4:	add	r3, r3, #28
   13ba8:	add	r1, pc, r1
   13bac:	add	r0, pc, r0
   13bb0:	bl	1206c <__assert_fail@plt>
   13bb4:	ldr	r3, [pc, #52]	; 13bf0 <flatcc_builder_create_struct@@Base+0x154>
   13bb8:	ldr	r1, [pc, #52]	; 13bf4 <flatcc_builder_create_struct@@Base+0x158>
   13bbc:	ldr	r0, [pc, #52]	; 13bf8 <flatcc_builder_create_struct@@Base+0x15c>
   13bc0:	add	r3, pc, r3
   13bc4:	ldr	r2, [pc, #48]	; 13bfc <flatcc_builder_create_struct@@Base+0x160>
   13bc8:	add	r3, r3, #236	; 0xec
   13bcc:	add	r1, pc, r1
   13bd0:	add	r0, pc, r0
   13bd4:	bl	1206c <__assert_fail@plt>
   13bd8:	andeq	r5, r1, ip, asr #10
   13bdc:	andeq	r0, r0, ip, asr r0
   13be0:	andeq	r3, r0, ip, ror sp
   13be4:	andeq	r4, r0, r0, asr #9
   13be8:	andeq	r4, r0, r4, asr #10
   13bec:	andeq	r0, r0, fp, lsl #5
   13bf0:	andeq	r3, r0, r8, asr sp
   13bf4:	muleq	r0, ip, r4
   13bf8:	andeq	r4, r0, r4, lsl #11
   13bfc:	andeq	r0, r0, pc, lsl #6

00013c00 <flatcc_builder_start_buffer@@Base>:
   13c00:	push	{r4, r5, r6, r7, r8, lr}
   13c04:	mov	r5, r1
   13c08:	ldrh	r1, [r0, #128]	; 0x80
   13c0c:	mov	r4, r0
   13c10:	mov	r7, r2
   13c14:	mov	r6, r3
   13c18:	bl	12ec0 <flatcc_builder_default_alloc@@Base+0x23c>
   13c1c:	ldr	r1, [pc, #140]	; 13cb0 <flatcc_builder_start_buffer@@Base+0xb0>
   13c20:	add	r1, pc, r1
   13c24:	cmp	r0, #0
   13c28:	bne	13ca8 <flatcc_builder_start_buffer@@Base+0xa8>
   13c2c:	ldrh	r3, [r4, #132]	; 0x84
   13c30:	ldr	ip, [r4, #32]
   13c34:	mov	r2, #1
   13c38:	strh	r2, [r4, #128]	; 0x80
   13c3c:	strh	r3, [ip, #34]	; 0x22
   13c40:	ldrh	r3, [r4, #164]	; 0xa4
   13c44:	strh	r7, [r4, #132]	; 0x84
   13c48:	cmp	r5, #0
   13c4c:	strh	r3, [ip, #32]
   13c50:	ldr	r3, [r4, #144]	; 0x90
   13c54:	strh	r6, [r4, #164]	; 0xa4
   13c58:	str	r3, [ip, #20]
   13c5c:	ldr	r3, [r4, #152]	; 0x98
   13c60:	str	r3, [ip, #28]
   13c64:	ldr	r3, [r4, #148]	; 0x94
   13c68:	ldr	lr, [r4, #136]	; 0x88
   13c6c:	ldr	r2, [r4, #168]	; 0xa8
   13c70:	add	r6, r3, #1
   13c74:	str	r3, [r4, #152]	; 0x98
   13c78:	str	r6, [r4, #148]	; 0x94
   13c7c:	str	lr, [r4, #144]	; 0x90
   13c80:	str	r2, [ip, #16]
   13c84:	beq	13c9c <flatcc_builder_start_buffer@@Base+0x9c>
   13c88:	ldr	r2, [r5]
   13c8c:	mov	r3, #1
   13c90:	str	r2, [r4, #168]	; 0xa8
   13c94:	strh	r3, [ip, #14]
   13c98:	pop	{r4, r5, r6, r7, r8, pc}
   13c9c:	ldr	r3, [pc, #16]	; 13cb4 <flatcc_builder_start_buffer@@Base+0xb4>
   13ca0:	ldr	r5, [r1, r3]
   13ca4:	b	13c88 <flatcc_builder_start_buffer@@Base+0x88>
   13ca8:	mvn	r0, #0
   13cac:	pop	{r4, r5, r6, r7, r8, pc}
   13cb0:	ldrdeq	r5, [r1], -r8
   13cb4:	andeq	r0, r0, ip, asr r0

00013cb8 <flatcc_builder_end_buffer@@Base>:
   13cb8:	ldr	ip, [r0, #32]
   13cbc:	ldrh	r2, [r0, #164]	; 0xa4
   13cc0:	push	{r4, r5, r6, lr}
   13cc4:	mov	r4, r0
   13cc8:	ldrh	ip, [ip, #14]
   13ccc:	ldr	r0, [r0, #152]	; 0x98
   13cd0:	and	r2, r2, #2
   13cd4:	cmp	r0, #0
   13cd8:	moveq	r0, r2
   13cdc:	orrne	r0, r2, #1
   13ce0:	cmp	ip, #1
   13ce4:	sub	sp, sp, #8
   13ce8:	bne	13dc8 <flatcc_builder_end_buffer@@Base+0x110>
   13cec:	ldrh	r2, [r4, #132]	; 0x84
   13cf0:	ldrh	ip, [r4, #128]	; 0x80
   13cf4:	mov	r3, r1
   13cf8:	add	r1, r4, #168	; 0xa8
   13cfc:	cmp	r2, ip
   13d00:	movhi	ip, r2
   13d04:	strhhi	r2, [r4, #128]	; 0x80
   13d08:	str	r0, [sp, #4]
   13d0c:	str	ip, [sp]
   13d10:	mov	r0, r4
   13d14:	bl	1383c <flatcc_builder_create_buffer@@Base>
   13d18:	subs	r5, r0, #0
   13d1c:	beq	13dbc <flatcc_builder_end_buffer@@Base+0x104>
   13d20:	ldr	r3, [r4, #32]
   13d24:	ldr	r2, [r4, #20]
   13d28:	mov	r1, #0
   13d2c:	ldr	ip, [r3, #20]
   13d30:	ldr	r0, [r4, #16]
   13d34:	str	ip, [r4, #144]	; 0x90
   13d38:	ldr	ip, [r3, #28]
   13d3c:	str	ip, [r4, #152]	; 0x98
   13d40:	ldr	ip, [r3, #16]
   13d44:	str	ip, [r4, #168]	; 0xa8
   13d48:	ldrh	r3, [r3, #32]
   13d4c:	strh	r3, [r4, #164]	; 0xa4
   13d50:	bl	1203c <memset@plt>
   13d54:	ldr	r3, [r4, #32]
   13d58:	ldr	r2, [r4, #64]	; 0x40
   13d5c:	ldrh	lr, [r4, #130]	; 0x82
   13d60:	ldr	ip, [r3]
   13d64:	ldr	r1, [r3, #4]
   13d68:	ldrh	r0, [r4, #128]	; 0x80
   13d6c:	sub	r2, r2, ip
   13d70:	cmp	r2, r1
   13d74:	movcs	r2, r1
   13d78:	cmp	r0, lr
   13d7c:	ldr	r0, [r4, #60]	; 0x3c
   13d80:	ldr	r6, [r3, #8]
   13d84:	str	r2, [r4, #24]
   13d88:	add	r2, r0, ip
   13d8c:	str	r2, [r4, #16]
   13d90:	str	r6, [r4, #20]
   13d94:	ldr	r2, [r4, #156]	; 0x9c
   13d98:	str	ip, [r4, #28]
   13d9c:	str	r1, [r3, #4]
   13da0:	strhcc	lr, [r4, #128]	; 0x80
   13da4:	ldrh	r1, [r3, #12]
   13da8:	sub	r2, r2, #1
   13dac:	sub	r3, r3, #36	; 0x24
   13db0:	str	r2, [r4, #156]	; 0x9c
   13db4:	strh	r1, [r4, #130]	; 0x82
   13db8:	str	r3, [r4, #32]
   13dbc:	mov	r0, r5
   13dc0:	add	sp, sp, #8
   13dc4:	pop	{r4, r5, r6, pc}
   13dc8:	ldr	r3, [pc, #28]	; 13dec <flatcc_builder_end_buffer@@Base+0x134>
   13dcc:	ldr	r1, [pc, #28]	; 13df0 <flatcc_builder_end_buffer@@Base+0x138>
   13dd0:	ldr	r0, [pc, #28]	; 13df4 <flatcc_builder_end_buffer@@Base+0x13c>
   13dd4:	add	r3, pc, r3
   13dd8:	ldr	r2, [pc, #24]	; 13df8 <flatcc_builder_end_buffer@@Base+0x140>
   13ddc:	add	r3, r3, #268	; 0x10c
   13de0:	add	r1, pc, r1
   13de4:	add	r0, pc, r0
   13de8:	bl	1206c <__assert_fail@plt>
   13dec:	andeq	r3, r0, r4, asr #22
   13df0:	andeq	r4, r0, r8, lsl #5
   13df4:	andeq	r4, r0, ip, ror r3
   13df8:	andeq	r0, r0, r6, asr #6

00013dfc <flatcc_builder_start_struct@@Base>:
   13dfc:	push	{r4, r5, r6, lr}
   13e00:	mov	r5, r1
   13e04:	mov	r1, r2
   13e08:	mov	r4, r0
   13e0c:	bl	12ec0 <flatcc_builder_default_alloc@@Base+0x23c>
   13e10:	cmp	r0, #0
   13e14:	bne	13e94 <flatcc_builder_start_struct@@Base+0x98>
   13e18:	ldr	r2, [r4, #28]
   13e1c:	ldr	r3, [r4, #64]	; 0x40
   13e20:	ldr	r0, [r4, #60]	; 0x3c
   13e24:	ldr	ip, [r4, #32]
   13e28:	sub	r3, r3, r2
   13e2c:	cmn	r3, #4
   13e30:	ldr	r6, [r4, #20]
   13e34:	add	r0, r0, r2
   13e38:	mov	r2, #2
   13e3c:	strh	r2, [ip, #14]
   13e40:	mvnhi	r2, #3
   13e44:	movhi	r3, r2
   13e48:	add	r5, r5, r6
   13e4c:	strhi	r2, [r4, #24]
   13e50:	strls	r3, [r4, #24]
   13e54:	mvn	r2, #3
   13e58:	cmp	r5, r3
   13e5c:	str	r0, [r4, #16]
   13e60:	str	r2, [ip, #4]
   13e64:	str	r5, [r4, #20]
   13e68:	bcs	13e74 <flatcc_builder_start_struct@@Base+0x78>
   13e6c:	add	r0, r0, r6
   13e70:	pop	{r4, r5, r6, pc}
   13e74:	add	r1, r5, #1
   13e78:	mov	r0, r4
   13e7c:	bl	12c10 <_start@@Base+0x40c>
   13e80:	cmp	r0, #0
   13e84:	bne	13e94 <flatcc_builder_start_struct@@Base+0x98>
   13e88:	ldr	r0, [r4, #16]
   13e8c:	add	r0, r0, r6
   13e90:	pop	{r4, r5, r6, pc}
   13e94:	mov	r0, #0
   13e98:	pop	{r4, r5, r6, pc}

00013e9c <flatcc_builder_struct_edit@@Base>:
   13e9c:	ldr	r0, [r0, #16]
   13ea0:	bx	lr

00013ea4 <flatcc_builder_end_struct@@Base>:
   13ea4:	ldr	r3, [r0, #32]
   13ea8:	push	{r4, r5, r6, lr}
   13eac:	ldrh	r3, [r3, #14]
   13eb0:	cmp	r3, #2
   13eb4:	bne	13f54 <flatcc_builder_end_struct@@Base+0xb0>
   13eb8:	ldrh	r3, [r0, #130]	; 0x82
   13ebc:	ldr	r2, [r0, #20]
   13ec0:	ldr	r1, [r0, #16]
   13ec4:	mov	r4, r0
   13ec8:	bl	13a9c <flatcc_builder_create_struct@@Base>
   13ecc:	subs	r5, r0, #0
   13ed0:	beq	13f4c <flatcc_builder_end_struct@@Base+0xa8>
   13ed4:	ldr	r2, [r4, #20]
   13ed8:	mov	r1, #0
   13edc:	ldr	r0, [r4, #16]
   13ee0:	bl	1203c <memset@plt>
   13ee4:	ldr	r3, [r4, #32]
   13ee8:	ldr	r2, [r4, #64]	; 0x40
   13eec:	ldrh	lr, [r4, #130]	; 0x82
   13ef0:	ldr	ip, [r3]
   13ef4:	ldr	r1, [r3, #4]
   13ef8:	ldrh	r0, [r4, #128]	; 0x80
   13efc:	sub	r2, r2, ip
   13f00:	cmp	r2, r1
   13f04:	movcs	r2, r1
   13f08:	cmp	r0, lr
   13f0c:	ldr	r0, [r4, #60]	; 0x3c
   13f10:	ldr	r6, [r3, #8]
   13f14:	str	r2, [r4, #24]
   13f18:	add	r2, r0, ip
   13f1c:	str	r2, [r4, #16]
   13f20:	str	r6, [r4, #20]
   13f24:	ldr	r2, [r4, #156]	; 0x9c
   13f28:	str	ip, [r4, #28]
   13f2c:	str	r1, [r3, #4]
   13f30:	strhcc	lr, [r4, #128]	; 0x80
   13f34:	ldrh	r1, [r3, #12]
   13f38:	sub	r2, r2, #1
   13f3c:	sub	r3, r3, #36	; 0x24
   13f40:	str	r2, [r4, #156]	; 0x9c
   13f44:	strh	r1, [r4, #130]	; 0x82
   13f48:	str	r3, [r4, #32]
   13f4c:	mov	r0, r5
   13f50:	pop	{r4, r5, r6, pc}
   13f54:	ldr	r3, [pc, #28]	; 13f78 <flatcc_builder_end_struct@@Base+0xd4>
   13f58:	ldr	r1, [pc, #28]	; 13f7c <flatcc_builder_end_struct@@Base+0xd8>
   13f5c:	ldr	r0, [pc, #28]	; 13f80 <flatcc_builder_end_struct@@Base+0xdc>
   13f60:	add	r3, pc, r3
   13f64:	mov	r2, #872	; 0x368
   13f68:	add	r3, r3, #296	; 0x128
   13f6c:	add	r1, pc, r1
   13f70:	add	r0, pc, r0
   13f74:	bl	1206c <__assert_fail@plt>
   13f78:			; <UNDEFINED> instruction: 0x000039b8
   13f7c:	strdeq	r4, [r0], -ip
   13f80:	andeq	r4, r0, ip, lsl r2

00013f84 <flatcc_builder_extend_vector@@Base>:
   13f84:	ldr	r2, [r0, #32]
   13f88:	push	{r4, r5, r6, lr}
   13f8c:	ldr	r3, [r2, #20]
   13f90:	ldr	r4, [r2, #24]
   13f94:	add	ip, r1, r3
   13f98:	cmp	r3, ip
   13f9c:	movls	r3, #0
   13fa0:	movhi	r3, #1
   13fa4:	cmp	r4, ip
   13fa8:	movcs	r4, r3
   13fac:	orrcc	r4, r3, #1
   13fb0:	cmp	r4, #0
   13fb4:	bne	14004 <flatcc_builder_extend_vector@@Base+0x80>
   13fb8:	ldr	lr, [r2, #16]
   13fbc:	str	ip, [r2, #20]
   13fc0:	ldr	r6, [r0, #20]
   13fc4:	ldr	r3, [r0, #24]
   13fc8:	mla	r1, lr, r1, r6
   13fcc:	mov	r5, r0
   13fd0:	cmp	r1, r3
   13fd4:	str	r1, [r0, #20]
   13fd8:	bcs	13fe8 <flatcc_builder_extend_vector@@Base+0x64>
   13fdc:	ldr	r0, [r5, #16]
   13fe0:	add	r0, r0, r6
   13fe4:	pop	{r4, r5, r6, pc}
   13fe8:	add	r1, r1, #1
   13fec:	mvn	r2, #3
   13ff0:	bl	12c10 <_start@@Base+0x40c>
   13ff4:	cmp	r0, #0
   13ff8:	beq	13fdc <flatcc_builder_extend_vector@@Base+0x58>
   13ffc:	mov	r0, r4
   14000:	pop	{r4, r5, r6, pc}
   14004:	bl	12180 <__assert_fail@plt+0x114>

00014008 <flatcc_builder_vector_push@@Base>:
   14008:	ldr	r3, [r0, #32]
   1400c:	push	{r4, r5, r6, r7, r8, lr}
   14010:	ldrh	r2, [r3, #14]
   14014:	cmp	r2, #4
   14018:	bne	140c0 <flatcc_builder_vector_push@@Base+0xb8>
   1401c:	mov	r6, r1
   14020:	ldr	r2, [r3, #20]
   14024:	ldr	r1, [r3, #24]
   14028:	cmp	r2, r1
   1402c:	bhi	1409c <flatcc_builder_vector_push@@Base+0x94>
   14030:	add	r2, r2, #1
   14034:	str	r2, [r3, #20]
   14038:	ldr	r7, [r3, #16]
   1403c:	ldr	r5, [r0, #20]
   14040:	ldr	r3, [r0, #24]
   14044:	add	r1, r7, r5
   14048:	cmp	r1, r3
   1404c:	mov	r4, r0
   14050:	str	r1, [r0, #20]
   14054:	bcs	14080 <flatcc_builder_vector_push@@Base+0x78>
   14058:	ldr	r3, [r4, #16]
   1405c:	adds	r3, r3, r5
   14060:	beq	14078 <flatcc_builder_vector_push@@Base+0x70>
   14064:	mov	r0, r3
   14068:	mov	r2, r7
   1406c:	mov	r1, r6
   14070:	bl	11fb8 <memcpy@plt>
   14074:	mov	r3, r0
   14078:	mov	r0, r3
   1407c:	pop	{r4, r5, r6, r7, r8, pc}
   14080:	add	r1, r1, #1
   14084:	mvn	r2, #3
   14088:	bl	12c10 <_start@@Base+0x40c>
   1408c:	cmp	r0, #0
   14090:	beq	14058 <flatcc_builder_vector_push@@Base+0x50>
   14094:	mov	r3, #0
   14098:	b	14078 <flatcc_builder_vector_push@@Base+0x70>
   1409c:	ldr	r3, [pc, #64]	; 140e4 <flatcc_builder_vector_push@@Base+0xdc>
   140a0:	ldr	r1, [pc, #64]	; 140e8 <flatcc_builder_vector_push@@Base+0xe0>
   140a4:	ldr	r0, [pc, #64]	; 140ec <flatcc_builder_vector_push@@Base+0xe4>
   140a8:	add	r3, pc, r3
   140ac:	mov	r2, #908	; 0x38c
   140b0:	add	r3, r3, #324	; 0x144
   140b4:	add	r1, pc, r1
   140b8:	add	r0, pc, r0
   140bc:	bl	1206c <__assert_fail@plt>
   140c0:	ldr	r3, [pc, #40]	; 140f0 <flatcc_builder_vector_push@@Base+0xe8>
   140c4:	ldr	r1, [pc, #40]	; 140f4 <flatcc_builder_vector_push@@Base+0xec>
   140c8:	ldr	r0, [pc, #40]	; 140f8 <flatcc_builder_vector_push@@Base+0xf0>
   140cc:	add	r3, pc, r3
   140d0:	ldr	r2, [pc, #36]	; 140fc <flatcc_builder_vector_push@@Base+0xf4>
   140d4:	add	r3, r3, #324	; 0x144
   140d8:	add	r1, pc, r1
   140dc:	add	r0, pc, r0
   140e0:	bl	1206c <__assert_fail@plt>
   140e4:	andeq	r3, r0, r0, ror r8
   140e8:			; <UNDEFINED> instruction: 0x00003fb4
   140ec:	andeq	r4, r0, ip, lsr #2
   140f0:	andeq	r3, r0, ip, asr #16
   140f4:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   140f8:	ldrdeq	r4, [r0], -ip
   140fc:	andeq	r0, r0, fp, lsl #7

00014100 <flatcc_builder_append_vector@@Base>:
   14100:	push	{r4, r5, r6, r7, r8, lr}
   14104:	mov	r7, r1
   14108:	ldr	r1, [r0, #32]
   1410c:	ldrh	r3, [r1, #14]
   14110:	cmp	r3, #4
   14114:	bne	141b4 <flatcc_builder_append_vector@@Base+0xb4>
   14118:	ldr	r3, [r1, #20]
   1411c:	ldr	r4, [r1, #24]
   14120:	add	ip, r2, r3
   14124:	cmp	r3, ip
   14128:	movls	r3, #0
   1412c:	movhi	r3, #1
   14130:	cmp	r4, ip
   14134:	movcs	r4, r3
   14138:	orrcc	r4, r3, #1
   1413c:	cmp	r4, #0
   14140:	bne	141b0 <flatcc_builder_append_vector@@Base+0xb0>
   14144:	ldr	r6, [r1, #16]
   14148:	str	ip, [r1, #20]
   1414c:	ldr	r8, [r0, #20]
   14150:	mul	r6, r6, r2
   14154:	ldr	r3, [r0, #24]
   14158:	add	r1, r6, r8
   1415c:	cmp	r1, r3
   14160:	mov	r5, r0
   14164:	str	r1, [r0, #20]
   14168:	bcs	14194 <flatcc_builder_append_vector@@Base+0x94>
   1416c:	ldr	r3, [r5, #16]
   14170:	adds	r3, r3, r8
   14174:	beq	1418c <flatcc_builder_append_vector@@Base+0x8c>
   14178:	mov	r0, r3
   1417c:	mov	r2, r6
   14180:	mov	r1, r7
   14184:	bl	11fb8 <memcpy@plt>
   14188:	mov	r3, r0
   1418c:	mov	r0, r3
   14190:	pop	{r4, r5, r6, r7, r8, pc}
   14194:	add	r1, r1, #1
   14198:	mvn	r2, #3
   1419c:	bl	12c10 <_start@@Base+0x40c>
   141a0:	cmp	r0, #0
   141a4:	beq	1416c <flatcc_builder_append_vector@@Base+0x6c>
   141a8:	mov	r3, r4
   141ac:	b	1418c <flatcc_builder_append_vector@@Base+0x8c>
   141b0:	bl	12180 <__assert_fail@plt+0x114>
   141b4:	ldr	r3, [pc, #28]	; 141d8 <flatcc_builder_append_vector@@Base+0xd8>
   141b8:	ldr	r1, [pc, #28]	; 141dc <flatcc_builder_append_vector@@Base+0xdc>
   141bc:	ldr	r0, [pc, #28]	; 141e0 <flatcc_builder_append_vector@@Base+0xe0>
   141c0:	add	r3, pc, r3
   141c4:	ldr	r2, [pc, #24]	; 141e4 <flatcc_builder_append_vector@@Base+0xe4>
   141c8:	add	r3, r3, #352	; 0x160
   141cc:	add	r1, pc, r1
   141d0:	add	r0, pc, r0
   141d4:	bl	1206c <__assert_fail@plt>
   141d8:	andeq	r3, r0, r8, asr r7
   141dc:	muleq	r0, ip, lr
   141e0:	andeq	r3, r0, r8, ror #31
   141e4:	muleq	r0, r3, r3

000141e8 <flatcc_builder_extend_offset_vector@@Base>:
   141e8:	ldr	ip, [r0, #32]
   141ec:	push	{r4, r5, r6, lr}
   141f0:	ldr	r3, [ip, #20]
   141f4:	adds	r2, r1, r3
   141f8:	movcs	r3, #1
   141fc:	movcc	r3, #0
   14200:	cmn	r2, #-1073741823	; 0xc0000001
   14204:	movls	r4, #0
   14208:	movhi	r4, #1
   1420c:	orrs	r4, r3, r4
   14210:	bne	1425c <flatcc_builder_extend_offset_vector@@Base+0x74>
   14214:	str	r2, [ip, #20]
   14218:	ldr	r6, [r0, #20]
   1421c:	ldr	r3, [r0, #24]
   14220:	add	r1, r6, r1, lsl #2
   14224:	cmp	r1, r3
   14228:	mov	r5, r0
   1422c:	str	r1, [r0, #20]
   14230:	bcs	14240 <flatcc_builder_extend_offset_vector@@Base+0x58>
   14234:	ldr	r0, [r5, #16]
   14238:	add	r0, r0, r6
   1423c:	pop	{r4, r5, r6, pc}
   14240:	add	r1, r1, #1
   14244:	mvn	r2, #3
   14248:	bl	12c10 <_start@@Base+0x40c>
   1424c:	cmp	r0, #0
   14250:	beq	14234 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   14254:	mov	r0, r4
   14258:	pop	{r4, r5, r6, pc}
   1425c:	bl	12180 <__assert_fail@plt+0x114>

00014260 <flatcc_builder_offset_vector_push@@Base>:
   14260:	ldr	r2, [r0, #32]
   14264:	push	{r4, r5, r6, lr}
   14268:	ldrh	r3, [r2, #14]
   1426c:	cmp	r3, #5
   14270:	bne	142d8 <flatcc_builder_offset_vector_push@@Base+0x78>
   14274:	ldr	r3, [r2, #20]
   14278:	cmn	r3, #-1073741823	; 0xc0000001
   1427c:	beq	142d0 <flatcc_builder_offset_vector_push@@Base+0x70>
   14280:	add	r3, r3, #1
   14284:	str	r3, [r2, #20]
   14288:	ldr	r5, [r0, #20]
   1428c:	ldr	r2, [r0, #24]
   14290:	add	r3, r5, #4
   14294:	cmp	r3, r2
   14298:	mov	r4, r0
   1429c:	mov	r6, r1
   142a0:	str	r3, [r0, #20]
   142a4:	bcs	142bc <flatcc_builder_offset_vector_push@@Base+0x5c>
   142a8:	ldr	r3, [r4, #16]
   142ac:	adds	r0, r3, r5
   142b0:	beq	142fc <flatcc_builder_offset_vector_push@@Base+0x9c>
   142b4:	str	r6, [r3, r5]
   142b8:	pop	{r4, r5, r6, pc}
   142bc:	mvn	r2, #3
   142c0:	add	r1, r5, #5
   142c4:	bl	12c10 <_start@@Base+0x40c>
   142c8:	cmp	r0, #0
   142cc:	beq	142a8 <flatcc_builder_offset_vector_push@@Base+0x48>
   142d0:	mov	r0, #0
   142d4:	pop	{r4, r5, r6, pc}
   142d8:	ldr	r3, [pc, #32]	; 14300 <flatcc_builder_offset_vector_push@@Base+0xa0>
   142dc:	ldr	r1, [pc, #32]	; 14304 <flatcc_builder_offset_vector_push@@Base+0xa4>
   142e0:	ldr	r0, [pc, #32]	; 14308 <flatcc_builder_offset_vector_push@@Base+0xa8>
   142e4:	add	r3, pc, r3
   142e8:	ldr	r2, [pc, #28]	; 1430c <flatcc_builder_offset_vector_push@@Base+0xac>
   142ec:	add	r3, r3, #384	; 0x180
   142f0:	add	r1, pc, r1
   142f4:	add	r0, pc, r0
   142f8:	bl	1206c <__assert_fail@plt>
   142fc:	pop	{r4, r5, r6, pc}
   14300:	andeq	r3, r0, r4, lsr r6
   14304:	andeq	r3, r0, r8, ror sp
   14308:	andeq	r3, r0, r0, lsr pc
   1430c:	andeq	r0, r0, r6, lsr #7

00014310 <flatcc_builder_append_offset_vector@@Base>:
   14310:	ldr	ip, [r0, #32]
   14314:	push	{r4, r5, r6, r7, r8, lr}
   14318:	ldrh	r3, [ip, #14]
   1431c:	cmp	r3, #5
   14320:	bne	143b8 <flatcc_builder_append_offset_vector@@Base+0xa8>
   14324:	mov	r6, r1
   14328:	ldr	r1, [ip, #20]
   1432c:	adds	r1, r2, r1
   14330:	movcs	lr, #1
   14334:	movcc	lr, #0
   14338:	cmn	r1, #-1073741823	; 0xc0000001
   1433c:	movls	r3, #0
   14340:	movhi	r3, #1
   14344:	orrs	r8, lr, r3
   14348:	bne	143b4 <flatcc_builder_append_offset_vector@@Base+0xa4>
   1434c:	str	r1, [ip, #20]
   14350:	ldr	r7, [r0, #20]
   14354:	lsl	r4, r2, #2
   14358:	ldr	r3, [r0, #24]
   1435c:	add	r1, r4, r7
   14360:	cmp	r1, r3
   14364:	mov	r5, r0
   14368:	str	r1, [r0, #20]
   1436c:	bcs	14398 <flatcc_builder_append_offset_vector@@Base+0x88>
   14370:	ldr	r3, [r5, #16]
   14374:	adds	r3, r3, r7
   14378:	beq	14390 <flatcc_builder_append_offset_vector@@Base+0x80>
   1437c:	mov	r0, r3
   14380:	mov	r2, r4
   14384:	mov	r1, r6
   14388:	bl	11fb8 <memcpy@plt>
   1438c:	mov	r3, r0
   14390:	mov	r0, r3
   14394:	pop	{r4, r5, r6, r7, r8, pc}
   14398:	add	r1, r1, #1
   1439c:	mvn	r2, #3
   143a0:	bl	12c10 <_start@@Base+0x40c>
   143a4:	cmp	r0, #0
   143a8:	beq	14370 <flatcc_builder_append_offset_vector@@Base+0x60>
   143ac:	mov	r3, r8
   143b0:	b	14390 <flatcc_builder_append_offset_vector@@Base+0x80>
   143b4:	bl	12180 <__assert_fail@plt+0x114>
   143b8:	ldr	r3, [pc, #28]	; 143dc <flatcc_builder_append_offset_vector@@Base+0xcc>
   143bc:	ldr	r1, [pc, #28]	; 143e0 <flatcc_builder_append_offset_vector@@Base+0xd0>
   143c0:	ldr	r0, [pc, #28]	; 143e4 <flatcc_builder_append_offset_vector@@Base+0xd4>
   143c4:	add	r3, pc, r3
   143c8:	mov	r2, #948	; 0x3b4
   143cc:	add	r3, r3, #420	; 0x1a4
   143d0:	add	r1, pc, r1
   143d4:	add	r0, pc, r0
   143d8:	bl	1206c <__assert_fail@plt>
   143dc:	andeq	r3, r0, r4, asr r5
   143e0:	muleq	r0, r8, ip
   143e4:	andeq	r3, r0, r0, asr lr

000143e8 <flatcc_builder_extend_string@@Base>:
   143e8:	ldr	r2, [r0, #32]
   143ec:	push	{r4, r5, r6, lr}
   143f0:	ldrh	r3, [r2, #14]
   143f4:	cmp	r3, #6
   143f8:	bne	14454 <flatcc_builder_extend_string@@Base+0x6c>
   143fc:	ldr	r3, [r2, #20]
   14400:	adds	r3, r1, r3
   14404:	bcs	14450 <flatcc_builder_extend_string@@Base+0x68>
   14408:	str	r3, [r2, #20]
   1440c:	ldr	r5, [r0, #20]
   14410:	ldr	r3, [r0, #24]
   14414:	add	r1, r1, r5
   14418:	cmp	r1, r3
   1441c:	mov	r4, r0
   14420:	str	r1, [r0, #20]
   14424:	bcs	14434 <flatcc_builder_extend_string@@Base+0x4c>
   14428:	ldr	r0, [r4, #16]
   1442c:	add	r0, r0, r5
   14430:	pop	{r4, r5, r6, pc}
   14434:	add	r1, r1, #1
   14438:	mvn	r2, #3
   1443c:	bl	12c10 <_start@@Base+0x40c>
   14440:	cmp	r0, #0
   14444:	beq	14428 <flatcc_builder_extend_string@@Base+0x40>
   14448:	mov	r0, #0
   1444c:	pop	{r4, r5, r6, pc}
   14450:	bl	12180 <__assert_fail@plt+0x114>
   14454:	ldr	r3, [pc, #28]	; 14478 <flatcc_builder_extend_string@@Base+0x90>
   14458:	ldr	r1, [pc, #28]	; 1447c <flatcc_builder_extend_string@@Base+0x94>
   1445c:	ldr	r0, [pc, #28]	; 14480 <flatcc_builder_extend_string@@Base+0x98>
   14460:	add	r3, pc, r3
   14464:	ldr	r2, [pc, #24]	; 14484 <flatcc_builder_extend_string@@Base+0x9c>
   14468:	add	r3, r3, #456	; 0x1c8
   1446c:	add	r1, pc, r1
   14470:	add	r0, pc, r0
   14474:	bl	1206c <__assert_fail@plt>
   14478:			; <UNDEFINED> instruction: 0x000034b8
   1447c:	strdeq	r3, [r0], -ip
   14480:	andeq	r3, r0, r8, ror #27
   14484:			; <UNDEFINED> instruction: 0x000003bd

00014488 <flatcc_builder_append_string@@Base>:
   14488:	push	{r4, r5, r6, r7, r8, lr}
   1448c:	mov	r7, r1
   14490:	ldr	r1, [r0, #32]
   14494:	ldrh	r3, [r1, #14]
   14498:	cmp	r3, #6
   1449c:	bne	14518 <flatcc_builder_append_string@@Base+0x90>
   144a0:	ldr	r3, [r1, #20]
   144a4:	mov	r5, r2
   144a8:	adds	r3, r2, r3
   144ac:	bcs	14514 <flatcc_builder_append_string@@Base+0x8c>
   144b0:	str	r3, [r1, #20]
   144b4:	ldr	r6, [r0, #20]
   144b8:	ldr	r3, [r0, #24]
   144bc:	add	r1, r2, r6
   144c0:	cmp	r1, r3
   144c4:	mov	r4, r0
   144c8:	str	r1, [r0, #20]
   144cc:	bcs	144f8 <flatcc_builder_append_string@@Base+0x70>
   144d0:	ldr	r3, [r4, #16]
   144d4:	adds	r3, r3, r6
   144d8:	beq	144f0 <flatcc_builder_append_string@@Base+0x68>
   144dc:	mov	r0, r3
   144e0:	mov	r2, r5
   144e4:	mov	r1, r7
   144e8:	bl	11fb8 <memcpy@plt>
   144ec:	mov	r3, r0
   144f0:	mov	r0, r3
   144f4:	pop	{r4, r5, r6, r7, r8, pc}
   144f8:	add	r1, r1, #1
   144fc:	mvn	r2, #3
   14500:	bl	12c10 <_start@@Base+0x40c>
   14504:	cmp	r0, #0
   14508:	beq	144d0 <flatcc_builder_append_string@@Base+0x48>
   1450c:	mov	r3, #0
   14510:	b	144f0 <flatcc_builder_append_string@@Base+0x68>
   14514:	bl	12180 <__assert_fail@plt+0x114>
   14518:	ldr	r3, [pc, #28]	; 1453c <flatcc_builder_append_string@@Base+0xb4>
   1451c:	ldr	r1, [pc, #28]	; 14540 <flatcc_builder_append_string@@Base+0xb8>
   14520:	ldr	r0, [pc, #28]	; 14544 <flatcc_builder_append_string@@Base+0xbc>
   14524:	add	r3, pc, r3
   14528:	ldr	r2, [pc, #24]	; 14548 <flatcc_builder_append_string@@Base+0xc0>
   1452c:	add	r3, r3, #488	; 0x1e8
   14530:	add	r1, pc, r1
   14534:	add	r0, pc, r0
   14538:	bl	1206c <__assert_fail@plt>
   1453c:	strdeq	r3, [r0], -r4
   14540:	andeq	r3, r0, r8, lsr fp
   14544:	andeq	r3, r0, r4, lsr #26
   14548:	andeq	r0, r0, r6, asr #7

0001454c <flatcc_builder_append_string_str@@Base>:
   1454c:	push	{r4, r5, r6, lr}
   14550:	mov	r5, r0
   14554:	mov	r0, r1
   14558:	mov	r4, r1
   1455c:	bl	12024 <strlen@plt>
   14560:	mov	r1, r4
   14564:	mov	r2, r0
   14568:	mov	r0, r5
   1456c:	pop	{r4, r5, r6, lr}
   14570:	b	14488 <flatcc_builder_append_string@@Base>

00014574 <flatcc_builder_append_string_strn@@Base>:
   14574:	push	{r4, r5, r6, lr}
   14578:	mov	r4, r1
   1457c:	mov	r6, r0
   14580:	mov	r1, #0
   14584:	mov	r0, r4
   14588:	mov	r5, r2
   1458c:	bl	12048 <memchr@plt>
   14590:	mov	r1, r4
   14594:	cmp	r0, #0
   14598:	subne	r5, r0, r4
   1459c:	mov	r2, r5
   145a0:	mov	r0, r6
   145a4:	pop	{r4, r5, r6, lr}
   145a8:	b	14488 <flatcc_builder_append_string@@Base>

000145ac <flatcc_builder_truncate_vector@@Base>:
   145ac:	ldr	r3, [r0, #32]
   145b0:	push	{r4, lr}
   145b4:	ldrh	r2, [r3, #14]
   145b8:	cmp	r2, #4
   145bc:	bne	14600 <flatcc_builder_truncate_vector@@Base+0x54>
   145c0:	ldr	ip, [r3, #20]
   145c4:	cmp	ip, r1
   145c8:	bcc	14624 <flatcc_builder_truncate_vector@@Base+0x78>
   145cc:	ldr	r2, [r3, #16]
   145d0:	sub	ip, ip, r1
   145d4:	str	ip, [r3, #20]
   145d8:	mul	r2, r2, r1
   145dc:	ldr	r3, [r0, #20]
   145e0:	ldr	r1, [r0, #16]
   145e4:	sub	r3, r3, r2
   145e8:	str	r3, [r0, #20]
   145ec:	add	r0, r1, r3
   145f0:	mov	r1, #0
   145f4:	bl	1203c <memset@plt>
   145f8:	mov	r0, #0
   145fc:	pop	{r4, pc}
   14600:	ldr	r3, [pc, #64]	; 14648 <flatcc_builder_truncate_vector@@Base+0x9c>
   14604:	ldr	r1, [pc, #64]	; 1464c <flatcc_builder_truncate_vector@@Base+0xa0>
   14608:	ldr	r0, [pc, #64]	; 14650 <flatcc_builder_truncate_vector@@Base+0xa4>
   1460c:	add	r3, pc, r3
   14610:	ldr	r2, [pc, #60]	; 14654 <flatcc_builder_truncate_vector@@Base+0xa8>
   14614:	add	r3, r3, #520	; 0x208
   14618:	add	r1, pc, r1
   1461c:	add	r0, pc, r0
   14620:	bl	1206c <__assert_fail@plt>
   14624:	ldr	r3, [pc, #44]	; 14658 <flatcc_builder_truncate_vector@@Base+0xac>
   14628:	ldr	r1, [pc, #44]	; 1465c <flatcc_builder_truncate_vector@@Base+0xb0>
   1462c:	ldr	r0, [pc, #44]	; 14660 <flatcc_builder_truncate_vector@@Base+0xb4>
   14630:	add	r3, pc, r3
   14634:	ldr	r2, [pc, #40]	; 14664 <flatcc_builder_truncate_vector@@Base+0xb8>
   14638:	add	r3, r3, #520	; 0x208
   1463c:	add	r1, pc, r1
   14640:	add	r0, pc, r0
   14644:	bl	1206c <__assert_fail@plt>
   14648:	andeq	r3, r0, ip, lsl #6
   1464c:	andeq	r3, r0, r0, asr sl
   14650:	muleq	r0, ip, fp
   14654:	ldrdeq	r0, [r0], -r9
   14658:	andeq	r3, r0, r8, ror #5
   1465c:	andeq	r3, r0, ip, lsr #20
   14660:	andeq	r3, r0, r4, asr #24
   14664:	ldrdeq	r0, [r0], -sl

00014668 <flatcc_builder_truncate_offset_vector@@Base>:
   14668:	ldr	r3, [r0, #32]
   1466c:	push	{r4, lr}
   14670:	ldrh	r2, [r3, #14]
   14674:	cmp	r2, #5
   14678:	bne	146bc <flatcc_builder_truncate_offset_vector@@Base+0x54>
   1467c:	ldr	ip, [r3, #20]
   14680:	cmp	ip, r1
   14684:	bcc	146e0 <flatcc_builder_truncate_offset_vector@@Base+0x78>
   14688:	ldr	r2, [r3, #16]
   1468c:	sub	ip, ip, r1
   14690:	str	ip, [r3, #20]
   14694:	mul	r2, r2, r1
   14698:	ldr	r3, [r0, #20]
   1469c:	ldr	r1, [r0, #16]
   146a0:	sub	r3, r3, r2
   146a4:	str	r3, [r0, #20]
   146a8:	add	r0, r1, r3
   146ac:	mov	r1, #0
   146b0:	bl	1203c <memset@plt>
   146b4:	mov	r0, #0
   146b8:	pop	{r4, pc}
   146bc:	ldr	r3, [pc, #64]	; 14704 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   146c0:	ldr	r1, [pc, #64]	; 14708 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   146c4:	ldr	r0, [pc, #64]	; 1470c <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   146c8:	add	r3, pc, r3
   146cc:	ldr	r2, [pc, #60]	; 14710 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   146d0:	add	r3, r3, #552	; 0x228
   146d4:	add	r1, pc, r1
   146d8:	add	r0, pc, r0
   146dc:	bl	1206c <__assert_fail@plt>
   146e0:	ldr	r3, [pc, #44]	; 14714 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   146e4:	ldr	r1, [pc, #44]	; 14718 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   146e8:	ldr	r0, [pc, #44]	; 1471c <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   146ec:	add	r3, pc, r3
   146f0:	ldr	r2, [pc, #40]	; 14720 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   146f4:	add	r3, r3, #552	; 0x228
   146f8:	add	r1, pc, r1
   146fc:	add	r0, pc, r0
   14700:	bl	1206c <__assert_fail@plt>
   14704:	andeq	r3, r0, r0, asr r2
   14708:	muleq	r0, r4, r9
   1470c:	andeq	r3, r0, ip, asr #22
   14710:	andeq	r0, r0, r2, ror #7
   14714:	andeq	r3, r0, ip, lsr #4
   14718:	andeq	r3, r0, r0, ror r9
   1471c:	andeq	r3, r0, ip, lsr #23
   14720:	andeq	r0, r0, r3, ror #7

00014724 <flatcc_builder_truncate_string@@Base>:
   14724:	ldr	r2, [r0, #32]
   14728:	push	{r4, lr}
   1472c:	ldrh	r3, [r2, #14]
   14730:	cmp	r3, #6
   14734:	bne	14774 <flatcc_builder_truncate_string@@Base+0x50>
   14738:	ldr	r3, [r2, #20]
   1473c:	cmp	r3, r1
   14740:	bcc	14798 <flatcc_builder_truncate_string@@Base+0x74>
   14744:	sub	r3, r3, r1
   14748:	str	r3, [r2, #20]
   1474c:	ldr	r3, [r0, #20]
   14750:	ldr	r2, [r0, #16]
   14754:	sub	r3, r3, r1
   14758:	str	r3, [r0, #20]
   1475c:	add	r0, r2, r3
   14760:	mov	r2, r1
   14764:	mov	r1, #0
   14768:	bl	1203c <memset@plt>
   1476c:	mov	r0, #0
   14770:	pop	{r4, pc}
   14774:	ldr	r3, [pc, #64]	; 147bc <flatcc_builder_truncate_string@@Base+0x98>
   14778:	ldr	r1, [pc, #64]	; 147c0 <flatcc_builder_truncate_string@@Base+0x9c>
   1477c:	ldr	r0, [pc, #64]	; 147c4 <flatcc_builder_truncate_string@@Base+0xa0>
   14780:	add	r3, pc, r3
   14784:	ldr	r2, [pc, #60]	; 147c8 <flatcc_builder_truncate_string@@Base+0xa4>
   14788:	add	r3, r3, #592	; 0x250
   1478c:	add	r1, pc, r1
   14790:	add	r0, pc, r0
   14794:	bl	1206c <__assert_fail@plt>
   14798:	ldr	r3, [pc, #44]	; 147cc <flatcc_builder_truncate_string@@Base+0xa8>
   1479c:	ldr	r1, [pc, #44]	; 147d0 <flatcc_builder_truncate_string@@Base+0xac>
   147a0:	ldr	r0, [pc, #44]	; 147d4 <flatcc_builder_truncate_string@@Base+0xb0>
   147a4:	add	r3, pc, r3
   147a8:	mov	r2, #1004	; 0x3ec
   147ac:	add	r3, r3, #592	; 0x250
   147b0:	add	r1, pc, r1
   147b4:	add	r0, pc, r0
   147b8:	bl	1206c <__assert_fail@plt>
   147bc:	muleq	r0, r8, r1
   147c0:	ldrdeq	r3, [r0], -ip
   147c4:	andeq	r3, r0, r8, asr #21
   147c8:	andeq	r0, r0, fp, ror #7
   147cc:	andeq	r3, r0, r4, ror r1
   147d0:			; <UNDEFINED> instruction: 0x000038b8
   147d4:	andeq	r3, r0, r0, lsr fp

000147d8 <flatcc_builder_start_vector@@Base>:
   147d8:	cmp	r2, #4
   147dc:	push	{r4, r5, r6, lr}
   147e0:	mov	r6, r1
   147e4:	movcs	r1, r2
   147e8:	movcc	r1, #4
   147ec:	mov	r5, r3
   147f0:	mov	r4, r0
   147f4:	bl	12ec0 <flatcc_builder_default_alloc@@Base+0x23c>
   147f8:	cmp	r0, #0
   147fc:	bne	14848 <flatcc_builder_start_vector@@Base+0x70>
   14800:	ldr	r2, [r4, #32]
   14804:	mov	lr, #4
   14808:	str	r6, [r2, #16]
   1480c:	str	r0, [r2, #20]
   14810:	str	r5, [r2, #24]
   14814:	ldr	ip, [r4, #28]
   14818:	ldr	r3, [r4, #64]	; 0x40
   1481c:	ldr	r1, [r4, #60]	; 0x3c
   14820:	sub	r3, r3, ip
   14824:	cmn	r3, #4
   14828:	mvnhi	r3, #3
   1482c:	strh	lr, [r2, #14]
   14830:	add	r1, r1, ip
   14834:	str	r3, [r4, #24]
   14838:	mvn	r3, #3
   1483c:	str	r1, [r4, #16]
   14840:	str	r3, [r2, #4]
   14844:	pop	{r4, r5, r6, pc}
   14848:	mvn	r0, #0
   1484c:	pop	{r4, r5, r6, pc}

00014850 <flatcc_builder_start_offset_vector@@Base>:
   14850:	push	{r4, lr}
   14854:	mov	r1, #4
   14858:	mov	r4, r0
   1485c:	bl	12ec0 <flatcc_builder_default_alloc@@Base+0x23c>
   14860:	cmp	r0, #0
   14864:	bne	148b0 <flatcc_builder_start_offset_vector@@Base+0x60>
   14868:	ldr	r3, [r4, #32]
   1486c:	mov	r2, #4
   14870:	mov	lr, #5
   14874:	str	r0, [r3, #20]
   14878:	str	r2, [r3, #16]
   1487c:	ldr	ip, [r4, #28]
   14880:	ldr	r2, [r4, #64]	; 0x40
   14884:	ldr	r1, [r4, #60]	; 0x3c
   14888:	sub	r2, r2, ip
   1488c:	cmn	r2, #4
   14890:	mvnhi	r2, #3
   14894:	strh	lr, [r3, #14]
   14898:	add	r1, r1, ip
   1489c:	str	r2, [r4, #24]
   148a0:	mvn	r2, #3
   148a4:	str	r1, [r4, #16]
   148a8:	str	r2, [r3, #4]
   148ac:	pop	{r4, pc}
   148b0:	mvn	r0, #0
   148b4:	pop	{r4, pc}

000148b8 <flatcc_builder_start_string@@Base>:
   148b8:	push	{r4, lr}
   148bc:	mov	r1, #1
   148c0:	mov	r4, r0
   148c4:	bl	12ec0 <flatcc_builder_default_alloc@@Base+0x23c>
   148c8:	cmp	r0, #0
   148cc:	bne	14918 <flatcc_builder_start_string@@Base+0x60>
   148d0:	ldr	r3, [r4, #32]
   148d4:	mov	r2, #1
   148d8:	mov	lr, #6
   148dc:	str	r0, [r3, #20]
   148e0:	str	r2, [r3, #16]
   148e4:	ldr	ip, [r4, #28]
   148e8:	ldr	r2, [r4, #64]	; 0x40
   148ec:	ldr	r1, [r4, #60]	; 0x3c
   148f0:	sub	r2, r2, ip
   148f4:	cmn	r2, #4
   148f8:	mvnhi	r2, #3
   148fc:	strh	lr, [r3, #14]
   14900:	add	r1, r1, ip
   14904:	str	r2, [r4, #24]
   14908:	mvn	r2, #3
   1490c:	str	r1, [r4, #16]
   14910:	str	r2, [r3, #4]
   14914:	pop	{r4, pc}
   14918:	mvn	r0, #0
   1491c:	pop	{r4, pc}

00014920 <flatcc_builder_reserve_table@@Base>:
   14920:	cmp	r1, #0
   14924:	push	{r4, r5, r6, r7, lr}
   14928:	sub	sp, sp, #12
   1492c:	blt	14a04 <flatcc_builder_reserve_table@@Base+0xe4>
   14930:	ldr	r2, [r0, #32]
   14934:	add	r1, r1, #2
   14938:	mov	r5, r0
   1493c:	ldrh	r6, [r2, #28]
   14940:	ldr	r3, [r2, #16]
   14944:	ldr	r0, [r0, #56]	; 0x38
   14948:	lsl	r4, r1, #1
   1494c:	add	r6, r3, r6, lsl #1
   14950:	add	r2, r6, r4
   14954:	cmp	r2, r0
   14958:	bhi	149b4 <flatcc_builder_reserve_table@@Base+0x94>
   1495c:	ldr	r3, [r5, #52]	; 0x34
   14960:	adds	r3, r3, r6
   14964:	streq	r3, [r5, #4]
   14968:	mvneq	r0, #0
   1496c:	beq	149ac <flatcc_builder_reserve_table@@Base+0x8c>
   14970:	ldr	r2, [r5, #32]
   14974:	add	r3, r3, #4
   14978:	str	r3, [r5, #4]
   1497c:	ldr	r6, [r2, #20]
   14980:	ldr	r3, [r5, #80]	; 0x50
   14984:	add	r2, r4, r6
   14988:	sub	r2, r2, #3
   1498c:	cmp	r2, r3
   14990:	bhi	149dc <flatcc_builder_reserve_table@@Base+0xbc>
   14994:	ldr	r3, [r5, #76]	; 0x4c
   14998:	add	r3, r3, r6
   1499c:	cmp	r3, #0
   149a0:	movne	r0, #0
   149a4:	mvneq	r0, #0
   149a8:	str	r3, [r5]
   149ac:	add	sp, sp, #12
   149b0:	pop	{r4, r5, r6, r7, pc}
   149b4:	mov	r3, #0
   149b8:	ldr	r0, [r5, #40]	; 0x28
   149bc:	add	r1, r5, #52	; 0x34
   149c0:	str	r3, [sp]
   149c4:	mov	r3, #1
   149c8:	ldr	r7, [r5, #48]	; 0x30
   149cc:	blx	r7
   149d0:	cmp	r0, #0
   149d4:	beq	1495c <flatcc_builder_reserve_table@@Base+0x3c>
   149d8:	bl	120e0 <__assert_fail@plt+0x74>
   149dc:	mov	r3, #3
   149e0:	ldr	r0, [r5, #40]	; 0x28
   149e4:	add	r1, r5, #76	; 0x4c
   149e8:	str	r3, [sp]
   149ec:	mov	r3, #0
   149f0:	ldr	r4, [r5, #48]	; 0x30
   149f4:	blx	r4
   149f8:	cmp	r0, #0
   149fc:	beq	14994 <flatcc_builder_reserve_table@@Base+0x74>
   14a00:	b	149d8 <flatcc_builder_reserve_table@@Base+0xb8>
   14a04:	ldr	r3, [pc, #28]	; 14a28 <flatcc_builder_reserve_table@@Base+0x108>
   14a08:	ldr	r1, [pc, #28]	; 14a2c <flatcc_builder_reserve_table@@Base+0x10c>
   14a0c:	ldr	r0, [pc, #28]	; 14a30 <flatcc_builder_reserve_table@@Base+0x110>
   14a10:	add	r3, pc, r3
   14a14:	ldr	r2, [pc, #24]	; 14a34 <flatcc_builder_reserve_table@@Base+0x114>
   14a18:	add	r3, r3, #624	; 0x270
   14a1c:	add	r1, pc, r1
   14a20:	add	r0, pc, r0
   14a24:	bl	1206c <__assert_fail@plt>
   14a28:	andeq	r2, r0, r8, lsl #30
   14a2c:	andeq	r3, r0, ip, asr #12
   14a30:	andeq	r3, r0, r8, ror #17
   14a34:	andeq	r0, r0, r9, lsr #8

00014a38 <flatcc_builder_start_table@@Base>:
   14a38:	push	{r4, r5, r6, r7, r8, lr}
   14a3c:	mov	r5, r1
   14a40:	sub	sp, sp, #8
   14a44:	mov	r1, #4
   14a48:	mov	r4, r0
   14a4c:	bl	12ec0 <flatcc_builder_default_alloc@@Base+0x23c>
   14a50:	subs	r7, r0, #0
   14a54:	bne	14b8c <flatcc_builder_start_table@@Base+0x154>
   14a58:	ldr	r3, [r4, #52]	; 0x34
   14a5c:	ldr	r6, [r4, #4]
   14a60:	ldr	r0, [r4, #32]
   14a64:	sub	r6, r6, r3
   14a68:	add	r5, r5, #2
   14a6c:	str	r6, [r0, #16]
   14a70:	ldr	r1, [r4, #76]	; 0x4c
   14a74:	ldr	r2, [r4]
   14a78:	lsl	r5, r5, #1
   14a7c:	sub	r2, r2, r1
   14a80:	str	r2, [r0, #20]
   14a84:	ldr	r2, [r4, #12]
   14a88:	ldr	lr, [pc, #268]	; 14b9c <flatcc_builder_start_table@@Base+0x164>
   14a8c:	str	r2, [r0, #24]
   14a90:	ldrh	r2, [r4, #8]
   14a94:	mov	r1, #3
   14a98:	strh	r2, [r0, #28]
   14a9c:	add	r6, r6, r2, lsl #1
   14aa0:	ldr	ip, [r4, #56]	; 0x38
   14aa4:	add	r2, r6, r5
   14aa8:	cmp	r2, ip
   14aac:	strh	r7, [r4, #8]
   14ab0:	str	lr, [r4, #12]
   14ab4:	strh	r1, [r0, #14]
   14ab8:	bhi	14b3c <flatcc_builder_start_table@@Base+0x104>
   14abc:	adds	r6, r3, r6
   14ac0:	streq	r6, [r4, #4]
   14ac4:	beq	14b8c <flatcc_builder_start_table@@Base+0x154>
   14ac8:	ldr	r3, [r4, #32]
   14acc:	add	r6, r6, #4
   14ad0:	str	r6, [r4, #4]
   14ad4:	ldr	r6, [r3, #20]
   14ad8:	sub	r2, r5, #3
   14adc:	ldr	r3, [r4, #80]	; 0x50
   14ae0:	add	r2, r2, r6
   14ae4:	cmp	r2, r3
   14ae8:	bhi	14b64 <flatcc_builder_start_table@@Base+0x12c>
   14aec:	ldr	r3, [r4, #76]	; 0x4c
   14af0:	add	r3, r3, r6
   14af4:	cmp	r3, #0
   14af8:	str	r3, [r4]
   14afc:	beq	14b8c <flatcc_builder_start_table@@Base+0x154>
   14b00:	ldr	r0, [r4, #28]
   14b04:	ldr	r3, [r4, #64]	; 0x40
   14b08:	ldr	r2, [pc, #144]	; 14ba0 <flatcc_builder_start_table@@Base+0x168>
   14b0c:	sub	r3, r3, r0
   14b10:	ldr	r1, [r4, #60]	; 0x3c
   14b14:	ldr	ip, [r4, #32]
   14b18:	cmp	r3, r2
   14b1c:	add	r1, r1, r0
   14b20:	movcs	r3, r2
   14b24:	str	r1, [r4, #16]
   14b28:	str	r3, [r4, #24]
   14b2c:	mov	r0, r7
   14b30:	str	r2, [ip, #4]
   14b34:	add	sp, sp, #8
   14b38:	pop	{r4, r5, r6, r7, r8, pc}
   14b3c:	ldr	r0, [r4, #40]	; 0x28
   14b40:	mov	r3, #1
   14b44:	str	r7, [sp]
   14b48:	add	r1, r4, #52	; 0x34
   14b4c:	ldr	r8, [r4, #48]	; 0x30
   14b50:	blx	r8
   14b54:	cmp	r0, #0
   14b58:	bne	14b88 <flatcc_builder_start_table@@Base+0x150>
   14b5c:	ldr	r3, [r4, #52]	; 0x34
   14b60:	b	14abc <flatcc_builder_start_table@@Base+0x84>
   14b64:	mov	r3, #3
   14b68:	ldr	r0, [r4, #40]	; 0x28
   14b6c:	add	r1, r4, #76	; 0x4c
   14b70:	str	r3, [sp]
   14b74:	mov	r3, #0
   14b78:	ldr	r5, [r4, #48]	; 0x30
   14b7c:	blx	r5
   14b80:	cmp	r0, #0
   14b84:	beq	14aec <flatcc_builder_start_table@@Base+0xb4>
   14b88:	bl	120e0 <__assert_fail@plt+0x74>
   14b8c:	mvn	r7, #0
   14b90:	mov	r0, r7
   14b94:	add	sp, sp, #8
   14b98:	pop	{r4, r5, r6, r7, r8, pc}
   14b9c:	svccs	0x00693b52
   14ba0:	strdeq	pc, [r0], -ip

00014ba4 <flatcc_builder_create_vtable@@Base>:
   14ba4:	push	{r4, r5, r6, lr}
   14ba8:	sub	sp, sp, #80	; 0x50
   14bac:	subs	r3, r2, #0
   14bb0:	mov	r2, #0
   14bb4:	mov	r4, r0
   14bb8:	str	r2, [sp, #8]
   14bbc:	str	r2, [sp, #12]
   14bc0:	beq	14c38 <flatcc_builder_create_vtable@@Base+0x94>
   14bc4:	ldr	r0, [r0, #152]	; 0x98
   14bc8:	mov	r2, #1
   14bcc:	cmp	r0, #0
   14bd0:	str	r1, [sp, #16]
   14bd4:	str	r3, [sp, #8]
   14bd8:	str	r3, [sp, #20]
   14bdc:	str	r2, [sp, #12]
   14be0:	mov	r1, r3
   14be4:	beq	14c54 <flatcc_builder_create_vtable@@Base+0xb0>
   14be8:	ldr	r2, [r4, #136]	; 0x88
   14bec:	sub	r5, r2, r3
   14bf0:	cmp	r2, r5
   14bf4:	ble	14c50 <flatcc_builder_create_vtable@@Base+0xac>
   14bf8:	ldr	r0, [r4, #36]	; 0x24
   14bfc:	ldr	r2, [sp, #12]
   14c00:	str	r3, [sp]
   14c04:	add	r1, sp, #16
   14c08:	ldr	r6, [r4, #44]	; 0x2c
   14c0c:	mov	r3, r5
   14c10:	blx	r6
   14c14:	cmp	r0, #0
   14c18:	bne	14cc8 <flatcc_builder_create_vtable@@Base+0x124>
   14c1c:	cmp	r5, #0
   14c20:	str	r5, [r4, #136]	; 0x88
   14c24:	beq	14c2c <flatcc_builder_create_vtable@@Base+0x88>
   14c28:	add	r5, r5, #1
   14c2c:	mov	r0, r5
   14c30:	add	sp, sp, #80	; 0x50
   14c34:	pop	{r4, r5, r6, pc}
   14c38:	ldr	r3, [r0, #152]	; 0x98
   14c3c:	cmp	r3, #0
   14c40:	bne	14c50 <flatcc_builder_create_vtable@@Base+0xac>
   14c44:	ldr	r3, [r0, #180]	; 0xb4
   14c48:	cmp	r3, #0
   14c4c:	beq	14cbc <flatcc_builder_create_vtable@@Base+0x118>
   14c50:	bl	12148 <__assert_fail@plt+0xdc>
   14c54:	ldr	r2, [r4, #180]	; 0xb4
   14c58:	cmp	r2, #0
   14c5c:	bne	14be8 <flatcc_builder_create_vtable@@Base+0x44>
   14c60:	ldr	r5, [r4, #140]	; 0x8c
   14c64:	add	r3, r5, r3
   14c68:	cmp	r5, r3
   14c6c:	str	r3, [r4, #140]	; 0x8c
   14c70:	bgt	14cec <flatcc_builder_create_vtable@@Base+0x148>
   14c74:	ldr	r0, [r4, #36]	; 0x24
   14c78:	ldr	r2, [sp, #12]
   14c7c:	str	r1, [sp]
   14c80:	mov	r3, r5
   14c84:	ldr	r4, [r4, #44]	; 0x2c
   14c88:	add	r1, sp, #16
   14c8c:	blx	r4
   14c90:	cmp	r0, #0
   14c94:	beq	14c28 <flatcc_builder_create_vtable@@Base+0x84>
   14c98:	ldr	r3, [pc, #80]	; 14cf0 <flatcc_builder_create_vtable@@Base+0x14c>
   14c9c:	ldr	r1, [pc, #80]	; 14cf4 <flatcc_builder_create_vtable@@Base+0x150>
   14ca0:	ldr	r0, [pc, #80]	; 14cf8 <flatcc_builder_create_vtable@@Base+0x154>
   14ca4:	add	r3, pc, r3
   14ca8:	ldr	r2, [pc, #76]	; 14cfc <flatcc_builder_create_vtable@@Base+0x158>
   14cac:	add	r3, r3, #16
   14cb0:	add	r1, pc, r1
   14cb4:	add	r0, pc, r0
   14cb8:	bl	1206c <__assert_fail@plt>
   14cbc:	ldr	r5, [r4, #140]	; 0x8c
   14cc0:	mov	r1, r3
   14cc4:	b	14c74 <flatcc_builder_create_vtable@@Base+0xd0>
   14cc8:	ldr	r3, [pc, #48]	; 14d00 <flatcc_builder_create_vtable@@Base+0x15c>
   14ccc:	ldr	r1, [pc, #48]	; 14d04 <flatcc_builder_create_vtable@@Base+0x160>
   14cd0:	ldr	r0, [pc, #48]	; 14d08 <flatcc_builder_create_vtable@@Base+0x164>
   14cd4:	add	r3, pc, r3
   14cd8:	ldr	r2, [pc, #44]	; 14d0c <flatcc_builder_create_vtable@@Base+0x168>
   14cdc:	add	r3, r3, #28
   14ce0:	add	r1, pc, r1
   14ce4:	add	r0, pc, r0
   14ce8:	bl	1206c <__assert_fail@plt>
   14cec:	bl	12110 <__assert_fail@plt+0xa4>
   14cf0:	andeq	r2, r0, r4, ror ip
   14cf4:			; <UNDEFINED> instruction: 0x000033b8
   14cf8:	andeq	r3, r0, ip, lsr r4
   14cfc:	andeq	r0, r0, r5, lsr #5
   14d00:	andeq	r2, r0, r4, asr #24
   14d04:	andeq	r3, r0, r8, lsl #7
   14d08:	andeq	r3, r0, ip, lsl #8
   14d0c:	andeq	r0, r0, fp, lsl #5

00014d10 <flatcc_builder_create_cached_vtable@@Base>:
   14d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d14:	sub	sp, sp, #28
   14d18:	ldr	r4, [r0, #116]	; 0x74
   14d1c:	mov	sl, r3
   14d20:	cmp	r4, #0
   14d24:	mov	r8, r0
   14d28:	str	r1, [sp, #8]
   14d2c:	mov	r7, r2
   14d30:	rsbne	r3, r4, #32
   14d34:	beq	14e8c <flatcc_builder_create_cached_vtable@@Base+0x17c>
   14d38:	lsr	sl, sl, r3
   14d3c:	ldr	r3, [r8, #92]	; 0x5c
   14d40:	adds	r2, r3, sl, lsl #2
   14d44:	str	r3, [sp, #16]
   14d48:	str	r2, [sp, #20]
   14d4c:	beq	14e80 <flatcc_builder_create_cached_vtable@@Base+0x170>
   14d50:	ldr	r5, [r3, sl, lsl #2]
   14d54:	cmp	r5, #0
   14d58:	beq	14f7c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   14d5c:	mov	r3, #0
   14d60:	ldr	fp, [r8, #100]	; 0x64
   14d64:	ldr	r6, [r8, #68]	; 0x44
   14d68:	mov	r9, r2
   14d6c:	str	r3, [sp, #12]
   14d70:	b	14d84 <flatcc_builder_create_cached_vtable@@Base+0x74>
   14d74:	ldr	r5, [r4, #12]
   14d78:	add	r9, r4, #12
   14d7c:	cmp	r5, #0
   14d80:	beq	14dd4 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   14d84:	add	r4, fp, r5
   14d88:	ldr	r2, [r4, #8]
   14d8c:	add	r1, r6, r2
   14d90:	ldrh	r2, [r6, r2]
   14d94:	cmp	r2, r7
   14d98:	bne	14d74 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14d9c:	mov	r2, r7
   14da0:	ldr	r0, [sp, #8]
   14da4:	bl	11fc4 <memcmp@plt>
   14da8:	cmp	r0, #0
   14dac:	bne	14d74 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14db0:	ldr	r1, [r4, #4]
   14db4:	ldr	r2, [r8, #152]	; 0x98
   14db8:	cmp	r1, r2
   14dbc:	beq	14e50 <flatcc_builder_create_cached_vtable@@Base+0x140>
   14dc0:	ldr	r5, [r4, #12]
   14dc4:	add	r9, r4, #12
   14dc8:	cmp	r5, #0
   14dcc:	str	r4, [sp, #12]
   14dd0:	bne	14d84 <flatcc_builder_create_cached_vtable@@Base+0x74>
   14dd4:	ldr	r4, [r8, #124]	; 0x7c
   14dd8:	ldr	r3, [r8, #104]	; 0x68
   14ddc:	add	r2, r4, #16
   14de0:	cmp	r2, r3
   14de4:	bhi	14f54 <flatcc_builder_create_cached_vtable@@Base+0x244>
   14de8:	ldr	r5, [r8, #100]	; 0x64
   14dec:	adds	r6, r5, r4
   14df0:	beq	14e80 <flatcc_builder_create_cached_vtable@@Base+0x170>
   14df4:	ldr	r3, [r8, #124]	; 0x7c
   14df8:	ldr	r0, [sp, #16]
   14dfc:	ldr	r2, [r8, #152]	; 0x98
   14e00:	add	r1, r3, #16
   14e04:	str	r1, [r8, #124]	; 0x7c
   14e08:	str	r2, [r6, #4]
   14e0c:	ldr	r1, [r0, sl, lsl #2]
   14e10:	mov	r2, r7
   14e14:	str	r1, [r6, #12]
   14e18:	str	r3, [r0, sl, lsl #2]
   14e1c:	ldr	r1, [sp, #8]
   14e20:	mov	r0, r8
   14e24:	bl	14ba4 <flatcc_builder_create_vtable@@Base>
   14e28:	cmp	r0, #0
   14e2c:	str	r0, [r5, r4]
   14e30:	beq	14e80 <flatcc_builder_create_cached_vtable@@Base+0x170>
   14e34:	ldr	r3, [sp, #12]
   14e38:	cmp	r3, #0
   14e3c:	beq	14f84 <flatcc_builder_create_cached_vtable@@Base+0x274>
   14e40:	ldr	r3, [r3, #8]
   14e44:	str	r3, [r6, #8]
   14e48:	add	sp, sp, #28
   14e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e50:	ldr	r3, [sp, #20]
   14e54:	cmp	r3, r9
   14e58:	beq	14e74 <flatcc_builder_create_cached_vtable@@Base+0x164>
   14e5c:	ldr	r2, [sp, #16]
   14e60:	ldr	r3, [r4, #12]
   14e64:	str	r3, [r9]
   14e68:	ldr	r3, [r2, sl, lsl #2]
   14e6c:	str	r3, [r4, #12]
   14e70:	str	r5, [r2, sl, lsl #2]
   14e74:	ldr	r0, [r4]
   14e78:	add	sp, sp, #28
   14e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e80:	mov	r0, #0
   14e84:	add	sp, sp, #28
   14e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e8c:	ldr	r3, [r0, #124]	; 0x7c
   14e90:	add	r5, r0, #92	; 0x5c
   14e94:	cmp	r3, #0
   14e98:	bne	1501c <flatcc_builder_create_cached_vtable@@Base+0x30c>
   14e9c:	ldr	r3, [r0, #104]	; 0x68
   14ea0:	cmp	r3, #15
   14ea4:	bls	14f28 <flatcc_builder_create_cached_vtable@@Base+0x218>
   14ea8:	ldr	r3, [r8, #100]	; 0x64
   14eac:	cmp	r3, #0
   14eb0:	beq	14e80 <flatcc_builder_create_cached_vtable@@Base+0x170>
   14eb4:	mov	r2, #16
   14eb8:	mov	r3, #5
   14ebc:	str	r2, [r8, #124]	; 0x7c
   14ec0:	ldr	r0, [r8, #40]	; 0x28
   14ec4:	mov	r1, r5
   14ec8:	str	r3, [sp]
   14ecc:	mov	r2, #256	; 0x100
   14ed0:	ldr	r5, [r8, #48]	; 0x30
   14ed4:	mov	r3, #1
   14ed8:	blx	r5
   14edc:	cmp	r0, #0
   14ee0:	bne	14e80 <flatcc_builder_create_cached_vtable@@Base+0x170>
   14ee4:	ldr	r1, [r8, #96]	; 0x60
   14ee8:	mov	r3, #256	; 0x100
   14eec:	b	14ef4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   14ef0:	mov	r3, r2
   14ef4:	lsl	r2, r3, #1
   14ef8:	cmp	r2, r1
   14efc:	bls	14ef0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   14f00:	lsr	r3, r3, #2
   14f04:	cmp	r3, #1
   14f08:	bls	14fdc <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   14f0c:	mov	r2, #1
   14f10:	add	r4, r4, #1
   14f14:	cmp	r3, r2, lsl r4
   14f18:	bhi	14f10 <flatcc_builder_create_cached_vtable@@Base+0x200>
   14f1c:	rsb	r3, r4, #32
   14f20:	str	r4, [r8, #116]	; 0x74
   14f24:	b	14d38 <flatcc_builder_create_cached_vtable@@Base+0x28>
   14f28:	mov	r3, #6
   14f2c:	ldr	r0, [r0, #40]	; 0x28
   14f30:	mov	r2, #16
   14f34:	str	r3, [sp]
   14f38:	add	r1, r8, #100	; 0x64
   14f3c:	ldr	r6, [r8, #48]	; 0x30
   14f40:	mov	r3, r4
   14f44:	blx	r6
   14f48:	cmp	r0, #0
   14f4c:	beq	14ea8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14f50:	b	15008 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   14f54:	mov	r3, #6
   14f58:	ldr	r0, [r8, #40]	; 0x28
   14f5c:	add	r1, r8, #100	; 0x64
   14f60:	str	r3, [sp]
   14f64:	mov	r3, #0
   14f68:	ldr	r5, [r8, #48]	; 0x30
   14f6c:	blx	r5
   14f70:	cmp	r0, #0
   14f74:	beq	14de8 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   14f78:	b	15008 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   14f7c:	str	r5, [sp, #12]
   14f80:	b	14dd4 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   14f84:	ldr	r3, [r8, #172]	; 0xac
   14f88:	ldr	r9, [r8, #120]	; 0x78
   14f8c:	cmp	r3, #0
   14f90:	add	r2, r9, r7
   14f94:	beq	14fa0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   14f98:	cmp	r3, r2
   14f9c:	bcc	1500c <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   14fa0:	ldr	r3, [r8, #72]	; 0x48
   14fa4:	cmp	r3, r2
   14fa8:	bcc	14fe4 <flatcc_builder_create_cached_vtable@@Base+0x2d4>
   14fac:	ldr	r3, [r8, #68]	; 0x44
   14fb0:	adds	r0, r3, r9
   14fb4:	beq	15040 <flatcc_builder_create_cached_vtable@@Base+0x330>
   14fb8:	ldr	r3, [r8, #120]	; 0x78
   14fbc:	ldr	r1, [sp, #8]
   14fc0:	add	ip, r3, r7
   14fc4:	str	r3, [r6, #8]
   14fc8:	mov	r2, r7
   14fcc:	str	ip, [r8, #120]	; 0x78
   14fd0:	bl	11fb8 <memcpy@plt>
   14fd4:	ldr	r0, [r5, r4]
   14fd8:	b	14e48 <flatcc_builder_create_cached_vtable@@Base+0x138>
   14fdc:	mov	r3, #32
   14fe0:	b	14f20 <flatcc_builder_create_cached_vtable@@Base+0x210>
   14fe4:	mov	r3, #2
   14fe8:	ldr	r0, [r8, #40]	; 0x28
   14fec:	add	r1, r8, #68	; 0x44
   14ff0:	str	r3, [sp]
   14ff4:	mov	r3, #0
   14ff8:	ldr	sl, [r8, #48]	; 0x30
   14ffc:	blx	sl
   15000:	cmp	r0, #0
   15004:	beq	14fac <flatcc_builder_create_cached_vtable@@Base+0x29c>
   15008:	bl	120e0 <__assert_fail@plt+0x74>
   1500c:	mov	r0, r8
   15010:	bl	13204 <flatcc_builder_flush_vtable_cache@@Base>
   15014:	ldr	r0, [r5, r4]
   15018:	b	14e48 <flatcc_builder_create_cached_vtable@@Base+0x138>
   1501c:	ldr	r3, [pc, #36]	; 15048 <flatcc_builder_create_cached_vtable@@Base+0x338>
   15020:	ldr	r1, [pc, #36]	; 1504c <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15024:	ldr	r0, [pc, #36]	; 15050 <flatcc_builder_create_cached_vtable@@Base+0x340>
   15028:	add	r3, pc, r3
   1502c:	ldr	r2, [pc, #32]	; 15054 <flatcc_builder_create_cached_vtable@@Base+0x344>
   15030:	add	r3, r3, #656	; 0x290
   15034:	add	r1, pc, r1
   15038:	add	r0, pc, r0
   1503c:	bl	1206c <__assert_fail@plt>
   15040:	mvn	r0, #0
   15044:	b	14e48 <flatcc_builder_create_cached_vtable@@Base+0x138>
   15048:	strdeq	r2, [r0], -r0
   1504c:	andeq	r3, r0, r4, lsr r0
   15050:	ldrdeq	r3, [r0], -ip
   15054:	andeq	r0, r0, r6, asr r1

00015058 <flatcc_builder_create_table@@Base>:
   15058:	push	{r4, r5, r6, r7, r8, lr}
   1505c:	sub	sp, sp, #88	; 0x58
   15060:	ldr	r8, [pc, #436]	; 1521c <flatcc_builder_create_table@@Base+0x1c4>
   15064:	ldr	r4, [sp, #116]	; 0x74
   15068:	add	r8, pc, r8
   1506c:	cmp	r4, #0
   15070:	ldr	lr, [sp, #120]	; 0x78
   15074:	blt	151ac <flatcc_builder_create_table@@Base+0x154>
   15078:	tst	lr, #1
   1507c:	beq	151f8 <flatcc_builder_create_table@@Base+0x1a0>
   15080:	mov	r5, r0
   15084:	ldrh	r0, [r0, #128]	; 0x80
   15088:	cmp	r3, #4
   1508c:	movcc	r3, #4
   15090:	ldr	ip, [r5, #136]	; 0x88
   15094:	cmp	r0, r3
   15098:	mvn	r0, #3
   1509c:	strhcc	r3, [r5, #128]	; 0x80
   150a0:	sub	r7, ip, r2
   150a4:	sub	r3, r3, #1
   150a8:	sub	r0, r0, r2
   150ac:	and	r7, r7, r3
   150b0:	add	r0, r0, ip
   150b4:	sub	r3, lr, #1
   150b8:	sub	r0, r0, r7
   150bc:	sub	r3, r0, r3
   150c0:	cmp	r4, #0
   150c4:	str	r3, [sp, #12]
   150c8:	beq	150fc <flatcc_builder_create_table@@Base+0xa4>
   150cc:	ldr	ip, [sp, #112]	; 0x70
   150d0:	mvn	r6, #3
   150d4:	add	r4, ip, r4, lsl #1
   150d8:	sub	r6, r6, r0
   150dc:	ldrh	r3, [ip], #2
   150e0:	sub	lr, r6, r3
   150e4:	ldr	r0, [r1, r3]
   150e8:	cmp	r4, ip
   150ec:	add	r0, r0, lr
   150f0:	str	r0, [r1, r3]
   150f4:	bne	150dc <flatcc_builder_create_table@@Base+0x84>
   150f8:	ldr	ip, [r5, #136]	; 0x88
   150fc:	mov	r3, #4
   15100:	mov	lr, #1
   15104:	add	r0, sp, #12
   15108:	cmp	r2, #0
   1510c:	str	r3, [sp, #16]
   15110:	str	r3, [sp, #28]
   15114:	str	r0, [sp, #24]
   15118:	str	lr, [sp, #20]
   1511c:	beq	15138 <flatcc_builder_create_table@@Base+0xe0>
   15120:	add	r3, r2, r3
   15124:	mov	r0, #2
   15128:	str	r1, [sp, #32]
   1512c:	str	r2, [sp, #36]	; 0x24
   15130:	str	r3, [sp, #16]
   15134:	str	r0, [sp, #20]
   15138:	cmp	r7, #0
   1513c:	beq	1516c <flatcc_builder_create_table@@Base+0x114>
   15140:	ldr	r2, [sp, #20]
   15144:	ldr	r1, [pc, #212]	; 15220 <flatcc_builder_create_table@@Base+0x1c8>
   15148:	add	r2, r2, #1
   1514c:	add	r3, r3, r7
   15150:	str	r3, [sp, #16]
   15154:	ldr	r0, [r8, r1]
   15158:	add	r1, sp, #88	; 0x58
   1515c:	add	r1, r1, r2, lsl #3
   15160:	str	r2, [sp, #20]
   15164:	str	r0, [r1, #-72]	; 0xffffffb8
   15168:	str	r7, [r1, #-68]	; 0xffffffbc
   1516c:	sub	r4, ip, r3
   15170:	cmp	r4, ip
   15174:	bge	151f4 <flatcc_builder_create_table@@Base+0x19c>
   15178:	ldr	r0, [r5, #36]	; 0x24
   1517c:	ldr	r2, [sp, #20]
   15180:	str	r3, [sp]
   15184:	add	r1, sp, #24
   15188:	ldr	r6, [r5, #44]	; 0x2c
   1518c:	mov	r3, r4
   15190:	blx	r6
   15194:	cmp	r0, #0
   15198:	bne	151d0 <flatcc_builder_create_table@@Base+0x178>
   1519c:	mov	r0, r4
   151a0:	str	r4, [r5, #136]	; 0x88
   151a4:	add	sp, sp, #88	; 0x58
   151a8:	pop	{r4, r5, r6, r7, r8, pc}
   151ac:	ldr	r3, [pc, #112]	; 15224 <flatcc_builder_create_table@@Base+0x1cc>
   151b0:	ldr	r1, [pc, #112]	; 15228 <flatcc_builder_create_table@@Base+0x1d0>
   151b4:	ldr	r0, [pc, #112]	; 1522c <flatcc_builder_create_table@@Base+0x1d4>
   151b8:	add	r3, pc, r3
   151bc:	ldr	r2, [pc, #108]	; 15230 <flatcc_builder_create_table@@Base+0x1d8>
   151c0:	add	r3, r3, #668	; 0x29c
   151c4:	add	r1, pc, r1
   151c8:	add	r0, pc, r0
   151cc:	bl	1206c <__assert_fail@plt>
   151d0:	ldr	r3, [pc, #92]	; 15234 <flatcc_builder_create_table@@Base+0x1dc>
   151d4:	ldr	r1, [pc, #92]	; 15238 <flatcc_builder_create_table@@Base+0x1e0>
   151d8:	ldr	r0, [pc, #92]	; 1523c <flatcc_builder_create_table@@Base+0x1e4>
   151dc:	add	r3, pc, r3
   151e0:	ldr	r2, [pc, #88]	; 15240 <flatcc_builder_create_table@@Base+0x1e8>
   151e4:	add	r3, r3, #28
   151e8:	add	r1, pc, r1
   151ec:	add	r0, pc, r0
   151f0:	bl	1206c <__assert_fail@plt>
   151f4:	bl	12148 <__assert_fail@plt+0xdc>
   151f8:	ldr	r3, [pc, #68]	; 15244 <flatcc_builder_create_table@@Base+0x1ec>
   151fc:	ldr	r1, [pc, #68]	; 15248 <flatcc_builder_create_table@@Base+0x1f0>
   15200:	ldr	r0, [pc, #68]	; 1524c <flatcc_builder_create_table@@Base+0x1f4>
   15204:	add	r3, pc, r3
   15208:	ldr	r2, [pc, #64]	; 15250 <flatcc_builder_create_table@@Base+0x1f8>
   1520c:	add	r3, r3, #668	; 0x29c
   15210:	add	r1, pc, r1
   15214:	add	r0, pc, r0
   15218:	bl	1206c <__assert_fail@plt>
   1521c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15220:	andeq	r0, r0, ip, asr r0
   15224:	andeq	r2, r0, r0, ror #14
   15228:	andeq	r2, r0, r4, lsr #29
   1522c:	andeq	r3, r0, ip, asr r1
   15230:	ldrdeq	r0, [r0], -r5
   15234:	andeq	r2, r0, ip, lsr r7
   15238:	andeq	r2, r0, r0, lsl #29
   1523c:	andeq	r2, r0, r4, lsl #30
   15240:	andeq	r0, r0, fp, lsl #5
   15244:	andeq	r2, r0, r4, lsl r7
   15248:	andeq	r2, r0, r8, asr lr
   1524c:	andeq	r3, r0, r4, lsr #2
   15250:	ldrdeq	r0, [r0], -fp

00015254 <flatcc_builder_check_required_field@@Base>:
   15254:	ldr	r3, [r0, #32]
   15258:	ldrh	r3, [r3, #14]
   1525c:	cmp	r3, #3
   15260:	bne	1528c <flatcc_builder_check_required_field@@Base+0x38>
   15264:	ldrh	r3, [r0, #8]
   15268:	cmp	r3, r1
   1526c:	movls	r0, #0
   15270:	bls	15288 <flatcc_builder_check_required_field@@Base+0x34>
   15274:	ldr	r3, [r0, #4]
   15278:	lsl	r1, r1, #1
   1527c:	ldrh	r0, [r3, r1]
   15280:	adds	r0, r0, #0
   15284:	movne	r0, #1
   15288:	bx	lr
   1528c:	ldr	r3, [pc, #32]	; 152b4 <flatcc_builder_check_required_field@@Base+0x60>
   15290:	ldr	r1, [pc, #32]	; 152b8 <flatcc_builder_check_required_field@@Base+0x64>
   15294:	ldr	r0, [pc, #32]	; 152bc <flatcc_builder_check_required_field@@Base+0x68>
   15298:	add	r3, pc, r3
   1529c:	push	{r4, lr}
   152a0:	add	r3, r3, #696	; 0x2b8
   152a4:	ldr	r2, [pc, #20]	; 152c0 <flatcc_builder_check_required_field@@Base+0x6c>
   152a8:	add	r1, pc, r1
   152ac:	add	r0, pc, r0
   152b0:	bl	1206c <__assert_fail@plt>
   152b4:	andeq	r2, r0, r0, lsl #13
   152b8:	andeq	r2, r0, r0, asr #27
   152bc:	muleq	r0, r8, r0
   152c0:	strdeq	r0, [r0], -r8

000152c4 <flatcc_builder_check_union_field@@Base>:
   152c4:	ldr	r3, [r0, #32]
   152c8:	ldrh	r3, [r3, #14]
   152cc:	cmp	r3, #3
   152d0:	bne	1534c <flatcc_builder_check_union_field@@Base+0x88>
   152d4:	cmp	r1, #0
   152d8:	beq	15324 <flatcc_builder_check_union_field@@Base+0x60>
   152dc:	ldrh	r3, [r0, #8]
   152e0:	cmp	r3, r1
   152e4:	bls	15324 <flatcc_builder_check_union_field@@Base+0x60>
   152e8:	sub	r1, r1, #-2147483647	; 0x80000001
   152ec:	ldr	r3, [r0, #4]
   152f0:	lsl	r1, r1, #1
   152f4:	ldrh	r2, [r3, r1]
   152f8:	cmp	r2, #0
   152fc:	beq	15338 <flatcc_builder_check_union_field@@Base+0x74>
   15300:	ldr	r0, [r0, #16]
   15304:	add	r1, r3, r1
   15308:	ldrb	r2, [r0, r2]
   1530c:	ldrh	r1, [r1, #2]
   15310:	cmp	r2, #0
   15314:	bne	1532c <flatcc_builder_check_union_field@@Base+0x68>
   15318:	clz	r0, r1
   1531c:	lsr	r0, r0, #5
   15320:	bx	lr
   15324:	mov	r0, #0
   15328:	bx	lr
   1532c:	adds	r0, r1, #0
   15330:	movne	r0, #1
   15334:	b	15328 <flatcc_builder_check_union_field@@Base+0x64>
   15338:	add	r1, r3, r1
   1533c:	ldrh	r1, [r1, #2]
   15340:	clz	r0, r1
   15344:	lsr	r0, r0, #5
   15348:	bx	lr
   1534c:	ldr	r3, [pc, #32]	; 15374 <flatcc_builder_check_union_field@@Base+0xb0>
   15350:	ldr	r1, [pc, #32]	; 15378 <flatcc_builder_check_union_field@@Base+0xb4>
   15354:	ldr	r0, [pc, #32]	; 1537c <flatcc_builder_check_union_field@@Base+0xb8>
   15358:	add	r3, pc, r3
   1535c:	push	{r4, lr}
   15360:	add	r3, r3, #732	; 0x2dc
   15364:	ldr	r2, [pc, #20]	; 15380 <flatcc_builder_check_union_field@@Base+0xbc>
   15368:	add	r1, pc, r1
   1536c:	add	r0, pc, r0
   15370:	bl	1206c <__assert_fail@plt>
   15374:	andeq	r2, r0, r0, asr #11
   15378:	andeq	r2, r0, r0, lsl #26
   1537c:	ldrdeq	r2, [r0], -r8
   15380:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00015384 <flatcc_builder_check_required@@Base>:
   15384:	ldr	r3, [r0, #32]
   15388:	ldrh	r3, [r3, #14]
   1538c:	cmp	r3, #3
   15390:	bne	153f4 <flatcc_builder_check_required@@Base+0x70>
   15394:	ldrh	r3, [r0, #8]
   15398:	cmp	r3, r2
   1539c:	movlt	r0, #0
   153a0:	blt	153f0 <flatcc_builder_check_required@@Base+0x6c>
   153a4:	cmp	r2, #0
   153a8:	ble	153ec <flatcc_builder_check_required@@Base+0x68>
   153ac:	ldrh	r3, [r1]
   153b0:	ldr	ip, [r0, #4]
   153b4:	lsl	r3, r3, #1
   153b8:	ldrh	r0, [ip, r3]
   153bc:	cmp	r0, #0
   153c0:	beq	153f0 <flatcc_builder_check_required@@Base+0x6c>
   153c4:	add	r2, r1, r2, lsl #1
   153c8:	add	r1, r1, #2
   153cc:	b	153e4 <flatcc_builder_check_required@@Base+0x60>
   153d0:	ldrh	r3, [r1], #2
   153d4:	lsl	r3, r3, #1
   153d8:	ldrh	r0, [ip, r3]
   153dc:	cmp	r0, #0
   153e0:	beq	153f0 <flatcc_builder_check_required@@Base+0x6c>
   153e4:	cmp	r1, r2
   153e8:	bne	153d0 <flatcc_builder_check_required@@Base+0x4c>
   153ec:	mov	r0, #1
   153f0:	bx	lr
   153f4:	ldr	r3, [pc, #32]	; 1541c <flatcc_builder_check_required@@Base+0x98>
   153f8:	ldr	r1, [pc, #32]	; 15420 <flatcc_builder_check_required@@Base+0x9c>
   153fc:	ldr	r0, [pc, #32]	; 15424 <flatcc_builder_check_required@@Base+0xa0>
   15400:	add	r3, pc, r3
   15404:	push	{r4, lr}
   15408:	add	r3, r3, #768	; 0x300
   1540c:	ldr	r2, [pc, #20]	; 15428 <flatcc_builder_check_required@@Base+0xa4>
   15410:	add	r1, pc, r1
   15414:	add	r0, pc, r0
   15418:	bl	1206c <__assert_fail@plt>
   1541c:	andeq	r2, r0, r8, lsl r5
   15420:	andeq	r2, r0, r8, asr ip
   15424:	andeq	r2, r0, r0, lsr pc
   15428:	andeq	r0, r0, r1, lsl r5

0001542c <flatcc_builder_end_table@@Base>:
   1542c:	ldr	r3, [r0, #32]
   15430:	push	{r4, r5, r6, r7, lr}
   15434:	sub	sp, sp, #20
   15438:	ldrh	r3, [r3, #14]
   1543c:	cmp	r3, #3
   15440:	bne	155c4 <flatcc_builder_end_table@@Base+0x198>
   15444:	ldrh	r5, [r0, #8]
   15448:	ldr	r3, [r0, #12]
   1544c:	ldr	r1, [pc, #404]	; 155e8 <flatcc_builder_end_table@@Base+0x1bc>
   15450:	add	r5, r5, #2
   15454:	ldr	r2, [r0, #20]
   15458:	lsl	r5, r5, #1
   1545c:	add	r2, r2, #4
   15460:	uxth	r5, r5
   15464:	eor	r3, r3, r5
   15468:	uxth	r2, r2
   1546c:	mul	r3, r1, r3
   15470:	ldr	ip, [r0, #4]
   15474:	eor	r3, r3, r2
   15478:	sub	r6, ip, #4
   1547c:	mul	r1, r1, r3
   15480:	strh	r2, [ip, #-2]
   15484:	strh	r5, [ip, #-4]
   15488:	mov	r3, r1
   1548c:	str	r1, [r0, #12]
   15490:	mov	r2, r5
   15494:	mov	r1, r6
   15498:	mov	r4, r0
   1549c:	bl	14d10 <flatcc_builder_create_cached_vtable@@Base>
   154a0:	subs	r7, r0, #0
   154a4:	bne	154b8 <flatcc_builder_end_table@@Base+0x8c>
   154a8:	mov	r5, #0
   154ac:	mov	r0, r5
   154b0:	add	sp, sp, #20
   154b4:	pop	{r4, r5, r6, r7, pc}
   154b8:	mov	r2, r5
   154bc:	mov	r1, #0
   154c0:	mov	r0, r6
   154c4:	bl	1203c <memset@plt>
   154c8:	ldr	r3, [r4, #32]
   154cc:	ldr	ip, [r4, #76]	; 0x4c
   154d0:	ldr	r0, [r4]
   154d4:	ldr	r2, [r3, #20]
   154d8:	ldr	r1, [r4, #16]
   154dc:	add	ip, ip, r2
   154e0:	sub	r0, r0, ip
   154e4:	ldrh	r3, [r4, #130]	; 0x82
   154e8:	asr	r0, r0, #1
   154ec:	ldr	r2, [r4, #20]
   154f0:	str	r0, [sp, #4]
   154f4:	str	r7, [sp, #8]
   154f8:	str	ip, [sp]
   154fc:	mov	r0, r4
   15500:	bl	15058 <flatcc_builder_create_table@@Base>
   15504:	subs	r5, r0, #0
   15508:	beq	154a8 <flatcc_builder_end_table@@Base+0x7c>
   1550c:	ldr	r3, [r4, #32]
   15510:	ldr	r0, [r4, #52]	; 0x34
   15514:	ldr	ip, [r4, #76]	; 0x4c
   15518:	ldr	r1, [r3, #24]
   1551c:	ldr	r2, [r4, #20]
   15520:	str	r1, [r4, #12]
   15524:	ldrh	lr, [r3, #28]
   15528:	mov	r1, #0
   1552c:	strh	lr, [r4, #8]
   15530:	ldr	lr, [r3, #16]
   15534:	add	r0, r0, lr
   15538:	str	r0, [r4, #4]
   1553c:	ldr	r3, [r3, #20]
   15540:	ldr	r0, [r4, #16]
   15544:	add	r3, ip, r3
   15548:	str	r3, [r4]
   1554c:	bl	1203c <memset@plt>
   15550:	ldr	r3, [r4, #32]
   15554:	ldr	r2, [r4, #64]	; 0x40
   15558:	ldrh	lr, [r4, #130]	; 0x82
   1555c:	ldr	ip, [r3]
   15560:	ldr	r1, [r3, #4]
   15564:	ldrh	r0, [r4, #128]	; 0x80
   15568:	sub	r2, r2, ip
   1556c:	cmp	r2, r1
   15570:	movcs	r2, r1
   15574:	cmp	r0, lr
   15578:	ldr	r0, [r4, #60]	; 0x3c
   1557c:	ldr	r6, [r3, #8]
   15580:	str	r2, [r4, #24]
   15584:	add	r2, r0, ip
   15588:	str	r2, [r4, #16]
   1558c:	str	r6, [r4, #20]
   15590:	ldr	r2, [r4, #156]	; 0x9c
   15594:	str	ip, [r4, #28]
   15598:	str	r1, [r3, #4]
   1559c:	strhcc	lr, [r4, #128]	; 0x80
   155a0:	ldrh	r1, [r3, #12]
   155a4:	sub	r2, r2, #1
   155a8:	sub	r3, r3, #36	; 0x24
   155ac:	mov	r0, r5
   155b0:	str	r2, [r4, #156]	; 0x9c
   155b4:	strh	r1, [r4, #130]	; 0x82
   155b8:	str	r3, [r4, #32]
   155bc:	add	sp, sp, #20
   155c0:	pop	{r4, r5, r6, r7, pc}
   155c4:	ldr	r3, [pc, #32]	; 155ec <flatcc_builder_end_table@@Base+0x1c0>
   155c8:	ldr	r1, [pc, #32]	; 155f0 <flatcc_builder_end_table@@Base+0x1c4>
   155cc:	ldr	r0, [pc, #32]	; 155f4 <flatcc_builder_end_table@@Base+0x1c8>
   155d0:	add	r3, pc, r3
   155d4:	ldr	r2, [pc, #28]	; 155f8 <flatcc_builder_end_table@@Base+0x1cc>
   155d8:	add	r3, r3, #800	; 0x320
   155dc:	add	r1, pc, r1
   155e0:	add	r0, pc, r0
   155e4:	bl	1206c <__assert_fail@plt>
   155e8:			; <UNDEFINED> instruction: 0x9e3779b1
   155ec:	andeq	r2, r0, r8, asr #6
   155f0:	andeq	r2, r0, ip, lsl #21
   155f4:	andeq	r2, r0, r4, ror #26
   155f8:	andeq	r0, r0, r5, lsr #10

000155fc <flatcc_builder_create_vector@@Base>:
   155fc:	push	{r4, r5, r6, lr}
   15600:	sub	sp, sp, #88	; 0x58
   15604:	ldr	lr, [pc, #320]	; 1574c <flatcc_builder_create_vector@@Base+0x150>
   15608:	ldr	ip, [sp, #108]	; 0x6c
   1560c:	mov	r4, r0
   15610:	cmp	r2, ip
   15614:	add	lr, pc, lr
   15618:	ldrh	r0, [sp, #104]	; 0x68
   1561c:	bhi	15700 <flatcc_builder_create_vector@@Base+0x104>
   15620:	ldrh	ip, [r4, #128]	; 0x80
   15624:	cmp	r0, #4
   15628:	mul	r3, r3, r2
   1562c:	movcc	r0, #4
   15630:	ldr	r6, [r4, #136]	; 0x88
   15634:	cmp	ip, r0
   15638:	strhcc	r0, [r4, #128]	; 0x80
   1563c:	sub	r5, r6, r3
   15640:	sub	r0, r0, #1
   15644:	mov	ip, #4
   15648:	str	r2, [sp, #12]
   1564c:	and	r0, r0, r5
   15650:	add	r2, sp, #12
   15654:	mov	r5, #1
   15658:	cmp	r3, #0
   1565c:	str	ip, [sp, #16]
   15660:	str	ip, [sp, #28]
   15664:	str	r2, [sp, #24]
   15668:	str	r5, [sp, #20]
   1566c:	bne	156e4 <flatcc_builder_create_vector@@Base+0xe8>
   15670:	cmp	r0, #0
   15674:	beq	156a4 <flatcc_builder_create_vector@@Base+0xa8>
   15678:	ldr	r3, [sp, #20]
   1567c:	ldr	r2, [pc, #204]	; 15750 <flatcc_builder_create_vector@@Base+0x154>
   15680:	add	r3, r3, #1
   15684:	add	ip, ip, r0
   15688:	str	ip, [sp, #16]
   1568c:	ldr	r1, [lr, r2]
   15690:	add	r2, sp, #88	; 0x58
   15694:	add	r2, r2, r3, lsl #3
   15698:	str	r3, [sp, #20]
   1569c:	str	r1, [r2, #-72]	; 0xffffffb8
   156a0:	str	r0, [r2, #-68]	; 0xffffffbc
   156a4:	sub	r5, r6, ip
   156a8:	cmp	r6, r5
   156ac:	ble	15748 <flatcc_builder_create_vector@@Base+0x14c>
   156b0:	ldr	r0, [r4, #36]	; 0x24
   156b4:	ldr	r2, [sp, #20]
   156b8:	str	ip, [sp]
   156bc:	mov	r3, r5
   156c0:	ldr	r6, [r4, #44]	; 0x2c
   156c4:	add	r1, sp, #24
   156c8:	blx	r6
   156cc:	cmp	r0, #0
   156d0:	bne	15724 <flatcc_builder_create_vector@@Base+0x128>
   156d4:	mov	r0, r5
   156d8:	str	r5, [r4, #136]	; 0x88
   156dc:	add	sp, sp, #88	; 0x58
   156e0:	pop	{r4, r5, r6, pc}
   156e4:	add	ip, r3, ip
   156e8:	mov	r2, #2
   156ec:	str	r1, [sp, #32]
   156f0:	str	r3, [sp, #36]	; 0x24
   156f4:	str	ip, [sp, #16]
   156f8:	str	r2, [sp, #20]
   156fc:	b	15670 <flatcc_builder_create_vector@@Base+0x74>
   15700:	ldr	r3, [pc, #76]	; 15754 <flatcc_builder_create_vector@@Base+0x158>
   15704:	ldr	r1, [pc, #76]	; 15758 <flatcc_builder_create_vector@@Base+0x15c>
   15708:	ldr	r0, [pc, #76]	; 1575c <flatcc_builder_create_vector@@Base+0x160>
   1570c:	add	r3, pc, r3
   15710:	ldr	r2, [pc, #72]	; 15760 <flatcc_builder_create_vector@@Base+0x164>
   15714:	add	r3, r3, #828	; 0x33c
   15718:	add	r1, pc, r1
   1571c:	add	r0, pc, r0
   15720:	bl	1206c <__assert_fail@plt>
   15724:	ldr	r3, [pc, #56]	; 15764 <flatcc_builder_create_vector@@Base+0x168>
   15728:	ldr	r1, [pc, #56]	; 15768 <flatcc_builder_create_vector@@Base+0x16c>
   1572c:	ldr	r0, [pc, #56]	; 1576c <flatcc_builder_create_vector@@Base+0x170>
   15730:	add	r3, pc, r3
   15734:	ldr	r2, [pc, #52]	; 15770 <flatcc_builder_create_vector@@Base+0x174>
   15738:	add	r3, r3, #28
   1573c:	add	r1, pc, r1
   15740:	add	r0, pc, r0
   15744:	bl	1206c <__assert_fail@plt>
   15748:	bl	12148 <__assert_fail@plt+0xdc>
   1574c:	andeq	r3, r1, r4, ror #19
   15750:	andeq	r0, r0, ip, asr r0
   15754:	andeq	r2, r0, ip, lsl #4
   15758:	andeq	r2, r0, r0, asr r9
   1575c:	andeq	r2, r0, r4, asr ip
   15760:	andeq	r0, r0, r5, asr r5
   15764:	andeq	r2, r0, r8, ror #3
   15768:	andeq	r2, r0, ip, lsr #18
   1576c:			; <UNDEFINED> instruction: 0x000029b0
   15770:	andeq	r0, r0, fp, lsl #5

00015774 <flatcc_builder_end_vector@@Base>:
   15774:	ldr	r1, [r0, #32]
   15778:	push	{r4, r5, r6, lr}
   1577c:	sub	sp, sp, #8
   15780:	ldrh	r3, [r1, #14]
   15784:	cmp	r3, #4
   15788:	bne	1583c <flatcc_builder_end_vector@@Base+0xc8>
   1578c:	ldrh	lr, [r0, #130]	; 0x82
   15790:	ldr	ip, [r1, #24]
   15794:	ldr	r3, [r1, #16]
   15798:	ldr	r2, [r1, #20]
   1579c:	ldr	r1, [r0, #16]
   157a0:	str	lr, [sp]
   157a4:	str	ip, [sp, #4]
   157a8:	mov	r4, r0
   157ac:	bl	155fc <flatcc_builder_create_vector@@Base>
   157b0:	subs	r5, r0, #0
   157b4:	beq	15830 <flatcc_builder_end_vector@@Base+0xbc>
   157b8:	ldr	r2, [r4, #20]
   157bc:	mov	r1, #0
   157c0:	ldr	r0, [r4, #16]
   157c4:	bl	1203c <memset@plt>
   157c8:	ldr	r3, [r4, #32]
   157cc:	ldr	r2, [r4, #64]	; 0x40
   157d0:	ldrh	lr, [r4, #130]	; 0x82
   157d4:	ldr	ip, [r3]
   157d8:	ldr	r1, [r3, #4]
   157dc:	ldrh	r0, [r4, #128]	; 0x80
   157e0:	sub	r2, r2, ip
   157e4:	cmp	r2, r1
   157e8:	movcs	r2, r1
   157ec:	cmp	r0, lr
   157f0:	ldr	r0, [r4, #60]	; 0x3c
   157f4:	ldr	r6, [r3, #8]
   157f8:	str	r2, [r4, #24]
   157fc:	add	r2, r0, ip
   15800:	str	r2, [r4, #16]
   15804:	str	r6, [r4, #20]
   15808:	ldr	r2, [r4, #156]	; 0x9c
   1580c:	str	ip, [r4, #28]
   15810:	str	r1, [r3, #4]
   15814:	strhcc	lr, [r4, #128]	; 0x80
   15818:	ldrh	r1, [r3, #12]
   1581c:	sub	r2, r2, #1
   15820:	sub	r3, r3, #36	; 0x24
   15824:	str	r2, [r4, #156]	; 0x9c
   15828:	strh	r1, [r4, #130]	; 0x82
   1582c:	str	r3, [r4, #32]
   15830:	mov	r0, r5
   15834:	add	sp, sp, #8
   15838:	pop	{r4, r5, r6, pc}
   1583c:	ldr	r3, [pc, #28]	; 15860 <flatcc_builder_end_vector@@Base+0xec>
   15840:	ldr	r1, [pc, #28]	; 15864 <flatcc_builder_end_vector@@Base+0xf0>
   15844:	ldr	r0, [pc, #28]	; 15868 <flatcc_builder_end_vector@@Base+0xf4>
   15848:	add	r3, pc, r3
   1584c:	ldr	r2, [pc, #24]	; 1586c <flatcc_builder_end_vector@@Base+0xf8>
   15850:	add	r3, r3, #860	; 0x35c
   15854:	add	r1, pc, r1
   15858:	add	r0, pc, r0
   1585c:	bl	1206c <__assert_fail@plt>
   15860:	ldrdeq	r2, [r0], -r0
   15864:	andeq	r2, r0, r4, lsl r8
   15868:	andeq	r2, r0, r0, ror #18
   1586c:	andeq	r0, r0, r8, ror r5

00015870 <flatcc_builder_vector_count@@Base>:
   15870:	ldr	r3, [r0, #32]
   15874:	ldr	r0, [r3, #20]
   15878:	bx	lr

0001587c <flatcc_builder_vector_edit@@Base>:
   1587c:	ldr	r0, [r0, #16]
   15880:	bx	lr

00015884 <flatcc_builder_create_offset_vector_direct@@Base>:
   15884:	cmn	r2, #-1073741823	; 0xc0000001
   15888:	bls	15894 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   1588c:	mov	r0, #0
   15890:	bx	lr
   15894:	mov	r3, #0
   15898:	b	12fd4 <flatcc_builder_default_alloc@@Base+0x350>

0001589c <flatcc_builder_end_offset_vector@@Base>:
   1589c:	ldr	r3, [r0, #32]
   158a0:	push	{r4, r5, r6, lr}
   158a4:	ldrh	r2, [r3, #14]
   158a8:	cmp	r2, #5
   158ac:	bne	15948 <flatcc_builder_end_offset_vector@@Base+0xac>
   158b0:	ldr	r2, [r3, #20]
   158b4:	ldr	r1, [r0, #16]
   158b8:	mov	r4, r0
   158bc:	bl	15884 <flatcc_builder_create_offset_vector_direct@@Base>
   158c0:	subs	r5, r0, #0
   158c4:	beq	15940 <flatcc_builder_end_offset_vector@@Base+0xa4>
   158c8:	ldr	r2, [r4, #20]
   158cc:	mov	r1, #0
   158d0:	ldr	r0, [r4, #16]
   158d4:	bl	1203c <memset@plt>
   158d8:	ldr	r3, [r4, #32]
   158dc:	ldr	r2, [r4, #64]	; 0x40
   158e0:	ldrh	lr, [r4, #130]	; 0x82
   158e4:	ldr	ip, [r3]
   158e8:	ldr	r1, [r3, #4]
   158ec:	ldrh	r0, [r4, #128]	; 0x80
   158f0:	sub	r2, r2, ip
   158f4:	cmp	r2, r1
   158f8:	movcs	r2, r1
   158fc:	cmp	r0, lr
   15900:	ldr	r0, [r4, #60]	; 0x3c
   15904:	ldr	r6, [r3, #8]
   15908:	str	r2, [r4, #24]
   1590c:	add	r2, r0, ip
   15910:	str	r2, [r4, #16]
   15914:	str	r6, [r4, #20]
   15918:	ldr	r2, [r4, #156]	; 0x9c
   1591c:	str	ip, [r4, #28]
   15920:	str	r1, [r3, #4]
   15924:	strhcc	lr, [r4, #128]	; 0x80
   15928:	ldrh	r1, [r3, #12]
   1592c:	sub	r2, r2, #1
   15930:	sub	r3, r3, #36	; 0x24
   15934:	str	r2, [r4, #156]	; 0x9c
   15938:	strh	r1, [r4, #130]	; 0x82
   1593c:	str	r3, [r4, #32]
   15940:	mov	r0, r5
   15944:	pop	{r4, r5, r6, pc}
   15948:	ldr	r3, [pc, #28]	; 1596c <flatcc_builder_end_offset_vector@@Base+0xd0>
   1594c:	ldr	r1, [pc, #28]	; 15970 <flatcc_builder_end_offset_vector@@Base+0xd4>
   15950:	ldr	r0, [pc, #28]	; 15974 <flatcc_builder_end_offset_vector@@Base+0xd8>
   15954:	add	r3, pc, r3
   15958:	ldr	r2, [pc, #24]	; 15978 <flatcc_builder_end_offset_vector@@Base+0xdc>
   1595c:	add	r3, r3, #888	; 0x378
   15960:	add	r1, pc, r1
   15964:	add	r0, pc, r0
   15968:	bl	1206c <__assert_fail@plt>
   1596c:	andeq	r1, r0, r4, asr #31
   15970:	andeq	r2, r0, r8, lsl #14
   15974:	andeq	r2, r0, r0, asr #17
   15978:	andeq	r0, r0, r8, asr #11

0001597c <flatcc_builder_create_offset_vector@@Base>:
   1597c:	push	{r4, r5, r6, lr}
   15980:	mov	r6, r1
   15984:	mov	r5, r2
   15988:	mov	r4, r0
   1598c:	bl	14850 <flatcc_builder_start_offset_vector@@Base>
   15990:	cmp	r0, #0
   15994:	beq	159a0 <flatcc_builder_create_offset_vector@@Base+0x24>
   15998:	mov	r0, #0
   1599c:	pop	{r4, r5, r6, pc}
   159a0:	mov	r1, r5
   159a4:	mov	r0, r4
   159a8:	bl	141e8 <flatcc_builder_extend_offset_vector@@Base>
   159ac:	cmp	r0, #0
   159b0:	beq	15998 <flatcc_builder_create_offset_vector@@Base+0x1c>
   159b4:	lsl	r2, r5, #2
   159b8:	mov	r1, r6
   159bc:	bl	11fb8 <memcpy@plt>
   159c0:	mov	r0, r4
   159c4:	pop	{r4, r5, r6, lr}
   159c8:	b	1589c <flatcc_builder_end_offset_vector@@Base>

000159cc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   159cc:	ldr	r2, [r0, #32]
   159d0:	push	{r4, r5, r6, lr}
   159d4:	ldrh	ip, [r2, #14]
   159d8:	cmp	ip, #5
   159dc:	bne	15a90 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   159e0:	ldr	r2, [r2, #20]
   159e4:	cmn	r2, #-1073741823	; 0xc0000001
   159e8:	bls	159f8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   159ec:	mov	r5, #0
   159f0:	mov	r0, r5
   159f4:	pop	{r4, r5, r6, pc}
   159f8:	mov	r3, r1
   159fc:	ldr	r1, [r0, #16]
   15a00:	mov	r4, r0
   15a04:	bl	12fd4 <flatcc_builder_default_alloc@@Base+0x350>
   15a08:	subs	r5, r0, #0
   15a0c:	beq	159ec <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   15a10:	ldr	r2, [r4, #20]
   15a14:	mov	r1, #0
   15a18:	ldr	r0, [r4, #16]
   15a1c:	bl	1203c <memset@plt>
   15a20:	ldr	r3, [r4, #32]
   15a24:	ldr	r2, [r4, #64]	; 0x40
   15a28:	ldrh	lr, [r4, #130]	; 0x82
   15a2c:	ldr	ip, [r3]
   15a30:	ldr	r1, [r3, #4]
   15a34:	ldrh	r0, [r4, #128]	; 0x80
   15a38:	sub	r2, r2, ip
   15a3c:	cmp	r2, r1
   15a40:	movcs	r2, r1
   15a44:	cmp	r0, lr
   15a48:	ldr	r0, [r4, #60]	; 0x3c
   15a4c:	ldr	r6, [r3, #8]
   15a50:	str	r2, [r4, #24]
   15a54:	add	r2, r0, ip
   15a58:	str	r2, [r4, #16]
   15a5c:	str	r6, [r4, #20]
   15a60:	ldr	r2, [r4, #156]	; 0x9c
   15a64:	str	ip, [r4, #28]
   15a68:	str	r1, [r3, #4]
   15a6c:	strhcc	lr, [r4, #128]	; 0x80
   15a70:	ldrh	r1, [r3, #12]
   15a74:	sub	r2, r2, #1
   15a78:	sub	r3, r3, #36	; 0x24
   15a7c:	str	r2, [r4, #156]	; 0x9c
   15a80:	strh	r1, [r4, #130]	; 0x82
   15a84:	str	r3, [r4, #32]
   15a88:	mov	r0, r5
   15a8c:	pop	{r4, r5, r6, pc}
   15a90:	ldr	r3, [pc, #28]	; 15ab4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe8>
   15a94:	ldr	r1, [pc, #28]	; 15ab8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   15a98:	ldr	r0, [pc, #28]	; 15abc <flatcc_builder_end_offset_vector_for_unions@@Base+0xf0>
   15a9c:	add	r3, pc, r3
   15aa0:	ldr	r2, [pc, #24]	; 15ac0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   15aa4:	add	r3, r3, #924	; 0x39c
   15aa8:	add	r1, pc, r1
   15aac:	add	r0, pc, r0
   15ab0:	bl	1206c <__assert_fail@plt>
   15ab4:	andeq	r1, r0, ip, ror lr
   15ab8:	andeq	r2, r0, r0, asr #11
   15abc:	andeq	r2, r0, r8, ror r7
   15ac0:	ldrdeq	r0, [r0], -r5

00015ac4 <flatcc_builder_offset_vector_edit@@Base>:
   15ac4:	ldr	r0, [r0, #16]
   15ac8:	bx	lr

00015acc <flatcc_builder_offset_vector_count@@Base>:
   15acc:	ldr	r3, [r0, #32]
   15ad0:	ldr	r0, [r3, #20]
   15ad4:	bx	lr

00015ad8 <flatcc_builder_create_union_vector_direct@@Base>:
   15ad8:	push	{r4, r5, r6, r7, r8, lr}
   15adc:	sub	sp, sp, #8
   15ae0:	mov	r4, r0
   15ae4:	ldr	r5, [sp, #32]
   15ae8:	cmn	r5, #-1073741823	; 0xc0000001
   15aec:	bls	15b08 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   15af0:	mov	r3, #0
   15af4:	mov	r0, r4
   15af8:	str	r3, [r4]
   15afc:	str	r3, [r4, #4]
   15b00:	add	sp, sp, #8
   15b04:	pop	{r4, r5, r6, r7, r8, pc}
   15b08:	mov	r6, r1
   15b0c:	mov	r7, r2
   15b10:	mov	r1, r3
   15b14:	mov	r0, r6
   15b18:	mov	r3, r2
   15b1c:	mov	r2, r5
   15b20:	bl	12fd4 <flatcc_builder_default_alloc@@Base+0x350>
   15b24:	subs	r8, r0, #0
   15b28:	beq	15af0 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   15b2c:	mvn	ip, #0
   15b30:	mov	r3, #1
   15b34:	mov	r2, r5
   15b38:	mov	r1, r7
   15b3c:	mov	r0, r6
   15b40:	stm	sp, {r3, ip}
   15b44:	bl	155fc <flatcc_builder_create_vector@@Base>
   15b48:	stm	r4, {r0, r8}
   15b4c:	mov	r0, r4
   15b50:	add	sp, sp, #8
   15b54:	pop	{r4, r5, r6, r7, r8, pc}

00015b58 <flatcc_builder_create_union_vector@@Base>:
   15b58:	push	{r4, r5, r6, r7, r8, lr}
   15b5c:	mov	r6, r0
   15b60:	sub	sp, sp, #16
   15b64:	mov	r0, r1
   15b68:	mov	r5, r1
   15b6c:	mov	r4, r2
   15b70:	mov	r7, r3
   15b74:	bl	14850 <flatcc_builder_start_offset_vector@@Base>
   15b78:	cmp	r0, #0
   15b7c:	beq	15b98 <flatcc_builder_create_union_vector@@Base+0x40>
   15b80:	mov	r3, #0
   15b84:	mov	r0, r6
   15b88:	str	r3, [r6]
   15b8c:	str	r3, [r6, #4]
   15b90:	add	sp, sp, #16
   15b94:	pop	{r4, r5, r6, r7, r8, pc}
   15b98:	mov	r1, r7
   15b9c:	mov	r0, r5
   15ba0:	bl	141e8 <flatcc_builder_extend_offset_vector@@Base>
   15ba4:	cmp	r0, #0
   15ba8:	beq	15b80 <flatcc_builder_create_union_vector@@Base+0x28>
   15bac:	ldr	r8, [r5, #20]
   15bb0:	ldr	r3, [r5, #24]
   15bb4:	add	r1, r7, r8
   15bb8:	cmp	r1, r3
   15bbc:	str	r1, [r5, #20]
   15bc0:	bcs	15cb8 <flatcc_builder_create_union_vector@@Base+0x160>
   15bc4:	ldr	r2, [r5, #16]
   15bc8:	adds	r8, r2, r8
   15bcc:	beq	15b80 <flatcc_builder_create_union_vector@@Base+0x28>
   15bd0:	mov	r0, r5
   15bd4:	bl	15ac4 <flatcc_builder_offset_vector_edit@@Base>
   15bd8:	cmp	r7, #0
   15bdc:	movne	r1, r4
   15be0:	subne	lr, r8, #1
   15be4:	mov	r3, r0
   15be8:	addne	r2, r1, r7, lsl #3
   15bec:	subne	ip, r0, #4
   15bf0:	beq	15c10 <flatcc_builder_create_union_vector@@Base+0xb8>
   15bf4:	ldrb	r4, [r1]
   15bf8:	add	r1, r1, #8
   15bfc:	strb	r4, [lr, #1]!
   15c00:	ldr	r4, [r1, #-4]
   15c04:	cmp	r2, r1
   15c08:	str	r4, [ip, #4]!
   15c0c:	bne	15bf4 <flatcc_builder_create_union_vector@@Base+0x9c>
   15c10:	str	r7, [sp]
   15c14:	mov	r2, r8
   15c18:	mov	r1, r5
   15c1c:	add	r0, sp, #8
   15c20:	bl	15ad8 <flatcc_builder_create_union_vector_direct@@Base>
   15c24:	ldr	r2, [r5, #20]
   15c28:	mov	r1, #0
   15c2c:	ldr	r0, [r5, #16]
   15c30:	ldr	r7, [sp, #8]
   15c34:	ldr	r4, [sp, #12]
   15c38:	bl	1203c <memset@plt>
   15c3c:	ldr	r3, [r5, #32]
   15c40:	ldr	r2, [r5, #64]	; 0x40
   15c44:	ldrh	lr, [r5, #130]	; 0x82
   15c48:	ldr	ip, [r3]
   15c4c:	ldr	r1, [r3, #4]
   15c50:	ldrh	r0, [r5, #128]	; 0x80
   15c54:	sub	r2, r2, ip
   15c58:	cmp	r2, r1
   15c5c:	movcs	r2, r1
   15c60:	cmp	r0, lr
   15c64:	ldr	r0, [r5, #60]	; 0x3c
   15c68:	ldr	r8, [r3, #8]
   15c6c:	str	r2, [r5, #24]
   15c70:	add	r2, r0, ip
   15c74:	str	r2, [r5, #16]
   15c78:	str	r8, [r5, #20]
   15c7c:	ldr	r2, [r5, #156]	; 0x9c
   15c80:	str	ip, [r5, #28]
   15c84:	str	r1, [r3, #4]
   15c88:	strhcc	lr, [r5, #128]	; 0x80
   15c8c:	ldrh	r1, [r3, #12]
   15c90:	sub	r2, r2, #1
   15c94:	sub	r3, r3, #36	; 0x24
   15c98:	mov	r0, r6
   15c9c:	str	r7, [r6]
   15ca0:	str	r4, [r6, #4]
   15ca4:	str	r2, [r5, #156]	; 0x9c
   15ca8:	strh	r1, [r5, #130]	; 0x82
   15cac:	str	r3, [r5, #32]
   15cb0:	add	sp, sp, #16
   15cb4:	pop	{r4, r5, r6, r7, r8, pc}
   15cb8:	add	r1, r1, #1
   15cbc:	mvn	r2, #3
   15cc0:	mov	r0, r5
   15cc4:	bl	12c10 <_start@@Base+0x40c>
   15cc8:	cmp	r0, #0
   15ccc:	beq	15bc4 <flatcc_builder_create_union_vector@@Base+0x6c>
   15cd0:	b	15b80 <flatcc_builder_create_union_vector@@Base+0x28>

00015cd4 <flatcc_builder_start_union_vector@@Base>:
   15cd4:	push	{r4, lr}
   15cd8:	mov	r1, #4
   15cdc:	mov	r4, r0
   15ce0:	bl	12ec0 <flatcc_builder_default_alloc@@Base+0x23c>
   15ce4:	cmp	r0, #0
   15ce8:	bne	15d34 <flatcc_builder_start_union_vector@@Base+0x60>
   15cec:	ldr	r3, [r4, #32]
   15cf0:	mov	r2, #8
   15cf4:	mov	lr, #7
   15cf8:	str	r0, [r3, #20]
   15cfc:	str	r2, [r3, #16]
   15d00:	ldr	ip, [r4, #28]
   15d04:	ldr	r2, [r4, #64]	; 0x40
   15d08:	ldr	r1, [r4, #60]	; 0x3c
   15d0c:	sub	r2, r2, ip
   15d10:	cmn	r2, #4
   15d14:	mvnhi	r2, #3
   15d18:	strh	lr, [r3, #14]
   15d1c:	add	r1, r1, ip
   15d20:	str	r2, [r4, #24]
   15d24:	mvn	r2, #3
   15d28:	str	r1, [r4, #16]
   15d2c:	str	r2, [r3, #4]
   15d30:	pop	{r4, pc}
   15d34:	mvn	r0, #0
   15d38:	pop	{r4, pc}

00015d3c <flatcc_builder_union_vector_edit@@Base>:
   15d3c:	ldr	r0, [r0, #16]
   15d40:	bx	lr

00015d44 <flatcc_builder_union_vector_count@@Base>:
   15d44:	ldr	r3, [r0, #32]
   15d48:	ldr	r0, [r3, #20]
   15d4c:	bx	lr

00015d50 <flatcc_builder_end_union_vector@@Base>:
   15d50:	ldr	r3, [r1, #32]
   15d54:	push	{r4, r5, r6, r7, r8, lr}
   15d58:	sub	sp, sp, #16
   15d5c:	ldrh	r3, [r3, #14]
   15d60:	cmp	r3, #7
   15d64:	bne	15ebc <flatcc_builder_end_union_vector@@Base+0x16c>
   15d68:	mov	r5, r0
   15d6c:	mov	r0, r1
   15d70:	mov	r4, r1
   15d74:	bl	15d44 <flatcc_builder_union_vector_count@@Base>
   15d78:	ldr	r8, [r4, #20]
   15d7c:	ldr	r3, [r4, #24]
   15d80:	lsl	r7, r0, #2
   15d84:	add	r1, r7, r0
   15d88:	add	r1, r1, r8
   15d8c:	cmp	r1, r3
   15d90:	mov	r6, r0
   15d94:	str	r1, [r4, #20]
   15d98:	bcs	15e8c <flatcc_builder_end_union_vector@@Base+0x13c>
   15d9c:	ldr	r3, [r4, #16]
   15da0:	adds	r8, r3, r8
   15da4:	beq	15ea4 <flatcc_builder_end_union_vector@@Base+0x154>
   15da8:	mov	r0, r4
   15dac:	bl	15d3c <flatcc_builder_union_vector_edit@@Base>
   15db0:	cmp	r6, #0
   15db4:	add	r2, r8, r7
   15db8:	subne	ip, r2, #1
   15dbc:	subne	r1, r8, #4
   15dc0:	addne	r7, r0, r6, lsl #3
   15dc4:	beq	15de4 <flatcc_builder_end_union_vector@@Base+0x94>
   15dc8:	ldrb	lr, [r0]
   15dcc:	add	r0, r0, #8
   15dd0:	strb	lr, [ip, #1]!
   15dd4:	ldr	lr, [r0, #-4]
   15dd8:	cmp	r0, r7
   15ddc:	str	lr, [r1, #4]!
   15de0:	bne	15dc8 <flatcc_builder_end_union_vector@@Base+0x78>
   15de4:	mov	r3, r8
   15de8:	str	r6, [sp]
   15dec:	mov	r1, r4
   15df0:	add	r0, sp, #8
   15df4:	bl	15ad8 <flatcc_builder_create_union_vector_direct@@Base>
   15df8:	ldr	r2, [r4, #20]
   15dfc:	mov	r1, #0
   15e00:	ldr	r0, [r4, #16]
   15e04:	ldr	r7, [sp, #8]
   15e08:	ldr	r6, [sp, #12]
   15e0c:	bl	1203c <memset@plt>
   15e10:	ldr	r3, [r4, #32]
   15e14:	ldr	r2, [r4, #64]	; 0x40
   15e18:	ldrh	lr, [r4, #130]	; 0x82
   15e1c:	ldr	ip, [r3]
   15e20:	ldr	r1, [r3, #4]
   15e24:	ldrh	r0, [r4, #128]	; 0x80
   15e28:	sub	r2, r2, ip
   15e2c:	cmp	r2, r1
   15e30:	movcs	r2, r1
   15e34:	cmp	r0, lr
   15e38:	ldr	r0, [r4, #60]	; 0x3c
   15e3c:	ldr	r8, [r3, #8]
   15e40:	str	r2, [r4, #24]
   15e44:	add	r2, r0, ip
   15e48:	str	r2, [r4, #16]
   15e4c:	str	r8, [r4, #20]
   15e50:	ldr	r2, [r4, #156]	; 0x9c
   15e54:	str	ip, [r4, #28]
   15e58:	str	r1, [r3, #4]
   15e5c:	strhcc	lr, [r4, #128]	; 0x80
   15e60:	ldrh	r1, [r3, #12]
   15e64:	sub	r2, r2, #1
   15e68:	sub	r3, r3, #36	; 0x24
   15e6c:	mov	r0, r5
   15e70:	str	r7, [r5]
   15e74:	str	r6, [r5, #4]
   15e78:	str	r2, [r4, #156]	; 0x9c
   15e7c:	strh	r1, [r4, #130]	; 0x82
   15e80:	str	r3, [r4, #32]
   15e84:	add	sp, sp, #16
   15e88:	pop	{r4, r5, r6, r7, r8, pc}
   15e8c:	add	r1, r1, #1
   15e90:	mvn	r2, #3
   15e94:	mov	r0, r4
   15e98:	bl	12c10 <_start@@Base+0x40c>
   15e9c:	cmp	r0, #0
   15ea0:	beq	15d9c <flatcc_builder_end_union_vector@@Base+0x4c>
   15ea4:	mov	r3, #0
   15ea8:	mov	r0, r5
   15eac:	str	r3, [r5]
   15eb0:	str	r3, [r5, #4]
   15eb4:	add	sp, sp, #16
   15eb8:	pop	{r4, r5, r6, r7, r8, pc}
   15ebc:	ldr	r3, [pc, #28]	; 15ee0 <flatcc_builder_end_union_vector@@Base+0x190>
   15ec0:	ldr	r1, [pc, #28]	; 15ee4 <flatcc_builder_end_union_vector@@Base+0x194>
   15ec4:	ldr	r0, [pc, #28]	; 15ee8 <flatcc_builder_end_union_vector@@Base+0x198>
   15ec8:	add	r3, pc, r3
   15ecc:	ldr	r2, [pc, #24]	; 15eec <flatcc_builder_end_union_vector@@Base+0x19c>
   15ed0:	add	r3, r3, #968	; 0x3c8
   15ed4:	add	r1, pc, r1
   15ed8:	add	r0, pc, r0
   15edc:	bl	1206c <__assert_fail@plt>
   15ee0:	andeq	r1, r0, r0, asr sl
   15ee4:	muleq	r0, r4, r1
   15ee8:	andeq	r2, r0, ip, lsr #9
   15eec:	andeq	r0, r0, r1, asr r6

00015ef0 <flatcc_builder_extend_union_vector@@Base>:
   15ef0:	ldr	ip, [r0, #32]
   15ef4:	push	{r4, r5, r6, lr}
   15ef8:	ldr	r3, [ip, #20]
   15efc:	adds	r2, r1, r3
   15f00:	movcs	r3, #1
   15f04:	movcc	r3, #0
   15f08:	cmn	r2, #-536870911	; 0xe0000001
   15f0c:	movls	r4, #0
   15f10:	movhi	r4, #1
   15f14:	orrs	r4, r3, r4
   15f18:	bne	15f64 <flatcc_builder_extend_union_vector@@Base+0x74>
   15f1c:	str	r2, [ip, #20]
   15f20:	ldr	r6, [r0, #20]
   15f24:	ldr	r3, [r0, #24]
   15f28:	add	r1, r6, r1, lsl #3
   15f2c:	cmp	r1, r3
   15f30:	mov	r5, r0
   15f34:	str	r1, [r0, #20]
   15f38:	bcs	15f48 <flatcc_builder_extend_union_vector@@Base+0x58>
   15f3c:	ldr	r0, [r5, #16]
   15f40:	add	r0, r0, r6
   15f44:	pop	{r4, r5, r6, pc}
   15f48:	add	r1, r1, #1
   15f4c:	mvn	r2, #3
   15f50:	bl	12c10 <_start@@Base+0x40c>
   15f54:	cmp	r0, #0
   15f58:	beq	15f3c <flatcc_builder_extend_union_vector@@Base+0x4c>
   15f5c:	mov	r0, r4
   15f60:	pop	{r4, r5, r6, pc}
   15f64:	bl	12180 <__assert_fail@plt+0x114>

00015f68 <flatcc_builder_truncate_union_vector@@Base>:
   15f68:	ldr	r3, [r0, #32]
   15f6c:	push	{r4, lr}
   15f70:	ldrh	r2, [r3, #14]
   15f74:	cmp	r2, #7
   15f78:	bne	15fbc <flatcc_builder_truncate_union_vector@@Base+0x54>
   15f7c:	ldr	ip, [r3, #20]
   15f80:	cmp	ip, r1
   15f84:	bcc	15fe0 <flatcc_builder_truncate_union_vector@@Base+0x78>
   15f88:	ldr	r2, [r3, #16]
   15f8c:	sub	ip, ip, r1
   15f90:	str	ip, [r3, #20]
   15f94:	mul	r2, r2, r1
   15f98:	ldr	r3, [r0, #20]
   15f9c:	ldr	r1, [r0, #16]
   15fa0:	sub	r3, r3, r2
   15fa4:	str	r3, [r0, #20]
   15fa8:	add	r0, r1, r3
   15fac:	mov	r1, #0
   15fb0:	bl	1203c <memset@plt>
   15fb4:	mov	r0, #0
   15fb8:	pop	{r4, pc}
   15fbc:	ldr	r3, [pc, #64]	; 16004 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   15fc0:	ldr	r1, [pc, #64]	; 16008 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   15fc4:	ldr	r0, [pc, #64]	; 1600c <flatcc_builder_truncate_union_vector@@Base+0xa4>
   15fc8:	add	r3, pc, r3
   15fcc:	ldr	r2, [pc, #60]	; 16010 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   15fd0:	add	r3, r3, #1000	; 0x3e8
   15fd4:	add	r1, pc, r1
   15fd8:	add	r0, pc, r0
   15fdc:	bl	1206c <__assert_fail@plt>
   15fe0:	ldr	r3, [pc, #44]	; 16014 <flatcc_builder_truncate_union_vector@@Base+0xac>
   15fe4:	ldr	r1, [pc, #44]	; 16018 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   15fe8:	ldr	r0, [pc, #44]	; 1601c <flatcc_builder_truncate_union_vector@@Base+0xb4>
   15fec:	add	r3, pc, r3
   15ff0:	ldr	r2, [pc, #40]	; 16020 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   15ff4:	add	r3, r3, #1000	; 0x3e8
   15ff8:	add	r1, pc, r1
   15ffc:	add	r0, pc, r0
   16000:	bl	1206c <__assert_fail@plt>
   16004:	andeq	r1, r0, r0, asr r9
   16008:	muleq	r0, r4, r0
   1600c:	andeq	r2, r0, ip, lsr #7
   16010:	andeq	r0, r0, r1, lsl #13
   16014:	andeq	r1, r0, ip, lsr #18
   16018:	andeq	r2, r0, r0, ror r0
   1601c:	andeq	r2, r0, ip, lsr #5
   16020:	andeq	r0, r0, r2, lsl #13

00016024 <flatcc_builder_union_vector_push@@Base>:
   16024:	ldr	ip, [r0, #32]
   16028:	push	{r4, r5, r6, lr}
   1602c:	sub	sp, sp, #8
   16030:	ldrh	r3, [ip, #14]
   16034:	stm	sp, {r1, r2}
   16038:	cmp	r3, #7
   1603c:	bne	160bc <flatcc_builder_union_vector_push@@Base+0x98>
   16040:	ldr	r3, [ip, #20]
   16044:	cmn	r3, #-536870911	; 0xe0000001
   16048:	beq	160ac <flatcc_builder_union_vector_push@@Base+0x88>
   1604c:	add	r3, r3, #1
   16050:	str	r3, [ip, #20]
   16054:	ldr	r6, [r0, #20]
   16058:	ldr	r2, [r0, #24]
   1605c:	add	r3, r6, #8
   16060:	cmp	r3, r2
   16064:	mov	r4, r0
   16068:	mov	r5, sp
   1606c:	str	r3, [r0, #20]
   16070:	bcs	16098 <flatcc_builder_union_vector_push@@Base+0x74>
   16074:	ldr	r3, [r4, #16]
   16078:	adds	r3, r3, r6
   1607c:	beq	160e0 <flatcc_builder_union_vector_push@@Base+0xbc>
   16080:	ldm	r5, {r0, r1}
   16084:	mov	r2, r3
   16088:	stm	r3, {r0, r1}
   1608c:	mov	r0, r2
   16090:	add	sp, sp, #8
   16094:	pop	{r4, r5, r6, pc}
   16098:	mvn	r2, #3
   1609c:	add	r1, r6, #9
   160a0:	bl	12c10 <_start@@Base+0x40c>
   160a4:	cmp	r0, #0
   160a8:	beq	16074 <flatcc_builder_union_vector_push@@Base+0x50>
   160ac:	mov	r2, #0
   160b0:	mov	r0, r2
   160b4:	add	sp, sp, #8
   160b8:	pop	{r4, r5, r6, pc}
   160bc:	ldr	r3, [pc, #36]	; 160e8 <flatcc_builder_union_vector_push@@Base+0xc4>
   160c0:	ldr	r1, [pc, #36]	; 160ec <flatcc_builder_union_vector_push@@Base+0xc8>
   160c4:	ldr	r0, [pc, #36]	; 160f0 <flatcc_builder_union_vector_push@@Base+0xcc>
   160c8:	add	r3, pc, r3
   160cc:	ldr	r2, [pc, #32]	; 160f4 <flatcc_builder_union_vector_push@@Base+0xd0>
   160d0:	add	r3, r3, #1040	; 0x410
   160d4:	add	r1, pc, r1
   160d8:	add	r0, pc, r0
   160dc:	bl	1206c <__assert_fail@plt>
   160e0:	mov	r2, r3
   160e4:	b	1608c <flatcc_builder_union_vector_push@@Base+0x68>
   160e8:	andeq	r1, r0, r0, asr r8
   160ec:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   160f0:	andeq	r2, r0, ip, lsr #5
   160f4:	andeq	r0, r0, sp, lsl #13

000160f8 <flatcc_builder_append_union_vector@@Base>:
   160f8:	ldr	ip, [r0, #32]
   160fc:	push	{r4, r5, r6, r7, r8, lr}
   16100:	ldrh	r3, [ip, #14]
   16104:	cmp	r3, #7
   16108:	bne	161a0 <flatcc_builder_append_union_vector@@Base+0xa8>
   1610c:	mov	r6, r1
   16110:	ldr	r1, [ip, #20]
   16114:	adds	r1, r2, r1
   16118:	movcs	lr, #1
   1611c:	movcc	lr, #0
   16120:	cmn	r1, #-536870911	; 0xe0000001
   16124:	movls	r3, #0
   16128:	movhi	r3, #1
   1612c:	orrs	r8, lr, r3
   16130:	bne	1619c <flatcc_builder_append_union_vector@@Base+0xa4>
   16134:	str	r1, [ip, #20]
   16138:	ldr	r7, [r0, #20]
   1613c:	lsl	r4, r2, #3
   16140:	ldr	r3, [r0, #24]
   16144:	add	r1, r4, r7
   16148:	cmp	r1, r3
   1614c:	mov	r5, r0
   16150:	str	r1, [r0, #20]
   16154:	bcs	16180 <flatcc_builder_append_union_vector@@Base+0x88>
   16158:	ldr	r3, [r5, #16]
   1615c:	adds	r3, r3, r7
   16160:	beq	16178 <flatcc_builder_append_union_vector@@Base+0x80>
   16164:	mov	r0, r3
   16168:	mov	r2, r4
   1616c:	mov	r1, r6
   16170:	bl	11fb8 <memcpy@plt>
   16174:	mov	r3, r0
   16178:	mov	r0, r3
   1617c:	pop	{r4, r5, r6, r7, r8, pc}
   16180:	add	r1, r1, #1
   16184:	mvn	r2, #3
   16188:	bl	12c10 <_start@@Base+0x40c>
   1618c:	cmp	r0, #0
   16190:	beq	16158 <flatcc_builder_append_union_vector@@Base+0x60>
   16194:	mov	r3, r8
   16198:	b	16178 <flatcc_builder_append_union_vector@@Base+0x80>
   1619c:	bl	12180 <__assert_fail@plt+0x114>
   161a0:	ldr	r3, [pc, #32]	; 161c8 <flatcc_builder_append_union_vector@@Base+0xd0>
   161a4:	ldr	r1, [pc, #32]	; 161cc <flatcc_builder_append_union_vector@@Base+0xd4>
   161a8:	add	r3, pc, r3
   161ac:	ldr	r0, [pc, #28]	; 161d0 <flatcc_builder_append_union_vector@@Base+0xd8>
   161b0:	add	r3, r3, #1072	; 0x430
   161b4:	ldr	r2, [pc, #24]	; 161d4 <flatcc_builder_append_union_vector@@Base+0xdc>
   161b8:	add	r3, r3, #4
   161bc:	add	r1, pc, r1
   161c0:	add	r0, pc, r0
   161c4:	bl	1206c <__assert_fail@plt>
   161c8:	andeq	r1, r0, r0, ror r7
   161cc:	andeq	r1, r0, ip, lsr #29
   161d0:	andeq	r2, r0, r4, asr #3
   161d4:	muleq	r0, ip, r6

000161d8 <flatcc_builder_create_string@@Base>:
   161d8:	push	{r4, r5, r6, lr}
   161dc:	sub	sp, sp, #88	; 0x58
   161e0:	ldr	lr, [r0, #136]	; 0x88
   161e4:	mov	r4, r0
   161e8:	add	r0, sp, #88	; 0x58
   161ec:	cmp	r2, #0
   161f0:	sub	r3, lr, r2
   161f4:	str	r2, [r0, #-76]!	; 0xffffffb4
   161f8:	sub	r3, r3, #1
   161fc:	str	r0, [sp, #24]
   16200:	ldr	r5, [pc, #188]	; 162c4 <flatcc_builder_create_string@@Base+0xec>
   16204:	moveq	r0, #1
   16208:	strne	r1, [sp, #32]
   1620c:	mov	ip, #4
   16210:	moveq	r1, r0
   16214:	movne	r1, #2
   16218:	and	r3, r3, #3
   1621c:	ldr	r0, [pc, #164]	; 162c8 <flatcc_builder_create_string@@Base+0xf0>
   16220:	str	ip, [sp, #28]
   16224:	add	r5, pc, r5
   16228:	addne	ip, r2, ip
   1622c:	add	r3, r3, #1
   16230:	add	r1, r1, #1
   16234:	add	ip, ip, r3
   16238:	add	r6, sp, #88	; 0x58
   1623c:	strne	r2, [sp, #36]	; 0x24
   16240:	add	r1, r6, r1, lsl #3
   16244:	str	ip, [sp, #16]
   16248:	ldr	r0, [r5, r0]
   1624c:	sub	r5, lr, ip
   16250:	movne	r2, #3
   16254:	moveq	r2, #2
   16258:	cmp	lr, r5
   1625c:	str	r0, [r1, #-72]	; 0xffffffb8
   16260:	str	r3, [r1, #-68]	; 0xffffffbc
   16264:	str	r2, [sp, #20]
   16268:	ble	1629c <flatcc_builder_create_string@@Base+0xc4>
   1626c:	ldr	r0, [r4, #36]	; 0x24
   16270:	mov	r3, r5
   16274:	str	ip, [sp]
   16278:	add	r1, sp, #24
   1627c:	ldr	r6, [r4, #44]	; 0x2c
   16280:	blx	r6
   16284:	cmp	r0, #0
   16288:	bne	162a0 <flatcc_builder_create_string@@Base+0xc8>
   1628c:	mov	r0, r5
   16290:	str	r5, [r4, #136]	; 0x88
   16294:	add	sp, sp, #88	; 0x58
   16298:	pop	{r4, r5, r6, pc}
   1629c:	bl	12148 <__assert_fail@plt+0xdc>
   162a0:	ldr	r3, [pc, #36]	; 162cc <flatcc_builder_create_string@@Base+0xf4>
   162a4:	ldr	r1, [pc, #36]	; 162d0 <flatcc_builder_create_string@@Base+0xf8>
   162a8:	ldr	r0, [pc, #36]	; 162d4 <flatcc_builder_create_string@@Base+0xfc>
   162ac:	add	r3, pc, r3
   162b0:	ldr	r2, [pc, #32]	; 162d8 <flatcc_builder_create_string@@Base+0x100>
   162b4:	add	r3, r3, #28
   162b8:	add	r1, pc, r1
   162bc:	add	r0, pc, r0
   162c0:	bl	1206c <__assert_fail@plt>
   162c4:	ldrdeq	r2, [r1], -r4
   162c8:	andeq	r0, r0, ip, asr r0
   162cc:	andeq	r1, r0, ip, ror #12
   162d0:			; <UNDEFINED> instruction: 0x00001db0
   162d4:	andeq	r1, r0, r4, lsr lr
   162d8:	andeq	r0, r0, fp, lsl #5

000162dc <flatcc_builder_create_string_str@@Base>:
   162dc:	push	{r4, r5, r6, lr}
   162e0:	mov	r5, r0
   162e4:	mov	r0, r1
   162e8:	mov	r4, r1
   162ec:	bl	12024 <strlen@plt>
   162f0:	mov	r1, r4
   162f4:	mov	r2, r0
   162f8:	mov	r0, r5
   162fc:	pop	{r4, r5, r6, lr}
   16300:	b	161d8 <flatcc_builder_create_string@@Base>

00016304 <flatcc_builder_create_string_strn@@Base>:
   16304:	push	{r4, r5, r6, lr}
   16308:	mov	r4, r1
   1630c:	mov	r6, r0
   16310:	mov	r1, #0
   16314:	mov	r0, r4
   16318:	mov	r5, r2
   1631c:	bl	12048 <memchr@plt>
   16320:	mov	r1, r4
   16324:	cmp	r0, #0
   16328:	subne	r5, r0, r4
   1632c:	mov	r2, r5
   16330:	mov	r0, r6
   16334:	pop	{r4, r5, r6, lr}
   16338:	b	161d8 <flatcc_builder_create_string@@Base>

0001633c <flatcc_builder_end_string@@Base>:
   1633c:	ldr	r3, [r0, #32]
   16340:	push	{r4, r5, r6, lr}
   16344:	ldrh	r2, [r3, #14]
   16348:	cmp	r2, #6
   1634c:	bne	1641c <flatcc_builder_end_string@@Base+0xe0>
   16350:	ldr	r2, [r3, #20]
   16354:	ldr	r3, [r0, #20]
   16358:	mov	r4, r0
   1635c:	cmp	r2, r3
   16360:	bne	163f4 <flatcc_builder_end_string@@Base+0xb8>
   16364:	ldr	r1, [r0, #16]
   16368:	bl	161d8 <flatcc_builder_create_string@@Base>
   1636c:	subs	r5, r0, #0
   16370:	beq	163ec <flatcc_builder_end_string@@Base+0xb0>
   16374:	ldr	r2, [r4, #20]
   16378:	mov	r1, #0
   1637c:	ldr	r0, [r4, #16]
   16380:	bl	1203c <memset@plt>
   16384:	ldr	r3, [r4, #32]
   16388:	ldr	r2, [r4, #64]	; 0x40
   1638c:	ldrh	lr, [r4, #130]	; 0x82
   16390:	ldr	ip, [r3]
   16394:	ldr	r1, [r3, #4]
   16398:	ldrh	r0, [r4, #128]	; 0x80
   1639c:	sub	r2, r2, ip
   163a0:	cmp	r2, r1
   163a4:	movcs	r2, r1
   163a8:	cmp	r0, lr
   163ac:	ldr	r0, [r4, #60]	; 0x3c
   163b0:	ldr	r6, [r3, #8]
   163b4:	str	r2, [r4, #24]
   163b8:	add	r2, r0, ip
   163bc:	str	r2, [r4, #16]
   163c0:	str	r6, [r4, #20]
   163c4:	ldr	r2, [r4, #156]	; 0x9c
   163c8:	str	ip, [r4, #28]
   163cc:	str	r1, [r3, #4]
   163d0:	strhcc	lr, [r4, #128]	; 0x80
   163d4:	ldrh	r1, [r3, #12]
   163d8:	sub	r2, r2, #1
   163dc:	sub	r3, r3, #36	; 0x24
   163e0:	str	r2, [r4, #156]	; 0x9c
   163e4:	strh	r1, [r4, #130]	; 0x82
   163e8:	str	r3, [r4, #32]
   163ec:	mov	r0, r5
   163f0:	pop	{r4, r5, r6, pc}
   163f4:	ldr	r3, [pc, #72]	; 16444 <flatcc_builder_end_string@@Base+0x108>
   163f8:	ldr	r1, [pc, #72]	; 16448 <flatcc_builder_end_string@@Base+0x10c>
   163fc:	add	r3, pc, r3
   16400:	ldr	r0, [pc, #68]	; 1644c <flatcc_builder_end_string@@Base+0x110>
   16404:	add	r3, r3, #1104	; 0x450
   16408:	ldr	r2, [pc, #64]	; 16450 <flatcc_builder_end_string@@Base+0x114>
   1640c:	add	r3, r3, #8
   16410:	add	r1, pc, r1
   16414:	add	r0, pc, r0
   16418:	bl	1206c <__assert_fail@plt>
   1641c:	ldr	r3, [pc, #48]	; 16454 <flatcc_builder_end_string@@Base+0x118>
   16420:	ldr	r1, [pc, #48]	; 16458 <flatcc_builder_end_string@@Base+0x11c>
   16424:	add	r3, pc, r3
   16428:	ldr	r0, [pc, #44]	; 1645c <flatcc_builder_end_string@@Base+0x120>
   1642c:	add	r3, r3, #1104	; 0x450
   16430:	ldr	r2, [pc, #40]	; 16460 <flatcc_builder_end_string@@Base+0x124>
   16434:	add	r3, r3, #8
   16438:	add	r1, pc, r1
   1643c:	add	r0, pc, r0
   16440:	bl	1206c <__assert_fail@plt>
   16444:	andeq	r1, r0, ip, lsl r5
   16448:	andeq	r1, r0, r8, asr ip
   1644c:	andeq	r1, r0, r4, lsr #31
   16450:	andeq	r0, r0, r5, asr #13
   16454:	strdeq	r1, [r0], -r4
   16458:	andeq	r1, r0, r0, lsr ip
   1645c:	andeq	r1, r0, ip, lsl lr
   16460:	andeq	r0, r0, r4, asr #13

00016464 <flatcc_builder_string_edit@@Base>:
   16464:	ldr	r0, [r0, #16]
   16468:	bx	lr

0001646c <flatcc_builder_string_len@@Base>:
   1646c:	ldr	r3, [r0, #32]
   16470:	ldr	r0, [r3, #20]
   16474:	bx	lr

00016478 <flatcc_builder_table_add@@Base>:
   16478:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1647c:	mov	r4, r0
   16480:	ldr	r0, [r0, #32]
   16484:	ldrh	r0, [r0, #14]
   16488:	cmp	r0, #3
   1648c:	bne	165a4 <flatcc_builder_table_add@@Base+0x12c>
   16490:	ldr	r0, [pc, #308]	; 165cc <flatcc_builder_table_add@@Base+0x154>
   16494:	cmp	r1, r0
   16498:	bhi	1657c <flatcc_builder_table_add@@Base+0x104>
   1649c:	ldrh	r0, [r4, #130]	; 0x82
   164a0:	lsl	r8, r1, #1
   164a4:	cmp	r0, r3
   164a8:	ldr	r0, [r4, #4]
   164ac:	strhcc	r3, [r4, #130]	; 0x82
   164b0:	add	lr, r0, r8
   164b4:	ldrh	r7, [r0, r8]
   164b8:	cmp	r7, #0
   164bc:	bne	16554 <flatcc_builder_table_add@@Base+0xdc>
   164c0:	ldr	ip, [r4, #12]
   164c4:	ldr	r9, [pc, #260]	; 165d0 <flatcc_builder_table_add@@Base+0x158>
   164c8:	eor	ip, ip, r1
   164cc:	ldr	r0, [r4, #20]
   164d0:	mul	ip, r9, ip
   164d4:	sub	r6, r3, #1
   164d8:	eor	ip, ip, r2
   164dc:	rsb	r3, r3, #0
   164e0:	add	r6, r6, r0
   164e4:	and	r6, r6, r3
   164e8:	mul	ip, r9, ip
   164ec:	ldr	r3, [r4, #24]
   164f0:	add	r2, r2, r6
   164f4:	cmp	r2, r3
   164f8:	uxth	r5, r1
   164fc:	str	ip, [r4, #12]
   16500:	str	r2, [r4, #20]
   16504:	bcs	1652c <flatcc_builder_table_add@@Base+0xb4>
   16508:	add	r3, r6, #4
   1650c:	strh	r3, [lr]
   16510:	ldrh	r3, [r4, #8]
   16514:	ldr	r0, [r4, #16]
   16518:	cmp	r3, r5
   1651c:	addls	r5, r5, #1
   16520:	strhls	r5, [r4, #8]
   16524:	add	r0, r0, r6
   16528:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1652c:	add	r1, r2, #1
   16530:	mov	r0, r4
   16534:	ldr	r2, [pc, #152]	; 165d4 <flatcc_builder_table_add@@Base+0x15c>
   16538:	bl	12c10 <_start@@Base+0x40c>
   1653c:	cmp	r0, #0
   16540:	ldreq	lr, [r4, #4]
   16544:	addeq	lr, lr, r8
   16548:	beq	16508 <flatcc_builder_table_add@@Base+0x90>
   1654c:	mov	r0, r7
   16550:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16554:	ldr	r3, [pc, #124]	; 165d8 <flatcc_builder_table_add@@Base+0x160>
   16558:	ldr	r1, [pc, #124]	; 165dc <flatcc_builder_table_add@@Base+0x164>
   1655c:	add	r3, pc, r3
   16560:	ldr	r0, [pc, #120]	; 165e0 <flatcc_builder_table_add@@Base+0x168>
   16564:	add	r3, r3, #1136	; 0x470
   16568:	ldr	r2, [pc, #116]	; 165e4 <flatcc_builder_table_add@@Base+0x16c>
   1656c:	add	r3, r3, #4
   16570:	add	r1, pc, r1
   16574:	add	r0, pc, r0
   16578:	bl	1206c <__assert_fail@plt>
   1657c:	ldr	r3, [pc, #100]	; 165e8 <flatcc_builder_table_add@@Base+0x170>
   16580:	ldr	r1, [pc, #100]	; 165ec <flatcc_builder_table_add@@Base+0x174>
   16584:	add	r3, pc, r3
   16588:	ldr	r0, [pc, #96]	; 165f0 <flatcc_builder_table_add@@Base+0x178>
   1658c:	add	r3, r3, #1136	; 0x470
   16590:	ldr	r2, [pc, #92]	; 165f4 <flatcc_builder_table_add@@Base+0x17c>
   16594:	add	r3, r3, #4
   16598:	add	r1, pc, r1
   1659c:	add	r0, pc, r0
   165a0:	bl	1206c <__assert_fail@plt>
   165a4:	ldr	r3, [pc, #76]	; 165f8 <flatcc_builder_table_add@@Base+0x180>
   165a8:	ldr	r1, [pc, #76]	; 165fc <flatcc_builder_table_add@@Base+0x184>
   165ac:	add	r3, pc, r3
   165b0:	ldr	r0, [pc, #72]	; 16600 <flatcc_builder_table_add@@Base+0x188>
   165b4:	add	r3, r3, #1136	; 0x470
   165b8:	ldr	r2, [pc, #68]	; 16604 <flatcc_builder_table_add@@Base+0x18c>
   165bc:	add	r3, r3, #4
   165c0:	add	r1, pc, r1
   165c4:	add	r0, pc, r0
   165c8:	bl	1206c <__assert_fail@plt>
   165cc:	strdeq	r7, [r0], -ip
   165d0:			; <UNDEFINED> instruction: 0x9e3779b1
   165d4:	strdeq	pc, [r0], -ip
   165d8:			; <UNDEFINED> instruction: 0x000013bc
   165dc:	strdeq	r1, [r0], -r8
   165e0:	andeq	r1, r0, ip, ror fp
   165e4:	strdeq	r0, [r0], -r8
   165e8:	muleq	r0, r4, r3
   165ec:	ldrdeq	r1, [r0], -r0
   165f0:	andeq	r1, r0, r0, asr #28
   165f4:	andeq	r0, r0, lr, ror #13
   165f8:	andeq	r1, r0, ip, ror #6
   165fc:	andeq	r1, r0, r8, lsr #21
   16600:	andeq	r1, r0, r0, lsl #27
   16604:	andeq	r0, r0, sp, ror #13

00016608 <flatcc_builder_table_edit@@Base>:
   16608:	ldr	r3, [r0, #32]
   1660c:	ldrh	r3, [r3, #14]
   16610:	cmp	r3, #3
   16614:	bne	1662c <flatcc_builder_table_edit@@Base+0x24>
   16618:	ldr	r3, [r0, #20]
   1661c:	ldr	r0, [r0, #16]
   16620:	sub	r1, r3, r1
   16624:	add	r0, r0, r1
   16628:	bx	lr
   1662c:	ldr	r3, [pc, #32]	; 16654 <flatcc_builder_table_edit@@Base+0x4c>
   16630:	ldr	r1, [pc, #32]	; 16658 <flatcc_builder_table_edit@@Base+0x50>
   16634:	ldr	r0, [pc, #32]	; 1665c <flatcc_builder_table_edit@@Base+0x54>
   16638:	add	r3, pc, r3
   1663c:	push	{r4, lr}
   16640:	add	r3, r3, #1168	; 0x490
   16644:	ldr	r2, [pc, #20]	; 16660 <flatcc_builder_table_edit@@Base+0x58>
   16648:	add	r1, pc, r1
   1664c:	add	r0, pc, r0
   16650:	bl	1206c <__assert_fail@plt>
   16654:	andeq	r1, r0, r0, ror #5
   16658:	andeq	r1, r0, r0, lsr #20
   1665c:	strdeq	r1, [r0], -r8
   16660:	andeq	r0, r0, r2, lsl #14

00016664 <flatcc_builder_table_add_copy@@Base>:
   16664:	push	{r4, r5, r6, lr}
   16668:	mov	r4, r3
   1666c:	mov	r6, r2
   16670:	ldrh	r3, [sp, #16]
   16674:	mov	r2, r4
   16678:	bl	16478 <flatcc_builder_table_add@@Base>
   1667c:	subs	r5, r0, #0
   16680:	beq	16690 <flatcc_builder_table_add_copy@@Base+0x2c>
   16684:	mov	r2, r4
   16688:	mov	r1, r6
   1668c:	bl	11fb8 <memcpy@plt>
   16690:	mov	r0, r5
   16694:	pop	{r4, r5, r6, pc}

00016698 <flatcc_builder_table_add_offset@@Base>:
   16698:	ldr	r3, [r0, #32]
   1669c:	push	{r4, r5, r6, r7, r8, lr}
   166a0:	ldrh	r3, [r3, #14]
   166a4:	cmp	r3, #3
   166a8:	bne	167c0 <flatcc_builder_table_add_offset@@Base+0x128>
   166ac:	ldr	r3, [pc, #308]	; 167e8 <flatcc_builder_table_add_offset@@Base+0x150>
   166b0:	cmp	r1, r3
   166b4:	bhi	16798 <flatcc_builder_table_add_offset@@Base+0x100>
   166b8:	ldr	r3, [r0, #4]
   166bc:	lsl	r7, r1, #1
   166c0:	mov	r4, r0
   166c4:	ldrh	r6, [r3, r7]
   166c8:	add	ip, r3, r7
   166cc:	cmp	r6, #0
   166d0:	bne	16770 <flatcc_builder_table_add_offset@@Base+0xd8>
   166d4:	ldr	r3, [r0, #12]
   166d8:	ldr	r2, [pc, #268]	; 167ec <flatcc_builder_table_add_offset@@Base+0x154>
   166dc:	eor	r3, r3, r1
   166e0:	ldr	r5, [r0, #20]
   166e4:	mul	r3, r2, r3
   166e8:	add	r5, r5, #3
   166ec:	eor	r3, r3, #4
   166f0:	bic	r5, r5, #3
   166f4:	mul	r3, r2, r3
   166f8:	ldr	lr, [r0, #24]
   166fc:	add	r2, r5, #4
   16700:	cmp	r2, lr
   16704:	uxth	r8, r1
   16708:	str	r3, [r0, #12]
   1670c:	str	r2, [r0, #20]
   16710:	bhi	1674c <flatcc_builder_table_add_offset@@Base+0xb4>
   16714:	uxth	r2, r5
   16718:	add	r3, r2, #4
   1671c:	strh	r3, [ip]
   16720:	ldrh	r3, [r4, #8]
   16724:	ldr	r0, [r4, #16]
   16728:	cmp	r3, r8
   1672c:	ldr	r3, [r4]
   16730:	addls	r1, r8, #1
   16734:	strhls	r1, [r4, #8]
   16738:	add	r1, r3, #2
   1673c:	str	r1, [r4]
   16740:	add	r0, r0, r5
   16744:	strh	r2, [r3]
   16748:	pop	{r4, r5, r6, r7, r8, pc}
   1674c:	mov	r1, r2
   16750:	ldr	r2, [pc, #152]	; 167f0 <flatcc_builder_table_add_offset@@Base+0x158>
   16754:	bl	12c10 <_start@@Base+0x40c>
   16758:	cmp	r0, #0
   1675c:	ldreq	ip, [r4, #4]
   16760:	addeq	ip, ip, r7
   16764:	beq	16714 <flatcc_builder_table_add_offset@@Base+0x7c>
   16768:	mov	r0, r6
   1676c:	pop	{r4, r5, r6, r7, r8, pc}
   16770:	ldr	r3, [pc, #124]	; 167f4 <flatcc_builder_table_add_offset@@Base+0x15c>
   16774:	ldr	r1, [pc, #124]	; 167f8 <flatcc_builder_table_add_offset@@Base+0x160>
   16778:	add	r3, pc, r3
   1677c:	ldr	r0, [pc, #120]	; 167fc <flatcc_builder_table_add_offset@@Base+0x164>
   16780:	add	r3, r3, #1184	; 0x4a0
   16784:	ldr	r2, [pc, #116]	; 16800 <flatcc_builder_table_add_offset@@Base+0x168>
   16788:	add	r3, r3, #12
   1678c:	add	r1, pc, r1
   16790:	add	r0, pc, r0
   16794:	bl	1206c <__assert_fail@plt>
   16798:	ldr	r3, [pc, #100]	; 16804 <flatcc_builder_table_add_offset@@Base+0x16c>
   1679c:	ldr	r1, [pc, #100]	; 16808 <flatcc_builder_table_add_offset@@Base+0x170>
   167a0:	add	r3, pc, r3
   167a4:	ldr	r0, [pc, #96]	; 1680c <flatcc_builder_table_add_offset@@Base+0x174>
   167a8:	add	r3, r3, #1184	; 0x4a0
   167ac:	ldr	r2, [pc, #92]	; 16810 <flatcc_builder_table_add_offset@@Base+0x178>
   167b0:	add	r3, r3, #12
   167b4:	add	r1, pc, r1
   167b8:	add	r0, pc, r0
   167bc:	bl	1206c <__assert_fail@plt>
   167c0:	ldr	r3, [pc, #76]	; 16814 <flatcc_builder_table_add_offset@@Base+0x17c>
   167c4:	ldr	r1, [pc, #76]	; 16818 <flatcc_builder_table_add_offset@@Base+0x180>
   167c8:	add	r3, pc, r3
   167cc:	ldr	r0, [pc, #72]	; 1681c <flatcc_builder_table_add_offset@@Base+0x184>
   167d0:	add	r3, r3, #1184	; 0x4a0
   167d4:	ldr	r2, [pc, #68]	; 16820 <flatcc_builder_table_add_offset@@Base+0x188>
   167d8:	add	r3, r3, #12
   167dc:	add	r1, pc, r1
   167e0:	add	r0, pc, r0
   167e4:	bl	1206c <__assert_fail@plt>
   167e8:	strdeq	r7, [r0], -ip
   167ec:			; <UNDEFINED> instruction: 0x9e3779b1
   167f0:	strdeq	pc, [r0], -ip
   167f4:	andeq	r1, r0, r0, lsr #3
   167f8:	ldrdeq	r1, [r0], -ip
   167fc:	andeq	r1, r0, r0, ror #18
   16800:	andeq	r0, r0, fp, lsl r7
   16804:	andeq	r1, r0, r8, ror r1
   16808:			; <UNDEFINED> instruction: 0x000018b4
   1680c:	andeq	r1, r0, r4, lsr #24
   16810:	andeq	r0, r0, r4, lsl r7
   16814:	andeq	r1, r0, r0, asr r1
   16818:	andeq	r1, r0, ip, lsl #17
   1681c:	andeq	r1, r0, r4, ror #22
   16820:	andeq	r0, r0, r3, lsl r7

00016824 <flatcc_builder_table_add_union@@Base>:
   16824:	push	{r4, r5, r6, r7, lr}
   16828:	sub	sp, sp, #12
   1682c:	add	ip, sp, #8
   16830:	stmdb	ip, {r2, r3}
   16834:	ldr	r3, [r0, #32]
   16838:	ldrb	r5, [sp]
   1683c:	ldr	r6, [sp, #4]
   16840:	ldrh	r3, [r3, #14]
   16844:	cmp	r3, #3
   16848:	bne	168d0 <flatcc_builder_table_add_union@@Base+0xac>
   1684c:	cmp	r5, #0
   16850:	mov	r4, r0
   16854:	mov	r7, r1
   16858:	beq	168a0 <flatcc_builder_table_add_union@@Base+0x7c>
   1685c:	cmp	r6, #0
   16860:	beq	16874 <flatcc_builder_table_add_union@@Base+0x50>
   16864:	bl	16698 <flatcc_builder_table_add_offset@@Base>
   16868:	cmp	r0, #0
   1686c:	strne	r6, [r0]
   16870:	beq	16920 <flatcc_builder_table_add_union@@Base+0xfc>
   16874:	mov	r3, #1
   16878:	sub	r1, r7, #1
   1687c:	mov	r0, r4
   16880:	mov	r2, r3
   16884:	bl	16478 <flatcc_builder_table_add@@Base>
   16888:	cmp	r0, #0
   1688c:	beq	168f8 <flatcc_builder_table_add_union@@Base+0xd4>
   16890:	strb	r5, [r0]
   16894:	mov	r0, #0
   16898:	add	sp, sp, #12
   1689c:	pop	{r4, r5, r6, r7, pc}
   168a0:	cmp	r6, #0
   168a4:	beq	16874 <flatcc_builder_table_add_union@@Base+0x50>
   168a8:	ldr	r3, [pc, #152]	; 16948 <flatcc_builder_table_add_union@@Base+0x124>
   168ac:	ldr	r1, [pc, #152]	; 1694c <flatcc_builder_table_add_union@@Base+0x128>
   168b0:	add	r3, pc, r3
   168b4:	ldr	r0, [pc, #148]	; 16950 <flatcc_builder_table_add_union@@Base+0x12c>
   168b8:	add	r3, r3, #1216	; 0x4c0
   168bc:	ldr	r2, [pc, #144]	; 16954 <flatcc_builder_table_add_union@@Base+0x130>
   168c0:	add	r3, r3, #12
   168c4:	add	r1, pc, r1
   168c8:	add	r0, pc, r0
   168cc:	bl	1206c <__assert_fail@plt>
   168d0:	ldr	r3, [pc, #128]	; 16958 <flatcc_builder_table_add_union@@Base+0x134>
   168d4:	ldr	r1, [pc, #128]	; 1695c <flatcc_builder_table_add_union@@Base+0x138>
   168d8:	add	r3, pc, r3
   168dc:	ldr	r0, [pc, #124]	; 16960 <flatcc_builder_table_add_union@@Base+0x13c>
   168e0:	add	r3, r3, #1216	; 0x4c0
   168e4:	ldr	r2, [pc, #120]	; 16964 <flatcc_builder_table_add_union@@Base+0x140>
   168e8:	add	r3, r3, #12
   168ec:	add	r1, pc, r1
   168f0:	add	r0, pc, r0
   168f4:	bl	1206c <__assert_fail@plt>
   168f8:	ldr	r3, [pc, #104]	; 16968 <flatcc_builder_table_add_union@@Base+0x144>
   168fc:	ldr	r1, [pc, #104]	; 1696c <flatcc_builder_table_add_union@@Base+0x148>
   16900:	add	r3, pc, r3
   16904:	ldr	r0, [pc, #100]	; 16970 <flatcc_builder_table_add_union@@Base+0x14c>
   16908:	add	r3, r3, #1216	; 0x4c0
   1690c:	ldr	r2, [pc, #96]	; 16974 <flatcc_builder_table_add_union@@Base+0x150>
   16910:	add	r3, r3, #12
   16914:	add	r1, pc, r1
   16918:	add	r0, pc, r0
   1691c:	bl	1206c <__assert_fail@plt>
   16920:	ldr	r3, [pc, #80]	; 16978 <flatcc_builder_table_add_union@@Base+0x154>
   16924:	ldr	r1, [pc, #80]	; 1697c <flatcc_builder_table_add_union@@Base+0x158>
   16928:	add	r3, pc, r3
   1692c:	ldr	r0, [pc, #76]	; 16980 <flatcc_builder_table_add_union@@Base+0x15c>
   16930:	add	r3, r3, #1216	; 0x4c0
   16934:	ldr	r2, [pc, #72]	; 16984 <flatcc_builder_table_add_union@@Base+0x160>
   16938:	add	r3, r3, #12
   1693c:	add	r1, pc, r1
   16940:	add	r0, pc, r0
   16944:	bl	1206c <__assert_fail@plt>
   16948:	andeq	r1, r0, r8, rrx
   1694c:	andeq	r1, r0, r4, lsr #15
   16950:	andeq	r1, r0, r8, asr fp
   16954:	andeq	r0, r0, pc, ror #11
   16958:	andeq	r1, r0, r0, asr #32
   1695c:	andeq	r1, r0, ip, ror r7
   16960:	andeq	r1, r0, r4, asr sl
   16964:	andeq	r0, r0, lr, ror #11
   16968:	andeq	r1, r0, r8, lsl r0
   1696c:	andeq	r1, r0, r4, asr r7
   16970:	andeq	r1, r0, r8, lsr fp
   16974:	strdeq	r0, [r0], -r6
   16978:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1697c:	andeq	r1, r0, ip, lsr #14
   16980:	andeq	r1, r0, r4, lsl #22
   16984:	strdeq	r0, [r0], -r2

00016988 <flatcc_builder_table_add_union_vector@@Base>:
   16988:	push	{r4, r5, r6, r7, lr}
   1698c:	sub	sp, sp, #12
   16990:	add	ip, sp, #8
   16994:	stmdb	ip, {r2, r3}
   16998:	ldr	r3, [r0, #32]
   1699c:	ldr	r4, [sp]
   169a0:	ldr	r6, [sp, #4]
   169a4:	ldrh	r3, [r3, #14]
   169a8:	cmp	r3, #3
   169ac:	bne	16a50 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   169b0:	clz	r3, r6
   169b4:	clz	r2, r4
   169b8:	lsr	r3, r3, #5
   169bc:	lsr	r2, r2, #5
   169c0:	cmp	r2, r3
   169c4:	beq	169e4 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   169c8:	adds	r4, r4, #0
   169cc:	movne	r4, #1
   169d0:	cmp	r4, r3
   169d4:	mvnne	r0, #0
   169d8:	beq	16a78 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   169dc:	add	sp, sp, #12
   169e0:	pop	{r4, r5, r6, r7, pc}
   169e4:	cmp	r4, #0
   169e8:	moveq	r0, r4
   169ec:	beq	169dc <flatcc_builder_table_add_union_vector@@Base+0x54>
   169f0:	mov	r7, r1
   169f4:	sub	r1, r1, #1
   169f8:	mov	r5, r0
   169fc:	bl	16698 <flatcc_builder_table_add_offset@@Base>
   16a00:	cmp	r0, #0
   16a04:	beq	16aa0 <flatcc_builder_table_add_union_vector@@Base+0x118>
   16a08:	str	r4, [r0]
   16a0c:	mov	r1, r7
   16a10:	mov	r0, r5
   16a14:	bl	16698 <flatcc_builder_table_add_offset@@Base>
   16a18:	cmp	r0, #0
   16a1c:	strne	r6, [r0]
   16a20:	movne	r0, #0
   16a24:	bne	169dc <flatcc_builder_table_add_union_vector@@Base+0x54>
   16a28:	ldr	r3, [pc, #152]	; 16ac8 <flatcc_builder_table_add_union_vector@@Base+0x140>
   16a2c:	ldr	r1, [pc, #152]	; 16acc <flatcc_builder_table_add_union_vector@@Base+0x144>
   16a30:	add	r3, pc, r3
   16a34:	ldr	r0, [pc, #148]	; 16ad0 <flatcc_builder_table_add_union_vector@@Base+0x148>
   16a38:	add	r3, r3, #1248	; 0x4e0
   16a3c:	ldr	r2, [pc, #144]	; 16ad4 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   16a40:	add	r3, r3, #12
   16a44:	add	r1, pc, r1
   16a48:	add	r0, pc, r0
   16a4c:	bl	1206c <__assert_fail@plt>
   16a50:	ldr	r3, [pc, #128]	; 16ad8 <flatcc_builder_table_add_union_vector@@Base+0x150>
   16a54:	ldr	r1, [pc, #128]	; 16adc <flatcc_builder_table_add_union_vector@@Base+0x154>
   16a58:	add	r3, pc, r3
   16a5c:	ldr	r0, [pc, #124]	; 16ae0 <flatcc_builder_table_add_union_vector@@Base+0x158>
   16a60:	add	r3, r3, #1248	; 0x4e0
   16a64:	mov	r2, #1536	; 0x600
   16a68:	add	r3, r3, #12
   16a6c:	add	r1, pc, r1
   16a70:	add	r0, pc, r0
   16a74:	bl	1206c <__assert_fail@plt>
   16a78:	ldr	r3, [pc, #100]	; 16ae4 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   16a7c:	ldr	r1, [pc, #100]	; 16ae8 <flatcc_builder_table_add_union_vector@@Base+0x160>
   16a80:	add	r3, pc, r3
   16a84:	ldr	r0, [pc, #96]	; 16aec <flatcc_builder_table_add_union_vector@@Base+0x164>
   16a88:	add	r3, r3, #1248	; 0x4e0
   16a8c:	ldr	r2, [pc, #92]	; 16af0 <flatcc_builder_table_add_union_vector@@Base+0x168>
   16a90:	add	r3, r3, #12
   16a94:	add	r1, pc, r1
   16a98:	add	r0, pc, r0
   16a9c:	bl	1206c <__assert_fail@plt>
   16aa0:	ldr	r3, [pc, #76]	; 16af4 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   16aa4:	ldr	r1, [pc, #76]	; 16af8 <flatcc_builder_table_add_union_vector@@Base+0x170>
   16aa8:	add	r3, pc, r3
   16aac:	ldr	r0, [pc, #72]	; 16afc <flatcc_builder_table_add_union_vector@@Base+0x174>
   16ab0:	add	r3, r3, #1248	; 0x4e0
   16ab4:	ldr	r2, [pc, #68]	; 16b00 <flatcc_builder_table_add_union_vector@@Base+0x178>
   16ab8:	add	r3, r3, #12
   16abc:	add	r1, pc, r1
   16ac0:	add	r0, pc, r0
   16ac4:	bl	1206c <__assert_fail@plt>
   16ac8:	andeq	r0, r0, r8, ror #29
   16acc:	andeq	r1, r0, r4, lsr #12
   16ad0:	strdeq	r1, [r0], -ip
   16ad4:	andeq	r0, r0, r8, lsl #12
   16ad8:	andeq	r0, r0, r0, asr #29
   16adc:	strdeq	r1, [r0], -ip
   16ae0:	ldrdeq	r1, [r0], -r4
   16ae4:	muleq	r0, r8, lr
   16ae8:	ldrdeq	r1, [r0], -r4
   16aec:	andeq	r1, r0, r4, asr #19
   16af0:	andeq	r0, r0, r1, lsl #12
   16af4:	andeq	r0, r0, r0, ror lr
   16af8:	andeq	r1, r0, ip, lsr #11
   16afc:	andeq	r1, r0, r4, lsl #19
   16b00:	andeq	r0, r0, r4, lsl #12

00016b04 <flatcc_builder_push_buffer_alignment@@Base>:
   16b04:	mov	r3, r0
   16b08:	mov	r2, #4
   16b0c:	ldrh	r0, [r0, #128]	; 0x80
   16b10:	strh	r2, [r3, #128]	; 0x80
   16b14:	bx	lr

00016b18 <flatcc_builder_pop_buffer_alignment@@Base>:
   16b18:	ldrh	r3, [r0, #128]	; 0x80
   16b1c:	cmp	r3, r1
   16b20:	strhcc	r1, [r0, #128]	; 0x80
   16b24:	bx	lr

00016b28 <flatcc_builder_get_buffer_alignment@@Base>:
   16b28:	ldrh	r0, [r0, #128]	; 0x80
   16b2c:	bx	lr

00016b30 <flatcc_builder_set_vtable_clustering@@Base>:
   16b30:	clz	r1, r1
   16b34:	lsr	r1, r1, #5
   16b38:	str	r1, [r0, #180]	; 0xb4
   16b3c:	bx	lr

00016b40 <flatcc_builder_set_block_align@@Base>:
   16b40:	strh	r1, [r0, #132]	; 0x84
   16b44:	bx	lr

00016b48 <flatcc_builder_get_level@@Base>:
   16b48:	ldr	r0, [r0, #156]	; 0x9c
   16b4c:	bx	lr

00016b50 <flatcc_builder_set_max_level@@Base>:
   16b50:	ldr	r3, [r0, #160]	; 0xa0
   16b54:	str	r1, [r0, #176]	; 0xb0
   16b58:	cmp	r1, r3
   16b5c:	strgt	r1, [r0, #160]	; 0xa0
   16b60:	bx	lr

00016b64 <flatcc_builder_get_buffer_size@@Base>:
   16b64:	ldr	r2, [r0, #140]	; 0x8c
   16b68:	ldr	r0, [r0, #136]	; 0x88
   16b6c:	sub	r0, r2, r0
   16b70:	bx	lr

00016b74 <flatcc_builder_get_buffer_start@@Base>:
   16b74:	ldr	r0, [r0, #136]	; 0x88
   16b78:	bx	lr

00016b7c <flatcc_builder_get_buffer_end@@Base>:
   16b7c:	ldr	r0, [r0, #140]	; 0x8c
   16b80:	bx	lr

00016b84 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16b84:	str	r1, [r0, #172]	; 0xac
   16b88:	bx	lr

00016b8c <flatcc_builder_set_identifier@@Base>:
   16b8c:	ldr	r3, [pc, #32]	; 16bb4 <flatcc_builder_set_identifier@@Base+0x28>
   16b90:	cmp	r1, #0
   16b94:	add	r3, pc, r3
   16b98:	beq	16ba8 <flatcc_builder_set_identifier@@Base+0x1c>
   16b9c:	ldr	r3, [r1]
   16ba0:	str	r3, [r0, #168]	; 0xa8
   16ba4:	bx	lr
   16ba8:	ldr	r2, [pc, #8]	; 16bb8 <flatcc_builder_set_identifier@@Base+0x2c>
   16bac:	ldr	r1, [r3, r2]
   16bb0:	b	16b9c <flatcc_builder_set_identifier@@Base+0x10>
   16bb4:	andeq	r2, r1, r4, ror #8
   16bb8:	andeq	r0, r0, ip, asr r0

00016bbc <flatcc_builder_get_type@@Base>:
   16bbc:	ldr	r0, [r0, #32]
   16bc0:	cmp	r0, #0
   16bc4:	ldrhne	r0, [r0, #14]
   16bc8:	bx	lr

00016bcc <flatcc_builder_get_type_at@@Base>:
   16bcc:	cmp	r1, #0
   16bd0:	ble	16bf8 <flatcc_builder_get_type_at@@Base+0x2c>
   16bd4:	ldr	r3, [r0, #156]	; 0x9c
   16bd8:	cmp	r1, r3
   16bdc:	bgt	16bf8 <flatcc_builder_get_type_at@@Base+0x2c>
   16be0:	sub	r1, r1, r3
   16be4:	ldr	r3, [r0, #32]
   16be8:	add	r1, r1, r1, lsl #3
   16bec:	add	r1, r3, r1, lsl #2
   16bf0:	ldrh	r0, [r1, #14]
   16bf4:	bx	lr
   16bf8:	mov	r0, #0
   16bfc:	bx	lr

00016c00 <flatcc_builder_get_direct_buffer@@Base>:
   16c00:	ldr	r3, [r0, #184]	; 0xb8
   16c04:	cmp	r3, #0
   16c08:	beq	16c1c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   16c0c:	ldr	r2, [r0, #188]	; 0xbc
   16c10:	ldr	r3, [r0, #192]	; 0xc0
   16c14:	cmp	r2, r3
   16c18:	beq	16c30 <flatcc_builder_get_direct_buffer@@Base+0x30>
   16c1c:	cmp	r1, #0
   16c20:	movne	r0, #0
   16c24:	strne	r0, [r1]
   16c28:	moveq	r0, r1
   16c2c:	bx	lr
   16c30:	cmp	r1, #0
   16c34:	ldrne	r3, [r0, #212]	; 0xd4
   16c38:	ldr	r0, [r0, #196]	; 0xc4
   16c3c:	strne	r3, [r1]
   16c40:	bx	lr

00016c44 <flatcc_builder_copy_buffer@@Base>:
   16c44:	ldr	r3, [r0, #184]	; 0xb8
   16c48:	cmp	r3, #0
   16c4c:	beq	16c8c <flatcc_builder_copy_buffer@@Base+0x48>
   16c50:	push	{r4, lr}
   16c54:	add	r0, r0, #188	; 0xbc
   16c58:	bl	1735c <flatcc_emitter_copy_buffer@@Base>
   16c5c:	cmp	r0, #0
   16c60:	popne	{r4, pc}
   16c64:	ldr	r3, [pc, #40]	; 16c94 <flatcc_builder_copy_buffer@@Base+0x50>
   16c68:	ldr	r1, [pc, #40]	; 16c98 <flatcc_builder_copy_buffer@@Base+0x54>
   16c6c:	add	r3, pc, r3
   16c70:	ldr	r0, [pc, #36]	; 16c9c <flatcc_builder_copy_buffer@@Base+0x58>
   16c74:	add	r3, r3, #1296	; 0x510
   16c78:	ldr	r2, [pc, #32]	; 16ca0 <flatcc_builder_copy_buffer@@Base+0x5c>
   16c7c:	add	r3, r3, #4
   16c80:	add	r1, pc, r1
   16c84:	add	r0, pc, r0
   16c88:	bl	1206c <__assert_fail@plt>
   16c8c:	mov	r0, r3
   16c90:	bx	lr
   16c94:	andeq	r0, r0, ip, lsr #25
   16c98:	andeq	r1, r0, r8, ror #7
   16c9c:	andeq	r1, r0, r0, lsl #16
   16ca0:	andeq	r0, r0, r6, lsl #15

00016ca4 <flatcc_builder_finalize_buffer@@Base>:
   16ca4:	push	{r4, r5, r6, lr}
   16ca8:	mov	r5, r1
   16cac:	mov	r6, r0
   16cb0:	bl	16b64 <flatcc_builder_get_buffer_size@@Base>
   16cb4:	cmp	r5, #0
   16cb8:	strne	r0, [r5]
   16cbc:	mov	r4, r0
   16cc0:	bl	12000 <malloc@plt>
   16cc4:	subs	r5, r0, #0
   16cc8:	beq	16cec <flatcc_builder_finalize_buffer@@Base+0x48>
   16ccc:	mov	r2, r4
   16cd0:	mov	r0, r6
   16cd4:	mov	r1, r5
   16cd8:	bl	16c44 <flatcc_builder_copy_buffer@@Base>
   16cdc:	cmp	r0, #0
   16ce0:	beq	16d10 <flatcc_builder_finalize_buffer@@Base+0x6c>
   16ce4:	mov	r0, r5
   16ce8:	pop	{r4, r5, r6, pc}
   16cec:	ldr	r3, [pc, #64]	; 16d34 <flatcc_builder_finalize_buffer@@Base+0x90>
   16cf0:	ldr	r1, [pc, #64]	; 16d38 <flatcc_builder_finalize_buffer@@Base+0x94>
   16cf4:	ldr	r0, [pc, #64]	; 16d3c <flatcc_builder_finalize_buffer@@Base+0x98>
   16cf8:	add	r3, pc, r3
   16cfc:	ldr	r2, [pc, #60]	; 16d40 <flatcc_builder_finalize_buffer@@Base+0x9c>
   16d00:	add	r3, r3, #1328	; 0x530
   16d04:	add	r1, pc, r1
   16d08:	add	r0, pc, r0
   16d0c:	bl	1206c <__assert_fail@plt>
   16d10:	ldr	r3, [pc, #44]	; 16d44 <flatcc_builder_finalize_buffer@@Base+0xa0>
   16d14:	ldr	r1, [pc, #44]	; 16d48 <flatcc_builder_finalize_buffer@@Base+0xa4>
   16d18:	ldr	r0, [pc, #44]	; 16d4c <flatcc_builder_finalize_buffer@@Base+0xa8>
   16d1c:	add	r3, pc, r3
   16d20:	ldr	r2, [pc, #40]	; 16d50 <flatcc_builder_finalize_buffer@@Base+0xac>
   16d24:	add	r3, r3, #1328	; 0x530
   16d28:	add	r1, pc, r1
   16d2c:	add	r0, pc, r0
   16d30:	bl	1206c <__assert_fail@plt>
   16d34:	andeq	r0, r0, r0, lsr #24
   16d38:	andeq	r1, r0, r4, ror #6
   16d3c:	andeq	r1, r0, r8, ror #7
   16d40:	muleq	r0, r8, r7
   16d44:	strdeq	r0, [r0], -ip
   16d48:	andeq	r1, r0, r0, asr #6
   16d4c:	andeq	r1, r0, r4, asr #7
   16d50:	muleq	r0, ip, r7

00016d54 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16d54:	push	{r4, r5, r6, r7, lr}
   16d58:	sub	sp, sp, #12
   16d5c:	mov	r6, r1
   16d60:	mov	r7, r0
   16d64:	bl	16b64 <flatcc_builder_get_buffer_size@@Base>
   16d68:	cmp	r6, #0
   16d6c:	strne	r0, [r6]
   16d70:	mov	r4, r0
   16d74:	mov	r0, r7
   16d78:	bl	16b28 <flatcc_builder_get_buffer_alignment@@Base>
   16d7c:	sub	r4, r4, #1
   16d80:	mov	r1, r0
   16d84:	rsb	r3, r0, #0
   16d88:	add	r4, r4, r0
   16d8c:	add	r0, sp, #8
   16d90:	cmp	r1, #4
   16d94:	and	r4, r4, r3
   16d98:	mov	r3, #0
   16d9c:	movcc	r1, #4
   16da0:	mov	r2, r4
   16da4:	str	r3, [r0, #-4]!
   16da8:	bl	12030 <posix_memalign@plt>
   16dac:	cmp	r0, #0
   16db0:	beq	16de0 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   16db4:	ldr	r0, [sp, #4]
   16db8:	cmp	r0, #0
   16dbc:	beq	16dc4 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   16dc0:	bl	11fac <free@plt>
   16dc4:	cmp	r6, #0
   16dc8:	moveq	r5, r6
   16dcc:	movne	r5, #0
   16dd0:	strne	r5, [r6]
   16dd4:	mov	r0, r5
   16dd8:	add	sp, sp, #12
   16ddc:	pop	{r4, r5, r6, r7, pc}
   16de0:	ldr	r5, [sp, #4]
   16de4:	cmp	r5, #0
   16de8:	beq	16dc4 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   16dec:	mov	r2, r4
   16df0:	mov	r0, r7
   16df4:	mov	r1, r5
   16df8:	bl	16c44 <flatcc_builder_copy_buffer@@Base>
   16dfc:	cmp	r0, #0
   16e00:	bne	16dd4 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
   16e04:	mov	r0, r5
   16e08:	b	16dc0 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00016e0c <flatcc_builder_aligned_alloc@@Base>:
   16e0c:	push	{r4, lr}
   16e10:	sub	sp, sp, #8
   16e14:	add	r3, sp, #8
   16e18:	cmp	r0, #4
   16e1c:	mov	r4, #0
   16e20:	mov	r2, r1
   16e24:	str	r4, [r3, #-4]!
   16e28:	movcs	r1, r0
   16e2c:	movcc	r1, #4
   16e30:	mov	r0, r3
   16e34:	bl	12030 <posix_memalign@plt>
   16e38:	cmp	r0, r4
   16e3c:	ldr	r0, [sp, #4]
   16e40:	beq	16e54 <flatcc_builder_aligned_alloc@@Base+0x48>
   16e44:	cmp	r0, #0
   16e48:	beq	16e54 <flatcc_builder_aligned_alloc@@Base+0x48>
   16e4c:	bl	11fac <free@plt>
   16e50:	mov	r0, r4
   16e54:	add	sp, sp, #8
   16e58:	pop	{r4, pc}

00016e5c <flatcc_builder_aligned_free@@Base>:
   16e5c:	b	11fac <free@plt>

00016e60 <flatcc_builder_get_emit_context@@Base>:
   16e60:	ldr	r0, [r0, #36]	; 0x24
   16e64:	bx	lr

00016e68 <flatcc_emitter_recycle_page@@Base>:
   16e68:	ldr	r3, [r0]
   16e6c:	cmp	r3, r1
   16e70:	beq	16eb8 <flatcc_emitter_recycle_page@@Base+0x50>
   16e74:	ldr	r2, [r0, #4]
   16e78:	cmp	r1, r2
   16e7c:	beq	16eb8 <flatcc_emitter_recycle_page@@Base+0x50>
   16e80:	ldr	ip, [r1, #2944]	; 0xb80
   16e84:	ldr	r2, [r1, #2948]	; 0xb84
   16e88:	push	{lr}		; (str lr, [sp, #-4]!)
   16e8c:	mov	r0, #0
   16e90:	str	r2, [ip, #2948]	; 0xb84
   16e94:	ldr	r2, [r3, #2948]	; 0xb84
   16e98:	ldr	lr, [r1, #2948]	; 0xb84
   16e9c:	str	ip, [lr, #2944]	; 0xb80
   16ea0:	str	r3, [r1, #2944]	; 0xb80
   16ea4:	str	r2, [r1, #2948]	; 0xb84
   16ea8:	str	r1, [r2, #2944]	; 0xb80
   16eac:	ldr	r3, [r1, #2944]	; 0xb80
   16eb0:	str	r1, [r3, #2948]	; 0xb84
   16eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   16eb8:	mvn	r0, #0
   16ebc:	bx	lr

00016ec0 <flatcc_emitter_reset@@Base>:
   16ec0:	ldr	r2, [r0]
   16ec4:	cmp	r2, #0
   16ec8:	bxeq	lr
   16ecc:	ldr	r3, [r0, #32]
   16ed0:	mov	r1, #1472	; 0x5c0
   16ed4:	push	{r4, lr}
   16ed8:	cmp	r3, #0
   16edc:	str	r1, [r0, #12]
   16ee0:	str	r1, [r0, #20]
   16ee4:	ldr	r1, [r0, #24]
   16ee8:	add	ip, r2, #1472	; 0x5c0
   16eec:	moveq	r3, r1
   16ef0:	stmib	r0, {r2, ip}
   16ef4:	str	ip, [r0, #16]
   16ef8:	add	ip, r3, r3, lsl #1
   16efc:	lsr	r3, r1, #2
   16f00:	add	r3, r3, ip, lsr #2
   16f04:	ldr	ip, [r0, #28]
   16f08:	ldr	lr, [pc, #104]	; 16f78 <flatcc_emitter_reset@@Base+0xb8>
   16f0c:	cmp	ip, r3, lsl #1
   16f10:	mov	r1, #0
   16f14:	str	lr, [r2, #2952]	; 0xb88
   16f18:	str	r3, [r0, #32]
   16f1c:	str	r1, [r0, #24]
   16f20:	popls	{r4, pc}
   16f24:	ldr	r3, [r2, #2944]	; 0xb80
   16f28:	mov	r4, r0
   16f2c:	cmp	r2, r3
   16f30:	popeq	{r4, pc}
   16f34:	ldr	r1, [r3, #2944]	; 0xb80
   16f38:	mov	r0, r3
   16f3c:	str	r1, [r2, #2944]	; 0xb80
   16f40:	ldr	r3, [r3, #2944]	; 0xb80
   16f44:	str	r2, [r3, #2948]	; 0xb84
   16f48:	bl	11fac <free@plt>
   16f4c:	ldr	r3, [r4, #28]
   16f50:	ldr	r2, [r4, #32]
   16f54:	sub	r3, r3, #2944	; 0xb80
   16f58:	str	r3, [r4, #28]
   16f5c:	cmp	r3, r2, lsl #1
   16f60:	popls	{r4, pc}
   16f64:	ldm	r4, {r1, r2}
   16f68:	ldr	r3, [r2, #2944]	; 0xb80
   16f6c:	cmp	r3, r1
   16f70:	bne	16f34 <flatcc_emitter_reset@@Base+0x74>
   16f74:	pop	{r4, pc}
   16f78:			; <UNDEFINED> instruction: 0xfffffa40

00016f7c <flatcc_emitter_clear@@Base>:
   16f7c:	ldr	r3, [r0]
   16f80:	cmp	r3, #0
   16f84:	bxeq	lr
   16f88:	ldr	r2, [r3, #2948]	; 0xb84
   16f8c:	mov	r1, #0
   16f90:	push	{r4, r5, r6, lr}
   16f94:	mov	r5, r0
   16f98:	str	r1, [r2, #2944]	; 0xb80
   16f9c:	ldr	r4, [r3, #2944]	; 0xb80
   16fa0:	cmp	r4, r1
   16fa4:	bne	16fb0 <flatcc_emitter_clear@@Base+0x34>
   16fa8:	b	16fe0 <flatcc_emitter_clear@@Base+0x64>
   16fac:	mov	r4, r3
   16fb0:	ldr	r0, [r4, #2948]	; 0xb84
   16fb4:	bl	11fac <free@plt>
   16fb8:	ldr	r3, [r4, #2944]	; 0xb80
   16fbc:	cmp	r3, #0
   16fc0:	bne	16fac <flatcc_emitter_clear@@Base+0x30>
   16fc4:	mov	r0, r4
   16fc8:	bl	11fac <free@plt>
   16fcc:	mov	r0, r5
   16fd0:	mov	r2, #36	; 0x24
   16fd4:	mov	r1, #0
   16fd8:	pop	{r4, r5, r6, lr}
   16fdc:	b	1203c <memset@plt>
   16fe0:	mov	r4, r3
   16fe4:	b	16fc4 <flatcc_emitter_clear@@Base+0x48>

00016fe8 <flatcc_emitter@@Base>:
   16fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fec:	sub	sp, sp, #12
   16ff0:	mov	r4, r0
   16ff4:	ldr	ip, [sp, #48]	; 0x30
   16ff8:	ldr	r0, [r0, #24]
   16ffc:	cmp	r3, #0
   17000:	add	r0, r0, ip
   17004:	str	r0, [r4, #24]
   17008:	blt	171cc <flatcc_emitter@@Base+0x1e4>
   1700c:	ldr	r0, [r4, #20]
   17010:	cmp	ip, r0
   17014:	bls	170a0 <flatcc_emitter@@Base+0xb8>
   17018:	cmp	r2, #0
   1701c:	addne	r7, r1, #8
   17020:	movne	r8, r2
   17024:	movne	r9, #2944	; 0xb80
   17028:	beq	17094 <flatcc_emitter@@Base+0xac>
   1702c:	ldr	r6, [r7, #-4]
   17030:	ldr	sl, [r7, #-8]
   17034:	cmp	r6, #0
   17038:	beq	17088 <flatcc_emitter@@Base+0xa0>
   1703c:	cmp	r0, r6
   17040:	mov	r5, r0
   17044:	bcs	170e8 <flatcc_emitter@@Base+0x100>
   17048:	cmp	r0, #0
   1704c:	beq	170f4 <flatcc_emitter@@Base+0x10c>
   17050:	sub	r6, r6, r0
   17054:	mov	r1, sl
   17058:	mov	r2, r5
   1705c:	ldr	r0, [r4, #16]
   17060:	bl	11fb8 <memcpy@plt>
   17064:	ldr	r3, [r4, #16]
   17068:	ldr	r0, [r4, #20]
   1706c:	add	r3, r3, r5
   17070:	sub	r0, r0, r5
   17074:	cmp	r6, #0
   17078:	add	sl, sl, r5
   1707c:	str	r3, [r4, #16]
   17080:	str	r0, [r4, #20]
   17084:	bne	1703c <flatcc_emitter@@Base+0x54>
   17088:	subs	r8, r8, #1
   1708c:	add	r7, r7, #8
   17090:	bne	1702c <flatcc_emitter@@Base+0x44>
   17094:	mov	r0, #0
   17098:	add	sp, sp, #12
   1709c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170a0:	ldr	r3, [r4, #16]
   170a4:	sub	r0, r0, ip
   170a8:	add	ip, r3, ip
   170ac:	str	r0, [r4, #20]
   170b0:	str	ip, [r4, #16]
   170b4:	cmp	r2, #0
   170b8:	addne	r4, r1, #8
   170bc:	movne	r7, r2
   170c0:	beq	17094 <flatcc_emitter@@Base+0xac>
   170c4:	ldmdb	r4, {r1, r2}
   170c8:	mov	r0, r3
   170cc:	bl	11fb8 <memcpy@plt>
   170d0:	ldr	r2, [r4, #-4]
   170d4:	subs	r7, r7, #1
   170d8:	add	r4, r4, #8
   170dc:	add	r3, r0, r2
   170e0:	bne	170c4 <flatcc_emitter@@Base+0xdc>
   170e4:	b	17094 <flatcc_emitter@@Base+0xac>
   170e8:	mov	r5, r6
   170ec:	mov	r6, #0
   170f0:	b	17054 <flatcc_emitter@@Base+0x6c>
   170f4:	ldr	fp, [r4, #4]
   170f8:	cmp	fp, #0
   170fc:	beq	1716c <flatcc_emitter@@Base+0x184>
   17100:	ldr	r5, [fp, #2944]	; 0xb80
   17104:	ldr	r3, [r4]
   17108:	cmp	r5, r3
   1710c:	beq	17134 <flatcc_emitter@@Base+0x14c>
   17110:	str	r5, [r4, #4]
   17114:	ldr	r3, [r5, #2948]	; 0xb84
   17118:	mov	r0, r9
   1711c:	str	r5, [r4, #16]
   17120:	ldr	r3, [r3, #2952]	; 0xb88
   17124:	str	r9, [r4, #20]
   17128:	add	r3, r3, #2944	; 0xb80
   1712c:	str	r3, [r5, #2952]	; 0xb88
   17130:	b	1703c <flatcc_emitter@@Base+0x54>
   17134:	ldr	r0, [pc, #540]	; 17358 <flatcc_emitter@@Base+0x370>
   17138:	bl	12000 <malloc@plt>
   1713c:	cmp	r0, #0
   17140:	beq	1717c <flatcc_emitter@@Base+0x194>
   17144:	ldr	r3, [r4, #28]
   17148:	str	r5, [r0, #2944]	; 0xb80
   1714c:	add	r3, r3, #2944	; 0xb80
   17150:	str	fp, [r0, #2948]	; 0xb84
   17154:	str	r3, [r4, #28]
   17158:	str	r0, [r5, #2948]	; 0xb84
   1715c:	str	r0, [fp, #2944]	; 0xb80
   17160:	mov	r5, r0
   17164:	str	r0, [r4, #4]
   17168:	b	17114 <flatcc_emitter@@Base+0x12c>
   1716c:	ldr	r0, [pc, #484]	; 17358 <flatcc_emitter@@Base+0x370>
   17170:	bl	12000 <malloc@plt>
   17174:	cmp	r0, #0
   17178:	bne	17188 <flatcc_emitter@@Base+0x1a0>
   1717c:	mvn	r0, #0
   17180:	add	sp, sp, #12
   17184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17188:	mov	r2, #1472	; 0x5c0
   1718c:	ldr	r3, [r4, #28]
   17190:	str	r2, [r4, #12]
   17194:	str	r2, [r4, #20]
   17198:	sub	r2, r2, #2944	; 0xb80
   1719c:	str	r2, [r0, #2952]	; 0xb88
   171a0:	str	r0, [r4]
   171a4:	add	r3, r3, #2944	; 0xb80
   171a8:	str	r0, [r4, #4]
   171ac:	str	r0, [r0, #2944]	; 0xb80
   171b0:	str	r0, [r0, #2948]	; 0xb84
   171b4:	add	r0, r0, #1472	; 0x5c0
   171b8:	str	r0, [r4, #8]
   171bc:	str	r0, [r4, #16]
   171c0:	str	r3, [r4, #28]
   171c4:	mov	r0, #1472	; 0x5c0
   171c8:	b	1703c <flatcc_emitter@@Base+0x54>
   171cc:	ldr	r0, [r4, #12]
   171d0:	cmp	ip, r0
   171d4:	bls	17254 <flatcc_emitter@@Base+0x26c>
   171d8:	add	r6, r1, r2, lsl #3
   171dc:	mov	r7, r2
   171e0:	mov	r9, #2944	; 0xb80
   171e4:	mov	r8, #0
   171e8:	cmp	r7, #0
   171ec:	beq	17094 <flatcc_emitter@@Base+0xac>
   171f0:	ldr	r5, [r6, #-4]
   171f4:	ldr	sl, [r6, #-8]
   171f8:	cmp	r5, #0
   171fc:	add	sl, sl, r5
   17200:	beq	17248 <flatcc_emitter@@Base+0x260>
   17204:	ldr	r2, [r4, #12]
   17208:	cmp	r2, r5
   1720c:	bcs	1726c <flatcc_emitter@@Base+0x284>
   17210:	cmp	r2, #0
   17214:	beq	1727c <flatcc_emitter@@Base+0x294>
   17218:	sub	r5, r5, r2
   1721c:	mov	r1, r8
   17220:	ldr	r0, [r4, #8]
   17224:	rsb	r3, r2, #0
   17228:	add	r0, r0, r3
   1722c:	add	sl, sl, r3
   17230:	str	r1, [r4, #12]
   17234:	str	r0, [r4, #8]
   17238:	mov	r1, sl
   1723c:	bl	11fb8 <memcpy@plt>
   17240:	cmp	r5, #0
   17244:	bne	17204 <flatcc_emitter@@Base+0x21c>
   17248:	sub	r6, r6, #8
   1724c:	sub	r7, r7, #1
   17250:	b	171e8 <flatcc_emitter@@Base+0x200>
   17254:	ldr	r3, [r4, #8]
   17258:	sub	r0, r0, ip
   1725c:	sub	r3, r3, ip
   17260:	str	r0, [r4, #12]
   17264:	str	r3, [r4, #8]
   17268:	b	170b4 <flatcc_emitter@@Base+0xcc>
   1726c:	sub	r1, r2, r5
   17270:	mov	r2, r5
   17274:	mov	r5, #0
   17278:	b	17220 <flatcc_emitter@@Base+0x238>
   1727c:	ldr	r3, [r4]
   17280:	cmp	r3, #0
   17284:	beq	17308 <flatcc_emitter@@Base+0x320>
   17288:	ldr	fp, [r3, #2948]	; 0xb84
   1728c:	ldr	r2, [r4, #4]
   17290:	cmp	fp, r2
   17294:	beq	172c8 <flatcc_emitter@@Base+0x2e0>
   17298:	ldr	r3, [r3, #2952]	; 0xb88
   1729c:	sub	r3, r3, #2944	; 0xb80
   172a0:	str	r3, [fp, #2952]	; 0xb88
   172a4:	str	fp, [r4]
   172a8:	ldr	r3, [fp, #2944]	; 0xb80
   172ac:	add	r2, fp, #2944	; 0xb80
   172b0:	str	r9, [r4, #12]
   172b4:	ldr	r3, [r3, #2952]	; 0xb88
   172b8:	str	r2, [r4, #8]
   172bc:	sub	r3, r3, #2944	; 0xb80
   172c0:	str	r3, [fp, #2952]	; 0xb88
   172c4:	b	17204 <flatcc_emitter@@Base+0x21c>
   172c8:	ldr	r0, [pc, #136]	; 17358 <flatcc_emitter@@Base+0x370>
   172cc:	str	r3, [sp, #4]
   172d0:	bl	12000 <malloc@plt>
   172d4:	ldr	r3, [sp, #4]
   172d8:	cmp	r0, #0
   172dc:	beq	1717c <flatcc_emitter@@Base+0x194>
   172e0:	ldr	r2, [r4, #28]
   172e4:	str	fp, [r0, #2948]	; 0xb84
   172e8:	add	r2, r2, #2944	; 0xb80
   172ec:	str	r3, [r0, #2944]	; 0xb80
   172f0:	str	r2, [r4, #28]
   172f4:	str	r0, [r3, #2948]	; 0xb84
   172f8:	str	r0, [fp, #2944]	; 0xb80
   172fc:	str	r0, [r4]
   17300:	mov	fp, r0
   17304:	b	172a8 <flatcc_emitter@@Base+0x2c0>
   17308:	ldr	r0, [pc, #72]	; 17358 <flatcc_emitter@@Base+0x370>
   1730c:	bl	12000 <malloc@plt>
   17310:	cmp	r0, #0
   17314:	beq	1717c <flatcc_emitter@@Base+0x194>
   17318:	mov	r2, #1472	; 0x5c0
   1731c:	ldr	r3, [r4, #28]
   17320:	str	r2, [r4, #12]
   17324:	str	r2, [r4, #20]
   17328:	sub	r2, r2, #2944	; 0xb80
   1732c:	str	r2, [r0, #2952]	; 0xb88
   17330:	str	r0, [r4]
   17334:	add	r3, r3, #2944	; 0xb80
   17338:	str	r0, [r4, #4]
   1733c:	str	r0, [r0, #2944]	; 0xb80
   17340:	str	r0, [r0, #2948]	; 0xb84
   17344:	add	r0, r0, #1472	; 0x5c0
   17348:	str	r0, [r4, #8]
   1734c:	str	r0, [r4, #16]
   17350:	str	r3, [r4, #28]
   17354:	b	17204 <flatcc_emitter@@Base+0x21c>
   17358:	andeq	r0, r0, ip, lsl #23

0001735c <flatcc_emitter_copy_buffer@@Base>:
   1735c:	ldr	ip, [r0, #24]
   17360:	cmp	ip, r2
   17364:	bhi	17400 <flatcc_emitter_copy_buffer@@Base+0xa4>
   17368:	ldr	r2, [r0]
   1736c:	cmp	r2, #0
   17370:	beq	17400 <flatcc_emitter_copy_buffer@@Base+0xa4>
   17374:	mov	r3, r1
   17378:	ldr	r1, [r0, #4]
   1737c:	push	{r4, r5, r6, lr}
   17380:	cmp	r2, r1
   17384:	mov	r5, r0
   17388:	beq	1740c <flatcc_emitter_copy_buffer@@Base+0xb0>
   1738c:	ldr	r4, [r0, #12]
   17390:	ldr	r1, [r5, #8]
   17394:	rsb	r4, r4, #2944	; 0xb80
   17398:	mov	r2, r4
   1739c:	mov	r0, r3
   173a0:	bl	11fb8 <memcpy@plt>
   173a4:	ldr	r2, [r5]
   173a8:	ldr	r1, [r5, #4]
   173ac:	add	r3, r0, r4
   173b0:	ldr	r4, [r2, #2944]	; 0xb80
   173b4:	cmp	r4, r1
   173b8:	beq	173e4 <flatcc_emitter_copy_buffer@@Base+0x88>
   173bc:	mov	r6, #2944	; 0xb80
   173c0:	mov	r1, r4
   173c4:	mov	r0, r3
   173c8:	mov	r2, r6
   173cc:	bl	11fb8 <memcpy@plt>
   173d0:	ldr	r4, [r4, #2944]	; 0xb80
   173d4:	ldr	r1, [r5, #4]
   173d8:	cmp	r1, r4
   173dc:	add	r3, r0, #2944	; 0xb80
   173e0:	bne	173c0 <flatcc_emitter_copy_buffer@@Base+0x64>
   173e4:	ldr	r2, [r5, #20]
   173e8:	mov	r0, r3
   173ec:	rsb	r2, r2, #2944	; 0xb80
   173f0:	bl	11fb8 <memcpy@plt>
   173f4:	mov	r3, r0
   173f8:	mov	r0, r3
   173fc:	pop	{r4, r5, r6, pc}
   17400:	mov	r3, #0
   17404:	mov	r0, r3
   17408:	bx	lr
   1740c:	ldr	r1, [r0, #8]
   17410:	mov	r2, ip
   17414:	mov	r0, r3
   17418:	bl	11fb8 <memcpy@plt>
   1741c:	mov	r3, r0
   17420:	b	173f8 <flatcc_emitter_copy_buffer@@Base+0x9c>

00017424 <__libc_csu_init@@Base>:
   17424:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17428:	mov	r7, r0
   1742c:	ldr	r6, [pc, #72]	; 1747c <__libc_csu_init@@Base+0x58>
   17430:	ldr	r5, [pc, #72]	; 17480 <__libc_csu_init@@Base+0x5c>
   17434:	add	r6, pc, r6
   17438:	add	r5, pc, r5
   1743c:	sub	r6, r6, r5
   17440:	mov	r8, r1
   17444:	mov	r9, r2
   17448:	bl	11f68 <strcmp@plt-0x20>
   1744c:	asrs	r6, r6, #2
   17450:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17454:	mov	r4, #0
   17458:	add	r4, r4, #1
   1745c:	ldr	r3, [r5], #4
   17460:	mov	r2, r9
   17464:	mov	r1, r8
   17468:	mov	r0, r7
   1746c:	blx	r3
   17470:	cmp	r6, r4
   17474:	bne	17458 <__libc_csu_init@@Base+0x34>
   17478:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1747c:	ldrdeq	r1, [r1], -r4
   17480:	andeq	r1, r1, ip, asr #21

00017484 <__libc_csu_fini@@Base>:
   17484:	bx	lr

Disassembly of section .fini:

00017488 <.fini>:
   17488:	push	{r3, lr}
   1748c:	pop	{r3, pc}
