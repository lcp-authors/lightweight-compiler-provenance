
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00010eb4 <.init>:
   10eb4:	push	{r3, lr}
   10eb8:	bl	117b8 <__assert_fail@plt+0x5fc>
   10ebc:	pop	{r3, pc}

Disassembly of section .plt:

00010ec0 <calloc@plt-0x14>:
   10ec0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ec4:	ldr	lr, [pc, #4]	; 10ed0 <calloc@plt-0x4>
   10ec8:	add	lr, pc, lr
   10ecc:	ldr	pc, [lr, #8]!
   10ed0:	andeq	r6, r1, r0, lsr r1

00010ed4 <calloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #304]!	; 0x130

00010ee0 <endgrent@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #296]!	; 0x128

00010eec <fputs_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #288]!	; 0x120

00010ef8 <raise@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #280]!	; 0x118

00010f04 <getpwnam@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #272]!	; 0x110

00010f10 <is_selinux_enabled@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #264]!	; 0x108

00010f1c <strcmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #256]!	; 0x100

00010f28 <getpwuid@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #248]!	; 0xf8

00010f34 <fflush@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #240]!	; 0xf0

00010f40 <getuid@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #232]!	; 0xe8

00010f4c <free@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #224]!	; 0xe0

00010f58 <_exit@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #216]!	; 0xd8

00010f64 <memcpy@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #208]!	; 0xd0

00010f70 <mbsinit@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #200]!	; 0xc8

00010f7c <memcmp@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #192]!	; 0xc0

00010f88 <fputc_unlocked@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #184]!	; 0xb8

00010f94 <dcgettext@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #176]!	; 0xb0

00010fa0 <realloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #168]!	; 0xa8

00010fac <textdomain@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #160]!	; 0xa0

00010fb8 <geteuid@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #152]!	; 0x98

00010fc4 <iswprint@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #144]!	; 0x90

00010fd0 <getegid@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #136]!	; 0x88

00010fdc <lseek64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #128]!	; 0x80

00010fe8 <__ctype_get_mb_cur_max@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #120]!	; 0x78

00010ff4 <getcon@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #112]!	; 0x70

00011000 <__fpending@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #104]!	; 0x68

0001100c <ferror_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #96]!	; 0x60

00011018 <mbrtowc@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #88]!	; 0x58

00011024 <error@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #80]!	; 0x50

00011030 <getenv@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #72]!	; 0x48

0001103c <malloc@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #64]!	; 0x40

00011048 <__libc_start_main@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #56]!	; 0x38

00011054 <__freading@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #48]!	; 0x30

00011060 <__gmon_start__@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #40]!	; 0x28

0001106c <getopt_long@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #32]!

00011078 <__ctype_b_loc@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #24]!

00011084 <exit@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #16]!

00011090 <strtoul@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #8]!

0001109c <strlen@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #0]!

000110a8 <strchr@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #86016	; 0x15000
   110b0:	ldr	pc, [ip, #4088]!	; 0xff8

000110b4 <__errno_location@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #4080]!	; 0xff0

000110c0 <__cxa_atexit@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110cc <getgid@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d8 <getgrouplist@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110e4 <memset@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4048]!	; 0xfd0

000110f0 <__printf_chk@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110fc <fileno@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4032]!	; 0xfc0

00011108 <__fprintf_chk@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #86016	; 0x15000
   11110:	ldr	pc, [ip, #4024]!	; 0xfb8

00011114 <fclose@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #86016	; 0x15000
   1111c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011120 <fseeko64@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #86016	; 0x15000
   11128:	ldr	pc, [ip, #4008]!	; 0xfa8

0001112c <setlocale@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #86016	; 0x15000
   11134:	ldr	pc, [ip, #4000]!	; 0xfa0

00011138 <endpwent@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #86016	; 0x15000
   11140:	ldr	pc, [ip, #3992]!	; 0xf98

00011144 <strrchr@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #86016	; 0x15000
   1114c:	ldr	pc, [ip, #3984]!	; 0xf90

00011150 <nl_langinfo@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #86016	; 0x15000
   11158:	ldr	pc, [ip, #3976]!	; 0xf88

0001115c <getgroups@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #86016	; 0x15000
   11164:	ldr	pc, [ip, #3968]!	; 0xf80

00011168 <bindtextdomain@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #86016	; 0x15000
   11170:	ldr	pc, [ip, #3960]!	; 0xf78

00011174 <fputs@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #86016	; 0x15000
   1117c:	ldr	pc, [ip, #3952]!	; 0xf70

00011180 <strncmp@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #86016	; 0x15000
   11188:	ldr	pc, [ip, #3944]!	; 0xf68

0001118c <abort@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #86016	; 0x15000
   11194:	ldr	pc, [ip, #3936]!	; 0xf60

00011198 <getgrgid@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #86016	; 0x15000
   111a0:	ldr	pc, [ip, #3928]!	; 0xf58

000111a4 <getgrnam@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #86016	; 0x15000
   111ac:	ldr	pc, [ip, #3920]!	; 0xf50

000111b0 <putchar_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #86016	; 0x15000
   111b8:	ldr	pc, [ip, #3912]!	; 0xf48

000111bc <__assert_fail@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #86016	; 0x15000
   111c4:	ldr	pc, [ip, #3904]!	; 0xf40

Disassembly of section .text:

000111c8 <.text>:
   111c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111cc:	sub	sp, sp, #28
   111d0:	mov	r5, r1
   111d4:	mov	r8, r0
   111d8:	bl	10f10 <is_selinux_enabled@plt>
   111dc:	ldr	r9, [pc, #1316]	; 11708 <__assert_fail@plt+0x54c>
   111e0:	ldr	r7, [pc, #1316]	; 1170c <__assert_fail@plt+0x550>
   111e4:	ldr	r4, [pc, #1316]	; 11710 <__assert_fail@plt+0x554>
   111e8:	mov	r6, r0
   111ec:	ldr	r0, [r5]
   111f0:	bl	12320 <__assert_fail@plt+0x1164>
   111f4:	ldr	r1, [pc, #1304]	; 11714 <__assert_fail@plt+0x558>
   111f8:	mov	r0, #6
   111fc:	bl	1112c <setlocale@plt>
   11200:	ldr	r1, [pc, #1296]	; 11718 <__assert_fail@plt+0x55c>
   11204:	ldr	r0, [pc, #1296]	; 1171c <__assert_fail@plt+0x560>
   11208:	bl	11168 <bindtextdomain@plt>
   1120c:	ldr	r0, [pc, #1288]	; 1171c <__assert_fail@plt+0x560>
   11210:	bl	10fac <textdomain@plt>
   11214:	ldr	r0, [pc, #1284]	; 11720 <__assert_fail@plt+0x564>
   11218:	bl	1571c <__assert_fail@plt+0x4560>
   1121c:	mov	sl, #0
   11220:	str	sl, [sp]
   11224:	mov	r3, r9
   11228:	mov	r2, r7
   1122c:	mov	r1, r5
   11230:	mov	r0, r8
   11234:	bl	1106c <getopt_long@plt>
   11238:	cmn	r0, #1
   1123c:	bne	1126c <__assert_fail@plt+0xb0>
   11240:	ldr	r7, [pc, #1244]	; 11724 <__assert_fail@plt+0x568>
   11244:	ldr	r4, [pc, #1220]	; 11710 <__assert_fail@plt+0x554>
   11248:	ldr	r1, [r7]
   1124c:	subs	r0, r8, r1
   11250:	beq	1137c <__assert_fail@plt+0x1c0>
   11254:	ldrb	r3, [r4, #46]	; 0x2e
   11258:	cmp	r3, #0
   1125c:	beq	1137c <__assert_fail@plt+0x1c0>
   11260:	mov	r2, #5
   11264:	ldr	r1, [pc, #1212]	; 11728 <__assert_fail@plt+0x56c>
   11268:	b	112b4 <__assert_fail@plt+0xf8>
   1126c:	cmp	r0, #97	; 0x61
   11270:	beq	11220 <__assert_fail@plt+0x64>
   11274:	bgt	112cc <__assert_fail@plt+0x110>
   11278:	cmn	r0, #2
   1127c:	beq	1133c <__assert_fail@plt+0x180>
   11280:	bgt	11294 <__assert_fail@plt+0xd8>
   11284:	cmn	r0, #3
   11288:	beq	11344 <__assert_fail@plt+0x188>
   1128c:	mov	r0, #1
   11290:	b	11340 <__assert_fail@plt+0x184>
   11294:	cmp	r0, #71	; 0x47
   11298:	beq	11330 <__assert_fail@plt+0x174>
   1129c:	cmp	r0, #90	; 0x5a
   112a0:	bne	1128c <__assert_fail@plt+0xd0>
   112a4:	cmp	r6, #0
   112a8:	bgt	1130c <__assert_fail@plt+0x150>
   112ac:	ldr	r1, [pc, #1144]	; 1172c <__assert_fail@plt+0x570>
   112b0:	mov	r2, #5
   112b4:	mov	r0, #0
   112b8:	bl	10f94 <dcgettext@plt>
   112bc:	mov	r1, #0
   112c0:	mov	r2, r0
   112c4:	mov	r0, #1
   112c8:	bl	11024 <error@plt>
   112cc:	cmp	r0, #114	; 0x72
   112d0:	mov	r3, #1
   112d4:	beq	11320 <__assert_fail@plt+0x164>
   112d8:	bgt	112f4 <__assert_fail@plt+0x138>
   112dc:	cmp	r0, #103	; 0x67
   112e0:	beq	11318 <__assert_fail@plt+0x15c>
   112e4:	cmp	r0, #110	; 0x6e
   112e8:	bne	1128c <__assert_fail@plt+0xd0>
   112ec:	strb	r3, [r4, #12]
   112f0:	b	1121c <__assert_fail@plt+0x60>
   112f4:	cmp	r0, #117	; 0x75
   112f8:	beq	11328 <__assert_fail@plt+0x16c>
   112fc:	cmp	r0, #122	; 0x7a
   11300:	bne	1128c <__assert_fail@plt+0xd0>
   11304:	strb	r3, [r4, #45]	; 0x2d
   11308:	b	1121c <__assert_fail@plt+0x60>
   1130c:	mov	r3, #1
   11310:	strb	r3, [r4, #46]	; 0x2e
   11314:	b	1121c <__assert_fail@plt+0x60>
   11318:	strb	r3, [r4, #34]	; 0x22
   1131c:	b	1121c <__assert_fail@plt+0x60>
   11320:	strb	r3, [r4, #1]
   11324:	b	1121c <__assert_fail@plt+0x60>
   11328:	strb	r3, [r4]
   1132c:	b	1121c <__assert_fail@plt+0x60>
   11330:	mov	r3, #1
   11334:	strb	r3, [r4, #44]	; 0x2c
   11338:	b	1121c <__assert_fail@plt+0x60>
   1133c:	mov	r0, #0
   11340:	bl	11d28 <__assert_fail@plt+0xb6c>
   11344:	ldr	r3, [pc, #996]	; 11730 <__assert_fail@plt+0x574>
   11348:	ldr	r0, [pc, #996]	; 11734 <__assert_fail@plt+0x578>
   1134c:	str	r3, [sp, #4]
   11350:	ldr	r3, [pc, #992]	; 11738 <__assert_fail@plt+0x57c>
   11354:	str	sl, [sp, #8]
   11358:	str	r3, [sp]
   1135c:	ldr	r3, [pc, #984]	; 1173c <__assert_fail@plt+0x580>
   11360:	ldr	r0, [r0]
   11364:	ldr	r2, [pc, #980]	; 11740 <__assert_fail@plt+0x584>
   11368:	ldr	r3, [r3]
   1136c:	ldr	r1, [pc, #976]	; 11744 <__assert_fail@plt+0x588>
   11370:	bl	1410c <__assert_fail@plt+0x2f50>
   11374:	mov	r0, #0
   11378:	bl	11084 <exit@plt>
   1137c:	ldrb	lr, [r4]
   11380:	ldrb	r8, [r4, #34]	; 0x22
   11384:	ldrb	r3, [r4, #44]	; 0x2c
   11388:	ldrb	ip, [r4, #46]	; 0x2e
   1138c:	add	r2, lr, r8
   11390:	add	r2, r2, r3
   11394:	add	r2, r2, ip
   11398:	cmp	r2, #1
   1139c:	movgt	r2, #5
   113a0:	ldrgt	r1, [pc, #928]	; 11748 <__assert_fail@plt+0x58c>
   113a4:	bgt	112b4 <__assert_fail@plt+0xf8>
   113a8:	orr	lr, lr, r8
   113ac:	orr	r3, r3, lr
   113b0:	orr	r3, ip, r3
   113b4:	eors	r3, r3, #1
   113b8:	beq	113f4 <__assert_fail@plt+0x238>
   113bc:	ldrb	r2, [r4, #1]
   113c0:	cmp	r2, #0
   113c4:	bne	113d4 <__assert_fail@plt+0x218>
   113c8:	ldrb	r8, [r4, #12]
   113cc:	cmp	r8, #0
   113d0:	beq	113e0 <__assert_fail@plt+0x224>
   113d4:	mov	r2, #5
   113d8:	ldr	r1, [pc, #876]	; 1174c <__assert_fail@plt+0x590>
   113dc:	b	112b4 <__assert_fail@plt+0xf8>
   113e0:	ldrb	r2, [r4, #45]	; 0x2d
   113e4:	cmp	r2, #0
   113e8:	movne	r2, #5
   113ec:	ldrne	r1, [pc, #860]	; 11750 <__assert_fail@plt+0x594>
   113f0:	bne	112b4 <__assert_fail@plt+0xf8>
   113f4:	cmp	r0, #0
   113f8:	bne	116e4 <__assert_fail@plt+0x528>
   113fc:	cmp	ip, #0
   11400:	beq	114f4 <__assert_fail@plt+0x338>
   11404:	cmp	r6, #0
   11408:	bgt	11510 <__assert_fail@plt+0x354>
   1140c:	ldrb	r5, [r4]
   11410:	cmp	r5, #0
   11414:	bne	11618 <__assert_fail@plt+0x45c>
   11418:	ldrb	r3, [r4, #34]	; 0x22
   1141c:	cmp	r3, #0
   11420:	bne	11478 <__assert_fail@plt+0x2bc>
   11424:	ldrb	r3, [r4, #44]	; 0x2c
   11428:	cmp	r3, #0
   1142c:	bne	11478 <__assert_fail@plt+0x2bc>
   11430:	ldrb	r3, [r4, #46]	; 0x2e
   11434:	cmp	r3, #1
   11438:	beq	11478 <__assert_fail@plt+0x2bc>
   1143c:	bl	110b4 <__errno_location@plt>
   11440:	mov	r7, #0
   11444:	str	r7, [r0]
   11448:	mov	r6, r0
   1144c:	bl	10fb8 <geteuid@plt>
   11450:	cmn	r0, #1
   11454:	str	r0, [r4, #8]
   11458:	bne	11470 <__assert_fail@plt+0x2b4>
   1145c:	ldr	r6, [r6]
   11460:	cmp	r6, r7
   11464:	movne	r2, #5
   11468:	ldrne	r1, [pc, #740]	; 11754 <__assert_fail@plt+0x598>
   1146c:	bne	11664 <__assert_fail@plt+0x4a8>
   11470:	cmp	r5, #0
   11474:	bne	11624 <__assert_fail@plt+0x468>
   11478:	ldrb	r3, [r4, #34]	; 0x22
   1147c:	cmp	r3, #0
   11480:	bne	1149c <__assert_fail@plt+0x2e0>
   11484:	ldrb	r3, [r4, #44]	; 0x2c
   11488:	cmp	r3, #0
   1148c:	bne	11630 <__assert_fail@plt+0x474>
   11490:	ldrb	r3, [r4, #46]	; 0x2e
   11494:	cmp	r3, #1
   11498:	bne	11630 <__assert_fail@plt+0x474>
   1149c:	ldrb	r3, [r4, #34]	; 0x22
   114a0:	cmp	r3, #0
   114a4:	beq	1168c <__assert_fail@plt+0x4d0>
   114a8:	bl	110b4 <__errno_location@plt>
   114ac:	mov	r6, #0
   114b0:	str	r6, [r0]
   114b4:	mov	r5, r0
   114b8:	bl	10fd0 <getegid@plt>
   114bc:	mov	r3, r6
   114c0:	cmn	r0, #1
   114c4:	str	r0, [r4, #40]	; 0x28
   114c8:	bne	116a8 <__assert_fail@plt+0x4ec>
   114cc:	ldr	r7, [r5]
   114d0:	cmp	r7, r6
   114d4:	beq	116a8 <__assert_fail@plt+0x4ec>
   114d8:	mov	r2, #5
   114dc:	ldr	r1, [pc, #628]	; 11758 <__assert_fail@plt+0x59c>
   114e0:	mov	r0, r6
   114e4:	bl	10f94 <dcgettext@plt>
   114e8:	mov	r1, r7
   114ec:	mov	r2, r0
   114f0:	b	112c4 <__assert_fail@plt+0x108>
   114f4:	cmp	r3, #0
   114f8:	beq	1140c <__assert_fail@plt+0x250>
   114fc:	ldr	r0, [pc, #600]	; 1175c <__assert_fail@plt+0x5a0>
   11500:	bl	11030 <getenv@plt>
   11504:	cmp	r0, #0
   11508:	bne	1140c <__assert_fail@plt+0x250>
   1150c:	b	11404 <__assert_fail@plt+0x248>
   11510:	ldr	r0, [pc, #584]	; 11760 <__assert_fail@plt+0x5a4>
   11514:	bl	10ff4 <getcon@plt>
   11518:	cmp	r0, #0
   1151c:	beq	1140c <__assert_fail@plt+0x250>
   11520:	ldrb	r3, [r4, #46]	; 0x2e
   11524:	cmp	r3, #0
   11528:	movne	r2, #5
   1152c:	ldrne	r1, [pc, #560]	; 11764 <__assert_fail@plt+0x5a8>
   11530:	beq	1140c <__assert_fail@plt+0x250>
   11534:	b	112b4 <__assert_fail@plt+0xf8>
   11538:	ldr	r0, [r5, r3, lsl #2]
   1153c:	ldrb	r3, [r0]
   11540:	cmp	r3, #0
   11544:	bne	115b4 <__assert_fail@plt+0x3f8>
   11548:	bl	110b4 <__errno_location@plt>
   1154c:	mov	r2, #5
   11550:	ldr	r1, [pc, #528]	; 11768 <__assert_fail@plt+0x5ac>
   11554:	ldr	fp, [r0]
   11558:	mov	r0, r6
   1155c:	bl	10f94 <dcgettext@plt>
   11560:	ldr	r3, [r7]
   11564:	str	r0, [sp, #20]
   11568:	ldr	r0, [r5, r3, lsl #2]
   1156c:	bl	13950 <__assert_fail@plt+0x2794>
   11570:	ldr	r2, [sp, #20]
   11574:	mov	r1, fp
   11578:	mov	r3, r0
   1157c:	mov	r0, r6
   11580:	bl	11024 <error@plt>
   11584:	strb	r6, [r8]
   11588:	ldr	r3, [r7]
   1158c:	add	r3, r3, #1
   11590:	str	r3, [r7]
   11594:	ldr	r3, [r7]
   11598:	cmp	sl, r3
   1159c:	bhi	11538 <__assert_fail@plt+0x37c>
   115a0:	ldr	r3, [pc, #452]	; 1176c <__assert_fail@plt+0x5b0>
   115a4:	ldrb	r0, [r3]
   115a8:	eor	r0, r0, #1
   115ac:	add	sp, sp, #28
   115b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115b4:	mov	r3, #0
   115b8:	str	r6, [sp]
   115bc:	mov	r2, r3
   115c0:	mov	r1, r9
   115c4:	bl	13c20 <__assert_fail@plt+0x2a64>
   115c8:	cmp	r0, #0
   115cc:	bne	11548 <__assert_fail@plt+0x38c>
   115d0:	ldr	r0, [r4, #8]
   115d4:	bl	10f28 <getpwuid@plt>
   115d8:	subs	fp, r0, #0
   115dc:	beq	11548 <__assert_fail@plt+0x38c>
   115e0:	ldr	r0, [fp]
   115e4:	bl	1464c <__assert_fail@plt+0x3490>
   115e8:	ldr	r3, [fp, #8]
   115ec:	str	r3, [r4, #8]
   115f0:	str	r3, [r4, #4]
   115f4:	ldr	r3, [fp, #12]
   115f8:	str	r3, [r4, #40]	; 0x28
   115fc:	str	r3, [r4, #36]	; 0x24
   11600:	str	r0, [sp, #20]
   11604:	bl	118a4 <__assert_fail@plt+0x6e8>
   11608:	ldr	r2, [sp, #20]
   1160c:	mov	r0, r2
   11610:	bl	12264 <__assert_fail@plt+0x10a8>
   11614:	b	11588 <__assert_fail@plt+0x3cc>
   11618:	ldrb	r3, [r4, #1]
   1161c:	cmp	r3, #0
   11620:	beq	1143c <__assert_fail@plt+0x280>
   11624:	ldrb	r3, [r4, #1]
   11628:	cmp	r3, #0
   1162c:	beq	11680 <__assert_fail@plt+0x4c4>
   11630:	bl	110b4 <__errno_location@plt>
   11634:	mov	r7, #0
   11638:	str	r7, [r0]
   1163c:	mov	r6, r0
   11640:	bl	10f40 <getuid@plt>
   11644:	cmn	r0, #1
   11648:	str	r0, [r4, #4]
   1164c:	bne	11678 <__assert_fail@plt+0x4bc>
   11650:	ldr	r6, [r6]
   11654:	cmp	r6, #0
   11658:	beq	11678 <__assert_fail@plt+0x4bc>
   1165c:	ldr	r1, [pc, #268]	; 11770 <__assert_fail@plt+0x5b4>
   11660:	mov	r2, #5
   11664:	mov	r0, r7
   11668:	bl	10f94 <dcgettext@plt>
   1166c:	mov	r1, r6
   11670:	mov	r2, r0
   11674:	b	112c4 <__assert_fail@plt+0x108>
   11678:	cmp	r5, #0
   1167c:	beq	1149c <__assert_fail@plt+0x2e0>
   11680:	mov	r0, #0
   11684:	bl	118a4 <__assert_fail@plt+0x6e8>
   11688:	b	115a0 <__assert_fail@plt+0x3e4>
   1168c:	ldrb	r3, [r4, #44]	; 0x2c
   11690:	cmp	r3, #0
   11694:	bne	114a8 <__assert_fail@plt+0x2ec>
   11698:	ldrb	r3, [r4, #46]	; 0x2e
   1169c:	cmp	r3, #0
   116a0:	bne	11680 <__assert_fail@plt+0x4c4>
   116a4:	b	114a8 <__assert_fail@plt+0x2ec>
   116a8:	str	r3, [r5]
   116ac:	bl	110cc <getgid@plt>
   116b0:	cmn	r0, #1
   116b4:	str	r0, [r4, #36]	; 0x24
   116b8:	bne	11680 <__assert_fail@plt+0x4c4>
   116bc:	ldr	r4, [r5]
   116c0:	cmp	r4, #0
   116c4:	beq	11680 <__assert_fail@plt+0x4c4>
   116c8:	mov	r2, #5
   116cc:	ldr	r1, [pc, #160]	; 11774 <__assert_fail@plt+0x5b8>
   116d0:	mov	r0, #0
   116d4:	bl	10f94 <dcgettext@plt>
   116d8:	mov	r1, r4
   116dc:	mov	r2, r0
   116e0:	b	112c4 <__assert_fail@plt+0x108>
   116e4:	cmp	r0, #1
   116e8:	movls	r3, #0
   116ec:	movhi	r3, #1
   116f0:	strb	r3, [r4, #73]	; 0x49
   116f4:	add	sl, r1, r0
   116f8:	mov	r6, #0
   116fc:	ldr	r9, [pc, #116]	; 11778 <__assert_fail@plt+0x5bc>
   11700:	ldr	r8, [pc, #100]	; 1176c <__assert_fail@plt+0x5b0>
   11704:	b	11594 <__assert_fail@plt+0x3d8>
   11708:	andeq	r5, r1, r8, ror r7
   1170c:	andeq	r5, r1, r8, ror sp
   11710:	andeq	r7, r2, ip, ror r1
   11714:	andeq	r5, r1, r0, ror r9
   11718:	andeq	r5, r1, sl, lsl #26
   1171c:	andeq	r5, r1, r7, ror #24
   11720:	andeq	r2, r1, r0, lsl #3
   11724:	andeq	r7, r2, r8, ror #2
   11728:	andeq	r5, r1, r1, lsl #27
   1172c:	andeq	r5, r1, r2, lsr #26
   11730:	andeq	r5, r1, r9, asr sp
   11734:	andeq	r7, r2, r4, ror r1
   11738:	andeq	r5, r1, r9, ror #26
   1173c:	andeq	r7, r2, r8, lsl r1
   11740:	andeq	r5, r1, r3, ror #24
   11744:			; <UNDEFINED> instruction: 0x000158ba
   11748:			; <UNDEFINED> instruction: 0x00015db3
   1174c:	ldrdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   11750:	andeq	r5, r1, r5, lsl lr
   11754:	andeq	r5, r1, lr, ror lr
   11758:	andeq	r5, r1, fp, lsr #29
   1175c:	andeq	r5, r1, r3, asr #28
   11760:	andeq	r7, r2, ip, lsr #3
   11764:	andeq	r5, r1, r3, asr lr
   11768:	andeq	r5, r1, sp, ror #28
   1176c:	andeq	r7, r2, r4, lsl r1
   11770:	muleq	r1, r7, lr
   11774:	andeq	r5, r1, r4, asr #29
   11778:	andeq	r7, r2, r4, lsl #3
   1177c:	mov	fp, #0
   11780:	mov	lr, #0
   11784:	pop	{r1}		; (ldr r1, [sp], #4)
   11788:	mov	r2, sp
   1178c:	push	{r2}		; (str r2, [sp, #-4]!)
   11790:	push	{r0}		; (str r0, [sp, #-4]!)
   11794:	ldr	ip, [pc, #16]	; 117ac <__assert_fail@plt+0x5f0>
   11798:	push	{ip}		; (str ip, [sp, #-4]!)
   1179c:	ldr	r0, [pc, #12]	; 117b0 <__assert_fail@plt+0x5f4>
   117a0:	ldr	r3, [pc, #12]	; 117b4 <__assert_fail@plt+0x5f8>
   117a4:	bl	11048 <__libc_start_main@plt>
   117a8:	bl	1118c <abort@plt>
   117ac:	andeq	r5, r1, r8, lsl r7
   117b0:	andeq	r1, r1, r8, asr #3
   117b4:			; <UNDEFINED> instruction: 0x000156b8
   117b8:	ldr	r3, [pc, #20]	; 117d4 <__assert_fail@plt+0x618>
   117bc:	ldr	r2, [pc, #20]	; 117d8 <__assert_fail@plt+0x61c>
   117c0:	add	r3, pc, r3
   117c4:	ldr	r2, [r3, r2]
   117c8:	cmp	r2, #0
   117cc:	bxeq	lr
   117d0:	b	11060 <__gmon_start__@plt>
   117d4:	andeq	r5, r1, r8, lsr r8
   117d8:	andeq	r0, r0, r8, lsl #2
   117dc:	ldr	r3, [pc, #28]	; 11800 <__assert_fail@plt+0x644>
   117e0:	ldr	r0, [pc, #28]	; 11804 <__assert_fail@plt+0x648>
   117e4:	sub	r3, r3, r0
   117e8:	cmp	r3, #6
   117ec:	bxls	lr
   117f0:	ldr	r3, [pc, #16]	; 11808 <__assert_fail@plt+0x64c>
   117f4:	cmp	r3, #0
   117f8:	bxeq	lr
   117fc:	bx	r3
   11800:	andeq	r7, r2, r3, ror #2
   11804:	andeq	r7, r2, r0, ror #2
   11808:	andeq	r0, r0, r0
   1180c:	ldr	r1, [pc, #36]	; 11838 <__assert_fail@plt+0x67c>
   11810:	ldr	r0, [pc, #36]	; 1183c <__assert_fail@plt+0x680>
   11814:	sub	r1, r1, r0
   11818:	asr	r1, r1, #2
   1181c:	add	r1, r1, r1, lsr #31
   11820:	asrs	r1, r1, #1
   11824:	bxeq	lr
   11828:	ldr	r3, [pc, #16]	; 11840 <__assert_fail@plt+0x684>
   1182c:	cmp	r3, #0
   11830:	bxeq	lr
   11834:	bx	r3
   11838:	andeq	r7, r2, r0, ror #2
   1183c:	andeq	r7, r2, r0, ror #2
   11840:	andeq	r0, r0, r0
   11844:	push	{r4, lr}
   11848:	ldr	r4, [pc, #24]	; 11868 <__assert_fail@plt+0x6ac>
   1184c:	ldrb	r3, [r4]
   11850:	cmp	r3, #0
   11854:	popne	{r4, pc}
   11858:	bl	117dc <__assert_fail@plt+0x620>
   1185c:	mov	r3, #1
   11860:	strb	r3, [r4]
   11864:	pop	{r4, pc}
   11868:	andeq	r7, r2, r8, ror r1
   1186c:	ldr	r0, [pc, #40]	; 1189c <__assert_fail@plt+0x6e0>
   11870:	ldr	r3, [r0]
   11874:	cmp	r3, #0
   11878:	bne	11880 <__assert_fail@plt+0x6c4>
   1187c:	b	1180c <__assert_fail@plt+0x650>
   11880:	ldr	r3, [pc, #24]	; 118a0 <__assert_fail@plt+0x6e4>
   11884:	cmp	r3, #0
   11888:	beq	1187c <__assert_fail@plt+0x6c0>
   1188c:	push	{r4, lr}
   11890:	blx	r3
   11894:	pop	{r4, lr}
   11898:	b	1180c <__assert_fail@plt+0x650>
   1189c:	andeq	r6, r2, ip, lsl #30
   118a0:	andeq	r0, r0, r0
   118a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   118a8:	sub	sp, sp, #20
   118ac:	ldr	r4, [pc, #1080]	; 11cec <__assert_fail@plt+0xb30>
   118b0:	ldrb	r3, [r4]
   118b4:	cmp	r3, #0
   118b8:	beq	11948 <__assert_fail@plt+0x78c>
   118bc:	ldrb	r3, [r4, #1]
   118c0:	cmp	r3, #0
   118c4:	ldrb	r3, [r4, #12]
   118c8:	ldrne	r5, [r4, #4]
   118cc:	ldreq	r5, [r4, #8]
   118d0:	cmp	r3, #0
   118d4:	beq	11928 <__assert_fail@plt+0x76c>
   118d8:	mov	r0, r5
   118dc:	bl	10f28 <getpwuid@plt>
   118e0:	subs	r6, r0, #0
   118e4:	ldrne	r0, [r6]
   118e8:	bne	11938 <__assert_fail@plt+0x77c>
   118ec:	mov	r2, #5
   118f0:	ldr	r1, [pc, #1016]	; 11cf0 <__assert_fail@plt+0xb34>
   118f4:	bl	10f94 <dcgettext@plt>
   118f8:	ldr	r2, [pc, #1012]	; 11cf4 <__assert_fail@plt+0xb38>
   118fc:	mov	r1, #0
   11900:	mov	r7, r0
   11904:	mov	r0, r5
   11908:	bl	122b8 <__assert_fail@plt+0x10fc>
   1190c:	mov	r2, r7
   11910:	mov	r1, r6
   11914:	mov	r3, r0
   11918:	mov	r0, r6
   1191c:	bl	11024 <error@plt>
   11920:	ldr	r3, [pc, #976]	; 11cf8 <__assert_fail@plt+0xb3c>
   11924:	strb	r6, [r3]
   11928:	ldr	r2, [pc, #964]	; 11cf4 <__assert_fail@plt+0xb38>
   1192c:	mov	r0, r5
   11930:	mov	r1, #0
   11934:	bl	122b8 <__assert_fail@plt+0x10fc>
   11938:	ldr	r3, [pc, #956]	; 11cfc <__assert_fail@plt+0xb40>
   1193c:	ldr	r1, [r3]
   11940:	bl	10eec <fputs_unlocked@plt>
   11944:	b	1197c <__assert_fail@plt+0x7c0>
   11948:	ldrb	r3, [r4, #34]	; 0x22
   1194c:	cmp	r3, #0
   11950:	beq	119bc <__assert_fail@plt+0x800>
   11954:	ldrb	r3, [r4, #1]
   11958:	ldrb	r1, [r4, #12]
   1195c:	cmp	r3, #0
   11960:	ldrne	r0, [r4, #36]	; 0x24
   11964:	ldreq	r0, [r4, #40]	; 0x28
   11968:	bl	11f84 <__assert_fail@plt+0xdc8>
   1196c:	ldr	r2, [pc, #900]	; 11cf8 <__assert_fail@plt+0xb3c>
   11970:	ldrb	r3, [r2]
   11974:	and	r0, r0, r3
   11978:	strb	r0, [r2]
   1197c:	ldrb	r3, [r4, #45]	; 0x2d
   11980:	cmp	r3, #0
   11984:	moveq	r0, #10
   11988:	beq	119b0 <__assert_fail@plt+0x7f4>
   1198c:	ldrb	r0, [r4, #44]	; 0x2c
   11990:	cmp	r0, #0
   11994:	beq	119b0 <__assert_fail@plt+0x7f4>
   11998:	ldrb	r0, [r4, #73]	; 0x49
   1199c:	cmp	r0, #0
   119a0:	beq	119b0 <__assert_fail@plt+0x7f4>
   119a4:	mov	r0, #0
   119a8:	bl	111b0 <putchar_unlocked@plt>
   119ac:	mov	r0, #0
   119b0:	bl	111b0 <putchar_unlocked@plt>
   119b4:	add	sp, sp, #20
   119b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   119bc:	ldrb	r3, [r4, #44]	; 0x2c
   119c0:	cmp	r3, #0
   119c4:	beq	119f4 <__assert_fail@plt+0x838>
   119c8:	ldrb	r3, [r4, #45]	; 0x2d
   119cc:	ldrb	r2, [r4, #12]
   119d0:	ldr	r1, [r4, #4]
   119d4:	cmp	r3, #0
   119d8:	moveq	r3, #32
   119dc:	movne	r3, #0
   119e0:	stm	sp, {r2, r3}
   119e4:	ldr	r3, [r4, #40]	; 0x28
   119e8:	ldr	r2, [r4, #36]	; 0x24
   119ec:	bl	11ffc <__assert_fail@plt+0xe40>
   119f0:	b	1196c <__assert_fail@plt+0x7b0>
   119f4:	mov	r5, r0
   119f8:	ldrb	r0, [r4, #46]	; 0x2e
   119fc:	cmp	r0, #0
   11a00:	ldrne	r3, [pc, #756]	; 11cfc <__assert_fail@plt+0xb40>
   11a04:	ldrne	r0, [r4, #48]	; 0x30
   11a08:	ldrne	r1, [r3]
   11a0c:	bne	11940 <__assert_fail@plt+0x784>
   11a10:	mov	r2, #5
   11a14:	ldr	r1, [pc, #740]	; 11d00 <__assert_fail@plt+0xb44>
   11a18:	bl	10f94 <dcgettext@plt>
   11a1c:	add	r2, r4, #13
   11a20:	mov	r1, #0
   11a24:	mov	r6, r0
   11a28:	ldr	r0, [r4, #4]
   11a2c:	bl	122b8 <__assert_fail@plt+0x10fc>
   11a30:	mov	r1, r6
   11a34:	mov	r2, r0
   11a38:	mov	r0, #1
   11a3c:	bl	110f0 <__printf_chk@plt>
   11a40:	ldr	r0, [r4, #4]
   11a44:	bl	10f28 <getpwuid@plt>
   11a48:	subs	r6, r0, #0
   11a4c:	beq	11a60 <__assert_fail@plt+0x8a4>
   11a50:	ldr	r2, [r6]
   11a54:	ldr	r1, [pc, #680]	; 11d04 <__assert_fail@plt+0xb48>
   11a58:	mov	r0, #1
   11a5c:	bl	110f0 <__printf_chk@plt>
   11a60:	mov	r2, #5
   11a64:	ldr	r1, [pc, #668]	; 11d08 <__assert_fail@plt+0xb4c>
   11a68:	mov	r0, #0
   11a6c:	bl	10f94 <dcgettext@plt>
   11a70:	ldr	r2, [pc, #660]	; 11d0c <__assert_fail@plt+0xb50>
   11a74:	mov	r1, #0
   11a78:	mov	r7, r0
   11a7c:	ldr	r0, [r4, #36]	; 0x24
   11a80:	bl	122b8 <__assert_fail@plt+0x10fc>
   11a84:	mov	r1, r7
   11a88:	mov	r2, r0
   11a8c:	mov	r0, #1
   11a90:	bl	110f0 <__printf_chk@plt>
   11a94:	ldr	r0, [r4, #36]	; 0x24
   11a98:	bl	11198 <getgrgid@plt>
   11a9c:	cmp	r0, #0
   11aa0:	beq	11ab4 <__assert_fail@plt+0x8f8>
   11aa4:	ldr	r2, [r0]
   11aa8:	ldr	r1, [pc, #596]	; 11d04 <__assert_fail@plt+0xb48>
   11aac:	mov	r0, #1
   11ab0:	bl	110f0 <__printf_chk@plt>
   11ab4:	ldr	r2, [r4, #8]
   11ab8:	ldr	r3, [r4, #4]
   11abc:	cmp	r2, r3
   11ac0:	beq	11b18 <__assert_fail@plt+0x95c>
   11ac4:	mov	r2, #5
   11ac8:	ldr	r1, [pc, #576]	; 11d10 <__assert_fail@plt+0xb54>
   11acc:	mov	r0, #0
   11ad0:	bl	10f94 <dcgettext@plt>
   11ad4:	ldr	r2, [pc, #536]	; 11cf4 <__assert_fail@plt+0xb38>
   11ad8:	mov	r1, #0
   11adc:	mov	r6, r0
   11ae0:	ldr	r0, [r4, #8]
   11ae4:	bl	122b8 <__assert_fail@plt+0x10fc>
   11ae8:	mov	r1, r6
   11aec:	mov	r2, r0
   11af0:	mov	r0, #1
   11af4:	bl	110f0 <__printf_chk@plt>
   11af8:	ldr	r0, [r4, #8]
   11afc:	bl	10f28 <getpwuid@plt>
   11b00:	subs	r6, r0, #0
   11b04:	beq	11b18 <__assert_fail@plt+0x95c>
   11b08:	ldr	r2, [r6]
   11b0c:	ldr	r1, [pc, #496]	; 11d04 <__assert_fail@plt+0xb48>
   11b10:	mov	r0, #1
   11b14:	bl	110f0 <__printf_chk@plt>
   11b18:	ldr	r7, [r4, #40]	; 0x28
   11b1c:	ldr	r3, [r4, #36]	; 0x24
   11b20:	cmp	r7, r3
   11b24:	beq	11b7c <__assert_fail@plt+0x9c0>
   11b28:	mov	r2, #5
   11b2c:	ldr	r1, [pc, #480]	; 11d14 <__assert_fail@plt+0xb58>
   11b30:	mov	r0, #0
   11b34:	bl	10f94 <dcgettext@plt>
   11b38:	ldr	r2, [pc, #460]	; 11d0c <__assert_fail@plt+0xb50>
   11b3c:	mov	r1, #0
   11b40:	mov	r8, r0
   11b44:	mov	r0, r7
   11b48:	bl	122b8 <__assert_fail@plt+0x10fc>
   11b4c:	mov	r1, r8
   11b50:	mov	r2, r0
   11b54:	mov	r0, #1
   11b58:	bl	110f0 <__printf_chk@plt>
   11b5c:	ldr	r0, [r4, #40]	; 0x28
   11b60:	bl	11198 <getgrgid@plt>
   11b64:	cmp	r0, #0
   11b68:	beq	11b7c <__assert_fail@plt+0x9c0>
   11b6c:	ldr	r2, [r0]
   11b70:	ldr	r1, [pc, #396]	; 11d04 <__assert_fail@plt+0xb48>
   11b74:	mov	r0, #1
   11b78:	bl	110f0 <__printf_chk@plt>
   11b7c:	cmp	r5, #0
   11b80:	ldreq	r1, [r4, #40]	; 0x28
   11b84:	beq	11b94 <__assert_fail@plt+0x9d8>
   11b88:	cmp	r6, #0
   11b8c:	mvneq	r1, #0
   11b90:	ldrne	r1, [r6, #12]
   11b94:	add	r2, sp, #12
   11b98:	mov	r0, r5
   11b9c:	bl	146a8 <__assert_fail@plt+0x34ec>
   11ba0:	subs	r6, r0, #0
   11ba4:	bge	11c24 <__assert_fail@plt+0xa68>
   11ba8:	cmp	r5, #0
   11bac:	beq	11bf8 <__assert_fail@plt+0xa3c>
   11bb0:	bl	110b4 <__errno_location@plt>
   11bb4:	mov	r2, #5
   11bb8:	ldr	r1, [pc, #344]	; 11d18 <__assert_fail@plt+0xb5c>
   11bbc:	ldr	r6, [r0]
   11bc0:	mov	r0, #0
   11bc4:	bl	10f94 <dcgettext@plt>
   11bc8:	mov	r7, r0
   11bcc:	mov	r0, r5
   11bd0:	bl	13950 <__assert_fail@plt+0x2794>
   11bd4:	mov	r2, r7
   11bd8:	mov	r1, r6
   11bdc:	mov	r3, r0
   11be0:	mov	r0, #0
   11be4:	bl	11024 <error@plt>
   11be8:	ldr	r3, [pc, #264]	; 11cf8 <__assert_fail@plt+0xb3c>
   11bec:	mov	r2, #0
   11bf0:	strb	r2, [r3]
   11bf4:	b	1197c <__assert_fail@plt+0x7c0>
   11bf8:	bl	110b4 <__errno_location@plt>
   11bfc:	mov	r2, #5
   11c00:	ldr	r1, [pc, #276]	; 11d1c <__assert_fail@plt+0xb60>
   11c04:	ldr	r6, [r0]
   11c08:	mov	r0, r5
   11c0c:	bl	10f94 <dcgettext@plt>
   11c10:	mov	r1, r6
   11c14:	mov	r2, r0
   11c18:	mov	r0, r5
   11c1c:	bl	11024 <error@plt>
   11c20:	b	11be8 <__assert_fail@plt+0xa2c>
   11c24:	beq	11c44 <__assert_fail@plt+0xa88>
   11c28:	ldr	r1, [pc, #240]	; 11d20 <__assert_fail@plt+0xb64>
   11c2c:	mov	r2, #5
   11c30:	mov	r0, #0
   11c34:	bl	10f94 <dcgettext@plt>
   11c38:	ldr	r3, [pc, #188]	; 11cfc <__assert_fail@plt+0xb40>
   11c3c:	ldr	r1, [r3]
   11c40:	bl	10eec <fputs_unlocked@plt>
   11c44:	ldr	r7, [pc, #192]	; 11d0c <__assert_fail@plt+0xb50>
   11c48:	ldr	r8, [pc, #172]	; 11cfc <__assert_fail@plt+0xb40>
   11c4c:	ldr	r9, [pc, #176]	; 11d04 <__assert_fail@plt+0xb48>
   11c50:	mov	r5, #0
   11c54:	cmp	r6, r5
   11c58:	bne	11c94 <__assert_fail@plt+0xad8>
   11c5c:	ldr	r0, [sp, #12]
   11c60:	bl	12264 <__assert_fail@plt+0x10a8>
   11c64:	ldr	r3, [r4, #48]	; 0x30
   11c68:	cmp	r3, #0
   11c6c:	beq	1197c <__assert_fail@plt+0x7c0>
   11c70:	mov	r2, #5
   11c74:	ldr	r1, [pc, #168]	; 11d24 <__assert_fail@plt+0xb68>
   11c78:	mov	r0, #0
   11c7c:	bl	10f94 <dcgettext@plt>
   11c80:	ldr	r2, [r4, #48]	; 0x30
   11c84:	mov	r1, r0
   11c88:	mov	r0, #1
   11c8c:	bl	110f0 <__printf_chk@plt>
   11c90:	b	1197c <__assert_fail@plt+0x7c0>
   11c94:	cmp	r5, #0
   11c98:	beq	11ca4 <__assert_fail@plt+0xae8>
   11c9c:	mov	r0, #44	; 0x2c
   11ca0:	bl	111b0 <putchar_unlocked@plt>
   11ca4:	ldr	r3, [sp, #12]
   11ca8:	mov	r2, r7
   11cac:	mov	r1, #0
   11cb0:	ldr	r0, [r3, r5, lsl #2]
   11cb4:	bl	122b8 <__assert_fail@plt+0x10fc>
   11cb8:	ldr	r1, [r8]
   11cbc:	bl	10eec <fputs_unlocked@plt>
   11cc0:	ldr	r3, [sp, #12]
   11cc4:	ldr	r0, [r3, r5, lsl #2]
   11cc8:	bl	11198 <getgrgid@plt>
   11ccc:	cmp	r0, #0
   11cd0:	beq	11ce4 <__assert_fail@plt+0xb28>
   11cd4:	ldr	r2, [r0]
   11cd8:	mov	r1, r9
   11cdc:	mov	r0, #1
   11ce0:	bl	110f0 <__printf_chk@plt>
   11ce4:	add	r5, r5, #1
   11ce8:	b	11c54 <__assert_fail@plt+0xa98>
   11cec:	andeq	r7, r2, ip, ror r1
   11cf0:	andeq	r5, r1, r8, lsl r8
   11cf4:	andeq	r7, r2, r9, lsl #3
   11cf8:	andeq	r7, r2, r4, lsl r1
   11cfc:	andeq	r7, r2, r4, ror r1
   11d00:	andeq	r5, r1, r7, asr #16
   11d04:	andeq	r5, r1, r8, lsr r8
   11d08:	andeq	r5, r1, sp, lsr r8
   11d0c:			; <UNDEFINED> instruction: 0x000271b0
   11d10:	andeq	r5, r1, r5, asr #16
   11d14:	andeq	r5, r1, lr, asr #16
   11d18:	andeq	r5, r1, r7, asr r8
   11d1c:	andeq	r5, r1, r8, ror r8
   11d20:	andeq	r5, r1, r5, lsr #17
   11d24:	andeq	r5, r1, lr, lsr #17
   11d28:	subs	r5, r0, #0
   11d2c:	push	{r7, lr}
   11d30:	sub	sp, sp, #56	; 0x38
   11d34:	ldr	r4, [pc, #500]	; 11f30 <__assert_fail@plt+0xd74>
   11d38:	beq	11d70 <__assert_fail@plt+0xbb4>
   11d3c:	ldr	r3, [pc, #496]	; 11f34 <__assert_fail@plt+0xd78>
   11d40:	mov	r2, #5
   11d44:	ldr	r1, [pc, #492]	; 11f38 <__assert_fail@plt+0xd7c>
   11d48:	mov	r0, #0
   11d4c:	ldr	r6, [r3]
   11d50:	bl	10f94 <dcgettext@plt>
   11d54:	ldr	r3, [r4]
   11d58:	mov	r1, #1
   11d5c:	mov	r2, r0
   11d60:	mov	r0, r6
   11d64:	bl	11108 <__fprintf_chk@plt>
   11d68:	mov	r0, r5
   11d6c:	bl	11084 <exit@plt>
   11d70:	mov	r2, #5
   11d74:	ldr	r1, [pc, #448]	; 11f3c <__assert_fail@plt+0xd80>
   11d78:	bl	10f94 <dcgettext@plt>
   11d7c:	ldr	r2, [r4]
   11d80:	ldr	r4, [pc, #440]	; 11f40 <__assert_fail@plt+0xd84>
   11d84:	ldr	r8, [pc, #440]	; 11f44 <__assert_fail@plt+0xd88>
   11d88:	mov	r6, r5
   11d8c:	mov	r1, r0
   11d90:	mov	r0, #1
   11d94:	bl	110f0 <__printf_chk@plt>
   11d98:	mov	r2, #5
   11d9c:	ldr	r1, [pc, #420]	; 11f48 <__assert_fail@plt+0xd8c>
   11da0:	mov	r0, r5
   11da4:	bl	10f94 <dcgettext@plt>
   11da8:	ldr	r1, [r4]
   11dac:	bl	10eec <fputs_unlocked@plt>
   11db0:	mov	r2, #5
   11db4:	ldr	r1, [pc, #400]	; 11f4c <__assert_fail@plt+0xd90>
   11db8:	mov	r0, r5
   11dbc:	bl	10f94 <dcgettext@plt>
   11dc0:	ldr	r1, [r4]
   11dc4:	bl	10eec <fputs_unlocked@plt>
   11dc8:	mov	r2, #5
   11dcc:	ldr	r1, [pc, #380]	; 11f50 <__assert_fail@plt+0xd94>
   11dd0:	mov	r0, r5
   11dd4:	bl	10f94 <dcgettext@plt>
   11dd8:	ldr	r1, [r4]
   11ddc:	bl	10eec <fputs_unlocked@plt>
   11de0:	mov	r2, #5
   11de4:	ldr	r1, [pc, #360]	; 11f54 <__assert_fail@plt+0xd98>
   11de8:	mov	r0, r5
   11dec:	bl	10f94 <dcgettext@plt>
   11df0:	ldr	r1, [r4]
   11df4:	bl	10eec <fputs_unlocked@plt>
   11df8:	mov	r2, #5
   11dfc:	ldr	r1, [pc, #340]	; 11f58 <__assert_fail@plt+0xd9c>
   11e00:	mov	r0, r5
   11e04:	bl	10f94 <dcgettext@plt>
   11e08:	ldr	r1, [r4]
   11e0c:	bl	10eec <fputs_unlocked@plt>
   11e10:	ldr	lr, [pc, #324]	; 11f5c <__assert_fail@plt+0xda0>
   11e14:	mov	ip, sp
   11e18:	ldm	lr!, {r0, r1, r2, r3}
   11e1c:	stmia	ip!, {r0, r1, r2, r3}
   11e20:	ldm	lr!, {r0, r1, r2, r3}
   11e24:	stmia	ip!, {r0, r1, r2, r3}
   11e28:	ldm	lr!, {r0, r1, r2, r3}
   11e2c:	stmia	ip!, {r0, r1, r2, r3}
   11e30:	ldm	lr, {r0, r1}
   11e34:	stm	ip, {r0, r1}
   11e38:	ldr	r1, [sp, r6]
   11e3c:	add	r7, sp, r6
   11e40:	cmp	r1, #0
   11e44:	bne	11ee8 <__assert_fail@plt+0xd2c>
   11e48:	ldr	r6, [r7, #4]
   11e4c:	ldr	r7, [pc, #240]	; 11f44 <__assert_fail@plt+0xd88>
   11e50:	cmp	r6, #0
   11e54:	mov	r2, #5
   11e58:	ldr	r1, [pc, #256]	; 11f60 <__assert_fail@plt+0xda4>
   11e5c:	mov	r0, #0
   11e60:	moveq	r6, r7
   11e64:	bl	10f94 <dcgettext@plt>
   11e68:	ldr	r3, [pc, #244]	; 11f64 <__assert_fail@plt+0xda8>
   11e6c:	ldr	r2, [pc, #244]	; 11f68 <__assert_fail@plt+0xdac>
   11e70:	mov	r1, r0
   11e74:	mov	r0, #1
   11e78:	bl	110f0 <__printf_chk@plt>
   11e7c:	mov	r1, #0
   11e80:	mov	r0, #5
   11e84:	bl	1112c <setlocale@plt>
   11e88:	cmp	r0, #0
   11e8c:	bne	11f00 <__assert_fail@plt+0xd44>
   11e90:	mov	r2, #5
   11e94:	ldr	r1, [pc, #208]	; 11f6c <__assert_fail@plt+0xdb0>
   11e98:	mov	r0, #0
   11e9c:	bl	10f94 <dcgettext@plt>
   11ea0:	ldr	r3, [pc, #156]	; 11f44 <__assert_fail@plt+0xd88>
   11ea4:	ldr	r2, [pc, #184]	; 11f64 <__assert_fail@plt+0xda8>
   11ea8:	mov	r1, r0
   11eac:	mov	r0, #1
   11eb0:	bl	110f0 <__printf_chk@plt>
   11eb4:	mov	r2, #5
   11eb8:	ldr	r1, [pc, #176]	; 11f70 <__assert_fail@plt+0xdb4>
   11ebc:	mov	r0, #0
   11ec0:	bl	10f94 <dcgettext@plt>
   11ec4:	ldr	r2, [pc, #168]	; 11f74 <__assert_fail@plt+0xdb8>
   11ec8:	cmp	r6, r7
   11ecc:	ldr	r3, [pc, #164]	; 11f78 <__assert_fail@plt+0xdbc>
   11ed0:	moveq	r3, r2
   11ed4:	mov	r2, r6
   11ed8:	mov	r1, r0
   11edc:	mov	r0, #1
   11ee0:	bl	110f0 <__printf_chk@plt>
   11ee4:	b	11d68 <__assert_fail@plt+0xbac>
   11ee8:	mov	r0, r8
   11eec:	bl	10f1c <strcmp@plt>
   11ef0:	add	r6, r6, #8
   11ef4:	cmp	r0, #0
   11ef8:	bne	11e38 <__assert_fail@plt+0xc7c>
   11efc:	b	11e48 <__assert_fail@plt+0xc8c>
   11f00:	mov	r2, #3
   11f04:	ldr	r1, [pc, #112]	; 11f7c <__assert_fail@plt+0xdc0>
   11f08:	bl	11180 <strncmp@plt>
   11f0c:	cmp	r0, #0
   11f10:	beq	11e90 <__assert_fail@plt+0xcd4>
   11f14:	mov	r2, #5
   11f18:	ldr	r1, [pc, #96]	; 11f80 <__assert_fail@plt+0xdc4>
   11f1c:	mov	r0, #0
   11f20:	bl	10f94 <dcgettext@plt>
   11f24:	ldr	r1, [r4]
   11f28:	bl	10eec <fputs_unlocked@plt>
   11f2c:	b	11e90 <__assert_fail@plt+0xcd4>
   11f30:	andeq	r7, r2, r4, ror #3
   11f34:	andeq	r7, r2, r0, ror r1
   11f38:			; <UNDEFINED> instruction: 0x000158bd
   11f3c:	andeq	r5, r1, r4, ror #17
   11f40:	andeq	r7, r2, r4, ror r1
   11f44:			; <UNDEFINED> instruction: 0x000158ba
   11f48:	andeq	r5, r1, r5, lsl #18
   11f4c:	andeq	r5, r1, r1, ror r9
   11f50:	andeq	r5, r1, sl, ror fp
   11f54:	andeq	r5, r1, r7, lsr #23
   11f58:	ldrdeq	r5, [r1], -sp
   11f5c:	andeq	r5, r1, r0, asr #14
   11f60:	andeq	r5, r1, r4, lsr #24
   11f64:	andeq	r5, r1, fp, lsr ip
   11f68:	andeq	r5, r1, r3, ror #24
   11f6c:			; <UNDEFINED> instruction: 0x00015cbc
   11f70:	ldrdeq	r5, [r1], -r7
   11f74:	strdeq	r5, [r1], -r4
   11f78:	andeq	r5, r1, r0, ror r9
   11f7c:	andeq	r5, r1, r1, ror ip
   11f80:	andeq	r5, r1, r5, ror ip
   11f84:	push	{r4, r5, r6, lr}
   11f88:	subs	r5, r1, #0
   11f8c:	mov	r6, r0
   11f90:	moveq	r5, #1
   11f94:	beq	11fcc <__assert_fail@plt+0xe10>
   11f98:	bl	11198 <getgrgid@plt>
   11f9c:	subs	r4, r0, #0
   11fa0:	ldrne	r0, [r4]
   11fa4:	bne	11fdc <__assert_fail@plt+0xe20>
   11fa8:	mov	r2, #5
   11fac:	ldr	r1, [pc, #60]	; 11ff0 <__assert_fail@plt+0xe34>
   11fb0:	bl	10f94 <dcgettext@plt>
   11fb4:	mov	r3, r6
   11fb8:	mov	r1, r4
   11fbc:	mov	r5, r4
   11fc0:	mov	r2, r0
   11fc4:	mov	r0, r4
   11fc8:	bl	11024 <error@plt>
   11fcc:	ldr	r2, [pc, #32]	; 11ff4 <__assert_fail@plt+0xe38>
   11fd0:	mov	r0, r6
   11fd4:	mov	r1, #0
   11fd8:	bl	122b8 <__assert_fail@plt+0x10fc>
   11fdc:	ldr	r3, [pc, #20]	; 11ff8 <__assert_fail@plt+0xe3c>
   11fe0:	ldr	r1, [r3]
   11fe4:	bl	10eec <fputs_unlocked@plt>
   11fe8:	mov	r0, r5
   11fec:	pop	{r4, r5, r6, pc}
   11ff0:	andeq	r5, r1, sl, asr pc
   11ff4:	andeq	r7, r2, r6, asr #3
   11ff8:	andeq	r7, r2, r4, ror r1
   11ffc:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12000:	subs	r5, r0, #0
   12004:	mov	r8, r2
   12008:	mov	r6, r3
   1200c:	ldrb	r9, [sp, #40]	; 0x28
   12010:	ldrb	sl, [sp, #44]	; 0x2c
   12014:	moveq	r7, r5
   12018:	moveq	r4, #1
   1201c:	beq	12034 <__assert_fail@plt+0xe78>
   12020:	mov	r0, r1
   12024:	bl	10f28 <getpwuid@plt>
   12028:	adds	r4, r0, #0
   1202c:	mov	r7, r0
   12030:	movne	r4, #1
   12034:	mov	r1, r9
   12038:	mov	r0, r8
   1203c:	bl	11f84 <__assert_fail@plt+0xdc8>
   12040:	cmp	r0, #0
   12044:	moveq	r4, #0
   12048:	cmp	r8, r6
   1204c:	beq	1206c <__assert_fail@plt+0xeb0>
   12050:	mov	r0, sl
   12054:	bl	111b0 <putchar_unlocked@plt>
   12058:	mov	r1, r9
   1205c:	mov	r0, r6
   12060:	bl	11f84 <__assert_fail@plt+0xdc8>
   12064:	cmp	r0, #0
   12068:	moveq	r4, #0
   1206c:	cmp	r7, #0
   12070:	moveq	r1, r6
   12074:	ldrne	r1, [r7, #12]
   12078:	mov	r0, r5
   1207c:	add	r2, sp, #4
   12080:	bl	146a8 <__assert_fail@plt+0x34ec>
   12084:	subs	r7, r0, #0
   12088:	movge	r5, #0
   1208c:	bge	12144 <__assert_fail@plt+0xf88>
   12090:	cmp	r5, #0
   12094:	beq	120e0 <__assert_fail@plt+0xf24>
   12098:	bl	110b4 <__errno_location@plt>
   1209c:	mov	r2, #5
   120a0:	ldr	r1, [pc, #176]	; 12158 <__assert_fail@plt+0xf9c>
   120a4:	ldr	r4, [r0]
   120a8:	mov	r0, #0
   120ac:	bl	10f94 <dcgettext@plt>
   120b0:	mov	r6, r0
   120b4:	mov	r0, r5
   120b8:	bl	13950 <__assert_fail@plt+0x2794>
   120bc:	mov	r2, r6
   120c0:	mov	r1, r4
   120c4:	mov	r3, r0
   120c8:	mov	r0, #0
   120cc:	bl	11024 <error@plt>
   120d0:	mov	r4, #0
   120d4:	mov	r0, r4
   120d8:	add	sp, sp, #8
   120dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   120e0:	bl	110b4 <__errno_location@plt>
   120e4:	mov	r2, #5
   120e8:	ldr	r1, [pc, #108]	; 1215c <__assert_fail@plt+0xfa0>
   120ec:	ldr	r4, [r0]
   120f0:	mov	r0, r5
   120f4:	bl	10f94 <dcgettext@plt>
   120f8:	mov	r1, r4
   120fc:	mov	r2, r0
   12100:	mov	r0, r5
   12104:	bl	11024 <error@plt>
   12108:	b	120d0 <__assert_fail@plt+0xf14>
   1210c:	ldr	r3, [sp, #4]
   12110:	ldr	r3, [r3, r5, lsl #2]
   12114:	cmp	r6, r3
   12118:	cmpne	r8, r3
   1211c:	beq	12140 <__assert_fail@plt+0xf84>
   12120:	mov	r0, sl
   12124:	bl	111b0 <putchar_unlocked@plt>
   12128:	ldr	r3, [sp, #4]
   1212c:	mov	r1, r9
   12130:	ldr	r0, [r3, r5, lsl #2]
   12134:	bl	11f84 <__assert_fail@plt+0xdc8>
   12138:	cmp	r0, #0
   1213c:	moveq	r4, #0
   12140:	add	r5, r5, #1
   12144:	cmp	r5, r7
   12148:	bne	1210c <__assert_fail@plt+0xf50>
   1214c:	ldr	r0, [sp, #4]
   12150:	bl	12264 <__assert_fail@plt+0x10a8>
   12154:	b	120d4 <__assert_fail@plt+0xf18>
   12158:	andeq	r5, r1, r7, asr r8
   1215c:	andeq	r5, r1, r8, ror r8
   12160:	ldr	r3, [pc, #4]	; 1216c <__assert_fail@plt+0xfb0>
   12164:	str	r0, [r3]
   12168:	bx	lr
   1216c:	ldrdeq	r7, [r2], -ip
   12170:	ldr	r3, [pc, #4]	; 1217c <__assert_fail@plt+0xfc0>
   12174:	strb	r0, [r3, #4]
   12178:	bx	lr
   1217c:	ldrdeq	r7, [r2], -ip
   12180:	ldr	r3, [pc, #192]	; 12248 <__assert_fail@plt+0x108c>
   12184:	push	{r0, r1, r4, r5, r6, lr}
   12188:	ldr	r0, [r3]
   1218c:	bl	14b7c <__assert_fail@plt+0x39c0>
   12190:	cmp	r0, #0
   12194:	beq	1222c <__assert_fail@plt+0x1070>
   12198:	ldr	r3, [pc, #172]	; 1224c <__assert_fail@plt+0x1090>
   1219c:	mov	r4, r3
   121a0:	ldrb	r2, [r3, #4]
   121a4:	cmp	r2, #0
   121a8:	beq	121bc <__assert_fail@plt+0x1000>
   121ac:	bl	110b4 <__errno_location@plt>
   121b0:	ldr	r3, [r0]
   121b4:	cmp	r3, #32
   121b8:	beq	1222c <__assert_fail@plt+0x1070>
   121bc:	mov	r2, #5
   121c0:	ldr	r1, [pc, #136]	; 12250 <__assert_fail@plt+0x1094>
   121c4:	mov	r0, #0
   121c8:	bl	10f94 <dcgettext@plt>
   121cc:	ldr	r4, [r4]
   121d0:	cmp	r4, #0
   121d4:	mov	r5, r0
   121d8:	beq	12210 <__assert_fail@plt+0x1054>
   121dc:	bl	110b4 <__errno_location@plt>
   121e0:	ldr	r6, [r0]
   121e4:	mov	r0, r4
   121e8:	bl	13800 <__assert_fail@plt+0x2644>
   121ec:	str	r5, [sp]
   121f0:	ldr	r2, [pc, #92]	; 12254 <__assert_fail@plt+0x1098>
   121f4:	mov	r1, r6
   121f8:	mov	r3, r0
   121fc:	mov	r0, #0
   12200:	bl	11024 <error@plt>
   12204:	ldr	r3, [pc, #76]	; 12258 <__assert_fail@plt+0x109c>
   12208:	ldr	r0, [r3]
   1220c:	bl	10f58 <_exit@plt>
   12210:	bl	110b4 <__errno_location@plt>
   12214:	mov	r3, r5
   12218:	ldr	r2, [pc, #60]	; 1225c <__assert_fail@plt+0x10a0>
   1221c:	ldr	r1, [r0]
   12220:	mov	r0, r4
   12224:	bl	11024 <error@plt>
   12228:	b	12204 <__assert_fail@plt+0x1048>
   1222c:	ldr	r3, [pc, #44]	; 12260 <__assert_fail@plt+0x10a4>
   12230:	ldr	r0, [r3]
   12234:	bl	14b7c <__assert_fail@plt+0x39c0>
   12238:	cmp	r0, #0
   1223c:	bne	12204 <__assert_fail@plt+0x1048>
   12240:	add	sp, sp, #8
   12244:	pop	{r4, r5, r6, pc}
   12248:	andeq	r7, r2, r4, ror r1
   1224c:	ldrdeq	r7, [r2], -ip
   12250:	andeq	r5, r1, fp, lsl #31
   12254:	muleq	r1, r7, pc	; <UNPREDICTABLE>
   12258:	andeq	r7, r2, ip, lsl r1
   1225c:	muleq	r1, fp, pc	; <UNPREDICTABLE>
   12260:	andeq	r7, r2, r0, ror r1
   12264:	push	{r0, r1, r2, r4, r5, lr}
   12268:	mov	r5, r0
   1226c:	bl	110b4 <__errno_location@plt>
   12270:	ldr	r3, [r0]
   12274:	mov	r4, r0
   12278:	str	r3, [sp]
   1227c:	str	r3, [sp, #4]
   12280:	mov	r3, #0
   12284:	str	r3, [r0]
   12288:	mov	r0, r5
   1228c:	bl	10f4c <free@plt>
   12290:	ldr	r3, [r4]
   12294:	add	r2, sp, #8
   12298:	cmp	r3, #0
   1229c:	moveq	r3, #4
   122a0:	movne	r3, #0
   122a4:	add	r3, r2, r3
   122a8:	ldr	r3, [r3, #-8]
   122ac:	str	r3, [r4]
   122b0:	add	sp, sp, #12
   122b4:	pop	{r4, r5, pc}
   122b8:	push	{r4, r5, r6, r8, r9, lr}
   122bc:	mov	r4, r0
   122c0:	mov	r5, r1
   122c4:	add	r6, r2, #20
   122c8:	mov	r8, #10
   122cc:	mov	r9, #0
   122d0:	mov	r3, #0
   122d4:	strb	r3, [r2, #20]
   122d8:	mov	r0, r4
   122dc:	mov	r1, r5
   122e0:	mov	r2, r8
   122e4:	mov	r3, r9
   122e8:	bl	15544 <__assert_fail@plt+0x4388>
   122ec:	mov	r3, r9
   122f0:	mov	r0, r4
   122f4:	mov	r1, r5
   122f8:	add	r2, r2, #48	; 0x30
   122fc:	strb	r2, [r6, #-1]!
   12300:	mov	r2, r8
   12304:	bl	15544 <__assert_fail@plt+0x4388>
   12308:	mov	r4, r0
   1230c:	mov	r5, r1
   12310:	orrs	r3, r4, r5
   12314:	bne	122d8 <__assert_fail@plt+0x111c>
   12318:	mov	r0, r6
   1231c:	pop	{r4, r5, r6, r8, r9, pc}
   12320:	push	{r4, r5, r6, lr}
   12324:	subs	r5, r0, #0
   12328:	bne	12340 <__assert_fail@plt+0x1184>
   1232c:	ldr	r3, [pc, #124]	; 123b0 <__assert_fail@plt+0x11f4>
   12330:	ldr	r0, [pc, #124]	; 123b4 <__assert_fail@plt+0x11f8>
   12334:	ldr	r1, [r3]
   12338:	bl	11174 <fputs@plt>
   1233c:	bl	1118c <abort@plt>
   12340:	mov	r1, #47	; 0x2f
   12344:	bl	11144 <strrchr@plt>
   12348:	cmp	r0, #0
   1234c:	addne	r4, r0, #1
   12350:	moveq	r4, r5
   12354:	sub	r3, r4, r5
   12358:	cmp	r3, #6
   1235c:	ble	1239c <__assert_fail@plt+0x11e0>
   12360:	mov	r2, #7
   12364:	ldr	r1, [pc, #76]	; 123b8 <__assert_fail@plt+0x11fc>
   12368:	sub	r0, r4, #7
   1236c:	bl	11180 <strncmp@plt>
   12370:	cmp	r0, #0
   12374:	bne	1239c <__assert_fail@plt+0x11e0>
   12378:	mov	r2, #3
   1237c:	ldr	r1, [pc, #56]	; 123bc <__assert_fail@plt+0x1200>
   12380:	mov	r0, r4
   12384:	bl	11180 <strncmp@plt>
   12388:	cmp	r0, #0
   1238c:	movne	r5, r4
   12390:	ldreq	r3, [pc, #40]	; 123c0 <__assert_fail@plt+0x1204>
   12394:	addeq	r5, r4, #3
   12398:	streq	r5, [r3]
   1239c:	ldr	r3, [pc, #32]	; 123c4 <__assert_fail@plt+0x1208>
   123a0:	str	r5, [r3]
   123a4:	ldr	r3, [pc, #28]	; 123c8 <__assert_fail@plt+0x120c>
   123a8:	str	r5, [r3]
   123ac:	pop	{r4, r5, r6, pc}
   123b0:	andeq	r7, r2, r0, ror r1
   123b4:	muleq	r1, lr, pc	; <UNPREDICTABLE>
   123b8:	ldrdeq	r5, [r1], -r6
   123bc:	ldrdeq	r5, [r1], -lr
   123c0:	andeq	r7, r2, r0, ror #2
   123c4:	andeq	r7, r2, r4, ror #3
   123c8:	andeq	r7, r2, r4, ror #2
   123cc:	push	{r4, r5, r6, lr}
   123d0:	mov	r2, #48	; 0x30
   123d4:	mov	r5, r1
   123d8:	mov	r1, #0
   123dc:	mov	r4, r0
   123e0:	bl	110e4 <memset@plt>
   123e4:	cmp	r5, #10
   123e8:	bne	123f0 <__assert_fail@plt+0x1234>
   123ec:	bl	1118c <abort@plt>
   123f0:	str	r5, [r4]
   123f4:	mov	r0, r4
   123f8:	pop	{r4, r5, r6, pc}
   123fc:	push	{r4, r5, r6, lr}
   12400:	mov	r4, r0
   12404:	mov	r5, r1
   12408:	bl	14d78 <__assert_fail@plt+0x3bbc>
   1240c:	ldrb	r3, [r0]
   12410:	bic	r3, r3, #32
   12414:	cmp	r3, #85	; 0x55
   12418:	bne	12488 <__assert_fail@plt+0x12cc>
   1241c:	ldrb	r3, [r0, #1]
   12420:	bic	r3, r3, #32
   12424:	cmp	r3, #84	; 0x54
   12428:	bne	12460 <__assert_fail@plt+0x12a4>
   1242c:	ldrb	r3, [r0, #2]
   12430:	bic	r3, r3, #32
   12434:	cmp	r3, #70	; 0x46
   12438:	bne	12460 <__assert_fail@plt+0x12a4>
   1243c:	ldrb	r3, [r0, #3]
   12440:	cmp	r3, #45	; 0x2d
   12444:	bne	12460 <__assert_fail@plt+0x12a4>
   12448:	ldrb	r3, [r0, #4]
   1244c:	cmp	r3, #56	; 0x38
   12450:	bne	12460 <__assert_fail@plt+0x12a4>
   12454:	ldrb	r3, [r0, #5]
   12458:	cmp	r3, #0
   1245c:	beq	12474 <__assert_fail@plt+0x12b8>
   12460:	ldr	r1, [pc, #144]	; 124f8 <__assert_fail@plt+0x133c>
   12464:	ldr	r0, [pc, #144]	; 124fc <__assert_fail@plt+0x1340>
   12468:	cmp	r5, #9
   1246c:	movne	r0, r1
   12470:	pop	{r4, r5, r6, pc}
   12474:	ldrb	r3, [r4]
   12478:	ldr	r1, [pc, #128]	; 12500 <__assert_fail@plt+0x1344>
   1247c:	ldr	r0, [pc, #128]	; 12504 <__assert_fail@plt+0x1348>
   12480:	cmp	r3, #96	; 0x60
   12484:	b	1246c <__assert_fail@plt+0x12b0>
   12488:	cmp	r3, #71	; 0x47
   1248c:	bne	12460 <__assert_fail@plt+0x12a4>
   12490:	ldrb	r3, [r0, #1]
   12494:	bic	r3, r3, #32
   12498:	cmp	r3, #66	; 0x42
   1249c:	bne	12460 <__assert_fail@plt+0x12a4>
   124a0:	ldrb	r3, [r0, #2]
   124a4:	cmp	r3, #49	; 0x31
   124a8:	bne	12460 <__assert_fail@plt+0x12a4>
   124ac:	ldrb	r3, [r0, #3]
   124b0:	cmp	r3, #56	; 0x38
   124b4:	bne	12460 <__assert_fail@plt+0x12a4>
   124b8:	ldrb	r3, [r0, #4]
   124bc:	cmp	r3, #48	; 0x30
   124c0:	bne	12460 <__assert_fail@plt+0x12a4>
   124c4:	ldrb	r3, [r0, #5]
   124c8:	cmp	r3, #51	; 0x33
   124cc:	bne	12460 <__assert_fail@plt+0x12a4>
   124d0:	ldrb	r3, [r0, #6]
   124d4:	cmp	r3, #48	; 0x30
   124d8:	bne	12460 <__assert_fail@plt+0x12a4>
   124dc:	ldrb	r3, [r0, #7]
   124e0:	cmp	r3, #0
   124e4:	bne	12460 <__assert_fail@plt+0x12a4>
   124e8:	ldrb	r3, [r4]
   124ec:	ldr	r1, [pc, #20]	; 12508 <__assert_fail@plt+0x134c>
   124f0:	ldr	r0, [pc, #20]	; 1250c <__assert_fail@plt+0x1350>
   124f4:	b	12480 <__assert_fail@plt+0x12c4>
   124f8:	andeq	r6, r1, r9, asr #32
   124fc:	andeq	r6, r1, r7, asr #32
   12500:	andeq	r6, r1, ip, lsr r0
   12504:	andeq	r6, r1, r8, lsr r0
   12508:	andeq	r6, r1, r4, asr #32
   1250c:	andeq	r6, r1, r0, asr #32
   12510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12514:	sub	sp, sp, #108	; 0x6c
   12518:	mov	r8, r0
   1251c:	str	r3, [sp, #36]	; 0x24
   12520:	mov	r5, r1
   12524:	str	r2, [sp, #44]	; 0x2c
   12528:	ldr	sl, [sp, #144]	; 0x90
   1252c:	bl	10fe8 <__ctype_get_mb_cur_max@plt>
   12530:	ldr	r3, [sp, #148]	; 0x94
   12534:	mov	r7, #0
   12538:	str	r7, [sp, #48]	; 0x30
   1253c:	lsr	r6, r3, #1
   12540:	and	r6, r6, #1
   12544:	mov	r3, #1
   12548:	str	r3, [sp, #72]	; 0x48
   1254c:	str	r7, [sp, #24]
   12550:	str	r7, [sp, #32]
   12554:	str	r7, [sp, #40]	; 0x28
   12558:	str	r7, [sp, #60]	; 0x3c
   1255c:	str	r0, [sp, #76]	; 0x4c
   12560:	cmp	sl, #10
   12564:	ldrls	pc, [pc, sl, lsl #2]
   12568:	b	127a4 <__assert_fail@plt+0x15e8>
   1256c:	muleq	r1, r8, r5
   12570:	andeq	r3, r1, ip, lsr #4
   12574:	andeq	r2, r1, r0, ror r7
   12578:			; <UNDEFINED> instruction: 0x000127bc
   1257c:	andeq	r2, r1, ip, asr #14
   12580:	andeq	r2, r1, r4, lsr #11
   12584:	andeq	r3, r1, ip, lsl #4
   12588:	andeq	r2, r1, r8, lsr #15
   1258c:	muleq	r1, ip, r6
   12590:	muleq	r1, ip, r6
   12594:	muleq	r1, ip, r6
   12598:	mov	r6, #0
   1259c:	mov	r4, #0
   125a0:	b	125d0 <__assert_fail@plt+0x1414>
   125a4:	cmp	r6, #0
   125a8:	bne	127cc <__assert_fail@plt+0x1610>
   125ac:	cmp	r5, #0
   125b0:	movne	r3, #34	; 0x22
   125b4:	strbne	r3, [r8]
   125b8:	mov	r3, #1
   125bc:	str	r3, [sp, #24]
   125c0:	str	r3, [sp, #32]
   125c4:	mov	r4, #1
   125c8:	ldr	r3, [pc, #3172]	; 13234 <__assert_fail@plt+0x2078>
   125cc:	str	r3, [sp, #40]	; 0x28
   125d0:	mov	r9, r5
   125d4:	mov	r3, #0
   125d8:	str	r7, [sp, #68]	; 0x44
   125dc:	str	r3, [sp, #28]
   125e0:	ldr	r3, [sp, #36]	; 0x24
   125e4:	cmn	r3, #1
   125e8:	bne	13178 <__assert_fail@plt+0x1fbc>
   125ec:	ldr	r3, [sp, #44]	; 0x2c
   125f0:	ldr	r2, [sp, #28]
   125f4:	ldrb	r3, [r3, r2]
   125f8:	adds	r3, r3, #0
   125fc:	movne	r3, #1
   12600:	str	r3, [sp, #52]	; 0x34
   12604:	ldr	r3, [sp, #52]	; 0x34
   12608:	cmp	r3, #0
   1260c:	bne	127f4 <__assert_fail@plt+0x1638>
   12610:	sub	r2, sl, #2
   12614:	clz	r2, r2
   12618:	lsr	r2, r2, #5
   1261c:	and	r3, r6, r2
   12620:	cmp	r4, #0
   12624:	movne	r3, #0
   12628:	andeq	r3, r3, #1
   1262c:	cmp	r3, #0
   12630:	bne	129bc <__assert_fail@plt+0x1800>
   12634:	eor	r3, r6, #1
   12638:	ands	r2, r2, r3
   1263c:	beq	131b0 <__assert_fail@plt+0x1ff4>
   12640:	ldr	r3, [sp, #68]	; 0x44
   12644:	cmp	r3, #0
   12648:	beq	131e8 <__assert_fail@plt+0x202c>
   1264c:	ldr	r3, [sp, #72]	; 0x48
   12650:	cmp	r3, #0
   12654:	beq	1318c <__assert_fail@plt+0x1fd0>
   12658:	ldr	r3, [sp, #160]	; 0xa0
   1265c:	ldr	r2, [sp, #44]	; 0x2c
   12660:	str	r3, [sp, #16]
   12664:	ldr	r3, [sp, #156]	; 0x9c
   12668:	ldr	r1, [sp, #60]	; 0x3c
   1266c:	str	r3, [sp, #12]
   12670:	ldr	r3, [sp, #152]	; 0x98
   12674:	str	r3, [sp, #8]
   12678:	ldr	r3, [sp, #148]	; 0x94
   1267c:	str	r3, [sp, #4]
   12680:	mov	r3, #5
   12684:	str	r3, [sp]
   12688:	ldr	r3, [sp, #36]	; 0x24
   1268c:	mov	r0, r8
   12690:	bl	12510 <__assert_fail@plt+0x1354>
   12694:	mov	r4, r0
   12698:	b	131dc <__assert_fail@plt+0x2020>
   1269c:	cmp	sl, #10
   126a0:	beq	126fc <__assert_fail@plt+0x1540>
   126a4:	ldr	r4, [pc, #2956]	; 13238 <__assert_fail@plt+0x207c>
   126a8:	mov	r2, #5
   126ac:	mov	r1, r4
   126b0:	mov	r0, #0
   126b4:	bl	10f94 <dcgettext@plt>
   126b8:	cmp	r0, r4
   126bc:	str	r0, [sp, #156]	; 0x9c
   126c0:	bne	126d0 <__assert_fail@plt+0x1514>
   126c4:	mov	r1, sl
   126c8:	bl	123fc <__assert_fail@plt+0x1240>
   126cc:	str	r0, [sp, #156]	; 0x9c
   126d0:	ldr	r4, [pc, #2916]	; 1323c <__assert_fail@plt+0x2080>
   126d4:	mov	r2, #5
   126d8:	mov	r1, r4
   126dc:	mov	r0, #0
   126e0:	bl	10f94 <dcgettext@plt>
   126e4:	cmp	r0, r4
   126e8:	str	r0, [sp, #160]	; 0xa0
   126ec:	bne	126fc <__assert_fail@plt+0x1540>
   126f0:	mov	r1, sl
   126f4:	bl	123fc <__assert_fail@plt+0x1240>
   126f8:	str	r0, [sp, #160]	; 0xa0
   126fc:	cmp	r6, #0
   12700:	moveq	r4, r6
   12704:	beq	1271c <__assert_fail@plt+0x1560>
   12708:	mov	r4, #0
   1270c:	b	1272c <__assert_fail@plt+0x1570>
   12710:	cmp	r5, r4
   12714:	strbhi	r3, [r8, r4]
   12718:	add	r4, r4, #1
   1271c:	ldr	r3, [sp, #156]	; 0x9c
   12720:	ldrb	r3, [r3, r4]
   12724:	cmp	r3, #0
   12728:	bne	12710 <__assert_fail@plt+0x1554>
   1272c:	ldr	r0, [sp, #160]	; 0xa0
   12730:	bl	1109c <strlen@plt>
   12734:	ldr	r3, [sp, #160]	; 0xa0
   12738:	str	r3, [sp, #40]	; 0x28
   1273c:	mov	r3, #1
   12740:	str	r3, [sp, #24]
   12744:	str	r0, [sp, #32]
   12748:	b	125d0 <__assert_fail@plt+0x1414>
   1274c:	mov	r3, #1
   12750:	cmp	r6, #0
   12754:	streq	r3, [sp, #24]
   12758:	beq	12778 <__assert_fail@plt+0x15bc>
   1275c:	str	r3, [sp, #32]
   12760:	ldr	r3, [pc, #2772]	; 1323c <__assert_fail@plt+0x2080>
   12764:	mov	r4, #0
   12768:	str	r3, [sp, #40]	; 0x28
   1276c:	b	1279c <__assert_fail@plt+0x15e0>
   12770:	cmp	r6, #0
   12774:	bne	127e4 <__assert_fail@plt+0x1628>
   12778:	cmp	r5, #0
   1277c:	movne	r3, #39	; 0x27
   12780:	strbne	r3, [r8]
   12784:	mov	r3, #1
   12788:	str	r3, [sp, #32]
   1278c:	mov	r6, #0
   12790:	ldr	r3, [pc, #2724]	; 1323c <__assert_fail@plt+0x2080>
   12794:	mov	r4, #1
   12798:	str	r3, [sp, #40]	; 0x28
   1279c:	mov	sl, #2
   127a0:	b	125d0 <__assert_fail@plt+0x1414>
   127a4:	bl	1118c <abort@plt>
   127a8:	mov	r6, #0
   127ac:	mov	r3, #1
   127b0:	str	r3, [sp, #24]
   127b4:	mov	r4, r6
   127b8:	b	125d0 <__assert_fail@plt+0x1414>
   127bc:	mov	r6, #1
   127c0:	str	r6, [sp, #24]
   127c4:	str	r6, [sp, #32]
   127c8:	b	12760 <__assert_fail@plt+0x15a4>
   127cc:	mov	r3, #1
   127d0:	str	r3, [sp, #32]
   127d4:	ldr	r3, [pc, #2648]	; 13234 <__assert_fail@plt+0x2078>
   127d8:	str	r6, [sp, #24]
   127dc:	str	r3, [sp, #40]	; 0x28
   127e0:	b	1259c <__assert_fail@plt+0x13e0>
   127e4:	mov	r3, #1
   127e8:	str	r3, [sp, #32]
   127ec:	ldr	r3, [pc, #2632]	; 1323c <__assert_fail@plt+0x2080>
   127f0:	b	127dc <__assert_fail@plt+0x1620>
   127f4:	ldr	r3, [sp, #32]
   127f8:	ldr	fp, [sp, #24]
   127fc:	cmp	sl, #2
   12800:	moveq	fp, #0
   12804:	andne	fp, fp, #1
   12808:	adds	r5, r3, #0
   1280c:	movne	r5, #1
   12810:	ands	r3, r5, fp
   12814:	str	r3, [sp, #64]	; 0x40
   12818:	beq	128e8 <__assert_fail@plt+0x172c>
   1281c:	ldr	r2, [sp, #32]
   12820:	ldr	r3, [sp, #28]
   12824:	add	r7, r3, r2
   12828:	mov	r3, r2
   1282c:	ldr	r2, [sp, #36]	; 0x24
   12830:	cmp	r3, #1
   12834:	movls	r3, #0
   12838:	movhi	r3, #1
   1283c:	cmn	r2, #1
   12840:	movne	r3, #0
   12844:	cmp	r3, #0
   12848:	beq	12858 <__assert_fail@plt+0x169c>
   1284c:	ldr	r0, [sp, #44]	; 0x2c
   12850:	bl	1109c <strlen@plt>
   12854:	str	r0, [sp, #36]	; 0x24
   12858:	ldr	r3, [sp, #36]	; 0x24
   1285c:	cmp	r3, r7
   12860:	bcc	128e0 <__assert_fail@plt+0x1724>
   12864:	ldr	r3, [sp, #44]	; 0x2c
   12868:	ldr	r0, [sp, #28]
   1286c:	ldr	r2, [sp, #32]
   12870:	ldr	r1, [sp, #40]	; 0x28
   12874:	add	r0, r3, r0
   12878:	bl	10f7c <memcmp@plt>
   1287c:	cmp	r0, #0
   12880:	bne	128e0 <__assert_fail@plt+0x1724>
   12884:	cmp	r6, #0
   12888:	beq	128e8 <__assert_fail@plt+0x172c>
   1288c:	str	r6, [sp, #24]
   12890:	ldr	r3, [sp, #24]
   12894:	ldr	r2, [sp, #44]	; 0x2c
   12898:	cmp	sl, #2
   1289c:	movne	r3, #0
   128a0:	andeq	r3, r3, #1
   128a4:	cmp	r3, #0
   128a8:	ldr	r3, [sp, #160]	; 0xa0
   128ac:	movne	sl, #4
   128b0:	str	r3, [sp, #16]
   128b4:	ldr	r3, [sp, #156]	; 0x9c
   128b8:	str	sl, [sp]
   128bc:	str	r3, [sp, #12]
   128c0:	mov	r3, #0
   128c4:	str	r3, [sp, #8]
   128c8:	ldr	r3, [sp, #148]	; 0x94
   128cc:	mov	r1, r9
   128d0:	bic	r3, r3, #2
   128d4:	str	r3, [sp, #4]
   128d8:	ldr	r3, [sp, #36]	; 0x24
   128dc:	b	1268c <__assert_fail@plt+0x14d0>
   128e0:	mov	r3, #0
   128e4:	str	r3, [sp, #64]	; 0x40
   128e8:	ldr	r2, [sp, #28]
   128ec:	ldr	r3, [sp, #44]	; 0x2c
   128f0:	add	r3, r3, r2
   128f4:	str	r3, [sp, #80]	; 0x50
   128f8:	ldr	r3, [sp, #44]	; 0x2c
   128fc:	ldrb	r7, [r3, r2]
   12900:	cmp	r7, #58	; 0x3a
   12904:	bhi	12a6c <__assert_fail@plt+0x18b0>
   12908:	cmp	r7, #43	; 0x2b
   1290c:	bcs	12ac0 <__assert_fail@plt+0x1904>
   12910:	cmp	r7, #32
   12914:	beq	12b18 <__assert_fail@plt+0x195c>
   12918:	bhi	129c4 <__assert_fail@plt+0x1808>
   1291c:	cmp	r7, #9
   12920:	beq	12dcc <__assert_fail@plt+0x1c10>
   12924:	bhi	12988 <__assert_fail@plt+0x17cc>
   12928:	cmp	r7, #7
   1292c:	beq	12e78 <__assert_fail@plt+0x1cbc>
   12930:	bhi	12b34 <__assert_fail@plt+0x1978>
   12934:	cmp	r7, #0
   12938:	beq	12b50 <__assert_fail@plt+0x1994>
   1293c:	ldr	r3, [sp, #76]	; 0x4c
   12940:	cmp	r3, #1
   12944:	bne	12ebc <__assert_fail@plt+0x1d00>
   12948:	bl	11078 <__ctype_b_loc@plt>
   1294c:	sxth	r3, r7
   12950:	lsl	r3, r3, #1
   12954:	ldr	r2, [r0]
   12958:	ldrh	r5, [r2, r3]
   1295c:	ldr	r3, [sp, #76]	; 0x4c
   12960:	str	r3, [sp, #56]	; 0x38
   12964:	lsr	r5, r5, #14
   12968:	and	r5, r5, #1
   1296c:	ldr	r3, [sp, #24]
   12970:	eor	fp, r5, #1
   12974:	and	fp, fp, r3
   12978:	ands	fp, fp, #255	; 0xff
   1297c:	beq	12d04 <__assert_fail@plt+0x1b48>
   12980:	mov	r5, #0
   12984:	b	12f68 <__assert_fail@plt+0x1dac>
   12988:	cmp	r7, #11
   1298c:	beq	12dd4 <__assert_fail@plt+0x1c18>
   12990:	bcc	12e70 <__assert_fail@plt+0x1cb4>
   12994:	cmp	r7, #12
   12998:	beq	12e80 <__assert_fail@plt+0x1cc4>
   1299c:	cmp	r7, #13
   129a0:	moveq	r3, #114	; 0x72
   129a4:	bne	1293c <__assert_fail@plt+0x1780>
   129a8:	cmp	sl, #2
   129ac:	movne	r2, #0
   129b0:	andeq	r2, r6, #1
   129b4:	cmp	r2, #0
   129b8:	beq	12b38 <__assert_fail@plt+0x197c>
   129bc:	mov	sl, #2
   129c0:	b	12890 <__assert_fail@plt+0x16d4>
   129c4:	cmp	r7, #37	; 0x25
   129c8:	beq	12ac0 <__assert_fail@plt+0x1904>
   129cc:	bhi	129e0 <__assert_fail@plt+0x1824>
   129d0:	cmp	r7, #35	; 0x23
   129d4:	beq	12b0c <__assert_fail@plt+0x1950>
   129d8:	mov	r5, #0
   129dc:	b	12b1c <__assert_fail@plt+0x1960>
   129e0:	cmp	r7, #39	; 0x27
   129e4:	bne	129d8 <__assert_fail@plt+0x181c>
   129e8:	cmp	sl, #2
   129ec:	ldrne	r5, [sp, #52]	; 0x34
   129f0:	movne	r3, r5
   129f4:	strne	r3, [sp, #68]	; 0x44
   129f8:	bne	12ac4 <__assert_fail@plt+0x1908>
   129fc:	cmp	r6, #0
   12a00:	bne	12890 <__assert_fail@plt+0x16d4>
   12a04:	ldr	r2, [sp, #60]	; 0x3c
   12a08:	adds	r3, r9, #0
   12a0c:	movne	r3, #1
   12a10:	cmp	r2, #0
   12a14:	movne	r3, #0
   12a18:	cmp	r3, #0
   12a1c:	strne	r9, [sp, #60]	; 0x3c
   12a20:	movne	r9, #0
   12a24:	bne	12a34 <__assert_fail@plt+0x1878>
   12a28:	cmp	r9, r4
   12a2c:	movhi	r3, #39	; 0x27
   12a30:	strbhi	r3, [r8, r4]
   12a34:	add	r3, r4, #1
   12a38:	cmp	r3, r9
   12a3c:	movcc	r2, #92	; 0x5c
   12a40:	strbcc	r2, [r8, r3]
   12a44:	add	r3, r4, #2
   12a48:	cmp	r3, r9
   12a4c:	ldr	r5, [sp, #52]	; 0x34
   12a50:	movcc	r2, #39	; 0x27
   12a54:	strbcc	r2, [r8, r3]
   12a58:	add	r4, r4, #3
   12a5c:	mov	fp, r6
   12a60:	str	r5, [sp, #68]	; 0x44
   12a64:	str	r6, [sp, #48]	; 0x30
   12a68:	b	12d04 <__assert_fail@plt+0x1b48>
   12a6c:	cmp	r7, #94	; 0x5e
   12a70:	beq	129d8 <__assert_fail@plt+0x181c>
   12a74:	bhi	12acc <__assert_fail@plt+0x1910>
   12a78:	cmp	r7, #90	; 0x5a
   12a7c:	bhi	12ab4 <__assert_fail@plt+0x18f8>
   12a80:	cmp	r7, #65	; 0x41
   12a84:	bcs	12ac0 <__assert_fail@plt+0x1904>
   12a88:	cmp	r7, #62	; 0x3e
   12a8c:	bls	129d8 <__assert_fail@plt+0x181c>
   12a90:	cmp	r7, #63	; 0x3f
   12a94:	bne	1293c <__assert_fail@plt+0x1780>
   12a98:	cmp	sl, #2
   12a9c:	beq	12c40 <__assert_fail@plt+0x1a84>
   12aa0:	cmp	sl, #5
   12aa4:	beq	12c50 <__assert_fail@plt+0x1a94>
   12aa8:	mov	fp, #0
   12aac:	mov	r5, fp
   12ab0:	b	12d04 <__assert_fail@plt+0x1b48>
   12ab4:	cmp	r7, #92	; 0x5c
   12ab8:	beq	12ddc <__assert_fail@plt+0x1c20>
   12abc:	bls	129d8 <__assert_fail@plt+0x181c>
   12ac0:	ldr	r5, [sp, #52]	; 0x34
   12ac4:	mov	fp, #0
   12ac8:	b	12d04 <__assert_fail@plt+0x1b48>
   12acc:	cmp	r7, #122	; 0x7a
   12ad0:	bhi	12af0 <__assert_fail@plt+0x1934>
   12ad4:	cmp	r7, #97	; 0x61
   12ad8:	bcs	12ac0 <__assert_fail@plt+0x1904>
   12adc:	cmp	r7, #95	; 0x5f
   12ae0:	beq	12ac0 <__assert_fail@plt+0x1904>
   12ae4:	cmp	r7, #96	; 0x60
   12ae8:	bne	1293c <__assert_fail@plt+0x1780>
   12aec:	b	129d8 <__assert_fail@plt+0x181c>
   12af0:	cmp	r7, #124	; 0x7c
   12af4:	beq	129d8 <__assert_fail@plt+0x181c>
   12af8:	bcc	12e88 <__assert_fail@plt+0x1ccc>
   12afc:	cmp	r7, #125	; 0x7d
   12b00:	beq	12e88 <__assert_fail@plt+0x1ccc>
   12b04:	cmp	r7, #126	; 0x7e
   12b08:	bne	1293c <__assert_fail@plt+0x1780>
   12b0c:	ldr	r3, [sp, #28]
   12b10:	cmp	r3, #0
   12b14:	bne	12c48 <__assert_fail@plt+0x1a8c>
   12b18:	ldr	r5, [sp, #52]	; 0x34
   12b1c:	cmp	sl, #2
   12b20:	movne	fp, #0
   12b24:	andeq	fp, r6, #1
   12b28:	cmp	fp, #0
   12b2c:	beq	12d04 <__assert_fail@plt+0x1b48>
   12b30:	b	129bc <__assert_fail@plt+0x1800>
   12b34:	mov	r3, #98	; 0x62
   12b38:	ldr	r2, [sp, #24]
   12b3c:	cmp	r2, #0
   12b40:	beq	12c48 <__assert_fail@plt+0x1a8c>
   12b44:	mov	r7, r3
   12b48:	mov	r5, #0
   12b4c:	b	12d5c <__assert_fail@plt+0x1ba0>
   12b50:	ldr	r3, [sp, #24]
   12b54:	cmp	r3, #0
   12b58:	beq	12c24 <__assert_fail@plt+0x1a68>
   12b5c:	cmp	r6, #0
   12b60:	bne	1288c <__assert_fail@plt+0x16d0>
   12b64:	ldr	r3, [sp, #48]	; 0x30
   12b68:	eor	r2, r3, #1
   12b6c:	cmp	sl, #2
   12b70:	movne	r2, #0
   12b74:	andeq	r2, r2, #1
   12b78:	cmp	r2, #0
   12b7c:	moveq	r3, r4
   12b80:	beq	12bb8 <__assert_fail@plt+0x19fc>
   12b84:	cmp	r9, r4
   12b88:	movhi	r3, #39	; 0x27
   12b8c:	strbhi	r3, [r8, r4]
   12b90:	add	r3, r4, #1
   12b94:	cmp	r9, r3
   12b98:	movhi	r1, #36	; 0x24
   12b9c:	strbhi	r1, [r8, r3]
   12ba0:	add	r3, r4, #2
   12ba4:	cmp	r9, r3
   12ba8:	movhi	r1, #39	; 0x27
   12bac:	strbhi	r1, [r8, r3]
   12bb0:	add	r3, r4, #3
   12bb4:	str	r2, [sp, #48]	; 0x30
   12bb8:	cmp	r9, r3
   12bbc:	movhi	r2, #92	; 0x5c
   12bc0:	strbhi	r2, [r8, r3]
   12bc4:	cmp	fp, #0
   12bc8:	add	r4, r3, #1
   12bcc:	beq	1315c <__assert_fail@plt+0x1fa0>
   12bd0:	ldr	r2, [sp, #28]
   12bd4:	ldr	r1, [sp, #36]	; 0x24
   12bd8:	add	r2, r2, #1
   12bdc:	cmp	r1, r2
   12be0:	bls	12c1c <__assert_fail@plt+0x1a60>
   12be4:	ldr	r1, [sp, #44]	; 0x2c
   12be8:	mov	r7, #48	; 0x30
   12bec:	ldrb	r2, [r1, r2]
   12bf0:	sub	r2, r2, #48	; 0x30
   12bf4:	cmp	r2, #9
   12bf8:	movhi	r5, r6
   12bfc:	bhi	12d04 <__assert_fail@plt+0x1b48>
   12c00:	cmp	r9, r4
   12c04:	add	r2, r3, #2
   12c08:	strbhi	r7, [r8, r4]
   12c0c:	cmp	r9, r2
   12c10:	add	r4, r3, #3
   12c14:	movhi	r1, #48	; 0x30
   12c18:	strbhi	r1, [r8, r2]
   12c1c:	mov	r5, r6
   12c20:	b	13164 <__assert_fail@plt+0x1fa8>
   12c24:	ldr	r3, [sp, #148]	; 0x94
   12c28:	tst	r3, #1
   12c2c:	ldreq	r5, [sp, #24]
   12c30:	beq	13170 <__assert_fail@plt+0x1fb4>
   12c34:	ldr	r3, [sp, #28]
   12c38:	add	r3, r3, #1
   12c3c:	b	125dc <__assert_fail@plt+0x1420>
   12c40:	cmp	r6, #0
   12c44:	bne	12890 <__assert_fail@plt+0x16d4>
   12c48:	mov	r5, #0
   12c4c:	b	12ac4 <__assert_fail@plt+0x1908>
   12c50:	ldr	r3, [sp, #148]	; 0x94
   12c54:	tst	r3, #4
   12c58:	beq	12c48 <__assert_fail@plt+0x1a8c>
   12c5c:	ldr	r3, [sp, #28]
   12c60:	add	r2, r3, #2
   12c64:	ldr	r3, [sp, #36]	; 0x24
   12c68:	cmp	r3, r2
   12c6c:	bls	12c48 <__assert_fail@plt+0x1a8c>
   12c70:	ldr	r3, [sp, #44]	; 0x2c
   12c74:	ldr	r1, [sp, #28]
   12c78:	add	r3, r3, r1
   12c7c:	ldrb	r0, [r3, #1]
   12c80:	cmp	r0, #63	; 0x3f
   12c84:	bne	12c48 <__assert_fail@plt+0x1a8c>
   12c88:	ldr	r3, [sp, #44]	; 0x2c
   12c8c:	ldrb	r1, [r3, r2]
   12c90:	sub	r3, r1, #33	; 0x21
   12c94:	uxtb	r3, r3
   12c98:	cmp	r3, #29
   12c9c:	bhi	1316c <__assert_fail@plt+0x1fb0>
   12ca0:	mov	ip, #1
   12ca4:	ldr	r5, [pc, #1428]	; 13240 <__assert_fail@plt+0x2084>
   12ca8:	ands	r5, r5, ip, lsl r3
   12cac:	beq	12ac4 <__assert_fail@plt+0x1908>
   12cb0:	cmp	r6, #0
   12cb4:	bne	12890 <__assert_fail@plt+0x16d4>
   12cb8:	add	r3, r4, #1
   12cbc:	cmp	r9, r4
   12cc0:	strbhi	r0, [r8, r4]
   12cc4:	cmp	r9, r3
   12cc8:	movhi	r0, #34	; 0x22
   12ccc:	strbhi	r0, [r8, r3]
   12cd0:	add	r3, r4, #2
   12cd4:	cmp	r9, r3
   12cd8:	movhi	r0, #34	; 0x22
   12cdc:	strbhi	r0, [r8, r3]
   12ce0:	add	r3, r4, #3
   12ce4:	cmp	r9, r3
   12ce8:	add	r4, r4, #4
   12cec:	mov	r5, r6
   12cf0:	mov	fp, r6
   12cf4:	mov	r7, r1
   12cf8:	movhi	r0, #63	; 0x3f
   12cfc:	strbhi	r0, [r8, r3]
   12d00:	str	r2, [sp, #28]
   12d04:	ldr	r3, [sp, #24]
   12d08:	eor	r3, r3, #1
   12d0c:	cmp	sl, #2
   12d10:	orreq	r3, r3, #1
   12d14:	eor	r3, r3, #1
   12d18:	orr	r3, r6, r3
   12d1c:	tst	r3, #255	; 0xff
   12d20:	beq	12d50 <__assert_fail@plt+0x1b94>
   12d24:	ldr	r3, [sp, #152]	; 0x98
   12d28:	cmp	r3, #0
   12d2c:	beq	12d50 <__assert_fail@plt+0x1b94>
   12d30:	lsr	r2, r7, #5
   12d34:	ldr	r1, [sp, #152]	; 0x98
   12d38:	uxtb	r2, r2
   12d3c:	and	r3, r7, #31
   12d40:	ldr	r2, [r1, r2, lsl #2]
   12d44:	lsr	r3, r2, r3
   12d48:	tst	r3, #1
   12d4c:	bne	12d5c <__assert_fail@plt+0x1ba0>
   12d50:	ldr	r3, [sp, #64]	; 0x40
   12d54:	cmp	r3, #0
   12d58:	beq	12df4 <__assert_fail@plt+0x1c38>
   12d5c:	cmp	r6, #0
   12d60:	bne	12890 <__assert_fail@plt+0x16d4>
   12d64:	ldr	r3, [sp, #48]	; 0x30
   12d68:	eor	r3, r3, #1
   12d6c:	cmp	sl, #2
   12d70:	movne	r3, #0
   12d74:	andeq	r3, r3, #1
   12d78:	cmp	r3, #0
   12d7c:	beq	12db4 <__assert_fail@plt+0x1bf8>
   12d80:	cmp	r9, r4
   12d84:	movhi	r2, #39	; 0x27
   12d88:	strbhi	r2, [r8, r4]
   12d8c:	add	r2, r4, #1
   12d90:	cmp	r9, r2
   12d94:	movhi	r1, #36	; 0x24
   12d98:	strbhi	r1, [r8, r2]
   12d9c:	add	r2, r4, #2
   12da0:	cmp	r9, r2
   12da4:	add	r4, r4, #3
   12da8:	movhi	r1, #39	; 0x27
   12dac:	strbhi	r1, [r8, r2]
   12db0:	str	r3, [sp, #48]	; 0x30
   12db4:	cmp	r9, r4
   12db8:	movhi	r3, #92	; 0x5c
   12dbc:	strbhi	r3, [r8, r4]
   12dc0:	ldr	fp, [sp, #52]	; 0x34
   12dc4:	add	r4, r4, #1
   12dc8:	b	12df4 <__assert_fail@plt+0x1c38>
   12dcc:	mov	r3, #116	; 0x74
   12dd0:	b	129a8 <__assert_fail@plt+0x17ec>
   12dd4:	mov	r3, #118	; 0x76
   12dd8:	b	12b38 <__assert_fail@plt+0x197c>
   12ddc:	cmp	sl, #2
   12de0:	bne	12e50 <__assert_fail@plt+0x1c94>
   12de4:	cmp	r6, #0
   12de8:	bne	12890 <__assert_fail@plt+0x16d4>
   12dec:	mov	r5, r6
   12df0:	mov	fp, r6
   12df4:	ldr	r3, [sp, #48]	; 0x30
   12df8:	eor	fp, fp, #1
   12dfc:	and	fp, fp, r3
   12e00:	tst	fp, #255	; 0xff
   12e04:	beq	12e30 <__assert_fail@plt+0x1c74>
   12e08:	cmp	r9, r4
   12e0c:	movhi	r3, #39	; 0x27
   12e10:	strbhi	r3, [r8, r4]
   12e14:	add	r3, r4, #1
   12e18:	cmp	r9, r3
   12e1c:	movhi	r2, #39	; 0x27
   12e20:	add	r4, r4, #2
   12e24:	strbhi	r2, [r8, r3]
   12e28:	mov	r3, #0
   12e2c:	str	r3, [sp, #48]	; 0x30
   12e30:	cmp	r9, r4
   12e34:	strbhi	r7, [r8, r4]
   12e38:	ldr	r3, [sp, #72]	; 0x48
   12e3c:	cmp	r5, #0
   12e40:	moveq	r3, #0
   12e44:	add	r4, r4, #1
   12e48:	str	r3, [sp, #72]	; 0x48
   12e4c:	b	12c34 <__assert_fail@plt+0x1a78>
   12e50:	ldr	r3, [sp, #24]
   12e54:	and	r3, r3, r6
   12e58:	tst	r5, r3
   12e5c:	moveq	r3, r7
   12e60:	beq	129a8 <__assert_fail@plt+0x17ec>
   12e64:	mov	fp, #0
   12e68:	mov	r5, fp
   12e6c:	b	12df4 <__assert_fail@plt+0x1c38>
   12e70:	mov	r3, #110	; 0x6e
   12e74:	b	129a8 <__assert_fail@plt+0x17ec>
   12e78:	mov	r3, #97	; 0x61
   12e7c:	b	12b38 <__assert_fail@plt+0x197c>
   12e80:	mov	r3, #102	; 0x66
   12e84:	b	12b38 <__assert_fail@plt+0x197c>
   12e88:	ldr	r3, [sp, #36]	; 0x24
   12e8c:	cmn	r3, #1
   12e90:	bne	12eb0 <__assert_fail@plt+0x1cf4>
   12e94:	ldr	r3, [sp, #44]	; 0x2c
   12e98:	ldrb	r3, [r3, #1]
   12e9c:	adds	r3, r3, #0
   12ea0:	movne	r3, #1
   12ea4:	cmp	r3, #0
   12ea8:	bne	12c48 <__assert_fail@plt+0x1a8c>
   12eac:	b	12b0c <__assert_fail@plt+0x1950>
   12eb0:	ldr	r3, [sp, #36]	; 0x24
   12eb4:	subs	r3, r3, #1
   12eb8:	b	12ea0 <__assert_fail@plt+0x1ce4>
   12ebc:	mov	r3, #0
   12ec0:	str	r3, [sp, #96]	; 0x60
   12ec4:	str	r3, [sp, #100]	; 0x64
   12ec8:	ldr	r3, [sp, #36]	; 0x24
   12ecc:	cmn	r3, #1
   12ed0:	bne	12ee0 <__assert_fail@plt+0x1d24>
   12ed4:	ldr	r0, [sp, #44]	; 0x2c
   12ed8:	bl	1109c <strlen@plt>
   12edc:	str	r0, [sp, #36]	; 0x24
   12ee0:	ldr	r5, [sp, #52]	; 0x34
   12ee4:	mov	r3, #0
   12ee8:	str	r3, [sp, #56]	; 0x38
   12eec:	ldr	r3, [sp, #28]
   12ef0:	ldr	r2, [sp, #56]	; 0x38
   12ef4:	ldr	r1, [sp, #36]	; 0x24
   12ef8:	add	r2, r3, r2
   12efc:	ldr	r3, [sp, #44]	; 0x2c
   12f00:	add	r0, sp, #92	; 0x5c
   12f04:	add	fp, r3, r2
   12f08:	sub	r2, r1, r2
   12f0c:	add	r3, sp, #96	; 0x60
   12f10:	mov	r1, fp
   12f14:	bl	14dac <__assert_fail@plt+0x3bf0>
   12f18:	subs	r2, r0, #0
   12f1c:	beq	12f5c <__assert_fail@plt+0x1da0>
   12f20:	cmn	r2, #1
   12f24:	beq	13134 <__assert_fail@plt+0x1f78>
   12f28:	cmn	r2, #2
   12f2c:	bne	130a4 <__assert_fail@plt+0x1ee8>
   12f30:	ldr	r2, [sp, #56]	; 0x38
   12f34:	ldr	r3, [sp, #28]
   12f38:	add	r3, r3, r2
   12f3c:	ldr	r2, [sp, #36]	; 0x24
   12f40:	cmp	r2, r3
   12f44:	bls	13134 <__assert_fail@plt+0x1f78>
   12f48:	ldr	r3, [sp, #80]	; 0x50
   12f4c:	ldr	r2, [sp, #56]	; 0x38
   12f50:	ldrb	r5, [r3, r2]
   12f54:	cmp	r5, #0
   12f58:	bne	13094 <__assert_fail@plt+0x1ed8>
   12f5c:	ldr	r3, [sp, #56]	; 0x38
   12f60:	cmp	r3, #1
   12f64:	bls	1296c <__assert_fail@plt+0x17b0>
   12f68:	ldr	r2, [sp, #56]	; 0x38
   12f6c:	ldr	r3, [sp, #28]
   12f70:	mov	fp, #0
   12f74:	add	r3, r3, r2
   12f78:	ldr	r2, [sp, #24]
   12f7c:	str	r3, [sp, #52]	; 0x34
   12f80:	eor	r3, r5, #1
   12f84:	and	r3, r3, r2
   12f88:	mov	ip, #92	; 0x5c
   12f8c:	uxtb	r3, r3
   12f90:	mov	r2, #39	; 0x27
   12f94:	cmp	r3, #0
   12f98:	beq	1313c <__assert_fail@plt+0x1f80>
   12f9c:	cmp	r6, #0
   12fa0:	bne	1288c <__assert_fail@plt+0x16d0>
   12fa4:	ldr	r1, [sp, #48]	; 0x30
   12fa8:	eor	r1, r1, #1
   12fac:	cmp	sl, #2
   12fb0:	movne	r1, #0
   12fb4:	andeq	r1, r1, #1
   12fb8:	cmp	r1, #0
   12fbc:	beq	12fec <__assert_fail@plt+0x1e30>
   12fc0:	add	r0, r4, #1
   12fc4:	cmp	r9, r4
   12fc8:	strbhi	r2, [r8, r4]
   12fcc:	cmp	r9, r0
   12fd0:	movhi	lr, #36	; 0x24
   12fd4:	strbhi	lr, [r8, r0]
   12fd8:	add	r0, r4, #2
   12fdc:	add	r4, r4, #3
   12fe0:	cmp	r9, r0
   12fe4:	strbhi	r2, [r8, r0]
   12fe8:	str	r1, [sp, #48]	; 0x30
   12fec:	add	r0, r4, #1
   12ff0:	cmp	r9, r4
   12ff4:	strbhi	ip, [r8, r4]
   12ff8:	cmp	r9, r0
   12ffc:	lsrhi	r1, r7, #6
   13000:	addhi	r1, r1, #48	; 0x30
   13004:	strbhi	r1, [r8, r0]
   13008:	add	r0, r4, #2
   1300c:	cmp	r9, r0
   13010:	lsrhi	r1, r7, #3
   13014:	and	r7, r7, #7
   13018:	andhi	r1, r1, #7
   1301c:	add	r4, r4, #3
   13020:	add	r7, r7, #48	; 0x30
   13024:	mov	fp, r3
   13028:	addhi	r1, r1, #48	; 0x30
   1302c:	strbhi	r1, [r8, r0]
   13030:	ldr	r1, [sp, #28]
   13034:	ldr	r0, [sp, #52]	; 0x34
   13038:	add	r1, r1, #1
   1303c:	cmp	r0, r1
   13040:	bls	12df4 <__assert_fail@plt+0x1c38>
   13044:	ldr	lr, [sp, #48]	; 0x30
   13048:	eor	r0, fp, #1
   1304c:	and	r0, r0, lr
   13050:	tst	r0, #255	; 0xff
   13054:	beq	13078 <__assert_fail@plt+0x1ebc>
   13058:	add	r0, r4, #1
   1305c:	cmp	r9, r4
   13060:	strbhi	r2, [r8, r4]
   13064:	cmp	r9, r0
   13068:	add	r4, r4, #2
   1306c:	strbhi	r2, [r8, r0]
   13070:	mov	r0, #0
   13074:	str	r0, [sp, #48]	; 0x30
   13078:	ldr	r0, [sp, #44]	; 0x2c
   1307c:	cmp	r9, r4
   13080:	strbhi	r7, [r8, r4]
   13084:	str	r1, [sp, #28]
   13088:	add	r4, r4, #1
   1308c:	ldrb	r7, [r0, r1]
   13090:	b	12f94 <__assert_fail@plt+0x1dd8>
   13094:	ldr	r3, [sp, #56]	; 0x38
   13098:	add	r3, r3, #1
   1309c:	str	r3, [sp, #56]	; 0x38
   130a0:	b	12f30 <__assert_fail@plt+0x1d74>
   130a4:	cmp	sl, #2
   130a8:	movne	r3, #0
   130ac:	andeq	r3, r6, #1
   130b0:	cmp	r3, #0
   130b4:	movne	r1, #1
   130b8:	bne	13114 <__assert_fail@plt+0x1f58>
   130bc:	ldr	r0, [sp, #92]	; 0x5c
   130c0:	str	r2, [sp, #84]	; 0x54
   130c4:	bl	10fc4 <iswprint@plt>
   130c8:	ldr	r3, [sp, #56]	; 0x38
   130cc:	ldr	r2, [sp, #84]	; 0x54
   130d0:	add	r3, r3, r2
   130d4:	str	r3, [sp, #56]	; 0x38
   130d8:	cmp	r0, #0
   130dc:	add	r0, sp, #96	; 0x60
   130e0:	moveq	r5, #0
   130e4:	bl	10f70 <mbsinit@plt>
   130e8:	cmp	r0, #0
   130ec:	beq	12eec <__assert_fail@plt+0x1d30>
   130f0:	b	12f5c <__assert_fail@plt+0x1da0>
   130f4:	ldrb	r3, [fp, r1]
   130f8:	cmp	r3, #94	; 0x5e
   130fc:	beq	129bc <__assert_fail@plt+0x1800>
   13100:	bhi	13120 <__assert_fail@plt+0x1f64>
   13104:	sub	r3, r3, #91	; 0x5b
   13108:	cmp	r3, #1
   1310c:	bls	129bc <__assert_fail@plt+0x1800>
   13110:	add	r1, r1, #1
   13114:	cmp	r1, r2
   13118:	bne	130f4 <__assert_fail@plt+0x1f38>
   1311c:	b	130bc <__assert_fail@plt+0x1f00>
   13120:	cmp	r3, #96	; 0x60
   13124:	beq	129bc <__assert_fail@plt+0x1800>
   13128:	cmp	r3, #124	; 0x7c
   1312c:	bne	13110 <__assert_fail@plt+0x1f54>
   13130:	b	129bc <__assert_fail@plt+0x1800>
   13134:	mov	r5, #0
   13138:	b	12f5c <__assert_fail@plt+0x1da0>
   1313c:	ldr	r1, [sp, #64]	; 0x40
   13140:	cmp	r1, #0
   13144:	beq	13030 <__assert_fail@plt+0x1e74>
   13148:	cmp	r9, r4
   1314c:	strbhi	ip, [r8, r4]
   13150:	str	r3, [sp, #64]	; 0x40
   13154:	add	r4, r4, #1
   13158:	b	13030 <__assert_fail@plt+0x1e74>
   1315c:	mov	r5, fp
   13160:	ldr	fp, [sp, #24]
   13164:	mov	r7, #48	; 0x30
   13168:	b	12d04 <__assert_fail@plt+0x1b48>
   1316c:	mov	r5, #0
   13170:	mov	fp, r5
   13174:	b	12d04 <__assert_fail@plt+0x1b48>
   13178:	ldr	r3, [sp, #36]	; 0x24
   1317c:	ldr	r2, [sp, #28]
   13180:	subs	r3, r3, r2
   13184:	movne	r3, #1
   13188:	b	12600 <__assert_fail@plt+0x1444>
   1318c:	ldr	r3, [sp, #60]	; 0x3c
   13190:	clz	r7, r9
   13194:	cmp	r3, #0
   13198:	lsr	r7, r7, #5
   1319c:	moveq	r7, #0
   131a0:	cmp	r7, #0
   131a4:	mov	r5, r3
   131a8:	bne	12560 <__assert_fail@plt+0x13a4>
   131ac:	ldr	r3, [sp, #68]	; 0x44
   131b0:	ldr	r2, [sp, #40]	; 0x28
   131b4:	cmp	r2, #0
   131b8:	moveq	r3, #0
   131bc:	andne	r3, r3, #1
   131c0:	cmp	r3, #0
   131c4:	movne	r3, r2
   131c8:	subne	r2, r3, #1
   131cc:	bne	131fc <__assert_fail@plt+0x2040>
   131d0:	cmp	r9, r4
   131d4:	movhi	r3, #0
   131d8:	strbhi	r3, [r8, r4]
   131dc:	mov	r0, r4
   131e0:	add	sp, sp, #108	; 0x6c
   131e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e8:	mov	r3, r2
   131ec:	b	131b0 <__assert_fail@plt+0x1ff4>
   131f0:	cmp	r9, r4
   131f4:	strbhi	r3, [r8, r4]
   131f8:	add	r4, r4, #1
   131fc:	ldrb	r3, [r2, #1]!
   13200:	cmp	r3, #0
   13204:	bne	131f0 <__assert_fail@plt+0x2034>
   13208:	b	131d0 <__assert_fail@plt+0x2014>
   1320c:	ldr	r3, [pc, #32]	; 13234 <__assert_fail@plt+0x2078>
   13210:	mov	r6, #1
   13214:	str	r6, [sp, #24]
   13218:	str	r6, [sp, #32]
   1321c:	str	r3, [sp, #40]	; 0x28
   13220:	mov	r4, #0
   13224:	mov	sl, #5
   13228:	b	125d0 <__assert_fail@plt+0x1414>
   1322c:	mov	r6, #1
   13230:	b	127c4 <__assert_fail@plt+0x1608>
   13234:	andeq	r6, r1, r7, asr #32
   13238:	andeq	r6, r1, fp, asr #32
   1323c:	andeq	r6, r1, r9, asr #32
   13240:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13248:	sub	sp, sp, #52	; 0x34
   1324c:	mov	r6, r0
   13250:	mov	r5, r3
   13254:	mov	r8, r1
   13258:	mov	r9, r2
   1325c:	bl	110b4 <__errno_location@plt>
   13260:	ldr	r7, [pc, #380]	; 133e4 <__assert_fail@plt+0x2228>
   13264:	cmn	r6, #-2147483647	; 0x80000001
   13268:	ldr	r4, [r7]
   1326c:	ldr	r3, [r0]
   13270:	str	r0, [sp, #24]
   13274:	str	r3, [sp, #32]
   13278:	movne	r3, #0
   1327c:	moveq	r3, #1
   13280:	orrs	r3, r3, r6, lsr #31
   13284:	beq	1328c <__assert_fail@plt+0x20d0>
   13288:	bl	1118c <abort@plt>
   1328c:	ldr	r2, [r7, #4]
   13290:	cmp	r6, r2
   13294:	blt	13304 <__assert_fail@plt+0x2148>
   13298:	add	r1, sp, #48	; 0x30
   1329c:	add	sl, r7, #8
   132a0:	str	r2, [r1, #-4]!
   132a4:	cmp	r4, sl
   132a8:	mov	r3, #8
   132ac:	sub	r2, r6, r2
   132b0:	movne	r0, r4
   132b4:	str	r3, [sp]
   132b8:	add	r2, r2, #1
   132bc:	mvn	r3, #-2147483648	; 0x80000000
   132c0:	moveq	r0, #0
   132c4:	bl	14344 <__assert_fail@plt+0x3188>
   132c8:	cmp	r4, sl
   132cc:	ldr	r2, [sp, #44]	; 0x2c
   132d0:	mov	fp, r0
   132d4:	str	r0, [r7]
   132d8:	ldmeq	r4, {r0, r1}
   132dc:	mov	r4, fp
   132e0:	stmeq	fp, {r0, r1}
   132e4:	ldr	r0, [r7, #4]
   132e8:	mov	r1, #0
   132ec:	sub	r2, r2, r0
   132f0:	add	r0, fp, r0, lsl #3
   132f4:	lsl	r2, r2, #3
   132f8:	bl	110e4 <memset@plt>
   132fc:	ldr	r3, [sp, #44]	; 0x2c
   13300:	str	r3, [r7, #4]
   13304:	ldr	r3, [r5, #4]
   13308:	add	sl, r4, r6, lsl #3
   1330c:	orr	r3, r3, #1
   13310:	str	r3, [sp, #28]
   13314:	add	r3, r5, #8
   13318:	str	r3, [sp, #36]	; 0x24
   1331c:	ldr	r3, [r5, #44]	; 0x2c
   13320:	ldr	fp, [r4, r6, lsl #3]
   13324:	ldr	r7, [sl, #4]
   13328:	str	r3, [sp, #16]
   1332c:	ldr	r3, [r5, #40]	; 0x28
   13330:	mov	r2, r8
   13334:	str	r3, [sp, #12]
   13338:	add	r3, r5, #8
   1333c:	str	r3, [sp, #8]
   13340:	ldr	r3, [sp, #28]
   13344:	mov	r1, fp
   13348:	str	r3, [sp, #4]
   1334c:	ldr	r3, [r5]
   13350:	mov	r0, r7
   13354:	str	r3, [sp]
   13358:	mov	r3, r9
   1335c:	bl	12510 <__assert_fail@plt+0x1354>
   13360:	cmp	fp, r0
   13364:	bhi	133cc <__assert_fail@plt+0x2210>
   13368:	ldr	r3, [pc, #120]	; 133e8 <__assert_fail@plt+0x222c>
   1336c:	add	fp, r0, #1
   13370:	cmp	r7, r3
   13374:	str	fp, [r4, r6, lsl #3]
   13378:	beq	13384 <__assert_fail@plt+0x21c8>
   1337c:	mov	r0, r7
   13380:	bl	12264 <__assert_fail@plt+0x10a8>
   13384:	mov	r0, fp
   13388:	bl	141fc <__assert_fail@plt+0x3040>
   1338c:	ldr	r3, [r5, #44]	; 0x2c
   13390:	mov	r2, r8
   13394:	mov	r1, fp
   13398:	str	r0, [sl, #4]
   1339c:	str	r3, [sp, #16]
   133a0:	ldr	r3, [r5, #40]	; 0x28
   133a4:	mov	r7, r0
   133a8:	str	r3, [sp, #12]
   133ac:	add	r3, r5, #8
   133b0:	str	r3, [sp, #8]
   133b4:	ldr	r3, [sp, #28]
   133b8:	str	r3, [sp, #4]
   133bc:	ldr	r3, [r5]
   133c0:	str	r3, [sp]
   133c4:	mov	r3, r9
   133c8:	bl	12510 <__assert_fail@plt+0x1354>
   133cc:	ldr	r3, [sp, #24]
   133d0:	ldr	r2, [sp, #32]
   133d4:	mov	r0, r7
   133d8:	str	r2, [r3]
   133dc:	add	sp, sp, #52	; 0x34
   133e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133e4:	andeq	r7, r2, r0, lsr #2
   133e8:	andeq	r7, r2, r8, ror #3
   133ec:	push	{r4, r5, r6, lr}
   133f0:	mov	r5, r0
   133f4:	bl	110b4 <__errno_location@plt>
   133f8:	cmp	r5, #0
   133fc:	mov	r1, #48	; 0x30
   13400:	ldr	r6, [r0]
   13404:	mov	r4, r0
   13408:	ldr	r0, [pc, #12]	; 1341c <__assert_fail@plt+0x2260>
   1340c:	movne	r0, r5
   13410:	bl	145d8 <__assert_fail@plt+0x341c>
   13414:	str	r6, [r4]
   13418:	pop	{r4, r5, r6, pc}
   1341c:	andeq	r7, r2, r8, ror #5
   13420:	ldr	r3, [pc, #12]	; 13434 <__assert_fail@plt+0x2278>
   13424:	cmp	r0, #0
   13428:	moveq	r0, r3
   1342c:	ldr	r0, [r0]
   13430:	bx	lr
   13434:	andeq	r7, r2, r8, ror #5
   13438:	ldr	r3, [pc, #12]	; 1344c <__assert_fail@plt+0x2290>
   1343c:	cmp	r0, #0
   13440:	moveq	r0, r3
   13444:	str	r1, [r0]
   13448:	bx	lr
   1344c:	andeq	r7, r2, r8, ror #5
   13450:	ldr	r3, [pc, #52]	; 1348c <__assert_fail@plt+0x22d0>
   13454:	cmp	r0, #0
   13458:	moveq	r0, r3
   1345c:	add	r3, r0, #8
   13460:	push	{lr}		; (str lr, [sp, #-4]!)
   13464:	lsr	lr, r1, #5
   13468:	and	r1, r1, #31
   1346c:	ldr	ip, [r3, lr, lsl #2]
   13470:	lsr	r0, ip, r1
   13474:	eor	r2, r2, r0
   13478:	and	r2, r2, #1
   1347c:	and	r0, r0, #1
   13480:	eor	r1, ip, r2, lsl r1
   13484:	str	r1, [r3, lr, lsl #2]
   13488:	pop	{pc}		; (ldr pc, [sp], #4)
   1348c:	andeq	r7, r2, r8, ror #5
   13490:	ldr	r3, [pc, #16]	; 134a8 <__assert_fail@plt+0x22ec>
   13494:	cmp	r0, #0
   13498:	movne	r3, r0
   1349c:	ldr	r0, [r3, #4]
   134a0:	str	r1, [r3, #4]
   134a4:	bx	lr
   134a8:	andeq	r7, r2, r8, ror #5
   134ac:	ldr	r3, [pc, #44]	; 134e0 <__assert_fail@plt+0x2324>
   134b0:	cmp	r0, #0
   134b4:	moveq	r0, r3
   134b8:	mov	r3, #10
   134bc:	cmp	r2, #0
   134c0:	cmpne	r1, #0
   134c4:	str	r3, [r0]
   134c8:	bne	134d4 <__assert_fail@plt+0x2318>
   134cc:	push	{r4, lr}
   134d0:	bl	1118c <abort@plt>
   134d4:	str	r1, [r0, #40]	; 0x28
   134d8:	str	r2, [r0, #44]	; 0x2c
   134dc:	bx	lr
   134e0:	andeq	r7, r2, r8, ror #5
   134e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134e8:	sub	sp, sp, #24
   134ec:	mov	sl, r3
   134f0:	ldr	r4, [sp, #56]	; 0x38
   134f4:	ldr	r3, [pc, #100]	; 13560 <__assert_fail@plt+0x23a4>
   134f8:	cmp	r4, #0
   134fc:	moveq	r4, r3
   13500:	mov	r7, r0
   13504:	mov	r8, r1
   13508:	mov	r9, r2
   1350c:	bl	110b4 <__errno_location@plt>
   13510:	ldr	r3, [r4, #44]	; 0x2c
   13514:	mov	r2, r9
   13518:	mov	r1, r8
   1351c:	ldr	r6, [r0]
   13520:	str	r3, [sp, #16]
   13524:	ldr	r3, [r4, #40]	; 0x28
   13528:	mov	r5, r0
   1352c:	str	r3, [sp, #12]
   13530:	add	r3, r4, #8
   13534:	str	r3, [sp, #8]
   13538:	ldr	r3, [r4, #4]
   1353c:	mov	r0, r7
   13540:	str	r3, [sp, #4]
   13544:	ldr	r3, [r4]
   13548:	str	r3, [sp]
   1354c:	mov	r3, sl
   13550:	bl	12510 <__assert_fail@plt+0x1354>
   13554:	str	r6, [r5]
   13558:	add	sp, sp, #24
   1355c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13560:	andeq	r7, r2, r8, ror #5
   13564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13568:	cmp	r3, #0
   1356c:	sub	sp, sp, #44	; 0x2c
   13570:	ldr	r4, [pc, #188]	; 13634 <__assert_fail@plt+0x2478>
   13574:	mov	r6, r2
   13578:	movne	r4, r3
   1357c:	mov	sl, r1
   13580:	mov	r9, r0
   13584:	bl	110b4 <__errno_location@plt>
   13588:	ldr	r5, [r4, #4]
   1358c:	add	fp, r4, #8
   13590:	cmp	r6, #0
   13594:	orreq	r5, r5, #1
   13598:	mov	r1, #0
   1359c:	mov	r2, r9
   135a0:	ldr	r3, [r0]
   135a4:	mov	r8, r0
   135a8:	str	r3, [sp, #28]
   135ac:	ldr	r3, [r4, #44]	; 0x2c
   135b0:	mov	r0, r1
   135b4:	str	r3, [sp, #16]
   135b8:	ldr	r3, [r4, #40]	; 0x28
   135bc:	stmib	sp, {r5, fp}
   135c0:	str	r3, [sp, #12]
   135c4:	ldr	r3, [r4]
   135c8:	str	r3, [sp]
   135cc:	mov	r3, sl
   135d0:	bl	12510 <__assert_fail@plt+0x1354>
   135d4:	add	r1, r0, #1
   135d8:	mov	r7, r0
   135dc:	mov	r0, r1
   135e0:	str	r1, [sp, #36]	; 0x24
   135e4:	bl	141fc <__assert_fail@plt+0x3040>
   135e8:	ldr	r3, [r4, #44]	; 0x2c
   135ec:	mov	r2, r9
   135f0:	str	r3, [sp, #16]
   135f4:	ldr	r3, [r4, #40]	; 0x28
   135f8:	stmib	sp, {r5, fp}
   135fc:	str	r3, [sp, #12]
   13600:	ldr	r3, [r4]
   13604:	ldr	r1, [sp, #36]	; 0x24
   13608:	str	r3, [sp]
   1360c:	mov	r3, sl
   13610:	str	r0, [sp, #32]
   13614:	bl	12510 <__assert_fail@plt+0x1354>
   13618:	ldr	r3, [sp, #28]
   1361c:	cmp	r6, #0
   13620:	str	r3, [r8]
   13624:	ldr	r0, [sp, #32]
   13628:	strne	r7, [r6]
   1362c:	add	sp, sp, #44	; 0x2c
   13630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13634:	andeq	r7, r2, r8, ror #5
   13638:	mov	r3, r2
   1363c:	mov	r2, #0
   13640:	b	13564 <__assert_fail@plt+0x23a8>
   13644:	push	{r4, r5, r6, r7, r8, lr}
   13648:	mov	r6, #1
   1364c:	ldr	r4, [pc, #104]	; 136bc <__assert_fail@plt+0x2500>
   13650:	ldr	r5, [r4]
   13654:	add	r7, r5, #12
   13658:	ldr	r3, [r4, #4]
   1365c:	add	r7, r7, #8
   13660:	cmp	r6, r3
   13664:	blt	136ac <__assert_fail@plt+0x24f0>
   13668:	ldr	r0, [r5, #4]
   1366c:	ldr	r6, [pc, #76]	; 136c0 <__assert_fail@plt+0x2504>
   13670:	cmp	r0, r6
   13674:	beq	13688 <__assert_fail@plt+0x24cc>
   13678:	bl	12264 <__assert_fail@plt+0x10a8>
   1367c:	mov	r3, #256	; 0x100
   13680:	str	r3, [r4, #8]
   13684:	str	r6, [r4, #12]
   13688:	ldr	r6, [pc, #52]	; 136c4 <__assert_fail@plt+0x2508>
   1368c:	cmp	r5, r6
   13690:	beq	136a0 <__assert_fail@plt+0x24e4>
   13694:	mov	r0, r5
   13698:	bl	12264 <__assert_fail@plt+0x10a8>
   1369c:	str	r6, [r4]
   136a0:	mov	r3, #1
   136a4:	str	r3, [r4, #4]
   136a8:	pop	{r4, r5, r6, r7, r8, pc}
   136ac:	ldr	r0, [r7, #-8]
   136b0:	bl	12264 <__assert_fail@plt+0x10a8>
   136b4:	add	r6, r6, #1
   136b8:	b	13658 <__assert_fail@plt+0x249c>
   136bc:	andeq	r7, r2, r0, lsr #2
   136c0:	andeq	r7, r2, r8, ror #3
   136c4:	andeq	r7, r2, r8, lsr #2
   136c8:	ldr	r3, [pc, #4]	; 136d4 <__assert_fail@plt+0x2518>
   136cc:	mvn	r2, #0
   136d0:	b	13244 <__assert_fail@plt+0x2088>
   136d4:	andeq	r7, r2, r8, ror #5
   136d8:	ldr	r3, [pc]	; 136e0 <__assert_fail@plt+0x2524>
   136dc:	b	13244 <__assert_fail@plt+0x2088>
   136e0:	andeq	r7, r2, r8, ror #5
   136e4:	mov	r1, r0
   136e8:	mov	r0, #0
   136ec:	b	136c8 <__assert_fail@plt+0x250c>
   136f0:	mov	r2, r1
   136f4:	mov	r1, r0
   136f8:	mov	r0, #0
   136fc:	b	136d8 <__assert_fail@plt+0x251c>
   13700:	push	{r4, r5, lr}
   13704:	sub	sp, sp, #52	; 0x34
   13708:	mov	r5, r2
   1370c:	mov	r4, r0
   13710:	mov	r0, sp
   13714:	bl	123cc <__assert_fail@plt+0x1210>
   13718:	mov	r3, sp
   1371c:	mvn	r2, #0
   13720:	mov	r1, r5
   13724:	mov	r0, r4
   13728:	bl	13244 <__assert_fail@plt+0x2088>
   1372c:	add	sp, sp, #52	; 0x34
   13730:	pop	{r4, r5, pc}
   13734:	push	{r4, r5, r6, lr}
   13738:	sub	sp, sp, #48	; 0x30
   1373c:	mov	r5, r2
   13740:	mov	r6, r3
   13744:	mov	r4, r0
   13748:	mov	r0, sp
   1374c:	bl	123cc <__assert_fail@plt+0x1210>
   13750:	mov	r3, sp
   13754:	mov	r2, r6
   13758:	mov	r1, r5
   1375c:	mov	r0, r4
   13760:	bl	13244 <__assert_fail@plt+0x2088>
   13764:	add	sp, sp, #48	; 0x30
   13768:	pop	{r4, r5, r6, pc}
   1376c:	mov	r2, r1
   13770:	mov	r1, r0
   13774:	mov	r0, #0
   13778:	b	13700 <__assert_fail@plt+0x2544>
   1377c:	mov	r3, r2
   13780:	mov	r2, r1
   13784:	mov	r1, r0
   13788:	mov	r0, #0
   1378c:	b	13734 <__assert_fail@plt+0x2578>
   13790:	push	{r4, r5, r6, lr}
   13794:	mov	r4, r0
   13798:	ldr	lr, [pc, #80]	; 137f0 <__assert_fail@plt+0x2634>
   1379c:	mov	r5, r1
   137a0:	mov	r6, r2
   137a4:	ldm	lr!, {r0, r1, r2, r3}
   137a8:	sub	sp, sp, #48	; 0x30
   137ac:	mov	ip, sp
   137b0:	stmia	ip!, {r0, r1, r2, r3}
   137b4:	ldm	lr!, {r0, r1, r2, r3}
   137b8:	stmia	ip!, {r0, r1, r2, r3}
   137bc:	ldm	lr, {r0, r1, r2, r3}
   137c0:	stm	ip, {r0, r1, r2, r3}
   137c4:	mov	r1, r6
   137c8:	mov	r2, #1
   137cc:	mov	r0, sp
   137d0:	bl	13450 <__assert_fail@plt+0x2294>
   137d4:	mov	r3, sp
   137d8:	mov	r2, r5
   137dc:	mov	r1, r4
   137e0:	mov	r0, #0
   137e4:	bl	13244 <__assert_fail@plt+0x2088>
   137e8:	add	sp, sp, #48	; 0x30
   137ec:	pop	{r4, r5, r6, pc}
   137f0:	andeq	r7, r2, r8, ror #5
   137f4:	mov	r2, r1
   137f8:	mvn	r1, #0
   137fc:	b	13790 <__assert_fail@plt+0x25d4>
   13800:	mov	r1, #58	; 0x3a
   13804:	b	137f4 <__assert_fail@plt+0x2638>
   13808:	mov	r2, #58	; 0x3a
   1380c:	b	13790 <__assert_fail@plt+0x25d4>
   13810:	push	{r4, r5, lr}
   13814:	sub	sp, sp, #100	; 0x64
   13818:	mov	r4, r0
   1381c:	mov	r0, sp
   13820:	mov	r5, r2
   13824:	bl	123cc <__assert_fail@plt+0x1210>
   13828:	mov	ip, sp
   1382c:	add	lr, sp, #48	; 0x30
   13830:	ldm	ip!, {r0, r1, r2, r3}
   13834:	stmia	lr!, {r0, r1, r2, r3}
   13838:	ldm	ip!, {r0, r1, r2, r3}
   1383c:	stmia	lr!, {r0, r1, r2, r3}
   13840:	ldm	ip, {r0, r1, r2, r3}
   13844:	stm	lr, {r0, r1, r2, r3}
   13848:	mov	r2, #1
   1384c:	mov	r1, #58	; 0x3a
   13850:	add	r0, sp, #48	; 0x30
   13854:	bl	13450 <__assert_fail@plt+0x2294>
   13858:	add	r3, sp, #48	; 0x30
   1385c:	mvn	r2, #0
   13860:	mov	r1, r5
   13864:	mov	r0, r4
   13868:	bl	13244 <__assert_fail@plt+0x2088>
   1386c:	add	sp, sp, #100	; 0x64
   13870:	pop	{r4, r5, pc}
   13874:	push	{r4, r5, r6, r7, lr}
   13878:	mov	r4, r0
   1387c:	ldr	lr, [pc, #84]	; 138d8 <__assert_fail@plt+0x271c>
   13880:	mov	r6, r1
   13884:	mov	r7, r2
   13888:	mov	r5, r3
   1388c:	ldm	lr!, {r0, r1, r2, r3}
   13890:	sub	sp, sp, #52	; 0x34
   13894:	mov	ip, sp
   13898:	stmia	ip!, {r0, r1, r2, r3}
   1389c:	ldm	lr!, {r0, r1, r2, r3}
   138a0:	stmia	ip!, {r0, r1, r2, r3}
   138a4:	ldm	lr, {r0, r1, r2, r3}
   138a8:	stm	ip, {r0, r1, r2, r3}
   138ac:	mov	r2, r7
   138b0:	mov	r1, r6
   138b4:	mov	r0, sp
   138b8:	bl	134ac <__assert_fail@plt+0x22f0>
   138bc:	mov	r3, sp
   138c0:	ldr	r2, [sp, #72]	; 0x48
   138c4:	mov	r1, r5
   138c8:	mov	r0, r4
   138cc:	bl	13244 <__assert_fail@plt+0x2088>
   138d0:	add	sp, sp, #52	; 0x34
   138d4:	pop	{r4, r5, r6, r7, pc}
   138d8:	andeq	r7, r2, r8, ror #5
   138dc:	mvn	ip, #0
   138e0:	push	{r0, r1, r2, lr}
   138e4:	str	ip, [sp]
   138e8:	bl	13874 <__assert_fail@plt+0x26b8>
   138ec:	add	sp, sp, #12
   138f0:	pop	{pc}		; (ldr pc, [sp], #4)
   138f4:	mov	r3, r2
   138f8:	mov	r2, r1
   138fc:	mov	r1, r0
   13900:	mov	r0, #0
   13904:	b	138dc <__assert_fail@plt+0x2720>
   13908:	push	{r0, r1, r2, lr}
   1390c:	str	r3, [sp]
   13910:	mov	r3, r2
   13914:	mov	r2, r1
   13918:	mov	r1, r0
   1391c:	mov	r0, #0
   13920:	bl	13874 <__assert_fail@plt+0x26b8>
   13924:	add	sp, sp, #12
   13928:	pop	{pc}		; (ldr pc, [sp], #4)
   1392c:	ldr	r3, [pc]	; 13934 <__assert_fail@plt+0x2778>
   13930:	b	13244 <__assert_fail@plt+0x2088>
   13934:	andeq	r7, r2, r0, lsr r1
   13938:	mov	r2, r1
   1393c:	mov	r1, r0
   13940:	mov	r0, #0
   13944:	b	1392c <__assert_fail@plt+0x2770>
   13948:	mvn	r2, #0
   1394c:	b	1392c <__assert_fail@plt+0x2770>
   13950:	mov	r1, r0
   13954:	mov	r0, #0
   13958:	b	13948 <__assert_fail@plt+0x278c>
   1395c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13960:	sub	sp, sp, #44	; 0x2c
   13964:	subs	sl, r3, #0
   13968:	ldr	r3, [sp, #80]	; 0x50
   1396c:	ldrne	r7, [sl]
   13970:	mvneq	r7, #0
   13974:	cmp	r3, #0
   13978:	ldr	r8, [r2]
   1397c:	str	r2, [sp, #12]
   13980:	ldrne	r2, [sp, #80]	; 0x50
   13984:	movne	r3, #0
   13988:	mov	r4, r1
   1398c:	strne	r3, [r2]
   13990:	ldr	r3, [sp, #84]	; 0x54
   13994:	cmp	r3, #0
   13998:	movne	r3, #0
   1399c:	ldrne	r2, [sp, #84]	; 0x54
   139a0:	strne	r3, [r2]
   139a4:	cmp	r1, #0
   139a8:	bne	13a48 <__assert_fail@plt+0x288c>
   139ac:	ldrb	r3, [r0]
   139b0:	cmp	r3, #0
   139b4:	moveq	r6, r1
   139b8:	moveq	r9, r1
   139bc:	moveq	r5, r1
   139c0:	beq	13a9c <__assert_fail@plt+0x28e0>
   139c4:	bl	1464c <__assert_fail@plt+0x3490>
   139c8:	mov	r6, r4
   139cc:	mov	r5, r0
   139d0:	ldrb	r3, [r5]
   139d4:	cmp	r3, #43	; 0x2b
   139d8:	bne	13b00 <__assert_fail@plt+0x2944>
   139dc:	adds	r1, r4, #0
   139e0:	movne	r1, #1
   139e4:	cmp	r6, #0
   139e8:	movne	r1, #0
   139ec:	cmp	r1, #0
   139f0:	movne	fp, #0
   139f4:	ldrne	r4, [pc, #532]	; 13c10 <__assert_fail@plt+0x2a54>
   139f8:	bne	13a38 <__assert_fail@plt+0x287c>
   139fc:	ldr	r3, [pc, #528]	; 13c14 <__assert_fail@plt+0x2a58>
   13a00:	mov	r2, #10
   13a04:	str	r3, [sp]
   13a08:	mov	r0, r5
   13a0c:	add	r3, sp, #16
   13a10:	bl	14774 <__assert_fail@plt+0x35b8>
   13a14:	cmp	r0, #0
   13a18:	ldrne	r4, [pc, #504]	; 13c18 <__assert_fail@plt+0x2a5c>
   13a1c:	bne	13a34 <__assert_fail@plt+0x2878>
   13a20:	ldr	r3, [sp, #16]
   13a24:	ldr	r4, [pc, #492]	; 13c18 <__assert_fail@plt+0x2a5c>
   13a28:	cmn	r3, #1
   13a2c:	movne	r8, r3
   13a30:	movne	r4, #0
   13a34:	mov	fp, #0
   13a38:	mov	r9, r5
   13a3c:	bl	11138 <endpwent@plt>
   13a40:	mov	r5, fp
   13a44:	b	13a9c <__assert_fail@plt+0x28e0>
   13a48:	subs	r6, r1, r0
   13a4c:	moveq	r5, r6
   13a50:	beq	13a68 <__assert_fail@plt+0x28ac>
   13a54:	add	r1, r6, #1
   13a58:	bl	145fc <__assert_fail@plt+0x3440>
   13a5c:	mov	r3, #0
   13a60:	mov	r5, r0
   13a64:	strb	r3, [r0, r6]
   13a68:	ldrb	r6, [r4, #1]
   13a6c:	cmp	r6, #0
   13a70:	bne	13a88 <__assert_fail@plt+0x28cc>
   13a74:	cmp	r5, #0
   13a78:	moveq	r6, r5
   13a7c:	moveq	r4, r5
   13a80:	bne	139d0 <__assert_fail@plt+0x2814>
   13a84:	b	13ba8 <__assert_fail@plt+0x29ec>
   13a88:	cmp	r5, #0
   13a8c:	add	r6, r4, #1
   13a90:	moveq	r9, r5
   13a94:	moveq	r4, r5
   13a98:	bne	139d0 <__assert_fail@plt+0x2814>
   13a9c:	adds	r3, r6, #0
   13aa0:	movne	r3, #1
   13aa4:	cmp	r4, #0
   13aa8:	movne	r3, #0
   13aac:	cmp	r3, #0
   13ab0:	beq	13b98 <__assert_fail@plt+0x29dc>
   13ab4:	ldrb	r3, [r6]
   13ab8:	cmp	r3, #43	; 0x2b
   13abc:	bne	13b70 <__assert_fail@plt+0x29b4>
   13ac0:	ldr	r3, [pc, #332]	; 13c14 <__assert_fail@plt+0x2a58>
   13ac4:	mov	r2, #10
   13ac8:	str	r3, [sp]
   13acc:	mov	r1, #0
   13ad0:	add	r3, sp, #16
   13ad4:	mov	r0, r6
   13ad8:	bl	14774 <__assert_fail@plt+0x35b8>
   13adc:	cmp	r0, #0
   13ae0:	ldrne	r4, [pc, #308]	; 13c1c <__assert_fail@plt+0x2a60>
   13ae4:	bne	13b88 <__assert_fail@plt+0x29cc>
   13ae8:	ldr	r3, [sp, #16]
   13aec:	ldr	r4, [pc, #296]	; 13c1c <__assert_fail@plt+0x2a60>
   13af0:	cmn	r3, #1
   13af4:	movne	r7, r3
   13af8:	movne	r4, #0
   13afc:	b	13b88 <__assert_fail@plt+0x29cc>
   13b00:	mov	r0, r5
   13b04:	bl	10f04 <getpwnam@plt>
   13b08:	cmp	r0, #0
   13b0c:	beq	139dc <__assert_fail@plt+0x2820>
   13b10:	cmp	r4, #0
   13b14:	clz	r3, r6
   13b18:	lsr	r3, r3, #5
   13b1c:	moveq	r3, #0
   13b20:	cmp	r3, #0
   13b24:	moveq	r4, r3
   13b28:	ldr	r8, [r0, #8]
   13b2c:	moveq	fp, r4
   13b30:	beq	13a38 <__assert_fail@plt+0x287c>
   13b34:	ldr	r7, [r0, #12]
   13b38:	mov	r0, r7
   13b3c:	bl	11198 <getgrgid@plt>
   13b40:	cmp	r0, #0
   13b44:	ldrne	r0, [r0]
   13b48:	bne	13b5c <__assert_fail@plt+0x29a0>
   13b4c:	add	r2, sp, #16
   13b50:	mov	r0, r7
   13b54:	mov	r1, #0
   13b58:	bl	122b8 <__assert_fail@plt+0x10fc>
   13b5c:	bl	1464c <__assert_fail@plt+0x3490>
   13b60:	mov	r4, #0
   13b64:	mov	fp, r0
   13b68:	bl	10ee0 <endgrent@plt>
   13b6c:	b	13a38 <__assert_fail@plt+0x287c>
   13b70:	mov	r0, r6
   13b74:	bl	111a4 <getgrnam@plt>
   13b78:	cmp	r0, #0
   13b7c:	movne	r4, #0
   13b80:	ldrne	r7, [r0, #8]
   13b84:	beq	13ac0 <__assert_fail@plt+0x2904>
   13b88:	bl	10ee0 <endgrent@plt>
   13b8c:	mov	r0, r6
   13b90:	bl	1464c <__assert_fail@plt+0x3490>
   13b94:	mov	r5, r0
   13b98:	cmp	r4, #0
   13b9c:	mov	r6, r5
   13ba0:	mov	r5, r9
   13ba4:	bne	13bd8 <__assert_fail@plt+0x2a1c>
   13ba8:	ldr	r3, [sp, #12]
   13bac:	cmp	sl, #0
   13bb0:	str	r8, [r3]
   13bb4:	ldr	r3, [sp, #80]	; 0x50
   13bb8:	strne	r7, [sl]
   13bbc:	cmp	r3, #0
   13bc0:	strne	r5, [r3]
   13bc4:	ldr	r3, [sp, #84]	; 0x54
   13bc8:	movne	r5, #0
   13bcc:	cmp	r3, #0
   13bd0:	strne	r6, [r3]
   13bd4:	movne	r6, #0
   13bd8:	mov	r0, r5
   13bdc:	bl	12264 <__assert_fail@plt+0x10a8>
   13be0:	mov	r0, r6
   13be4:	bl	12264 <__assert_fail@plt+0x10a8>
   13be8:	cmp	r4, #0
   13bec:	beq	13c04 <__assert_fail@plt+0x2a48>
   13bf0:	mov	r1, r4
   13bf4:	mov	r2, #5
   13bf8:	mov	r0, #0
   13bfc:	bl	10f94 <dcgettext@plt>
   13c00:	mov	r4, r0
   13c04:	mov	r0, r4
   13c08:	add	sp, sp, #44	; 0x2c
   13c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c10:	andeq	r6, r1, r6, lsr #1
   13c14:	andeq	r5, r1, r0, ror r9
   13c18:	muleq	r1, r9, r0
   13c1c:	strheq	r6, [r1], -r3
   13c20:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13c24:	subs	r4, r2, #0
   13c28:	mov	r6, r0
   13c2c:	mov	r8, r1
   13c30:	mov	r9, r3
   13c34:	ldr	sl, [sp, #40]	; 0x28
   13c38:	moveq	r7, r4
   13c3c:	beq	13c4c <__assert_fail@plt+0x2a90>
   13c40:	mov	r1, #58	; 0x3a
   13c44:	bl	110a8 <strchr@plt>
   13c48:	mov	r7, r0
   13c4c:	mov	r3, r4
   13c50:	stm	sp, {r9, sl}
   13c54:	mov	r2, r8
   13c58:	mov	r1, r7
   13c5c:	mov	r0, r6
   13c60:	bl	1395c <__assert_fail@plt+0x27a0>
   13c64:	adds	r3, r4, #0
   13c68:	movne	r3, #1
   13c6c:	cmp	r7, #0
   13c70:	movne	r3, #0
   13c74:	cmp	r3, #0
   13c78:	mov	r5, r0
   13c7c:	beq	13cbc <__assert_fail@plt+0x2b00>
   13c80:	cmp	r0, #0
   13c84:	beq	13cb8 <__assert_fail@plt+0x2afc>
   13c88:	mov	r1, #46	; 0x2e
   13c8c:	mov	r0, r6
   13c90:	bl	110a8 <strchr@plt>
   13c94:	subs	r1, r0, #0
   13c98:	beq	13cbc <__assert_fail@plt+0x2b00>
   13c9c:	stm	sp, {r9, sl}
   13ca0:	mov	r3, r4
   13ca4:	mov	r2, r8
   13ca8:	mov	r0, r6
   13cac:	bl	1395c <__assert_fail@plt+0x27a0>
   13cb0:	cmp	r0, #0
   13cb4:	bne	13cbc <__assert_fail@plt+0x2b00>
   13cb8:	mov	r5, #0
   13cbc:	mov	r0, r5
   13cc0:	add	sp, sp, #8
   13cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cc8:	push	{r4, r5, r6, lr}
   13ccc:	sub	sp, sp, #32
   13cd0:	cmp	r1, #0
   13cd4:	mov	r5, r0
   13cd8:	ldr	r4, [sp, #48]	; 0x30
   13cdc:	ldr	r6, [sp, #52]	; 0x34
   13ce0:	beq	13d94 <__assert_fail@plt+0x2bd8>
   13ce4:	stm	sp, {r2, r3}
   13ce8:	mov	r3, r1
   13cec:	ldr	r2, [pc, #860]	; 14050 <__assert_fail@plt+0x2e94>
   13cf0:	mov	r1, #1
   13cf4:	bl	11108 <__fprintf_chk@plt>
   13cf8:	mov	r2, #5
   13cfc:	ldr	r1, [pc, #848]	; 14054 <__assert_fail@plt+0x2e98>
   13d00:	mov	r0, #0
   13d04:	bl	10f94 <dcgettext@plt>
   13d08:	ldr	r3, [pc, #840]	; 14058 <__assert_fail@plt+0x2e9c>
   13d0c:	ldr	r2, [pc, #840]	; 1405c <__assert_fail@plt+0x2ea0>
   13d10:	str	r3, [sp]
   13d14:	mov	r1, #1
   13d18:	mov	r3, r0
   13d1c:	mov	r0, r5
   13d20:	bl	11108 <__fprintf_chk@plt>
   13d24:	mov	r1, r5
   13d28:	mov	r0, #10
   13d2c:	bl	10f88 <fputc_unlocked@plt>
   13d30:	mov	r2, #5
   13d34:	ldr	r1, [pc, #804]	; 14060 <__assert_fail@plt+0x2ea4>
   13d38:	mov	r0, #0
   13d3c:	bl	10f94 <dcgettext@plt>
   13d40:	mov	r1, #1
   13d44:	ldr	r3, [pc, #792]	; 14064 <__assert_fail@plt+0x2ea8>
   13d48:	mov	r2, r0
   13d4c:	mov	r0, r5
   13d50:	bl	11108 <__fprintf_chk@plt>
   13d54:	mov	r1, r5
   13d58:	mov	r0, #10
   13d5c:	bl	10f88 <fputc_unlocked@plt>
   13d60:	cmp	r6, #9
   13d64:	ldrls	pc, [pc, r6, lsl #2]
   13d68:	b	14044 <__assert_fail@plt+0x2e88>
   13d6c:	andeq	r3, r1, r4, lsl #29
   13d70:	andeq	r3, r1, ip, lsr #27
   13d74:	ldrdeq	r3, [r1], -r8
   13d78:	andeq	r3, r1, ip, lsl #28
   13d7c:	andeq	r3, r1, r8, asr #28
   13d80:	andeq	r3, r1, ip, lsl #29
   13d84:	ldrdeq	r3, [r1], -r4
   13d88:	andeq	r3, r1, r4, lsr #30
   13d8c:	andeq	r3, r1, ip, ror pc
   13d90:	ldrdeq	r3, [r1], -ip
   13d94:	str	r3, [sp]
   13d98:	mov	r1, #1
   13d9c:	mov	r3, r2
   13da0:	ldr	r2, [pc, #704]	; 14068 <__assert_fail@plt+0x2eac>
   13da4:	bl	11108 <__fprintf_chk@plt>
   13da8:	b	13cf8 <__assert_fail@plt+0x2b3c>
   13dac:	mov	r2, #5
   13db0:	ldr	r1, [pc, #692]	; 1406c <__assert_fail@plt+0x2eb0>
   13db4:	mov	r0, #0
   13db8:	bl	10f94 <dcgettext@plt>
   13dbc:	ldr	r3, [r4]
   13dc0:	mov	r1, #1
   13dc4:	mov	r2, r0
   13dc8:	mov	r0, r5
   13dcc:	add	sp, sp, #32
   13dd0:	pop	{r4, r5, r6, lr}
   13dd4:	b	11108 <__fprintf_chk@plt>
   13dd8:	mov	r2, #5
   13ddc:	ldr	r1, [pc, #652]	; 14070 <__assert_fail@plt+0x2eb4>
   13de0:	mov	r0, #0
   13de4:	bl	10f94 <dcgettext@plt>
   13de8:	ldr	r3, [r4, #4]
   13dec:	mov	r1, #1
   13df0:	str	r3, [sp, #48]	; 0x30
   13df4:	ldr	r3, [r4]
   13df8:	mov	r2, r0
   13dfc:	mov	r0, r5
   13e00:	add	sp, sp, #32
   13e04:	pop	{r4, r5, r6, lr}
   13e08:	b	11108 <__fprintf_chk@plt>
   13e0c:	mov	r2, #5
   13e10:	ldr	r1, [pc, #604]	; 14074 <__assert_fail@plt+0x2eb8>
   13e14:	mov	r0, #0
   13e18:	bl	10f94 <dcgettext@plt>
   13e1c:	ldr	r3, [r4, #8]
   13e20:	mov	r1, #1
   13e24:	str	r3, [sp, #52]	; 0x34
   13e28:	ldr	r3, [r4, #4]
   13e2c:	str	r3, [sp, #48]	; 0x30
   13e30:	ldr	r3, [r4]
   13e34:	mov	r2, r0
   13e38:	mov	r0, r5
   13e3c:	add	sp, sp, #32
   13e40:	pop	{r4, r5, r6, lr}
   13e44:	b	11108 <__fprintf_chk@plt>
   13e48:	mov	r2, #5
   13e4c:	ldr	r1, [pc, #548]	; 14078 <__assert_fail@plt+0x2ebc>
   13e50:	mov	r0, #0
   13e54:	bl	10f94 <dcgettext@plt>
   13e58:	ldr	r3, [r4, #12]
   13e5c:	mov	r1, #1
   13e60:	str	r3, [sp, #8]
   13e64:	ldr	r3, [r4, #8]
   13e68:	str	r3, [sp, #4]
   13e6c:	ldr	r3, [r4, #4]
   13e70:	str	r3, [sp]
   13e74:	ldr	r3, [r4]
   13e78:	mov	r2, r0
   13e7c:	mov	r0, r5
   13e80:	bl	11108 <__fprintf_chk@plt>
   13e84:	add	sp, sp, #32
   13e88:	pop	{r4, r5, r6, pc}
   13e8c:	mov	r2, #5
   13e90:	ldr	r1, [pc, #484]	; 1407c <__assert_fail@plt+0x2ec0>
   13e94:	mov	r0, #0
   13e98:	bl	10f94 <dcgettext@plt>
   13e9c:	ldr	r3, [r4, #16]
   13ea0:	mov	r1, #1
   13ea4:	str	r3, [sp, #12]
   13ea8:	ldr	r3, [r4, #12]
   13eac:	str	r3, [sp, #8]
   13eb0:	ldr	r3, [r4, #8]
   13eb4:	str	r3, [sp, #4]
   13eb8:	ldr	r3, [r4, #4]
   13ebc:	str	r3, [sp]
   13ec0:	ldr	r3, [r4]
   13ec4:	mov	r2, r0
   13ec8:	mov	r0, r5
   13ecc:	bl	11108 <__fprintf_chk@plt>
   13ed0:	b	13e84 <__assert_fail@plt+0x2cc8>
   13ed4:	mov	r2, #5
   13ed8:	ldr	r1, [pc, #416]	; 14080 <__assert_fail@plt+0x2ec4>
   13edc:	mov	r0, #0
   13ee0:	bl	10f94 <dcgettext@plt>
   13ee4:	ldr	r3, [r4, #20]
   13ee8:	mov	r1, #1
   13eec:	str	r3, [sp, #16]
   13ef0:	ldr	r3, [r4, #16]
   13ef4:	str	r3, [sp, #12]
   13ef8:	ldr	r3, [r4, #12]
   13efc:	str	r3, [sp, #8]
   13f00:	ldr	r3, [r4, #8]
   13f04:	str	r3, [sp, #4]
   13f08:	ldr	r3, [r4, #4]
   13f0c:	str	r3, [sp]
   13f10:	ldr	r3, [r4]
   13f14:	mov	r2, r0
   13f18:	mov	r0, r5
   13f1c:	bl	11108 <__fprintf_chk@plt>
   13f20:	b	13e84 <__assert_fail@plt+0x2cc8>
   13f24:	mov	r2, #5
   13f28:	ldr	r1, [pc, #340]	; 14084 <__assert_fail@plt+0x2ec8>
   13f2c:	mov	r0, #0
   13f30:	bl	10f94 <dcgettext@plt>
   13f34:	ldr	r3, [r4, #24]
   13f38:	mov	r1, #1
   13f3c:	str	r3, [sp, #20]
   13f40:	ldr	r3, [r4, #20]
   13f44:	str	r3, [sp, #16]
   13f48:	ldr	r3, [r4, #16]
   13f4c:	str	r3, [sp, #12]
   13f50:	ldr	r3, [r4, #12]
   13f54:	str	r3, [sp, #8]
   13f58:	ldr	r3, [r4, #8]
   13f5c:	str	r3, [sp, #4]
   13f60:	ldr	r3, [r4, #4]
   13f64:	str	r3, [sp]
   13f68:	ldr	r3, [r4]
   13f6c:	mov	r2, r0
   13f70:	mov	r0, r5
   13f74:	bl	11108 <__fprintf_chk@plt>
   13f78:	b	13e84 <__assert_fail@plt+0x2cc8>
   13f7c:	mov	r2, #5
   13f80:	ldr	r1, [pc, #256]	; 14088 <__assert_fail@plt+0x2ecc>
   13f84:	mov	r0, #0
   13f88:	bl	10f94 <dcgettext@plt>
   13f8c:	ldr	r3, [r4, #28]
   13f90:	mov	r1, #1
   13f94:	str	r3, [sp, #24]
   13f98:	ldr	r3, [r4, #24]
   13f9c:	str	r3, [sp, #20]
   13fa0:	ldr	r3, [r4, #20]
   13fa4:	str	r3, [sp, #16]
   13fa8:	ldr	r3, [r4, #16]
   13fac:	str	r3, [sp, #12]
   13fb0:	ldr	r3, [r4, #12]
   13fb4:	str	r3, [sp, #8]
   13fb8:	ldr	r3, [r4, #8]
   13fbc:	str	r3, [sp, #4]
   13fc0:	ldr	r3, [r4, #4]
   13fc4:	str	r3, [sp]
   13fc8:	ldr	r3, [r4]
   13fcc:	mov	r2, r0
   13fd0:	mov	r0, r5
   13fd4:	bl	11108 <__fprintf_chk@plt>
   13fd8:	b	13e84 <__assert_fail@plt+0x2cc8>
   13fdc:	ldr	r1, [pc, #168]	; 1408c <__assert_fail@plt+0x2ed0>
   13fe0:	mov	r2, #5
   13fe4:	mov	r0, #0
   13fe8:	bl	10f94 <dcgettext@plt>
   13fec:	ldr	r3, [r4, #32]
   13ff0:	mov	r1, #1
   13ff4:	str	r3, [sp, #28]
   13ff8:	ldr	r3, [r4, #28]
   13ffc:	str	r3, [sp, #24]
   14000:	ldr	r3, [r4, #24]
   14004:	str	r3, [sp, #20]
   14008:	ldr	r3, [r4, #20]
   1400c:	str	r3, [sp, #16]
   14010:	ldr	r3, [r4, #16]
   14014:	str	r3, [sp, #12]
   14018:	ldr	r3, [r4, #12]
   1401c:	str	r3, [sp, #8]
   14020:	ldr	r3, [r4, #8]
   14024:	str	r3, [sp, #4]
   14028:	ldr	r3, [r4, #4]
   1402c:	str	r3, [sp]
   14030:	ldr	r3, [r4]
   14034:	mov	r2, r0
   14038:	mov	r0, r5
   1403c:	bl	11108 <__fprintf_chk@plt>
   14040:	b	13e84 <__assert_fail@plt+0x2cc8>
   14044:	mov	r2, #5
   14048:	ldr	r1, [pc, #64]	; 14090 <__assert_fail@plt+0x2ed4>
   1404c:	b	13fe4 <__assert_fail@plt+0x2e28>
   14050:	andeq	r6, r1, r1, asr #1
   14054:	ldrdeq	r6, [r1], -r4
   14058:	andeq	r0, r0, r6, ror #15
   1405c:	andeq	r6, r1, r2, lsr #7
   14060:	ldrdeq	r6, [r1], -r8
   14064:	andeq	r6, r1, r3, lsl #3
   14068:	andeq	r6, r1, sp, asr #1
   1406c:	andeq	r6, r1, r5, lsr #3
   14070:			; <UNDEFINED> instruction: 0x000161b5
   14074:	andeq	r6, r1, ip, asr #3
   14078:	andeq	r6, r1, r8, ror #3
   1407c:	andeq	r6, r1, r8, lsl #4
   14080:	andeq	r6, r1, ip, lsr #4
   14084:	andeq	r6, r1, r4, asr r2
   14088:	andeq	r6, r1, r0, lsl #5
   1408c:			; <UNDEFINED> instruction: 0x000162b0
   14090:	andeq	r6, r1, r4, ror #5
   14094:	push	{r0, r1, r4, lr}
   14098:	mov	ip, #0
   1409c:	ldr	lr, [sp, #16]
   140a0:	ldr	r4, [lr, ip, lsl #2]
   140a4:	cmp	r4, #0
   140a8:	bne	140c0 <__assert_fail@plt+0x2f04>
   140ac:	str	ip, [sp, #4]
   140b0:	str	lr, [sp]
   140b4:	bl	13cc8 <__assert_fail@plt+0x2b0c>
   140b8:	add	sp, sp, #8
   140bc:	pop	{r4, pc}
   140c0:	add	ip, ip, #1
   140c4:	b	140a0 <__assert_fail@plt+0x2ee4>
   140c8:	push	{r4, r5, lr}
   140cc:	sub	sp, sp, #52	; 0x34
   140d0:	mov	ip, #0
   140d4:	ldr	r5, [sp, #64]	; 0x40
   140d8:	add	lr, sp, #8
   140dc:	ldr	r4, [r5, ip, lsl #2]
   140e0:	cmp	r4, #0
   140e4:	str	r4, [lr, ip, lsl #2]
   140e8:	beq	140f8 <__assert_fail@plt+0x2f3c>
   140ec:	add	ip, ip, #1
   140f0:	cmp	ip, #10
   140f4:	bne	140dc <__assert_fail@plt+0x2f20>
   140f8:	str	ip, [sp, #4]
   140fc:	str	lr, [sp]
   14100:	bl	13cc8 <__assert_fail@plt+0x2b0c>
   14104:	add	sp, sp, #52	; 0x34
   14108:	pop	{r4, r5, pc}
   1410c:	push	{r3}		; (str r3, [sp, #-4]!)
   14110:	push	{r0, r1, r2, r3, lr}
   14114:	add	r3, sp, #24
   14118:	str	r3, [sp, #12]
   1411c:	str	r3, [sp]
   14120:	ldr	r3, [sp, #20]
   14124:	bl	140c8 <__assert_fail@plt+0x2f0c>
   14128:	add	sp, sp, #16
   1412c:	pop	{lr}		; (ldr lr, [sp], #4)
   14130:	add	sp, sp, #4
   14134:	bx	lr
   14138:	ldr	r3, [pc, #116]	; 141b4 <__assert_fail@plt+0x2ff8>
   1413c:	push	{r4, lr}
   14140:	mov	r0, #10
   14144:	ldr	r1, [r3]
   14148:	bl	10f88 <fputc_unlocked@plt>
   1414c:	mov	r2, #5
   14150:	ldr	r1, [pc, #96]	; 141b8 <__assert_fail@plt+0x2ffc>
   14154:	mov	r0, #0
   14158:	bl	10f94 <dcgettext@plt>
   1415c:	ldr	r2, [pc, #88]	; 141bc <__assert_fail@plt+0x3000>
   14160:	mov	r1, r0
   14164:	mov	r0, #1
   14168:	bl	110f0 <__printf_chk@plt>
   1416c:	mov	r2, #5
   14170:	ldr	r1, [pc, #72]	; 141c0 <__assert_fail@plt+0x3004>
   14174:	mov	r0, #0
   14178:	bl	10f94 <dcgettext@plt>
   1417c:	ldr	r3, [pc, #64]	; 141c4 <__assert_fail@plt+0x3008>
   14180:	ldr	r2, [pc, #64]	; 141c8 <__assert_fail@plt+0x300c>
   14184:	mov	r1, r0
   14188:	mov	r0, #1
   1418c:	bl	110f0 <__printf_chk@plt>
   14190:	mov	r2, #5
   14194:	ldr	r1, [pc, #48]	; 141cc <__assert_fail@plt+0x3010>
   14198:	mov	r0, #0
   1419c:	bl	10f94 <dcgettext@plt>
   141a0:	ldr	r2, [pc, #40]	; 141d0 <__assert_fail@plt+0x3014>
   141a4:	pop	{r4, lr}
   141a8:	mov	r1, r0
   141ac:	mov	r0, #1
   141b0:	b	110f0 <__printf_chk@plt>
   141b4:	andeq	r7, r2, r4, ror r1
   141b8:	andeq	r6, r1, r0, lsr #6
   141bc:	andeq	r6, r1, r4, lsr r3
   141c0:	andeq	r6, r1, sl, asr #6
   141c4:	andeq	r5, r1, fp, lsr ip
   141c8:	andeq	r5, r1, r3, ror #24
   141cc:	andeq	r6, r1, lr, asr r3
   141d0:	andeq	r6, r1, r5, lsl #7
   141d4:	push	{r4, lr}
   141d8:	bl	14ae0 <__assert_fail@plt+0x3924>
   141dc:	cmp	r0, #0
   141e0:	popne	{r4, pc}
   141e4:	bl	14668 <__assert_fail@plt+0x34ac>
   141e8:	push	{r4, lr}
   141ec:	bl	14ae0 <__assert_fail@plt+0x3924>
   141f0:	cmp	r0, #0
   141f4:	popne	{r4, pc}
   141f8:	bl	14668 <__assert_fail@plt+0x34ac>
   141fc:	b	141d4 <__assert_fail@plt+0x3018>
   14200:	push	{r4, r5, r6, lr}
   14204:	mov	r5, r0
   14208:	mov	r4, r1
   1420c:	bl	14b20 <__assert_fail@plt+0x3964>
   14210:	cmp	r0, #0
   14214:	popne	{r4, r5, r6, pc}
   14218:	adds	r4, r4, #0
   1421c:	movne	r4, #1
   14220:	cmp	r5, #0
   14224:	orreq	r4, r4, #1
   14228:	cmp	r4, #0
   1422c:	popeq	{r4, r5, r6, pc}
   14230:	bl	14668 <__assert_fail@plt+0x34ac>
   14234:	push	{r4, lr}
   14238:	cmp	r1, #0
   1423c:	orreq	r1, r1, #1
   14240:	bl	14b20 <__assert_fail@plt+0x3964>
   14244:	cmp	r0, #0
   14248:	popne	{r4, pc}
   1424c:	bl	14668 <__assert_fail@plt+0x34ac>
   14250:	push	{r4, r5, r6, lr}
   14254:	mov	r6, r0
   14258:	mov	r5, r1
   1425c:	mov	r4, r2
   14260:	bl	14fcc <__assert_fail@plt+0x3e10>
   14264:	cmp	r0, #0
   14268:	popne	{r4, r5, r6, pc}
   1426c:	cmp	r6, #0
   14270:	beq	14280 <__assert_fail@plt+0x30c4>
   14274:	cmp	r5, #0
   14278:	cmpne	r4, #0
   1427c:	popeq	{r4, r5, r6, pc}
   14280:	bl	14668 <__assert_fail@plt+0x34ac>
   14284:	b	14250 <__assert_fail@plt+0x3094>
   14288:	cmp	r2, #0
   1428c:	cmpne	r1, #0
   14290:	moveq	r2, #1
   14294:	moveq	r1, r2
   14298:	push	{r4, lr}
   1429c:	bl	14fcc <__assert_fail@plt+0x3e10>
   142a0:	cmp	r0, #0
   142a4:	popne	{r4, pc}
   142a8:	bl	14668 <__assert_fail@plt+0x34ac>
   142ac:	mov	r2, r1
   142b0:	mov	r1, r0
   142b4:	mov	r0, #0
   142b8:	b	14250 <__assert_fail@plt+0x3094>
   142bc:	mov	r2, r1
   142c0:	mov	r1, r0
   142c4:	mov	r0, #0
   142c8:	b	14288 <__assert_fail@plt+0x30cc>
   142cc:	push	{r4, r5, r6, r7, r8, lr}
   142d0:	subs	r7, r0, #0
   142d4:	mov	r5, r1
   142d8:	mov	r6, r2
   142dc:	ldr	r4, [r1]
   142e0:	bne	1431c <__assert_fail@plt+0x3160>
   142e4:	cmp	r4, #0
   142e8:	bne	14304 <__assert_fail@plt+0x3148>
   142ec:	mov	r1, r2
   142f0:	mov	r0, #64	; 0x40
   142f4:	bl	150f8 <__assert_fail@plt+0x3f3c>
   142f8:	cmp	r0, #0
   142fc:	movne	r4, r0
   14300:	addeq	r4, r0, #1
   14304:	mov	r2, r6
   14308:	mov	r1, r4
   1430c:	mov	r0, r7
   14310:	bl	14250 <__assert_fail@plt+0x3094>
   14314:	str	r4, [r5]
   14318:	pop	{r4, r5, r6, r7, r8, pc}
   1431c:	lsr	r2, r4, #1
   14320:	add	r3, r2, #1
   14324:	mvn	r3, r3
   14328:	cmp	r4, r3
   1432c:	addls	r4, r4, #1
   14330:	addls	r4, r4, r2
   14334:	bls	14304 <__assert_fail@plt+0x3148>
   14338:	bl	14668 <__assert_fail@plt+0x34ac>
   1433c:	mov	r2, #1
   14340:	b	142cc <__assert_fail@plt+0x3110>
   14344:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14348:	mov	sl, r0
   1434c:	ldr	r8, [r1]
   14350:	mov	fp, r1
   14354:	mov	r5, r2
   14358:	asrs	r4, r8, #1
   1435c:	mov	r9, r3
   14360:	ldr	r7, [sp, #48]	; 0x30
   14364:	bpl	14400 <__assert_fail@plt+0x3244>
   14368:	rsb	r2, r4, #-2147483648	; 0x80000000
   1436c:	cmp	r8, r2
   14370:	movge	r2, #0
   14374:	movlt	r2, #1
   14378:	mvn	r3, r9
   1437c:	cmp	r2, #0
   14380:	lsr	r3, r3, #31
   14384:	addeq	r4, r4, r8
   14388:	mvnne	r4, #-2147483648	; 0x80000000
   1438c:	mov	r0, r3
   14390:	cmp	r9, r4
   14394:	movge	r0, #0
   14398:	andlt	r0, r0, #1
   1439c:	cmp	r0, #0
   143a0:	str	r3, [sp, #4]
   143a4:	bne	14574 <__assert_fail@plt+0x33b8>
   143a8:	cmp	r7, #0
   143ac:	bge	144c0 <__assert_fail@plt+0x3304>
   143b0:	cmp	r4, #0
   143b4:	bge	14418 <__assert_fail@plt+0x325c>
   143b8:	mov	r1, r7
   143bc:	mvn	r0, #-2147483648	; 0x80000000
   143c0:	bl	15304 <__assert_fail@plt+0x4148>
   143c4:	cmp	r0, r4
   143c8:	movle	r0, #0
   143cc:	movgt	r0, #1
   143d0:	cmp	r0, #0
   143d4:	mvnne	r6, #-2147483648	; 0x80000000
   143d8:	beq	14428 <__assert_fail@plt+0x326c>
   143dc:	mov	r1, r7
   143e0:	mov	r0, r6
   143e4:	bl	15304 <__assert_fail@plt+0x4148>
   143e8:	mov	r1, r7
   143ec:	mov	r4, r0
   143f0:	mov	r0, r6
   143f4:	bl	15524 <__assert_fail@plt+0x4368>
   143f8:	sub	r1, r6, r1
   143fc:	b	14438 <__assert_fail@plt+0x327c>
   14400:	mvn	r2, #-2147483648	; 0x80000000
   14404:	sub	r2, r2, r4
   14408:	cmp	r8, r2
   1440c:	movle	r2, #0
   14410:	movgt	r2, #1
   14414:	b	14378 <__assert_fail@plt+0x31bc>
   14418:	cmn	r7, #1
   1441c:	movne	r1, r7
   14420:	movne	r0, #-2147483648	; 0x80000000
   14424:	bne	1458c <__assert_fail@plt+0x33d0>
   14428:	mul	r1, r7, r4
   1442c:	cmp	r1, #63	; 0x3f
   14430:	movle	r6, #64	; 0x40
   14434:	ble	143dc <__assert_fail@plt+0x3220>
   14438:	cmp	sl, #0
   1443c:	sub	r2, r4, r8
   14440:	streq	sl, [fp]
   14444:	cmp	r2, r5
   14448:	bge	1451c <__assert_fail@plt+0x3360>
   1444c:	cmp	r5, #0
   14450:	bge	144e8 <__assert_fail@plt+0x332c>
   14454:	rsb	r2, r5, #-2147483648	; 0x80000000
   14458:	cmp	r8, r2
   1445c:	movge	r2, #0
   14460:	movlt	r2, #1
   14464:	cmp	r2, #0
   14468:	bne	144bc <__assert_fail@plt+0x3300>
   1446c:	ldr	r0, [sp, #4]
   14470:	add	r5, r8, r5
   14474:	cmp	r9, r5
   14478:	movge	r0, #0
   1447c:	andlt	r0, r0, #1
   14480:	cmp	r0, #0
   14484:	mov	r4, r5
   14488:	bne	144bc <__assert_fail@plt+0x3300>
   1448c:	cmp	r7, #0
   14490:	bge	14530 <__assert_fail@plt+0x3374>
   14494:	cmp	r5, #0
   14498:	bge	14508 <__assert_fail@plt+0x334c>
   1449c:	mov	r1, r7
   144a0:	mvn	r0, #-2147483648	; 0x80000000
   144a4:	bl	15304 <__assert_fail@plt+0x4148>
   144a8:	cmp	r5, r0
   144ac:	movge	r0, #0
   144b0:	movlt	r0, #1
   144b4:	cmp	r0, #0
   144b8:	beq	14518 <__assert_fail@plt+0x335c>
   144bc:	bl	14668 <__assert_fail@plt+0x34ac>
   144c0:	beq	14428 <__assert_fail@plt+0x326c>
   144c4:	cmp	r4, #0
   144c8:	bge	14584 <__assert_fail@plt+0x33c8>
   144cc:	cmn	r4, #1
   144d0:	beq	14428 <__assert_fail@plt+0x326c>
   144d4:	mov	r1, r4
   144d8:	mov	r0, #-2147483648	; 0x80000000
   144dc:	bl	15304 <__assert_fail@plt+0x4148>
   144e0:	cmp	r7, r0
   144e4:	b	143c8 <__assert_fail@plt+0x320c>
   144e8:	cmp	r8, #0
   144ec:	blt	1446c <__assert_fail@plt+0x32b0>
   144f0:	mvn	r2, #-2147483648	; 0x80000000
   144f4:	sub	r2, r2, r5
   144f8:	cmp	r8, r2
   144fc:	movle	r2, #0
   14500:	movgt	r2, #1
   14504:	b	14464 <__assert_fail@plt+0x32a8>
   14508:	cmn	r7, #1
   1450c:	movne	r1, r7
   14510:	movne	r0, #-2147483648	; 0x80000000
   14514:	bne	14568 <__assert_fail@plt+0x33ac>
   14518:	mul	r1, r5, r7
   1451c:	mov	r0, sl
   14520:	bl	14200 <__assert_fail@plt+0x3044>
   14524:	str	r4, [fp]
   14528:	add	sp, sp, #12
   1452c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14530:	beq	14518 <__assert_fail@plt+0x335c>
   14534:	cmp	r5, #0
   14538:	movge	r1, r7
   1453c:	mvnge	r0, #-2147483648	; 0x80000000
   14540:	bge	14568 <__assert_fail@plt+0x33ac>
   14544:	cmn	r5, #1
   14548:	beq	14518 <__assert_fail@plt+0x335c>
   1454c:	mov	r1, r5
   14550:	mov	r0, #-2147483648	; 0x80000000
   14554:	bl	15304 <__assert_fail@plt+0x4148>
   14558:	cmp	r7, r0
   1455c:	movle	r0, #0
   14560:	movgt	r0, #1
   14564:	b	144b4 <__assert_fail@plt+0x32f8>
   14568:	bl	15304 <__assert_fail@plt+0x4148>
   1456c:	cmp	r5, r0
   14570:	b	1455c <__assert_fail@plt+0x33a0>
   14574:	cmp	r7, #0
   14578:	mov	r4, r9
   1457c:	blt	14418 <__assert_fail@plt+0x325c>
   14580:	beq	14428 <__assert_fail@plt+0x326c>
   14584:	mov	r1, r7
   14588:	mvn	r0, #-2147483648	; 0x80000000
   1458c:	bl	15304 <__assert_fail@plt+0x4148>
   14590:	cmp	r0, r4
   14594:	movge	r0, #0
   14598:	movlt	r0, #1
   1459c:	b	143d0 <__assert_fail@plt+0x3214>
   145a0:	push	{r4, lr}
   145a4:	bl	14a98 <__assert_fail@plt+0x38dc>
   145a8:	cmp	r0, #0
   145ac:	popne	{r4, pc}
   145b0:	bl	14668 <__assert_fail@plt+0x34ac>
   145b4:	mov	r1, #1
   145b8:	b	145a0 <__assert_fail@plt+0x33e4>
   145bc:	push	{r4, lr}
   145c0:	bl	14a98 <__assert_fail@plt+0x38dc>
   145c4:	cmp	r0, #0
   145c8:	popne	{r4, pc}
   145cc:	bl	14668 <__assert_fail@plt+0x34ac>
   145d0:	mov	r1, #1
   145d4:	b	145bc <__assert_fail@plt+0x3400>
   145d8:	push	{r4, r5, r6, lr}
   145dc:	mov	r4, r1
   145e0:	mov	r5, r0
   145e4:	mov	r0, r1
   145e8:	bl	141d4 <__assert_fail@plt+0x3018>
   145ec:	mov	r2, r4
   145f0:	mov	r1, r5
   145f4:	pop	{r4, r5, r6, lr}
   145f8:	b	10f64 <memcpy@plt>
   145fc:	push	{r4, r5, r6, lr}
   14600:	mov	r4, r1
   14604:	mov	r5, r0
   14608:	mov	r0, r1
   1460c:	bl	141e8 <__assert_fail@plt+0x302c>
   14610:	mov	r2, r4
   14614:	mov	r1, r5
   14618:	pop	{r4, r5, r6, lr}
   1461c:	b	10f64 <memcpy@plt>
   14620:	push	{r4, r5, r6, lr}
   14624:	mov	r5, r0
   14628:	add	r0, r1, #1
   1462c:	mov	r4, r1
   14630:	bl	141e8 <__assert_fail@plt+0x302c>
   14634:	mov	r2, #0
   14638:	mov	r1, r5
   1463c:	strb	r2, [r0, r4]
   14640:	mov	r2, r4
   14644:	pop	{r4, r5, r6, lr}
   14648:	b	10f64 <memcpy@plt>
   1464c:	push	{r4, lr}
   14650:	mov	r4, r0
   14654:	bl	1109c <strlen@plt>
   14658:	add	r1, r0, #1
   1465c:	mov	r0, r4
   14660:	pop	{r4, lr}
   14664:	b	145d8 <__assert_fail@plt+0x341c>
   14668:	ldr	r3, [pc, #44]	; 1469c <__assert_fail@plt+0x34e0>
   1466c:	push	{r4, lr}
   14670:	mov	r2, #5
   14674:	ldr	r1, [pc, #36]	; 146a0 <__assert_fail@plt+0x34e4>
   14678:	mov	r0, #0
   1467c:	ldr	r4, [r3]
   14680:	bl	10f94 <dcgettext@plt>
   14684:	ldr	r2, [pc, #24]	; 146a4 <__assert_fail@plt+0x34e8>
   14688:	mov	r1, #0
   1468c:	mov	r3, r0
   14690:	mov	r0, r4
   14694:	bl	11024 <error@plt>
   14698:	bl	1118c <abort@plt>
   1469c:	andeq	r7, r2, ip, lsl r1
   146a0:	ldrdeq	r6, [r1], -r1
   146a4:	muleq	r1, fp, pc	; <UNPREDICTABLE>
   146a8:	push	{r4, lr}
   146ac:	bl	14e34 <__assert_fail@plt+0x3c78>
   146b0:	cmn	r0, #1
   146b4:	mov	r4, r0
   146b8:	bne	146d0 <__assert_fail@plt+0x3514>
   146bc:	bl	110b4 <__errno_location@plt>
   146c0:	ldr	r3, [r0]
   146c4:	cmp	r3, #12
   146c8:	bne	146d0 <__assert_fail@plt+0x3514>
   146cc:	bl	14668 <__assert_fail@plt+0x34ac>
   146d0:	mov	r0, r4
   146d4:	pop	{r4, pc}
   146d8:	push	{r4, r5, r6, lr}
   146dc:	subs	r5, r1, #0
   146e0:	mov	r4, r0
   146e4:	bge	14714 <__assert_fail@plt+0x3558>
   146e8:	ldr	r0, [r0]
   146ec:	adds	r0, r0, #0
   146f0:	movne	r0, #1
   146f4:	cmp	r0, #0
   146f8:	mvnne	r3, #0
   146fc:	ldreq	r3, [r4]
   14700:	strne	r3, [r4]
   14704:	movne	r0, #1
   14708:	muleq	r5, r5, r3
   1470c:	streq	r5, [r4]
   14710:	pop	{r4, r5, r6, pc}
   14714:	moveq	r0, r5
   14718:	beq	146f4 <__assert_fail@plt+0x3538>
   1471c:	mvn	r0, #0
   14720:	bl	150f8 <__assert_fail@plt+0x3f3c>
   14724:	ldr	r3, [r4]
   14728:	cmp	r0, r3
   1472c:	movcs	r0, #0
   14730:	movcc	r0, #1
   14734:	b	146f4 <__assert_fail@plt+0x3538>
   14738:	push	{r4, r5, r6, r7, r8, lr}
   1473c:	mov	r6, r0
   14740:	mov	r7, r1
   14744:	mov	r5, r2
   14748:	mov	r4, #0
   1474c:	cmp	r5, #0
   14750:	bne	1475c <__assert_fail@plt+0x35a0>
   14754:	mov	r0, r4
   14758:	pop	{r4, r5, r6, r7, r8, pc}
   1475c:	mov	r1, r7
   14760:	mov	r0, r6
   14764:	bl	146d8 <__assert_fail@plt+0x351c>
   14768:	sub	r5, r5, #1
   1476c:	orr	r4, r4, r0
   14770:	b	1474c <__assert_fail@plt+0x3590>
   14774:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14778:	cmp	r2, #36	; 0x24
   1477c:	ldr	r9, [sp, #48]	; 0x30
   14780:	bls	14798 <__assert_fail@plt+0x35dc>
   14784:	ldr	r3, [pc, #768]	; 14a8c <__assert_fail@plt+0x38d0>
   14788:	mov	r2, #85	; 0x55
   1478c:	ldr	r1, [pc, #764]	; 14a90 <__assert_fail@plt+0x38d4>
   14790:	ldr	r0, [pc, #764]	; 14a94 <__assert_fail@plt+0x38d8>
   14794:	bl	111bc <__assert_fail@plt>
   14798:	cmp	r1, #0
   1479c:	mov	r7, r1
   147a0:	mov	r4, r0
   147a4:	mov	fp, r2
   147a8:	mov	r8, r3
   147ac:	moveq	r7, sp
   147b0:	bl	110b4 <__errno_location@plt>
   147b4:	mov	r3, #0
   147b8:	str	r3, [r0]
   147bc:	mov	sl, r0
   147c0:	bl	11078 <__ctype_b_loc@plt>
   147c4:	ldrb	r6, [r4]
   147c8:	mov	r3, r4
   147cc:	ldr	r1, [r0]
   147d0:	lsl	r2, r6, #1
   147d4:	ldrh	r5, [r1, r2]
   147d8:	ands	r5, r5, #8192	; 0x2000
   147dc:	bne	147f8 <__assert_fail@plt+0x363c>
   147e0:	cmp	r6, #45	; 0x2d
   147e4:	bne	14800 <__assert_fail@plt+0x3644>
   147e8:	mov	r5, #4
   147ec:	mov	r0, r5
   147f0:	add	sp, sp, #12
   147f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f8:	ldrb	r6, [r3, #1]!
   147fc:	b	147d0 <__assert_fail@plt+0x3614>
   14800:	mov	r2, fp
   14804:	mov	r1, r7
   14808:	mov	r0, r4
   1480c:	bl	11090 <strtoul@plt>
   14810:	ldr	r6, [r7]
   14814:	cmp	r4, r6
   14818:	str	r0, [sp, #4]
   1481c:	bne	1487c <__assert_fail@plt+0x36c0>
   14820:	cmp	r9, #0
   14824:	beq	147e8 <__assert_fail@plt+0x362c>
   14828:	ldrb	r1, [r6]
   1482c:	cmp	r1, #0
   14830:	beq	147e8 <__assert_fail@plt+0x362c>
   14834:	mov	r0, r9
   14838:	bl	110a8 <strchr@plt>
   1483c:	cmp	r0, #0
   14840:	movne	r3, #1
   14844:	strne	r3, [sp, #4]
   14848:	beq	147e8 <__assert_fail@plt+0x362c>
   1484c:	ldrb	r4, [r6]
   14850:	cmp	r4, #0
   14854:	beq	1498c <__assert_fail@plt+0x37d0>
   14858:	mov	r1, r4
   1485c:	mov	r0, r9
   14860:	bl	110a8 <strchr@plt>
   14864:	cmp	r0, #0
   14868:	bne	148a4 <__assert_fail@plt+0x36e8>
   1486c:	ldr	r3, [sp, #4]
   14870:	orr	r5, r5, #2
   14874:	str	r3, [r8]
   14878:	b	147ec <__assert_fail@plt+0x3630>
   1487c:	ldr	r5, [sl]
   14880:	cmp	r5, #0
   14884:	beq	14894 <__assert_fail@plt+0x36d8>
   14888:	cmp	r5, #34	; 0x22
   1488c:	bne	147e8 <__assert_fail@plt+0x362c>
   14890:	mov	r5, #1
   14894:	cmp	r9, #0
   14898:	streq	r0, [r8]
   1489c:	bne	1484c <__assert_fail@plt+0x3690>
   148a0:	b	147ec <__assert_fail@plt+0x3630>
   148a4:	cmp	r4, #84	; 0x54
   148a8:	beq	148fc <__assert_fail@plt+0x3740>
   148ac:	bhi	148e4 <__assert_fail@plt+0x3728>
   148b0:	cmp	r4, #75	; 0x4b
   148b4:	beq	148fc <__assert_fail@plt+0x3740>
   148b8:	bhi	148d4 <__assert_fail@plt+0x3718>
   148bc:	cmp	r4, #69	; 0x45
   148c0:	beq	148fc <__assert_fail@plt+0x3740>
   148c4:	cmp	r4, #71	; 0x47
   148c8:	beq	148fc <__assert_fail@plt+0x3740>
   148cc:	mov	r6, #1
   148d0:	b	149c0 <__assert_fail@plt+0x3804>
   148d4:	cmp	r4, #77	; 0x4d
   148d8:	beq	148fc <__assert_fail@plt+0x3740>
   148dc:	cmp	r4, #80	; 0x50
   148e0:	b	148c8 <__assert_fail@plt+0x370c>
   148e4:	cmp	r4, #103	; 0x67
   148e8:	beq	148fc <__assert_fail@plt+0x3740>
   148ec:	bhi	14998 <__assert_fail@plt+0x37dc>
   148f0:	sub	r3, r4, #89	; 0x59
   148f4:	cmp	r3, #1
   148f8:	bhi	148cc <__assert_fail@plt+0x3710>
   148fc:	mov	r1, #48	; 0x30
   14900:	mov	r0, r9
   14904:	bl	110a8 <strchr@plt>
   14908:	cmp	r0, #0
   1490c:	beq	148cc <__assert_fail@plt+0x3710>
   14910:	ldrb	r3, [r6, #1]
   14914:	cmp	r3, #68	; 0x44
   14918:	beq	1492c <__assert_fail@plt+0x3770>
   1491c:	cmp	r3, #105	; 0x69
   14920:	beq	149b0 <__assert_fail@plt+0x37f4>
   14924:	cmp	r3, #66	; 0x42
   14928:	bne	148cc <__assert_fail@plt+0x3710>
   1492c:	mov	r6, #2
   14930:	mov	r1, #1000	; 0x3e8
   14934:	cmp	r4, #89	; 0x59
   14938:	beq	14a7c <__assert_fail@plt+0x38c0>
   1493c:	bhi	149e8 <__assert_fail@plt+0x382c>
   14940:	cmp	r4, #75	; 0x4b
   14944:	beq	14a28 <__assert_fail@plt+0x386c>
   14948:	bhi	149c8 <__assert_fail@plt+0x380c>
   1494c:	cmp	r4, #69	; 0x45
   14950:	beq	14a50 <__assert_fail@plt+0x3894>
   14954:	cmp	r4, #71	; 0x47
   14958:	beq	14a5c <__assert_fail@plt+0x38a0>
   1495c:	cmp	r4, #66	; 0x42
   14960:	moveq	r1, #1024	; 0x400
   14964:	bne	1486c <__assert_fail@plt+0x36b0>
   14968:	add	r0, sp, #4
   1496c:	bl	146d8 <__assert_fail@plt+0x351c>
   14970:	ldr	r3, [r7]
   14974:	orr	r5, r5, r0
   14978:	add	r2, r3, r6
   1497c:	str	r2, [r7]
   14980:	ldrb	r3, [r3, r6]
   14984:	cmp	r3, #0
   14988:	orrne	r5, r5, #2
   1498c:	ldr	r3, [sp, #4]
   14990:	str	r3, [r8]
   14994:	b	147ec <__assert_fail@plt+0x3630>
   14998:	cmp	r4, #109	; 0x6d
   1499c:	beq	148fc <__assert_fail@plt+0x3740>
   149a0:	cmp	r4, #116	; 0x74
   149a4:	beq	148fc <__assert_fail@plt+0x3740>
   149a8:	cmp	r4, #107	; 0x6b
   149ac:	b	148c8 <__assert_fail@plt+0x370c>
   149b0:	ldrb	r6, [r6, #2]
   149b4:	cmp	r6, #66	; 0x42
   149b8:	movne	r6, #1
   149bc:	moveq	r6, #3
   149c0:	mov	r1, #1024	; 0x400
   149c4:	b	14934 <__assert_fail@plt+0x3778>
   149c8:	cmp	r4, #80	; 0x50
   149cc:	beq	14a64 <__assert_fail@plt+0x38a8>
   149d0:	cmp	r4, #84	; 0x54
   149d4:	beq	14a6c <__assert_fail@plt+0x38b0>
   149d8:	cmp	r4, #77	; 0x4d
   149dc:	bne	1486c <__assert_fail@plt+0x36b0>
   149e0:	mov	r2, #2
   149e4:	b	14a54 <__assert_fail@plt+0x3898>
   149e8:	cmp	r4, #103	; 0x67
   149ec:	beq	14a5c <__assert_fail@plt+0x38a0>
   149f0:	bhi	14a14 <__assert_fail@plt+0x3858>
   149f4:	cmp	r4, #98	; 0x62
   149f8:	beq	14a48 <__assert_fail@plt+0x388c>
   149fc:	cmp	r4, #99	; 0x63
   14a00:	beq	14a84 <__assert_fail@plt+0x38c8>
   14a04:	cmp	r4, #90	; 0x5a
   14a08:	bne	1486c <__assert_fail@plt+0x36b0>
   14a0c:	mov	r2, #7
   14a10:	b	14a54 <__assert_fail@plt+0x3898>
   14a14:	cmp	r4, #109	; 0x6d
   14a18:	beq	149e0 <__assert_fail@plt+0x3824>
   14a1c:	bhi	14a30 <__assert_fail@plt+0x3874>
   14a20:	cmp	r4, #107	; 0x6b
   14a24:	bne	1486c <__assert_fail@plt+0x36b0>
   14a28:	mov	r2, #1
   14a2c:	b	14a54 <__assert_fail@plt+0x3898>
   14a30:	cmp	r4, #116	; 0x74
   14a34:	beq	14a6c <__assert_fail@plt+0x38b0>
   14a38:	cmp	r4, #119	; 0x77
   14a3c:	moveq	r1, #2
   14a40:	beq	14968 <__assert_fail@plt+0x37ac>
   14a44:	b	1486c <__assert_fail@plt+0x36b0>
   14a48:	mov	r1, #512	; 0x200
   14a4c:	b	14968 <__assert_fail@plt+0x37ac>
   14a50:	mov	r2, #6
   14a54:	add	r0, sp, #4
   14a58:	b	14a74 <__assert_fail@plt+0x38b8>
   14a5c:	mov	r2, #3
   14a60:	b	14a54 <__assert_fail@plt+0x3898>
   14a64:	mov	r2, #5
   14a68:	b	14a54 <__assert_fail@plt+0x3898>
   14a6c:	mov	r2, #4
   14a70:	add	r0, sp, r2
   14a74:	bl	14738 <__assert_fail@plt+0x357c>
   14a78:	b	14970 <__assert_fail@plt+0x37b4>
   14a7c:	mov	r2, #8
   14a80:	b	14a54 <__assert_fail@plt+0x3898>
   14a84:	mov	r0, #0
   14a88:	b	14970 <__assert_fail@plt+0x37b4>
   14a8c:	andeq	r6, r1, r2, ror #7
   14a90:	andeq	r6, r1, fp, ror #7
   14a94:	strdeq	r6, [r1], -r9
   14a98:	cmp	r1, #0
   14a9c:	cmpne	r0, #0
   14aa0:	moveq	r1, #1
   14aa4:	moveq	r0, r1
   14aa8:	umull	r2, r3, r0, r1
   14aac:	adds	r3, r3, #0
   14ab0:	movne	r3, #1
   14ab4:	cmp	r2, #0
   14ab8:	blt	14ac8 <__assert_fail@plt+0x390c>
   14abc:	cmp	r3, #0
   14ac0:	bne	14ac8 <__assert_fail@plt+0x390c>
   14ac4:	b	10ed4 <calloc@plt>
   14ac8:	push	{r4, lr}
   14acc:	bl	110b4 <__errno_location@plt>
   14ad0:	mov	r3, #12
   14ad4:	str	r3, [r0]
   14ad8:	mov	r0, #0
   14adc:	pop	{r4, pc}
   14ae0:	cmp	r0, #0
   14ae4:	mov	r3, #0
   14ae8:	moveq	r0, #1
   14aec:	adds	r3, r3, #0
   14af0:	movne	r3, #1
   14af4:	cmp	r0, #0
   14af8:	blt	14b08 <__assert_fail@plt+0x394c>
   14afc:	cmp	r3, #0
   14b00:	bne	14b08 <__assert_fail@plt+0x394c>
   14b04:	b	1103c <malloc@plt>
   14b08:	push	{r4, lr}
   14b0c:	bl	110b4 <__errno_location@plt>
   14b10:	mov	r3, #12
   14b14:	str	r3, [r0]
   14b18:	mov	r0, #0
   14b1c:	pop	{r4, pc}
   14b20:	cmp	r0, #0
   14b24:	push	{r4, lr}
   14b28:	mov	r4, r1
   14b2c:	bne	14b3c <__assert_fail@plt+0x3980>
   14b30:	mov	r0, r1
   14b34:	pop	{r4, lr}
   14b38:	b	14ae0 <__assert_fail@plt+0x3924>
   14b3c:	cmp	r1, #0
   14b40:	bne	14b50 <__assert_fail@plt+0x3994>
   14b44:	bl	12264 <__assert_fail@plt+0x10a8>
   14b48:	mov	r0, #0
   14b4c:	pop	{r4, pc}
   14b50:	cmp	r1, #0
   14b54:	blt	14b64 <__assert_fail@plt+0x39a8>
   14b58:	mov	r3, #0
   14b5c:	cmp	r3, r3
   14b60:	beq	14b74 <__assert_fail@plt+0x39b8>
   14b64:	bl	110b4 <__errno_location@plt>
   14b68:	mov	r3, #12
   14b6c:	str	r3, [r0]
   14b70:	b	14b48 <__assert_fail@plt+0x398c>
   14b74:	pop	{r4, lr}
   14b78:	b	10fa0 <realloc@plt>
   14b7c:	push	{r4, r5, r6, lr}
   14b80:	mov	r4, r0
   14b84:	bl	11000 <__fpending@plt>
   14b88:	mov	r5, r0
   14b8c:	mov	r0, r4
   14b90:	bl	1100c <ferror_unlocked@plt>
   14b94:	mov	r6, r0
   14b98:	mov	r0, r4
   14b9c:	bl	14bec <__assert_fail@plt+0x3a30>
   14ba0:	cmp	r6, #0
   14ba4:	mov	r4, r0
   14ba8:	bne	14bd4 <__assert_fail@plt+0x3a18>
   14bac:	cmp	r0, #0
   14bb0:	beq	14bcc <__assert_fail@plt+0x3a10>
   14bb4:	cmp	r5, #0
   14bb8:	bne	14be4 <__assert_fail@plt+0x3a28>
   14bbc:	bl	110b4 <__errno_location@plt>
   14bc0:	ldr	r4, [r0]
   14bc4:	subs	r4, r4, #9
   14bc8:	mvnne	r4, #0
   14bcc:	mov	r0, r4
   14bd0:	pop	{r4, r5, r6, pc}
   14bd4:	cmp	r0, #0
   14bd8:	bne	14be4 <__assert_fail@plt+0x3a28>
   14bdc:	bl	110b4 <__errno_location@plt>
   14be0:	str	r4, [r0]
   14be4:	mvn	r4, #0
   14be8:	b	14bcc <__assert_fail@plt+0x3a10>
   14bec:	push	{r0, r1, r2, r4, r5, lr}
   14bf0:	mov	r4, r0
   14bf4:	bl	110fc <fileno@plt>
   14bf8:	cmp	r0, #0
   14bfc:	mov	r0, r4
   14c00:	bge	14c10 <__assert_fail@plt+0x3a54>
   14c04:	add	sp, sp, #12
   14c08:	pop	{r4, r5, lr}
   14c0c:	b	11114 <fclose@plt>
   14c10:	bl	11054 <__freading@plt>
   14c14:	cmp	r0, #0
   14c18:	bne	14c54 <__assert_fail@plt+0x3a98>
   14c1c:	mov	r0, r4
   14c20:	bl	14c94 <__assert_fail@plt+0x3ad8>
   14c24:	cmp	r0, #0
   14c28:	bne	14c88 <__assert_fail@plt+0x3acc>
   14c2c:	mov	r5, #0
   14c30:	mov	r0, r4
   14c34:	bl	11114 <fclose@plt>
   14c38:	cmp	r5, #0
   14c3c:	beq	14c4c <__assert_fail@plt+0x3a90>
   14c40:	bl	110b4 <__errno_location@plt>
   14c44:	str	r5, [r0]
   14c48:	mvn	r0, #0
   14c4c:	add	sp, sp, #12
   14c50:	pop	{r4, r5, pc}
   14c54:	mov	r0, r4
   14c58:	bl	110fc <fileno@plt>
   14c5c:	mov	r3, #1
   14c60:	str	r3, [sp]
   14c64:	mov	r2, #0
   14c68:	mov	r3, #0
   14c6c:	bl	10fdc <lseek64@plt>
   14c70:	mvn	r3, #0
   14c74:	mvn	r2, #0
   14c78:	cmp	r1, r3
   14c7c:	cmpeq	r0, r2
   14c80:	bne	14c1c <__assert_fail@plt+0x3a60>
   14c84:	b	14c2c <__assert_fail@plt+0x3a70>
   14c88:	bl	110b4 <__errno_location@plt>
   14c8c:	ldr	r5, [r0]
   14c90:	b	14c30 <__assert_fail@plt+0x3a74>
   14c94:	push	{r0, r1, r4, lr}
   14c98:	subs	r4, r0, #0
   14c9c:	bne	14cb0 <__assert_fail@plt+0x3af4>
   14ca0:	mov	r0, r4
   14ca4:	add	sp, sp, #8
   14ca8:	pop	{r4, lr}
   14cac:	b	10f34 <fflush@plt>
   14cb0:	bl	11054 <__freading@plt>
   14cb4:	cmp	r0, #0
   14cb8:	beq	14ca0 <__assert_fail@plt+0x3ae4>
   14cbc:	ldr	r3, [r4]
   14cc0:	tst	r3, #256	; 0x100
   14cc4:	beq	14ca0 <__assert_fail@plt+0x3ae4>
   14cc8:	mov	r3, #1
   14ccc:	str	r3, [sp]
   14cd0:	mov	r2, #0
   14cd4:	mov	r3, #0
   14cd8:	mov	r0, r4
   14cdc:	bl	14ce4 <__assert_fail@plt+0x3b28>
   14ce0:	b	14ca0 <__assert_fail@plt+0x3ae4>
   14ce4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14ce8:	mov	r4, r0
   14cec:	ldmib	r0, {ip, lr}
   14cf0:	ldr	r8, [sp, #32]
   14cf4:	cmp	lr, ip
   14cf8:	bne	14d64 <__assert_fail@plt+0x3ba8>
   14cfc:	ldr	lr, [r0, #20]
   14d00:	ldr	ip, [r0, #16]
   14d04:	cmp	lr, ip
   14d08:	bne	14d64 <__assert_fail@plt+0x3ba8>
   14d0c:	ldr	r5, [r0, #36]	; 0x24
   14d10:	cmp	r5, #0
   14d14:	bne	14d64 <__assert_fail@plt+0x3ba8>
   14d18:	mov	r6, r2
   14d1c:	mov	r7, r3
   14d20:	bl	110fc <fileno@plt>
   14d24:	mov	r2, r6
   14d28:	mov	r3, r7
   14d2c:	str	r8, [sp]
   14d30:	bl	10fdc <lseek64@plt>
   14d34:	mvn	r3, #0
   14d38:	mvn	r2, #0
   14d3c:	cmp	r1, r3
   14d40:	cmpeq	r0, r2
   14d44:	mvneq	r0, #0
   14d48:	ldrne	r3, [r4]
   14d4c:	strdne	r0, [r4, #80]	; 0x50
   14d50:	movne	r0, r5
   14d54:	bicne	r3, r3, #16
   14d58:	strne	r3, [r4]
   14d5c:	add	sp, sp, #8
   14d60:	pop	{r4, r5, r6, r7, r8, pc}
   14d64:	str	r8, [sp, #32]
   14d68:	mov	r0, r4
   14d6c:	add	sp, sp, #8
   14d70:	pop	{r4, r5, r6, r7, r8, lr}
   14d74:	b	11120 <fseeko64@plt>
   14d78:	push	{r4, lr}
   14d7c:	mov	r0, #14
   14d80:	bl	11150 <nl_langinfo@plt>
   14d84:	ldr	r3, [pc, #24]	; 14da4 <__assert_fail@plt+0x3be8>
   14d88:	cmp	r0, #0
   14d8c:	moveq	r0, r3
   14d90:	ldr	r3, [pc, #16]	; 14da8 <__assert_fail@plt+0x3bec>
   14d94:	ldrb	r2, [r0]
   14d98:	cmp	r2, #0
   14d9c:	moveq	r0, r3
   14da0:	pop	{r4, pc}
   14da4:	andeq	r5, r1, r0, ror r9
   14da8:	andeq	r6, r1, pc, lsl r4
   14dac:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14db0:	subs	r5, r0, #0
   14db4:	addeq	r5, sp, #4
   14db8:	mov	r0, r5
   14dbc:	mov	r7, r2
   14dc0:	mov	r6, r1
   14dc4:	bl	11018 <mbrtowc@plt>
   14dc8:	cmp	r7, #0
   14dcc:	cmnne	r0, #3
   14dd0:	mov	r4, r0
   14dd4:	bls	14df0 <__assert_fail@plt+0x3c34>
   14dd8:	mov	r0, #0
   14ddc:	bl	15018 <__assert_fail@plt+0x3e5c>
   14de0:	cmp	r0, #0
   14de4:	moveq	r4, #1
   14de8:	ldrbeq	r3, [r6]
   14dec:	streq	r3, [r5]
   14df0:	mov	r0, r4
   14df4:	add	sp, sp, #12
   14df8:	pop	{r4, r5, r6, r7, pc}
   14dfc:	lsrs	r3, r1, #30
   14e00:	movne	r3, #1
   14e04:	moveq	r3, #0
   14e08:	lsls	r1, r1, #2
   14e0c:	bmi	14e1c <__assert_fail@plt+0x3c60>
   14e10:	cmp	r3, #0
   14e14:	bne	14e1c <__assert_fail@plt+0x3c60>
   14e18:	b	14b20 <__assert_fail@plt+0x3964>
   14e1c:	push	{r4, lr}
   14e20:	bl	110b4 <__errno_location@plt>
   14e24:	mov	r3, #12
   14e28:	str	r3, [r0]
   14e2c:	mov	r0, #0
   14e30:	pop	{r4, pc}
   14e34:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14e38:	subs	r8, r0, #0
   14e3c:	mov	r5, r1
   14e40:	mov	r7, r2
   14e44:	beq	14ed4 <__assert_fail@plt+0x3d18>
   14e48:	mov	r1, #10
   14e4c:	mov	r0, #0
   14e50:	str	r1, [sp, #4]
   14e54:	bl	14dfc <__assert_fail@plt+0x3c40>
   14e58:	subs	r4, r0, #0
   14e5c:	bne	14e6c <__assert_fail@plt+0x3cb0>
   14e60:	mvn	r0, #0
   14e64:	add	sp, sp, #12
   14e68:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14e6c:	add	r3, sp, #4
   14e70:	mov	r2, r4
   14e74:	mov	r1, r5
   14e78:	mov	r0, r8
   14e7c:	ldr	r6, [sp, #4]
   14e80:	bl	110d8 <getgrouplist@plt>
   14e84:	subs	r9, r0, #0
   14e88:	bge	14e9c <__assert_fail@plt+0x3ce0>
   14e8c:	ldr	r3, [sp, #4]
   14e90:	cmp	r6, r3
   14e94:	lsleq	r6, r6, #1
   14e98:	streq	r6, [sp, #4]
   14e9c:	ldr	r1, [sp, #4]
   14ea0:	mov	r0, r4
   14ea4:	bl	14dfc <__assert_fail@plt+0x3c40>
   14ea8:	cmp	r0, #0
   14eac:	bne	14ebc <__assert_fail@plt+0x3d00>
   14eb0:	mov	r0, r4
   14eb4:	bl	12264 <__assert_fail@plt+0x10a8>
   14eb8:	b	14e60 <__assert_fail@plt+0x3ca4>
   14ebc:	cmp	r9, #0
   14ec0:	mov	r4, r0
   14ec4:	blt	14e6c <__assert_fail@plt+0x3cb0>
   14ec8:	str	r0, [r7]
   14ecc:	ldr	r0, [sp, #4]
   14ed0:	b	14e64 <__assert_fail@plt+0x3ca8>
   14ed4:	mov	r1, r8
   14ed8:	bl	1115c <getgroups@plt>
   14edc:	cmp	r0, #0
   14ee0:	str	r0, [sp, #4]
   14ee4:	bge	14f20 <__assert_fail@plt+0x3d64>
   14ee8:	bl	110b4 <__errno_location@plt>
   14eec:	ldr	r3, [r0]
   14ef0:	cmp	r3, #38	; 0x26
   14ef4:	bne	14e60 <__assert_fail@plt+0x3ca4>
   14ef8:	mov	r1, #1
   14efc:	mov	r0, r8
   14f00:	bl	14dfc <__assert_fail@plt+0x3c40>
   14f04:	cmp	r0, #0
   14f08:	beq	14e60 <__assert_fail@plt+0x3ca4>
   14f0c:	str	r0, [r7]
   14f10:	str	r5, [r0]
   14f14:	adds	r0, r5, #1
   14f18:	movne	r0, #1
   14f1c:	b	14e64 <__assert_fail@plt+0x3ca8>
   14f20:	adds	r6, r5, #1
   14f24:	movne	r6, #1
   14f28:	cmp	r0, #0
   14f2c:	movne	r3, r6
   14f30:	orreq	r3, r6, #1
   14f34:	cmp	r3, #0
   14f38:	addne	r0, r0, #1
   14f3c:	strne	r0, [sp, #4]
   14f40:	mov	r0, #0
   14f44:	ldr	r1, [sp, #4]
   14f48:	bl	14dfc <__assert_fail@plt+0x3c40>
   14f4c:	subs	r4, r0, #0
   14f50:	beq	14e60 <__assert_fail@plt+0x3ca4>
   14f54:	cmn	r5, #1
   14f58:	ldr	r0, [sp, #4]
   14f5c:	movne	r1, #4
   14f60:	moveq	r1, #0
   14f64:	add	r1, r4, r1
   14f68:	sub	r0, r0, r6
   14f6c:	bl	1115c <getgroups@plt>
   14f70:	cmp	r0, #0
   14f74:	blt	14eb0 <__assert_fail@plt+0x3cf4>
   14f78:	cmn	r5, #1
   14f7c:	addne	r0, r0, #1
   14f80:	strne	r5, [r4]
   14f84:	cmp	r0, #1
   14f88:	str	r4, [r7]
   14f8c:	ldrgt	ip, [r4]
   14f90:	addgt	r1, r4, r0, lsl #2
   14f94:	addgt	r3, r4, #4
   14f98:	ble	14e64 <__assert_fail@plt+0x3ca8>
   14f9c:	cmp	r1, r3
   14fa0:	bls	14e64 <__assert_fail@plt+0x3ca8>
   14fa4:	ldr	r2, [r3], #4
   14fa8:	cmp	ip, r2
   14fac:	beq	14fc4 <__assert_fail@plt+0x3e08>
   14fb0:	ldr	lr, [r4]
   14fb4:	cmp	r2, lr
   14fb8:	strne	r2, [r4, #4]
   14fbc:	addne	r4, r4, #4
   14fc0:	bne	14f9c <__assert_fail@plt+0x3de0>
   14fc4:	sub	r0, r0, #1
   14fc8:	b	14f9c <__assert_fail@plt+0x3de0>
   14fcc:	push	{r4, r5, r6, lr}
   14fd0:	subs	r4, r2, #0
   14fd4:	mov	r6, r0
   14fd8:	mov	r5, r1
   14fdc:	beq	14ff4 <__assert_fail@plt+0x3e38>
   14fe0:	mov	r1, r4
   14fe4:	mvn	r0, #0
   14fe8:	bl	150f8 <__assert_fail@plt+0x3f3c>
   14fec:	cmp	r0, r5
   14ff0:	bcc	15004 <__assert_fail@plt+0x3e48>
   14ff4:	mul	r1, r5, r4
   14ff8:	mov	r0, r6
   14ffc:	pop	{r4, r5, r6, lr}
   15000:	b	14b20 <__assert_fail@plt+0x3964>
   15004:	bl	110b4 <__errno_location@plt>
   15008:	mov	r3, #12
   1500c:	str	r3, [r0]
   15010:	mov	r0, #0
   15014:	pop	{r4, r5, r6, pc}
   15018:	push	{lr}		; (str lr, [sp, #-4]!)
   1501c:	sub	sp, sp, #268	; 0x10c
   15020:	ldr	r2, [pc, #64]	; 15068 <__assert_fail@plt+0x3eac>
   15024:	add	r1, sp, #4
   15028:	bl	15074 <__assert_fail@plt+0x3eb8>
   1502c:	cmp	r0, #0
   15030:	movne	r0, #0
   15034:	bne	15060 <__assert_fail@plt+0x3ea4>
   15038:	ldr	r1, [pc, #44]	; 1506c <__assert_fail@plt+0x3eb0>
   1503c:	add	r0, sp, #4
   15040:	bl	10f1c <strcmp@plt>
   15044:	cmp	r0, #0
   15048:	beq	15060 <__assert_fail@plt+0x3ea4>
   1504c:	ldr	r1, [pc, #28]	; 15070 <__assert_fail@plt+0x3eb4>
   15050:	add	r0, sp, #4
   15054:	bl	10f1c <strcmp@plt>
   15058:	adds	r0, r0, #0
   1505c:	movne	r0, #1
   15060:	add	sp, sp, #268	; 0x10c
   15064:	pop	{pc}		; (ldr pc, [sp], #4)
   15068:	andeq	r0, r0, r1, lsl #2
   1506c:	andeq	r6, r1, r5, lsr #8
   15070:	andeq	r6, r1, r7, lsr #8
   15074:	push	{r4, r5, r6, lr}
   15078:	mov	r5, r1
   1507c:	mov	r1, #0
   15080:	mov	r4, r2
   15084:	bl	1112c <setlocale@plt>
   15088:	subs	r6, r0, #0
   1508c:	bne	150a0 <__assert_fail@plt+0x3ee4>
   15090:	cmp	r4, #0
   15094:	strbne	r6, [r5]
   15098:	mov	r0, #22
   1509c:	pop	{r4, r5, r6, pc}
   150a0:	bl	1109c <strlen@plt>
   150a4:	cmp	r4, r0
   150a8:	bls	150c4 <__assert_fail@plt+0x3f08>
   150ac:	add	r2, r0, #1
   150b0:	mov	r1, r6
   150b4:	mov	r0, r5
   150b8:	bl	10f64 <memcpy@plt>
   150bc:	mov	r0, #0
   150c0:	pop	{r4, r5, r6, pc}
   150c4:	cmp	r4, #0
   150c8:	beq	150e8 <__assert_fail@plt+0x3f2c>
   150cc:	sub	r4, r4, #1
   150d0:	mov	r2, r4
   150d4:	mov	r1, r6
   150d8:	mov	r0, r5
   150dc:	bl	10f64 <memcpy@plt>
   150e0:	mov	r3, #0
   150e4:	strb	r3, [r5, r4]
   150e8:	mov	r0, #34	; 0x22
   150ec:	pop	{r4, r5, r6, pc}
   150f0:	mov	r1, #0
   150f4:	b	1112c <setlocale@plt>
   150f8:	subs	r2, r1, #1
   150fc:	bxeq	lr
   15100:	bcc	152d8 <__assert_fail@plt+0x411c>
   15104:	cmp	r0, r1
   15108:	bls	152bc <__assert_fail@plt+0x4100>
   1510c:	tst	r1, r2
   15110:	beq	152c8 <__assert_fail@plt+0x410c>
   15114:	clz	r3, r0
   15118:	clz	r2, r1
   1511c:	sub	r3, r2, r3
   15120:	rsbs	r3, r3, #31
   15124:	addne	r3, r3, r3, lsl #1
   15128:	mov	r2, #0
   1512c:	addne	pc, pc, r3, lsl #2
   15130:	nop			; (mov r0, r0)
   15134:	cmp	r0, r1, lsl #31
   15138:	adc	r2, r2, r2
   1513c:	subcs	r0, r0, r1, lsl #31
   15140:	cmp	r0, r1, lsl #30
   15144:	adc	r2, r2, r2
   15148:	subcs	r0, r0, r1, lsl #30
   1514c:	cmp	r0, r1, lsl #29
   15150:	adc	r2, r2, r2
   15154:	subcs	r0, r0, r1, lsl #29
   15158:	cmp	r0, r1, lsl #28
   1515c:	adc	r2, r2, r2
   15160:	subcs	r0, r0, r1, lsl #28
   15164:	cmp	r0, r1, lsl #27
   15168:	adc	r2, r2, r2
   1516c:	subcs	r0, r0, r1, lsl #27
   15170:	cmp	r0, r1, lsl #26
   15174:	adc	r2, r2, r2
   15178:	subcs	r0, r0, r1, lsl #26
   1517c:	cmp	r0, r1, lsl #25
   15180:	adc	r2, r2, r2
   15184:	subcs	r0, r0, r1, lsl #25
   15188:	cmp	r0, r1, lsl #24
   1518c:	adc	r2, r2, r2
   15190:	subcs	r0, r0, r1, lsl #24
   15194:	cmp	r0, r1, lsl #23
   15198:	adc	r2, r2, r2
   1519c:	subcs	r0, r0, r1, lsl #23
   151a0:	cmp	r0, r1, lsl #22
   151a4:	adc	r2, r2, r2
   151a8:	subcs	r0, r0, r1, lsl #22
   151ac:	cmp	r0, r1, lsl #21
   151b0:	adc	r2, r2, r2
   151b4:	subcs	r0, r0, r1, lsl #21
   151b8:	cmp	r0, r1, lsl #20
   151bc:	adc	r2, r2, r2
   151c0:	subcs	r0, r0, r1, lsl #20
   151c4:	cmp	r0, r1, lsl #19
   151c8:	adc	r2, r2, r2
   151cc:	subcs	r0, r0, r1, lsl #19
   151d0:	cmp	r0, r1, lsl #18
   151d4:	adc	r2, r2, r2
   151d8:	subcs	r0, r0, r1, lsl #18
   151dc:	cmp	r0, r1, lsl #17
   151e0:	adc	r2, r2, r2
   151e4:	subcs	r0, r0, r1, lsl #17
   151e8:	cmp	r0, r1, lsl #16
   151ec:	adc	r2, r2, r2
   151f0:	subcs	r0, r0, r1, lsl #16
   151f4:	cmp	r0, r1, lsl #15
   151f8:	adc	r2, r2, r2
   151fc:	subcs	r0, r0, r1, lsl #15
   15200:	cmp	r0, r1, lsl #14
   15204:	adc	r2, r2, r2
   15208:	subcs	r0, r0, r1, lsl #14
   1520c:	cmp	r0, r1, lsl #13
   15210:	adc	r2, r2, r2
   15214:	subcs	r0, r0, r1, lsl #13
   15218:	cmp	r0, r1, lsl #12
   1521c:	adc	r2, r2, r2
   15220:	subcs	r0, r0, r1, lsl #12
   15224:	cmp	r0, r1, lsl #11
   15228:	adc	r2, r2, r2
   1522c:	subcs	r0, r0, r1, lsl #11
   15230:	cmp	r0, r1, lsl #10
   15234:	adc	r2, r2, r2
   15238:	subcs	r0, r0, r1, lsl #10
   1523c:	cmp	r0, r1, lsl #9
   15240:	adc	r2, r2, r2
   15244:	subcs	r0, r0, r1, lsl #9
   15248:	cmp	r0, r1, lsl #8
   1524c:	adc	r2, r2, r2
   15250:	subcs	r0, r0, r1, lsl #8
   15254:	cmp	r0, r1, lsl #7
   15258:	adc	r2, r2, r2
   1525c:	subcs	r0, r0, r1, lsl #7
   15260:	cmp	r0, r1, lsl #6
   15264:	adc	r2, r2, r2
   15268:	subcs	r0, r0, r1, lsl #6
   1526c:	cmp	r0, r1, lsl #5
   15270:	adc	r2, r2, r2
   15274:	subcs	r0, r0, r1, lsl #5
   15278:	cmp	r0, r1, lsl #4
   1527c:	adc	r2, r2, r2
   15280:	subcs	r0, r0, r1, lsl #4
   15284:	cmp	r0, r1, lsl #3
   15288:	adc	r2, r2, r2
   1528c:	subcs	r0, r0, r1, lsl #3
   15290:	cmp	r0, r1, lsl #2
   15294:	adc	r2, r2, r2
   15298:	subcs	r0, r0, r1, lsl #2
   1529c:	cmp	r0, r1, lsl #1
   152a0:	adc	r2, r2, r2
   152a4:	subcs	r0, r0, r1, lsl #1
   152a8:	cmp	r0, r1
   152ac:	adc	r2, r2, r2
   152b0:	subcs	r0, r0, r1
   152b4:	mov	r0, r2
   152b8:	bx	lr
   152bc:	moveq	r0, #1
   152c0:	movne	r0, #0
   152c4:	bx	lr
   152c8:	clz	r2, r1
   152cc:	rsb	r2, r2, #31
   152d0:	lsr	r0, r0, r2
   152d4:	bx	lr
   152d8:	cmp	r0, #0
   152dc:	mvnne	r0, #0
   152e0:	b	15580 <__assert_fail@plt+0x43c4>
   152e4:	cmp	r1, #0
   152e8:	beq	152d8 <__assert_fail@plt+0x411c>
   152ec:	push	{r0, r1, lr}
   152f0:	bl	150f8 <__assert_fail@plt+0x3f3c>
   152f4:	pop	{r1, r2, lr}
   152f8:	mul	r3, r2, r0
   152fc:	sub	r1, r1, r3
   15300:	bx	lr
   15304:	cmp	r1, #0
   15308:	beq	15514 <__assert_fail@plt+0x4358>
   1530c:	eor	ip, r0, r1
   15310:	rsbmi	r1, r1, #0
   15314:	subs	r2, r1, #1
   15318:	beq	154e0 <__assert_fail@plt+0x4324>
   1531c:	movs	r3, r0
   15320:	rsbmi	r3, r0, #0
   15324:	cmp	r3, r1
   15328:	bls	154ec <__assert_fail@plt+0x4330>
   1532c:	tst	r1, r2
   15330:	beq	154fc <__assert_fail@plt+0x4340>
   15334:	clz	r2, r3
   15338:	clz	r0, r1
   1533c:	sub	r2, r0, r2
   15340:	rsbs	r2, r2, #31
   15344:	addne	r2, r2, r2, lsl #1
   15348:	mov	r0, #0
   1534c:	addne	pc, pc, r2, lsl #2
   15350:	nop			; (mov r0, r0)
   15354:	cmp	r3, r1, lsl #31
   15358:	adc	r0, r0, r0
   1535c:	subcs	r3, r3, r1, lsl #31
   15360:	cmp	r3, r1, lsl #30
   15364:	adc	r0, r0, r0
   15368:	subcs	r3, r3, r1, lsl #30
   1536c:	cmp	r3, r1, lsl #29
   15370:	adc	r0, r0, r0
   15374:	subcs	r3, r3, r1, lsl #29
   15378:	cmp	r3, r1, lsl #28
   1537c:	adc	r0, r0, r0
   15380:	subcs	r3, r3, r1, lsl #28
   15384:	cmp	r3, r1, lsl #27
   15388:	adc	r0, r0, r0
   1538c:	subcs	r3, r3, r1, lsl #27
   15390:	cmp	r3, r1, lsl #26
   15394:	adc	r0, r0, r0
   15398:	subcs	r3, r3, r1, lsl #26
   1539c:	cmp	r3, r1, lsl #25
   153a0:	adc	r0, r0, r0
   153a4:	subcs	r3, r3, r1, lsl #25
   153a8:	cmp	r3, r1, lsl #24
   153ac:	adc	r0, r0, r0
   153b0:	subcs	r3, r3, r1, lsl #24
   153b4:	cmp	r3, r1, lsl #23
   153b8:	adc	r0, r0, r0
   153bc:	subcs	r3, r3, r1, lsl #23
   153c0:	cmp	r3, r1, lsl #22
   153c4:	adc	r0, r0, r0
   153c8:	subcs	r3, r3, r1, lsl #22
   153cc:	cmp	r3, r1, lsl #21
   153d0:	adc	r0, r0, r0
   153d4:	subcs	r3, r3, r1, lsl #21
   153d8:	cmp	r3, r1, lsl #20
   153dc:	adc	r0, r0, r0
   153e0:	subcs	r3, r3, r1, lsl #20
   153e4:	cmp	r3, r1, lsl #19
   153e8:	adc	r0, r0, r0
   153ec:	subcs	r3, r3, r1, lsl #19
   153f0:	cmp	r3, r1, lsl #18
   153f4:	adc	r0, r0, r0
   153f8:	subcs	r3, r3, r1, lsl #18
   153fc:	cmp	r3, r1, lsl #17
   15400:	adc	r0, r0, r0
   15404:	subcs	r3, r3, r1, lsl #17
   15408:	cmp	r3, r1, lsl #16
   1540c:	adc	r0, r0, r0
   15410:	subcs	r3, r3, r1, lsl #16
   15414:	cmp	r3, r1, lsl #15
   15418:	adc	r0, r0, r0
   1541c:	subcs	r3, r3, r1, lsl #15
   15420:	cmp	r3, r1, lsl #14
   15424:	adc	r0, r0, r0
   15428:	subcs	r3, r3, r1, lsl #14
   1542c:	cmp	r3, r1, lsl #13
   15430:	adc	r0, r0, r0
   15434:	subcs	r3, r3, r1, lsl #13
   15438:	cmp	r3, r1, lsl #12
   1543c:	adc	r0, r0, r0
   15440:	subcs	r3, r3, r1, lsl #12
   15444:	cmp	r3, r1, lsl #11
   15448:	adc	r0, r0, r0
   1544c:	subcs	r3, r3, r1, lsl #11
   15450:	cmp	r3, r1, lsl #10
   15454:	adc	r0, r0, r0
   15458:	subcs	r3, r3, r1, lsl #10
   1545c:	cmp	r3, r1, lsl #9
   15460:	adc	r0, r0, r0
   15464:	subcs	r3, r3, r1, lsl #9
   15468:	cmp	r3, r1, lsl #8
   1546c:	adc	r0, r0, r0
   15470:	subcs	r3, r3, r1, lsl #8
   15474:	cmp	r3, r1, lsl #7
   15478:	adc	r0, r0, r0
   1547c:	subcs	r3, r3, r1, lsl #7
   15480:	cmp	r3, r1, lsl #6
   15484:	adc	r0, r0, r0
   15488:	subcs	r3, r3, r1, lsl #6
   1548c:	cmp	r3, r1, lsl #5
   15490:	adc	r0, r0, r0
   15494:	subcs	r3, r3, r1, lsl #5
   15498:	cmp	r3, r1, lsl #4
   1549c:	adc	r0, r0, r0
   154a0:	subcs	r3, r3, r1, lsl #4
   154a4:	cmp	r3, r1, lsl #3
   154a8:	adc	r0, r0, r0
   154ac:	subcs	r3, r3, r1, lsl #3
   154b0:	cmp	r3, r1, lsl #2
   154b4:	adc	r0, r0, r0
   154b8:	subcs	r3, r3, r1, lsl #2
   154bc:	cmp	r3, r1, lsl #1
   154c0:	adc	r0, r0, r0
   154c4:	subcs	r3, r3, r1, lsl #1
   154c8:	cmp	r3, r1
   154cc:	adc	r0, r0, r0
   154d0:	subcs	r3, r3, r1
   154d4:	cmp	ip, #0
   154d8:	rsbmi	r0, r0, #0
   154dc:	bx	lr
   154e0:	teq	ip, r0
   154e4:	rsbmi	r0, r0, #0
   154e8:	bx	lr
   154ec:	movcc	r0, #0
   154f0:	asreq	r0, ip, #31
   154f4:	orreq	r0, r0, #1
   154f8:	bx	lr
   154fc:	clz	r2, r1
   15500:	rsb	r2, r2, #31
   15504:	cmp	ip, #0
   15508:	lsr	r0, r3, r2
   1550c:	rsbmi	r0, r0, #0
   15510:	bx	lr
   15514:	cmp	r0, #0
   15518:	mvngt	r0, #-2147483648	; 0x80000000
   1551c:	movlt	r0, #-2147483648	; 0x80000000
   15520:	b	15580 <__assert_fail@plt+0x43c4>
   15524:	cmp	r1, #0
   15528:	beq	15514 <__assert_fail@plt+0x4358>
   1552c:	push	{r0, r1, lr}
   15530:	bl	1530c <__assert_fail@plt+0x4150>
   15534:	pop	{r1, r2, lr}
   15538:	mul	r3, r2, r0
   1553c:	sub	r1, r1, r3
   15540:	bx	lr
   15544:	cmp	r3, #0
   15548:	cmpeq	r2, #0
   1554c:	bne	15564 <__assert_fail@plt+0x43a8>
   15550:	cmp	r1, #0
   15554:	cmpeq	r0, #0
   15558:	mvnne	r1, #0
   1555c:	mvnne	r0, #0
   15560:	b	15580 <__assert_fail@plt+0x43c4>
   15564:	sub	sp, sp, #8
   15568:	push	{sp, lr}
   1556c:	bl	15590 <__assert_fail@plt+0x43d4>
   15570:	ldr	lr, [sp, #4]
   15574:	add	sp, sp, #8
   15578:	pop	{r2, r3}
   1557c:	bx	lr
   15580:	push	{r1, lr}
   15584:	mov	r0, #8
   15588:	bl	10ef8 <raise@plt>
   1558c:	pop	{r1, pc}
   15590:	cmp	r1, r3
   15594:	push	{r4, r5, r6, r7, r8, r9, lr}
   15598:	cmpeq	r0, r2
   1559c:	mov	r4, r0
   155a0:	mov	r5, r1
   155a4:	ldr	r9, [sp, #28]
   155a8:	movcc	r0, #0
   155ac:	movcc	r1, #0
   155b0:	bcc	156a8 <__assert_fail@plt+0x44ec>
   155b4:	cmp	r3, #0
   155b8:	clzeq	ip, r2
   155bc:	clzne	ip, r3
   155c0:	addeq	ip, ip, #32
   155c4:	cmp	r5, #0
   155c8:	clzeq	r1, r4
   155cc:	addeq	r1, r1, #32
   155d0:	clzne	r1, r5
   155d4:	sub	ip, ip, r1
   155d8:	sub	lr, ip, #32
   155dc:	lsl	r7, r3, ip
   155e0:	rsb	r8, ip, #32
   155e4:	orr	r7, r7, r2, lsl lr
   155e8:	orr	r7, r7, r2, lsr r8
   155ec:	lsl	r6, r2, ip
   155f0:	cmp	r5, r7
   155f4:	cmpeq	r4, r6
   155f8:	movcc	r0, #0
   155fc:	movcc	r1, #0
   15600:	bcc	1561c <__assert_fail@plt+0x4460>
   15604:	mov	r3, #1
   15608:	subs	r4, r4, r6
   1560c:	lsl	r1, r3, lr
   15610:	lsl	r0, r3, ip
   15614:	orr	r1, r1, r3, lsr r8
   15618:	sbc	r5, r5, r7
   1561c:	cmp	ip, #0
   15620:	beq	156a8 <__assert_fail@plt+0x44ec>
   15624:	lsrs	r3, r7, #1
   15628:	rrx	r2, r6
   1562c:	mov	r6, ip
   15630:	b	15654 <__assert_fail@plt+0x4498>
   15634:	subs	r4, r4, r2
   15638:	sbc	r5, r5, r3
   1563c:	adds	r4, r4, r4
   15640:	adc	r5, r5, r5
   15644:	adds	r4, r4, #1
   15648:	adc	r5, r5, #0
   1564c:	subs	r6, r6, #1
   15650:	beq	15670 <__assert_fail@plt+0x44b4>
   15654:	cmp	r5, r3
   15658:	cmpeq	r4, r2
   1565c:	bcs	15634 <__assert_fail@plt+0x4478>
   15660:	adds	r4, r4, r4
   15664:	adc	r5, r5, r5
   15668:	subs	r6, r6, #1
   1566c:	bne	15654 <__assert_fail@plt+0x4498>
   15670:	lsr	r6, r4, ip
   15674:	lsr	r7, r5, ip
   15678:	orr	r6, r6, r5, lsl r8
   1567c:	adds	r2, r0, r4
   15680:	orr	r6, r6, r5, lsr lr
   15684:	adc	r3, r1, r5
   15688:	lsl	r1, r7, ip
   1568c:	orr	r1, r1, r6, lsl lr
   15690:	lsl	r0, r6, ip
   15694:	orr	r1, r1, r6, lsr r8
   15698:	subs	r0, r2, r0
   1569c:	mov	r4, r6
   156a0:	mov	r5, r7
   156a4:	sbc	r1, r3, r1
   156a8:	cmp	r9, #0
   156ac:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   156b0:	strd	r4, [r9]
   156b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   156b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156bc:	mov	r7, r0
   156c0:	ldr	r6, [pc, #72]	; 15710 <__assert_fail@plt+0x4554>
   156c4:	ldr	r5, [pc, #72]	; 15714 <__assert_fail@plt+0x4558>
   156c8:	add	r6, pc, r6
   156cc:	add	r5, pc, r5
   156d0:	sub	r6, r6, r5
   156d4:	mov	r8, r1
   156d8:	mov	r9, r2
   156dc:	bl	10eb4 <calloc@plt-0x20>
   156e0:	asrs	r6, r6, #2
   156e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   156e8:	mov	r4, #0
   156ec:	add	r4, r4, #1
   156f0:	ldr	r3, [r5], #4
   156f4:	mov	r2, r9
   156f8:	mov	r1, r8
   156fc:	mov	r0, r7
   15700:	blx	r3
   15704:	cmp	r6, r4
   15708:	bne	156ec <__assert_fail@plt+0x4530>
   1570c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15710:	andeq	r1, r1, r8, lsr r8
   15714:	andeq	r1, r1, r0, lsr r8
   15718:	bx	lr
   1571c:	ldr	r3, [pc, #12]	; 15730 <__assert_fail@plt+0x4574>
   15720:	mov	r1, #0
   15724:	add	r3, pc, r3
   15728:	ldr	r2, [r3]
   1572c:	b	110c0 <__cxa_atexit@plt>
   15730:	andeq	r1, r1, r4, ror #19

Disassembly of section .fini:

00015734 <.fini>:
   15734:	push	{r3, lr}
   15738:	pop	{r3, pc}
