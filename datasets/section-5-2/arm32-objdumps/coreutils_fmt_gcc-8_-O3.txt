
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010c84 <.init>:
   10c84:	push	{r3, lr}
   10c88:	bl	114e8 <__assert_fail@plt+0x5e0>
   10c8c:	pop	{r3, pc}

Disassembly of section .plt:

00010c90 <calloc@plt-0x14>:
   10c90:	push	{lr}		; (str lr, [sp, #-4]!)
   10c94:	ldr	lr, [pc, #4]	; 10ca0 <calloc@plt-0x4>
   10c98:	add	lr, pc, lr
   10c9c:	ldr	pc, [lr, #8]!
   10ca0:	andeq	r9, r1, r0, ror #6

00010ca4 <calloc@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #102400	; 0x19000
   10cac:	ldr	pc, [ip, #864]!	; 0x360

00010cb0 <fputs_unlocked@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #102400	; 0x19000
   10cb8:	ldr	pc, [ip, #856]!	; 0x358

00010cbc <strcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #102400	; 0x19000
   10cc4:	ldr	pc, [ip, #848]!	; 0x350

00010cc8 <posix_fadvise64@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #102400	; 0x19000
   10cd0:	ldr	pc, [ip, #840]!	; 0x348

00010cd4 <fflush@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #102400	; 0x19000
   10cdc:	ldr	pc, [ip, #832]!	; 0x340

00010ce0 <__memmove_chk@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #102400	; 0x19000
   10ce8:	ldr	pc, [ip, #824]!	; 0x338

00010cec <free@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #102400	; 0x19000
   10cf4:	ldr	pc, [ip, #816]!	; 0x330

00010cf8 <_exit@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #102400	; 0x19000
   10d00:	ldr	pc, [ip, #808]!	; 0x328

00010d04 <memcpy@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #800]!	; 0x320

00010d10 <__strtoull_internal@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #792]!	; 0x318

00010d1c <mbsinit@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #784]!	; 0x310

00010d28 <fwrite_unlocked@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #776]!	; 0x308

00010d34 <memcmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #768]!	; 0x300

00010d40 <fputc_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #760]!	; 0x2f8

00010d4c <dcgettext@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #752]!	; 0x2f0

00010d58 <realloc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #744]!	; 0x2e8

00010d64 <textdomain@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d70 <iswprint@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #728]!	; 0x2d8

00010d7c <fwrite@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #720]!	; 0x2d0

00010d88 <lseek64@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #712]!	; 0x2c8

00010d94 <__ctype_get_mb_cur_max@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #704]!	; 0x2c0

00010da0 <__fpending@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dac <mbrtowc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #688]!	; 0x2b0

00010db8 <error@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc4 <malloc@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd0 <__libc_start_main@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #664]!	; 0x298

00010ddc <__freading@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #656]!	; 0x290

00010de8 <__gmon_start__@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #648]!	; 0x288

00010df4 <getopt_long@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #640]!	; 0x280

00010e00 <__ctype_b_loc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #632]!	; 0x278

00010e0c <exit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #624]!	; 0x270

00010e18 <strlen@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #616]!	; 0x268

00010e24 <strchr@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #608]!	; 0x260

00010e30 <__errno_location@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #600]!	; 0x258

00010e3c <__cxa_atexit@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #592]!	; 0x250

00010e48 <memset@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #584]!	; 0x248

00010e54 <__printf_chk@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #576]!	; 0x240

00010e60 <fileno@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #568]!	; 0x238

00010e6c <__fprintf_chk@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #560]!	; 0x230

00010e78 <fclose@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #552]!	; 0x228

00010e84 <fseeko64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #544]!	; 0x220

00010e90 <__uflow@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #536]!	; 0x218

00010e9c <__overflow@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #528]!	; 0x210

00010ea8 <setlocale@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #520]!	; 0x208

00010eb4 <strrchr@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #512]!	; 0x200

00010ec0 <nl_langinfo@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ecc <clearerr_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed8 <fopen64@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee4 <bindtextdomain@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef0 <strncmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #472]!	; 0x1d8

00010efc <abort@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #464]!	; 0x1d0

00010f08 <__assert_fail@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #456]!	; 0x1c8

Disassembly of section .text:

00010f14 <.text>:
   10f14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f18:	movw	r4, #41304	; 0xa158
   10f1c:	movt	r4, #2
   10f20:	strd	r6, [sp, #8]
   10f24:	mov	r7, r0
   10f28:	mov	r6, r1
   10f2c:	strd	r8, [sp, #16]
   10f30:	strd	sl, [sp, #24]
   10f34:	movw	fp, #37348	; 0x91e4
   10f38:	movt	fp, #1
   10f3c:	str	lr, [sp, #32]
   10f40:	sub	sp, sp, #44	; 0x2c
   10f44:	ldr	r0, [r1]
   10f48:	bl	13338 <__assert_fail@plt+0x2430>
   10f4c:	mov	r1, fp
   10f50:	mov	r0, #6
   10f54:	bl	10ea8 <setlocale@plt>
   10f58:	movw	r1, #38392	; 0x95f8
   10f5c:	movt	r1, #1
   10f60:	movw	r0, #38224	; 0x9550
   10f64:	movt	r0, #1
   10f68:	bl	10ee4 <bindtextdomain@plt>
   10f6c:	movw	r0, #38224	; 0x9550
   10f70:	movt	r0, #1
   10f74:	bl	10d64 <textdomain@plt>
   10f78:	movw	r0, #12308	; 0x3014
   10f7c:	movt	r0, #1
   10f80:	bl	18fc0 <__assert_fail@plt+0x80b8>
   10f84:	mov	r3, #0
   10f88:	mov	r2, #75	; 0x4b
   10f8c:	cmp	r7, #1
   10f90:	str	r2, [r4, #4]
   10f94:	str	fp, [r4, #36]	; 0x24
   10f98:	str	r3, [r4, #40]	; 0x28
   10f9c:	str	r3, [r4, #56]	; 0x38
   10fa0:	strb	r3, [r4, #60]	; 0x3c
   10fa4:	strb	r3, [r4, #61]	; 0x3d
   10fa8:	strb	r3, [r4, #62]	; 0x3e
   10fac:	strb	r3, [r4, #63]	; 0x3f
   10fb0:	str	r3, [r4, #68]	; 0x44
   10fb4:	ble	10fc8 <__assert_fail@plt+0xc0>
   10fb8:	ldr	r2, [r6, #4]
   10fbc:	ldrb	r1, [r2]
   10fc0:	cmp	r1, #45	; 0x2d
   10fc4:	beq	11178 <__assert_fail@plt+0x270>
   10fc8:	str	r3, [sp, #28]
   10fcc:	ldr	r9, [pc, #1236]	; 114a8 <__assert_fail@plt+0x5a0>
   10fd0:	movw	r8, #38528	; 0x9680
   10fd4:	movt	r8, #1
   10fd8:	movw	sl, #41296	; 0xa150
   10fdc:	movt	sl, #2
   10fe0:	mov	r3, #0
   10fe4:	str	r3, [sp, #24]
   10fe8:	mov	r5, #0
   10fec:	mov	r3, r9
   10ff0:	mov	r2, r8
   10ff4:	mov	r1, r6
   10ff8:	mov	r0, r7
   10ffc:	str	r5, [sp]
   11000:	bl	10df4 <getopt_long@plt>
   11004:	cmn	r0, #1
   11008:	beq	111a0 <__assert_fail@plt+0x298>
   1100c:	cmp	r0, #112	; 0x70
   11010:	beq	110e0 <__assert_fail@plt+0x1d8>
   11014:	ble	11038 <__assert_fail@plt+0x130>
   11018:	cmp	r0, #116	; 0x74
   1101c:	beq	1116c <__assert_fail@plt+0x264>
   11020:	ble	1106c <__assert_fail@plt+0x164>
   11024:	cmp	r0, #117	; 0x75
   11028:	bne	11058 <__assert_fail@plt+0x150>
   1102c:	mov	r3, #1
   11030:	strb	r3, [r4, #63]	; 0x3f
   11034:	b	10fe8 <__assert_fail@plt+0xe0>
   11038:	cmn	r0, #2
   1103c:	beq	1143c <__assert_fail@plt+0x534>
   11040:	ble	11094 <__assert_fail@plt+0x18c>
   11044:	cmp	r0, #99	; 0x63
   11048:	bne	11080 <__assert_fail@plt+0x178>
   1104c:	mov	r3, #1
   11050:	strb	r3, [r4, #61]	; 0x3d
   11054:	b	10fe8 <__assert_fail@plt+0xe0>
   11058:	cmp	r0, #119	; 0x77
   1105c:	bne	11424 <__assert_fail@plt+0x51c>
   11060:	ldr	r3, [sl]
   11064:	str	r3, [sp, #28]
   11068:	b	10fe8 <__assert_fail@plt+0xe0>
   1106c:	cmp	r0, #115	; 0x73
   11070:	bne	11424 <__assert_fail@plt+0x51c>
   11074:	mov	r3, #1
   11078:	strb	r3, [r4, #60]	; 0x3c
   1107c:	b	10fe8 <__assert_fail@plt+0xe0>
   11080:	cmp	r0, #103	; 0x67
   11084:	bne	11424 <__assert_fail@plt+0x51c>
   11088:	ldr	r3, [sl]
   1108c:	str	r3, [sp, #24]
   11090:	b	10fe8 <__assert_fail@plt+0xe0>
   11094:	cmn	r0, #3
   11098:	mov	r3, r0
   1109c:	bne	11428 <__assert_fail@plt+0x520>
   110a0:	movw	r2, #38512	; 0x9670
   110a4:	movt	r2, #1
   110a8:	movw	r3, #41192	; 0xa0e8
   110ac:	movt	r3, #2
   110b0:	movw	r0, #41292	; 0xa14c
   110b4:	movt	r0, #2
   110b8:	stm	sp, {r2, r5}
   110bc:	movw	r1, #37132	; 0x910c
   110c0:	movt	r1, #1
   110c4:	ldr	r0, [r0]
   110c8:	movw	r2, #38220	; 0x954c
   110cc:	movt	r2, #1
   110d0:	ldr	r3, [r3]
   110d4:	bl	1736c <__assert_fail@plt+0x6464>
   110d8:	mov	r0, r5
   110dc:	bl	10e0c <exit@plt>
   110e0:	ldr	r3, [sl]
   110e4:	str	r5, [r4, #56]	; 0x38
   110e8:	ldrb	r2, [r3]
   110ec:	mov	r5, r3
   110f0:	cmp	r2, #32
   110f4:	bne	11110 <__assert_fail@plt+0x208>
   110f8:	rsb	r1, r3, #1
   110fc:	add	r2, r5, r1
   11100:	ldrb	r3, [r5, #1]!
   11104:	cmp	r3, #32
   11108:	beq	110fc <__assert_fail@plt+0x1f4>
   1110c:	str	r2, [r4, #56]	; 0x38
   11110:	mov	r0, r5
   11114:	str	r5, [r4, #36]	; 0x24
   11118:	bl	10e18 <strlen@plt>
   1111c:	add	r1, r5, r0
   11120:	str	r0, [r4, #68]	; 0x44
   11124:	cmp	r5, r1
   11128:	bcs	11158 <__assert_fail@plt+0x250>
   1112c:	ldrb	r3, [r1, #-1]
   11130:	cmp	r3, #32
   11134:	bne	11158 <__assert_fail@plt+0x250>
   11138:	sub	r3, r1, #1
   1113c:	b	1114c <__assert_fail@plt+0x244>
   11140:	ldrb	r2, [r3, #-1]!
   11144:	cmp	r2, #32
   11148:	bne	11158 <__assert_fail@plt+0x250>
   1114c:	cmp	r5, r3
   11150:	mov	r1, r3
   11154:	bne	11140 <__assert_fail@plt+0x238>
   11158:	sub	r5, r1, r5
   1115c:	mov	r3, #0
   11160:	strb	r3, [r1]
   11164:	str	r5, [r4, #40]	; 0x28
   11168:	b	10fe8 <__assert_fail@plt+0xe0>
   1116c:	mov	r3, #1
   11170:	strb	r3, [r4, #62]	; 0x3e
   11174:	b	10fe8 <__assert_fail@plt+0xe0>
   11178:	ldrb	r1, [r2, #1]
   1117c:	sub	r1, r1, #48	; 0x30
   11180:	cmp	r1, #9
   11184:	bhi	10fc8 <__assert_fail@plt+0xc0>
   11188:	ldr	r3, [r6]
   1118c:	add	r2, r2, #1
   11190:	sub	r7, r7, #1
   11194:	str	r2, [sp, #28]
   11198:	str	r3, [r6, #4]!
   1119c:	b	10fcc <__assert_fail@plt+0xc4>
   111a0:	ldr	sl, [sp, #28]
   111a4:	cmp	sl, r5
   111a8:	beq	1138c <__assert_fail@plt+0x484>
   111ac:	mov	r2, #5
   111b0:	movw	r8, #2500	; 0x9c4
   111b4:	movw	r1, #38552	; 0x9698
   111b8:	movt	r1, #1
   111bc:	mov	r0, r5
   111c0:	mov	r9, #0
   111c4:	bl	10d4c <dcgettext@plt>
   111c8:	mov	r3, #0
   111cc:	mov	r2, #0
   111d0:	strd	r8, [sp]
   111d4:	str	fp, [sp, #8]
   111d8:	str	r0, [sp, #12]
   111dc:	mov	r0, sl
   111e0:	str	r5, [sp, #16]
   111e4:	bl	17cbc <__assert_fail@plt+0x6db4>
   111e8:	ldr	r3, [sp, #24]
   111ec:	mov	r8, r0
   111f0:	str	r0, [r4, #4]
   111f4:	cmp	r3, r5
   111f8:	beq	11398 <__assert_fail@plt+0x490>
   111fc:	asr	r9, r8, #31
   11200:	mov	r2, #5
   11204:	movw	r1, #38552	; 0x9698
   11208:	movt	r1, #1
   1120c:	mov	r0, r5
   11210:	bl	10d4c <dcgettext@plt>
   11214:	mov	r2, #0
   11218:	mov	r3, #0
   1121c:	strd	r8, [sp]
   11220:	str	fp, [sp, #8]
   11224:	str	r0, [sp, #12]
   11228:	str	r5, [sp, #16]
   1122c:	ldr	r0, [sp, #24]
   11230:	bl	17cbc <__assert_fail@plt+0x6db4>
   11234:	str	r0, [r4, #16]
   11238:	movw	r5, #41272	; 0xa138
   1123c:	movt	r5, #2
   11240:	ldr	r3, [r5]
   11244:	cmp	r3, r7
   11248:	beq	11404 <__assert_fail@plt+0x4fc>
   1124c:	movge	r4, #1
   11250:	bge	1131c <__assert_fail@plt+0x414>
   11254:	movw	r2, #38576	; 0x96b0
   11258:	movt	r2, #1
   1125c:	movw	r8, #38568	; 0x96a8
   11260:	movt	r8, #1
   11264:	str	r2, [sp, #36]	; 0x24
   11268:	mov	r2, #0
   1126c:	movw	r9, #38572	; 0x96ac
   11270:	movt	r9, #1
   11274:	mov	r4, #1
   11278:	str	r2, [sp, #24]
   1127c:	b	112b8 <__assert_fail@plt+0x3b0>
   11280:	mov	r3, #1
   11284:	movw	r2, #41288	; 0xa148
   11288:	movt	r2, #2
   1128c:	mov	r1, fp
   11290:	ldr	r0, [r2]
   11294:	str	r3, [sp, #24]
   11298:	bl	125bc <__assert_fail@plt+0x16b4>
   1129c:	and	r4, r4, r0
   112a0:	uxtb	r4, r4
   112a4:	ldr	r3, [r5]
   112a8:	add	r3, r3, #1
   112ac:	cmp	r3, r7
   112b0:	str	r3, [r5]
   112b4:	bge	112f8 <__assert_fail@plt+0x3f0>
   112b8:	ldr	fp, [r6, r3, lsl #2]
   112bc:	mov	r1, r8
   112c0:	mov	r0, fp
   112c4:	bl	10cbc <strcmp@plt>
   112c8:	cmp	r0, #0
   112cc:	beq	11280 <__assert_fail@plt+0x378>
   112d0:	mov	r1, r9
   112d4:	mov	r0, fp
   112d8:	bl	10ed8 <fopen64@plt>
   112dc:	subs	sl, r0, #0
   112e0:	beq	11340 <__assert_fail@plt+0x438>
   112e4:	mov	r1, fp
   112e8:	bl	125bc <__assert_fail@plt+0x16b4>
   112ec:	and	r4, r4, r0
   112f0:	uxtb	r4, r4
   112f4:	b	112a4 <__assert_fail@plt+0x39c>
   112f8:	ldr	r3, [sp, #24]
   112fc:	cmp	r3, #0
   11300:	beq	1131c <__assert_fail@plt+0x414>
   11304:	movw	r5, #41288	; 0xa148
   11308:	movt	r5, #2
   1130c:	ldr	r0, [r5]
   11310:	bl	13154 <__assert_fail@plt+0x224c>
   11314:	cmp	r0, #0
   11318:	bne	11474 <__assert_fail@plt+0x56c>
   1131c:	eor	r0, r4, #1
   11320:	uxtb	r0, r0
   11324:	add	sp, sp, #44	; 0x2c
   11328:	ldrd	r4, [sp]
   1132c:	ldrd	r6, [sp, #8]
   11330:	ldrd	r8, [sp, #16]
   11334:	ldrd	sl, [sp, #24]
   11338:	add	sp, sp, #32
   1133c:	pop	{pc}		; (ldr pc, [sp], #4)
   11340:	bl	10e30 <__errno_location@plt>
   11344:	ldr	r3, [r0]
   11348:	mov	r2, #5
   1134c:	mov	r0, sl
   11350:	mov	r4, sl
   11354:	ldr	r1, [sp, #36]	; 0x24
   11358:	str	r3, [sp, #28]
   1135c:	bl	10d4c <dcgettext@plt>
   11360:	mov	r2, r0
   11364:	mov	r1, fp
   11368:	mov	r0, #4
   1136c:	str	r2, [sp, #32]
   11370:	bl	1597c <__assert_fail@plt+0x4a74>
   11374:	mov	r3, r0
   11378:	mov	r0, sl
   1137c:	ldr	r1, [sp, #28]
   11380:	ldr	r2, [sp, #32]
   11384:	bl	10db8 <error@plt>
   11388:	b	112a4 <__assert_fail@plt+0x39c>
   1138c:	ldr	r3, [sp, #24]
   11390:	cmp	r3, #0
   11394:	bne	113b4 <__assert_fail@plt+0x4ac>
   11398:	ldr	r1, [r4, #4]
   1139c:	mov	r3, #187	; 0xbb
   113a0:	mov	r2, #200	; 0xc8
   113a4:	mul	r3, r3, r1
   113a8:	sdiv	r3, r3, r2
   113ac:	str	r3, [r4, #16]
   113b0:	b	11238 <__assert_fail@plt+0x330>
   113b4:	ldr	r5, [sp, #28]
   113b8:	mov	r2, #5
   113bc:	movw	r1, #38552	; 0x9698
   113c0:	movt	r1, #1
   113c4:	mov	r8, #75	; 0x4b
   113c8:	mov	r9, #0
   113cc:	mov	r0, r5
   113d0:	bl	10d4c <dcgettext@plt>
   113d4:	mov	r1, r5
   113d8:	mov	r3, #0
   113dc:	strd	r8, [sp]
   113e0:	mov	r2, #0
   113e4:	str	fp, [sp, #8]
   113e8:	strd	r0, [sp, #12]
   113ec:	ldr	r0, [sp, #24]
   113f0:	bl	17cbc <__assert_fail@plt+0x6db4>
   113f4:	add	r3, r0, #10
   113f8:	str	r3, [r4, #4]
   113fc:	str	r0, [r4, #16]
   11400:	b	11238 <__assert_fail@plt+0x330>
   11404:	movw	r5, #41288	; 0xa148
   11408:	movt	r5, #2
   1140c:	movw	r1, #38568	; 0x96a8
   11410:	movt	r1, #1
   11414:	ldr	r0, [r5]
   11418:	bl	125bc <__assert_fail@plt+0x16b4>
   1141c:	mov	r4, r0
   11420:	b	1130c <__assert_fail@plt+0x404>
   11424:	mov	r3, r0
   11428:	sub	r2, r3, #48	; 0x30
   1142c:	cmp	r2, #9
   11430:	bls	11444 <__assert_fail@plt+0x53c>
   11434:	mov	r0, #1
   11438:	bl	12c6c <__assert_fail@plt+0x1d64>
   1143c:	mov	r0, r5
   11440:	bl	12c6c <__assert_fail@plt+0x1d64>
   11444:	mov	r2, #5
   11448:	movw	r1, #38416	; 0x9610
   1144c:	movt	r1, #1
   11450:	mov	r0, #0
   11454:	str	r3, [sp, #24]
   11458:	bl	10d4c <dcgettext@plt>
   1145c:	mov	r1, #0
   11460:	mov	r2, r0
   11464:	ldr	r3, [sp, #24]
   11468:	mov	r0, r1
   1146c:	bl	10db8 <error@plt>
   11470:	b	11434 <__assert_fail@plt+0x52c>
   11474:	bl	10e30 <__errno_location@plt>
   11478:	ldr	r4, [r0]
   1147c:	mov	r2, #5
   11480:	movw	r1, #38604	; 0x96cc
   11484:	movt	r1, #1
   11488:	mov	r0, #0
   1148c:	bl	10d4c <dcgettext@plt>
   11490:	mov	r3, r0
   11494:	movw	r2, #38864	; 0x97d0
   11498:	movt	r2, #1
   1149c:	mov	r0, #1
   114a0:	mov	r1, r4
   114a4:	bl	10db8 <error@plt>
   114a8:	andeq	r9, r1, ip, lsr #32
   114ac:	mov	fp, #0
   114b0:	mov	lr, #0
   114b4:	pop	{r1}		; (ldr r1, [sp], #4)
   114b8:	mov	r2, sp
   114bc:	push	{r2}		; (str r2, [sp, #-4]!)
   114c0:	push	{r0}		; (str r0, [sp, #-4]!)
   114c4:	ldr	ip, [pc, #16]	; 114dc <__assert_fail@plt+0x5d4>
   114c8:	push	{ip}		; (str ip, [sp, #-4]!)
   114cc:	ldr	r0, [pc, #12]	; 114e0 <__assert_fail@plt+0x5d8>
   114d0:	ldr	r3, [pc, #12]	; 114e4 <__assert_fail@plt+0x5dc>
   114d4:	bl	10dd0 <__libc_start_main@plt>
   114d8:	bl	10efc <abort@plt>
   114dc:			; <UNDEFINED> instruction: 0x00018fbc
   114e0:	andeq	r0, r1, r4, lsl pc
   114e4:	andeq	r8, r1, ip, asr pc
   114e8:	ldr	r3, [pc, #20]	; 11504 <__assert_fail@plt+0x5fc>
   114ec:	ldr	r2, [pc, #20]	; 11508 <__assert_fail@plt+0x600>
   114f0:	add	r3, pc, r3
   114f4:	ldr	r2, [r3, r2]
   114f8:	cmp	r2, #0
   114fc:	bxeq	lr
   11500:	b	10de8 <__gmon_start__@plt>
   11504:	andeq	r8, r1, r8, lsl #22
   11508:	ldrdeq	r0, [r0], -ip
   1150c:	ldr	r0, [pc, #24]	; 1152c <__assert_fail@plt+0x624>
   11510:	ldr	r3, [pc, #24]	; 11530 <__assert_fail@plt+0x628>
   11514:	cmp	r3, r0
   11518:	bxeq	lr
   1151c:	ldr	r3, [pc, #16]	; 11534 <__assert_fail@plt+0x62c>
   11520:	cmp	r3, #0
   11524:	bxeq	lr
   11528:	bx	r3
   1152c:	andeq	sl, r2, r0, lsr r1
   11530:	andeq	sl, r2, r0, lsr r1
   11534:	andeq	r0, r0, r0
   11538:	ldr	r0, [pc, #36]	; 11564 <__assert_fail@plt+0x65c>
   1153c:	ldr	r1, [pc, #36]	; 11568 <__assert_fail@plt+0x660>
   11540:	sub	r1, r1, r0
   11544:	asr	r1, r1, #2
   11548:	add	r1, r1, r1, lsr #31
   1154c:	asrs	r1, r1, #1
   11550:	bxeq	lr
   11554:	ldr	r3, [pc, #16]	; 1156c <__assert_fail@plt+0x664>
   11558:	cmp	r3, #0
   1155c:	bxeq	lr
   11560:	bx	r3
   11564:	andeq	sl, r2, r0, lsr r1
   11568:	andeq	sl, r2, r0, lsr r1
   1156c:	andeq	r0, r0, r0
   11570:	push	{r4, lr}
   11574:	ldr	r4, [pc, #24]	; 11594 <__assert_fail@plt+0x68c>
   11578:	ldrb	r3, [r4]
   1157c:	cmp	r3, #0
   11580:	popne	{r4, pc}
   11584:	bl	1150c <__assert_fail@plt+0x604>
   11588:	mov	r3, #1
   1158c:	strb	r3, [r4]
   11590:	pop	{r4, pc}
   11594:	andeq	sl, r2, r4, asr r1
   11598:	b	11538 <__assert_fail@plt+0x630>
   1159c:	movw	r3, #41304	; 0xa158
   115a0:	movt	r3, #2
   115a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   115a8:	ldr	r1, [r3]
   115ac:	mov	r2, #0
   115b0:	strd	r6, [sp, #8]
   115b4:	strd	r8, [sp, #16]
   115b8:	movw	r8, #41376	; 0xa1a0
   115bc:	movt	r8, #2
   115c0:	strd	sl, [sp, #24]
   115c4:	str	lr, [sp, #32]
   115c8:	sub	sp, sp, #28
   115cc:	str	r2, [r1, #20]
   115d0:	sub	lr, r1, #28
   115d4:	ldr	r2, [r1, #4]
   115d8:	cmp	lr, r8
   115dc:	ldr	r7, [r3, #4]
   115e0:	str	r2, [sp, #20]
   115e4:	str	r7, [r1, #4]
   115e8:	bcc	1198c <__assert_fail@plt+0xa84>
   115ec:	ldr	r2, [r3, #8]
   115f0:	ldr	r6, [r3, #16]
   115f4:	ldr	r9, [r3, #20]
   115f8:	str	r2, [sp, #4]
   115fc:	ldr	r2, [r3, #12]
   11600:	str	r2, [sp, #8]
   11604:	bls	11728 <__assert_fail@plt+0x820>
   11608:	mvn	fp, lr
   1160c:	movw	r3, #37220	; 0x9164
   11610:	movt	r3, #5
   11614:	add	fp, r8, fp
   11618:	add	fp, lr, fp
   1161c:	mov	r5, #100	; 0x64
   11620:	cmp	fp, r8
   11624:	str	r3, [sp, #16]
   11628:	movcc	fp, r8
   1162c:	cmp	lr, r8
   11630:	beq	119b0 <__assert_fail@plt+0xaa8>
   11634:	ldr	r3, [sp, #4]
   11638:	mov	r2, lr
   1163c:	mvn	r4, #-2147483648	; 0x80000000
   11640:	ldr	sl, [lr, #4]
   11644:	add	ip, r3, sl
   11648:	b	116a4 <__assert_fail@plt+0x79c>
   1164c:	ldr	r0, [r2, #24]
   11650:	mul	r3, r5, r3
   11654:	cmp	r1, r0
   11658:	beq	11670 <__assert_fail@plt+0x768>
   1165c:	ldr	r0, [r2, #16]
   11660:	sub	r0, ip, r0
   11664:	mul	r0, r0, r0
   11668:	mul	r0, r5, r0
   1166c:	add	r3, r3, r0, asr #1
   11670:	ldr	r0, [r2, #20]
   11674:	add	r3, r3, r0
   11678:	cmp	r4, r3
   1167c:	ble	1168c <__assert_fail@plt+0x784>
   11680:	mov	r4, r3
   11684:	str	ip, [lr, #16]
   11688:	str	r2, [lr, #24]
   1168c:	ldr	r0, [r2, #-20]	; 0xffffffec
   11690:	ldr	r3, [r2, #4]
   11694:	add	r3, r3, r0
   11698:	add	ip, ip, r3
   1169c:	cmp	r7, ip
   116a0:	ble	116cc <__assert_fail@plt+0x7c4>
   116a4:	sub	r3, r6, ip
   116a8:	add	r2, r2, #28
   116ac:	cmp	r1, r2
   116b0:	mul	r3, r3, r3
   116b4:	bne	1164c <__assert_fail@plt+0x744>
   116b8:	ldr	r3, [r1, #20]
   116bc:	cmp	r4, r3
   116c0:	movgt	r4, r3
   116c4:	strgt	ip, [lr, #16]
   116c8:	strgt	r1, [lr, #24]
   116cc:	ldrb	r3, [lr, #-16]
   116d0:	tst	r3, #2
   116d4:	beq	11b10 <__assert_fail@plt+0xc08>
   116d8:	tst	r3, #8
   116dc:	ldr	r3, [sp, #16]
   116e0:	movne	r3, #2400	; 0x960
   116e4:	ldrb	r2, [lr, #12]
   116e8:	tst	r2, #1
   116ec:	subne	r3, r3, #1600	; 0x640
   116f0:	bne	1170c <__assert_fail@plt+0x804>
   116f4:	tst	r2, #8
   116f8:	beq	1170c <__assert_fail@plt+0x804>
   116fc:	add	sl, sl, #2
   11700:	movw	r2, #22500	; 0x57e4
   11704:	sdiv	sl, r2, sl
   11708:	add	r3, r3, sl
   1170c:	add	r4, r3, r4
   11710:	sub	lr, lr, #28
   11714:	str	r4, [lr, #48]	; 0x30
   11718:	cmp	lr, fp
   1171c:	bhi	1162c <__assert_fail@plt+0x724>
   11720:	cmp	lr, r8
   11724:	bcc	1198c <__assert_fail@plt+0xa84>
   11728:	cmp	lr, r8
   1172c:	ldr	fp, [pc, #1076]	; 11b68 <__assert_fail@plt+0xc60>
   11730:	mov	sl, #100	; 0x64
   11734:	beq	117fc <__assert_fail@plt+0x8f4>
   11738:	ldr	r3, [sp, #4]
   1173c:	mov	r2, lr
   11740:	mvn	r4, #-2147483648	; 0x80000000
   11744:	ldr	r5, [lr, #4]
   11748:	add	ip, r3, r5
   1174c:	b	117a8 <__assert_fail@plt+0x8a0>
   11750:	ldr	r0, [r2, #24]
   11754:	mul	r3, sl, r3
   11758:	cmp	r1, r0
   1175c:	beq	11774 <__assert_fail@plt+0x86c>
   11760:	ldr	r0, [r2, #16]
   11764:	sub	r0, ip, r0
   11768:	mul	r0, r0, r0
   1176c:	mul	r0, sl, r0
   11770:	add	r3, r3, r0, asr #1
   11774:	ldr	r0, [r2, #20]
   11778:	add	r3, r3, r0
   1177c:	cmp	r4, r3
   11780:	ble	11790 <__assert_fail@plt+0x888>
   11784:	mov	r4, r3
   11788:	str	ip, [lr, #16]
   1178c:	str	r2, [lr, #24]
   11790:	ldr	r3, [r2, #-20]	; 0xffffffec
   11794:	ldr	r0, [r2, #4]
   11798:	add	r3, r3, r0
   1179c:	add	ip, ip, r3
   117a0:	cmp	r7, ip
   117a4:	ble	117d0 <__assert_fail@plt+0x8c8>
   117a8:	sub	r3, r6, ip
   117ac:	add	r2, r2, #28
   117b0:	cmp	r1, r2
   117b4:	mul	r3, r3, r3
   117b8:	bne	11750 <__assert_fail@plt+0x848>
   117bc:	ldr	r3, [r1, #20]
   117c0:	cmp	r4, r3
   117c4:	movgt	r4, r3
   117c8:	strgt	ip, [lr, #16]
   117cc:	strgt	r1, [lr, #24]
   117d0:	ldrb	r3, [lr, #12]
   117d4:	tst	r3, #1
   117d8:	movwne	r3, #3300	; 0xce4
   117dc:	beq	1195c <__assert_fail@plt+0xa54>
   117e0:	add	r4, r3, r4
   117e4:	sub	lr, lr, #28
   117e8:	str	r4, [lr, #48]	; 0x30
   117ec:	cmp	lr, r8
   117f0:	bcc	1198c <__assert_fail@plt+0xa84>
   117f4:	cmp	lr, r8
   117f8:	bne	11738 <__assert_fail@plt+0x830>
   117fc:	ldr	r5, [lr, #4]
   11800:	cmp	r9, #0
   11804:	mov	r0, lr
   11808:	mvn	r4, #-2147483648	; 0x80000000
   1180c:	ldr	r3, [sp, #8]
   11810:	strgt	lr, [sp, #12]
   11814:	add	r2, r3, r5
   11818:	bgt	11894 <__assert_fail@plt+0x98c>
   1181c:	b	11930 <__assert_fail@plt+0xa28>
   11820:	ldr	ip, [r0, #24]
   11824:	mul	r3, sl, r3
   11828:	cmp	r1, ip
   1182c:	beq	11844 <__assert_fail@plt+0x93c>
   11830:	ldr	ip, [r0, #16]
   11834:	sub	ip, r2, ip
   11838:	mul	ip, ip, ip
   1183c:	mul	ip, sl, ip
   11840:	add	r3, r3, ip, asr #1
   11844:	sub	ip, r2, r9
   11848:	ldr	lr, [r0, #20]
   1184c:	mul	ip, ip, ip
   11850:	mul	ip, sl, ip
   11854:	add	r3, r3, lr
   11858:	add	ip, r3, ip, asr #1
   1185c:	cmp	r4, ip
   11860:	ble	1187c <__assert_fail@plt+0x974>
   11864:	mov	r4, ip
   11868:	ldr	r3, [pc, #764]	; 11b6c <__assert_fail@plt+0xc64>
   1186c:	cmp	r1, r0
   11870:	str	r0, [fp]
   11874:	str	r2, [r3]
   11878:	beq	11b58 <__assert_fail@plt+0xc50>
   1187c:	ldr	r3, [r0, #-20]	; 0xffffffec
   11880:	ldr	ip, [r0, #4]
   11884:	add	r3, r3, ip
   11888:	add	r2, r2, r3
   1188c:	cmp	r7, r2
   11890:	ble	11b58 <__assert_fail@plt+0xc50>
   11894:	sub	r3, r6, r2
   11898:	add	r0, r0, #28
   1189c:	cmp	r1, r0
   118a0:	mul	r3, r3, r3
   118a4:	bne	11820 <__assert_fail@plt+0x918>
   118a8:	sub	r3, r2, r9
   118ac:	ldr	ip, [r1, #20]
   118b0:	mul	r3, r3, r3
   118b4:	mul	r3, sl, r3
   118b8:	add	r3, ip, r3, asr #1
   118bc:	cmp	r4, r3
   118c0:	ble	11b58 <__assert_fail@plt+0xc50>
   118c4:	mov	r4, r3
   118c8:	b	11868 <__assert_fail@plt+0x960>
   118cc:	ldr	ip, [r0, #24]
   118d0:	mul	r3, sl, r3
   118d4:	cmp	r1, ip
   118d8:	beq	118f0 <__assert_fail@plt+0x9e8>
   118dc:	ldr	ip, [r0, #16]
   118e0:	sub	ip, r2, ip
   118e4:	mul	ip, ip, ip
   118e8:	mul	ip, sl, ip
   118ec:	add	r3, r3, ip, asr #1
   118f0:	ldr	ip, [r0, #20]
   118f4:	add	r3, r3, ip
   118f8:	cmp	r4, r3
   118fc:	ble	11918 <__assert_fail@plt+0xa10>
   11900:	mov	r4, r3
   11904:	ldr	r3, [pc, #608]	; 11b6c <__assert_fail@plt+0xc64>
   11908:	cmp	r1, r0
   1190c:	str	r0, [fp]
   11910:	str	r2, [r3]
   11914:	beq	11950 <__assert_fail@plt+0xa48>
   11918:	ldr	r3, [r0, #-20]	; 0xffffffec
   1191c:	ldr	ip, [r0, #4]
   11920:	add	r3, r3, ip
   11924:	add	r2, r2, r3
   11928:	cmp	r7, r2
   1192c:	ble	11950 <__assert_fail@plt+0xa48>
   11930:	sub	r3, r6, r2
   11934:	add	r0, r0, #28
   11938:	cmp	r1, r0
   1193c:	mul	r3, r3, r3
   11940:	bne	118cc <__assert_fail@plt+0x9c4>
   11944:	ldr	r3, [r1, #20]
   11948:	cmp	r3, r4
   1194c:	blt	11900 <__assert_fail@plt+0x9f8>
   11950:	ldrb	r3, [r8, #12]
   11954:	tst	r3, #1
   11958:	bne	11980 <__assert_fail@plt+0xa78>
   1195c:	tst	r3, #8
   11960:	movweq	r3, #4900	; 0x1324
   11964:	beq	117e0 <__assert_fail@plt+0x8d8>
   11968:	add	r3, r5, #2
   1196c:	movw	r2, #22500	; 0x57e4
   11970:	sdiv	r3, r2, r3
   11974:	add	r3, r3, #4864	; 0x1300
   11978:	add	r3, r3, #36	; 0x24
   1197c:	b	117e0 <__assert_fail@plt+0x8d8>
   11980:	add	r4, r4, #3296	; 0xce0
   11984:	add	r4, r4, #4
   11988:	str	r4, [r8, #20]
   1198c:	ldr	r3, [sp, #20]
   11990:	str	r3, [r1, #4]
   11994:	add	sp, sp, #28
   11998:	ldrd	r4, [sp]
   1199c:	ldrd	r6, [sp, #8]
   119a0:	ldrd	r8, [sp, #16]
   119a4:	ldrd	sl, [sp, #24]
   119a8:	add	sp, sp, #32
   119ac:	pop	{pc}		; (ldr pc, [sp], #4)
   119b0:	ldr	sl, [lr, #4]
   119b4:	cmp	r9, #0
   119b8:	mov	r0, lr
   119bc:	mvn	r4, #-2147483648	; 0x80000000
   119c0:	ldr	r3, [sp, #8]
   119c4:	strgt	lr, [sp, #12]
   119c8:	add	r2, r3, sl
   119cc:	bgt	11a40 <__assert_fail@plt+0xb38>
   119d0:	b	11ae4 <__assert_fail@plt+0xbdc>
   119d4:	ldr	ip, [r0, #24]
   119d8:	mul	r3, r5, r3
   119dc:	cmp	r1, ip
   119e0:	beq	119f8 <__assert_fail@plt+0xaf0>
   119e4:	ldr	ip, [r0, #16]
   119e8:	sub	ip, r2, ip
   119ec:	mul	ip, ip, ip
   119f0:	mul	ip, r5, ip
   119f4:	add	r3, r3, ip, asr #1
   119f8:	sub	ip, r2, r9
   119fc:	ldr	lr, [r0, #20]
   11a00:	mul	ip, ip, ip
   11a04:	mul	ip, r5, ip
   11a08:	add	r3, r3, lr
   11a0c:	add	ip, r3, ip, asr #1
   11a10:	cmp	r4, ip
   11a14:	ble	11a28 <__assert_fail@plt+0xb20>
   11a18:	ldr	r3, [pc, #332]	; 11b6c <__assert_fail@plt+0xc64>
   11a1c:	mov	r4, ip
   11a20:	str	r2, [r3]
   11a24:	str	r0, [r3, #8]
   11a28:	ldr	r3, [r0, #-20]	; 0xffffffec
   11a2c:	ldr	ip, [r0, #4]
   11a30:	add	r3, r3, ip
   11a34:	add	r2, r2, r3
   11a38:	cmp	r7, r2
   11a3c:	ble	11b60 <__assert_fail@plt+0xc58>
   11a40:	sub	r3, r6, r2
   11a44:	add	r0, r0, #28
   11a48:	cmp	r1, r0
   11a4c:	mul	r3, r3, r3
   11a50:	bne	119d4 <__assert_fail@plt+0xacc>
   11a54:	sub	r3, r2, r9
   11a58:	ldr	r0, [r1, #20]
   11a5c:	mul	r3, r3, r3
   11a60:	ldr	lr, [sp, #12]
   11a64:	mul	r3, r5, r3
   11a68:	add	r3, r0, r3, asr #1
   11a6c:	cmp	r4, r3
   11a70:	ble	116cc <__assert_fail@plt+0x7c4>
   11a74:	ldr	r0, [pc, #240]	; 11b6c <__assert_fail@plt+0xc64>
   11a78:	mov	r4, r3
   11a7c:	str	r2, [r0]
   11a80:	str	r1, [r0, #8]
   11a84:	b	116cc <__assert_fail@plt+0x7c4>
   11a88:	ldr	ip, [r0, #24]
   11a8c:	mul	r3, r5, r3
   11a90:	cmp	r1, ip
   11a94:	beq	11aac <__assert_fail@plt+0xba4>
   11a98:	ldr	ip, [r0, #16]
   11a9c:	sub	ip, r2, ip
   11aa0:	mul	ip, ip, ip
   11aa4:	mul	ip, r5, ip
   11aa8:	add	r3, r3, ip, asr #1
   11aac:	ldr	ip, [r0, #20]
   11ab0:	add	r3, r3, ip
   11ab4:	cmp	r4, r3
   11ab8:	ble	11acc <__assert_fail@plt+0xbc4>
   11abc:	ldr	ip, [pc, #168]	; 11b6c <__assert_fail@plt+0xc64>
   11ac0:	mov	r4, r3
   11ac4:	str	r2, [ip]
   11ac8:	str	r0, [ip, #8]
   11acc:	ldr	r3, [r0, #-20]	; 0xffffffec
   11ad0:	ldr	ip, [r0, #4]
   11ad4:	add	r3, r3, ip
   11ad8:	add	r2, r2, r3
   11adc:	cmp	r7, r2
   11ae0:	ble	116cc <__assert_fail@plt+0x7c4>
   11ae4:	sub	r3, r6, r2
   11ae8:	add	r0, r0, #28
   11aec:	cmp	r1, r0
   11af0:	mul	r3, r3, r3
   11af4:	bne	11a88 <__assert_fail@plt+0xb80>
   11af8:	ldr	r3, [r1, #20]
   11afc:	cmp	r4, r3
   11b00:	bgt	11a74 <__assert_fail@plt+0xb6c>
   11b04:	ldrb	r3, [lr, #-16]
   11b08:	tst	r3, #2
   11b0c:	bne	116d8 <__assert_fail@plt+0x7d0>
   11b10:	tst	r3, #4
   11b14:	movwne	r3, #3300	; 0xce4
   11b18:	bne	116e4 <__assert_fail@plt+0x7dc>
   11b1c:	ldr	r3, [pc, #76]	; 11b70 <__assert_fail@plt+0xc68>
   11b20:	cmp	lr, r3
   11b24:	bls	11b50 <__assert_fail@plt+0xc48>
   11b28:	ldrb	r3, [lr, #-44]	; 0xffffffd4
   11b2c:	tst	r3, #8
   11b30:	beq	11b50 <__assert_fail@plt+0xc48>
   11b34:	ldr	r3, [lr, #-24]	; 0xffffffe8
   11b38:	movw	r2, #40000	; 0x9c40
   11b3c:	add	r3, r3, #2
   11b40:	sdiv	r3, r2, r3
   11b44:	add	r3, r3, #4864	; 0x1300
   11b48:	add	r3, r3, #36	; 0x24
   11b4c:	b	116e4 <__assert_fail@plt+0x7dc>
   11b50:	movw	r3, #4900	; 0x1324
   11b54:	b	116e4 <__assert_fail@plt+0x7dc>
   11b58:	ldr	lr, [sp, #12]
   11b5c:	b	11950 <__assert_fail@plt+0xa48>
   11b60:	ldr	lr, [sp, #12]
   11b64:	b	116cc <__assert_fail@plt+0x7c4>
   11b68:			; <UNDEFINED> instruction: 0x0002a1b8
   11b6c:			; <UNDEFINED> instruction: 0x0002a1b0
   11b70:			; <UNDEFINED> instruction: 0x0002a1bc
   11b74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11b78:	movw	r4, #41304	; 0xa158
   11b7c:	movt	r4, #2
   11b80:	ldrb	r3, [r4, #28]
   11b84:	strd	r6, [sp, #8]
   11b88:	ldr	r2, [r4, #24]
   11b8c:	str	r8, [sp, #16]
   11b90:	str	lr, [sp, #20]
   11b94:	cmp	r3, #0
   11b98:	add	r6, r2, r0
   11b9c:	beq	11c18 <__assert_fail@plt+0xd10>
   11ba0:	cmp	r6, #0
   11ba4:	add	r7, r6, #7
   11ba8:	movge	r7, r6
   11bac:	add	r3, r2, #1
   11bb0:	asr	r7, r7, #3
   11bb4:	lsl	r1, r7, #3
   11bb8:	cmp	r3, r1
   11bbc:	bge	11c18 <__assert_fail@plt+0xd10>
   11bc0:	cmp	r2, r1
   11bc4:	bge	11c18 <__assert_fail@plt+0xd10>
   11bc8:	movw	r5, #41292	; 0xa14c
   11bcc:	movt	r5, #2
   11bd0:	mov	r8, #9
   11bd4:	ldr	r0, [r5]
   11bd8:	ldrd	r2, [r0, #20]
   11bdc:	cmp	r2, r3
   11be0:	add	r1, r2, #1
   11be4:	bcs	11c90 <__assert_fail@plt+0xd88>
   11be8:	ldr	r3, [r4, #24]
   11bec:	str	r1, [r0, #20]
   11bf0:	strb	r8, [r2]
   11bf4:	add	r2, r3, #7
   11bf8:	cmp	r3, #0
   11bfc:	movlt	r3, r2
   11c00:	asr	r3, r3, #3
   11c04:	add	r3, r3, #1
   11c08:	lsl	r2, r3, #3
   11c0c:	cmp	r7, r3
   11c10:	str	r2, [r4, #24]
   11c14:	bgt	11bd4 <__assert_fail@plt+0xccc>
   11c18:	cmp	r6, r2
   11c1c:	ble	11c7c <__assert_fail@plt+0xd74>
   11c20:	movw	r5, #41292	; 0xa14c
   11c24:	movt	r5, #2
   11c28:	mov	r7, #32
   11c2c:	b	11c4c <__assert_fail@plt+0xd44>
   11c30:	ldr	r3, [r4, #24]
   11c34:	str	r1, [r0, #20]
   11c38:	strb	r7, [r2]
   11c3c:	add	r3, r3, #1
   11c40:	cmp	r3, r6
   11c44:	str	r3, [r4, #24]
   11c48:	bge	11c7c <__assert_fail@plt+0xd74>
   11c4c:	ldr	r0, [r5]
   11c50:	ldrd	r2, [r0, #20]
   11c54:	cmp	r2, r3
   11c58:	add	r1, r2, #1
   11c5c:	bcc	11c30 <__assert_fail@plt+0xd28>
   11c60:	mov	r1, #32
   11c64:	bl	10e9c <__overflow@plt>
   11c68:	ldr	r3, [r4, #24]
   11c6c:	add	r3, r3, #1
   11c70:	cmp	r6, r3
   11c74:	str	r3, [r4, #24]
   11c78:	bgt	11c4c <__assert_fail@plt+0xd44>
   11c7c:	ldrd	r4, [sp]
   11c80:	ldrd	r6, [sp, #8]
   11c84:	ldr	r8, [sp, #16]
   11c88:	add	sp, sp, #20
   11c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c90:	mov	r1, #9
   11c94:	bl	10e9c <__overflow@plt>
   11c98:	ldr	r3, [r4, #24]
   11c9c:	b	11bf4 <__assert_fail@plt+0xcec>
   11ca0:	mov	r3, #0
   11ca4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ca8:	mov	r4, r1
   11cac:	strd	r6, [sp, #8]
   11cb0:	movw	r7, #41292	; 0xa14c
   11cb4:	movt	r7, #2
   11cb8:	strd	sl, [sp, #24]
   11cbc:	movw	fp, #41304	; 0xa158
   11cc0:	movt	fp, #2
   11cc4:	strd	r8, [sp, #16]
   11cc8:	mov	r9, r0
   11ccc:	str	lr, [sp, #32]
   11cd0:	sub	sp, sp, #4
   11cd4:	ldr	r0, [fp, #32]
   11cd8:	str	r3, [fp, #24]
   11cdc:	bl	11b74 <__assert_fail@plt+0xc6c>
   11ce0:	ldr	r1, [r7]
   11ce4:	ldr	r0, [fp, #36]	; 0x24
   11ce8:	bl	10cb0 <fputs_unlocked@plt>
   11cec:	ldr	r3, [fp, #24]
   11cf0:	ldr	r2, [fp, #40]	; 0x28
   11cf4:	add	r3, r3, r2
   11cf8:	sub	r0, r4, r3
   11cfc:	str	r3, [fp, #24]
   11d00:	bl	11b74 <__assert_fail@plt+0xc6c>
   11d04:	ldr	r8, [r9, #24]
   11d08:	sub	r6, r8, #28
   11d0c:	cmp	r9, r6
   11d10:	beq	11da4 <__assert_fail@plt+0xe9c>
   11d14:	mov	r4, r9
   11d18:	ldr	sl, [r4]
   11d1c:	ldr	r3, [r4, #4]
   11d20:	cmp	r3, #0
   11d24:	beq	11d5c <__assert_fail@plt+0xe54>
   11d28:	add	r5, sl, r3
   11d2c:	ldr	r0, [r7]
   11d30:	ldrb	r1, [sl], #1
   11d34:	ldr	r3, [r0, #20]
   11d38:	ldr	ip, [r0, #24]
   11d3c:	add	r2, r3, #1
   11d40:	cmp	r3, ip
   11d44:	strcc	r2, [r0, #20]
   11d48:	strbcc	r1, [r3]
   11d4c:	bcs	11e34 <__assert_fail@plt+0xf2c>
   11d50:	cmp	sl, r5
   11d54:	bne	11d2c <__assert_fail@plt+0xe24>
   11d58:	ldr	r3, [r4, #4]
   11d5c:	add	r4, r4, #28
   11d60:	ldr	r2, [fp, #24]
   11d64:	ldr	r0, [r4, #-20]	; 0xffffffec
   11d68:	add	r3, r2, r3
   11d6c:	str	r3, [fp, #24]
   11d70:	bl	11b74 <__assert_fail@plt+0xc6c>
   11d74:	cmp	r6, r4
   11d78:	bne	11d18 <__assert_fail@plt+0xe10>
   11d7c:	sub	r8, r8, r9
   11d80:	movw	r6, #28087	; 0x6db7
   11d84:	movt	r6, #14043	; 0x36db
   11d88:	sub	r8, r8, #56	; 0x38
   11d8c:	lsr	r8, r8, #2
   11d90:	mul	r6, r6, r8
   11d94:	bic	r6, r6, #-1073741824	; 0xc0000000
   11d98:	add	r6, r6, #1
   11d9c:	rsb	r6, r6, r6, lsl #3
   11da0:	add	r6, r9, r6, lsl #2
   11da4:	ldrd	r4, [r6]
   11da8:	cmp	r5, #0
   11dac:	beq	11de4 <__assert_fail@plt+0xedc>
   11db0:	add	r5, r4, r5
   11db4:	ldr	r0, [r7]
   11db8:	ldrb	r1, [r4], #1
   11dbc:	ldr	r3, [r0, #20]
   11dc0:	ldr	r2, [r0, #24]
   11dc4:	add	ip, r3, #1
   11dc8:	cmp	r3, r2
   11dcc:	strcc	ip, [r0, #20]
   11dd0:	strbcc	r1, [r3]
   11dd4:	bcs	11e3c <__assert_fail@plt+0xf34>
   11dd8:	cmp	r4, r5
   11ddc:	bne	11db4 <__assert_fail@plt+0xeac>
   11de0:	ldr	r5, [r6, #4]
   11de4:	ldr	r0, [r7]
   11de8:	ldr	r1, [fp, #24]
   11dec:	ldr	r3, [r0, #20]
   11df0:	ldr	r2, [r0, #24]
   11df4:	add	r5, r5, r1
   11df8:	str	r5, [fp, #20]
   11dfc:	str	r5, [fp, #24]
   11e00:	cmp	r3, r2
   11e04:	bcs	11e44 <__assert_fail@plt+0xf3c>
   11e08:	add	r1, r3, #1
   11e0c:	mov	r2, #10
   11e10:	str	r1, [r0, #20]
   11e14:	strb	r2, [r3]
   11e18:	add	sp, sp, #4
   11e1c:	ldrd	r4, [sp]
   11e20:	ldrd	r6, [sp, #8]
   11e24:	ldrd	r8, [sp, #16]
   11e28:	ldrd	sl, [sp, #24]
   11e2c:	add	sp, sp, #32
   11e30:	pop	{pc}		; (ldr pc, [sp], #4)
   11e34:	bl	10e9c <__overflow@plt>
   11e38:	b	11d50 <__assert_fail@plt+0xe48>
   11e3c:	bl	10e9c <__overflow@plt>
   11e40:	b	11dd8 <__assert_fail@plt+0xed0>
   11e44:	mov	r1, #10
   11e48:	add	sp, sp, #4
   11e4c:	ldrd	r4, [sp]
   11e50:	ldrd	r6, [sp, #8]
   11e54:	ldrd	r8, [sp, #16]
   11e58:	ldrd	sl, [sp, #24]
   11e5c:	ldr	lr, [sp, #32]
   11e60:	add	sp, sp, #36	; 0x24
   11e64:	b	10e9c <__overflow@plt>
   11e68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11e6c:	strd	r6, [sp, #8]
   11e70:	movw	r6, #41304	; 0xa158
   11e74:	movt	r6, #2
   11e78:	ldr	r5, [r6]
   11e7c:	movw	r7, #41376	; 0xa1a0
   11e80:	movt	r7, #2
   11e84:	strd	r8, [sp, #16]
   11e88:	str	sl, [sp, #24]
   11e8c:	str	lr, [sp, #28]
   11e90:	cmp	r5, r7
   11e94:	beq	11fb8 <__assert_fail@plt+0x10b0>
   11e98:	bl	1159c <__assert_fail@plt+0x694>
   11e9c:	ldr	r2, [r7, #24]
   11ea0:	cmp	r5, r2
   11ea4:	beq	11fe8 <__assert_fail@plt+0x10e0>
   11ea8:	ldr	lr, [r2, #20]
   11eac:	mov	r4, r5
   11eb0:	mvn	r3, #-2147483648	; 0x80000000
   11eb4:	ldr	r1, [r2, #24]
   11eb8:	ldr	ip, [r1, #20]
   11ebc:	sub	r0, lr, ip
   11ec0:	mov	lr, ip
   11ec4:	cmp	r0, r3
   11ec8:	movlt	r3, r0
   11ecc:	movlt	r4, r2
   11ed0:	cmn	r3, #-2147483638	; 0x8000000a
   11ed4:	mov	r2, r1
   11ed8:	addle	r3, r3, #9
   11edc:	cmp	r5, r1
   11ee0:	bne	11eb4 <__assert_fail@plt+0xfac>
   11ee4:	movw	r0, #41376	; 0xa1a0
   11ee8:	movt	r0, #2
   11eec:	ldr	r1, [r6, #12]
   11ef0:	bl	11ca0 <__assert_fail@plt+0xd98>
   11ef4:	ldr	r5, [r7, #24]
   11ef8:	cmp	r5, r4
   11efc:	beq	11f18 <__assert_fail@plt+0x1010>
   11f00:	mov	r0, r5
   11f04:	ldr	r1, [r6, #8]
   11f08:	bl	11ca0 <__assert_fail@plt+0xd98>
   11f0c:	ldr	r5, [r5, #24]
   11f10:	cmp	r5, r4
   11f14:	bne	11f00 <__assert_fail@plt+0xff8>
   11f18:	ldr	r2, [r4]
   11f1c:	movw	r8, #3840	; 0xf00
   11f20:	movt	r8, #3
   11f24:	movw	r3, #5000	; 0x1388
   11f28:	mov	r0, r8
   11f2c:	ldr	r9, [r6, #44]	; 0x2c
   11f30:	mov	r1, r2
   11f34:	sub	r2, r9, r2
   11f38:	bl	10ce0 <__memmove_chk@plt>
   11f3c:	ldr	r0, [r4]
   11f40:	ldr	r5, [r6]
   11f44:	sub	r0, r8, r0
   11f48:	add	r9, r9, r0
   11f4c:	cmp	r5, r4
   11f50:	addcs	r3, r4, #28
   11f54:	str	r9, [r6, #44]	; 0x2c
   11f58:	bcc	11f74 <__assert_fail@plt+0x106c>
   11f5c:	ldr	r2, [r3, #-28]	; 0xffffffe4
   11f60:	cmp	r3, r5
   11f64:	add	r3, r3, #28
   11f68:	add	r2, r2, r0
   11f6c:	str	r2, [r3, #-56]	; 0xffffffc8
   11f70:	bls	11f5c <__assert_fail@plt+0x1054>
   11f74:	sub	r2, r5, r4
   11f78:	mov	r1, r4
   11f7c:	sub	r4, r4, r7
   11f80:	bic	r2, r2, #3
   11f84:	sub	r5, r5, r4
   11f88:	movw	r0, #41376	; 0xa1a0
   11f8c:	movt	r0, #2
   11f90:	add	r2, r2, #28
   11f94:	movw	r3, #28000	; 0x6d60
   11f98:	bl	10ce0 <__memmove_chk@plt>
   11f9c:	str	r5, [r6]
   11fa0:	ldrd	r4, [sp]
   11fa4:	ldrd	r6, [sp, #8]
   11fa8:	ldrd	r8, [sp, #16]
   11fac:	ldr	sl, [sp, #24]
   11fb0:	add	sp, sp, #28
   11fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   11fb8:	ldr	r2, [r6, #44]	; 0x2c
   11fbc:	movw	r3, #41292	; 0xa14c
   11fc0:	movt	r3, #2
   11fc4:	movw	r4, #3840	; 0xf00
   11fc8:	movt	r4, #3
   11fcc:	mov	r0, r4
   11fd0:	mov	r1, #1
   11fd4:	ldr	r3, [r3]
   11fd8:	sub	r2, r2, r4
   11fdc:	bl	10d28 <fwrite_unlocked@plt>
   11fe0:	str	r4, [r6, #44]	; 0x2c
   11fe4:	b	11fa0 <__assert_fail@plt+0x1098>
   11fe8:	mov	r4, r5
   11fec:	b	11ee4 <__assert_fail@plt+0xfdc>
   11ff0:	ldr	r2, [r0, #4]
   11ff4:	mov	r3, #0
   11ff8:	strd	r4, [sp, #-16]!
   11ffc:	movw	r4, #41304	; 0xa158
   12000:	movt	r4, #2
   12004:	ldr	r1, [r0, #8]
   12008:	mov	r5, r0
   1200c:	str	r6, [sp, #8]
   12010:	str	lr, [sp, #12]
   12014:	str	r3, [r4, #48]	; 0x30
   12018:	cmp	r2, r1
   1201c:	bcs	121a0 <__assert_fail@plt+0x1298>
   12020:	add	r1, r2, #1
   12024:	str	r1, [r0, #4]
   12028:	ldrb	r0, [r2]
   1202c:	mov	r6, #1
   12030:	b	12040 <__assert_fail@plt+0x1138>
   12034:	str	r2, [r5, #4]
   12038:	ldrb	r0, [r3]
   1203c:	ldr	r3, [r4, #48]	; 0x30
   12040:	cmp	r0, #32
   12044:	add	r2, r3, #7
   12048:	addeq	r3, r3, #1
   1204c:	streq	r3, [r4, #48]	; 0x30
   12050:	beq	12074 <__assert_fail@plt+0x116c>
   12054:	cmp	r0, #9
   12058:	bne	12094 <__assert_fail@plt+0x118c>
   1205c:	cmp	r3, #0
   12060:	strb	r6, [r4, #28]
   12064:	movlt	r3, r2
   12068:	bic	r3, r3, #7
   1206c:	add	r3, r3, #8
   12070:	str	r3, [r4, #48]	; 0x30
   12074:	ldr	r3, [r5, #4]
   12078:	ldr	r1, [r5, #8]
   1207c:	add	r2, r3, #1
   12080:	cmp	r3, r1
   12084:	bcc	12034 <__assert_fail@plt+0x112c>
   12088:	mov	r0, r5
   1208c:	bl	10e90 <__uflow@plt>
   12090:	b	1203c <__assert_fail@plt+0x1134>
   12094:	ldr	r2, [r4, #40]	; 0x28
   12098:	cmp	r2, #0
   1209c:	beq	12174 <__assert_fail@plt+0x126c>
   120a0:	ldr	r6, [r4, #36]	; 0x24
   120a4:	str	r3, [r4, #52]	; 0x34
   120a8:	ldrb	r2, [r6]
   120ac:	cmp	r2, #0
   120b0:	beq	12184 <__assert_fail@plt+0x127c>
   120b4:	cmp	r2, r0
   120b8:	beq	120e0 <__assert_fail@plt+0x11d8>
   120bc:	b	12184 <__assert_fail@plt+0x127c>
   120c0:	str	r3, [r5, #4]
   120c4:	ldrb	r3, [r6, #1]!
   120c8:	ldrb	r0, [r2]
   120cc:	cmp	r3, #0
   120d0:	beq	12110 <__assert_fail@plt+0x1208>
   120d4:	cmp	r3, r0
   120d8:	bne	12184 <__assert_fail@plt+0x127c>
   120dc:	ldr	r3, [r4, #48]	; 0x30
   120e0:	add	r3, r3, #1
   120e4:	ldr	r2, [r5, #4]
   120e8:	str	r3, [r4, #48]	; 0x30
   120ec:	ldr	r1, [r5, #8]
   120f0:	add	r3, r2, #1
   120f4:	cmp	r2, r1
   120f8:	bcc	120c0 <__assert_fail@plt+0x11b8>
   120fc:	mov	r0, r5
   12100:	bl	10e90 <__uflow@plt>
   12104:	ldrb	r3, [r6, #1]!
   12108:	cmp	r3, #0
   1210c:	bne	120d4 <__assert_fail@plt+0x11cc>
   12110:	mov	r6, #1
   12114:	b	1215c <__assert_fail@plt+0x1254>
   12118:	cmp	r0, #9
   1211c:	bne	12184 <__assert_fail@plt+0x127c>
   12120:	ldr	r3, [r4, #48]	; 0x30
   12124:	strb	r6, [r4, #28]
   12128:	add	r2, r3, #7
   1212c:	cmp	r3, #0
   12130:	movlt	r3, r2
   12134:	bic	r3, r3, #7
   12138:	add	r3, r3, #8
   1213c:	str	r3, [r4, #48]	; 0x30
   12140:	ldr	r3, [r5, #4]
   12144:	ldr	r2, [r5, #8]
   12148:	add	r1, r3, #1
   1214c:	cmp	r3, r2
   12150:	bcs	12194 <__assert_fail@plt+0x128c>
   12154:	str	r1, [r5, #4]
   12158:	ldrb	r0, [r3]
   1215c:	cmp	r0, #32
   12160:	bne	12118 <__assert_fail@plt+0x1210>
   12164:	ldr	r3, [r4, #48]	; 0x30
   12168:	add	r3, r3, #1
   1216c:	str	r3, [r4, #48]	; 0x30
   12170:	b	12140 <__assert_fail@plt+0x1238>
   12174:	ldr	r2, [r4, #56]	; 0x38
   12178:	cmp	r2, r3
   1217c:	movlt	r3, r2
   12180:	str	r3, [r4, #52]	; 0x34
   12184:	ldrd	r4, [sp]
   12188:	ldr	r6, [sp, #8]
   1218c:	add	sp, sp, #12
   12190:	pop	{pc}		; (ldr pc, [sp], #4)
   12194:	mov	r0, r5
   12198:	bl	10e90 <__uflow@plt>
   1219c:	b	1215c <__assert_fail@plt+0x1254>
   121a0:	bl	10e90 <__uflow@plt>
   121a4:	ldr	r3, [r4, #48]	; 0x30
   121a8:	b	1202c <__assert_fail@plt+0x1124>
   121ac:	movw	r3, #37068	; 0x90cc
   121b0:	movt	r3, #1
   121b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   121b8:	strd	r6, [sp, #8]
   121bc:	movw	r6, #41304	; 0xa158
   121c0:	movt	r6, #2
   121c4:	strd	r8, [sp, #16]
   121c8:	mov	r5, r0
   121cc:	mov	r4, r1
   121d0:	strd	sl, [sp, #24]
   121d4:	str	lr, [sp, #32]
   121d8:	sub	sp, sp, #36	; 0x24
   121dc:	ldr	fp, [pc, #976]	; 125b4 <__assert_fail@plt+0x16ac>
   121e0:	str	r3, [sp, #20]
   121e4:	bl	10e00 <__ctype_b_loc@plt>
   121e8:	ldr	r2, [r6]
   121ec:	movw	r3, #37076	; 0x90d4
   121f0:	movt	r3, #1
   121f4:	str	r0, [sp, #16]
   121f8:	str	r3, [sp, #28]
   121fc:	movw	r3, #37084	; 0x90dc
   12200:	movt	r3, #1
   12204:	str	r3, [sp, #24]
   12208:	ldr	r3, [r6, #44]	; 0x2c
   1220c:	ldr	r8, [sp, #16]
   12210:	str	r3, [r2]
   12214:	b	12254 <__assert_fail@plt+0x134c>
   12218:	strb	r4, [r3]
   1221c:	add	r3, r3, #1
   12220:	ldr	r2, [r5, #4]
   12224:	str	r3, [r6, #44]	; 0x2c
   12228:	ldr	r1, [r5, #8]
   1222c:	cmp	r2, r1
   12230:	bcs	1227c <__assert_fail@plt+0x1374>
   12234:	add	r1, r2, #1
   12238:	str	r1, [r5, #4]
   1223c:	ldrb	r4, [r2]
   12240:	lsl	r2, r4, #1
   12244:	ldr	r7, [r8]
   12248:	ldrh	r2, [r7, r2]
   1224c:	tst	r2, #8192	; 0x2000
   12250:	bne	1229c <__assert_fail@plt+0x1394>
   12254:	cmp	r3, fp
   12258:	bne	12218 <__assert_fail@plt+0x1310>
   1225c:	ldrb	r3, [r6, #60]	; 0x3c
   12260:	cmp	r3, #0
   12264:	beq	124ac <__assert_fail@plt+0x15a4>
   12268:	ldr	r3, [r6, #12]
   1226c:	str	r3, [r6, #8]
   12270:	bl	11e68 <__assert_fail@plt+0xf60>
   12274:	ldr	r3, [r6, #44]	; 0x2c
   12278:	b	12218 <__assert_fail@plt+0x1310>
   1227c:	mov	r0, r5
   12280:	bl	10e90 <__uflow@plt>
   12284:	cmn	r0, #1
   12288:	mov	r4, r0
   1228c:	bne	1251c <__assert_fail@plt+0x1614>
   12290:	ldr	r3, [sp, #16]
   12294:	ldr	r7, [r3]
   12298:	ldr	r3, [r6, #44]	; 0x2c
   1229c:	ldr	r1, [r6]
   122a0:	ldr	r2, [r6, #48]	; 0x30
   122a4:	ldr	r0, [sp, #20]
   122a8:	ldr	r8, [r1]
   122ac:	sub	r3, r3, r8
   122b0:	sub	r9, r3, #1
   122b4:	add	ip, r3, r2
   122b8:	str	r3, [r1, #4]
   122bc:	add	sl, r8, r9
   122c0:	ldrb	r3, [r8, r9]
   122c4:	stmib	sp, {r1, ip}
   122c8:	ldrb	r1, [r8]
   122cc:	str	ip, [r6, #48]	; 0x30
   122d0:	str	r3, [sp, #12]
   122d4:	bl	10e24 <strchr@plt>
   122d8:	ldr	r2, [sp, #4]
   122dc:	adds	r0, r0, #0
   122e0:	movne	r0, #1
   122e4:	cmp	r8, sl
   122e8:	ldr	r3, [sp, #12]
   122ec:	ldrb	r1, [r2, #12]
   122f0:	lsl	r3, r3, #1
   122f4:	ldrh	r3, [r7, r3]
   122f8:	bfi	r1, r0, #0, #1
   122fc:	ubfx	r3, r3, #2, #1
   12300:	bfi	r1, r3, #2, #1
   12304:	strb	r1, [r2, #12]
   12308:	ldrbcs	sl, [r8, r9]
   1230c:	bcs	1234c <__assert_fail@plt+0x1444>
   12310:	mov	r7, sl
   12314:	str	r4, [sp, #12]
   12318:	ldr	r9, [sp, #28]
   1231c:	b	12328 <__assert_fail@plt+0x1420>
   12320:	cmp	r8, r7
   12324:	beq	12510 <__assert_fail@plt+0x1608>
   12328:	ldrb	sl, [r7]
   1232c:	mov	r0, r9
   12330:	mov	r4, r7
   12334:	sub	r7, r7, #1
   12338:	mov	r1, sl
   1233c:	bl	10e24 <strchr@plt>
   12340:	cmp	r0, #0
   12344:	bne	12320 <__assert_fail@plt+0x1418>
   12348:	ldr	r4, [sp, #12]
   1234c:	mov	r1, sl
   12350:	mov	r7, #1
   12354:	ldr	r0, [sp, #24]
   12358:	bl	10e24 <strchr@plt>
   1235c:	ldmib	sp, {r1, r3}
   12360:	adds	r0, r0, #0
   12364:	movne	r0, #1
   12368:	ldrb	r2, [r1, #12]
   1236c:	bfi	r2, r0, #1, #1
   12370:	mov	r0, r4
   12374:	strb	r2, [r1, #12]
   12378:	b	12388 <__assert_fail@plt+0x1480>
   1237c:	str	r2, [r5, #4]
   12380:	ldrb	r0, [r3]
   12384:	ldr	r3, [r6, #48]	; 0x30
   12388:	cmp	r0, #32
   1238c:	add	r2, r3, #7
   12390:	addeq	r3, r3, #1
   12394:	streq	r3, [r6, #48]	; 0x30
   12398:	beq	123bc <__assert_fail@plt+0x14b4>
   1239c:	cmp	r0, #9
   123a0:	bne	123dc <__assert_fail@plt+0x14d4>
   123a4:	cmp	r3, #0
   123a8:	strb	r7, [r6, #28]
   123ac:	movlt	r3, r2
   123b0:	bic	r3, r3, #7
   123b4:	add	r3, r3, #8
   123b8:	str	r3, [r6, #48]	; 0x30
   123bc:	ldr	r3, [r5, #4]
   123c0:	ldr	r1, [r5, #8]
   123c4:	add	r2, r3, #1
   123c8:	cmp	r3, r1
   123cc:	bcc	1237c <__assert_fail@plt+0x1474>
   123d0:	mov	r0, r5
   123d4:	bl	10e90 <__uflow@plt>
   123d8:	b	12384 <__assert_fail@plt+0x147c>
   123dc:	ldr	r1, [sp, #8]
   123e0:	cmn	r0, #1
   123e4:	mov	r4, r0
   123e8:	ldr	r2, [r6]
   123ec:	sub	r1, r3, r1
   123f0:	str	r1, [r2, #8]
   123f4:	beq	124c4 <__assert_fail@plt+0x15bc>
   123f8:	ldrb	ip, [r2, #12]
   123fc:	ands	r0, ip, #2
   12400:	beq	1254c <__assert_fail@plt+0x1644>
   12404:	sub	r0, r4, #10
   12408:	clz	r0, r0
   1240c:	lsr	r0, r0, #5
   12410:	cmp	r1, #1
   12414:	movle	r1, r0
   12418:	orrgt	r1, r0, #1
   1241c:	cmp	r1, #0
   12420:	beq	12554 <__assert_fail@plt+0x164c>
   12424:	ldrb	r0, [r2, #12]
   12428:	cmp	r4, #10
   1242c:	bfi	r0, r1, #3, #1
   12430:	strb	r0, [r2, #12]
   12434:	beq	124d0 <__assert_fail@plt+0x15c8>
   12438:	ldrb	r1, [r6, #63]	; 0x3f
   1243c:	cmp	r1, #0
   12440:	bne	124d0 <__assert_fail@plt+0x15c8>
   12444:	ldr	r1, [pc, #364]	; 125b8 <__assert_fail@plt+0x16b0>
   12448:	cmp	r2, r1
   1244c:	addne	r2, r2, #28
   12450:	strne	r2, [r6]
   12454:	bne	12208 <__assert_fail@plt+0x1300>
   12458:	ldrb	r2, [r6, #60]	; 0x3c
   1245c:	cmp	r2, #0
   12460:	beq	124fc <__assert_fail@plt+0x15f4>
   12464:	ldr	r3, [r6, #12]
   12468:	str	r3, [r6, #8]
   1246c:	bl	11e68 <__assert_fail@plt+0xf60>
   12470:	ldr	r2, [r6]
   12474:	add	r2, r2, #28
   12478:	cmp	r4, #10
   1247c:	cmnne	r4, #1
   12480:	str	r2, [r6]
   12484:	bne	12208 <__assert_fail@plt+0x1300>
   12488:	mov	r0, r5
   1248c:	add	sp, sp, #36	; 0x24
   12490:	ldrd	r4, [sp]
   12494:	ldrd	r6, [sp, #8]
   12498:	ldrd	r8, [sp, #16]
   1249c:	ldrd	sl, [sp, #24]
   124a0:	ldr	lr, [sp, #32]
   124a4:	add	sp, sp, #36	; 0x24
   124a8:	b	11ff0 <__assert_fail@plt+0x10e8>
   124ac:	ldrb	r3, [r6, #61]	; 0x3d
   124b0:	cmp	r3, #0
   124b4:	beq	12524 <__assert_fail@plt+0x161c>
   124b8:	ldr	r3, [r6, #48]	; 0x30
   124bc:	str	r3, [r6, #8]
   124c0:	b	12270 <__assert_fail@plt+0x1368>
   124c4:	ldrb	r1, [r2, #12]
   124c8:	orr	r1, r1, #8
   124cc:	strb	r1, [r2, #12]
   124d0:	ldrb	r1, [r2, #12]
   124d4:	ldr	r0, [pc, #220]	; 125b8 <__assert_fail@plt+0x16b0>
   124d8:	tst	r1, #8
   124dc:	movne	r1, #2
   124e0:	moveq	r1, #1
   124e4:	cmp	r2, r0
   124e8:	str	r1, [r2, #8]
   124ec:	bne	12474 <__assert_fail@plt+0x156c>
   124f0:	ldrb	r2, [r6, #60]	; 0x3c
   124f4:	cmp	r2, #0
   124f8:	bne	12464 <__assert_fail@plt+0x155c>
   124fc:	ldrb	r2, [r6, #61]	; 0x3d
   12500:	cmp	r2, #0
   12504:	beq	1257c <__assert_fail@plt+0x1674>
   12508:	str	r3, [r6, #8]
   1250c:	b	1246c <__assert_fail@plt+0x1564>
   12510:	ldrb	sl, [r4, #-1]
   12514:	ldr	r4, [sp, #12]
   12518:	b	1234c <__assert_fail@plt+0x1444>
   1251c:	ldr	r3, [r6, #44]	; 0x2c
   12520:	b	12240 <__assert_fail@plt+0x1338>
   12524:	ldrb	r3, [r6, #62]	; 0x3e
   12528:	ldr	r2, [r6, #12]
   1252c:	cmp	r3, #0
   12530:	streq	r2, [r6, #8]
   12534:	beq	12270 <__assert_fail@plt+0x1368>
   12538:	ldr	r3, [r6, #48]	; 0x30
   1253c:	cmp	r3, r2
   12540:	beq	12560 <__assert_fail@plt+0x1658>
   12544:	str	r3, [r6, #8]
   12548:	b	12270 <__assert_fail@plt+0x1368>
   1254c:	mov	r1, r0
   12550:	b	12424 <__assert_fail@plt+0x151c>
   12554:	bfi	ip, r1, #3, #1
   12558:	strb	ip, [r2, #12]
   1255c:	b	12438 <__assert_fail@plt+0x1530>
   12560:	ldr	r2, [r6, #8]
   12564:	cmp	r2, r3
   12568:	bne	12270 <__assert_fail@plt+0x1368>
   1256c:	cmp	r2, #0
   12570:	moveq	r3, #3
   12574:	movne	r3, #0
   12578:	b	12544 <__assert_fail@plt+0x163c>
   1257c:	ldrb	r1, [r6, #62]	; 0x3e
   12580:	ldr	r2, [r6, #12]
   12584:	cmp	r1, #0
   12588:	streq	r2, [r6, #8]
   1258c:	beq	1246c <__assert_fail@plt+0x1564>
   12590:	cmp	r3, r2
   12594:	bne	12508 <__assert_fail@plt+0x1600>
   12598:	ldr	r2, [r6, #8]
   1259c:	cmp	r2, r3
   125a0:	bne	1246c <__assert_fail@plt+0x1564>
   125a4:	cmp	r3, #0
   125a8:	moveq	r3, #3
   125ac:	movne	r3, #0
   125b0:	b	12508 <__assert_fail@plt+0x1600>
   125b4:	andeq	r2, r3, r8, lsl #5
   125b8:	andeq	r0, r3, r8, asr #29
   125bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   125c0:	mov	r5, #0
   125c4:	movw	r4, #41304	; 0xa158
   125c8:	movt	r4, #2
   125cc:	strd	r6, [sp, #8]
   125d0:	mov	r6, r0
   125d4:	strd	r8, [sp, #16]
   125d8:	mov	r9, r1
   125dc:	mov	r1, #2
   125e0:	strd	sl, [sp, #24]
   125e4:	mov	r8, r5
   125e8:	movw	r7, #41292	; 0xa14c
   125ec:	movt	r7, #2
   125f0:	str	lr, [sp, #32]
   125f4:	sub	sp, sp, #4
   125f8:	bl	13104 <__assert_fail@plt+0x21fc>
   125fc:	mov	r0, r6
   12600:	str	r5, [r4, #8]
   12604:	strb	r5, [r4, #28]
   12608:	bl	11ff0 <__assert_fail@plt+0x10e8>
   1260c:	mov	r5, r0
   12610:	str	r0, [r4, #64]	; 0x40
   12614:	str	r8, [r4, #20]
   12618:	cmn	r5, #1
   1261c:	cmpne	r5, #10
   12620:	ldr	r3, [r4, #48]	; 0x30
   12624:	ldr	r0, [r4, #52]	; 0x34
   12628:	beq	12784 <__assert_fail@plt+0x187c>
   1262c:	ldr	r2, [r4, #56]	; 0x38
   12630:	cmp	r2, r0
   12634:	bgt	12648 <__assert_fail@plt+0x1740>
   12638:	ldr	r2, [r4, #68]	; 0x44
   1263c:	add	r2, r0, r2
   12640:	cmp	r2, r3
   12644:	ble	128dc <__assert_fail@plt+0x19d4>
   12648:	cmp	r0, r3
   1264c:	str	r8, [r4, #24]
   12650:	bge	127a8 <__assert_fail@plt+0x18a0>
   12654:	mov	fp, #1
   12658:	bl	11b74 <__assert_fail@plt+0xc6c>
   1265c:	ldr	r0, [r4, #24]
   12660:	ldr	sl, [r4, #36]	; 0x24
   12664:	ldr	r3, [r4, #48]	; 0x30
   12668:	cmp	r3, r0
   1266c:	beq	126cc <__assert_fail@plt+0x17c4>
   12670:	ldrb	r1, [sl]
   12674:	cmp	r1, #0
   12678:	bne	126a4 <__assert_fail@plt+0x179c>
   1267c:	b	126cc <__assert_fail@plt+0x17c4>
   12680:	ldr	r0, [r4, #24]
   12684:	ldr	r3, [r4, #48]	; 0x30
   12688:	add	r0, r0, #1
   1268c:	cmp	r0, r3
   12690:	str	r0, [r4, #24]
   12694:	beq	126cc <__assert_fail@plt+0x17c4>
   12698:	ldrb	r1, [sl, #1]!
   1269c:	cmp	r1, #0
   126a0:	beq	126cc <__assert_fail@plt+0x17c4>
   126a4:	ldr	r0, [r7]
   126a8:	ldr	r3, [r0, #20]
   126ac:	ldr	r2, [r0, #24]
   126b0:	cmp	r3, r2
   126b4:	addcc	r2, r3, #1
   126b8:	strcc	r2, [r0, #20]
   126bc:	strbcc	r1, [r3]
   126c0:	bcc	12680 <__assert_fail@plt+0x1778>
   126c4:	bl	10e9c <__overflow@plt>
   126c8:	b	12680 <__assert_fail@plt+0x1778>
   126cc:	cmp	fp, #0
   126d0:	bne	127d4 <__assert_fail@plt+0x18cc>
   126d4:	cmn	r5, #1
   126d8:	bne	12864 <__assert_fail@plt+0x195c>
   126dc:	ldr	r1, [r4, #40]	; 0x28
   126e0:	ldrd	r2, [r4, #48]	; 0x30
   126e4:	add	r3, r3, r1
   126e8:	cmp	r3, r2
   126ec:	ble	12898 <__assert_fail@plt+0x1990>
   126f0:	ldr	r2, [r6]
   126f4:	mvn	r1, #0
   126f8:	movw	r3, #41288	; 0xa148
   126fc:	movt	r3, #2
   12700:	str	r1, [r4, #64]	; 0x40
   12704:	ldr	r3, [r3]
   12708:	tst	r2, #32
   1270c:	beq	12a44 <__assert_fail@plt+0x1b3c>
   12710:	cmp	r6, r3
   12714:	mov	r0, r6
   12718:	mov	r4, #0
   1271c:	beq	12b70 <__assert_fail@plt+0x1c68>
   12720:	bl	13154 <__assert_fail@plt+0x224c>
   12724:	movw	r1, #37120	; 0x9100
   12728:	movt	r1, #1
   1272c:	mov	r2, #5
   12730:	mov	r0, #0
   12734:	bl	10d4c <dcgettext@plt>
   12738:	mov	r6, r0
   1273c:	mov	r5, #0
   12740:	mov	r2, r9
   12744:	mov	r1, #3
   12748:	mov	r0, #0
   1274c:	bl	164fc <__assert_fail@plt+0x55f4>
   12750:	mov	r3, r0
   12754:	mov	r2, r6
   12758:	mov	r1, r5
   1275c:	mov	r0, #0
   12760:	bl	10db8 <error@plt>
   12764:	mov	r0, r4
   12768:	add	sp, sp, #4
   1276c:	ldrd	r4, [sp]
   12770:	ldrd	r6, [sp, #8]
   12774:	ldrd	r8, [sp, #16]
   12778:	ldrd	sl, [sp, #24]
   1277c:	add	sp, sp, #32
   12780:	pop	{pc}		; (ldr pc, [sp], #4)
   12784:	cmp	r5, #10
   12788:	cmnne	r5, #1
   1278c:	str	r8, [r4, #24]
   12790:	movne	fp, #1
   12794:	moveq	fp, #0
   12798:	cmp	r0, r3
   1279c:	blt	12658 <__assert_fail@plt+0x1750>
   127a0:	cmp	fp, #0
   127a4:	beq	1285c <__assert_fail@plt+0x1954>
   127a8:	bl	11b74 <__assert_fail@plt+0xc6c>
   127ac:	ldr	r0, [r4, #24]
   127b0:	ldr	sl, [r4, #36]	; 0x24
   127b4:	ldr	r3, [r4, #48]	; 0x30
   127b8:	cmp	r3, r0
   127bc:	moveq	r0, #0
   127c0:	beq	127d8 <__assert_fail@plt+0x18d0>
   127c4:	ldrb	r1, [sl]
   127c8:	cmp	r1, #0
   127cc:	movne	fp, #1
   127d0:	bne	126a4 <__assert_fail@plt+0x179c>
   127d4:	sub	r0, r3, r0
   127d8:	bl	11b74 <__assert_fail@plt+0xc6c>
   127dc:	cmn	r5, #1
   127e0:	bne	1280c <__assert_fail@plt+0x1904>
   127e4:	b	126dc <__assert_fail@plt+0x17d4>
   127e8:	ldr	r3, [r6, #4]
   127ec:	ldr	r2, [r6, #8]
   127f0:	cmp	r3, r2
   127f4:	bcs	12844 <__assert_fail@plt+0x193c>
   127f8:	add	r2, r3, #1
   127fc:	str	r2, [r6, #4]
   12800:	ldrb	r5, [r3]
   12804:	cmp	r5, #10
   12808:	beq	12864 <__assert_fail@plt+0x195c>
   1280c:	ldr	r0, [r7]
   12810:	ldr	r3, [r0, #20]
   12814:	ldr	r2, [r0, #24]
   12818:	cmp	r3, r2
   1281c:	addcc	r2, r3, #1
   12820:	strcc	r2, [r0, #20]
   12824:	strbcc	r5, [r3]
   12828:	bcc	127e8 <__assert_fail@plt+0x18e0>
   1282c:	uxtb	r1, r5
   12830:	bl	10e9c <__overflow@plt>
   12834:	ldr	r3, [r6, #4]
   12838:	ldr	r2, [r6, #8]
   1283c:	cmp	r3, r2
   12840:	bcc	127f8 <__assert_fail@plt+0x18f0>
   12844:	mov	r0, r6
   12848:	bl	10e90 <__uflow@plt>
   1284c:	cmp	r0, #10
   12850:	cmnne	r0, #1
   12854:	mov	r5, r0
   12858:	bne	1280c <__assert_fail@plt+0x1904>
   1285c:	cmn	r5, #1
   12860:	beq	126f0 <__assert_fail@plt+0x17e8>
   12864:	ldr	r0, [r7]
   12868:	ldr	r3, [r0, #20]
   1286c:	ldr	r2, [r0, #24]
   12870:	cmp	r3, r2
   12874:	addcc	r1, r3, #1
   12878:	movcc	r2, #10
   1287c:	strcc	r1, [r0, #20]
   12880:	strbcc	r2, [r3]
   12884:	bcs	128d0 <__assert_fail@plt+0x19c8>
   12888:	mov	r0, r6
   1288c:	bl	11ff0 <__assert_fail@plt+0x10e8>
   12890:	mov	r5, r0
   12894:	b	12618 <__assert_fail@plt+0x1710>
   12898:	movw	r3, #41292	; 0xa14c
   1289c:	movt	r3, #2
   128a0:	ldr	r0, [r3]
   128a4:	ldr	r3, [r0, #20]
   128a8:	ldr	r2, [r0, #24]
   128ac:	cmp	r3, r2
   128b0:	addcc	r1, r3, #1
   128b4:	movcc	r2, #10
   128b8:	strcc	r1, [r0, #20]
   128bc:	strbcc	r2, [r3]
   128c0:	bcc	126f0 <__assert_fail@plt+0x17e8>
   128c4:	mov	r1, #10
   128c8:	bl	10e9c <__overflow@plt>
   128cc:	b	126f0 <__assert_fail@plt+0x17e8>
   128d0:	mov	r1, #10
   128d4:	bl	10e9c <__overflow@plt>
   128d8:	b	12888 <__assert_fail@plt+0x1980>
   128dc:	movw	r2, #3840	; 0xf00
   128e0:	movt	r2, #3
   128e4:	str	r3, [r4, #12]
   128e8:	movw	sl, #41376	; 0xa1a0
   128ec:	movt	sl, #2
   128f0:	str	r0, [r4, #32]
   128f4:	mov	r1, r5
   128f8:	mov	r0, r6
   128fc:	str	sl, [r4]
   12900:	str	r2, [r4, #44]	; 0x2c
   12904:	bl	121ac <__assert_fail@plt+0x12a4>
   12908:	ldr	r2, [r4, #32]
   1290c:	ldr	r3, [r4, #52]	; 0x34
   12910:	cmp	r3, r2
   12914:	beq	12944 <__assert_fail@plt+0x1a3c>
   12918:	ldrb	r1, [r4, #60]	; 0x3c
   1291c:	cmp	r1, #0
   12920:	bne	12964 <__assert_fail@plt+0x1a5c>
   12924:	ldrb	r1, [r4, #61]	; 0x3d
   12928:	cmp	r1, #0
   1292c:	beq	12a1c <__assert_fail@plt+0x1b14>
   12930:	ldr	r1, [r4, #12]
   12934:	cmp	r3, r2
   12938:	str	r1, [r4, #8]
   1293c:	bne	1296c <__assert_fail@plt+0x1a64>
   12940:	b	129f8 <__assert_fail@plt+0x1af0>
   12944:	ldr	ip, [r4, #48]	; 0x30
   12948:	ldr	r1, [r4, #68]	; 0x44
   1294c:	ldrb	lr, [r4, #60]	; 0x3c
   12950:	add	r1, r3, r1
   12954:	cmp	r1, ip
   12958:	ble	129c8 <__assert_fail@plt+0x1ac0>
   1295c:	cmp	lr, #0
   12960:	beq	12ad0 <__assert_fail@plt+0x1bc8>
   12964:	ldr	r3, [r4, #12]
   12968:	str	r3, [r4, #8]
   1296c:	ldr	fp, [r4]
   12970:	cmp	fp, sl
   12974:	bls	12c4c <__assert_fail@plt+0x1d44>
   12978:	ldrb	r3, [fp, #-16]
   1297c:	str	r0, [r4, #64]	; 0x40
   12980:	orr	r3, r3, #10
   12984:	strb	r3, [fp, #-16]
   12988:	bl	1159c <__assert_fail@plt+0x694>
   1298c:	movw	r0, #41376	; 0xa1a0
   12990:	movt	r0, #2
   12994:	ldr	r1, [r4, #12]
   12998:	bl	11ca0 <__assert_fail@plt+0xd98>
   1299c:	ldr	r5, [sl, #24]
   129a0:	cmp	r5, fp
   129a4:	beq	129c0 <__assert_fail@plt+0x1ab8>
   129a8:	mov	r0, r5
   129ac:	ldr	r1, [r4, #8]
   129b0:	bl	11ca0 <__assert_fail@plt+0xd98>
   129b4:	ldr	r5, [r5, #24]
   129b8:	cmp	r5, fp
   129bc:	bne	129a8 <__assert_fail@plt+0x1aa0>
   129c0:	ldr	r5, [r4, #64]	; 0x40
   129c4:	b	12614 <__assert_fail@plt+0x170c>
   129c8:	cmp	lr, #0
   129cc:	bne	12964 <__assert_fail@plt+0x1a5c>
   129d0:	ldrb	r1, [r4, #61]	; 0x3d
   129d4:	cmp	r0, #10
   129d8:	cmnne	r0, #1
   129dc:	movne	lr, #1
   129e0:	moveq	lr, #0
   129e4:	cmp	r1, #0
   129e8:	beq	12b84 <__assert_fail@plt+0x1c7c>
   129ec:	cmp	lr, #0
   129f0:	strne	ip, [r4, #8]
   129f4:	beq	12930 <__assert_fail@plt+0x1a28>
   129f8:	ldr	r1, [r4, #48]	; 0x30
   129fc:	ldr	r2, [r4, #68]	; 0x44
   12a00:	add	r3, r3, r2
   12a04:	cmp	r3, r1
   12a08:	bgt	1296c <__assert_fail@plt+0x1a64>
   12a0c:	cmp	r0, #10
   12a10:	cmnne	r0, #1
   12a14:	beq	1296c <__assert_fail@plt+0x1a64>
   12a18:	b	12ab0 <__assert_fail@plt+0x1ba8>
   12a1c:	ldrb	ip, [r4, #62]	; 0x3e
   12a20:	ldr	r1, [r4, #12]
   12a24:	cmp	ip, #0
   12a28:	beq	12b68 <__assert_fail@plt+0x1c60>
   12a2c:	ldr	ip, [r4, #8]
   12a30:	cmp	ip, r1
   12a34:	beq	12c24 <__assert_fail@plt+0x1d1c>
   12a38:	cmp	r3, r2
   12a3c:	bne	1296c <__assert_fail@plt+0x1a64>
   12a40:	b	12c44 <__assert_fail@plt+0x1d3c>
   12a44:	cmp	r6, r3
   12a48:	mov	r0, r6
   12a4c:	beq	12b78 <__assert_fail@plt+0x1c70>
   12a50:	bl	13154 <__assert_fail@plt+0x224c>
   12a54:	cmp	r0, #0
   12a58:	moveq	r4, #1
   12a5c:	beq	12764 <__assert_fail@plt+0x185c>
   12a60:	bl	10e30 <__errno_location@plt>
   12a64:	ldr	r5, [r0]
   12a68:	cmp	r5, #0
   12a6c:	lsr	r4, r5, #31
   12a70:	blt	12764 <__assert_fail@plt+0x185c>
   12a74:	movwne	r6, #38864	; 0x97d0
   12a78:	movtne	r6, #1
   12a7c:	bne	12740 <__assert_fail@plt+0x1838>
   12a80:	b	12724 <__assert_fail@plt+0x181c>
   12a84:	ldr	r2, [r4, #48]	; 0x30
   12a88:	ldr	r1, [r4, #68]	; 0x44
   12a8c:	add	r3, r3, r1
   12a90:	cmp	r3, r2
   12a94:	bgt	1296c <__assert_fail@plt+0x1a64>
   12a98:	cmp	r0, #10
   12a9c:	cmnne	r0, #1
   12aa0:	beq	1296c <__assert_fail@plt+0x1a64>
   12aa4:	ldr	r3, [r4, #8]
   12aa8:	cmp	r2, r3
   12aac:	bne	1296c <__assert_fail@plt+0x1a64>
   12ab0:	mov	r1, r0
   12ab4:	mov	r0, r6
   12ab8:	bl	121ac <__assert_fail@plt+0x12a4>
   12abc:	ldr	r2, [r4, #32]
   12ac0:	ldr	r3, [r4, #52]	; 0x34
   12ac4:	cmp	r3, r2
   12ac8:	bne	1296c <__assert_fail@plt+0x1a64>
   12acc:	b	12a84 <__assert_fail@plt+0x1b7c>
   12ad0:	ldrb	r1, [r4, #61]	; 0x3d
   12ad4:	cmp	r1, #0
   12ad8:	bne	12930 <__assert_fail@plt+0x1a28>
   12adc:	ldrb	ip, [r4, #62]	; 0x3e
   12ae0:	ldr	r1, [r4, #12]
   12ae4:	cmp	ip, #0
   12ae8:	bne	12a2c <__assert_fail@plt+0x1b24>
   12aec:	ldr	r2, [r4, #48]	; 0x30
   12af0:	str	r1, [r4, #8]
   12af4:	ldr	ip, [r4, #68]	; 0x44
   12af8:	add	r3, r3, ip
   12afc:	cmp	r2, r3
   12b00:	blt	1296c <__assert_fail@plt+0x1a64>
   12b04:	cmp	r0, #10
   12b08:	cmnne	r0, #1
   12b0c:	beq	1296c <__assert_fail@plt+0x1a64>
   12b10:	cmp	r2, r1
   12b14:	beq	12b48 <__assert_fail@plt+0x1c40>
   12b18:	b	1296c <__assert_fail@plt+0x1a64>
   12b1c:	ldr	r2, [r4, #48]	; 0x30
   12b20:	ldr	r1, [r4, #68]	; 0x44
   12b24:	add	r3, r3, r1
   12b28:	cmp	r3, r2
   12b2c:	bgt	1296c <__assert_fail@plt+0x1a64>
   12b30:	cmp	r0, #10
   12b34:	cmnne	r0, #1
   12b38:	beq	1296c <__assert_fail@plt+0x1a64>
   12b3c:	ldr	r3, [r4, #8]
   12b40:	cmp	r2, r3
   12b44:	bne	1296c <__assert_fail@plt+0x1a64>
   12b48:	mov	r1, r0
   12b4c:	mov	r0, r6
   12b50:	bl	121ac <__assert_fail@plt+0x12a4>
   12b54:	ldr	r2, [r4, #32]
   12b58:	ldr	r3, [r4, #52]	; 0x34
   12b5c:	cmp	r3, r2
   12b60:	bne	1296c <__assert_fail@plt+0x1a64>
   12b64:	b	12b1c <__assert_fail@plt+0x1c14>
   12b68:	str	r1, [r4, #8]
   12b6c:	b	1296c <__assert_fail@plt+0x1a64>
   12b70:	bl	10ecc <clearerr_unlocked@plt>
   12b74:	b	12724 <__assert_fail@plt+0x181c>
   12b78:	mov	r4, #1
   12b7c:	bl	10ecc <clearerr_unlocked@plt>
   12b80:	b	12764 <__assert_fail@plt+0x185c>
   12b84:	ldrb	r5, [r4, #62]	; 0x3e
   12b88:	ldr	r1, [r4, #12]
   12b8c:	cmp	r5, #0
   12b90:	beq	12aec <__assert_fail@plt+0x1be4>
   12b94:	cmp	lr, #0
   12b98:	beq	12c38 <__assert_fail@plt+0x1d30>
   12b9c:	cmp	ip, r1
   12ba0:	beq	12c38 <__assert_fail@plt+0x1d30>
   12ba4:	mov	r1, ip
   12ba8:	str	ip, [r4, #8]
   12bac:	ldr	r2, [r4, #68]	; 0x44
   12bb0:	add	r3, r3, r2
   12bb4:	cmp	r3, r1
   12bb8:	bgt	1296c <__assert_fail@plt+0x1a64>
   12bbc:	cmp	r0, #10
   12bc0:	cmnne	r0, #1
   12bc4:	beq	1296c <__assert_fail@plt+0x1a64>
   12bc8:	ldr	r3, [r4, #12]
   12bcc:	cmp	r1, r3
   12bd0:	bne	12c04 <__assert_fail@plt+0x1cfc>
   12bd4:	b	1296c <__assert_fail@plt+0x1a64>
   12bd8:	ldr	r2, [r4, #48]	; 0x30
   12bdc:	ldr	r1, [r4, #68]	; 0x44
   12be0:	add	r3, r3, r1
   12be4:	cmp	r3, r2
   12be8:	bgt	1296c <__assert_fail@plt+0x1a64>
   12bec:	cmp	r0, #10
   12bf0:	cmnne	r0, #1
   12bf4:	beq	1296c <__assert_fail@plt+0x1a64>
   12bf8:	ldr	r3, [r4, #8]
   12bfc:	cmp	r2, r3
   12c00:	bne	1296c <__assert_fail@plt+0x1a64>
   12c04:	mov	r1, r0
   12c08:	mov	r0, r6
   12c0c:	bl	121ac <__assert_fail@plt+0x12a4>
   12c10:	ldr	r2, [r4, #32]
   12c14:	ldr	r3, [r4, #52]	; 0x34
   12c18:	cmp	r3, r2
   12c1c:	bne	1296c <__assert_fail@plt+0x1a64>
   12c20:	b	12bd8 <__assert_fail@plt+0x1cd0>
   12c24:	cmp	r1, #0
   12c28:	moveq	r1, #3
   12c2c:	movne	r1, #0
   12c30:	str	r1, [r4, #8]
   12c34:	b	12a38 <__assert_fail@plt+0x1b30>
   12c38:	ldr	ip, [r4, #8]
   12c3c:	cmp	r1, ip
   12c40:	beq	12c24 <__assert_fail@plt+0x1d1c>
   12c44:	ldr	r1, [r4, #48]	; 0x30
   12c48:	b	12bac <__assert_fail@plt+0x1ca4>
   12c4c:	movw	r3, #36836	; 0x8fe4
   12c50:	movt	r3, #1
   12c54:	movw	r1, #37088	; 0x90e0
   12c58:	movt	r1, #1
   12c5c:	movw	r0, #37100	; 0x90ec
   12c60:	movt	r0, #1
   12c64:	movw	r2, #623	; 0x26f
   12c68:	bl	10f08 <__assert_fail@plt>
   12c6c:	subs	r4, r0, #0
   12c70:	str	r7, [sp, #-8]!
   12c74:	str	lr, [sp, #4]
   12c78:	sub	sp, sp, #56	; 0x38
   12c7c:	beq	12cc4 <__assert_fail@plt+0x1dbc>
   12c80:	movw	r3, #41280	; 0xa140
   12c84:	movt	r3, #2
   12c88:	ldr	r5, [r3]
   12c8c:	mov	r2, #5
   12c90:	movw	r1, #37136	; 0x9110
   12c94:	movt	r1, #1
   12c98:	mov	r0, #0
   12c9c:	bl	10d4c <dcgettext@plt>
   12ca0:	movw	r3, #8848	; 0x2290
   12ca4:	movt	r3, #3
   12ca8:	mov	r2, r0
   12cac:	mov	r1, #1
   12cb0:	ldr	r3, [r3]
   12cb4:	mov	r0, r5
   12cb8:	bl	10e6c <__fprintf_chk@plt>
   12cbc:	mov	r0, r4
   12cc0:	bl	10e0c <exit@plt>
   12cc4:	mov	r2, #5
   12cc8:	movw	r1, #37176	; 0x9138
   12ccc:	movt	r1, #1
   12cd0:	movw	r5, #41292	; 0xa14c
   12cd4:	movt	r5, #2
   12cd8:	bl	10d4c <dcgettext@plt>
   12cdc:	movw	r3, #8848	; 0x2290
   12ce0:	movt	r3, #3
   12ce4:	mov	r1, r0
   12ce8:	mov	r0, #1
   12cec:	ldr	r2, [r3]
   12cf0:	bl	10e54 <__printf_chk@plt>
   12cf4:	mov	r2, #5
   12cf8:	movw	r1, #37220	; 0x9164
   12cfc:	movt	r1, #1
   12d00:	mov	r0, r4
   12d04:	bl	10d4c <dcgettext@plt>
   12d08:	ldr	r1, [r5]
   12d0c:	bl	10cb0 <fputs_unlocked@plt>
   12d10:	mov	r2, #5
   12d14:	movw	r1, #37352	; 0x91e8
   12d18:	movt	r1, #1
   12d1c:	mov	r0, r4
   12d20:	bl	10d4c <dcgettext@plt>
   12d24:	ldr	r1, [r5]
   12d28:	bl	10cb0 <fputs_unlocked@plt>
   12d2c:	mov	r2, #5
   12d30:	movw	r1, #37408	; 0x9220
   12d34:	movt	r1, #1
   12d38:	mov	r0, r4
   12d3c:	bl	10d4c <dcgettext@plt>
   12d40:	ldr	r1, [r5]
   12d44:	bl	10cb0 <fputs_unlocked@plt>
   12d48:	mov	r2, #5
   12d4c:	movw	r1, #37484	; 0x926c
   12d50:	movt	r1, #1
   12d54:	mov	r0, r4
   12d58:	bl	10d4c <dcgettext@plt>
   12d5c:	ldr	r1, [r5]
   12d60:	bl	10cb0 <fputs_unlocked@plt>
   12d64:	mov	r2, #5
   12d68:	movw	r1, #37764	; 0x9384
   12d6c:	movt	r1, #1
   12d70:	mov	r0, r4
   12d74:	bl	10d4c <dcgettext@plt>
   12d78:	ldr	r1, [r5]
   12d7c:	bl	10cb0 <fputs_unlocked@plt>
   12d80:	mov	r2, #5
   12d84:	movw	r1, #38052	; 0x94a4
   12d88:	movt	r1, #1
   12d8c:	mov	r0, r4
   12d90:	bl	10d4c <dcgettext@plt>
   12d94:	ldr	r1, [r5]
   12d98:	bl	10cb0 <fputs_unlocked@plt>
   12d9c:	mov	r2, #5
   12da0:	movw	r1, #38100	; 0x94d4
   12da4:	movt	r1, #1
   12da8:	mov	r0, r4
   12dac:	bl	10d4c <dcgettext@plt>
   12db0:	ldr	r1, [r5]
   12db4:	bl	10cb0 <fputs_unlocked@plt>
   12db8:	movw	r0, #36836	; 0x8fe4
   12dbc:	movt	r0, #1
   12dc0:	ldr	ip, [r0, #16]
   12dc4:	ldrd	r2, [r0, #24]
   12dc8:	ldr	r6, [r0, #20]
   12dcc:	subs	r1, ip, #0
   12dd0:	str	ip, [sp]
   12dd4:	ldrd	r8, [r0, #32]
   12dd8:	strd	r2, [sp, #8]
   12ddc:	ldrd	r2, [r0, #40]	; 0x28
   12de0:	str	r6, [sp, #4]
   12de4:	ldrd	r6, [r0, #48]	; 0x30
   12de8:	strd	r8, [sp, #16]
   12dec:	ldrd	r8, [r0, #56]	; 0x38
   12df0:	strd	r2, [sp, #24]
   12df4:	ldrd	r2, [r0, #64]	; 0x40
   12df8:	strd	r6, [sp, #32]
   12dfc:	movwne	r7, #37132	; 0x910c
   12e00:	mov	r6, sp
   12e04:	movtne	r7, #1
   12e08:	strd	r8, [sp, #40]	; 0x28
   12e0c:	strd	r2, [sp, #48]	; 0x30
   12e10:	bne	12f08 <__assert_fail@plt+0x2000>
   12e14:	ldr	r6, [r6, #4]
   12e18:	movw	r1, #38156	; 0x950c
   12e1c:	movt	r1, #1
   12e20:	mov	r2, #5
   12e24:	cmp	r6, #0
   12e28:	beq	12f1c <__assert_fail@plt+0x2014>
   12e2c:	mov	r0, #0
   12e30:	bl	10d4c <dcgettext@plt>
   12e34:	mov	r1, r0
   12e38:	movw	r3, #38180	; 0x9524
   12e3c:	movt	r3, #1
   12e40:	movw	r2, #38220	; 0x954c
   12e44:	movt	r2, #1
   12e48:	mov	r0, #1
   12e4c:	bl	10e54 <__printf_chk@plt>
   12e50:	mov	r1, #0
   12e54:	mov	r0, #5
   12e58:	bl	10ea8 <setlocale@plt>
   12e5c:	cmp	r0, #0
   12e60:	movweq	r7, #37132	; 0x910c
   12e64:	movteq	r7, #1
   12e68:	beq	12e8c <__assert_fail@plt+0x1f84>
   12e6c:	movw	r1, #38236	; 0x955c
   12e70:	movt	r1, #1
   12e74:	mov	r2, #3
   12e78:	movw	r7, #37132	; 0x910c
   12e7c:	movt	r7, #1
   12e80:	bl	10ef0 <strncmp@plt>
   12e84:	cmp	r0, #0
   12e88:	bne	12fd4 <__assert_fail@plt+0x20cc>
   12e8c:	mov	r2, #5
   12e90:	movw	r1, #38312	; 0x95a8
   12e94:	movt	r1, #1
   12e98:	mov	r0, #0
   12e9c:	bl	10d4c <dcgettext@plt>
   12ea0:	mov	r1, r0
   12ea4:	movw	r3, #37132	; 0x910c
   12ea8:	movt	r3, #1
   12eac:	movw	r2, #38180	; 0x9524
   12eb0:	movt	r2, #1
   12eb4:	mov	r0, #1
   12eb8:	bl	10e54 <__printf_chk@plt>
   12ebc:	mov	r2, #5
   12ec0:	movw	r1, #38340	; 0x95c4
   12ec4:	movt	r1, #1
   12ec8:	mov	r0, #0
   12ecc:	bl	10d4c <dcgettext@plt>
   12ed0:	movw	r2, #38636	; 0x96ec
   12ed4:	movt	r2, #1
   12ed8:	cmp	r6, r7
   12edc:	movw	r3, #37348	; 0x91e4
   12ee0:	movt	r3, #1
   12ee4:	mov	r1, r0
   12ee8:	moveq	r3, r2
   12eec:	mov	r2, r6
   12ef0:	mov	r0, #1
   12ef4:	bl	10e54 <__printf_chk@plt>
   12ef8:	b	12cbc <__assert_fail@plt+0x1db4>
   12efc:	ldr	r1, [r6, #8]!
   12f00:	cmp	r1, #0
   12f04:	beq	12e14 <__assert_fail@plt+0x1f0c>
   12f08:	mov	r0, r7
   12f0c:	bl	10cbc <strcmp@plt>
   12f10:	cmp	r0, #0
   12f14:	bne	12efc <__assert_fail@plt+0x1ff4>
   12f18:	b	12e14 <__assert_fail@plt+0x1f0c>
   12f1c:	mov	r0, r6
   12f20:	bl	10d4c <dcgettext@plt>
   12f24:	mov	r1, r0
   12f28:	movw	r3, #38180	; 0x9524
   12f2c:	movt	r3, #1
   12f30:	movw	r2, #38220	; 0x954c
   12f34:	movt	r2, #1
   12f38:	mov	r0, #1
   12f3c:	bl	10e54 <__printf_chk@plt>
   12f40:	mov	r1, r6
   12f44:	mov	r0, #5
   12f48:	bl	10ea8 <setlocale@plt>
   12f4c:	cmp	r0, #0
   12f50:	beq	12f6c <__assert_fail@plt+0x2064>
   12f54:	movw	r1, #38236	; 0x955c
   12f58:	movt	r1, #1
   12f5c:	mov	r2, #3
   12f60:	bl	10ef0 <strncmp@plt>
   12f64:	cmp	r0, #0
   12f68:	bne	12fc8 <__assert_fail@plt+0x20c0>
   12f6c:	mov	r2, #5
   12f70:	movw	r1, #38312	; 0x95a8
   12f74:	movt	r1, #1
   12f78:	mov	r0, #0
   12f7c:	bl	10d4c <dcgettext@plt>
   12f80:	mov	r1, r0
   12f84:	movw	r3, #37132	; 0x910c
   12f88:	movt	r3, #1
   12f8c:	movw	r2, #38180	; 0x9524
   12f90:	movt	r2, #1
   12f94:	mov	r0, #1
   12f98:	bl	10e54 <__printf_chk@plt>
   12f9c:	movw	r1, #38340	; 0x95c4
   12fa0:	movt	r1, #1
   12fa4:	mov	r2, #5
   12fa8:	mov	r0, #0
   12fac:	bl	10d4c <dcgettext@plt>
   12fb0:	movw	r6, #37132	; 0x910c
   12fb4:	movt	r6, #1
   12fb8:	movw	r3, #38636	; 0x96ec
   12fbc:	movt	r3, #1
   12fc0:	mov	r1, r0
   12fc4:	b	12eec <__assert_fail@plt+0x1fe4>
   12fc8:	movw	r7, #37132	; 0x910c
   12fcc:	movt	r7, #1
   12fd0:	mov	r6, r7
   12fd4:	mov	r2, #5
   12fd8:	movw	r1, #38240	; 0x9560
   12fdc:	movt	r1, #1
   12fe0:	mov	r0, #0
   12fe4:	bl	10d4c <dcgettext@plt>
   12fe8:	ldr	r1, [r5]
   12fec:	bl	10cb0 <fputs_unlocked@plt>
   12ff0:	b	12e8c <__assert_fail@plt+0x1f84>
   12ff4:	movw	r3, #8840	; 0x2288
   12ff8:	movt	r3, #3
   12ffc:	str	r0, [r3]
   13000:	bx	lr
   13004:	movw	r3, #8840	; 0x2288
   13008:	movt	r3, #3
   1300c:	strb	r0, [r3, #4]
   13010:	bx	lr
   13014:	movw	r3, #41292	; 0xa14c
   13018:	movt	r3, #2
   1301c:	strd	r4, [sp, #-16]!
   13020:	ldr	r0, [r3]
   13024:	str	r6, [sp, #8]
   13028:	str	lr, [sp, #12]
   1302c:	sub	sp, sp, #8
   13030:	bl	18c64 <__assert_fail@plt+0x7d5c>
   13034:	cmp	r0, #0
   13038:	beq	13064 <__assert_fail@plt+0x215c>
   1303c:	movw	r4, #8840	; 0x2288
   13040:	movt	r4, #3
   13044:	ldrb	r6, [r4, #4]
   13048:	bl	10e30 <__errno_location@plt>
   1304c:	mov	r5, r0
   13050:	cmp	r6, #0
   13054:	beq	13090 <__assert_fail@plt+0x2188>
   13058:	ldr	r3, [r0]
   1305c:	cmp	r3, #32
   13060:	bne	13090 <__assert_fail@plt+0x2188>
   13064:	movw	r3, #41280	; 0xa140
   13068:	movt	r3, #2
   1306c:	ldr	r0, [r3]
   13070:	bl	18c64 <__assert_fail@plt+0x7d5c>
   13074:	cmp	r0, #0
   13078:	bne	130d8 <__assert_fail@plt+0x21d0>
   1307c:	add	sp, sp, #8
   13080:	ldrd	r4, [sp]
   13084:	ldr	r6, [sp, #8]
   13088:	add	sp, sp, #12
   1308c:	pop	{pc}		; (ldr pc, [sp], #4)
   13090:	movw	r1, #38848	; 0x97c0
   13094:	movt	r1, #1
   13098:	mov	r2, #5
   1309c:	mov	r0, #0
   130a0:	bl	10d4c <dcgettext@plt>
   130a4:	mov	r6, r0
   130a8:	ldr	r0, [r4]
   130ac:	cmp	r0, #0
   130b0:	beq	130e8 <__assert_fail@plt+0x21e0>
   130b4:	ldr	r4, [r5]
   130b8:	bl	1612c <__assert_fail@plt+0x5224>
   130bc:	mov	r3, r0
   130c0:	movw	r2, #38860	; 0x97cc
   130c4:	movt	r2, #1
   130c8:	mov	r0, #0
   130cc:	str	r6, [sp]
   130d0:	mov	r1, r4
   130d4:	bl	10db8 <error@plt>
   130d8:	movw	r3, #41196	; 0xa0ec
   130dc:	movt	r3, #2
   130e0:	ldr	r0, [r3]
   130e4:	bl	10cf8 <_exit@plt>
   130e8:	mov	r3, r6
   130ec:	movw	r2, #38864	; 0x97d0
   130f0:	movt	r2, #1
   130f4:	ldr	r1, [r5]
   130f8:	bl	10db8 <error@plt>
   130fc:	b	130d8 <__assert_fail@plt+0x21d0>
   13100:	b	10cc8 <posix_fadvise64@plt>
   13104:	cmp	r0, #0
   13108:	bxeq	lr
   1310c:	str	r4, [sp, #-16]!
   13110:	mov	r4, r1
   13114:	strd	r6, [sp, #4]
   13118:	mov	r6, #0
   1311c:	mov	r7, #0
   13120:	str	lr, [sp, #12]
   13124:	sub	sp, sp, #16
   13128:	bl	10e60 <fileno@plt>
   1312c:	mov	r2, r6
   13130:	mov	r3, r7
   13134:	strd	r6, [sp]
   13138:	str	r4, [sp, #8]
   1313c:	bl	10cc8 <posix_fadvise64@plt>
   13140:	add	sp, sp, #16
   13144:	ldr	r4, [sp]
   13148:	ldrd	r6, [sp, #4]
   1314c:	add	sp, sp, #12
   13150:	pop	{pc}		; (ldr pc, [sp], #4)
   13154:	strd	r4, [sp, #-12]!
   13158:	mov	r4, r0
   1315c:	str	lr, [sp, #8]
   13160:	sub	sp, sp, #12
   13164:	bl	10e60 <fileno@plt>
   13168:	cmp	r0, #0
   1316c:	mov	r0, r4
   13170:	blt	131f4 <__assert_fail@plt+0x22ec>
   13174:	bl	10ddc <__freading@plt>
   13178:	cmp	r0, #0
   1317c:	bne	131c0 <__assert_fail@plt+0x22b8>
   13180:	mov	r0, r4
   13184:	bl	13208 <__assert_fail@plt+0x2300>
   13188:	cmp	r0, #0
   1318c:	beq	131f0 <__assert_fail@plt+0x22e8>
   13190:	bl	10e30 <__errno_location@plt>
   13194:	mov	r5, r0
   13198:	mov	r0, r4
   1319c:	ldr	r4, [r5]
   131a0:	bl	10e78 <fclose@plt>
   131a4:	cmp	r4, #0
   131a8:	mvnne	r0, #0
   131ac:	strne	r4, [r5]
   131b0:	add	sp, sp, #12
   131b4:	ldrd	r4, [sp]
   131b8:	add	sp, sp, #8
   131bc:	pop	{pc}		; (ldr pc, [sp], #4)
   131c0:	mov	r0, r4
   131c4:	bl	10e60 <fileno@plt>
   131c8:	mov	r1, #1
   131cc:	mov	r2, #0
   131d0:	mov	r3, #0
   131d4:	str	r1, [sp]
   131d8:	bl	10d88 <lseek64@plt>
   131dc:	mvn	r3, #0
   131e0:	mvn	r2, #0
   131e4:	cmp	r1, r3
   131e8:	cmpeq	r0, r2
   131ec:	bne	13180 <__assert_fail@plt+0x2278>
   131f0:	mov	r0, r4
   131f4:	add	sp, sp, #12
   131f8:	ldrd	r4, [sp]
   131fc:	ldr	lr, [sp, #8]
   13200:	add	sp, sp, #12
   13204:	b	10e78 <fclose@plt>
   13208:	str	r4, [sp, #-8]!
   1320c:	subs	r4, r0, #0
   13210:	str	lr, [sp, #4]
   13214:	sub	sp, sp, #8
   13218:	beq	13234 <__assert_fail@plt+0x232c>
   1321c:	bl	10ddc <__freading@plt>
   13220:	cmp	r0, #0
   13224:	beq	13234 <__assert_fail@plt+0x232c>
   13228:	ldr	r3, [r4]
   1322c:	tst	r3, #256	; 0x100
   13230:	bne	1324c <__assert_fail@plt+0x2344>
   13234:	mov	r0, r4
   13238:	add	sp, sp, #8
   1323c:	ldr	r4, [sp]
   13240:	ldr	lr, [sp, #4]
   13244:	add	sp, sp, #8
   13248:	b	10cd4 <fflush@plt>
   1324c:	mov	r1, #1
   13250:	mov	r2, #0
   13254:	mov	r3, #0
   13258:	mov	r0, r4
   1325c:	str	r1, [sp]
   13260:	bl	13268 <__assert_fail@plt+0x2360>
   13264:	b	13234 <__assert_fail@plt+0x232c>
   13268:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1326c:	mov	r4, r0
   13270:	ldr	ip, [r0, #4]
   13274:	strd	r6, [sp, #8]
   13278:	str	lr, [sp, #20]
   1327c:	ldr	lr, [r0, #8]
   13280:	str	r8, [sp, #16]
   13284:	sub	sp, sp, #8
   13288:	ldr	r5, [sp, #32]
   1328c:	cmp	lr, ip
   13290:	beq	132b8 <__assert_fail@plt+0x23b0>
   13294:	mov	r0, r4
   13298:	str	r5, [sp, #32]
   1329c:	add	sp, sp, #8
   132a0:	ldrd	r4, [sp]
   132a4:	ldrd	r6, [sp, #8]
   132a8:	ldr	r8, [sp, #16]
   132ac:	ldr	lr, [sp, #20]
   132b0:	add	sp, sp, #24
   132b4:	b	10e84 <fseeko64@plt>
   132b8:	ldr	ip, [r0, #16]
   132bc:	ldr	lr, [r0, #20]
   132c0:	cmp	lr, ip
   132c4:	bne	13294 <__assert_fail@plt+0x238c>
   132c8:	ldr	r8, [r0, #36]	; 0x24
   132cc:	cmp	r8, #0
   132d0:	bne	13294 <__assert_fail@plt+0x238c>
   132d4:	mov	r6, r2
   132d8:	mov	r7, r3
   132dc:	bl	10e60 <fileno@plt>
   132e0:	mov	r2, r6
   132e4:	mov	r3, r7
   132e8:	str	r5, [sp]
   132ec:	bl	10d88 <lseek64@plt>
   132f0:	mvn	r3, #0
   132f4:	mvn	r2, #0
   132f8:	cmp	r1, r3
   132fc:	cmpeq	r0, r2
   13300:	beq	13330 <__assert_fail@plt+0x2428>
   13304:	ldr	r3, [r4]
   13308:	strd	r0, [r4, #80]	; 0x50
   1330c:	bic	r3, r3, #16
   13310:	str	r3, [r4]
   13314:	mov	r0, r8
   13318:	add	sp, sp, #8
   1331c:	ldrd	r4, [sp]
   13320:	ldrd	r6, [sp, #8]
   13324:	ldr	r8, [sp, #16]
   13328:	add	sp, sp, #20
   1332c:	pop	{pc}		; (ldr pc, [sp], #4)
   13330:	mvn	r8, #0
   13334:	b	13314 <__assert_fail@plt+0x240c>
   13338:	strd	r4, [sp, #-16]!
   1333c:	subs	r4, r0, #0
   13340:	str	r6, [sp, #8]
   13344:	str	lr, [sp, #12]
   13348:	beq	133e0 <__assert_fail@plt+0x24d8>
   1334c:	mov	r1, #47	; 0x2f
   13350:	bl	10eb4 <strrchr@plt>
   13354:	subs	r5, r0, #0
   13358:	beq	133b8 <__assert_fail@plt+0x24b0>
   1335c:	add	r6, r5, #1
   13360:	sub	r3, r6, r4
   13364:	cmp	r3, #6
   13368:	ble	133b8 <__assert_fail@plt+0x24b0>
   1336c:	movw	r1, #38924	; 0x980c
   13370:	movt	r1, #1
   13374:	mov	r2, #7
   13378:	sub	r0, r5, #6
   1337c:	bl	10ef0 <strncmp@plt>
   13380:	cmp	r0, #0
   13384:	bne	133b8 <__assert_fail@plt+0x24b0>
   13388:	movw	r1, #38932	; 0x9814
   1338c:	movt	r1, #1
   13390:	mov	r2, #3
   13394:	mov	r0, r6
   13398:	bl	10ef0 <strncmp@plt>
   1339c:	cmp	r0, #0
   133a0:	movne	r4, r6
   133a4:	bne	133b8 <__assert_fail@plt+0x24b0>
   133a8:	add	r4, r5, #4
   133ac:	movw	r3, #41264	; 0xa130
   133b0:	movt	r3, #2
   133b4:	str	r4, [r3]
   133b8:	movw	r2, #8848	; 0x2290
   133bc:	movt	r2, #3
   133c0:	ldr	r6, [sp, #8]
   133c4:	movw	r3, #41268	; 0xa134
   133c8:	movt	r3, #2
   133cc:	str	r4, [r2]
   133d0:	str	r4, [r3]
   133d4:	ldrd	r4, [sp]
   133d8:	add	sp, sp, #12
   133dc:	pop	{pc}		; (ldr pc, [sp], #4)
   133e0:	movw	r3, #41280	; 0xa140
   133e4:	movt	r3, #2
   133e8:	movw	r0, #38868	; 0x97d4
   133ec:	movt	r0, #1
   133f0:	ldr	r3, [r3]
   133f4:	mov	r2, #55	; 0x37
   133f8:	mov	r1, #1
   133fc:	bl	10d7c <fwrite@plt>
   13400:	bl	10efc <abort@plt>
   13404:	mov	r2, #5
   13408:	strd	r4, [sp, #-16]!
   1340c:	mov	r5, r0
   13410:	str	r6, [sp, #8]
   13414:	mov	r6, r1
   13418:	mov	r1, r0
   1341c:	mov	r0, #0
   13420:	str	lr, [sp, #12]
   13424:	bl	10d4c <dcgettext@plt>
   13428:	cmp	r5, r0
   1342c:	mov	r4, r0
   13430:	beq	13448 <__assert_fail@plt+0x2540>
   13434:	mov	r0, r4
   13438:	ldrd	r4, [sp]
   1343c:	ldr	r6, [sp, #8]
   13440:	add	sp, sp, #12
   13444:	pop	{pc}		; (ldr pc, [sp], #4)
   13448:	bl	18d4c <__assert_fail@plt+0x7e44>
   1344c:	ldrb	r3, [r0]
   13450:	bic	r3, r3, #32
   13454:	cmp	r3, #85	; 0x55
   13458:	bne	134c0 <__assert_fail@plt+0x25b8>
   1345c:	ldrb	r3, [r0, #1]
   13460:	bic	r3, r3, #32
   13464:	cmp	r3, #84	; 0x54
   13468:	bne	13540 <__assert_fail@plt+0x2638>
   1346c:	ldrb	r3, [r0, #2]
   13470:	bic	r3, r3, #32
   13474:	cmp	r3, #70	; 0x46
   13478:	bne	13540 <__assert_fail@plt+0x2638>
   1347c:	ldrb	r3, [r0, #3]
   13480:	cmp	r3, #45	; 0x2d
   13484:	bne	13540 <__assert_fail@plt+0x2638>
   13488:	ldrb	r3, [r0, #4]
   1348c:	cmp	r3, #56	; 0x38
   13490:	bne	13540 <__assert_fail@plt+0x2638>
   13494:	ldrb	r3, [r0, #5]
   13498:	cmp	r3, #0
   1349c:	bne	13540 <__assert_fail@plt+0x2638>
   134a0:	ldrb	r2, [r4]
   134a4:	movw	r3, #39020	; 0x986c
   134a8:	movt	r3, #1
   134ac:	movw	r4, #39032	; 0x9878
   134b0:	movt	r4, #1
   134b4:	cmp	r2, #96	; 0x60
   134b8:	movne	r4, r3
   134bc:	b	13434 <__assert_fail@plt+0x252c>
   134c0:	cmp	r3, #71	; 0x47
   134c4:	bne	13540 <__assert_fail@plt+0x2638>
   134c8:	ldrb	r3, [r0, #1]
   134cc:	bic	r3, r3, #32
   134d0:	cmp	r3, #66	; 0x42
   134d4:	bne	13540 <__assert_fail@plt+0x2638>
   134d8:	ldrb	r3, [r0, #2]
   134dc:	cmp	r3, #49	; 0x31
   134e0:	bne	13540 <__assert_fail@plt+0x2638>
   134e4:	ldrb	r3, [r0, #3]
   134e8:	cmp	r3, #56	; 0x38
   134ec:	bne	13540 <__assert_fail@plt+0x2638>
   134f0:	ldrb	r3, [r0, #4]
   134f4:	cmp	r3, #48	; 0x30
   134f8:	bne	13540 <__assert_fail@plt+0x2638>
   134fc:	ldrb	r3, [r0, #5]
   13500:	cmp	r3, #51	; 0x33
   13504:	bne	13540 <__assert_fail@plt+0x2638>
   13508:	ldrb	r3, [r0, #6]
   1350c:	cmp	r3, #48	; 0x30
   13510:	bne	13540 <__assert_fail@plt+0x2638>
   13514:	ldrb	r3, [r0, #7]
   13518:	cmp	r3, #0
   1351c:	bne	13540 <__assert_fail@plt+0x2638>
   13520:	ldrb	r2, [r4]
   13524:	movw	r3, #39024	; 0x9870
   13528:	movt	r3, #1
   1352c:	movw	r4, #39028	; 0x9874
   13530:	movt	r4, #1
   13534:	cmp	r2, #96	; 0x60
   13538:	movne	r4, r3
   1353c:	b	13434 <__assert_fail@plt+0x252c>
   13540:	movw	r3, #39036	; 0x987c
   13544:	movt	r3, #1
   13548:	cmp	r6, #9
   1354c:	movw	r4, #37072	; 0x90d0
   13550:	movt	r4, #1
   13554:	movne	r4, r3
   13558:	b	13434 <__assert_fail@plt+0x252c>
   1355c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13560:	strd	r6, [sp, #8]
   13564:	strd	r8, [sp, #16]
   13568:	mov	r8, r3
   1356c:	strd	sl, [sp, #24]
   13570:	mov	fp, r0
   13574:	mov	sl, r1
   13578:	str	lr, [sp, #32]
   1357c:	sub	sp, sp, #140	; 0x8c
   13580:	ldr	r3, [sp, #180]	; 0xb4
   13584:	str	r2, [sp, #28]
   13588:	and	r4, r3, #2
   1358c:	ubfx	r3, r3, #1, #1
   13590:	str	r3, [sp, #44]	; 0x2c
   13594:	bl	10d94 <__ctype_get_mb_cur_max@plt>
   13598:	ldr	r3, [sp, #176]	; 0xb0
   1359c:	str	r0, [sp, #76]	; 0x4c
   135a0:	cmp	r3, #10
   135a4:	ldrls	pc, [pc, r3, lsl #2]
   135a8:	b	14f44 <__assert_fail@plt+0x403c>
   135ac:	andeq	r3, r1, ip, lsr #20
   135b0:	andeq	r3, r1, r8, asr #22
   135b4:	andeq	r4, r1, r4, asr #1
   135b8:			; <UNDEFINED> instruction: 0x00013bb4
   135bc:	andeq	r3, r1, r4, lsr r9
   135c0:			; <UNDEFINED> instruction: 0x000139b0
   135c4:	andeq	r3, r1, r8, lsl #21
   135c8:	strdeq	r3, [r1], -r0
   135cc:	ldrdeq	r3, [r1], -r8
   135d0:	ldrdeq	r3, [r1], -r8
   135d4:	ldrdeq	r3, [r1], -r8
   135d8:	ldr	r3, [sp, #176]	; 0xb0
   135dc:	cmp	r3, #10
   135e0:	beq	1360c <__assert_fail@plt+0x2704>
   135e4:	mov	r1, r3
   135e8:	movw	r0, #39040	; 0x9880
   135ec:	movt	r0, #1
   135f0:	bl	13404 <__assert_fail@plt+0x24fc>
   135f4:	str	r0, [sp, #188]	; 0xbc
   135f8:	movw	r0, #39036	; 0x987c
   135fc:	movt	r0, #1
   13600:	ldr	r1, [sp, #176]	; 0xb0
   13604:	bl	13404 <__assert_fail@plt+0x24fc>
   13608:	str	r0, [sp, #192]	; 0xc0
   1360c:	cmp	r4, #0
   13610:	movne	r4, #0
   13614:	beq	14cd0 <__assert_fail@plt+0x3dc8>
   13618:	mov	r5, #0
   1361c:	ldr	r0, [sp, #192]	; 0xc0
   13620:	mov	r9, r5
   13624:	str	r5, [sp, #64]	; 0x40
   13628:	bl	10e18 <strlen@plt>
   1362c:	mov	r3, #1
   13630:	ldr	r2, [sp, #44]	; 0x2c
   13634:	cmp	r0, r5
   13638:	moveq	r2, r5
   1363c:	str	r3, [sp, #32]
   13640:	str	r3, [sp, #48]	; 0x30
   13644:	str	r5, [sp, #52]	; 0x34
   13648:	str	r3, [sp, #60]	; 0x3c
   1364c:	ldr	r3, [sp, #180]	; 0xb4
   13650:	str	r0, [sp, #56]	; 0x38
   13654:	str	r5, [sp, #68]	; 0x44
   13658:	str	r5, [sp, #80]	; 0x50
   1365c:	str	r5, [sp, #84]	; 0x54
   13660:	and	r3, r3, #1
   13664:	str	r2, [sp, #88]	; 0x58
   13668:	str	r3, [sp, #92]	; 0x5c
   1366c:	ldr	r3, [sp, #180]	; 0xb4
   13670:	and	r3, r3, #4
   13674:	str	r3, [sp, #96]	; 0x60
   13678:	ldr	r3, [sp, #192]	; 0xc0
   1367c:	str	r3, [sp, #72]	; 0x48
   13680:	mov	r3, fp
   13684:	mov	r7, #0
   13688:	mov	fp, r9
   1368c:	mov	r9, r3
   13690:	cmn	r8, #1
   13694:	beq	13c98 <__assert_fail@plt+0x2d90>
   13698:	subs	r6, r8, r7
   1369c:	movne	r6, #1
   136a0:	cmp	r6, #0
   136a4:	beq	13cb0 <__assert_fail@plt+0x2da8>
   136a8:	ldr	r0, [sp, #28]
   136ac:	ldr	r3, [sp, #48]	; 0x30
   136b0:	cmp	r3, #0
   136b4:	add	r3, r0, r7
   136b8:	str	r3, [sp, #36]	; 0x24
   136bc:	beq	1413c <__assert_fail@plt+0x3234>
   136c0:	ldr	r2, [sp, #56]	; 0x38
   136c4:	cmp	r2, #0
   136c8:	beq	1463c <__assert_fail@plt+0x3734>
   136cc:	cmp	r2, #1
   136d0:	mov	r3, r2
   136d4:	movls	r3, #0
   136d8:	movhi	r3, #1
   136dc:	cmn	r8, #1
   136e0:	add	r5, r7, r2
   136e4:	movne	r3, #0
   136e8:	cmp	r3, #0
   136ec:	beq	136f8 <__assert_fail@plt+0x27f0>
   136f0:	bl	10e18 <strlen@plt>
   136f4:	mov	r8, r0
   136f8:	cmp	r5, r8
   136fc:	bhi	1463c <__assert_fail@plt+0x3734>
   13700:	ldr	r0, [sp, #36]	; 0x24
   13704:	ldr	r2, [sp, #56]	; 0x38
   13708:	ldr	r1, [sp, #72]	; 0x48
   1370c:	bl	10d34 <memcmp@plt>
   13710:	cmp	r0, #0
   13714:	bne	1463c <__assert_fail@plt+0x3734>
   13718:	ldr	r3, [sp, #44]	; 0x2c
   1371c:	cmp	r3, #0
   13720:	bne	14de8 <__assert_fail@plt+0x3ee0>
   13724:	ldr	r3, [sp, #36]	; 0x24
   13728:	ldrb	r5, [r3]
   1372c:	cmp	r5, #126	; 0x7e
   13730:	ldrls	pc, [pc, r5, lsl #2]
   13734:	b	14bd0 <__assert_fail@plt+0x3cc8>
   13738:	andeq	r3, r1, ip, lsl #28
   1373c:	ldrdeq	r4, [r1], -r0
   13740:	ldrdeq	r4, [r1], -r0
   13744:	ldrdeq	r4, [r1], -r0
   13748:	ldrdeq	r4, [r1], -r0
   1374c:	ldrdeq	r4, [r1], -r0
   13750:	ldrdeq	r4, [r1], -r0
   13754:	andeq	r3, r1, r4, ror #26
   13758:	andeq	r3, r1, ip, asr sp
   1375c:	andeq	r3, r1, ip, ror #26
   13760:	strdeq	r3, [r1], -r0
   13764:	andeq	r3, r1, r0, ror #29
   13768:	andeq	r3, r1, r8, lsl #24
   1376c:			; <UNDEFINED> instruction: 0x00013ebc
   13770:	ldrdeq	r4, [r1], -r0
   13774:	ldrdeq	r4, [r1], -r0
   13778:	ldrdeq	r4, [r1], -r0
   1377c:	ldrdeq	r4, [r1], -r0
   13780:	ldrdeq	r4, [r1], -r0
   13784:	ldrdeq	r4, [r1], -r0
   13788:	ldrdeq	r4, [r1], -r0
   1378c:	ldrdeq	r4, [r1], -r0
   13790:	ldrdeq	r4, [r1], -r0
   13794:	ldrdeq	r4, [r1], -r0
   13798:	ldrdeq	r4, [r1], -r0
   1379c:	ldrdeq	r4, [r1], -r0
   137a0:	ldrdeq	r4, [r1], -r0
   137a4:	ldrdeq	r4, [r1], -r0
   137a8:	ldrdeq	r4, [r1], -r0
   137ac:	ldrdeq	r4, [r1], -r0
   137b0:	ldrdeq	r4, [r1], -r0
   137b4:	ldrdeq	r4, [r1], -r0
   137b8:	andeq	r3, r1, r8, ror #30
   137bc:	andeq	r3, r1, ip, asr pc
   137c0:	andeq	r3, r1, ip, asr pc
   137c4:	andeq	r3, r1, r0, asr pc
   137c8:	andeq	r3, r1, ip, asr pc
   137cc:	andeq	r4, r1, r4, lsr r0
   137d0:	andeq	r3, r1, ip, asr pc
   137d4:	andeq	r4, r1, r4, lsr #1
   137d8:	andeq	r3, r1, ip, asr pc
   137dc:	andeq	r3, r1, ip, asr pc
   137e0:	andeq	r3, r1, ip, asr pc
   137e4:	andeq	r4, r1, r4, lsr r0
   137e8:	andeq	r4, r1, r4, lsr r0
   137ec:	andeq	r4, r1, r4, lsr r0
   137f0:	andeq	r4, r1, r4, lsr r0
   137f4:	andeq	r4, r1, r4, lsr r0
   137f8:	andeq	r4, r1, r4, lsr r0
   137fc:	andeq	r4, r1, r4, lsr r0
   13800:	andeq	r4, r1, r4, lsr r0
   13804:	andeq	r4, r1, r4, lsr r0
   13808:	andeq	r4, r1, r4, lsr r0
   1380c:	andeq	r4, r1, r4, lsr r0
   13810:	andeq	r4, r1, r4, lsr r0
   13814:	andeq	r4, r1, r4, lsr r0
   13818:	andeq	r4, r1, r4, lsr r0
   1381c:	andeq	r4, r1, r4, lsr r0
   13820:	andeq	r4, r1, r4, lsr r0
   13824:	andeq	r3, r1, ip, asr pc
   13828:	andeq	r3, r1, ip, asr pc
   1382c:	andeq	r3, r1, ip, asr pc
   13830:	andeq	r3, r1, ip, asr pc
   13834:	andeq	r4, r1, r4, asr r0
   13838:	ldrdeq	r4, [r1], -r0
   1383c:	andeq	r4, r1, r4, lsr r0
   13840:	andeq	r4, r1, r4, lsr r0
   13844:	andeq	r4, r1, r4, lsr r0
   13848:	andeq	r4, r1, r4, lsr r0
   1384c:	andeq	r4, r1, r4, lsr r0
   13850:	andeq	r4, r1, r4, lsr r0
   13854:	andeq	r4, r1, r4, lsr r0
   13858:	andeq	r4, r1, r4, lsr r0
   1385c:	andeq	r4, r1, r4, lsr r0
   13860:	andeq	r4, r1, r4, lsr r0
   13864:	andeq	r4, r1, r4, lsr r0
   13868:	andeq	r4, r1, r4, lsr r0
   1386c:	andeq	r4, r1, r4, lsr r0
   13870:	andeq	r4, r1, r4, lsr r0
   13874:	andeq	r4, r1, r4, lsr r0
   13878:	andeq	r4, r1, r4, lsr r0
   1387c:	andeq	r4, r1, r4, lsr r0
   13880:	andeq	r4, r1, r4, lsr r0
   13884:	andeq	r4, r1, r4, lsr r0
   13888:	andeq	r4, r1, r4, lsr r0
   1388c:	andeq	r4, r1, r4, lsr r0
   13890:	andeq	r4, r1, r4, lsr r0
   13894:	andeq	r4, r1, r4, lsr r0
   13898:	andeq	r4, r1, r4, lsr r0
   1389c:	andeq	r4, r1, r4, lsr r0
   138a0:	andeq	r4, r1, r4, lsr r0
   138a4:	andeq	r3, r1, ip, asr pc
   138a8:	strdeq	r3, [r1], -r8
   138ac:	andeq	r4, r1, r4, lsr r0
   138b0:	andeq	r3, r1, ip, asr pc
   138b4:	andeq	r4, r1, r4, lsr r0
   138b8:	andeq	r3, r1, ip, asr pc
   138bc:	andeq	r4, r1, r4, lsr r0
   138c0:	andeq	r4, r1, r4, lsr r0
   138c4:	andeq	r4, r1, r4, lsr r0
   138c8:	andeq	r4, r1, r4, lsr r0
   138cc:	andeq	r4, r1, r4, lsr r0
   138d0:	andeq	r4, r1, r4, lsr r0
   138d4:	andeq	r4, r1, r4, lsr r0
   138d8:	andeq	r4, r1, r4, lsr r0
   138dc:	andeq	r4, r1, r4, lsr r0
   138e0:	andeq	r4, r1, r4, lsr r0
   138e4:	andeq	r4, r1, r4, lsr r0
   138e8:	andeq	r4, r1, r4, lsr r0
   138ec:	andeq	r4, r1, r4, lsr r0
   138f0:	andeq	r4, r1, r4, lsr r0
   138f4:	andeq	r4, r1, r4, lsr r0
   138f8:	andeq	r4, r1, r4, lsr r0
   138fc:	andeq	r4, r1, r4, lsr r0
   13900:	andeq	r4, r1, r4, lsr r0
   13904:	andeq	r4, r1, r4, lsr r0
   13908:	andeq	r4, r1, r4, lsr r0
   1390c:	andeq	r4, r1, r4, lsr r0
   13910:	andeq	r4, r1, r4, lsr r0
   13914:	andeq	r4, r1, r4, lsr r0
   13918:	andeq	r4, r1, r4, lsr r0
   1391c:	andeq	r4, r1, r4, lsr r0
   13920:	andeq	r4, r1, r4, lsr r0
   13924:	andeq	r3, r1, r4, lsl #30
   13928:	andeq	r3, r1, ip, asr pc
   1392c:	andeq	r3, r1, r4, lsl #30
   13930:	andeq	r3, r1, r0, asr pc
   13934:	ldr	r3, [sp, #180]	; 0xb4
   13938:	cmp	r4, #0
   1393c:	and	r3, r3, #1
   13940:	str	r3, [sp, #92]	; 0x5c
   13944:	ldr	r3, [sp, #180]	; 0xb4
   13948:	and	r3, r3, #4
   1394c:	str	r3, [sp, #96]	; 0x60
   13950:	moveq	r3, #1
   13954:	streq	r3, [sp, #60]	; 0x3c
   13958:	beq	140e8 <__assert_fail@plt+0x31e0>
   1395c:	mov	r3, #0
   13960:	mov	r2, #1
   13964:	mov	r4, r3
   13968:	mov	r9, r3
   1396c:	str	r2, [sp, #32]
   13970:	str	r2, [sp, #44]	; 0x2c
   13974:	str	r3, [sp, #48]	; 0x30
   13978:	str	r2, [sp, #52]	; 0x34
   1397c:	str	r2, [sp, #56]	; 0x38
   13980:	str	r3, [sp, #60]	; 0x3c
   13984:	str	r2, [sp, #64]	; 0x40
   13988:	str	r2, [sp, #68]	; 0x44
   1398c:	str	r3, [sp, #80]	; 0x50
   13990:	str	r3, [sp, #84]	; 0x54
   13994:	str	r3, [sp, #88]	; 0x58
   13998:	movw	r3, #39036	; 0x987c
   1399c:	movt	r3, #1
   139a0:	str	r3, [sp, #72]	; 0x48
   139a4:	mov	r3, #2
   139a8:	str	r3, [sp, #176]	; 0xb0
   139ac:	b	13680 <__assert_fail@plt+0x2778>
   139b0:	ldr	r3, [sp, #180]	; 0xb4
   139b4:	cmp	r4, #0
   139b8:	and	r3, r3, #1
   139bc:	str	r3, [sp, #92]	; 0x5c
   139c0:	ldr	r3, [sp, #180]	; 0xb4
   139c4:	and	r3, r3, #4
   139c8:	str	r3, [sp, #96]	; 0x60
   139cc:	bne	14da0 <__assert_fail@plt+0x3e98>
   139d0:	cmp	sl, #0
   139d4:	beq	14b4c <__assert_fail@plt+0x3c44>
   139d8:	mov	r3, #34	; 0x22
   139dc:	mov	r2, r4
   139e0:	mov	r1, #1
   139e4:	mov	r9, r2
   139e8:	strb	r3, [fp]
   139ec:	movw	r3, #37072	; 0x90d0
   139f0:	movt	r3, #1
   139f4:	mov	r4, r1
   139f8:	str	r1, [sp, #32]
   139fc:	str	r2, [sp, #44]	; 0x2c
   13a00:	str	r1, [sp, #48]	; 0x30
   13a04:	str	r2, [sp, #52]	; 0x34
   13a08:	str	r1, [sp, #56]	; 0x38
   13a0c:	str	r1, [sp, #60]	; 0x3c
   13a10:	str	r2, [sp, #64]	; 0x40
   13a14:	str	r2, [sp, #68]	; 0x44
   13a18:	str	r3, [sp, #72]	; 0x48
   13a1c:	str	r2, [sp, #80]	; 0x50
   13a20:	str	r2, [sp, #84]	; 0x54
   13a24:	str	r2, [sp, #88]	; 0x58
   13a28:	b	13680 <__assert_fail@plt+0x2778>
   13a2c:	mov	r3, #0
   13a30:	mov	r2, #1
   13a34:	mov	r9, r3
   13a38:	str	r2, [sp, #32]
   13a3c:	str	r3, [sp, #44]	; 0x2c
   13a40:	str	r3, [sp, #48]	; 0x30
   13a44:	str	r3, [sp, #52]	; 0x34
   13a48:	str	r3, [sp, #60]	; 0x3c
   13a4c:	strd	r2, [sp, #64]	; 0x40
   13a50:	str	r3, [sp, #72]	; 0x48
   13a54:	str	r3, [sp, #80]	; 0x50
   13a58:	str	r3, [sp, #88]	; 0x58
   13a5c:	ldr	r3, [sp, #180]	; 0xb4
   13a60:	and	r3, r3, r2
   13a64:	str	r3, [sp, #92]	; 0x5c
   13a68:	ldr	r3, [sp, #180]	; 0xb4
   13a6c:	and	r3, r3, #4
   13a70:	str	r3, [sp, #96]	; 0x60
   13a74:	ldr	r3, [sp, #176]	; 0xb0
   13a78:	mov	r4, r3
   13a7c:	str	r3, [sp, #56]	; 0x38
   13a80:	str	r3, [sp, #84]	; 0x54
   13a84:	b	13680 <__assert_fail@plt+0x2778>
   13a88:	mov	r3, #1
   13a8c:	mov	r4, #0
   13a90:	mov	r9, r4
   13a94:	str	r3, [sp, #32]
   13a98:	str	r3, [sp, #44]	; 0x2c
   13a9c:	str	r3, [sp, #48]	; 0x30
   13aa0:	str	r4, [sp, #52]	; 0x34
   13aa4:	str	r3, [sp, #56]	; 0x38
   13aa8:	str	r3, [sp, #60]	; 0x3c
   13aac:	str	r3, [sp, #88]	; 0x58
   13ab0:	movw	r3, #37072	; 0x90d0
   13ab4:	movt	r3, #1
   13ab8:	str	r4, [sp, #64]	; 0x40
   13abc:	str	r4, [sp, #68]	; 0x44
   13ac0:	str	r3, [sp, #72]	; 0x48
   13ac4:	ldr	r3, [sp, #180]	; 0xb4
   13ac8:	str	r4, [sp, #80]	; 0x50
   13acc:	str	r4, [sp, #84]	; 0x54
   13ad0:	and	r3, r3, #1
   13ad4:	str	r3, [sp, #92]	; 0x5c
   13ad8:	ldr	r3, [sp, #180]	; 0xb4
   13adc:	and	r3, r3, #4
   13ae0:	str	r3, [sp, #96]	; 0x60
   13ae4:	mov	r3, #5
   13ae8:	str	r3, [sp, #176]	; 0xb0
   13aec:	b	13680 <__assert_fail@plt+0x2778>
   13af0:	mov	r3, #1
   13af4:	mov	r4, #0
   13af8:	mov	r9, r4
   13afc:	str	r3, [sp, #32]
   13b00:	str	r4, [sp, #44]	; 0x2c
   13b04:	str	r3, [sp, #48]	; 0x30
   13b08:	str	r3, [sp, #60]	; 0x3c
   13b0c:	ldr	r3, [sp, #180]	; 0xb4
   13b10:	str	r4, [sp, #52]	; 0x34
   13b14:	str	r4, [sp, #56]	; 0x38
   13b18:	str	r4, [sp, #64]	; 0x40
   13b1c:	str	r4, [sp, #68]	; 0x44
   13b20:	and	r3, r3, #1
   13b24:	str	r4, [sp, #72]	; 0x48
   13b28:	str	r4, [sp, #80]	; 0x50
   13b2c:	str	r4, [sp, #84]	; 0x54
   13b30:	str	r3, [sp, #92]	; 0x5c
   13b34:	ldr	r3, [sp, #180]	; 0xb4
   13b38:	str	r4, [sp, #88]	; 0x58
   13b3c:	and	r3, r3, #4
   13b40:	str	r3, [sp, #96]	; 0x60
   13b44:	b	13680 <__assert_fail@plt+0x2778>
   13b48:	mov	r3, #0
   13b4c:	mov	r2, #1
   13b50:	ldr	r1, [sp, #176]	; 0xb0
   13b54:	mov	r4, r3
   13b58:	mov	r9, r3
   13b5c:	movw	r3, #39036	; 0x987c
   13b60:	movt	r3, #1
   13b64:	str	r2, [sp, #32]
   13b68:	str	r2, [sp, #44]	; 0x2c
   13b6c:	str	r4, [sp, #48]	; 0x30
   13b70:	strd	r2, [sp, #68]	; 0x44
   13b74:	ldr	r3, [sp, #180]	; 0xb4
   13b78:	str	r2, [sp, #52]	; 0x34
   13b7c:	str	r1, [sp, #56]	; 0x38
   13b80:	str	r4, [sp, #60]	; 0x3c
   13b84:	str	r2, [sp, #64]	; 0x40
   13b88:	and	r3, r3, r2
   13b8c:	str	r4, [sp, #80]	; 0x50
   13b90:	str	r4, [sp, #84]	; 0x54
   13b94:	str	r4, [sp, #88]	; 0x58
   13b98:	str	r3, [sp, #92]	; 0x5c
   13b9c:	ldr	r3, [sp, #180]	; 0xb4
   13ba0:	and	r3, r3, #4
   13ba4:	str	r3, [sp, #96]	; 0x60
   13ba8:	mov	r3, #2
   13bac:	str	r3, [sp, #176]	; 0xb0
   13bb0:	b	13680 <__assert_fail@plt+0x2778>
   13bb4:	mov	r3, #1
   13bb8:	mov	r2, #0
   13bbc:	mov	r4, r2
   13bc0:	mov	r9, r2
   13bc4:	str	r3, [sp, #32]
   13bc8:	str	r3, [sp, #44]	; 0x2c
   13bcc:	str	r2, [sp, #48]	; 0x30
   13bd0:	str	r3, [sp, #52]	; 0x34
   13bd4:	str	r3, [sp, #56]	; 0x38
   13bd8:	str	r3, [sp, #60]	; 0x3c
   13bdc:	str	r3, [sp, #64]	; 0x40
   13be0:	str	r3, [sp, #68]	; 0x44
   13be4:	str	r3, [sp, #88]	; 0x58
   13be8:	movw	r3, #39036	; 0x987c
   13bec:	movt	r3, #1
   13bf0:	str	r3, [sp, #72]	; 0x48
   13bf4:	ldr	r3, [sp, #180]	; 0xb4
   13bf8:	str	r2, [sp, #80]	; 0x50
   13bfc:	str	r2, [sp, #84]	; 0x54
   13c00:	and	r3, r3, #1
   13c04:	b	13b98 <__assert_fail@plt+0x2c90>
   13c08:	mov	r5, #102	; 0x66
   13c0c:	mov	r6, #0
   13c10:	ldr	r3, [sp, #44]	; 0x2c
   13c14:	cmp	r3, #0
   13c18:	bne	14ac8 <__assert_fail@plt+0x3bc0>
   13c1c:	ldr	r2, [sp, #52]	; 0x34
   13c20:	eor	r3, fp, #1
   13c24:	ands	r3, r2, r3
   13c28:	beq	13c60 <__assert_fail@plt+0x2d58>
   13c2c:	cmp	sl, r4
   13c30:	mov	fp, r3
   13c34:	movhi	r2, #39	; 0x27
   13c38:	strbhi	r2, [r9, r4]
   13c3c:	add	r2, r4, #1
   13c40:	cmp	sl, r2
   13c44:	movhi	r1, #36	; 0x24
   13c48:	strbhi	r1, [r9, r2]
   13c4c:	add	r2, r4, #2
   13c50:	add	r4, r4, #3
   13c54:	cmp	sl, r2
   13c58:	movhi	r1, #39	; 0x27
   13c5c:	strbhi	r1, [r9, r2]
   13c60:	cmp	sl, r4
   13c64:	add	r7, r7, #1
   13c68:	movhi	r3, #92	; 0x5c
   13c6c:	strbhi	r3, [r9, r4]
   13c70:	add	r4, r4, #1
   13c74:	cmp	r4, sl
   13c78:	ldr	r3, [sp, #32]
   13c7c:	strbcc	r5, [r9, r4]
   13c80:	cmp	r6, #0
   13c84:	add	r4, r4, #1
   13c88:	moveq	r3, #0
   13c8c:	cmn	r8, #1
   13c90:	str	r3, [sp, #32]
   13c94:	bne	13698 <__assert_fail@plt+0x2790>
   13c98:	ldr	r3, [sp, #28]
   13c9c:	ldrb	r6, [r3, r7]
   13ca0:	adds	r6, r6, #0
   13ca4:	movne	r6, #1
   13ca8:	cmp	r6, #0
   13cac:	bne	136a8 <__assert_fail@plt+0x27a0>
   13cb0:	mov	r3, r9
   13cb4:	mov	r9, fp
   13cb8:	mov	fp, r3
   13cbc:	ldr	r3, [sp, #68]	; 0x44
   13cc0:	cmp	r4, #0
   13cc4:	movne	r3, #0
   13cc8:	cmp	r3, #0
   13ccc:	bne	14ec0 <__assert_fail@plt+0x3fb8>
   13cd0:	ldr	r3, [sp, #44]	; 0x2c
   13cd4:	ldr	r2, [sp, #52]	; 0x34
   13cd8:	eor	r3, r3, #1
   13cdc:	ands	r2, r3, r2
   13ce0:	beq	14df8 <__assert_fail@plt+0x3ef0>
   13ce4:	ldr	r3, [sp, #80]	; 0x50
   13ce8:	cmp	r3, #0
   13cec:	beq	14dfc <__assert_fail@plt+0x3ef4>
   13cf0:	ldr	r3, [sp, #32]
   13cf4:	cmp	r3, #0
   13cf8:	bne	14e70 <__assert_fail@plt+0x3f68>
   13cfc:	ldr	r3, [sp, #84]	; 0x54
   13d00:	adds	r3, r3, #0
   13d04:	movne	r3, #1
   13d08:	cmp	sl, #0
   13d0c:	movne	r3, #0
   13d10:	cmp	r3, #0
   13d14:	ldreq	r2, [sp, #80]	; 0x50
   13d18:	beq	14dfc <__assert_fail@plt+0x3ef4>
   13d1c:	ldr	r2, [sp, #84]	; 0x54
   13d20:	mov	sl, r2
   13d24:	mov	r0, #0
   13d28:	mov	r4, #1
   13d2c:	mov	r1, #39	; 0x27
   13d30:	str	r0, [sp, #44]	; 0x2c
   13d34:	strb	r1, [fp]
   13d38:	str	r0, [sp, #48]	; 0x30
   13d3c:	str	r4, [sp, #52]	; 0x34
   13d40:	str	r4, [sp, #56]	; 0x38
   13d44:	str	r4, [sp, #64]	; 0x40
   13d48:	str	r0, [sp, #68]	; 0x44
   13d4c:	str	r3, [sp, #80]	; 0x50
   13d50:	str	r2, [sp, #84]	; 0x54
   13d54:	str	r0, [sp, #88]	; 0x58
   13d58:	b	13998 <__assert_fail@plt+0x2a90>
   13d5c:	mov	r5, #98	; 0x62
   13d60:	b	13c0c <__assert_fail@plt+0x2d04>
   13d64:	mov	r5, #97	; 0x61
   13d68:	b	13c0c <__assert_fail@plt+0x2d04>
   13d6c:	ldr	r3, [sp, #48]	; 0x30
   13d70:	str	r3, [sp, #40]	; 0x28
   13d74:	mov	r3, #116	; 0x74
   13d78:	ldr	r2, [sp, #68]	; 0x44
   13d7c:	cmp	r2, #0
   13d80:	bne	13f7c <__assert_fail@plt+0x3074>
   13d84:	ldr	r2, [sp, #60]	; 0x3c
   13d88:	cmp	r2, #0
   13d8c:	bne	13ed8 <__assert_fail@plt+0x2fd0>
   13d90:	ldr	r3, [sp, #44]	; 0x2c
   13d94:	mov	r6, #0
   13d98:	cmp	r3, #0
   13d9c:	beq	13f48 <__assert_fail@plt+0x3040>
   13da0:	mov	r3, fp
   13da4:	ldr	r2, [sp, #184]	; 0xb8
   13da8:	cmp	r2, #0
   13dac:	beq	13dcc <__assert_fail@plt+0x2ec4>
   13db0:	ubfx	r1, r5, #5, #8
   13db4:	mov	r0, r2
   13db8:	and	r2, r5, #31
   13dbc:	ldr	r1, [r0, r1, lsl #2]
   13dc0:	lsr	r2, r1, r2
   13dc4:	tst	r2, #1
   13dc8:	bne	13c10 <__assert_fail@plt+0x2d08>
   13dcc:	ldr	r2, [sp, #40]	; 0x28
   13dd0:	cmp	r2, #0
   13dd4:	addeq	r7, r7, #1
   13dd8:	bne	13c10 <__assert_fail@plt+0x2d08>
   13ddc:	cmp	r3, #0
   13de0:	beq	13c74 <__assert_fail@plt+0x2d6c>
   13de4:	cmp	sl, r4
   13de8:	mov	fp, #0
   13dec:	movhi	r3, #39	; 0x27
   13df0:	strbhi	r3, [r9, r4]
   13df4:	add	r3, r4, #1
   13df8:	add	r4, r4, #2
   13dfc:	cmp	sl, r3
   13e00:	movhi	r2, #39	; 0x27
   13e04:	strbhi	r2, [r9, r3]
   13e08:	b	13c74 <__assert_fail@plt+0x2d6c>
   13e0c:	ldr	r3, [sp, #48]	; 0x30
   13e10:	str	r3, [sp, #40]	; 0x28
   13e14:	eor	r3, fp, #1
   13e18:	ldr	r2, [sp, #52]	; 0x34
   13e1c:	ands	r2, r2, r3
   13e20:	beq	14ae0 <__assert_fail@plt+0x3bd8>
   13e24:	cmp	sl, r4
   13e28:	movhi	r3, #39	; 0x27
   13e2c:	strbhi	r3, [r9, r4]
   13e30:	add	r3, r4, #1
   13e34:	cmp	sl, r3
   13e38:	movhi	r1, #36	; 0x24
   13e3c:	strbhi	r1, [r9, r3]
   13e40:	add	r3, r4, #2
   13e44:	cmp	sl, r3
   13e48:	movhi	r1, #39	; 0x27
   13e4c:	strbhi	r1, [r9, r3]
   13e50:	add	r3, r4, #3
   13e54:	cmp	sl, r3
   13e58:	bls	14b2c <__assert_fail@plt+0x3c24>
   13e5c:	mov	r4, r3
   13e60:	mov	r3, #92	; 0x5c
   13e64:	mov	fp, r2
   13e68:	mov	r2, r4
   13e6c:	strb	r3, [r9, r4]
   13e70:	ldr	r3, [sp, #176]	; 0xb0
   13e74:	add	r4, r4, #1
   13e78:	cmp	r3, #2
   13e7c:	beq	14b94 <__assert_fail@plt+0x3c8c>
   13e80:	add	r3, r7, #1
   13e84:	cmp	r3, r8
   13e88:	bcs	13ea0 <__assert_fail@plt+0x2f98>
   13e8c:	ldr	r1, [sp, #28]
   13e90:	ldrb	r3, [r1, r3]
   13e94:	sub	r3, r3, #48	; 0x30
   13e98:	cmp	r3, #9
   13e9c:	bls	14ba4 <__assert_fail@plt+0x3c9c>
   13ea0:	mov	r3, #0
   13ea4:	mov	r5, #48	; 0x30
   13ea8:	ldr	r6, [sp, #64]	; 0x40
   13eac:	cmp	r6, #0
   13eb0:	beq	13da4 <__assert_fail@plt+0x2e9c>
   13eb4:	mov	r6, #0
   13eb8:	b	13dcc <__assert_fail@plt+0x2ec4>
   13ebc:	ldr	r3, [sp, #48]	; 0x30
   13ec0:	str	r3, [sp, #40]	; 0x28
   13ec4:	ldr	r2, [sp, #60]	; 0x3c
   13ec8:	mov	r5, #13
   13ecc:	mov	r3, #114	; 0x72
   13ed0:	cmp	r2, #0
   13ed4:	beq	13d90 <__assert_fail@plt+0x2e88>
   13ed8:	mov	r5, r3
   13edc:	b	13c0c <__assert_fail@plt+0x2d04>
   13ee0:	ldr	r3, [sp, #48]	; 0x30
   13ee4:	str	r3, [sp, #40]	; 0x28
   13ee8:	mov	r3, #118	; 0x76
   13eec:	b	13d84 <__assert_fail@plt+0x2e7c>
   13ef0:	ldr	r3, [sp, #48]	; 0x30
   13ef4:	str	r3, [sp, #40]	; 0x28
   13ef8:	mov	r5, #10
   13efc:	mov	r3, #110	; 0x6e
   13f00:	b	13d84 <__assert_fail@plt+0x2e7c>
   13f04:	ldr	r3, [sp, #48]	; 0x30
   13f08:	cmn	r8, #1
   13f0c:	str	r3, [sp, #40]	; 0x28
   13f10:	beq	14358 <__assert_fail@plt+0x3450>
   13f14:	subs	r3, r8, #1
   13f18:	movne	r3, #1
   13f1c:	cmp	r3, #0
   13f20:	bne	13f2c <__assert_fail@plt+0x3024>
   13f24:	cmp	r7, #0
   13f28:	beq	13f70 <__assert_fail@plt+0x3068>
   13f2c:	mov	r6, #0
   13f30:	ldr	r3, [sp, #64]	; 0x40
   13f34:	cmp	r3, #0
   13f38:	beq	13da0 <__assert_fail@plt+0x2e98>
   13f3c:	ldr	r3, [sp, #44]	; 0x2c
   13f40:	cmp	r3, #0
   13f44:	bne	13da0 <__assert_fail@plt+0x2e98>
   13f48:	mov	r3, fp
   13f4c:	b	13dcc <__assert_fail@plt+0x2ec4>
   13f50:	ldr	r3, [sp, #48]	; 0x30
   13f54:	str	r3, [sp, #40]	; 0x28
   13f58:	b	13f24 <__assert_fail@plt+0x301c>
   13f5c:	ldr	r3, [sp, #48]	; 0x30
   13f60:	str	r3, [sp, #40]	; 0x28
   13f64:	b	13f2c <__assert_fail@plt+0x3024>
   13f68:	ldr	r6, [sp, #48]	; 0x30
   13f6c:	str	r6, [sp, #40]	; 0x28
   13f70:	ldr	r3, [sp, #68]	; 0x44
   13f74:	cmp	r3, #0
   13f78:	beq	13f30 <__assert_fail@plt+0x3028>
   13f7c:	mov	r3, #2
   13f80:	mov	fp, r9
   13f84:	str	r3, [sp, #176]	; 0xb0
   13f88:	ldr	r3, [sp, #60]	; 0x3c
   13f8c:	cmp	r3, #0
   13f90:	ldr	r3, [sp, #176]	; 0xb0
   13f94:	movne	r3, #4
   13f98:	str	r3, [sp, #176]	; 0xb0
   13f9c:	mov	lr, #0
   13fa0:	mov	r0, fp
   13fa4:	ldr	r2, [sp, #28]
   13fa8:	ldr	r3, [sp, #180]	; 0xb4
   13fac:	ldr	r1, [sp, #188]	; 0xbc
   13fb0:	bic	ip, r3, #2
   13fb4:	ldr	r3, [sp, #176]	; 0xb0
   13fb8:	stm	sp, {r3, ip, lr}
   13fbc:	mov	r3, r8
   13fc0:	ldr	ip, [sp, #192]	; 0xc0
   13fc4:	str	r1, [sp, #12]
   13fc8:	mov	r1, sl
   13fcc:	str	ip, [sp, #16]
   13fd0:	bl	1355c <__assert_fail@plt+0x2654>
   13fd4:	mov	r4, r0
   13fd8:	mov	r0, r4
   13fdc:	add	sp, sp, #140	; 0x8c
   13fe0:	ldrd	r4, [sp]
   13fe4:	ldrd	r6, [sp, #8]
   13fe8:	ldrd	r8, [sp, #16]
   13fec:	ldrd	sl, [sp, #24]
   13ff0:	add	sp, sp, #32
   13ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ff8:	ldr	r3, [sp, #48]	; 0x30
   13ffc:	str	r3, [sp, #40]	; 0x28
   14000:	ldr	r3, [sp, #176]	; 0xb0
   14004:	cmp	r3, #2
   14008:	beq	14380 <__assert_fail@plt+0x3478>
   1400c:	ldr	r3, [sp, #88]	; 0x58
   14010:	cmp	r3, #0
   14014:	moveq	r5, #92	; 0x5c
   14018:	moveq	r3, r5
   1401c:	beq	13d84 <__assert_fail@plt+0x2e7c>
   14020:	add	r7, r7, #1
   14024:	mov	r3, fp
   14028:	mov	r6, #0
   1402c:	mov	r5, #92	; 0x5c
   14030:	b	13ddc <__assert_fail@plt+0x2ed4>
   14034:	ldr	r3, [sp, #64]	; 0x40
   14038:	cmp	r3, #0
   1403c:	bne	14eb4 <__assert_fail@plt+0x3fac>
   14040:	ldr	r2, [sp, #48]	; 0x30
   14044:	mov	r3, fp
   14048:	mov	r6, r2
   1404c:	str	r2, [sp, #40]	; 0x28
   14050:	b	13da4 <__assert_fail@plt+0x2e9c>
   14054:	ldr	r3, [sp, #176]	; 0xb0
   14058:	cmp	r3, #2
   1405c:	beq	14df0 <__assert_fail@plt+0x3ee8>
   14060:	cmp	r3, #5
   14064:	ldr	r3, [sp, #48]	; 0x30
   14068:	str	r3, [sp, #40]	; 0x28
   1406c:	bne	14098 <__assert_fail@plt+0x3190>
   14070:	ldr	r3, [sp, #96]	; 0x60
   14074:	cmp	r3, #0
   14078:	beq	14af4 <__assert_fail@plt+0x3bec>
   1407c:	add	r3, r7, #2
   14080:	cmp	r3, r8
   14084:	bcs	14098 <__assert_fail@plt+0x3190>
   14088:	ldr	r2, [sp, #36]	; 0x24
   1408c:	ldrb	r5, [r2, #1]
   14090:	cmp	r5, #63	; 0x3f
   14094:	beq	14bdc <__assert_fail@plt+0x3cd4>
   14098:	mov	r6, #0
   1409c:	mov	r5, #63	; 0x3f
   140a0:	b	13f30 <__assert_fail@plt+0x3028>
   140a4:	ldr	r3, [sp, #176]	; 0xb0
   140a8:	cmp	r3, #2
   140ac:	ldr	r3, [sp, #48]	; 0x30
   140b0:	beq	14898 <__assert_fail@plt+0x3990>
   140b4:	mov	r5, #39	; 0x27
   140b8:	str	r3, [sp, #40]	; 0x28
   140bc:	str	r6, [sp, #80]	; 0x50
   140c0:	b	13f30 <__assert_fail@plt+0x3028>
   140c4:	ldr	r3, [sp, #180]	; 0xb4
   140c8:	cmp	r4, #0
   140cc:	and	r3, r3, #1
   140d0:	str	r3, [sp, #92]	; 0x5c
   140d4:	ldr	r3, [sp, #180]	; 0xb4
   140d8:	and	r3, r3, #4
   140dc:	str	r3, [sp, #96]	; 0x60
   140e0:	bne	14f00 <__assert_fail@plt+0x3ff8>
   140e4:	str	r4, [sp, #60]	; 0x3c
   140e8:	cmp	sl, #0
   140ec:	bne	14ee4 <__assert_fail@plt+0x3fdc>
   140f0:	mov	r3, #1
   140f4:	movw	r2, #39036	; 0x987c
   140f8:	movt	r2, #1
   140fc:	mov	r4, r3
   14100:	mov	r3, #2
   14104:	mov	r9, sl
   14108:	str	r4, [sp, #32]
   1410c:	str	sl, [sp, #44]	; 0x2c
   14110:	str	sl, [sp, #48]	; 0x30
   14114:	str	r4, [sp, #52]	; 0x34
   14118:	str	r4, [sp, #56]	; 0x38
   1411c:	str	r4, [sp, #64]	; 0x40
   14120:	str	sl, [sp, #68]	; 0x44
   14124:	str	r2, [sp, #72]	; 0x48
   14128:	str	sl, [sp, #80]	; 0x50
   1412c:	str	sl, [sp, #84]	; 0x54
   14130:	str	sl, [sp, #88]	; 0x58
   14134:	str	r3, [sp, #176]	; 0xb0
   14138:	b	13680 <__assert_fail@plt+0x2778>
   1413c:	ldrb	r5, [r0, r7]
   14140:	cmp	r5, #126	; 0x7e
   14144:	ldrls	pc, [pc, r5, lsl #2]
   14148:	b	144ac <__assert_fail@plt+0x35a4>
   1414c:	andeq	r4, r1, r8, ror r4
   14150:	andeq	r4, r1, ip, lsr #9
   14154:	andeq	r4, r1, ip, lsr #9
   14158:	andeq	r4, r1, ip, lsr #9
   1415c:	andeq	r4, r1, ip, lsr #9
   14160:	andeq	r4, r1, ip, lsr #9
   14164:	andeq	r4, r1, ip, lsr #9
   14168:	andeq	r4, r1, r8, ror #8
   1416c:	andeq	r4, r1, r8, asr r4
   14170:	ldrdeq	r4, [r1], -ip
   14174:	andeq	r4, r1, r8, asr #8
   14178:			; <UNDEFINED> instruction: 0x000143bc
   1417c:	muleq	r1, ip, r4
   14180:	andeq	r4, r1, r8, lsr #8
   14184:	andeq	r4, r1, ip, lsr #9
   14188:	andeq	r4, r1, ip, lsr #9
   1418c:	andeq	r4, r1, ip, lsr #9
   14190:	andeq	r4, r1, ip, lsr #9
   14194:	andeq	r4, r1, ip, lsr #9
   14198:	andeq	r4, r1, ip, lsr #9
   1419c:	andeq	r4, r1, ip, lsr #9
   141a0:	andeq	r4, r1, ip, lsr #9
   141a4:	andeq	r4, r1, ip, lsr #9
   141a8:	andeq	r4, r1, ip, lsr #9
   141ac:	andeq	r4, r1, ip, lsr #9
   141b0:	andeq	r4, r1, ip, lsr #9
   141b4:	andeq	r4, r1, ip, lsr #9
   141b8:	andeq	r4, r1, ip, lsr #9
   141bc:	andeq	r4, r1, ip, lsr #9
   141c0:	andeq	r4, r1, ip, lsr #9
   141c4:	andeq	r4, r1, ip, lsr #9
   141c8:	andeq	r4, r1, ip, lsr #9
   141cc:	ldrdeq	r4, [r1], -r0
   141d0:	andeq	r4, r1, r8, lsr r4
   141d4:	andeq	r4, r1, r8, lsr r4
   141d8:			; <UNDEFINED> instruction: 0x000143b0
   141dc:	andeq	r4, r1, r8, lsr r4
   141e0:	andeq	r4, r1, r4, lsr #7
   141e4:	andeq	r4, r1, r8, lsr r4
   141e8:	andeq	r4, r1, r4, lsl r4
   141ec:	andeq	r4, r1, r8, lsr r4
   141f0:	andeq	r4, r1, r8, lsr r4
   141f4:	andeq	r4, r1, r8, lsr r4
   141f8:	andeq	r4, r1, r4, lsr #7
   141fc:	andeq	r4, r1, r4, lsr #7
   14200:	andeq	r4, r1, r4, lsr #7
   14204:	andeq	r4, r1, r4, lsr #7
   14208:	andeq	r4, r1, r4, lsr #7
   1420c:	andeq	r4, r1, r4, lsr #7
   14210:	andeq	r4, r1, r4, lsr #7
   14214:	andeq	r4, r1, r4, lsr #7
   14218:	andeq	r4, r1, r4, lsr #7
   1421c:	andeq	r4, r1, r4, lsr #7
   14220:	andeq	r4, r1, r4, lsr #7
   14224:	andeq	r4, r1, r4, lsr #7
   14228:	andeq	r4, r1, r4, lsr #7
   1422c:	andeq	r4, r1, r4, lsr #7
   14230:	andeq	r4, r1, r4, lsr #7
   14234:	andeq	r4, r1, r4, lsr #7
   14238:	andeq	r4, r1, r8, lsr r4
   1423c:	andeq	r4, r1, r8, lsr r4
   14240:	andeq	r4, r1, r8, lsr r4
   14244:	andeq	r4, r1, r8, lsr r4
   14248:	andeq	r4, r1, ip, ror #7
   1424c:	andeq	r4, r1, ip, lsr #9
   14250:	andeq	r4, r1, r4, lsr #7
   14254:	andeq	r4, r1, r4, lsr #7
   14258:	andeq	r4, r1, r4, lsr #7
   1425c:	andeq	r4, r1, r4, lsr #7
   14260:	andeq	r4, r1, r4, lsr #7
   14264:	andeq	r4, r1, r4, lsr #7
   14268:	andeq	r4, r1, r4, lsr #7
   1426c:	andeq	r4, r1, r4, lsr #7
   14270:	andeq	r4, r1, r4, lsr #7
   14274:	andeq	r4, r1, r4, lsr #7
   14278:	andeq	r4, r1, r4, lsr #7
   1427c:	andeq	r4, r1, r4, lsr #7
   14280:	andeq	r4, r1, r4, lsr #7
   14284:	andeq	r4, r1, r4, lsr #7
   14288:	andeq	r4, r1, r4, lsr #7
   1428c:	andeq	r4, r1, r4, lsr #7
   14290:	andeq	r4, r1, r4, lsr #7
   14294:	andeq	r4, r1, r4, lsr #7
   14298:	andeq	r4, r1, r4, lsr #7
   1429c:	andeq	r4, r1, r4, lsr #7
   142a0:	andeq	r4, r1, r4, lsr #7
   142a4:	andeq	r4, r1, r4, lsr #7
   142a8:	andeq	r4, r1, r4, lsr #7
   142ac:	andeq	r4, r1, r4, lsr #7
   142b0:	andeq	r4, r1, r4, lsr #7
   142b4:	andeq	r4, r1, r4, lsr #7
   142b8:	andeq	r4, r1, r8, lsr r4
   142bc:	andeq	r4, r1, ip, ror #6
   142c0:	andeq	r4, r1, r4, lsr #7
   142c4:	andeq	r4, r1, r8, lsr r4
   142c8:	andeq	r4, r1, r4, lsr #7
   142cc:	andeq	r4, r1, r8, lsr r4
   142d0:	andeq	r4, r1, r4, lsr #7
   142d4:	andeq	r4, r1, r4, lsr #7
   142d8:	andeq	r4, r1, r4, lsr #7
   142dc:	andeq	r4, r1, r4, lsr #7
   142e0:	andeq	r4, r1, r4, lsr #7
   142e4:	andeq	r4, r1, r4, lsr #7
   142e8:	andeq	r4, r1, r4, lsr #7
   142ec:	andeq	r4, r1, r4, lsr #7
   142f0:	andeq	r4, r1, r4, lsr #7
   142f4:	andeq	r4, r1, r4, lsr #7
   142f8:	andeq	r4, r1, r4, lsr #7
   142fc:	andeq	r4, r1, r4, lsr #7
   14300:	andeq	r4, r1, r4, lsr #7
   14304:	andeq	r4, r1, r4, lsr #7
   14308:	andeq	r4, r1, r4, lsr #7
   1430c:	andeq	r4, r1, r4, lsr #7
   14310:	andeq	r4, r1, r4, lsr #7
   14314:	andeq	r4, r1, r4, lsr #7
   14318:	andeq	r4, r1, r4, lsr #7
   1431c:	andeq	r4, r1, r4, lsr #7
   14320:	andeq	r4, r1, r4, lsr #7
   14324:	andeq	r4, r1, r4, lsr #7
   14328:	andeq	r4, r1, r4, lsr #7
   1432c:	andeq	r4, r1, r4, lsr #7
   14330:	andeq	r4, r1, r4, lsr #7
   14334:	andeq	r4, r1, r4, lsr #7
   14338:	andeq	r4, r1, r8, asr #6
   1433c:	andeq	r4, r1, r8, lsr r4
   14340:	andeq	r4, r1, r8, asr #6
   14344:			; <UNDEFINED> instruction: 0x000143b0
   14348:	mov	r3, #0
   1434c:	cmn	r8, #1
   14350:	str	r3, [sp, #40]	; 0x28
   14354:	bne	13f14 <__assert_fail@plt+0x300c>
   14358:	ldr	r3, [sp, #28]
   1435c:	ldrb	r3, [r3, #1]
   14360:	adds	r3, r3, #0
   14364:	movne	r3, #1
   14368:	b	13f1c <__assert_fail@plt+0x3014>
   1436c:	mov	r3, #0
   14370:	str	r3, [sp, #40]	; 0x28
   14374:	ldr	r3, [sp, #176]	; 0xb0
   14378:	cmp	r3, #2
   1437c:	bne	1400c <__assert_fail@plt+0x3104>
   14380:	ldr	r3, [sp, #44]	; 0x2c
   14384:	cmp	r3, #0
   14388:	bne	14cc8 <__assert_fail@plt+0x3dc0>
   1438c:	mov	r6, r3
   14390:	add	r7, r7, #1
   14394:	mov	r3, fp
   14398:	mov	r5, #92	; 0x5c
   1439c:	b	13ddc <__assert_fail@plt+0x2ed4>
   143a0:	ldr	r6, [sp, #48]	; 0x30
   143a4:	mov	r3, #0
   143a8:	str	r3, [sp, #40]	; 0x28
   143ac:	b	13f30 <__assert_fail@plt+0x3028>
   143b0:	mov	r3, #0
   143b4:	str	r3, [sp, #40]	; 0x28
   143b8:	b	13f24 <__assert_fail@plt+0x301c>
   143bc:	mov	r3, #0
   143c0:	str	r3, [sp, #40]	; 0x28
   143c4:	mov	r3, #118	; 0x76
   143c8:	b	13d84 <__assert_fail@plt+0x2e7c>
   143cc:	ldr	r6, [sp, #48]	; 0x30
   143d0:	mov	r3, #0
   143d4:	str	r3, [sp, #40]	; 0x28
   143d8:	b	13f70 <__assert_fail@plt+0x3068>
   143dc:	mov	r3, #0
   143e0:	str	r3, [sp, #40]	; 0x28
   143e4:	mov	r3, #116	; 0x74
   143e8:	b	13d78 <__assert_fail@plt+0x2e70>
   143ec:	ldr	r3, [sp, #176]	; 0xb0
   143f0:	cmp	r3, #2
   143f4:	beq	14904 <__assert_fail@plt+0x39fc>
   143f8:	cmp	r3, #5
   143fc:	mov	r3, #0
   14400:	str	r3, [sp, #40]	; 0x28
   14404:	beq	14070 <__assert_fail@plt+0x3168>
   14408:	mov	r6, #0
   1440c:	mov	r5, #63	; 0x3f
   14410:	b	13f30 <__assert_fail@plt+0x3028>
   14414:	ldr	r3, [sp, #176]	; 0xb0
   14418:	cmp	r3, #2
   1441c:	beq	1488c <__assert_fail@plt+0x3984>
   14420:	mov	r3, #0
   14424:	b	140b4 <__assert_fail@plt+0x31ac>
   14428:	mov	r3, #0
   1442c:	str	r3, [sp, #40]	; 0x28
   14430:	mov	r3, #114	; 0x72
   14434:	b	13d78 <__assert_fail@plt+0x2e70>
   14438:	mov	r3, #0
   1443c:	mov	r6, r3
   14440:	str	r3, [sp, #40]	; 0x28
   14444:	b	13f70 <__assert_fail@plt+0x3068>
   14448:	mov	r3, #0
   1444c:	str	r3, [sp, #40]	; 0x28
   14450:	mov	r3, #110	; 0x6e
   14454:	b	13d78 <__assert_fail@plt+0x2e70>
   14458:	mov	r3, #0
   1445c:	str	r3, [sp, #40]	; 0x28
   14460:	mov	r3, #98	; 0x62
   14464:	b	13d84 <__assert_fail@plt+0x2e7c>
   14468:	mov	r3, #0
   1446c:	str	r3, [sp, #40]	; 0x28
   14470:	mov	r3, #97	; 0x61
   14474:	b	13d84 <__assert_fail@plt+0x2e7c>
   14478:	ldr	r3, [sp, #60]	; 0x3c
   1447c:	cmp	r3, #0
   14480:	bne	14870 <__assert_fail@plt+0x3968>
   14484:	ldr	r3, [sp, #92]	; 0x5c
   14488:	cmp	r3, #0
   1448c:	addne	r7, r7, #1
   14490:	bne	13690 <__assert_fail@plt+0x2788>
   14494:	str	r3, [sp, #40]	; 0x28
   14498:	b	13d90 <__assert_fail@plt+0x2e88>
   1449c:	mov	r3, #0
   144a0:	str	r3, [sp, #40]	; 0x28
   144a4:	mov	r3, #102	; 0x66
   144a8:	b	13d84 <__assert_fail@plt+0x2e7c>
   144ac:	mov	r3, #0
   144b0:	str	r3, [sp, #40]	; 0x28
   144b4:	ldr	r3, [sp, #76]	; 0x4c
   144b8:	cmp	r3, #1
   144bc:	bne	14924 <__assert_fail@plt+0x3a1c>
   144c0:	bl	10e00 <__ctype_b_loc@plt>
   144c4:	ldr	r2, [r0]
   144c8:	sxth	r3, r5
   144cc:	lsl	r3, r3, #1
   144d0:	ldr	r1, [sp, #76]	; 0x4c
   144d4:	ldrh	r3, [r2, r3]
   144d8:	mov	r0, r1
   144dc:	and	r3, r3, #16384	; 0x4000
   144e0:	cmp	r3, #0
   144e4:	ldr	r3, [sp, #60]	; 0x3c
   144e8:	movne	r6, #1
   144ec:	moveq	r6, #0
   144f0:	movne	r2, #0
   144f4:	andeq	r2, r3, #1
   144f8:	cmp	r2, #0
   144fc:	beq	13f30 <__assert_fail@plt+0x3028>
   14500:	ldr	r2, [sp, #60]	; 0x3c
   14504:	mov	r6, #0
   14508:	add	r1, r0, r7
   1450c:	mov	ip, #39	; 0x27
   14510:	str	r6, [sp, #100]	; 0x64
   14514:	mov	r0, #0
   14518:	ldr	lr, [sp, #36]	; 0x24
   1451c:	str	r8, [sp, #36]	; 0x24
   14520:	ldr	r6, [sp, #40]	; 0x28
   14524:	ldr	r8, [sp, #44]	; 0x2c
   14528:	b	145d8 <__assert_fail@plt+0x36d0>
   1452c:	cmp	r8, #0
   14530:	bne	14b0c <__assert_fail@plt+0x3c04>
   14534:	ldr	r0, [sp, #52]	; 0x34
   14538:	eor	r3, fp, #1
   1453c:	ands	r3, r0, r3
   14540:	beq	14570 <__assert_fail@plt+0x3668>
   14544:	cmp	sl, r4
   14548:	add	r0, r4, #1
   1454c:	strbhi	ip, [r9, r4]
   14550:	cmp	sl, r0
   14554:	movhi	fp, #36	; 0x24
   14558:	strbhi	fp, [r9, r0]
   1455c:	add	r0, r4, #2
   14560:	mov	fp, r3
   14564:	cmp	sl, r0
   14568:	add	r4, r4, #3
   1456c:	strbhi	ip, [r9, r0]
   14570:	cmp	sl, r4
   14574:	movhi	r3, #92	; 0x5c
   14578:	strbhi	r3, [r9, r4]
   1457c:	add	r3, r4, #1
   14580:	cmp	sl, r3
   14584:	bls	14594 <__assert_fail@plt+0x368c>
   14588:	lsr	r0, r5, #6
   1458c:	add	r0, r0, #48	; 0x30
   14590:	strb	r0, [r9, r3]
   14594:	add	r3, r4, #2
   14598:	cmp	sl, r3
   1459c:	bls	145ac <__assert_fail@plt+0x36a4>
   145a0:	ubfx	r0, r5, #3, #3
   145a4:	add	r0, r0, #48	; 0x30
   145a8:	strb	r0, [r9, r3]
   145ac:	add	r7, r7, #1
   145b0:	and	r5, r5, #7
   145b4:	cmp	r1, r7
   145b8:	add	r5, r5, #48	; 0x30
   145bc:	add	r4, r4, #3
   145c0:	bls	14b20 <__assert_fail@plt+0x3c18>
   145c4:	mov	r0, r2
   145c8:	cmp	sl, r4
   145cc:	strbhi	r5, [r9, r4]
   145d0:	add	r4, r4, #1
   145d4:	ldrb	r5, [lr, #1]!
   145d8:	cmp	r2, #0
   145dc:	bne	1452c <__assert_fail@plt+0x3624>
   145e0:	eor	r3, r0, #1
   145e4:	cmp	r6, #0
   145e8:	and	r3, r3, fp
   145ec:	uxtb	r3, r3
   145f0:	beq	14604 <__assert_fail@plt+0x36fc>
   145f4:	cmp	sl, r4
   145f8:	movhi	r6, #92	; 0x5c
   145fc:	strbhi	r6, [r9, r4]
   14600:	add	r4, r4, #1
   14604:	add	r7, r7, #1
   14608:	cmp	r7, r1
   1460c:	bcs	14b00 <__assert_fail@plt+0x3bf8>
   14610:	cmp	r3, #0
   14614:	beq	14b44 <__assert_fail@plt+0x3c3c>
   14618:	cmp	sl, r4
   1461c:	add	r3, r4, #1
   14620:	mov	r6, #0
   14624:	strbhi	ip, [r9, r4]
   14628:	cmp	sl, r3
   1462c:	add	r4, r4, #2
   14630:	mov	fp, r6
   14634:	strbhi	ip, [r9, r3]
   14638:	b	145c8 <__assert_fail@plt+0x36c0>
   1463c:	ldr	r3, [sp, #36]	; 0x24
   14640:	ldrb	r5, [r3]
   14644:	cmp	r5, #126	; 0x7e
   14648:	ldrls	pc, [pc, r5, lsl #2]
   1464c:	b	144ac <__assert_fail@plt+0x35a4>
   14650:	andeq	r4, r1, r0, ror r8
   14654:	andeq	r4, r1, ip, lsr #9
   14658:	andeq	r4, r1, ip, lsr #9
   1465c:	andeq	r4, r1, ip, lsr #9
   14660:	andeq	r4, r1, ip, lsr #9
   14664:	andeq	r4, r1, ip, lsr #9
   14668:	andeq	r4, r1, ip, lsr #9
   1466c:	andeq	r3, r1, r4, ror #26
   14670:	andeq	r3, r1, ip, asr sp
   14674:	ldrdeq	r4, [r1], -ip
   14678:	andeq	r4, r1, r4, ror #16
   1467c:			; <UNDEFINED> instruction: 0x000143bc
   14680:	andeq	r3, r1, r8, lsl #24
   14684:	andeq	r4, r1, r8, asr r8
   14688:	andeq	r4, r1, ip, lsr #9
   1468c:	andeq	r4, r1, ip, lsr #9
   14690:	andeq	r4, r1, ip, lsr #9
   14694:	andeq	r4, r1, ip, lsr #9
   14698:	andeq	r4, r1, ip, lsr #9
   1469c:	andeq	r4, r1, ip, lsr #9
   146a0:	andeq	r4, r1, ip, lsr #9
   146a4:	andeq	r4, r1, ip, lsr #9
   146a8:	andeq	r4, r1, ip, lsr #9
   146ac:	andeq	r4, r1, ip, lsr #9
   146b0:	andeq	r4, r1, ip, lsr #9
   146b4:	andeq	r4, r1, ip, lsr #9
   146b8:	andeq	r4, r1, ip, lsr #9
   146bc:	andeq	r4, r1, ip, lsr #9
   146c0:	andeq	r4, r1, ip, lsr #9
   146c4:	andeq	r4, r1, ip, lsr #9
   146c8:	andeq	r4, r1, ip, lsr #9
   146cc:	andeq	r4, r1, ip, lsr #9
   146d0:	andeq	r4, r1, ip, asr #7
   146d4:	andeq	r4, r1, ip, asr #16
   146d8:	andeq	r4, r1, ip, asr #16
   146dc:			; <UNDEFINED> instruction: 0x000143b0
   146e0:	andeq	r4, r1, ip, asr #16
   146e4:	andeq	r4, r1, r0, lsr #7
   146e8:	andeq	r4, r1, ip, asr #16
   146ec:	andeq	r4, r1, r4, lsl r4
   146f0:	andeq	r4, r1, ip, asr #16
   146f4:	andeq	r4, r1, ip, asr #16
   146f8:	andeq	r4, r1, ip, asr #16
   146fc:	andeq	r4, r1, r0, lsr #7
   14700:	andeq	r4, r1, r0, lsr #7
   14704:	andeq	r4, r1, r0, lsr #7
   14708:	andeq	r4, r1, r0, lsr #7
   1470c:	andeq	r4, r1, r0, lsr #7
   14710:	andeq	r4, r1, r0, lsr #7
   14714:	andeq	r4, r1, r0, lsr #7
   14718:	andeq	r4, r1, r0, lsr #7
   1471c:	andeq	r4, r1, r0, lsr #7
   14720:	andeq	r4, r1, r0, lsr #7
   14724:	andeq	r4, r1, r0, lsr #7
   14728:	andeq	r4, r1, r0, lsr #7
   1472c:	andeq	r4, r1, r0, lsr #7
   14730:	andeq	r4, r1, r0, lsr #7
   14734:	andeq	r4, r1, r0, lsr #7
   14738:	andeq	r4, r1, r0, lsr #7
   1473c:	andeq	r4, r1, ip, asr #16
   14740:	andeq	r4, r1, ip, asr #16
   14744:	andeq	r4, r1, ip, asr #16
   14748:	andeq	r4, r1, ip, asr #16
   1474c:	andeq	r4, r1, ip, ror #7
   14750:	andeq	r4, r1, ip, lsr #9
   14754:	andeq	r4, r1, r0, lsr #7
   14758:	andeq	r4, r1, r0, lsr #7
   1475c:	andeq	r4, r1, r0, lsr #7
   14760:	andeq	r4, r1, r0, lsr #7
   14764:	andeq	r4, r1, r0, lsr #7
   14768:	andeq	r4, r1, r0, lsr #7
   1476c:	andeq	r4, r1, r0, lsr #7
   14770:	andeq	r4, r1, r0, lsr #7
   14774:	andeq	r4, r1, r0, lsr #7
   14778:	andeq	r4, r1, r0, lsr #7
   1477c:	andeq	r4, r1, r0, lsr #7
   14780:	andeq	r4, r1, r0, lsr #7
   14784:	andeq	r4, r1, r0, lsr #7
   14788:	andeq	r4, r1, r0, lsr #7
   1478c:	andeq	r4, r1, r0, lsr #7
   14790:	andeq	r4, r1, r0, lsr #7
   14794:	andeq	r4, r1, r0, lsr #7
   14798:	andeq	r4, r1, r0, lsr #7
   1479c:	andeq	r4, r1, r0, lsr #7
   147a0:	andeq	r4, r1, r0, lsr #7
   147a4:	andeq	r4, r1, r0, lsr #7
   147a8:	andeq	r4, r1, r0, lsr #7
   147ac:	andeq	r4, r1, r0, lsr #7
   147b0:	andeq	r4, r1, r0, lsr #7
   147b4:	andeq	r4, r1, r0, lsr #7
   147b8:	andeq	r4, r1, r0, lsr #7
   147bc:	andeq	r4, r1, ip, asr #16
   147c0:	andeq	r4, r1, ip, ror #6
   147c4:	andeq	r4, r1, r0, lsr #7
   147c8:	andeq	r4, r1, ip, asr #16
   147cc:	andeq	r4, r1, r0, lsr #7
   147d0:	andeq	r4, r1, ip, asr #16
   147d4:	andeq	r4, r1, r0, lsr #7
   147d8:	andeq	r4, r1, r0, lsr #7
   147dc:	andeq	r4, r1, r0, lsr #7
   147e0:	andeq	r4, r1, r0, lsr #7
   147e4:	andeq	r4, r1, r0, lsr #7
   147e8:	andeq	r4, r1, r0, lsr #7
   147ec:	andeq	r4, r1, r0, lsr #7
   147f0:	andeq	r4, r1, r0, lsr #7
   147f4:	andeq	r4, r1, r0, lsr #7
   147f8:	andeq	r4, r1, r0, lsr #7
   147fc:	andeq	r4, r1, r0, lsr #7
   14800:	andeq	r4, r1, r0, lsr #7
   14804:	andeq	r4, r1, r0, lsr #7
   14808:	andeq	r4, r1, r0, lsr #7
   1480c:	andeq	r4, r1, r0, lsr #7
   14810:	andeq	r4, r1, r0, lsr #7
   14814:	andeq	r4, r1, r0, lsr #7
   14818:	andeq	r4, r1, r0, lsr #7
   1481c:	andeq	r4, r1, r0, lsr #7
   14820:	andeq	r4, r1, r0, lsr #7
   14824:	andeq	r4, r1, r0, lsr #7
   14828:	andeq	r4, r1, r0, lsr #7
   1482c:	andeq	r4, r1, r0, lsr #7
   14830:	andeq	r4, r1, r0, lsr #7
   14834:	andeq	r4, r1, r0, lsr #7
   14838:	andeq	r4, r1, r0, lsr #7
   1483c:	andeq	r4, r1, r8, asr #6
   14840:	andeq	r4, r1, ip, asr #16
   14844:	andeq	r4, r1, r8, asr #6
   14848:			; <UNDEFINED> instruction: 0x000143b0
   1484c:	mov	r3, #0
   14850:	str	r3, [sp, #40]	; 0x28
   14854:	b	13f2c <__assert_fail@plt+0x3024>
   14858:	mov	r3, #0
   1485c:	str	r3, [sp, #40]	; 0x28
   14860:	b	13ec4 <__assert_fail@plt+0x2fbc>
   14864:	mov	r3, #0
   14868:	str	r3, [sp, #40]	; 0x28
   1486c:	b	13ef8 <__assert_fail@plt+0x2ff0>
   14870:	ldr	r3, [sp, #44]	; 0x2c
   14874:	cmp	r3, #0
   14878:	beq	13e10 <__assert_fail@plt+0x2f08>
   1487c:	ldr	r3, [sp, #52]	; 0x34
   14880:	mov	fp, r9
   14884:	str	r3, [sp, #60]	; 0x3c
   14888:	b	13f88 <__assert_fail@plt+0x3080>
   1488c:	ldr	r3, [sp, #44]	; 0x2c
   14890:	cmp	r3, #0
   14894:	bne	14cc8 <__assert_fail@plt+0x3dc0>
   14898:	str	r3, [sp, #40]	; 0x28
   1489c:	cmp	sl, #0
   148a0:	ldr	r3, [sp, #84]	; 0x54
   148a4:	clz	r3, r3
   148a8:	lsr	r3, r3, #5
   148ac:	moveq	r3, #0
   148b0:	cmp	r3, #0
   148b4:	strne	sl, [sp, #84]	; 0x54
   148b8:	movne	sl, #0
   148bc:	bne	148ec <__assert_fail@plt+0x39e4>
   148c0:	cmp	sl, r4
   148c4:	movhi	r3, #39	; 0x27
   148c8:	strbhi	r3, [r9, r4]
   148cc:	add	r3, r4, #1
   148d0:	cmp	sl, r3
   148d4:	movhi	r2, #92	; 0x5c
   148d8:	strbhi	r2, [r9, r3]
   148dc:	add	r3, r4, #2
   148e0:	cmp	sl, r3
   148e4:	movhi	r2, #39	; 0x27
   148e8:	strbhi	r2, [r9, r3]
   148ec:	mov	r3, #0
   148f0:	add	r4, r4, #3
   148f4:	str	r6, [sp, #80]	; 0x50
   148f8:	mov	fp, r3
   148fc:	mov	r5, #39	; 0x27
   14900:	b	13dcc <__assert_fail@plt+0x2ec4>
   14904:	ldr	r3, [sp, #44]	; 0x2c
   14908:	cmp	r3, #0
   1490c:	bne	14cc8 <__assert_fail@plt+0x3dc0>
   14910:	mov	r6, #0
   14914:	mov	r5, #63	; 0x3f
   14918:	str	r3, [sp, #40]	; 0x28
   1491c:	mov	r3, fp
   14920:	b	13dcc <__assert_fail@plt+0x2ec4>
   14924:	mov	r2, #0
   14928:	mov	r3, #0
   1492c:	cmn	r8, #1
   14930:	strd	r2, [sp, #128]	; 0x80
   14934:	bne	14944 <__assert_fail@plt+0x3a3c>
   14938:	ldr	r0, [sp, #28]
   1493c:	bl	10e18 <strlen@plt>
   14940:	mov	r8, r0
   14944:	str	r9, [sp, #100]	; 0x64
   14948:	mov	r3, #0
   1494c:	strd	sl, [sp, #104]	; 0x68
   14950:	ldr	sl, [sp, #28]
   14954:	str	r5, [sp, #112]	; 0x70
   14958:	mov	r5, r3
   1495c:	ldr	r9, [sp, #68]	; 0x44
   14960:	str	r4, [sp, #116]	; 0x74
   14964:	add	r4, r7, r5
   14968:	add	r3, sp, #128	; 0x80
   1496c:	add	fp, sl, r4
   14970:	sub	r2, r8, r4
   14974:	mov	r1, fp
   14978:	add	r0, sp, #124	; 0x7c
   1497c:	bl	18d98 <__assert_fail@plt+0x7e90>
   14980:	subs	r1, r0, #0
   14984:	beq	149c4 <__assert_fail@plt+0x3abc>
   14988:	cmn	r1, #1
   1498c:	beq	14d1c <__assert_fail@plt+0x3e14>
   14990:	cmn	r1, #2
   14994:	beq	14d3c <__assert_fail@plt+0x3e34>
   14998:	cmp	r9, #0
   1499c:	bne	149f4 <__assert_fail@plt+0x3aec>
   149a0:	ldr	r0, [sp, #124]	; 0x7c
   149a4:	add	r5, r5, r1
   149a8:	bl	10d70 <iswprint@plt>
   149ac:	cmp	r0, #0
   149b0:	add	r0, sp, #128	; 0x80
   149b4:	moveq	r6, #0
   149b8:	bl	10d1c <mbsinit@plt>
   149bc:	cmp	r0, #0
   149c0:	beq	14964 <__assert_fail@plt+0x3a5c>
   149c4:	ldr	r3, [sp, #60]	; 0x3c
   149c8:	add	r9, sp, #100	; 0x64
   149cc:	mov	r0, r5
   149d0:	ldm	r9, {r9, sl, fp}
   149d4:	eor	r2, r6, #1
   149d8:	ldr	r5, [sp, #112]	; 0x70
   149dc:	and	r2, r2, r3
   149e0:	uxtb	r2, r2
   149e4:	ldr	r4, [sp, #116]	; 0x74
   149e8:	cmp	r0, #1
   149ec:	bhi	14508 <__assert_fail@plt+0x3600>
   149f0:	b	144f8 <__assert_fail@plt+0x35f0>
   149f4:	cmp	r1, #1
   149f8:	beq	149a0 <__assert_fail@plt+0x3a98>
   149fc:	add	r2, r4, #1
   14a00:	add	r3, sl, r1
   14a04:	add	r2, sl, r2
   14a08:	add	r4, r3, r4
   14a0c:	ldrb	r3, [r2], #1
   14a10:	sub	r3, r3, #91	; 0x5b
   14a14:	cmp	r3, #33	; 0x21
   14a18:	ldrls	pc, [pc, r3, lsl #2]
   14a1c:	b	14aa8 <__assert_fail@plt+0x3ba0>
   14a20:			; <UNDEFINED> instruction: 0x00014ab4
   14a24:			; <UNDEFINED> instruction: 0x00014ab4
   14a28:	andeq	r4, r1, r8, lsr #21
   14a2c:			; <UNDEFINED> instruction: 0x00014ab4
   14a30:	andeq	r4, r1, r8, lsr #21
   14a34:			; <UNDEFINED> instruction: 0x00014ab4
   14a38:	andeq	r4, r1, r8, lsr #21
   14a3c:	andeq	r4, r1, r8, lsr #21
   14a40:	andeq	r4, r1, r8, lsr #21
   14a44:	andeq	r4, r1, r8, lsr #21
   14a48:	andeq	r4, r1, r8, lsr #21
   14a4c:	andeq	r4, r1, r8, lsr #21
   14a50:	andeq	r4, r1, r8, lsr #21
   14a54:	andeq	r4, r1, r8, lsr #21
   14a58:	andeq	r4, r1, r8, lsr #21
   14a5c:	andeq	r4, r1, r8, lsr #21
   14a60:	andeq	r4, r1, r8, lsr #21
   14a64:	andeq	r4, r1, r8, lsr #21
   14a68:	andeq	r4, r1, r8, lsr #21
   14a6c:	andeq	r4, r1, r8, lsr #21
   14a70:	andeq	r4, r1, r8, lsr #21
   14a74:	andeq	r4, r1, r8, lsr #21
   14a78:	andeq	r4, r1, r8, lsr #21
   14a7c:	andeq	r4, r1, r8, lsr #21
   14a80:	andeq	r4, r1, r8, lsr #21
   14a84:	andeq	r4, r1, r8, lsr #21
   14a88:	andeq	r4, r1, r8, lsr #21
   14a8c:	andeq	r4, r1, r8, lsr #21
   14a90:	andeq	r4, r1, r8, lsr #21
   14a94:	andeq	r4, r1, r8, lsr #21
   14a98:	andeq	r4, r1, r8, lsr #21
   14a9c:	andeq	r4, r1, r8, lsr #21
   14aa0:	andeq	r4, r1, r8, lsr #21
   14aa4:			; <UNDEFINED> instruction: 0x00014ab4
   14aa8:	cmp	r4, r2
   14aac:	bne	14a0c <__assert_fail@plt+0x3b04>
   14ab0:	b	149a0 <__assert_fail@plt+0x3a98>
   14ab4:	mov	r3, #2
   14ab8:	ldr	fp, [sp, #100]	; 0x64
   14abc:	str	r3, [sp, #176]	; 0xb0
   14ac0:	ldr	sl, [sp, #104]	; 0x68
   14ac4:	b	13f88 <__assert_fail@plt+0x3080>
   14ac8:	ldr	r2, [sp, #52]	; 0x34
   14acc:	mov	fp, r9
   14ad0:	ldr	r3, [sp, #60]	; 0x3c
   14ad4:	and	r3, r3, r2
   14ad8:	str	r3, [sp, #60]	; 0x3c
   14adc:	b	13f88 <__assert_fail@plt+0x3080>
   14ae0:	cmp	sl, r4
   14ae4:	movhi	r2, fp
   14ae8:	bhi	13e60 <__assert_fail@plt+0x2f58>
   14aec:	mov	r2, r4
   14af0:	b	13e70 <__assert_fail@plt+0x2f68>
   14af4:	mov	r6, r3
   14af8:	mov	r5, #63	; 0x3f
   14afc:	b	13f30 <__assert_fail@plt+0x3028>
   14b00:	ldr	r8, [sp, #36]	; 0x24
   14b04:	ldr	r6, [sp, #100]	; 0x64
   14b08:	b	13ddc <__assert_fail@plt+0x2ed4>
   14b0c:	mov	fp, r9
   14b10:	ldr	r8, [sp, #36]	; 0x24
   14b14:	ldr	r3, [sp, #52]	; 0x34
   14b18:	str	r3, [sp, #60]	; 0x3c
   14b1c:	b	13f88 <__assert_fail@plt+0x3080>
   14b20:	ldr	r8, [sp, #36]	; 0x24
   14b24:	ldr	r6, [sp, #100]	; 0x64
   14b28:	b	13c74 <__assert_fail@plt+0x2d6c>
   14b2c:	mov	r3, #0
   14b30:	add	r4, r4, #4
   14b34:	mov	fp, r2
   14b38:	mov	r6, r3
   14b3c:	mov	r5, #48	; 0x30
   14b40:	b	13dcc <__assert_fail@plt+0x2ec4>
   14b44:	mov	r6, r3
   14b48:	b	145c8 <__assert_fail@plt+0x36c0>
   14b4c:	mov	r3, #1
   14b50:	movw	r2, #37072	; 0x90d0
   14b54:	movt	r2, #1
   14b58:	mov	r4, r3
   14b5c:	mov	r9, sl
   14b60:	str	r3, [sp, #32]
   14b64:	str	sl, [sp, #44]	; 0x2c
   14b68:	str	r3, [sp, #48]	; 0x30
   14b6c:	str	sl, [sp, #52]	; 0x34
   14b70:	str	r3, [sp, #56]	; 0x38
   14b74:	str	r3, [sp, #60]	; 0x3c
   14b78:	str	sl, [sp, #64]	; 0x40
   14b7c:	str	sl, [sp, #68]	; 0x44
   14b80:	str	r2, [sp, #72]	; 0x48
   14b84:	str	sl, [sp, #80]	; 0x50
   14b88:	str	sl, [sp, #84]	; 0x54
   14b8c:	str	sl, [sp, #88]	; 0x58
   14b90:	b	13680 <__assert_fail@plt+0x2778>
   14b94:	mov	r3, #0
   14b98:	mov	r5, #48	; 0x30
   14b9c:	mov	r6, r3
   14ba0:	b	13dcc <__assert_fail@plt+0x2ec4>
   14ba4:	cmp	sl, r4
   14ba8:	mov	r5, #48	; 0x30
   14bac:	movhi	r3, #48	; 0x30
   14bb0:	strbhi	r3, [r9, r4]
   14bb4:	add	r3, r2, #2
   14bb8:	add	r4, r2, #3
   14bbc:	cmp	sl, r3
   14bc0:	movhi	r1, #48	; 0x30
   14bc4:	strbhi	r1, [r9, r3]
   14bc8:	mov	r3, #0
   14bcc:	b	13ea8 <__assert_fail@plt+0x2fa0>
   14bd0:	ldr	r3, [sp, #48]	; 0x30
   14bd4:	str	r3, [sp, #40]	; 0x28
   14bd8:	b	144b4 <__assert_fail@plt+0x35ac>
   14bdc:	ldr	r2, [sp, #28]
   14be0:	ldrb	r2, [r2, r3]
   14be4:	sub	r1, r2, #33	; 0x21
   14be8:	cmp	r1, #29
   14bec:	ldrls	pc, [pc, r1, lsl #2]
   14bf0:	b	13f2c <__assert_fail@plt+0x3024>
   14bf4:	andeq	r4, r1, ip, ror #24
   14bf8:	andeq	r3, r1, ip, lsr #30
   14bfc:	andeq	r3, r1, ip, lsr #30
   14c00:	andeq	r3, r1, ip, lsr #30
   14c04:	andeq	r3, r1, ip, lsr #30
   14c08:	andeq	r3, r1, ip, lsr #30
   14c0c:	andeq	r4, r1, ip, ror #24
   14c10:	andeq	r4, r1, ip, ror #24
   14c14:	andeq	r4, r1, ip, ror #24
   14c18:	andeq	r3, r1, ip, lsr #30
   14c1c:	andeq	r3, r1, ip, lsr #30
   14c20:	andeq	r3, r1, ip, lsr #30
   14c24:	andeq	r4, r1, ip, ror #24
   14c28:	andeq	r3, r1, ip, lsr #30
   14c2c:	andeq	r4, r1, ip, ror #24
   14c30:	andeq	r3, r1, ip, lsr #30
   14c34:	andeq	r3, r1, ip, lsr #30
   14c38:	andeq	r3, r1, ip, lsr #30
   14c3c:	andeq	r3, r1, ip, lsr #30
   14c40:	andeq	r3, r1, ip, lsr #30
   14c44:	andeq	r3, r1, ip, lsr #30
   14c48:	andeq	r3, r1, ip, lsr #30
   14c4c:	andeq	r3, r1, ip, lsr #30
   14c50:	andeq	r3, r1, ip, lsr #30
   14c54:	andeq	r3, r1, ip, lsr #30
   14c58:	andeq	r3, r1, ip, lsr #30
   14c5c:	andeq	r3, r1, ip, lsr #30
   14c60:	andeq	r4, r1, ip, ror #24
   14c64:	andeq	r4, r1, ip, ror #24
   14c68:	andeq	r4, r1, ip, ror #24
   14c6c:	ldr	r1, [sp, #44]	; 0x2c
   14c70:	cmp	r1, #0
   14c74:	bne	14ed4 <__assert_fail@plt+0x3fcc>
   14c78:	cmp	sl, r4
   14c7c:	mov	r7, r3
   14c80:	movhi	r1, #63	; 0x3f
   14c84:	mov	r5, r2
   14c88:	mov	r3, fp
   14c8c:	strbhi	r1, [r9, r4]
   14c90:	add	r1, r4, #1
   14c94:	cmp	sl, r1
   14c98:	movhi	r0, #34	; 0x22
   14c9c:	strbhi	r0, [r9, r1]
   14ca0:	add	r1, r4, #2
   14ca4:	cmp	sl, r1
   14ca8:	movhi	r0, #34	; 0x22
   14cac:	strbhi	r0, [r9, r1]
   14cb0:	add	r1, r4, #3
   14cb4:	add	r4, r4, #4
   14cb8:	cmp	sl, r1
   14cbc:	movhi	r0, #63	; 0x3f
   14cc0:	strbhi	r0, [r9, r1]
   14cc4:	b	13ea8 <__assert_fail@plt+0x2fa0>
   14cc8:	mov	fp, r9
   14ccc:	b	13f88 <__assert_fail@plt+0x3080>
   14cd0:	ldr	r3, [sp, #188]	; 0xbc
   14cd4:	ldrb	r3, [r3]
   14cd8:	cmp	r3, #0
   14cdc:	beq	13618 <__assert_fail@plt+0x2710>
   14ce0:	ldr	r2, [sp, #188]	; 0xbc
   14ce4:	cmp	sl, r4
   14ce8:	bls	14d08 <__assert_fail@plt+0x3e00>
   14cec:	strb	r3, [fp, r4]
   14cf0:	add	r4, r4, #1
   14cf4:	ldrb	r3, [r2, #1]!
   14cf8:	cmp	r3, #0
   14cfc:	beq	13618 <__assert_fail@plt+0x2710>
   14d00:	cmp	sl, r4
   14d04:	bhi	14cec <__assert_fail@plt+0x3de4>
   14d08:	ldrb	r3, [r2, #1]!
   14d0c:	add	r4, r4, #1
   14d10:	cmp	r3, #0
   14d14:	bne	14ce4 <__assert_fail@plt+0x3ddc>
   14d18:	b	13618 <__assert_fail@plt+0x2710>
   14d1c:	add	r9, sp, #100	; 0x64
   14d20:	mov	r0, r5
   14d24:	ldr	r2, [sp, #60]	; 0x3c
   14d28:	mov	r6, #0
   14d2c:	ldm	r9, {r9, sl, fp}
   14d30:	ldr	r5, [sp, #112]	; 0x70
   14d34:	ldr	r4, [sp, #116]	; 0x74
   14d38:	b	149e8 <__assert_fail@plt+0x3ae0>
   14d3c:	cmp	r4, r8
   14d40:	add	r9, sp, #100	; 0x64
   14d44:	mov	r1, r4
   14d48:	mov	r2, fp
   14d4c:	ldm	r9, {r9, sl, fp}
   14d50:	mov	r3, r5
   14d54:	mov	r0, r5
   14d58:	ldr	r5, [sp, #112]	; 0x70
   14d5c:	ldr	r4, [sp, #116]	; 0x74
   14d60:	bcs	14d94 <__assert_fail@plt+0x3e8c>
   14d64:	ldrb	r6, [r2]
   14d68:	cmp	r6, #0
   14d6c:	bne	14d80 <__assert_fail@plt+0x3e78>
   14d70:	b	14ecc <__assert_fail@plt+0x3fc4>
   14d74:	ldrb	r6, [r2, #1]!
   14d78:	cmp	r6, #0
   14d7c:	beq	14e64 <__assert_fail@plt+0x3f5c>
   14d80:	add	r3, r3, #1
   14d84:	add	r1, r7, r3
   14d88:	cmp	r8, r1
   14d8c:	bhi	14d74 <__assert_fail@plt+0x3e6c>
   14d90:	mov	r0, r3
   14d94:	mov	r6, #0
   14d98:	ldr	r2, [sp, #60]	; 0x3c
   14d9c:	b	149e8 <__assert_fail@plt+0x3ae0>
   14da0:	mov	r3, #1
   14da4:	mov	r4, #0
   14da8:	mov	r9, r4
   14dac:	str	r3, [sp, #32]
   14db0:	str	r3, [sp, #44]	; 0x2c
   14db4:	str	r3, [sp, #48]	; 0x30
   14db8:	str	r4, [sp, #52]	; 0x34
   14dbc:	str	r3, [sp, #56]	; 0x38
   14dc0:	str	r3, [sp, #60]	; 0x3c
   14dc4:	str	r3, [sp, #88]	; 0x58
   14dc8:	movw	r3, #37072	; 0x90d0
   14dcc:	movt	r3, #1
   14dd0:	str	r4, [sp, #64]	; 0x40
   14dd4:	str	r4, [sp, #68]	; 0x44
   14dd8:	str	r3, [sp, #72]	; 0x48
   14ddc:	str	r4, [sp, #80]	; 0x50
   14de0:	str	r4, [sp, #84]	; 0x54
   14de4:	b	13680 <__assert_fail@plt+0x2778>
   14de8:	mov	fp, r9
   14dec:	b	13f9c <__assert_fail@plt+0x3094>
   14df0:	ldr	r3, [sp, #48]	; 0x30
   14df4:	b	14910 <__assert_fail@plt+0x3a08>
   14df8:	mov	r2, r3
   14dfc:	ldr	r3, [sp, #72]	; 0x48
   14e00:	cmp	r3, #0
   14e04:	moveq	r2, #0
   14e08:	andne	r2, r2, #1
   14e0c:	cmp	r2, #0
   14e10:	beq	14e40 <__assert_fail@plt+0x3f38>
   14e14:	mov	r2, r3
   14e18:	ldrb	r3, [r3]
   14e1c:	cmp	r3, #0
   14e20:	beq	14e40 <__assert_fail@plt+0x3f38>
   14e24:	cmp	sl, r4
   14e28:	bls	14e50 <__assert_fail@plt+0x3f48>
   14e2c:	strb	r3, [fp, r4]
   14e30:	add	r4, r4, #1
   14e34:	ldrb	r3, [r2, #1]!
   14e38:	cmp	r3, #0
   14e3c:	bne	14e24 <__assert_fail@plt+0x3f1c>
   14e40:	cmp	sl, r4
   14e44:	movhi	r3, #0
   14e48:	strbhi	r3, [fp, r4]
   14e4c:	b	13fd8 <__assert_fail@plt+0x30d0>
   14e50:	ldrb	r3, [r2, #1]!
   14e54:	add	r4, r4, #1
   14e58:	cmp	r3, #0
   14e5c:	bne	14e24 <__assert_fail@plt+0x3f1c>
   14e60:	b	14e40 <__assert_fail@plt+0x3f38>
   14e64:	mov	r0, r3
   14e68:	ldr	r2, [sp, #60]	; 0x3c
   14e6c:	b	149e8 <__assert_fail@plt+0x3ae0>
   14e70:	mov	ip, #5
   14e74:	mov	r3, r8
   14e78:	ldr	r1, [sp, #84]	; 0x54
   14e7c:	str	ip, [sp]
   14e80:	ldr	r2, [sp, #180]	; 0xb4
   14e84:	ldr	ip, [sp, #188]	; 0xbc
   14e88:	ldr	r0, [sp, #184]	; 0xb8
   14e8c:	str	r2, [sp, #4]
   14e90:	ldr	r2, [sp, #28]
   14e94:	str	ip, [sp, #12]
   14e98:	ldr	ip, [sp, #192]	; 0xc0
   14e9c:	str	r0, [sp, #8]
   14ea0:	mov	r0, fp
   14ea4:	str	ip, [sp, #16]
   14ea8:	bl	1355c <__assert_fail@plt+0x2654>
   14eac:	mov	r4, r0
   14eb0:	b	13fd8 <__assert_fail@plt+0x30d0>
   14eb4:	mov	r6, r3
   14eb8:	str	r3, [sp, #40]	; 0x28
   14ebc:	b	13f48 <__assert_fail@plt+0x3040>
   14ec0:	mov	r3, #2
   14ec4:	str	r3, [sp, #176]	; 0xb0
   14ec8:	b	13f88 <__assert_fail@plt+0x3080>
   14ecc:	ldr	r2, [sp, #60]	; 0x3c
   14ed0:	b	149e8 <__assert_fail@plt+0x3ae0>
   14ed4:	mov	r3, #5
   14ed8:	mov	fp, r9
   14edc:	str	r3, [sp, #176]	; 0xb0
   14ee0:	b	13f9c <__assert_fail@plt+0x3094>
   14ee4:	mov	r1, #1
   14ee8:	mov	r9, #0
   14eec:	mov	r3, r9
   14ef0:	mov	r2, r9
   14ef4:	str	r1, [sp, #32]
   14ef8:	str	sl, [sp, #84]	; 0x54
   14efc:	b	13d24 <__assert_fail@plt+0x2e1c>
   14f00:	mov	r3, #0
   14f04:	mov	r2, #1
   14f08:	mov	r9, r3
   14f0c:	mov	r4, r3
   14f10:	str	r2, [sp, #32]
   14f14:	strd	r2, [sp, #44]	; 0x2c
   14f18:	strd	r2, [sp, #56]	; 0x38
   14f1c:	str	r3, [sp, #80]	; 0x50
   14f20:	str	r3, [sp, #84]	; 0x54
   14f24:	str	r3, [sp, #88]	; 0x58
   14f28:	movw	r3, #39036	; 0x987c
   14f2c:	movt	r3, #1
   14f30:	str	r2, [sp, #52]	; 0x34
   14f34:	str	r2, [sp, #64]	; 0x40
   14f38:	str	r2, [sp, #68]	; 0x44
   14f3c:	str	r3, [sp, #72]	; 0x48
   14f40:	b	13680 <__assert_fail@plt+0x2778>
   14f44:	bl	10efc <abort@plt>
   14f48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f4c:	mov	r4, r0
   14f50:	mov	r5, r3
   14f54:	strd	r6, [sp, #8]
   14f58:	movw	r7, #41200	; 0xa0f0
   14f5c:	movt	r7, #2
   14f60:	strd	r8, [sp, #16]
   14f64:	strd	sl, [sp, #24]
   14f68:	mov	sl, r1
   14f6c:	mov	fp, r2
   14f70:	str	lr, [sp, #32]
   14f74:	sub	sp, sp, #60	; 0x3c
   14f78:	bl	10e30 <__errno_location@plt>
   14f7c:	mov	r8, r0
   14f80:	cmn	r4, #-2147483647	; 0x80000001
   14f84:	ldr	r6, [r7]
   14f88:	movne	r0, #0
   14f8c:	moveq	r0, #1
   14f90:	ldr	r3, [r8]
   14f94:	orrs	r0, r0, r4, lsr #31
   14f98:	str	r3, [sp, #28]
   14f9c:	bne	1512c <__assert_fail@plt+0x4224>
   14fa0:	ldr	r3, [r7, #4]
   14fa4:	cmp	r3, r4
   14fa8:	bgt	15008 <__assert_fail@plt+0x4100>
   14fac:	add	r1, r7, #8
   14fb0:	sub	r2, r4, r3
   14fb4:	str	r3, [sp, #52]	; 0x34
   14fb8:	cmp	r6, r1
   14fbc:	add	r2, r2, #1
   14fc0:	beq	15104 <__assert_fail@plt+0x41fc>
   14fc4:	mov	r1, #8
   14fc8:	mov	r0, r6
   14fcc:	mvn	r3, #-2147483648	; 0x80000000
   14fd0:	str	r1, [sp]
   14fd4:	add	r1, sp, #52	; 0x34
   14fd8:	bl	17868 <__assert_fail@plt+0x6960>
   14fdc:	mov	r6, r0
   14fe0:	str	r0, [r7]
   14fe4:	ldr	r0, [r7, #4]
   14fe8:	mov	r1, #0
   14fec:	ldr	r2, [sp, #52]	; 0x34
   14ff0:	sub	r2, r2, r0
   14ff4:	add	r0, r6, r0, lsl #3
   14ff8:	lsl	r2, r2, #3
   14ffc:	bl	10e48 <memset@plt>
   15000:	ldr	r3, [sp, #52]	; 0x34
   15004:	str	r3, [r7, #4]
   15008:	ldr	r1, [r5, #4]
   1500c:	add	r0, r6, r4, lsl #3
   15010:	add	ip, r5, #8
   15014:	mov	r3, fp
   15018:	mov	r2, sl
   1501c:	ldr	r7, [r0, #4]
   15020:	str	r0, [sp, #36]	; 0x24
   15024:	str	ip, [sp, #40]	; 0x28
   15028:	orr	r0, r1, #1
   1502c:	ldr	r9, [r6, r4, lsl #3]
   15030:	str	ip, [sp, #8]
   15034:	ldr	lr, [r5, #44]	; 0x2c
   15038:	str	r0, [sp, #4]
   1503c:	ldr	ip, [r5]
   15040:	mov	r1, r9
   15044:	str	ip, [sp, #32]
   15048:	ldr	ip, [r5, #40]	; 0x28
   1504c:	str	ip, [sp, #12]
   15050:	ldr	ip, [sp, #32]
   15054:	str	lr, [sp, #16]
   15058:	str	r0, [sp, #44]	; 0x2c
   1505c:	mov	r0, r7
   15060:	str	ip, [sp]
   15064:	bl	1355c <__assert_fail@plt+0x2654>
   15068:	cmp	r9, r0
   1506c:	bhi	150dc <__assert_fail@plt+0x41d4>
   15070:	add	r9, r0, #1
   15074:	movw	r3, #8852	; 0x2294
   15078:	movt	r3, #3
   1507c:	cmp	r7, r3
   15080:	str	r9, [r6, r4, lsl #3]
   15084:	beq	15090 <__assert_fail@plt+0x4188>
   15088:	mov	r0, r7
   1508c:	bl	18cec <__assert_fail@plt+0x7de4>
   15090:	mov	r0, r9
   15094:	bl	175c4 <__assert_fail@plt+0x66bc>
   15098:	ldr	ip, [r5]
   1509c:	mov	r3, fp
   150a0:	mov	r2, sl
   150a4:	mov	r1, r9
   150a8:	mov	r7, r0
   150ac:	ldr	lr, [sp, #36]	; 0x24
   150b0:	ldr	r4, [r5, #40]	; 0x28
   150b4:	str	r0, [lr, #4]
   150b8:	ldr	lr, [r5, #44]	; 0x2c
   150bc:	str	ip, [sp]
   150c0:	ldr	ip, [sp, #44]	; 0x2c
   150c4:	str	ip, [sp, #4]
   150c8:	ldr	ip, [sp, #40]	; 0x28
   150cc:	str	r4, [sp, #12]
   150d0:	str	lr, [sp, #16]
   150d4:	str	ip, [sp, #8]
   150d8:	bl	1355c <__assert_fail@plt+0x2654>
   150dc:	ldr	r3, [sp, #28]
   150e0:	mov	r0, r7
   150e4:	str	r3, [r8]
   150e8:	add	sp, sp, #60	; 0x3c
   150ec:	ldrd	r4, [sp]
   150f0:	ldrd	r6, [sp, #8]
   150f4:	ldrd	r8, [sp, #16]
   150f8:	ldrd	sl, [sp, #24]
   150fc:	add	sp, sp, #32
   15100:	pop	{pc}		; (ldr pc, [sp], #4)
   15104:	mov	r1, #8
   15108:	mvn	r3, #-2147483648	; 0x80000000
   1510c:	str	r1, [sp]
   15110:	add	r1, sp, #52	; 0x34
   15114:	bl	17868 <__assert_fail@plt+0x6960>
   15118:	ldrd	r2, [r7, #8]
   1511c:	mov	r6, r0
   15120:	str	r0, [r7]
   15124:	strd	r2, [r0]
   15128:	b	14fe4 <__assert_fail@plt+0x40dc>
   1512c:	bl	10efc <abort@plt>
   15130:	strd	r4, [sp, #-16]!
   15134:	mov	r5, r0
   15138:	str	r6, [sp, #8]
   1513c:	str	lr, [sp, #12]
   15140:	bl	10e30 <__errno_location@plt>
   15144:	mov	r4, r0
   15148:	cmp	r5, #0
   1514c:	ldr	r0, [pc, #32]	; 15174 <__assert_fail@plt+0x426c>
   15150:	mov	r1, #48	; 0x30
   15154:	movne	r0, r5
   15158:	ldr	r6, [r4]
   1515c:	bl	17a08 <__assert_fail@plt+0x6b00>
   15160:	str	r6, [r4]
   15164:	ldrd	r4, [sp]
   15168:	ldr	r6, [sp, #8]
   1516c:	add	sp, sp, #12
   15170:	pop	{pc}		; (ldr pc, [sp], #4)
   15174:	muleq	r3, r4, r3
   15178:	ldr	r3, [pc, #12]	; 1518c <__assert_fail@plt+0x4284>
   1517c:	cmp	r0, #0
   15180:	moveq	r0, r3
   15184:	ldr	r0, [r0]
   15188:	bx	lr
   1518c:	muleq	r3, r4, r3
   15190:	ldr	r3, [pc, #12]	; 151a4 <__assert_fail@plt+0x429c>
   15194:	cmp	r0, #0
   15198:	moveq	r0, r3
   1519c:	str	r1, [r0]
   151a0:	bx	lr
   151a4:	muleq	r3, r4, r3
   151a8:	ldr	r3, [pc, #52]	; 151e4 <__assert_fail@plt+0x42dc>
   151ac:	cmp	r0, #0
   151b0:	push	{lr}		; (str lr, [sp, #-4]!)
   151b4:	lsr	lr, r1, #5
   151b8:	and	r1, r1, #31
   151bc:	moveq	r0, r3
   151c0:	add	r3, r0, #8
   151c4:	ldr	ip, [r3, lr, lsl #2]
   151c8:	lsr	r0, ip, r1
   151cc:	eor	r2, r2, r0
   151d0:	and	r0, r0, #1
   151d4:	and	r2, r2, #1
   151d8:	eor	r1, ip, r2, lsl r1
   151dc:	str	r1, [r3, lr, lsl #2]
   151e0:	pop	{pc}		; (ldr pc, [sp], #4)
   151e4:	muleq	r3, r4, r3
   151e8:	ldr	r3, [pc, #16]	; 15200 <__assert_fail@plt+0x42f8>
   151ec:	cmp	r0, #0
   151f0:	movne	r3, r0
   151f4:	ldr	r0, [r3, #4]
   151f8:	str	r1, [r3, #4]
   151fc:	bx	lr
   15200:	muleq	r3, r4, r3
   15204:	ldr	r3, [pc, #48]	; 1523c <__assert_fail@plt+0x4334>
   15208:	cmp	r0, #0
   1520c:	mov	ip, #10
   15210:	moveq	r0, r3
   15214:	cmp	r2, #0
   15218:	cmpne	r1, #0
   1521c:	str	ip, [r0]
   15220:	beq	15230 <__assert_fail@plt+0x4328>
   15224:	str	r1, [r0, #40]	; 0x28
   15228:	str	r2, [r0, #44]	; 0x2c
   1522c:	bx	lr
   15230:	str	r4, [sp, #-8]!
   15234:	str	lr, [sp, #4]
   15238:	bl	10efc <abort@plt>
   1523c:	muleq	r3, r4, r3
   15240:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15244:	strd	r6, [sp, #8]
   15248:	mov	r7, r0
   1524c:	mov	r6, r1
   15250:	strd	r8, [sp, #16]
   15254:	mov	r8, r2
   15258:	mov	r9, r3
   1525c:	str	lr, [sp, #24]
   15260:	sub	sp, sp, #28
   15264:	ldr	r4, [sp, #56]	; 0x38
   15268:	ldr	ip, [pc, #104]	; 152d8 <__assert_fail@plt+0x43d0>
   1526c:	cmp	r4, #0
   15270:	moveq	r4, ip
   15274:	bl	10e30 <__errno_location@plt>
   15278:	ldr	ip, [r4, #44]	; 0x2c
   1527c:	mov	r5, r0
   15280:	mov	r1, r6
   15284:	add	lr, r4, #8
   15288:	mov	r3, r9
   1528c:	ldr	r6, [r5]
   15290:	mov	r2, r8
   15294:	mov	r0, r7
   15298:	str	ip, [sp, #16]
   1529c:	ldr	ip, [r4, #40]	; 0x28
   152a0:	str	lr, [sp, #8]
   152a4:	str	ip, [sp, #12]
   152a8:	ldr	ip, [r4, #4]
   152ac:	str	ip, [sp, #4]
   152b0:	ldr	ip, [r4]
   152b4:	str	ip, [sp]
   152b8:	bl	1355c <__assert_fail@plt+0x2654>
   152bc:	str	r6, [r5]
   152c0:	add	sp, sp, #28
   152c4:	ldrd	r4, [sp]
   152c8:	ldrd	r6, [sp, #8]
   152cc:	ldrd	r8, [sp, #16]
   152d0:	add	sp, sp, #24
   152d4:	pop	{pc}		; (ldr pc, [sp], #4)
   152d8:	muleq	r3, r4, r3
   152dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152e0:	cmp	r2, #0
   152e4:	ldr	r4, [pc, #192]	; 153ac <__assert_fail@plt+0x44a4>
   152e8:	movne	r4, r2
   152ec:	strd	r6, [sp, #8]
   152f0:	strd	r8, [sp, #16]
   152f4:	mov	r9, r1
   152f8:	mov	r8, r0
   152fc:	strd	sl, [sp, #24]
   15300:	str	lr, [sp, #32]
   15304:	sub	sp, sp, #36	; 0x24
   15308:	bl	10e30 <__errno_location@plt>
   1530c:	ldr	r5, [r4, #4]
   15310:	mov	r6, r0
   15314:	add	r7, r4, #8
   15318:	mov	r1, #0
   1531c:	mov	r3, r9
   15320:	ldr	ip, [r4, #44]	; 0x2c
   15324:	mov	r2, r8
   15328:	mov	r0, r1
   1532c:	ldr	sl, [r6]
   15330:	orr	r5, r5, #1
   15334:	str	ip, [sp, #16]
   15338:	ldr	ip, [r4, #40]	; 0x28
   1533c:	stmib	sp, {r5, r7, ip}
   15340:	ldr	ip, [r4]
   15344:	str	ip, [sp]
   15348:	bl	1355c <__assert_fail@plt+0x2654>
   1534c:	add	r1, r0, #1
   15350:	mov	r0, r1
   15354:	str	r1, [sp, #28]
   15358:	bl	175c4 <__assert_fail@plt+0x66bc>
   1535c:	ldr	ip, [r4, #44]	; 0x2c
   15360:	mov	fp, r0
   15364:	mov	r3, r9
   15368:	mov	r2, r8
   1536c:	ldr	r1, [sp, #28]
   15370:	str	ip, [sp, #16]
   15374:	ldr	ip, [r4, #40]	; 0x28
   15378:	stmib	sp, {r5, r7, ip}
   1537c:	ldr	ip, [r4]
   15380:	str	ip, [sp]
   15384:	bl	1355c <__assert_fail@plt+0x2654>
   15388:	mov	r0, fp
   1538c:	str	sl, [r6]
   15390:	add	sp, sp, #36	; 0x24
   15394:	ldrd	r4, [sp]
   15398:	ldrd	r6, [sp, #8]
   1539c:	ldrd	r8, [sp, #16]
   153a0:	ldrd	sl, [sp, #24]
   153a4:	add	sp, sp, #32
   153a8:	pop	{pc}		; (ldr pc, [sp], #4)
   153ac:	muleq	r3, r4, r3
   153b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153b4:	cmp	r3, #0
   153b8:	ldr	r4, [pc, #220]	; 1549c <__assert_fail@plt+0x4594>
   153bc:	movne	r4, r3
   153c0:	strd	r6, [sp, #8]
   153c4:	mov	r6, r2
   153c8:	strd	r8, [sp, #16]
   153cc:	mov	r9, r0
   153d0:	strd	sl, [sp, #24]
   153d4:	mov	sl, r1
   153d8:	str	lr, [sp, #32]
   153dc:	sub	sp, sp, #44	; 0x2c
   153e0:	bl	10e30 <__errno_location@plt>
   153e4:	ldr	r5, [r4, #4]
   153e8:	mov	r7, r0
   153ec:	mov	r1, #0
   153f0:	add	r8, r4, #8
   153f4:	mov	r3, sl
   153f8:	ldr	ip, [r4, #44]	; 0x2c
   153fc:	mov	r2, r9
   15400:	mov	r0, r1
   15404:	ldr	lr, [r7]
   15408:	cmp	r6, r1
   1540c:	orreq	r5, r5, #1
   15410:	str	ip, [sp, #16]
   15414:	ldr	ip, [r4, #40]	; 0x28
   15418:	stmib	sp, {r5, r8, ip}
   1541c:	ldr	ip, [r4]
   15420:	str	lr, [sp, #28]
   15424:	str	ip, [sp]
   15428:	bl	1355c <__assert_fail@plt+0x2654>
   1542c:	add	r1, r0, #1
   15430:	mov	fp, r0
   15434:	mov	r0, r1
   15438:	str	r1, [sp, #36]	; 0x24
   1543c:	bl	175c4 <__assert_fail@plt+0x66bc>
   15440:	ldr	ip, [r4, #44]	; 0x2c
   15444:	mov	r3, sl
   15448:	mov	r2, r9
   1544c:	ldr	r1, [sp, #36]	; 0x24
   15450:	str	ip, [sp, #16]
   15454:	ldr	ip, [r4, #40]	; 0x28
   15458:	str	r0, [sp, #32]
   1545c:	stmib	sp, {r5, r8, ip}
   15460:	ldr	ip, [r4]
   15464:	str	ip, [sp]
   15468:	bl	1355c <__assert_fail@plt+0x2654>
   1546c:	ldr	lr, [sp, #28]
   15470:	cmp	r6, #0
   15474:	ldr	r0, [sp, #32]
   15478:	str	lr, [r7]
   1547c:	strne	fp, [r6]
   15480:	add	sp, sp, #44	; 0x2c
   15484:	ldrd	r4, [sp]
   15488:	ldrd	r6, [sp, #8]
   1548c:	ldrd	r8, [sp, #16]
   15490:	ldrd	sl, [sp, #24]
   15494:	add	sp, sp, #32
   15498:	pop	{pc}		; (ldr pc, [sp], #4)
   1549c:	muleq	r3, r4, r3
   154a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   154a4:	movw	r5, #41200	; 0xa0f0
   154a8:	movt	r5, #2
   154ac:	ldr	r3, [r5, #4]
   154b0:	strd	r6, [sp, #8]
   154b4:	str	r8, [sp, #16]
   154b8:	str	lr, [sp, #20]
   154bc:	ldr	r7, [r5]
   154c0:	cmp	r3, #1
   154c4:	ble	154e8 <__assert_fail@plt+0x45e0>
   154c8:	mov	r4, #1
   154cc:	add	r6, r7, #4
   154d0:	ldr	r0, [r6, r4, lsl #3]
   154d4:	add	r4, r4, #1
   154d8:	bl	18cec <__assert_fail@plt+0x7de4>
   154dc:	ldr	r3, [r5, #4]
   154e0:	cmp	r3, r4
   154e4:	bgt	154d0 <__assert_fail@plt+0x45c8>
   154e8:	ldr	r0, [r7, #4]
   154ec:	movw	r4, #8852	; 0x2294
   154f0:	movt	r4, #3
   154f4:	cmp	r0, r4
   154f8:	beq	1550c <__assert_fail@plt+0x4604>
   154fc:	bl	18cec <__assert_fail@plt+0x7de4>
   15500:	mov	r3, #256	; 0x100
   15504:	str	r3, [r5, #8]
   15508:	str	r4, [r5, #12]
   1550c:	ldr	r4, [pc, #44]	; 15540 <__assert_fail@plt+0x4638>
   15510:	cmp	r7, r4
   15514:	beq	15524 <__assert_fail@plt+0x461c>
   15518:	mov	r0, r7
   1551c:	bl	18cec <__assert_fail@plt+0x7de4>
   15520:	str	r4, [r5]
   15524:	mov	r3, #1
   15528:	ldrd	r6, [sp, #8]
   1552c:	str	r3, [r5, #4]
   15530:	ldrd	r4, [sp]
   15534:	ldr	r8, [sp, #16]
   15538:	add	sp, sp, #20
   1553c:	pop	{pc}		; (ldr pc, [sp], #4)
   15540:	strdeq	sl, [r2], -r8
   15544:	ldr	r3, [pc, #4]	; 15550 <__assert_fail@plt+0x4648>
   15548:	mvn	r2, #0
   1554c:	b	14f48 <__assert_fail@plt+0x4040>
   15550:	muleq	r3, r4, r3
   15554:	ldr	r3, [pc]	; 1555c <__assert_fail@plt+0x4654>
   15558:	b	14f48 <__assert_fail@plt+0x4040>
   1555c:	muleq	r3, r4, r3
   15560:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15564:	movw	r4, #41200	; 0xa0f0
   15568:	movt	r4, #2
   1556c:	strd	r6, [sp, #8]
   15570:	strd	r8, [sp, #16]
   15574:	strd	sl, [sp, #24]
   15578:	mov	sl, r0
   1557c:	str	lr, [sp, #32]
   15580:	sub	sp, sp, #44	; 0x2c
   15584:	bl	10e30 <__errno_location@plt>
   15588:	ldr	r3, [r0]
   1558c:	mov	r8, r0
   15590:	ldr	r2, [r4, #4]
   15594:	ldr	r5, [r4]
   15598:	str	r3, [sp, #28]
   1559c:	cmp	r2, #0
   155a0:	bgt	155fc <__assert_fail@plt+0x46f4>
   155a4:	add	r3, r4, #8
   155a8:	str	r2, [sp, #36]	; 0x24
   155ac:	rsb	r2, r2, #1
   155b0:	cmp	r5, r3
   155b4:	beq	156c8 <__assert_fail@plt+0x47c0>
   155b8:	mov	r1, #8
   155bc:	mov	r0, r5
   155c0:	mvn	r3, #-2147483648	; 0x80000000
   155c4:	str	r1, [sp]
   155c8:	add	r1, sp, #36	; 0x24
   155cc:	bl	17868 <__assert_fail@plt+0x6960>
   155d0:	mov	r5, r0
   155d4:	str	r0, [r4]
   155d8:	ldr	r0, [r4, #4]
   155dc:	mov	r1, #0
   155e0:	ldr	r2, [sp, #36]	; 0x24
   155e4:	sub	r2, r2, r0
   155e8:	add	r0, r5, r0, lsl #3
   155ec:	lsl	r2, r2, #3
   155f0:	bl	10e48 <memset@plt>
   155f4:	ldr	r3, [sp, #36]	; 0x24
   155f8:	str	r3, [r4, #4]
   155fc:	movw	r4, #8852	; 0x2294
   15600:	movt	r4, #3
   15604:	ldr	r9, [r5]
   15608:	add	fp, r4, #264	; 0x108
   1560c:	mvn	r3, #0
   15610:	ldr	r7, [r4, #260]	; 0x104
   15614:	mov	r2, sl
   15618:	ldr	r6, [r5, #4]
   1561c:	str	fp, [sp, #8]
   15620:	mov	r1, r9
   15624:	ldr	ip, [r4, #256]	; 0x100
   15628:	orr	r7, r7, #1
   1562c:	ldr	lr, [r4, #300]	; 0x12c
   15630:	mov	r0, r6
   15634:	str	ip, [sp]
   15638:	str	r7, [sp, #4]
   1563c:	str	lr, [sp, #16]
   15640:	ldr	ip, [r4, #296]	; 0x128
   15644:	str	ip, [sp, #12]
   15648:	bl	1355c <__assert_fail@plt+0x2654>
   1564c:	cmp	r9, r0
   15650:	bhi	156a0 <__assert_fail@plt+0x4798>
   15654:	add	r9, r0, #1
   15658:	cmp	r6, r4
   1565c:	str	r9, [r5]
   15660:	beq	1566c <__assert_fail@plt+0x4764>
   15664:	mov	r0, r6
   15668:	bl	18cec <__assert_fail@plt+0x7de4>
   1566c:	mov	r0, r9
   15670:	bl	175c4 <__assert_fail@plt+0x66bc>
   15674:	ldr	r3, [r4, #256]	; 0x100
   15678:	mov	r2, sl
   1567c:	mov	r1, r9
   15680:	mov	r6, r0
   15684:	ldr	lr, [r4, #296]	; 0x128
   15688:	ldr	ip, [r4, #300]	; 0x12c
   1568c:	str	r0, [r5, #4]
   15690:	stm	sp, {r3, r7, fp, lr}
   15694:	mvn	r3, #0
   15698:	str	ip, [sp, #16]
   1569c:	bl	1355c <__assert_fail@plt+0x2654>
   156a0:	ldr	r3, [sp, #28]
   156a4:	mov	r0, r6
   156a8:	str	r3, [r8]
   156ac:	add	sp, sp, #44	; 0x2c
   156b0:	ldrd	r4, [sp]
   156b4:	ldrd	r6, [sp, #8]
   156b8:	ldrd	r8, [sp, #16]
   156bc:	ldrd	sl, [sp, #24]
   156c0:	add	sp, sp, #32
   156c4:	pop	{pc}		; (ldr pc, [sp], #4)
   156c8:	mov	r0, #8
   156cc:	mvn	r3, #-2147483648	; 0x80000000
   156d0:	add	r1, sp, #36	; 0x24
   156d4:	str	r0, [sp]
   156d8:	mov	r0, #0
   156dc:	bl	17868 <__assert_fail@plt+0x6960>
   156e0:	ldrd	r2, [r4, #8]
   156e4:	mov	r5, r0
   156e8:	str	r0, [r4]
   156ec:	strd	r2, [r0]
   156f0:	b	155d8 <__assert_fail@plt+0x46d0>
   156f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   156f8:	movw	r4, #41200	; 0xa0f0
   156fc:	movt	r4, #2
   15700:	strd	r6, [sp, #8]
   15704:	strd	r8, [sp, #16]
   15708:	strd	sl, [sp, #24]
   1570c:	mov	sl, r0
   15710:	mov	fp, r1
   15714:	str	lr, [sp, #32]
   15718:	sub	sp, sp, #44	; 0x2c
   1571c:	bl	10e30 <__errno_location@plt>
   15720:	ldr	r3, [r0]
   15724:	mov	r8, r0
   15728:	ldr	r2, [r4, #4]
   1572c:	ldr	r5, [r4]
   15730:	str	r3, [sp, #28]
   15734:	cmp	r2, #0
   15738:	bgt	15794 <__assert_fail@plt+0x488c>
   1573c:	add	r3, r4, #8
   15740:	str	r2, [sp, #36]	; 0x24
   15744:	rsb	r2, r2, #1
   15748:	cmp	r5, r3
   1574c:	beq	15870 <__assert_fail@plt+0x4968>
   15750:	mov	r1, #8
   15754:	mov	r0, r5
   15758:	mvn	r3, #-2147483648	; 0x80000000
   1575c:	str	r1, [sp]
   15760:	add	r1, sp, #36	; 0x24
   15764:	bl	17868 <__assert_fail@plt+0x6960>
   15768:	mov	r5, r0
   1576c:	str	r0, [r4]
   15770:	ldr	r0, [r4, #4]
   15774:	mov	r1, #0
   15778:	ldr	r2, [sp, #36]	; 0x24
   1577c:	sub	r2, r2, r0
   15780:	add	r0, r5, r0, lsl #3
   15784:	lsl	r2, r2, #3
   15788:	bl	10e48 <memset@plt>
   1578c:	ldr	r3, [sp, #36]	; 0x24
   15790:	str	r3, [r4, #4]
   15794:	movw	r4, #8852	; 0x2294
   15798:	movt	r4, #3
   1579c:	ldr	r9, [r5]
   157a0:	add	r0, r4, #264	; 0x108
   157a4:	mov	r3, fp
   157a8:	ldr	r7, [r4, #260]	; 0x104
   157ac:	mov	r2, sl
   157b0:	ldr	r6, [r5, #4]
   157b4:	str	r0, [sp, #8]
   157b8:	mov	r1, r9
   157bc:	ldr	ip, [r4, #256]	; 0x100
   157c0:	orr	r7, r7, #1
   157c4:	ldr	lr, [r4, #300]	; 0x12c
   157c8:	mov	r0, r6
   157cc:	str	ip, [sp]
   157d0:	str	r7, [sp, #4]
   157d4:	str	lr, [sp, #16]
   157d8:	ldr	ip, [r4, #296]	; 0x128
   157dc:	str	ip, [sp, #12]
   157e0:	bl	1355c <__assert_fail@plt+0x2654>
   157e4:	cmp	r9, r0
   157e8:	bhi	15848 <__assert_fail@plt+0x4940>
   157ec:	add	r9, r0, #1
   157f0:	cmp	r6, r4
   157f4:	str	r9, [r5]
   157f8:	beq	15804 <__assert_fail@plt+0x48fc>
   157fc:	mov	r0, r6
   15800:	bl	18cec <__assert_fail@plt+0x7de4>
   15804:	mov	r0, r9
   15808:	bl	175c4 <__assert_fail@plt+0x66bc>
   1580c:	ldr	ip, [r4, #256]	; 0x100
   15810:	mov	r1, r9
   15814:	mov	r3, fp
   15818:	mov	r2, sl
   1581c:	mov	r6, r0
   15820:	ldr	r9, [r4, #296]	; 0x128
   15824:	ldr	lr, [r4, #300]	; 0x12c
   15828:	str	r0, [r5, #4]
   1582c:	str	ip, [sp]
   15830:	ldr	ip, [pc, #100]	; 1589c <__assert_fail@plt+0x4994>
   15834:	str	r7, [sp, #4]
   15838:	str	ip, [sp, #8]
   1583c:	str	r9, [sp, #12]
   15840:	str	lr, [sp, #16]
   15844:	bl	1355c <__assert_fail@plt+0x2654>
   15848:	ldr	r3, [sp, #28]
   1584c:	mov	r0, r6
   15850:	str	r3, [r8]
   15854:	add	sp, sp, #44	; 0x2c
   15858:	ldrd	r4, [sp]
   1585c:	ldrd	r6, [sp, #8]
   15860:	ldrd	r8, [sp, #16]
   15864:	ldrd	sl, [sp, #24]
   15868:	add	sp, sp, #32
   1586c:	pop	{pc}		; (ldr pc, [sp], #4)
   15870:	mov	r0, #8
   15874:	mvn	r3, #-2147483648	; 0x80000000
   15878:	add	r1, sp, #36	; 0x24
   1587c:	str	r0, [sp]
   15880:	mov	r0, #0
   15884:	bl	17868 <__assert_fail@plt+0x6960>
   15888:	ldrd	r2, [r4, #8]
   1588c:	mov	r5, r0
   15890:	str	r0, [r4]
   15894:	strd	r2, [r0]
   15898:	b	15770 <__assert_fail@plt+0x4868>
   1589c:	muleq	r3, ip, r3
   158a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   158a4:	mov	r4, #0
   158a8:	mov	r5, #0
   158ac:	strd	r6, [sp, #8]
   158b0:	cmp	r1, #10
   158b4:	str	lr, [sp, #16]
   158b8:	sub	sp, sp, #100	; 0x64
   158bc:	strd	r4, [sp, #48]	; 0x30
   158c0:	beq	15908 <__assert_fail@plt+0x4a00>
   158c4:	mov	r3, sp
   158c8:	strd	r4, [sp, #8]
   158cc:	str	r1, [sp, #48]	; 0x30
   158d0:	mov	r1, r2
   158d4:	mvn	r2, #0
   158d8:	ldrd	r6, [sp, #48]	; 0x30
   158dc:	strd	r6, [sp]
   158e0:	strd	r4, [sp, #16]
   158e4:	strd	r4, [sp, #24]
   158e8:	strd	r4, [sp, #32]
   158ec:	strd	r4, [sp, #40]	; 0x28
   158f0:	bl	14f48 <__assert_fail@plt+0x4040>
   158f4:	add	sp, sp, #100	; 0x64
   158f8:	ldrd	r4, [sp]
   158fc:	ldrd	r6, [sp, #8]
   15900:	add	sp, sp, #16
   15904:	pop	{pc}		; (ldr pc, [sp], #4)
   15908:	bl	10efc <abort@plt>
   1590c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15910:	mov	r4, #0
   15914:	mov	r5, #0
   15918:	strd	r6, [sp, #8]
   1591c:	cmp	r1, #10
   15920:	str	lr, [sp, #16]
   15924:	sub	sp, sp, #100	; 0x64
   15928:	strd	r4, [sp, #48]	; 0x30
   1592c:	beq	15978 <__assert_fail@plt+0x4a70>
   15930:	mov	ip, r2
   15934:	mov	r2, r3
   15938:	strd	r4, [sp, #8]
   1593c:	str	r1, [sp, #48]	; 0x30
   15940:	mov	r3, sp
   15944:	mov	r1, ip
   15948:	ldrd	r6, [sp, #48]	; 0x30
   1594c:	strd	r6, [sp]
   15950:	strd	r4, [sp, #16]
   15954:	strd	r4, [sp, #24]
   15958:	strd	r4, [sp, #32]
   1595c:	strd	r4, [sp, #40]	; 0x28
   15960:	bl	14f48 <__assert_fail@plt+0x4040>
   15964:	add	sp, sp, #100	; 0x64
   15968:	ldrd	r4, [sp]
   1596c:	ldrd	r6, [sp, #8]
   15970:	add	sp, sp, #16
   15974:	pop	{pc}		; (ldr pc, [sp], #4)
   15978:	bl	10efc <abort@plt>
   1597c:	mov	r2, #0
   15980:	mov	r3, #0
   15984:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15988:	strd	r6, [sp, #8]
   1598c:	cmp	r0, #10
   15990:	strd	r8, [sp, #16]
   15994:	strd	sl, [sp, #24]
   15998:	str	lr, [sp, #32]
   1599c:	sub	sp, sp, #124	; 0x7c
   159a0:	strd	r2, [sp, #72]	; 0x48
   159a4:	strd	r2, [sp, #80]	; 0x50
   159a8:	strd	r2, [sp, #88]	; 0x58
   159ac:	strd	r2, [sp, #96]	; 0x60
   159b0:	strd	r2, [sp, #104]	; 0x68
   159b4:	strd	r2, [sp, #112]	; 0x70
   159b8:	beq	15b5c <__assert_fail@plt+0x4c54>
   159bc:	mov	r6, r1
   159c0:	movw	r4, #41200	; 0xa0f0
   159c4:	movt	r4, #2
   159c8:	str	r0, [sp, #72]	; 0x48
   159cc:	ldrd	r0, [sp, #72]	; 0x48
   159d0:	strd	r0, [sp, #24]
   159d4:	strd	r2, [sp, #32]
   159d8:	strd	r2, [sp, #40]	; 0x28
   159dc:	strd	r2, [sp, #48]	; 0x30
   159e0:	strd	r2, [sp, #56]	; 0x38
   159e4:	strd	r2, [sp, #64]	; 0x40
   159e8:	bl	10e30 <__errno_location@plt>
   159ec:	mov	r8, r0
   159f0:	ldr	r5, [r4]
   159f4:	ldr	r2, [r4, #4]
   159f8:	ldr	r9, [r0]
   159fc:	cmp	r2, #0
   15a00:	bgt	15a5c <__assert_fail@plt+0x4b54>
   15a04:	add	r3, r4, #8
   15a08:	str	r2, [sp, #72]	; 0x48
   15a0c:	rsb	r2, r2, #1
   15a10:	cmp	r5, r3
   15a14:	beq	15b30 <__assert_fail@plt+0x4c28>
   15a18:	mov	r3, #8
   15a1c:	mov	r0, r5
   15a20:	add	r1, sp, #72	; 0x48
   15a24:	str	r3, [sp]
   15a28:	mvn	r3, #-2147483648	; 0x80000000
   15a2c:	bl	17868 <__assert_fail@plt+0x6960>
   15a30:	mov	r5, r0
   15a34:	str	r0, [r4]
   15a38:	ldr	r0, [r4, #4]
   15a3c:	mov	r1, #0
   15a40:	ldr	r2, [sp, #72]	; 0x48
   15a44:	sub	r2, r2, r0
   15a48:	add	r0, r5, r0, lsl #3
   15a4c:	lsl	r2, r2, #3
   15a50:	bl	10e48 <memset@plt>
   15a54:	ldr	r3, [sp, #72]	; 0x48
   15a58:	str	r3, [r4, #4]
   15a5c:	ldr	sl, [r5]
   15a60:	add	r0, sp, #32
   15a64:	mvn	r3, #0
   15a68:	mov	r2, r6
   15a6c:	ldr	r7, [sp, #28]
   15a70:	ldr	r4, [r5, #4]
   15a74:	mov	r1, sl
   15a78:	str	r0, [sp, #8]
   15a7c:	ldr	lr, [sp, #24]
   15a80:	orr	r7, r7, #1
   15a84:	ldr	ip, [sp, #64]	; 0x40
   15a88:	mov	r0, r4
   15a8c:	ldr	fp, [sp, #68]	; 0x44
   15a90:	str	lr, [sp]
   15a94:	str	r7, [sp, #4]
   15a98:	str	ip, [sp, #12]
   15a9c:	str	fp, [sp, #16]
   15aa0:	bl	1355c <__assert_fail@plt+0x2654>
   15aa4:	cmp	sl, r0
   15aa8:	bhi	15b0c <__assert_fail@plt+0x4c04>
   15aac:	add	sl, r0, #1
   15ab0:	movw	r3, #8852	; 0x2294
   15ab4:	movt	r3, #3
   15ab8:	cmp	r4, r3
   15abc:	str	sl, [r5]
   15ac0:	beq	15acc <__assert_fail@plt+0x4bc4>
   15ac4:	mov	r0, r4
   15ac8:	bl	18cec <__assert_fail@plt+0x7de4>
   15acc:	mov	r0, sl
   15ad0:	bl	175c4 <__assert_fail@plt+0x66bc>
   15ad4:	ldr	r3, [sp, #24]
   15ad8:	mov	r2, r6
   15adc:	mov	r1, sl
   15ae0:	mov	r4, r0
   15ae4:	ldr	lr, [sp, #64]	; 0x40
   15ae8:	ldr	ip, [sp, #68]	; 0x44
   15aec:	str	r0, [r5, #4]
   15af0:	add	r5, sp, #32
   15af4:	stm	sp, {r3, r7}
   15af8:	mvn	r3, #0
   15afc:	str	r5, [sp, #8]
   15b00:	str	lr, [sp, #12]
   15b04:	str	ip, [sp, #16]
   15b08:	bl	1355c <__assert_fail@plt+0x2654>
   15b0c:	mov	r0, r4
   15b10:	str	r9, [r8]
   15b14:	add	sp, sp, #124	; 0x7c
   15b18:	ldrd	r4, [sp]
   15b1c:	ldrd	r6, [sp, #8]
   15b20:	ldrd	r8, [sp, #16]
   15b24:	ldrd	sl, [sp, #24]
   15b28:	add	sp, sp, #32
   15b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b30:	mov	r0, #8
   15b34:	mvn	r3, #-2147483648	; 0x80000000
   15b38:	add	r1, sp, #72	; 0x48
   15b3c:	str	r0, [sp]
   15b40:	mov	r0, #0
   15b44:	bl	17868 <__assert_fail@plt+0x6960>
   15b48:	ldrd	r2, [r4, #8]
   15b4c:	mov	r5, r0
   15b50:	str	r0, [r4]
   15b54:	strd	r2, [r0]
   15b58:	b	15a38 <__assert_fail@plt+0x4b30>
   15b5c:	bl	10efc <abort@plt>
   15b60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b64:	cmp	r0, #10
   15b68:	strd	r6, [sp, #8]
   15b6c:	mov	r6, #0
   15b70:	mov	r7, #0
   15b74:	strd	r8, [sp, #16]
   15b78:	strd	sl, [sp, #24]
   15b7c:	str	lr, [sp, #32]
   15b80:	sub	sp, sp, #124	; 0x7c
   15b84:	strd	r6, [sp, #72]	; 0x48
   15b88:	strd	r6, [sp, #80]	; 0x50
   15b8c:	strd	r6, [sp, #88]	; 0x58
   15b90:	strd	r6, [sp, #96]	; 0x60
   15b94:	strd	r6, [sp, #104]	; 0x68
   15b98:	strd	r6, [sp, #112]	; 0x70
   15b9c:	beq	15d48 <__assert_fail@plt+0x4e40>
   15ba0:	mov	sl, r2
   15ba4:	movw	r5, #41200	; 0xa0f0
   15ba8:	movt	r5, #2
   15bac:	str	r0, [sp, #72]	; 0x48
   15bb0:	mov	r9, r1
   15bb4:	ldrd	r2, [sp, #72]	; 0x48
   15bb8:	strd	r2, [sp, #24]
   15bbc:	strd	r6, [sp, #32]
   15bc0:	strd	r6, [sp, #40]	; 0x28
   15bc4:	strd	r6, [sp, #48]	; 0x30
   15bc8:	strd	r6, [sp, #56]	; 0x38
   15bcc:	strd	r6, [sp, #64]	; 0x40
   15bd0:	bl	10e30 <__errno_location@plt>
   15bd4:	mov	r7, r0
   15bd8:	ldr	r4, [r5]
   15bdc:	ldr	r2, [r5, #4]
   15be0:	ldr	fp, [r0]
   15be4:	cmp	r2, #0
   15be8:	bgt	15c44 <__assert_fail@plt+0x4d3c>
   15bec:	add	r3, r5, #8
   15bf0:	str	r2, [sp, #72]	; 0x48
   15bf4:	rsb	r2, r2, #1
   15bf8:	cmp	r4, r3
   15bfc:	beq	15d1c <__assert_fail@plt+0x4e14>
   15c00:	mov	r3, #8
   15c04:	mov	r0, r4
   15c08:	add	r1, sp, #72	; 0x48
   15c0c:	str	r3, [sp]
   15c10:	mvn	r3, #-2147483648	; 0x80000000
   15c14:	bl	17868 <__assert_fail@plt+0x6960>
   15c18:	mov	r4, r0
   15c1c:	str	r0, [r5]
   15c20:	ldr	r0, [r5, #4]
   15c24:	mov	r1, #0
   15c28:	ldr	r2, [sp, #72]	; 0x48
   15c2c:	sub	r2, r2, r0
   15c30:	add	r0, r4, r0, lsl #3
   15c34:	lsl	r2, r2, #3
   15c38:	bl	10e48 <memset@plt>
   15c3c:	ldr	r3, [sp, #72]	; 0x48
   15c40:	str	r3, [r5, #4]
   15c44:	ldr	ip, [sp, #24]
   15c48:	add	r0, sp, #32
   15c4c:	mov	r3, sl
   15c50:	mov	r2, r9
   15c54:	ldr	r6, [sp, #28]
   15c58:	ldr	r8, [r4]
   15c5c:	ldr	r5, [r4, #4]
   15c60:	str	ip, [sp]
   15c64:	orr	r6, r6, #1
   15c68:	ldr	ip, [sp, #64]	; 0x40
   15c6c:	mov	r1, r8
   15c70:	str	r6, [sp, #4]
   15c74:	ldr	lr, [sp, #68]	; 0x44
   15c78:	str	r0, [sp, #8]
   15c7c:	mov	r0, r5
   15c80:	str	ip, [sp, #12]
   15c84:	str	lr, [sp, #16]
   15c88:	bl	1355c <__assert_fail@plt+0x2654>
   15c8c:	cmp	r8, r0
   15c90:	bhi	15cf8 <__assert_fail@plt+0x4df0>
   15c94:	add	r8, r0, #1
   15c98:	movw	r3, #8852	; 0x2294
   15c9c:	movt	r3, #3
   15ca0:	cmp	r5, r3
   15ca4:	str	r8, [r4]
   15ca8:	beq	15cb4 <__assert_fail@plt+0x4dac>
   15cac:	mov	r0, r5
   15cb0:	bl	18cec <__assert_fail@plt+0x7de4>
   15cb4:	mov	r0, r8
   15cb8:	bl	175c4 <__assert_fail@plt+0x66bc>
   15cbc:	ldr	lr, [sp, #24]
   15cc0:	mov	r1, r8
   15cc4:	mov	r3, sl
   15cc8:	mov	r2, r9
   15ccc:	mov	r5, r0
   15cd0:	ldr	r8, [sp, #64]	; 0x40
   15cd4:	ldr	ip, [sp, #68]	; 0x44
   15cd8:	str	r0, [r4, #4]
   15cdc:	str	lr, [sp]
   15ce0:	add	lr, sp, #32
   15ce4:	str	r6, [sp, #4]
   15ce8:	str	lr, [sp, #8]
   15cec:	str	r8, [sp, #12]
   15cf0:	str	ip, [sp, #16]
   15cf4:	bl	1355c <__assert_fail@plt+0x2654>
   15cf8:	mov	r0, r5
   15cfc:	str	fp, [r7]
   15d00:	add	sp, sp, #124	; 0x7c
   15d04:	ldrd	r4, [sp]
   15d08:	ldrd	r6, [sp, #8]
   15d0c:	ldrd	r8, [sp, #16]
   15d10:	ldrd	sl, [sp, #24]
   15d14:	add	sp, sp, #32
   15d18:	pop	{pc}		; (ldr pc, [sp], #4)
   15d1c:	mov	r0, #8
   15d20:	mvn	r3, #-2147483648	; 0x80000000
   15d24:	add	r1, sp, #72	; 0x48
   15d28:	str	r0, [sp]
   15d2c:	mov	r0, #0
   15d30:	bl	17868 <__assert_fail@plt+0x6960>
   15d34:	ldrd	r2, [r5, #8]
   15d38:	mov	r4, r0
   15d3c:	str	r0, [r5]
   15d40:	strd	r2, [r0]
   15d44:	b	15c20 <__assert_fail@plt+0x4d18>
   15d48:	bl	10efc <abort@plt>
   15d4c:	ldr	r3, [pc, #492]	; 15f40 <__assert_fail@plt+0x5038>
   15d50:	lsr	ip, r2, #5
   15d54:	and	r2, r2, #31
   15d58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d5c:	movw	r5, #41200	; 0xa0f0
   15d60:	movt	r5, #2
   15d64:	strd	r6, [sp, #8]
   15d68:	strd	r8, [sp, #16]
   15d6c:	strd	sl, [sp, #24]
   15d70:	mov	sl, r0
   15d74:	mov	fp, r1
   15d78:	ldrd	r0, [r3]
   15d7c:	str	lr, [sp, #32]
   15d80:	sub	sp, sp, #92	; 0x5c
   15d84:	ldrd	r8, [r3, #8]
   15d88:	add	r6, sp, #48	; 0x30
   15d8c:	strd	r0, [sp, #40]	; 0x28
   15d90:	ldrd	r0, [r3, #16]
   15d94:	strd	r8, [sp, #48]	; 0x30
   15d98:	ldrd	r8, [r3, #24]
   15d9c:	strd	r0, [sp, #56]	; 0x38
   15da0:	ldrd	r0, [r3, #32]
   15da4:	strd	r8, [sp, #64]	; 0x40
   15da8:	ldrd	r8, [r3, #40]	; 0x28
   15dac:	strd	r0, [sp, #72]	; 0x48
   15db0:	strd	r8, [sp, #80]	; 0x50
   15db4:	ldr	r3, [r6, ip, lsl #2]
   15db8:	mvn	r1, r3, lsr r2
   15dbc:	and	r1, r1, #1
   15dc0:	eor	r2, r3, r1, lsl r2
   15dc4:	str	r2, [r6, ip, lsl #2]
   15dc8:	bl	10e30 <__errno_location@plt>
   15dcc:	ldr	r3, [r0]
   15dd0:	mov	r8, r0
   15dd4:	ldr	r2, [r5, #4]
   15dd8:	ldr	r4, [r5]
   15ddc:	str	r3, [sp, #28]
   15de0:	cmp	r2, #0
   15de4:	bgt	15e40 <__assert_fail@plt+0x4f38>
   15de8:	add	r3, r5, #8
   15dec:	str	r2, [sp, #36]	; 0x24
   15df0:	rsb	r2, r2, #1
   15df4:	cmp	r4, r3
   15df8:	beq	15f14 <__assert_fail@plt+0x500c>
   15dfc:	mov	r1, #8
   15e00:	mov	r0, r4
   15e04:	mvn	r3, #-2147483648	; 0x80000000
   15e08:	str	r1, [sp]
   15e0c:	add	r1, sp, #36	; 0x24
   15e10:	bl	17868 <__assert_fail@plt+0x6960>
   15e14:	mov	r4, r0
   15e18:	str	r0, [r5]
   15e1c:	ldr	r0, [r5, #4]
   15e20:	mov	r1, #0
   15e24:	ldr	r2, [sp, #36]	; 0x24
   15e28:	sub	r2, r2, r0
   15e2c:	add	r0, r4, r0, lsl #3
   15e30:	lsl	r2, r2, #3
   15e34:	bl	10e48 <memset@plt>
   15e38:	ldr	r3, [sp, #36]	; 0x24
   15e3c:	str	r3, [r5, #4]
   15e40:	ldr	ip, [sp, #40]	; 0x28
   15e44:	mov	r3, fp
   15e48:	mov	r2, sl
   15e4c:	ldr	r7, [sp, #44]	; 0x2c
   15e50:	ldr	r9, [r4]
   15e54:	ldr	r5, [r4, #4]
   15e58:	str	ip, [sp]
   15e5c:	orr	r7, r7, #1
   15e60:	ldr	ip, [sp, #80]	; 0x50
   15e64:	mov	r1, r9
   15e68:	str	r7, [sp, #4]
   15e6c:	ldr	lr, [sp, #84]	; 0x54
   15e70:	mov	r0, r5
   15e74:	str	r6, [sp, #8]
   15e78:	str	ip, [sp, #12]
   15e7c:	str	lr, [sp, #16]
   15e80:	bl	1355c <__assert_fail@plt+0x2654>
   15e84:	cmp	r9, r0
   15e88:	bhi	15eec <__assert_fail@plt+0x4fe4>
   15e8c:	add	r9, r0, #1
   15e90:	movw	r3, #8852	; 0x2294
   15e94:	movt	r3, #3
   15e98:	cmp	r5, r3
   15e9c:	str	r9, [r4]
   15ea0:	beq	15eac <__assert_fail@plt+0x4fa4>
   15ea4:	mov	r0, r5
   15ea8:	bl	18cec <__assert_fail@plt+0x7de4>
   15eac:	mov	r0, r9
   15eb0:	bl	175c4 <__assert_fail@plt+0x66bc>
   15eb4:	mov	r1, r9
   15eb8:	ldr	ip, [sp, #40]	; 0x28
   15ebc:	mov	r3, fp
   15ec0:	mov	r2, sl
   15ec4:	mov	r5, r0
   15ec8:	ldr	r9, [sp, #80]	; 0x50
   15ecc:	ldr	lr, [sp, #84]	; 0x54
   15ed0:	str	r0, [r4, #4]
   15ed4:	str	ip, [sp]
   15ed8:	str	r7, [sp, #4]
   15edc:	str	r6, [sp, #8]
   15ee0:	str	r9, [sp, #12]
   15ee4:	str	lr, [sp, #16]
   15ee8:	bl	1355c <__assert_fail@plt+0x2654>
   15eec:	ldr	r3, [sp, #28]
   15ef0:	mov	r0, r5
   15ef4:	str	r3, [r8]
   15ef8:	add	sp, sp, #92	; 0x5c
   15efc:	ldrd	r4, [sp]
   15f00:	ldrd	r6, [sp, #8]
   15f04:	ldrd	r8, [sp, #16]
   15f08:	ldrd	sl, [sp, #24]
   15f0c:	add	sp, sp, #32
   15f10:	pop	{pc}		; (ldr pc, [sp], #4)
   15f14:	mov	r0, #8
   15f18:	mvn	r3, #-2147483648	; 0x80000000
   15f1c:	add	r1, sp, #36	; 0x24
   15f20:	str	r0, [sp]
   15f24:	mov	r0, #0
   15f28:	bl	17868 <__assert_fail@plt+0x6960>
   15f2c:	ldrd	r2, [r5, #8]
   15f30:	mov	r4, r0
   15f34:	str	r0, [r5]
   15f38:	strd	r2, [r0]
   15f3c:	b	15e1c <__assert_fail@plt+0x4f14>
   15f40:	muleq	r3, r4, r3
   15f44:	ldr	ip, [pc, #476]	; 16128 <__assert_fail@plt+0x5220>
   15f48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15f4c:	movw	r4, #41200	; 0xa0f0
   15f50:	movt	r4, #2
   15f54:	ldrd	r2, [ip, #8]
   15f58:	strd	r6, [sp, #8]
   15f5c:	lsr	r7, r1, #5
   15f60:	mov	r6, r0
   15f64:	strd	r8, [sp, #16]
   15f68:	str	lr, [sp, #32]
   15f6c:	and	lr, r1, #31
   15f70:	ldrd	r0, [ip]
   15f74:	strd	sl, [sp, #24]
   15f78:	sub	sp, sp, #84	; 0x54
   15f7c:	add	r5, sp, #40	; 0x28
   15f80:	strd	r0, [sp, #32]
   15f84:	strd	r2, [sp, #40]	; 0x28
   15f88:	ldrd	r0, [ip, #16]
   15f8c:	ldrd	r2, [ip, #24]
   15f90:	strd	r0, [sp, #48]	; 0x30
   15f94:	ldrd	r0, [ip, #32]
   15f98:	strd	r2, [sp, #56]	; 0x38
   15f9c:	ldrd	r2, [ip, #40]	; 0x28
   15fa0:	strd	r0, [sp, #64]	; 0x40
   15fa4:	strd	r2, [sp, #72]	; 0x48
   15fa8:	ldr	r1, [r5, r7, lsl #2]
   15fac:	mvn	r3, r1, lsr lr
   15fb0:	and	r3, r3, #1
   15fb4:	eor	r1, r1, r3, lsl lr
   15fb8:	str	r1, [r5, r7, lsl #2]
   15fbc:	bl	10e30 <__errno_location@plt>
   15fc0:	mov	r9, r0
   15fc4:	ldr	sl, [r0]
   15fc8:	ldr	r2, [r4, #4]
   15fcc:	ldr	r7, [r4]
   15fd0:	cmp	r2, #0
   15fd4:	bgt	16030 <__assert_fail@plt+0x5128>
   15fd8:	add	r3, r4, #8
   15fdc:	str	r2, [sp, #28]
   15fe0:	rsb	r2, r2, #1
   15fe4:	cmp	r7, r3
   15fe8:	beq	160fc <__assert_fail@plt+0x51f4>
   15fec:	mov	r1, #8
   15ff0:	mov	r0, r7
   15ff4:	mvn	r3, #-2147483648	; 0x80000000
   15ff8:	str	r1, [sp]
   15ffc:	add	r1, sp, #28
   16000:	bl	17868 <__assert_fail@plt+0x6960>
   16004:	mov	r7, r0
   16008:	str	r0, [r4]
   1600c:	ldr	r0, [r4, #4]
   16010:	mov	r1, #0
   16014:	ldr	r2, [sp, #28]
   16018:	sub	r2, r2, r0
   1601c:	add	r0, r7, r0, lsl #3
   16020:	lsl	r2, r2, #3
   16024:	bl	10e48 <memset@plt>
   16028:	ldr	r3, [sp, #28]
   1602c:	str	r3, [r4, #4]
   16030:	ldr	ip, [sp, #32]
   16034:	mvn	r3, #0
   16038:	mov	r2, r6
   1603c:	ldr	r8, [sp, #36]	; 0x24
   16040:	ldr	fp, [r7]
   16044:	ldr	r4, [r7, #4]
   16048:	str	ip, [sp]
   1604c:	orr	r8, r8, #1
   16050:	ldr	ip, [sp, #72]	; 0x48
   16054:	mov	r1, fp
   16058:	str	r8, [sp, #4]
   1605c:	ldr	lr, [sp, #76]	; 0x4c
   16060:	mov	r0, r4
   16064:	str	r5, [sp, #8]
   16068:	str	ip, [sp, #12]
   1606c:	str	lr, [sp, #16]
   16070:	bl	1355c <__assert_fail@plt+0x2654>
   16074:	cmp	fp, r0
   16078:	bhi	160d8 <__assert_fail@plt+0x51d0>
   1607c:	add	fp, r0, #1
   16080:	movw	r3, #8852	; 0x2294
   16084:	movt	r3, #3
   16088:	cmp	r4, r3
   1608c:	str	fp, [r7]
   16090:	beq	1609c <__assert_fail@plt+0x5194>
   16094:	mov	r0, r4
   16098:	bl	18cec <__assert_fail@plt+0x7de4>
   1609c:	mov	r0, fp
   160a0:	bl	175c4 <__assert_fail@plt+0x66bc>
   160a4:	ldr	r3, [sp, #32]
   160a8:	mov	r2, r6
   160ac:	mov	r1, fp
   160b0:	mov	r4, r0
   160b4:	ldr	lr, [sp, #72]	; 0x48
   160b8:	ldr	ip, [sp, #76]	; 0x4c
   160bc:	str	r0, [r7, #4]
   160c0:	stm	sp, {r3, r8}
   160c4:	mvn	r3, #0
   160c8:	str	r5, [sp, #8]
   160cc:	str	lr, [sp, #12]
   160d0:	str	ip, [sp, #16]
   160d4:	bl	1355c <__assert_fail@plt+0x2654>
   160d8:	mov	r0, r4
   160dc:	str	sl, [r9]
   160e0:	add	sp, sp, #84	; 0x54
   160e4:	ldrd	r4, [sp]
   160e8:	ldrd	r6, [sp, #8]
   160ec:	ldrd	r8, [sp, #16]
   160f0:	ldrd	sl, [sp, #24]
   160f4:	add	sp, sp, #32
   160f8:	pop	{pc}		; (ldr pc, [sp], #4)
   160fc:	mov	r0, #8
   16100:	mvn	r3, #-2147483648	; 0x80000000
   16104:	add	r1, sp, #28
   16108:	str	r0, [sp]
   1610c:	mov	r0, #0
   16110:	bl	17868 <__assert_fail@plt+0x6960>
   16114:	ldrd	r2, [r4, #8]
   16118:	mov	r7, r0
   1611c:	str	r0, [r4]
   16120:	strd	r2, [r0]
   16124:	b	1600c <__assert_fail@plt+0x5104>
   16128:	muleq	r3, r4, r3
   1612c:	ldr	ip, [pc, #472]	; 1630c <__assert_fail@plt+0x5404>
   16130:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16134:	mov	r5, r0
   16138:	movw	r4, #41200	; 0xa0f0
   1613c:	movt	r4, #2
   16140:	ldrd	r2, [ip]
   16144:	ldrd	r0, [ip, #8]
   16148:	strd	r6, [sp, #8]
   1614c:	strd	r8, [sp, #16]
   16150:	strd	sl, [sp, #24]
   16154:	str	lr, [sp, #32]
   16158:	sub	sp, sp, #84	; 0x54
   1615c:	strd	r2, [sp, #32]
   16160:	strd	r0, [sp, #40]	; 0x28
   16164:	ldr	r6, [sp, #44]	; 0x2c
   16168:	ldrd	r2, [ip, #16]
   1616c:	ldrd	r0, [ip, #24]
   16170:	mvn	lr, r6
   16174:	and	lr, lr, #67108864	; 0x4000000
   16178:	eor	lr, lr, r6
   1617c:	ldrd	r6, [ip, #40]	; 0x28
   16180:	strd	r2, [sp, #48]	; 0x30
   16184:	ldrd	r2, [ip, #32]
   16188:	str	lr, [sp, #44]	; 0x2c
   1618c:	strd	r0, [sp, #56]	; 0x38
   16190:	strd	r2, [sp, #64]	; 0x40
   16194:	strd	r6, [sp, #72]	; 0x48
   16198:	bl	10e30 <__errno_location@plt>
   1619c:	mov	r8, r0
   161a0:	ldr	r9, [r0]
   161a4:	ldr	r2, [r4, #4]
   161a8:	ldr	r6, [r4]
   161ac:	cmp	r2, #0
   161b0:	bgt	1620c <__assert_fail@plt+0x5304>
   161b4:	add	r3, r4, #8
   161b8:	str	r2, [sp, #28]
   161bc:	rsb	r2, r2, #1
   161c0:	cmp	r6, r3
   161c4:	beq	162e0 <__assert_fail@plt+0x53d8>
   161c8:	mov	r1, #8
   161cc:	mov	r0, r6
   161d0:	mvn	r3, #-2147483648	; 0x80000000
   161d4:	str	r1, [sp]
   161d8:	add	r1, sp, #28
   161dc:	bl	17868 <__assert_fail@plt+0x6960>
   161e0:	mov	r6, r0
   161e4:	str	r0, [r4]
   161e8:	ldr	r0, [r4, #4]
   161ec:	mov	r1, #0
   161f0:	ldr	r2, [sp, #28]
   161f4:	sub	r2, r2, r0
   161f8:	add	r0, r6, r0, lsl #3
   161fc:	lsl	r2, r2, #3
   16200:	bl	10e48 <memset@plt>
   16204:	ldr	r3, [sp, #28]
   16208:	str	r3, [r4, #4]
   1620c:	ldr	sl, [r6]
   16210:	add	r0, sp, #40	; 0x28
   16214:	mvn	r3, #0
   16218:	mov	r2, r5
   1621c:	ldr	r7, [sp, #36]	; 0x24
   16220:	ldr	r4, [r6, #4]
   16224:	mov	r1, sl
   16228:	str	r0, [sp, #8]
   1622c:	ldr	lr, [sp, #32]
   16230:	orr	r7, r7, #1
   16234:	ldr	ip, [sp, #72]	; 0x48
   16238:	mov	r0, r4
   1623c:	ldr	fp, [sp, #76]	; 0x4c
   16240:	str	lr, [sp]
   16244:	str	r7, [sp, #4]
   16248:	str	ip, [sp, #12]
   1624c:	str	fp, [sp, #16]
   16250:	bl	1355c <__assert_fail@plt+0x2654>
   16254:	cmp	sl, r0
   16258:	bhi	162bc <__assert_fail@plt+0x53b4>
   1625c:	add	sl, r0, #1
   16260:	movw	r3, #8852	; 0x2294
   16264:	movt	r3, #3
   16268:	cmp	r4, r3
   1626c:	str	sl, [r6]
   16270:	beq	1627c <__assert_fail@plt+0x5374>
   16274:	mov	r0, r4
   16278:	bl	18cec <__assert_fail@plt+0x7de4>
   1627c:	mov	r0, sl
   16280:	bl	175c4 <__assert_fail@plt+0x66bc>
   16284:	ldr	r3, [sp, #32]
   16288:	mov	r2, r5
   1628c:	add	r5, sp, #40	; 0x28
   16290:	mov	r1, sl
   16294:	mov	r4, r0
   16298:	ldr	lr, [sp, #72]	; 0x48
   1629c:	ldr	ip, [sp, #76]	; 0x4c
   162a0:	str	r0, [r6, #4]
   162a4:	stm	sp, {r3, r7}
   162a8:	mvn	r3, #0
   162ac:	str	r5, [sp, #8]
   162b0:	str	lr, [sp, #12]
   162b4:	str	ip, [sp, #16]
   162b8:	bl	1355c <__assert_fail@plt+0x2654>
   162bc:	mov	r0, r4
   162c0:	str	r9, [r8]
   162c4:	add	sp, sp, #84	; 0x54
   162c8:	ldrd	r4, [sp]
   162cc:	ldrd	r6, [sp, #8]
   162d0:	ldrd	r8, [sp, #16]
   162d4:	ldrd	sl, [sp, #24]
   162d8:	add	sp, sp, #32
   162dc:	pop	{pc}		; (ldr pc, [sp], #4)
   162e0:	mov	r0, #8
   162e4:	mvn	r3, #-2147483648	; 0x80000000
   162e8:	add	r1, sp, #28
   162ec:	str	r0, [sp]
   162f0:	mov	r0, #0
   162f4:	bl	17868 <__assert_fail@plt+0x6960>
   162f8:	ldrd	r2, [r4, #8]
   162fc:	mov	r6, r0
   16300:	str	r0, [r4]
   16304:	strd	r2, [r0]
   16308:	b	161e8 <__assert_fail@plt+0x52e0>
   1630c:	muleq	r3, r4, r3
   16310:	ldr	ip, [pc, #480]	; 164f8 <__assert_fail@plt+0x55f0>
   16314:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16318:	mov	r5, r0
   1631c:	movw	r4, #41200	; 0xa0f0
   16320:	movt	r4, #2
   16324:	ldrd	r2, [ip]
   16328:	strd	r6, [sp, #8]
   1632c:	mov	r6, r1
   16330:	ldrd	r0, [ip, #8]
   16334:	strd	r8, [sp, #16]
   16338:	strd	sl, [sp, #24]
   1633c:	str	lr, [sp, #32]
   16340:	sub	sp, sp, #84	; 0x54
   16344:	ldrd	r8, [ip, #40]	; 0x28
   16348:	strd	r2, [sp, #32]
   1634c:	strd	r0, [sp, #40]	; 0x28
   16350:	ldrd	r2, [ip, #16]
   16354:	ldr	r7, [sp, #44]	; 0x2c
   16358:	ldrd	r0, [ip, #24]
   1635c:	strd	r2, [sp, #48]	; 0x30
   16360:	ldrd	r2, [ip, #32]
   16364:	mvn	lr, r7
   16368:	and	lr, lr, #67108864	; 0x4000000
   1636c:	eor	lr, lr, r7
   16370:	str	lr, [sp, #44]	; 0x2c
   16374:	strd	r0, [sp, #56]	; 0x38
   16378:	strd	r2, [sp, #64]	; 0x40
   1637c:	strd	r8, [sp, #72]	; 0x48
   16380:	bl	10e30 <__errno_location@plt>
   16384:	mov	r9, r0
   16388:	ldr	sl, [r0]
   1638c:	ldr	r2, [r4, #4]
   16390:	ldr	r7, [r4]
   16394:	cmp	r2, #0
   16398:	bgt	163f4 <__assert_fail@plt+0x54ec>
   1639c:	add	r3, r4, #8
   163a0:	str	r2, [sp, #28]
   163a4:	rsb	r2, r2, #1
   163a8:	cmp	r7, r3
   163ac:	beq	164cc <__assert_fail@plt+0x55c4>
   163b0:	mov	r1, #8
   163b4:	mov	r0, r7
   163b8:	mvn	r3, #-2147483648	; 0x80000000
   163bc:	str	r1, [sp]
   163c0:	add	r1, sp, #28
   163c4:	bl	17868 <__assert_fail@plt+0x6960>
   163c8:	mov	r7, r0
   163cc:	str	r0, [r4]
   163d0:	ldr	r0, [r4, #4]
   163d4:	mov	r1, #0
   163d8:	ldr	r2, [sp, #28]
   163dc:	sub	r2, r2, r0
   163e0:	add	r0, r7, r0, lsl #3
   163e4:	lsl	r2, r2, #3
   163e8:	bl	10e48 <memset@plt>
   163ec:	ldr	r3, [sp, #28]
   163f0:	str	r3, [r4, #4]
   163f4:	ldr	ip, [sp, #32]
   163f8:	add	r0, sp, #40	; 0x28
   163fc:	mov	r3, r6
   16400:	mov	r2, r5
   16404:	ldr	r8, [sp, #36]	; 0x24
   16408:	ldr	fp, [r7]
   1640c:	ldr	r4, [r7, #4]
   16410:	str	ip, [sp]
   16414:	orr	r8, r8, #1
   16418:	ldr	ip, [sp, #72]	; 0x48
   1641c:	mov	r1, fp
   16420:	str	r8, [sp, #4]
   16424:	ldr	lr, [sp, #76]	; 0x4c
   16428:	str	r0, [sp, #8]
   1642c:	mov	r0, r4
   16430:	str	ip, [sp, #12]
   16434:	str	lr, [sp, #16]
   16438:	bl	1355c <__assert_fail@plt+0x2654>
   1643c:	cmp	fp, r0
   16440:	bhi	164a8 <__assert_fail@plt+0x55a0>
   16444:	add	fp, r0, #1
   16448:	movw	r3, #8852	; 0x2294
   1644c:	movt	r3, #3
   16450:	cmp	r4, r3
   16454:	str	fp, [r7]
   16458:	beq	16464 <__assert_fail@plt+0x555c>
   1645c:	mov	r0, r4
   16460:	bl	18cec <__assert_fail@plt+0x7de4>
   16464:	mov	r0, fp
   16468:	bl	175c4 <__assert_fail@plt+0x66bc>
   1646c:	ldr	lr, [sp, #32]
   16470:	mov	r2, r5
   16474:	mov	r3, r6
   16478:	mov	r1, fp
   1647c:	mov	r4, r0
   16480:	ldr	r5, [sp, #72]	; 0x48
   16484:	ldr	ip, [sp, #76]	; 0x4c
   16488:	str	r0, [r7, #4]
   1648c:	str	lr, [sp]
   16490:	add	lr, sp, #40	; 0x28
   16494:	str	r8, [sp, #4]
   16498:	str	lr, [sp, #8]
   1649c:	str	r5, [sp, #12]
   164a0:	str	ip, [sp, #16]
   164a4:	bl	1355c <__assert_fail@plt+0x2654>
   164a8:	mov	r0, r4
   164ac:	str	sl, [r9]
   164b0:	add	sp, sp, #84	; 0x54
   164b4:	ldrd	r4, [sp]
   164b8:	ldrd	r6, [sp, #8]
   164bc:	ldrd	r8, [sp, #16]
   164c0:	ldrd	sl, [sp, #24]
   164c4:	add	sp, sp, #32
   164c8:	pop	{pc}		; (ldr pc, [sp], #4)
   164cc:	mov	r0, #8
   164d0:	mvn	r3, #-2147483648	; 0x80000000
   164d4:	add	r1, sp, #28
   164d8:	str	r0, [sp]
   164dc:	mov	r0, #0
   164e0:	bl	17868 <__assert_fail@plt+0x6960>
   164e4:	ldrd	r2, [r4, #8]
   164e8:	mov	r7, r0
   164ec:	str	r0, [r4]
   164f0:	strd	r2, [r0]
   164f4:	b	163d0 <__assert_fail@plt+0x54c8>
   164f8:	muleq	r3, r4, r3
   164fc:	strd	r4, [sp, #-12]!
   16500:	mov	r4, #0
   16504:	mov	r5, #0
   16508:	str	lr, [sp, #8]
   1650c:	sub	sp, sp, #100	; 0x64
   16510:	cmp	r1, #10
   16514:	strd	r4, [sp]
   16518:	strd	r4, [sp, #8]
   1651c:	strd	r4, [sp, #16]
   16520:	strd	r4, [sp, #24]
   16524:	strd	r4, [sp, #32]
   16528:	strd	r4, [sp, #40]	; 0x28
   1652c:	beq	1655c <__assert_fail@plt+0x5654>
   16530:	mov	ip, #67108864	; 0x4000000
   16534:	mov	r3, sp
   16538:	str	r1, [sp]
   1653c:	mov	r1, r2
   16540:	mvn	r2, #0
   16544:	str	ip, [sp, #12]
   16548:	bl	14f48 <__assert_fail@plt+0x4040>
   1654c:	add	sp, sp, #100	; 0x64
   16550:	ldrd	r4, [sp]
   16554:	add	sp, sp, #8
   16558:	pop	{pc}		; (ldr pc, [sp], #4)
   1655c:	bl	10efc <abort@plt>
   16560:	ldr	ip, [pc, #156]	; 16604 <__assert_fail@plt+0x56fc>
   16564:	cmp	r2, #0
   16568:	cmpne	r1, #0
   1656c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16570:	strd	r6, [sp, #8]
   16574:	mov	r6, r2
   16578:	str	r8, [sp, #16]
   1657c:	mov	r8, r3
   16580:	strd	sl, [sp, #20]
   16584:	ldrd	r4, [ip]
   16588:	str	lr, [sp, #28]
   1658c:	sub	sp, sp, #48	; 0x30
   16590:	mov	lr, #10
   16594:	ldrd	r2, [ip, #8]
   16598:	ldrd	sl, [ip, #16]
   1659c:	strd	r4, [sp]
   165a0:	ldrd	r4, [ip, #32]
   165a4:	str	lr, [sp]
   165a8:	strd	r2, [sp, #8]
   165ac:	strd	sl, [sp, #16]
   165b0:	ldrd	r2, [ip, #24]
   165b4:	ldrd	sl, [ip, #40]	; 0x28
   165b8:	strd	r2, [sp, #24]
   165bc:	strd	r4, [sp, #32]
   165c0:	strd	sl, [sp, #40]	; 0x28
   165c4:	beq	16600 <__assert_fail@plt+0x56f8>
   165c8:	mov	r7, r1
   165cc:	mov	r3, sp
   165d0:	mov	r1, r8
   165d4:	mvn	r2, #0
   165d8:	str	r7, [sp, #40]	; 0x28
   165dc:	str	r6, [sp, #44]	; 0x2c
   165e0:	bl	14f48 <__assert_fail@plt+0x4040>
   165e4:	add	sp, sp, #48	; 0x30
   165e8:	ldrd	r4, [sp]
   165ec:	ldrd	r6, [sp, #8]
   165f0:	ldr	r8, [sp, #16]
   165f4:	ldrd	sl, [sp, #20]
   165f8:	add	sp, sp, #28
   165fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16600:	bl	10efc <abort@plt>
   16604:	muleq	r3, r4, r3
   16608:	ldr	ip, [pc, #156]	; 166ac <__assert_fail@plt+0x57a4>
   1660c:	cmp	r2, #0
   16610:	cmpne	r1, #0
   16614:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16618:	strd	r6, [sp, #8]
   1661c:	mov	r6, r2
   16620:	str	r8, [sp, #16]
   16624:	mov	r8, r3
   16628:	strd	sl, [sp, #20]
   1662c:	ldrd	r4, [ip]
   16630:	str	lr, [sp, #28]
   16634:	sub	sp, sp, #48	; 0x30
   16638:	mov	lr, #10
   1663c:	ldrd	r2, [ip, #8]
   16640:	ldrd	sl, [ip, #16]
   16644:	strd	r4, [sp]
   16648:	ldrd	r4, [ip, #32]
   1664c:	str	lr, [sp]
   16650:	strd	r2, [sp, #8]
   16654:	strd	sl, [sp, #16]
   16658:	ldrd	r2, [ip, #24]
   1665c:	ldrd	sl, [ip, #40]	; 0x28
   16660:	strd	r2, [sp, #24]
   16664:	strd	r4, [sp, #32]
   16668:	strd	sl, [sp, #40]	; 0x28
   1666c:	beq	166a8 <__assert_fail@plt+0x57a0>
   16670:	ldr	r2, [sp, #80]	; 0x50
   16674:	mov	r7, r1
   16678:	mov	r3, sp
   1667c:	mov	r1, r8
   16680:	str	r7, [sp, #40]	; 0x28
   16684:	str	r6, [sp, #44]	; 0x2c
   16688:	bl	14f48 <__assert_fail@plt+0x4040>
   1668c:	add	sp, sp, #48	; 0x30
   16690:	ldrd	r4, [sp]
   16694:	ldrd	r6, [sp, #8]
   16698:	ldr	r8, [sp, #16]
   1669c:	ldrd	sl, [sp, #20]
   166a0:	add	sp, sp, #28
   166a4:	pop	{pc}		; (ldr pc, [sp], #4)
   166a8:	bl	10efc <abort@plt>
   166ac:	muleq	r3, r4, r3
   166b0:	ldr	ip, [pc, #512]	; 168b8 <__assert_fail@plt+0x59b0>
   166b4:	cmp	r0, #0
   166b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166bc:	ldrd	r4, [ip, #16]
   166c0:	strd	r6, [sp, #8]
   166c4:	clz	r6, r1
   166c8:	mov	r7, r1
   166cc:	strd	r8, [sp, #16]
   166d0:	mov	r8, r0
   166d4:	lsr	r6, r6, #5
   166d8:	strd	sl, [sp, #24]
   166dc:	mov	fp, r2
   166e0:	mov	sl, #10
   166e4:	ldrd	r2, [ip]
   166e8:	moveq	r6, #1
   166ec:	str	lr, [sp, #32]
   166f0:	sub	sp, sp, #92	; 0x5c
   166f4:	cmp	r6, #0
   166f8:	ldrd	r0, [ip, #8]
   166fc:	strd	r2, [sp, #40]	; 0x28
   16700:	strd	r4, [sp, #56]	; 0x38
   16704:	ldrd	r2, [ip, #24]
   16708:	strd	r0, [sp, #48]	; 0x30
   1670c:	ldrd	r0, [ip, #32]
   16710:	str	sl, [sp, #40]	; 0x28
   16714:	ldrd	r4, [ip, #40]	; 0x28
   16718:	strd	r2, [sp, #64]	; 0x40
   1671c:	strd	r0, [sp, #72]	; 0x48
   16720:	strd	r4, [sp, #80]	; 0x50
   16724:	bne	168b4 <__assert_fail@plt+0x59ac>
   16728:	movw	r5, #41200	; 0xa0f0
   1672c:	movt	r5, #2
   16730:	str	r8, [sp, #80]	; 0x50
   16734:	str	r7, [sp, #84]	; 0x54
   16738:	bl	10e30 <__errno_location@plt>
   1673c:	ldr	r3, [r0]
   16740:	mov	r9, r0
   16744:	ldr	r2, [r5, #4]
   16748:	ldr	r4, [r5]
   1674c:	str	r3, [sp, #28]
   16750:	cmp	r2, #0
   16754:	movgt	r1, sl
   16758:	bgt	167c0 <__assert_fail@plt+0x58b8>
   1675c:	add	r3, r5, #8
   16760:	str	r2, [sp, #36]	; 0x24
   16764:	rsb	r2, r2, #1
   16768:	cmp	r4, r3
   1676c:	beq	16888 <__assert_fail@plt+0x5980>
   16770:	mov	r1, #8
   16774:	mov	r0, r4
   16778:	mvn	r3, #-2147483648	; 0x80000000
   1677c:	str	r1, [sp]
   16780:	add	r1, sp, #36	; 0x24
   16784:	bl	17868 <__assert_fail@plt+0x6960>
   16788:	mov	r4, r0
   1678c:	str	r0, [r5]
   16790:	ldr	r0, [r5, #4]
   16794:	mov	r1, #0
   16798:	ldr	r2, [sp, #36]	; 0x24
   1679c:	sub	r2, r2, r0
   167a0:	add	r0, r4, r0, lsl #3
   167a4:	lsl	r2, r2, #3
   167a8:	bl	10e48 <memset@plt>
   167ac:	ldr	r3, [sp, #36]	; 0x24
   167b0:	ldr	r1, [sp, #40]	; 0x28
   167b4:	ldr	r8, [sp, #80]	; 0x50
   167b8:	str	r3, [r5, #4]
   167bc:	ldr	r7, [sp, #84]	; 0x54
   167c0:	mvn	r3, #0
   167c4:	mov	r2, fp
   167c8:	ldr	r6, [sp, #44]	; 0x2c
   167cc:	ldr	sl, [r4]
   167d0:	ldr	r5, [r4, #4]
   167d4:	orr	r6, r6, #1
   167d8:	stm	sp, {r1, r6}
   167dc:	add	r1, sp, #48	; 0x30
   167e0:	str	r8, [sp, #12]
   167e4:	mov	r0, r5
   167e8:	str	r1, [sp, #8]
   167ec:	mov	r1, sl
   167f0:	str	r7, [sp, #16]
   167f4:	bl	1355c <__assert_fail@plt+0x2654>
   167f8:	cmp	sl, r0
   167fc:	bhi	16860 <__assert_fail@plt+0x5958>
   16800:	add	r7, r0, #1
   16804:	movw	r3, #8852	; 0x2294
   16808:	movt	r3, #3
   1680c:	cmp	r5, r3
   16810:	str	r7, [r4]
   16814:	beq	16820 <__assert_fail@plt+0x5918>
   16818:	mov	r0, r5
   1681c:	bl	18cec <__assert_fail@plt+0x7de4>
   16820:	mov	r0, r7
   16824:	bl	175c4 <__assert_fail@plt+0x66bc>
   16828:	ldr	r3, [sp, #40]	; 0x28
   1682c:	mov	r2, fp
   16830:	mov	r1, r7
   16834:	mov	r5, r0
   16838:	ldr	lr, [sp, #80]	; 0x50
   1683c:	ldr	ip, [sp, #84]	; 0x54
   16840:	str	r0, [r4, #4]
   16844:	add	r4, sp, #48	; 0x30
   16848:	stm	sp, {r3, r6}
   1684c:	mvn	r3, #0
   16850:	str	r4, [sp, #8]
   16854:	str	lr, [sp, #12]
   16858:	str	ip, [sp, #16]
   1685c:	bl	1355c <__assert_fail@plt+0x2654>
   16860:	ldr	r3, [sp, #28]
   16864:	mov	r0, r5
   16868:	str	r3, [r9]
   1686c:	add	sp, sp, #92	; 0x5c
   16870:	ldrd	r4, [sp]
   16874:	ldrd	r6, [sp, #8]
   16878:	ldrd	r8, [sp, #16]
   1687c:	ldrd	sl, [sp, #24]
   16880:	add	sp, sp, #32
   16884:	pop	{pc}		; (ldr pc, [sp], #4)
   16888:	mov	r1, #8
   1688c:	mvn	r3, #-2147483648	; 0x80000000
   16890:	mov	r0, r6
   16894:	str	r1, [sp]
   16898:	add	r1, sp, #36	; 0x24
   1689c:	bl	17868 <__assert_fail@plt+0x6960>
   168a0:	ldrd	r2, [r5, #8]
   168a4:	mov	r4, r0
   168a8:	str	r0, [r5]
   168ac:	strd	r2, [r0]
   168b0:	b	16790 <__assert_fail@plt+0x5888>
   168b4:	bl	10efc <abort@plt>
   168b8:	muleq	r3, r4, r3
   168bc:	ldr	ip, [pc, #536]	; 16adc <__assert_fail@plt+0x5bd4>
   168c0:	cmp	r0, #0
   168c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   168c8:	ldrd	r4, [ip, #16]
   168cc:	strd	r6, [sp, #8]
   168d0:	mov	r6, r1
   168d4:	mov	r7, r0
   168d8:	strd	r8, [sp, #16]
   168dc:	mov	r9, #10
   168e0:	strd	sl, [sp, #24]
   168e4:	mov	sl, r2
   168e8:	mov	fp, r3
   168ec:	str	lr, [sp, #32]
   168f0:	clz	lr, r1
   168f4:	sub	sp, sp, #92	; 0x5c
   168f8:	ldrd	r2, [ip]
   168fc:	lsr	lr, lr, #5
   16900:	moveq	lr, #1
   16904:	ldrd	r0, [ip, #8]
   16908:	cmp	lr, #0
   1690c:	strd	r4, [sp, #56]	; 0x38
   16910:	ldrd	r4, [ip, #40]	; 0x28
   16914:	str	lr, [sp, #28]
   16918:	strd	r2, [sp, #40]	; 0x28
   1691c:	ldrd	r2, [ip, #24]
   16920:	strd	r0, [sp, #48]	; 0x30
   16924:	ldrd	r0, [ip, #32]
   16928:	str	r9, [sp, #40]	; 0x28
   1692c:	strd	r2, [sp, #64]	; 0x40
   16930:	strd	r4, [sp, #80]	; 0x50
   16934:	strd	r0, [sp, #72]	; 0x48
   16938:	bne	16ad8 <__assert_fail@plt+0x5bd0>
   1693c:	movw	r5, #41200	; 0xa0f0
   16940:	movt	r5, #2
   16944:	str	r7, [sp, #80]	; 0x50
   16948:	str	r6, [sp, #84]	; 0x54
   1694c:	bl	10e30 <__errno_location@plt>
   16950:	ldr	r3, [r0]
   16954:	mov	r8, r0
   16958:	ldr	r2, [r5, #4]
   1695c:	ldr	r4, [r5]
   16960:	str	r3, [sp, #24]
   16964:	cmp	r2, #0
   16968:	movgt	r1, r9
   1696c:	bgt	169d4 <__assert_fail@plt+0x5acc>
   16970:	add	r3, r5, #8
   16974:	str	r2, [sp, #36]	; 0x24
   16978:	rsb	r2, r2, #1
   1697c:	cmp	r4, r3
   16980:	beq	16aac <__assert_fail@plt+0x5ba4>
   16984:	mov	r1, #8
   16988:	mov	r0, r4
   1698c:	mvn	r3, #-2147483648	; 0x80000000
   16990:	str	r1, [sp]
   16994:	add	r1, sp, #36	; 0x24
   16998:	bl	17868 <__assert_fail@plt+0x6960>
   1699c:	mov	r4, r0
   169a0:	str	r0, [r5]
   169a4:	ldr	r0, [r5, #4]
   169a8:	mov	r1, #0
   169ac:	ldr	r2, [sp, #36]	; 0x24
   169b0:	sub	r2, r2, r0
   169b4:	add	r0, r4, r0, lsl #3
   169b8:	lsl	r2, r2, #3
   169bc:	bl	10e48 <memset@plt>
   169c0:	ldr	r3, [sp, #36]	; 0x24
   169c4:	ldr	r1, [sp, #40]	; 0x28
   169c8:	ldr	r7, [sp, #80]	; 0x50
   169cc:	str	r3, [r5, #4]
   169d0:	ldr	r6, [sp, #84]	; 0x54
   169d4:	mov	r3, fp
   169d8:	mov	r2, sl
   169dc:	ldr	r0, [sp, #44]	; 0x2c
   169e0:	ldr	r9, [r4]
   169e4:	ldr	r5, [r4, #4]
   169e8:	orr	r0, r0, #1
   169ec:	str	r1, [sp]
   169f0:	add	r1, sp, #48	; 0x30
   169f4:	str	r0, [sp, #4]
   169f8:	str	r1, [sp, #8]
   169fc:	mov	r1, r9
   16a00:	str	r7, [sp, #12]
   16a04:	str	r6, [sp, #16]
   16a08:	str	r0, [sp, #28]
   16a0c:	mov	r0, r5
   16a10:	bl	1355c <__assert_fail@plt+0x2654>
   16a14:	cmp	r9, r0
   16a18:	bhi	16a84 <__assert_fail@plt+0x5b7c>
   16a1c:	add	r6, r0, #1
   16a20:	movw	r3, #8852	; 0x2294
   16a24:	movt	r3, #3
   16a28:	cmp	r5, r3
   16a2c:	str	r6, [r4]
   16a30:	beq	16a3c <__assert_fail@plt+0x5b34>
   16a34:	mov	r0, r5
   16a38:	bl	18cec <__assert_fail@plt+0x7de4>
   16a3c:	mov	r0, r6
   16a40:	bl	175c4 <__assert_fail@plt+0x66bc>
   16a44:	ldr	lr, [sp, #40]	; 0x28
   16a48:	mov	r1, r6
   16a4c:	mov	r3, fp
   16a50:	mov	r2, sl
   16a54:	mov	r5, r0
   16a58:	ldr	r6, [sp, #80]	; 0x50
   16a5c:	ldr	ip, [sp, #84]	; 0x54
   16a60:	str	r0, [r4, #4]
   16a64:	str	lr, [sp]
   16a68:	ldr	lr, [sp, #28]
   16a6c:	str	lr, [sp, #4]
   16a70:	add	lr, sp, #48	; 0x30
   16a74:	str	r6, [sp, #12]
   16a78:	str	lr, [sp, #8]
   16a7c:	str	ip, [sp, #16]
   16a80:	bl	1355c <__assert_fail@plt+0x2654>
   16a84:	ldr	r3, [sp, #24]
   16a88:	mov	r0, r5
   16a8c:	str	r3, [r8]
   16a90:	add	sp, sp, #92	; 0x5c
   16a94:	ldrd	r4, [sp]
   16a98:	ldrd	r6, [sp, #8]
   16a9c:	ldrd	r8, [sp, #16]
   16aa0:	ldrd	sl, [sp, #24]
   16aa4:	add	sp, sp, #32
   16aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   16aac:	mov	r1, #8
   16ab0:	mvn	r3, #-2147483648	; 0x80000000
   16ab4:	ldr	r0, [sp, #28]
   16ab8:	str	r1, [sp]
   16abc:	add	r1, sp, #36	; 0x24
   16ac0:	bl	17868 <__assert_fail@plt+0x6960>
   16ac4:	ldrd	r2, [r5, #8]
   16ac8:	mov	r4, r0
   16acc:	str	r0, [r5]
   16ad0:	strd	r2, [r0]
   16ad4:	b	169a4 <__assert_fail@plt+0x5a9c>
   16ad8:	bl	10efc <abort@plt>
   16adc:	muleq	r3, r4, r3
   16ae0:	ldr	r3, [pc]	; 16ae8 <__assert_fail@plt+0x5be0>
   16ae4:	b	14f48 <__assert_fail@plt+0x4040>
   16ae8:	andeq	sl, r2, r0, lsl #2
   16aec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16af0:	movw	r4, #41200	; 0xa0f0
   16af4:	movt	r4, #2
   16af8:	strd	r6, [sp, #8]
   16afc:	strd	r8, [sp, #16]
   16b00:	strd	sl, [sp, #24]
   16b04:	mov	sl, r0
   16b08:	mov	fp, r1
   16b0c:	str	lr, [sp, #32]
   16b10:	sub	sp, sp, #44	; 0x2c
   16b14:	bl	10e30 <__errno_location@plt>
   16b18:	ldr	r3, [r0]
   16b1c:	mov	r8, r0
   16b20:	ldr	r2, [r4, #4]
   16b24:	ldr	r5, [r4]
   16b28:	str	r3, [sp, #28]
   16b2c:	cmp	r2, #0
   16b30:	bgt	16b8c <__assert_fail@plt+0x5c84>
   16b34:	add	r3, r4, #8
   16b38:	str	r2, [sp, #36]	; 0x24
   16b3c:	rsb	r2, r2, #1
   16b40:	cmp	r5, r3
   16b44:	beq	16c68 <__assert_fail@plt+0x5d60>
   16b48:	mov	r1, #8
   16b4c:	mov	r0, r5
   16b50:	mvn	r3, #-2147483648	; 0x80000000
   16b54:	str	r1, [sp]
   16b58:	add	r1, sp, #36	; 0x24
   16b5c:	bl	17868 <__assert_fail@plt+0x6960>
   16b60:	mov	r5, r0
   16b64:	str	r0, [r4]
   16b68:	ldr	r0, [r4, #4]
   16b6c:	mov	r1, #0
   16b70:	ldr	r2, [sp, #36]	; 0x24
   16b74:	sub	r2, r2, r0
   16b78:	add	r0, r5, r0, lsl #3
   16b7c:	lsl	r2, r2, #3
   16b80:	bl	10e48 <memset@plt>
   16b84:	ldr	r3, [sp, #36]	; 0x24
   16b88:	str	r3, [r4, #4]
   16b8c:	ldr	ip, [r4, #16]
   16b90:	mov	r3, fp
   16b94:	mov	r2, sl
   16b98:	ldr	r7, [r4, #20]
   16b9c:	ldr	r0, [pc, #240]	; 16c94 <__assert_fail@plt+0x5d8c>
   16ba0:	ldr	r9, [r5]
   16ba4:	orr	r7, r7, #1
   16ba8:	ldr	r6, [r5, #4]
   16bac:	str	ip, [sp]
   16bb0:	ldr	ip, [r4, #56]	; 0x38
   16bb4:	mov	r1, r9
   16bb8:	str	r7, [sp, #4]
   16bbc:	ldr	lr, [r4, #60]	; 0x3c
   16bc0:	str	r0, [sp, #8]
   16bc4:	mov	r0, r6
   16bc8:	str	ip, [sp, #12]
   16bcc:	str	lr, [sp, #16]
   16bd0:	bl	1355c <__assert_fail@plt+0x2654>
   16bd4:	cmp	r9, r0
   16bd8:	bhi	16c40 <__assert_fail@plt+0x5d38>
   16bdc:	add	r9, r0, #1
   16be0:	movw	r3, #8852	; 0x2294
   16be4:	movt	r3, #3
   16be8:	cmp	r6, r3
   16bec:	str	r9, [r5]
   16bf0:	beq	16bfc <__assert_fail@plt+0x5cf4>
   16bf4:	mov	r0, r6
   16bf8:	bl	18cec <__assert_fail@plt+0x7de4>
   16bfc:	mov	r0, r9
   16c00:	bl	175c4 <__assert_fail@plt+0x66bc>
   16c04:	ldr	ip, [r4, #16]
   16c08:	mov	r1, r9
   16c0c:	mov	r3, fp
   16c10:	mov	r2, sl
   16c14:	mov	r6, r0
   16c18:	ldr	r9, [r4, #56]	; 0x38
   16c1c:	ldr	lr, [r4, #60]	; 0x3c
   16c20:	str	r0, [r5, #4]
   16c24:	str	ip, [sp]
   16c28:	ldr	ip, [pc, #100]	; 16c94 <__assert_fail@plt+0x5d8c>
   16c2c:	str	r7, [sp, #4]
   16c30:	str	ip, [sp, #8]
   16c34:	str	r9, [sp, #12]
   16c38:	str	lr, [sp, #16]
   16c3c:	bl	1355c <__assert_fail@plt+0x2654>
   16c40:	ldr	r3, [sp, #28]
   16c44:	mov	r0, r6
   16c48:	str	r3, [r8]
   16c4c:	add	sp, sp, #44	; 0x2c
   16c50:	ldrd	r4, [sp]
   16c54:	ldrd	r6, [sp, #8]
   16c58:	ldrd	r8, [sp, #16]
   16c5c:	ldrd	sl, [sp, #24]
   16c60:	add	sp, sp, #32
   16c64:	pop	{pc}		; (ldr pc, [sp], #4)
   16c68:	mov	r0, #8
   16c6c:	mvn	r3, #-2147483648	; 0x80000000
   16c70:	add	r1, sp, #36	; 0x24
   16c74:	str	r0, [sp]
   16c78:	mov	r0, #0
   16c7c:	bl	17868 <__assert_fail@plt+0x6960>
   16c80:	ldrd	r2, [r4, #8]
   16c84:	mov	r5, r0
   16c88:	str	r0, [r4]
   16c8c:	strd	r2, [r0]
   16c90:	b	16b68 <__assert_fail@plt+0x5c60>
   16c94:	andeq	sl, r2, r8, lsl #2
   16c98:	ldr	r3, [pc, #4]	; 16ca4 <__assert_fail@plt+0x5d9c>
   16c9c:	mvn	r2, #0
   16ca0:	b	14f48 <__assert_fail@plt+0x4040>
   16ca4:	andeq	sl, r2, r0, lsl #2
   16ca8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16cac:	movw	r4, #41200	; 0xa0f0
   16cb0:	movt	r4, #2
   16cb4:	strd	r6, [sp, #8]
   16cb8:	strd	r8, [sp, #16]
   16cbc:	strd	sl, [sp, #24]
   16cc0:	mov	sl, r0
   16cc4:	str	lr, [sp, #32]
   16cc8:	sub	sp, sp, #44	; 0x2c
   16ccc:	bl	10e30 <__errno_location@plt>
   16cd0:	ldr	r3, [r0]
   16cd4:	mov	r8, r0
   16cd8:	ldr	r2, [r4, #4]
   16cdc:	ldr	r5, [r4]
   16ce0:	str	r3, [sp, #28]
   16ce4:	cmp	r2, #0
   16ce8:	bgt	16d44 <__assert_fail@plt+0x5e3c>
   16cec:	add	r3, r4, #8
   16cf0:	str	r2, [sp, #36]	; 0x24
   16cf4:	rsb	r2, r2, #1
   16cf8:	cmp	r5, r3
   16cfc:	beq	16e0c <__assert_fail@plt+0x5f04>
   16d00:	mov	r1, #8
   16d04:	mov	r0, r5
   16d08:	mvn	r3, #-2147483648	; 0x80000000
   16d0c:	str	r1, [sp]
   16d10:	add	r1, sp, #36	; 0x24
   16d14:	bl	17868 <__assert_fail@plt+0x6960>
   16d18:	mov	r5, r0
   16d1c:	str	r0, [r4]
   16d20:	ldr	r0, [r4, #4]
   16d24:	mov	r1, #0
   16d28:	ldr	r2, [sp, #36]	; 0x24
   16d2c:	sub	r2, r2, r0
   16d30:	add	r0, r5, r0, lsl #3
   16d34:	lsl	r2, r2, #3
   16d38:	bl	10e48 <memset@plt>
   16d3c:	ldr	r3, [sp, #36]	; 0x24
   16d40:	str	r3, [r4, #4]
   16d44:	ldr	ip, [r4, #16]
   16d48:	mvn	r3, #0
   16d4c:	mov	r2, sl
   16d50:	ldr	r7, [r4, #20]
   16d54:	ldr	fp, [pc, #220]	; 16e38 <__assert_fail@plt+0x5f30>
   16d58:	ldr	r9, [r5]
   16d5c:	orr	r7, r7, #1
   16d60:	ldr	r6, [r5, #4]
   16d64:	str	ip, [sp]
   16d68:	ldr	ip, [r4, #56]	; 0x38
   16d6c:	mov	r1, r9
   16d70:	stmib	sp, {r7, fp}
   16d74:	ldr	lr, [r4, #60]	; 0x3c
   16d78:	mov	r0, r6
   16d7c:	str	ip, [sp, #12]
   16d80:	str	lr, [sp, #16]
   16d84:	bl	1355c <__assert_fail@plt+0x2654>
   16d88:	cmp	r9, r0
   16d8c:	bhi	16de4 <__assert_fail@plt+0x5edc>
   16d90:	add	r9, r0, #1
   16d94:	movw	r3, #8852	; 0x2294
   16d98:	movt	r3, #3
   16d9c:	cmp	r6, r3
   16da0:	str	r9, [r5]
   16da4:	beq	16db0 <__assert_fail@plt+0x5ea8>
   16da8:	mov	r0, r6
   16dac:	bl	18cec <__assert_fail@plt+0x7de4>
   16db0:	mov	r0, r9
   16db4:	bl	175c4 <__assert_fail@plt+0x66bc>
   16db8:	ldr	r3, [r4, #16]
   16dbc:	mov	r2, sl
   16dc0:	mov	r1, r9
   16dc4:	mov	r6, r0
   16dc8:	ldr	lr, [r4, #56]	; 0x38
   16dcc:	ldr	ip, [r4, #60]	; 0x3c
   16dd0:	str	r0, [r5, #4]
   16dd4:	stm	sp, {r3, r7, fp, lr}
   16dd8:	mvn	r3, #0
   16ddc:	str	ip, [sp, #16]
   16de0:	bl	1355c <__assert_fail@plt+0x2654>
   16de4:	ldr	r3, [sp, #28]
   16de8:	mov	r0, r6
   16dec:	str	r3, [r8]
   16df0:	add	sp, sp, #44	; 0x2c
   16df4:	ldrd	r4, [sp]
   16df8:	ldrd	r6, [sp, #8]
   16dfc:	ldrd	r8, [sp, #16]
   16e00:	ldrd	sl, [sp, #24]
   16e04:	add	sp, sp, #32
   16e08:	pop	{pc}		; (ldr pc, [sp], #4)
   16e0c:	mov	r0, #8
   16e10:	mvn	r3, #-2147483648	; 0x80000000
   16e14:	add	r1, sp, #36	; 0x24
   16e18:	str	r0, [sp]
   16e1c:	mov	r0, #0
   16e20:	bl	17868 <__assert_fail@plt+0x6960>
   16e24:	ldrd	r2, [r4, #8]
   16e28:	mov	r5, r0
   16e2c:	str	r0, [r4]
   16e30:	strd	r2, [r0]
   16e34:	b	16d20 <__assert_fail@plt+0x5e18>
   16e38:	andeq	sl, r2, r8, lsl #2
   16e3c:	cmp	r1, #0
   16e40:	strd	r4, [sp, #-16]!
   16e44:	mov	ip, r3
   16e48:	str	r6, [sp, #8]
   16e4c:	mov	r4, r0
   16e50:	str	lr, [sp, #12]
   16e54:	sub	sp, sp, #32
   16e58:	ldr	r5, [sp, #48]	; 0x30
   16e5c:	ldr	r6, [sp, #52]	; 0x34
   16e60:	beq	16fa4 <__assert_fail@plt+0x609c>
   16e64:	mov	r3, r1
   16e68:	mov	r1, #1
   16e6c:	stm	sp, {r2, ip}
   16e70:	movw	r2, #39144	; 0x98e8
   16e74:	movt	r2, #1
   16e78:	bl	10e6c <__fprintf_chk@plt>
   16e7c:	mov	r2, #5
   16e80:	movw	r1, #39164	; 0x98fc
   16e84:	movt	r1, #1
   16e88:	mov	r0, #0
   16e8c:	bl	10d4c <dcgettext@plt>
   16e90:	movw	ip, #2022	; 0x7e6
   16e94:	mov	r3, r0
   16e98:	mov	r1, #1
   16e9c:	movw	r2, #39892	; 0x9bd4
   16ea0:	movt	r2, #1
   16ea4:	mov	r0, r4
   16ea8:	str	ip, [sp]
   16eac:	bl	10e6c <__fprintf_chk@plt>
   16eb0:	mov	r1, r4
   16eb4:	mov	r0, #10
   16eb8:	bl	10d40 <fputc_unlocked@plt>
   16ebc:	mov	r2, #5
   16ec0:	movw	r1, #39168	; 0x9900
   16ec4:	movt	r1, #1
   16ec8:	mov	r0, #0
   16ecc:	bl	10d4c <dcgettext@plt>
   16ed0:	mov	r2, r0
   16ed4:	mov	r1, #1
   16ed8:	movw	r3, #39340	; 0x99ac
   16edc:	movt	r3, #1
   16ee0:	mov	r0, r4
   16ee4:	bl	10e6c <__fprintf_chk@plt>
   16ee8:	mov	r1, r4
   16eec:	mov	r0, #10
   16ef0:	bl	10d40 <fputc_unlocked@plt>
   16ef4:	cmp	r6, #9
   16ef8:	ldrls	pc, [pc, r6, lsl #2]
   16efc:	b	17210 <__assert_fail@plt+0x6308>
   16f00:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   16f04:	andeq	r6, r1, r0, asr #31
   16f08:	strdeq	r6, [r1], -ip
   16f0c:	andeq	r7, r1, ip, lsr r0
   16f10:	andeq	r7, r1, r4, lsl #1
   16f14:	strheq	r7, [r1], -ip
   16f18:	andeq	r7, r1, r4, lsl #2
   16f1c:	andeq	r7, r1, r8, asr r1
   16f20:			; <UNDEFINED> instruction: 0x000171b0
   16f24:	andeq	r6, r1, r8, lsr #30
   16f28:	movw	r1, #39644	; 0x9adc
   16f2c:	movt	r1, #1
   16f30:	mov	r2, #5
   16f34:	mov	r0, #0
   16f38:	bl	10d4c <dcgettext@plt>
   16f3c:	ldr	lr, [r5, #4]
   16f40:	mov	r2, r0
   16f44:	mov	r1, #1
   16f48:	mov	r0, r4
   16f4c:	ldr	r3, [r5, #8]
   16f50:	ldr	ip, [r5, #32]
   16f54:	str	lr, [sp]
   16f58:	ldr	lr, [r5, #12]
   16f5c:	str	ip, [sp, #28]
   16f60:	ldr	ip, [r5, #28]
   16f64:	str	r3, [sp, #4]
   16f68:	ldr	r3, [r5, #16]
   16f6c:	str	lr, [sp, #8]
   16f70:	ldr	lr, [r5, #20]
   16f74:	str	ip, [sp, #24]
   16f78:	ldr	ip, [r5, #24]
   16f7c:	str	r3, [sp, #12]
   16f80:	ldr	r3, [r5]
   16f84:	str	lr, [sp, #16]
   16f88:	str	ip, [sp, #20]
   16f8c:	bl	10e6c <__fprintf_chk@plt>
   16f90:	add	sp, sp, #32
   16f94:	ldrd	r4, [sp]
   16f98:	ldr	r6, [sp, #8]
   16f9c:	add	sp, sp, #12
   16fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fa4:	mov	r3, r2
   16fa8:	mov	r1, #1
   16fac:	str	ip, [sp]
   16fb0:	movw	r2, #39156	; 0x98f4
   16fb4:	movt	r2, #1
   16fb8:	bl	10e6c <__fprintf_chk@plt>
   16fbc:	b	16e7c <__assert_fail@plt+0x5f74>
   16fc0:	mov	r2, #5
   16fc4:	movw	r1, #39376	; 0x99d0
   16fc8:	movt	r1, #1
   16fcc:	mov	r0, #0
   16fd0:	bl	10d4c <dcgettext@plt>
   16fd4:	ldr	r3, [r5]
   16fd8:	mov	r2, r0
   16fdc:	mov	r1, #1
   16fe0:	mov	r0, r4
   16fe4:	add	sp, sp, #32
   16fe8:	ldrd	r4, [sp]
   16fec:	ldr	r6, [sp, #8]
   16ff0:	ldr	lr, [sp, #12]
   16ff4:	add	sp, sp, #16
   16ff8:	b	10e6c <__fprintf_chk@plt>
   16ffc:	mov	r2, #5
   17000:	movw	r1, #39392	; 0x99e0
   17004:	movt	r1, #1
   17008:	mov	r0, #0
   1700c:	bl	10d4c <dcgettext@plt>
   17010:	ldm	r5, {r3, ip}
   17014:	mov	r2, r0
   17018:	mov	r1, #1
   1701c:	mov	r0, r4
   17020:	str	ip, [sp, #48]	; 0x30
   17024:	add	sp, sp, #32
   17028:	ldrd	r4, [sp]
   1702c:	ldr	r6, [sp, #8]
   17030:	ldr	lr, [sp, #12]
   17034:	add	sp, sp, #16
   17038:	b	10e6c <__fprintf_chk@plt>
   1703c:	mov	r2, #5
   17040:	movw	r1, #39416	; 0x99f8
   17044:	movt	r1, #1
   17048:	mov	r0, #0
   1704c:	bl	10d4c <dcgettext@plt>
   17050:	ldm	r5, {r3, lr}
   17054:	mov	r2, r0
   17058:	mov	r1, #1
   1705c:	mov	r0, r4
   17060:	ldr	ip, [r5, #8]
   17064:	str	lr, [sp, #48]	; 0x30
   17068:	str	ip, [sp, #52]	; 0x34
   1706c:	add	sp, sp, #32
   17070:	ldrd	r4, [sp]
   17074:	ldr	r6, [sp, #8]
   17078:	ldr	lr, [sp, #12]
   1707c:	add	sp, sp, #16
   17080:	b	10e6c <__fprintf_chk@plt>
   17084:	mov	r2, #5
   17088:	movw	r1, #39444	; 0x9a14
   1708c:	movt	r1, #1
   17090:	mov	r0, #0
   17094:	bl	10d4c <dcgettext@plt>
   17098:	ldmib	r5, {r3, ip, lr}
   1709c:	mov	r2, r0
   170a0:	mov	r1, #1
   170a4:	mov	r0, r4
   170a8:	str	r3, [sp]
   170ac:	ldr	r3, [r5]
   170b0:	stmib	sp, {ip, lr}
   170b4:	bl	10e6c <__fprintf_chk@plt>
   170b8:	b	16f90 <__assert_fail@plt+0x6088>
   170bc:	mov	r2, #5
   170c0:	movw	r1, #39476	; 0x9a34
   170c4:	movt	r1, #1
   170c8:	mov	r0, #0
   170cc:	bl	10d4c <dcgettext@plt>
   170d0:	ldmib	r5, {ip, lr}
   170d4:	mov	r2, r0
   170d8:	mov	r1, #1
   170dc:	mov	r0, r4
   170e0:	ldr	r3, [r5, #16]
   170e4:	str	ip, [sp]
   170e8:	ldr	ip, [r5, #12]
   170ec:	str	r3, [sp, #12]
   170f0:	ldr	r3, [r5]
   170f4:	str	lr, [sp, #4]
   170f8:	str	ip, [sp, #8]
   170fc:	bl	10e6c <__fprintf_chk@plt>
   17100:	b	16f90 <__assert_fail@plt+0x6088>
   17104:	mov	r2, #5
   17108:	movw	r1, #39512	; 0x9a58
   1710c:	movt	r1, #1
   17110:	mov	r0, #0
   17114:	bl	10d4c <dcgettext@plt>
   17118:	ldr	lr, [r5, #4]
   1711c:	mov	r2, r0
   17120:	mov	r1, #1
   17124:	mov	r0, r4
   17128:	ldr	r3, [r5, #8]
   1712c:	ldr	ip, [r5, #20]
   17130:	str	lr, [sp]
   17134:	ldr	lr, [r5, #12]
   17138:	str	ip, [sp, #16]
   1713c:	ldr	ip, [r5, #16]
   17140:	str	r3, [sp, #4]
   17144:	ldr	r3, [r5]
   17148:	str	lr, [sp, #8]
   1714c:	str	ip, [sp, #12]
   17150:	bl	10e6c <__fprintf_chk@plt>
   17154:	b	16f90 <__assert_fail@plt+0x6088>
   17158:	mov	r2, #5
   1715c:	movw	r1, #39552	; 0x9a80
   17160:	movt	r1, #1
   17164:	mov	r0, #0
   17168:	bl	10d4c <dcgettext@plt>
   1716c:	ldmib	r5, {r3, ip}
   17170:	mov	r2, r0
   17174:	mov	r1, #1
   17178:	mov	r0, r4
   1717c:	ldr	lr, [r5, #24]
   17180:	str	r3, [sp]
   17184:	ldr	r3, [r5, #12]
   17188:	str	lr, [sp, #20]
   1718c:	ldr	lr, [r5, #20]
   17190:	str	ip, [sp, #4]
   17194:	ldr	ip, [r5, #16]
   17198:	str	r3, [sp, #8]
   1719c:	ldr	r3, [r5]
   171a0:	str	ip, [sp, #12]
   171a4:	str	lr, [sp, #16]
   171a8:	bl	10e6c <__fprintf_chk@plt>
   171ac:	b	16f90 <__assert_fail@plt+0x6088>
   171b0:	mov	r2, #5
   171b4:	movw	r1, #39596	; 0x9aac
   171b8:	movt	r1, #1
   171bc:	mov	r0, #0
   171c0:	bl	10d4c <dcgettext@plt>
   171c4:	ldmib	r5, {ip, lr}
   171c8:	mov	r2, r0
   171cc:	mov	r1, #1
   171d0:	mov	r0, r4
   171d4:	ldr	r3, [r5, #28]
   171d8:	str	ip, [sp]
   171dc:	ldr	ip, [r5, #12]
   171e0:	str	r3, [sp, #24]
   171e4:	ldr	r3, [r5, #24]
   171e8:	str	lr, [sp, #4]
   171ec:	ldr	lr, [r5, #16]
   171f0:	str	ip, [sp, #8]
   171f4:	ldr	ip, [r5, #20]
   171f8:	str	r3, [sp, #20]
   171fc:	ldr	r3, [r5]
   17200:	str	lr, [sp, #12]
   17204:	str	ip, [sp, #16]
   17208:	bl	10e6c <__fprintf_chk@plt>
   1720c:	b	16f90 <__assert_fail@plt+0x6088>
   17210:	movw	r1, #39696	; 0x9b10
   17214:	movt	r1, #1
   17218:	b	16f30 <__assert_fail@plt+0x6028>
   1721c:	strd	r4, [sp, #-12]!
   17220:	str	lr, [sp, #8]
   17224:	sub	sp, sp, #12
   17228:	ldr	r5, [sp, #24]
   1722c:	ldr	ip, [r5]
   17230:	cmp	ip, #0
   17234:	beq	17250 <__assert_fail@plt+0x6348>
   17238:	mov	lr, r5
   1723c:	mov	ip, #0
   17240:	ldr	r4, [lr, #4]!
   17244:	add	ip, ip, #1
   17248:	cmp	r4, #0
   1724c:	bne	17240 <__assert_fail@plt+0x6338>
   17250:	stm	sp, {r5, ip}
   17254:	bl	16e3c <__assert_fail@plt+0x5f34>
   17258:	add	sp, sp, #12
   1725c:	ldrd	r4, [sp]
   17260:	add	sp, sp, #8
   17264:	pop	{pc}		; (ldr pc, [sp], #4)
   17268:	push	{lr}		; (str lr, [sp, #-4]!)
   1726c:	sub	sp, sp, #52	; 0x34
   17270:	ldr	ip, [sp, #56]	; 0x38
   17274:	ldr	lr, [ip]
   17278:	cmp	lr, #0
   1727c:	str	lr, [sp, #8]
   17280:	beq	17318 <__assert_fail@plt+0x6410>
   17284:	ldr	lr, [ip, #4]
   17288:	cmp	lr, #0
   1728c:	str	lr, [sp, #12]
   17290:	beq	1732c <__assert_fail@plt+0x6424>
   17294:	ldr	lr, [ip, #8]
   17298:	cmp	lr, #0
   1729c:	str	lr, [sp, #16]
   172a0:	beq	17334 <__assert_fail@plt+0x642c>
   172a4:	ldr	lr, [ip, #12]
   172a8:	cmp	lr, #0
   172ac:	str	lr, [sp, #20]
   172b0:	beq	1733c <__assert_fail@plt+0x6434>
   172b4:	ldr	lr, [ip, #16]
   172b8:	cmp	lr, #0
   172bc:	str	lr, [sp, #24]
   172c0:	beq	17344 <__assert_fail@plt+0x643c>
   172c4:	ldr	lr, [ip, #20]
   172c8:	cmp	lr, #0
   172cc:	str	lr, [sp, #28]
   172d0:	beq	1734c <__assert_fail@plt+0x6444>
   172d4:	ldr	lr, [ip, #24]
   172d8:	cmp	lr, #0
   172dc:	str	lr, [sp, #32]
   172e0:	beq	17354 <__assert_fail@plt+0x644c>
   172e4:	ldr	lr, [ip, #28]
   172e8:	cmp	lr, #0
   172ec:	str	lr, [sp, #36]	; 0x24
   172f0:	beq	1735c <__assert_fail@plt+0x6454>
   172f4:	ldr	lr, [ip, #32]
   172f8:	cmp	lr, #0
   172fc:	str	lr, [sp, #40]	; 0x28
   17300:	beq	17364 <__assert_fail@plt+0x645c>
   17304:	ldr	ip, [ip, #36]	; 0x24
   17308:	cmp	ip, #0
   1730c:	str	ip, [sp, #44]	; 0x2c
   17310:	movne	lr, #10
   17314:	moveq	lr, #9
   17318:	add	ip, sp, #8
   1731c:	stm	sp, {ip, lr}
   17320:	bl	16e3c <__assert_fail@plt+0x5f34>
   17324:	add	sp, sp, #52	; 0x34
   17328:	pop	{pc}		; (ldr pc, [sp], #4)
   1732c:	mov	lr, #1
   17330:	b	17318 <__assert_fail@plt+0x6410>
   17334:	mov	lr, #2
   17338:	b	17318 <__assert_fail@plt+0x6410>
   1733c:	mov	lr, #3
   17340:	b	17318 <__assert_fail@plt+0x6410>
   17344:	mov	lr, #4
   17348:	b	17318 <__assert_fail@plt+0x6410>
   1734c:	mov	lr, #5
   17350:	b	17318 <__assert_fail@plt+0x6410>
   17354:	mov	lr, #6
   17358:	b	17318 <__assert_fail@plt+0x6410>
   1735c:	mov	lr, #7
   17360:	b	17318 <__assert_fail@plt+0x6410>
   17364:	mov	lr, #8
   17368:	b	17318 <__assert_fail@plt+0x6410>
   1736c:	push	{r3}		; (str r3, [sp, #-4]!)
   17370:	push	{lr}		; (str lr, [sp, #-4]!)
   17374:	sub	sp, sp, #56	; 0x38
   17378:	ldr	ip, [sp, #64]	; 0x40
   1737c:	add	r3, sp, #64	; 0x40
   17380:	str	r3, [sp, #12]
   17384:	cmp	ip, #0
   17388:	str	ip, [sp, #16]
   1738c:	beq	17424 <__assert_fail@plt+0x651c>
   17390:	ldr	ip, [sp, #68]	; 0x44
   17394:	cmp	ip, #0
   17398:	str	ip, [sp, #20]
   1739c:	beq	17448 <__assert_fail@plt+0x6540>
   173a0:	ldr	ip, [sp, #72]	; 0x48
   173a4:	cmp	ip, #0
   173a8:	str	ip, [sp, #24]
   173ac:	beq	17450 <__assert_fail@plt+0x6548>
   173b0:	ldr	ip, [sp, #76]	; 0x4c
   173b4:	cmp	ip, #0
   173b8:	str	ip, [sp, #28]
   173bc:	beq	17458 <__assert_fail@plt+0x6550>
   173c0:	ldr	ip, [sp, #80]	; 0x50
   173c4:	cmp	ip, #0
   173c8:	str	ip, [sp, #32]
   173cc:	beq	17460 <__assert_fail@plt+0x6558>
   173d0:	ldr	ip, [sp, #84]	; 0x54
   173d4:	cmp	ip, #0
   173d8:	str	ip, [sp, #36]	; 0x24
   173dc:	beq	17468 <__assert_fail@plt+0x6560>
   173e0:	ldr	ip, [sp, #88]	; 0x58
   173e4:	cmp	ip, #0
   173e8:	str	ip, [sp, #40]	; 0x28
   173ec:	beq	17470 <__assert_fail@plt+0x6568>
   173f0:	ldr	ip, [sp, #92]	; 0x5c
   173f4:	cmp	ip, #0
   173f8:	str	ip, [sp, #44]	; 0x2c
   173fc:	beq	17478 <__assert_fail@plt+0x6570>
   17400:	ldr	ip, [sp, #96]	; 0x60
   17404:	cmp	ip, #0
   17408:	str	ip, [sp, #48]	; 0x30
   1740c:	beq	17480 <__assert_fail@plt+0x6578>
   17410:	ldr	r3, [sp, #100]	; 0x64
   17414:	cmp	r3, #0
   17418:	str	r3, [sp, #52]	; 0x34
   1741c:	movne	ip, #10
   17420:	moveq	ip, #9
   17424:	ldr	r3, [sp, #60]	; 0x3c
   17428:	add	lr, sp, #16
   1742c:	str	lr, [sp]
   17430:	str	ip, [sp, #4]
   17434:	bl	16e3c <__assert_fail@plt+0x5f34>
   17438:	add	sp, sp, #56	; 0x38
   1743c:	pop	{lr}		; (ldr lr, [sp], #4)
   17440:	add	sp, sp, #4
   17444:	bx	lr
   17448:	mov	ip, #1
   1744c:	b	17424 <__assert_fail@plt+0x651c>
   17450:	mov	ip, #2
   17454:	b	17424 <__assert_fail@plt+0x651c>
   17458:	mov	ip, #3
   1745c:	b	17424 <__assert_fail@plt+0x651c>
   17460:	mov	ip, #4
   17464:	b	17424 <__assert_fail@plt+0x651c>
   17468:	mov	ip, #5
   1746c:	b	17424 <__assert_fail@plt+0x651c>
   17470:	mov	ip, #6
   17474:	b	17424 <__assert_fail@plt+0x651c>
   17478:	mov	ip, #7
   1747c:	b	17424 <__assert_fail@plt+0x651c>
   17480:	mov	ip, #8
   17484:	b	17424 <__assert_fail@plt+0x651c>
   17488:	movw	r3, #41292	; 0xa14c
   1748c:	movt	r3, #2
   17490:	str	r4, [sp, #-8]!
   17494:	mov	r0, #10
   17498:	ldr	r1, [r3]
   1749c:	str	lr, [sp, #4]
   174a0:	bl	10d40 <fputc_unlocked@plt>
   174a4:	mov	r2, #5
   174a8:	movw	r1, #39756	; 0x9b4c
   174ac:	movt	r1, #1
   174b0:	mov	r0, #0
   174b4:	bl	10d4c <dcgettext@plt>
   174b8:	mov	r1, r0
   174bc:	movw	r2, #39776	; 0x9b60
   174c0:	movt	r2, #1
   174c4:	mov	r0, #1
   174c8:	bl	10e54 <__printf_chk@plt>
   174cc:	mov	r2, #5
   174d0:	movw	r1, #39800	; 0x9b78
   174d4:	movt	r1, #1
   174d8:	mov	r0, #0
   174dc:	bl	10d4c <dcgettext@plt>
   174e0:	mov	r1, r0
   174e4:	movw	r3, #38180	; 0x9524
   174e8:	movt	r3, #1
   174ec:	movw	r2, #38220	; 0x954c
   174f0:	movt	r2, #1
   174f4:	mov	r0, #1
   174f8:	bl	10e54 <__printf_chk@plt>
   174fc:	mov	r2, #5
   17500:	movw	r1, #39820	; 0x9b8c
   17504:	movt	r1, #1
   17508:	mov	r0, #0
   1750c:	bl	10d4c <dcgettext@plt>
   17510:	mov	r1, r0
   17514:	movw	r2, #39860	; 0x9bb4
   17518:	movt	r2, #1
   1751c:	mov	r0, #1
   17520:	ldr	r4, [sp]
   17524:	ldr	lr, [sp, #4]
   17528:	add	sp, sp, #8
   1752c:	b	10e54 <__printf_chk@plt>
   17530:	strd	r4, [sp, #-16]!
   17534:	mov	r4, r0
   17538:	mov	r5, r2
   1753c:	str	r6, [sp, #8]
   17540:	mov	r6, r1
   17544:	str	lr, [sp, #12]
   17548:	bl	18e08 <__assert_fail@plt+0x7f00>
   1754c:	cmp	r0, #0
   17550:	beq	17564 <__assert_fail@plt+0x665c>
   17554:	ldrd	r4, [sp]
   17558:	ldr	r6, [sp, #8]
   1755c:	add	sp, sp, #12
   17560:	pop	{pc}		; (ldr pc, [sp], #4)
   17564:	cmp	r4, #0
   17568:	beq	17578 <__assert_fail@plt+0x6670>
   1756c:	cmp	r6, #0
   17570:	cmpne	r5, #0
   17574:	beq	17554 <__assert_fail@plt+0x664c>
   17578:	bl	17b34 <__assert_fail@plt+0x6c2c>
   1757c:	str	r4, [sp, #-8]!
   17580:	str	lr, [sp, #4]
   17584:	bl	18bd0 <__assert_fail@plt+0x7cc8>
   17588:	cmp	r0, #0
   1758c:	beq	1759c <__assert_fail@plt+0x6694>
   17590:	ldr	r4, [sp]
   17594:	add	sp, sp, #4
   17598:	pop	{pc}		; (ldr pc, [sp], #4)
   1759c:	bl	17b34 <__assert_fail@plt+0x6c2c>
   175a0:	str	r4, [sp, #-8]!
   175a4:	str	lr, [sp, #4]
   175a8:	bl	18bd0 <__assert_fail@plt+0x7cc8>
   175ac:	cmp	r0, #0
   175b0:	beq	175c0 <__assert_fail@plt+0x66b8>
   175b4:	ldr	r4, [sp]
   175b8:	add	sp, sp, #4
   175bc:	pop	{pc}		; (ldr pc, [sp], #4)
   175c0:	bl	17b34 <__assert_fail@plt+0x6c2c>
   175c4:	str	r4, [sp, #-8]!
   175c8:	str	lr, [sp, #4]
   175cc:	bl	18bd0 <__assert_fail@plt+0x7cc8>
   175d0:	cmp	r0, #0
   175d4:	beq	175e4 <__assert_fail@plt+0x66dc>
   175d8:	ldr	r4, [sp]
   175dc:	add	sp, sp, #4
   175e0:	pop	{pc}		; (ldr pc, [sp], #4)
   175e4:	bl	17b34 <__assert_fail@plt+0x6c2c>
   175e8:	strd	r4, [sp, #-16]!
   175ec:	mov	r5, r0
   175f0:	mov	r4, r1
   175f4:	str	r6, [sp, #8]
   175f8:	str	lr, [sp, #12]
   175fc:	bl	18c0c <__assert_fail@plt+0x7d04>
   17600:	cmp	r0, #0
   17604:	beq	17618 <__assert_fail@plt+0x6710>
   17608:	ldrd	r4, [sp]
   1760c:	ldr	r6, [sp, #8]
   17610:	add	sp, sp, #12
   17614:	pop	{pc}		; (ldr pc, [sp], #4)
   17618:	adds	r4, r4, #0
   1761c:	movne	r4, #1
   17620:	cmp	r5, #0
   17624:	moveq	r4, #1
   17628:	cmp	r4, #0
   1762c:	beq	17608 <__assert_fail@plt+0x6700>
   17630:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17634:	cmp	r1, #0
   17638:	orreq	r1, r1, #1
   1763c:	str	r4, [sp, #-8]!
   17640:	str	lr, [sp, #4]
   17644:	bl	18c0c <__assert_fail@plt+0x7d04>
   17648:	cmp	r0, #0
   1764c:	beq	1765c <__assert_fail@plt+0x6754>
   17650:	ldr	r4, [sp]
   17654:	add	sp, sp, #4
   17658:	pop	{pc}		; (ldr pc, [sp], #4)
   1765c:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17660:	strd	r4, [sp, #-16]!
   17664:	mov	r4, r0
   17668:	mov	r5, r2
   1766c:	str	r6, [sp, #8]
   17670:	mov	r6, r1
   17674:	str	lr, [sp, #12]
   17678:	bl	18e08 <__assert_fail@plt+0x7f00>
   1767c:	cmp	r0, #0
   17680:	beq	17694 <__assert_fail@plt+0x678c>
   17684:	ldrd	r4, [sp]
   17688:	ldr	r6, [sp, #8]
   1768c:	add	sp, sp, #12
   17690:	pop	{pc}		; (ldr pc, [sp], #4)
   17694:	cmp	r4, #0
   17698:	beq	176a8 <__assert_fail@plt+0x67a0>
   1769c:	cmp	r6, #0
   176a0:	cmpne	r5, #0
   176a4:	beq	17684 <__assert_fail@plt+0x677c>
   176a8:	bl	17b34 <__assert_fail@plt+0x6c2c>
   176ac:	cmp	r2, #0
   176b0:	cmpne	r1, #0
   176b4:	str	r4, [sp, #-8]!
   176b8:	moveq	r2, #1
   176bc:	str	lr, [sp, #4]
   176c0:	moveq	r1, r2
   176c4:	bl	18e08 <__assert_fail@plt+0x7f00>
   176c8:	cmp	r0, #0
   176cc:	beq	176dc <__assert_fail@plt+0x67d4>
   176d0:	ldr	r4, [sp]
   176d4:	add	sp, sp, #4
   176d8:	pop	{pc}		; (ldr pc, [sp], #4)
   176dc:	bl	17b34 <__assert_fail@plt+0x6c2c>
   176e0:	mov	r2, r1
   176e4:	mov	r1, r0
   176e8:	str	r4, [sp, #-8]!
   176ec:	mov	r0, #0
   176f0:	str	lr, [sp, #4]
   176f4:	bl	18e08 <__assert_fail@plt+0x7f00>
   176f8:	cmp	r0, #0
   176fc:	beq	1770c <__assert_fail@plt+0x6804>
   17700:	ldr	r4, [sp]
   17704:	add	sp, sp, #4
   17708:	pop	{pc}		; (ldr pc, [sp], #4)
   1770c:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17710:	cmp	r1, #0
   17714:	cmpne	r0, #0
   17718:	str	r4, [sp, #-8]!
   1771c:	moveq	r2, #1
   17720:	movne	r2, r1
   17724:	str	lr, [sp, #4]
   17728:	movne	r1, r0
   1772c:	moveq	r1, r2
   17730:	mov	r0, #0
   17734:	bl	18e08 <__assert_fail@plt+0x7f00>
   17738:	cmp	r0, #0
   1773c:	beq	1774c <__assert_fail@plt+0x6844>
   17740:	ldr	r4, [sp]
   17744:	add	sp, sp, #4
   17748:	pop	{pc}		; (ldr pc, [sp], #4)
   1774c:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17750:	cmp	r0, #0
   17754:	strd	r4, [sp, #-16]!
   17758:	mov	r5, r1
   1775c:	ldr	r4, [r1]
   17760:	str	r6, [sp, #8]
   17764:	str	lr, [sp, #12]
   17768:	beq	177b0 <__assert_fail@plt+0x68a8>
   1776c:	lsr	r3, r4, #1
   17770:	add	r3, r3, #1
   17774:	adds	r4, r4, r3
   17778:	bcs	177ac <__assert_fail@plt+0x68a4>
   1777c:	mov	r2, #1
   17780:	mov	r1, r4
   17784:	bl	18e08 <__assert_fail@plt+0x7f00>
   17788:	cmp	r0, #0
   1778c:	beq	177a4 <__assert_fail@plt+0x689c>
   17790:	ldr	r6, [sp, #8]
   17794:	str	r4, [r5]
   17798:	ldrd	r4, [sp]
   1779c:	add	sp, sp, #12
   177a0:	pop	{pc}		; (ldr pc, [sp], #4)
   177a4:	cmp	r4, #0
   177a8:	beq	17790 <__assert_fail@plt+0x6888>
   177ac:	bl	17b34 <__assert_fail@plt+0x6c2c>
   177b0:	cmp	r4, #0
   177b4:	mov	r2, #1
   177b8:	moveq	r4, #64	; 0x40
   177bc:	mov	r1, r4
   177c0:	bl	18e08 <__assert_fail@plt+0x7f00>
   177c4:	cmp	r0, #0
   177c8:	bne	17790 <__assert_fail@plt+0x6888>
   177cc:	b	177ac <__assert_fail@plt+0x68a4>
   177d0:	cmp	r0, #0
   177d4:	strd	r4, [sp, #-16]!
   177d8:	mov	r5, r1
   177dc:	ldr	r4, [r1]
   177e0:	str	r6, [sp, #8]
   177e4:	mov	r6, r2
   177e8:	str	lr, [sp, #12]
   177ec:	beq	17834 <__assert_fail@plt+0x692c>
   177f0:	lsr	r3, r4, #1
   177f4:	add	r3, r3, #1
   177f8:	adds	r4, r4, r3
   177fc:	bcs	17830 <__assert_fail@plt+0x6928>
   17800:	mov	r1, r4
   17804:	bl	18e08 <__assert_fail@plt+0x7f00>
   17808:	cmp	r0, #0
   1780c:	beq	17824 <__assert_fail@plt+0x691c>
   17810:	ldr	r6, [sp, #8]
   17814:	str	r4, [r5]
   17818:	ldrd	r4, [sp]
   1781c:	add	sp, sp, #12
   17820:	pop	{pc}		; (ldr pc, [sp], #4)
   17824:	cmp	r4, #0
   17828:	cmpne	r6, #0
   1782c:	beq	17810 <__assert_fail@plt+0x6908>
   17830:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17834:	cmp	r4, #0
   17838:	bne	1784c <__assert_fail@plt+0x6944>
   1783c:	mov	r4, #64	; 0x40
   17840:	udiv	r4, r4, r2
   17844:	cmp	r2, #64	; 0x40
   17848:	addhi	r4, r4, #1
   1784c:	mov	r2, r6
   17850:	mov	r1, r4
   17854:	mov	r0, #0
   17858:	bl	18e08 <__assert_fail@plt+0x7f00>
   1785c:	cmp	r0, #0
   17860:	bne	17810 <__assert_fail@plt+0x6908>
   17864:	b	17830 <__assert_fail@plt+0x6928>
   17868:	ldr	ip, [r1]
   1786c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17870:	strd	r6, [sp, #8]
   17874:	mov	r7, r1
   17878:	mov	r6, r0
   1787c:	str	r8, [sp, #16]
   17880:	mvn	r8, r3
   17884:	lsr	r8, r8, #31
   17888:	str	lr, [sp, #20]
   1788c:	asr	r1, ip, #1
   17890:	ldr	lr, [sp, #24]
   17894:	adds	r4, ip, r1
   17898:	mvnvs	r4, #-2147483648	; 0x80000000
   1789c:	cmp	r3, r4
   178a0:	movge	r1, #0
   178a4:	andlt	r1, r8, #1
   178a8:	cmp	r1, #0
   178ac:	movne	r4, r3
   178b0:	smull	r0, r1, r4, lr
   178b4:	cmp	r1, r0, asr #31
   178b8:	bne	17968 <__assert_fail@plt+0x6a60>
   178bc:	cmp	r0, #63	; 0x3f
   178c0:	mov	r5, r0
   178c4:	ble	17934 <__assert_fail@plt+0x6a2c>
   178c8:	cmp	r6, #0
   178cc:	sub	r1, r4, ip
   178d0:	streq	r6, [r7]
   178d4:	cmp	r1, r2
   178d8:	bge	17908 <__assert_fail@plt+0x6a00>
   178dc:	adds	r4, ip, r2
   178e0:	bvs	17964 <__assert_fail@plt+0x6a5c>
   178e4:	cmp	r4, r3
   178e8:	movle	r3, #0
   178ec:	andgt	r3, r8, #1
   178f0:	cmp	r3, #0
   178f4:	bne	17964 <__assert_fail@plt+0x6a5c>
   178f8:	smull	r0, r1, r4, lr
   178fc:	cmp	r1, r0, asr #31
   17900:	mov	r5, r0
   17904:	bne	17964 <__assert_fail@plt+0x6a5c>
   17908:	mov	r1, r5
   1790c:	mov	r0, r6
   17910:	bl	18c0c <__assert_fail@plt+0x7d04>
   17914:	cmp	r0, #0
   17918:	beq	17948 <__assert_fail@plt+0x6a40>
   1791c:	ldr	r8, [sp, #16]
   17920:	str	r4, [r7]
   17924:	ldrd	r4, [sp]
   17928:	ldrd	r6, [sp, #8]
   1792c:	add	sp, sp, #20
   17930:	pop	{pc}		; (ldr pc, [sp], #4)
   17934:	mov	r0, #64	; 0x40
   17938:	sdiv	r4, r0, lr
   1793c:	mls	r5, lr, r4, r0
   17940:	sub	r5, r0, r5
   17944:	b	178c8 <__assert_fail@plt+0x69c0>
   17948:	adds	r5, r5, #0
   1794c:	movne	r5, #1
   17950:	cmp	r6, #0
   17954:	movne	r6, r5
   17958:	moveq	r6, #1
   1795c:	cmp	r6, #0
   17960:	beq	1791c <__assert_fail@plt+0x6a14>
   17964:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17968:	mvn	r0, #-2147483648	; 0x80000000
   1796c:	b	17938 <__assert_fail@plt+0x6a30>
   17970:	mov	r1, #1
   17974:	str	r4, [sp, #-8]!
   17978:	str	lr, [sp, #4]
   1797c:	bl	18b5c <__assert_fail@plt+0x7c54>
   17980:	cmp	r0, #0
   17984:	beq	17994 <__assert_fail@plt+0x6a8c>
   17988:	ldr	r4, [sp]
   1798c:	add	sp, sp, #4
   17990:	pop	{pc}		; (ldr pc, [sp], #4)
   17994:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17998:	mov	r1, #1
   1799c:	str	r4, [sp, #-8]!
   179a0:	str	lr, [sp, #4]
   179a4:	bl	18b5c <__assert_fail@plt+0x7c54>
   179a8:	cmp	r0, #0
   179ac:	beq	179bc <__assert_fail@plt+0x6ab4>
   179b0:	ldr	r4, [sp]
   179b4:	add	sp, sp, #4
   179b8:	pop	{pc}		; (ldr pc, [sp], #4)
   179bc:	bl	17b34 <__assert_fail@plt+0x6c2c>
   179c0:	str	r4, [sp, #-8]!
   179c4:	str	lr, [sp, #4]
   179c8:	bl	18b5c <__assert_fail@plt+0x7c54>
   179cc:	cmp	r0, #0
   179d0:	beq	179e0 <__assert_fail@plt+0x6ad8>
   179d4:	ldr	r4, [sp]
   179d8:	add	sp, sp, #4
   179dc:	pop	{pc}		; (ldr pc, [sp], #4)
   179e0:	bl	17b34 <__assert_fail@plt+0x6c2c>
   179e4:	str	r4, [sp, #-8]!
   179e8:	str	lr, [sp, #4]
   179ec:	bl	18b5c <__assert_fail@plt+0x7c54>
   179f0:	cmp	r0, #0
   179f4:	beq	17a04 <__assert_fail@plt+0x6afc>
   179f8:	ldr	r4, [sp]
   179fc:	add	sp, sp, #4
   17a00:	pop	{pc}		; (ldr pc, [sp], #4)
   17a04:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17a08:	strd	r4, [sp, #-16]!
   17a0c:	mov	r4, r1
   17a10:	str	r6, [sp, #8]
   17a14:	mov	r6, r0
   17a18:	mov	r0, r1
   17a1c:	str	lr, [sp, #12]
   17a20:	bl	18bd0 <__assert_fail@plt+0x7cc8>
   17a24:	subs	r5, r0, #0
   17a28:	beq	17a4c <__assert_fail@plt+0x6b44>
   17a2c:	mov	r2, r4
   17a30:	mov	r1, r6
   17a34:	bl	10d04 <memcpy@plt>
   17a38:	mov	r0, r5
   17a3c:	ldrd	r4, [sp]
   17a40:	ldr	r6, [sp, #8]
   17a44:	add	sp, sp, #12
   17a48:	pop	{pc}		; (ldr pc, [sp], #4)
   17a4c:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17a50:	strd	r4, [sp, #-16]!
   17a54:	mov	r4, r1
   17a58:	str	r6, [sp, #8]
   17a5c:	mov	r6, r0
   17a60:	mov	r0, r1
   17a64:	str	lr, [sp, #12]
   17a68:	bl	18bd0 <__assert_fail@plt+0x7cc8>
   17a6c:	subs	r5, r0, #0
   17a70:	beq	17a94 <__assert_fail@plt+0x6b8c>
   17a74:	mov	r2, r4
   17a78:	mov	r1, r6
   17a7c:	bl	10d04 <memcpy@plt>
   17a80:	mov	r0, r5
   17a84:	ldrd	r4, [sp]
   17a88:	ldr	r6, [sp, #8]
   17a8c:	add	sp, sp, #12
   17a90:	pop	{pc}		; (ldr pc, [sp], #4)
   17a94:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17a98:	strd	r4, [sp, #-16]!
   17a9c:	mov	r4, r1
   17aa0:	str	r6, [sp, #8]
   17aa4:	mov	r6, r0
   17aa8:	add	r0, r1, #1
   17aac:	str	lr, [sp, #12]
   17ab0:	bl	18bd0 <__assert_fail@plt+0x7cc8>
   17ab4:	subs	r5, r0, #0
   17ab8:	beq	17ae4 <__assert_fail@plt+0x6bdc>
   17abc:	mov	r3, #0
   17ac0:	mov	r1, r6
   17ac4:	mov	r2, r4
   17ac8:	strb	r3, [r5, r4]
   17acc:	bl	10d04 <memcpy@plt>
   17ad0:	mov	r0, r5
   17ad4:	ldrd	r4, [sp]
   17ad8:	ldr	r6, [sp, #8]
   17adc:	add	sp, sp, #12
   17ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ae4:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17ae8:	strd	r4, [sp, #-16]!
   17aec:	str	r6, [sp, #8]
   17af0:	mov	r6, r0
   17af4:	str	lr, [sp, #12]
   17af8:	bl	10e18 <strlen@plt>
   17afc:	add	r4, r0, #1
   17b00:	mov	r0, r4
   17b04:	bl	18bd0 <__assert_fail@plt+0x7cc8>
   17b08:	subs	r5, r0, #0
   17b0c:	beq	17b30 <__assert_fail@plt+0x6c28>
   17b10:	mov	r2, r4
   17b14:	mov	r1, r6
   17b18:	bl	10d04 <memcpy@plt>
   17b1c:	mov	r0, r5
   17b20:	ldrd	r4, [sp]
   17b24:	ldr	r6, [sp, #8]
   17b28:	add	sp, sp, #12
   17b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b30:	bl	17b34 <__assert_fail@plt+0x6c2c>
   17b34:	movw	r3, #41196	; 0xa0ec
   17b38:	movt	r3, #2
   17b3c:	str	r4, [sp, #-8]!
   17b40:	ldr	r4, [r3]
   17b44:	mov	r2, #5
   17b48:	movw	r1, #39940	; 0x9c04
   17b4c:	movt	r1, #1
   17b50:	mov	r0, #0
   17b54:	str	lr, [sp, #4]
   17b58:	bl	10d4c <dcgettext@plt>
   17b5c:	mov	r3, r0
   17b60:	movw	r2, #38864	; 0x97d0
   17b64:	movt	r2, #1
   17b68:	mov	r1, #0
   17b6c:	mov	r0, r4
   17b70:	bl	10db8 <error@plt>
   17b74:	bl	10efc <abort@plt>
   17b78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17b7c:	strd	r6, [sp, #8]
   17b80:	mov	r6, r2
   17b84:	mov	r7, r3
   17b88:	str	r8, [sp, #16]
   17b8c:	mov	r2, r1
   17b90:	mov	r1, #0
   17b94:	str	lr, [sp, #20]
   17b98:	sub	sp, sp, #16
   17b9c:	mov	r8, r0
   17ba0:	ldr	ip, [sp, #48]	; 0x30
   17ba4:	add	r3, sp, #8
   17ba8:	str	ip, [sp]
   17bac:	bl	17e00 <__assert_fail@plt+0x6ef8>
   17bb0:	subs	r4, r0, #0
   17bb4:	bne	17c04 <__assert_fail@plt+0x6cfc>
   17bb8:	ldrd	r4, [sp, #8]
   17bbc:	ldrd	r0, [sp, #40]	; 0x28
   17bc0:	cmp	r5, r7
   17bc4:	cmpeq	r4, r6
   17bc8:	movcc	r3, #1
   17bcc:	movcs	r3, #0
   17bd0:	cmp	r5, r1
   17bd4:	cmpeq	r4, r0
   17bd8:	orrhi	r3, r3, #1
   17bdc:	cmp	r3, #0
   17be0:	bne	17c84 <__assert_fail@plt+0x6d7c>
   17be4:	mov	r0, r4
   17be8:	mov	r1, r5
   17bec:	add	sp, sp, #16
   17bf0:	ldrd	r4, [sp]
   17bf4:	ldrd	r6, [sp, #8]
   17bf8:	ldr	r8, [sp, #16]
   17bfc:	add	sp, sp, #20
   17c00:	pop	{pc}		; (ldr pc, [sp], #4)
   17c04:	bl	10e30 <__errno_location@plt>
   17c08:	cmp	r4, #1
   17c0c:	moveq	r3, #75	; 0x4b
   17c10:	moveq	r4, r3
   17c14:	streq	r3, [r0]
   17c18:	beq	17c6c <__assert_fail@plt+0x6d64>
   17c1c:	cmp	r4, #3
   17c20:	beq	17c60 <__assert_fail@plt+0x6d58>
   17c24:	ldr	r3, [sp, #56]	; 0x38
   17c28:	ldr	r4, [r0]
   17c2c:	cmp	r3, #0
   17c30:	beq	17c78 <__assert_fail@plt+0x6d70>
   17c34:	cmp	r4, #22
   17c38:	moveq	r4, #0
   17c3c:	mov	r0, r8
   17c40:	bl	16ca8 <__assert_fail@plt+0x5da0>
   17c44:	movw	r2, #38860	; 0x97cc
   17c48:	movt	r2, #1
   17c4c:	str	r0, [sp]
   17c50:	mov	r1, r4
   17c54:	ldr	r3, [sp, #52]	; 0x34
   17c58:	ldr	r0, [sp, #56]	; 0x38
   17c5c:	bl	10db8 <error@plt>
   17c60:	mov	r3, #0
   17c64:	mov	r4, r3
   17c68:	str	r3, [r0]
   17c6c:	ldr	r3, [sp, #56]	; 0x38
   17c70:	cmp	r3, #0
   17c74:	bne	17c3c <__assert_fail@plt+0x6d34>
   17c78:	mov	r3, #1
   17c7c:	str	r3, [sp, #56]	; 0x38
   17c80:	b	17c34 <__assert_fail@plt+0x6d2c>
   17c84:	bl	10e30 <__errno_location@plt>
   17c88:	mov	r3, #0
   17c8c:	mvn	r2, #-1073741824	; 0xc0000000
   17c90:	cmp	r5, r3
   17c94:	cmpeq	r4, r2
   17c98:	movhi	r3, #75	; 0x4b
   17c9c:	movls	r3, #34	; 0x22
   17ca0:	mov	r4, r3
   17ca4:	str	r3, [r0]
   17ca8:	ldr	r3, [sp, #56]	; 0x38
   17cac:	cmp	r3, #0
   17cb0:	moveq	r3, #1
   17cb4:	str	r3, [sp, #56]	; 0x38
   17cb8:	b	17c3c <__assert_fail@plt+0x6d34>
   17cbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17cc0:	mov	r1, #0
   17cc4:	strd	r6, [sp, #8]
   17cc8:	mov	r6, r2
   17ccc:	mov	r7, r3
   17cd0:	str	r8, [sp, #16]
   17cd4:	mov	r2, #10
   17cd8:	mov	r8, r0
   17cdc:	str	lr, [sp, #20]
   17ce0:	sub	sp, sp, #16
   17ce4:	ldr	ip, [sp, #48]	; 0x30
   17ce8:	add	r3, sp, #8
   17cec:	str	ip, [sp]
   17cf0:	bl	17e00 <__assert_fail@plt+0x6ef8>
   17cf4:	subs	r4, r0, #0
   17cf8:	bne	17d48 <__assert_fail@plt+0x6e40>
   17cfc:	ldrd	r4, [sp, #8]
   17d00:	ldrd	r0, [sp, #40]	; 0x28
   17d04:	cmp	r7, r5
   17d08:	cmpeq	r6, r4
   17d0c:	movhi	r3, #1
   17d10:	movls	r3, #0
   17d14:	cmp	r1, r5
   17d18:	cmpeq	r0, r4
   17d1c:	orrcc	r3, r3, #1
   17d20:	cmp	r3, #0
   17d24:	bne	17dc8 <__assert_fail@plt+0x6ec0>
   17d28:	mov	r0, r4
   17d2c:	mov	r1, r5
   17d30:	add	sp, sp, #16
   17d34:	ldrd	r4, [sp]
   17d38:	ldrd	r6, [sp, #8]
   17d3c:	ldr	r8, [sp, #16]
   17d40:	add	sp, sp, #20
   17d44:	pop	{pc}		; (ldr pc, [sp], #4)
   17d48:	bl	10e30 <__errno_location@plt>
   17d4c:	cmp	r4, #1
   17d50:	moveq	r3, #75	; 0x4b
   17d54:	moveq	r4, r3
   17d58:	streq	r3, [r0]
   17d5c:	beq	17db8 <__assert_fail@plt+0x6eb0>
   17d60:	cmp	r4, #3
   17d64:	beq	17dac <__assert_fail@plt+0x6ea4>
   17d68:	ldr	r3, [sp, #56]	; 0x38
   17d6c:	ldr	r4, [r0]
   17d70:	cmp	r3, #0
   17d74:	bne	17d80 <__assert_fail@plt+0x6e78>
   17d78:	mov	r3, #1
   17d7c:	str	r3, [sp, #56]	; 0x38
   17d80:	cmp	r4, #22
   17d84:	moveq	r4, #0
   17d88:	mov	r0, r8
   17d8c:	bl	16ca8 <__assert_fail@plt+0x5da0>
   17d90:	movw	r2, #38860	; 0x97cc
   17d94:	movt	r2, #1
   17d98:	str	r0, [sp]
   17d9c:	mov	r1, r4
   17da0:	ldr	r3, [sp, #52]	; 0x34
   17da4:	ldr	r0, [sp, #56]	; 0x38
   17da8:	bl	10db8 <error@plt>
   17dac:	mov	r3, #0
   17db0:	mov	r4, r3
   17db4:	str	r3, [r0]
   17db8:	ldr	r3, [sp, #56]	; 0x38
   17dbc:	cmp	r3, #0
   17dc0:	bne	17d88 <__assert_fail@plt+0x6e80>
   17dc4:	b	17d78 <__assert_fail@plt+0x6e70>
   17dc8:	bl	10e30 <__errno_location@plt>
   17dcc:	mov	r3, #0
   17dd0:	mvn	r2, #-1073741824	; 0xc0000000
   17dd4:	cmp	r5, r3
   17dd8:	cmpeq	r4, r2
   17ddc:	movhi	r3, #75	; 0x4b
   17de0:	movls	r3, #34	; 0x22
   17de4:	mov	r4, r3
   17de8:	str	r3, [r0]
   17dec:	ldr	r3, [sp, #56]	; 0x38
   17df0:	cmp	r3, #0
   17df4:	moveq	r3, #1
   17df8:	str	r3, [sp, #56]	; 0x38
   17dfc:	b	17d88 <__assert_fail@plt+0x6e80>
   17e00:	cmp	r2, #36	; 0x24
   17e04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e08:	strd	r6, [sp, #8]
   17e0c:	strd	r8, [sp, #16]
   17e10:	strd	sl, [sp, #24]
   17e14:	str	lr, [sp, #32]
   17e18:	sub	sp, sp, #36	; 0x24
   17e1c:	bhi	18a94 <__assert_fail@plt+0x7b8c>
   17e20:	cmp	r1, #0
   17e24:	mov	r6, r2
   17e28:	mov	r5, r1
   17e2c:	mov	sl, r0
   17e30:	addeq	r5, sp, #28
   17e34:	mov	r9, r3
   17e38:	bl	10e30 <__errno_location@plt>
   17e3c:	mov	r3, #0
   17e40:	mov	fp, r0
   17e44:	str	r3, [r0]
   17e48:	ldrb	r4, [sl]
   17e4c:	bl	10e00 <__ctype_b_loc@plt>
   17e50:	ldr	r2, [r0]
   17e54:	lsl	r3, r4, #1
   17e58:	ldrh	r3, [r2, r3]
   17e5c:	tst	r3, #8192	; 0x2000
   17e60:	beq	17e7c <__assert_fail@plt+0x6f74>
   17e64:	mov	r3, sl
   17e68:	ldrb	r4, [r3, #1]!
   17e6c:	lsl	r1, r4, #1
   17e70:	ldrh	r1, [r2, r1]
   17e74:	tst	r1, #8192	; 0x2000
   17e78:	bne	17e68 <__assert_fail@plt+0x6f60>
   17e7c:	cmp	r4, #45	; 0x2d
   17e80:	beq	17f1c <__assert_fail@plt+0x7014>
   17e84:	mov	r2, r6
   17e88:	mov	r3, #0
   17e8c:	mov	r1, r5
   17e90:	mov	r0, sl
   17e94:	bl	10d10 <__strtoull_internal@plt>
   17e98:	ldr	r8, [r5]
   17e9c:	mov	r6, r0
   17ea0:	mov	r7, r1
   17ea4:	cmp	r8, sl
   17ea8:	beq	17f04 <__assert_fail@plt+0x6ffc>
   17eac:	ldr	r4, [fp]
   17eb0:	cmp	r4, #0
   17eb4:	bne	17ef4 <__assert_fail@plt+0x6fec>
   17eb8:	ldr	r3, [sp, #72]	; 0x48
   17ebc:	cmp	r3, #0
   17ec0:	beq	17ed0 <__assert_fail@plt+0x6fc8>
   17ec4:	ldrb	sl, [r8]
   17ec8:	cmp	sl, #0
   17ecc:	bne	18288 <__assert_fail@plt+0x7380>
   17ed0:	strd	r6, [r9]
   17ed4:	mov	r0, r4
   17ed8:	add	sp, sp, #36	; 0x24
   17edc:	ldrd	r4, [sp]
   17ee0:	ldrd	r6, [sp, #8]
   17ee4:	ldrd	r8, [sp, #16]
   17ee8:	ldrd	sl, [sp, #24]
   17eec:	add	sp, sp, #32
   17ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ef4:	cmp	r4, #34	; 0x22
   17ef8:	bne	17f1c <__assert_fail@plt+0x7014>
   17efc:	mov	r4, #1
   17f00:	b	17eb8 <__assert_fail@plt+0x6fb0>
   17f04:	ldr	r3, [sp, #72]	; 0x48
   17f08:	cmp	r3, #0
   17f0c:	beq	17f1c <__assert_fail@plt+0x7014>
   17f10:	ldrb	sl, [sl]
   17f14:	cmp	sl, #0
   17f18:	bne	17f24 <__assert_fail@plt+0x701c>
   17f1c:	mov	r4, #4
   17f20:	b	17ed4 <__assert_fail@plt+0x6fcc>
   17f24:	mov	r1, sl
   17f28:	mov	r0, r3
   17f2c:	bl	10e24 <strchr@plt>
   17f30:	cmp	r0, #0
   17f34:	movne	r4, #0
   17f38:	movne	r6, #1
   17f3c:	movne	r7, r4
   17f40:	beq	17f1c <__assert_fail@plt+0x7014>
   17f44:	sub	r3, sl, #69	; 0x45
   17f48:	cmp	r3, #47	; 0x2f
   17f4c:	ldrls	pc, [pc, r3, lsl #2]
   17f50:	b	18058 <__assert_fail@plt+0x7150>
   17f54:	andeq	r8, r1, r4, lsl r0
   17f58:	andeq	r8, r1, r8, asr r0
   17f5c:	andeq	r8, r1, r4, lsl r0
   17f60:	andeq	r8, r1, r8, asr r0
   17f64:	andeq	r8, r1, r8, asr r0
   17f68:	andeq	r8, r1, r8, asr r0
   17f6c:	andeq	r8, r1, r4, lsl r0
   17f70:	andeq	r8, r1, r8, asr r0
   17f74:	andeq	r8, r1, r4, lsl r0
   17f78:	andeq	r8, r1, r8, asr r0
   17f7c:	andeq	r8, r1, r8, asr r0
   17f80:	andeq	r8, r1, r4, lsl r0
   17f84:	andeq	r8, r1, r8, asr r0
   17f88:	andeq	r8, r1, r8, asr r0
   17f8c:	andeq	r8, r1, r8, asr r0
   17f90:	andeq	r8, r1, r4, lsl r0
   17f94:	andeq	r8, r1, r8, asr r0
   17f98:	andeq	r8, r1, r8, asr r0
   17f9c:	andeq	r8, r1, r8, asr r0
   17fa0:	andeq	r8, r1, r8, asr r0
   17fa4:	andeq	r8, r1, r4, lsl r0
   17fa8:	andeq	r8, r1, r4, lsl r0
   17fac:	andeq	r8, r1, r8, asr r0
   17fb0:	andeq	r8, r1, r8, asr r0
   17fb4:	andeq	r8, r1, r8, asr r0
   17fb8:	andeq	r8, r1, r8, asr r0
   17fbc:	andeq	r8, r1, r8, asr r0
   17fc0:	andeq	r8, r1, r8, asr r0
   17fc4:	andeq	r8, r1, r8, asr r0
   17fc8:	andeq	r8, r1, r8, asr r0
   17fcc:	andeq	r8, r1, r8, asr r0
   17fd0:	andeq	r8, r1, r8, asr r0
   17fd4:	andeq	r8, r1, r8, asr r0
   17fd8:	andeq	r8, r1, r8, asr r0
   17fdc:	andeq	r8, r1, r4, lsl r0
   17fe0:	andeq	r8, r1, r8, asr r0
   17fe4:	andeq	r8, r1, r8, asr r0
   17fe8:	andeq	r8, r1, r8, asr r0
   17fec:	andeq	r8, r1, r4, lsl r0
   17ff0:	andeq	r8, r1, r8, asr r0
   17ff4:	andeq	r8, r1, r4, lsl r0
   17ff8:	andeq	r8, r1, r8, asr r0
   17ffc:	andeq	r8, r1, r8, asr r0
   18000:	andeq	r8, r1, r8, asr r0
   18004:	andeq	r8, r1, r8, asr r0
   18008:	andeq	r8, r1, r8, asr r0
   1800c:	andeq	r8, r1, r8, asr r0
   18010:	andeq	r8, r1, r4, lsl r0
   18014:	mov	r1, #48	; 0x30
   18018:	ldr	r0, [sp, #72]	; 0x48
   1801c:	bl	10e24 <strchr@plt>
   18020:	cmp	r0, #0
   18024:	beq	18058 <__assert_fail@plt+0x7150>
   18028:	ldrb	r3, [r8, #1]
   1802c:	cmp	r3, #68	; 0x44
   18030:	beq	185e8 <__assert_fail@plt+0x76e0>
   18034:	cmp	r3, #105	; 0x69
   18038:	beq	182a0 <__assert_fail@plt+0x7398>
   1803c:	cmp	r3, #66	; 0x42
   18040:	moveq	r3, #2
   18044:	movne	r3, #1
   18048:	moveq	ip, #1000	; 0x3e8
   1804c:	movne	ip, #1024	; 0x400
   18050:	str	r3, [sp, #12]
   18054:	b	18064 <__assert_fail@plt+0x715c>
   18058:	mov	r3, #1
   1805c:	mov	ip, #1024	; 0x400
   18060:	str	r3, [sp, #12]
   18064:	sub	sl, sl, #66	; 0x42
   18068:	cmp	sl, #53	; 0x35
   1806c:	ldrls	pc, [pc, sl, lsl #2]
   18070:	b	1824c <__assert_fail@plt+0x7344>
   18074:	andeq	r8, r1, r4, lsr r5
   18078:	andeq	r8, r1, ip, asr #4
   1807c:	andeq	r8, r1, ip, asr #4
   18080:	ldrdeq	r8, [r1], -r4
   18084:	andeq	r8, r1, ip, asr #4
   18088:	andeq	r8, r1, r0, asr r5
   1808c:	andeq	r8, r1, ip, asr #4
   18090:	andeq	r8, r1, ip, asr #4
   18094:	andeq	r8, r1, ip, asr #4
   18098:	andeq	r8, r1, r4, asr r2
   1809c:	andeq	r8, r1, ip, asr #4
   180a0:	andeq	r8, r1, ip, ror r4
   180a4:	andeq	r8, r1, ip, asr #4
   180a8:	andeq	r8, r1, ip, asr #4
   180ac:	andeq	r8, r1, r0, lsr #8
   180b0:	andeq	r8, r1, ip, asr #4
   180b4:	andeq	r8, r1, ip, asr #4
   180b8:	andeq	r8, r1, ip, asr #4
   180bc:	andeq	r8, r1, r0, asr #7
   180c0:	andeq	r8, r1, ip, asr #4
   180c4:	andeq	r8, r1, ip, asr #4
   180c8:	andeq	r8, r1, ip, asr #4
   180cc:	andeq	r8, r1, ip, asr #4
   180d0:	strdeq	r8, [r1], -r4
   180d4:	andeq	r8, r1, ip, asr #2
   180d8:	andeq	r8, r1, ip, asr #4
   180dc:	andeq	r8, r1, ip, asr #4
   180e0:	andeq	r8, r1, ip, asr #4
   180e4:	andeq	r8, r1, ip, asr #4
   180e8:	andeq	r8, r1, ip, asr #4
   180ec:	andeq	r8, r1, ip, asr #4
   180f0:	andeq	r8, r1, ip, asr #4
   180f4:	ldrdeq	r8, [r1], -r4
   180f8:	andeq	r8, r1, r4, lsr r2
   180fc:	andeq	r8, r1, ip, asr #4
   18100:	andeq	r8, r1, ip, asr #4
   18104:	andeq	r8, r1, ip, asr #4
   18108:	andeq	r8, r1, r0, asr r5
   1810c:	andeq	r8, r1, ip, asr #4
   18110:	andeq	r8, r1, ip, asr #4
   18114:	andeq	r8, r1, ip, asr #4
   18118:	andeq	r8, r1, r4, asr r2
   1811c:	andeq	r8, r1, ip, asr #4
   18120:	andeq	r8, r1, ip, ror r4
   18124:	andeq	r8, r1, ip, asr #4
   18128:	andeq	r8, r1, ip, asr #4
   1812c:	andeq	r8, r1, ip, asr #4
   18130:	andeq	r8, r1, ip, asr #4
   18134:	andeq	r8, r1, ip, asr #4
   18138:	andeq	r8, r1, ip, asr #4
   1813c:	andeq	r8, r1, r0, asr #7
   18140:	andeq	r8, r1, ip, asr #4
   18144:	andeq	r8, r1, ip, asr #4
   18148:			; <UNDEFINED> instruction: 0x000182bc
   1814c:	asr	r3, ip, #31
   18150:	mov	r2, ip
   18154:	cmp	r7, #0
   18158:	mov	r1, #0
   1815c:	strd	r2, [sp]
   18160:	bne	186a0 <__assert_fail@plt+0x7798>
   18164:	umull	r6, r7, r6, ip
   18168:	mov	r2, r6
   1816c:	mov	r3, r7
   18170:	cmp	r1, #0
   18174:	bne	185b4 <__assert_fail@plt+0x76ac>
   18178:	cmp	r3, #0
   1817c:	mov	lr, r1
   18180:	bne	187cc <__assert_fail@plt+0x78c4>
   18184:	umull	r2, r3, r2, ip
   18188:	mov	r0, r2
   1818c:	mov	r1, r3
   18190:	cmp	lr, #0
   18194:	bne	185b4 <__assert_fail@plt+0x76ac>
   18198:	cmp	r1, #0
   1819c:	bne	187a8 <__assert_fail@plt+0x78a0>
   181a0:	umull	r0, r1, r0, ip
   181a4:	mov	r2, r0
   181a8:	mov	r3, r1
   181ac:	cmp	lr, #0
   181b0:	bne	185b4 <__assert_fail@plt+0x76ac>
   181b4:	cmp	r3, #0
   181b8:	bne	18458 <__assert_fail@plt+0x7550>
   181bc:	umull	r2, r3, r2, ip
   181c0:	mov	r0, r2
   181c4:	mov	r1, r3
   181c8:	cmp	lr, #0
   181cc:	bne	185b4 <__assert_fail@plt+0x76ac>
   181d0:	cmp	r1, #0
   181d4:	bne	18658 <__assert_fail@plt+0x7750>
   181d8:	umull	r0, r1, r0, ip
   181dc:	mov	r2, r0
   181e0:	mov	r3, r1
   181e4:	cmp	lr, #0
   181e8:	bne	185b4 <__assert_fail@plt+0x76ac>
   181ec:	cmp	r3, #0
   181f0:	mov	r7, lr
   181f4:	bne	18634 <__assert_fail@plt+0x772c>
   181f8:	umull	r2, r3, r2, ip
   181fc:	mov	r6, r2
   18200:	mov	lr, r3
   18204:	cmp	r7, #0
   18208:	bne	185b4 <__assert_fail@plt+0x76ac>
   1820c:	cmp	lr, #0
   18210:	bne	185f8 <__assert_fail@plt+0x76f0>
   18214:	umull	r2, r3, r6, ip
   18218:	mov	r0, r2
   1821c:	mov	r2, r3
   18220:	subs	r3, r7, #0
   18224:	bne	185b4 <__assert_fail@plt+0x76ac>
   18228:	mov	r6, r0
   1822c:	mov	r7, r2
   18230:	orr	r4, r4, r3
   18234:	ldr	r2, [sp, #12]
   18238:	add	r3, r8, r2
   1823c:	str	r3, [r5]
   18240:	ldrb	r3, [r8, r2]
   18244:	cmp	r3, #0
   18248:	beq	17ed0 <__assert_fail@plt+0x6fc8>
   1824c:	orr	r4, r4, #2
   18250:	b	17ed0 <__assert_fail@plt+0x6fc8>
   18254:	cmp	r7, #0
   18258:	asr	r1, ip, #31
   1825c:	mov	lr, #0
   18260:	bne	185c4 <__assert_fail@plt+0x76bc>
   18264:	umull	r2, r3, r6, ip
   18268:	mov	r6, r2
   1826c:	mov	r7, r3
   18270:	cmp	lr, #0
   18274:	beq	18234 <__assert_fail@plt+0x732c>
   18278:	mvn	r6, #0
   1827c:	mov	r4, #1
   18280:	mov	r7, r6
   18284:	b	18234 <__assert_fail@plt+0x732c>
   18288:	mov	r0, r3
   1828c:	mov	r1, sl
   18290:	bl	10e24 <strchr@plt>
   18294:	cmp	r0, #0
   18298:	bne	17f44 <__assert_fail@plt+0x703c>
   1829c:	b	1824c <__assert_fail@plt+0x7344>
   182a0:	ldrb	r3, [r8, #2]
   182a4:	mov	ip, #1024	; 0x400
   182a8:	cmp	r3, #66	; 0x42
   182ac:	movne	r3, #1
   182b0:	moveq	r3, #3
   182b4:	str	r3, [sp, #12]
   182b8:	b	18064 <__assert_fail@plt+0x715c>
   182bc:	lsr	r3, r7, #31
   182c0:	adds	r6, r6, r6
   182c4:	adc	r7, r7, r7
   182c8:	cmp	r3, #0
   182cc:	beq	18234 <__assert_fail@plt+0x732c>
   182d0:	b	18278 <__assert_fail@plt+0x7370>
   182d4:	lsr	r3, r7, #23
   182d8:	lsl	r7, r7, #9
   182dc:	cmp	r3, #0
   182e0:	lsl	r3, r6, #9
   182e4:	orr	r7, r7, r6, lsr #23
   182e8:	bne	18278 <__assert_fail@plt+0x7370>
   182ec:	mov	r6, r3
   182f0:	b	18234 <__assert_fail@plt+0x732c>
   182f4:	asr	r3, ip, #31
   182f8:	mov	r2, ip
   182fc:	cmp	r7, #0
   18300:	mov	r1, #0
   18304:	strd	r2, [sp]
   18308:	bne	18714 <__assert_fail@plt+0x780c>
   1830c:	umull	r6, r7, r6, ip
   18310:	mov	r0, r6
   18314:	mov	fp, r7
   18318:	cmp	r1, #0
   1831c:	bne	185b4 <__assert_fail@plt+0x76ac>
   18320:	cmp	fp, #0
   18324:	mov	lr, r1
   18328:	bne	188a4 <__assert_fail@plt+0x799c>
   1832c:	umull	r0, r1, r0, ip
   18330:	mov	r2, r0
   18334:	mov	r3, r1
   18338:	cmp	lr, #0
   1833c:	bne	185b4 <__assert_fail@plt+0x76ac>
   18340:	cmp	r3, #0
   18344:	bne	188cc <__assert_fail@plt+0x79c4>
   18348:	umull	r2, r3, r2, ip
   1834c:	mov	r0, r2
   18350:	mov	r1, r3
   18354:	cmp	lr, #0
   18358:	bne	185b4 <__assert_fail@plt+0x76ac>
   1835c:	cmp	r1, #0
   18360:	bne	1884c <__assert_fail@plt+0x7944>
   18364:	umull	r0, r1, r0, ip
   18368:	mov	r2, r0
   1836c:	mov	r3, r1
   18370:	cmp	lr, #0
   18374:	bne	185b4 <__assert_fail@plt+0x76ac>
   18378:	cmp	r3, #0
   1837c:	bne	1867c <__assert_fail@plt+0x7774>
   18380:	umull	r2, r3, r2, ip
   18384:	mov	r0, r2
   18388:	mov	r1, r3
   1838c:	cmp	lr, #0
   18390:	bne	185b4 <__assert_fail@plt+0x76ac>
   18394:	cmp	r1, #0
   18398:	beq	181d8 <__assert_fail@plt+0x72d0>
   1839c:	umull	r6, r7, r0, ip
   183a0:	mov	fp, lr
   183a4:	mov	sl, r7
   183a8:	umlal	sl, fp, r1, ip
   183ac:	cmp	fp, #0
   183b0:	bne	18ab4 <__assert_fail@plt+0x7bac>
   183b4:	mov	r2, r6
   183b8:	mov	r3, sl
   183bc:	b	181e4 <__assert_fail@plt+0x72dc>
   183c0:	asr	r3, ip, #31
   183c4:	mov	r2, ip
   183c8:	cmp	r7, #0
   183cc:	mov	r1, #0
   183d0:	strd	r2, [sp]
   183d4:	bne	18738 <__assert_fail@plt+0x7830>
   183d8:	umull	r6, r7, r6, ip
   183dc:	mov	r0, r6
   183e0:	mov	fp, r7
   183e4:	cmp	r1, #0
   183e8:	bne	185b4 <__assert_fail@plt+0x76ac>
   183ec:	cmp	fp, #0
   183f0:	mov	lr, r1
   183f4:	beq	181d8 <__assert_fail@plt+0x72d0>
   183f8:	umull	r6, r7, r0, ip
   183fc:	mov	r3, r1
   18400:	mov	r2, r7
   18404:	umlal	r2, r3, fp, ip
   18408:	cmp	r3, #0
   1840c:	strd	r2, [sp, #16]
   18410:	bne	18998 <__assert_fail@plt+0x7a90>
   18414:	mov	r2, r6
   18418:	ldr	r3, [sp, #16]
   1841c:	b	181e4 <__assert_fail@plt+0x72dc>
   18420:	asr	r3, ip, #31
   18424:	mov	r2, ip
   18428:	cmp	r7, #0
   1842c:	mov	r1, #0
   18430:	strd	r2, [sp]
   18434:	bne	18780 <__assert_fail@plt+0x7878>
   18438:	umull	r6, r7, r6, ip
   1843c:	mov	r2, r6
   18440:	mov	r3, r7
   18444:	cmp	r1, #0
   18448:	bne	185b4 <__assert_fail@plt+0x76ac>
   1844c:	cmp	r3, #0
   18450:	mov	lr, r1
   18454:	beq	181bc <__assert_fail@plt+0x72b4>
   18458:	umull	r6, r7, r2, ip
   1845c:	mov	fp, lr
   18460:	mov	sl, r7
   18464:	umlal	sl, fp, r3, ip
   18468:	cmp	fp, #0
   1846c:	bne	18a78 <__assert_fail@plt+0x7b70>
   18470:	mov	r0, r6
   18474:	mov	r1, sl
   18478:	b	181c8 <__assert_fail@plt+0x72c0>
   1847c:	asr	r3, ip, #31
   18480:	mov	r2, ip
   18484:	cmp	r7, #0
   18488:	mov	r1, #0
   1848c:	strd	r2, [sp]
   18490:	bne	1875c <__assert_fail@plt+0x7854>
   18494:	umull	r6, r7, r6, ip
   18498:	mov	sl, r6
   1849c:	mov	lr, r7
   184a0:	cmp	r1, #0
   184a4:	bne	18278 <__assert_fail@plt+0x7370>
   184a8:	cmp	lr, #0
   184ac:	mov	r7, r1
   184b0:	bne	18870 <__assert_fail@plt+0x7968>
   184b4:	umull	sl, fp, sl, ip
   184b8:	mov	r0, sl
   184bc:	mov	r2, fp
   184c0:	cmp	r7, #0
   184c4:	mov	r6, r0
   184c8:	mov	r7, r2
   184cc:	beq	18234 <__assert_fail@plt+0x732c>
   184d0:	b	18278 <__assert_fail@plt+0x7370>
   184d4:	asr	r3, ip, #31
   184d8:	mov	r2, ip
   184dc:	cmp	r7, #0
   184e0:	mov	r1, #0
   184e4:	strd	r2, [sp]
   184e8:	bne	186f0 <__assert_fail@plt+0x77e8>
   184ec:	umull	r6, r7, r6, ip
   184f0:	mov	r0, r6
   184f4:	mov	fp, r7
   184f8:	cmp	r1, #0
   184fc:	bne	185b4 <__assert_fail@plt+0x76ac>
   18500:	cmp	fp, #0
   18504:	mov	lr, r1
   18508:	beq	18364 <__assert_fail@plt+0x745c>
   1850c:	umull	r6, r7, r0, ip
   18510:	mov	r3, r1
   18514:	mov	r2, r7
   18518:	umlal	r2, r3, fp, ip
   1851c:	cmp	r3, #0
   18520:	strd	r2, [sp, #16]
   18524:	bne	18a08 <__assert_fail@plt+0x7b00>
   18528:	mov	r2, r6
   1852c:	ldr	r3, [sp, #16]
   18530:	b	18370 <__assert_fail@plt+0x7468>
   18534:	lsr	r3, r7, #22
   18538:	lsl	r7, r7, #10
   1853c:	cmp	r3, #0
   18540:	lsl	r3, r6, #10
   18544:	orr	r7, r7, r6, lsr #22
   18548:	beq	182ec <__assert_fail@plt+0x73e4>
   1854c:	b	18278 <__assert_fail@plt+0x7370>
   18550:	asr	r3, ip, #31
   18554:	mov	r2, ip
   18558:	cmp	r7, #0
   1855c:	mov	r1, #0
   18560:	strd	r2, [sp]
   18564:	bne	186c8 <__assert_fail@plt+0x77c0>
   18568:	umull	r6, r7, r6, ip
   1856c:	mov	r2, r6
   18570:	mov	r3, r7
   18574:	cmp	r1, #0
   18578:	bne	18278 <__assert_fail@plt+0x7370>
   1857c:	cmp	r3, #0
   18580:	mov	r7, r1
   18584:	bne	1882c <__assert_fail@plt+0x7924>
   18588:	umull	r2, r3, r2, ip
   1858c:	mov	r6, r2
   18590:	mov	lr, r3
   18594:	cmp	r7, #0
   18598:	bne	18278 <__assert_fail@plt+0x7370>
   1859c:	cmp	lr, #0
   185a0:	bne	187f0 <__assert_fail@plt+0x78e8>
   185a4:	umull	r2, r3, r6, ip
   185a8:	mov	r0, r2
   185ac:	mov	r2, r3
   185b0:	b	184c0 <__assert_fail@plt+0x75b8>
   185b4:	mvn	r6, #0
   185b8:	mov	r3, #1
   185bc:	mov	r7, r6
   185c0:	b	18230 <__assert_fail@plt+0x7328>
   185c4:	umull	sl, fp, r6, ip
   185c8:	mov	r3, lr
   185cc:	mov	r2, fp
   185d0:	umlal	r2, r3, r7, ip
   185d4:	cmp	r3, #0
   185d8:	bne	189d0 <__assert_fail@plt+0x7ac8>
   185dc:	mov	r6, sl
   185e0:	mov	r7, r2
   185e4:	b	18270 <__assert_fail@plt+0x7368>
   185e8:	mov	r3, #2
   185ec:	mov	ip, #1000	; 0x3e8
   185f0:	str	r3, [sp, #12]
   185f4:	b	18064 <__assert_fail@plt+0x715c>
   185f8:	umull	r0, r1, r6, ip
   185fc:	mov	r3, r7
   18600:	mov	r2, r1
   18604:	strd	r0, [sp, #16]
   18608:	umlal	r2, r3, lr, ip
   1860c:	cmp	r3, #0
   18610:	beq	18220 <__assert_fail@plt+0x7318>
   18614:	ldrd	sl, [sp]
   18618:	mov	r7, #1
   1861c:	ldr	r0, [sp, #16]
   18620:	ldr	r3, [sp, #20]
   18624:	mul	r2, r6, fp
   18628:	mla	r2, lr, sl, r2
   1862c:	add	r2, r2, r3
   18630:	b	18220 <__assert_fail@plt+0x7318>
   18634:	umull	sl, fp, r2, ip
   18638:	mov	r1, lr
   1863c:	mov	r0, fp
   18640:	umlal	r0, r1, r3, ip
   18644:	cmp	r1, #0
   18648:	bne	18928 <__assert_fail@plt+0x7a20>
   1864c:	mov	r6, sl
   18650:	mov	lr, r0
   18654:	b	18204 <__assert_fail@plt+0x72fc>
   18658:	umull	sl, fp, r0, ip
   1865c:	mov	r7, lr
   18660:	mov	r6, fp
   18664:	umlal	r6, r7, r1, ip
   18668:	cmp	r7, #0
   1866c:	bne	18ad0 <__assert_fail@plt+0x7bc8>
   18670:	mov	r2, sl
   18674:	mov	r3, r6
   18678:	b	181e4 <__assert_fail@plt+0x72dc>
   1867c:	umull	sl, fp, r2, ip
   18680:	mov	r7, lr
   18684:	mov	r6, fp
   18688:	umlal	r6, r7, r3, ip
   1868c:	cmp	r7, #0
   18690:	bne	18960 <__assert_fail@plt+0x7a58>
   18694:	mov	r0, sl
   18698:	mov	r1, r6
   1869c:	b	1838c <__assert_fail@plt+0x7484>
   186a0:	umull	sl, fp, r6, ip
   186a4:	mov	r3, r1
   186a8:	mov	r2, fp
   186ac:	umlal	r2, r3, r7, ip
   186b0:	cmp	r3, #0
   186b4:	strd	r2, [sp, #16]
   186b8:	bne	18944 <__assert_fail@plt+0x7a3c>
   186bc:	mov	r2, sl
   186c0:	ldr	r3, [sp, #16]
   186c4:	b	18170 <__assert_fail@plt+0x7268>
   186c8:	umull	sl, fp, r6, ip
   186cc:	mov	r3, r1
   186d0:	mov	r2, fp
   186d4:	umlal	r2, r3, r7, ip
   186d8:	cmp	r3, #0
   186dc:	strd	r2, [sp, #16]
   186e0:	bne	18a24 <__assert_fail@plt+0x7b1c>
   186e4:	mov	r2, sl
   186e8:	ldr	r3, [sp, #16]
   186ec:	b	18574 <__assert_fail@plt+0x766c>
   186f0:	umull	sl, fp, r6, ip
   186f4:	mov	r3, r1
   186f8:	mov	r2, fp
   186fc:	umlal	r2, r3, r7, ip
   18700:	cmp	r3, #0
   18704:	bne	188f0 <__assert_fail@plt+0x79e8>
   18708:	mov	r0, sl
   1870c:	mov	fp, r2
   18710:	b	184f8 <__assert_fail@plt+0x75f0>
   18714:	umull	sl, fp, r6, ip
   18718:	mov	r3, r1
   1871c:	mov	r2, fp
   18720:	umlal	r2, r3, r7, ip
   18724:	cmp	r3, #0
   18728:	bne	189b4 <__assert_fail@plt+0x7aac>
   1872c:	mov	r0, sl
   18730:	mov	fp, r2
   18734:	b	18318 <__assert_fail@plt+0x7410>
   18738:	umull	sl, fp, r6, ip
   1873c:	mov	r3, r1
   18740:	mov	r2, fp
   18744:	umlal	r2, r3, r7, ip
   18748:	cmp	r3, #0
   1874c:	bne	18a40 <__assert_fail@plt+0x7b38>
   18750:	mov	r0, sl
   18754:	mov	fp, r2
   18758:	b	183e4 <__assert_fail@plt+0x74dc>
   1875c:	umull	sl, fp, r6, ip
   18760:	mov	r3, r1
   18764:	mov	r2, fp
   18768:	strd	sl, [sp, #16]
   1876c:	umlal	r2, r3, r7, ip
   18770:	cmp	r3, #0
   18774:	bne	189e8 <__assert_fail@plt+0x7ae0>
   18778:	mov	lr, r2
   1877c:	b	184a0 <__assert_fail@plt+0x7598>
   18780:	umull	sl, fp, r6, ip
   18784:	mov	r3, r1
   18788:	mov	r2, fp
   1878c:	umlal	r2, r3, r7, ip
   18790:	cmp	r3, #0
   18794:	strd	r2, [sp, #16]
   18798:	bne	18aec <__assert_fail@plt+0x7be4>
   1879c:	mov	r2, sl
   187a0:	ldr	r3, [sp, #16]
   187a4:	b	18444 <__assert_fail@plt+0x753c>
   187a8:	umull	sl, fp, r0, ip
   187ac:	mov	r7, lr
   187b0:	mov	r6, fp
   187b4:	umlal	r6, r7, r1, ip
   187b8:	cmp	r7, #0
   187bc:	bne	18b08 <__assert_fail@plt+0x7c00>
   187c0:	mov	r2, sl
   187c4:	mov	r3, r6
   187c8:	b	181ac <__assert_fail@plt+0x72a4>
   187cc:	umull	r6, r7, r2, ip
   187d0:	mov	fp, r1
   187d4:	mov	sl, r7
   187d8:	umlal	sl, fp, r3, ip
   187dc:	cmp	fp, #0
   187e0:	bne	1897c <__assert_fail@plt+0x7a74>
   187e4:	mov	r0, r6
   187e8:	mov	r1, sl
   187ec:	b	18190 <__assert_fail@plt+0x7288>
   187f0:	umull	r0, r1, r6, ip
   187f4:	mov	r3, r7
   187f8:	mov	r2, r1
   187fc:	strd	r0, [sp, #16]
   18800:	umlal	r2, r3, lr, ip
   18804:	cmp	r3, #0
   18808:	beq	184c0 <__assert_fail@plt+0x75b8>
   1880c:	ldrd	sl, [sp]
   18810:	mov	r7, #1
   18814:	ldr	r0, [sp, #16]
   18818:	ldr	r3, [sp, #20]
   1881c:	mul	r2, r6, fp
   18820:	mla	r2, lr, sl, r2
   18824:	add	r2, r2, r3
   18828:	b	184c0 <__assert_fail@plt+0x75b8>
   1882c:	umull	sl, fp, r2, ip
   18830:	mov	r0, fp
   18834:	umlal	r0, r1, r3, ip
   18838:	cmp	r1, #0
   1883c:	bne	18b24 <__assert_fail@plt+0x7c1c>
   18840:	mov	r6, sl
   18844:	mov	lr, r0
   18848:	b	18594 <__assert_fail@plt+0x768c>
   1884c:	umull	r6, r7, r0, ip
   18850:	mov	fp, lr
   18854:	mov	sl, r7
   18858:	umlal	sl, fp, r1, ip
   1885c:	cmp	fp, #0
   18860:	bne	18a5c <__assert_fail@plt+0x7b54>
   18864:	mov	r2, r6
   18868:	mov	r3, sl
   1886c:	b	18370 <__assert_fail@plt+0x7468>
   18870:	umull	r0, r1, sl, ip
   18874:	mov	r3, r7
   18878:	mov	r2, r1
   1887c:	umlal	r2, r3, lr, ip
   18880:	cmp	r3, #0
   18884:	beq	184c0 <__assert_fail@plt+0x75b8>
   18888:	ldr	r3, [sp, #4]
   1888c:	mov	r7, #1
   18890:	mul	r2, sl, r3
   18894:	ldr	r3, [sp]
   18898:	mla	r2, lr, r3, r2
   1889c:	add	r2, r2, r1
   188a0:	b	184c0 <__assert_fail@plt+0x75b8>
   188a4:	umull	r6, r7, r0, ip
   188a8:	mov	r3, r1
   188ac:	mov	r2, r7
   188b0:	umlal	r2, r3, fp, ip
   188b4:	cmp	r3, #0
   188b8:	strd	r2, [sp, #16]
   188bc:	bne	18b40 <__assert_fail@plt+0x7c38>
   188c0:	mov	r2, r6
   188c4:	ldr	r3, [sp, #16]
   188c8:	b	18338 <__assert_fail@plt+0x7430>
   188cc:	umull	sl, fp, r2, ip
   188d0:	mov	r7, lr
   188d4:	mov	r6, fp
   188d8:	umlal	r6, r7, r3, ip
   188dc:	cmp	r7, #0
   188e0:	bne	1890c <__assert_fail@plt+0x7a04>
   188e4:	mov	r0, sl
   188e8:	mov	r1, r6
   188ec:	b	18354 <__assert_fail@plt+0x744c>
   188f0:	ldrd	r2, [sp]
   188f4:	mov	r0, sl
   188f8:	mov	r1, #1
   188fc:	mul	r6, r6, r3
   18900:	mla	r7, r2, r7, r6
   18904:	add	fp, r7, fp
   18908:	b	184f8 <__assert_fail@plt+0x75f0>
   1890c:	ldrd	r6, [sp]
   18910:	mov	r0, sl
   18914:	mov	lr, #1
   18918:	mul	r2, r2, r7
   1891c:	mla	r1, r3, r6, r2
   18920:	add	r1, r1, fp
   18924:	b	18354 <__assert_fail@plt+0x744c>
   18928:	ldrd	r0, [sp]
   1892c:	mov	r6, sl
   18930:	mov	r7, #1
   18934:	mul	r2, r2, r1
   18938:	mla	lr, r3, r0, r2
   1893c:	add	lr, lr, fp
   18940:	b	18204 <__assert_fail@plt+0x72fc>
   18944:	ldm	sp, {r0, r3}
   18948:	mov	r2, sl
   1894c:	mov	r1, #1
   18950:	mul	r3, r6, r3
   18954:	mla	r3, r0, r7, r3
   18958:	add	r3, r3, fp
   1895c:	b	18170 <__assert_fail@plt+0x7268>
   18960:	ldrd	r6, [sp]
   18964:	mov	r0, sl
   18968:	mov	lr, #1
   1896c:	mul	r2, r2, r7
   18970:	mla	r1, r3, r6, r2
   18974:	add	r1, r1, fp
   18978:	b	1838c <__assert_fail@plt+0x7484>
   1897c:	ldrd	sl, [sp]
   18980:	mov	r0, r6
   18984:	mov	lr, #1
   18988:	mul	r2, r2, fp
   1898c:	mla	r1, r3, sl, r2
   18990:	add	r1, r1, r7
   18994:	b	18190 <__assert_fail@plt+0x7288>
   18998:	ldm	sp, {r1, r3}
   1899c:	mov	r2, r6
   189a0:	mov	lr, #1
   189a4:	mul	r3, r0, r3
   189a8:	mla	r3, fp, r1, r3
   189ac:	add	r3, r3, r7
   189b0:	b	181e4 <__assert_fail@plt+0x72dc>
   189b4:	ldrd	r2, [sp]
   189b8:	mov	r0, sl
   189bc:	mov	r1, #1
   189c0:	mul	r6, r6, r3
   189c4:	mla	r7, r2, r7, r6
   189c8:	add	fp, r7, fp
   189cc:	b	18318 <__assert_fail@plt+0x7410>
   189d0:	mul	r3, r6, r1
   189d4:	mov	lr, #1
   189d8:	mov	r6, sl
   189dc:	mla	r7, ip, r7, r3
   189e0:	add	r7, r7, fp
   189e4:	b	18270 <__assert_fail@plt+0x7368>
   189e8:	ldrd	r2, [sp]
   189ec:	mov	r1, #1
   189f0:	ldr	sl, [sp, #16]
   189f4:	mul	lr, r6, r3
   189f8:	ldr	r3, [sp, #20]
   189fc:	mla	lr, r2, r7, lr
   18a00:	add	lr, lr, r3
   18a04:	b	184a0 <__assert_fail@plt+0x7598>
   18a08:	ldm	sp, {r1, r3}
   18a0c:	mov	r2, r6
   18a10:	mov	lr, #1
   18a14:	mul	r3, r0, r3
   18a18:	mla	r3, fp, r1, r3
   18a1c:	add	r3, r3, r7
   18a20:	b	18370 <__assert_fail@plt+0x7468>
   18a24:	ldm	sp, {r0, r3}
   18a28:	mov	r2, sl
   18a2c:	mov	r1, #1
   18a30:	mul	r3, r6, r3
   18a34:	mla	r3, r0, r7, r3
   18a38:	add	r3, r3, fp
   18a3c:	b	18574 <__assert_fail@plt+0x766c>
   18a40:	ldrd	r2, [sp]
   18a44:	mov	r0, sl
   18a48:	mov	r1, #1
   18a4c:	mul	r6, r6, r3
   18a50:	mla	r7, r2, r7, r6
   18a54:	add	fp, r7, fp
   18a58:	b	183e4 <__assert_fail@plt+0x74dc>
   18a5c:	ldrd	sl, [sp]
   18a60:	mov	r2, r6
   18a64:	mov	lr, #1
   18a68:	mul	r3, r0, fp
   18a6c:	mla	r3, r1, sl, r3
   18a70:	add	r3, r3, r7
   18a74:	b	18370 <__assert_fail@plt+0x7468>
   18a78:	ldrd	sl, [sp]
   18a7c:	mov	r0, r6
   18a80:	mov	lr, #1
   18a84:	mul	r2, r2, fp
   18a88:	mla	r1, r3, sl, r2
   18a8c:	add	r1, r1, r7
   18a90:	b	181c8 <__assert_fail@plt+0x72c0>
   18a94:	movw	r3, #39960	; 0x9c18
   18a98:	movt	r3, #1
   18a9c:	movw	r1, #39972	; 0x9c24
   18aa0:	movt	r1, #1
   18aa4:	movw	r0, #39988	; 0x9c34
   18aa8:	movt	r0, #1
   18aac:	mov	r2, #85	; 0x55
   18ab0:	bl	10f08 <__assert_fail@plt>
   18ab4:	ldrd	sl, [sp]
   18ab8:	mov	r2, r6
   18abc:	mov	lr, #1
   18ac0:	mul	r3, r0, fp
   18ac4:	mla	r3, r1, sl, r3
   18ac8:	add	r3, r3, r7
   18acc:	b	181e4 <__assert_fail@plt+0x72dc>
   18ad0:	ldrd	r6, [sp]
   18ad4:	mov	r2, sl
   18ad8:	mov	lr, #1
   18adc:	mul	r3, r0, r7
   18ae0:	mla	r3, r1, r6, r3
   18ae4:	add	r3, r3, fp
   18ae8:	b	181e4 <__assert_fail@plt+0x72dc>
   18aec:	ldm	sp, {r0, r3}
   18af0:	mov	r2, sl
   18af4:	mov	r1, #1
   18af8:	mul	r3, r6, r3
   18afc:	mla	r3, r0, r7, r3
   18b00:	add	r3, r3, fp
   18b04:	b	18444 <__assert_fail@plt+0x753c>
   18b08:	ldrd	r6, [sp]
   18b0c:	mov	r2, sl
   18b10:	mov	lr, #1
   18b14:	mul	r3, r0, r7
   18b18:	mla	r3, r1, r6, r3
   18b1c:	add	r3, r3, fp
   18b20:	b	181ac <__assert_fail@plt+0x72a4>
   18b24:	ldrd	r0, [sp]
   18b28:	mov	r6, sl
   18b2c:	mov	r7, #1
   18b30:	mul	r2, r2, r1
   18b34:	mla	lr, r3, r0, r2
   18b38:	add	lr, lr, fp
   18b3c:	b	18594 <__assert_fail@plt+0x768c>
   18b40:	ldm	sp, {r1, r3}
   18b44:	mov	r2, r6
   18b48:	mov	lr, #1
   18b4c:	mul	r3, r0, r3
   18b50:	mla	r3, fp, r1, r3
   18b54:	add	r3, r3, r7
   18b58:	b	18338 <__assert_fail@plt+0x7430>
   18b5c:	cmp	r1, #0
   18b60:	cmpne	r0, #0
   18b64:	beq	18bb0 <__assert_fail@plt+0x7ca8>
   18b68:	strd	r4, [sp, #-16]!
   18b6c:	umull	r4, r5, r0, r1
   18b70:	str	r6, [sp, #8]
   18b74:	str	lr, [sp, #12]
   18b78:	adds	r3, r5, #0
   18b7c:	movne	r3, #1
   18b80:	cmp	r4, #0
   18b84:	blt	18b90 <__assert_fail@plt+0x7c88>
   18b88:	cmp	r3, #0
   18b8c:	beq	18bbc <__assert_fail@plt+0x7cb4>
   18b90:	bl	10e30 <__errno_location@plt>
   18b94:	mov	r3, #12
   18b98:	ldrd	r4, [sp]
   18b9c:	ldr	r6, [sp, #8]
   18ba0:	add	sp, sp, #12
   18ba4:	str	r3, [r0]
   18ba8:	mov	r0, #0
   18bac:	pop	{pc}		; (ldr pc, [sp], #4)
   18bb0:	mov	r1, #1
   18bb4:	mov	r0, r1
   18bb8:	b	10ca4 <calloc@plt>
   18bbc:	ldrd	r4, [sp]
   18bc0:	ldr	r6, [sp, #8]
   18bc4:	ldr	lr, [sp, #12]
   18bc8:	add	sp, sp, #16
   18bcc:	b	10ca4 <calloc@plt>
   18bd0:	cmp	r0, #0
   18bd4:	beq	18be0 <__assert_fail@plt+0x7cd8>
   18bd8:	blt	18be8 <__assert_fail@plt+0x7ce0>
   18bdc:	b	10dc4 <malloc@plt>
   18be0:	mov	r0, #1
   18be4:	b	10dc4 <malloc@plt>
   18be8:	str	r4, [sp, #-8]!
   18bec:	str	lr, [sp, #4]
   18bf0:	bl	10e30 <__errno_location@plt>
   18bf4:	mov	r3, #12
   18bf8:	ldr	r4, [sp]
   18bfc:	add	sp, sp, #4
   18c00:	str	r3, [r0]
   18c04:	mov	r0, #0
   18c08:	pop	{pc}		; (ldr pc, [sp], #4)
   18c0c:	cmp	r0, #0
   18c10:	beq	18c38 <__assert_fail@plt+0x7d30>
   18c14:	cmp	r1, #0
   18c18:	str	r4, [sp, #-8]!
   18c1c:	str	lr, [sp, #4]
   18c20:	beq	18c40 <__assert_fail@plt+0x7d38>
   18c24:	blt	18c54 <__assert_fail@plt+0x7d4c>
   18c28:	ldr	r4, [sp]
   18c2c:	ldr	lr, [sp, #4]
   18c30:	add	sp, sp, #8
   18c34:	b	10d58 <realloc@plt>
   18c38:	mov	r0, r1
   18c3c:	b	18bd0 <__assert_fail@plt+0x7cc8>
   18c40:	bl	18cec <__assert_fail@plt+0x7de4>
   18c44:	ldr	r4, [sp]
   18c48:	add	sp, sp, #4
   18c4c:	mov	r0, #0
   18c50:	pop	{pc}		; (ldr pc, [sp], #4)
   18c54:	bl	10e30 <__errno_location@plt>
   18c58:	mov	r3, #12
   18c5c:	str	r3, [r0]
   18c60:	b	18c44 <__assert_fail@plt+0x7d3c>
   18c64:	strd	r4, [sp, #-16]!
   18c68:	mov	r4, r0
   18c6c:	str	r6, [sp, #8]
   18c70:	str	lr, [sp, #12]
   18c74:	bl	10da0 <__fpending@plt>
   18c78:	ldr	r5, [r4]
   18c7c:	mov	r6, r0
   18c80:	mov	r0, r4
   18c84:	bl	13154 <__assert_fail@plt+0x224c>
   18c88:	mov	r4, r0
   18c8c:	and	r5, r5, #32
   18c90:	cmp	r5, #0
   18c94:	bne	18ccc <__assert_fail@plt+0x7dc4>
   18c98:	cmp	r0, #0
   18c9c:	beq	18cb8 <__assert_fail@plt+0x7db0>
   18ca0:	cmp	r6, #0
   18ca4:	bne	18ce4 <__assert_fail@plt+0x7ddc>
   18ca8:	bl	10e30 <__errno_location@plt>
   18cac:	ldr	r4, [r0]
   18cb0:	subs	r4, r4, #9
   18cb4:	mvnne	r4, #0
   18cb8:	mov	r0, r4
   18cbc:	ldrd	r4, [sp]
   18cc0:	ldr	r6, [sp, #8]
   18cc4:	add	sp, sp, #12
   18cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   18ccc:	cmp	r0, #0
   18cd0:	bne	18ce4 <__assert_fail@plt+0x7ddc>
   18cd4:	bl	10e30 <__errno_location@plt>
   18cd8:	str	r4, [r0]
   18cdc:	mvn	r4, #0
   18ce0:	b	18cb8 <__assert_fail@plt+0x7db0>
   18ce4:	mvn	r4, #0
   18ce8:	b	18cb8 <__assert_fail@plt+0x7db0>
   18cec:	strd	r4, [sp, #-12]!
   18cf0:	mov	r5, r0
   18cf4:	str	lr, [sp, #8]
   18cf8:	sub	sp, sp, #12
   18cfc:	bl	10e30 <__errno_location@plt>
   18d00:	mov	r4, r0
   18d04:	mov	r2, #0
   18d08:	ldr	r3, [r4]
   18d0c:	mov	r0, r5
   18d10:	str	r2, [r4]
   18d14:	str	r3, [sp]
   18d18:	str	r3, [sp, #4]
   18d1c:	bl	10cec <free@plt>
   18d20:	ldr	r3, [r4]
   18d24:	add	r2, sp, #8
   18d28:	clz	r3, r3
   18d2c:	lsr	r3, r3, #5
   18d30:	add	r3, r2, r3, lsl #2
   18d34:	ldr	r3, [r3, #-8]
   18d38:	str	r3, [r4]
   18d3c:	add	sp, sp, #12
   18d40:	ldrd	r4, [sp]
   18d44:	add	sp, sp, #8
   18d48:	pop	{pc}		; (ldr pc, [sp], #4)
   18d4c:	mov	r0, #14
   18d50:	str	r4, [sp, #-8]!
   18d54:	str	lr, [sp, #4]
   18d58:	bl	10ec0 <nl_langinfo@plt>
   18d5c:	cmp	r0, #0
   18d60:	beq	18d84 <__assert_fail@plt+0x7e7c>
   18d64:	ldrb	r2, [r0]
   18d68:	movw	r3, #40028	; 0x9c5c
   18d6c:	movt	r3, #1
   18d70:	ldr	r4, [sp]
   18d74:	add	sp, sp, #4
   18d78:	cmp	r2, #0
   18d7c:	moveq	r0, r3
   18d80:	pop	{pc}		; (ldr pc, [sp], #4)
   18d84:	ldr	r4, [sp]
   18d88:	add	sp, sp, #4
   18d8c:	movw	r0, #40028	; 0x9c5c
   18d90:	movt	r0, #1
   18d94:	pop	{pc}		; (ldr pc, [sp], #4)
   18d98:	strd	r4, [sp, #-20]!	; 0xffffffec
   18d9c:	mov	r5, r2
   18da0:	strd	r6, [sp, #8]
   18da4:	subs	r6, r0, #0
   18da8:	mov	r7, r1
   18dac:	str	lr, [sp, #16]
   18db0:	sub	sp, sp, #12
   18db4:	addeq	r6, sp, #4
   18db8:	mov	r0, r6
   18dbc:	bl	10dac <mbrtowc@plt>
   18dc0:	cmp	r5, #0
   18dc4:	cmnne	r0, #3
   18dc8:	mov	r4, r0
   18dcc:	bhi	18de8 <__assert_fail@plt+0x7ee0>
   18dd0:	mov	r0, r4
   18dd4:	add	sp, sp, #12
   18dd8:	ldrd	r4, [sp]
   18ddc:	ldrd	r6, [sp, #8]
   18de0:	add	sp, sp, #16
   18de4:	pop	{pc}		; (ldr pc, [sp], #4)
   18de8:	mov	r0, #0
   18dec:	bl	18e40 <__assert_fail@plt+0x7f38>
   18df0:	cmp	r0, #0
   18df4:	bne	18dd0 <__assert_fail@plt+0x7ec8>
   18df8:	ldrb	r3, [r7]
   18dfc:	mov	r4, #1
   18e00:	str	r3, [r6]
   18e04:	b	18dd0 <__assert_fail@plt+0x7ec8>
   18e08:	umull	r2, r3, r1, r2
   18e0c:	cmp	r3, #0
   18e10:	bne	18e1c <__assert_fail@plt+0x7f14>
   18e14:	mov	r1, r2
   18e18:	b	18c0c <__assert_fail@plt+0x7d04>
   18e1c:	str	r4, [sp, #-8]!
   18e20:	str	lr, [sp, #4]
   18e24:	bl	10e30 <__errno_location@plt>
   18e28:	mov	r3, #12
   18e2c:	ldr	r4, [sp]
   18e30:	add	sp, sp, #4
   18e34:	str	r3, [r0]
   18e38:	mov	r0, #0
   18e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e40:	push	{lr}		; (str lr, [sp, #-4]!)
   18e44:	sub	sp, sp, #268	; 0x10c
   18e48:	movw	r2, #257	; 0x101
   18e4c:	add	r1, sp, #4
   18e50:	bl	18e98 <__assert_fail@plt+0x7f90>
   18e54:	cmp	r0, #0
   18e58:	movne	r0, #0
   18e5c:	bne	18e90 <__assert_fail@plt+0x7f88>
   18e60:	movw	r1, #40036	; 0x9c64
   18e64:	movt	r1, #1
   18e68:	add	r0, sp, #4
   18e6c:	bl	10cbc <strcmp@plt>
   18e70:	cmp	r0, #0
   18e74:	beq	18e90 <__assert_fail@plt+0x7f88>
   18e78:	add	r0, sp, #4
   18e7c:	movw	r1, #40040	; 0x9c68
   18e80:	movt	r1, #1
   18e84:	bl	10cbc <strcmp@plt>
   18e88:	adds	r0, r0, #0
   18e8c:	movne	r0, #1
   18e90:	add	sp, sp, #268	; 0x10c
   18e94:	pop	{pc}		; (ldr pc, [sp], #4)
   18e98:	strd	r4, [sp, #-16]!
   18e9c:	mov	r5, r1
   18ea0:	mov	r1, #0
   18ea4:	mov	r4, r2
   18ea8:	str	r6, [sp, #8]
   18eac:	str	lr, [sp, #12]
   18eb0:	bl	10ea8 <setlocale@plt>
   18eb4:	subs	r6, r0, #0
   18eb8:	beq	18f38 <__assert_fail@plt+0x8030>
   18ebc:	bl	10e18 <strlen@plt>
   18ec0:	cmp	r4, r0
   18ec4:	bhi	18ee4 <__assert_fail@plt+0x7fdc>
   18ec8:	cmp	r4, #0
   18ecc:	moveq	r0, #34	; 0x22
   18ed0:	bne	18f08 <__assert_fail@plt+0x8000>
   18ed4:	ldrd	r4, [sp]
   18ed8:	ldr	r6, [sp, #8]
   18edc:	add	sp, sp, #12
   18ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ee4:	add	r2, r0, #1
   18ee8:	mov	r1, r6
   18eec:	mov	r0, r5
   18ef0:	bl	10d04 <memcpy@plt>
   18ef4:	ldrd	r4, [sp]
   18ef8:	mov	r0, #0
   18efc:	ldr	r6, [sp, #8]
   18f00:	add	sp, sp, #12
   18f04:	pop	{pc}		; (ldr pc, [sp], #4)
   18f08:	sub	r4, r4, #1
   18f0c:	mov	r1, r6
   18f10:	mov	r2, r4
   18f14:	mov	r0, r5
   18f18:	bl	10d04 <memcpy@plt>
   18f1c:	mov	r3, #0
   18f20:	mov	r0, #34	; 0x22
   18f24:	strb	r3, [r5, r4]
   18f28:	ldrd	r4, [sp]
   18f2c:	ldr	r6, [sp, #8]
   18f30:	add	sp, sp, #12
   18f34:	pop	{pc}		; (ldr pc, [sp], #4)
   18f38:	cmp	r4, #0
   18f3c:	mov	r0, #22
   18f40:	strbne	r6, [r5]
   18f44:	ldrd	r4, [sp]
   18f48:	ldr	r6, [sp, #8]
   18f4c:	add	sp, sp, #12
   18f50:	pop	{pc}		; (ldr pc, [sp], #4)
   18f54:	mov	r1, #0
   18f58:	b	10ea8 <setlocale@plt>
   18f5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f60:	mov	r7, r0
   18f64:	ldr	r6, [pc, #72]	; 18fb4 <__assert_fail@plt+0x80ac>
   18f68:	ldr	r5, [pc, #72]	; 18fb8 <__assert_fail@plt+0x80b0>
   18f6c:	add	r6, pc, r6
   18f70:	add	r5, pc, r5
   18f74:	sub	r6, r6, r5
   18f78:	mov	r8, r1
   18f7c:	mov	r9, r2
   18f80:	bl	10c84 <calloc@plt-0x20>
   18f84:	asrs	r6, r6, #2
   18f88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f8c:	mov	r4, #0
   18f90:	add	r4, r4, #1
   18f94:	ldr	r3, [r5], #4
   18f98:	mov	r2, r9
   18f9c:	mov	r1, r8
   18fa0:	mov	r0, r7
   18fa4:	blx	r3
   18fa8:	cmp	r6, r4
   18fac:	bne	18f90 <__assert_fail@plt+0x8088>
   18fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fb4:	andeq	r0, r1, r0, lsr #31
   18fb8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   18fbc:	bx	lr
   18fc0:	ldr	r3, [pc, #12]	; 18fd4 <__assert_fail@plt+0x80cc>
   18fc4:	mov	r1, #0
   18fc8:	add	r3, pc, r3
   18fcc:	ldr	r2, [r3]
   18fd0:	b	10e3c <__cxa_atexit@plt>
   18fd4:	andeq	r1, r1, r4, lsl r1

Disassembly of section .fini:

00018fd8 <.fini>:
   18fd8:	push	{r3, lr}
   18fdc:	pop	{r3, pc}
