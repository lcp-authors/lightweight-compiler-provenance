
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	10f78 <__assert_fail@plt+0x48>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r6, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f3c <.text>:
   10f3c:	mov	fp, #0
   10f40:	mov	lr, #0
   10f44:	pop	{r1}		; (ldr r1, [sp], #4)
   10f48:	mov	r2, sp
   10f4c:	push	{r2}		; (str r2, [sp, #-4]!)
   10f50:	push	{r0}		; (str r0, [sp, #-4]!)
   10f54:	ldr	ip, [pc, #16]	; 10f6c <__assert_fail@plt+0x3c>
   10f58:	push	{ip}		; (str ip, [sp, #-4]!)
   10f5c:	ldr	r0, [pc, #12]	; 10f70 <__assert_fail@plt+0x40>
   10f60:	ldr	r3, [pc, #12]	; 10f74 <__assert_fail@plt+0x44>
   10f64:	bl	10dec <__libc_start_main@plt>
   10f68:	bl	10f24 <abort@plt>
   10f6c:	andeq	r5, r1, r0, lsl sp
   10f70:	andeq	r1, r1, r4, lsl #9
   10f74:			; <UNDEFINED> instruction: 0x00015cb0
   10f78:	ldr	r3, [pc, #20]	; 10f94 <__assert_fail@plt+0x64>
   10f7c:	ldr	r2, [pc, #20]	; 10f98 <__assert_fail@plt+0x68>
   10f80:	add	r3, pc, r3
   10f84:	ldr	r2, [r3, r2]
   10f88:	cmp	r2, #0
   10f8c:	bxeq	lr
   10f90:	b	10e04 <__gmon_start__@plt>
   10f94:	andeq	r6, r1, r8, ror r0
   10f98:	andeq	r0, r0, r0, ror #1
   10f9c:	ldr	r3, [pc, #28]	; 10fc0 <__assert_fail@plt+0x90>
   10fa0:	ldr	r0, [pc, #28]	; 10fc4 <__assert_fail@plt+0x94>
   10fa4:	sub	r3, r3, r0
   10fa8:	cmp	r3, #6
   10fac:	bxls	lr
   10fb0:	ldr	r3, [pc, #16]	; 10fc8 <__assert_fail@plt+0x98>
   10fb4:	cmp	r3, #0
   10fb8:	bxeq	lr
   10fbc:	bx	r3
   10fc0:	andeq	r7, r2, r7, lsr r1
   10fc4:	andeq	r7, r2, r4, lsr r1
   10fc8:	andeq	r0, r0, r0
   10fcc:	ldr	r1, [pc, #36]	; 10ff8 <__assert_fail@plt+0xc8>
   10fd0:	ldr	r0, [pc, #36]	; 10ffc <__assert_fail@plt+0xcc>
   10fd4:	sub	r1, r1, r0
   10fd8:	asr	r1, r1, #2
   10fdc:	add	r1, r1, r1, lsr #31
   10fe0:	asrs	r1, r1, #1
   10fe4:	bxeq	lr
   10fe8:	ldr	r3, [pc, #16]	; 11000 <__assert_fail@plt+0xd0>
   10fec:	cmp	r3, #0
   10ff0:	bxeq	lr
   10ff4:	bx	r3
   10ff8:	andeq	r7, r2, r4, lsr r1
   10ffc:	andeq	r7, r2, r4, lsr r1
   11000:	andeq	r0, r0, r0
   11004:	push	{r4, lr}
   11008:	ldr	r4, [pc, #24]	; 11028 <__assert_fail@plt+0xf8>
   1100c:	ldrb	r3, [r4]
   11010:	cmp	r3, #0
   11014:	popne	{r4, pc}
   11018:	bl	10f9c <__assert_fail@plt+0x6c>
   1101c:	mov	r3, #1
   11020:	strb	r3, [r4]
   11024:	pop	{r4, pc}
   11028:	andeq	r7, r2, ip, asr r1
   1102c:	ldr	r0, [pc, #40]	; 1105c <__assert_fail@plt+0x12c>
   11030:	ldr	r3, [r0]
   11034:	cmp	r3, #0
   11038:	bne	11040 <__assert_fail@plt+0x110>
   1103c:	b	10fcc <__assert_fail@plt+0x9c>
   11040:	ldr	r3, [pc, #24]	; 11060 <__assert_fail@plt+0x130>
   11044:	cmp	r3, #0
   11048:	beq	1103c <__assert_fail@plt+0x10c>
   1104c:	push	{r4, lr}
   11050:	blx	r3
   11054:	pop	{r4, lr}
   11058:	b	10fcc <__assert_fail@plt+0x9c>
   1105c:	andeq	r6, r2, r4, lsl pc
   11060:	andeq	r0, r0, r0
   11064:	push	{r4, lr}
   11068:	mov	r4, r1
   1106c:	bl	12450 <__assert_fail@plt+0x1520>
   11070:	cmp	r0, #0
   11074:	beq	110e0 <__assert_fail@plt+0x1b0>
   11078:	ldr	r1, [pc, #104]	; 110e8 <__assert_fail@plt+0x1b8>
   1107c:	mov	r0, r4
   11080:	bl	10ce4 <strcmp@plt>
   11084:	cmp	r0, #0
   11088:	bne	110b4 <__assert_fail@plt+0x184>
   1108c:	bl	10e4c <__errno_location@plt>
   11090:	ldr	r4, [r0]
   11094:	mov	r2, #5
   11098:	ldr	r1, [pc, #76]	; 110ec <__assert_fail@plt+0x1bc>
   1109c:	mov	r0, #0
   110a0:	bl	10d68 <dcgettext@plt>
   110a4:	mov	r2, r0
   110a8:	mov	r1, r4
   110ac:	mov	r0, #1
   110b0:	bl	10dd4 <error@plt>
   110b4:	bl	10e4c <__errno_location@plt>
   110b8:	ldr	r5, [r0]
   110bc:	mov	r2, r4
   110c0:	mov	r1, #3
   110c4:	mov	r0, #0
   110c8:	bl	14044 <__assert_fail@plt+0x3114>
   110cc:	mov	r3, r0
   110d0:	ldr	r2, [pc, #24]	; 110f0 <__assert_fail@plt+0x1c0>
   110d4:	mov	r1, r5
   110d8:	mov	r0, #1
   110dc:	bl	10dd4 <error@plt>
   110e0:	mov	r0, #0
   110e4:	bl	10e28 <exit@plt>
   110e8:	ldrdeq	r5, [r1], -r0
   110ec:	ldrdeq	r5, [r1], -r4
   110f0:	andeq	r6, r1, ip, lsl #5
   110f4:	push	{lr}		; (str lr, [sp, #-4]!)
   110f8:	sub	sp, sp, #60	; 0x3c
   110fc:	subs	r6, r0, #0
   11100:	beq	1113c <__assert_fail@plt+0x20c>
   11104:	ldr	r3, [pc, #796]	; 11428 <__assert_fail@plt+0x4f8>
   11108:	ldr	r4, [r3]
   1110c:	mov	r2, #5
   11110:	ldr	r1, [pc, #788]	; 1142c <__assert_fail@plt+0x4fc>
   11114:	mov	r0, #0
   11118:	bl	10d68 <dcgettext@plt>
   1111c:	ldr	r3, [pc, #780]	; 11430 <__assert_fail@plt+0x500>
   11120:	ldr	r3, [r3]
   11124:	mov	r2, r0
   11128:	mov	r1, #1
   1112c:	mov	r0, r4
   11130:	bl	10e88 <__fprintf_chk@plt>
   11134:	mov	r0, r6
   11138:	bl	10e28 <exit@plt>
   1113c:	mov	r2, #5
   11140:	ldr	r1, [pc, #748]	; 11434 <__assert_fail@plt+0x504>
   11144:	mov	r0, #0
   11148:	bl	10d68 <dcgettext@plt>
   1114c:	ldr	r3, [pc, #732]	; 11430 <__assert_fail@plt+0x500>
   11150:	ldr	r2, [r3]
   11154:	mov	r1, r0
   11158:	mov	r0, #1
   1115c:	bl	10e70 <__printf_chk@plt>
   11160:	mov	r2, #5
   11164:	ldr	r1, [pc, #716]	; 11438 <__assert_fail@plt+0x508>
   11168:	mov	r0, #0
   1116c:	bl	10d68 <dcgettext@plt>
   11170:	mov	r2, #64	; 0x40
   11174:	mov	r1, r0
   11178:	mov	r0, #1
   1117c:	bl	10e70 <__printf_chk@plt>
   11180:	mov	r2, #5
   11184:	ldr	r1, [pc, #688]	; 1143c <__assert_fail@plt+0x50c>
   11188:	mov	r0, #0
   1118c:	bl	10d68 <dcgettext@plt>
   11190:	ldr	r4, [pc, #680]	; 11440 <__assert_fail@plt+0x510>
   11194:	ldr	r1, [r4]
   11198:	bl	10ccc <fputs_unlocked@plt>
   1119c:	mov	r2, #5
   111a0:	ldr	r1, [pc, #668]	; 11444 <__assert_fail@plt+0x514>
   111a4:	mov	r0, #0
   111a8:	bl	10d68 <dcgettext@plt>
   111ac:	ldr	r1, [r4]
   111b0:	bl	10ccc <fputs_unlocked@plt>
   111b4:	mov	r2, #5
   111b8:	ldr	r1, [pc, #648]	; 11448 <__assert_fail@plt+0x518>
   111bc:	mov	r0, #0
   111c0:	bl	10d68 <dcgettext@plt>
   111c4:	ldr	r1, [r4]
   111c8:	bl	10ccc <fputs_unlocked@plt>
   111cc:	mov	r2, #5
   111d0:	ldr	r1, [pc, #628]	; 1144c <__assert_fail@plt+0x51c>
   111d4:	mov	r0, #0
   111d8:	bl	10d68 <dcgettext@plt>
   111dc:	ldr	r1, [r4]
   111e0:	bl	10ccc <fputs_unlocked@plt>
   111e4:	mov	r2, #5
   111e8:	ldr	r1, [pc, #608]	; 11450 <__assert_fail@plt+0x520>
   111ec:	mov	r0, #0
   111f0:	bl	10d68 <dcgettext@plt>
   111f4:	ldr	r1, [r4]
   111f8:	bl	10ccc <fputs_unlocked@plt>
   111fc:	mov	r2, #5
   11200:	ldr	r1, [pc, #588]	; 11454 <__assert_fail@plt+0x524>
   11204:	mov	r0, #0
   11208:	bl	10d68 <dcgettext@plt>
   1120c:	ldr	r2, [pc, #580]	; 11458 <__assert_fail@plt+0x528>
   11210:	mov	r3, r2
   11214:	mov	r1, r0
   11218:	mov	r0, #1
   1121c:	bl	10e70 <__printf_chk@plt>
   11220:	mov	ip, sp
   11224:	ldr	lr, [pc, #560]	; 1145c <__assert_fail@plt+0x52c>
   11228:	ldm	lr!, {r0, r1, r2, r3}
   1122c:	stmia	ip!, {r0, r1, r2, r3}
   11230:	ldm	lr!, {r0, r1, r2, r3}
   11234:	stmia	ip!, {r0, r1, r2, r3}
   11238:	ldm	lr!, {r0, r1, r2, r3}
   1123c:	stmia	ip!, {r0, r1, r2, r3}
   11240:	ldm	lr, {r0, r1}
   11244:	stm	ip, {r0, r1}
   11248:	ldr	r1, [sp]
   1124c:	cmp	r1, #0
   11250:	moveq	r4, sp
   11254:	beq	1127c <__assert_fail@plt+0x34c>
   11258:	mov	r4, sp
   1125c:	ldr	r5, [pc, #500]	; 11458 <__assert_fail@plt+0x528>
   11260:	mov	r0, r5
   11264:	bl	10ce4 <strcmp@plt>
   11268:	cmp	r0, #0
   1126c:	beq	1127c <__assert_fail@plt+0x34c>
   11270:	ldr	r1, [r4, #8]!
   11274:	cmp	r1, #0
   11278:	bne	11260 <__assert_fail@plt+0x330>
   1127c:	ldr	r4, [r4, #4]
   11280:	cmp	r4, #0
   11284:	beq	11398 <__assert_fail@plt+0x468>
   11288:	mov	r2, #5
   1128c:	ldr	r1, [pc, #460]	; 11460 <__assert_fail@plt+0x530>
   11290:	mov	r0, #0
   11294:	bl	10d68 <dcgettext@plt>
   11298:	ldr	r3, [pc, #452]	; 11464 <__assert_fail@plt+0x534>
   1129c:	ldr	r2, [pc, #452]	; 11468 <__assert_fail@plt+0x538>
   112a0:	mov	r1, r0
   112a4:	mov	r0, #1
   112a8:	bl	10e70 <__printf_chk@plt>
   112ac:	mov	r1, #0
   112b0:	mov	r0, #5
   112b4:	bl	10ec4 <setlocale@plt>
   112b8:	cmp	r0, #0
   112bc:	beq	112d4 <__assert_fail@plt+0x3a4>
   112c0:	mov	r2, #3
   112c4:	ldr	r1, [pc, #416]	; 1146c <__assert_fail@plt+0x53c>
   112c8:	bl	10f18 <strncmp@plt>
   112cc:	cmp	r0, #0
   112d0:	bne	11334 <__assert_fail@plt+0x404>
   112d4:	mov	r2, #5
   112d8:	ldr	r1, [pc, #400]	; 11470 <__assert_fail@plt+0x540>
   112dc:	mov	r0, #0
   112e0:	bl	10d68 <dcgettext@plt>
   112e4:	ldr	r5, [pc, #364]	; 11458 <__assert_fail@plt+0x528>
   112e8:	mov	r3, r5
   112ec:	ldr	r2, [pc, #368]	; 11464 <__assert_fail@plt+0x534>
   112f0:	mov	r1, r0
   112f4:	mov	r0, #1
   112f8:	bl	10e70 <__printf_chk@plt>
   112fc:	mov	r2, #5
   11300:	ldr	r1, [pc, #364]	; 11474 <__assert_fail@plt+0x544>
   11304:	mov	r0, #0
   11308:	bl	10d68 <dcgettext@plt>
   1130c:	mov	r1, r0
   11310:	ldr	r2, [pc, #352]	; 11478 <__assert_fail@plt+0x548>
   11314:	ldr	r3, [pc, #352]	; 1147c <__assert_fail@plt+0x54c>
   11318:	cmp	r4, r5
   1131c:	movne	r3, r2
   11320:	mov	r2, r4
   11324:	mov	r0, #1
   11328:	bl	10e70 <__printf_chk@plt>
   1132c:	b	11134 <__assert_fail@plt+0x204>
   11330:	ldr	r4, [pc, #288]	; 11458 <__assert_fail@plt+0x528>
   11334:	mov	r2, #5
   11338:	ldr	r1, [pc, #320]	; 11480 <__assert_fail@plt+0x550>
   1133c:	mov	r0, #0
   11340:	bl	10d68 <dcgettext@plt>
   11344:	ldr	r3, [pc, #244]	; 11440 <__assert_fail@plt+0x510>
   11348:	ldr	r1, [r3]
   1134c:	bl	10ccc <fputs_unlocked@plt>
   11350:	b	112d4 <__assert_fail@plt+0x3a4>
   11354:	mov	r2, #5
   11358:	ldr	r1, [pc, #272]	; 11470 <__assert_fail@plt+0x540>
   1135c:	mov	r0, #0
   11360:	bl	10d68 <dcgettext@plt>
   11364:	ldr	r4, [pc, #236]	; 11458 <__assert_fail@plt+0x528>
   11368:	mov	r3, r4
   1136c:	ldr	r2, [pc, #240]	; 11464 <__assert_fail@plt+0x534>
   11370:	mov	r1, r0
   11374:	mov	r0, #1
   11378:	bl	10e70 <__printf_chk@plt>
   1137c:	mov	r2, #5
   11380:	ldr	r1, [pc, #236]	; 11474 <__assert_fail@plt+0x544>
   11384:	mov	r0, #0
   11388:	bl	10d68 <dcgettext@plt>
   1138c:	mov	r1, r0
   11390:	ldr	r3, [pc, #228]	; 1147c <__assert_fail@plt+0x54c>
   11394:	b	11320 <__assert_fail@plt+0x3f0>
   11398:	mov	r2, #5
   1139c:	ldr	r1, [pc, #188]	; 11460 <__assert_fail@plt+0x530>
   113a0:	mov	r0, #0
   113a4:	bl	10d68 <dcgettext@plt>
   113a8:	ldr	r3, [pc, #180]	; 11464 <__assert_fail@plt+0x534>
   113ac:	ldr	r2, [pc, #180]	; 11468 <__assert_fail@plt+0x538>
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	bl	10e70 <__printf_chk@plt>
   113bc:	mov	r1, #0
   113c0:	mov	r0, #5
   113c4:	bl	10ec4 <setlocale@plt>
   113c8:	cmp	r0, #0
   113cc:	beq	11354 <__assert_fail@plt+0x424>
   113d0:	mov	r2, #3
   113d4:	ldr	r1, [pc, #144]	; 1146c <__assert_fail@plt+0x53c>
   113d8:	bl	10f18 <strncmp@plt>
   113dc:	cmp	r0, #0
   113e0:	bne	11330 <__assert_fail@plt+0x400>
   113e4:	mov	r2, #5
   113e8:	ldr	r1, [pc, #128]	; 11470 <__assert_fail@plt+0x540>
   113ec:	mov	r0, #0
   113f0:	bl	10d68 <dcgettext@plt>
   113f4:	ldr	r4, [pc, #92]	; 11458 <__assert_fail@plt+0x528>
   113f8:	mov	r3, r4
   113fc:	ldr	r2, [pc, #96]	; 11464 <__assert_fail@plt+0x534>
   11400:	mov	r1, r0
   11404:	mov	r0, #1
   11408:	bl	10e70 <__printf_chk@plt>
   1140c:	mov	r2, #5
   11410:	ldr	r1, [pc, #92]	; 11474 <__assert_fail@plt+0x544>
   11414:	mov	r0, #0
   11418:	bl	10d68 <dcgettext@plt>
   1141c:	mov	r1, r0
   11420:	ldr	r3, [pc, #84]	; 1147c <__assert_fail@plt+0x54c>
   11424:	b	11320 <__assert_fail@plt+0x3f0>
   11428:	andeq	r7, r2, r8, asr #2
   1142c:	strdeq	r5, [r1], -r4
   11430:	andeq	r7, r2, r8, ror #2
   11434:	andeq	r5, r1, ip, lsl lr
   11438:	andeq	r5, r1, ip, lsr lr
   1143c:	andeq	r5, r1, r4, lsl #29
   11440:	andeq	r7, r2, r4, asr r1
   11444:			; <UNDEFINED> instruction: 0x00015ebc
   11448:	andeq	r5, r1, r8, lsl #30
   1144c:	strdeq	r5, [r1], -ip
   11450:	andeq	r6, r1, ip, lsr #32
   11454:	andeq	r6, r1, r4, rrx
   11458:	andeq	r5, r1, ip, ror #27
   1145c:	andeq	r5, r1, r8, lsr sp
   11460:	andeq	r6, r1, r0, ror r1
   11464:	andeq	r6, r1, r8, lsl #3
   11468:			; <UNDEFINED> instruction: 0x000161b0
   1146c:	andeq	r6, r1, r0, asr #3
   11470:	andeq	r6, r1, ip, lsl #4
   11474:	andeq	r6, r1, r8, lsr #4
   11478:	andeq	r6, r1, r8, lsr #32
   1147c:	strdeq	r6, [r1], -r0
   11480:	andeq	r6, r1, r4, asr #3
   11484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11488:	sub	sp, sp, #52	; 0x34
   1148c:	mov	r5, r0
   11490:	mov	r4, r1
   11494:	ldr	r0, [r1]
   11498:	bl	1265c <__assert_fail@plt+0x172c>
   1149c:	ldr	r1, [pc, #1820]	; 11bc0 <__assert_fail@plt+0xc90>
   114a0:	mov	r0, #6
   114a4:	bl	10ec4 <setlocale@plt>
   114a8:	ldr	r6, [pc, #1812]	; 11bc4 <__assert_fail@plt+0xc94>
   114ac:	ldr	r1, [pc, #1812]	; 11bc8 <__assert_fail@plt+0xc98>
   114b0:	mov	r0, r6
   114b4:	bl	10f00 <bindtextdomain@plt>
   114b8:	mov	r0, r6
   114bc:	bl	10d80 <textdomain@plt>
   114c0:	ldr	r0, [pc, #1796]	; 11bcc <__assert_fail@plt+0xc9c>
   114c4:	bl	15d14 <__assert_fail@plt+0x4de4>
   114c8:	mov	r3, #76	; 0x4c
   114cc:	str	r3, [sp, #8]
   114d0:	mov	fp, #0
   114d4:	mov	r8, fp
   114d8:	ldr	r7, [pc, #1776]	; 11bd0 <__assert_fail@plt+0xca0>
   114dc:	ldr	r6, [pc, #1776]	; 11bd4 <__assert_fail@plt+0xca4>
   114e0:	ldr	sl, [pc, #1776]	; 11bd8 <__assert_fail@plt+0xca8>
   114e4:	ldr	r9, [pc, #1748]	; 11bc0 <__assert_fail@plt+0xc90>
   114e8:	mov	r3, #0
   114ec:	str	r3, [sp]
   114f0:	mov	r3, r7
   114f4:	mov	r2, r6
   114f8:	mov	r1, r4
   114fc:	mov	r0, r5
   11500:	bl	10e10 <getopt_long@plt>
   11504:	cmn	r0, #1
   11508:	beq	1162c <__assert_fail@plt+0x6fc>
   1150c:	cmp	r0, #100	; 0x64
   11510:	beq	11624 <__assert_fail@plt+0x6f4>
   11514:	bgt	11530 <__assert_fail@plt+0x600>
   11518:	cmn	r0, #3
   1151c:	beq	115e8 <__assert_fail@plt+0x6b8>
   11520:	cmn	r0, #2
   11524:	bne	1161c <__assert_fail@plt+0x6ec>
   11528:	mov	r0, #0
   1152c:	bl	110f4 <__assert_fail@plt+0x1c4>
   11530:	cmp	r0, #105	; 0x69
   11534:	beq	115a8 <__assert_fail@plt+0x678>
   11538:	cmp	r0, #119	; 0x77
   1153c:	bne	1161c <__assert_fail@plt+0x6ec>
   11540:	str	r9, [sp]
   11544:	add	r3, sp, #40	; 0x28
   11548:	mov	r2, #10
   1154c:	mov	r1, #0
   11550:	ldr	r0, [sl]
   11554:	bl	14eec <__assert_fail@plt+0x3fbc>
   11558:	mov	ip, r0
   1155c:	cmp	r0, #1
   11560:	bhi	115b0 <__assert_fail@plt+0x680>
   11564:	ldrd	r2, [sp, #40]	; 0x28
   11568:	cmp	r2, #0
   1156c:	sbcs	r1, r3, #0
   11570:	blt	115b0 <__assert_fail@plt+0x680>
   11574:	mvn	r0, #-2147483648	; 0x80000000
   11578:	mov	r1, #0
   1157c:	cmp	r0, r2
   11580:	sbcs	r1, r1, r3
   11584:	movge	r1, #1
   11588:	movlt	r1, #0
   1158c:	cmp	ip, #1
   11590:	moveq	r0, #0
   11594:	andne	r0, r1, #1
   11598:	cmp	r0, #0
   1159c:	moveq	r2, #0
   115a0:	str	r2, [sp, #8]
   115a4:	b	114e8 <__assert_fail@plt+0x5b8>
   115a8:	mov	fp, #1
   115ac:	b	114e8 <__assert_fail@plt+0x5b8>
   115b0:	mov	r2, #5
   115b4:	ldr	r1, [pc, #1568]	; 11bdc <__assert_fail@plt+0xcac>
   115b8:	mov	r0, #0
   115bc:	bl	10d68 <dcgettext@plt>
   115c0:	mov	r4, r0
   115c4:	ldr	r3, [pc, #1548]	; 11bd8 <__assert_fail@plt+0xca8>
   115c8:	ldr	r0, [r3]
   115cc:	bl	141ac <__assert_fail@plt+0x327c>
   115d0:	str	r0, [sp]
   115d4:	mov	r3, r4
   115d8:	ldr	r2, [pc, #1536]	; 11be0 <__assert_fail@plt+0xcb0>
   115dc:	mov	r1, #0
   115e0:	mov	r0, #1
   115e4:	bl	10dd4 <error@plt>
   115e8:	mov	r4, #0
   115ec:	str	r4, [sp, #4]
   115f0:	ldr	r3, [pc, #1516]	; 11be4 <__assert_fail@plt+0xcb4>
   115f4:	str	r3, [sp]
   115f8:	ldr	r3, [pc, #1512]	; 11be8 <__assert_fail@plt+0xcb8>
   115fc:	ldr	r3, [r3]
   11600:	ldr	r2, [pc, #1508]	; 11bec <__assert_fail@plt+0xcbc>
   11604:	ldr	r1, [pc, #1508]	; 11bf0 <__assert_fail@plt+0xcc0>
   11608:	ldr	r0, [pc, #1508]	; 11bf4 <__assert_fail@plt+0xcc4>
   1160c:	ldr	r0, [r0]
   11610:	bl	14678 <__assert_fail@plt+0x3748>
   11614:	mov	r0, r4
   11618:	bl	10e28 <exit@plt>
   1161c:	mov	r0, #1
   11620:	bl	110f4 <__assert_fail@plt+0x1c4>
   11624:	mov	r8, #1
   11628:	b	114e8 <__assert_fail@plt+0x5b8>
   1162c:	ldr	r3, [pc, #1476]	; 11bf8 <__assert_fail@plt+0xcc8>
   11630:	ldr	r3, [r3]
   11634:	sub	r2, r5, r3
   11638:	cmp	r2, #1
   1163c:	ble	11684 <__assert_fail@plt+0x754>
   11640:	mov	r2, #5
   11644:	ldr	r1, [pc, #1456]	; 11bfc <__assert_fail@plt+0xccc>
   11648:	mov	r0, #0
   1164c:	bl	10d68 <dcgettext@plt>
   11650:	mov	r5, r0
   11654:	ldr	r3, [pc, #1436]	; 11bf8 <__assert_fail@plt+0xcc8>
   11658:	ldr	r3, [r3]
   1165c:	add	r3, r3, #1
   11660:	ldr	r0, [r4, r3, lsl #2]
   11664:	bl	141ac <__assert_fail@plt+0x327c>
   11668:	mov	r3, r0
   1166c:	mov	r2, r5
   11670:	mov	r1, #0
   11674:	mov	r0, r1
   11678:	bl	10dd4 <error@plt>
   1167c:	mov	r0, #1
   11680:	bl	110f4 <__assert_fail@plt+0x1c4>
   11684:	cmp	r5, r3
   11688:	ble	116e8 <__assert_fail@plt+0x7b8>
   1168c:	ldr	r3, [r4, r3, lsl #2]
   11690:	str	r3, [sp, #28]
   11694:	ldr	r1, [pc, #1380]	; 11c00 <__assert_fail@plt+0xcd0>
   11698:	mov	r0, r3
   1169c:	bl	10ce4 <strcmp@plt>
   116a0:	cmp	r0, #0
   116a4:	beq	116f0 <__assert_fail@plt+0x7c0>
   116a8:	ldr	r1, [pc, #1364]	; 11c04 <__assert_fail@plt+0xcd4>
   116ac:	ldr	r0, [sp, #28]
   116b0:	bl	10ef4 <fopen64@plt>
   116b4:	subs	r7, r0, #0
   116b8:	bne	116f8 <__assert_fail@plt+0x7c8>
   116bc:	bl	10e4c <__errno_location@plt>
   116c0:	ldr	r4, [r0]
   116c4:	ldr	r2, [sp, #28]
   116c8:	mov	r1, #3
   116cc:	mov	r0, #0
   116d0:	bl	14044 <__assert_fail@plt+0x3114>
   116d4:	mov	r3, r0
   116d8:	ldr	r2, [pc, #1320]	; 11c08 <__assert_fail@plt+0xcd8>
   116dc:	mov	r1, r4
   116e0:	mov	r0, #1
   116e4:	bl	10dd4 <error@plt>
   116e8:	ldr	r3, [pc, #1296]	; 11c00 <__assert_fail@plt+0xcd0>
   116ec:	str	r3, [sp, #28]
   116f0:	ldr	r3, [pc, #1300]	; 11c0c <__assert_fail@plt+0xcdc>
   116f4:	ldr	r7, [r3]
   116f8:	mov	r1, #2
   116fc:	mov	r0, r7
   11700:	bl	1241c <__assert_fail@plt+0x14ec>
   11704:	cmp	r8, #0
   11708:	beq	11898 <__assert_fail@plt+0x968>
   1170c:	ldr	r3, [pc, #1248]	; 11bf4 <__assert_fail@plt+0xcc4>
   11710:	ldr	r3, [r3]
   11714:	str	r3, [sp, #12]
   11718:	mov	r0, #4096	; 0x1000
   1171c:	bl	14744 <__assert_fail@plt+0x3814>
   11720:	mov	sl, r0
   11724:	mov	r0, #3072	; 0xc00
   11728:	bl	14744 <__assert_fail@plt+0x3814>
   1172c:	str	r0, [sp, #16]
   11730:	add	r0, sp, #40	; 0x28
   11734:	bl	1203c <__assert_fail@plt+0x110c>
   11738:	str	fp, [sp, #8]
   1173c:	mov	r8, #0
   11740:	b	11768 <__assert_fail@plt+0x838>
   11744:	add	r8, r8, r6
   11748:	ldr	r3, [r7]
   1174c:	ands	r5, r3, #32
   11750:	bne	117e4 <__assert_fail@plt+0x8b4>
   11754:	ldr	r2, [pc, #1204]	; 11c10 <__assert_fail@plt+0xce0>
   11758:	cmp	r8, r2
   1175c:	bgt	11888 <__assert_fail@plt+0x958>
   11760:	tst	r3, #16
   11764:	bne	1180c <__assert_fail@plt+0x8dc>
   11768:	mov	fp, r8
   1176c:	mov	r3, r7
   11770:	rsb	r2, r8, #4096	; 0x1000
   11774:	mov	r1, #1
   11778:	add	r0, sl, r8
   1177c:	bl	10f0c <fread_unlocked@plt>
   11780:	mov	r6, r0
   11784:	ldr	r3, [sp, #8]
   11788:	cmp	r3, #0
   1178c:	beq	11744 <__assert_fail@plt+0x814>
   11790:	mov	r5, #0
   11794:	add	r9, sl, r8
   11798:	bic	r3, r5, r5, asr #31
   1179c:	cmp	r6, r3
   117a0:	ble	11744 <__assert_fail@plt+0x814>
   117a4:	ldrb	r4, [r9, r5]
   117a8:	mov	r0, r4
   117ac:	bl	12024 <__assert_fail@plt+0x10f4>
   117b0:	cmp	r4, #61	; 0x3d
   117b4:	orreq	r0, r0, #1
   117b8:	tst	r0, #255	; 0xff
   117bc:	addne	r5, r5, #1
   117c0:	bne	11798 <__assert_fail@plt+0x868>
   117c4:	add	r0, r5, fp
   117c8:	sub	r6, r6, #1
   117cc:	add	r1, r0, #1
   117d0:	sub	r2, r6, r5
   117d4:	add	r1, sl, r1
   117d8:	add	r0, sl, r0
   117dc:	bl	10d08 <memmove@plt>
   117e0:	b	11798 <__assert_fail@plt+0x868>
   117e4:	bl	10e4c <__errno_location@plt>
   117e8:	ldr	r4, [r0]
   117ec:	mov	r2, #5
   117f0:	ldr	r1, [pc, #1052]	; 11c14 <__assert_fail@plt+0xce4>
   117f4:	mov	r0, #0
   117f8:	bl	10d68 <dcgettext@plt>
   117fc:	mov	r2, r0
   11800:	mov	r1, r4
   11804:	mov	r0, #1
   11808:	bl	10dd4 <error@plt>
   1180c:	mov	r4, r5
   11810:	b	1188c <__assert_fail@plt+0x95c>
   11814:	ldr	r2, [sp, #40]	; 0x28
   11818:	cmp	r2, #0
   1181c:	beq	11874 <__assert_fail@plt+0x944>
   11820:	str	r9, [sp, #36]	; 0x24
   11824:	mov	r2, r5
   11828:	b	11b60 <__assert_fail@plt+0xc30>
   1182c:	bl	10e4c <__errno_location@plt>
   11830:	ldr	r4, [r0]
   11834:	mov	r2, #5
   11838:	ldr	r1, [pc, #984]	; 11c18 <__assert_fail@plt+0xce8>
   1183c:	mov	r0, #0
   11840:	bl	10d68 <dcgettext@plt>
   11844:	mov	r2, r0
   11848:	mov	r1, r4
   1184c:	mov	r0, #1
   11850:	bl	10dd4 <error@plt>
   11854:	mov	r2, #5
   11858:	ldr	r1, [pc, #956]	; 11c1c <__assert_fail@plt+0xcec>
   1185c:	mov	r0, #0
   11860:	bl	10d68 <dcgettext@plt>
   11864:	mov	r2, r0
   11868:	mov	r1, #0
   1186c:	mov	r0, #1
   11870:	bl	10dd4 <error@plt>
   11874:	cmp	r3, #0
   11878:	beq	1173c <__assert_fail@plt+0x80c>
   1187c:	ldr	r1, [sp, #28]
   11880:	mov	r0, r7
   11884:	bl	11064 <__assert_fail@plt+0x134>
   11888:	mov	r4, r5
   1188c:	mov	r9, #3072	; 0xc00
   11890:	ldr	r6, [sp, #16]
   11894:	b	11ba8 <__assert_fail@plt+0xc78>
   11898:	ldr	r3, [pc, #852]	; 11bf4 <__assert_fail@plt+0xcc4>
   1189c:	ldr	sl, [r3]
   118a0:	mov	r0, #30720	; 0x7800
   118a4:	bl	14744 <__assert_fail@plt+0x3814>
   118a8:	mov	fp, r0
   118ac:	mov	r0, #40960	; 0xa000
   118b0:	bl	14744 <__assert_fail@plt+0x3814>
   118b4:	str	r0, [sp, #12]
   118b8:	mov	r8, #0
   118bc:	mov	r3, #10
   118c0:	str	r3, [sp, #16]
   118c4:	b	118fc <__assert_fail@plt+0x9cc>
   118c8:	ldr	r3, [pc, #804]	; 11bf4 <__assert_fail@plt+0xcc4>
   118cc:	ldr	r3, [r3]
   118d0:	mov	r2, r9
   118d4:	mov	r1, #1
   118d8:	ldr	r0, [sp, #12]
   118dc:	bl	10d44 <fwrite_unlocked@plt>
   118e0:	cmp	r9, r0
   118e4:	bhi	11988 <__assert_fail@plt+0xa58>
   118e8:	ldr	r3, [r7]
   118ec:	and	r3, r3, #48	; 0x30
   118f0:	cmp	r5, #30720	; 0x7800
   118f4:	cmpeq	r3, #0
   118f8:	bne	11a94 <__assert_fail@plt+0xb64>
   118fc:	mov	r5, #0
   11900:	mov	r3, r7
   11904:	rsb	r2, r5, #30720	; 0x7800
   11908:	mov	r1, #1
   1190c:	add	r0, fp, r5
   11910:	bl	10f0c <fread_unlocked@plt>
   11914:	add	r5, r5, r0
   11918:	ldr	r3, [r7]
   1191c:	and	r3, r3, #48	; 0x30
   11920:	ldr	r2, [pc, #760]	; 11c20 <__assert_fail@plt+0xcf0>
   11924:	cmp	r5, r2
   11928:	cmple	r3, #0
   1192c:	beq	11900 <__assert_fail@plt+0x9d0>
   11930:	cmp	r5, #0
   11934:	ble	118e8 <__assert_fail@plt+0x9b8>
   11938:	mov	r1, #3
   1193c:	add	r0, r5, #2
   11940:	bl	15864 <__assert_fail@plt+0x4934>
   11944:	lsl	r9, r0, #2
   11948:	mov	r3, r9
   1194c:	ldr	r2, [sp, #12]
   11950:	mov	r1, r5
   11954:	mov	r0, fp
   11958:	bl	11db0 <__assert_fail@plt+0xe80>
   1195c:	ldr	r3, [sp, #8]
   11960:	cmp	r3, #0
   11964:	beq	118c8 <__assert_fail@plt+0x998>
   11968:	cmp	r9, #0
   1196c:	ble	118e8 <__assert_fail@plt+0x9b8>
   11970:	mov	r6, #0
   11974:	str	r7, [sp, #20]
   11978:	ldr	r7, [sp, #8]
   1197c:	str	fp, [sp, #24]
   11980:	ldr	fp, [sp, #12]
   11984:	b	11a20 <__assert_fail@plt+0xaf0>
   11988:	bl	10e4c <__errno_location@plt>
   1198c:	ldr	r4, [r0]
   11990:	mov	r2, #5
   11994:	ldr	r1, [pc, #636]	; 11c18 <__assert_fail@plt+0xce8>
   11998:	mov	r0, #0
   1199c:	bl	10d68 <dcgettext@plt>
   119a0:	mov	r2, r0
   119a4:	mov	r1, r4
   119a8:	mov	r0, #1
   119ac:	bl	10dd4 <error@plt>
   119b0:	ldr	r1, [sp, #16]
   119b4:	mov	r0, sl
   119b8:	bl	10eb8 <__overflow@plt>
   119bc:	cmn	r0, #1
   119c0:	movne	r8, #0
   119c4:	bne	11a18 <__assert_fail@plt+0xae8>
   119c8:	bl	10e4c <__errno_location@plt>
   119cc:	ldr	r4, [r0]
   119d0:	mov	r2, #5
   119d4:	ldr	r1, [pc, #572]	; 11c18 <__assert_fail@plt+0xce8>
   119d8:	mov	r0, #0
   119dc:	bl	10d68 <dcgettext@plt>
   119e0:	mov	r2, r0
   119e4:	mov	r1, r4
   119e8:	mov	r0, #1
   119ec:	bl	10dd4 <error@plt>
   119f0:	ldr	r3, [pc, #508]	; 11bf4 <__assert_fail@plt+0xcc4>
   119f4:	ldr	r3, [r3]
   119f8:	mov	r2, r4
   119fc:	mov	r1, #1
   11a00:	add	r0, fp, r6
   11a04:	bl	10d44 <fwrite_unlocked@plt>
   11a08:	cmp	r4, r0
   11a0c:	bhi	11a60 <__assert_fail@plt+0xb30>
   11a10:	add	r8, r8, r4
   11a14:	add	r6, r6, r4
   11a18:	cmp	r6, r9
   11a1c:	bge	11a88 <__assert_fail@plt+0xb58>
   11a20:	sub	r4, r9, r6
   11a24:	sub	r3, r7, r8
   11a28:	cmp	r4, r3
   11a2c:	movge	r4, r3
   11a30:	cmp	r4, #0
   11a34:	bne	119f0 <__assert_fail@plt+0xac0>
   11a38:	ldr	r3, [sl, #20]
   11a3c:	ldr	r2, [sl, #24]
   11a40:	cmp	r3, r2
   11a44:	bcs	119b0 <__assert_fail@plt+0xa80>
   11a48:	add	r2, r3, #1
   11a4c:	str	r2, [sl, #20]
   11a50:	mov	r2, #10
   11a54:	strb	r2, [r3]
   11a58:	mov	r8, #0
   11a5c:	b	11a18 <__assert_fail@plt+0xae8>
   11a60:	bl	10e4c <__errno_location@plt>
   11a64:	ldr	r4, [r0]
   11a68:	mov	r2, #5
   11a6c:	ldr	r1, [pc, #420]	; 11c18 <__assert_fail@plt+0xce8>
   11a70:	mov	r0, #0
   11a74:	bl	10d68 <dcgettext@plt>
   11a78:	mov	r2, r0
   11a7c:	mov	r1, r4
   11a80:	mov	r0, #1
   11a84:	bl	10dd4 <error@plt>
   11a88:	ldr	r7, [sp, #20]
   11a8c:	ldr	fp, [sp, #24]
   11a90:	b	118e8 <__assert_fail@plt+0x9b8>
   11a94:	ldr	r3, [sp, #8]
   11a98:	cmp	r3, #0
   11a9c:	cmpne	r8, #0
   11aa0:	ble	11ac4 <__assert_fail@plt+0xb94>
   11aa4:	ldr	r3, [sl, #20]
   11aa8:	ldr	r2, [sl, #24]
   11aac:	cmp	r3, r2
   11ab0:	addcc	r2, r3, #1
   11ab4:	strcc	r2, [sl, #20]
   11ab8:	movcc	r2, #10
   11abc:	strbcc	r2, [r3]
   11ac0:	bcs	11af8 <__assert_fail@plt+0xbc8>
   11ac4:	ldr	r3, [r7]
   11ac8:	tst	r3, #32
   11acc:	beq	11b34 <__assert_fail@plt+0xc04>
   11ad0:	bl	10e4c <__errno_location@plt>
   11ad4:	ldr	r4, [r0]
   11ad8:	mov	r2, #5
   11adc:	ldr	r1, [pc, #304]	; 11c14 <__assert_fail@plt+0xce4>
   11ae0:	mov	r0, #0
   11ae4:	bl	10d68 <dcgettext@plt>
   11ae8:	mov	r2, r0
   11aec:	mov	r1, r4
   11af0:	mov	r0, #1
   11af4:	bl	10dd4 <error@plt>
   11af8:	mov	r1, #10
   11afc:	mov	r0, sl
   11b00:	bl	10eb8 <__overflow@plt>
   11b04:	cmn	r0, #1
   11b08:	bne	11ac4 <__assert_fail@plt+0xb94>
   11b0c:	bl	10e4c <__errno_location@plt>
   11b10:	ldr	r4, [r0]
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #248]	; 11c18 <__assert_fail@plt+0xce8>
   11b1c:	mov	r0, #0
   11b20:	bl	10d68 <dcgettext@plt>
   11b24:	mov	r2, r0
   11b28:	mov	r1, r4
   11b2c:	mov	r0, #1
   11b30:	bl	10dd4 <error@plt>
   11b34:	ldr	r1, [sp, #28]
   11b38:	mov	r0, r7
   11b3c:	bl	11064 <__assert_fail@plt+0x134>
   11b40:	cmp	r4, #1
   11b44:	bgt	1187c <__assert_fail@plt+0x94c>
   11b48:	cmp	r4, #1
   11b4c:	beq	11814 <__assert_fail@plt+0x8e4>
   11b50:	str	r9, [sp, #36]	; 0x24
   11b54:	cmp	r4, #0
   11b58:	moveq	r2, r8
   11b5c:	movne	r2, r5
   11b60:	add	r3, sp, #36	; 0x24
   11b64:	str	r3, [sp]
   11b68:	mov	r3, r6
   11b6c:	mov	r1, sl
   11b70:	add	r0, sp, #40	; 0x28
   11b74:	bl	12048 <__assert_fail@plt+0x1118>
   11b78:	mov	fp, r0
   11b7c:	ldr	r3, [sp, #12]
   11b80:	ldr	r2, [sp, #36]	; 0x24
   11b84:	mov	r1, #1
   11b88:	mov	r0, r6
   11b8c:	bl	10d44 <fwrite_unlocked@plt>
   11b90:	ldr	r3, [sp, #36]	; 0x24
   11b94:	cmp	r0, r3
   11b98:	bcc	1182c <__assert_fail@plt+0x8fc>
   11b9c:	cmp	fp, #0
   11ba0:	beq	11854 <__assert_fail@plt+0x924>
   11ba4:	add	r4, r4, #1
   11ba8:	ldr	r3, [r7]
   11bac:	ands	r3, r3, #16
   11bb0:	bne	11b40 <__assert_fail@plt+0xc10>
   11bb4:	cmp	r4, #0
   11bb8:	ble	11b48 <__assert_fail@plt+0xc18>
   11bbc:	b	1173c <__assert_fail@plt+0x80c>
   11bc0:	andeq	r6, r1, r8, lsr #32
   11bc4:			; <UNDEFINED> instruction: 0x000161b4
   11bc8:	andeq	r6, r1, ip, asr r2
   11bcc:	andeq	r2, r1, r4, lsl #6
   11bd0:	andeq	r5, r1, r0, ror sp
   11bd4:	andeq	r6, r1, r0, lsr #5
   11bd8:	andeq	r7, r2, r8, asr r1
   11bdc:	andeq	r6, r1, r4, ror r2
   11be0:	andeq	r6, r1, r8, lsl #5
   11be4:	muleq	r1, r0, r2
   11be8:	andeq	r7, r2, ip, ror #1
   11bec:			; <UNDEFINED> instruction: 0x000161b0
   11bf0:	andeq	r5, r1, ip, ror #27
   11bf4:	andeq	r7, r2, r4, asr r1
   11bf8:	andeq	r7, r2, r0, asr #2
   11bfc:	andeq	r6, r1, r8, lsr #5
   11c00:	ldrdeq	r5, [r1], -r0
   11c04:			; <UNDEFINED> instruction: 0x000162bc
   11c08:	andeq	r6, r1, ip, lsl #5
   11c0c:	andeq	r7, r2, r0, asr r1
   11c10:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11c14:	andeq	r6, r1, r0, asr #5
   11c18:	andeq	r6, r1, ip, asr #5
   11c1c:	ldrdeq	r6, [r1], -r8
   11c20:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   11c24:	cmp	r1, #1
   11c28:	ble	11d94 <__assert_fail@plt+0xe64>
   11c2c:	push	{r4, r5, lr}
   11c30:	ldrb	ip, [r0]
   11c34:	ldr	lr, [pc, #368]	; 11dac <__assert_fail@plt+0xe7c>
   11c38:	ldrsb	ip, [lr, ip]
   11c3c:	cmp	ip, #0
   11c40:	blt	11d9c <__assert_fail@plt+0xe6c>
   11c44:	ldrb	lr, [r0, #1]
   11c48:	ldr	r4, [pc, #348]	; 11dac <__assert_fail@plt+0xe7c>
   11c4c:	ldrsb	r4, [r4, lr]
   11c50:	cmp	r4, #0
   11c54:	blt	11da4 <__assert_fail@plt+0xe74>
   11c58:	ldr	lr, [r2]
   11c5c:	ldr	r5, [r3]
   11c60:	cmp	r5, #0
   11c64:	beq	11c84 <__assert_fail@plt+0xd54>
   11c68:	asr	r5, r4, #4
   11c6c:	orr	ip, r5, ip, lsl #2
   11c70:	strb	ip, [lr]
   11c74:	ldr	ip, [r3]
   11c78:	sub	ip, ip, #1
   11c7c:	str	ip, [r3]
   11c80:	add	lr, lr, #1
   11c84:	cmp	r1, #2
   11c88:	beq	11d24 <__assert_fail@plt+0xdf4>
   11c8c:	ldrb	ip, [r0, #2]
   11c90:	cmp	ip, #61	; 0x3d
   11c94:	beq	11d30 <__assert_fail@plt+0xe00>
   11c98:	ldr	r5, [pc, #268]	; 11dac <__assert_fail@plt+0xe7c>
   11c9c:	ldrsb	ip, [r5, ip]
   11ca0:	cmp	ip, #0
   11ca4:	blt	11d5c <__assert_fail@plt+0xe2c>
   11ca8:	ldr	r5, [r3]
   11cac:	cmp	r5, #0
   11cb0:	beq	11cd0 <__assert_fail@plt+0xda0>
   11cb4:	asr	r5, ip, #2
   11cb8:	orr	r4, r5, r4, lsl #4
   11cbc:	strb	r4, [lr]
   11cc0:	ldr	r4, [r3]
   11cc4:	sub	r4, r4, #1
   11cc8:	str	r4, [r3]
   11ccc:	add	lr, lr, #1
   11cd0:	cmp	r1, #3
   11cd4:	beq	11d68 <__assert_fail@plt+0xe38>
   11cd8:	ldrb	r0, [r0, #3]
   11cdc:	cmp	r0, #61	; 0x3d
   11ce0:	beq	11d74 <__assert_fail@plt+0xe44>
   11ce4:	ldr	r1, [pc, #192]	; 11dac <__assert_fail@plt+0xe7c>
   11ce8:	ldrsb	r1, [r1, r0]
   11cec:	cmp	r1, #0
   11cf0:	blt	11d88 <__assert_fail@plt+0xe58>
   11cf4:	ldr	r0, [r3]
   11cf8:	cmp	r0, #0
   11cfc:	beq	11d18 <__assert_fail@plt+0xde8>
   11d00:	orr	ip, r1, ip, lsl #6
   11d04:	strb	ip, [lr]
   11d08:	ldr	r1, [r3]
   11d0c:	sub	r1, r1, #1
   11d10:	str	r1, [r3]
   11d14:	add	lr, lr, #1
   11d18:	str	lr, [r2]
   11d1c:	mov	r0, #1
   11d20:	pop	{r4, r5, pc}
   11d24:	str	lr, [r2]
   11d28:	mov	r0, #0
   11d2c:	pop	{r4, r5, pc}
   11d30:	cmp	r1, #4
   11d34:	beq	11d44 <__assert_fail@plt+0xe14>
   11d38:	str	lr, [r2]
   11d3c:	mov	r0, #0
   11d40:	pop	{r4, r5, pc}
   11d44:	ldrb	r3, [r0, #3]
   11d48:	cmp	r3, #61	; 0x3d
   11d4c:	beq	11d18 <__assert_fail@plt+0xde8>
   11d50:	str	lr, [r2]
   11d54:	mov	r0, #0
   11d58:	pop	{r4, r5, pc}
   11d5c:	str	lr, [r2]
   11d60:	mov	r0, #0
   11d64:	pop	{r4, r5, pc}
   11d68:	str	lr, [r2]
   11d6c:	mov	r0, #0
   11d70:	pop	{r4, r5, pc}
   11d74:	cmp	r1, #4
   11d78:	beq	11d18 <__assert_fail@plt+0xde8>
   11d7c:	str	lr, [r2]
   11d80:	mov	r0, #0
   11d84:	pop	{r4, r5, pc}
   11d88:	str	lr, [r2]
   11d8c:	mov	r0, #0
   11d90:	pop	{r4, r5, pc}
   11d94:	mov	r0, #0
   11d98:	bx	lr
   11d9c:	mov	r0, #0
   11da0:	pop	{r4, r5, pc}
   11da4:	mov	r0, #0
   11da8:	pop	{r4, r5, pc}
   11dac:	muleq	r1, r4, r3
   11db0:	push	{r4, r5, r6, lr}
   11db4:	tst	r3, #3
   11db8:	bne	11dcc <__assert_fail@plt+0xe9c>
   11dbc:	asr	ip, r3, #2
   11dc0:	add	ip, ip, ip, lsl #1
   11dc4:	cmp	r1, ip
   11dc8:	beq	11ddc <__assert_fail@plt+0xeac>
   11dcc:	ldr	lr, [pc, #392]	; 11f5c <__assert_fail@plt+0x102c>
   11dd0:	mov	r4, #61	; 0x3d
   11dd4:	mov	r5, #0
   11dd8:	b	11e6c <__assert_fail@plt+0xf3c>
   11ddc:	cmp	ip, #0
   11de0:	popeq	{r4, r5, r6, pc}
   11de4:	add	r2, r2, #4
   11de8:	add	ip, r0, #3
   11dec:	add	r1, r1, #3
   11df0:	add	lr, r0, r1
   11df4:	ldr	r0, [pc, #352]	; 11f5c <__assert_fail@plt+0x102c>
   11df8:	ldrb	r3, [ip, #-3]
   11dfc:	add	r1, r0, r3, lsr #2
   11e00:	ldrb	r1, [r1, #256]	; 0x100
   11e04:	strb	r1, [r2, #-4]
   11e08:	ldrb	r4, [ip, #-2]
   11e0c:	lsr	r1, r4, #4
   11e10:	add	r1, r1, r3, lsl #4
   11e14:	and	r1, r1, #63	; 0x3f
   11e18:	add	r1, r0, r1
   11e1c:	ldrb	r3, [r1, #256]	; 0x100
   11e20:	strb	r3, [r2, #-3]
   11e24:	ldrb	r1, [ip, #-1]
   11e28:	lsr	r3, r1, #6
   11e2c:	add	r3, r3, r4, lsl #2
   11e30:	and	r3, r3, #63	; 0x3f
   11e34:	add	r3, r0, r3
   11e38:	ldrb	r3, [r3, #256]	; 0x100
   11e3c:	strb	r3, [r2, #-2]
   11e40:	and	r1, r1, #63	; 0x3f
   11e44:	add	r1, r0, r1
   11e48:	ldrb	r3, [r1, #256]	; 0x100
   11e4c:	strb	r3, [r2, #-1]
   11e50:	add	r2, r2, #4
   11e54:	add	ip, ip, #3
   11e58:	cmp	lr, ip
   11e5c:	bne	11df8 <__assert_fail@plt+0xec8>
   11e60:	pop	{r4, r5, r6, pc}
   11e64:	subs	r1, r1, #1
   11e68:	addne	r0, r0, #3
   11e6c:	cmp	r1, #0
   11e70:	cmpne	r3, #0
   11e74:	beq	11f18 <__assert_fail@plt+0xfe8>
   11e78:	ldrb	ip, [r0]
   11e7c:	add	r6, lr, ip, lsr #2
   11e80:	ldrb	r6, [r6, #256]	; 0x100
   11e84:	strb	r6, [r2]
   11e88:	cmp	r3, #1
   11e8c:	popeq	{r4, r5, r6, pc}
   11e90:	lsl	ip, ip, #4
   11e94:	cmp	r1, #1
   11e98:	beq	11f28 <__assert_fail@plt+0xff8>
   11e9c:	ldrb	r6, [r0, #1]
   11ea0:	add	ip, ip, r6, lsr #4
   11ea4:	and	ip, ip, #63	; 0x3f
   11ea8:	add	ip, lr, ip
   11eac:	ldrb	ip, [ip, #256]	; 0x100
   11eb0:	strb	ip, [r2, #1]
   11eb4:	cmp	r3, #2
   11eb8:	popeq	{r4, r5, r6, pc}
   11ebc:	lsl	r6, r6, #2
   11ec0:	subs	r1, r1, #2
   11ec4:	ldrbne	ip, [r0, #2]
   11ec8:	lsrne	ip, ip, #6
   11ecc:	moveq	ip, r5
   11ed0:	add	ip, ip, r6
   11ed4:	and	ip, ip, #63	; 0x3f
   11ed8:	add	ip, lr, ip
   11edc:	ldrb	ip, [ip, #256]	; 0x100
   11ee0:	strb	ip, [r2, #2]
   11ee4:	cmp	r3, #3
   11ee8:	popeq	{r4, r5, r6, pc}
   11eec:	add	r2, r2, #4
   11ef0:	cmp	r1, #0
   11ef4:	beq	11f4c <__assert_fail@plt+0x101c>
   11ef8:	ldrb	ip, [r0, #2]
   11efc:	and	ip, ip, #63	; 0x3f
   11f00:	add	ip, lr, ip
   11f04:	ldrb	ip, [ip, #256]	; 0x100
   11f08:	strb	ip, [r2, #-1]
   11f0c:	subs	r3, r3, #4
   11f10:	bne	11e64 <__assert_fail@plt+0xf34>
   11f14:	pop	{r4, r5, r6, pc}
   11f18:	cmp	r3, #0
   11f1c:	movne	r3, #0
   11f20:	strbne	r3, [r2]
   11f24:	pop	{r4, r5, r6, pc}
   11f28:	and	ip, ip, #63	; 0x3f
   11f2c:	add	ip, lr, ip
   11f30:	ldrb	r1, [ip, #256]	; 0x100
   11f34:	strb	r1, [r2, #1]
   11f38:	cmp	r3, #2
   11f3c:	popeq	{r4, r5, r6, pc}
   11f40:	mov	ip, r4
   11f44:	mov	r1, #0
   11f48:	b	11ee0 <__assert_fail@plt+0xfb0>
   11f4c:	strb	r4, [r2, #-1]
   11f50:	subs	r3, r3, #4
   11f54:	bne	11e6c <__assert_fail@plt+0xf3c>
   11f58:	pop	{r4, r5, r6, pc}
   11f5c:	muleq	r1, r4, r3
   11f60:	push	{r4, r5, r6, r7, r8, lr}
   11f64:	mov	r7, r0
   11f68:	mov	r5, r1
   11f6c:	mov	r6, r2
   11f70:	ldr	r3, [pc, #168]	; 12020 <__assert_fail@plt+0x10f0>
   11f74:	smull	r2, r3, r3, r1
   11f78:	sub	r3, r3, r1, asr #31
   11f7c:	add	r4, r3, r3, lsl #1
   11f80:	cmp	r1, r4
   11f84:	moveq	r4, r3
   11f88:	addne	r4, r3, #1
   11f8c:	cmp	r4, #0
   11f90:	blt	11fe8 <__assert_fail@plt+0x10b8>
   11f94:	cmn	r4, #-536870911	; 0xe0000001
   11f98:	movle	r0, #0
   11f9c:	movgt	r0, #1
   11fa0:	cmp	r0, #0
   11fa4:	bne	12010 <__assert_fail@plt+0x10e0>
   11fa8:	cmp	r5, #0
   11fac:	blt	12010 <__assert_fail@plt+0x10e0>
   11fb0:	lsl	r4, r4, #2
   11fb4:	add	r8, r4, #1
   11fb8:	mov	r0, r8
   11fbc:	bl	15380 <__assert_fail@plt+0x4450>
   11fc0:	str	r0, [r6]
   11fc4:	cmp	r0, #0
   11fc8:	moveq	r4, r8
   11fcc:	beq	12018 <__assert_fail@plt+0x10e8>
   11fd0:	mov	r3, r8
   11fd4:	mov	r2, r0
   11fd8:	mov	r1, r5
   11fdc:	mov	r0, r7
   11fe0:	bl	11db0 <__assert_fail@plt+0xe80>
   11fe4:	b	12018 <__assert_fail@plt+0x10e8>
   11fe8:	cmn	r4, #1
   11fec:	moveq	r0, #0
   11ff0:	beq	11fa0 <__assert_fail@plt+0x1070>
   11ff4:	mov	r1, r4
   11ff8:	mov	r0, #-2147483648	; 0x80000000
   11ffc:	bl	15864 <__assert_fail@plt+0x4934>
   12000:	cmp	r0, #3
   12004:	movgt	r0, #0
   12008:	movle	r0, #1
   1200c:	b	11fa0 <__assert_fail@plt+0x1070>
   12010:	mov	r4, #0
   12014:	str	r4, [r6]
   12018:	mov	r0, r4
   1201c:	pop	{r4, r5, r6, r7, r8, pc}
   12020:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   12024:	ldr	r3, [pc, #12]	; 12038 <__assert_fail@plt+0x1108>
   12028:	ldrb	r0, [r3, r0]
   1202c:	eor	r0, r0, #128	; 0x80
   12030:	lsr	r0, r0, #7
   12034:	bx	lr
   12038:	muleq	r1, r4, r3
   1203c:	mov	r3, #0
   12040:	str	r3, [r0]
   12044:	bx	lr
   12048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1204c:	sub	sp, sp, #20
   12050:	mov	r4, r1
   12054:	mov	r5, r2
   12058:	str	r3, [sp, #4]
   1205c:	ldr	r3, [sp, #56]	; 0x38
   12060:	ldr	r3, [r3]
   12064:	str	r3, [sp, #12]
   12068:	subs	r6, r0, #0
   1206c:	movne	fp, #1
   12070:	moveq	fp, #0
   12074:	ldrne	r9, [r6]
   12078:	clzne	r8, r2
   1207c:	lsrne	r8, r8, #5
   12080:	moveq	r9, #0
   12084:	moveq	r8, r9
   12088:	eor	r8, r8, #1
   1208c:	and	sl, fp, r8
   12090:	add	r3, r6, #4
   12094:	str	r3, [sp]
   12098:	b	121d8 <__assert_fail@plt+0x12a8>
   1209c:	ldr	r7, [sp, #12]
   120a0:	cmp	r5, #0
   120a4:	movne	r3, #0
   120a8:	andeq	r3, r8, #1
   120ac:	cmp	r3, #0
   120b0:	bne	12224 <__assert_fail@plt+0x12f4>
   120b4:	cmp	r5, #0
   120b8:	beq	120dc <__assert_fail@plt+0x11ac>
   120bc:	ldrb	r3, [r4]
   120c0:	cmp	r3, #10
   120c4:	movne	r3, #0
   120c8:	andeq	r3, fp, #1
   120cc:	cmp	r3, #0
   120d0:	subne	r5, r5, #1
   120d4:	addne	r4, r4, #1
   120d8:	bne	121d8 <__assert_fail@plt+0x12a8>
   120dc:	ldr	r3, [sp, #12]
   120e0:	sub	r2, r7, r3
   120e4:	ldr	r3, [sp, #4]
   120e8:	sub	r3, r3, r2
   120ec:	str	r3, [sp, #4]
   120f0:	str	r7, [sp, #12]
   120f4:	add	r7, r4, r5
   120f8:	cmp	r6, #0
   120fc:	beq	12218 <__assert_fail@plt+0x12e8>
   12100:	ldr	r3, [r6]
   12104:	cmp	r3, #4
   12108:	moveq	r3, #0
   1210c:	streq	r3, [r6]
   12110:	ldr	r3, [r6]
   12114:	clz	r3, r3
   12118:	lsr	r3, r3, #5
   1211c:	cmp	r5, #3
   12120:	movle	r3, #0
   12124:	cmp	r3, #0
   12128:	beq	12144 <__assert_fail@plt+0x1214>
   1212c:	mov	r2, #4
   12130:	mov	r1, #10
   12134:	mov	r0, r4
   12138:	bl	10e94 <memchr@plt>
   1213c:	cmp	r0, #0
   12140:	beq	12158 <__assert_fail@plt+0x1228>
   12144:	cmp	r7, r4
   12148:	movls	r0, r4
   1214c:	bls	12198 <__assert_fail@plt+0x1268>
   12150:	mov	r0, r4
   12154:	b	12170 <__assert_fail@plt+0x1240>
   12158:	mov	r0, r4
   1215c:	add	r4, r4, #4
   12160:	mov	r5, #4
   12164:	b	121bc <__assert_fail@plt+0x128c>
   12168:	cmp	r7, r0
   1216c:	beq	12198 <__assert_fail@plt+0x1268>
   12170:	ldrb	r2, [r0], #1
   12174:	cmp	r2, #10
   12178:	beq	12168 <__assert_fail@plt+0x1238>
   1217c:	ldr	ip, [r6]
   12180:	add	r1, ip, #1
   12184:	mov	r3, r6
   12188:	str	r1, [r3], ip
   1218c:	strb	r2, [r3, #4]
   12190:	cmp	r1, #4
   12194:	bne	12168 <__assert_fail@plt+0x1238>
   12198:	ldr	r5, [r6]
   1219c:	mov	r4, r0
   121a0:	ldr	r0, [sp]
   121a4:	cmp	r5, #0
   121a8:	beq	12220 <__assert_fail@plt+0x12f0>
   121ac:	cmp	r5, #3
   121b0:	bgt	121bc <__assert_fail@plt+0x128c>
   121b4:	cmp	sl, #0
   121b8:	bne	1224c <__assert_fail@plt+0x131c>
   121bc:	add	r3, sp, #12
   121c0:	add	r2, sp, #4
   121c4:	mov	r1, r5
   121c8:	bl	11c24 <__assert_fail@plt+0xcf4>
   121cc:	cmp	r0, #0
   121d0:	beq	12224 <__assert_fail@plt+0x12f4>
   121d4:	sub	r5, r7, r4
   121d8:	cmp	r9, #0
   121dc:	movne	r3, #0
   121e0:	andeq	r3, r8, #1
   121e4:	cmp	r3, #0
   121e8:	beq	1209c <__assert_fail@plt+0x116c>
   121ec:	ldr	r7, [sp, #12]
   121f0:	add	r3, sp, #12
   121f4:	add	r2, sp, #4
   121f8:	mov	r1, r5
   121fc:	mov	r0, r4
   12200:	bl	11c24 <__assert_fail@plt+0xcf4>
   12204:	cmp	r0, #0
   12208:	beq	120a0 <__assert_fail@plt+0x1170>
   1220c:	sub	r5, r5, #4
   12210:	add	r4, r4, #4
   12214:	b	121ec <__assert_fail@plt+0x12bc>
   12218:	mov	r0, r4
   1221c:	b	121a4 <__assert_fail@plt+0x1274>
   12220:	mov	r5, #0
   12224:	ldr	r3, [sp, #56]	; 0x38
   12228:	ldr	r3, [r3]
   1222c:	ldr	r2, [sp, #12]
   12230:	sub	r3, r3, r2
   12234:	ldr	r2, [sp, #56]	; 0x38
   12238:	str	r3, [r2]
   1223c:	clz	r0, r5
   12240:	lsr	r0, r0, #5
   12244:	add	sp, sp, #20
   12248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1224c:	mov	r5, #0
   12250:	b	12224 <__assert_fail@plt+0x12f4>
   12254:	push	{r4, r5, r6, r7, r8, lr}
   12258:	sub	sp, sp, #16
   1225c:	mov	r7, r0
   12260:	mov	r8, r1
   12264:	mov	r4, r2
   12268:	mov	r5, r3
   1226c:	ldr	r6, [sp, #40]	; 0x28
   12270:	asr	r0, r2, #2
   12274:	add	r0, r0, #1
   12278:	add	r0, r0, r0, lsl #1
   1227c:	str	r0, [sp, #12]
   12280:	bl	15380 <__assert_fail@plt+0x4450>
   12284:	str	r0, [r5]
   12288:	cmp	r0, #0
   1228c:	moveq	r4, #1
   12290:	beq	122c4 <__assert_fail@plt+0x1394>
   12294:	add	r3, sp, #12
   12298:	str	r3, [sp]
   1229c:	mov	r3, r0
   122a0:	mov	r2, r4
   122a4:	mov	r1, r8
   122a8:	mov	r0, r7
   122ac:	bl	12048 <__assert_fail@plt+0x1118>
   122b0:	subs	r4, r0, #0
   122b4:	beq	122d0 <__assert_fail@plt+0x13a0>
   122b8:	cmp	r6, #0
   122bc:	ldrne	r3, [sp, #12]
   122c0:	strne	r3, [r6]
   122c4:	mov	r0, r4
   122c8:	add	sp, sp, #16
   122cc:	pop	{r4, r5, r6, r7, r8, pc}
   122d0:	ldr	r0, [r5]
   122d4:	bl	1255c <__assert_fail@plt+0x162c>
   122d8:	mov	r3, #0
   122dc:	str	r3, [r5]
   122e0:	b	122c4 <__assert_fail@plt+0x1394>
   122e4:	ldr	r3, [pc, #4]	; 122f0 <__assert_fail@plt+0x13c0>
   122e8:	str	r0, [r3]
   122ec:	bx	lr
   122f0:	andeq	r7, r2, r0, ror #2
   122f4:	ldr	r3, [pc, #4]	; 12300 <__assert_fail@plt+0x13d0>
   122f8:	strb	r0, [r3, #4]
   122fc:	bx	lr
   12300:	andeq	r7, r2, r0, ror #2
   12304:	push	{r4, r5, r6, lr}
   12308:	sub	sp, sp, #8
   1230c:	ldr	r3, [pc, #200]	; 123dc <__assert_fail@plt+0x14ac>
   12310:	ldr	r0, [r3]
   12314:	bl	15400 <__assert_fail@plt+0x44d0>
   12318:	cmp	r0, #0
   1231c:	beq	12340 <__assert_fail@plt+0x1410>
   12320:	ldr	r3, [pc, #184]	; 123e0 <__assert_fail@plt+0x14b0>
   12324:	ldrb	r3, [r3, #4]
   12328:	cmp	r3, #0
   1232c:	beq	1235c <__assert_fail@plt+0x142c>
   12330:	bl	10e4c <__errno_location@plt>
   12334:	ldr	r3, [r0]
   12338:	cmp	r3, #32
   1233c:	bne	1235c <__assert_fail@plt+0x142c>
   12340:	ldr	r3, [pc, #156]	; 123e4 <__assert_fail@plt+0x14b4>
   12344:	ldr	r0, [r3]
   12348:	bl	15400 <__assert_fail@plt+0x44d0>
   1234c:	cmp	r0, #0
   12350:	bne	123d0 <__assert_fail@plt+0x14a0>
   12354:	add	sp, sp, #8
   12358:	pop	{r4, r5, r6, pc}
   1235c:	mov	r2, #5
   12360:	ldr	r1, [pc, #128]	; 123e8 <__assert_fail@plt+0x14b8>
   12364:	mov	r0, #0
   12368:	bl	10d68 <dcgettext@plt>
   1236c:	mov	r4, r0
   12370:	ldr	r3, [pc, #104]	; 123e0 <__assert_fail@plt+0x14b0>
   12374:	ldr	r5, [r3]
   12378:	cmp	r5, #0
   1237c:	beq	123b4 <__assert_fail@plt+0x1484>
   12380:	bl	10e4c <__errno_location@plt>
   12384:	ldr	r6, [r0]
   12388:	mov	r0, r5
   1238c:	bl	14024 <__assert_fail@plt+0x30f4>
   12390:	str	r4, [sp]
   12394:	mov	r3, r0
   12398:	ldr	r2, [pc, #76]	; 123ec <__assert_fail@plt+0x14bc>
   1239c:	mov	r1, r6
   123a0:	mov	r0, #0
   123a4:	bl	10dd4 <error@plt>
   123a8:	ldr	r3, [pc, #64]	; 123f0 <__assert_fail@plt+0x14c0>
   123ac:	ldr	r0, [r3]
   123b0:	bl	10d20 <_exit@plt>
   123b4:	bl	10e4c <__errno_location@plt>
   123b8:	mov	r3, r4
   123bc:	ldr	r2, [pc, #48]	; 123f4 <__assert_fail@plt+0x14c4>
   123c0:	ldr	r1, [r0]
   123c4:	mov	r0, #0
   123c8:	bl	10dd4 <error@plt>
   123cc:	b	123a8 <__assert_fail@plt+0x1478>
   123d0:	ldr	r3, [pc, #24]	; 123f0 <__assert_fail@plt+0x14c0>
   123d4:	ldr	r0, [r3]
   123d8:	bl	10d20 <_exit@plt>
   123dc:	andeq	r7, r2, r4, asr r1
   123e0:	andeq	r7, r2, r0, ror #2
   123e4:	andeq	r7, r2, r8, asr #2
   123e8:	andeq	r6, r1, ip, asr #5
   123ec:	andeq	r6, r1, r8, lsl #5
   123f0:	strdeq	r7, [r2], -r0
   123f4:	andeq	r6, r1, ip, lsl #5
   123f8:	push	{r4, r5, lr}
   123fc:	sub	sp, sp, #20
   12400:	ldr	r1, [sp, #40]	; 0x28
   12404:	str	r1, [sp, #8]
   12408:	ldrd	r4, [sp, #32]
   1240c:	strd	r4, [sp]
   12410:	bl	10cf0 <posix_fadvise64@plt>
   12414:	add	sp, sp, #20
   12418:	pop	{r4, r5, pc}
   1241c:	cmp	r0, #0
   12420:	bxeq	lr
   12424:	push	{r4, lr}
   12428:	sub	sp, sp, #16
   1242c:	mov	r4, r1
   12430:	bl	10e7c <fileno@plt>
   12434:	str	r4, [sp, #8]
   12438:	mov	r2, #0
   1243c:	mov	r3, #0
   12440:	strd	r2, [sp]
   12444:	bl	10cf0 <posix_fadvise64@plt>
   12448:	add	sp, sp, #16
   1244c:	pop	{r4, pc}
   12450:	push	{r4, r5, r6, lr}
   12454:	sub	sp, sp, #8
   12458:	mov	r4, r0
   1245c:	bl	10e7c <fileno@plt>
   12460:	cmp	r0, #0
   12464:	blt	124dc <__assert_fail@plt+0x15ac>
   12468:	mov	r0, r4
   1246c:	bl	10df8 <__freading@plt>
   12470:	cmp	r0, #0
   12474:	beq	124a8 <__assert_fail@plt+0x1578>
   12478:	mov	r0, r4
   1247c:	bl	10e7c <fileno@plt>
   12480:	mov	r3, #1
   12484:	str	r3, [sp]
   12488:	mov	r2, #0
   1248c:	mov	r3, #0
   12490:	bl	10da4 <lseek64@plt>
   12494:	mvn	r2, #0
   12498:	mvn	r3, #0
   1249c:	cmp	r1, r3
   124a0:	cmpeq	r0, r2
   124a4:	beq	124e8 <__assert_fail@plt+0x15b8>
   124a8:	mov	r0, r4
   124ac:	bl	124f8 <__assert_fail@plt+0x15c8>
   124b0:	cmp	r0, #0
   124b4:	beq	124e8 <__assert_fail@plt+0x15b8>
   124b8:	bl	10e4c <__errno_location@plt>
   124bc:	mov	r5, r0
   124c0:	ldr	r6, [r0]
   124c4:	mov	r0, r4
   124c8:	bl	10ea0 <fclose@plt>
   124cc:	cmp	r6, #0
   124d0:	strne	r6, [r5]
   124d4:	mvnne	r0, #0
   124d8:	b	124f0 <__assert_fail@plt+0x15c0>
   124dc:	mov	r0, r4
   124e0:	bl	10ea0 <fclose@plt>
   124e4:	b	124f0 <__assert_fail@plt+0x15c0>
   124e8:	mov	r0, r4
   124ec:	bl	10ea0 <fclose@plt>
   124f0:	add	sp, sp, #8
   124f4:	pop	{r4, r5, r6, pc}
   124f8:	push	{r4, lr}
   124fc:	sub	sp, sp, #8
   12500:	subs	r4, r0, #0
   12504:	beq	12518 <__assert_fail@plt+0x15e8>
   12508:	mov	r0, r4
   1250c:	bl	10df8 <__freading@plt>
   12510:	cmp	r0, #0
   12514:	bne	12528 <__assert_fail@plt+0x15f8>
   12518:	mov	r0, r4
   1251c:	bl	10cfc <fflush@plt>
   12520:	add	sp, sp, #8
   12524:	pop	{r4, pc}
   12528:	ldr	r3, [r4]
   1252c:	tst	r3, #256	; 0x100
   12530:	bne	12540 <__assert_fail@plt+0x1610>
   12534:	mov	r0, r4
   12538:	bl	10cfc <fflush@plt>
   1253c:	b	12520 <__assert_fail@plt+0x15f0>
   12540:	mov	r3, #1
   12544:	str	r3, [sp]
   12548:	mov	r2, #0
   1254c:	mov	r3, #0
   12550:	mov	r0, r4
   12554:	bl	125b4 <__assert_fail@plt+0x1684>
   12558:	b	12534 <__assert_fail@plt+0x1604>
   1255c:	push	{r4, r5, lr}
   12560:	sub	sp, sp, #12
   12564:	mov	r5, r0
   12568:	bl	10e4c <__errno_location@plt>
   1256c:	mov	r4, r0
   12570:	ldr	r3, [r0]
   12574:	str	r3, [sp]
   12578:	str	r3, [sp, #4]
   1257c:	mov	r3, #0
   12580:	str	r3, [r0]
   12584:	mov	r0, r5
   12588:	bl	10d14 <free@plt>
   1258c:	ldr	r3, [r4]
   12590:	cmp	r3, #0
   12594:	moveq	r3, #4
   12598:	movne	r3, #0
   1259c:	add	r2, sp, #8
   125a0:	add	r3, r2, r3
   125a4:	ldr	r3, [r3, #-8]
   125a8:	str	r3, [r4]
   125ac:	add	sp, sp, #12
   125b0:	pop	{r4, r5, pc}
   125b4:	push	{r4, r5, r6, r7, lr}
   125b8:	sub	sp, sp, #12
   125bc:	mov	r4, r0
   125c0:	mov	r6, r2
   125c4:	mov	r7, r3
   125c8:	ldr	r5, [sp, #32]
   125cc:	ldr	r2, [r0, #8]
   125d0:	ldr	r3, [r0, #4]
   125d4:	cmp	r2, r3
   125d8:	beq	125f8 <__assert_fail@plt+0x16c8>
   125dc:	str	r5, [sp]
   125e0:	mov	r2, r6
   125e4:	mov	r3, r7
   125e8:	mov	r0, r4
   125ec:	bl	10eac <fseeko64@plt>
   125f0:	add	sp, sp, #12
   125f4:	pop	{r4, r5, r6, r7, pc}
   125f8:	ldr	r2, [r0, #20]
   125fc:	ldr	r3, [r0, #16]
   12600:	cmp	r2, r3
   12604:	bne	125dc <__assert_fail@plt+0x16ac>
   12608:	ldr	r3, [r0, #36]	; 0x24
   1260c:	cmp	r3, #0
   12610:	bne	125dc <__assert_fail@plt+0x16ac>
   12614:	bl	10e7c <fileno@plt>
   12618:	str	r5, [sp]
   1261c:	mov	r2, r6
   12620:	mov	r3, r7
   12624:	bl	10da4 <lseek64@plt>
   12628:	mvn	r2, #0
   1262c:	mvn	r3, #0
   12630:	cmp	r1, r3
   12634:	cmpeq	r0, r2
   12638:	beq	12654 <__assert_fail@plt+0x1724>
   1263c:	ldr	r3, [r4]
   12640:	bic	r3, r3, #16
   12644:	str	r3, [r4]
   12648:	strd	r0, [r4, #80]	; 0x50
   1264c:	mov	r0, #0
   12650:	b	125f0 <__assert_fail@plt+0x16c0>
   12654:	mvn	r0, #0
   12658:	b	125f0 <__assert_fail@plt+0x16c0>
   1265c:	push	{r4, r5, r6, lr}
   12660:	subs	r4, r0, #0
   12664:	beq	126dc <__assert_fail@plt+0x17ac>
   12668:	mov	r1, #47	; 0x2f
   1266c:	mov	r0, r4
   12670:	bl	10ed0 <strrchr@plt>
   12674:	cmp	r0, #0
   12678:	addne	r5, r0, #1
   1267c:	moveq	r5, r4
   12680:	sub	r3, r5, r4
   12684:	cmp	r3, #6
   12688:	ble	126c8 <__assert_fail@plt+0x1798>
   1268c:	mov	r2, #7
   12690:	ldr	r1, [pc, #96]	; 126f8 <__assert_fail@plt+0x17c8>
   12694:	sub	r0, r5, #7
   12698:	bl	10f18 <strncmp@plt>
   1269c:	cmp	r0, #0
   126a0:	bne	126c8 <__assert_fail@plt+0x1798>
   126a4:	mov	r2, #3
   126a8:	ldr	r1, [pc, #76]	; 126fc <__assert_fail@plt+0x17cc>
   126ac:	mov	r0, r5
   126b0:	bl	10f18 <strncmp@plt>
   126b4:	cmp	r0, #0
   126b8:	addeq	r4, r5, #3
   126bc:	ldreq	r3, [pc, #60]	; 12700 <__assert_fail@plt+0x17d0>
   126c0:	streq	r4, [r3]
   126c4:	movne	r4, r5
   126c8:	ldr	r3, [pc, #52]	; 12704 <__assert_fail@plt+0x17d4>
   126cc:	str	r4, [r3]
   126d0:	ldr	r3, [pc, #48]	; 12708 <__assert_fail@plt+0x17d8>
   126d4:	str	r4, [r3]
   126d8:	pop	{r4, r5, r6, pc}
   126dc:	ldr	r3, [pc, #40]	; 1270c <__assert_fail@plt+0x17dc>
   126e0:	ldr	r3, [r3]
   126e4:	mov	r2, #55	; 0x37
   126e8:	mov	r1, #1
   126ec:	ldr	r0, [pc, #28]	; 12710 <__assert_fail@plt+0x17e0>
   126f0:	bl	10d98 <fwrite@plt>
   126f4:	bl	10f24 <abort@plt>
   126f8:	andeq	r6, r1, ip, lsl #10
   126fc:	andeq	r6, r1, r4, lsl r5
   12700:	andeq	r7, r2, r8, lsr r1
   12704:	andeq	r7, r2, r8, ror #2
   12708:	andeq	r7, r2, ip, lsr r1
   1270c:	andeq	r7, r2, r8, asr #2
   12710:	ldrdeq	r6, [r1], -r4
   12714:	push	{r4, r5, r6, lr}
   12718:	mov	r5, r0
   1271c:	mov	r4, r1
   12720:	mov	r2, #48	; 0x30
   12724:	mov	r1, #0
   12728:	bl	10e64 <memset@plt>
   1272c:	cmp	r4, #10
   12730:	beq	12740 <__assert_fail@plt+0x1810>
   12734:	str	r4, [r5]
   12738:	mov	r0, r5
   1273c:	pop	{r4, r5, r6, pc}
   12740:	bl	10f24 <abort@plt>
   12744:	push	{r4, r5, r6, lr}
   12748:	mov	r4, r0
   1274c:	mov	r5, r1
   12750:	mov	r2, #5
   12754:	mov	r1, r0
   12758:	mov	r0, #0
   1275c:	bl	10d68 <dcgettext@plt>
   12760:	cmp	r4, r0
   12764:	popne	{r4, r5, r6, pc}
   12768:	bl	15478 <__assert_fail@plt+0x4548>
   1276c:	ldrb	r3, [r0]
   12770:	bic	r3, r3, #32
   12774:	cmp	r3, #85	; 0x55
   12778:	beq	127f4 <__assert_fail@plt+0x18c4>
   1277c:	cmp	r3, #71	; 0x47
   12780:	bne	12850 <__assert_fail@plt+0x1920>
   12784:	ldrb	r3, [r0, #1]
   12788:	bic	r3, r3, #32
   1278c:	cmp	r3, #66	; 0x42
   12790:	bne	12850 <__assert_fail@plt+0x1920>
   12794:	ldrb	r3, [r0, #2]
   12798:	cmp	r3, #49	; 0x31
   1279c:	bne	12850 <__assert_fail@plt+0x1920>
   127a0:	ldrb	r3, [r0, #3]
   127a4:	cmp	r3, #56	; 0x38
   127a8:	bne	12850 <__assert_fail@plt+0x1920>
   127ac:	ldrb	r3, [r0, #4]
   127b0:	cmp	r3, #48	; 0x30
   127b4:	bne	12850 <__assert_fail@plt+0x1920>
   127b8:	ldrb	r3, [r0, #5]
   127bc:	cmp	r3, #51	; 0x33
   127c0:	bne	12850 <__assert_fail@plt+0x1920>
   127c4:	ldrb	r3, [r0, #6]
   127c8:	cmp	r3, #48	; 0x30
   127cc:	bne	12850 <__assert_fail@plt+0x1920>
   127d0:	ldrb	r3, [r0, #7]
   127d4:	cmp	r3, #0
   127d8:	bne	12850 <__assert_fail@plt+0x1920>
   127dc:	ldrb	r2, [r4]
   127e0:	ldr	r3, [pc, #124]	; 12864 <__assert_fail@plt+0x1934>
   127e4:	ldr	r0, [pc, #124]	; 12868 <__assert_fail@plt+0x1938>
   127e8:	cmp	r2, #96	; 0x60
   127ec:	movne	r0, r3
   127f0:	pop	{r4, r5, r6, pc}
   127f4:	ldrb	r3, [r0, #1]
   127f8:	bic	r3, r3, #32
   127fc:	cmp	r3, #84	; 0x54
   12800:	bne	12850 <__assert_fail@plt+0x1920>
   12804:	ldrb	r3, [r0, #2]
   12808:	bic	r3, r3, #32
   1280c:	cmp	r3, #70	; 0x46
   12810:	bne	12850 <__assert_fail@plt+0x1920>
   12814:	ldrb	r3, [r0, #3]
   12818:	cmp	r3, #45	; 0x2d
   1281c:	bne	12850 <__assert_fail@plt+0x1920>
   12820:	ldrb	r3, [r0, #4]
   12824:	cmp	r3, #56	; 0x38
   12828:	bne	12850 <__assert_fail@plt+0x1920>
   1282c:	ldrb	r3, [r0, #5]
   12830:	cmp	r3, #0
   12834:	bne	12850 <__assert_fail@plt+0x1920>
   12838:	ldrb	r2, [r4]
   1283c:	ldr	r3, [pc, #40]	; 1286c <__assert_fail@plt+0x193c>
   12840:	ldr	r0, [pc, #40]	; 12870 <__assert_fail@plt+0x1940>
   12844:	cmp	r2, #96	; 0x60
   12848:	movne	r0, r3
   1284c:	pop	{r4, r5, r6, pc}
   12850:	ldr	r3, [pc, #28]	; 12874 <__assert_fail@plt+0x1944>
   12854:	ldr	r0, [pc, #28]	; 12878 <__assert_fail@plt+0x1948>
   12858:	cmp	r5, #9
   1285c:	movne	r0, r3
   12860:	pop	{r4, r5, r6, pc}
   12864:	andeq	r6, r1, r0, ror r5
   12868:	andeq	r6, r1, ip, ror r5
   1286c:	andeq	r6, r1, ip, ror #10
   12870:	andeq	r6, r1, r0, lsl #11
   12874:	andeq	r6, r1, r4, ror r5
   12878:	andeq	r6, r1, r8, ror r5
   1287c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12880:	sub	sp, sp, #116	; 0x74
   12884:	str	r0, [sp, #36]	; 0x24
   12888:	mov	sl, r1
   1288c:	str	r2, [sp, #52]	; 0x34
   12890:	str	r3, [sp, #28]
   12894:	ldr	r8, [sp, #152]	; 0x98
   12898:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   1289c:	str	r0, [sp, #84]	; 0x54
   128a0:	ldr	r3, [sp, #156]	; 0x9c
   128a4:	lsr	r3, r3, #1
   128a8:	and	r3, r3, #1
   128ac:	str	r3, [sp, #32]
   128b0:	mov	r3, #1
   128b4:	str	r3, [sp, #40]	; 0x28
   128b8:	mov	r3, #0
   128bc:	str	r3, [sp, #80]	; 0x50
   128c0:	str	r3, [sp, #44]	; 0x2c
   128c4:	str	r3, [sp, #48]	; 0x30
   128c8:	str	r3, [sp, #60]	; 0x3c
   128cc:	str	r3, [sp, #72]	; 0x48
   128d0:	str	r3, [sp, #76]	; 0x4c
   128d4:	mov	r7, sl
   128d8:	mov	sl, r8
   128dc:	cmp	sl, #10
   128e0:	ldrls	pc, [pc, sl, lsl #2]
   128e4:	b	12a9c <__assert_fail@plt+0x1b6c>
   128e8:	andeq	r2, r1, ip, asr #18
   128ec:	andeq	r2, r1, ip, lsl r9
   128f0:	andeq	r2, r1, r8, ror sl
   128f4:	andeq	r2, r1, r4, lsl r9
   128f8:	andeq	r2, r1, ip, lsr #20
   128fc:	andeq	r2, r1, ip, asr r9
   12900:	andeq	r3, r1, r8, asr #19
   12904:	andeq	r2, r1, r0, lsr #21
   12908:	muleq	r1, r8, r9
   1290c:	muleq	r1, r8, r9
   12910:	muleq	r1, r8, r9
   12914:	mov	r3, #1
   12918:	str	r3, [sp, #48]	; 0x30
   1291c:	mov	r3, #1
   12920:	str	r3, [sp, #32]
   12924:	str	r3, [sp, #60]	; 0x3c
   12928:	ldr	r3, [pc, #4068]	; 13914 <__assert_fail@plt+0x29e4>
   1292c:	str	r3, [sp, #72]	; 0x48
   12930:	mov	fp, #0
   12934:	mov	sl, #2
   12938:	mov	r6, #0
   1293c:	ldr	r3, [sp, #48]	; 0x30
   12940:	eor	r3, r3, #1
   12944:	str	r3, [sp, #68]	; 0x44
   12948:	b	13230 <__assert_fail@plt+0x2300>
   1294c:	mov	r3, #0
   12950:	str	r3, [sp, #32]
   12954:	mov	fp, r3
   12958:	b	12938 <__assert_fail@plt+0x1a08>
   1295c:	ldr	r3, [sp, #32]
   12960:	cmp	r3, #0
   12964:	bne	12ab8 <__assert_fail@plt+0x1b88>
   12968:	cmp	r7, #0
   1296c:	beq	12ad8 <__assert_fail@plt+0x1ba8>
   12970:	ldr	r3, [sp, #36]	; 0x24
   12974:	mov	r2, #34	; 0x22
   12978:	strb	r2, [r3]
   1297c:	mov	r3, #1
   12980:	str	r3, [sp, #48]	; 0x30
   12984:	str	r3, [sp, #60]	; 0x3c
   12988:	ldr	r3, [pc, #3980]	; 1391c <__assert_fail@plt+0x29ec>
   1298c:	str	r3, [sp, #72]	; 0x48
   12990:	mov	fp, #1
   12994:	b	12938 <__assert_fail@plt+0x1a08>
   12998:	cmp	sl, #10
   1299c:	beq	129c0 <__assert_fail@plt+0x1a90>
   129a0:	mov	r1, sl
   129a4:	ldr	r0, [pc, #3948]	; 13918 <__assert_fail@plt+0x29e8>
   129a8:	bl	12744 <__assert_fail@plt+0x1814>
   129ac:	str	r0, [sp, #164]	; 0xa4
   129b0:	mov	r1, sl
   129b4:	ldr	r0, [pc, #3928]	; 13914 <__assert_fail@plt+0x29e4>
   129b8:	bl	12744 <__assert_fail@plt+0x1814>
   129bc:	str	r0, [sp, #168]	; 0xa8
   129c0:	ldr	r3, [sp, #32]
   129c4:	cmp	r3, #0
   129c8:	movne	fp, #0
   129cc:	bne	12a04 <__assert_fail@plt+0x1ad4>
   129d0:	ldr	r3, [sp, #164]	; 0xa4
   129d4:	ldrb	r3, [r3]
   129d8:	cmp	r3, #0
   129dc:	beq	12a24 <__assert_fail@plt+0x1af4>
   129e0:	ldr	r2, [sp, #164]	; 0xa4
   129e4:	mov	fp, #0
   129e8:	ldr	r1, [sp, #36]	; 0x24
   129ec:	cmp	r7, fp
   129f0:	strbhi	r3, [r1, fp]
   129f4:	add	fp, fp, #1
   129f8:	ldrb	r3, [r2, #1]!
   129fc:	cmp	r3, #0
   12a00:	bne	129ec <__assert_fail@plt+0x1abc>
   12a04:	ldr	r0, [sp, #168]	; 0xa8
   12a08:	bl	10e34 <strlen@plt>
   12a0c:	str	r0, [sp, #60]	; 0x3c
   12a10:	ldr	r3, [sp, #168]	; 0xa8
   12a14:	str	r3, [sp, #72]	; 0x48
   12a18:	mov	r3, #1
   12a1c:	str	r3, [sp, #48]	; 0x30
   12a20:	b	12938 <__assert_fail@plt+0x1a08>
   12a24:	mov	fp, #0
   12a28:	b	12a04 <__assert_fail@plt+0x1ad4>
   12a2c:	ldr	r3, [sp, #32]
   12a30:	cmp	r3, #0
   12a34:	bne	12af4 <__assert_fail@plt+0x1bc4>
   12a38:	mov	r3, #1
   12a3c:	str	r3, [sp, #48]	; 0x30
   12a40:	cmp	r7, #0
   12a44:	beq	12b10 <__assert_fail@plt+0x1be0>
   12a48:	ldr	r3, [sp, #36]	; 0x24
   12a4c:	mov	r2, #39	; 0x27
   12a50:	strb	r2, [r3]
   12a54:	mov	r3, #0
   12a58:	str	r3, [sp, #32]
   12a5c:	mov	r3, #1
   12a60:	str	r3, [sp, #60]	; 0x3c
   12a64:	ldr	r3, [pc, #3752]	; 13914 <__assert_fail@plt+0x29e4>
   12a68:	str	r3, [sp, #72]	; 0x48
   12a6c:	mov	fp, #1
   12a70:	mov	sl, #2
   12a74:	b	12938 <__assert_fail@plt+0x1a08>
   12a78:	ldr	r3, [sp, #32]
   12a7c:	cmp	r3, #0
   12a80:	beq	12a40 <__assert_fail@plt+0x1b10>
   12a84:	mov	r3, #1
   12a88:	str	r3, [sp, #60]	; 0x3c
   12a8c:	ldr	r3, [pc, #3712]	; 13914 <__assert_fail@plt+0x29e4>
   12a90:	str	r3, [sp, #72]	; 0x48
   12a94:	mov	fp, #0
   12a98:	b	12938 <__assert_fail@plt+0x1a08>
   12a9c:	bl	10f24 <abort@plt>
   12aa0:	mov	r3, #0
   12aa4:	str	r3, [sp, #32]
   12aa8:	mov	r3, #1
   12aac:	str	r3, [sp, #48]	; 0x30
   12ab0:	mov	fp, #0
   12ab4:	b	12938 <__assert_fail@plt+0x1a08>
   12ab8:	ldr	r3, [sp, #32]
   12abc:	str	r3, [sp, #48]	; 0x30
   12ac0:	mov	r3, #1
   12ac4:	str	r3, [sp, #60]	; 0x3c
   12ac8:	ldr	r3, [pc, #3660]	; 1391c <__assert_fail@plt+0x29ec>
   12acc:	str	r3, [sp, #72]	; 0x48
   12ad0:	mov	fp, #0
   12ad4:	b	12938 <__assert_fail@plt+0x1a08>
   12ad8:	mov	r3, #1
   12adc:	str	r3, [sp, #48]	; 0x30
   12ae0:	str	r3, [sp, #60]	; 0x3c
   12ae4:	ldr	r3, [pc, #3632]	; 1391c <__assert_fail@plt+0x29ec>
   12ae8:	str	r3, [sp, #72]	; 0x48
   12aec:	mov	fp, #1
   12af0:	b	12938 <__assert_fail@plt+0x1a08>
   12af4:	mov	r3, #1
   12af8:	str	r3, [sp, #60]	; 0x3c
   12afc:	ldr	r3, [pc, #3600]	; 13914 <__assert_fail@plt+0x29e4>
   12b00:	str	r3, [sp, #72]	; 0x48
   12b04:	mov	fp, #0
   12b08:	mov	sl, #2
   12b0c:	b	12938 <__assert_fail@plt+0x1a08>
   12b10:	mov	r3, #0
   12b14:	str	r3, [sp, #32]
   12b18:	mov	r3, #1
   12b1c:	str	r3, [sp, #60]	; 0x3c
   12b20:	ldr	r3, [pc, #3564]	; 13914 <__assert_fail@plt+0x29e4>
   12b24:	str	r3, [sp, #72]	; 0x48
   12b28:	mov	fp, #1
   12b2c:	mov	sl, #2
   12b30:	b	12938 <__assert_fail@plt+0x1a08>
   12b34:	mov	r3, #0
   12b38:	str	r3, [sp, #56]	; 0x38
   12b3c:	ldr	r3, [sp, #52]	; 0x34
   12b40:	add	r2, r3, r6
   12b44:	str	r2, [sp, #64]	; 0x40
   12b48:	ldrb	r4, [r3, r6]
   12b4c:	cmp	r4, #126	; 0x7e
   12b50:	ldrls	pc, [pc, r4, lsl #2]
   12b54:	b	13390 <__assert_fail@plt+0x2460>
   12b58:	andeq	r2, r1, r0, ror sp
   12b5c:	muleq	r1, r0, r3
   12b60:	muleq	r1, r0, r3
   12b64:	muleq	r1, r0, r3
   12b68:	muleq	r1, r0, r3
   12b6c:	muleq	r1, r0, r3
   12b70:	muleq	r1, r0, r3
   12b74:	andeq	r3, r1, ip, asr #1
   12b78:	andeq	r2, r1, r8, ror #26
   12b7c:	andeq	r3, r1, r4, lsl #1
   12b80:	andeq	r3, r1, ip, ror r0
   12b84:	andeq	r2, r1, ip, ror #31
   12b88:	andeq	r2, r1, r4, ror #31
   12b8c:	andeq	r2, r1, r0, ror #26
   12b90:	muleq	r1, r0, r3
   12b94:	muleq	r1, r0, r3
   12b98:	muleq	r1, r0, r3
   12b9c:	muleq	r1, r0, r3
   12ba0:	muleq	r1, r0, r3
   12ba4:	muleq	r1, r0, r3
   12ba8:	muleq	r1, r0, r3
   12bac:	muleq	r1, r0, r3
   12bb0:	muleq	r1, r0, r3
   12bb4:	muleq	r1, r0, r3
   12bb8:	muleq	r1, r0, r3
   12bbc:	muleq	r1, r0, r3
   12bc0:	muleq	r1, r0, r3
   12bc4:	muleq	r1, r0, r3
   12bc8:	muleq	r1, r0, r3
   12bcc:	muleq	r1, r0, r3
   12bd0:	muleq	r1, r0, r3
   12bd4:	muleq	r1, r0, r3
   12bd8:	andeq	r3, r1, r0, lsr #2
   12bdc:	andeq	r3, r1, ip, lsl r1
   12be0:	andeq	r3, r1, ip, lsl r1
   12be4:	strdeq	r3, [r1], -r4
   12be8:	andeq	r3, r1, ip, lsl r1
   12bec:	andeq	r3, r1, r4, ror #14
   12bf0:	andeq	r3, r1, ip, lsl r1
   12bf4:	strdeq	r3, [r1], -r4
   12bf8:	andeq	r3, r1, ip, lsl r1
   12bfc:	andeq	r3, r1, ip, lsl r1
   12c00:	andeq	r3, r1, ip, lsl r1
   12c04:	andeq	r3, r1, r4, ror #14
   12c08:	andeq	r3, r1, r4, ror #14
   12c0c:	andeq	r3, r1, r4, ror #14
   12c10:	andeq	r3, r1, r4, ror #14
   12c14:	andeq	r3, r1, r4, ror #14
   12c18:	andeq	r3, r1, r4, ror #14
   12c1c:	andeq	r3, r1, r4, ror #14
   12c20:	andeq	r3, r1, r4, ror #14
   12c24:	andeq	r3, r1, r4, ror #14
   12c28:	andeq	r3, r1, r4, ror #14
   12c2c:	andeq	r3, r1, r4, ror #14
   12c30:	andeq	r3, r1, r4, ror #14
   12c34:	andeq	r3, r1, r4, ror #14
   12c38:	andeq	r3, r1, r4, ror #14
   12c3c:	andeq	r3, r1, r4, ror #14
   12c40:	andeq	r3, r1, r4, ror #14
   12c44:	andeq	r3, r1, ip, lsl r1
   12c48:	andeq	r3, r1, ip, lsl r1
   12c4c:	andeq	r3, r1, ip, lsl r1
   12c50:	andeq	r3, r1, ip, lsl r1
   12c54:	andeq	r2, r1, r8, ror lr
   12c58:	muleq	r1, r0, r3
   12c5c:	andeq	r3, r1, r4, ror #14
   12c60:	andeq	r3, r1, r4, ror #14
   12c64:	andeq	r3, r1, r4, ror #14
   12c68:	andeq	r3, r1, r4, ror #14
   12c6c:	andeq	r3, r1, r4, ror #14
   12c70:	andeq	r3, r1, r4, ror #14
   12c74:	andeq	r3, r1, r4, ror #14
   12c78:	andeq	r3, r1, r4, ror #14
   12c7c:	andeq	r3, r1, r4, ror #14
   12c80:	andeq	r3, r1, r4, ror #14
   12c84:	andeq	r3, r1, r4, ror #14
   12c88:	andeq	r3, r1, r4, ror #14
   12c8c:	andeq	r3, r1, r4, ror #14
   12c90:	andeq	r3, r1, r4, ror #14
   12c94:	andeq	r3, r1, r4, ror #14
   12c98:	andeq	r3, r1, r4, ror #14
   12c9c:	andeq	r3, r1, r4, ror #14
   12ca0:	andeq	r3, r1, r4, ror #14
   12ca4:	andeq	r3, r1, r4, ror #14
   12ca8:	andeq	r3, r1, r4, ror #14
   12cac:	andeq	r3, r1, r4, ror #14
   12cb0:	andeq	r3, r1, r4, ror #14
   12cb4:	andeq	r3, r1, r4, ror #14
   12cb8:	andeq	r3, r1, r4, ror #14
   12cbc:	andeq	r3, r1, r4, ror #14
   12cc0:	andeq	r3, r1, r4, ror #14
   12cc4:	andeq	r3, r1, ip, lsl r1
   12cc8:	strdeq	r2, [r1], -r4
   12ccc:	andeq	r3, r1, r4, ror #14
   12cd0:	andeq	r3, r1, ip, lsl r1
   12cd4:	andeq	r3, r1, r4, ror #14
   12cd8:	andeq	r3, r1, ip, lsl r1
   12cdc:	andeq	r3, r1, r4, ror #14
   12ce0:	andeq	r3, r1, r4, ror #14
   12ce4:	andeq	r3, r1, r4, ror #14
   12ce8:	andeq	r3, r1, r4, ror #14
   12cec:	andeq	r3, r1, r4, ror #14
   12cf0:	andeq	r3, r1, r4, ror #14
   12cf4:	andeq	r3, r1, r4, ror #14
   12cf8:	andeq	r3, r1, r4, ror #14
   12cfc:	andeq	r3, r1, r4, ror #14
   12d00:	andeq	r3, r1, r4, ror #14
   12d04:	andeq	r3, r1, r4, ror #14
   12d08:	andeq	r3, r1, r4, ror #14
   12d0c:	andeq	r3, r1, r4, ror #14
   12d10:	andeq	r3, r1, r4, ror #14
   12d14:	andeq	r3, r1, r4, ror #14
   12d18:	andeq	r3, r1, r4, ror #14
   12d1c:	andeq	r3, r1, r4, ror #14
   12d20:	andeq	r3, r1, r4, ror #14
   12d24:	andeq	r3, r1, r4, ror #14
   12d28:	andeq	r3, r1, r4, ror #14
   12d2c:	andeq	r3, r1, r4, ror #14
   12d30:	andeq	r3, r1, r4, ror #14
   12d34:	andeq	r3, r1, r4, ror #14
   12d38:	andeq	r3, r1, r4, ror #14
   12d3c:	andeq	r3, r1, r4, ror #14
   12d40:	andeq	r3, r1, r4, ror #14
   12d44:	ldrdeq	r3, [r1], -r4
   12d48:	andeq	r3, r1, ip, lsl r1
   12d4c:	ldrdeq	r3, [r1], -r4
   12d50:	strdeq	r3, [r1], -r4
   12d54:	mov	r3, #0
   12d58:	str	r3, [sp, #56]	; 0x38
   12d5c:	b	12b3c <__assert_fail@plt+0x1c0c>
   12d60:	mov	r3, #114	; 0x72
   12d64:	b	13088 <__assert_fail@plt+0x2158>
   12d68:	mov	r3, #98	; 0x62
   12d6c:	b	130a0 <__assert_fail@plt+0x2170>
   12d70:	ldr	r3, [sp, #48]	; 0x30
   12d74:	cmp	r3, #0
   12d78:	beq	12e60 <__assert_fail@plt+0x1f30>
   12d7c:	ldr	r3, [sp, #32]
   12d80:	cmp	r3, #0
   12d84:	bne	138e8 <__assert_fail@plt+0x29b8>
   12d88:	ldr	r3, [sp, #44]	; 0x2c
   12d8c:	eor	r3, r3, #1
   12d90:	cmp	sl, #2
   12d94:	movne	r3, #0
   12d98:	andeq	r3, r3, #1
   12d9c:	cmp	r3, #0
   12da0:	moveq	r2, fp
   12da4:	beq	12de8 <__assert_fail@plt+0x1eb8>
   12da8:	cmp	r7, fp
   12dac:	ldrhi	r2, [sp, #36]	; 0x24
   12db0:	movhi	r1, #39	; 0x27
   12db4:	strbhi	r1, [r2, fp]
   12db8:	add	r2, fp, #1
   12dbc:	cmp	r7, r2
   12dc0:	ldrhi	r1, [sp, #36]	; 0x24
   12dc4:	movhi	r0, #36	; 0x24
   12dc8:	strbhi	r0, [r1, r2]
   12dcc:	add	r2, fp, #2
   12dd0:	cmp	r7, r2
   12dd4:	ldrhi	r1, [sp, #36]	; 0x24
   12dd8:	movhi	r0, #39	; 0x27
   12ddc:	strbhi	r0, [r1, r2]
   12de0:	add	r2, fp, #3
   12de4:	str	r3, [sp, #44]	; 0x2c
   12de8:	cmp	r7, r2
   12dec:	ldrhi	r3, [sp, #36]	; 0x24
   12df0:	movhi	r1, #92	; 0x5c
   12df4:	strbhi	r1, [r3, r2]
   12df8:	add	fp, r2, #1
   12dfc:	cmp	r5, #0
   12e00:	beq	1376c <__assert_fail@plt+0x283c>
   12e04:	add	r3, r6, #1
   12e08:	ldr	r1, [sp, #28]
   12e0c:	cmp	r1, r3
   12e10:	bls	1377c <__assert_fail@plt+0x284c>
   12e14:	ldr	r1, [sp, #52]	; 0x34
   12e18:	ldrb	r3, [r1, r3]
   12e1c:	sub	r3, r3, #48	; 0x30
   12e20:	uxtb	r3, r3
   12e24:	cmp	r3, #9
   12e28:	bhi	13788 <__assert_fail@plt+0x2858>
   12e2c:	cmp	r7, fp
   12e30:	movhi	r3, #48	; 0x30
   12e34:	ldrhi	r1, [sp, #36]	; 0x24
   12e38:	strbhi	r3, [r1, fp]
   12e3c:	add	r3, r2, #2
   12e40:	cmp	r7, r3
   12e44:	movhi	r1, #48	; 0x30
   12e48:	ldrhi	r0, [sp, #36]	; 0x24
   12e4c:	strbhi	r1, [r0, r3]
   12e50:	add	fp, r2, #3
   12e54:	ldr	r8, [sp, #32]
   12e58:	mov	r4, #48	; 0x30
   12e5c:	b	13138 <__assert_fail@plt+0x2208>
   12e60:	ldr	r3, [sp, #156]	; 0x9c
   12e64:	tst	r3, #1
   12e68:	bne	1322c <__assert_fail@plt+0x22fc>
   12e6c:	ldr	r5, [sp, #48]	; 0x30
   12e70:	mov	r8, r5
   12e74:	b	13138 <__assert_fail@plt+0x2208>
   12e78:	cmp	sl, #2
   12e7c:	beq	12e94 <__assert_fail@plt+0x1f64>
   12e80:	cmp	sl, #5
   12e84:	beq	12eac <__assert_fail@plt+0x1f7c>
   12e88:	mov	r8, #0
   12e8c:	mov	r5, r8
   12e90:	b	13138 <__assert_fail@plt+0x2208>
   12e94:	ldr	r3, [sp, #32]
   12e98:	cmp	r3, #0
   12e9c:	bne	138fc <__assert_fail@plt+0x29cc>
   12ea0:	mov	r8, r3
   12ea4:	mov	r5, r3
   12ea8:	b	13138 <__assert_fail@plt+0x2208>
   12eac:	ldr	r3, [sp, #156]	; 0x9c
   12eb0:	tst	r3, #4
   12eb4:	beq	13794 <__assert_fail@plt+0x2864>
   12eb8:	add	r3, r6, #2
   12ebc:	ldr	r2, [sp, #28]
   12ec0:	cmp	r2, r3
   12ec4:	bls	137a0 <__assert_fail@plt+0x2870>
   12ec8:	ldr	r2, [sp, #52]	; 0x34
   12ecc:	add	r2, r2, r6
   12ed0:	ldrb	r2, [r2, #1]
   12ed4:	cmp	r2, #63	; 0x3f
   12ed8:	movne	r8, #0
   12edc:	movne	r5, r8
   12ee0:	bne	13138 <__assert_fail@plt+0x2208>
   12ee4:	ldr	r2, [sp, #52]	; 0x34
   12ee8:	ldrb	r2, [r2, r3]
   12eec:	sub	r1, r2, #33	; 0x21
   12ef0:	cmp	r1, #29
   12ef4:	ldrls	pc, [pc, r1, lsl #2]
   12ef8:	b	137ac <__assert_fail@plt+0x287c>
   12efc:	andeq	r2, r1, r4, ror pc
   12f00:	andeq	r3, r1, ip, lsr #15
   12f04:	andeq	r3, r1, ip, lsr #15
   12f08:	andeq	r3, r1, ip, lsr #15
   12f0c:	andeq	r3, r1, ip, lsr #15
   12f10:	andeq	r3, r1, ip, lsr #15
   12f14:	andeq	r2, r1, r4, ror pc
   12f18:	andeq	r2, r1, r4, ror pc
   12f1c:	andeq	r2, r1, r4, ror pc
   12f20:	andeq	r3, r1, ip, lsr #15
   12f24:	andeq	r3, r1, ip, lsr #15
   12f28:	andeq	r3, r1, ip, lsr #15
   12f2c:	andeq	r2, r1, r4, ror pc
   12f30:	andeq	r3, r1, ip, lsr #15
   12f34:	andeq	r2, r1, r4, ror pc
   12f38:	andeq	r3, r1, ip, lsr #15
   12f3c:	andeq	r3, r1, ip, lsr #15
   12f40:	andeq	r3, r1, ip, lsr #15
   12f44:	andeq	r3, r1, ip, lsr #15
   12f48:	andeq	r3, r1, ip, lsr #15
   12f4c:	andeq	r3, r1, ip, lsr #15
   12f50:	andeq	r3, r1, ip, lsr #15
   12f54:	andeq	r3, r1, ip, lsr #15
   12f58:	andeq	r3, r1, ip, lsr #15
   12f5c:	andeq	r3, r1, ip, lsr #15
   12f60:	andeq	r3, r1, ip, lsr #15
   12f64:	andeq	r3, r1, ip, lsr #15
   12f68:	andeq	r2, r1, r4, ror pc
   12f6c:	andeq	r2, r1, r4, ror pc
   12f70:	andeq	r2, r1, r4, ror pc
   12f74:	ldr	r1, [sp, #32]
   12f78:	cmp	r1, #0
   12f7c:	bne	139bc <__assert_fail@plt+0x2a8c>
   12f80:	cmp	r7, fp
   12f84:	movhi	r1, #63	; 0x3f
   12f88:	ldrhi	r0, [sp, #36]	; 0x24
   12f8c:	strbhi	r1, [r0, fp]
   12f90:	add	r1, fp, #1
   12f94:	cmp	r7, r1
   12f98:	ldrhi	r0, [sp, #36]	; 0x24
   12f9c:	movhi	ip, #34	; 0x22
   12fa0:	strbhi	ip, [r0, r1]
   12fa4:	add	r1, fp, #2
   12fa8:	cmp	r7, r1
   12fac:	ldrhi	r0, [sp, #36]	; 0x24
   12fb0:	movhi	ip, #34	; 0x22
   12fb4:	strbhi	ip, [r0, r1]
   12fb8:	add	r1, fp, #3
   12fbc:	cmp	r7, r1
   12fc0:	movhi	r0, #63	; 0x3f
   12fc4:	ldrhi	ip, [sp, #36]	; 0x24
   12fc8:	strbhi	r0, [ip, r1]
   12fcc:	add	fp, fp, #4
   12fd0:	ldr	r5, [sp, #32]
   12fd4:	mov	r8, r5
   12fd8:	mov	r4, r2
   12fdc:	mov	r6, r3
   12fe0:	b	13138 <__assert_fail@plt+0x2208>
   12fe4:	mov	r3, #102	; 0x66
   12fe8:	b	130a0 <__assert_fail@plt+0x2170>
   12fec:	mov	r3, #118	; 0x76
   12ff0:	b	130a0 <__assert_fail@plt+0x2170>
   12ff4:	cmp	sl, #2
   12ff8:	beq	13064 <__assert_fail@plt+0x2134>
   12ffc:	ldr	r3, [sp, #48]	; 0x30
   13000:	ldr	r2, [sp, #32]
   13004:	and	r3, r3, r2
   13008:	tst	r9, r3
   1300c:	moveq	r3, r4
   13010:	beq	130a0 <__assert_fail@plt+0x2170>
   13014:	mov	r8, #0
   13018:	mov	r5, r8
   1301c:	eor	r5, r5, #1
   13020:	ldr	r3, [sp, #44]	; 0x2c
   13024:	and	r5, r5, r3
   13028:	tst	r5, #255	; 0xff
   1302c:	beq	1320c <__assert_fail@plt+0x22dc>
   13030:	cmp	r7, fp
   13034:	ldrhi	r3, [sp, #36]	; 0x24
   13038:	movhi	r2, #39	; 0x27
   1303c:	strbhi	r2, [r3, fp]
   13040:	add	r3, fp, #1
   13044:	cmp	r7, r3
   13048:	ldrhi	r2, [sp, #36]	; 0x24
   1304c:	movhi	r1, #39	; 0x27
   13050:	strbhi	r1, [r2, r3]
   13054:	add	fp, fp, #2
   13058:	mov	r3, #0
   1305c:	str	r3, [sp, #44]	; 0x2c
   13060:	b	1320c <__assert_fail@plt+0x22dc>
   13064:	ldr	r3, [sp, #32]
   13068:	cmp	r3, #0
   1306c:	bne	13908 <__assert_fail@plt+0x29d8>
   13070:	mov	r8, r3
   13074:	mov	r5, r3
   13078:	b	1301c <__assert_fail@plt+0x20ec>
   1307c:	mov	r3, #110	; 0x6e
   13080:	b	13088 <__assert_fail@plt+0x2158>
   13084:	mov	r3, #116	; 0x74
   13088:	ldr	r2, [sp, #32]
   1308c:	cmp	sl, #2
   13090:	movne	r2, #0
   13094:	andeq	r2, r2, #1
   13098:	cmp	r2, #0
   1309c:	bne	130c0 <__assert_fail@plt+0x2190>
   130a0:	ldr	r2, [sp, #48]	; 0x30
   130a4:	cmp	r2, #0
   130a8:	moveq	r8, r2
   130ac:	moveq	r5, r2
   130b0:	beq	13138 <__assert_fail@plt+0x2208>
   130b4:	mov	r4, r3
   130b8:	mov	r8, #0
   130bc:	b	13190 <__assert_fail@plt+0x2260>
   130c0:	mov	r8, sl
   130c4:	mov	sl, r7
   130c8:	b	13934 <__assert_fail@plt+0x2a04>
   130cc:	mov	r3, #97	; 0x61
   130d0:	b	130a0 <__assert_fail@plt+0x2170>
   130d4:	ldr	r3, [sp, #28]
   130d8:	cmn	r3, #1
   130dc:	beq	13108 <__assert_fail@plt+0x21d8>
   130e0:	ldr	r3, [sp, #28]
   130e4:	subs	r3, r3, #1
   130e8:	movne	r3, #1
   130ec:	cmp	r3, #0
   130f0:	bne	137b8 <__assert_fail@plt+0x2888>
   130f4:	cmp	r6, #0
   130f8:	beq	13120 <__assert_fail@plt+0x21f0>
   130fc:	mov	r8, #0
   13100:	mov	r5, r8
   13104:	b	13138 <__assert_fail@plt+0x2208>
   13108:	ldr	r3, [sp, #52]	; 0x34
   1310c:	ldrb	r3, [r3, #1]
   13110:	adds	r3, r3, #0
   13114:	movne	r3, #1
   13118:	b	130ec <__assert_fail@plt+0x21bc>
   1311c:	mov	r8, #0
   13120:	ldr	r5, [sp, #32]
   13124:	cmp	sl, #2
   13128:	movne	r5, #0
   1312c:	andeq	r5, r5, #1
   13130:	cmp	r5, #0
   13134:	bne	132e8 <__assert_fail@plt+0x23b8>
   13138:	ldr	r3, [sp, #68]	; 0x44
   1313c:	cmp	sl, #2
   13140:	orreq	r3, r3, #1
   13144:	eor	r3, r3, #1
   13148:	ldr	r2, [sp, #32]
   1314c:	orr	r3, r2, r3
   13150:	tst	r3, #255	; 0xff
   13154:	beq	13184 <__assert_fail@plt+0x2254>
   13158:	ldr	r3, [sp, #160]	; 0xa0
   1315c:	cmp	r3, #0
   13160:	beq	13184 <__assert_fail@plt+0x2254>
   13164:	lsr	r2, r4, #5
   13168:	uxtb	r2, r2
   1316c:	and	r3, r4, #31
   13170:	ldr	r1, [sp, #160]	; 0xa0
   13174:	ldr	r2, [r1, r2, lsl #2]
   13178:	lsr	r3, r2, r3
   1317c:	tst	r3, #1
   13180:	bne	13190 <__assert_fail@plt+0x2260>
   13184:	ldr	r3, [sp, #56]	; 0x38
   13188:	cmp	r3, #0
   1318c:	beq	1301c <__assert_fail@plt+0x20ec>
   13190:	ldr	r3, [sp, #32]
   13194:	cmp	r3, #0
   13198:	bne	139a4 <__assert_fail@plt+0x2a74>
   1319c:	ldr	r3, [sp, #44]	; 0x2c
   131a0:	eor	r3, r3, #1
   131a4:	cmp	sl, #2
   131a8:	movne	r3, #0
   131ac:	andeq	r3, r3, #1
   131b0:	cmp	r3, #0
   131b4:	beq	131f8 <__assert_fail@plt+0x22c8>
   131b8:	cmp	r7, fp
   131bc:	ldrhi	r2, [sp, #36]	; 0x24
   131c0:	movhi	r1, #39	; 0x27
   131c4:	strbhi	r1, [r2, fp]
   131c8:	add	r2, fp, #1
   131cc:	cmp	r7, r2
   131d0:	ldrhi	r1, [sp, #36]	; 0x24
   131d4:	movhi	r0, #36	; 0x24
   131d8:	strbhi	r0, [r1, r2]
   131dc:	add	r2, fp, #2
   131e0:	cmp	r7, r2
   131e4:	ldrhi	r1, [sp, #36]	; 0x24
   131e8:	movhi	r0, #39	; 0x27
   131ec:	strbhi	r0, [r1, r2]
   131f0:	add	fp, fp, #3
   131f4:	str	r3, [sp, #44]	; 0x2c
   131f8:	cmp	r7, fp
   131fc:	ldrhi	r3, [sp, #36]	; 0x24
   13200:	movhi	r2, #92	; 0x5c
   13204:	strbhi	r2, [r3, fp]
   13208:	add	fp, fp, #1
   1320c:	cmp	fp, r7
   13210:	ldrcc	r3, [sp, #36]	; 0x24
   13214:	strbcc	r4, [r3, fp]
   13218:	add	fp, fp, #1
   1321c:	ldr	r3, [sp, #40]	; 0x28
   13220:	cmp	r8, #0
   13224:	moveq	r3, #0
   13228:	str	r3, [sp, #40]	; 0x28
   1322c:	add	r6, r6, #1
   13230:	ldr	r3, [sp, #28]
   13234:	cmn	r3, #1
   13238:	beq	137c4 <__assert_fail@plt+0x2894>
   1323c:	ldr	r3, [sp, #28]
   13240:	subs	r8, r3, r6
   13244:	movne	r8, #1
   13248:	cmp	r8, #0
   1324c:	beq	137d8 <__assert_fail@plt+0x28a8>
   13250:	ldr	r5, [sp, #48]	; 0x30
   13254:	cmp	sl, #2
   13258:	moveq	r5, #0
   1325c:	andne	r5, r5, #1
   13260:	ldr	r3, [sp, #60]	; 0x3c
   13264:	adds	r9, r3, #0
   13268:	movne	r9, #1
   1326c:	ands	r2, r5, r9
   13270:	str	r2, [sp, #56]	; 0x38
   13274:	beq	12b3c <__assert_fail@plt+0x1c0c>
   13278:	add	r4, r6, r3
   1327c:	ldr	r2, [sp, #28]
   13280:	cmp	r3, #1
   13284:	movls	r3, #0
   13288:	movhi	r3, #1
   1328c:	cmn	r2, #1
   13290:	movne	r3, #0
   13294:	cmp	r3, #0
   13298:	beq	132a8 <__assert_fail@plt+0x2378>
   1329c:	ldr	r0, [sp, #52]	; 0x34
   132a0:	bl	10e34 <strlen@plt>
   132a4:	str	r0, [sp, #28]
   132a8:	ldr	r3, [sp, #28]
   132ac:	cmp	r3, r4
   132b0:	bcc	12b34 <__assert_fail@plt+0x1c04>
   132b4:	ldr	r2, [sp, #60]	; 0x3c
   132b8:	ldr	r1, [sp, #72]	; 0x48
   132bc:	ldr	r3, [sp, #52]	; 0x34
   132c0:	add	r0, r3, r6
   132c4:	bl	10d50 <memcmp@plt>
   132c8:	cmp	r0, #0
   132cc:	bne	12d54 <__assert_fail@plt+0x1e24>
   132d0:	ldr	r3, [sp, #32]
   132d4:	cmp	r3, #0
   132d8:	beq	12b3c <__assert_fail@plt+0x1c0c>
   132dc:	mov	r8, sl
   132e0:	mov	sl, r7
   132e4:	b	13934 <__assert_fail@plt+0x2a04>
   132e8:	mov	r8, sl
   132ec:	mov	sl, r7
   132f0:	b	13934 <__assert_fail@plt+0x2a04>
   132f4:	cmp	sl, #2
   132f8:	strne	r8, [sp, #80]	; 0x50
   132fc:	movne	r5, #0
   13300:	bne	13138 <__assert_fail@plt+0x2208>
   13304:	ldr	r3, [sp, #32]
   13308:	cmp	r3, #0
   1330c:	bne	13920 <__assert_fail@plt+0x29f0>
   13310:	ldr	r2, [sp, #76]	; 0x4c
   13314:	adds	r3, r7, #0
   13318:	movne	r3, #1
   1331c:	cmp	r2, #0
   13320:	movne	r3, #0
   13324:	cmp	r3, #0
   13328:	movne	r3, #0
   1332c:	bne	1335c <__assert_fail@plt+0x242c>
   13330:	cmp	r7, fp
   13334:	ldrhi	r3, [sp, #36]	; 0x24
   13338:	movhi	r2, #39	; 0x27
   1333c:	strbhi	r2, [r3, fp]
   13340:	add	r3, fp, #1
   13344:	cmp	r7, r3
   13348:	ldrhi	r2, [sp, #36]	; 0x24
   1334c:	movhi	r1, #92	; 0x5c
   13350:	strbhi	r1, [r2, r3]
   13354:	mov	r3, r7
   13358:	ldr	r7, [sp, #76]	; 0x4c
   1335c:	add	r2, fp, #2
   13360:	cmp	r2, r3
   13364:	ldrcc	r1, [sp, #36]	; 0x24
   13368:	movcc	r0, #39	; 0x27
   1336c:	strbcc	r0, [r1, r2]
   13370:	add	fp, fp, #3
   13374:	ldr	r2, [sp, #32]
   13378:	mov	r5, r2
   1337c:	str	r8, [sp, #80]	; 0x50
   13380:	str	r2, [sp, #44]	; 0x2c
   13384:	str	r7, [sp, #76]	; 0x4c
   13388:	mov	r7, r3
   1338c:	b	13138 <__assert_fail@plt+0x2208>
   13390:	ldr	r5, [sp, #84]	; 0x54
   13394:	cmp	r5, #1
   13398:	beq	133c8 <__assert_fail@plt+0x2498>
   1339c:	mov	r3, #0
   133a0:	str	r3, [sp, #104]	; 0x68
   133a4:	str	r3, [sp, #108]	; 0x6c
   133a8:	ldr	r3, [sp, #28]
   133ac:	cmn	r3, #1
   133b0:	beq	133fc <__assert_fail@plt+0x24cc>
   133b4:	mov	r3, #0
   133b8:	str	r4, [sp, #88]	; 0x58
   133bc:	str	fp, [sp, #92]	; 0x5c
   133c0:	mov	fp, r3
   133c4:	b	13524 <__assert_fail@plt+0x25f4>
   133c8:	bl	10e1c <__ctype_b_loc@plt>
   133cc:	ldr	r2, [r0]
   133d0:	lsl	r3, r4, #1
   133d4:	ldrh	r8, [r2, r3]
   133d8:	lsr	r8, r8, #14
   133dc:	and	r8, r8, #1
   133e0:	mov	r2, r5
   133e4:	eor	r5, r8, #1
   133e8:	ldr	r3, [sp, #48]	; 0x30
   133ec:	and	r5, r5, r3
   133f0:	ands	r5, r5, #255	; 0xff
   133f4:	beq	13138 <__assert_fail@plt+0x2208>
   133f8:	b	135bc <__assert_fail@plt+0x268c>
   133fc:	ldr	r0, [sp, #52]	; 0x34
   13400:	bl	10e34 <strlen@plt>
   13404:	str	r0, [sp, #28]
   13408:	b	133b4 <__assert_fail@plt+0x2484>
   1340c:	mov	r2, fp
   13410:	mov	r1, r4
   13414:	ldr	r4, [sp, #88]	; 0x58
   13418:	ldr	fp, [sp, #92]	; 0x5c
   1341c:	ldr	r0, [sp, #28]
   13420:	cmp	r0, r5
   13424:	bls	135f0 <__assert_fail@plt+0x26c0>
   13428:	ldrb	r3, [r1]
   1342c:	cmp	r3, #0
   13430:	beq	135f8 <__assert_fail@plt+0x26c8>
   13434:	mov	r3, r1
   13438:	add	r2, r2, #1
   1343c:	add	r1, r6, r2
   13440:	cmp	r0, r1
   13444:	bls	13600 <__assert_fail@plt+0x26d0>
   13448:	ldrb	r1, [r3, #1]!
   1344c:	cmp	r1, #0
   13450:	bne	13438 <__assert_fail@plt+0x2508>
   13454:	mov	r8, #0
   13458:	b	135b4 <__assert_fail@plt+0x2684>
   1345c:	cmp	r4, r5
   13460:	beq	13500 <__assert_fail@plt+0x25d0>
   13464:	ldrb	r3, [r4, #1]!
   13468:	sub	r3, r3, #91	; 0x5b
   1346c:	cmp	r3, #33	; 0x21
   13470:	ldrls	pc, [pc, r3, lsl #2]
   13474:	b	1345c <__assert_fail@plt+0x252c>
   13478:	andeq	r3, r1, ip, lsr #18
   1347c:	andeq	r3, r1, ip, lsr #18
   13480:	andeq	r3, r1, ip, asr r4
   13484:	andeq	r3, r1, ip, lsr #18
   13488:	andeq	r3, r1, ip, asr r4
   1348c:	andeq	r3, r1, ip, lsr #18
   13490:	andeq	r3, r1, ip, asr r4
   13494:	andeq	r3, r1, ip, asr r4
   13498:	andeq	r3, r1, ip, asr r4
   1349c:	andeq	r3, r1, ip, asr r4
   134a0:	andeq	r3, r1, ip, asr r4
   134a4:	andeq	r3, r1, ip, asr r4
   134a8:	andeq	r3, r1, ip, asr r4
   134ac:	andeq	r3, r1, ip, asr r4
   134b0:	andeq	r3, r1, ip, asr r4
   134b4:	andeq	r3, r1, ip, asr r4
   134b8:	andeq	r3, r1, ip, asr r4
   134bc:	andeq	r3, r1, ip, asr r4
   134c0:	andeq	r3, r1, ip, asr r4
   134c4:	andeq	r3, r1, ip, asr r4
   134c8:	andeq	r3, r1, ip, asr r4
   134cc:	andeq	r3, r1, ip, asr r4
   134d0:	andeq	r3, r1, ip, asr r4
   134d4:	andeq	r3, r1, ip, asr r4
   134d8:	andeq	r3, r1, ip, asr r4
   134dc:	andeq	r3, r1, ip, asr r4
   134e0:	andeq	r3, r1, ip, asr r4
   134e4:	andeq	r3, r1, ip, asr r4
   134e8:	andeq	r3, r1, ip, asr r4
   134ec:	andeq	r3, r1, ip, asr r4
   134f0:	andeq	r3, r1, ip, asr r4
   134f4:	andeq	r3, r1, ip, asr r4
   134f8:	andeq	r3, r1, ip, asr r4
   134fc:	andeq	r3, r1, ip, lsr #18
   13500:	ldr	r0, [sp, #100]	; 0x64
   13504:	bl	10d8c <iswprint@plt>
   13508:	cmp	r0, #0
   1350c:	moveq	r8, #0
   13510:	add	fp, fp, r9
   13514:	add	r0, sp, #104	; 0x68
   13518:	bl	10d38 <mbsinit@plt>
   1351c:	cmp	r0, #0
   13520:	bne	13594 <__assert_fail@plt+0x2664>
   13524:	add	r5, r6, fp
   13528:	ldr	r3, [sp, #52]	; 0x34
   1352c:	add	r4, r3, r5
   13530:	add	r3, sp, #104	; 0x68
   13534:	ldr	r2, [sp, #28]
   13538:	sub	r2, r2, r5
   1353c:	mov	r1, r4
   13540:	add	r0, sp, #100	; 0x64
   13544:	bl	154ac <__assert_fail@plt+0x457c>
   13548:	subs	r9, r0, #0
   1354c:	beq	13608 <__assert_fail@plt+0x26d8>
   13550:	cmn	r9, #1
   13554:	beq	135a4 <__assert_fail@plt+0x2674>
   13558:	cmn	r9, #2
   1355c:	beq	1340c <__assert_fail@plt+0x24dc>
   13560:	ldr	r3, [sp, #32]
   13564:	cmp	sl, #2
   13568:	movne	r3, #0
   1356c:	andeq	r3, r3, #1
   13570:	cmp	r3, #0
   13574:	beq	13500 <__assert_fail@plt+0x25d0>
   13578:	cmp	r9, #1
   1357c:	bls	13500 <__assert_fail@plt+0x25d0>
   13580:	sub	r3, r9, #1
   13584:	add	r5, r3, r5
   13588:	ldr	r3, [sp, #52]	; 0x34
   1358c:	add	r5, r3, r5
   13590:	b	13464 <__assert_fail@plt+0x2534>
   13594:	ldr	r4, [sp, #88]	; 0x58
   13598:	mov	r2, fp
   1359c:	ldr	fp, [sp, #92]	; 0x5c
   135a0:	b	135b4 <__assert_fail@plt+0x2684>
   135a4:	ldr	r4, [sp, #88]	; 0x58
   135a8:	mov	r2, fp
   135ac:	ldr	fp, [sp, #92]	; 0x5c
   135b0:	mov	r8, #0
   135b4:	cmp	r2, #1
   135b8:	bls	133e4 <__assert_fail@plt+0x24b4>
   135bc:	add	r1, r6, r2
   135c0:	ldr	ip, [sp, #64]	; 0x40
   135c4:	mov	r5, #0
   135c8:	eor	r3, r8, #1
   135cc:	ldr	r2, [sp, #48]	; 0x30
   135d0:	and	r3, r3, r2
   135d4:	uxtb	r3, r3
   135d8:	ldr	r9, [sp, #32]
   135dc:	ldr	lr, [sp, #44]	; 0x2c
   135e0:	ldr	r2, [sp, #56]	; 0x38
   135e4:	str	r8, [sp, #56]	; 0x38
   135e8:	ldr	r0, [sp, #36]	; 0x24
   135ec:	b	13688 <__assert_fail@plt+0x2758>
   135f0:	mov	r8, #0
   135f4:	b	135b4 <__assert_fail@plt+0x2684>
   135f8:	mov	r8, #0
   135fc:	b	135b4 <__assert_fail@plt+0x2684>
   13600:	mov	r8, #0
   13604:	b	135b4 <__assert_fail@plt+0x2684>
   13608:	ldr	r4, [sp, #88]	; 0x58
   1360c:	mov	r2, fp
   13610:	ldr	fp, [sp, #92]	; 0x5c
   13614:	b	135b4 <__assert_fail@plt+0x2684>
   13618:	cmp	r2, #0
   1361c:	beq	13630 <__assert_fail@plt+0x2700>
   13620:	cmp	r7, fp
   13624:	movhi	r2, #92	; 0x5c
   13628:	strbhi	r2, [r0, fp]
   1362c:	add	fp, fp, #1
   13630:	add	r8, r6, #1
   13634:	cmp	r1, r8
   13638:	bls	13740 <__assert_fail@plt+0x2810>
   1363c:	eor	r2, r5, #1
   13640:	and	r2, r2, lr
   13644:	ands	r2, r2, #255	; 0xff
   13648:	beq	1375c <__assert_fail@plt+0x282c>
   1364c:	cmp	r7, fp
   13650:	movhi	r2, #39	; 0x27
   13654:	strbhi	r2, [r0, fp]
   13658:	add	r2, fp, #1
   1365c:	cmp	r7, r2
   13660:	movhi	lr, #39	; 0x27
   13664:	strbhi	lr, [r0, r2]
   13668:	add	fp, fp, #2
   1366c:	mov	r6, r8
   13670:	mov	r2, r3
   13674:	mov	lr, r3
   13678:	cmp	r7, fp
   1367c:	strbhi	r4, [r0, fp]
   13680:	add	fp, fp, #1
   13684:	ldrb	r4, [ip, #1]!
   13688:	cmp	r3, #0
   1368c:	beq	13618 <__assert_fail@plt+0x26e8>
   13690:	cmp	r9, #0
   13694:	bne	13998 <__assert_fail@plt+0x2a68>
   13698:	eor	r5, lr, #1
   1369c:	cmp	sl, #2
   136a0:	movne	r5, #0
   136a4:	andeq	r5, r5, #1
   136a8:	cmp	r5, #0
   136ac:	beq	136e4 <__assert_fail@plt+0x27b4>
   136b0:	cmp	r7, fp
   136b4:	movhi	lr, #39	; 0x27
   136b8:	strbhi	lr, [r0, fp]
   136bc:	add	lr, fp, #1
   136c0:	cmp	r7, lr
   136c4:	movhi	r8, #36	; 0x24
   136c8:	strbhi	r8, [r0, lr]
   136cc:	add	lr, fp, #2
   136d0:	cmp	r7, lr
   136d4:	movhi	r8, #39	; 0x27
   136d8:	strbhi	r8, [r0, lr]
   136dc:	add	fp, fp, #3
   136e0:	mov	lr, r5
   136e4:	cmp	r7, fp
   136e8:	movhi	r5, #92	; 0x5c
   136ec:	strbhi	r5, [r0, fp]
   136f0:	add	r5, fp, #1
   136f4:	cmp	r7, r5
   136f8:	lsrhi	r8, r4, #6
   136fc:	addhi	r8, r8, #48	; 0x30
   13700:	strbhi	r8, [r0, r5]
   13704:	add	r8, fp, #2
   13708:	cmp	r7, r8
   1370c:	lsrhi	r5, r4, #3
   13710:	andhi	r5, r5, #7
   13714:	addhi	r5, r5, #48	; 0x30
   13718:	strbhi	r5, [r0, r8]
   1371c:	add	fp, fp, #3
   13720:	and	r4, r4, #7
   13724:	add	r4, r4, #48	; 0x30
   13728:	add	r5, r6, #1
   1372c:	cmp	r1, r5
   13730:	bls	1374c <__assert_fail@plt+0x281c>
   13734:	mov	r6, r5
   13738:	mov	r5, r3
   1373c:	b	13678 <__assert_fail@plt+0x2748>
   13740:	str	lr, [sp, #44]	; 0x2c
   13744:	ldr	r8, [sp, #56]	; 0x38
   13748:	b	1301c <__assert_fail@plt+0x20ec>
   1374c:	str	lr, [sp, #44]	; 0x2c
   13750:	ldr	r8, [sp, #56]	; 0x38
   13754:	mov	r5, r3
   13758:	b	1301c <__assert_fail@plt+0x20ec>
   1375c:	mov	r6, r8
   13760:	b	13678 <__assert_fail@plt+0x2748>
   13764:	mov	r5, #0
   13768:	b	13138 <__assert_fail@plt+0x2208>
   1376c:	mov	r8, r5
   13770:	ldr	r5, [sp, #48]	; 0x30
   13774:	mov	r4, #48	; 0x30
   13778:	b	13138 <__assert_fail@plt+0x2208>
   1377c:	ldr	r8, [sp, #32]
   13780:	mov	r4, #48	; 0x30
   13784:	b	13138 <__assert_fail@plt+0x2208>
   13788:	ldr	r8, [sp, #32]
   1378c:	mov	r4, #48	; 0x30
   13790:	b	13138 <__assert_fail@plt+0x2208>
   13794:	mov	r8, #0
   13798:	mov	r5, r8
   1379c:	b	13138 <__assert_fail@plt+0x2208>
   137a0:	mov	r8, #0
   137a4:	mov	r5, r8
   137a8:	b	13138 <__assert_fail@plt+0x2208>
   137ac:	mov	r8, #0
   137b0:	mov	r5, r8
   137b4:	b	13138 <__assert_fail@plt+0x2208>
   137b8:	mov	r8, #0
   137bc:	mov	r5, r8
   137c0:	b	13138 <__assert_fail@plt+0x2208>
   137c4:	ldr	r3, [sp, #52]	; 0x34
   137c8:	ldrb	r8, [r3, r6]
   137cc:	adds	r8, r8, #0
   137d0:	movne	r8, #1
   137d4:	b	13248 <__assert_fail@plt+0x2318>
   137d8:	cmp	sl, #2
   137dc:	movne	r3, #0
   137e0:	moveq	r3, #1
   137e4:	ldr	r1, [sp, #32]
   137e8:	mov	r2, r1
   137ec:	and	r2, r2, r3
   137f0:	cmp	fp, #0
   137f4:	movne	r2, #0
   137f8:	andeq	r2, r2, #1
   137fc:	cmp	r2, #0
   13800:	bne	139b0 <__assert_fail@plt+0x2a80>
   13804:	eor	r2, r1, #1
   13808:	and	r3, r3, r2
   1380c:	ldr	r1, [sp, #80]	; 0x50
   13810:	tst	r1, r3
   13814:	beq	1388c <__assert_fail@plt+0x295c>
   13818:	ldr	r3, [sp, #40]	; 0x28
   1381c:	cmp	r3, #0
   13820:	bne	13848 <__assert_fail@plt+0x2918>
   13824:	ldr	r1, [sp, #76]	; 0x4c
   13828:	clz	r3, r7
   1382c:	lsr	r3, r3, #5
   13830:	cmp	r1, #0
   13834:	moveq	r3, #0
   13838:	cmp	r3, #0
   1383c:	beq	1388c <__assert_fail@plt+0x295c>
   13840:	ldr	r7, [sp, #76]	; 0x4c
   13844:	b	128dc <__assert_fail@plt+0x19ac>
   13848:	ldr	r3, [sp, #168]	; 0xa8
   1384c:	str	r3, [sp, #16]
   13850:	ldr	r3, [sp, #164]	; 0xa4
   13854:	str	r3, [sp, #12]
   13858:	ldr	r3, [sp, #160]	; 0xa0
   1385c:	str	r3, [sp, #8]
   13860:	ldr	r3, [sp, #156]	; 0x9c
   13864:	str	r3, [sp, #4]
   13868:	mov	r3, #5
   1386c:	str	r3, [sp]
   13870:	ldr	r3, [sp, #28]
   13874:	ldr	r2, [sp, #52]	; 0x34
   13878:	ldr	r1, [sp, #76]	; 0x4c
   1387c:	ldr	r0, [sp, #36]	; 0x24
   13880:	bl	1287c <__assert_fail@plt+0x194c>
   13884:	mov	fp, r0
   13888:	b	1398c <__assert_fail@plt+0x2a5c>
   1388c:	mov	sl, r7
   13890:	ldr	r3, [sp, #72]	; 0x48
   13894:	cmp	r3, #0
   13898:	moveq	r2, #0
   1389c:	andne	r2, r2, #1
   138a0:	cmp	r2, #0
   138a4:	beq	138d4 <__assert_fail@plt+0x29a4>
   138a8:	mov	r2, r3
   138ac:	ldrb	r3, [r3]
   138b0:	cmp	r3, #0
   138b4:	beq	138d4 <__assert_fail@plt+0x29a4>
   138b8:	ldr	r1, [sp, #36]	; 0x24
   138bc:	cmp	sl, fp
   138c0:	strbhi	r3, [r1, fp]
   138c4:	add	fp, fp, #1
   138c8:	ldrb	r3, [r2, #1]!
   138cc:	cmp	r3, #0
   138d0:	bne	138bc <__assert_fail@plt+0x298c>
   138d4:	cmp	sl, fp
   138d8:	movhi	r3, #0
   138dc:	ldrhi	r2, [sp, #36]	; 0x24
   138e0:	strbhi	r3, [r2, fp]
   138e4:	b	1398c <__assert_fail@plt+0x2a5c>
   138e8:	mov	r8, sl
   138ec:	mov	sl, r7
   138f0:	ldr	r3, [sp, #32]
   138f4:	str	r3, [sp, #48]	; 0x30
   138f8:	b	13934 <__assert_fail@plt+0x2a04>
   138fc:	mov	r8, sl
   13900:	mov	sl, r7
   13904:	b	13934 <__assert_fail@plt+0x2a04>
   13908:	mov	r8, sl
   1390c:	mov	sl, r7
   13910:	b	13934 <__assert_fail@plt+0x2a04>
   13914:	andeq	r6, r1, r4, ror r5
   13918:	andeq	r6, r1, r4, lsl #11
   1391c:	andeq	r6, r1, r8, ror r5
   13920:	mov	r8, sl
   13924:	mov	sl, r7
   13928:	b	13934 <__assert_fail@plt+0x2a04>
   1392c:	mov	r8, sl
   13930:	mov	sl, r7
   13934:	ldr	r3, [sp, #48]	; 0x30
   13938:	cmp	r8, #2
   1393c:	movne	r3, #0
   13940:	andeq	r3, r3, #1
   13944:	cmp	r3, #0
   13948:	movne	r8, #4
   1394c:	ldr	r3, [sp, #168]	; 0xa8
   13950:	str	r3, [sp, #16]
   13954:	ldr	r3, [sp, #164]	; 0xa4
   13958:	str	r3, [sp, #12]
   1395c:	mov	r3, #0
   13960:	str	r3, [sp, #8]
   13964:	ldr	r3, [sp, #156]	; 0x9c
   13968:	bic	r3, r3, #2
   1396c:	str	r3, [sp, #4]
   13970:	str	r8, [sp]
   13974:	ldr	r3, [sp, #28]
   13978:	ldr	r2, [sp, #52]	; 0x34
   1397c:	mov	r1, sl
   13980:	ldr	r0, [sp, #36]	; 0x24
   13984:	bl	1287c <__assert_fail@plt+0x194c>
   13988:	mov	fp, r0
   1398c:	mov	r0, fp
   13990:	add	sp, sp, #116	; 0x74
   13994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13998:	mov	r8, sl
   1399c:	mov	sl, r7
   139a0:	b	13934 <__assert_fail@plt+0x2a04>
   139a4:	mov	r8, sl
   139a8:	mov	sl, r7
   139ac:	b	13934 <__assert_fail@plt+0x2a04>
   139b0:	mov	r8, sl
   139b4:	mov	sl, r7
   139b8:	b	13934 <__assert_fail@plt+0x2a04>
   139bc:	mov	r8, sl
   139c0:	mov	sl, r7
   139c4:	b	1394c <__assert_fail@plt+0x2a1c>
   139c8:	mov	r3, #1
   139cc:	str	r3, [sp, #32]
   139d0:	str	r3, [sp, #48]	; 0x30
   139d4:	str	r3, [sp, #60]	; 0x3c
   139d8:	ldr	r3, [pc, #-196]	; 1391c <__assert_fail@plt+0x29ec>
   139dc:	str	r3, [sp, #72]	; 0x48
   139e0:	mov	fp, #0
   139e4:	mov	sl, #5
   139e8:	b	12938 <__assert_fail@plt+0x1a08>
   139ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139f0:	sub	sp, sp, #52	; 0x34
   139f4:	mov	r5, r0
   139f8:	str	r1, [sp, #24]
   139fc:	str	r2, [sp, #28]
   13a00:	mov	r4, r3
   13a04:	bl	10e4c <__errno_location@plt>
   13a08:	str	r0, [sp, #32]
   13a0c:	ldr	r3, [r0]
   13a10:	str	r3, [sp, #36]	; 0x24
   13a14:	ldr	r3, [pc, #396]	; 13ba8 <__assert_fail@plt+0x2c78>
   13a18:	ldr	r6, [r3]
   13a1c:	cmn	r5, #-2147483647	; 0x80000001
   13a20:	movne	r3, #0
   13a24:	moveq	r3, #1
   13a28:	orrs	r3, r3, r5, lsr #31
   13a2c:	bne	13b6c <__assert_fail@plt+0x2c3c>
   13a30:	ldr	r3, [pc, #368]	; 13ba8 <__assert_fail@plt+0x2c78>
   13a34:	ldr	r2, [r3, #4]
   13a38:	cmp	r5, r2
   13a3c:	blt	13aa4 <__assert_fail@plt+0x2b74>
   13a40:	str	r2, [sp, #44]	; 0x2c
   13a44:	add	r3, r3, #8
   13a48:	cmp	r6, r3
   13a4c:	beq	13b70 <__assert_fail@plt+0x2c40>
   13a50:	sub	r2, r5, r2
   13a54:	mov	r3, #8
   13a58:	str	r3, [sp]
   13a5c:	mvn	r3, #-2147483648	; 0x80000000
   13a60:	add	r2, r2, #1
   13a64:	add	r1, sp, #44	; 0x2c
   13a68:	mov	r0, r6
   13a6c:	bl	148f0 <__assert_fail@plt+0x39c0>
   13a70:	mov	r6, r0
   13a74:	ldr	r3, [pc, #300]	; 13ba8 <__assert_fail@plt+0x2c78>
   13a78:	str	r0, [r3]
   13a7c:	ldr	r7, [pc, #292]	; 13ba8 <__assert_fail@plt+0x2c78>
   13a80:	ldr	r0, [r7, #4]
   13a84:	ldr	r2, [sp, #44]	; 0x2c
   13a88:	sub	r2, r2, r0
   13a8c:	lsl	r2, r2, #3
   13a90:	mov	r1, #0
   13a94:	add	r0, r6, r0, lsl #3
   13a98:	bl	10e64 <memset@plt>
   13a9c:	ldr	r3, [sp, #44]	; 0x2c
   13aa0:	str	r3, [r7, #4]
   13aa4:	add	fp, r6, r5, lsl #3
   13aa8:	ldr	r8, [r6, r5, lsl #3]
   13aac:	ldr	r7, [fp, #4]
   13ab0:	ldr	r9, [r4, #4]
   13ab4:	orr	r9, r9, #1
   13ab8:	add	sl, r4, #8
   13abc:	ldr	r3, [r4, #44]	; 0x2c
   13ac0:	str	r3, [sp, #16]
   13ac4:	ldr	r3, [r4, #40]	; 0x28
   13ac8:	str	r3, [sp, #12]
   13acc:	str	sl, [sp, #8]
   13ad0:	str	r9, [sp, #4]
   13ad4:	ldr	r3, [r4]
   13ad8:	str	r3, [sp]
   13adc:	ldr	r3, [sp, #28]
   13ae0:	ldr	r2, [sp, #24]
   13ae4:	mov	r1, r8
   13ae8:	mov	r0, r7
   13aec:	bl	1287c <__assert_fail@plt+0x194c>
   13af0:	cmp	r8, r0
   13af4:	bhi	13b54 <__assert_fail@plt+0x2c24>
   13af8:	add	r8, r0, #1
   13afc:	str	r8, [r6, r5, lsl #3]
   13b00:	ldr	r3, [pc, #164]	; 13bac <__assert_fail@plt+0x2c7c>
   13b04:	cmp	r7, r3
   13b08:	beq	13b14 <__assert_fail@plt+0x2be4>
   13b0c:	mov	r0, r7
   13b10:	bl	1255c <__assert_fail@plt+0x162c>
   13b14:	mov	r0, r8
   13b18:	bl	1476c <__assert_fail@plt+0x383c>
   13b1c:	mov	r7, r0
   13b20:	str	r0, [fp, #4]
   13b24:	ldr	r3, [r4, #44]	; 0x2c
   13b28:	str	r3, [sp, #16]
   13b2c:	ldr	r3, [r4, #40]	; 0x28
   13b30:	str	r3, [sp, #12]
   13b34:	str	sl, [sp, #8]
   13b38:	str	r9, [sp, #4]
   13b3c:	ldr	r3, [r4]
   13b40:	str	r3, [sp]
   13b44:	ldr	r3, [sp, #28]
   13b48:	ldr	r2, [sp, #24]
   13b4c:	mov	r1, r8
   13b50:	bl	1287c <__assert_fail@plt+0x194c>
   13b54:	ldr	r3, [sp, #32]
   13b58:	ldr	r2, [sp, #36]	; 0x24
   13b5c:	str	r2, [r3]
   13b60:	mov	r0, r7
   13b64:	add	sp, sp, #52	; 0x34
   13b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b6c:	bl	10f24 <abort@plt>
   13b70:	sub	r2, r5, r2
   13b74:	mov	r3, #8
   13b78:	str	r3, [sp]
   13b7c:	mvn	r3, #-2147483648	; 0x80000000
   13b80:	add	r2, r2, #1
   13b84:	add	r1, sp, #44	; 0x2c
   13b88:	mov	r0, #0
   13b8c:	bl	148f0 <__assert_fail@plt+0x39c0>
   13b90:	mov	r6, r0
   13b94:	ldr	r3, [pc, #12]	; 13ba8 <__assert_fail@plt+0x2c78>
   13b98:	str	r0, [r3], #8
   13b9c:	ldm	r3, {r0, r1}
   13ba0:	stm	r6, {r0, r1}
   13ba4:	b	13a7c <__assert_fail@plt+0x2b4c>
   13ba8:	strdeq	r7, [r2], -r4
   13bac:	andeq	r7, r2, ip, ror #2
   13bb0:	push	{r4, r5, r6, lr}
   13bb4:	mov	r4, r0
   13bb8:	bl	10e4c <__errno_location@plt>
   13bbc:	mov	r5, r0
   13bc0:	ldr	r6, [r0]
   13bc4:	cmp	r4, #0
   13bc8:	ldr	r3, [pc, #20]	; 13be4 <__assert_fail@plt+0x2cb4>
   13bcc:	moveq	r4, r3
   13bd0:	mov	r1, #48	; 0x30
   13bd4:	mov	r0, r4
   13bd8:	bl	14c58 <__assert_fail@plt+0x3d28>
   13bdc:	str	r6, [r5]
   13be0:	pop	{r4, r5, r6, pc}
   13be4:	andeq	r7, r2, ip, ror #4
   13be8:	subs	r3, r0, #0
   13bec:	ldr	r2, [pc, #8]	; 13bfc <__assert_fail@plt+0x2ccc>
   13bf0:	moveq	r3, r2
   13bf4:	ldr	r0, [r3]
   13bf8:	bx	lr
   13bfc:	andeq	r7, r2, ip, ror #4
   13c00:	subs	r3, r0, #0
   13c04:	ldr	r2, [pc, #8]	; 13c14 <__assert_fail@plt+0x2ce4>
   13c08:	moveq	r3, r2
   13c0c:	str	r1, [r3]
   13c10:	bx	lr
   13c14:	andeq	r7, r2, ip, ror #4
   13c18:	push	{lr}		; (str lr, [sp, #-4]!)
   13c1c:	subs	r3, r0, #0
   13c20:	ldr	r0, [pc, #44]	; 13c54 <__assert_fail@plt+0x2d24>
   13c24:	moveq	r3, r0
   13c28:	add	r3, r3, #8
   13c2c:	lsr	lr, r1, #5
   13c30:	and	r1, r1, #31
   13c34:	ldr	ip, [r3, lr, lsl #2]
   13c38:	lsr	r0, ip, r1
   13c3c:	eor	r2, r2, r0
   13c40:	and	r2, r2, #1
   13c44:	eor	r1, ip, r2, lsl r1
   13c48:	str	r1, [r3, lr, lsl #2]
   13c4c:	and	r0, r0, #1
   13c50:	pop	{pc}		; (ldr pc, [sp], #4)
   13c54:	andeq	r7, r2, ip, ror #4
   13c58:	subs	r3, r0, #0
   13c5c:	ldr	r2, [pc, #12]	; 13c70 <__assert_fail@plt+0x2d40>
   13c60:	moveq	r3, r2
   13c64:	ldr	r0, [r3, #4]
   13c68:	str	r1, [r3, #4]
   13c6c:	bx	lr
   13c70:	andeq	r7, r2, ip, ror #4
   13c74:	subs	r3, r0, #0
   13c78:	ldr	r0, [pc, #40]	; 13ca8 <__assert_fail@plt+0x2d78>
   13c7c:	moveq	r3, r0
   13c80:	mov	r0, #10
   13c84:	str	r0, [r3]
   13c88:	cmp	r2, #0
   13c8c:	cmpne	r1, #0
   13c90:	beq	13ca0 <__assert_fail@plt+0x2d70>
   13c94:	str	r1, [r3, #40]	; 0x28
   13c98:	str	r2, [r3, #44]	; 0x2c
   13c9c:	bx	lr
   13ca0:	push	{r4, lr}
   13ca4:	bl	10f24 <abort@plt>
   13ca8:	andeq	r7, r2, ip, ror #4
   13cac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cb0:	sub	sp, sp, #24
   13cb4:	mov	r7, r0
   13cb8:	mov	r8, r1
   13cbc:	mov	r9, r2
   13cc0:	mov	sl, r3
   13cc4:	ldr	r4, [sp, #56]	; 0x38
   13cc8:	cmp	r4, #0
   13ccc:	ldr	r3, [pc, #84]	; 13d28 <__assert_fail@plt+0x2df8>
   13cd0:	moveq	r4, r3
   13cd4:	bl	10e4c <__errno_location@plt>
   13cd8:	mov	r5, r0
   13cdc:	ldr	r6, [r0]
   13ce0:	ldr	r3, [r4, #44]	; 0x2c
   13ce4:	str	r3, [sp, #16]
   13ce8:	ldr	r3, [r4, #40]	; 0x28
   13cec:	str	r3, [sp, #12]
   13cf0:	add	r3, r4, #8
   13cf4:	str	r3, [sp, #8]
   13cf8:	ldr	r3, [r4, #4]
   13cfc:	str	r3, [sp, #4]
   13d00:	ldr	r3, [r4]
   13d04:	str	r3, [sp]
   13d08:	mov	r3, sl
   13d0c:	mov	r2, r9
   13d10:	mov	r1, r8
   13d14:	mov	r0, r7
   13d18:	bl	1287c <__assert_fail@plt+0x194c>
   13d1c:	str	r6, [r5]
   13d20:	add	sp, sp, #24
   13d24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d28:	andeq	r7, r2, ip, ror #4
   13d2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d30:	sub	sp, sp, #44	; 0x2c
   13d34:	str	r0, [sp, #28]
   13d38:	str	r1, [sp, #32]
   13d3c:	mov	r6, r2
   13d40:	subs	r4, r3, #0
   13d44:	ldr	r3, [pc, #172]	; 13df8 <__assert_fail@plt+0x2ec8>
   13d48:	moveq	r4, r3
   13d4c:	bl	10e4c <__errno_location@plt>
   13d50:	mov	r7, r0
   13d54:	ldr	fp, [r0]
   13d58:	ldr	r5, [r4, #4]
   13d5c:	cmp	r6, #0
   13d60:	orreq	r5, r5, #1
   13d64:	add	r9, r4, #8
   13d68:	ldr	r3, [r4, #44]	; 0x2c
   13d6c:	str	r3, [sp, #16]
   13d70:	ldr	r3, [r4, #40]	; 0x28
   13d74:	str	r3, [sp, #12]
   13d78:	str	r9, [sp, #8]
   13d7c:	str	r5, [sp, #4]
   13d80:	ldr	r3, [r4]
   13d84:	str	r3, [sp]
   13d88:	ldr	r3, [sp, #32]
   13d8c:	ldr	r2, [sp, #28]
   13d90:	mov	r1, #0
   13d94:	mov	r0, r1
   13d98:	bl	1287c <__assert_fail@plt+0x194c>
   13d9c:	mov	sl, r0
   13da0:	add	r8, r0, #1
   13da4:	mov	r0, r8
   13da8:	bl	1476c <__assert_fail@plt+0x383c>
   13dac:	str	r0, [sp, #36]	; 0x24
   13db0:	ldr	r3, [r4, #44]	; 0x2c
   13db4:	str	r3, [sp, #16]
   13db8:	ldr	r3, [r4, #40]	; 0x28
   13dbc:	str	r3, [sp, #12]
   13dc0:	str	r9, [sp, #8]
   13dc4:	str	r5, [sp, #4]
   13dc8:	ldr	r3, [r4]
   13dcc:	str	r3, [sp]
   13dd0:	ldr	r3, [sp, #32]
   13dd4:	ldr	r2, [sp, #28]
   13dd8:	mov	r1, r8
   13ddc:	bl	1287c <__assert_fail@plt+0x194c>
   13de0:	str	fp, [r7]
   13de4:	cmp	r6, #0
   13de8:	strne	sl, [r6]
   13dec:	ldr	r0, [sp, #36]	; 0x24
   13df0:	add	sp, sp, #44	; 0x2c
   13df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df8:	andeq	r7, r2, ip, ror #4
   13dfc:	push	{r4, lr}
   13e00:	mov	r3, r2
   13e04:	mov	r2, #0
   13e08:	bl	13d2c <__assert_fail@plt+0x2dfc>
   13e0c:	pop	{r4, pc}
   13e10:	push	{r4, r5, r6, r7, r8, lr}
   13e14:	ldr	r3, [pc, #140]	; 13ea8 <__assert_fail@plt+0x2f78>
   13e18:	ldr	r7, [r3]
   13e1c:	ldr	r3, [r3, #4]
   13e20:	cmp	r3, #1
   13e24:	ble	13e50 <__assert_fail@plt+0x2f20>
   13e28:	mov	r5, r7
   13e2c:	mov	r4, #1
   13e30:	ldr	r6, [pc, #112]	; 13ea8 <__assert_fail@plt+0x2f78>
   13e34:	ldr	r0, [r5, #12]
   13e38:	bl	1255c <__assert_fail@plt+0x162c>
   13e3c:	add	r4, r4, #1
   13e40:	add	r5, r5, #8
   13e44:	ldr	r3, [r6, #4]
   13e48:	cmp	r3, r4
   13e4c:	bgt	13e34 <__assert_fail@plt+0x2f04>
   13e50:	ldr	r0, [r7, #4]
   13e54:	ldr	r3, [pc, #80]	; 13eac <__assert_fail@plt+0x2f7c>
   13e58:	cmp	r0, r3
   13e5c:	beq	13e78 <__assert_fail@plt+0x2f48>
   13e60:	bl	1255c <__assert_fail@plt+0x162c>
   13e64:	ldr	r3, [pc, #60]	; 13ea8 <__assert_fail@plt+0x2f78>
   13e68:	mov	r2, #256	; 0x100
   13e6c:	str	r2, [r3, #8]
   13e70:	ldr	r2, [pc, #52]	; 13eac <__assert_fail@plt+0x2f7c>
   13e74:	str	r2, [r3, #12]
   13e78:	ldr	r3, [pc, #48]	; 13eb0 <__assert_fail@plt+0x2f80>
   13e7c:	cmp	r7, r3
   13e80:	beq	13e98 <__assert_fail@plt+0x2f68>
   13e84:	mov	r0, r7
   13e88:	bl	1255c <__assert_fail@plt+0x162c>
   13e8c:	ldr	r3, [pc, #20]	; 13ea8 <__assert_fail@plt+0x2f78>
   13e90:	add	r2, r3, #8
   13e94:	str	r2, [r3]
   13e98:	mov	r2, #1
   13e9c:	ldr	r3, [pc, #4]	; 13ea8 <__assert_fail@plt+0x2f78>
   13ea0:	str	r2, [r3, #4]
   13ea4:	pop	{r4, r5, r6, r7, r8, pc}
   13ea8:	strdeq	r7, [r2], -r4
   13eac:	andeq	r7, r2, ip, ror #2
   13eb0:	strdeq	r7, [r2], -ip
   13eb4:	push	{r4, lr}
   13eb8:	ldr	r3, [pc, #8]	; 13ec8 <__assert_fail@plt+0x2f98>
   13ebc:	mvn	r2, #0
   13ec0:	bl	139ec <__assert_fail@plt+0x2abc>
   13ec4:	pop	{r4, pc}
   13ec8:	andeq	r7, r2, ip, ror #4
   13ecc:	push	{r4, lr}
   13ed0:	ldr	r3, [pc, #4]	; 13edc <__assert_fail@plt+0x2fac>
   13ed4:	bl	139ec <__assert_fail@plt+0x2abc>
   13ed8:	pop	{r4, pc}
   13edc:	andeq	r7, r2, ip, ror #4
   13ee0:	push	{r4, lr}
   13ee4:	mov	r1, r0
   13ee8:	mov	r0, #0
   13eec:	bl	13eb4 <__assert_fail@plt+0x2f84>
   13ef0:	pop	{r4, pc}
   13ef4:	push	{r4, lr}
   13ef8:	mov	r2, r1
   13efc:	mov	r1, r0
   13f00:	mov	r0, #0
   13f04:	bl	13ecc <__assert_fail@plt+0x2f9c>
   13f08:	pop	{r4, pc}
   13f0c:	push	{r4, r5, lr}
   13f10:	sub	sp, sp, #52	; 0x34
   13f14:	mov	r4, r0
   13f18:	mov	r5, r2
   13f1c:	mov	r0, sp
   13f20:	bl	12714 <__assert_fail@plt+0x17e4>
   13f24:	mov	r3, sp
   13f28:	mvn	r2, #0
   13f2c:	mov	r1, r5
   13f30:	mov	r0, r4
   13f34:	bl	139ec <__assert_fail@plt+0x2abc>
   13f38:	add	sp, sp, #52	; 0x34
   13f3c:	pop	{r4, r5, pc}
   13f40:	push	{r4, r5, r6, lr}
   13f44:	sub	sp, sp, #48	; 0x30
   13f48:	mov	r4, r0
   13f4c:	mov	r5, r2
   13f50:	mov	r6, r3
   13f54:	mov	r0, sp
   13f58:	bl	12714 <__assert_fail@plt+0x17e4>
   13f5c:	mov	r3, sp
   13f60:	mov	r2, r6
   13f64:	mov	r1, r5
   13f68:	mov	r0, r4
   13f6c:	bl	139ec <__assert_fail@plt+0x2abc>
   13f70:	add	sp, sp, #48	; 0x30
   13f74:	pop	{r4, r5, r6, pc}
   13f78:	push	{r4, lr}
   13f7c:	mov	r2, r1
   13f80:	mov	r1, r0
   13f84:	mov	r0, #0
   13f88:	bl	13f0c <__assert_fail@plt+0x2fdc>
   13f8c:	pop	{r4, pc}
   13f90:	push	{r4, lr}
   13f94:	mov	r3, r2
   13f98:	mov	r2, r1
   13f9c:	mov	r1, r0
   13fa0:	mov	r0, #0
   13fa4:	bl	13f40 <__assert_fail@plt+0x3010>
   13fa8:	pop	{r4, pc}
   13fac:	push	{r4, r5, r6, lr}
   13fb0:	sub	sp, sp, #48	; 0x30
   13fb4:	mov	r4, r0
   13fb8:	mov	r5, r1
   13fbc:	mov	r6, r2
   13fc0:	mov	ip, sp
   13fc4:	ldr	lr, [pc, #64]	; 1400c <__assert_fail@plt+0x30dc>
   13fc8:	ldm	lr!, {r0, r1, r2, r3}
   13fcc:	stmia	ip!, {r0, r1, r2, r3}
   13fd0:	ldm	lr!, {r0, r1, r2, r3}
   13fd4:	stmia	ip!, {r0, r1, r2, r3}
   13fd8:	ldm	lr, {r0, r1, r2, r3}
   13fdc:	stm	ip, {r0, r1, r2, r3}
   13fe0:	mov	r2, #1
   13fe4:	mov	r1, r6
   13fe8:	mov	r0, sp
   13fec:	bl	13c18 <__assert_fail@plt+0x2ce8>
   13ff0:	mov	r3, sp
   13ff4:	mov	r2, r5
   13ff8:	mov	r1, r4
   13ffc:	mov	r0, #0
   14000:	bl	139ec <__assert_fail@plt+0x2abc>
   14004:	add	sp, sp, #48	; 0x30
   14008:	pop	{r4, r5, r6, pc}
   1400c:	andeq	r7, r2, ip, ror #4
   14010:	push	{r4, lr}
   14014:	mov	r2, r1
   14018:	mvn	r1, #0
   1401c:	bl	13fac <__assert_fail@plt+0x307c>
   14020:	pop	{r4, pc}
   14024:	push	{r4, lr}
   14028:	mov	r1, #58	; 0x3a
   1402c:	bl	14010 <__assert_fail@plt+0x30e0>
   14030:	pop	{r4, pc}
   14034:	push	{r4, lr}
   14038:	mov	r2, #58	; 0x3a
   1403c:	bl	13fac <__assert_fail@plt+0x307c>
   14040:	pop	{r4, pc}
   14044:	push	{r4, r5, lr}
   14048:	sub	sp, sp, #100	; 0x64
   1404c:	mov	r4, r0
   14050:	mov	r5, r2
   14054:	mov	r0, sp
   14058:	bl	12714 <__assert_fail@plt+0x17e4>
   1405c:	add	lr, sp, #48	; 0x30
   14060:	mov	ip, sp
   14064:	ldm	ip!, {r0, r1, r2, r3}
   14068:	stmia	lr!, {r0, r1, r2, r3}
   1406c:	ldm	ip!, {r0, r1, r2, r3}
   14070:	stmia	lr!, {r0, r1, r2, r3}
   14074:	ldm	ip, {r0, r1, r2, r3}
   14078:	stm	lr, {r0, r1, r2, r3}
   1407c:	mov	r2, #1
   14080:	mov	r1, #58	; 0x3a
   14084:	add	r0, sp, #48	; 0x30
   14088:	bl	13c18 <__assert_fail@plt+0x2ce8>
   1408c:	add	r3, sp, #48	; 0x30
   14090:	mvn	r2, #0
   14094:	mov	r1, r5
   14098:	mov	r0, r4
   1409c:	bl	139ec <__assert_fail@plt+0x2abc>
   140a0:	add	sp, sp, #100	; 0x64
   140a4:	pop	{r4, r5, pc}
   140a8:	push	{r4, r5, r6, r7, lr}
   140ac:	sub	sp, sp, #52	; 0x34
   140b0:	mov	r4, r0
   140b4:	mov	r6, r1
   140b8:	mov	r7, r2
   140bc:	mov	r5, r3
   140c0:	mov	ip, sp
   140c4:	ldr	lr, [pc, #64]	; 1410c <__assert_fail@plt+0x31dc>
   140c8:	ldm	lr!, {r0, r1, r2, r3}
   140cc:	stmia	ip!, {r0, r1, r2, r3}
   140d0:	ldm	lr!, {r0, r1, r2, r3}
   140d4:	stmia	ip!, {r0, r1, r2, r3}
   140d8:	ldm	lr, {r0, r1, r2, r3}
   140dc:	stm	ip, {r0, r1, r2, r3}
   140e0:	mov	r2, r7
   140e4:	mov	r1, r6
   140e8:	mov	r0, sp
   140ec:	bl	13c74 <__assert_fail@plt+0x2d44>
   140f0:	mov	r3, sp
   140f4:	ldr	r2, [sp, #72]	; 0x48
   140f8:	mov	r1, r5
   140fc:	mov	r0, r4
   14100:	bl	139ec <__assert_fail@plt+0x2abc>
   14104:	add	sp, sp, #52	; 0x34
   14108:	pop	{r4, r5, r6, r7, pc}
   1410c:	andeq	r7, r2, ip, ror #4
   14110:	push	{lr}		; (str lr, [sp, #-4]!)
   14114:	sub	sp, sp, #12
   14118:	mvn	ip, #0
   1411c:	str	ip, [sp]
   14120:	bl	140a8 <__assert_fail@plt+0x3178>
   14124:	add	sp, sp, #12
   14128:	pop	{pc}		; (ldr pc, [sp], #4)
   1412c:	push	{r4, lr}
   14130:	mov	r3, r2
   14134:	mov	r2, r1
   14138:	mov	r1, r0
   1413c:	mov	r0, #0
   14140:	bl	14110 <__assert_fail@plt+0x31e0>
   14144:	pop	{r4, pc}
   14148:	push	{lr}		; (str lr, [sp, #-4]!)
   1414c:	sub	sp, sp, #12
   14150:	str	r3, [sp]
   14154:	mov	r3, r2
   14158:	mov	r2, r1
   1415c:	mov	r1, r0
   14160:	mov	r0, #0
   14164:	bl	140a8 <__assert_fail@plt+0x3178>
   14168:	add	sp, sp, #12
   1416c:	pop	{pc}		; (ldr pc, [sp], #4)
   14170:	push	{r4, lr}
   14174:	ldr	r3, [pc, #4]	; 14180 <__assert_fail@plt+0x3250>
   14178:	bl	139ec <__assert_fail@plt+0x2abc>
   1417c:	pop	{r4, pc}
   14180:	andeq	r7, r2, r4, lsl #2
   14184:	push	{r4, lr}
   14188:	mov	r2, r1
   1418c:	mov	r1, r0
   14190:	mov	r0, #0
   14194:	bl	14170 <__assert_fail@plt+0x3240>
   14198:	pop	{r4, pc}
   1419c:	push	{r4, lr}
   141a0:	mvn	r2, #0
   141a4:	bl	14170 <__assert_fail@plt+0x3240>
   141a8:	pop	{r4, pc}
   141ac:	push	{r4, lr}
   141b0:	mov	r1, r0
   141b4:	mov	r0, #0
   141b8:	bl	1419c <__assert_fail@plt+0x326c>
   141bc:	pop	{r4, pc}
   141c0:	push	{r4, r5, r6, lr}
   141c4:	sub	sp, sp, #32
   141c8:	mov	r4, r0
   141cc:	ldr	r5, [sp, #48]	; 0x30
   141d0:	ldr	r6, [sp, #52]	; 0x34
   141d4:	cmp	r1, #0
   141d8:	beq	14290 <__assert_fail@plt+0x3360>
   141dc:	str	r3, [sp, #4]
   141e0:	str	r2, [sp]
   141e4:	mov	r3, r1
   141e8:	ldr	r2, [pc, #940]	; 1459c <__assert_fail@plt+0x366c>
   141ec:	mov	r1, #1
   141f0:	bl	10e88 <__fprintf_chk@plt>
   141f4:	mov	r2, #5
   141f8:	ldr	r1, [pc, #928]	; 145a0 <__assert_fail@plt+0x3670>
   141fc:	mov	r0, #0
   14200:	bl	10d68 <dcgettext@plt>
   14204:	ldr	r3, [pc, #920]	; 145a4 <__assert_fail@plt+0x3674>
   14208:	str	r3, [sp]
   1420c:	mov	r3, r0
   14210:	ldr	r2, [pc, #912]	; 145a8 <__assert_fail@plt+0x3678>
   14214:	mov	r1, #1
   14218:	mov	r0, r4
   1421c:	bl	10e88 <__fprintf_chk@plt>
   14220:	mov	r1, r4
   14224:	mov	r0, #10
   14228:	bl	10d5c <fputc_unlocked@plt>
   1422c:	mov	r2, #5
   14230:	ldr	r1, [pc, #884]	; 145ac <__assert_fail@plt+0x367c>
   14234:	mov	r0, #0
   14238:	bl	10d68 <dcgettext@plt>
   1423c:	ldr	r3, [pc, #876]	; 145b0 <__assert_fail@plt+0x3680>
   14240:	mov	r2, r0
   14244:	mov	r1, #1
   14248:	mov	r0, r4
   1424c:	bl	10e88 <__fprintf_chk@plt>
   14250:	mov	r1, r4
   14254:	mov	r0, #10
   14258:	bl	10d5c <fputc_unlocked@plt>
   1425c:	cmp	r6, #9
   14260:	ldrls	pc, [pc, r6, lsl #2]
   14264:	b	14534 <__assert_fail@plt+0x3604>
   14268:	andeq	r4, r1, ip, asr #5
   1426c:	andeq	r4, r1, r8, lsr #5
   14270:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14274:	andeq	r4, r1, r4, lsl #6
   14278:	andeq	r4, r1, ip, lsr r3
   1427c:	andeq	r4, r1, ip, ror r3
   14280:	andeq	r4, r1, r4, asr #7
   14284:	andeq	r4, r1, r4, lsl r4
   14288:	andeq	r4, r1, ip, ror #8
   1428c:	andeq	r4, r1, ip, asr #9
   14290:	str	r3, [sp]
   14294:	mov	r3, r2
   14298:	ldr	r2, [pc, #788]	; 145b4 <__assert_fail@plt+0x3684>
   1429c:	mov	r1, #1
   142a0:	bl	10e88 <__fprintf_chk@plt>
   142a4:	b	141f4 <__assert_fail@plt+0x32c4>
   142a8:	mov	r2, #5
   142ac:	ldr	r1, [pc, #772]	; 145b8 <__assert_fail@plt+0x3688>
   142b0:	mov	r0, #0
   142b4:	bl	10d68 <dcgettext@plt>
   142b8:	ldr	r3, [r5]
   142bc:	mov	r2, r0
   142c0:	mov	r1, #1
   142c4:	mov	r0, r4
   142c8:	bl	10e88 <__fprintf_chk@plt>
   142cc:	add	sp, sp, #32
   142d0:	pop	{r4, r5, r6, pc}
   142d4:	mov	r2, #5
   142d8:	ldr	r1, [pc, #732]	; 145bc <__assert_fail@plt+0x368c>
   142dc:	mov	r0, #0
   142e0:	bl	10d68 <dcgettext@plt>
   142e4:	ldr	r3, [r5]
   142e8:	ldr	r2, [r5, #4]
   142ec:	str	r2, [sp]
   142f0:	mov	r2, r0
   142f4:	mov	r1, #1
   142f8:	mov	r0, r4
   142fc:	bl	10e88 <__fprintf_chk@plt>
   14300:	b	142cc <__assert_fail@plt+0x339c>
   14304:	mov	r2, #5
   14308:	ldr	r1, [pc, #688]	; 145c0 <__assert_fail@plt+0x3690>
   1430c:	mov	r0, #0
   14310:	bl	10d68 <dcgettext@plt>
   14314:	ldr	r3, [r5]
   14318:	ldr	r2, [r5, #8]
   1431c:	str	r2, [sp, #4]
   14320:	ldr	r2, [r5, #4]
   14324:	str	r2, [sp]
   14328:	mov	r2, r0
   1432c:	mov	r1, #1
   14330:	mov	r0, r4
   14334:	bl	10e88 <__fprintf_chk@plt>
   14338:	b	142cc <__assert_fail@plt+0x339c>
   1433c:	mov	r2, #5
   14340:	ldr	r1, [pc, #636]	; 145c4 <__assert_fail@plt+0x3694>
   14344:	mov	r0, #0
   14348:	bl	10d68 <dcgettext@plt>
   1434c:	ldr	r3, [r5]
   14350:	ldr	r2, [r5, #12]
   14354:	str	r2, [sp, #8]
   14358:	ldr	r2, [r5, #8]
   1435c:	str	r2, [sp, #4]
   14360:	ldr	r2, [r5, #4]
   14364:	str	r2, [sp]
   14368:	mov	r2, r0
   1436c:	mov	r1, #1
   14370:	mov	r0, r4
   14374:	bl	10e88 <__fprintf_chk@plt>
   14378:	b	142cc <__assert_fail@plt+0x339c>
   1437c:	mov	r2, #5
   14380:	ldr	r1, [pc, #576]	; 145c8 <__assert_fail@plt+0x3698>
   14384:	mov	r0, #0
   14388:	bl	10d68 <dcgettext@plt>
   1438c:	ldr	r3, [r5]
   14390:	ldr	r2, [r5, #16]
   14394:	str	r2, [sp, #12]
   14398:	ldr	r2, [r5, #12]
   1439c:	str	r2, [sp, #8]
   143a0:	ldr	r2, [r5, #8]
   143a4:	str	r2, [sp, #4]
   143a8:	ldr	r2, [r5, #4]
   143ac:	str	r2, [sp]
   143b0:	mov	r2, r0
   143b4:	mov	r1, #1
   143b8:	mov	r0, r4
   143bc:	bl	10e88 <__fprintf_chk@plt>
   143c0:	b	142cc <__assert_fail@plt+0x339c>
   143c4:	mov	r2, #5
   143c8:	ldr	r1, [pc, #508]	; 145cc <__assert_fail@plt+0x369c>
   143cc:	mov	r0, #0
   143d0:	bl	10d68 <dcgettext@plt>
   143d4:	ldr	r3, [r5]
   143d8:	ldr	r2, [r5, #20]
   143dc:	str	r2, [sp, #16]
   143e0:	ldr	r2, [r5, #16]
   143e4:	str	r2, [sp, #12]
   143e8:	ldr	r2, [r5, #12]
   143ec:	str	r2, [sp, #8]
   143f0:	ldr	r2, [r5, #8]
   143f4:	str	r2, [sp, #4]
   143f8:	ldr	r2, [r5, #4]
   143fc:	str	r2, [sp]
   14400:	mov	r2, r0
   14404:	mov	r1, #1
   14408:	mov	r0, r4
   1440c:	bl	10e88 <__fprintf_chk@plt>
   14410:	b	142cc <__assert_fail@plt+0x339c>
   14414:	mov	r2, #5
   14418:	ldr	r1, [pc, #432]	; 145d0 <__assert_fail@plt+0x36a0>
   1441c:	mov	r0, #0
   14420:	bl	10d68 <dcgettext@plt>
   14424:	ldr	r3, [r5]
   14428:	ldr	r2, [r5, #24]
   1442c:	str	r2, [sp, #20]
   14430:	ldr	r2, [r5, #20]
   14434:	str	r2, [sp, #16]
   14438:	ldr	r2, [r5, #16]
   1443c:	str	r2, [sp, #12]
   14440:	ldr	r2, [r5, #12]
   14444:	str	r2, [sp, #8]
   14448:	ldr	r2, [r5, #8]
   1444c:	str	r2, [sp, #4]
   14450:	ldr	r2, [r5, #4]
   14454:	str	r2, [sp]
   14458:	mov	r2, r0
   1445c:	mov	r1, #1
   14460:	mov	r0, r4
   14464:	bl	10e88 <__fprintf_chk@plt>
   14468:	b	142cc <__assert_fail@plt+0x339c>
   1446c:	mov	r2, #5
   14470:	ldr	r1, [pc, #348]	; 145d4 <__assert_fail@plt+0x36a4>
   14474:	mov	r0, #0
   14478:	bl	10d68 <dcgettext@plt>
   1447c:	ldr	r3, [r5]
   14480:	ldr	r2, [r5, #28]
   14484:	str	r2, [sp, #24]
   14488:	ldr	r2, [r5, #24]
   1448c:	str	r2, [sp, #20]
   14490:	ldr	r2, [r5, #20]
   14494:	str	r2, [sp, #16]
   14498:	ldr	r2, [r5, #16]
   1449c:	str	r2, [sp, #12]
   144a0:	ldr	r2, [r5, #12]
   144a4:	str	r2, [sp, #8]
   144a8:	ldr	r2, [r5, #8]
   144ac:	str	r2, [sp, #4]
   144b0:	ldr	r2, [r5, #4]
   144b4:	str	r2, [sp]
   144b8:	mov	r2, r0
   144bc:	mov	r1, #1
   144c0:	mov	r0, r4
   144c4:	bl	10e88 <__fprintf_chk@plt>
   144c8:	b	142cc <__assert_fail@plt+0x339c>
   144cc:	mov	r2, #5
   144d0:	ldr	r1, [pc, #256]	; 145d8 <__assert_fail@plt+0x36a8>
   144d4:	mov	r0, #0
   144d8:	bl	10d68 <dcgettext@plt>
   144dc:	ldr	r3, [r5]
   144e0:	ldr	r2, [r5, #32]
   144e4:	str	r2, [sp, #28]
   144e8:	ldr	r2, [r5, #28]
   144ec:	str	r2, [sp, #24]
   144f0:	ldr	r2, [r5, #24]
   144f4:	str	r2, [sp, #20]
   144f8:	ldr	r2, [r5, #20]
   144fc:	str	r2, [sp, #16]
   14500:	ldr	r2, [r5, #16]
   14504:	str	r2, [sp, #12]
   14508:	ldr	r2, [r5, #12]
   1450c:	str	r2, [sp, #8]
   14510:	ldr	r2, [r5, #8]
   14514:	str	r2, [sp, #4]
   14518:	ldr	r2, [r5, #4]
   1451c:	str	r2, [sp]
   14520:	mov	r2, r0
   14524:	mov	r1, #1
   14528:	mov	r0, r4
   1452c:	bl	10e88 <__fprintf_chk@plt>
   14530:	b	142cc <__assert_fail@plt+0x339c>
   14534:	mov	r2, #5
   14538:	ldr	r1, [pc, #156]	; 145dc <__assert_fail@plt+0x36ac>
   1453c:	mov	r0, #0
   14540:	bl	10d68 <dcgettext@plt>
   14544:	ldr	r3, [r5]
   14548:	ldr	r2, [r5, #32]
   1454c:	str	r2, [sp, #28]
   14550:	ldr	r2, [r5, #28]
   14554:	str	r2, [sp, #24]
   14558:	ldr	r2, [r5, #24]
   1455c:	str	r2, [sp, #20]
   14560:	ldr	r2, [r5, #20]
   14564:	str	r2, [sp, #16]
   14568:	ldr	r2, [r5, #16]
   1456c:	str	r2, [sp, #12]
   14570:	ldr	r2, [r5, #12]
   14574:	str	r2, [sp, #8]
   14578:	ldr	r2, [r5, #8]
   1457c:	str	r2, [sp, #4]
   14580:	ldr	r2, [r5, #4]
   14584:	str	r2, [sp]
   14588:	mov	r2, r0
   1458c:	mov	r1, #1
   14590:	mov	r0, r4
   14594:	bl	10e88 <__fprintf_chk@plt>
   14598:	b	142cc <__assert_fail@plt+0x339c>
   1459c:	andeq	r6, r1, ip, ror #11
   145a0:	andeq	r6, r1, r0, lsl #12
   145a4:	andeq	r0, r0, r6, ror #15
   145a8:	ldrdeq	r6, [r1], -r8
   145ac:	andeq	r6, r1, r4, lsl #12
   145b0:			; <UNDEFINED> instruction: 0x000166b0
   145b4:	strdeq	r6, [r1], -r8
   145b8:	ldrdeq	r6, [r1], -r4
   145bc:	andeq	r6, r1, r4, ror #13
   145c0:	strdeq	r6, [r1], -ip
   145c4:	andeq	r6, r1, r8, lsl r7
   145c8:	andeq	r6, r1, r8, lsr r7
   145cc:	andeq	r6, r1, ip, asr r7
   145d0:	andeq	r6, r1, r4, lsl #15
   145d4:			; <UNDEFINED> instruction: 0x000167b0
   145d8:	andeq	r6, r1, r0, ror #15
   145dc:	andeq	r6, r1, r4, lsl r8
   145e0:	push	{r4, r5, lr}
   145e4:	sub	sp, sp, #12
   145e8:	ldr	r5, [sp, #24]
   145ec:	ldr	ip, [r5]
   145f0:	cmp	ip, #0
   145f4:	beq	14624 <__assert_fail@plt+0x36f4>
   145f8:	mov	lr, r5
   145fc:	mov	ip, #0
   14600:	add	ip, ip, #1
   14604:	ldr	r4, [lr, #4]!
   14608:	cmp	r4, #0
   1460c:	bne	14600 <__assert_fail@plt+0x36d0>
   14610:	str	ip, [sp, #4]
   14614:	str	r5, [sp]
   14618:	bl	141c0 <__assert_fail@plt+0x3290>
   1461c:	add	sp, sp, #12
   14620:	pop	{r4, r5, pc}
   14624:	mov	ip, #0
   14628:	b	14610 <__assert_fail@plt+0x36e0>
   1462c:	push	{r4, r5, lr}
   14630:	sub	sp, sp, #52	; 0x34
   14634:	ldr	r4, [sp, #64]	; 0x40
   14638:	sub	r4, r4, #4
   1463c:	add	r5, sp, #4
   14640:	mov	ip, #0
   14644:	ldr	lr, [r4, #4]!
   14648:	str	lr, [r5, #4]!
   1464c:	cmp	lr, #0
   14650:	beq	14660 <__assert_fail@plt+0x3730>
   14654:	add	ip, ip, #1
   14658:	cmp	ip, #10
   1465c:	bne	14644 <__assert_fail@plt+0x3714>
   14660:	str	ip, [sp, #4]
   14664:	add	ip, sp, #8
   14668:	str	ip, [sp]
   1466c:	bl	141c0 <__assert_fail@plt+0x3290>
   14670:	add	sp, sp, #52	; 0x34
   14674:	pop	{r4, r5, pc}
   14678:	push	{r3}		; (str r3, [sp, #-4]!)
   1467c:	push	{lr}		; (str lr, [sp, #-4]!)
   14680:	sub	sp, sp, #16
   14684:	add	r3, sp, #24
   14688:	str	r3, [sp, #12]
   1468c:	str	r3, [sp]
   14690:	ldr	r3, [sp, #20]
   14694:	bl	1462c <__assert_fail@plt+0x36fc>
   14698:	add	sp, sp, #16
   1469c:	pop	{lr}		; (ldr lr, [sp], #4)
   146a0:	add	sp, sp, #4
   146a4:	bx	lr
   146a8:	push	{r4, lr}
   146ac:	ldr	r3, [pc, #112]	; 14724 <__assert_fail@plt+0x37f4>
   146b0:	ldr	r1, [r3]
   146b4:	mov	r0, #10
   146b8:	bl	10d5c <fputc_unlocked@plt>
   146bc:	mov	r2, #5
   146c0:	ldr	r1, [pc, #96]	; 14728 <__assert_fail@plt+0x37f8>
   146c4:	mov	r0, #0
   146c8:	bl	10d68 <dcgettext@plt>
   146cc:	ldr	r2, [pc, #88]	; 1472c <__assert_fail@plt+0x37fc>
   146d0:	mov	r1, r0
   146d4:	mov	r0, #1
   146d8:	bl	10e70 <__printf_chk@plt>
   146dc:	mov	r2, #5
   146e0:	ldr	r1, [pc, #72]	; 14730 <__assert_fail@plt+0x3800>
   146e4:	mov	r0, #0
   146e8:	bl	10d68 <dcgettext@plt>
   146ec:	ldr	r3, [pc, #64]	; 14734 <__assert_fail@plt+0x3804>
   146f0:	ldr	r2, [pc, #64]	; 14738 <__assert_fail@plt+0x3808>
   146f4:	mov	r1, r0
   146f8:	mov	r0, #1
   146fc:	bl	10e70 <__printf_chk@plt>
   14700:	mov	r2, #5
   14704:	ldr	r1, [pc, #48]	; 1473c <__assert_fail@plt+0x380c>
   14708:	mov	r0, #0
   1470c:	bl	10d68 <dcgettext@plt>
   14710:	ldr	r2, [pc, #40]	; 14740 <__assert_fail@plt+0x3810>
   14714:	mov	r1, r0
   14718:	mov	r0, #1
   1471c:	bl	10e70 <__printf_chk@plt>
   14720:	pop	{r4, pc}
   14724:	andeq	r7, r2, r4, asr r1
   14728:	andeq	r6, r1, r0, asr r8
   1472c:	andeq	r6, r1, r4, ror #16
   14730:	andeq	r6, r1, ip, ror r8
   14734:	andeq	r6, r1, r8, lsl #3
   14738:			; <UNDEFINED> instruction: 0x000161b0
   1473c:	muleq	r1, r0, r8
   14740:			; <UNDEFINED> instruction: 0x000168b8
   14744:	push	{r4, lr}
   14748:	bl	15380 <__assert_fail@plt+0x4450>
   1474c:	cmp	r0, #0
   14750:	popne	{r4, pc}
   14754:	bl	14ce8 <__assert_fail@plt+0x3db8>
   14758:	push	{r4, lr}
   1475c:	bl	15380 <__assert_fail@plt+0x4450>
   14760:	cmp	r0, #0
   14764:	popne	{r4, pc}
   14768:	bl	14ce8 <__assert_fail@plt+0x3db8>
   1476c:	push	{r4, lr}
   14770:	bl	14744 <__assert_fail@plt+0x3814>
   14774:	pop	{r4, pc}
   14778:	push	{r4, r5, r6, lr}
   1477c:	mov	r5, r0
   14780:	mov	r4, r1
   14784:	bl	153b0 <__assert_fail@plt+0x4480>
   14788:	cmp	r0, #0
   1478c:	popne	{r4, r5, r6, pc}
   14790:	adds	r4, r4, #0
   14794:	movne	r4, #1
   14798:	cmp	r5, #0
   1479c:	orreq	r4, r4, #1
   147a0:	cmp	r4, #0
   147a4:	popeq	{r4, r5, r6, pc}
   147a8:	bl	14ce8 <__assert_fail@plt+0x3db8>
   147ac:	push	{r4, lr}
   147b0:	cmp	r1, #0
   147b4:	orreq	r1, r1, #1
   147b8:	bl	153b0 <__assert_fail@plt+0x4480>
   147bc:	cmp	r0, #0
   147c0:	popne	{r4, pc}
   147c4:	bl	14ce8 <__assert_fail@plt+0x3db8>
   147c8:	push	{r4, r5, r6, lr}
   147cc:	mov	r6, r0
   147d0:	mov	r5, r1
   147d4:	mov	r4, r2
   147d8:	bl	15504 <__assert_fail@plt+0x45d4>
   147dc:	cmp	r0, #0
   147e0:	popne	{r4, r5, r6, pc}
   147e4:	cmp	r6, #0
   147e8:	beq	147f8 <__assert_fail@plt+0x38c8>
   147ec:	cmp	r5, #0
   147f0:	cmpne	r4, #0
   147f4:	popeq	{r4, r5, r6, pc}
   147f8:	bl	14ce8 <__assert_fail@plt+0x3db8>
   147fc:	push	{r4, lr}
   14800:	bl	147c8 <__assert_fail@plt+0x3898>
   14804:	pop	{r4, pc}
   14808:	push	{r4, lr}
   1480c:	mov	ip, r1
   14810:	mov	r3, r2
   14814:	cmp	r2, #0
   14818:	cmpne	r1, #0
   1481c:	moveq	r3, #1
   14820:	moveq	ip, r3
   14824:	mov	r2, r3
   14828:	mov	r1, ip
   1482c:	bl	15504 <__assert_fail@plt+0x45d4>
   14830:	cmp	r0, #0
   14834:	popne	{r4, pc}
   14838:	bl	14ce8 <__assert_fail@plt+0x3db8>
   1483c:	push	{r4, lr}
   14840:	mov	r2, r1
   14844:	mov	r1, r0
   14848:	mov	r0, #0
   1484c:	bl	147c8 <__assert_fail@plt+0x3898>
   14850:	pop	{r4, pc}
   14854:	push	{r4, lr}
   14858:	mov	r2, r1
   1485c:	mov	r1, r0
   14860:	mov	r0, #0
   14864:	bl	14808 <__assert_fail@plt+0x38d8>
   14868:	pop	{r4, pc}
   1486c:	push	{r4, r5, r6, r7, r8, lr}
   14870:	mov	r5, r1
   14874:	mov	r6, r2
   14878:	ldr	r4, [r1]
   1487c:	subs	r7, r0, #0
   14880:	beq	1489c <__assert_fail@plt+0x396c>
   14884:	lsr	r2, r4, #1
   14888:	add	r3, r2, #1
   1488c:	mvn	r3, r3
   14890:	cmp	r4, r3
   14894:	bls	148c0 <__assert_fail@plt+0x3990>
   14898:	bl	14ce8 <__assert_fail@plt+0x3db8>
   1489c:	cmp	r4, #0
   148a0:	bne	148c8 <__assert_fail@plt+0x3998>
   148a4:	mov	r1, r2
   148a8:	mov	r0, #64	; 0x40
   148ac:	bl	15658 <__assert_fail@plt+0x4728>
   148b0:	cmp	r0, #0
   148b4:	movne	r4, r0
   148b8:	addeq	r4, r0, #1
   148bc:	b	148c8 <__assert_fail@plt+0x3998>
   148c0:	add	r4, r4, #1
   148c4:	add	r4, r4, r2
   148c8:	mov	r2, r6
   148cc:	mov	r1, r4
   148d0:	mov	r0, r7
   148d4:	bl	147c8 <__assert_fail@plt+0x3898>
   148d8:	str	r4, [r5]
   148dc:	pop	{r4, r5, r6, r7, r8, pc}
   148e0:	push	{r4, lr}
   148e4:	mov	r2, #1
   148e8:	bl	1486c <__assert_fail@plt+0x393c>
   148ec:	pop	{r4, pc}
   148f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148f4:	sub	sp, sp, #12
   148f8:	mov	fp, r0
   148fc:	mov	sl, r1
   14900:	mov	r9, r2
   14904:	mov	r7, r3
   14908:	ldr	r6, [sp, #48]	; 0x30
   1490c:	ldr	r5, [r1]
   14910:	asrs	r4, r5, #1
   14914:	bmi	14a70 <__assert_fail@plt+0x3b40>
   14918:	cmp	r5, #0
   1491c:	blt	14a84 <__assert_fail@plt+0x3b54>
   14920:	mvn	r3, #-2147483648	; 0x80000000
   14924:	sub	r3, r3, r4
   14928:	cmp	r5, r3
   1492c:	movle	r3, #0
   14930:	movgt	r3, #1
   14934:	cmp	r3, #0
   14938:	addeq	r4, r4, r5
   1493c:	mvnne	r4, #-2147483648	; 0x80000000
   14940:	mvn	r8, r7
   14944:	lsr	r8, r8, #31
   14948:	cmp	r7, r4
   1494c:	movge	r3, #0
   14950:	andlt	r3, r8, #1
   14954:	cmp	r3, #0
   14958:	movne	r4, r7
   1495c:	cmp	r6, #0
   14960:	blt	14a98 <__assert_fail@plt+0x3b68>
   14964:	cmp	r6, #0
   14968:	beq	14b44 <__assert_fail@plt+0x3c14>
   1496c:	cmp	r4, #0
   14970:	blt	14af4 <__assert_fail@plt+0x3bc4>
   14974:	mov	r1, r6
   14978:	mvn	r0, #-2147483648	; 0x80000000
   1497c:	bl	15864 <__assert_fail@plt+0x4934>
   14980:	cmp	r0, r4
   14984:	movge	r0, #0
   14988:	movlt	r0, #1
   1498c:	cmp	r0, #0
   14990:	mvnne	r3, #-2147483648	; 0x80000000
   14994:	strne	r3, [sp, #4]
   14998:	beq	14b2c <__assert_fail@plt+0x3bfc>
   1499c:	mov	r1, r6
   149a0:	ldr	r0, [sp, #4]
   149a4:	bl	15864 <__assert_fail@plt+0x4934>
   149a8:	mov	r4, r0
   149ac:	mov	r1, r6
   149b0:	ldr	r0, [sp, #4]
   149b4:	bl	15a84 <__assert_fail@plt+0x4b54>
   149b8:	ldr	r3, [sp, #4]
   149bc:	sub	r1, r3, r1
   149c0:	cmp	fp, #0
   149c4:	moveq	r3, #0
   149c8:	streq	r3, [sl]
   149cc:	sub	r3, r4, r5
   149d0:	cmp	r3, r9
   149d4:	bge	14a5c <__assert_fail@plt+0x3b2c>
   149d8:	cmp	r9, #0
   149dc:	blt	14b50 <__assert_fail@plt+0x3c20>
   149e0:	cmp	r5, #0
   149e4:	blt	14b64 <__assert_fail@plt+0x3c34>
   149e8:	mvn	r3, #-2147483648	; 0x80000000
   149ec:	sub	r3, r3, r9
   149f0:	cmp	r5, r3
   149f4:	movle	r3, #0
   149f8:	movgt	r3, #1
   149fc:	cmp	r3, #0
   14a00:	bne	14c0c <__assert_fail@plt+0x3cdc>
   14a04:	add	r5, r5, r9
   14a08:	mov	r4, r5
   14a0c:	cmp	r7, r5
   14a10:	movge	r7, #0
   14a14:	andlt	r7, r8, #1
   14a18:	cmp	r7, #0
   14a1c:	bne	14c0c <__assert_fail@plt+0x3cdc>
   14a20:	cmp	r6, #0
   14a24:	blt	14b78 <__assert_fail@plt+0x3c48>
   14a28:	cmp	r6, #0
   14a2c:	beq	14a58 <__assert_fail@plt+0x3b28>
   14a30:	cmp	r5, #0
   14a34:	blt	14bd4 <__assert_fail@plt+0x3ca4>
   14a38:	mov	r1, r6
   14a3c:	mvn	r0, #-2147483648	; 0x80000000
   14a40:	bl	15864 <__assert_fail@plt+0x4934>
   14a44:	cmp	r5, r0
   14a48:	movle	r0, #0
   14a4c:	movgt	r0, #1
   14a50:	cmp	r0, #0
   14a54:	bne	14c0c <__assert_fail@plt+0x3cdc>
   14a58:	mul	r1, r5, r6
   14a5c:	mov	r0, fp
   14a60:	bl	14778 <__assert_fail@plt+0x3848>
   14a64:	str	r4, [sl]
   14a68:	add	sp, sp, #12
   14a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a70:	rsb	r3, r4, #-2147483648	; 0x80000000
   14a74:	cmp	r5, r3
   14a78:	movge	r3, #0
   14a7c:	movlt	r3, #1
   14a80:	b	14934 <__assert_fail@plt+0x3a04>
   14a84:	rsb	r3, r5, #-2147483648	; 0x80000000
   14a88:	cmp	r4, r3
   14a8c:	movge	r3, #0
   14a90:	movlt	r3, #1
   14a94:	b	14934 <__assert_fail@plt+0x3a04>
   14a98:	cmp	r4, #0
   14a9c:	blt	14ac4 <__assert_fail@plt+0x3b94>
   14aa0:	cmn	r6, #1
   14aa4:	beq	14ae0 <__assert_fail@plt+0x3bb0>
   14aa8:	mov	r1, r6
   14aac:	mov	r0, #-2147483648	; 0x80000000
   14ab0:	bl	15864 <__assert_fail@plt+0x4934>
   14ab4:	cmp	r0, r4
   14ab8:	movge	r0, #0
   14abc:	movlt	r0, #1
   14ac0:	b	1498c <__assert_fail@plt+0x3a5c>
   14ac4:	mov	r1, r6
   14ac8:	mvn	r0, #-2147483648	; 0x80000000
   14acc:	bl	15864 <__assert_fail@plt+0x4934>
   14ad0:	cmp	r0, r4
   14ad4:	movle	r0, #0
   14ad8:	movgt	r0, #1
   14adc:	b	1498c <__assert_fail@plt+0x3a5c>
   14ae0:	add	r0, r4, #-2147483648	; 0x80000000
   14ae4:	cmp	r0, #0
   14ae8:	movle	r0, #0
   14aec:	movgt	r0, #1
   14af0:	b	1498c <__assert_fail@plt+0x3a5c>
   14af4:	cmn	r4, #1
   14af8:	beq	14b18 <__assert_fail@plt+0x3be8>
   14afc:	mov	r1, r4
   14b00:	mov	r0, #-2147483648	; 0x80000000
   14b04:	bl	15864 <__assert_fail@plt+0x4934>
   14b08:	cmp	r6, r0
   14b0c:	movle	r0, #0
   14b10:	movgt	r0, #1
   14b14:	b	1498c <__assert_fail@plt+0x3a5c>
   14b18:	add	r0, r6, #-2147483648	; 0x80000000
   14b1c:	cmp	r0, #0
   14b20:	movle	r0, #0
   14b24:	movgt	r0, #1
   14b28:	b	1498c <__assert_fail@plt+0x3a5c>
   14b2c:	mul	r1, r6, r4
   14b30:	cmp	r1, #63	; 0x3f
   14b34:	movle	r3, #64	; 0x40
   14b38:	strle	r3, [sp, #4]
   14b3c:	bgt	149c0 <__assert_fail@plt+0x3a90>
   14b40:	b	1499c <__assert_fail@plt+0x3a6c>
   14b44:	mov	r3, #64	; 0x40
   14b48:	str	r3, [sp, #4]
   14b4c:	b	1499c <__assert_fail@plt+0x3a6c>
   14b50:	rsb	r3, r9, #-2147483648	; 0x80000000
   14b54:	cmp	r5, r3
   14b58:	movge	r3, #0
   14b5c:	movlt	r3, #1
   14b60:	b	149fc <__assert_fail@plt+0x3acc>
   14b64:	rsb	r3, r5, #-2147483648	; 0x80000000
   14b68:	cmp	r9, r3
   14b6c:	movge	r3, #0
   14b70:	movlt	r3, #1
   14b74:	b	149fc <__assert_fail@plt+0x3acc>
   14b78:	cmp	r5, #0
   14b7c:	blt	14ba4 <__assert_fail@plt+0x3c74>
   14b80:	cmn	r6, #1
   14b84:	beq	14bc0 <__assert_fail@plt+0x3c90>
   14b88:	mov	r1, r6
   14b8c:	mov	r0, #-2147483648	; 0x80000000
   14b90:	bl	15864 <__assert_fail@plt+0x4934>
   14b94:	cmp	r5, r0
   14b98:	movle	r0, #0
   14b9c:	movgt	r0, #1
   14ba0:	b	14a50 <__assert_fail@plt+0x3b20>
   14ba4:	mov	r1, r6
   14ba8:	mvn	r0, #-2147483648	; 0x80000000
   14bac:	bl	15864 <__assert_fail@plt+0x4934>
   14bb0:	cmp	r5, r0
   14bb4:	movge	r0, #0
   14bb8:	movlt	r0, #1
   14bbc:	b	14a50 <__assert_fail@plt+0x3b20>
   14bc0:	add	r0, r5, #-2147483648	; 0x80000000
   14bc4:	cmp	r0, #0
   14bc8:	movle	r0, #0
   14bcc:	movgt	r0, #1
   14bd0:	b	14a50 <__assert_fail@plt+0x3b20>
   14bd4:	cmn	r5, #1
   14bd8:	beq	14bf8 <__assert_fail@plt+0x3cc8>
   14bdc:	mov	r1, r5
   14be0:	mov	r0, #-2147483648	; 0x80000000
   14be4:	bl	15864 <__assert_fail@plt+0x4934>
   14be8:	cmp	r6, r0
   14bec:	movle	r0, #0
   14bf0:	movgt	r0, #1
   14bf4:	b	14a50 <__assert_fail@plt+0x3b20>
   14bf8:	add	r0, r6, #-2147483648	; 0x80000000
   14bfc:	cmp	r0, #0
   14c00:	movle	r0, #0
   14c04:	movgt	r0, #1
   14c08:	b	14a50 <__assert_fail@plt+0x3b20>
   14c0c:	bl	14ce8 <__assert_fail@plt+0x3db8>
   14c10:	push	{r4, lr}
   14c14:	bl	15330 <__assert_fail@plt+0x4400>
   14c18:	cmp	r0, #0
   14c1c:	popne	{r4, pc}
   14c20:	bl	14ce8 <__assert_fail@plt+0x3db8>
   14c24:	push	{r4, lr}
   14c28:	mov	r1, #1
   14c2c:	bl	14c10 <__assert_fail@plt+0x3ce0>
   14c30:	pop	{r4, pc}
   14c34:	push	{r4, lr}
   14c38:	bl	15330 <__assert_fail@plt+0x4400>
   14c3c:	cmp	r0, #0
   14c40:	popne	{r4, pc}
   14c44:	bl	14ce8 <__assert_fail@plt+0x3db8>
   14c48:	push	{r4, lr}
   14c4c:	mov	r1, #1
   14c50:	bl	14c34 <__assert_fail@plt+0x3d04>
   14c54:	pop	{r4, pc}
   14c58:	push	{r4, r5, r6, lr}
   14c5c:	mov	r5, r0
   14c60:	mov	r4, r1
   14c64:	mov	r0, r1
   14c68:	bl	14744 <__assert_fail@plt+0x3814>
   14c6c:	mov	r2, r4
   14c70:	mov	r1, r5
   14c74:	bl	10d2c <memcpy@plt>
   14c78:	pop	{r4, r5, r6, pc}
   14c7c:	push	{r4, r5, r6, lr}
   14c80:	mov	r5, r0
   14c84:	mov	r4, r1
   14c88:	mov	r0, r1
   14c8c:	bl	14758 <__assert_fail@plt+0x3828>
   14c90:	mov	r2, r4
   14c94:	mov	r1, r5
   14c98:	bl	10d2c <memcpy@plt>
   14c9c:	pop	{r4, r5, r6, pc}
   14ca0:	push	{r4, r5, r6, lr}
   14ca4:	mov	r5, r0
   14ca8:	mov	r4, r1
   14cac:	add	r0, r1, #1
   14cb0:	bl	14758 <__assert_fail@plt+0x3828>
   14cb4:	mov	r2, #0
   14cb8:	strb	r2, [r0, r4]
   14cbc:	mov	r2, r4
   14cc0:	mov	r1, r5
   14cc4:	bl	10d2c <memcpy@plt>
   14cc8:	pop	{r4, r5, r6, pc}
   14ccc:	push	{r4, lr}
   14cd0:	mov	r4, r0
   14cd4:	bl	10e34 <strlen@plt>
   14cd8:	add	r1, r0, #1
   14cdc:	mov	r0, r4
   14ce0:	bl	14c58 <__assert_fail@plt+0x3d28>
   14ce4:	pop	{r4, pc}
   14ce8:	push	{r4, lr}
   14cec:	ldr	r3, [pc, #40]	; 14d1c <__assert_fail@plt+0x3dec>
   14cf0:	ldr	r4, [r3]
   14cf4:	mov	r2, #5
   14cf8:	ldr	r1, [pc, #32]	; 14d20 <__assert_fail@plt+0x3df0>
   14cfc:	mov	r0, #0
   14d00:	bl	10d68 <dcgettext@plt>
   14d04:	mov	r3, r0
   14d08:	ldr	r2, [pc, #20]	; 14d24 <__assert_fail@plt+0x3df4>
   14d0c:	mov	r1, #0
   14d10:	mov	r0, r4
   14d14:	bl	10dd4 <error@plt>
   14d18:	bl	10f24 <abort@plt>
   14d1c:	strdeq	r7, [r2], -r0
   14d20:	andeq	r6, r1, r8, lsl #18
   14d24:	andeq	r6, r1, ip, lsl #5
   14d28:	push	{r4, r5, r6, r7, r8, lr}
   14d2c:	mov	r5, r0
   14d30:	subs	r4, r1, #0
   14d34:	blt	14d90 <__assert_fail@plt+0x3e60>
   14d38:	cmp	r4, #0
   14d3c:	beq	14e04 <__assert_fail@plt+0x3ed4>
   14d40:	ldrd	r6, [r0]
   14d44:	cmp	r6, #0
   14d48:	sbcs	r3, r7, #0
   14d4c:	blt	14e48 <__assert_fail@plt+0x3f18>
   14d50:	mov	r2, r4
   14d54:	asr	r3, r4, #31
   14d58:	mvn	r0, #0
   14d5c:	mvn	r1, #-2147483648	; 0x80000000
   14d60:	bl	15aa4 <__assert_fail@plt+0x4b74>
   14d64:	cmp	r0, r6
   14d68:	sbcs	r3, r1, r7
   14d6c:	movlt	r3, #1
   14d70:	movge	r3, #0
   14d74:	cmp	r3, #0
   14d78:	mvnne	r2, #0
   14d7c:	mvnne	r3, #-2147483648	; 0x80000000
   14d80:	beq	14e04 <__assert_fail@plt+0x3ed4>
   14d84:	strd	r2, [r5]
   14d88:	mov	r0, #1
   14d8c:	pop	{r4, r5, r6, r7, r8, pc}
   14d90:	ldrd	r6, [r0]
   14d94:	cmp	r6, #0
   14d98:	sbcs	r3, r7, #0
   14d9c:	blt	14dd0 <__assert_fail@plt+0x3ea0>
   14da0:	cmn	r4, #1
   14da4:	beq	14e2c <__assert_fail@plt+0x3efc>
   14da8:	mov	r2, r4
   14dac:	asr	r3, r4, #31
   14db0:	mov	r0, #0
   14db4:	mov	r1, #-2147483648	; 0x80000000
   14db8:	bl	15aa4 <__assert_fail@plt+0x4b74>
   14dbc:	cmp	r0, r6
   14dc0:	sbcs	r3, r1, r7
   14dc4:	movlt	r3, #1
   14dc8:	movge	r3, #0
   14dcc:	b	14d74 <__assert_fail@plt+0x3e44>
   14dd0:	mov	r2, r4
   14dd4:	asr	r3, r4, #31
   14dd8:	mvn	r0, #0
   14ddc:	mvn	r1, #-2147483648	; 0x80000000
   14de0:	bl	15aa4 <__assert_fail@plt+0x4b74>
   14de4:	cmp	r6, r0
   14de8:	sbcs	r3, r7, r1
   14dec:	movlt	r3, #1
   14df0:	movge	r3, #0
   14df4:	cmp	r3, #0
   14df8:	movne	r2, #0
   14dfc:	movne	r3, #-2147483648	; 0x80000000
   14e00:	bne	14d84 <__assert_fail@plt+0x3e54>
   14e04:	asr	r3, r4, #31
   14e08:	ldr	r1, [r5, #4]
   14e0c:	ldr	r2, [r5]
   14e10:	mul	r3, r3, r2
   14e14:	mla	r1, r4, r1, r3
   14e18:	umull	r2, r3, r2, r4
   14e1c:	add	r3, r1, r3
   14e20:	strd	r2, [r5]
   14e24:	mov	r0, #0
   14e28:	pop	{r4, r5, r6, r7, r8, pc}
   14e2c:	adds	r6, r6, #0
   14e30:	adc	r7, r7, #-2147483648	; 0x80000000
   14e34:	cmp	r6, #1
   14e38:	sbcs	r3, r7, #0
   14e3c:	movge	r3, #1
   14e40:	movlt	r3, #0
   14e44:	b	14d74 <__assert_fail@plt+0x3e44>
   14e48:	mvn	r2, #0
   14e4c:	mvn	r3, #0
   14e50:	cmp	r7, r3
   14e54:	cmpeq	r6, r2
   14e58:	beq	14e8c <__assert_fail@plt+0x3f5c>
   14e5c:	mov	r2, r6
   14e60:	mov	r3, r7
   14e64:	mov	r0, #0
   14e68:	mov	r1, #-2147483648	; 0x80000000
   14e6c:	bl	15aa4 <__assert_fail@plt+0x4b74>
   14e70:	mov	r2, r4
   14e74:	asr	r3, r4, #31
   14e78:	cmp	r0, r4
   14e7c:	sbcs	r3, r1, r3
   14e80:	movlt	r3, #1
   14e84:	movge	r3, #0
   14e88:	b	14df4 <__assert_fail@plt+0x3ec4>
   14e8c:	asr	r3, r4, #31
   14e90:	adds	r2, r4, #0
   14e94:	adc	r3, r3, #-2147483648	; 0x80000000
   14e98:	cmp	r2, #1
   14e9c:	sbcs	r3, r3, #0
   14ea0:	movge	r3, #1
   14ea4:	movlt	r3, #0
   14ea8:	b	14df4 <__assert_fail@plt+0x3ec4>
   14eac:	push	{r4, r5, r6, r7, r8, lr}
   14eb0:	subs	r4, r2, #0
   14eb4:	beq	14ee4 <__assert_fail@plt+0x3fb4>
   14eb8:	mov	r7, r1
   14ebc:	mov	r6, r0
   14ec0:	mov	r5, #0
   14ec4:	mov	r1, r7
   14ec8:	mov	r0, r6
   14ecc:	bl	14d28 <__assert_fail@plt+0x3df8>
   14ed0:	orr	r5, r5, r0
   14ed4:	subs	r4, r4, #1
   14ed8:	bne	14ec4 <__assert_fail@plt+0x3f94>
   14edc:	mov	r0, r5
   14ee0:	pop	{r4, r5, r6, r7, r8, pc}
   14ee4:	mov	r5, #0
   14ee8:	b	14edc <__assert_fail@plt+0x3fac>
   14eec:	push	{r4, r5, r6, r7, r8, lr}
   14ef0:	sub	sp, sp, #16
   14ef4:	cmp	r2, #36	; 0x24
   14ef8:	bhi	14f64 <__assert_fail@plt+0x4034>
   14efc:	mov	r6, r0
   14f00:	mov	r4, r1
   14f04:	mov	r5, r2
   14f08:	mov	r8, r3
   14f0c:	cmp	r1, #0
   14f10:	addeq	r4, sp, #12
   14f14:	bl	10e4c <__errno_location@plt>
   14f18:	mov	r7, r0
   14f1c:	mov	r3, #0
   14f20:	str	r3, [r0]
   14f24:	mov	r2, r5
   14f28:	mov	r1, r4
   14f2c:	mov	r0, r6
   14f30:	bl	10ee8 <__strtoll_internal@plt>
   14f34:	strd	r0, [sp]
   14f38:	ldr	r5, [r4]
   14f3c:	cmp	r6, r5
   14f40:	beq	14f78 <__assert_fail@plt+0x4048>
   14f44:	ldr	r3, [r7]
   14f48:	cmp	r3, #0
   14f4c:	beq	14fc0 <__assert_fail@plt+0x4090>
   14f50:	cmp	r3, #34	; 0x22
   14f54:	moveq	r6, #1
   14f58:	beq	14fc4 <__assert_fail@plt+0x4094>
   14f5c:	mov	r6, #4
   14f60:	b	15318 <__assert_fail@plt+0x43e8>
   14f64:	ldr	r3, [pc, #952]	; 15324 <__assert_fail@plt+0x43f4>
   14f68:	mov	r2, #85	; 0x55
   14f6c:	ldr	r1, [pc, #948]	; 15328 <__assert_fail@plt+0x43f8>
   14f70:	ldr	r0, [pc, #948]	; 1532c <__assert_fail@plt+0x43fc>
   14f74:	bl	10f30 <__assert_fail@plt>
   14f78:	ldr	r3, [sp, #40]	; 0x28
   14f7c:	cmp	r3, #0
   14f80:	moveq	r6, #4
   14f84:	beq	15318 <__assert_fail@plt+0x43e8>
   14f88:	ldrb	r1, [r5]
   14f8c:	cmp	r1, #0
   14f90:	moveq	r6, #4
   14f94:	beq	15318 <__assert_fail@plt+0x43e8>
   14f98:	mov	r0, r3
   14f9c:	bl	10e40 <strchr@plt>
   14fa0:	cmp	r0, #0
   14fa4:	moveq	r6, #4
   14fa8:	beq	15318 <__assert_fail@plt+0x43e8>
   14fac:	mov	r2, #1
   14fb0:	mov	r3, #0
   14fb4:	strd	r2, [sp]
   14fb8:	mov	r6, #0
   14fbc:	b	14fd0 <__assert_fail@plt+0x40a0>
   14fc0:	mov	r6, #0
   14fc4:	ldr	r3, [sp, #40]	; 0x28
   14fc8:	cmp	r3, #0
   14fcc:	beq	150c0 <__assert_fail@plt+0x4190>
   14fd0:	ldrb	r7, [r5]
   14fd4:	cmp	r7, #0
   14fd8:	beq	15310 <__assert_fail@plt+0x43e0>
   14fdc:	mov	r1, r7
   14fe0:	ldr	r0, [sp, #40]	; 0x28
   14fe4:	bl	10e40 <strchr@plt>
   14fe8:	cmp	r0, #0
   14fec:	beq	150c8 <__assert_fail@plt+0x4198>
   14ff0:	sub	r3, r7, #69	; 0x45
   14ff4:	cmp	r3, #47	; 0x2f
   14ff8:	ldrls	pc, [pc, r3, lsl #2]
   14ffc:	b	15134 <__assert_fail@plt+0x4204>
   15000:	ldrdeq	r5, [r1], -r8
   15004:	andeq	r5, r1, r4, lsr r1
   15008:	ldrdeq	r5, [r1], -r8
   1500c:	andeq	r5, r1, r4, lsr r1
   15010:	andeq	r5, r1, r4, lsr r1
   15014:	andeq	r5, r1, r4, lsr r1
   15018:	ldrdeq	r5, [r1], -r8
   1501c:	andeq	r5, r1, r4, lsr r1
   15020:	ldrdeq	r5, [r1], -r8
   15024:	andeq	r5, r1, r4, lsr r1
   15028:	andeq	r5, r1, r4, lsr r1
   1502c:	ldrdeq	r5, [r1], -r8
   15030:	andeq	r5, r1, r4, lsr r1
   15034:	andeq	r5, r1, r4, lsr r1
   15038:	andeq	r5, r1, r4, lsr r1
   1503c:	ldrdeq	r5, [r1], -r8
   15040:	andeq	r5, r1, r4, lsr r1
   15044:	andeq	r5, r1, r4, lsr r1
   15048:	andeq	r5, r1, r4, lsr r1
   1504c:	andeq	r5, r1, r4, lsr r1
   15050:	ldrdeq	r5, [r1], -r8
   15054:	ldrdeq	r5, [r1], -r8
   15058:	andeq	r5, r1, r4, lsr r1
   1505c:	andeq	r5, r1, r4, lsr r1
   15060:	andeq	r5, r1, r4, lsr r1
   15064:	andeq	r5, r1, r4, lsr r1
   15068:	andeq	r5, r1, r4, lsr r1
   1506c:	andeq	r5, r1, r4, lsr r1
   15070:	andeq	r5, r1, r4, lsr r1
   15074:	andeq	r5, r1, r4, lsr r1
   15078:	andeq	r5, r1, r4, lsr r1
   1507c:	andeq	r5, r1, r4, lsr r1
   15080:	andeq	r5, r1, r4, lsr r1
   15084:	andeq	r5, r1, r4, lsr r1
   15088:	ldrdeq	r5, [r1], -r8
   1508c:	andeq	r5, r1, r4, lsr r1
   15090:	andeq	r5, r1, r4, lsr r1
   15094:	andeq	r5, r1, r4, lsr r1
   15098:	ldrdeq	r5, [r1], -r8
   1509c:	andeq	r5, r1, r4, lsr r1
   150a0:	ldrdeq	r5, [r1], -r8
   150a4:	andeq	r5, r1, r4, lsr r1
   150a8:	andeq	r5, r1, r4, lsr r1
   150ac:	andeq	r5, r1, r4, lsr r1
   150b0:	andeq	r5, r1, r4, lsr r1
   150b4:	andeq	r5, r1, r4, lsr r1
   150b8:	andeq	r5, r1, r4, lsr r1
   150bc:	ldrdeq	r5, [r1], -r8
   150c0:	strd	r0, [r8]
   150c4:	b	15318 <__assert_fail@plt+0x43e8>
   150c8:	ldrd	r2, [sp]
   150cc:	strd	r2, [r8]
   150d0:	orr	r6, r6, #2
   150d4:	b	15318 <__assert_fail@plt+0x43e8>
   150d8:	mov	r1, #48	; 0x30
   150dc:	ldr	r0, [sp, #40]	; 0x28
   150e0:	bl	10e40 <strchr@plt>
   150e4:	cmp	r0, #0
   150e8:	beq	15224 <__assert_fail@plt+0x42f4>
   150ec:	ldrb	r3, [r5, #1]
   150f0:	cmp	r3, #68	; 0x44
   150f4:	beq	15110 <__assert_fail@plt+0x41e0>
   150f8:	cmp	r3, #105	; 0x69
   150fc:	beq	1511c <__assert_fail@plt+0x41ec>
   15100:	cmp	r3, #66	; 0x42
   15104:	movne	r5, #1
   15108:	movne	r1, #1024	; 0x400
   1510c:	bne	1513c <__assert_fail@plt+0x420c>
   15110:	mov	r5, #2
   15114:	mov	r1, #1000	; 0x3e8
   15118:	b	1513c <__assert_fail@plt+0x420c>
   1511c:	ldrb	r5, [r5, #2]
   15120:	cmp	r5, #66	; 0x42
   15124:	movne	r5, #1
   15128:	moveq	r5, #3
   1512c:	mov	r1, #1024	; 0x400
   15130:	b	1513c <__assert_fail@plt+0x420c>
   15134:	mov	r5, #1
   15138:	mov	r1, #1024	; 0x400
   1513c:	sub	r7, r7, #66	; 0x42
   15140:	cmp	r7, #53	; 0x35
   15144:	ldrls	pc, [pc, r7, lsl #2]
   15148:	b	152e0 <__assert_fail@plt+0x43b0>
   1514c:	andeq	r5, r1, r0, asr #4
   15150:	andeq	r5, r1, r0, ror #5
   15154:	andeq	r5, r1, r0, ror #5
   15158:	andeq	r5, r1, r0, asr r2
   1515c:	andeq	r5, r1, r0, ror #5
   15160:	andeq	r5, r1, r0, ror #4
   15164:	andeq	r5, r1, r0, ror #5
   15168:	andeq	r5, r1, r0, ror #5
   1516c:	andeq	r5, r1, r0, ror #5
   15170:	andeq	r5, r1, r0, ror r2
   15174:	andeq	r5, r1, r0, ror #5
   15178:	andeq	r5, r1, r0, lsl #5
   1517c:	andeq	r5, r1, r0, ror #5
   15180:	andeq	r5, r1, r0, ror #5
   15184:	muleq	r1, r0, r2
   15188:	andeq	r5, r1, r0, ror #5
   1518c:	andeq	r5, r1, r0, ror #5
   15190:	andeq	r5, r1, r0, ror #5
   15194:	andeq	r5, r1, r0, lsr #5
   15198:	andeq	r5, r1, r0, ror #5
   1519c:	andeq	r5, r1, r0, ror #5
   151a0:	andeq	r5, r1, r0, ror #5
   151a4:	andeq	r5, r1, r0, ror #5
   151a8:	andeq	r5, r1, r0, asr #5
   151ac:	ldrdeq	r5, [r1], -r0
   151b0:	andeq	r5, r1, r0, ror #5
   151b4:	andeq	r5, r1, r0, ror #5
   151b8:	andeq	r5, r1, r0, ror #5
   151bc:	andeq	r5, r1, r0, ror #5
   151c0:	andeq	r5, r1, r0, ror #5
   151c4:	andeq	r5, r1, r0, ror #5
   151c8:	andeq	r5, r1, r0, ror #5
   151cc:	andeq	r5, r1, r0, lsr r2
   151d0:	strdeq	r5, [r1], -r0
   151d4:	andeq	r5, r1, r0, ror #5
   151d8:	andeq	r5, r1, r0, ror #5
   151dc:	andeq	r5, r1, r0, ror #5
   151e0:	andeq	r5, r1, r0, ror #4
   151e4:	andeq	r5, r1, r0, ror #5
   151e8:	andeq	r5, r1, r0, ror #5
   151ec:	andeq	r5, r1, r0, ror #5
   151f0:	andeq	r5, r1, r0, ror r2
   151f4:	andeq	r5, r1, r0, ror #5
   151f8:	andeq	r5, r1, r0, lsl #5
   151fc:	andeq	r5, r1, r0, ror #5
   15200:	andeq	r5, r1, r0, ror #5
   15204:	andeq	r5, r1, r0, ror #5
   15208:	andeq	r5, r1, r0, ror #5
   1520c:	andeq	r5, r1, r0, ror #5
   15210:	andeq	r5, r1, r0, ror #5
   15214:	andeq	r5, r1, r0, lsr #5
   15218:	andeq	r5, r1, r0, ror #5
   1521c:	andeq	r5, r1, r0, ror #5
   15220:			; <UNDEFINED> instruction: 0x000152b0
   15224:	mov	r5, #1
   15228:	mov	r1, #1024	; 0x400
   1522c:	b	1513c <__assert_fail@plt+0x420c>
   15230:	mov	r1, #512	; 0x200
   15234:	mov	r0, sp
   15238:	bl	14d28 <__assert_fail@plt+0x3df8>
   1523c:	b	152f4 <__assert_fail@plt+0x43c4>
   15240:	mov	r1, #1024	; 0x400
   15244:	mov	r0, sp
   15248:	bl	14d28 <__assert_fail@plt+0x3df8>
   1524c:	b	152f4 <__assert_fail@plt+0x43c4>
   15250:	mov	r2, #6
   15254:	mov	r0, sp
   15258:	bl	14eac <__assert_fail@plt+0x3f7c>
   1525c:	b	152f4 <__assert_fail@plt+0x43c4>
   15260:	mov	r2, #3
   15264:	mov	r0, sp
   15268:	bl	14eac <__assert_fail@plt+0x3f7c>
   1526c:	b	152f4 <__assert_fail@plt+0x43c4>
   15270:	mov	r2, #1
   15274:	mov	r0, sp
   15278:	bl	14eac <__assert_fail@plt+0x3f7c>
   1527c:	b	152f4 <__assert_fail@plt+0x43c4>
   15280:	mov	r2, #2
   15284:	mov	r0, sp
   15288:	bl	14eac <__assert_fail@plt+0x3f7c>
   1528c:	b	152f4 <__assert_fail@plt+0x43c4>
   15290:	mov	r2, #5
   15294:	mov	r0, sp
   15298:	bl	14eac <__assert_fail@plt+0x3f7c>
   1529c:	b	152f4 <__assert_fail@plt+0x43c4>
   152a0:	mov	r2, #4
   152a4:	mov	r0, sp
   152a8:	bl	14eac <__assert_fail@plt+0x3f7c>
   152ac:	b	152f4 <__assert_fail@plt+0x43c4>
   152b0:	mov	r1, #2
   152b4:	mov	r0, sp
   152b8:	bl	14d28 <__assert_fail@plt+0x3df8>
   152bc:	b	152f4 <__assert_fail@plt+0x43c4>
   152c0:	mov	r2, #8
   152c4:	mov	r0, sp
   152c8:	bl	14eac <__assert_fail@plt+0x3f7c>
   152cc:	b	152f4 <__assert_fail@plt+0x43c4>
   152d0:	mov	r2, #7
   152d4:	mov	r0, sp
   152d8:	bl	14eac <__assert_fail@plt+0x3f7c>
   152dc:	b	152f4 <__assert_fail@plt+0x43c4>
   152e0:	ldrd	r2, [sp]
   152e4:	strd	r2, [r8]
   152e8:	orr	r6, r6, #2
   152ec:	b	15318 <__assert_fail@plt+0x43e8>
   152f0:	mov	r0, #0
   152f4:	orr	r6, r6, r0
   152f8:	ldr	r3, [r4]
   152fc:	add	r2, r3, r5
   15300:	str	r2, [r4]
   15304:	ldrb	r3, [r3, r5]
   15308:	cmp	r3, #0
   1530c:	orrne	r6, r6, #2
   15310:	ldrd	r2, [sp]
   15314:	strd	r2, [r8]
   15318:	mov	r0, r6
   1531c:	add	sp, sp, #16
   15320:	pop	{r4, r5, r6, r7, r8, pc}
   15324:	andeq	r6, r1, ip, lsl r9
   15328:	andeq	r6, r1, r8, lsr #18
   1532c:	andeq	r6, r1, r8, lsr r9
   15330:	push	{r4, lr}
   15334:	mov	r2, r0
   15338:	mov	r3, r1
   1533c:	cmp	r1, #0
   15340:	cmpne	r0, #0
   15344:	moveq	r3, #1
   15348:	moveq	r2, r3
   1534c:	umull	r0, r1, r2, r3
   15350:	cmp	r0, #0
   15354:	cmpge	r1, #0
   15358:	bne	1536c <__assert_fail@plt+0x443c>
   1535c:	mov	r1, r3
   15360:	mov	r0, r2
   15364:	bl	10cc0 <calloc@plt>
   15368:	pop	{r4, pc}
   1536c:	bl	10e4c <__errno_location@plt>
   15370:	mov	r3, #12
   15374:	str	r3, [r0]
   15378:	mov	r0, #0
   1537c:	pop	{r4, pc}
   15380:	push	{r4, lr}
   15384:	cmp	r0, #0
   15388:	moveq	r0, #1
   1538c:	cmp	r0, #0
   15390:	blt	1539c <__assert_fail@plt+0x446c>
   15394:	bl	10de0 <malloc@plt>
   15398:	pop	{r4, pc}
   1539c:	bl	10e4c <__errno_location@plt>
   153a0:	mov	r3, #12
   153a4:	str	r3, [r0]
   153a8:	mov	r0, #0
   153ac:	pop	{r4, pc}
   153b0:	push	{r4, lr}
   153b4:	cmp	r0, #0
   153b8:	beq	153d4 <__assert_fail@plt+0x44a4>
   153bc:	cmp	r1, #0
   153c0:	beq	153e0 <__assert_fail@plt+0x44b0>
   153c4:	cmp	r1, #0
   153c8:	blt	153ec <__assert_fail@plt+0x44bc>
   153cc:	bl	10d74 <realloc@plt>
   153d0:	pop	{r4, pc}
   153d4:	mov	r0, r1
   153d8:	bl	15380 <__assert_fail@plt+0x4450>
   153dc:	pop	{r4, pc}
   153e0:	bl	1255c <__assert_fail@plt+0x162c>
   153e4:	mov	r0, #0
   153e8:	pop	{r4, pc}
   153ec:	bl	10e4c <__errno_location@plt>
   153f0:	mov	r3, #12
   153f4:	str	r3, [r0]
   153f8:	mov	r0, #0
   153fc:	pop	{r4, pc}
   15400:	push	{r4, r5, r6, lr}
   15404:	mov	r5, r0
   15408:	bl	10dbc <__fpending@plt>
   1540c:	mov	r6, r0
   15410:	ldr	r4, [r5]
   15414:	and	r4, r4, #32
   15418:	mov	r0, r5
   1541c:	bl	12450 <__assert_fail@plt+0x1520>
   15420:	cmp	r4, #0
   15424:	bne	1544c <__assert_fail@plt+0x451c>
   15428:	cmp	r0, #0
   1542c:	popeq	{r4, r5, r6, pc}
   15430:	cmp	r6, #0
   15434:	bne	15468 <__assert_fail@plt+0x4538>
   15438:	bl	10e4c <__errno_location@plt>
   1543c:	ldr	r0, [r0]
   15440:	subs	r0, r0, #9
   15444:	mvnne	r0, #0
   15448:	pop	{r4, r5, r6, pc}
   1544c:	cmp	r0, #0
   15450:	bne	15470 <__assert_fail@plt+0x4540>
   15454:	bl	10e4c <__errno_location@plt>
   15458:	mov	r3, #0
   1545c:	str	r3, [r0]
   15460:	mvn	r0, #0
   15464:	pop	{r4, r5, r6, pc}
   15468:	mvn	r0, #0
   1546c:	pop	{r4, r5, r6, pc}
   15470:	mvn	r0, #0
   15474:	pop	{r4, r5, r6, pc}
   15478:	push	{r4, lr}
   1547c:	mov	r0, #14
   15480:	bl	10edc <nl_langinfo@plt>
   15484:	cmp	r0, #0
   15488:	beq	154a0 <__assert_fail@plt+0x4570>
   1548c:	ldrb	r2, [r0]
   15490:	ldr	r3, [pc, #16]	; 154a8 <__assert_fail@plt+0x4578>
   15494:	cmp	r2, #0
   15498:	moveq	r0, r3
   1549c:	pop	{r4, pc}
   154a0:	ldr	r0, [pc]	; 154a8 <__assert_fail@plt+0x4578>
   154a4:	pop	{r4, pc}
   154a8:	andeq	r6, r1, r0, ror #18
   154ac:	push	{r4, r5, r6, r7, lr}
   154b0:	sub	sp, sp, #12
   154b4:	mov	r7, r1
   154b8:	mov	r5, r2
   154bc:	subs	r6, r0, #0
   154c0:	addeq	r6, sp, #4
   154c4:	mov	r0, r6
   154c8:	bl	10dc8 <mbrtowc@plt>
   154cc:	mov	r4, r0
   154d0:	cmp	r5, #0
   154d4:	cmnne	r0, #3
   154d8:	bhi	154e8 <__assert_fail@plt+0x45b8>
   154dc:	mov	r0, r4
   154e0:	add	sp, sp, #12
   154e4:	pop	{r4, r5, r6, r7, pc}
   154e8:	mov	r0, #0
   154ec:	bl	15550 <__assert_fail@plt+0x4620>
   154f0:	cmp	r0, #0
   154f4:	ldrbeq	r3, [r7]
   154f8:	streq	r3, [r6]
   154fc:	moveq	r4, #1
   15500:	b	154dc <__assert_fail@plt+0x45ac>
   15504:	push	{r4, r5, r6, lr}
   15508:	mov	r6, r0
   1550c:	mov	r5, r1
   15510:	subs	r4, r2, #0
   15514:	beq	15540 <__assert_fail@plt+0x4610>
   15518:	mov	r1, r4
   1551c:	mvn	r0, #0
   15520:	bl	15658 <__assert_fail@plt+0x4728>
   15524:	cmp	r0, r5
   15528:	bcs	15540 <__assert_fail@plt+0x4610>
   1552c:	bl	10e4c <__errno_location@plt>
   15530:	mov	r3, #12
   15534:	str	r3, [r0]
   15538:	mov	r0, #0
   1553c:	pop	{r4, r5, r6, pc}
   15540:	mul	r1, r5, r4
   15544:	mov	r0, r6
   15548:	bl	153b0 <__assert_fail@plt+0x4480>
   1554c:	pop	{r4, r5, r6, pc}
   15550:	push	{lr}		; (str lr, [sp, #-4]!)
   15554:	sub	sp, sp, #268	; 0x10c
   15558:	ldr	r2, [pc, #68]	; 155a4 <__assert_fail@plt+0x4674>
   1555c:	add	r1, sp, #4
   15560:	bl	155b0 <__assert_fail@plt+0x4680>
   15564:	cmp	r0, #0
   15568:	movne	r0, #0
   1556c:	bne	1559c <__assert_fail@plt+0x466c>
   15570:	ldr	r1, [pc, #48]	; 155a8 <__assert_fail@plt+0x4678>
   15574:	add	r0, sp, #4
   15578:	bl	10ce4 <strcmp@plt>
   1557c:	cmp	r0, #0
   15580:	moveq	r0, #0
   15584:	beq	1559c <__assert_fail@plt+0x466c>
   15588:	ldr	r1, [pc, #28]	; 155ac <__assert_fail@plt+0x467c>
   1558c:	add	r0, sp, #4
   15590:	bl	10ce4 <strcmp@plt>
   15594:	adds	r0, r0, #0
   15598:	movne	r0, #1
   1559c:	add	sp, sp, #268	; 0x10c
   155a0:	pop	{pc}		; (ldr pc, [sp], #4)
   155a4:	andeq	r0, r0, r1, lsl #2
   155a8:	andeq	r6, r1, r8, ror #18
   155ac:	andeq	r6, r1, ip, ror #18
   155b0:	push	{r4, r5, r6, lr}
   155b4:	mov	r6, r1
   155b8:	mov	r4, r2
   155bc:	mov	r1, #0
   155c0:	bl	10ec4 <setlocale@plt>
   155c4:	subs	r5, r0, #0
   155c8:	beq	155ec <__assert_fail@plt+0x46bc>
   155cc:	mov	r0, r5
   155d0:	bl	10e34 <strlen@plt>
   155d4:	cmp	r4, r0
   155d8:	bhi	15604 <__assert_fail@plt+0x46d4>
   155dc:	cmp	r4, #0
   155e0:	bne	1561c <__assert_fail@plt+0x46ec>
   155e4:	mov	r0, #34	; 0x22
   155e8:	pop	{r4, r5, r6, pc}
   155ec:	cmp	r4, #0
   155f0:	beq	15640 <__assert_fail@plt+0x4710>
   155f4:	mov	r3, #0
   155f8:	strb	r3, [r6]
   155fc:	mov	r0, #22
   15600:	pop	{r4, r5, r6, pc}
   15604:	add	r2, r0, #1
   15608:	mov	r1, r5
   1560c:	mov	r0, r6
   15610:	bl	10d2c <memcpy@plt>
   15614:	mov	r0, #0
   15618:	pop	{r4, r5, r6, pc}
   1561c:	sub	r4, r4, #1
   15620:	mov	r2, r4
   15624:	mov	r1, r5
   15628:	mov	r0, r6
   1562c:	bl	10d2c <memcpy@plt>
   15630:	mov	r3, #0
   15634:	strb	r3, [r6, r4]
   15638:	mov	r0, #34	; 0x22
   1563c:	pop	{r4, r5, r6, pc}
   15640:	mov	r0, #22
   15644:	pop	{r4, r5, r6, pc}
   15648:	push	{r4, lr}
   1564c:	mov	r1, #0
   15650:	bl	10ec4 <setlocale@plt>
   15654:	pop	{r4, pc}
   15658:	subs	r2, r1, #1
   1565c:	bxeq	lr
   15660:	bcc	15838 <__assert_fail@plt+0x4908>
   15664:	cmp	r0, r1
   15668:	bls	1581c <__assert_fail@plt+0x48ec>
   1566c:	tst	r1, r2
   15670:	beq	15828 <__assert_fail@plt+0x48f8>
   15674:	clz	r3, r0
   15678:	clz	r2, r1
   1567c:	sub	r3, r2, r3
   15680:	rsbs	r3, r3, #31
   15684:	addne	r3, r3, r3, lsl #1
   15688:	mov	r2, #0
   1568c:	addne	pc, pc, r3, lsl #2
   15690:	nop			; (mov r0, r0)
   15694:	cmp	r0, r1, lsl #31
   15698:	adc	r2, r2, r2
   1569c:	subcs	r0, r0, r1, lsl #31
   156a0:	cmp	r0, r1, lsl #30
   156a4:	adc	r2, r2, r2
   156a8:	subcs	r0, r0, r1, lsl #30
   156ac:	cmp	r0, r1, lsl #29
   156b0:	adc	r2, r2, r2
   156b4:	subcs	r0, r0, r1, lsl #29
   156b8:	cmp	r0, r1, lsl #28
   156bc:	adc	r2, r2, r2
   156c0:	subcs	r0, r0, r1, lsl #28
   156c4:	cmp	r0, r1, lsl #27
   156c8:	adc	r2, r2, r2
   156cc:	subcs	r0, r0, r1, lsl #27
   156d0:	cmp	r0, r1, lsl #26
   156d4:	adc	r2, r2, r2
   156d8:	subcs	r0, r0, r1, lsl #26
   156dc:	cmp	r0, r1, lsl #25
   156e0:	adc	r2, r2, r2
   156e4:	subcs	r0, r0, r1, lsl #25
   156e8:	cmp	r0, r1, lsl #24
   156ec:	adc	r2, r2, r2
   156f0:	subcs	r0, r0, r1, lsl #24
   156f4:	cmp	r0, r1, lsl #23
   156f8:	adc	r2, r2, r2
   156fc:	subcs	r0, r0, r1, lsl #23
   15700:	cmp	r0, r1, lsl #22
   15704:	adc	r2, r2, r2
   15708:	subcs	r0, r0, r1, lsl #22
   1570c:	cmp	r0, r1, lsl #21
   15710:	adc	r2, r2, r2
   15714:	subcs	r0, r0, r1, lsl #21
   15718:	cmp	r0, r1, lsl #20
   1571c:	adc	r2, r2, r2
   15720:	subcs	r0, r0, r1, lsl #20
   15724:	cmp	r0, r1, lsl #19
   15728:	adc	r2, r2, r2
   1572c:	subcs	r0, r0, r1, lsl #19
   15730:	cmp	r0, r1, lsl #18
   15734:	adc	r2, r2, r2
   15738:	subcs	r0, r0, r1, lsl #18
   1573c:	cmp	r0, r1, lsl #17
   15740:	adc	r2, r2, r2
   15744:	subcs	r0, r0, r1, lsl #17
   15748:	cmp	r0, r1, lsl #16
   1574c:	adc	r2, r2, r2
   15750:	subcs	r0, r0, r1, lsl #16
   15754:	cmp	r0, r1, lsl #15
   15758:	adc	r2, r2, r2
   1575c:	subcs	r0, r0, r1, lsl #15
   15760:	cmp	r0, r1, lsl #14
   15764:	adc	r2, r2, r2
   15768:	subcs	r0, r0, r1, lsl #14
   1576c:	cmp	r0, r1, lsl #13
   15770:	adc	r2, r2, r2
   15774:	subcs	r0, r0, r1, lsl #13
   15778:	cmp	r0, r1, lsl #12
   1577c:	adc	r2, r2, r2
   15780:	subcs	r0, r0, r1, lsl #12
   15784:	cmp	r0, r1, lsl #11
   15788:	adc	r2, r2, r2
   1578c:	subcs	r0, r0, r1, lsl #11
   15790:	cmp	r0, r1, lsl #10
   15794:	adc	r2, r2, r2
   15798:	subcs	r0, r0, r1, lsl #10
   1579c:	cmp	r0, r1, lsl #9
   157a0:	adc	r2, r2, r2
   157a4:	subcs	r0, r0, r1, lsl #9
   157a8:	cmp	r0, r1, lsl #8
   157ac:	adc	r2, r2, r2
   157b0:	subcs	r0, r0, r1, lsl #8
   157b4:	cmp	r0, r1, lsl #7
   157b8:	adc	r2, r2, r2
   157bc:	subcs	r0, r0, r1, lsl #7
   157c0:	cmp	r0, r1, lsl #6
   157c4:	adc	r2, r2, r2
   157c8:	subcs	r0, r0, r1, lsl #6
   157cc:	cmp	r0, r1, lsl #5
   157d0:	adc	r2, r2, r2
   157d4:	subcs	r0, r0, r1, lsl #5
   157d8:	cmp	r0, r1, lsl #4
   157dc:	adc	r2, r2, r2
   157e0:	subcs	r0, r0, r1, lsl #4
   157e4:	cmp	r0, r1, lsl #3
   157e8:	adc	r2, r2, r2
   157ec:	subcs	r0, r0, r1, lsl #3
   157f0:	cmp	r0, r1, lsl #2
   157f4:	adc	r2, r2, r2
   157f8:	subcs	r0, r0, r1, lsl #2
   157fc:	cmp	r0, r1, lsl #1
   15800:	adc	r2, r2, r2
   15804:	subcs	r0, r0, r1, lsl #1
   15808:	cmp	r0, r1
   1580c:	adc	r2, r2, r2
   15810:	subcs	r0, r0, r1
   15814:	mov	r0, r2
   15818:	bx	lr
   1581c:	moveq	r0, #1
   15820:	movne	r0, #0
   15824:	bx	lr
   15828:	clz	r2, r1
   1582c:	rsb	r2, r2, #31
   15830:	lsr	r0, r0, r2
   15834:	bx	lr
   15838:	cmp	r0, #0
   1583c:	mvnne	r0, #0
   15840:	b	15b78 <__assert_fail@plt+0x4c48>
   15844:	cmp	r1, #0
   15848:	beq	15838 <__assert_fail@plt+0x4908>
   1584c:	push	{r0, r1, lr}
   15850:	bl	15658 <__assert_fail@plt+0x4728>
   15854:	pop	{r1, r2, lr}
   15858:	mul	r3, r2, r0
   1585c:	sub	r1, r1, r3
   15860:	bx	lr
   15864:	cmp	r1, #0
   15868:	beq	15a74 <__assert_fail@plt+0x4b44>
   1586c:	eor	ip, r0, r1
   15870:	rsbmi	r1, r1, #0
   15874:	subs	r2, r1, #1
   15878:	beq	15a40 <__assert_fail@plt+0x4b10>
   1587c:	movs	r3, r0
   15880:	rsbmi	r3, r0, #0
   15884:	cmp	r3, r1
   15888:	bls	15a4c <__assert_fail@plt+0x4b1c>
   1588c:	tst	r1, r2
   15890:	beq	15a5c <__assert_fail@plt+0x4b2c>
   15894:	clz	r2, r3
   15898:	clz	r0, r1
   1589c:	sub	r2, r0, r2
   158a0:	rsbs	r2, r2, #31
   158a4:	addne	r2, r2, r2, lsl #1
   158a8:	mov	r0, #0
   158ac:	addne	pc, pc, r2, lsl #2
   158b0:	nop			; (mov r0, r0)
   158b4:	cmp	r3, r1, lsl #31
   158b8:	adc	r0, r0, r0
   158bc:	subcs	r3, r3, r1, lsl #31
   158c0:	cmp	r3, r1, lsl #30
   158c4:	adc	r0, r0, r0
   158c8:	subcs	r3, r3, r1, lsl #30
   158cc:	cmp	r3, r1, lsl #29
   158d0:	adc	r0, r0, r0
   158d4:	subcs	r3, r3, r1, lsl #29
   158d8:	cmp	r3, r1, lsl #28
   158dc:	adc	r0, r0, r0
   158e0:	subcs	r3, r3, r1, lsl #28
   158e4:	cmp	r3, r1, lsl #27
   158e8:	adc	r0, r0, r0
   158ec:	subcs	r3, r3, r1, lsl #27
   158f0:	cmp	r3, r1, lsl #26
   158f4:	adc	r0, r0, r0
   158f8:	subcs	r3, r3, r1, lsl #26
   158fc:	cmp	r3, r1, lsl #25
   15900:	adc	r0, r0, r0
   15904:	subcs	r3, r3, r1, lsl #25
   15908:	cmp	r3, r1, lsl #24
   1590c:	adc	r0, r0, r0
   15910:	subcs	r3, r3, r1, lsl #24
   15914:	cmp	r3, r1, lsl #23
   15918:	adc	r0, r0, r0
   1591c:	subcs	r3, r3, r1, lsl #23
   15920:	cmp	r3, r1, lsl #22
   15924:	adc	r0, r0, r0
   15928:	subcs	r3, r3, r1, lsl #22
   1592c:	cmp	r3, r1, lsl #21
   15930:	adc	r0, r0, r0
   15934:	subcs	r3, r3, r1, lsl #21
   15938:	cmp	r3, r1, lsl #20
   1593c:	adc	r0, r0, r0
   15940:	subcs	r3, r3, r1, lsl #20
   15944:	cmp	r3, r1, lsl #19
   15948:	adc	r0, r0, r0
   1594c:	subcs	r3, r3, r1, lsl #19
   15950:	cmp	r3, r1, lsl #18
   15954:	adc	r0, r0, r0
   15958:	subcs	r3, r3, r1, lsl #18
   1595c:	cmp	r3, r1, lsl #17
   15960:	adc	r0, r0, r0
   15964:	subcs	r3, r3, r1, lsl #17
   15968:	cmp	r3, r1, lsl #16
   1596c:	adc	r0, r0, r0
   15970:	subcs	r3, r3, r1, lsl #16
   15974:	cmp	r3, r1, lsl #15
   15978:	adc	r0, r0, r0
   1597c:	subcs	r3, r3, r1, lsl #15
   15980:	cmp	r3, r1, lsl #14
   15984:	adc	r0, r0, r0
   15988:	subcs	r3, r3, r1, lsl #14
   1598c:	cmp	r3, r1, lsl #13
   15990:	adc	r0, r0, r0
   15994:	subcs	r3, r3, r1, lsl #13
   15998:	cmp	r3, r1, lsl #12
   1599c:	adc	r0, r0, r0
   159a0:	subcs	r3, r3, r1, lsl #12
   159a4:	cmp	r3, r1, lsl #11
   159a8:	adc	r0, r0, r0
   159ac:	subcs	r3, r3, r1, lsl #11
   159b0:	cmp	r3, r1, lsl #10
   159b4:	adc	r0, r0, r0
   159b8:	subcs	r3, r3, r1, lsl #10
   159bc:	cmp	r3, r1, lsl #9
   159c0:	adc	r0, r0, r0
   159c4:	subcs	r3, r3, r1, lsl #9
   159c8:	cmp	r3, r1, lsl #8
   159cc:	adc	r0, r0, r0
   159d0:	subcs	r3, r3, r1, lsl #8
   159d4:	cmp	r3, r1, lsl #7
   159d8:	adc	r0, r0, r0
   159dc:	subcs	r3, r3, r1, lsl #7
   159e0:	cmp	r3, r1, lsl #6
   159e4:	adc	r0, r0, r0
   159e8:	subcs	r3, r3, r1, lsl #6
   159ec:	cmp	r3, r1, lsl #5
   159f0:	adc	r0, r0, r0
   159f4:	subcs	r3, r3, r1, lsl #5
   159f8:	cmp	r3, r1, lsl #4
   159fc:	adc	r0, r0, r0
   15a00:	subcs	r3, r3, r1, lsl #4
   15a04:	cmp	r3, r1, lsl #3
   15a08:	adc	r0, r0, r0
   15a0c:	subcs	r3, r3, r1, lsl #3
   15a10:	cmp	r3, r1, lsl #2
   15a14:	adc	r0, r0, r0
   15a18:	subcs	r3, r3, r1, lsl #2
   15a1c:	cmp	r3, r1, lsl #1
   15a20:	adc	r0, r0, r0
   15a24:	subcs	r3, r3, r1, lsl #1
   15a28:	cmp	r3, r1
   15a2c:	adc	r0, r0, r0
   15a30:	subcs	r3, r3, r1
   15a34:	cmp	ip, #0
   15a38:	rsbmi	r0, r0, #0
   15a3c:	bx	lr
   15a40:	teq	ip, r0
   15a44:	rsbmi	r0, r0, #0
   15a48:	bx	lr
   15a4c:	movcc	r0, #0
   15a50:	asreq	r0, ip, #31
   15a54:	orreq	r0, r0, #1
   15a58:	bx	lr
   15a5c:	clz	r2, r1
   15a60:	rsb	r2, r2, #31
   15a64:	cmp	ip, #0
   15a68:	lsr	r0, r3, r2
   15a6c:	rsbmi	r0, r0, #0
   15a70:	bx	lr
   15a74:	cmp	r0, #0
   15a78:	mvngt	r0, #-2147483648	; 0x80000000
   15a7c:	movlt	r0, #-2147483648	; 0x80000000
   15a80:	b	15b78 <__assert_fail@plt+0x4c48>
   15a84:	cmp	r1, #0
   15a88:	beq	15a74 <__assert_fail@plt+0x4b44>
   15a8c:	push	{r0, r1, lr}
   15a90:	bl	1586c <__assert_fail@plt+0x493c>
   15a94:	pop	{r1, r2, lr}
   15a98:	mul	r3, r2, r0
   15a9c:	sub	r1, r1, r3
   15aa0:	bx	lr
   15aa4:	cmp	r3, #0
   15aa8:	cmpeq	r2, #0
   15aac:	bne	15ad0 <__assert_fail@plt+0x4ba0>
   15ab0:	cmp	r1, #0
   15ab4:	movlt	r1, #-2147483648	; 0x80000000
   15ab8:	movlt	r0, #0
   15abc:	blt	15acc <__assert_fail@plt+0x4b9c>
   15ac0:	cmpeq	r0, #0
   15ac4:	mvnne	r1, #-2147483648	; 0x80000000
   15ac8:	mvnne	r0, #0
   15acc:	b	15b78 <__assert_fail@plt+0x4c48>
   15ad0:	sub	sp, sp, #8
   15ad4:	push	{sp, lr}
   15ad8:	cmp	r1, #0
   15adc:	blt	15afc <__assert_fail@plt+0x4bcc>
   15ae0:	cmp	r3, #0
   15ae4:	blt	15b30 <__assert_fail@plt+0x4c00>
   15ae8:	bl	15b88 <__assert_fail@plt+0x4c58>
   15aec:	ldr	lr, [sp, #4]
   15af0:	add	sp, sp, #8
   15af4:	pop	{r2, r3}
   15af8:	bx	lr
   15afc:	rsbs	r0, r0, #0
   15b00:	sbc	r1, r1, r1, lsl #1
   15b04:	cmp	r3, #0
   15b08:	blt	15b54 <__assert_fail@plt+0x4c24>
   15b0c:	bl	15b88 <__assert_fail@plt+0x4c58>
   15b10:	ldr	lr, [sp, #4]
   15b14:	add	sp, sp, #8
   15b18:	pop	{r2, r3}
   15b1c:	rsbs	r0, r0, #0
   15b20:	sbc	r1, r1, r1, lsl #1
   15b24:	rsbs	r2, r2, #0
   15b28:	sbc	r3, r3, r3, lsl #1
   15b2c:	bx	lr
   15b30:	rsbs	r2, r2, #0
   15b34:	sbc	r3, r3, r3, lsl #1
   15b38:	bl	15b88 <__assert_fail@plt+0x4c58>
   15b3c:	ldr	lr, [sp, #4]
   15b40:	add	sp, sp, #8
   15b44:	pop	{r2, r3}
   15b48:	rsbs	r0, r0, #0
   15b4c:	sbc	r1, r1, r1, lsl #1
   15b50:	bx	lr
   15b54:	rsbs	r2, r2, #0
   15b58:	sbc	r3, r3, r3, lsl #1
   15b5c:	bl	15b88 <__assert_fail@plt+0x4c58>
   15b60:	ldr	lr, [sp, #4]
   15b64:	add	sp, sp, #8
   15b68:	pop	{r2, r3}
   15b6c:	rsbs	r2, r2, #0
   15b70:	sbc	r3, r3, r3, lsl #1
   15b74:	bx	lr
   15b78:	push	{r1, lr}
   15b7c:	mov	r0, #8
   15b80:	bl	10cd8 <raise@plt>
   15b84:	pop	{r1, pc}
   15b88:	cmp	r1, r3
   15b8c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15b90:	cmpeq	r0, r2
   15b94:	mov	r4, r0
   15b98:	mov	r5, r1
   15b9c:	ldr	r9, [sp, #28]
   15ba0:	movcc	r0, #0
   15ba4:	movcc	r1, #0
   15ba8:	bcc	15ca0 <__assert_fail@plt+0x4d70>
   15bac:	cmp	r3, #0
   15bb0:	clzeq	ip, r2
   15bb4:	clzne	ip, r3
   15bb8:	addeq	ip, ip, #32
   15bbc:	cmp	r5, #0
   15bc0:	clzeq	r1, r4
   15bc4:	addeq	r1, r1, #32
   15bc8:	clzne	r1, r5
   15bcc:	sub	ip, ip, r1
   15bd0:	sub	lr, ip, #32
   15bd4:	lsl	r7, r3, ip
   15bd8:	rsb	r8, ip, #32
   15bdc:	orr	r7, r7, r2, lsl lr
   15be0:	orr	r7, r7, r2, lsr r8
   15be4:	lsl	r6, r2, ip
   15be8:	cmp	r5, r7
   15bec:	cmpeq	r4, r6
   15bf0:	movcc	r0, #0
   15bf4:	movcc	r1, #0
   15bf8:	bcc	15c14 <__assert_fail@plt+0x4ce4>
   15bfc:	mov	r3, #1
   15c00:	subs	r4, r4, r6
   15c04:	lsl	r1, r3, lr
   15c08:	lsl	r0, r3, ip
   15c0c:	orr	r1, r1, r3, lsr r8
   15c10:	sbc	r5, r5, r7
   15c14:	cmp	ip, #0
   15c18:	beq	15ca0 <__assert_fail@plt+0x4d70>
   15c1c:	lsrs	r3, r7, #1
   15c20:	rrx	r2, r6
   15c24:	mov	r6, ip
   15c28:	b	15c4c <__assert_fail@plt+0x4d1c>
   15c2c:	subs	r4, r4, r2
   15c30:	sbc	r5, r5, r3
   15c34:	adds	r4, r4, r4
   15c38:	adc	r5, r5, r5
   15c3c:	adds	r4, r4, #1
   15c40:	adc	r5, r5, #0
   15c44:	subs	r6, r6, #1
   15c48:	beq	15c68 <__assert_fail@plt+0x4d38>
   15c4c:	cmp	r5, r3
   15c50:	cmpeq	r4, r2
   15c54:	bcs	15c2c <__assert_fail@plt+0x4cfc>
   15c58:	adds	r4, r4, r4
   15c5c:	adc	r5, r5, r5
   15c60:	subs	r6, r6, #1
   15c64:	bne	15c4c <__assert_fail@plt+0x4d1c>
   15c68:	lsr	r6, r4, ip
   15c6c:	lsr	r7, r5, ip
   15c70:	orr	r6, r6, r5, lsl r8
   15c74:	adds	r2, r0, r4
   15c78:	orr	r6, r6, r5, lsr lr
   15c7c:	adc	r3, r1, r5
   15c80:	lsl	r1, r7, ip
   15c84:	orr	r1, r1, r6, lsl lr
   15c88:	lsl	r0, r6, ip
   15c8c:	orr	r1, r1, r6, lsr r8
   15c90:	subs	r0, r2, r0
   15c94:	mov	r4, r6
   15c98:	mov	r5, r7
   15c9c:	sbc	r1, r3, r1
   15ca0:	cmp	r9, #0
   15ca4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   15ca8:	strd	r4, [r9]
   15cac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15cb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15cb4:	mov	r7, r0
   15cb8:	ldr	r6, [pc, #72]	; 15d08 <__assert_fail@plt+0x4dd8>
   15cbc:	ldr	r5, [pc, #72]	; 15d0c <__assert_fail@plt+0x4ddc>
   15cc0:	add	r6, pc, r6
   15cc4:	add	r5, pc, r5
   15cc8:	sub	r6, r6, r5
   15ccc:	mov	r8, r1
   15cd0:	mov	r9, r2
   15cd4:	bl	10ca0 <calloc@plt-0x20>
   15cd8:	asrs	r6, r6, #2
   15cdc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ce0:	mov	r4, #0
   15ce4:	add	r4, r4, #1
   15ce8:	ldr	r3, [r5], #4
   15cec:	mov	r2, r9
   15cf0:	mov	r1, r8
   15cf4:	mov	r0, r7
   15cf8:	blx	r3
   15cfc:	cmp	r6, r4
   15d00:	bne	15ce4 <__assert_fail@plt+0x4db4>
   15d04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d08:	andeq	r1, r1, r8, asr #4
   15d0c:	andeq	r1, r1, r0, asr #4
   15d10:	bx	lr
   15d14:	ldr	r3, [pc, #12]	; 15d28 <__assert_fail@plt+0x4df8>
   15d18:	mov	r1, #0
   15d1c:	add	r3, pc, r3
   15d20:	ldr	r2, [r3]
   15d24:	b	10e58 <__cxa_atexit@plt>
   15d28:	andeq	r1, r1, r4, asr #7

Disassembly of section .fini:

00015d2c <.fini>:
   15d2c:	push	{r3, lr}
   15d30:	pop	{r3, pc}
