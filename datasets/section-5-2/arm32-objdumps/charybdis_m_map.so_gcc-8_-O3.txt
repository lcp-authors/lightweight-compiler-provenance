
../repos/charybdis/modules/.libs/m_map.so:     file format elf32-littlearm


Disassembly of section .init:

00000558 <_init>:
 558:	push	{r3, lr}
 55c:	bl	5e4 <call_weak_fn>
 560:	pop	{r3, pc}

Disassembly of section .plt:

00000564 <.plt>:
 564:	push	{lr}		; (str lr, [sp, #-4]!)
 568:	ldr	lr, [pc, #4]	; 574 <.plt+0x10>
 56c:	add	lr, pc, lr
 570:	ldr	pc, [lr, #8]!
 574:	.word	0x00010a8c

00000578 <__cxa_finalize@plt>:
 578:	add	ip, pc, #0, 12
 57c:	add	ip, ip, #16, 20	; 0x10000
 580:	ldr	pc, [ip, #2700]!	; 0xa8c

00000584 <__gmon_start__@plt>:
 584:	add	ip, pc, #0, 12
 588:	add	ip, ip, #16, 20	; 0x10000
 58c:	ldr	pc, [ip, #2692]!	; 0xa84

00000590 <sendto_one_numeric@plt>:
 590:	add	ip, pc, #0, 12
 594:	add	ip, ip, #16, 20	; 0x10000
 598:	ldr	pc, [ip, #2684]!	; 0xa7c

0000059c <strlen@plt>:
 59c:	add	ip, pc, #0, 12
 5a0:	add	ip, ip, #16, 20	; 0x10000
 5a4:	ldr	pc, [ip, #2676]!	; 0xa74

000005a8 <snprintf@plt>:
 5a8:	add	ip, pc, #0, 12
 5ac:	add	ip, ip, #16, 20	; 0x10000
 5b0:	ldr	pc, [ip, #2668]!	; 0xa6c

000005b4 <memset@plt>:
 5b4:	add	ip, pc, #0, 12
 5b8:	add	ip, ip, #16, 20	; 0x10000
 5bc:	ldr	pc, [ip, #2660]!	; 0xa64

000005c0 <scache_send_missing@plt>:
 5c0:	add	ip, pc, #0, 12
 5c4:	add	ip, ip, #16, 20	; 0x10000
 5c8:	ldr	pc, [ip, #2652]!	; 0xa5c

000005cc <rb_strlcpy@plt>:
 5cc:	add	ip, pc, #0, 12
 5d0:	add	ip, ip, #16, 20	; 0x10000
 5d4:	ldr	pc, [ip, #2644]!	; 0xa54

000005d8 <rb_strlcat@plt>:
 5d8:	add	ip, pc, #0, 12
 5dc:	add	ip, ip, #16, 20	; 0x10000
 5e0:	ldr	pc, [ip, #2636]!	; 0xa4c

Disassembly of section .text:

000005e4 <call_weak_fn>:
 5e4:	ldr	r3, [pc, #20]	; 600 <call_weak_fn+0x1c>
 5e8:	ldr	r2, [pc, #20]	; 604 <call_weak_fn+0x20>
 5ec:	add	r3, pc, r3
 5f0:	ldr	r2, [r3, r2]
 5f4:	cmp	r2, #0
 5f8:	bxeq	lr
 5fc:	b	584 <__gmon_start__@plt>
 600:	.word	0x00010a0c
 604:	.word	0x00000044

00000608 <deregister_tm_clones>:
 608:	ldr	r0, [pc, #44]	; 63c <deregister_tm_clones+0x34>
 60c:	ldr	r3, [pc, #44]	; 640 <deregister_tm_clones+0x38>
 610:	add	r0, pc, r0
 614:	add	r3, pc, r3
 618:	cmp	r3, r0
 61c:	ldr	r3, [pc, #32]	; 644 <deregister_tm_clones+0x3c>
 620:	add	r3, pc, r3
 624:	bxeq	lr
 628:	ldr	r2, [pc, #24]	; 648 <deregister_tm_clones+0x40>
 62c:	ldr	r3, [r3, r2]
 630:	cmp	r3, #0
 634:	bxeq	lr
 638:	bx	r3
 63c:	.word	0x00010ab4
 640:	.word	0x00010ab0
 644:	.word	0x000109d8
 648:	.word	0x00000038

0000064c <register_tm_clones>:
 64c:	ldr	r0, [pc, #56]	; 68c <register_tm_clones+0x40>
 650:	ldr	r3, [pc, #56]	; 690 <register_tm_clones+0x44>
 654:	add	r0, pc, r0
 658:	add	r3, pc, r3
 65c:	sub	r1, r3, r0
 660:	ldr	r3, [pc, #44]	; 694 <register_tm_clones+0x48>
 664:	asr	r1, r1, #2
 668:	add	r3, pc, r3
 66c:	add	r1, r1, r1, lsr #31
 670:	asrs	r1, r1, #1
 674:	bxeq	lr
 678:	ldr	r2, [pc, #24]	; 698 <register_tm_clones+0x4c>
 67c:	ldr	r3, [r3, r2]
 680:	cmp	r3, #0
 684:	bxeq	lr
 688:	bx	r3
 68c:	.word	0x00010a70
 690:	.word	0x00010a6c
 694:	.word	0x00010990
 698:	.word	0x00000048

0000069c <__do_global_dtors_aux>:
 69c:	ldr	r3, [pc, #76]	; 6f0 <__do_global_dtors_aux+0x54>
 6a0:	ldr	r2, [pc, #76]	; 6f4 <__do_global_dtors_aux+0x58>
 6a4:	add	r3, pc, r3
 6a8:	add	r2, pc, r2
 6ac:	ldrb	r3, [r3]
 6b0:	cmp	r3, #0
 6b4:	bxne	lr
 6b8:	ldr	r3, [pc, #56]	; 6f8 <__do_global_dtors_aux+0x5c>
 6bc:	push	{r4, lr}
 6c0:	ldr	r3, [r2, r3]
 6c4:	cmp	r3, #0
 6c8:	beq	6d8 <__do_global_dtors_aux+0x3c>
 6cc:	ldr	r3, [pc, #40]	; 6fc <__do_global_dtors_aux+0x60>
 6d0:	ldr	r0, [pc, r3]
 6d4:	bl	578 <__cxa_finalize@plt>
 6d8:	bl	608 <deregister_tm_clones>
 6dc:	ldr	r3, [pc, #28]	; 700 <__do_global_dtors_aux+0x64>
 6e0:	mov	r2, #1
 6e4:	add	r3, pc, r3
 6e8:	strb	r2, [r3]
 6ec:	pop	{r4, pc}
 6f0:	.word	0x00010a20
 6f4:	.word	0x00010950
 6f8:	.word	0x00000034
 6fc:	.word	0x0001097c
 700:	.word	0x000109e0

00000704 <frame_dummy>:
 704:	b	64c <register_tm_clones>

00000708 <dump_map>:
 708:	mov	r3, #0
 70c:	strd	r4, [sp, #-36]!	; 0xffffffdc
 710:	mov	r5, r2
 714:	strd	r6, [sp, #8]
 718:	mov	r7, r1
 71c:	mov	r6, r0
 720:	add	r1, r1, #88	; 0x58
 724:	mov	r0, r2
 728:	strd	r8, [sp, #16]
 72c:	strd	sl, [sp, #24]
 730:	str	lr, [sp, #32]
 734:	sub	sp, sp, #12
 738:	strb	r3, [r2]
 73c:	mov	r2, #512	; 0x200
 740:	bl	5d8 <rb_strlcat@plt>
 744:	ldrb	r3, [r7, #396]	; 0x18c
 748:	ldr	r4, [pc, #476]	; 92c <dump_map+0x224>
 74c:	cmp	r3, #0
 750:	add	r4, pc, r4
 754:	bne	8f0 <dump_map+0x1e8>
 758:	ldr	r8, [pc, #464]	; 930 <dump_map+0x228>
 75c:	add	r8, pc, r8
 760:	mov	r0, r8
 764:	bl	59c <strlen@plt>
 768:	mov	r3, #32
 76c:	cmp	r0, #49	; 0x31
 770:	strb	r3, [r8, r0]
 774:	bhi	794 <dump_map+0x8c>
 778:	add	r3, r0, #1
 77c:	cmp	r3, #50	; 0x32
 780:	beq	794 <dump_map+0x8c>
 784:	rsb	r2, r0, #49	; 0x31
 788:	mov	r1, #45	; 0x2d
 78c:	add	r0, r8, r3
 790:	bl	5b4 <memset@plt>
 794:	ldr	r3, [pc, #408]	; 934 <dump_map+0x22c>
 798:	mov	r0, #1000	; 0x3e8
 79c:	movw	lr, #26215	; 0x6667
 7a0:	movt	lr, #26214	; 0x6666
 7a4:	movw	r1, #462	; 0x1ce
 7a8:	ldr	r2, [r7, #28]
 7ac:	ldr	r9, [pc, #388]	; 938 <dump_map+0x230>
 7b0:	ldr	r3, [r4, r3]
 7b4:	ldr	r2, [r2, #56]	; 0x38
 7b8:	add	r9, pc, r9
 7bc:	ldr	r4, [r3, #4]
 7c0:	mov	r3, r2
 7c4:	add	ip, r4, r4, lsr #31
 7c8:	asr	ip, ip, #1
 7cc:	mla	ip, r0, r2, ip
 7d0:	ldr	r2, [pc, #356]	; 93c <dump_map+0x234>
 7d4:	add	r0, r9, #50	; 0x32
 7d8:	udiv	ip, ip, r4
 7dc:	add	r2, pc, r2
 7e0:	smull	lr, r4, lr, ip
 7e4:	asr	lr, ip, #31
 7e8:	rsb	lr, lr, r4, asr #2
 7ec:	add	r4, lr, lr, lsl #2
 7f0:	str	lr, [sp]
 7f4:	sub	ip, ip, r4, lsl #1
 7f8:	str	ip, [sp, #4]
 7fc:	bl	5a8 <snprintf@plt>
 800:	ldr	r2, [pc, #312]	; 940 <dump_map+0x238>
 804:	mov	r3, r9
 808:	mov	r1, #15
 80c:	mov	r0, r6
 810:	add	r2, pc, r2
 814:	bl	590 <sendto_one_numeric@plt>
 818:	ldr	r3, [r7, #28]
 81c:	ldr	r4, [r3, #36]	; 0x24
 820:	cmp	r4, #0
 824:	beq	87c <dump_map+0x174>
 828:	ldr	r8, [r3, #44]	; 0x2c
 82c:	cmp	r8, #0
 830:	bne	8bc <dump_map+0x1b4>
 834:	add	r7, r5, #4
 838:	mov	fp, #1
 83c:	mov	sl, #32
 840:	movw	r9, #8237	; 0x202d
 844:	cmp	fp, r8
 848:	mov	ip, #124	; 0x7c
 84c:	ldr	r1, [r4]
 850:	mov	r2, r7
 854:	mov	r0, r6
 858:	strb	sl, [r5]
 85c:	bge	898 <dump_map+0x190>
 860:	strb	ip, [r5, #1]
 864:	add	fp, fp, #1
 868:	strh	r9, [r5, #2]
 86c:	bl	708 <dump_map>
 870:	ldr	r4, [r4, #8]
 874:	cmp	r4, #0
 878:	bne	844 <dump_map+0x13c>
 87c:	add	sp, sp, #12
 880:	ldrd	r4, [sp]
 884:	ldrd	r6, [sp, #8]
 888:	ldrd	r8, [sp, #16]
 88c:	ldrd	sl, [sp, #24]
 890:	add	sp, sp, #32
 894:	pop	{pc}		; (ldr pc, [sp], #4)
 898:	mov	r3, #96	; 0x60
 89c:	add	fp, fp, #1
 8a0:	strb	r3, [r5, #1]
 8a4:	strh	r9, [r5, #2]
 8a8:	bl	708 <dump_map>
 8ac:	ldr	r4, [r4, #8]
 8b0:	cmp	r4, #0
 8b4:	bne	844 <dump_map+0x13c>
 8b8:	b	87c <dump_map+0x174>
 8bc:	add	r9, r9, #3
 8c0:	cmp	r5, r9
 8c4:	bls	834 <dump_map+0x12c>
 8c8:	ldrb	r2, [r5, #-3]
 8cc:	mov	r3, #32
 8d0:	strb	r3, [r5, #-2]
 8d4:	cmp	r2, #96	; 0x60
 8d8:	strbeq	r3, [r5, #-3]
 8dc:	ldr	r3, [r7, #28]
 8e0:	ldr	r4, [r3, #36]	; 0x24
 8e4:	cmp	r4, #0
 8e8:	bne	834 <dump_map+0x12c>
 8ec:	b	87c <dump_map+0x174>
 8f0:	ldr	r1, [pc, #76]	; 944 <dump_map+0x23c>
 8f4:	mov	r2, #512	; 0x200
 8f8:	mov	r0, r5
 8fc:	add	r1, pc, r1
 900:	bl	5d8 <rb_strlcat@plt>
 904:	add	r1, r7, #396	; 0x18c
 908:	mov	r2, #512	; 0x200
 90c:	mov	r0, r5
 910:	bl	5d8 <rb_strlcat@plt>
 914:	ldr	r1, [pc, #44]	; 948 <dump_map+0x240>
 918:	mov	r2, #512	; 0x200
 91c:	mov	r0, r5
 920:	add	r1, pc, r1
 924:	bl	5d8 <rb_strlcat@plt>
 928:	b	758 <dump_map+0x50>
 92c:	.word	0x000108a8
 930:	.word	0x0001096c
 934:	.word	0x0000003c
 938:	.word	0x00010910
 93c:	.word	0x0000055c
 940:	.word	0x00000544
 944:	.word	0x00000434
 948:	.word	0x00000414

0000094c <mo_map>:
 94c:	ldr	r3, [pc, #76]	; 9a0 <mo_map+0x54>
 950:	mov	r0, r1
 954:	str	r4, [sp, #-8]!
 958:	mov	r4, r1
 95c:	ldr	r2, [pc, #64]	; 9a4 <mo_map+0x58>
 960:	str	lr, [sp, #4]
 964:	ldr	r1, [pc, #60]	; 9a8 <mo_map+0x5c>
 968:	add	r3, pc, r3
 96c:	add	r2, pc, r2
 970:	ldr	r1, [r3, r1]
 974:	bl	708 <dump_map>
 978:	mov	r0, r4
 97c:	bl	5c0 <scache_send_missing@plt>
 980:	ldr	r2, [pc, #36]	; 9ac <mo_map+0x60>
 984:	mov	r0, r4
 988:	mov	r1, #17
 98c:	ldr	r4, [sp]
 990:	ldr	lr, [sp, #4]
 994:	add	sp, sp, #8
 998:	add	r2, pc, r2
 99c:	b	590 <sendto_one_numeric@plt>
 9a0:	.word	0x00010690
 9a4:	.word	0x0001075c
 9a8:	.word	0x0000004c
 9ac:	.word	0x000003c0

000009b0 <flattened_map>:
 9b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
 9b4:	mov	r2, #512	; 0x200
 9b8:	strd	r6, [sp, #8]
 9bc:	ldr	r7, [pc, #580]	; c08 <flattened_map+0x258>
 9c0:	strd	r8, [sp, #16]
 9c4:	mov	r8, r0
 9c8:	ldr	r3, [pc, #572]	; c0c <flattened_map+0x25c>
 9cc:	strd	sl, [sp, #24]
 9d0:	str	lr, [sp, #32]
 9d4:	add	r7, pc, r7
 9d8:	vpush	{d8}
 9dc:	sub	sp, sp, #540	; 0x21c
 9e0:	add	r5, sp, #24
 9e4:	ldr	r4, [r7, r3]
 9e8:	mov	r0, r5
 9ec:	add	r1, r4, #88	; 0x58
 9f0:	bl	5cc <rb_strlcpy@plt>
 9f4:	mov	r0, r5
 9f8:	bl	59c <strlen@plt>
 9fc:	add	r3, sp, #536	; 0x218
 a00:	mov	r2, #32
 a04:	add	r3, r3, r0
 a08:	cmp	r0, #49	; 0x31
 a0c:	strb	r2, [r3, #-512]	; 0xfffffe00
 a10:	bhi	a30 <flattened_map+0x80>
 a14:	add	r3, r0, #1
 a18:	cmp	r3, #50	; 0x32
 a1c:	beq	a30 <flattened_map+0x80>
 a20:	rsb	r2, r0, #49	; 0x31
 a24:	mov	r1, #45	; 0x2d
 a28:	add	r0, r5, r3
 a2c:	bl	5b4 <memset@plt>
 a30:	ldr	r3, [r4, #28]
 a34:	movw	r1, #462	; 0x1ce
 a38:	add	r0, r5, #50	; 0x32
 a3c:	ldr	r2, [pc, #460]	; c10 <flattened_map+0x260>
 a40:	vldr	s16, [pc, #444]	; c04 <flattened_map+0x254>
 a44:	ldr	r3, [r3, #56]	; 0x38
 a48:	ldr	sl, [r7, r2]
 a4c:	ldr	r2, [pc, #448]	; c14 <flattened_map+0x264>
 a50:	vmov	s15, r3
 a54:	add	r2, pc, r2
 a58:	vcvt.f32.u32	s15, s15
 a5c:	vmul.f32	s13, s15, s16
 a60:	vldr	s15, [sl, #4]
 a64:	vcvt.f32.s32	s15, s15
 a68:	vdiv.f32	s14, s13, s15
 a6c:	vcvt.f64.f32	d7, s14
 a70:	vstr	d7, [sp]
 a74:	bl	5a8 <snprintf@plt>
 a78:	ldr	r2, [pc, #408]	; c18 <flattened_map+0x268>
 a7c:	mov	r3, r5
 a80:	mov	r1, #15
 a84:	mov	r0, r8
 a88:	add	r2, pc, r2
 a8c:	bl	590 <sendto_one_numeric@plt>
 a90:	ldr	r3, [pc, #388]	; c1c <flattened_map+0x26c>
 a94:	ldr	r9, [r7, r3]
 a98:	ldr	r4, [r9]
 a9c:	cmp	r4, #0
 aa0:	beq	be4 <flattened_map+0x234>
 aa4:	ldr	r3, [pc, #372]	; c20 <flattened_map+0x270>
 aa8:	mov	r6, #0
 aac:	add	r3, pc, r3
 ab0:	str	r3, [sp, #16]
 ab4:	ldr	r3, [pc, #360]	; c24 <flattened_map+0x274>
 ab8:	add	r3, pc, r3
 abc:	str	r3, [sp, #20]
 ac0:	b	b5c <flattened_map+0x1ac>
 ac4:	ldr	r1, [pc, #348]	; c28 <flattened_map+0x278>
 ac8:	mov	r0, r5
 acc:	add	r1, pc, r1
 ad0:	bl	5cc <rb_strlcpy@plt>
 ad4:	mov	r2, #512	; 0x200
 ad8:	add	r1, fp, #88	; 0x58
 adc:	mov	r0, r5
 ae0:	bl	5d8 <rb_strlcat@plt>
 ae4:	mov	r0, r5
 ae8:	bl	59c <strlen@plt>
 aec:	add	r3, sp, #536	; 0x218
 af0:	mov	r1, #32
 af4:	add	r2, r3, r0
 af8:	cmp	r0, #49	; 0x31
 afc:	strb	r1, [r2, #-512]	; 0xfffffe00
 b00:	bls	bc4 <flattened_map+0x214>
 b04:	ldr	r3, [fp, #28]
 b08:	movw	r1, #462	; 0x1ce
 b0c:	add	r0, r5, #50	; 0x32
 b10:	vldr	s15, [sl, #4]
 b14:	ldr	r2, [sp, #16]
 b18:	ldr	r3, [r3, #56]	; 0x38
 b1c:	vcvt.f32.s32	s15, s15
 b20:	vmov	s14, r3
 b24:	vcvt.f32.u32	s14, s14
 b28:	vmul.f32	s13, s14, s16
 b2c:	vdiv.f32	s14, s13, s15
 b30:	vcvt.f64.f32	d7, s14
 b34:	vstr	d7, [sp]
 b38:	bl	5a8 <snprintf@plt>
 b3c:	mov	r3, r5
 b40:	mov	r1, #15
 b44:	ldr	r2, [sp, #20]
 b48:	mov	r0, r8
 b4c:	bl	590 <sendto_one_numeric@plt>
 b50:	ldr	r4, [r4, #8]
 b54:	cmp	r4, #0
 b58:	beq	be4 <flattened_map+0x234>
 b5c:	ldr	fp, [r4]
 b60:	add	r6, r6, #1
 b64:	ldrh	r2, [fp, #80]	; 0x50
 b68:	cmp	r2, #4
 b6c:	beq	b50 <flattened_map+0x1a0>
 b70:	ldr	r2, [pc, #180]	; c2c <flattened_map+0x27c>
 b74:	ldr	r2, [r7, r2]
 b78:	ldr	r2, [r2, #12]
 b7c:	cmp	r2, #0
 b80:	bne	ba0 <flattened_map+0x1f0>
 b84:	ldr	r1, [fp, #64]	; 0x40
 b88:	str	r2, [sp, #12]
 b8c:	and	r3, r1, #2048	; 0x800
 b90:	str	r3, [sp, #8]
 b94:	ldrd	r2, [sp, #8]
 b98:	orrs	r3, r2, r3
 b9c:	bne	b50 <flattened_map+0x1a0>
 ba0:	ldr	r2, [r9, #8]
 ba4:	cmp	r2, r6
 ba8:	mov	r2, #512	; 0x200
 bac:	bne	ac4 <flattened_map+0x114>
 bb0:	ldr	r1, [pc, #120]	; c30 <flattened_map+0x280>
 bb4:	mov	r0, r5
 bb8:	add	r1, pc, r1
 bbc:	bl	5cc <rb_strlcpy@plt>
 bc0:	b	ad4 <flattened_map+0x124>
 bc4:	add	r1, r0, #1
 bc8:	cmp	r1, #50	; 0x32
 bcc:	beq	b04 <flattened_map+0x154>
 bd0:	rsb	r2, r0, #49	; 0x31
 bd4:	add	r0, r5, r1
 bd8:	mov	r1, #45	; 0x2d
 bdc:	bl	5b4 <memset@plt>
 be0:	b	b04 <flattened_map+0x154>
 be4:	add	sp, sp, #540	; 0x21c
 be8:	vpop	{d8}
 bec:	ldrd	r4, [sp]
 bf0:	ldrd	r6, [sp, #8]
 bf4:	ldrd	r8, [sp, #16]
 bf8:	ldrd	sl, [sp, #24]
 bfc:	add	sp, sp, #32
 c00:	pop	{pc}		; (ldr pc, [sp], #4)
 c04:	.word	0x42c80000
 c08:	.word	0x00010624
 c0c:	.word	0x0000004c
 c10:	.word	0x0000003c
 c14:	.word	0x00000314
 c18:	.word	0x000002cc
 c1c:	.word	0x00000030
 c20:	.word	0x000002bc
 c24:	.word	0x0000029c
 c28:	.word	0x000002c0
 c2c:	.word	0x00000040
 c30:	.word	0x000001cc

00000c34 <m_map>:
 c34:	ldr	r0, [r2, #64]	; 0x40
 c38:	mov	r3, #0
 c3c:	str	r4, [sp, #-8]!
 c40:	mov	r4, r1
 c44:	ldr	r1, [pc, #136]	; cd4 <m_map+0xa0>
 c48:	str	lr, [sp, #4]
 c4c:	and	r2, r0, #67108864	; 0x4000000
 c50:	orrs	r3, r2, r3
 c54:	add	r1, pc, r1
 c58:	bne	c70 <m_map+0x3c>
 c5c:	ldr	r3, [pc, #116]	; cd8 <m_map+0xa4>
 c60:	ldr	r3, [r1, r3]
 c64:	ldr	r3, [r3]
 c68:	cmp	r3, #0
 c6c:	bne	c84 <m_map+0x50>
 c70:	ldr	r3, [pc, #100]	; cdc <m_map+0xa8>
 c74:	ldr	r3, [r1, r3]
 c78:	ldr	r3, [r3, #176]	; 0xb0
 c7c:	cmp	r3, #0
 c80:	beq	cac <m_map+0x78>
 c84:	mov	r0, r4
 c88:	bl	9b0 <flattened_map>
 c8c:	ldr	r2, [pc, #76]	; ce0 <m_map+0xac>
 c90:	mov	r0, r4
 c94:	add	r2, pc, r2
 c98:	mov	r1, #17
 c9c:	ldr	r4, [sp]
 ca0:	ldr	lr, [sp, #4]
 ca4:	add	sp, sp, #8
 ca8:	b	590 <sendto_one_numeric@plt>
 cac:	ldr	r3, [pc, #48]	; ce4 <m_map+0xb0>
 cb0:	mov	r0, r4
 cb4:	ldr	r2, [pc, #44]	; ce8 <m_map+0xb4>
 cb8:	ldr	r1, [r1, r3]
 cbc:	add	r2, pc, r2
 cc0:	bl	708 <dump_map>
 cc4:	ldr	r2, [pc, #32]	; cec <m_map+0xb8>
 cc8:	mov	r0, r4
 ccc:	add	r2, pc, r2
 cd0:	b	c98 <m_map+0x64>
 cd4:	.word	0x000103a4
 cd8:	.word	0x00000040
 cdc:	.word	0x00000050
 ce0:	.word	0x000000c4
 ce4:	.word	0x0000004c
 ce8:	.word	0x0001040c
 cec:	.word	0x0000008c

Disassembly of section .fini:

00000cf0 <_fini>:
 cf0:	push	{r3, lr}
 cf4:	pop	{r3, pc}
