
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010e4c <.init>:
   10e4c:	push	{r3, lr}
   10e50:	bl	11184 <__assert_fail@plt+0x48>
   10e54:	pop	{r3, pc}

Disassembly of section .plt:

00010e58 <fdopen@plt-0x14>:
   10e58:	push	{lr}		; (str lr, [sp, #-4]!)
   10e5c:	ldr	lr, [pc, #4]	; 10e68 <fdopen@plt-0x4>
   10e60:	add	lr, pc, lr
   10e64:	ldr	pc, [lr, #8]!
   10e68:	muleq	r1, r8, r1

00010e6c <fdopen@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #28, 20	; 0x1c000
   10e74:	ldr	pc, [ip, #408]!	; 0x198

00010e78 <calloc@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #28, 20	; 0x1c000
   10e80:	ldr	pc, [ip, #400]!	; 0x190

00010e84 <fputs_unlocked@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #28, 20	; 0x1c000
   10e8c:	ldr	pc, [ip, #392]!	; 0x188

00010e90 <raise@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #28, 20	; 0x1c000
   10e98:	ldr	pc, [ip, #384]!	; 0x180

00010e9c <strcmp@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #28, 20	; 0x1c000
   10ea4:	ldr	pc, [ip, #376]!	; 0x178

00010ea8 <posix_fadvise64@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #28, 20	; 0x1c000
   10eb0:	ldr	pc, [ip, #368]!	; 0x170

00010eb4 <printf@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #28, 20	; 0x1c000
   10ebc:	ldr	pc, [ip, #360]!	; 0x168

00010ec0 <fflush@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #28, 20	; 0x1c000
   10ec8:	ldr	pc, [ip, #352]!	; 0x160

00010ecc <free@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #28, 20	; 0x1c000
   10ed4:	ldr	pc, [ip, #344]!	; 0x158

00010ed8 <_exit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #28, 20	; 0x1c000
   10ee0:	ldr	pc, [ip, #336]!	; 0x150

00010ee4 <memcpy@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #28, 20	; 0x1c000
   10eec:	ldr	pc, [ip, #328]!	; 0x148

00010ef0 <mbsinit@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #28, 20	; 0x1c000
   10ef8:	ldr	pc, [ip, #320]!	; 0x140

00010efc <fwrite_unlocked@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #28, 20	; 0x1c000
   10f04:	ldr	pc, [ip, #312]!	; 0x138

00010f08 <memcmp@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #28, 20	; 0x1c000
   10f10:	ldr	pc, [ip, #304]!	; 0x130

00010f14 <fputc_unlocked@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #28, 20	; 0x1c000
   10f1c:	ldr	pc, [ip, #296]!	; 0x128

00010f20 <getc_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #28, 20	; 0x1c000
   10f28:	ldr	pc, [ip, #288]!	; 0x120

00010f2c <realloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #28, 20	; 0x1c000
   10f34:	ldr	pc, [ip, #280]!	; 0x118

00010f38 <textdomain@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #28, 20	; 0x1c000
   10f40:	ldr	pc, [ip, #272]!	; 0x110

00010f44 <iswprint@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #28, 20	; 0x1c000
   10f4c:	ldr	pc, [ip, #264]!	; 0x108

00010f50 <fwrite@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #28, 20	; 0x1c000
   10f58:	ldr	pc, [ip, #256]!	; 0x100

00010f5c <lseek64@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #28, 20	; 0x1c000
   10f64:	ldr	pc, [ip, #248]!	; 0xf8

00010f68 <__ctype_get_mb_cur_max@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #28, 20	; 0x1c000
   10f70:	ldr	pc, [ip, #240]!	; 0xf0

00010f74 <__fpending@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #28, 20	; 0x1c000
   10f7c:	ldr	pc, [ip, #232]!	; 0xe8

00010f80 <ferror_unlocked@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #28, 20	; 0x1c000
   10f88:	ldr	pc, [ip, #224]!	; 0xe0

00010f8c <mbrtowc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #28, 20	; 0x1c000
   10f94:	ldr	pc, [ip, #216]!	; 0xd8

00010f98 <error@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #28, 20	; 0x1c000
   10fa0:	ldr	pc, [ip, #208]!	; 0xd0

00010fa4 <strcoll@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #28, 20	; 0x1c000
   10fac:	ldr	pc, [ip, #200]!	; 0xc8

00010fb0 <malloc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #28, 20	; 0x1c000
   10fb8:	ldr	pc, [ip, #192]!	; 0xc0

00010fbc <__libc_start_main@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #28, 20	; 0x1c000
   10fc4:	ldr	pc, [ip, #184]!	; 0xb8

00010fc8 <__freading@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #28, 20	; 0x1c000
   10fd0:	ldr	pc, [ip, #176]!	; 0xb0

00010fd4 <__gmon_start__@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #28, 20	; 0x1c000
   10fdc:	ldr	pc, [ip, #168]!	; 0xa8

00010fe0 <getopt_long@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #28, 20	; 0x1c000
   10fe8:	ldr	pc, [ip, #160]!	; 0xa0

00010fec <__ctype_b_loc@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #28, 20	; 0x1c000
   10ff4:	ldr	pc, [ip, #152]!	; 0x98

00010ff8 <exit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #28, 20	; 0x1c000
   11000:	ldr	pc, [ip, #144]!	; 0x90

00011004 <gettext@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #28, 20	; 0x1c000
   1100c:	ldr	pc, [ip, #136]!	; 0x88

00011010 <strtoul@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #28, 20	; 0x1c000
   11018:	ldr	pc, [ip, #128]!	; 0x80

0001101c <strlen@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #28, 20	; 0x1c000
   11024:	ldr	pc, [ip, #120]!	; 0x78

00011028 <strchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #28, 20	; 0x1c000
   11030:	ldr	pc, [ip, #112]!	; 0x70

00011034 <fprintf@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #28, 20	; 0x1c000
   1103c:	ldr	pc, [ip, #104]!	; 0x68

00011040 <__errno_location@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #28, 20	; 0x1c000
   11048:	ldr	pc, [ip, #96]!	; 0x60

0001104c <__cxa_atexit@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #28, 20	; 0x1c000
   11054:	ldr	pc, [ip, #88]!	; 0x58

00011058 <memset@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #28, 20	; 0x1c000
   11060:	ldr	pc, [ip, #80]!	; 0x50

00011064 <fileno@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #28, 20	; 0x1c000
   1106c:	ldr	pc, [ip, #72]!	; 0x48

00011070 <strtoumax@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #28, 20	; 0x1c000
   11078:	ldr	pc, [ip, #64]!	; 0x40

0001107c <memchr@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #28, 20	; 0x1c000
   11084:	ldr	pc, [ip, #56]!	; 0x38

00011088 <fclose@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #28, 20	; 0x1c000
   11090:	ldr	pc, [ip, #48]!	; 0x30

00011094 <fseeko64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #28, 20	; 0x1c000
   1109c:	ldr	pc, [ip, #40]!	; 0x28

000110a0 <fcntl64@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #28, 20	; 0x1c000
   110a8:	ldr	pc, [ip, #32]!

000110ac <setlocale@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #28, 20	; 0x1c000
   110b4:	ldr	pc, [ip, #24]!

000110b8 <toupper@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #28, 20	; 0x1c000
   110c0:	ldr	pc, [ip, #16]!

000110c4 <strrchr@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #28, 20	; 0x1c000
   110cc:	ldr	pc, [ip, #8]!

000110d0 <nl_langinfo@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #28, 20	; 0x1c000
   110d8:	ldr	pc, [ip, #0]!

000110dc <fopen64@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #110592	; 0x1b000
   110e4:	ldr	pc, [ip, #4088]!	; 0xff8

000110e8 <strpbrk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #110592	; 0x1b000
   110f0:	ldr	pc, [ip, #4080]!	; 0xff0

000110f4 <bindtextdomain@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #110592	; 0x1b000
   110fc:	ldr	pc, [ip, #4072]!	; 0xfe8

00011100 <strncmp@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #110592	; 0x1b000
   11108:	ldr	pc, [ip, #4064]!	; 0xfe0

0001110c <abort@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #110592	; 0x1b000
   11114:	ldr	pc, [ip, #4056]!	; 0xfd8

00011118 <feof_unlocked@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #110592	; 0x1b000
   11120:	ldr	pc, [ip, #4048]!	; 0xfd0

00011124 <close@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #110592	; 0x1b000
   1112c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011130 <putchar_unlocked@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #110592	; 0x1b000
   11138:	ldr	pc, [ip, #4032]!	; 0xfc0

0001113c <__assert_fail@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #110592	; 0x1b000
   11144:	ldr	pc, [ip, #4024]!	; 0xfb8

Disassembly of section .text:

00011148 <.text>:
   11148:	mov	fp, #0
   1114c:	mov	lr, #0
   11150:	pop	{r1}		; (ldr r1, [sp], #4)
   11154:	mov	r2, sp
   11158:	push	{r2}		; (str r2, [sp, #-4]!)
   1115c:	push	{r0}		; (str r0, [sp, #-4]!)
   11160:	ldr	ip, [pc, #16]	; 11178 <__assert_fail@plt+0x3c>
   11164:	push	{ip}		; (str ip, [sp, #-4]!)
   11168:	ldr	r0, [pc, #12]	; 1117c <__assert_fail@plt+0x40>
   1116c:	ldr	r3, [pc, #12]	; 11180 <__assert_fail@plt+0x44>
   11170:	bl	10fbc <__libc_start_main@plt>
   11174:	bl	1110c <abort@plt>
   11178:	ldrdeq	sl, [r1], -r0
   1117c:	andeq	r3, r1, r8, lsr #7
   11180:	andeq	sl, r1, r0, ror sp
   11184:	ldr	r3, [pc, #20]	; 111a0 <__assert_fail@plt+0x64>
   11188:	ldr	r2, [pc, #20]	; 111a4 <__assert_fail@plt+0x68>
   1118c:	add	r3, pc, r3
   11190:	ldr	r2, [r3, r2]
   11194:	cmp	r2, #0
   11198:	bxeq	lr
   1119c:	b	10fd4 <__gmon_start__@plt>
   111a0:	andeq	fp, r1, ip, ror #28
   111a4:	andeq	r0, r0, r0, lsl #2
   111a8:	ldr	r3, [pc, #28]	; 111cc <__assert_fail@plt+0x90>
   111ac:	ldr	r0, [pc, #28]	; 111d0 <__assert_fail@plt+0x94>
   111b0:	sub	r3, r3, r0
   111b4:	cmp	r3, #6
   111b8:	bxls	lr
   111bc:	ldr	r3, [pc, #16]	; 111d4 <__assert_fail@plt+0x98>
   111c0:	cmp	r3, #0
   111c4:	bxeq	lr
   111c8:	bx	r3
   111cc:	andeq	sp, r2, fp, ror #2
   111d0:	andeq	sp, r2, r8, ror #2
   111d4:	andeq	r0, r0, r0
   111d8:	ldr	r1, [pc, #36]	; 11204 <__assert_fail@plt+0xc8>
   111dc:	ldr	r0, [pc, #36]	; 11208 <__assert_fail@plt+0xcc>
   111e0:	sub	r1, r1, r0
   111e4:	asr	r1, r1, #2
   111e8:	add	r1, r1, r1, lsr #31
   111ec:	asrs	r1, r1, #1
   111f0:	bxeq	lr
   111f4:	ldr	r3, [pc, #16]	; 1120c <__assert_fail@plt+0xd0>
   111f8:	cmp	r3, #0
   111fc:	bxeq	lr
   11200:	bx	r3
   11204:	andeq	sp, r2, r8, ror #2
   11208:	andeq	sp, r2, r8, ror #2
   1120c:	andeq	r0, r0, r0
   11210:	push	{r4, lr}
   11214:	ldr	r4, [pc, #24]	; 11234 <__assert_fail@plt+0xf8>
   11218:	ldrb	r3, [r4]
   1121c:	cmp	r3, #0
   11220:	popne	{r4, pc}
   11224:	bl	111a8 <__assert_fail@plt+0x6c>
   11228:	mov	r3, #1
   1122c:	strb	r3, [r4]
   11230:	pop	{r4, pc}
   11234:	andeq	sp, r2, ip, lsl #3
   11238:	ldr	r0, [pc, #40]	; 11268 <__assert_fail@plt+0x12c>
   1123c:	ldr	r3, [r0]
   11240:	cmp	r3, #0
   11244:	bne	1124c <__assert_fail@plt+0x110>
   11248:	b	111d8 <__assert_fail@plt+0x9c>
   1124c:	ldr	r3, [pc, #24]	; 1126c <__assert_fail@plt+0x130>
   11250:	cmp	r3, #0
   11254:	beq	11248 <__assert_fail@plt+0x10c>
   11258:	push	{r4, lr}
   1125c:	blx	r3
   11260:	pop	{r4, lr}
   11264:	b	111d8 <__assert_fail@plt+0x9c>
   11268:	andeq	ip, r2, r4, lsl pc
   1126c:	andeq	r0, r0, r0
   11270:	push	{fp, lr}
   11274:	add	fp, sp, #4
   11278:	sub	sp, sp, #8
   1127c:	mov	r3, r0
   11280:	strb	r3, [fp, #-5]
   11284:	bl	10fec <__ctype_b_loc@plt>
   11288:	mov	r3, r0
   1128c:	ldr	r2, [r3]
   11290:	ldrb	r3, [fp, #-5]
   11294:	lsl	r3, r3, #1
   11298:	add	r3, r2, r3
   1129c:	ldrh	r3, [r3]
   112a0:	and	r3, r3, #1
   112a4:	cmp	r3, #0
   112a8:	bne	112b8 <__assert_fail@plt+0x17c>
   112ac:	ldrb	r3, [fp, #-5]
   112b0:	cmp	r3, #10
   112b4:	bne	112c0 <__assert_fail@plt+0x184>
   112b8:	mov	r3, #1
   112bc:	b	112c4 <__assert_fail@plt+0x188>
   112c0:	mov	r3, #0
   112c4:	and	r3, r3, #1
   112c8:	uxtb	r3, r3
   112cc:	mov	r0, r3
   112d0:	sub	sp, fp, #4
   112d4:	pop	{fp, pc}
   112d8:	push	{fp, lr}
   112dc:	add	fp, sp, #4
   112e0:	sub	sp, sp, #80	; 0x50
   112e4:	str	r0, [fp, #-80]	; 0xffffffb0
   112e8:	ldr	r3, [pc, #348]	; 1144c <__assert_fail@plt+0x310>
   112ec:	sub	ip, fp, #72	; 0x48
   112f0:	mov	lr, r3
   112f4:	ldm	lr!, {r0, r1, r2, r3}
   112f8:	stmia	ip!, {r0, r1, r2, r3}
   112fc:	ldm	lr!, {r0, r1, r2, r3}
   11300:	stmia	ip!, {r0, r1, r2, r3}
   11304:	ldm	lr!, {r0, r1, r2, r3}
   11308:	stmia	ip!, {r0, r1, r2, r3}
   1130c:	ldm	lr, {r0, r1}
   11310:	stm	ip, {r0, r1}
   11314:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11318:	str	r3, [fp, #-8]
   1131c:	sub	r3, fp, #72	; 0x48
   11320:	str	r3, [fp, #-12]
   11324:	b	11334 <__assert_fail@plt+0x1f8>
   11328:	ldr	r3, [fp, #-12]
   1132c:	add	r3, r3, #8
   11330:	str	r3, [fp, #-12]
   11334:	ldr	r3, [fp, #-12]
   11338:	ldr	r3, [r3]
   1133c:	cmp	r3, #0
   11340:	beq	11364 <__assert_fail@plt+0x228>
   11344:	ldr	r3, [fp, #-12]
   11348:	ldr	r3, [r3]
   1134c:	mov	r1, r3
   11350:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11354:	bl	10e9c <strcmp@plt>
   11358:	mov	r3, r0
   1135c:	cmp	r3, #0
   11360:	bne	11328 <__assert_fail@plt+0x1ec>
   11364:	ldr	r3, [fp, #-12]
   11368:	ldr	r3, [r3, #4]
   1136c:	cmp	r3, #0
   11370:	beq	11380 <__assert_fail@plt+0x244>
   11374:	ldr	r3, [fp, #-12]
   11378:	ldr	r3, [r3, #4]
   1137c:	str	r3, [fp, #-8]
   11380:	ldr	r0, [pc, #200]	; 11450 <__assert_fail@plt+0x314>
   11384:	bl	11004 <gettext@plt>
   11388:	mov	r3, r0
   1138c:	ldr	r2, [pc, #192]	; 11454 <__assert_fail@plt+0x318>
   11390:	ldr	r1, [pc, #192]	; 11458 <__assert_fail@plt+0x31c>
   11394:	mov	r0, r3
   11398:	bl	10eb4 <printf@plt>
   1139c:	mov	r1, #0
   113a0:	mov	r0, #5
   113a4:	bl	110ac <setlocale@plt>
   113a8:	str	r0, [fp, #-16]
   113ac:	ldr	r3, [fp, #-16]
   113b0:	cmp	r3, #0
   113b4:	beq	113f4 <__assert_fail@plt+0x2b8>
   113b8:	mov	r2, #3
   113bc:	ldr	r1, [pc, #152]	; 1145c <__assert_fail@plt+0x320>
   113c0:	ldr	r0, [fp, #-16]
   113c4:	bl	11100 <strncmp@plt>
   113c8:	mov	r3, r0
   113cc:	cmp	r3, #0
   113d0:	beq	113f4 <__assert_fail@plt+0x2b8>
   113d4:	ldr	r0, [pc, #132]	; 11460 <__assert_fail@plt+0x324>
   113d8:	bl	11004 <gettext@plt>
   113dc:	mov	r2, r0
   113e0:	ldr	r3, [pc, #124]	; 11464 <__assert_fail@plt+0x328>
   113e4:	ldr	r3, [r3]
   113e8:	mov	r1, r3
   113ec:	mov	r0, r2
   113f0:	bl	10e84 <fputs_unlocked@plt>
   113f4:	ldr	r0, [pc, #108]	; 11468 <__assert_fail@plt+0x32c>
   113f8:	bl	11004 <gettext@plt>
   113fc:	mov	r3, r0
   11400:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11404:	ldr	r1, [pc, #72]	; 11454 <__assert_fail@plt+0x318>
   11408:	mov	r0, r3
   1140c:	bl	10eb4 <printf@plt>
   11410:	ldr	r0, [pc, #84]	; 1146c <__assert_fail@plt+0x330>
   11414:	bl	11004 <gettext@plt>
   11418:	ldr	r2, [fp, #-8]
   1141c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11420:	cmp	r2, r3
   11424:	bne	11430 <__assert_fail@plt+0x2f4>
   11428:	ldr	r3, [pc, #64]	; 11470 <__assert_fail@plt+0x334>
   1142c:	b	11434 <__assert_fail@plt+0x2f8>
   11430:	ldr	r3, [pc, #60]	; 11474 <__assert_fail@plt+0x338>
   11434:	mov	r2, r3
   11438:	ldr	r1, [fp, #-8]
   1143c:	bl	10eb4 <printf@plt>
   11440:	nop			; (mov r0, r0)
   11444:	sub	sp, fp, #4
   11448:	pop	{fp, pc}
   1144c:	andeq	sl, r1, ip, ror #30
   11450:	strdeq	sl, [r1], -r8
   11454:	andeq	sl, r1, r0, lsl lr
   11458:	andeq	sl, r1, r8, lsr lr
   1145c:	andeq	sl, r1, r8, asr #28
   11460:	andeq	sl, r1, ip, asr #28
   11464:	andeq	sp, r2, r4, lsl #3
   11468:	muleq	r1, r4, lr
   1146c:			; <UNDEFINED> instruction: 0x0001aeb0
   11470:	andeq	sl, r1, r4, ror #29
   11474:	strdeq	sl, [r1], -r0
   11478:	push	{r4, fp, lr}
   1147c:	add	fp, sp, #8
   11480:	sub	sp, sp, #12
   11484:	str	r0, [fp, #-16]
   11488:	ldr	r3, [fp, #-16]
   1148c:	cmp	r3, #0
   11490:	beq	114c0 <__assert_fail@plt+0x384>
   11494:	ldr	r3, [pc, #372]	; 11610 <__assert_fail@plt+0x4d4>
   11498:	ldr	r4, [r3]
   1149c:	ldr	r0, [pc, #368]	; 11614 <__assert_fail@plt+0x4d8>
   114a0:	bl	11004 <gettext@plt>
   114a4:	mov	r1, r0
   114a8:	ldr	r3, [pc, #360]	; 11618 <__assert_fail@plt+0x4dc>
   114ac:	ldr	r3, [r3]
   114b0:	mov	r2, r3
   114b4:	mov	r0, r4
   114b8:	bl	11034 <fprintf@plt>
   114bc:	b	11608 <__assert_fail@plt+0x4cc>
   114c0:	ldr	r0, [pc, #340]	; 1161c <__assert_fail@plt+0x4e0>
   114c4:	bl	11004 <gettext@plt>
   114c8:	mov	r2, r0
   114cc:	ldr	r3, [pc, #324]	; 11618 <__assert_fail@plt+0x4dc>
   114d0:	ldr	r3, [r3]
   114d4:	mov	r1, r3
   114d8:	mov	r0, r2
   114dc:	bl	10eb4 <printf@plt>
   114e0:	ldr	r0, [pc, #312]	; 11620 <__assert_fail@plt+0x4e4>
   114e4:	bl	11004 <gettext@plt>
   114e8:	mov	r2, r0
   114ec:	ldr	r3, [pc, #304]	; 11624 <__assert_fail@plt+0x4e8>
   114f0:	ldr	r3, [r3]
   114f4:	mov	r1, r3
   114f8:	mov	r0, r2
   114fc:	bl	10e84 <fputs_unlocked@plt>
   11500:	ldr	r0, [pc, #288]	; 11628 <__assert_fail@plt+0x4ec>
   11504:	bl	11004 <gettext@plt>
   11508:	mov	r2, r0
   1150c:	ldr	r3, [pc, #272]	; 11624 <__assert_fail@plt+0x4e8>
   11510:	ldr	r3, [r3]
   11514:	mov	r1, r3
   11518:	mov	r0, r2
   1151c:	bl	10e84 <fputs_unlocked@plt>
   11520:	ldr	r0, [pc, #260]	; 1162c <__assert_fail@plt+0x4f0>
   11524:	bl	11004 <gettext@plt>
   11528:	mov	r2, r0
   1152c:	ldr	r3, [pc, #240]	; 11624 <__assert_fail@plt+0x4e8>
   11530:	ldr	r3, [r3]
   11534:	mov	r1, r3
   11538:	mov	r0, r2
   1153c:	bl	10e84 <fputs_unlocked@plt>
   11540:	ldr	r0, [pc, #232]	; 11630 <__assert_fail@plt+0x4f4>
   11544:	bl	11004 <gettext@plt>
   11548:	mov	r2, r0
   1154c:	ldr	r3, [pc, #208]	; 11624 <__assert_fail@plt+0x4e8>
   11550:	ldr	r3, [r3]
   11554:	mov	r1, r3
   11558:	mov	r0, r2
   1155c:	bl	10e84 <fputs_unlocked@plt>
   11560:	ldr	r0, [pc, #204]	; 11634 <__assert_fail@plt+0x4f8>
   11564:	bl	11004 <gettext@plt>
   11568:	mov	r2, r0
   1156c:	ldr	r3, [pc, #176]	; 11624 <__assert_fail@plt+0x4e8>
   11570:	ldr	r3, [r3]
   11574:	mov	r1, r3
   11578:	mov	r0, r2
   1157c:	bl	10e84 <fputs_unlocked@plt>
   11580:	ldr	r0, [pc, #176]	; 11638 <__assert_fail@plt+0x4fc>
   11584:	bl	11004 <gettext@plt>
   11588:	mov	r2, r0
   1158c:	ldr	r3, [pc, #144]	; 11624 <__assert_fail@plt+0x4e8>
   11590:	ldr	r3, [r3]
   11594:	mov	r1, r3
   11598:	mov	r0, r2
   1159c:	bl	10e84 <fputs_unlocked@plt>
   115a0:	ldr	r0, [pc, #148]	; 1163c <__assert_fail@plt+0x500>
   115a4:	bl	11004 <gettext@plt>
   115a8:	mov	r2, r0
   115ac:	ldr	r3, [pc, #112]	; 11624 <__assert_fail@plt+0x4e8>
   115b0:	ldr	r3, [r3]
   115b4:	mov	r1, r3
   115b8:	mov	r0, r2
   115bc:	bl	10e84 <fputs_unlocked@plt>
   115c0:	ldr	r0, [pc, #120]	; 11640 <__assert_fail@plt+0x504>
   115c4:	bl	11004 <gettext@plt>
   115c8:	mov	r2, r0
   115cc:	ldr	r3, [pc, #80]	; 11624 <__assert_fail@plt+0x4e8>
   115d0:	ldr	r3, [r3]
   115d4:	mov	r1, r3
   115d8:	mov	r0, r2
   115dc:	bl	10e84 <fputs_unlocked@plt>
   115e0:	ldr	r0, [pc, #92]	; 11644 <__assert_fail@plt+0x508>
   115e4:	bl	11004 <gettext@plt>
   115e8:	mov	r2, r0
   115ec:	ldr	r3, [pc, #48]	; 11624 <__assert_fail@plt+0x4e8>
   115f0:	ldr	r3, [r3]
   115f4:	mov	r1, r3
   115f8:	mov	r0, r2
   115fc:	bl	10e84 <fputs_unlocked@plt>
   11600:	ldr	r0, [pc, #64]	; 11648 <__assert_fail@plt+0x50c>
   11604:	bl	112d8 <__assert_fail@plt+0x19c>
   11608:	ldr	r0, [fp, #-16]
   1160c:	bl	10ff8 <exit@plt>
   11610:	andeq	sp, r2, r8, ror r1
   11614:	andeq	fp, r1, r4, ror r0
   11618:	andeq	sp, r2, r8, lsl #4
   1161c:	muleq	r1, ip, r0
   11620:	andeq	fp, r1, r0, asr #1
   11624:	andeq	sp, r2, r4, lsl #3
   11628:	andeq	fp, r1, r8, asr r1
   1162c:	muleq	r1, r4, r1
   11630:	andeq	fp, r1, r4, ror r2
   11634:	andeq	fp, r1, r4, lsl #7
   11638:	muleq	r1, r8, r5
   1163c:	ldrdeq	fp, [r1], -r8
   11640:	andeq	fp, r1, r8, lsl #12
   11644:	andeq	fp, r1, r0, asr #12
   11648:	andeq	fp, r1, r4, ror r9
   1164c:	push	{fp, lr}
   11650:	add	fp, sp, #4
   11654:	sub	sp, sp, #16
   11658:	str	r0, [fp, #-8]
   1165c:	str	r1, [fp, #-12]
   11660:	str	r2, [fp, #-16]
   11664:	ldr	r3, [fp, #-8]
   11668:	ldr	r2, [r3, #12]
   1166c:	ldr	r3, [fp, #-8]
   11670:	ldr	r3, [r3, #16]
   11674:	cmp	r2, r3
   11678:	bcc	116a4 <__assert_fail@plt+0x568>
   1167c:	ldr	r3, [fp, #-8]
   11680:	ldr	r0, [r3, #20]
   11684:	ldr	r3, [fp, #-8]
   11688:	add	r3, r3, #16
   1168c:	mov	r2, #8
   11690:	mov	r1, r3
   11694:	bl	17b88 <__assert_fail@plt+0x6a4c>
   11698:	mov	r2, r0
   1169c:	ldr	r3, [fp, #-8]
   116a0:	str	r2, [r3, #20]
   116a4:	ldr	r3, [fp, #-8]
   116a8:	ldr	r2, [r3, #20]
   116ac:	ldr	r3, [fp, #-8]
   116b0:	ldr	r3, [r3, #12]
   116b4:	lsl	r3, r3, #3
   116b8:	add	r3, r2, r3
   116bc:	ldr	r2, [fp, #-12]
   116c0:	str	r2, [r3]
   116c4:	ldr	r3, [fp, #-8]
   116c8:	ldr	r2, [r3, #20]
   116cc:	ldr	r3, [fp, #-8]
   116d0:	ldr	r3, [r3, #12]
   116d4:	lsl	r3, r3, #3
   116d8:	add	r3, r2, r3
   116dc:	ldr	r2, [fp, #-16]
   116e0:	str	r2, [r3, #4]
   116e4:	ldr	r3, [fp, #-8]
   116e8:	ldr	r3, [r3, #12]
   116ec:	add	r2, r3, #1
   116f0:	ldr	r3, [fp, #-8]
   116f4:	str	r2, [r3, #12]
   116f8:	nop			; (mov r0, r0)
   116fc:	sub	sp, fp, #4
   11700:	pop	{fp, pc}
   11704:	push	{fp, lr}
   11708:	add	fp, sp, #4
   1170c:	sub	sp, sp, #24
   11710:	str	r0, [fp, #-24]	; 0xffffffe8
   11714:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11718:	ldr	r3, [r3, #8]
   1171c:	str	r3, [fp, #-8]
   11720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11724:	ldr	r3, [r3, #4]
   11728:	sub	r3, r3, #1
   1172c:	ldr	r2, [fp, #-8]
   11730:	add	r3, r2, r3
   11734:	str	r3, [fp, #-16]
   11738:	ldr	r2, [fp, #-8]
   1173c:	ldr	r3, [fp, #-16]
   11740:	cmp	r2, r3
   11744:	beq	11908 <__assert_fail@plt+0x7cc>
   11748:	ldr	r3, [pc, #468]	; 11924 <__assert_fail@plt+0x7e8>
   1174c:	ldr	r3, [r3]
   11750:	cmp	r3, #0
   11754:	blt	117c8 <__assert_fail@plt+0x68c>
   11758:	ldr	r3, [pc, #452]	; 11924 <__assert_fail@plt+0x7e8>
   1175c:	ldr	r3, [r3]
   11760:	cmp	r3, #10
   11764:	beq	117c8 <__assert_fail@plt+0x68c>
   11768:	b	11794 <__assert_fail@plt+0x658>
   1176c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11770:	ldr	r3, [fp, #-8]
   11774:	sub	r3, r2, r3
   11778:	mov	r2, r3
   1177c:	ldr	r1, [fp, #-8]
   11780:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11784:	bl	1164c <__assert_fail@plt+0x510>
   11788:	ldr	r3, [fp, #-20]	; 0xffffffec
   1178c:	add	r3, r3, #1
   11790:	str	r3, [fp, #-8]
   11794:	ldr	r3, [pc, #392]	; 11924 <__assert_fail@plt+0x7e8>
   11798:	ldr	r1, [r3]
   1179c:	ldr	r2, [fp, #-16]
   117a0:	ldr	r3, [fp, #-8]
   117a4:	sub	r3, r2, r3
   117a8:	mov	r2, r3
   117ac:	ldr	r0, [fp, #-8]
   117b0:	bl	1107c <memchr@plt>
   117b4:	str	r0, [fp, #-20]	; 0xffffffec
   117b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   117bc:	cmp	r3, #0
   117c0:	bne	1176c <__assert_fail@plt+0x630>
   117c4:	b	118e8 <__assert_fail@plt+0x7ac>
   117c8:	ldr	r3, [pc, #340]	; 11924 <__assert_fail@plt+0x7e8>
   117cc:	ldr	r3, [r3]
   117d0:	cmp	r3, #0
   117d4:	bge	118e8 <__assert_fail@plt+0x7ac>
   117d8:	b	117f8 <__assert_fail@plt+0x6bc>
   117dc:	ldr	r3, [fp, #-8]
   117e0:	add	r3, r3, #1
   117e4:	str	r3, [fp, #-8]
   117e8:	ldr	r2, [fp, #-8]
   117ec:	ldr	r3, [fp, #-16]
   117f0:	cmp	r2, r3
   117f4:	beq	11910 <__assert_fail@plt+0x7d4>
   117f8:	ldr	r3, [fp, #-8]
   117fc:	ldrb	r3, [r3]
   11800:	mov	r0, r3
   11804:	bl	11270 <__assert_fail@plt+0x134>
   11808:	mov	r3, r0
   1180c:	cmp	r3, #0
   11810:	bne	117dc <__assert_fail@plt+0x6a0>
   11814:	ldr	r3, [fp, #-8]
   11818:	add	r3, r3, #1
   1181c:	str	r3, [fp, #-12]
   11820:	b	11830 <__assert_fail@plt+0x6f4>
   11824:	ldr	r3, [fp, #-12]
   11828:	add	r3, r3, #1
   1182c:	str	r3, [fp, #-12]
   11830:	ldr	r2, [fp, #-12]
   11834:	ldr	r3, [fp, #-16]
   11838:	cmp	r2, r3
   1183c:	beq	11864 <__assert_fail@plt+0x728>
   11840:	ldr	r3, [fp, #-12]
   11844:	ldrb	r3, [r3]
   11848:	mov	r0, r3
   1184c:	bl	11270 <__assert_fail@plt+0x134>
   11850:	mov	r3, r0
   11854:	eor	r3, r3, #1
   11858:	uxtb	r3, r3
   1185c:	cmp	r3, #0
   11860:	bne	11824 <__assert_fail@plt+0x6e8>
   11864:	ldr	r2, [fp, #-12]
   11868:	ldr	r3, [fp, #-8]
   1186c:	sub	r3, r2, r3
   11870:	mov	r2, r3
   11874:	ldr	r1, [fp, #-8]
   11878:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1187c:	bl	1164c <__assert_fail@plt+0x510>
   11880:	ldr	r2, [fp, #-12]
   11884:	ldr	r3, [fp, #-16]
   11888:	cmp	r2, r3
   1188c:	beq	11918 <__assert_fail@plt+0x7dc>
   11890:	ldr	r3, [fp, #-12]
   11894:	add	r3, r3, #1
   11898:	str	r3, [fp, #-8]
   1189c:	b	118ac <__assert_fail@plt+0x770>
   118a0:	ldr	r3, [fp, #-8]
   118a4:	add	r3, r3, #1
   118a8:	str	r3, [fp, #-8]
   118ac:	ldr	r2, [fp, #-8]
   118b0:	ldr	r3, [fp, #-16]
   118b4:	cmp	r2, r3
   118b8:	beq	118d8 <__assert_fail@plt+0x79c>
   118bc:	ldr	r3, [fp, #-8]
   118c0:	ldrb	r3, [r3]
   118c4:	mov	r0, r3
   118c8:	bl	11270 <__assert_fail@plt+0x134>
   118cc:	mov	r3, r0
   118d0:	cmp	r3, #0
   118d4:	bne	118a0 <__assert_fail@plt+0x764>
   118d8:	ldr	r2, [fp, #-8]
   118dc:	ldr	r3, [fp, #-16]
   118e0:	cmp	r2, r3
   118e4:	bne	11814 <__assert_fail@plt+0x6d8>
   118e8:	ldr	r2, [fp, #-16]
   118ec:	ldr	r3, [fp, #-8]
   118f0:	sub	r3, r2, r3
   118f4:	mov	r2, r3
   118f8:	ldr	r1, [fp, #-8]
   118fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11900:	bl	1164c <__assert_fail@plt+0x510>
   11904:	b	1191c <__assert_fail@plt+0x7e0>
   11908:	nop			; (mov r0, r0)
   1190c:	b	1191c <__assert_fail@plt+0x7e0>
   11910:	nop			; (mov r0, r0)
   11914:	b	1191c <__assert_fail@plt+0x7e0>
   11918:	nop			; (mov r0, r0)
   1191c:	sub	sp, fp, #4
   11920:	pop	{fp, pc}
   11924:	andeq	sp, r2, r8, lsl r1
   11928:	push	{fp, lr}
   1192c:	add	fp, sp, #4
   11930:	sub	sp, sp, #8
   11934:	str	r0, [fp, #-8]
   11938:	ldr	r3, [fp, #-8]
   1193c:	cmp	r3, #0
   11940:	beq	11980 <__assert_fail@plt+0x844>
   11944:	ldr	r3, [fp, #-8]
   11948:	ldr	r3, [r3, #20]
   1194c:	mov	r0, r3
   11950:	bl	1433c <__assert_fail@plt+0x3200>
   11954:	ldr	r3, [fp, #-8]
   11958:	mov	r2, #0
   1195c:	str	r2, [r3, #20]
   11960:	ldr	r3, [fp, #-8]
   11964:	ldr	r3, [r3, #8]
   11968:	mov	r0, r3
   1196c:	bl	1433c <__assert_fail@plt+0x3200>
   11970:	ldr	r3, [fp, #-8]
   11974:	mov	r2, #0
   11978:	str	r2, [r3, #8]
   1197c:	b	11984 <__assert_fail@plt+0x848>
   11980:	nop			; (mov r0, r0)
   11984:	sub	sp, fp, #4
   11988:	pop	{fp, pc}
   1198c:	push	{fp, lr}
   11990:	add	fp, sp, #4
   11994:	sub	sp, sp, #40	; 0x28
   11998:	str	r0, [fp, #-32]	; 0xffffffe0
   1199c:	str	r1, [fp, #-36]	; 0xffffffdc
   119a0:	str	r2, [fp, #-40]	; 0xffffffd8
   119a4:	str	r3, [fp, #-44]	; 0xffffffd4
   119a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119ac:	ldr	r2, [r3, #12]
   119b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119b4:	cmp	r2, r3
   119b8:	bls	119f8 <__assert_fail@plt+0x8bc>
   119bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119c0:	ldr	r2, [r3, #20]
   119c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119c8:	lsl	r3, r3, #3
   119cc:	add	r3, r2, r3
   119d0:	ldr	r3, [r3]
   119d4:	str	r3, [fp, #-8]
   119d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   119dc:	ldr	r2, [r3, #20]
   119e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119e4:	lsl	r3, r3, #3
   119e8:	add	r3, r2, r3
   119ec:	ldr	r3, [r3, #4]
   119f0:	str	r3, [fp, #-16]
   119f4:	b	11a08 <__assert_fail@plt+0x8cc>
   119f8:	mov	r3, #0
   119fc:	str	r3, [fp, #-8]
   11a00:	mov	r3, #0
   11a04:	str	r3, [fp, #-16]
   11a08:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11a0c:	ldr	r2, [r3, #12]
   11a10:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a14:	cmp	r2, r3
   11a18:	bls	11a58 <__assert_fail@plt+0x91c>
   11a1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11a20:	ldr	r2, [r3, #20]
   11a24:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a28:	lsl	r3, r3, #3
   11a2c:	add	r3, r2, r3
   11a30:	ldr	r3, [r3]
   11a34:	str	r3, [fp, #-12]
   11a38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11a3c:	ldr	r2, [r3, #20]
   11a40:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a44:	lsl	r3, r3, #3
   11a48:	add	r3, r2, r3
   11a4c:	ldr	r3, [r3, #4]
   11a50:	str	r3, [fp, #-20]	; 0xffffffec
   11a54:	b	11a68 <__assert_fail@plt+0x92c>
   11a58:	mov	r3, #0
   11a5c:	str	r3, [fp, #-12]
   11a60:	mov	r3, #0
   11a64:	str	r3, [fp, #-20]	; 0xffffffec
   11a68:	ldr	r3, [fp, #-16]
   11a6c:	cmp	r3, #0
   11a70:	bne	11a90 <__assert_fail@plt+0x954>
   11a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a78:	cmp	r3, #0
   11a7c:	bne	11a88 <__assert_fail@plt+0x94c>
   11a80:	mov	r3, #0
   11a84:	b	11b78 <__assert_fail@plt+0xa3c>
   11a88:	mvn	r3, #0
   11a8c:	b	11b78 <__assert_fail@plt+0xa3c>
   11a90:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a94:	cmp	r3, #0
   11a98:	bne	11aa4 <__assert_fail@plt+0x968>
   11a9c:	mov	r3, #1
   11aa0:	b	11b78 <__assert_fail@plt+0xa3c>
   11aa4:	ldr	r3, [pc, #216]	; 11b84 <__assert_fail@plt+0xa48>
   11aa8:	ldrb	r3, [r3]
   11aac:	cmp	r3, #0
   11ab0:	beq	11ae0 <__assert_fail@plt+0x9a4>
   11ab4:	ldr	r2, [fp, #-20]	; 0xffffffec
   11ab8:	ldr	r3, [fp, #-16]
   11abc:	cmp	r2, r3
   11ac0:	movcc	r3, r2
   11ac4:	movcs	r3, r3
   11ac8:	mov	r2, r3
   11acc:	ldr	r1, [fp, #-12]
   11ad0:	ldr	r0, [fp, #-8]
   11ad4:	bl	14764 <__assert_fail@plt+0x3628>
   11ad8:	str	r0, [fp, #-24]	; 0xffffffe8
   11adc:	b	11b34 <__assert_fail@plt+0x9f8>
   11ae0:	ldr	r3, [pc, #160]	; 11b88 <__assert_fail@plt+0xa4c>
   11ae4:	ldrb	r3, [r3]
   11ae8:	cmp	r3, #0
   11aec:	beq	11b0c <__assert_fail@plt+0x9d0>
   11af0:	ldr	r3, [fp, #-20]	; 0xffffffec
   11af4:	ldr	r2, [fp, #-12]
   11af8:	ldr	r1, [fp, #-16]
   11afc:	ldr	r0, [fp, #-8]
   11b00:	bl	18534 <__assert_fail@plt+0x73f8>
   11b04:	mov	r3, r0
   11b08:	b	11b78 <__assert_fail@plt+0xa3c>
   11b0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11b10:	ldr	r3, [fp, #-16]
   11b14:	cmp	r2, r3
   11b18:	movcc	r3, r2
   11b1c:	movcs	r3, r3
   11b20:	mov	r2, r3
   11b24:	ldr	r1, [fp, #-12]
   11b28:	ldr	r0, [fp, #-8]
   11b2c:	bl	10f08 <memcmp@plt>
   11b30:	str	r0, [fp, #-24]	; 0xffffffe8
   11b34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b38:	cmp	r3, #0
   11b3c:	beq	11b48 <__assert_fail@plt+0xa0c>
   11b40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b44:	b	11b78 <__assert_fail@plt+0xa3c>
   11b48:	ldr	r2, [fp, #-16]
   11b4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b50:	cmp	r2, r3
   11b54:	bcc	11b74 <__assert_fail@plt+0xa38>
   11b58:	ldr	r2, [fp, #-16]
   11b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b60:	cmp	r2, r3
   11b64:	movne	r3, #1
   11b68:	moveq	r3, #0
   11b6c:	uxtb	r3, r3
   11b70:	b	11b78 <__assert_fail@plt+0xa3c>
   11b74:	mvn	r3, #0
   11b78:	mov	r0, r3
   11b7c:	sub	sp, fp, #4
   11b80:	pop	{fp, pc}
   11b84:	strdeq	sp, [r2], -ip
   11b88:			; <UNDEFINED> instruction: 0x0002d1b8
   11b8c:	push	{r4, fp, lr}
   11b90:	add	fp, sp, #8
   11b94:	sub	sp, sp, #44	; 0x2c
   11b98:	str	r0, [fp, #-24]	; 0xffffffe8
   11b9c:	str	r1, [fp, #-28]	; 0xffffffe4
   11ba0:	str	r2, [fp, #-32]	; 0xffffffe0
   11ba4:	ldr	r3, [pc, #392]	; 11d34 <__assert_fail@plt+0xbf8>
   11ba8:	ldr	r3, [r3]
   11bac:	cmp	r3, #2
   11bb0:	beq	11d28 <__assert_fail@plt+0xbec>
   11bb4:	ldr	r3, [pc, #376]	; 11d34 <__assert_fail@plt+0xbf8>
   11bb8:	ldr	r3, [r3]
   11bbc:	cmp	r3, #1
   11bc0:	beq	11bd4 <__assert_fail@plt+0xa98>
   11bc4:	ldr	r3, [pc, #364]	; 11d38 <__assert_fail@plt+0xbfc>
   11bc8:	ldrb	r3, [r3]
   11bcc:	cmp	r3, #0
   11bd0:	beq	11d28 <__assert_fail@plt+0xbec>
   11bd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11bd8:	sub	r3, r3, #1
   11bdc:	ldr	r2, [pc, #344]	; 11d3c <__assert_fail@plt+0xc00>
   11be0:	ldrb	r3, [r2, r3]
   11be4:	eor	r3, r3, #1
   11be8:	uxtb	r3, r3
   11bec:	cmp	r3, #0
   11bf0:	beq	11d28 <__assert_fail@plt+0xbec>
   11bf4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11bf8:	cmp	r3, #1
   11bfc:	bne	11c0c <__assert_fail@plt+0xad0>
   11c00:	ldr	r3, [pc, #312]	; 11d40 <__assert_fail@plt+0xc04>
   11c04:	ldr	r3, [r3]
   11c08:	b	11c14 <__assert_fail@plt+0xad8>
   11c0c:	ldr	r3, [pc, #304]	; 11d44 <__assert_fail@plt+0xc08>
   11c10:	ldr	r3, [r3]
   11c14:	str	r3, [fp, #-20]	; 0xffffffec
   11c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   11c1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c20:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11c24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11c28:	bl	1198c <__assert_fail@plt+0x850>
   11c2c:	mov	r3, r0
   11c30:	cmp	r3, #0
   11c34:	ble	11d28 <__assert_fail@plt+0xbec>
   11c38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11c3c:	ldr	r3, [r3, #4]
   11c40:	str	r3, [fp, #-16]
   11c44:	ldr	r3, [fp, #-16]
   11c48:	cmp	r3, #0
   11c4c:	beq	11c7c <__assert_fail@plt+0xb40>
   11c50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11c54:	ldr	r2, [r3, #8]
   11c58:	ldr	r3, [fp, #-16]
   11c5c:	sub	r3, r3, #1
   11c60:	add	r3, r2, r3
   11c64:	ldrb	r3, [r3]
   11c68:	cmp	r3, #10
   11c6c:	bne	11c7c <__assert_fail@plt+0xb40>
   11c70:	ldr	r3, [fp, #-16]
   11c74:	sub	r3, r3, #1
   11c78:	str	r3, [fp, #-16]
   11c7c:	ldr	r3, [fp, #-16]
   11c80:	cmp	r3, #0
   11c84:	blt	11c90 <__assert_fail@plt+0xb54>
   11c88:	ldr	r3, [fp, #-16]
   11c8c:	b	11c94 <__assert_fail@plt+0xb58>
   11c90:	mvn	r3, #-2147483648	; 0x80000000
   11c94:	str	r3, [fp, #-16]
   11c98:	ldr	r3, [pc, #148]	; 11d34 <__assert_fail@plt+0xbf8>
   11c9c:	ldr	r3, [r3]
   11ca0:	cmp	r3, #1
   11ca4:	moveq	r3, #1
   11ca8:	movne	r3, #0
   11cac:	uxtb	r3, r3
   11cb0:	mov	r4, r3
   11cb4:	ldr	r0, [pc, #140]	; 11d48 <__assert_fail@plt+0xc0c>
   11cb8:	bl	11004 <gettext@plt>
   11cbc:	mov	lr, r0
   11cc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11cc4:	sub	r3, r3, #1
   11cc8:	ldr	r2, [pc, #124]	; 11d4c <__assert_fail@plt+0xc10>
   11ccc:	ldr	ip, [r2, r3, lsl #2]
   11cd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11cd4:	sub	r3, r3, #1
   11cd8:	ldr	r2, [pc, #112]	; 11d50 <__assert_fail@plt+0xc14>
   11cdc:	lsl	r3, r3, #3
   11ce0:	add	r3, r2, r3
   11ce4:	ldrd	r2, [r3]
   11ce8:	ldr	r1, [fp, #-16]
   11cec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11cf0:	ldr	r0, [r0, #8]
   11cf4:	str	r0, [sp, #12]
   11cf8:	str	r1, [sp, #8]
   11cfc:	strd	r2, [sp]
   11d00:	mov	r3, ip
   11d04:	mov	r2, lr
   11d08:	mov	r1, #0
   11d0c:	mov	r0, r4
   11d10:	bl	10f98 <error@plt>
   11d14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11d18:	sub	r3, r3, #1
   11d1c:	ldr	r2, [pc, #24]	; 11d3c <__assert_fail@plt+0xc00>
   11d20:	mov	r1, #1
   11d24:	strb	r1, [r2, r3]
   11d28:	nop			; (mov r0, r0)
   11d2c:	sub	sp, fp, #8
   11d30:	pop	{r4, fp, pc}
   11d34:	andeq	sp, r2, r0, ror #3
   11d38:			; <UNDEFINED> instruction: 0x0002d1bc
   11d3c:	andeq	sp, r2, r0, asr #3
   11d40:	andeq	sp, r2, ip, lsl #2
   11d44:	andeq	sp, r2, r0, lsl r1
   11d48:	andeq	fp, r1, ip, ror r9
   11d4c:	andeq	sp, r2, r8, lsr #3
   11d50:	muleq	r2, r8, r1
   11d54:	push	{fp}		; (str fp, [sp, #-4]!)
   11d58:	add	fp, sp, #0
   11d5c:	sub	sp, sp, #12
   11d60:	str	r0, [fp, #-8]
   11d64:	ldr	r3, [fp, #-8]
   11d68:	mov	r2, #0
   11d6c:	str	r2, [r3, #12]
   11d70:	nop			; (mov r0, r0)
   11d74:	add	sp, fp, #0
   11d78:	pop	{fp}		; (ldr fp, [sp], #4)
   11d7c:	bx	lr
   11d80:	push	{fp, lr}
   11d84:	add	fp, sp, #4
   11d88:	sub	sp, sp, #16
   11d8c:	str	r0, [fp, #-16]
   11d90:	mov	r1, #24
   11d94:	mov	r0, #1
   11d98:	bl	18290 <__assert_fail@plt+0x7154>
   11d9c:	mov	r3, r0
   11da0:	str	r3, [fp, #-8]
   11da4:	ldr	r3, [fp, #-16]
   11da8:	ldr	r2, [fp, #-8]
   11dac:	str	r2, [r3]
   11db0:	ldr	r3, [fp, #-8]
   11db4:	mov	r0, r3
   11db8:	sub	sp, fp, #4
   11dbc:	pop	{fp, pc}
   11dc0:	push	{r4, fp, lr}
   11dc4:	add	fp, sp, #8
   11dc8:	sub	sp, sp, #28
   11dcc:	str	r0, [fp, #-24]	; 0xffffffe8
   11dd0:	str	r1, [fp, #-28]	; 0xffffffe4
   11dd4:	str	r2, [fp, #-32]	; 0xffffffe0
   11dd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ddc:	ldr	r3, [r3]
   11de0:	str	r3, [fp, #-16]
   11de4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11de8:	sub	r3, r3, #1
   11dec:	ldr	r2, [pc, #368]	; 11f64 <__assert_fail@plt+0xe28>
   11df0:	ldr	r2, [r2, r3, lsl #2]
   11df4:	ldr	r3, [fp, #-16]
   11df8:	cmp	r2, r3
   11dfc:	bne	11e3c <__assert_fail@plt+0xd00>
   11e00:	ldr	r3, [fp, #-16]
   11e04:	str	r3, [fp, #-20]	; 0xffffffec
   11e08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11e0c:	sub	r3, r3, #1
   11e10:	ldr	r2, [pc, #336]	; 11f68 <__assert_fail@plt+0xe2c>
   11e14:	ldr	r3, [r2, r3, lsl #2]
   11e18:	str	r3, [fp, #-16]
   11e1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11e20:	sub	r3, r3, #1
   11e24:	ldr	r1, [pc, #316]	; 11f68 <__assert_fail@plt+0xe2c>
   11e28:	ldr	r2, [fp, #-20]	; 0xffffffec
   11e2c:	str	r2, [r1, r3, lsl #2]
   11e30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11e34:	ldr	r2, [fp, #-16]
   11e38:	str	r2, [r3]
   11e3c:	ldr	r3, [fp, #-16]
   11e40:	cmp	r3, #0
   11e44:	beq	11e54 <__assert_fail@plt+0xd18>
   11e48:	ldr	r0, [fp, #-16]
   11e4c:	bl	11d54 <__assert_fail@plt+0xc18>
   11e50:	b	11e60 <__assert_fail@plt+0xd24>
   11e54:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11e58:	bl	11d80 <__assert_fail@plt+0xc44>
   11e5c:	str	r0, [fp, #-16]
   11e60:	ldr	r0, [fp, #-16]
   11e64:	ldr	r3, [pc, #256]	; 11f6c <__assert_fail@plt+0xe30>
   11e68:	ldrb	r3, [r3]
   11e6c:	mov	r2, r3
   11e70:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11e74:	bl	145a8 <__assert_fail@plt+0x346c>
   11e78:	mov	r3, r0
   11e7c:	cmp	r3, #0
   11e80:	bne	11ed0 <__assert_fail@plt+0xd94>
   11e84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e88:	bl	10f80 <ferror_unlocked@plt>
   11e8c:	mov	r3, r0
   11e90:	cmp	r3, #0
   11e94:	beq	11ec0 <__assert_fail@plt+0xd84>
   11e98:	bl	11040 <__errno_location@plt>
   11e9c:	mov	r3, r0
   11ea0:	ldr	r4, [r3]
   11ea4:	ldr	r0, [pc, #196]	; 11f70 <__assert_fail@plt+0xe34>
   11ea8:	bl	11004 <gettext@plt>
   11eac:	mov	r3, r0
   11eb0:	mov	r2, r3
   11eb4:	mov	r1, r4
   11eb8:	mov	r0, #1
   11ebc:	bl	10f98 <error@plt>
   11ec0:	ldr	r0, [fp, #-16]
   11ec4:	bl	11928 <__assert_fail@plt+0x7ec>
   11ec8:	mov	r3, #0
   11ecc:	b	11f58 <__assert_fail@plt+0xe1c>
   11ed0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11ed4:	sub	r1, r3, #1
   11ed8:	ldr	r2, [pc, #148]	; 11f74 <__assert_fail@plt+0xe38>
   11edc:	lsl	r3, r1, #3
   11ee0:	add	r3, r2, r3
   11ee4:	ldrd	r2, [r3]
   11ee8:	adds	r2, r2, #1
   11eec:	adc	r3, r3, #0
   11ef0:	ldr	r0, [pc, #124]	; 11f74 <__assert_fail@plt+0xe38>
   11ef4:	lsl	r1, r1, #3
   11ef8:	add	r1, r0, r1
   11efc:	strd	r2, [r1]
   11f00:	ldr	r0, [fp, #-16]
   11f04:	bl	11704 <__assert_fail@plt+0x5c8>
   11f08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f0c:	sub	r3, r3, #1
   11f10:	ldr	r2, [pc, #76]	; 11f64 <__assert_fail@plt+0xe28>
   11f14:	ldr	r3, [r2, r3, lsl #2]
   11f18:	cmp	r3, #0
   11f1c:	beq	11f40 <__assert_fail@plt+0xe04>
   11f20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f24:	sub	r3, r3, #1
   11f28:	ldr	r2, [pc, #52]	; 11f64 <__assert_fail@plt+0xe28>
   11f2c:	ldr	r3, [r2, r3, lsl #2]
   11f30:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11f34:	ldr	r1, [fp, #-16]
   11f38:	mov	r0, r3
   11f3c:	bl	11b8c <__assert_fail@plt+0xa50>
   11f40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f44:	sub	r3, r3, #1
   11f48:	ldr	r1, [pc, #20]	; 11f64 <__assert_fail@plt+0xe28>
   11f4c:	ldr	r2, [fp, #-16]
   11f50:	str	r2, [r1, r3, lsl #2]
   11f54:	mov	r3, #1
   11f58:	mov	r0, r3
   11f5c:	sub	sp, fp, #8
   11f60:	pop	{r4, fp, pc}
   11f64:	muleq	r2, r0, r1
   11f68:			; <UNDEFINED> instruction: 0x0002d1b0
   11f6c:	andeq	sp, r2, ip, lsl r1
   11f70:	muleq	r1, ip, r9
   11f74:	muleq	r2, r8, r1
   11f78:	push	{fp, lr}
   11f7c:	add	fp, sp, #4
   11f80:	sub	sp, sp, #8
   11f84:	mov	r3, #0
   11f88:	str	r3, [fp, #-8]
   11f8c:	b	11fd8 <__assert_fail@plt+0xe9c>
   11f90:	ldr	r2, [pc, #88]	; 11ff0 <__assert_fail@plt+0xeb4>
   11f94:	ldr	r3, [fp, #-8]
   11f98:	ldr	r3, [r2, r3, lsl #2]
   11f9c:	cmp	r3, #0
   11fa0:	beq	11fcc <__assert_fail@plt+0xe90>
   11fa4:	ldr	r2, [pc, #68]	; 11ff0 <__assert_fail@plt+0xeb4>
   11fa8:	ldr	r3, [fp, #-8]
   11fac:	ldr	r3, [r2, r3, lsl #2]
   11fb0:	mov	r0, r3
   11fb4:	bl	11928 <__assert_fail@plt+0x7ec>
   11fb8:	ldr	r2, [pc, #48]	; 11ff0 <__assert_fail@plt+0xeb4>
   11fbc:	ldr	r3, [fp, #-8]
   11fc0:	ldr	r3, [r2, r3, lsl #2]
   11fc4:	mov	r0, r3
   11fc8:	bl	1433c <__assert_fail@plt+0x3200>
   11fcc:	ldr	r3, [fp, #-8]
   11fd0:	add	r3, r3, #1
   11fd4:	str	r3, [fp, #-8]
   11fd8:	ldr	r3, [fp, #-8]
   11fdc:	cmp	r3, #1
   11fe0:	bls	11f90 <__assert_fail@plt+0xe54>
   11fe4:	nop			; (mov r0, r0)
   11fe8:	sub	sp, fp, #4
   11fec:	pop	{fp, pc}
   11ff0:			; <UNDEFINED> instruction: 0x0002d1b0
   11ff4:	push	{fp}		; (str fp, [sp, #-4]!)
   11ff8:	add	fp, sp, #0
   11ffc:	sub	sp, sp, #12
   12000:	str	r0, [fp, #-8]
   12004:	ldr	r3, [fp, #-8]
   12008:	mov	r2, #0
   1200c:	str	r2, [r3]
   12010:	ldr	r3, [fp, #-8]
   12014:	mov	r2, #0
   12018:	str	r2, [r3, #4]
   1201c:	ldr	r3, [fp, #-8]
   12020:	mov	r2, #0
   12024:	str	r2, [r3, #8]
   12028:	nop			; (mov r0, r0)
   1202c:	add	sp, fp, #0
   12030:	pop	{fp}		; (ldr fp, [sp], #4)
   12034:	bx	lr
   12038:	push	{fp, lr}
   1203c:	add	fp, sp, #4
   12040:	sub	sp, sp, #24
   12044:	str	r0, [fp, #-16]
   12048:	str	r1, [fp, #-20]	; 0xffffffec
   1204c:	str	r2, [fp, #-24]	; 0xffffffe8
   12050:	ldr	r3, [fp, #-20]	; 0xffffffec
   12054:	ldr	r2, [r3]
   12058:	ldr	r3, [fp, #-20]	; 0xffffffec
   1205c:	ldr	r3, [r3, #4]
   12060:	cmp	r2, r3
   12064:	bne	120dc <__assert_fail@plt+0xfa0>
   12068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1206c:	ldr	r0, [r3, #8]
   12070:	ldr	r3, [fp, #-20]	; 0xffffffec
   12074:	add	r3, r3, #4
   12078:	mov	r2, #4
   1207c:	mov	r1, r3
   12080:	bl	17b88 <__assert_fail@plt+0x6a4c>
   12084:	mov	r2, r0
   12088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1208c:	str	r2, [r3, #8]
   12090:	ldr	r3, [fp, #-20]	; 0xffffffec
   12094:	ldr	r3, [r3]
   12098:	str	r3, [fp, #-8]
   1209c:	b	120c8 <__assert_fail@plt+0xf8c>
   120a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   120a4:	ldr	r2, [r3, #8]
   120a8:	ldr	r3, [fp, #-8]
   120ac:	lsl	r3, r3, #2
   120b0:	add	r3, r2, r3
   120b4:	mov	r2, #0
   120b8:	str	r2, [r3]
   120bc:	ldr	r3, [fp, #-8]
   120c0:	add	r3, r3, #1
   120c4:	str	r3, [fp, #-8]
   120c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   120cc:	ldr	r2, [r3, #4]
   120d0:	ldr	r3, [fp, #-8]
   120d4:	cmp	r2, r3
   120d8:	bhi	120a0 <__assert_fail@plt+0xf64>
   120dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   120e0:	ldr	r2, [r3, #8]
   120e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   120e8:	ldr	r3, [r3]
   120ec:	lsl	r3, r3, #2
   120f0:	add	r3, r2, r3
   120f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   120f8:	mov	r1, r3
   120fc:	ldr	r0, [fp, #-16]
   12100:	bl	11dc0 <__assert_fail@plt+0xc84>
   12104:	mov	r3, r0
   12108:	cmp	r3, #0
   1210c:	beq	1212c <__assert_fail@plt+0xff0>
   12110:	ldr	r3, [fp, #-20]	; 0xffffffec
   12114:	ldr	r3, [r3]
   12118:	add	r2, r3, #1
   1211c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12120:	str	r2, [r3]
   12124:	mov	r3, #1
   12128:	b	12130 <__assert_fail@plt+0xff4>
   1212c:	mov	r3, #0
   12130:	mov	r0, r3
   12134:	sub	sp, fp, #4
   12138:	pop	{fp, pc}
   1213c:	push	{fp, lr}
   12140:	add	fp, sp, #4
   12144:	sub	sp, sp, #16
   12148:	str	r0, [fp, #-8]
   1214c:	str	r1, [fp, #-12]
   12150:	str	r3, [fp, #-20]	; 0xffffffec
   12154:	mov	r3, r2
   12158:	strb	r3, [fp, #-13]
   1215c:	ldrb	r3, [fp, #-13]
   12160:	cmp	r3, #0
   12164:	beq	12174 <__assert_fail@plt+0x1038>
   12168:	ldr	r3, [fp, #-12]
   1216c:	mov	r2, #0
   12170:	str	r2, [r3]
   12174:	ldr	r2, [fp, #-20]	; 0xffffffec
   12178:	ldr	r1, [fp, #-12]
   1217c:	ldr	r0, [fp, #-8]
   12180:	bl	12038 <__assert_fail@plt+0xefc>
   12184:	mov	r3, r0
   12188:	mov	r0, r3
   1218c:	sub	sp, fp, #4
   12190:	pop	{fp, pc}
   12194:	push	{fp, lr}
   12198:	add	fp, sp, #4
   1219c:	sub	sp, sp, #16
   121a0:	str	r0, [fp, #-16]
   121a4:	mov	r3, #0
   121a8:	str	r3, [fp, #-8]
   121ac:	b	121fc <__assert_fail@plt+0x10c0>
   121b0:	ldr	r3, [fp, #-16]
   121b4:	ldr	r2, [r3, #8]
   121b8:	ldr	r3, [fp, #-8]
   121bc:	lsl	r3, r3, #2
   121c0:	add	r3, r2, r3
   121c4:	ldr	r3, [r3]
   121c8:	mov	r0, r3
   121cc:	bl	11928 <__assert_fail@plt+0x7ec>
   121d0:	ldr	r3, [fp, #-16]
   121d4:	ldr	r2, [r3, #8]
   121d8:	ldr	r3, [fp, #-8]
   121dc:	lsl	r3, r3, #2
   121e0:	add	r3, r2, r3
   121e4:	ldr	r3, [r3]
   121e8:	mov	r0, r3
   121ec:	bl	1433c <__assert_fail@plt+0x3200>
   121f0:	ldr	r3, [fp, #-8]
   121f4:	add	r3, r3, #1
   121f8:	str	r3, [fp, #-8]
   121fc:	ldr	r3, [fp, #-16]
   12200:	ldr	r2, [r3, #4]
   12204:	ldr	r3, [fp, #-8]
   12208:	cmp	r2, r3
   1220c:	bhi	121b0 <__assert_fail@plt+0x1074>
   12210:	ldr	r3, [fp, #-16]
   12214:	ldr	r3, [r3, #8]
   12218:	mov	r0, r3
   1221c:	bl	1433c <__assert_fail@plt+0x3200>
   12220:	nop			; (mov r0, r0)
   12224:	sub	sp, fp, #4
   12228:	pop	{fp, pc}
   1222c:	push	{fp, lr}
   12230:	add	fp, sp, #4
   12234:	sub	sp, sp, #16
   12238:	str	r0, [fp, #-16]
   1223c:	str	r1, [fp, #-20]	; 0xffffffec
   12240:	ldr	r3, [fp, #-20]	; 0xffffffec
   12244:	ldr	r2, [r3, #12]
   12248:	ldr	r3, [fp, #-16]
   1224c:	cmp	r2, r3
   12250:	bls	122dc <__assert_fail@plt+0x11a0>
   12254:	ldr	r3, [fp, #-20]	; 0xffffffec
   12258:	ldr	r2, [r3, #20]
   1225c:	ldr	r3, [fp, #-16]
   12260:	lsl	r3, r3, #3
   12264:	add	r3, r2, r3
   12268:	ldr	r3, [r3, #4]
   1226c:	str	r3, [fp, #-8]
   12270:	ldr	r3, [fp, #-8]
   12274:	cmp	r3, #0
   12278:	beq	122ac <__assert_fail@plt+0x1170>
   1227c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12280:	ldr	r2, [r3, #20]
   12284:	ldr	r3, [fp, #-16]
   12288:	lsl	r3, r3, #3
   1228c:	add	r3, r2, r3
   12290:	ldr	r0, [r3]
   12294:	ldr	r3, [pc, #120]	; 12314 <__assert_fail@plt+0x11d8>
   12298:	ldr	r3, [r3]
   1229c:	ldr	r2, [fp, #-8]
   122a0:	mov	r1, #1
   122a4:	bl	10efc <fwrite_unlocked@plt>
   122a8:	b	12308 <__assert_fail@plt+0x11cc>
   122ac:	ldr	r3, [pc, #100]	; 12318 <__assert_fail@plt+0x11dc>
   122b0:	ldr	r3, [r3]
   122b4:	cmp	r3, #0
   122b8:	beq	12308 <__assert_fail@plt+0x11cc>
   122bc:	ldr	r3, [pc, #84]	; 12318 <__assert_fail@plt+0x11dc>
   122c0:	ldr	r2, [r3]
   122c4:	ldr	r3, [pc, #72]	; 12314 <__assert_fail@plt+0x11d8>
   122c8:	ldr	r3, [r3]
   122cc:	mov	r1, r3
   122d0:	mov	r0, r2
   122d4:	bl	10e84 <fputs_unlocked@plt>
   122d8:	b	12308 <__assert_fail@plt+0x11cc>
   122dc:	ldr	r3, [pc, #52]	; 12318 <__assert_fail@plt+0x11dc>
   122e0:	ldr	r3, [r3]
   122e4:	cmp	r3, #0
   122e8:	beq	12308 <__assert_fail@plt+0x11cc>
   122ec:	ldr	r3, [pc, #36]	; 12318 <__assert_fail@plt+0x11dc>
   122f0:	ldr	r2, [r3]
   122f4:	ldr	r3, [pc, #24]	; 12314 <__assert_fail@plt+0x11d8>
   122f8:	ldr	r3, [r3]
   122fc:	mov	r1, r3
   12300:	mov	r0, r2
   12304:	bl	10e84 <fputs_unlocked@plt>
   12308:	nop			; (mov r0, r0)
   1230c:	sub	sp, fp, #4
   12310:	pop	{fp, pc}
   12314:	andeq	sp, r2, r4, lsl #3
   12318:	andeq	sp, r2, r4, asr #3
   1231c:	push	{fp, lr}
   12320:	add	fp, sp, #4
   12324:	sub	sp, sp, #32
   12328:	str	r0, [fp, #-24]	; 0xffffffe8
   1232c:	str	r1, [fp, #-28]	; 0xffffffe4
   12330:	str	r2, [fp, #-32]	; 0xffffffe0
   12334:	ldr	r3, [pc, #228]	; 12420 <__assert_fail@plt+0x12e4>
   12338:	ldrb	r3, [r3]
   1233c:	cmp	r3, #0
   12340:	beq	1234c <__assert_fail@plt+0x1210>
   12344:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12348:	b	12354 <__assert_fail@plt+0x1218>
   1234c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12350:	ldr	r3, [r3, #12]
   12354:	str	r3, [fp, #-12]
   12358:	ldr	r3, [pc, #196]	; 12424 <__assert_fail@plt+0x12e8>
   1235c:	ldr	r3, [r3]
   12360:	cmp	r3, #0
   12364:	blt	12378 <__assert_fail@plt+0x123c>
   12368:	ldr	r3, [pc, #180]	; 12424 <__assert_fail@plt+0x12e8>
   1236c:	ldr	r3, [r3]
   12370:	uxtb	r3, r3
   12374:	b	1237c <__assert_fail@plt+0x1240>
   12378:	mov	r3, #32
   1237c:	strb	r3, [fp, #-13]
   12380:	mov	r3, #0
   12384:	str	r3, [fp, #-8]
   12388:	b	123b0 <__assert_fail@plt+0x1274>
   1238c:	ldrb	r3, [fp, #-13]
   12390:	mov	r0, r3
   12394:	bl	11130 <putchar_unlocked@plt>
   12398:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1239c:	ldr	r0, [fp, #-8]
   123a0:	bl	1222c <__assert_fail@plt+0x10f0>
   123a4:	ldr	r3, [fp, #-8]
   123a8:	add	r3, r3, #1
   123ac:	str	r3, [fp, #-8]
   123b0:	ldr	r2, [fp, #-8]
   123b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   123b8:	cmp	r2, r3
   123bc:	bcs	123d0 <__assert_fail@plt+0x1294>
   123c0:	ldr	r2, [fp, #-8]
   123c4:	ldr	r3, [fp, #-12]
   123c8:	cmp	r2, r3
   123cc:	bcc	1238c <__assert_fail@plt+0x1250>
   123d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   123d4:	add	r3, r3, #1
   123d8:	str	r3, [fp, #-8]
   123dc:	b	12404 <__assert_fail@plt+0x12c8>
   123e0:	ldrb	r3, [fp, #-13]
   123e4:	mov	r0, r3
   123e8:	bl	11130 <putchar_unlocked@plt>
   123ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   123f0:	ldr	r0, [fp, #-8]
   123f4:	bl	1222c <__assert_fail@plt+0x10f0>
   123f8:	ldr	r3, [fp, #-8]
   123fc:	add	r3, r3, #1
   12400:	str	r3, [fp, #-8]
   12404:	ldr	r2, [fp, #-8]
   12408:	ldr	r3, [fp, #-12]
   1240c:	cmp	r2, r3
   12410:	bcc	123e0 <__assert_fail@plt+0x12a4>
   12414:	nop			; (mov r0, r0)
   12418:	sub	sp, fp, #4
   1241c:	pop	{fp, pc}
   12420:	andeq	sp, r2, r8, asr #3
   12424:	andeq	sp, r2, r8, lsl r1
   12428:	push	{fp, lr}
   1242c:	add	fp, sp, #4
   12430:	sub	sp, sp, #32
   12434:	str	r0, [fp, #-32]	; 0xffffffe0
   12438:	str	r1, [fp, #-36]	; 0xffffffdc
   1243c:	ldr	r3, [pc, #420]	; 125e8 <__assert_fail@plt+0x14ac>
   12440:	ldr	r3, [r3]
   12444:	cmp	r3, #0
   12448:	blt	1245c <__assert_fail@plt+0x1320>
   1244c:	ldr	r3, [pc, #404]	; 125e8 <__assert_fail@plt+0x14ac>
   12450:	ldr	r3, [r3]
   12454:	uxtb	r3, r3
   12458:	b	12460 <__assert_fail@plt+0x1324>
   1245c:	mov	r3, #32
   12460:	strb	r3, [fp, #-17]	; 0xffffffef
   12464:	ldr	r3, [pc, #384]	; 125ec <__assert_fail@plt+0x14b0>
   12468:	ldr	r3, [r3, #8]
   1246c:	str	r3, [fp, #-24]	; 0xffffffe8
   12470:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12474:	cmp	r3, #0
   12478:	beq	1254c <__assert_fail@plt+0x1410>
   1247c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12480:	str	r3, [fp, #-16]
   12484:	ldr	r3, [fp, #-16]
   12488:	ldr	r3, [r3]
   1248c:	cmp	r3, #0
   12490:	bne	124d4 <__assert_fail@plt+0x1398>
   12494:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12498:	ldr	r2, [pc, #336]	; 125f0 <__assert_fail@plt+0x14b4>
   1249c:	cmp	r3, r2
   124a0:	bne	124bc <__assert_fail@plt+0x1380>
   124a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   124a8:	str	r3, [fp, #-12]
   124ac:	ldr	r3, [pc, #320]	; 125f4 <__assert_fail@plt+0x14b8>
   124b0:	ldr	r3, [r3]
   124b4:	str	r3, [fp, #-8]
   124b8:	b	12500 <__assert_fail@plt+0x13c4>
   124bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   124c0:	str	r3, [fp, #-12]
   124c4:	ldr	r3, [pc, #300]	; 125f8 <__assert_fail@plt+0x14bc>
   124c8:	ldr	r3, [r3]
   124cc:	str	r3, [fp, #-8]
   124d0:	b	12500 <__assert_fail@plt+0x13c4>
   124d4:	ldr	r3, [fp, #-16]
   124d8:	ldr	r3, [r3]
   124dc:	cmp	r3, #1
   124e0:	bne	124ec <__assert_fail@plt+0x13b0>
   124e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   124e8:	b	124f0 <__assert_fail@plt+0x13b4>
   124ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   124f0:	str	r3, [fp, #-12]
   124f4:	ldr	r3, [fp, #-16]
   124f8:	ldr	r3, [r3, #4]
   124fc:	str	r3, [fp, #-8]
   12500:	ldr	r1, [fp, #-12]
   12504:	ldr	r0, [fp, #-8]
   12508:	bl	1222c <__assert_fail@plt+0x10f0>
   1250c:	ldr	r3, [fp, #-16]
   12510:	ldr	r3, [r3, #8]
   12514:	str	r3, [fp, #-16]
   12518:	ldr	r3, [fp, #-16]
   1251c:	cmp	r3, #0
   12520:	beq	12534 <__assert_fail@plt+0x13f8>
   12524:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12528:	mov	r0, r3
   1252c:	bl	11130 <putchar_unlocked@plt>
   12530:	b	12484 <__assert_fail@plt+0x1348>
   12534:	nop			; (mov r0, r0)
   12538:	ldr	r3, [pc, #188]	; 125fc <__assert_fail@plt+0x14c0>
   1253c:	ldrb	r3, [r3]
   12540:	mov	r0, r3
   12544:	bl	11130 <putchar_unlocked@plt>
   12548:	b	125dc <__assert_fail@plt+0x14a0>
   1254c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12550:	ldr	r2, [pc, #152]	; 125f0 <__assert_fail@plt+0x14b4>
   12554:	cmp	r3, r2
   12558:	bne	12574 <__assert_fail@plt+0x1438>
   1255c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12560:	str	r3, [fp, #-12]
   12564:	ldr	r3, [pc, #136]	; 125f4 <__assert_fail@plt+0x14b8>
   12568:	ldr	r3, [r3]
   1256c:	str	r3, [fp, #-8]
   12570:	b	12588 <__assert_fail@plt+0x144c>
   12574:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12578:	str	r3, [fp, #-12]
   1257c:	ldr	r3, [pc, #116]	; 125f8 <__assert_fail@plt+0x14bc>
   12580:	ldr	r3, [r3]
   12584:	str	r3, [fp, #-8]
   12588:	ldr	r1, [fp, #-12]
   1258c:	ldr	r0, [fp, #-8]
   12590:	bl	1222c <__assert_fail@plt+0x10f0>
   12594:	ldr	r3, [pc, #92]	; 125f8 <__assert_fail@plt+0x14bc>
   12598:	ldr	r1, [r3]
   1259c:	ldr	r3, [pc, #92]	; 12600 <__assert_fail@plt+0x14c4>
   125a0:	ldr	r3, [r3]
   125a4:	mov	r2, r3
   125a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   125ac:	bl	1231c <__assert_fail@plt+0x11e0>
   125b0:	ldr	r3, [pc, #60]	; 125f4 <__assert_fail@plt+0x14b8>
   125b4:	ldr	r1, [r3]
   125b8:	ldr	r3, [pc, #68]	; 12604 <__assert_fail@plt+0x14c8>
   125bc:	ldr	r3, [r3]
   125c0:	mov	r2, r3
   125c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   125c8:	bl	1231c <__assert_fail@plt+0x11e0>
   125cc:	ldr	r3, [pc, #40]	; 125fc <__assert_fail@plt+0x14c0>
   125d0:	ldrb	r3, [r3]
   125d4:	mov	r0, r3
   125d8:	bl	11130 <putchar_unlocked@plt>
   125dc:	nop			; (mov r0, r0)
   125e0:	sub	sp, fp, #4
   125e4:	pop	{fp, pc}
   125e8:	andeq	sp, r2, r8, lsl r1
   125ec:	ldrdeq	sp, [r2], -r4
   125f0:	andeq	sp, r2, r4, ror #3
   125f4:	andeq	sp, r2, r0, lsl r1
   125f8:	andeq	sp, r2, ip, lsl #2
   125fc:	andeq	sp, r2, ip, lsl r1
   12600:	andeq	sp, r2, ip, asr #3
   12604:	ldrdeq	sp, [r2], -r0
   12608:	push	{fp, lr}
   1260c:	add	fp, sp, #4
   12610:	sub	sp, sp, #72	; 0x48
   12614:	str	r0, [fp, #-72]	; 0xffffffb8
   12618:	str	r1, [fp, #-76]	; 0xffffffb4
   1261c:	mov	r1, #2
   12620:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12624:	bl	14034 <__assert_fail@plt+0x2ef8>
   12628:	mov	r1, #2
   1262c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12630:	bl	14034 <__assert_fail@plt+0x2ef8>
   12634:	sub	r3, fp, #52	; 0x34
   12638:	mov	r0, r3
   1263c:	bl	11ff4 <__assert_fail@plt+0xeb8>
   12640:	sub	r3, fp, #52	; 0x34
   12644:	mov	r2, #1
   12648:	mov	r1, r3
   1264c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12650:	bl	12038 <__assert_fail@plt+0xefc>
   12654:	sub	r3, fp, #64	; 0x40
   12658:	mov	r0, r3
   1265c:	bl	11ff4 <__assert_fail@plt+0xeb8>
   12660:	sub	r3, fp, #64	; 0x40
   12664:	mov	r2, #2
   12668:	mov	r1, r3
   1266c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12670:	bl	12038 <__assert_fail@plt+0xefc>
   12674:	ldr	r3, [pc, #1756]	; 12d58 <__assert_fail@plt+0x1c1c>
   12678:	ldrb	r3, [r3]
   1267c:	cmp	r3, #0
   12680:	beq	126d4 <__assert_fail@plt+0x1598>
   12684:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12688:	cmp	r3, #0
   1268c:	beq	126a0 <__assert_fail@plt+0x1564>
   12690:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12694:	ldr	r3, [r3]
   12698:	ldr	r3, [r3, #12]
   1269c:	b	126a4 <__assert_fail@plt+0x1568>
   126a0:	mov	r3, #0
   126a4:	ldr	r2, [pc, #1712]	; 12d5c <__assert_fail@plt+0x1c20>
   126a8:	str	r3, [r2]
   126ac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   126b0:	cmp	r3, #0
   126b4:	beq	126c8 <__assert_fail@plt+0x158c>
   126b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   126bc:	ldr	r3, [r3]
   126c0:	ldr	r3, [r3, #12]
   126c4:	b	126cc <__assert_fail@plt+0x1590>
   126c8:	mov	r3, #0
   126cc:	ldr	r2, [pc, #1676]	; 12d60 <__assert_fail@plt+0x1c24>
   126d0:	str	r3, [r2]
   126d4:	ldr	r3, [pc, #1672]	; 12d64 <__assert_fail@plt+0x1c28>
   126d8:	ldrb	r3, [r3]
   126dc:	cmp	r3, #0
   126e0:	beq	12afc <__assert_fail@plt+0x19c0>
   126e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   126e8:	cmp	r3, #0
   126ec:	bne	126fc <__assert_fail@plt+0x15c0>
   126f0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   126f4:	cmp	r3, #0
   126f8:	beq	12afc <__assert_fail@plt+0x19c0>
   126fc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12700:	cmp	r3, #0
   12704:	beq	12714 <__assert_fail@plt+0x15d8>
   12708:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1270c:	ldr	r3, [r3]
   12710:	b	12718 <__assert_fail@plt+0x15dc>
   12714:	ldr	r3, [pc, #1612]	; 12d68 <__assert_fail@plt+0x1c2c>
   12718:	str	r3, [fp, #-24]	; 0xffffffe8
   1271c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12720:	cmp	r3, #0
   12724:	beq	12734 <__assert_fail@plt+0x15f8>
   12728:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1272c:	ldr	r3, [r3]
   12730:	b	12738 <__assert_fail@plt+0x15fc>
   12734:	ldr	r3, [pc, #1580]	; 12d68 <__assert_fail@plt+0x1c2c>
   12738:	str	r3, [fp, #-28]	; 0xffffffe4
   1273c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12740:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12744:	bl	12428 <__assert_fail@plt+0x12ec>
   12748:	ldr	r3, [pc, #1564]	; 12d6c <__assert_fail@plt+0x1c30>
   1274c:	mov	r2, #0
   12750:	str	r2, [r3]
   12754:	ldr	r3, [pc, #1552]	; 12d6c <__assert_fail@plt+0x1c30>
   12758:	mov	r2, #0
   1275c:	str	r2, [r3, #4]
   12760:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12764:	cmp	r3, #0
   12768:	beq	12780 <__assert_fail@plt+0x1644>
   1276c:	sub	r1, fp, #52	; 0x34
   12770:	mov	r3, #1
   12774:	mov	r2, #1
   12778:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1277c:	bl	1213c <__assert_fail@plt+0x1000>
   12780:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12784:	cmp	r3, #0
   12788:	beq	12afc <__assert_fail@plt+0x19c0>
   1278c:	sub	r1, fp, #64	; 0x40
   12790:	mov	r3, #2
   12794:	mov	r2, #1
   12798:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1279c:	bl	1213c <__assert_fail@plt+0x1000>
   127a0:	b	12afc <__assert_fail@plt+0x19c0>
   127a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   127a8:	ldr	r0, [r3]
   127ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   127b0:	ldr	r1, [r3]
   127b4:	ldr	r3, [pc, #1460]	; 12d70 <__assert_fail@plt+0x1c34>
   127b8:	ldr	r2, [r3]
   127bc:	ldr	r3, [pc, #1456]	; 12d74 <__assert_fail@plt+0x1c38>
   127c0:	ldr	r3, [r3]
   127c4:	bl	1198c <__assert_fail@plt+0x850>
   127c8:	str	r0, [fp, #-32]	; 0xffffffe0
   127cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   127d0:	cmp	r3, #0
   127d4:	bge	12820 <__assert_fail@plt+0x16e4>
   127d8:	ldr	r3, [pc, #1432]	; 12d78 <__assert_fail@plt+0x1c3c>
   127dc:	ldrb	r3, [r3]
   127e0:	cmp	r3, #0
   127e4:	beq	127fc <__assert_fail@plt+0x16c0>
   127e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   127ec:	ldr	r3, [r3]
   127f0:	ldr	r1, [pc, #1392]	; 12d68 <__assert_fail@plt+0x1c2c>
   127f4:	mov	r0, r3
   127f8:	bl	12428 <__assert_fail@plt+0x12ec>
   127fc:	sub	r1, fp, #52	; 0x34
   12800:	mov	r3, #1
   12804:	mov	r2, #1
   12808:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1280c:	bl	1213c <__assert_fail@plt+0x1000>
   12810:	ldr	r3, [pc, #1380]	; 12d7c <__assert_fail@plt+0x1c40>
   12814:	mov	r2, #1
   12818:	strb	r2, [r3]
   1281c:	b	12afc <__assert_fail@plt+0x19c0>
   12820:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12824:	cmp	r3, #0
   12828:	ble	12874 <__assert_fail@plt+0x1738>
   1282c:	ldr	r3, [pc, #1356]	; 12d80 <__assert_fail@plt+0x1c44>
   12830:	ldrb	r3, [r3]
   12834:	cmp	r3, #0
   12838:	beq	12850 <__assert_fail@plt+0x1714>
   1283c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12840:	ldr	r3, [r3]
   12844:	mov	r1, r3
   12848:	ldr	r0, [pc, #1304]	; 12d68 <__assert_fail@plt+0x1c2c>
   1284c:	bl	12428 <__assert_fail@plt+0x12ec>
   12850:	sub	r1, fp, #64	; 0x40
   12854:	mov	r3, #2
   12858:	mov	r2, #1
   1285c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12860:	bl	1213c <__assert_fail@plt+0x1000>
   12864:	ldr	r3, [pc, #1296]	; 12d7c <__assert_fail@plt+0x1c40>
   12868:	mov	r2, #1
   1286c:	strb	r2, [r3]
   12870:	b	12afc <__assert_fail@plt+0x19c0>
   12874:	mov	r3, #0
   12878:	strb	r3, [fp, #-5]
   1287c:	sub	r1, fp, #52	; 0x34
   12880:	mov	r3, #1
   12884:	mov	r2, #0
   12888:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1288c:	bl	1213c <__assert_fail@plt+0x1000>
   12890:	mov	r3, r0
   12894:	eor	r3, r3, #1
   12898:	uxtb	r3, r3
   1289c:	cmp	r3, #0
   128a0:	beq	128bc <__assert_fail@plt+0x1780>
   128a4:	mov	r3, #1
   128a8:	strb	r3, [fp, #-5]
   128ac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   128b0:	add	r3, r3, #1
   128b4:	str	r3, [fp, #-52]	; 0xffffffcc
   128b8:	b	128fc <__assert_fail@plt+0x17c0>
   128bc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   128c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   128c4:	sub	r3, r3, #-1073741823	; 0xc0000001
   128c8:	lsl	r3, r3, #2
   128cc:	add	r3, r2, r3
   128d0:	ldr	r0, [r3]
   128d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   128d8:	ldr	r1, [r3]
   128dc:	ldr	r3, [pc, #1164]	; 12d70 <__assert_fail@plt+0x1c34>
   128e0:	ldr	r2, [r3]
   128e4:	ldr	r3, [pc, #1160]	; 12d74 <__assert_fail@plt+0x1c38>
   128e8:	ldr	r3, [r3]
   128ec:	bl	1198c <__assert_fail@plt+0x850>
   128f0:	mov	r3, r0
   128f4:	cmp	r3, #0
   128f8:	beq	1287c <__assert_fail@plt+0x1740>
   128fc:	mov	r3, #0
   12900:	strb	r3, [fp, #-6]
   12904:	sub	r1, fp, #64	; 0x40
   12908:	mov	r3, #2
   1290c:	mov	r2, #0
   12910:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12914:	bl	1213c <__assert_fail@plt+0x1000>
   12918:	mov	r3, r0
   1291c:	eor	r3, r3, #1
   12920:	uxtb	r3, r3
   12924:	cmp	r3, #0
   12928:	beq	12944 <__assert_fail@plt+0x1808>
   1292c:	mov	r3, #1
   12930:	strb	r3, [fp, #-6]
   12934:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12938:	add	r3, r3, #1
   1293c:	str	r3, [fp, #-64]	; 0xffffffc0
   12940:	b	12984 <__assert_fail@plt+0x1848>
   12944:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12948:	ldr	r0, [r3]
   1294c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12950:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12954:	sub	r3, r3, #-1073741823	; 0xc0000001
   12958:	lsl	r3, r3, #2
   1295c:	add	r3, r2, r3
   12960:	ldr	r1, [r3]
   12964:	ldr	r3, [pc, #1028]	; 12d70 <__assert_fail@plt+0x1c34>
   12968:	ldr	r2, [r3]
   1296c:	ldr	r3, [pc, #1024]	; 12d74 <__assert_fail@plt+0x1c38>
   12970:	ldr	r3, [r3]
   12974:	bl	1198c <__assert_fail@plt+0x850>
   12978:	mov	r3, r0
   1297c:	cmp	r3, #0
   12980:	beq	12904 <__assert_fail@plt+0x17c8>
   12984:	ldr	r3, [pc, #1016]	; 12d84 <__assert_fail@plt+0x1c48>
   12988:	ldrb	r3, [r3]
   1298c:	cmp	r3, #0
   12990:	beq	12a1c <__assert_fail@plt+0x18e0>
   12994:	mov	r3, #0
   12998:	str	r3, [fp, #-12]
   1299c:	b	12a08 <__assert_fail@plt+0x18cc>
   129a0:	mov	r3, #0
   129a4:	str	r3, [fp, #-16]
   129a8:	b	129e8 <__assert_fail@plt+0x18ac>
   129ac:	ldr	r2, [fp, #-44]	; 0xffffffd4
   129b0:	ldr	r3, [fp, #-12]
   129b4:	lsl	r3, r3, #2
   129b8:	add	r3, r2, r3
   129bc:	ldr	r0, [r3]
   129c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   129c4:	ldr	r3, [fp, #-16]
   129c8:	lsl	r3, r3, #2
   129cc:	add	r3, r2, r3
   129d0:	ldr	r3, [r3]
   129d4:	mov	r1, r3
   129d8:	bl	12428 <__assert_fail@plt+0x12ec>
   129dc:	ldr	r3, [fp, #-16]
   129e0:	add	r3, r3, #1
   129e4:	str	r3, [fp, #-16]
   129e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   129ec:	sub	r2, r3, #1
   129f0:	ldr	r3, [fp, #-16]
   129f4:	cmp	r2, r3
   129f8:	bhi	129ac <__assert_fail@plt+0x1870>
   129fc:	ldr	r3, [fp, #-12]
   12a00:	add	r3, r3, #1
   12a04:	str	r3, [fp, #-12]
   12a08:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12a0c:	sub	r2, r3, #1
   12a10:	ldr	r3, [fp, #-12]
   12a14:	cmp	r2, r3
   12a18:	bhi	129a0 <__assert_fail@plt+0x1864>
   12a1c:	ldrb	r3, [fp, #-5]
   12a20:	eor	r3, r3, #1
   12a24:	uxtb	r3, r3
   12a28:	cmp	r3, #0
   12a2c:	beq	12a84 <__assert_fail@plt+0x1948>
   12a30:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12a34:	ldr	r3, [r3]
   12a38:	str	r3, [fp, #-36]	; 0xffffffdc
   12a3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12a40:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12a44:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12a48:	sub	r2, r2, #-1073741823	; 0xc0000001
   12a4c:	lsl	r2, r2, #2
   12a50:	add	r2, r1, r2
   12a54:	ldr	r2, [r2]
   12a58:	str	r2, [r3]
   12a5c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12a60:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12a64:	sub	r3, r3, #-1073741823	; 0xc0000001
   12a68:	lsl	r3, r3, #2
   12a6c:	add	r3, r2, r3
   12a70:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12a74:	str	r2, [r3]
   12a78:	mov	r3, #1
   12a7c:	str	r3, [fp, #-52]	; 0xffffffcc
   12a80:	b	12a8c <__assert_fail@plt+0x1950>
   12a84:	mov	r3, #0
   12a88:	str	r3, [fp, #-52]	; 0xffffffcc
   12a8c:	ldrb	r3, [fp, #-6]
   12a90:	eor	r3, r3, #1
   12a94:	uxtb	r3, r3
   12a98:	cmp	r3, #0
   12a9c:	beq	12af4 <__assert_fail@plt+0x19b8>
   12aa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12aa4:	ldr	r3, [r3]
   12aa8:	str	r3, [fp, #-40]	; 0xffffffd8
   12aac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12ab0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12ab4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12ab8:	sub	r2, r2, #-1073741823	; 0xc0000001
   12abc:	lsl	r2, r2, #2
   12ac0:	add	r2, r1, r2
   12ac4:	ldr	r2, [r2]
   12ac8:	str	r2, [r3]
   12acc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12ad0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12ad4:	sub	r3, r3, #-1073741823	; 0xc0000001
   12ad8:	lsl	r3, r3, #2
   12adc:	add	r3, r2, r3
   12ae0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12ae4:	str	r2, [r3]
   12ae8:	mov	r3, #1
   12aec:	str	r3, [fp, #-64]	; 0xffffffc0
   12af0:	b	12afc <__assert_fail@plt+0x19c0>
   12af4:	mov	r3, #0
   12af8:	str	r3, [fp, #-64]	; 0xffffffc0
   12afc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12b00:	cmp	r3, #0
   12b04:	beq	12b14 <__assert_fail@plt+0x19d8>
   12b08:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12b0c:	cmp	r3, #0
   12b10:	bne	127a4 <__assert_fail@plt+0x1668>
   12b14:	mov	r3, #0
   12b18:	str	r3, [fp, #-68]	; 0xffffffbc
   12b1c:	mov	r3, #0
   12b20:	strb	r3, [fp, #-17]	; 0xffffffef
   12b24:	ldr	r3, [pc, #604]	; 12d88 <__assert_fail@plt+0x1c4c>
   12b28:	ldr	r3, [r3]
   12b2c:	cmp	r3, #2
   12b30:	beq	12b6c <__assert_fail@plt+0x1a30>
   12b34:	ldr	r3, [pc, #592]	; 12d8c <__assert_fail@plt+0x1c50>
   12b38:	ldrb	r3, [r3]
   12b3c:	eor	r3, r3, #1
   12b40:	uxtb	r3, r3
   12b44:	cmp	r3, #0
   12b48:	bne	12b64 <__assert_fail@plt+0x1a28>
   12b4c:	ldr	r3, [pc, #568]	; 12d8c <__assert_fail@plt+0x1c50>
   12b50:	ldrb	r3, [r3, #1]
   12b54:	eor	r3, r3, #1
   12b58:	uxtb	r3, r3
   12b5c:	cmp	r3, #0
   12b60:	beq	12b6c <__assert_fail@plt+0x1a30>
   12b64:	mov	r3, #1
   12b68:	strb	r3, [fp, #-17]	; 0xffffffef
   12b6c:	ldr	r3, [pc, #516]	; 12d78 <__assert_fail@plt+0x1c3c>
   12b70:	ldrb	r3, [r3]
   12b74:	cmp	r3, #0
   12b78:	bne	12b88 <__assert_fail@plt+0x1a4c>
   12b7c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12b80:	cmp	r3, #0
   12b84:	beq	12c44 <__assert_fail@plt+0x1b08>
   12b88:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12b8c:	cmp	r3, #0
   12b90:	beq	12c44 <__assert_fail@plt+0x1b08>
   12b94:	ldr	r3, [pc, #476]	; 12d78 <__assert_fail@plt+0x1c3c>
   12b98:	ldrb	r3, [r3]
   12b9c:	cmp	r3, #0
   12ba0:	beq	12bb8 <__assert_fail@plt+0x1a7c>
   12ba4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12ba8:	ldr	r3, [r3]
   12bac:	ldr	r1, [pc, #436]	; 12d68 <__assert_fail@plt+0x1c2c>
   12bb0:	mov	r0, r3
   12bb4:	bl	12428 <__assert_fail@plt+0x12ec>
   12bb8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12bbc:	cmp	r3, #0
   12bc0:	beq	12c1c <__assert_fail@plt+0x1ae0>
   12bc4:	ldr	r3, [pc, #432]	; 12d7c <__assert_fail@plt+0x1c40>
   12bc8:	mov	r2, #1
   12bcc:	strb	r2, [r3]
   12bd0:	b	12c1c <__assert_fail@plt+0x1ae0>
   12bd4:	ldr	r3, [pc, #412]	; 12d78 <__assert_fail@plt+0x1c3c>
   12bd8:	ldrb	r3, [r3]
   12bdc:	cmp	r3, #0
   12be0:	beq	12bf4 <__assert_fail@plt+0x1ab8>
   12be4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12be8:	ldr	r1, [pc, #376]	; 12d68 <__assert_fail@plt+0x1c2c>
   12bec:	mov	r0, r3
   12bf0:	bl	12428 <__assert_fail@plt+0x12ec>
   12bf4:	ldr	r3, [pc, #400]	; 12d8c <__assert_fail@plt+0x1c50>
   12bf8:	ldrb	r3, [r3]
   12bfc:	cmp	r3, #0
   12c00:	beq	12c1c <__assert_fail@plt+0x1ae0>
   12c04:	ldr	r3, [pc, #364]	; 12d78 <__assert_fail@plt+0x1c3c>
   12c08:	ldrb	r3, [r3]
   12c0c:	eor	r3, r3, #1
   12c10:	uxtb	r3, r3
   12c14:	cmp	r3, #0
   12c18:	bne	12c40 <__assert_fail@plt+0x1b04>
   12c1c:	sub	r3, fp, #68	; 0x44
   12c20:	mov	r2, #1
   12c24:	mov	r1, r3
   12c28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c2c:	bl	11dc0 <__assert_fail@plt+0xc84>
   12c30:	mov	r3, r0
   12c34:	cmp	r3, #0
   12c38:	bne	12bd4 <__assert_fail@plt+0x1a98>
   12c3c:	b	12c44 <__assert_fail@plt+0x1b08>
   12c40:	nop			; (mov r0, r0)
   12c44:	ldr	r3, [pc, #308]	; 12d80 <__assert_fail@plt+0x1c44>
   12c48:	ldrb	r3, [r3]
   12c4c:	cmp	r3, #0
   12c50:	bne	12c60 <__assert_fail@plt+0x1b24>
   12c54:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12c58:	cmp	r3, #0
   12c5c:	beq	12d1c <__assert_fail@plt+0x1be0>
   12c60:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12c64:	cmp	r3, #0
   12c68:	beq	12d1c <__assert_fail@plt+0x1be0>
   12c6c:	ldr	r3, [pc, #268]	; 12d80 <__assert_fail@plt+0x1c44>
   12c70:	ldrb	r3, [r3]
   12c74:	cmp	r3, #0
   12c78:	beq	12c90 <__assert_fail@plt+0x1b54>
   12c7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c80:	ldr	r3, [r3]
   12c84:	mov	r1, r3
   12c88:	ldr	r0, [pc, #216]	; 12d68 <__assert_fail@plt+0x1c2c>
   12c8c:	bl	12428 <__assert_fail@plt+0x12ec>
   12c90:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12c94:	cmp	r3, #0
   12c98:	beq	12cf4 <__assert_fail@plt+0x1bb8>
   12c9c:	ldr	r3, [pc, #216]	; 12d7c <__assert_fail@plt+0x1c40>
   12ca0:	mov	r2, #1
   12ca4:	strb	r2, [r3]
   12ca8:	b	12cf4 <__assert_fail@plt+0x1bb8>
   12cac:	ldr	r3, [pc, #204]	; 12d80 <__assert_fail@plt+0x1c44>
   12cb0:	ldrb	r3, [r3]
   12cb4:	cmp	r3, #0
   12cb8:	beq	12ccc <__assert_fail@plt+0x1b90>
   12cbc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12cc0:	mov	r1, r3
   12cc4:	ldr	r0, [pc, #156]	; 12d68 <__assert_fail@plt+0x1c2c>
   12cc8:	bl	12428 <__assert_fail@plt+0x12ec>
   12ccc:	ldr	r3, [pc, #184]	; 12d8c <__assert_fail@plt+0x1c50>
   12cd0:	ldrb	r3, [r3, #1]
   12cd4:	cmp	r3, #0
   12cd8:	beq	12cf4 <__assert_fail@plt+0x1bb8>
   12cdc:	ldr	r3, [pc, #156]	; 12d80 <__assert_fail@plt+0x1c44>
   12ce0:	ldrb	r3, [r3]
   12ce4:	eor	r3, r3, #1
   12ce8:	uxtb	r3, r3
   12cec:	cmp	r3, #0
   12cf0:	bne	12d18 <__assert_fail@plt+0x1bdc>
   12cf4:	sub	r3, fp, #68	; 0x44
   12cf8:	mov	r2, #2
   12cfc:	mov	r1, r3
   12d00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d04:	bl	11dc0 <__assert_fail@plt+0xc84>
   12d08:	mov	r3, r0
   12d0c:	cmp	r3, #0
   12d10:	bne	12cac <__assert_fail@plt+0x1b70>
   12d14:	b	12d1c <__assert_fail@plt+0x1be0>
   12d18:	nop			; (mov r0, r0)
   12d1c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12d20:	mov	r0, r3
   12d24:	bl	11928 <__assert_fail@plt+0x7ec>
   12d28:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12d2c:	mov	r0, r3
   12d30:	bl	1433c <__assert_fail@plt+0x3200>
   12d34:	sub	r3, fp, #52	; 0x34
   12d38:	mov	r0, r3
   12d3c:	bl	12194 <__assert_fail@plt+0x1058>
   12d40:	sub	r3, fp, #64	; 0x40
   12d44:	mov	r0, r3
   12d48:	bl	12194 <__assert_fail@plt+0x1058>
   12d4c:	nop			; (mov r0, r0)
   12d50:	sub	sp, fp, #4
   12d54:	pop	{fp, pc}
   12d58:	andeq	sp, r2, r8, asr #3
   12d5c:	andeq	sp, r2, ip, asr #3
   12d60:	ldrdeq	sp, [r2], -r0
   12d64:	strdeq	sp, [r2], -sp	; <UNPREDICTABLE>
   12d68:	andeq	sp, r2, r4, ror #3
   12d6c:	muleq	r2, r0, r1
   12d70:	andeq	sp, r2, ip, lsl #2
   12d74:	andeq	sp, r2, r0, lsl r1
   12d78:			; <UNDEFINED> instruction: 0x0002d1b9
   12d7c:			; <UNDEFINED> instruction: 0x0002d1bc
   12d80:			; <UNDEFINED> instruction: 0x0002d1ba
   12d84:			; <UNDEFINED> instruction: 0x0002d1bb
   12d88:	andeq	sp, r2, r0, ror #3
   12d8c:	andeq	sp, r2, r0, asr #3
   12d90:	push	{fp, lr}
   12d94:	add	fp, sp, #4
   12d98:	sub	sp, sp, #16
   12d9c:	str	r0, [fp, #-16]
   12da0:	str	r1, [fp, #-20]	; 0xffffffec
   12da4:	ldr	r3, [fp, #-16]
   12da8:	cmp	r3, #0
   12dac:	beq	12ddc <__assert_fail@plt+0x1ca0>
   12db0:	ldr	r3, [fp, #-16]
   12db4:	cmp	r3, #1
   12db8:	beq	12ddc <__assert_fail@plt+0x1ca0>
   12dbc:	ldr	r3, [fp, #-16]
   12dc0:	cmp	r3, #2
   12dc4:	beq	12ddc <__assert_fail@plt+0x1ca0>
   12dc8:	ldr	r3, [pc, #148]	; 12e64 <__assert_fail@plt+0x1d28>
   12dcc:	ldr	r2, [pc, #148]	; 12e68 <__assert_fail@plt+0x1d2c>
   12dd0:	ldr	r1, [pc, #148]	; 12e6c <__assert_fail@plt+0x1d30>
   12dd4:	ldr	r0, [pc, #148]	; 12e70 <__assert_fail@plt+0x1d34>
   12dd8:	bl	1113c <__assert_fail@plt>
   12ddc:	ldr	r3, [fp, #-16]
   12de0:	cmp	r3, #0
   12de4:	bne	12e08 <__assert_fail@plt+0x1ccc>
   12de8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dec:	cmp	r3, #0
   12df0:	beq	12e08 <__assert_fail@plt+0x1ccc>
   12df4:	ldr	r3, [pc, #104]	; 12e64 <__assert_fail@plt+0x1d28>
   12df8:	mov	r2, #820	; 0x334
   12dfc:	ldr	r1, [pc, #104]	; 12e6c <__assert_fail@plt+0x1d30>
   12e00:	ldr	r0, [pc, #108]	; 12e74 <__assert_fail@plt+0x1d38>
   12e04:	bl	1113c <__assert_fail@plt>
   12e08:	mov	r0, #12
   12e0c:	bl	17910 <__assert_fail@plt+0x67d4>
   12e10:	mov	r3, r0
   12e14:	str	r3, [fp, #-8]
   12e18:	ldr	r3, [fp, #-8]
   12e1c:	ldr	r2, [fp, #-16]
   12e20:	str	r2, [r3]
   12e24:	ldr	r3, [fp, #-8]
   12e28:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e2c:	str	r2, [r3, #4]
   12e30:	ldr	r3, [fp, #-8]
   12e34:	mov	r2, #0
   12e38:	str	r2, [r3, #8]
   12e3c:	ldr	r3, [pc, #52]	; 12e78 <__assert_fail@plt+0x1d3c>
   12e40:	ldr	r3, [r3]
   12e44:	ldr	r2, [fp, #-8]
   12e48:	str	r2, [r3, #8]
   12e4c:	ldr	r2, [pc, #36]	; 12e78 <__assert_fail@plt+0x1d3c>
   12e50:	ldr	r3, [fp, #-8]
   12e54:	str	r3, [r2]
   12e58:	nop			; (mov r0, r0)
   12e5c:	sub	sp, fp, #4
   12e60:	pop	{fp, pc}
   12e64:	andeq	fp, r1, r8, lsr #23
   12e68:	andeq	r0, r0, r3, lsr r3
   12e6c:	andeq	fp, r1, r8, lsr #19
   12e70:			; <UNDEFINED> instruction: 0x0001b9b4
   12e74:	ldrdeq	fp, [r1], -r8
   12e78:	andeq	sp, r2, r4, lsl r1
   12e7c:	push	{r4, fp, lr}
   12e80:	add	fp, sp, #8
   12e84:	sub	sp, sp, #36	; 0x24
   12e88:	str	r0, [fp, #-32]	; 0xffffffe0
   12e8c:	sub	r2, fp, #28
   12e90:	ldr	r3, [pc, #184]	; 12f50 <__assert_fail@plt+0x1e14>
   12e94:	str	r3, [sp]
   12e98:	mov	r3, r2
   12e9c:	mov	r2, #10
   12ea0:	mov	r1, #0
   12ea4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ea8:	bl	18fa4 <__assert_fail@plt+0x7e68>
   12eac:	str	r0, [fp, #-16]
   12eb0:	ldr	r3, [fp, #-16]
   12eb4:	cmp	r3, #1
   12eb8:	beq	12ee0 <__assert_fail@plt+0x1da4>
   12ebc:	ldr	r3, [fp, #-16]
   12ec0:	cmp	r3, #0
   12ec4:	bne	12ef0 <__assert_fail@plt+0x1db4>
   12ec8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12ecc:	mvn	r0, #0
   12ed0:	mov	r1, #0
   12ed4:	cmp	r3, r1
   12ed8:	cmpeq	r2, r0
   12edc:	bls	12ef0 <__assert_fail@plt+0x1db4>
   12ee0:	mvn	r2, #0
   12ee4:	mov	r3, #0
   12ee8:	strd	r2, [fp, #-28]	; 0xffffffe4
   12eec:	b	12f30 <__assert_fail@plt+0x1df4>
   12ef0:	ldr	r3, [fp, #-16]
   12ef4:	cmp	r3, #0
   12ef8:	bne	12f08 <__assert_fail@plt+0x1dcc>
   12efc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12f00:	orrs	r3, r2, r3
   12f04:	bne	12f30 <__assert_fail@plt+0x1df4>
   12f08:	ldr	r0, [pc, #68]	; 12f54 <__assert_fail@plt+0x1e18>
   12f0c:	bl	11004 <gettext@plt>
   12f10:	mov	r4, r0
   12f14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12f18:	bl	16f60 <__assert_fail@plt+0x5e24>
   12f1c:	mov	r3, r0
   12f20:	mov	r2, r4
   12f24:	mov	r1, #0
   12f28:	mov	r0, #1
   12f2c:	bl	10f98 <error@plt>
   12f30:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12f34:	mov	r3, r2
   12f38:	sub	r3, r3, #1
   12f3c:	str	r3, [fp, #-20]	; 0xffffffec
   12f40:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f44:	mov	r0, r3
   12f48:	sub	sp, fp, #8
   12f4c:	pop	{r4, fp, pc}
   12f50:	strdeq	sl, [r1], -r0
   12f54:	strdeq	fp, [r1], -r0
   12f58:	push	{r4, fp, lr}
   12f5c:	add	fp, sp, #8
   12f60:	sub	sp, sp, #20
   12f64:	str	r0, [fp, #-16]
   12f68:	str	r1, [fp, #-20]	; 0xffffffec
   12f6c:	str	r2, [fp, #-24]	; 0xffffffe8
   12f70:	ldr	r3, [fp, #-16]
   12f74:	ldrb	r3, [r3]
   12f78:	cmp	r3, #48	; 0x30
   12f7c:	beq	12f94 <__assert_fail@plt+0x1e58>
   12f80:	cmp	r3, #48	; 0x30
   12f84:	blt	1305c <__assert_fail@plt+0x1f20>
   12f88:	cmp	r3, #50	; 0x32
   12f8c:	bgt	1305c <__assert_fail@plt+0x1f20>
   12f90:	b	12fec <__assert_fail@plt+0x1eb0>
   12f94:	ldr	r3, [fp, #-16]
   12f98:	add	r3, r3, #1
   12f9c:	ldrb	r3, [r3]
   12fa0:	cmp	r3, #0
   12fa4:	beq	12fd0 <__assert_fail@plt+0x1e94>
   12fa8:	ldr	r0, [pc, #224]	; 13090 <__assert_fail@plt+0x1f54>
   12fac:	bl	11004 <gettext@plt>
   12fb0:	mov	r4, r0
   12fb4:	ldr	r0, [fp, #-16]
   12fb8:	bl	16f60 <__assert_fail@plt+0x5e24>
   12fbc:	mov	r3, r0
   12fc0:	mov	r2, r4
   12fc4:	mov	r1, #0
   12fc8:	mov	r0, #1
   12fcc:	bl	10f98 <error@plt>
   12fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fd4:	mov	r2, #0
   12fd8:	str	r2, [r3]
   12fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12fe0:	mov	r2, #0
   12fe4:	str	r2, [r3]
   12fe8:	b	13084 <__assert_fail@plt+0x1f48>
   12fec:	ldr	r3, [fp, #-16]
   12ff0:	add	r3, r3, #1
   12ff4:	ldrb	r3, [r3]
   12ff8:	cmp	r3, #46	; 0x2e
   12ffc:	beq	13028 <__assert_fail@plt+0x1eec>
   13000:	ldr	r0, [pc, #136]	; 13090 <__assert_fail@plt+0x1f54>
   13004:	bl	11004 <gettext@plt>
   13008:	mov	r4, r0
   1300c:	ldr	r0, [fp, #-16]
   13010:	bl	16f60 <__assert_fail@plt+0x5e24>
   13014:	mov	r3, r0
   13018:	mov	r2, r4
   1301c:	mov	r1, #0
   13020:	mov	r0, #1
   13024:	bl	10f98 <error@plt>
   13028:	ldr	r3, [fp, #-16]
   1302c:	ldrb	r3, [r3]
   13030:	sub	r2, r3, #48	; 0x30
   13034:	ldr	r3, [fp, #-20]	; 0xffffffec
   13038:	str	r2, [r3]
   1303c:	ldr	r3, [fp, #-16]
   13040:	add	r3, r3, #2
   13044:	mov	r0, r3
   13048:	bl	12e7c <__assert_fail@plt+0x1d40>
   1304c:	mov	r2, r0
   13050:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13054:	str	r2, [r3]
   13058:	b	13084 <__assert_fail@plt+0x1f48>
   1305c:	ldr	r0, [pc, #48]	; 13094 <__assert_fail@plt+0x1f58>
   13060:	bl	11004 <gettext@plt>
   13064:	mov	r4, r0
   13068:	ldr	r0, [fp, #-16]
   1306c:	bl	16f60 <__assert_fail@plt+0x5e24>
   13070:	mov	r3, r0
   13074:	mov	r2, r4
   13078:	mov	r1, #0
   1307c:	mov	r0, #1
   13080:	bl	10f98 <error@plt>
   13084:	nop			; (mov r0, r0)
   13088:	sub	sp, fp, #8
   1308c:	pop	{r4, fp, pc}
   13090:	andeq	fp, r1, ip, lsl #20
   13094:	andeq	fp, r1, r8, lsr #20
   13098:	push	{fp, lr}
   1309c:	add	fp, sp, #4
   130a0:	sub	sp, sp, #24
   130a4:	str	r0, [fp, #-24]	; 0xffffffe8
   130a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130ac:	str	r3, [fp, #-8]
   130b0:	ldr	r3, [fp, #-8]
   130b4:	str	r3, [fp, #-12]
   130b8:	ldr	r1, [pc, #104]	; 13128 <__assert_fail@plt+0x1fec>
   130bc:	ldr	r0, [fp, #-8]
   130c0:	bl	110e8 <strpbrk@plt>
   130c4:	str	r0, [fp, #-8]
   130c8:	ldr	r3, [fp, #-8]
   130cc:	cmp	r3, #0
   130d0:	beq	130e8 <__assert_fail@plt+0x1fac>
   130d4:	ldr	r3, [fp, #-8]
   130d8:	add	r2, r3, #1
   130dc:	str	r2, [fp, #-8]
   130e0:	mov	r2, #0
   130e4:	strb	r2, [r3]
   130e8:	sub	r2, fp, #20
   130ec:	sub	r3, fp, #16
   130f0:	mov	r1, r3
   130f4:	ldr	r0, [fp, #-12]
   130f8:	bl	12f58 <__assert_fail@plt+0x1e1c>
   130fc:	ldr	r3, [fp, #-16]
   13100:	ldr	r2, [fp, #-20]	; 0xffffffec
   13104:	mov	r1, r2
   13108:	mov	r0, r3
   1310c:	bl	12d90 <__assert_fail@plt+0x1c54>
   13110:	ldr	r3, [fp, #-8]
   13114:	cmp	r3, #0
   13118:	bne	130b0 <__assert_fail@plt+0x1f74>
   1311c:	nop			; (mov r0, r0)
   13120:	sub	sp, fp, #4
   13124:	pop	{fp, pc}
   13128:	andeq	fp, r1, r0, asr sl
   1312c:	push	{fp, lr}
   13130:	add	fp, sp, #4
   13134:	sub	sp, sp, #24
   13138:	str	r0, [fp, #-16]
   1313c:	str	r1, [fp, #-20]	; 0xffffffec
   13140:	ldr	r3, [fp, #-16]
   13144:	ldr	r3, [r3]
   13148:	cmn	r3, #1
   1314c:	beq	131a4 <__assert_fail@plt+0x2068>
   13150:	ldr	r3, [fp, #-16]
   13154:	ldr	r2, [r3]
   13158:	ldr	r3, [fp, #-20]	; 0xffffffec
   1315c:	cmp	r2, r3
   13160:	beq	131a4 <__assert_fail@plt+0x2068>
   13164:	ldr	r3, [fp, #-16]
   13168:	ldr	r3, [r3]
   1316c:	add	r3, r3, #1
   13170:	str	r3, [fp, #-8]
   13174:	ldr	r3, [fp, #-20]	; 0xffffffec
   13178:	add	r3, r3, #1
   1317c:	str	r3, [fp, #-12]
   13180:	ldr	r0, [pc, #52]	; 131bc <__assert_fail@plt+0x2080>
   13184:	bl	11004 <gettext@plt>
   13188:	mov	r2, r0
   1318c:	ldr	r3, [fp, #-12]
   13190:	str	r3, [sp]
   13194:	ldr	r3, [fp, #-8]
   13198:	mov	r1, #0
   1319c:	mov	r0, #1
   131a0:	bl	10f98 <error@plt>
   131a4:	ldr	r3, [fp, #-16]
   131a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   131ac:	str	r2, [r3]
   131b0:	nop			; (mov r0, r0)
   131b4:	sub	sp, fp, #4
   131b8:	pop	{fp, pc}
   131bc:	andeq	fp, r1, r4, asr sl
   131c0:	push	{r4, fp, lr}
   131c4:	add	fp, sp, #8
   131c8:	sub	sp, sp, #36	; 0x24
   131cc:	str	r0, [fp, #-32]	; 0xffffffe0
   131d0:	str	r1, [fp, #-36]	; 0xffffffdc
   131d4:	str	r2, [fp, #-40]	; 0xffffffd8
   131d8:	str	r3, [fp, #-44]	; 0xffffffd4
   131dc:	ldr	r3, [fp, #4]
   131e0:	ldr	r3, [r3]
   131e4:	str	r3, [fp, #-16]
   131e8:	ldr	r3, [fp, #-16]
   131ec:	cmp	r3, #2
   131f0:	bne	13330 <__assert_fail@plt+0x21f4>
   131f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   131f8:	ldr	r3, [r3]
   131fc:	cmp	r3, #0
   13200:	moveq	r3, #1
   13204:	movne	r3, #0
   13208:	strb	r3, [fp, #-17]	; 0xffffffef
   1320c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13210:	lsl	r3, r3, #2
   13214:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13218:	add	r3, r2, r3
   1321c:	ldr	r3, [r3]
   13220:	str	r3, [fp, #-24]	; 0xffffffe8
   13224:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13228:	lsl	r3, r3, #2
   1322c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13230:	add	r3, r2, r3
   13234:	ldr	r3, [r3]
   13238:	cmp	r3, #3
   1323c:	ldrls	pc, [pc, r3, lsl #2]
   13240:	b	132f4 <__assert_fail@plt+0x21b8>
   13244:	andeq	r3, r1, r4, asr r2
   13248:	andeq	r3, r1, r8, lsl #5
   1324c:			; <UNDEFINED> instruction: 0x000132b8
   13250:	andeq	r3, r1, r8, ror #5
   13254:	ldr	r0, [pc, #320]	; 1339c <__assert_fail@plt+0x2260>
   13258:	bl	11004 <gettext@plt>
   1325c:	mov	r4, r0
   13260:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13264:	mov	r0, #4
   13268:	bl	16b68 <__assert_fail@plt+0x5a2c>
   1326c:	mov	r3, r0
   13270:	mov	r2, r4
   13274:	mov	r1, #0
   13278:	mov	r0, #0
   1327c:	bl	10f98 <error@plt>
   13280:	mov	r0, #1
   13284:	bl	11478 <__assert_fail@plt+0x33c>
   13288:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1328c:	ldr	r3, [r3]
   13290:	sub	r2, r3, #1
   13294:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13298:	str	r2, [r3]
   1329c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   132a0:	bl	12e7c <__assert_fail@plt+0x1d40>
   132a4:	mov	r3, r0
   132a8:	mov	r1, r3
   132ac:	ldr	r0, [pc, #236]	; 133a0 <__assert_fail@plt+0x2264>
   132b0:	bl	1312c <__assert_fail@plt+0x1ff0>
   132b4:	b	132f4 <__assert_fail@plt+0x21b8>
   132b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   132bc:	add	r3, r3, #4
   132c0:	ldr	r2, [r3]
   132c4:	sub	r2, r2, #1
   132c8:	str	r2, [r3]
   132cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   132d0:	bl	12e7c <__assert_fail@plt+0x1d40>
   132d4:	mov	r3, r0
   132d8:	mov	r1, r3
   132dc:	ldr	r0, [pc, #192]	; 133a4 <__assert_fail@plt+0x2268>
   132e0:	bl	1312c <__assert_fail@plt+0x1ff0>
   132e4:	b	132f4 <__assert_fail@plt+0x21b8>
   132e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   132ec:	bl	13098 <__assert_fail@plt+0x1f5c>
   132f0:	nop			; (mov r0, r0)
   132f4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   132f8:	eor	r3, r3, #1
   132fc:	uxtb	r3, r3
   13300:	cmp	r3, #0
   13304:	beq	13328 <__assert_fail@plt+0x21ec>
   13308:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1330c:	ldr	r2, [r3, #4]
   13310:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13314:	str	r2, [r3]
   13318:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1331c:	ldr	r2, [r3, #4]
   13320:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13324:	str	r2, [r3]
   13328:	mov	r3, #1
   1332c:	str	r3, [fp, #-16]
   13330:	ldr	r3, [fp, #-16]
   13334:	lsl	r3, r3, #2
   13338:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1333c:	add	r3, r2, r3
   13340:	ldr	r2, [fp, #8]
   13344:	ldr	r2, [r2]
   13348:	str	r2, [r3]
   1334c:	ldr	r3, [fp, #-16]
   13350:	lsl	r3, r3, #2
   13354:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13358:	add	r3, r2, r3
   1335c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13360:	str	r2, [r3]
   13364:	ldr	r3, [fp, #-16]
   13368:	add	r2, r3, #1
   1336c:	ldr	r3, [fp, #4]
   13370:	str	r2, [r3]
   13374:	ldr	r3, [fp, #8]
   13378:	ldr	r3, [r3]
   1337c:	cmp	r3, #3
   13380:	bne	13390 <__assert_fail@plt+0x2254>
   13384:	ldr	r3, [fp, #12]
   13388:	mov	r2, #3
   1338c:	str	r2, [r3]
   13390:	nop			; (mov r0, r0)
   13394:	sub	sp, fp, #8
   13398:	pop	{r4, fp, pc}
   1339c:	andeq	fp, r1, r8, ror sl
   133a0:	andeq	sp, r2, ip, lsl #2
   133a4:	andeq	sp, r2, r0, lsl r1
   133a8:	push	{r4, fp, lr}
   133ac:	add	fp, sp, #8
   133b0:	sub	sp, sp, #84	; 0x54
   133b4:	str	r0, [fp, #-72]	; 0xffffffb8
   133b8:	str	r1, [fp, #-76]	; 0xffffffb4
   133bc:	mov	r3, #0
   133c0:	str	r3, [fp, #-44]	; 0xffffffd4
   133c4:	mov	r3, #0
   133c8:	str	r3, [fp, #-60]	; 0xffffffc4
   133cc:	mov	r3, #0
   133d0:	str	r3, [fp, #-56]	; 0xffffffc8
   133d4:	mov	r3, #0
   133d8:	str	r3, [fp, #-64]	; 0xffffffc0
   133dc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   133e0:	ldr	r3, [r3]
   133e4:	mov	r0, r3
   133e8:	bl	14830 <__assert_fail@plt+0x36f4>
   133ec:	ldr	r1, [pc, #2480]	; 13da4 <__assert_fail@plt+0x2c68>
   133f0:	mov	r0, #6
   133f4:	bl	110ac <setlocale@plt>
   133f8:	ldr	r1, [pc, #2472]	; 13da8 <__assert_fail@plt+0x2c6c>
   133fc:	ldr	r0, [pc, #2472]	; 13dac <__assert_fail@plt+0x2c70>
   13400:	bl	110f4 <bindtextdomain@plt>
   13404:	ldr	r0, [pc, #2464]	; 13dac <__assert_fail@plt+0x2c70>
   13408:	bl	10f38 <textdomain@plt>
   1340c:	mov	r0, #3
   13410:	bl	144ac <__assert_fail@plt+0x3370>
   13414:	mov	r3, r0
   13418:	mov	r2, r3
   1341c:	ldr	r3, [pc, #2444]	; 13db0 <__assert_fail@plt+0x2c74>
   13420:	strb	r2, [r3]
   13424:	ldr	r0, [pc, #2440]	; 13db4 <__assert_fail@plt+0x2c78>
   13428:	bl	1add4 <__assert_fail@plt+0x9c98>
   1342c:	ldr	r0, [pc, #2436]	; 13db8 <__assert_fail@plt+0x2c7c>
   13430:	bl	1add4 <__assert_fail@plt+0x9c98>
   13434:	ldr	r3, [pc, #2432]	; 13dbc <__assert_fail@plt+0x2c80>
   13438:	mov	r2, #1
   1343c:	strb	r2, [r3]
   13440:	ldr	r3, [pc, #2424]	; 13dc0 <__assert_fail@plt+0x2c84>
   13444:	mov	r2, #0
   13448:	strb	r2, [r3]
   1344c:	ldr	r3, [pc, #2416]	; 13dc4 <__assert_fail@plt+0x2c88>
   13450:	mov	r2, #0
   13454:	strb	r2, [r3, #1]
   13458:	ldr	r3, [pc, #2404]	; 13dc4 <__assert_fail@plt+0x2c88>
   1345c:	ldrb	r2, [r3, #1]
   13460:	ldr	r3, [pc, #2396]	; 13dc4 <__assert_fail@plt+0x2c88>
   13464:	strb	r2, [r3]
   13468:	ldr	r3, [pc, #2392]	; 13dc8 <__assert_fail@plt+0x2c8c>
   1346c:	mov	r2, #0
   13470:	str	r2, [r3]
   13474:	b	139b0 <__assert_fail@plt+0x2874>
   13478:	mov	r3, #0
   1347c:	str	r3, [fp, #-40]	; 0xffffffd8
   13480:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13484:	cmp	r3, #105	; 0x69
   13488:	beq	13658 <__assert_fail@plt+0x251c>
   1348c:	cmp	r3, #105	; 0x69
   13490:	bgt	134dc <__assert_fail@plt+0x23a0>
   13494:	cmp	r3, #49	; 0x31
   13498:	beq	13668 <__assert_fail@plt+0x252c>
   1349c:	cmp	r3, #49	; 0x31
   134a0:	bgt	134c0 <__assert_fail@plt+0x2384>
   134a4:	cmn	r3, #2
   134a8:	beq	13960 <__assert_fail@plt+0x2824>
   134ac:	cmp	r3, #1
   134b0:	beq	13918 <__assert_fail@plt+0x27dc>
   134b4:	cmn	r3, #3
   134b8:	beq	13968 <__assert_fail@plt+0x282c>
   134bc:	b	139a0 <__assert_fail@plt+0x2864>
   134c0:	cmp	r3, #97	; 0x61
   134c4:	beq	1354c <__assert_fail@plt+0x2410>
   134c8:	cmp	r3, #101	; 0x65
   134cc:	beq	135f0 <__assert_fail@plt+0x24b4>
   134d0:	cmp	r3, #50	; 0x32
   134d4:	beq	1368c <__assert_fail@plt+0x2550>
   134d8:	b	139a0 <__assert_fail@plt+0x2864>
   134dc:	cmp	r3, #118	; 0x76
   134e0:	beq	13540 <__assert_fail@plt+0x2404>
   134e4:	cmp	r3, #118	; 0x76
   134e8:	bgt	13508 <__assert_fail@plt+0x23cc>
   134ec:	cmp	r3, #111	; 0x6f
   134f0:	beq	137b0 <__assert_fail@plt+0x2674>
   134f4:	cmp	r3, #116	; 0x74
   134f8:	beq	137fc <__assert_fail@plt+0x26c0>
   134fc:	cmp	r3, #106	; 0x6a
   13500:	beq	136b0 <__assert_fail@plt+0x2574>
   13504:	b	139a0 <__assert_fail@plt+0x2864>
   13508:	cmp	r3, #256	; 0x100
   1350c:	beq	13908 <__assert_fail@plt+0x27cc>
   13510:	cmp	r3, #256	; 0x100
   13514:	bgt	13524 <__assert_fail@plt+0x23e8>
   13518:	cmp	r3, #122	; 0x7a
   1351c:	beq	138e8 <__assert_fail@plt+0x27ac>
   13520:	b	139a0 <__assert_fail@plt+0x2864>
   13524:	ldr	r2, [pc, #2208]	; 13dcc <__assert_fail@plt+0x2c90>
   13528:	cmp	r3, r2
   1352c:	beq	138f8 <__assert_fail@plt+0x27bc>
   13530:	ldr	r2, [pc, #2200]	; 13dd0 <__assert_fail@plt+0x2c94>
   13534:	cmp	r3, r2
   13538:	beq	13950 <__assert_fail@plt+0x2814>
   1353c:	b	139a0 <__assert_fail@plt+0x2864>
   13540:	ldr	r3, [pc, #2164]	; 13dbc <__assert_fail@plt+0x2c80>
   13544:	mov	r2, #0
   13548:	strb	r2, [r3]
   1354c:	ldr	r3, [pc, #2176]	; 13dd4 <__assert_fail@plt+0x2c98>
   13550:	ldr	r0, [r3]
   13554:	sub	r2, fp, #68	; 0x44
   13558:	ldr	r3, [pc, #2116]	; 13da4 <__assert_fail@plt+0x2c68>
   1355c:	str	r3, [sp]
   13560:	mov	r3, r2
   13564:	mov	r2, #10
   13568:	mov	r1, #0
   1356c:	bl	187a4 <__assert_fail@plt+0x7668>
   13570:	mov	r3, r0
   13574:	cmp	r3, #0
   13578:	bne	13594 <__assert_fail@plt+0x2458>
   1357c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13580:	cmp	r3, #1
   13584:	beq	135c4 <__assert_fail@plt+0x2488>
   13588:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1358c:	cmp	r3, #2
   13590:	beq	135c4 <__assert_fail@plt+0x2488>
   13594:	ldr	r0, [pc, #2108]	; 13dd8 <__assert_fail@plt+0x2c9c>
   13598:	bl	11004 <gettext@plt>
   1359c:	mov	r4, r0
   135a0:	ldr	r3, [pc, #2092]	; 13dd4 <__assert_fail@plt+0x2c98>
   135a4:	ldr	r3, [r3]
   135a8:	mov	r0, r3
   135ac:	bl	16f60 <__assert_fail@plt+0x5e24>
   135b0:	mov	r3, r0
   135b4:	mov	r2, r4
   135b8:	mov	r1, #0
   135bc:	mov	r0, #1
   135c0:	bl	10f98 <error@plt>
   135c4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   135c8:	cmp	r3, #1
   135cc:	bne	135e0 <__assert_fail@plt+0x24a4>
   135d0:	ldr	r3, [pc, #2052]	; 13ddc <__assert_fail@plt+0x2ca0>
   135d4:	mov	r2, #1
   135d8:	strb	r2, [r3]
   135dc:	b	139a8 <__assert_fail@plt+0x286c>
   135e0:	ldr	r3, [pc, #2040]	; 13de0 <__assert_fail@plt+0x2ca4>
   135e4:	mov	r2, #1
   135e8:	strb	r2, [r3]
   135ec:	b	139a8 <__assert_fail@plt+0x286c>
   135f0:	ldr	r3, [pc, #2028]	; 13de4 <__assert_fail@plt+0x2ca8>
   135f4:	ldr	r3, [r3]
   135f8:	cmp	r3, #0
   135fc:	beq	13644 <__assert_fail@plt+0x2508>
   13600:	ldr	r3, [pc, #2012]	; 13de4 <__assert_fail@plt+0x2ca8>
   13604:	ldr	r2, [r3]
   13608:	ldr	r3, [pc, #1988]	; 13dd4 <__assert_fail@plt+0x2c98>
   1360c:	ldr	r3, [r3]
   13610:	mov	r1, r3
   13614:	mov	r0, r2
   13618:	bl	10e9c <strcmp@plt>
   1361c:	mov	r3, r0
   13620:	cmp	r3, #0
   13624:	beq	13644 <__assert_fail@plt+0x2508>
   13628:	ldr	r0, [pc, #1976]	; 13de8 <__assert_fail@plt+0x2cac>
   1362c:	bl	11004 <gettext@plt>
   13630:	mov	r3, r0
   13634:	mov	r2, r3
   13638:	mov	r1, #0
   1363c:	mov	r0, #1
   13640:	bl	10f98 <error@plt>
   13644:	ldr	r3, [pc, #1928]	; 13dd4 <__assert_fail@plt+0x2c98>
   13648:	ldr	r3, [r3]
   1364c:	ldr	r2, [pc, #1936]	; 13de4 <__assert_fail@plt+0x2ca8>
   13650:	str	r3, [r2]
   13654:	b	139a8 <__assert_fail@plt+0x286c>
   13658:	ldr	r3, [pc, #1932]	; 13dec <__assert_fail@plt+0x2cb0>
   1365c:	mov	r2, #1
   13660:	strb	r2, [r3]
   13664:	b	139a8 <__assert_fail@plt+0x286c>
   13668:	ldr	r3, [pc, #1892]	; 13dd4 <__assert_fail@plt+0x2c98>
   1366c:	ldr	r3, [r3]
   13670:	mov	r0, r3
   13674:	bl	12e7c <__assert_fail@plt+0x1d40>
   13678:	mov	r3, r0
   1367c:	mov	r1, r3
   13680:	ldr	r0, [pc, #1896]	; 13df0 <__assert_fail@plt+0x2cb4>
   13684:	bl	1312c <__assert_fail@plt+0x1ff0>
   13688:	b	139a8 <__assert_fail@plt+0x286c>
   1368c:	ldr	r3, [pc, #1856]	; 13dd4 <__assert_fail@plt+0x2c98>
   13690:	ldr	r3, [r3]
   13694:	mov	r0, r3
   13698:	bl	12e7c <__assert_fail@plt+0x1d40>
   1369c:	mov	r3, r0
   136a0:	mov	r1, r3
   136a4:	ldr	r0, [pc, #1864]	; 13df4 <__assert_fail@plt+0x2cb8>
   136a8:	bl	1312c <__assert_fail@plt+0x1ff0>
   136ac:	b	139a8 <__assert_fail@plt+0x286c>
   136b0:	ldr	r3, [pc, #1820]	; 13dd4 <__assert_fail@plt+0x2c98>
   136b4:	ldr	r3, [r3]
   136b8:	ldrb	r3, [r3]
   136bc:	cmp	r3, #49	; 0x31
   136c0:	beq	136d8 <__assert_fail@plt+0x259c>
   136c4:	ldr	r3, [pc, #1800]	; 13dd4 <__assert_fail@plt+0x2c98>
   136c8:	ldr	r3, [r3]
   136cc:	ldrb	r3, [r3]
   136d0:	cmp	r3, #50	; 0x32
   136d4:	bne	13778 <__assert_fail@plt+0x263c>
   136d8:	ldr	r3, [pc, #1780]	; 13dd4 <__assert_fail@plt+0x2c98>
   136dc:	ldr	r3, [r3]
   136e0:	add	r3, r3, #1
   136e4:	ldrb	r3, [r3]
   136e8:	cmp	r3, #0
   136ec:	bne	13778 <__assert_fail@plt+0x263c>
   136f0:	ldr	r3, [pc, #1792]	; 13df8 <__assert_fail@plt+0x2cbc>
   136f4:	ldr	r3, [r3]
   136f8:	sub	r3, r3, #-1073741823	; 0xc0000001
   136fc:	lsl	r3, r3, #2
   13700:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13704:	add	r3, r2, r3
   13708:	ldr	r3, [r3]
   1370c:	add	r2, r3, #2
   13710:	ldr	r3, [pc, #1724]	; 13dd4 <__assert_fail@plt+0x2c98>
   13714:	ldr	r3, [r3]
   13718:	cmp	r2, r3
   1371c:	bne	13778 <__assert_fail@plt+0x263c>
   13720:	ldr	r3, [pc, #1708]	; 13dd4 <__assert_fail@plt+0x2c98>
   13724:	ldr	r3, [r3]
   13728:	ldrb	r3, [r3]
   1372c:	cmp	r3, #50	; 0x32
   13730:	moveq	r3, #1
   13734:	movne	r3, #0
   13738:	strb	r3, [fp, #-25]	; 0xffffffe7
   1373c:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13740:	lsl	r3, r2, #2
   13744:	sub	r1, fp, #12
   13748:	add	r3, r1, r3
   1374c:	ldr	r3, [r3, #-48]	; 0xffffffd0
   13750:	add	r1, r3, #1
   13754:	lsl	r3, r2, #2
   13758:	sub	r2, fp, #12
   1375c:	add	r3, r2, r3
   13760:	str	r1, [r3, #-48]	; 0xffffffd0
   13764:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13768:	add	r3, r3, #1
   1376c:	str	r3, [fp, #-40]	; 0xffffffd8
   13770:	nop			; (mov r0, r0)
   13774:	b	139a8 <__assert_fail@plt+0x286c>
   13778:	ldr	r3, [pc, #1620]	; 13dd4 <__assert_fail@plt+0x2c98>
   1377c:	ldr	r3, [r3]
   13780:	mov	r0, r3
   13784:	bl	12e7c <__assert_fail@plt+0x1d40>
   13788:	mov	r3, r0
   1378c:	mov	r1, r3
   13790:	ldr	r0, [pc, #1624]	; 13df0 <__assert_fail@plt+0x2cb4>
   13794:	bl	1312c <__assert_fail@plt+0x1ff0>
   13798:	ldr	r3, [pc, #1616]	; 13df0 <__assert_fail@plt+0x2cb4>
   1379c:	ldr	r3, [r3]
   137a0:	mov	r1, r3
   137a4:	ldr	r0, [pc, #1608]	; 13df4 <__assert_fail@plt+0x2cb8>
   137a8:	bl	1312c <__assert_fail@plt+0x1ff0>
   137ac:	b	139a8 <__assert_fail@plt+0x286c>
   137b0:	ldr	r3, [pc, #1564]	; 13dd4 <__assert_fail@plt+0x2c98>
   137b4:	ldr	r3, [r3]
   137b8:	ldr	r1, [pc, #1596]	; 13dfc <__assert_fail@plt+0x2cc0>
   137bc:	mov	r0, r3
   137c0:	bl	10e9c <strcmp@plt>
   137c4:	mov	r3, r0
   137c8:	cmp	r3, #0
   137cc:	bne	137e0 <__assert_fail@plt+0x26a4>
   137d0:	ldr	r3, [pc, #1576]	; 13e00 <__assert_fail@plt+0x2cc4>
   137d4:	mov	r2, #1
   137d8:	strb	r2, [r3]
   137dc:	b	139a8 <__assert_fail@plt+0x286c>
   137e0:	ldr	r3, [pc, #1516]	; 13dd4 <__assert_fail@plt+0x2c98>
   137e4:	ldr	r3, [r3]
   137e8:	mov	r0, r3
   137ec:	bl	13098 <__assert_fail@plt+0x1f5c>
   137f0:	mov	r3, #3
   137f4:	str	r3, [fp, #-40]	; 0xffffffd8
   137f8:	b	139a8 <__assert_fail@plt+0x286c>
   137fc:	ldr	r3, [pc, #1488]	; 13dd4 <__assert_fail@plt+0x2c98>
   13800:	ldr	r3, [r3]
   13804:	ldrb	r3, [r3]
   13808:	strb	r3, [fp, #-17]	; 0xffffffef
   1380c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13810:	cmp	r3, #0
   13814:	bne	13824 <__assert_fail@plt+0x26e8>
   13818:	mov	r3, #10
   1381c:	strb	r3, [fp, #-17]	; 0xffffffef
   13820:	b	13898 <__assert_fail@plt+0x275c>
   13824:	ldr	r3, [pc, #1448]	; 13dd4 <__assert_fail@plt+0x2c98>
   13828:	ldr	r3, [r3]
   1382c:	add	r3, r3, #1
   13830:	ldrb	r3, [r3]
   13834:	cmp	r3, #0
   13838:	beq	13898 <__assert_fail@plt+0x275c>
   1383c:	ldr	r3, [pc, #1424]	; 13dd4 <__assert_fail@plt+0x2c98>
   13840:	ldr	r3, [r3]
   13844:	ldr	r1, [pc, #1464]	; 13e04 <__assert_fail@plt+0x2cc8>
   13848:	mov	r0, r3
   1384c:	bl	10e9c <strcmp@plt>
   13850:	mov	r3, r0
   13854:	cmp	r3, #0
   13858:	bne	13868 <__assert_fail@plt+0x272c>
   1385c:	mov	r3, #0
   13860:	strb	r3, [fp, #-17]	; 0xffffffef
   13864:	b	13898 <__assert_fail@plt+0x275c>
   13868:	ldr	r0, [pc, #1432]	; 13e08 <__assert_fail@plt+0x2ccc>
   1386c:	bl	11004 <gettext@plt>
   13870:	mov	r4, r0
   13874:	ldr	r3, [pc, #1368]	; 13dd4 <__assert_fail@plt+0x2c98>
   13878:	ldr	r3, [r3]
   1387c:	mov	r0, r3
   13880:	bl	16f60 <__assert_fail@plt+0x5e24>
   13884:	mov	r3, r0
   13888:	mov	r2, r4
   1388c:	mov	r1, #0
   13890:	mov	r0, #1
   13894:	bl	10f98 <error@plt>
   13898:	ldr	r3, [pc, #1388]	; 13e0c <__assert_fail@plt+0x2cd0>
   1389c:	ldr	r3, [r3]
   138a0:	cmp	r3, #0
   138a4:	blt	138d8 <__assert_fail@plt+0x279c>
   138a8:	ldrb	r2, [fp, #-17]	; 0xffffffef
   138ac:	ldr	r3, [pc, #1368]	; 13e0c <__assert_fail@plt+0x2cd0>
   138b0:	ldr	r3, [r3]
   138b4:	cmp	r2, r3
   138b8:	beq	138d8 <__assert_fail@plt+0x279c>
   138bc:	ldr	r0, [pc, #1356]	; 13e10 <__assert_fail@plt+0x2cd4>
   138c0:	bl	11004 <gettext@plt>
   138c4:	mov	r3, r0
   138c8:	mov	r2, r3
   138cc:	mov	r1, #0
   138d0:	mov	r0, #1
   138d4:	bl	10f98 <error@plt>
   138d8:	ldrb	r3, [fp, #-17]	; 0xffffffef
   138dc:	ldr	r2, [pc, #1320]	; 13e0c <__assert_fail@plt+0x2cd0>
   138e0:	str	r3, [r2]
   138e4:	b	139a8 <__assert_fail@plt+0x286c>
   138e8:	ldr	r3, [pc, #1316]	; 13e14 <__assert_fail@plt+0x2cd8>
   138ec:	mov	r2, #0
   138f0:	strb	r2, [r3]
   138f4:	b	139a8 <__assert_fail@plt+0x286c>
   138f8:	ldr	r3, [pc, #1224]	; 13dc8 <__assert_fail@plt+0x2c8c>
   138fc:	mov	r2, #2
   13900:	str	r2, [r3]
   13904:	b	139a8 <__assert_fail@plt+0x286c>
   13908:	ldr	r3, [pc, #1208]	; 13dc8 <__assert_fail@plt+0x2c8c>
   1390c:	mov	r2, #1
   13910:	str	r2, [r3]
   13914:	b	139a8 <__assert_fail@plt+0x286c>
   13918:	ldr	r3, [pc, #1204]	; 13dd4 <__assert_fail@plt+0x2c98>
   1391c:	ldr	r0, [r3]
   13920:	sub	r1, fp, #60	; 0x3c
   13924:	sub	r2, fp, #52	; 0x34
   13928:	sub	r3, fp, #40	; 0x28
   1392c:	str	r3, [sp, #8]
   13930:	sub	r3, fp, #44	; 0x2c
   13934:	str	r3, [sp, #4]
   13938:	sub	r3, fp, #64	; 0x40
   1393c:	str	r3, [sp]
   13940:	mov	r3, r1
   13944:	ldr	r1, [pc, #1228]	; 13e18 <__assert_fail@plt+0x2cdc>
   13948:	bl	131c0 <__assert_fail@plt+0x2084>
   1394c:	b	139a8 <__assert_fail@plt+0x286c>
   13950:	ldr	r3, [pc, #1220]	; 13e1c <__assert_fail@plt+0x2ce0>
   13954:	mov	r2, #1
   13958:	strb	r2, [r3]
   1395c:	b	139a8 <__assert_fail@plt+0x286c>
   13960:	mov	r0, #0
   13964:	bl	11478 <__assert_fail@plt+0x33c>
   13968:	ldr	r3, [pc, #1200]	; 13e20 <__assert_fail@plt+0x2ce4>
   1396c:	ldr	r0, [r3]
   13970:	ldr	r3, [pc, #1196]	; 13e24 <__assert_fail@plt+0x2ce8>
   13974:	ldr	r2, [r3]
   13978:	mov	r3, #0
   1397c:	str	r3, [sp, #4]
   13980:	ldr	r3, [pc, #1184]	; 13e28 <__assert_fail@plt+0x2cec>
   13984:	str	r3, [sp]
   13988:	mov	r3, r2
   1398c:	ldr	r2, [pc, #1176]	; 13e2c <__assert_fail@plt+0x2cf0>
   13990:	ldr	r1, [pc, #1176]	; 13e30 <__assert_fail@plt+0x2cf4>
   13994:	bl	177c4 <__assert_fail@plt+0x6688>
   13998:	mov	r0, #0
   1399c:	bl	10ff8 <exit@plt>
   139a0:	mov	r0, #1
   139a4:	bl	11478 <__assert_fail@plt+0x33c>
   139a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139ac:	str	r3, [fp, #-44]	; 0xffffffd4
   139b0:	mov	r3, #0
   139b4:	str	r3, [sp]
   139b8:	ldr	r3, [pc, #1140]	; 13e34 <__assert_fail@plt+0x2cf8>
   139bc:	ldr	r2, [pc, #1140]	; 13e38 <__assert_fail@plt+0x2cfc>
   139c0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   139c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   139c8:	bl	10fe0 <getopt_long@plt>
   139cc:	str	r0, [fp, #-24]	; 0xffffffe8
   139d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139d4:	cmn	r3, #1
   139d8:	bne	13478 <__assert_fail@plt+0x233c>
   139dc:	mov	r3, #0
   139e0:	str	r3, [fp, #-44]	; 0xffffffd4
   139e4:	b	13a38 <__assert_fail@plt+0x28fc>
   139e8:	ldr	r3, [pc, #1032]	; 13df8 <__assert_fail@plt+0x2cbc>
   139ec:	ldr	r3, [r3]
   139f0:	add	r2, r3, #1
   139f4:	ldr	r1, [pc, #1020]	; 13df8 <__assert_fail@plt+0x2cbc>
   139f8:	str	r2, [r1]
   139fc:	lsl	r3, r3, #2
   13a00:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13a04:	add	r3, r2, r3
   13a08:	ldr	r0, [r3]
   13a0c:	sub	r1, fp, #60	; 0x3c
   13a10:	sub	r2, fp, #52	; 0x34
   13a14:	sub	r3, fp, #40	; 0x28
   13a18:	str	r3, [sp, #8]
   13a1c:	sub	r3, fp, #44	; 0x2c
   13a20:	str	r3, [sp, #4]
   13a24:	sub	r3, fp, #64	; 0x40
   13a28:	str	r3, [sp]
   13a2c:	mov	r3, r1
   13a30:	ldr	r1, [pc, #992]	; 13e18 <__assert_fail@plt+0x2cdc>
   13a34:	bl	131c0 <__assert_fail@plt+0x2084>
   13a38:	ldr	r3, [pc, #952]	; 13df8 <__assert_fail@plt+0x2cbc>
   13a3c:	ldr	r2, [r3]
   13a40:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13a44:	cmp	r2, r3
   13a48:	blt	139e8 <__assert_fail@plt+0x28ac>
   13a4c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13a50:	cmp	r3, #2
   13a54:	beq	13acc <__assert_fail@plt+0x2990>
   13a58:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13a5c:	cmp	r3, #0
   13a60:	bne	13a84 <__assert_fail@plt+0x2948>
   13a64:	ldr	r0, [pc, #976]	; 13e3c <__assert_fail@plt+0x2d00>
   13a68:	bl	11004 <gettext@plt>
   13a6c:	mov	r3, r0
   13a70:	mov	r2, r3
   13a74:	mov	r1, #0
   13a78:	mov	r0, #0
   13a7c:	bl	10f98 <error@plt>
   13a80:	b	13ac4 <__assert_fail@plt+0x2988>
   13a84:	ldr	r0, [pc, #948]	; 13e40 <__assert_fail@plt+0x2d04>
   13a88:	bl	11004 <gettext@plt>
   13a8c:	mov	r4, r0
   13a90:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13a94:	sub	r3, r3, #-1073741823	; 0xc0000001
   13a98:	lsl	r3, r3, #2
   13a9c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13aa0:	add	r3, r2, r3
   13aa4:	ldr	r3, [r3]
   13aa8:	mov	r0, r3
   13aac:	bl	16f60 <__assert_fail@plt+0x5e24>
   13ab0:	mov	r3, r0
   13ab4:	mov	r2, r4
   13ab8:	mov	r1, #0
   13abc:	mov	r0, #0
   13ac0:	bl	10f98 <error@plt>
   13ac4:	mov	r0, #1
   13ac8:	bl	11478 <__assert_fail@plt+0x33c>
   13acc:	mov	r3, #0
   13ad0:	str	r3, [fp, #-16]
   13ad4:	b	13b20 <__assert_fail@plt+0x29e4>
   13ad8:	ldr	r3, [fp, #-16]
   13adc:	lsl	r3, r3, #2
   13ae0:	sub	r2, fp, #12
   13ae4:	add	r3, r2, r3
   13ae8:	ldr	r3, [r3, #-48]	; 0xffffffd0
   13aec:	cmp	r3, #0
   13af0:	beq	13b14 <__assert_fail@plt+0x29d8>
   13af4:	ldr	r3, [fp, #-16]
   13af8:	mov	r1, r3
   13afc:	ldr	r0, [pc, #748]	; 13df0 <__assert_fail@plt+0x2cb4>
   13b00:	bl	1312c <__assert_fail@plt+0x1ff0>
   13b04:	ldr	r3, [fp, #-16]
   13b08:	mov	r1, r3
   13b0c:	ldr	r0, [pc, #736]	; 13df4 <__assert_fail@plt+0x2cb8>
   13b10:	bl	1312c <__assert_fail@plt+0x1ff0>
   13b14:	ldr	r3, [fp, #-16]
   13b18:	add	r3, r3, #1
   13b1c:	str	r3, [fp, #-16]
   13b20:	ldr	r3, [fp, #-16]
   13b24:	cmp	r3, #1
   13b28:	ble	13ad8 <__assert_fail@plt+0x299c>
   13b2c:	ldr	r3, [pc, #700]	; 13df0 <__assert_fail@plt+0x2cb4>
   13b30:	ldr	r3, [r3]
   13b34:	cmn	r3, #1
   13b38:	bne	13b48 <__assert_fail@plt+0x2a0c>
   13b3c:	ldr	r3, [pc, #684]	; 13df0 <__assert_fail@plt+0x2cb4>
   13b40:	mov	r2, #0
   13b44:	str	r2, [r3]
   13b48:	ldr	r3, [pc, #676]	; 13df4 <__assert_fail@plt+0x2cb8>
   13b4c:	ldr	r3, [r3]
   13b50:	cmn	r3, #1
   13b54:	bne	13b64 <__assert_fail@plt+0x2a28>
   13b58:	ldr	r3, [pc, #660]	; 13df4 <__assert_fail@plt+0x2cb8>
   13b5c:	mov	r2, #0
   13b60:	str	r2, [r3]
   13b64:	ldr	r3, [pc, #684]	; 13e18 <__assert_fail@plt+0x2cdc>
   13b68:	ldr	r3, [r3]
   13b6c:	ldr	r1, [pc, #720]	; 13e44 <__assert_fail@plt+0x2d08>
   13b70:	mov	r0, r3
   13b74:	bl	10e9c <strcmp@plt>
   13b78:	mov	r3, r0
   13b7c:	cmp	r3, #0
   13b80:	beq	13ba0 <__assert_fail@plt+0x2a64>
   13b84:	ldr	r3, [pc, #652]	; 13e18 <__assert_fail@plt+0x2cdc>
   13b88:	ldr	r3, [r3]
   13b8c:	ldr	r1, [pc, #692]	; 13e48 <__assert_fail@plt+0x2d0c>
   13b90:	mov	r0, r3
   13b94:	bl	14230 <__assert_fail@plt+0x30f4>
   13b98:	mov	r3, r0
   13b9c:	b	13ba8 <__assert_fail@plt+0x2a6c>
   13ba0:	ldr	r3, [pc, #676]	; 13e4c <__assert_fail@plt+0x2d10>
   13ba4:	ldr	r3, [r3]
   13ba8:	str	r3, [fp, #-32]	; 0xffffffe0
   13bac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13bb0:	cmp	r3, #0
   13bb4:	bne	13bf0 <__assert_fail@plt+0x2ab4>
   13bb8:	bl	11040 <__errno_location@plt>
   13bbc:	mov	r3, r0
   13bc0:	ldr	r4, [r3]
   13bc4:	ldr	r3, [pc, #588]	; 13e18 <__assert_fail@plt+0x2cdc>
   13bc8:	ldr	r3, [r3]
   13bcc:	mov	r2, r3
   13bd0:	mov	r1, #3
   13bd4:	mov	r0, #0
   13bd8:	bl	16cf0 <__assert_fail@plt+0x5bb4>
   13bdc:	mov	r3, r0
   13be0:	ldr	r2, [pc, #616]	; 13e50 <__assert_fail@plt+0x2d14>
   13be4:	mov	r1, r4
   13be8:	mov	r0, #1
   13bec:	bl	10f98 <error@plt>
   13bf0:	ldr	r3, [pc, #544]	; 13e18 <__assert_fail@plt+0x2cdc>
   13bf4:	ldr	r3, [r3, #4]
   13bf8:	ldr	r1, [pc, #580]	; 13e44 <__assert_fail@plt+0x2d08>
   13bfc:	mov	r0, r3
   13c00:	bl	10e9c <strcmp@plt>
   13c04:	mov	r3, r0
   13c08:	cmp	r3, #0
   13c0c:	beq	13c2c <__assert_fail@plt+0x2af0>
   13c10:	ldr	r3, [pc, #512]	; 13e18 <__assert_fail@plt+0x2cdc>
   13c14:	ldr	r3, [r3, #4]
   13c18:	ldr	r1, [pc, #552]	; 13e48 <__assert_fail@plt+0x2d0c>
   13c1c:	mov	r0, r3
   13c20:	bl	14230 <__assert_fail@plt+0x30f4>
   13c24:	mov	r3, r0
   13c28:	b	13c34 <__assert_fail@plt+0x2af8>
   13c2c:	ldr	r3, [pc, #536]	; 13e4c <__assert_fail@plt+0x2d10>
   13c30:	ldr	r3, [r3]
   13c34:	str	r3, [fp, #-36]	; 0xffffffdc
   13c38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13c3c:	cmp	r3, #0
   13c40:	bne	13c7c <__assert_fail@plt+0x2b40>
   13c44:	bl	11040 <__errno_location@plt>
   13c48:	mov	r3, r0
   13c4c:	ldr	r4, [r3]
   13c50:	ldr	r3, [pc, #448]	; 13e18 <__assert_fail@plt+0x2cdc>
   13c54:	ldr	r3, [r3, #4]
   13c58:	mov	r2, r3
   13c5c:	mov	r1, #3
   13c60:	mov	r0, #0
   13c64:	bl	16cf0 <__assert_fail@plt+0x5bb4>
   13c68:	mov	r3, r0
   13c6c:	ldr	r2, [pc, #476]	; 13e50 <__assert_fail@plt+0x2d14>
   13c70:	mov	r1, r4
   13c74:	mov	r0, #1
   13c78:	bl	10f98 <error@plt>
   13c7c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c80:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13c84:	cmp	r2, r3
   13c88:	bne	13cb4 <__assert_fail@plt+0x2b78>
   13c8c:	bl	11040 <__errno_location@plt>
   13c90:	mov	r3, r0
   13c94:	ldr	r4, [r3]
   13c98:	ldr	r0, [pc, #436]	; 13e54 <__assert_fail@plt+0x2d18>
   13c9c:	bl	11004 <gettext@plt>
   13ca0:	mov	r3, r0
   13ca4:	mov	r2, r3
   13ca8:	mov	r1, r4
   13cac:	mov	r0, #1
   13cb0:	bl	10f98 <error@plt>
   13cb4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13cb8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13cbc:	bl	12608 <__assert_fail@plt+0x14cc>
   13cc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13cc4:	bl	14090 <__assert_fail@plt+0x2f54>
   13cc8:	mov	r3, r0
   13ccc:	cmp	r3, #0
   13cd0:	beq	13d0c <__assert_fail@plt+0x2bd0>
   13cd4:	bl	11040 <__errno_location@plt>
   13cd8:	mov	r3, r0
   13cdc:	ldr	r4, [r3]
   13ce0:	ldr	r3, [pc, #304]	; 13e18 <__assert_fail@plt+0x2cdc>
   13ce4:	ldr	r3, [r3]
   13ce8:	mov	r2, r3
   13cec:	mov	r1, #3
   13cf0:	mov	r0, #0
   13cf4:	bl	16cf0 <__assert_fail@plt+0x5bb4>
   13cf8:	mov	r3, r0
   13cfc:	ldr	r2, [pc, #332]	; 13e50 <__assert_fail@plt+0x2d14>
   13d00:	mov	r1, r4
   13d04:	mov	r0, #1
   13d08:	bl	10f98 <error@plt>
   13d0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13d10:	bl	14090 <__assert_fail@plt+0x2f54>
   13d14:	mov	r3, r0
   13d18:	cmp	r3, #0
   13d1c:	beq	13d58 <__assert_fail@plt+0x2c1c>
   13d20:	bl	11040 <__errno_location@plt>
   13d24:	mov	r3, r0
   13d28:	ldr	r4, [r3]
   13d2c:	ldr	r3, [pc, #228]	; 13e18 <__assert_fail@plt+0x2cdc>
   13d30:	ldr	r3, [r3, #4]
   13d34:	mov	r2, r3
   13d38:	mov	r1, #3
   13d3c:	mov	r0, #0
   13d40:	bl	16cf0 <__assert_fail@plt+0x5bb4>
   13d44:	mov	r3, r0
   13d48:	ldr	r2, [pc, #256]	; 13e50 <__assert_fail@plt+0x2d14>
   13d4c:	mov	r1, r4
   13d50:	mov	r0, #1
   13d54:	bl	10f98 <error@plt>
   13d58:	ldr	r3, [pc, #100]	; 13dc4 <__assert_fail@plt+0x2c88>
   13d5c:	ldrb	r3, [r3]
   13d60:	cmp	r3, #0
   13d64:	bne	13d78 <__assert_fail@plt+0x2c3c>
   13d68:	ldr	r3, [pc, #84]	; 13dc4 <__assert_fail@plt+0x2c88>
   13d6c:	ldrb	r3, [r3, #1]
   13d70:	cmp	r3, #0
   13d74:	beq	13d94 <__assert_fail@plt+0x2c58>
   13d78:	ldr	r0, [pc, #216]	; 13e58 <__assert_fail@plt+0x2d1c>
   13d7c:	bl	11004 <gettext@plt>
   13d80:	mov	r3, r0
   13d84:	mov	r2, r3
   13d88:	mov	r1, #0
   13d8c:	mov	r0, #1
   13d90:	bl	10f98 <error@plt>
   13d94:	mov	r3, #0
   13d98:	mov	r0, r3
   13d9c:	sub	sp, fp, #8
   13da0:	pop	{r4, fp, pc}
   13da4:	strdeq	sl, [r1], -r0
   13da8:	andeq	fp, r1, ip, lsl #21
   13dac:	andeq	sl, r1, r8, lsl #30
   13db0:			; <UNDEFINED> instruction: 0x0002d1b8
   13db4:	andeq	r3, r1, r0, asr #29
   13db8:	andeq	r1, r1, r8, ror pc
   13dbc:			; <UNDEFINED> instruction: 0x0002d1bb
   13dc0:			; <UNDEFINED> instruction: 0x0002d1bc
   13dc4:	andeq	sp, r2, r0, asr #3
   13dc8:	andeq	sp, r2, r0, ror #3
   13dcc:	andeq	r0, r0, r1, lsl #2
   13dd0:	andeq	r0, r0, r2, lsl #2
   13dd4:	andeq	sp, r2, r8, lsl #3
   13dd8:	strdeq	fp, [r1], -r0
   13ddc:			; <UNDEFINED> instruction: 0x0002d1b9
   13de0:			; <UNDEFINED> instruction: 0x0002d1ba
   13de4:	andeq	sp, r2, r4, asr #3
   13de8:	andeq	fp, r1, r4, lsr #21
   13dec:	strdeq	sp, [r2], -ip
   13df0:	andeq	sp, r2, ip, lsl #2
   13df4:	andeq	sp, r2, r0, lsl r1
   13df8:	andeq	sp, r2, r0, ror r1
   13dfc:	ldrdeq	fp, [r1], -r0
   13e00:	andeq	sp, r2, r8, asr #3
   13e04:	ldrdeq	fp, [r1], -r8
   13e08:	ldrdeq	fp, [r1], -ip
   13e0c:	andeq	sp, r2, r8, lsl r1
   13e10:	strdeq	fp, [r1], -r4
   13e14:	andeq	sp, r2, ip, lsl r1
   13e18:	andeq	sp, r2, r8, lsr #3
   13e1c:	strdeq	sp, [r2], -sp	; <UNPREDICTABLE>
   13e20:	andeq	sp, r2, r4, lsl #3
   13e24:	andeq	sp, r2, r0, lsr #2
   13e28:	andeq	fp, r1, r8, lsl #22
   13e2c:	andeq	sl, r1, r8, lsr lr
   13e30:	andeq	fp, r1, r4, ror r9
   13e34:	strdeq	sl, [r1], -r4
   13e38:	andeq	fp, r1, r8, lsl fp
   13e3c:	andeq	fp, r1, ip, lsr #22
   13e40:	andeq	fp, r1, ip, lsr fp
   13e44:	andeq	fp, r1, r8, asr fp
   13e48:	andeq	fp, r1, ip, asr fp
   13e4c:	andeq	sp, r2, r0, lsl #3
   13e50:	andeq	fp, r1, r0, ror #22
   13e54:	andeq	fp, r1, r4, ror #22
   13e58:	andeq	fp, r1, r8, lsl #23
   13e5c:	push	{fp}		; (str fp, [sp, #-4]!)
   13e60:	add	fp, sp, #0
   13e64:	sub	sp, sp, #12
   13e68:	str	r0, [fp, #-8]
   13e6c:	ldr	r2, [pc, #20]	; 13e88 <__assert_fail@plt+0x2d4c>
   13e70:	ldr	r3, [fp, #-8]
   13e74:	str	r3, [r2]
   13e78:	nop			; (mov r0, r0)
   13e7c:	add	sp, fp, #0
   13e80:	pop	{fp}		; (ldr fp, [sp], #4)
   13e84:	bx	lr
   13e88:	andeq	sp, r2, r0, lsl #4
   13e8c:	push	{fp}		; (str fp, [sp, #-4]!)
   13e90:	add	fp, sp, #0
   13e94:	sub	sp, sp, #12
   13e98:	mov	r3, r0
   13e9c:	strb	r3, [fp, #-5]
   13ea0:	ldr	r2, [pc, #20]	; 13ebc <__assert_fail@plt+0x2d80>
   13ea4:	ldrb	r3, [fp, #-5]
   13ea8:	strb	r3, [r2]
   13eac:	nop			; (mov r0, r0)
   13eb0:	add	sp, fp, #0
   13eb4:	pop	{fp}		; (ldr fp, [sp], #4)
   13eb8:	bx	lr
   13ebc:	andeq	sp, r2, r4, lsl #4
   13ec0:	push	{r4, fp, lr}
   13ec4:	add	fp, sp, #8
   13ec8:	sub	sp, sp, #20
   13ecc:	ldr	r3, [pc, #256]	; 13fd4 <__assert_fail@plt+0x2e98>
   13ed0:	ldr	r3, [r3]
   13ed4:	mov	r0, r3
   13ed8:	bl	198b8 <__assert_fail@plt+0x877c>
   13edc:	mov	r3, r0
   13ee0:	cmp	r3, #0
   13ee4:	beq	13f9c <__assert_fail@plt+0x2e60>
   13ee8:	ldr	r3, [pc, #232]	; 13fd8 <__assert_fail@plt+0x2e9c>
   13eec:	ldrb	r3, [r3]
   13ef0:	eor	r3, r3, #1
   13ef4:	uxtb	r3, r3
   13ef8:	cmp	r3, #0
   13efc:	bne	13f14 <__assert_fail@plt+0x2dd8>
   13f00:	bl	11040 <__errno_location@plt>
   13f04:	mov	r3, r0
   13f08:	ldr	r3, [r3]
   13f0c:	cmp	r3, #32
   13f10:	beq	13f9c <__assert_fail@plt+0x2e60>
   13f14:	ldr	r0, [pc, #192]	; 13fdc <__assert_fail@plt+0x2ea0>
   13f18:	bl	11004 <gettext@plt>
   13f1c:	str	r0, [fp, #-16]
   13f20:	ldr	r3, [pc, #184]	; 13fe0 <__assert_fail@plt+0x2ea4>
   13f24:	ldr	r3, [r3]
   13f28:	cmp	r3, #0
   13f2c:	beq	13f70 <__assert_fail@plt+0x2e34>
   13f30:	bl	11040 <__errno_location@plt>
   13f34:	mov	r3, r0
   13f38:	ldr	r4, [r3]
   13f3c:	ldr	r3, [pc, #156]	; 13fe0 <__assert_fail@plt+0x2ea4>
   13f40:	ldr	r3, [r3]
   13f44:	mov	r0, r3
   13f48:	bl	16c90 <__assert_fail@plt+0x5b54>
   13f4c:	mov	r2, r0
   13f50:	ldr	r3, [fp, #-16]
   13f54:	str	r3, [sp]
   13f58:	mov	r3, r2
   13f5c:	ldr	r2, [pc, #128]	; 13fe4 <__assert_fail@plt+0x2ea8>
   13f60:	mov	r1, r4
   13f64:	mov	r0, #0
   13f68:	bl	10f98 <error@plt>
   13f6c:	b	13f8c <__assert_fail@plt+0x2e50>
   13f70:	bl	11040 <__errno_location@plt>
   13f74:	mov	r3, r0
   13f78:	ldr	r1, [r3]
   13f7c:	ldr	r3, [fp, #-16]
   13f80:	ldr	r2, [pc, #96]	; 13fe8 <__assert_fail@plt+0x2eac>
   13f84:	mov	r0, #0
   13f88:	bl	10f98 <error@plt>
   13f8c:	ldr	r3, [pc, #88]	; 13fec <__assert_fail@plt+0x2eb0>
   13f90:	ldr	r3, [r3]
   13f94:	mov	r0, r3
   13f98:	bl	10ed8 <_exit@plt>
   13f9c:	ldr	r3, [pc, #76]	; 13ff0 <__assert_fail@plt+0x2eb4>
   13fa0:	ldr	r3, [r3]
   13fa4:	mov	r0, r3
   13fa8:	bl	198b8 <__assert_fail@plt+0x877c>
   13fac:	mov	r3, r0
   13fb0:	cmp	r3, #0
   13fb4:	beq	13fc8 <__assert_fail@plt+0x2e8c>
   13fb8:	ldr	r3, [pc, #44]	; 13fec <__assert_fail@plt+0x2eb0>
   13fbc:	ldr	r3, [r3]
   13fc0:	mov	r0, r3
   13fc4:	bl	10ed8 <_exit@plt>
   13fc8:	nop			; (mov r0, r0)
   13fcc:	sub	sp, fp, #8
   13fd0:	pop	{r4, fp, pc}
   13fd4:	andeq	sp, r2, r4, lsl #3
   13fd8:	andeq	sp, r2, r4, lsl #4
   13fdc:	andeq	fp, r1, r4, asr #23
   13fe0:	andeq	sp, r2, r0, lsl #4
   13fe4:	ldrdeq	fp, [r1], -r0
   13fe8:	ldrdeq	fp, [r1], -r8
   13fec:	andeq	sp, r2, r4, lsr #2
   13ff0:	andeq	sp, r2, r8, ror r1
   13ff4:	push	{fp, lr}
   13ff8:	add	fp, sp, #4
   13ffc:	sub	sp, sp, #40	; 0x28
   14000:	str	r0, [fp, #-16]
   14004:	strd	r2, [fp, #-28]	; 0xffffffe4
   14008:	ldr	r3, [fp, #12]
   1400c:	str	r3, [sp, #8]
   14010:	ldrd	r2, [fp, #4]
   14014:	strd	r2, [sp]
   14018:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1401c:	ldr	r0, [fp, #-16]
   14020:	bl	10ea8 <posix_fadvise64@plt>
   14024:	str	r0, [fp, #-8]
   14028:	nop			; (mov r0, r0)
   1402c:	sub	sp, fp, #4
   14030:	pop	{fp, pc}
   14034:	push	{fp, lr}
   14038:	add	fp, sp, #4
   1403c:	sub	sp, sp, #24
   14040:	str	r0, [fp, #-8]
   14044:	str	r1, [fp, #-12]
   14048:	ldr	r3, [fp, #-8]
   1404c:	cmp	r3, #0
   14050:	beq	14084 <__assert_fail@plt+0x2f48>
   14054:	ldr	r0, [fp, #-8]
   14058:	bl	11064 <fileno@plt>
   1405c:	mov	r1, r0
   14060:	ldr	r3, [fp, #-12]
   14064:	str	r3, [sp, #8]
   14068:	mov	r2, #0
   1406c:	mov	r3, #0
   14070:	strd	r2, [sp]
   14074:	mov	r2, #0
   14078:	mov	r3, #0
   1407c:	mov	r0, r1
   14080:	bl	13ff4 <__assert_fail@plt+0x2eb8>
   14084:	nop			; (mov r0, r0)
   14088:	sub	sp, fp, #4
   1408c:	pop	{fp, pc}
   14090:	push	{fp, lr}
   14094:	add	fp, sp, #4
   14098:	sub	sp, sp, #32
   1409c:	str	r0, [fp, #-24]	; 0xffffffe8
   140a0:	mov	r3, #0
   140a4:	str	r3, [fp, #-8]
   140a8:	mov	r3, #0
   140ac:	str	r3, [fp, #-12]
   140b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   140b4:	bl	11064 <fileno@plt>
   140b8:	str	r0, [fp, #-16]
   140bc:	ldr	r3, [fp, #-16]
   140c0:	cmp	r3, #0
   140c4:	bge	140d8 <__assert_fail@plt+0x2f9c>
   140c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   140cc:	bl	11088 <fclose@plt>
   140d0:	mov	r3, r0
   140d4:	b	1417c <__assert_fail@plt+0x3040>
   140d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   140dc:	bl	10fc8 <__freading@plt>
   140e0:	mov	r3, r0
   140e4:	cmp	r3, #0
   140e8:	beq	14124 <__assert_fail@plt+0x2fe8>
   140ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   140f0:	bl	11064 <fileno@plt>
   140f4:	mov	r1, r0
   140f8:	mov	r3, #1
   140fc:	str	r3, [sp]
   14100:	mov	r2, #0
   14104:	mov	r3, #0
   14108:	mov	r0, r1
   1410c:	bl	10f5c <lseek64@plt>
   14110:	mvn	r2, #0
   14114:	mvn	r3, #0
   14118:	cmp	r1, r3
   1411c:	cmpeq	r0, r2
   14120:	beq	14148 <__assert_fail@plt+0x300c>
   14124:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14128:	bl	141d0 <__assert_fail@plt+0x3094>
   1412c:	mov	r3, r0
   14130:	cmp	r3, #0
   14134:	beq	14148 <__assert_fail@plt+0x300c>
   14138:	bl	11040 <__errno_location@plt>
   1413c:	mov	r3, r0
   14140:	ldr	r3, [r3]
   14144:	str	r3, [fp, #-8]
   14148:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1414c:	bl	11088 <fclose@plt>
   14150:	str	r0, [fp, #-12]
   14154:	ldr	r3, [fp, #-8]
   14158:	cmp	r3, #0
   1415c:	beq	14178 <__assert_fail@plt+0x303c>
   14160:	bl	11040 <__errno_location@plt>
   14164:	mov	r2, r0
   14168:	ldr	r3, [fp, #-8]
   1416c:	str	r3, [r2]
   14170:	mvn	r3, #0
   14174:	str	r3, [fp, #-12]
   14178:	ldr	r3, [fp, #-12]
   1417c:	mov	r0, r3
   14180:	sub	sp, fp, #4
   14184:	pop	{fp, pc}
   14188:	push	{fp, lr}
   1418c:	add	fp, sp, #4
   14190:	sub	sp, sp, #16
   14194:	str	r0, [fp, #-8]
   14198:	ldr	r3, [fp, #-8]
   1419c:	ldr	r3, [r3]
   141a0:	and	r3, r3, #256	; 0x100
   141a4:	cmp	r3, #0
   141a8:	beq	141c4 <__assert_fail@plt+0x3088>
   141ac:	mov	r3, #1
   141b0:	str	r3, [sp]
   141b4:	mov	r2, #0
   141b8:	mov	r3, #0
   141bc:	ldr	r0, [fp, #-8]
   141c0:	bl	143c8 <__assert_fail@plt+0x328c>
   141c4:	nop			; (mov r0, r0)
   141c8:	sub	sp, fp, #4
   141cc:	pop	{fp, pc}
   141d0:	push	{fp, lr}
   141d4:	add	fp, sp, #4
   141d8:	sub	sp, sp, #8
   141dc:	str	r0, [fp, #-8]
   141e0:	ldr	r3, [fp, #-8]
   141e4:	cmp	r3, #0
   141e8:	beq	14200 <__assert_fail@plt+0x30c4>
   141ec:	ldr	r0, [fp, #-8]
   141f0:	bl	10fc8 <__freading@plt>
   141f4:	mov	r3, r0
   141f8:	cmp	r3, #0
   141fc:	bne	14210 <__assert_fail@plt+0x30d4>
   14200:	ldr	r0, [fp, #-8]
   14204:	bl	10ec0 <fflush@plt>
   14208:	mov	r3, r0
   1420c:	b	14224 <__assert_fail@plt+0x30e8>
   14210:	ldr	r0, [fp, #-8]
   14214:	bl	14188 <__assert_fail@plt+0x304c>
   14218:	ldr	r0, [fp, #-8]
   1421c:	bl	10ec0 <fflush@plt>
   14220:	mov	r3, r0
   14224:	mov	r0, r3
   14228:	sub	sp, fp, #4
   1422c:	pop	{fp, pc}
   14230:	push	{fp, lr}
   14234:	add	fp, sp, #4
   14238:	sub	sp, sp, #32
   1423c:	str	r0, [fp, #-32]	; 0xffffffe0
   14240:	str	r1, [fp, #-36]	; 0xffffffdc
   14244:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14248:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1424c:	bl	110dc <fopen64@plt>
   14250:	str	r0, [fp, #-8]
   14254:	ldr	r3, [fp, #-8]
   14258:	cmp	r3, #0
   1425c:	beq	1432c <__assert_fail@plt+0x31f0>
   14260:	ldr	r0, [fp, #-8]
   14264:	bl	11064 <fileno@plt>
   14268:	str	r0, [fp, #-12]
   1426c:	ldr	r3, [fp, #-12]
   14270:	cmp	r3, #0
   14274:	blt	1432c <__assert_fail@plt+0x31f0>
   14278:	ldr	r3, [fp, #-12]
   1427c:	cmp	r3, #2
   14280:	bgt	1432c <__assert_fail@plt+0x31f0>
   14284:	ldr	r0, [fp, #-12]
   14288:	bl	170f4 <__assert_fail@plt+0x5fb8>
   1428c:	str	r0, [fp, #-16]
   14290:	ldr	r3, [fp, #-16]
   14294:	cmp	r3, #0
   14298:	bge	142cc <__assert_fail@plt+0x3190>
   1429c:	bl	11040 <__errno_location@plt>
   142a0:	mov	r3, r0
   142a4:	ldr	r3, [r3]
   142a8:	str	r3, [fp, #-20]	; 0xffffffec
   142ac:	ldr	r0, [fp, #-8]
   142b0:	bl	14090 <__assert_fail@plt+0x2f54>
   142b4:	bl	11040 <__errno_location@plt>
   142b8:	mov	r2, r0
   142bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   142c0:	str	r3, [r2]
   142c4:	mov	r3, #0
   142c8:	b	14330 <__assert_fail@plt+0x31f4>
   142cc:	ldr	r0, [fp, #-8]
   142d0:	bl	14090 <__assert_fail@plt+0x2f54>
   142d4:	mov	r3, r0
   142d8:	cmp	r3, #0
   142dc:	bne	142fc <__assert_fail@plt+0x31c0>
   142e0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   142e4:	ldr	r0, [fp, #-16]
   142e8:	bl	10e6c <fdopen@plt>
   142ec:	str	r0, [fp, #-8]
   142f0:	ldr	r3, [fp, #-8]
   142f4:	cmp	r3, #0
   142f8:	bne	1432c <__assert_fail@plt+0x31f0>
   142fc:	bl	11040 <__errno_location@plt>
   14300:	mov	r3, r0
   14304:	ldr	r3, [r3]
   14308:	str	r3, [fp, #-24]	; 0xffffffe8
   1430c:	ldr	r0, [fp, #-16]
   14310:	bl	11124 <close@plt>
   14314:	bl	11040 <__errno_location@plt>
   14318:	mov	r2, r0
   1431c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14320:	str	r3, [r2]
   14324:	mov	r3, #0
   14328:	b	14330 <__assert_fail@plt+0x31f4>
   1432c:	ldr	r3, [fp, #-8]
   14330:	mov	r0, r3
   14334:	sub	sp, fp, #4
   14338:	pop	{fp, pc}
   1433c:	push	{r4, fp, lr}
   14340:	add	fp, sp, #8
   14344:	sub	sp, sp, #20
   14348:	str	r0, [fp, #-24]	; 0xffffffe8
   1434c:	bl	11040 <__errno_location@plt>
   14350:	mov	r3, r0
   14354:	ldr	r3, [r3]
   14358:	str	r3, [fp, #-20]	; 0xffffffec
   1435c:	bl	11040 <__errno_location@plt>
   14360:	mov	r3, r0
   14364:	ldr	r3, [r3]
   14368:	str	r3, [fp, #-16]
   1436c:	bl	11040 <__errno_location@plt>
   14370:	mov	r2, r0
   14374:	mov	r3, #0
   14378:	str	r3, [r2]
   1437c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14380:	bl	10ecc <free@plt>
   14384:	bl	11040 <__errno_location@plt>
   14388:	mov	r4, r0
   1438c:	bl	11040 <__errno_location@plt>
   14390:	mov	r3, r0
   14394:	ldr	r3, [r3]
   14398:	cmp	r3, #0
   1439c:	moveq	r3, #1
   143a0:	movne	r3, #0
   143a4:	uxtb	r3, r3
   143a8:	lsl	r3, r3, #2
   143ac:	sub	r2, fp, #12
   143b0:	add	r3, r2, r3
   143b4:	ldr	r3, [r3, #-8]
   143b8:	str	r3, [r4]
   143bc:	nop			; (mov r0, r0)
   143c0:	sub	sp, fp, #8
   143c4:	pop	{r4, fp, pc}
   143c8:	push	{fp, lr}
   143cc:	add	fp, sp, #4
   143d0:	sub	sp, sp, #32
   143d4:	str	r0, [fp, #-16]
   143d8:	strd	r2, [fp, #-28]	; 0xffffffe4
   143dc:	ldr	r3, [fp, #-16]
   143e0:	ldr	r2, [r3, #8]
   143e4:	ldr	r3, [fp, #-16]
   143e8:	ldr	r3, [r3, #4]
   143ec:	cmp	r2, r3
   143f0:	bne	14488 <__assert_fail@plt+0x334c>
   143f4:	ldr	r3, [fp, #-16]
   143f8:	ldr	r2, [r3, #20]
   143fc:	ldr	r3, [fp, #-16]
   14400:	ldr	r3, [r3, #16]
   14404:	cmp	r2, r3
   14408:	bne	14488 <__assert_fail@plt+0x334c>
   1440c:	ldr	r3, [fp, #-16]
   14410:	ldr	r3, [r3, #36]	; 0x24
   14414:	cmp	r3, #0
   14418:	bne	14488 <__assert_fail@plt+0x334c>
   1441c:	ldr	r0, [fp, #-16]
   14420:	bl	11064 <fileno@plt>
   14424:	mov	r1, r0
   14428:	ldr	r3, [fp, #4]
   1442c:	str	r3, [sp]
   14430:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   14434:	mov	r0, r1
   14438:	bl	10f5c <lseek64@plt>
   1443c:	strd	r0, [fp, #-12]
   14440:	ldrd	r2, [fp, #-12]
   14444:	mvn	r0, #0
   14448:	mvn	r1, #0
   1444c:	cmp	r3, r1
   14450:	cmpeq	r2, r0
   14454:	bne	14460 <__assert_fail@plt+0x3324>
   14458:	mvn	r3, #0
   1445c:	b	144a0 <__assert_fail@plt+0x3364>
   14460:	ldr	r3, [fp, #-16]
   14464:	ldr	r3, [r3]
   14468:	bic	r2, r3, #16
   1446c:	ldr	r3, [fp, #-16]
   14470:	str	r2, [r3]
   14474:	ldr	r1, [fp, #-16]
   14478:	ldrd	r2, [fp, #-12]
   1447c:	strd	r2, [r1, #80]	; 0x50
   14480:	mov	r3, #0
   14484:	b	144a0 <__assert_fail@plt+0x3364>
   14488:	ldr	r3, [fp, #4]
   1448c:	str	r3, [sp]
   14490:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   14494:	ldr	r0, [fp, #-16]
   14498:	bl	11094 <fseeko64@plt>
   1449c:	mov	r3, r0
   144a0:	mov	r0, r3
   144a4:	sub	sp, fp, #4
   144a8:	pop	{fp, pc}
   144ac:	push	{fp, lr}
   144b0:	add	fp, sp, #4
   144b4:	sub	sp, sp, #272	; 0x110
   144b8:	str	r0, [fp, #-272]	; 0xfffffef0
   144bc:	sub	r3, fp, #264	; 0x108
   144c0:	ldr	r2, [pc, #116]	; 1453c <__assert_fail@plt+0x3400>
   144c4:	mov	r1, r3
   144c8:	ldr	r0, [fp, #-272]	; 0xfffffef0
   144cc:	bl	17094 <__assert_fail@plt+0x5f58>
   144d0:	mov	r3, r0
   144d4:	cmp	r3, #0
   144d8:	beq	144e4 <__assert_fail@plt+0x33a8>
   144dc:	mov	r3, #0
   144e0:	b	14530 <__assert_fail@plt+0x33f4>
   144e4:	sub	r3, fp, #264	; 0x108
   144e8:	ldr	r1, [pc, #80]	; 14540 <__assert_fail@plt+0x3404>
   144ec:	mov	r0, r3
   144f0:	bl	10e9c <strcmp@plt>
   144f4:	mov	r3, r0
   144f8:	cmp	r3, #0
   144fc:	beq	14524 <__assert_fail@plt+0x33e8>
   14500:	sub	r3, fp, #264	; 0x108
   14504:	ldr	r1, [pc, #56]	; 14544 <__assert_fail@plt+0x3408>
   14508:	mov	r0, r3
   1450c:	bl	10e9c <strcmp@plt>
   14510:	mov	r3, r0
   14514:	cmp	r3, #0
   14518:	beq	14524 <__assert_fail@plt+0x33e8>
   1451c:	mov	r3, #1
   14520:	b	14528 <__assert_fail@plt+0x33ec>
   14524:	mov	r3, #0
   14528:	and	r3, r3, #1
   1452c:	uxtb	r3, r3
   14530:	mov	r0, r3
   14534:	sub	sp, fp, #4
   14538:	pop	{fp, pc}
   1453c:	andeq	r0, r0, r1, lsl #2
   14540:	ldrdeq	fp, [r1], -ip
   14544:	andeq	fp, r1, r0, ror #23
   14548:	push	{fp, lr}
   1454c:	add	fp, sp, #4
   14550:	sub	sp, sp, #8
   14554:	str	r0, [fp, #-8]
   14558:	mov	r2, #12
   1455c:	mov	r1, #0
   14560:	ldr	r0, [fp, #-8]
   14564:	bl	11058 <memset@plt>
   14568:	nop			; (mov r0, r0)
   1456c:	sub	sp, fp, #4
   14570:	pop	{fp, pc}
   14574:	push	{fp, lr}
   14578:	add	fp, sp, #4
   1457c:	sub	sp, sp, #8
   14580:	str	r0, [fp, #-8]
   14584:	str	r1, [fp, #-12]
   14588:	mov	r2, #10
   1458c:	ldr	r1, [fp, #-12]
   14590:	ldr	r0, [fp, #-8]
   14594:	bl	145a8 <__assert_fail@plt+0x346c>
   14598:	mov	r3, r0
   1459c:	mov	r0, r3
   145a0:	sub	sp, fp, #4
   145a4:	pop	{fp, pc}
   145a8:	push	{fp, lr}
   145ac:	add	fp, sp, #4
   145b0:	sub	sp, sp, #48	; 0x30
   145b4:	str	r0, [fp, #-32]	; 0xffffffe0
   145b8:	str	r1, [fp, #-36]	; 0xffffffdc
   145bc:	mov	r3, r2
   145c0:	strb	r3, [fp, #-37]	; 0xffffffdb
   145c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   145c8:	ldr	r3, [r3, #8]
   145cc:	str	r3, [fp, #-12]
   145d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   145d4:	ldr	r3, [r3, #8]
   145d8:	str	r3, [fp, #-16]
   145dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   145e0:	ldr	r3, [r3]
   145e4:	mov	r2, r3
   145e8:	ldr	r3, [fp, #-12]
   145ec:	add	r3, r3, r2
   145f0:	str	r3, [fp, #-20]	; 0xffffffec
   145f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   145f8:	bl	11118 <feof_unlocked@plt>
   145fc:	mov	r3, r0
   14600:	cmp	r3, #0
   14604:	beq	14610 <__assert_fail@plt+0x34d4>
   14608:	mov	r3, #0
   1460c:	b	1472c <__assert_fail@plt+0x35f0>
   14610:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14614:	bl	10f20 <getc_unlocked@plt>
   14618:	str	r0, [fp, #-8]
   1461c:	ldr	r3, [fp, #-8]
   14620:	cmn	r3, #1
   14624:	bne	14674 <__assert_fail@plt+0x3538>
   14628:	ldr	r2, [fp, #-16]
   1462c:	ldr	r3, [fp, #-12]
   14630:	cmp	r2, r3
   14634:	beq	1464c <__assert_fail@plt+0x3510>
   14638:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1463c:	bl	10f80 <ferror_unlocked@plt>
   14640:	mov	r3, r0
   14644:	cmp	r3, #0
   14648:	beq	14654 <__assert_fail@plt+0x3518>
   1464c:	mov	r3, #0
   14650:	b	1472c <__assert_fail@plt+0x35f0>
   14654:	ldr	r3, [fp, #-16]
   14658:	sub	r3, r3, #1
   1465c:	ldrb	r3, [r3]
   14660:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   14664:	cmp	r2, r3
   14668:	beq	14710 <__assert_fail@plt+0x35d4>
   1466c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   14670:	str	r3, [fp, #-8]
   14674:	ldr	r2, [fp, #-16]
   14678:	ldr	r3, [fp, #-20]	; 0xffffffec
   1467c:	cmp	r2, r3
   14680:	bne	146e4 <__assert_fail@plt+0x35a8>
   14684:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14688:	ldr	r3, [r3]
   1468c:	str	r3, [fp, #-24]	; 0xffffffe8
   14690:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14694:	mov	r3, #1
   14698:	str	r3, [sp]
   1469c:	mvn	r3, #0
   146a0:	mov	r2, #1
   146a4:	ldr	r0, [fp, #-12]
   146a8:	bl	17c98 <__assert_fail@plt+0x6b5c>
   146ac:	str	r0, [fp, #-12]
   146b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146b4:	ldr	r2, [fp, #-12]
   146b8:	add	r3, r2, r3
   146bc:	str	r3, [fp, #-16]
   146c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146c4:	ldr	r2, [fp, #-12]
   146c8:	str	r2, [r3, #8]
   146cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146d0:	ldr	r3, [r3]
   146d4:	mov	r2, r3
   146d8:	ldr	r3, [fp, #-12]
   146dc:	add	r3, r3, r2
   146e0:	str	r3, [fp, #-20]	; 0xffffffec
   146e4:	ldr	r3, [fp, #-16]
   146e8:	add	r2, r3, #1
   146ec:	str	r2, [fp, #-16]
   146f0:	ldr	r2, [fp, #-8]
   146f4:	uxtb	r2, r2
   146f8:	strb	r2, [r3]
   146fc:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   14700:	ldr	r3, [fp, #-8]
   14704:	cmp	r2, r3
   14708:	bne	14610 <__assert_fail@plt+0x34d4>
   1470c:	b	14714 <__assert_fail@plt+0x35d8>
   14710:	nop			; (mov r0, r0)
   14714:	ldr	r2, [fp, #-16]
   14718:	ldr	r3, [fp, #-12]
   1471c:	sub	r2, r2, r3
   14720:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14724:	str	r2, [r3, #4]
   14728:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1472c:	mov	r0, r3
   14730:	sub	sp, fp, #4
   14734:	pop	{fp, pc}
   14738:	push	{fp, lr}
   1473c:	add	fp, sp, #4
   14740:	sub	sp, sp, #8
   14744:	str	r0, [fp, #-8]
   14748:	ldr	r3, [fp, #-8]
   1474c:	ldr	r3, [r3, #8]
   14750:	mov	r0, r3
   14754:	bl	1433c <__assert_fail@plt+0x3200>
   14758:	nop			; (mov r0, r0)
   1475c:	sub	sp, fp, #4
   14760:	pop	{fp, pc}
   14764:	push	{fp, lr}
   14768:	add	fp, sp, #4
   1476c:	sub	sp, sp, #48	; 0x30
   14770:	str	r0, [fp, #-40]	; 0xffffffd8
   14774:	str	r1, [fp, #-44]	; 0xffffffd4
   14778:	str	r2, [fp, #-48]	; 0xffffffd0
   1477c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14780:	str	r3, [fp, #-12]
   14784:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14788:	str	r3, [fp, #-16]
   1478c:	mov	r3, #0
   14790:	str	r3, [fp, #-8]
   14794:	b	14810 <__assert_fail@plt+0x36d4>
   14798:	ldr	r2, [fp, #-12]
   1479c:	ldr	r3, [fp, #-8]
   147a0:	add	r3, r2, r3
   147a4:	ldrb	r3, [r3]
   147a8:	strb	r3, [fp, #-17]	; 0xffffffef
   147ac:	ldr	r2, [fp, #-16]
   147b0:	ldr	r3, [fp, #-8]
   147b4:	add	r3, r2, r3
   147b8:	ldrb	r3, [r3]
   147bc:	strb	r3, [fp, #-18]	; 0xffffffee
   147c0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   147c4:	mov	r0, r3
   147c8:	bl	110b8 <toupper@plt>
   147cc:	str	r0, [fp, #-24]	; 0xffffffe8
   147d0:	ldrb	r3, [fp, #-18]	; 0xffffffee
   147d4:	mov	r0, r3
   147d8:	bl	110b8 <toupper@plt>
   147dc:	str	r0, [fp, #-28]	; 0xffffffe4
   147e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   147e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   147e8:	sub	r3, r2, r3
   147ec:	str	r3, [fp, #-32]	; 0xffffffe0
   147f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   147f4:	cmp	r3, #0
   147f8:	beq	14804 <__assert_fail@plt+0x36c8>
   147fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14800:	b	14824 <__assert_fail@plt+0x36e8>
   14804:	ldr	r3, [fp, #-8]
   14808:	add	r3, r3, #1
   1480c:	str	r3, [fp, #-8]
   14810:	ldr	r2, [fp, #-8]
   14814:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14818:	cmp	r2, r3
   1481c:	bcc	14798 <__assert_fail@plt+0x365c>
   14820:	mov	r3, #0
   14824:	mov	r0, r3
   14828:	sub	sp, fp, #4
   1482c:	pop	{fp, pc}
   14830:	push	{fp, lr}
   14834:	add	fp, sp, #4
   14838:	sub	sp, sp, #16
   1483c:	str	r0, [fp, #-16]
   14840:	ldr	r3, [fp, #-16]
   14844:	cmp	r3, #0
   14848:	bne	14868 <__assert_fail@plt+0x372c>
   1484c:	ldr	r3, [pc, #220]	; 14930 <__assert_fail@plt+0x37f4>
   14850:	ldr	r3, [r3]
   14854:	mov	r2, #55	; 0x37
   14858:	mov	r1, #1
   1485c:	ldr	r0, [pc, #208]	; 14934 <__assert_fail@plt+0x37f8>
   14860:	bl	10f50 <fwrite@plt>
   14864:	bl	1110c <abort@plt>
   14868:	mov	r1, #47	; 0x2f
   1486c:	ldr	r0, [fp, #-16]
   14870:	bl	110c4 <strrchr@plt>
   14874:	str	r0, [fp, #-8]
   14878:	ldr	r3, [fp, #-8]
   1487c:	cmp	r3, #0
   14880:	beq	14890 <__assert_fail@plt+0x3754>
   14884:	ldr	r3, [fp, #-8]
   14888:	add	r3, r3, #1
   1488c:	b	14894 <__assert_fail@plt+0x3758>
   14890:	ldr	r3, [fp, #-16]
   14894:	str	r3, [fp, #-12]
   14898:	ldr	r2, [fp, #-12]
   1489c:	ldr	r3, [fp, #-16]
   148a0:	sub	r3, r2, r3
   148a4:	cmp	r3, #6
   148a8:	ble	1490c <__assert_fail@plt+0x37d0>
   148ac:	ldr	r3, [fp, #-12]
   148b0:	sub	r3, r3, #7
   148b4:	mov	r2, #7
   148b8:	ldr	r1, [pc, #120]	; 14938 <__assert_fail@plt+0x37fc>
   148bc:	mov	r0, r3
   148c0:	bl	11100 <strncmp@plt>
   148c4:	mov	r3, r0
   148c8:	cmp	r3, #0
   148cc:	bne	1490c <__assert_fail@plt+0x37d0>
   148d0:	ldr	r3, [fp, #-12]
   148d4:	str	r3, [fp, #-16]
   148d8:	mov	r2, #3
   148dc:	ldr	r1, [pc, #88]	; 1493c <__assert_fail@plt+0x3800>
   148e0:	ldr	r0, [fp, #-12]
   148e4:	bl	11100 <strncmp@plt>
   148e8:	mov	r3, r0
   148ec:	cmp	r3, #0
   148f0:	bne	1490c <__assert_fail@plt+0x37d0>
   148f4:	ldr	r3, [fp, #-12]
   148f8:	add	r3, r3, #3
   148fc:	str	r3, [fp, #-16]
   14900:	ldr	r2, [pc, #56]	; 14940 <__assert_fail@plt+0x3804>
   14904:	ldr	r3, [fp, #-16]
   14908:	str	r3, [r2]
   1490c:	ldr	r2, [pc, #48]	; 14944 <__assert_fail@plt+0x3808>
   14910:	ldr	r3, [fp, #-16]
   14914:	str	r3, [r2]
   14918:	ldr	r2, [pc, #40]	; 14948 <__assert_fail@plt+0x380c>
   1491c:	ldr	r3, [fp, #-16]
   14920:	str	r3, [r2]
   14924:	nop			; (mov r0, r0)
   14928:	sub	sp, fp, #4
   1492c:	pop	{fp, pc}
   14930:	andeq	sp, r2, r8, ror r1
   14934:	andeq	fp, r1, r8, ror #23
   14938:	andeq	fp, r1, r0, lsr #24
   1493c:	andeq	fp, r1, r8, lsr #24
   14940:	andeq	sp, r2, r8, ror #2
   14944:	andeq	sp, r2, r8, lsl #4
   14948:	andeq	sp, r2, ip, ror #2
   1494c:	push	{fp, lr}
   14950:	add	fp, sp, #4
   14954:	sub	sp, sp, #16
   14958:	str	r0, [fp, #-16]
   1495c:	bl	11040 <__errno_location@plt>
   14960:	mov	r3, r0
   14964:	ldr	r3, [r3]
   14968:	str	r3, [fp, #-8]
   1496c:	ldr	r3, [fp, #-16]
   14970:	cmp	r3, #0
   14974:	beq	14980 <__assert_fail@plt+0x3844>
   14978:	ldr	r3, [fp, #-16]
   1497c:	b	14984 <__assert_fail@plt+0x3848>
   14980:	ldr	r3, [pc, #48]	; 149b8 <__assert_fail@plt+0x387c>
   14984:	mov	r1, #48	; 0x30
   14988:	mov	r0, r3
   1498c:	bl	18308 <__assert_fail@plt+0x71cc>
   14990:	mov	r3, r0
   14994:	str	r3, [fp, #-12]
   14998:	bl	11040 <__errno_location@plt>
   1499c:	mov	r2, r0
   149a0:	ldr	r3, [fp, #-8]
   149a4:	str	r3, [r2]
   149a8:	ldr	r3, [fp, #-12]
   149ac:	mov	r0, r3
   149b0:	sub	sp, fp, #4
   149b4:	pop	{fp, pc}
   149b8:	andeq	sp, r2, ip, lsl #4
   149bc:	push	{fp}		; (str fp, [sp, #-4]!)
   149c0:	add	fp, sp, #0
   149c4:	sub	sp, sp, #12
   149c8:	str	r0, [fp, #-8]
   149cc:	ldr	r3, [fp, #-8]
   149d0:	cmp	r3, #0
   149d4:	beq	149e0 <__assert_fail@plt+0x38a4>
   149d8:	ldr	r3, [fp, #-8]
   149dc:	b	149e4 <__assert_fail@plt+0x38a8>
   149e0:	ldr	r3, [pc, #16]	; 149f8 <__assert_fail@plt+0x38bc>
   149e4:	ldr	r3, [r3]
   149e8:	mov	r0, r3
   149ec:	add	sp, fp, #0
   149f0:	pop	{fp}		; (ldr fp, [sp], #4)
   149f4:	bx	lr
   149f8:	andeq	sp, r2, ip, lsl #4
   149fc:	push	{fp}		; (str fp, [sp, #-4]!)
   14a00:	add	fp, sp, #0
   14a04:	sub	sp, sp, #12
   14a08:	str	r0, [fp, #-8]
   14a0c:	str	r1, [fp, #-12]
   14a10:	ldr	r3, [fp, #-8]
   14a14:	cmp	r3, #0
   14a18:	beq	14a24 <__assert_fail@plt+0x38e8>
   14a1c:	ldr	r3, [fp, #-8]
   14a20:	b	14a28 <__assert_fail@plt+0x38ec>
   14a24:	ldr	r3, [pc, #20]	; 14a40 <__assert_fail@plt+0x3904>
   14a28:	ldr	r2, [fp, #-12]
   14a2c:	str	r2, [r3]
   14a30:	nop			; (mov r0, r0)
   14a34:	add	sp, fp, #0
   14a38:	pop	{fp}		; (ldr fp, [sp], #4)
   14a3c:	bx	lr
   14a40:	andeq	sp, r2, ip, lsl #4
   14a44:	push	{fp}		; (str fp, [sp, #-4]!)
   14a48:	add	fp, sp, #0
   14a4c:	sub	sp, sp, #36	; 0x24
   14a50:	str	r0, [fp, #-24]	; 0xffffffe8
   14a54:	mov	r3, r1
   14a58:	str	r2, [fp, #-32]	; 0xffffffe0
   14a5c:	strb	r3, [fp, #-25]	; 0xffffffe7
   14a60:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14a64:	strb	r3, [fp, #-5]
   14a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a6c:	cmp	r3, #0
   14a70:	beq	14a7c <__assert_fail@plt+0x3940>
   14a74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a78:	b	14a80 <__assert_fail@plt+0x3944>
   14a7c:	ldr	r3, [pc, #124]	; 14b00 <__assert_fail@plt+0x39c4>
   14a80:	add	r2, r3, #8
   14a84:	ldrb	r3, [fp, #-5]
   14a88:	lsr	r3, r3, #5
   14a8c:	uxtb	r3, r3
   14a90:	lsl	r3, r3, #2
   14a94:	add	r3, r2, r3
   14a98:	str	r3, [fp, #-12]
   14a9c:	ldrb	r3, [fp, #-5]
   14aa0:	and	r3, r3, #31
   14aa4:	str	r3, [fp, #-16]
   14aa8:	ldr	r3, [fp, #-12]
   14aac:	ldr	r2, [r3]
   14ab0:	ldr	r3, [fp, #-16]
   14ab4:	lsr	r3, r2, r3
   14ab8:	and	r3, r3, #1
   14abc:	str	r3, [fp, #-20]	; 0xffffffec
   14ac0:	ldr	r3, [fp, #-12]
   14ac4:	ldr	r3, [r3]
   14ac8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14acc:	and	r1, r2, #1
   14ad0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ad4:	eor	r1, r1, r2
   14ad8:	ldr	r2, [fp, #-16]
   14adc:	lsl	r2, r1, r2
   14ae0:	eor	r2, r2, r3
   14ae4:	ldr	r3, [fp, #-12]
   14ae8:	str	r2, [r3]
   14aec:	ldr	r3, [fp, #-20]	; 0xffffffec
   14af0:	mov	r0, r3
   14af4:	add	sp, fp, #0
   14af8:	pop	{fp}		; (ldr fp, [sp], #4)
   14afc:	bx	lr
   14b00:	andeq	sp, r2, ip, lsl #4
   14b04:	push	{fp}		; (str fp, [sp, #-4]!)
   14b08:	add	fp, sp, #0
   14b0c:	sub	sp, sp, #20
   14b10:	str	r0, [fp, #-16]
   14b14:	str	r1, [fp, #-20]	; 0xffffffec
   14b18:	ldr	r3, [fp, #-16]
   14b1c:	cmp	r3, #0
   14b20:	bne	14b2c <__assert_fail@plt+0x39f0>
   14b24:	ldr	r3, [pc, #44]	; 14b58 <__assert_fail@plt+0x3a1c>
   14b28:	str	r3, [fp, #-16]
   14b2c:	ldr	r3, [fp, #-16]
   14b30:	ldr	r3, [r3, #4]
   14b34:	str	r3, [fp, #-8]
   14b38:	ldr	r3, [fp, #-16]
   14b3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b40:	str	r2, [r3, #4]
   14b44:	ldr	r3, [fp, #-8]
   14b48:	mov	r0, r3
   14b4c:	add	sp, fp, #0
   14b50:	pop	{fp}		; (ldr fp, [sp], #4)
   14b54:	bx	lr
   14b58:	andeq	sp, r2, ip, lsl #4
   14b5c:	push	{fp, lr}
   14b60:	add	fp, sp, #4
   14b64:	sub	sp, sp, #16
   14b68:	str	r0, [fp, #-8]
   14b6c:	str	r1, [fp, #-12]
   14b70:	str	r2, [fp, #-16]
   14b74:	ldr	r3, [fp, #-8]
   14b78:	cmp	r3, #0
   14b7c:	bne	14b88 <__assert_fail@plt+0x3a4c>
   14b80:	ldr	r3, [pc, #76]	; 14bd4 <__assert_fail@plt+0x3a98>
   14b84:	str	r3, [fp, #-8]
   14b88:	ldr	r3, [fp, #-8]
   14b8c:	mov	r2, #10
   14b90:	str	r2, [r3]
   14b94:	ldr	r3, [fp, #-12]
   14b98:	cmp	r3, #0
   14b9c:	beq	14bac <__assert_fail@plt+0x3a70>
   14ba0:	ldr	r3, [fp, #-16]
   14ba4:	cmp	r3, #0
   14ba8:	bne	14bb0 <__assert_fail@plt+0x3a74>
   14bac:	bl	1110c <abort@plt>
   14bb0:	ldr	r3, [fp, #-8]
   14bb4:	ldr	r2, [fp, #-12]
   14bb8:	str	r2, [r3, #40]	; 0x28
   14bbc:	ldr	r3, [fp, #-8]
   14bc0:	ldr	r2, [fp, #-16]
   14bc4:	str	r2, [r3, #44]	; 0x2c
   14bc8:	nop			; (mov r0, r0)
   14bcc:	sub	sp, fp, #4
   14bd0:	pop	{fp, pc}
   14bd4:	andeq	sp, r2, ip, lsl #4
   14bd8:	push	{fp, lr}
   14bdc:	add	fp, sp, #4
   14be0:	sub	sp, sp, #56	; 0x38
   14be4:	str	r0, [fp, #-56]	; 0xffffffc8
   14be8:	str	r1, [fp, #-60]	; 0xffffffc4
   14bec:	sub	r3, fp, #52	; 0x34
   14bf0:	mov	r2, #48	; 0x30
   14bf4:	mov	r1, #0
   14bf8:	mov	r0, r3
   14bfc:	bl	11058 <memset@plt>
   14c00:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14c04:	cmp	r3, #10
   14c08:	bne	14c10 <__assert_fail@plt+0x3ad4>
   14c0c:	bl	1110c <abort@plt>
   14c10:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14c14:	str	r3, [fp, #-52]	; 0xffffffcc
   14c18:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14c1c:	mov	lr, r3
   14c20:	sub	ip, fp, #52	; 0x34
   14c24:	ldm	ip!, {r0, r1, r2, r3}
   14c28:	stmia	lr!, {r0, r1, r2, r3}
   14c2c:	ldm	ip!, {r0, r1, r2, r3}
   14c30:	stmia	lr!, {r0, r1, r2, r3}
   14c34:	ldm	ip, {r0, r1, r2, r3}
   14c38:	stm	lr, {r0, r1, r2, r3}
   14c3c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14c40:	sub	sp, fp, #4
   14c44:	pop	{fp, pc}
   14c48:	push	{fp, lr}
   14c4c:	add	fp, sp, #4
   14c50:	sub	sp, sp, #16
   14c54:	str	r0, [fp, #-16]
   14c58:	str	r1, [fp, #-20]	; 0xffffffec
   14c5c:	ldr	r0, [fp, #-16]
   14c60:	bl	11004 <gettext@plt>
   14c64:	str	r0, [fp, #-8]
   14c68:	ldr	r2, [fp, #-8]
   14c6c:	ldr	r3, [fp, #-16]
   14c70:	cmp	r2, r3
   14c74:	beq	14c80 <__assert_fail@plt+0x3b44>
   14c78:	ldr	r3, [fp, #-8]
   14c7c:	b	14d10 <__assert_fail@plt+0x3bd4>
   14c80:	bl	19e4c <__assert_fail@plt+0x8d10>
   14c84:	str	r0, [fp, #-12]
   14c88:	ldr	r1, [pc, #140]	; 14d1c <__assert_fail@plt+0x3be0>
   14c8c:	ldr	r0, [fp, #-12]
   14c90:	bl	19820 <__assert_fail@plt+0x86e4>
   14c94:	mov	r3, r0
   14c98:	cmp	r3, #0
   14c9c:	bne	14cc0 <__assert_fail@plt+0x3b84>
   14ca0:	ldr	r3, [fp, #-16]
   14ca4:	ldrb	r3, [r3]
   14ca8:	cmp	r3, #96	; 0x60
   14cac:	bne	14cb8 <__assert_fail@plt+0x3b7c>
   14cb0:	ldr	r3, [pc, #104]	; 14d20 <__assert_fail@plt+0x3be4>
   14cb4:	b	14d10 <__assert_fail@plt+0x3bd4>
   14cb8:	ldr	r3, [pc, #100]	; 14d24 <__assert_fail@plt+0x3be8>
   14cbc:	b	14d10 <__assert_fail@plt+0x3bd4>
   14cc0:	ldr	r1, [pc, #96]	; 14d28 <__assert_fail@plt+0x3bec>
   14cc4:	ldr	r0, [fp, #-12]
   14cc8:	bl	19820 <__assert_fail@plt+0x86e4>
   14ccc:	mov	r3, r0
   14cd0:	cmp	r3, #0
   14cd4:	bne	14cf8 <__assert_fail@plt+0x3bbc>
   14cd8:	ldr	r3, [fp, #-16]
   14cdc:	ldrb	r3, [r3]
   14ce0:	cmp	r3, #96	; 0x60
   14ce4:	bne	14cf0 <__assert_fail@plt+0x3bb4>
   14ce8:	ldr	r3, [pc, #60]	; 14d2c <__assert_fail@plt+0x3bf0>
   14cec:	b	14d10 <__assert_fail@plt+0x3bd4>
   14cf0:	ldr	r3, [pc, #56]	; 14d30 <__assert_fail@plt+0x3bf4>
   14cf4:	b	14d10 <__assert_fail@plt+0x3bd4>
   14cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cfc:	cmp	r3, #9
   14d00:	bne	14d0c <__assert_fail@plt+0x3bd0>
   14d04:	ldr	r3, [pc, #40]	; 14d34 <__assert_fail@plt+0x3bf8>
   14d08:	b	14d10 <__assert_fail@plt+0x3bd4>
   14d0c:	ldr	r3, [pc, #36]	; 14d38 <__assert_fail@plt+0x3bfc>
   14d10:	mov	r0, r3
   14d14:	sub	sp, fp, #4
   14d18:	pop	{fp, pc}
   14d1c:	andeq	fp, r1, r8, ror #25
   14d20:	strdeq	fp, [r1], -r0
   14d24:	strdeq	fp, [r1], -r4
   14d28:	strdeq	fp, [r1], -r8
   14d2c:	andeq	fp, r1, r0, lsl #26
   14d30:	andeq	fp, r1, r4, lsl #26
   14d34:	andeq	fp, r1, r8, lsl #26
   14d38:	andeq	fp, r1, ip, lsl #26
   14d3c:	push	{r4, fp, lr}
   14d40:	add	fp, sp, #8
   14d44:	sub	sp, sp, #116	; 0x74
   14d48:	str	r0, [fp, #-88]	; 0xffffffa8
   14d4c:	str	r1, [fp, #-92]	; 0xffffffa4
   14d50:	str	r2, [fp, #-96]	; 0xffffffa0
   14d54:	str	r3, [fp, #-100]	; 0xffffff9c
   14d58:	mov	r3, #0
   14d5c:	str	r3, [fp, #-20]	; 0xffffffec
   14d60:	mov	r3, #0
   14d64:	str	r3, [fp, #-24]	; 0xffffffe8
   14d68:	mov	r3, #0
   14d6c:	str	r3, [fp, #-28]	; 0xffffffe4
   14d70:	mov	r3, #0
   14d74:	str	r3, [fp, #-32]	; 0xffffffe0
   14d78:	mov	r3, #0
   14d7c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14d80:	bl	10f68 <__ctype_get_mb_cur_max@plt>
   14d84:	mov	r3, r0
   14d88:	cmp	r3, #1
   14d8c:	moveq	r3, #1
   14d90:	movne	r3, #0
   14d94:	strb	r3, [fp, #-57]	; 0xffffffc7
   14d98:	ldr	r3, [fp, #8]
   14d9c:	and	r3, r3, #2
   14da0:	cmp	r3, #0
   14da4:	movne	r3, #1
   14da8:	moveq	r3, #0
   14dac:	strb	r3, [fp, #-34]	; 0xffffffde
   14db0:	mov	r3, #0
   14db4:	strb	r3, [fp, #-35]	; 0xffffffdd
   14db8:	mov	r3, #0
   14dbc:	strb	r3, [fp, #-36]	; 0xffffffdc
   14dc0:	mov	r3, #1
   14dc4:	strb	r3, [fp, #-37]	; 0xffffffdb
   14dc8:	ldr	r3, [fp, #4]
   14dcc:	cmp	r3, #10
   14dd0:	ldrls	pc, [pc, r3, lsl #2]
   14dd4:	b	14fdc <__assert_fail@plt+0x3ea0>
   14dd8:	ldrdeq	r4, [r1], -r0
   14ddc:	andeq	r4, r1, ip, asr #30
   14de0:	andeq	r4, r1, r0, ror pc
   14de4:	andeq	r4, r1, r4, asr #30
   14de8:	andeq	r4, r1, r4, asr pc
   14dec:	andeq	r4, r1, r4, lsl lr
   14df0:	andeq	r4, r1, r4, lsl #28
   14df4:	andeq	r4, r1, r4, ror lr
   14df8:	andeq	r4, r1, r8, lsl #29
   14dfc:	andeq	r4, r1, r8, lsl #29
   14e00:	andeq	r4, r1, r8, lsl #29
   14e04:	mov	r3, #5
   14e08:	str	r3, [fp, #4]
   14e0c:	mov	r3, #1
   14e10:	strb	r3, [fp, #-34]	; 0xffffffde
   14e14:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14e18:	eor	r3, r3, #1
   14e1c:	uxtb	r3, r3
   14e20:	cmp	r3, #0
   14e24:	beq	14e58 <__assert_fail@plt+0x3d1c>
   14e28:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e2c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e30:	cmp	r2, r3
   14e34:	bcs	14e4c <__assert_fail@plt+0x3d10>
   14e38:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e40:	add	r3, r2, r3
   14e44:	mov	r2, #34	; 0x22
   14e48:	strb	r2, [r3]
   14e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e50:	add	r3, r3, #1
   14e54:	str	r3, [fp, #-20]	; 0xffffffec
   14e58:	mov	r3, #1
   14e5c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14e60:	ldr	r3, [pc, #3872]	; 15d88 <__assert_fail@plt+0x4c4c>
   14e64:	str	r3, [fp, #-28]	; 0xffffffe4
   14e68:	mov	r3, #1
   14e6c:	str	r3, [fp, #-32]	; 0xffffffe0
   14e70:	b	14fe0 <__assert_fail@plt+0x3ea4>
   14e74:	mov	r3, #1
   14e78:	strb	r3, [fp, #-33]	; 0xffffffdf
   14e7c:	mov	r3, #0
   14e80:	strb	r3, [fp, #-34]	; 0xffffffde
   14e84:	b	14fe0 <__assert_fail@plt+0x3ea4>
   14e88:	ldr	r3, [fp, #4]
   14e8c:	cmp	r3, #10
   14e90:	beq	14eb4 <__assert_fail@plt+0x3d78>
   14e94:	ldr	r1, [fp, #4]
   14e98:	ldr	r0, [pc, #3820]	; 15d8c <__assert_fail@plt+0x4c50>
   14e9c:	bl	14c48 <__assert_fail@plt+0x3b0c>
   14ea0:	str	r0, [fp, #16]
   14ea4:	ldr	r1, [fp, #4]
   14ea8:	ldr	r0, [pc, #3808]	; 15d90 <__assert_fail@plt+0x4c54>
   14eac:	bl	14c48 <__assert_fail@plt+0x3b0c>
   14eb0:	str	r0, [fp, #20]
   14eb4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14eb8:	eor	r3, r3, #1
   14ebc:	uxtb	r3, r3
   14ec0:	cmp	r3, #0
   14ec4:	beq	14f24 <__assert_fail@plt+0x3de8>
   14ec8:	ldr	r3, [fp, #16]
   14ecc:	str	r3, [fp, #-28]	; 0xffffffe4
   14ed0:	b	14f14 <__assert_fail@plt+0x3dd8>
   14ed4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ed8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14edc:	cmp	r2, r3
   14ee0:	bcs	14efc <__assert_fail@plt+0x3dc0>
   14ee4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14eec:	add	r3, r2, r3
   14ef0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14ef4:	ldrb	r2, [r2]
   14ef8:	strb	r2, [r3]
   14efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f00:	add	r3, r3, #1
   14f04:	str	r3, [fp, #-20]	; 0xffffffec
   14f08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f0c:	add	r3, r3, #1
   14f10:	str	r3, [fp, #-28]	; 0xffffffe4
   14f14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f18:	ldrb	r3, [r3]
   14f1c:	cmp	r3, #0
   14f20:	bne	14ed4 <__assert_fail@plt+0x3d98>
   14f24:	mov	r3, #1
   14f28:	strb	r3, [fp, #-33]	; 0xffffffdf
   14f2c:	ldr	r3, [fp, #20]
   14f30:	str	r3, [fp, #-28]	; 0xffffffe4
   14f34:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14f38:	bl	1101c <strlen@plt>
   14f3c:	str	r0, [fp, #-32]	; 0xffffffe0
   14f40:	b	14fe0 <__assert_fail@plt+0x3ea4>
   14f44:	mov	r3, #1
   14f48:	strb	r3, [fp, #-33]	; 0xffffffdf
   14f4c:	mov	r3, #1
   14f50:	strb	r3, [fp, #-34]	; 0xffffffde
   14f54:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14f58:	eor	r3, r3, #1
   14f5c:	uxtb	r3, r3
   14f60:	cmp	r3, #0
   14f64:	beq	14f70 <__assert_fail@plt+0x3e34>
   14f68:	mov	r3, #1
   14f6c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14f70:	mov	r3, #2
   14f74:	str	r3, [fp, #4]
   14f78:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14f7c:	eor	r3, r3, #1
   14f80:	uxtb	r3, r3
   14f84:	cmp	r3, #0
   14f88:	beq	14fbc <__assert_fail@plt+0x3e80>
   14f8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f94:	cmp	r2, r3
   14f98:	bcs	14fb0 <__assert_fail@plt+0x3e74>
   14f9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14fa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fa4:	add	r3, r2, r3
   14fa8:	mov	r2, #39	; 0x27
   14fac:	strb	r2, [r3]
   14fb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fb4:	add	r3, r3, #1
   14fb8:	str	r3, [fp, #-20]	; 0xffffffec
   14fbc:	ldr	r3, [pc, #3532]	; 15d90 <__assert_fail@plt+0x4c54>
   14fc0:	str	r3, [fp, #-28]	; 0xffffffe4
   14fc4:	mov	r3, #1
   14fc8:	str	r3, [fp, #-32]	; 0xffffffe0
   14fcc:	b	14fe0 <__assert_fail@plt+0x3ea4>
   14fd0:	mov	r3, #0
   14fd4:	strb	r3, [fp, #-34]	; 0xffffffde
   14fd8:	b	14fe0 <__assert_fail@plt+0x3ea4>
   14fdc:	bl	1110c <abort@plt>
   14fe0:	mov	r3, #0
   14fe4:	str	r3, [fp, #-16]
   14fe8:	b	16178 <__assert_fail@plt+0x503c>
   14fec:	mov	r3, #0
   14ff0:	strb	r3, [fp, #-40]	; 0xffffffd8
   14ff4:	mov	r3, #0
   14ff8:	strb	r3, [fp, #-41]	; 0xffffffd7
   14ffc:	mov	r3, #0
   15000:	strb	r3, [fp, #-42]	; 0xffffffd6
   15004:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15008:	cmp	r3, #0
   1500c:	beq	150a8 <__assert_fail@plt+0x3f6c>
   15010:	ldr	r3, [fp, #4]
   15014:	cmp	r3, #2
   15018:	beq	150a8 <__assert_fail@plt+0x3f6c>
   1501c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15020:	cmp	r3, #0
   15024:	beq	150a8 <__assert_fail@plt+0x3f6c>
   15028:	ldr	r2, [fp, #-16]
   1502c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15030:	add	r4, r2, r3
   15034:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15038:	cmn	r3, #1
   1503c:	bne	15060 <__assert_fail@plt+0x3f24>
   15040:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15044:	cmp	r3, #1
   15048:	bls	15060 <__assert_fail@plt+0x3f24>
   1504c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15050:	bl	1101c <strlen@plt>
   15054:	str	r0, [fp, #-100]	; 0xffffff9c
   15058:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1505c:	b	15064 <__assert_fail@plt+0x3f28>
   15060:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15064:	cmp	r4, r3
   15068:	bhi	150a8 <__assert_fail@plt+0x3f6c>
   1506c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15070:	ldr	r3, [fp, #-16]
   15074:	add	r3, r2, r3
   15078:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1507c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15080:	mov	r0, r3
   15084:	bl	10f08 <memcmp@plt>
   15088:	mov	r3, r0
   1508c:	cmp	r3, #0
   15090:	bne	150a8 <__assert_fail@plt+0x3f6c>
   15094:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15098:	cmp	r3, #0
   1509c:	bne	16334 <__assert_fail@plt+0x51f8>
   150a0:	mov	r3, #1
   150a4:	strb	r3, [fp, #-40]	; 0xffffffd8
   150a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   150ac:	ldr	r3, [fp, #-16]
   150b0:	add	r3, r2, r3
   150b4:	ldrb	r3, [r3]
   150b8:	strb	r3, [fp, #-38]	; 0xffffffda
   150bc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   150c0:	cmp	r3, #126	; 0x7e
   150c4:	ldrls	pc, [pc, r3, lsl #2]
   150c8:	b	158f4 <__assert_fail@plt+0x47b8>
   150cc:	andeq	r5, r1, r8, asr #5
   150d0:	strdeq	r5, [r1], -r4
   150d4:	strdeq	r5, [r1], -r4
   150d8:	strdeq	r5, [r1], -r4
   150dc:	strdeq	r5, [r1], -r4
   150e0:	strdeq	r5, [r1], -r4
   150e4:	strdeq	r5, [r1], -r4
   150e8:			; <UNDEFINED> instruction: 0x000156b8
   150ec:	andeq	r5, r1, r4, asr #13
   150f0:	strdeq	r5, [r1], -r4
   150f4:	ldrdeq	r5, [r1], -ip
   150f8:	andeq	r5, r1, r0, lsl #14
   150fc:	ldrdeq	r5, [r1], -r0
   15100:	andeq	r5, r1, r8, ror #13
   15104:	strdeq	r5, [r1], -r4
   15108:	strdeq	r5, [r1], -r4
   1510c:	strdeq	r5, [r1], -r4
   15110:	strdeq	r5, [r1], -r4
   15114:	strdeq	r5, [r1], -r4
   15118:	strdeq	r5, [r1], -r4
   1511c:	strdeq	r5, [r1], -r4
   15120:	strdeq	r5, [r1], -r4
   15124:	strdeq	r5, [r1], -r4
   15128:	strdeq	r5, [r1], -r4
   1512c:	strdeq	r5, [r1], -r4
   15130:	strdeq	r5, [r1], -r4
   15134:	strdeq	r5, [r1], -r4
   15138:	strdeq	r5, [r1], -r4
   1513c:	strdeq	r5, [r1], -r4
   15140:	strdeq	r5, [r1], -r4
   15144:	strdeq	r5, [r1], -r4
   15148:	strdeq	r5, [r1], -r4
   1514c:	ldrdeq	r5, [r1], -r8
   15150:	andeq	r5, r1, r0, ror #15
   15154:	andeq	r5, r1, r0, ror #15
   15158:	andeq	r5, r1, ip, asr #15
   1515c:	andeq	r5, r1, r0, ror #15
   15160:	andeq	r5, r1, r8, ror #17
   15164:	andeq	r5, r1, r0, ror #15
   15168:	strdeq	r5, [r1], -ip
   1516c:	andeq	r5, r1, r0, ror #15
   15170:	andeq	r5, r1, r0, ror #15
   15174:	andeq	r5, r1, r0, ror #15
   15178:	andeq	r5, r1, r8, ror #17
   1517c:	andeq	r5, r1, r8, ror #17
   15180:	andeq	r5, r1, r8, ror #17
   15184:	andeq	r5, r1, r8, ror #17
   15188:	andeq	r5, r1, r8, ror #17
   1518c:	andeq	r5, r1, r8, ror #17
   15190:	andeq	r5, r1, r8, ror #17
   15194:	andeq	r5, r1, r8, ror #17
   15198:	andeq	r5, r1, r8, ror #17
   1519c:	andeq	r5, r1, r8, ror #17
   151a0:	andeq	r5, r1, r8, ror #17
   151a4:	andeq	r5, r1, r8, ror #17
   151a8:	andeq	r5, r1, r8, ror #17
   151ac:	andeq	r5, r1, r8, ror #17
   151b0:	andeq	r5, r1, r8, ror #17
   151b4:	andeq	r5, r1, r8, ror #17
   151b8:	andeq	r5, r1, r0, ror #15
   151bc:	andeq	r5, r1, r0, ror #15
   151c0:	andeq	r5, r1, r0, ror #15
   151c4:	andeq	r5, r1, r0, ror #15
   151c8:	andeq	r5, r1, r8, lsr #9
   151cc:	strdeq	r5, [r1], -r4
   151d0:	andeq	r5, r1, r8, ror #17
   151d4:	andeq	r5, r1, r8, ror #17
   151d8:	andeq	r5, r1, r8, ror #17
   151dc:	andeq	r5, r1, r8, ror #17
   151e0:	andeq	r5, r1, r8, ror #17
   151e4:	andeq	r5, r1, r8, ror #17
   151e8:	andeq	r5, r1, r8, ror #17
   151ec:	andeq	r5, r1, r8, ror #17
   151f0:	andeq	r5, r1, r8, ror #17
   151f4:	andeq	r5, r1, r8, ror #17
   151f8:	andeq	r5, r1, r8, ror #17
   151fc:	andeq	r5, r1, r8, ror #17
   15200:	andeq	r5, r1, r8, ror #17
   15204:	andeq	r5, r1, r8, ror #17
   15208:	andeq	r5, r1, r8, ror #17
   1520c:	andeq	r5, r1, r8, ror #17
   15210:	andeq	r5, r1, r8, ror #17
   15214:	andeq	r5, r1, r8, ror #17
   15218:	andeq	r5, r1, r8, ror #17
   1521c:	andeq	r5, r1, r8, ror #17
   15220:	andeq	r5, r1, r8, ror #17
   15224:	andeq	r5, r1, r8, ror #17
   15228:	andeq	r5, r1, r8, ror #17
   1522c:	andeq	r5, r1, r8, ror #17
   15230:	andeq	r5, r1, r8, ror #17
   15234:	andeq	r5, r1, r8, ror #17
   15238:	andeq	r5, r1, r0, ror #15
   1523c:	andeq	r5, r1, ip, lsl #14
   15240:	andeq	r5, r1, r8, ror #17
   15244:	andeq	r5, r1, r0, ror #15
   15248:	andeq	r5, r1, r8, ror #17
   1524c:	andeq	r5, r1, r0, ror #15
   15250:	andeq	r5, r1, r8, ror #17
   15254:	andeq	r5, r1, r8, ror #17
   15258:	andeq	r5, r1, r8, ror #17
   1525c:	andeq	r5, r1, r8, ror #17
   15260:	andeq	r5, r1, r8, ror #17
   15264:	andeq	r5, r1, r8, ror #17
   15268:	andeq	r5, r1, r8, ror #17
   1526c:	andeq	r5, r1, r8, ror #17
   15270:	andeq	r5, r1, r8, ror #17
   15274:	andeq	r5, r1, r8, ror #17
   15278:	andeq	r5, r1, r8, ror #17
   1527c:	andeq	r5, r1, r8, ror #17
   15280:	andeq	r5, r1, r8, ror #17
   15284:	andeq	r5, r1, r8, ror #17
   15288:	andeq	r5, r1, r8, ror #17
   1528c:	andeq	r5, r1, r8, ror #17
   15290:	andeq	r5, r1, r8, ror #17
   15294:	andeq	r5, r1, r8, ror #17
   15298:	andeq	r5, r1, r8, ror #17
   1529c:	andeq	r5, r1, r8, ror #17
   152a0:	andeq	r5, r1, r8, ror #17
   152a4:	andeq	r5, r1, r8, ror #17
   152a8:	andeq	r5, r1, r8, ror #17
   152ac:	andeq	r5, r1, r8, ror #17
   152b0:	andeq	r5, r1, r8, ror #17
   152b4:	andeq	r5, r1, r8, ror #17
   152b8:	andeq	r5, r1, r4, lsl #15
   152bc:	andeq	r5, r1, r0, ror #15
   152c0:	andeq	r5, r1, r4, lsl #15
   152c4:	andeq	r5, r1, ip, asr #15
   152c8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   152cc:	cmp	r3, #0
   152d0:	beq	15494 <__assert_fail@plt+0x4358>
   152d4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   152d8:	cmp	r3, #0
   152dc:	bne	1633c <__assert_fail@plt+0x5200>
   152e0:	mov	r3, #1
   152e4:	strb	r3, [fp, #-41]	; 0xffffffd7
   152e8:	ldr	r3, [fp, #4]
   152ec:	cmp	r3, #2
   152f0:	bne	153a0 <__assert_fail@plt+0x4264>
   152f4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   152f8:	eor	r3, r3, #1
   152fc:	uxtb	r3, r3
   15300:	cmp	r3, #0
   15304:	beq	153a0 <__assert_fail@plt+0x4264>
   15308:	ldr	r2, [fp, #-20]	; 0xffffffec
   1530c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15310:	cmp	r2, r3
   15314:	bcs	1532c <__assert_fail@plt+0x41f0>
   15318:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1531c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15320:	add	r3, r2, r3
   15324:	mov	r2, #39	; 0x27
   15328:	strb	r2, [r3]
   1532c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15330:	add	r3, r3, #1
   15334:	str	r3, [fp, #-20]	; 0xffffffec
   15338:	ldr	r2, [fp, #-20]	; 0xffffffec
   1533c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15340:	cmp	r2, r3
   15344:	bcs	1535c <__assert_fail@plt+0x4220>
   15348:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1534c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15350:	add	r3, r2, r3
   15354:	mov	r2, #36	; 0x24
   15358:	strb	r2, [r3]
   1535c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15360:	add	r3, r3, #1
   15364:	str	r3, [fp, #-20]	; 0xffffffec
   15368:	ldr	r2, [fp, #-20]	; 0xffffffec
   1536c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15370:	cmp	r2, r3
   15374:	bcs	1538c <__assert_fail@plt+0x4250>
   15378:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1537c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15380:	add	r3, r2, r3
   15384:	mov	r2, #39	; 0x27
   15388:	strb	r2, [r3]
   1538c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15390:	add	r3, r3, #1
   15394:	str	r3, [fp, #-20]	; 0xffffffec
   15398:	mov	r3, #1
   1539c:	strb	r3, [fp, #-35]	; 0xffffffdd
   153a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   153a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   153a8:	cmp	r2, r3
   153ac:	bcs	153c4 <__assert_fail@plt+0x4288>
   153b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   153b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   153b8:	add	r3, r2, r3
   153bc:	mov	r2, #92	; 0x5c
   153c0:	strb	r2, [r3]
   153c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   153c8:	add	r3, r3, #1
   153cc:	str	r3, [fp, #-20]	; 0xffffffec
   153d0:	ldr	r3, [fp, #4]
   153d4:	cmp	r3, #2
   153d8:	beq	15488 <__assert_fail@plt+0x434c>
   153dc:	ldr	r3, [fp, #-16]
   153e0:	add	r2, r3, #1
   153e4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   153e8:	cmp	r2, r3
   153ec:	bcs	15488 <__assert_fail@plt+0x434c>
   153f0:	ldr	r3, [fp, #-16]
   153f4:	add	r3, r3, #1
   153f8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   153fc:	add	r3, r2, r3
   15400:	ldrb	r3, [r3]
   15404:	cmp	r3, #47	; 0x2f
   15408:	bls	15488 <__assert_fail@plt+0x434c>
   1540c:	ldr	r3, [fp, #-16]
   15410:	add	r3, r3, #1
   15414:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15418:	add	r3, r2, r3
   1541c:	ldrb	r3, [r3]
   15420:	cmp	r3, #57	; 0x39
   15424:	bhi	15488 <__assert_fail@plt+0x434c>
   15428:	ldr	r2, [fp, #-20]	; 0xffffffec
   1542c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15430:	cmp	r2, r3
   15434:	bcs	1544c <__assert_fail@plt+0x4310>
   15438:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1543c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15440:	add	r3, r2, r3
   15444:	mov	r2, #48	; 0x30
   15448:	strb	r2, [r3]
   1544c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15450:	add	r3, r3, #1
   15454:	str	r3, [fp, #-20]	; 0xffffffec
   15458:	ldr	r2, [fp, #-20]	; 0xffffffec
   1545c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15460:	cmp	r2, r3
   15464:	bcs	1547c <__assert_fail@plt+0x4340>
   15468:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1546c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15470:	add	r3, r2, r3
   15474:	mov	r2, #48	; 0x30
   15478:	strb	r2, [r3]
   1547c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15480:	add	r3, r3, #1
   15484:	str	r3, [fp, #-20]	; 0xffffffec
   15488:	mov	r3, #48	; 0x30
   1548c:	strb	r3, [fp, #-38]	; 0xffffffda
   15490:	b	15ed0 <__assert_fail@plt+0x4d94>
   15494:	ldr	r3, [fp, #8]
   15498:	and	r3, r3, #1
   1549c:	cmp	r3, #0
   154a0:	beq	15ed0 <__assert_fail@plt+0x4d94>
   154a4:	b	1616c <__assert_fail@plt+0x5030>
   154a8:	ldr	r3, [fp, #4]
   154ac:	cmp	r3, #2
   154b0:	beq	154c0 <__assert_fail@plt+0x4384>
   154b4:	cmp	r3, #5
   154b8:	beq	154d0 <__assert_fail@plt+0x4394>
   154bc:	b	156b4 <__assert_fail@plt+0x4578>
   154c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   154c4:	cmp	r3, #0
   154c8:	beq	156a8 <__assert_fail@plt+0x456c>
   154cc:	b	16378 <__assert_fail@plt+0x523c>
   154d0:	ldr	r3, [fp, #8]
   154d4:	and	r3, r3, #4
   154d8:	cmp	r3, #0
   154dc:	beq	156b0 <__assert_fail@plt+0x4574>
   154e0:	ldr	r3, [fp, #-16]
   154e4:	add	r2, r3, #2
   154e8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   154ec:	cmp	r2, r3
   154f0:	bcs	156b0 <__assert_fail@plt+0x4574>
   154f4:	ldr	r3, [fp, #-16]
   154f8:	add	r3, r3, #1
   154fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15500:	add	r3, r2, r3
   15504:	ldrb	r3, [r3]
   15508:	cmp	r3, #63	; 0x3f
   1550c:	bne	156b0 <__assert_fail@plt+0x4574>
   15510:	ldr	r3, [fp, #-16]
   15514:	add	r3, r3, #2
   15518:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1551c:	add	r3, r2, r3
   15520:	ldrb	r3, [r3]
   15524:	sub	r3, r3, #33	; 0x21
   15528:	cmp	r3, #29
   1552c:	ldrls	pc, [pc, r3, lsl #2]
   15530:	b	156a0 <__assert_fail@plt+0x4564>
   15534:	andeq	r5, r1, ip, lsr #11
   15538:	andeq	r5, r1, r0, lsr #13
   1553c:	andeq	r5, r1, r0, lsr #13
   15540:	andeq	r5, r1, r0, lsr #13
   15544:	andeq	r5, r1, r0, lsr #13
   15548:	andeq	r5, r1, r0, lsr #13
   1554c:	andeq	r5, r1, ip, lsr #11
   15550:	andeq	r5, r1, ip, lsr #11
   15554:	andeq	r5, r1, ip, lsr #11
   15558:	andeq	r5, r1, r0, lsr #13
   1555c:	andeq	r5, r1, r0, lsr #13
   15560:	andeq	r5, r1, r0, lsr #13
   15564:	andeq	r5, r1, ip, lsr #11
   15568:	andeq	r5, r1, r0, lsr #13
   1556c:	andeq	r5, r1, ip, lsr #11
   15570:	andeq	r5, r1, r0, lsr #13
   15574:	andeq	r5, r1, r0, lsr #13
   15578:	andeq	r5, r1, r0, lsr #13
   1557c:	andeq	r5, r1, r0, lsr #13
   15580:	andeq	r5, r1, r0, lsr #13
   15584:	andeq	r5, r1, r0, lsr #13
   15588:	andeq	r5, r1, r0, lsr #13
   1558c:	andeq	r5, r1, r0, lsr #13
   15590:	andeq	r5, r1, r0, lsr #13
   15594:	andeq	r5, r1, r0, lsr #13
   15598:	andeq	r5, r1, r0, lsr #13
   1559c:	andeq	r5, r1, r0, lsr #13
   155a0:	andeq	r5, r1, ip, lsr #11
   155a4:	andeq	r5, r1, ip, lsr #11
   155a8:	andeq	r5, r1, ip, lsr #11
   155ac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   155b0:	cmp	r3, #0
   155b4:	bne	16344 <__assert_fail@plt+0x5208>
   155b8:	ldr	r3, [fp, #-16]
   155bc:	add	r3, r3, #2
   155c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   155c4:	add	r3, r2, r3
   155c8:	ldrb	r3, [r3]
   155cc:	strb	r3, [fp, #-38]	; 0xffffffda
   155d0:	ldr	r3, [fp, #-16]
   155d4:	add	r3, r3, #2
   155d8:	str	r3, [fp, #-16]
   155dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   155e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155e4:	cmp	r2, r3
   155e8:	bcs	15600 <__assert_fail@plt+0x44c4>
   155ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   155f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   155f4:	add	r3, r2, r3
   155f8:	mov	r2, #63	; 0x3f
   155fc:	strb	r2, [r3]
   15600:	ldr	r3, [fp, #-20]	; 0xffffffec
   15604:	add	r3, r3, #1
   15608:	str	r3, [fp, #-20]	; 0xffffffec
   1560c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15610:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15614:	cmp	r2, r3
   15618:	bcs	15630 <__assert_fail@plt+0x44f4>
   1561c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15620:	ldr	r3, [fp, #-20]	; 0xffffffec
   15624:	add	r3, r2, r3
   15628:	mov	r2, #34	; 0x22
   1562c:	strb	r2, [r3]
   15630:	ldr	r3, [fp, #-20]	; 0xffffffec
   15634:	add	r3, r3, #1
   15638:	str	r3, [fp, #-20]	; 0xffffffec
   1563c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15640:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15644:	cmp	r2, r3
   15648:	bcs	15660 <__assert_fail@plt+0x4524>
   1564c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15650:	ldr	r3, [fp, #-20]	; 0xffffffec
   15654:	add	r3, r2, r3
   15658:	mov	r2, #34	; 0x22
   1565c:	strb	r2, [r3]
   15660:	ldr	r3, [fp, #-20]	; 0xffffffec
   15664:	add	r3, r3, #1
   15668:	str	r3, [fp, #-20]	; 0xffffffec
   1566c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15670:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15674:	cmp	r2, r3
   15678:	bcs	15690 <__assert_fail@plt+0x4554>
   1567c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15680:	ldr	r3, [fp, #-20]	; 0xffffffec
   15684:	add	r3, r2, r3
   15688:	mov	r2, #63	; 0x3f
   1568c:	strb	r2, [r3]
   15690:	ldr	r3, [fp, #-20]	; 0xffffffec
   15694:	add	r3, r3, #1
   15698:	str	r3, [fp, #-20]	; 0xffffffec
   1569c:	b	156a4 <__assert_fail@plt+0x4568>
   156a0:	nop			; (mov r0, r0)
   156a4:	b	156b0 <__assert_fail@plt+0x4574>
   156a8:	nop			; (mov r0, r0)
   156ac:	b	15efc <__assert_fail@plt+0x4dc0>
   156b0:	nop			; (mov r0, r0)
   156b4:	b	15efc <__assert_fail@plt+0x4dc0>
   156b8:	mov	r3, #97	; 0x61
   156bc:	strb	r3, [fp, #-39]	; 0xffffffd9
   156c0:	b	1576c <__assert_fail@plt+0x4630>
   156c4:	mov	r3, #98	; 0x62
   156c8:	strb	r3, [fp, #-39]	; 0xffffffd9
   156cc:	b	1576c <__assert_fail@plt+0x4630>
   156d0:	mov	r3, #102	; 0x66
   156d4:	strb	r3, [fp, #-39]	; 0xffffffd9
   156d8:	b	1576c <__assert_fail@plt+0x4630>
   156dc:	mov	r3, #110	; 0x6e
   156e0:	strb	r3, [fp, #-39]	; 0xffffffd9
   156e4:	b	15754 <__assert_fail@plt+0x4618>
   156e8:	mov	r3, #114	; 0x72
   156ec:	strb	r3, [fp, #-39]	; 0xffffffd9
   156f0:	b	15754 <__assert_fail@plt+0x4618>
   156f4:	mov	r3, #116	; 0x74
   156f8:	strb	r3, [fp, #-39]	; 0xffffffd9
   156fc:	b	15754 <__assert_fail@plt+0x4618>
   15700:	mov	r3, #118	; 0x76
   15704:	strb	r3, [fp, #-39]	; 0xffffffd9
   15708:	b	1576c <__assert_fail@plt+0x4630>
   1570c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15710:	strb	r3, [fp, #-39]	; 0xffffffd9
   15714:	ldr	r3, [fp, #4]
   15718:	cmp	r3, #2
   1571c:	bne	15730 <__assert_fail@plt+0x45f4>
   15720:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15724:	cmp	r3, #0
   15728:	beq	16084 <__assert_fail@plt+0x4f48>
   1572c:	b	16378 <__assert_fail@plt+0x523c>
   15730:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15734:	cmp	r3, #0
   15738:	beq	15754 <__assert_fail@plt+0x4618>
   1573c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15740:	cmp	r3, #0
   15744:	beq	15754 <__assert_fail@plt+0x4618>
   15748:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1574c:	cmp	r3, #0
   15750:	bne	1608c <__assert_fail@plt+0x4f50>
   15754:	ldr	r3, [fp, #4]
   15758:	cmp	r3, #2
   1575c:	bne	1576c <__assert_fail@plt+0x4630>
   15760:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15764:	cmp	r3, #0
   15768:	bne	1634c <__assert_fail@plt+0x5210>
   1576c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15770:	cmp	r3, #0
   15774:	beq	15ed8 <__assert_fail@plt+0x4d9c>
   15778:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   1577c:	strb	r3, [fp, #-38]	; 0xffffffda
   15780:	b	15f84 <__assert_fail@plt+0x4e48>
   15784:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15788:	cmn	r3, #1
   1578c:	bne	157b0 <__assert_fail@plt+0x4674>
   15790:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15794:	add	r3, r3, #1
   15798:	ldrb	r3, [r3]
   1579c:	cmp	r3, #0
   157a0:	movne	r3, #1
   157a4:	moveq	r3, #0
   157a8:	uxtb	r3, r3
   157ac:	b	157c4 <__assert_fail@plt+0x4688>
   157b0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   157b4:	cmp	r3, #1
   157b8:	movne	r3, #1
   157bc:	moveq	r3, #0
   157c0:	uxtb	r3, r3
   157c4:	cmp	r3, #0
   157c8:	bne	15ee0 <__assert_fail@plt+0x4da4>
   157cc:	ldr	r3, [fp, #-16]
   157d0:	cmp	r3, #0
   157d4:	bne	15ee8 <__assert_fail@plt+0x4dac>
   157d8:	mov	r3, #1
   157dc:	strb	r3, [fp, #-42]	; 0xffffffd6
   157e0:	ldr	r3, [fp, #4]
   157e4:	cmp	r3, #2
   157e8:	bne	15ef0 <__assert_fail@plt+0x4db4>
   157ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   157f0:	cmp	r3, #0
   157f4:	beq	15ef0 <__assert_fail@plt+0x4db4>
   157f8:	b	16378 <__assert_fail@plt+0x523c>
   157fc:	mov	r3, #1
   15800:	strb	r3, [fp, #-36]	; 0xffffffdc
   15804:	mov	r3, #1
   15808:	strb	r3, [fp, #-42]	; 0xffffffd6
   1580c:	ldr	r3, [fp, #4]
   15810:	cmp	r3, #2
   15814:	bne	15ef8 <__assert_fail@plt+0x4dbc>
   15818:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1581c:	cmp	r3, #0
   15820:	bne	16354 <__assert_fail@plt+0x5218>
   15824:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15828:	cmp	r3, #0
   1582c:	beq	1584c <__assert_fail@plt+0x4710>
   15830:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15834:	cmp	r3, #0
   15838:	bne	1584c <__assert_fail@plt+0x4710>
   1583c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15840:	str	r3, [fp, #-24]	; 0xffffffe8
   15844:	mov	r3, #0
   15848:	str	r3, [fp, #-92]	; 0xffffffa4
   1584c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15850:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15854:	cmp	r2, r3
   15858:	bcs	15870 <__assert_fail@plt+0x4734>
   1585c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15860:	ldr	r3, [fp, #-20]	; 0xffffffec
   15864:	add	r3, r2, r3
   15868:	mov	r2, #39	; 0x27
   1586c:	strb	r2, [r3]
   15870:	ldr	r3, [fp, #-20]	; 0xffffffec
   15874:	add	r3, r3, #1
   15878:	str	r3, [fp, #-20]	; 0xffffffec
   1587c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15880:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15884:	cmp	r2, r3
   15888:	bcs	158a0 <__assert_fail@plt+0x4764>
   1588c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15890:	ldr	r3, [fp, #-20]	; 0xffffffec
   15894:	add	r3, r2, r3
   15898:	mov	r2, #92	; 0x5c
   1589c:	strb	r2, [r3]
   158a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   158a4:	add	r3, r3, #1
   158a8:	str	r3, [fp, #-20]	; 0xffffffec
   158ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   158b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158b4:	cmp	r2, r3
   158b8:	bcs	158d0 <__assert_fail@plt+0x4794>
   158bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   158c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   158c4:	add	r3, r2, r3
   158c8:	mov	r2, #39	; 0x27
   158cc:	strb	r2, [r3]
   158d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   158d4:	add	r3, r3, #1
   158d8:	str	r3, [fp, #-20]	; 0xffffffec
   158dc:	mov	r3, #0
   158e0:	strb	r3, [fp, #-35]	; 0xffffffdd
   158e4:	b	15ef8 <__assert_fail@plt+0x4dbc>
   158e8:	mov	r3, #1
   158ec:	strb	r3, [fp, #-42]	; 0xffffffd6
   158f0:	b	15efc <__assert_fail@plt+0x4dc0>
   158f4:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   158f8:	cmp	r3, #0
   158fc:	beq	1593c <__assert_fail@plt+0x4800>
   15900:	mov	r3, #1
   15904:	str	r3, [fp, #-48]	; 0xffffffd0
   15908:	bl	10fec <__ctype_b_loc@plt>
   1590c:	mov	r3, r0
   15910:	ldr	r2, [r3]
   15914:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15918:	lsl	r3, r3, #1
   1591c:	add	r3, r2, r3
   15920:	ldrh	r3, [r3]
   15924:	and	r3, r3, #16384	; 0x4000
   15928:	cmp	r3, #0
   1592c:	movne	r3, #1
   15930:	moveq	r3, #0
   15934:	strb	r3, [fp, #-49]	; 0xffffffcf
   15938:	b	15b88 <__assert_fail@plt+0x4a4c>
   1593c:	sub	r3, fp, #76	; 0x4c
   15940:	mov	r2, #8
   15944:	mov	r1, #0
   15948:	mov	r0, r3
   1594c:	bl	11058 <memset@plt>
   15950:	mov	r3, #0
   15954:	str	r3, [fp, #-48]	; 0xffffffd0
   15958:	mov	r3, #1
   1595c:	strb	r3, [fp, #-49]	; 0xffffffcf
   15960:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15964:	cmn	r3, #1
   15968:	bne	15978 <__assert_fail@plt+0x483c>
   1596c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15970:	bl	1101c <strlen@plt>
   15974:	str	r0, [fp, #-100]	; 0xffffff9c
   15978:	ldr	r2, [fp, #-16]
   1597c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15980:	add	r3, r2, r3
   15984:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15988:	add	r1, r2, r3
   1598c:	ldr	r2, [fp, #-16]
   15990:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15994:	add	r3, r2, r3
   15998:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1599c:	sub	r2, r2, r3
   159a0:	sub	r3, fp, #76	; 0x4c
   159a4:	sub	r0, fp, #80	; 0x50
   159a8:	bl	19ea8 <__assert_fail@plt+0x8d6c>
   159ac:	str	r0, [fp, #-64]	; 0xffffffc0
   159b0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   159b4:	cmp	r3, #0
   159b8:	beq	15b7c <__assert_fail@plt+0x4a40>
   159bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   159c0:	cmn	r3, #1
   159c4:	bne	159d4 <__assert_fail@plt+0x4898>
   159c8:	mov	r3, #0
   159cc:	strb	r3, [fp, #-49]	; 0xffffffcf
   159d0:	b	15b88 <__assert_fail@plt+0x4a4c>
   159d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   159d8:	cmn	r3, #2
   159dc:	bne	15a34 <__assert_fail@plt+0x48f8>
   159e0:	mov	r3, #0
   159e4:	strb	r3, [fp, #-49]	; 0xffffffcf
   159e8:	b	159f8 <__assert_fail@plt+0x48bc>
   159ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   159f0:	add	r3, r3, #1
   159f4:	str	r3, [fp, #-48]	; 0xffffffd0
   159f8:	ldr	r2, [fp, #-16]
   159fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a00:	add	r2, r2, r3
   15a04:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15a08:	cmp	r2, r3
   15a0c:	bcs	15b84 <__assert_fail@plt+0x4a48>
   15a10:	ldr	r2, [fp, #-16]
   15a14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a18:	add	r3, r2, r3
   15a1c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15a20:	add	r3, r2, r3
   15a24:	ldrb	r3, [r3]
   15a28:	cmp	r3, #0
   15a2c:	bne	159ec <__assert_fail@plt+0x48b0>
   15a30:	b	15b84 <__assert_fail@plt+0x4a48>
   15a34:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15a38:	cmp	r3, #0
   15a3c:	beq	15b30 <__assert_fail@plt+0x49f4>
   15a40:	ldr	r3, [fp, #4]
   15a44:	cmp	r3, #2
   15a48:	bne	15b30 <__assert_fail@plt+0x49f4>
   15a4c:	mov	r3, #1
   15a50:	str	r3, [fp, #-56]	; 0xffffffc8
   15a54:	b	15b20 <__assert_fail@plt+0x49e4>
   15a58:	ldr	r2, [fp, #-16]
   15a5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a60:	add	r2, r2, r3
   15a64:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15a68:	add	r3, r2, r3
   15a6c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15a70:	add	r3, r2, r3
   15a74:	ldrb	r3, [r3]
   15a78:	sub	r3, r3, #91	; 0x5b
   15a7c:	cmp	r3, #33	; 0x21
   15a80:	ldrls	pc, [pc, r3, lsl #2]
   15a84:	b	15b10 <__assert_fail@plt+0x49d4>
   15a88:	andeq	r6, r1, ip, asr r3
   15a8c:	andeq	r6, r1, ip, asr r3
   15a90:	andeq	r5, r1, r0, lsl fp
   15a94:	andeq	r6, r1, ip, asr r3
   15a98:	andeq	r5, r1, r0, lsl fp
   15a9c:	andeq	r6, r1, ip, asr r3
   15aa0:	andeq	r5, r1, r0, lsl fp
   15aa4:	andeq	r5, r1, r0, lsl fp
   15aa8:	andeq	r5, r1, r0, lsl fp
   15aac:	andeq	r5, r1, r0, lsl fp
   15ab0:	andeq	r5, r1, r0, lsl fp
   15ab4:	andeq	r5, r1, r0, lsl fp
   15ab8:	andeq	r5, r1, r0, lsl fp
   15abc:	andeq	r5, r1, r0, lsl fp
   15ac0:	andeq	r5, r1, r0, lsl fp
   15ac4:	andeq	r5, r1, r0, lsl fp
   15ac8:	andeq	r5, r1, r0, lsl fp
   15acc:	andeq	r5, r1, r0, lsl fp
   15ad0:	andeq	r5, r1, r0, lsl fp
   15ad4:	andeq	r5, r1, r0, lsl fp
   15ad8:	andeq	r5, r1, r0, lsl fp
   15adc:	andeq	r5, r1, r0, lsl fp
   15ae0:	andeq	r5, r1, r0, lsl fp
   15ae4:	andeq	r5, r1, r0, lsl fp
   15ae8:	andeq	r5, r1, r0, lsl fp
   15aec:	andeq	r5, r1, r0, lsl fp
   15af0:	andeq	r5, r1, r0, lsl fp
   15af4:	andeq	r5, r1, r0, lsl fp
   15af8:	andeq	r5, r1, r0, lsl fp
   15afc:	andeq	r5, r1, r0, lsl fp
   15b00:	andeq	r5, r1, r0, lsl fp
   15b04:	andeq	r5, r1, r0, lsl fp
   15b08:	andeq	r5, r1, r0, lsl fp
   15b0c:	andeq	r6, r1, ip, asr r3
   15b10:	nop			; (mov r0, r0)
   15b14:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15b18:	add	r3, r3, #1
   15b1c:	str	r3, [fp, #-56]	; 0xffffffc8
   15b20:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15b24:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15b28:	cmp	r2, r3
   15b2c:	bcc	15a58 <__assert_fail@plt+0x491c>
   15b30:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15b34:	mov	r0, r3
   15b38:	bl	10f44 <iswprint@plt>
   15b3c:	mov	r3, r0
   15b40:	cmp	r3, #0
   15b44:	bne	15b50 <__assert_fail@plt+0x4a14>
   15b48:	mov	r3, #0
   15b4c:	strb	r3, [fp, #-49]	; 0xffffffcf
   15b50:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15b54:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15b58:	add	r3, r2, r3
   15b5c:	str	r3, [fp, #-48]	; 0xffffffd0
   15b60:	sub	r3, fp, #76	; 0x4c
   15b64:	mov	r0, r3
   15b68:	bl	10ef0 <mbsinit@plt>
   15b6c:	mov	r3, r0
   15b70:	cmp	r3, #0
   15b74:	beq	15978 <__assert_fail@plt+0x483c>
   15b78:	b	15b88 <__assert_fail@plt+0x4a4c>
   15b7c:	nop			; (mov r0, r0)
   15b80:	b	15b88 <__assert_fail@plt+0x4a4c>
   15b84:	nop			; (mov r0, r0)
   15b88:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15b8c:	strb	r3, [fp, #-42]	; 0xffffffd6
   15b90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15b94:	cmp	r3, #1
   15b98:	bhi	15bbc <__assert_fail@plt+0x4a80>
   15b9c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15ba0:	cmp	r3, #0
   15ba4:	beq	15efc <__assert_fail@plt+0x4dc0>
   15ba8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15bac:	eor	r3, r3, #1
   15bb0:	uxtb	r3, r3
   15bb4:	cmp	r3, #0
   15bb8:	beq	15efc <__assert_fail@plt+0x4dc0>
   15bbc:	ldr	r2, [fp, #-16]
   15bc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15bc4:	add	r3, r2, r3
   15bc8:	str	r3, [fp, #-68]	; 0xffffffbc
   15bcc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15bd0:	cmp	r3, #0
   15bd4:	beq	15d94 <__assert_fail@plt+0x4c58>
   15bd8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15bdc:	eor	r3, r3, #1
   15be0:	uxtb	r3, r3
   15be4:	cmp	r3, #0
   15be8:	beq	15d94 <__assert_fail@plt+0x4c58>
   15bec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15bf0:	cmp	r3, #0
   15bf4:	bne	16364 <__assert_fail@plt+0x5228>
   15bf8:	mov	r3, #1
   15bfc:	strb	r3, [fp, #-41]	; 0xffffffd7
   15c00:	ldr	r3, [fp, #4]
   15c04:	cmp	r3, #2
   15c08:	bne	15cb8 <__assert_fail@plt+0x4b7c>
   15c0c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15c10:	eor	r3, r3, #1
   15c14:	uxtb	r3, r3
   15c18:	cmp	r3, #0
   15c1c:	beq	15cb8 <__assert_fail@plt+0x4b7c>
   15c20:	ldr	r2, [fp, #-20]	; 0xffffffec
   15c24:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15c28:	cmp	r2, r3
   15c2c:	bcs	15c44 <__assert_fail@plt+0x4b08>
   15c30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15c34:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c38:	add	r3, r2, r3
   15c3c:	mov	r2, #39	; 0x27
   15c40:	strb	r2, [r3]
   15c44:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c48:	add	r3, r3, #1
   15c4c:	str	r3, [fp, #-20]	; 0xffffffec
   15c50:	ldr	r2, [fp, #-20]	; 0xffffffec
   15c54:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15c58:	cmp	r2, r3
   15c5c:	bcs	15c74 <__assert_fail@plt+0x4b38>
   15c60:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15c64:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c68:	add	r3, r2, r3
   15c6c:	mov	r2, #36	; 0x24
   15c70:	strb	r2, [r3]
   15c74:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c78:	add	r3, r3, #1
   15c7c:	str	r3, [fp, #-20]	; 0xffffffec
   15c80:	ldr	r2, [fp, #-20]	; 0xffffffec
   15c84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15c88:	cmp	r2, r3
   15c8c:	bcs	15ca4 <__assert_fail@plt+0x4b68>
   15c90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15c94:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c98:	add	r3, r2, r3
   15c9c:	mov	r2, #39	; 0x27
   15ca0:	strb	r2, [r3]
   15ca4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ca8:	add	r3, r3, #1
   15cac:	str	r3, [fp, #-20]	; 0xffffffec
   15cb0:	mov	r3, #1
   15cb4:	strb	r3, [fp, #-35]	; 0xffffffdd
   15cb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   15cbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15cc0:	cmp	r2, r3
   15cc4:	bcs	15cdc <__assert_fail@plt+0x4ba0>
   15cc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15ccc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15cd0:	add	r3, r2, r3
   15cd4:	mov	r2, #92	; 0x5c
   15cd8:	strb	r2, [r3]
   15cdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ce0:	add	r3, r3, #1
   15ce4:	str	r3, [fp, #-20]	; 0xffffffec
   15ce8:	ldr	r2, [fp, #-20]	; 0xffffffec
   15cec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15cf0:	cmp	r2, r3
   15cf4:	bcs	15d1c <__assert_fail@plt+0x4be0>
   15cf8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15cfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d00:	add	r3, r2, r3
   15d04:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15d08:	lsr	r2, r2, #6
   15d0c:	uxtb	r2, r2
   15d10:	add	r2, r2, #48	; 0x30
   15d14:	uxtb	r2, r2
   15d18:	strb	r2, [r3]
   15d1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d20:	add	r3, r3, #1
   15d24:	str	r3, [fp, #-20]	; 0xffffffec
   15d28:	ldr	r2, [fp, #-20]	; 0xffffffec
   15d2c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15d30:	cmp	r2, r3
   15d34:	bcs	15d64 <__assert_fail@plt+0x4c28>
   15d38:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15d3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d40:	add	r3, r2, r3
   15d44:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15d48:	lsr	r2, r2, #3
   15d4c:	uxtb	r2, r2
   15d50:	and	r2, r2, #7
   15d54:	uxtb	r2, r2
   15d58:	add	r2, r2, #48	; 0x30
   15d5c:	uxtb	r2, r2
   15d60:	strb	r2, [r3]
   15d64:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d68:	add	r3, r3, #1
   15d6c:	str	r3, [fp, #-20]	; 0xffffffec
   15d70:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15d74:	and	r3, r3, #7
   15d78:	uxtb	r3, r3
   15d7c:	add	r3, r3, #48	; 0x30
   15d80:	strb	r3, [fp, #-38]	; 0xffffffda
   15d84:	b	15dd8 <__assert_fail@plt+0x4c9c>
   15d88:	andeq	fp, r1, r8, lsl #26
   15d8c:	andeq	fp, r1, r0, lsl sp
   15d90:	andeq	fp, r1, ip, lsl #26
   15d94:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   15d98:	cmp	r3, #0
   15d9c:	beq	15dd8 <__assert_fail@plt+0x4c9c>
   15da0:	ldr	r2, [fp, #-20]	; 0xffffffec
   15da4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15da8:	cmp	r2, r3
   15dac:	bcs	15dc4 <__assert_fail@plt+0x4c88>
   15db0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15db4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15db8:	add	r3, r2, r3
   15dbc:	mov	r2, #92	; 0x5c
   15dc0:	strb	r2, [r3]
   15dc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15dc8:	add	r3, r3, #1
   15dcc:	str	r3, [fp, #-20]	; 0xffffffec
   15dd0:	mov	r3, #0
   15dd4:	strb	r3, [fp, #-40]	; 0xffffffd8
   15dd8:	ldr	r3, [fp, #-16]
   15ddc:	add	r2, r3, #1
   15de0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15de4:	cmp	r2, r3
   15de8:	bcs	15ec8 <__assert_fail@plt+0x4d8c>
   15dec:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15df0:	cmp	r3, #0
   15df4:	beq	15e74 <__assert_fail@plt+0x4d38>
   15df8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   15dfc:	eor	r3, r3, #1
   15e00:	uxtb	r3, r3
   15e04:	cmp	r3, #0
   15e08:	beq	15e74 <__assert_fail@plt+0x4d38>
   15e0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e14:	cmp	r2, r3
   15e18:	bcs	15e30 <__assert_fail@plt+0x4cf4>
   15e1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e24:	add	r3, r2, r3
   15e28:	mov	r2, #39	; 0x27
   15e2c:	strb	r2, [r3]
   15e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e34:	add	r3, r3, #1
   15e38:	str	r3, [fp, #-20]	; 0xffffffec
   15e3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e44:	cmp	r2, r3
   15e48:	bcs	15e60 <__assert_fail@plt+0x4d24>
   15e4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e54:	add	r3, r2, r3
   15e58:	mov	r2, #39	; 0x27
   15e5c:	strb	r2, [r3]
   15e60:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e64:	add	r3, r3, #1
   15e68:	str	r3, [fp, #-20]	; 0xffffffec
   15e6c:	mov	r3, #0
   15e70:	strb	r3, [fp, #-35]	; 0xffffffdd
   15e74:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e7c:	cmp	r2, r3
   15e80:	bcs	15e98 <__assert_fail@plt+0x4d5c>
   15e84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e88:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e8c:	add	r3, r2, r3
   15e90:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15e94:	strb	r2, [r3]
   15e98:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e9c:	add	r3, r3, #1
   15ea0:	str	r3, [fp, #-20]	; 0xffffffec
   15ea4:	ldr	r3, [fp, #-16]
   15ea8:	add	r3, r3, #1
   15eac:	str	r3, [fp, #-16]
   15eb0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15eb4:	ldr	r3, [fp, #-16]
   15eb8:	add	r3, r2, r3
   15ebc:	ldrb	r3, [r3]
   15ec0:	strb	r3, [fp, #-38]	; 0xffffffda
   15ec4:	b	15bcc <__assert_fail@plt+0x4a90>
   15ec8:	nop			; (mov r0, r0)
   15ecc:	b	16098 <__assert_fail@plt+0x4f5c>
   15ed0:	nop			; (mov r0, r0)
   15ed4:	b	15efc <__assert_fail@plt+0x4dc0>
   15ed8:	nop			; (mov r0, r0)
   15edc:	b	15efc <__assert_fail@plt+0x4dc0>
   15ee0:	nop			; (mov r0, r0)
   15ee4:	b	15efc <__assert_fail@plt+0x4dc0>
   15ee8:	nop			; (mov r0, r0)
   15eec:	b	15efc <__assert_fail@plt+0x4dc0>
   15ef0:	nop			; (mov r0, r0)
   15ef4:	b	15efc <__assert_fail@plt+0x4dc0>
   15ef8:	nop			; (mov r0, r0)
   15efc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15f00:	eor	r3, r3, #1
   15f04:	uxtb	r3, r3
   15f08:	cmp	r3, #0
   15f0c:	bne	15f1c <__assert_fail@plt+0x4de0>
   15f10:	ldr	r3, [fp, #4]
   15f14:	cmp	r3, #2
   15f18:	bne	15f30 <__assert_fail@plt+0x4df4>
   15f1c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15f20:	eor	r3, r3, #1
   15f24:	uxtb	r3, r3
   15f28:	cmp	r3, #0
   15f2c:	bne	15f70 <__assert_fail@plt+0x4e34>
   15f30:	ldr	r3, [fp, #12]
   15f34:	cmp	r3, #0
   15f38:	beq	15f70 <__assert_fail@plt+0x4e34>
   15f3c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15f40:	lsr	r3, r3, #5
   15f44:	uxtb	r3, r3
   15f48:	lsl	r3, r3, #2
   15f4c:	ldr	r2, [fp, #12]
   15f50:	add	r3, r2, r3
   15f54:	ldr	r2, [r3]
   15f58:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15f5c:	and	r3, r3, #31
   15f60:	lsr	r3, r2, r3
   15f64:	and	r3, r3, #1
   15f68:	cmp	r3, #0
   15f6c:	bne	15f84 <__assert_fail@plt+0x4e48>
   15f70:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   15f74:	eor	r3, r3, #1
   15f78:	uxtb	r3, r3
   15f7c:	cmp	r3, #0
   15f80:	bne	16094 <__assert_fail@plt+0x4f58>
   15f84:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15f88:	cmp	r3, #0
   15f8c:	bne	1636c <__assert_fail@plt+0x5230>
   15f90:	mov	r3, #1
   15f94:	strb	r3, [fp, #-41]	; 0xffffffd7
   15f98:	ldr	r3, [fp, #4]
   15f9c:	cmp	r3, #2
   15fa0:	bne	16050 <__assert_fail@plt+0x4f14>
   15fa4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15fa8:	eor	r3, r3, #1
   15fac:	uxtb	r3, r3
   15fb0:	cmp	r3, #0
   15fb4:	beq	16050 <__assert_fail@plt+0x4f14>
   15fb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   15fbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15fc0:	cmp	r2, r3
   15fc4:	bcs	15fdc <__assert_fail@plt+0x4ea0>
   15fc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fd0:	add	r3, r2, r3
   15fd4:	mov	r2, #39	; 0x27
   15fd8:	strb	r2, [r3]
   15fdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fe0:	add	r3, r3, #1
   15fe4:	str	r3, [fp, #-20]	; 0xffffffec
   15fe8:	ldr	r2, [fp, #-20]	; 0xffffffec
   15fec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15ff0:	cmp	r2, r3
   15ff4:	bcs	1600c <__assert_fail@plt+0x4ed0>
   15ff8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15ffc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16000:	add	r3, r2, r3
   16004:	mov	r2, #36	; 0x24
   16008:	strb	r2, [r3]
   1600c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16010:	add	r3, r3, #1
   16014:	str	r3, [fp, #-20]	; 0xffffffec
   16018:	ldr	r2, [fp, #-20]	; 0xffffffec
   1601c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16020:	cmp	r2, r3
   16024:	bcs	1603c <__assert_fail@plt+0x4f00>
   16028:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1602c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16030:	add	r3, r2, r3
   16034:	mov	r2, #39	; 0x27
   16038:	strb	r2, [r3]
   1603c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16040:	add	r3, r3, #1
   16044:	str	r3, [fp, #-20]	; 0xffffffec
   16048:	mov	r3, #1
   1604c:	strb	r3, [fp, #-35]	; 0xffffffdd
   16050:	ldr	r2, [fp, #-20]	; 0xffffffec
   16054:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16058:	cmp	r2, r3
   1605c:	bcs	16074 <__assert_fail@plt+0x4f38>
   16060:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16064:	ldr	r3, [fp, #-20]	; 0xffffffec
   16068:	add	r3, r2, r3
   1606c:	mov	r2, #92	; 0x5c
   16070:	strb	r2, [r3]
   16074:	ldr	r3, [fp, #-20]	; 0xffffffec
   16078:	add	r3, r3, #1
   1607c:	str	r3, [fp, #-20]	; 0xffffffec
   16080:	b	16098 <__assert_fail@plt+0x4f5c>
   16084:	nop			; (mov r0, r0)
   16088:	b	16098 <__assert_fail@plt+0x4f5c>
   1608c:	nop			; (mov r0, r0)
   16090:	b	16098 <__assert_fail@plt+0x4f5c>
   16094:	nop			; (mov r0, r0)
   16098:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1609c:	cmp	r3, #0
   160a0:	beq	16120 <__assert_fail@plt+0x4fe4>
   160a4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   160a8:	eor	r3, r3, #1
   160ac:	uxtb	r3, r3
   160b0:	cmp	r3, #0
   160b4:	beq	16120 <__assert_fail@plt+0x4fe4>
   160b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   160bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   160c0:	cmp	r2, r3
   160c4:	bcs	160dc <__assert_fail@plt+0x4fa0>
   160c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   160cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   160d0:	add	r3, r2, r3
   160d4:	mov	r2, #39	; 0x27
   160d8:	strb	r2, [r3]
   160dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   160e0:	add	r3, r3, #1
   160e4:	str	r3, [fp, #-20]	; 0xffffffec
   160e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   160ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   160f0:	cmp	r2, r3
   160f4:	bcs	1610c <__assert_fail@plt+0x4fd0>
   160f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   160fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16100:	add	r3, r2, r3
   16104:	mov	r2, #39	; 0x27
   16108:	strb	r2, [r3]
   1610c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16110:	add	r3, r3, #1
   16114:	str	r3, [fp, #-20]	; 0xffffffec
   16118:	mov	r3, #0
   1611c:	strb	r3, [fp, #-35]	; 0xffffffdd
   16120:	ldr	r2, [fp, #-20]	; 0xffffffec
   16124:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16128:	cmp	r2, r3
   1612c:	bcs	16144 <__assert_fail@plt+0x5008>
   16130:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16134:	ldr	r3, [fp, #-20]	; 0xffffffec
   16138:	add	r3, r2, r3
   1613c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   16140:	strb	r2, [r3]
   16144:	ldr	r3, [fp, #-20]	; 0xffffffec
   16148:	add	r3, r3, #1
   1614c:	str	r3, [fp, #-20]	; 0xffffffec
   16150:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   16154:	eor	r3, r3, #1
   16158:	uxtb	r3, r3
   1615c:	cmp	r3, #0
   16160:	beq	1616c <__assert_fail@plt+0x5030>
   16164:	mov	r3, #0
   16168:	strb	r3, [fp, #-37]	; 0xffffffdb
   1616c:	ldr	r3, [fp, #-16]
   16170:	add	r3, r3, #1
   16174:	str	r3, [fp, #-16]
   16178:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1617c:	cmn	r3, #1
   16180:	bne	161a8 <__assert_fail@plt+0x506c>
   16184:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16188:	ldr	r3, [fp, #-16]
   1618c:	add	r3, r2, r3
   16190:	ldrb	r3, [r3]
   16194:	cmp	r3, #0
   16198:	movne	r3, #1
   1619c:	moveq	r3, #0
   161a0:	uxtb	r3, r3
   161a4:	b	161c0 <__assert_fail@plt+0x5084>
   161a8:	ldr	r2, [fp, #-16]
   161ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   161b0:	cmp	r2, r3
   161b4:	movne	r3, #1
   161b8:	moveq	r3, #0
   161bc:	uxtb	r3, r3
   161c0:	cmp	r3, #0
   161c4:	bne	14fec <__assert_fail@plt+0x3eb0>
   161c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   161cc:	cmp	r3, #0
   161d0:	bne	161ec <__assert_fail@plt+0x50b0>
   161d4:	ldr	r3, [fp, #4]
   161d8:	cmp	r3, #2
   161dc:	bne	161ec <__assert_fail@plt+0x50b0>
   161e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   161e4:	cmp	r3, #0
   161e8:	bne	16374 <__assert_fail@plt+0x5238>
   161ec:	ldr	r3, [fp, #4]
   161f0:	cmp	r3, #2
   161f4:	bne	16294 <__assert_fail@plt+0x5158>
   161f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   161fc:	eor	r3, r3, #1
   16200:	uxtb	r3, r3
   16204:	cmp	r3, #0
   16208:	beq	16294 <__assert_fail@plt+0x5158>
   1620c:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   16210:	cmp	r3, #0
   16214:	beq	16294 <__assert_fail@plt+0x5158>
   16218:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1621c:	cmp	r3, #0
   16220:	beq	16268 <__assert_fail@plt+0x512c>
   16224:	ldr	r3, [fp, #20]
   16228:	str	r3, [sp, #16]
   1622c:	ldr	r3, [fp, #16]
   16230:	str	r3, [sp, #12]
   16234:	ldr	r3, [fp, #12]
   16238:	str	r3, [sp, #8]
   1623c:	ldr	r3, [fp, #8]
   16240:	str	r3, [sp, #4]
   16244:	mov	r3, #5
   16248:	str	r3, [sp]
   1624c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16250:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16254:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16258:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1625c:	bl	14d3c <__assert_fail@plt+0x3c00>
   16260:	mov	r3, r0
   16264:	b	163dc <__assert_fail@plt+0x52a0>
   16268:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1626c:	cmp	r3, #0
   16270:	bne	16294 <__assert_fail@plt+0x5158>
   16274:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16278:	cmp	r3, #0
   1627c:	beq	16294 <__assert_fail@plt+0x5158>
   16280:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16284:	str	r3, [fp, #-92]	; 0xffffffa4
   16288:	mov	r3, #0
   1628c:	str	r3, [fp, #-20]	; 0xffffffec
   16290:	b	14dc8 <__assert_fail@plt+0x3c8c>
   16294:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16298:	cmp	r3, #0
   1629c:	beq	16308 <__assert_fail@plt+0x51cc>
   162a0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   162a4:	eor	r3, r3, #1
   162a8:	uxtb	r3, r3
   162ac:	cmp	r3, #0
   162b0:	beq	16308 <__assert_fail@plt+0x51cc>
   162b4:	b	162f8 <__assert_fail@plt+0x51bc>
   162b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   162bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   162c0:	cmp	r2, r3
   162c4:	bcs	162e0 <__assert_fail@plt+0x51a4>
   162c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   162cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   162d0:	add	r3, r2, r3
   162d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   162d8:	ldrb	r2, [r2]
   162dc:	strb	r2, [r3]
   162e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   162e4:	add	r3, r3, #1
   162e8:	str	r3, [fp, #-20]	; 0xffffffec
   162ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   162f0:	add	r3, r3, #1
   162f4:	str	r3, [fp, #-28]	; 0xffffffe4
   162f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   162fc:	ldrb	r3, [r3]
   16300:	cmp	r3, #0
   16304:	bne	162b8 <__assert_fail@plt+0x517c>
   16308:	ldr	r2, [fp, #-20]	; 0xffffffec
   1630c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16310:	cmp	r2, r3
   16314:	bcs	1632c <__assert_fail@plt+0x51f0>
   16318:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1631c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16320:	add	r3, r2, r3
   16324:	mov	r2, #0
   16328:	strb	r2, [r3]
   1632c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16330:	b	163dc <__assert_fail@plt+0x52a0>
   16334:	nop			; (mov r0, r0)
   16338:	b	16378 <__assert_fail@plt+0x523c>
   1633c:	nop			; (mov r0, r0)
   16340:	b	16378 <__assert_fail@plt+0x523c>
   16344:	nop			; (mov r0, r0)
   16348:	b	16378 <__assert_fail@plt+0x523c>
   1634c:	nop			; (mov r0, r0)
   16350:	b	16378 <__assert_fail@plt+0x523c>
   16354:	nop			; (mov r0, r0)
   16358:	b	16378 <__assert_fail@plt+0x523c>
   1635c:	nop			; (mov r0, r0)
   16360:	b	16378 <__assert_fail@plt+0x523c>
   16364:	nop			; (mov r0, r0)
   16368:	b	16378 <__assert_fail@plt+0x523c>
   1636c:	nop			; (mov r0, r0)
   16370:	b	16378 <__assert_fail@plt+0x523c>
   16374:	nop			; (mov r0, r0)
   16378:	ldr	r3, [fp, #4]
   1637c:	cmp	r3, #2
   16380:	bne	16398 <__assert_fail@plt+0x525c>
   16384:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   16388:	cmp	r3, #0
   1638c:	beq	16398 <__assert_fail@plt+0x525c>
   16390:	mov	r3, #4
   16394:	str	r3, [fp, #4]
   16398:	ldr	r3, [fp, #8]
   1639c:	bic	r3, r3, #2
   163a0:	ldr	r2, [fp, #20]
   163a4:	str	r2, [sp, #16]
   163a8:	ldr	r2, [fp, #16]
   163ac:	str	r2, [sp, #12]
   163b0:	mov	r2, #0
   163b4:	str	r2, [sp, #8]
   163b8:	str	r3, [sp, #4]
   163bc:	ldr	r3, [fp, #4]
   163c0:	str	r3, [sp]
   163c4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   163c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   163cc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   163d0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   163d4:	bl	14d3c <__assert_fail@plt+0x3c00>
   163d8:	mov	r3, r0
   163dc:	mov	r0, r3
   163e0:	sub	sp, fp, #8
   163e4:	pop	{r4, fp, pc}
   163e8:	push	{fp, lr}
   163ec:	add	fp, sp, #4
   163f0:	sub	sp, sp, #56	; 0x38
   163f4:	str	r0, [fp, #-24]	; 0xffffffe8
   163f8:	str	r1, [fp, #-28]	; 0xffffffe4
   163fc:	str	r2, [fp, #-32]	; 0xffffffe0
   16400:	str	r3, [fp, #-36]	; 0xffffffdc
   16404:	ldr	r3, [fp, #4]
   16408:	cmp	r3, #0
   1640c:	beq	16418 <__assert_fail@plt+0x52dc>
   16410:	ldr	r3, [fp, #4]
   16414:	b	1641c <__assert_fail@plt+0x52e0>
   16418:	ldr	r3, [pc, #132]	; 164a4 <__assert_fail@plt+0x5368>
   1641c:	str	r3, [fp, #-8]
   16420:	bl	11040 <__errno_location@plt>
   16424:	mov	r3, r0
   16428:	ldr	r3, [r3]
   1642c:	str	r3, [fp, #-12]
   16430:	ldr	r3, [fp, #-8]
   16434:	ldr	r3, [r3]
   16438:	ldr	r2, [fp, #-8]
   1643c:	ldr	r2, [r2, #4]
   16440:	ldr	r1, [fp, #-8]
   16444:	add	r1, r1, #8
   16448:	ldr	r0, [fp, #-8]
   1644c:	ldr	r0, [r0, #40]	; 0x28
   16450:	ldr	ip, [fp, #-8]
   16454:	ldr	ip, [ip, #44]	; 0x2c
   16458:	str	ip, [sp, #16]
   1645c:	str	r0, [sp, #12]
   16460:	str	r1, [sp, #8]
   16464:	str	r2, [sp, #4]
   16468:	str	r3, [sp]
   1646c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16470:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16474:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16478:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1647c:	bl	14d3c <__assert_fail@plt+0x3c00>
   16480:	str	r0, [fp, #-16]
   16484:	bl	11040 <__errno_location@plt>
   16488:	mov	r2, r0
   1648c:	ldr	r3, [fp, #-12]
   16490:	str	r3, [r2]
   16494:	ldr	r3, [fp, #-16]
   16498:	mov	r0, r3
   1649c:	sub	sp, fp, #4
   164a0:	pop	{fp, pc}
   164a4:	andeq	sp, r2, ip, lsl #4
   164a8:	push	{fp, lr}
   164ac:	add	fp, sp, #4
   164b0:	sub	sp, sp, #16
   164b4:	str	r0, [fp, #-8]
   164b8:	str	r1, [fp, #-12]
   164bc:	str	r2, [fp, #-16]
   164c0:	ldr	r3, [fp, #-16]
   164c4:	mov	r2, #0
   164c8:	ldr	r1, [fp, #-12]
   164cc:	ldr	r0, [fp, #-8]
   164d0:	bl	164e4 <__assert_fail@plt+0x53a8>
   164d4:	mov	r3, r0
   164d8:	mov	r0, r3
   164dc:	sub	sp, fp, #4
   164e0:	pop	{fp, pc}
   164e4:	push	{fp, lr}
   164e8:	add	fp, sp, #4
   164ec:	sub	sp, sp, #64	; 0x40
   164f0:	str	r0, [fp, #-32]	; 0xffffffe0
   164f4:	str	r1, [fp, #-36]	; 0xffffffdc
   164f8:	str	r2, [fp, #-40]	; 0xffffffd8
   164fc:	str	r3, [fp, #-44]	; 0xffffffd4
   16500:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16504:	cmp	r3, #0
   16508:	beq	16514 <__assert_fail@plt+0x53d8>
   1650c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16510:	b	16518 <__assert_fail@plt+0x53dc>
   16514:	ldr	r3, [pc, #292]	; 16640 <__assert_fail@plt+0x5504>
   16518:	str	r3, [fp, #-8]
   1651c:	bl	11040 <__errno_location@plt>
   16520:	mov	r3, r0
   16524:	ldr	r3, [r3]
   16528:	str	r3, [fp, #-12]
   1652c:	ldr	r3, [fp, #-8]
   16530:	ldr	r3, [r3, #4]
   16534:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16538:	cmp	r2, #0
   1653c:	moveq	r2, #1
   16540:	movne	r2, #0
   16544:	uxtb	r2, r2
   16548:	orr	r3, r3, r2
   1654c:	str	r3, [fp, #-16]
   16550:	ldr	r3, [fp, #-8]
   16554:	ldr	r3, [r3]
   16558:	ldr	r2, [fp, #-8]
   1655c:	add	r2, r2, #8
   16560:	ldr	r1, [fp, #-8]
   16564:	ldr	r1, [r1, #40]	; 0x28
   16568:	ldr	r0, [fp, #-8]
   1656c:	ldr	r0, [r0, #44]	; 0x2c
   16570:	str	r0, [sp, #16]
   16574:	str	r1, [sp, #12]
   16578:	str	r2, [sp, #8]
   1657c:	ldr	r2, [fp, #-16]
   16580:	str	r2, [sp, #4]
   16584:	str	r3, [sp]
   16588:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1658c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16590:	mov	r1, #0
   16594:	mov	r0, #0
   16598:	bl	14d3c <__assert_fail@plt+0x3c00>
   1659c:	mov	r3, r0
   165a0:	add	r3, r3, #1
   165a4:	str	r3, [fp, #-20]	; 0xffffffec
   165a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   165ac:	bl	17978 <__assert_fail@plt+0x683c>
   165b0:	mov	r3, r0
   165b4:	str	r3, [fp, #-24]	; 0xffffffe8
   165b8:	ldr	r3, [fp, #-8]
   165bc:	ldr	r3, [r3]
   165c0:	ldr	r2, [fp, #-8]
   165c4:	add	r2, r2, #8
   165c8:	ldr	r1, [fp, #-8]
   165cc:	ldr	r1, [r1, #40]	; 0x28
   165d0:	ldr	r0, [fp, #-8]
   165d4:	ldr	r0, [r0, #44]	; 0x2c
   165d8:	str	r0, [sp, #16]
   165dc:	str	r1, [sp, #12]
   165e0:	str	r2, [sp, #8]
   165e4:	ldr	r2, [fp, #-16]
   165e8:	str	r2, [sp, #4]
   165ec:	str	r3, [sp]
   165f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   165f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   165f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   165fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16600:	bl	14d3c <__assert_fail@plt+0x3c00>
   16604:	bl	11040 <__errno_location@plt>
   16608:	mov	r2, r0
   1660c:	ldr	r3, [fp, #-12]
   16610:	str	r3, [r2]
   16614:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16618:	cmp	r3, #0
   1661c:	beq	16630 <__assert_fail@plt+0x54f4>
   16620:	ldr	r3, [fp, #-20]	; 0xffffffec
   16624:	sub	r2, r3, #1
   16628:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1662c:	str	r2, [r3]
   16630:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16634:	mov	r0, r3
   16638:	sub	sp, fp, #4
   1663c:	pop	{fp, pc}
   16640:	andeq	sp, r2, ip, lsl #4
   16644:	push	{fp, lr}
   16648:	add	fp, sp, #4
   1664c:	sub	sp, sp, #8
   16650:	ldr	r3, [pc, #196]	; 1671c <__assert_fail@plt+0x55e0>
   16654:	ldr	r3, [r3]
   16658:	str	r3, [fp, #-12]
   1665c:	mov	r3, #1
   16660:	str	r3, [fp, #-8]
   16664:	b	16690 <__assert_fail@plt+0x5554>
   16668:	ldr	r3, [fp, #-8]
   1666c:	lsl	r3, r3, #3
   16670:	ldr	r2, [fp, #-12]
   16674:	add	r3, r2, r3
   16678:	ldr	r3, [r3, #4]
   1667c:	mov	r0, r3
   16680:	bl	1433c <__assert_fail@plt+0x3200>
   16684:	ldr	r3, [fp, #-8]
   16688:	add	r3, r3, #1
   1668c:	str	r3, [fp, #-8]
   16690:	ldr	r3, [pc, #136]	; 16720 <__assert_fail@plt+0x55e4>
   16694:	ldr	r3, [r3]
   16698:	ldr	r2, [fp, #-8]
   1669c:	cmp	r2, r3
   166a0:	blt	16668 <__assert_fail@plt+0x552c>
   166a4:	ldr	r3, [fp, #-12]
   166a8:	ldr	r3, [r3, #4]
   166ac:	ldr	r2, [pc, #112]	; 16724 <__assert_fail@plt+0x55e8>
   166b0:	cmp	r3, r2
   166b4:	beq	166e0 <__assert_fail@plt+0x55a4>
   166b8:	ldr	r3, [fp, #-12]
   166bc:	ldr	r3, [r3, #4]
   166c0:	mov	r0, r3
   166c4:	bl	1433c <__assert_fail@plt+0x3200>
   166c8:	ldr	r3, [pc, #88]	; 16728 <__assert_fail@plt+0x55ec>
   166cc:	mov	r2, #256	; 0x100
   166d0:	str	r2, [r3]
   166d4:	ldr	r3, [pc, #76]	; 16728 <__assert_fail@plt+0x55ec>
   166d8:	ldr	r2, [pc, #68]	; 16724 <__assert_fail@plt+0x55e8>
   166dc:	str	r2, [r3, #4]
   166e0:	ldr	r3, [fp, #-12]
   166e4:	ldr	r2, [pc, #60]	; 16728 <__assert_fail@plt+0x55ec>
   166e8:	cmp	r3, r2
   166ec:	beq	16704 <__assert_fail@plt+0x55c8>
   166f0:	ldr	r0, [fp, #-12]
   166f4:	bl	1433c <__assert_fail@plt+0x3200>
   166f8:	ldr	r3, [pc, #28]	; 1671c <__assert_fail@plt+0x55e0>
   166fc:	ldr	r2, [pc, #36]	; 16728 <__assert_fail@plt+0x55ec>
   16700:	str	r2, [r3]
   16704:	ldr	r3, [pc, #20]	; 16720 <__assert_fail@plt+0x55e4>
   16708:	mov	r2, #1
   1670c:	str	r2, [r3]
   16710:	nop			; (mov r0, r0)
   16714:	sub	sp, fp, #4
   16718:	pop	{fp, pc}
   1671c:	andeq	sp, r2, r4, lsr r1
   16720:	andeq	sp, r2, r8, lsr #2
   16724:	andeq	sp, r2, ip, lsr r2
   16728:	andeq	sp, r2, ip, lsr #2
   1672c:	push	{r4, fp, lr}
   16730:	add	fp, sp, #8
   16734:	sub	sp, sp, #84	; 0x54
   16738:	str	r0, [fp, #-56]	; 0xffffffc8
   1673c:	str	r1, [fp, #-60]	; 0xffffffc4
   16740:	str	r2, [fp, #-64]	; 0xffffffc0
   16744:	str	r3, [fp, #-68]	; 0xffffffbc
   16748:	bl	11040 <__errno_location@plt>
   1674c:	mov	r3, r0
   16750:	ldr	r3, [r3]
   16754:	str	r3, [fp, #-24]	; 0xffffffe8
   16758:	ldr	r3, [pc, #640]	; 169e0 <__assert_fail@plt+0x58a4>
   1675c:	ldr	r3, [r3]
   16760:	str	r3, [fp, #-16]
   16764:	mvn	r3, #-2147483648	; 0x80000000
   16768:	str	r3, [fp, #-28]	; 0xffffffe4
   1676c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16770:	cmp	r3, #0
   16774:	blt	16788 <__assert_fail@plt+0x564c>
   16778:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1677c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16780:	cmp	r2, r3
   16784:	blt	1678c <__assert_fail@plt+0x5650>
   16788:	bl	1110c <abort@plt>
   1678c:	ldr	r3, [pc, #592]	; 169e4 <__assert_fail@plt+0x58a8>
   16790:	ldr	r2, [r3]
   16794:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16798:	cmp	r2, r3
   1679c:	bgt	16870 <__assert_fail@plt+0x5734>
   167a0:	ldr	r3, [fp, #-16]
   167a4:	ldr	r2, [pc, #572]	; 169e8 <__assert_fail@plt+0x58ac>
   167a8:	cmp	r3, r2
   167ac:	moveq	r3, #1
   167b0:	movne	r3, #0
   167b4:	strb	r3, [fp, #-29]	; 0xffffffe3
   167b8:	ldr	r3, [pc, #548]	; 169e4 <__assert_fail@plt+0x58a8>
   167bc:	ldr	r3, [r3]
   167c0:	str	r3, [fp, #-48]	; 0xffffffd0
   167c4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   167c8:	cmp	r3, #0
   167cc:	beq	167d8 <__assert_fail@plt+0x569c>
   167d0:	mov	r0, #0
   167d4:	b	167dc <__assert_fail@plt+0x56a0>
   167d8:	ldr	r0, [fp, #-16]
   167dc:	ldr	r3, [pc, #512]	; 169e4 <__assert_fail@plt+0x58a8>
   167e0:	ldr	r3, [r3]
   167e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   167e8:	sub	r3, r2, r3
   167ec:	add	r2, r3, #1
   167f0:	sub	r1, fp, #48	; 0x30
   167f4:	mov	r3, #8
   167f8:	str	r3, [sp]
   167fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16800:	bl	17c98 <__assert_fail@plt+0x6b5c>
   16804:	str	r0, [fp, #-16]
   16808:	ldr	r2, [pc, #464]	; 169e0 <__assert_fail@plt+0x58a4>
   1680c:	ldr	r3, [fp, #-16]
   16810:	str	r3, [r2]
   16814:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   16818:	cmp	r3, #0
   1681c:	beq	16830 <__assert_fail@plt+0x56f4>
   16820:	ldr	r3, [fp, #-16]
   16824:	ldr	r2, [pc, #444]	; 169e8 <__assert_fail@plt+0x58ac>
   16828:	ldm	r2, {r0, r1}
   1682c:	stm	r3, {r0, r1}
   16830:	ldr	r3, [pc, #428]	; 169e4 <__assert_fail@plt+0x58a8>
   16834:	ldr	r3, [r3]
   16838:	lsl	r3, r3, #3
   1683c:	ldr	r2, [fp, #-16]
   16840:	add	r0, r2, r3
   16844:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16848:	ldr	r3, [pc, #404]	; 169e4 <__assert_fail@plt+0x58a8>
   1684c:	ldr	r3, [r3]
   16850:	sub	r3, r2, r3
   16854:	lsl	r3, r3, #3
   16858:	mov	r2, r3
   1685c:	mov	r1, #0
   16860:	bl	11058 <memset@plt>
   16864:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16868:	ldr	r2, [pc, #372]	; 169e4 <__assert_fail@plt+0x58a8>
   1686c:	str	r3, [r2]
   16870:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16874:	lsl	r3, r3, #3
   16878:	ldr	r2, [fp, #-16]
   1687c:	add	r3, r2, r3
   16880:	ldr	r3, [r3]
   16884:	str	r3, [fp, #-36]	; 0xffffffdc
   16888:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1688c:	lsl	r3, r3, #3
   16890:	ldr	r2, [fp, #-16]
   16894:	add	r3, r2, r3
   16898:	ldr	r3, [r3, #4]
   1689c:	str	r3, [fp, #-20]	; 0xffffffec
   168a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   168a4:	ldr	r3, [r3, #4]
   168a8:	orr	r3, r3, #1
   168ac:	str	r3, [fp, #-40]	; 0xffffffd8
   168b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   168b4:	ldr	r3, [r3]
   168b8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   168bc:	add	r2, r2, #8
   168c0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   168c4:	ldr	r1, [r1, #40]	; 0x28
   168c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   168cc:	ldr	r0, [r0, #44]	; 0x2c
   168d0:	str	r0, [sp, #16]
   168d4:	str	r1, [sp, #12]
   168d8:	str	r2, [sp, #8]
   168dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   168e0:	str	r2, [sp, #4]
   168e4:	str	r3, [sp]
   168e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   168ec:	ldr	r2, [fp, #-60]	; 0xffffffc4
   168f0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   168f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   168f8:	bl	14d3c <__assert_fail@plt+0x3c00>
   168fc:	str	r0, [fp, #-44]	; 0xffffffd4
   16900:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16904:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16908:	cmp	r2, r3
   1690c:	bhi	169c0 <__assert_fail@plt+0x5884>
   16910:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16914:	lsl	r3, r3, #3
   16918:	ldr	r2, [fp, #-16]
   1691c:	add	r3, r2, r3
   16920:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16924:	add	r2, r2, #1
   16928:	str	r2, [fp, #-36]	; 0xffffffdc
   1692c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16930:	str	r2, [r3]
   16934:	ldr	r3, [fp, #-20]	; 0xffffffec
   16938:	ldr	r2, [pc, #172]	; 169ec <__assert_fail@plt+0x58b0>
   1693c:	cmp	r3, r2
   16940:	beq	1694c <__assert_fail@plt+0x5810>
   16944:	ldr	r0, [fp, #-20]	; 0xffffffec
   16948:	bl	1433c <__assert_fail@plt+0x3200>
   1694c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16950:	lsl	r3, r3, #3
   16954:	ldr	r2, [fp, #-16]
   16958:	add	r4, r2, r3
   1695c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16960:	bl	17978 <__assert_fail@plt+0x683c>
   16964:	mov	r3, r0
   16968:	str	r3, [fp, #-20]	; 0xffffffec
   1696c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16970:	str	r3, [r4, #4]
   16974:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16978:	ldr	r3, [r3]
   1697c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16980:	add	r2, r2, #8
   16984:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16988:	ldr	r1, [r1, #40]	; 0x28
   1698c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16990:	ldr	r0, [r0, #44]	; 0x2c
   16994:	str	r0, [sp, #16]
   16998:	str	r1, [sp, #12]
   1699c:	str	r2, [sp, #8]
   169a0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   169a4:	str	r2, [sp, #4]
   169a8:	str	r3, [sp]
   169ac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   169b0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   169b4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   169b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   169bc:	bl	14d3c <__assert_fail@plt+0x3c00>
   169c0:	bl	11040 <__errno_location@plt>
   169c4:	mov	r2, r0
   169c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   169cc:	str	r3, [r2]
   169d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   169d4:	mov	r0, r3
   169d8:	sub	sp, fp, #8
   169dc:	pop	{r4, fp, pc}
   169e0:	andeq	sp, r2, r4, lsr r1
   169e4:	andeq	sp, r2, r8, lsr #2
   169e8:	andeq	sp, r2, ip, lsr #2
   169ec:	andeq	sp, r2, ip, lsr r2
   169f0:	push	{fp, lr}
   169f4:	add	fp, sp, #4
   169f8:	sub	sp, sp, #8
   169fc:	str	r0, [fp, #-8]
   16a00:	str	r1, [fp, #-12]
   16a04:	ldr	r3, [pc, #28]	; 16a28 <__assert_fail@plt+0x58ec>
   16a08:	mvn	r2, #0
   16a0c:	ldr	r1, [fp, #-12]
   16a10:	ldr	r0, [fp, #-8]
   16a14:	bl	1672c <__assert_fail@plt+0x55f0>
   16a18:	mov	r3, r0
   16a1c:	mov	r0, r3
   16a20:	sub	sp, fp, #4
   16a24:	pop	{fp, pc}
   16a28:	andeq	sp, r2, ip, lsl #4
   16a2c:	push	{fp, lr}
   16a30:	add	fp, sp, #4
   16a34:	sub	sp, sp, #16
   16a38:	str	r0, [fp, #-8]
   16a3c:	str	r1, [fp, #-12]
   16a40:	str	r2, [fp, #-16]
   16a44:	ldr	r3, [pc, #28]	; 16a68 <__assert_fail@plt+0x592c>
   16a48:	ldr	r2, [fp, #-16]
   16a4c:	ldr	r1, [fp, #-12]
   16a50:	ldr	r0, [fp, #-8]
   16a54:	bl	1672c <__assert_fail@plt+0x55f0>
   16a58:	mov	r3, r0
   16a5c:	mov	r0, r3
   16a60:	sub	sp, fp, #4
   16a64:	pop	{fp, pc}
   16a68:	andeq	sp, r2, ip, lsl #4
   16a6c:	push	{fp, lr}
   16a70:	add	fp, sp, #4
   16a74:	sub	sp, sp, #8
   16a78:	str	r0, [fp, #-8]
   16a7c:	ldr	r1, [fp, #-8]
   16a80:	mov	r0, #0
   16a84:	bl	169f0 <__assert_fail@plt+0x58b4>
   16a88:	mov	r3, r0
   16a8c:	mov	r0, r3
   16a90:	sub	sp, fp, #4
   16a94:	pop	{fp, pc}
   16a98:	push	{fp, lr}
   16a9c:	add	fp, sp, #4
   16aa0:	sub	sp, sp, #8
   16aa4:	str	r0, [fp, #-8]
   16aa8:	str	r1, [fp, #-12]
   16aac:	ldr	r2, [fp, #-12]
   16ab0:	ldr	r1, [fp, #-8]
   16ab4:	mov	r0, #0
   16ab8:	bl	16a2c <__assert_fail@plt+0x58f0>
   16abc:	mov	r3, r0
   16ac0:	mov	r0, r3
   16ac4:	sub	sp, fp, #4
   16ac8:	pop	{fp, pc}
   16acc:	push	{fp, lr}
   16ad0:	add	fp, sp, #4
   16ad4:	sub	sp, sp, #64	; 0x40
   16ad8:	str	r0, [fp, #-56]	; 0xffffffc8
   16adc:	str	r1, [fp, #-60]	; 0xffffffc4
   16ae0:	str	r2, [fp, #-64]	; 0xffffffc0
   16ae4:	sub	r3, fp, #52	; 0x34
   16ae8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16aec:	mov	r0, r3
   16af0:	bl	14bd8 <__assert_fail@plt+0x3a9c>
   16af4:	sub	r3, fp, #52	; 0x34
   16af8:	mvn	r2, #0
   16afc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16b00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16b04:	bl	1672c <__assert_fail@plt+0x55f0>
   16b08:	mov	r3, r0
   16b0c:	mov	r0, r3
   16b10:	sub	sp, fp, #4
   16b14:	pop	{fp, pc}
   16b18:	push	{fp, lr}
   16b1c:	add	fp, sp, #4
   16b20:	sub	sp, sp, #64	; 0x40
   16b24:	str	r0, [fp, #-56]	; 0xffffffc8
   16b28:	str	r1, [fp, #-60]	; 0xffffffc4
   16b2c:	str	r2, [fp, #-64]	; 0xffffffc0
   16b30:	str	r3, [fp, #-68]	; 0xffffffbc
   16b34:	sub	r3, fp, #52	; 0x34
   16b38:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16b3c:	mov	r0, r3
   16b40:	bl	14bd8 <__assert_fail@plt+0x3a9c>
   16b44:	sub	r3, fp, #52	; 0x34
   16b48:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16b4c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16b50:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16b54:	bl	1672c <__assert_fail@plt+0x55f0>
   16b58:	mov	r3, r0
   16b5c:	mov	r0, r3
   16b60:	sub	sp, fp, #4
   16b64:	pop	{fp, pc}
   16b68:	push	{fp, lr}
   16b6c:	add	fp, sp, #4
   16b70:	sub	sp, sp, #8
   16b74:	str	r0, [fp, #-8]
   16b78:	str	r1, [fp, #-12]
   16b7c:	ldr	r2, [fp, #-12]
   16b80:	ldr	r1, [fp, #-8]
   16b84:	mov	r0, #0
   16b88:	bl	16acc <__assert_fail@plt+0x5990>
   16b8c:	mov	r3, r0
   16b90:	mov	r0, r3
   16b94:	sub	sp, fp, #4
   16b98:	pop	{fp, pc}
   16b9c:	push	{fp, lr}
   16ba0:	add	fp, sp, #4
   16ba4:	sub	sp, sp, #16
   16ba8:	str	r0, [fp, #-8]
   16bac:	str	r1, [fp, #-12]
   16bb0:	str	r2, [fp, #-16]
   16bb4:	ldr	r3, [fp, #-16]
   16bb8:	ldr	r2, [fp, #-12]
   16bbc:	ldr	r1, [fp, #-8]
   16bc0:	mov	r0, #0
   16bc4:	bl	16b18 <__assert_fail@plt+0x59dc>
   16bc8:	mov	r3, r0
   16bcc:	mov	r0, r3
   16bd0:	sub	sp, fp, #4
   16bd4:	pop	{fp, pc}
   16bd8:	push	{fp, lr}
   16bdc:	add	fp, sp, #4
   16be0:	sub	sp, sp, #64	; 0x40
   16be4:	str	r0, [fp, #-56]	; 0xffffffc8
   16be8:	str	r1, [fp, #-60]	; 0xffffffc4
   16bec:	mov	r3, r2
   16bf0:	strb	r3, [fp, #-61]	; 0xffffffc3
   16bf4:	ldr	r3, [pc, #84]	; 16c50 <__assert_fail@plt+0x5b14>
   16bf8:	sub	ip, fp, #52	; 0x34
   16bfc:	mov	lr, r3
   16c00:	ldm	lr!, {r0, r1, r2, r3}
   16c04:	stmia	ip!, {r0, r1, r2, r3}
   16c08:	ldm	lr!, {r0, r1, r2, r3}
   16c0c:	stmia	ip!, {r0, r1, r2, r3}
   16c10:	ldm	lr, {r0, r1, r2, r3}
   16c14:	stm	ip, {r0, r1, r2, r3}
   16c18:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   16c1c:	sub	r3, fp, #52	; 0x34
   16c20:	mov	r2, #1
   16c24:	mov	r0, r3
   16c28:	bl	14a44 <__assert_fail@plt+0x3908>
   16c2c:	sub	r3, fp, #52	; 0x34
   16c30:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16c34:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16c38:	mov	r0, #0
   16c3c:	bl	1672c <__assert_fail@plt+0x55f0>
   16c40:	mov	r3, r0
   16c44:	mov	r0, r3
   16c48:	sub	sp, fp, #4
   16c4c:	pop	{fp, pc}
   16c50:	andeq	sp, r2, ip, lsl #4
   16c54:	push	{fp, lr}
   16c58:	add	fp, sp, #4
   16c5c:	sub	sp, sp, #8
   16c60:	str	r0, [fp, #-8]
   16c64:	mov	r3, r1
   16c68:	strb	r3, [fp, #-9]
   16c6c:	ldrb	r3, [fp, #-9]
   16c70:	mov	r2, r3
   16c74:	mvn	r1, #0
   16c78:	ldr	r0, [fp, #-8]
   16c7c:	bl	16bd8 <__assert_fail@plt+0x5a9c>
   16c80:	mov	r3, r0
   16c84:	mov	r0, r3
   16c88:	sub	sp, fp, #4
   16c8c:	pop	{fp, pc}
   16c90:	push	{fp, lr}
   16c94:	add	fp, sp, #4
   16c98:	sub	sp, sp, #8
   16c9c:	str	r0, [fp, #-8]
   16ca0:	mov	r1, #58	; 0x3a
   16ca4:	ldr	r0, [fp, #-8]
   16ca8:	bl	16c54 <__assert_fail@plt+0x5b18>
   16cac:	mov	r3, r0
   16cb0:	mov	r0, r3
   16cb4:	sub	sp, fp, #4
   16cb8:	pop	{fp, pc}
   16cbc:	push	{fp, lr}
   16cc0:	add	fp, sp, #4
   16cc4:	sub	sp, sp, #8
   16cc8:	str	r0, [fp, #-8]
   16ccc:	str	r1, [fp, #-12]
   16cd0:	mov	r2, #58	; 0x3a
   16cd4:	ldr	r1, [fp, #-12]
   16cd8:	ldr	r0, [fp, #-8]
   16cdc:	bl	16bd8 <__assert_fail@plt+0x5a9c>
   16ce0:	mov	r3, r0
   16ce4:	mov	r0, r3
   16ce8:	sub	sp, fp, #4
   16cec:	pop	{fp, pc}
   16cf0:	push	{fp, lr}
   16cf4:	add	fp, sp, #4
   16cf8:	sub	sp, sp, #112	; 0x70
   16cfc:	str	r0, [fp, #-56]	; 0xffffffc8
   16d00:	str	r1, [fp, #-60]	; 0xffffffc4
   16d04:	str	r2, [fp, #-64]	; 0xffffffc0
   16d08:	sub	r3, fp, #116	; 0x74
   16d0c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16d10:	mov	r0, r3
   16d14:	bl	14bd8 <__assert_fail@plt+0x3a9c>
   16d18:	sub	ip, fp, #52	; 0x34
   16d1c:	sub	lr, fp, #116	; 0x74
   16d20:	ldm	lr!, {r0, r1, r2, r3}
   16d24:	stmia	ip!, {r0, r1, r2, r3}
   16d28:	ldm	lr!, {r0, r1, r2, r3}
   16d2c:	stmia	ip!, {r0, r1, r2, r3}
   16d30:	ldm	lr, {r0, r1, r2, r3}
   16d34:	stm	ip, {r0, r1, r2, r3}
   16d38:	sub	r3, fp, #52	; 0x34
   16d3c:	mov	r2, #1
   16d40:	mov	r1, #58	; 0x3a
   16d44:	mov	r0, r3
   16d48:	bl	14a44 <__assert_fail@plt+0x3908>
   16d4c:	sub	r3, fp, #52	; 0x34
   16d50:	mvn	r2, #0
   16d54:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16d58:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16d5c:	bl	1672c <__assert_fail@plt+0x55f0>
   16d60:	mov	r3, r0
   16d64:	mov	r0, r3
   16d68:	sub	sp, fp, #4
   16d6c:	pop	{fp, pc}
   16d70:	push	{fp, lr}
   16d74:	add	fp, sp, #4
   16d78:	sub	sp, sp, #24
   16d7c:	str	r0, [fp, #-8]
   16d80:	str	r1, [fp, #-12]
   16d84:	str	r2, [fp, #-16]
   16d88:	str	r3, [fp, #-20]	; 0xffffffec
   16d8c:	mvn	r3, #0
   16d90:	str	r3, [sp]
   16d94:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d98:	ldr	r2, [fp, #-16]
   16d9c:	ldr	r1, [fp, #-12]
   16da0:	ldr	r0, [fp, #-8]
   16da4:	bl	16db8 <__assert_fail@plt+0x5c7c>
   16da8:	mov	r3, r0
   16dac:	mov	r0, r3
   16db0:	sub	sp, fp, #4
   16db4:	pop	{fp, pc}
   16db8:	push	{fp, lr}
   16dbc:	add	fp, sp, #4
   16dc0:	sub	sp, sp, #64	; 0x40
   16dc4:	str	r0, [fp, #-56]	; 0xffffffc8
   16dc8:	str	r1, [fp, #-60]	; 0xffffffc4
   16dcc:	str	r2, [fp, #-64]	; 0xffffffc0
   16dd0:	str	r3, [fp, #-68]	; 0xffffffbc
   16dd4:	ldr	r3, [pc, #84]	; 16e30 <__assert_fail@plt+0x5cf4>
   16dd8:	sub	ip, fp, #52	; 0x34
   16ddc:	mov	lr, r3
   16de0:	ldm	lr!, {r0, r1, r2, r3}
   16de4:	stmia	ip!, {r0, r1, r2, r3}
   16de8:	ldm	lr!, {r0, r1, r2, r3}
   16dec:	stmia	ip!, {r0, r1, r2, r3}
   16df0:	ldm	lr, {r0, r1, r2, r3}
   16df4:	stm	ip, {r0, r1, r2, r3}
   16df8:	sub	r3, fp, #52	; 0x34
   16dfc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16e00:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16e04:	mov	r0, r3
   16e08:	bl	14b5c <__assert_fail@plt+0x3a20>
   16e0c:	sub	r3, fp, #52	; 0x34
   16e10:	ldr	r2, [fp, #4]
   16e14:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16e18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16e1c:	bl	1672c <__assert_fail@plt+0x55f0>
   16e20:	mov	r3, r0
   16e24:	mov	r0, r3
   16e28:	sub	sp, fp, #4
   16e2c:	pop	{fp, pc}
   16e30:	andeq	sp, r2, ip, lsl #4
   16e34:	push	{fp, lr}
   16e38:	add	fp, sp, #4
   16e3c:	sub	sp, sp, #16
   16e40:	str	r0, [fp, #-8]
   16e44:	str	r1, [fp, #-12]
   16e48:	str	r2, [fp, #-16]
   16e4c:	ldr	r3, [fp, #-16]
   16e50:	ldr	r2, [fp, #-12]
   16e54:	ldr	r1, [fp, #-8]
   16e58:	mov	r0, #0
   16e5c:	bl	16d70 <__assert_fail@plt+0x5c34>
   16e60:	mov	r3, r0
   16e64:	mov	r0, r3
   16e68:	sub	sp, fp, #4
   16e6c:	pop	{fp, pc}
   16e70:	push	{fp, lr}
   16e74:	add	fp, sp, #4
   16e78:	sub	sp, sp, #24
   16e7c:	str	r0, [fp, #-8]
   16e80:	str	r1, [fp, #-12]
   16e84:	str	r2, [fp, #-16]
   16e88:	str	r3, [fp, #-20]	; 0xffffffec
   16e8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e90:	str	r3, [sp]
   16e94:	ldr	r3, [fp, #-16]
   16e98:	ldr	r2, [fp, #-12]
   16e9c:	ldr	r1, [fp, #-8]
   16ea0:	mov	r0, #0
   16ea4:	bl	16db8 <__assert_fail@plt+0x5c7c>
   16ea8:	mov	r3, r0
   16eac:	mov	r0, r3
   16eb0:	sub	sp, fp, #4
   16eb4:	pop	{fp, pc}
   16eb8:	push	{fp, lr}
   16ebc:	add	fp, sp, #4
   16ec0:	sub	sp, sp, #16
   16ec4:	str	r0, [fp, #-8]
   16ec8:	str	r1, [fp, #-12]
   16ecc:	str	r2, [fp, #-16]
   16ed0:	ldr	r3, [pc, #28]	; 16ef4 <__assert_fail@plt+0x5db8>
   16ed4:	ldr	r2, [fp, #-16]
   16ed8:	ldr	r1, [fp, #-12]
   16edc:	ldr	r0, [fp, #-8]
   16ee0:	bl	1672c <__assert_fail@plt+0x55f0>
   16ee4:	mov	r3, r0
   16ee8:	mov	r0, r3
   16eec:	sub	sp, fp, #4
   16ef0:	pop	{fp, pc}
   16ef4:	andeq	sp, r2, r8, lsr r1
   16ef8:	push	{fp, lr}
   16efc:	add	fp, sp, #4
   16f00:	sub	sp, sp, #8
   16f04:	str	r0, [fp, #-8]
   16f08:	str	r1, [fp, #-12]
   16f0c:	ldr	r2, [fp, #-12]
   16f10:	ldr	r1, [fp, #-8]
   16f14:	mov	r0, #0
   16f18:	bl	16eb8 <__assert_fail@plt+0x5d7c>
   16f1c:	mov	r3, r0
   16f20:	mov	r0, r3
   16f24:	sub	sp, fp, #4
   16f28:	pop	{fp, pc}
   16f2c:	push	{fp, lr}
   16f30:	add	fp, sp, #4
   16f34:	sub	sp, sp, #8
   16f38:	str	r0, [fp, #-8]
   16f3c:	str	r1, [fp, #-12]
   16f40:	mvn	r2, #0
   16f44:	ldr	r1, [fp, #-12]
   16f48:	ldr	r0, [fp, #-8]
   16f4c:	bl	16eb8 <__assert_fail@plt+0x5d7c>
   16f50:	mov	r3, r0
   16f54:	mov	r0, r3
   16f58:	sub	sp, fp, #4
   16f5c:	pop	{fp, pc}
   16f60:	push	{fp, lr}
   16f64:	add	fp, sp, #4
   16f68:	sub	sp, sp, #8
   16f6c:	str	r0, [fp, #-8]
   16f70:	ldr	r1, [fp, #-8]
   16f74:	mov	r0, #0
   16f78:	bl	16f2c <__assert_fail@plt+0x5df0>
   16f7c:	mov	r3, r0
   16f80:	mov	r0, r3
   16f84:	sub	sp, fp, #4
   16f88:	pop	{fp, pc}
   16f8c:	push	{fp, lr}
   16f90:	add	fp, sp, #4
   16f94:	sub	sp, sp, #16
   16f98:	str	r0, [fp, #-16]
   16f9c:	mov	r1, #0
   16fa0:	ldr	r0, [fp, #-16]
   16fa4:	bl	110ac <setlocale@plt>
   16fa8:	str	r0, [fp, #-8]
   16fac:	ldr	r3, [fp, #-8]
   16fb0:	mov	r0, r3
   16fb4:	sub	sp, fp, #4
   16fb8:	pop	{fp, pc}
   16fbc:	push	{fp, lr}
   16fc0:	add	fp, sp, #4
   16fc4:	sub	sp, sp, #24
   16fc8:	str	r0, [fp, #-16]
   16fcc:	str	r1, [fp, #-20]	; 0xffffffec
   16fd0:	str	r2, [fp, #-24]	; 0xffffffe8
   16fd4:	ldr	r0, [fp, #-16]
   16fd8:	bl	16f8c <__assert_fail@plt+0x5e50>
   16fdc:	str	r0, [fp, #-8]
   16fe0:	ldr	r3, [fp, #-8]
   16fe4:	cmp	r3, #0
   16fe8:	bne	1700c <__assert_fail@plt+0x5ed0>
   16fec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ff0:	cmp	r3, #0
   16ff4:	beq	17004 <__assert_fail@plt+0x5ec8>
   16ff8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ffc:	mov	r2, #0
   17000:	strb	r2, [r3]
   17004:	mov	r3, #22
   17008:	b	17088 <__assert_fail@plt+0x5f4c>
   1700c:	ldr	r0, [fp, #-8]
   17010:	bl	1101c <strlen@plt>
   17014:	str	r0, [fp, #-12]
   17018:	ldr	r2, [fp, #-12]
   1701c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17020:	cmp	r2, r3
   17024:	bcs	17048 <__assert_fail@plt+0x5f0c>
   17028:	ldr	r3, [fp, #-12]
   1702c:	add	r3, r3, #1
   17030:	mov	r2, r3
   17034:	ldr	r1, [fp, #-8]
   17038:	ldr	r0, [fp, #-20]	; 0xffffffec
   1703c:	bl	10ee4 <memcpy@plt>
   17040:	mov	r3, #0
   17044:	b	17088 <__assert_fail@plt+0x5f4c>
   17048:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1704c:	cmp	r3, #0
   17050:	beq	17084 <__assert_fail@plt+0x5f48>
   17054:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17058:	sub	r3, r3, #1
   1705c:	mov	r2, r3
   17060:	ldr	r1, [fp, #-8]
   17064:	ldr	r0, [fp, #-20]	; 0xffffffec
   17068:	bl	10ee4 <memcpy@plt>
   1706c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17070:	sub	r3, r3, #1
   17074:	ldr	r2, [fp, #-20]	; 0xffffffec
   17078:	add	r3, r2, r3
   1707c:	mov	r2, #0
   17080:	strb	r2, [r3]
   17084:	mov	r3, #34	; 0x22
   17088:	mov	r0, r3
   1708c:	sub	sp, fp, #4
   17090:	pop	{fp, pc}
   17094:	push	{fp, lr}
   17098:	add	fp, sp, #4
   1709c:	sub	sp, sp, #16
   170a0:	str	r0, [fp, #-8]
   170a4:	str	r1, [fp, #-12]
   170a8:	str	r2, [fp, #-16]
   170ac:	ldr	r2, [fp, #-16]
   170b0:	ldr	r1, [fp, #-12]
   170b4:	ldr	r0, [fp, #-8]
   170b8:	bl	16fbc <__assert_fail@plt+0x5e80>
   170bc:	mov	r3, r0
   170c0:	mov	r0, r3
   170c4:	sub	sp, fp, #4
   170c8:	pop	{fp, pc}
   170cc:	push	{fp, lr}
   170d0:	add	fp, sp, #4
   170d4:	sub	sp, sp, #8
   170d8:	str	r0, [fp, #-8]
   170dc:	ldr	r0, [fp, #-8]
   170e0:	bl	16f8c <__assert_fail@plt+0x5e50>
   170e4:	mov	r3, r0
   170e8:	mov	r0, r3
   170ec:	sub	sp, fp, #4
   170f0:	pop	{fp, pc}
   170f4:	push	{fp, lr}
   170f8:	add	fp, sp, #4
   170fc:	sub	sp, sp, #8
   17100:	str	r0, [fp, #-8]
   17104:	mov	r2, #3
   17108:	mov	r1, #0
   1710c:	ldr	r0, [fp, #-8]
   17110:	bl	19990 <__assert_fail@plt+0x8854>
   17114:	mov	r3, r0
   17118:	mov	r0, r3
   1711c:	sub	sp, fp, #4
   17120:	pop	{fp, pc}
   17124:	push	{r4, r5, r6, r7, fp, lr}
   17128:	add	fp, sp, #20
   1712c:	sub	sp, sp, #48	; 0x30
   17130:	str	r0, [fp, #-24]	; 0xffffffe8
   17134:	str	r1, [fp, #-28]	; 0xffffffe4
   17138:	str	r2, [fp, #-32]	; 0xffffffe0
   1713c:	str	r3, [fp, #-36]	; 0xffffffdc
   17140:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17144:	cmp	r3, #0
   17148:	beq	1716c <__assert_fail@plt+0x6030>
   1714c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17150:	str	r3, [sp]
   17154:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17158:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1715c:	ldr	r1, [pc, #1260]	; 17650 <__assert_fail@plt+0x6514>
   17160:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17164:	bl	11034 <fprintf@plt>
   17168:	b	17180 <__assert_fail@plt+0x6044>
   1716c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17170:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17174:	ldr	r1, [pc, #1240]	; 17654 <__assert_fail@plt+0x6518>
   17178:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1717c:	bl	11034 <fprintf@plt>
   17180:	ldr	r0, [pc, #1232]	; 17658 <__assert_fail@plt+0x651c>
   17184:	bl	11004 <gettext@plt>
   17188:	mov	r2, r0
   1718c:	ldr	r3, [pc, #1224]	; 1765c <__assert_fail@plt+0x6520>
   17190:	ldr	r1, [pc, #1224]	; 17660 <__assert_fail@plt+0x6524>
   17194:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17198:	bl	11034 <fprintf@plt>
   1719c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   171a0:	mov	r0, #10
   171a4:	bl	10f14 <fputc_unlocked@plt>
   171a8:	ldr	r0, [pc, #1204]	; 17664 <__assert_fail@plt+0x6528>
   171ac:	bl	11004 <gettext@plt>
   171b0:	mov	r3, r0
   171b4:	ldr	r2, [pc, #1196]	; 17668 <__assert_fail@plt+0x652c>
   171b8:	mov	r1, r3
   171bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   171c0:	bl	11034 <fprintf@plt>
   171c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   171c8:	mov	r0, #10
   171cc:	bl	10f14 <fputc_unlocked@plt>
   171d0:	ldr	r3, [fp, #8]
   171d4:	cmp	r3, #9
   171d8:	ldrls	pc, [pc, r3, lsl #2]
   171dc:	b	17598 <__assert_fail@plt+0x645c>
   171e0:	andeq	r7, r1, r0, asr #12
   171e4:	andeq	r7, r1, r8, lsl #4
   171e8:	andeq	r7, r1, ip, lsr #4
   171ec:	andeq	r7, r1, r8, asr r2
   171f0:	muleq	r1, r8, r2
   171f4:	strdeq	r7, [r1], -r0
   171f8:	andeq	r7, r1, r8, asr r3
   171fc:	ldrdeq	r7, [r1], -r0
   17200:	andeq	r7, r1, r8, asr r4
   17204:	strdeq	r7, [r1], -r0
   17208:	ldr	r0, [pc, #1116]	; 1766c <__assert_fail@plt+0x6530>
   1720c:	bl	11004 <gettext@plt>
   17210:	mov	r1, r0
   17214:	ldr	r3, [fp, #4]
   17218:	ldr	r3, [r3]
   1721c:	mov	r2, r3
   17220:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17224:	bl	11034 <fprintf@plt>
   17228:	b	17644 <__assert_fail@plt+0x6508>
   1722c:	ldr	r0, [pc, #1084]	; 17670 <__assert_fail@plt+0x6534>
   17230:	bl	11004 <gettext@plt>
   17234:	mov	r1, r0
   17238:	ldr	r3, [fp, #4]
   1723c:	ldr	r2, [r3]
   17240:	ldr	r3, [fp, #4]
   17244:	add	r3, r3, #4
   17248:	ldr	r3, [r3]
   1724c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17250:	bl	11034 <fprintf@plt>
   17254:	b	17644 <__assert_fail@plt+0x6508>
   17258:	ldr	r0, [pc, #1044]	; 17674 <__assert_fail@plt+0x6538>
   1725c:	bl	11004 <gettext@plt>
   17260:	ldr	r3, [fp, #4]
   17264:	ldr	r2, [r3]
   17268:	ldr	r3, [fp, #4]
   1726c:	add	r3, r3, #4
   17270:	ldr	r1, [r3]
   17274:	ldr	r3, [fp, #4]
   17278:	add	r3, r3, #8
   1727c:	ldr	r3, [r3]
   17280:	str	r3, [sp]
   17284:	mov	r3, r1
   17288:	mov	r1, r0
   1728c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17290:	bl	11034 <fprintf@plt>
   17294:	b	17644 <__assert_fail@plt+0x6508>
   17298:	ldr	r0, [pc, #984]	; 17678 <__assert_fail@plt+0x653c>
   1729c:	bl	11004 <gettext@plt>
   172a0:	mov	ip, r0
   172a4:	ldr	r3, [fp, #4]
   172a8:	ldr	r1, [r3]
   172ac:	ldr	r3, [fp, #4]
   172b0:	add	r3, r3, #4
   172b4:	ldr	r0, [r3]
   172b8:	ldr	r3, [fp, #4]
   172bc:	add	r3, r3, #8
   172c0:	ldr	r3, [r3]
   172c4:	ldr	r2, [fp, #4]
   172c8:	add	r2, r2, #12
   172cc:	ldr	r2, [r2]
   172d0:	str	r2, [sp, #4]
   172d4:	str	r3, [sp]
   172d8:	mov	r3, r0
   172dc:	mov	r2, r1
   172e0:	mov	r1, ip
   172e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   172e8:	bl	11034 <fprintf@plt>
   172ec:	b	17644 <__assert_fail@plt+0x6508>
   172f0:	ldr	r0, [pc, #900]	; 1767c <__assert_fail@plt+0x6540>
   172f4:	bl	11004 <gettext@plt>
   172f8:	mov	lr, r0
   172fc:	ldr	r3, [fp, #4]
   17300:	ldr	r0, [r3]
   17304:	ldr	r3, [fp, #4]
   17308:	add	r3, r3, #4
   1730c:	ldr	ip, [r3]
   17310:	ldr	r3, [fp, #4]
   17314:	add	r3, r3, #8
   17318:	ldr	r3, [r3]
   1731c:	ldr	r2, [fp, #4]
   17320:	add	r2, r2, #12
   17324:	ldr	r2, [r2]
   17328:	ldr	r1, [fp, #4]
   1732c:	add	r1, r1, #16
   17330:	ldr	r1, [r1]
   17334:	str	r1, [sp, #8]
   17338:	str	r2, [sp, #4]
   1733c:	str	r3, [sp]
   17340:	mov	r3, ip
   17344:	mov	r2, r0
   17348:	mov	r1, lr
   1734c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17350:	bl	11034 <fprintf@plt>
   17354:	b	17644 <__assert_fail@plt+0x6508>
   17358:	ldr	r0, [pc, #800]	; 17680 <__assert_fail@plt+0x6544>
   1735c:	bl	11004 <gettext@plt>
   17360:	mov	r4, r0
   17364:	ldr	r3, [fp, #4]
   17368:	ldr	ip, [r3]
   1736c:	ldr	r3, [fp, #4]
   17370:	add	r3, r3, #4
   17374:	ldr	lr, [r3]
   17378:	ldr	r3, [fp, #4]
   1737c:	add	r3, r3, #8
   17380:	ldr	r3, [r3]
   17384:	ldr	r2, [fp, #4]
   17388:	add	r2, r2, #12
   1738c:	ldr	r2, [r2]
   17390:	ldr	r1, [fp, #4]
   17394:	add	r1, r1, #16
   17398:	ldr	r1, [r1]
   1739c:	ldr	r0, [fp, #4]
   173a0:	add	r0, r0, #20
   173a4:	ldr	r0, [r0]
   173a8:	str	r0, [sp, #12]
   173ac:	str	r1, [sp, #8]
   173b0:	str	r2, [sp, #4]
   173b4:	str	r3, [sp]
   173b8:	mov	r3, lr
   173bc:	mov	r2, ip
   173c0:	mov	r1, r4
   173c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   173c8:	bl	11034 <fprintf@plt>
   173cc:	b	17644 <__assert_fail@plt+0x6508>
   173d0:	ldr	r0, [pc, #684]	; 17684 <__assert_fail@plt+0x6548>
   173d4:	bl	11004 <gettext@plt>
   173d8:	mov	r5, r0
   173dc:	ldr	r3, [fp, #4]
   173e0:	ldr	lr, [r3]
   173e4:	ldr	r3, [fp, #4]
   173e8:	add	r3, r3, #4
   173ec:	ldr	r4, [r3]
   173f0:	ldr	r3, [fp, #4]
   173f4:	add	r3, r3, #8
   173f8:	ldr	r3, [r3]
   173fc:	ldr	r2, [fp, #4]
   17400:	add	r2, r2, #12
   17404:	ldr	r2, [r2]
   17408:	ldr	r1, [fp, #4]
   1740c:	add	r1, r1, #16
   17410:	ldr	r1, [r1]
   17414:	ldr	r0, [fp, #4]
   17418:	add	r0, r0, #20
   1741c:	ldr	r0, [r0]
   17420:	ldr	ip, [fp, #4]
   17424:	add	ip, ip, #24
   17428:	ldr	ip, [ip]
   1742c:	str	ip, [sp, #16]
   17430:	str	r0, [sp, #12]
   17434:	str	r1, [sp, #8]
   17438:	str	r2, [sp, #4]
   1743c:	str	r3, [sp]
   17440:	mov	r3, r4
   17444:	mov	r2, lr
   17448:	mov	r1, r5
   1744c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17450:	bl	11034 <fprintf@plt>
   17454:	b	17644 <__assert_fail@plt+0x6508>
   17458:	ldr	r0, [pc, #552]	; 17688 <__assert_fail@plt+0x654c>
   1745c:	bl	11004 <gettext@plt>
   17460:	mov	r6, r0
   17464:	ldr	r3, [fp, #4]
   17468:	ldr	r4, [r3]
   1746c:	ldr	r3, [fp, #4]
   17470:	add	r3, r3, #4
   17474:	ldr	r5, [r3]
   17478:	ldr	r3, [fp, #4]
   1747c:	add	r3, r3, #8
   17480:	ldr	r3, [r3]
   17484:	ldr	r2, [fp, #4]
   17488:	add	r2, r2, #12
   1748c:	ldr	r2, [r2]
   17490:	ldr	r1, [fp, #4]
   17494:	add	r1, r1, #16
   17498:	ldr	r1, [r1]
   1749c:	ldr	r0, [fp, #4]
   174a0:	add	r0, r0, #20
   174a4:	ldr	r0, [r0]
   174a8:	ldr	ip, [fp, #4]
   174ac:	add	ip, ip, #24
   174b0:	ldr	ip, [ip]
   174b4:	ldr	lr, [fp, #4]
   174b8:	add	lr, lr, #28
   174bc:	ldr	lr, [lr]
   174c0:	str	lr, [sp, #20]
   174c4:	str	ip, [sp, #16]
   174c8:	str	r0, [sp, #12]
   174cc:	str	r1, [sp, #8]
   174d0:	str	r2, [sp, #4]
   174d4:	str	r3, [sp]
   174d8:	mov	r3, r5
   174dc:	mov	r2, r4
   174e0:	mov	r1, r6
   174e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   174e8:	bl	11034 <fprintf@plt>
   174ec:	b	17644 <__assert_fail@plt+0x6508>
   174f0:	ldr	r0, [pc, #404]	; 1768c <__assert_fail@plt+0x6550>
   174f4:	bl	11004 <gettext@plt>
   174f8:	mov	r7, r0
   174fc:	ldr	r3, [fp, #4]
   17500:	ldr	r5, [r3]
   17504:	ldr	r3, [fp, #4]
   17508:	add	r3, r3, #4
   1750c:	ldr	r6, [r3]
   17510:	ldr	r3, [fp, #4]
   17514:	add	r3, r3, #8
   17518:	ldr	r3, [r3]
   1751c:	ldr	r2, [fp, #4]
   17520:	add	r2, r2, #12
   17524:	ldr	r2, [r2]
   17528:	ldr	r1, [fp, #4]
   1752c:	add	r1, r1, #16
   17530:	ldr	r1, [r1]
   17534:	ldr	r0, [fp, #4]
   17538:	add	r0, r0, #20
   1753c:	ldr	r0, [r0]
   17540:	ldr	ip, [fp, #4]
   17544:	add	ip, ip, #24
   17548:	ldr	ip, [ip]
   1754c:	ldr	lr, [fp, #4]
   17550:	add	lr, lr, #28
   17554:	ldr	lr, [lr]
   17558:	ldr	r4, [fp, #4]
   1755c:	add	r4, r4, #32
   17560:	ldr	r4, [r4]
   17564:	str	r4, [sp, #24]
   17568:	str	lr, [sp, #20]
   1756c:	str	ip, [sp, #16]
   17570:	str	r0, [sp, #12]
   17574:	str	r1, [sp, #8]
   17578:	str	r2, [sp, #4]
   1757c:	str	r3, [sp]
   17580:	mov	r3, r6
   17584:	mov	r2, r5
   17588:	mov	r1, r7
   1758c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17590:	bl	11034 <fprintf@plt>
   17594:	b	17644 <__assert_fail@plt+0x6508>
   17598:	ldr	r0, [pc, #240]	; 17690 <__assert_fail@plt+0x6554>
   1759c:	bl	11004 <gettext@plt>
   175a0:	mov	r7, r0
   175a4:	ldr	r3, [fp, #4]
   175a8:	ldr	r5, [r3]
   175ac:	ldr	r3, [fp, #4]
   175b0:	add	r3, r3, #4
   175b4:	ldr	r6, [r3]
   175b8:	ldr	r3, [fp, #4]
   175bc:	add	r3, r3, #8
   175c0:	ldr	r3, [r3]
   175c4:	ldr	r2, [fp, #4]
   175c8:	add	r2, r2, #12
   175cc:	ldr	r2, [r2]
   175d0:	ldr	r1, [fp, #4]
   175d4:	add	r1, r1, #16
   175d8:	ldr	r1, [r1]
   175dc:	ldr	r0, [fp, #4]
   175e0:	add	r0, r0, #20
   175e4:	ldr	r0, [r0]
   175e8:	ldr	ip, [fp, #4]
   175ec:	add	ip, ip, #24
   175f0:	ldr	ip, [ip]
   175f4:	ldr	lr, [fp, #4]
   175f8:	add	lr, lr, #28
   175fc:	ldr	lr, [lr]
   17600:	ldr	r4, [fp, #4]
   17604:	add	r4, r4, #32
   17608:	ldr	r4, [r4]
   1760c:	str	r4, [sp, #24]
   17610:	str	lr, [sp, #20]
   17614:	str	ip, [sp, #16]
   17618:	str	r0, [sp, #12]
   1761c:	str	r1, [sp, #8]
   17620:	str	r2, [sp, #4]
   17624:	str	r3, [sp]
   17628:	mov	r3, r6
   1762c:	mov	r2, r5
   17630:	mov	r1, r7
   17634:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17638:	bl	11034 <fprintf@plt>
   1763c:	b	17644 <__assert_fail@plt+0x6508>
   17640:	nop			; (mov r0, r0)
   17644:	nop			; (mov r0, r0)
   17648:	sub	sp, fp, #20
   1764c:	pop	{r4, r5, r6, r7, fp, pc}
   17650:	andeq	fp, r1, r4, lsl sp
   17654:	andeq	fp, r1, r0, lsr #26
   17658:	andeq	fp, r1, r8, lsr #26
   1765c:	andeq	r0, r0, r6, ror #15
   17660:	andeq	ip, r1, r8, lsr r0
   17664:	andeq	fp, r1, ip, lsr #26
   17668:	ldrdeq	fp, [r1], -r8
   1766c:	strdeq	fp, [r1], -ip
   17670:	andeq	fp, r1, ip, lsl #28
   17674:	andeq	fp, r1, r4, lsr #28
   17678:	andeq	fp, r1, r0, asr #28
   1767c:	andeq	fp, r1, r0, ror #28
   17680:	andeq	fp, r1, r4, lsl #29
   17684:	andeq	fp, r1, ip, lsr #29
   17688:	ldrdeq	fp, [r1], -r8
   1768c:	andeq	fp, r1, r8, lsl #30
   17690:	andeq	fp, r1, ip, lsr pc
   17694:	push	{fp, lr}
   17698:	add	fp, sp, #4
   1769c:	sub	sp, sp, #32
   176a0:	str	r0, [fp, #-16]
   176a4:	str	r1, [fp, #-20]	; 0xffffffec
   176a8:	str	r2, [fp, #-24]	; 0xffffffe8
   176ac:	str	r3, [fp, #-28]	; 0xffffffe4
   176b0:	mov	r3, #0
   176b4:	str	r3, [fp, #-8]
   176b8:	b	176c8 <__assert_fail@plt+0x658c>
   176bc:	ldr	r3, [fp, #-8]
   176c0:	add	r3, r3, #1
   176c4:	str	r3, [fp, #-8]
   176c8:	ldr	r3, [fp, #-8]
   176cc:	lsl	r3, r3, #2
   176d0:	ldr	r2, [fp, #4]
   176d4:	add	r3, r2, r3
   176d8:	ldr	r3, [r3]
   176dc:	cmp	r3, #0
   176e0:	bne	176bc <__assert_fail@plt+0x6580>
   176e4:	ldr	r3, [fp, #-8]
   176e8:	str	r3, [sp, #4]
   176ec:	ldr	r3, [fp, #4]
   176f0:	str	r3, [sp]
   176f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   176f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   176fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   17700:	ldr	r0, [fp, #-16]
   17704:	bl	17124 <__assert_fail@plt+0x5fe8>
   17708:	nop			; (mov r0, r0)
   1770c:	sub	sp, fp, #4
   17710:	pop	{fp, pc}
   17714:	push	{fp, lr}
   17718:	add	fp, sp, #4
   1771c:	sub	sp, sp, #72	; 0x48
   17720:	str	r0, [fp, #-56]	; 0xffffffc8
   17724:	str	r1, [fp, #-60]	; 0xffffffc4
   17728:	str	r2, [fp, #-64]	; 0xffffffc0
   1772c:	str	r3, [fp, #-68]	; 0xffffffbc
   17730:	mov	r3, #0
   17734:	str	r3, [fp, #-8]
   17738:	b	17748 <__assert_fail@plt+0x660c>
   1773c:	ldr	r3, [fp, #-8]
   17740:	add	r3, r3, #1
   17744:	str	r3, [fp, #-8]
   17748:	ldr	r3, [fp, #-8]
   1774c:	cmp	r3, #9
   17750:	bhi	17794 <__assert_fail@plt+0x6658>
   17754:	ldr	r3, [fp, #4]
   17758:	add	r2, r3, #4
   1775c:	str	r2, [fp, #4]
   17760:	ldr	r2, [r3]
   17764:	ldr	r3, [fp, #-8]
   17768:	lsl	r3, r3, #2
   1776c:	sub	r1, fp, #4
   17770:	add	r3, r1, r3
   17774:	str	r2, [r3, #-44]	; 0xffffffd4
   17778:	ldr	r3, [fp, #-8]
   1777c:	lsl	r3, r3, #2
   17780:	sub	r2, fp, #4
   17784:	add	r3, r2, r3
   17788:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1778c:	cmp	r3, #0
   17790:	bne	1773c <__assert_fail@plt+0x6600>
   17794:	ldr	r3, [fp, #-8]
   17798:	str	r3, [sp, #4]
   1779c:	sub	r3, fp, #48	; 0x30
   177a0:	str	r3, [sp]
   177a4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   177a8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   177ac:	ldr	r1, [fp, #-60]	; 0xffffffc4
   177b0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   177b4:	bl	17124 <__assert_fail@plt+0x5fe8>
   177b8:	nop			; (mov r0, r0)
   177bc:	sub	sp, fp, #4
   177c0:	pop	{fp, pc}
   177c4:	push	{r3}		; (str r3, [sp, #-4]!)
   177c8:	push	{fp, lr}
   177cc:	add	fp, sp, #4
   177d0:	sub	sp, sp, #36	; 0x24
   177d4:	str	r0, [fp, #-20]	; 0xffffffec
   177d8:	str	r1, [fp, #-24]	; 0xffffffe8
   177dc:	str	r2, [fp, #-28]	; 0xffffffe4
   177e0:	add	r3, fp, #8
   177e4:	str	r3, [fp, #-12]
   177e8:	ldr	r3, [fp, #-12]
   177ec:	str	r3, [sp]
   177f0:	ldr	r3, [fp, #4]
   177f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   177f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   177fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   17800:	bl	17714 <__assert_fail@plt+0x65d8>
   17804:	nop			; (mov r0, r0)
   17808:	sub	sp, fp, #4
   1780c:	pop	{fp, lr}
   17810:	add	sp, sp, #4
   17814:	bx	lr
   17818:	push	{fp, lr}
   1781c:	add	fp, sp, #4
   17820:	ldr	r3, [pc, #96]	; 17888 <__assert_fail@plt+0x674c>
   17824:	ldr	r3, [r3]
   17828:	mov	r1, r3
   1782c:	mov	r0, #10
   17830:	bl	10f14 <fputc_unlocked@plt>
   17834:	ldr	r0, [pc, #80]	; 1788c <__assert_fail@plt+0x6750>
   17838:	bl	11004 <gettext@plt>
   1783c:	mov	r3, r0
   17840:	ldr	r1, [pc, #72]	; 17890 <__assert_fail@plt+0x6754>
   17844:	mov	r0, r3
   17848:	bl	10eb4 <printf@plt>
   1784c:	ldr	r0, [pc, #64]	; 17894 <__assert_fail@plt+0x6758>
   17850:	bl	11004 <gettext@plt>
   17854:	mov	r3, r0
   17858:	ldr	r2, [pc, #56]	; 17898 <__assert_fail@plt+0x675c>
   1785c:	ldr	r1, [pc, #56]	; 1789c <__assert_fail@plt+0x6760>
   17860:	mov	r0, r3
   17864:	bl	10eb4 <printf@plt>
   17868:	ldr	r0, [pc, #48]	; 178a0 <__assert_fail@plt+0x6764>
   1786c:	bl	11004 <gettext@plt>
   17870:	mov	r3, r0
   17874:	ldr	r1, [pc, #40]	; 178a4 <__assert_fail@plt+0x6768>
   17878:	mov	r0, r3
   1787c:	bl	10eb4 <printf@plt>
   17880:	nop			; (mov r0, r0)
   17884:	pop	{fp, pc}
   17888:	andeq	sp, r2, r4, lsl #3
   1788c:	andeq	fp, r1, r8, ror pc
   17890:	andeq	fp, r1, ip, lsl #31
   17894:	andeq	fp, r1, r4, lsr #31
   17898:			; <UNDEFINED> instruction: 0x0001bfb8
   1789c:	andeq	fp, r1, r0, ror #31
   178a0:	strdeq	fp, [r1], -r0
   178a4:	andeq	ip, r1, r8, lsl r0
   178a8:	push	{fp, lr}
   178ac:	add	fp, sp, #4
   178b0:	sub	sp, sp, #16
   178b4:	str	r0, [fp, #-8]
   178b8:	str	r1, [fp, #-12]
   178bc:	str	r2, [fp, #-16]
   178c0:	ldr	r2, [fp, #-16]
   178c4:	ldr	r1, [fp, #-12]
   178c8:	ldr	r0, [fp, #-8]
   178cc:	bl	17a38 <__assert_fail@plt+0x68fc>
   178d0:	mov	r3, r0
   178d4:	mov	r0, r3
   178d8:	sub	sp, fp, #4
   178dc:	pop	{fp, pc}
   178e0:	push	{fp, lr}
   178e4:	add	fp, sp, #4
   178e8:	sub	sp, sp, #8
   178ec:	str	r0, [fp, #-8]
   178f0:	ldr	r3, [fp, #-8]
   178f4:	cmp	r3, #0
   178f8:	bne	17900 <__assert_fail@plt+0x67c4>
   178fc:	bl	1842c <__assert_fail@plt+0x72f0>
   17900:	ldr	r3, [fp, #-8]
   17904:	mov	r0, r3
   17908:	sub	sp, fp, #4
   1790c:	pop	{fp, pc}
   17910:	push	{fp, lr}
   17914:	add	fp, sp, #4
   17918:	sub	sp, sp, #8
   1791c:	str	r0, [fp, #-8]
   17920:	ldr	r0, [fp, #-8]
   17924:	bl	196a8 <__assert_fail@plt+0x856c>
   17928:	mov	r3, r0
   1792c:	mov	r0, r3
   17930:	bl	178e0 <__assert_fail@plt+0x67a4>
   17934:	mov	r3, r0
   17938:	mov	r0, r3
   1793c:	sub	sp, fp, #4
   17940:	pop	{fp, pc}
   17944:	push	{fp, lr}
   17948:	add	fp, sp, #4
   1794c:	sub	sp, sp, #8
   17950:	str	r0, [fp, #-8]
   17954:	ldr	r0, [fp, #-8]
   17958:	bl	19d34 <__assert_fail@plt+0x8bf8>
   1795c:	mov	r3, r0
   17960:	mov	r0, r3
   17964:	bl	178e0 <__assert_fail@plt+0x67a4>
   17968:	mov	r3, r0
   1796c:	mov	r0, r3
   17970:	sub	sp, fp, #4
   17974:	pop	{fp, pc}
   17978:	push	{fp, lr}
   1797c:	add	fp, sp, #4
   17980:	sub	sp, sp, #8
   17984:	str	r0, [fp, #-8]
   17988:	ldr	r0, [fp, #-8]
   1798c:	bl	17910 <__assert_fail@plt+0x67d4>
   17990:	mov	r3, r0
   17994:	mov	r0, r3
   17998:	sub	sp, fp, #4
   1799c:	pop	{fp, pc}
   179a0:	push	{fp, lr}
   179a4:	add	fp, sp, #4
   179a8:	sub	sp, sp, #16
   179ac:	str	r0, [fp, #-16]
   179b0:	str	r1, [fp, #-20]	; 0xffffffec
   179b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   179b8:	ldr	r0, [fp, #-16]
   179bc:	bl	19750 <__assert_fail@plt+0x8614>
   179c0:	str	r0, [fp, #-8]
   179c4:	ldr	r3, [fp, #-8]
   179c8:	cmp	r3, #0
   179cc:	bne	179ec <__assert_fail@plt+0x68b0>
   179d0:	ldr	r3, [fp, #-16]
   179d4:	cmp	r3, #0
   179d8:	beq	179e8 <__assert_fail@plt+0x68ac>
   179dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   179e0:	cmp	r3, #0
   179e4:	beq	179ec <__assert_fail@plt+0x68b0>
   179e8:	bl	1842c <__assert_fail@plt+0x72f0>
   179ec:	ldr	r3, [fp, #-8]
   179f0:	mov	r0, r3
   179f4:	sub	sp, fp, #4
   179f8:	pop	{fp, pc}
   179fc:	push	{fp, lr}
   17a00:	add	fp, sp, #4
   17a04:	sub	sp, sp, #8
   17a08:	str	r0, [fp, #-8]
   17a0c:	str	r1, [fp, #-12]
   17a10:	ldr	r1, [fp, #-12]
   17a14:	ldr	r0, [fp, #-8]
   17a18:	bl	19d60 <__assert_fail@plt+0x8c24>
   17a1c:	mov	r3, r0
   17a20:	mov	r0, r3
   17a24:	bl	178e0 <__assert_fail@plt+0x67a4>
   17a28:	mov	r3, r0
   17a2c:	mov	r0, r3
   17a30:	sub	sp, fp, #4
   17a34:	pop	{fp, pc}
   17a38:	push	{fp, lr}
   17a3c:	add	fp, sp, #4
   17a40:	sub	sp, sp, #24
   17a44:	str	r0, [fp, #-16]
   17a48:	str	r1, [fp, #-20]	; 0xffffffec
   17a4c:	str	r2, [fp, #-24]	; 0xffffffe8
   17a50:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17a54:	ldr	r1, [fp, #-20]	; 0xffffffec
   17a58:	ldr	r0, [fp, #-16]
   17a5c:	bl	1a20c <__assert_fail@plt+0x90d0>
   17a60:	str	r0, [fp, #-8]
   17a64:	ldr	r3, [fp, #-8]
   17a68:	cmp	r3, #0
   17a6c:	bne	17a98 <__assert_fail@plt+0x695c>
   17a70:	ldr	r3, [fp, #-16]
   17a74:	cmp	r3, #0
   17a78:	beq	17a94 <__assert_fail@plt+0x6958>
   17a7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a80:	cmp	r3, #0
   17a84:	beq	17a98 <__assert_fail@plt+0x695c>
   17a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a8c:	cmp	r3, #0
   17a90:	beq	17a98 <__assert_fail@plt+0x695c>
   17a94:	bl	1842c <__assert_fail@plt+0x72f0>
   17a98:	ldr	r3, [fp, #-8]
   17a9c:	mov	r0, r3
   17aa0:	sub	sp, fp, #4
   17aa4:	pop	{fp, pc}
   17aa8:	push	{fp, lr}
   17aac:	add	fp, sp, #4
   17ab0:	sub	sp, sp, #16
   17ab4:	str	r0, [fp, #-8]
   17ab8:	str	r1, [fp, #-12]
   17abc:	str	r2, [fp, #-16]
   17ac0:	ldr	r2, [fp, #-16]
   17ac4:	ldr	r1, [fp, #-12]
   17ac8:	ldr	r0, [fp, #-8]
   17acc:	bl	19de8 <__assert_fail@plt+0x8cac>
   17ad0:	mov	r3, r0
   17ad4:	mov	r0, r3
   17ad8:	bl	178e0 <__assert_fail@plt+0x67a4>
   17adc:	mov	r3, r0
   17ae0:	mov	r0, r3
   17ae4:	sub	sp, fp, #4
   17ae8:	pop	{fp, pc}
   17aec:	push	{fp, lr}
   17af0:	add	fp, sp, #4
   17af4:	sub	sp, sp, #8
   17af8:	str	r0, [fp, #-8]
   17afc:	str	r1, [fp, #-12]
   17b00:	ldr	r2, [fp, #-12]
   17b04:	ldr	r1, [fp, #-8]
   17b08:	mov	r0, #0
   17b0c:	bl	17a38 <__assert_fail@plt+0x68fc>
   17b10:	mov	r3, r0
   17b14:	mov	r0, r3
   17b18:	sub	sp, fp, #4
   17b1c:	pop	{fp, pc}
   17b20:	push	{fp, lr}
   17b24:	add	fp, sp, #4
   17b28:	sub	sp, sp, #8
   17b2c:	str	r0, [fp, #-8]
   17b30:	str	r1, [fp, #-12]
   17b34:	ldr	r2, [fp, #-12]
   17b38:	ldr	r1, [fp, #-8]
   17b3c:	mov	r0, #0
   17b40:	bl	17aa8 <__assert_fail@plt+0x696c>
   17b44:	mov	r3, r0
   17b48:	mov	r0, r3
   17b4c:	sub	sp, fp, #4
   17b50:	pop	{fp, pc}
   17b54:	push	{fp, lr}
   17b58:	add	fp, sp, #4
   17b5c:	sub	sp, sp, #8
   17b60:	str	r0, [fp, #-8]
   17b64:	str	r1, [fp, #-12]
   17b68:	mov	r2, #1
   17b6c:	ldr	r1, [fp, #-12]
   17b70:	ldr	r0, [fp, #-8]
   17b74:	bl	17b88 <__assert_fail@plt+0x6a4c>
   17b78:	mov	r3, r0
   17b7c:	mov	r0, r3
   17b80:	sub	sp, fp, #4
   17b84:	pop	{fp, pc}
   17b88:	push	{fp, lr}
   17b8c:	add	fp, sp, #4
   17b90:	sub	sp, sp, #24
   17b94:	str	r0, [fp, #-16]
   17b98:	str	r1, [fp, #-20]	; 0xffffffec
   17b9c:	str	r2, [fp, #-24]	; 0xffffffe8
   17ba0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ba4:	ldr	r3, [r3]
   17ba8:	str	r3, [fp, #-8]
   17bac:	ldr	r3, [fp, #-16]
   17bb0:	cmp	r3, #0
   17bb4:	bne	17c00 <__assert_fail@plt+0x6ac4>
   17bb8:	ldr	r3, [fp, #-8]
   17bbc:	cmp	r3, #0
   17bc0:	bne	17c64 <__assert_fail@plt+0x6b28>
   17bc4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17bc8:	mov	r0, #64	; 0x40
   17bcc:	bl	1a7b0 <__assert_fail@plt+0x9674>
   17bd0:	mov	r3, r0
   17bd4:	str	r3, [fp, #-8]
   17bd8:	ldr	r3, [fp, #-8]
   17bdc:	cmp	r3, #0
   17be0:	moveq	r3, #1
   17be4:	movne	r3, #0
   17be8:	uxtb	r3, r3
   17bec:	mov	r2, r3
   17bf0:	ldr	r3, [fp, #-8]
   17bf4:	add	r3, r2, r3
   17bf8:	str	r3, [fp, #-8]
   17bfc:	b	17c64 <__assert_fail@plt+0x6b28>
   17c00:	ldr	r3, [fp, #-8]
   17c04:	lsr	r3, r3, #1
   17c08:	add	r3, r3, #1
   17c0c:	mvn	r2, r3
   17c10:	ldr	r3, [fp, #-8]
   17c14:	cmp	r2, r3
   17c18:	bcs	17c3c <__assert_fail@plt+0x6b00>
   17c1c:	ldr	r3, [fp, #-8]
   17c20:	lsr	r2, r3, #1
   17c24:	ldr	r3, [fp, #-8]
   17c28:	add	r3, r2, r3
   17c2c:	add	r3, r3, #1
   17c30:	str	r3, [fp, #-8]
   17c34:	mov	r3, #1
   17c38:	b	17c58 <__assert_fail@plt+0x6b1c>
   17c3c:	ldr	r3, [fp, #-8]
   17c40:	lsr	r2, r3, #1
   17c44:	ldr	r3, [fp, #-8]
   17c48:	add	r3, r2, r3
   17c4c:	add	r3, r3, #1
   17c50:	str	r3, [fp, #-8]
   17c54:	mov	r3, #0
   17c58:	cmp	r3, #0
   17c5c:	beq	17c64 <__assert_fail@plt+0x6b28>
   17c60:	bl	1842c <__assert_fail@plt+0x72f0>
   17c64:	ldr	r3, [fp, #-8]
   17c68:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17c6c:	mov	r1, r3
   17c70:	ldr	r0, [fp, #-16]
   17c74:	bl	17a38 <__assert_fail@plt+0x68fc>
   17c78:	str	r0, [fp, #-16]
   17c7c:	ldr	r2, [fp, #-8]
   17c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c84:	str	r2, [r3]
   17c88:	ldr	r3, [fp, #-16]
   17c8c:	mov	r0, r3
   17c90:	sub	sp, fp, #4
   17c94:	pop	{fp, pc}
   17c98:	push	{fp, lr}
   17c9c:	add	fp, sp, #4
   17ca0:	sub	sp, sp, #32
   17ca4:	str	r0, [fp, #-24]	; 0xffffffe8
   17ca8:	str	r1, [fp, #-28]	; 0xffffffe4
   17cac:	str	r2, [fp, #-32]	; 0xffffffe0
   17cb0:	str	r3, [fp, #-36]	; 0xffffffdc
   17cb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17cb8:	ldr	r3, [r3]
   17cbc:	str	r3, [fp, #-8]
   17cc0:	ldr	r3, [fp, #-8]
   17cc4:	asr	r3, r3, #1
   17cc8:	cmp	r3, #0
   17ccc:	bge	17cf4 <__assert_fail@plt+0x6bb8>
   17cd0:	ldr	r3, [fp, #-8]
   17cd4:	asr	r3, r3, #1
   17cd8:	rsb	r2, r3, #-2147483648	; 0x80000000
   17cdc:	ldr	r3, [fp, #-8]
   17ce0:	cmp	r2, r3
   17ce4:	movgt	r3, #1
   17ce8:	movle	r3, #0
   17cec:	uxtb	r3, r3
   17cf0:	b	17d48 <__assert_fail@plt+0x6c0c>
   17cf4:	ldr	r3, [fp, #-8]
   17cf8:	cmp	r3, #0
   17cfc:	bge	17d24 <__assert_fail@plt+0x6be8>
   17d00:	ldr	r3, [fp, #-8]
   17d04:	asr	r2, r3, #1
   17d08:	ldr	r3, [fp, #-8]
   17d0c:	rsb	r3, r3, #-2147483648	; 0x80000000
   17d10:	cmp	r2, r3
   17d14:	movlt	r3, #1
   17d18:	movge	r3, #0
   17d1c:	uxtb	r3, r3
   17d20:	b	17d48 <__assert_fail@plt+0x6c0c>
   17d24:	ldr	r3, [fp, #-8]
   17d28:	asr	r2, r3, #1
   17d2c:	mvn	r3, #-2147483648	; 0x80000000
   17d30:	sub	r3, r3, r2
   17d34:	ldr	r2, [fp, #-8]
   17d38:	cmp	r3, r2
   17d3c:	movlt	r3, #1
   17d40:	movge	r3, #0
   17d44:	uxtb	r3, r3
   17d48:	cmp	r3, #0
   17d4c:	beq	17d70 <__assert_fail@plt+0x6c34>
   17d50:	ldr	r3, [fp, #-8]
   17d54:	asr	r3, r3, #1
   17d58:	mov	r2, r3
   17d5c:	ldr	r3, [fp, #-8]
   17d60:	add	r3, r2, r3
   17d64:	str	r3, [fp, #-16]
   17d68:	mov	r3, #1
   17d6c:	b	17d8c <__assert_fail@plt+0x6c50>
   17d70:	ldr	r3, [fp, #-8]
   17d74:	asr	r3, r3, #1
   17d78:	mov	r2, r3
   17d7c:	ldr	r3, [fp, #-8]
   17d80:	add	r3, r2, r3
   17d84:	str	r3, [fp, #-16]
   17d88:	mov	r3, #0
   17d8c:	cmp	r3, #0
   17d90:	beq	17d9c <__assert_fail@plt+0x6c60>
   17d94:	mvn	r3, #-2147483648	; 0x80000000
   17d98:	str	r3, [fp, #-16]
   17d9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17da0:	cmp	r3, #0
   17da4:	blt	17dc0 <__assert_fail@plt+0x6c84>
   17da8:	ldr	r3, [fp, #-16]
   17dac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17db0:	cmp	r2, r3
   17db4:	bge	17dc0 <__assert_fail@plt+0x6c84>
   17db8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17dbc:	str	r3, [fp, #-16]
   17dc0:	ldr	r3, [fp, #4]
   17dc4:	cmp	r3, #0
   17dc8:	bge	17e58 <__assert_fail@plt+0x6d1c>
   17dcc:	ldr	r3, [fp, #-16]
   17dd0:	cmp	r3, #0
   17dd4:	bge	17e04 <__assert_fail@plt+0x6cc8>
   17dd8:	ldr	r1, [fp, #4]
   17ddc:	mvn	r0, #-2147483648	; 0x80000000
   17de0:	bl	1a9bc <__assert_fail@plt+0x9880>
   17de4:	mov	r3, r0
   17de8:	mov	r2, r3
   17dec:	ldr	r3, [fp, #-16]
   17df0:	cmp	r2, r3
   17df4:	movgt	r3, #1
   17df8:	movle	r3, #0
   17dfc:	uxtb	r3, r3
   17e00:	b	17ef8 <__assert_fail@plt+0x6dbc>
   17e04:	ldr	r3, [fp, #4]
   17e08:	cmn	r3, #1
   17e0c:	bne	17e2c <__assert_fail@plt+0x6cf0>
   17e10:	ldr	r3, [fp, #-16]
   17e14:	add	r3, r3, #-2147483648	; 0x80000000
   17e18:	cmp	r3, #0
   17e1c:	movgt	r3, #1
   17e20:	movle	r3, #0
   17e24:	uxtb	r3, r3
   17e28:	b	17ef8 <__assert_fail@plt+0x6dbc>
   17e2c:	ldr	r1, [fp, #4]
   17e30:	mov	r0, #-2147483648	; 0x80000000
   17e34:	bl	1a9bc <__assert_fail@plt+0x9880>
   17e38:	mov	r3, r0
   17e3c:	mov	r2, r3
   17e40:	ldr	r3, [fp, #-16]
   17e44:	cmp	r2, r3
   17e48:	movlt	r3, #1
   17e4c:	movge	r3, #0
   17e50:	uxtb	r3, r3
   17e54:	b	17ef8 <__assert_fail@plt+0x6dbc>
   17e58:	ldr	r3, [fp, #4]
   17e5c:	cmp	r3, #0
   17e60:	beq	17ef4 <__assert_fail@plt+0x6db8>
   17e64:	ldr	r3, [fp, #-16]
   17e68:	cmp	r3, #0
   17e6c:	bge	17ec8 <__assert_fail@plt+0x6d8c>
   17e70:	ldr	r3, [fp, #-16]
   17e74:	cmn	r3, #1
   17e78:	bne	17e98 <__assert_fail@plt+0x6d5c>
   17e7c:	ldr	r3, [fp, #4]
   17e80:	add	r3, r3, #-2147483648	; 0x80000000
   17e84:	cmp	r3, #0
   17e88:	movgt	r3, #1
   17e8c:	movle	r3, #0
   17e90:	uxtb	r3, r3
   17e94:	b	17ef8 <__assert_fail@plt+0x6dbc>
   17e98:	ldr	r3, [fp, #-16]
   17e9c:	mov	r1, r3
   17ea0:	mov	r0, #-2147483648	; 0x80000000
   17ea4:	bl	1a9bc <__assert_fail@plt+0x9880>
   17ea8:	mov	r3, r0
   17eac:	mov	r2, r3
   17eb0:	ldr	r3, [fp, #4]
   17eb4:	cmp	r2, r3
   17eb8:	movlt	r3, #1
   17ebc:	movge	r3, #0
   17ec0:	uxtb	r3, r3
   17ec4:	b	17ef8 <__assert_fail@plt+0x6dbc>
   17ec8:	ldr	r1, [fp, #4]
   17ecc:	mvn	r0, #-2147483648	; 0x80000000
   17ed0:	bl	1a9bc <__assert_fail@plt+0x9880>
   17ed4:	mov	r3, r0
   17ed8:	mov	r2, r3
   17edc:	ldr	r3, [fp, #-16]
   17ee0:	cmp	r2, r3
   17ee4:	movlt	r3, #1
   17ee8:	movge	r3, #0
   17eec:	uxtb	r3, r3
   17ef0:	b	17ef8 <__assert_fail@plt+0x6dbc>
   17ef4:	mov	r3, #0
   17ef8:	cmp	r3, #0
   17efc:	beq	17f1c <__assert_fail@plt+0x6de0>
   17f00:	ldr	r3, [fp, #-16]
   17f04:	mov	r2, r3
   17f08:	ldr	r3, [fp, #4]
   17f0c:	mul	r3, r3, r2
   17f10:	str	r3, [fp, #-20]	; 0xffffffec
   17f14:	mov	r3, #1
   17f18:	b	17f34 <__assert_fail@plt+0x6df8>
   17f1c:	ldr	r3, [fp, #-16]
   17f20:	mov	r2, r3
   17f24:	ldr	r3, [fp, #4]
   17f28:	mul	r3, r3, r2
   17f2c:	str	r3, [fp, #-20]	; 0xffffffec
   17f30:	mov	r3, #0
   17f34:	cmp	r3, #0
   17f38:	beq	17f44 <__assert_fail@plt+0x6e08>
   17f3c:	mvn	r3, #-2147483648	; 0x80000000
   17f40:	b	17f5c <__assert_fail@plt+0x6e20>
   17f44:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f48:	cmp	r3, #63	; 0x3f
   17f4c:	bgt	17f58 <__assert_fail@plt+0x6e1c>
   17f50:	mov	r3, #64	; 0x40
   17f54:	b	17f5c <__assert_fail@plt+0x6e20>
   17f58:	mov	r3, #0
   17f5c:	str	r3, [fp, #-12]
   17f60:	ldr	r3, [fp, #-12]
   17f64:	cmp	r3, #0
   17f68:	beq	17fa4 <__assert_fail@plt+0x6e68>
   17f6c:	ldr	r1, [fp, #4]
   17f70:	ldr	r0, [fp, #-12]
   17f74:	bl	1a9bc <__assert_fail@plt+0x9880>
   17f78:	mov	r3, r0
   17f7c:	str	r3, [fp, #-16]
   17f80:	ldr	r3, [fp, #-12]
   17f84:	ldr	r1, [fp, #4]
   17f88:	mov	r0, r3
   17f8c:	bl	1abdc <__assert_fail@plt+0x9aa0>
   17f90:	mov	r3, r1
   17f94:	mov	r2, r3
   17f98:	ldr	r3, [fp, #-12]
   17f9c:	sub	r3, r3, r2
   17fa0:	str	r3, [fp, #-20]	; 0xffffffec
   17fa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fa8:	cmp	r3, #0
   17fac:	bne	17fbc <__assert_fail@plt+0x6e80>
   17fb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17fb4:	mov	r2, #0
   17fb8:	str	r2, [r3]
   17fbc:	ldr	r2, [fp, #-16]
   17fc0:	ldr	r3, [fp, #-8]
   17fc4:	sub	r2, r2, r3
   17fc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fcc:	cmp	r2, r3
   17fd0:	bge	18208 <__assert_fail@plt+0x70cc>
   17fd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fd8:	cmp	r3, #0
   17fdc:	bge	18000 <__assert_fail@plt+0x6ec4>
   17fe0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17fe4:	rsb	r2, r3, #-2147483648	; 0x80000000
   17fe8:	ldr	r3, [fp, #-8]
   17fec:	cmp	r2, r3
   17ff0:	movgt	r3, #1
   17ff4:	movle	r3, #0
   17ff8:	uxtb	r3, r3
   17ffc:	b	1804c <__assert_fail@plt+0x6f10>
   18000:	ldr	r3, [fp, #-8]
   18004:	cmp	r3, #0
   18008:	bge	1802c <__assert_fail@plt+0x6ef0>
   1800c:	ldr	r3, [fp, #-8]
   18010:	rsb	r2, r3, #-2147483648	; 0x80000000
   18014:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18018:	cmp	r2, r3
   1801c:	movgt	r3, #1
   18020:	movle	r3, #0
   18024:	uxtb	r3, r3
   18028:	b	1804c <__assert_fail@plt+0x6f10>
   1802c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18030:	mvn	r3, #-2147483648	; 0x80000000
   18034:	sub	r3, r3, r2
   18038:	ldr	r2, [fp, #-8]
   1803c:	cmp	r3, r2
   18040:	movlt	r3, #1
   18044:	movge	r3, #0
   18048:	uxtb	r3, r3
   1804c:	cmp	r3, #0
   18050:	beq	18068 <__assert_fail@plt+0x6f2c>
   18054:	ldr	r2, [fp, #-8]
   18058:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1805c:	add	r3, r2, r3
   18060:	str	r3, [fp, #-16]
   18064:	b	18204 <__assert_fail@plt+0x70c8>
   18068:	ldr	r2, [fp, #-8]
   1806c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18070:	add	r3, r2, r3
   18074:	str	r3, [fp, #-16]
   18078:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1807c:	cmp	r3, #0
   18080:	blt	18094 <__assert_fail@plt+0x6f58>
   18084:	ldr	r3, [fp, #-16]
   18088:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1808c:	cmp	r2, r3
   18090:	blt	18204 <__assert_fail@plt+0x70c8>
   18094:	ldr	r3, [fp, #4]
   18098:	cmp	r3, #0
   1809c:	bge	1812c <__assert_fail@plt+0x6ff0>
   180a0:	ldr	r3, [fp, #-16]
   180a4:	cmp	r3, #0
   180a8:	bge	180d8 <__assert_fail@plt+0x6f9c>
   180ac:	ldr	r1, [fp, #4]
   180b0:	mvn	r0, #-2147483648	; 0x80000000
   180b4:	bl	1a9bc <__assert_fail@plt+0x9880>
   180b8:	mov	r3, r0
   180bc:	mov	r2, r3
   180c0:	ldr	r3, [fp, #-16]
   180c4:	cmp	r2, r3
   180c8:	movgt	r3, #1
   180cc:	movle	r3, #0
   180d0:	uxtb	r3, r3
   180d4:	b	181cc <__assert_fail@plt+0x7090>
   180d8:	ldr	r3, [fp, #4]
   180dc:	cmn	r3, #1
   180e0:	bne	18100 <__assert_fail@plt+0x6fc4>
   180e4:	ldr	r3, [fp, #-16]
   180e8:	add	r3, r3, #-2147483648	; 0x80000000
   180ec:	cmp	r3, #0
   180f0:	movgt	r3, #1
   180f4:	movle	r3, #0
   180f8:	uxtb	r3, r3
   180fc:	b	181cc <__assert_fail@plt+0x7090>
   18100:	ldr	r1, [fp, #4]
   18104:	mov	r0, #-2147483648	; 0x80000000
   18108:	bl	1a9bc <__assert_fail@plt+0x9880>
   1810c:	mov	r3, r0
   18110:	mov	r2, r3
   18114:	ldr	r3, [fp, #-16]
   18118:	cmp	r2, r3
   1811c:	movlt	r3, #1
   18120:	movge	r3, #0
   18124:	uxtb	r3, r3
   18128:	b	181cc <__assert_fail@plt+0x7090>
   1812c:	ldr	r3, [fp, #4]
   18130:	cmp	r3, #0
   18134:	beq	181c8 <__assert_fail@plt+0x708c>
   18138:	ldr	r3, [fp, #-16]
   1813c:	cmp	r3, #0
   18140:	bge	1819c <__assert_fail@plt+0x7060>
   18144:	ldr	r3, [fp, #-16]
   18148:	cmn	r3, #1
   1814c:	bne	1816c <__assert_fail@plt+0x7030>
   18150:	ldr	r3, [fp, #4]
   18154:	add	r3, r3, #-2147483648	; 0x80000000
   18158:	cmp	r3, #0
   1815c:	movgt	r3, #1
   18160:	movle	r3, #0
   18164:	uxtb	r3, r3
   18168:	b	181cc <__assert_fail@plt+0x7090>
   1816c:	ldr	r3, [fp, #-16]
   18170:	mov	r1, r3
   18174:	mov	r0, #-2147483648	; 0x80000000
   18178:	bl	1a9bc <__assert_fail@plt+0x9880>
   1817c:	mov	r3, r0
   18180:	mov	r2, r3
   18184:	ldr	r3, [fp, #4]
   18188:	cmp	r2, r3
   1818c:	movlt	r3, #1
   18190:	movge	r3, #0
   18194:	uxtb	r3, r3
   18198:	b	181cc <__assert_fail@plt+0x7090>
   1819c:	ldr	r1, [fp, #4]
   181a0:	mvn	r0, #-2147483648	; 0x80000000
   181a4:	bl	1a9bc <__assert_fail@plt+0x9880>
   181a8:	mov	r3, r0
   181ac:	mov	r2, r3
   181b0:	ldr	r3, [fp, #-16]
   181b4:	cmp	r2, r3
   181b8:	movlt	r3, #1
   181bc:	movge	r3, #0
   181c0:	uxtb	r3, r3
   181c4:	b	181cc <__assert_fail@plt+0x7090>
   181c8:	mov	r3, #0
   181cc:	cmp	r3, #0
   181d0:	beq	181ec <__assert_fail@plt+0x70b0>
   181d4:	ldr	r3, [fp, #-16]
   181d8:	mov	r2, r3
   181dc:	ldr	r3, [fp, #4]
   181e0:	mul	r3, r3, r2
   181e4:	str	r3, [fp, #-20]	; 0xffffffec
   181e8:	b	18204 <__assert_fail@plt+0x70c8>
   181ec:	ldr	r3, [fp, #-16]
   181f0:	mov	r2, r3
   181f4:	ldr	r3, [fp, #4]
   181f8:	mul	r3, r3, r2
   181fc:	str	r3, [fp, #-20]	; 0xffffffec
   18200:	b	18208 <__assert_fail@plt+0x70cc>
   18204:	bl	1842c <__assert_fail@plt+0x72f0>
   18208:	ldr	r3, [fp, #-20]	; 0xffffffec
   1820c:	mov	r1, r3
   18210:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18214:	bl	179a0 <__assert_fail@plt+0x6864>
   18218:	str	r0, [fp, #-24]	; 0xffffffe8
   1821c:	ldr	r2, [fp, #-16]
   18220:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18224:	str	r2, [r3]
   18228:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1822c:	mov	r0, r3
   18230:	sub	sp, fp, #4
   18234:	pop	{fp, pc}
   18238:	push	{fp, lr}
   1823c:	add	fp, sp, #4
   18240:	sub	sp, sp, #8
   18244:	str	r0, [fp, #-8]
   18248:	mov	r1, #1
   1824c:	ldr	r0, [fp, #-8]
   18250:	bl	18290 <__assert_fail@plt+0x7154>
   18254:	mov	r3, r0
   18258:	mov	r0, r3
   1825c:	sub	sp, fp, #4
   18260:	pop	{fp, pc}
   18264:	push	{fp, lr}
   18268:	add	fp, sp, #4
   1826c:	sub	sp, sp, #8
   18270:	str	r0, [fp, #-8]
   18274:	mov	r1, #1
   18278:	ldr	r0, [fp, #-8]
   1827c:	bl	182cc <__assert_fail@plt+0x7190>
   18280:	mov	r3, r0
   18284:	mov	r0, r3
   18288:	sub	sp, fp, #4
   1828c:	pop	{fp, pc}
   18290:	push	{fp, lr}
   18294:	add	fp, sp, #4
   18298:	sub	sp, sp, #8
   1829c:	str	r0, [fp, #-8]
   182a0:	str	r1, [fp, #-12]
   182a4:	ldr	r1, [fp, #-12]
   182a8:	ldr	r0, [fp, #-8]
   182ac:	bl	195e4 <__assert_fail@plt+0x84a8>
   182b0:	mov	r3, r0
   182b4:	mov	r0, r3
   182b8:	bl	178e0 <__assert_fail@plt+0x67a4>
   182bc:	mov	r3, r0
   182c0:	mov	r0, r3
   182c4:	sub	sp, fp, #4
   182c8:	pop	{fp, pc}
   182cc:	push	{fp, lr}
   182d0:	add	fp, sp, #4
   182d4:	sub	sp, sp, #8
   182d8:	str	r0, [fp, #-8]
   182dc:	str	r1, [fp, #-12]
   182e0:	ldr	r1, [fp, #-12]
   182e4:	ldr	r0, [fp, #-8]
   182e8:	bl	19db0 <__assert_fail@plt+0x8c74>
   182ec:	mov	r3, r0
   182f0:	mov	r0, r3
   182f4:	bl	178e0 <__assert_fail@plt+0x67a4>
   182f8:	mov	r3, r0
   182fc:	mov	r0, r3
   18300:	sub	sp, fp, #4
   18304:	pop	{fp, pc}
   18308:	push	{fp, lr}
   1830c:	add	fp, sp, #4
   18310:	sub	sp, sp, #8
   18314:	str	r0, [fp, #-8]
   18318:	str	r1, [fp, #-12]
   1831c:	ldr	r0, [fp, #-12]
   18320:	bl	17910 <__assert_fail@plt+0x67d4>
   18324:	mov	r3, r0
   18328:	ldr	r2, [fp, #-12]
   1832c:	ldr	r1, [fp, #-8]
   18330:	mov	r0, r3
   18334:	bl	10ee4 <memcpy@plt>
   18338:	mov	r3, r0
   1833c:	mov	r0, r3
   18340:	sub	sp, fp, #4
   18344:	pop	{fp, pc}
   18348:	push	{fp, lr}
   1834c:	add	fp, sp, #4
   18350:	sub	sp, sp, #8
   18354:	str	r0, [fp, #-8]
   18358:	str	r1, [fp, #-12]
   1835c:	ldr	r0, [fp, #-12]
   18360:	bl	17944 <__assert_fail@plt+0x6808>
   18364:	mov	r3, r0
   18368:	mov	r0, r3
   1836c:	ldr	r3, [fp, #-12]
   18370:	mov	r2, r3
   18374:	ldr	r1, [fp, #-8]
   18378:	bl	10ee4 <memcpy@plt>
   1837c:	mov	r3, r0
   18380:	mov	r0, r3
   18384:	sub	sp, fp, #4
   18388:	pop	{fp, pc}
   1838c:	push	{fp, lr}
   18390:	add	fp, sp, #4
   18394:	sub	sp, sp, #16
   18398:	str	r0, [fp, #-16]
   1839c:	str	r1, [fp, #-20]	; 0xffffffec
   183a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   183a4:	add	r3, r3, #1
   183a8:	mov	r0, r3
   183ac:	bl	17944 <__assert_fail@plt+0x6808>
   183b0:	mov	r3, r0
   183b4:	str	r3, [fp, #-8]
   183b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   183bc:	ldr	r2, [fp, #-8]
   183c0:	add	r3, r2, r3
   183c4:	mov	r2, #0
   183c8:	strb	r2, [r3]
   183cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   183d0:	mov	r2, r3
   183d4:	ldr	r1, [fp, #-16]
   183d8:	ldr	r0, [fp, #-8]
   183dc:	bl	10ee4 <memcpy@plt>
   183e0:	mov	r3, r0
   183e4:	mov	r0, r3
   183e8:	sub	sp, fp, #4
   183ec:	pop	{fp, pc}
   183f0:	push	{fp, lr}
   183f4:	add	fp, sp, #4
   183f8:	sub	sp, sp, #8
   183fc:	str	r0, [fp, #-8]
   18400:	ldr	r0, [fp, #-8]
   18404:	bl	1101c <strlen@plt>
   18408:	mov	r3, r0
   1840c:	add	r3, r3, #1
   18410:	mov	r1, r3
   18414:	ldr	r0, [fp, #-8]
   18418:	bl	18308 <__assert_fail@plt+0x71cc>
   1841c:	mov	r3, r0
   18420:	mov	r0, r3
   18424:	sub	sp, fp, #4
   18428:	pop	{fp, pc}
   1842c:	push	{r4, r5, fp, lr}
   18430:	add	fp, sp, #12
   18434:	ldr	r3, [pc, #32]	; 1845c <__assert_fail@plt+0x7320>
   18438:	ldr	r4, [r3]
   1843c:	ldr	r0, [pc, #28]	; 18460 <__assert_fail@plt+0x7324>
   18440:	bl	11004 <gettext@plt>
   18444:	mov	r3, r0
   18448:	ldr	r2, [pc, #20]	; 18464 <__assert_fail@plt+0x7328>
   1844c:	mov	r1, #0
   18450:	mov	r0, r4
   18454:	bl	10f98 <error@plt>
   18458:	bl	1110c <abort@plt>
   1845c:	andeq	sp, r2, r4, lsr #2
   18460:	andeq	ip, r1, r8, rrx
   18464:	andeq	ip, r1, ip, ror r0
   18468:	push	{r4, r5, r6, fp, lr}
   1846c:	add	fp, sp, #16
   18470:	sub	sp, sp, #28
   18474:	str	r0, [fp, #-24]	; 0xffffffe8
   18478:	str	r1, [fp, #-28]	; 0xffffffe4
   1847c:	str	r2, [fp, #-32]	; 0xffffffe0
   18480:	str	r3, [fp, #-36]	; 0xffffffdc
   18484:	ldr	r0, [pc, #152]	; 18524 <__assert_fail@plt+0x73e8>
   18488:	bl	11004 <gettext@plt>
   1848c:	mov	r3, r0
   18490:	mov	r2, r3
   18494:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18498:	mov	r0, #0
   1849c:	bl	10f98 <error@plt>
   184a0:	ldr	r0, [pc, #128]	; 18528 <__assert_fail@plt+0x73ec>
   184a4:	bl	11004 <gettext@plt>
   184a8:	mov	r3, r0
   184ac:	mov	r2, r3
   184b0:	mov	r1, #0
   184b4:	mov	r0, #0
   184b8:	bl	10f98 <error@plt>
   184bc:	ldr	r3, [pc, #104]	; 1852c <__assert_fail@plt+0x73f0>
   184c0:	ldr	r4, [r3]
   184c4:	ldr	r0, [pc, #100]	; 18530 <__assert_fail@plt+0x73f4>
   184c8:	bl	11004 <gettext@plt>
   184cc:	mov	r5, r0
   184d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   184d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   184d8:	mov	r1, #8
   184dc:	mov	r0, #0
   184e0:	bl	16b18 <__assert_fail@plt+0x59dc>
   184e4:	mov	r6, r0
   184e8:	ldr	r3, [fp, #4]
   184ec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   184f0:	mov	r1, #8
   184f4:	mov	r0, #1
   184f8:	bl	16b18 <__assert_fail@plt+0x59dc>
   184fc:	mov	r3, r0
   18500:	str	r3, [sp]
   18504:	mov	r3, r6
   18508:	mov	r2, r5
   1850c:	mov	r1, #0
   18510:	mov	r0, r4
   18514:	bl	10f98 <error@plt>
   18518:	nop			; (mov r0, r0)
   1851c:	sub	sp, fp, #16
   18520:	pop	{r4, r5, r6, fp, pc}
   18524:	andeq	ip, r1, r0, lsl #1
   18528:	muleq	r1, ip, r0
   1852c:	andeq	sp, r2, r4, lsr #2
   18530:	andeq	ip, r1, r8, asr #1
   18534:	push	{fp, lr}
   18538:	add	fp, sp, #4
   1853c:	sub	sp, sp, #32
   18540:	str	r0, [fp, #-16]
   18544:	str	r1, [fp, #-20]	; 0xffffffec
   18548:	str	r2, [fp, #-24]	; 0xffffffe8
   1854c:	str	r3, [fp, #-28]	; 0xffffffe4
   18550:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18554:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18558:	ldr	r1, [fp, #-20]	; 0xffffffec
   1855c:	ldr	r0, [fp, #-16]
   18560:	bl	1a07c <__assert_fail@plt+0x8f40>
   18564:	str	r0, [fp, #-8]
   18568:	bl	11040 <__errno_location@plt>
   1856c:	mov	r3, r0
   18570:	ldr	r3, [r3]
   18574:	str	r3, [fp, #-12]
   18578:	ldr	r3, [fp, #-12]
   1857c:	cmp	r3, #0
   18580:	beq	185a0 <__assert_fail@plt+0x7464>
   18584:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18588:	str	r3, [sp]
   1858c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18590:	ldr	r2, [fp, #-20]	; 0xffffffec
   18594:	ldr	r1, [fp, #-16]
   18598:	ldr	r0, [fp, #-12]
   1859c:	bl	18468 <__assert_fail@plt+0x732c>
   185a0:	ldr	r3, [fp, #-8]
   185a4:	mov	r0, r3
   185a8:	sub	sp, fp, #4
   185ac:	pop	{fp, pc}
   185b0:	push	{fp, lr}
   185b4:	add	fp, sp, #4
   185b8:	sub	sp, sp, #32
   185bc:	str	r0, [fp, #-16]
   185c0:	str	r1, [fp, #-20]	; 0xffffffec
   185c4:	str	r2, [fp, #-24]	; 0xffffffe8
   185c8:	str	r3, [fp, #-28]	; 0xffffffe4
   185cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   185d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   185d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   185d8:	ldr	r0, [fp, #-16]
   185dc:	bl	1a188 <__assert_fail@plt+0x904c>
   185e0:	str	r0, [fp, #-8]
   185e4:	bl	11040 <__errno_location@plt>
   185e8:	mov	r3, r0
   185ec:	ldr	r3, [r3]
   185f0:	str	r3, [fp, #-12]
   185f4:	ldr	r3, [fp, #-12]
   185f8:	cmp	r3, #0
   185fc:	beq	18624 <__assert_fail@plt+0x74e8>
   18600:	ldr	r3, [fp, #-20]	; 0xffffffec
   18604:	sub	r2, r3, #1
   18608:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1860c:	sub	r3, r3, #1
   18610:	str	r3, [sp]
   18614:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18618:	ldr	r1, [fp, #-16]
   1861c:	ldr	r0, [fp, #-12]
   18620:	bl	18468 <__assert_fail@plt+0x732c>
   18624:	ldr	r3, [fp, #-8]
   18628:	mov	r0, r3
   1862c:	sub	sp, fp, #4
   18630:	pop	{fp, pc}
   18634:	push	{fp, lr}
   18638:	add	fp, sp, #4
   1863c:	sub	sp, sp, #16
   18640:	str	r0, [fp, #-16]
   18644:	str	r1, [fp, #-20]	; 0xffffffec
   18648:	ldr	r3, [fp, #-20]	; 0xffffffec
   1864c:	cmp	r3, #0
   18650:	bge	18684 <__assert_fail@plt+0x7548>
   18654:	ldr	r1, [fp, #-20]	; 0xffffffec
   18658:	mov	r0, #0
   1865c:	bl	1a9bc <__assert_fail@plt+0x9880>
   18660:	mov	r3, r0
   18664:	mov	r2, r3
   18668:	ldr	r3, [fp, #-16]
   1866c:	ldr	r3, [r3]
   18670:	cmp	r2, r3
   18674:	movcc	r3, #1
   18678:	movcs	r3, #0
   1867c:	uxtb	r3, r3
   18680:	b	186cc <__assert_fail@plt+0x7590>
   18684:	ldr	r3, [fp, #-20]	; 0xffffffec
   18688:	cmp	r3, #0
   1868c:	beq	186c0 <__assert_fail@plt+0x7584>
   18690:	ldr	r3, [fp, #-20]	; 0xffffffec
   18694:	mov	r1, r3
   18698:	mvn	r0, #0
   1869c:	bl	1a7b0 <__assert_fail@plt+0x9674>
   186a0:	mov	r3, r0
   186a4:	mov	r2, r3
   186a8:	ldr	r3, [fp, #-16]
   186ac:	ldr	r3, [r3]
   186b0:	cmp	r2, r3
   186b4:	bcs	186c0 <__assert_fail@plt+0x7584>
   186b8:	mov	r3, #1
   186bc:	b	186c4 <__assert_fail@plt+0x7588>
   186c0:	mov	r3, #0
   186c4:	and	r3, r3, #1
   186c8:	uxtb	r3, r3
   186cc:	cmp	r3, #0
   186d0:	beq	186f0 <__assert_fail@plt+0x75b4>
   186d4:	ldr	r3, [fp, #-16]
   186d8:	ldr	r3, [r3]
   186dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   186e0:	mul	r3, r2, r3
   186e4:	str	r3, [fp, #-8]
   186e8:	mov	r3, #1
   186ec:	b	18708 <__assert_fail@plt+0x75cc>
   186f0:	ldr	r3, [fp, #-16]
   186f4:	ldr	r3, [r3]
   186f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   186fc:	mul	r3, r2, r3
   18700:	str	r3, [fp, #-8]
   18704:	mov	r3, #0
   18708:	cmp	r3, #0
   1870c:	beq	18724 <__assert_fail@plt+0x75e8>
   18710:	ldr	r3, [fp, #-16]
   18714:	mvn	r2, #0
   18718:	str	r2, [r3]
   1871c:	mov	r3, #1
   18720:	b	18734 <__assert_fail@plt+0x75f8>
   18724:	ldr	r2, [fp, #-8]
   18728:	ldr	r3, [fp, #-16]
   1872c:	str	r2, [r3]
   18730:	mov	r3, #0
   18734:	mov	r0, r3
   18738:	sub	sp, fp, #4
   1873c:	pop	{fp, pc}
   18740:	push	{fp, lr}
   18744:	add	fp, sp, #4
   18748:	sub	sp, sp, #24
   1874c:	str	r0, [fp, #-16]
   18750:	str	r1, [fp, #-20]	; 0xffffffec
   18754:	str	r2, [fp, #-24]	; 0xffffffe8
   18758:	mov	r3, #0
   1875c:	str	r3, [fp, #-8]
   18760:	b	18780 <__assert_fail@plt+0x7644>
   18764:	ldr	r1, [fp, #-20]	; 0xffffffec
   18768:	ldr	r0, [fp, #-16]
   1876c:	bl	18634 <__assert_fail@plt+0x74f8>
   18770:	mov	r2, r0
   18774:	ldr	r3, [fp, #-8]
   18778:	orr	r3, r3, r2
   1877c:	str	r3, [fp, #-8]
   18780:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18784:	sub	r2, r3, #1
   18788:	str	r2, [fp, #-24]	; 0xffffffe8
   1878c:	cmp	r3, #0
   18790:	bne	18764 <__assert_fail@plt+0x7628>
   18794:	ldr	r3, [fp, #-8]
   18798:	mov	r0, r3
   1879c:	sub	sp, fp, #4
   187a0:	pop	{fp, pc}
   187a4:	push	{fp, lr}
   187a8:	add	fp, sp, #4
   187ac:	sub	sp, sp, #56	; 0x38
   187b0:	str	r0, [fp, #-48]	; 0xffffffd0
   187b4:	str	r1, [fp, #-52]	; 0xffffffcc
   187b8:	str	r2, [fp, #-56]	; 0xffffffc8
   187bc:	str	r3, [fp, #-60]	; 0xffffffc4
   187c0:	mov	r3, #0
   187c4:	str	r3, [fp, #-8]
   187c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   187cc:	cmp	r3, #0
   187d0:	blt	187e0 <__assert_fail@plt+0x76a4>
   187d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   187d8:	cmp	r3, #36	; 0x24
   187dc:	ble	187f4 <__assert_fail@plt+0x76b8>
   187e0:	ldr	r3, [pc, #1512]	; 18dd0 <__assert_fail@plt+0x7c94>
   187e4:	mov	r2, #85	; 0x55
   187e8:	ldr	r1, [pc, #1508]	; 18dd4 <__assert_fail@plt+0x7c98>
   187ec:	ldr	r0, [pc, #1508]	; 18dd8 <__assert_fail@plt+0x7c9c>
   187f0:	bl	1113c <__assert_fail@plt>
   187f4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   187f8:	cmp	r3, #0
   187fc:	bne	18808 <__assert_fail@plt+0x76cc>
   18800:	sub	r3, fp, #36	; 0x24
   18804:	b	1880c <__assert_fail@plt+0x76d0>
   18808:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1880c:	str	r3, [fp, #-32]	; 0xffffffe0
   18810:	bl	11040 <__errno_location@plt>
   18814:	mov	r2, r0
   18818:	mov	r3, #0
   1881c:	str	r3, [r2]
   18820:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18824:	str	r3, [fp, #-12]
   18828:	ldr	r3, [fp, #-12]
   1882c:	ldrb	r3, [r3]
   18830:	strb	r3, [fp, #-13]
   18834:	b	18850 <__assert_fail@plt+0x7714>
   18838:	ldr	r3, [fp, #-12]
   1883c:	add	r3, r3, #1
   18840:	str	r3, [fp, #-12]
   18844:	ldr	r3, [fp, #-12]
   18848:	ldrb	r3, [r3]
   1884c:	strb	r3, [fp, #-13]
   18850:	bl	10fec <__ctype_b_loc@plt>
   18854:	mov	r3, r0
   18858:	ldr	r2, [r3]
   1885c:	ldrb	r3, [fp, #-13]
   18860:	lsl	r3, r3, #1
   18864:	add	r3, r2, r3
   18868:	ldrh	r3, [r3]
   1886c:	and	r3, r3, #8192	; 0x2000
   18870:	cmp	r3, #0
   18874:	bne	18838 <__assert_fail@plt+0x76fc>
   18878:	ldrb	r3, [fp, #-13]
   1887c:	cmp	r3, #45	; 0x2d
   18880:	bne	1888c <__assert_fail@plt+0x7750>
   18884:	mov	r3, #4
   18888:	b	18dc4 <__assert_fail@plt+0x7c88>
   1888c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18890:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18894:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18898:	bl	11010 <strtoul@plt>
   1889c:	mov	r3, r0
   188a0:	str	r3, [fp, #-40]	; 0xffffffd8
   188a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188a8:	ldr	r2, [r3]
   188ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   188b0:	cmp	r2, r3
   188b4:	bne	18910 <__assert_fail@plt+0x77d4>
   188b8:	ldr	r3, [fp, #4]
   188bc:	cmp	r3, #0
   188c0:	beq	18908 <__assert_fail@plt+0x77cc>
   188c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188c8:	ldr	r3, [r3]
   188cc:	ldrb	r3, [r3]
   188d0:	cmp	r3, #0
   188d4:	beq	18908 <__assert_fail@plt+0x77cc>
   188d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188dc:	ldr	r3, [r3]
   188e0:	ldrb	r3, [r3]
   188e4:	mov	r1, r3
   188e8:	ldr	r0, [fp, #4]
   188ec:	bl	11028 <strchr@plt>
   188f0:	mov	r3, r0
   188f4:	cmp	r3, #0
   188f8:	beq	18908 <__assert_fail@plt+0x77cc>
   188fc:	mov	r3, #1
   18900:	str	r3, [fp, #-40]	; 0xffffffd8
   18904:	b	18948 <__assert_fail@plt+0x780c>
   18908:	mov	r3, #4
   1890c:	b	18dc4 <__assert_fail@plt+0x7c88>
   18910:	bl	11040 <__errno_location@plt>
   18914:	mov	r3, r0
   18918:	ldr	r3, [r3]
   1891c:	cmp	r3, #0
   18920:	beq	18948 <__assert_fail@plt+0x780c>
   18924:	bl	11040 <__errno_location@plt>
   18928:	mov	r3, r0
   1892c:	ldr	r3, [r3]
   18930:	cmp	r3, #34	; 0x22
   18934:	beq	18940 <__assert_fail@plt+0x7804>
   18938:	mov	r3, #4
   1893c:	b	18dc4 <__assert_fail@plt+0x7c88>
   18940:	mov	r3, #1
   18944:	str	r3, [fp, #-8]
   18948:	ldr	r3, [fp, #4]
   1894c:	cmp	r3, #0
   18950:	bne	18968 <__assert_fail@plt+0x782c>
   18954:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18958:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1895c:	str	r2, [r3]
   18960:	ldr	r3, [fp, #-8]
   18964:	b	18dc4 <__assert_fail@plt+0x7c88>
   18968:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1896c:	ldr	r3, [r3]
   18970:	ldrb	r3, [r3]
   18974:	cmp	r3, #0
   18978:	beq	18db4 <__assert_fail@plt+0x7c78>
   1897c:	mov	r3, #1024	; 0x400
   18980:	str	r3, [fp, #-20]	; 0xffffffec
   18984:	mov	r3, #1
   18988:	str	r3, [fp, #-24]	; 0xffffffe8
   1898c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18990:	ldr	r3, [r3]
   18994:	ldrb	r3, [r3]
   18998:	mov	r1, r3
   1899c:	ldr	r0, [fp, #4]
   189a0:	bl	11028 <strchr@plt>
   189a4:	mov	r3, r0
   189a8:	cmp	r3, #0
   189ac:	bne	189c8 <__assert_fail@plt+0x788c>
   189b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   189b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   189b8:	str	r2, [r3]
   189bc:	ldr	r3, [fp, #-8]
   189c0:	orr	r3, r3, #2
   189c4:	b	18dc4 <__assert_fail@plt+0x7c88>
   189c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   189cc:	ldr	r3, [r3]
   189d0:	ldrb	r3, [r3]
   189d4:	sub	r3, r3, #69	; 0x45
   189d8:	cmp	r3, #47	; 0x2f
   189dc:	ldrls	pc, [pc, r3, lsl #2]
   189e0:	b	18b2c <__assert_fail@plt+0x79f0>
   189e4:	andeq	r8, r1, r4, lsr #21
   189e8:	andeq	r8, r1, ip, lsr #22
   189ec:	andeq	r8, r1, r4, lsr #21
   189f0:	andeq	r8, r1, ip, lsr #22
   189f4:	andeq	r8, r1, ip, lsr #22
   189f8:	andeq	r8, r1, ip, lsr #22
   189fc:	andeq	r8, r1, r4, lsr #21
   18a00:	andeq	r8, r1, ip, lsr #22
   18a04:	andeq	r8, r1, r4, lsr #21
   18a08:	andeq	r8, r1, ip, lsr #22
   18a0c:	andeq	r8, r1, ip, lsr #22
   18a10:	andeq	r8, r1, r4, lsr #21
   18a14:	andeq	r8, r1, ip, lsr #22
   18a18:	andeq	r8, r1, ip, lsr #22
   18a1c:	andeq	r8, r1, ip, lsr #22
   18a20:	andeq	r8, r1, r4, lsr #21
   18a24:	andeq	r8, r1, ip, lsr #22
   18a28:	andeq	r8, r1, ip, lsr #22
   18a2c:	andeq	r8, r1, ip, lsr #22
   18a30:	andeq	r8, r1, ip, lsr #22
   18a34:	andeq	r8, r1, r4, lsr #21
   18a38:	andeq	r8, r1, r4, lsr #21
   18a3c:	andeq	r8, r1, ip, lsr #22
   18a40:	andeq	r8, r1, ip, lsr #22
   18a44:	andeq	r8, r1, ip, lsr #22
   18a48:	andeq	r8, r1, ip, lsr #22
   18a4c:	andeq	r8, r1, ip, lsr #22
   18a50:	andeq	r8, r1, ip, lsr #22
   18a54:	andeq	r8, r1, ip, lsr #22
   18a58:	andeq	r8, r1, ip, lsr #22
   18a5c:	andeq	r8, r1, ip, lsr #22
   18a60:	andeq	r8, r1, ip, lsr #22
   18a64:	andeq	r8, r1, ip, lsr #22
   18a68:	andeq	r8, r1, ip, lsr #22
   18a6c:	andeq	r8, r1, r4, lsr #21
   18a70:	andeq	r8, r1, ip, lsr #22
   18a74:	andeq	r8, r1, ip, lsr #22
   18a78:	andeq	r8, r1, ip, lsr #22
   18a7c:	andeq	r8, r1, r4, lsr #21
   18a80:	andeq	r8, r1, ip, lsr #22
   18a84:	andeq	r8, r1, r4, lsr #21
   18a88:	andeq	r8, r1, ip, lsr #22
   18a8c:	andeq	r8, r1, ip, lsr #22
   18a90:	andeq	r8, r1, ip, lsr #22
   18a94:	andeq	r8, r1, ip, lsr #22
   18a98:	andeq	r8, r1, ip, lsr #22
   18a9c:	andeq	r8, r1, ip, lsr #22
   18aa0:	andeq	r8, r1, r4, lsr #21
   18aa4:	mov	r1, #48	; 0x30
   18aa8:	ldr	r0, [fp, #4]
   18aac:	bl	11028 <strchr@plt>
   18ab0:	mov	r3, r0
   18ab4:	cmp	r3, #0
   18ab8:	beq	18b2c <__assert_fail@plt+0x79f0>
   18abc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ac0:	ldr	r3, [r3]
   18ac4:	add	r3, r3, #1
   18ac8:	ldrb	r3, [r3]
   18acc:	cmp	r3, #68	; 0x44
   18ad0:	beq	18b10 <__assert_fail@plt+0x79d4>
   18ad4:	cmp	r3, #105	; 0x69
   18ad8:	beq	18ae8 <__assert_fail@plt+0x79ac>
   18adc:	cmp	r3, #66	; 0x42
   18ae0:	beq	18b10 <__assert_fail@plt+0x79d4>
   18ae4:	b	18b2c <__assert_fail@plt+0x79f0>
   18ae8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18aec:	ldr	r3, [r3]
   18af0:	add	r3, r3, #2
   18af4:	ldrb	r3, [r3]
   18af8:	cmp	r3, #66	; 0x42
   18afc:	bne	18b28 <__assert_fail@plt+0x79ec>
   18b00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b04:	add	r3, r3, #2
   18b08:	str	r3, [fp, #-24]	; 0xffffffe8
   18b0c:	b	18b28 <__assert_fail@plt+0x79ec>
   18b10:	mov	r3, #1000	; 0x3e8
   18b14:	str	r3, [fp, #-20]	; 0xffffffec
   18b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b1c:	add	r3, r3, #1
   18b20:	str	r3, [fp, #-24]	; 0xffffffe8
   18b24:	b	18b2c <__assert_fail@plt+0x79f0>
   18b28:	nop			; (mov r0, r0)
   18b2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18b30:	ldr	r3, [r3]
   18b34:	ldrb	r3, [r3]
   18b38:	sub	r3, r3, #66	; 0x42
   18b3c:	cmp	r3, #53	; 0x35
   18b40:	ldrls	pc, [pc, r3, lsl #2]
   18b44:	b	18d54 <__assert_fail@plt+0x7c18>
   18b48:	andeq	r8, r1, r8, lsr ip
   18b4c:	andeq	r8, r1, r4, asr sp
   18b50:	andeq	r8, r1, r4, asr sp
   18b54:	andeq	r8, r1, ip, asr ip
   18b58:	andeq	r8, r1, r4, asr sp
   18b5c:	andeq	r8, r1, r8, ror ip
   18b60:	andeq	r8, r1, r4, asr sp
   18b64:	andeq	r8, r1, r4, asr sp
   18b68:	andeq	r8, r1, r4, asr sp
   18b6c:	muleq	r1, r4, ip
   18b70:	andeq	r8, r1, r4, asr sp
   18b74:			; <UNDEFINED> instruction: 0x00018cb0
   18b78:	andeq	r8, r1, r4, asr sp
   18b7c:	andeq	r8, r1, r4, asr sp
   18b80:	andeq	r8, r1, ip, asr #25
   18b84:	andeq	r8, r1, r4, asr sp
   18b88:	andeq	r8, r1, r4, asr sp
   18b8c:	andeq	r8, r1, r4, asr sp
   18b90:	andeq	r8, r1, r8, ror #25
   18b94:	andeq	r8, r1, r4, asr sp
   18b98:	andeq	r8, r1, r4, asr sp
   18b9c:	andeq	r8, r1, r4, asr sp
   18ba0:	andeq	r8, r1, r4, asr sp
   18ba4:	andeq	r8, r1, ip, lsl sp
   18ba8:	andeq	r8, r1, r8, lsr sp
   18bac:	andeq	r8, r1, r4, asr sp
   18bb0:	andeq	r8, r1, r4, asr sp
   18bb4:	andeq	r8, r1, r4, asr sp
   18bb8:	andeq	r8, r1, r4, asr sp
   18bbc:	andeq	r8, r1, r4, asr sp
   18bc0:	andeq	r8, r1, r4, asr sp
   18bc4:	andeq	r8, r1, r4, asr sp
   18bc8:	andeq	r8, r1, r0, lsr #24
   18bcc:	andeq	r8, r1, r0, asr ip
   18bd0:	andeq	r8, r1, r4, asr sp
   18bd4:	andeq	r8, r1, r4, asr sp
   18bd8:	andeq	r8, r1, r4, asr sp
   18bdc:	andeq	r8, r1, r8, ror ip
   18be0:	andeq	r8, r1, r4, asr sp
   18be4:	andeq	r8, r1, r4, asr sp
   18be8:	andeq	r8, r1, r4, asr sp
   18bec:	muleq	r1, r4, ip
   18bf0:	andeq	r8, r1, r4, asr sp
   18bf4:			; <UNDEFINED> instruction: 0x00018cb0
   18bf8:	andeq	r8, r1, r4, asr sp
   18bfc:	andeq	r8, r1, r4, asr sp
   18c00:	andeq	r8, r1, r4, asr sp
   18c04:	andeq	r8, r1, r4, asr sp
   18c08:	andeq	r8, r1, r4, asr sp
   18c0c:	andeq	r8, r1, r4, asr sp
   18c10:	andeq	r8, r1, r8, ror #25
   18c14:	andeq	r8, r1, r4, asr sp
   18c18:	andeq	r8, r1, r4, asr sp
   18c1c:	andeq	r8, r1, r4, lsl #26
   18c20:	sub	r3, fp, #40	; 0x28
   18c24:	mov	r1, #512	; 0x200
   18c28:	mov	r0, r3
   18c2c:	bl	18634 <__assert_fail@plt+0x74f8>
   18c30:	str	r0, [fp, #-28]	; 0xffffffe4
   18c34:	b	18d6c <__assert_fail@plt+0x7c30>
   18c38:	sub	r3, fp, #40	; 0x28
   18c3c:	mov	r1, #1024	; 0x400
   18c40:	mov	r0, r3
   18c44:	bl	18634 <__assert_fail@plt+0x74f8>
   18c48:	str	r0, [fp, #-28]	; 0xffffffe4
   18c4c:	b	18d6c <__assert_fail@plt+0x7c30>
   18c50:	mov	r3, #0
   18c54:	str	r3, [fp, #-28]	; 0xffffffe4
   18c58:	b	18d6c <__assert_fail@plt+0x7c30>
   18c5c:	sub	r3, fp, #40	; 0x28
   18c60:	mov	r2, #6
   18c64:	ldr	r1, [fp, #-20]	; 0xffffffec
   18c68:	mov	r0, r3
   18c6c:	bl	18740 <__assert_fail@plt+0x7604>
   18c70:	str	r0, [fp, #-28]	; 0xffffffe4
   18c74:	b	18d6c <__assert_fail@plt+0x7c30>
   18c78:	sub	r3, fp, #40	; 0x28
   18c7c:	mov	r2, #3
   18c80:	ldr	r1, [fp, #-20]	; 0xffffffec
   18c84:	mov	r0, r3
   18c88:	bl	18740 <__assert_fail@plt+0x7604>
   18c8c:	str	r0, [fp, #-28]	; 0xffffffe4
   18c90:	b	18d6c <__assert_fail@plt+0x7c30>
   18c94:	sub	r3, fp, #40	; 0x28
   18c98:	mov	r2, #1
   18c9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18ca0:	mov	r0, r3
   18ca4:	bl	18740 <__assert_fail@plt+0x7604>
   18ca8:	str	r0, [fp, #-28]	; 0xffffffe4
   18cac:	b	18d6c <__assert_fail@plt+0x7c30>
   18cb0:	sub	r3, fp, #40	; 0x28
   18cb4:	mov	r2, #2
   18cb8:	ldr	r1, [fp, #-20]	; 0xffffffec
   18cbc:	mov	r0, r3
   18cc0:	bl	18740 <__assert_fail@plt+0x7604>
   18cc4:	str	r0, [fp, #-28]	; 0xffffffe4
   18cc8:	b	18d6c <__assert_fail@plt+0x7c30>
   18ccc:	sub	r3, fp, #40	; 0x28
   18cd0:	mov	r2, #5
   18cd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   18cd8:	mov	r0, r3
   18cdc:	bl	18740 <__assert_fail@plt+0x7604>
   18ce0:	str	r0, [fp, #-28]	; 0xffffffe4
   18ce4:	b	18d6c <__assert_fail@plt+0x7c30>
   18ce8:	sub	r3, fp, #40	; 0x28
   18cec:	mov	r2, #4
   18cf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   18cf4:	mov	r0, r3
   18cf8:	bl	18740 <__assert_fail@plt+0x7604>
   18cfc:	str	r0, [fp, #-28]	; 0xffffffe4
   18d00:	b	18d6c <__assert_fail@plt+0x7c30>
   18d04:	sub	r3, fp, #40	; 0x28
   18d08:	mov	r1, #2
   18d0c:	mov	r0, r3
   18d10:	bl	18634 <__assert_fail@plt+0x74f8>
   18d14:	str	r0, [fp, #-28]	; 0xffffffe4
   18d18:	b	18d6c <__assert_fail@plt+0x7c30>
   18d1c:	sub	r3, fp, #40	; 0x28
   18d20:	mov	r2, #8
   18d24:	ldr	r1, [fp, #-20]	; 0xffffffec
   18d28:	mov	r0, r3
   18d2c:	bl	18740 <__assert_fail@plt+0x7604>
   18d30:	str	r0, [fp, #-28]	; 0xffffffe4
   18d34:	b	18d6c <__assert_fail@plt+0x7c30>
   18d38:	sub	r3, fp, #40	; 0x28
   18d3c:	mov	r2, #7
   18d40:	ldr	r1, [fp, #-20]	; 0xffffffec
   18d44:	mov	r0, r3
   18d48:	bl	18740 <__assert_fail@plt+0x7604>
   18d4c:	str	r0, [fp, #-28]	; 0xffffffe4
   18d50:	b	18d6c <__assert_fail@plt+0x7c30>
   18d54:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18d58:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18d5c:	str	r2, [r3]
   18d60:	ldr	r3, [fp, #-8]
   18d64:	orr	r3, r3, #2
   18d68:	b	18dc4 <__assert_fail@plt+0x7c88>
   18d6c:	ldr	r2, [fp, #-8]
   18d70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d74:	orr	r3, r2, r3
   18d78:	str	r3, [fp, #-8]
   18d7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d80:	ldr	r2, [r3]
   18d84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d88:	add	r2, r2, r3
   18d8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d90:	str	r2, [r3]
   18d94:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d98:	ldr	r3, [r3]
   18d9c:	ldrb	r3, [r3]
   18da0:	cmp	r3, #0
   18da4:	beq	18db4 <__assert_fail@plt+0x7c78>
   18da8:	ldr	r3, [fp, #-8]
   18dac:	orr	r3, r3, #2
   18db0:	str	r3, [fp, #-8]
   18db4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18db8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18dbc:	str	r2, [r3]
   18dc0:	ldr	r3, [fp, #-8]
   18dc4:	mov	r0, r3
   18dc8:	sub	sp, fp, #4
   18dcc:	pop	{fp, pc}
   18dd0:	andeq	ip, r1, r8, lsr #2
   18dd4:	strdeq	ip, [r1], -r0
   18dd8:	andeq	ip, r1, r0, lsl #2
   18ddc:	push	{fp, lr}
   18de0:	add	fp, sp, #4
   18de4:	sub	sp, sp, #16
   18de8:	str	r0, [fp, #-16]
   18dec:	str	r1, [fp, #-20]	; 0xffffffec
   18df0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18df4:	cmp	r3, #0
   18df8:	bge	18e34 <__assert_fail@plt+0x7cf8>
   18dfc:	ldr	r1, [fp, #-20]	; 0xffffffec
   18e00:	mov	r0, #0
   18e04:	bl	1a9bc <__assert_fail@plt+0x9880>
   18e08:	mov	r3, r0
   18e0c:	mov	r0, r3
   18e10:	asr	r1, r0, #31
   18e14:	ldr	r3, [fp, #-16]
   18e18:	ldrd	r2, [r3]
   18e1c:	cmp	r1, r3
   18e20:	cmpeq	r0, r2
   18e24:	movcc	r3, #1
   18e28:	movcs	r3, #0
   18e2c:	uxtb	r3, r3
   18e30:	b	18e90 <__assert_fail@plt+0x7d54>
   18e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e38:	cmp	r3, #0
   18e3c:	beq	18e84 <__assert_fail@plt+0x7d48>
   18e40:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e44:	mov	r2, r3
   18e48:	asr	r3, r2, #31
   18e4c:	mvn	r0, #0
   18e50:	mvn	r1, #0
   18e54:	bl	1abfc <__assert_fail@plt+0x9ac0>
   18e58:	mov	r2, r0
   18e5c:	mov	r3, r1
   18e60:	mov	r0, r2
   18e64:	mov	r1, r3
   18e68:	ldr	r3, [fp, #-16]
   18e6c:	ldrd	r2, [r3]
   18e70:	cmp	r1, r3
   18e74:	cmpeq	r0, r2
   18e78:	bcs	18e84 <__assert_fail@plt+0x7d48>
   18e7c:	mov	r3, #1
   18e80:	b	18e88 <__assert_fail@plt+0x7d4c>
   18e84:	mov	r3, #0
   18e88:	and	r3, r3, #1
   18e8c:	uxtb	r3, r3
   18e90:	cmp	r3, #0
   18e94:	beq	18ed0 <__assert_fail@plt+0x7d94>
   18e98:	ldr	r3, [fp, #-16]
   18e9c:	ldrd	r0, [r3]
   18ea0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18ea4:	mov	r2, r3
   18ea8:	asr	r3, r2, #31
   18eac:	mul	lr, r2, r1
   18eb0:	mul	ip, r0, r3
   18eb4:	add	ip, lr, ip
   18eb8:	umull	r2, r3, r0, r2
   18ebc:	add	r1, ip, r3
   18ec0:	mov	r3, r1
   18ec4:	strd	r2, [fp, #-12]
   18ec8:	mov	r3, #1
   18ecc:	b	18f04 <__assert_fail@plt+0x7dc8>
   18ed0:	ldr	r3, [fp, #-16]
   18ed4:	ldrd	r0, [r3]
   18ed8:	ldr	r3, [fp, #-20]	; 0xffffffec
   18edc:	mov	r2, r3
   18ee0:	asr	r3, r2, #31
   18ee4:	mul	lr, r2, r1
   18ee8:	mul	ip, r0, r3
   18eec:	add	ip, lr, ip
   18ef0:	umull	r2, r3, r0, r2
   18ef4:	add	r1, ip, r3
   18ef8:	mov	r3, r1
   18efc:	strd	r2, [fp, #-12]
   18f00:	mov	r3, #0
   18f04:	cmp	r3, #0
   18f08:	beq	18f24 <__assert_fail@plt+0x7de8>
   18f0c:	ldr	r1, [fp, #-16]
   18f10:	mvn	r2, #0
   18f14:	mvn	r3, #0
   18f18:	strd	r2, [r1]
   18f1c:	mov	r3, #1
   18f20:	b	18f34 <__assert_fail@plt+0x7df8>
   18f24:	ldrd	r2, [fp, #-12]
   18f28:	ldr	r1, [fp, #-16]
   18f2c:	strd	r2, [r1]
   18f30:	mov	r3, #0
   18f34:	mov	r0, r3
   18f38:	sub	sp, fp, #4
   18f3c:	pop	{fp, pc}
   18f40:	push	{fp, lr}
   18f44:	add	fp, sp, #4
   18f48:	sub	sp, sp, #24
   18f4c:	str	r0, [fp, #-16]
   18f50:	str	r1, [fp, #-20]	; 0xffffffec
   18f54:	str	r2, [fp, #-24]	; 0xffffffe8
   18f58:	mov	r3, #0
   18f5c:	str	r3, [fp, #-8]
   18f60:	b	18f80 <__assert_fail@plt+0x7e44>
   18f64:	ldr	r1, [fp, #-20]	; 0xffffffec
   18f68:	ldr	r0, [fp, #-16]
   18f6c:	bl	18ddc <__assert_fail@plt+0x7ca0>
   18f70:	mov	r2, r0
   18f74:	ldr	r3, [fp, #-8]
   18f78:	orr	r3, r3, r2
   18f7c:	str	r3, [fp, #-8]
   18f80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18f84:	sub	r2, r3, #1
   18f88:	str	r2, [fp, #-24]	; 0xffffffe8
   18f8c:	cmp	r3, #0
   18f90:	bne	18f64 <__assert_fail@plt+0x7e28>
   18f94:	ldr	r3, [fp, #-8]
   18f98:	mov	r0, r3
   18f9c:	sub	sp, fp, #4
   18fa0:	pop	{fp, pc}
   18fa4:	push	{fp, lr}
   18fa8:	add	fp, sp, #4
   18fac:	sub	sp, sp, #56	; 0x38
   18fb0:	str	r0, [fp, #-48]	; 0xffffffd0
   18fb4:	str	r1, [fp, #-52]	; 0xffffffcc
   18fb8:	str	r2, [fp, #-56]	; 0xffffffc8
   18fbc:	str	r3, [fp, #-60]	; 0xffffffc4
   18fc0:	mov	r3, #0
   18fc4:	str	r3, [fp, #-8]
   18fc8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18fcc:	cmp	r3, #0
   18fd0:	blt	18fe0 <__assert_fail@plt+0x7ea4>
   18fd4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18fd8:	cmp	r3, #36	; 0x24
   18fdc:	ble	18ff4 <__assert_fail@plt+0x7eb8>
   18fe0:	ldr	r3, [pc, #1520]	; 195d8 <__assert_fail@plt+0x849c>
   18fe4:	mov	r2, #85	; 0x55
   18fe8:	ldr	r1, [pc, #1516]	; 195dc <__assert_fail@plt+0x84a0>
   18fec:	ldr	r0, [pc, #1516]	; 195e0 <__assert_fail@plt+0x84a4>
   18ff0:	bl	1113c <__assert_fail@plt>
   18ff4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18ff8:	cmp	r3, #0
   18ffc:	bne	19008 <__assert_fail@plt+0x7ecc>
   19000:	sub	r3, fp, #36	; 0x24
   19004:	b	1900c <__assert_fail@plt+0x7ed0>
   19008:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1900c:	str	r3, [fp, #-32]	; 0xffffffe0
   19010:	bl	11040 <__errno_location@plt>
   19014:	mov	r2, r0
   19018:	mov	r3, #0
   1901c:	str	r3, [r2]
   19020:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19024:	str	r3, [fp, #-12]
   19028:	ldr	r3, [fp, #-12]
   1902c:	ldrb	r3, [r3]
   19030:	strb	r3, [fp, #-13]
   19034:	b	19050 <__assert_fail@plt+0x7f14>
   19038:	ldr	r3, [fp, #-12]
   1903c:	add	r3, r3, #1
   19040:	str	r3, [fp, #-12]
   19044:	ldr	r3, [fp, #-12]
   19048:	ldrb	r3, [r3]
   1904c:	strb	r3, [fp, #-13]
   19050:	bl	10fec <__ctype_b_loc@plt>
   19054:	mov	r3, r0
   19058:	ldr	r2, [r3]
   1905c:	ldrb	r3, [fp, #-13]
   19060:	lsl	r3, r3, #1
   19064:	add	r3, r2, r3
   19068:	ldrh	r3, [r3]
   1906c:	and	r3, r3, #8192	; 0x2000
   19070:	cmp	r3, #0
   19074:	bne	19038 <__assert_fail@plt+0x7efc>
   19078:	ldrb	r3, [fp, #-13]
   1907c:	cmp	r3, #45	; 0x2d
   19080:	bne	1908c <__assert_fail@plt+0x7f50>
   19084:	mov	r3, #4
   19088:	b	195cc <__assert_fail@plt+0x8490>
   1908c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19090:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19094:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19098:	bl	11070 <strtoumax@plt>
   1909c:	mov	r2, r0
   190a0:	mov	r3, r1
   190a4:	strd	r2, [fp, #-44]	; 0xffffffd4
   190a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190ac:	ldr	r2, [r3]
   190b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   190b4:	cmp	r2, r3
   190b8:	bne	19118 <__assert_fail@plt+0x7fdc>
   190bc:	ldr	r3, [fp, #4]
   190c0:	cmp	r3, #0
   190c4:	beq	19110 <__assert_fail@plt+0x7fd4>
   190c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190cc:	ldr	r3, [r3]
   190d0:	ldrb	r3, [r3]
   190d4:	cmp	r3, #0
   190d8:	beq	19110 <__assert_fail@plt+0x7fd4>
   190dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190e0:	ldr	r3, [r3]
   190e4:	ldrb	r3, [r3]
   190e8:	mov	r1, r3
   190ec:	ldr	r0, [fp, #4]
   190f0:	bl	11028 <strchr@plt>
   190f4:	mov	r3, r0
   190f8:	cmp	r3, #0
   190fc:	beq	19110 <__assert_fail@plt+0x7fd4>
   19100:	mov	r2, #1
   19104:	mov	r3, #0
   19108:	strd	r2, [fp, #-44]	; 0xffffffd4
   1910c:	b	19150 <__assert_fail@plt+0x8014>
   19110:	mov	r3, #4
   19114:	b	195cc <__assert_fail@plt+0x8490>
   19118:	bl	11040 <__errno_location@plt>
   1911c:	mov	r3, r0
   19120:	ldr	r3, [r3]
   19124:	cmp	r3, #0
   19128:	beq	19150 <__assert_fail@plt+0x8014>
   1912c:	bl	11040 <__errno_location@plt>
   19130:	mov	r3, r0
   19134:	ldr	r3, [r3]
   19138:	cmp	r3, #34	; 0x22
   1913c:	beq	19148 <__assert_fail@plt+0x800c>
   19140:	mov	r3, #4
   19144:	b	195cc <__assert_fail@plt+0x8490>
   19148:	mov	r3, #1
   1914c:	str	r3, [fp, #-8]
   19150:	ldr	r3, [fp, #4]
   19154:	cmp	r3, #0
   19158:	bne	19170 <__assert_fail@plt+0x8034>
   1915c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   19160:	ldr	r1, [fp, #-60]	; 0xffffffc4
   19164:	strd	r2, [r1]
   19168:	ldr	r3, [fp, #-8]
   1916c:	b	195cc <__assert_fail@plt+0x8490>
   19170:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19174:	ldr	r3, [r3]
   19178:	ldrb	r3, [r3]
   1917c:	cmp	r3, #0
   19180:	beq	195bc <__assert_fail@plt+0x8480>
   19184:	mov	r3, #1024	; 0x400
   19188:	str	r3, [fp, #-20]	; 0xffffffec
   1918c:	mov	r3, #1
   19190:	str	r3, [fp, #-24]	; 0xffffffe8
   19194:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19198:	ldr	r3, [r3]
   1919c:	ldrb	r3, [r3]
   191a0:	mov	r1, r3
   191a4:	ldr	r0, [fp, #4]
   191a8:	bl	11028 <strchr@plt>
   191ac:	mov	r3, r0
   191b0:	cmp	r3, #0
   191b4:	bne	191d0 <__assert_fail@plt+0x8094>
   191b8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   191bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   191c0:	strd	r2, [r1]
   191c4:	ldr	r3, [fp, #-8]
   191c8:	orr	r3, r3, #2
   191cc:	b	195cc <__assert_fail@plt+0x8490>
   191d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   191d4:	ldr	r3, [r3]
   191d8:	ldrb	r3, [r3]
   191dc:	sub	r3, r3, #69	; 0x45
   191e0:	cmp	r3, #47	; 0x2f
   191e4:	ldrls	pc, [pc, r3, lsl #2]
   191e8:	b	19334 <__assert_fail@plt+0x81f8>
   191ec:	andeq	r9, r1, ip, lsr #5
   191f0:	andeq	r9, r1, r4, lsr r3
   191f4:	andeq	r9, r1, ip, lsr #5
   191f8:	andeq	r9, r1, r4, lsr r3
   191fc:	andeq	r9, r1, r4, lsr r3
   19200:	andeq	r9, r1, r4, lsr r3
   19204:	andeq	r9, r1, ip, lsr #5
   19208:	andeq	r9, r1, r4, lsr r3
   1920c:	andeq	r9, r1, ip, lsr #5
   19210:	andeq	r9, r1, r4, lsr r3
   19214:	andeq	r9, r1, r4, lsr r3
   19218:	andeq	r9, r1, ip, lsr #5
   1921c:	andeq	r9, r1, r4, lsr r3
   19220:	andeq	r9, r1, r4, lsr r3
   19224:	andeq	r9, r1, r4, lsr r3
   19228:	andeq	r9, r1, ip, lsr #5
   1922c:	andeq	r9, r1, r4, lsr r3
   19230:	andeq	r9, r1, r4, lsr r3
   19234:	andeq	r9, r1, r4, lsr r3
   19238:	andeq	r9, r1, r4, lsr r3
   1923c:	andeq	r9, r1, ip, lsr #5
   19240:	andeq	r9, r1, ip, lsr #5
   19244:	andeq	r9, r1, r4, lsr r3
   19248:	andeq	r9, r1, r4, lsr r3
   1924c:	andeq	r9, r1, r4, lsr r3
   19250:	andeq	r9, r1, r4, lsr r3
   19254:	andeq	r9, r1, r4, lsr r3
   19258:	andeq	r9, r1, r4, lsr r3
   1925c:	andeq	r9, r1, r4, lsr r3
   19260:	andeq	r9, r1, r4, lsr r3
   19264:	andeq	r9, r1, r4, lsr r3
   19268:	andeq	r9, r1, r4, lsr r3
   1926c:	andeq	r9, r1, r4, lsr r3
   19270:	andeq	r9, r1, r4, lsr r3
   19274:	andeq	r9, r1, ip, lsr #5
   19278:	andeq	r9, r1, r4, lsr r3
   1927c:	andeq	r9, r1, r4, lsr r3
   19280:	andeq	r9, r1, r4, lsr r3
   19284:	andeq	r9, r1, ip, lsr #5
   19288:	andeq	r9, r1, r4, lsr r3
   1928c:	andeq	r9, r1, ip, lsr #5
   19290:	andeq	r9, r1, r4, lsr r3
   19294:	andeq	r9, r1, r4, lsr r3
   19298:	andeq	r9, r1, r4, lsr r3
   1929c:	andeq	r9, r1, r4, lsr r3
   192a0:	andeq	r9, r1, r4, lsr r3
   192a4:	andeq	r9, r1, r4, lsr r3
   192a8:	andeq	r9, r1, ip, lsr #5
   192ac:	mov	r1, #48	; 0x30
   192b0:	ldr	r0, [fp, #4]
   192b4:	bl	11028 <strchr@plt>
   192b8:	mov	r3, r0
   192bc:	cmp	r3, #0
   192c0:	beq	19334 <__assert_fail@plt+0x81f8>
   192c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   192c8:	ldr	r3, [r3]
   192cc:	add	r3, r3, #1
   192d0:	ldrb	r3, [r3]
   192d4:	cmp	r3, #68	; 0x44
   192d8:	beq	19318 <__assert_fail@plt+0x81dc>
   192dc:	cmp	r3, #105	; 0x69
   192e0:	beq	192f0 <__assert_fail@plt+0x81b4>
   192e4:	cmp	r3, #66	; 0x42
   192e8:	beq	19318 <__assert_fail@plt+0x81dc>
   192ec:	b	19334 <__assert_fail@plt+0x81f8>
   192f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   192f4:	ldr	r3, [r3]
   192f8:	add	r3, r3, #2
   192fc:	ldrb	r3, [r3]
   19300:	cmp	r3, #66	; 0x42
   19304:	bne	19330 <__assert_fail@plt+0x81f4>
   19308:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1930c:	add	r3, r3, #2
   19310:	str	r3, [fp, #-24]	; 0xffffffe8
   19314:	b	19330 <__assert_fail@plt+0x81f4>
   19318:	mov	r3, #1000	; 0x3e8
   1931c:	str	r3, [fp, #-20]	; 0xffffffec
   19320:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19324:	add	r3, r3, #1
   19328:	str	r3, [fp, #-24]	; 0xffffffe8
   1932c:	b	19334 <__assert_fail@plt+0x81f8>
   19330:	nop			; (mov r0, r0)
   19334:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19338:	ldr	r3, [r3]
   1933c:	ldrb	r3, [r3]
   19340:	sub	r3, r3, #66	; 0x42
   19344:	cmp	r3, #53	; 0x35
   19348:	ldrls	pc, [pc, r3, lsl #2]
   1934c:	b	1955c <__assert_fail@plt+0x8420>
   19350:	andeq	r9, r1, r0, asr #8
   19354:	andeq	r9, r1, ip, asr r5
   19358:	andeq	r9, r1, ip, asr r5
   1935c:	andeq	r9, r1, r4, ror #8
   19360:	andeq	r9, r1, ip, asr r5
   19364:	andeq	r9, r1, r0, lsl #9
   19368:	andeq	r9, r1, ip, asr r5
   1936c:	andeq	r9, r1, ip, asr r5
   19370:	andeq	r9, r1, ip, asr r5
   19374:	muleq	r1, ip, r4
   19378:	andeq	r9, r1, ip, asr r5
   1937c:			; <UNDEFINED> instruction: 0x000194b8
   19380:	andeq	r9, r1, ip, asr r5
   19384:	andeq	r9, r1, ip, asr r5
   19388:	ldrdeq	r9, [r1], -r4
   1938c:	andeq	r9, r1, ip, asr r5
   19390:	andeq	r9, r1, ip, asr r5
   19394:	andeq	r9, r1, ip, asr r5
   19398:	strdeq	r9, [r1], -r0
   1939c:	andeq	r9, r1, ip, asr r5
   193a0:	andeq	r9, r1, ip, asr r5
   193a4:	andeq	r9, r1, ip, asr r5
   193a8:	andeq	r9, r1, ip, asr r5
   193ac:	andeq	r9, r1, r4, lsr #10
   193b0:	andeq	r9, r1, r0, asr #10
   193b4:	andeq	r9, r1, ip, asr r5
   193b8:	andeq	r9, r1, ip, asr r5
   193bc:	andeq	r9, r1, ip, asr r5
   193c0:	andeq	r9, r1, ip, asr r5
   193c4:	andeq	r9, r1, ip, asr r5
   193c8:	andeq	r9, r1, ip, asr r5
   193cc:	andeq	r9, r1, ip, asr r5
   193d0:	andeq	r9, r1, r8, lsr #8
   193d4:	andeq	r9, r1, r8, asr r4
   193d8:	andeq	r9, r1, ip, asr r5
   193dc:	andeq	r9, r1, ip, asr r5
   193e0:	andeq	r9, r1, ip, asr r5
   193e4:	andeq	r9, r1, r0, lsl #9
   193e8:	andeq	r9, r1, ip, asr r5
   193ec:	andeq	r9, r1, ip, asr r5
   193f0:	andeq	r9, r1, ip, asr r5
   193f4:	muleq	r1, ip, r4
   193f8:	andeq	r9, r1, ip, asr r5
   193fc:			; <UNDEFINED> instruction: 0x000194b8
   19400:	andeq	r9, r1, ip, asr r5
   19404:	andeq	r9, r1, ip, asr r5
   19408:	andeq	r9, r1, ip, asr r5
   1940c:	andeq	r9, r1, ip, asr r5
   19410:	andeq	r9, r1, ip, asr r5
   19414:	andeq	r9, r1, ip, asr r5
   19418:	strdeq	r9, [r1], -r0
   1941c:	andeq	r9, r1, ip, asr r5
   19420:	andeq	r9, r1, ip, asr r5
   19424:	andeq	r9, r1, ip, lsl #10
   19428:	sub	r3, fp, #44	; 0x2c
   1942c:	mov	r1, #512	; 0x200
   19430:	mov	r0, r3
   19434:	bl	18ddc <__assert_fail@plt+0x7ca0>
   19438:	str	r0, [fp, #-28]	; 0xffffffe4
   1943c:	b	19574 <__assert_fail@plt+0x8438>
   19440:	sub	r3, fp, #44	; 0x2c
   19444:	mov	r1, #1024	; 0x400
   19448:	mov	r0, r3
   1944c:	bl	18ddc <__assert_fail@plt+0x7ca0>
   19450:	str	r0, [fp, #-28]	; 0xffffffe4
   19454:	b	19574 <__assert_fail@plt+0x8438>
   19458:	mov	r3, #0
   1945c:	str	r3, [fp, #-28]	; 0xffffffe4
   19460:	b	19574 <__assert_fail@plt+0x8438>
   19464:	sub	r3, fp, #44	; 0x2c
   19468:	mov	r2, #6
   1946c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19470:	mov	r0, r3
   19474:	bl	18f40 <__assert_fail@plt+0x7e04>
   19478:	str	r0, [fp, #-28]	; 0xffffffe4
   1947c:	b	19574 <__assert_fail@plt+0x8438>
   19480:	sub	r3, fp, #44	; 0x2c
   19484:	mov	r2, #3
   19488:	ldr	r1, [fp, #-20]	; 0xffffffec
   1948c:	mov	r0, r3
   19490:	bl	18f40 <__assert_fail@plt+0x7e04>
   19494:	str	r0, [fp, #-28]	; 0xffffffe4
   19498:	b	19574 <__assert_fail@plt+0x8438>
   1949c:	sub	r3, fp, #44	; 0x2c
   194a0:	mov	r2, #1
   194a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   194a8:	mov	r0, r3
   194ac:	bl	18f40 <__assert_fail@plt+0x7e04>
   194b0:	str	r0, [fp, #-28]	; 0xffffffe4
   194b4:	b	19574 <__assert_fail@plt+0x8438>
   194b8:	sub	r3, fp, #44	; 0x2c
   194bc:	mov	r2, #2
   194c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   194c4:	mov	r0, r3
   194c8:	bl	18f40 <__assert_fail@plt+0x7e04>
   194cc:	str	r0, [fp, #-28]	; 0xffffffe4
   194d0:	b	19574 <__assert_fail@plt+0x8438>
   194d4:	sub	r3, fp, #44	; 0x2c
   194d8:	mov	r2, #5
   194dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   194e0:	mov	r0, r3
   194e4:	bl	18f40 <__assert_fail@plt+0x7e04>
   194e8:	str	r0, [fp, #-28]	; 0xffffffe4
   194ec:	b	19574 <__assert_fail@plt+0x8438>
   194f0:	sub	r3, fp, #44	; 0x2c
   194f4:	mov	r2, #4
   194f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   194fc:	mov	r0, r3
   19500:	bl	18f40 <__assert_fail@plt+0x7e04>
   19504:	str	r0, [fp, #-28]	; 0xffffffe4
   19508:	b	19574 <__assert_fail@plt+0x8438>
   1950c:	sub	r3, fp, #44	; 0x2c
   19510:	mov	r1, #2
   19514:	mov	r0, r3
   19518:	bl	18ddc <__assert_fail@plt+0x7ca0>
   1951c:	str	r0, [fp, #-28]	; 0xffffffe4
   19520:	b	19574 <__assert_fail@plt+0x8438>
   19524:	sub	r3, fp, #44	; 0x2c
   19528:	mov	r2, #8
   1952c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19530:	mov	r0, r3
   19534:	bl	18f40 <__assert_fail@plt+0x7e04>
   19538:	str	r0, [fp, #-28]	; 0xffffffe4
   1953c:	b	19574 <__assert_fail@plt+0x8438>
   19540:	sub	r3, fp, #44	; 0x2c
   19544:	mov	r2, #7
   19548:	ldr	r1, [fp, #-20]	; 0xffffffec
   1954c:	mov	r0, r3
   19550:	bl	18f40 <__assert_fail@plt+0x7e04>
   19554:	str	r0, [fp, #-28]	; 0xffffffe4
   19558:	b	19574 <__assert_fail@plt+0x8438>
   1955c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   19560:	ldr	r1, [fp, #-60]	; 0xffffffc4
   19564:	strd	r2, [r1]
   19568:	ldr	r3, [fp, #-8]
   1956c:	orr	r3, r3, #2
   19570:	b	195cc <__assert_fail@plt+0x8490>
   19574:	ldr	r2, [fp, #-8]
   19578:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1957c:	orr	r3, r2, r3
   19580:	str	r3, [fp, #-8]
   19584:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19588:	ldr	r2, [r3]
   1958c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19590:	add	r2, r2, r3
   19594:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19598:	str	r2, [r3]
   1959c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   195a0:	ldr	r3, [r3]
   195a4:	ldrb	r3, [r3]
   195a8:	cmp	r3, #0
   195ac:	beq	195bc <__assert_fail@plt+0x8480>
   195b0:	ldr	r3, [fp, #-8]
   195b4:	orr	r3, r3, #2
   195b8:	str	r3, [fp, #-8]
   195bc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   195c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   195c4:	strd	r2, [r1]
   195c8:	ldr	r3, [fp, #-8]
   195cc:	mov	r0, r3
   195d0:	sub	sp, fp, #4
   195d4:	pop	{fp, pc}
   195d8:	andeq	ip, r1, ip, ror #2
   195dc:	andeq	ip, r1, r4, lsr r1
   195e0:	andeq	ip, r1, r4, asr #2
   195e4:	push	{r4, r5, fp, lr}
   195e8:	add	fp, sp, #12
   195ec:	sub	sp, sp, #16
   195f0:	str	r0, [fp, #-24]	; 0xffffffe8
   195f4:	str	r1, [fp, #-28]	; 0xffffffe4
   195f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   195fc:	cmp	r3, #0
   19600:	beq	19610 <__assert_fail@plt+0x84d4>
   19604:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19608:	cmp	r3, #0
   1960c:	bne	19620 <__assert_fail@plt+0x84e4>
   19610:	mov	r3, #1
   19614:	str	r3, [fp, #-28]	; 0xffffffe4
   19618:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1961c:	str	r3, [fp, #-24]	; 0xffffffe8
   19620:	mov	r1, #0
   19624:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19628:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1962c:	umull	r2, r3, r2, r3
   19630:	mov	r4, r3
   19634:	mov	r5, #0
   19638:	cmp	r4, #0
   1963c:	beq	19644 <__assert_fail@plt+0x8508>
   19640:	mov	r1, #1
   19644:	cmp	r2, #0
   19648:	bge	19650 <__assert_fail@plt+0x8514>
   1964c:	mov	r1, #1
   19650:	mov	r3, r2
   19654:	str	r3, [fp, #-20]	; 0xffffffec
   19658:	mov	r3, r1
   1965c:	and	r3, r3, #1
   19660:	uxtb	r3, r3
   19664:	cmp	r3, #0
   19668:	beq	19684 <__assert_fail@plt+0x8548>
   1966c:	bl	11040 <__errno_location@plt>
   19670:	mov	r2, r0
   19674:	mov	r3, #12
   19678:	str	r3, [r2]
   1967c:	mov	r3, #0
   19680:	b	1969c <__assert_fail@plt+0x8560>
   19684:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19688:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1968c:	bl	10e78 <calloc@plt>
   19690:	mov	r3, r0
   19694:	str	r3, [fp, #-16]
   19698:	ldr	r3, [fp, #-16]
   1969c:	mov	r0, r3
   196a0:	sub	sp, fp, #12
   196a4:	pop	{r4, r5, fp, pc}
   196a8:	push	{r4, r5, fp, lr}
   196ac:	add	fp, sp, #12
   196b0:	sub	sp, sp, #16
   196b4:	str	r0, [fp, #-24]	; 0xffffffe8
   196b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   196bc:	cmp	r3, #0
   196c0:	bne	196cc <__assert_fail@plt+0x8590>
   196c4:	mov	r3, #1
   196c8:	str	r3, [fp, #-24]	; 0xffffffe8
   196cc:	mov	r1, #0
   196d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   196d4:	mov	r2, r3
   196d8:	mov	r3, #0
   196dc:	mov	r4, r3
   196e0:	mov	r5, #0
   196e4:	cmp	r4, #0
   196e8:	beq	196f0 <__assert_fail@plt+0x85b4>
   196ec:	mov	r1, #1
   196f0:	cmp	r2, #0
   196f4:	bge	196fc <__assert_fail@plt+0x85c0>
   196f8:	mov	r1, #1
   196fc:	mov	r3, r2
   19700:	str	r3, [fp, #-20]	; 0xffffffec
   19704:	mov	r3, r1
   19708:	and	r3, r3, #1
   1970c:	uxtb	r3, r3
   19710:	cmp	r3, #0
   19714:	beq	19730 <__assert_fail@plt+0x85f4>
   19718:	bl	11040 <__errno_location@plt>
   1971c:	mov	r2, r0
   19720:	mov	r3, #12
   19724:	str	r3, [r2]
   19728:	mov	r3, #0
   1972c:	b	19744 <__assert_fail@plt+0x8608>
   19730:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19734:	bl	10fb0 <malloc@plt>
   19738:	mov	r3, r0
   1973c:	str	r3, [fp, #-16]
   19740:	ldr	r3, [fp, #-16]
   19744:	mov	r0, r3
   19748:	sub	sp, fp, #12
   1974c:	pop	{r4, r5, fp, pc}
   19750:	push	{r4, r5, fp, lr}
   19754:	add	fp, sp, #12
   19758:	sub	sp, sp, #16
   1975c:	str	r0, [fp, #-24]	; 0xffffffe8
   19760:	str	r1, [fp, #-28]	; 0xffffffe4
   19764:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19768:	cmp	r3, #0
   1976c:	bne	19780 <__assert_fail@plt+0x8644>
   19770:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19774:	bl	196a8 <__assert_fail@plt+0x856c>
   19778:	mov	r3, r0
   1977c:	b	19814 <__assert_fail@plt+0x86d8>
   19780:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19784:	cmp	r3, #0
   19788:	bne	1979c <__assert_fail@plt+0x8660>
   1978c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19790:	bl	1433c <__assert_fail@plt+0x3200>
   19794:	mov	r3, #0
   19798:	b	19814 <__assert_fail@plt+0x86d8>
   1979c:	mov	r1, #0
   197a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   197a4:	mov	r2, r3
   197a8:	mov	r3, #0
   197ac:	mov	r4, r3
   197b0:	mov	r5, #0
   197b4:	cmp	r4, #0
   197b8:	beq	197c0 <__assert_fail@plt+0x8684>
   197bc:	mov	r1, #1
   197c0:	cmp	r2, #0
   197c4:	bge	197cc <__assert_fail@plt+0x8690>
   197c8:	mov	r1, #1
   197cc:	mov	r3, r2
   197d0:	str	r3, [fp, #-20]	; 0xffffffec
   197d4:	mov	r3, r1
   197d8:	and	r3, r3, #1
   197dc:	uxtb	r3, r3
   197e0:	cmp	r3, #0
   197e4:	beq	19800 <__assert_fail@plt+0x86c4>
   197e8:	bl	11040 <__errno_location@plt>
   197ec:	mov	r2, r0
   197f0:	mov	r3, #12
   197f4:	str	r3, [r2]
   197f8:	mov	r3, #0
   197fc:	b	19814 <__assert_fail@plt+0x86d8>
   19800:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19804:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19808:	bl	10f2c <realloc@plt>
   1980c:	str	r0, [fp, #-16]
   19810:	ldr	r3, [fp, #-16]
   19814:	mov	r0, r3
   19818:	sub	sp, fp, #12
   1981c:	pop	{r4, r5, fp, pc}
   19820:	push	{r4, r5, fp, lr}
   19824:	add	fp, sp, #12
   19828:	sub	sp, sp, #16
   1982c:	str	r0, [fp, #-24]	; 0xffffffe8
   19830:	str	r1, [fp, #-28]	; 0xffffffe4
   19834:	ldr	r5, [fp, #-24]	; 0xffffffe8
   19838:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1983c:	cmp	r5, r4
   19840:	bne	1984c <__assert_fail@plt+0x8710>
   19844:	mov	r3, #0
   19848:	b	198ac <__assert_fail@plt+0x8770>
   1984c:	ldrb	r3, [r5]
   19850:	mov	r0, r3
   19854:	bl	1a730 <__assert_fail@plt+0x95f4>
   19858:	mov	r3, r0
   1985c:	strb	r3, [fp, #-13]
   19860:	ldrb	r3, [r4]
   19864:	mov	r0, r3
   19868:	bl	1a730 <__assert_fail@plt+0x95f4>
   1986c:	mov	r3, r0
   19870:	strb	r3, [fp, #-14]
   19874:	ldrb	r3, [fp, #-13]
   19878:	cmp	r3, #0
   1987c:	beq	1989c <__assert_fail@plt+0x8760>
   19880:	add	r5, r5, #1
   19884:	add	r4, r4, #1
   19888:	ldrb	r2, [fp, #-13]
   1988c:	ldrb	r3, [fp, #-14]
   19890:	cmp	r2, r3
   19894:	beq	1984c <__assert_fail@plt+0x8710>
   19898:	b	198a0 <__assert_fail@plt+0x8764>
   1989c:	nop			; (mov r0, r0)
   198a0:	ldrb	r2, [fp, #-13]
   198a4:	ldrb	r3, [fp, #-14]
   198a8:	sub	r3, r2, r3
   198ac:	mov	r0, r3
   198b0:	sub	sp, fp, #12
   198b4:	pop	{r4, r5, fp, pc}
   198b8:	push	{fp, lr}
   198bc:	add	fp, sp, #4
   198c0:	sub	sp, sp, #16
   198c4:	str	r0, [fp, #-16]
   198c8:	ldr	r0, [fp, #-16]
   198cc:	bl	10f74 <__fpending@plt>
   198d0:	mov	r3, r0
   198d4:	cmp	r3, #0
   198d8:	movne	r3, #1
   198dc:	moveq	r3, #0
   198e0:	strb	r3, [fp, #-5]
   198e4:	ldr	r0, [fp, #-16]
   198e8:	bl	10f80 <ferror_unlocked@plt>
   198ec:	mov	r3, r0
   198f0:	cmp	r3, #0
   198f4:	movne	r3, #1
   198f8:	moveq	r3, #0
   198fc:	strb	r3, [fp, #-6]
   19900:	ldr	r0, [fp, #-16]
   19904:	bl	14090 <__assert_fail@plt+0x2f54>
   19908:	mov	r3, r0
   1990c:	cmp	r3, #0
   19910:	movne	r3, #1
   19914:	moveq	r3, #0
   19918:	strb	r3, [fp, #-7]
   1991c:	ldrb	r3, [fp, #-6]
   19920:	cmp	r3, #0
   19924:	bne	19954 <__assert_fail@plt+0x8818>
   19928:	ldrb	r3, [fp, #-7]
   1992c:	cmp	r3, #0
   19930:	beq	19980 <__assert_fail@plt+0x8844>
   19934:	ldrb	r3, [fp, #-5]
   19938:	cmp	r3, #0
   1993c:	bne	19954 <__assert_fail@plt+0x8818>
   19940:	bl	11040 <__errno_location@plt>
   19944:	mov	r3, r0
   19948:	ldr	r3, [r3]
   1994c:	cmp	r3, #9
   19950:	beq	19980 <__assert_fail@plt+0x8844>
   19954:	ldrb	r3, [fp, #-7]
   19958:	eor	r3, r3, #1
   1995c:	uxtb	r3, r3
   19960:	cmp	r3, #0
   19964:	beq	19978 <__assert_fail@plt+0x883c>
   19968:	bl	11040 <__errno_location@plt>
   1996c:	mov	r2, r0
   19970:	mov	r3, #0
   19974:	str	r3, [r2]
   19978:	mvn	r3, #0
   1997c:	b	19984 <__assert_fail@plt+0x8848>
   19980:	mov	r3, #0
   19984:	mov	r0, r3
   19988:	sub	sp, fp, #4
   1998c:	pop	{fp, pc}
   19990:	push	{r1, r2, r3}
   19994:	push	{fp, lr}
   19998:	add	fp, sp, #4
   1999c:	sub	sp, sp, #36	; 0x24
   199a0:	str	r0, [fp, #-36]	; 0xffffffdc
   199a4:	mvn	r3, #0
   199a8:	str	r3, [fp, #-12]
   199ac:	add	r3, fp, #8
   199b0:	str	r3, [fp, #-32]	; 0xffffffe0
   199b4:	ldr	r3, [fp, #4]
   199b8:	cmp	r3, #0
   199bc:	beq	199d0 <__assert_fail@plt+0x8894>
   199c0:	ldr	r2, [pc, #432]	; 19b78 <__assert_fail@plt+0x8a3c>
   199c4:	cmp	r3, r2
   199c8:	beq	199f8 <__assert_fail@plt+0x88bc>
   199cc:	b	19a20 <__assert_fail@plt+0x88e4>
   199d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   199d4:	add	r2, r3, #4
   199d8:	str	r2, [fp, #-32]	; 0xffffffe0
   199dc:	ldr	r3, [r3]
   199e0:	str	r3, [fp, #-16]
   199e4:	ldr	r1, [fp, #-16]
   199e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   199ec:	bl	19b90 <__assert_fail@plt+0x8a54>
   199f0:	str	r0, [fp, #-12]
   199f4:	b	19b60 <__assert_fail@plt+0x8a24>
   199f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   199fc:	add	r2, r3, #4
   19a00:	str	r2, [fp, #-32]	; 0xffffffe0
   19a04:	ldr	r3, [r3]
   19a08:	str	r3, [fp, #-20]	; 0xffffffec
   19a0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19a10:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19a14:	bl	19bc8 <__assert_fail@plt+0x8a8c>
   19a18:	str	r0, [fp, #-12]
   19a1c:	b	19b60 <__assert_fail@plt+0x8a24>
   19a20:	ldr	r3, [fp, #4]
   19a24:	cmp	r3, #11
   19a28:	beq	19af0 <__assert_fail@plt+0x89b4>
   19a2c:	cmp	r3, #11
   19a30:	bgt	19a90 <__assert_fail@plt+0x8954>
   19a34:	cmp	r3, #3
   19a38:	beq	19af0 <__assert_fail@plt+0x89b4>
   19a3c:	cmp	r3, #3
   19a40:	bgt	19a60 <__assert_fail@plt+0x8924>
   19a44:	cmp	r3, #1
   19a48:	beq	19af0 <__assert_fail@plt+0x89b4>
   19a4c:	cmp	r3, #1
   19a50:	bgt	19b04 <__assert_fail@plt+0x89c8>
   19a54:	cmp	r3, #0
   19a58:	beq	19b04 <__assert_fail@plt+0x89c8>
   19a5c:	b	19b30 <__assert_fail@plt+0x89f4>
   19a60:	cmp	r3, #8
   19a64:	beq	19b04 <__assert_fail@plt+0x89c8>
   19a68:	cmp	r3, #8
   19a6c:	bgt	19a7c <__assert_fail@plt+0x8940>
   19a70:	cmp	r3, #4
   19a74:	beq	19b04 <__assert_fail@plt+0x89c8>
   19a78:	b	19b30 <__assert_fail@plt+0x89f4>
   19a7c:	cmp	r3, #9
   19a80:	beq	19af0 <__assert_fail@plt+0x89b4>
   19a84:	cmp	r3, #10
   19a88:	beq	19b04 <__assert_fail@plt+0x89c8>
   19a8c:	b	19b30 <__assert_fail@plt+0x89f4>
   19a90:	ldr	r2, [pc, #228]	; 19b7c <__assert_fail@plt+0x8a40>
   19a94:	cmp	r3, r2
   19a98:	bgt	19acc <__assert_fail@plt+0x8990>
   19a9c:	ldr	r2, [pc, #212]	; 19b78 <__assert_fail@plt+0x8a3c>
   19aa0:	cmp	r3, r2
   19aa4:	bge	19b04 <__assert_fail@plt+0x89c8>
   19aa8:	ldr	r2, [pc, #208]	; 19b80 <__assert_fail@plt+0x8a44>
   19aac:	cmp	r3, r2
   19ab0:	beq	19af0 <__assert_fail@plt+0x89b4>
   19ab4:	ldr	r2, [pc, #200]	; 19b84 <__assert_fail@plt+0x8a48>
   19ab8:	cmp	r3, r2
   19abc:	beq	19b04 <__assert_fail@plt+0x89c8>
   19ac0:	cmp	r3, #1024	; 0x400
   19ac4:	beq	19b04 <__assert_fail@plt+0x89c8>
   19ac8:	b	19b30 <__assert_fail@plt+0x89f4>
   19acc:	ldr	r2, [pc, #180]	; 19b88 <__assert_fail@plt+0x8a4c>
   19ad0:	cmp	r3, r2
   19ad4:	beq	19b04 <__assert_fail@plt+0x89c8>
   19ad8:	ldr	r2, [pc, #168]	; 19b88 <__assert_fail@plt+0x8a4c>
   19adc:	cmp	r3, r2
   19ae0:	blt	19af0 <__assert_fail@plt+0x89b4>
   19ae4:	ldr	r2, [pc, #160]	; 19b8c <__assert_fail@plt+0x8a50>
   19ae8:	cmp	r3, r2
   19aec:	bne	19b30 <__assert_fail@plt+0x89f4>
   19af0:	ldr	r1, [fp, #4]
   19af4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19af8:	bl	110a0 <fcntl64@plt>
   19afc:	str	r0, [fp, #-12]
   19b00:	b	19b5c <__assert_fail@plt+0x8a20>
   19b04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19b08:	add	r2, r3, #4
   19b0c:	str	r2, [fp, #-32]	; 0xffffffe0
   19b10:	ldr	r3, [r3]
   19b14:	str	r3, [fp, #-24]	; 0xffffffe8
   19b18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19b1c:	ldr	r1, [fp, #4]
   19b20:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19b24:	bl	110a0 <fcntl64@plt>
   19b28:	str	r0, [fp, #-12]
   19b2c:	b	19b5c <__assert_fail@plt+0x8a20>
   19b30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19b34:	add	r2, r3, #4
   19b38:	str	r2, [fp, #-32]	; 0xffffffe0
   19b3c:	ldr	r3, [r3]
   19b40:	str	r3, [fp, #-28]	; 0xffffffe4
   19b44:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19b48:	ldr	r1, [fp, #4]
   19b4c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19b50:	bl	110a0 <fcntl64@plt>
   19b54:	str	r0, [fp, #-12]
   19b58:	nop			; (mov r0, r0)
   19b5c:	nop			; (mov r0, r0)
   19b60:	ldr	r3, [fp, #-12]
   19b64:	mov	r0, r3
   19b68:	sub	sp, fp, #4
   19b6c:	pop	{fp, lr}
   19b70:	add	sp, sp, #12
   19b74:	bx	lr
   19b78:	andeq	r0, r0, r6, lsl #8
   19b7c:	andeq	r0, r0, r7, lsl #8
   19b80:	andeq	r0, r0, r1, lsl #8
   19b84:	andeq	r0, r0, r2, lsl #8
   19b88:	andeq	r0, r0, r9, lsl #8
   19b8c:	andeq	r0, r0, sl, lsl #8
   19b90:	push	{fp, lr}
   19b94:	add	fp, sp, #4
   19b98:	sub	sp, sp, #16
   19b9c:	str	r0, [fp, #-16]
   19ba0:	str	r1, [fp, #-20]	; 0xffffffec
   19ba4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ba8:	mov	r1, #0
   19bac:	ldr	r0, [fp, #-16]
   19bb0:	bl	110a0 <fcntl64@plt>
   19bb4:	str	r0, [fp, #-8]
   19bb8:	ldr	r3, [fp, #-8]
   19bbc:	mov	r0, r3
   19bc0:	sub	sp, fp, #4
   19bc4:	pop	{fp, pc}
   19bc8:	push	{fp, lr}
   19bcc:	add	fp, sp, #4
   19bd0:	sub	sp, sp, #24
   19bd4:	str	r0, [fp, #-24]	; 0xffffffe8
   19bd8:	str	r1, [fp, #-28]	; 0xffffffe4
   19bdc:	ldr	r3, [pc, #292]	; 19d08 <__assert_fail@plt+0x8bcc>
   19be0:	ldr	r3, [r3]
   19be4:	cmp	r3, #0
   19be8:	blt	19c5c <__assert_fail@plt+0x8b20>
   19bec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19bf0:	ldr	r1, [pc, #276]	; 19d0c <__assert_fail@plt+0x8bd0>
   19bf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19bf8:	bl	110a0 <fcntl64@plt>
   19bfc:	str	r0, [fp, #-8]
   19c00:	ldr	r3, [fp, #-8]
   19c04:	cmp	r3, #0
   19c08:	bge	19c20 <__assert_fail@plt+0x8ae4>
   19c0c:	bl	11040 <__errno_location@plt>
   19c10:	mov	r3, r0
   19c14:	ldr	r3, [r3]
   19c18:	cmp	r3, #22
   19c1c:	beq	19c30 <__assert_fail@plt+0x8af4>
   19c20:	ldr	r3, [pc, #224]	; 19d08 <__assert_fail@plt+0x8bcc>
   19c24:	mov	r2, #1
   19c28:	str	r2, [r3]
   19c2c:	b	19c6c <__assert_fail@plt+0x8b30>
   19c30:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19c34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19c38:	bl	19b90 <__assert_fail@plt+0x8a54>
   19c3c:	str	r0, [fp, #-8]
   19c40:	ldr	r3, [fp, #-8]
   19c44:	cmp	r3, #0
   19c48:	blt	19c6c <__assert_fail@plt+0x8b30>
   19c4c:	ldr	r3, [pc, #180]	; 19d08 <__assert_fail@plt+0x8bcc>
   19c50:	mvn	r2, #0
   19c54:	str	r2, [r3]
   19c58:	b	19c6c <__assert_fail@plt+0x8b30>
   19c5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19c60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19c64:	bl	19b90 <__assert_fail@plt+0x8a54>
   19c68:	str	r0, [fp, #-8]
   19c6c:	ldr	r3, [fp, #-8]
   19c70:	cmp	r3, #0
   19c74:	blt	19cf8 <__assert_fail@plt+0x8bbc>
   19c78:	ldr	r3, [pc, #136]	; 19d08 <__assert_fail@plt+0x8bcc>
   19c7c:	ldr	r3, [r3]
   19c80:	cmn	r3, #1
   19c84:	bne	19cf8 <__assert_fail@plt+0x8bbc>
   19c88:	mov	r1, #1
   19c8c:	ldr	r0, [fp, #-8]
   19c90:	bl	110a0 <fcntl64@plt>
   19c94:	str	r0, [fp, #-12]
   19c98:	ldr	r3, [fp, #-12]
   19c9c:	cmp	r3, #0
   19ca0:	blt	19cc8 <__assert_fail@plt+0x8b8c>
   19ca4:	ldr	r3, [fp, #-12]
   19ca8:	orr	r3, r3, #1
   19cac:	mov	r2, r3
   19cb0:	mov	r1, #2
   19cb4:	ldr	r0, [fp, #-8]
   19cb8:	bl	110a0 <fcntl64@plt>
   19cbc:	mov	r3, r0
   19cc0:	cmn	r3, #1
   19cc4:	bne	19cf8 <__assert_fail@plt+0x8bbc>
   19cc8:	bl	11040 <__errno_location@plt>
   19ccc:	mov	r3, r0
   19cd0:	ldr	r3, [r3]
   19cd4:	str	r3, [fp, #-16]
   19cd8:	ldr	r0, [fp, #-8]
   19cdc:	bl	11124 <close@plt>
   19ce0:	bl	11040 <__errno_location@plt>
   19ce4:	mov	r2, r0
   19ce8:	ldr	r3, [fp, #-16]
   19cec:	str	r3, [r2]
   19cf0:	mvn	r3, #0
   19cf4:	str	r3, [fp, #-8]
   19cf8:	ldr	r3, [fp, #-8]
   19cfc:	mov	r0, r3
   19d00:	sub	sp, fp, #4
   19d04:	pop	{fp, pc}
   19d08:	andeq	sp, r2, ip, lsr r3
   19d0c:	andeq	r0, r0, r6, lsl #8
   19d10:	push	{fp, lr}
   19d14:	add	fp, sp, #4
   19d18:	bl	11040 <__errno_location@plt>
   19d1c:	mov	r2, r0
   19d20:	mov	r3, #12
   19d24:	str	r3, [r2]
   19d28:	mov	r3, #0
   19d2c:	mov	r0, r3
   19d30:	pop	{fp, pc}
   19d34:	push	{fp, lr}
   19d38:	add	fp, sp, #4
   19d3c:	sub	sp, sp, #8
   19d40:	str	r0, [fp, #-8]
   19d44:	ldr	r3, [fp, #-8]
   19d48:	mov	r0, r3
   19d4c:	bl	196a8 <__assert_fail@plt+0x856c>
   19d50:	mov	r3, r0
   19d54:	mov	r0, r3
   19d58:	sub	sp, fp, #4
   19d5c:	pop	{fp, pc}
   19d60:	push	{fp, lr}
   19d64:	add	fp, sp, #4
   19d68:	sub	sp, sp, #8
   19d6c:	str	r0, [fp, #-8]
   19d70:	str	r1, [fp, #-12]
   19d74:	ldr	r3, [fp, #-12]
   19d78:	cmp	r3, #0
   19d7c:	moveq	r3, #1
   19d80:	movne	r3, #0
   19d84:	uxtb	r3, r3
   19d88:	mov	r2, r3
   19d8c:	ldr	r3, [fp, #-12]
   19d90:	orr	r3, r2, r3
   19d94:	mov	r1, r3
   19d98:	ldr	r0, [fp, #-8]
   19d9c:	bl	19750 <__assert_fail@plt+0x8614>
   19da0:	mov	r3, r0
   19da4:	mov	r0, r3
   19da8:	sub	sp, fp, #4
   19dac:	pop	{fp, pc}
   19db0:	push	{fp, lr}
   19db4:	add	fp, sp, #4
   19db8:	sub	sp, sp, #8
   19dbc:	str	r0, [fp, #-8]
   19dc0:	str	r1, [fp, #-12]
   19dc4:	ldr	r3, [fp, #-8]
   19dc8:	ldr	r2, [fp, #-12]
   19dcc:	mov	r1, r2
   19dd0:	mov	r0, r3
   19dd4:	bl	195e4 <__assert_fail@plt+0x84a8>
   19dd8:	mov	r3, r0
   19ddc:	mov	r0, r3
   19de0:	sub	sp, fp, #4
   19de4:	pop	{fp, pc}
   19de8:	push	{fp, lr}
   19dec:	add	fp, sp, #4
   19df0:	sub	sp, sp, #16
   19df4:	str	r0, [fp, #-8]
   19df8:	str	r1, [fp, #-12]
   19dfc:	str	r2, [fp, #-16]
   19e00:	ldr	r3, [fp, #-12]
   19e04:	cmp	r3, #0
   19e08:	beq	19e18 <__assert_fail@plt+0x8cdc>
   19e0c:	ldr	r3, [fp, #-16]
   19e10:	cmp	r3, #0
   19e14:	bne	19e28 <__assert_fail@plt+0x8cec>
   19e18:	mov	r3, #1
   19e1c:	str	r3, [fp, #-16]
   19e20:	ldr	r3, [fp, #-16]
   19e24:	str	r3, [fp, #-12]
   19e28:	ldr	r3, [fp, #-12]
   19e2c:	ldr	r2, [fp, #-16]
   19e30:	mov	r1, r3
   19e34:	ldr	r0, [fp, #-8]
   19e38:	bl	1a20c <__assert_fail@plt+0x90d0>
   19e3c:	mov	r3, r0
   19e40:	mov	r0, r3
   19e44:	sub	sp, fp, #4
   19e48:	pop	{fp, pc}
   19e4c:	push	{fp, lr}
   19e50:	add	fp, sp, #4
   19e54:	sub	sp, sp, #8
   19e58:	mov	r0, #14
   19e5c:	bl	110d0 <nl_langinfo@plt>
   19e60:	str	r0, [fp, #-8]
   19e64:	ldr	r3, [fp, #-8]
   19e68:	cmp	r3, #0
   19e6c:	bne	19e78 <__assert_fail@plt+0x8d3c>
   19e70:	ldr	r3, [pc, #40]	; 19ea0 <__assert_fail@plt+0x8d64>
   19e74:	str	r3, [fp, #-8]
   19e78:	ldr	r3, [fp, #-8]
   19e7c:	ldrb	r3, [r3]
   19e80:	cmp	r3, #0
   19e84:	bne	19e90 <__assert_fail@plt+0x8d54>
   19e88:	ldr	r3, [pc, #20]	; 19ea4 <__assert_fail@plt+0x8d68>
   19e8c:	str	r3, [fp, #-8]
   19e90:	ldr	r3, [fp, #-8]
   19e94:	mov	r0, r3
   19e98:	sub	sp, fp, #4
   19e9c:	pop	{fp, pc}
   19ea0:	andeq	ip, r1, r8, ror r1
   19ea4:	andeq	ip, r1, ip, ror r1
   19ea8:	push	{fp, lr}
   19eac:	add	fp, sp, #4
   19eb0:	sub	sp, sp, #32
   19eb4:	str	r0, [fp, #-24]	; 0xffffffe8
   19eb8:	str	r1, [fp, #-28]	; 0xffffffe4
   19ebc:	str	r2, [fp, #-32]	; 0xffffffe0
   19ec0:	str	r3, [fp, #-36]	; 0xffffffdc
   19ec4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19ec8:	cmp	r3, #0
   19ecc:	bne	19ed8 <__assert_fail@plt+0x8d9c>
   19ed0:	sub	r3, fp, #16
   19ed4:	str	r3, [fp, #-24]	; 0xffffffe8
   19ed8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19edc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19ee0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19ee4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19ee8:	bl	10f8c <mbrtowc@plt>
   19eec:	str	r0, [fp, #-8]
   19ef0:	ldr	r3, [fp, #-8]
   19ef4:	cmn	r3, #3
   19ef8:	bls	19f44 <__assert_fail@plt+0x8e08>
   19efc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f00:	cmp	r3, #0
   19f04:	beq	19f44 <__assert_fail@plt+0x8e08>
   19f08:	mov	r0, #0
   19f0c:	bl	144ac <__assert_fail@plt+0x3370>
   19f10:	mov	r3, r0
   19f14:	eor	r3, r3, #1
   19f18:	uxtb	r3, r3
   19f1c:	cmp	r3, #0
   19f20:	beq	19f44 <__assert_fail@plt+0x8e08>
   19f24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19f28:	ldrb	r3, [r3]
   19f2c:	strb	r3, [fp, #-9]
   19f30:	ldrb	r2, [fp, #-9]
   19f34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f38:	str	r2, [r3]
   19f3c:	mov	r3, #1
   19f40:	b	19f48 <__assert_fail@plt+0x8e0c>
   19f44:	ldr	r3, [fp, #-8]
   19f48:	mov	r0, r3
   19f4c:	sub	sp, fp, #4
   19f50:	pop	{fp, pc}
   19f54:	push	{fp, lr}
   19f58:	add	fp, sp, #4
   19f5c:	sub	sp, sp, #32
   19f60:	str	r0, [fp, #-24]	; 0xffffffe8
   19f64:	str	r1, [fp, #-28]	; 0xffffffe4
   19f68:	str	r2, [fp, #-32]	; 0xffffffe0
   19f6c:	str	r3, [fp, #-36]	; 0xffffffdc
   19f70:	b	1a018 <__assert_fail@plt+0x8edc>
   19f74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19f78:	bl	1101c <strlen@plt>
   19f7c:	mov	r3, r0
   19f80:	add	r3, r3, #1
   19f84:	str	r3, [fp, #-12]
   19f88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19f8c:	bl	1101c <strlen@plt>
   19f90:	mov	r3, r0
   19f94:	add	r3, r3, #1
   19f98:	str	r3, [fp, #-16]
   19f9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19fa0:	ldr	r3, [fp, #-12]
   19fa4:	add	r3, r2, r3
   19fa8:	str	r3, [fp, #-24]	; 0xffffffe8
   19fac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19fb0:	ldr	r3, [fp, #-16]
   19fb4:	add	r3, r2, r3
   19fb8:	str	r3, [fp, #-32]	; 0xffffffe0
   19fbc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19fc0:	ldr	r3, [fp, #-12]
   19fc4:	sub	r3, r2, r3
   19fc8:	str	r3, [fp, #-28]	; 0xffffffe4
   19fcc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   19fd0:	ldr	r3, [fp, #-16]
   19fd4:	sub	r3, r2, r3
   19fd8:	str	r3, [fp, #-36]	; 0xffffffdc
   19fdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19fe0:	cmp	r3, #0
   19fe4:	bne	1a004 <__assert_fail@plt+0x8ec8>
   19fe8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19fec:	cmp	r3, #0
   19ff0:	movne	r3, #1
   19ff4:	moveq	r3, #0
   19ff8:	uxtb	r3, r3
   19ffc:	rsb	r3, r3, #0
   1a000:	b	1a070 <__assert_fail@plt+0x8f34>
   1a004:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a008:	cmp	r3, #0
   1a00c:	bne	1a018 <__assert_fail@plt+0x8edc>
   1a010:	mov	r3, #1
   1a014:	b	1a070 <__assert_fail@plt+0x8f34>
   1a018:	bl	11040 <__errno_location@plt>
   1a01c:	mov	r2, r0
   1a020:	mov	r3, #0
   1a024:	str	r3, [r2]
   1a028:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a02c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a030:	bl	10fa4 <strcoll@plt>
   1a034:	str	r0, [fp, #-8]
   1a038:	ldr	r3, [fp, #-8]
   1a03c:	cmp	r3, #0
   1a040:	bne	1a058 <__assert_fail@plt+0x8f1c>
   1a044:	bl	11040 <__errno_location@plt>
   1a048:	mov	r3, r0
   1a04c:	ldr	r3, [r3]
   1a050:	cmp	r3, #0
   1a054:	beq	1a060 <__assert_fail@plt+0x8f24>
   1a058:	mov	r3, #1
   1a05c:	b	1a064 <__assert_fail@plt+0x8f28>
   1a060:	mov	r3, #0
   1a064:	cmp	r3, #0
   1a068:	beq	19f74 <__assert_fail@plt+0x8e38>
   1a06c:	ldr	r3, [fp, #-8]
   1a070:	mov	r0, r3
   1a074:	sub	sp, fp, #4
   1a078:	pop	{fp, pc}
   1a07c:	push	{fp, lr}
   1a080:	add	fp, sp, #4
   1a084:	sub	sp, sp, #24
   1a088:	str	r0, [fp, #-16]
   1a08c:	str	r1, [fp, #-20]	; 0xffffffec
   1a090:	str	r2, [fp, #-24]	; 0xffffffe8
   1a094:	str	r3, [fp, #-28]	; 0xffffffe4
   1a098:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a09c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a0a0:	cmp	r2, r3
   1a0a4:	bne	1a0e0 <__assert_fail@plt+0x8fa4>
   1a0a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a0ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a0b0:	ldr	r0, [fp, #-16]
   1a0b4:	bl	10f08 <memcmp@plt>
   1a0b8:	mov	r3, r0
   1a0bc:	cmp	r3, #0
   1a0c0:	bne	1a0e0 <__assert_fail@plt+0x8fa4>
   1a0c4:	bl	11040 <__errno_location@plt>
   1a0c8:	mov	r2, r0
   1a0cc:	mov	r3, #0
   1a0d0:	str	r3, [r2]
   1a0d4:	mov	r3, #0
   1a0d8:	str	r3, [fp, #-8]
   1a0dc:	b	1a178 <__assert_fail@plt+0x903c>
   1a0e0:	ldr	r2, [fp, #-16]
   1a0e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0e8:	add	r3, r2, r3
   1a0ec:	ldrb	r3, [r3]
   1a0f0:	strb	r3, [fp, #-9]
   1a0f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a0f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a0fc:	add	r3, r2, r3
   1a100:	ldrb	r3, [r3]
   1a104:	strb	r3, [fp, #-10]
   1a108:	ldr	r2, [fp, #-16]
   1a10c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a110:	add	r3, r2, r3
   1a114:	mov	r2, #0
   1a118:	strb	r2, [r3]
   1a11c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a120:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a124:	add	r3, r2, r3
   1a128:	mov	r2, #0
   1a12c:	strb	r2, [r3]
   1a130:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a134:	add	r1, r3, #1
   1a138:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a13c:	add	r3, r3, #1
   1a140:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a144:	ldr	r0, [fp, #-16]
   1a148:	bl	19f54 <__assert_fail@plt+0x8e18>
   1a14c:	str	r0, [fp, #-8]
   1a150:	ldr	r2, [fp, #-16]
   1a154:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a158:	add	r3, r2, r3
   1a15c:	ldrb	r2, [fp, #-9]
   1a160:	strb	r2, [r3]
   1a164:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a168:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a16c:	add	r3, r2, r3
   1a170:	ldrb	r2, [fp, #-10]
   1a174:	strb	r2, [r3]
   1a178:	ldr	r3, [fp, #-8]
   1a17c:	mov	r0, r3
   1a180:	sub	sp, fp, #4
   1a184:	pop	{fp, pc}
   1a188:	push	{fp, lr}
   1a18c:	add	fp, sp, #4
   1a190:	sub	sp, sp, #16
   1a194:	str	r0, [fp, #-8]
   1a198:	str	r1, [fp, #-12]
   1a19c:	str	r2, [fp, #-16]
   1a1a0:	str	r3, [fp, #-20]	; 0xffffffec
   1a1a4:	ldr	r2, [fp, #-12]
   1a1a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a1ac:	cmp	r2, r3
   1a1b0:	bne	1a1e8 <__assert_fail@plt+0x90ac>
   1a1b4:	ldr	r2, [fp, #-12]
   1a1b8:	ldr	r1, [fp, #-16]
   1a1bc:	ldr	r0, [fp, #-8]
   1a1c0:	bl	10f08 <memcmp@plt>
   1a1c4:	mov	r3, r0
   1a1c8:	cmp	r3, #0
   1a1cc:	bne	1a1e8 <__assert_fail@plt+0x90ac>
   1a1d0:	bl	11040 <__errno_location@plt>
   1a1d4:	mov	r2, r0
   1a1d8:	mov	r3, #0
   1a1dc:	str	r3, [r2]
   1a1e0:	mov	r3, #0
   1a1e4:	b	1a200 <__assert_fail@plt+0x90c4>
   1a1e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a1ec:	ldr	r2, [fp, #-16]
   1a1f0:	ldr	r1, [fp, #-12]
   1a1f4:	ldr	r0, [fp, #-8]
   1a1f8:	bl	19f54 <__assert_fail@plt+0x8e18>
   1a1fc:	mov	r3, r0
   1a200:	mov	r0, r3
   1a204:	sub	sp, fp, #4
   1a208:	pop	{fp, pc}
   1a20c:	push	{fp, lr}
   1a210:	add	fp, sp, #4
   1a214:	sub	sp, sp, #24
   1a218:	str	r0, [fp, #-16]
   1a21c:	str	r1, [fp, #-20]	; 0xffffffec
   1a220:	str	r2, [fp, #-24]	; 0xffffffe8
   1a224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a228:	cmp	r3, #0
   1a22c:	beq	1a268 <__assert_fail@plt+0x912c>
   1a230:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a234:	mvn	r0, #0
   1a238:	bl	1a7b0 <__assert_fail@plt+0x9674>
   1a23c:	mov	r3, r0
   1a240:	mov	r2, r3
   1a244:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a248:	cmp	r2, r3
   1a24c:	bcs	1a268 <__assert_fail@plt+0x912c>
   1a250:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a254:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a258:	mul	r3, r2, r3
   1a25c:	str	r3, [fp, #-8]
   1a260:	mov	r3, #1
   1a264:	b	1a27c <__assert_fail@plt+0x9140>
   1a268:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a26c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a270:	mul	r3, r2, r3
   1a274:	str	r3, [fp, #-8]
   1a278:	mov	r3, #0
   1a27c:	cmp	r3, #0
   1a280:	beq	1a29c <__assert_fail@plt+0x9160>
   1a284:	bl	11040 <__errno_location@plt>
   1a288:	mov	r2, r0
   1a28c:	mov	r3, #12
   1a290:	str	r3, [r2]
   1a294:	mov	r3, #0
   1a298:	b	1a2b0 <__assert_fail@plt+0x9174>
   1a29c:	ldr	r3, [fp, #-8]
   1a2a0:	mov	r1, r3
   1a2a4:	ldr	r0, [fp, #-16]
   1a2a8:	bl	19750 <__assert_fail@plt+0x8614>
   1a2ac:	mov	r3, r0
   1a2b0:	mov	r0, r3
   1a2b4:	sub	sp, fp, #4
   1a2b8:	pop	{fp, pc}
   1a2bc:	push	{fp}		; (str fp, [sp, #-4]!)
   1a2c0:	add	fp, sp, #0
   1a2c4:	sub	sp, sp, #12
   1a2c8:	str	r0, [fp, #-8]
   1a2cc:	ldr	r3, [fp, #-8]
   1a2d0:	cmp	r3, #90	; 0x5a
   1a2d4:	bgt	1a2f0 <__assert_fail@plt+0x91b4>
   1a2d8:	cmp	r3, #65	; 0x41
   1a2dc:	bge	1a2fc <__assert_fail@plt+0x91c0>
   1a2e0:	sub	r3, r3, #48	; 0x30
   1a2e4:	cmp	r3, #9
   1a2e8:	bhi	1a304 <__assert_fail@plt+0x91c8>
   1a2ec:	b	1a2fc <__assert_fail@plt+0x91c0>
   1a2f0:	sub	r3, r3, #97	; 0x61
   1a2f4:	cmp	r3, #25
   1a2f8:	bhi	1a304 <__assert_fail@plt+0x91c8>
   1a2fc:	mov	r3, #1
   1a300:	b	1a308 <__assert_fail@plt+0x91cc>
   1a304:	mov	r3, #0
   1a308:	mov	r0, r3
   1a30c:	add	sp, fp, #0
   1a310:	pop	{fp}		; (ldr fp, [sp], #4)
   1a314:	bx	lr
   1a318:	push	{fp}		; (str fp, [sp, #-4]!)
   1a31c:	add	fp, sp, #0
   1a320:	sub	sp, sp, #12
   1a324:	str	r0, [fp, #-8]
   1a328:	ldr	r3, [fp, #-8]
   1a32c:	cmp	r3, #65	; 0x41
   1a330:	blt	1a350 <__assert_fail@plt+0x9214>
   1a334:	cmp	r3, #90	; 0x5a
   1a338:	ble	1a348 <__assert_fail@plt+0x920c>
   1a33c:	sub	r3, r3, #97	; 0x61
   1a340:	cmp	r3, #25
   1a344:	bhi	1a350 <__assert_fail@plt+0x9214>
   1a348:	mov	r3, #1
   1a34c:	b	1a354 <__assert_fail@plt+0x9218>
   1a350:	mov	r3, #0
   1a354:	mov	r0, r3
   1a358:	add	sp, fp, #0
   1a35c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a360:	bx	lr
   1a364:	push	{fp}		; (str fp, [sp, #-4]!)
   1a368:	add	fp, sp, #0
   1a36c:	sub	sp, sp, #12
   1a370:	str	r0, [fp, #-8]
   1a374:	ldr	r3, [fp, #-8]
   1a378:	add	r3, r3, #0
   1a37c:	cmp	r3, #127	; 0x7f
   1a380:	bhi	1a38c <__assert_fail@plt+0x9250>
   1a384:	mov	r3, #1
   1a388:	b	1a390 <__assert_fail@plt+0x9254>
   1a38c:	mov	r3, #0
   1a390:	mov	r0, r3
   1a394:	add	sp, fp, #0
   1a398:	pop	{fp}		; (ldr fp, [sp], #4)
   1a39c:	bx	lr
   1a3a0:	push	{fp}		; (str fp, [sp, #-4]!)
   1a3a4:	add	fp, sp, #0
   1a3a8:	sub	sp, sp, #12
   1a3ac:	str	r0, [fp, #-8]
   1a3b0:	ldr	r3, [fp, #-8]
   1a3b4:	cmp	r3, #32
   1a3b8:	beq	1a3c8 <__assert_fail@plt+0x928c>
   1a3bc:	ldr	r3, [fp, #-8]
   1a3c0:	cmp	r3, #9
   1a3c4:	bne	1a3d0 <__assert_fail@plt+0x9294>
   1a3c8:	mov	r3, #1
   1a3cc:	b	1a3d4 <__assert_fail@plt+0x9298>
   1a3d0:	mov	r3, #0
   1a3d4:	and	r3, r3, #1
   1a3d8:	uxtb	r3, r3
   1a3dc:	mov	r0, r3
   1a3e0:	add	sp, fp, #0
   1a3e4:	pop	{fp}		; (ldr fp, [sp], #4)
   1a3e8:	bx	lr
   1a3ec:	push	{fp}		; (str fp, [sp, #-4]!)
   1a3f0:	add	fp, sp, #0
   1a3f4:	sub	sp, sp, #12
   1a3f8:	str	r0, [fp, #-8]
   1a3fc:	ldr	r3, [fp, #-8]
   1a400:	cmp	r3, #0
   1a404:	blt	1a420 <__assert_fail@plt+0x92e4>
   1a408:	cmp	r3, #31
   1a40c:	ble	1a418 <__assert_fail@plt+0x92dc>
   1a410:	cmp	r3, #127	; 0x7f
   1a414:	bne	1a420 <__assert_fail@plt+0x92e4>
   1a418:	mov	r3, #1
   1a41c:	b	1a424 <__assert_fail@plt+0x92e8>
   1a420:	mov	r3, #0
   1a424:	mov	r0, r3
   1a428:	add	sp, fp, #0
   1a42c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a430:	bx	lr
   1a434:	push	{fp}		; (str fp, [sp, #-4]!)
   1a438:	add	fp, sp, #0
   1a43c:	sub	sp, sp, #12
   1a440:	str	r0, [fp, #-8]
   1a444:	ldr	r3, [fp, #-8]
   1a448:	sub	r3, r3, #48	; 0x30
   1a44c:	cmp	r3, #9
   1a450:	bhi	1a45c <__assert_fail@plt+0x9320>
   1a454:	mov	r3, #1
   1a458:	b	1a460 <__assert_fail@plt+0x9324>
   1a45c:	mov	r3, #0
   1a460:	mov	r0, r3
   1a464:	add	sp, fp, #0
   1a468:	pop	{fp}		; (ldr fp, [sp], #4)
   1a46c:	bx	lr
   1a470:	push	{fp}		; (str fp, [sp, #-4]!)
   1a474:	add	fp, sp, #0
   1a478:	sub	sp, sp, #12
   1a47c:	str	r0, [fp, #-8]
   1a480:	ldr	r3, [fp, #-8]
   1a484:	sub	r3, r3, #33	; 0x21
   1a488:	cmp	r3, #93	; 0x5d
   1a48c:	bhi	1a498 <__assert_fail@plt+0x935c>
   1a490:	mov	r3, #1
   1a494:	b	1a49c <__assert_fail@plt+0x9360>
   1a498:	mov	r3, #0
   1a49c:	mov	r0, r3
   1a4a0:	add	sp, fp, #0
   1a4a4:	pop	{fp}		; (ldr fp, [sp], #4)
   1a4a8:	bx	lr
   1a4ac:	push	{fp}		; (str fp, [sp, #-4]!)
   1a4b0:	add	fp, sp, #0
   1a4b4:	sub	sp, sp, #12
   1a4b8:	str	r0, [fp, #-8]
   1a4bc:	ldr	r3, [fp, #-8]
   1a4c0:	sub	r3, r3, #97	; 0x61
   1a4c4:	cmp	r3, #25
   1a4c8:	bhi	1a4d4 <__assert_fail@plt+0x9398>
   1a4cc:	mov	r3, #1
   1a4d0:	b	1a4d8 <__assert_fail@plt+0x939c>
   1a4d4:	mov	r3, #0
   1a4d8:	mov	r0, r3
   1a4dc:	add	sp, fp, #0
   1a4e0:	pop	{fp}		; (ldr fp, [sp], #4)
   1a4e4:	bx	lr
   1a4e8:	push	{fp}		; (str fp, [sp, #-4]!)
   1a4ec:	add	fp, sp, #0
   1a4f0:	sub	sp, sp, #12
   1a4f4:	str	r0, [fp, #-8]
   1a4f8:	ldr	r3, [fp, #-8]
   1a4fc:	sub	r3, r3, #32
   1a500:	cmp	r3, #94	; 0x5e
   1a504:	bhi	1a510 <__assert_fail@plt+0x93d4>
   1a508:	mov	r3, #1
   1a50c:	b	1a514 <__assert_fail@plt+0x93d8>
   1a510:	mov	r3, #0
   1a514:	mov	r0, r3
   1a518:	add	sp, fp, #0
   1a51c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a520:	bx	lr
   1a524:	push	{fp}		; (str fp, [sp, #-4]!)
   1a528:	add	fp, sp, #0
   1a52c:	sub	sp, sp, #12
   1a530:	str	r0, [fp, #-8]
   1a534:	ldr	r3, [fp, #-8]
   1a538:	cmp	r3, #64	; 0x40
   1a53c:	bgt	1a558 <__assert_fail@plt+0x941c>
   1a540:	cmp	r3, #58	; 0x3a
   1a544:	bge	1a574 <__assert_fail@plt+0x9438>
   1a548:	sub	r3, r3, #33	; 0x21
   1a54c:	cmp	r3, #14
   1a550:	bhi	1a57c <__assert_fail@plt+0x9440>
   1a554:	b	1a574 <__assert_fail@plt+0x9438>
   1a558:	cmp	r3, #91	; 0x5b
   1a55c:	blt	1a57c <__assert_fail@plt+0x9440>
   1a560:	cmp	r3, #96	; 0x60
   1a564:	ble	1a574 <__assert_fail@plt+0x9438>
   1a568:	sub	r3, r3, #123	; 0x7b
   1a56c:	cmp	r3, #3
   1a570:	bhi	1a57c <__assert_fail@plt+0x9440>
   1a574:	mov	r3, #1
   1a578:	b	1a580 <__assert_fail@plt+0x9444>
   1a57c:	mov	r3, #0
   1a580:	mov	r0, r3
   1a584:	add	sp, fp, #0
   1a588:	pop	{fp}		; (ldr fp, [sp], #4)
   1a58c:	bx	lr
   1a590:	push	{fp}		; (str fp, [sp, #-4]!)
   1a594:	add	fp, sp, #0
   1a598:	sub	sp, sp, #12
   1a59c:	str	r0, [fp, #-8]
   1a5a0:	ldr	r3, [fp, #-8]
   1a5a4:	cmp	r3, #9
   1a5a8:	blt	1a5c4 <__assert_fail@plt+0x9488>
   1a5ac:	cmp	r3, #13
   1a5b0:	ble	1a5bc <__assert_fail@plt+0x9480>
   1a5b4:	cmp	r3, #32
   1a5b8:	bne	1a5c4 <__assert_fail@plt+0x9488>
   1a5bc:	mov	r3, #1
   1a5c0:	b	1a5c8 <__assert_fail@plt+0x948c>
   1a5c4:	mov	r3, #0
   1a5c8:	mov	r0, r3
   1a5cc:	add	sp, fp, #0
   1a5d0:	pop	{fp}		; (ldr fp, [sp], #4)
   1a5d4:	bx	lr
   1a5d8:	push	{fp}		; (str fp, [sp, #-4]!)
   1a5dc:	add	fp, sp, #0
   1a5e0:	sub	sp, sp, #12
   1a5e4:	str	r0, [fp, #-8]
   1a5e8:	ldr	r3, [fp, #-8]
   1a5ec:	sub	r3, r3, #65	; 0x41
   1a5f0:	cmp	r3, #25
   1a5f4:	bhi	1a600 <__assert_fail@plt+0x94c4>
   1a5f8:	mov	r3, #1
   1a5fc:	b	1a604 <__assert_fail@plt+0x94c8>
   1a600:	mov	r3, #0
   1a604:	mov	r0, r3
   1a608:	add	sp, fp, #0
   1a60c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a610:	bx	lr
   1a614:	push	{fp}		; (str fp, [sp, #-4]!)
   1a618:	add	fp, sp, #0
   1a61c:	sub	sp, sp, #12
   1a620:	str	r0, [fp, #-8]
   1a624:	ldr	r3, [fp, #-8]
   1a628:	sub	r3, r3, #48	; 0x30
   1a62c:	cmp	r3, #54	; 0x36
   1a630:	addls	pc, pc, r3, lsl #2
   1a634:	b	1a71c <__assert_fail@plt+0x95e0>
   1a638:	b	1a714 <__assert_fail@plt+0x95d8>
   1a63c:	b	1a714 <__assert_fail@plt+0x95d8>
   1a640:	b	1a714 <__assert_fail@plt+0x95d8>
   1a644:	b	1a714 <__assert_fail@plt+0x95d8>
   1a648:	b	1a714 <__assert_fail@plt+0x95d8>
   1a64c:	b	1a714 <__assert_fail@plt+0x95d8>
   1a650:	b	1a714 <__assert_fail@plt+0x95d8>
   1a654:	b	1a714 <__assert_fail@plt+0x95d8>
   1a658:	b	1a714 <__assert_fail@plt+0x95d8>
   1a65c:	b	1a714 <__assert_fail@plt+0x95d8>
   1a660:	b	1a71c <__assert_fail@plt+0x95e0>
   1a664:	b	1a71c <__assert_fail@plt+0x95e0>
   1a668:	b	1a71c <__assert_fail@plt+0x95e0>
   1a66c:	b	1a71c <__assert_fail@plt+0x95e0>
   1a670:	b	1a71c <__assert_fail@plt+0x95e0>
   1a674:	b	1a71c <__assert_fail@plt+0x95e0>
   1a678:	b	1a71c <__assert_fail@plt+0x95e0>
   1a67c:	b	1a714 <__assert_fail@plt+0x95d8>
   1a680:	b	1a714 <__assert_fail@plt+0x95d8>
   1a684:	b	1a714 <__assert_fail@plt+0x95d8>
   1a688:	b	1a714 <__assert_fail@plt+0x95d8>
   1a68c:	b	1a714 <__assert_fail@plt+0x95d8>
   1a690:	b	1a714 <__assert_fail@plt+0x95d8>
   1a694:	b	1a71c <__assert_fail@plt+0x95e0>
   1a698:	b	1a71c <__assert_fail@plt+0x95e0>
   1a69c:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6a0:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6a4:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6a8:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6ac:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6b0:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6b4:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6b8:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6bc:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6c0:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6c4:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6c8:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6cc:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6d0:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6d4:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6d8:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6dc:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6e0:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6e4:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6e8:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6ec:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6f0:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6f4:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6f8:	b	1a71c <__assert_fail@plt+0x95e0>
   1a6fc:	b	1a714 <__assert_fail@plt+0x95d8>
   1a700:	b	1a714 <__assert_fail@plt+0x95d8>
   1a704:	b	1a714 <__assert_fail@plt+0x95d8>
   1a708:	b	1a714 <__assert_fail@plt+0x95d8>
   1a70c:	b	1a714 <__assert_fail@plt+0x95d8>
   1a710:	b	1a714 <__assert_fail@plt+0x95d8>
   1a714:	mov	r3, #1
   1a718:	b	1a720 <__assert_fail@plt+0x95e4>
   1a71c:	mov	r3, #0
   1a720:	mov	r0, r3
   1a724:	add	sp, fp, #0
   1a728:	pop	{fp}		; (ldr fp, [sp], #4)
   1a72c:	bx	lr
   1a730:	push	{fp}		; (str fp, [sp, #-4]!)
   1a734:	add	fp, sp, #0
   1a738:	sub	sp, sp, #12
   1a73c:	str	r0, [fp, #-8]
   1a740:	ldr	r3, [fp, #-8]
   1a744:	sub	r3, r3, #65	; 0x41
   1a748:	cmp	r3, #25
   1a74c:	bhi	1a75c <__assert_fail@plt+0x9620>
   1a750:	ldr	r3, [fp, #-8]
   1a754:	add	r3, r3, #32
   1a758:	b	1a760 <__assert_fail@plt+0x9624>
   1a75c:	ldr	r3, [fp, #-8]
   1a760:	mov	r0, r3
   1a764:	add	sp, fp, #0
   1a768:	pop	{fp}		; (ldr fp, [sp], #4)
   1a76c:	bx	lr
   1a770:	push	{fp}		; (str fp, [sp, #-4]!)
   1a774:	add	fp, sp, #0
   1a778:	sub	sp, sp, #12
   1a77c:	str	r0, [fp, #-8]
   1a780:	ldr	r3, [fp, #-8]
   1a784:	sub	r3, r3, #97	; 0x61
   1a788:	cmp	r3, #25
   1a78c:	bhi	1a79c <__assert_fail@plt+0x9660>
   1a790:	ldr	r3, [fp, #-8]
   1a794:	sub	r3, r3, #32
   1a798:	b	1a7a0 <__assert_fail@plt+0x9664>
   1a79c:	ldr	r3, [fp, #-8]
   1a7a0:	mov	r0, r3
   1a7a4:	add	sp, fp, #0
   1a7a8:	pop	{fp}		; (ldr fp, [sp], #4)
   1a7ac:	bx	lr
   1a7b0:	subs	r2, r1, #1
   1a7b4:	bxeq	lr
   1a7b8:	bcc	1a990 <__assert_fail@plt+0x9854>
   1a7bc:	cmp	r0, r1
   1a7c0:	bls	1a974 <__assert_fail@plt+0x9838>
   1a7c4:	tst	r1, r2
   1a7c8:	beq	1a980 <__assert_fail@plt+0x9844>
   1a7cc:	clz	r3, r0
   1a7d0:	clz	r2, r1
   1a7d4:	sub	r3, r2, r3
   1a7d8:	rsbs	r3, r3, #31
   1a7dc:	addne	r3, r3, r3, lsl #1
   1a7e0:	mov	r2, #0
   1a7e4:	addne	pc, pc, r3, lsl #2
   1a7e8:	nop			; (mov r0, r0)
   1a7ec:	cmp	r0, r1, lsl #31
   1a7f0:	adc	r2, r2, r2
   1a7f4:	subcs	r0, r0, r1, lsl #31
   1a7f8:	cmp	r0, r1, lsl #30
   1a7fc:	adc	r2, r2, r2
   1a800:	subcs	r0, r0, r1, lsl #30
   1a804:	cmp	r0, r1, lsl #29
   1a808:	adc	r2, r2, r2
   1a80c:	subcs	r0, r0, r1, lsl #29
   1a810:	cmp	r0, r1, lsl #28
   1a814:	adc	r2, r2, r2
   1a818:	subcs	r0, r0, r1, lsl #28
   1a81c:	cmp	r0, r1, lsl #27
   1a820:	adc	r2, r2, r2
   1a824:	subcs	r0, r0, r1, lsl #27
   1a828:	cmp	r0, r1, lsl #26
   1a82c:	adc	r2, r2, r2
   1a830:	subcs	r0, r0, r1, lsl #26
   1a834:	cmp	r0, r1, lsl #25
   1a838:	adc	r2, r2, r2
   1a83c:	subcs	r0, r0, r1, lsl #25
   1a840:	cmp	r0, r1, lsl #24
   1a844:	adc	r2, r2, r2
   1a848:	subcs	r0, r0, r1, lsl #24
   1a84c:	cmp	r0, r1, lsl #23
   1a850:	adc	r2, r2, r2
   1a854:	subcs	r0, r0, r1, lsl #23
   1a858:	cmp	r0, r1, lsl #22
   1a85c:	adc	r2, r2, r2
   1a860:	subcs	r0, r0, r1, lsl #22
   1a864:	cmp	r0, r1, lsl #21
   1a868:	adc	r2, r2, r2
   1a86c:	subcs	r0, r0, r1, lsl #21
   1a870:	cmp	r0, r1, lsl #20
   1a874:	adc	r2, r2, r2
   1a878:	subcs	r0, r0, r1, lsl #20
   1a87c:	cmp	r0, r1, lsl #19
   1a880:	adc	r2, r2, r2
   1a884:	subcs	r0, r0, r1, lsl #19
   1a888:	cmp	r0, r1, lsl #18
   1a88c:	adc	r2, r2, r2
   1a890:	subcs	r0, r0, r1, lsl #18
   1a894:	cmp	r0, r1, lsl #17
   1a898:	adc	r2, r2, r2
   1a89c:	subcs	r0, r0, r1, lsl #17
   1a8a0:	cmp	r0, r1, lsl #16
   1a8a4:	adc	r2, r2, r2
   1a8a8:	subcs	r0, r0, r1, lsl #16
   1a8ac:	cmp	r0, r1, lsl #15
   1a8b0:	adc	r2, r2, r2
   1a8b4:	subcs	r0, r0, r1, lsl #15
   1a8b8:	cmp	r0, r1, lsl #14
   1a8bc:	adc	r2, r2, r2
   1a8c0:	subcs	r0, r0, r1, lsl #14
   1a8c4:	cmp	r0, r1, lsl #13
   1a8c8:	adc	r2, r2, r2
   1a8cc:	subcs	r0, r0, r1, lsl #13
   1a8d0:	cmp	r0, r1, lsl #12
   1a8d4:	adc	r2, r2, r2
   1a8d8:	subcs	r0, r0, r1, lsl #12
   1a8dc:	cmp	r0, r1, lsl #11
   1a8e0:	adc	r2, r2, r2
   1a8e4:	subcs	r0, r0, r1, lsl #11
   1a8e8:	cmp	r0, r1, lsl #10
   1a8ec:	adc	r2, r2, r2
   1a8f0:	subcs	r0, r0, r1, lsl #10
   1a8f4:	cmp	r0, r1, lsl #9
   1a8f8:	adc	r2, r2, r2
   1a8fc:	subcs	r0, r0, r1, lsl #9
   1a900:	cmp	r0, r1, lsl #8
   1a904:	adc	r2, r2, r2
   1a908:	subcs	r0, r0, r1, lsl #8
   1a90c:	cmp	r0, r1, lsl #7
   1a910:	adc	r2, r2, r2
   1a914:	subcs	r0, r0, r1, lsl #7
   1a918:	cmp	r0, r1, lsl #6
   1a91c:	adc	r2, r2, r2
   1a920:	subcs	r0, r0, r1, lsl #6
   1a924:	cmp	r0, r1, lsl #5
   1a928:	adc	r2, r2, r2
   1a92c:	subcs	r0, r0, r1, lsl #5
   1a930:	cmp	r0, r1, lsl #4
   1a934:	adc	r2, r2, r2
   1a938:	subcs	r0, r0, r1, lsl #4
   1a93c:	cmp	r0, r1, lsl #3
   1a940:	adc	r2, r2, r2
   1a944:	subcs	r0, r0, r1, lsl #3
   1a948:	cmp	r0, r1, lsl #2
   1a94c:	adc	r2, r2, r2
   1a950:	subcs	r0, r0, r1, lsl #2
   1a954:	cmp	r0, r1, lsl #1
   1a958:	adc	r2, r2, r2
   1a95c:	subcs	r0, r0, r1, lsl #1
   1a960:	cmp	r0, r1
   1a964:	adc	r2, r2, r2
   1a968:	subcs	r0, r0, r1
   1a96c:	mov	r0, r2
   1a970:	bx	lr
   1a974:	moveq	r0, #1
   1a978:	movne	r0, #0
   1a97c:	bx	lr
   1a980:	clz	r2, r1
   1a984:	rsb	r2, r2, #31
   1a988:	lsr	r0, r0, r2
   1a98c:	bx	lr
   1a990:	cmp	r0, #0
   1a994:	mvnne	r0, #0
   1a998:	b	1ac38 <__assert_fail@plt+0x9afc>
   1a99c:	cmp	r1, #0
   1a9a0:	beq	1a990 <__assert_fail@plt+0x9854>
   1a9a4:	push	{r0, r1, lr}
   1a9a8:	bl	1a7b0 <__assert_fail@plt+0x9674>
   1a9ac:	pop	{r1, r2, lr}
   1a9b0:	mul	r3, r2, r0
   1a9b4:	sub	r1, r1, r3
   1a9b8:	bx	lr
   1a9bc:	cmp	r1, #0
   1a9c0:	beq	1abcc <__assert_fail@plt+0x9a90>
   1a9c4:	eor	ip, r0, r1
   1a9c8:	rsbmi	r1, r1, #0
   1a9cc:	subs	r2, r1, #1
   1a9d0:	beq	1ab98 <__assert_fail@plt+0x9a5c>
   1a9d4:	movs	r3, r0
   1a9d8:	rsbmi	r3, r0, #0
   1a9dc:	cmp	r3, r1
   1a9e0:	bls	1aba4 <__assert_fail@plt+0x9a68>
   1a9e4:	tst	r1, r2
   1a9e8:	beq	1abb4 <__assert_fail@plt+0x9a78>
   1a9ec:	clz	r2, r3
   1a9f0:	clz	r0, r1
   1a9f4:	sub	r2, r0, r2
   1a9f8:	rsbs	r2, r2, #31
   1a9fc:	addne	r2, r2, r2, lsl #1
   1aa00:	mov	r0, #0
   1aa04:	addne	pc, pc, r2, lsl #2
   1aa08:	nop			; (mov r0, r0)
   1aa0c:	cmp	r3, r1, lsl #31
   1aa10:	adc	r0, r0, r0
   1aa14:	subcs	r3, r3, r1, lsl #31
   1aa18:	cmp	r3, r1, lsl #30
   1aa1c:	adc	r0, r0, r0
   1aa20:	subcs	r3, r3, r1, lsl #30
   1aa24:	cmp	r3, r1, lsl #29
   1aa28:	adc	r0, r0, r0
   1aa2c:	subcs	r3, r3, r1, lsl #29
   1aa30:	cmp	r3, r1, lsl #28
   1aa34:	adc	r0, r0, r0
   1aa38:	subcs	r3, r3, r1, lsl #28
   1aa3c:	cmp	r3, r1, lsl #27
   1aa40:	adc	r0, r0, r0
   1aa44:	subcs	r3, r3, r1, lsl #27
   1aa48:	cmp	r3, r1, lsl #26
   1aa4c:	adc	r0, r0, r0
   1aa50:	subcs	r3, r3, r1, lsl #26
   1aa54:	cmp	r3, r1, lsl #25
   1aa58:	adc	r0, r0, r0
   1aa5c:	subcs	r3, r3, r1, lsl #25
   1aa60:	cmp	r3, r1, lsl #24
   1aa64:	adc	r0, r0, r0
   1aa68:	subcs	r3, r3, r1, lsl #24
   1aa6c:	cmp	r3, r1, lsl #23
   1aa70:	adc	r0, r0, r0
   1aa74:	subcs	r3, r3, r1, lsl #23
   1aa78:	cmp	r3, r1, lsl #22
   1aa7c:	adc	r0, r0, r0
   1aa80:	subcs	r3, r3, r1, lsl #22
   1aa84:	cmp	r3, r1, lsl #21
   1aa88:	adc	r0, r0, r0
   1aa8c:	subcs	r3, r3, r1, lsl #21
   1aa90:	cmp	r3, r1, lsl #20
   1aa94:	adc	r0, r0, r0
   1aa98:	subcs	r3, r3, r1, lsl #20
   1aa9c:	cmp	r3, r1, lsl #19
   1aaa0:	adc	r0, r0, r0
   1aaa4:	subcs	r3, r3, r1, lsl #19
   1aaa8:	cmp	r3, r1, lsl #18
   1aaac:	adc	r0, r0, r0
   1aab0:	subcs	r3, r3, r1, lsl #18
   1aab4:	cmp	r3, r1, lsl #17
   1aab8:	adc	r0, r0, r0
   1aabc:	subcs	r3, r3, r1, lsl #17
   1aac0:	cmp	r3, r1, lsl #16
   1aac4:	adc	r0, r0, r0
   1aac8:	subcs	r3, r3, r1, lsl #16
   1aacc:	cmp	r3, r1, lsl #15
   1aad0:	adc	r0, r0, r0
   1aad4:	subcs	r3, r3, r1, lsl #15
   1aad8:	cmp	r3, r1, lsl #14
   1aadc:	adc	r0, r0, r0
   1aae0:	subcs	r3, r3, r1, lsl #14
   1aae4:	cmp	r3, r1, lsl #13
   1aae8:	adc	r0, r0, r0
   1aaec:	subcs	r3, r3, r1, lsl #13
   1aaf0:	cmp	r3, r1, lsl #12
   1aaf4:	adc	r0, r0, r0
   1aaf8:	subcs	r3, r3, r1, lsl #12
   1aafc:	cmp	r3, r1, lsl #11
   1ab00:	adc	r0, r0, r0
   1ab04:	subcs	r3, r3, r1, lsl #11
   1ab08:	cmp	r3, r1, lsl #10
   1ab0c:	adc	r0, r0, r0
   1ab10:	subcs	r3, r3, r1, lsl #10
   1ab14:	cmp	r3, r1, lsl #9
   1ab18:	adc	r0, r0, r0
   1ab1c:	subcs	r3, r3, r1, lsl #9
   1ab20:	cmp	r3, r1, lsl #8
   1ab24:	adc	r0, r0, r0
   1ab28:	subcs	r3, r3, r1, lsl #8
   1ab2c:	cmp	r3, r1, lsl #7
   1ab30:	adc	r0, r0, r0
   1ab34:	subcs	r3, r3, r1, lsl #7
   1ab38:	cmp	r3, r1, lsl #6
   1ab3c:	adc	r0, r0, r0
   1ab40:	subcs	r3, r3, r1, lsl #6
   1ab44:	cmp	r3, r1, lsl #5
   1ab48:	adc	r0, r0, r0
   1ab4c:	subcs	r3, r3, r1, lsl #5
   1ab50:	cmp	r3, r1, lsl #4
   1ab54:	adc	r0, r0, r0
   1ab58:	subcs	r3, r3, r1, lsl #4
   1ab5c:	cmp	r3, r1, lsl #3
   1ab60:	adc	r0, r0, r0
   1ab64:	subcs	r3, r3, r1, lsl #3
   1ab68:	cmp	r3, r1, lsl #2
   1ab6c:	adc	r0, r0, r0
   1ab70:	subcs	r3, r3, r1, lsl #2
   1ab74:	cmp	r3, r1, lsl #1
   1ab78:	adc	r0, r0, r0
   1ab7c:	subcs	r3, r3, r1, lsl #1
   1ab80:	cmp	r3, r1
   1ab84:	adc	r0, r0, r0
   1ab88:	subcs	r3, r3, r1
   1ab8c:	cmp	ip, #0
   1ab90:	rsbmi	r0, r0, #0
   1ab94:	bx	lr
   1ab98:	teq	ip, r0
   1ab9c:	rsbmi	r0, r0, #0
   1aba0:	bx	lr
   1aba4:	movcc	r0, #0
   1aba8:	asreq	r0, ip, #31
   1abac:	orreq	r0, r0, #1
   1abb0:	bx	lr
   1abb4:	clz	r2, r1
   1abb8:	rsb	r2, r2, #31
   1abbc:	cmp	ip, #0
   1abc0:	lsr	r0, r3, r2
   1abc4:	rsbmi	r0, r0, #0
   1abc8:	bx	lr
   1abcc:	cmp	r0, #0
   1abd0:	mvngt	r0, #-2147483648	; 0x80000000
   1abd4:	movlt	r0, #-2147483648	; 0x80000000
   1abd8:	b	1ac38 <__assert_fail@plt+0x9afc>
   1abdc:	cmp	r1, #0
   1abe0:	beq	1abcc <__assert_fail@plt+0x9a90>
   1abe4:	push	{r0, r1, lr}
   1abe8:	bl	1a9c4 <__assert_fail@plt+0x9888>
   1abec:	pop	{r1, r2, lr}
   1abf0:	mul	r3, r2, r0
   1abf4:	sub	r1, r1, r3
   1abf8:	bx	lr
   1abfc:	cmp	r3, #0
   1ac00:	cmpeq	r2, #0
   1ac04:	bne	1ac1c <__assert_fail@plt+0x9ae0>
   1ac08:	cmp	r1, #0
   1ac0c:	cmpeq	r0, #0
   1ac10:	mvnne	r1, #0
   1ac14:	mvnne	r0, #0
   1ac18:	b	1ac38 <__assert_fail@plt+0x9afc>
   1ac1c:	sub	sp, sp, #8
   1ac20:	push	{sp, lr}
   1ac24:	bl	1ac48 <__assert_fail@plt+0x9b0c>
   1ac28:	ldr	lr, [sp, #4]
   1ac2c:	add	sp, sp, #8
   1ac30:	pop	{r2, r3}
   1ac34:	bx	lr
   1ac38:	push	{r1, lr}
   1ac3c:	mov	r0, #8
   1ac40:	bl	10e90 <raise@plt>
   1ac44:	pop	{r1, pc}
   1ac48:	cmp	r1, r3
   1ac4c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ac50:	cmpeq	r0, r2
   1ac54:	mov	r4, r0
   1ac58:	mov	r5, r1
   1ac5c:	ldr	r9, [sp, #28]
   1ac60:	movcc	r0, #0
   1ac64:	movcc	r1, #0
   1ac68:	bcc	1ad60 <__assert_fail@plt+0x9c24>
   1ac6c:	cmp	r3, #0
   1ac70:	clzeq	ip, r2
   1ac74:	clzne	ip, r3
   1ac78:	addeq	ip, ip, #32
   1ac7c:	cmp	r5, #0
   1ac80:	clzeq	r1, r4
   1ac84:	addeq	r1, r1, #32
   1ac88:	clzne	r1, r5
   1ac8c:	sub	ip, ip, r1
   1ac90:	sub	lr, ip, #32
   1ac94:	lsl	r7, r3, ip
   1ac98:	rsb	r8, ip, #32
   1ac9c:	orr	r7, r7, r2, lsl lr
   1aca0:	orr	r7, r7, r2, lsr r8
   1aca4:	lsl	r6, r2, ip
   1aca8:	cmp	r5, r7
   1acac:	cmpeq	r4, r6
   1acb0:	movcc	r0, #0
   1acb4:	movcc	r1, #0
   1acb8:	bcc	1acd4 <__assert_fail@plt+0x9b98>
   1acbc:	mov	r3, #1
   1acc0:	subs	r4, r4, r6
   1acc4:	lsl	r1, r3, lr
   1acc8:	lsl	r0, r3, ip
   1accc:	orr	r1, r1, r3, lsr r8
   1acd0:	sbc	r5, r5, r7
   1acd4:	cmp	ip, #0
   1acd8:	beq	1ad60 <__assert_fail@plt+0x9c24>
   1acdc:	lsrs	r3, r7, #1
   1ace0:	rrx	r2, r6
   1ace4:	mov	r6, ip
   1ace8:	b	1ad0c <__assert_fail@plt+0x9bd0>
   1acec:	subs	r4, r4, r2
   1acf0:	sbc	r5, r5, r3
   1acf4:	adds	r4, r4, r4
   1acf8:	adc	r5, r5, r5
   1acfc:	adds	r4, r4, #1
   1ad00:	adc	r5, r5, #0
   1ad04:	subs	r6, r6, #1
   1ad08:	beq	1ad28 <__assert_fail@plt+0x9bec>
   1ad0c:	cmp	r5, r3
   1ad10:	cmpeq	r4, r2
   1ad14:	bcs	1acec <__assert_fail@plt+0x9bb0>
   1ad18:	adds	r4, r4, r4
   1ad1c:	adc	r5, r5, r5
   1ad20:	subs	r6, r6, #1
   1ad24:	bne	1ad0c <__assert_fail@plt+0x9bd0>
   1ad28:	lsr	r6, r4, ip
   1ad2c:	lsr	r7, r5, ip
   1ad30:	orr	r6, r6, r5, lsl r8
   1ad34:	adds	r2, r0, r4
   1ad38:	orr	r6, r6, r5, lsr lr
   1ad3c:	adc	r3, r1, r5
   1ad40:	lsl	r1, r7, ip
   1ad44:	orr	r1, r1, r6, lsl lr
   1ad48:	lsl	r0, r6, ip
   1ad4c:	orr	r1, r1, r6, lsr r8
   1ad50:	subs	r0, r2, r0
   1ad54:	mov	r4, r6
   1ad58:	mov	r5, r7
   1ad5c:	sbc	r1, r3, r1
   1ad60:	cmp	r9, #0
   1ad64:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1ad68:	strd	r4, [r9]
   1ad6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ad70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad74:	mov	r7, r0
   1ad78:	ldr	r6, [pc, #72]	; 1adc8 <__assert_fail@plt+0x9c8c>
   1ad7c:	ldr	r5, [pc, #72]	; 1adcc <__assert_fail@plt+0x9c90>
   1ad80:	add	r6, pc, r6
   1ad84:	add	r5, pc, r5
   1ad88:	sub	r6, r6, r5
   1ad8c:	mov	r8, r1
   1ad90:	mov	r9, r2
   1ad94:	bl	10e4c <fdopen@plt-0x20>
   1ad98:	asrs	r6, r6, #2
   1ad9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ada0:	mov	r4, #0
   1ada4:	add	r4, r4, #1
   1ada8:	ldr	r3, [r5], #4
   1adac:	mov	r2, r9
   1adb0:	mov	r1, r8
   1adb4:	mov	r0, r7
   1adb8:	blx	r3
   1adbc:	cmp	r6, r4
   1adc0:	bne	1ada4 <__assert_fail@plt+0x9c68>
   1adc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1adc8:	andeq	r2, r1, r8, lsl #3
   1adcc:	andeq	r2, r1, r0, lsl #3
   1add0:	bx	lr
   1add4:	ldr	r3, [pc, #12]	; 1ade8 <__assert_fail@plt+0x9cac>
   1add8:	mov	r1, #0
   1addc:	add	r3, pc, r3
   1ade0:	ldr	r2, [r3]
   1ade4:	b	1104c <__cxa_atexit@plt>
   1ade8:	andeq	r2, r1, r4, lsr #6

Disassembly of section .fini:

0001adec <.fini>:
   1adec:	push	{r3, lr}
   1adf0:	pop	{r3, pc}
