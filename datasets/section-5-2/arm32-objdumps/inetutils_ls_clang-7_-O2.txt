
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010cd8 <.init>:
   10cd8:	push	{r3, lr}
   10cdc:	bl	10fbc <__assert_fail@plt+0x48>
   10ce0:	pop	{r3, pc}

Disassembly of section .plt:

00010ce4 <fstatfs64@plt-0x14>:
   10ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce8:	ldr	lr, [pc, #4]	; 10cf4 <fstatfs64@plt-0x4>
   10cec:	add	lr, pc, lr
   10cf0:	ldr	pc, [lr, #8]!
   10cf4:	andeq	r8, r1, ip, lsl #6

00010cf8 <fstatfs64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #780]!	; 0x30c

00010d04 <calloc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #772]!	; 0x304

00010d10 <raise@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #764]!	; 0x2fc

00010d1c <strcmp@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #756]!	; 0x2f4

00010d28 <strtol@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #748]!	; 0x2ec

00010d34 <getpwuid@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d40 <printf@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #732]!	; 0x2dc

00010d4c <getuid@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #724]!	; 0x2d4

00010d58 <memmove@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #716]!	; 0x2cc

00010d64 <free@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d70 <memcpy@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #700]!	; 0x2bc

00010d7c <time@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #692]!	; 0x2b4

00010d88 <ctime@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #684]!	; 0x2ac

00010d94 <realloc@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #676]!	; 0x2a4

00010da0 <funlockfile@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #668]!	; 0x29c

00010dac <__fxstatat64@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #660]!	; 0x294

00010db8 <__fxstat64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #652]!	; 0x28c

00010dc4 <readlink@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #644]!	; 0x284

00010dd0 <fwrite@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #636]!	; 0x27c

00010ddc <ioctl@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #628]!	; 0x274

00010de8 <strcpy@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #620]!	; 0x26c

00010df4 <open64@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #612]!	; 0x264

00010e00 <getenv@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #604]!	; 0x25c

00010e0c <malloc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #596]!	; 0x254

00010e18 <__libc_start_main@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #588]!	; 0x24c

00010e24 <strerror@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #580]!	; 0x244

00010e30 <__gmon_start__@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #572]!	; 0x23c

00010e3c <__ctype_b_loc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #564]!	; 0x234

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #556]!	; 0x22c

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #548]!	; 0x224

00010e60 <openat64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #540]!	; 0x21c

00010e6c <fprintf@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #532]!	; 0x214

00010e78 <__errno_location@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #524]!	; 0x20c

00010e84 <snprintf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #516]!	; 0x204

00010e90 <memset@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #508]!	; 0x1fc

00010e9c <fcntl64@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #500]!	; 0x1f4

00010ea8 <strrchr@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #492]!	; 0x1ec

00010eb4 <fputc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ec0 <readdir64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #476]!	; 0x1dc

00010ecc <fdopendir@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ed8 <putc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ee4 <dirfd@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #452]!	; 0x1c4

00010ef0 <flockfile@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #444]!	; 0x1bc

00010efc <fchdir@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #436]!	; 0x1b4

00010f08 <qsort@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #428]!	; 0x1ac

00010f14 <__xstat64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f20 <isatty@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #412]!	; 0x19c

00010f2c <strncmp@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #404]!	; 0x194

00010f38 <abort@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #396]!	; 0x18c

00010f44 <close@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #388]!	; 0x184

00010f50 <__lxstat64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #380]!	; 0x17c

00010f5c <closedir@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #372]!	; 0x174

00010f68 <getgrgid@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #364]!	; 0x16c

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #356]!	; 0x164

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e18 <__libc_start_main@plt>
   10fac:	bl	10f38 <abort@plt>
   10fb0:	andeq	r8, r1, r4, ror r4
   10fb4:	andeq	r1, r1, r0, ror r0
   10fb8:	andeq	r8, r1, r4, lsl r4
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e30 <__gmon_start__@plt>
   10fd8:	andeq	r8, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, r4, ror #1
   10fe0:	ldr	r0, [pc, #24]	; 11000 <__assert_fail@plt+0x8c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x90>
   10fe8:	cmp	r3, r0
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0x94>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	r9, r2, r0, lsl r1
   11004:	andeq	r9, r2, r0, lsl r1
   11008:	andeq	r0, r0, r0
   1100c:	ldr	r0, [pc, #36]	; 11038 <__assert_fail@plt+0xc4>
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	sub	r1, r1, r0
   11018:	asr	r1, r1, #2
   1101c:	add	r1, r1, r1, lsr #31
   11020:	asrs	r1, r1, #1
   11024:	bxeq	lr
   11028:	ldr	r3, [pc, #16]	; 11040 <__assert_fail@plt+0xcc>
   1102c:	cmp	r3, #0
   11030:	bxeq	lr
   11034:	bx	r3
   11038:	andeq	r9, r2, r0, lsl r1
   1103c:	andeq	r9, r2, r0, lsl r1
   11040:	andeq	r0, r0, r0
   11044:	push	{r4, lr}
   11048:	ldr	r4, [pc, #24]	; 11068 <__assert_fail@plt+0xf4>
   1104c:	ldrb	r3, [r4]
   11050:	cmp	r3, #0
   11054:	popne	{r4, pc}
   11058:	bl	10fe0 <__assert_fail@plt+0x6c>
   1105c:	mov	r3, #1
   11060:	strb	r3, [r4]
   11064:	pop	{r4, pc}
   11068:	andeq	r9, r2, r8, lsl r1
   1106c:	b	1100c <__assert_fail@plt+0x98>
   11070:	b	11074 <__assert_fail@plt+0x100>
   11074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11078:	add	fp, sp, #28
   1107c:	sub	sp, sp, #12
   11080:	mov	r4, r1
   11084:	movw	r1, #37232	; 0x9170
   11088:	mov	r5, r0
   1108c:	mov	r0, #0
   11090:	movw	r8, #37220	; 0x9164
   11094:	movw	sl, #37260	; 0x918c
   11098:	movw	r6, #37216	; 0x9160
   1109c:	movw	r9, #37304	; 0x91b8
   110a0:	mov	r7, #1
   110a4:	movt	r1, #2
   110a8:	movt	r8, #2
   110ac:	movt	sl, #2
   110b0:	movt	r6, #2
   110b4:	movt	r9, #2
   110b8:	str	r0, [r1]
   110bc:	movw	r1, #37152	; 0x9120
   110c0:	str	r0, [r8]
   110c4:	str	r0, [sl]
   110c8:	str	r0, [r6]
   110cc:	str	r0, [r9]
   110d0:	movt	r1, #2
   110d4:	strb	r0, [r1]
   110d8:	movw	r1, #37224	; 0x9168
   110dc:	movt	r1, #2
   110e0:	str	r0, [r1]
   110e4:	movw	r1, #37276	; 0x919c
   110e8:	movt	r1, #2
   110ec:	str	r0, [r1]
   110f0:	movw	r1, #37240	; 0x9178
   110f4:	movt	r1, #2
   110f8:	str	r0, [r1]
   110fc:	movw	r1, #37292	; 0x91ac
   11100:	movt	r1, #2
   11104:	str	r0, [r1]
   11108:	movw	r1, #37296	; 0x91b0
   1110c:	movt	r1, #2
   11110:	str	r0, [r1]
   11114:	movw	r1, #37280	; 0x91a0
   11118:	movt	r1, #2
   1111c:	str	r0, [r1]
   11120:	movw	r1, #37272	; 0x9198
   11124:	movt	r1, #2
   11128:	str	r0, [r1]
   1112c:	movw	r1, #37244	; 0x917c
   11130:	movt	r1, #2
   11134:	str	r0, [r1]
   11138:	movw	r1, #37300	; 0x91b4
   1113c:	movt	r1, #2
   11140:	str	r0, [r1]
   11144:	movw	r1, #37268	; 0x9194
   11148:	movt	r1, #2
   1114c:	str	r0, [r1]
   11150:	movw	r1, #37236	; 0x9174
   11154:	movt	r1, #2
   11158:	str	r0, [r1]
   1115c:	movw	r1, #37228	; 0x916c
   11160:	movt	r1, #2
   11164:	str	r0, [r1]
   11168:	movw	r1, #37212	; 0x915c
   1116c:	movt	r1, #2
   11170:	str	r0, [r1]
   11174:	movw	r1, #37208	; 0x9158
   11178:	movt	r1, #2
   1117c:	str	r0, [r1]
   11180:	movw	r1, #37284	; 0x91a4
   11184:	movt	r1, #2
   11188:	str	r0, [r1]
   1118c:	movw	r1, #37252	; 0x9184
   11190:	movt	r1, #2
   11194:	str	r0, [r1]
   11198:	movw	r1, #37264	; 0x9190
   1119c:	movt	r1, #2
   111a0:	str	r0, [r1]
   111a4:	movw	r1, #37248	; 0x9180
   111a8:	movt	r1, #2
   111ac:	str	r0, [r1]
   111b0:	mov	r0, #1
   111b4:	bl	10f20 <isatty@plt>
   111b8:	cmp	r0, #0
   111bc:	beq	1121c <__assert_fail@plt+0x2a8>
   111c0:	movw	r0, #33924	; 0x8484
   111c4:	movt	r0, #1
   111c8:	bl	10e00 <getenv@plt>
   111cc:	cmp	r0, #0
   111d0:	beq	111f0 <__assert_fail@plt+0x27c>
   111d4:	mov	r1, #0
   111d8:	mov	r2, #10
   111dc:	bl	10d28 <strtol@plt>
   111e0:	movw	r1, #37104	; 0x90f0
   111e4:	movt	r1, #2
   111e8:	str	r0, [r1]
   111ec:	b	11208 <__assert_fail@plt+0x294>
   111f0:	add	r2, sp, #4
   111f4:	mov	r0, #1
   111f8:	movw	r1, #21523	; 0x5413
   111fc:	bl	17cac <__assert_fail@plt+0x6d38>
   11200:	cmp	r0, #0
   11204:	beq	11834 <__assert_fail@plt+0x8c0>
   11208:	movw	r1, #37300	; 0x91b4
   1120c:	mov	r6, r8
   11210:	mov	r0, #1
   11214:	movt	r1, #2
   11218:	str	r0, [r1]
   1121c:	str	r7, [r6]
   11220:	bl	10d4c <getuid@plt>
   11224:	cmp	r0, #0
   11228:	bne	1123c <__assert_fail@plt+0x2c8>
   1122c:	movw	r1, #37296	; 0x91b0
   11230:	mov	r0, #1
   11234:	movt	r1, #2
   11238:	str	r0, [r1]
   1123c:	movw	r1, #37124	; 0x9104
   11240:	movw	r7, #33932	; 0x848c
   11244:	movw	r8, #37276	; 0x919c
   11248:	mov	r0, #1
   1124c:	mov	r6, #20
   11250:	movt	r1, #2
   11254:	movt	r7, #1
   11258:	movt	r8, #2
   1125c:	str	r0, [r1]
   11260:	b	11270 <__assert_fail@plt+0x2fc>
   11264:	movw	r1, #37220	; 0x9164
   11268:	movt	r1, #2
   1126c:	str	r0, [r1]
   11270:	mov	r0, r5
   11274:	mov	r1, r4
   11278:	mov	r2, r7
   1127c:	bl	16864 <__assert_fail@plt+0x58f0>
   11280:	add	r0, r0, #1
   11284:	cmp	r0, #121	; 0x79
   11288:	bhi	117fc <__assert_fail@plt+0x888>
   1128c:	add	r1, pc, #0
   11290:	ldr	pc, [r1, r0, lsl #2]
   11294:	andeq	r1, r1, r4, lsl r7
   11298:	strdeq	r1, [r1], -ip
   1129c:	strdeq	r1, [r1], -ip
   112a0:	strdeq	r1, [r1], -ip
   112a4:	strdeq	r1, [r1], -ip
   112a8:	strdeq	r1, [r1], -ip
   112ac:	strdeq	r1, [r1], -ip
   112b0:	strdeq	r1, [r1], -ip
   112b4:	strdeq	r1, [r1], -ip
   112b8:	strdeq	r1, [r1], -ip
   112bc:	strdeq	r1, [r1], -ip
   112c0:	strdeq	r1, [r1], -ip
   112c4:	strdeq	r1, [r1], -ip
   112c8:	strdeq	r1, [r1], -ip
   112cc:	strdeq	r1, [r1], -ip
   112d0:	strdeq	r1, [r1], -ip
   112d4:	strdeq	r1, [r1], -ip
   112d8:	strdeq	r1, [r1], -ip
   112dc:	strdeq	r1, [r1], -ip
   112e0:	strdeq	r1, [r1], -ip
   112e4:	strdeq	r1, [r1], -ip
   112e8:	strdeq	r1, [r1], -ip
   112ec:	strdeq	r1, [r1], -ip
   112f0:	strdeq	r1, [r1], -ip
   112f4:	strdeq	r1, [r1], -ip
   112f8:	strdeq	r1, [r1], -ip
   112fc:	strdeq	r1, [r1], -ip
   11300:	strdeq	r1, [r1], -ip
   11304:	strdeq	r1, [r1], -ip
   11308:	strdeq	r1, [r1], -ip
   1130c:	strdeq	r1, [r1], -ip
   11310:	strdeq	r1, [r1], -ip
   11314:	strdeq	r1, [r1], -ip
   11318:	strdeq	r1, [r1], -ip
   1131c:	strdeq	r1, [r1], -ip
   11320:	strdeq	r1, [r1], -ip
   11324:	strdeq	r1, [r1], -ip
   11328:	strdeq	r1, [r1], -ip
   1132c:	strdeq	r1, [r1], -ip
   11330:	strdeq	r1, [r1], -ip
   11334:	strdeq	r1, [r1], -ip
   11338:	strdeq	r1, [r1], -ip
   1133c:	strdeq	r1, [r1], -ip
   11340:	strdeq	r1, [r1], -ip
   11344:	strdeq	r1, [r1], -ip
   11348:	strdeq	r1, [r1], -ip
   1134c:	strdeq	r1, [r1], -ip
   11350:	strdeq	r1, [r1], -ip
   11354:	strdeq	r1, [r1], -ip
   11358:	strdeq	r1, [r1], -ip
   1135c:	andeq	r1, r1, ip, ror r4
   11360:	strdeq	r1, [r1], -ip
   11364:	strdeq	r1, [r1], -ip
   11368:	strdeq	r1, [r1], -ip
   1136c:	strdeq	r1, [r1], -ip
   11370:	strdeq	r1, [r1], -ip
   11374:	strdeq	r1, [r1], -ip
   11378:	strdeq	r1, [r1], -ip
   1137c:	strdeq	r1, [r1], -ip
   11380:	strdeq	r1, [r1], -ip
   11384:	strdeq	r1, [r1], -ip
   11388:	strdeq	r1, [r1], -ip
   1138c:	strdeq	r1, [r1], -ip
   11390:	strdeq	r1, [r1], -ip
   11394:	strdeq	r1, [r1], -ip
   11398:	strdeq	r1, [r1], -ip
   1139c:	andeq	r1, r1, r0, asr #10
   113a0:	strdeq	r1, [r1], -ip
   113a4:	muleq	r1, ip, r4
   113a8:	strdeq	r1, [r1], -ip
   113ac:	strdeq	r1, [r1], -ip
   113b0:	andeq	r1, r1, ip, asr #9
   113b4:	strdeq	r1, [r1], -ip
   113b8:	strdeq	r1, [r1], -ip
   113bc:	strdeq	r1, [r1], -ip
   113c0:	strdeq	r1, [r1], -ip
   113c4:	strdeq	r1, [r1], -ip
   113c8:	andeq	r1, r1, r0, ror #9
   113cc:	strdeq	r1, [r1], -ip
   113d0:	strdeq	r1, [r1], -ip
   113d4:	strdeq	r1, [r1], -ip
   113d8:	strdeq	r1, [r1], -ip
   113dc:	strdeq	r1, [r1], -ip
   113e0:	andeq	r1, r1, ip, ror #9
   113e4:	andeq	r1, r1, r0, lsl #10
   113e8:	andeq	r1, r1, r4, lsl r5
   113ec:	strdeq	r1, [r1], -ip
   113f0:	strdeq	r1, [r1], -ip
   113f4:	andeq	r1, r1, r8, lsr #10
   113f8:	strdeq	r1, [r1], -ip
   113fc:	strdeq	r1, [r1], -ip
   11400:	strdeq	r1, [r1], -ip
   11404:	strdeq	r1, [r1], -ip
   11408:	strdeq	r1, [r1], -ip
   1140c:	strdeq	r1, [r1], -ip
   11410:	strdeq	r1, [r1], -ip
   11414:	strdeq	r1, [r1], -ip
   11418:	strdeq	r1, [r1], -ip
   1141c:	andeq	r1, r1, ip, lsr r5
   11420:	strdeq	r1, [r1], -ip
   11424:	andeq	r1, r1, r4, asr r5
   11428:	andeq	r1, r1, r8, ror r5
   1142c:	strdeq	r1, [r1], -ip
   11430:	muleq	r1, ip, r5
   11434:	andeq	r1, r1, r0, ror r2
   11438:	strdeq	r1, [r1], -ip
   1143c:			; <UNDEFINED> instruction: 0x000115b0
   11440:	strdeq	r1, [r1], -ip
   11444:	andeq	r1, r1, r4, asr #11
   11448:	ldrdeq	r1, [r1], -r8
   1144c:	strdeq	r1, [r1], -r4
   11450:	andeq	r1, r1, r4, lsr #12
   11454:	andeq	r1, r1, r4, asr r6
   11458:	andeq	r1, r1, r8, ror #12
   1145c:	andeq	r1, r1, ip, ror r6
   11460:	muleq	r1, r0, r6
   11464:	andeq	r1, r1, r4, lsr #13
   11468:			; <UNDEFINED> instruction: 0x000116b8
   1146c:	andeq	r1, r1, ip, asr #13
   11470:	strdeq	r1, [r1], -ip
   11474:	strdeq	r1, [r1], -ip
   11478:	strdeq	r1, [r1], -r0
   1147c:	movw	r1, #37216	; 0x9160
   11480:	mov	r0, #0
   11484:	mov	r2, #1
   11488:	movt	r1, #2
   1148c:	str	r0, [r9]
   11490:	str	r0, [sl]
   11494:	str	r2, [r1]
   11498:	b	1164c <__assert_fail@plt+0x6d8>
   1149c:	movw	r1, #37220	; 0x9164
   114a0:	mov	r2, #1
   114a4:	mov	r0, #0
   114a8:	movt	r1, #2
   114ac:	str	r0, [r9]
   114b0:	str	r0, [r8]
   114b4:	str	r0, [sl]
   114b8:	str	r2, [r1]
   114bc:	movw	r1, #37216	; 0x9160
   114c0:	movt	r1, #2
   114c4:	str	r0, [r1]
   114c8:	b	11270 <__assert_fail@plt+0x2fc>
   114cc:	movw	r1, #37248	; 0x9180
   114d0:	mov	r0, #1
   114d4:	movt	r1, #2
   114d8:	str	r0, [r1]
   114dc:	b	11270 <__assert_fail@plt+0x2fc>
   114e0:	bic	r0, r6, #18
   114e4:	orr	r6, r0, #2
   114e8:	b	11270 <__assert_fail@plt+0x2fc>
   114ec:	movw	r1, #37228	; 0x916c
   114f0:	mov	r0, #1
   114f4:	movt	r1, #2
   114f8:	str	r0, [r1]
   114fc:	b	11270 <__assert_fail@plt+0x2fc>
   11500:	movw	r0, #37148	; 0x911c
   11504:	mov	r1, #1
   11508:	movt	r0, #2
   1150c:	str	r1, [r0]
   11510:	b	11270 <__assert_fail@plt+0x2fc>
   11514:	movw	r1, #37268	; 0x9194
   11518:	mov	r0, #1
   1151c:	movt	r1, #2
   11520:	str	r0, [r1]
   11524:	b	11270 <__assert_fail@plt+0x2fc>
   11528:	movw	r1, #37252	; 0x9184
   1152c:	mov	r0, #1
   11530:	movt	r1, #2
   11534:	str	r0, [r1]
   11538:	b	11270 <__assert_fail@plt+0x2fc>
   1153c:	orr	r6, r6, #32
   11540:	movw	r1, #37296	; 0x91b0
   11544:	mov	r0, #1
   11548:	movt	r1, #2
   1154c:	str	r0, [r1]
   11550:	b	11270 <__assert_fail@plt+0x2fc>
   11554:	movw	r1, #37240	; 0x9178
   11558:	mov	r0, #0
   1155c:	movt	r1, #2
   11560:	str	r0, [r1]
   11564:	movw	r1, #37284	; 0x91a4
   11568:	mov	r0, #1
   1156c:	movt	r1, #2
   11570:	str	r0, [r1]
   11574:	b	11270 <__assert_fail@plt+0x2fc>
   11578:	movw	r1, #37228	; 0x916c
   1157c:	mov	r0, #0
   11580:	movt	r1, #2
   11584:	str	r0, [r1]
   11588:	movw	r1, #37280	; 0x91a0
   1158c:	mov	r0, #1
   11590:	movt	r1, #2
   11594:	str	r0, [r1]
   11598:	b	11270 <__assert_fail@plt+0x2fc>
   1159c:	movw	r1, #37244	; 0x917c
   115a0:	mov	r0, #1
   115a4:	movt	r1, #2
   115a8:	str	r0, [r1]
   115ac:	b	11270 <__assert_fail@plt+0x2fc>
   115b0:	movw	r1, #37232	; 0x9170
   115b4:	mov	r0, #1
   115b8:	movt	r1, #2
   115bc:	str	r0, [r1]
   115c0:	b	11270 <__assert_fail@plt+0x2fc>
   115c4:	movw	r0, #37288	; 0x91a8
   115c8:	mov	r1, #1024	; 0x400
   115cc:	movt	r0, #2
   115d0:	str	r1, [r0]
   115d4:	b	11270 <__assert_fail@plt+0x2fc>
   115d8:	movw	r1, #37272	; 0x9198
   115dc:	mov	r0, #0
   115e0:	movt	r1, #2
   115e4:	str	r0, [r1]
   115e8:	mov	r1, #1
   115ec:	str	r1, [sl]
   115f0:	b	1163c <__assert_fail@plt+0x6c8>
   115f4:	movw	r0, #37216	; 0x9160
   115f8:	mov	r1, #0
   115fc:	movt	r0, #2
   11600:	str	r1, [sl]
   11604:	str	r1, [r8]
   11608:	str	r1, [r0]
   1160c:	mov	r0, #1
   11610:	str	r0, [r9]
   11614:	movw	r0, #37220	; 0x9164
   11618:	movt	r0, #2
   1161c:	str	r1, [r0]
   11620:	b	11270 <__assert_fail@plt+0x2fc>
   11624:	movw	r1, #37272	; 0x9198
   11628:	mov	r0, #1
   1162c:	movt	r1, #2
   11630:	str	r0, [sl]
   11634:	str	r0, [r1]
   11638:	mov	r0, #0
   1163c:	movw	r1, #37216	; 0x9160
   11640:	str	r0, [r9]
   11644:	movt	r1, #2
   11648:	str	r0, [r1]
   1164c:	str	r0, [r8]
   11650:	b	11264 <__assert_fail@plt+0x2f0>
   11654:	movw	r1, #37224	; 0x9168
   11658:	mov	r0, #1
   1165c:	movt	r1, #2
   11660:	str	r0, [r1]
   11664:	b	11270 <__assert_fail@plt+0x2fc>
   11668:	movw	r1, #37264	; 0x9190
   1166c:	mov	r0, #1
   11670:	movt	r1, #2
   11674:	str	r0, [r1]
   11678:	b	11270 <__assert_fail@plt+0x2fc>
   1167c:	movw	r1, #37300	; 0x91b4
   11680:	mov	r0, #1
   11684:	movt	r1, #2
   11688:	str	r0, [r1]
   1168c:	b	11270 <__assert_fail@plt+0x2fc>
   11690:	movw	r1, #37236	; 0x9174
   11694:	mov	r0, #1
   11698:	movt	r1, #2
   1169c:	str	r0, [r1]
   116a0:	b	11270 <__assert_fail@plt+0x2fc>
   116a4:	movw	r1, #37208	; 0x9158
   116a8:	mov	r0, #1
   116ac:	movt	r1, #2
   116b0:	str	r0, [r1]
   116b4:	b	11270 <__assert_fail@plt+0x2fc>
   116b8:	movw	r0, #37148	; 0x911c
   116bc:	mov	r1, #2
   116c0:	movt	r0, #2
   116c4:	str	r1, [r0]
   116c8:	b	11270 <__assert_fail@plt+0x2fc>
   116cc:	movw	r1, #37284	; 0x91a4
   116d0:	mov	r0, #0
   116d4:	movt	r1, #2
   116d8:	str	r0, [r1]
   116dc:	movw	r1, #37240	; 0x9178
   116e0:	mov	r0, #1
   116e4:	movt	r1, #2
   116e8:	str	r0, [r1]
   116ec:	b	11270 <__assert_fail@plt+0x2fc>
   116f0:	mov	r1, #1
   116f4:	mov	r0, #0
   116f8:	str	r1, [r8]
   116fc:	movw	r1, #37216	; 0x9160
   11700:	str	r0, [r9]
   11704:	str	r0, [sl]
   11708:	movt	r1, #2
   1170c:	str	r0, [r1]
   11710:	b	11264 <__assert_fail@plt+0x2f0>
   11714:	movw	r0, #37248	; 0x9180
   11718:	movw	r3, #37280	; 0x91a0
   1171c:	ldr	r2, [sl]
   11720:	movw	r7, #37232	; 0x9170
   11724:	movt	r0, #2
   11728:	movt	r3, #2
   1172c:	movt	r7, #2
   11730:	ldr	r0, [r0]
   11734:	ldr	r3, [r3]
   11738:	ldr	r7, [r7]
   1173c:	orr	r1, r0, r2
   11740:	orr	r1, r1, r3
   11744:	movw	r3, #37208	; 0x9158
   11748:	movt	r3, #2
   1174c:	ldr	r3, [r3]
   11750:	orr	r3, r3, r2
   11754:	orr	r7, r3, r7
   11758:	orr	r0, r7, r0
   1175c:	movw	r7, #37264	; 0x9190
   11760:	movt	r7, #2
   11764:	ldr	r7, [r7]
   11768:	orr	r7, r0, r7
   1176c:	movw	r0, #37148	; 0x911c
   11770:	movt	r0, #2
   11774:	ldr	r0, [r0]
   11778:	orrs	r7, r7, r0
   1177c:	orreq	r6, r6, #8
   11780:	cmp	r1, #0
   11784:	movw	r1, #37252	; 0x9184
   11788:	movt	r1, #2
   1178c:	orreq	r6, r6, #1
   11790:	ldr	r1, [r1]
   11794:	cmp	r1, #0
   11798:	movw	r1, #37124	; 0x9104
   1179c:	orrne	r6, r6, #128	; 0x80
   117a0:	cmp	r3, #0
   117a4:	movt	r1, #2
   117a8:	movwne	r3, #37288	; 0x91a8
   117ac:	movne	r7, #2
   117b0:	ldr	r1, [r1]
   117b4:	movtne	r3, #2
   117b8:	strne	r7, [r3]
   117bc:	movw	r3, #37236	; 0x9174
   117c0:	movt	r3, #2
   117c4:	ldr	r3, [r3]
   117c8:	cmp	r3, #0
   117cc:	beq	11808 <__assert_fail@plt+0x894>
   117d0:	cmp	r0, #2
   117d4:	beq	11844 <__assert_fail@plt+0x8d0>
   117d8:	cmp	r0, #1
   117dc:	beq	1186c <__assert_fail@plt+0x8f8>
   117e0:	cmp	r0, #0
   117e4:	bne	11934 <__assert_fail@plt+0x9c0>
   117e8:	movw	r0, #37156	; 0x9124
   117ec:	movw	r3, #12416	; 0x3080
   117f0:	movt	r0, #2
   117f4:	movt	r3, #1
   117f8:	b	11930 <__assert_fail@plt+0x9bc>
   117fc:	bl	13044 <__assert_fail@plt+0x20d0>
   11800:	sub	sp, fp, #28
   11804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11808:	cmp	r0, #2
   1180c:	beq	11880 <__assert_fail@plt+0x90c>
   11810:	cmp	r0, #1
   11814:	beq	118a8 <__assert_fail@plt+0x934>
   11818:	cmp	r0, #0
   1181c:	bne	11934 <__assert_fail@plt+0x9c0>
   11820:	movw	r0, #37156	; 0x9124
   11824:	movw	r3, #12404	; 0x3074
   11828:	movt	r0, #2
   1182c:	movt	r3, #1
   11830:	b	11930 <__assert_fail@plt+0x9bc>
   11834:	ldrh	r0, [sp, #6]
   11838:	cmp	r0, #0
   1183c:	bne	111e0 <__assert_fail@plt+0x26c>
   11840:	b	11208 <__assert_fail@plt+0x294>
   11844:	movw	r0, #37240	; 0x9178
   11848:	movt	r0, #2
   1184c:	ldr	r0, [r0]
   11850:	cmp	r0, #0
   11854:	beq	118bc <__assert_fail@plt+0x948>
   11858:	movw	r0, #37156	; 0x9124
   1185c:	movw	r3, #12744	; 0x31c8
   11860:	movt	r0, #2
   11864:	movt	r3, #1
   11868:	b	11930 <__assert_fail@plt+0x9bc>
   1186c:	movw	r0, #37156	; 0x9124
   11870:	movw	r3, #13136	; 0x3350
   11874:	movt	r0, #2
   11878:	movt	r3, #1
   1187c:	b	11930 <__assert_fail@plt+0x9bc>
   11880:	movw	r0, #37240	; 0x9178
   11884:	movt	r0, #2
   11888:	ldr	r0, [r0]
   1188c:	cmp	r0, #0
   11890:	beq	118e4 <__assert_fail@plt+0x970>
   11894:	movw	r0, #37156	; 0x9124
   11898:	movw	r3, #12640	; 0x3160
   1189c:	movt	r0, #2
   118a0:	movt	r3, #1
   118a4:	b	11930 <__assert_fail@plt+0x9bc>
   118a8:	movw	r0, #37156	; 0x9124
   118ac:	movw	r3, #13056	; 0x3300
   118b0:	movt	r0, #2
   118b4:	movt	r3, #1
   118b8:	b	11930 <__assert_fail@plt+0x9bc>
   118bc:	movw	r0, #37284	; 0x91a4
   118c0:	movt	r0, #2
   118c4:	ldr	r0, [r0]
   118c8:	cmp	r0, #0
   118cc:	beq	1190c <__assert_fail@plt+0x998>
   118d0:	movw	r0, #37156	; 0x9124
   118d4:	movw	r3, #12952	; 0x3298
   118d8:	movt	r0, #2
   118dc:	movt	r3, #1
   118e0:	b	11930 <__assert_fail@plt+0x9bc>
   118e4:	movw	r0, #37284	; 0x91a4
   118e8:	movt	r0, #2
   118ec:	ldr	r0, [r0]
   118f0:	cmp	r0, #0
   118f4:	beq	11920 <__assert_fail@plt+0x9ac>
   118f8:	movw	r0, #37156	; 0x9124
   118fc:	movw	r3, #12848	; 0x3230
   11900:	movt	r0, #2
   11904:	movt	r3, #1
   11908:	b	11930 <__assert_fail@plt+0x9bc>
   1190c:	movw	r0, #37156	; 0x9124
   11910:	movw	r3, #12536	; 0x30f8
   11914:	movt	r0, #2
   11918:	movt	r3, #1
   1191c:	b	11930 <__assert_fail@plt+0x9bc>
   11920:	movw	r0, #37156	; 0x9124
   11924:	movw	r3, #12432	; 0x3090
   11928:	movt	r0, #2
   1192c:	movt	r3, #1
   11930:	str	r3, [r0]
   11934:	movw	r3, #37216	; 0x9160
   11938:	sub	r0, r5, r1
   1193c:	movt	r3, #2
   11940:	ldr	r3, [r3]
   11944:	cmp	r3, #0
   11948:	beq	11958 <__assert_fail@plt+0x9e4>
   1194c:	movw	r2, #8760	; 0x2238
   11950:	movt	r2, #1
   11954:	b	119a0 <__assert_fail@plt+0xa2c>
   11958:	ldr	r3, [r8]
   1195c:	cmp	r3, #0
   11960:	beq	11970 <__assert_fail@plt+0x9fc>
   11964:	movw	r2, #11480	; 0x2cd8
   11968:	movt	r2, #1
   1196c:	b	119a0 <__assert_fail@plt+0xa2c>
   11970:	cmp	r2, #0
   11974:	beq	11984 <__assert_fail@plt+0xa10>
   11978:	movw	r2, #9248	; 0x2420
   1197c:	movt	r2, #1
   11980:	b	119a0 <__assert_fail@plt+0xa2c>
   11984:	ldr	r3, [r9]
   11988:	movw	r7, #10684	; 0x29bc
   1198c:	movw	r2, #11960	; 0x2eb8
   11990:	movt	r7, #1
   11994:	movt	r2, #1
   11998:	cmp	r3, #0
   1199c:	moveq	r2, r7
   119a0:	movw	r3, #37160	; 0x9128
   119a4:	cmp	r0, #0
   119a8:	movt	r3, #2
   119ac:	str	r2, [r3]
   119b0:	beq	119bc <__assert_fail@plt+0xa48>
   119b4:	add	r1, r4, r1, lsl #2
   119b8:	b	119c8 <__assert_fail@plt+0xa54>
   119bc:	movw	r1, #37112	; 0x90f8
   119c0:	mov	r0, #1
   119c4:	movt	r1, #2
   119c8:	mov	r2, r6
   119cc:	bl	119e4 <__assert_fail@plt+0xa70>
   119d0:	movw	r0, #37256	; 0x9188
   119d4:	movt	r0, #2
   119d8:	ldr	r0, [r0]
   119dc:	sub	sp, fp, #28
   119e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119e8:	add	fp, sp, #28
   119ec:	sub	sp, sp, #4
   119f0:	mov	r8, r0
   119f4:	movw	r0, #37244	; 0x917c
   119f8:	mov	r7, r2
   119fc:	movw	r2, #7308	; 0x1c8c
   11a00:	mov	r6, r1
   11a04:	movt	r0, #2
   11a08:	movt	r2, #1
   11a0c:	ldr	r0, [r0]
   11a10:	cmp	r0, #0
   11a14:	mov	r0, r1
   11a18:	mov	r1, r7
   11a1c:	movne	r2, #0
   11a20:	bl	1352c <__assert_fail@plt+0x25b8>
   11a24:	cmp	r0, #0
   11a28:	beq	11c18 <__assert_fail@plt+0xca4>
   11a2c:	mov	r1, #0
   11a30:	mov	r5, r0
   11a34:	mov	r6, #0
   11a38:	bl	154f0 <__assert_fail@plt+0x457c>
   11a3c:	mov	r1, r0
   11a40:	mov	r0, #0
   11a44:	bl	11d34 <__assert_fail@plt+0xdc0>
   11a48:	movw	r0, #37280	; 0x91a0
   11a4c:	movt	r0, #2
   11a50:	ldr	r0, [r0]
   11a54:	cmp	r0, #0
   11a58:	bne	11c10 <__assert_fail@plt+0xc9c>
   11a5c:	movw	r1, #37228	; 0x916c
   11a60:	mov	r0, #4096	; 0x1000
   11a64:	movt	r1, #2
   11a68:	ldr	r1, [r1]
   11a6c:	cmp	r1, #0
   11a70:	andeq	r6, r0, r7, lsl #9
   11a74:	mov	r0, r5
   11a78:	bl	13e44 <__assert_fail@plt+0x2ed0>
   11a7c:	cmp	r0, #0
   11a80:	beq	11c00 <__assert_fail@plt+0xc8c>
   11a84:	movw	r7, #37296	; 0x91b0
   11a88:	movw	r4, #37152	; 0x9120
   11a8c:	mov	r9, r0
   11a90:	movt	r7, #2
   11a94:	movt	r4, #2
   11a98:	b	11b0c <__assert_fail@plt+0xb98>
   11a9c:	movw	r0, #37136	; 0x9110
   11aa0:	mov	sl, r4
   11aa4:	mov	r4, r7
   11aa8:	movt	r0, #2
   11aac:	ldr	r7, [r0]
   11ab0:	ldr	r0, [r9, #32]
   11ab4:	bl	10e24 <strerror@plt>
   11ab8:	movw	r1, #34137	; 0x8559
   11abc:	mov	r3, r0
   11ac0:	mov	r0, r7
   11ac4:	add	r2, r9, #168	; 0xa8
   11ac8:	mov	r7, r4
   11acc:	mov	r4, sl
   11ad0:	movt	r1, #1
   11ad4:	bl	10e6c <fprintf@plt>
   11ad8:	movw	r1, #37256	; 0x9188
   11adc:	mov	r0, #1
   11ae0:	movt	r1, #2
   11ae4:	str	r0, [r1]
   11ae8:	b	11bec <__assert_fail@plt+0xc78>
   11aec:	movw	r0, #37136	; 0x9110
   11af0:	movw	r1, #33983	; 0x84bf
   11af4:	add	r2, r9, #168	; 0xa8
   11af8:	movt	r0, #2
   11afc:	movt	r1, #1
   11b00:	ldr	r0, [r0]
   11b04:	bl	10e6c <fprintf@plt>
   11b08:	b	11bec <__assert_fail@plt+0xc78>
   11b0c:	ldrh	r0, [r9, #56]	; 0x38
   11b10:	sub	r0, r0, #1
   11b14:	cmp	r0, #6
   11b18:	bhi	11bec <__assert_fail@plt+0xc78>
   11b1c:	add	r1, pc, #0
   11b20:	ldr	pc, [r1, r0, lsl #2]
   11b24:	andeq	r1, r1, r0, asr #22
   11b28:	andeq	r1, r1, ip, ror #21
   11b2c:	andeq	r1, r1, ip, ror #23
   11b30:	muleq	r1, ip, sl
   11b34:	andeq	r1, r1, ip, ror #23
   11b38:	andeq	r1, r1, ip, ror #23
   11b3c:	muleq	r1, ip, sl
   11b40:	ldrb	r0, [r9, #168]	; 0xa8
   11b44:	cmp	r0, #46	; 0x2e
   11b48:	bne	11b64 <__assert_fail@plt+0xbf0>
   11b4c:	ldr	r0, [r9, #48]	; 0x30
   11b50:	cmp	r0, #0
   11b54:	beq	11b64 <__assert_fail@plt+0xbf0>
   11b58:	ldr	r0, [r7]
   11b5c:	cmp	r0, #0
   11b60:	beq	11bec <__assert_fail@plt+0xc78>
   11b64:	ldrb	r0, [r4]
   11b68:	cmp	r0, #1
   11b6c:	bne	11b84 <__assert_fail@plt+0xc10>
   11b70:	ldr	r1, [r9, #28]
   11b74:	movw	r0, #33977	; 0x84b9
   11b78:	movt	r0, #1
   11b7c:	bl	10d40 <printf@plt>
   11b80:	b	11ba4 <__assert_fail@plt+0xc30>
   11b84:	cmp	r8, #2
   11b88:	blt	11ba4 <__assert_fail@plt+0xc30>
   11b8c:	ldr	r1, [r9, #28]
   11b90:	movw	r0, #33978	; 0x84ba
   11b94:	movt	r0, #1
   11b98:	bl	10d40 <printf@plt>
   11b9c:	mov	r0, #1
   11ba0:	strb	r0, [r4]
   11ba4:	mov	r0, r5
   11ba8:	mov	r1, r6
   11bac:	bl	154f0 <__assert_fail@plt+0x457c>
   11bb0:	mov	sl, r0
   11bb4:	mov	r0, r9
   11bb8:	mov	r1, sl
   11bbc:	bl	11d34 <__assert_fail@plt+0xdc0>
   11bc0:	cmp	sl, #0
   11bc4:	beq	11bec <__assert_fail@plt+0xc78>
   11bc8:	movw	r0, #37228	; 0x916c
   11bcc:	movt	r0, #2
   11bd0:	ldr	r0, [r0]
   11bd4:	cmp	r0, #0
   11bd8:	bne	11bec <__assert_fail@plt+0xc78>
   11bdc:	mov	r0, r5
   11be0:	mov	r1, r9
   11be4:	mov	r2, #4
   11be8:	bl	154c4 <__assert_fail@plt+0x4550>
   11bec:	mov	r0, r5
   11bf0:	bl	13e44 <__assert_fail@plt+0x2ed0>
   11bf4:	mov	r9, r0
   11bf8:	cmp	r0, #0
   11bfc:	bne	11b0c <__assert_fail@plt+0xb98>
   11c00:	bl	10e78 <__errno_location@plt>
   11c04:	ldr	r0, [r0]
   11c08:	cmp	r0, #0
   11c0c:	bne	11c50 <__assert_fail@plt+0xcdc>
   11c10:	sub	sp, fp, #28
   11c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c18:	movw	r0, #37136	; 0x9110
   11c1c:	ldr	r4, [r6]
   11c20:	movt	r0, #2
   11c24:	ldr	r5, [r0]
   11c28:	bl	10e78 <__errno_location@plt>
   11c2c:	ldr	r0, [r0]
   11c30:	bl	10e24 <strerror@plt>
   11c34:	movw	r1, #33960	; 0x84a8
   11c38:	mov	r3, r0
   11c3c:	mov	r0, r5
   11c40:	mov	r2, r4
   11c44:	movt	r1, #1
   11c48:	bl	10e6c <fprintf@plt>
   11c4c:	b	11c74 <__assert_fail@plt+0xd00>
   11c50:	movw	r1, #37136	; 0x9110
   11c54:	movt	r1, #2
   11c58:	ldr	r4, [r1]
   11c5c:	bl	10e24 <strerror@plt>
   11c60:	movw	r1, #34012	; 0x84dc
   11c64:	mov	r2, r0
   11c68:	mov	r0, r4
   11c6c:	movt	r1, #1
   11c70:	bl	10e6c <fprintf@plt>
   11c74:	movw	r0, #37256	; 0x9188
   11c78:	mov	r1, #1
   11c7c:	movt	r0, #2
   11c80:	str	r1, [r0]
   11c84:	sub	sp, fp, #28
   11c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c8c:	ldr	r0, [r0]
   11c90:	mov	r2, #0
   11c94:	ldrh	r3, [r0, #56]	; 0x38
   11c98:	cmp	r3, #7
   11c9c:	beq	11cd4 <__assert_fail@plt+0xd60>
   11ca0:	ldr	r1, [r1]
   11ca4:	ldrh	ip, [r1, #56]	; 0x38
   11ca8:	cmp	ip, #7
   11cac:	beq	11cd4 <__assert_fail@plt+0xd60>
   11cb0:	cmp	r3, #10
   11cb4:	cmpne	ip, #10
   11cb8:	bne	11cdc <__assert_fail@plt+0xd68>
   11cbc:	mov	r2, #1
   11cc0:	cmp	ip, #10
   11cc4:	mvneq	r2, #0
   11cc8:	cmp	r3, #10
   11ccc:	cmpeq	ip, #10
   11cd0:	beq	11d18 <__assert_fail@plt+0xda4>
   11cd4:	mov	r0, r2
   11cd8:	bx	lr
   11cdc:	cmp	r3, ip
   11ce0:	beq	11d08 <__assert_fail@plt+0xd94>
   11ce4:	push	{fp, lr}
   11ce8:	mov	fp, sp
   11cec:	movw	r2, #37280	; 0x91a0
   11cf0:	ldr	lr, [r0, #48]	; 0x30
   11cf4:	movt	r2, #2
   11cf8:	ldr	r2, [r2]
   11cfc:	orrs	r2, r2, lr
   11d00:	pop	{fp, lr}
   11d04:	beq	11d1c <__assert_fail@plt+0xda8>
   11d08:	movw	r2, #37156	; 0x9124
   11d0c:	movt	r2, #2
   11d10:	ldr	r2, [r2]
   11d14:	bx	r2
   11d18:	b	13074 <__assert_fail@plt+0x2100>
   11d1c:	mov	r2, #1
   11d20:	cmp	r3, #1
   11d24:	mvnne	r2, #0
   11d28:	cmpne	ip, #1
   11d2c:	beq	11cd4 <__assert_fail@plt+0xd60>
   11d30:	b	11d08 <__assert_fail@plt+0xd94>
   11d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d38:	add	fp, sp, #28
   11d3c:	sub	sp, sp, #180	; 0xb4
   11d40:	cmp	r1, #0
   11d44:	beq	121ec <__assert_fail@plt+0x1278>
   11d48:	mov	lr, r0
   11d4c:	movw	r0, #37232	; 0x9170
   11d50:	movw	r2, #37260	; 0x918c
   11d54:	mov	sl, #0
   11d58:	str	r1, [sp, #4]
   11d5c:	mov	r4, r1
   11d60:	mov	r5, #0
   11d64:	mov	r7, #0
   11d68:	mov	r1, #0
   11d6c:	mov	ip, #0
   11d70:	movt	r0, #2
   11d74:	movt	r2, #2
   11d78:	str	lr, [sp, #12]
   11d7c:	ldr	r0, [r0]
   11d80:	ldr	r2, [r2]
   11d84:	orr	r0, r2, r0
   11d88:	movw	r2, #37208	; 0x9158
   11d8c:	movt	r2, #2
   11d90:	ldr	r2, [r2]
   11d94:	orr	r0, r0, r2
   11d98:	str	r0, [sp, #44]	; 0x2c
   11d9c:	mov	r0, #0
   11da0:	str	r0, [sp, #40]	; 0x28
   11da4:	mov	r0, #0
   11da8:	str	r0, [sp, #56]	; 0x38
   11dac:	mov	r0, #0
   11db0:	str	r0, [sp, #36]	; 0x24
   11db4:	mov	r0, #0
   11db8:	str	r0, [sp, #32]
   11dbc:	mov	r0, #0
   11dc0:	str	r0, [sp, #28]
   11dc4:	mov	r0, #0
   11dc8:	str	r0, [sp, #60]	; 0x3c
   11dcc:	mov	r0, #0
   11dd0:	str	r0, [sp, #8]
   11dd4:	mov	r0, #0
   11dd8:	str	r0, [sp, #52]	; 0x34
   11ddc:	b	11e38 <__assert_fail@plt+0xec4>
   11de0:	movw	r0, #37136	; 0x9110
   11de4:	mov	r9, ip
   11de8:	str	r1, [sp, #64]	; 0x40
   11dec:	movt	r0, #2
   11df0:	ldr	r6, [r0]
   11df4:	ldr	r0, [r4, #32]
   11df8:	bl	10e24 <strerror@plt>
   11dfc:	movw	r1, #34137	; 0x8559
   11e00:	mov	r3, r0
   11e04:	add	r2, r4, #168	; 0xa8
   11e08:	mov	r0, r6
   11e0c:	movt	r1, #1
   11e10:	bl	10e6c <fprintf@plt>
   11e14:	movw	r0, #37256	; 0x9188
   11e18:	mov	r1, #1
   11e1c:	ldr	lr, [sp, #12]
   11e20:	mov	ip, r9
   11e24:	movt	r0, #2
   11e28:	str	r1, [r4, #16]
   11e2c:	str	r1, [r0]
   11e30:	ldr	r1, [sp, #64]	; 0x40
   11e34:	b	120d8 <__assert_fail@plt+0x1164>
   11e38:	ldrh	r0, [r4, #56]	; 0x38
   11e3c:	cmp	r0, #10
   11e40:	cmpne	r0, #7
   11e44:	beq	11de0 <__assert_fail@plt+0xe6c>
   11e48:	cmp	lr, #0
   11e4c:	beq	11e68 <__assert_fail@plt+0xef4>
   11e50:	ldrb	r0, [r4, #168]	; 0xa8
   11e54:	cmp	r0, #46	; 0x2e
   11e58:	bne	11e90 <__assert_fail@plt+0xf1c>
   11e5c:	movw	r0, #37296	; 0x91b0
   11e60:	movt	r0, #2
   11e64:	b	11e78 <__assert_fail@plt+0xf04>
   11e68:	cmp	r0, #1
   11e6c:	bne	11e90 <__assert_fail@plt+0xf1c>
   11e70:	movw	r0, #37280	; 0x91a0
   11e74:	movt	r0, #2
   11e78:	ldr	r0, [r0]
   11e7c:	cmp	r0, #0
   11e80:	bne	11e90 <__assert_fail@plt+0xf1c>
   11e84:	mov	r0, #1
   11e88:	str	r0, [r4, #16]
   11e8c:	b	120d8 <__assert_fail@plt+0x1164>
   11e90:	ldr	r0, [r4, #52]	; 0x34
   11e94:	cmp	r0, r1
   11e98:	movhi	r1, r0
   11e9c:	ldr	r0, [sp, #44]	; 0x2c
   11ea0:	cmp	r0, #0
   11ea4:	beq	120d4 <__assert_fail@plt+0x1160>
   11ea8:	str	r1, [sp, #64]	; 0x40
   11eac:	str	r7, [sp, #48]	; 0x30
   11eb0:	ldr	r3, [sp, #60]	; 0x3c
   11eb4:	ldr	r9, [sp, #52]	; 0x34
   11eb8:	ldrd	r0, [r4, #160]	; 0xa0
   11ebc:	subs	r2, r3, r0
   11ec0:	rscs	r1, r1, #0
   11ec4:	ldr	r2, [r4, #84]	; 0x54
   11ec8:	movcc	r3, r0
   11ecc:	str	r3, [sp, #60]	; 0x3c
   11ed0:	ldrd	r0, [r4, #128]	; 0x80
   11ed4:	ldrd	r6, [r4, #112]	; 0x70
   11ed8:	subs	r3, r9, r0
   11edc:	rscs	r1, r1, r9, asr #31
   11ee0:	movlt	r9, r0
   11ee4:	subs	r1, sl, r6
   11ee8:	sbcs	r1, r5, r7
   11eec:	str	r9, [sp, #52]	; 0x34
   11ef0:	mov	r1, #0
   11ef4:	movwlt	r1, #1
   11ef8:	cmp	r1, #0
   11efc:	ldr	r1, [sp, #56]	; 0x38
   11f00:	movne	r5, r7
   11f04:	movne	sl, r6
   11f08:	cmp	r2, ip
   11f0c:	movhi	ip, r2
   11f10:	add	r1, r1, r0
   11f14:	movw	r0, #37260	; 0x918c
   11f18:	movt	r0, #2
   11f1c:	str	r1, [sp, #56]	; 0x38
   11f20:	ldr	r0, [r0]
   11f24:	cmp	r0, #0
   11f28:	beq	120cc <__assert_fail@plt+0x1158>
   11f2c:	movw	r0, #37272	; 0x9198
   11f30:	mov	r9, #0
   11f34:	str	ip, [sp, #20]
   11f38:	str	r5, [sp, #24]
   11f3c:	movt	r0, #2
   11f40:	ldr	r0, [r0]
   11f44:	cmp	r0, #0
   11f48:	beq	11f6c <__assert_fail@plt+0xff8>
   11f4c:	ldr	r0, [r4, #88]	; 0x58
   11f50:	mov	r1, #0
   11f54:	add	r2, sp, #90	; 0x5a
   11f58:	bl	17c50 <__assert_fail@plt+0x6cdc>
   11f5c:	mov	r8, r0
   11f60:	cmp	r9, #0
   11f64:	bne	11fb8 <__assert_fail@plt+0x1044>
   11f68:	b	11fa4 <__assert_fail@plt+0x1030>
   11f6c:	ldr	r0, [r4, #88]	; 0x58
   11f70:	bl	10d34 <getpwuid@plt>
   11f74:	cmp	r0, #0
   11f78:	mov	r8, #0
   11f7c:	mov	r9, #0
   11f80:	ldrne	r8, [r0]
   11f84:	ldr	r0, [r4, #92]	; 0x5c
   11f88:	bl	10f68 <getgrgid@plt>
   11f8c:	cmp	r0, #0
   11f90:	ldrne	r9, [r0]
   11f94:	cmp	r8, #0
   11f98:	beq	11f4c <__assert_fail@plt+0xfd8>
   11f9c:	cmp	r9, #0
   11fa0:	bne	11fb8 <__assert_fail@plt+0x1044>
   11fa4:	ldr	r0, [r4, #92]	; 0x5c
   11fa8:	mov	r1, #0
   11fac:	add	r2, sp, #69	; 0x45
   11fb0:	bl	17c50 <__assert_fail@plt+0x6cdc>
   11fb4:	mov	r9, r0
   11fb8:	mov	r0, r8
   11fbc:	bl	10e48 <strlen@plt>
   11fc0:	mov	r5, r0
   11fc4:	mov	r0, r9
   11fc8:	bl	10e48 <strlen@plt>
   11fcc:	movw	r1, #37224	; 0x9168
   11fd0:	ldr	r3, [sp, #40]	; 0x28
   11fd4:	movw	r2, #34257	; 0x85d1
   11fd8:	add	r7, r0, r5
   11fdc:	movt	r1, #2
   11fe0:	movt	r2, #1
   11fe4:	ldr	r1, [r1]
   11fe8:	cmp	r1, #0
   11fec:	movne	r3, r2
   11ff0:	mov	r2, #1
   11ff4:	str	r3, [sp, #40]	; 0x28
   11ff8:	ldr	r3, [sp, #28]
   11ffc:	moveq	r2, r3
   12000:	cmp	r3, #1
   12004:	movle	r3, r2
   12008:	ldr	r2, [sp, #36]	; 0x24
   1200c:	str	r3, [sp, #28]
   12010:	cmp	r5, r2
   12014:	movgt	r2, r5
   12018:	str	r2, [sp, #36]	; 0x24
   1201c:	ldr	r2, [sp, #32]
   12020:	cmp	r0, r2
   12024:	movgt	r2, r0
   12028:	cmp	r1, #0
   1202c:	movwne	r1, #1
   12030:	str	r2, [sp, #32]
   12034:	add	r0, r7, r1
   12038:	add	r0, r0, #19
   1203c:	bl	17e20 <__assert_fail@plt+0x6eac>
   12040:	cmp	r0, #0
   12044:	beq	121f4 <__assert_fail@plt+0x1280>
   12048:	str	sl, [sp, #16]
   1204c:	add	sl, r0, #12
   12050:	mov	r6, r0
   12054:	mov	r1, r8
   12058:	str	sl, [r0]
   1205c:	mov	r0, sl
   12060:	bl	10de8 <strcpy@plt>
   12064:	add	r0, sl, r5
   12068:	mov	r1, r9
   1206c:	add	r0, r0, #1
   12070:	str	r0, [r6, #4]
   12074:	bl	10de8 <strcpy@plt>
   12078:	ldr	r0, [r4, #80]	; 0x50
   1207c:	and	r0, r0, #45056	; 0xb000
   12080:	orr	r0, r0, #16384	; 0x4000
   12084:	cmp	r0, #24576	; 0x6000
   12088:	moveq	r0, #1
   1208c:	streq	r0, [sp, #8]
   12090:	movw	r0, #37224	; 0x9168
   12094:	movt	r0, #2
   12098:	ldr	r0, [r0]
   1209c:	cmp	r0, #0
   120a0:	beq	120b8 <__assert_fail@plt+0x1144>
   120a4:	ldr	r1, [sp, #40]	; 0x28
   120a8:	add	r0, sl, r7
   120ac:	add	r0, r0, #2
   120b0:	str	r0, [r6, #8]
   120b4:	bl	10de8 <strcpy@plt>
   120b8:	ldr	sl, [sp, #16]
   120bc:	ldr	r5, [sp, #24]
   120c0:	ldr	ip, [sp, #20]
   120c4:	ldr	lr, [sp, #12]
   120c8:	str	r6, [r4, #20]
   120cc:	ldr	r7, [sp, #48]	; 0x30
   120d0:	ldr	r1, [sp, #64]	; 0x40
   120d4:	add	r7, r7, #1
   120d8:	ldr	r4, [r4, #8]
   120dc:	cmp	r4, #0
   120e0:	bne	11e38 <__assert_fail@plt+0xec4>
   120e4:	ldr	r4, [sp, #4]
   120e8:	cmp	r7, #0
   120ec:	beq	121ec <__assert_fail@plt+0x1278>
   120f0:	ldr	r0, [sp, #44]	; 0x2c
   120f4:	str	r7, [fp, #-64]	; 0xffffffc0
   120f8:	str	r4, [fp, #-76]	; 0xffffffb4
   120fc:	str	r1, [fp, #-60]	; 0xffffffc4
   12100:	cmp	r0, #0
   12104:	beq	121a0 <__assert_fail@plt+0x122c>
   12108:	ldr	r0, [sp, #56]	; 0x38
   1210c:	sub	r6, fp, #97	; 0x61
   12110:	mov	r4, r5
   12114:	mov	r5, ip
   12118:	mov	r2, r6
   1211c:	str	r0, [fp, #-72]	; 0xffffffb8
   12120:	ldr	r0, [sp, #8]
   12124:	str	r0, [fp, #-68]	; 0xffffffbc
   12128:	ldr	r0, [sp, #52]	; 0x34
   1212c:	asr	r1, r0, #31
   12130:	bl	17c50 <__assert_fail@plt+0x6cdc>
   12134:	bl	10e48 <strlen@plt>
   12138:	str	r0, [fp, #-56]	; 0xffffffc8
   1213c:	ldr	r0, [sp, #28]
   12140:	mov	r1, #0
   12144:	mov	r2, r6
   12148:	str	r0, [fp, #-52]	; 0xffffffcc
   1214c:	ldr	r0, [sp, #32]
   12150:	str	r0, [fp, #-48]	; 0xffffffd0
   12154:	ldr	r0, [sp, #60]	; 0x3c
   12158:	bl	17c50 <__assert_fail@plt+0x6cdc>
   1215c:	bl	10e48 <strlen@plt>
   12160:	str	r0, [fp, #-44]	; 0xffffffd4
   12164:	mov	r0, r5
   12168:	mov	r1, #0
   1216c:	mov	r2, r6
   12170:	bl	17c50 <__assert_fail@plt+0x6cdc>
   12174:	bl	10e48 <strlen@plt>
   12178:	mov	r1, r4
   1217c:	ldr	r4, [sp, #4]
   12180:	str	r0, [fp, #-40]	; 0xffffffd8
   12184:	mov	r0, sl
   12188:	mov	r2, r6
   1218c:	bl	17c50 <__assert_fail@plt+0x6cdc>
   12190:	bl	10e48 <strlen@plt>
   12194:	str	r0, [fp, #-36]	; 0xffffffdc
   12198:	ldr	r0, [sp, #36]	; 0x24
   1219c:	str	r0, [fp, #-32]	; 0xffffffe0
   121a0:	movw	r0, #37160	; 0x9128
   121a4:	movt	r0, #2
   121a8:	ldr	r1, [r0]
   121ac:	sub	r0, fp, #76	; 0x4c
   121b0:	blx	r1
   121b4:	movw	r0, #37152	; 0x9120
   121b8:	mov	r1, #1
   121bc:	movt	r0, #2
   121c0:	strb	r1, [r0]
   121c4:	movw	r0, #37260	; 0x918c
   121c8:	movt	r0, #2
   121cc:	ldr	r0, [r0]
   121d0:	cmp	r0, #0
   121d4:	beq	121ec <__assert_fail@plt+0x1278>
   121d8:	ldr	r0, [r4, #20]
   121dc:	bl	13504 <__assert_fail@plt+0x2590>
   121e0:	ldr	r4, [r4, #8]
   121e4:	cmp	r4, #0
   121e8:	bne	121d8 <__assert_fail@plt+0x1264>
   121ec:	sub	sp, fp, #28
   121f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121f4:	movw	r0, #37136	; 0x9110
   121f8:	movt	r0, #2
   121fc:	ldr	r4, [r0]
   12200:	bl	10e78 <__errno_location@plt>
   12204:	ldr	r0, [r0]
   12208:	bl	10e24 <strerror@plt>
   1220c:	movw	r1, #34025	; 0x84e9
   12210:	mov	r2, r0
   12214:	mov	r0, r4
   12218:	movt	r1, #1
   1221c:	bl	10e6c <fprintf@plt>
   12220:	movw	r1, #37256	; 0x9188
   12224:	mov	r0, #1
   12228:	movt	r1, #2
   1222c:	str	r0, [r1]
   12230:	sub	sp, fp, #28
   12234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12238:	push	{r4, r5, r6, sl, fp, lr}
   1223c:	add	fp, sp, #16
   12240:	ldr	r5, [r0]
   12244:	cmp	r5, #0
   12248:	popeq	{r4, r5, r6, sl, fp, pc}
   1224c:	movw	r6, #37140	; 0x9114
   12250:	mov	r4, r0
   12254:	movt	r6, #2
   12258:	ldr	r0, [r5, #16]
   1225c:	cmp	r0, #1
   12260:	beq	12280 <__assert_fail@plt+0x130c>
   12264:	ldr	r2, [r4, #20]
   12268:	ldr	r1, [r4, #32]
   1226c:	mov	r0, r5
   12270:	bl	12290 <__assert_fail@plt+0x131c>
   12274:	ldr	r1, [r6]
   12278:	mov	r0, #10
   1227c:	bl	10ed8 <putc@plt>
   12280:	ldr	r5, [r5, #8]
   12284:	cmp	r5, #0
   12288:	bne	12258 <__assert_fail@plt+0x12e4>
   1228c:	pop	{r4, r5, r6, sl, fp, pc}
   12290:	push	{r4, r5, r6, sl, fp, lr}
   12294:	add	fp, sp, #16
   12298:	mov	r5, r0
   1229c:	movw	r0, #37232	; 0x9170
   122a0:	mov	r6, r2
   122a4:	movt	r0, #2
   122a8:	ldr	r0, [r0]
   122ac:	cmp	r0, #0
   122b0:	beq	122cc <__assert_fail@plt+0x1358>
   122b4:	ldr	r2, [r5, #160]	; 0xa0
   122b8:	movw	r0, #34047	; 0x84ff
   122bc:	movt	r0, #1
   122c0:	bl	10d40 <printf@plt>
   122c4:	mov	r4, r0
   122c8:	b	122d0 <__assert_fail@plt+0x135c>
   122cc:	mov	r4, #0
   122d0:	movw	r0, #37208	; 0x9158
   122d4:	movt	r0, #2
   122d8:	ldr	r0, [r0]
   122dc:	cmp	r0, #0
   122e0:	beq	12324 <__assert_fail@plt+0x13b0>
   122e4:	movw	r2, #37288	; 0x91a8
   122e8:	ldrd	r0, [r5, #128]	; 0x80
   122ec:	movt	r2, #2
   122f0:	ldr	r2, [r2]
   122f4:	sub	r3, r2, #1
   122f8:	adds	r0, r0, r3
   122fc:	adc	r1, r1, r3, asr #31
   12300:	asr	r3, r2, #31
   12304:	bl	181cc <__assert_fail@plt+0x7258>
   12308:	mov	r2, r0
   1230c:	movw	r0, #34092	; 0x852c
   12310:	mov	r3, r1
   12314:	mov	r1, r6
   12318:	movt	r0, #1
   1231c:	bl	10d40 <printf@plt>
   12320:	add	r4, r0, r4
   12324:	add	r0, r5, #168	; 0xa8
   12328:	bl	12fc0 <__assert_fail@plt+0x204c>
   1232c:	add	r4, r0, r4
   12330:	movw	r0, #37248	; 0x9180
   12334:	movt	r0, #2
   12338:	ldr	r0, [r0]
   1233c:	cmp	r0, #0
   12340:	beq	12378 <__assert_fail@plt+0x1404>
   12344:	ldr	r0, [r5, #80]	; 0x50
   12348:	and	r1, r0, #61440	; 0xf000
   1234c:	cmp	r1, #40960	; 0xa000
   12350:	bge	123a4 <__assert_fail@plt+0x1430>
   12354:	cmp	r1, #4096	; 0x1000
   12358:	beq	123c4 <__assert_fail@plt+0x1450>
   1235c:	cmp	r1, #16384	; 0x4000
   12360:	bne	123ec <__assert_fail@plt+0x1478>
   12364:	movw	r0, #37140	; 0x9114
   12368:	movt	r0, #2
   1236c:	ldr	r1, [r0]
   12370:	mov	r0, #47	; 0x2f
   12374:	b	12404 <__assert_fail@plt+0x1490>
   12378:	movw	r0, #37264	; 0x9190
   1237c:	movt	r0, #2
   12380:	ldr	r0, [r0]
   12384:	cmp	r0, #0
   12388:	beq	1239c <__assert_fail@plt+0x1428>
   1238c:	ldr	r0, [r5, #80]	; 0x50
   12390:	and	r1, r0, #61440	; 0xf000
   12394:	cmp	r1, #16384	; 0x4000
   12398:	beq	12348 <__assert_fail@plt+0x13d4>
   1239c:	mov	r0, r4
   123a0:	pop	{r4, r5, r6, sl, fp, pc}
   123a4:	beq	123d8 <__assert_fail@plt+0x1464>
   123a8:	cmp	r1, #49152	; 0xc000
   123ac:	bne	123ec <__assert_fail@plt+0x1478>
   123b0:	movw	r0, #37140	; 0x9114
   123b4:	movt	r0, #2
   123b8:	ldr	r1, [r0]
   123bc:	mov	r0, #61	; 0x3d
   123c0:	b	12404 <__assert_fail@plt+0x1490>
   123c4:	movw	r0, #37140	; 0x9114
   123c8:	movt	r0, #2
   123cc:	ldr	r1, [r0]
   123d0:	mov	r0, #124	; 0x7c
   123d4:	b	12404 <__assert_fail@plt+0x1490>
   123d8:	movw	r0, #37140	; 0x9114
   123dc:	movt	r0, #2
   123e0:	ldr	r1, [r0]
   123e4:	mov	r0, #64	; 0x40
   123e8:	b	12404 <__assert_fail@plt+0x1490>
   123ec:	tst	r0, #73	; 0x49
   123f0:	beq	12418 <__assert_fail@plt+0x14a4>
   123f4:	movw	r0, #37140	; 0x9114
   123f8:	movt	r0, #2
   123fc:	ldr	r1, [r0]
   12400:	mov	r0, #42	; 0x2a
   12404:	bl	10ed8 <putc@plt>
   12408:	mov	r0, #1
   1240c:	add	r4, r0, r4
   12410:	mov	r0, r4
   12414:	pop	{r4, r5, r6, sl, fp, pc}
   12418:	mov	r0, #0
   1241c:	b	1240c <__assert_fail@plt+0x1498>
   12420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12424:	add	fp, sp, #28
   12428:	sub	sp, sp, #44	; 0x2c
   1242c:	sub	sp, sp, #8192	; 0x2000
   12430:	ldr	sl, [r0]
   12434:	mov	r5, r0
   12438:	ldr	r0, [sl, #48]	; 0x30
   1243c:	cmp	r0, #0
   12440:	beq	12490 <__assert_fail@plt+0x151c>
   12444:	movw	r0, #37260	; 0x918c
   12448:	movw	r1, #37208	; 0x9158
   1244c:	movt	r0, #2
   12450:	movt	r1, #2
   12454:	ldr	r0, [r0]
   12458:	ldr	r1, [r1]
   1245c:	orrs	r0, r1, r0
   12460:	beq	12490 <__assert_fail@plt+0x151c>
   12464:	movw	r0, #37288	; 0x91a8
   12468:	ldr	r1, [r5, #4]
   1246c:	movt	r0, #2
   12470:	ldr	r0, [r0]
   12474:	add	r1, r1, r0
   12478:	sub	r1, r1, #1
   1247c:	udiv	r1, r1, r0
   12480:	movw	r0, #34036	; 0x84f4
   12484:	movt	r0, #1
   12488:	bl	10d40 <printf@plt>
   1248c:	ldr	sl, [r5]
   12490:	cmp	sl, #0
   12494:	beq	12818 <__assert_fail@plt+0x18a4>
   12498:	add	r9, sp, #40	; 0x28
   1249c:	b	124d4 <__assert_fail@plt+0x1560>
   124a0:	movw	r0, #37136	; 0x9110
   124a4:	movt	r0, #2
   124a8:	ldr	r7, [r0]
   124ac:	bl	10e78 <__errno_location@plt>
   124b0:	ldr	r0, [r0]
   124b4:	bl	10e24 <strerror@plt>
   124b8:	movw	r1, #34132	; 0x8554
   124bc:	mov	r3, r0
   124c0:	mov	r0, r7
   124c4:	mov	r2, r6
   124c8:	movt	r1, #1
   124cc:	bl	10e6c <fprintf@plt>
   124d0:	b	127f8 <__assert_fail@plt+0x1884>
   124d4:	ldr	r0, [sl, #16]
   124d8:	cmp	r0, #1
   124dc:	beq	1280c <__assert_fail@plt+0x1898>
   124e0:	movw	r0, #37232	; 0x9170
   124e4:	movt	r0, #2
   124e8:	ldr	r0, [r0]
   124ec:	cmp	r0, #0
   124f0:	beq	12508 <__assert_fail@plt+0x1594>
   124f4:	ldr	r2, [sl, #160]	; 0xa0
   124f8:	ldr	r1, [r5, #32]
   124fc:	movw	r0, #34047	; 0x84ff
   12500:	movt	r0, #1
   12504:	bl	10d40 <printf@plt>
   12508:	movw	r0, #37208	; 0x9158
   1250c:	movt	r0, #2
   12510:	ldr	r0, [r0]
   12514:	cmp	r0, #0
   12518:	beq	12558 <__assert_fail@plt+0x15e4>
   1251c:	movw	r2, #37288	; 0x91a8
   12520:	ldrd	r0, [sl, #128]	; 0x80
   12524:	movt	r2, #2
   12528:	ldr	r2, [r2]
   1252c:	sub	r3, r2, #1
   12530:	adds	r0, r0, r3
   12534:	adc	r1, r1, r3, asr #31
   12538:	asr	r3, r2, #31
   1253c:	bl	181cc <__assert_fail@plt+0x7258>
   12540:	mov	r3, r1
   12544:	ldr	r1, [r5, #20]
   12548:	mov	r2, r0
   1254c:	movw	r0, #34092	; 0x852c
   12550:	movt	r0, #1
   12554:	bl	10d40 <printf@plt>
   12558:	ldr	r0, [sl, #80]	; 0x50
   1255c:	add	r4, sp, #20
   12560:	mov	r1, r4
   12564:	bl	133a0 <__assert_fail@plt+0x242c>
   12568:	ldr	r7, [sl, #20]
   1256c:	ldr	r0, [r5, #28]
   12570:	ldr	r1, [r5, #44]	; 0x2c
   12574:	ldr	r2, [r5, #36]	; 0x24
   12578:	mov	r8, r5
   1257c:	ldr	r3, [sl, #84]	; 0x54
   12580:	ldr	r6, [r7]
   12584:	ldr	r5, [r7, #4]
   12588:	stm	sp, {r1, r6}
   1258c:	str	r0, [sp, #8]
   12590:	movw	r0, #34053	; 0x8505
   12594:	mov	r1, r4
   12598:	str	r5, [sp, #12]
   1259c:	mov	r5, r8
   125a0:	movt	r0, #1
   125a4:	bl	10d40 <printf@plt>
   125a8:	movw	r0, #37224	; 0x9168
   125ac:	movt	r0, #2
   125b0:	ldr	r0, [r0]
   125b4:	cmp	r0, #0
   125b8:	beq	125d0 <__assert_fail@plt+0x165c>
   125bc:	ldr	r2, [r7, #8]
   125c0:	ldr	r1, [r5, #24]
   125c4:	movw	r0, #34073	; 0x8519
   125c8:	movt	r0, #1
   125cc:	bl	10d40 <printf@plt>
   125d0:	ldr	r0, [sl, #80]	; 0x50
   125d4:	sub	lr, fp, #4096	; 0x1000
   125d8:	sub	r6, lr, #32
   125dc:	and	r0, r0, #45056	; 0xb000
   125e0:	orr	r0, r0, #16384	; 0x4000
   125e4:	cmp	r0, #24576	; 0x6000
   125e8:	bne	12608 <__assert_fail@plt+0x1694>
   125ec:	ldr	r0, [sl, #96]	; 0x60
   125f0:	ubfx	r1, r0, #8, #8
   125f4:	uxtb	r2, r0
   125f8:	movw	r0, #34079	; 0x851f
   125fc:	movt	r0, #1
   12600:	bl	10d40 <printf@plt>
   12604:	b	12658 <__assert_fail@plt+0x16e4>
   12608:	ldr	r0, [r5, #8]
   1260c:	ldr	r3, [r5, #40]	; 0x28
   12610:	cmp	r0, #0
   12614:	beq	12638 <__assert_fail@plt+0x16c4>
   12618:	ldrd	r0, [sl, #112]	; 0x70
   1261c:	movw	r2, #34113	; 0x8541
   12620:	movt	r2, #1
   12624:	stm	sp, {r0, r1}
   12628:	movw	r0, #34089	; 0x8529
   1262c:	rsb	r1, r3, #8
   12630:	movt	r0, #1
   12634:	b	12654 <__assert_fail@plt+0x16e0>
   12638:	ldr	r2, [sl, #112]	; 0x70
   1263c:	ldr	r5, [sl, #116]	; 0x74
   12640:	movw	r0, #34092	; 0x852c
   12644:	mov	r1, r3
   12648:	movt	r0, #1
   1264c:	mov	r3, r5
   12650:	mov	r5, r8
   12654:	bl	10d40 <printf@plt>
   12658:	movw	r0, #37240	; 0x9178
   1265c:	movt	r0, #2
   12660:	ldr	r0, [r0]
   12664:	cmp	r0, #0
   12668:	beq	12674 <__assert_fail@plt+0x1700>
   1266c:	ldr	r0, [sl, #136]	; 0x88
   12670:	b	1268c <__assert_fail@plt+0x1718>
   12674:	movw	r0, #37284	; 0x91a4
   12678:	movt	r0, #2
   1267c:	ldr	r0, [r0]
   12680:	cmp	r0, #0
   12684:	ldreq	r0, [sl, #144]	; 0x90
   12688:	ldrne	r0, [sl, #152]	; 0x98
   1268c:	bl	12820 <__assert_fail@plt+0x18ac>
   12690:	add	r8, sl, #168	; 0xa8
   12694:	mov	r0, r8
   12698:	bl	12fc0 <__assert_fail@plt+0x204c>
   1269c:	movw	r0, #37248	; 0x9180
   126a0:	movt	r0, #2
   126a4:	ldr	r0, [r0]
   126a8:	cmp	r0, #0
   126ac:	beq	126e4 <__assert_fail@plt+0x1770>
   126b0:	ldr	r0, [sl, #80]	; 0x50
   126b4:	and	r1, r0, #61440	; 0xf000
   126b8:	cmp	r1, #40960	; 0xa000
   126bc:	bge	1270c <__assert_fail@plt+0x1798>
   126c0:	cmp	r1, #4096	; 0x1000
   126c4:	beq	1272c <__assert_fail@plt+0x17b8>
   126c8:	cmp	r1, #16384	; 0x4000
   126cc:	bne	12754 <__assert_fail@plt+0x17e0>
   126d0:	movw	r0, #37140	; 0x9114
   126d4:	movt	r0, #2
   126d8:	ldr	r1, [r0]
   126dc:	mov	r0, #47	; 0x2f
   126e0:	b	1276c <__assert_fail@plt+0x17f8>
   126e4:	movw	r0, #37264	; 0x9190
   126e8:	movt	r0, #2
   126ec:	ldr	r0, [r0]
   126f0:	cmp	r0, #0
   126f4:	beq	12770 <__assert_fail@plt+0x17fc>
   126f8:	ldr	r0, [sl, #80]	; 0x50
   126fc:	and	r1, r0, #61440	; 0xf000
   12700:	cmp	r1, #16384	; 0x4000
   12704:	beq	126b4 <__assert_fail@plt+0x1740>
   12708:	b	12770 <__assert_fail@plt+0x17fc>
   1270c:	beq	12740 <__assert_fail@plt+0x17cc>
   12710:	cmp	r1, #49152	; 0xc000
   12714:	bne	12754 <__assert_fail@plt+0x17e0>
   12718:	movw	r0, #37140	; 0x9114
   1271c:	movt	r0, #2
   12720:	ldr	r1, [r0]
   12724:	mov	r0, #61	; 0x3d
   12728:	b	1276c <__assert_fail@plt+0x17f8>
   1272c:	movw	r0, #37140	; 0x9114
   12730:	movt	r0, #2
   12734:	ldr	r1, [r0]
   12738:	mov	r0, #124	; 0x7c
   1273c:	b	1276c <__assert_fail@plt+0x17f8>
   12740:	movw	r0, #37140	; 0x9114
   12744:	movt	r0, #2
   12748:	ldr	r1, [r0]
   1274c:	mov	r0, #64	; 0x40
   12750:	b	1276c <__assert_fail@plt+0x17f8>
   12754:	tst	r0, #73	; 0x49
   12758:	beq	12770 <__assert_fail@plt+0x17fc>
   1275c:	movw	r0, #37140	; 0x9114
   12760:	movt	r0, #2
   12764:	ldr	r1, [r0]
   12768:	mov	r0, #42	; 0x2a
   1276c:	bl	10ed8 <putc@plt>
   12770:	ldr	r0, [sl, #80]	; 0x50
   12774:	and	r0, r0, #61440	; 0xf000
   12778:	cmp	r0, #40960	; 0xa000
   1277c:	bne	127f8 <__assert_fail@plt+0x1884>
   12780:	ldr	r0, [sl, #48]	; 0x30
   12784:	cmp	r0, #0
   12788:	beq	127ac <__assert_fail@plt+0x1838>
   1278c:	ldr	r0, [sl, #4]
   12790:	movw	r2, #34126	; 0x854e
   12794:	mov	r1, #4096	; 0x1000
   12798:	movt	r2, #1
   1279c:	ldr	r3, [r0, #24]
   127a0:	mov	r0, r6
   127a4:	str	r8, [sp]
   127a8:	b	127c0 <__assert_fail@plt+0x184c>
   127ac:	movw	r2, #34033	; 0x84f1
   127b0:	mov	r0, r6
   127b4:	mov	r1, #4096	; 0x1000
   127b8:	mov	r3, r8
   127bc:	movt	r2, #1
   127c0:	bl	10e84 <snprintf@plt>
   127c4:	mov	r0, r6
   127c8:	mov	r1, r9
   127cc:	movw	r2, #4095	; 0xfff
   127d0:	bl	10dc4 <readlink@plt>
   127d4:	cmn	r0, #1
   127d8:	beq	124a0 <__assert_fail@plt+0x152c>
   127dc:	mov	r1, #0
   127e0:	strb	r1, [r9, r0]
   127e4:	movw	r0, #34145	; 0x8561
   127e8:	movt	r0, #1
   127ec:	bl	10d40 <printf@plt>
   127f0:	mov	r0, r9
   127f4:	bl	12fc0 <__assert_fail@plt+0x204c>
   127f8:	movw	r0, #37140	; 0x9114
   127fc:	movt	r0, #2
   12800:	ldr	r1, [r0]
   12804:	mov	r0, #10
   12808:	bl	10ed8 <putc@plt>
   1280c:	ldr	sl, [sl, #8]
   12810:	cmp	sl, #0
   12814:	bne	124d4 <__assert_fail@plt+0x1560>
   12818:	sub	sp, fp, #28
   1281c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12820:	push	{r4, r5, r6, sl, fp, lr}
   12824:	add	fp, sp, #16
   12828:	sub	sp, sp, #8
   1282c:	str	r0, [sp, #4]
   12830:	add	r0, sp, #4
   12834:	bl	10d88 <ctime@plt>
   12838:	movw	r5, #37140	; 0x9114
   1283c:	mov	r4, r0
   12840:	ldrb	r0, [r0, #4]
   12844:	movt	r5, #2
   12848:	ldr	r1, [r5]
   1284c:	bl	10ed8 <putc@plt>
   12850:	ldrb	r0, [r4, #5]
   12854:	ldr	r1, [r5]
   12858:	bl	10ed8 <putc@plt>
   1285c:	ldrb	r0, [r4, #6]
   12860:	ldr	r1, [r5]
   12864:	bl	10ed8 <putc@plt>
   12868:	ldrb	r0, [r4, #7]
   1286c:	ldr	r1, [r5]
   12870:	bl	10ed8 <putc@plt>
   12874:	ldrb	r0, [r4, #8]
   12878:	ldr	r1, [r5]
   1287c:	bl	10ed8 <putc@plt>
   12880:	ldrb	r0, [r4, #9]
   12884:	ldr	r1, [r5]
   12888:	bl	10ed8 <putc@plt>
   1288c:	ldrb	r0, [r4, #10]
   12890:	ldr	r1, [r5]
   12894:	bl	10ed8 <putc@plt>
   12898:	movw	r0, #37268	; 0x9194
   1289c:	movt	r0, #2
   128a0:	ldr	r0, [r0]
   128a4:	cmp	r0, #0
   128a8:	beq	12918 <__assert_fail@plt+0x19a4>
   128ac:	ldr	r1, [r5]
   128b0:	ldrb	r0, [r4, #11]
   128b4:	bl	10ed8 <putc@plt>
   128b8:	ldrb	r0, [r4, #12]
   128bc:	ldr	r1, [r5]
   128c0:	bl	10ed8 <putc@plt>
   128c4:	ldrb	r0, [r4, #13]
   128c8:	ldr	r1, [r5]
   128cc:	bl	10ed8 <putc@plt>
   128d0:	ldrb	r0, [r4, #14]
   128d4:	ldr	r1, [r5]
   128d8:	bl	10ed8 <putc@plt>
   128dc:	ldrb	r0, [r4, #15]
   128e0:	ldr	r1, [r5]
   128e4:	bl	10ed8 <putc@plt>
   128e8:	ldrb	r0, [r4, #16]
   128ec:	ldr	r1, [r5]
   128f0:	bl	10ed8 <putc@plt>
   128f4:	ldrb	r0, [r4, #17]
   128f8:	ldr	r1, [r5]
   128fc:	bl	10ed8 <putc@plt>
   12900:	ldrb	r0, [r4, #18]
   12904:	ldr	r1, [r5]
   12908:	bl	10ed8 <putc@plt>
   1290c:	ldrb	r0, [r4, #19]
   12910:	ldr	r1, [r5]
   12914:	b	12974 <__assert_fail@plt+0x1a00>
   12918:	ldr	r0, [sp, #4]
   1291c:	add	r0, r0, #61696	; 0xf100
   12920:	add	r6, r0, #15663104	; 0xef0000
   12924:	mov	r0, #0
   12928:	bl	10d7c <time@plt>
   1292c:	cmp	r6, r0
   12930:	ble	1296c <__assert_fail@plt+0x19f8>
   12934:	ldr	r1, [r5]
   12938:	ldrb	r0, [r4, #11]
   1293c:	bl	10ed8 <putc@plt>
   12940:	ldrb	r0, [r4, #12]
   12944:	ldr	r1, [r5]
   12948:	bl	10ed8 <putc@plt>
   1294c:	ldrb	r0, [r4, #13]
   12950:	ldr	r1, [r5]
   12954:	bl	10ed8 <putc@plt>
   12958:	ldrb	r0, [r4, #14]
   1295c:	ldr	r1, [r5]
   12960:	bl	10ed8 <putc@plt>
   12964:	ldrb	r0, [r4, #15]
   12968:	b	129a0 <__assert_fail@plt+0x1a2c>
   1296c:	ldr	r1, [r5]
   12970:	mov	r0, #32
   12974:	bl	10ed8 <putc@plt>
   12978:	ldrb	r0, [r4, #20]
   1297c:	ldr	r1, [r5]
   12980:	bl	10ed8 <putc@plt>
   12984:	ldrb	r0, [r4, #21]
   12988:	ldr	r1, [r5]
   1298c:	bl	10ed8 <putc@plt>
   12990:	ldrb	r0, [r4, #22]
   12994:	ldr	r1, [r5]
   12998:	bl	10ed8 <putc@plt>
   1299c:	ldrb	r0, [r4, #23]
   129a0:	ldr	r1, [r5]
   129a4:	bl	10ed8 <putc@plt>
   129a8:	ldr	r1, [r5]
   129ac:	mov	r0, #32
   129b0:	bl	10ed8 <putc@plt>
   129b4:	sub	sp, fp, #16
   129b8:	pop	{r4, r5, r6, sl, fp, pc}
   129bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c0:	add	fp, sp, #28
   129c4:	sub	sp, sp, #12
   129c8:	movw	r1, #37232	; 0x9170
   129cc:	mov	r4, r0
   129d0:	ldr	r0, [r0, #16]
   129d4:	movw	r6, #37208	; 0x9158
   129d8:	movw	r2, #37264	; 0x9190
   129dc:	movt	r1, #2
   129e0:	movt	r6, #2
   129e4:	movt	r2, #2
   129e8:	ldr	r1, [r1]
   129ec:	ldr	r2, [r2]
   129f0:	cmp	r1, #0
   129f4:	ldrne	r1, [r4, #32]
   129f8:	addne	r0, r0, r1
   129fc:	ldr	r1, [r6]
   12a00:	addne	r0, r0, #1
   12a04:	cmp	r1, #0
   12a08:	ldrne	r1, [r4, #20]
   12a0c:	addne	r0, r0, r1
   12a10:	movw	r1, #37248	; 0x9180
   12a14:	movt	r1, #2
   12a18:	addne	r0, r0, #1
   12a1c:	ldr	r1, [r1]
   12a20:	orrs	r1, r2, r1
   12a24:	movw	r1, #37104	; 0x90f0
   12a28:	addne	r0, r0, #1
   12a2c:	movt	r1, #2
   12a30:	add	r0, r0, #1
   12a34:	ldr	r1, [r1]
   12a38:	add	r1, r1, #1
   12a3c:	cmp	r1, r0, lsl #1
   12a40:	bge	12a90 <__assert_fail@plt+0x1b1c>
   12a44:	ldr	r5, [r4]
   12a48:	cmp	r5, #0
   12a4c:	beq	12c58 <__assert_fail@plt+0x1ce4>
   12a50:	movw	r6, #37140	; 0x9114
   12a54:	movt	r6, #2
   12a58:	ldr	r0, [r5, #16]
   12a5c:	cmp	r0, #1
   12a60:	beq	12a80 <__assert_fail@plt+0x1b0c>
   12a64:	ldr	r2, [r4, #20]
   12a68:	ldr	r1, [r4, #32]
   12a6c:	mov	r0, r5
   12a70:	bl	12290 <__assert_fail@plt+0x131c>
   12a74:	ldr	r1, [r6]
   12a78:	mov	r0, #10
   12a7c:	bl	10ed8 <putc@plt>
   12a80:	ldr	r5, [r5, #8]
   12a84:	cmp	r5, #0
   12a88:	bne	12a58 <__assert_fail@plt+0x1ae4>
   12a8c:	b	12c58 <__assert_fail@plt+0x1ce4>
   12a90:	sdiv	r0, r1, r0
   12a94:	str	r0, [sp]
   12a98:	sdiv	r0, r1, r0
   12a9c:	cmp	r0, #0
   12aa0:	str	r0, [sp, #8]
   12aa4:	beq	12c58 <__assert_fail@plt+0x1ce4>
   12aa8:	movw	r5, #37120	; 0x9100
   12aac:	ldr	r1, [r4, #12]
   12ab0:	movt	r5, #2
   12ab4:	ldr	r0, [r5]
   12ab8:	cmp	r1, r0
   12abc:	ble	12ae8 <__assert_fail@plt+0x1b74>
   12ac0:	movw	r7, #37164	; 0x912c
   12ac4:	lsl	r1, r1, #2
   12ac8:	movt	r7, #2
   12acc:	ldr	r0, [r7]
   12ad0:	bl	17e50 <__assert_fail@plt+0x6edc>
   12ad4:	cmp	r0, #0
   12ad8:	beq	12c60 <__assert_fail@plt+0x1cec>
   12adc:	ldr	r1, [r4, #12]
   12ae0:	str	r0, [r7]
   12ae4:	str	r1, [r5]
   12ae8:	movw	r0, #37164	; 0x912c
   12aec:	ldr	r1, [r4]
   12af0:	mov	r2, #0
   12af4:	movt	r0, #2
   12af8:	str	r2, [sp, #4]
   12afc:	ldr	r0, [r0]
   12b00:	ldr	r2, [r1, #16]
   12b04:	cmp	r2, #1
   12b08:	ldrne	r2, [sp, #4]
   12b0c:	strne	r1, [r0, r2, lsl #2]
   12b10:	addne	r2, r2, #1
   12b14:	ldr	r1, [r1, #8]
   12b18:	strne	r2, [sp, #4]
   12b1c:	cmp	r1, #0
   12b20:	bne	12b00 <__assert_fail@plt+0x1b8c>
   12b24:	ldm	sp, {r0, r1}
   12b28:	sdiv	r5, r1, r0
   12b2c:	mls	r0, r5, r0, r1
   12b30:	cmp	r0, #0
   12b34:	ldr	r0, [r4]
   12b38:	addne	r5, r5, #1
   12b3c:	ldr	r0, [r0, #48]	; 0x30
   12b40:	cmp	r0, #0
   12b44:	movwne	r0, #37260	; 0x918c
   12b48:	ldrne	r1, [r6]
   12b4c:	movtne	r0, #2
   12b50:	ldrne	r0, [r0]
   12b54:	orrsne	r0, r1, r0
   12b58:	bne	12b68 <__assert_fail@plt+0x1bf4>
   12b5c:	cmp	r5, #1
   12b60:	bge	12b98 <__assert_fail@plt+0x1c24>
   12b64:	b	12c58 <__assert_fail@plt+0x1ce4>
   12b68:	movw	r0, #37288	; 0x91a8
   12b6c:	ldr	r1, [r4, #4]
   12b70:	movt	r0, #2
   12b74:	ldr	r0, [r0]
   12b78:	add	r1, r1, r0
   12b7c:	sub	r1, r1, #1
   12b80:	udiv	r1, r1, r0
   12b84:	movw	r0, #34036	; 0x84f4
   12b88:	movt	r0, #1
   12b8c:	bl	10d40 <printf@plt>
   12b90:	cmp	r5, #1
   12b94:	blt	12c58 <__assert_fail@plt+0x1ce4>
   12b98:	movw	r8, #37140	; 0x9114
   12b9c:	mov	r6, #0
   12ba0:	movt	r8, #2
   12ba4:	movw	r0, #37164	; 0x912c
   12ba8:	ldr	r2, [r4, #20]
   12bac:	ldr	r1, [r4, #32]
   12bb0:	movt	r0, #2
   12bb4:	ldr	r0, [r0]
   12bb8:	ldr	r0, [r0, r6, lsl #2]
   12bbc:	bl	12290 <__assert_fail@plt+0x131c>
   12bc0:	ldr	r1, [sp, #4]
   12bc4:	add	r9, r6, r5
   12bc8:	cmp	r9, r1
   12bcc:	bge	12c40 <__assert_fail@plt+0x1ccc>
   12bd0:	mov	sl, #0
   12bd4:	ldr	r1, [sp]
   12bd8:	add	sl, sl, #1
   12bdc:	cmp	sl, r1
   12be0:	beq	12c40 <__assert_fail@plt+0x1ccc>
   12be4:	ldr	r1, [sp, #8]
   12be8:	mov	r7, r4
   12bec:	cmp	r0, r1
   12bf0:	bge	12c10 <__assert_fail@plt+0x1c9c>
   12bf4:	ldr	r1, [sp, #8]
   12bf8:	sub	r4, r1, r0
   12bfc:	ldr	r1, [r8]
   12c00:	mov	r0, #32
   12c04:	bl	10ed8 <putc@plt>
   12c08:	subs	r4, r4, #1
   12c0c:	bne	12bfc <__assert_fail@plt+0x1c88>
   12c10:	movw	r0, #37164	; 0x912c
   12c14:	ldr	r2, [r7, #20]
   12c18:	ldr	r1, [r7, #32]
   12c1c:	mov	r4, r7
   12c20:	movt	r0, #2
   12c24:	ldr	r0, [r0]
   12c28:	ldr	r0, [r0, r9, lsl #2]
   12c2c:	bl	12290 <__assert_fail@plt+0x131c>
   12c30:	ldr	r1, [sp, #4]
   12c34:	add	r9, r9, r5
   12c38:	cmp	r9, r1
   12c3c:	blt	12bd4 <__assert_fail@plt+0x1c60>
   12c40:	ldr	r1, [r8]
   12c44:	mov	r0, #10
   12c48:	bl	10ed8 <putc@plt>
   12c4c:	add	r6, r6, #1
   12c50:	cmp	r6, r5
   12c54:	bne	12ba4 <__assert_fail@plt+0x1c30>
   12c58:	sub	sp, fp, #28
   12c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c60:	movw	r0, #37136	; 0x9110
   12c64:	movt	r0, #2
   12c68:	ldr	r5, [r0]
   12c6c:	bl	10e78 <__errno_location@plt>
   12c70:	ldr	r0, [r0]
   12c74:	bl	10e24 <strerror@plt>
   12c78:	movw	r1, #34099	; 0x8533
   12c7c:	mov	r2, r0
   12c80:	mov	r0, r5
   12c84:	movt	r1, #1
   12c88:	bl	10e6c <fprintf@plt>
   12c8c:	ldr	r5, [r4]
   12c90:	cmp	r5, #0
   12c94:	beq	12c58 <__assert_fail@plt+0x1ce4>
   12c98:	movw	r6, #37140	; 0x9114
   12c9c:	movt	r6, #2
   12ca0:	ldr	r0, [r5, #16]
   12ca4:	cmp	r0, #1
   12ca8:	beq	12cc8 <__assert_fail@plt+0x1d54>
   12cac:	ldr	r2, [r4, #20]
   12cb0:	ldr	r1, [r4, #32]
   12cb4:	mov	r0, r5
   12cb8:	bl	12290 <__assert_fail@plt+0x131c>
   12cbc:	ldr	r1, [r6]
   12cc0:	mov	r0, #10
   12cc4:	bl	10ed8 <putc@plt>
   12cc8:	ldr	r5, [r5, #8]
   12ccc:	cmp	r5, #0
   12cd0:	bne	12ca0 <__assert_fail@plt+0x1d2c>
   12cd4:	b	12c58 <__assert_fail@plt+0x1ce4>
   12cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cdc:	add	fp, sp, #28
   12ce0:	sub	sp, sp, #4
   12ce4:	mov	sl, r0
   12ce8:	ldr	r1, [r0, #16]
   12cec:	movw	r0, #37232	; 0x9170
   12cf0:	movw	r3, #37264	; 0x9190
   12cf4:	movt	r0, #2
   12cf8:	movt	r3, #2
   12cfc:	ldr	r0, [r0]
   12d00:	ldr	r3, [r3]
   12d04:	cmp	r0, #0
   12d08:	ldrne	r0, [sl, #32]
   12d0c:	addne	r0, r1, r0
   12d10:	addne	r1, r0, #1
   12d14:	movw	r0, #37208	; 0x9158
   12d18:	movt	r0, #2
   12d1c:	ldr	r0, [r0]
   12d20:	cmp	r0, #0
   12d24:	ldrne	r2, [sl, #20]
   12d28:	addne	r1, r1, r2
   12d2c:	movw	r2, #37248	; 0x9180
   12d30:	movt	r2, #2
   12d34:	addne	r1, r1, #1
   12d38:	ldr	r2, [r2]
   12d3c:	orrs	r2, r3, r2
   12d40:	movw	r2, #37104	; 0x90f0
   12d44:	addne	r1, r1, #1
   12d48:	movt	r2, #2
   12d4c:	add	r1, r1, #1
   12d50:	ldr	r2, [r2]
   12d54:	add	r2, r2, #1
   12d58:	cmp	r2, r1, lsl #1
   12d5c:	bge	12dac <__assert_fail@plt+0x1e38>
   12d60:	ldr	r5, [sl]
   12d64:	cmp	r5, #0
   12d68:	beq	12de8 <__assert_fail@plt+0x1e74>
   12d6c:	movw	r6, #37140	; 0x9114
   12d70:	movt	r6, #2
   12d74:	ldr	r0, [r5, #16]
   12d78:	cmp	r0, #1
   12d7c:	beq	12d9c <__assert_fail@plt+0x1e28>
   12d80:	ldr	r2, [sl, #20]
   12d84:	ldr	r1, [sl, #32]
   12d88:	mov	r0, r5
   12d8c:	bl	12290 <__assert_fail@plt+0x131c>
   12d90:	ldr	r1, [r6]
   12d94:	mov	r0, #10
   12d98:	bl	10ed8 <putc@plt>
   12d9c:	ldr	r5, [r5, #8]
   12da0:	cmp	r5, #0
   12da4:	bne	12d74 <__assert_fail@plt+0x1e00>
   12da8:	b	12de8 <__assert_fail@plt+0x1e74>
   12dac:	sdiv	r9, r2, r1
   12db0:	sdiv	r8, r2, r9
   12db4:	cmp	r8, #0
   12db8:	beq	12de8 <__assert_fail@plt+0x1e74>
   12dbc:	ldr	r5, [sl]
   12dc0:	ldr	r1, [r5, #48]	; 0x30
   12dc4:	cmp	r1, #0
   12dc8:	movwne	r1, #37260	; 0x918c
   12dcc:	movtne	r1, #2
   12dd0:	ldrne	r1, [r1]
   12dd4:	orrsne	r0, r0, r1
   12dd8:	bne	12df0 <__assert_fail@plt+0x1e7c>
   12ddc:	cmp	r5, #0
   12de0:	bne	12e28 <__assert_fail@plt+0x1eb4>
   12de4:	b	12e9c <__assert_fail@plt+0x1f28>
   12de8:	sub	sp, fp, #28
   12dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12df0:	movw	r0, #37288	; 0x91a8
   12df4:	ldr	r1, [sl, #4]
   12df8:	mov	r3, #0
   12dfc:	movt	r0, #2
   12e00:	ldr	r0, [r0]
   12e04:	add	r1, r1, r0
   12e08:	sub	r1, r1, #1
   12e0c:	udiv	r2, r1, r0
   12e10:	movw	r0, #34114	; 0x8542
   12e14:	movt	r0, #1
   12e18:	bl	10d40 <printf@plt>
   12e1c:	ldr	r5, [sl]
   12e20:	cmp	r5, #0
   12e24:	beq	12e9c <__assert_fail@plt+0x1f28>
   12e28:	movw	r7, #37140	; 0x9114
   12e2c:	mov	r6, #0
   12e30:	movt	r7, #2
   12e34:	ldr	r0, [r5, #16]
   12e38:	cmp	r0, #1
   12e3c:	beq	12e90 <__assert_fail@plt+0x1f1c>
   12e40:	cmp	r6, r9
   12e44:	blt	12e58 <__assert_fail@plt+0x1ee4>
   12e48:	ldr	r1, [r7]
   12e4c:	mov	r0, #10
   12e50:	bl	10ed8 <putc@plt>
   12e54:	mov	r6, #0
   12e58:	ldr	r2, [sl, #20]
   12e5c:	ldr	r1, [sl, #32]
   12e60:	mov	r0, r5
   12e64:	bl	12290 <__assert_fail@plt+0x131c>
   12e68:	add	r6, r6, #1
   12e6c:	cmp	r6, r9
   12e70:	cmplt	r0, r8
   12e74:	bge	12e90 <__assert_fail@plt+0x1f1c>
   12e78:	sub	r4, r8, r0
   12e7c:	ldr	r1, [r7]
   12e80:	mov	r0, #32
   12e84:	bl	10ed8 <putc@plt>
   12e88:	subs	r4, r4, #1
   12e8c:	bne	12e7c <__assert_fail@plt+0x1f08>
   12e90:	ldr	r5, [r5, #8]
   12e94:	cmp	r5, #0
   12e98:	bne	12e34 <__assert_fail@plt+0x1ec0>
   12e9c:	movw	r0, #37140	; 0x9114
   12ea0:	movt	r0, #2
   12ea4:	ldr	r1, [r0]
   12ea8:	mov	r0, #10
   12eac:	sub	sp, fp, #28
   12eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb4:	b	10ed8 <putc@plt>
   12eb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12ebc:	add	fp, sp, #24
   12ec0:	mov	r4, r0
   12ec4:	movw	r0, #37232	; 0x9170
   12ec8:	movt	r0, #2
   12ecc:	ldr	r5, [r4]
   12ed0:	ldr	r0, [r0]
   12ed4:	cmp	r0, #0
   12ed8:	ldrne	r0, [r4, #32]
   12edc:	addne	r6, r0, #1
   12ee0:	movw	r0, #37208	; 0x9158
   12ee4:	movt	r0, #2
   12ee8:	moveq	r6, #0
   12eec:	ldr	r0, [r0]
   12ef0:	cmp	r0, #0
   12ef4:	ldrne	r0, [r4, #20]
   12ef8:	addne	r0, r6, r0
   12efc:	addne	r6, r0, #1
   12f00:	movw	r0, #37248	; 0x9180
   12f04:	movt	r0, #2
   12f08:	ldr	r0, [r0]
   12f0c:	cmp	r0, #0
   12f10:	addne	r6, r6, #1
   12f14:	cmp	r5, #0
   12f18:	beq	12fa8 <__assert_fail@plt+0x2034>
   12f1c:	movw	r9, #37140	; 0x9114
   12f20:	movw	r8, #37104	; 0x90f0
   12f24:	mov	r7, #0
   12f28:	movt	r9, #2
   12f2c:	movt	r8, #2
   12f30:	ldr	r0, [r5, #16]
   12f34:	cmp	r0, #1
   12f38:	beq	12f9c <__assert_fail@plt+0x2028>
   12f3c:	cmp	r7, #1
   12f40:	blt	12f88 <__assert_fail@plt+0x2014>
   12f44:	ldr	r1, [r9]
   12f48:	mov	r0, #44	; 0x2c
   12f4c:	bl	10ed8 <putc@plt>
   12f50:	ldr	r1, [r5, #52]	; 0x34
   12f54:	add	r7, r7, #2
   12f58:	ldr	r2, [r8]
   12f5c:	add	r0, r6, r7
   12f60:	add	r0, r0, r1
   12f64:	ldr	r1, [r9]
   12f68:	cmp	r0, r2
   12f6c:	bcs	12f7c <__assert_fail@plt+0x2008>
   12f70:	mov	r0, #32
   12f74:	bl	10ed8 <putc@plt>
   12f78:	b	12f88 <__assert_fail@plt+0x2014>
   12f7c:	mov	r0, #10
   12f80:	bl	10ed8 <putc@plt>
   12f84:	mov	r7, #0
   12f88:	ldr	r2, [r4, #20]
   12f8c:	ldr	r1, [r4, #32]
   12f90:	mov	r0, r5
   12f94:	bl	12290 <__assert_fail@plt+0x131c>
   12f98:	add	r7, r0, r7
   12f9c:	ldr	r5, [r5, #8]
   12fa0:	cmp	r5, #0
   12fa4:	bne	12f30 <__assert_fail@plt+0x1fbc>
   12fa8:	movw	r0, #37140	; 0x9114
   12fac:	movt	r0, #2
   12fb0:	ldr	r1, [r0]
   12fb4:	mov	r0, #10
   12fb8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12fbc:	b	10ed8 <putc@plt>
   12fc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12fc4:	add	fp, sp, #24
   12fc8:	ldrb	r7, [r0]
   12fcc:	cmp	r7, #0
   12fd0:	moveq	r4, #0
   12fd4:	moveq	r0, r4
   12fd8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   12fdc:	add	r6, r0, #1
   12fe0:	bl	10e3c <__ctype_b_loc@plt>
   12fe4:	movw	r8, #37300	; 0x91b4
   12fe8:	movw	r9, #37140	; 0x9114
   12fec:	mov	r5, r0
   12ff0:	mov	r4, #0
   12ff4:	movt	r8, #2
   12ff8:	movt	r9, #2
   12ffc:	ldr	r2, [r5]
   13000:	uxtb	r1, r7
   13004:	ldr	r0, [r8]
   13008:	add	r2, r2, r1, lsl #1
   1300c:	cmp	r0, #0
   13010:	mov	r0, r1
   13014:	ldrh	r2, [r2]
   13018:	movwne	r0, #63	; 0x3f
   1301c:	tst	r2, #16384	; 0x4000
   13020:	movne	r0, r1
   13024:	ldr	r1, [r9]
   13028:	bl	10ed8 <putc@plt>
   1302c:	ldrb	r7, [r6, r4]
   13030:	add	r4, r4, #1
   13034:	cmp	r7, #0
   13038:	bne	12ffc <__assert_fail@plt+0x2088>
   1303c:	mov	r0, r4
   13040:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13044:	push	{fp, lr}
   13048:	mov	fp, sp
   1304c:	movw	r0, #37136	; 0x9110
   13050:	mov	r1, #51	; 0x33
   13054:	mov	r2, #1
   13058:	movt	r0, #2
   1305c:	ldr	r3, [r0]
   13060:	movw	r0, #34150	; 0x8566
   13064:	movt	r0, #1
   13068:	bl	10dd0 <fwrite@plt>
   1306c:	mov	r0, #1
   13070:	pop	{fp, pc}
   13074:	add	r0, r0, #168	; 0xa8
   13078:	add	r1, r1, #168	; 0xa8
   1307c:	b	10d1c <strcmp@plt>
   13080:	add	r2, r1, #168	; 0xa8
   13084:	add	r1, r0, #168	; 0xa8
   13088:	mov	r0, r2
   1308c:	b	10d1c <strcmp@plt>
   13090:	ldr	r3, [r0, #144]	; 0x90
   13094:	ldr	r2, [r1, #144]	; 0x90
   13098:	mov	ip, r0
   1309c:	mov	r0, #1
   130a0:	cmp	r2, r3
   130a4:	ble	130ac <__assert_fail@plt+0x2138>
   130a8:	bx	lr
   130ac:	bne	130cc <__assert_fail@plt+0x2158>
   130b0:	push	{r4, sl, fp, lr}
   130b4:	add	fp, sp, #8
   130b8:	ldr	lr, [ip, #148]	; 0x94
   130bc:	ldr	r4, [r1, #148]	; 0x94
   130c0:	cmp	r4, lr
   130c4:	pop	{r4, sl, fp, lr}
   130c8:	bgt	130a8 <__assert_fail@plt+0x2134>
   130cc:	mvn	r0, #0
   130d0:	cmp	r2, r3
   130d4:	bxlt	lr
   130d8:	bne	130ec <__assert_fail@plt+0x2178>
   130dc:	ldr	r2, [ip, #148]	; 0x94
   130e0:	ldr	r3, [r1, #148]	; 0x94
   130e4:	cmp	r3, r2
   130e8:	blt	130a8 <__assert_fail@plt+0x2134>
   130ec:	add	r0, ip, #168	; 0xa8
   130f0:	add	r1, r1, #168	; 0xa8
   130f4:	b	10d1c <strcmp@plt>
   130f8:	push	{r4, sl, fp, lr}
   130fc:	add	fp, sp, #8
   13100:	ldr	r3, [r0, #144]	; 0x90
   13104:	ldr	r2, [r1, #144]	; 0x90
   13108:	mov	ip, r0
   1310c:	mvn	r0, #0
   13110:	cmp	r2, r3
   13114:	bgt	1315c <__assert_fail@plt+0x21e8>
   13118:	bne	1312c <__assert_fail@plt+0x21b8>
   1311c:	ldr	lr, [ip, #148]	; 0x94
   13120:	ldr	r4, [r1, #148]	; 0x94
   13124:	cmp	r4, lr
   13128:	bgt	1315c <__assert_fail@plt+0x21e8>
   1312c:	mov	r0, #1
   13130:	cmp	r2, r3
   13134:	blt	1315c <__assert_fail@plt+0x21e8>
   13138:	bne	1314c <__assert_fail@plt+0x21d8>
   1313c:	ldr	r2, [ip, #148]	; 0x94
   13140:	ldr	r3, [r1, #148]	; 0x94
   13144:	cmp	r3, r2
   13148:	poplt	{r4, sl, fp, pc}
   1314c:	add	r0, ip, #168	; 0xa8
   13150:	add	r1, r1, #168	; 0xa8
   13154:	bl	10d1c <strcmp@plt>
   13158:	rsb	r0, r0, #0
   1315c:	pop	{r4, sl, fp, pc}
   13160:	ldr	r3, [r0, #136]	; 0x88
   13164:	ldr	r2, [r1, #136]	; 0x88
   13168:	mov	ip, r0
   1316c:	mov	r0, #1
   13170:	cmp	r2, r3
   13174:	ble	1317c <__assert_fail@plt+0x2208>
   13178:	bx	lr
   1317c:	bne	1319c <__assert_fail@plt+0x2228>
   13180:	push	{r4, sl, fp, lr}
   13184:	add	fp, sp, #8
   13188:	ldr	lr, [ip, #140]	; 0x8c
   1318c:	ldr	r4, [r1, #140]	; 0x8c
   13190:	cmp	r4, lr
   13194:	pop	{r4, sl, fp, lr}
   13198:	bgt	13178 <__assert_fail@plt+0x2204>
   1319c:	mvn	r0, #0
   131a0:	cmp	r2, r3
   131a4:	bxlt	lr
   131a8:	bne	131bc <__assert_fail@plt+0x2248>
   131ac:	ldr	r2, [ip, #140]	; 0x8c
   131b0:	ldr	r3, [r1, #140]	; 0x8c
   131b4:	cmp	r3, r2
   131b8:	blt	13178 <__assert_fail@plt+0x2204>
   131bc:	add	r0, ip, #168	; 0xa8
   131c0:	add	r1, r1, #168	; 0xa8
   131c4:	b	10d1c <strcmp@plt>
   131c8:	push	{r4, sl, fp, lr}
   131cc:	add	fp, sp, #8
   131d0:	ldr	r3, [r0, #136]	; 0x88
   131d4:	ldr	r2, [r1, #136]	; 0x88
   131d8:	mov	ip, r0
   131dc:	mvn	r0, #0
   131e0:	cmp	r2, r3
   131e4:	bgt	1322c <__assert_fail@plt+0x22b8>
   131e8:	bne	131fc <__assert_fail@plt+0x2288>
   131ec:	ldr	lr, [ip, #140]	; 0x8c
   131f0:	ldr	r4, [r1, #140]	; 0x8c
   131f4:	cmp	r4, lr
   131f8:	bgt	1322c <__assert_fail@plt+0x22b8>
   131fc:	mov	r0, #1
   13200:	cmp	r2, r3
   13204:	blt	1322c <__assert_fail@plt+0x22b8>
   13208:	bne	1321c <__assert_fail@plt+0x22a8>
   1320c:	ldr	r2, [ip, #140]	; 0x8c
   13210:	ldr	r3, [r1, #140]	; 0x8c
   13214:	cmp	r3, r2
   13218:	poplt	{r4, sl, fp, pc}
   1321c:	add	r0, ip, #168	; 0xa8
   13220:	add	r1, r1, #168	; 0xa8
   13224:	bl	10d1c <strcmp@plt>
   13228:	rsb	r0, r0, #0
   1322c:	pop	{r4, sl, fp, pc}
   13230:	ldr	r3, [r0, #152]	; 0x98
   13234:	ldr	r2, [r1, #152]	; 0x98
   13238:	mov	ip, r0
   1323c:	mov	r0, #1
   13240:	cmp	r2, r3
   13244:	ble	1324c <__assert_fail@plt+0x22d8>
   13248:	bx	lr
   1324c:	bne	1326c <__assert_fail@plt+0x22f8>
   13250:	push	{r4, sl, fp, lr}
   13254:	add	fp, sp, #8
   13258:	ldr	lr, [ip, #156]	; 0x9c
   1325c:	ldr	r4, [r1, #156]	; 0x9c
   13260:	cmp	r4, lr
   13264:	pop	{r4, sl, fp, lr}
   13268:	bgt	13248 <__assert_fail@plt+0x22d4>
   1326c:	mvn	r0, #0
   13270:	cmp	r2, r3
   13274:	bxlt	lr
   13278:	bne	1328c <__assert_fail@plt+0x2318>
   1327c:	ldr	r2, [ip, #156]	; 0x9c
   13280:	ldr	r3, [r1, #156]	; 0x9c
   13284:	cmp	r3, r2
   13288:	blt	13248 <__assert_fail@plt+0x22d4>
   1328c:	add	r0, ip, #168	; 0xa8
   13290:	add	r1, r1, #168	; 0xa8
   13294:	b	10d1c <strcmp@plt>
   13298:	push	{r4, sl, fp, lr}
   1329c:	add	fp, sp, #8
   132a0:	ldr	r3, [r0, #152]	; 0x98
   132a4:	ldr	r2, [r1, #152]	; 0x98
   132a8:	mov	ip, r0
   132ac:	mvn	r0, #0
   132b0:	cmp	r2, r3
   132b4:	bgt	132fc <__assert_fail@plt+0x2388>
   132b8:	bne	132cc <__assert_fail@plt+0x2358>
   132bc:	ldr	lr, [ip, #156]	; 0x9c
   132c0:	ldr	r4, [r1, #156]	; 0x9c
   132c4:	cmp	r4, lr
   132c8:	bgt	132fc <__assert_fail@plt+0x2388>
   132cc:	mov	r0, #1
   132d0:	cmp	r2, r3
   132d4:	blt	132fc <__assert_fail@plt+0x2388>
   132d8:	bne	132ec <__assert_fail@plt+0x2378>
   132dc:	ldr	r2, [ip, #156]	; 0x9c
   132e0:	ldr	r3, [r1, #156]	; 0x9c
   132e4:	cmp	r3, r2
   132e8:	poplt	{r4, sl, fp, pc}
   132ec:	add	r0, ip, #168	; 0xa8
   132f0:	add	r1, r1, #168	; 0xa8
   132f4:	bl	10d1c <strcmp@plt>
   132f8:	rsb	r0, r0, #0
   132fc:	pop	{r4, sl, fp, pc}
   13300:	push	{r4, r5, r6, sl, fp, lr}
   13304:	add	fp, sp, #16
   13308:	ldr	r4, [r0, #112]	; 0x70
   1330c:	ldr	r3, [r0, #116]	; 0x74
   13310:	ldr	r6, [r1, #112]	; 0x70
   13314:	ldr	r5, [r1, #116]	; 0x74
   13318:	mov	ip, #1
   1331c:	subs	r2, r4, r6
   13320:	sbcs	r2, r3, r5
   13324:	blt	13338 <__assert_fail@plt+0x23c4>
   13328:	subs	r2, r6, r4
   1332c:	mvn	ip, #0
   13330:	sbcs	r2, r5, r3
   13334:	bge	13340 <__assert_fail@plt+0x23cc>
   13338:	mov	r0, ip
   1333c:	pop	{r4, r5, r6, sl, fp, pc}
   13340:	add	r0, r0, #168	; 0xa8
   13344:	add	r1, r1, #168	; 0xa8
   13348:	pop	{r4, r5, r6, sl, fp, lr}
   1334c:	b	10d1c <strcmp@plt>
   13350:	push	{r4, r5, r6, sl, fp, lr}
   13354:	add	fp, sp, #16
   13358:	ldr	r4, [r0, #112]	; 0x70
   1335c:	ldr	r3, [r0, #116]	; 0x74
   13360:	ldr	r6, [r1, #112]	; 0x70
   13364:	ldr	r5, [r1, #116]	; 0x74
   13368:	mvn	ip, #0
   1336c:	subs	r2, r4, r6
   13370:	sbcs	r2, r3, r5
   13374:	blt	13398 <__assert_fail@plt+0x2424>
   13378:	subs	r2, r6, r4
   1337c:	mov	ip, #1
   13380:	sbcs	r2, r5, r3
   13384:	blt	13398 <__assert_fail@plt+0x2424>
   13388:	add	r0, r0, #168	; 0xa8
   1338c:	add	r1, r1, #168	; 0xa8
   13390:	bl	10d1c <strcmp@plt>
   13394:	rsb	ip, r0, #0
   13398:	mov	r0, ip
   1339c:	pop	{r4, r5, r6, sl, fp, pc}
   133a0:	and	r2, r0, #61440	; 0xf000
   133a4:	sub	r2, r2, #4096	; 0x1000
   133a8:	lsr	r3, r2, #12
   133ac:	cmp	r3, #11
   133b0:	bhi	13400 <__assert_fail@plt+0x248c>
   133b4:	add	r2, pc, #4
   133b8:	mov	ip, #45	; 0x2d
   133bc:	ldr	pc, [r2, r3, lsl #2]
   133c0:	strdeq	r3, [r1], -r0
   133c4:	strdeq	r3, [r1], -r8
   133c8:	andeq	r3, r1, r0, lsl #8
   133cc:	andeq	r3, r1, r8, lsl #8
   133d0:	andeq	r3, r1, r0, lsl #8
   133d4:	andeq	r3, r1, r0, lsr #8
   133d8:	andeq	r3, r1, r0, lsl #8
   133dc:	andeq	r3, r1, r4, lsr #8
   133e0:	andeq	r3, r1, r0, lsl #8
   133e4:	andeq	r3, r1, r0, lsl r4
   133e8:	andeq	r3, r1, r0, lsl #8
   133ec:	andeq	r3, r1, r8, lsl r4
   133f0:	mov	ip, #112	; 0x70
   133f4:	b	13424 <__assert_fail@plt+0x24b0>
   133f8:	mov	ip, #99	; 0x63
   133fc:	b	13424 <__assert_fail@plt+0x24b0>
   13400:	mov	ip, #63	; 0x3f
   13404:	b	13424 <__assert_fail@plt+0x24b0>
   13408:	mov	ip, #100	; 0x64
   1340c:	b	13424 <__assert_fail@plt+0x24b0>
   13410:	mov	ip, #108	; 0x6c
   13414:	b	13424 <__assert_fail@plt+0x24b0>
   13418:	mov	ip, #115	; 0x73
   1341c:	b	13424 <__assert_fail@plt+0x24b0>
   13420:	mov	ip, #98	; 0x62
   13424:	push	{fp, lr}
   13428:	mov	fp, sp
   1342c:	mov	r2, #32
   13430:	tst	r0, #256	; 0x100
   13434:	mov	r3, #114	; 0x72
   13438:	strb	ip, [r1]
   1343c:	mov	ip, #114	; 0x72
   13440:	mov	lr, #45	; 0x2d
   13444:	strh	r2, [r1, #10]
   13448:	movweq	r3, #45	; 0x2d
   1344c:	tst	r0, #128	; 0x80
   13450:	mov	r2, #119	; 0x77
   13454:	movweq	r2, #45	; 0x2d
   13458:	strb	r3, [r1, #1]
   1345c:	tst	r0, #32
   13460:	mov	r3, #119	; 0x77
   13464:	strb	r2, [r1, #2]
   13468:	mov	r2, #114	; 0x72
   1346c:	movweq	r2, #45	; 0x2d
   13470:	tst	r0, #16
   13474:	strb	r2, [r1, #4]
   13478:	mov	r2, #119	; 0x77
   1347c:	movweq	r2, #45	; 0x2d
   13480:	tst	r0, #4
   13484:	movweq	ip, #45	; 0x2d
   13488:	tst	r0, #2
   1348c:	strb	r2, [r1, #5]
   13490:	movweq	r3, #45	; 0x2d
   13494:	strb	ip, [r1, #7]
   13498:	ands	r2, r0, #64	; 0x40
   1349c:	mov	ip, #45	; 0x2d
   134a0:	strb	r3, [r1, #8]
   134a4:	mov	r3, #83	; 0x53
   134a8:	movwne	lr, #120	; 0x78
   134ac:	mov	r2, #83	; 0x53
   134b0:	movwne	r3, #115	; 0x73
   134b4:	tst	r0, #2048	; 0x800
   134b8:	moveq	r3, lr
   134bc:	strb	r3, [r1, #3]
   134c0:	ands	r3, r0, #8
   134c4:	mov	r3, #45	; 0x2d
   134c8:	movwne	r2, #115	; 0x73
   134cc:	movwne	r3, #120	; 0x78
   134d0:	tst	r0, #1024	; 0x400
   134d4:	moveq	r2, r3
   134d8:	strb	r2, [r1, #6]
   134dc:	ands	r2, r0, #1
   134e0:	mov	r2, #84	; 0x54
   134e4:	movwne	ip, #120	; 0x78
   134e8:	movwne	r2, #116	; 0x74
   134ec:	tst	r0, #512	; 0x200
   134f0:	moveq	r2, ip
   134f4:	strb	r2, [r1, #9]
   134f8:	pop	{fp, pc}
   134fc:	ldr	r0, [r0, #16]
   13500:	b	133a0 <__assert_fail@plt+0x242c>
   13504:	push	{r4, r5, r6, sl, fp, lr}
   13508:	add	fp, sp, #16
   1350c:	mov	r4, r0
   13510:	bl	10e78 <__errno_location@plt>
   13514:	ldr	r6, [r0]
   13518:	mov	r5, r0
   1351c:	mov	r0, r4
   13520:	bl	10d64 <free@plt>
   13524:	str	r6, [r5]
   13528:	pop	{r4, r5, r6, sl, fp, pc}
   1352c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13530:	add	fp, sp, #28
   13534:	sub	sp, sp, #28
   13538:	cmp	r1, #4096	; 0x1000
   1353c:	bcs	13558 <__assert_fail@plt+0x25e4>
   13540:	mov	r7, r0
   13544:	and	r0, r1, #516	; 0x204
   13548:	mov	r5, r1
   1354c:	cmp	r0, #516	; 0x204
   13550:	tstne	r5, #18
   13554:	bne	13574 <__assert_fail@plt+0x2600>
   13558:	bl	10e78 <__errno_location@plt>
   1355c:	mov	r1, #22
   13560:	mov	r4, #0
   13564:	str	r1, [r0]
   13568:	mov	r0, r4
   1356c:	sub	sp, fp, #28
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13574:	mov	r0, #1
   13578:	mov	r1, #96	; 0x60
   1357c:	mov	sl, r2
   13580:	bl	17dcc <__assert_fail@plt+0x6e58>
   13584:	cmp	r0, #0
   13588:	beq	13978 <__assert_fail@plt+0x2a04>
   1358c:	mov	r4, r0
   13590:	mvn	r0, #99	; 0x63
   13594:	tst	r5, #2
   13598:	mov	r1, r5
   1359c:	str	r0, [r4, #32]
   135a0:	bic	r0, r5, #516	; 0x204
   135a4:	str	sl, [r4, #44]	; 0x2c
   135a8:	str	r4, [sp, #24]
   135ac:	orrne	r1, r0, #4
   135b0:	str	r1, [r4, #48]	; 0x30
   135b4:	ldr	r0, [r7]
   135b8:	cmp	r0, #0
   135bc:	beq	135f4 <__assert_fail@plt+0x2680>
   135c0:	add	r6, r7, #4
   135c4:	mov	r4, #0
   135c8:	bl	10e48 <strlen@plt>
   135cc:	cmp	r0, r4
   135d0:	movhi	r4, r0
   135d4:	ldr	r0, [r6], #4
   135d8:	cmp	r0, #0
   135dc:	bne	135c8 <__assert_fail@plt+0x2654>
   135e0:	add	r0, r4, #1
   135e4:	ldr	r4, [sp, #24]
   135e8:	cmp	r0, #4096	; 0x1000
   135ec:	movls	r0, #4096	; 0x1000
   135f0:	b	135f8 <__assert_fail@plt+0x2684>
   135f4:	mov	r0, #4096	; 0x1000
   135f8:	ldr	r1, [r4, #36]	; 0x24
   135fc:	add	r0, r0, #256	; 0x100
   13600:	adds	r1, r0, r1
   13604:	bcc	13628 <__assert_fail@plt+0x26b4>
   13608:	ldr	r0, [r4, #24]
   1360c:	bl	13504 <__assert_fail@plt+0x2590>
   13610:	mov	r0, #0
   13614:	str	r0, [r4, #24]
   13618:	bl	10e78 <__errno_location@plt>
   1361c:	mov	r1, #36	; 0x24
   13620:	str	r1, [r0]
   13624:	b	13970 <__assert_fail@plt+0x29fc>
   13628:	str	r1, [r4, #36]	; 0x24
   1362c:	ldr	r0, [r4, #24]
   13630:	bl	17e50 <__assert_fail@plt+0x6edc>
   13634:	cmp	r0, #0
   13638:	beq	1369c <__assert_fail@plt+0x2728>
   1363c:	str	r0, [r4, #24]
   13640:	ldr	r0, [r7]
   13644:	cmp	r0, #0
   13648:	beq	136b0 <__assert_fail@plt+0x273c>
   1364c:	mov	r0, #176	; 0xb0
   13650:	bl	17e20 <__assert_fail@plt+0x6eac>
   13654:	cmp	r0, #0
   13658:	beq	13968 <__assert_fail@plt+0x29f4>
   1365c:	ldr	r1, [r4, #24]
   13660:	mov	r8, r0
   13664:	mov	r0, #0
   13668:	mov	r2, #196608	; 0x30000
   1366c:	strb	r0, [r8, #168]	; 0xa8
   13670:	str	r2, [r8, #58]	; 0x3a
   13674:	mvn	r2, #0
   13678:	str	r0, [r8, #12]
   1367c:	str	r0, [r8, #16]
   13680:	str	r0, [r8, #20]
   13684:	str	r4, [r8, #44]	; 0x2c
   13688:	str	r2, [r8, #48]	; 0x30
   1368c:	str	r0, [r8, #52]	; 0x34
   13690:	str	r1, [r8, #28]
   13694:	str	r0, [r8, #32]
   13698:	b	136b4 <__assert_fail@plt+0x2740>
   1369c:	ldr	r0, [r4, #24]
   136a0:	bl	13504 <__assert_fail@plt+0x2590>
   136a4:	mov	r0, #0
   136a8:	str	r0, [r4, #24]
   136ac:	b	13970 <__assert_fail@plt+0x29fc>
   136b0:	mov	r8, #0
   136b4:	cmp	sl, #0
   136b8:	ldrbne	r0, [r4, #49]	; 0x31
   136bc:	ubfxne	r0, r0, #2, #1
   136c0:	ldr	r4, [r7]
   136c4:	moveq	r0, #1
   136c8:	cmp	r4, #0
   136cc:	beq	13838 <__assert_fail@plt+0x28c4>
   136d0:	eor	r0, r0, #1
   136d4:	and	r1, r5, #2048	; 0x800
   136d8:	mov	r9, #0
   136dc:	mov	r6, #0
   136e0:	str	r8, [sp, #16]
   136e4:	str	sl, [sp, #8]
   136e8:	str	r0, [sp, #12]
   136ec:	mov	r0, #0
   136f0:	str	r1, [sp, #20]
   136f4:	str	r0, [sp, #4]
   136f8:	mov	r0, r4
   136fc:	bl	10e48 <strlen@plt>
   13700:	mov	r8, r0
   13704:	ldr	r0, [sp, #20]
   13708:	cmp	r0, #0
   1370c:	bne	13744 <__assert_fail@plt+0x27d0>
   13710:	cmp	r8, #3
   13714:	bcc	13744 <__assert_fail@plt+0x27d0>
   13718:	add	r0, r4, r8
   1371c:	ldrb	r0, [r0, #-1]
   13720:	cmp	r0, #47	; 0x2f
   13724:	bne	13744 <__assert_fail@plt+0x27d0>
   13728:	sub	r0, r4, #2
   1372c:	ldrb	r1, [r0, r8]
   13730:	cmp	r1, #47	; 0x2f
   13734:	bne	13744 <__assert_fail@plt+0x27d0>
   13738:	sub	r8, r8, #1
   1373c:	cmp	r8, #1
   13740:	bhi	1372c <__assert_fail@plt+0x27b8>
   13744:	add	r0, r8, #176	; 0xb0
   13748:	bic	r0, r0, #7
   1374c:	bl	17e20 <__assert_fail@plt+0x6eac>
   13750:	cmp	r0, #0
   13754:	beq	13844 <__assert_fail@plt+0x28d0>
   13758:	add	sl, r0, #168	; 0xa8
   1375c:	mov	r5, r0
   13760:	mov	r1, r4
   13764:	mov	r2, r8
   13768:	mov	r0, sl
   1376c:	bl	10d70 <memcpy@plt>
   13770:	ldr	r0, [sp, #24]
   13774:	mov	r4, #0
   13778:	mov	r2, #196608	; 0x30000
   1377c:	strb	r4, [sl, r8]
   13780:	str	r2, [r5, #58]	; 0x3a
   13784:	add	r2, r5, #44	; 0x2c
   13788:	ldr	r1, [r0, #24]
   1378c:	stm	r2, {r0, r4, r8}
   13790:	ldr	r8, [sp, #16]
   13794:	ldr	r2, [sp, #12]
   13798:	str	r8, [r5, #4]
   1379c:	str	r4, [r5, #12]
   137a0:	str	r4, [r5, #16]
   137a4:	str	r4, [r5, #20]
   137a8:	str	sl, [r5, #24]
   137ac:	str	r1, [r5, #28]
   137b0:	clz	r1, r9
   137b4:	str	r4, [r5, #32]
   137b8:	lsr	r1, r1, #5
   137bc:	orrs	r1, r2, r1
   137c0:	bne	137d8 <__assert_fail@plt+0x2864>
   137c4:	mov	r0, #2
   137c8:	str	r0, [r5, #112]	; 0x70
   137cc:	str	r4, [r5, #116]	; 0x74
   137d0:	mov	r0, #11
   137d4:	b	137e4 <__assert_fail@plt+0x2870>
   137d8:	mov	r1, r5
   137dc:	mov	r2, #0
   137e0:	bl	13a08 <__assert_fail@plt+0x2a94>
   137e4:	ldr	sl, [sp, #8]
   137e8:	strh	r0, [r5, #56]	; 0x38
   137ec:	cmp	sl, #0
   137f0:	beq	13800 <__assert_fail@plt+0x288c>
   137f4:	str	r9, [r5, #8]
   137f8:	mov	r9, r5
   137fc:	b	13818 <__assert_fail@plt+0x28a4>
   13800:	cmp	r9, #0
   13804:	str	r4, [r5, #8]
   13808:	beq	1382c <__assert_fail@plt+0x28b8>
   1380c:	ldr	r0, [sp, #4]
   13810:	str	r5, [sp, #4]
   13814:	str	r5, [r0, #8]
   13818:	ldr	r4, [r7, #4]!
   1381c:	add	r6, r6, #1
   13820:	cmp	r4, #0
   13824:	bne	136f8 <__assert_fail@plt+0x2784>
   13828:	b	13854 <__assert_fail@plt+0x28e0>
   1382c:	mov	r0, r5
   13830:	str	r5, [sp, #4]
   13834:	b	137f8 <__assert_fail@plt+0x2884>
   13838:	ldr	r4, [sp, #24]
   1383c:	mov	r9, #0
   13840:	b	13884 <__assert_fail@plt+0x2910>
   13844:	ldr	r8, [sp, #16]
   13848:	cmp	r9, #0
   1384c:	bne	13934 <__assert_fail@plt+0x29c0>
   13850:	b	1395c <__assert_fail@plt+0x29e8>
   13854:	cmp	sl, #0
   13858:	beq	13880 <__assert_fail@plt+0x290c>
   1385c:	ldr	r4, [sp, #24]
   13860:	cmp	r6, #2
   13864:	bcc	13884 <__assert_fail@plt+0x2910>
   13868:	mov	r0, r4
   1386c:	mov	r1, r9
   13870:	mov	r2, r6
   13874:	bl	13ba0 <__assert_fail@plt+0x2c2c>
   13878:	mov	r9, r0
   1387c:	b	13884 <__assert_fail@plt+0x2910>
   13880:	ldr	r4, [sp, #24]
   13884:	mov	r0, #176	; 0xb0
   13888:	bl	17e20 <__assert_fail@plt+0x6eac>
   1388c:	cmp	r0, #0
   13890:	beq	13924 <__assert_fail@plt+0x29b0>
   13894:	ldr	r2, [r4, #24]
   13898:	mov	r1, #0
   1389c:	mov	r3, #196608	; 0x30000
   138a0:	str	r0, [r4]
   138a4:	str	r1, [r0, #52]	; 0x34
   138a8:	strb	r1, [r0, #168]	; 0xa8
   138ac:	str	r4, [r0, #44]	; 0x2c
   138b0:	str	r3, [r0, #58]	; 0x3a
   138b4:	str	r2, [r0, #28]
   138b8:	mov	r2, #9
   138bc:	str	r1, [r0, #32]
   138c0:	strh	r2, [r0, #56]	; 0x38
   138c4:	str	r9, [r0, #8]
   138c8:	str	r1, [r0, #12]
   138cc:	str	r1, [r0, #16]
   138d0:	str	r1, [r0, #20]
   138d4:	mov	r1, #1
   138d8:	str	r1, [r0, #48]	; 0x30
   138dc:	ldrh	r0, [r4, #48]	; 0x30
   138e0:	movw	r1, #258	; 0x102
   138e4:	tst	r0, r1
   138e8:	beq	13980 <__assert_fail@plt+0x2a0c>
   138ec:	movw	r0, #13572	; 0x3504
   138f0:	movw	r2, #22220	; 0x56cc
   138f4:	movw	r3, #22252	; 0x56ec
   138f8:	mov	r1, #0
   138fc:	movt	r0, #1
   13900:	movt	r2, #1
   13904:	movt	r3, #1
   13908:	str	r0, [sp]
   1390c:	mov	r0, #31
   13910:	bl	16d58 <__assert_fail@plt+0x5de4>
   13914:	cmp	r0, #0
   13918:	str	r0, [r4, #56]	; 0x38
   1391c:	bne	13998 <__assert_fail@plt+0x2a24>
   13920:	b	1392c <__assert_fail@plt+0x29b8>
   13924:	mov	r0, #0
   13928:	str	r0, [r4]
   1392c:	cmp	r9, #0
   13930:	beq	1395c <__assert_fail@plt+0x29e8>
   13934:	ldrd	r4, [r9, #8]
   13938:	cmp	r5, #0
   1393c:	beq	13948 <__assert_fail@plt+0x29d4>
   13940:	mov	r0, r5
   13944:	bl	10f5c <closedir@plt>
   13948:	mov	r0, r9
   1394c:	bl	13504 <__assert_fail@plt+0x2590>
   13950:	cmp	r4, #0
   13954:	mov	r9, r4
   13958:	bne	13934 <__assert_fail@plt+0x29c0>
   1395c:	mov	r0, r8
   13960:	bl	13504 <__assert_fail@plt+0x2590>
   13964:	ldr	r4, [sp, #24]
   13968:	ldr	r0, [r4, #24]
   1396c:	bl	13504 <__assert_fail@plt+0x2590>
   13970:	mov	r0, r4
   13974:	bl	13504 <__assert_fail@plt+0x2590>
   13978:	mov	r4, #0
   1397c:	b	13568 <__assert_fail@plt+0x25f4>
   13980:	mov	r0, #32
   13984:	bl	17e20 <__assert_fail@plt+0x6eac>
   13988:	cmp	r0, #0
   1398c:	str	r0, [r4, #56]	; 0x38
   13990:	beq	1392c <__assert_fail@plt+0x29b8>
   13994:	bl	17ea4 <__assert_fail@plt+0x6f30>
   13998:	ldr	r4, [sp, #24]
   1399c:	ldr	r0, [r4, #48]	; 0x30
   139a0:	tst	r0, #516	; 0x204
   139a4:	bne	139f8 <__assert_fail@plt+0x2a84>
   139a8:	mov	r1, #32768	; 0x8000
   139ac:	tst	r0, #512	; 0x200
   139b0:	and	r1, r1, r0, lsl #11
   139b4:	orr	r1, r1, #18688	; 0x4900
   139b8:	orr	r2, r1, #524288	; 0x80000
   139bc:	bne	139d4 <__assert_fail@plt+0x2a60>
   139c0:	movw	r0, #34203	; 0x859b
   139c4:	mov	r1, r2
   139c8:	movt	r0, #1
   139cc:	bl	18178 <__assert_fail@plt+0x7204>
   139d0:	b	139e4 <__assert_fail@plt+0x2a70>
   139d4:	ldr	r0, [r4, #32]
   139d8:	movw	r1, #34203	; 0x859b
   139dc:	movt	r1, #1
   139e0:	bl	17ce8 <__assert_fail@plt+0x6d74>
   139e4:	str	r0, [r4, #28]
   139e8:	cmn	r0, #1
   139ec:	ldrle	r0, [r4, #48]	; 0x30
   139f0:	orrle	r0, r0, #4
   139f4:	strle	r0, [r4, #48]	; 0x30
   139f8:	add	r0, r4, #60	; 0x3c
   139fc:	mvn	r1, #0
   13a00:	bl	17b80 <__assert_fail@plt+0x6c0c>
   13a04:	b	13568 <__assert_fail@plt+0x25f4>
   13a08:	push	{r4, r5, r6, sl, fp, lr}
   13a0c:	add	fp, sp, #16
   13a10:	sub	sp, sp, #8
   13a14:	mov	r4, r1
   13a18:	ldr	r1, [r0, #48]	; 0x30
   13a1c:	ldr	r3, [r4, #48]	; 0x30
   13a20:	add	r5, r4, #64	; 0x40
   13a24:	cmp	r3, #0
   13a28:	andeq	r3, r1, #1
   13a2c:	orreq	r2, r3, r2
   13a30:	cmp	r2, #0
   13a34:	andseq	r1, r1, #2
   13a38:	beq	13a94 <__assert_fail@plt+0x2b20>
   13a3c:	ldr	r1, [r4, #24]
   13a40:	mov	r0, #3
   13a44:	mov	r2, r5
   13a48:	bl	10f14 <__xstat64@plt>
   13a4c:	cmp	r0, #0
   13a50:	beq	13b14 <__assert_fail@plt+0x2ba0>
   13a54:	bl	10e78 <__errno_location@plt>
   13a58:	mov	r6, r0
   13a5c:	ldr	r0, [r0]
   13a60:	cmp	r0, #2
   13a64:	bne	13ac4 <__assert_fail@plt+0x2b50>
   13a68:	ldr	r1, [r4, #24]
   13a6c:	mov	r0, #3
   13a70:	mov	r2, r5
   13a74:	bl	10f50 <__lxstat64@plt>
   13a78:	cmp	r0, #0
   13a7c:	bne	13ac0 <__assert_fail@plt+0x2b4c>
   13a80:	mov	r0, #0
   13a84:	str	r0, [r6]
   13a88:	mov	r0, #13
   13a8c:	sub	sp, fp, #16
   13a90:	pop	{r4, r5, r6, sl, fp, pc}
   13a94:	ldr	r1, [r0, #32]
   13a98:	ldr	r2, [r4, #24]
   13a9c:	mov	r0, #256	; 0x100
   13aa0:	mov	r3, r5
   13aa4:	str	r0, [sp]
   13aa8:	mov	r0, #3
   13aac:	bl	10dac <__fxstatat64@plt>
   13ab0:	cmp	r0, #0
   13ab4:	beq	13b14 <__assert_fail@plt+0x2ba0>
   13ab8:	bl	10e78 <__errno_location@plt>
   13abc:	mov	r6, r0
   13ac0:	ldr	r0, [r6]
   13ac4:	vmov.i32	q8, #0	; 0x00000000
   13ac8:	add	r1, r5, #80	; 0x50
   13acc:	str	r0, [r4, #32]
   13ad0:	mov	r0, #0
   13ad4:	vst1.64	{d16-d17}, [r1]
   13ad8:	add	r1, r5, #64	; 0x40
   13adc:	str	r0, [r5, #96]	; 0x60
   13ae0:	vst1.64	{d16-d17}, [r1]
   13ae4:	add	r1, r5, #48	; 0x30
   13ae8:	vst1.64	{d16-d17}, [r1]
   13aec:	add	r1, r5, #32
   13af0:	vst1.64	{d16-d17}, [r1]
   13af4:	add	r1, r5, #16
   13af8:	vst1.64	{d16-d17}, [r1]
   13afc:	mov	r1, #100	; 0x64
   13b00:	vst1.64	{d16-d17}, [r5], r1
   13b04:	str	r0, [r5]
   13b08:	mov	r0, #10
   13b0c:	sub	sp, fp, #16
   13b10:	pop	{r4, r5, r6, sl, fp, pc}
   13b14:	ldr	r0, [r4, #80]	; 0x50
   13b18:	and	r0, r0, #61440	; 0xf000
   13b1c:	cmp	r0, #40960	; 0xa000
   13b20:	beq	13b7c <__assert_fail@plt+0x2c08>
   13b24:	cmp	r0, #32768	; 0x8000
   13b28:	moveq	r0, #8
   13b2c:	subeq	sp, fp, #16
   13b30:	popeq	{r4, r5, r6, sl, fp, pc}
   13b34:	cmp	r0, #16384	; 0x4000
   13b38:	bne	13b70 <__assert_fail@plt+0x2bfc>
   13b3c:	ldrb	r1, [r4, #168]	; 0xa8
   13b40:	mov	r0, #1
   13b44:	cmp	r1, #46	; 0x2e
   13b48:	bne	13b68 <__assert_fail@plt+0x2bf4>
   13b4c:	ldrb	r1, [r4, #169]	; 0xa9
   13b50:	cmp	r1, #0
   13b54:	beq	13b88 <__assert_fail@plt+0x2c14>
   13b58:	cmp	r1, #46	; 0x2e
   13b5c:	ldrbeq	r1, [r4, #170]	; 0xaa
   13b60:	cmpeq	r1, #0
   13b64:	beq	13b88 <__assert_fail@plt+0x2c14>
   13b68:	sub	sp, fp, #16
   13b6c:	pop	{r4, r5, r6, sl, fp, pc}
   13b70:	mov	r0, #3
   13b74:	sub	sp, fp, #16
   13b78:	pop	{r4, r5, r6, sl, fp, pc}
   13b7c:	mov	r0, #12
   13b80:	sub	sp, fp, #16
   13b84:	pop	{r4, r5, r6, sl, fp, pc}
   13b88:	ldr	r1, [r4, #48]	; 0x30
   13b8c:	mov	r0, #5
   13b90:	cmp	r1, #0
   13b94:	movweq	r0, #1
   13b98:	sub	sp, fp, #16
   13b9c:	pop	{r4, r5, r6, sl, fp, pc}
   13ba0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ba4:	add	fp, sp, #24
   13ba8:	ldrd	r8, [r0, #40]	; 0x28
   13bac:	mov	r5, r2
   13bb0:	mov	r4, r1
   13bb4:	mov	r6, r0
   13bb8:	cmp	r8, r2
   13bbc:	bcs	13bfc <__assert_fail@plt+0x2c88>
   13bc0:	add	r1, r5, #40	; 0x28
   13bc4:	cmn	r1, #-1073741823	; 0xc0000001
   13bc8:	str	r1, [r6, #40]	; 0x28
   13bcc:	bhi	13c88 <__assert_fail@plt+0x2d14>
   13bd0:	add	r7, r6, #8
   13bd4:	lsl	r1, r1, #2
   13bd8:	ldr	r0, [r7]
   13bdc:	bl	17e50 <__assert_fail@plt+0x6edc>
   13be0:	cmp	r0, #0
   13be4:	beq	13c88 <__assert_fail@plt+0x2d14>
   13be8:	mov	r6, r7
   13bec:	str	r0, [r7]
   13bf0:	cmp	r4, #0
   13bf4:	bne	13c08 <__assert_fail@plt+0x2c94>
   13bf8:	b	13c1c <__assert_fail@plt+0x2ca8>
   13bfc:	ldr	r0, [r6, #8]!
   13c00:	cmp	r4, #0
   13c04:	beq	13c1c <__assert_fail@plt+0x2ca8>
   13c08:	str	r4, [r0], #4
   13c0c:	ldr	r4, [r4, #8]
   13c10:	cmp	r4, #0
   13c14:	bne	13c08 <__assert_fail@plt+0x2c94>
   13c18:	ldr	r0, [r6]
   13c1c:	mov	r1, r5
   13c20:	mov	r2, #4
   13c24:	mov	r3, r9
   13c28:	bl	10f08 <qsort@plt>
   13c2c:	ldr	r7, [r6]
   13c30:	subs	r0, r5, #1
   13c34:	ldr	r4, [r7]
   13c38:	mov	r1, r4
   13c3c:	beq	13c78 <__assert_fail@plt+0x2d04>
   13c40:	mov	r1, r7
   13c44:	cmp	r5, #2
   13c48:	ldr	r2, [r1, #4]!
   13c4c:	str	r2, [r4, #8]
   13c50:	beq	13c74 <__assert_fail@plt+0x2d00>
   13c54:	rsb	r3, r5, #2
   13c58:	mov	r2, r1
   13c5c:	ldr	r6, [r2, #4]!
   13c60:	ldr	r1, [r1]
   13c64:	adds	r3, r3, #1
   13c68:	str	r6, [r1, #8]
   13c6c:	mov	r1, r2
   13c70:	bne	13c5c <__assert_fail@plt+0x2ce8>
   13c74:	ldr	r1, [r7, r0, lsl #2]
   13c78:	mov	r0, #0
   13c7c:	str	r0, [r1, #8]
   13c80:	mov	r0, r4
   13c84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13c88:	ldr	r0, [r6, #8]
   13c8c:	bl	13504 <__assert_fail@plt+0x2590>
   13c90:	mov	r0, #0
   13c94:	str	r0, [r6, #40]	; 0x28
   13c98:	str	r0, [r6, #8]
   13c9c:	mov	r0, r4
   13ca0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ca4:	push	{r4, r5, r6, r7, fp, lr}
   13ca8:	add	fp, sp, #16
   13cac:	mov	r4, r0
   13cb0:	ldr	r0, [r0]
   13cb4:	cmp	r0, #0
   13cb8:	beq	13cf8 <__assert_fail@plt+0x2d84>
   13cbc:	ldr	r1, [r0, #48]	; 0x30
   13cc0:	cmp	r1, #0
   13cc4:	blt	13cec <__assert_fail@plt+0x2d78>
   13cc8:	ldr	r5, [r0, #8]
   13ccc:	cmp	r5, #0
   13cd0:	ldreq	r5, [r0, #4]
   13cd4:	bl	13504 <__assert_fail@plt+0x2590>
   13cd8:	ldr	r0, [r5, #48]	; 0x30
   13cdc:	cmn	r0, #1
   13ce0:	mov	r0, r5
   13ce4:	bgt	13cc8 <__assert_fail@plt+0x2d54>
   13ce8:	b	13cf0 <__assert_fail@plt+0x2d7c>
   13cec:	mov	r5, r0
   13cf0:	mov	r0, r5
   13cf4:	bl	13504 <__assert_fail@plt+0x2590>
   13cf8:	ldr	r5, [r4, #4]
   13cfc:	cmp	r5, #0
   13d00:	beq	13d2c <__assert_fail@plt+0x2db8>
   13d04:	ldrd	r6, [r5, #8]
   13d08:	cmp	r7, #0
   13d0c:	beq	13d18 <__assert_fail@plt+0x2da4>
   13d10:	mov	r0, r7
   13d14:	bl	10f5c <closedir@plt>
   13d18:	mov	r0, r5
   13d1c:	bl	13504 <__assert_fail@plt+0x2590>
   13d20:	cmp	r6, #0
   13d24:	mov	r5, r6
   13d28:	bne	13d04 <__assert_fail@plt+0x2d90>
   13d2c:	ldr	r0, [r4, #8]
   13d30:	bl	13504 <__assert_fail@plt+0x2590>
   13d34:	ldr	r0, [r4, #24]
   13d38:	bl	13504 <__assert_fail@plt+0x2590>
   13d3c:	ldr	r0, [r4, #48]	; 0x30
   13d40:	tst	r0, #512	; 0x200
   13d44:	bne	13d70 <__assert_fail@plt+0x2dfc>
   13d48:	mov	r6, #0
   13d4c:	tst	r0, #4
   13d50:	bne	13db4 <__assert_fail@plt+0x2e40>
   13d54:	ldr	r0, [r4, #28]
   13d58:	bl	10efc <fchdir@plt>
   13d5c:	cmp	r0, #0
   13d60:	beq	13d90 <__assert_fail@plt+0x2e1c>
   13d64:	bl	10e78 <__errno_location@plt>
   13d68:	ldr	r6, [r0]
   13d6c:	b	13d94 <__assert_fail@plt+0x2e20>
   13d70:	ldr	r0, [r4, #32]
   13d74:	mov	r6, #0
   13d78:	cmp	r0, #0
   13d7c:	blt	13db4 <__assert_fail@plt+0x2e40>
   13d80:	bl	10f44 <close@plt>
   13d84:	cmp	r0, #0
   13d88:	bne	13dac <__assert_fail@plt+0x2e38>
   13d8c:	b	13db4 <__assert_fail@plt+0x2e40>
   13d90:	mov	r6, #0
   13d94:	ldr	r0, [r4, #28]
   13d98:	bl	10f44 <close@plt>
   13d9c:	cmp	r6, #0
   13da0:	bne	13db4 <__assert_fail@plt+0x2e40>
   13da4:	cmp	r0, #0
   13da8:	beq	13db4 <__assert_fail@plt+0x2e40>
   13dac:	bl	10e78 <__errno_location@plt>
   13db0:	ldr	r6, [r0]
   13db4:	add	r5, r4, #60	; 0x3c
   13db8:	b	13dc0 <__assert_fail@plt+0x2e4c>
   13dbc:	bl	10f44 <close@plt>
   13dc0:	mov	r0, r5
   13dc4:	bl	17ba4 <__assert_fail@plt+0x6c30>
   13dc8:	cmp	r0, #0
   13dcc:	bne	13de4 <__assert_fail@plt+0x2e70>
   13dd0:	mov	r0, r5
   13dd4:	bl	17bf8 <__assert_fail@plt+0x6c84>
   13dd8:	cmp	r0, #0
   13ddc:	bge	13dbc <__assert_fail@plt+0x2e48>
   13de0:	b	13dc0 <__assert_fail@plt+0x2e4c>
   13de4:	ldr	r0, [r4, #52]	; 0x34
   13de8:	cmp	r0, #0
   13dec:	beq	13df4 <__assert_fail@plt+0x2e80>
   13df0:	bl	17050 <__assert_fail@plt+0x60dc>
   13df4:	ldrh	r0, [r4, #48]	; 0x30
   13df8:	movw	r1, #258	; 0x102
   13dfc:	tst	r0, r1
   13e00:	beq	13e18 <__assert_fail@plt+0x2ea4>
   13e04:	ldr	r0, [r4, #56]	; 0x38
   13e08:	cmp	r0, #0
   13e0c:	beq	13e20 <__assert_fail@plt+0x2eac>
   13e10:	bl	17050 <__assert_fail@plt+0x60dc>
   13e14:	b	13e20 <__assert_fail@plt+0x2eac>
   13e18:	ldr	r0, [r4, #56]	; 0x38
   13e1c:	bl	13504 <__assert_fail@plt+0x2590>
   13e20:	mov	r0, r4
   13e24:	bl	13504 <__assert_fail@plt+0x2590>
   13e28:	cmp	r6, #0
   13e2c:	moveq	r0, #0
   13e30:	popeq	{r4, r5, r6, r7, fp, pc}
   13e34:	bl	10e78 <__errno_location@plt>
   13e38:	str	r6, [r0]
   13e3c:	mvn	r0, #0
   13e40:	pop	{r4, r5, r6, r7, fp, pc}
   13e44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13e48:	add	fp, sp, #24
   13e4c:	sub	sp, sp, #8
   13e50:	ldr	r6, [r0]
   13e54:	mov	r5, #0
   13e58:	cmp	r6, #0
   13e5c:	beq	14590 <__assert_fail@plt+0x361c>
   13e60:	mov	r4, r0
   13e64:	ldr	r0, [r0, #48]	; 0x30
   13e68:	tst	r0, #8192	; 0x2000
   13e6c:	bne	14590 <__assert_fail@plt+0x361c>
   13e70:	ldrh	r1, [r6, #60]	; 0x3c
   13e74:	mov	r2, #3
   13e78:	strh	r2, [r6, #60]	; 0x3c
   13e7c:	cmp	r1, #1
   13e80:	beq	13ef8 <__assert_fail@plt+0x2f84>
   13e84:	mov	r7, r6
   13e88:	cmp	r1, #2
   13e8c:	bne	13f14 <__assert_fail@plt+0x2fa0>
   13e90:	ldrh	r2, [r7, #56]!	; 0x38
   13e94:	movw	r3, #65534	; 0xfffe
   13e98:	and	r3, r2, r3
   13e9c:	cmp	r3, #12
   13ea0:	bne	13f18 <__assert_fail@plt+0x2fa4>
   13ea4:	mov	r0, r4
   13ea8:	mov	r1, r6
   13eac:	mov	r2, #1
   13eb0:	bl	13a08 <__assert_fail@plt+0x2a94>
   13eb4:	cmp	r0, #1
   13eb8:	strh	r0, [r6, #56]	; 0x38
   13ebc:	bne	14000 <__assert_fail@plt+0x308c>
   13ec0:	ldr	r0, [r4, #48]	; 0x30
   13ec4:	tst	r0, #4
   13ec8:	bne	14000 <__assert_fail@plt+0x308c>
   13ecc:	mov	r1, #32768	; 0x8000
   13ed0:	tst	r0, #512	; 0x200
   13ed4:	and	r1, r1, r0, lsl #11
   13ed8:	orr	r1, r1, #18688	; 0x4900
   13edc:	orr	r2, r1, #524288	; 0x80000
   13ee0:	bne	1426c <__assert_fail@plt+0x32f8>
   13ee4:	movw	r0, #34203	; 0x859b
   13ee8:	mov	r1, r2
   13eec:	movt	r0, #1
   13ef0:	bl	18178 <__assert_fail@plt+0x7204>
   13ef4:	b	1427c <__assert_fail@plt+0x3308>
   13ef8:	mov	r0, r4
   13efc:	mov	r1, r6
   13f00:	mov	r2, #0
   13f04:	bl	13a08 <__assert_fail@plt+0x2a94>
   13f08:	strh	r0, [r6, #56]	; 0x38
   13f0c:	mov	r5, r6
   13f10:	b	14590 <__assert_fail@plt+0x361c>
   13f14:	ldrh	r2, [r7, #56]!	; 0x38
   13f18:	cmp	r2, #1
   13f1c:	bne	13f94 <__assert_fail@plt+0x3020>
   13f20:	cmp	r1, #4
   13f24:	bne	14008 <__assert_fail@plt+0x3094>
   13f28:	ldrb	r0, [r6, #58]	; 0x3a
   13f2c:	tst	r0, #2
   13f30:	beq	13f3c <__assert_fail@plt+0x2fc8>
   13f34:	ldr	r0, [r6, #36]	; 0x24
   13f38:	bl	10f44 <close@plt>
   13f3c:	ldr	r5, [r4, #4]
   13f40:	cmp	r5, #0
   13f44:	beq	13f78 <__assert_fail@plt+0x3004>
   13f48:	ldrd	r8, [r5, #8]
   13f4c:	cmp	r9, #0
   13f50:	beq	13f5c <__assert_fail@plt+0x2fe8>
   13f54:	mov	r0, r9
   13f58:	bl	10f5c <closedir@plt>
   13f5c:	mov	r0, r5
   13f60:	bl	13504 <__assert_fail@plt+0x2590>
   13f64:	cmp	r8, #0
   13f68:	mov	r5, r8
   13f6c:	bne	13f48 <__assert_fail@plt+0x2fd4>
   13f70:	mov	r0, #0
   13f74:	str	r0, [r4, #4]
   13f78:	mov	r0, #6
   13f7c:	strh	r0, [r6, #56]	; 0x38
   13f80:	mov	r0, r4
   13f84:	mov	r1, r6
   13f88:	bl	145a0 <__assert_fail@plt+0x362c>
   13f8c:	mov	r5, r6
   13f90:	b	14590 <__assert_fail@plt+0x361c>
   13f94:	ldr	r5, [r6, #8]
   13f98:	cmp	r5, #0
   13f9c:	beq	14098 <__assert_fail@plt+0x3124>
   13fa0:	mov	r0, r6
   13fa4:	str	r5, [r4]
   13fa8:	bl	13504 <__assert_fail@plt+0x2590>
   13fac:	ldr	r0, [r5, #48]	; 0x30
   13fb0:	cmp	r0, #0
   13fb4:	beq	140e4 <__assert_fail@plt+0x3170>
   13fb8:	ldrh	r0, [r5, #60]	; 0x3c
   13fbc:	mov	r6, r5
   13fc0:	cmp	r0, #4
   13fc4:	beq	13f94 <__assert_fail@plt+0x3020>
   13fc8:	cmp	r0, #2
   13fcc:	bne	14184 <__assert_fail@plt+0x3210>
   13fd0:	mov	r0, r4
   13fd4:	mov	r1, r5
   13fd8:	mov	r2, #1
   13fdc:	bl	13a08 <__assert_fail@plt+0x2a94>
   13fe0:	strh	r0, [r5, #56]	; 0x38
   13fe4:	cmp	r0, #1
   13fe8:	ldreq	r0, [r4, #48]	; 0x30
   13fec:	tsteq	r0, #4
   13ff0:	beq	144a8 <__assert_fail@plt+0x3534>
   13ff4:	mov	r0, #3
   13ff8:	strh	r0, [r5, #60]	; 0x3c
   13ffc:	b	14184 <__assert_fail@plt+0x3210>
   14000:	mov	r5, r6
   14004:	b	141c0 <__assert_fail@plt+0x324c>
   14008:	tst	r0, #64	; 0x40
   1400c:	beq	14028 <__assert_fail@plt+0x30b4>
   14010:	ldrd	r2, [r4, #16]
   14014:	ldrd	r8, [r6, #64]	; 0x40
   14018:	eor	r1, r9, r3
   1401c:	eor	r2, r8, r2
   14020:	orrs	r1, r2, r1
   14024:	bne	13f28 <__assert_fail@plt+0x2fb4>
   14028:	ldr	r5, [r4, #4]
   1402c:	cmp	r5, #0
   14030:	beq	14160 <__assert_fail@plt+0x31ec>
   14034:	tst	r0, #4096	; 0x1000
   14038:	bne	14128 <__assert_fail@plt+0x31b4>
   1403c:	ldr	r3, [r6, #24]
   14040:	mov	r0, r4
   14044:	mov	r1, r6
   14048:	mvn	r2, #0
   1404c:	bl	14670 <__assert_fail@plt+0x36fc>
   14050:	cmp	r0, #0
   14054:	beq	14178 <__assert_fail@plt+0x3204>
   14058:	bl	10e78 <__errno_location@plt>
   1405c:	ldr	r0, [r0]
   14060:	str	r0, [r6, #32]
   14064:	ldrh	r0, [r6, #58]	; 0x3a
   14068:	orr	r0, r0, #1
   1406c:	strh	r0, [r6, #58]	; 0x3a
   14070:	ldr	r0, [r4, #4]
   14074:	cmp	r0, #0
   14078:	beq	14178 <__assert_fail@plt+0x3204>
   1407c:	ldmib	r0, {r1, r2}
   14080:	ldr	r1, [r1, #24]
   14084:	cmp	r2, #0
   14088:	str	r1, [r0, #24]
   1408c:	mov	r0, r2
   14090:	bne	1407c <__assert_fail@plt+0x3108>
   14094:	b	14178 <__assert_fail@plt+0x3204>
   14098:	ldr	r5, [r6, #4]
   1409c:	ldr	r0, [r5, #12]
   140a0:	cmp	r0, #0
   140a4:	beq	142ac <__assert_fail@plt+0x3338>
   140a8:	str	r5, [r4]
   140ac:	ldr	r1, [r5, #40]	; 0x28
   140b0:	ldr	r0, [r4, #24]
   140b4:	mov	r5, #0
   140b8:	strb	r5, [r0, r1]
   140bc:	mov	r0, r4
   140c0:	mov	r1, #3
   140c4:	bl	148c8 <__assert_fail@plt+0x3954>
   140c8:	cmp	r0, #0
   140cc:	beq	1429c <__assert_fail@plt+0x3328>
   140d0:	mov	r7, r0
   140d4:	mov	r0, r6
   140d8:	bl	13504 <__assert_fail@plt+0x2590>
   140dc:	mov	r5, r7
   140e0:	b	14184 <__assert_fail@plt+0x3210>
   140e4:	mov	r0, r4
   140e8:	bl	1537c <__assert_fail@plt+0x4408>
   140ec:	ldr	r1, [r4, #48]	; 0x30
   140f0:	cmp	r0, #0
   140f4:	beq	14108 <__assert_fail@plt+0x3194>
   140f8:	orr	r0, r1, #8192	; 0x2000
   140fc:	mov	r5, #0
   14100:	str	r0, [r4, #48]	; 0x30
   14104:	b	14590 <__assert_fail@plt+0x361c>
   14108:	movw	r0, #258	; 0x102
   1410c:	tst	r1, r0
   14110:	beq	1435c <__assert_fail@plt+0x33e8>
   14114:	ldr	r0, [r4, #56]	; 0x38
   14118:	cmp	r0, #0
   1411c:	beq	14364 <__assert_fail@plt+0x33f0>
   14120:	bl	17050 <__assert_fail@plt+0x60dc>
   14124:	b	14364 <__assert_fail@plt+0x33f0>
   14128:	bic	r0, r0, #4096	; 0x1000
   1412c:	str	r0, [r4, #48]	; 0x30
   14130:	ldrd	r8, [r5, #8]
   14134:	cmp	r9, #0
   14138:	beq	14144 <__assert_fail@plt+0x31d0>
   1413c:	mov	r0, r9
   14140:	bl	10f5c <closedir@plt>
   14144:	mov	r0, r5
   14148:	bl	13504 <__assert_fail@plt+0x2590>
   1414c:	cmp	r8, #0
   14150:	mov	r5, r8
   14154:	bne	14130 <__assert_fail@plt+0x31bc>
   14158:	mov	r0, #0
   1415c:	str	r0, [r4, #4]
   14160:	mov	r0, r4
   14164:	mov	r1, #3
   14168:	bl	148c8 <__assert_fail@plt+0x3954>
   1416c:	cmp	r0, #0
   14170:	str	r0, [r4, #4]
   14174:	beq	14240 <__assert_fail@plt+0x32cc>
   14178:	ldr	r5, [r4, #4]
   1417c:	mov	r0, #0
   14180:	str	r0, [r4, #4]
   14184:	ldr	r0, [r5, #4]
   14188:	ldr	r1, [r0, #28]
   1418c:	ldr	r0, [r0, #40]	; 0x28
   14190:	sub	r2, r0, #1
   14194:	ldrb	r1, [r1, r2]
   14198:	cmp	r1, #47	; 0x2f
   1419c:	ldr	r1, [r4, #24]
   141a0:	moveq	r0, r2
   141a4:	mov	r2, #47	; 0x2f
   141a8:	strb	r2, [r1, r0]!
   141ac:	ldr	r2, [r5, #52]	; 0x34
   141b0:	add	r0, r1, #1
   141b4:	add	r1, r5, #168	; 0xa8
   141b8:	add	r2, r2, #1
   141bc:	bl	10d58 <memmove@plt>
   141c0:	str	r5, [r4]
   141c4:	ldrh	r0, [r5, #56]	; 0x38
   141c8:	cmp	r0, #11
   141cc:	bne	14200 <__assert_fail@plt+0x328c>
   141d0:	ldrd	r0, [r5, #112]	; 0x70
   141d4:	eor	r2, r0, #1
   141d8:	orrs	r2, r2, r1
   141dc:	beq	14590 <__assert_fail@plt+0x361c>
   141e0:	eor	r0, r0, #2
   141e4:	orrs	r0, r0, r1
   141e8:	bne	1459c <__assert_fail@plt+0x3628>
   141ec:	mov	r0, r4
   141f0:	mov	r1, r5
   141f4:	mov	r2, #0
   141f8:	bl	13a08 <__assert_fail@plt+0x2a94>
   141fc:	strh	r0, [r5, #56]	; 0x38
   14200:	cmp	r0, #1
   14204:	bne	14590 <__assert_fail@plt+0x361c>
   14208:	ldr	r0, [r5, #48]	; 0x30
   1420c:	cmp	r0, #0
   14210:	ldrdeq	r0, [r5, #64]	; 0x40
   14214:	strdeq	r0, [r4, #16]
   14218:	mov	r0, r4
   1421c:	mov	r1, r5
   14220:	bl	1540c <__assert_fail@plt+0x4498>
   14224:	cmp	r0, #0
   14228:	bne	14590 <__assert_fail@plt+0x361c>
   1422c:	bl	10e78 <__errno_location@plt>
   14230:	mov	r1, #12
   14234:	mov	r5, #0
   14238:	str	r1, [r0]
   1423c:	b	14590 <__assert_fail@plt+0x361c>
   14240:	ldrb	r0, [r4, #49]	; 0x31
   14244:	mov	r5, #0
   14248:	tst	r0, #32
   1424c:	bne	14590 <__assert_fail@plt+0x361c>
   14250:	ldr	r0, [r6, #32]
   14254:	cmp	r0, #0
   14258:	ldrhne	r0, [r7]
   1425c:	cmpne	r0, #4
   14260:	movne	r0, #7
   14264:	strhne	r0, [r7]
   14268:	b	13f80 <__assert_fail@plt+0x300c>
   1426c:	ldr	r0, [r4, #32]
   14270:	movw	r1, #34203	; 0x859b
   14274:	movt	r1, #1
   14278:	bl	17ce8 <__assert_fail@plt+0x6d74>
   1427c:	cmn	r0, #1
   14280:	str	r0, [r6, #36]	; 0x24
   14284:	ble	14340 <__assert_fail@plt+0x33cc>
   14288:	ldrh	r0, [r6, #58]	; 0x3a
   1428c:	mov	r5, r6
   14290:	orr	r0, r0, #2
   14294:	strh	r0, [r6, #58]	; 0x3a
   14298:	b	141c0 <__assert_fail@plt+0x324c>
   1429c:	ldrb	r0, [r4, #49]	; 0x31
   142a0:	tst	r0, #32
   142a4:	bne	14590 <__assert_fail@plt+0x361c>
   142a8:	ldr	r5, [r6, #4]
   142ac:	mov	r0, r6
   142b0:	str	r5, [r4]
   142b4:	bl	13504 <__assert_fail@plt+0x2590>
   142b8:	ldr	r0, [r5, #48]	; 0x30
   142bc:	cmn	r0, #1
   142c0:	beq	14324 <__assert_fail@plt+0x33b0>
   142c4:	ldrh	r0, [r5, #56]	; 0x38
   142c8:	cmp	r0, #11
   142cc:	beq	1459c <__assert_fail@plt+0x3628>
   142d0:	ldr	r0, [r5, #40]	; 0x28
   142d4:	ldr	r1, [r4, #24]
   142d8:	mov	r2, #0
   142dc:	strb	r2, [r1, r0]
   142e0:	ldr	r0, [r5, #48]	; 0x30
   142e4:	cmp	r0, #0
   142e8:	beq	14434 <__assert_fail@plt+0x34c0>
   142ec:	ldrh	r0, [r5, #58]	; 0x3a
   142f0:	tst	r0, #2
   142f4:	bne	14460 <__assert_fail@plt+0x34ec>
   142f8:	tst	r0, #1
   142fc:	bne	14554 <__assert_fail@plt+0x35e0>
   14300:	ldr	r1, [r5, #4]
   14304:	movw	r3, #34202	; 0x859a
   14308:	mov	r0, r4
   1430c:	mvn	r2, #0
   14310:	movt	r3, #1
   14314:	bl	14670 <__assert_fail@plt+0x36fc>
   14318:	cmp	r0, #0
   1431c:	bne	14444 <__assert_fail@plt+0x34d0>
   14320:	b	14554 <__assert_fail@plt+0x35e0>
   14324:	mov	r0, r5
   14328:	bl	13504 <__assert_fail@plt+0x2590>
   1432c:	bl	10e78 <__errno_location@plt>
   14330:	mov	r5, #0
   14334:	str	r5, [r0]
   14338:	str	r5, [r4]
   1433c:	b	14590 <__assert_fail@plt+0x361c>
   14340:	bl	10e78 <__errno_location@plt>
   14344:	ldr	r0, [r0]
   14348:	mov	r1, #7
   1434c:	mov	r5, r6
   14350:	strh	r1, [r6, #56]	; 0x38
   14354:	str	r0, [r6, #32]
   14358:	b	141c0 <__assert_fail@plt+0x324c>
   1435c:	ldr	r0, [r4, #56]	; 0x38
   14360:	bl	13504 <__assert_fail@plt+0x2590>
   14364:	ldr	r1, [r5, #52]	; 0x34
   14368:	add	r6, r5, #168	; 0xa8
   1436c:	str	r1, [r5, #40]	; 0x28
   14370:	add	r2, r1, #1
   14374:	mov	r1, r6
   14378:	ldr	r0, [r4, #24]
   1437c:	bl	10d58 <memmove@plt>
   14380:	mov	r0, r6
   14384:	mov	r1, #47	; 0x2f
   14388:	bl	10ea8 <strrchr@plt>
   1438c:	cmp	r0, #0
   14390:	beq	143cc <__assert_fail@plt+0x3458>
   14394:	cmp	r0, r6
   14398:	bne	143a8 <__assert_fail@plt+0x3434>
   1439c:	ldrb	r1, [r5, #169]	; 0xa9
   143a0:	cmp	r1, #0
   143a4:	beq	143cc <__assert_fail@plt+0x3458>
   143a8:	add	r7, r0, #1
   143ac:	mov	r0, r7
   143b0:	bl	10e48 <strlen@plt>
   143b4:	mov	r8, r0
   143b8:	add	r2, r0, #1
   143bc:	mov	r0, r6
   143c0:	mov	r1, r7
   143c4:	bl	10d58 <memmove@plt>
   143c8:	str	r8, [r5, #52]	; 0x34
   143cc:	ldr	r0, [r4, #24]
   143d0:	movw	r1, #258	; 0x102
   143d4:	str	r0, [r5, #24]
   143d8:	str	r0, [r5, #28]
   143dc:	ldrh	r0, [r4, #48]	; 0x30
   143e0:	tst	r0, r1
   143e4:	beq	14418 <__assert_fail@plt+0x34a4>
   143e8:	movw	r0, #13572	; 0x3504
   143ec:	movw	r2, #22220	; 0x56cc
   143f0:	movw	r3, #22252	; 0x56ec
   143f4:	mov	r1, #0
   143f8:	movt	r0, #1
   143fc:	movt	r2, #1
   14400:	movt	r3, #1
   14404:	str	r0, [sp]
   14408:	mov	r0, #31
   1440c:	bl	16d58 <__assert_fail@plt+0x5de4>
   14410:	str	r0, [r4, #56]	; 0x38
   14414:	b	141c0 <__assert_fail@plt+0x324c>
   14418:	mov	r0, #32
   1441c:	bl	17e20 <__assert_fail@plt+0x6eac>
   14420:	cmp	r0, #0
   14424:	str	r0, [r4, #56]	; 0x38
   14428:	beq	141c0 <__assert_fail@plt+0x324c>
   1442c:	bl	17ea4 <__assert_fail@plt+0x6f30>
   14430:	b	141c0 <__assert_fail@plt+0x324c>
   14434:	mov	r0, r4
   14438:	bl	1537c <__assert_fail@plt+0x4408>
   1443c:	cmp	r0, #0
   14440:	beq	14554 <__assert_fail@plt+0x35e0>
   14444:	bl	10e78 <__errno_location@plt>
   14448:	ldr	r0, [r0]
   1444c:	str	r0, [r5, #32]
   14450:	ldr	r0, [r4, #48]	; 0x30
   14454:	orr	r0, r0, #8192	; 0x2000
   14458:	str	r0, [r4, #48]	; 0x30
   1445c:	b	14554 <__assert_fail@plt+0x35e0>
   14460:	ldr	r0, [r4, #48]	; 0x30
   14464:	tst	r0, #4
   14468:	bne	144d4 <__assert_fail@plt+0x3560>
   1446c:	mov	r7, r5
   14470:	tst	r0, #512	; 0x200
   14474:	ldr	r6, [r7, #36]!	; 0x24
   14478:	bne	14520 <__assert_fail@plt+0x35ac>
   1447c:	mov	r0, r6
   14480:	bl	10efc <fchdir@plt>
   14484:	cmp	r0, #0
   14488:	beq	1454c <__assert_fail@plt+0x35d8>
   1448c:	bl	10e78 <__errno_location@plt>
   14490:	ldr	r0, [r0]
   14494:	str	r0, [r5, #32]
   14498:	ldr	r0, [r4, #48]	; 0x30
   1449c:	orr	r0, r0, #8192	; 0x2000
   144a0:	str	r0, [r4, #48]	; 0x30
   144a4:	b	1454c <__assert_fail@plt+0x35d8>
   144a8:	mov	r1, #32768	; 0x8000
   144ac:	tst	r0, #512	; 0x200
   144b0:	and	r1, r1, r0, lsl #11
   144b4:	orr	r1, r1, #18688	; 0x4900
   144b8:	orr	r2, r1, #524288	; 0x80000
   144bc:	bne	144dc <__assert_fail@plt+0x3568>
   144c0:	movw	r0, #34203	; 0x859b
   144c4:	mov	r1, r2
   144c8:	movt	r0, #1
   144cc:	bl	18178 <__assert_fail@plt+0x7204>
   144d0:	b	144ec <__assert_fail@plt+0x3578>
   144d4:	add	r7, r5, #36	; 0x24
   144d8:	b	1454c <__assert_fail@plt+0x35d8>
   144dc:	ldr	r0, [r4, #32]
   144e0:	movw	r1, #34203	; 0x859b
   144e4:	movt	r1, #1
   144e8:	bl	17ce8 <__assert_fail@plt+0x6d74>
   144ec:	cmn	r0, #1
   144f0:	str	r0, [r5, #36]	; 0x24
   144f4:	ble	14508 <__assert_fail@plt+0x3594>
   144f8:	ldrh	r0, [r5, #58]	; 0x3a
   144fc:	orr	r0, r0, #2
   14500:	strh	r0, [r5, #58]	; 0x3a
   14504:	b	13ff4 <__assert_fail@plt+0x3080>
   14508:	bl	10e78 <__errno_location@plt>
   1450c:	ldr	r0, [r0]
   14510:	mov	r1, #7
   14514:	strh	r1, [r5, #56]	; 0x38
   14518:	str	r0, [r5, #32]
   1451c:	b	13ff4 <__assert_fail@plt+0x3080>
   14520:	ldr	r1, [r4, #32]
   14524:	cmp	r1, r6
   14528:	bne	14534 <__assert_fail@plt+0x35c0>
   1452c:	cmn	r1, #100	; 0x64
   14530:	bne	1459c <__assert_fail@plt+0x3628>
   14534:	add	r0, r4, #60	; 0x3c
   14538:	bl	17bac <__assert_fail@plt+0x6c38>
   1453c:	cmp	r0, #0
   14540:	blt	14548 <__assert_fail@plt+0x35d4>
   14544:	bl	10f44 <close@plt>
   14548:	str	r6, [r4, #32]
   1454c:	ldr	r0, [r7]
   14550:	bl	10f44 <close@plt>
   14554:	ldrh	r0, [r5, #56]	; 0x38
   14558:	cmp	r0, #2
   1455c:	beq	14584 <__assert_fail@plt+0x3610>
   14560:	ldr	r0, [r5, #32]
   14564:	mov	r1, #7
   14568:	cmp	r0, #0
   1456c:	movweq	r1, #6
   14570:	strh	r1, [r5, #56]	; 0x38
   14574:	bne	14584 <__assert_fail@plt+0x3610>
   14578:	mov	r0, r4
   1457c:	mov	r1, r5
   14580:	bl	145a0 <__assert_fail@plt+0x362c>
   14584:	ldrb	r0, [r4, #49]	; 0x31
   14588:	tst	r0, #32
   1458c:	movne	r5, #0
   14590:	mov	r0, r5
   14594:	sub	sp, fp, #24
   14598:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1459c:	bl	10f38 <abort@plt>
   145a0:	push	{r4, r5, r6, r7, fp, lr}
   145a4:	add	fp, sp, #16
   145a8:	sub	sp, sp, #24
   145ac:	ldrh	r2, [r0, #48]	; 0x30
   145b0:	movw	r3, #258	; 0x102
   145b4:	add	lr, r1, #64	; 0x40
   145b8:	tst	r2, r3
   145bc:	beq	145f4 <__assert_fail@plt+0x3680>
   145c0:	ldrd	r2, [lr]
   145c4:	stm	sp, {r2, r3}
   145c8:	ldrd	r2, [r1, #160]	; 0xa0
   145cc:	mov	r1, sp
   145d0:	str	r3, [sp, #12]
   145d4:	str	r2, [sp, #8]
   145d8:	ldr	r0, [r0, #56]	; 0x38
   145dc:	bl	178dc <__assert_fail@plt+0x6968>
   145e0:	cmp	r0, #0
   145e4:	beq	1466c <__assert_fail@plt+0x36f8>
   145e8:	bl	13504 <__assert_fail@plt+0x2590>
   145ec:	sub	sp, fp, #16
   145f0:	pop	{r4, r5, r6, r7, fp, pc}
   145f4:	ldr	r2, [r1, #4]
   145f8:	cmp	r2, #0
   145fc:	beq	14664 <__assert_fail@plt+0x36f0>
   14600:	ldr	r3, [r2, #48]	; 0x30
   14604:	cmp	r3, #0
   14608:	blt	14664 <__assert_fail@plt+0x36f0>
   1460c:	ldr	ip, [r0, #56]	; 0x38
   14610:	ldrd	r4, [ip, #16]
   14614:	orrs	r3, r4, r5
   14618:	beq	1466c <__assert_fail@plt+0x36f8>
   1461c:	ldrd	r4, [r1, #160]	; 0xa0
   14620:	ldrd	r6, [ip]
   14624:	eor	r1, r7, r5
   14628:	eor	r3, r6, r4
   1462c:	orrs	r1, r3, r1
   14630:	bne	14664 <__assert_fail@plt+0x36f0>
   14634:	ldr	r1, [ip, #8]!
   14638:	ldrd	r4, [lr]
   1463c:	ldr	r3, [ip, #4]
   14640:	eor	r1, r1, r4
   14644:	eor	r3, r3, r5
   14648:	orrs	r1, r1, r3
   1464c:	bne	14664 <__assert_fail@plt+0x36f0>
   14650:	ldrd	r4, [r2, #64]	; 0x40
   14654:	strd	r4, [ip]
   14658:	ldr	r0, [r0, #56]	; 0x38
   1465c:	ldrd	r2, [r2, #160]	; 0xa0
   14660:	strd	r2, [r0]
   14664:	sub	sp, fp, #16
   14668:	pop	{r4, r5, r6, r7, fp, pc}
   1466c:	bl	10f38 <abort@plt>
   14670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14674:	add	fp, sp, #28
   14678:	sub	sp, sp, #108	; 0x6c
   1467c:	mov	r7, r3
   14680:	mov	r4, r2
   14684:	mov	r8, r1
   14688:	mov	sl, r0
   1468c:	cmp	r3, #0
   14690:	beq	146b4 <__assert_fail@plt+0x3740>
   14694:	movw	r1, #34202	; 0x859a
   14698:	mov	r0, r7
   1469c:	movt	r1, #1
   146a0:	bl	10d1c <strcmp@plt>
   146a4:	mov	r6, r0
   146a8:	cmp	r0, #0
   146ac:	movwne	r6, #1
   146b0:	b	146b8 <__assert_fail@plt+0x3744>
   146b4:	mov	r6, #1
   146b8:	ldr	r0, [sl, #48]	; 0x30
   146bc:	tst	r0, #4
   146c0:	bne	14718 <__assert_fail@plt+0x37a4>
   146c4:	cmn	r4, #1
   146c8:	mov	r1, #0
   146cc:	mov	r9, #0
   146d0:	movwgt	r1, #1
   146d4:	orrs	r1, r1, r6
   146d8:	bne	14738 <__assert_fail@plt+0x37c4>
   146dc:	ands	r0, r0, #512	; 0x200
   146e0:	beq	14738 <__assert_fail@plt+0x37c4>
   146e4:	add	r4, sl, #60	; 0x3c
   146e8:	mov	r0, r4
   146ec:	bl	17ba4 <__assert_fail@plt+0x6c30>
   146f0:	cmp	r0, #0
   146f4:	bne	14740 <__assert_fail@plt+0x37cc>
   146f8:	mov	r0, r4
   146fc:	bl	17bf8 <__assert_fail@plt+0x6c84>
   14700:	cmn	r0, #1
   14704:	ble	14740 <__assert_fail@plt+0x37cc>
   14708:	mov	r4, r0
   1470c:	mov	r9, #0
   14710:	mov	r7, #0
   14714:	b	14788 <__assert_fail@plt+0x3814>
   14718:	mov	r5, #0
   1471c:	cmp	r4, #0
   14720:	blt	148b8 <__assert_fail@plt+0x3944>
   14724:	ands	r0, r0, #512	; 0x200
   14728:	beq	148b8 <__assert_fail@plt+0x3944>
   1472c:	mov	r0, r4
   14730:	bl	10f44 <close@plt>
   14734:	b	148b8 <__assert_fail@plt+0x3944>
   14738:	cmn	r4, #1
   1473c:	bgt	14788 <__assert_fail@plt+0x3814>
   14740:	ldr	r0, [sl, #48]	; 0x30
   14744:	mov	r1, #32768	; 0x8000
   14748:	and	r1, r1, r0, lsl #11
   1474c:	tst	r0, #512	; 0x200
   14750:	orr	r1, r1, #18688	; 0x4900
   14754:	orr	r2, r1, #524288	; 0x80000
   14758:	bne	1476c <__assert_fail@plt+0x37f8>
   1475c:	mov	r0, r7
   14760:	mov	r1, r2
   14764:	bl	18178 <__assert_fail@plt+0x7204>
   14768:	b	14778 <__assert_fail@plt+0x3804>
   1476c:	ldr	r0, [sl, #32]
   14770:	mov	r1, r7
   14774:	bl	17ce8 <__assert_fail@plt+0x6d74>
   14778:	mov	r4, r0
   1477c:	mov	r9, #1
   14780:	cmp	r0, #0
   14784:	blt	1485c <__assert_fail@plt+0x38e8>
   14788:	ldr	r5, [sl, #48]	; 0x30
   1478c:	tst	r5, #2
   14790:	bne	147d4 <__assert_fail@plt+0x3860>
   14794:	cmp	r7, #0
   14798:	beq	147b4 <__assert_fail@plt+0x3840>
   1479c:	movw	r1, #34202	; 0x859a
   147a0:	mov	r0, r7
   147a4:	movt	r1, #1
   147a8:	bl	10d1c <strcmp@plt>
   147ac:	cmp	r0, #0
   147b0:	beq	147d4 <__assert_fail@plt+0x3860>
   147b4:	tst	r5, #512	; 0x200
   147b8:	bne	1482c <__assert_fail@plt+0x38b8>
   147bc:	mov	r0, r4
   147c0:	bl	10efc <fchdir@plt>
   147c4:	mov	r5, r0
   147c8:	cmp	r9, #0
   147cc:	bne	1487c <__assert_fail@plt+0x3908>
   147d0:	b	148b8 <__assert_fail@plt+0x3944>
   147d4:	mov	r2, sp
   147d8:	mov	r0, #3
   147dc:	mov	r1, r4
   147e0:	bl	10db8 <__fxstat64@plt>
   147e4:	cmp	r0, #0
   147e8:	bne	14870 <__assert_fail@plt+0x38fc>
   147ec:	ldrd	r0, [r8, #64]	; 0x40
   147f0:	ldm	sp, {r2, r3}
   147f4:	eor	r1, r1, r3
   147f8:	eor	r0, r0, r2
   147fc:	orrs	r0, r0, r1
   14800:	bne	14864 <__assert_fail@plt+0x38f0>
   14804:	ldrd	r0, [r8, #160]	; 0xa0
   14808:	ldr	r2, [sp, #96]	; 0x60
   1480c:	ldr	r3, [sp, #100]	; 0x64
   14810:	eor	r1, r1, r3
   14814:	eor	r0, r0, r2
   14818:	orrs	r0, r0, r1
   1481c:	bne	14864 <__assert_fail@plt+0x38f0>
   14820:	ldr	r5, [sl, #48]	; 0x30
   14824:	tst	r5, #512	; 0x200
   14828:	beq	147bc <__assert_fail@plt+0x3848>
   1482c:	ldr	r1, [sl, #32]
   14830:	cmp	r1, r4
   14834:	bne	14840 <__assert_fail@plt+0x38cc>
   14838:	cmn	r1, #100	; 0x64
   1483c:	bne	148c4 <__assert_fail@plt+0x3950>
   14840:	cmp	r6, #0
   14844:	beq	14898 <__assert_fail@plt+0x3924>
   14848:	add	r0, sl, #60	; 0x3c
   1484c:	bl	17bac <__assert_fail@plt+0x6c38>
   14850:	cmp	r0, #0
   14854:	bge	148ac <__assert_fail@plt+0x3938>
   14858:	b	148b0 <__assert_fail@plt+0x393c>
   1485c:	mvn	r5, #0
   14860:	b	148b8 <__assert_fail@plt+0x3944>
   14864:	bl	10e78 <__errno_location@plt>
   14868:	mov	r1, #2
   1486c:	str	r1, [r0]
   14870:	mvn	r5, #0
   14874:	cmp	r9, #0
   14878:	beq	148b8 <__assert_fail@plt+0x3944>
   1487c:	bl	10e78 <__errno_location@plt>
   14880:	ldr	r7, [r0]
   14884:	mov	r6, r0
   14888:	mov	r0, r4
   1488c:	bl	10f44 <close@plt>
   14890:	str	r7, [r6]
   14894:	b	148b8 <__assert_fail@plt+0x3944>
   14898:	tst	r5, #4
   1489c:	bne	148b0 <__assert_fail@plt+0x393c>
   148a0:	cmp	r1, #0
   148a4:	blt	148b0 <__assert_fail@plt+0x393c>
   148a8:	mov	r0, r1
   148ac:	bl	10f44 <close@plt>
   148b0:	str	r4, [sl, #32]
   148b4:	mov	r5, #0
   148b8:	mov	r0, r5
   148bc:	sub	sp, fp, #28
   148c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148c4:	bl	10f38 <abort@plt>
   148c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148cc:	add	fp, sp, #28
   148d0:	sub	sp, sp, #76	; 0x4c
   148d4:	ldr	sl, [r0]
   148d8:	mov	r8, r1
   148dc:	mov	r5, r0
   148e0:	str	r0, [sp, #44]	; 0x2c
   148e4:	ldr	r4, [sl, #12]
   148e8:	cmp	r4, #0
   148ec:	beq	14938 <__assert_fail@plt+0x39c4>
   148f0:	mov	r0, r4
   148f4:	bl	10ee4 <dirfd@plt>
   148f8:	cmn	r0, #1
   148fc:	str	r0, [fp, #-32]	; 0xffffffe0
   14900:	ble	14970 <__assert_fail@plt+0x39fc>
   14904:	mov	r1, r5
   14908:	mvn	r2, #0
   1490c:	str	r4, [sp, #16]
   14910:	str	r8, [sp, #8]
   14914:	mov	ip, #0
   14918:	ldr	r0, [r1, #44]!	; 0x2c
   1491c:	cmp	r0, #0
   14920:	str	r1, [sp, #52]	; 0x34
   14924:	add	r7, r1, #4
   14928:	movweq	r2, #34464	; 0x86a0
   1492c:	movteq	r2, #1
   14930:	str	r2, [sp, #32]
   14934:	b	14b54 <__assert_fail@plt+0x3be0>
   14938:	mov	r7, r5
   1493c:	mvn	r0, #99	; 0x63
   14940:	mov	r2, #0
   14944:	ldr	r3, [r7, #48]!	; 0x30
   14948:	and	r1, r3, #516	; 0x204
   1494c:	cmp	r1, #512	; 0x200
   14950:	ldr	r1, [sl, #24]
   14954:	ldreq	r0, [r5, #32]
   14958:	tst	r3, #16
   1495c:	beq	14998 <__assert_fail@plt+0x3a24>
   14960:	tst	r3, #1
   14964:	bne	1498c <__assert_fail@plt+0x3a18>
   14968:	mov	r2, #32768	; 0x8000
   1496c:	b	14998 <__assert_fail@plt+0x3a24>
   14970:	ldr	r0, [sl, #12]
   14974:	bl	10f5c <closedir@plt>
   14978:	mov	r6, #0
   1497c:	str	r6, [sl, #12]
   14980:	cmp	r8, #3
   14984:	beq	149dc <__assert_fail@plt+0x3a68>
   14988:	b	15270 <__assert_fail@plt+0x42fc>
   1498c:	ldr	r3, [sl, #48]	; 0x30
   14990:	cmp	r3, #0
   14994:	movne	r2, #32768	; 0x8000
   14998:	sub	r3, fp, #32
   1499c:	bl	17d2c <__assert_fail@plt+0x6db8>
   149a0:	cmp	r0, #0
   149a4:	str	r0, [sl, #12]
   149a8:	beq	149d0 <__assert_fail@plt+0x3a5c>
   149ac:	ldrh	r0, [sl, #56]	; 0x38
   149b0:	cmp	r0, #11
   149b4:	bne	149f4 <__assert_fail@plt+0x3a80>
   149b8:	mov	r0, r5
   149bc:	mov	r1, sl
   149c0:	mov	r2, #0
   149c4:	bl	13a08 <__assert_fail@plt+0x2a94>
   149c8:	strh	r0, [sl, #56]	; 0x38
   149cc:	b	14a34 <__assert_fail@plt+0x3ac0>
   149d0:	mov	r6, #0
   149d4:	cmp	r8, #3
   149d8:	bne	15270 <__assert_fail@plt+0x42fc>
   149dc:	mov	r0, #4
   149e0:	strh	r0, [sl, #56]	; 0x38
   149e4:	bl	10e78 <__errno_location@plt>
   149e8:	ldr	r0, [r0]
   149ec:	str	r0, [sl, #32]
   149f0:	b	15270 <__assert_fail@plt+0x42fc>
   149f4:	ldrb	r0, [r7, #1]
   149f8:	tst	r0, #1
   149fc:	beq	14a34 <__assert_fail@plt+0x3ac0>
   14a00:	mov	r0, r5
   14a04:	mov	r1, sl
   14a08:	bl	145a0 <__assert_fail@plt+0x362c>
   14a0c:	mov	r0, r5
   14a10:	mov	r1, sl
   14a14:	mov	r2, #0
   14a18:	mov	r6, #0
   14a1c:	bl	13a08 <__assert_fail@plt+0x2a94>
   14a20:	mov	r0, r5
   14a24:	mov	r1, sl
   14a28:	bl	1540c <__assert_fail@plt+0x4498>
   14a2c:	cmp	r0, #0
   14a30:	beq	151dc <__assert_fail@plt+0x4268>
   14a34:	mov	r1, r5
   14a38:	str	r8, [sp, #8]
   14a3c:	str	r4, [sp, #16]
   14a40:	ldr	r0, [r1, #44]!	; 0x2c
   14a44:	str	r1, [sp, #52]	; 0x34
   14a48:	mvn	r1, #0
   14a4c:	cmp	r0, #0
   14a50:	movweq	r1, #34464	; 0x86a0
   14a54:	movteq	r1, #1
   14a58:	cmp	r8, #2
   14a5c:	str	r1, [sp, #32]
   14a60:	bne	14a7c <__assert_fail@plt+0x3b08>
   14a64:	mov	ip, #1
   14a68:	cmp	r8, #3
   14a6c:	bne	14b54 <__assert_fail@plt+0x3be0>
   14a70:	sub	r0, r8, #3
   14a74:	mov	r5, #0
   14a78:	b	14a9c <__assert_fail@plt+0x3b28>
   14a7c:	ldr	r0, [r7]
   14a80:	and	r0, r0, #56	; 0x38
   14a84:	cmp	r0, #24
   14a88:	ldreq	r0, [sl, #84]	; 0x54
   14a8c:	cmpeq	r0, #2
   14a90:	beq	15324 <__assert_fail@plt+0x43b0>
   14a94:	sub	r0, r8, #3
   14a98:	mov	r5, #1
   14a9c:	clz	r0, r0
   14aa0:	lsr	r6, r0, #5
   14aa4:	ldrb	r0, [r7, #1]
   14aa8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14aac:	tst	r0, #2
   14ab0:	beq	14acc <__assert_fail@plt+0x3b58>
   14ab4:	mov	r0, r2
   14ab8:	movw	r1, #1030	; 0x406
   14abc:	mov	r2, #3
   14ac0:	bl	17f98 <__assert_fail@plt+0x7024>
   14ac4:	mov	r2, r0
   14ac8:	str	r0, [fp, #-32]	; 0xffffffe0
   14acc:	cmp	r2, #0
   14ad0:	blt	14aec <__assert_fail@plt+0x3b78>
   14ad4:	ldr	r0, [sp, #44]	; 0x2c
   14ad8:	mov	r1, sl
   14adc:	mov	r3, #0
   14ae0:	bl	14670 <__assert_fail@plt+0x36fc>
   14ae4:	cmp	r0, #0
   14ae8:	beq	14b4c <__assert_fail@plt+0x3bd8>
   14aec:	and	r0, r6, r5
   14af0:	cmp	r0, #1
   14af4:	bne	14b04 <__assert_fail@plt+0x3b90>
   14af8:	bl	10e78 <__errno_location@plt>
   14afc:	ldr	r0, [r0]
   14b00:	str	r0, [sl, #32]
   14b04:	ldrh	r0, [sl, #58]	; 0x3a
   14b08:	orr	r0, r0, #1
   14b0c:	strh	r0, [sl, #58]	; 0x3a
   14b10:	ldr	r0, [sl, #12]
   14b14:	bl	10f5c <closedir@plt>
   14b18:	mov	r4, #0
   14b1c:	ldr	r5, [sp, #44]	; 0x2c
   14b20:	str	r4, [sl, #12]
   14b24:	ldr	r0, [r7]
   14b28:	tst	r0, #512	; 0x200
   14b2c:	beq	14b40 <__assert_fail@plt+0x3bcc>
   14b30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14b34:	cmp	r0, #0
   14b38:	blt	14b40 <__assert_fail@plt+0x3bcc>
   14b3c:	bl	10f44 <close@plt>
   14b40:	mov	ip, #1
   14b44:	str	r4, [sl, #12]
   14b48:	b	14b54 <__assert_fail@plt+0x3be0>
   14b4c:	ldr	r5, [sp, #44]	; 0x2c
   14b50:	mov	ip, #0
   14b54:	ldr	r0, [sl, #40]	; 0x28
   14b58:	ldr	r1, [sl, #28]
   14b5c:	mov	r9, #0
   14b60:	sub	r2, r0, #1
   14b64:	ldrb	r1, [r1, r2]
   14b68:	cmp	r1, #47	; 0x2f
   14b6c:	ldrb	r1, [r7]
   14b70:	moveq	r0, r2
   14b74:	tst	r1, #4
   14b78:	mov	r1, #0
   14b7c:	str	r1, [sp, #40]	; 0x28
   14b80:	beq	14b98 <__assert_fail@plt+0x3c24>
   14b84:	ldr	r1, [r5, #24]
   14b88:	mov	r2, #47	; 0x2f
   14b8c:	strb	r2, [r1, r0]!
   14b90:	add	r1, r1, #1
   14b94:	str	r1, [sp, #40]	; 0x28
   14b98:	ldr	r6, [sl, #12]
   14b9c:	add	r1, r0, #1
   14ba0:	str	r1, [fp, #-48]	; 0xffffffd0
   14ba4:	cmp	r6, #0
   14ba8:	beq	14f20 <__assert_fail@plt+0x3fac>
   14bac:	ldr	r0, [sl, #48]	; 0x30
   14bb0:	str	r7, [fp, #-36]	; 0xffffffdc
   14bb4:	str	ip, [sp, #4]
   14bb8:	mov	r7, #0
   14bbc:	add	r0, r0, #1
   14bc0:	str	r0, [sp, #24]
   14bc4:	ldr	r0, [r5, #36]	; 0x24
   14bc8:	sub	r0, r0, r1
   14bcc:	str	r0, [fp, #-44]	; 0xffffffd4
   14bd0:	bl	10e78 <__errno_location@plt>
   14bd4:	str	r0, [sp, #36]	; 0x24
   14bd8:	mov	r0, #0
   14bdc:	mov	r9, #0
   14be0:	mov	r4, #0
   14be4:	str	sl, [sp, #28]
   14be8:	str	r0, [sp, #48]	; 0x30
   14bec:	mov	r0, #0
   14bf0:	str	r0, [sp, #12]
   14bf4:	mov	r0, #0
   14bf8:	str	r0, [sp, #20]
   14bfc:	ldr	r0, [sp, #36]	; 0x24
   14c00:	str	r7, [r0]
   14c04:	mov	r0, r6
   14c08:	bl	10ec0 <readdir64@plt>
   14c0c:	cmp	r0, #0
   14c10:	beq	15074 <__assert_fail@plt+0x4100>
   14c14:	mov	r8, r0
   14c18:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14c1c:	str	r4, [fp, #-40]	; 0xffffffd8
   14c20:	add	r4, r8, #19
   14c24:	ldrb	r0, [r0]
   14c28:	tst	r0, #32
   14c2c:	ldrbeq	r0, [r4]
   14c30:	cmpeq	r0, #46	; 0x2e
   14c34:	beq	14d30 <__assert_fail@plt+0x3dbc>
   14c38:	mov	r0, r4
   14c3c:	bl	10e48 <strlen@plt>
   14c40:	mov	r5, r0
   14c44:	add	r0, r0, #176	; 0xb0
   14c48:	bic	r0, r0, #7
   14c4c:	bl	17e20 <__assert_fail@plt+0x6eac>
   14c50:	mov	r6, r0
   14c54:	cmp	r0, #0
   14c58:	beq	15200 <__assert_fail@plt+0x428c>
   14c5c:	add	sl, r6, #168	; 0xa8
   14c60:	mov	r1, r4
   14c64:	mov	r2, r5
   14c68:	mov	r0, sl
   14c6c:	bl	10d70 <memcpy@plt>
   14c70:	ldr	r2, [sp, #44]	; 0x2c
   14c74:	mov	r0, #0
   14c78:	mov	r1, #196608	; 0x30000
   14c7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14c80:	strb	r0, [sl, r5]
   14c84:	str	r5, [r6, #52]	; 0x34
   14c88:	str	r2, [r6, #44]	; 0x2c
   14c8c:	add	r7, r5, r3
   14c90:	ldr	r4, [r2, #24]
   14c94:	str	r1, [r6, #58]	; 0x3a
   14c98:	str	r0, [r6, #12]
   14c9c:	str	r0, [r6, #16]
   14ca0:	str	r0, [r6, #20]
   14ca4:	str	r4, [r6, #28]
   14ca8:	str	r0, [r6, #32]
   14cac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14cb0:	cmp	r5, r0
   14cb4:	bcs	14ccc <__assert_fail@plt+0x3d58>
   14cb8:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14cbc:	mov	r5, r2
   14cc0:	cmp	r7, r3
   14cc4:	bcs	14d70 <__assert_fail@plt+0x3dfc>
   14cc8:	b	150d8 <__assert_fail@plt+0x4164>
   14ccc:	ldr	r1, [r2, #36]	; 0x24
   14cd0:	movw	r0, #257	; 0x101
   14cd4:	mov	r5, r2
   14cd8:	add	r0, r7, r0
   14cdc:	adds	r1, r0, r1
   14ce0:	bcs	151bc <__assert_fail@plt+0x4248>
   14ce4:	mov	r0, r4
   14ce8:	str	r1, [r5, #36]	; 0x24
   14cec:	bl	17e50 <__assert_fail@plt+0x6edc>
   14cf0:	cmp	r0, #0
   14cf4:	beq	151ec <__assert_fail@plt+0x4278>
   14cf8:	cmp	r0, r4
   14cfc:	str	r0, [r5, #24]
   14d00:	beq	14d58 <__assert_fail@plt+0x3de4>
   14d04:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14d08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d0c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14d10:	ldrb	r1, [r1]
   14d14:	tst	r1, #4
   14d18:	ldr	r1, [sp, #40]	; 0x28
   14d1c:	addne	r1, r0, r3
   14d20:	mov	r0, #1
   14d24:	str	r1, [sp, #40]	; 0x28
   14d28:	str	r0, [sp, #20]
   14d2c:	b	14d60 <__assert_fail@plt+0x3dec>
   14d30:	ldrb	r0, [r8, #20]
   14d34:	cmp	r0, #0
   14d38:	beq	14d4c <__assert_fail@plt+0x3dd8>
   14d3c:	cmp	r0, #46	; 0x2e
   14d40:	ldrbeq	r0, [r8, #21]
   14d44:	cmpeq	r0, #0
   14d48:	bne	14c38 <__assert_fail@plt+0x3cc4>
   14d4c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14d50:	mov	r7, #0
   14d54:	b	14f04 <__assert_fail@plt+0x3f90>
   14d58:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14d5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d60:	ldr	r0, [r5, #36]	; 0x24
   14d64:	sub	r0, r0, r3
   14d68:	cmp	r7, r3
   14d6c:	bcc	150d8 <__assert_fail@plt+0x4164>
   14d70:	str	r0, [fp, #-44]	; 0xffffffd4
   14d74:	ldr	r0, [sp, #24]
   14d78:	str	r0, [r6, #48]	; 0x30
   14d7c:	ldr	r0, [r5]
   14d80:	str	r7, [r6, #40]	; 0x28
   14d84:	str	r0, [r6, #4]
   14d88:	ldrd	r0, [r8]
   14d8c:	strd	r0, [r6, #160]	; 0xa0
   14d90:	ldrb	r0, [r5, #48]	; 0x30
   14d94:	tst	r0, #4
   14d98:	bne	14da4 <__assert_fail@plt+0x3e30>
   14d9c:	str	sl, [r6, #24]
   14da0:	b	14dc0 <__assert_fail@plt+0x3e4c>
   14da4:	ldr	r0, [r6, #28]
   14da8:	ldr	r1, [r6, #52]	; 0x34
   14dac:	str	r0, [r6, #24]
   14db0:	ldr	r0, [sp, #40]	; 0x28
   14db4:	add	r2, r1, #1
   14db8:	mov	r1, sl
   14dbc:	bl	10d58 <memmove@plt>
   14dc0:	ldr	r0, [sp, #52]	; 0x34
   14dc4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14dc8:	ldr	sl, [sp, #28]
   14dcc:	ldr	r0, [r0]
   14dd0:	ldr	r2, [r1]
   14dd4:	cmp	r0, #0
   14dd8:	beq	14e00 <__assert_fail@plt+0x3e8c>
   14ddc:	ands	r0, r2, #1024	; 0x400
   14de0:	bne	14e00 <__assert_fail@plt+0x3e8c>
   14de4:	mov	r0, r5
   14de8:	mov	r1, r6
   14dec:	mov	r2, #0
   14df0:	bl	13a08 <__assert_fail@plt+0x2a94>
   14df4:	mov	r7, #0
   14df8:	strh	r0, [r6, #56]	; 0x38
   14dfc:	b	14e74 <__assert_fail@plt+0x3f00>
   14e00:	ldrb	r3, [r8, #18]
   14e04:	mov	r0, #0
   14e08:	tst	r2, #8
   14e0c:	mov	r1, #0
   14e10:	beq	14e34 <__assert_fail@plt+0x3ec0>
   14e14:	orr	r1, r3, #4
   14e18:	cmp	r1, #4
   14e1c:	mov	r1, #0
   14e20:	beq	14e34 <__assert_fail@plt+0x3ec0>
   14e24:	eor	r1, r3, #10
   14e28:	and	r2, r2, #16
   14e2c:	orrs	r1, r2, r1
   14e30:	movwne	r1, #1
   14e34:	mov	r2, #11
   14e38:	mov	r7, #0
   14e3c:	strh	r2, [r6, #56]	; 0x38
   14e40:	sub	r2, r3, #1
   14e44:	uxtb	r3, r2
   14e48:	cmp	r3, #11
   14e4c:	sxtbls	r0, r2
   14e50:	movwls	r2, #34208	; 0x85a0
   14e54:	movtls	r2, #1
   14e58:	ldrls	r0, [r2, r0, lsl #2]
   14e5c:	cmp	r1, #0
   14e60:	str	r0, [r6, #80]	; 0x50
   14e64:	mov	r0, #2
   14e68:	movwne	r0, #1
   14e6c:	str	r0, [r6, #112]	; 0x70
   14e70:	str	r7, [r6, #116]	; 0x74
   14e74:	cmp	r9, #0
   14e78:	str	r7, [r6, #8]
   14e7c:	ldrne	r0, [sp, #48]	; 0x30
   14e80:	moveq	r9, r6
   14e84:	strne	r6, [r0, #8]
   14e88:	movw	r0, #10000	; 0x2710
   14e8c:	cmp	r4, r0
   14e90:	bne	14ee4 <__assert_fail@plt+0x3f70>
   14e94:	ldr	r0, [sp, #52]	; 0x34
   14e98:	ldr	r0, [r0]
   14e9c:	cmp	r0, #0
   14ea0:	bne	14ee4 <__assert_fail@plt+0x3f70>
   14ea4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14ea8:	mov	r0, sl
   14eac:	bl	1576c <__assert_fail@plt+0x47f8>
   14eb0:	mov	r1, #0
   14eb4:	str	r1, [sp, #12]
   14eb8:	movw	r1, #19778	; 0x4d42
   14ebc:	movt	r1, #65363	; 0xff53
   14ec0:	cmp	r0, r1
   14ec4:	movwne	r1, #26985	; 0x6969
   14ec8:	cmpne	r0, r1
   14ecc:	beq	14ee4 <__assert_fail@plt+0x3f70>
   14ed0:	movw	r1, #6548	; 0x1994
   14ed4:	movt	r1, #258	; 0x102
   14ed8:	cmp	r0, r1
   14edc:	movne	r0, #1
   14ee0:	strne	r0, [sp, #12]
   14ee4:	ldr	r0, [sp, #32]
   14ee8:	add	r4, r4, #1
   14eec:	cmp	r0, r4
   14ef0:	mov	r0, #0
   14ef4:	movwls	r0, #15
   14ef8:	cmp	r0, #0
   14efc:	bne	1514c <__assert_fail@plt+0x41d8>
   14f00:	str	r6, [sp, #48]	; 0x30
   14f04:	ldr	r6, [sl, #12]
   14f08:	cmp	r6, #0
   14f0c:	bne	14bfc <__assert_fail@plt+0x3c88>
   14f10:	ldr	r0, [sp, #20]
   14f14:	ldr	ip, [sp, #4]
   14f18:	ldr	r6, [sp, #12]
   14f1c:	b	150c0 <__assert_fail@plt+0x414c>
   14f20:	mov	r4, #0
   14f24:	mov	r6, #0
   14f28:	ldrb	r0, [r7]
   14f2c:	tst	r0, #4
   14f30:	beq	14f5c <__assert_fail@plt+0x3fe8>
   14f34:	ldr	r2, [sp, #40]	; 0x28
   14f38:	ldr	r0, [r5, #36]	; 0x24
   14f3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14f40:	cmp	r3, r0
   14f44:	sub	r1, r2, #1
   14f48:	mov	r0, #0
   14f4c:	moveq	r2, r1
   14f50:	cmp	r4, #0
   14f54:	moveq	r2, r1
   14f58:	strb	r0, [r2]
   14f5c:	ldr	r0, [sp, #16]
   14f60:	cmp	r0, #0
   14f64:	movwne	r0, #1
   14f68:	orrs	r0, r0, ip
   14f6c:	beq	14fd0 <__assert_fail@plt+0x405c>
   14f70:	cmp	r4, #0
   14f74:	bne	15010 <__assert_fail@plt+0x409c>
   14f78:	ldr	r0, [sp, #8]
   14f7c:	cmp	r0, #3
   14f80:	bne	14f98 <__assert_fail@plt+0x4024>
   14f84:	ldrh	r0, [sl, #56]	; 0x38
   14f88:	cmp	r0, #4
   14f8c:	cmpne	r0, #7
   14f90:	movne	r0, #6
   14f94:	strhne	r0, [sl, #56]	; 0x38
   14f98:	mov	r6, #0
   14f9c:	cmp	r9, #0
   14fa0:	beq	15270 <__assert_fail@plt+0x42fc>
   14fa4:	ldrd	r4, [r9, #8]
   14fa8:	cmp	r5, #0
   14fac:	beq	14fb8 <__assert_fail@plt+0x4044>
   14fb0:	mov	r0, r5
   14fb4:	bl	10f5c <closedir@plt>
   14fb8:	mov	r0, r9
   14fbc:	bl	13504 <__assert_fail@plt+0x2590>
   14fc0:	cmp	r4, #0
   14fc4:	mov	r9, r4
   14fc8:	bne	14fa4 <__assert_fail@plt+0x4030>
   14fcc:	b	15270 <__assert_fail@plt+0x42fc>
   14fd0:	ldr	r0, [sp, #8]
   14fd4:	cmp	r0, #1
   14fd8:	cmpne	r4, #0
   14fdc:	bne	15010 <__assert_fail@plt+0x409c>
   14fe0:	ldr	r0, [sl, #48]	; 0x30
   14fe4:	cmp	r0, #0
   14fe8:	beq	15160 <__assert_fail@plt+0x41ec>
   14fec:	ldr	r1, [sl, #4]
   14ff0:	movw	r3, #34202	; 0x859a
   14ff4:	mov	r0, r5
   14ff8:	mvn	r2, #0
   14ffc:	movt	r3, #1
   15000:	bl	14670 <__assert_fail@plt+0x36fc>
   15004:	cmp	r0, #0
   15008:	bne	15170 <__assert_fail@plt+0x41fc>
   1500c:	b	14f70 <__assert_fail@plt+0x3ffc>
   15010:	tst	r6, #1
   15014:	beq	15044 <__assert_fail@plt+0x40d0>
   15018:	movw	r0, #22324	; 0x5734
   1501c:	mov	r1, r9
   15020:	mov	r2, r4
   15024:	movt	r0, #1
   15028:	str	r0, [r5, #44]	; 0x2c
   1502c:	mov	r0, r5
   15030:	bl	13ba0 <__assert_fail@plt+0x2c2c>
   15034:	mov	r6, r0
   15038:	mov	r0, #0
   1503c:	str	r0, [r5, #44]	; 0x2c
   15040:	b	15270 <__assert_fail@plt+0x42fc>
   15044:	cmp	r4, #2
   15048:	bcc	150d0 <__assert_fail@plt+0x415c>
   1504c:	ldr	r0, [sp, #52]	; 0x34
   15050:	ldr	r0, [r0]
   15054:	cmp	r0, #0
   15058:	beq	150d0 <__assert_fail@plt+0x415c>
   1505c:	mov	r0, r5
   15060:	mov	r1, r9
   15064:	mov	r2, r4
   15068:	bl	13ba0 <__assert_fail@plt+0x2c2c>
   1506c:	mov	r6, r0
   15070:	b	15270 <__assert_fail@plt+0x42fc>
   15074:	ldr	r0, [sp, #36]	; 0x24
   15078:	ldr	r0, [r0]
   1507c:	cmp	r0, #0
   15080:	beq	1509c <__assert_fail@plt+0x4128>
   15084:	str	r0, [sl, #32]
   15088:	ldr	r0, [sp, #16]
   1508c:	orrs	r0, r0, r4
   15090:	mov	r0, #4
   15094:	movwne	r0, #7
   15098:	strh	r0, [sl, #56]	; 0x38
   1509c:	ldr	r0, [sl, #12]
   150a0:	ldr	r6, [sp, #12]
   150a4:	cmp	r0, #0
   150a8:	beq	15284 <__assert_fail@plt+0x4310>
   150ac:	bl	10f5c <closedir@plt>
   150b0:	mov	r0, #0
   150b4:	ldr	ip, [sp, #4]
   150b8:	str	r0, [sl, #12]
   150bc:	ldr	r0, [sp, #20]
   150c0:	tst	r0, #1
   150c4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   150c8:	beq	14f28 <__assert_fail@plt+0x3fb4>
   150cc:	b	15298 <__assert_fail@plt+0x4324>
   150d0:	mov	r6, r9
   150d4:	b	15270 <__assert_fail@plt+0x42fc>
   150d8:	mov	r0, r6
   150dc:	bl	13504 <__assert_fail@plt+0x2590>
   150e0:	ldr	r7, [sp, #28]
   150e4:	cmp	r9, #0
   150e8:	beq	15114 <__assert_fail@plt+0x41a0>
   150ec:	ldrd	r4, [r9, #8]
   150f0:	cmp	r5, #0
   150f4:	beq	15100 <__assert_fail@plt+0x418c>
   150f8:	mov	r0, r5
   150fc:	bl	10f5c <closedir@plt>
   15100:	mov	r0, r9
   15104:	bl	13504 <__assert_fail@plt+0x2590>
   15108:	cmp	r4, #0
   1510c:	mov	r9, r4
   15110:	bne	150ec <__assert_fail@plt+0x4178>
   15114:	ldr	r0, [r7, #12]
   15118:	bl	10f5c <closedir@plt>
   1511c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15120:	mov	r6, #0
   15124:	mov	r0, #7
   15128:	str	r6, [r7, #12]
   1512c:	strh	r0, [r7, #56]	; 0x38
   15130:	ldr	r0, [r1]
   15134:	orr	r0, r0, #8192	; 0x2000
   15138:	str	r0, [r1]
   1513c:	ldr	r1, [sp, #36]	; 0x24
   15140:	mov	r0, #36	; 0x24
   15144:	str	r0, [r1]
   15148:	b	15270 <__assert_fail@plt+0x42fc>
   1514c:	ldr	ip, [sp, #4]
   15150:	cmp	r0, #15
   15154:	bne	1527c <__assert_fail@plt+0x4308>
   15158:	ldr	r6, [sp, #12]
   1515c:	b	15288 <__assert_fail@plt+0x4314>
   15160:	mov	r0, r5
   15164:	bl	1537c <__assert_fail@plt+0x4408>
   15168:	cmp	r0, #0
   1516c:	beq	14f70 <__assert_fail@plt+0x3ffc>
   15170:	mov	r0, #7
   15174:	mov	r6, #0
   15178:	cmp	r9, #0
   1517c:	strh	r0, [sl, #56]	; 0x38
   15180:	ldr	r0, [r7]
   15184:	orr	r0, r0, #8192	; 0x2000
   15188:	str	r0, [r7]
   1518c:	beq	15270 <__assert_fail@plt+0x42fc>
   15190:	ldrd	r4, [r9, #8]
   15194:	cmp	r5, #0
   15198:	beq	151a4 <__assert_fail@plt+0x4230>
   1519c:	mov	r0, r5
   151a0:	bl	10f5c <closedir@plt>
   151a4:	mov	r0, r9
   151a8:	bl	13504 <__assert_fail@plt+0x2590>
   151ac:	cmp	r4, #0
   151b0:	mov	r9, r4
   151b4:	bne	15190 <__assert_fail@plt+0x421c>
   151b8:	b	15270 <__assert_fail@plt+0x42fc>
   151bc:	mov	r0, r4
   151c0:	bl	13504 <__assert_fail@plt+0x2590>
   151c4:	ldr	r1, [sp, #36]	; 0x24
   151c8:	mov	r0, #0
   151cc:	str	r0, [r5, #24]
   151d0:	mov	r0, #36	; 0x24
   151d4:	str	r0, [r1]
   151d8:	b	151fc <__assert_fail@plt+0x4288>
   151dc:	bl	10e78 <__errno_location@plt>
   151e0:	mov	r1, #12
   151e4:	str	r1, [r0]
   151e8:	b	15270 <__assert_fail@plt+0x42fc>
   151ec:	ldr	r0, [r5, #24]
   151f0:	bl	13504 <__assert_fail@plt+0x2590>
   151f4:	mov	r0, #0
   151f8:	str	r0, [r5, #24]
   151fc:	ldr	sl, [sp, #28]
   15200:	ldr	r0, [sp, #36]	; 0x24
   15204:	ldr	r4, [r0]
   15208:	mov	r0, r6
   1520c:	bl	13504 <__assert_fail@plt+0x2590>
   15210:	cmp	r9, #0
   15214:	beq	15240 <__assert_fail@plt+0x42cc>
   15218:	ldrd	r6, [r9, #8]
   1521c:	cmp	r7, #0
   15220:	beq	1522c <__assert_fail@plt+0x42b8>
   15224:	mov	r0, r7
   15228:	bl	10f5c <closedir@plt>
   1522c:	mov	r0, r9
   15230:	bl	13504 <__assert_fail@plt+0x2590>
   15234:	cmp	r6, #0
   15238:	mov	r9, r6
   1523c:	bne	15218 <__assert_fail@plt+0x42a4>
   15240:	ldr	r0, [sl, #12]
   15244:	bl	10f5c <closedir@plt>
   15248:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1524c:	mov	r6, #0
   15250:	mov	r0, #7
   15254:	str	r6, [sl, #12]
   15258:	strh	r0, [sl, #56]	; 0x38
   1525c:	ldr	r0, [r1]
   15260:	orr	r0, r0, #8192	; 0x2000
   15264:	str	r0, [r1]
   15268:	ldr	r0, [sp, #36]	; 0x24
   1526c:	str	r4, [r0]
   15270:	mov	r0, r6
   15274:	sub	sp, fp, #28
   15278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1527c:	mov	r6, #0
   15280:	b	15270 <__assert_fail@plt+0x42fc>
   15284:	ldr	ip, [sp, #4]
   15288:	ldr	r0, [sp, #20]
   1528c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15290:	tst	r0, #1
   15294:	beq	14f28 <__assert_fail@plt+0x3fb4>
   15298:	ldr	r1, [r5, #4]
   1529c:	ldr	r0, [r5, #24]
   152a0:	cmp	r1, #0
   152a4:	beq	152d4 <__assert_fail@plt+0x4360>
   152a8:	ldr	r2, [r1, #24]
   152ac:	add	r3, r1, #168	; 0xa8
   152b0:	cmp	r2, r3
   152b4:	ldrne	r3, [r1, #28]
   152b8:	subne	r2, r2, r3
   152bc:	addne	r2, r0, r2
   152c0:	strne	r2, [r1, #24]
   152c4:	str	r0, [r1, #28]
   152c8:	ldr	r1, [r1, #8]
   152cc:	cmp	r1, #0
   152d0:	bne	152a8 <__assert_fail@plt+0x4334>
   152d4:	ldr	r1, [r9, #48]	; 0x30
   152d8:	cmp	r1, #0
   152dc:	blt	14f28 <__assert_fail@plt+0x3fb4>
   152e0:	mov	r1, r9
   152e4:	ldr	r2, [r1, #24]
   152e8:	add	r3, r1, #168	; 0xa8
   152ec:	cmp	r2, r3
   152f0:	ldrne	r3, [r1, #28]
   152f4:	subne	r2, r2, r3
   152f8:	addne	r2, r0, r2
   152fc:	strne	r2, [r1, #24]
   15300:	str	r0, [r1, #28]
   15304:	ldr	r2, [r1, #8]
   15308:	cmp	r2, #0
   1530c:	ldreq	r2, [r1, #4]
   15310:	ldr	r1, [r2, #48]	; 0x30
   15314:	cmn	r1, #1
   15318:	mov	r1, r2
   1531c:	bgt	152e4 <__assert_fail@plt+0x4370>
   15320:	b	14f28 <__assert_fail@plt+0x3fb4>
   15324:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15328:	mov	r0, sl
   1532c:	bl	1576c <__assert_fail@plt+0x47f8>
   15330:	movw	r1, #26984	; 0x6968
   15334:	cmp	r0, r1
   15338:	ble	15364 <__assert_fail@plt+0x43f0>
   1533c:	movw	r1, #26985	; 0x6969
   15340:	cmp	r0, r1
   15344:	movwne	r1, #16719	; 0x414f
   15348:	movtne	r1, #21318	; 0x5346
   1534c:	cmpne	r0, r1
   15350:	beq	14a94 <__assert_fail@plt+0x3b20>
   15354:	movw	r1, #40864	; 0x9fa0
   15358:	cmp	r0, r1
   1535c:	beq	14a94 <__assert_fail@plt+0x3b20>
   15360:	b	14a64 <__assert_fail@plt+0x3af0>
   15364:	movw	r1, #19778	; 0x4d42
   15368:	movt	r1, #65363	; 0xff53
   1536c:	cmp	r0, r1
   15370:	cmpne	r0, #0
   15374:	beq	14a94 <__assert_fail@plt+0x3b20>
   15378:	b	14a64 <__assert_fail@plt+0x3af0>
   1537c:	push	{r4, r5, fp, lr}
   15380:	add	fp, sp, #8
   15384:	mov	r5, r0
   15388:	ldr	r0, [r0, #48]	; 0x30
   1538c:	mov	r4, #0
   15390:	tst	r0, #4
   15394:	bne	153d8 <__assert_fail@plt+0x4464>
   15398:	tst	r0, #512	; 0x200
   1539c:	bne	153b8 <__assert_fail@plt+0x4444>
   153a0:	ldr	r0, [r5, #28]
   153a4:	bl	10efc <fchdir@plt>
   153a8:	mov	r4, r0
   153ac:	cmp	r0, #0
   153b0:	movwne	r4, #1
   153b4:	b	153d8 <__assert_fail@plt+0x4464>
   153b8:	ldr	r1, [r5, #32]
   153bc:	add	r0, r5, #60	; 0x3c
   153c0:	bl	17bac <__assert_fail@plt+0x6c38>
   153c4:	cmp	r0, #0
   153c8:	blt	153d0 <__assert_fail@plt+0x445c>
   153cc:	bl	10f44 <close@plt>
   153d0:	mvn	r0, #99	; 0x63
   153d4:	str	r0, [r5, #32]
   153d8:	add	r5, r5, #60	; 0x3c
   153dc:	b	153e4 <__assert_fail@plt+0x4470>
   153e0:	bl	10f44 <close@plt>
   153e4:	mov	r0, r5
   153e8:	bl	17ba4 <__assert_fail@plt+0x6c30>
   153ec:	cmp	r0, #0
   153f0:	movne	r0, r4
   153f4:	popne	{r4, r5, fp, pc}
   153f8:	mov	r0, r5
   153fc:	bl	17bf8 <__assert_fail@plt+0x6c84>
   15400:	cmp	r0, #0
   15404:	bge	153e0 <__assert_fail@plt+0x446c>
   15408:	b	153e4 <__assert_fail@plt+0x4470>
   1540c:	push	{r4, r5, r6, r7, fp, lr}
   15410:	add	fp, sp, #16
   15414:	mov	r6, r0
   15418:	ldrh	r0, [r0, #48]	; 0x30
   1541c:	mov	r4, r1
   15420:	movw	r1, #258	; 0x102
   15424:	tst	r0, r1
   15428:	beq	1549c <__assert_fail@plt+0x4528>
   1542c:	mov	r0, #24
   15430:	bl	17e20 <__assert_fail@plt+0x6eac>
   15434:	mov	r5, #0
   15438:	cmp	r0, #0
   1543c:	beq	154bc <__assert_fail@plt+0x4548>
   15440:	mov	r7, r0
   15444:	ldrd	r0, [r4, #64]	; 0x40
   15448:	add	r2, r7, #8
   1544c:	stm	r7, {r0, r1}
   15450:	ldrd	r0, [r4, #160]	; 0xa0
   15454:	stm	r2, {r0, r1, r4}
   15458:	mov	r1, r7
   1545c:	ldr	r0, [r6, #56]	; 0x38
   15460:	bl	1789c <__assert_fail@plt+0x6928>
   15464:	cmp	r0, r7
   15468:	beq	15490 <__assert_fail@plt+0x451c>
   1546c:	mov	r6, r0
   15470:	mov	r0, r7
   15474:	bl	13504 <__assert_fail@plt+0x2590>
   15478:	cmp	r6, #0
   1547c:	beq	154bc <__assert_fail@plt+0x4548>
   15480:	ldr	r0, [r6, #16]
   15484:	mov	r1, #2
   15488:	strh	r1, [r4, #56]	; 0x38
   1548c:	str	r0, [r4]
   15490:	mov	r5, #1
   15494:	mov	r0, r5
   15498:	pop	{r4, r5, r6, r7, fp, pc}
   1549c:	ldr	r0, [r6, #56]	; 0x38
   154a0:	add	r1, r4, #64	; 0x40
   154a4:	bl	17ec0 <__assert_fail@plt+0x6f4c>
   154a8:	cmp	r0, #0
   154ac:	mov	r5, #1
   154b0:	movne	r0, #2
   154b4:	strhne	r0, [r4, #56]	; 0x38
   154b8:	strne	r4, [r4]
   154bc:	mov	r0, r5
   154c0:	pop	{r4, r5, r6, r7, fp, pc}
   154c4:	cmp	r2, #5
   154c8:	movcc	r0, #0
   154cc:	strhcc	r2, [r1, #60]	; 0x3c
   154d0:	bxcc	lr
   154d4:	push	{fp, lr}
   154d8:	mov	fp, sp
   154dc:	bl	10e78 <__errno_location@plt>
   154e0:	mov	r1, #22
   154e4:	str	r1, [r0]
   154e8:	mov	r0, #1
   154ec:	pop	{fp, pc}
   154f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f4:	add	fp, sp, #28
   154f8:	sub	sp, sp, #4
   154fc:	mov	r9, r0
   15500:	orr	r0, r1, #4096	; 0x1000
   15504:	cmp	r0, #4096	; 0x1000
   15508:	bne	15548 <__assert_fail@plt+0x45d4>
   1550c:	ldr	r8, [r9]
   15510:	mov	r7, r1
   15514:	bl	10e78 <__errno_location@plt>
   15518:	mov	r5, #0
   1551c:	mov	sl, r0
   15520:	str	r5, [r0]
   15524:	ldrb	r0, [r9, #49]	; 0x31
   15528:	tst	r0, #32
   1552c:	bne	15558 <__assert_fail@plt+0x45e4>
   15530:	ldrh	r0, [r8, #56]	; 0x38
   15534:	cmp	r0, #1
   15538:	beq	15564 <__assert_fail@plt+0x45f0>
   1553c:	cmp	r0, #9
   15540:	ldreq	r5, [r8, #8]
   15544:	b	15558 <__assert_fail@plt+0x45e4>
   15548:	bl	10e78 <__errno_location@plt>
   1554c:	mov	r1, #22
   15550:	mov	r5, #0
   15554:	str	r1, [r0]
   15558:	mov	r0, r5
   1555c:	sub	sp, fp, #28
   15560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15564:	ldr	r6, [r9, #4]
   15568:	cmp	r6, #0
   1556c:	beq	1559c <__assert_fail@plt+0x4628>
   15570:	ldr	r4, [r6, #8]
   15574:	ldr	r1, [r6, #12]
   15578:	cmp	r1, #0
   1557c:	beq	15588 <__assert_fail@plt+0x4614>
   15580:	mov	r0, r1
   15584:	bl	10f5c <closedir@plt>
   15588:	mov	r0, r6
   1558c:	bl	13504 <__assert_fail@plt+0x2590>
   15590:	cmp	r4, #0
   15594:	mov	r6, r4
   15598:	bne	15570 <__assert_fail@plt+0x45fc>
   1559c:	cmp	r7, #4096	; 0x1000
   155a0:	mov	r4, #1
   155a4:	ldreq	r0, [r9, #48]	; 0x30
   155a8:	moveq	r4, #2
   155ac:	orreq	r0, r0, #4096	; 0x1000
   155b0:	streq	r0, [r9, #48]	; 0x30
   155b4:	ldr	r0, [r8, #48]	; 0x30
   155b8:	cmp	r0, #0
   155bc:	bne	15608 <__assert_fail@plt+0x4694>
   155c0:	ldr	r0, [r8, #24]
   155c4:	ldrb	r0, [r0]
   155c8:	cmp	r0, #47	; 0x2f
   155cc:	beq	15608 <__assert_fail@plt+0x4694>
   155d0:	ldr	r0, [r9, #48]	; 0x30
   155d4:	tst	r0, #4
   155d8:	bne	15608 <__assert_fail@plt+0x4694>
   155dc:	mov	r1, #32768	; 0x8000
   155e0:	tst	r0, #512	; 0x200
   155e4:	and	r1, r1, r0, lsl #11
   155e8:	orr	r1, r1, #18688	; 0x4900
   155ec:	orr	r2, r1, #524288	; 0x80000
   155f0:	bne	15620 <__assert_fail@plt+0x46ac>
   155f4:	movw	r0, #34203	; 0x859b
   155f8:	mov	r1, r2
   155fc:	movt	r0, #1
   15600:	bl	18178 <__assert_fail@plt+0x7204>
   15604:	b	15630 <__assert_fail@plt+0x46bc>
   15608:	mov	r0, r9
   1560c:	mov	r1, r4
   15610:	bl	148c8 <__assert_fail@plt+0x3954>
   15614:	mov	r5, r0
   15618:	str	r0, [r9, #4]
   1561c:	b	15558 <__assert_fail@plt+0x45e4>
   15620:	ldr	r0, [r9, #32]
   15624:	movw	r1, #34203	; 0x859b
   15628:	movt	r1, #1
   1562c:	bl	17ce8 <__assert_fail@plt+0x6d74>
   15630:	mov	r8, r0
   15634:	cmn	r0, #1
   15638:	ble	1567c <__assert_fail@plt+0x4708>
   1563c:	mov	r0, r9
   15640:	mov	r1, r4
   15644:	bl	148c8 <__assert_fail@plt+0x3954>
   15648:	str	r0, [r9, #4]
   1564c:	ldrb	r0, [r9, #49]	; 0x31
   15650:	tst	r0, #2
   15654:	bne	15688 <__assert_fail@plt+0x4714>
   15658:	mov	r0, r8
   1565c:	bl	10efc <fchdir@plt>
   15660:	cmp	r0, #0
   15664:	beq	156b8 <__assert_fail@plt+0x4744>
   15668:	ldr	r4, [sl]
   1566c:	mov	r0, r8
   15670:	bl	10f44 <close@plt>
   15674:	str	r4, [sl]
   15678:	b	15558 <__assert_fail@plt+0x45e4>
   1567c:	mov	r5, #0
   15680:	str	r5, [r9, #4]
   15684:	b	15558 <__assert_fail@plt+0x45e4>
   15688:	ldr	r1, [r9, #32]
   1568c:	cmp	r1, r8
   15690:	bne	1569c <__assert_fail@plt+0x4728>
   15694:	cmn	r1, #100	; 0x64
   15698:	bne	156c8 <__assert_fail@plt+0x4754>
   1569c:	add	r0, r9, #60	; 0x3c
   156a0:	bl	17bac <__assert_fail@plt+0x6c38>
   156a4:	cmp	r0, #0
   156a8:	blt	156b0 <__assert_fail@plt+0x473c>
   156ac:	bl	10f44 <close@plt>
   156b0:	str	r8, [r9, #32]
   156b4:	b	156c0 <__assert_fail@plt+0x474c>
   156b8:	mov	r0, r8
   156bc:	bl	10f44 <close@plt>
   156c0:	ldr	r5, [r9, #4]
   156c4:	b	15558 <__assert_fail@plt+0x45e4>
   156c8:	bl	10f38 <abort@plt>
   156cc:	push	{fp, lr}
   156d0:	mov	fp, sp
   156d4:	mov	r2, r1
   156d8:	ldrd	r0, [r0, #8]
   156dc:	mov	r3, #0
   156e0:	bl	182a0 <__assert_fail@plt+0x732c>
   156e4:	mov	r0, r2
   156e8:	pop	{fp, pc}
   156ec:	push	{r4, r5, fp, lr}
   156f0:	add	fp, sp, #8
   156f4:	ldrd	r2, [r1, #8]
   156f8:	ldrd	r4, [r0, #8]
   156fc:	eor	r3, r5, r3
   15700:	eor	r2, r4, r2
   15704:	orrs	r2, r2, r3
   15708:	mov	r2, #0
   1570c:	bne	1572c <__assert_fail@plt+0x47b8>
   15710:	ldrd	r2, [r1]
   15714:	ldrd	r0, [r0]
   15718:	eor	r1, r1, r3
   1571c:	eor	r0, r0, r2
   15720:	orr	r0, r0, r1
   15724:	clz	r0, r0
   15728:	lsr	r2, r0, #5
   1572c:	mov	r0, r2
   15730:	pop	{r4, r5, fp, pc}
   15734:	push	{r4, r5, fp, lr}
   15738:	add	fp, sp, #8
   1573c:	ldr	r0, [r0]
   15740:	ldrd	r2, [r0, #160]	; 0xa0
   15744:	ldr	r0, [r1]
   15748:	ldrd	r4, [r0, #160]	; 0xa0
   1574c:	mov	r0, #0
   15750:	subs	r1, r4, r2
   15754:	sbcs	r1, r5, r3
   15758:	movwcc	r0, #1
   1575c:	subs	r1, r2, r4
   15760:	sbcs	r1, r3, r5
   15764:	subcc	r0, r0, #1
   15768:	pop	{r4, r5, fp, pc}
   1576c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15770:	add	fp, sp, #24
   15774:	sub	sp, sp, #96	; 0x60
   15778:	ldr	r7, [r0, #44]	; 0x2c
   1577c:	mov	r4, r0
   15780:	mov	r5, #0
   15784:	ldrb	r0, [r7, #49]	; 0x31
   15788:	tst	r0, #2
   1578c:	beq	15888 <__assert_fail@plt+0x4914>
   15790:	ldr	r6, [r7, #52]	; 0x34
   15794:	mov	r9, r1
   15798:	cmp	r6, #0
   1579c:	bne	157dc <__assert_fail@plt+0x4868>
   157a0:	movw	r0, #13572	; 0x3504
   157a4:	movw	r2, #22676	; 0x5894
   157a8:	movw	r3, #22708	; 0x58b4
   157ac:	mov	r1, #0
   157b0:	mov	r8, #0
   157b4:	movt	r0, #1
   157b8:	movt	r2, #1
   157bc:	movt	r3, #1
   157c0:	str	r0, [sp]
   157c4:	mov	r0, #13
   157c8:	bl	16d58 <__assert_fail@plt+0x5de4>
   157cc:	mov	r6, r0
   157d0:	cmp	r0, #0
   157d4:	str	r0, [r7, #52]	; 0x34
   157d8:	beq	15814 <__assert_fail@plt+0x48a0>
   157dc:	ldrd	r0, [r4, #64]	; 0x40
   157e0:	str	r1, [sp, #12]
   157e4:	str	r0, [sp, #8]
   157e8:	add	r1, sp, #8
   157ec:	mov	r0, r6
   157f0:	bl	16aa8 <__assert_fail@plt+0x5b34>
   157f4:	cmp	r0, #0
   157f8:	beq	15804 <__assert_fail@plt+0x4890>
   157fc:	ldr	r5, [r0, #8]
   15800:	b	15888 <__assert_fail@plt+0x4914>
   15804:	mov	r8, #1
   15808:	cmp	r9, #0
   1580c:	bge	15820 <__assert_fail@plt+0x48ac>
   15810:	b	15888 <__assert_fail@plt+0x4914>
   15814:	mov	r6, #0
   15818:	cmp	r9, #0
   1581c:	blt	15888 <__assert_fail@plt+0x4914>
   15820:	add	r1, sp, #8
   15824:	mov	r0, r9
   15828:	bl	10cf8 <fstatfs64@plt>
   1582c:	cmp	r0, #0
   15830:	bne	15888 <__assert_fail@plt+0x4914>
   15834:	cmp	r8, #0
   15838:	beq	15884 <__assert_fail@plt+0x4910>
   1583c:	mov	r0, #16
   15840:	bl	17e20 <__assert_fail@plt+0x6eac>
   15844:	cmp	r0, #0
   15848:	beq	15884 <__assert_fail@plt+0x4910>
   1584c:	mov	r5, r0
   15850:	ldrd	r0, [r4, #64]	; 0x40
   15854:	ldr	r2, [sp, #8]
   15858:	stm	r5, {r0, r1, r2}
   1585c:	mov	r0, r6
   15860:	mov	r1, r5
   15864:	bl	1789c <__assert_fail@plt+0x6928>
   15868:	cmp	r0, #0
   1586c:	beq	1587c <__assert_fail@plt+0x4908>
   15870:	cmp	r0, r5
   15874:	beq	15884 <__assert_fail@plt+0x4910>
   15878:	bl	10f38 <abort@plt>
   1587c:	mov	r0, r5
   15880:	bl	13504 <__assert_fail@plt+0x2590>
   15884:	ldr	r5, [sp, #8]
   15888:	mov	r0, r5
   1588c:	sub	sp, fp, #24
   15890:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15894:	push	{fp, lr}
   15898:	mov	fp, sp
   1589c:	mov	r2, r1
   158a0:	ldrd	r0, [r0]
   158a4:	mov	r3, #0
   158a8:	bl	182a0 <__assert_fail@plt+0x732c>
   158ac:	mov	r0, r2
   158b0:	pop	{fp, pc}
   158b4:	ldrd	r2, [r1]
   158b8:	ldrd	r0, [r0]
   158bc:	eor	r1, r1, r3
   158c0:	eor	r0, r0, r2
   158c4:	orr	r0, r0, r1
   158c8:	clz	r0, r0
   158cc:	lsr	r0, r0, #5
   158d0:	bx	lr
   158d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158d8:	add	fp, sp, #28
   158dc:	sub	sp, sp, #68	; 0x44
   158e0:	mvn	r6, #0
   158e4:	cmp	r0, #1
   158e8:	blt	16010 <__assert_fail@plt+0x509c>
   158ec:	mov	r7, r2
   158f0:	ldr	r2, [fp, #16]
   158f4:	mov	r5, r3
   158f8:	mov	r3, r0
   158fc:	mov	sl, r1
   15900:	mov	r0, #0
   15904:	ldr	r9, [r2]
   15908:	ldr	r6, [r2, #4]
   1590c:	str	r0, [r2, #12]
   15910:	cmp	r9, #0
   15914:	beq	15938 <__assert_fail@plt+0x49c4>
   15918:	ldr	r0, [r2, #16]
   1591c:	cmp	r0, #0
   15920:	beq	15940 <__assert_fail@plt+0x49cc>
   15924:	ldrb	r0, [r7]
   15928:	cmp	r0, #45	; 0x2d
   1592c:	cmpne	r0, #43	; 0x2b
   15930:	addeq	r7, r7, #1
   15934:	b	159b4 <__assert_fail@plt+0x4a40>
   15938:	mov	r9, #1
   1593c:	str	r9, [r2]
   15940:	mov	r0, #0
   15944:	str	r9, [r2, #28]
   15948:	str	r9, [r2, #32]
   1594c:	str	r0, [r2, #20]
   15950:	ldrb	r1, [r7]
   15954:	cmp	r1, #43	; 0x2b
   15958:	beq	15968 <__assert_fail@plt+0x49f4>
   1595c:	cmp	r1, #45	; 0x2d
   15960:	bne	15974 <__assert_fail@plt+0x4a00>
   15964:	mov	r0, #2
   15968:	str	r0, [r2, #24]
   1596c:	add	r7, r7, #1
   15970:	b	159ac <__assert_fail@plt+0x4a38>
   15974:	ldr	r0, [fp, #20]
   15978:	cmp	r0, #0
   1597c:	bne	159a4 <__assert_fail@plt+0x4a30>
   15980:	movw	r0, #34332	; 0x861c
   15984:	mov	r8, r2
   15988:	mov	r4, r3
   1598c:	movt	r0, #1
   15990:	bl	10e00 <getenv@plt>
   15994:	mov	r3, r4
   15998:	mov	r2, r8
   1599c:	cmp	r0, #0
   159a0:	beq	1601c <__assert_fail@plt+0x50a8>
   159a4:	mov	r0, #0
   159a8:	str	r0, [r2, #24]
   159ac:	mov	r0, #1
   159b0:	str	r0, [r2, #16]
   159b4:	ldrb	r0, [r7]
   159b8:	ldr	r4, [r2, #20]
   159bc:	str	r5, [sp, #48]	; 0x30
   159c0:	subs	r0, r0, #58	; 0x3a
   159c4:	movne	r0, r6
   159c8:	cmp	r4, #0
   159cc:	str	r0, [fp, #-44]	; 0xffffffd4
   159d0:	ldrbne	r0, [r4]
   159d4:	cmpne	r0, #0
   159d8:	bne	15a38 <__assert_fail@plt+0x4ac4>
   159dc:	mov	r4, r2
   159e0:	mov	r6, r2
   159e4:	str	r7, [sp, #32]
   159e8:	ldr	r1, [r4, #32]!
   159ec:	cmp	r1, r9
   159f0:	mov	r8, r1
   159f4:	strgt	r9, [r4]
   159f8:	movgt	r8, r9
   159fc:	ldr	r5, [r6, #28]!
   15a00:	cmp	r5, r9
   15a04:	strgt	r9, [r6]
   15a08:	movgt	r5, r9
   15a0c:	ldr	r7, [r2, #24]
   15a10:	cmp	r7, #1
   15a14:	bne	15d2c <__assert_fail@plt+0x4db8>
   15a18:	cmp	r5, r8
   15a1c:	cmpne	r8, r9
   15a20:	bne	15af0 <__assert_fail@plt+0x4b7c>
   15a24:	cmp	r8, r9
   15a28:	mov	r1, r6
   15a2c:	mov	r0, r9
   15a30:	bne	15ce4 <__assert_fail@plt+0x4d70>
   15a34:	b	15cec <__assert_fail@plt+0x4d78>
   15a38:	str	r3, [fp, #-40]	; 0xffffffd8
   15a3c:	add	r8, r4, #1
   15a40:	mov	r0, r7
   15a44:	mov	r5, r2
   15a48:	str	r8, [r2, #20]
   15a4c:	ldrb	r6, [r4]
   15a50:	mov	r1, r6
   15a54:	bl	10e54 <strchr@plt>
   15a58:	ldrb	r1, [r4, #1]
   15a5c:	mov	r3, r5
   15a60:	cmp	r1, #0
   15a64:	orr	r1, r6, #1
   15a68:	addeq	r9, r9, #1
   15a6c:	streq	r9, [r5]
   15a70:	cmp	r1, #59	; 0x3b
   15a74:	cmpne	r0, #0
   15a78:	bne	15a94 <__assert_fail@plt+0x4b20>
   15a7c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15a80:	cmp	r0, #0
   15a84:	bne	160dc <__assert_fail@plt+0x5168>
   15a88:	str	r6, [r3, #8]
   15a8c:	mov	r6, #63	; 0x3f
   15a90:	b	16010 <__assert_fail@plt+0x509c>
   15a94:	ldrb	r2, [r0]
   15a98:	ldrb	r1, [r0, #1]
   15a9c:	cmp	r2, #87	; 0x57
   15aa0:	bne	15e0c <__assert_fail@plt+0x4e98>
   15aa4:	ldr	r2, [sp, #48]	; 0x30
   15aa8:	cmp	r2, #0
   15aac:	beq	15e0c <__assert_fail@plt+0x4e98>
   15ab0:	cmp	r1, #59	; 0x3b
   15ab4:	bne	15e0c <__assert_fail@plt+0x4e98>
   15ab8:	ldrb	r0, [r8]
   15abc:	cmp	r0, #0
   15ac0:	bne	1610c <__assert_fail@plt+0x5198>
   15ac4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15ac8:	cmp	r9, r0
   15acc:	bne	16108 <__assert_fail@plt+0x5194>
   15ad0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15ad4:	cmp	r0, #0
   15ad8:	bne	16194 <__assert_fail@plt+0x5220>
   15adc:	str	r6, [r3, #8]
   15ae0:	ldrb	r6, [r7]
   15ae4:	cmp	r6, #58	; 0x3a
   15ae8:	movwne	r6, #63	; 0x3f
   15aec:	b	16010 <__assert_fail@plt+0x509c>
   15af0:	cmp	r9, r8
   15af4:	str	r7, [sp, #20]
   15af8:	str	r6, [sp, #24]
   15afc:	str	r5, [sp, #36]	; 0x24
   15b00:	str	r4, [sp, #28]
   15b04:	str	r3, [fp, #-40]	; 0xffffffd8
   15b08:	ble	15cbc <__assert_fail@plt+0x4d48>
   15b0c:	ldr	r0, [sp, #36]	; 0x24
   15b10:	cmp	r0, r8
   15b14:	bge	15cbc <__assert_fail@plt+0x4d48>
   15b18:	add	r0, sl, r8, lsl #2
   15b1c:	mvn	r1, r1
   15b20:	ldr	r2, [sp, #36]	; 0x24
   15b24:	mov	r3, r9
   15b28:	str	r0, [fp, #-32]	; 0xffffffe0
   15b2c:	mvn	r0, r9
   15b30:	cmp	r0, r1
   15b34:	movgt	r1, r0
   15b38:	add	r0, r1, #1
   15b3c:	str	r1, [fp, #-36]	; 0xffffffdc
   15b40:	str	r0, [sp, #44]	; 0x2c
   15b44:	add	r0, sl, #4
   15b48:	str	r0, [sp, #40]	; 0x28
   15b4c:	sub	ip, r8, r2
   15b50:	sub	r7, r3, r8
   15b54:	cmp	r7, ip
   15b58:	ble	15c08 <__assert_fail@plt+0x4c94>
   15b5c:	sub	r4, r3, ip
   15b60:	cmp	ip, #1
   15b64:	blt	15c00 <__assert_fail@plt+0x4c8c>
   15b68:	mov	r7, #0
   15b6c:	cmp	ip, #4
   15b70:	bcc	15bc8 <__assert_fail@plt+0x4c54>
   15b74:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15b78:	ldr	r1, [sp, #40]	; 0x28
   15b7c:	add	lr, sl, r2, lsl #2
   15b80:	add	r0, r0, r3
   15b84:	add	r0, r0, r2
   15b88:	add	r0, r1, r0, lsl #2
   15b8c:	add	r1, sl, r3, lsl #2
   15b90:	cmp	lr, r1
   15b94:	ldrcc	r1, [fp, #-32]	; 0xffffffe0
   15b98:	cmpcc	r0, r1
   15b9c:	bcc	15bc8 <__assert_fail@plt+0x4c54>
   15ba0:	bic	r7, ip, #3
   15ba4:	mov	r1, r7
   15ba8:	vld1.32	{d16-d17}, [r0]
   15bac:	vld1.32	{d18-d19}, [lr]
   15bb0:	subs	r1, r1, #4
   15bb4:	vst1.32	{d16-d17}, [lr]!
   15bb8:	vst1.32	{d18-d19}, [r0]!
   15bbc:	bne	15ba8 <__assert_fail@plt+0x4c34>
   15bc0:	cmp	ip, r7
   15bc4:	beq	15c00 <__assert_fail@plt+0x4c8c>
   15bc8:	add	r0, sl, r3, lsl #2
   15bcc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15bd0:	add	r1, r7, r2
   15bd4:	add	r1, sl, r1, lsl #2
   15bd8:	add	r3, r3, r7
   15bdc:	add	r3, r3, r2
   15be0:	add	r7, r0, r3, lsl #2
   15be4:	ldr	r5, [r1]
   15be8:	add	r3, r3, #1
   15bec:	ldr	r6, [r7, #4]
   15bf0:	cmn	r3, #1
   15bf4:	str	r6, [r1], #4
   15bf8:	str	r5, [r7, #4]
   15bfc:	bne	15be0 <__assert_fail@plt+0x4c6c>
   15c00:	mov	r3, r4
   15c04:	b	15cb0 <__assert_fail@plt+0x4d3c>
   15c08:	cmp	r7, #1
   15c0c:	blt	15cac <__assert_fail@plt+0x4d38>
   15c10:	mov	r4, #0
   15c14:	cmp	r7, #3
   15c18:	bls	15c78 <__assert_fail@plt+0x4d04>
   15c1c:	add	r1, sl, r3, lsl #2
   15c20:	add	r0, sl, r2, lsl #2
   15c24:	cmp	r0, r1
   15c28:	bcs	15c4c <__assert_fail@plt+0x4cd8>
   15c2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15c30:	ldr	r6, [sp, #40]	; 0x28
   15c34:	add	r1, r1, r3
   15c38:	add	r1, r1, r2
   15c3c:	add	r1, r6, r1, lsl #2
   15c40:	ldr	r6, [fp, #-32]	; 0xffffffe0
   15c44:	cmp	r6, r1
   15c48:	bcc	15c78 <__assert_fail@plt+0x4d04>
   15c4c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   15c50:	bic	r4, r7, #3
   15c54:	mov	r1, r4
   15c58:	vld1.32	{d16-d17}, [r6]
   15c5c:	vld1.32	{d18-d19}, [r0]
   15c60:	subs	r1, r1, #4
   15c64:	vst1.32	{d16-d17}, [r0]!
   15c68:	vst1.32	{d18-d19}, [r6]!
   15c6c:	bne	15c58 <__assert_fail@plt+0x4ce4>
   15c70:	cmp	r7, r4
   15c74:	beq	15cac <__assert_fail@plt+0x4d38>
   15c78:	ldr	r1, [sp, #44]	; 0x2c
   15c7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15c80:	add	r6, r4, r2
   15c84:	add	r1, r1, r3
   15c88:	add	r0, r0, r4, lsl #2
   15c8c:	sub	r1, r1, r4
   15c90:	add	r4, sl, r6, lsl #2
   15c94:	ldr	r6, [r4]
   15c98:	ldr	r5, [r0]
   15c9c:	subs	r1, r1, #1
   15ca0:	str	r5, [r4], #4
   15ca4:	str	r6, [r0], #4
   15ca8:	bne	15c94 <__assert_fail@plt+0x4d20>
   15cac:	add	r2, r7, r2
   15cb0:	cmp	r3, r8
   15cb4:	cmpgt	r8, r2
   15cb8:	bgt	15b4c <__assert_fail@plt+0x4bd8>
   15cbc:	ldr	r0, [sp, #36]	; 0x24
   15cc0:	ldr	r4, [sp, #28]
   15cc4:	ldr	r6, [sp, #24]
   15cc8:	ldr	r2, [fp, #16]
   15ccc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15cd0:	ldr	r7, [sp, #20]
   15cd4:	add	r0, r0, r9
   15cd8:	mov	r1, r4
   15cdc:	sub	r0, r0, r8
   15ce0:	str	r0, [r6]
   15ce4:	mov	r5, r0
   15ce8:	str	r9, [r1]
   15cec:	mov	r8, r9
   15cf0:	cmp	r9, r3
   15cf4:	bge	15d24 <__assert_fail@plt+0x4db0>
   15cf8:	ldr	r0, [sl, r8, lsl #2]
   15cfc:	ldrb	r1, [r0]
   15d00:	cmp	r1, #45	; 0x2d
   15d04:	bne	15d14 <__assert_fail@plt+0x4da0>
   15d08:	ldrb	r0, [r0, #1]
   15d0c:	cmp	r0, #0
   15d10:	bne	15d24 <__assert_fail@plt+0x4db0>
   15d14:	add	r8, r8, #1
   15d18:	cmp	r8, r3
   15d1c:	str	r8, [r2]
   15d20:	blt	15cf8 <__assert_fail@plt+0x4d84>
   15d24:	mov	r9, r8
   15d28:	str	r8, [r4]
   15d2c:	cmp	r9, r3
   15d30:	beq	16004 <__assert_fail@plt+0x5090>
   15d34:	ldr	r0, [sl, r9, lsl #2]
   15d38:	movw	r1, #34256	; 0x85d0
   15d3c:	str	r3, [fp, #-40]	; 0xffffffd8
   15d40:	movt	r1, #1
   15d44:	bl	10d1c <strcmp@plt>
   15d48:	cmp	r0, #0
   15d4c:	beq	15ddc <__assert_fail@plt+0x4e68>
   15d50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15d54:	ldr	r2, [fp, #16]
   15d58:	cmp	r9, r3
   15d5c:	beq	16004 <__assert_fail@plt+0x5090>
   15d60:	ldr	r0, [sl, r9, lsl #2]
   15d64:	mvn	r6, #0
   15d68:	ldrb	r1, [r0]
   15d6c:	cmp	r1, #45	; 0x2d
   15d70:	bne	15e34 <__assert_fail@plt+0x4ec0>
   15d74:	mov	r4, r0
   15d78:	ldrb	r1, [r4, #1]!
   15d7c:	cmp	r1, #0
   15d80:	beq	15e34 <__assert_fail@plt+0x4ec0>
   15d84:	ldr	r6, [sp, #48]	; 0x30
   15d88:	cmp	r6, #0
   15d8c:	beq	1603c <__assert_fail@plt+0x50c8>
   15d90:	ldr	r5, [fp, #12]
   15d94:	ldr	r7, [sp, #32]
   15d98:	cmp	r1, #45	; 0x2d
   15d9c:	bne	16044 <__assert_fail@plt+0x50d0>
   15da0:	add	r0, r0, #2
   15da4:	mov	r1, sl
   15da8:	str	r0, [r2, #20]
   15dac:	ldr	r0, [fp, #8]
   15db0:	stm	sp, {r0, r5}
   15db4:	str	r2, [sp, #8]
   15db8:	mov	r2, r7
   15dbc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15dc0:	str	r0, [sp, #12]
   15dc4:	movw	r0, #34256	; 0x85d0
   15dc8:	movt	r0, #1
   15dcc:	str	r0, [sp, #16]
   15dd0:	mov	r0, r3
   15dd4:	mov	r3, r6
   15dd8:	b	1614c <__assert_fail@plt+0x51d8>
   15ddc:	ldr	r2, [fp, #16]
   15de0:	add	r3, r9, #1
   15de4:	cmp	r5, r8
   15de8:	cmpne	r8, r3
   15dec:	str	r3, [r2]
   15df0:	bne	15e4c <__assert_fail@plt+0x4ed8>
   15df4:	cmp	r5, r8
   15df8:	ldr	r8, [fp, #-40]	; 0xffffffd8
   15dfc:	mov	r1, r6
   15e00:	mov	r0, r3
   15e04:	beq	15ff4 <__assert_fail@plt+0x5080>
   15e08:	b	15ffc <__assert_fail@plt+0x5088>
   15e0c:	cmp	r1, #58	; 0x3a
   15e10:	bne	16010 <__assert_fail@plt+0x509c>
   15e14:	ldrb	r0, [r0, #2]
   15e18:	ldrb	r1, [r8]
   15e1c:	cmp	r0, #58	; 0x3a
   15e20:	bne	16024 <__assert_fail@plt+0x50b0>
   15e24:	cmp	r1, #0
   15e28:	bne	1602c <__assert_fail@plt+0x50b8>
   15e2c:	mov	r0, #0
   15e30:	b	16164 <__assert_fail@plt+0x51f0>
   15e34:	cmp	r7, #0
   15e38:	strne	r0, [r2, #12]
   15e3c:	addne	r0, r9, #1
   15e40:	movne	r6, #1
   15e44:	strne	r0, [r2]
   15e48:	b	16010 <__assert_fail@plt+0x509c>
   15e4c:	cmp	r9, r8
   15e50:	str	r3, [fp, #-36]	; 0xffffffdc
   15e54:	str	r6, [sp, #24]
   15e58:	str	r5, [sp, #36]	; 0x24
   15e5c:	str	r4, [sp, #28]
   15e60:	blt	15fd0 <__assert_fail@plt+0x505c>
   15e64:	ldr	r0, [sp, #36]	; 0x24
   15e68:	cmp	r0, r8
   15e6c:	bge	15fd0 <__assert_fail@plt+0x505c>
   15e70:	sub	r0, sl, r8, lsl #2
   15e74:	ldr	r7, [sp, #36]	; 0x24
   15e78:	add	r9, sl, r8, lsl #2
   15e7c:	str	r0, [fp, #-44]	; 0xffffffd4
   15e80:	rsb	r0, r8, #0
   15e84:	str	r0, [fp, #-32]	; 0xffffffe0
   15e88:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15e8c:	sub	r4, r8, r7
   15e90:	sub	r3, r0, r8
   15e94:	cmp	r3, r4
   15e98:	ble	15f2c <__assert_fail@plt+0x4fb8>
   15e9c:	sub	r3, r0, r4
   15ea0:	cmp	r4, #1
   15ea4:	blt	15f24 <__assert_fail@plt+0x4fb0>
   15ea8:	mov	r1, #0
   15eac:	cmp	r4, #4
   15eb0:	bcc	15ef4 <__assert_fail@plt+0x4f80>
   15eb4:	add	r2, sl, r0, lsl #2
   15eb8:	add	lr, sl, r7, lsl #2
   15ebc:	add	ip, sl, r3, lsl #2
   15ec0:	cmp	lr, r2
   15ec4:	cmpcc	ip, r9
   15ec8:	bcc	15ef4 <__assert_fail@plt+0x4f80>
   15ecc:	bic	r1, r4, #3
   15ed0:	mov	r2, r1
   15ed4:	vld1.32	{d16-d17}, [ip]
   15ed8:	vld1.32	{d18-d19}, [lr]
   15edc:	subs	r2, r2, #4
   15ee0:	vst1.32	{d16-d17}, [lr]!
   15ee4:	vst1.32	{d18-d19}, [ip]!
   15ee8:	bne	15ed4 <__assert_fail@plt+0x4f60>
   15eec:	cmp	r4, r1
   15ef0:	beq	15f24 <__assert_fail@plt+0x4fb0>
   15ef4:	add	r0, r7, r0
   15ef8:	sub	r2, r8, r1
   15efc:	add	r1, r1, r7
   15f00:	add	r1, sl, r1, lsl #2
   15f04:	add	r0, sl, r0, lsl #2
   15f08:	ldr	r6, [r0, -r2, lsl #2]
   15f0c:	ldr	r5, [r1]
   15f10:	str	r6, [r1], #4
   15f14:	str	r5, [r0, -r2, lsl #2]
   15f18:	sub	r2, r2, #1
   15f1c:	cmp	r7, r2
   15f20:	bne	15f08 <__assert_fail@plt+0x4f94>
   15f24:	mov	r0, r3
   15f28:	b	15fc4 <__assert_fail@plt+0x5050>
   15f2c:	cmp	r3, #1
   15f30:	blt	15fc0 <__assert_fail@plt+0x504c>
   15f34:	mov	r4, #0
   15f38:	cmp	r3, #3
   15f3c:	bls	15f8c <__assert_fail@plt+0x5018>
   15f40:	add	r2, sl, r0, lsl #2
   15f44:	add	r1, sl, r7, lsl #2
   15f48:	cmp	r1, r2
   15f4c:	ldrcc	r6, [fp, #-44]	; 0xffffffd4
   15f50:	addcc	r2, r7, r0
   15f54:	addcc	r2, r6, r2, lsl #2
   15f58:	cmpcc	r9, r2
   15f5c:	bcc	15f8c <__assert_fail@plt+0x5018>
   15f60:	bic	r4, r3, #3
   15f64:	mov	r6, r9
   15f68:	mov	r2, r4
   15f6c:	vld1.32	{d16-d17}, [r6]
   15f70:	vld1.32	{d18-d19}, [r1]
   15f74:	subs	r2, r2, #4
   15f78:	vst1.32	{d16-d17}, [r1]!
   15f7c:	vst1.32	{d18-d19}, [r6]!
   15f80:	bne	15f6c <__assert_fail@plt+0x4ff8>
   15f84:	cmp	r3, r4
   15f88:	beq	15fc0 <__assert_fail@plt+0x504c>
   15f8c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15f90:	add	r2, r4, r7
   15f94:	add	r6, r8, r4
   15f98:	add	r2, sl, r2, lsl #2
   15f9c:	add	r1, r1, r0
   15fa0:	sub	r1, r1, r4
   15fa4:	add	r4, sl, r6, lsl #2
   15fa8:	ldr	r6, [r2]
   15fac:	ldr	r5, [r4]
   15fb0:	subs	r1, r1, #1
   15fb4:	str	r5, [r2], #4
   15fb8:	str	r6, [r4], #4
   15fbc:	bne	15fa8 <__assert_fail@plt+0x5034>
   15fc0:	add	r7, r3, r7
   15fc4:	cmp	r0, r8
   15fc8:	cmpgt	r8, r7
   15fcc:	bgt	15e8c <__assert_fail@plt+0x4f18>
   15fd0:	ldr	r0, [sp, #36]	; 0x24
   15fd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15fd8:	ldr	r1, [sp, #24]
   15fdc:	ldr	r2, [fp, #16]
   15fe0:	add	r0, r0, r3
   15fe4:	sub	r0, r0, r8
   15fe8:	ldr	r8, [fp, #-40]	; 0xffffffd8
   15fec:	str	r0, [r1]
   15ff0:	ldr	r1, [sp, #28]
   15ff4:	mov	r5, r0
   15ff8:	str	r3, [r1]
   15ffc:	str	r8, [r2]
   16000:	str	r8, [r2, #32]
   16004:	cmp	r5, r8
   16008:	mvn	r6, #0
   1600c:	strne	r5, [r2]
   16010:	mov	r0, r6
   16014:	sub	sp, fp, #28
   16018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1601c:	mov	r0, #1
   16020:	b	159a8 <__assert_fail@plt+0x4a34>
   16024:	cmp	r1, #0
   16028:	beq	160b0 <__assert_fail@plt+0x513c>
   1602c:	add	r0, r9, #1
   16030:	str	r8, [r3, #12]
   16034:	str	r0, [r3]
   16038:	b	16168 <__assert_fail@plt+0x51f4>
   1603c:	ldr	r7, [sp, #32]
   16040:	b	1618c <__assert_fail@plt+0x5218>
   16044:	cmp	r5, #0
   16048:	beq	1618c <__assert_fail@plt+0x5218>
   1604c:	ldrb	r0, [r0, #2]
   16050:	cmp	r0, #0
   16054:	beq	16174 <__assert_fail@plt+0x5200>
   16058:	ldr	r1, [fp, #8]
   1605c:	str	r4, [r2, #20]
   16060:	movw	r0, #34257	; 0x85d1
   16064:	movt	r0, #1
   16068:	stm	sp, {r1, r5}
   1606c:	str	r2, [sp, #8]
   16070:	str	r0, [sp, #16]
   16074:	mov	r0, r3
   16078:	mov	r2, r7
   1607c:	mov	r3, r6
   16080:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16084:	str	r1, [sp, #12]
   16088:	mov	r1, sl
   1608c:	bl	161ec <__assert_fail@plt+0x5278>
   16090:	ldr	r2, [fp, #16]
   16094:	mov	r6, r0
   16098:	cmn	r0, #1
   1609c:	bne	16010 <__assert_fail@plt+0x509c>
   160a0:	ldr	r9, [r2]
   160a4:	ldr	r0, [sl, r9, lsl #2]
   160a8:	add	r4, r0, #1
   160ac:	b	1618c <__assert_fail@plt+0x5218>
   160b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   160b4:	cmp	r9, r0
   160b8:	bne	16158 <__assert_fail@plt+0x51e4>
   160bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   160c0:	cmp	r0, #0
   160c4:	bne	161c0 <__assert_fail@plt+0x524c>
   160c8:	str	r6, [r3, #8]
   160cc:	ldrb	r6, [r7]
   160d0:	cmp	r6, #58	; 0x3a
   160d4:	movwne	r6, #63	; 0x3f
   160d8:	b	16168 <__assert_fail@plt+0x51f4>
   160dc:	movw	r0, #37136	; 0x9110
   160e0:	ldr	r2, [sl]
   160e4:	movw	r1, #34259	; 0x85d3
   160e8:	mov	r4, r3
   160ec:	mov	r3, r6
   160f0:	movt	r0, #2
   160f4:	movt	r1, #1
   160f8:	ldr	r0, [r0]
   160fc:	bl	10e6c <fprintf@plt>
   16100:	mov	r3, r4
   16104:	b	15a88 <__assert_fail@plt+0x4b14>
   16108:	ldr	r8, [sl, r9, lsl #2]
   1610c:	ldr	r2, [fp, #8]
   16110:	mov	r0, #0
   16114:	str	r8, [r3, #12]
   16118:	movw	r1, #34328	; 0x8618
   1611c:	str	r0, [r3, #12]
   16120:	str	r8, [r3, #20]
   16124:	movt	r1, #1
   16128:	str	r2, [sp]
   1612c:	stmib	sp, {r0, r3}
   16130:	str	r1, [sp, #16]
   16134:	mov	r1, sl
   16138:	mov	r2, r7
   1613c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16140:	ldr	r3, [sp, #48]	; 0x30
   16144:	str	r0, [sp, #12]
   16148:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1614c:	bl	161ec <__assert_fail@plt+0x5278>
   16150:	sub	sp, fp, #28
   16154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16158:	add	r0, r9, #1
   1615c:	str	r0, [r3]
   16160:	ldr	r0, [sl, r9, lsl #2]
   16164:	str	r0, [r3, #12]
   16168:	mov	r0, #0
   1616c:	str	r0, [r3, #20]
   16170:	b	16010 <__assert_fail@plt+0x509c>
   16174:	mov	r0, r7
   16178:	bl	10e54 <strchr@plt>
   1617c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16180:	ldr	r2, [fp, #16]
   16184:	cmp	r0, #0
   16188:	beq	16058 <__assert_fail@plt+0x50e4>
   1618c:	str	r4, [r2, #20]
   16190:	b	15a3c <__assert_fail@plt+0x4ac8>
   16194:	movw	r0, #37136	; 0x9110
   16198:	ldr	r2, [sl]
   1619c:	movw	r1, #34287	; 0x85ef
   161a0:	mov	r4, r3
   161a4:	mov	r3, r6
   161a8:	movt	r0, #2
   161ac:	movt	r1, #1
   161b0:	ldr	r0, [r0]
   161b4:	bl	10e6c <fprintf@plt>
   161b8:	mov	r3, r4
   161bc:	b	15adc <__assert_fail@plt+0x4b68>
   161c0:	movw	r0, #37136	; 0x9110
   161c4:	ldr	r2, [sl]
   161c8:	movw	r1, #34287	; 0x85ef
   161cc:	mov	r4, r3
   161d0:	mov	r3, r6
   161d4:	movt	r0, #2
   161d8:	movt	r1, #1
   161dc:	ldr	r0, [r0]
   161e0:	bl	10e6c <fprintf@plt>
   161e4:	mov	r3, r4
   161e8:	b	160c8 <__assert_fail@plt+0x5154>
   161ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161f0:	add	fp, sp, #28
   161f4:	sub	sp, sp, #44	; 0x2c
   161f8:	str	r0, [sp, #12]
   161fc:	ldr	r0, [fp, #16]
   16200:	ldr	r5, [fp, #8]
   16204:	str	r2, [sp, #16]
   16208:	str	r1, [sp, #20]
   1620c:	ldr	r9, [r0, #20]
   16210:	mov	r6, r9
   16214:	b	1621c <__assert_fail@plt+0x52a8>
   16218:	add	r6, r6, #1
   1621c:	ldrb	r0, [r6]
   16220:	cmp	r0, #0
   16224:	cmpne	r0, #61	; 0x3d
   16228:	bne	16218 <__assert_fail@plt+0x52a4>
   1622c:	ldr	sl, [r3]
   16230:	mvn	ip, #0
   16234:	str	r3, [fp, #-32]	; 0xffffffe0
   16238:	cmp	sl, #0
   1623c:	beq	16440 <__assert_fail@plt+0x54cc>
   16240:	sub	r4, r6, r9
   16244:	mov	r8, #0
   16248:	mov	r5, sl
   1624c:	mov	r7, r3
   16250:	mov	r0, r5
   16254:	mov	r1, r9
   16258:	mov	r2, r4
   1625c:	bl	10f2c <strncmp@plt>
   16260:	cmp	r0, #0
   16264:	bne	16278 <__assert_fail@plt+0x5304>
   16268:	mov	r0, r5
   1626c:	bl	10e48 <strlen@plt>
   16270:	cmp	r4, r0
   16274:	beq	1646c <__assert_fail@plt+0x54f8>
   16278:	ldr	r5, [r7, #16]!
   1627c:	add	r8, r8, #1
   16280:	cmp	r5, #0
   16284:	bne	16250 <__assert_fail@plt+0x52dc>
   16288:	cmp	sl, #0
   1628c:	beq	16478 <__assert_fail@plt+0x5504>
   16290:	mvn	r0, #0
   16294:	str	r4, [sp, #36]	; 0x24
   16298:	mov	r4, #0
   1629c:	mov	r5, #0
   162a0:	mov	r7, #0
   162a4:	str	r0, [sp, #24]
   162a8:	mov	r0, #0
   162ac:	str	r0, [sp, #32]
   162b0:	mov	r0, #0
   162b4:	str	r0, [sp, #8]
   162b8:	mov	r0, #0
   162bc:	str	r0, [sp, #28]
   162c0:	b	162d8 <__assert_fail@plt+0x5364>
   162c4:	ldr	r0, [fp, #16]
   162c8:	add	r1, r1, #16
   162cc:	add	r5, r5, #1
   162d0:	mov	r4, r1
   162d4:	ldr	r9, [r0, #20]
   162d8:	ldr	r2, [sp, #36]	; 0x24
   162dc:	mov	r0, sl
   162e0:	mov	r1, r9
   162e4:	bl	10f2c <strncmp@plt>
   162e8:	cmp	r0, #0
   162ec:	beq	1630c <__assert_fail@plt+0x5398>
   162f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162f4:	mov	r1, r4
   162f8:	add	r0, r3, r5, lsl #4
   162fc:	ldr	sl, [r0, #16]
   16300:	cmp	sl, #0
   16304:	bne	162c4 <__assert_fail@plt+0x5350>
   16308:	b	16458 <__assert_fail@plt+0x54e4>
   1630c:	cmp	r7, #0
   16310:	beq	163c4 <__assert_fail@plt+0x5450>
   16314:	ldr	r0, [fp, #12]
   16318:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1631c:	cmp	r0, #0
   16320:	bne	16348 <__assert_fail@plt+0x53d4>
   16324:	add	r0, r3, r5, lsl #4
   16328:	ldr	r2, [r7, #4]
   1632c:	ldr	r1, [r0, #4]
   16330:	cmp	r2, r1
   16334:	bne	16348 <__assert_fail@plt+0x53d4>
   16338:	ldr	r1, [r0, #8]
   1633c:	ldr	r2, [r7, #8]
   16340:	cmp	r2, r1
   16344:	beq	163fc <__assert_fail@plt+0x5488>
   16348:	ldr	r0, [sp, #32]
   1634c:	mov	r1, r4
   16350:	cmp	r0, #0
   16354:	bne	162f8 <__assert_fail@plt+0x5384>
   16358:	ldr	r0, [fp, #20]
   1635c:	cmp	r0, #0
   16360:	beq	163d8 <__assert_fail@plt+0x5464>
   16364:	ldr	r9, [sp, #28]
   16368:	mov	r0, #0
   1636c:	str	r0, [sp, #32]
   16370:	cmp	r9, #0
   16374:	bne	163ec <__assert_fail@plt+0x5478>
   16378:	mov	r0, r8
   1637c:	bl	17e20 <__assert_fail@plt+0x6eac>
   16380:	cmp	r0, #0
   16384:	beq	1642c <__assert_fail@plt+0x54b8>
   16388:	mov	r9, r0
   1638c:	mov	r0, #0
   16390:	mov	r1, #0
   16394:	mov	r2, r8
   16398:	str	r0, [sp, #32]
   1639c:	mov	r0, r9
   163a0:	bl	10e90 <memset@plt>
   163a4:	ldr	r0, [sp, #24]
   163a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   163ac:	mov	r1, #1
   163b0:	mov	r2, #1
   163b4:	str	r1, [sp, #8]
   163b8:	mov	r1, r4
   163bc:	strb	r2, [r9, r0]
   163c0:	b	163ec <__assert_fail@plt+0x5478>
   163c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   163c8:	mov	r1, r4
   163cc:	str	r5, [sp, #24]
   163d0:	add	r7, r3, r4
   163d4:	b	162f8 <__assert_fail@plt+0x5384>
   163d8:	ldr	r9, [sp, #28]
   163dc:	mov	r0, #1
   163e0:	str	r0, [sp, #32]
   163e4:	cmp	r9, #0
   163e8:	beq	16420 <__assert_fail@plt+0x54ac>
   163ec:	mov	r0, #1
   163f0:	str	r9, [sp, #28]
   163f4:	strb	r0, [r9, r5]
   163f8:	b	162f8 <__assert_fail@plt+0x5384>
   163fc:	ldr	r1, [sp, #32]
   16400:	cmp	r1, #0
   16404:	bne	162f4 <__assert_fail@plt+0x5380>
   16408:	ldr	r0, [r0, #12]
   1640c:	ldr	r1, [r7, #12]
   16410:	cmp	r1, r0
   16414:	mov	r1, r4
   16418:	bne	16358 <__assert_fail@plt+0x53e4>
   1641c:	b	162f8 <__assert_fail@plt+0x5384>
   16420:	mov	r0, #0
   16424:	str	r0, [sp, #28]
   16428:	b	162f8 <__assert_fail@plt+0x5384>
   1642c:	mov	r0, #1
   16430:	str	r0, [sp, #32]
   16434:	mov	r0, #0
   16438:	str	r0, [sp, #28]
   1643c:	b	162f0 <__assert_fail@plt+0x537c>
   16440:	mov	r0, #0
   16444:	mov	r8, #0
   16448:	mov	r7, #0
   1644c:	mov	sl, #0
   16450:	mov	r4, #0
   16454:	b	16490 <__assert_fail@plt+0x551c>
   16458:	ldr	r5, [fp, #8]
   1645c:	ldr	ip, [sp, #24]
   16460:	ldr	sl, [sp, #28]
   16464:	ldr	r4, [sp, #8]
   16468:	b	16494 <__assert_fail@plt+0x5520>
   1646c:	ldr	r5, [fp, #8]
   16470:	mov	ip, r8
   16474:	b	164fc <__assert_fail@plt+0x5588>
   16478:	ldr	r5, [fp, #8]
   1647c:	mov	r0, #0
   16480:	mov	r7, #0
   16484:	mov	sl, #0
   16488:	mov	r4, #0
   1648c:	mvn	ip, #0
   16490:	str	r0, [sp, #32]
   16494:	cmp	sl, #0
   16498:	ldreq	r0, [sp, #32]
   1649c:	cmpeq	r0, #0
   164a0:	beq	164f4 <__assert_fail@plt+0x5580>
   164a4:	ldr	r0, [fp, #20]
   164a8:	cmp	r0, #0
   164ac:	bne	16664 <__assert_fail@plt+0x56f0>
   164b0:	cmp	r4, #0
   164b4:	beq	164c0 <__assert_fail@plt+0x554c>
   164b8:	mov	r0, sl
   164bc:	bl	13504 <__assert_fail@plt+0x2590>
   164c0:	ldr	r0, [fp, #16]
   164c4:	ldr	r4, [r0, #20]
   164c8:	mov	r5, r0
   164cc:	mov	r0, r4
   164d0:	bl	10e48 <strlen@plt>
   164d4:	mov	r1, #0
   164d8:	add	r0, r4, r0
   164dc:	str	r1, [r5, #8]
   164e0:	str	r0, [r5, #20]
   164e4:	ldr	r0, [r5]
   164e8:	add	r0, r0, #1
   164ec:	str	r0, [r5]
   164f0:	b	16628 <__assert_fail@plt+0x56b4>
   164f4:	cmp	r7, #0
   164f8:	beq	16598 <__assert_fail@plt+0x5624>
   164fc:	ldr	r1, [fp, #16]
   16500:	mov	r0, #0
   16504:	str	r0, [r1, #20]
   16508:	mov	r2, r1
   1650c:	ldr	r1, [r1]
   16510:	add	r0, r1, #1
   16514:	str	r0, [r2]
   16518:	ldrb	r3, [r6]
   1651c:	ldr	r2, [r7, #4]
   16520:	cmp	r3, #0
   16524:	beq	16540 <__assert_fail@plt+0x55cc>
   16528:	cmp	r2, #0
   1652c:	beq	16610 <__assert_fail@plt+0x569c>
   16530:	ldr	r1, [fp, #16]
   16534:	add	r0, r6, #1
   16538:	str	r0, [r1, #12]
   1653c:	b	1656c <__assert_fail@plt+0x55f8>
   16540:	cmp	r2, #1
   16544:	bne	1656c <__assert_fail@plt+0x55f8>
   16548:	ldr	r2, [sp, #12]
   1654c:	cmp	r0, r2
   16550:	bge	16634 <__assert_fail@plt+0x56c0>
   16554:	ldr	r2, [fp, #16]
   16558:	add	r1, r1, #2
   1655c:	str	r1, [r2]
   16560:	ldr	r1, [sp, #20]
   16564:	ldr	r0, [r1, r0, lsl #2]
   16568:	str	r0, [r2, #12]
   1656c:	cmp	r5, #0
   16570:	strne	ip, [r5]
   16574:	ldr	r1, [r7, #8]
   16578:	ldr	r0, [r7, #12]
   1657c:	cmp	r1, #0
   16580:	strne	r0, [r1]
   16584:	movne	r0, #0
   16588:	subne	sp, fp, #28
   1658c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16590:	sub	sp, fp, #28
   16594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16598:	ldr	r0, [fp, #12]
   1659c:	cmp	r0, #0
   165a0:	beq	165e4 <__assert_fail@plt+0x5670>
   165a4:	ldr	r0, [fp, #16]
   165a8:	ldr	r1, [sp, #20]
   165ac:	ldr	r0, [r0]
   165b0:	ldr	r0, [r1, r0, lsl #2]
   165b4:	ldrb	r0, [r0, #1]
   165b8:	cmp	r0, #45	; 0x2d
   165bc:	beq	165e4 <__assert_fail@plt+0x5670>
   165c0:	ldr	r0, [fp, #16]
   165c4:	ldr	r0, [r0, #20]
   165c8:	ldrb	r1, [r0]
   165cc:	ldr	r0, [sp, #16]
   165d0:	bl	10e54 <strchr@plt>
   165d4:	mov	r1, r0
   165d8:	mvn	r0, #0
   165dc:	cmp	r1, #0
   165e0:	bne	1665c <__assert_fail@plt+0x56e8>
   165e4:	ldr	r0, [fp, #20]
   165e8:	cmp	r0, #0
   165ec:	bne	16750 <__assert_fail@plt+0x57dc>
   165f0:	ldr	r1, [fp, #16]
   165f4:	mov	r0, #0
   165f8:	str	r0, [r1, #20]
   165fc:	str	r0, [r1, #8]
   16600:	ldr	r0, [r1]
   16604:	add	r0, r0, #1
   16608:	str	r0, [r1]
   1660c:	b	16628 <__assert_fail@plt+0x56b4>
   16610:	ldr	r0, [fp, #20]
   16614:	cmp	r0, #0
   16618:	bne	16784 <__assert_fail@plt+0x5810>
   1661c:	ldr	r0, [r7, #12]
   16620:	ldr	r1, [fp, #16]
   16624:	str	r0, [r1, #8]
   16628:	mov	r0, #63	; 0x3f
   1662c:	sub	sp, fp, #28
   16630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16634:	ldr	r0, [fp, #20]
   16638:	cmp	r0, #0
   1663c:	bne	167b4 <__assert_fail@plt+0x5840>
   16640:	ldr	r0, [r7, #12]
   16644:	ldr	r1, [fp, #16]
   16648:	str	r0, [r1, #8]
   1664c:	ldr	r0, [sp, #16]
   16650:	ldrb	r0, [r0]
   16654:	cmp	r0, #58	; 0x3a
   16658:	movwne	r0, #63	; 0x3f
   1665c:	sub	sp, fp, #28
   16660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16664:	movw	r5, #37136	; 0x9110
   16668:	ldr	r1, [sp, #32]
   1666c:	movt	r5, #2
   16670:	ldr	r0, [r5]
   16674:	cmp	r1, #0
   16678:	beq	166ac <__assert_fail@plt+0x5738>
   1667c:	ldr	r1, [sp, #20]
   16680:	ldr	r3, [fp, #24]
   16684:	ldr	r2, [r1]
   16688:	ldr	r1, [fp, #16]
   1668c:	ldr	r1, [r1, #20]
   16690:	str	r1, [sp]
   16694:	movw	r1, #34348	; 0x862c
   16698:	movt	r1, #1
   1669c:	bl	10e6c <fprintf@plt>
   166a0:	cmp	r4, #0
   166a4:	bne	164b8 <__assert_fail@plt+0x5544>
   166a8:	b	164c0 <__assert_fail@plt+0x554c>
   166ac:	bl	10ef0 <flockfile@plt>
   166b0:	ldr	r1, [fp, #16]
   166b4:	ldr	r0, [sp, #20]
   166b8:	ldr	r9, [fp, #24]
   166bc:	ldr	r1, [r1, #20]
   166c0:	ldr	r2, [r0]
   166c4:	ldr	r0, [r5]
   166c8:	mov	r3, r9
   166cc:	str	r1, [sp]
   166d0:	movw	r1, #34380	; 0x864c
   166d4:	movt	r1, #1
   166d8:	bl	10e6c <fprintf@plt>
   166dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   166e0:	cmp	r8, #0
   166e4:	beq	16730 <__assert_fail@plt+0x57bc>
   166e8:	mov	r6, sl
   166ec:	b	16714 <__assert_fail@plt+0x57a0>
   166f0:	ldr	r3, [r1]
   166f4:	ldr	r0, [r5]
   166f8:	mov	r7, r1
   166fc:	movw	r1, #34427	; 0x867b
   16700:	mov	r2, r9
   16704:	movt	r1, #1
   16708:	bl	10e6c <fprintf@plt>
   1670c:	mov	r1, r7
   16710:	b	16720 <__assert_fail@plt+0x57ac>
   16714:	ldrb	r0, [r6]
   16718:	cmp	r0, #0
   1671c:	bne	166f0 <__assert_fail@plt+0x577c>
   16720:	add	r1, r1, #16
   16724:	add	r6, r6, #1
   16728:	subs	r8, r8, #1
   1672c:	bne	16714 <__assert_fail@plt+0x57a0>
   16730:	ldr	r1, [r5]
   16734:	mov	r0, #10
   16738:	bl	10eb4 <fputc@plt>
   1673c:	ldr	r0, [r5]
   16740:	bl	10da0 <funlockfile@plt>
   16744:	cmp	r4, #0
   16748:	bne	164b8 <__assert_fail@plt+0x5544>
   1674c:	b	164c0 <__assert_fail@plt+0x554c>
   16750:	ldr	r1, [fp, #16]
   16754:	ldr	r0, [sp, #20]
   16758:	ldr	r3, [fp, #24]
   1675c:	ldr	r2, [r0]
   16760:	movw	r0, #37136	; 0x9110
   16764:	ldr	r1, [r1, #20]
   16768:	movt	r0, #2
   1676c:	ldr	r0, [r0]
   16770:	str	r1, [sp]
   16774:	movw	r1, #34435	; 0x8683
   16778:	movt	r1, #1
   1677c:	bl	10e6c <fprintf@plt>
   16780:	b	165f0 <__assert_fail@plt+0x567c>
   16784:	ldr	r0, [sp, #20]
   16788:	ldr	r1, [r7]
   1678c:	ldr	r3, [fp, #24]
   16790:	ldr	r2, [r0]
   16794:	movw	r0, #37136	; 0x9110
   16798:	str	r1, [sp]
   1679c:	movw	r1, #34467	; 0x86a3
   167a0:	movt	r0, #2
   167a4:	movt	r1, #1
   167a8:	ldr	r0, [r0]
   167ac:	bl	10e6c <fprintf@plt>
   167b0:	b	1661c <__assert_fail@plt+0x56a8>
   167b4:	ldr	r0, [sp, #20]
   167b8:	ldr	r1, [r7]
   167bc:	ldr	r3, [fp, #24]
   167c0:	ldr	r2, [r0]
   167c4:	movw	r0, #37136	; 0x9110
   167c8:	str	r1, [sp]
   167cc:	movw	r1, #34512	; 0x86d0
   167d0:	movt	r0, #2
   167d4:	movt	r1, #1
   167d8:	ldr	r0, [r0]
   167dc:	bl	10e6c <fprintf@plt>
   167e0:	b	16640 <__assert_fail@plt+0x56cc>
   167e4:	push	{r4, r5, r6, r7, fp, lr}
   167e8:	add	fp, sp, #16
   167ec:	sub	sp, sp, #16
   167f0:	movw	r7, #37124	; 0x9104
   167f4:	movw	r5, #37128	; 0x9108
   167f8:	movw	r6, #37168	; 0x9130
   167fc:	movt	r5, #2
   16800:	movt	r7, #2
   16804:	movt	r6, #2
   16808:	ldr	r4, [r7]
   1680c:	ldr	r5, [r5]
   16810:	stm	r6, {r4, r5}
   16814:	ldr	r5, [fp, #16]
   16818:	str	r6, [sp, #8]
   1681c:	str	r5, [sp, #12]
   16820:	ldr	r5, [fp, #12]
   16824:	str	r5, [sp, #4]
   16828:	ldr	r5, [fp, #8]
   1682c:	str	r5, [sp]
   16830:	bl	158d4 <__assert_fail@plt+0x4960>
   16834:	ldr	r1, [r6]
   16838:	ldr	r3, [r6, #12]
   1683c:	ldr	r2, [r6, #8]
   16840:	str	r1, [r7]
   16844:	movw	r1, #37308	; 0x91bc
   16848:	movt	r1, #2
   1684c:	str	r3, [r1]
   16850:	movw	r1, #37132	; 0x910c
   16854:	movt	r1, #2
   16858:	str	r2, [r1]
   1685c:	sub	sp, fp, #16
   16860:	pop	{r4, r5, r6, r7, fp, pc}
   16864:	push	{r4, r5, r6, sl, fp, lr}
   16868:	add	fp, sp, #16
   1686c:	sub	sp, sp, #16
   16870:	movw	r6, #37124	; 0x9104
   16874:	movw	r4, #37128	; 0x9108
   16878:	movw	r5, #37168	; 0x9130
   1687c:	movt	r4, #2
   16880:	movt	r6, #2
   16884:	movt	r5, #2
   16888:	ldr	r3, [r6]
   1688c:	ldr	r4, [r4]
   16890:	stm	r5, {r3, r4}
   16894:	mov	r4, #0
   16898:	mov	r3, #1
   1689c:	str	r4, [sp]
   168a0:	stmib	sp, {r4, r5}
   168a4:	str	r3, [sp, #12]
   168a8:	mov	r3, #0
   168ac:	bl	158d4 <__assert_fail@plt+0x4960>
   168b0:	ldr	r1, [r5]
   168b4:	ldr	r3, [r5, #12]
   168b8:	ldr	r2, [r5, #8]
   168bc:	str	r1, [r6]
   168c0:	movw	r1, #37308	; 0x91bc
   168c4:	movt	r1, #2
   168c8:	str	r3, [r1]
   168cc:	movw	r1, #37132	; 0x910c
   168d0:	movt	r1, #2
   168d4:	str	r2, [r1]
   168d8:	sub	sp, fp, #16
   168dc:	pop	{r4, r5, r6, sl, fp, pc}
   168e0:	ldr	r0, [r0, #8]
   168e4:	bx	lr
   168e8:	ldr	r0, [r0, #12]
   168ec:	bx	lr
   168f0:	ldr	r0, [r0, #16]
   168f4:	bx	lr
   168f8:	ldm	r0, {r2, ip}
   168fc:	mov	r0, #0
   16900:	cmp	r2, ip
   16904:	bxcs	lr
   16908:	mov	r0, #0
   1690c:	ldr	r1, [r2]
   16910:	cmp	r1, #0
   16914:	beq	16938 <__assert_fail@plt+0x59c4>
   16918:	mov	r3, #0
   1691c:	mov	r1, r2
   16920:	ldr	r1, [r1, #4]
   16924:	add	r3, r3, #1
   16928:	cmp	r1, #0
   1692c:	bne	16920 <__assert_fail@plt+0x59ac>
   16930:	cmp	r3, r0
   16934:	movhi	r0, r3
   16938:	add	r2, r2, #8
   1693c:	cmp	r2, ip
   16940:	bcc	1690c <__assert_fail@plt+0x5998>
   16944:	bx	lr
   16948:	push	{fp, lr}
   1694c:	mov	fp, sp
   16950:	ldm	r0, {r3, ip}
   16954:	mov	lr, #0
   16958:	mov	r1, #0
   1695c:	cmp	r3, ip
   16960:	bcs	1699c <__assert_fail@plt+0x5a28>
   16964:	mov	r1, #0
   16968:	mov	lr, #0
   1696c:	ldr	r2, [r3]
   16970:	cmp	r2, #0
   16974:	beq	16990 <__assert_fail@plt+0x5a1c>
   16978:	mov	r2, r3
   1697c:	ldr	r2, [r2, #4]
   16980:	add	r1, r1, #1
   16984:	cmp	r2, #0
   16988:	bne	1697c <__assert_fail@plt+0x5a08>
   1698c:	add	lr, lr, #1
   16990:	add	r3, r3, #8
   16994:	cmp	r3, ip
   16998:	bcc	1696c <__assert_fail@plt+0x59f8>
   1699c:	ldr	r2, [r0, #12]
   169a0:	cmp	lr, r2
   169a4:	bne	169bc <__assert_fail@plt+0x5a48>
   169a8:	ldr	r2, [r0, #16]
   169ac:	mov	r0, #1
   169b0:	cmp	r1, r2
   169b4:	movne	r0, #0
   169b8:	pop	{fp, pc}
   169bc:	mov	r0, #0
   169c0:	pop	{fp, pc}
   169c4:	nop	{0}
   169c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   169cc:	add	fp, sp, #24
   169d0:	sub	sp, sp, #8
   169d4:	ldr	r6, [r0]
   169d8:	ldmib	r0, {r3, r7, r8}
   169dc:	ldr	r2, [r0, #16]
   169e0:	mov	r4, r1
   169e4:	mov	r5, #0
   169e8:	cmp	r6, r3
   169ec:	bcs	16a2c <__assert_fail@plt+0x5ab8>
   169f0:	mov	r5, #0
   169f4:	ldr	r0, [r6]
   169f8:	cmp	r0, #0
   169fc:	beq	16a20 <__assert_fail@plt+0x5aac>
   16a00:	mov	r0, #0
   16a04:	mov	r1, r6
   16a08:	ldr	r1, [r1, #4]
   16a0c:	add	r0, r0, #1
   16a10:	cmp	r1, #0
   16a14:	bne	16a08 <__assert_fail@plt+0x5a94>
   16a18:	cmp	r0, r5
   16a1c:	movhi	r5, r0
   16a20:	add	r6, r6, #8
   16a24:	cmp	r6, r3
   16a28:	bcc	169f4 <__assert_fail@plt+0x5a80>
   16a2c:	movw	r1, #34552	; 0x86f8
   16a30:	mov	r0, r4
   16a34:	movt	r1, #1
   16a38:	bl	10e6c <fprintf@plt>
   16a3c:	movw	r1, #34576	; 0x8710
   16a40:	mov	r0, r4
   16a44:	mov	r2, r7
   16a48:	movt	r1, #1
   16a4c:	bl	10e6c <fprintf@plt>
   16a50:	vldr	d16, [pc, #72]	; 16aa0 <__assert_fail@plt+0x5b2c>
   16a54:	vmov	s0, r8
   16a58:	movw	r1, #34600	; 0x8728
   16a5c:	mov	r0, r4
   16a60:	mov	r2, r8
   16a64:	vcvt.f64.u32	d17, s0
   16a68:	vmov	s0, r7
   16a6c:	movt	r1, #1
   16a70:	vcvt.f64.u32	d18, s0
   16a74:	vmul.f64	d16, d17, d16
   16a78:	vdiv.f64	d16, d16, d18
   16a7c:	vstr	d16, [sp]
   16a80:	bl	10e6c <fprintf@plt>
   16a84:	movw	r1, #34633	; 0x8749
   16a88:	mov	r0, r4
   16a8c:	mov	r2, r5
   16a90:	movt	r1, #1
   16a94:	sub	sp, fp, #24
   16a98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16a9c:	b	10e6c <fprintf@plt>
   16aa0:	andeq	r0, r0, r0
   16aa4:	subsmi	r0, r9, r0
   16aa8:	push	{r4, r5, r6, r7, fp, lr}
   16aac:	add	fp, sp, #16
   16ab0:	mov	r4, r1
   16ab4:	ldr	r1, [r0, #8]
   16ab8:	ldr	r2, [r0, #24]
   16abc:	mov	r5, r0
   16ac0:	mov	r0, r4
   16ac4:	blx	r2
   16ac8:	ldr	r1, [r5, #8]
   16acc:	cmp	r0, r1
   16ad0:	bcs	16b3c <__assert_fail@plt+0x5bc8>
   16ad4:	ldr	r7, [r5]
   16ad8:	mov	r6, #0
   16adc:	ldr	r1, [r7, r0, lsl #3]!
   16ae0:	cmp	r1, #0
   16ae4:	cmpne	r7, #0
   16ae8:	bne	16af8 <__assert_fail@plt+0x5b84>
   16aec:	mov	r0, r6
   16af0:	pop	{r4, r5, r6, r7, fp, pc}
   16af4:	ldr	r1, [r7]
   16af8:	cmp	r1, r4
   16afc:	beq	16b24 <__assert_fail@plt+0x5bb0>
   16b00:	ldr	r2, [r5, #28]
   16b04:	mov	r0, r4
   16b08:	blx	r2
   16b0c:	cmp	r0, #0
   16b10:	bne	16b30 <__assert_fail@plt+0x5bbc>
   16b14:	ldr	r7, [r7, #4]
   16b18:	cmp	r7, #0
   16b1c:	bne	16af4 <__assert_fail@plt+0x5b80>
   16b20:	b	16aec <__assert_fail@plt+0x5b78>
   16b24:	mov	r6, r4
   16b28:	mov	r0, r6
   16b2c:	pop	{r4, r5, r6, r7, fp, pc}
   16b30:	ldr	r6, [r7]
   16b34:	mov	r0, r6
   16b38:	pop	{r4, r5, r6, r7, fp, pc}
   16b3c:	bl	10f38 <abort@plt>
   16b40:	ldr	r1, [r0, #16]
   16b44:	cmp	r1, #0
   16b48:	moveq	r0, #0
   16b4c:	bxeq	lr
   16b50:	ldm	r0, {r1, r2}
   16b54:	cmp	r1, r2
   16b58:	bcs	16b70 <__assert_fail@plt+0x5bfc>
   16b5c:	ldr	r0, [r1], #8
   16b60:	cmp	r0, #0
   16b64:	bxne	lr
   16b68:	cmp	r1, r2
   16b6c:	bcc	16b5c <__assert_fail@plt+0x5be8>
   16b70:	push	{fp, lr}
   16b74:	mov	fp, sp
   16b78:	bl	10f38 <abort@plt>
   16b7c:	push	{r4, r5, fp, lr}
   16b80:	add	fp, sp, #8
   16b84:	mov	r5, r1
   16b88:	ldr	r1, [r0, #8]
   16b8c:	ldr	r2, [r0, #24]
   16b90:	mov	r4, r0
   16b94:	mov	r0, r5
   16b98:	blx	r2
   16b9c:	ldr	r1, [r4, #8]
   16ba0:	cmp	r0, r1
   16ba4:	bcs	16c00 <__assert_fail@plt+0x5c8c>
   16ba8:	ldr	r1, [r4]
   16bac:	add	r2, r1, r0, lsl #3
   16bb0:	ldr	r3, [r2]
   16bb4:	ldr	r2, [r2, #4]
   16bb8:	cmp	r3, r5
   16bbc:	beq	16bcc <__assert_fail@plt+0x5c58>
   16bc0:	cmp	r2, #0
   16bc4:	bne	16bb0 <__assert_fail@plt+0x5c3c>
   16bc8:	b	16bd8 <__assert_fail@plt+0x5c64>
   16bcc:	cmp	r2, #0
   16bd0:	ldrne	r0, [r2]
   16bd4:	popne	{r4, r5, fp, pc}
   16bd8:	ldr	r2, [r4, #4]
   16bdc:	add	r0, r1, r0, lsl #3
   16be0:	add	r1, r0, #8
   16be4:	cmp	r1, r2
   16be8:	movcs	r0, #0
   16bec:	popcs	{r4, r5, fp, pc}
   16bf0:	ldr	r0, [r1], #8
   16bf4:	cmp	r0, #0
   16bf8:	popne	{r4, r5, fp, pc}
   16bfc:	b	16be4 <__assert_fail@plt+0x5c70>
   16c00:	bl	10f38 <abort@plt>
   16c04:	push	{r4, r5, fp, lr}
   16c08:	add	fp, sp, #8
   16c0c:	ldm	r0, {r5, lr}
   16c10:	mov	ip, r0
   16c14:	mov	r0, #0
   16c18:	cmp	r5, lr
   16c1c:	bcs	16c68 <__assert_fail@plt+0x5cf4>
   16c20:	mov	r0, #0
   16c24:	ldr	r3, [r5]
   16c28:	cmp	r3, #0
   16c2c:	cmpne	r5, #0
   16c30:	beq	16c5c <__assert_fail@plt+0x5ce8>
   16c34:	mov	r3, r5
   16c38:	cmp	r0, r2
   16c3c:	popcs	{r4, r5, fp, pc}
   16c40:	ldr	r4, [r3]
   16c44:	str	r4, [r1, r0, lsl #2]
   16c48:	add	r0, r0, #1
   16c4c:	ldr	r3, [r3, #4]
   16c50:	cmp	r3, #0
   16c54:	bne	16c38 <__assert_fail@plt+0x5cc4>
   16c58:	ldr	lr, [ip, #4]
   16c5c:	add	r5, r5, #8
   16c60:	cmp	r5, lr
   16c64:	bcc	16c24 <__assert_fail@plt+0x5cb0>
   16c68:	pop	{r4, r5, fp, pc}
   16c6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16c70:	add	fp, sp, #24
   16c74:	mov	r5, r1
   16c78:	ldr	r4, [r0]
   16c7c:	ldr	r1, [r0, #4]
   16c80:	mov	r6, #0
   16c84:	cmp	r4, r1
   16c88:	bcs	16cfc <__assert_fail@plt+0x5d88>
   16c8c:	mov	r9, r2
   16c90:	mov	r8, r0
   16c94:	mov	r6, #0
   16c98:	b	16ce0 <__assert_fail@plt+0x5d6c>
   16c9c:	mov	r1, r9
   16ca0:	blx	r5
   16ca4:	cmp	r0, #0
   16ca8:	beq	16cfc <__assert_fail@plt+0x5d88>
   16cac:	mov	r7, r4
   16cb0:	ldr	r7, [r7, #4]
   16cb4:	add	r6, r6, #1
   16cb8:	cmp	r7, #0
   16cbc:	beq	16cd8 <__assert_fail@plt+0x5d64>
   16cc0:	ldr	r0, [r7]
   16cc4:	mov	r1, r9
   16cc8:	blx	r5
   16ccc:	cmp	r0, #0
   16cd0:	bne	16cb0 <__assert_fail@plt+0x5d3c>
   16cd4:	b	16cfc <__assert_fail@plt+0x5d88>
   16cd8:	ldr	r1, [r8, #4]
   16cdc:	b	16cf0 <__assert_fail@plt+0x5d7c>
   16ce0:	ldr	r0, [r4]
   16ce4:	cmp	r0, #0
   16ce8:	cmpne	r4, #0
   16cec:	bne	16c9c <__assert_fail@plt+0x5d28>
   16cf0:	add	r4, r4, #8
   16cf4:	cmp	r4, r1
   16cf8:	bcc	16ce0 <__assert_fail@plt+0x5d6c>
   16cfc:	mov	r0, r6
   16d00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16d04:	ldrb	r2, [r0]
   16d08:	cmp	r2, #0
   16d0c:	moveq	r0, #0
   16d10:	bxeq	lr
   16d14:	add	r3, r0, #1
   16d18:	mov	r0, #0
   16d1c:	rsb	r0, r0, r0, lsl #5
   16d20:	uxtab	r0, r0, r2
   16d24:	udiv	r2, r0, r1
   16d28:	mls	r0, r2, r1, r0
   16d2c:	ldrb	r2, [r3], #1
   16d30:	cmp	r2, #0
   16d34:	bne	16d1c <__assert_fail@plt+0x5da8>
   16d38:	bx	lr
   16d3c:	movw	r1, #34664	; 0x8768
   16d40:	movt	r1, #1
   16d44:	vld1.32	{d16-d17}, [r1]!
   16d48:	ldr	r1, [r1]
   16d4c:	vst1.32	{d16-d17}, [r0]!
   16d50:	str	r1, [r0]
   16d54:	bx	lr
   16d58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16d5c:	add	fp, sp, #24
   16d60:	movw	r9, #28544	; 0x6f80
   16d64:	movw	r5, #28524	; 0x6f6c
   16d68:	cmp	r3, #0
   16d6c:	mov	r6, r0
   16d70:	mov	r0, #40	; 0x28
   16d74:	mov	r7, r1
   16d78:	movt	r9, #1
   16d7c:	movt	r5, #1
   16d80:	movne	r9, r3
   16d84:	cmp	r2, #0
   16d88:	movne	r5, r2
   16d8c:	bl	17e20 <__assert_fail@plt+0x6eac>
   16d90:	mov	r8, #0
   16d94:	cmp	r0, #0
   16d98:	beq	16f54 <__assert_fail@plt+0x5fe0>
   16d9c:	mov	r4, r0
   16da0:	movw	r0, #34664	; 0x8768
   16da4:	cmp	r7, #0
   16da8:	movt	r0, #1
   16dac:	moveq	r7, r0
   16db0:	cmp	r7, r0
   16db4:	str	r7, [r4, #20]
   16db8:	beq	16e34 <__assert_fail@plt+0x5ec0>
   16dbc:	vldr	s2, [pc, #408]	; 16f5c <__assert_fail@plt+0x5fe8>
   16dc0:	vldr	s0, [r7, #8]
   16dc4:	vcmpe.f32	s0, s2
   16dc8:	vmrs	APSR_nzcv, fpscr
   16dcc:	ble	16ee0 <__assert_fail@plt+0x5f6c>
   16dd0:	vldr	s4, [pc, #392]	; 16f60 <__assert_fail@plt+0x5fec>
   16dd4:	vcmpe.f32	s0, s4
   16dd8:	vmrs	APSR_nzcv, fpscr
   16ddc:	bpl	16ee0 <__assert_fail@plt+0x5f6c>
   16de0:	vldr	s4, [pc, #380]	; 16f64 <__assert_fail@plt+0x5ff0>
   16de4:	vldr	s6, [r7, #12]
   16de8:	vcmpe.f32	s6, s4
   16dec:	vmrs	APSR_nzcv, fpscr
   16df0:	ble	16ee0 <__assert_fail@plt+0x5f6c>
   16df4:	vldr	s4, [r7]
   16df8:	vcmpe.f32	s4, #0.0
   16dfc:	vmrs	APSR_nzcv, fpscr
   16e00:	blt	16ee0 <__assert_fail@plt+0x5f6c>
   16e04:	vadd.f32	s2, s4, s2
   16e08:	vcmpe.f32	s2, s0
   16e0c:	vmrs	APSR_nzcv, fpscr
   16e10:	bpl	16ee0 <__assert_fail@plt+0x5f6c>
   16e14:	vldr	s0, [r7, #4]
   16e18:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16e1c:	vcmpe.f32	s0, s4
   16e20:	vmrs	APSR_nzcv, fpscr
   16e24:	bhi	16ee0 <__assert_fail@plt+0x5f6c>
   16e28:	vcmpe.f32	s2, s0
   16e2c:	vmrs	APSR_nzcv, fpscr
   16e30:	bpl	16ee0 <__assert_fail@plt+0x5f6c>
   16e34:	ldrb	r0, [r7, #16]
   16e38:	cmp	r0, #0
   16e3c:	bne	16e68 <__assert_fail@plt+0x5ef4>
   16e40:	vldr	s0, [r7, #8]
   16e44:	vldr	s4, [pc, #284]	; 16f68 <__assert_fail@plt+0x5ff4>
   16e48:	vmov	s2, r6
   16e4c:	vcvt.f32.u32	s2, s2
   16e50:	vdiv.f32	s2, s2, s0
   16e54:	vcmpe.f32	s2, s4
   16e58:	vcvt.u32.f32	s0, s2
   16e5c:	vmrs	APSR_nzcv, fpscr
   16e60:	bge	16ef0 <__assert_fail@plt+0x5f7c>
   16e64:	vmov	r6, s0
   16e68:	cmp	r6, #10
   16e6c:	movls	r6, #10
   16e70:	orr	r0, r6, #1
   16e74:	cmn	r0, #1
   16e78:	beq	16ef0 <__assert_fail@plt+0x5f7c>
   16e7c:	ldr	r6, [fp, #8]
   16e80:	mov	r1, #3
   16e84:	cmp	r0, #10
   16e88:	bcc	16ec0 <__assert_fail@plt+0x5f4c>
   16e8c:	mov	r1, #3
   16e90:	mov	r3, #9
   16e94:	mov	r2, #12
   16e98:	udiv	r7, r0, r1
   16e9c:	mls	r7, r7, r1, r0
   16ea0:	cmp	r7, #0
   16ea4:	beq	16ec0 <__assert_fail@plt+0x5f4c>
   16ea8:	add	r3, r3, r2
   16eac:	add	r2, r2, #8
   16eb0:	add	r1, r1, #2
   16eb4:	add	r3, r3, #4
   16eb8:	cmp	r3, r0
   16ebc:	bcc	16e98 <__assert_fail@plt+0x5f24>
   16ec0:	udiv	r2, r0, r1
   16ec4:	mls	r1, r2, r1, r0
   16ec8:	cmp	r1, #0
   16ecc:	bne	16ee8 <__assert_fail@plt+0x5f74>
   16ed0:	add	r0, r0, #2
   16ed4:	cmn	r0, #1
   16ed8:	bne	16e80 <__assert_fail@plt+0x5f0c>
   16edc:	b	16ef0 <__assert_fail@plt+0x5f7c>
   16ee0:	str	r0, [r4, #20]
   16ee4:	b	16ef8 <__assert_fail@plt+0x5f84>
   16ee8:	cmp	r0, #536870912	; 0x20000000
   16eec:	bcc	16f08 <__assert_fail@plt+0x5f94>
   16ef0:	mov	r0, #0
   16ef4:	str	r0, [r4, #8]
   16ef8:	mov	r0, r4
   16efc:	bl	13504 <__assert_fail@plt+0x2590>
   16f00:	mov	r0, r8
   16f04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16f08:	cmp	r0, #0
   16f0c:	str	r0, [r4, #8]
   16f10:	beq	16ef8 <__assert_fail@plt+0x5f84>
   16f14:	mov	r1, #8
   16f18:	bl	17dcc <__assert_fail@plt+0x6e58>
   16f1c:	cmp	r0, #0
   16f20:	str	r0, [r4]
   16f24:	beq	16ef8 <__assert_fail@plt+0x5f84>
   16f28:	mov	r1, #0
   16f2c:	mov	r8, r4
   16f30:	str	r1, [r4, #12]
   16f34:	str	r1, [r4, #16]
   16f38:	str	r5, [r4, #24]
   16f3c:	str	r9, [r4, #28]
   16f40:	str	r6, [r4, #32]
   16f44:	str	r1, [r4, #36]	; 0x24
   16f48:	ldr	r1, [r4, #8]
   16f4c:	add	r0, r0, r1, lsl #3
   16f50:	str	r0, [r4, #4]
   16f54:	mov	r0, r8
   16f58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16f5c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16f60:	svccc	0x00666666
   16f64:	svccc	0x008ccccd
   16f68:	svcmi	0x00800000
   16f6c:	ror	r2, r0, #3
   16f70:	udiv	r2, r2, r1
   16f74:	mul	r1, r2, r1
   16f78:	rsb	r0, r1, r0, ror #3
   16f7c:	bx	lr
   16f80:	sub	r0, r0, r1
   16f84:	clz	r0, r0
   16f88:	lsr	r0, r0, #5
   16f8c:	bx	lr
   16f90:	push	{r4, r5, r6, r7, fp, lr}
   16f94:	add	fp, sp, #16
   16f98:	mov	r4, r0
   16f9c:	ldr	r5, [r0]
   16fa0:	ldr	r0, [r0, #4]
   16fa4:	cmp	r5, r0
   16fa8:	bcs	17040 <__assert_fail@plt+0x60cc>
   16fac:	mov	r6, #0
   16fb0:	ldr	r1, [r5]
   16fb4:	cmp	r1, #0
   16fb8:	beq	17034 <__assert_fail@plt+0x60c0>
   16fbc:	ldr	r1, [r4, #32]
   16fc0:	ldr	r7, [r5, #4]
   16fc4:	cmp	r1, #0
   16fc8:	mov	r0, r1
   16fcc:	movwne	r0, #1
   16fd0:	cmp	r7, #0
   16fd4:	beq	17018 <__assert_fail@plt+0x60a4>
   16fd8:	tst	r0, #1
   16fdc:	beq	16fec <__assert_fail@plt+0x6078>
   16fe0:	ldr	r0, [r7]
   16fe4:	blx	r1
   16fe8:	ldr	r1, [r4, #32]
   16fec:	str	r6, [r7]
   16ff0:	cmp	r1, #0
   16ff4:	ldr	r0, [r4, #36]	; 0x24
   16ff8:	ldr	r2, [r7, #4]
   16ffc:	str	r0, [r7, #4]
   17000:	mov	r0, r1
   17004:	str	r7, [r4, #36]	; 0x24
   17008:	mov	r7, r2
   1700c:	movwne	r0, #1
   17010:	cmp	r2, #0
   17014:	bne	16fd8 <__assert_fail@plt+0x6064>
   17018:	cmp	r0, #0
   1701c:	beq	17028 <__assert_fail@plt+0x60b4>
   17020:	ldr	r0, [r5]
   17024:	blx	r1
   17028:	str	r6, [r5]
   1702c:	str	r6, [r5, #4]
   17030:	ldr	r0, [r4, #4]
   17034:	add	r5, r5, #8
   17038:	cmp	r5, r0
   1703c:	bcc	16fb0 <__assert_fail@plt+0x603c>
   17040:	mov	r0, #0
   17044:	str	r0, [r4, #12]
   17048:	str	r0, [r4, #16]
   1704c:	pop	{r4, r5, r6, r7, fp, pc}
   17050:	push	{r4, r5, r6, sl, fp, lr}
   17054:	add	fp, sp, #16
   17058:	mov	r4, r0
   1705c:	ldr	r0, [r0, #32]
   17060:	cmp	r0, #0
   17064:	ldrne	r0, [r4, #16]
   17068:	cmpne	r0, #0
   1706c:	beq	170d4 <__assert_fail@plt+0x6160>
   17070:	ldr	r5, [r4]
   17074:	ldr	r1, [r4, #4]
   17078:	cmp	r5, r1
   1707c:	bcc	17090 <__assert_fail@plt+0x611c>
   17080:	b	170d4 <__assert_fail@plt+0x6160>
   17084:	add	r5, r5, #8
   17088:	cmp	r5, r1
   1708c:	bcs	170d4 <__assert_fail@plt+0x6160>
   17090:	ldr	r0, [r5]
   17094:	cmp	r0, #0
   17098:	cmpne	r5, #0
   1709c:	beq	17084 <__assert_fail@plt+0x6110>
   170a0:	ldr	r1, [r4, #32]
   170a4:	blx	r1
   170a8:	ldr	r6, [r5, #4]
   170ac:	cmp	r6, #0
   170b0:	beq	170cc <__assert_fail@plt+0x6158>
   170b4:	ldr	r1, [r4, #32]
   170b8:	ldr	r0, [r6]
   170bc:	blx	r1
   170c0:	ldr	r6, [r6, #4]
   170c4:	cmp	r6, #0
   170c8:	bne	170b4 <__assert_fail@plt+0x6140>
   170cc:	ldr	r1, [r4, #4]
   170d0:	b	17084 <__assert_fail@plt+0x6110>
   170d4:	ldr	r5, [r4]
   170d8:	ldr	r1, [r4, #4]
   170dc:	cmp	r5, r1
   170e0:	bcc	170f4 <__assert_fail@plt+0x6180>
   170e4:	b	1711c <__assert_fail@plt+0x61a8>
   170e8:	add	r5, r5, #8
   170ec:	cmp	r5, r1
   170f0:	bcs	1711c <__assert_fail@plt+0x61a8>
   170f4:	ldr	r0, [r5, #4]
   170f8:	cmp	r0, #0
   170fc:	beq	170e8 <__assert_fail@plt+0x6174>
   17100:	ldr	r6, [r0, #4]
   17104:	bl	13504 <__assert_fail@plt+0x2590>
   17108:	cmp	r6, #0
   1710c:	mov	r0, r6
   17110:	bne	17100 <__assert_fail@plt+0x618c>
   17114:	ldr	r1, [r4, #4]
   17118:	b	170e8 <__assert_fail@plt+0x6174>
   1711c:	ldr	r0, [r4, #36]	; 0x24
   17120:	cmp	r0, #0
   17124:	beq	1713c <__assert_fail@plt+0x61c8>
   17128:	ldr	r5, [r0, #4]
   1712c:	bl	13504 <__assert_fail@plt+0x2590>
   17130:	cmp	r5, #0
   17134:	mov	r0, r5
   17138:	bne	17128 <__assert_fail@plt+0x61b4>
   1713c:	ldr	r0, [r4]
   17140:	bl	13504 <__assert_fail@plt+0x2590>
   17144:	mov	r0, r4
   17148:	pop	{r4, r5, r6, sl, fp, lr}
   1714c:	b	13504 <__assert_fail@plt+0x2590>
   17150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17154:	add	fp, sp, #28
   17158:	sub	sp, sp, #44	; 0x2c
   1715c:	mov	r7, r0
   17160:	mov	r4, r0
   17164:	ldr	r0, [r7, #20]!
   17168:	ldrb	r2, [r0, #16]
   1716c:	cmp	r2, #0
   17170:	bne	171a0 <__assert_fail@plt+0x622c>
   17174:	vldr	s0, [r0, #8]
   17178:	vldr	s4, [pc, #560]	; 173b0 <__assert_fail@plt+0x643c>
   1717c:	vmov	s2, r1
   17180:	mov	r5, #0
   17184:	vcvt.f32.u32	s2, s2
   17188:	vdiv.f32	s2, s2, s0
   1718c:	vcmpe.f32	s2, s4
   17190:	vcvt.u32.f32	s0, s2
   17194:	vmrs	APSR_nzcv, fpscr
   17198:	bge	173a0 <__assert_fail@plt+0x642c>
   1719c:	vmov	r1, s0
   171a0:	cmp	r1, #10
   171a4:	mov	r5, #0
   171a8:	movls	r1, #10
   171ac:	orr	r6, r1, #1
   171b0:	cmn	r6, #1
   171b4:	bne	171c8 <__assert_fail@plt+0x6254>
   171b8:	b	173a0 <__assert_fail@plt+0x642c>
   171bc:	add	r6, r6, #2
   171c0:	cmn	r6, #1
   171c4:	beq	173a0 <__assert_fail@plt+0x642c>
   171c8:	mov	r0, #3
   171cc:	cmp	r6, #10
   171d0:	bcc	17208 <__assert_fail@plt+0x6294>
   171d4:	mov	r0, #3
   171d8:	mov	r2, #9
   171dc:	mov	r1, #12
   171e0:	udiv	r3, r6, r0
   171e4:	mls	r3, r3, r0, r6
   171e8:	cmp	r3, #0
   171ec:	beq	17208 <__assert_fail@plt+0x6294>
   171f0:	add	r2, r2, r1
   171f4:	add	r1, r1, #8
   171f8:	add	r0, r0, #2
   171fc:	add	r2, r2, #4
   17200:	cmp	r2, r6
   17204:	bcc	171e0 <__assert_fail@plt+0x626c>
   17208:	udiv	r1, r6, r0
   1720c:	mls	r0, r1, r0, r6
   17210:	cmp	r0, #0
   17214:	beq	171bc <__assert_fail@plt+0x6248>
   17218:	sub	r0, r6, #1
   1721c:	cmn	r0, #-536870910	; 0xe0000002
   17220:	bhi	173a0 <__assert_fail@plt+0x642c>
   17224:	ldr	r0, [r4, #8]
   17228:	cmp	r6, r0
   1722c:	bne	17238 <__assert_fail@plt+0x62c4>
   17230:	mov	r5, #1
   17234:	b	173a0 <__assert_fail@plt+0x642c>
   17238:	mov	r0, r6
   1723c:	mov	r1, #8
   17240:	bl	17dcc <__assert_fail@plt+0x6e58>
   17244:	cmp	r0, #0
   17248:	str	r0, [sp, #4]
   1724c:	beq	173a0 <__assert_fail@plt+0x642c>
   17250:	mov	r1, #0
   17254:	add	r0, r0, r6, lsl #3
   17258:	str	r6, [sp, #12]
   1725c:	add	r5, sp, #4
   17260:	mov	sl, r4
   17264:	mov	r2, #0
   17268:	str	r1, [sp, #16]
   1726c:	str	r1, [sp, #20]
   17270:	str	r0, [sp, #8]
   17274:	add	r0, r5, #20
   17278:	mov	r1, r4
   1727c:	vld1.32	{d16-d17}, [r7]
   17280:	vst1.32	{d16-d17}, [r0]
   17284:	ldr	r0, [sl, #36]!	; 0x24
   17288:	str	r0, [sp, #40]	; 0x28
   1728c:	mov	r0, r5
   17290:	bl	173b4 <__assert_fail@plt+0x6440>
   17294:	cmp	r0, #0
   17298:	beq	172c0 <__assert_fail@plt+0x634c>
   1729c:	ldr	r0, [r4]
   172a0:	bl	13504 <__assert_fail@plt+0x2590>
   172a4:	mov	r0, #36	; 0x24
   172a8:	vld1.32	{d16-d17}, [r5], r0
   172ac:	vst1.32	{d16-d17}, [r4], r0
   172b0:	ldr	r0, [r5]
   172b4:	mov	r5, #1
   172b8:	str	r0, [r4]
   172bc:	b	173a0 <__assert_fail@plt+0x642c>
   172c0:	ldr	r0, [sp, #40]	; 0x28
   172c4:	str	r0, [sl]
   172c8:	ldr	r0, [sp, #8]
   172cc:	ldr	r8, [sp, #4]
   172d0:	cmp	r8, r0
   172d4:	str	r0, [sp]
   172d8:	bcs	1737c <__assert_fail@plt+0x6408>
   172dc:	mov	r9, #0
   172e0:	ldr	r0, [r8]
   172e4:	cmp	r0, #0
   172e8:	beq	1736c <__assert_fail@plt+0x63f8>
   172ec:	ldr	r6, [r8, #4]
   172f0:	cmp	r6, #0
   172f4:	beq	17368 <__assert_fail@plt+0x63f4>
   172f8:	ldr	r1, [r4, #8]
   172fc:	ldr	r5, [r6]
   17300:	ldr	r2, [r4, #24]
   17304:	mov	r0, r5
   17308:	blx	r2
   1730c:	ldr	r1, [r4, #8]
   17310:	cmp	r0, r1
   17314:	bcs	173ac <__assert_fail@plt+0x6438>
   17318:	ldr	r3, [r4]
   1731c:	ldr	r2, [r6, #4]
   17320:	ldr	r7, [r3, r0, lsl #3]
   17324:	cmp	r7, #0
   17328:	beq	17338 <__assert_fail@plt+0x63c4>
   1732c:	add	r0, r3, r0, lsl #3
   17330:	add	r0, r0, #4
   17334:	b	17350 <__assert_fail@plt+0x63dc>
   17338:	str	r5, [r3, r0, lsl #3]
   1733c:	ldr	r0, [r4, #12]
   17340:	add	r0, r0, #1
   17344:	str	r0, [r4, #12]
   17348:	mov	r0, sl
   1734c:	str	r9, [r6]
   17350:	ldr	r3, [r0]
   17354:	cmp	r2, #0
   17358:	str	r3, [r6, #4]
   1735c:	str	r6, [r0]
   17360:	mov	r6, r2
   17364:	bne	172fc <__assert_fail@plt+0x6388>
   17368:	str	r9, [r8, #4]
   1736c:	ldr	r0, [sp]
   17370:	add	r8, r8, #8
   17374:	cmp	r8, r0
   17378:	bcc	172e0 <__assert_fail@plt+0x636c>
   1737c:	add	r1, sp, #4
   17380:	mov	r0, r4
   17384:	mov	r2, #0
   17388:	mov	r5, #0
   1738c:	bl	173b4 <__assert_fail@plt+0x6440>
   17390:	cmp	r0, #0
   17394:	beq	173ac <__assert_fail@plt+0x6438>
   17398:	ldr	r0, [sp, #4]
   1739c:	bl	13504 <__assert_fail@plt+0x2590>
   173a0:	mov	r0, r5
   173a4:	sub	sp, fp, #28
   173a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173ac:	bl	10f38 <abort@plt>
   173b0:	svcmi	0x00800000
   173b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173b8:	add	fp, sp, #28
   173bc:	sub	sp, sp, #12
   173c0:	ldr	sl, [r1]
   173c4:	str	r1, [sp, #8]
   173c8:	ldr	r1, [r1, #4]
   173cc:	mov	r7, r0
   173d0:	mov	r0, #1
   173d4:	str	r2, [sp, #4]
   173d8:	cmp	sl, r1
   173dc:	bcs	17538 <__assert_fail@plt+0x65c4>
   173e0:	add	r8, r7, #36	; 0x24
   173e4:	mov	r9, #0
   173e8:	ldr	r4, [sl]
   173ec:	cmp	r4, #0
   173f0:	beq	17520 <__assert_fail@plt+0x65ac>
   173f4:	ldr	r5, [sl, #4]
   173f8:	cmp	r5, #0
   173fc:	beq	17474 <__assert_fail@plt+0x6500>
   17400:	ldr	r1, [r7, #8]
   17404:	ldr	r4, [r5]
   17408:	ldr	r2, [r7, #24]
   1740c:	mov	r0, r4
   17410:	blx	r2
   17414:	ldr	r1, [r7, #8]
   17418:	cmp	r0, r1
   1741c:	bcs	1754c <__assert_fail@plt+0x65d8>
   17420:	ldr	r3, [r7]
   17424:	ldr	r2, [r5, #4]
   17428:	ldr	r6, [r3, r0, lsl #3]
   1742c:	cmp	r6, #0
   17430:	beq	17440 <__assert_fail@plt+0x64cc>
   17434:	add	r0, r3, r0, lsl #3
   17438:	add	r0, r0, #4
   1743c:	b	17458 <__assert_fail@plt+0x64e4>
   17440:	str	r4, [r3, r0, lsl #3]
   17444:	ldr	r0, [r7, #12]
   17448:	add	r0, r0, #1
   1744c:	str	r0, [r7, #12]
   17450:	mov	r0, r8
   17454:	str	r9, [r5]
   17458:	ldr	r3, [r0]
   1745c:	cmp	r2, #0
   17460:	str	r3, [r5, #4]
   17464:	str	r5, [r0]
   17468:	mov	r5, r2
   1746c:	bne	17404 <__assert_fail@plt+0x6490>
   17470:	ldr	r4, [sl]
   17474:	ldr	r0, [sp, #4]
   17478:	str	r9, [sl, #4]
   1747c:	cmp	r0, #0
   17480:	bne	17520 <__assert_fail@plt+0x65ac>
   17484:	ldr	r1, [r7, #8]
   17488:	ldr	r2, [r7, #24]
   1748c:	mov	r0, r4
   17490:	blx	r2
   17494:	mov	r5, r0
   17498:	ldr	r0, [r7, #8]
   1749c:	cmp	r5, r0
   174a0:	bcs	1754c <__assert_fail@plt+0x65d8>
   174a4:	ldr	r6, [r7]
   174a8:	ldr	r0, [r6, r5, lsl #3]
   174ac:	cmp	r0, #0
   174b0:	beq	174d0 <__assert_fail@plt+0x655c>
   174b4:	ldr	r0, [r8]
   174b8:	cmp	r0, #0
   174bc:	beq	174e4 <__assert_fail@plt+0x6570>
   174c0:	mov	r1, r0
   174c4:	ldr	r2, [r1, #4]!
   174c8:	str	r2, [r8]
   174cc:	b	174f8 <__assert_fail@plt+0x6584>
   174d0:	str	r4, [r6, r5, lsl #3]
   174d4:	ldr	r0, [r7, #12]
   174d8:	add	r0, r0, #1
   174dc:	str	r0, [r7, #12]
   174e0:	b	1750c <__assert_fail@plt+0x6598>
   174e4:	mov	r0, #8
   174e8:	bl	17e20 <__assert_fail@plt+0x6eac>
   174ec:	cmp	r0, #0
   174f0:	beq	17540 <__assert_fail@plt+0x65cc>
   174f4:	add	r1, r0, #4
   174f8:	str	r4, [r0]
   174fc:	add	r2, r6, r5, lsl #3
   17500:	ldr	r3, [r2, #4]
   17504:	str	r3, [r1]
   17508:	str	r0, [r2, #4]
   1750c:	ldr	r1, [sp, #8]
   17510:	str	r9, [sl]
   17514:	ldr	r0, [r1, #12]
   17518:	sub	r0, r0, #1
   1751c:	str	r0, [r1, #12]
   17520:	ldr	r0, [sp, #8]
   17524:	add	sl, sl, #8
   17528:	ldr	r0, [r0, #4]
   1752c:	cmp	sl, r0
   17530:	bcc	173e8 <__assert_fail@plt+0x6474>
   17534:	mov	r0, #1
   17538:	sub	sp, fp, #28
   1753c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17540:	mov	r0, #0
   17544:	sub	sp, fp, #28
   17548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1754c:	bl	10f38 <abort@plt>
   17550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17554:	add	fp, sp, #28
   17558:	sub	sp, sp, #4
   1755c:	cmp	r1, #0
   17560:	beq	17884 <__assert_fail@plt+0x6910>
   17564:	mov	r8, r2
   17568:	mov	sl, r1
   1756c:	ldr	r1, [r0, #8]
   17570:	ldr	r2, [r0, #24]
   17574:	mov	r4, r0
   17578:	mov	r0, sl
   1757c:	blx	r2
   17580:	mov	r7, r0
   17584:	ldr	r0, [r4, #8]
   17588:	cmp	r7, r0
   1758c:	bcs	17884 <__assert_fail@plt+0x6910>
   17590:	ldr	r5, [r4]
   17594:	mov	r9, r5
   17598:	ldr	r1, [r9, r7, lsl #3]!
   1759c:	cmp	r1, #0
   175a0:	beq	1762c <__assert_fail@plt+0x66b8>
   175a4:	cmp	r1, sl
   175a8:	beq	175d4 <__assert_fail@plt+0x6660>
   175ac:	ldr	r2, [r4, #28]
   175b0:	mov	r0, sl
   175b4:	blx	r2
   175b8:	cmp	r0, #0
   175bc:	mov	r6, r9
   175c0:	beq	175e8 <__assert_fail@plt+0x6674>
   175c4:	ldr	r0, [r6]
   175c8:	cmp	r0, #0
   175cc:	bne	175d8 <__assert_fail@plt+0x6664>
   175d0:	b	1762c <__assert_fail@plt+0x66b8>
   175d4:	mov	r0, sl
   175d8:	cmp	r8, #0
   175dc:	mov	r7, #0
   175e0:	strne	r0, [r8]
   175e4:	b	17820 <__assert_fail@plt+0x68ac>
   175e8:	add	r6, r5, r7, lsl #3
   175ec:	ldr	r0, [r6, #4]!
   175f0:	cmp	r0, #0
   175f4:	beq	1762c <__assert_fail@plt+0x66b8>
   175f8:	ldr	r1, [r0]
   175fc:	cmp	r1, sl
   17600:	beq	17620 <__assert_fail@plt+0x66ac>
   17604:	ldr	r2, [r4, #28]
   17608:	mov	r0, sl
   1760c:	blx	r2
   17610:	ldr	r6, [r6]
   17614:	cmp	r0, #0
   17618:	beq	175ec <__assert_fail@plt+0x6678>
   1761c:	b	175c4 <__assert_fail@plt+0x6650>
   17620:	mov	r0, sl
   17624:	cmp	r0, #0
   17628:	bne	175d8 <__assert_fail@plt+0x6664>
   1762c:	vldr	s0, [r4, #8]
   17630:	vldr	s2, [r4, #12]
   17634:	ldr	r0, [r4, #20]
   17638:	vcvt.f32.u32	s0, s0
   1763c:	vcvt.f32.u32	s4, s2
   17640:	vldr	s2, [r0, #8]
   17644:	vmul.f32	s6, s2, s0
   17648:	vcmpe.f32	s6, s4
   1764c:	vmrs	APSR_nzcv, fpscr
   17650:	bpl	177a4 <__assert_fail@plt+0x6830>
   17654:	movw	r1, #34664	; 0x8768
   17658:	movt	r1, #1
   1765c:	cmp	r0, r1
   17660:	beq	176ec <__assert_fail@plt+0x6778>
   17664:	vldr	s6, [pc, #540]	; 17888 <__assert_fail@plt+0x6914>
   17668:	vcmpe.f32	s2, s6
   1766c:	vmrs	APSR_nzcv, fpscr
   17670:	ble	176d8 <__assert_fail@plt+0x6764>
   17674:	vldr	s8, [pc, #528]	; 1788c <__assert_fail@plt+0x6918>
   17678:	vcmpe.f32	s2, s8
   1767c:	vmrs	APSR_nzcv, fpscr
   17680:	bpl	176d8 <__assert_fail@plt+0x6764>
   17684:	vldr	s8, [pc, #516]	; 17890 <__assert_fail@plt+0x691c>
   17688:	vldr	s10, [r0, #12]
   1768c:	vcmpe.f32	s10, s8
   17690:	vmrs	APSR_nzcv, fpscr
   17694:	ble	176d8 <__assert_fail@plt+0x6764>
   17698:	vldr	s8, [r0]
   1769c:	vcmpe.f32	s8, #0.0
   176a0:	vmrs	APSR_nzcv, fpscr
   176a4:	blt	176d8 <__assert_fail@plt+0x6764>
   176a8:	vadd.f32	s6, s8, s6
   176ac:	vcmpe.f32	s6, s2
   176b0:	vmrs	APSR_nzcv, fpscr
   176b4:	bpl	176d8 <__assert_fail@plt+0x6764>
   176b8:	vldr	s8, [r0, #4]
   176bc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   176c0:	vcmpe.f32	s8, s10
   176c4:	vmrs	APSR_nzcv, fpscr
   176c8:	bhi	176d8 <__assert_fail@plt+0x6764>
   176cc:	vcmpe.f32	s6, s8
   176d0:	vmrs	APSR_nzcv, fpscr
   176d4:	bmi	176f0 <__assert_fail@plt+0x677c>
   176d8:	vldr	s2, [pc, #436]	; 17894 <__assert_fail@plt+0x6920>
   176dc:	movw	r0, #34664	; 0x8768
   176e0:	movt	r0, #1
   176e4:	str	r0, [r4, #20]
   176e8:	b	176f0 <__assert_fail@plt+0x677c>
   176ec:	mov	r0, r1
   176f0:	vmul.f32	s6, s2, s0
   176f4:	vcmpe.f32	s6, s4
   176f8:	vmrs	APSR_nzcv, fpscr
   176fc:	bpl	177a4 <__assert_fail@plt+0x6830>
   17700:	vldr	s4, [r0, #12]
   17704:	ldrb	r0, [r0, #16]
   17708:	mvn	r7, #0
   1770c:	vmul.f32	s0, s4, s0
   17710:	vldr	s4, [pc, #384]	; 17898 <__assert_fail@plt+0x6924>
   17714:	cmp	r0, #0
   17718:	vmul.f32	s2, s2, s0
   1771c:	vseleq.f32	s0, s2, s0
   17720:	vcmpe.f32	s0, s4
   17724:	vmrs	APSR_nzcv, fpscr
   17728:	bge	17820 <__assert_fail@plt+0x68ac>
   1772c:	vcvt.u32.f32	s0, s0
   17730:	mov	r0, r4
   17734:	vmov	r1, s0
   17738:	bl	17150 <__assert_fail@plt+0x61dc>
   1773c:	cmp	r0, #0
   17740:	beq	17820 <__assert_fail@plt+0x68ac>
   17744:	ldr	r1, [r4, #8]
   17748:	ldr	r2, [r4, #24]
   1774c:	mov	r0, sl
   17750:	blx	r2
   17754:	mov	r7, r0
   17758:	ldr	r0, [r4, #8]
   1775c:	cmp	r7, r0
   17760:	bcs	17884 <__assert_fail@plt+0x6910>
   17764:	ldr	r5, [r4]
   17768:	mov	r9, r5
   1776c:	ldr	r1, [r9, r7, lsl #3]!
   17770:	cmp	r1, #0
   17774:	beq	177cc <__assert_fail@plt+0x6858>
   17778:	cmp	r1, sl
   1777c:	mov	r0, sl
   17780:	beq	1779c <__assert_fail@plt+0x6828>
   17784:	ldr	r2, [r4, #28]
   17788:	mov	r0, sl
   1778c:	blx	r2
   17790:	cmp	r0, #0
   17794:	beq	17834 <__assert_fail@plt+0x68c0>
   17798:	ldr	r0, [r9]
   1779c:	cmp	r0, #0
   177a0:	bne	17884 <__assert_fail@plt+0x6910>
   177a4:	ldr	r0, [r9]
   177a8:	cmp	r0, #0
   177ac:	beq	177cc <__assert_fail@plt+0x6858>
   177b0:	ldr	r0, [r4, #36]	; 0x24
   177b4:	cmp	r0, #0
   177b8:	beq	177ec <__assert_fail@plt+0x6878>
   177bc:	mov	r1, r0
   177c0:	ldr	r2, [r1, #4]!
   177c4:	str	r2, [r4, #36]	; 0x24
   177c8:	b	17800 <__assert_fail@plt+0x688c>
   177cc:	str	sl, [r9]
   177d0:	ldr	r0, [r4, #12]
   177d4:	ldr	r1, [r4, #16]
   177d8:	add	r0, r0, #1
   177dc:	add	r1, r1, #1
   177e0:	str	r0, [r4, #12]
   177e4:	str	r1, [r4, #16]
   177e8:	b	1781c <__assert_fail@plt+0x68a8>
   177ec:	mov	r0, #8
   177f0:	bl	17e20 <__assert_fail@plt+0x6eac>
   177f4:	cmp	r0, #0
   177f8:	beq	1782c <__assert_fail@plt+0x68b8>
   177fc:	add	r1, r0, #4
   17800:	str	sl, [r0]
   17804:	ldr	r2, [r9, #4]
   17808:	str	r2, [r1]
   1780c:	str	r0, [r9, #4]
   17810:	ldr	r0, [r4, #16]
   17814:	add	r0, r0, #1
   17818:	str	r0, [r4, #16]
   1781c:	mov	r7, #1
   17820:	mov	r0, r7
   17824:	sub	sp, fp, #28
   17828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1782c:	mvn	r7, #0
   17830:	b	17820 <__assert_fail@plt+0x68ac>
   17834:	add	r6, r5, r7, lsl #3
   17838:	ldr	r0, [r6, #4]!
   1783c:	cmp	r0, #0
   17840:	beq	177a4 <__assert_fail@plt+0x6830>
   17844:	ldr	r1, [r0]
   17848:	cmp	r1, sl
   1784c:	beq	17878 <__assert_fail@plt+0x6904>
   17850:	ldr	r2, [r4, #28]
   17854:	mov	r0, sl
   17858:	blx	r2
   1785c:	ldr	r6, [r6]
   17860:	cmp	r0, #0
   17864:	beq	17838 <__assert_fail@plt+0x68c4>
   17868:	ldr	r0, [r6]
   1786c:	cmp	r0, #0
   17870:	beq	177a4 <__assert_fail@plt+0x6830>
   17874:	b	17884 <__assert_fail@plt+0x6910>
   17878:	mov	r0, sl
   1787c:	cmp	r0, #0
   17880:	beq	177a4 <__assert_fail@plt+0x6830>
   17884:	bl	10f38 <abort@plt>
   17888:	stclcc	12, cr12, [ip, #820]	; 0x334
   1788c:	svccc	0x00666666
   17890:	svccc	0x008ccccd
   17894:	svccc	0x004ccccd
   17898:	svcmi	0x00800000
   1789c:	push	{r4, sl, fp, lr}
   178a0:	add	fp, sp, #8
   178a4:	sub	sp, sp, #8
   178a8:	add	r2, sp, #4
   178ac:	mov	r4, r1
   178b0:	bl	17550 <__assert_fail@plt+0x65dc>
   178b4:	cmn	r0, #1
   178b8:	beq	178cc <__assert_fail@plt+0x6958>
   178bc:	ldr	r1, [sp, #4]
   178c0:	cmp	r0, #0
   178c4:	moveq	r4, r1
   178c8:	b	178d0 <__assert_fail@plt+0x695c>
   178cc:	mov	r4, #0
   178d0:	mov	r0, r4
   178d4:	sub	sp, fp, #8
   178d8:	pop	{r4, sl, fp, pc}
   178dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   178e0:	add	fp, sp, #24
   178e4:	mov	r9, r1
   178e8:	ldr	r1, [r0, #8]
   178ec:	ldr	r2, [r0, #24]
   178f0:	mov	r5, r0
   178f4:	mov	r0, r9
   178f8:	blx	r2
   178fc:	mov	r7, r0
   17900:	ldr	r0, [r5, #8]
   17904:	cmp	r7, r0
   17908:	bcs	17b68 <__assert_fail@plt+0x6bf4>
   1790c:	ldr	r6, [r5]
   17910:	mov	r8, #0
   17914:	mov	r4, r6
   17918:	ldr	r1, [r4, r7, lsl #3]!
   1791c:	cmp	r1, #0
   17920:	beq	179d4 <__assert_fail@plt+0x6a60>
   17924:	cmp	r1, r9
   17928:	beq	17944 <__assert_fail@plt+0x69d0>
   1792c:	ldr	r2, [r5, #28]
   17930:	mov	r0, r9
   17934:	blx	r2
   17938:	cmp	r0, #0
   1793c:	beq	1797c <__assert_fail@plt+0x6a08>
   17940:	ldr	r9, [r4]
   17944:	add	r0, r6, r7, lsl #3
   17948:	ldr	r0, [r0, #4]
   1794c:	cmp	r0, #0
   17950:	beq	179c4 <__assert_fail@plt+0x6a50>
   17954:	ldm	r0, {r1, r2}
   17958:	stm	r4, {r1, r2}
   1795c:	mov	r1, #0
   17960:	str	r1, [r0]
   17964:	ldr	r1, [r5, #36]	; 0x24
   17968:	str	r1, [r0, #4]
   1796c:	str	r0, [r5, #36]	; 0x24
   17970:	cmp	r9, #0
   17974:	bne	17a0c <__assert_fail@plt+0x6a98>
   17978:	b	179d4 <__assert_fail@plt+0x6a60>
   1797c:	add	r7, r6, r7, lsl #3
   17980:	ldr	r0, [r7, #4]!
   17984:	cmp	r0, #0
   17988:	beq	179d4 <__assert_fail@plt+0x6a60>
   1798c:	ldr	r1, [r0]
   17990:	cmp	r1, r9
   17994:	beq	179dc <__assert_fail@plt+0x6a68>
   17998:	ldr	r2, [r5, #28]
   1799c:	mov	r0, r9
   179a0:	blx	r2
   179a4:	ldr	r1, [r7]
   179a8:	cmp	r0, #0
   179ac:	bne	179e4 <__assert_fail@plt+0x6a70>
   179b0:	ldr	r0, [r1, #4]!
   179b4:	cmp	r0, #0
   179b8:	mov	r7, r1
   179bc:	bne	1798c <__assert_fail@plt+0x6a18>
   179c0:	b	179d4 <__assert_fail@plt+0x6a60>
   179c4:	mov	r0, #0
   179c8:	str	r0, [r4]
   179cc:	cmp	r9, #0
   179d0:	bne	17a0c <__assert_fail@plt+0x6a98>
   179d4:	mov	r0, r8
   179d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   179dc:	mov	r1, r0
   179e0:	b	179e8 <__assert_fail@plt+0x6a74>
   179e4:	ldr	r9, [r1]
   179e8:	ldr	r0, [r1, #4]
   179ec:	str	r0, [r7]
   179f0:	mov	r0, #0
   179f4:	str	r0, [r1]
   179f8:	ldr	r0, [r5, #36]	; 0x24
   179fc:	str	r0, [r1, #4]
   17a00:	str	r1, [r5, #36]	; 0x24
   17a04:	cmp	r9, #0
   17a08:	beq	179d4 <__assert_fail@plt+0x6a60>
   17a0c:	ldr	r0, [r5, #16]
   17a10:	sub	r0, r0, #1
   17a14:	str	r0, [r5, #16]
   17a18:	ldr	r0, [r4]
   17a1c:	cmp	r0, #0
   17a20:	bne	17b28 <__assert_fail@plt+0x6bb4>
   17a24:	ldr	r0, [r5, #12]
   17a28:	vldr	s0, [r5, #8]
   17a2c:	sub	r1, r0, #1
   17a30:	str	r1, [r5, #12]
   17a34:	vmov	s2, r1
   17a38:	ldr	r0, [r5, #20]
   17a3c:	vcvt.f32.u32	s0, s0
   17a40:	vcvt.f32.u32	s2, s2
   17a44:	vldr	s4, [r0]
   17a48:	vmul.f32	s6, s4, s0
   17a4c:	vcmpe.f32	s6, s2
   17a50:	vmrs	APSR_nzcv, fpscr
   17a54:	ble	17b28 <__assert_fail@plt+0x6bb4>
   17a58:	movw	r1, #34664	; 0x8768
   17a5c:	movt	r1, #1
   17a60:	cmp	r0, r1
   17a64:	beq	17abc <__assert_fail@plt+0x6b48>
   17a68:	vldr	s8, [pc, #252]	; 17b6c <__assert_fail@plt+0x6bf8>
   17a6c:	vldr	s6, [r0, #8]
   17a70:	vcmpe.f32	s6, s8
   17a74:	vmrs	APSR_nzcv, fpscr
   17a78:	ble	17aa8 <__assert_fail@plt+0x6b34>
   17a7c:	vldr	s10, [pc, #236]	; 17b70 <__assert_fail@plt+0x6bfc>
   17a80:	vcmpe.f32	s6, s10
   17a84:	vmrs	APSR_nzcv, fpscr
   17a88:	bpl	17aa8 <__assert_fail@plt+0x6b34>
   17a8c:	vcmpe.f32	s4, #0.0
   17a90:	vmrs	APSR_nzcv, fpscr
   17a94:	vldrge	s10, [r0, #12]
   17a98:	vldrge	s12, [pc, #212]	; 17b74 <__assert_fail@plt+0x6c00>
   17a9c:	vcmpege.f32	s10, s12
   17aa0:	vmrsge	APSR_nzcv, fpscr
   17aa4:	bgt	17b34 <__assert_fail@plt+0x6bc0>
   17aa8:	vldr	s4, [pc, #200]	; 17b78 <__assert_fail@plt+0x6c04>
   17aac:	movw	r0, #34664	; 0x8768
   17ab0:	movt	r0, #1
   17ab4:	str	r0, [r5, #20]
   17ab8:	b	17ac0 <__assert_fail@plt+0x6b4c>
   17abc:	mov	r0, r1
   17ac0:	vmul.f32	s4, s4, s0
   17ac4:	vcmpe.f32	s4, s2
   17ac8:	vmrs	APSR_nzcv, fpscr
   17acc:	ble	17b28 <__assert_fail@plt+0x6bb4>
   17ad0:	ldrb	r1, [r0, #16]
   17ad4:	vldr	s2, [r0, #4]
   17ad8:	cmp	r1, #0
   17adc:	vmul.f32	s0, s2, s0
   17ae0:	vldreq	s2, [r0, #8]
   17ae4:	mov	r0, r5
   17ae8:	vmuleq.f32	s0, s0, s2
   17aec:	vcvt.u32.f32	s0, s0
   17af0:	vmov	r1, s0
   17af4:	bl	17150 <__assert_fail@plt+0x61dc>
   17af8:	cmp	r0, #0
   17afc:	bne	17b28 <__assert_fail@plt+0x6bb4>
   17b00:	ldr	r0, [r5, #36]	; 0x24
   17b04:	cmp	r0, #0
   17b08:	beq	17b20 <__assert_fail@plt+0x6bac>
   17b0c:	ldr	r4, [r0, #4]
   17b10:	bl	13504 <__assert_fail@plt+0x2590>
   17b14:	cmp	r4, #0
   17b18:	mov	r0, r4
   17b1c:	bne	17b0c <__assert_fail@plt+0x6b98>
   17b20:	mov	r0, #0
   17b24:	str	r0, [r5, #36]	; 0x24
   17b28:	mov	r8, r9
   17b2c:	mov	r0, r8
   17b30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b34:	vadd.f32	s8, s4, s8
   17b38:	vcmpe.f32	s8, s6
   17b3c:	vmrs	APSR_nzcv, fpscr
   17b40:	bpl	17aa8 <__assert_fail@plt+0x6b34>
   17b44:	vldr	s6, [r0, #4]
   17b48:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17b4c:	vcmpe.f32	s6, s10
   17b50:	vmrs	APSR_nzcv, fpscr
   17b54:	bhi	17aa8 <__assert_fail@plt+0x6b34>
   17b58:	vcmpe.f32	s8, s6
   17b5c:	vmrs	APSR_nzcv, fpscr
   17b60:	bmi	17ac0 <__assert_fail@plt+0x6b4c>
   17b64:	b	17aa8 <__assert_fail@plt+0x6b34>
   17b68:	bl	10f38 <abort@plt>
   17b6c:	stclcc	12, cr12, [ip, #820]	; 0x334
   17b70:	svccc	0x00666666
   17b74:	svccc	0x008ccccd
   17b78:	andeq	r0, r0, r0
   17b7c:	b	178dc <__assert_fail@plt+0x6968>
   17b80:	mov	r3, #1
   17b84:	mov	r2, #0
   17b88:	vdup.32	q8, r1
   17b8c:	strb	r3, [r0, #28]
   17b90:	str	r2, [r0, #20]
   17b94:	str	r2, [r0, #24]
   17b98:	vst1.32	{d16-d17}, [r0]!
   17b9c:	str	r1, [r0]
   17ba0:	bx	lr
   17ba4:	ldrb	r0, [r0, #28]
   17ba8:	bx	lr
   17bac:	push	{fp, lr}
   17bb0:	mov	fp, sp
   17bb4:	ldrb	r3, [r0, #28]
   17bb8:	ldr	r2, [r0, #20]
   17bbc:	eor	lr, r3, #1
   17bc0:	add	r2, r2, lr
   17bc4:	and	r3, r2, #3
   17bc8:	ldr	ip, [r0, r3, lsl #2]
   17bcc:	str	r1, [r0, r3, lsl #2]
   17bd0:	str	r3, [r0, #20]
   17bd4:	ldr	r1, [r0, #24]
   17bd8:	cmp	r3, r1
   17bdc:	addeq	r1, r2, lr
   17be0:	andeq	r1, r1, #3
   17be4:	streq	r1, [r0, #24]
   17be8:	mov	r1, #0
   17bec:	strb	r1, [r0, #28]
   17bf0:	mov	r0, ip
   17bf4:	pop	{fp, pc}
   17bf8:	ldrb	r1, [r0, #28]
   17bfc:	cmp	r1, #0
   17c00:	bne	17c44 <__assert_fail@plt+0x6cd0>
   17c04:	ldr	r3, [r0, #20]
   17c08:	ldr	r2, [r0, #16]
   17c0c:	ldr	r1, [r0, r3, lsl #2]
   17c10:	str	r2, [r0, r3, lsl #2]
   17c14:	ldr	r2, [r0, #20]
   17c18:	ldr	r3, [r0, #24]
   17c1c:	cmp	r2, r3
   17c20:	moveq	r2, #1
   17c24:	strbeq	r2, [r0, #28]
   17c28:	moveq	r0, r1
   17c2c:	bxeq	lr
   17c30:	sub	r2, r2, #1
   17c34:	and	r2, r2, #3
   17c38:	str	r2, [r0, #20]
   17c3c:	mov	r0, r1
   17c40:	bx	lr
   17c44:	push	{fp, lr}
   17c48:	mov	fp, sp
   17c4c:	bl	10f38 <abort@plt>
   17c50:	push	{r4, r5, r6, sl, fp, lr}
   17c54:	add	fp, sp, #16
   17c58:	mov	r5, r0
   17c5c:	mov	r0, #0
   17c60:	mov	r4, r1
   17c64:	add	r6, r2, #19
   17c68:	strb	r0, [r2, #20]
   17c6c:	mov	r0, r5
   17c70:	mov	r1, r4
   17c74:	mov	r2, #10
   17c78:	mov	r3, #0
   17c7c:	bl	182a0 <__assert_fail@plt+0x732c>
   17c80:	add	r2, r0, r0, lsl #2
   17c84:	sub	r2, r5, r2, lsl #1
   17c88:	orr	r2, r2, #48	; 0x30
   17c8c:	strb	r2, [r6], #-1
   17c90:	rsbs	r2, r5, #9
   17c94:	mov	r5, r0
   17c98:	rscs	r2, r4, #0
   17c9c:	mov	r4, r1
   17ca0:	bcc	17c6c <__assert_fail@plt+0x6cf8>
   17ca4:	add	r0, r6, #1
   17ca8:	pop	{r4, r5, r6, sl, fp, pc}
   17cac:	sub	sp, sp, #8
   17cb0:	push	{fp, lr}
   17cb4:	mov	fp, sp
   17cb8:	sub	sp, sp, #8
   17cbc:	str	r2, [fp, #8]
   17cc0:	add	r2, fp, #8
   17cc4:	str	r3, [fp, #12]
   17cc8:	orr	r2, r2, #4
   17ccc:	str	r2, [sp, #4]
   17cd0:	ldr	r2, [fp, #8]
   17cd4:	bl	10ddc <ioctl@plt>
   17cd8:	mov	sp, fp
   17cdc:	pop	{fp, lr}
   17ce0:	add	sp, sp, #8
   17ce4:	bx	lr
   17ce8:	sub	sp, sp, #4
   17cec:	push	{fp, lr}
   17cf0:	mov	fp, sp
   17cf4:	sub	sp, sp, #4
   17cf8:	str	r3, [fp, #8]
   17cfc:	mov	r3, #0
   17d00:	tst	r2, #64	; 0x40
   17d04:	addne	r3, fp, #8
   17d08:	addne	r3, r3, #4
   17d0c:	strne	r3, [sp]
   17d10:	ldrne	r3, [fp, #8]
   17d14:	bl	10e60 <openat64@plt>
   17d18:	bl	17d88 <__assert_fail@plt+0x6e14>
   17d1c:	mov	sp, fp
   17d20:	pop	{fp, lr}
   17d24:	add	sp, sp, #4
   17d28:	bx	lr
   17d2c:	push	{r4, r5, r6, sl, fp, lr}
   17d30:	add	fp, sp, #16
   17d34:	orr	r2, r2, #18688	; 0x4900
   17d38:	mov	r4, r3
   17d3c:	orr	r2, r2, #524288	; 0x80000
   17d40:	bl	17ce8 <__assert_fail@plt+0x6d74>
   17d44:	mov	r5, r0
   17d48:	mov	r0, #0
   17d4c:	cmp	r5, #0
   17d50:	poplt	{r4, r5, r6, sl, fp, pc}
   17d54:	mov	r0, r5
   17d58:	bl	10ecc <fdopendir@plt>
   17d5c:	cmp	r0, #0
   17d60:	strne	r5, [r4]
   17d64:	popne	{r4, r5, r6, sl, fp, pc}
   17d68:	bl	10e78 <__errno_location@plt>
   17d6c:	ldr	r6, [r0]
   17d70:	mov	r4, r0
   17d74:	mov	r0, r5
   17d78:	bl	10f44 <close@plt>
   17d7c:	mov	r0, #0
   17d80:	str	r6, [r4]
   17d84:	pop	{r4, r5, r6, sl, fp, pc}
   17d88:	push	{r4, r5, r6, r7, fp, lr}
   17d8c:	add	fp, sp, #16
   17d90:	mov	r4, r0
   17d94:	cmp	r0, #2
   17d98:	movhi	r0, r4
   17d9c:	pophi	{r4, r5, r6, r7, fp, pc}
   17da0:	mov	r0, r4
   17da4:	bl	181c0 <__assert_fail@plt+0x724c>
   17da8:	mov	r5, r0
   17dac:	bl	10e78 <__errno_location@plt>
   17db0:	ldr	r7, [r0]
   17db4:	mov	r6, r0
   17db8:	mov	r0, r4
   17dbc:	bl	10f44 <close@plt>
   17dc0:	mov	r0, r5
   17dc4:	str	r7, [r6]
   17dc8:	pop	{r4, r5, r6, r7, fp, pc}
   17dcc:	clz	r2, r1
   17dd0:	clz	r3, r0
   17dd4:	lsr	r2, r2, #5
   17dd8:	lsr	r3, r3, #5
   17ddc:	orrs	r2, r3, r2
   17de0:	movwne	r1, #1
   17de4:	movwne	r0, #1
   17de8:	cmp	r1, #0
   17dec:	beq	17e1c <__assert_fail@plt+0x6ea8>
   17df0:	mvn	r2, #-2147483648	; 0x80000000
   17df4:	udiv	r2, r2, r1
   17df8:	cmp	r2, r0
   17dfc:	bcs	17e1c <__assert_fail@plt+0x6ea8>
   17e00:	push	{fp, lr}
   17e04:	mov	fp, sp
   17e08:	bl	10e78 <__errno_location@plt>
   17e0c:	mov	r1, #12
   17e10:	str	r1, [r0]
   17e14:	mov	r0, #0
   17e18:	pop	{fp, pc}
   17e1c:	b	10d04 <calloc@plt>
   17e20:	cmp	r0, #0
   17e24:	movweq	r0, #1
   17e28:	cmn	r0, #1
   17e2c:	ble	17e34 <__assert_fail@plt+0x6ec0>
   17e30:	b	10e0c <malloc@plt>
   17e34:	push	{fp, lr}
   17e38:	mov	fp, sp
   17e3c:	bl	10e78 <__errno_location@plt>
   17e40:	mov	r1, #12
   17e44:	str	r1, [r0]
   17e48:	mov	r0, #0
   17e4c:	pop	{fp, pc}
   17e50:	push	{fp, lr}
   17e54:	mov	fp, sp
   17e58:	cmp	r0, #0
   17e5c:	beq	17e78 <__assert_fail@plt+0x6f04>
   17e60:	cmp	r1, #0
   17e64:	beq	17e84 <__assert_fail@plt+0x6f10>
   17e68:	cmn	r1, #1
   17e6c:	ble	17e90 <__assert_fail@plt+0x6f1c>
   17e70:	pop	{fp, lr}
   17e74:	b	10d94 <realloc@plt>
   17e78:	mov	r0, r1
   17e7c:	pop	{fp, lr}
   17e80:	b	17e20 <__assert_fail@plt+0x6eac>
   17e84:	bl	13504 <__assert_fail@plt+0x2590>
   17e88:	mov	r0, #0
   17e8c:	pop	{fp, pc}
   17e90:	bl	10e78 <__errno_location@plt>
   17e94:	mov	r1, #12
   17e98:	str	r1, [r0]
   17e9c:	mov	r0, #0
   17ea0:	pop	{fp, pc}
   17ea4:	movw	r2, #62998	; 0xf616
   17ea8:	mov	r1, #0
   17eac:	movt	r2, #149	; 0x95
   17eb0:	str	r1, [r0, #16]
   17eb4:	str	r1, [r0, #20]
   17eb8:	str	r2, [r0, #24]
   17ebc:	bx	lr
   17ec0:	push	{r4, r5, r6, r7, fp, lr}
   17ec4:	add	fp, sp, #16
   17ec8:	ldr	r2, [r0, #24]
   17ecc:	movw	r3, #62998	; 0xf616
   17ed0:	movt	r3, #149	; 0x95
   17ed4:	cmp	r2, r3
   17ed8:	bne	17f78 <__assert_fail@plt+0x7004>
   17edc:	mov	r3, r0
   17ee0:	ldr	r2, [r3, #16]!
   17ee4:	ldr	lr, [r3, #4]
   17ee8:	orrs	r5, r2, lr
   17eec:	beq	17f24 <__assert_fail@plt+0x6fb0>
   17ef0:	ldrd	r4, [r0]
   17ef4:	ldrd	r6, [r1, #96]	; 0x60
   17ef8:	eor	r7, r7, r5
   17efc:	eor	r6, r6, r4
   17f00:	orrs	r7, r6, r7
   17f04:	bne	17f24 <__assert_fail@plt+0x6fb0>
   17f08:	ldrd	r4, [r0, #8]
   17f0c:	ldrd	r6, [r1]
   17f10:	mov	ip, #1
   17f14:	eor	r7, r7, r5
   17f18:	eor	r6, r6, r4
   17f1c:	orrs	r7, r6, r7
   17f20:	beq	17f44 <__assert_fail@plt+0x6fd0>
   17f24:	adds	r4, r2, #1
   17f28:	mov	ip, #0
   17f2c:	adc	r5, lr, #0
   17f30:	and	r2, r4, r2
   17f34:	strd	r4, [r3]
   17f38:	and	r3, r5, lr
   17f3c:	orrs	r2, r2, r3
   17f40:	beq	17f4c <__assert_fail@plt+0x6fd8>
   17f44:	mov	r0, ip
   17f48:	pop	{r4, r5, r6, r7, fp, pc}
   17f4c:	orrs	r2, r4, r5
   17f50:	moveq	ip, #1
   17f54:	moveq	r0, ip
   17f58:	popeq	{r4, r5, r6, r7, fp, pc}
   17f5c:	ldrd	r2, [r1]
   17f60:	str	r3, [r0, #12]
   17f64:	str	r2, [r0, #8]
   17f68:	ldrd	r2, [r1, #96]	; 0x60
   17f6c:	stm	r0, {r2, r3}
   17f70:	mov	r0, ip
   17f74:	pop	{r4, r5, r6, r7, fp, pc}
   17f78:	movw	r0, #34684	; 0x877c
   17f7c:	movw	r1, #34708	; 0x8794
   17f80:	movw	r3, #34722	; 0x87a2
   17f84:	mov	r2, #60	; 0x3c
   17f88:	movt	r0, #1
   17f8c:	movt	r1, #1
   17f90:	movt	r3, #1
   17f94:	bl	10f74 <__assert_fail@plt>
   17f98:	sub	sp, sp, #8
   17f9c:	push	{r4, r5, r6, r7, fp, lr}
   17fa0:	add	fp, sp, #16
   17fa4:	sub	sp, sp, #8
   17fa8:	mov	r5, r0
   17fac:	add	r0, fp, #8
   17fb0:	cmp	r1, #11
   17fb4:	str	r3, [fp, #12]
   17fb8:	str	r2, [fp, #8]
   17fbc:	str	r0, [sp, #4]
   17fc0:	bhi	17ffc <__assert_fail@plt+0x7088>
   17fc4:	mov	r0, #1
   17fc8:	movw	r2, #1300	; 0x514
   17fcc:	tst	r2, r0, lsl r1
   17fd0:	bne	180bc <__assert_fail@plt+0x7148>
   17fd4:	movw	r2, #2570	; 0xa0a
   17fd8:	tst	r2, r0, lsl r1
   17fdc:	bne	18024 <__assert_fail@plt+0x70b0>
   17fe0:	cmp	r1, #0
   17fe4:	bne	17ffc <__assert_fail@plt+0x7088>
   17fe8:	ldr	r0, [sp, #4]
   17fec:	add	r1, r0, #4
   17ff0:	str	r1, [sp, #4]
   17ff4:	mov	r1, #0
   17ff8:	b	180c8 <__assert_fail@plt+0x7154>
   17ffc:	sub	r0, r1, #1024	; 0x400
   18000:	cmp	r0, #10
   18004:	bhi	180bc <__assert_fail@plt+0x7148>
   18008:	mov	r2, #1
   1800c:	movw	r3, #645	; 0x285
   18010:	tst	r3, r2, lsl r0
   18014:	bne	180bc <__assert_fail@plt+0x7148>
   18018:	movw	r3, #1282	; 0x502
   1801c:	tst	r3, r2, lsl r0
   18020:	beq	18030 <__assert_fail@plt+0x70bc>
   18024:	mov	r0, r5
   18028:	bl	10e9c <fcntl64@plt>
   1802c:	b	180d4 <__assert_fail@plt+0x7160>
   18030:	cmp	r0, #6
   18034:	bne	180bc <__assert_fail@plt+0x7148>
   18038:	ldr	r0, [sp, #4]
   1803c:	movw	r7, #37204	; 0x9154
   18040:	movt	r7, #2
   18044:	add	r1, r0, #4
   18048:	str	r1, [sp, #4]
   1804c:	ldr	r6, [r0]
   18050:	ldr	r0, [r7]
   18054:	cmp	r0, #0
   18058:	blt	180f8 <__assert_fail@plt+0x7184>
   1805c:	mov	r0, r5
   18060:	movw	r1, #1030	; 0x406
   18064:	mov	r2, r6
   18068:	bl	10e9c <fcntl64@plt>
   1806c:	mov	r4, r0
   18070:	cmn	r0, #1
   18074:	bgt	180ec <__assert_fail@plt+0x7178>
   18078:	bl	10e78 <__errno_location@plt>
   1807c:	ldr	r0, [r0]
   18080:	cmp	r0, #22
   18084:	bne	180ec <__assert_fail@plt+0x7178>
   18088:	mov	r0, r5
   1808c:	mov	r1, #0
   18090:	mov	r2, r6
   18094:	bl	10e9c <fcntl64@plt>
   18098:	mov	r4, r0
   1809c:	cmp	r0, #0
   180a0:	blt	180d8 <__assert_fail@plt+0x7164>
   180a4:	mvn	r0, #0
   180a8:	str	r0, [r7]
   180ac:	mov	r0, #1
   180b0:	cmp	r0, #0
   180b4:	bne	18124 <__assert_fail@plt+0x71b0>
   180b8:	b	180d8 <__assert_fail@plt+0x7164>
   180bc:	ldr	r0, [sp, #4]
   180c0:	add	r2, r0, #4
   180c4:	str	r2, [sp, #4]
   180c8:	ldr	r2, [r0]
   180cc:	mov	r0, r5
   180d0:	bl	10e9c <fcntl64@plt>
   180d4:	mov	r4, r0
   180d8:	mov	r0, r4
   180dc:	sub	sp, fp, #16
   180e0:	pop	{r4, r5, r6, r7, fp, lr}
   180e4:	add	sp, sp, #8
   180e8:	bx	lr
   180ec:	mov	r0, #1
   180f0:	str	r0, [r7]
   180f4:	b	180d8 <__assert_fail@plt+0x7164>
   180f8:	mov	r0, r5
   180fc:	mov	r1, #0
   18100:	mov	r2, r6
   18104:	bl	10e9c <fcntl64@plt>
   18108:	mov	r4, r0
   1810c:	ldr	r0, [r7]
   18110:	add	r0, r0, #1
   18114:	clz	r0, r0
   18118:	lsr	r0, r0, #5
   1811c:	cmp	r0, #0
   18120:	beq	180d8 <__assert_fail@plt+0x7164>
   18124:	cmp	r4, #0
   18128:	blt	180d8 <__assert_fail@plt+0x7164>
   1812c:	mov	r0, r4
   18130:	mov	r1, #1
   18134:	bl	10e9c <fcntl64@plt>
   18138:	cmp	r0, #0
   1813c:	blt	18158 <__assert_fail@plt+0x71e4>
   18140:	orr	r2, r0, #1
   18144:	mov	r0, r4
   18148:	mov	r1, #2
   1814c:	bl	10e9c <fcntl64@plt>
   18150:	cmn	r0, #1
   18154:	bne	180d8 <__assert_fail@plt+0x7164>
   18158:	bl	10e78 <__errno_location@plt>
   1815c:	ldr	r6, [r0]
   18160:	mov	r5, r0
   18164:	mov	r0, r4
   18168:	bl	10f44 <close@plt>
   1816c:	str	r6, [r5]
   18170:	mvn	r4, #0
   18174:	b	180d8 <__assert_fail@plt+0x7164>
   18178:	sub	sp, sp, #8
   1817c:	push	{fp, lr}
   18180:	mov	fp, sp
   18184:	sub	sp, sp, #8
   18188:	str	r2, [fp, #8]
   1818c:	mov	r2, #0
   18190:	tst	r1, #64	; 0x40
   18194:	str	r3, [fp, #12]
   18198:	addne	r2, fp, #8
   1819c:	orrne	r2, r2, #4
   181a0:	strne	r2, [sp, #4]
   181a4:	ldrne	r2, [fp, #8]
   181a8:	bl	10df4 <open64@plt>
   181ac:	bl	17d88 <__assert_fail@plt+0x6e14>
   181b0:	mov	sp, fp
   181b4:	pop	{fp, lr}
   181b8:	add	sp, sp, #8
   181bc:	bx	lr
   181c0:	mov	r1, #0
   181c4:	mov	r2, #3
   181c8:	b	17f98 <__assert_fail@plt+0x7024>
   181cc:	cmp	r3, #0
   181d0:	cmpeq	r2, #0
   181d4:	bne	181f8 <__assert_fail@plt+0x7284>
   181d8:	cmp	r1, #0
   181dc:	movlt	r1, #-2147483648	; 0x80000000
   181e0:	movlt	r0, #0
   181e4:	blt	181f4 <__assert_fail@plt+0x7280>
   181e8:	cmpeq	r0, #0
   181ec:	mvnne	r1, #-2147483648	; 0x80000000
   181f0:	mvnne	r0, #0
   181f4:	b	182dc <__assert_fail@plt+0x7368>
   181f8:	sub	sp, sp, #8
   181fc:	push	{sp, lr}
   18200:	cmp	r1, #0
   18204:	blt	18224 <__assert_fail@plt+0x72b0>
   18208:	cmp	r3, #0
   1820c:	blt	18258 <__assert_fail@plt+0x72e4>
   18210:	bl	182ec <__assert_fail@plt+0x7378>
   18214:	ldr	lr, [sp, #4]
   18218:	add	sp, sp, #8
   1821c:	pop	{r2, r3}
   18220:	bx	lr
   18224:	rsbs	r0, r0, #0
   18228:	sbc	r1, r1, r1, lsl #1
   1822c:	cmp	r3, #0
   18230:	blt	1827c <__assert_fail@plt+0x7308>
   18234:	bl	182ec <__assert_fail@plt+0x7378>
   18238:	ldr	lr, [sp, #4]
   1823c:	add	sp, sp, #8
   18240:	pop	{r2, r3}
   18244:	rsbs	r0, r0, #0
   18248:	sbc	r1, r1, r1, lsl #1
   1824c:	rsbs	r2, r2, #0
   18250:	sbc	r3, r3, r3, lsl #1
   18254:	bx	lr
   18258:	rsbs	r2, r2, #0
   1825c:	sbc	r3, r3, r3, lsl #1
   18260:	bl	182ec <__assert_fail@plt+0x7378>
   18264:	ldr	lr, [sp, #4]
   18268:	add	sp, sp, #8
   1826c:	pop	{r2, r3}
   18270:	rsbs	r0, r0, #0
   18274:	sbc	r1, r1, r1, lsl #1
   18278:	bx	lr
   1827c:	rsbs	r2, r2, #0
   18280:	sbc	r3, r3, r3, lsl #1
   18284:	bl	182ec <__assert_fail@plt+0x7378>
   18288:	ldr	lr, [sp, #4]
   1828c:	add	sp, sp, #8
   18290:	pop	{r2, r3}
   18294:	rsbs	r2, r2, #0
   18298:	sbc	r3, r3, r3, lsl #1
   1829c:	bx	lr
   182a0:	cmp	r3, #0
   182a4:	cmpeq	r2, #0
   182a8:	bne	182c0 <__assert_fail@plt+0x734c>
   182ac:	cmp	r1, #0
   182b0:	cmpeq	r0, #0
   182b4:	mvnne	r1, #0
   182b8:	mvnne	r0, #0
   182bc:	b	182dc <__assert_fail@plt+0x7368>
   182c0:	sub	sp, sp, #8
   182c4:	push	{sp, lr}
   182c8:	bl	182ec <__assert_fail@plt+0x7378>
   182cc:	ldr	lr, [sp, #4]
   182d0:	add	sp, sp, #8
   182d4:	pop	{r2, r3}
   182d8:	bx	lr
   182dc:	push	{r1, lr}
   182e0:	mov	r0, #8
   182e4:	bl	10d10 <raise@plt>
   182e8:	pop	{r1, pc}
   182ec:	cmp	r1, r3
   182f0:	cmpeq	r0, r2
   182f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182f8:	mov	r4, r0
   182fc:	movcc	r0, #0
   18300:	mov	r5, r1
   18304:	ldr	lr, [sp, #36]	; 0x24
   18308:	movcc	r1, r0
   1830c:	bcc	18408 <__assert_fail@plt+0x7494>
   18310:	cmp	r3, #0
   18314:	clzeq	ip, r2
   18318:	clzne	ip, r3
   1831c:	addeq	ip, ip, #32
   18320:	cmp	r5, #0
   18324:	clzeq	r1, r4
   18328:	addeq	r1, r1, #32
   1832c:	clzne	r1, r5
   18330:	sub	ip, ip, r1
   18334:	sub	sl, ip, #32
   18338:	lsl	r9, r3, ip
   1833c:	rsb	fp, ip, #32
   18340:	orr	r9, r9, r2, lsl sl
   18344:	orr	r9, r9, r2, lsr fp
   18348:	lsl	r8, r2, ip
   1834c:	cmp	r5, r9
   18350:	cmpeq	r4, r8
   18354:	movcc	r0, #0
   18358:	movcc	r1, r0
   1835c:	bcc	18378 <__assert_fail@plt+0x7404>
   18360:	mov	r0, #1
   18364:	subs	r4, r4, r8
   18368:	lsl	r1, r0, sl
   1836c:	orr	r1, r1, r0, lsr fp
   18370:	lsl	r0, r0, ip
   18374:	sbc	r5, r5, r9
   18378:	cmp	ip, #0
   1837c:	beq	18408 <__assert_fail@plt+0x7494>
   18380:	lsr	r6, r8, #1
   18384:	orr	r6, r6, r9, lsl #31
   18388:	lsr	r7, r9, #1
   1838c:	mov	r2, ip
   18390:	b	183b4 <__assert_fail@plt+0x7440>
   18394:	subs	r3, r4, r6
   18398:	sbc	r8, r5, r7
   1839c:	adds	r3, r3, r3
   183a0:	adc	r8, r8, r8
   183a4:	adds	r4, r3, #1
   183a8:	adc	r5, r8, #0
   183ac:	subs	r2, r2, #1
   183b0:	beq	183d0 <__assert_fail@plt+0x745c>
   183b4:	cmp	r5, r7
   183b8:	cmpeq	r4, r6
   183bc:	bcs	18394 <__assert_fail@plt+0x7420>
   183c0:	adds	r4, r4, r4
   183c4:	adc	r5, r5, r5
   183c8:	subs	r2, r2, #1
   183cc:	bne	183b4 <__assert_fail@plt+0x7440>
   183d0:	lsr	r3, r4, ip
   183d4:	orr	r3, r3, r5, lsl fp
   183d8:	lsr	r2, r5, ip
   183dc:	orr	r3, r3, r5, lsr sl
   183e0:	adds	r0, r0, r4
   183e4:	mov	r4, r3
   183e8:	lsl	r3, r2, ip
   183ec:	orr	r3, r3, r4, lsl sl
   183f0:	lsl	ip, r4, ip
   183f4:	orr	r3, r3, r4, lsr fp
   183f8:	adc	r1, r1, r5
   183fc:	subs	r0, r0, ip
   18400:	mov	r5, r2
   18404:	sbc	r1, r1, r3
   18408:	cmp	lr, #0
   1840c:	strdne	r4, [lr]
   18410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18418:	mov	r7, r0
   1841c:	ldr	r6, [pc, #72]	; 1846c <__assert_fail@plt+0x74f8>
   18420:	ldr	r5, [pc, #72]	; 18470 <__assert_fail@plt+0x74fc>
   18424:	add	r6, pc, r6
   18428:	add	r5, pc, r5
   1842c:	sub	r6, r6, r5
   18430:	mov	r8, r1
   18434:	mov	r9, r2
   18438:	bl	10cd8 <fstatfs64@plt-0x20>
   1843c:	asrs	r6, r6, #2
   18440:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18444:	mov	r4, #0
   18448:	add	r4, r4, #1
   1844c:	ldr	r3, [r5], #4
   18450:	mov	r2, r9
   18454:	mov	r1, r8
   18458:	mov	r0, r7
   1845c:	blx	r3
   18460:	cmp	r6, r4
   18464:	bne	18448 <__assert_fail@plt+0x74d4>
   18468:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1846c:	andeq	r0, r1, r0, ror #21
   18470:	ldrdeq	r0, [r1], -r8
   18474:	bx	lr

Disassembly of section .fini:

00018478 <.fini>:
   18478:	push	{r3, lr}
   1847c:	pop	{r3, pc}
