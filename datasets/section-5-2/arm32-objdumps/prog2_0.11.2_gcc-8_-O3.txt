
../repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

00010660 <.init>:
   10660:	push	{r3, lr}
   10664:	bl	1089c <_start@@Base+0x3c>
   10668:	pop	{r3, pc}

Disassembly of section .plt:

0001066c <strcmp@plt-0x14>:
   1066c:	push	{lr}		; (str lr, [sp, #-4]!)
   10670:	ldr	lr, [pc, #4]	; 1067c <strcmp@plt-0x4>
   10674:	add	lr, pc, lr
   10678:	ldr	pc, [lr, #8]!
   1067c:	andeq	r0, r1, r4, lsl #19

00010680 <strcmp@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2436]!	; 0x984

0001068c <stpcpy@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2428]!	; 0x97c

00010698 <strcat@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2420]!	; 0x974

000106a4 <puts@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2412]!	; 0x96c

000106b0 <__libc_start_main@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2404]!	; 0x964

000106bc <__gmon_start__@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2396]!	; 0x95c

000106c8 <strlen@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2388]!	; 0x954

000106d4 <__isoc99_scanf@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2380]!	; 0x94c

000106e0 <abort@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2372]!	; 0x944

Disassembly of section .text:

000106ec <main@@Base>:
   106ec:	mov	r3, #0
   106f0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   106f4:	strd	r6, [sp, #8]
   106f8:	movw	r6, #2796	; 0xaec
   106fc:	movt	r6, #1
   10700:	movw	r7, #2800	; 0xaf0
   10704:	movt	r7, #1
   10708:	strd	r8, [sp, #16]
   1070c:	str	lr, [sp, #24]
   10710:	sub	sp, sp, #108	; 0x6c
   10714:	str	r3, [sp, #20]
   10718:	str	r3, [sp, #24]
   1071c:	str	r3, [sp, #28]
   10720:	str	r3, [sp, #32]
   10724:	str	r3, [sp, #36]	; 0x24
   10728:	str	r3, [sp, #40]	; 0x28
   1072c:	strh	r3, [sp, #44]	; 0x2c
   10730:	add	r1, sp, #8
   10734:	mov	r0, r6
   10738:	bl	106d4 <__isoc99_scanf@plt>
   1073c:	ldrb	r3, [sp, #8]
   10740:	cmp	r3, #46	; 0x2e
   10744:	beq	10844 <main@@Base+0x158>
   10748:	add	r1, sp, #4
   1074c:	mov	r0, r7
   10750:	bl	106d4 <__isoc99_scanf@plt>
   10754:	ldr	r8, [sp, #4]
   10758:	mov	r5, #0
   1075c:	add	r4, sp, #20
   10760:	strb	r5, [sp, #20]
   10764:	cmp	r8, r5
   10768:	ble	10784 <main@@Base+0x98>
   1076c:	add	r5, r5, #1
   10770:	add	r1, sp, #8
   10774:	mov	r0, r4
   10778:	bl	10698 <strcat@plt>
   1077c:	cmp	r8, r5
   10780:	bne	1076c <main@@Base+0x80>
   10784:	mov	r0, r4
   10788:	bl	106c8 <strlen@plt>
   1078c:	add	r3, sp, #104	; 0x68
   10790:	add	r2, sp, #49	; 0x31
   10794:	add	r3, r3, r0
   10798:	mov	r1, r4
   1079c:	ldrb	ip, [r3, #-85]	; 0xffffffab
   107a0:	mov	r3, #1
   107a4:	strb	ip, [sp, #48]	; 0x30
   107a8:	b	107b4 <main@@Base+0xc8>
   107ac:	ldrb	ip, [r1], #1
   107b0:	strb	ip, [r2], #1
   107b4:	cmp	r3, r0
   107b8:	add	r3, r3, #1
   107bc:	bcc	107ac <main@@Base+0xc0>
   107c0:	mov	r3, #0
   107c4:	add	r5, sp, #76	; 0x4c
   107c8:	mov	r8, r3
   107cc:	strb	r3, [r2]
   107d0:	add	r1, sp, #48	; 0x30
   107d4:	mov	r0, r4
   107d8:	bl	10680 <strcmp@plt>
   107dc:	mov	r9, r0
   107e0:	mov	r0, r4
   107e4:	bl	106a4 <puts@plt>
   107e8:	mov	r1, r4
   107ec:	mov	r0, r5
   107f0:	bl	1068c <stpcpy@plt>
   107f4:	ldrb	lr, [sp, #76]	; 0x4c
   107f8:	add	r3, sp, #104	; 0x68
   107fc:	sub	r0, r0, r5
   10800:	add	ip, r3, r0
   10804:	mov	r1, r5
   10808:	mov	r2, r4
   1080c:	mov	r3, #1
   10810:	strb	lr, [ip, #-85]	; 0xffffffab
   10814:	b	10824 <main@@Base+0x138>
   10818:	ldrb	ip, [r1, #1]!
   1081c:	add	r3, r3, #1
   10820:	strb	ip, [r2], #1
   10824:	cmp	r0, r3
   10828:	bhi	10818 <main@@Base+0x12c>
   1082c:	add	r2, sp, #104	; 0x68
   10830:	cmp	r9, #0
   10834:	add	r3, r2, r3
   10838:	strb	r8, [r3, #-84]	; 0xffffffac
   1083c:	bne	107d0 <main@@Base+0xe4>
   10840:	b	10730 <main@@Base+0x44>
   10844:	mov	r0, #0
   10848:	add	sp, sp, #108	; 0x6c
   1084c:	ldrd	r4, [sp]
   10850:	ldrd	r6, [sp, #8]
   10854:	ldrd	r8, [sp, #16]
   10858:	add	sp, sp, #24
   1085c:	pop	{pc}		; (ldr pc, [sp], #4)

00010860 <_start@@Base>:
   10860:	mov	fp, #0
   10864:	mov	lr, #0
   10868:	pop	{r1}		; (ldr r1, [sp], #4)
   1086c:	mov	r2, sp
   10870:	push	{r2}		; (str r2, [sp, #-4]!)
   10874:	push	{r0}		; (str r0, [sp, #-4]!)
   10878:	ldr	ip, [pc, #16]	; 10890 <_start@@Base+0x30>
   1087c:	push	{ip}		; (str ip, [sp, #-4]!)
   10880:	ldr	r0, [pc, #12]	; 10894 <_start@@Base+0x34>
   10884:	ldr	r3, [pc, #12]	; 10898 <_start@@Base+0x38>
   10888:	bl	106b0 <__libc_start_main@plt>
   1088c:	bl	106e0 <abort@plt>
   10890:	ldrdeq	r0, [r1], -ip
   10894:	andeq	r0, r1, ip, ror #13
   10898:	andeq	r0, r1, ip, ror sl
   1089c:	ldr	r3, [pc, #20]	; 108b8 <_start@@Base+0x58>
   108a0:	ldr	r2, [pc, #20]	; 108bc <_start@@Base+0x5c>
   108a4:	add	r3, pc, r3
   108a8:	ldr	r2, [r3, r2]
   108ac:	cmp	r2, #0
   108b0:	bxeq	lr
   108b4:	b	106bc <__gmon_start__@plt>
   108b8:	andeq	r0, r1, r4, asr r7
   108bc:	andeq	r0, r0, r0, lsr r0
   108c0:	ldr	r0, [pc, #24]	; 108e0 <_start@@Base+0x80>
   108c4:	ldr	r3, [pc, #24]	; 108e4 <_start@@Base+0x84>
   108c8:	cmp	r3, r0
   108cc:	bxeq	lr
   108d0:	ldr	r3, [pc, #16]	; 108e8 <_start@@Base+0x88>
   108d4:	cmp	r3, #0
   108d8:	bxeq	lr
   108dc:	bx	r3
   108e0:	andeq	r1, r2, ip, lsr r0
   108e4:	andeq	r1, r2, ip, lsr r0
   108e8:	andeq	r0, r0, r0
   108ec:	ldr	r0, [pc, #36]	; 10918 <_start@@Base+0xb8>
   108f0:	ldr	r1, [pc, #36]	; 1091c <_start@@Base+0xbc>
   108f4:	sub	r1, r1, r0
   108f8:	asr	r1, r1, #2
   108fc:	add	r1, r1, r1, lsr #31
   10900:	asrs	r1, r1, #1
   10904:	bxeq	lr
   10908:	ldr	r3, [pc, #16]	; 10920 <_start@@Base+0xc0>
   1090c:	cmp	r3, #0
   10910:	bxeq	lr
   10914:	bx	r3
   10918:	andeq	r1, r2, ip, lsr r0
   1091c:	andeq	r1, r2, ip, lsr r0
   10920:	andeq	r0, r0, r0
   10924:	push	{r4, lr}
   10928:	ldr	r4, [pc, #24]	; 10948 <_start@@Base+0xe8>
   1092c:	ldrb	r3, [r4]
   10930:	cmp	r3, #0
   10934:	popne	{r4, pc}
   10938:	bl	108c0 <_start@@Base+0x60>
   1093c:	mov	r3, #1
   10940:	strb	r3, [r4]
   10944:	pop	{r4, pc}
   10948:	andeq	r1, r2, ip, lsr r0
   1094c:	b	108ec <_start@@Base+0x8c>

00010950 <R_ShiftString@@Base>:
   10950:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10954:	mov	r5, r1
   10958:	strd	r6, [sp, #8]
   1095c:	mov	r6, r0
   10960:	str	r8, [sp, #16]
   10964:	sub	r4, r6, #1
   10968:	rsb	r7, r6, #2
   1096c:	str	lr, [sp, #20]
   10970:	bl	106c8 <strlen@plt>
   10974:	add	r0, r6, r0
   10978:	ldrb	r3, [r0, #-1]
   1097c:	strb	r3, [r5], #1
   10980:	b	1098c <R_ShiftString@@Base+0x3c>
   10984:	ldrb	r3, [r4, #1]!
   10988:	strb	r3, [r5], #1
   1098c:	mov	r0, r6
   10990:	bl	106c8 <strlen@plt>
   10994:	add	r3, r7, r4
   10998:	cmp	r0, r3
   1099c:	bhi	10984 <R_ShiftString@@Base+0x34>
   109a0:	mov	r3, #0
   109a4:	strb	r3, [r5]
   109a8:	ldrd	r4, [sp]
   109ac:	ldrd	r6, [sp, #8]
   109b0:	ldr	r8, [sp, #16]
   109b4:	add	sp, sp, #20
   109b8:	pop	{pc}		; (ldr pc, [sp], #4)

000109bc <L_ShiftString@@Base>:
   109bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   109c0:	mov	r4, #1
   109c4:	strd	r6, [sp, #8]
   109c8:	mov	r7, r0
   109cc:	str	r8, [sp, #16]
   109d0:	mov	r8, r1
   109d4:	mov	r6, r7
   109d8:	str	lr, [sp, #20]
   109dc:	sub	r5, r8, #1
   109e0:	bl	106c8 <strlen@plt>
   109e4:	ldrb	r3, [r7]
   109e8:	add	r0, r8, r0
   109ec:	strb	r3, [r0, #-1]
   109f0:	b	10a00 <L_ShiftString@@Base+0x44>
   109f4:	ldrb	r3, [r6, #1]!
   109f8:	add	r4, r4, #1
   109fc:	strb	r3, [r5, #1]!
   10a00:	mov	r0, r7
   10a04:	bl	106c8 <strlen@plt>
   10a08:	cmp	r0, r4
   10a0c:	bhi	109f4 <L_ShiftString@@Base+0x38>
   10a10:	mov	r3, #0
   10a14:	strb	r3, [r8, r4]
   10a18:	ldrd	r4, [sp]
   10a1c:	ldrd	r6, [sp, #8]
   10a20:	ldr	r8, [sp, #16]
   10a24:	add	sp, sp, #20
   10a28:	pop	{pc}		; (ldr pc, [sp], #4)

00010a2c <StringSet@@Base>:
   10a2c:	strd	r4, [sp, #-16]!
   10a30:	mov	r4, #0
   10a34:	subs	r5, r2, #0
   10a38:	str	r6, [sp, #8]
   10a3c:	str	lr, [sp, #12]
   10a40:	strb	r4, [r1]
   10a44:	ble	10a6c <StringSet@@Base+0x40>
   10a48:	mov	r6, r0
   10a4c:	mov	r3, r1
   10a50:	mov	r0, r3
   10a54:	add	r4, r4, #1
   10a58:	mov	r1, r6
   10a5c:	bl	10698 <strcat@plt>
   10a60:	cmp	r5, r4
   10a64:	mov	r3, r0
   10a68:	bne	10a50 <StringSet@@Base+0x24>
   10a6c:	ldrd	r4, [sp]
   10a70:	ldr	r6, [sp, #8]
   10a74:	add	sp, sp, #12
   10a78:	pop	{pc}		; (ldr pc, [sp], #4)

00010a7c <__libc_csu_init@@Base>:
   10a7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a80:	mov	r7, r0
   10a84:	ldr	r6, [pc, #72]	; 10ad4 <__libc_csu_init@@Base+0x58>
   10a88:	ldr	r5, [pc, #72]	; 10ad8 <__libc_csu_init@@Base+0x5c>
   10a8c:	add	r6, pc, r6
   10a90:	add	r5, pc, r5
   10a94:	sub	r6, r6, r5
   10a98:	mov	r8, r1
   10a9c:	mov	r9, r2
   10aa0:	bl	10660 <strcmp@plt-0x20>
   10aa4:	asrs	r6, r6, #2
   10aa8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aac:	mov	r4, #0
   10ab0:	add	r4, r4, #1
   10ab4:	ldr	r3, [r5], #4
   10ab8:	mov	r2, r9
   10abc:	mov	r1, r8
   10ac0:	mov	r0, r7
   10ac4:	blx	r3
   10ac8:	cmp	r6, r4
   10acc:	bne	10ab0 <__libc_csu_init@@Base+0x34>
   10ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ad4:	andeq	r0, r1, r0, lsl #9
   10ad8:	andeq	r0, r1, r8, ror r4

00010adc <__libc_csu_fini@@Base>:
   10adc:	bx	lr

Disassembly of section .fini:

00010ae0 <.fini>:
   10ae0:	push	{r3, lr}
   10ae4:	pop	{r3, pc}
