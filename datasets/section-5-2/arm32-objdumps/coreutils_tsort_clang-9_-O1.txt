
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010d90 <.init>:
   10d90:	push	{r3, lr}
   10d94:	bl	11044 <__assert_fail@plt+0x48>
   10d98:	pop	{r3, pc}

Disassembly of section .plt:

00010d9c <calloc@plt-0x14>:
   10d9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10da0:	ldr	lr, [pc, #4]	; 10dac <calloc@plt-0x4>
   10da4:	add	lr, pc, lr
   10da8:	ldr	pc, [lr, #8]!
   10dac:	andeq	r5, r1, r4, asr r2

00010db0 <calloc@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #596]!	; 0x254

00010dbc <fputs_unlocked@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #588]!	; 0x24c

00010dc8 <strcmp@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #580]!	; 0x244

00010dd4 <posix_fadvise64@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #572]!	; 0x23c

00010de0 <fflush@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #564]!	; 0x234

00010dec <free@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #556]!	; 0x22c

00010df8 <_exit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #548]!	; 0x224

00010e04 <memcpy@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #540]!	; 0x21c

00010e10 <mbsinit@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #532]!	; 0x214

00010e1c <getc_unlocked@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #524]!	; 0x20c

00010e28 <dcgettext@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #516]!	; 0x204

00010e34 <dup2@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e40 <realloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #500]!	; 0x1f4

00010e4c <textdomain@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #492]!	; 0x1ec

00010e58 <iswprint@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #484]!	; 0x1e4

00010e64 <fwrite@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #476]!	; 0x1dc

00010e70 <lseek64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #468]!	; 0x1d4

00010e7c <__ctype_get_mb_cur_max@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #460]!	; 0x1cc

00010e88 <__fpending@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #452]!	; 0x1c4

00010e94 <ferror_unlocked@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #444]!	; 0x1bc

00010ea0 <mbrtowc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #436]!	; 0x1b4

00010eac <error@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #428]!	; 0x1ac

00010eb8 <open64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #420]!	; 0x1a4

00010ec4 <puts@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #412]!	; 0x19c

00010ed0 <malloc@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #404]!	; 0x194

00010edc <__libc_start_main@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #396]!	; 0x18c

00010ee8 <__freading@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #388]!	; 0x184

00010ef4 <__gmon_start__@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #380]!	; 0x17c

00010f00 <freopen64@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #372]!	; 0x174

00010f0c <getopt_long@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #364]!	; 0x16c

00010f18 <__ctype_b_loc@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #356]!	; 0x164

00010f24 <exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #348]!	; 0x15c

00010f30 <bcmp@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #340]!	; 0x154

00010f3c <strlen@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #332]!	; 0x14c

00010f48 <__errno_location@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #324]!	; 0x144

00010f54 <__cxa_atexit@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #316]!	; 0x13c

00010f60 <memset@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #308]!	; 0x134

00010f6c <__printf_chk@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #300]!	; 0x12c

00010f78 <fileno@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #292]!	; 0x124

00010f84 <__fprintf_chk@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #284]!	; 0x11c

00010f90 <fclose@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #276]!	; 0x114

00010f9c <fseeko64@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #268]!	; 0x10c

00010fa8 <setlocale@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #260]!	; 0x104

00010fb4 <strrchr@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #252]!	; 0xfc

00010fc0 <nl_langinfo@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #244]!	; 0xf4

00010fcc <bindtextdomain@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #236]!	; 0xec

00010fd8 <strncmp@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #228]!	; 0xe4

00010fe4 <abort@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #220]!	; 0xdc

00010ff0 <close@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #212]!	; 0xd4

00010ffc <__assert_fail@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #204]!	; 0xcc

Disassembly of section .text:

00011008 <.text>:
   11008:	mov	fp, #0
   1100c:	mov	lr, #0
   11010:	pop	{r1}		; (ldr r1, [sp], #4)
   11014:	mov	r2, sp
   11018:	push	{r2}		; (str r2, [sp, #-4]!)
   1101c:	push	{r0}		; (str r0, [sp, #-4]!)
   11020:	ldr	ip, [pc, #16]	; 11038 <__assert_fail@plt+0x3c>
   11024:	push	{ip}		; (str ip, [sp, #-4]!)
   11028:	ldr	r0, [pc, #12]	; 1103c <__assert_fail@plt+0x40>
   1102c:	ldr	r3, [pc, #12]	; 11040 <__assert_fail@plt+0x44>
   11030:	bl	10edc <__libc_start_main@plt>
   11034:	bl	10fe4 <abort@plt>
   11038:	andeq	r5, r1, r4, ror r2
   1103c:	andeq	r1, r1, r0, lsr #7
   11040:	andeq	r5, r1, r4, lsl r2
   11044:	ldr	r3, [pc, #20]	; 11060 <__assert_fail@plt+0x64>
   11048:	ldr	r2, [pc, #20]	; 11064 <__assert_fail@plt+0x68>
   1104c:	add	r3, pc, r3
   11050:	ldr	r2, [r3, r2]
   11054:	cmp	r2, #0
   11058:	bxeq	lr
   1105c:	b	10ef4 <__gmon_start__@plt>
   11060:	andeq	r4, r1, ip, lsr #31
   11064:	ldrdeq	r0, [r0], -r4
   11068:	ldr	r0, [pc, #24]	; 11088 <__assert_fail@plt+0x8c>
   1106c:	ldr	r3, [pc, #24]	; 1108c <__assert_fail@plt+0x90>
   11070:	cmp	r3, r0
   11074:	bxeq	lr
   11078:	ldr	r3, [pc, #16]	; 11090 <__assert_fail@plt+0x94>
   1107c:	cmp	r3, #0
   11080:	bxeq	lr
   11084:	bx	r3
   11088:	andeq	r6, r2, r8, lsr #2
   1108c:	andeq	r6, r2, r8, lsr #2
   11090:	andeq	r0, r0, r0
   11094:	ldr	r0, [pc, #36]	; 110c0 <__assert_fail@plt+0xc4>
   11098:	ldr	r1, [pc, #36]	; 110c4 <__assert_fail@plt+0xc8>
   1109c:	sub	r1, r1, r0
   110a0:	asr	r1, r1, #2
   110a4:	add	r1, r1, r1, lsr #31
   110a8:	asrs	r1, r1, #1
   110ac:	bxeq	lr
   110b0:	ldr	r3, [pc, #16]	; 110c8 <__assert_fail@plt+0xcc>
   110b4:	cmp	r3, #0
   110b8:	bxeq	lr
   110bc:	bx	r3
   110c0:	andeq	r6, r2, r8, lsr #2
   110c4:	andeq	r6, r2, r8, lsr #2
   110c8:	andeq	r0, r0, r0
   110cc:	push	{r4, lr}
   110d0:	ldr	r4, [pc, #24]	; 110f0 <__assert_fail@plt+0xf4>
   110d4:	ldrb	r3, [r4]
   110d8:	cmp	r3, #0
   110dc:	popne	{r4, pc}
   110e0:	bl	11068 <__assert_fail@plt+0x6c>
   110e4:	mov	r3, #1
   110e8:	strb	r3, [r4]
   110ec:	pop	{r4, pc}
   110f0:	andeq	r6, r2, ip, asr #2
   110f4:	b	11094 <__assert_fail@plt+0x98>
   110f8:	push	{fp, lr}
   110fc:	mov	fp, sp
   11100:	mov	r4, r0
   11104:	cmp	r0, #0
   11108:	bne	111a4 <__assert_fail@plt+0x1a8>
   1110c:	movw	r1, #21187	; 0x52c3
   11110:	movt	r1, #1
   11114:	mov	r0, #0
   11118:	mov	r2, #5
   1111c:	bl	10e28 <dcgettext@plt>
   11120:	mov	r1, r0
   11124:	movw	r0, #24936	; 0x6168
   11128:	movt	r0, #2
   1112c:	ldr	r2, [r0]
   11130:	mov	r0, #1
   11134:	bl	10f6c <__printf_chk@plt>
   11138:	bl	111e8 <__assert_fail@plt+0x1ec>
   1113c:	movw	r1, #21830	; 0x5546
   11140:	movt	r1, #1
   11144:	mov	r0, #0
   11148:	mov	r2, #5
   1114c:	bl	10e28 <dcgettext@plt>
   11150:	movw	r5, #24900	; 0x6144
   11154:	movt	r5, #2
   11158:	ldr	r1, [r5]
   1115c:	bl	10dbc <fputs_unlocked@plt>
   11160:	movw	r1, #21287	; 0x5327
   11164:	movt	r1, #1
   11168:	mov	r0, #0
   1116c:	mov	r2, #5
   11170:	bl	10e28 <dcgettext@plt>
   11174:	ldr	r1, [r5]
   11178:	bl	10dbc <fputs_unlocked@plt>
   1117c:	movw	r1, #21332	; 0x5354
   11180:	movt	r1, #1
   11184:	mov	r0, #0
   11188:	mov	r2, #5
   1118c:	bl	10e28 <dcgettext@plt>
   11190:	ldr	r1, [r5]
   11194:	bl	10dbc <fputs_unlocked@plt>
   11198:	bl	11218 <__assert_fail@plt+0x21c>
   1119c:	mov	r0, r4
   111a0:	bl	10f24 <exit@plt>
   111a4:	movw	r0, #24888	; 0x6138
   111a8:	movt	r0, #2
   111ac:	ldr	r5, [r0]
   111b0:	movw	r1, #21148	; 0x529c
   111b4:	movt	r1, #1
   111b8:	mov	r0, #0
   111bc:	mov	r2, #5
   111c0:	bl	10e28 <dcgettext@plt>
   111c4:	mov	r2, r0
   111c8:	movw	r0, #24936	; 0x6168
   111cc:	movt	r0, #2
   111d0:	ldr	r3, [r0]
   111d4:	mov	r0, r5
   111d8:	mov	r1, #1
   111dc:	bl	10f84 <__fprintf_chk@plt>
   111e0:	mov	r0, r4
   111e4:	bl	10f24 <exit@plt>
   111e8:	push	{fp, lr}
   111ec:	mov	fp, sp
   111f0:	movw	r1, #21461	; 0x53d5
   111f4:	movt	r1, #1
   111f8:	mov	r0, #0
   111fc:	mov	r2, #5
   11200:	bl	10e28 <dcgettext@plt>
   11204:	movw	r1, #24900	; 0x6144
   11208:	movt	r1, #2
   1120c:	ldr	r1, [r1]
   11210:	pop	{fp, lr}
   11214:	b	10dbc <fputs_unlocked@plt>
   11218:	push	{r4, r5, r6, sl, fp, lr}
   1121c:	add	fp, sp, #16
   11220:	sub	sp, sp, #56	; 0x38
   11224:	movw	r0, #22128	; 0x5670
   11228:	movt	r0, #1
   1122c:	add	r1, r0, #32
   11230:	mov	r2, #48	; 0x30
   11234:	vld1.64	{d16-d17}, [r1]
   11238:	mov	r6, sp
   1123c:	add	r1, r6, #32
   11240:	add	r3, r0, #16
   11244:	vld1.64	{d18-d19}, [r0], r2
   11248:	vld1.64	{d20-d21}, [r3]
   1124c:	vldr	d22, [r0]
   11250:	vst1.64	{d16-d17}, [r1]
   11254:	add	r0, r6, #16
   11258:	vst1.64	{d20-d21}, [r0]
   1125c:	mov	r0, r6
   11260:	vst1.64	{d18-d19}, [r0], r2
   11264:	vstr	d22, [r0]
   11268:	ldr	r1, [sp]
   1126c:	cmp	r1, #0
   11270:	movw	r4, #21386	; 0x538a
   11274:	movt	r4, #1
   11278:	beq	112a0 <__assert_fail@plt+0x2a4>
   1127c:	mov	r6, sp
   11280:	movw	r5, #21386	; 0x538a
   11284:	movt	r5, #1
   11288:	mov	r0, r5
   1128c:	bl	10dc8 <strcmp@plt>
   11290:	cmp	r0, #0
   11294:	ldrne	r1, [r6, #8]!
   11298:	cmpne	r1, #0
   1129c:	bne	11288 <__assert_fail@plt+0x28c>
   112a0:	ldr	r5, [r6, #4]
   112a4:	movw	r1, #21612	; 0x546c
   112a8:	movt	r1, #1
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	bl	10e28 <dcgettext@plt>
   112b8:	mov	r1, r0
   112bc:	movw	r2, #21416	; 0x53a8
   112c0:	movt	r2, #1
   112c4:	movw	r3, #21635	; 0x5483
   112c8:	movt	r3, #1
   112cc:	mov	r0, #1
   112d0:	bl	10f6c <__printf_chk@plt>
   112d4:	cmp	r5, #0
   112d8:	moveq	r5, r4
   112dc:	mov	r0, #5
   112e0:	mov	r1, #0
   112e4:	bl	10fa8 <setlocale@plt>
   112e8:	cmp	r0, #0
   112ec:	beq	1132c <__assert_fail@plt+0x330>
   112f0:	movw	r1, #21675	; 0x54ab
   112f4:	movt	r1, #1
   112f8:	mov	r2, #3
   112fc:	bl	10fd8 <strncmp@plt>
   11300:	cmp	r0, #0
   11304:	beq	1132c <__assert_fail@plt+0x330>
   11308:	movw	r1, #21679	; 0x54af
   1130c:	movt	r1, #1
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	bl	10e28 <dcgettext@plt>
   1131c:	movw	r1, #24900	; 0x6144
   11320:	movt	r1, #2
   11324:	ldr	r1, [r1]
   11328:	bl	10dbc <fputs_unlocked@plt>
   1132c:	movw	r1, #21750	; 0x54f6
   11330:	movt	r1, #1
   11334:	mov	r0, #0
   11338:	mov	r2, #5
   1133c:	bl	10e28 <dcgettext@plt>
   11340:	mov	r1, r0
   11344:	movw	r2, #21635	; 0x5483
   11348:	movt	r2, #1
   1134c:	mov	r0, #1
   11350:	mov	r3, r4
   11354:	bl	10f6c <__printf_chk@plt>
   11358:	movw	r0, #21545	; 0x5429
   1135c:	movt	r0, #1
   11360:	movw	r6, #21831	; 0x5547
   11364:	movt	r6, #1
   11368:	cmp	r5, r4
   1136c:	moveq	r6, r0
   11370:	movw	r1, #21777	; 0x5511
   11374:	movt	r1, #1
   11378:	mov	r0, #0
   1137c:	mov	r2, #5
   11380:	bl	10e28 <dcgettext@plt>
   11384:	mov	r1, r0
   11388:	mov	r0, #1
   1138c:	mov	r2, r5
   11390:	mov	r3, r6
   11394:	sub	sp, fp, #16
   11398:	pop	{r4, r5, r6, sl, fp, lr}
   1139c:	b	10f6c <__printf_chk@plt>
   113a0:	push	{fp, lr}
   113a4:	mov	fp, sp
   113a8:	sub	sp, sp, #24
   113ac:	mov	r4, r1
   113b0:	mov	r5, r0
   113b4:	ldr	r0, [r1]
   113b8:	bl	123e4 <__assert_fail@plt+0x13e8>
   113bc:	movw	r1, #21831	; 0x5547
   113c0:	movt	r1, #1
   113c4:	mov	r0, #6
   113c8:	bl	10fa8 <setlocale@plt>
   113cc:	movw	r6, #21420	; 0x53ac
   113d0:	movt	r6, #1
   113d4:	movw	r1, #21392	; 0x5390
   113d8:	movt	r1, #1
   113dc:	mov	r0, r6
   113e0:	bl	10fcc <bindtextdomain@plt>
   113e4:	mov	r0, r6
   113e8:	bl	10e4c <textdomain@plt>
   113ec:	movw	r0, #7616	; 0x1dc0
   113f0:	movt	r0, #1
   113f4:	bl	15278 <__assert_fail@plt+0x427c>
   113f8:	movw	r0, #24800	; 0x60e0
   113fc:	movt	r0, #2
   11400:	ldr	r0, [r0]
   11404:	mov	r1, #0
   11408:	movw	r2, #21430	; 0x53b6
   1140c:	movt	r2, #1
   11410:	movw	r3, #4344	; 0x10f8
   11414:	movt	r3, #1
   11418:	mov	r6, #1
   1141c:	stm	sp, {r0, r6}
   11420:	str	r3, [sp, #8]
   11424:	str	r2, [sp, #12]
   11428:	str	r1, [sp, #16]
   1142c:	movw	r2, #21386	; 0x538a
   11430:	movt	r2, #1
   11434:	movw	r3, #21416	; 0x53a8
   11438:	movt	r3, #1
   1143c:	mov	r0, r5
   11440:	mov	r1, r4
   11444:	bl	12320 <__assert_fail@plt+0x1324>
   11448:	movw	r6, #24880	; 0x6130
   1144c:	movt	r6, #2
   11450:	ldr	r0, [r6]
   11454:	sub	r1, r5, r0
   11458:	cmp	r1, #2
   1145c:	blt	114a4 <__assert_fail@plt+0x4a8>
   11460:	movw	r1, #21444	; 0x53c4
   11464:	movt	r1, #1
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	bl	10e28 <dcgettext@plt>
   11474:	mov	r5, r0
   11478:	ldr	r0, [r6]
   1147c:	add	r0, r4, r0, lsl #2
   11480:	ldr	r0, [r0, #4]
   11484:	bl	13bd8 <__assert_fail@plt+0x2bdc>
   11488:	mov	r3, r0
   1148c:	mov	r0, #0
   11490:	mov	r1, #0
   11494:	mov	r2, r5
   11498:	bl	10eac <error@plt>
   1149c:	mov	r0, #1
   114a0:	bl	110f8 <__assert_fail@plt+0xfc>
   114a4:	cmp	r0, r5
   114a8:	bne	114b8 <__assert_fail@plt+0x4bc>
   114ac:	movw	r0, #22358	; 0x5756
   114b0:	movt	r0, #1
   114b4:	bl	114c0 <__assert_fail@plt+0x4c4>
   114b8:	ldr	r0, [r4, r0, lsl #2]
   114bc:	bl	114c0 <__assert_fail@plt+0x4c4>
   114c0:	push	{fp, lr}
   114c4:	mov	fp, sp
   114c8:	sub	sp, sp, #24
   114cc:	mov	r9, r0
   114d0:	movw	r1, #22358	; 0x5756
   114d4:	movt	r1, #1
   114d8:	bl	10dc8 <strcmp@plt>
   114dc:	mov	r5, r0
   114e0:	mov	r7, #0
   114e4:	mov	r0, #0
   114e8:	bl	117ec <__assert_fail@plt+0x7f0>
   114ec:	mov	r6, r0
   114f0:	cmp	r5, #0
   114f4:	movw	r4, #24896	; 0x6140
   114f8:	movt	r4, #2
   114fc:	beq	1151c <__assert_fail@plt+0x520>
   11500:	ldr	r2, [r4]
   11504:	movw	r1, #22209	; 0x56c1
   11508:	movt	r1, #1
   1150c:	mov	r0, r9
   11510:	bl	11ff0 <__assert_fail@plt+0xff4>
   11514:	cmp	r0, #0
   11518:	beq	11754 <__assert_fail@plt+0x758>
   1151c:	ldr	r0, [r4]
   11520:	mov	r1, #2
   11524:	bl	11eac <__assert_fail@plt+0xeb0>
   11528:	sub	r8, fp, #8
   1152c:	mov	r0, r8
   11530:	bl	13ff0 <__assert_fail@plt+0x2ff4>
   11534:	movw	sl, #21828	; 0x5544
   11538:	movt	sl, #1
   1153c:	mov	r4, r7
   11540:	movw	r0, #24896	; 0x6140
   11544:	movt	r0, #2
   11548:	ldr	r0, [r0]
   1154c:	mov	r1, sl
   11550:	mov	r2, #3
   11554:	mov	r3, r8
   11558:	bl	14000 <__assert_fail@plt+0x3004>
   1155c:	cmn	r0, #1
   11560:	beq	11598 <__assert_fail@plt+0x59c>
   11564:	cmp	r0, #0
   11568:	beq	11784 <__assert_fail@plt+0x788>
   1156c:	ldr	r1, [fp, #-4]
   11570:	mov	r0, r6
   11574:	bl	11820 <__assert_fail@plt+0x824>
   11578:	mov	r7, r0
   1157c:	cmp	r4, #0
   11580:	beq	1153c <__assert_fail@plt+0x540>
   11584:	mov	r0, r4
   11588:	mov	r1, r7
   1158c:	bl	11b1c <__assert_fail@plt+0xb20>
   11590:	mov	r7, #0
   11594:	b	1153c <__assert_fail@plt+0x540>
   11598:	str	r5, [sp, #4]
   1159c:	cmp	r4, #0
   115a0:	bne	117a4 <__assert_fail@plt+0x7a8>
   115a4:	movw	r1, #7032	; 0x1b78
   115a8:	movt	r1, #1
   115ac:	mov	r0, r6
   115b0:	bl	11b68 <__assert_fail@plt+0xb6c>
   115b4:	movw	r8, #24912	; 0x6150
   115b8:	movt	r8, #2
   115bc:	ldr	r0, [r8]
   115c0:	cmp	r0, #0
   115c4:	beq	117e0 <__assert_fail@plt+0x7e4>
   115c8:	movw	sl, #24916	; 0x6154
   115cc:	movt	sl, #2
   115d0:	movw	r4, #7140	; 0x1be4
   115d4:	movt	r4, #1
   115d8:	movw	r5, #24924	; 0x615c
   115dc:	movt	r5, #2
   115e0:	movw	r7, #24920	; 0x6158
   115e4:	movt	r7, #2
   115e8:	mov	r0, #1
   115ec:	str	r0, [sp, #12]
   115f0:	str	r9, [sp, #8]
   115f4:	mov	r0, r6
   115f8:	movw	r1, #7060	; 0x1b94
   115fc:	movt	r1, #1
   11600:	bl	11b68 <__assert_fail@plt+0xb6c>
   11604:	ldr	r1, [sl]
   11608:	cmp	r1, #0
   1160c:	bne	11624 <__assert_fail@plt+0x628>
   11610:	b	11688 <__assert_fail@plt+0x68c>
   11614:	ldr	r1, [r0, #20]
   11618:	str	r1, [sl]
   1161c:	cmp	r1, #0
   11620:	beq	11688 <__assert_fail@plt+0x68c>
   11624:	ldr	r0, [r1]
   11628:	ldr	r9, [r1, #24]
   1162c:	bl	10ec4 <puts@plt>
   11630:	ldr	r0, [sl]
   11634:	mov	r1, #1
   11638:	strb	r1, [r0, #13]
   1163c:	ldr	r1, [r8]
   11640:	sub	r1, r1, #1
   11644:	str	r1, [r8]
   11648:	cmp	r9, #0
   1164c:	bne	11660 <__assert_fail@plt+0x664>
   11650:	b	11614 <__assert_fail@plt+0x618>
   11654:	ldr	r9, [r9, #4]
   11658:	cmp	r9, #0
   1165c:	beq	11614 <__assert_fail@plt+0x618>
   11660:	ldr	r1, [r9]
   11664:	ldr	r2, [r1, #16]
   11668:	subs	r2, r2, #1
   1166c:	str	r2, [r1, #16]
   11670:	bne	11654 <__assert_fail@plt+0x658>
   11674:	ldr	r2, [r7]
   11678:	str	r1, [r2, #20]
   1167c:	ldr	r1, [r9]
   11680:	str	r1, [r7]
   11684:	b	11654 <__assert_fail@plt+0x658>
   11688:	ldr	r0, [r8]
   1168c:	cmp	r0, #0
   11690:	ldr	r9, [sp, #8]
   11694:	beq	11700 <__assert_fail@plt+0x704>
   11698:	mov	r0, #0
   1169c:	movw	r1, #21921	; 0x55a1
   116a0:	movt	r1, #1
   116a4:	mov	r2, #5
   116a8:	bl	10e28 <dcgettext@plt>
   116ac:	str	r0, [sp, #12]
   116b0:	mov	r0, #0
   116b4:	mov	r1, #3
   116b8:	mov	r2, r9
   116bc:	bl	13a98 <__assert_fail@plt+0x2a9c>
   116c0:	mov	r3, r0
   116c4:	mov	r0, #0
   116c8:	mov	r1, #0
   116cc:	ldr	r2, [sp, #12]
   116d0:	bl	10eac <error@plt>
   116d4:	mov	r0, r6
   116d8:	mov	r1, r4
   116dc:	bl	11b68 <__assert_fail@plt+0xb6c>
   116e0:	ldr	r0, [r5]
   116e4:	cmp	r0, #0
   116e8:	bne	116d4 <__assert_fail@plt+0x6d8>
   116ec:	ldr	r0, [r8]
   116f0:	mov	r1, #0
   116f4:	str	r1, [sp, #12]
   116f8:	cmp	r0, #0
   116fc:	bne	115f4 <__assert_fail@plt+0x5f8>
   11700:	movw	r0, #24896	; 0x6140
   11704:	movt	r0, #2
   11708:	ldr	r0, [r0]
   1170c:	bl	11ee8 <__assert_fail@plt+0xeec>
   11710:	cmp	r0, #0
   11714:	bne	11728 <__assert_fail@plt+0x72c>
   11718:	mov	r0, #1
   1171c:	ldr	r1, [sp, #12]
   11720:	bic	r0, r0, r1
   11724:	bl	10f24 <exit@plt>
   11728:	bl	10f48 <__errno_location@plt>
   1172c:	ldr	r4, [r0]
   11730:	ldr	r0, [sp, #4]
   11734:	cmp	r0, #0
   11738:	bne	1175c <__assert_fail@plt+0x760>
   1173c:	movw	r1, #21948	; 0x55bc
   11740:	movt	r1, #1
   11744:	mov	r0, #0
   11748:	mov	r2, #5
   1174c:	bl	10e28 <dcgettext@plt>
   11750:	b	1176c <__assert_fail@plt+0x770>
   11754:	bl	10f48 <__errno_location@plt>
   11758:	ldr	r4, [r0]
   1175c:	mov	r0, #0
   11760:	mov	r1, #3
   11764:	mov	r2, r9
   11768:	bl	13a98 <__assert_fail@plt+0x2a9c>
   1176c:	mov	r3, r0
   11770:	movw	r2, #22215	; 0x56c7
   11774:	movt	r2, #1
   11778:	mov	r0, #1
   1177c:	mov	r1, r4
   11780:	bl	10eac <error@plt>
   11784:	movw	r0, #21832	; 0x5548
   11788:	movt	r0, #1
   1178c:	movw	r1, #21841	; 0x5551
   11790:	movt	r1, #1
   11794:	movw	r3, #21853	; 0x555d
   11798:	movt	r3, #1
   1179c:	movw	r2, #458	; 0x1ca
   117a0:	bl	10ffc <__assert_fail@plt>
   117a4:	movw	r1, #21878	; 0x5576
   117a8:	movt	r1, #1
   117ac:	mov	r0, #0
   117b0:	mov	r2, #5
   117b4:	bl	10e28 <dcgettext@plt>
   117b8:	mov	r4, r0
   117bc:	mov	r0, #0
   117c0:	mov	r1, #3
   117c4:	mov	r2, r9
   117c8:	bl	13a98 <__assert_fail@plt+0x2a9c>
   117cc:	mov	r3, r0
   117d0:	mov	r0, #1
   117d4:	mov	r1, #0
   117d8:	mov	r2, r4
   117dc:	bl	10eac <error@plt>
   117e0:	mov	r0, #1
   117e4:	str	r0, [sp, #12]
   117e8:	b	11700 <__assert_fail@plt+0x704>
   117ec:	push	{r4, r5, fp, lr}
   117f0:	add	fp, sp, #8
   117f4:	mov	r5, r0
   117f8:	mov	r0, #28
   117fc:	bl	14a18 <__assert_fail@plt+0x3a1c>
   11800:	mov	r4, r0
   11804:	cmp	r5, #0
   11808:	beq	11818 <__assert_fail@plt+0x81c>
   1180c:	mov	r0, r5
   11810:	bl	14ad0 <__assert_fail@plt+0x3ad4>
   11814:	str	r0, [r4]
   11818:	mov	r0, r4
   1181c:	pop	{r4, r5, fp, pc}
   11820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11824:	add	fp, sp, #28
   11828:	sub	sp, sp, #12
   1182c:	cmp	r0, #0
   11830:	beq	11afc <__assert_fail@plt+0xb00>
   11834:	mov	r6, r1
   11838:	mov	r4, r0
   1183c:	ldr	r7, [r0, #8]
   11840:	cmp	r7, #0
   11844:	beq	11878 <__assert_fail@plt+0x87c>
   11848:	cmp	r6, #0
   1184c:	ldrne	r1, [r7]
   11850:	cmpne	r1, #0
   11854:	bne	1188c <__assert_fail@plt+0x890>
   11858:	movw	r0, #22022	; 0x5606
   1185c:	movt	r0, #1
   11860:	movw	r1, #21841	; 0x5551
   11864:	movt	r1, #1
   11868:	movw	r3, #21968	; 0x55d0
   1186c:	movt	r3, #1
   11870:	mov	r2, #140	; 0x8c
   11874:	bl	10ffc <__assert_fail@plt>
   11878:	mov	r0, r6
   1187c:	bl	117ec <__assert_fail@plt+0x7f0>
   11880:	mov	r5, r0
   11884:	str	r0, [r4, #8]
   11888:	b	118dc <__assert_fail@plt+0x8e0>
   1188c:	mov	r9, r7
   11890:	mov	r0, r6
   11894:	bl	10dc8 <strcmp@plt>
   11898:	cmp	r0, #0
   1189c:	beq	118d8 <__assert_fail@plt+0x8dc>
   118a0:	mov	r1, #8
   118a4:	movwmi	r1, #4
   118a8:	ldr	r2, [r7, r1]
   118ac:	cmp	r2, #0
   118b0:	beq	118e8 <__assert_fail@plt+0x8ec>
   118b4:	ldrb	r0, [r2, #12]
   118b8:	cmp	r0, #0
   118bc:	movne	r4, r7
   118c0:	movne	r9, r2
   118c4:	ldr	r1, [r2]
   118c8:	cmp	r1, #0
   118cc:	mov	r7, r2
   118d0:	bne	11890 <__assert_fail@plt+0x894>
   118d4:	b	11858 <__assert_fail@plt+0x85c>
   118d8:	mov	r5, r7
   118dc:	mov	r0, r5
   118e0:	sub	sp, fp, #28
   118e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118e8:	mov	r8, #8
   118ec:	cmp	r0, #0
   118f0:	movwmi	r8, #4
   118f4:	mov	r0, r6
   118f8:	bl	117ec <__assert_fail@plt+0x7f0>
   118fc:	str	r0, [r7, r8]
   11900:	cmp	r9, #0
   11904:	ldrne	r1, [r9]
   11908:	cmpne	r1, #0
   1190c:	bne	11930 <__assert_fail@plt+0x934>
   11910:	movw	r0, #22041	; 0x5619
   11914:	movt	r0, #1
   11918:	movw	r1, #21841	; 0x5551
   1191c:	movt	r1, #1
   11920:	movw	r3, #21968	; 0x55d0
   11924:	movt	r3, #1
   11928:	mov	r2, #163	; 0xa3
   1192c:	bl	10ffc <__assert_fail@plt>
   11930:	mov	r5, r0
   11934:	mov	r0, r6
   11938:	bl	10dc8 <strcmp@plt>
   1193c:	cmp	r0, #0
   11940:	beq	11910 <__assert_fail@plt+0x914>
   11944:	mov	r7, #1
   11948:	mov	r1, #1
   1194c:	mvnmi	r1, #0
   11950:	str	r1, [sp, #8]
   11954:	mov	r1, #8
   11958:	str	r0, [sp]
   1195c:	cmp	r0, #0
   11960:	movwmi	r1, #4
   11964:	ldr	r0, [r9, r1]
   11968:	str	r0, [sp, #4]
   1196c:	cmp	r0, r5
   11970:	beq	119bc <__assert_fail@plt+0x9c0>
   11974:	mov	r8, #255	; 0xff
   11978:	ldr	sl, [sp, #4]
   1197c:	cmp	sl, #0
   11980:	ldrne	r1, [sl]
   11984:	cmpne	r1, #0
   11988:	beq	119e4 <__assert_fail@plt+0x9e8>
   1198c:	mov	r0, r6
   11990:	bl	10dc8 <strcmp@plt>
   11994:	cmp	r0, #0
   11998:	beq	119e4 <__assert_fail@plt+0x9e8>
   1199c:	cmn	r0, #1
   119a0:	strbgt	r7, [sl, #12]
   119a4:	addgt	r0, sl, #8
   119a8:	strble	r8, [sl, #12]
   119ac:	addle	r0, sl, #4
   119b0:	ldr	sl, [r0]
   119b4:	cmp	sl, r5
   119b8:	bne	1197c <__assert_fail@plt+0x980>
   119bc:	mov	r0, r9
   119c0:	ldrsb	r2, [r0, #12]!
   119c4:	uxtb	r1, r2
   119c8:	cmp	r1, #0
   119cc:	ldr	r3, [sp, #8]
   119d0:	cmnne	r2, r3
   119d4:	bne	11a04 <__assert_fail@plt+0xa08>
   119d8:	add	r1, r1, r3
   119dc:	strb	r1, [r0]
   119e0:	b	118dc <__assert_fail@plt+0x8e0>
   119e4:	movw	r0, #22084	; 0x5644
   119e8:	movt	r0, #1
   119ec:	movw	r1, #21841	; 0x5551
   119f0:	movt	r1, #1
   119f4:	movw	r3, #21968	; 0x55d0
   119f8:	movt	r3, #1
   119fc:	mov	r2, #177	; 0xb1
   11a00:	bl	10ffc <__assert_fail@plt>
   11a04:	ldr	r7, [sp, #4]
   11a08:	mov	r1, r7
   11a0c:	ldrsb	r2, [r1, #12]!
   11a10:	cmp	r3, r2
   11a14:	bne	11a58 <__assert_fail@plt+0xa5c>
   11a18:	add	r1, r9, #8
   11a1c:	ldr	r3, [sp]
   11a20:	cmp	r3, #0
   11a24:	addmi	r1, r9, #4
   11a28:	add	r2, r7, #4
   11a2c:	addmi	r2, r7, #8
   11a30:	ldr	r2, [r2]
   11a34:	str	r2, [r1]
   11a38:	mov	r1, #4
   11a3c:	cmp	r3, #0
   11a40:	movwmi	r1, #8
   11a44:	str	r9, [r7, r1]
   11a48:	mov	r1, #0
   11a4c:	strb	r1, [r7, #12]
   11a50:	mov	r2, r0
   11a54:	b	11ae0 <__assert_fail@plt+0xae4>
   11a58:	ldr	r2, [sp]
   11a5c:	cmn	r2, #1
   11a60:	bgt	11a80 <__assert_fail@plt+0xa84>
   11a64:	ldr	r6, [r7, #8]
   11a68:	ldr	r2, [r6, #4]
   11a6c:	str	r2, [r7, #8]
   11a70:	str	r7, [r6, #4]
   11a74:	add	lr, r9, #4
   11a78:	add	r2, r6, #8
   11a7c:	b	11a98 <__assert_fail@plt+0xa9c>
   11a80:	ldr	r6, [r7, #4]
   11a84:	ldr	r2, [r6, #8]
   11a88:	str	r2, [r7, #4]
   11a8c:	str	r7, [r6, #8]
   11a90:	add	lr, r9, #8
   11a94:	add	r2, r6, #4
   11a98:	mov	r7, r6
   11a9c:	rsb	ip, r3, #0
   11aa0:	ldr	r6, [r2]
   11aa4:	str	r6, [lr]
   11aa8:	str	r9, [r2]
   11aac:	mov	r2, #0
   11ab0:	strb	r2, [r9, #12]
   11ab4:	strb	r2, [r1]
   11ab8:	mov	r2, r7
   11abc:	ldrsb	r6, [r2, #12]!
   11ac0:	cmp	r3, r6
   11ac4:	bne	11ad8 <__assert_fail@plt+0xadc>
   11ac8:	mov	r3, ip
   11acc:	mov	r1, r0
   11ad0:	strb	r3, [r1]
   11ad4:	b	11ae0 <__assert_fail@plt+0xae4>
   11ad8:	cmp	r6, ip
   11adc:	strbeq	r3, [r1]
   11ae0:	mov	r0, #0
   11ae4:	strb	r0, [r2]
   11ae8:	ldr	r0, [r4, #8]
   11aec:	cmp	r9, r0
   11af0:	strne	r7, [r4, #4]
   11af4:	streq	r7, [r4, #8]
   11af8:	b	118dc <__assert_fail@plt+0x8e0>
   11afc:	movw	r0, #21963	; 0x55cb
   11b00:	movt	r0, #1
   11b04:	movw	r1, #21841	; 0x5551
   11b08:	movt	r1, #1
   11b0c:	movw	r3, #21968	; 0x55d0
   11b10:	movt	r3, #1
   11b14:	mov	r2, #126	; 0x7e
   11b18:	bl	10ffc <__assert_fail@plt>
   11b1c:	push	{r4, r5, fp, lr}
   11b20:	add	fp, sp, #8
   11b24:	mov	r5, r1
   11b28:	mov	r4, r0
   11b2c:	ldr	r1, [r1]
   11b30:	ldr	r0, [r0]
   11b34:	bl	10dc8 <strcmp@plt>
   11b38:	cmp	r0, #0
   11b3c:	popeq	{r4, r5, fp, pc}
   11b40:	ldr	r0, [r5, #16]
   11b44:	add	r0, r0, #1
   11b48:	str	r0, [r5, #16]
   11b4c:	mov	r0, #8
   11b50:	bl	14768 <__assert_fail@plt+0x376c>
   11b54:	ldr	r1, [r4, #24]
   11b58:	str	r5, [r0]
   11b5c:	str	r1, [r0, #4]
   11b60:	str	r0, [r4, #24]
   11b64:	pop	{r4, r5, fp, pc}
   11b68:	ldr	r0, [r0, #8]
   11b6c:	cmp	r0, #0
   11b70:	bxeq	lr
   11b74:	b	11d0c <__assert_fail@plt+0xd10>
   11b78:	movw	r0, #24912	; 0x6150
   11b7c:	movt	r0, #2
   11b80:	ldr	r1, [r0]
   11b84:	add	r1, r1, #1
   11b88:	str	r1, [r0]
   11b8c:	mov	r0, #0
   11b90:	bx	lr
   11b94:	ldr	r1, [r0, #16]
   11b98:	cmp	r1, #0
   11b9c:	bne	11bac <__assert_fail@plt+0xbb0>
   11ba0:	ldrb	r1, [r0, #13]
   11ba4:	cmp	r1, #0
   11ba8:	beq	11bb4 <__assert_fail@plt+0xbb8>
   11bac:	mov	r0, #0
   11bb0:	bx	lr
   11bb4:	movw	r1, #24916	; 0x6154
   11bb8:	movt	r1, #2
   11bbc:	ldr	r2, [r1]
   11bc0:	movw	ip, #24920	; 0x6158
   11bc4:	movt	ip, #2
   11bc8:	ldr	r3, [ip]
   11bcc:	cmp	r2, #0
   11bd0:	addne	r1, r3, #20
   11bd4:	str	r0, [r1]
   11bd8:	str	r0, [ip]
   11bdc:	mov	r0, #0
   11be0:	bx	lr
   11be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11be8:	add	fp, sp, #28
   11bec:	sub	sp, sp, #4
   11bf0:	mov	r6, r0
   11bf4:	ldr	r0, [r0, #16]
   11bf8:	mov	r9, #0
   11bfc:	cmp	r0, #0
   11c00:	beq	11d00 <__assert_fail@plt+0xd04>
   11c04:	movw	r7, #24924	; 0x615c
   11c08:	movt	r7, #2
   11c0c:	ldr	r0, [r7]
   11c10:	cmp	r0, #0
   11c14:	beq	11c48 <__assert_fail@plt+0xc4c>
   11c18:	mov	r5, r6
   11c1c:	ldr	r1, [r5, #24]!
   11c20:	cmp	r1, #0
   11c24:	beq	11d00 <__assert_fail@plt+0xd04>
   11c28:	ldr	r2, [r1]
   11c2c:	cmp	r2, r0
   11c30:	beq	11c50 <__assert_fail@plt+0xc54>
   11c34:	mov	r5, r1
   11c38:	ldr	r1, [r5, #4]!
   11c3c:	cmp	r1, #0
   11c40:	bne	11c28 <__assert_fail@plt+0xc2c>
   11c44:	b	11d00 <__assert_fail@plt+0xd04>
   11c48:	str	r6, [r7]
   11c4c:	b	11d00 <__assert_fail@plt+0xd04>
   11c50:	ldr	r1, [r6, #20]
   11c54:	cmp	r1, #0
   11c58:	beq	11cb0 <__assert_fail@plt+0xcb4>
   11c5c:	ldr	r4, [r7]
   11c60:	mov	r9, #1
   11c64:	cmp	r4, #0
   11c68:	beq	11d00 <__assert_fail@plt+0xd04>
   11c6c:	mov	sl, #0
   11c70:	movw	r8, #22215	; 0x56c7
   11c74:	movt	r8, #1
   11c78:	ldr	r3, [r4]
   11c7c:	ldr	r4, [r4, #20]
   11c80:	mov	r0, #0
   11c84:	mov	r1, #0
   11c88:	mov	r2, r8
   11c8c:	bl	10eac <error@plt>
   11c90:	ldr	r0, [r7]
   11c94:	cmp	r0, r6
   11c98:	beq	11cbc <__assert_fail@plt+0xcc0>
   11c9c:	str	sl, [r0, #20]
   11ca0:	str	r4, [r7]
   11ca4:	cmp	r4, #0
   11ca8:	bne	11c78 <__assert_fail@plt+0xc7c>
   11cac:	b	11cdc <__assert_fail@plt+0xce0>
   11cb0:	str	r0, [r6, #20]
   11cb4:	str	r6, [r7]
   11cb8:	b	11d00 <__assert_fail@plt+0xd04>
   11cbc:	ldr	r0, [r5]
   11cc0:	ldr	r1, [r0]
   11cc4:	ldr	r2, [r1, #16]
   11cc8:	sub	r2, r2, #1
   11ccc:	str	r2, [r1, #16]
   11cd0:	ldr	r0, [r0, #4]
   11cd4:	str	r0, [r5]
   11cd8:	ldr	r4, [r7]
   11cdc:	cmp	r4, #0
   11ce0:	beq	11d00 <__assert_fail@plt+0xd04>
   11ce4:	mov	r0, #0
   11ce8:	ldr	r1, [r4, #20]
   11cec:	str	r0, [r4, #20]
   11cf0:	cmp	r1, #0
   11cf4:	mov	r4, r1
   11cf8:	bne	11ce8 <__assert_fail@plt+0xcec>
   11cfc:	str	r1, [r7]
   11d00:	mov	r0, r9
   11d04:	sub	sp, fp, #28
   11d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d0c:	push	{r4, r5, r6, sl, fp, lr}
   11d10:	add	fp, sp, #16
   11d14:	mov	r4, r0
   11d18:	ldr	r0, [r0, #4]
   11d1c:	cmp	r0, #0
   11d20:	beq	11d40 <__assert_fail@plt+0xd44>
   11d24:	mov	r5, r1
   11d28:	bl	11d0c <__assert_fail@plt+0xd10>
   11d2c:	mov	r1, r5
   11d30:	mov	r5, #1
   11d34:	cmp	r0, #0
   11d38:	beq	11d4c <__assert_fail@plt+0xd50>
   11d3c:	b	11d80 <__assert_fail@plt+0xd84>
   11d40:	ldr	r0, [r4, #8]
   11d44:	cmp	r0, #0
   11d48:	beq	11d88 <__assert_fail@plt+0xd8c>
   11d4c:	mov	r0, r4
   11d50:	mov	r6, r1
   11d54:	blx	r1
   11d58:	mov	r5, #1
   11d5c:	cmp	r0, #0
   11d60:	bne	11d80 <__assert_fail@plt+0xd84>
   11d64:	ldr	r0, [r4, #8]
   11d68:	cmp	r0, #0
   11d6c:	beq	11d94 <__assert_fail@plt+0xd98>
   11d70:	mov	r1, r6
   11d74:	bl	11d0c <__assert_fail@plt+0xd10>
   11d78:	cmp	r0, #0
   11d7c:	moveq	r5, #0
   11d80:	mov	r0, r5
   11d84:	pop	{r4, r5, r6, sl, fp, pc}
   11d88:	mov	r0, r4
   11d8c:	pop	{r4, r5, r6, sl, fp, lr}
   11d90:	bx	r1
   11d94:	mov	r5, #0
   11d98:	mov	r0, r5
   11d9c:	pop	{r4, r5, r6, sl, fp, pc}
   11da0:	movw	r1, #24928	; 0x6160
   11da4:	movt	r1, #2
   11da8:	str	r0, [r1]
   11dac:	bx	lr
   11db0:	movw	r1, #24932	; 0x6164
   11db4:	movt	r1, #2
   11db8:	strb	r0, [r1]
   11dbc:	bx	lr
   11dc0:	push	{r4, r5, r6, sl, fp, lr}
   11dc4:	add	fp, sp, #16
   11dc8:	sub	sp, sp, #8
   11dcc:	movw	r0, #24900	; 0x6144
   11dd0:	movt	r0, #2
   11dd4:	ldr	r0, [r0]
   11dd8:	bl	14f30 <__assert_fail@plt+0x3f34>
   11ddc:	cmp	r0, #0
   11de0:	beq	11e08 <__assert_fail@plt+0xe0c>
   11de4:	movw	r0, #24932	; 0x6164
   11de8:	movt	r0, #2
   11dec:	ldrb	r0, [r0]
   11df0:	cmp	r0, #0
   11df4:	beq	11e28 <__assert_fail@plt+0xe2c>
   11df8:	bl	10f48 <__errno_location@plt>
   11dfc:	ldr	r0, [r0]
   11e00:	cmp	r0, #32
   11e04:	bne	11e28 <__assert_fail@plt+0xe2c>
   11e08:	movw	r0, #24888	; 0x6138
   11e0c:	movt	r0, #2
   11e10:	ldr	r0, [r0]
   11e14:	bl	14f30 <__assert_fail@plt+0x3f34>
   11e18:	cmp	r0, #0
   11e1c:	subeq	sp, fp, #16
   11e20:	popeq	{r4, r5, r6, sl, fp, pc}
   11e24:	b	11e98 <__assert_fail@plt+0xe9c>
   11e28:	movw	r1, #22199	; 0x56b7
   11e2c:	movt	r1, #1
   11e30:	mov	r0, #0
   11e34:	mov	r2, #5
   11e38:	bl	10e28 <dcgettext@plt>
   11e3c:	mov	r4, r0
   11e40:	movw	r0, #24928	; 0x6160
   11e44:	movt	r0, #2
   11e48:	ldr	r6, [r0]
   11e4c:	bl	10f48 <__errno_location@plt>
   11e50:	ldr	r5, [r0]
   11e54:	cmp	r6, #0
   11e58:	bne	11e74 <__assert_fail@plt+0xe78>
   11e5c:	movw	r2, #22215	; 0x56c7
   11e60:	movt	r2, #1
   11e64:	mov	r0, #0
   11e68:	mov	r1, r5
   11e6c:	mov	r3, r4
   11e70:	b	11e94 <__assert_fail@plt+0xe98>
   11e74:	mov	r0, r6
   11e78:	bl	13a88 <__assert_fail@plt+0x2a8c>
   11e7c:	mov	r3, r0
   11e80:	str	r4, [sp]
   11e84:	movw	r2, #22211	; 0x56c3
   11e88:	movt	r2, #1
   11e8c:	mov	r0, #0
   11e90:	mov	r1, r5
   11e94:	bl	10eac <error@plt>
   11e98:	movw	r0, #24804	; 0x60e4
   11e9c:	movt	r0, #2
   11ea0:	ldr	r0, [r0]
   11ea4:	bl	10df8 <_exit@plt>
   11ea8:	b	10dd4 <posix_fadvise64@plt>
   11eac:	cmp	r0, #0
   11eb0:	bxeq	lr
   11eb4:	push	{r4, sl, fp, lr}
   11eb8:	add	fp, sp, #8
   11ebc:	sub	sp, sp, #16
   11ec0:	mov	r4, r1
   11ec4:	bl	10f78 <fileno@plt>
   11ec8:	mov	r1, #0
   11ecc:	str	r1, [sp]
   11ed0:	stmib	sp, {r1, r4}
   11ed4:	mov	r2, #0
   11ed8:	mov	r3, #0
   11edc:	bl	11ea8 <__assert_fail@plt+0xeac>
   11ee0:	sub	sp, fp, #8
   11ee4:	pop	{r4, sl, fp, pc}
   11ee8:	push	{r4, r5, fp, lr}
   11eec:	add	fp, sp, #8
   11ef0:	sub	sp, sp, #8
   11ef4:	mov	r4, r0
   11ef8:	bl	10f78 <fileno@plt>
   11efc:	cmn	r0, #1
   11f00:	ble	11f78 <__assert_fail@plt+0xf7c>
   11f04:	mov	r0, r4
   11f08:	bl	10ee8 <__freading@plt>
   11f0c:	cmp	r0, #0
   11f10:	beq	11f3c <__assert_fail@plt+0xf40>
   11f14:	mov	r0, r4
   11f18:	bl	10f78 <fileno@plt>
   11f1c:	mov	r1, #1
   11f20:	str	r1, [sp]
   11f24:	mov	r2, #0
   11f28:	mov	r3, #0
   11f2c:	bl	10e70 <lseek64@plt>
   11f30:	and	r0, r0, r1
   11f34:	cmn	r0, #1
   11f38:	beq	11f78 <__assert_fail@plt+0xf7c>
   11f3c:	mov	r0, r4
   11f40:	bl	11f88 <__assert_fail@plt+0xf8c>
   11f44:	cmp	r0, #0
   11f48:	beq	11f78 <__assert_fail@plt+0xf7c>
   11f4c:	bl	10f48 <__errno_location@plt>
   11f50:	ldr	r5, [r0]
   11f54:	mov	r0, r4
   11f58:	bl	10f90 <fclose@plt>
   11f5c:	cmp	r5, #0
   11f60:	beq	11f70 <__assert_fail@plt+0xf74>
   11f64:	bl	10f48 <__errno_location@plt>
   11f68:	str	r5, [r0]
   11f6c:	mvn	r0, #0
   11f70:	sub	sp, fp, #8
   11f74:	pop	{r4, r5, fp, pc}
   11f78:	mov	r0, r4
   11f7c:	sub	sp, fp, #8
   11f80:	pop	{r4, r5, fp, lr}
   11f84:	b	10f90 <fclose@plt>
   11f88:	push	{r4, sl, fp, lr}
   11f8c:	add	fp, sp, #8
   11f90:	mov	r4, r0
   11f94:	cmp	r0, #0
   11f98:	beq	11fb0 <__assert_fail@plt+0xfb4>
   11f9c:	mov	r0, r4
   11fa0:	bl	10ee8 <__freading@plt>
   11fa4:	cmp	r0, #0
   11fa8:	movne	r0, r4
   11fac:	blne	11fbc <__assert_fail@plt+0xfc0>
   11fb0:	mov	r0, r4
   11fb4:	pop	{r4, sl, fp, lr}
   11fb8:	b	10de0 <fflush@plt>
   11fbc:	push	{fp, lr}
   11fc0:	mov	fp, sp
   11fc4:	sub	sp, sp, #8
   11fc8:	ldrb	r1, [r0, #1]
   11fcc:	tst	r1, #1
   11fd0:	beq	11fe8 <__assert_fail@plt+0xfec>
   11fd4:	mov	r1, #1
   11fd8:	str	r1, [sp]
   11fdc:	mov	r2, #0
   11fe0:	mov	r3, #0
   11fe4:	bl	121c8 <__assert_fail@plt+0x11cc>
   11fe8:	mov	sp, fp
   11fec:	pop	{fp, pc}
   11ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ff4:	add	fp, sp, #28
   11ff8:	sub	sp, sp, #4
   11ffc:	mov	r4, r2
   12000:	mov	r8, r1
   12004:	mov	r5, r0
   12008:	mov	r0, r2
   1200c:	bl	10f78 <fileno@plt>
   12010:	mov	r6, #0
   12014:	cmp	r0, #0
   12018:	beq	12058 <__assert_fail@plt+0x105c>
   1201c:	cmp	r0, #1
   12020:	beq	12064 <__assert_fail@plt+0x1068>
   12024:	cmp	r0, #2
   12028:	beq	12040 <__assert_fail@plt+0x1044>
   1202c:	mov	r0, #2
   12030:	mov	r1, #2
   12034:	bl	10e34 <dup2@plt>
   12038:	subs	r6, r0, #2
   1203c:	movwne	r6, #1
   12040:	mov	r0, #1
   12044:	mov	r1, #1
   12048:	bl	10e34 <dup2@plt>
   1204c:	subs	r7, r0, #1
   12050:	movwne	r7, #1
   12054:	b	12068 <__assert_fail@plt+0x106c>
   12058:	mov	r7, #0
   1205c:	mov	r9, #0
   12060:	b	12118 <__assert_fail@plt+0x111c>
   12064:	mov	r7, #0
   12068:	mov	sl, #0
   1206c:	mov	r0, #0
   12070:	mov	r1, #0
   12074:	bl	10e34 <dup2@plt>
   12078:	cmp	r0, #0
   1207c:	mov	r9, #0
   12080:	beq	12098 <__assert_fail@plt+0x109c>
   12084:	mov	r0, #0
   12088:	bl	1217c <__assert_fail@plt+0x1180>
   1208c:	mov	r9, #1
   12090:	cmp	r0, #0
   12094:	beq	120f4 <__assert_fail@plt+0x10f8>
   12098:	cmp	r7, #0
   1209c:	beq	120b4 <__assert_fail@plt+0x10b8>
   120a0:	mov	sl, #1
   120a4:	mov	r0, #1
   120a8:	bl	1217c <__assert_fail@plt+0x1180>
   120ac:	cmp	r0, #0
   120b0:	beq	120f4 <__assert_fail@plt+0x10f8>
   120b4:	cmp	r6, #0
   120b8:	beq	12110 <__assert_fail@plt+0x1114>
   120bc:	mov	r0, #2
   120c0:	bl	1217c <__assert_fail@plt+0x1180>
   120c4:	mov	r6, #1
   120c8:	cmp	r0, #0
   120cc:	bne	12114 <__assert_fail@plt+0x1118>
   120d0:	bl	10f48 <__errno_location@plt>
   120d4:	mov	r4, r0
   120d8:	ldr	r8, [r0]
   120dc:	mov	r0, #2
   120e0:	bl	10ff0 <close@plt>
   120e4:	mov	r5, #0
   120e8:	cmp	sl, #0
   120ec:	bne	12150 <__assert_fail@plt+0x1154>
   120f0:	b	12158 <__assert_fail@plt+0x115c>
   120f4:	bl	10f48 <__errno_location@plt>
   120f8:	mov	r4, r0
   120fc:	ldr	r8, [r0]
   12100:	mov	r5, #0
   12104:	cmp	r6, #0
   12108:	bne	12140 <__assert_fail@plt+0x1144>
   1210c:	b	12148 <__assert_fail@plt+0x114c>
   12110:	mov	r6, #0
   12114:	mov	r7, sl
   12118:	mov	r0, r5
   1211c:	mov	r1, r8
   12120:	mov	r2, r4
   12124:	bl	10f00 <freopen64@plt>
   12128:	mov	r5, r0
   1212c:	bl	10f48 <__errno_location@plt>
   12130:	mov	r4, r0
   12134:	ldr	r8, [r0]
   12138:	cmp	r6, #0
   1213c:	beq	12148 <__assert_fail@plt+0x114c>
   12140:	mov	r0, #2
   12144:	bl	10ff0 <close@plt>
   12148:	cmp	r7, #0
   1214c:	beq	12158 <__assert_fail@plt+0x115c>
   12150:	mov	r0, #1
   12154:	bl	10ff0 <close@plt>
   12158:	cmp	r9, #0
   1215c:	beq	12168 <__assert_fail@plt+0x116c>
   12160:	mov	r0, #0
   12164:	bl	10ff0 <close@plt>
   12168:	cmp	r5, #0
   1216c:	streq	r8, [r4]
   12170:	mov	r0, r5
   12174:	sub	sp, fp, #28
   12178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1217c:	push	{r4, sl, fp, lr}
   12180:	add	fp, sp, #8
   12184:	mov	r4, r0
   12188:	movw	r0, #22218	; 0x56ca
   1218c:	movt	r0, #1
   12190:	mov	r1, #0
   12194:	bl	10eb8 <open64@plt>
   12198:	mov	r1, #1
   1219c:	cmp	r0, r4
   121a0:	beq	121c0 <__assert_fail@plt+0x11c4>
   121a4:	cmp	r0, #0
   121a8:	bmi	121bc <__assert_fail@plt+0x11c0>
   121ac:	bl	10ff0 <close@plt>
   121b0:	bl	10f48 <__errno_location@plt>
   121b4:	mov	r1, #9
   121b8:	str	r1, [r0]
   121bc:	mov	r1, #0
   121c0:	mov	r0, r1
   121c4:	pop	{r4, sl, fp, pc}
   121c8:	push	{r4, r5, r6, r7, fp, lr}
   121cc:	add	fp, sp, #16
   121d0:	sub	sp, sp, #8
   121d4:	mov	r5, r3
   121d8:	mov	r6, r2
   121dc:	mov	r4, r0
   121e0:	ldr	r0, [r0, #4]
   121e4:	ldr	r1, [r4, #8]
   121e8:	cmp	r1, r0
   121ec:	bne	12208 <__assert_fail@plt+0x120c>
   121f0:	ldrd	r0, [r4, #16]
   121f4:	cmp	r1, r0
   121f8:	bne	12208 <__assert_fail@plt+0x120c>
   121fc:	ldr	r0, [r4, #36]	; 0x24
   12200:	cmp	r0, #0
   12204:	beq	12220 <__assert_fail@plt+0x1224>
   12208:	mov	r0, r4
   1220c:	mov	r2, r6
   12210:	mov	r3, r5
   12214:	sub	sp, fp, #16
   12218:	pop	{r4, r5, r6, r7, fp, lr}
   1221c:	b	10f9c <fseeko64@plt>
   12220:	ldr	r7, [fp, #8]
   12224:	mov	r0, r4
   12228:	bl	10f78 <fileno@plt>
   1222c:	str	r7, [sp]
   12230:	mov	r2, r6
   12234:	mov	r3, r5
   12238:	bl	10e70 <lseek64@plt>
   1223c:	and	r2, r0, r1
   12240:	cmn	r2, #1
   12244:	beq	12264 <__assert_fail@plt+0x1268>
   12248:	strd	r0, [r4, #80]	; 0x50
   1224c:	ldr	r0, [r4]
   12250:	bic	r0, r0, #16
   12254:	str	r0, [r4]
   12258:	mov	r0, #0
   1225c:	sub	sp, fp, #16
   12260:	pop	{r4, r5, r6, r7, fp, pc}
   12264:	mvn	r0, #0
   12268:	sub	sp, fp, #16
   1226c:	pop	{r4, r5, r6, r7, fp, pc}
   12270:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12274:	add	fp, sp, #24
   12278:	sub	sp, sp, #8
   1227c:	movw	r6, #24904	; 0x6148
   12280:	movt	r6, #2
   12284:	ldr	r7, [r6]
   12288:	mov	r4, #0
   1228c:	str	r4, [r6]
   12290:	cmp	r0, #2
   12294:	bne	12308 <__assert_fail@plt+0x130c>
   12298:	mov	r8, r3
   1229c:	mov	r5, r2
   122a0:	str	r4, [sp]
   122a4:	movw	r2, #22228	; 0x56d4
   122a8:	movt	r2, #1
   122ac:	movw	r3, #22244	; 0x56e4
   122b0:	movt	r3, #1
   122b4:	mov	r0, #2
   122b8:	bl	10f0c <getopt_long@plt>
   122bc:	cmp	r0, #104	; 0x68
   122c0:	beq	122fc <__assert_fail@plt+0x1300>
   122c4:	cmp	r0, #118	; 0x76
   122c8:	bne	12308 <__assert_fail@plt+0x130c>
   122cc:	ldr	r3, [fp, #8]
   122d0:	add	r1, fp, #16
   122d4:	str	r1, [sp, #4]
   122d8:	movw	r0, #24900	; 0x6144
   122dc:	movt	r0, #2
   122e0:	ldr	r0, [r0]
   122e4:	str	r1, [sp]
   122e8:	mov	r1, r5
   122ec:	mov	r2, r8
   122f0:	bl	14610 <__assert_fail@plt+0x3614>
   122f4:	mov	r0, #0
   122f8:	bl	10f24 <exit@plt>
   122fc:	ldr	r1, [fp, #12]
   12300:	mov	r0, #0
   12304:	blx	r1
   12308:	movw	r0, #24880	; 0x6130
   1230c:	movt	r0, #2
   12310:	str	r4, [r0]
   12314:	str	r7, [r6]
   12318:	sub	sp, fp, #24
   1231c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12320:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12324:	add	fp, sp, #24
   12328:	sub	sp, sp, #8
   1232c:	mov	r8, r3
   12330:	mov	r9, r2
   12334:	movw	r7, #24904	; 0x6148
   12338:	movt	r7, #2
   1233c:	ldr	r4, [r7]
   12340:	mov	r2, #1
   12344:	str	r2, [r7]
   12348:	mov	r6, #0
   1234c:	str	r6, [sp]
   12350:	ldr	r3, [fp, #12]
   12354:	movw	r5, #21831	; 0x5547
   12358:	movt	r5, #1
   1235c:	movw	r2, #22228	; 0x56d4
   12360:	movt	r2, #1
   12364:	cmp	r3, #0
   12368:	movne	r2, r5
   1236c:	movw	r3, #22244	; 0x56e4
   12370:	movt	r3, #1
   12374:	bl	10f0c <getopt_long@plt>
   12378:	cmn	r0, #1
   1237c:	beq	123a8 <__assert_fail@plt+0x13ac>
   12380:	cmp	r0, #104	; 0x68
   12384:	beq	1239c <__assert_fail@plt+0x13a0>
   12388:	cmp	r0, #118	; 0x76
   1238c:	beq	123b4 <__assert_fail@plt+0x13b8>
   12390:	movw	r0, #24804	; 0x60e4
   12394:	movt	r0, #2
   12398:	ldr	r6, [r0]
   1239c:	ldr	r1, [fp, #16]
   123a0:	mov	r0, r6
   123a4:	blx	r1
   123a8:	str	r4, [r7]
   123ac:	sub	sp, fp, #24
   123b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   123b4:	ldr	r3, [fp, #8]
   123b8:	add	r1, fp, #20
   123bc:	str	r1, [sp, #4]
   123c0:	movw	r0, #24900	; 0x6144
   123c4:	movt	r0, #2
   123c8:	ldr	r0, [r0]
   123cc:	str	r1, [sp]
   123d0:	mov	r1, r9
   123d4:	mov	r2, r8
   123d8:	bl	14610 <__assert_fail@plt+0x3614>
   123dc:	mov	r0, #0
   123e0:	bl	10f24 <exit@plt>
   123e4:	push	{r4, r5, fp, lr}
   123e8:	add	fp, sp, #8
   123ec:	cmp	r0, #0
   123f0:	beq	12484 <__assert_fail@plt+0x1488>
   123f4:	mov	r4, r0
   123f8:	mov	r1, #47	; 0x2f
   123fc:	bl	10fb4 <strrchr@plt>
   12400:	cmp	r0, #0
   12404:	mov	r5, r4
   12408:	addne	r5, r0, #1
   1240c:	sub	r0, r5, r4
   12410:	cmp	r0, #7
   12414:	blt	12468 <__assert_fail@plt+0x146c>
   12418:	sub	r0, r5, #7
   1241c:	movw	r1, #22348	; 0x574c
   12420:	movt	r1, #1
   12424:	mov	r2, #7
   12428:	bl	10fd8 <strncmp@plt>
   1242c:	cmp	r0, #0
   12430:	bne	12468 <__assert_fail@plt+0x146c>
   12434:	movw	r1, #22356	; 0x5754
   12438:	movt	r1, #1
   1243c:	mov	r0, r5
   12440:	mov	r2, #3
   12444:	bl	10fd8 <strncmp@plt>
   12448:	cmp	r0, #0
   1244c:	beq	12458 <__assert_fail@plt+0x145c>
   12450:	mov	r4, r5
   12454:	b	12468 <__assert_fail@plt+0x146c>
   12458:	add	r4, r5, #3
   1245c:	movw	r0, #24872	; 0x6128
   12460:	movt	r0, #2
   12464:	str	r4, [r0]
   12468:	movw	r0, #24876	; 0x612c
   1246c:	movt	r0, #2
   12470:	str	r4, [r0]
   12474:	movw	r0, #24936	; 0x6168
   12478:	movt	r0, #2
   1247c:	str	r4, [r0]
   12480:	pop	{r4, r5, fp, pc}
   12484:	movw	r0, #24888	; 0x6138
   12488:	movt	r0, #2
   1248c:	ldr	r3, [r0]
   12490:	movw	r0, #22292	; 0x5714
   12494:	movt	r0, #1
   12498:	mov	r1, #55	; 0x37
   1249c:	mov	r2, #1
   124a0:	bl	10e64 <fwrite@plt>
   124a4:	bl	10fe4 <abort@plt>
   124a8:	push	{r4, r5, r6, sl, fp, lr}
   124ac:	add	fp, sp, #16
   124b0:	mov	r4, r0
   124b4:	movw	r0, #24944	; 0x6170
   124b8:	movt	r0, #2
   124bc:	cmp	r4, #0
   124c0:	moveq	r4, r0
   124c4:	bl	10f48 <__errno_location@plt>
   124c8:	mov	r5, r0
   124cc:	ldr	r6, [r0]
   124d0:	mov	r0, r4
   124d4:	mov	r1, #48	; 0x30
   124d8:	bl	14a50 <__assert_fail@plt+0x3a54>
   124dc:	str	r6, [r5]
   124e0:	pop	{r4, r5, r6, sl, fp, pc}
   124e4:	movw	r1, #24944	; 0x6170
   124e8:	movt	r1, #2
   124ec:	cmp	r0, #0
   124f0:	movne	r1, r0
   124f4:	ldr	r0, [r1]
   124f8:	bx	lr
   124fc:	movw	r2, #24944	; 0x6170
   12500:	movt	r2, #2
   12504:	cmp	r0, #0
   12508:	movne	r2, r0
   1250c:	str	r1, [r2]
   12510:	bx	lr
   12514:	movw	r3, #24944	; 0x6170
   12518:	movt	r3, #2
   1251c:	cmp	r0, #0
   12520:	movne	r3, r0
   12524:	ubfx	r0, r1, #5, #3
   12528:	add	ip, r3, r0, lsl #2
   1252c:	ldr	r3, [ip, #8]
   12530:	and	r1, r1, #31
   12534:	mov	r0, #1
   12538:	and	r0, r0, r3, lsr r1
   1253c:	and	r2, r2, #1
   12540:	eor	r2, r0, r2
   12544:	eor	r1, r3, r2, lsl r1
   12548:	str	r1, [ip, #8]
   1254c:	bx	lr
   12550:	movw	r2, #24944	; 0x6170
   12554:	movt	r2, #2
   12558:	cmp	r0, #0
   1255c:	movne	r2, r0
   12560:	ldr	r0, [r2, #4]
   12564:	str	r1, [r2, #4]
   12568:	bx	lr
   1256c:	push	{fp, lr}
   12570:	mov	fp, sp
   12574:	movw	r3, #24944	; 0x6170
   12578:	movt	r3, #2
   1257c:	cmp	r0, #0
   12580:	movne	r3, r0
   12584:	mov	r0, #10
   12588:	str	r0, [r3]
   1258c:	cmp	r1, #0
   12590:	cmpne	r2, #0
   12594:	bne	1259c <__assert_fail@plt+0x15a0>
   12598:	bl	10fe4 <abort@plt>
   1259c:	str	r1, [r3, #40]	; 0x28
   125a0:	str	r2, [r3, #44]	; 0x2c
   125a4:	pop	{fp, pc}
   125a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125ac:	add	fp, sp, #28
   125b0:	sub	sp, sp, #20
   125b4:	mov	r8, r3
   125b8:	mov	r9, r2
   125bc:	mov	sl, r1
   125c0:	mov	r7, r0
   125c4:	ldr	r0, [fp, #8]
   125c8:	movw	r5, #24944	; 0x6170
   125cc:	movt	r5, #2
   125d0:	cmp	r0, #0
   125d4:	movne	r5, r0
   125d8:	bl	10f48 <__errno_location@plt>
   125dc:	mov	r4, r0
   125e0:	ldm	r5, {r0, r1}
   125e4:	ldr	r2, [r5, #40]	; 0x28
   125e8:	ldr	r3, [r5, #44]	; 0x2c
   125ec:	ldr	r6, [r4]
   125f0:	add	r5, r5, #8
   125f4:	stm	sp, {r0, r1, r5}
   125f8:	str	r2, [sp, #12]
   125fc:	str	r3, [sp, #16]
   12600:	mov	r0, r7
   12604:	mov	r1, sl
   12608:	mov	r2, r9
   1260c:	mov	r3, r8
   12610:	bl	12620 <__assert_fail@plt+0x1624>
   12614:	str	r6, [r4]
   12618:	sub	sp, fp, #28
   1261c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12624:	add	fp, sp, #28
   12628:	sub	sp, sp, #156	; 0x9c
   1262c:	mov	r9, r3
   12630:	mov	r7, r1
   12634:	mov	r6, r0
   12638:	str	r2, [fp, #-80]	; 0xffffffb0
   1263c:	add	r0, r2, #1
   12640:	str	r0, [sp, #76]	; 0x4c
   12644:	ldr	r0, [fp, #12]
   12648:	and	r1, r0, #1
   1264c:	str	r1, [sp, #40]	; 0x28
   12650:	and	r1, r0, #4
   12654:	str	r1, [sp, #36]	; 0x24
   12658:	ubfx	r4, r0, #1, #1
   1265c:	bl	10e7c <__ctype_get_mb_cur_max@plt>
   12660:	str	r0, [sp, #44]	; 0x2c
   12664:	ldr	r0, [fp, #24]
   12668:	str	r0, [sp, #88]	; 0x58
   1266c:	ldr	r0, [fp, #20]
   12670:	str	r0, [sp, #80]	; 0x50
   12674:	ldr	r1, [fp, #8]
   12678:	mov	r0, #0
   1267c:	str	r0, [sp, #84]	; 0x54
   12680:	mov	r0, #0
   12684:	str	r0, [fp, #-84]	; 0xffffffac
   12688:	mov	r0, #0
   1268c:	str	r0, [fp, #-72]	; 0xffffffb8
   12690:	mov	r0, #0
   12694:	mov	r2, #0
   12698:	str	r2, [fp, #-56]	; 0xffffffc8
   1269c:	mov	r2, #0
   126a0:	str	r2, [sp, #64]	; 0x40
   126a4:	mov	r2, #1
   126a8:	str	r2, [fp, #-48]	; 0xffffffd0
   126ac:	cmp	r1, #10
   126b0:	bhi	135dc <__assert_fail@plt+0x25e0>
   126b4:	mov	sl, r7
   126b8:	mov	r7, r1
   126bc:	add	r1, pc, #24
   126c0:	mov	r8, #0
   126c4:	mov	r2, #1
   126c8:	mov	r3, #0
   126cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   126d0:	mov	lr, r9
   126d4:	mov	r5, r6
   126d8:	ldr	pc, [r1, r7, lsl #2]
   126dc:			; <UNDEFINED> instruction: 0x000127b0
   126e0:	strdeq	r2, [r1], -r0
   126e4:	andeq	r2, r1, r0, asr #15
   126e8:	andeq	r2, r1, r8, lsr #15
   126ec:	andeq	r2, r1, r4, ror #15
   126f0:	andeq	r2, r1, r4, asr #16
   126f4:	ldrdeq	r2, [r1], -r0
   126f8:	andeq	r2, r1, r0, lsr #17
   126fc:	andeq	r2, r1, r8, lsl #14
   12700:	andeq	r2, r1, r8, lsl #14
   12704:	andeq	r2, r1, r4, lsr r7
   12708:	movw	r0, #22438	; 0x57a6
   1270c:	movt	r0, #1
   12710:	mov	r1, r7
   12714:	bl	13be4 <__assert_fail@plt+0x2be8>
   12718:	str	r0, [sp, #80]	; 0x50
   1271c:	movw	r0, #22440	; 0x57a8
   12720:	movt	r0, #1
   12724:	mov	r1, r7
   12728:	bl	13be4 <__assert_fail@plt+0x2be8>
   1272c:	mov	r5, r6
   12730:	str	r0, [sp, #88]	; 0x58
   12734:	mov	r8, #0
   12738:	tst	r4, #1
   1273c:	str	r7, [fp, #-64]	; 0xffffffc0
   12740:	bne	12778 <__assert_fail@plt+0x177c>
   12744:	ldr	r0, [sp, #80]	; 0x50
   12748:	ldrb	r0, [r0]
   1274c:	cmp	r0, #0
   12750:	beq	12778 <__assert_fail@plt+0x177c>
   12754:	ldr	r1, [sp, #80]	; 0x50
   12758:	add	r1, r1, #1
   1275c:	mov	r8, #0
   12760:	cmp	r8, sl
   12764:	strbcc	r0, [r5, r8]
   12768:	ldrb	r0, [r1, r8]
   1276c:	add	r8, r8, #1
   12770:	cmp	r0, #0
   12774:	bne	12760 <__assert_fail@plt+0x1764>
   12778:	ldr	r7, [sp, #88]	; 0x58
   1277c:	mov	r0, r7
   12780:	bl	10f3c <strlen@plt>
   12784:	mov	r5, r6
   12788:	str	r0, [fp, #-72]	; 0xffffffb8
   1278c:	str	r7, [fp, #-84]	; 0xffffffac
   12790:	mov	r2, #1
   12794:	mov	r3, r4
   12798:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1279c:	mov	lr, r9
   127a0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   127a4:	b	128a0 <__assert_fail@plt+0x18a4>
   127a8:	mov	r0, #1
   127ac:	b	127f0 <__assert_fail@plt+0x17f4>
   127b0:	mov	r7, #0
   127b4:	mov	r8, #0
   127b8:	mov	r2, r0
   127bc:	b	1289c <__assert_fail@plt+0x18a0>
   127c0:	tst	r4, #1
   127c4:	bne	127f0 <__assert_fail@plt+0x17f4>
   127c8:	mov	r2, r0
   127cc:	b	12818 <__assert_fail@plt+0x181c>
   127d0:	mov	r0, #1
   127d4:	str	r0, [fp, #-72]	; 0xffffffb8
   127d8:	mov	r8, #0
   127dc:	mov	r7, #5
   127e0:	b	1285c <__assert_fail@plt+0x1860>
   127e4:	mov	r2, #1
   127e8:	tst	r4, #1
   127ec:	beq	12818 <__assert_fail@plt+0x181c>
   127f0:	mov	r1, #1
   127f4:	str	r1, [fp, #-72]	; 0xffffffb8
   127f8:	mov	r8, #0
   127fc:	mov	r7, #2
   12800:	movw	r1, #22440	; 0x57a8
   12804:	movt	r1, #1
   12808:	str	r1, [fp, #-84]	; 0xffffffac
   1280c:	mov	r2, r0
   12810:	mov	r3, #1
   12814:	b	128a0 <__assert_fail@plt+0x18a4>
   12818:	mov	r8, #1
   1281c:	mov	r7, #2
   12820:	cmp	sl, #0
   12824:	movne	r0, #39	; 0x27
   12828:	strbne	r0, [r5]
   1282c:	movw	r0, #22440	; 0x57a8
   12830:	movt	r0, #1
   12834:	str	r0, [fp, #-84]	; 0xffffffac
   12838:	mov	r0, #1
   1283c:	str	r0, [fp, #-72]	; 0xffffffb8
   12840:	b	1289c <__assert_fail@plt+0x18a0>
   12844:	mov	r7, #5
   12848:	tst	r4, #1
   1284c:	beq	12874 <__assert_fail@plt+0x1878>
   12850:	mov	r0, #1
   12854:	str	r0, [fp, #-72]	; 0xffffffb8
   12858:	mov	r8, #0
   1285c:	movw	r0, #22436	; 0x57a4
   12860:	movt	r0, #1
   12864:	str	r0, [fp, #-84]	; 0xffffffac
   12868:	mov	r2, #1
   1286c:	mov	r3, #1
   12870:	b	128a0 <__assert_fail@plt+0x18a4>
   12874:	cmp	sl, #0
   12878:	movne	r0, #34	; 0x22
   1287c:	strbne	r0, [r5]
   12880:	mov	r8, #1
   12884:	movw	r0, #22436	; 0x57a4
   12888:	movt	r0, #1
   1288c:	str	r0, [fp, #-84]	; 0xffffffac
   12890:	mov	r0, #1
   12894:	str	r0, [fp, #-72]	; 0xffffffb8
   12898:	mov	r2, #1
   1289c:	mov	r3, #0
   128a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128a4:	cmp	r0, #0
   128a8:	movwne	r0, #1
   128ac:	and	r1, r0, r3
   128b0:	and	r1, r2, r1
   128b4:	str	r1, [sp, #56]	; 0x38
   128b8:	sub	r1, r7, #2
   128bc:	clz	r1, r1
   128c0:	lsr	r1, r1, #5
   128c4:	and	r1, r1, r3
   128c8:	str	r1, [sp, #68]	; 0x44
   128cc:	str	r7, [fp, #-64]	; 0xffffffc0
   128d0:	subs	r1, r7, #2
   128d4:	movwne	r1, #1
   128d8:	eor	r4, r3, #1
   128dc:	str	r4, [fp, #-88]	; 0xffffffa8
   128e0:	orr	r4, r1, r4
   128e4:	str	r4, [sp, #72]	; 0x48
   128e8:	and	r1, r1, r2
   128ec:	and	r0, r0, r1
   128f0:	str	r0, [fp, #-60]	; 0xffffffc4
   128f4:	str	r3, [fp, #-76]	; 0xffffffb4
   128f8:	orr	r0, r1, r3
   128fc:	eor	r0, r0, #1
   12900:	ldr	r1, [fp, #16]
   12904:	clz	r1, r1
   12908:	lsr	r1, r1, #5
   1290c:	orr	r0, r1, r0
   12910:	str	r0, [fp, #-68]	; 0xffffffbc
   12914:	str	r2, [sp, #92]	; 0x5c
   12918:	eor	r0, r2, #1
   1291c:	str	r0, [sp, #60]	; 0x3c
   12920:	mov	r7, #0
   12924:	cmn	lr, #1
   12928:	beq	12938 <__assert_fail@plt+0x193c>
   1292c:	cmp	r7, lr
   12930:	bne	12944 <__assert_fail@plt+0x1948>
   12934:	b	13450 <__assert_fail@plt+0x2454>
   12938:	ldrb	r0, [ip, r7]
   1293c:	cmp	r0, #0
   12940:	beq	13450 <__assert_fail@plt+0x2454>
   12944:	mov	r9, #0
   12948:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1294c:	cmp	r0, #0
   12950:	beq	12984 <__assert_fail@plt+0x1988>
   12954:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12958:	add	r4, r7, r0
   1295c:	cmp	r0, #2
   12960:	bcc	1297c <__assert_fail@plt+0x1980>
   12964:	cmn	lr, #1
   12968:	bne	1297c <__assert_fail@plt+0x1980>
   1296c:	mov	r0, ip
   12970:	bl	10f3c <strlen@plt>
   12974:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12978:	mov	lr, r0
   1297c:	cmp	r4, lr
   12980:	bls	12990 <__assert_fail@plt+0x1994>
   12984:	mov	r0, #0
   12988:	str	r0, [fp, #-52]	; 0xffffffcc
   1298c:	b	129d4 <__assert_fail@plt+0x19d8>
   12990:	mov	r4, lr
   12994:	add	r0, ip, r7
   12998:	ldr	r1, [fp, #-84]	; 0xffffffac
   1299c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   129a0:	bl	10f30 <bcmp@plt>
   129a4:	cmp	r0, #0
   129a8:	mov	r1, r0
   129ac:	movwne	r1, #1
   129b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   129b4:	orr	r1, r1, r2
   129b8:	tst	r1, #1
   129bc:	beq	13524 <__assert_fail@plt+0x2528>
   129c0:	clz	r0, r0
   129c4:	lsr	r0, r0, #5
   129c8:	str	r0, [fp, #-52]	; 0xffffffcc
   129cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   129d0:	mov	lr, r4
   129d4:	ldrb	r4, [ip, r7]
   129d8:	cmp	r4, #126	; 0x7e
   129dc:	bhi	12f0c <__assert_fail@plt+0x1f10>
   129e0:	mov	r6, #1
   129e4:	mov	r2, #110	; 0x6e
   129e8:	mov	r0, #97	; 0x61
   129ec:	add	r3, pc, #4
   129f0:	mov	r1, #0
   129f4:	ldr	pc, [r3, r4, lsl #2]
   129f8:	andeq	r2, r1, ip, ror #26
   129fc:	andeq	r2, r1, ip, lsl #30
   12a00:	andeq	r2, r1, ip, lsl #30
   12a04:	andeq	r2, r1, ip, lsl #30
   12a08:	andeq	r2, r1, ip, lsl #30
   12a0c:	andeq	r2, r1, ip, lsl #30
   12a10:	andeq	r2, r1, ip, lsl #30
   12a14:	andeq	r2, r1, r0, ror #31
   12a18:	andeq	r2, r1, ip, asr #26
   12a1c:	andeq	r2, r1, r4, asr #26
   12a20:	andeq	r2, r1, r8, asr sp
   12a24:	andeq	r2, r1, r4, ror lr
   12a28:	andeq	r2, r1, ip, lsr sp
   12a2c:	andeq	r2, r1, r4, asr sp
   12a30:	andeq	r2, r1, ip, lsl #30
   12a34:	andeq	r2, r1, ip, lsl #30
   12a38:	andeq	r2, r1, ip, lsl #30
   12a3c:	andeq	r2, r1, ip, lsl #30
   12a40:	andeq	r2, r1, ip, lsl #30
   12a44:	andeq	r2, r1, ip, lsl #30
   12a48:	andeq	r2, r1, ip, lsl #30
   12a4c:	andeq	r2, r1, ip, lsl #30
   12a50:	andeq	r2, r1, ip, lsl #30
   12a54:	andeq	r2, r1, ip, lsl #30
   12a58:	andeq	r2, r1, ip, lsl #30
   12a5c:	andeq	r2, r1, ip, lsl #30
   12a60:	andeq	r2, r1, ip, lsl #30
   12a64:	andeq	r2, r1, ip, lsl #30
   12a68:	andeq	r2, r1, ip, lsl #30
   12a6c:	andeq	r2, r1, ip, lsl #30
   12a70:	andeq	r2, r1, ip, lsl #30
   12a74:	andeq	r2, r1, ip, lsl #30
   12a78:	strdeq	r2, [r1], -r0
   12a7c:	strdeq	r2, [r1], -r4
   12a80:	strdeq	r2, [r1], -r4
   12a84:	ldrdeq	r2, [r1], -ip
   12a88:	strdeq	r2, [r1], -r4
   12a8c:	strdeq	r2, [r1], -r4
   12a90:	strdeq	r2, [r1], -r4
   12a94:	andeq	r2, r1, ip, ror lr
   12a98:	strdeq	r2, [r1], -r4
   12a9c:	strdeq	r2, [r1], -r4
   12aa0:	strdeq	r2, [r1], -r4
   12aa4:	strdeq	r2, [r1], -r4
   12aa8:	strdeq	r2, [r1], -r4
   12aac:	strdeq	r2, [r1], -r4
   12ab0:	strdeq	r2, [r1], -r4
   12ab4:	strdeq	r2, [r1], -r4
   12ab8:	strdeq	r2, [r1], -r4
   12abc:	strdeq	r2, [r1], -r4
   12ac0:	strdeq	r2, [r1], -r4
   12ac4:	strdeq	r2, [r1], -r4
   12ac8:	strdeq	r2, [r1], -r4
   12acc:	strdeq	r2, [r1], -r4
   12ad0:	strdeq	r2, [r1], -r4
   12ad4:	strdeq	r2, [r1], -r4
   12ad8:	strdeq	r2, [r1], -r4
   12adc:	strdeq	r2, [r1], -r4
   12ae0:	strdeq	r2, [r1], -r4
   12ae4:	strdeq	r2, [r1], -r4
   12ae8:	strdeq	r2, [r1], -r4
   12aec:	strdeq	r2, [r1], -r4
   12af0:	strdeq	r2, [r1], -r4
   12af4:	andeq	r2, r1, r4, asr #28
   12af8:	andeq	r2, r1, ip, lsl #30
   12afc:	strdeq	r2, [r1], -r4
   12b00:	strdeq	r2, [r1], -r4
   12b04:	strdeq	r2, [r1], -r4
   12b08:	strdeq	r2, [r1], -r4
   12b0c:	strdeq	r2, [r1], -r4
   12b10:	strdeq	r2, [r1], -r4
   12b14:	strdeq	r2, [r1], -r4
   12b18:	strdeq	r2, [r1], -r4
   12b1c:	strdeq	r2, [r1], -r4
   12b20:	strdeq	r2, [r1], -r4
   12b24:	strdeq	r2, [r1], -r4
   12b28:	strdeq	r2, [r1], -r4
   12b2c:	strdeq	r2, [r1], -r4
   12b30:	strdeq	r2, [r1], -r4
   12b34:	strdeq	r2, [r1], -r4
   12b38:	strdeq	r2, [r1], -r4
   12b3c:	strdeq	r2, [r1], -r4
   12b40:	strdeq	r2, [r1], -r4
   12b44:	strdeq	r2, [r1], -r4
   12b48:	strdeq	r2, [r1], -r4
   12b4c:	strdeq	r2, [r1], -r4
   12b50:	strdeq	r2, [r1], -r4
   12b54:	strdeq	r2, [r1], -r4
   12b58:	strdeq	r2, [r1], -r4
   12b5c:	strdeq	r2, [r1], -r4
   12b60:	strdeq	r2, [r1], -r4
   12b64:	strdeq	r2, [r1], -r4
   12b68:	andeq	r2, r1, ip, lsl sp
   12b6c:	strdeq	r2, [r1], -r4
   12b70:	strdeq	r2, [r1], -r4
   12b74:	strdeq	r2, [r1], -r4
   12b78:	strdeq	r2, [r1], -r4
   12b7c:	strdeq	r2, [r1], -r4
   12b80:	strdeq	r2, [r1], -r4
   12b84:	strdeq	r2, [r1], -r4
   12b88:	strdeq	r2, [r1], -r4
   12b8c:	strdeq	r2, [r1], -r4
   12b90:	strdeq	r2, [r1], -r4
   12b94:	strdeq	r2, [r1], -r4
   12b98:	strdeq	r2, [r1], -r4
   12b9c:	strdeq	r2, [r1], -r4
   12ba0:	strdeq	r2, [r1], -r4
   12ba4:	strdeq	r2, [r1], -r4
   12ba8:	strdeq	r2, [r1], -r4
   12bac:	strdeq	r2, [r1], -r4
   12bb0:	strdeq	r2, [r1], -r4
   12bb4:	strdeq	r2, [r1], -r4
   12bb8:	strdeq	r2, [r1], -r4
   12bbc:	strdeq	r2, [r1], -r4
   12bc0:	strdeq	r2, [r1], -r4
   12bc4:	strdeq	r2, [r1], -r4
   12bc8:	strdeq	r2, [r1], -r4
   12bcc:	strdeq	r2, [r1], -r4
   12bd0:	strdeq	r2, [r1], -r4
   12bd4:	strdeq	r2, [r1], -r4
   12bd8:	strdeq	r2, [r1], -r4
   12bdc:	strdeq	r2, [r1], -r4
   12be0:	strdeq	r2, [r1], -r4
   12be4:			; <UNDEFINED> instruction: 0x00012cb0
   12be8:	strdeq	r2, [r1], -r4
   12bec:			; <UNDEFINED> instruction: 0x00012cb0
   12bf0:	ldrdeq	r2, [r1], -ip
   12bf4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bf8:	tst	r0, #1
   12bfc:	bne	12c28 <__assert_fail@plt+0x1c2c>
   12c00:	ubfx	r0, r4, #5, #3
   12c04:	ldr	r1, [fp, #16]
   12c08:	ldr	r0, [r1, r0, lsl #2]
   12c0c:	and	r1, r4, #31
   12c10:	mov	r2, #1
   12c14:	tst	r0, r2, lsl r1
   12c18:	beq	12c28 <__assert_fail@plt+0x1c2c>
   12c1c:	mov	r0, r4
   12c20:	mov	r1, r6
   12c24:	b	12c3c <__assert_fail@plt+0x1c40>
   12c28:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12c2c:	cmp	r0, #0
   12c30:	mov	r0, r4
   12c34:	mov	r1, r6
   12c38:	beq	12f74 <__assert_fail@plt+0x1f78>
   12c3c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c40:	tst	r2, #1
   12c44:	bne	13538 <__assert_fail@plt+0x253c>
   12c48:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12c4c:	subs	r2, r2, #2
   12c50:	movwne	r2, #1
   12c54:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c58:	orr	r2, r2, r3
   12c5c:	tst	r2, #1
   12c60:	bne	12c9c <__assert_fail@plt+0x1ca0>
   12c64:	cmp	r8, sl
   12c68:	movcc	r2, #39	; 0x27
   12c6c:	strbcc	r2, [r5, r8]
   12c70:	add	r2, r8, #1
   12c74:	cmp	r2, sl
   12c78:	movcc	r3, #36	; 0x24
   12c7c:	strbcc	r3, [r5, r2]
   12c80:	add	r2, r8, #2
   12c84:	cmp	r2, sl
   12c88:	movcc	r3, #39	; 0x27
   12c8c:	strbcc	r3, [r5, r2]
   12c90:	add	r8, r8, #3
   12c94:	mov	r2, #1
   12c98:	str	r2, [fp, #-56]	; 0xffffffc8
   12c9c:	cmp	r8, sl
   12ca0:	movcc	r2, #92	; 0x5c
   12ca4:	strbcc	r2, [r5, r8]
   12ca8:	add	r8, r8, #1
   12cac:	b	12fb8 <__assert_fail@plt+0x1fbc>
   12cb0:	cmp	lr, #1
   12cb4:	beq	12cdc <__assert_fail@plt+0x1ce0>
   12cb8:	mov	r6, #0
   12cbc:	cmn	lr, #1
   12cc0:	bne	12ce8 <__assert_fail@plt+0x1cec>
   12cc4:	ldrb	r0, [ip, #1]
   12cc8:	cmp	r0, #0
   12ccc:	beq	12cdc <__assert_fail@plt+0x1ce0>
   12cd0:	mvn	lr, #0
   12cd4:	mov	r9, #0
   12cd8:	b	12bf4 <__assert_fail@plt+0x1bf8>
   12cdc:	mov	r6, #0
   12ce0:	cmp	r7, #0
   12ce4:	beq	12cf0 <__assert_fail@plt+0x1cf4>
   12ce8:	mov	r9, #0
   12cec:	b	12bf4 <__assert_fail@plt+0x1bf8>
   12cf0:	mov	r1, #1
   12cf4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cf8:	cmp	r0, #2
   12cfc:	bne	12d14 <__assert_fail@plt+0x1d18>
   12d00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d04:	tst	r0, #1
   12d08:	mov	r6, r1
   12d0c:	beq	12bf4 <__assert_fail@plt+0x1bf8>
   12d10:	b	13538 <__assert_fail@plt+0x253c>
   12d14:	mov	r6, r1
   12d18:	b	12bf4 <__assert_fail@plt+0x1bf8>
   12d1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d20:	cmp	r0, #2
   12d24:	bne	12f58 <__assert_fail@plt+0x1f5c>
   12d28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d2c:	tst	r0, #1
   12d30:	bne	13538 <__assert_fail@plt+0x253c>
   12d34:	mov	r9, #0
   12d38:	b	12f6c <__assert_fail@plt+0x1f70>
   12d3c:	mov	r0, #102	; 0x66
   12d40:	b	12fe0 <__assert_fail@plt+0x1fe4>
   12d44:	mov	r2, #116	; 0x74
   12d48:	b	12d58 <__assert_fail@plt+0x1d5c>
   12d4c:	mov	r0, #98	; 0x62
   12d50:	b	12fe0 <__assert_fail@plt+0x1fe4>
   12d54:	mov	r2, #114	; 0x72
   12d58:	ldr	r0, [sp, #72]	; 0x48
   12d5c:	tst	r0, #1
   12d60:	mov	r0, r2
   12d64:	bne	12fe0 <__assert_fail@plt+0x1fe4>
   12d68:	b	13538 <__assert_fail@plt+0x253c>
   12d6c:	ldr	r0, [sp, #92]	; 0x5c
   12d70:	tst	r0, #1
   12d74:	beq	12ffc <__assert_fail@plt+0x2000>
   12d78:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d7c:	tst	r0, #1
   12d80:	bne	13538 <__assert_fail@plt+0x253c>
   12d84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d88:	subs	r0, r0, #2
   12d8c:	movwne	r0, #1
   12d90:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12d94:	orr	r0, r0, r1
   12d98:	tst	r0, #1
   12d9c:	bne	12dd8 <__assert_fail@plt+0x1ddc>
   12da0:	cmp	r8, sl
   12da4:	movcc	r0, #39	; 0x27
   12da8:	strbcc	r0, [r5, r8]
   12dac:	add	r0, r8, #1
   12db0:	cmp	r0, sl
   12db4:	movcc	r1, #36	; 0x24
   12db8:	strbcc	r1, [r5, r0]
   12dbc:	add	r0, r8, #2
   12dc0:	cmp	r0, sl
   12dc4:	movcc	r1, #39	; 0x27
   12dc8:	strbcc	r1, [r5, r0]
   12dcc:	add	r8, r8, #3
   12dd0:	mov	r0, #1
   12dd4:	str	r0, [fp, #-56]	; 0xffffffc8
   12dd8:	cmp	r8, sl
   12ddc:	movcc	r0, #92	; 0x5c
   12de0:	strbcc	r0, [r5, r8]
   12de4:	add	r0, r8, #1
   12de8:	mov	r6, #0
   12dec:	mov	r9, #1
   12df0:	mov	r4, #48	; 0x30
   12df4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12df8:	cmp	r1, #2
   12dfc:	beq	131c0 <__assert_fail@plt+0x21c4>
   12e00:	add	r1, r7, #1
   12e04:	cmp	r1, lr
   12e08:	bcs	131c0 <__assert_fail@plt+0x21c4>
   12e0c:	ldrb	r1, [ip, r1]
   12e10:	sub	r1, r1, #48	; 0x30
   12e14:	uxtb	r1, r1
   12e18:	cmp	r1, #9
   12e1c:	bhi	131c0 <__assert_fail@plt+0x21c4>
   12e20:	cmp	r0, sl
   12e24:	movcc	r1, #48	; 0x30
   12e28:	strbcc	r1, [r5, r0]
   12e2c:	add	r0, r8, #2
   12e30:	cmp	r0, sl
   12e34:	movcc	r1, #48	; 0x30
   12e38:	strbcc	r1, [r5, r0]
   12e3c:	add	r8, r8, #3
   12e40:	b	12bf4 <__assert_fail@plt+0x1bf8>
   12e44:	mov	r9, #0
   12e48:	mov	r4, #63	; 0x3f
   12e4c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e50:	cmp	r0, #5
   12e54:	beq	131c8 <__assert_fail@plt+0x21cc>
   12e58:	cmp	r0, #2
   12e5c:	bne	13270 <__assert_fail@plt+0x2274>
   12e60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e64:	tst	r0, #1
   12e68:	mov	r6, #0
   12e6c:	beq	12bf4 <__assert_fail@plt+0x1bf8>
   12e70:	b	13538 <__assert_fail@plt+0x253c>
   12e74:	mov	r0, #118	; 0x76
   12e78:	b	12fe0 <__assert_fail@plt+0x1fe4>
   12e7c:	mov	r4, #39	; 0x27
   12e80:	mov	r0, #1
   12e84:	str	r0, [sp, #64]	; 0x40
   12e88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e8c:	cmp	r0, #2
   12e90:	bne	13018 <__assert_fail@plt+0x201c>
   12e94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e98:	tst	r0, #1
   12e9c:	bne	13538 <__assert_fail@plt+0x253c>
   12ea0:	ldr	r2, [sp, #84]	; 0x54
   12ea4:	cmp	r2, #0
   12ea8:	mov	r0, r2
   12eac:	movwne	r0, #1
   12eb0:	clz	r1, sl
   12eb4:	lsr	r1, r1, #5
   12eb8:	orrs	r0, r0, r1
   12ebc:	moveq	r2, sl
   12ec0:	str	r2, [sp, #84]	; 0x54
   12ec4:	moveq	sl, r0
   12ec8:	cmp	r8, sl
   12ecc:	movcc	r0, #39	; 0x27
   12ed0:	strbcc	r0, [r5, r8]
   12ed4:	add	r0, r8, #1
   12ed8:	cmp	r0, sl
   12edc:	movcc	r1, #92	; 0x5c
   12ee0:	strbcc	r1, [r5, r0]
   12ee4:	add	r0, r8, #2
   12ee8:	cmp	r0, sl
   12eec:	movcc	r1, #39	; 0x27
   12ef0:	strbcc	r1, [r5, r0]
   12ef4:	add	r8, r8, #3
   12ef8:	mov	r0, #0
   12efc:	str	r0, [fp, #-56]	; 0xffffffc8
   12f00:	mov	r9, #0
   12f04:	mov	r6, #1
   12f08:	b	12bf4 <__assert_fail@plt+0x1bf8>
   12f0c:	ldr	r0, [sp, #44]	; 0x2c
   12f10:	cmp	r0, #1
   12f14:	bne	13020 <__assert_fail@plt+0x2024>
   12f18:	str	lr, [sp, #32]
   12f1c:	bl	10f18 <__ctype_b_loc@plt>
   12f20:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f24:	ldr	r0, [r0]
   12f28:	add	r0, r0, r4, lsl #1
   12f2c:	ldrb	r0, [r0, #1]
   12f30:	ubfx	r6, r0, #6, #1
   12f34:	mov	r2, #1
   12f38:	ldr	r0, [sp, #60]	; 0x3c
   12f3c:	orr	r1, r6, r0
   12f40:	cmp	r2, #1
   12f44:	bhi	13278 <__assert_fail@plt+0x227c>
   12f48:	tst	r1, #1
   12f4c:	beq	13278 <__assert_fail@plt+0x227c>
   12f50:	ldr	lr, [sp, #32]
   12f54:	b	12bf4 <__assert_fail@plt+0x1bf8>
   12f58:	mov	r9, #0
   12f5c:	mov	r0, #92	; 0x5c
   12f60:	ldr	r1, [sp, #56]	; 0x38
   12f64:	cmp	r1, #0
   12f68:	beq	12fe0 <__assert_fail@plt+0x1fe4>
   12f6c:	mov	r4, #92	; 0x5c
   12f70:	mov	r6, #0
   12f74:	cmp	r9, #0
   12f78:	bne	12fb0 <__assert_fail@plt+0x1fb4>
   12f7c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12f80:	tst	r0, #1
   12f84:	beq	12fb0 <__assert_fail@plt+0x1fb4>
   12f88:	cmp	r8, sl
   12f8c:	movcc	r0, #39	; 0x27
   12f90:	strbcc	r0, [r5, r8]
   12f94:	add	r0, r8, #1
   12f98:	cmp	r0, sl
   12f9c:	movcc	r1, #39	; 0x27
   12fa0:	strbcc	r1, [r5, r0]
   12fa4:	add	r8, r8, #2
   12fa8:	mov	r0, #0
   12fac:	str	r0, [fp, #-56]	; 0xffffffc8
   12fb0:	mov	r1, r6
   12fb4:	mov	r0, r4
   12fb8:	cmp	r8, sl
   12fbc:	strbcc	r0, [r5, r8]
   12fc0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12fc4:	and	r0, r0, r1
   12fc8:	str	r0, [fp, #-48]	; 0xffffffd0
   12fcc:	add	r8, r8, #1
   12fd0:	add	r7, r7, #1
   12fd4:	cmn	lr, #1
   12fd8:	bne	1292c <__assert_fail@plt+0x1930>
   12fdc:	b	12938 <__assert_fail@plt+0x193c>
   12fe0:	mov	r9, #0
   12fe4:	ldr	r1, [sp, #92]	; 0x5c
   12fe8:	tst	r1, #1
   12fec:	mov	r6, #0
   12ff0:	mov	r1, #0
   12ff4:	beq	12bf4 <__assert_fail@plt+0x1bf8>
   12ff8:	b	12c3c <__assert_fail@plt+0x1c40>
   12ffc:	mov	r4, #0
   13000:	ldr	r0, [sp, #40]	; 0x28
   13004:	cmp	r0, #0
   13008:	mov	r9, #0
   1300c:	mov	r6, #0
   13010:	beq	12bf4 <__assert_fail@plt+0x1bf8>
   13014:	b	12fd0 <__assert_fail@plt+0x1fd4>
   13018:	mov	r6, #1
   1301c:	b	12bf4 <__assert_fail@plt+0x1bf8>
   13020:	mov	r0, #0
   13024:	str	r0, [fp, #-36]	; 0xffffffdc
   13028:	str	r0, [fp, #-40]	; 0xffffffd8
   1302c:	cmn	lr, #1
   13030:	bne	13044 <__assert_fail@plt+0x2048>
   13034:	mov	r0, ip
   13038:	bl	10f3c <strlen@plt>
   1303c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13040:	mov	lr, r0
   13044:	ldr	r0, [sp, #76]	; 0x4c
   13048:	add	r0, r0, r7
   1304c:	str	r0, [sp, #24]
   13050:	mov	r6, #1
   13054:	mov	r2, #0
   13058:	sub	r0, fp, #40	; 0x28
   1305c:	mov	r3, r0
   13060:	str	r5, [sp, #28]
   13064:	str	lr, [sp, #32]
   13068:	b	130ac <__assert_fail@plt+0x20b0>
   1306c:	ldr	r5, [sp, #52]	; 0x34
   13070:	add	r5, r0, r5
   13074:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13078:	bl	10e58 <iswprint@plt>
   1307c:	cmp	r0, #0
   13080:	movwne	r0, #1
   13084:	and	r6, r6, r0
   13088:	sub	r0, fp, #40	; 0x28
   1308c:	bl	10e10 <mbsinit@plt>
   13090:	sub	r3, fp, #40	; 0x28
   13094:	mov	r2, r5
   13098:	ldr	lr, [sp, #32]
   1309c:	cmp	r0, #0
   130a0:	ldr	r5, [sp, #28]
   130a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   130a8:	bne	12f38 <__assert_fail@plt+0x1f3c>
   130ac:	str	r2, [sp, #52]	; 0x34
   130b0:	add	r0, r2, r7
   130b4:	add	r1, ip, r0
   130b8:	str	r0, [sp, #48]	; 0x30
   130bc:	sub	r2, lr, r0
   130c0:	sub	r0, fp, #44	; 0x2c
   130c4:	bl	15064 <__assert_fail@plt+0x4068>
   130c8:	cmp	r0, #0
   130cc:	beq	13444 <__assert_fail@plt+0x2448>
   130d0:	cmn	r0, #1
   130d4:	beq	13400 <__assert_fail@plt+0x2404>
   130d8:	cmn	r0, #2
   130dc:	ldr	lr, [sp, #32]
   130e0:	beq	13408 <__assert_fail@plt+0x240c>
   130e4:	cmp	r0, #2
   130e8:	mov	r1, #0
   130ec:	movwcc	r1, #1
   130f0:	ldr	r2, [sp, #68]	; 0x44
   130f4:	eor	r2, r2, #1
   130f8:	orrs	r1, r2, r1
   130fc:	bne	1306c <__assert_fail@plt+0x2070>
   13100:	ldr	r1, [sp, #52]	; 0x34
   13104:	ldr	r2, [sp, #24]
   13108:	add	r1, r2, r1
   1310c:	sub	r2, r0, #1
   13110:	b	13120 <__assert_fail@plt+0x2124>
   13114:	add	r1, r1, #1
   13118:	subs	r2, r2, #1
   1311c:	beq	1306c <__assert_fail@plt+0x2070>
   13120:	ldrb	r3, [r1]
   13124:	sub	r3, r3, #91	; 0x5b
   13128:	cmp	r3, #33	; 0x21
   1312c:	bhi	13114 <__assert_fail@plt+0x2118>
   13130:	add	r5, pc, #0
   13134:	ldr	pc, [r5, r3, lsl #2]
   13138:	andeq	r3, r1, r0, lsr r5
   1313c:	andeq	r3, r1, r0, lsr r5
   13140:	andeq	r3, r1, r4, lsl r1
   13144:	andeq	r3, r1, r0, lsr r5
   13148:	andeq	r3, r1, r4, lsl r1
   1314c:	andeq	r3, r1, r0, lsr r5
   13150:	andeq	r3, r1, r4, lsl r1
   13154:	andeq	r3, r1, r4, lsl r1
   13158:	andeq	r3, r1, r4, lsl r1
   1315c:	andeq	r3, r1, r4, lsl r1
   13160:	andeq	r3, r1, r4, lsl r1
   13164:	andeq	r3, r1, r4, lsl r1
   13168:	andeq	r3, r1, r4, lsl r1
   1316c:	andeq	r3, r1, r4, lsl r1
   13170:	andeq	r3, r1, r4, lsl r1
   13174:	andeq	r3, r1, r4, lsl r1
   13178:	andeq	r3, r1, r4, lsl r1
   1317c:	andeq	r3, r1, r4, lsl r1
   13180:	andeq	r3, r1, r4, lsl r1
   13184:	andeq	r3, r1, r4, lsl r1
   13188:	andeq	r3, r1, r4, lsl r1
   1318c:	andeq	r3, r1, r4, lsl r1
   13190:	andeq	r3, r1, r4, lsl r1
   13194:	andeq	r3, r1, r4, lsl r1
   13198:	andeq	r3, r1, r4, lsl r1
   1319c:	andeq	r3, r1, r4, lsl r1
   131a0:	andeq	r3, r1, r4, lsl r1
   131a4:	andeq	r3, r1, r4, lsl r1
   131a8:	andeq	r3, r1, r4, lsl r1
   131ac:	andeq	r3, r1, r4, lsl r1
   131b0:	andeq	r3, r1, r4, lsl r1
   131b4:	andeq	r3, r1, r4, lsl r1
   131b8:	andeq	r3, r1, r4, lsl r1
   131bc:	andeq	r3, r1, r0, lsr r5
   131c0:	mov	r8, r0
   131c4:	b	12bf4 <__assert_fail@plt+0x1bf8>
   131c8:	ldr	r0, [sp, #36]	; 0x24
   131cc:	cmp	r0, #0
   131d0:	beq	13270 <__assert_fail@plt+0x2274>
   131d4:	add	r0, r7, #2
   131d8:	cmp	r0, lr
   131dc:	bcs	13270 <__assert_fail@plt+0x2274>
   131e0:	add	r1, r7, ip
   131e4:	ldrb	r1, [r1, #1]
   131e8:	cmp	r1, #63	; 0x3f
   131ec:	bne	13270 <__assert_fail@plt+0x2274>
   131f0:	ldrb	r1, [ip, r0]
   131f4:	sub	r2, r1, #33	; 0x21
   131f8:	cmp	r2, #29
   131fc:	bhi	13270 <__assert_fail@plt+0x2274>
   13200:	mov	r3, #1
   13204:	movw	r6, #20929	; 0x51c1
   13208:	movt	r6, #14336	; 0x3800
   1320c:	tst	r6, r3, lsl r2
   13210:	beq	13270 <__assert_fail@plt+0x2274>
   13214:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13218:	tst	r2, #1
   1321c:	bne	13538 <__assert_fail@plt+0x253c>
   13220:	cmp	r8, sl
   13224:	movcc	r2, #63	; 0x3f
   13228:	strbcc	r2, [r5, r8]
   1322c:	add	r2, r8, #1
   13230:	cmp	r2, sl
   13234:	movcc	r3, #34	; 0x22
   13238:	strbcc	r3, [r5, r2]
   1323c:	add	r2, r8, #2
   13240:	cmp	r2, sl
   13244:	movcc	r3, #34	; 0x22
   13248:	strbcc	r3, [r5, r2]
   1324c:	add	r2, r8, #3
   13250:	cmp	r2, sl
   13254:	movcc	r3, #63	; 0x3f
   13258:	strbcc	r3, [r5, r2]
   1325c:	add	r8, r8, #4
   13260:	mov	r7, r0
   13264:	mov	r4, r1
   13268:	mov	r6, #0
   1326c:	b	12bf4 <__assert_fail@plt+0x1bf8>
   13270:	mov	r6, #0
   13274:	b	12bf4 <__assert_fail@plt+0x1bf8>
   13278:	add	r0, r2, r7
   1327c:	str	r0, [sp, #52]	; 0x34
   13280:	mov	r2, #0
   13284:	ldr	lr, [sp, #32]
   13288:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1328c:	str	r1, [sp, #48]	; 0x30
   13290:	tst	r1, #1
   13294:	bne	13370 <__assert_fail@plt+0x2374>
   13298:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1329c:	tst	r1, #1
   132a0:	bne	13538 <__assert_fail@plt+0x253c>
   132a4:	mov	r3, r0
   132a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132ac:	subs	r1, r0, #2
   132b0:	movwne	r1, #1
   132b4:	orr	r1, r1, r3
   132b8:	tst	r1, #1
   132bc:	bne	132f4 <__assert_fail@plt+0x22f8>
   132c0:	cmp	r8, sl
   132c4:	movcc	r0, #39	; 0x27
   132c8:	strbcc	r0, [r5, r8]
   132cc:	add	r2, r8, #1
   132d0:	cmp	r2, sl
   132d4:	movcc	r0, #36	; 0x24
   132d8:	strbcc	r0, [r5, r2]
   132dc:	add	r2, r8, #2
   132e0:	cmp	r2, sl
   132e4:	movcc	r0, #39	; 0x27
   132e8:	strbcc	r0, [r5, r2]
   132ec:	add	r8, r8, #3
   132f0:	mov	r3, #1
   132f4:	cmp	r8, sl
   132f8:	movcc	r1, #92	; 0x5c
   132fc:	strbcc	r1, [r5, r8]
   13300:	add	r2, r8, #1
   13304:	cmp	r2, sl
   13308:	bcs	1331c <__assert_fail@plt+0x2320>
   1330c:	uxtb	r1, r4
   13310:	mov	r0, #48	; 0x30
   13314:	orr	r1, r0, r1, lsr #6
   13318:	strb	r1, [r5, r2]
   1331c:	add	r2, r8, #2
   13320:	cmp	r2, sl
   13324:	lsrcc	r1, r4, #3
   13328:	movcc	r0, #6
   1332c:	bficc	r1, r0, #3, #29
   13330:	strbcc	r1, [r5, r2]
   13334:	mov	r0, #6
   13338:	bfi	r4, r0, #3, #29
   1333c:	add	r8, r8, #3
   13340:	mov	r2, #1
   13344:	mov	r0, r3
   13348:	b	13394 <__assert_fail@plt+0x2398>
   1334c:	cmp	r8, sl
   13350:	strbcc	r4, [r5, r8]
   13354:	ldr	r1, [sp, #76]	; 0x4c
   13358:	ldrb	r4, [r1, r7]
   1335c:	add	r8, r8, #1
   13360:	mov	r7, r3
   13364:	ldr	r1, [sp, #48]	; 0x30
   13368:	tst	r1, #1
   1336c:	beq	13298 <__assert_fail@plt+0x229c>
   13370:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13374:	tst	r1, #1
   13378:	beq	1338c <__assert_fail@plt+0x2390>
   1337c:	cmp	r8, sl
   13380:	movcc	r1, #92	; 0x5c
   13384:	strbcc	r1, [r5, r8]
   13388:	add	r8, r8, #1
   1338c:	mov	r1, #0
   13390:	str	r1, [fp, #-52]	; 0xffffffcc
   13394:	and	r9, r2, #1
   13398:	add	r3, r7, #1
   1339c:	ldr	r1, [sp, #52]	; 0x34
   133a0:	cmp	r1, r3
   133a4:	bls	133e8 <__assert_fail@plt+0x23ec>
   133a8:	cmp	r9, #0
   133ac:	movwne	r9, #1
   133b0:	mvn	r1, r0
   133b4:	orr	r1, r1, r9
   133b8:	tst	r1, #1
   133bc:	bne	1334c <__assert_fail@plt+0x2350>
   133c0:	cmp	r8, sl
   133c4:	movcc	r1, #39	; 0x27
   133c8:	strbcc	r1, [r5, r8]
   133cc:	add	r1, r8, #1
   133d0:	cmp	r1, sl
   133d4:	movcc	r0, #39	; 0x27
   133d8:	strbcc	r0, [r5, r1]
   133dc:	add	r8, r8, #2
   133e0:	mov	r0, #0
   133e4:	b	1334c <__assert_fail@plt+0x2350>
   133e8:	str	r0, [fp, #-56]	; 0xffffffc8
   133ec:	cmp	r9, #0
   133f0:	movwne	r9, #1
   133f4:	cmp	r9, #0
   133f8:	beq	12f7c <__assert_fail@plt+0x1f80>
   133fc:	b	12fb0 <__assert_fail@plt+0x1fb4>
   13400:	mov	r6, #0
   13404:	b	13444 <__assert_fail@plt+0x2448>
   13408:	mov	r6, #0
   1340c:	ldr	r0, [sp, #48]	; 0x30
   13410:	cmp	r0, lr
   13414:	bcs	13444 <__assert_fail@plt+0x2448>
   13418:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1341c:	add	r0, ip, r7
   13420:	ldr	r2, [sp, #52]	; 0x34
   13424:	ldrb	r1, [r0, r2]
   13428:	cmp	r1, #0
   1342c:	beq	12f38 <__assert_fail@plt+0x1f3c>
   13430:	add	r2, r2, #1
   13434:	add	r1, r7, r2
   13438:	cmp	r1, lr
   1343c:	bcc	13424 <__assert_fail@plt+0x2428>
   13440:	b	12f38 <__assert_fail@plt+0x1f3c>
   13444:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13448:	ldr	r2, [sp, #52]	; 0x34
   1344c:	b	12f38 <__assert_fail@plt+0x1f3c>
   13450:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13454:	eor	r0, r1, #2
   13458:	orr	r0, r0, r8
   1345c:	clz	r0, r0
   13460:	lsr	r0, r0, #5
   13464:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13468:	tst	r3, r0
   1346c:	bne	13538 <__assert_fail@plt+0x253c>
   13470:	mov	r6, r5
   13474:	subs	r0, r1, #2
   13478:	movwne	r0, #1
   1347c:	orr	r0, r3, r0
   13480:	tst	r0, #1
   13484:	ldr	r2, [sp, #92]	; 0x5c
   13488:	ldreq	r0, [sp, #64]	; 0x40
   1348c:	eoreq	r0, r0, #1
   13490:	tsteq	r0, #1
   13494:	bne	134d4 <__assert_fail@plt+0x24d8>
   13498:	mov	r9, lr
   1349c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   134a0:	tst	r0, #1
   134a4:	bne	135a0 <__assert_fail@plt+0x25a4>
   134a8:	ldr	r0, [sp, #84]	; 0x54
   134ac:	cmp	r0, #0
   134b0:	beq	134d4 <__assert_fail@plt+0x24d8>
   134b4:	mov	r0, #0
   134b8:	str	r0, [fp, #-48]	; 0xffffffd0
   134bc:	mov	r1, #2
   134c0:	cmp	sl, #0
   134c4:	mov	r0, r2
   134c8:	mov	r4, r3
   134cc:	ldr	r7, [sp, #84]	; 0x54
   134d0:	beq	126ac <__assert_fail@plt+0x16b0>
   134d4:	ldr	r1, [fp, #-84]	; 0xffffffac
   134d8:	clz	r0, r1
   134dc:	lsr	r0, r0, #5
   134e0:	orr	r0, r0, r3
   134e4:	tst	r0, #1
   134e8:	bne	13514 <__assert_fail@plt+0x2518>
   134ec:	ldrb	r0, [r1]
   134f0:	cmp	r0, #0
   134f4:	beq	13514 <__assert_fail@plt+0x2518>
   134f8:	add	r1, r1, #1
   134fc:	cmp	r8, sl
   13500:	strbcc	r0, [r6, r8]
   13504:	add	r8, r8, #1
   13508:	ldrb	r0, [r1], #1
   1350c:	cmp	r0, #0
   13510:	bne	134fc <__assert_fail@plt+0x2500>
   13514:	cmp	r8, sl
   13518:	movcc	r0, #0
   1351c:	strbcc	r0, [r6, r8]
   13520:	b	13594 <__assert_fail@plt+0x2598>
   13524:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13528:	mov	lr, r4
   1352c:	b	13538 <__assert_fail@plt+0x253c>
   13530:	ldr	r5, [sp, #28]
   13534:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13538:	mov	r0, #0
   1353c:	ldr	r1, [fp, #12]
   13540:	bic	r1, r1, #2
   13544:	mov	r2, #2
   13548:	ldr	r3, [sp, #92]	; 0x5c
   1354c:	tst	r3, #1
   13550:	movwne	r2, #4
   13554:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13558:	cmp	r3, #2
   1355c:	movne	r2, r3
   13560:	str	r2, [sp]
   13564:	str	r1, [sp, #4]
   13568:	str	r0, [sp, #8]
   1356c:	ldr	r0, [sp, #80]	; 0x50
   13570:	str	r0, [sp, #12]
   13574:	ldr	r0, [sp, #88]	; 0x58
   13578:	str	r0, [sp, #16]
   1357c:	mov	r0, r5
   13580:	mov	r1, sl
   13584:	mov	r2, ip
   13588:	mov	r3, lr
   1358c:	bl	12620 <__assert_fail@plt+0x1624>
   13590:	mov	r8, r0
   13594:	mov	r0, r8
   13598:	sub	sp, fp, #28
   1359c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a0:	mov	r0, #5
   135a4:	str	r0, [sp]
   135a8:	ldr	r0, [fp, #12]
   135ac:	str	r0, [sp, #4]
   135b0:	ldr	r0, [fp, #16]
   135b4:	str	r0, [sp, #8]
   135b8:	ldr	r0, [sp, #80]	; 0x50
   135bc:	str	r0, [sp, #12]
   135c0:	ldr	r0, [sp, #88]	; 0x58
   135c4:	str	r0, [sp, #16]
   135c8:	mov	r0, r6
   135cc:	ldr	r1, [sp, #84]	; 0x54
   135d0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   135d4:	mov	r3, r9
   135d8:	b	1358c <__assert_fail@plt+0x2590>
   135dc:	bl	10fe4 <abort@plt>
   135e0:	mov	r3, r2
   135e4:	mov	r2, #0
   135e8:	b	135ec <__assert_fail@plt+0x25f0>
   135ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135f0:	add	fp, sp, #28
   135f4:	sub	sp, sp, #36	; 0x24
   135f8:	mov	r4, r2
   135fc:	str	r2, [sp, #24]
   13600:	mov	r5, r1
   13604:	mov	r6, r0
   13608:	str	r0, [sp, #20]
   1360c:	movw	r8, #24944	; 0x6170
   13610:	movt	r8, #2
   13614:	cmp	r3, #0
   13618:	movne	r8, r3
   1361c:	bl	10f48 <__errno_location@plt>
   13620:	str	r0, [sp, #28]
   13624:	ldm	r8, {r3, r9}
   13628:	ldr	r1, [r8, #40]	; 0x28
   1362c:	ldr	r2, [r8, #44]	; 0x2c
   13630:	ldr	r7, [r0]
   13634:	str	r7, [sp, #32]
   13638:	add	sl, r8, #8
   1363c:	cmp	r4, #0
   13640:	orreq	r9, r9, #1
   13644:	stm	sp, {r3, r9, sl}
   13648:	str	r1, [sp, #12]
   1364c:	str	r2, [sp, #16]
   13650:	mov	r0, #0
   13654:	mov	r1, #0
   13658:	mov	r2, r6
   1365c:	mov	r3, r5
   13660:	mov	r7, r5
   13664:	bl	12620 <__assert_fail@plt+0x1624>
   13668:	mov	r5, r0
   1366c:	add	r4, r0, #1
   13670:	mov	r0, r4
   13674:	bl	147a4 <__assert_fail@plt+0x37a8>
   13678:	mov	r6, r0
   1367c:	ldr	r0, [r8]
   13680:	ldr	r1, [r8, #40]	; 0x28
   13684:	ldr	r2, [r8, #44]	; 0x2c
   13688:	stm	sp, {r0, r9, sl}
   1368c:	str	r1, [sp, #12]
   13690:	str	r2, [sp, #16]
   13694:	mov	r0, r6
   13698:	mov	r1, r4
   1369c:	ldr	r2, [sp, #20]
   136a0:	mov	r3, r7
   136a4:	bl	12620 <__assert_fail@plt+0x1624>
   136a8:	ldr	r0, [sp, #24]
   136ac:	ldr	r1, [sp, #32]
   136b0:	ldr	r2, [sp, #28]
   136b4:	str	r1, [r2]
   136b8:	cmp	r0, #0
   136bc:	strne	r5, [r0]
   136c0:	mov	r0, r6
   136c4:	sub	sp, fp, #28
   136c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   136d0:	add	fp, sp, #24
   136d4:	movw	r8, #24808	; 0x60e8
   136d8:	movt	r8, #2
   136dc:	ldr	r4, [r8]
   136e0:	movw	r5, #24812	; 0x60ec
   136e4:	movt	r5, #2
   136e8:	ldr	r0, [r5]
   136ec:	cmp	r0, #2
   136f0:	blt	1371c <__assert_fail@plt+0x2720>
   136f4:	add	r7, r4, #12
   136f8:	mov	r6, #0
   136fc:	ldr	r0, [r7, r6, lsl #3]
   13700:	bl	14fb4 <__assert_fail@plt+0x3fb8>
   13704:	add	r0, r6, #1
   13708:	ldr	r1, [r5]
   1370c:	add	r2, r6, #2
   13710:	cmp	r2, r1
   13714:	mov	r6, r0
   13718:	blt	136fc <__assert_fail@plt+0x2700>
   1371c:	ldr	r0, [r4, #4]
   13720:	movw	r9, #24992	; 0x61a0
   13724:	movt	r9, #2
   13728:	cmp	r0, r9
   1372c:	movw	r7, #24816	; 0x60f0
   13730:	movt	r7, #2
   13734:	beq	13744 <__assert_fail@plt+0x2748>
   13738:	bl	14fb4 <__assert_fail@plt+0x3fb8>
   1373c:	mov	r0, #256	; 0x100
   13740:	stm	r7, {r0, r9}
   13744:	cmp	r4, r7
   13748:	beq	13758 <__assert_fail@plt+0x275c>
   1374c:	mov	r0, r4
   13750:	bl	14fb4 <__assert_fail@plt+0x3fb8>
   13754:	str	r7, [r8]
   13758:	mov	r0, #1
   1375c:	str	r0, [r5]
   13760:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13764:	movw	r3, #24944	; 0x6170
   13768:	movt	r3, #2
   1376c:	mvn	r2, #0
   13770:	b	13774 <__assert_fail@plt+0x2778>
   13774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13778:	add	fp, sp, #28
   1377c:	sub	sp, sp, #44	; 0x2c
   13780:	mov	r7, r3
   13784:	str	r2, [sp, #36]	; 0x24
   13788:	str	r1, [sp, #32]
   1378c:	mov	r5, r0
   13790:	bl	10f48 <__errno_location@plt>
   13794:	cmp	r5, #0
   13798:	bmi	13908 <__assert_fail@plt+0x290c>
   1379c:	cmn	r5, #-2147483647	; 0x80000001
   137a0:	beq	13908 <__assert_fail@plt+0x290c>
   137a4:	movw	r4, #24808	; 0x60e8
   137a8:	movt	r4, #2
   137ac:	ldr	r6, [r4]
   137b0:	str	r0, [sp, #28]
   137b4:	ldr	r0, [r0]
   137b8:	str	r0, [sp, #24]
   137bc:	movw	r8, #24812	; 0x60ec
   137c0:	movt	r8, #2
   137c4:	ldr	r1, [r8]
   137c8:	cmp	r1, r5
   137cc:	ble	137d8 <__assert_fail@plt+0x27dc>
   137d0:	mov	sl, r6
   137d4:	b	13844 <__assert_fail@plt+0x2848>
   137d8:	str	r1, [fp, #-32]	; 0xffffffe0
   137dc:	mov	r0, #8
   137e0:	str	r0, [sp]
   137e4:	movw	r9, #24816	; 0x60f0
   137e8:	movt	r9, #2
   137ec:	subs	r0, r6, r9
   137f0:	movne	r0, r6
   137f4:	sub	r1, r5, r1
   137f8:	add	r2, r1, #1
   137fc:	sub	r1, fp, #32
   13800:	mvn	r3, #-2147483648	; 0x80000000
   13804:	bl	14880 <__assert_fail@plt+0x3884>
   13808:	mov	sl, r0
   1380c:	str	r0, [r4]
   13810:	cmp	r6, r9
   13814:	bne	13820 <__assert_fail@plt+0x2824>
   13818:	ldrd	r0, [r9]
   1381c:	stm	sl, {r0, r1}
   13820:	ldr	r1, [r8]
   13824:	add	r0, sl, r1, lsl #3
   13828:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1382c:	sub	r1, r2, r1
   13830:	lsl	r2, r1, #3
   13834:	mov	r1, #0
   13838:	bl	10f60 <memset@plt>
   1383c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13840:	str	r0, [r8]
   13844:	mov	r9, sl
   13848:	ldr	r6, [r9, r5, lsl #3]!
   1384c:	ldr	r4, [r9, #4]!
   13850:	ldm	r7, {r0, r1}
   13854:	ldr	r2, [r7, #40]	; 0x28
   13858:	ldr	r3, [r7, #44]	; 0x2c
   1385c:	orr	r8, r1, #1
   13860:	add	r1, r7, #8
   13864:	stm	sp, {r0, r8}
   13868:	str	r1, [sp, #20]
   1386c:	add	r0, sp, #8
   13870:	stm	r0, {r1, r2, r3}
   13874:	mov	r0, r4
   13878:	mov	r1, r6
   1387c:	ldr	r2, [sp, #32]
   13880:	ldr	r3, [sp, #36]	; 0x24
   13884:	bl	12620 <__assert_fail@plt+0x1624>
   13888:	cmp	r6, r0
   1388c:	bhi	138f0 <__assert_fail@plt+0x28f4>
   13890:	add	r6, r0, #1
   13894:	str	r6, [sl, r5, lsl #3]
   13898:	movw	r0, #24992	; 0x61a0
   1389c:	movt	r0, #2
   138a0:	cmp	r4, r0
   138a4:	beq	138b0 <__assert_fail@plt+0x28b4>
   138a8:	mov	r0, r4
   138ac:	bl	14fb4 <__assert_fail@plt+0x3fb8>
   138b0:	mov	r0, r6
   138b4:	bl	147a4 <__assert_fail@plt+0x37a8>
   138b8:	mov	r4, r0
   138bc:	str	r0, [r9]
   138c0:	ldr	r0, [r7]
   138c4:	ldr	r1, [r7, #40]	; 0x28
   138c8:	ldr	r2, [r7, #44]	; 0x2c
   138cc:	stm	sp, {r0, r8}
   138d0:	ldr	r0, [sp, #20]
   138d4:	add	r3, sp, #8
   138d8:	stm	r3, {r0, r1, r2}
   138dc:	mov	r0, r4
   138e0:	mov	r1, r6
   138e4:	ldr	r2, [sp, #32]
   138e8:	ldr	r3, [sp, #36]	; 0x24
   138ec:	bl	12620 <__assert_fail@plt+0x1624>
   138f0:	ldr	r0, [sp, #28]
   138f4:	ldr	r1, [sp, #24]
   138f8:	str	r1, [r0]
   138fc:	mov	r0, r4
   13900:	sub	sp, fp, #28
   13904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13908:	bl	10fe4 <abort@plt>
   1390c:	movw	r3, #24944	; 0x6170
   13910:	movt	r3, #2
   13914:	b	13774 <__assert_fail@plt+0x2778>
   13918:	mov	r1, r0
   1391c:	mov	r0, #0
   13920:	b	13764 <__assert_fail@plt+0x2768>
   13924:	mov	r2, r1
   13928:	mov	r1, r0
   1392c:	mov	r0, #0
   13930:	b	1390c <__assert_fail@plt+0x2910>
   13934:	push	{r4, r5, r6, sl, fp, lr}
   13938:	add	fp, sp, #16
   1393c:	sub	sp, sp, #48	; 0x30
   13940:	mov	r4, r2
   13944:	mov	r5, r0
   13948:	mov	r6, sp
   1394c:	mov	r0, r6
   13950:	bl	13970 <__assert_fail@plt+0x2974>
   13954:	mov	r0, r5
   13958:	mov	r1, r4
   1395c:	mvn	r2, #0
   13960:	mov	r3, r6
   13964:	bl	13774 <__assert_fail@plt+0x2778>
   13968:	sub	sp, fp, #16
   1396c:	pop	{r4, r5, r6, sl, fp, pc}
   13970:	push	{fp, lr}
   13974:	mov	fp, sp
   13978:	vmov.i32	q8, #0	; 0x00000000
   1397c:	mov	r2, #32
   13980:	mov	r3, r0
   13984:	vst1.32	{d16-d17}, [r3], r2
   13988:	vst1.32	{d16-d17}, [r3]
   1398c:	add	r2, r0, #16
   13990:	vst1.32	{d16-d17}, [r2]
   13994:	cmp	r1, #10
   13998:	strne	r1, [r0]
   1399c:	popne	{fp, pc}
   139a0:	bl	10fe4 <abort@plt>
   139a4:	push	{r4, r5, r6, r7, fp, lr}
   139a8:	add	fp, sp, #16
   139ac:	sub	sp, sp, #48	; 0x30
   139b0:	mov	r4, r3
   139b4:	mov	r5, r2
   139b8:	mov	r6, r0
   139bc:	mov	r7, sp
   139c0:	mov	r0, r7
   139c4:	bl	13970 <__assert_fail@plt+0x2974>
   139c8:	mov	r0, r6
   139cc:	mov	r1, r5
   139d0:	mov	r2, r4
   139d4:	mov	r3, r7
   139d8:	bl	13774 <__assert_fail@plt+0x2778>
   139dc:	sub	sp, fp, #16
   139e0:	pop	{r4, r5, r6, r7, fp, pc}
   139e4:	mov	r2, r1
   139e8:	mov	r1, r0
   139ec:	mov	r0, #0
   139f0:	b	13934 <__assert_fail@plt+0x2938>
   139f4:	mov	r3, r2
   139f8:	mov	r2, r1
   139fc:	mov	r1, r0
   13a00:	mov	r0, #0
   13a04:	b	139a4 <__assert_fail@plt+0x29a8>
   13a08:	push	{r4, r5, r6, sl, fp, lr}
   13a0c:	add	fp, sp, #16
   13a10:	sub	sp, sp, #48	; 0x30
   13a14:	mov	r4, r1
   13a18:	mov	r5, r0
   13a1c:	movw	r0, #24944	; 0x6170
   13a20:	movt	r0, #2
   13a24:	add	r1, r0, #16
   13a28:	mov	r3, #32
   13a2c:	vld1.64	{d16-d17}, [r0], r3
   13a30:	vld1.64	{d18-d19}, [r1]
   13a34:	mov	r6, sp
   13a38:	add	r1, r6, #16
   13a3c:	vld1.64	{d20-d21}, [r0]
   13a40:	vst1.64	{d18-d19}, [r1]
   13a44:	mov	r0, r6
   13a48:	vst1.64	{d16-d17}, [r0], r3
   13a4c:	vst1.64	{d20-d21}, [r0]
   13a50:	mov	r0, r6
   13a54:	mov	r1, r2
   13a58:	mov	r2, #1
   13a5c:	bl	12514 <__assert_fail@plt+0x1518>
   13a60:	mov	r0, #0
   13a64:	mov	r1, r5
   13a68:	mov	r2, r4
   13a6c:	mov	r3, r6
   13a70:	bl	13774 <__assert_fail@plt+0x2778>
   13a74:	sub	sp, fp, #16
   13a78:	pop	{r4, r5, r6, sl, fp, pc}
   13a7c:	mov	r2, r1
   13a80:	mvn	r1, #0
   13a84:	b	13a08 <__assert_fail@plt+0x2a0c>
   13a88:	mov	r1, #58	; 0x3a
   13a8c:	b	13a7c <__assert_fail@plt+0x2a80>
   13a90:	mov	r2, #58	; 0x3a
   13a94:	b	13a08 <__assert_fail@plt+0x2a0c>
   13a98:	push	{r4, r5, r6, sl, fp, lr}
   13a9c:	add	fp, sp, #16
   13aa0:	sub	sp, sp, #48	; 0x30
   13aa4:	mov	r4, r2
   13aa8:	mov	r5, r0
   13aac:	mov	r6, sp
   13ab0:	mov	r0, r6
   13ab4:	bl	13970 <__assert_fail@plt+0x2974>
   13ab8:	mov	r0, r6
   13abc:	mov	r1, #58	; 0x3a
   13ac0:	mov	r2, #1
   13ac4:	bl	12514 <__assert_fail@plt+0x1518>
   13ac8:	mov	r0, r5
   13acc:	mov	r1, r4
   13ad0:	mvn	r2, #0
   13ad4:	mov	r3, r6
   13ad8:	bl	13774 <__assert_fail@plt+0x2778>
   13adc:	sub	sp, fp, #16
   13ae0:	pop	{r4, r5, r6, sl, fp, pc}
   13ae4:	push	{fp, lr}
   13ae8:	mov	fp, sp
   13aec:	sub	sp, sp, #8
   13af0:	mvn	ip, #0
   13af4:	str	ip, [sp]
   13af8:	bl	13b04 <__assert_fail@plt+0x2b08>
   13afc:	mov	sp, fp
   13b00:	pop	{fp, pc}
   13b04:	push	{r4, r5, r6, r7, fp, lr}
   13b08:	add	fp, sp, #16
   13b0c:	sub	sp, sp, #48	; 0x30
   13b10:	mov	r7, r3
   13b14:	mov	r5, r0
   13b18:	movw	r0, #24944	; 0x6170
   13b1c:	movt	r0, #2
   13b20:	add	r3, r0, #16
   13b24:	mov	r4, #32
   13b28:	vld1.64	{d16-d17}, [r0], r4
   13b2c:	vld1.64	{d18-d19}, [r3]
   13b30:	mov	r6, sp
   13b34:	add	r3, r6, #16
   13b38:	vld1.64	{d20-d21}, [r0]
   13b3c:	vst1.64	{d18-d19}, [r3]
   13b40:	mov	r0, r6
   13b44:	vst1.64	{d16-d17}, [r0], r4
   13b48:	vst1.64	{d20-d21}, [r0]
   13b4c:	mov	r0, r6
   13b50:	bl	1256c <__assert_fail@plt+0x1570>
   13b54:	ldr	r2, [fp, #8]
   13b58:	mov	r0, r5
   13b5c:	mov	r1, r7
   13b60:	mov	r3, r6
   13b64:	bl	13774 <__assert_fail@plt+0x2778>
   13b68:	sub	sp, fp, #16
   13b6c:	pop	{r4, r5, r6, r7, fp, pc}
   13b70:	mov	r3, r2
   13b74:	mov	r2, r1
   13b78:	mov	r1, r0
   13b7c:	mov	r0, #0
   13b80:	b	13ae4 <__assert_fail@plt+0x2ae8>
   13b84:	push	{fp, lr}
   13b88:	mov	fp, sp
   13b8c:	sub	sp, sp, #8
   13b90:	mov	ip, r2
   13b94:	mov	r2, r1
   13b98:	mov	r1, r0
   13b9c:	str	r3, [sp]
   13ba0:	mov	r0, #0
   13ba4:	mov	r3, ip
   13ba8:	bl	13b04 <__assert_fail@plt+0x2b08>
   13bac:	mov	sp, fp
   13bb0:	pop	{fp, pc}
   13bb4:	movw	r3, #24824	; 0x60f8
   13bb8:	movt	r3, #2
   13bbc:	b	13774 <__assert_fail@plt+0x2778>
   13bc0:	mov	r2, r1
   13bc4:	mov	r1, r0
   13bc8:	mov	r0, #0
   13bcc:	b	13bb4 <__assert_fail@plt+0x2bb8>
   13bd0:	mvn	r2, #0
   13bd4:	b	13bb4 <__assert_fail@plt+0x2bb8>
   13bd8:	mov	r1, r0
   13bdc:	mov	r0, #0
   13be0:	b	13bd0 <__assert_fail@plt+0x2bd4>
   13be4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13be8:	add	fp, sp, #24
   13bec:	sub	sp, sp, #16
   13bf0:	mov	r4, r1
   13bf4:	mov	r5, r0
   13bf8:	mov	r7, #0
   13bfc:	mov	r0, #0
   13c00:	mov	r1, r5
   13c04:	mov	r2, #5
   13c08:	bl	10e28 <dcgettext@plt>
   13c0c:	cmp	r0, r5
   13c10:	beq	13c1c <__assert_fail@plt+0x2c20>
   13c14:	sub	sp, fp, #24
   13c18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c1c:	bl	1502c <__assert_fail@plt+0x4030>
   13c20:	mov	r6, r0
   13c24:	mov	r8, #56	; 0x38
   13c28:	mov	r0, #45	; 0x2d
   13c2c:	stm	sp, {r0, r8}
   13c30:	str	r7, [sp, #8]
   13c34:	str	r7, [sp, #12]
   13c38:	mov	r0, r6
   13c3c:	mov	r1, #85	; 0x55
   13c40:	mov	r2, #84	; 0x54
   13c44:	mov	r3, #70	; 0x46
   13c48:	bl	13ce0 <__assert_fail@plt+0x2ce4>
   13c4c:	cmp	r0, #0
   13c50:	beq	13c6c <__assert_fail@plt+0x2c70>
   13c54:	ldrb	r1, [r5]
   13c58:	movw	r2, #22442	; 0x57aa
   13c5c:	movt	r2, #1
   13c60:	movw	r0, #22446	; 0x57ae
   13c64:	movt	r0, #1
   13c68:	b	13cb0 <__assert_fail@plt+0x2cb4>
   13c6c:	mov	r0, #48	; 0x30
   13c70:	mov	r1, #51	; 0x33
   13c74:	str	r8, [sp]
   13c78:	stmib	sp, {r0, r1}
   13c7c:	str	r0, [sp, #12]
   13c80:	mov	r0, r6
   13c84:	mov	r1, #71	; 0x47
   13c88:	mov	r2, #66	; 0x42
   13c8c:	mov	r3, #49	; 0x31
   13c90:	bl	13ce0 <__assert_fail@plt+0x2ce4>
   13c94:	cmp	r0, #0
   13c98:	beq	13cc0 <__assert_fail@plt+0x2cc4>
   13c9c:	ldrb	r1, [r5]
   13ca0:	movw	r2, #22450	; 0x57b2
   13ca4:	movt	r2, #1
   13ca8:	movw	r0, #22454	; 0x57b6
   13cac:	movt	r0, #1
   13cb0:	cmp	r1, #96	; 0x60
   13cb4:	moveq	r0, r2
   13cb8:	sub	sp, fp, #24
   13cbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cc0:	movw	r1, #22436	; 0x57a4
   13cc4:	movt	r1, #1
   13cc8:	movw	r0, #22440	; 0x57a8
   13ccc:	movt	r0, #1
   13cd0:	cmp	r4, #9
   13cd4:	moveq	r0, r1
   13cd8:	sub	sp, fp, #24
   13cdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ce0:	push	{r4, r5, r6, r7, fp, lr}
   13ce4:	add	fp, sp, #16
   13ce8:	sub	sp, sp, #16
   13cec:	mov	r4, r3
   13cf0:	mov	r5, r2
   13cf4:	mov	r7, r1
   13cf8:	mov	r6, r0
   13cfc:	mov	r0, r1
   13d00:	bl	14ec0 <__assert_fail@plt+0x3ec4>
   13d04:	ldrb	r1, [r6]
   13d08:	cmp	r0, #0
   13d0c:	andne	r1, r1, #223	; 0xdf
   13d10:	mov	r0, #0
   13d14:	cmp	r1, r7
   13d18:	bne	13d50 <__assert_fail@plt+0x2d54>
   13d1c:	cmp	r7, #0
   13d20:	beq	13d58 <__assert_fail@plt+0x2d5c>
   13d24:	ldr	r0, [fp, #20]
   13d28:	ldr	r1, [fp, #16]
   13d2c:	ldr	r2, [fp, #12]
   13d30:	ldr	r3, [fp, #8]
   13d34:	str	r2, [sp]
   13d38:	str	r1, [sp, #4]
   13d3c:	str	r0, [sp, #8]
   13d40:	mov	r0, r6
   13d44:	mov	r1, r5
   13d48:	mov	r2, r4
   13d4c:	bl	13d64 <__assert_fail@plt+0x2d68>
   13d50:	sub	sp, fp, #16
   13d54:	pop	{r4, r5, r6, r7, fp, pc}
   13d58:	mov	r0, #1
   13d5c:	sub	sp, fp, #16
   13d60:	pop	{r4, r5, r6, r7, fp, pc}
   13d64:	push	{r4, r5, r6, r7, fp, lr}
   13d68:	add	fp, sp, #16
   13d6c:	sub	sp, sp, #8
   13d70:	mov	r4, r3
   13d74:	mov	r5, r2
   13d78:	mov	r7, r1
   13d7c:	mov	r6, r0
   13d80:	mov	r0, r1
   13d84:	bl	14ec0 <__assert_fail@plt+0x3ec4>
   13d88:	ldrb	r1, [r6, #1]
   13d8c:	cmp	r0, #0
   13d90:	andne	r1, r1, #223	; 0xdf
   13d94:	mov	r0, #0
   13d98:	cmp	r1, r7
   13d9c:	bne	13dcc <__assert_fail@plt+0x2dd0>
   13da0:	cmp	r7, #0
   13da4:	beq	13dd4 <__assert_fail@plt+0x2dd8>
   13da8:	ldr	r0, [fp, #16]
   13dac:	ldr	r1, [fp, #12]
   13db0:	ldr	r3, [fp, #8]
   13db4:	str	r1, [sp]
   13db8:	str	r0, [sp, #4]
   13dbc:	mov	r0, r6
   13dc0:	mov	r1, r5
   13dc4:	mov	r2, r4
   13dc8:	bl	13de0 <__assert_fail@plt+0x2de4>
   13dcc:	sub	sp, fp, #16
   13dd0:	pop	{r4, r5, r6, r7, fp, pc}
   13dd4:	mov	r0, #1
   13dd8:	sub	sp, fp, #16
   13ddc:	pop	{r4, r5, r6, r7, fp, pc}
   13de0:	push	{r4, r5, r6, r7, fp, lr}
   13de4:	add	fp, sp, #16
   13de8:	sub	sp, sp, #8
   13dec:	mov	r4, r3
   13df0:	mov	r5, r2
   13df4:	mov	r7, r1
   13df8:	mov	r6, r0
   13dfc:	mov	r0, r1
   13e00:	bl	14ec0 <__assert_fail@plt+0x3ec4>
   13e04:	ldrb	r1, [r6, #2]
   13e08:	cmp	r0, #0
   13e0c:	andne	r1, r1, #223	; 0xdf
   13e10:	mov	r0, #0
   13e14:	cmp	r1, r7
   13e18:	bne	13e40 <__assert_fail@plt+0x2e44>
   13e1c:	cmp	r7, #0
   13e20:	beq	13e48 <__assert_fail@plt+0x2e4c>
   13e24:	ldr	r0, [fp, #12]
   13e28:	ldr	r3, [fp, #8]
   13e2c:	str	r0, [sp]
   13e30:	mov	r0, r6
   13e34:	mov	r1, r5
   13e38:	mov	r2, r4
   13e3c:	bl	13e54 <__assert_fail@plt+0x2e58>
   13e40:	sub	sp, fp, #16
   13e44:	pop	{r4, r5, r6, r7, fp, pc}
   13e48:	mov	r0, #1
   13e4c:	sub	sp, fp, #16
   13e50:	pop	{r4, r5, r6, r7, fp, pc}
   13e54:	push	{r4, r5, r6, r7, fp, lr}
   13e58:	add	fp, sp, #16
   13e5c:	mov	r4, r3
   13e60:	mov	r5, r2
   13e64:	mov	r7, r1
   13e68:	mov	r6, r0
   13e6c:	mov	r0, r1
   13e70:	bl	14ec0 <__assert_fail@plt+0x3ec4>
   13e74:	ldrb	r1, [r6, #3]
   13e78:	ldr	r3, [fp, #8]
   13e7c:	cmp	r0, #0
   13e80:	andne	r1, r1, #223	; 0xdf
   13e84:	mov	r0, #0
   13e88:	cmp	r1, r7
   13e8c:	bne	13eb0 <__assert_fail@plt+0x2eb4>
   13e90:	cmp	r7, #0
   13e94:	beq	13eac <__assert_fail@plt+0x2eb0>
   13e98:	mov	r0, r6
   13e9c:	mov	r1, r5
   13ea0:	mov	r2, r4
   13ea4:	pop	{r4, r5, r6, r7, fp, lr}
   13ea8:	b	13eb4 <__assert_fail@plt+0x2eb8>
   13eac:	mov	r0, #1
   13eb0:	pop	{r4, r5, r6, r7, fp, pc}
   13eb4:	push	{r4, r5, r6, r7, fp, lr}
   13eb8:	add	fp, sp, #16
   13ebc:	mov	r4, r3
   13ec0:	mov	r5, r2
   13ec4:	mov	r7, r1
   13ec8:	mov	r6, r0
   13ecc:	mov	r0, r1
   13ed0:	bl	14ec0 <__assert_fail@plt+0x3ec4>
   13ed4:	ldrb	r1, [r6, #4]
   13ed8:	cmp	r0, #0
   13edc:	andne	r1, r1, #223	; 0xdf
   13ee0:	mov	r0, #0
   13ee4:	cmp	r1, r7
   13ee8:	bne	13f0c <__assert_fail@plt+0x2f10>
   13eec:	cmp	r7, #0
   13ef0:	beq	13f08 <__assert_fail@plt+0x2f0c>
   13ef4:	mov	r0, r6
   13ef8:	mov	r1, r5
   13efc:	mov	r2, r4
   13f00:	pop	{r4, r5, r6, r7, fp, lr}
   13f04:	b	13f10 <__assert_fail@plt+0x2f14>
   13f08:	mov	r0, #1
   13f0c:	pop	{r4, r5, r6, r7, fp, pc}
   13f10:	push	{r4, r5, r6, sl, fp, lr}
   13f14:	add	fp, sp, #16
   13f18:	mov	r4, r2
   13f1c:	mov	r6, r1
   13f20:	mov	r5, r0
   13f24:	mov	r0, r1
   13f28:	bl	14ec0 <__assert_fail@plt+0x3ec4>
   13f2c:	ldrb	r1, [r5, #5]
   13f30:	cmp	r0, #0
   13f34:	andne	r1, r1, #223	; 0xdf
   13f38:	mov	r0, #0
   13f3c:	cmp	r1, r6
   13f40:	bne	13f60 <__assert_fail@plt+0x2f64>
   13f44:	cmp	r6, #0
   13f48:	beq	13f5c <__assert_fail@plt+0x2f60>
   13f4c:	mov	r0, r5
   13f50:	mov	r1, r4
   13f54:	pop	{r4, r5, r6, sl, fp, lr}
   13f58:	b	13f64 <__assert_fail@plt+0x2f68>
   13f5c:	mov	r0, #1
   13f60:	pop	{r4, r5, r6, sl, fp, pc}
   13f64:	push	{r4, r5, fp, lr}
   13f68:	add	fp, sp, #8
   13f6c:	mov	r5, r1
   13f70:	mov	r4, r0
   13f74:	mov	r0, r1
   13f78:	bl	14ec0 <__assert_fail@plt+0x3ec4>
   13f7c:	ldrb	r1, [r4, #6]
   13f80:	cmp	r0, #0
   13f84:	andne	r1, r1, #223	; 0xdf
   13f88:	mov	r0, #0
   13f8c:	cmp	r1, r5
   13f90:	popne	{r4, r5, fp, pc}
   13f94:	cmp	r5, #0
   13f98:	beq	13fa8 <__assert_fail@plt+0x2fac>
   13f9c:	mov	r0, r4
   13fa0:	pop	{r4, r5, fp, lr}
   13fa4:	b	13fb0 <__assert_fail@plt+0x2fb4>
   13fa8:	mov	r0, #1
   13fac:	pop	{r4, r5, fp, pc}
   13fb0:	push	{r4, sl, fp, lr}
   13fb4:	add	fp, sp, #8
   13fb8:	mov	r4, r0
   13fbc:	mov	r0, #0
   13fc0:	bl	14ec0 <__assert_fail@plt+0x3ec4>
   13fc4:	ldrb	r1, [r4, #7]
   13fc8:	cmp	r0, #0
   13fcc:	beq	13fe0 <__assert_fail@plt+0x2fe4>
   13fd0:	tst	r1, #223	; 0xdf
   13fd4:	bne	13fe8 <__assert_fail@plt+0x2fec>
   13fd8:	mov	r0, #1
   13fdc:	pop	{r4, sl, fp, pc}
   13fe0:	cmp	r1, #0
   13fe4:	beq	13fd8 <__assert_fail@plt+0x2fdc>
   13fe8:	mov	r0, #0
   13fec:	pop	{r4, sl, fp, pc}
   13ff0:	mov	r1, #0
   13ff4:	str	r1, [r0]
   13ff8:	str	r1, [r0, #4]
   13ffc:	bx	lr
   14000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14004:	add	fp, sp, #28
   14008:	sub	sp, sp, #52	; 0x34
   1400c:	mov	r8, r3
   14010:	mov	r5, r0
   14014:	vmov.i32	q8, #0	; 0x00000000
   14018:	add	r0, sp, #16
   1401c:	vst1.64	{d16-d17}, [r0]!
   14020:	vst1.64	{d16-d17}, [r0]
   14024:	cmp	r2, #0
   14028:	beq	1404c <__assert_fail@plt+0x3050>
   1402c:	mov	r4, r2
   14030:	mov	r6, r1
   14034:	add	r7, sp, #16
   14038:	ldrb	r0, [r6], #1
   1403c:	mov	r1, r7
   14040:	bl	1413c <__assert_fail@plt+0x3140>
   14044:	subs	r4, r4, #1
   14048:	bne	14038 <__assert_fail@plt+0x303c>
   1404c:	mov	r0, r5
   14050:	bl	10e1c <getc_unlocked@plt>
   14054:	mov	r6, r0
   14058:	cmp	r0, #0
   1405c:	bmi	1408c <__assert_fail@plt+0x3090>
   14060:	add	r4, sp, #16
   14064:	mov	r0, r6
   14068:	mov	r1, r4
   1406c:	bl	14158 <__assert_fail@plt+0x315c>
   14070:	cmp	r0, #0
   14074:	beq	1408c <__assert_fail@plt+0x3090>
   14078:	mov	r0, r5
   1407c:	bl	10e1c <getc_unlocked@plt>
   14080:	mov	r6, r0
   14084:	cmn	r0, #1
   14088:	bgt	14064 <__assert_fail@plt+0x3068>
   1408c:	ldm	r8, {r0, r7}
   14090:	str	r0, [sp, #12]
   14094:	cmp	r6, #0
   14098:	bmi	1412c <__assert_fail@plt+0x3130>
   1409c:	str	r8, [sp, #8]
   140a0:	mov	r8, #0
   140a4:	add	r9, sp, #12
   140a8:	add	sl, sp, #16
   140ac:	mov	r4, #0
   140b0:	ldr	r0, [sp, #12]
   140b4:	cmp	r4, r0
   140b8:	bne	140dc <__assert_fail@plt+0x30e0>
   140bc:	mov	r0, #1
   140c0:	str	r0, [sp]
   140c4:	mov	r0, r7
   140c8:	mov	r1, r9
   140cc:	mov	r2, #1
   140d0:	mvn	r3, #0
   140d4:	bl	14880 <__assert_fail@plt+0x3884>
   140d8:	mov	r7, r0
   140dc:	tst	r8, #1
   140e0:	bne	14114 <__assert_fail@plt+0x3118>
   140e4:	mov	r0, r6
   140e8:	mov	r1, sl
   140ec:	bl	14158 <__assert_fail@plt+0x315c>
   140f0:	cmp	r0, #0
   140f4:	bne	14114 <__assert_fail@plt+0x3118>
   140f8:	strb	r6, [r7, r4]
   140fc:	add	r4, r4, #1
   14100:	mov	r0, r5
   14104:	bl	10e1c <getc_unlocked@plt>
   14108:	mov	r6, r0
   1410c:	lsr	r8, r0, #31
   14110:	b	140b0 <__assert_fail@plt+0x30b4>
   14114:	mov	r0, #0
   14118:	strb	r0, [r7, r4]
   1411c:	ldr	r0, [sp, #12]
   14120:	ldr	r1, [sp, #8]
   14124:	stm	r1, {r0, r7}
   14128:	b	14130 <__assert_fail@plt+0x3134>
   1412c:	mvn	r4, #0
   14130:	mov	r0, r4
   14134:	sub	sp, fp, #28
   14138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1413c:	lsr	r2, r0, #5
   14140:	ldr	ip, [r1, r2, lsl #2]
   14144:	and	r0, r0, #31
   14148:	mov	r3, #1
   1414c:	orr	r0, ip, r3, lsl r0
   14150:	str	r0, [r1, r2, lsl #2]
   14154:	bx	lr
   14158:	lsr	r2, r0, #5
   1415c:	ldr	r1, [r1, r2, lsl #2]
   14160:	and	r0, r0, #31
   14164:	mov	r2, #1
   14168:	and	r0, r1, r2, lsl r0
   1416c:	cmp	r0, #0
   14170:	movwne	r0, #1
   14174:	bx	lr
   14178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1417c:	add	fp, sp, #28
   14180:	sub	sp, sp, #28
   14184:	str	r3, [sp, #12]
   14188:	str	r2, [sp, #8]
   1418c:	mov	r6, r0
   14190:	add	r4, r1, #1
   14194:	cmp	r1, #0
   14198:	movweq	r4, #64	; 0x40
   1419c:	str	r4, [sp, #16]
   141a0:	mov	r0, r4
   141a4:	mov	r1, #4
   141a8:	bl	14804 <__assert_fail@plt+0x3808>
   141ac:	mov	r5, r0
   141b0:	mov	r0, r4
   141b4:	mov	r1, #4
   141b8:	bl	14804 <__assert_fail@plt+0x3808>
   141bc:	mov	r4, r0
   141c0:	add	r0, sp, #20
   141c4:	bl	13ff0 <__assert_fail@plt+0x2ff4>
   141c8:	mov	r7, #0
   141cc:	mov	r0, r6
   141d0:	ldr	r1, [sp, #8]
   141d4:	ldr	r2, [sp, #12]
   141d8:	add	r3, sp, #20
   141dc:	bl	14000 <__assert_fail@plt+0x3004>
   141e0:	mov	sl, r0
   141e4:	ldr	r0, [sp, #16]
   141e8:	cmp	r7, r0
   141ec:	blt	14224 <__assert_fail@plt+0x3228>
   141f0:	mov	r0, #4
   141f4:	str	r0, [sp]
   141f8:	mov	r0, r5
   141fc:	add	r1, sp, #16
   14200:	mov	r2, #1
   14204:	mvn	r3, #0
   14208:	bl	14880 <__assert_fail@plt+0x3884>
   1420c:	mov	r5, r0
   14210:	ldr	r1, [sp, #16]
   14214:	mov	r0, r4
   14218:	mov	r2, #4
   1421c:	bl	1472c <__assert_fail@plt+0x3730>
   14220:	mov	r4, r0
   14224:	cmn	sl, #1
   14228:	beq	1425c <__assert_fail@plt+0x3260>
   1422c:	add	r8, sl, #1
   14230:	mov	r0, r8
   14234:	mov	r1, #1
   14238:	bl	14804 <__assert_fail@plt+0x3808>
   1423c:	mov	r9, r0
   14240:	str	sl, [r4, r7, lsl #2]
   14244:	ldr	r1, [sp, #24]
   14248:	mov	r2, r8
   1424c:	bl	10e04 <memcpy@plt>
   14250:	str	r9, [r5, r7, lsl #2]
   14254:	add	r7, r7, #1
   14258:	b	141cc <__assert_fail@plt+0x31d0>
   1425c:	mov	r0, #0
   14260:	str	r0, [r5, r7, lsl #2]
   14264:	str	r0, [r4, r7, lsl #2]
   14268:	ldr	r0, [sp, #24]
   1426c:	bl	14fb4 <__assert_fail@plt+0x3fb8>
   14270:	ldr	r0, [fp, #8]
   14274:	str	r5, [r0]
   14278:	ldr	r0, [fp, #12]
   1427c:	cmp	r0, #0
   14280:	beq	1428c <__assert_fail@plt+0x3290>
   14284:	str	r4, [r0]
   14288:	b	14294 <__assert_fail@plt+0x3298>
   1428c:	mov	r0, r4
   14290:	bl	14fb4 <__assert_fail@plt+0x3fb8>
   14294:	mov	r0, r7
   14298:	sub	sp, fp, #28
   1429c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142a4:	add	fp, sp, #24
   142a8:	sub	sp, sp, #32
   142ac:	mov	r4, r2
   142b0:	mov	r8, r0
   142b4:	ldr	r6, [fp, #12]
   142b8:	ldr	r7, [fp, #8]
   142bc:	cmp	r1, #0
   142c0:	beq	142e8 <__assert_fail@plt+0x32ec>
   142c4:	mov	r5, r1
   142c8:	str	r4, [sp]
   142cc:	str	r3, [sp, #4]
   142d0:	movw	r2, #22544	; 0x5810
   142d4:	movt	r2, #1
   142d8:	mov	r0, r8
   142dc:	mov	r1, #1
   142e0:	mov	r3, r5
   142e4:	b	14300 <__assert_fail@plt+0x3304>
   142e8:	str	r3, [sp]
   142ec:	movw	r2, #22556	; 0x581c
   142f0:	movt	r2, #1
   142f4:	mov	r0, r8
   142f8:	mov	r1, #1
   142fc:	mov	r3, r4
   14300:	bl	10f84 <__fprintf_chk@plt>
   14304:	movw	r1, #22563	; 0x5823
   14308:	movt	r1, #1
   1430c:	mov	r0, #0
   14310:	mov	r2, #5
   14314:	bl	10e28 <dcgettext@plt>
   14318:	mov	r3, r0
   1431c:	movw	r0, #2022	; 0x7e6
   14320:	str	r0, [sp]
   14324:	movw	r2, #23281	; 0x5af1
   14328:	movt	r2, #1
   1432c:	mov	r0, r8
   14330:	mov	r1, #1
   14334:	bl	10f84 <__fprintf_chk@plt>
   14338:	movw	r4, #21830	; 0x5546
   1433c:	movt	r4, #1
   14340:	mov	r0, r4
   14344:	mov	r1, r8
   14348:	bl	10dbc <fputs_unlocked@plt>
   1434c:	movw	r1, #22567	; 0x5827
   14350:	movt	r1, #1
   14354:	mov	r0, #0
   14358:	mov	r2, #5
   1435c:	bl	10e28 <dcgettext@plt>
   14360:	mov	r2, r0
   14364:	movw	r3, #22738	; 0x58d2
   14368:	movt	r3, #1
   1436c:	mov	r0, r8
   14370:	mov	r1, #1
   14374:	bl	10f84 <__fprintf_chk@plt>
   14378:	mov	r0, r4
   1437c:	mov	r1, r8
   14380:	bl	10dbc <fputs_unlocked@plt>
   14384:	cmp	r6, #9
   14388:	bhi	143c4 <__assert_fail@plt+0x33c8>
   1438c:	add	r0, pc, #0
   14390:	ldr	pc, [r0, r6, lsl #2]
   14394:			; <UNDEFINED> instruction: 0x000143bc
   14398:	ldrdeq	r4, [r1], -r0
   1439c:	andeq	r4, r1, r0, lsl #8
   143a0:	andeq	r4, r1, r8, lsr #8
   143a4:	andeq	r4, r1, r0, asr r4
   143a8:	andeq	r4, r1, r8, ror r4
   143ac:	andeq	r4, r1, r0, lsr #9
   143b0:	ldrdeq	r4, [r1], -r8
   143b4:	andeq	r4, r1, r8, ror r5
   143b8:	andeq	r4, r1, r0, lsr #10
   143bc:	sub	sp, fp, #24
   143c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143c4:	movw	r1, #23091	; 0x5a33
   143c8:	movt	r1, #1
   143cc:	b	14528 <__assert_fail@plt+0x352c>
   143d0:	movw	r1, #22772	; 0x58f4
   143d4:	movt	r1, #1
   143d8:	mov	r0, #0
   143dc:	mov	r2, #5
   143e0:	bl	10e28 <dcgettext@plt>
   143e4:	mov	r2, r0
   143e8:	ldr	r3, [r7]
   143ec:	mov	r0, r8
   143f0:	mov	r1, #1
   143f4:	sub	sp, fp, #24
   143f8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   143fc:	b	10f84 <__fprintf_chk@plt>
   14400:	movw	r1, #22788	; 0x5904
   14404:	movt	r1, #1
   14408:	mov	r0, #0
   1440c:	mov	r2, #5
   14410:	bl	10e28 <dcgettext@plt>
   14414:	mov	r2, r0
   14418:	ldr	r3, [r7]
   1441c:	ldr	r0, [r7, #4]
   14420:	str	r0, [sp]
   14424:	b	14514 <__assert_fail@plt+0x3518>
   14428:	movw	r1, #22811	; 0x591b
   1442c:	movt	r1, #1
   14430:	mov	r0, #0
   14434:	mov	r2, #5
   14438:	bl	10e28 <dcgettext@plt>
   1443c:	mov	r2, r0
   14440:	ldr	r3, [r7]
   14444:	ldmib	r7, {r0, r1}
   14448:	stm	sp, {r0, r1}
   1444c:	b	14514 <__assert_fail@plt+0x3518>
   14450:	movw	r1, #22839	; 0x5937
   14454:	movt	r1, #1
   14458:	mov	r0, #0
   1445c:	mov	r2, #5
   14460:	bl	10e28 <dcgettext@plt>
   14464:	mov	r2, r0
   14468:	ldr	r3, [r7]
   1446c:	ldmib	r7, {r0, r1, r7}
   14470:	stm	sp, {r0, r1, r7}
   14474:	b	14514 <__assert_fail@plt+0x3518>
   14478:	movw	r1, #22871	; 0x5957
   1447c:	movt	r1, #1
   14480:	mov	r0, #0
   14484:	mov	r2, #5
   14488:	bl	10e28 <dcgettext@plt>
   1448c:	mov	r2, r0
   14490:	ldr	r3, [r7]
   14494:	ldmib	r7, {r0, r1, r6, r7}
   14498:	stm	sp, {r0, r1, r6, r7}
   1449c:	b	14514 <__assert_fail@plt+0x3518>
   144a0:	movw	r1, #22907	; 0x597b
   144a4:	movt	r1, #1
   144a8:	mov	r0, #0
   144ac:	mov	r2, #5
   144b0:	bl	10e28 <dcgettext@plt>
   144b4:	mov	r2, r0
   144b8:	ldr	r3, [r7]
   144bc:	ldmib	r7, {r0, r1, r6}
   144c0:	ldr	r5, [r7, #16]
   144c4:	ldr	r7, [r7, #20]
   144c8:	stm	sp, {r0, r1, r6}
   144cc:	str	r5, [sp, #12]
   144d0:	str	r7, [sp, #16]
   144d4:	b	14514 <__assert_fail@plt+0x3518>
   144d8:	movw	r1, #22947	; 0x59a3
   144dc:	movt	r1, #1
   144e0:	mov	r0, #0
   144e4:	mov	r2, #5
   144e8:	bl	10e28 <dcgettext@plt>
   144ec:	mov	r2, r0
   144f0:	ldr	r3, [r7]
   144f4:	ldmib	r7, {r0, r1, r6}
   144f8:	ldr	r5, [r7, #16]
   144fc:	ldr	r4, [r7, #20]
   14500:	ldr	r7, [r7, #24]
   14504:	stm	sp, {r0, r1, r6}
   14508:	str	r5, [sp, #12]
   1450c:	str	r4, [sp, #16]
   14510:	str	r7, [sp, #20]
   14514:	mov	r0, r8
   14518:	mov	r1, #1
   1451c:	b	145c8 <__assert_fail@plt+0x35cc>
   14520:	movw	r1, #23039	; 0x59ff
   14524:	movt	r1, #1
   14528:	mov	r0, #0
   1452c:	mov	r2, #5
   14530:	bl	10e28 <dcgettext@plt>
   14534:	mov	ip, r0
   14538:	ldr	r3, [r7]
   1453c:	ldr	r0, [r7, #4]
   14540:	ldr	r1, [r7, #8]
   14544:	ldr	r6, [r7, #12]
   14548:	ldr	r5, [r7, #16]
   1454c:	ldr	r4, [r7, #20]
   14550:	ldr	r2, [r7, #24]
   14554:	ldr	lr, [r7, #28]
   14558:	ldr	r7, [r7, #32]
   1455c:	stm	sp, {r0, r1, r6}
   14560:	str	r5, [sp, #12]
   14564:	str	r4, [sp, #16]
   14568:	str	r2, [sp, #20]
   1456c:	str	lr, [sp, #24]
   14570:	str	r7, [sp, #28]
   14574:	b	145bc <__assert_fail@plt+0x35c0>
   14578:	movw	r1, #22991	; 0x59cf
   1457c:	movt	r1, #1
   14580:	mov	r0, #0
   14584:	mov	r2, #5
   14588:	bl	10e28 <dcgettext@plt>
   1458c:	mov	ip, r0
   14590:	ldr	r3, [r7]
   14594:	ldmib	r7, {r0, r1, r6}
   14598:	ldr	r5, [r7, #16]
   1459c:	ldr	r4, [r7, #20]
   145a0:	ldr	r2, [r7, #24]
   145a4:	ldr	r7, [r7, #28]
   145a8:	stm	sp, {r0, r1, r6}
   145ac:	str	r5, [sp, #12]
   145b0:	str	r4, [sp, #16]
   145b4:	str	r2, [sp, #20]
   145b8:	str	r7, [sp, #24]
   145bc:	mov	r0, r8
   145c0:	mov	r1, #1
   145c4:	mov	r2, ip
   145c8:	bl	10f84 <__fprintf_chk@plt>
   145cc:	sub	sp, fp, #24
   145d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145d4:	push	{r4, sl, fp, lr}
   145d8:	add	fp, sp, #8
   145dc:	sub	sp, sp, #8
   145e0:	mov	lr, #0
   145e4:	ldr	ip, [fp, #8]
   145e8:	ldr	r4, [ip, lr, lsl #2]
   145ec:	add	lr, lr, #1
   145f0:	cmp	r4, #0
   145f4:	bne	145e8 <__assert_fail@plt+0x35ec>
   145f8:	sub	r4, lr, #1
   145fc:	str	ip, [sp]
   14600:	str	r4, [sp, #4]
   14604:	bl	142a0 <__assert_fail@plt+0x32a4>
   14608:	sub	sp, fp, #8
   1460c:	pop	{r4, sl, fp, pc}
   14610:	push	{r4, r5, fp, lr}
   14614:	add	fp, sp, #8
   14618:	sub	sp, sp, #48	; 0x30
   1461c:	mov	ip, #0
   14620:	ldr	r4, [fp, #8]
   14624:	add	lr, sp, #8
   14628:	ldr	r5, [r4]
   1462c:	str	r5, [lr, ip, lsl #2]
   14630:	cmp	r5, #0
   14634:	beq	1464c <__assert_fail@plt+0x3650>
   14638:	add	ip, ip, #1
   1463c:	add	r4, r4, #4
   14640:	cmp	ip, #10
   14644:	bne	14628 <__assert_fail@plt+0x362c>
   14648:	mov	ip, #10
   1464c:	str	lr, [sp]
   14650:	str	ip, [sp, #4]
   14654:	bl	142a0 <__assert_fail@plt+0x32a4>
   14658:	sub	sp, fp, #8
   1465c:	pop	{r4, r5, fp, pc}
   14660:	push	{fp, lr}
   14664:	mov	fp, sp
   14668:	sub	sp, sp, #8
   1466c:	add	ip, fp, #8
   14670:	str	ip, [sp, #4]
   14674:	str	ip, [sp]
   14678:	bl	14610 <__assert_fail@plt+0x3614>
   1467c:	mov	sp, fp
   14680:	pop	{fp, pc}
   14684:	push	{fp, lr}
   14688:	mov	fp, sp
   1468c:	movw	r0, #24900	; 0x6144
   14690:	movt	r0, #2
   14694:	ldr	r1, [r0]
   14698:	movw	r0, #21830	; 0x5546
   1469c:	movt	r0, #1
   146a0:	bl	10dbc <fputs_unlocked@plt>
   146a4:	movw	r1, #23151	; 0x5a6f
   146a8:	movt	r1, #1
   146ac:	mov	r0, #0
   146b0:	mov	r2, #5
   146b4:	bl	10e28 <dcgettext@plt>
   146b8:	mov	r1, r0
   146bc:	movw	r2, #23171	; 0x5a83
   146c0:	movt	r2, #1
   146c4:	mov	r0, #1
   146c8:	bl	10f6c <__printf_chk@plt>
   146cc:	movw	r1, #23193	; 0x5a99
   146d0:	movt	r1, #1
   146d4:	mov	r0, #0
   146d8:	mov	r2, #5
   146dc:	bl	10e28 <dcgettext@plt>
   146e0:	mov	r1, r0
   146e4:	movw	r2, #21416	; 0x53a8
   146e8:	movt	r2, #1
   146ec:	movw	r3, #21635	; 0x5483
   146f0:	movt	r3, #1
   146f4:	mov	r0, #1
   146f8:	bl	10f6c <__printf_chk@plt>
   146fc:	movw	r1, #23213	; 0x5aad
   14700:	movt	r1, #1
   14704:	mov	r0, #0
   14708:	mov	r2, #5
   1470c:	bl	10e28 <dcgettext@plt>
   14710:	mov	r1, r0
   14714:	movw	r2, #23252	; 0x5ad4
   14718:	movt	r2, #1
   1471c:	mov	r0, #1
   14720:	pop	{fp, lr}
   14724:	b	10f6c <__printf_chk@plt>
   14728:	b	1472c <__assert_fail@plt+0x3730>
   1472c:	push	{r4, r5, r6, sl, fp, lr}
   14730:	add	fp, sp, #16
   14734:	mov	r4, r2
   14738:	mov	r5, r1
   1473c:	mov	r6, r0
   14740:	bl	150c8 <__assert_fail@plt+0x40cc>
   14744:	cmp	r0, #0
   14748:	popne	{r4, r5, r6, sl, fp, pc}
   1474c:	cmp	r6, #0
   14750:	beq	14764 <__assert_fail@plt+0x3768>
   14754:	cmp	r5, #0
   14758:	cmpne	r4, #0
   1475c:	bne	14764 <__assert_fail@plt+0x3768>
   14760:	pop	{r4, r5, r6, sl, fp, pc}
   14764:	bl	14af0 <__assert_fail@plt+0x3af4>
   14768:	push	{fp, lr}
   1476c:	mov	fp, sp
   14770:	bl	14b88 <__assert_fail@plt+0x3b8c>
   14774:	pop	{fp, lr}
   14778:	b	1477c <__assert_fail@plt+0x3780>
   1477c:	cmp	r0, #0
   14780:	bxne	lr
   14784:	push	{fp, lr}
   14788:	mov	fp, sp
   1478c:	bl	14af0 <__assert_fail@plt+0x3af4>
   14790:	push	{fp, lr}
   14794:	mov	fp, sp
   14798:	bl	14ff8 <__assert_fail@plt+0x3ffc>
   1479c:	pop	{fp, lr}
   147a0:	b	1477c <__assert_fail@plt+0x3780>
   147a4:	b	14768 <__assert_fail@plt+0x376c>
   147a8:	push	{r4, r5, fp, lr}
   147ac:	add	fp, sp, #8
   147b0:	mov	r4, r1
   147b4:	mov	r5, r0
   147b8:	bl	14bb8 <__assert_fail@plt+0x3bbc>
   147bc:	cmp	r0, #0
   147c0:	popne	{r4, r5, fp, pc}
   147c4:	cmp	r5, #0
   147c8:	beq	147d8 <__assert_fail@plt+0x37dc>
   147cc:	cmp	r4, #0
   147d0:	bne	147d8 <__assert_fail@plt+0x37dc>
   147d4:	pop	{r4, r5, fp, pc}
   147d8:	bl	14af0 <__assert_fail@plt+0x3af4>
   147dc:	push	{fp, lr}
   147e0:	mov	fp, sp
   147e4:	bl	14ffc <__assert_fail@plt+0x4000>
   147e8:	pop	{fp, lr}
   147ec:	b	1477c <__assert_fail@plt+0x3780>
   147f0:	push	{fp, lr}
   147f4:	mov	fp, sp
   147f8:	bl	1500c <__assert_fail@plt+0x4010>
   147fc:	pop	{fp, lr}
   14800:	b	1477c <__assert_fail@plt+0x3780>
   14804:	mov	r2, r1
   14808:	mov	r1, r0
   1480c:	mov	r0, #0
   14810:	b	1472c <__assert_fail@plt+0x3730>
   14814:	mov	r2, r1
   14818:	mov	r1, r0
   1481c:	mov	r0, #0
   14820:	b	147f0 <__assert_fail@plt+0x37f4>
   14824:	mov	r2, #1
   14828:	b	1482c <__assert_fail@plt+0x3830>
   1482c:	push	{r4, r5, fp, lr}
   14830:	add	fp, sp, #8
   14834:	mov	r4, r1
   14838:	ldr	r5, [r1]
   1483c:	cmp	r0, #0
   14840:	beq	14858 <__assert_fail@plt+0x385c>
   14844:	mov	r1, #1
   14848:	add	r1, r1, r5, lsr #1
   1484c:	adds	r5, r5, r1
   14850:	bcc	14870 <__assert_fail@plt+0x3874>
   14854:	bl	14af0 <__assert_fail@plt+0x3af4>
   14858:	cmp	r5, #0
   1485c:	bne	14870 <__assert_fail@plt+0x3874>
   14860:	mov	r1, #64	; 0x40
   14864:	udiv	r5, r1, r2
   14868:	cmp	r2, #64	; 0x40
   1486c:	addhi	r5, r5, #1
   14870:	mov	r1, r5
   14874:	bl	1472c <__assert_fail@plt+0x3730>
   14878:	str	r5, [r4]
   1487c:	pop	{r4, r5, fp, pc}
   14880:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14884:	add	fp, sp, #24
   14888:	mov	r8, r1
   1488c:	ldr	r6, [r1]
   14890:	add	r1, r6, r6, asr #1
   14894:	cmp	r1, r6
   14898:	mvnvs	r1, #-2147483648	; 0x80000000
   1489c:	cmp	r1, r3
   148a0:	mov	r5, r1
   148a4:	movgt	r5, r3
   148a8:	cmn	r3, #1
   148ac:	movle	r5, r1
   148b0:	ldr	r4, [fp, #8]
   148b4:	cmn	r4, #1
   148b8:	ble	148e0 <__assert_fail@plt+0x38e4>
   148bc:	cmp	r4, #0
   148c0:	beq	14934 <__assert_fail@plt+0x3938>
   148c4:	cmn	r5, #1
   148c8:	ble	14908 <__assert_fail@plt+0x390c>
   148cc:	mvn	r7, #-2147483648	; 0x80000000
   148d0:	udiv	r1, r7, r4
   148d4:	cmp	r1, r5
   148d8:	bge	14934 <__assert_fail@plt+0x3938>
   148dc:	b	14944 <__assert_fail@plt+0x3948>
   148e0:	cmn	r5, #1
   148e4:	ble	14924 <__assert_fail@plt+0x3928>
   148e8:	cmn	r4, #1
   148ec:	beq	14934 <__assert_fail@plt+0x3938>
   148f0:	mov	r1, #-2147483648	; 0x80000000
   148f4:	sdiv	r1, r1, r4
   148f8:	mvn	r7, #-2147483648	; 0x80000000
   148fc:	cmp	r1, r5
   14900:	bge	14934 <__assert_fail@plt+0x3938>
   14904:	b	14944 <__assert_fail@plt+0x3948>
   14908:	beq	14934 <__assert_fail@plt+0x3938>
   1490c:	mov	r1, #-2147483648	; 0x80000000
   14910:	sdiv	r1, r1, r5
   14914:	mvn	r7, #-2147483648	; 0x80000000
   14918:	cmp	r1, r4
   1491c:	bge	14934 <__assert_fail@plt+0x3938>
   14920:	b	14944 <__assert_fail@plt+0x3948>
   14924:	mvn	r7, #-2147483648	; 0x80000000
   14928:	sdiv	r1, r7, r4
   1492c:	cmp	r5, r1
   14930:	blt	14944 <__assert_fail@plt+0x3948>
   14934:	mul	r1, r5, r4
   14938:	mov	r7, #64	; 0x40
   1493c:	cmp	r1, #63	; 0x3f
   14940:	bgt	1494c <__assert_fail@plt+0x3950>
   14944:	sdiv	r5, r7, r4
   14948:	mul	r1, r5, r4
   1494c:	cmp	r0, #0
   14950:	moveq	r7, #0
   14954:	streq	r7, [r8]
   14958:	sub	r7, r5, r6
   1495c:	cmp	r7, r2
   14960:	bge	14a0c <__assert_fail@plt+0x3a10>
   14964:	add	r5, r6, r2
   14968:	mov	r1, #0
   1496c:	cmp	r5, r3
   14970:	mov	r2, #0
   14974:	movwgt	r2, #1
   14978:	cmn	r3, #1
   1497c:	movwgt	r1, #1
   14980:	cmp	r5, r6
   14984:	bvs	149f4 <__assert_fail@plt+0x39f8>
   14988:	ands	r1, r1, r2
   1498c:	bne	149f4 <__assert_fail@plt+0x39f8>
   14990:	cmn	r4, #1
   14994:	ble	149bc <__assert_fail@plt+0x39c0>
   14998:	cmp	r4, #0
   1499c:	beq	14a08 <__assert_fail@plt+0x3a0c>
   149a0:	cmn	r5, #1
   149a4:	ble	149e0 <__assert_fail@plt+0x39e4>
   149a8:	mvn	r1, #-2147483648	; 0x80000000
   149ac:	udiv	r1, r1, r4
   149b0:	cmp	r1, r5
   149b4:	bge	14a08 <__assert_fail@plt+0x3a0c>
   149b8:	b	149f4 <__assert_fail@plt+0x39f8>
   149bc:	cmn	r5, #1
   149c0:	ble	149f8 <__assert_fail@plt+0x39fc>
   149c4:	cmn	r4, #1
   149c8:	beq	14a08 <__assert_fail@plt+0x3a0c>
   149cc:	mov	r1, #-2147483648	; 0x80000000
   149d0:	sdiv	r1, r1, r4
   149d4:	cmp	r1, r5
   149d8:	bge	14a08 <__assert_fail@plt+0x3a0c>
   149dc:	b	149f4 <__assert_fail@plt+0x39f8>
   149e0:	beq	14a08 <__assert_fail@plt+0x3a0c>
   149e4:	mov	r1, #-2147483648	; 0x80000000
   149e8:	sdiv	r1, r1, r5
   149ec:	cmp	r1, r4
   149f0:	bge	14a08 <__assert_fail@plt+0x3a0c>
   149f4:	bl	14af0 <__assert_fail@plt+0x3af4>
   149f8:	mvn	r1, #-2147483648	; 0x80000000
   149fc:	sdiv	r1, r1, r4
   14a00:	cmp	r5, r1
   14a04:	blt	149f4 <__assert_fail@plt+0x39f8>
   14a08:	mul	r1, r5, r4
   14a0c:	bl	147a8 <__assert_fail@plt+0x37ac>
   14a10:	str	r5, [r8]
   14a14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a18:	mov	r1, #1
   14a1c:	b	14a20 <__assert_fail@plt+0x3a24>
   14a20:	push	{fp, lr}
   14a24:	mov	fp, sp
   14a28:	bl	14b34 <__assert_fail@plt+0x3b38>
   14a2c:	pop	{fp, lr}
   14a30:	b	1477c <__assert_fail@plt+0x3780>
   14a34:	mov	r1, #1
   14a38:	b	14a3c <__assert_fail@plt+0x3a40>
   14a3c:	push	{fp, lr}
   14a40:	mov	fp, sp
   14a44:	bl	15008 <__assert_fail@plt+0x400c>
   14a48:	pop	{fp, lr}
   14a4c:	b	1477c <__assert_fail@plt+0x3780>
   14a50:	push	{r4, r5, fp, lr}
   14a54:	add	fp, sp, #8
   14a58:	mov	r4, r1
   14a5c:	mov	r5, r0
   14a60:	mov	r0, r1
   14a64:	bl	14768 <__assert_fail@plt+0x376c>
   14a68:	mov	r1, r5
   14a6c:	mov	r2, r4
   14a70:	pop	{r4, r5, fp, lr}
   14a74:	b	10e04 <memcpy@plt>
   14a78:	push	{r4, r5, fp, lr}
   14a7c:	add	fp, sp, #8
   14a80:	mov	r4, r1
   14a84:	mov	r5, r0
   14a88:	mov	r0, r1
   14a8c:	bl	14790 <__assert_fail@plt+0x3794>
   14a90:	mov	r1, r5
   14a94:	mov	r2, r4
   14a98:	pop	{r4, r5, fp, lr}
   14a9c:	b	10e04 <memcpy@plt>
   14aa0:	push	{r4, r5, fp, lr}
   14aa4:	add	fp, sp, #8
   14aa8:	mov	r4, r1
   14aac:	mov	r5, r0
   14ab0:	add	r0, r1, #1
   14ab4:	bl	14790 <__assert_fail@plt+0x3794>
   14ab8:	mov	r1, #0
   14abc:	strb	r1, [r0, r4]
   14ac0:	mov	r1, r5
   14ac4:	mov	r2, r4
   14ac8:	pop	{r4, r5, fp, lr}
   14acc:	b	10e04 <memcpy@plt>
   14ad0:	push	{r4, sl, fp, lr}
   14ad4:	add	fp, sp, #8
   14ad8:	mov	r4, r0
   14adc:	bl	10f3c <strlen@plt>
   14ae0:	add	r1, r0, #1
   14ae4:	mov	r0, r4
   14ae8:	pop	{r4, sl, fp, lr}
   14aec:	b	14a50 <__assert_fail@plt+0x3a54>
   14af0:	push	{fp, lr}
   14af4:	mov	fp, sp
   14af8:	movw	r0, #24804	; 0x60e4
   14afc:	movt	r0, #2
   14b00:	ldr	r4, [r0]
   14b04:	movw	r1, #23328	; 0x5b20
   14b08:	movt	r1, #1
   14b0c:	mov	r0, #0
   14b10:	mov	r2, #5
   14b14:	bl	10e28 <dcgettext@plt>
   14b18:	mov	r3, r0
   14b1c:	movw	r2, #22215	; 0x56c7
   14b20:	movt	r2, #1
   14b24:	mov	r0, r4
   14b28:	mov	r1, #0
   14b2c:	bl	10eac <error@plt>
   14b30:	bl	10fe4 <abort@plt>
   14b34:	clz	r2, r1
   14b38:	lsr	r2, r2, #5
   14b3c:	clz	r3, r0
   14b40:	lsr	r3, r3, #5
   14b44:	orrs	r2, r3, r2
   14b48:	movwne	r1, #1
   14b4c:	movwne	r0, #1
   14b50:	cmp	r1, #0
   14b54:	beq	14b84 <__assert_fail@plt+0x3b88>
   14b58:	mvn	r2, #-2147483648	; 0x80000000
   14b5c:	udiv	r2, r2, r1
   14b60:	cmp	r2, r0
   14b64:	bcs	14b84 <__assert_fail@plt+0x3b88>
   14b68:	push	{fp, lr}
   14b6c:	mov	fp, sp
   14b70:	bl	10f48 <__errno_location@plt>
   14b74:	mov	r1, #12
   14b78:	str	r1, [r0]
   14b7c:	mov	r0, #0
   14b80:	pop	{fp, pc}
   14b84:	b	10db0 <calloc@plt>
   14b88:	cmp	r0, #0
   14b8c:	movweq	r0, #1
   14b90:	cmn	r0, #1
   14b94:	ble	14b9c <__assert_fail@plt+0x3ba0>
   14b98:	b	10ed0 <malloc@plt>
   14b9c:	push	{fp, lr}
   14ba0:	mov	fp, sp
   14ba4:	bl	10f48 <__errno_location@plt>
   14ba8:	mov	r1, #12
   14bac:	str	r1, [r0]
   14bb0:	mov	r0, #0
   14bb4:	pop	{fp, pc}
   14bb8:	push	{fp, lr}
   14bbc:	mov	fp, sp
   14bc0:	cmp	r0, #0
   14bc4:	beq	14be0 <__assert_fail@plt+0x3be4>
   14bc8:	cmp	r1, #0
   14bcc:	beq	14bec <__assert_fail@plt+0x3bf0>
   14bd0:	cmn	r1, #1
   14bd4:	ble	14bf8 <__assert_fail@plt+0x3bfc>
   14bd8:	pop	{fp, lr}
   14bdc:	b	10e40 <realloc@plt>
   14be0:	mov	r0, r1
   14be4:	pop	{fp, lr}
   14be8:	b	14b88 <__assert_fail@plt+0x3b8c>
   14bec:	bl	14fb4 <__assert_fail@plt+0x3fb8>
   14bf0:	mov	r0, #0
   14bf4:	pop	{fp, pc}
   14bf8:	bl	10f48 <__errno_location@plt>
   14bfc:	mov	r1, #12
   14c00:	str	r1, [r0]
   14c04:	mov	r0, #0
   14c08:	pop	{fp, pc}
   14c0c:	mov	r1, r0
   14c10:	sub	r2, r0, #65	; 0x41
   14c14:	mov	r0, #1
   14c18:	cmp	r2, #26
   14c1c:	subcs	r2, r1, #97	; 0x61
   14c20:	cmpcs	r2, #26
   14c24:	bcs	14c2c <__assert_fail@plt+0x3c30>
   14c28:	bx	lr
   14c2c:	sub	r1, r1, #48	; 0x30
   14c30:	cmp	r1, #10
   14c34:	movcs	r0, #0
   14c38:	bx	lr
   14c3c:	mov	r1, r0
   14c40:	sub	r2, r0, #65	; 0x41
   14c44:	mov	r0, #1
   14c48:	cmp	r2, #26
   14c4c:	subcs	r1, r1, #97	; 0x61
   14c50:	cmpcs	r1, #26
   14c54:	movcs	r0, #0
   14c58:	bx	lr
   14c5c:	mov	r1, #0
   14c60:	cmp	r0, #128	; 0x80
   14c64:	movwcc	r1, #1
   14c68:	mov	r0, r1
   14c6c:	bx	lr
   14c70:	sub	r1, r0, #9
   14c74:	clz	r1, r1
   14c78:	lsr	r1, r1, #5
   14c7c:	sub	r0, r0, #32
   14c80:	clz	r0, r0
   14c84:	lsr	r0, r0, #5
   14c88:	orr	r0, r0, r1
   14c8c:	bx	lr
   14c90:	mov	r1, r0
   14c94:	mov	r0, #1
   14c98:	cmp	r1, #32
   14c9c:	bxcc	lr
   14ca0:	cmp	r1, #127	; 0x7f
   14ca4:	movne	r0, #0
   14ca8:	bx	lr
   14cac:	sub	r1, r0, #48	; 0x30
   14cb0:	mov	r0, #0
   14cb4:	cmp	r1, #10
   14cb8:	movwcc	r0, #1
   14cbc:	bx	lr
   14cc0:	sub	r1, r0, #33	; 0x21
   14cc4:	mov	r0, #0
   14cc8:	cmp	r1, #94	; 0x5e
   14ccc:	movwcc	r0, #1
   14cd0:	bx	lr
   14cd4:	sub	r1, r0, #97	; 0x61
   14cd8:	mov	r0, #0
   14cdc:	cmp	r1, #26
   14ce0:	movwcc	r0, #1
   14ce4:	bx	lr
   14ce8:	sub	r1, r0, #32
   14cec:	mov	r0, #0
   14cf0:	cmp	r1, #95	; 0x5f
   14cf4:	movwcc	r0, #1
   14cf8:	bx	lr
   14cfc:	sub	r1, r0, #33	; 0x21
   14d00:	cmp	r1, #93	; 0x5d
   14d04:	bhi	14e90 <__assert_fail@plt+0x3e94>
   14d08:	mov	r0, #1
   14d0c:	add	r2, pc, #0
   14d10:	ldr	pc, [r2, r1, lsl #2]
   14d14:	andeq	r4, r1, ip, lsl #29
   14d18:	andeq	r4, r1, ip, lsl #29
   14d1c:	andeq	r4, r1, ip, lsl #29
   14d20:	andeq	r4, r1, ip, lsl #29
   14d24:	andeq	r4, r1, ip, lsl #29
   14d28:	andeq	r4, r1, ip, lsl #29
   14d2c:	andeq	r4, r1, ip, lsl #29
   14d30:	andeq	r4, r1, ip, lsl #29
   14d34:	andeq	r4, r1, ip, lsl #29
   14d38:	andeq	r4, r1, ip, lsl #29
   14d3c:	andeq	r4, r1, ip, lsl #29
   14d40:	andeq	r4, r1, ip, lsl #29
   14d44:	andeq	r4, r1, ip, lsl #29
   14d48:	andeq	r4, r1, ip, lsl #29
   14d4c:	andeq	r4, r1, ip, lsl #29
   14d50:	muleq	r1, r0, lr
   14d54:	muleq	r1, r0, lr
   14d58:	muleq	r1, r0, lr
   14d5c:	muleq	r1, r0, lr
   14d60:	muleq	r1, r0, lr
   14d64:	muleq	r1, r0, lr
   14d68:	muleq	r1, r0, lr
   14d6c:	muleq	r1, r0, lr
   14d70:	muleq	r1, r0, lr
   14d74:	muleq	r1, r0, lr
   14d78:	andeq	r4, r1, ip, lsl #29
   14d7c:	andeq	r4, r1, ip, lsl #29
   14d80:	andeq	r4, r1, ip, lsl #29
   14d84:	andeq	r4, r1, ip, lsl #29
   14d88:	andeq	r4, r1, ip, lsl #29
   14d8c:	andeq	r4, r1, ip, lsl #29
   14d90:	andeq	r4, r1, ip, lsl #29
   14d94:	muleq	r1, r0, lr
   14d98:	muleq	r1, r0, lr
   14d9c:	muleq	r1, r0, lr
   14da0:	muleq	r1, r0, lr
   14da4:	muleq	r1, r0, lr
   14da8:	muleq	r1, r0, lr
   14dac:	muleq	r1, r0, lr
   14db0:	muleq	r1, r0, lr
   14db4:	muleq	r1, r0, lr
   14db8:	muleq	r1, r0, lr
   14dbc:	muleq	r1, r0, lr
   14dc0:	muleq	r1, r0, lr
   14dc4:	muleq	r1, r0, lr
   14dc8:	muleq	r1, r0, lr
   14dcc:	muleq	r1, r0, lr
   14dd0:	muleq	r1, r0, lr
   14dd4:	muleq	r1, r0, lr
   14dd8:	muleq	r1, r0, lr
   14ddc:	muleq	r1, r0, lr
   14de0:	muleq	r1, r0, lr
   14de4:	muleq	r1, r0, lr
   14de8:	muleq	r1, r0, lr
   14dec:	muleq	r1, r0, lr
   14df0:	muleq	r1, r0, lr
   14df4:	muleq	r1, r0, lr
   14df8:	muleq	r1, r0, lr
   14dfc:	andeq	r4, r1, ip, lsl #29
   14e00:	andeq	r4, r1, ip, lsl #29
   14e04:	andeq	r4, r1, ip, lsl #29
   14e08:	andeq	r4, r1, ip, lsl #29
   14e0c:	andeq	r4, r1, ip, lsl #29
   14e10:	andeq	r4, r1, ip, lsl #29
   14e14:	muleq	r1, r0, lr
   14e18:	muleq	r1, r0, lr
   14e1c:	muleq	r1, r0, lr
   14e20:	muleq	r1, r0, lr
   14e24:	muleq	r1, r0, lr
   14e28:	muleq	r1, r0, lr
   14e2c:	muleq	r1, r0, lr
   14e30:	muleq	r1, r0, lr
   14e34:	muleq	r1, r0, lr
   14e38:	muleq	r1, r0, lr
   14e3c:	muleq	r1, r0, lr
   14e40:	muleq	r1, r0, lr
   14e44:	muleq	r1, r0, lr
   14e48:	muleq	r1, r0, lr
   14e4c:	muleq	r1, r0, lr
   14e50:	muleq	r1, r0, lr
   14e54:	muleq	r1, r0, lr
   14e58:	muleq	r1, r0, lr
   14e5c:	muleq	r1, r0, lr
   14e60:	muleq	r1, r0, lr
   14e64:	muleq	r1, r0, lr
   14e68:	muleq	r1, r0, lr
   14e6c:	muleq	r1, r0, lr
   14e70:	muleq	r1, r0, lr
   14e74:	muleq	r1, r0, lr
   14e78:	muleq	r1, r0, lr
   14e7c:	andeq	r4, r1, ip, lsl #29
   14e80:	andeq	r4, r1, ip, lsl #29
   14e84:	andeq	r4, r1, ip, lsl #29
   14e88:	andeq	r4, r1, ip, lsl #29
   14e8c:	bx	lr
   14e90:	mov	r0, #0
   14e94:	bx	lr
   14e98:	sub	r0, r0, #9
   14e9c:	cmp	r0, #23
   14ea0:	movhi	r0, #0
   14ea4:	bxhi	lr
   14ea8:	bic	r0, r0, #-16777216	; 0xff000000
   14eac:	movw	r1, #31
   14eb0:	movt	r1, #128	; 0x80
   14eb4:	mov	r2, #1
   14eb8:	and	r0, r2, r1, lsr r0
   14ebc:	bx	lr
   14ec0:	sub	r1, r0, #65	; 0x41
   14ec4:	mov	r0, #0
   14ec8:	cmp	r1, #26
   14ecc:	movwcc	r0, #1
   14ed0:	bx	lr
   14ed4:	mov	r1, r0
   14ed8:	sub	r2, r0, #48	; 0x30
   14edc:	mov	r0, #1
   14ee0:	cmp	r2, #22
   14ee4:	bhi	14efc <__assert_fail@plt+0x3f00>
   14ee8:	mov	ip, #1
   14eec:	movw	r3, #1023	; 0x3ff
   14ef0:	movt	r3, #126	; 0x7e
   14ef4:	tst	r3, ip, lsl r2
   14ef8:	bxne	lr
   14efc:	sub	r1, r1, #97	; 0x61
   14f00:	cmp	r1, #6
   14f04:	movcs	r0, #0
   14f08:	bxcs	lr
   14f0c:	bx	lr
   14f10:	sub	r1, r0, #65	; 0x41
   14f14:	cmp	r1, #26
   14f18:	addcc	r0, r0, #32
   14f1c:	bx	lr
   14f20:	sub	r1, r0, #97	; 0x61
   14f24:	cmp	r1, #26
   14f28:	subcc	r0, r0, #32
   14f2c:	bx	lr
   14f30:	push	{r4, r5, r6, sl, fp, lr}
   14f34:	add	fp, sp, #16
   14f38:	mov	r4, r0
   14f3c:	bl	10e88 <__fpending@plt>
   14f40:	mov	r5, r0
   14f44:	mov	r0, r4
   14f48:	bl	10e94 <ferror_unlocked@plt>
   14f4c:	mov	r6, r0
   14f50:	mov	r0, r4
   14f54:	bl	11ee8 <__assert_fail@plt+0xeec>
   14f58:	cmp	r6, #0
   14f5c:	beq	14f80 <__assert_fail@plt+0x3f84>
   14f60:	mvn	r4, #0
   14f64:	cmp	r0, #0
   14f68:	bne	14fac <__assert_fail@plt+0x3fb0>
   14f6c:	bl	10f48 <__errno_location@plt>
   14f70:	mov	r1, #0
   14f74:	str	r1, [r0]
   14f78:	mov	r0, r4
   14f7c:	pop	{r4, r5, r6, sl, fp, pc}
   14f80:	cmp	r0, #0
   14f84:	mov	r4, r0
   14f88:	mvnne	r4, #0
   14f8c:	cmp	r5, #0
   14f90:	bne	14fac <__assert_fail@plt+0x3fb0>
   14f94:	cmp	r0, #0
   14f98:	beq	14fac <__assert_fail@plt+0x3fb0>
   14f9c:	bl	10f48 <__errno_location@plt>
   14fa0:	ldr	r0, [r0]
   14fa4:	subs	r4, r0, #9
   14fa8:	mvnne	r4, #0
   14fac:	mov	r0, r4
   14fb0:	pop	{r4, r5, r6, sl, fp, pc}
   14fb4:	push	{r4, r5, r6, sl, fp, lr}
   14fb8:	add	fp, sp, #16
   14fbc:	mov	r4, r0
   14fc0:	bl	10f48 <__errno_location@plt>
   14fc4:	mov	r5, r0
   14fc8:	ldr	r6, [r0]
   14fcc:	mov	r0, r4
   14fd0:	bl	10dec <free@plt>
   14fd4:	str	r6, [r5]
   14fd8:	pop	{r4, r5, r6, sl, fp, pc}
   14fdc:	push	{fp, lr}
   14fe0:	mov	fp, sp
   14fe4:	bl	10f48 <__errno_location@plt>
   14fe8:	mov	r1, #12
   14fec:	str	r1, [r0]
   14ff0:	mov	r0, #0
   14ff4:	pop	{fp, pc}
   14ff8:	b	14b88 <__assert_fail@plt+0x3b8c>
   14ffc:	cmp	r1, #0
   15000:	orreq	r1, r1, #1
   15004:	b	14bb8 <__assert_fail@plt+0x3bbc>
   15008:	b	14b34 <__assert_fail@plt+0x3b38>
   1500c:	clz	r3, r2
   15010:	lsr	ip, r3, #5
   15014:	clz	r3, r1
   15018:	lsr	r3, r3, #5
   1501c:	orrs	r3, r3, ip
   15020:	movwne	r1, #1
   15024:	movwne	r2, #1
   15028:	b	150c8 <__assert_fail@plt+0x40cc>
   1502c:	push	{fp, lr}
   15030:	mov	fp, sp
   15034:	mov	r0, #14
   15038:	bl	10fc0 <nl_langinfo@plt>
   1503c:	movw	r1, #21831	; 0x5547
   15040:	movt	r1, #1
   15044:	cmp	r0, #0
   15048:	movne	r1, r0
   1504c:	ldrb	r2, [r1]
   15050:	movw	r0, #23345	; 0x5b31
   15054:	movt	r0, #1
   15058:	cmp	r2, #0
   1505c:	movne	r0, r1
   15060:	pop	{fp, pc}
   15064:	push	{r4, r5, r6, r7, fp, lr}
   15068:	add	fp, sp, #16
   1506c:	sub	sp, sp, #8
   15070:	mov	r7, r2
   15074:	mov	r4, r1
   15078:	add	r5, sp, #4
   1507c:	cmp	r0, #0
   15080:	movne	r5, r0
   15084:	mov	r0, r5
   15088:	bl	10ea0 <mbrtowc@plt>
   1508c:	mov	r6, r0
   15090:	cmp	r7, #0
   15094:	beq	150bc <__assert_fail@plt+0x40c0>
   15098:	cmn	r6, #2
   1509c:	bcc	150bc <__assert_fail@plt+0x40c0>
   150a0:	mov	r0, #0
   150a4:	bl	15104 <__assert_fail@plt+0x4108>
   150a8:	cmp	r0, #0
   150ac:	bne	150bc <__assert_fail@plt+0x40c0>
   150b0:	ldrb	r0, [r4]
   150b4:	str	r0, [r5]
   150b8:	mov	r6, #1
   150bc:	mov	r0, r6
   150c0:	sub	sp, fp, #16
   150c4:	pop	{r4, r5, r6, r7, fp, pc}
   150c8:	cmp	r2, #0
   150cc:	beq	150fc <__assert_fail@plt+0x4100>
   150d0:	mvn	r3, #0
   150d4:	udiv	r3, r3, r2
   150d8:	cmp	r3, r1
   150dc:	bcs	150fc <__assert_fail@plt+0x4100>
   150e0:	push	{fp, lr}
   150e4:	mov	fp, sp
   150e8:	bl	10f48 <__errno_location@plt>
   150ec:	mov	r1, #12
   150f0:	str	r1, [r0]
   150f4:	mov	r0, #0
   150f8:	pop	{fp, pc}
   150fc:	mul	r1, r2, r1
   15100:	b	14bb8 <__assert_fail@plt+0x3bbc>
   15104:	push	{r4, sl, fp, lr}
   15108:	add	fp, sp, #8
   1510c:	sub	sp, sp, #264	; 0x108
   15110:	add	r1, sp, #7
   15114:	movw	r2, #257	; 0x101
   15118:	bl	15170 <__assert_fail@plt+0x4174>
   1511c:	mov	r4, #0
   15120:	cmp	r0, #0
   15124:	bne	15164 <__assert_fail@plt+0x4168>
   15128:	add	r0, sp, #7
   1512c:	movw	r1, #23351	; 0x5b37
   15130:	movt	r1, #1
   15134:	mov	r2, #2
   15138:	bl	10f30 <bcmp@plt>
   1513c:	cmp	r0, #0
   15140:	beq	15164 <__assert_fail@plt+0x4168>
   15144:	add	r0, sp, #7
   15148:	movw	r1, #23353	; 0x5b39
   1514c:	movt	r1, #1
   15150:	mov	r2, #6
   15154:	bl	10f30 <bcmp@plt>
   15158:	mov	r4, r0
   1515c:	cmp	r0, #0
   15160:	movwne	r4, #1
   15164:	mov	r0, r4
   15168:	sub	sp, fp, #8
   1516c:	pop	{r4, sl, fp, pc}
   15170:	b	15174 <__assert_fail@plt+0x4178>
   15174:	push	{r4, r5, r6, r7, fp, lr}
   15178:	add	fp, sp, #16
   1517c:	mov	r6, r2
   15180:	mov	r4, r1
   15184:	bl	1520c <__assert_fail@plt+0x4210>
   15188:	cmp	r0, #0
   1518c:	beq	151bc <__assert_fail@plt+0x41c0>
   15190:	mov	r7, r0
   15194:	bl	10f3c <strlen@plt>
   15198:	cmp	r0, r6
   1519c:	bcs	151d8 <__assert_fail@plt+0x41dc>
   151a0:	add	r2, r0, #1
   151a4:	mov	r0, r4
   151a8:	mov	r1, r7
   151ac:	bl	10e04 <memcpy@plt>
   151b0:	mov	r5, #0
   151b4:	mov	r0, r5
   151b8:	pop	{r4, r5, r6, r7, fp, pc}
   151bc:	mov	r5, #22
   151c0:	cmp	r6, #0
   151c4:	beq	15200 <__assert_fail@plt+0x4204>
   151c8:	mov	r0, #0
   151cc:	strb	r0, [r4]
   151d0:	mov	r0, r5
   151d4:	pop	{r4, r5, r6, r7, fp, pc}
   151d8:	mov	r5, #34	; 0x22
   151dc:	cmp	r6, #0
   151e0:	beq	15200 <__assert_fail@plt+0x4204>
   151e4:	sub	r6, r6, #1
   151e8:	mov	r0, r4
   151ec:	mov	r1, r7
   151f0:	mov	r2, r6
   151f4:	bl	10e04 <memcpy@plt>
   151f8:	mov	r0, #0
   151fc:	strb	r0, [r4, r6]
   15200:	mov	r0, r5
   15204:	pop	{r4, r5, r6, r7, fp, pc}
   15208:	b	1520c <__assert_fail@plt+0x4210>
   1520c:	mov	r1, #0
   15210:	b	10fa8 <setlocale@plt>
   15214:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15218:	mov	r7, r0
   1521c:	ldr	r6, [pc, #72]	; 1526c <__assert_fail@plt+0x4270>
   15220:	ldr	r5, [pc, #72]	; 15270 <__assert_fail@plt+0x4274>
   15224:	add	r6, pc, r6
   15228:	add	r5, pc, r5
   1522c:	sub	r6, r6, r5
   15230:	mov	r8, r1
   15234:	mov	r9, r2
   15238:	bl	10d90 <calloc@plt-0x20>
   1523c:	asrs	r6, r6, #2
   15240:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15244:	mov	r4, #0
   15248:	add	r4, r4, #1
   1524c:	ldr	r3, [r5], #4
   15250:	mov	r2, r9
   15254:	mov	r1, r8
   15258:	mov	r0, r7
   1525c:	blx	r3
   15260:	cmp	r6, r4
   15264:	bne	15248 <__assert_fail@plt+0x424c>
   15268:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1526c:	andeq	r0, r1, r0, ror #25
   15270:	ldrdeq	r0, [r1], -r8
   15274:	bx	lr
   15278:	ldr	r3, [pc, #12]	; 1528c <__assert_fail@plt+0x4290>
   1527c:	mov	r1, #0
   15280:	add	r3, pc, r3
   15284:	ldr	r2, [r3]
   15288:	b	10f54 <__cxa_atexit@plt>
   1528c:	andeq	r0, r1, r4, asr lr

Disassembly of section .fini:

00015290 <.fini>:
   15290:	push	{r3, lr}
   15294:	pop	{r3, pc}
