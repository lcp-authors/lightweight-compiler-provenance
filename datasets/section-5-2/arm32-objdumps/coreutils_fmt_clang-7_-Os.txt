
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010e68 <.init>:
   10e68:	push	{r3, lr}
   10e6c:	bl	1114c <__assert_fail@plt+0x48>
   10e70:	pop	{r3, pc}

Disassembly of section .plt:

00010e74 <calloc@plt-0x14>:
   10e74:	push	{lr}		; (str lr, [sp, #-4]!)
   10e78:	ldr	lr, [pc, #4]	; 10e84 <calloc@plt-0x4>
   10e7c:	add	lr, pc, lr
   10e80:	ldr	pc, [lr, #8]!
   10e84:	andeq	r6, r1, ip, ror r1

00010e88 <calloc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #380]!	; 0x17c

00010e94 <fputs_unlocked@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #372]!	; 0x174

00010ea0 <raise@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #364]!	; 0x16c

00010eac <strcmp@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #356]!	; 0x164

00010eb8 <posix_fadvise64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #348]!	; 0x15c

00010ec4 <fflush@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #340]!	; 0x154

00010ed0 <memmove@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #332]!	; 0x14c

00010edc <free@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #324]!	; 0x144

00010ee8 <_exit@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #316]!	; 0x13c

00010ef4 <memcpy@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #308]!	; 0x134

00010f00 <mbsinit@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #300]!	; 0x12c

00010f0c <fwrite_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #292]!	; 0x124

00010f18 <memcmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #284]!	; 0x11c

00010f24 <getc_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #276]!	; 0x114

00010f30 <dcgettext@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #268]!	; 0x10c

00010f3c <realloc@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #260]!	; 0x104

00010f48 <textdomain@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #252]!	; 0xfc

00010f54 <iswprint@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #244]!	; 0xf4

00010f60 <lseek64@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #236]!	; 0xec

00010f6c <__ctype_get_mb_cur_max@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #228]!	; 0xe4

00010f78 <__fpending@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #220]!	; 0xdc

00010f84 <ferror_unlocked@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #212]!	; 0xd4

00010f90 <mbrtowc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #204]!	; 0xcc

00010f9c <error@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #196]!	; 0xc4

00010fa8 <malloc@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #188]!	; 0xbc

00010fb4 <__libc_start_main@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #180]!	; 0xb4

00010fc0 <__freading@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #172]!	; 0xac

00010fcc <__gmon_start__@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #164]!	; 0xa4

00010fd8 <getopt_long@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #156]!	; 0x9c

00010fe4 <__ctype_b_loc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #148]!	; 0x94

00010ff0 <exit@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #140]!	; 0x8c

00010ffc <strlen@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #132]!	; 0x84

00011008 <strchr@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #124]!	; 0x7c

00011014 <__errno_location@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #116]!	; 0x74

00011020 <__cxa_atexit@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #108]!	; 0x6c

0001102c <memset@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #100]!	; 0x64

00011038 <__printf_chk@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #92]!	; 0x5c

00011044 <fileno@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #84]!	; 0x54

00011050 <strtoumax@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #76]!	; 0x4c

0001105c <__fprintf_chk@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #68]!	; 0x44

00011068 <memchr@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #60]!	; 0x3c

00011074 <fclose@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #52]!	; 0x34

00011080 <fseeko64@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #44]!	; 0x2c

0001108c <setlocale@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #36]!	; 0x24

00011098 <strrchr@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #28]!

000110a4 <nl_langinfo@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #20]!

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #12]!

000110bc <fopen64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4]!

000110c8 <bindtextdomain@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #86016	; 0x15000
   110d0:	ldr	pc, [ip, #4092]!	; 0xffc

000110d4 <fputs@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #86016	; 0x15000
   110dc:	ldr	pc, [ip, #4084]!	; 0xff4

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #4076]!	; 0xfec

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f8 <putchar_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #4060]!	; 0xfdc

00011104 <__assert_fail@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #4052]!	; 0xfd4

Disassembly of section .text:

00011110 <.text>:
   11110:	mov	fp, #0
   11114:	mov	lr, #0
   11118:	pop	{r1}		; (ldr r1, [sp], #4)
   1111c:	mov	r2, sp
   11120:	push	{r2}		; (str r2, [sp, #-4]!)
   11124:	push	{r0}		; (str r0, [sp, #-4]!)
   11128:	ldr	ip, [pc, #16]	; 11140 <__assert_fail@plt+0x3c>
   1112c:	push	{ip}		; (str ip, [sp, #-4]!)
   11130:	ldr	r0, [pc, #12]	; 11144 <__assert_fail@plt+0x40>
   11134:	ldr	r3, [pc, #12]	; 11148 <__assert_fail@plt+0x44>
   11138:	bl	10fb4 <__libc_start_main@plt>
   1113c:	bl	110ec <abort@plt>
   11140:	andeq	r5, r1, r8, lsr #29
   11144:	muleq	r1, r4, r4
   11148:	andeq	r5, r1, r8, asr #28
   1114c:	ldr	r3, [pc, #20]	; 11168 <__assert_fail@plt+0x64>
   11150:	ldr	r2, [pc, #20]	; 1116c <__assert_fail@plt+0x68>
   11154:	add	r3, pc, r3
   11158:	ldr	r2, [r3, r2]
   1115c:	cmp	r2, #0
   11160:	bxeq	lr
   11164:	b	10fcc <__gmon_start__@plt>
   11168:	andeq	r5, r1, r4, lsr #29
   1116c:	andeq	r0, r0, r4, ror #1
   11170:	ldr	r0, [pc, #24]	; 11190 <__assert_fail@plt+0x8c>
   11174:	ldr	r3, [pc, #24]	; 11194 <__assert_fail@plt+0x90>
   11178:	cmp	r3, r0
   1117c:	bxeq	lr
   11180:	ldr	r3, [pc, #16]	; 11198 <__assert_fail@plt+0x94>
   11184:	cmp	r3, #0
   11188:	bxeq	lr
   1118c:	bx	r3
   11190:	andeq	r7, r2, r8, lsr r1
   11194:	andeq	r7, r2, r8, lsr r1
   11198:	andeq	r0, r0, r0
   1119c:	ldr	r0, [pc, #36]	; 111c8 <__assert_fail@plt+0xc4>
   111a0:	ldr	r1, [pc, #36]	; 111cc <__assert_fail@plt+0xc8>
   111a4:	sub	r1, r1, r0
   111a8:	asr	r1, r1, #2
   111ac:	add	r1, r1, r1, lsr #31
   111b0:	asrs	r1, r1, #1
   111b4:	bxeq	lr
   111b8:	ldr	r3, [pc, #16]	; 111d0 <__assert_fail@plt+0xcc>
   111bc:	cmp	r3, #0
   111c0:	bxeq	lr
   111c4:	bx	r3
   111c8:	andeq	r7, r2, r8, lsr r1
   111cc:	andeq	r7, r2, r8, lsr r1
   111d0:	andeq	r0, r0, r0
   111d4:	push	{r4, lr}
   111d8:	ldr	r4, [pc, #24]	; 111f8 <__assert_fail@plt+0xf4>
   111dc:	ldrb	r3, [r4]
   111e0:	cmp	r3, #0
   111e4:	popne	{r4, pc}
   111e8:	bl	11170 <__assert_fail@plt+0x6c>
   111ec:	mov	r3, #1
   111f0:	strb	r3, [r4]
   111f4:	pop	{r4, pc}
   111f8:	andeq	r7, r2, ip, asr r1
   111fc:	b	1119c <__assert_fail@plt+0x98>
   11200:	push	{fp, lr}
   11204:	mov	fp, sp
   11208:	sub	sp, sp, #56	; 0x38
   1120c:	mov	r8, r0
   11210:	cmp	r0, #0
   11214:	bne	11454 <__assert_fail@plt+0x350>
   11218:	movw	r1, #24315	; 0x5efb
   1121c:	mov	r0, #0
   11220:	mov	r2, #5
   11224:	movt	r1, #1
   11228:	bl	10f30 <dcgettext@plt>
   1122c:	mov	r1, r0
   11230:	movw	r0, #62108	; 0xf29c
   11234:	movt	r0, #2
   11238:	ldr	r2, [r0]
   1123c:	mov	r0, #1
   11240:	bl	11038 <__printf_chk@plt>
   11244:	movw	r1, #24357	; 0x5f25
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	movt	r1, #1
   11254:	bl	10f30 <dcgettext@plt>
   11258:	movw	r9, #29012	; 0x7154
   1125c:	movt	r9, #2
   11260:	ldr	r1, [r9]
   11264:	bl	10e94 <fputs_unlocked@plt>
   11268:	movw	r1, #25384	; 0x6328
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10f30 <dcgettext@plt>
   1127c:	ldr	r1, [r9]
   11280:	bl	10e94 <fputs_unlocked@plt>
   11284:	movw	r1, #25440	; 0x6360
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	movt	r1, #1
   11294:	bl	10f30 <dcgettext@plt>
   11298:	ldr	r1, [r9]
   1129c:	bl	10e94 <fputs_unlocked@plt>
   112a0:	movw	r1, #24486	; 0x5fa6
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10f30 <dcgettext@plt>
   112b4:	ldr	r1, [r9]
   112b8:	bl	10e94 <fputs_unlocked@plt>
   112bc:	movw	r1, #24764	; 0x60bc
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	movt	r1, #1
   112cc:	bl	10f30 <dcgettext@plt>
   112d0:	ldr	r1, [r9]
   112d4:	bl	10e94 <fputs_unlocked@plt>
   112d8:	movw	r1, #25050	; 0x61da
   112dc:	mov	r0, #0
   112e0:	mov	r2, #5
   112e4:	movt	r1, #1
   112e8:	bl	10f30 <dcgettext@plt>
   112ec:	ldr	r1, [r9]
   112f0:	bl	10e94 <fputs_unlocked@plt>
   112f4:	movw	r1, #25095	; 0x6207
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10f30 <dcgettext@plt>
   11308:	ldr	r1, [r9]
   1130c:	bl	10e94 <fputs_unlocked@plt>
   11310:	movw	r0, #26152	; 0x6628
   11314:	mov	r6, sp
   11318:	movt	r0, #1
   1131c:	mov	r1, r6
   11320:	ldm	r0!, {r2, r3, r4, r5}
   11324:	stmia	r1!, {r2, r3, r4, r5}
   11328:	ldm	r0!, {r2, r3, r4, r5, r7}
   1132c:	stmia	r1!, {r2, r3, r4, r5, r7}
   11330:	ldm	r0, {r2, r3, r4, r5, r7}
   11334:	stm	r1, {r2, r3, r4, r5, r7}
   11338:	movw	r1, #25515	; 0x63ab
   1133c:	movw	r5, #25149	; 0x623d
   11340:	movt	r1, #1
   11344:	movt	r5, #1
   11348:	mov	r0, r5
   1134c:	bl	10eac <strcmp@plt>
   11350:	cmp	r0, #0
   11354:	ldrne	r1, [r6, #8]!
   11358:	cmpne	r1, #0
   1135c:	bne	11348 <__assert_fail@plt+0x244>
   11360:	ldr	r6, [r6, #4]
   11364:	movw	r1, #25610	; 0x640a
   11368:	mov	r0, #0
   1136c:	mov	r2, #5
   11370:	movt	r1, #1
   11374:	bl	10f30 <dcgettext@plt>
   11378:	movw	r2, #25292	; 0x62cc
   1137c:	movw	r3, #25633	; 0x6421
   11380:	mov	r1, r0
   11384:	mov	r0, #1
   11388:	movt	r2, #1
   1138c:	movt	r3, #1
   11390:	bl	11038 <__printf_chk@plt>
   11394:	cmp	r6, #0
   11398:	mov	r0, #5
   1139c:	mov	r1, #0
   113a0:	moveq	r6, r5
   113a4:	bl	1108c <setlocale@plt>
   113a8:	cmp	r0, #0
   113ac:	beq	113e4 <__assert_fail@plt+0x2e0>
   113b0:	movw	r1, #25673	; 0x6449
   113b4:	mov	r2, #3
   113b8:	movt	r1, #1
   113bc:	bl	110e0 <strncmp@plt>
   113c0:	cmp	r0, #0
   113c4:	beq	113e4 <__assert_fail@plt+0x2e0>
   113c8:	movw	r1, #25677	; 0x644d
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	movt	r1, #1
   113d8:	bl	10f30 <dcgettext@plt>
   113dc:	ldr	r1, [r9]
   113e0:	bl	10e94 <fputs_unlocked@plt>
   113e4:	movw	r1, #25748	; 0x6494
   113e8:	mov	r0, #0
   113ec:	mov	r2, #5
   113f0:	movt	r1, #1
   113f4:	bl	10f30 <dcgettext@plt>
   113f8:	movw	r2, #25633	; 0x6421
   113fc:	mov	r1, r0
   11400:	mov	r0, #1
   11404:	mov	r3, r5
   11408:	movt	r2, #1
   1140c:	bl	11038 <__printf_chk@plt>
   11410:	movw	r1, #25775	; 0x64af
   11414:	mov	r0, #0
   11418:	mov	r2, #5
   1141c:	movt	r1, #1
   11420:	bl	10f30 <dcgettext@plt>
   11424:	movw	r3, #25825	; 0x64e1
   11428:	mov	r1, r0
   1142c:	movw	r0, #25543	; 0x63c7
   11430:	cmp	r6, r5
   11434:	mov	r2, r6
   11438:	movt	r0, #1
   1143c:	movt	r3, #1
   11440:	moveq	r3, r0
   11444:	mov	r0, #1
   11448:	bl	11038 <__printf_chk@plt>
   1144c:	mov	r0, r8
   11450:	bl	10ff0 <exit@plt>
   11454:	movw	r0, #29000	; 0x7148
   11458:	movw	r1, #24276	; 0x5ed4
   1145c:	mov	r2, #5
   11460:	movt	r0, #2
   11464:	movt	r1, #1
   11468:	ldr	r5, [r0]
   1146c:	mov	r0, #0
   11470:	bl	10f30 <dcgettext@plt>
   11474:	mov	r2, r0
   11478:	movw	r0, #62108	; 0xf29c
   1147c:	mov	r1, #1
   11480:	movt	r0, #2
   11484:	ldr	r3, [r0]
   11488:	mov	r0, r5
   1148c:	bl	1105c <__fprintf_chk@plt>
   11490:	b	1144c <__assert_fail@plt+0x348>
   11494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11498:	add	fp, sp, #28
   1149c:	sub	sp, sp, #36	; 0x24
   114a0:	mov	r7, r0
   114a4:	ldr	r0, [r1]
   114a8:	mov	r6, r1
   114ac:	bl	12d48 <__assert_fail@plt+0x1c44>
   114b0:	movw	r5, #25825	; 0x64e1
   114b4:	mov	r0, #6
   114b8:	movt	r5, #1
   114bc:	mov	r1, r5
   114c0:	bl	1108c <setlocale@plt>
   114c4:	movw	r4, #25296	; 0x62d0
   114c8:	movw	r1, #25153	; 0x6241
   114cc:	movt	r4, #1
   114d0:	movt	r1, #1
   114d4:	mov	r0, r4
   114d8:	bl	110c8 <bindtextdomain@plt>
   114dc:	mov	r0, r4
   114e0:	bl	10f48 <textdomain@plt>
   114e4:	movw	r0, #10884	; 0x2a84
   114e8:	movt	r0, #1
   114ec:	bl	15eac <__assert_fail@plt+0x4da8>
   114f0:	movw	r0, #29024	; 0x7160
   114f4:	mov	r4, #0
   114f8:	movw	r1, #29028	; 0x7164
   114fc:	cmp	r7, #2
   11500:	movt	r0, #2
   11504:	movt	r1, #2
   11508:	strb	r4, [r0]
   1150c:	movw	r0, #29025	; 0x7161
   11510:	movt	r0, #2
   11514:	strb	r4, [r0]
   11518:	movw	r0, #29026	; 0x7162
   1151c:	movt	r0, #2
   11520:	strb	r4, [r0]
   11524:	movw	r0, #29027	; 0x7163
   11528:	movt	r0, #2
   1152c:	strb	r4, [r0]
   11530:	mov	r0, #75	; 0x4b
   11534:	str	r0, [r1]
   11538:	movw	r0, #29032	; 0x7168
   1153c:	movt	r0, #2
   11540:	str	r5, [r0]
   11544:	movw	r0, #29036	; 0x716c
   11548:	movt	r0, #2
   1154c:	str	r4, [r0]
   11550:	movw	r0, #29040	; 0x7170
   11554:	movt	r0, #2
   11558:	str	r4, [r0]
   1155c:	movw	r0, #29044	; 0x7174
   11560:	movt	r0, #2
   11564:	str	r4, [r0]
   11568:	blt	115a0 <__assert_fail@plt+0x49c>
   1156c:	mov	r5, r6
   11570:	ldr	sl, [r5, #4]!
   11574:	ldrb	r0, [sl]
   11578:	cmp	r0, #45	; 0x2d
   1157c:	bne	115a0 <__assert_fail@plt+0x49c>
   11580:	ldrb	r0, [sl, #1]!
   11584:	sub	r0, r0, #48	; 0x30
   11588:	cmp	r0, #9
   1158c:	bhi	115a0 <__assert_fail@plt+0x49c>
   11590:	ldr	r0, [r6]
   11594:	sub	r7, r7, #1
   11598:	str	r0, [r6, #4]
   1159c:	b	115a8 <__assert_fail@plt+0x4a4>
   115a0:	mov	r5, r6
   115a4:	mov	sl, #0
   115a8:	movw	r6, #25177	; 0x6259
   115ac:	mov	r9, #0
   115b0:	str	r7, [sp, #32]
   115b4:	str	r5, [sp, #28]
   115b8:	movt	r6, #1
   115bc:	movw	r3, #25992	; 0x6588
   115c0:	mov	r0, r7
   115c4:	mov	r1, r5
   115c8:	mov	r2, r6
   115cc:	str	r4, [sp]
   115d0:	movt	r3, #1
   115d4:	bl	10fd8 <getopt_long@plt>
   115d8:	mov	r8, r0
   115dc:	cmp	r0, #98	; 0x62
   115e0:	ble	11738 <__assert_fail@plt+0x634>
   115e4:	sub	r0, r8, #112	; 0x70
   115e8:	cmp	r0, #7
   115ec:	bhi	116c8 <__assert_fail@plt+0x5c4>
   115f0:	add	r1, pc, #0
   115f4:	ldr	pc, [r1, r0, lsl #2]
   115f8:	andeq	r1, r1, r8, lsl r6
   115fc:	andeq	r1, r1, r0, lsr sl
   11600:	andeq	r1, r1, r0, lsr sl
   11604:	andeq	r1, r1, r0, lsl #14
   11608:	andeq	r1, r1, ip, lsl #14
   1160c:	strdeq	r1, [r1], -r4
   11610:	andeq	r1, r1, r0, lsr sl
   11614:	andeq	r1, r1, r8, lsr #14
   11618:	movw	r0, #29040	; 0x7170
   1161c:	mov	r8, r6
   11620:	movt	r0, #2
   11624:	str	r4, [r0]
   11628:	movw	r0, #29016	; 0x7158
   1162c:	movt	r0, #2
   11630:	ldr	r6, [r0]
   11634:	ldrb	r0, [r6]
   11638:	cmp	r0, #32
   1163c:	bne	11668 <__assert_fail@plt+0x564>
   11640:	mov	r0, #0
   11644:	add	r1, r6, r0
   11648:	add	r0, r0, #1
   1164c:	ldrb	r1, [r1, #1]
   11650:	cmp	r1, #32
   11654:	beq	11644 <__assert_fail@plt+0x540>
   11658:	movw	r1, #29040	; 0x7170
   1165c:	add	r6, r6, r0
   11660:	movt	r1, #2
   11664:	str	r0, [r1]
   11668:	movw	r0, #29032	; 0x7168
   1166c:	ldr	r7, [sp, #32]
   11670:	ldr	r5, [sp, #28]
   11674:	movt	r0, #2
   11678:	str	r6, [r0]
   1167c:	mov	r0, r6
   11680:	bl	10ffc <strlen@plt>
   11684:	movw	r1, #29036	; 0x716c
   11688:	movt	r1, #2
   1168c:	str	r0, [r1]
   11690:	add	r1, r6, r0
   11694:	mov	r0, r1
   11698:	cmp	r1, r6
   1169c:	bls	116b0 <__assert_fail@plt+0x5ac>
   116a0:	mov	r1, r0
   116a4:	ldrb	r2, [r1, #-1]!
   116a8:	cmp	r2, #32
   116ac:	beq	11694 <__assert_fail@plt+0x590>
   116b0:	movw	r1, #29044	; 0x7174
   116b4:	strb	r4, [r0], -r6
   116b8:	mov	r6, r8
   116bc:	movt	r1, #2
   116c0:	str	r0, [r1]
   116c4:	b	115bc <__assert_fail@plt+0x4b8>
   116c8:	cmp	r8, #99	; 0x63
   116cc:	bne	116dc <__assert_fail@plt+0x5d8>
   116d0:	movw	r0, #29027	; 0x7163
   116d4:	movt	r0, #2
   116d8:	b	11714 <__assert_fail@plt+0x610>
   116dc:	cmp	r8, #103	; 0x67
   116e0:	bne	11a30 <__assert_fail@plt+0x92c>
   116e4:	movw	r0, #29016	; 0x7158
   116e8:	movt	r0, #2
   116ec:	ldr	r9, [r0]
   116f0:	b	1171c <__assert_fail@plt+0x618>
   116f4:	movw	r0, #29024	; 0x7160
   116f8:	movt	r0, #2
   116fc:	b	11714 <__assert_fail@plt+0x610>
   11700:	movw	r0, #29025	; 0x7161
   11704:	movt	r0, #2
   11708:	b	11714 <__assert_fail@plt+0x610>
   1170c:	movw	r0, #29026	; 0x7162
   11710:	movt	r0, #2
   11714:	mov	r1, #1
   11718:	strb	r1, [r0]
   1171c:	ldr	r7, [sp, #32]
   11720:	ldr	r5, [sp, #28]
   11724:	b	115bc <__assert_fail@plt+0x4b8>
   11728:	movw	r0, #29016	; 0x7158
   1172c:	movt	r0, #2
   11730:	ldr	sl, [r0]
   11734:	b	1171c <__assert_fail@plt+0x618>
   11738:	cmn	r8, #1
   1173c:	bne	119d0 <__assert_fail@plt+0x8cc>
   11740:	mov	r7, r9
   11744:	cmp	sl, #0
   11748:	beq	117ac <__assert_fail@plt+0x6a8>
   1174c:	movw	r1, #25320	; 0x62e8
   11750:	mov	r0, #0
   11754:	mov	r2, #5
   11758:	mov	r4, #0
   1175c:	movt	r1, #1
   11760:	bl	10f30 <dcgettext@plt>
   11764:	movw	r6, #25825	; 0x64e1
   11768:	movw	r1, #2500	; 0x9c4
   1176c:	mov	r2, #0
   11770:	mov	r3, #0
   11774:	stm	sp, {r1, r4}
   11778:	movt	r6, #1
   1177c:	str	r0, [sp, #12]
   11780:	mov	r0, sl
   11784:	str	r4, [sp, #16]
   11788:	str	r6, [sp, #8]
   1178c:	bl	152cc <__assert_fail@plt+0x41c8>
   11790:	ldr	r8, [sp, #32]
   11794:	ldr	r9, [sp, #28]
   11798:	mov	r4, r0
   1179c:	movw	r0, #29028	; 0x7164
   117a0:	movt	r0, #2
   117a4:	str	r4, [r0]
   117a8:	b	117c8 <__assert_fail@plt+0x6c4>
   117ac:	movw	r0, #29028	; 0x7164
   117b0:	ldr	r8, [sp, #32]
   117b4:	ldr	r9, [sp, #28]
   117b8:	movw	r6, #25825	; 0x64e1
   117bc:	movt	r0, #2
   117c0:	movt	r6, #1
   117c4:	ldr	r4, [r0]
   117c8:	cmp	r7, #0
   117cc:	beq	11830 <__assert_fail@plt+0x72c>
   117d0:	movw	r1, #25320	; 0x62e8
   117d4:	mov	r0, #0
   117d8:	mov	r2, #5
   117dc:	mov	r5, #0
   117e0:	movt	r1, #1
   117e4:	bl	10f30 <dcgettext@plt>
   117e8:	asr	r1, r4, #31
   117ec:	str	r4, [sp]
   117f0:	mov	r2, #0
   117f4:	mov	r3, #0
   117f8:	stmib	sp, {r1, r6}
   117fc:	str	r0, [sp, #12]
   11800:	mov	r0, r7
   11804:	str	r5, [sp, #16]
   11808:	bl	152cc <__assert_fail@plt+0x41c8>
   1180c:	movw	r1, #29048	; 0x7178
   11810:	cmp	sl, #0
   11814:	movt	r1, #2
   11818:	str	r0, [r1]
   1181c:	bne	11858 <__assert_fail@plt+0x754>
   11820:	movw	r1, #29028	; 0x7164
   11824:	add	r0, r0, #10
   11828:	movt	r1, #2
   1182c:	b	11854 <__assert_fail@plt+0x750>
   11830:	mov	r0, #187	; 0xbb
   11834:	movw	r1, #34079	; 0x851f
   11838:	mul	r0, r4, r0
   1183c:	movt	r1, #20971	; 0x51eb
   11840:	smmul	r0, r0, r1
   11844:	asr	r1, r0, #6
   11848:	add	r0, r1, r0, lsr #31
   1184c:	movw	r1, #29048	; 0x7178
   11850:	movt	r1, #2
   11854:	str	r0, [r1]
   11858:	movw	sl, #28992	; 0x7140
   1185c:	movt	sl, #2
   11860:	ldr	r0, [sl]
   11864:	cmp	r0, r8
   11868:	bne	118d4 <__assert_fail@plt+0x7d0>
   1186c:	movw	r0, #29008	; 0x7150
   11870:	movw	r1, #26308	; 0x66c4
   11874:	movt	r0, #2
   11878:	movt	r1, #1
   1187c:	ldr	r0, [r0]
   11880:	bl	11a6c <__assert_fail@plt+0x968>
   11884:	mov	r6, r0
   11888:	movw	r0, #29008	; 0x7150
   1188c:	movt	r0, #2
   11890:	ldr	r0, [r0]
   11894:	bl	12bac <__assert_fail@plt+0x1aa8>
   11898:	cmp	r0, #0
   1189c:	beq	119c4 <__assert_fail@plt+0x8c0>
   118a0:	bl	11014 <__errno_location@plt>
   118a4:	ldr	r4, [r0]
   118a8:	movw	r1, #25361	; 0x6311
   118ac:	mov	r0, #0
   118b0:	mov	r2, #5
   118b4:	movt	r1, #1
   118b8:	bl	10f30 <dcgettext@plt>
   118bc:	movw	r2, #26239	; 0x667f
   118c0:	mov	r3, r0
   118c4:	mov	r0, #1
   118c8:	mov	r1, r4
   118cc:	movt	r2, #1
   118d0:	bl	10f9c <error@plt>
   118d4:	mov	r6, #1
   118d8:	bge	119c4 <__assert_fail@plt+0x8c0>
   118dc:	movw	r7, #26308	; 0x66c4
   118e0:	movw	r5, #25917	; 0x653d
   118e4:	mov	r1, #0
   118e8:	mov	r6, #1
   118ec:	movt	r7, #1
   118f0:	movt	r5, #1
   118f4:	str	r1, [sp, #24]
   118f8:	ldr	r4, [r9, r0, lsl #2]
   118fc:	mov	r1, r7
   11900:	mov	r0, r4
   11904:	bl	10eac <strcmp@plt>
   11908:	cmp	r0, #0
   1190c:	beq	11934 <__assert_fail@plt+0x830>
   11910:	mov	r0, r4
   11914:	mov	r1, r5
   11918:	bl	110bc <fopen64@plt>
   1191c:	cmp	r0, #0
   11920:	beq	11958 <__assert_fail@plt+0x854>
   11924:	mov	r1, r4
   11928:	bl	11a6c <__assert_fail@plt+0x968>
   1192c:	and	r6, r6, r0
   11930:	b	119a4 <__assert_fail@plt+0x8a0>
   11934:	movw	r0, #29008	; 0x7150
   11938:	mov	r1, r4
   1193c:	movt	r0, #2
   11940:	ldr	r0, [r0]
   11944:	bl	11a6c <__assert_fail@plt+0x968>
   11948:	and	r6, r6, r0
   1194c:	mov	r0, #1
   11950:	str	r0, [sp, #24]
   11954:	b	119a4 <__assert_fail@plt+0x8a0>
   11958:	bl	11014 <__errno_location@plt>
   1195c:	ldr	r9, [r0]
   11960:	movw	r1, #25334	; 0x62f6
   11964:	mov	r0, #0
   11968:	mov	r2, #5
   1196c:	mov	r6, #0
   11970:	movt	r1, #1
   11974:	bl	10f30 <dcgettext@plt>
   11978:	mov	r8, r0
   1197c:	mov	r0, #4
   11980:	mov	r1, r4
   11984:	bl	14414 <__assert_fail@plt+0x3310>
   11988:	mov	r1, r9
   1198c:	mov	r2, r8
   11990:	ldr	r9, [sp, #28]
   11994:	ldr	r8, [sp, #32]
   11998:	mov	r3, r0
   1199c:	mov	r0, #0
   119a0:	bl	10f9c <error@plt>
   119a4:	ldr	r0, [sl]
   119a8:	add	r0, r0, #1
   119ac:	cmp	r0, r8
   119b0:	str	r0, [sl]
   119b4:	blt	118f8 <__assert_fail@plt+0x7f4>
   119b8:	ldr	r0, [sp, #24]
   119bc:	tst	r0, #1
   119c0:	bne	11888 <__assert_fail@plt+0x784>
   119c4:	eor	r0, r6, #1
   119c8:	sub	sp, fp, #28
   119cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119d0:	cmn	r8, #3
   119d4:	bne	11a20 <__assert_fail@plt+0x91c>
   119d8:	movw	r0, #28912	; 0x70f0
   119dc:	movw	r2, #25306	; 0x62da
   119e0:	mov	r1, #0
   119e4:	movt	r0, #2
   119e8:	movt	r2, #1
   119ec:	str	r1, [sp, #4]
   119f0:	movw	r1, #25149	; 0x623d
   119f4:	ldr	r3, [r0]
   119f8:	movw	r0, #29012	; 0x7154
   119fc:	str	r2, [sp]
   11a00:	movw	r2, #25292	; 0x62cc
   11a04:	movt	r1, #1
   11a08:	movt	r0, #2
   11a0c:	movt	r2, #1
   11a10:	ldr	r0, [r0]
   11a14:	bl	14c38 <__assert_fail@plt+0x3b34>
   11a18:	mov	r0, #0
   11a1c:	bl	10ff0 <exit@plt>
   11a20:	cmn	r8, #2
   11a24:	bne	11a30 <__assert_fail@plt+0x92c>
   11a28:	mov	r0, #0
   11a2c:	bl	11200 <__assert_fail@plt+0xfc>
   11a30:	sub	r0, r8, #48	; 0x30
   11a34:	cmp	r0, #9
   11a38:	bhi	11a64 <__assert_fail@plt+0x960>
   11a3c:	movw	r1, #25198	; 0x626e
   11a40:	mov	r0, #0
   11a44:	mov	r2, #5
   11a48:	movt	r1, #1
   11a4c:	bl	10f30 <dcgettext@plt>
   11a50:	mov	r2, r0
   11a54:	mov	r0, #0
   11a58:	mov	r1, #0
   11a5c:	mov	r3, r8
   11a60:	bl	10f9c <error@plt>
   11a64:	mov	r0, #1
   11a68:	bl	11200 <__assert_fail@plt+0xfc>
   11a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a70:	add	fp, sp, #28
   11a74:	push	{r1}		; (str r1, [sp, #-4]!)
   11a78:	mov	r1, #2
   11a7c:	mov	r5, r0
   11a80:	bl	12b70 <__assert_fail@plt+0x1a6c>
   11a84:	movw	r0, #29056	; 0x7180
   11a88:	mov	r7, #0
   11a8c:	movt	r0, #2
   11a90:	str	r7, [r0]
   11a94:	movw	r0, #29052	; 0x717c
   11a98:	movt	r0, #2
   11a9c:	strb	r7, [r0]
   11aa0:	mov	r0, r5
   11aa4:	bl	1201c <__assert_fail@plt+0xf18>
   11aa8:	mov	r6, r0
   11aac:	movw	r0, #29060	; 0x7184
   11ab0:	movw	r9, #62096	; 0xf290
   11ab4:	movw	r8, #29072	; 0x7190
   11ab8:	movw	sl, #29068	; 0x718c
   11abc:	movt	r0, #2
   11ac0:	movt	r9, #2
   11ac4:	movt	r8, #2
   11ac8:	movt	sl, #2
   11acc:	str	r6, [r0]
   11ad0:	movw	r0, #29076	; 0x7194
   11ad4:	movt	r0, #2
   11ad8:	b	11b10 <__assert_fail@plt+0xa0c>
   11adc:	ldrb	r0, [r6, #-16]
   11ae0:	orr	r0, r0, #10
   11ae4:	strb	r0, [r6, #-16]
   11ae8:	movw	r0, #29060	; 0x7184
   11aec:	movt	r0, #2
   11af0:	mov	r4, r0
   11af4:	str	r2, [r0]
   11af8:	bl	120f8 <__assert_fail@plt+0xff4>
   11afc:	mov	r0, r6
   11b00:	bl	12354 <__assert_fail@plt+0x1250>
   11b04:	ldr	r6, [r4]
   11b08:	movw	r0, #29076	; 0x7194
   11b0c:	movt	r0, #2
   11b10:	str	r7, [r0]
   11b14:	b	11b78 <__assert_fail@plt+0xa74>
   11b18:	movw	r2, #29044	; 0x7174
   11b1c:	ldr	r0, [r8]
   11b20:	movt	r2, #2
   11b24:	ldr	r2, [r2]
   11b28:	add	r0, r2, r0
   11b2c:	cmp	r1, r0
   11b30:	blt	11b54 <__assert_fail@plt+0xa50>
   11b34:	mov	r0, #10
   11b38:	bl	110f8 <putchar_unlocked@plt>
   11b3c:	b	11b54 <__assert_fail@plt+0xa50>
   11b40:	mov	r0, r6
   11b44:	bl	110f8 <putchar_unlocked@plt>
   11b48:	mov	r0, r5
   11b4c:	bl	10f24 <getc_unlocked@plt>
   11b50:	mov	r6, r0
   11b54:	cmn	r6, #1
   11b58:	beq	11f54 <__assert_fail@plt+0xe50>
   11b5c:	cmp	r6, #10
   11b60:	bne	11b40 <__assert_fail@plt+0xa3c>
   11b64:	mov	r0, #10
   11b68:	bl	110f8 <putchar_unlocked@plt>
   11b6c:	mov	r0, r5
   11b70:	bl	1201c <__assert_fail@plt+0xf18>
   11b74:	mov	r6, r0
   11b78:	cmn	r6, #1
   11b7c:	cmpne	r6, #10
   11b80:	bne	11c24 <__assert_fail@plt+0xb20>
   11b84:	ldr	r0, [r8]
   11b88:	ldr	r1, [sl]
   11b8c:	str	r7, [r9]
   11b90:	cmp	r1, r0
   11b94:	bgt	11ba4 <__assert_fail@plt+0xaa0>
   11b98:	cmn	r6, #1
   11b9c:	cmpne	r6, #10
   11ba0:	beq	11b54 <__assert_fail@plt+0xa50>
   11ba4:	bl	12794 <__assert_fail@plt+0x1690>
   11ba8:	ldr	r1, [sl]
   11bac:	ldr	r0, [r9]
   11bb0:	cmp	r1, r0
   11bb4:	beq	11c04 <__assert_fail@plt+0xb00>
   11bb8:	movw	r2, #29032	; 0x7168
   11bbc:	movt	r2, #2
   11bc0:	ldr	r3, [r2]
   11bc4:	ldrb	r2, [r3]
   11bc8:	cmp	r2, #0
   11bcc:	beq	11c08 <__assert_fail@plt+0xb04>
   11bd0:	add	r4, r3, #1
   11bd4:	uxtb	r0, r2
   11bd8:	bl	110f8 <putchar_unlocked@plt>
   11bdc:	ldr	r0, [r9]
   11be0:	ldr	r1, [sl]
   11be4:	add	r0, r0, #1
   11be8:	cmp	r1, r0
   11bec:	str	r0, [r9]
   11bf0:	beq	11c04 <__assert_fail@plt+0xb00>
   11bf4:	ldrb	r2, [r4], #1
   11bf8:	cmp	r2, #0
   11bfc:	bne	11bd4 <__assert_fail@plt+0xad0>
   11c00:	b	11c08 <__assert_fail@plt+0xb04>
   11c04:	mov	r1, r0
   11c08:	cmn	r6, #1
   11c0c:	beq	11b18 <__assert_fail@plt+0xa14>
   11c10:	cmp	r6, #10
   11c14:	beq	11b54 <__assert_fail@plt+0xa50>
   11c18:	sub	r0, r1, r0
   11c1c:	bl	12794 <__assert_fail@plt+0x1690>
   11c20:	b	11b54 <__assert_fail@plt+0xa50>
   11c24:	movw	r1, #29040	; 0x7170
   11c28:	ldr	r0, [r8]
   11c2c:	movt	r1, #2
   11c30:	ldr	r1, [r1]
   11c34:	cmp	r0, r1
   11c38:	blt	11b84 <__assert_fail@plt+0xa80>
   11c3c:	movw	r1, #29036	; 0x716c
   11c40:	movt	r1, #2
   11c44:	ldr	r1, [r1]
   11c48:	add	r2, r1, r0
   11c4c:	ldr	r1, [sl]
   11c50:	cmp	r1, r2
   11c54:	blt	11b84 <__assert_fail@plt+0xa80>
   11c58:	movw	r2, #29084	; 0x719c
   11c5c:	movt	r2, #2
   11c60:	str	r1, [r2]
   11c64:	movw	r1, #29080	; 0x7198
   11c68:	movt	r1, #2
   11c6c:	str	r0, [r1]
   11c70:	movw	r0, #34088	; 0x8528
   11c74:	mov	r4, r1
   11c78:	movw	r1, #29088	; 0x71a0
   11c7c:	movt	r0, #2
   11c80:	movt	r1, #2
   11c84:	str	r1, [r0]
   11c88:	movw	r0, #29064	; 0x7188
   11c8c:	movw	r1, #34096	; 0x8530
   11c90:	movt	r0, #2
   11c94:	movt	r1, #2
   11c98:	str	r1, [r0]
   11c9c:	mov	r0, r5
   11ca0:	mov	r1, r6
   11ca4:	bl	12418 <__assert_fail@plt+0x1314>
   11ca8:	ldr	r1, [r8]
   11cac:	ldr	r2, [r4]
   11cb0:	mov	r3, r0
   11cb4:	mov	r0, #0
   11cb8:	cmp	r1, r2
   11cbc:	bne	11cfc <__assert_fail@plt+0xbf8>
   11cc0:	movw	r0, #29036	; 0x716c
   11cc4:	movt	r0, #2
   11cc8:	ldr	r0, [r0]
   11ccc:	add	r0, r0, r1
   11cd0:	ldr	r1, [sl]
   11cd4:	cmp	r1, r0
   11cd8:	mov	r0, #0
   11cdc:	movwge	r0, #1
   11ce0:	subs	r1, r3, #10
   11ce4:	movwne	r1, #1
   11ce8:	cmn	r3, #1
   11cec:	and	r0, r1, r0
   11cf0:	add	r1, r3, #1
   11cf4:	movwne	r1, #1
   11cf8:	and	r0, r1, r0
   11cfc:	mov	r4, r3
   11d00:	bl	126bc <__assert_fail@plt+0x15b8>
   11d04:	movw	r0, #29025	; 0x7161
   11d08:	movt	r0, #2
   11d0c:	ldrb	r0, [r0]
   11d10:	cmp	r0, #0
   11d14:	beq	11d20 <__assert_fail@plt+0xc1c>
   11d18:	mov	r2, r4
   11d1c:	b	11f18 <__assert_fail@plt+0xe14>
   11d20:	movw	r0, #29027	; 0x7163
   11d24:	movt	r0, #2
   11d28:	ldrb	r0, [r0]
   11d2c:	cmp	r0, #1
   11d30:	bne	11de0 <__assert_fail@plt+0xcdc>
   11d34:	movw	r1, #29080	; 0x7198
   11d38:	ldr	r0, [r8]
   11d3c:	mov	r2, r4
   11d40:	movt	r1, #2
   11d44:	ldr	r1, [r1]
   11d48:	cmp	r0, r1
   11d4c:	bne	11f18 <__assert_fail@plt+0xe14>
   11d50:	movw	r1, #29036	; 0x716c
   11d54:	movt	r1, #2
   11d58:	ldr	r1, [r1]
   11d5c:	add	r0, r1, r0
   11d60:	ldr	r1, [sl]
   11d64:	cmp	r1, r0
   11d68:	blt	11f18 <__assert_fail@plt+0xe14>
   11d6c:	cmn	r2, #1
   11d70:	cmpne	r2, #10
   11d74:	beq	11f18 <__assert_fail@plt+0xe14>
   11d78:	mov	r0, r5
   11d7c:	mov	r1, r2
   11d80:	bl	12418 <__assert_fail@plt+0x1314>
   11d84:	movw	r1, #29080	; 0x7198
   11d88:	mov	r2, r0
   11d8c:	ldr	r0, [r8]
   11d90:	movt	r1, #2
   11d94:	ldr	r1, [r1]
   11d98:	cmp	r0, r1
   11d9c:	bne	11f18 <__assert_fail@plt+0xe14>
   11da0:	movw	r1, #29036	; 0x716c
   11da4:	movt	r1, #2
   11da8:	ldr	r1, [r1]
   11dac:	add	r1, r1, r0
   11db0:	ldr	r0, [sl]
   11db4:	cmp	r0, r1
   11db8:	blt	11f18 <__assert_fail@plt+0xe14>
   11dbc:	cmn	r2, #1
   11dc0:	cmpne	r2, #10
   11dc4:	beq	11f18 <__assert_fail@plt+0xe14>
   11dc8:	movw	r1, #29056	; 0x7180
   11dcc:	movt	r1, #2
   11dd0:	ldr	r1, [r1]
   11dd4:	cmp	r0, r1
   11dd8:	beq	11d78 <__assert_fail@plt+0xc74>
   11ddc:	b	11f18 <__assert_fail@plt+0xe14>
   11de0:	movw	r2, #29026	; 0x7162
   11de4:	movw	r0, #29080	; 0x7198
   11de8:	movt	r2, #2
   11dec:	movt	r0, #2
   11df0:	ldrb	r2, [r2]
   11df4:	ldr	r1, [r0]
   11df8:	ldr	r0, [r8]
   11dfc:	cmp	r2, #0
   11e00:	mov	r2, r4
   11e04:	beq	11ed4 <__assert_fail@plt+0xdd0>
   11e08:	cmp	r0, r1
   11e0c:	bne	11f18 <__assert_fail@plt+0xe14>
   11e10:	movw	r1, #29036	; 0x716c
   11e14:	movt	r1, #2
   11e18:	ldr	r1, [r1]
   11e1c:	add	r1, r1, r0
   11e20:	ldr	r0, [sl]
   11e24:	cmp	r0, r1
   11e28:	blt	11f18 <__assert_fail@plt+0xe14>
   11e2c:	cmn	r2, #1
   11e30:	cmpne	r2, #10
   11e34:	beq	11f18 <__assert_fail@plt+0xe14>
   11e38:	movw	r1, #29084	; 0x719c
   11e3c:	movt	r1, #2
   11e40:	ldr	r1, [r1]
   11e44:	cmp	r0, r1
   11e48:	beq	11f18 <__assert_fail@plt+0xe14>
   11e4c:	mov	r0, r5
   11e50:	mov	r1, r2
   11e54:	bl	12418 <__assert_fail@plt+0x1314>
   11e58:	movw	r1, #29080	; 0x7198
   11e5c:	mov	r2, r0
   11e60:	ldr	r0, [r8]
   11e64:	movt	r1, #2
   11e68:	ldr	r1, [r1]
   11e6c:	cmp	r0, r1
   11e70:	bne	11f18 <__assert_fail@plt+0xe14>
   11e74:	movw	r1, #29036	; 0x716c
   11e78:	movt	r1, #2
   11e7c:	ldr	r1, [r1]
   11e80:	add	r1, r1, r0
   11e84:	ldr	r0, [sl]
   11e88:	cmp	r0, r1
   11e8c:	blt	11f18 <__assert_fail@plt+0xe14>
   11e90:	cmn	r2, #1
   11e94:	cmpne	r2, #10
   11e98:	beq	11f18 <__assert_fail@plt+0xe14>
   11e9c:	movw	r1, #29056	; 0x7180
   11ea0:	movt	r1, #2
   11ea4:	ldr	r1, [r1]
   11ea8:	cmp	r0, r1
   11eac:	beq	11e4c <__assert_fail@plt+0xd48>
   11eb0:	b	11f18 <__assert_fail@plt+0xe14>
   11eb4:	mov	r0, r5
   11eb8:	mov	r1, r2
   11ebc:	bl	12418 <__assert_fail@plt+0x1314>
   11ec0:	movw	r1, #29080	; 0x7198
   11ec4:	mov	r2, r0
   11ec8:	ldr	r0, [r8]
   11ecc:	movt	r1, #2
   11ed0:	ldr	r1, [r1]
   11ed4:	cmp	r0, r1
   11ed8:	bne	11f18 <__assert_fail@plt+0xe14>
   11edc:	movw	r1, #29036	; 0x716c
   11ee0:	movt	r1, #2
   11ee4:	ldr	r1, [r1]
   11ee8:	add	r1, r1, r0
   11eec:	ldr	r0, [sl]
   11ef0:	cmp	r0, r1
   11ef4:	blt	11f18 <__assert_fail@plt+0xe14>
   11ef8:	cmn	r2, #1
   11efc:	cmpne	r2, #10
   11f00:	beq	11f18 <__assert_fail@plt+0xe14>
   11f04:	movw	r1, #29056	; 0x7180
   11f08:	movt	r1, #2
   11f0c:	ldr	r1, [r1]
   11f10:	cmp	r0, r1
   11f14:	beq	11eb4 <__assert_fail@plt+0xdb0>
   11f18:	movw	r0, #29064	; 0x7188
   11f1c:	movt	r0, #2
   11f20:	ldr	r6, [r0]
   11f24:	movw	r0, #34096	; 0x8530
   11f28:	movt	r0, #2
   11f2c:	cmp	r6, r0
   11f30:	bhi	11adc <__assert_fail@plt+0x9d8>
   11f34:	movw	r0, #25919	; 0x653f
   11f38:	movw	r1, #25937	; 0x6551
   11f3c:	movw	r3, #25947	; 0x655b
   11f40:	movw	r2, #623	; 0x26f
   11f44:	movt	r0, #1
   11f48:	movt	r1, #1
   11f4c:	movt	r3, #1
   11f50:	bl	11104 <__assert_fail@plt>
   11f54:	movw	r1, #29060	; 0x7184
   11f58:	mvn	r0, #0
   11f5c:	movt	r1, #2
   11f60:	str	r0, [r1]
   11f64:	mov	r0, r5
   11f68:	bl	10f84 <ferror_unlocked@plt>
   11f6c:	mov	r7, r0
   11f70:	cmp	r0, #0
   11f74:	movw	r0, #29008	; 0x7150
   11f78:	mov	r6, #0
   11f7c:	movt	r0, #2
   11f80:	mvneq	r6, #0
   11f84:	ldr	r0, [r0]
   11f88:	cmp	r0, r5
   11f8c:	beq	11fb4 <__assert_fail@plt+0xeb0>
   11f90:	mov	r0, r5
   11f94:	bl	12bac <__assert_fail@plt+0x1aa8>
   11f98:	cmp	r7, #0
   11f9c:	bne	11fbc <__assert_fail@plt+0xeb8>
   11fa0:	cmp	r0, #0
   11fa4:	beq	11fbc <__assert_fail@plt+0xeb8>
   11fa8:	bl	11014 <__errno_location@plt>
   11fac:	ldr	r6, [r0]
   11fb0:	b	11fbc <__assert_fail@plt+0xeb8>
   11fb4:	mov	r0, r5
   11fb8:	bl	110b0 <clearerr_unlocked@plt>
   11fbc:	cmp	r6, #0
   11fc0:	blt	12010 <__assert_fail@plt+0xf0c>
   11fc4:	beq	11fd4 <__assert_fail@plt+0xed0>
   11fc8:	movw	r5, #26239	; 0x667f
   11fcc:	movt	r5, #1
   11fd0:	b	11fec <__assert_fail@plt+0xee8>
   11fd4:	movw	r1, #25908	; 0x6534
   11fd8:	mov	r0, #0
   11fdc:	mov	r2, #5
   11fe0:	movt	r1, #1
   11fe4:	bl	10f30 <dcgettext@plt>
   11fe8:	mov	r5, r0
   11fec:	ldr	r2, [sp]
   11ff0:	mov	r0, #0
   11ff4:	mov	r1, #3
   11ff8:	bl	145b8 <__assert_fail@plt+0x34b4>
   11ffc:	mov	r3, r0
   12000:	mov	r0, #0
   12004:	mov	r1, r6
   12008:	mov	r2, r5
   1200c:	bl	10f9c <error@plt>
   12010:	lsr	r0, r6, #31
   12014:	sub	sp, fp, #28
   12018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1201c:	push	{r4, r5, r6, sl, fp, lr}
   12020:	add	fp, sp, #16
   12024:	movw	r5, #29068	; 0x718c
   12028:	mov	r4, r0
   1202c:	mov	r0, #0
   12030:	movt	r5, #2
   12034:	str	r0, [r5]
   12038:	mov	r0, r4
   1203c:	bl	10f24 <getc_unlocked@plt>
   12040:	mov	r1, r0
   12044:	mov	r0, r4
   12048:	bl	123ac <__assert_fail@plt+0x12a8>
   1204c:	mov	r1, r0
   12050:	movw	r0, #29044	; 0x7174
   12054:	movt	r0, #2
   12058:	ldr	r0, [r0]
   1205c:	cmp	r0, #0
   12060:	beq	120cc <__assert_fail@plt+0xfc8>
   12064:	ldr	r0, [r5]
   12068:	movw	r2, #29072	; 0x7190
   1206c:	movt	r2, #2
   12070:	str	r0, [r2]
   12074:	movw	r0, #29032	; 0x7168
   12078:	movt	r0, #2
   1207c:	ldr	r2, [r0]
   12080:	ldrb	r0, [r2]
   12084:	cmp	r0, #0
   12088:	beq	120c0 <__assert_fail@plt+0xfbc>
   1208c:	add	r6, r2, #1
   12090:	uxtb	r0, r0
   12094:	cmp	r1, r0
   12098:	bne	120f0 <__assert_fail@plt+0xfec>
   1209c:	ldr	r0, [r5]
   120a0:	add	r0, r0, #1
   120a4:	str	r0, [r5]
   120a8:	mov	r0, r4
   120ac:	bl	10f24 <getc_unlocked@plt>
   120b0:	mov	r1, r0
   120b4:	ldrb	r0, [r6], #1
   120b8:	cmp	r0, #0
   120bc:	bne	12090 <__assert_fail@plt+0xf8c>
   120c0:	mov	r0, r4
   120c4:	pop	{r4, r5, r6, sl, fp, lr}
   120c8:	b	123ac <__assert_fail@plt+0x12a8>
   120cc:	movw	r0, #29040	; 0x7170
   120d0:	ldr	r2, [r5]
   120d4:	movt	r0, #2
   120d8:	ldr	r0, [r0]
   120dc:	cmp	r0, r2
   120e0:	movlt	r2, r0
   120e4:	movw	r0, #29072	; 0x7190
   120e8:	movt	r0, #2
   120ec:	str	r2, [r0]
   120f0:	mov	r0, r1
   120f4:	pop	{r4, r5, r6, sl, fp, pc}
   120f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120fc:	add	fp, sp, #28
   12100:	sub	sp, sp, #24
   12104:	movw	r0, #29064	; 0x7188
   12108:	mov	r5, #0
   1210c:	movw	lr, #34096	; 0x8530
   12110:	movt	r0, #2
   12114:	movt	lr, #2
   12118:	ldr	r0, [r0]
   1211c:	str	r5, [r0, #20]
   12120:	ldr	r1, [r0, #4]
   12124:	str	r1, [sp]
   12128:	movw	r1, #29028	; 0x7164
   1212c:	movt	r1, #2
   12130:	ldr	r3, [r1]
   12134:	sub	r1, r0, #28
   12138:	cmp	r1, lr
   1213c:	str	r3, [r0, #4]
   12140:	bcc	12344 <__assert_fail@plt+0x1240>
   12144:	movw	r7, #29076	; 0x7194
   12148:	movw	r2, #29048	; 0x7178
   1214c:	mov	r9, r0
   12150:	movt	r7, #2
   12154:	movt	r2, #2
   12158:	ldr	r8, [r7]
   1215c:	movw	r7, #29056	; 0x7180
   12160:	ldr	r2, [r2]
   12164:	movt	r7, #2
   12168:	ldr	r7, [r7]
   1216c:	str	r7, [sp, #8]
   12170:	movw	r7, #29084	; 0x719c
   12174:	movt	r7, #2
   12178:	ldr	r7, [r7]
   1217c:	str	r7, [sp, #4]
   12180:	mov	r4, r1
   12184:	cmp	r1, lr
   12188:	ldr	r1, [sp, #8]
   1218c:	ldr	r6, [sp, #4]
   12190:	mov	r7, r9
   12194:	mvn	ip, #-2147483648	; 0x80000000
   12198:	str	r5, [sp, #16]
   1219c:	str	r4, [sp, #20]
   121a0:	moveq	r1, r6
   121a4:	ldr	r6, [r9, #-24]	; 0xffffffe8
   121a8:	cmp	r8, #0
   121ac:	add	sl, r1, r6
   121b0:	str	r6, [sp, #12]
   121b4:	sub	r6, r4, lr
   121b8:	mov	r1, #0
   121bc:	clz	r6, r6
   121c0:	movwgt	r1, #1
   121c4:	lsr	r6, r6, #5
   121c8:	and	r6, r6, r1
   121cc:	mov	r1, r5
   121d0:	add	lr, r0, r1
   121d4:	cmp	r1, #0
   121d8:	beq	12214 <__assert_fail@plt+0x1110>
   121dc:	ldr	r4, [lr, #24]
   121e0:	sub	r5, r2, sl
   121e4:	add	r5, r5, r5, lsl #2
   121e8:	lsl	r5, r5, #1
   121ec:	mul	r5, r5, r5
   121f0:	cmp	r4, r0
   121f4:	beq	12218 <__assert_fail@plt+0x1114>
   121f8:	ldr	r4, [lr, #16]
   121fc:	sub	r4, sl, r4
   12200:	add	r4, r4, r4, lsl #2
   12204:	lsl	r4, r4, #1
   12208:	mul	r4, r4, r4
   1220c:	add	r5, r5, r4, lsr #1
   12210:	b	12218 <__assert_fail@plt+0x1114>
   12214:	mov	r5, #0
   12218:	ldr	r4, [lr, #20]
   1221c:	cmp	r6, #0
   12220:	add	r9, r4, r5
   12224:	beq	1223c <__assert_fail@plt+0x1138>
   12228:	sub	r4, sl, r8
   1222c:	add	r4, r4, r4, lsl #2
   12230:	lsl	r4, r4, #1
   12234:	mul	r4, r4, r4
   12238:	add	r9, r9, r4, lsr #1
   1223c:	cmp	r9, ip
   12240:	strlt	sl, [r7, #-12]
   12244:	strlt	lr, [r7, #-4]
   12248:	movlt	ip, r9
   1224c:	cmp	r1, #0
   12250:	beq	12270 <__assert_fail@plt+0x116c>
   12254:	ldr	r4, [lr, #-20]	; 0xffffffec
   12258:	ldr	r5, [lr, #4]
   1225c:	add	r1, r1, #28
   12260:	add	r4, r4, sl
   12264:	add	sl, r4, r5
   12268:	cmp	sl, r3
   1226c:	blt	121d0 <__assert_fail@plt+0x10cc>
   12270:	ldr	r9, [sp, #20]
   12274:	movw	r4, #34096	; 0x8530
   12278:	movt	r4, #2
   1227c:	mov	lr, r4
   12280:	cmp	r9, r4
   12284:	bls	122dc <__assert_fail@plt+0x11d8>
   12288:	ldrb	r6, [r7, #-44]	; 0xffffffd4
   1228c:	tst	r6, #2
   12290:	bne	122e8 <__assert_fail@plt+0x11e4>
   12294:	ldr	r5, [sp, #16]
   12298:	movw	r1, #3300	; 0xce4
   1229c:	tst	r6, #4
   122a0:	bne	122fc <__assert_fail@plt+0x11f8>
   122a4:	add	r1, lr, #28
   122a8:	cmp	r9, r1
   122ac:	bls	122e0 <__assert_fail@plt+0x11dc>
   122b0:	ldrb	r1, [r7, #-72]	; 0xffffffb8
   122b4:	tst	r1, #8
   122b8:	movw	r1, #4900	; 0x1324
   122bc:	beq	122fc <__assert_fail@plt+0x11f8>
   122c0:	ldr	r1, [r7, #-52]	; 0xffffffcc
   122c4:	movw	r6, #40000	; 0x9c40
   122c8:	add	r1, r1, #2
   122cc:	sdiv	r1, r6, r1
   122d0:	movw	r6, #4900	; 0x1324
   122d4:	add	r1, r1, r6
   122d8:	b	122fc <__assert_fail@plt+0x11f8>
   122dc:	ldr	r5, [sp, #16]
   122e0:	movw	r1, #4900	; 0x1324
   122e4:	b	122fc <__assert_fail@plt+0x11f8>
   122e8:	ldr	r5, [sp, #16]
   122ec:	tst	r6, #8
   122f0:	mov	r1, #2400	; 0x960
   122f4:	movweq	r1, #37220	; 0x9164
   122f8:	movteq	r1, #5
   122fc:	ldrb	r6, [r7, #-16]
   12300:	tst	r6, #1
   12304:	bne	12328 <__assert_fail@plt+0x1224>
   12308:	tst	r6, #8
   1230c:	beq	1232c <__assert_fail@plt+0x1228>
   12310:	ldr	r4, [sp, #12]
   12314:	add	r6, r4, #2
   12318:	movw	r4, #22500	; 0x57e4
   1231c:	sdiv	r6, r4, r6
   12320:	add	r1, r6, r1
   12324:	b	1232c <__assert_fail@plt+0x1228>
   12328:	sub	r1, r1, #1600	; 0x640
   1232c:	add	r1, r1, ip
   12330:	sub	r5, r5, #28
   12334:	str	r1, [r7, #-8]
   12338:	sub	r1, r9, #28
   1233c:	cmp	r1, lr
   12340:	bcs	12180 <__assert_fail@plt+0x107c>
   12344:	ldr	r1, [sp]
   12348:	str	r1, [r0, #4]
   1234c:	sub	sp, fp, #28
   12350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12354:	push	{r4, r5, r6, sl, fp, lr}
   12358:	add	fp, sp, #16
   1235c:	mov	r4, r0
   12360:	movw	r0, #29084	; 0x719c
   12364:	movw	r5, #34096	; 0x8530
   12368:	movt	r0, #2
   1236c:	movt	r5, #2
   12370:	ldr	r1, [r0]
   12374:	mov	r0, r5
   12378:	bl	1298c <__assert_fail@plt+0x1888>
   1237c:	ldr	r5, [r5, #24]
   12380:	cmp	r5, r4
   12384:	popeq	{r4, r5, r6, sl, fp, pc}
   12388:	movw	r6, #29056	; 0x7180
   1238c:	movt	r6, #2
   12390:	ldr	r1, [r6]
   12394:	mov	r0, r5
   12398:	bl	1298c <__assert_fail@plt+0x1888>
   1239c:	ldr	r5, [r5, #24]
   123a0:	cmp	r5, r4
   123a4:	bne	12390 <__assert_fail@plt+0x128c>
   123a8:	pop	{r4, r5, r6, sl, fp, pc}
   123ac:	push	{r4, r5, r6, r7, fp, lr}
   123b0:	add	fp, sp, #16
   123b4:	movw	r5, #29052	; 0x717c
   123b8:	movw	r7, #29068	; 0x718c
   123bc:	mov	r4, r0
   123c0:	mov	r6, #1
   123c4:	movt	r5, #2
   123c8:	movt	r7, #2
   123cc:	cmp	r1, #9
   123d0:	beq	123ec <__assert_fail@plt+0x12e8>
   123d4:	cmp	r1, #32
   123d8:	movne	r0, r1
   123dc:	popne	{r4, r5, r6, r7, fp, pc}
   123e0:	ldr	r0, [r7]
   123e4:	add	r0, r0, #1
   123e8:	b	12404 <__assert_fail@plt+0x1300>
   123ec:	ldr	r0, [r7]
   123f0:	strb	r6, [r5]
   123f4:	asr	r1, r0, #31
   123f8:	add	r0, r0, r1, lsr #29
   123fc:	bic	r0, r0, #7
   12400:	add	r0, r0, #8
   12404:	str	r0, [r7]
   12408:	mov	r0, r4
   1240c:	bl	10f24 <getc_unlocked@plt>
   12410:	mov	r1, r0
   12414:	b	123cc <__assert_fail@plt+0x12c8>
   12418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1241c:	add	fp, sp, #28
   12420:	sub	sp, sp, #20
   12424:	mov	r8, r0
   12428:	movw	r0, #29064	; 0x7188
   1242c:	movw	r2, #29088	; 0x71a0
   12430:	mov	r5, r1
   12434:	movw	r1, #5000	; 0x1388
   12438:	movw	r4, #34088	; 0x8528
   1243c:	movt	r0, #2
   12440:	movt	r2, #2
   12444:	movt	r4, #2
   12448:	ldr	r0, [r0]
   1244c:	add	r7, r2, r1
   12450:	movw	r2, #34096	; 0x8530
   12454:	movw	r1, #27944	; 0x6d28
   12458:	movt	r2, #2
   1245c:	add	r1, r2, r1
   12460:	stm	sp, {r1, r7, r8}
   12464:	ldr	r1, [r4]
   12468:	str	r1, [r0]
   1246c:	b	12474 <__assert_fail@plt+0x1370>
   12470:	ldr	r1, [r4]
   12474:	cmp	r1, r7
   12478:	bne	1248c <__assert_fail@plt+0x1388>
   1247c:	mov	r0, #1
   12480:	bl	126bc <__assert_fail@plt+0x15b8>
   12484:	bl	1282c <__assert_fail@plt+0x1728>
   12488:	ldr	r1, [r4]
   1248c:	add	r0, r1, #1
   12490:	str	r0, [r4]
   12494:	mov	r0, r8
   12498:	strb	r5, [r1]
   1249c:	bl	10f24 <getc_unlocked@plt>
   124a0:	mov	r5, r0
   124a4:	bl	10fe4 <__ctype_b_loc@plt>
   124a8:	mov	r6, r0
   124ac:	cmn	r5, #1
   124b0:	beq	124c8 <__assert_fail@plt+0x13c4>
   124b4:	ldr	r0, [r6]
   124b8:	add	r0, r0, r5, lsl #1
   124bc:	ldrb	r0, [r0, #1]
   124c0:	tst	r0, #32
   124c4:	beq	12470 <__assert_fail@plt+0x136c>
   124c8:	movw	r0, #29064	; 0x7188
   124cc:	ldr	sl, [r4]
   124d0:	mov	r2, #6
   124d4:	movt	r0, #2
   124d8:	ldr	r8, [r0]
   124dc:	movw	r0, #29068	; 0x718c
   124e0:	movt	r0, #2
   124e4:	mov	r1, r0
   124e8:	ldr	r9, [r8]
   124ec:	sub	r4, sl, r9
   124f0:	str	r4, [r8, #4]
   124f4:	ldr	r0, [r0]
   124f8:	add	r0, r0, r4
   124fc:	str	r0, [r1]
   12500:	str	r0, [sp, #16]
   12504:	ldrb	r0, [sl, #-1]!
   12508:	ldrb	r1, [r9]
   1250c:	str	r0, [sp, #12]
   12510:	movw	r0, #25975	; 0x6577
   12514:	movt	r0, #1
   12518:	bl	11068 <memchr@plt>
   1251c:	ldrb	r1, [r8, #12]
   12520:	cmp	r0, #0
   12524:	movwne	r0, #1
   12528:	cmp	r4, #2
   1252c:	bic	r1, r1, #1
   12530:	orr	r7, r1, r0
   12534:	ldr	r1, [sp, #12]
   12538:	str	r8, [sp, #12]
   1253c:	strb	r7, [r8, #12]
   12540:	ldr	r0, [r6]
   12544:	ldrb	r0, [r0, r1, lsl #1]
   12548:	lsr	r0, r0, #2
   1254c:	bfi	r7, r0, #2, #1
   12550:	strb	r7, [r8, #12]
   12554:	blt	1258c <__assert_fail@plt+0x1488>
   12558:	movw	r6, #25981	; 0x657d
   1255c:	movw	r4, #34088	; 0x8528
   12560:	movt	r6, #1
   12564:	movt	r4, #2
   12568:	ldrb	r1, [sl]
   1256c:	mov	r0, r6
   12570:	mov	r2, #5
   12574:	bl	11068 <memchr@plt>
   12578:	cmp	r0, #0
   1257c:	subne	sl, sl, #1
   12580:	cmpne	sl, r9
   12584:	bhi	12568 <__assert_fail@plt+0x1464>
   12588:	b	12594 <__assert_fail@plt+0x1490>
   1258c:	movw	r4, #34088	; 0x8528
   12590:	movt	r4, #2
   12594:	ldrb	r1, [sl]
   12598:	movw	r0, #25986	; 0x6582
   1259c:	mov	r2, #4
   125a0:	movt	r0, #1
   125a4:	bl	11068 <memchr@plt>
   125a8:	cmp	r0, #0
   125ac:	and	r1, r7, #253	; 0xfd
   125b0:	ldr	r8, [sp, #8]
   125b4:	movwne	r0, #1
   125b8:	orr	r0, r1, r0, lsl #1
   125bc:	ldr	r1, [sp, #12]
   125c0:	strb	r0, [r1, #12]
   125c4:	mov	r0, r8
   125c8:	mov	r1, r5
   125cc:	bl	123ac <__assert_fail@plt+0x12a8>
   125d0:	mov	r5, r0
   125d4:	movw	r0, #29068	; 0x718c
   125d8:	ldr	r1, [sp, #16]
   125dc:	ldr	r7, [sp, #4]
   125e0:	movt	r0, #2
   125e4:	cmn	r5, #1
   125e8:	ldr	r0, [r0]
   125ec:	sub	r2, r0, r1
   125f0:	movw	r0, #29064	; 0x7188
   125f4:	movt	r0, #2
   125f8:	ldr	r0, [r0]
   125fc:	str	r2, [r0, #8]
   12600:	ldrb	r1, [r0, #12]
   12604:	beq	1261c <__assert_fail@plt+0x1518>
   12608:	mov	r3, #0
   1260c:	tst	r1, #2
   12610:	beq	12634 <__assert_fail@plt+0x1530>
   12614:	cmp	r5, #10
   12618:	bne	12628 <__assert_fail@plt+0x1524>
   1261c:	orr	r1, r1, #8
   12620:	strb	r1, [r0, #12]
   12624:	b	1265c <__assert_fail@plt+0x1558>
   12628:	cmp	r2, #1
   1262c:	mov	r3, #0
   12630:	movwgt	r3, #1
   12634:	and	r1, r1, #247	; 0xf7
   12638:	cmp	r5, #10
   1263c:	orr	r1, r1, r3, lsl #3
   12640:	strb	r1, [r0, #12]
   12644:	beq	1265c <__assert_fail@plt+0x1558>
   12648:	movw	r2, #29024	; 0x7160
   1264c:	movt	r2, #2
   12650:	ldrb	r2, [r2]
   12654:	cmp	r2, #1
   12658:	bne	1266c <__assert_fail@plt+0x1568>
   1265c:	tst	r1, #8
   12660:	mov	r1, #2
   12664:	movweq	r1, #1
   12668:	str	r1, [r0, #8]
   1266c:	ldr	r1, [sp]
   12670:	cmp	r0, r1
   12674:	bne	12690 <__assert_fail@plt+0x158c>
   12678:	mov	r0, #1
   1267c:	bl	126bc <__assert_fail@plt+0x15b8>
   12680:	bl	1282c <__assert_fail@plt+0x1728>
   12684:	movw	r0, #29064	; 0x7188
   12688:	movt	r0, #2
   1268c:	ldr	r0, [r0]
   12690:	movw	r1, #29064	; 0x7188
   12694:	cmp	r5, #10
   12698:	add	r0, r0, #28
   1269c:	movt	r1, #2
   126a0:	cmnne	r5, #1
   126a4:	str	r0, [r1]
   126a8:	bne	12464 <__assert_fail@plt+0x1360>
   126ac:	mov	r0, r8
   126b0:	sub	sp, fp, #28
   126b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126b8:	b	1201c <__assert_fail@plt+0xf18>
   126bc:	movw	r1, #29025	; 0x7161
   126c0:	movt	r1, #2
   126c4:	ldrb	r1, [r1]
   126c8:	cmp	r1, #1
   126cc:	beq	12744 <__assert_fail@plt+0x1640>
   126d0:	movw	r1, #29027	; 0x7163
   126d4:	movt	r1, #2
   126d8:	ldrb	r1, [r1]
   126dc:	cmp	r1, #1
   126e0:	bne	12704 <__assert_fail@plt+0x1600>
   126e4:	movw	r1, #29068	; 0x718c
   126e8:	movw	r2, #29084	; 0x719c
   126ec:	cmp	r0, #0
   126f0:	movt	r1, #2
   126f4:	movt	r2, #2
   126f8:	movne	r2, r1
   126fc:	ldr	r0, [r2]
   12700:	b	12750 <__assert_fail@plt+0x164c>
   12704:	movw	r1, #29026	; 0x7162
   12708:	movt	r1, #2
   1270c:	ldrb	r1, [r1]
   12710:	cmp	r1, #1
   12714:	bne	12744 <__assert_fail@plt+0x1640>
   12718:	cmp	r0, #0
   1271c:	beq	12760 <__assert_fail@plt+0x165c>
   12720:	movw	r0, #29068	; 0x718c
   12724:	movw	r1, #29084	; 0x719c
   12728:	movt	r0, #2
   1272c:	movt	r1, #2
   12730:	ldr	r0, [r0]
   12734:	ldr	r1, [r1]
   12738:	cmp	r0, r1
   1273c:	bne	12750 <__assert_fail@plt+0x164c>
   12740:	b	1276c <__assert_fail@plt+0x1668>
   12744:	movw	r0, #29084	; 0x719c
   12748:	movt	r0, #2
   1274c:	ldr	r0, [r0]
   12750:	movw	r1, #29056	; 0x7180
   12754:	movt	r1, #2
   12758:	str	r0, [r1]
   1275c:	bx	lr
   12760:	movw	r0, #29084	; 0x719c
   12764:	movt	r0, #2
   12768:	ldr	r0, [r0]
   1276c:	movw	r1, #29056	; 0x7180
   12770:	movt	r1, #2
   12774:	ldr	r1, [r1]
   12778:	cmp	r1, r0
   1277c:	bxne	lr
   12780:	mov	r1, #0
   12784:	cmp	r0, #0
   12788:	movweq	r1, #3
   1278c:	mov	r0, r1
   12790:	b	12750 <__assert_fail@plt+0x164c>
   12794:	push	{r4, r5, r6, sl, fp, lr}
   12798:	add	fp, sp, #16
   1279c:	movw	r4, #62096	; 0xf290
   127a0:	movt	r4, #2
   127a4:	ldr	r1, [r4]
   127a8:	add	r5, r1, r0
   127ac:	movw	r0, #29052	; 0x717c
   127b0:	movt	r0, #2
   127b4:	ldrb	r0, [r0]
   127b8:	cmp	r0, #1
   127bc:	bne	12804 <__assert_fail@plt+0x1700>
   127c0:	asr	r0, r5, #31
   127c4:	add	r0, r5, r0, lsr #29
   127c8:	bic	r6, r0, #7
   127cc:	add	r0, r1, #1
   127d0:	cmp	r0, r6
   127d4:	blt	127fc <__assert_fail@plt+0x16f8>
   127d8:	b	12804 <__assert_fail@plt+0x1700>
   127dc:	mov	r0, #9
   127e0:	bl	110f8 <putchar_unlocked@plt>
   127e4:	ldr	r0, [r4]
   127e8:	asr	r1, r0, #31
   127ec:	add	r0, r0, r1, lsr #29
   127f0:	bic	r0, r0, #7
   127f4:	add	r1, r0, #8
   127f8:	str	r1, [r4]
   127fc:	cmp	r1, r6
   12800:	blt	127dc <__assert_fail@plt+0x16d8>
   12804:	cmp	r1, r5
   12808:	popge	{r4, r5, r6, sl, fp, pc}
   1280c:	mov	r0, #32
   12810:	bl	110f8 <putchar_unlocked@plt>
   12814:	ldr	r0, [r4]
   12818:	add	r0, r0, #1
   1281c:	cmp	r0, r5
   12820:	str	r0, [r4]
   12824:	blt	1280c <__assert_fail@plt+0x1708>
   12828:	pop	{r4, r5, r6, sl, fp, pc}
   1282c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12830:	add	fp, sp, #24
   12834:	movw	r9, #29064	; 0x7188
   12838:	movw	r8, #34096	; 0x8530
   1283c:	movt	r9, #2
   12840:	movt	r8, #2
   12844:	ldr	r6, [r9]
   12848:	cmp	r6, r8
   1284c:	beq	128ac <__assert_fail@plt+0x17a8>
   12850:	bl	120f8 <__assert_fail@plt+0xff4>
   12854:	ldr	r4, [r8, #24]
   12858:	cmp	r4, r6
   1285c:	beq	128e4 <__assert_fail@plt+0x17e0>
   12860:	ldr	r3, [r4, #20]
   12864:	mvn	r2, #-2147483648	; 0x80000000
   12868:	mov	r5, r6
   1286c:	mov	r1, r2
   12870:	ldr	r0, [r4, #24]
   12874:	ldr	r7, [r0, #20]
   12878:	sub	r3, r3, r7
   1287c:	cmp	r3, r2
   12880:	movlt	r1, r3
   12884:	cmn	r1, #-2147483639	; 0x80000009
   12888:	addlt	r1, r1, #9
   1288c:	cmp	r3, r2
   12890:	mov	r3, r7
   12894:	movlt	r5, r4
   12898:	cmp	r0, r6
   1289c:	mov	r4, r0
   128a0:	mov	r2, r1
   128a4:	bne	12870 <__assert_fail@plt+0x176c>
   128a8:	b	128e8 <__assert_fail@plt+0x17e4>
   128ac:	movw	r5, #34088	; 0x8528
   128b0:	movw	r4, #29088	; 0x71a0
   128b4:	mov	r1, #1
   128b8:	movt	r5, #2
   128bc:	movt	r4, #2
   128c0:	ldr	r0, [r5]
   128c4:	sub	r2, r0, r4
   128c8:	movw	r0, #29012	; 0x7154
   128cc:	movt	r0, #2
   128d0:	ldr	r3, [r0]
   128d4:	mov	r0, r4
   128d8:	bl	10f0c <fwrite_unlocked@plt>
   128dc:	str	r4, [r5]
   128e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128e4:	mov	r5, r6
   128e8:	mov	r0, r5
   128ec:	bl	12354 <__assert_fail@plt+0x1250>
   128f0:	movw	r4, #34088	; 0x8528
   128f4:	ldr	r1, [r5]
   128f8:	movw	r6, #29088	; 0x71a0
   128fc:	movt	r4, #2
   12900:	movt	r6, #2
   12904:	ldr	r7, [r4]
   12908:	mov	r0, r6
   1290c:	sub	r2, r7, r1
   12910:	bl	10ed0 <memmove@plt>
   12914:	ldr	r0, [r5]
   12918:	sub	r0, r6, r0
   1291c:	ldr	r6, [r9]
   12920:	add	r1, r7, r0
   12924:	str	r1, [r4]
   12928:	cmp	r5, r6
   1292c:	bhi	1294c <__assert_fail@plt+0x1848>
   12930:	mov	r1, r5
   12934:	ldr	r2, [r1]
   12938:	add	r2, r2, r0
   1293c:	str	r2, [r1], #28
   12940:	ldr	r6, [r9]
   12944:	cmp	r1, r6
   12948:	bls	12934 <__assert_fail@plt+0x1830>
   1294c:	rsb	r0, r5, #28
   12950:	mov	r1, r5
   12954:	add	r2, r0, r6
   12958:	mov	r0, r8
   1295c:	bl	10ed0 <memmove@plt>
   12960:	movw	r1, #56173	; 0xdb6d
   12964:	sub	r0, r5, r8
   12968:	movt	r1, #28086	; 0x6db6
   1296c:	smmul	r1, r0, r1
   12970:	sub	r0, r1, r0
   12974:	asr	r1, r0, #4
   12978:	add	r0, r1, r0, lsr #31
   1297c:	rsb	r0, r0, r0, lsl #3
   12980:	add	r0, r6, r0, lsl #2
   12984:	str	r0, [r9]
   12988:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1298c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12990:	add	fp, sp, #24
   12994:	movw	r8, #62096	; 0xf290
   12998:	mov	r4, r0
   1299c:	mov	r0, #0
   129a0:	mov	r5, r1
   129a4:	movt	r8, #2
   129a8:	str	r0, [r8]
   129ac:	movw	r0, #29080	; 0x7198
   129b0:	movt	r0, #2
   129b4:	ldr	r0, [r0]
   129b8:	bl	12794 <__assert_fail@plt+0x1690>
   129bc:	movw	r0, #29012	; 0x7154
   129c0:	movt	r0, #2
   129c4:	ldr	r1, [r0]
   129c8:	movw	r0, #29032	; 0x7168
   129cc:	movt	r0, #2
   129d0:	ldr	r0, [r0]
   129d4:	bl	10e94 <fputs_unlocked@plt>
   129d8:	movw	r0, #29044	; 0x7174
   129dc:	ldr	r1, [r8]
   129e0:	movt	r0, #2
   129e4:	ldr	r0, [r0]
   129e8:	add	r0, r1, r0
   129ec:	str	r0, [r8]
   129f0:	sub	r0, r5, r0
   129f4:	bl	12794 <__assert_fail@plt+0x1690>
   129f8:	ldr	r0, [r4, #24]
   129fc:	sub	r5, r0, #28
   12a00:	b	12a10 <__assert_fail@plt+0x190c>
   12a04:	ldr	r0, [r4, #8]
   12a08:	bl	12794 <__assert_fail@plt+0x1690>
   12a0c:	add	r4, r4, #28
   12a10:	ldr	r7, [r4, #4]
   12a14:	mov	r0, #0
   12a18:	cmp	r7, #0
   12a1c:	beq	12a38 <__assert_fail@plt+0x1934>
   12a20:	ldr	r6, [r4]
   12a24:	ldrb	r0, [r6], #1
   12a28:	bl	110f8 <putchar_unlocked@plt>
   12a2c:	subs	r7, r7, #1
   12a30:	bne	12a24 <__assert_fail@plt+0x1920>
   12a34:	ldr	r0, [r4, #4]
   12a38:	ldr	r1, [r8]
   12a3c:	cmp	r4, r5
   12a40:	add	r0, r1, r0
   12a44:	str	r0, [r8]
   12a48:	bne	12a04 <__assert_fail@plt+0x1900>
   12a4c:	movw	r1, #29076	; 0x7194
   12a50:	movt	r1, #2
   12a54:	str	r0, [r1]
   12a58:	mov	r0, #10
   12a5c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12a60:	b	110f8 <putchar_unlocked@plt>
   12a64:	movw	r1, #62100	; 0xf294
   12a68:	movt	r1, #2
   12a6c:	str	r0, [r1]
   12a70:	bx	lr
   12a74:	movw	r1, #62104	; 0xf298
   12a78:	movt	r1, #2
   12a7c:	strb	r0, [r1]
   12a80:	bx	lr
   12a84:	push	{r4, r5, r6, sl, fp, lr}
   12a88:	add	fp, sp, #16
   12a8c:	sub	sp, sp, #8
   12a90:	movw	r0, #29012	; 0x7154
   12a94:	movt	r0, #2
   12a98:	ldr	r0, [r0]
   12a9c:	bl	15a60 <__assert_fail@plt+0x495c>
   12aa0:	cmp	r0, #0
   12aa4:	beq	12acc <__assert_fail@plt+0x19c8>
   12aa8:	movw	r0, #62104	; 0xf298
   12aac:	movt	r0, #2
   12ab0:	ldrb	r0, [r0]
   12ab4:	cmp	r0, #0
   12ab8:	beq	12aec <__assert_fail@plt+0x19e8>
   12abc:	bl	11014 <__errno_location@plt>
   12ac0:	ldr	r0, [r0]
   12ac4:	cmp	r0, #32
   12ac8:	bne	12aec <__assert_fail@plt+0x19e8>
   12acc:	movw	r0, #29000	; 0x7148
   12ad0:	movt	r0, #2
   12ad4:	ldr	r0, [r0]
   12ad8:	bl	15a60 <__assert_fail@plt+0x495c>
   12adc:	cmp	r0, #0
   12ae0:	subeq	sp, fp, #16
   12ae4:	popeq	{r4, r5, r6, sl, fp, pc}
   12ae8:	b	12b5c <__assert_fail@plt+0x1a58>
   12aec:	movw	r1, #26223	; 0x666f
   12af0:	mov	r0, #0
   12af4:	mov	r2, #5
   12af8:	movt	r1, #1
   12afc:	bl	10f30 <dcgettext@plt>
   12b00:	mov	r4, r0
   12b04:	movw	r0, #62100	; 0xf294
   12b08:	movt	r0, #2
   12b0c:	ldr	r6, [r0]
   12b10:	bl	11014 <__errno_location@plt>
   12b14:	ldr	r5, [r0]
   12b18:	cmp	r6, #0
   12b1c:	bne	12b38 <__assert_fail@plt+0x1a34>
   12b20:	movw	r2, #26239	; 0x667f
   12b24:	mov	r0, #0
   12b28:	mov	r1, r5
   12b2c:	mov	r3, r4
   12b30:	movt	r2, #1
   12b34:	b	12b58 <__assert_fail@plt+0x1a54>
   12b38:	mov	r0, r6
   12b3c:	bl	1450c <__assert_fail@plt+0x3408>
   12b40:	movw	r2, #26235	; 0x667b
   12b44:	mov	r3, r0
   12b48:	str	r4, [sp]
   12b4c:	mov	r0, #0
   12b50:	mov	r1, r5
   12b54:	movt	r2, #1
   12b58:	bl	10f9c <error@plt>
   12b5c:	movw	r0, #28916	; 0x70f4
   12b60:	movt	r0, #2
   12b64:	ldr	r0, [r0]
   12b68:	bl	10ee8 <_exit@plt>
   12b6c:	b	10eb8 <posix_fadvise64@plt>
   12b70:	cmp	r0, #0
   12b74:	bxeq	lr
   12b78:	push	{r4, sl, fp, lr}
   12b7c:	add	fp, sp, #8
   12b80:	sub	sp, sp, #16
   12b84:	mov	r4, r1
   12b88:	bl	11044 <fileno@plt>
   12b8c:	mov	r1, #0
   12b90:	mov	r2, #0
   12b94:	mov	r3, #0
   12b98:	str	r1, [sp]
   12b9c:	stmib	sp, {r1, r4}
   12ba0:	bl	10eb8 <posix_fadvise64@plt>
   12ba4:	sub	sp, fp, #8
   12ba8:	pop	{r4, sl, fp, pc}
   12bac:	push	{r4, r5, r6, sl, fp, lr}
   12bb0:	add	fp, sp, #16
   12bb4:	sub	sp, sp, #8
   12bb8:	mov	r4, r0
   12bbc:	bl	11044 <fileno@plt>
   12bc0:	cmn	r0, #1
   12bc4:	ble	12c38 <__assert_fail@plt+0x1b34>
   12bc8:	mov	r0, r4
   12bcc:	bl	10fc0 <__freading@plt>
   12bd0:	cmp	r0, #0
   12bd4:	beq	12c00 <__assert_fail@plt+0x1afc>
   12bd8:	mov	r0, r4
   12bdc:	bl	11044 <fileno@plt>
   12be0:	mov	r1, #1
   12be4:	mov	r2, #0
   12be8:	mov	r3, #0
   12bec:	str	r1, [sp]
   12bf0:	bl	10f60 <lseek64@plt>
   12bf4:	and	r0, r0, r1
   12bf8:	cmn	r0, #1
   12bfc:	beq	12c38 <__assert_fail@plt+0x1b34>
   12c00:	mov	r0, r4
   12c04:	bl	12c48 <__assert_fail@plt+0x1b44>
   12c08:	cmp	r0, #0
   12c0c:	beq	12c38 <__assert_fail@plt+0x1b34>
   12c10:	bl	11014 <__errno_location@plt>
   12c14:	ldr	r6, [r0]
   12c18:	mov	r5, r0
   12c1c:	mov	r0, r4
   12c20:	bl	11074 <fclose@plt>
   12c24:	cmp	r6, #0
   12c28:	strne	r6, [r5]
   12c2c:	mvnne	r0, #0
   12c30:	sub	sp, fp, #16
   12c34:	pop	{r4, r5, r6, sl, fp, pc}
   12c38:	mov	r0, r4
   12c3c:	sub	sp, fp, #16
   12c40:	pop	{r4, r5, r6, sl, fp, lr}
   12c44:	b	11074 <fclose@plt>
   12c48:	push	{r4, sl, fp, lr}
   12c4c:	add	fp, sp, #8
   12c50:	sub	sp, sp, #8
   12c54:	mov	r4, r0
   12c58:	cmp	r0, #0
   12c5c:	beq	12c78 <__assert_fail@plt+0x1b74>
   12c60:	mov	r0, r4
   12c64:	bl	10fc0 <__freading@plt>
   12c68:	cmp	r0, #0
   12c6c:	ldrbne	r0, [r4, #1]
   12c70:	tstne	r0, #1
   12c74:	bne	12c88 <__assert_fail@plt+0x1b84>
   12c78:	mov	r0, r4
   12c7c:	sub	sp, fp, #8
   12c80:	pop	{r4, sl, fp, lr}
   12c84:	b	10ec4 <fflush@plt>
   12c88:	mov	r0, #1
   12c8c:	mov	r2, #0
   12c90:	mov	r3, #0
   12c94:	str	r0, [sp]
   12c98:	mov	r0, r4
   12c9c:	bl	12ca4 <__assert_fail@plt+0x1ba0>
   12ca0:	b	12c78 <__assert_fail@plt+0x1b74>
   12ca4:	push	{r4, r5, r6, r7, fp, lr}
   12ca8:	add	fp, sp, #16
   12cac:	sub	sp, sp, #8
   12cb0:	mov	r4, r0
   12cb4:	ldr	r0, [r0, #4]
   12cb8:	mov	r5, r3
   12cbc:	mov	r6, r2
   12cc0:	ldr	r1, [r4, #8]
   12cc4:	cmp	r1, r0
   12cc8:	bne	12ce4 <__assert_fail@plt+0x1be0>
   12ccc:	ldrd	r0, [r4, #16]
   12cd0:	cmp	r1, r0
   12cd4:	bne	12ce4 <__assert_fail@plt+0x1be0>
   12cd8:	ldr	r0, [r4, #36]	; 0x24
   12cdc:	cmp	r0, #0
   12ce0:	beq	12cfc <__assert_fail@plt+0x1bf8>
   12ce4:	mov	r0, r4
   12ce8:	mov	r2, r6
   12cec:	mov	r3, r5
   12cf0:	sub	sp, fp, #16
   12cf4:	pop	{r4, r5, r6, r7, fp, lr}
   12cf8:	b	11080 <fseeko64@plt>
   12cfc:	ldr	r7, [fp, #8]
   12d00:	mov	r0, r4
   12d04:	bl	11044 <fileno@plt>
   12d08:	mov	r2, r6
   12d0c:	mov	r3, r5
   12d10:	str	r7, [sp]
   12d14:	bl	10f60 <lseek64@plt>
   12d18:	and	r2, r0, r1
   12d1c:	cmn	r2, #1
   12d20:	beq	12d3c <__assert_fail@plt+0x1c38>
   12d24:	strd	r0, [r4, #80]	; 0x50
   12d28:	ldr	r0, [r4]
   12d2c:	bic	r0, r0, #16
   12d30:	str	r0, [r4]
   12d34:	mov	r0, #0
   12d38:	b	12d40 <__assert_fail@plt+0x1c3c>
   12d3c:	mvn	r0, #0
   12d40:	sub	sp, fp, #16
   12d44:	pop	{r4, r5, r6, r7, fp, pc}
   12d48:	push	{r4, r5, fp, lr}
   12d4c:	add	fp, sp, #8
   12d50:	cmp	r0, #0
   12d54:	beq	12de8 <__assert_fail@plt+0x1ce4>
   12d58:	mov	r1, #47	; 0x2f
   12d5c:	mov	r4, r0
   12d60:	bl	11098 <strrchr@plt>
   12d64:	cmp	r0, #0
   12d68:	mov	r5, r4
   12d6c:	addne	r5, r0, #1
   12d70:	sub	r0, r5, r4
   12d74:	cmp	r0, #7
   12d78:	blt	12dcc <__assert_fail@plt+0x1cc8>
   12d7c:	movw	r1, #26298	; 0x66ba
   12d80:	sub	r0, r5, #7
   12d84:	mov	r2, #7
   12d88:	movt	r1, #1
   12d8c:	bl	110e0 <strncmp@plt>
   12d90:	cmp	r0, #0
   12d94:	bne	12dcc <__assert_fail@plt+0x1cc8>
   12d98:	movw	r1, #26306	; 0x66c2
   12d9c:	mov	r0, r5
   12da0:	mov	r2, #3
   12da4:	movt	r1, #1
   12da8:	bl	110e0 <strncmp@plt>
   12dac:	cmp	r0, #0
   12db0:	beq	12dbc <__assert_fail@plt+0x1cb8>
   12db4:	mov	r4, r5
   12db8:	b	12dcc <__assert_fail@plt+0x1cc8>
   12dbc:	movw	r0, #28984	; 0x7138
   12dc0:	add	r4, r5, #3
   12dc4:	movt	r0, #2
   12dc8:	str	r4, [r0]
   12dcc:	movw	r0, #28988	; 0x713c
   12dd0:	movt	r0, #2
   12dd4:	str	r4, [r0]
   12dd8:	movw	r0, #62108	; 0xf29c
   12ddc:	movt	r0, #2
   12de0:	str	r4, [r0]
   12de4:	pop	{r4, r5, fp, pc}
   12de8:	movw	r0, #29000	; 0x7148
   12dec:	movt	r0, #2
   12df0:	ldr	r1, [r0]
   12df4:	movw	r0, #26242	; 0x6682
   12df8:	movt	r0, #1
   12dfc:	bl	110d4 <fputs@plt>
   12e00:	bl	110ec <abort@plt>
   12e04:	push	{r4, r5, r6, sl, fp, lr}
   12e08:	add	fp, sp, #16
   12e0c:	mov	r4, r0
   12e10:	movw	r0, #62112	; 0xf2a0
   12e14:	movt	r0, #2
   12e18:	cmp	r4, #0
   12e1c:	moveq	r4, r0
   12e20:	bl	11014 <__errno_location@plt>
   12e24:	ldr	r6, [r0]
   12e28:	mov	r5, r0
   12e2c:	mov	r0, r4
   12e30:	mov	r1, #48	; 0x30
   12e34:	bl	15090 <__assert_fail@plt+0x3f8c>
   12e38:	str	r6, [r5]
   12e3c:	pop	{r4, r5, r6, sl, fp, pc}
   12e40:	movw	r1, #62112	; 0xf2a0
   12e44:	cmp	r0, #0
   12e48:	movt	r1, #2
   12e4c:	movne	r1, r0
   12e50:	ldr	r0, [r1]
   12e54:	bx	lr
   12e58:	movw	r2, #62112	; 0xf2a0
   12e5c:	cmp	r0, #0
   12e60:	movt	r2, #2
   12e64:	movne	r2, r0
   12e68:	str	r1, [r2]
   12e6c:	bx	lr
   12e70:	movw	r3, #62112	; 0xf2a0
   12e74:	cmp	r0, #0
   12e78:	movt	r3, #2
   12e7c:	movne	r3, r0
   12e80:	ubfx	r0, r1, #5, #3
   12e84:	and	r1, r1, #31
   12e88:	add	r0, r3, r0, lsl #2
   12e8c:	ldr	r3, [r0, #8]
   12e90:	eor	r2, r2, r3, lsr r1
   12e94:	and	r2, r2, #1
   12e98:	eor	r2, r3, r2, lsl r1
   12e9c:	str	r2, [r0, #8]
   12ea0:	mov	r0, #1
   12ea4:	and	r0, r0, r3, lsr r1
   12ea8:	bx	lr
   12eac:	movw	r2, #62112	; 0xf2a0
   12eb0:	cmp	r0, #0
   12eb4:	movt	r2, #2
   12eb8:	movne	r2, r0
   12ebc:	ldr	r0, [r2, #4]
   12ec0:	str	r1, [r2, #4]
   12ec4:	bx	lr
   12ec8:	movw	r3, #62112	; 0xf2a0
   12ecc:	cmp	r0, #0
   12ed0:	movt	r3, #2
   12ed4:	movne	r3, r0
   12ed8:	cmp	r1, #0
   12edc:	mov	r0, #10
   12ee0:	cmpne	r2, #0
   12ee4:	str	r0, [r3]
   12ee8:	bne	12ef8 <__assert_fail@plt+0x1df4>
   12eec:	push	{fp, lr}
   12ef0:	mov	fp, sp
   12ef4:	bl	110ec <abort@plt>
   12ef8:	str	r1, [r3, #40]	; 0x28
   12efc:	str	r2, [r3, #44]	; 0x2c
   12f00:	bx	lr
   12f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f08:	add	fp, sp, #28
   12f0c:	sub	sp, sp, #20
   12f10:	mov	r7, r0
   12f14:	ldr	r0, [fp, #8]
   12f18:	movw	r5, #62112	; 0xf2a0
   12f1c:	mov	r8, r3
   12f20:	mov	r9, r2
   12f24:	mov	sl, r1
   12f28:	movt	r5, #2
   12f2c:	cmp	r0, #0
   12f30:	movne	r5, r0
   12f34:	bl	11014 <__errno_location@plt>
   12f38:	mov	r4, r0
   12f3c:	ldm	r5, {r0, r1}
   12f40:	ldr	r2, [r5, #40]	; 0x28
   12f44:	ldr	r3, [r5, #44]	; 0x2c
   12f48:	add	r5, r5, #8
   12f4c:	ldr	r6, [r4]
   12f50:	stm	sp, {r0, r1, r5}
   12f54:	str	r2, [sp, #12]
   12f58:	str	r3, [sp, #16]
   12f5c:	mov	r0, r7
   12f60:	mov	r1, sl
   12f64:	mov	r2, r9
   12f68:	mov	r3, r8
   12f6c:	bl	12f7c <__assert_fail@plt+0x1e78>
   12f70:	str	r6, [r4]
   12f74:	sub	sp, fp, #28
   12f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f80:	add	fp, sp, #28
   12f84:	sub	sp, sp, #156	; 0x9c
   12f88:	str	r0, [fp, #-56]	; 0xffffffc8
   12f8c:	ldr	r0, [fp, #12]
   12f90:	mov	r4, r1
   12f94:	str	r3, [sp, #80]	; 0x50
   12f98:	str	r2, [fp, #-84]	; 0xffffffac
   12f9c:	and	r1, r0, #4
   12fa0:	str	r1, [sp, #24]
   12fa4:	and	r1, r0, #1
   12fa8:	str	r1, [sp, #28]
   12fac:	ubfx	r7, r0, #1, #1
   12fb0:	bl	10f6c <__ctype_get_mb_cur_max@plt>
   12fb4:	str	r0, [sp, #32]
   12fb8:	ldr	r0, [fp, #24]
   12fbc:	ldr	r9, [fp, #8]
   12fc0:	mov	r2, #0
   12fc4:	mov	r1, #0
   12fc8:	mov	r5, #0
   12fcc:	str	r2, [sp, #52]	; 0x34
   12fd0:	mov	r2, #1
   12fd4:	str	r0, [sp, #72]	; 0x48
   12fd8:	ldr	r0, [fp, #20]
   12fdc:	str	r0, [sp, #64]	; 0x40
   12fe0:	mov	r0, #0
   12fe4:	str	r0, [sp, #92]	; 0x5c
   12fe8:	mov	r0, #0
   12fec:	str	r0, [fp, #-76]	; 0xffffffb4
   12ff0:	mov	r0, #0
   12ff4:	cmp	r9, #10
   12ff8:	str	r1, [sp, #68]	; 0x44
   12ffc:	bhi	13ffc <__assert_fail@plt+0x2ef8>
   13000:	add	r1, pc, #28
   13004:	ldr	ip, [fp, #-84]	; 0xffffffac
   13008:	ldr	lr, [sp, #80]	; 0x50
   1300c:	mov	r6, r4
   13010:	mov	r8, #0
   13014:	mov	r3, #1
   13018:	mov	sl, #0
   1301c:	mov	r4, r2
   13020:	ldr	pc, [r1, r9, lsl #2]
   13024:	strdeq	r3, [r1], -r4
   13028:	andeq	r3, r1, r0, lsr r1
   1302c:	andeq	r3, r1, r4, lsl #2
   13030:	andeq	r3, r1, ip, ror #1
   13034:	andeq	r3, r1, r4, lsr #2
   13038:	andeq	r3, r1, ip, ror r1
   1303c:	andeq	r3, r1, r4, lsl r1
   13040:	ldrdeq	r3, [r1], -ip
   13044:	andeq	r3, r1, r0, asr r0
   13048:	andeq	r3, r1, r0, asr r0
   1304c:	andeq	r3, r1, r8, ror r0
   13050:	movw	r0, #26386	; 0x6712
   13054:	mov	r1, r9
   13058:	movt	r0, #1
   1305c:	bl	14764 <__assert_fail@plt+0x3660>
   13060:	str	r0, [sp, #64]	; 0x40
   13064:	movw	r0, #26388	; 0x6714
   13068:	mov	r1, r9
   1306c:	movt	r0, #1
   13070:	bl	14764 <__assert_fail@plt+0x3660>
   13074:	str	r0, [sp, #72]	; 0x48
   13078:	mov	r8, #0
   1307c:	mov	sl, r7
   13080:	tst	r7, #1
   13084:	str	r5, [fp, #-48]	; 0xffffffd0
   13088:	bne	130c4 <__assert_fail@plt+0x1fc0>
   1308c:	ldr	r0, [sp, #64]	; 0x40
   13090:	ldrb	r0, [r0]
   13094:	cmp	r0, #0
   13098:	beq	130c4 <__assert_fail@plt+0x1fc0>
   1309c:	ldr	r1, [sp, #64]	; 0x40
   130a0:	mov	r8, #0
   130a4:	add	r1, r1, #1
   130a8:	cmp	r8, r6
   130ac:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   130b0:	strbcc	r0, [r2, r8]
   130b4:	ldrb	r0, [r1, r8]
   130b8:	add	r8, r8, #1
   130bc:	cmp	r0, #0
   130c0:	bne	130a8 <__assert_fail@plt+0x1fa4>
   130c4:	ldr	r7, [sp, #72]	; 0x48
   130c8:	mov	r0, r7
   130cc:	bl	10ffc <strlen@plt>
   130d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   130d4:	ldr	lr, [sp, #80]	; 0x50
   130d8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   130dc:	str	r0, [fp, #-76]	; 0xffffffb4
   130e0:	str	r7, [sp, #92]	; 0x5c
   130e4:	mov	r3, #1
   130e8:	b	131dc <__assert_fail@plt+0x20d8>
   130ec:	mov	r0, #1
   130f0:	b	13130 <__assert_fail@plt+0x202c>
   130f4:	mov	r9, #0
   130f8:	mov	r8, #0
   130fc:	mov	r3, r0
   13100:	b	131d8 <__assert_fail@plt+0x20d4>
   13104:	tst	r7, #1
   13108:	bne	13130 <__assert_fail@plt+0x202c>
   1310c:	mov	r3, r0
   13110:	b	13158 <__assert_fail@plt+0x2054>
   13114:	mov	r0, #1
   13118:	mov	r8, #0
   1311c:	mov	r9, #5
   13120:	b	13190 <__assert_fail@plt+0x208c>
   13124:	mov	r3, #1
   13128:	tst	r7, #1
   1312c:	beq	13158 <__assert_fail@plt+0x2054>
   13130:	mov	r1, #1
   13134:	mov	r8, #0
   13138:	mov	r9, #2
   1313c:	mov	r3, r0
   13140:	mov	sl, #1
   13144:	str	r1, [fp, #-76]	; 0xffffffb4
   13148:	movw	r1, #26388	; 0x6714
   1314c:	movt	r1, #1
   13150:	str	r1, [sp, #92]	; 0x5c
   13154:	b	131dc <__assert_fail@plt+0x20d8>
   13158:	cmp	r6, #0
   1315c:	mov	r8, #1
   13160:	mov	r9, #2
   13164:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13168:	movne	r0, #39	; 0x27
   1316c:	strbne	r0, [r1]
   13170:	movw	r0, #26388	; 0x6714
   13174:	movt	r0, #1
   13178:	b	131cc <__assert_fail@plt+0x20c8>
   1317c:	mov	r9, #5
   13180:	tst	r7, #1
   13184:	beq	131ac <__assert_fail@plt+0x20a8>
   13188:	mov	r0, #1
   1318c:	mov	r8, #0
   13190:	str	r0, [fp, #-76]	; 0xffffffb4
   13194:	movw	r0, #25984	; 0x6580
   13198:	mov	r3, #1
   1319c:	mov	sl, #1
   131a0:	movt	r0, #1
   131a4:	str	r0, [sp, #92]	; 0x5c
   131a8:	b	131dc <__assert_fail@plt+0x20d8>
   131ac:	cmp	r6, #0
   131b0:	mov	r8, #1
   131b4:	mov	r3, #1
   131b8:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   131bc:	movne	r0, #34	; 0x22
   131c0:	strbne	r0, [r1]
   131c4:	movw	r0, #25984	; 0x6580
   131c8:	movt	r0, #1
   131cc:	str	r0, [sp, #92]	; 0x5c
   131d0:	mov	r0, #1
   131d4:	str	r0, [fp, #-76]	; 0xffffffb4
   131d8:	mov	sl, #0
   131dc:	ldr	r0, [fp, #16]
   131e0:	mov	r7, #0
   131e4:	str	r9, [fp, #-64]	; 0xffffffc0
   131e8:	str	sl, [fp, #-72]	; 0xffffffb8
   131ec:	str	r3, [sp, #84]	; 0x54
   131f0:	cmp	r0, #0
   131f4:	movwne	r0, #1
   131f8:	and	r0, r0, sl
   131fc:	str	r0, [fp, #-88]	; 0xffffffa8
   13200:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13204:	cmp	r0, #0
   13208:	movwne	r0, #1
   1320c:	subs	r2, r9, #2
   13210:	and	r1, r0, sl
   13214:	str	r2, [fp, #-80]	; 0xffffffb0
   13218:	and	r1, r3, r1
   1321c:	str	r1, [sp, #44]	; 0x2c
   13220:	clz	r1, r2
   13224:	lsr	r1, r1, #5
   13228:	and	r1, r1, sl
   1322c:	str	r1, [sp, #56]	; 0x38
   13230:	mov	r1, r2
   13234:	eor	r2, sl, #1
   13238:	movwne	r1, #1
   1323c:	str	r2, [sp, #88]	; 0x58
   13240:	orr	r2, r1, r2
   13244:	and	r1, r1, r3
   13248:	and	r0, r0, r1
   1324c:	str	r2, [sp, #60]	; 0x3c
   13250:	str	r1, [fp, #-68]	; 0xffffffbc
   13254:	str	r0, [fp, #-60]	; 0xffffffc4
   13258:	eor	r0, r3, #1
   1325c:	str	r0, [sp, #48]	; 0x30
   13260:	cmn	lr, #1
   13264:	beq	13274 <__assert_fail@plt+0x2170>
   13268:	cmp	r7, lr
   1326c:	bne	13280 <__assert_fail@plt+0x217c>
   13270:	b	13e2c <__assert_fail@plt+0x2d28>
   13274:	ldrb	r0, [ip, r7]
   13278:	cmp	r0, #0
   1327c:	beq	13e34 <__assert_fail@plt+0x2d30>
   13280:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13284:	mov	r9, #0
   13288:	str	r5, [fp, #-48]	; 0xffffffd0
   1328c:	str	r6, [fp, #-52]	; 0xffffffcc
   13290:	cmp	r0, #0
   13294:	beq	132d4 <__assert_fail@plt+0x21d0>
   13298:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1329c:	mov	r5, r4
   132a0:	add	r4, r7, r0
   132a4:	cmp	r0, #2
   132a8:	bcc	132c4 <__assert_fail@plt+0x21c0>
   132ac:	cmn	lr, #1
   132b0:	bne	132c4 <__assert_fail@plt+0x21c0>
   132b4:	mov	r0, ip
   132b8:	bl	10ffc <strlen@plt>
   132bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   132c0:	mov	lr, r0
   132c4:	cmp	r4, lr
   132c8:	bls	132dc <__assert_fail@plt+0x21d8>
   132cc:	mov	r6, #0
   132d0:	b	1331c <__assert_fail@plt+0x2218>
   132d4:	mov	r6, #0
   132d8:	b	13320 <__assert_fail@plt+0x221c>
   132dc:	ldr	r1, [sp, #92]	; 0x5c
   132e0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   132e4:	add	r0, ip, r7
   132e8:	mov	r4, lr
   132ec:	bl	10f18 <memcmp@plt>
   132f0:	ldr	r2, [sp, #88]	; 0x58
   132f4:	cmp	r0, #0
   132f8:	mov	r1, r0
   132fc:	movwne	r1, #1
   13300:	orr	r1, r1, r2
   13304:	tst	r1, #1
   13308:	beq	13ec8 <__assert_fail@plt+0x2dc4>
   1330c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13310:	clz	r0, r0
   13314:	mov	lr, r4
   13318:	lsr	r6, r0, #5
   1331c:	mov	r4, r5
   13320:	ldrb	r5, [ip, r7]
   13324:	cmp	r5, #126	; 0x7e
   13328:	bhi	136f0 <__assert_fail@plt+0x25ec>
   1332c:	add	r3, pc, #16
   13330:	mov	sl, #1
   13334:	mov	r2, #110	; 0x6e
   13338:	mov	r0, #97	; 0x61
   1333c:	mov	r1, #0
   13340:	ldr	pc, [r3, r5, lsl #2]
   13344:	ldrdeq	r3, [r1], -r4
   13348:	strdeq	r3, [r1], -r0
   1334c:	strdeq	r3, [r1], -r0
   13350:	strdeq	r3, [r1], -r0
   13354:	strdeq	r3, [r1], -r0
   13358:	strdeq	r3, [r1], -r0
   1335c:	strdeq	r3, [r1], -r0
   13360:	muleq	r1, r4, r7
   13364:			; <UNDEFINED> instruction: 0x000135b4
   13368:	andeq	r3, r1, ip, lsr #11
   1336c:	andeq	r3, r1, r0, asr #11
   13370:	andeq	r3, r1, r4, asr #12
   13374:	andeq	r3, r1, r4, lsr #11
   13378:			; <UNDEFINED> instruction: 0x000135bc
   1337c:	strdeq	r3, [r1], -r0
   13380:	strdeq	r3, [r1], -r0
   13384:	strdeq	r3, [r1], -r0
   13388:	strdeq	r3, [r1], -r0
   1338c:	strdeq	r3, [r1], -r0
   13390:	strdeq	r3, [r1], -r0
   13394:	strdeq	r3, [r1], -r0
   13398:	strdeq	r3, [r1], -r0
   1339c:	strdeq	r3, [r1], -r0
   133a0:	strdeq	r3, [r1], -r0
   133a4:	strdeq	r3, [r1], -r0
   133a8:	strdeq	r3, [r1], -r0
   133ac:	strdeq	r3, [r1], -r0
   133b0:	strdeq	r3, [r1], -r0
   133b4:	strdeq	r3, [r1], -r0
   133b8:	strdeq	r3, [r1], -r0
   133bc:	strdeq	r3, [r1], -r0
   133c0:	strdeq	r3, [r1], -r0
   133c4:	andeq	r3, r1, r4, asr r7
   133c8:	andeq	r3, r1, r8, asr r7
   133cc:	andeq	r3, r1, r8, asr r7
   133d0:	andeq	r3, r1, r4, asr r5
   133d4:	andeq	r3, r1, r8, asr r7
   133d8:	andeq	r3, r1, r0, asr #10
   133dc:	andeq	r3, r1, r8, asr r7
   133e0:	andeq	r3, r1, ip, asr #12
   133e4:	andeq	r3, r1, r8, asr r7
   133e8:	andeq	r3, r1, r8, asr r7
   133ec:	andeq	r3, r1, r8, asr r7
   133f0:	andeq	r3, r1, r0, asr #10
   133f4:	andeq	r3, r1, r0, asr #10
   133f8:	andeq	r3, r1, r0, asr #10
   133fc:	andeq	r3, r1, r0, asr #10
   13400:	andeq	r3, r1, r0, asr #10
   13404:	andeq	r3, r1, r0, asr #10
   13408:	andeq	r3, r1, r0, asr #10
   1340c:	andeq	r3, r1, r0, asr #10
   13410:	andeq	r3, r1, r0, asr #10
   13414:	andeq	r3, r1, r0, asr #10
   13418:	andeq	r3, r1, r0, asr #10
   1341c:	andeq	r3, r1, r0, asr #10
   13420:	andeq	r3, r1, r0, asr #10
   13424:	andeq	r3, r1, r0, asr #10
   13428:	andeq	r3, r1, r0, asr #10
   1342c:	andeq	r3, r1, r0, asr #10
   13430:	andeq	r3, r1, r8, asr r7
   13434:	andeq	r3, r1, r8, asr r7
   13438:	andeq	r3, r1, r8, asr r7
   1343c:	andeq	r3, r1, r8, asr r7
   13440:	andeq	r3, r1, r8, lsl r6
   13444:	strdeq	r3, [r1], -r0
   13448:	andeq	r3, r1, r0, asr #10
   1344c:	andeq	r3, r1, r0, asr #10
   13450:	andeq	r3, r1, r0, asr #10
   13454:	andeq	r3, r1, r0, asr #10
   13458:	andeq	r3, r1, r0, asr #10
   1345c:	andeq	r3, r1, r0, asr #10
   13460:	andeq	r3, r1, r0, asr #10
   13464:	andeq	r3, r1, r0, asr #10
   13468:	andeq	r3, r1, r0, asr #10
   1346c:	andeq	r3, r1, r0, asr #10
   13470:	andeq	r3, r1, r0, asr #10
   13474:	andeq	r3, r1, r0, asr #10
   13478:	andeq	r3, r1, r0, asr #10
   1347c:	andeq	r3, r1, r0, asr #10
   13480:	andeq	r3, r1, r0, asr #10
   13484:	andeq	r3, r1, r0, asr #10
   13488:	andeq	r3, r1, r0, asr #10
   1348c:	andeq	r3, r1, r0, asr #10
   13490:	andeq	r3, r1, r0, asr #10
   13494:	andeq	r3, r1, r0, asr #10
   13498:	andeq	r3, r1, r0, asr #10
   1349c:	andeq	r3, r1, r0, asr #10
   134a0:	andeq	r3, r1, r0, asr #10
   134a4:	andeq	r3, r1, r0, asr #10
   134a8:	andeq	r3, r1, r0, asr #10
   134ac:	andeq	r3, r1, r0, asr #10
   134b0:	andeq	r3, r1, r8, asr r7
   134b4:	andeq	r3, r1, r0, lsl #11
   134b8:	andeq	r3, r1, r0, asr #10
   134bc:	andeq	r3, r1, r8, asr r7
   134c0:	andeq	r3, r1, r0, asr #10
   134c4:	andeq	r3, r1, r8, asr r7
   134c8:	andeq	r3, r1, r0, asr #10
   134cc:	andeq	r3, r1, r0, asr #10
   134d0:	andeq	r3, r1, r0, asr #10
   134d4:	andeq	r3, r1, r0, asr #10
   134d8:	andeq	r3, r1, r0, asr #10
   134dc:	andeq	r3, r1, r0, asr #10
   134e0:	andeq	r3, r1, r0, asr #10
   134e4:	andeq	r3, r1, r0, asr #10
   134e8:	andeq	r3, r1, r0, asr #10
   134ec:	andeq	r3, r1, r0, asr #10
   134f0:	andeq	r3, r1, r0, asr #10
   134f4:	andeq	r3, r1, r0, asr #10
   134f8:	andeq	r3, r1, r0, asr #10
   134fc:	andeq	r3, r1, r0, asr #10
   13500:	andeq	r3, r1, r0, asr #10
   13504:	andeq	r3, r1, r0, asr #10
   13508:	andeq	r3, r1, r0, asr #10
   1350c:	andeq	r3, r1, r0, asr #10
   13510:	andeq	r3, r1, r0, asr #10
   13514:	andeq	r3, r1, r0, asr #10
   13518:	andeq	r3, r1, r0, asr #10
   1351c:	andeq	r3, r1, r0, asr #10
   13520:	andeq	r3, r1, r0, asr #10
   13524:	andeq	r3, r1, r0, asr #10
   13528:	andeq	r3, r1, r0, asr #10
   1352c:	andeq	r3, r1, r0, asr #10
   13530:	andeq	r3, r1, r4, ror #10
   13534:	andeq	r3, r1, r8, asr r7
   13538:	andeq	r3, r1, r4, ror #10
   1353c:	andeq	r3, r1, r4, asr r5
   13540:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13544:	cmp	r0, #0
   13548:	beq	137a8 <__assert_fail@plt+0x26a4>
   1354c:	ldr	r0, [fp, #16]
   13550:	b	137ac <__assert_fail@plt+0x26a8>
   13554:	mov	sl, #0
   13558:	cmp	r7, #0
   1355c:	bne	139c4 <__assert_fail@plt+0x28c0>
   13560:	b	13754 <__assert_fail@plt+0x2650>
   13564:	mov	sl, #0
   13568:	cmn	lr, #1
   1356c:	beq	13740 <__assert_fail@plt+0x263c>
   13570:	cmp	r7, #0
   13574:	cmpeq	lr, #1
   13578:	bne	139c4 <__assert_fail@plt+0x28c0>
   1357c:	b	13754 <__assert_fail@plt+0x2650>
   13580:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13584:	cmp	r0, #2
   13588:	bne	13778 <__assert_fail@plt+0x2674>
   1358c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13590:	tst	r0, #1
   13594:	bne	13ee4 <__assert_fail@plt+0x2de0>
   13598:	mov	r9, #0
   1359c:	mov	r0, #92	; 0x5c
   135a0:	b	1378c <__assert_fail@plt+0x2688>
   135a4:	mov	r0, #102	; 0x66
   135a8:	b	13794 <__assert_fail@plt+0x2690>
   135ac:	mov	r2, #116	; 0x74
   135b0:	b	135c0 <__assert_fail@plt+0x24bc>
   135b4:	mov	r0, #98	; 0x62
   135b8:	b	13794 <__assert_fail@plt+0x2690>
   135bc:	mov	r2, #114	; 0x72
   135c0:	ldr	r0, [sp, #60]	; 0x3c
   135c4:	tst	r0, #1
   135c8:	mov	r0, r2
   135cc:	bne	13794 <__assert_fail@plt+0x2690>
   135d0:	b	13ee4 <__assert_fail@plt+0x2de0>
   135d4:	ldr	r0, [sp, #84]	; 0x54
   135d8:	tst	r0, #1
   135dc:	beq	13880 <__assert_fail@plt+0x277c>
   135e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   135e4:	tst	r0, #1
   135e8:	bne	13fec <__assert_fail@plt+0x2ee8>
   135ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   135f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   135f4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   135f8:	cmp	r0, #2
   135fc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13600:	movwne	r0, #1
   13604:	orr	r0, r0, r3
   13608:	tst	r0, #1
   1360c:	beq	13d00 <__assert_fail@plt+0x2bfc>
   13610:	mov	r0, r8
   13614:	b	13d40 <__assert_fail@plt+0x2c3c>
   13618:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1361c:	mov	r9, #0
   13620:	mov	r5, #63	; 0x3f
   13624:	cmp	r0, #5
   13628:	beq	139cc <__assert_fail@plt+0x28c8>
   1362c:	cmp	r0, #2
   13630:	bne	13a8c <__assert_fail@plt+0x2988>
   13634:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13638:	tst	r0, #1
   1363c:	beq	13a90 <__assert_fail@plt+0x298c>
   13640:	b	13ee4 <__assert_fail@plt+0x2de0>
   13644:	mov	r0, #118	; 0x76
   13648:	b	13794 <__assert_fail@plt+0x2690>
   1364c:	mov	r0, #1
   13650:	mov	r5, #39	; 0x27
   13654:	str	r0, [sp, #52]	; 0x34
   13658:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1365c:	cmp	r0, #2
   13660:	bne	136e8 <__assert_fail@plt+0x25e4>
   13664:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13668:	tst	r0, #1
   1366c:	bne	13ee4 <__assert_fail@plt+0x2de0>
   13670:	ldr	r3, [sp, #68]	; 0x44
   13674:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13678:	mov	r9, #0
   1367c:	clz	r1, r2
   13680:	cmp	r3, #0
   13684:	mov	r0, r3
   13688:	movwne	r0, #1
   1368c:	lsr	r1, r1, #5
   13690:	orrs	r0, r0, r1
   13694:	moveq	r3, r2
   13698:	moveq	r2, r0
   1369c:	cmp	r8, r2
   136a0:	str	r3, [sp, #68]	; 0x44
   136a4:	str	r2, [fp, #-52]	; 0xffffffcc
   136a8:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   136ac:	movcc	r0, #39	; 0x27
   136b0:	strbcc	r0, [r1, r8]
   136b4:	add	r0, r8, #1
   136b8:	cmp	r0, r2
   136bc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   136c0:	movcc	r1, #92	; 0x5c
   136c4:	strbcc	r1, [r3, r0]
   136c8:	add	r0, r8, #2
   136cc:	add	r8, r8, #3
   136d0:	cmp	r0, r2
   136d4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   136d8:	movcc	r1, #39	; 0x27
   136dc:	strbcc	r1, [r2, r0]
   136e0:	mov	r0, #0
   136e4:	str	r0, [fp, #-48]	; 0xffffffd0
   136e8:	mov	sl, #1
   136ec:	b	13540 <__assert_fail@plt+0x243c>
   136f0:	ldr	r0, [sp, #32]
   136f4:	cmp	r0, #1
   136f8:	bne	138a4 <__assert_fail@plt+0x27a0>
   136fc:	str	lr, [sp, #80]	; 0x50
   13700:	bl	10fe4 <__ctype_b_loc@plt>
   13704:	ldr	r0, [r0]
   13708:	ldr	ip, [fp, #-84]	; 0xffffffac
   1370c:	mov	r1, #1
   13710:	add	r0, r0, r5, lsl #1
   13714:	ldrb	r0, [r0, #1]
   13718:	ubfx	sl, r0, #6, #1
   1371c:	ldr	r0, [sp, #48]	; 0x30
   13720:	mov	r2, r1
   13724:	cmp	r1, #1
   13728:	orr	r0, sl, r0
   1372c:	bhi	13a98 <__assert_fail@plt+0x2994>
   13730:	tst	r0, #1
   13734:	beq	13a98 <__assert_fail@plt+0x2994>
   13738:	ldr	lr, [sp, #80]	; 0x50
   1373c:	b	13540 <__assert_fail@plt+0x243c>
   13740:	cmp	r7, #0
   13744:	bne	139c0 <__assert_fail@plt+0x28bc>
   13748:	ldrb	r0, [ip, #1]
   1374c:	cmp	r0, #0
   13750:	bne	139c0 <__assert_fail@plt+0x28bc>
   13754:	mov	r1, #1
   13758:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1375c:	cmp	r0, #2
   13760:	bne	13770 <__assert_fail@plt+0x266c>
   13764:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13768:	tst	r0, #1
   1376c:	bne	13ee4 <__assert_fail@plt+0x2de0>
   13770:	mov	sl, r1
   13774:	b	13540 <__assert_fail@plt+0x243c>
   13778:	ldr	r1, [sp, #44]	; 0x2c
   1377c:	mov	r9, #0
   13780:	mov	r0, #92	; 0x5c
   13784:	cmp	r1, #0
   13788:	beq	13794 <__assert_fail@plt+0x2690>
   1378c:	mov	sl, #0
   13790:	b	13cac <__assert_fail@plt+0x2ba8>
   13794:	ldr	r1, [sp, #84]	; 0x54
   13798:	mov	sl, #0
   1379c:	mov	r9, #0
   137a0:	tst	r1, #1
   137a4:	bne	137e0 <__assert_fail@plt+0x26dc>
   137a8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   137ac:	cmp	r0, #0
   137b0:	mov	r0, r5
   137b4:	beq	137d8 <__assert_fail@plt+0x26d4>
   137b8:	ldr	r1, [fp, #16]
   137bc:	ubfx	r0, r5, #5, #3
   137c0:	mov	r2, #1
   137c4:	ldr	r0, [r1, r0, lsl #2]
   137c8:	and	r1, r5, #31
   137cc:	tst	r0, r2, lsl r1
   137d0:	mov	r0, r5
   137d4:	bne	137e0 <__assert_fail@plt+0x26dc>
   137d8:	cmp	r6, #0
   137dc:	beq	13cac <__assert_fail@plt+0x2ba8>
   137e0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   137e4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   137e8:	tst	r1, #1
   137ec:	bne	13ec0 <__assert_fail@plt+0x2dbc>
   137f0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   137f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   137f8:	cmp	r1, #2
   137fc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13800:	movwne	r1, #1
   13804:	orr	r1, r1, r5
   13808:	tst	r1, #1
   1380c:	bne	13850 <__assert_fail@plt+0x274c>
   13810:	cmp	r8, r6
   13814:	mov	r5, #1
   13818:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1381c:	movcc	r1, #39	; 0x27
   13820:	strbcc	r1, [r2, r8]
   13824:	add	r1, r8, #1
   13828:	cmp	r1, r6
   1382c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13830:	movcc	r2, #36	; 0x24
   13834:	strbcc	r2, [r3, r1]
   13838:	add	r1, r8, #2
   1383c:	add	r8, r8, #3
   13840:	cmp	r1, r6
   13844:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13848:	movcc	r2, #39	; 0x27
   1384c:	strbcc	r2, [r3, r1]
   13850:	cmp	r8, r6
   13854:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13858:	movcc	r1, #92	; 0x5c
   1385c:	strbcc	r1, [r2, r8]
   13860:	add	r8, r8, #1
   13864:	cmp	r8, r6
   13868:	and	r4, r4, sl
   1386c:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   13870:	strbcc	r0, [r1, r8]
   13874:	add	r8, r8, #1
   13878:	add	r7, r7, #1
   1387c:	b	13260 <__assert_fail@plt+0x215c>
   13880:	ldr	r0, [sp, #28]
   13884:	mov	sl, #0
   13888:	mov	r9, #0
   1388c:	mov	r5, #0
   13890:	cmp	r0, #0
   13894:	beq	137a8 <__assert_fail@plt+0x26a4>
   13898:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1389c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   138a0:	b	13878 <__assert_fail@plt+0x2774>
   138a4:	mov	r0, #0
   138a8:	cmn	lr, #1
   138ac:	str	r6, [sp, #76]	; 0x4c
   138b0:	str	r4, [sp, #20]
   138b4:	str	r0, [fp, #-36]	; 0xffffffdc
   138b8:	str	r0, [fp, #-40]	; 0xffffffd8
   138bc:	bne	138d0 <__assert_fail@plt+0x27cc>
   138c0:	mov	r0, ip
   138c4:	bl	10ffc <strlen@plt>
   138c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   138cc:	mov	lr, r0
   138d0:	add	r0, ip, r7
   138d4:	mov	sl, #1
   138d8:	mov	r6, #0
   138dc:	sub	r4, fp, #40	; 0x28
   138e0:	str	lr, [sp, #80]	; 0x50
   138e4:	str	r0, [sp, #36]	; 0x24
   138e8:	str	r6, [sp, #40]	; 0x28
   138ec:	add	r6, r6, r7
   138f0:	sub	r0, fp, #44	; 0x2c
   138f4:	mov	r3, r4
   138f8:	add	r1, ip, r6
   138fc:	sub	r2, lr, r6
   13900:	bl	15b40 <__assert_fail@plt+0x4a3c>
   13904:	cmp	r0, #0
   13908:	beq	13e14 <__assert_fail@plt+0x2d10>
   1390c:	cmn	r0, #1
   13910:	beq	13dd4 <__assert_fail@plt+0x2cd0>
   13914:	ldr	lr, [sp, #80]	; 0x50
   13918:	cmn	r0, #2
   1391c:	beq	13ddc <__assert_fail@plt+0x2cd8>
   13920:	ldr	r2, [sp, #56]	; 0x38
   13924:	cmp	r0, #2
   13928:	mov	r1, #0
   1392c:	movwcc	r1, #1
   13930:	eor	r2, r2, #1
   13934:	orrs	r1, r2, r1
   13938:	bne	13984 <__assert_fail@plt+0x2880>
   1393c:	ldr	r1, [sp, #40]	; 0x28
   13940:	ldr	r2, [sp, #36]	; 0x24
   13944:	add	ip, r2, r1
   13948:	mov	r2, #1
   1394c:	ldrb	r3, [ip, r2]
   13950:	sub	r6, r3, #94	; 0x5e
   13954:	cmp	r6, #30
   13958:	bhi	1396c <__assert_fail@plt+0x2868>
   1395c:	mov	r4, #1
   13960:	mov	r1, #1073741829	; 0x40000005
   13964:	tst	r1, r4, lsl r6
   13968:	bne	13ee0 <__assert_fail@plt+0x2ddc>
   1396c:	sub	r3, r3, #91	; 0x5b
   13970:	cmp	r3, #2
   13974:	bcc	13ee0 <__assert_fail@plt+0x2ddc>
   13978:	add	r2, r2, #1
   1397c:	cmp	r2, r0
   13980:	bcc	1394c <__assert_fail@plt+0x2848>
   13984:	ldr	r6, [sp, #40]	; 0x28
   13988:	add	r6, r0, r6
   1398c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13990:	bl	10f54 <iswprint@plt>
   13994:	cmp	r0, #0
   13998:	sub	r4, fp, #40	; 0x28
   1399c:	movwne	r0, #1
   139a0:	and	sl, sl, r0
   139a4:	mov	r0, r4
   139a8:	bl	10f00 <mbsinit@plt>
   139ac:	ldr	lr, [sp, #80]	; 0x50
   139b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   139b4:	cmp	r0, #0
   139b8:	beq	138e8 <__assert_fail@plt+0x27e4>
   139bc:	b	13e1c <__assert_fail@plt+0x2d18>
   139c0:	mvn	lr, #0
   139c4:	mov	r9, #0
   139c8:	b	13540 <__assert_fail@plt+0x243c>
   139cc:	ldr	r0, [sp, #24]
   139d0:	cmp	r0, #0
   139d4:	beq	13a8c <__assert_fail@plt+0x2988>
   139d8:	add	r0, r7, #2
   139dc:	cmp	r0, lr
   139e0:	bcs	13a8c <__assert_fail@plt+0x2988>
   139e4:	add	r1, ip, r7
   139e8:	ldrb	r1, [r1, #1]
   139ec:	cmp	r1, #63	; 0x3f
   139f0:	bne	13a8c <__assert_fail@plt+0x2988>
   139f4:	ldrb	r5, [ip, r0]
   139f8:	sub	r1, r5, #33	; 0x21
   139fc:	cmp	r1, #29
   13a00:	bhi	13a8c <__assert_fail@plt+0x2988>
   13a04:	movw	r3, #20929	; 0x51c1
   13a08:	mov	r2, #1
   13a0c:	movt	r3, #14336	; 0x3800
   13a10:	tst	r3, r2, lsl r1
   13a14:	beq	13a8c <__assert_fail@plt+0x2988>
   13a18:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13a1c:	tst	r1, #1
   13a20:	bne	13ff4 <__assert_fail@plt+0x2ef0>
   13a24:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13a28:	mov	r7, r0
   13a2c:	cmp	r8, r1
   13a30:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13a34:	movcc	r1, #63	; 0x3f
   13a38:	strbcc	r1, [r2, r8]
   13a3c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13a40:	add	r1, r8, #1
   13a44:	cmp	r1, r2
   13a48:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13a4c:	movcc	r2, #34	; 0x22
   13a50:	strbcc	r2, [r3, r1]
   13a54:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13a58:	add	r1, r8, #2
   13a5c:	cmp	r1, r2
   13a60:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13a64:	movcc	r2, #34	; 0x22
   13a68:	strbcc	r2, [r3, r1]
   13a6c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13a70:	add	r1, r8, #3
   13a74:	add	r8, r8, #4
   13a78:	cmp	r1, r2
   13a7c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13a80:	movcc	r2, #63	; 0x3f
   13a84:	strbcc	r2, [r3, r1]
   13a88:	b	13a90 <__assert_fail@plt+0x298c>
   13a8c:	mov	r5, #63	; 0x3f
   13a90:	mov	sl, #0
   13a94:	b	13540 <__assert_fail@plt+0x243c>
   13a98:	str	r0, [sp, #40]	; 0x28
   13a9c:	add	r0, r2, r7
   13aa0:	str	r6, [sp, #76]	; 0x4c
   13aa4:	add	r1, r7, #1
   13aa8:	ldr	lr, [sp, #80]	; 0x50
   13aac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13ab0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13ab4:	mov	r3, #0
   13ab8:	str	r0, [sp, #36]	; 0x24
   13abc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ac0:	b	13b54 <__assert_fail@plt+0x2a50>
   13ac4:	str	r0, [sp, #76]	; 0x4c
   13ac8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13acc:	cmp	r9, #0
   13ad0:	movwne	r9, #1
   13ad4:	mvn	r7, r0
   13ad8:	orr	r7, r7, r9
   13adc:	tst	r7, #1
   13ae0:	bne	13b30 <__assert_fail@plt+0x2a2c>
   13ae4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13ae8:	cmp	r8, r6
   13aec:	bcs	13b04 <__assert_fail@plt+0x2a00>
   13af0:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13af4:	mov	r2, r4
   13af8:	mov	r4, #39	; 0x27
   13afc:	strb	r4, [r7, r8]
   13b00:	mov	r4, r2
   13b04:	add	r7, r8, #1
   13b08:	cmp	r7, r6
   13b0c:	bcs	13b24 <__assert_fail@plt+0x2a20>
   13b10:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13b14:	mov	r2, r4
   13b18:	mov	r4, #39	; 0x27
   13b1c:	strb	r4, [r0, r7]
   13b20:	mov	r4, r2
   13b24:	add	r8, r8, #2
   13b28:	mov	r0, #0
   13b2c:	b	13b38 <__assert_fail@plt+0x2a34>
   13b30:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13b34:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b38:	cmp	r8, r6
   13b3c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13b40:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13b44:	strbcc	r5, [r2, r8]
   13b48:	add	r8, r8, #1
   13b4c:	ldrb	r5, [ip, r1]
   13b50:	add	r1, r1, #1
   13b54:	ldr	r2, [sp, #40]	; 0x28
   13b58:	tst	r2, #1
   13b5c:	beq	13b98 <__assert_fail@plt+0x2a94>
   13b60:	ldr	r2, [sp, #76]	; 0x4c
   13b64:	str	r0, [fp, #-48]	; 0xffffffd0
   13b68:	tst	r2, #1
   13b6c:	beq	13b90 <__assert_fail@plt+0x2a8c>
   13b70:	cmp	r8, r6
   13b74:	bcs	13b8c <__assert_fail@plt+0x2a88>
   13b78:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13b7c:	mov	r2, r4
   13b80:	mov	r4, #92	; 0x5c
   13b84:	strb	r4, [r6, r8]
   13b88:	mov	r4, r2
   13b8c:	add	r8, r8, #1
   13b90:	mov	r0, #0
   13b94:	b	13c8c <__assert_fail@plt+0x2b88>
   13b98:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13b9c:	tst	r2, #1
   13ba0:	bne	13eec <__assert_fail@plt+0x2de8>
   13ba4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13ba8:	cmp	r7, #2
   13bac:	movwne	r3, #1
   13bb0:	orr	r3, r3, r0
   13bb4:	tst	r3, #1
   13bb8:	bne	13c14 <__assert_fail@plt+0x2b10>
   13bbc:	cmp	r8, r6
   13bc0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13bc4:	movcc	r3, #39	; 0x27
   13bc8:	strbcc	r3, [r2, r8]
   13bcc:	add	r3, r8, #1
   13bd0:	cmp	r3, r6
   13bd4:	bcs	13bec <__assert_fail@plt+0x2ae8>
   13bd8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13bdc:	mov	r7, r4
   13be0:	mov	r4, #36	; 0x24
   13be4:	strb	r4, [r2, r3]
   13be8:	mov	r4, r7
   13bec:	add	r3, r8, #2
   13bf0:	cmp	r3, r6
   13bf4:	bcs	13c0c <__assert_fail@plt+0x2b08>
   13bf8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13bfc:	mov	r7, r4
   13c00:	mov	r4, #39	; 0x27
   13c04:	strb	r4, [r2, r3]
   13c08:	mov	r4, r7
   13c0c:	add	r8, r8, #3
   13c10:	mov	r0, #1
   13c14:	cmp	r8, r6
   13c18:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13c1c:	movcc	r3, #92	; 0x5c
   13c20:	strbcc	r3, [r2, r8]
   13c24:	add	r3, r8, #1
   13c28:	cmp	r3, r6
   13c2c:	bcs	13c4c <__assert_fail@plt+0x2b48>
   13c30:	mov	r2, r4
   13c34:	and	r7, r5, #192	; 0xc0
   13c38:	mov	r4, #48	; 0x30
   13c3c:	orr	r7, r4, r7, lsr #6
   13c40:	mov	r4, r2
   13c44:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c48:	strb	r7, [r2, r3]
   13c4c:	add	r3, r8, #2
   13c50:	cmp	r3, r6
   13c54:	bcs	13c74 <__assert_fail@plt+0x2b70>
   13c58:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c5c:	mov	r6, r4
   13c60:	lsr	r7, r5, #3
   13c64:	mov	r4, #6
   13c68:	bfi	r7, r4, #3, #29
   13c6c:	mov	r4, r6
   13c70:	strb	r7, [r2, r3]
   13c74:	str	r0, [fp, #-48]	; 0xffffffd0
   13c78:	ldr	r0, [sp, #76]	; 0x4c
   13c7c:	mov	r3, #6
   13c80:	add	r8, r8, #3
   13c84:	bfi	r5, r3, #3, #29
   13c88:	mov	r3, #1
   13c8c:	ldr	r2, [sp, #36]	; 0x24
   13c90:	and	r9, r3, #1
   13c94:	cmp	r2, r1
   13c98:	bhi	13ac4 <__assert_fail@plt+0x29c0>
   13c9c:	cmp	r9, #0
   13ca0:	sub	r7, r1, #1
   13ca4:	mov	r0, r5
   13ca8:	movwne	r9, #1
   13cac:	cmp	r9, #0
   13cb0:	bne	13cf4 <__assert_fail@plt+0x2bf0>
   13cb4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13cb8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13cbc:	tst	r5, #1
   13cc0:	beq	13864 <__assert_fail@plt+0x2760>
   13cc4:	cmp	r8, r6
   13cc8:	mov	r5, #0
   13ccc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13cd0:	movcc	r1, #39	; 0x27
   13cd4:	strbcc	r1, [r2, r8]
   13cd8:	add	r1, r8, #1
   13cdc:	add	r8, r8, #2
   13ce0:	cmp	r1, r6
   13ce4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13ce8:	movcc	r2, #39	; 0x27
   13cec:	strbcc	r2, [r3, r1]
   13cf0:	b	13864 <__assert_fail@plt+0x2760>
   13cf4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13cf8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13cfc:	b	13864 <__assert_fail@plt+0x2760>
   13d00:	cmp	r8, r1
   13d04:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13d08:	movcc	r0, #39	; 0x27
   13d0c:	strbcc	r0, [r2, r8]
   13d10:	add	r0, r8, #1
   13d14:	cmp	r0, r1
   13d18:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13d1c:	movcc	r2, #36	; 0x24
   13d20:	strbcc	r2, [r3, r0]
   13d24:	add	r0, r8, #2
   13d28:	cmp	r0, r1
   13d2c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13d30:	movcc	r2, #39	; 0x27
   13d34:	strbcc	r2, [r3, r0]
   13d38:	add	r0, r8, #3
   13d3c:	mov	r3, #1
   13d40:	cmp	r0, r1
   13d44:	add	r8, r0, #1
   13d48:	str	r3, [fp, #-48]	; 0xffffffd0
   13d4c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13d50:	movcc	r1, #92	; 0x5c
   13d54:	strbcc	r1, [r2, r0]
   13d58:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13d5c:	cmp	r1, #2
   13d60:	beq	13dc4 <__assert_fail@plt+0x2cc0>
   13d64:	add	r1, r7, #1
   13d68:	mov	sl, #0
   13d6c:	mov	r9, #1
   13d70:	mov	r5, #48	; 0x30
   13d74:	cmp	r1, lr
   13d78:	bcs	13540 <__assert_fail@plt+0x243c>
   13d7c:	ldrb	r1, [ip, r1]
   13d80:	sub	r1, r1, #48	; 0x30
   13d84:	uxtb	r1, r1
   13d88:	cmp	r1, #9
   13d8c:	bhi	13540 <__assert_fail@plt+0x243c>
   13d90:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13d94:	cmp	r8, r1
   13d98:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13d9c:	movcc	r1, #48	; 0x30
   13da0:	strbcc	r1, [r2, r8]
   13da4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13da8:	add	r1, r0, #2
   13dac:	add	r8, r0, #3
   13db0:	cmp	r1, r2
   13db4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13db8:	movcc	r2, #48	; 0x30
   13dbc:	strbcc	r2, [r3, r1]
   13dc0:	b	13540 <__assert_fail@plt+0x243c>
   13dc4:	mov	r0, #48	; 0x30
   13dc8:	mov	r9, #1
   13dcc:	mov	sl, #0
   13dd0:	b	137d8 <__assert_fail@plt+0x26d4>
   13dd4:	mov	sl, #0
   13dd8:	b	13e14 <__assert_fail@plt+0x2d10>
   13ddc:	mov	sl, #0
   13de0:	cmp	lr, r6
   13de4:	bls	13e14 <__assert_fail@plt+0x2d10>
   13de8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13dec:	ldr	r6, [sp, #40]	; 0x28
   13df0:	ldr	r0, [sp, #36]	; 0x24
   13df4:	ldrb	r0, [r0, r6]
   13df8:	cmp	r0, #0
   13dfc:	beq	13e1c <__assert_fail@plt+0x2d18>
   13e00:	add	r6, r6, #1
   13e04:	add	r0, r7, r6
   13e08:	cmp	r0, lr
   13e0c:	bcc	13df0 <__assert_fail@plt+0x2cec>
   13e10:	b	13e1c <__assert_fail@plt+0x2d18>
   13e14:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e18:	ldr	r6, [sp, #40]	; 0x28
   13e1c:	mov	r1, r6
   13e20:	ldr	r4, [sp, #20]
   13e24:	ldr	r6, [sp, #76]	; 0x4c
   13e28:	b	1371c <__assert_fail@plt+0x2618>
   13e2c:	mov	lr, r7
   13e30:	b	13e38 <__assert_fail@plt+0x2d34>
   13e34:	mvn	lr, #0
   13e38:	ldr	r9, [fp, #-64]	; 0xffffffc0
   13e3c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13e40:	eor	r0, r9, #2
   13e44:	orr	r0, r0, r8
   13e48:	clz	r0, r0
   13e4c:	lsr	r0, r0, #5
   13e50:	tst	r1, r0
   13e54:	bne	13f50 <__assert_fail@plt+0x2e4c>
   13e58:	mov	r0, r1
   13e5c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13e60:	cmp	r9, #2
   13e64:	movwne	r1, #1
   13e68:	orr	r0, r0, r1
   13e6c:	tst	r0, #1
   13e70:	bne	13f90 <__assert_fail@plt+0x2e8c>
   13e74:	ldr	r0, [sp, #52]	; 0x34
   13e78:	ldr	r1, [sp, #68]	; 0x44
   13e7c:	str	lr, [sp, #80]	; 0x50
   13e80:	eor	r0, r0, #1
   13e84:	tst	r0, #1
   13e88:	bne	13f90 <__assert_fail@plt+0x2e8c>
   13e8c:	tst	r4, #1
   13e90:	bne	13f58 <__assert_fail@plt+0x2e54>
   13e94:	mov	r7, #0
   13e98:	cmp	r1, #0
   13e9c:	beq	13f88 <__assert_fail@plt+0x2e84>
   13ea0:	ldr	r0, [sp, #84]	; 0x54
   13ea4:	mov	r3, #0
   13ea8:	cmp	r6, #0
   13eac:	mov	r2, #0
   13eb0:	mov	r4, r1
   13eb4:	str	r3, [fp, #-72]	; 0xffffffb8
   13eb8:	beq	12ff4 <__assert_fail@plt+0x1ef0>
   13ebc:	b	13f90 <__assert_fail@plt+0x2e8c>
   13ec0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13ec4:	b	13eec <__assert_fail@plt+0x2de8>
   13ec8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ecc:	mov	r2, #1
   13ed0:	mov	lr, r4
   13ed4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13ed8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13edc:	b	13ef0 <__assert_fail@plt+0x2dec>
   13ee0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ee4:	mov	r7, #2
   13ee8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13eec:	ldr	r2, [sp, #84]	; 0x54
   13ef0:	mov	r0, #0
   13ef4:	ldr	r1, [fp, #12]
   13ef8:	tst	r2, #1
   13efc:	mov	r2, r7
   13f00:	mov	r3, lr
   13f04:	str	r0, [sp, #8]
   13f08:	ldr	r0, [sp, #64]	; 0x40
   13f0c:	movwne	r2, #4
   13f10:	cmp	r7, #2
   13f14:	movne	r2, r7
   13f18:	str	r2, [sp]
   13f1c:	mov	r2, ip
   13f20:	bic	r1, r1, #2
   13f24:	str	r0, [sp, #12]
   13f28:	ldr	r0, [sp, #72]	; 0x48
   13f2c:	str	r1, [sp, #4]
   13f30:	mov	r1, r6
   13f34:	str	r0, [sp, #16]
   13f38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13f3c:	bl	12f7c <__assert_fail@plt+0x1e78>
   13f40:	mov	r8, r0
   13f44:	mov	r0, r8
   13f48:	sub	sp, fp, #28
   13f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f50:	mov	r7, #2
   13f54:	b	13eec <__assert_fail@plt+0x2de8>
   13f58:	mov	r0, #5
   13f5c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13f60:	ldr	r3, [sp, #80]	; 0x50
   13f64:	str	r0, [sp]
   13f68:	ldr	r0, [fp, #12]
   13f6c:	str	r0, [sp, #4]
   13f70:	ldr	r0, [fp, #16]
   13f74:	str	r0, [sp, #8]
   13f78:	ldr	r0, [sp, #64]	; 0x40
   13f7c:	str	r0, [sp, #12]
   13f80:	ldr	r0, [sp, #72]	; 0x48
   13f84:	b	13f34 <__assert_fail@plt+0x2e30>
   13f88:	mov	r0, #0
   13f8c:	str	r0, [fp, #-72]	; 0xffffffb8
   13f90:	ldr	r1, [sp, #92]	; 0x5c
   13f94:	cmp	r1, #0
   13f98:	beq	13fd8 <__assert_fail@plt+0x2ed4>
   13f9c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13fa0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13fa4:	tst	r0, #1
   13fa8:	bne	13fdc <__assert_fail@plt+0x2ed8>
   13fac:	ldrb	r0, [r1]
   13fb0:	cmp	r0, #0
   13fb4:	beq	13fdc <__assert_fail@plt+0x2ed8>
   13fb8:	add	r1, r1, #1
   13fbc:	cmp	r8, r6
   13fc0:	strbcc	r0, [r2, r8]
   13fc4:	add	r8, r8, #1
   13fc8:	ldrb	r0, [r1], #1
   13fcc:	cmp	r0, #0
   13fd0:	bne	13fbc <__assert_fail@plt+0x2eb8>
   13fd4:	b	13fdc <__assert_fail@plt+0x2ed8>
   13fd8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13fdc:	cmp	r8, r6
   13fe0:	movcc	r0, #0
   13fe4:	strbcc	r0, [r2, r8]
   13fe8:	b	13f44 <__assert_fail@plt+0x2e40>
   13fec:	mov	r2, #1
   13ff0:	b	13ed4 <__assert_fail@plt+0x2dd0>
   13ff4:	mov	r7, #5
   13ff8:	b	13ee8 <__assert_fail@plt+0x2de4>
   13ffc:	bl	110ec <abort@plt>
   14000:	mov	r3, r2
   14004:	mov	r2, #0
   14008:	b	1400c <__assert_fail@plt+0x2f08>
   1400c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14010:	add	fp, sp, #28
   14014:	sub	sp, sp, #36	; 0x24
   14018:	movw	r8, #62112	; 0xf2a0
   1401c:	cmp	r3, #0
   14020:	mov	r4, r2
   14024:	str	r2, [sp, #24]
   14028:	mov	r5, r1
   1402c:	mov	r6, r0
   14030:	str	r0, [sp, #20]
   14034:	movt	r8, #2
   14038:	movne	r8, r3
   1403c:	bl	11014 <__errno_location@plt>
   14040:	str	r0, [sp, #28]
   14044:	cmp	r4, #0
   14048:	add	sl, r8, #8
   1404c:	ldm	r8, {r3, r9}
   14050:	ldr	r7, [r0]
   14054:	ldr	r1, [r8, #40]	; 0x28
   14058:	ldr	r2, [r8, #44]	; 0x2c
   1405c:	mov	r0, #0
   14060:	orreq	r9, r9, #1
   14064:	str	r7, [sp, #32]
   14068:	mov	r7, r5
   1406c:	stm	sp, {r3, r9, sl}
   14070:	str	r1, [sp, #12]
   14074:	str	r2, [sp, #16]
   14078:	mov	r1, #0
   1407c:	mov	r2, r6
   14080:	mov	r3, r5
   14084:	bl	12f7c <__assert_fail@plt+0x1e78>
   14088:	add	r4, r0, #1
   1408c:	mov	r5, r0
   14090:	mov	r0, r4
   14094:	bl	14d70 <__assert_fail@plt+0x3c6c>
   14098:	mov	r6, r0
   1409c:	ldr	r0, [r8]
   140a0:	ldr	r2, [r8, #44]	; 0x2c
   140a4:	ldr	r1, [r8, #40]	; 0x28
   140a8:	mov	r3, r7
   140ac:	stm	sp, {r0, r9, sl}
   140b0:	str	r2, [sp, #16]
   140b4:	str	r1, [sp, #12]
   140b8:	mov	r0, r6
   140bc:	mov	r1, r4
   140c0:	ldr	r2, [sp, #20]
   140c4:	bl	12f7c <__assert_fail@plt+0x1e78>
   140c8:	ldr	r0, [sp, #24]
   140cc:	ldr	r1, [sp, #32]
   140d0:	ldr	r2, [sp, #28]
   140d4:	cmp	r0, #0
   140d8:	str	r1, [r2]
   140dc:	strne	r5, [r0]
   140e0:	mov	r0, r6
   140e4:	sub	sp, fp, #28
   140e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140f0:	add	fp, sp, #24
   140f4:	movw	r5, #28924	; 0x70fc
   140f8:	movw	r8, #28920	; 0x70f8
   140fc:	movt	r5, #2
   14100:	movt	r8, #2
   14104:	ldr	r0, [r5]
   14108:	ldr	r4, [r8]
   1410c:	cmp	r0, #2
   14110:	blt	1413c <__assert_fail@plt+0x3038>
   14114:	add	r7, r4, #12
   14118:	mov	r6, #0
   1411c:	ldr	r0, [r7, r6, lsl #3]
   14120:	bl	15ae0 <__assert_fail@plt+0x49dc>
   14124:	ldr	r1, [r5]
   14128:	add	r2, r6, #2
   1412c:	add	r0, r6, #1
   14130:	mov	r6, r0
   14134:	cmp	r2, r1
   14138:	blt	1411c <__assert_fail@plt+0x3018>
   1413c:	ldr	r0, [r4, #4]
   14140:	movw	r7, #62160	; 0xf2d0
   14144:	movt	r7, #2
   14148:	cmp	r0, r7
   1414c:	beq	14164 <__assert_fail@plt+0x3060>
   14150:	bl	15ae0 <__assert_fail@plt+0x49dc>
   14154:	movw	r0, #28928	; 0x7100
   14158:	mov	r6, #256	; 0x100
   1415c:	movt	r0, #2
   14160:	strd	r6, [r0]
   14164:	movw	r6, #28928	; 0x7100
   14168:	movt	r6, #2
   1416c:	cmp	r4, r6
   14170:	beq	14180 <__assert_fail@plt+0x307c>
   14174:	mov	r0, r4
   14178:	bl	15ae0 <__assert_fail@plt+0x49dc>
   1417c:	str	r6, [r8]
   14180:	mov	r0, #1
   14184:	str	r0, [r5]
   14188:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1418c:	movw	r3, #62112	; 0xf2a0
   14190:	mvn	r2, #0
   14194:	movt	r3, #2
   14198:	b	1419c <__assert_fail@plt+0x3098>
   1419c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a0:	add	fp, sp, #28
   141a4:	sub	sp, sp, #44	; 0x2c
   141a8:	mov	r7, r3
   141ac:	str	r2, [sp, #36]	; 0x24
   141b0:	str	r1, [sp, #32]
   141b4:	mov	r5, r0
   141b8:	bl	11014 <__errno_location@plt>
   141bc:	cmp	r5, #0
   141c0:	blt	1432c <__assert_fail@plt+0x3228>
   141c4:	cmn	r5, #-2147483647	; 0x80000001
   141c8:	beq	1432c <__assert_fail@plt+0x3228>
   141cc:	movw	r8, #28924	; 0x70fc
   141d0:	movw	r4, #28920	; 0x70f8
   141d4:	str	r0, [sp, #28]
   141d8:	ldr	r0, [r0]
   141dc:	movt	r8, #2
   141e0:	movt	r4, #2
   141e4:	ldr	r1, [r8]
   141e8:	ldr	r6, [r4]
   141ec:	str	r0, [sp, #24]
   141f0:	cmp	r1, r5
   141f4:	ble	14200 <__assert_fail@plt+0x30fc>
   141f8:	mov	sl, r6
   141fc:	b	14268 <__assert_fail@plt+0x3164>
   14200:	movw	r9, #28928	; 0x7100
   14204:	mov	r0, #8
   14208:	add	r2, r5, #1
   1420c:	str	r1, [fp, #-32]	; 0xffffffe0
   14210:	mvn	r3, #-2147483648	; 0x80000000
   14214:	movt	r9, #2
   14218:	str	r0, [sp]
   1421c:	sub	r2, r2, r1
   14220:	sub	r1, fp, #32
   14224:	subs	r0, r6, r9
   14228:	movne	r0, r6
   1422c:	bl	14ea0 <__assert_fail@plt+0x3d9c>
   14230:	cmp	r6, r9
   14234:	mov	sl, r0
   14238:	str	r0, [r4]
   1423c:	ldrdeq	r0, [r9]
   14240:	stmeq	sl, {r0, r1}
   14244:	ldr	r1, [r8]
   14248:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1424c:	add	r0, sl, r1, lsl #3
   14250:	sub	r1, r2, r1
   14254:	lsl	r2, r1, #3
   14258:	mov	r1, #0
   1425c:	bl	1102c <memset@plt>
   14260:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14264:	str	r0, [r8]
   14268:	mov	r9, sl
   1426c:	ldr	r6, [r9, r5, lsl #3]!
   14270:	ldr	r4, [r9, #4]!
   14274:	ldm	r7, {r0, r1}
   14278:	ldr	r2, [r7, #40]	; 0x28
   1427c:	ldr	r3, [r7, #44]	; 0x2c
   14280:	orr	r8, r1, #1
   14284:	add	r1, r7, #8
   14288:	stm	sp, {r0, r8}
   1428c:	add	r0, sp, #8
   14290:	str	r1, [sp, #20]
   14294:	stm	r0, {r1, r2, r3}
   14298:	mov	r0, r4
   1429c:	mov	r1, r6
   142a0:	ldr	r2, [sp, #32]
   142a4:	ldr	r3, [sp, #36]	; 0x24
   142a8:	bl	12f7c <__assert_fail@plt+0x1e78>
   142ac:	cmp	r6, r0
   142b0:	bhi	14314 <__assert_fail@plt+0x3210>
   142b4:	add	r6, r0, #1
   142b8:	movw	r0, #62160	; 0xf2d0
   142bc:	movt	r0, #2
   142c0:	str	r6, [sl, r5, lsl #3]
   142c4:	cmp	r4, r0
   142c8:	beq	142d4 <__assert_fail@plt+0x31d0>
   142cc:	mov	r0, r4
   142d0:	bl	15ae0 <__assert_fail@plt+0x49dc>
   142d4:	mov	r0, r6
   142d8:	bl	14d70 <__assert_fail@plt+0x3c6c>
   142dc:	str	r0, [r9]
   142e0:	mov	r4, r0
   142e4:	add	r3, sp, #8
   142e8:	ldr	r0, [r7]
   142ec:	ldr	r1, [r7, #40]	; 0x28
   142f0:	ldr	r2, [r7, #44]	; 0x2c
   142f4:	stm	sp, {r0, r8}
   142f8:	ldr	r0, [sp, #20]
   142fc:	stm	r3, {r0, r1, r2}
   14300:	mov	r0, r4
   14304:	mov	r1, r6
   14308:	ldr	r2, [sp, #32]
   1430c:	ldr	r3, [sp, #36]	; 0x24
   14310:	bl	12f7c <__assert_fail@plt+0x1e78>
   14314:	ldr	r0, [sp, #28]
   14318:	ldr	r1, [sp, #24]
   1431c:	str	r1, [r0]
   14320:	mov	r0, r4
   14324:	sub	sp, fp, #28
   14328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1432c:	bl	110ec <abort@plt>
   14330:	movw	r3, #62112	; 0xf2a0
   14334:	movt	r3, #2
   14338:	b	1419c <__assert_fail@plt+0x3098>
   1433c:	movw	r3, #62112	; 0xf2a0
   14340:	mov	r1, r0
   14344:	mov	r0, #0
   14348:	mvn	r2, #0
   1434c:	movt	r3, #2
   14350:	b	1419c <__assert_fail@plt+0x3098>
   14354:	movw	r3, #62112	; 0xf2a0
   14358:	mov	r2, r1
   1435c:	mov	r1, r0
   14360:	mov	r0, #0
   14364:	movt	r3, #2
   14368:	b	1419c <__assert_fail@plt+0x3098>
   1436c:	push	{fp, lr}
   14370:	mov	fp, sp
   14374:	sub	sp, sp, #48	; 0x30
   14378:	vmov.i32	q8, #0	; 0x00000000
   1437c:	mov	ip, #32
   14380:	mov	r3, sp
   14384:	mov	lr, r2
   14388:	cmp	r1, #10
   1438c:	add	r2, r3, #16
   14390:	vst1.64	{d16-d17}, [r3], ip
   14394:	vst1.64	{d16-d17}, [r3]
   14398:	vst1.64	{d16-d17}, [r2]
   1439c:	beq	143bc <__assert_fail@plt+0x32b8>
   143a0:	str	r1, [sp]
   143a4:	mov	r3, sp
   143a8:	mov	r1, lr
   143ac:	mvn	r2, #0
   143b0:	bl	1419c <__assert_fail@plt+0x3098>
   143b4:	mov	sp, fp
   143b8:	pop	{fp, pc}
   143bc:	bl	110ec <abort@plt>
   143c0:	push	{r4, sl, fp, lr}
   143c4:	add	fp, sp, #8
   143c8:	sub	sp, sp, #48	; 0x30
   143cc:	mov	ip, r3
   143d0:	mov	r3, sp
   143d4:	vmov.i32	q8, #0	; 0x00000000
   143d8:	mov	lr, #32
   143dc:	cmp	r1, #10
   143e0:	add	r4, r3, #16
   143e4:	vst1.64	{d16-d17}, [r3], lr
   143e8:	vst1.64	{d16-d17}, [r3]
   143ec:	vst1.64	{d16-d17}, [r4]
   143f0:	beq	14410 <__assert_fail@plt+0x330c>
   143f4:	str	r1, [sp]
   143f8:	mov	r1, r2
   143fc:	mov	r3, sp
   14400:	mov	r2, ip
   14404:	bl	1419c <__assert_fail@plt+0x3098>
   14408:	sub	sp, fp, #8
   1440c:	pop	{r4, sl, fp, pc}
   14410:	bl	110ec <abort@plt>
   14414:	mov	r2, r1
   14418:	mov	r1, r0
   1441c:	mov	r0, #0
   14420:	b	1436c <__assert_fail@plt+0x3268>
   14424:	mov	r3, r2
   14428:	mov	r2, r1
   1442c:	mov	r1, r0
   14430:	mov	r0, #0
   14434:	b	143c0 <__assert_fail@plt+0x32bc>
   14438:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1443c:	add	fp, sp, #24
   14440:	sub	sp, sp, #48	; 0x30
   14444:	movw	r8, #62112	; 0xf2a0
   14448:	mov	lr, r0
   1444c:	mov	r3, sp
   14450:	mov	ip, r1
   14454:	movt	r8, #2
   14458:	mov	r1, r3
   1445c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   14460:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14464:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14468:	stm	r1, {r0, r4, r5, r6, r7, r9}
   1446c:	ubfx	r0, r2, #5, #3
   14470:	and	r2, r2, #31
   14474:	mov	r4, #1
   14478:	add	r0, r3, r0, lsl #2
   1447c:	ldr	r1, [r0, #8]
   14480:	bic	r4, r4, r1, lsr r2
   14484:	eor	r1, r1, r4, lsl r2
   14488:	mov	r2, ip
   1448c:	str	r1, [r0, #8]
   14490:	mov	r0, #0
   14494:	mov	r1, lr
   14498:	bl	1419c <__assert_fail@plt+0x3098>
   1449c:	sub	sp, fp, #24
   144a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   144a8:	add	fp, sp, #24
   144ac:	sub	sp, sp, #48	; 0x30
   144b0:	movw	lr, #62112	; 0xf2a0
   144b4:	mov	ip, r0
   144b8:	mov	r3, sp
   144bc:	movt	lr, #2
   144c0:	mov	r2, r3
   144c4:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   144c8:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   144cc:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   144d0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   144d4:	ubfx	r0, r1, #5, #3
   144d8:	and	r1, r1, #31
   144dc:	mov	r7, #1
   144e0:	add	r0, r3, r0, lsl #2
   144e4:	ldr	r2, [r0, #8]
   144e8:	bic	r7, r7, r2, lsr r1
   144ec:	eor	r1, r2, r7, lsl r1
   144f0:	mvn	r2, #0
   144f4:	str	r1, [r0, #8]
   144f8:	mov	r0, #0
   144fc:	mov	r1, ip
   14500:	bl	1419c <__assert_fail@plt+0x3098>
   14504:	sub	sp, fp, #24
   14508:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1450c:	push	{r4, r5, r6, r7, fp, lr}
   14510:	add	fp, sp, #16
   14514:	sub	sp, sp, #48	; 0x30
   14518:	movw	lr, #62112	; 0xf2a0
   1451c:	mov	ip, r0
   14520:	mov	r3, sp
   14524:	movt	lr, #2
   14528:	mov	r2, r3
   1452c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14530:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14534:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14538:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1453c:	mov	r1, ip
   14540:	mvn	r2, #0
   14544:	ldr	r0, [sp, #12]
   14548:	orr	r0, r0, #67108864	; 0x4000000
   1454c:	str	r0, [sp, #12]
   14550:	mov	r0, #0
   14554:	bl	1419c <__assert_fail@plt+0x3098>
   14558:	sub	sp, fp, #16
   1455c:	pop	{r4, r5, r6, r7, fp, pc}
   14560:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14564:	add	fp, sp, #24
   14568:	sub	sp, sp, #48	; 0x30
   1456c:	movw	r8, #62112	; 0xf2a0
   14570:	mov	ip, r1
   14574:	mov	lr, r0
   14578:	mov	r3, sp
   1457c:	movt	r8, #2
   14580:	mov	r2, r3
   14584:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14588:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1458c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   14590:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14594:	mov	r1, lr
   14598:	mov	r2, ip
   1459c:	ldr	r0, [sp, #12]
   145a0:	orr	r0, r0, #67108864	; 0x4000000
   145a4:	str	r0, [sp, #12]
   145a8:	mov	r0, #0
   145ac:	bl	1419c <__assert_fail@plt+0x3098>
   145b0:	sub	sp, fp, #24
   145b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145bc:	add	fp, sp, #24
   145c0:	sub	sp, sp, #96	; 0x60
   145c4:	mov	lr, sp
   145c8:	vmov.i32	q8, #0	; 0x00000000
   145cc:	mov	ip, r2
   145d0:	cmp	r1, #10
   145d4:	add	r3, lr, #16
   145d8:	mov	r2, lr
   145dc:	vst1.64	{d16-d17}, [r3]
   145e0:	mov	r3, #28
   145e4:	vst1.64	{d16-d17}, [r2], r3
   145e8:	vst1.32	{d16-d17}, [r2]
   145ec:	beq	1462c <__assert_fail@plt+0x3528>
   145f0:	str	r1, [sp, #48]	; 0x30
   145f4:	add	r3, sp, #48	; 0x30
   145f8:	ldm	lr!, {r2, r4, r5, r6, r7}
   145fc:	add	r1, r3, #4
   14600:	stmia	r1!, {r2, r4, r5, r6, r7}
   14604:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   14608:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1460c:	mvn	r2, #0
   14610:	ldr	r1, [sp, #60]	; 0x3c
   14614:	orr	r1, r1, #67108864	; 0x4000000
   14618:	str	r1, [sp, #60]	; 0x3c
   1461c:	mov	r1, ip
   14620:	bl	1419c <__assert_fail@plt+0x3098>
   14624:	sub	sp, fp, #24
   14628:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1462c:	bl	110ec <abort@plt>
   14630:	push	{fp, lr}
   14634:	mov	fp, sp
   14638:	sub	sp, sp, #8
   1463c:	mvn	ip, #0
   14640:	str	ip, [sp]
   14644:	bl	14650 <__assert_fail@plt+0x354c>
   14648:	mov	sp, fp
   1464c:	pop	{fp, pc}
   14650:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14654:	add	fp, sp, #24
   14658:	sub	sp, sp, #48	; 0x30
   1465c:	movw	ip, #62112	; 0xf2a0
   14660:	mov	lr, r3
   14664:	mov	r3, sp
   14668:	cmp	r1, #0
   1466c:	movt	ip, #2
   14670:	cmpne	r2, #0
   14674:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14678:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1467c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   14680:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14684:	mov	r3, #10
   14688:	str	r3, [sp]
   1468c:	bne	14694 <__assert_fail@plt+0x3590>
   14690:	bl	110ec <abort@plt>
   14694:	ldr	ip, [fp, #8]
   14698:	str	r2, [sp, #44]	; 0x2c
   1469c:	str	r1, [sp, #40]	; 0x28
   146a0:	mov	r3, sp
   146a4:	mov	r1, lr
   146a8:	mov	r2, ip
   146ac:	bl	1419c <__assert_fail@plt+0x3098>
   146b0:	sub	sp, fp, #24
   146b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146b8:	push	{fp, lr}
   146bc:	mov	fp, sp
   146c0:	sub	sp, sp, #8
   146c4:	mov	r3, r2
   146c8:	mov	r2, r1
   146cc:	mov	r1, r0
   146d0:	mvn	r0, #0
   146d4:	str	r0, [sp]
   146d8:	mov	r0, #0
   146dc:	bl	14650 <__assert_fail@plt+0x354c>
   146e0:	mov	sp, fp
   146e4:	pop	{fp, pc}
   146e8:	push	{fp, lr}
   146ec:	mov	fp, sp
   146f0:	sub	sp, sp, #8
   146f4:	mov	ip, r2
   146f8:	mov	r2, r1
   146fc:	mov	r1, r0
   14700:	str	r3, [sp]
   14704:	mov	r0, #0
   14708:	mov	r3, ip
   1470c:	bl	14650 <__assert_fail@plt+0x354c>
   14710:	mov	sp, fp
   14714:	pop	{fp, pc}
   14718:	movw	r3, #28936	; 0x7108
   1471c:	movt	r3, #2
   14720:	b	1419c <__assert_fail@plt+0x3098>
   14724:	movw	r3, #28936	; 0x7108
   14728:	mov	r2, r1
   1472c:	mov	r1, r0
   14730:	mov	r0, #0
   14734:	movt	r3, #2
   14738:	b	1419c <__assert_fail@plt+0x3098>
   1473c:	movw	r3, #28936	; 0x7108
   14740:	mvn	r2, #0
   14744:	movt	r3, #2
   14748:	b	1419c <__assert_fail@plt+0x3098>
   1474c:	movw	r3, #28936	; 0x7108
   14750:	mov	r1, r0
   14754:	mov	r0, #0
   14758:	mvn	r2, #0
   1475c:	movt	r3, #2
   14760:	b	1419c <__assert_fail@plt+0x3098>
   14764:	push	{r4, r5, fp, lr}
   14768:	add	fp, sp, #8
   1476c:	mov	r5, r0
   14770:	mov	r4, r1
   14774:	mov	r0, #0
   14778:	mov	r2, #5
   1477c:	mov	r1, r5
   14780:	bl	10f30 <dcgettext@plt>
   14784:	cmp	r0, r5
   14788:	popne	{r4, r5, fp, pc}
   1478c:	bl	15b08 <__assert_fail@plt+0x4a04>
   14790:	ldrb	r1, [r0]
   14794:	and	r1, r1, #223	; 0xdf
   14798:	cmp	r1, #71	; 0x47
   1479c:	beq	14804 <__assert_fail@plt+0x3700>
   147a0:	cmp	r1, #85	; 0x55
   147a4:	bne	14828 <__assert_fail@plt+0x3724>
   147a8:	ldrb	r1, [r0, #1]
   147ac:	and	r1, r1, #223	; 0xdf
   147b0:	cmp	r1, #84	; 0x54
   147b4:	bne	14828 <__assert_fail@plt+0x3724>
   147b8:	ldrb	r1, [r0, #2]
   147bc:	and	r1, r1, #223	; 0xdf
   147c0:	cmp	r1, #70	; 0x46
   147c4:	ldrbeq	r1, [r0, #3]
   147c8:	cmpeq	r1, #45	; 0x2d
   147cc:	bne	14828 <__assert_fail@plt+0x3724>
   147d0:	ldrb	r1, [r0, #4]
   147d4:	cmp	r1, #56	; 0x38
   147d8:	ldrbeq	r0, [r0, #5]
   147dc:	cmpeq	r0, #0
   147e0:	bne	14828 <__assert_fail@plt+0x3724>
   147e4:	ldrb	r1, [r5]
   147e8:	movw	r2, #26390	; 0x6716
   147ec:	movw	r0, #26394	; 0x671a
   147f0:	movt	r2, #1
   147f4:	movt	r0, #1
   147f8:	cmp	r1, #96	; 0x60
   147fc:	moveq	r0, r2
   14800:	pop	{r4, r5, fp, pc}
   14804:	ldrb	r1, [r0, #1]
   14808:	and	r1, r1, #223	; 0xdf
   1480c:	cmp	r1, #66	; 0x42
   14810:	bne	14828 <__assert_fail@plt+0x3724>
   14814:	ldrb	r1, [r0, #2]
   14818:	cmp	r1, #49	; 0x31
   1481c:	ldrbeq	r1, [r0, #3]
   14820:	cmpeq	r1, #56	; 0x38
   14824:	beq	14844 <__assert_fail@plt+0x3740>
   14828:	movw	r1, #25984	; 0x6580
   1482c:	movw	r0, #26388	; 0x6714
   14830:	cmp	r4, #9
   14834:	movt	r1, #1
   14838:	movt	r0, #1
   1483c:	moveq	r0, r1
   14840:	pop	{r4, r5, fp, pc}
   14844:	ldrb	r1, [r0, #4]
   14848:	cmp	r1, #48	; 0x30
   1484c:	ldrbeq	r1, [r0, #5]
   14850:	cmpeq	r1, #51	; 0x33
   14854:	bne	14828 <__assert_fail@plt+0x3724>
   14858:	ldrb	r1, [r0, #6]
   1485c:	cmp	r1, #48	; 0x30
   14860:	ldrbeq	r0, [r0, #7]
   14864:	cmpeq	r0, #0
   14868:	bne	14828 <__assert_fail@plt+0x3724>
   1486c:	ldrb	r1, [r5]
   14870:	movw	r2, #26398	; 0x671e
   14874:	movw	r0, #26402	; 0x6722
   14878:	movt	r2, #1
   1487c:	movt	r0, #1
   14880:	b	147f8 <__assert_fail@plt+0x36f4>
   14884:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14888:	add	fp, sp, #24
   1488c:	sub	sp, sp, #32
   14890:	ldr	r6, [fp, #12]
   14894:	ldr	r7, [fp, #8]
   14898:	mov	r4, r2
   1489c:	mov	r8, r0
   148a0:	cmp	r1, #0
   148a4:	beq	148cc <__assert_fail@plt+0x37c8>
   148a8:	movw	r2, #26492	; 0x677c
   148ac:	mov	r5, r1
   148b0:	str	r3, [sp, #4]
   148b4:	str	r4, [sp]
   148b8:	mov	r0, r8
   148bc:	mov	r1, #1
   148c0:	movt	r2, #1
   148c4:	mov	r3, r5
   148c8:	b	148e4 <__assert_fail@plt+0x37e0>
   148cc:	movw	r2, #26504	; 0x6788
   148d0:	str	r3, [sp]
   148d4:	mov	r0, r8
   148d8:	mov	r1, #1
   148dc:	mov	r3, r4
   148e0:	movt	r2, #1
   148e4:	bl	1105c <__fprintf_chk@plt>
   148e8:	movw	r1, #26511	; 0x678f
   148ec:	mov	r0, #0
   148f0:	mov	r2, #5
   148f4:	movt	r1, #1
   148f8:	bl	10f30 <dcgettext@plt>
   148fc:	movw	r2, #27229	; 0x6a5d
   14900:	mov	r3, r0
   14904:	movw	r0, #2022	; 0x7e6
   14908:	mov	r1, #1
   1490c:	str	r0, [sp]
   14910:	movt	r2, #1
   14914:	mov	r0, r8
   14918:	bl	1105c <__fprintf_chk@plt>
   1491c:	movw	r4, #25824	; 0x64e0
   14920:	mov	r1, r8
   14924:	movt	r4, #1
   14928:	mov	r0, r4
   1492c:	bl	10e94 <fputs_unlocked@plt>
   14930:	movw	r1, #26515	; 0x6793
   14934:	mov	r0, #0
   14938:	mov	r2, #5
   1493c:	movt	r1, #1
   14940:	bl	10f30 <dcgettext@plt>
   14944:	movw	r3, #26686	; 0x683e
   14948:	mov	r2, r0
   1494c:	mov	r0, r8
   14950:	mov	r1, #1
   14954:	movt	r3, #1
   14958:	bl	1105c <__fprintf_chk@plt>
   1495c:	mov	r0, r4
   14960:	mov	r1, r8
   14964:	bl	10e94 <fputs_unlocked@plt>
   14968:	cmp	r6, #9
   1496c:	bhi	149d0 <__assert_fail@plt+0x38cc>
   14970:	add	r0, pc, #0
   14974:	ldr	pc, [r0, r6, lsl #2]
   14978:	andeq	r4, r1, r8, lsr #23
   1497c:	andeq	r4, r1, r0, lsr #19
   14980:	ldrdeq	r4, [r1], -ip
   14984:	andeq	r4, r1, r4, lsl #20
   14988:	andeq	r4, r1, ip, lsr #20
   1498c:	andeq	r4, r1, r4, asr sl
   14990:	andeq	r4, r1, ip, ror sl
   14994:			; <UNDEFINED> instruction: 0x00014ab4
   14998:	andeq	r4, r1, r4, asr fp
   1499c:	strdeq	r4, [r1], -ip
   149a0:	movw	r1, #26720	; 0x6860
   149a4:	mov	r0, #0
   149a8:	mov	r2, #5
   149ac:	movt	r1, #1
   149b0:	bl	10f30 <dcgettext@plt>
   149b4:	ldr	r3, [r7]
   149b8:	mov	r2, r0
   149bc:	mov	r0, r8
   149c0:	mov	r1, #1
   149c4:	sub	sp, fp, #24
   149c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   149cc:	b	1105c <__fprintf_chk@plt>
   149d0:	movw	r1, #27039	; 0x699f
   149d4:	movt	r1, #1
   149d8:	b	14b04 <__assert_fail@plt+0x3a00>
   149dc:	movw	r1, #26736	; 0x6870
   149e0:	mov	r0, #0
   149e4:	mov	r2, #5
   149e8:	movt	r1, #1
   149ec:	bl	10f30 <dcgettext@plt>
   149f0:	mov	r2, r0
   149f4:	ldr	r3, [r7]
   149f8:	ldr	r0, [r7, #4]
   149fc:	str	r0, [sp]
   14a00:	b	14af0 <__assert_fail@plt+0x39ec>
   14a04:	movw	r1, #26759	; 0x6887
   14a08:	mov	r0, #0
   14a0c:	mov	r2, #5
   14a10:	movt	r1, #1
   14a14:	bl	10f30 <dcgettext@plt>
   14a18:	ldr	r3, [r7]
   14a1c:	mov	r2, r0
   14a20:	ldmib	r7, {r0, r1}
   14a24:	stm	sp, {r0, r1}
   14a28:	b	14af0 <__assert_fail@plt+0x39ec>
   14a2c:	movw	r1, #26787	; 0x68a3
   14a30:	mov	r0, #0
   14a34:	mov	r2, #5
   14a38:	movt	r1, #1
   14a3c:	bl	10f30 <dcgettext@plt>
   14a40:	ldr	r3, [r7]
   14a44:	mov	r2, r0
   14a48:	ldmib	r7, {r0, r1, r7}
   14a4c:	stm	sp, {r0, r1, r7}
   14a50:	b	14af0 <__assert_fail@plt+0x39ec>
   14a54:	movw	r1, #26819	; 0x68c3
   14a58:	mov	r0, #0
   14a5c:	mov	r2, #5
   14a60:	movt	r1, #1
   14a64:	bl	10f30 <dcgettext@plt>
   14a68:	ldr	r3, [r7]
   14a6c:	mov	r2, r0
   14a70:	ldmib	r7, {r0, r1, r6, r7}
   14a74:	stm	sp, {r0, r1, r6, r7}
   14a78:	b	14af0 <__assert_fail@plt+0x39ec>
   14a7c:	movw	r1, #26855	; 0x68e7
   14a80:	mov	r0, #0
   14a84:	mov	r2, #5
   14a88:	movt	r1, #1
   14a8c:	bl	10f30 <dcgettext@plt>
   14a90:	ldr	r3, [r7]
   14a94:	mov	r2, r0
   14a98:	ldmib	r7, {r0, r1, r6}
   14a9c:	ldr	r5, [r7, #16]
   14aa0:	ldr	r7, [r7, #20]
   14aa4:	stm	sp, {r0, r1, r6}
   14aa8:	str	r5, [sp, #12]
   14aac:	str	r7, [sp, #16]
   14ab0:	b	14af0 <__assert_fail@plt+0x39ec>
   14ab4:	movw	r1, #26895	; 0x690f
   14ab8:	mov	r0, #0
   14abc:	mov	r2, #5
   14ac0:	movt	r1, #1
   14ac4:	bl	10f30 <dcgettext@plt>
   14ac8:	ldr	r3, [r7]
   14acc:	mov	r2, r0
   14ad0:	ldmib	r7, {r0, r1, r6}
   14ad4:	ldr	r5, [r7, #16]
   14ad8:	ldr	r4, [r7, #20]
   14adc:	ldr	r7, [r7, #24]
   14ae0:	stm	sp, {r0, r1, r6}
   14ae4:	str	r5, [sp, #12]
   14ae8:	str	r4, [sp, #16]
   14aec:	str	r7, [sp, #20]
   14af0:	mov	r0, r8
   14af4:	mov	r1, #1
   14af8:	b	14ba4 <__assert_fail@plt+0x3aa0>
   14afc:	movw	r1, #26987	; 0x696b
   14b00:	movt	r1, #1
   14b04:	mov	r0, #0
   14b08:	mov	r2, #5
   14b0c:	bl	10f30 <dcgettext@plt>
   14b10:	mov	ip, r0
   14b14:	ldr	r3, [r7]
   14b18:	ldr	r0, [r7, #4]
   14b1c:	ldr	r1, [r7, #8]
   14b20:	ldr	r6, [r7, #12]
   14b24:	ldr	r5, [r7, #16]
   14b28:	ldr	r4, [r7, #20]
   14b2c:	ldr	r2, [r7, #24]
   14b30:	ldr	lr, [r7, #28]
   14b34:	ldr	r7, [r7, #32]
   14b38:	stm	sp, {r0, r1, r6}
   14b3c:	str	r5, [sp, #12]
   14b40:	str	r4, [sp, #16]
   14b44:	str	r2, [sp, #20]
   14b48:	str	lr, [sp, #24]
   14b4c:	str	r7, [sp, #28]
   14b50:	b	14b98 <__assert_fail@plt+0x3a94>
   14b54:	movw	r1, #26939	; 0x693b
   14b58:	mov	r0, #0
   14b5c:	mov	r2, #5
   14b60:	movt	r1, #1
   14b64:	bl	10f30 <dcgettext@plt>
   14b68:	mov	ip, r0
   14b6c:	ldr	r3, [r7]
   14b70:	ldmib	r7, {r0, r1, r6}
   14b74:	ldr	r5, [r7, #16]
   14b78:	ldr	r4, [r7, #20]
   14b7c:	ldr	r2, [r7, #24]
   14b80:	ldr	r7, [r7, #28]
   14b84:	stm	sp, {r0, r1, r6}
   14b88:	str	r5, [sp, #12]
   14b8c:	str	r4, [sp, #16]
   14b90:	str	r2, [sp, #20]
   14b94:	str	r7, [sp, #24]
   14b98:	mov	r0, r8
   14b9c:	mov	r1, #1
   14ba0:	mov	r2, ip
   14ba4:	bl	1105c <__fprintf_chk@plt>
   14ba8:	sub	sp, fp, #24
   14bac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bb0:	push	{r4, sl, fp, lr}
   14bb4:	add	fp, sp, #8
   14bb8:	sub	sp, sp, #8
   14bbc:	ldr	ip, [fp, #8]
   14bc0:	mov	lr, #0
   14bc4:	ldr	r4, [ip, lr, lsl #2]
   14bc8:	add	lr, lr, #1
   14bcc:	cmp	r4, #0
   14bd0:	bne	14bc4 <__assert_fail@plt+0x3ac0>
   14bd4:	sub	r4, lr, #1
   14bd8:	str	ip, [sp]
   14bdc:	str	r4, [sp, #4]
   14be0:	bl	14884 <__assert_fail@plt+0x3780>
   14be4:	sub	sp, fp, #8
   14be8:	pop	{r4, sl, fp, pc}
   14bec:	push	{r4, r5, fp, lr}
   14bf0:	add	fp, sp, #8
   14bf4:	sub	sp, sp, #48	; 0x30
   14bf8:	ldr	r4, [fp, #8]
   14bfc:	mov	ip, #0
   14c00:	add	lr, sp, #8
   14c04:	ldr	r5, [r4]
   14c08:	cmp	r5, #0
   14c0c:	str	r5, [lr, ip, lsl #2]
   14c10:	beq	14c24 <__assert_fail@plt+0x3b20>
   14c14:	add	ip, ip, #1
   14c18:	add	r4, r4, #4
   14c1c:	cmp	ip, #10
   14c20:	bcc	14c04 <__assert_fail@plt+0x3b00>
   14c24:	str	lr, [sp]
   14c28:	str	ip, [sp, #4]
   14c2c:	bl	14884 <__assert_fail@plt+0x3780>
   14c30:	sub	sp, fp, #8
   14c34:	pop	{r4, r5, fp, pc}
   14c38:	push	{fp, lr}
   14c3c:	mov	fp, sp
   14c40:	sub	sp, sp, #8
   14c44:	add	ip, fp, #8
   14c48:	str	ip, [sp, #4]
   14c4c:	str	ip, [sp]
   14c50:	bl	14bec <__assert_fail@plt+0x3ae8>
   14c54:	mov	sp, fp
   14c58:	pop	{fp, pc}
   14c5c:	push	{fp, lr}
   14c60:	mov	fp, sp
   14c64:	movw	r0, #29012	; 0x7154
   14c68:	movt	r0, #2
   14c6c:	ldr	r1, [r0]
   14c70:	movw	r0, #25824	; 0x64e0
   14c74:	movt	r0, #1
   14c78:	bl	10e94 <fputs_unlocked@plt>
   14c7c:	movw	r1, #27099	; 0x69db
   14c80:	mov	r0, #0
   14c84:	mov	r2, #5
   14c88:	movt	r1, #1
   14c8c:	bl	10f30 <dcgettext@plt>
   14c90:	movw	r2, #27119	; 0x69ef
   14c94:	mov	r1, r0
   14c98:	mov	r0, #1
   14c9c:	movt	r2, #1
   14ca0:	bl	11038 <__printf_chk@plt>
   14ca4:	movw	r1, #27141	; 0x6a05
   14ca8:	mov	r0, #0
   14cac:	mov	r2, #5
   14cb0:	movt	r1, #1
   14cb4:	bl	10f30 <dcgettext@plt>
   14cb8:	movw	r2, #25292	; 0x62cc
   14cbc:	movw	r3, #25633	; 0x6421
   14cc0:	mov	r1, r0
   14cc4:	mov	r0, #1
   14cc8:	movt	r2, #1
   14ccc:	movt	r3, #1
   14cd0:	bl	11038 <__printf_chk@plt>
   14cd4:	movw	r1, #27161	; 0x6a19
   14cd8:	mov	r0, #0
   14cdc:	mov	r2, #5
   14ce0:	movt	r1, #1
   14ce4:	bl	10f30 <dcgettext@plt>
   14ce8:	movw	r2, #27200	; 0x6a40
   14cec:	mov	r1, r0
   14cf0:	mov	r0, #1
   14cf4:	movt	r2, #1
   14cf8:	pop	{fp, lr}
   14cfc:	b	11038 <__printf_chk@plt>
   14d00:	b	14d04 <__assert_fail@plt+0x3c00>
   14d04:	push	{r4, r5, r6, sl, fp, lr}
   14d08:	add	fp, sp, #16
   14d0c:	mov	r4, r2
   14d10:	mov	r5, r1
   14d14:	mov	r6, r0
   14d18:	bl	15ba0 <__assert_fail@plt+0x4a9c>
   14d1c:	cmp	r0, #0
   14d20:	popne	{r4, r5, r6, sl, fp, pc}
   14d24:	cmp	r6, #0
   14d28:	beq	14d3c <__assert_fail@plt+0x3c38>
   14d2c:	cmp	r5, #0
   14d30:	cmpne	r4, #0
   14d34:	bne	14d3c <__assert_fail@plt+0x3c38>
   14d38:	pop	{r4, r5, r6, sl, fp, pc}
   14d3c:	bl	15190 <__assert_fail@plt+0x408c>
   14d40:	push	{fp, lr}
   14d44:	mov	fp, sp
   14d48:	bl	159e0 <__assert_fail@plt+0x48dc>
   14d4c:	cmp	r0, #0
   14d50:	popne	{fp, pc}
   14d54:	bl	15190 <__assert_fail@plt+0x408c>
   14d58:	push	{fp, lr}
   14d5c:	mov	fp, sp
   14d60:	bl	159e0 <__assert_fail@plt+0x48dc>
   14d64:	cmp	r0, #0
   14d68:	popne	{fp, pc}
   14d6c:	bl	15190 <__assert_fail@plt+0x408c>
   14d70:	push	{fp, lr}
   14d74:	mov	fp, sp
   14d78:	bl	159e0 <__assert_fail@plt+0x48dc>
   14d7c:	cmp	r0, #0
   14d80:	popne	{fp, pc}
   14d84:	bl	15190 <__assert_fail@plt+0x408c>
   14d88:	push	{r4, r5, fp, lr}
   14d8c:	add	fp, sp, #8
   14d90:	mov	r4, r1
   14d94:	mov	r5, r0
   14d98:	bl	15a10 <__assert_fail@plt+0x490c>
   14d9c:	cmp	r0, #0
   14da0:	popne	{r4, r5, fp, pc}
   14da4:	cmp	r5, #0
   14da8:	beq	14db8 <__assert_fail@plt+0x3cb4>
   14dac:	cmp	r4, #0
   14db0:	bne	14db8 <__assert_fail@plt+0x3cb4>
   14db4:	pop	{r4, r5, fp, pc}
   14db8:	bl	15190 <__assert_fail@plt+0x408c>
   14dbc:	push	{fp, lr}
   14dc0:	mov	fp, sp
   14dc4:	cmp	r1, #0
   14dc8:	orreq	r1, r1, #1
   14dcc:	bl	15a10 <__assert_fail@plt+0x490c>
   14dd0:	cmp	r0, #0
   14dd4:	popne	{fp, pc}
   14dd8:	bl	15190 <__assert_fail@plt+0x408c>
   14ddc:	push	{fp, lr}
   14de0:	mov	fp, sp
   14de4:	clz	r3, r2
   14de8:	lsr	ip, r3, #5
   14dec:	clz	r3, r1
   14df0:	lsr	r3, r3, #5
   14df4:	orrs	r3, r3, ip
   14df8:	movwne	r1, #1
   14dfc:	movwne	r2, #1
   14e00:	bl	15ba0 <__assert_fail@plt+0x4a9c>
   14e04:	cmp	r0, #0
   14e08:	popne	{fp, pc}
   14e0c:	bl	15190 <__assert_fail@plt+0x408c>
   14e10:	push	{fp, lr}
   14e14:	mov	fp, sp
   14e18:	mov	r2, r1
   14e1c:	mov	r1, r0
   14e20:	mov	r0, #0
   14e24:	bl	15ba0 <__assert_fail@plt+0x4a9c>
   14e28:	cmp	r0, #0
   14e2c:	popne	{fp, pc}
   14e30:	bl	15190 <__assert_fail@plt+0x408c>
   14e34:	mov	r2, r1
   14e38:	mov	r1, r0
   14e3c:	mov	r0, #0
   14e40:	b	14ddc <__assert_fail@plt+0x3cd8>
   14e44:	mov	r2, #1
   14e48:	b	14e4c <__assert_fail@plt+0x3d48>
   14e4c:	push	{r4, r5, fp, lr}
   14e50:	add	fp, sp, #8
   14e54:	ldr	r5, [r1]
   14e58:	mov	r4, r1
   14e5c:	cmp	r0, #0
   14e60:	beq	14e78 <__assert_fail@plt+0x3d74>
   14e64:	mov	r1, #1
   14e68:	add	r1, r1, r5, lsr #1
   14e6c:	adds	r5, r5, r1
   14e70:	bcc	14e90 <__assert_fail@plt+0x3d8c>
   14e74:	bl	15190 <__assert_fail@plt+0x408c>
   14e78:	cmp	r5, #0
   14e7c:	bne	14e90 <__assert_fail@plt+0x3d8c>
   14e80:	mov	r1, #64	; 0x40
   14e84:	cmp	r2, #64	; 0x40
   14e88:	udiv	r5, r1, r2
   14e8c:	addhi	r5, r5, #1
   14e90:	mov	r1, r5
   14e94:	bl	14d04 <__assert_fail@plt+0x3c00>
   14e98:	str	r5, [r4]
   14e9c:	pop	{r4, r5, fp, pc}
   14ea0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ea4:	add	fp, sp, #24
   14ea8:	ldr	r6, [r1]
   14eac:	mov	r8, r1
   14eb0:	ldr	r4, [fp, #8]
   14eb4:	add	r1, r6, r6, asr #1
   14eb8:	cmp	r1, r6
   14ebc:	mvnvs	r1, #-2147483648	; 0x80000000
   14ec0:	cmp	r1, r3
   14ec4:	mov	r5, r1
   14ec8:	movgt	r5, r3
   14ecc:	cmn	r3, #1
   14ed0:	movle	r5, r1
   14ed4:	cmn	r4, #1
   14ed8:	ble	14ef8 <__assert_fail@plt+0x3df4>
   14edc:	cmp	r4, #0
   14ee0:	beq	14f4c <__assert_fail@plt+0x3e48>
   14ee4:	cmn	r5, #1
   14ee8:	ble	14f20 <__assert_fail@plt+0x3e1c>
   14eec:	mvn	r7, #-2147483648	; 0x80000000
   14ef0:	udiv	r1, r7, r4
   14ef4:	b	14f14 <__assert_fail@plt+0x3e10>
   14ef8:	cmn	r5, #1
   14efc:	ble	14f3c <__assert_fail@plt+0x3e38>
   14f00:	cmn	r4, #1
   14f04:	beq	14f4c <__assert_fail@plt+0x3e48>
   14f08:	mov	r1, #-2147483648	; 0x80000000
   14f0c:	mvn	r7, #-2147483648	; 0x80000000
   14f10:	sdiv	r1, r1, r4
   14f14:	cmp	r1, r5
   14f18:	bge	14f4c <__assert_fail@plt+0x3e48>
   14f1c:	b	14f5c <__assert_fail@plt+0x3e58>
   14f20:	beq	14f4c <__assert_fail@plt+0x3e48>
   14f24:	mov	r1, #-2147483648	; 0x80000000
   14f28:	mvn	r7, #-2147483648	; 0x80000000
   14f2c:	sdiv	r1, r1, r5
   14f30:	cmp	r1, r4
   14f34:	bge	14f4c <__assert_fail@plt+0x3e48>
   14f38:	b	14f5c <__assert_fail@plt+0x3e58>
   14f3c:	mvn	r7, #-2147483648	; 0x80000000
   14f40:	sdiv	r1, r7, r4
   14f44:	cmp	r5, r1
   14f48:	blt	14f5c <__assert_fail@plt+0x3e58>
   14f4c:	mul	r1, r5, r4
   14f50:	mov	r7, #64	; 0x40
   14f54:	cmp	r1, #63	; 0x3f
   14f58:	bgt	14f64 <__assert_fail@plt+0x3e60>
   14f5c:	sdiv	r5, r7, r4
   14f60:	mul	r1, r5, r4
   14f64:	cmp	r0, #0
   14f68:	moveq	r7, #0
   14f6c:	streq	r7, [r8]
   14f70:	sub	r7, r5, r6
   14f74:	cmp	r7, r2
   14f78:	bge	1501c <__assert_fail@plt+0x3f18>
   14f7c:	add	r5, r6, r2
   14f80:	mov	r2, #0
   14f84:	mov	r1, #0
   14f88:	cmp	r5, r3
   14f8c:	movwgt	r2, #1
   14f90:	cmn	r3, #1
   14f94:	movwgt	r1, #1
   14f98:	cmp	r5, r6
   14f9c:	bvs	15004 <__assert_fail@plt+0x3f00>
   14fa0:	ands	r1, r1, r2
   14fa4:	bne	15004 <__assert_fail@plt+0x3f00>
   14fa8:	cmn	r4, #1
   14fac:	ble	14fcc <__assert_fail@plt+0x3ec8>
   14fb0:	cmp	r4, #0
   14fb4:	beq	15018 <__assert_fail@plt+0x3f14>
   14fb8:	cmn	r5, #1
   14fbc:	ble	14ff0 <__assert_fail@plt+0x3eec>
   14fc0:	mvn	r1, #-2147483648	; 0x80000000
   14fc4:	udiv	r1, r1, r4
   14fc8:	b	14fe4 <__assert_fail@plt+0x3ee0>
   14fcc:	cmn	r5, #1
   14fd0:	ble	15008 <__assert_fail@plt+0x3f04>
   14fd4:	cmn	r4, #1
   14fd8:	beq	15018 <__assert_fail@plt+0x3f14>
   14fdc:	mov	r1, #-2147483648	; 0x80000000
   14fe0:	sdiv	r1, r1, r4
   14fe4:	cmp	r1, r5
   14fe8:	bge	15018 <__assert_fail@plt+0x3f14>
   14fec:	b	15004 <__assert_fail@plt+0x3f00>
   14ff0:	beq	15018 <__assert_fail@plt+0x3f14>
   14ff4:	mov	r1, #-2147483648	; 0x80000000
   14ff8:	sdiv	r1, r1, r5
   14ffc:	cmp	r1, r4
   15000:	bge	15018 <__assert_fail@plt+0x3f14>
   15004:	bl	15190 <__assert_fail@plt+0x408c>
   15008:	mvn	r1, #-2147483648	; 0x80000000
   1500c:	sdiv	r1, r1, r4
   15010:	cmp	r5, r1
   15014:	blt	15004 <__assert_fail@plt+0x3f00>
   15018:	mul	r1, r5, r4
   1501c:	bl	14d88 <__assert_fail@plt+0x3c84>
   15020:	str	r5, [r8]
   15024:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15028:	push	{fp, lr}
   1502c:	mov	fp, sp
   15030:	mov	r1, #1
   15034:	bl	1598c <__assert_fail@plt+0x4888>
   15038:	cmp	r0, #0
   1503c:	popne	{fp, pc}
   15040:	bl	15190 <__assert_fail@plt+0x408c>
   15044:	push	{fp, lr}
   15048:	mov	fp, sp
   1504c:	bl	1598c <__assert_fail@plt+0x4888>
   15050:	cmp	r0, #0
   15054:	popne	{fp, pc}
   15058:	bl	15190 <__assert_fail@plt+0x408c>
   1505c:	push	{fp, lr}
   15060:	mov	fp, sp
   15064:	mov	r1, #1
   15068:	bl	1598c <__assert_fail@plt+0x4888>
   1506c:	cmp	r0, #0
   15070:	popne	{fp, pc}
   15074:	bl	15190 <__assert_fail@plt+0x408c>
   15078:	push	{fp, lr}
   1507c:	mov	fp, sp
   15080:	bl	1598c <__assert_fail@plt+0x4888>
   15084:	cmp	r0, #0
   15088:	popne	{fp, pc}
   1508c:	bl	15190 <__assert_fail@plt+0x408c>
   15090:	push	{r4, r5, r6, sl, fp, lr}
   15094:	add	fp, sp, #16
   15098:	mov	r5, r0
   1509c:	mov	r0, r1
   150a0:	mov	r4, r1
   150a4:	bl	159e0 <__assert_fail@plt+0x48dc>
   150a8:	cmp	r0, #0
   150ac:	beq	150c8 <__assert_fail@plt+0x3fc4>
   150b0:	mov	r1, r5
   150b4:	mov	r2, r4
   150b8:	mov	r6, r0
   150bc:	bl	10ef4 <memcpy@plt>
   150c0:	mov	r0, r6
   150c4:	pop	{r4, r5, r6, sl, fp, pc}
   150c8:	bl	15190 <__assert_fail@plt+0x408c>
   150cc:	push	{r4, r5, r6, sl, fp, lr}
   150d0:	add	fp, sp, #16
   150d4:	mov	r5, r0
   150d8:	mov	r0, r1
   150dc:	mov	r4, r1
   150e0:	bl	159e0 <__assert_fail@plt+0x48dc>
   150e4:	cmp	r0, #0
   150e8:	beq	15104 <__assert_fail@plt+0x4000>
   150ec:	mov	r1, r5
   150f0:	mov	r2, r4
   150f4:	mov	r6, r0
   150f8:	bl	10ef4 <memcpy@plt>
   150fc:	mov	r0, r6
   15100:	pop	{r4, r5, r6, sl, fp, pc}
   15104:	bl	15190 <__assert_fail@plt+0x408c>
   15108:	push	{r4, r5, r6, sl, fp, lr}
   1510c:	add	fp, sp, #16
   15110:	mov	r5, r0
   15114:	add	r0, r1, #1
   15118:	mov	r4, r1
   1511c:	bl	159e0 <__assert_fail@plt+0x48dc>
   15120:	cmp	r0, #0
   15124:	beq	1514c <__assert_fail@plt+0x4048>
   15128:	mov	r6, r0
   1512c:	mov	r0, #0
   15130:	mov	r1, r5
   15134:	mov	r2, r4
   15138:	strb	r0, [r6, r4]
   1513c:	mov	r0, r6
   15140:	bl	10ef4 <memcpy@plt>
   15144:	mov	r0, r6
   15148:	pop	{r4, r5, r6, sl, fp, pc}
   1514c:	bl	15190 <__assert_fail@plt+0x408c>
   15150:	push	{r4, r5, r6, sl, fp, lr}
   15154:	add	fp, sp, #16
   15158:	mov	r4, r0
   1515c:	bl	10ffc <strlen@plt>
   15160:	add	r5, r0, #1
   15164:	mov	r0, r5
   15168:	bl	159e0 <__assert_fail@plt+0x48dc>
   1516c:	cmp	r0, #0
   15170:	beq	1518c <__assert_fail@plt+0x4088>
   15174:	mov	r1, r4
   15178:	mov	r2, r5
   1517c:	mov	r6, r0
   15180:	bl	10ef4 <memcpy@plt>
   15184:	mov	r0, r6
   15188:	pop	{r4, r5, r6, sl, fp, pc}
   1518c:	bl	15190 <__assert_fail@plt+0x408c>
   15190:	push	{fp, lr}
   15194:	mov	fp, sp
   15198:	movw	r0, #28916	; 0x70f4
   1519c:	movw	r1, #27276	; 0x6a8c
   151a0:	mov	r2, #5
   151a4:	movt	r0, #2
   151a8:	movt	r1, #1
   151ac:	ldr	r4, [r0]
   151b0:	mov	r0, #0
   151b4:	bl	10f30 <dcgettext@plt>
   151b8:	movw	r2, #26239	; 0x667f
   151bc:	mov	r3, r0
   151c0:	mov	r0, r4
   151c4:	mov	r1, #0
   151c8:	movt	r2, #1
   151cc:	bl	10f9c <error@plt>
   151d0:	bl	110ec <abort@plt>
   151d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   151d8:	add	fp, sp, #24
   151dc:	sub	sp, sp, #16
   151e0:	mov	r8, r0
   151e4:	ldr	r0, [fp, #16]
   151e8:	mov	r5, r3
   151ec:	mov	r6, r2
   151f0:	mov	r2, r1
   151f4:	add	r3, sp, #8
   151f8:	mov	r1, #0
   151fc:	str	r0, [sp]
   15200:	mov	r0, r8
   15204:	bl	152d4 <__assert_fail@plt+0x41d0>
   15208:	cmp	r0, #0
   1520c:	bne	152a0 <__assert_fail@plt+0x419c>
   15210:	ldr	r4, [sp, #8]
   15214:	ldr	r7, [sp, #12]
   15218:	subs	r0, r4, r6
   1521c:	sbcs	r0, r7, r5
   15220:	bcc	15244 <__assert_fail@plt+0x4140>
   15224:	ldr	r1, [fp, #8]
   15228:	ldr	r0, [fp, #12]
   1522c:	subs	r1, r1, r4
   15230:	sbcs	r0, r0, r7
   15234:	movcs	r0, r4
   15238:	movcs	r1, r7
   1523c:	subcs	sp, fp, #24
   15240:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15244:	bl	11014 <__errno_location@plt>
   15248:	subs	r1, r4, #1073741824	; 0x40000000
   1524c:	sbcs	r1, r7, #0
   15250:	bcc	1525c <__assert_fail@plt+0x4158>
   15254:	mov	r1, #75	; 0x4b
   15258:	b	15260 <__assert_fail@plt+0x415c>
   1525c:	mov	r1, #34	; 0x22
   15260:	str	r1, [r0]
   15264:	ldr	r6, [r0]
   15268:	ldr	r4, [fp, #24]
   1526c:	ldr	r5, [fp, #20]
   15270:	mov	r0, r8
   15274:	bl	1474c <__assert_fail@plt+0x3648>
   15278:	subs	r1, r6, #22
   1527c:	movw	r2, #26235	; 0x667b
   15280:	str	r0, [sp]
   15284:	mov	r3, r5
   15288:	movne	r1, r6
   1528c:	cmp	r4, #0
   15290:	movt	r2, #1
   15294:	movweq	r4, #1
   15298:	mov	r0, r4
   1529c:	bl	10f9c <error@plt>
   152a0:	cmp	r0, #1
   152a4:	beq	152bc <__assert_fail@plt+0x41b8>
   152a8:	cmp	r0, #3
   152ac:	bne	152c4 <__assert_fail@plt+0x41c0>
   152b0:	bl	11014 <__errno_location@plt>
   152b4:	mov	r1, #0
   152b8:	b	15260 <__assert_fail@plt+0x415c>
   152bc:	bl	11014 <__errno_location@plt>
   152c0:	b	15254 <__assert_fail@plt+0x4150>
   152c4:	bl	11014 <__errno_location@plt>
   152c8:	b	15264 <__assert_fail@plt+0x4160>
   152cc:	mov	r1, #10
   152d0:	b	151d4 <__assert_fail@plt+0x40d0>
   152d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152d8:	add	fp, sp, #28
   152dc:	sub	sp, sp, #20
   152e0:	cmp	r2, #37	; 0x25
   152e4:	bcs	1596c <__assert_fail@plt+0x4868>
   152e8:	mov	r8, r3
   152ec:	mov	r5, r2
   152f0:	mov	r6, r1
   152f4:	mov	r4, r0
   152f8:	bl	11014 <__errno_location@plt>
   152fc:	mov	r7, r0
   15300:	mov	r0, #0
   15304:	str	r0, [r7]
   15308:	bl	10fe4 <__ctype_b_loc@plt>
   1530c:	ldr	r1, [r0]
   15310:	mov	r2, r4
   15314:	ldrb	r0, [r2], #1
   15318:	add	r3, r1, r0, lsl #1
   1531c:	ldrb	r3, [r3, #1]
   15320:	tst	r3, #32
   15324:	bne	15314 <__assert_fail@plt+0x4210>
   15328:	add	sl, sp, #16
   1532c:	cmp	r6, #0
   15330:	movne	sl, r6
   15334:	mov	r6, #4
   15338:	cmp	r0, #45	; 0x2d
   1533c:	beq	15960 <__assert_fail@plt+0x485c>
   15340:	mov	r0, r4
   15344:	mov	r1, sl
   15348:	mov	r2, r5
   1534c:	str	r8, [sp, #12]
   15350:	bl	11050 <strtoumax@plt>
   15354:	ldr	r5, [sl]
   15358:	cmp	r5, r4
   1535c:	beq	15384 <__assert_fail@plt+0x4280>
   15360:	mov	r8, r0
   15364:	ldr	r0, [r7]
   15368:	mov	r9, r1
   1536c:	cmp	r0, #0
   15370:	beq	153b4 <__assert_fail@plt+0x42b0>
   15374:	cmp	r0, #34	; 0x22
   15378:	bne	15960 <__assert_fail@plt+0x485c>
   1537c:	mov	r6, #1
   15380:	b	153b8 <__assert_fail@plt+0x42b4>
   15384:	ldr	r0, [fp, #8]
   15388:	cmp	r0, #0
   1538c:	ldrbne	r1, [r4]
   15390:	cmpne	r1, #0
   15394:	beq	15960 <__assert_fail@plt+0x485c>
   15398:	bl	11008 <strchr@plt>
   1539c:	cmp	r0, #0
   153a0:	beq	15960 <__assert_fail@plt+0x485c>
   153a4:	mov	r6, #0
   153a8:	mov	r8, #1
   153ac:	mov	r9, #0
   153b0:	b	153c4 <__assert_fail@plt+0x42c0>
   153b4:	mov	r6, r0
   153b8:	ldr	r0, [fp, #8]
   153bc:	cmp	r0, #0
   153c0:	beq	15958 <__assert_fail@plt+0x4854>
   153c4:	ldrb	r7, [r5]
   153c8:	cmp	r7, #0
   153cc:	beq	15958 <__assert_fail@plt+0x4854>
   153d0:	ldr	r0, [fp, #8]
   153d4:	mov	r1, r7
   153d8:	bl	11008 <strchr@plt>
   153dc:	cmp	r0, #0
   153e0:	beq	154e8 <__assert_fail@plt+0x43e4>
   153e4:	sub	r0, r7, #69	; 0x45
   153e8:	mov	r1, #1
   153ec:	mov	r3, #0
   153f0:	mov	r4, #1024	; 0x400
   153f4:	cmp	r0, #21
   153f8:	str	r1, [sp, #8]
   153fc:	bhi	15414 <__assert_fail@plt+0x4310>
   15400:	movw	r2, #35141	; 0x8945
   15404:	mov	r1, #1
   15408:	movt	r2, #48	; 0x30
   1540c:	tst	r2, r1, lsl r0
   15410:	bne	15430 <__assert_fail@plt+0x432c>
   15414:	sub	r0, r7, #103	; 0x67
   15418:	cmp	r0, #13
   1541c:	bhi	15464 <__assert_fail@plt+0x4360>
   15420:	mov	r1, #1
   15424:	movw	r2, #8273	; 0x2051
   15428:	tst	r2, r1, lsl r0
   1542c:	beq	15464 <__assert_fail@plt+0x4360>
   15430:	ldr	r0, [fp, #8]
   15434:	mov	r1, #48	; 0x30
   15438:	bl	11008 <strchr@plt>
   1543c:	cmp	r0, #0
   15440:	beq	15460 <__assert_fail@plt+0x435c>
   15444:	ldrb	r0, [r5, #1]
   15448:	cmp	r0, #66	; 0x42
   1544c:	cmpne	r0, #68	; 0x44
   15450:	bne	15578 <__assert_fail@plt+0x4474>
   15454:	mov	r4, #1000	; 0x3e8
   15458:	mov	r0, #2
   1545c:	str	r0, [sp, #8]
   15460:	mov	r3, #0
   15464:	cmp	r7, #89	; 0x59
   15468:	stm	sp, {r5, r6}
   1546c:	bgt	154f4 <__assert_fail@plt+0x43f0>
   15470:	sub	r0, r7, #66	; 0x42
   15474:	cmp	r0, #14
   15478:	bhi	1559c <__assert_fail@plt+0x4498>
   1547c:	add	r1, pc, #0
   15480:	ldr	pc, [r1, r0, lsl #2]
   15484:	andeq	r5, r1, r0, asr #9
   15488:	andeq	r5, r1, ip, asr #16
   1548c:	andeq	r5, r1, ip, asr #16
   15490:	andeq	r5, r1, r0, ror #16
   15494:	andeq	r5, r1, ip, asr #16
   15498:	andeq	r5, r1, r0, asr r6
   1549c:	andeq	r5, r1, ip, asr #16
   154a0:	andeq	r5, r1, ip, asr #16
   154a4:	andeq	r5, r1, ip, asr #16
   154a8:			; <UNDEFINED> instruction: 0x000156bc
   154ac:	andeq	r5, r1, ip, asr #16
   154b0:	andeq	r5, r1, r0, lsl #14
   154b4:	andeq	r5, r1, ip, asr #16
   154b8:	andeq	r5, r1, ip, asr #16
   154bc:	andeq	r5, r1, ip, asr #17
   154c0:	mov	r1, #0
   154c4:	lsl	r3, r9, #10
   154c8:	lsl	r0, r8, #10
   154cc:	lsr	r2, r9, #22
   154d0:	cmp	r1, r9, lsr #22
   154d4:	orr	r3, r3, r8, lsr #22
   154d8:	mvnne	r0, #0
   154dc:	movwne	r2, #1
   154e0:	cmp	r1, r9, lsr #22
   154e4:	b	15568 <__assert_fail@plt+0x4464>
   154e8:	ldr	r0, [sp, #12]
   154ec:	orr	r6, r6, #2
   154f0:	b	1595c <__assert_fail@plt+0x4858>
   154f4:	cmp	r7, #115	; 0x73
   154f8:	bgt	15618 <__assert_fail@plt+0x4514>
   154fc:	sub	r0, r7, #98	; 0x62
   15500:	cmp	r0, #11
   15504:	bhi	157d8 <__assert_fail@plt+0x46d4>
   15508:	add	r1, pc, #4
   1550c:	mov	r2, #0
   15510:	ldr	pc, [r1, r0, lsl #2]
   15514:	andeq	r5, r1, r4, asr #10
   15518:	andeq	r5, r1, r4, lsr r9
   1551c:	andeq	r5, r1, ip, asr #16
   15520:	andeq	r5, r1, ip, asr #16
   15524:	andeq	r5, r1, ip, asr #16
   15528:	andeq	r5, r1, r0, asr r6
   1552c:	andeq	r5, r1, ip, asr #16
   15530:	andeq	r5, r1, ip, asr #16
   15534:	andeq	r5, r1, ip, asr #16
   15538:			; <UNDEFINED> instruction: 0x000156bc
   1553c:	andeq	r5, r1, ip, asr #16
   15540:	andeq	r5, r1, r0, lsl #14
   15544:	mov	r1, #0
   15548:	lsl	r3, r9, #9
   1554c:	lsl	r0, r8, #9
   15550:	lsr	r2, r9, #23
   15554:	cmp	r1, r9, lsr #23
   15558:	orr	r3, r3, r8, lsr #23
   1555c:	mvnne	r0, #0
   15560:	movwne	r2, #1
   15564:	cmp	r1, r9, lsr #23
   15568:	mvnne	r3, #0
   1556c:	mov	r8, r0
   15570:	mov	r9, r3
   15574:	b	15934 <__assert_fail@plt+0x4830>
   15578:	cmp	r0, #105	; 0x69
   1557c:	mov	r3, #0
   15580:	bne	15464 <__assert_fail@plt+0x4360>
   15584:	ldrb	r0, [r5, #2]
   15588:	mov	r1, #1
   1558c:	cmp	r0, #66	; 0x42
   15590:	movweq	r1, #3
   15594:	str	r1, [sp, #8]
   15598:	b	15464 <__assert_fail@plt+0x4360>
   1559c:	cmp	r7, #84	; 0x54
   155a0:	beq	1576c <__assert_fail@plt+0x4668>
   155a4:	cmp	r7, #89	; 0x59
   155a8:	bne	1584c <__assert_fail@plt+0x4748>
   155ac:	mvn	r0, #0
   155b0:	mvn	r1, #0
   155b4:	mov	r2, r4
   155b8:	mov	r5, r3
   155bc:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   155c0:	mov	ip, r5
   155c4:	mvn	lr, #0
   155c8:	mov	r2, #0
   155cc:	mvn	r3, #7
   155d0:	mov	r5, r8
   155d4:	mov	r7, r9
   155d8:	umull	r8, r6, r5, r4
   155dc:	mvn	r9, #0
   155e0:	mla	r6, r5, ip, r6
   155e4:	subs	r5, r0, r5
   155e8:	sbcs	r5, r1, r7
   155ec:	mov	r5, #0
   155f0:	movwcc	r5, #1
   155f4:	cmp	r5, #0
   155f8:	mlaeq	r9, r7, r4, r6
   155fc:	movne	r8, lr
   15600:	orrne	r2, r2, #1
   15604:	adds	r3, r3, #1
   15608:	mov	r5, r8
   1560c:	mov	r7, r9
   15610:	bne	155d8 <__assert_fail@plt+0x44d4>
   15614:	b	15934 <__assert_fail@plt+0x4830>
   15618:	cmp	r7, #116	; 0x74
   1561c:	beq	1576c <__assert_fail@plt+0x4668>
   15620:	cmp	r7, #119	; 0x77
   15624:	bne	1584c <__assert_fail@plt+0x4748>
   15628:	lsl	r1, r9, #1
   1562c:	lsl	r0, r8, #1
   15630:	cmp	r9, #0
   15634:	lsr	r2, r9, #31
   15638:	orr	r1, r1, r8, lsr #31
   1563c:	mvnlt	r0, #0
   15640:	mvnlt	r1, #0
   15644:	mov	r8, r0
   15648:	mov	r9, r1
   1564c:	b	15934 <__assert_fail@plt+0x4830>
   15650:	mvn	r0, #0
   15654:	mvn	r1, #0
   15658:	mov	r2, r4
   1565c:	mov	r5, r3
   15660:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   15664:	mov	ip, r5
   15668:	mvn	lr, #0
   1566c:	mov	r2, #0
   15670:	mvn	r3, #2
   15674:	mov	r6, r8
   15678:	mov	r5, r9
   1567c:	umull	r8, r7, r6, r4
   15680:	mvn	r9, #0
   15684:	mla	r7, r6, ip, r7
   15688:	subs	r6, r0, r6
   1568c:	sbcs	r6, r1, r5
   15690:	mov	r6, #0
   15694:	movwcc	r6, #1
   15698:	cmp	r6, #0
   1569c:	mlaeq	r9, r5, r4, r7
   156a0:	movne	r8, lr
   156a4:	orrne	r2, r2, #1
   156a8:	adds	r3, r3, #1
   156ac:	mov	r6, r8
   156b0:	mov	r5, r9
   156b4:	bne	1567c <__assert_fail@plt+0x4578>
   156b8:	b	15934 <__assert_fail@plt+0x4830>
   156bc:	mvn	r0, #0
   156c0:	mvn	r1, #0
   156c4:	mov	r2, r4
   156c8:	mov	r5, r3
   156cc:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   156d0:	subs	r0, r0, r8
   156d4:	mov	r2, #0
   156d8:	sbcs	r0, r1, r9
   156dc:	movwcc	r2, #1
   156e0:	umull	r0, r1, r8, r4
   156e4:	mla	r1, r8, r5, r1
   156e8:	cmp	r2, #0
   156ec:	mla	r9, r9, r4, r1
   156f0:	mvnne	r0, #0
   156f4:	mvnne	r9, #0
   156f8:	mov	r8, r0
   156fc:	b	15934 <__assert_fail@plt+0x4830>
   15700:	mvn	r0, #0
   15704:	mvn	r1, #0
   15708:	mov	r2, r4
   1570c:	mov	r5, r3
   15710:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   15714:	mov	ip, r5
   15718:	mvn	lr, #0
   1571c:	mov	r2, #0
   15720:	mvn	r3, #1
   15724:	mov	r6, r8
   15728:	mov	r5, r9
   1572c:	umull	r8, r7, r6, r4
   15730:	mvn	r9, #0
   15734:	mla	r7, r6, ip, r7
   15738:	subs	r6, r0, r6
   1573c:	sbcs	r6, r1, r5
   15740:	mov	r6, #0
   15744:	movwcc	r6, #1
   15748:	cmp	r6, #0
   1574c:	mlaeq	r9, r5, r4, r7
   15750:	movne	r8, lr
   15754:	orrne	r2, r2, #1
   15758:	adds	r3, r3, #1
   1575c:	mov	r6, r8
   15760:	mov	r5, r9
   15764:	bne	1572c <__assert_fail@plt+0x4628>
   15768:	b	15934 <__assert_fail@plt+0x4830>
   1576c:	mvn	r0, #0
   15770:	mvn	r1, #0
   15774:	mov	r2, r4
   15778:	mov	r5, r3
   1577c:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   15780:	mov	ip, r5
   15784:	mvn	lr, #0
   15788:	mov	r2, #0
   1578c:	mvn	r3, #3
   15790:	mov	r6, r8
   15794:	mov	r5, r9
   15798:	umull	r8, r7, r6, r4
   1579c:	mvn	r9, #0
   157a0:	mla	r7, r6, ip, r7
   157a4:	subs	r6, r0, r6
   157a8:	sbcs	r6, r1, r5
   157ac:	mov	r6, #0
   157b0:	movwcc	r6, #1
   157b4:	cmp	r6, #0
   157b8:	mlaeq	r9, r5, r4, r7
   157bc:	movne	r8, lr
   157c0:	orrne	r2, r2, #1
   157c4:	adds	r3, r3, #1
   157c8:	mov	r6, r8
   157cc:	mov	r5, r9
   157d0:	bne	15798 <__assert_fail@plt+0x4694>
   157d4:	b	15934 <__assert_fail@plt+0x4830>
   157d8:	cmp	r7, #90	; 0x5a
   157dc:	bne	1584c <__assert_fail@plt+0x4748>
   157e0:	mvn	r0, #0
   157e4:	mvn	r1, #0
   157e8:	mov	r2, r4
   157ec:	mov	r5, r3
   157f0:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   157f4:	mov	ip, r5
   157f8:	mvn	lr, #0
   157fc:	mov	r2, #0
   15800:	mvn	r3, #6
   15804:	mov	r5, r8
   15808:	mov	r7, r9
   1580c:	umull	r8, r6, r5, r4
   15810:	mvn	r9, #0
   15814:	mla	r6, r5, ip, r6
   15818:	subs	r5, r0, r5
   1581c:	sbcs	r5, r1, r7
   15820:	mov	r5, #0
   15824:	movwcc	r5, #1
   15828:	cmp	r5, #0
   1582c:	mlaeq	r9, r7, r4, r6
   15830:	movne	r8, lr
   15834:	orrne	r2, r2, #1
   15838:	adds	r3, r3, #1
   1583c:	mov	r5, r8
   15840:	mov	r7, r9
   15844:	bne	1580c <__assert_fail@plt+0x4708>
   15848:	b	15934 <__assert_fail@plt+0x4830>
   1584c:	ldr	r0, [sp, #12]
   15850:	strd	r8, [r0]
   15854:	ldr	r6, [sp, #4]
   15858:	orr	r6, r6, #2
   1585c:	b	15960 <__assert_fail@plt+0x485c>
   15860:	mvn	r0, #0
   15864:	mvn	r1, #0
   15868:	mov	r2, r4
   1586c:	mov	r5, r3
   15870:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   15874:	mov	ip, r5
   15878:	mvn	lr, #0
   1587c:	mov	r2, #0
   15880:	mvn	r3, #5
   15884:	mov	r5, r8
   15888:	mov	r7, r9
   1588c:	umull	r8, r6, r5, r4
   15890:	mvn	r9, #0
   15894:	mla	r6, r5, ip, r6
   15898:	subs	r5, r0, r5
   1589c:	sbcs	r5, r1, r7
   158a0:	mov	r5, #0
   158a4:	movwcc	r5, #1
   158a8:	cmp	r5, #0
   158ac:	mlaeq	r9, r7, r4, r6
   158b0:	movne	r8, lr
   158b4:	orrne	r2, r2, #1
   158b8:	adds	r3, r3, #1
   158bc:	mov	r5, r8
   158c0:	mov	r7, r9
   158c4:	bne	1588c <__assert_fail@plt+0x4788>
   158c8:	b	15934 <__assert_fail@plt+0x4830>
   158cc:	mvn	r0, #0
   158d0:	mvn	r1, #0
   158d4:	mov	r2, r4
   158d8:	mov	r5, r3
   158dc:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   158e0:	mov	ip, r5
   158e4:	mvn	lr, #0
   158e8:	mov	r2, #0
   158ec:	mvn	r3, #4
   158f0:	mov	r5, r8
   158f4:	mov	r7, r9
   158f8:	umull	r8, r6, r5, r4
   158fc:	mvn	r9, #0
   15900:	mla	r6, r5, ip, r6
   15904:	subs	r5, r0, r5
   15908:	sbcs	r5, r1, r7
   1590c:	mov	r5, #0
   15910:	movwcc	r5, #1
   15914:	cmp	r5, #0
   15918:	mlaeq	r9, r7, r4, r6
   1591c:	movne	r8, lr
   15920:	orrne	r2, r2, #1
   15924:	adds	r3, r3, #1
   15928:	mov	r5, r8
   1592c:	mov	r7, r9
   15930:	bne	158f8 <__assert_fail@plt+0x47f4>
   15934:	ldr	r1, [sp]
   15938:	ldr	r3, [sp, #8]
   1593c:	ldr	r6, [sp, #4]
   15940:	add	r0, r1, r3
   15944:	orr	r6, r2, r6
   15948:	str	r0, [sl]
   1594c:	ldrb	r0, [r1, r3]
   15950:	cmp	r0, #0
   15954:	orrne	r6, r6, #2
   15958:	ldr	r0, [sp, #12]
   1595c:	strd	r8, [r0]
   15960:	mov	r0, r6
   15964:	sub	sp, fp, #28
   15968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1596c:	movw	r0, #27293	; 0x6a9d
   15970:	movw	r1, #27331	; 0x6ac3
   15974:	movw	r3, #27347	; 0x6ad3
   15978:	mov	r2, #85	; 0x55
   1597c:	movt	r0, #1
   15980:	movt	r1, #1
   15984:	movt	r3, #1
   15988:	bl	11104 <__assert_fail@plt>
   1598c:	clz	r2, r1
   15990:	clz	r3, r0
   15994:	lsr	r2, r2, #5
   15998:	lsr	r3, r3, #5
   1599c:	orrs	r2, r3, r2
   159a0:	movwne	r1, #1
   159a4:	movwne	r0, #1
   159a8:	cmp	r1, #0
   159ac:	beq	159dc <__assert_fail@plt+0x48d8>
   159b0:	mvn	r2, #-2147483648	; 0x80000000
   159b4:	udiv	r2, r2, r1
   159b8:	cmp	r2, r0
   159bc:	bcs	159dc <__assert_fail@plt+0x48d8>
   159c0:	push	{fp, lr}
   159c4:	mov	fp, sp
   159c8:	bl	11014 <__errno_location@plt>
   159cc:	mov	r1, #12
   159d0:	str	r1, [r0]
   159d4:	mov	r0, #0
   159d8:	pop	{fp, pc}
   159dc:	b	10e88 <calloc@plt>
   159e0:	cmp	r0, #0
   159e4:	movweq	r0, #1
   159e8:	cmn	r0, #1
   159ec:	ble	159f4 <__assert_fail@plt+0x48f0>
   159f0:	b	10fa8 <malloc@plt>
   159f4:	push	{fp, lr}
   159f8:	mov	fp, sp
   159fc:	bl	11014 <__errno_location@plt>
   15a00:	mov	r1, #12
   15a04:	str	r1, [r0]
   15a08:	mov	r0, #0
   15a0c:	pop	{fp, pc}
   15a10:	push	{fp, lr}
   15a14:	mov	fp, sp
   15a18:	cmp	r0, #0
   15a1c:	beq	15a38 <__assert_fail@plt+0x4934>
   15a20:	cmp	r1, #0
   15a24:	beq	15a44 <__assert_fail@plt+0x4940>
   15a28:	cmn	r1, #1
   15a2c:	ble	15a4c <__assert_fail@plt+0x4948>
   15a30:	pop	{fp, lr}
   15a34:	b	10f3c <realloc@plt>
   15a38:	mov	r0, r1
   15a3c:	pop	{fp, lr}
   15a40:	b	159e0 <__assert_fail@plt+0x48dc>
   15a44:	bl	15ae0 <__assert_fail@plt+0x49dc>
   15a48:	b	15a58 <__assert_fail@plt+0x4954>
   15a4c:	bl	11014 <__errno_location@plt>
   15a50:	mov	r1, #12
   15a54:	str	r1, [r0]
   15a58:	mov	r0, #0
   15a5c:	pop	{fp, pc}
   15a60:	push	{r4, r5, r6, sl, fp, lr}
   15a64:	add	fp, sp, #16
   15a68:	mov	r4, r0
   15a6c:	bl	10f78 <__fpending@plt>
   15a70:	mov	r5, r0
   15a74:	mov	r0, r4
   15a78:	bl	10f84 <ferror_unlocked@plt>
   15a7c:	mov	r6, r0
   15a80:	mov	r0, r4
   15a84:	bl	12bac <__assert_fail@plt+0x1aa8>
   15a88:	cmp	r6, #0
   15a8c:	beq	15aac <__assert_fail@plt+0x49a8>
   15a90:	mvn	r4, #0
   15a94:	cmp	r0, #0
   15a98:	bne	15ad8 <__assert_fail@plt+0x49d4>
   15a9c:	bl	11014 <__errno_location@plt>
   15aa0:	mov	r1, #0
   15aa4:	str	r1, [r0]
   15aa8:	b	15ad8 <__assert_fail@plt+0x49d4>
   15aac:	cmp	r0, #0
   15ab0:	mov	r4, r0
   15ab4:	mvnne	r4, #0
   15ab8:	cmp	r5, #0
   15abc:	bne	15ad8 <__assert_fail@plt+0x49d4>
   15ac0:	cmp	r0, #0
   15ac4:	beq	15ad8 <__assert_fail@plt+0x49d4>
   15ac8:	bl	11014 <__errno_location@plt>
   15acc:	ldr	r0, [r0]
   15ad0:	subs	r4, r0, #9
   15ad4:	mvnne	r4, #0
   15ad8:	mov	r0, r4
   15adc:	pop	{r4, r5, r6, sl, fp, pc}
   15ae0:	push	{r4, r5, r6, sl, fp, lr}
   15ae4:	add	fp, sp, #16
   15ae8:	mov	r4, r0
   15aec:	bl	11014 <__errno_location@plt>
   15af0:	ldr	r6, [r0]
   15af4:	mov	r5, r0
   15af8:	mov	r0, r4
   15afc:	bl	10edc <free@plt>
   15b00:	str	r6, [r5]
   15b04:	pop	{r4, r5, r6, sl, fp, pc}
   15b08:	push	{fp, lr}
   15b0c:	mov	fp, sp
   15b10:	mov	r0, #14
   15b14:	bl	110a4 <nl_langinfo@plt>
   15b18:	movw	r1, #25825	; 0x64e1
   15b1c:	cmp	r0, #0
   15b20:	movt	r1, #1
   15b24:	movne	r1, r0
   15b28:	movw	r0, #27426	; 0x6b22
   15b2c:	ldrb	r2, [r1]
   15b30:	movt	r0, #1
   15b34:	cmp	r2, #0
   15b38:	movne	r0, r1
   15b3c:	pop	{fp, pc}
   15b40:	push	{r4, r5, r6, r7, fp, lr}
   15b44:	add	fp, sp, #16
   15b48:	sub	sp, sp, #8
   15b4c:	add	r5, sp, #4
   15b50:	cmp	r0, #0
   15b54:	mov	r7, r2
   15b58:	mov	r4, r1
   15b5c:	movne	r5, r0
   15b60:	mov	r0, r5
   15b64:	bl	10f90 <mbrtowc@plt>
   15b68:	mov	r6, r0
   15b6c:	cmp	r7, #0
   15b70:	beq	15b94 <__assert_fail@plt+0x4a90>
   15b74:	cmn	r6, #2
   15b78:	bcc	15b94 <__assert_fail@plt+0x4a90>
   15b7c:	mov	r0, #0
   15b80:	bl	15bdc <__assert_fail@plt+0x4ad8>
   15b84:	cmp	r0, #0
   15b88:	ldrbeq	r0, [r4]
   15b8c:	moveq	r6, #1
   15b90:	streq	r0, [r5]
   15b94:	mov	r0, r6
   15b98:	sub	sp, fp, #16
   15b9c:	pop	{r4, r5, r6, r7, fp, pc}
   15ba0:	cmp	r2, #0
   15ba4:	beq	15bd4 <__assert_fail@plt+0x4ad0>
   15ba8:	mvn	r3, #0
   15bac:	udiv	r3, r3, r2
   15bb0:	cmp	r3, r1
   15bb4:	bcs	15bd4 <__assert_fail@plt+0x4ad0>
   15bb8:	push	{fp, lr}
   15bbc:	mov	fp, sp
   15bc0:	bl	11014 <__errno_location@plt>
   15bc4:	mov	r1, #12
   15bc8:	str	r1, [r0]
   15bcc:	mov	r0, #0
   15bd0:	pop	{fp, pc}
   15bd4:	mul	r1, r2, r1
   15bd8:	b	15a10 <__assert_fail@plt+0x490c>
   15bdc:	push	{r4, sl, fp, lr}
   15be0:	add	fp, sp, #8
   15be4:	sub	sp, sp, #264	; 0x108
   15be8:	add	r1, sp, #7
   15bec:	movw	r2, #257	; 0x101
   15bf0:	bl	15c40 <__assert_fail@plt+0x4b3c>
   15bf4:	mov	r4, #0
   15bf8:	cmp	r0, #0
   15bfc:	bne	15c34 <__assert_fail@plt+0x4b30>
   15c00:	movw	r1, #27432	; 0x6b28
   15c04:	add	r0, sp, #7
   15c08:	movt	r1, #1
   15c0c:	bl	10eac <strcmp@plt>
   15c10:	cmp	r0, #0
   15c14:	beq	15c34 <__assert_fail@plt+0x4b30>
   15c18:	movw	r1, #27434	; 0x6b2a
   15c1c:	add	r0, sp, #7
   15c20:	movt	r1, #1
   15c24:	bl	10eac <strcmp@plt>
   15c28:	mov	r4, r0
   15c2c:	cmp	r0, #0
   15c30:	movwne	r4, #1
   15c34:	mov	r0, r4
   15c38:	sub	sp, fp, #8
   15c3c:	pop	{r4, sl, fp, pc}
   15c40:	push	{r4, r5, r6, r7, fp, lr}
   15c44:	add	fp, sp, #16
   15c48:	mov	r4, r1
   15c4c:	mov	r1, #0
   15c50:	mov	r6, r2
   15c54:	bl	1108c <setlocale@plt>
   15c58:	cmp	r0, #0
   15c5c:	beq	15c88 <__assert_fail@plt+0x4b84>
   15c60:	mov	r7, r0
   15c64:	bl	10ffc <strlen@plt>
   15c68:	cmp	r0, r6
   15c6c:	bcs	15c9c <__assert_fail@plt+0x4b98>
   15c70:	add	r2, r0, #1
   15c74:	mov	r0, r4
   15c78:	mov	r1, r7
   15c7c:	bl	10ef4 <memcpy@plt>
   15c80:	mov	r5, #0
   15c84:	b	15cc4 <__assert_fail@plt+0x4bc0>
   15c88:	cmp	r6, #0
   15c8c:	mov	r5, #22
   15c90:	movne	r0, #0
   15c94:	strbne	r0, [r4]
   15c98:	b	15cc4 <__assert_fail@plt+0x4bc0>
   15c9c:	mov	r5, #34	; 0x22
   15ca0:	cmp	r6, #0
   15ca4:	beq	15cc4 <__assert_fail@plt+0x4bc0>
   15ca8:	sub	r6, r6, #1
   15cac:	mov	r0, r4
   15cb0:	mov	r1, r7
   15cb4:	mov	r2, r6
   15cb8:	bl	10ef4 <memcpy@plt>
   15cbc:	mov	r0, #0
   15cc0:	strb	r0, [r4, r6]
   15cc4:	mov	r0, r5
   15cc8:	pop	{r4, r5, r6, r7, fp, pc}
   15ccc:	mov	r1, #0
   15cd0:	b	1108c <setlocale@plt>
   15cd4:	cmp	r3, #0
   15cd8:	cmpeq	r2, #0
   15cdc:	bne	15cf4 <__assert_fail@plt+0x4bf0>
   15ce0:	cmp	r1, #0
   15ce4:	cmpeq	r0, #0
   15ce8:	mvnne	r1, #0
   15cec:	mvnne	r0, #0
   15cf0:	b	15d10 <__assert_fail@plt+0x4c0c>
   15cf4:	sub	sp, sp, #8
   15cf8:	push	{sp, lr}
   15cfc:	bl	15d20 <__assert_fail@plt+0x4c1c>
   15d00:	ldr	lr, [sp, #4]
   15d04:	add	sp, sp, #8
   15d08:	pop	{r2, r3}
   15d0c:	bx	lr
   15d10:	push	{r1, lr}
   15d14:	mov	r0, #8
   15d18:	bl	10ea0 <raise@plt>
   15d1c:	pop	{r1, pc}
   15d20:	cmp	r1, r3
   15d24:	cmpeq	r0, r2
   15d28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d2c:	mov	r4, r0
   15d30:	movcc	r0, #0
   15d34:	mov	r5, r1
   15d38:	ldr	lr, [sp, #36]	; 0x24
   15d3c:	movcc	r1, r0
   15d40:	bcc	15e3c <__assert_fail@plt+0x4d38>
   15d44:	cmp	r3, #0
   15d48:	clzeq	ip, r2
   15d4c:	clzne	ip, r3
   15d50:	addeq	ip, ip, #32
   15d54:	cmp	r5, #0
   15d58:	clzeq	r1, r4
   15d5c:	addeq	r1, r1, #32
   15d60:	clzne	r1, r5
   15d64:	sub	ip, ip, r1
   15d68:	sub	sl, ip, #32
   15d6c:	lsl	r9, r3, ip
   15d70:	rsb	fp, ip, #32
   15d74:	orr	r9, r9, r2, lsl sl
   15d78:	orr	r9, r9, r2, lsr fp
   15d7c:	lsl	r8, r2, ip
   15d80:	cmp	r5, r9
   15d84:	cmpeq	r4, r8
   15d88:	movcc	r0, #0
   15d8c:	movcc	r1, r0
   15d90:	bcc	15dac <__assert_fail@plt+0x4ca8>
   15d94:	mov	r0, #1
   15d98:	subs	r4, r4, r8
   15d9c:	lsl	r1, r0, sl
   15da0:	orr	r1, r1, r0, lsr fp
   15da4:	lsl	r0, r0, ip
   15da8:	sbc	r5, r5, r9
   15dac:	cmp	ip, #0
   15db0:	beq	15e3c <__assert_fail@plt+0x4d38>
   15db4:	lsr	r6, r8, #1
   15db8:	orr	r6, r6, r9, lsl #31
   15dbc:	lsr	r7, r9, #1
   15dc0:	mov	r2, ip
   15dc4:	b	15de8 <__assert_fail@plt+0x4ce4>
   15dc8:	subs	r3, r4, r6
   15dcc:	sbc	r8, r5, r7
   15dd0:	adds	r3, r3, r3
   15dd4:	adc	r8, r8, r8
   15dd8:	adds	r4, r3, #1
   15ddc:	adc	r5, r8, #0
   15de0:	subs	r2, r2, #1
   15de4:	beq	15e04 <__assert_fail@plt+0x4d00>
   15de8:	cmp	r5, r7
   15dec:	cmpeq	r4, r6
   15df0:	bcs	15dc8 <__assert_fail@plt+0x4cc4>
   15df4:	adds	r4, r4, r4
   15df8:	adc	r5, r5, r5
   15dfc:	subs	r2, r2, #1
   15e00:	bne	15de8 <__assert_fail@plt+0x4ce4>
   15e04:	lsr	r3, r4, ip
   15e08:	orr	r3, r3, r5, lsl fp
   15e0c:	lsr	r2, r5, ip
   15e10:	orr	r3, r3, r5, lsr sl
   15e14:	adds	r0, r0, r4
   15e18:	mov	r4, r3
   15e1c:	lsl	r3, r2, ip
   15e20:	orr	r3, r3, r4, lsl sl
   15e24:	lsl	ip, r4, ip
   15e28:	orr	r3, r3, r4, lsr fp
   15e2c:	adc	r1, r1, r5
   15e30:	subs	r0, r0, ip
   15e34:	mov	r5, r2
   15e38:	sbc	r1, r1, r3
   15e3c:	cmp	lr, #0
   15e40:	strdne	r4, [lr]
   15e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e4c:	mov	r7, r0
   15e50:	ldr	r6, [pc, #72]	; 15ea0 <__assert_fail@plt+0x4d9c>
   15e54:	ldr	r5, [pc, #72]	; 15ea4 <__assert_fail@plt+0x4da0>
   15e58:	add	r6, pc, r6
   15e5c:	add	r5, pc, r5
   15e60:	sub	r6, r6, r5
   15e64:	mov	r8, r1
   15e68:	mov	r9, r2
   15e6c:	bl	10e68 <calloc@plt-0x20>
   15e70:	asrs	r6, r6, #2
   15e74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e78:	mov	r4, #0
   15e7c:	add	r4, r4, #1
   15e80:	ldr	r3, [r5], #4
   15e84:	mov	r2, r9
   15e88:	mov	r1, r8
   15e8c:	mov	r0, r7
   15e90:	blx	r3
   15e94:	cmp	r6, r4
   15e98:	bne	15e7c <__assert_fail@plt+0x4d78>
   15e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ea0:	andeq	r1, r1, ip, lsr #1
   15ea4:	andeq	r1, r1, r4, lsr #1
   15ea8:	bx	lr
   15eac:	ldr	r3, [pc, #12]	; 15ec0 <__assert_fail@plt+0x4dbc>
   15eb0:	mov	r1, #0
   15eb4:	add	r3, pc, r3
   15eb8:	ldr	r2, [r3]
   15ebc:	b	11020 <__cxa_atexit@plt>
   15ec0:	andeq	r1, r1, r0, lsr r2

Disassembly of section .fini:

00015ec4 <.fini>:
   15ec4:	push	{r3, lr}
   15ec8:	pop	{r3, pc}
