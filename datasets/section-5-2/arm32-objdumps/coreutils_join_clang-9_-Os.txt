
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00011094 <.init>:
   11094:	push	{r3, lr}
   11098:	bl	113cc <__assert_fail@plt+0x48>
   1109c:	pop	{r3, pc}

Disassembly of section .plt:

000110a0 <fdopen@plt-0x14>:
   110a0:	push	{lr}		; (str lr, [sp, #-4]!)
   110a4:	ldr	lr, [pc, #4]	; 110b0 <fdopen@plt-0x4>
   110a8:	add	lr, pc, lr
   110ac:	ldr	pc, [lr, #8]!
   110b0:	andeq	r7, r1, r0, asr pc

000110b4 <fdopen@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #3920]!	; 0xf50

000110c0 <calloc@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #94208	; 0x17000
   110c8:	ldr	pc, [ip, #3912]!	; 0xf48

000110cc <fputs_unlocked@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #94208	; 0x17000
   110d4:	ldr	pc, [ip, #3904]!	; 0xf40

000110d8 <raise@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #94208	; 0x17000
   110e0:	ldr	pc, [ip, #3896]!	; 0xf38

000110e4 <strcmp@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #94208	; 0x17000
   110ec:	ldr	pc, [ip, #3888]!	; 0xf30

000110f0 <posix_fadvise64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #94208	; 0x17000
   110f8:	ldr	pc, [ip, #3880]!	; 0xf28

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #94208	; 0x17000
   11104:	ldr	pc, [ip, #3872]!	; 0xf20

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #94208	; 0x17000
   11110:	ldr	pc, [ip, #3864]!	; 0xf18

00011114 <_exit@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #94208	; 0x17000
   1111c:	ldr	pc, [ip, #3856]!	; 0xf10

00011120 <memcpy@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #94208	; 0x17000
   11128:	ldr	pc, [ip, #3848]!	; 0xf08

0001112c <mbsinit@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #94208	; 0x17000
   11134:	ldr	pc, [ip, #3840]!	; 0xf00

00011138 <fwrite_unlocked@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #94208	; 0x17000
   11140:	ldr	pc, [ip, #3832]!	; 0xef8

00011144 <memcmp@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #94208	; 0x17000
   1114c:	ldr	pc, [ip, #3824]!	; 0xef0

00011150 <getc_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #94208	; 0x17000
   11158:	ldr	pc, [ip, #3816]!	; 0xee8

0001115c <dcgettext@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #94208	; 0x17000
   11164:	ldr	pc, [ip, #3808]!	; 0xee0

00011168 <realloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #94208	; 0x17000
   11170:	ldr	pc, [ip, #3800]!	; 0xed8

00011174 <textdomain@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #94208	; 0x17000
   1117c:	ldr	pc, [ip, #3792]!	; 0xed0

00011180 <iswprint@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #94208	; 0x17000
   11188:	ldr	pc, [ip, #3784]!	; 0xec8

0001118c <lseek64@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #94208	; 0x17000
   11194:	ldr	pc, [ip, #3776]!	; 0xec0

00011198 <__ctype_get_mb_cur_max@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #94208	; 0x17000
   111a0:	ldr	pc, [ip, #3768]!	; 0xeb8

000111a4 <__fpending@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #94208	; 0x17000
   111ac:	ldr	pc, [ip, #3760]!	; 0xeb0

000111b0 <ferror_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #94208	; 0x17000
   111b8:	ldr	pc, [ip, #3752]!	; 0xea8

000111bc <mbrtowc@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #94208	; 0x17000
   111c4:	ldr	pc, [ip, #3744]!	; 0xea0

000111c8 <error@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #94208	; 0x17000
   111d0:	ldr	pc, [ip, #3736]!	; 0xe98

000111d4 <strcoll@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #94208	; 0x17000
   111dc:	ldr	pc, [ip, #3728]!	; 0xe90

000111e0 <malloc@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #94208	; 0x17000
   111e8:	ldr	pc, [ip, #3720]!	; 0xe88

000111ec <__libc_start_main@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #94208	; 0x17000
   111f4:	ldr	pc, [ip, #3712]!	; 0xe80

000111f8 <__freading@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #94208	; 0x17000
   11200:	ldr	pc, [ip, #3704]!	; 0xe78

00011204 <__ctype_toupper_loc@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #94208	; 0x17000
   1120c:	ldr	pc, [ip, #3696]!	; 0xe70

00011210 <__gmon_start__@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #94208	; 0x17000
   11218:	ldr	pc, [ip, #3688]!	; 0xe68

0001121c <getopt_long@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #94208	; 0x17000
   11224:	ldr	pc, [ip, #3680]!	; 0xe60

00011228 <__ctype_b_loc@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #94208	; 0x17000
   11230:	ldr	pc, [ip, #3672]!	; 0xe58

00011234 <exit@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #94208	; 0x17000
   1123c:	ldr	pc, [ip, #3664]!	; 0xe50

00011240 <bcmp@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #94208	; 0x17000
   11248:	ldr	pc, [ip, #3656]!	; 0xe48

0001124c <strtoul@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #94208	; 0x17000
   11254:	ldr	pc, [ip, #3648]!	; 0xe40

00011258 <strlen@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #94208	; 0x17000
   11260:	ldr	pc, [ip, #3640]!	; 0xe38

00011264 <strchr@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #94208	; 0x17000
   1126c:	ldr	pc, [ip, #3632]!	; 0xe30

00011270 <__errno_location@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #94208	; 0x17000
   11278:	ldr	pc, [ip, #3624]!	; 0xe28

0001127c <__cxa_atexit@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #94208	; 0x17000
   11284:	ldr	pc, [ip, #3616]!	; 0xe20

00011288 <memset@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #94208	; 0x17000
   11290:	ldr	pc, [ip, #3608]!	; 0xe18

00011294 <__printf_chk@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #94208	; 0x17000
   1129c:	ldr	pc, [ip, #3600]!	; 0xe10

000112a0 <fileno@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #94208	; 0x17000
   112a8:	ldr	pc, [ip, #3592]!	; 0xe08

000112ac <strtoumax@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #94208	; 0x17000
   112b4:	ldr	pc, [ip, #3584]!	; 0xe00

000112b8 <__fprintf_chk@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #94208	; 0x17000
   112c0:	ldr	pc, [ip, #3576]!	; 0xdf8

000112c4 <memchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #94208	; 0x17000
   112cc:	ldr	pc, [ip, #3568]!	; 0xdf0

000112d0 <fclose@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #94208	; 0x17000
   112d8:	ldr	pc, [ip, #3560]!	; 0xde8

000112dc <fseeko64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #94208	; 0x17000
   112e4:	ldr	pc, [ip, #3552]!	; 0xde0

000112e8 <fcntl64@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #94208	; 0x17000
   112f0:	ldr	pc, [ip, #3544]!	; 0xdd8

000112f4 <setlocale@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #94208	; 0x17000
   112fc:	ldr	pc, [ip, #3536]!	; 0xdd0

00011300 <strrchr@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #94208	; 0x17000
   11308:	ldr	pc, [ip, #3528]!	; 0xdc8

0001130c <nl_langinfo@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #94208	; 0x17000
   11314:	ldr	pc, [ip, #3520]!	; 0xdc0

00011318 <fopen64@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #94208	; 0x17000
   11320:	ldr	pc, [ip, #3512]!	; 0xdb8

00011324 <strpbrk@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #94208	; 0x17000
   1132c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011330 <bindtextdomain@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #94208	; 0x17000
   11338:	ldr	pc, [ip, #3496]!	; 0xda8

0001133c <fputs@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #94208	; 0x17000
   11344:	ldr	pc, [ip, #3488]!	; 0xda0

00011348 <strncmp@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #94208	; 0x17000
   11350:	ldr	pc, [ip, #3480]!	; 0xd98

00011354 <abort@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #94208	; 0x17000
   1135c:	ldr	pc, [ip, #3472]!	; 0xd90

00011360 <feof_unlocked@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #94208	; 0x17000
   11368:	ldr	pc, [ip, #3464]!	; 0xd88

0001136c <close@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #94208	; 0x17000
   11374:	ldr	pc, [ip, #3456]!	; 0xd80

00011378 <putchar_unlocked@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #94208	; 0x17000
   11380:	ldr	pc, [ip, #3448]!	; 0xd78

00011384 <__assert_fail@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #94208	; 0x17000
   1138c:	ldr	pc, [ip, #3440]!	; 0xd70

Disassembly of section .text:

00011390 <.text>:
   11390:	mov	fp, #0
   11394:	mov	lr, #0
   11398:	pop	{r1}		; (ldr r1, [sp], #4)
   1139c:	mov	r2, sp
   113a0:	push	{r2}		; (str r2, [sp, #-4]!)
   113a4:	push	{r0}		; (str r0, [sp, #-4]!)
   113a8:	ldr	ip, [pc, #16]	; 113c0 <__assert_fail@plt+0x3c>
   113ac:	push	{ip}		; (str ip, [sp, #-4]!)
   113b0:	ldr	r0, [pc, #12]	; 113c4 <__assert_fail@plt+0x40>
   113b4:	ldr	r3, [pc, #12]	; 113c8 <__assert_fail@plt+0x44>
   113b8:	bl	111ec <__libc_start_main@plt>
   113bc:	bl	11354 <abort@plt>
   113c0:	ldrdeq	r7, [r1], -r0
   113c4:	andeq	r1, r1, ip, asr #14
   113c8:	andeq	r7, r1, r0, ror r0
   113cc:	ldr	r3, [pc, #20]	; 113e8 <__assert_fail@plt+0x64>
   113d0:	ldr	r2, [pc, #20]	; 113ec <__assert_fail@plt+0x68>
   113d4:	add	r3, pc, r3
   113d8:	ldr	r2, [r3, r2]
   113dc:	cmp	r2, #0
   113e0:	bxeq	lr
   113e4:	b	11210 <__gmon_start__@plt>
   113e8:	andeq	r7, r1, r4, lsr #24
   113ec:	andeq	r0, r0, r0, lsl #2
   113f0:	ldr	r0, [pc, #24]	; 11410 <__assert_fail@plt+0x8c>
   113f4:	ldr	r3, [pc, #24]	; 11414 <__assert_fail@plt+0x90>
   113f8:	cmp	r3, r0
   113fc:	bxeq	lr
   11400:	ldr	r3, [pc, #16]	; 11418 <__assert_fail@plt+0x94>
   11404:	cmp	r3, #0
   11408:	bxeq	lr
   1140c:	bx	r3
   11410:	andeq	r9, r2, r8, ror #2
   11414:	andeq	r9, r2, r8, ror #2
   11418:	andeq	r0, r0, r0
   1141c:	ldr	r0, [pc, #36]	; 11448 <__assert_fail@plt+0xc4>
   11420:	ldr	r1, [pc, #36]	; 1144c <__assert_fail@plt+0xc8>
   11424:	sub	r1, r1, r0
   11428:	asr	r1, r1, #2
   1142c:	add	r1, r1, r1, lsr #31
   11430:	asrs	r1, r1, #1
   11434:	bxeq	lr
   11438:	ldr	r3, [pc, #16]	; 11450 <__assert_fail@plt+0xcc>
   1143c:	cmp	r3, #0
   11440:	bxeq	lr
   11444:	bx	r3
   11448:	andeq	r9, r2, r8, ror #2
   1144c:	andeq	r9, r2, r8, ror #2
   11450:	andeq	r0, r0, r0
   11454:	push	{r4, lr}
   11458:	ldr	r4, [pc, #24]	; 11478 <__assert_fail@plt+0xf4>
   1145c:	ldrb	r3, [r4]
   11460:	cmp	r3, #0
   11464:	popne	{r4, pc}
   11468:	bl	113f0 <__assert_fail@plt+0x6c>
   1146c:	mov	r3, #1
   11470:	strb	r3, [r4]
   11474:	pop	{r4, pc}
   11478:	andeq	r9, r2, ip, lsl #3
   1147c:	b	1141c <__assert_fail@plt+0x98>
   11480:	push	{fp, lr}
   11484:	mov	fp, sp
   11488:	sub	sp, sp, #56	; 0x38
   1148c:	mov	r8, r0
   11490:	cmp	r0, #0
   11494:	bne	1170c <__assert_fail@plt+0x388>
   11498:	movw	r1, #28963	; 0x7123
   1149c:	mov	r0, #0
   114a0:	mov	r2, #5
   114a4:	movt	r1, #1
   114a8:	bl	1115c <dcgettext@plt>
   114ac:	mov	r1, r0
   114b0:	movw	r0, #37384	; 0x9208
   114b4:	movt	r0, #2
   114b8:	ldr	r2, [r0]
   114bc:	mov	r0, #1
   114c0:	bl	11294 <__printf_chk@plt>
   114c4:	movw	r1, #28998	; 0x7146
   114c8:	mov	r0, #0
   114cc:	mov	r2, #5
   114d0:	movt	r1, #1
   114d4:	bl	1115c <dcgettext@plt>
   114d8:	movw	r9, #37252	; 0x9184
   114dc:	movt	r9, #2
   114e0:	ldr	r1, [r9]
   114e4:	bl	110cc <fputs_unlocked@plt>
   114e8:	movw	r1, #29148	; 0x71dc
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	movt	r1, #1
   114f8:	bl	1115c <dcgettext@plt>
   114fc:	ldr	r1, [r9]
   11500:	bl	110cc <fputs_unlocked@plt>
   11504:	movw	r1, #29208	; 0x7218
   11508:	mov	r0, #0
   1150c:	mov	r2, #5
   11510:	movt	r1, #1
   11514:	bl	1115c <dcgettext@plt>
   11518:	ldr	r1, [r9]
   1151c:	bl	110cc <fputs_unlocked@plt>
   11520:	movw	r1, #29431	; 0x72f7
   11524:	mov	r0, #0
   11528:	mov	r2, #5
   1152c:	movt	r1, #1
   11530:	bl	1115c <dcgettext@plt>
   11534:	ldr	r1, [r9]
   11538:	bl	110cc <fputs_unlocked@plt>
   1153c:	movw	r1, #29703	; 0x7407
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	movt	r1, #1
   1154c:	bl	1115c <dcgettext@plt>
   11550:	ldr	r1, [r9]
   11554:	bl	110cc <fputs_unlocked@plt>
   11558:	movw	r1, #30234	; 0x761a
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	movt	r1, #1
   11568:	bl	1115c <dcgettext@plt>
   1156c:	ldr	r1, [r9]
   11570:	bl	110cc <fputs_unlocked@plt>
   11574:	movw	r1, #30295	; 0x7657
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	movt	r1, #1
   11584:	bl	1115c <dcgettext@plt>
   11588:	ldr	r1, [r9]
   1158c:	bl	110cc <fputs_unlocked@plt>
   11590:	movw	r1, #30340	; 0x7684
   11594:	mov	r0, #0
   11598:	mov	r2, #5
   1159c:	movt	r1, #1
   115a0:	bl	1115c <dcgettext@plt>
   115a4:	ldr	r1, [r9]
   115a8:	bl	110cc <fputs_unlocked@plt>
   115ac:	movw	r1, #30394	; 0x76ba
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	movt	r1, #1
   115bc:	bl	1115c <dcgettext@plt>
   115c0:	ldr	r1, [r9]
   115c4:	bl	110cc <fputs_unlocked@plt>
   115c8:	movw	r0, #32176	; 0x7db0
   115cc:	mov	r6, sp
   115d0:	movt	r0, #1
   115d4:	mov	r1, r6
   115d8:	ldm	r0!, {r2, r3, r4, r5}
   115dc:	stmia	r1!, {r2, r3, r4, r5}
   115e0:	ldm	r0!, {r2, r3, r4, r5, r7}
   115e4:	stmia	r1!, {r2, r3, r4, r5, r7}
   115e8:	ldm	r0, {r2, r3, r4, r5, r7}
   115ec:	stm	r1, {r2, r3, r4, r5, r7}
   115f0:	movw	r1, #31512	; 0x7b18
   115f4:	movw	r5, #31212	; 0x79ec
   115f8:	movt	r1, #1
   115fc:	movt	r5, #1
   11600:	mov	r0, r5
   11604:	bl	110e4 <strcmp@plt>
   11608:	cmp	r0, #0
   1160c:	ldrne	r1, [r6, #8]!
   11610:	cmpne	r1, #0
   11614:	bne	11600 <__assert_fail@plt+0x27c>
   11618:	movw	r1, #31607	; 0x7b77
   1161c:	ldr	r6, [r6, #4]
   11620:	mov	r0, #0
   11624:	mov	r2, #5
   11628:	movt	r1, #1
   1162c:	bl	1115c <dcgettext@plt>
   11630:	movw	r2, #31379	; 0x7a93
   11634:	movw	r3, #31630	; 0x7b8e
   11638:	mov	r1, r0
   1163c:	mov	r0, #1
   11640:	movt	r2, #1
   11644:	movt	r3, #1
   11648:	bl	11294 <__printf_chk@plt>
   1164c:	cmp	r6, #0
   11650:	mov	r0, #5
   11654:	mov	r1, #0
   11658:	moveq	r6, r5
   1165c:	bl	112f4 <setlocale@plt>
   11660:	cmp	r0, #0
   11664:	beq	1169c <__assert_fail@plt+0x318>
   11668:	movw	r1, #31670	; 0x7bb6
   1166c:	mov	r2, #3
   11670:	movt	r1, #1
   11674:	bl	11348 <strncmp@plt>
   11678:	cmp	r0, #0
   1167c:	beq	1169c <__assert_fail@plt+0x318>
   11680:	movw	r1, #31674	; 0x7bba
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	1115c <dcgettext@plt>
   11694:	ldr	r1, [r9]
   11698:	bl	110cc <fputs_unlocked@plt>
   1169c:	movw	r1, #31745	; 0x7c01
   116a0:	mov	r0, #0
   116a4:	mov	r2, #5
   116a8:	movt	r1, #1
   116ac:	bl	1115c <dcgettext@plt>
   116b0:	movw	r2, #31630	; 0x7b8e
   116b4:	mov	r1, r0
   116b8:	mov	r0, #1
   116bc:	mov	r3, r5
   116c0:	movt	r2, #1
   116c4:	bl	11294 <__printf_chk@plt>
   116c8:	movw	r1, #31772	; 0x7c1c
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	movt	r1, #1
   116d8:	bl	1115c <dcgettext@plt>
   116dc:	mov	r1, r0
   116e0:	movw	r0, #31540	; 0x7b34
   116e4:	movw	r3, #31922	; 0x7cb2
   116e8:	cmp	r6, r5
   116ec:	mov	r2, r6
   116f0:	movt	r0, #1
   116f4:	movt	r3, #1
   116f8:	moveq	r3, r0
   116fc:	mov	r0, #1
   11700:	bl	11294 <__printf_chk@plt>
   11704:	mov	r0, r8
   11708:	bl	11234 <exit@plt>
   1170c:	movw	r0, #37240	; 0x9178
   11710:	movw	r1, #28924	; 0x70fc
   11714:	mov	r2, #5
   11718:	movt	r0, #2
   1171c:	movt	r1, #1
   11720:	ldr	r5, [r0]
   11724:	mov	r0, #0
   11728:	bl	1115c <dcgettext@plt>
   1172c:	mov	r2, r0
   11730:	movw	r0, #37384	; 0x9208
   11734:	mov	r1, #1
   11738:	movt	r0, #2
   1173c:	ldr	r3, [r0]
   11740:	mov	r0, r5
   11744:	bl	112b8 <__fprintf_chk@plt>
   11748:	b	11704 <__assert_fail@plt+0x380>
   1174c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11750:	add	fp, sp, #28
   11754:	sub	sp, sp, #76	; 0x4c
   11758:	mov	r9, #0
   1175c:	mov	r7, r0
   11760:	mov	sl, r1
   11764:	str	r9, [sp, #40]	; 0x28
   11768:	str	r9, [sp, #28]
   1176c:	str	r9, [sp, #24]
   11770:	str	r9, [sp, #20]
   11774:	ldr	r0, [r1]
   11778:	bl	137d0 <__assert_fail@plt+0x244c>
   1177c:	movw	r1, #31922	; 0x7cb2
   11780:	mov	r0, #6
   11784:	movt	r1, #1
   11788:	bl	112f4 <setlocale@plt>
   1178c:	movw	r5, #31383	; 0x7a97
   11790:	movw	r1, #31217	; 0x79f1
   11794:	movt	r5, #1
   11798:	movt	r1, #1
   1179c:	mov	r0, r5
   117a0:	bl	11330 <bindtextdomain@plt>
   117a4:	mov	r0, r5
   117a8:	bl	11174 <textdomain@plt>
   117ac:	mov	r0, #3
   117b0:	bl	13614 <__assert_fail@plt+0x2290>
   117b4:	movw	r1, #37264	; 0x9190
   117b8:	movt	r1, #2
   117bc:	strb	r0, [r1]
   117c0:	movw	r0, #12924	; 0x327c
   117c4:	movt	r0, #1
   117c8:	bl	170d4 <__assert_fail@plt+0x5d50>
   117cc:	movw	r0, #9732	; 0x2604
   117d0:	movt	r0, #1
   117d4:	bl	170d4 <__assert_fail@plt+0x5d50>
   117d8:	movw	r0, #37265	; 0x9191
   117dc:	mov	r1, #1
   117e0:	movw	r2, #31241	; 0x7a09
   117e4:	movw	r3, #32048	; 0x7d30
   117e8:	str	r9, [sp]
   117ec:	movt	r0, #2
   117f0:	movt	r2, #1
   117f4:	movt	r3, #1
   117f8:	strb	r1, [r0]
   117fc:	movw	r0, #37266	; 0x9192
   11800:	mov	r1, sl
   11804:	movt	r0, #2
   11808:	strb	r9, [r0]
   1180c:	movw	r0, #37267	; 0x9193
   11810:	movt	r0, #2
   11814:	strh	r9, [r0]
   11818:	movw	r0, #37272	; 0x9198
   1181c:	movt	r0, #2
   11820:	str	r9, [r0]
   11824:	mov	r0, r7
   11828:	bl	1121c <getopt_long@plt>
   1182c:	movw	r5, #37232	; 0x9170
   11830:	cmn	r0, #1
   11834:	movt	r5, #2
   11838:	beq	11c24 <__assert_fail@plt+0x8a0>
   1183c:	movw	r6, #31241	; 0x7a09
   11840:	movw	r4, #32048	; 0x7d30
   11844:	add	r8, sp, #44	; 0x2c
   11848:	movt	r6, #1
   1184c:	movt	r4, #1
   11850:	cmp	r0, #110	; 0x6e
   11854:	str	r9, [sp, #44]	; 0x2c
   11858:	bgt	118d4 <__assert_fail@plt+0x550>
   1185c:	cmp	r0, #48	; 0x30
   11860:	ble	118fc <__assert_fail@plt+0x578>
   11864:	sub	r1, r0, #97	; 0x61
   11868:	cmp	r1, #9
   1186c:	bhi	11998 <__assert_fail@plt+0x614>
   11870:	add	r0, pc, #0
   11874:	ldr	pc, [r0, r1, lsl #2]
   11878:	andeq	r1, r1, ip, lsl #20
   1187c:	strdeq	r2, [r1], -ip
   11880:	strdeq	r2, [r1], -ip
   11884:	strdeq	r2, [r1], -ip
   11888:	andeq	r1, r1, r0, lsr #17
   1188c:	strdeq	r2, [r1], -ip
   11890:	strdeq	r2, [r1], -ip
   11894:	strdeq	r2, [r1], -ip
   11898:	andeq	r1, r1, ip, asr #22
   1189c:	andeq	r1, r1, r0, asr #21
   118a0:	movw	r0, #37280	; 0x91a0
   118a4:	movt	r0, #2
   118a8:	ldr	r0, [r0]
   118ac:	cmp	r0, #0
   118b0:	beq	11bcc <__assert_fail@plt+0x848>
   118b4:	movw	r1, #37256	; 0x9188
   118b8:	movt	r1, #2
   118bc:	ldr	r5, [r1]
   118c0:	mov	r1, r5
   118c4:	bl	110e4 <strcmp@plt>
   118c8:	cmp	r0, #0
   118cc:	beq	11bd8 <__assert_fail@plt+0x854>
   118d0:	b	12504 <__assert_fail@plt+0x1180>
   118d4:	cmp	r0, #121	; 0x79
   118d8:	ble	11930 <__assert_fail@plt+0x5ac>
   118dc:	cmp	r0, #256	; 0x100
   118e0:	bgt	11980 <__assert_fail@plt+0x5fc>
   118e4:	cmp	r0, #122	; 0x7a
   118e8:	bne	11a68 <__assert_fail@plt+0x6e4>
   118ec:	movw	r1, #37286	; 0x91a6
   118f0:	mov	r0, #1
   118f4:	movt	r1, #2
   118f8:	b	11b58 <__assert_fail@plt+0x7d4>
   118fc:	cmp	r0, #1
   11900:	bne	12438 <__assert_fail@plt+0x10b4>
   11904:	movw	r0, #37256	; 0x9188
   11908:	add	r1, sp, #40	; 0x28
   1190c:	add	r2, sp, #24
   11910:	add	r3, sp, #20
   11914:	movt	r0, #2
   11918:	stm	sp, {r1, r8}
   1191c:	add	r1, sp, #32
   11920:	ldr	r0, [r0]
   11924:	bl	12860 <__assert_fail@plt+0x14dc>
   11928:	ldr	r0, [sp, #44]	; 0x2c
   1192c:	b	11ba4 <__assert_fail@plt+0x820>
   11930:	cmp	r0, #111	; 0x6f
   11934:	beq	119c0 <__assert_fail@plt+0x63c>
   11938:	cmp	r0, #116	; 0x74
   1193c:	bne	119f8 <__assert_fail@plt+0x674>
   11940:	movw	r0, #37256	; 0x9188
   11944:	movt	r0, #2
   11948:	ldr	r0, [r0]
   1194c:	ldrb	r1, [r0]
   11950:	cmp	r1, #0
   11954:	beq	11b74 <__assert_fail@plt+0x7f0>
   11958:	ldrb	r2, [r0, #1]
   1195c:	cmp	r2, #0
   11960:	beq	11b78 <__assert_fail@plt+0x7f4>
   11964:	movw	r1, #31335	; 0x7a67
   11968:	movt	r1, #1
   1196c:	bl	110e4 <strcmp@plt>
   11970:	mov	r1, #0
   11974:	cmp	r0, #0
   11978:	beq	11b78 <__assert_fail@plt+0x7f4>
   1197c:	b	12510 <__assert_fail@plt+0x118c>
   11980:	movw	r1, #257	; 0x101
   11984:	cmp	r0, r1
   11988:	bne	11a80 <__assert_fail@plt+0x6fc>
   1198c:	movw	r0, #37272	; 0x9198
   11990:	mov	r1, #2
   11994:	b	11a78 <__assert_fail@plt+0x6f4>
   11998:	cmp	r0, #49	; 0x31
   1199c:	bne	11aa0 <__assert_fail@plt+0x71c>
   119a0:	movw	r0, #37256	; 0x9188
   119a4:	movt	r0, #2
   119a8:	ldr	r0, [r0]
   119ac:	bl	126b4 <__assert_fail@plt+0x1330>
   119b0:	mov	r1, r0
   119b4:	movw	r0, #37136	; 0x9110
   119b8:	movt	r0, #2
   119bc:	b	11b44 <__assert_fail@plt+0x7c0>
   119c0:	movw	r0, #37256	; 0x9188
   119c4:	movw	r1, #31330	; 0x7a62
   119c8:	movt	r0, #2
   119cc:	movt	r1, #1
   119d0:	ldr	r5, [r0]
   119d4:	mov	r0, r5
   119d8:	bl	110e4 <strcmp@plt>
   119dc:	cmp	r0, #0
   119e0:	beq	11b60 <__assert_fail@plt+0x7dc>
   119e4:	mov	r0, r5
   119e8:	bl	12768 <__assert_fail@plt+0x13e4>
   119ec:	mov	r0, #3
   119f0:	str	r0, [sp, #44]	; 0x2c
   119f4:	b	11be8 <__assert_fail@plt+0x864>
   119f8:	cmp	r0, #118	; 0x76
   119fc:	bne	125fc <__assert_fail@plt+0x1278>
   11a00:	movw	r0, #37265	; 0x9191
   11a04:	movt	r0, #2
   11a08:	strb	r9, [r0]
   11a0c:	movw	r0, #37256	; 0x9188
   11a10:	movw	r1, #31922	; 0x7cb2
   11a14:	mov	r2, #10
   11a18:	sub	r3, fp, #40	; 0x28
   11a1c:	movt	r0, #2
   11a20:	movt	r1, #1
   11a24:	ldr	r0, [r0]
   11a28:	str	r1, [sp]
   11a2c:	mov	r1, #0
   11a30:	bl	15e58 <__assert_fail@plt+0x4ad4>
   11a34:	cmp	r0, #0
   11a38:	bne	12498 <__assert_fail@plt+0x1114>
   11a3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11a40:	sub	r1, r0, #1
   11a44:	cmp	r1, #2
   11a48:	bcs	12498 <__assert_fail@plt+0x1114>
   11a4c:	movw	r1, #37276	; 0x919c
   11a50:	cmp	r0, #1
   11a54:	movw	r0, #37277	; 0x919d
   11a58:	movt	r1, #2
   11a5c:	movt	r0, #2
   11a60:	moveq	r0, r1
   11a64:	b	11a94 <__assert_fail@plt+0x710>
   11a68:	cmp	r0, #256	; 0x100
   11a6c:	bne	125fc <__assert_fail@plt+0x1278>
   11a70:	movw	r0, #37272	; 0x9198
   11a74:	mov	r1, #1
   11a78:	movt	r0, #2
   11a7c:	b	11b9c <__assert_fail@plt+0x818>
   11a80:	movw	r1, #258	; 0x102
   11a84:	cmp	r0, r1
   11a88:	bne	125fc <__assert_fail@plt+0x1278>
   11a8c:	movw	r0, #37296	; 0x91b0
   11a90:	movt	r0, #2
   11a94:	mov	r1, #1
   11a98:	strb	r1, [r0]
   11a9c:	b	11ba0 <__assert_fail@plt+0x81c>
   11aa0:	cmp	r0, #50	; 0x32
   11aa4:	bne	125fc <__assert_fail@plt+0x1278>
   11aa8:	movw	r0, #37256	; 0x9188
   11aac:	movt	r0, #2
   11ab0:	ldr	r0, [r0]
   11ab4:	bl	126b4 <__assert_fail@plt+0x1330>
   11ab8:	mov	r1, r0
   11abc:	b	11b3c <__assert_fail@plt+0x7b8>
   11ac0:	movw	r0, #37256	; 0x9188
   11ac4:	movt	r0, #2
   11ac8:	ldr	r0, [r0]
   11acc:	ldrb	r1, [r0]
   11ad0:	sub	r2, r1, #49	; 0x31
   11ad4:	uxtb	r2, r2
   11ad8:	cmp	r2, #1
   11adc:	bhi	11b04 <__assert_fail@plt+0x780>
   11ae0:	ldrb	r2, [r0, #1]
   11ae4:	cmp	r2, #0
   11ae8:	bne	11b04 <__assert_fail@plt+0x780>
   11aec:	ldr	r2, [r5]
   11af0:	add	r2, sl, r2, lsl #2
   11af4:	ldr	r2, [r2, #-4]
   11af8:	add	r2, r2, #2
   11afc:	cmp	r0, r2
   11b00:	beq	11bf4 <__assert_fail@plt+0x870>
   11b04:	bl	126b4 <__assert_fail@plt+0x1330>
   11b08:	mov	r9, sl
   11b0c:	mov	sl, r5
   11b10:	mov	r5, r8
   11b14:	movw	r8, #37136	; 0x9110
   11b18:	mov	r1, r0
   11b1c:	movt	r8, #2
   11b20:	mov	r0, r8
   11b24:	bl	12658 <__assert_fail@plt+0x12d4>
   11b28:	ldr	r1, [r8]
   11b2c:	mov	r8, r5
   11b30:	mov	r5, sl
   11b34:	mov	sl, r9
   11b38:	mov	r9, #0
   11b3c:	movw	r0, #37140	; 0x9114
   11b40:	movt	r0, #2
   11b44:	bl	12658 <__assert_fail@plt+0x12d4>
   11b48:	b	11ba0 <__assert_fail@plt+0x81c>
   11b4c:	movw	r1, #37284	; 0x91a4
   11b50:	mov	r0, #1
   11b54:	movt	r1, #2
   11b58:	strb	r0, [r1]
   11b5c:	b	11ba0 <__assert_fail@plt+0x81c>
   11b60:	movw	r0, #37285	; 0x91a5
   11b64:	mov	r1, #1
   11b68:	movt	r0, #2
   11b6c:	strb	r1, [r0]
   11b70:	b	11be4 <__assert_fail@plt+0x860>
   11b74:	mov	r1, #10
   11b78:	movw	r0, #37144	; 0x9118
   11b7c:	movt	r0, #2
   11b80:	ldr	r0, [r0]
   11b84:	cmp	r0, #0
   11b88:	bmi	11b94 <__assert_fail@plt+0x810>
   11b8c:	cmp	r0, r1
   11b90:	bne	1251c <__assert_fail@plt+0x1198>
   11b94:	movw	r0, #37144	; 0x9118
   11b98:	movt	r0, #2
   11b9c:	str	r1, [r0]
   11ba0:	mov	r0, #0
   11ba4:	str	r0, [sp, #40]	; 0x28
   11ba8:	mov	r0, r7
   11bac:	mov	r1, sl
   11bb0:	mov	r2, r6
   11bb4:	mov	r3, r4
   11bb8:	str	r9, [sp]
   11bbc:	bl	1121c <getopt_long@plt>
   11bc0:	cmn	r0, #1
   11bc4:	bne	11850 <__assert_fail@plt+0x4cc>
   11bc8:	b	11c24 <__assert_fail@plt+0x8a0>
   11bcc:	movw	r0, #37256	; 0x9188
   11bd0:	movt	r0, #2
   11bd4:	ldr	r5, [r0]
   11bd8:	movw	r0, #37280	; 0x91a0
   11bdc:	movt	r0, #2
   11be0:	str	r5, [r0]
   11be4:	mov	r0, #0
   11be8:	movw	r5, #37232	; 0x9170
   11bec:	movt	r5, #2
   11bf0:	b	11ba4 <__assert_fail@plt+0x820>
   11bf4:	subs	r0, r1, #50	; 0x32
   11bf8:	add	r1, sp, #24
   11bfc:	clz	r0, r0
   11c00:	lsr	r0, r0, #5
   11c04:	orr	r0, r1, r0, lsl #2
   11c08:	ldr	r1, [r0]
   11c0c:	add	r1, r1, #1
   11c10:	str	r1, [r0]
   11c14:	mov	r0, #1
   11c18:	movweq	r0, #2
   11c1c:	str	r0, [sp, #44]	; 0x2c
   11c20:	b	11ba4 <__assert_fail@plt+0x820>
   11c24:	ldr	r0, [r5]
   11c28:	mov	r6, r7
   11c2c:	mov	r4, sl
   11c30:	str	r9, [sp, #40]	; 0x28
   11c34:	cmp	r0, r7
   11c38:	bge	11c80 <__assert_fail@plt+0x8fc>
   11c3c:	add	r8, sp, #40	; 0x28
   11c40:	add	r9, sp, #32
   11c44:	add	r7, sp, #24
   11c48:	add	sl, sp, #20
   11c4c:	add	r1, r0, #1
   11c50:	mov	r2, r7
   11c54:	mov	r3, sl
   11c58:	str	r1, [r5]
   11c5c:	add	r1, sp, #44	; 0x2c
   11c60:	ldr	r0, [r4, r0, lsl #2]
   11c64:	str	r1, [sp, #4]
   11c68:	mov	r1, r9
   11c6c:	str	r8, [sp]
   11c70:	bl	12860 <__assert_fail@plt+0x14dc>
   11c74:	ldr	r0, [r5]
   11c78:	cmp	r0, r6
   11c7c:	blt	11c4c <__assert_fail@plt+0x8c8>
   11c80:	ldr	r0, [sp, #20]
   11c84:	cmp	r0, #2
   11c88:	bne	124d4 <__assert_fail@plt+0x1150>
   11c8c:	movw	r6, #37136	; 0x9110
   11c90:	mov	r4, #0
   11c94:	add	r5, sp, #24
   11c98:	movt	r6, #2
   11c9c:	ldr	r0, [r5, r4, lsl #2]
   11ca0:	cmp	r0, #0
   11ca4:	beq	11cc4 <__assert_fail@plt+0x940>
   11ca8:	mov	r0, r6
   11cac:	mov	r1, r4
   11cb0:	bl	12658 <__assert_fail@plt+0x12d4>
   11cb4:	movw	r0, #37140	; 0x9114
   11cb8:	mov	r1, r4
   11cbc:	movt	r0, #2
   11cc0:	bl	12658 <__assert_fail@plt+0x12d4>
   11cc4:	add	r4, r4, #1
   11cc8:	cmp	r4, #2
   11ccc:	bne	11c9c <__assert_fail@plt+0x918>
   11cd0:	ldr	r0, [r6]
   11cd4:	movw	r8, #37277	; 0x919d
   11cd8:	movt	r8, #2
   11cdc:	cmn	r0, #1
   11ce0:	moveq	r0, #0
   11ce4:	streq	r0, [r6]
   11ce8:	movw	r0, #37140	; 0x9114
   11cec:	movt	r0, #2
   11cf0:	ldr	r0, [r0]
   11cf4:	cmn	r0, #1
   11cf8:	bne	11d0c <__assert_fail@plt+0x988>
   11cfc:	movw	r1, #37140	; 0x9114
   11d00:	mov	r0, #0
   11d04:	movt	r1, #2
   11d08:	str	r0, [r1]
   11d0c:	movw	r5, #37288	; 0x91a8
   11d10:	movw	r1, #32340	; 0x7e54
   11d14:	movt	r5, #2
   11d18:	movt	r1, #1
   11d1c:	ldr	r4, [r5]
   11d20:	mov	r0, r4
   11d24:	bl	110e4 <strcmp@plt>
   11d28:	cmp	r0, #0
   11d2c:	beq	11d48 <__assert_fail@plt+0x9c4>
   11d30:	movw	r1, #31870	; 0x7c7e
   11d34:	mov	r0, r4
   11d38:	movt	r1, #1
   11d3c:	bl	1349c <__assert_fail@plt+0x2118>
   11d40:	mov	r9, r0
   11d44:	b	11d54 <__assert_fail@plt+0x9d0>
   11d48:	movw	r0, #37248	; 0x9180
   11d4c:	movt	r0, #2
   11d50:	ldr	r9, [r0]
   11d54:	cmp	r9, #0
   11d58:	beq	12528 <__assert_fail@plt+0x11a4>
   11d5c:	ldr	r4, [r5, #4]
   11d60:	movw	r1, #32340	; 0x7e54
   11d64:	movt	r1, #1
   11d68:	mov	r0, r4
   11d6c:	bl	110e4 <strcmp@plt>
   11d70:	cmp	r0, #0
   11d74:	beq	11d90 <__assert_fail@plt+0xa0c>
   11d78:	movw	r1, #31870	; 0x7c7e
   11d7c:	mov	r0, r4
   11d80:	movt	r1, #1
   11d84:	bl	1349c <__assert_fail@plt+0x2118>
   11d88:	mov	sl, r0
   11d8c:	b	11d9c <__assert_fail@plt+0xa18>
   11d90:	movw	r0, #37248	; 0x9180
   11d94:	movt	r0, #2
   11d98:	ldr	sl, [r0]
   11d9c:	cmp	sl, #0
   11da0:	beq	12538 <__assert_fail@plt+0x11b4>
   11da4:	cmp	r9, sl
   11da8:	beq	12548 <__assert_fail@plt+0x11c4>
   11dac:	mov	r0, r9
   11db0:	mov	r1, #2
   11db4:	bl	13368 <__assert_fail@plt+0x1fe4>
   11db8:	mov	r0, sl
   11dbc:	mov	r1, #2
   11dc0:	bl	13368 <__assert_fail@plt+0x1fe4>
   11dc4:	mov	r4, #0
   11dc8:	sub	r1, fp, #40	; 0x28
   11dcc:	mov	r0, r9
   11dd0:	mov	r2, #1
   11dd4:	str	r4, [fp, #-32]	; 0xffffffe0
   11dd8:	str	r4, [fp, #-36]	; 0xffffffdc
   11ddc:	str	r4, [fp, #-40]	; 0xffffffd8
   11de0:	bl	129cc <__assert_fail@plt+0x1648>
   11de4:	add	r1, sp, #52	; 0x34
   11de8:	mov	r0, sl
   11dec:	mov	r2, #2
   11df0:	str	r4, [sp, #60]	; 0x3c
   11df4:	str	r4, [sp, #56]	; 0x38
   11df8:	str	r4, [sp, #52]	; 0x34
   11dfc:	bl	129cc <__assert_fail@plt+0x1648>
   11e00:	movw	r0, #37285	; 0x91a5
   11e04:	movw	r5, #37136	; 0x9110
   11e08:	movt	r0, #2
   11e0c:	movt	r5, #2
   11e10:	ldrb	r0, [r0]
   11e14:	cmp	r0, #1
   11e18:	bne	11e6c <__assert_fail@plt+0xae8>
   11e1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e20:	cmp	r0, #0
   11e24:	beq	11e34 <__assert_fail@plt+0xab0>
   11e28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11e2c:	ldr	r0, [r0]
   11e30:	ldr	r4, [r0, #12]
   11e34:	movw	r0, #37320	; 0x91c8
   11e38:	movt	r0, #2
   11e3c:	str	r4, [r0]
   11e40:	ldr	r0, [sp, #52]	; 0x34
   11e44:	cmp	r0, #0
   11e48:	beq	11e5c <__assert_fail@plt+0xad8>
   11e4c:	ldr	r0, [sp, #60]	; 0x3c
   11e50:	ldr	r0, [r0]
   11e54:	ldr	r0, [r0, #12]
   11e58:	b	11e60 <__assert_fail@plt+0xadc>
   11e5c:	mov	r0, #0
   11e60:	movw	r1, #37324	; 0x91cc
   11e64:	movt	r1, #2
   11e68:	str	r0, [r1]
   11e6c:	movw	r0, #37296	; 0x91b0
   11e70:	movt	r0, #2
   11e74:	ldrb	r0, [r0]
   11e78:	cmp	r0, #1
   11e7c:	bne	11f24 <__assert_fail@plt+0xba0>
   11e80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e84:	cmp	r0, #0
   11e88:	beq	11eac <__assert_fail@plt+0xb28>
   11e8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11e90:	ldr	r1, [sp, #52]	; 0x34
   11e94:	ldr	r0, [r0]
   11e98:	cmp	r1, #0
   11e9c:	bne	11ec0 <__assert_fail@plt+0xb3c>
   11ea0:	movw	r1, #37328	; 0x91d0
   11ea4:	movt	r1, #2
   11ea8:	b	11ec8 <__assert_fail@plt+0xb44>
   11eac:	ldr	r0, [sp, #52]	; 0x34
   11eb0:	cmp	r0, #0
   11eb4:	beq	11f24 <__assert_fail@plt+0xba0>
   11eb8:	movw	r0, #37328	; 0x91d0
   11ebc:	movt	r0, #2
   11ec0:	ldr	r1, [sp, #60]	; 0x3c
   11ec4:	ldr	r1, [r1]
   11ec8:	bl	12a6c <__assert_fail@plt+0x16e8>
   11ecc:	movw	r1, #37352	; 0x91e8
   11ed0:	mov	r0, #0
   11ed4:	movt	r1, #2
   11ed8:	str	r0, [r1]
   11edc:	str	r0, [r1, #4]
   11ee0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11ee4:	cmp	r1, #0
   11ee8:	beq	11f00 <__assert_fail@plt+0xb7c>
   11eec:	str	r0, [fp, #-40]	; 0xffffffd8
   11ef0:	sub	r1, fp, #40	; 0x28
   11ef4:	mov	r0, r9
   11ef8:	mov	r2, #1
   11efc:	bl	129cc <__assert_fail@plt+0x1648>
   11f00:	ldr	r0, [sp, #52]	; 0x34
   11f04:	cmp	r0, #0
   11f08:	beq	11f24 <__assert_fail@plt+0xba0>
   11f0c:	mov	r0, #0
   11f10:	add	r1, sp, #52	; 0x34
   11f14:	mov	r2, #2
   11f18:	str	r0, [sp, #52]	; 0x34
   11f1c:	mov	r0, sl
   11f20:	bl	129cc <__assert_fail@plt+0x1648>
   11f24:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11f28:	ldr	r0, [sp, #52]	; 0x34
   11f2c:	str	sl, [sp, #16]
   11f30:	cmp	r1, #0
   11f34:	cmpne	r0, #0
   11f38:	beq	121ec <__assert_fail@plt+0xe68>
   11f3c:	sub	r7, fp, #40	; 0x28
   11f40:	movw	r0, #37140	; 0x9114
   11f44:	ldr	r2, [r5]
   11f48:	movt	r0, #2
   11f4c:	ldr	r3, [r0]
   11f50:	ldr	r0, [sp, #60]	; 0x3c
   11f54:	ldr	r1, [r0]
   11f58:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11f5c:	ldr	r0, [r0]
   11f60:	bl	12bd0 <__assert_fail@plt+0x184c>
   11f64:	cmn	r0, #1
   11f68:	ble	12000 <__assert_fail@plt+0xc7c>
   11f6c:	cmp	r0, #0
   11f70:	beq	11fac <__assert_fail@plt+0xc28>
   11f74:	ldrb	r0, [r8]
   11f78:	cmp	r0, #1
   11f7c:	bne	11f94 <__assert_fail@plt+0xc10>
   11f80:	ldr	r0, [sp, #60]	; 0x3c
   11f84:	ldr	r1, [r0]
   11f88:	movw	r0, #37328	; 0x91d0
   11f8c:	movt	r0, #2
   11f90:	bl	12a6c <__assert_fail@plt+0x16e8>
   11f94:	mov	r0, #0
   11f98:	add	r1, sp, #52	; 0x34
   11f9c:	mov	r2, #2
   11fa0:	str	r0, [sp, #52]	; 0x34
   11fa4:	mov	r0, sl
   11fa8:	b	1203c <__assert_fail@plt+0xcb8>
   11fac:	mov	r0, r9
   11fb0:	mov	r1, r7
   11fb4:	mov	r2, #1
   11fb8:	bl	129cc <__assert_fail@plt+0x1648>
   11fbc:	cmp	r0, #0
   11fc0:	beq	12054 <__assert_fail@plt+0xcd0>
   11fc4:	movw	r0, #37140	; 0x9114
   11fc8:	ldr	r4, [fp, #-32]	; 0xffffffe0
   11fcc:	ldr	r2, [r5]
   11fd0:	movt	r0, #2
   11fd4:	ldr	r3, [r0]
   11fd8:	ldr	r0, [sp, #60]	; 0x3c
   11fdc:	ldr	r1, [r0]
   11fe0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11fe4:	add	r0, r4, r0, lsl #2
   11fe8:	ldr	r0, [r0, #-4]
   11fec:	bl	12bd0 <__assert_fail@plt+0x184c>
   11ff0:	cmp	r0, #0
   11ff4:	beq	11fac <__assert_fail@plt+0xc28>
   11ff8:	mov	r0, #0
   11ffc:	b	12064 <__assert_fail@plt+0xce0>
   12000:	movw	r0, #37276	; 0x919c
   12004:	movt	r0, #2
   12008:	ldrb	r0, [r0]
   1200c:	cmp	r0, #1
   12010:	bne	12028 <__assert_fail@plt+0xca4>
   12014:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12018:	movw	r1, #37328	; 0x91d0
   1201c:	movt	r1, #2
   12020:	ldr	r0, [r0]
   12024:	bl	12a6c <__assert_fail@plt+0x16e8>
   12028:	mov	r0, #0
   1202c:	mov	r1, r7
   12030:	mov	r2, #1
   12034:	str	r0, [fp, #-40]	; 0xffffffd8
   12038:	mov	r0, r9
   1203c:	bl	129cc <__assert_fail@plt+0x1648>
   12040:	movw	r0, #37266	; 0x9192
   12044:	mov	r1, #1
   12048:	movt	r0, #2
   1204c:	strb	r1, [r0]
   12050:	b	121d8 <__assert_fail@plt+0xe54>
   12054:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12058:	add	r0, r0, #1
   1205c:	str	r0, [fp, #-40]	; 0xffffffd8
   12060:	mov	r0, #1
   12064:	add	r6, sp, #52	; 0x34
   12068:	str	r0, [sp, #12]
   1206c:	mov	r0, sl
   12070:	mov	r1, r6
   12074:	mov	r2, #2
   12078:	bl	129cc <__assert_fail@plt+0x1648>
   1207c:	cmp	r0, #0
   12080:	beq	120c0 <__assert_fail@plt+0xd3c>
   12084:	movw	r0, #37140	; 0x9114
   12088:	ldr	r1, [sp, #52]	; 0x34
   1208c:	ldr	r4, [sp, #60]	; 0x3c
   12090:	ldr	r2, [r5]
   12094:	movt	r0, #2
   12098:	ldr	r3, [r0]
   1209c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   120a0:	add	r1, r4, r1, lsl #2
   120a4:	ldr	r1, [r1, #-4]
   120a8:	ldr	r0, [r0]
   120ac:	bl	12bd0 <__assert_fail@plt+0x184c>
   120b0:	cmp	r0, #0
   120b4:	beq	1206c <__assert_fail@plt+0xce8>
   120b8:	mov	r6, #0
   120bc:	b	120d0 <__assert_fail@plt+0xd4c>
   120c0:	ldr	r0, [sp, #52]	; 0x34
   120c4:	mov	r6, #1
   120c8:	add	r0, r0, #1
   120cc:	str	r0, [sp, #52]	; 0x34
   120d0:	movw	r0, #37265	; 0x9191
   120d4:	movt	r0, #2
   120d8:	ldrb	r0, [r0]
   120dc:	cmp	r0, #1
   120e0:	bne	1215c <__assert_fail@plt+0xdd8>
   120e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   120e8:	cmp	r0, #1
   120ec:	beq	1215c <__assert_fail@plt+0xdd8>
   120f0:	ldr	r2, [sp, #52]	; 0x34
   120f4:	mov	r8, #0
   120f8:	mov	r1, #1
   120fc:	cmp	r2, #1
   12100:	beq	12148 <__assert_fail@plt+0xdc4>
   12104:	mov	r5, r9
   12108:	mov	r9, #0
   1210c:	ldr	r0, [sp, #60]	; 0x3c
   12110:	ldr	r1, [r0, r9, lsl #2]
   12114:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12118:	ldr	r0, [r0, r8, lsl #2]
   1211c:	bl	12a6c <__assert_fail@plt+0x16e8>
   12120:	ldr	r1, [sp, #52]	; 0x34
   12124:	add	r9, r9, #1
   12128:	sub	r0, r1, #1
   1212c:	cmp	r9, r0
   12130:	bcc	1210c <__assert_fail@plt+0xd88>
   12134:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12138:	ldr	sl, [sp, #16]
   1213c:	mov	r9, r5
   12140:	movw	r5, #37136	; 0x9110
   12144:	movt	r5, #2
   12148:	add	r8, r8, #1
   1214c:	sub	r2, r0, #1
   12150:	cmp	r8, r2
   12154:	mov	r2, r1
   12158:	bcc	120f8 <__assert_fail@plt+0xd74>
   1215c:	ldr	r1, [sp, #12]
   12160:	mov	r0, #0
   12164:	cmp	r1, #0
   12168:	mov	r1, #0
   1216c:	bne	12198 <__assert_fail@plt+0xe14>
   12170:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12174:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12178:	mvn	r3, #3
   1217c:	add	r1, r3, r1, lsl #2
   12180:	ldr	r4, [r2]
   12184:	ldr	r3, [r2, r1]
   12188:	str	r3, [r2]
   1218c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12190:	str	r4, [r2, r1]
   12194:	mov	r1, #1
   12198:	movw	r8, #37277	; 0x919d
   1219c:	cmp	r6, #0
   121a0:	str	r1, [fp, #-40]	; 0xffffffd8
   121a4:	movt	r8, #2
   121a8:	bne	121d4 <__assert_fail@plt+0xe50>
   121ac:	ldr	r0, [sp, #52]	; 0x34
   121b0:	ldr	r1, [sp, #60]	; 0x3c
   121b4:	mvn	r2, #3
   121b8:	add	r0, r2, r0, lsl #2
   121bc:	ldr	r3, [r1]
   121c0:	ldr	r2, [r1, r0]
   121c4:	str	r2, [r1]
   121c8:	ldr	r1, [sp, #60]	; 0x3c
   121cc:	str	r3, [r1, r0]
   121d0:	mov	r0, #1
   121d4:	str	r0, [sp, #52]	; 0x34
   121d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   121dc:	ldr	r0, [sp, #52]	; 0x34
   121e0:	cmp	r1, #0
   121e4:	cmpne	r0, #0
   121e8:	bne	11f40 <__assert_fail@plt+0xbbc>
   121ec:	movw	r2, #37272	; 0x9198
   121f0:	movw	r7, #37267	; 0x9193
   121f4:	mov	r6, #0
   121f8:	movt	r2, #2
   121fc:	movt	r7, #2
   12200:	str	r6, [sp, #48]	; 0x30
   12204:	ldr	r2, [r2]
   12208:	mov	sl, r7
   1220c:	cmp	r2, #2
   12210:	beq	12230 <__assert_fail@plt+0xeac>
   12214:	ldrb	r2, [sl]
   12218:	ldrb	r3, [sl, #1]
   1221c:	clz	r3, r3
   12220:	clz	r2, r2
   12224:	lsr	r3, r3, #5
   12228:	lsr	r2, r2, #5
   1222c:	orr	r6, r2, r3
   12230:	cmp	r1, #0
   12234:	movwne	r1, #37276	; 0x919c
   12238:	movtne	r1, #2
   1223c:	ldrbne	r1, [r1]
   12240:	orrsne	r2, r6, r1
   12244:	bne	122e0 <__assert_fail@plt+0xf5c>
   12248:	ldr	r0, [sp, #52]	; 0x34
   1224c:	ldr	r7, [sp, #16]
   12250:	cmp	r0, #0
   12254:	ldrbne	r0, [r8]
   12258:	orrsne	r1, r6, r0
   1225c:	bne	12394 <__assert_fail@plt+0x1010>
   12260:	ldr	r4, [sp, #48]	; 0x30
   12264:	mov	r0, r4
   12268:	bl	12994 <__assert_fail@plt+0x1610>
   1226c:	mov	r0, r4
   12270:	bl	13548 <__assert_fail@plt+0x21c4>
   12274:	sub	r0, fp, #40	; 0x28
   12278:	bl	130a4 <__assert_fail@plt+0x1d20>
   1227c:	add	r0, sp, #52	; 0x34
   12280:	bl	130a4 <__assert_fail@plt+0x1d20>
   12284:	mov	r0, r9
   12288:	bl	133a4 <__assert_fail@plt+0x2020>
   1228c:	cmp	r0, #0
   12290:	bne	12574 <__assert_fail@plt+0x11f0>
   12294:	mov	r0, r7
   12298:	bl	133a4 <__assert_fail@plt+0x2020>
   1229c:	cmp	r0, #0
   122a0:	bne	1258c <__assert_fail@plt+0x1208>
   122a4:	ldrb	r0, [sl]
   122a8:	ldrb	r1, [sl, #1]
   122ac:	orrs	r0, r1, r0
   122b0:	moveq	r0, #0
   122b4:	subeq	sp, fp, #28
   122b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122bc:	movw	r1, #31483	; 0x7afb
   122c0:	movt	r1, #1
   122c4:	mov	r0, #0
   122c8:	mov	r2, #5
   122cc:	bl	1115c <dcgettext@plt>
   122d0:	mov	r2, r0
   122d4:	mov	r0, #1
   122d8:	mov	r1, #0
   122dc:	bl	111c8 <error@plt>
   122e0:	cmp	r1, #0
   122e4:	beq	12300 <__assert_fail@plt+0xf7c>
   122e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   122ec:	movw	r1, #37328	; 0x91d0
   122f0:	movt	r1, #2
   122f4:	ldr	r0, [r0]
   122f8:	bl	12a6c <__assert_fail@plt+0x16e8>
   122fc:	ldr	r0, [sp, #52]	; 0x34
   12300:	cmp	r0, #0
   12304:	mov	r2, #1
   12308:	movwne	r1, #37266	; 0x9192
   1230c:	movne	r0, #1
   12310:	movtne	r1, #2
   12314:	strbne	r0, [r1]
   12318:	add	r1, sp, #48	; 0x30
   1231c:	mov	r0, r9
   12320:	bl	12cc8 <__assert_fail@plt+0x1944>
   12324:	cmp	r0, #0
   12328:	beq	12248 <__assert_fail@plt+0xec4>
   1232c:	movw	r5, #37328	; 0x91d0
   12330:	add	r4, sp, #48	; 0x30
   12334:	movt	r5, #2
   12338:	movw	r0, #37276	; 0x919c
   1233c:	movt	r0, #2
   12340:	ldrb	r0, [r0]
   12344:	cmp	r0, #1
   12348:	bne	12358 <__assert_fail@plt+0xfd4>
   1234c:	ldr	r0, [sp, #48]	; 0x30
   12350:	mov	r1, r5
   12354:	bl	12a6c <__assert_fail@plt+0x16e8>
   12358:	ldrb	r0, [sl]
   1235c:	cmp	r0, #0
   12360:	beq	12378 <__assert_fail@plt+0xff4>
   12364:	movw	r0, #37276	; 0x919c
   12368:	movt	r0, #2
   1236c:	ldrb	r0, [r0]
   12370:	cmp	r0, #1
   12374:	bne	12248 <__assert_fail@plt+0xec4>
   12378:	mov	r0, r9
   1237c:	mov	r1, r4
   12380:	mov	r2, #1
   12384:	bl	12cc8 <__assert_fail@plt+0x1944>
   12388:	cmp	r0, #0
   1238c:	bne	12338 <__assert_fail@plt+0xfb4>
   12390:	b	12248 <__assert_fail@plt+0xec4>
   12394:	cmp	r0, #0
   12398:	beq	123b0 <__assert_fail@plt+0x102c>
   1239c:	ldr	r0, [sp, #60]	; 0x3c
   123a0:	ldr	r1, [r0]
   123a4:	movw	r0, #37328	; 0x91d0
   123a8:	movt	r0, #2
   123ac:	bl	12a6c <__assert_fail@plt+0x16e8>
   123b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   123b4:	mov	r2, #2
   123b8:	cmp	r0, #0
   123bc:	movwne	r1, #37266	; 0x9192
   123c0:	movne	r0, #1
   123c4:	movtne	r1, #2
   123c8:	strbne	r0, [r1]
   123cc:	add	r1, sp, #48	; 0x30
   123d0:	mov	r0, r7
   123d4:	bl	12cc8 <__assert_fail@plt+0x1944>
   123d8:	cmp	r0, #0
   123dc:	beq	12260 <__assert_fail@plt+0xedc>
   123e0:	movw	r4, #37328	; 0x91d0
   123e4:	add	r6, sp, #48	; 0x30
   123e8:	movt	r4, #2
   123ec:	ldrb	r0, [r8]
   123f0:	cmp	r0, #1
   123f4:	bne	12404 <__assert_fail@plt+0x1080>
   123f8:	ldr	r1, [sp, #48]	; 0x30
   123fc:	mov	r0, r4
   12400:	bl	12a6c <__assert_fail@plt+0x16e8>
   12404:	ldrb	r0, [sl, #1]
   12408:	cmp	r0, #0
   1240c:	beq	1241c <__assert_fail@plt+0x1098>
   12410:	ldrb	r0, [r8]
   12414:	cmp	r0, #1
   12418:	bne	12260 <__assert_fail@plt+0xedc>
   1241c:	mov	r0, r7
   12420:	mov	r1, r6
   12424:	mov	r2, #2
   12428:	bl	12cc8 <__assert_fail@plt+0x1944>
   1242c:	cmp	r0, #0
   12430:	bne	123ec <__assert_fail@plt+0x1068>
   12434:	b	12260 <__assert_fail@plt+0xedc>
   12438:	cmn	r0, #3
   1243c:	bne	12488 <__assert_fail@plt+0x1104>
   12440:	movw	r0, #37152	; 0x9120
   12444:	movw	r2, #31393	; 0x7aa1
   12448:	mov	r1, #0
   1244c:	movt	r0, #2
   12450:	movt	r2, #1
   12454:	str	r1, [sp, #4]
   12458:	movw	r1, #31212	; 0x79ec
   1245c:	movt	r1, #1
   12460:	ldr	r3, [r0]
   12464:	movw	r0, #37252	; 0x9184
   12468:	str	r2, [sp]
   1246c:	movw	r2, #31379	; 0x7a93
   12470:	movt	r0, #2
   12474:	movt	r2, #1
   12478:	ldr	r0, [r0]
   1247c:	bl	15760 <__assert_fail@plt+0x43dc>
   12480:	mov	r0, #0
   12484:	bl	11234 <exit@plt>
   12488:	cmn	r0, #2
   1248c:	bne	125fc <__assert_fail@plt+0x1278>
   12490:	mov	r0, #0
   12494:	bl	11480 <__assert_fail@plt+0xfc>
   12498:	movw	r1, #31261	; 0x7a1d
   1249c:	movt	r1, #1
   124a0:	mov	r0, #0
   124a4:	mov	r2, #5
   124a8:	bl	1115c <dcgettext@plt>
   124ac:	mov	r4, r0
   124b0:	movw	r0, #37256	; 0x9188
   124b4:	movt	r0, #2
   124b8:	ldr	r0, [r0]
   124bc:	bl	151bc <__assert_fail@plt+0x3e38>
   124c0:	mov	r3, r0
   124c4:	mov	r0, #1
   124c8:	mov	r1, #0
   124cc:	mov	r2, r4
   124d0:	bl	111c8 <error@plt>
   124d4:	cmp	r0, #0
   124d8:	bne	125c4 <__assert_fail@plt+0x1240>
   124dc:	movw	r1, #31406	; 0x7aae
   124e0:	mov	r0, #0
   124e4:	mov	r2, #5
   124e8:	movt	r1, #1
   124ec:	bl	1115c <dcgettext@plt>
   124f0:	mov	r2, r0
   124f4:	mov	r0, #0
   124f8:	mov	r1, #0
   124fc:	bl	111c8 <error@plt>
   12500:	b	125fc <__assert_fail@plt+0x1278>
   12504:	movw	r1, #31286	; 0x7a36
   12508:	movt	r1, #1
   1250c:	b	122c4 <__assert_fail@plt+0xf40>
   12510:	movw	r1, #31338	; 0x7a6a
   12514:	movt	r1, #1
   12518:	b	124a0 <__assert_fail@plt+0x111c>
   1251c:	movw	r1, #31361	; 0x7a81
   12520:	movt	r1, #1
   12524:	b	122c4 <__assert_fail@plt+0xf40>
   12528:	bl	11270 <__errno_location@plt>
   1252c:	ldr	r4, [r0]
   12530:	ldr	r2, [r5]
   12534:	b	125a0 <__assert_fail@plt+0x121c>
   12538:	bl	11270 <__errno_location@plt>
   1253c:	ldr	r4, [r0]
   12540:	ldr	r2, [r5, #4]
   12544:	b	125a0 <__assert_fail@plt+0x121c>
   12548:	bl	11270 <__errno_location@plt>
   1254c:	movw	r1, #31447	; 0x7ad7
   12550:	ldr	r4, [r0]
   12554:	mov	r0, #0
   12558:	mov	r2, #5
   1255c:	movt	r1, #1
   12560:	bl	1115c <dcgettext@plt>
   12564:	mov	r2, r0
   12568:	mov	r0, #1
   1256c:	mov	r1, r4
   12570:	bl	111c8 <error@plt>
   12574:	bl	11270 <__errno_location@plt>
   12578:	ldr	r4, [r0]
   1257c:	movw	r0, #37288	; 0x91a8
   12580:	movt	r0, #2
   12584:	ldr	r2, [r0]
   12588:	b	125a0 <__assert_fail@plt+0x121c>
   1258c:	bl	11270 <__errno_location@plt>
   12590:	ldr	r4, [r0]
   12594:	movw	r0, #37288	; 0x91a8
   12598:	movt	r0, #2
   1259c:	ldr	r2, [r0, #4]
   125a0:	mov	r0, #0
   125a4:	mov	r1, #3
   125a8:	bl	15028 <__assert_fail@plt+0x3ca4>
   125ac:	movw	r2, #31986	; 0x7cf2
   125b0:	mov	r3, r0
   125b4:	mov	r0, #1
   125b8:	mov	r1, r4
   125bc:	movt	r2, #1
   125c0:	bl	111c8 <error@plt>
   125c4:	movw	r1, #31422	; 0x7abe
   125c8:	mov	r0, #0
   125cc:	mov	r2, #5
   125d0:	movt	r1, #1
   125d4:	bl	1115c <dcgettext@plt>
   125d8:	mov	r5, r0
   125dc:	add	r0, r4, r6, lsl #2
   125e0:	ldr	r0, [r0, #-4]
   125e4:	bl	151bc <__assert_fail@plt+0x3e38>
   125e8:	mov	r3, r0
   125ec:	mov	r0, #0
   125f0:	mov	r1, #0
   125f4:	mov	r2, r5
   125f8:	bl	111c8 <error@plt>
   125fc:	mov	r0, #1
   12600:	bl	11480 <__assert_fail@plt+0xfc>
   12604:	push	{r4, r5, r6, r7, fp, lr}
   12608:	add	fp, sp, #16
   1260c:	movw	r5, #37300	; 0x91b4
   12610:	mov	r4, #0
   12614:	mov	r6, #0
   12618:	movt	r5, #2
   1261c:	ldr	r7, [r5, r6, lsl #2]
   12620:	cmp	r7, #0
   12624:	beq	12648 <__assert_fail@plt+0x12c4>
   12628:	ldr	r0, [r7, #20]
   1262c:	bl	13548 <__assert_fail@plt+0x21c4>
   12630:	str	r4, [r7, #20]
   12634:	ldr	r0, [r7, #8]
   12638:	bl	13548 <__assert_fail@plt+0x21c4>
   1263c:	str	r4, [r7, #8]
   12640:	ldr	r0, [r5, r6, lsl #2]
   12644:	bl	13548 <__assert_fail@plt+0x21c4>
   12648:	add	r6, r6, #1
   1264c:	cmp	r6, #2
   12650:	bne	1261c <__assert_fail@plt+0x1298>
   12654:	pop	{r4, r5, r6, r7, fp, pc}
   12658:	push	{r4, r5, fp, lr}
   1265c:	add	fp, sp, #8
   12660:	sub	sp, sp, #8
   12664:	ldr	r5, [r0]
   12668:	mov	r4, r1
   1266c:	cmn	r5, #1
   12670:	cmpne	r5, r4
   12674:	bne	12684 <__assert_fail@plt+0x1300>
   12678:	str	r4, [r0]
   1267c:	sub	sp, fp, #8
   12680:	pop	{r4, r5, fp, pc}
   12684:	movw	r1, #31885	; 0x7c8d
   12688:	mov	r0, #0
   1268c:	mov	r2, #5
   12690:	movt	r1, #1
   12694:	bl	1115c <dcgettext@plt>
   12698:	mov	r2, r0
   1269c:	add	r0, r4, #1
   126a0:	add	r3, r5, #1
   126a4:	mov	r1, #0
   126a8:	str	r0, [sp]
   126ac:	mov	r0, #1
   126b0:	bl	111c8 <error@plt>
   126b4:	push	{r4, r5, fp, lr}
   126b8:	add	fp, sp, #8
   126bc:	sub	sp, sp, #16
   126c0:	mov	r4, r0
   126c4:	movw	r0, #31922	; 0x7cb2
   126c8:	add	r3, sp, #8
   126cc:	mov	r1, #0
   126d0:	mov	r2, #10
   126d4:	mov	r5, #0
   126d8:	movt	r0, #1
   126dc:	str	r0, [sp]
   126e0:	mov	r0, r4
   126e4:	bl	162c4 <__assert_fail@plt+0x4f40>
   126e8:	cmp	r0, #1
   126ec:	beq	12708 <__assert_fail@plt+0x1384>
   126f0:	ldr	r1, [sp, #8]
   126f4:	ldr	r2, [sp, #12]
   126f8:	cmp	r0, #0
   126fc:	bne	12718 <__assert_fail@plt+0x1394>
   12700:	cmp	r2, #0
   12704:	beq	12718 <__assert_fail@plt+0x1394>
   12708:	mvn	r1, #0
   1270c:	str	r5, [sp, #12]
   12710:	str	r1, [sp, #8]
   12714:	b	12728 <__assert_fail@plt+0x13a4>
   12718:	cmp	r0, #0
   1271c:	bne	12734 <__assert_fail@plt+0x13b0>
   12720:	orrs	r0, r1, r2
   12724:	beq	12734 <__assert_fail@plt+0x13b0>
   12728:	sub	r0, r1, #1
   1272c:	sub	sp, fp, #8
   12730:	pop	{r4, r5, fp, pc}
   12734:	movw	r1, #31261	; 0x7a1d
   12738:	mov	r0, #0
   1273c:	mov	r2, #5
   12740:	movt	r1, #1
   12744:	bl	1115c <dcgettext@plt>
   12748:	mov	r5, r0
   1274c:	mov	r0, r4
   12750:	bl	151bc <__assert_fail@plt+0x3e38>
   12754:	mov	r3, r0
   12758:	mov	r0, #1
   1275c:	mov	r1, #0
   12760:	mov	r2, r5
   12764:	bl	111c8 <error@plt>
   12768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1276c:	add	fp, sp, #28
   12770:	sub	sp, sp, #4
   12774:	movw	r8, #31919	; 0x7caf
   12778:	movw	sl, #37148	; 0x911c
   1277c:	mov	r4, r0
   12780:	mov	r9, #0
   12784:	movt	r8, #1
   12788:	movt	sl, #2
   1278c:	mov	r0, r4
   12790:	mov	r1, r8
   12794:	bl	11324 <strpbrk@plt>
   12798:	cmp	r0, #0
   1279c:	mov	r7, #0
   127a0:	strbne	r9, [r0], #1
   127a4:	movne	r7, r0
   127a8:	ldrb	r0, [r4]
   127ac:	sub	r1, r0, #49	; 0x31
   127b0:	cmp	r1, #2
   127b4:	bcs	127d8 <__assert_fail@plt+0x1454>
   127b8:	ldrb	r1, [r4, #1]
   127bc:	cmp	r1, #46	; 0x2e
   127c0:	bne	1282c <__assert_fail@plt+0x14a8>
   127c4:	sub	r5, r0, #48	; 0x30
   127c8:	add	r0, r4, #2
   127cc:	bl	126b4 <__assert_fail@plt+0x1330>
   127d0:	mov	r6, r0
   127d4:	b	127f4 <__assert_fail@plt+0x1470>
   127d8:	cmp	r0, #48	; 0x30
   127dc:	bne	12820 <__assert_fail@plt+0x149c>
   127e0:	ldrb	r0, [r4, #1]
   127e4:	mov	r5, #0
   127e8:	mov	r6, #0
   127ec:	cmp	r0, #0
   127f0:	bne	1282c <__assert_fail@plt+0x14a8>
   127f4:	mov	r0, #12
   127f8:	bl	15868 <__assert_fail@plt+0x44e4>
   127fc:	ldr	r1, [sl]
   12800:	cmp	r7, #0
   12804:	mov	r4, r7
   12808:	stm	r0, {r5, r6, r9}
   1280c:	str	r0, [r1, #8]
   12810:	str	r0, [sl]
   12814:	bne	1278c <__assert_fail@plt+0x1408>
   12818:	sub	sp, fp, #28
   1281c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12820:	movw	r1, #31951	; 0x7ccf
   12824:	movt	r1, #1
   12828:	b	12834 <__assert_fail@plt+0x14b0>
   1282c:	movw	r1, #31923	; 0x7cb3
   12830:	movt	r1, #1
   12834:	mov	r0, #0
   12838:	mov	r2, #5
   1283c:	bl	1115c <dcgettext@plt>
   12840:	mov	r5, r0
   12844:	mov	r0, r4
   12848:	bl	151bc <__assert_fail@plt+0x3e38>
   1284c:	mov	r3, r0
   12850:	mov	r0, #1
   12854:	mov	r1, #0
   12858:	mov	r2, r5
   1285c:	bl	111c8 <error@plt>
   12860:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12864:	add	fp, sp, #24
   12868:	mov	r4, r0
   1286c:	ldr	r0, [r3]
   12870:	movw	r8, #37288	; 0x91a8
   12874:	mov	r5, r3
   12878:	mov	r6, r1
   1287c:	movt	r8, #2
   12880:	cmp	r0, #2
   12884:	bne	12920 <__assert_fail@plt+0x159c>
   12888:	ldr	r7, [r6]
   1288c:	clz	r0, r7
   12890:	lsr	r0, r0, #5
   12894:	ldr	r1, [r6, r0, lsl #2]
   12898:	cmp	r1, #3
   1289c:	bhi	12904 <__assert_fail@plt+0x1580>
   128a0:	ldr	r0, [r8, r0, lsl #2]
   128a4:	add	r3, pc, #0
   128a8:	ldr	pc, [r3, r1, lsl #2]
   128ac:	andeq	r2, r1, r4, asr r9
   128b0:			; <UNDEFINED> instruction: 0x000128bc
   128b4:	ldrdeq	r2, [r1], -ip
   128b8:	andeq	r2, r1, r0, lsl #18
   128bc:	ldr	r1, [r2]
   128c0:	sub	r1, r1, #1
   128c4:	str	r1, [r2]
   128c8:	bl	126b4 <__assert_fail@plt+0x1330>
   128cc:	mov	r1, r0
   128d0:	movw	r0, #37136	; 0x9110
   128d4:	movt	r0, #2
   128d8:	b	128f8 <__assert_fail@plt+0x1574>
   128dc:	ldr	r1, [r2, #4]
   128e0:	sub	r1, r1, #1
   128e4:	str	r1, [r2, #4]
   128e8:	bl	126b4 <__assert_fail@plt+0x1330>
   128ec:	mov	r1, r0
   128f0:	movw	r0, #37140	; 0x9114
   128f4:	movt	r0, #2
   128f8:	bl	12658 <__assert_fail@plt+0x12d4>
   128fc:	b	12904 <__assert_fail@plt+0x1580>
   12900:	bl	12768 <__assert_fail@plt+0x13e4>
   12904:	mov	r0, #1
   12908:	cmp	r7, #0
   1290c:	beq	12920 <__assert_fail@plt+0x159c>
   12910:	ldr	r1, [r6, #4]
   12914:	str	r1, [r6]
   12918:	ldr	r1, [r8, #4]
   1291c:	str	r1, [r8]
   12920:	ldr	r1, [fp, #8]
   12924:	ldr	r2, [r1]
   12928:	str	r2, [r6, r0, lsl #2]
   1292c:	str	r4, [r8, r0, lsl #2]
   12930:	add	r0, r0, #1
   12934:	str	r0, [r5]
   12938:	ldr	r0, [r1]
   1293c:	cmp	r0, #3
   12940:	bne	12950 <__assert_fail@plt+0x15cc>
   12944:	ldr	r0, [fp, #12]
   12948:	mov	r1, #3
   1294c:	str	r1, [r0]
   12950:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12954:	movw	r1, #31989	; 0x7cf5
   12958:	mov	r0, #0
   1295c:	mov	r2, #5
   12960:	movt	r1, #1
   12964:	bl	1115c <dcgettext@plt>
   12968:	mov	r5, r0
   1296c:	mov	r0, #4
   12970:	mov	r1, r4
   12974:	bl	14e84 <__assert_fail@plt+0x3b00>
   12978:	mov	r3, r0
   1297c:	mov	r0, #0
   12980:	mov	r1, #0
   12984:	mov	r2, r5
   12988:	bl	111c8 <error@plt>
   1298c:	mov	r0, #1
   12990:	bl	11480 <__assert_fail@plt+0xfc>
   12994:	cmp	r0, #0
   12998:	bxeq	lr
   1299c:	push	{r4, r5, fp, lr}
   129a0:	add	fp, sp, #8
   129a4:	mov	r4, r0
   129a8:	ldr	r0, [r0, #20]
   129ac:	bl	13548 <__assert_fail@plt+0x21c4>
   129b0:	mov	r5, #0
   129b4:	str	r5, [r4, #20]
   129b8:	ldr	r0, [r4, #8]
   129bc:	bl	13548 <__assert_fail@plt+0x21c4>
   129c0:	str	r5, [r4, #8]
   129c4:	pop	{r4, r5, fp, lr}
   129c8:	bx	lr
   129cc:	push	{r4, r5, r6, r7, fp, lr}
   129d0:	add	fp, sp, #16
   129d4:	mov	r4, r1
   129d8:	mov	r7, r2
   129dc:	mov	r6, r0
   129e0:	ldr	r0, [r1, #4]!
   129e4:	ldr	r2, [r4]
   129e8:	cmp	r2, r0
   129ec:	bne	12a34 <__assert_fail@plt+0x16b0>
   129f0:	ldr	r0, [r4, #8]
   129f4:	mov	r2, #4
   129f8:	bl	15974 <__assert_fail@plt+0x45f0>
   129fc:	str	r0, [r4, #8]
   12a00:	ldr	r2, [r4]
   12a04:	ldr	r1, [r4, #4]
   12a08:	cmp	r2, r1
   12a0c:	bcs	12a34 <__assert_fail@plt+0x16b0>
   12a10:	mov	r3, #0
   12a14:	str	r3, [r0, r2, lsl #2]
   12a18:	add	r0, r2, #1
   12a1c:	cmp	r0, r1
   12a20:	bcs	12a34 <__assert_fail@plt+0x16b0>
   12a24:	ldr	r5, [r4, #8]
   12a28:	str	r3, [r5, r0, lsl #2]
   12a2c:	add	r0, r0, #1
   12a30:	b	12a1c <__assert_fail@plt+0x1698>
   12a34:	ldr	r0, [r4, #8]
   12a38:	add	r1, r0, r2, lsl #2
   12a3c:	mov	r0, r6
   12a40:	mov	r2, r7
   12a44:	bl	12cc8 <__assert_fail@plt+0x1944>
   12a48:	mov	r1, r0
   12a4c:	mov	r0, #0
   12a50:	cmp	r1, #0
   12a54:	beq	12a68 <__assert_fail@plt+0x16e4>
   12a58:	ldr	r0, [r4]
   12a5c:	add	r0, r0, #1
   12a60:	str	r0, [r4]
   12a64:	mov	r0, #1
   12a68:	pop	{r4, r5, r6, r7, fp, pc}
   12a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a70:	add	fp, sp, #28
   12a74:	sub	sp, sp, #4
   12a78:	mov	sl, r0
   12a7c:	movw	r0, #37308	; 0x91bc
   12a80:	mov	r8, r1
   12a84:	movt	r0, #2
   12a88:	ldr	r9, [r0, #8]
   12a8c:	cmp	r9, #0
   12a90:	beq	12b48 <__assert_fail@plt+0x17c4>
   12a94:	movw	r0, #37144	; 0x9118
   12a98:	ldr	r2, [r9]
   12a9c:	movw	r3, #37140	; 0x9114
   12aa0:	mov	r7, sl
   12aa4:	mov	r1, r8
   12aa8:	movw	r4, #37136	; 0x9110
   12aac:	movt	r0, #2
   12ab0:	movt	r3, #2
   12ab4:	movt	r4, #2
   12ab8:	ldr	r5, [r0]
   12abc:	movw	r0, #37328	; 0x91d0
   12ac0:	movt	r0, #2
   12ac4:	cmp	sl, r0
   12ac8:	moveq	r7, r8
   12acc:	cmp	r2, #1
   12ad0:	moveq	r1, sl
   12ad4:	cmp	r2, #0
   12ad8:	moveq	r1, r7
   12adc:	cmp	sl, r0
   12ae0:	moveq	r4, r3
   12ae4:	cmp	r2, #0
   12ae8:	mov	r0, r4
   12aec:	addne	r0, r9, #4
   12af0:	ldr	r0, [r0]
   12af4:	bl	130f4 <__assert_fail@plt+0x1d70>
   12af8:	uxtb	r6, r5
   12afc:	cmp	r5, #0
   12b00:	ldr	r5, [r9, #8]
   12b04:	movwmi	r6, #32
   12b08:	cmp	r5, #0
   12b0c:	beq	12bac <__assert_fail@plt+0x1828>
   12b10:	mov	r0, r6
   12b14:	bl	11378 <putchar_unlocked@plt>
   12b18:	ldr	r0, [r5]
   12b1c:	mov	r1, r8
   12b20:	cmp	r0, #1
   12b24:	moveq	r1, sl
   12b28:	cmp	r0, #0
   12b2c:	mov	r0, r4
   12b30:	addne	r0, r5, #4
   12b34:	moveq	r1, r7
   12b38:	ldr	r0, [r0]
   12b3c:	bl	130f4 <__assert_fail@plt+0x1d70>
   12b40:	ldr	r5, [r5, #8]
   12b44:	b	12b08 <__assert_fail@plt+0x1784>
   12b48:	movw	r0, #37328	; 0x91d0
   12b4c:	movw	r4, #37140	; 0x9114
   12b50:	movw	r5, #37136	; 0x9110
   12b54:	mov	r1, sl
   12b58:	movt	r0, #2
   12b5c:	movt	r4, #2
   12b60:	movt	r5, #2
   12b64:	cmp	sl, r0
   12b68:	mov	r0, r5
   12b6c:	moveq	r0, r4
   12b70:	moveq	r1, r8
   12b74:	ldr	r0, [r0]
   12b78:	bl	130f4 <__assert_fail@plt+0x1d70>
   12b7c:	movw	r0, #37320	; 0x91c8
   12b80:	ldr	r1, [r5]
   12b84:	movt	r0, #2
   12b88:	ldr	r2, [r0]
   12b8c:	mov	r0, sl
   12b90:	bl	13150 <__assert_fail@plt+0x1dcc>
   12b94:	movw	r0, #37324	; 0x91cc
   12b98:	ldr	r1, [r4]
   12b9c:	movt	r0, #2
   12ba0:	ldr	r2, [r0]
   12ba4:	mov	r0, r8
   12ba8:	bl	13150 <__assert_fail@plt+0x1dcc>
   12bac:	movw	r0, #37286	; 0x91a6
   12bb0:	movt	r0, #2
   12bb4:	ldrb	r1, [r0]
   12bb8:	mov	r0, #10
   12bbc:	cmp	r1, #0
   12bc0:	movwne	r0, #0
   12bc4:	sub	sp, fp, #28
   12bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bcc:	b	11378 <putchar_unlocked@plt>
   12bd0:	push	{r4, r5, fp, lr}
   12bd4:	add	fp, sp, #8
   12bd8:	mov	r5, r0
   12bdc:	ldr	r0, [r0, #12]
   12be0:	mov	ip, #0
   12be4:	mov	r4, #0
   12be8:	cmp	r0, r2
   12bec:	mov	r0, #0
   12bf0:	bls	12c00 <__assert_fail@plt+0x187c>
   12bf4:	ldr	r5, [r5, #20]
   12bf8:	ldr	r0, [r5, r2, lsl #3]!
   12bfc:	ldr	r4, [r5, #4]
   12c00:	ldr	r2, [r1, #12]
   12c04:	mov	r5, #0
   12c08:	cmp	r2, r3
   12c0c:	bls	12c1c <__assert_fail@plt+0x1898>
   12c10:	ldr	r1, [r1, #20]
   12c14:	ldr	ip, [r1, r3, lsl #3]!
   12c18:	ldr	r5, [r1, #4]
   12c1c:	cmp	r4, #0
   12c20:	beq	12c58 <__assert_fail@plt+0x18d4>
   12c24:	cmp	r5, #0
   12c28:	beq	12c68 <__assert_fail@plt+0x18e4>
   12c2c:	movw	r1, #37284	; 0x91a4
   12c30:	movt	r1, #2
   12c34:	ldrb	r1, [r1]
   12c38:	cmp	r1, #1
   12c3c:	bne	12c70 <__assert_fail@plt+0x18ec>
   12c40:	cmp	r4, r5
   12c44:	mov	r2, r5
   12c48:	mov	r1, ip
   12c4c:	movcc	r2, r4
   12c50:	bl	1377c <__assert_fail@plt+0x23f8>
   12c54:	b	12cac <__assert_fail@plt+0x1928>
   12c58:	cmp	r5, #0
   12c5c:	mvnne	r5, #0
   12c60:	mov	r0, r5
   12c64:	pop	{r4, r5, fp, pc}
   12c68:	mov	r0, #1
   12c6c:	pop	{r4, r5, fp, pc}
   12c70:	movw	r1, #37264	; 0x9190
   12c74:	movt	r1, #2
   12c78:	ldrb	r1, [r1]
   12c7c:	cmp	r1, #0
   12c80:	beq	12c98 <__assert_fail@plt+0x1914>
   12c84:	mov	r1, r4
   12c88:	mov	r2, ip
   12c8c:	mov	r3, r5
   12c90:	pop	{r4, r5, fp, lr}
   12c94:	b	15cd8 <__assert_fail@plt+0x4954>
   12c98:	cmp	r4, r5
   12c9c:	mov	r2, r5
   12ca0:	mov	r1, ip
   12ca4:	movcc	r2, r4
   12ca8:	bl	11144 <memcmp@plt>
   12cac:	cmp	r0, #0
   12cb0:	popne	{r4, r5, fp, pc}
   12cb4:	subs	r0, r4, r5
   12cb8:	movwne	r0, #1
   12cbc:	cmp	r4, r5
   12cc0:	mvncc	r0, #0
   12cc4:	pop	{r4, r5, fp, pc}
   12cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ccc:	add	fp, sp, #28
   12cd0:	sub	sp, sp, #28
   12cd4:	movw	r8, #37352	; 0x91e8
   12cd8:	mov	r7, r1
   12cdc:	sub	r5, r2, #1
   12ce0:	mov	r9, r0
   12ce4:	mov	r6, r2
   12ce8:	movt	r8, #2
   12cec:	ldr	r0, [r7]
   12cf0:	ldr	r1, [r8, r5, lsl #2]
   12cf4:	cmp	r0, r1
   12cf8:	beq	12d04 <__assert_fail@plt+0x1980>
   12cfc:	mov	r4, r0
   12d00:	b	12d18 <__assert_fail@plt+0x1994>
   12d04:	movw	r1, #37300	; 0x91b4
   12d08:	movt	r1, #2
   12d0c:	ldr	r4, [r1, r5, lsl #2]
   12d10:	str	r0, [r1, r5, lsl #2]
   12d14:	str	r4, [r7]
   12d18:	cmp	r4, #0
   12d1c:	beq	12d2c <__assert_fail@plt+0x19a8>
   12d20:	mov	r0, #0
   12d24:	str	r0, [r4, #12]
   12d28:	b	12d40 <__assert_fail@plt+0x19bc>
   12d2c:	mov	r0, #1
   12d30:	mov	r1, #24
   12d34:	bl	15b6c <__assert_fail@plt+0x47e8>
   12d38:	mov	r4, r0
   12d3c:	str	r0, [r7]
   12d40:	movw	r0, #37286	; 0x91a6
   12d44:	mov	r2, #10
   12d48:	mov	r1, r9
   12d4c:	movt	r0, #2
   12d50:	ldrb	r0, [r0]
   12d54:	cmp	r0, #0
   12d58:	mov	r0, r4
   12d5c:	movwne	r2, #0
   12d60:	bl	1369c <__assert_fail@plt+0x2318>
   12d64:	cmp	r0, #0
   12d68:	beq	12e14 <__assert_fail@plt+0x1a90>
   12d6c:	movw	r1, #37360	; 0x91f0
   12d70:	str	r6, [sp, #20]
   12d74:	movt	r1, #2
   12d78:	ldr	r0, [r1, r5, lsl #3]!
   12d7c:	str	r1, [sp, #16]
   12d80:	adds	r0, r0, #1
   12d84:	str	r0, [r1]
   12d88:	ldr	r0, [r1, #4]
   12d8c:	adc	r0, r0, #0
   12d90:	str	r0, [r1, #4]
   12d94:	ldmib	r4, {r0, r6}
   12d98:	add	sl, r6, r0
   12d9c:	sub	r9, sl, #1
   12da0:	cmp	r6, r9
   12da4:	beq	12e5c <__assert_fail@plt+0x1ad8>
   12da8:	movw	r8, #37144	; 0x9118
   12dac:	str	r5, [sp, #24]
   12db0:	movt	r8, #2
   12db4:	ldr	r1, [r8]
   12db8:	cmp	r1, #0
   12dbc:	bmi	12e34 <__assert_fail@plt+0x1ab0>
   12dc0:	cmp	r1, #10
   12dc4:	beq	12e34 <__assert_fail@plt+0x1ab0>
   12dc8:	sub	r2, r9, r6
   12dcc:	mov	r0, r6
   12dd0:	bl	112c4 <memchr@plt>
   12dd4:	cmp	r0, #0
   12dd8:	beq	12e3c <__assert_fail@plt+0x1ab8>
   12ddc:	mov	r7, r0
   12de0:	sub	r2, r7, r6
   12de4:	mov	r0, r4
   12de8:	mov	r1, r6
   12dec:	bl	13204 <__assert_fail@plt+0x1e80>
   12df0:	ldr	r1, [r8]
   12df4:	add	r6, r7, #1
   12df8:	sub	r2, r9, r6
   12dfc:	mov	r0, r6
   12e00:	bl	112c4 <memchr@plt>
   12e04:	mov	r7, r0
   12e08:	cmp	r0, #0
   12e0c:	bne	12de0 <__assert_fail@plt+0x1a5c>
   12e10:	b	12e3c <__assert_fail@plt+0x1ab8>
   12e14:	mov	r0, r9
   12e18:	bl	111b0 <ferror_unlocked@plt>
   12e1c:	cmp	r0, #0
   12e20:	bne	13078 <__assert_fail@plt+0x1cf4>
   12e24:	mov	r0, r4
   12e28:	bl	12994 <__assert_fail@plt+0x1610>
   12e2c:	mov	r0, #0
   12e30:	b	13070 <__assert_fail@plt+0x1cec>
   12e34:	cmn	r1, #1
   12e38:	ble	12f18 <__assert_fail@plt+0x1b94>
   12e3c:	sub	r2, r9, r6
   12e40:	mov	r0, r4
   12e44:	mov	r1, r6
   12e48:	bl	13204 <__assert_fail@plt+0x1e80>
   12e4c:	movw	r5, #37352	; 0x91e8
   12e50:	movt	r5, #2
   12e54:	mov	r8, r5
   12e58:	ldr	r5, [sp, #24]
   12e5c:	ldr	r0, [r8, r5, lsl #2]
   12e60:	cmp	r0, #0
   12e64:	beq	13068 <__assert_fail@plt+0x1ce4>
   12e68:	movw	r7, #37272	; 0x9198
   12e6c:	movt	r7, #2
   12e70:	ldr	r1, [r7]
   12e74:	cmp	r1, #1
   12e78:	beq	12e98 <__assert_fail@plt+0x1b14>
   12e7c:	cmp	r1, #2
   12e80:	beq	13068 <__assert_fail@plt+0x1ce4>
   12e84:	movw	r1, #37266	; 0x9192
   12e88:	movt	r1, #2
   12e8c:	ldrb	r1, [r1]
   12e90:	cmp	r1, #1
   12e94:	bne	13068 <__assert_fail@plt+0x1ce4>
   12e98:	movw	r6, #37267	; 0x9193
   12e9c:	movt	r6, #2
   12ea0:	ldrb	r1, [r6, r5]
   12ea4:	cmp	r1, #0
   12ea8:	bne	13068 <__assert_fail@plt+0x1ce4>
   12eac:	ldr	r3, [sp, #20]
   12eb0:	movw	r1, #37136	; 0x9110
   12eb4:	movw	r2, #37140	; 0x9114
   12eb8:	movt	r1, #2
   12ebc:	movt	r2, #2
   12ec0:	cmp	r3, #1
   12ec4:	moveq	r2, r1
   12ec8:	mov	r1, r4
   12ecc:	ldr	r2, [r2]
   12ed0:	mov	r3, r2
   12ed4:	bl	12bd0 <__assert_fail@plt+0x184c>
   12ed8:	cmp	r0, #1
   12edc:	blt	13068 <__assert_fail@plt+0x1ce4>
   12ee0:	ldr	r0, [r4, #4]
   12ee4:	mov	sl, r5
   12ee8:	mov	r9, r8
   12eec:	cmp	r0, #0
   12ef0:	beq	13004 <__assert_fail@plt+0x1c80>
   12ef4:	ldr	r1, [r4, #8]
   12ef8:	sub	r2, r0, #1
   12efc:	mvn	r5, #-2147483648	; 0x80000000
   12f00:	ldrb	r1, [r1, r2]
   12f04:	cmp	r1, #10
   12f08:	moveq	r0, r2
   12f0c:	cmn	r0, #-2147483646	; 0x80000002
   12f10:	movls	r5, r0
   12f14:	b	1300c <__assert_fail@plt+0x1c88>
   12f18:	sub	r7, r0, #1
   12f1c:	bl	11228 <__ctype_b_loc@plt>
   12f20:	movw	r5, #37352	; 0x91e8
   12f24:	ldr	r3, [r0]
   12f28:	movt	r5, #2
   12f2c:	mov	r8, r5
   12f30:	ldr	r5, [sp, #24]
   12f34:	ldrb	r1, [r6]
   12f38:	cmp	r1, #10
   12f3c:	beq	12f50 <__assert_fail@plt+0x1bcc>
   12f40:	add	r1, r3, r1, lsl #1
   12f44:	ldrh	r1, [r1]
   12f48:	ands	r1, r1, #1
   12f4c:	beq	12f60 <__assert_fail@plt+0x1bdc>
   12f50:	subs	r7, r7, #1
   12f54:	add	r6, r6, #1
   12f58:	bne	12f34 <__assert_fail@plt+0x1bb0>
   12f5c:	b	12e5c <__assert_fail@plt+0x1ad8>
   12f60:	sub	r8, sl, #2
   12f64:	add	r2, r6, #1
   12f68:	mov	r1, r6
   12f6c:	cmp	r8, r1
   12f70:	beq	12e3c <__assert_fail@plt+0x1ab8>
   12f74:	add	r7, r1, #1
   12f78:	ldrb	r1, [r1, #1]
   12f7c:	mov	r5, r2
   12f80:	cmp	r1, #10
   12f84:	beq	12fa0 <__assert_fail@plt+0x1c1c>
   12f88:	add	r1, r3, r1, lsl #1
   12f8c:	add	r2, r5, #1
   12f90:	ldrh	r1, [r1]
   12f94:	ands	r1, r1, #1
   12f98:	mov	r1, r7
   12f9c:	beq	12f6c <__assert_fail@plt+0x1be8>
   12fa0:	mov	sl, r0
   12fa4:	sub	r2, r7, r6
   12fa8:	mov	r0, r4
   12fac:	mov	r1, r6
   12fb0:	bl	13204 <__assert_fail@plt+0x1e80>
   12fb4:	cmp	r8, r7
   12fb8:	beq	12ffc <__assert_fail@plt+0x1c78>
   12fbc:	ldr	r3, [sl]
   12fc0:	mov	r0, sl
   12fc4:	ldrb	r1, [r5, #1]
   12fc8:	cmp	r1, #10
   12fcc:	beq	12fe0 <__assert_fail@plt+0x1c5c>
   12fd0:	add	r1, r3, r1, lsl #1
   12fd4:	ldrh	r1, [r1]
   12fd8:	ands	r1, r1, #1
   12fdc:	beq	12ff0 <__assert_fail@plt+0x1c6c>
   12fe0:	add	r5, r5, #1
   12fe4:	cmp	r8, r5
   12fe8:	bne	12fc4 <__assert_fail@plt+0x1c40>
   12fec:	b	12ffc <__assert_fail@plt+0x1c78>
   12ff0:	add	r6, r5, #1
   12ff4:	cmp	r8, r5
   12ff8:	bne	12f64 <__assert_fail@plt+0x1be0>
   12ffc:	mov	r6, r9
   13000:	b	12e3c <__assert_fail@plt+0x1ab8>
   13004:	mov	r0, #0
   13008:	mov	r5, r0
   1300c:	movw	r1, #32017	; 0x7d11
   13010:	ldr	r8, [r7]
   13014:	mov	r0, #0
   13018:	mov	r2, #5
   1301c:	movt	r1, #1
   13020:	bl	1115c <dcgettext@plt>
   13024:	mov	r2, r0
   13028:	movw	r0, #37288	; 0x91a8
   1302c:	ldr	r7, [r4, #8]
   13030:	movt	r0, #2
   13034:	ldr	r3, [r0, sl, lsl #2]
   13038:	ldr	r0, [sp, #16]
   1303c:	ldrd	r0, [r0]
   13040:	stm	sp, {r0, r1, r5, r7}
   13044:	sub	r0, r8, #1
   13048:	mov	r1, #0
   1304c:	mov	r5, sl
   13050:	clz	r0, r0
   13054:	lsr	r0, r0, #5
   13058:	bl	111c8 <error@plt>
   1305c:	mov	r0, #1
   13060:	mov	r8, r9
   13064:	strb	r0, [r6, sl]
   13068:	mov	r0, #1
   1306c:	str	r4, [r8, r5, lsl #2]
   13070:	sub	sp, fp, #28
   13074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13078:	bl	11270 <__errno_location@plt>
   1307c:	movw	r1, #32006	; 0x7d06
   13080:	ldr	r4, [r0]
   13084:	mov	r0, #0
   13088:	mov	r2, #5
   1308c:	movt	r1, #1
   13090:	bl	1115c <dcgettext@plt>
   13094:	mov	r2, r0
   13098:	mov	r0, #1
   1309c:	mov	r1, r4
   130a0:	bl	111c8 <error@plt>
   130a4:	push	{r4, r5, fp, lr}
   130a8:	add	fp, sp, #8
   130ac:	mov	r4, r0
   130b0:	ldr	r0, [r0, #4]
   130b4:	cmp	r0, #0
   130b8:	beq	130e8 <__assert_fail@plt+0x1d64>
   130bc:	mov	r5, #0
   130c0:	ldr	r0, [r4, #8]
   130c4:	ldr	r0, [r0, r5, lsl #2]
   130c8:	bl	12994 <__assert_fail@plt+0x1610>
   130cc:	ldr	r0, [r4, #8]
   130d0:	ldr	r0, [r0, r5, lsl #2]
   130d4:	bl	13548 <__assert_fail@plt+0x21c4>
   130d8:	ldr	r0, [r4, #4]
   130dc:	add	r5, r5, #1
   130e0:	cmp	r5, r0
   130e4:	bcc	130c0 <__assert_fail@plt+0x1d3c>
   130e8:	ldr	r0, [r4, #8]
   130ec:	pop	{r4, r5, fp, lr}
   130f0:	b	13548 <__assert_fail@plt+0x21c4>
   130f4:	ldr	r2, [r1, #12]
   130f8:	cmp	r2, r0
   130fc:	bls	1312c <__assert_fail@plt+0x1da8>
   13100:	ldr	r1, [r1, #20]
   13104:	add	r2, r1, r0, lsl #3
   13108:	ldr	r2, [r2, #4]
   1310c:	cmp	r2, #0
   13110:	beq	1312c <__assert_fail@plt+0x1da8>
   13114:	ldr	r0, [r1, r0, lsl #3]
   13118:	movw	r1, #37252	; 0x9184
   1311c:	movt	r1, #2
   13120:	ldr	r3, [r1]
   13124:	mov	r1, #1
   13128:	b	11138 <fwrite_unlocked@plt>
   1312c:	movw	r0, #37280	; 0x91a0
   13130:	movt	r0, #2
   13134:	ldr	r0, [r0]
   13138:	cmp	r0, #0
   1313c:	bxeq	lr
   13140:	movw	r1, #37252	; 0x9184
   13144:	movt	r1, #2
   13148:	ldr	r1, [r1]
   1314c:	b	110cc <fputs_unlocked@plt>
   13150:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13154:	add	fp, sp, #24
   13158:	mov	r5, r0
   1315c:	movw	r0, #37285	; 0x91a5
   13160:	mov	r4, r2
   13164:	mov	r9, r1
   13168:	movt	r0, #2
   1316c:	ldrb	r0, [r0]
   13170:	cmp	r0, #0
   13174:	movw	r0, #37144	; 0x9118
   13178:	movt	r0, #2
   1317c:	ldreq	r4, [r5, #12]
   13180:	ldr	r8, [r0]
   13184:	cmp	r8, #0
   13188:	movwmi	r8, #32
   1318c:	cmp	r9, #0
   13190:	cmpne	r4, #0
   13194:	bne	131cc <__assert_fail@plt+0x1e48>
   13198:	add	r6, r9, #1
   1319c:	cmp	r6, r4
   131a0:	bcs	131c8 <__assert_fail@plt+0x1e44>
   131a4:	uxtb	r7, r8
   131a8:	mov	r0, r7
   131ac:	bl	11378 <putchar_unlocked@plt>
   131b0:	mov	r0, r6
   131b4:	mov	r1, r5
   131b8:	bl	130f4 <__assert_fail@plt+0x1d70>
   131bc:	add	r6, r6, #1
   131c0:	cmp	r4, r6
   131c4:	bne	131a8 <__assert_fail@plt+0x1e24>
   131c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131cc:	uxtb	r7, r8
   131d0:	mov	r6, #1
   131d4:	mov	r0, r7
   131d8:	bl	11378 <putchar_unlocked@plt>
   131dc:	sub	r0, r6, #1
   131e0:	mov	r1, r5
   131e4:	bl	130f4 <__assert_fail@plt+0x1d70>
   131e8:	cmp	r6, r9
   131ec:	bcs	13198 <__assert_fail@plt+0x1e14>
   131f0:	add	r0, r6, #1
   131f4:	cmp	r6, r4
   131f8:	mov	r6, r0
   131fc:	bcc	131d4 <__assert_fail@plt+0x1e50>
   13200:	b	13198 <__assert_fail@plt+0x1e14>
   13204:	push	{r4, r5, r6, sl, fp, lr}
   13208:	add	fp, sp, #16
   1320c:	mov	r6, r1
   13210:	mov	r1, r0
   13214:	mov	r4, r0
   13218:	mov	r5, r2
   1321c:	ldr	r0, [r1, #16]!
   13220:	ldr	r2, [r1, #-4]
   13224:	cmp	r2, r0
   13228:	bcs	13234 <__assert_fail@plt+0x1eb0>
   1322c:	ldr	r0, [r4, #20]
   13230:	b	13248 <__assert_fail@plt+0x1ec4>
   13234:	ldr	r0, [r4, #20]
   13238:	mov	r2, #8
   1323c:	bl	15974 <__assert_fail@plt+0x45f0>
   13240:	str	r0, [r4, #20]
   13244:	ldr	r2, [r4, #12]
   13248:	str	r6, [r0, r2, lsl #3]!
   1324c:	str	r5, [r0, #4]
   13250:	add	r0, r2, #1
   13254:	str	r0, [r4, #12]
   13258:	pop	{r4, r5, r6, sl, fp, pc}
   1325c:	movw	r1, #37376	; 0x9200
   13260:	movt	r1, #2
   13264:	str	r0, [r1]
   13268:	bx	lr
   1326c:	movw	r1, #37380	; 0x9204
   13270:	movt	r1, #2
   13274:	strb	r0, [r1]
   13278:	bx	lr
   1327c:	push	{r4, r5, r6, sl, fp, lr}
   13280:	add	fp, sp, #16
   13284:	sub	sp, sp, #8
   13288:	movw	r0, #37252	; 0x9184
   1328c:	movt	r0, #2
   13290:	ldr	r0, [r0]
   13294:	bl	16a54 <__assert_fail@plt+0x56d0>
   13298:	cmp	r0, #0
   1329c:	beq	132c4 <__assert_fail@plt+0x1f40>
   132a0:	movw	r0, #37380	; 0x9204
   132a4:	movt	r0, #2
   132a8:	ldrb	r0, [r0]
   132ac:	cmp	r0, #0
   132b0:	beq	132e4 <__assert_fail@plt+0x1f60>
   132b4:	bl	11270 <__errno_location@plt>
   132b8:	ldr	r0, [r0]
   132bc:	cmp	r0, #32
   132c0:	bne	132e4 <__assert_fail@plt+0x1f60>
   132c4:	movw	r0, #37240	; 0x9178
   132c8:	movt	r0, #2
   132cc:	ldr	r0, [r0]
   132d0:	bl	16a54 <__assert_fail@plt+0x56d0>
   132d4:	cmp	r0, #0
   132d8:	subeq	sp, fp, #16
   132dc:	popeq	{r4, r5, r6, sl, fp, pc}
   132e0:	b	13354 <__assert_fail@plt+0x1fd0>
   132e4:	movw	r1, #32247	; 0x7df7
   132e8:	mov	r0, #0
   132ec:	mov	r2, #5
   132f0:	movt	r1, #1
   132f4:	bl	1115c <dcgettext@plt>
   132f8:	mov	r4, r0
   132fc:	movw	r0, #37376	; 0x9200
   13300:	movt	r0, #2
   13304:	ldr	r6, [r0]
   13308:	bl	11270 <__errno_location@plt>
   1330c:	ldr	r5, [r0]
   13310:	cmp	r6, #0
   13314:	bne	13330 <__assert_fail@plt+0x1fac>
   13318:	movw	r2, #31986	; 0x7cf2
   1331c:	mov	r0, #0
   13320:	mov	r1, r5
   13324:	mov	r3, r4
   13328:	movt	r2, #1
   1332c:	b	13350 <__assert_fail@plt+0x1fcc>
   13330:	mov	r0, r6
   13334:	bl	14f7c <__assert_fail@plt+0x3bf8>
   13338:	movw	r2, #32259	; 0x7e03
   1333c:	mov	r3, r0
   13340:	str	r4, [sp]
   13344:	mov	r0, #0
   13348:	mov	r1, r5
   1334c:	movt	r2, #1
   13350:	bl	111c8 <error@plt>
   13354:	movw	r0, #37156	; 0x9124
   13358:	movt	r0, #2
   1335c:	ldr	r0, [r0]
   13360:	bl	11114 <_exit@plt>
   13364:	b	110f0 <posix_fadvise64@plt>
   13368:	cmp	r0, #0
   1336c:	bxeq	lr
   13370:	push	{r4, sl, fp, lr}
   13374:	add	fp, sp, #8
   13378:	sub	sp, sp, #16
   1337c:	mov	r4, r1
   13380:	bl	112a0 <fileno@plt>
   13384:	mov	r1, #0
   13388:	mov	r2, #0
   1338c:	mov	r3, #0
   13390:	str	r1, [sp]
   13394:	stmib	sp, {r1, r4}
   13398:	bl	110f0 <posix_fadvise64@plt>
   1339c:	sub	sp, fp, #8
   133a0:	pop	{r4, sl, fp, pc}
   133a4:	push	{r4, r5, r6, sl, fp, lr}
   133a8:	add	fp, sp, #16
   133ac:	sub	sp, sp, #8
   133b0:	mov	r4, r0
   133b4:	bl	112a0 <fileno@plt>
   133b8:	cmn	r0, #1
   133bc:	ble	13430 <__assert_fail@plt+0x20ac>
   133c0:	mov	r0, r4
   133c4:	bl	111f8 <__freading@plt>
   133c8:	cmp	r0, #0
   133cc:	beq	133f8 <__assert_fail@plt+0x2074>
   133d0:	mov	r0, r4
   133d4:	bl	112a0 <fileno@plt>
   133d8:	mov	r1, #1
   133dc:	mov	r2, #0
   133e0:	mov	r3, #0
   133e4:	str	r1, [sp]
   133e8:	bl	1118c <lseek64@plt>
   133ec:	and	r0, r0, r1
   133f0:	cmn	r0, #1
   133f4:	beq	13430 <__assert_fail@plt+0x20ac>
   133f8:	mov	r0, r4
   133fc:	bl	13440 <__assert_fail@plt+0x20bc>
   13400:	cmp	r0, #0
   13404:	beq	13430 <__assert_fail@plt+0x20ac>
   13408:	bl	11270 <__errno_location@plt>
   1340c:	ldr	r6, [r0]
   13410:	mov	r5, r0
   13414:	mov	r0, r4
   13418:	bl	112d0 <fclose@plt>
   1341c:	cmp	r6, #0
   13420:	strne	r6, [r5]
   13424:	mvnne	r0, #0
   13428:	sub	sp, fp, #16
   1342c:	pop	{r4, r5, r6, sl, fp, pc}
   13430:	mov	r0, r4
   13434:	sub	sp, fp, #16
   13438:	pop	{r4, r5, r6, sl, fp, lr}
   1343c:	b	112d0 <fclose@plt>
   13440:	push	{r4, sl, fp, lr}
   13444:	add	fp, sp, #8
   13448:	sub	sp, sp, #8
   1344c:	mov	r4, r0
   13450:	cmp	r0, #0
   13454:	beq	1348c <__assert_fail@plt+0x2108>
   13458:	mov	r0, r4
   1345c:	bl	111f8 <__freading@plt>
   13460:	cmp	r0, #0
   13464:	beq	1348c <__assert_fail@plt+0x2108>
   13468:	ldrb	r0, [r4, #1]
   1346c:	tst	r0, #1
   13470:	beq	1348c <__assert_fail@plt+0x2108>
   13474:	mov	r0, #1
   13478:	mov	r2, #0
   1347c:	mov	r3, #0
   13480:	str	r0, [sp]
   13484:	mov	r0, r4
   13488:	bl	13570 <__assert_fail@plt+0x21ec>
   1348c:	mov	r0, r4
   13490:	sub	sp, fp, #8
   13494:	pop	{r4, sl, fp, lr}
   13498:	b	110fc <fflush@plt>
   1349c:	push	{r4, r5, r6, r7, fp, lr}
   134a0:	add	fp, sp, #16
   134a4:	mov	r5, r1
   134a8:	bl	11318 <fopen64@plt>
   134ac:	mov	r4, #0
   134b0:	cmp	r0, #0
   134b4:	beq	13540 <__assert_fail@plt+0x21bc>
   134b8:	mov	r6, r0
   134bc:	bl	112a0 <fileno@plt>
   134c0:	cmp	r0, #2
   134c4:	bhi	13520 <__assert_fail@plt+0x219c>
   134c8:	bl	1539c <__assert_fail@plt+0x4018>
   134cc:	cmn	r0, #1
   134d0:	ble	13528 <__assert_fail@plt+0x21a4>
   134d4:	mov	r7, r0
   134d8:	mov	r0, r6
   134dc:	bl	133a4 <__assert_fail@plt+0x2020>
   134e0:	cmp	r0, #0
   134e4:	bne	13500 <__assert_fail@plt+0x217c>
   134e8:	mov	r0, r7
   134ec:	mov	r1, r5
   134f0:	bl	110b4 <fdopen@plt>
   134f4:	mov	r4, r0
   134f8:	cmp	r0, #0
   134fc:	bne	13540 <__assert_fail@plt+0x21bc>
   13500:	bl	11270 <__errno_location@plt>
   13504:	ldr	r5, [r0]
   13508:	mov	r4, r0
   1350c:	mov	r0, r7
   13510:	bl	1136c <close@plt>
   13514:	str	r5, [r4]
   13518:	mov	r4, #0
   1351c:	b	13540 <__assert_fail@plt+0x21bc>
   13520:	mov	r4, r6
   13524:	b	13540 <__assert_fail@plt+0x21bc>
   13528:	bl	11270 <__errno_location@plt>
   1352c:	ldr	r7, [r0]
   13530:	mov	r5, r0
   13534:	mov	r0, r6
   13538:	bl	133a4 <__assert_fail@plt+0x2020>
   1353c:	str	r7, [r5]
   13540:	mov	r0, r4
   13544:	pop	{r4, r5, r6, r7, fp, pc}
   13548:	push	{r4, r5, r6, sl, fp, lr}
   1354c:	add	fp, sp, #16
   13550:	mov	r4, r0
   13554:	bl	11270 <__errno_location@plt>
   13558:	ldr	r6, [r0]
   1355c:	mov	r5, r0
   13560:	mov	r0, r4
   13564:	bl	11108 <free@plt>
   13568:	str	r6, [r5]
   1356c:	pop	{r4, r5, r6, sl, fp, pc}
   13570:	push	{r4, r5, r6, r7, fp, lr}
   13574:	add	fp, sp, #16
   13578:	sub	sp, sp, #8
   1357c:	mov	r4, r0
   13580:	ldr	r0, [r0, #4]
   13584:	mov	r5, r3
   13588:	mov	r6, r2
   1358c:	ldr	r1, [r4, #8]
   13590:	cmp	r1, r0
   13594:	bne	135b0 <__assert_fail@plt+0x222c>
   13598:	ldrd	r0, [r4, #16]
   1359c:	cmp	r1, r0
   135a0:	bne	135b0 <__assert_fail@plt+0x222c>
   135a4:	ldr	r0, [r4, #36]	; 0x24
   135a8:	cmp	r0, #0
   135ac:	beq	135c8 <__assert_fail@plt+0x2244>
   135b0:	mov	r0, r4
   135b4:	mov	r2, r6
   135b8:	mov	r3, r5
   135bc:	sub	sp, fp, #16
   135c0:	pop	{r4, r5, r6, r7, fp, lr}
   135c4:	b	112dc <fseeko64@plt>
   135c8:	ldr	r7, [fp, #8]
   135cc:	mov	r0, r4
   135d0:	bl	112a0 <fileno@plt>
   135d4:	mov	r2, r6
   135d8:	mov	r3, r5
   135dc:	str	r7, [sp]
   135e0:	bl	1118c <lseek64@plt>
   135e4:	and	r2, r0, r1
   135e8:	cmn	r2, #1
   135ec:	beq	13608 <__assert_fail@plt+0x2284>
   135f0:	strd	r0, [r4, #80]	; 0x50
   135f4:	ldr	r0, [r4]
   135f8:	bic	r0, r0, #16
   135fc:	str	r0, [r4]
   13600:	mov	r0, #0
   13604:	b	1360c <__assert_fail@plt+0x2288>
   13608:	mvn	r0, #0
   1360c:	sub	sp, fp, #16
   13610:	pop	{r4, r5, r6, r7, fp, pc}
   13614:	push	{r4, sl, fp, lr}
   13618:	add	fp, sp, #8
   1361c:	sub	sp, sp, #264	; 0x108
   13620:	add	r1, sp, #7
   13624:	movw	r2, #257	; 0x101
   13628:	bl	15308 <__assert_fail@plt+0x3f84>
   1362c:	mov	r4, #0
   13630:	cmp	r0, #0
   13634:	bne	13674 <__assert_fail@plt+0x22f0>
   13638:	movw	r1, #32266	; 0x7e0a
   1363c:	add	r0, sp, #7
   13640:	mov	r2, #2
   13644:	movt	r1, #1
   13648:	bl	11240 <bcmp@plt>
   1364c:	cmp	r0, #0
   13650:	beq	13674 <__assert_fail@plt+0x22f0>
   13654:	movw	r1, #32268	; 0x7e0c
   13658:	add	r0, sp, #7
   1365c:	mov	r2, #6
   13660:	movt	r1, #1
   13664:	bl	11240 <bcmp@plt>
   13668:	cmp	r0, #0
   1366c:	mov	r4, r0
   13670:	movwne	r4, #1
   13674:	mov	r0, r4
   13678:	sub	sp, fp, #8
   1367c:	pop	{r4, sl, fp, pc}
   13680:	mov	r1, #0
   13684:	str	r1, [r0]
   13688:	str	r1, [r0, #4]
   1368c:	str	r1, [r0, #8]
   13690:	bx	lr
   13694:	mov	r2, #10
   13698:	b	1369c <__assert_fail@plt+0x2318>
   1369c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136a0:	add	fp, sp, #28
   136a4:	sub	sp, sp, #4
   136a8:	ldr	r5, [r0]
   136ac:	ldr	r6, [r0, #8]
   136b0:	mov	r4, r0
   136b4:	mov	r0, r1
   136b8:	mov	sl, r2
   136bc:	mov	r8, r1
   136c0:	bl	11360 <feof_unlocked@plt>
   136c4:	cmp	r0, #0
   136c8:	beq	136d4 <__assert_fail@plt+0x2350>
   136cc:	mov	r4, #0
   136d0:	b	13768 <__assert_fail@plt+0x23e4>
   136d4:	add	r9, r6, r5
   136d8:	mov	r7, r6
   136dc:	mov	r0, r8
   136e0:	bl	11150 <getc_unlocked@plt>
   136e4:	mov	r5, r0
   136e8:	cmn	r0, #1
   136ec:	bne	13718 <__assert_fail@plt+0x2394>
   136f0:	cmp	r7, r6
   136f4:	beq	136cc <__assert_fail@plt+0x2348>
   136f8:	mov	r0, r8
   136fc:	bl	111b0 <ferror_unlocked@plt>
   13700:	cmp	r0, #0
   13704:	bne	136cc <__assert_fail@plt+0x2348>
   13708:	ldrb	r0, [r7, #-1]
   1370c:	mov	r5, sl
   13710:	cmp	r0, sl
   13714:	beq	13760 <__assert_fail@plt+0x23dc>
   13718:	cmp	r7, r9
   1371c:	bne	13754 <__assert_fail@plt+0x23d0>
   13720:	ldr	r7, [r4]
   13724:	mov	r0, #1
   13728:	mov	r1, r4
   1372c:	mov	r2, #1
   13730:	mvn	r3, #0
   13734:	str	r0, [sp]
   13738:	mov	r0, r6
   1373c:	bl	159c8 <__assert_fail@plt+0x4644>
   13740:	str	r0, [r4, #8]
   13744:	mov	r6, r0
   13748:	add	r7, r0, r7
   1374c:	ldr	r0, [r4]
   13750:	add	r9, r6, r0
   13754:	strb	r5, [r7], #1
   13758:	cmp	r5, sl
   1375c:	bne	136dc <__assert_fail@plt+0x2358>
   13760:	sub	r0, r7, r6
   13764:	str	r0, [r4, #4]
   13768:	mov	r0, r4
   1376c:	sub	sp, fp, #28
   13770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13774:	ldr	r0, [r0, #8]
   13778:	b	13548 <__assert_fail@plt+0x21c4>
   1377c:	push	{r4, r5, r6, sl, fp, lr}
   13780:	add	fp, sp, #16
   13784:	cmp	r2, #0
   13788:	beq	137c8 <__assert_fail@plt+0x2444>
   1378c:	mov	r4, r2
   13790:	mov	r5, r1
   13794:	mov	r6, r0
   13798:	bl	11204 <__ctype_toupper_loc@plt>
   1379c:	ldr	r1, [r0]
   137a0:	ldrb	r0, [r5]
   137a4:	ldrb	r2, [r6]
   137a8:	ldr	r0, [r1, r0, lsl #2]
   137ac:	ldr	r2, [r1, r2, lsl #2]
   137b0:	subs	r0, r2, r0
   137b4:	bne	137cc <__assert_fail@plt+0x2448>
   137b8:	add	r6, r6, #1
   137bc:	add	r5, r5, #1
   137c0:	subs	r4, r4, #1
   137c4:	bne	137a0 <__assert_fail@plt+0x241c>
   137c8:	mov	r0, #0
   137cc:	pop	{r4, r5, r6, sl, fp, pc}
   137d0:	push	{r4, r5, fp, lr}
   137d4:	add	fp, sp, #8
   137d8:	cmp	r0, #0
   137dc:	beq	13870 <__assert_fail@plt+0x24ec>
   137e0:	mov	r1, #47	; 0x2f
   137e4:	mov	r4, r0
   137e8:	bl	11300 <strrchr@plt>
   137ec:	cmp	r0, #0
   137f0:	mov	r5, r4
   137f4:	addne	r5, r0, #1
   137f8:	sub	r0, r5, r4
   137fc:	cmp	r0, #7
   13800:	blt	13854 <__assert_fail@plt+0x24d0>
   13804:	movw	r1, #32330	; 0x7e4a
   13808:	sub	r0, r5, #7
   1380c:	mov	r2, #7
   13810:	movt	r1, #1
   13814:	bl	11348 <strncmp@plt>
   13818:	cmp	r0, #0
   1381c:	bne	13854 <__assert_fail@plt+0x24d0>
   13820:	movw	r1, #32338	; 0x7e52
   13824:	mov	r0, r5
   13828:	mov	r2, #3
   1382c:	movt	r1, #1
   13830:	bl	11348 <strncmp@plt>
   13834:	cmp	r0, #0
   13838:	beq	13844 <__assert_fail@plt+0x24c0>
   1383c:	mov	r4, r5
   13840:	b	13854 <__assert_fail@plt+0x24d0>
   13844:	movw	r0, #37224	; 0x9168
   13848:	add	r4, r5, #3
   1384c:	movt	r0, #2
   13850:	str	r4, [r0]
   13854:	movw	r0, #37228	; 0x916c
   13858:	movt	r0, #2
   1385c:	str	r4, [r0]
   13860:	movw	r0, #37384	; 0x9208
   13864:	movt	r0, #2
   13868:	str	r4, [r0]
   1386c:	pop	{r4, r5, fp, pc}
   13870:	movw	r0, #37240	; 0x9178
   13874:	movt	r0, #2
   13878:	ldr	r1, [r0]
   1387c:	movw	r0, #32274	; 0x7e12
   13880:	movt	r0, #1
   13884:	bl	1133c <fputs@plt>
   13888:	bl	11354 <abort@plt>
   1388c:	push	{r4, r5, r6, sl, fp, lr}
   13890:	add	fp, sp, #16
   13894:	mov	r4, r0
   13898:	movw	r0, #37392	; 0x9210
   1389c:	movt	r0, #2
   138a0:	cmp	r4, #0
   138a4:	moveq	r4, r0
   138a8:	bl	11270 <__errno_location@plt>
   138ac:	ldr	r6, [r0]
   138b0:	mov	r5, r0
   138b4:	mov	r0, r4
   138b8:	mov	r1, #48	; 0x30
   138bc:	bl	15bb8 <__assert_fail@plt+0x4834>
   138c0:	str	r6, [r5]
   138c4:	pop	{r4, r5, r6, sl, fp, pc}
   138c8:	movw	r1, #37392	; 0x9210
   138cc:	cmp	r0, #0
   138d0:	movt	r1, #2
   138d4:	movne	r1, r0
   138d8:	ldr	r0, [r1]
   138dc:	bx	lr
   138e0:	movw	r2, #37392	; 0x9210
   138e4:	cmp	r0, #0
   138e8:	movt	r2, #2
   138ec:	movne	r2, r0
   138f0:	str	r1, [r2]
   138f4:	bx	lr
   138f8:	movw	r3, #37392	; 0x9210
   138fc:	cmp	r0, #0
   13900:	and	r2, r2, #1
   13904:	movt	r3, #2
   13908:	movne	r3, r0
   1390c:	ubfx	r0, r1, #5, #3
   13910:	and	r1, r1, #31
   13914:	add	ip, r3, r0, lsl #2
   13918:	mov	r0, #1
   1391c:	ldr	r3, [ip, #8]
   13920:	and	r0, r0, r3, lsr r1
   13924:	eor	r2, r0, r2
   13928:	eor	r1, r3, r2, lsl r1
   1392c:	str	r1, [ip, #8]
   13930:	bx	lr
   13934:	movw	r2, #37392	; 0x9210
   13938:	cmp	r0, #0
   1393c:	movt	r2, #2
   13940:	movne	r2, r0
   13944:	ldr	r0, [r2, #4]
   13948:	str	r1, [r2, #4]
   1394c:	bx	lr
   13950:	push	{fp, lr}
   13954:	mov	fp, sp
   13958:	movw	r3, #37392	; 0x9210
   1395c:	cmp	r0, #0
   13960:	movt	r3, #2
   13964:	movne	r3, r0
   13968:	cmp	r1, #0
   1396c:	mov	r0, #10
   13970:	cmpne	r2, #0
   13974:	str	r0, [r3]
   13978:	bne	13980 <__assert_fail@plt+0x25fc>
   1397c:	bl	11354 <abort@plt>
   13980:	str	r1, [r3, #40]	; 0x28
   13984:	str	r2, [r3, #44]	; 0x2c
   13988:	pop	{fp, pc}
   1398c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13990:	add	fp, sp, #28
   13994:	sub	sp, sp, #20
   13998:	mov	r7, r0
   1399c:	ldr	r0, [fp, #8]
   139a0:	movw	r5, #37392	; 0x9210
   139a4:	mov	r8, r3
   139a8:	mov	r9, r2
   139ac:	mov	sl, r1
   139b0:	movt	r5, #2
   139b4:	cmp	r0, #0
   139b8:	movne	r5, r0
   139bc:	bl	11270 <__errno_location@plt>
   139c0:	ldr	r2, [r5, #40]	; 0x28
   139c4:	ldr	r3, [r5, #44]	; 0x2c
   139c8:	mov	r4, r0
   139cc:	ldm	r5, {r0, r1}
   139d0:	add	r5, r5, #8
   139d4:	ldr	r6, [r4]
   139d8:	stm	sp, {r0, r1, r5}
   139dc:	mov	r0, r7
   139e0:	mov	r1, sl
   139e4:	str	r2, [sp, #12]
   139e8:	str	r3, [sp, #16]
   139ec:	mov	r2, r9
   139f0:	mov	r3, r8
   139f4:	bl	13a04 <__assert_fail@plt+0x2680>
   139f8:	str	r6, [r4]
   139fc:	sub	sp, fp, #28
   13a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a08:	add	fp, sp, #28
   13a0c:	sub	sp, sp, #156	; 0x9c
   13a10:	mov	r5, r0
   13a14:	add	r0, r2, #1
   13a18:	mov	r6, r1
   13a1c:	mov	sl, r3
   13a20:	str	r2, [fp, #-80]	; 0xffffffb0
   13a24:	str	r0, [sp, #72]	; 0x48
   13a28:	ldr	r0, [fp, #12]
   13a2c:	and	r1, r0, #1
   13a30:	str	r1, [sp, #32]
   13a34:	and	r1, r0, #4
   13a38:	str	r1, [sp, #28]
   13a3c:	ubfx	r9, r0, #1, #1
   13a40:	bl	11198 <__ctype_get_mb_cur_max@plt>
   13a44:	str	r0, [sp, #40]	; 0x28
   13a48:	ldr	r0, [fp, #24]
   13a4c:	ldr	r7, [fp, #8]
   13a50:	mov	r1, #0
   13a54:	mov	lr, #0
   13a58:	str	r5, [fp, #-84]	; 0xffffffac
   13a5c:	str	r1, [sp, #60]	; 0x3c
   13a60:	mov	r1, #1
   13a64:	str	r1, [fp, #-48]	; 0xffffffd0
   13a68:	str	r0, [sp, #80]	; 0x50
   13a6c:	ldr	r0, [fp, #20]
   13a70:	str	r0, [sp, #76]	; 0x4c
   13a74:	mov	r0, #0
   13a78:	str	r0, [sp, #56]	; 0x38
   13a7c:	mov	r0, #0
   13a80:	str	r0, [fp, #-88]	; 0xffffffa8
   13a84:	mov	r0, #0
   13a88:	str	r0, [fp, #-72]	; 0xffffffb8
   13a8c:	mov	r0, #0
   13a90:	cmp	r7, #10
   13a94:	bhi	14a70 <__assert_fail@plt+0x36ec>
   13a98:	add	r1, pc, #24
   13a9c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13aa0:	mov	ip, r6
   13aa4:	mov	r8, #0
   13aa8:	mov	r2, #1
   13aac:	mov	r6, #0
   13ab0:	mov	r3, sl
   13ab4:	ldr	pc, [r1, r7, lsl #2]
   13ab8:	andeq	r3, r1, r4, lsr #23
   13abc:	strdeq	r3, [r1], -r8
   13ac0:			; <UNDEFINED> instruction: 0x00013bb8
   13ac4:	muleq	r1, ip, fp
   13ac8:	andeq	r3, r1, ip, ror #23
   13acc:	andeq	r3, r1, r0, lsr #24
   13ad0:	andeq	r3, r1, r8, asr #23
   13ad4:	andeq	r3, r1, r4, lsr #25
   13ad8:	andeq	r3, r1, r4, ror #21
   13adc:	andeq	r3, r1, r4, ror #21
   13ae0:	andeq	r3, r1, r4, lsr #22
   13ae4:	movw	r0, #32420	; 0x7ea4
   13ae8:	mov	r1, r7
   13aec:	mov	r6, r5
   13af0:	mov	r4, ip
   13af4:	mov	r5, lr
   13af8:	movt	r0, #1
   13afc:	bl	151d4 <__assert_fail@plt+0x3e50>
   13b00:	str	r0, [sp, #76]	; 0x4c
   13b04:	movw	r0, #32422	; 0x7ea6
   13b08:	mov	r1, r7
   13b0c:	movt	r0, #1
   13b10:	bl	151d4 <__assert_fail@plt+0x3e50>
   13b14:	mov	lr, r5
   13b18:	mov	r5, r6
   13b1c:	mov	ip, r4
   13b20:	str	r0, [sp, #80]	; 0x50
   13b24:	mov	r8, #0
   13b28:	tst	r9, #1
   13b2c:	str	lr, [sp, #44]	; 0x2c
   13b30:	bne	13b68 <__assert_fail@plt+0x27e4>
   13b34:	ldr	r0, [sp, #76]	; 0x4c
   13b38:	ldrb	r0, [r0]
   13b3c:	cmp	r0, #0
   13b40:	beq	13b68 <__assert_fail@plt+0x27e4>
   13b44:	ldr	r1, [sp, #76]	; 0x4c
   13b48:	mov	r8, #0
   13b4c:	add	r1, r1, #1
   13b50:	cmp	r8, ip
   13b54:	strbcc	r0, [r5, r8]
   13b58:	ldrb	r0, [r1, r8]
   13b5c:	add	r8, r8, #1
   13b60:	cmp	r0, #0
   13b64:	bne	13b50 <__assert_fail@plt+0x27cc>
   13b68:	ldr	r6, [sp, #80]	; 0x50
   13b6c:	mov	r4, ip
   13b70:	mov	r0, r6
   13b74:	bl	11258 <strlen@plt>
   13b78:	mov	ip, r4
   13b7c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13b80:	ldr	lr, [sp, #44]	; 0x2c
   13b84:	str	r6, [fp, #-88]	; 0xffffffa8
   13b88:	str	r0, [fp, #-72]	; 0xffffffb8
   13b8c:	mov	r2, #1
   13b90:	mov	r6, r9
   13b94:	mov	r3, sl
   13b98:	b	13ca4 <__assert_fail@plt+0x2920>
   13b9c:	mov	r0, #1
   13ba0:	b	13bf8 <__assert_fail@plt+0x2874>
   13ba4:	mov	r7, #0
   13ba8:	mov	r8, #0
   13bac:	mov	r2, r0
   13bb0:	mov	r6, #0
   13bb4:	b	13ca4 <__assert_fail@plt+0x2920>
   13bb8:	tst	r9, #1
   13bbc:	bne	13bf8 <__assert_fail@plt+0x2874>
   13bc0:	mov	r2, r0
   13bc4:	b	13c50 <__assert_fail@plt+0x28cc>
   13bc8:	mov	r0, #1
   13bcc:	mov	r8, #0
   13bd0:	mov	r7, #5
   13bd4:	mov	r2, #1
   13bd8:	str	r0, [fp, #-72]	; 0xffffffb8
   13bdc:	movw	r0, #32418	; 0x7ea2
   13be0:	movt	r0, #1
   13be4:	str	r0, [fp, #-88]	; 0xffffffa8
   13be8:	b	13c18 <__assert_fail@plt+0x2894>
   13bec:	mov	r2, #1
   13bf0:	tst	r9, #1
   13bf4:	beq	13c50 <__assert_fail@plt+0x28cc>
   13bf8:	mov	r1, #1
   13bfc:	mov	r8, #0
   13c00:	mov	r7, #2
   13c04:	mov	r2, r0
   13c08:	str	r1, [fp, #-72]	; 0xffffffb8
   13c0c:	movw	r1, #32422	; 0x7ea6
   13c10:	movt	r1, #1
   13c14:	str	r1, [fp, #-88]	; 0xffffffa8
   13c18:	mov	r6, #1
   13c1c:	b	13ca4 <__assert_fail@plt+0x2920>
   13c20:	tst	r9, #1
   13c24:	beq	13c74 <__assert_fail@plt+0x28f0>
   13c28:	mov	r0, #1
   13c2c:	mov	r8, #0
   13c30:	mov	r2, #1
   13c34:	mov	r6, #1
   13c38:	mov	r7, #5
   13c3c:	str	r0, [fp, #-72]	; 0xffffffb8
   13c40:	movw	r0, #32418	; 0x7ea2
   13c44:	movt	r0, #1
   13c48:	str	r0, [fp, #-88]	; 0xffffffa8
   13c4c:	b	13ca4 <__assert_fail@plt+0x2920>
   13c50:	cmp	ip, #0
   13c54:	mov	r8, #1
   13c58:	mov	r6, #0
   13c5c:	mov	r7, #2
   13c60:	movne	r0, #39	; 0x27
   13c64:	strbne	r0, [r5]
   13c68:	movw	r0, #32422	; 0x7ea6
   13c6c:	movt	r0, #1
   13c70:	b	13c98 <__assert_fail@plt+0x2914>
   13c74:	cmp	ip, #0
   13c78:	mov	r8, #1
   13c7c:	mov	r2, #1
   13c80:	mov	r7, #5
   13c84:	mov	r6, #0
   13c88:	movne	r0, #34	; 0x22
   13c8c:	strbne	r0, [r5]
   13c90:	movw	r0, #32418	; 0x7ea2
   13c94:	movt	r0, #1
   13c98:	str	r0, [fp, #-88]	; 0xffffffa8
   13c9c:	mov	r0, #1
   13ca0:	str	r0, [fp, #-72]	; 0xffffffb8
   13ca4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ca8:	str	r7, [fp, #-68]	; 0xffffffbc
   13cac:	str	r6, [fp, #-76]	; 0xffffffb4
   13cb0:	str	r2, [sp, #84]	; 0x54
   13cb4:	cmp	r0, #0
   13cb8:	movwne	r0, #1
   13cbc:	and	r1, r0, r6
   13cc0:	and	r1, r2, r1
   13cc4:	str	r1, [sp, #48]	; 0x30
   13cc8:	sub	r1, r7, #2
   13ccc:	clz	r1, r1
   13cd0:	lsr	r1, r1, #5
   13cd4:	and	r1, r1, r6
   13cd8:	str	r1, [sp, #64]	; 0x40
   13cdc:	subs	r1, r7, #2
   13ce0:	eor	r7, r6, #1
   13ce4:	movwne	r1, #1
   13ce8:	str	r7, [sp, #92]	; 0x5c
   13cec:	orr	r7, r1, r7
   13cf0:	and	r1, r1, r2
   13cf4:	and	r0, r0, r1
   13cf8:	str	r7, [sp, #68]	; 0x44
   13cfc:	mov	r7, #0
   13d00:	str	r0, [fp, #-60]	; 0xffffffc4
   13d04:	orr	r0, r1, r6
   13d08:	ldr	r1, [fp, #16]
   13d0c:	eor	r0, r0, #1
   13d10:	clz	r1, r1
   13d14:	lsr	r1, r1, #5
   13d18:	orr	r0, r1, r0
   13d1c:	str	r0, [fp, #-64]	; 0xffffffc0
   13d20:	eor	r0, r2, #1
   13d24:	str	r0, [sp, #52]	; 0x34
   13d28:	cmn	r3, #1
   13d2c:	beq	13d3c <__assert_fail@plt+0x29b8>
   13d30:	cmp	r7, r3
   13d34:	bne	13d48 <__assert_fail@plt+0x29c4>
   13d38:	b	148a4 <__assert_fail@plt+0x3520>
   13d3c:	ldrb	r0, [r4, r7]
   13d40:	cmp	r0, #0
   13d44:	beq	148ac <__assert_fail@plt+0x3528>
   13d48:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13d4c:	cmp	r0, #0
   13d50:	beq	13d98 <__assert_fail@plt+0x2a14>
   13d54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d58:	add	r5, r7, r0
   13d5c:	cmp	r0, #2
   13d60:	bcc	13dac <__assert_fail@plt+0x2a28>
   13d64:	mov	r0, #0
   13d68:	cmn	r3, #1
   13d6c:	str	r0, [fp, #-56]	; 0xffffffc8
   13d70:	bne	13db4 <__assert_fail@plt+0x2a30>
   13d74:	mov	r0, r4
   13d78:	mov	r4, ip
   13d7c:	mov	r6, lr
   13d80:	bl	11258 <strlen@plt>
   13d84:	mov	ip, r4
   13d88:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13d8c:	mov	lr, r6
   13d90:	mov	r3, r0
   13d94:	b	13db4 <__assert_fail@plt+0x2a30>
   13d98:	mov	r0, #0
   13d9c:	mov	sl, r3
   13da0:	str	r0, [fp, #-56]	; 0xffffffc8
   13da4:	mov	r0, #0
   13da8:	b	13e20 <__assert_fail@plt+0x2a9c>
   13dac:	mov	r0, #0
   13db0:	str	r0, [fp, #-56]	; 0xffffffc8
   13db4:	cmp	r5, r3
   13db8:	bls	13dcc <__assert_fail@plt+0x2a48>
   13dbc:	ldr	r5, [fp, #-84]	; 0xffffffac
   13dc0:	mov	r0, #0
   13dc4:	mov	sl, r3
   13dc8:	b	13e20 <__assert_fail@plt+0x2a9c>
   13dcc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13dd0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13dd4:	add	r0, r4, r7
   13dd8:	mov	r5, lr
   13ddc:	mov	r6, ip
   13de0:	mov	sl, r3
   13de4:	bl	11240 <bcmp@plt>
   13de8:	ldr	r2, [sp, #92]	; 0x5c
   13dec:	cmp	r0, #0
   13df0:	ldr	r3, [fp, #-84]	; 0xffffffac
   13df4:	mov	r1, r0
   13df8:	movwne	r1, #1
   13dfc:	orr	r1, r1, r2
   13e00:	tst	r1, #1
   13e04:	beq	14930 <__assert_fail@plt+0x35ac>
   13e08:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13e0c:	clz	r0, r0
   13e10:	mov	lr, r5
   13e14:	mov	ip, r6
   13e18:	mov	r5, r3
   13e1c:	lsr	r0, r0, #5
   13e20:	str	r0, [fp, #-52]	; 0xffffffcc
   13e24:	ldrb	r6, [r4, r7]
   13e28:	cmp	r6, #126	; 0x7e
   13e2c:	bhi	14354 <__assert_fail@plt+0x2fd0>
   13e30:	add	r3, pc, #16
   13e34:	mov	r9, #1
   13e38:	mov	r2, #110	; 0x6e
   13e3c:	mov	r0, #97	; 0x61
   13e40:	mov	r1, #0
   13e44:	ldr	pc, [r3, r6, lsl #2]
   13e48:			; <UNDEFINED> instruction: 0x000141b8
   13e4c:	andeq	r4, r1, r4, asr r3
   13e50:	andeq	r4, r1, r4, asr r3
   13e54:	andeq	r4, r1, r4, asr r3
   13e58:	andeq	r4, r1, r4, asr r3
   13e5c:	andeq	r4, r1, r4, asr r3
   13e60:	andeq	r4, r1, r4, asr r3
   13e64:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e68:	muleq	r1, r8, r1
   13e6c:	muleq	r1, r0, r1
   13e70:	andeq	r4, r1, r4, lsr #3
   13e74:			; <UNDEFINED> instruction: 0x000142bc
   13e78:	andeq	r4, r1, r8, lsl #3
   13e7c:	andeq	r4, r1, r0, lsr #3
   13e80:	andeq	r4, r1, r4, asr r3
   13e84:	andeq	r4, r1, r4, asr r3
   13e88:	andeq	r4, r1, r4, asr r3
   13e8c:	andeq	r4, r1, r4, asr r3
   13e90:	andeq	r4, r1, r4, asr r3
   13e94:	andeq	r4, r1, r4, asr r3
   13e98:	andeq	r4, r1, r4, asr r3
   13e9c:	andeq	r4, r1, r4, asr r3
   13ea0:	andeq	r4, r1, r4, asr r3
   13ea4:	andeq	r4, r1, r4, asr r3
   13ea8:	andeq	r4, r1, r4, asr r3
   13eac:	andeq	r4, r1, r4, asr r3
   13eb0:	andeq	r4, r1, r4, asr r3
   13eb4:	andeq	r4, r1, r4, asr r3
   13eb8:	andeq	r4, r1, r4, asr r3
   13ebc:	andeq	r4, r1, r4, asr r3
   13ec0:	andeq	r4, r1, r4, asr r3
   13ec4:	andeq	r4, r1, r4, asr r3
   13ec8:	andeq	r4, r1, r8, lsr r1
   13ecc:	andeq	r4, r1, ip, lsr r1
   13ed0:	andeq	r4, r1, ip, lsr r1
   13ed4:	andeq	r4, r1, r0, lsr #2
   13ed8:	andeq	r4, r1, ip, lsr r1
   13edc:	andeq	r4, r1, r4, asr #32
   13ee0:	andeq	r4, r1, ip, lsr r1
   13ee4:	andeq	r4, r1, r4, asr #5
   13ee8:	andeq	r4, r1, ip, lsr r1
   13eec:	andeq	r4, r1, ip, lsr r1
   13ef0:	andeq	r4, r1, ip, lsr r1
   13ef4:	andeq	r4, r1, r4, asr #32
   13ef8:	andeq	r4, r1, r4, asr #32
   13efc:	andeq	r4, r1, r4, asr #32
   13f00:	andeq	r4, r1, r4, asr #32
   13f04:	andeq	r4, r1, r4, asr #32
   13f08:	andeq	r4, r1, r4, asr #32
   13f0c:	andeq	r4, r1, r4, asr #32
   13f10:	andeq	r4, r1, r4, asr #32
   13f14:	andeq	r4, r1, r4, asr #32
   13f18:	andeq	r4, r1, r4, asr #32
   13f1c:	andeq	r4, r1, r4, asr #32
   13f20:	andeq	r4, r1, r4, asr #32
   13f24:	andeq	r4, r1, r4, asr #32
   13f28:	andeq	r4, r1, r4, asr #32
   13f2c:	andeq	r4, r1, r4, asr #32
   13f30:	andeq	r4, r1, r4, asr #32
   13f34:	andeq	r4, r1, ip, lsr r1
   13f38:	andeq	r4, r1, ip, lsr r1
   13f3c:	andeq	r4, r1, ip, lsr r1
   13f40:	andeq	r4, r1, ip, lsr r1
   13f44:	muleq	r1, r0, r2
   13f48:	andeq	r4, r1, r4, asr r3
   13f4c:	andeq	r4, r1, r4, asr #32
   13f50:	andeq	r4, r1, r4, asr #32
   13f54:	andeq	r4, r1, r4, asr #32
   13f58:	andeq	r4, r1, r4, asr #32
   13f5c:	andeq	r4, r1, r4, asr #32
   13f60:	andeq	r4, r1, r4, asr #32
   13f64:	andeq	r4, r1, r4, asr #32
   13f68:	andeq	r4, r1, r4, asr #32
   13f6c:	andeq	r4, r1, r4, asr #32
   13f70:	andeq	r4, r1, r4, asr #32
   13f74:	andeq	r4, r1, r4, asr #32
   13f78:	andeq	r4, r1, r4, asr #32
   13f7c:	andeq	r4, r1, r4, asr #32
   13f80:	andeq	r4, r1, r4, asr #32
   13f84:	andeq	r4, r1, r4, asr #32
   13f88:	andeq	r4, r1, r4, asr #32
   13f8c:	andeq	r4, r1, r4, asr #32
   13f90:	andeq	r4, r1, r4, asr #32
   13f94:	andeq	r4, r1, r4, asr #32
   13f98:	andeq	r4, r1, r4, asr #32
   13f9c:	andeq	r4, r1, r4, asr #32
   13fa0:	andeq	r4, r1, r4, asr #32
   13fa4:	andeq	r4, r1, r4, asr #32
   13fa8:	andeq	r4, r1, r4, asr #32
   13fac:	andeq	r4, r1, r4, asr #32
   13fb0:	andeq	r4, r1, r4, asr #32
   13fb4:	andeq	r4, r1, ip, lsr r1
   13fb8:	andeq	r4, r1, r4, ror #2
   13fbc:	andeq	r4, r1, r4, asr #32
   13fc0:	andeq	r4, r1, ip, lsr r1
   13fc4:	andeq	r4, r1, r4, asr #32
   13fc8:	andeq	r4, r1, ip, lsr r1
   13fcc:	andeq	r4, r1, r4, asr #32
   13fd0:	andeq	r4, r1, r4, asr #32
   13fd4:	andeq	r4, r1, r4, asr #32
   13fd8:	andeq	r4, r1, r4, asr #32
   13fdc:	andeq	r4, r1, r4, asr #32
   13fe0:	andeq	r4, r1, r4, asr #32
   13fe4:	andeq	r4, r1, r4, asr #32
   13fe8:	andeq	r4, r1, r4, asr #32
   13fec:	andeq	r4, r1, r4, asr #32
   13ff0:	andeq	r4, r1, r4, asr #32
   13ff4:	andeq	r4, r1, r4, asr #32
   13ff8:	andeq	r4, r1, r4, asr #32
   13ffc:	andeq	r4, r1, r4, asr #32
   14000:	andeq	r4, r1, r4, asr #32
   14004:	andeq	r4, r1, r4, asr #32
   14008:	andeq	r4, r1, r4, asr #32
   1400c:	andeq	r4, r1, r4, asr #32
   14010:	andeq	r4, r1, r4, asr #32
   14014:	andeq	r4, r1, r4, asr #32
   14018:	andeq	r4, r1, r4, asr #32
   1401c:	andeq	r4, r1, r4, asr #32
   14020:	andeq	r4, r1, r4, asr #32
   14024:	andeq	r4, r1, r4, asr #32
   14028:	andeq	r4, r1, r4, asr #32
   1402c:	andeq	r4, r1, r4, asr #32
   14030:	andeq	r4, r1, r4, asr #32
   14034:	strdeq	r4, [r1], -r8
   14038:	andeq	r4, r1, ip, lsr r1
   1403c:	strdeq	r4, [r1], -r8
   14040:	andeq	r4, r1, r0, lsr #2
   14044:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14048:	tst	r0, #1
   1404c:	bne	14078 <__assert_fail@plt+0x2cf4>
   14050:	ldr	r1, [fp, #16]
   14054:	ubfx	r0, r6, #5, #3
   14058:	mov	r2, #1
   1405c:	ldr	r0, [r1, r0, lsl #2]
   14060:	and	r1, r6, #31
   14064:	tst	r0, r2, lsl r1
   14068:	beq	14078 <__assert_fail@plt+0x2cf4>
   1406c:	mov	r0, r6
   14070:	mov	r1, r9
   14074:	b	1408c <__assert_fail@plt+0x2d08>
   14078:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1407c:	mov	r1, r9
   14080:	cmp	r0, #0
   14084:	mov	r0, r6
   14088:	beq	147d8 <__assert_fail@plt+0x3454>
   1408c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14090:	tst	r2, #1
   14094:	bne	14974 <__assert_fail@plt+0x35f0>
   14098:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1409c:	subs	r2, r2, #2
   140a0:	movwne	r2, #1
   140a4:	orr	r2, r2, lr
   140a8:	tst	r2, #1
   140ac:	bne	140e4 <__assert_fail@plt+0x2d60>
   140b0:	cmp	r8, ip
   140b4:	mov	lr, #1
   140b8:	movcc	r2, #39	; 0x27
   140bc:	strbcc	r2, [r5, r8]
   140c0:	add	r2, r8, #1
   140c4:	cmp	r2, ip
   140c8:	movcc	r3, #36	; 0x24
   140cc:	strbcc	r3, [r5, r2]
   140d0:	add	r2, r8, #2
   140d4:	add	r8, r8, #3
   140d8:	cmp	r2, ip
   140dc:	movcc	r3, #39	; 0x27
   140e0:	strbcc	r3, [r5, r2]
   140e4:	cmp	r8, ip
   140e8:	movcc	r2, #92	; 0x5c
   140ec:	strbcc	r2, [r5, r8]
   140f0:	add	r8, r8, #1
   140f4:	b	14818 <__assert_fail@plt+0x3494>
   140f8:	cmp	sl, #1
   140fc:	beq	14120 <__assert_fail@plt+0x2d9c>
   14100:	mov	r9, #0
   14104:	cmn	sl, #1
   14108:	bne	1412c <__assert_fail@plt+0x2da8>
   1410c:	ldrb	r0, [r4, #1]
   14110:	cmp	r0, #0
   14114:	beq	14120 <__assert_fail@plt+0x2d9c>
   14118:	mvn	sl, #0
   1411c:	b	1412c <__assert_fail@plt+0x2da8>
   14120:	mov	r9, #0
   14124:	cmp	r7, #0
   14128:	beq	14138 <__assert_fail@plt+0x2db4>
   1412c:	mov	r0, #0
   14130:	str	r0, [fp, #-56]	; 0xffffffc8
   14134:	b	14044 <__assert_fail@plt+0x2cc0>
   14138:	mov	r1, #1
   1413c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14140:	cmp	r0, #2
   14144:	bne	1415c <__assert_fail@plt+0x2dd8>
   14148:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1414c:	mov	r9, r1
   14150:	tst	r0, #1
   14154:	beq	14044 <__assert_fail@plt+0x2cc0>
   14158:	b	14974 <__assert_fail@plt+0x35f0>
   1415c:	mov	r9, r1
   14160:	b	14044 <__assert_fail@plt+0x2cc0>
   14164:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14168:	cmp	r0, #2
   1416c:	bne	143b0 <__assert_fail@plt+0x302c>
   14170:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14174:	tst	r0, #1
   14178:	bne	14974 <__assert_fail@plt+0x35f0>
   1417c:	mov	r0, #0
   14180:	str	r0, [fp, #-56]	; 0xffffffc8
   14184:	b	143c8 <__assert_fail@plt+0x3044>
   14188:	mov	r0, #102	; 0x66
   1418c:	b	143d4 <__assert_fail@plt+0x3050>
   14190:	mov	r2, #116	; 0x74
   14194:	b	141a4 <__assert_fail@plt+0x2e20>
   14198:	mov	r0, #98	; 0x62
   1419c:	b	143d4 <__assert_fail@plt+0x3050>
   141a0:	mov	r2, #114	; 0x72
   141a4:	ldr	r0, [sp, #68]	; 0x44
   141a8:	tst	r0, #1
   141ac:	mov	r0, r2
   141b0:	bne	143d4 <__assert_fail@plt+0x3050>
   141b4:	b	14974 <__assert_fail@plt+0x35f0>
   141b8:	ldr	r0, [sp, #84]	; 0x54
   141bc:	tst	r0, #1
   141c0:	beq	143f4 <__assert_fail@plt+0x3070>
   141c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   141c8:	tst	r0, #1
   141cc:	bne	14a60 <__assert_fail@plt+0x36dc>
   141d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141d4:	mov	r2, sl
   141d8:	subs	r0, r0, #2
   141dc:	movwne	r0, #1
   141e0:	orr	r0, r0, lr
   141e4:	tst	r0, #1
   141e8:	bne	14220 <__assert_fail@plt+0x2e9c>
   141ec:	cmp	r8, ip
   141f0:	mov	lr, #1
   141f4:	movcc	r0, #39	; 0x27
   141f8:	strbcc	r0, [r5, r8]
   141fc:	add	r0, r8, #1
   14200:	cmp	r0, ip
   14204:	movcc	r1, #36	; 0x24
   14208:	strbcc	r1, [r5, r0]
   1420c:	add	r0, r8, #2
   14210:	add	r8, r8, #3
   14214:	cmp	r0, ip
   14218:	movcc	r1, #39	; 0x27
   1421c:	strbcc	r1, [r5, r0]
   14220:	mov	r1, #1
   14224:	cmp	r8, ip
   14228:	mov	r9, #0
   1422c:	mov	r6, #48	; 0x30
   14230:	str	r1, [fp, #-56]	; 0xffffffc8
   14234:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14238:	movcc	r0, #92	; 0x5c
   1423c:	strbcc	r0, [r5, r8]
   14240:	add	r0, r8, #1
   14244:	cmp	r1, #2
   14248:	beq	14550 <__assert_fail@plt+0x31cc>
   1424c:	add	r1, r7, #1
   14250:	cmp	r1, r2
   14254:	bcs	14550 <__assert_fail@plt+0x31cc>
   14258:	ldrb	r1, [r4, r1]
   1425c:	sub	r1, r1, #48	; 0x30
   14260:	uxtb	r1, r1
   14264:	cmp	r1, #9
   14268:	bhi	14550 <__assert_fail@plt+0x31cc>
   1426c:	cmp	r0, ip
   14270:	movcc	r1, #48	; 0x30
   14274:	strbcc	r1, [r5, r0]
   14278:	add	r0, r8, #2
   1427c:	add	r8, r8, #3
   14280:	cmp	r0, ip
   14284:	movcc	r1, #48	; 0x30
   14288:	strbcc	r1, [r5, r0]
   1428c:	b	14044 <__assert_fail@plt+0x2cc0>
   14290:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14294:	mov	r6, #63	; 0x3f
   14298:	cmp	r0, #5
   1429c:	beq	14558 <__assert_fail@plt+0x31d4>
   142a0:	mov	r1, #0
   142a4:	cmp	r0, #2
   142a8:	str	r1, [fp, #-56]	; 0xffffffc8
   142ac:	bne	1460c <__assert_fail@plt+0x3288>
   142b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142b4:	mov	r9, #0
   142b8:	b	14150 <__assert_fail@plt+0x2dcc>
   142bc:	mov	r0, #118	; 0x76
   142c0:	b	143d4 <__assert_fail@plt+0x3050>
   142c4:	mov	r0, #1
   142c8:	mov	r6, #39	; 0x27
   142cc:	str	r0, [sp, #60]	; 0x3c
   142d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142d4:	cmp	r0, #2
   142d8:	bne	1434c <__assert_fail@plt+0x2fc8>
   142dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142e0:	tst	r0, #1
   142e4:	bne	14974 <__assert_fail@plt+0x35f0>
   142e8:	ldr	r2, [sp, #56]	; 0x38
   142ec:	clz	r1, ip
   142f0:	mov	lr, #0
   142f4:	lsr	r1, r1, #5
   142f8:	cmp	r2, #0
   142fc:	mov	r0, r2
   14300:	movwne	r0, #1
   14304:	orrs	r0, r0, r1
   14308:	moveq	r2, ip
   1430c:	moveq	ip, r0
   14310:	cmp	r8, ip
   14314:	str	r2, [sp, #56]	; 0x38
   14318:	movcc	r0, #39	; 0x27
   1431c:	strbcc	r0, [r5, r8]
   14320:	add	r0, r8, #1
   14324:	cmp	r0, ip
   14328:	movcc	r1, #92	; 0x5c
   1432c:	strbcc	r1, [r5, r0]
   14330:	add	r0, r8, #2
   14334:	add	r8, r8, #3
   14338:	cmp	r0, ip
   1433c:	movcc	r1, #39	; 0x27
   14340:	strbcc	r1, [r5, r0]
   14344:	mov	r0, #0
   14348:	str	r0, [fp, #-56]	; 0xffffffc8
   1434c:	mov	r9, #1
   14350:	b	14044 <__assert_fail@plt+0x2cc0>
   14354:	ldr	r0, [sp, #40]	; 0x28
   14358:	str	lr, [sp, #44]	; 0x2c
   1435c:	str	ip, [sp, #88]	; 0x58
   14360:	cmp	r0, #1
   14364:	bne	14414 <__assert_fail@plt+0x3090>
   14368:	str	sl, [sp, #36]	; 0x24
   1436c:	bl	11228 <__ctype_b_loc@plt>
   14370:	ldr	r0, [r0]
   14374:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14378:	mov	r1, #1
   1437c:	add	r0, r0, r6, lsl #1
   14380:	ldrb	r0, [r0, #1]
   14384:	ubfx	r9, r0, #6, #1
   14388:	ldr	r0, [sp, #52]	; 0x34
   1438c:	ldr	lr, [sp, #44]	; 0x2c
   14390:	cmp	r1, #1
   14394:	orr	r3, r9, r0
   14398:	bhi	14614 <__assert_fail@plt+0x3290>
   1439c:	tst	r3, #1
   143a0:	beq	14614 <__assert_fail@plt+0x3290>
   143a4:	ldr	sl, [sp, #36]	; 0x24
   143a8:	ldr	ip, [sp, #88]	; 0x58
   143ac:	b	14044 <__assert_fail@plt+0x2cc0>
   143b0:	ldr	r1, [sp, #48]	; 0x30
   143b4:	mov	r0, #0
   143b8:	str	r0, [fp, #-56]	; 0xffffffc8
   143bc:	mov	r0, #92	; 0x5c
   143c0:	cmp	r1, #0
   143c4:	beq	143d4 <__assert_fail@plt+0x3050>
   143c8:	mov	r6, #92	; 0x5c
   143cc:	mov	r9, #0
   143d0:	b	147d8 <__assert_fail@plt+0x3454>
   143d4:	mov	r1, #0
   143d8:	mov	r9, #0
   143dc:	str	r1, [fp, #-56]	; 0xffffffc8
   143e0:	ldr	r1, [sp, #84]	; 0x54
   143e4:	tst	r1, #1
   143e8:	mov	r1, #0
   143ec:	beq	14044 <__assert_fail@plt+0x2cc0>
   143f0:	b	1408c <__assert_fail@plt+0x2d08>
   143f4:	ldr	r0, [sp, #32]
   143f8:	mov	r6, #0
   143fc:	mov	r9, #0
   14400:	cmp	r0, #0
   14404:	mov	r0, #0
   14408:	str	r0, [fp, #-56]	; 0xffffffc8
   1440c:	beq	14044 <__assert_fail@plt+0x2cc0>
   14410:	b	14830 <__assert_fail@plt+0x34ac>
   14414:	mov	r0, #0
   14418:	cmn	sl, #1
   1441c:	sub	r3, fp, #40	; 0x28
   14420:	str	r0, [fp, #-36]	; 0xffffffdc
   14424:	str	r0, [fp, #-40]	; 0xffffffd8
   14428:	bne	14440 <__assert_fail@plt+0x30bc>
   1442c:	mov	r0, r4
   14430:	bl	11258 <strlen@plt>
   14434:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14438:	sub	r3, fp, #40	; 0x28
   1443c:	mov	sl, r0
   14440:	ldr	r0, [sp, #72]	; 0x48
   14444:	mov	r9, #1
   14448:	mov	r1, #0
   1444c:	str	sl, [sp, #36]	; 0x24
   14450:	add	r0, r0, r7
   14454:	str	r0, [sp, #20]
   14458:	add	r0, r1, r7
   1445c:	str	r1, [sp, #24]
   14460:	add	r1, r4, r0
   14464:	mov	r4, r0
   14468:	sub	r2, sl, r0
   1446c:	sub	r0, fp, #44	; 0x2c
   14470:	bl	16ce4 <__assert_fail@plt+0x5960>
   14474:	cmp	r0, #0
   14478:	beq	14884 <__assert_fail@plt+0x3500>
   1447c:	cmn	r0, #1
   14480:	beq	1483c <__assert_fail@plt+0x34b8>
   14484:	ldr	r2, [sp, #36]	; 0x24
   14488:	cmn	r0, #2
   1448c:	beq	14844 <__assert_fail@plt+0x34c0>
   14490:	ldr	r2, [sp, #64]	; 0x40
   14494:	ldr	ip, [sp, #88]	; 0x58
   14498:	ldr	r4, [sp, #84]	; 0x54
   1449c:	ldr	lr, [fp, #-48]	; 0xffffffd0
   144a0:	cmp	r0, #2
   144a4:	mov	r1, #0
   144a8:	movwcc	r1, #1
   144ac:	eor	r2, r2, #1
   144b0:	orrs	r1, r2, r1
   144b4:	bne	14504 <__assert_fail@plt+0x3180>
   144b8:	ldr	r1, [sp, #24]
   144bc:	ldr	r2, [sp, #20]
   144c0:	add	r1, r2, r1
   144c4:	sub	r2, r0, #1
   144c8:	ldrb	r3, [r1]
   144cc:	sub	r5, r3, #94	; 0x5e
   144d0:	cmp	r5, #30
   144d4:	bhi	144ec <__assert_fail@plt+0x3168>
   144d8:	mov	r4, #1
   144dc:	mov	sl, #1073741829	; 0x40000005
   144e0:	tst	sl, r4, lsl r5
   144e4:	ldr	r4, [sp, #84]	; 0x54
   144e8:	bne	1494c <__assert_fail@plt+0x35c8>
   144ec:	sub	r3, r3, #91	; 0x5b
   144f0:	cmp	r3, #2
   144f4:	bcc	1494c <__assert_fail@plt+0x35c8>
   144f8:	add	r1, r1, #1
   144fc:	subs	r2, r2, #1
   14500:	bne	144c8 <__assert_fail@plt+0x3144>
   14504:	ldr	r5, [sp, #24]
   14508:	str	lr, [fp, #-48]	; 0xffffffd0
   1450c:	add	r5, r0, r5
   14510:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14514:	bl	11180 <iswprint@plt>
   14518:	cmp	r0, #0
   1451c:	sub	r4, fp, #40	; 0x28
   14520:	movwne	r0, #1
   14524:	and	r9, r9, r0
   14528:	mov	r0, r4
   1452c:	bl	1112c <mbsinit@plt>
   14530:	mov	r1, r5
   14534:	mov	r3, r4
   14538:	ldr	sl, [sp, #36]	; 0x24
   1453c:	ldr	r5, [fp, #-84]	; 0xffffffac
   14540:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14544:	cmp	r0, #0
   14548:	beq	14458 <__assert_fail@plt+0x30d4>
   1454c:	b	14388 <__assert_fail@plt+0x3004>
   14550:	mov	r8, r0
   14554:	b	14044 <__assert_fail@plt+0x2cc0>
   14558:	mov	r0, #0
   1455c:	str	r0, [fp, #-56]	; 0xffffffc8
   14560:	ldr	r0, [sp, #28]
   14564:	cmp	r0, #0
   14568:	beq	1460c <__assert_fail@plt+0x3288>
   1456c:	add	r0, r7, #2
   14570:	mov	r1, sl
   14574:	cmp	r0, sl
   14578:	bcs	1460c <__assert_fail@plt+0x3288>
   1457c:	add	r1, r7, r4
   14580:	ldrb	r1, [r1, #1]
   14584:	cmp	r1, #63	; 0x3f
   14588:	bne	1460c <__assert_fail@plt+0x3288>
   1458c:	ldrb	r9, [r4, r0]
   14590:	sub	r2, r9, #33	; 0x21
   14594:	cmp	r2, #29
   14598:	bhi	1460c <__assert_fail@plt+0x3288>
   1459c:	mov	r1, r4
   145a0:	movw	r4, #20929	; 0x51c1
   145a4:	mov	r3, #1
   145a8:	movt	r4, #14336	; 0x3800
   145ac:	tst	r4, r3, lsl r2
   145b0:	beq	14898 <__assert_fail@plt+0x3514>
   145b4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   145b8:	tst	r2, #1
   145bc:	bne	14a68 <__assert_fail@plt+0x36e4>
   145c0:	cmp	r8, ip
   145c4:	mov	r4, r1
   145c8:	mov	r7, r0
   145cc:	mov	r6, r9
   145d0:	movcc	r2, #63	; 0x3f
   145d4:	strbcc	r2, [r5, r8]
   145d8:	add	r2, r8, #1
   145dc:	cmp	r2, ip
   145e0:	movcc	r3, #34	; 0x22
   145e4:	strbcc	r3, [r5, r2]
   145e8:	add	r2, r8, #2
   145ec:	cmp	r2, ip
   145f0:	movcc	r3, #34	; 0x22
   145f4:	strbcc	r3, [r5, r2]
   145f8:	add	r2, r8, #3
   145fc:	add	r8, r8, #4
   14600:	cmp	r2, ip
   14604:	movcc	r3, #63	; 0x3f
   14608:	strbcc	r3, [r5, r2]
   1460c:	mov	r9, #0
   14610:	b	14044 <__assert_fail@plt+0x2cc0>
   14614:	ldr	sl, [sp, #36]	; 0x24
   14618:	add	r0, r1, r7
   1461c:	mov	r2, #0
   14620:	str	r3, [sp, #24]
   14624:	str	r0, [fp, #-56]	; 0xffffffc8
   14628:	tst	r3, #1
   1462c:	beq	14658 <__assert_fail@plt+0x32d4>
   14630:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14634:	tst	r0, #1
   14638:	beq	14720 <__assert_fail@plt+0x339c>
   1463c:	ldr	r1, [sp, #88]	; 0x58
   14640:	mov	r0, r3
   14644:	cmp	r8, r1
   14648:	movcc	r1, #92	; 0x5c
   1464c:	strbcc	r1, [r5, r8]
   14650:	add	r8, r8, #1
   14654:	b	14724 <__assert_fail@plt+0x33a0>
   14658:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1465c:	tst	r1, #1
   14660:	bne	14970 <__assert_fail@plt+0x35ec>
   14664:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14668:	subs	r2, r1, #2
   1466c:	movwne	r2, #1
   14670:	orr	r2, r2, lr
   14674:	tst	r2, #1
   14678:	bne	146bc <__assert_fail@plt+0x3338>
   1467c:	ldr	r1, [sp, #88]	; 0x58
   14680:	add	r2, r8, #1
   14684:	mov	lr, #1
   14688:	cmp	r8, r1
   1468c:	movcc	r1, #39	; 0x27
   14690:	strbcc	r1, [r5, r8]
   14694:	ldr	r1, [sp, #88]	; 0x58
   14698:	cmp	r2, r1
   1469c:	movcc	r1, #36	; 0x24
   146a0:	strbcc	r1, [r5, r2]
   146a4:	ldr	r1, [sp, #88]	; 0x58
   146a8:	add	r2, r8, #2
   146ac:	add	r8, r8, #3
   146b0:	cmp	r2, r1
   146b4:	movcc	r1, #39	; 0x27
   146b8:	strbcc	r1, [r5, r2]
   146bc:	ldr	r1, [sp, #88]	; 0x58
   146c0:	add	r2, r8, #1
   146c4:	mov	r0, r3
   146c8:	cmp	r8, r1
   146cc:	movcc	r1, #92	; 0x5c
   146d0:	strbcc	r1, [r5, r8]
   146d4:	ldr	r1, [sp, #88]	; 0x58
   146d8:	cmp	r2, r1
   146dc:	bcs	146f0 <__assert_fail@plt+0x336c>
   146e0:	uxtb	r3, r6
   146e4:	mov	r1, #48	; 0x30
   146e8:	orr	r3, r1, r3, lsr #6
   146ec:	strb	r3, [r5, r2]
   146f0:	ldr	r1, [sp, #88]	; 0x58
   146f4:	add	r2, r8, #2
   146f8:	add	r8, r8, #3
   146fc:	cmp	r2, r1
   14700:	lsrcc	r3, r6, #3
   14704:	movcc	r1, #6
   14708:	bficc	r3, r1, #3, #29
   1470c:	mov	r1, #6
   14710:	bfi	r6, r1, #3, #29
   14714:	strbcc	r3, [r5, r2]
   14718:	mov	r2, #1
   1471c:	b	1472c <__assert_fail@plt+0x33a8>
   14720:	mov	r0, r3
   14724:	mov	r1, #0
   14728:	str	r1, [fp, #-52]	; 0xffffffcc
   1472c:	mov	ip, r2
   14730:	and	r1, r2, #1
   14734:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14738:	add	r3, r7, #1
   1473c:	cmp	r2, r3
   14740:	bls	147c8 <__assert_fail@plt+0x3444>
   14744:	cmp	r1, #0
   14748:	mvn	r5, lr
   1474c:	movwne	r1, #1
   14750:	orr	r5, r5, r1
   14754:	tst	r5, #1
   14758:	bne	1479c <__assert_fail@plt+0x3418>
   1475c:	ldr	r1, [sp, #88]	; 0x58
   14760:	ldr	r5, [fp, #-84]	; 0xffffffac
   14764:	mov	r2, r4
   14768:	ldr	r4, [sp, #88]	; 0x58
   1476c:	ldr	r0, [sp, #24]
   14770:	mov	lr, #0
   14774:	cmp	r8, r1
   14778:	movcc	r1, #39	; 0x27
   1477c:	strbcc	r1, [r5, r8]
   14780:	add	r1, r8, #1
   14784:	add	r8, r8, #2
   14788:	cmp	r1, r4
   1478c:	movcc	r4, #39	; 0x27
   14790:	strbcc	r4, [r5, r1]
   14794:	mov	r4, r2
   14798:	b	147a0 <__assert_fail@plt+0x341c>
   1479c:	ldr	r5, [fp, #-84]	; 0xffffffac
   147a0:	ldr	r1, [sp, #88]	; 0x58
   147a4:	mov	r2, ip
   147a8:	cmp	r8, r1
   147ac:	ldr	r1, [sp, #72]	; 0x48
   147b0:	strbcc	r6, [r5, r8]
   147b4:	add	r8, r8, #1
   147b8:	ldrb	r6, [r1, r7]
   147bc:	mov	r7, r3
   147c0:	mov	r3, r0
   147c4:	b	14628 <__assert_fail@plt+0x32a4>
   147c8:	ldr	ip, [sp, #88]	; 0x58
   147cc:	cmp	r1, #0
   147d0:	movwne	r1, #1
   147d4:	str	r1, [fp, #-56]	; 0xffffffc8
   147d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   147dc:	cmp	r0, #0
   147e0:	bne	14810 <__assert_fail@plt+0x348c>
   147e4:	tst	lr, #1
   147e8:	beq	14810 <__assert_fail@plt+0x348c>
   147ec:	cmp	r8, ip
   147f0:	mov	lr, #0
   147f4:	movcc	r0, #39	; 0x27
   147f8:	strbcc	r0, [r5, r8]
   147fc:	add	r0, r8, #1
   14800:	add	r8, r8, #2
   14804:	cmp	r0, ip
   14808:	movcc	r1, #39	; 0x27
   1480c:	strbcc	r1, [r5, r0]
   14810:	mov	r1, r9
   14814:	mov	r0, r6
   14818:	cmp	r8, ip
   1481c:	strbcc	r0, [r5, r8]
   14820:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14824:	add	r8, r8, #1
   14828:	and	r0, r0, r1
   1482c:	str	r0, [fp, #-48]	; 0xffffffd0
   14830:	mov	r3, sl
   14834:	add	r7, r7, #1
   14838:	b	13d28 <__assert_fail@plt+0x29a4>
   1483c:	mov	r9, #0
   14840:	b	14884 <__assert_fail@plt+0x3500>
   14844:	mov	r9, #0
   14848:	cmp	r2, r4
   1484c:	bls	14884 <__assert_fail@plt+0x3500>
   14850:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14854:	ldr	r1, [sp, #24]
   14858:	add	r0, r4, r7
   1485c:	mov	r3, r1
   14860:	ldrb	r1, [r0, r1]
   14864:	cmp	r1, #0
   14868:	beq	14890 <__assert_fail@plt+0x350c>
   1486c:	add	r3, r3, #1
   14870:	add	r1, r7, r3
   14874:	cmp	r1, r2
   14878:	mov	r1, r3
   1487c:	bcc	1485c <__assert_fail@plt+0x34d8>
   14880:	b	14388 <__assert_fail@plt+0x3004>
   14884:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14888:	ldr	r1, [sp, #24]
   1488c:	b	14388 <__assert_fail@plt+0x3004>
   14890:	mov	r1, r3
   14894:	b	14388 <__assert_fail@plt+0x3004>
   14898:	mov	r9, #0
   1489c:	mov	r4, r1
   148a0:	b	14044 <__assert_fail@plt+0x2cc0>
   148a4:	mov	sl, r7
   148a8:	b	148b0 <__assert_fail@plt+0x352c>
   148ac:	mvn	sl, #0
   148b0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   148b4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   148b8:	eor	r0, r1, #2
   148bc:	orr	r0, r0, r8
   148c0:	clz	r0, r0
   148c4:	lsr	r0, r0, #5
   148c8:	tst	r2, r0
   148cc:	bne	14974 <__assert_fail@plt+0x35f0>
   148d0:	subs	r0, r1, #2
   148d4:	movwne	r0, #1
   148d8:	orr	r0, r2, r0
   148dc:	tst	r0, #1
   148e0:	ldreq	r0, [sp, #60]	; 0x3c
   148e4:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   148e8:	eoreq	r0, r0, #1
   148ec:	tsteq	r0, #1
   148f0:	bne	14a08 <__assert_fail@plt+0x3684>
   148f4:	tst	r1, #1
   148f8:	bne	149d4 <__assert_fail@plt+0x3650>
   148fc:	ldr	r6, [sp, #56]	; 0x38
   14900:	mov	r9, #0
   14904:	cmp	r6, #0
   14908:	beq	14a00 <__assert_fail@plt+0x367c>
   1490c:	ldr	r0, [sp, #84]	; 0x54
   14910:	mov	r1, #0
   14914:	mov	r7, #2
   14918:	cmp	ip, #0
   1491c:	str	r1, [fp, #-48]	; 0xffffffd0
   14920:	mov	r1, #0
   14924:	str	r1, [fp, #-76]	; 0xffffffb4
   14928:	beq	13a90 <__assert_fail@plt+0x270c>
   1492c:	b	14a08 <__assert_fail@plt+0x3684>
   14930:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14934:	ldr	r1, [fp, #12]
   14938:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1493c:	mov	r5, r3
   14940:	mov	ip, r6
   14944:	mov	r3, sl
   14948:	b	14998 <__assert_fail@plt+0x3614>
   1494c:	tst	r4, #1
   14950:	ldr	r5, [fp, #-84]	; 0xffffffac
   14954:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14958:	ldr	r1, [fp, #12]
   1495c:	ldr	r3, [sp, #36]	; 0x24
   14960:	mov	r0, #2
   14964:	movwne	r0, #4
   14968:	mov	r2, r0
   1496c:	b	14998 <__assert_fail@plt+0x3614>
   14970:	ldr	ip, [sp, #88]	; 0x58
   14974:	ldr	r1, [sp, #84]	; 0x54
   14978:	mov	r0, #2
   1497c:	tst	r1, #1
   14980:	movwne	r0, #4
   14984:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14988:	ldr	r1, [fp, #12]
   1498c:	mov	r3, sl
   14990:	cmp	r2, #2
   14994:	moveq	r2, r0
   14998:	mov	r0, #0
   1499c:	bic	r1, r1, #2
   149a0:	str	r2, [sp]
   149a4:	mov	r2, r4
   149a8:	str	r0, [sp, #8]
   149ac:	ldr	r0, [sp, #76]	; 0x4c
   149b0:	str	r1, [sp, #4]
   149b4:	mov	r1, ip
   149b8:	str	r0, [sp, #12]
   149bc:	ldr	r0, [sp, #80]	; 0x50
   149c0:	str	r0, [sp, #16]
   149c4:	mov	r0, r5
   149c8:	bl	13a04 <__assert_fail@plt+0x2680>
   149cc:	mov	r8, r0
   149d0:	b	14a54 <__assert_fail@plt+0x36d0>
   149d4:	mov	r0, #5
   149d8:	ldr	r1, [sp, #56]	; 0x38
   149dc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   149e0:	mov	r3, sl
   149e4:	str	r0, [sp]
   149e8:	ldr	r0, [fp, #12]
   149ec:	str	r0, [sp, #4]
   149f0:	ldr	r0, [fp, #16]
   149f4:	str	r0, [sp, #8]
   149f8:	ldr	r0, [sp, #76]	; 0x4c
   149fc:	b	149b8 <__assert_fail@plt+0x3634>
   14a00:	mov	r0, #0
   14a04:	str	r0, [fp, #-76]	; 0xffffffb4
   14a08:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14a0c:	cmp	r1, #0
   14a10:	beq	14a48 <__assert_fail@plt+0x36c4>
   14a14:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14a18:	tst	r0, #1
   14a1c:	bne	14a48 <__assert_fail@plt+0x36c4>
   14a20:	ldrb	r0, [r1]
   14a24:	cmp	r0, #0
   14a28:	beq	14a48 <__assert_fail@plt+0x36c4>
   14a2c:	add	r1, r1, #1
   14a30:	cmp	r8, ip
   14a34:	strbcc	r0, [r5, r8]
   14a38:	add	r8, r8, #1
   14a3c:	ldrb	r0, [r1], #1
   14a40:	cmp	r0, #0
   14a44:	bne	14a30 <__assert_fail@plt+0x36ac>
   14a48:	cmp	r8, ip
   14a4c:	movcc	r0, #0
   14a50:	strbcc	r0, [r5, r8]
   14a54:	mov	r0, r8
   14a58:	sub	sp, fp, #28
   14a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a60:	mov	r0, #4
   14a64:	b	14984 <__assert_fail@plt+0x3600>
   14a68:	mov	r4, r1
   14a6c:	b	14974 <__assert_fail@plt+0x35f0>
   14a70:	bl	11354 <abort@plt>
   14a74:	mov	r3, r2
   14a78:	mov	r2, #0
   14a7c:	b	14a80 <__assert_fail@plt+0x36fc>
   14a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a84:	add	fp, sp, #28
   14a88:	sub	sp, sp, #36	; 0x24
   14a8c:	movw	r8, #37392	; 0x9210
   14a90:	cmp	r3, #0
   14a94:	mov	r4, r2
   14a98:	str	r2, [sp, #24]
   14a9c:	mov	r5, r1
   14aa0:	mov	r6, r0
   14aa4:	str	r0, [sp, #20]
   14aa8:	movt	r8, #2
   14aac:	movne	r8, r3
   14ab0:	bl	11270 <__errno_location@plt>
   14ab4:	str	r0, [sp, #28]
   14ab8:	ldr	r1, [r8, #40]	; 0x28
   14abc:	ldr	r2, [r8, #44]	; 0x2c
   14ac0:	ldr	r7, [r0]
   14ac4:	cmp	r4, #0
   14ac8:	add	sl, r8, #8
   14acc:	mov	r0, #0
   14ad0:	ldm	r8, {r3, r9}
   14ad4:	orreq	r9, r9, #1
   14ad8:	stm	sp, {r3, r9, sl}
   14adc:	str	r1, [sp, #12]
   14ae0:	str	r2, [sp, #16]
   14ae4:	mov	r1, #0
   14ae8:	mov	r2, r6
   14aec:	mov	r3, r5
   14af0:	str	r7, [sp, #32]
   14af4:	mov	r7, r5
   14af8:	bl	13a04 <__assert_fail@plt+0x2680>
   14afc:	add	r4, r0, #1
   14b00:	mov	r5, r0
   14b04:	mov	r0, r4
   14b08:	bl	15898 <__assert_fail@plt+0x4514>
   14b0c:	mov	r6, r0
   14b10:	ldr	r0, [r8]
   14b14:	ldr	r2, [r8, #44]	; 0x2c
   14b18:	ldr	r1, [r8, #40]	; 0x28
   14b1c:	mov	r3, r7
   14b20:	stm	sp, {r0, r9, sl}
   14b24:	str	r2, [sp, #16]
   14b28:	ldr	r2, [sp, #20]
   14b2c:	str	r1, [sp, #12]
   14b30:	mov	r0, r6
   14b34:	mov	r1, r4
   14b38:	bl	13a04 <__assert_fail@plt+0x2680>
   14b3c:	ldr	r0, [sp, #24]
   14b40:	ldr	r1, [sp, #32]
   14b44:	ldr	r2, [sp, #28]
   14b48:	cmp	r0, #0
   14b4c:	str	r1, [r2]
   14b50:	strne	r5, [r0]
   14b54:	mov	r0, r6
   14b58:	sub	sp, fp, #28
   14b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b64:	add	fp, sp, #24
   14b68:	movw	r5, #37164	; 0x912c
   14b6c:	movw	r8, #37160	; 0x9128
   14b70:	movt	r5, #2
   14b74:	movt	r8, #2
   14b78:	ldr	r0, [r5]
   14b7c:	ldr	r4, [r8]
   14b80:	cmp	r0, #2
   14b84:	blt	14bb0 <__assert_fail@plt+0x382c>
   14b88:	add	r7, r4, #12
   14b8c:	mov	r6, #0
   14b90:	ldr	r0, [r7, r6, lsl #3]
   14b94:	bl	13548 <__assert_fail@plt+0x21c4>
   14b98:	ldr	r1, [r5]
   14b9c:	add	r2, r6, #2
   14ba0:	add	r0, r6, #1
   14ba4:	mov	r6, r0
   14ba8:	cmp	r2, r1
   14bac:	blt	14b90 <__assert_fail@plt+0x380c>
   14bb0:	ldr	r0, [r4, #4]
   14bb4:	movw	r9, #37440	; 0x9240
   14bb8:	movw	r7, #37168	; 0x9130
   14bbc:	movt	r9, #2
   14bc0:	movt	r7, #2
   14bc4:	cmp	r0, r9
   14bc8:	beq	14bd8 <__assert_fail@plt+0x3854>
   14bcc:	bl	13548 <__assert_fail@plt+0x21c4>
   14bd0:	mov	r0, #256	; 0x100
   14bd4:	stm	r7, {r0, r9}
   14bd8:	cmp	r4, r7
   14bdc:	beq	14bec <__assert_fail@plt+0x3868>
   14be0:	mov	r0, r4
   14be4:	bl	13548 <__assert_fail@plt+0x21c4>
   14be8:	str	r7, [r8]
   14bec:	mov	r0, #1
   14bf0:	str	r0, [r5]
   14bf4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14bf8:	movw	r3, #37392	; 0x9210
   14bfc:	mvn	r2, #0
   14c00:	movt	r3, #2
   14c04:	b	14c08 <__assert_fail@plt+0x3884>
   14c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c0c:	add	fp, sp, #28
   14c10:	sub	sp, sp, #44	; 0x2c
   14c14:	mov	r7, r3
   14c18:	str	r2, [sp, #36]	; 0x24
   14c1c:	str	r1, [sp, #32]
   14c20:	mov	r5, r0
   14c24:	bl	11270 <__errno_location@plt>
   14c28:	cmp	r5, #0
   14c2c:	bmi	14d9c <__assert_fail@plt+0x3a18>
   14c30:	cmn	r5, #-2147483647	; 0x80000001
   14c34:	beq	14d9c <__assert_fail@plt+0x3a18>
   14c38:	movw	r8, #37164	; 0x912c
   14c3c:	movw	r4, #37160	; 0x9128
   14c40:	str	r0, [sp, #28]
   14c44:	ldr	r0, [r0]
   14c48:	movt	r8, #2
   14c4c:	movt	r4, #2
   14c50:	ldr	r1, [r8]
   14c54:	ldr	r6, [r4]
   14c58:	str	r0, [sp, #24]
   14c5c:	cmp	r1, r5
   14c60:	ble	14c6c <__assert_fail@plt+0x38e8>
   14c64:	mov	sl, r6
   14c68:	b	14cd8 <__assert_fail@plt+0x3954>
   14c6c:	movw	r9, #37168	; 0x9130
   14c70:	mov	r0, #8
   14c74:	str	r1, [fp, #-32]	; 0xffffffe0
   14c78:	sub	r1, r5, r1
   14c7c:	mvn	r3, #-2147483648	; 0x80000000
   14c80:	movt	r9, #2
   14c84:	str	r0, [sp]
   14c88:	add	r2, r1, #1
   14c8c:	sub	r1, fp, #32
   14c90:	subs	r0, r6, r9
   14c94:	movne	r0, r6
   14c98:	bl	159c8 <__assert_fail@plt+0x4644>
   14c9c:	mov	sl, r0
   14ca0:	cmp	r6, r9
   14ca4:	str	r0, [r4]
   14ca8:	bne	14cb4 <__assert_fail@plt+0x3930>
   14cac:	ldrd	r0, [r9]
   14cb0:	stm	sl, {r0, r1}
   14cb4:	ldr	r1, [r8]
   14cb8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14cbc:	add	r0, sl, r1, lsl #3
   14cc0:	sub	r1, r2, r1
   14cc4:	lsl	r2, r1, #3
   14cc8:	mov	r1, #0
   14ccc:	bl	11288 <memset@plt>
   14cd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14cd4:	str	r0, [r8]
   14cd8:	mov	r9, sl
   14cdc:	ldm	r7, {r0, r1}
   14ce0:	orr	r8, r1, #1
   14ce4:	add	r1, r7, #8
   14ce8:	ldr	r2, [r7, #40]	; 0x28
   14cec:	ldr	r3, [r7, #44]	; 0x2c
   14cf0:	ldr	r6, [r9, r5, lsl #3]!
   14cf4:	str	r1, [sp, #20]
   14cf8:	ldr	r4, [r9, #4]!
   14cfc:	stm	sp, {r0, r8}
   14d00:	add	r0, sp, #8
   14d04:	stm	r0, {r1, r2, r3}
   14d08:	ldr	r2, [sp, #32]
   14d0c:	ldr	r3, [sp, #36]	; 0x24
   14d10:	mov	r1, r6
   14d14:	mov	r0, r4
   14d18:	bl	13a04 <__assert_fail@plt+0x2680>
   14d1c:	cmp	r6, r0
   14d20:	bhi	14d84 <__assert_fail@plt+0x3a00>
   14d24:	add	r6, r0, #1
   14d28:	movw	r0, #37440	; 0x9240
   14d2c:	movt	r0, #2
   14d30:	str	r6, [sl, r5, lsl #3]
   14d34:	cmp	r4, r0
   14d38:	beq	14d44 <__assert_fail@plt+0x39c0>
   14d3c:	mov	r0, r4
   14d40:	bl	13548 <__assert_fail@plt+0x21c4>
   14d44:	mov	r0, r6
   14d48:	bl	15898 <__assert_fail@plt+0x4514>
   14d4c:	str	r0, [r9]
   14d50:	mov	r4, r0
   14d54:	add	r3, sp, #8
   14d58:	ldr	r0, [r7]
   14d5c:	ldr	r1, [r7, #40]	; 0x28
   14d60:	ldr	r2, [r7, #44]	; 0x2c
   14d64:	stm	sp, {r0, r8}
   14d68:	ldr	r0, [sp, #20]
   14d6c:	stm	r3, {r0, r1, r2}
   14d70:	ldr	r2, [sp, #32]
   14d74:	ldr	r3, [sp, #36]	; 0x24
   14d78:	mov	r0, r4
   14d7c:	mov	r1, r6
   14d80:	bl	13a04 <__assert_fail@plt+0x2680>
   14d84:	ldr	r0, [sp, #28]
   14d88:	ldr	r1, [sp, #24]
   14d8c:	str	r1, [r0]
   14d90:	mov	r0, r4
   14d94:	sub	sp, fp, #28
   14d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d9c:	bl	11354 <abort@plt>
   14da0:	movw	r3, #37392	; 0x9210
   14da4:	movt	r3, #2
   14da8:	b	14c08 <__assert_fail@plt+0x3884>
   14dac:	movw	r3, #37392	; 0x9210
   14db0:	mov	r1, r0
   14db4:	mov	r0, #0
   14db8:	mvn	r2, #0
   14dbc:	movt	r3, #2
   14dc0:	b	14c08 <__assert_fail@plt+0x3884>
   14dc4:	movw	r3, #37392	; 0x9210
   14dc8:	mov	r2, r1
   14dcc:	mov	r1, r0
   14dd0:	mov	r0, #0
   14dd4:	movt	r3, #2
   14dd8:	b	14c08 <__assert_fail@plt+0x3884>
   14ddc:	push	{fp, lr}
   14de0:	mov	fp, sp
   14de4:	sub	sp, sp, #48	; 0x30
   14de8:	vmov.i32	q8, #0	; 0x00000000
   14dec:	mov	ip, #32
   14df0:	mov	r3, sp
   14df4:	mov	lr, r2
   14df8:	cmp	r1, #10
   14dfc:	add	r2, r3, #16
   14e00:	vst1.64	{d16-d17}, [r3], ip
   14e04:	vst1.64	{d16-d17}, [r2]
   14e08:	vst1.64	{d16-d17}, [r3]
   14e0c:	beq	14e2c <__assert_fail@plt+0x3aa8>
   14e10:	str	r1, [sp]
   14e14:	mov	r3, sp
   14e18:	mov	r1, lr
   14e1c:	mvn	r2, #0
   14e20:	bl	14c08 <__assert_fail@plt+0x3884>
   14e24:	mov	sp, fp
   14e28:	pop	{fp, pc}
   14e2c:	bl	11354 <abort@plt>
   14e30:	push	{r4, sl, fp, lr}
   14e34:	add	fp, sp, #8
   14e38:	sub	sp, sp, #48	; 0x30
   14e3c:	vmov.i32	q8, #0	; 0x00000000
   14e40:	mov	ip, r3
   14e44:	mov	r3, sp
   14e48:	mov	lr, #32
   14e4c:	cmp	r1, #10
   14e50:	add	r4, r3, #16
   14e54:	vst1.64	{d16-d17}, [r3], lr
   14e58:	vst1.64	{d16-d17}, [r4]
   14e5c:	vst1.64	{d16-d17}, [r3]
   14e60:	beq	14e80 <__assert_fail@plt+0x3afc>
   14e64:	str	r1, [sp]
   14e68:	mov	r1, r2
   14e6c:	mov	r3, sp
   14e70:	mov	r2, ip
   14e74:	bl	14c08 <__assert_fail@plt+0x3884>
   14e78:	sub	sp, fp, #8
   14e7c:	pop	{r4, sl, fp, pc}
   14e80:	bl	11354 <abort@plt>
   14e84:	mov	r2, r1
   14e88:	mov	r1, r0
   14e8c:	mov	r0, #0
   14e90:	b	14ddc <__assert_fail@plt+0x3a58>
   14e94:	mov	r3, r2
   14e98:	mov	r2, r1
   14e9c:	mov	r1, r0
   14ea0:	mov	r0, #0
   14ea4:	b	14e30 <__assert_fail@plt+0x3aac>
   14ea8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14eac:	add	fp, sp, #24
   14eb0:	sub	sp, sp, #48	; 0x30
   14eb4:	movw	r8, #37392	; 0x9210
   14eb8:	mov	lr, r0
   14ebc:	mov	r3, sp
   14ec0:	mov	ip, r1
   14ec4:	movt	r8, #2
   14ec8:	mov	r1, r3
   14ecc:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   14ed0:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14ed4:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14ed8:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14edc:	ubfx	r0, r2, #5, #3
   14ee0:	and	r2, r2, #31
   14ee4:	mov	r4, #1
   14ee8:	add	r0, r3, r0, lsl #2
   14eec:	ldr	r1, [r0, #8]
   14ef0:	bic	r4, r4, r1, lsr r2
   14ef4:	eor	r1, r1, r4, lsl r2
   14ef8:	mov	r2, ip
   14efc:	str	r1, [r0, #8]
   14f00:	mov	r0, #0
   14f04:	mov	r1, lr
   14f08:	bl	14c08 <__assert_fail@plt+0x3884>
   14f0c:	sub	sp, fp, #24
   14f10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f18:	add	fp, sp, #24
   14f1c:	sub	sp, sp, #48	; 0x30
   14f20:	movw	lr, #37392	; 0x9210
   14f24:	mov	ip, r0
   14f28:	mov	r3, sp
   14f2c:	movt	lr, #2
   14f30:	mov	r2, r3
   14f34:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14f38:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14f3c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14f40:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14f44:	ubfx	r0, r1, #5, #3
   14f48:	and	r1, r1, #31
   14f4c:	mov	r7, #1
   14f50:	add	r0, r3, r0, lsl #2
   14f54:	ldr	r2, [r0, #8]
   14f58:	bic	r7, r7, r2, lsr r1
   14f5c:	eor	r1, r2, r7, lsl r1
   14f60:	mvn	r2, #0
   14f64:	str	r1, [r0, #8]
   14f68:	mov	r0, #0
   14f6c:	mov	r1, ip
   14f70:	bl	14c08 <__assert_fail@plt+0x3884>
   14f74:	sub	sp, fp, #24
   14f78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f7c:	push	{r4, r5, r6, r7, fp, lr}
   14f80:	add	fp, sp, #16
   14f84:	sub	sp, sp, #48	; 0x30
   14f88:	movw	lr, #37392	; 0x9210
   14f8c:	mov	ip, r0
   14f90:	mov	r3, sp
   14f94:	movt	lr, #2
   14f98:	mov	r2, r3
   14f9c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14fa0:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14fa4:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14fa8:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14fac:	mov	r1, ip
   14fb0:	mvn	r2, #0
   14fb4:	ldr	r0, [sp, #12]
   14fb8:	orr	r0, r0, #67108864	; 0x4000000
   14fbc:	str	r0, [sp, #12]
   14fc0:	mov	r0, #0
   14fc4:	bl	14c08 <__assert_fail@plt+0x3884>
   14fc8:	sub	sp, fp, #16
   14fcc:	pop	{r4, r5, r6, r7, fp, pc}
   14fd0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fd4:	add	fp, sp, #24
   14fd8:	sub	sp, sp, #48	; 0x30
   14fdc:	movw	r8, #37392	; 0x9210
   14fe0:	mov	ip, r1
   14fe4:	mov	lr, r0
   14fe8:	mov	r3, sp
   14fec:	movt	r8, #2
   14ff0:	mov	r2, r3
   14ff4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14ff8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14ffc:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   15000:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15004:	mov	r1, lr
   15008:	mov	r2, ip
   1500c:	ldr	r0, [sp, #12]
   15010:	orr	r0, r0, #67108864	; 0x4000000
   15014:	str	r0, [sp, #12]
   15018:	mov	r0, #0
   1501c:	bl	14c08 <__assert_fail@plt+0x3884>
   15020:	sub	sp, fp, #24
   15024:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15028:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1502c:	add	fp, sp, #24
   15030:	sub	sp, sp, #96	; 0x60
   15034:	vmov.i32	q8, #0	; 0x00000000
   15038:	mov	lr, sp
   1503c:	mov	ip, r2
   15040:	cmp	r1, #10
   15044:	add	r3, lr, #16
   15048:	mov	r2, lr
   1504c:	vst1.64	{d16-d17}, [r3]
   15050:	mov	r3, #28
   15054:	vst1.64	{d16-d17}, [r2], r3
   15058:	vst1.32	{d16-d17}, [r2]
   1505c:	beq	1509c <__assert_fail@plt+0x3d18>
   15060:	str	r1, [sp, #48]	; 0x30
   15064:	add	r3, sp, #48	; 0x30
   15068:	ldm	lr!, {r2, r4, r5, r6, r7}
   1506c:	add	r1, r3, #4
   15070:	stmia	r1!, {r2, r4, r5, r6, r7}
   15074:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   15078:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1507c:	mvn	r2, #0
   15080:	ldr	r1, [sp, #60]	; 0x3c
   15084:	orr	r1, r1, #67108864	; 0x4000000
   15088:	str	r1, [sp, #60]	; 0x3c
   1508c:	mov	r1, ip
   15090:	bl	14c08 <__assert_fail@plt+0x3884>
   15094:	sub	sp, fp, #24
   15098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1509c:	bl	11354 <abort@plt>
   150a0:	push	{fp, lr}
   150a4:	mov	fp, sp
   150a8:	sub	sp, sp, #8
   150ac:	mvn	ip, #0
   150b0:	str	ip, [sp]
   150b4:	bl	150c0 <__assert_fail@plt+0x3d3c>
   150b8:	mov	sp, fp
   150bc:	pop	{fp, pc}
   150c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150c4:	add	fp, sp, #24
   150c8:	sub	sp, sp, #48	; 0x30
   150cc:	movw	ip, #37392	; 0x9210
   150d0:	mov	lr, r3
   150d4:	mov	r3, sp
   150d8:	cmp	r1, #0
   150dc:	movt	ip, #2
   150e0:	cmpne	r2, #0
   150e4:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   150e8:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   150ec:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   150f0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   150f4:	mov	r3, #10
   150f8:	str	r3, [sp]
   150fc:	bne	15104 <__assert_fail@plt+0x3d80>
   15100:	bl	11354 <abort@plt>
   15104:	ldr	ip, [fp, #8]
   15108:	str	r2, [sp, #44]	; 0x2c
   1510c:	str	r1, [sp, #40]	; 0x28
   15110:	mov	r3, sp
   15114:	mov	r1, lr
   15118:	mov	r2, ip
   1511c:	bl	14c08 <__assert_fail@plt+0x3884>
   15120:	sub	sp, fp, #24
   15124:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15128:	push	{fp, lr}
   1512c:	mov	fp, sp
   15130:	sub	sp, sp, #8
   15134:	mov	r3, r2
   15138:	mov	r2, r1
   1513c:	mov	r1, r0
   15140:	mvn	r0, #0
   15144:	str	r0, [sp]
   15148:	mov	r0, #0
   1514c:	bl	150c0 <__assert_fail@plt+0x3d3c>
   15150:	mov	sp, fp
   15154:	pop	{fp, pc}
   15158:	push	{fp, lr}
   1515c:	mov	fp, sp
   15160:	sub	sp, sp, #8
   15164:	mov	ip, r2
   15168:	mov	r2, r1
   1516c:	mov	r1, r0
   15170:	str	r3, [sp]
   15174:	mov	r0, #0
   15178:	mov	r3, ip
   1517c:	bl	150c0 <__assert_fail@plt+0x3d3c>
   15180:	mov	sp, fp
   15184:	pop	{fp, pc}
   15188:	movw	r3, #37176	; 0x9138
   1518c:	movt	r3, #2
   15190:	b	14c08 <__assert_fail@plt+0x3884>
   15194:	movw	r3, #37176	; 0x9138
   15198:	mov	r2, r1
   1519c:	mov	r1, r0
   151a0:	mov	r0, #0
   151a4:	movt	r3, #2
   151a8:	b	14c08 <__assert_fail@plt+0x3884>
   151ac:	movw	r3, #37176	; 0x9138
   151b0:	mvn	r2, #0
   151b4:	movt	r3, #2
   151b8:	b	14c08 <__assert_fail@plt+0x3884>
   151bc:	movw	r3, #37176	; 0x9138
   151c0:	mov	r1, r0
   151c4:	mov	r0, #0
   151c8:	mvn	r2, #0
   151cc:	movt	r3, #2
   151d0:	b	14c08 <__assert_fail@plt+0x3884>
   151d4:	push	{r4, r5, fp, lr}
   151d8:	add	fp, sp, #8
   151dc:	mov	r5, r0
   151e0:	mov	r4, r1
   151e4:	mov	r0, #0
   151e8:	mov	r2, #5
   151ec:	mov	r1, r5
   151f0:	bl	1115c <dcgettext@plt>
   151f4:	cmp	r0, r5
   151f8:	popne	{r4, r5, fp, pc}
   151fc:	bl	16cac <__assert_fail@plt+0x5928>
   15200:	ldrb	r1, [r0]
   15204:	and	r1, r1, #223	; 0xdf
   15208:	cmp	r1, #71	; 0x47
   1520c:	beq	15274 <__assert_fail@plt+0x3ef0>
   15210:	cmp	r1, #85	; 0x55
   15214:	bne	152cc <__assert_fail@plt+0x3f48>
   15218:	ldrb	r1, [r0, #1]
   1521c:	and	r1, r1, #223	; 0xdf
   15220:	cmp	r1, #84	; 0x54
   15224:	bne	152cc <__assert_fail@plt+0x3f48>
   15228:	ldrb	r1, [r0, #2]
   1522c:	and	r1, r1, #223	; 0xdf
   15230:	cmp	r1, #70	; 0x46
   15234:	bne	152cc <__assert_fail@plt+0x3f48>
   15238:	ldrb	r1, [r0, #3]
   1523c:	cmp	r1, #45	; 0x2d
   15240:	bne	152cc <__assert_fail@plt+0x3f48>
   15244:	ldrb	r1, [r0, #4]
   15248:	cmp	r1, #56	; 0x38
   1524c:	bne	152cc <__assert_fail@plt+0x3f48>
   15250:	ldrb	r0, [r0, #5]
   15254:	cmp	r0, #0
   15258:	bne	152cc <__assert_fail@plt+0x3f48>
   1525c:	ldrb	r1, [r5]
   15260:	movw	r2, #32424	; 0x7ea8
   15264:	movw	r0, #32428	; 0x7eac
   15268:	movt	r2, #1
   1526c:	movt	r0, #1
   15270:	b	152fc <__assert_fail@plt+0x3f78>
   15274:	ldrb	r1, [r0, #1]
   15278:	and	r1, r1, #223	; 0xdf
   1527c:	cmp	r1, #66	; 0x42
   15280:	bne	152cc <__assert_fail@plt+0x3f48>
   15284:	ldrb	r1, [r0, #2]
   15288:	cmp	r1, #49	; 0x31
   1528c:	bne	152cc <__assert_fail@plt+0x3f48>
   15290:	ldrb	r1, [r0, #3]
   15294:	cmp	r1, #56	; 0x38
   15298:	bne	152cc <__assert_fail@plt+0x3f48>
   1529c:	ldrb	r1, [r0, #4]
   152a0:	cmp	r1, #48	; 0x30
   152a4:	bne	152cc <__assert_fail@plt+0x3f48>
   152a8:	ldrb	r1, [r0, #5]
   152ac:	cmp	r1, #51	; 0x33
   152b0:	bne	152cc <__assert_fail@plt+0x3f48>
   152b4:	ldrb	r1, [r0, #6]
   152b8:	cmp	r1, #48	; 0x30
   152bc:	bne	152cc <__assert_fail@plt+0x3f48>
   152c0:	ldrb	r0, [r0, #7]
   152c4:	cmp	r0, #0
   152c8:	beq	152e8 <__assert_fail@plt+0x3f64>
   152cc:	movw	r1, #32418	; 0x7ea2
   152d0:	movw	r0, #32422	; 0x7ea6
   152d4:	cmp	r4, #9
   152d8:	movt	r1, #1
   152dc:	movt	r0, #1
   152e0:	moveq	r0, r1
   152e4:	pop	{r4, r5, fp, pc}
   152e8:	ldrb	r1, [r5]
   152ec:	movw	r2, #32432	; 0x7eb0
   152f0:	movw	r0, #32436	; 0x7eb4
   152f4:	movt	r2, #1
   152f8:	movt	r0, #1
   152fc:	cmp	r1, #96	; 0x60
   15300:	moveq	r0, r2
   15304:	pop	{r4, r5, fp, pc}
   15308:	push	{r4, r5, r6, r7, fp, lr}
   1530c:	add	fp, sp, #16
   15310:	mov	r4, r1
   15314:	mov	r1, #0
   15318:	mov	r6, r2
   1531c:	bl	112f4 <setlocale@plt>
   15320:	cmp	r0, #0
   15324:	beq	15350 <__assert_fail@plt+0x3fcc>
   15328:	mov	r7, r0
   1532c:	bl	11258 <strlen@plt>
   15330:	cmp	r0, r6
   15334:	bcs	15364 <__assert_fail@plt+0x3fe0>
   15338:	add	r2, r0, #1
   1533c:	mov	r0, r4
   15340:	mov	r1, r7
   15344:	bl	11120 <memcpy@plt>
   15348:	mov	r5, #0
   1534c:	b	1538c <__assert_fail@plt+0x4008>
   15350:	cmp	r6, #0
   15354:	mov	r5, #22
   15358:	movne	r0, #0
   1535c:	strbne	r0, [r4]
   15360:	b	1538c <__assert_fail@plt+0x4008>
   15364:	mov	r5, #34	; 0x22
   15368:	cmp	r6, #0
   1536c:	beq	1538c <__assert_fail@plt+0x4008>
   15370:	sub	r6, r6, #1
   15374:	mov	r0, r4
   15378:	mov	r1, r7
   1537c:	mov	r2, r6
   15380:	bl	11120 <memcpy@plt>
   15384:	mov	r0, #0
   15388:	strb	r0, [r4, r6]
   1538c:	mov	r0, r5
   15390:	pop	{r4, r5, r6, r7, fp, pc}
   15394:	mov	r1, #0
   15398:	b	112f4 <setlocale@plt>
   1539c:	mov	r1, #0
   153a0:	mov	r2, #3
   153a4:	b	16ad4 <__assert_fail@plt+0x5750>
   153a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153ac:	add	fp, sp, #24
   153b0:	sub	sp, sp, #32
   153b4:	ldr	r6, [fp, #12]
   153b8:	ldr	r7, [fp, #8]
   153bc:	mov	r4, r2
   153c0:	mov	r8, r0
   153c4:	cmp	r1, #0
   153c8:	beq	153f0 <__assert_fail@plt+0x406c>
   153cc:	movw	r2, #32524	; 0x7f0c
   153d0:	mov	r5, r1
   153d4:	str	r3, [sp, #4]
   153d8:	str	r4, [sp]
   153dc:	mov	r0, r8
   153e0:	mov	r1, #1
   153e4:	movt	r2, #1
   153e8:	mov	r3, r5
   153ec:	b	15408 <__assert_fail@plt+0x4084>
   153f0:	movw	r2, #32536	; 0x7f18
   153f4:	str	r3, [sp]
   153f8:	mov	r0, r8
   153fc:	mov	r1, #1
   15400:	mov	r3, r4
   15404:	movt	r2, #1
   15408:	bl	112b8 <__fprintf_chk@plt>
   1540c:	movw	r1, #32543	; 0x7f1f
   15410:	mov	r0, #0
   15414:	mov	r2, #5
   15418:	movt	r1, #1
   1541c:	bl	1115c <dcgettext@plt>
   15420:	movw	r2, #33261	; 0x81ed
   15424:	mov	r3, r0
   15428:	movw	r0, #2022	; 0x7e6
   1542c:	mov	r1, #1
   15430:	movt	r2, #1
   15434:	str	r0, [sp]
   15438:	mov	r0, r8
   1543c:	bl	112b8 <__fprintf_chk@plt>
   15440:	movw	r4, #31821	; 0x7c4d
   15444:	mov	r1, r8
   15448:	movt	r4, #1
   1544c:	mov	r0, r4
   15450:	bl	110cc <fputs_unlocked@plt>
   15454:	movw	r1, #32547	; 0x7f23
   15458:	mov	r0, #0
   1545c:	mov	r2, #5
   15460:	movt	r1, #1
   15464:	bl	1115c <dcgettext@plt>
   15468:	movw	r3, #32718	; 0x7fce
   1546c:	mov	r2, r0
   15470:	mov	r0, r8
   15474:	mov	r1, #1
   15478:	movt	r3, #1
   1547c:	bl	112b8 <__fprintf_chk@plt>
   15480:	mov	r0, r4
   15484:	mov	r1, r8
   15488:	bl	110cc <fputs_unlocked@plt>
   1548c:	cmp	r6, #9
   15490:	bhi	154f4 <__assert_fail@plt+0x4170>
   15494:	add	r0, pc, #0
   15498:	ldr	pc, [r0, r6, lsl #2]
   1549c:	andeq	r5, r1, ip, asr #13
   154a0:	andeq	r5, r1, r4, asr #9
   154a4:	andeq	r5, r1, r0, lsl #10
   154a8:	andeq	r5, r1, r8, lsr #10
   154ac:	andeq	r5, r1, r0, asr r5
   154b0:	andeq	r5, r1, r8, ror r5
   154b4:	andeq	r5, r1, r0, lsr #11
   154b8:	ldrdeq	r5, [r1], -r8
   154bc:	andeq	r5, r1, r8, ror r6
   154c0:	andeq	r5, r1, r0, lsr #12
   154c4:	movw	r1, #32752	; 0x7ff0
   154c8:	mov	r0, #0
   154cc:	mov	r2, #5
   154d0:	movt	r1, #1
   154d4:	bl	1115c <dcgettext@plt>
   154d8:	ldr	r3, [r7]
   154dc:	mov	r2, r0
   154e0:	mov	r0, r8
   154e4:	mov	r1, #1
   154e8:	sub	sp, fp, #24
   154ec:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   154f0:	b	112b8 <__fprintf_chk@plt>
   154f4:	movw	r1, #33071	; 0x812f
   154f8:	movt	r1, #1
   154fc:	b	15628 <__assert_fail@plt+0x42a4>
   15500:	movw	r1, #32768	; 0x8000
   15504:	mov	r0, #0
   15508:	mov	r2, #5
   1550c:	movt	r1, #1
   15510:	bl	1115c <dcgettext@plt>
   15514:	mov	r2, r0
   15518:	ldr	r3, [r7]
   1551c:	ldr	r0, [r7, #4]
   15520:	str	r0, [sp]
   15524:	b	15614 <__assert_fail@plt+0x4290>
   15528:	movw	r1, #32791	; 0x8017
   1552c:	mov	r0, #0
   15530:	mov	r2, #5
   15534:	movt	r1, #1
   15538:	bl	1115c <dcgettext@plt>
   1553c:	mov	r2, r0
   15540:	ldr	r3, [r7]
   15544:	ldmib	r7, {r0, r1}
   15548:	stm	sp, {r0, r1}
   1554c:	b	15614 <__assert_fail@plt+0x4290>
   15550:	movw	r1, #32819	; 0x8033
   15554:	mov	r0, #0
   15558:	mov	r2, #5
   1555c:	movt	r1, #1
   15560:	bl	1115c <dcgettext@plt>
   15564:	ldr	r3, [r7]
   15568:	mov	r2, r0
   1556c:	ldmib	r7, {r0, r1, r7}
   15570:	stm	sp, {r0, r1, r7}
   15574:	b	15614 <__assert_fail@plt+0x4290>
   15578:	movw	r1, #32851	; 0x8053
   1557c:	mov	r0, #0
   15580:	mov	r2, #5
   15584:	movt	r1, #1
   15588:	bl	1115c <dcgettext@plt>
   1558c:	ldr	r3, [r7]
   15590:	mov	r2, r0
   15594:	ldmib	r7, {r0, r1, r6, r7}
   15598:	stm	sp, {r0, r1, r6, r7}
   1559c:	b	15614 <__assert_fail@plt+0x4290>
   155a0:	movw	r1, #32887	; 0x8077
   155a4:	mov	r0, #0
   155a8:	mov	r2, #5
   155ac:	movt	r1, #1
   155b0:	bl	1115c <dcgettext@plt>
   155b4:	mov	r2, r0
   155b8:	ldr	r3, [r7]
   155bc:	ldmib	r7, {r0, r1, r6}
   155c0:	ldr	r5, [r7, #16]
   155c4:	ldr	r7, [r7, #20]
   155c8:	stm	sp, {r0, r1, r6}
   155cc:	str	r5, [sp, #12]
   155d0:	str	r7, [sp, #16]
   155d4:	b	15614 <__assert_fail@plt+0x4290>
   155d8:	movw	r1, #32927	; 0x809f
   155dc:	mov	r0, #0
   155e0:	mov	r2, #5
   155e4:	movt	r1, #1
   155e8:	bl	1115c <dcgettext@plt>
   155ec:	mov	r2, r0
   155f0:	ldr	r3, [r7]
   155f4:	ldmib	r7, {r0, r1, r6}
   155f8:	ldr	r5, [r7, #16]
   155fc:	ldr	r4, [r7, #20]
   15600:	ldr	r7, [r7, #24]
   15604:	stm	sp, {r0, r1, r6}
   15608:	str	r5, [sp, #12]
   1560c:	str	r4, [sp, #16]
   15610:	str	r7, [sp, #20]
   15614:	mov	r0, r8
   15618:	mov	r1, #1
   1561c:	b	156c8 <__assert_fail@plt+0x4344>
   15620:	movw	r1, #33019	; 0x80fb
   15624:	movt	r1, #1
   15628:	mov	r0, #0
   1562c:	mov	r2, #5
   15630:	bl	1115c <dcgettext@plt>
   15634:	mov	ip, r0
   15638:	ldr	r3, [r7]
   1563c:	ldr	r0, [r7, #4]
   15640:	ldr	r1, [r7, #8]
   15644:	ldr	r6, [r7, #12]
   15648:	ldr	r5, [r7, #16]
   1564c:	ldr	r4, [r7, #20]
   15650:	ldr	r2, [r7, #24]
   15654:	ldr	lr, [r7, #28]
   15658:	ldr	r7, [r7, #32]
   1565c:	stm	sp, {r0, r1, r6}
   15660:	str	r5, [sp, #12]
   15664:	str	r4, [sp, #16]
   15668:	str	r2, [sp, #20]
   1566c:	str	lr, [sp, #24]
   15670:	str	r7, [sp, #28]
   15674:	b	156bc <__assert_fail@plt+0x4338>
   15678:	movw	r1, #32971	; 0x80cb
   1567c:	mov	r0, #0
   15680:	mov	r2, #5
   15684:	movt	r1, #1
   15688:	bl	1115c <dcgettext@plt>
   1568c:	mov	ip, r0
   15690:	ldr	r3, [r7]
   15694:	ldmib	r7, {r0, r1, r6}
   15698:	ldr	r5, [r7, #16]
   1569c:	ldr	r4, [r7, #20]
   156a0:	ldr	r2, [r7, #24]
   156a4:	ldr	r7, [r7, #28]
   156a8:	stm	sp, {r0, r1, r6}
   156ac:	str	r5, [sp, #12]
   156b0:	str	r4, [sp, #16]
   156b4:	str	r2, [sp, #20]
   156b8:	str	r7, [sp, #24]
   156bc:	mov	r0, r8
   156c0:	mov	r1, #1
   156c4:	mov	r2, ip
   156c8:	bl	112b8 <__fprintf_chk@plt>
   156cc:	sub	sp, fp, #24
   156d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156d4:	push	{r4, sl, fp, lr}
   156d8:	add	fp, sp, #8
   156dc:	sub	sp, sp, #8
   156e0:	ldr	ip, [fp, #8]
   156e4:	mov	lr, #0
   156e8:	ldr	r4, [ip, lr, lsl #2]
   156ec:	add	lr, lr, #1
   156f0:	cmp	r4, #0
   156f4:	bne	156e8 <__assert_fail@plt+0x4364>
   156f8:	sub	r4, lr, #1
   156fc:	str	ip, [sp]
   15700:	str	r4, [sp, #4]
   15704:	bl	153a8 <__assert_fail@plt+0x4024>
   15708:	sub	sp, fp, #8
   1570c:	pop	{r4, sl, fp, pc}
   15710:	push	{r4, r5, fp, lr}
   15714:	add	fp, sp, #8
   15718:	sub	sp, sp, #48	; 0x30
   1571c:	ldr	r4, [fp, #8]
   15720:	mov	ip, #0
   15724:	add	lr, sp, #8
   15728:	ldr	r5, [r4]
   1572c:	cmp	r5, #0
   15730:	str	r5, [lr, ip, lsl #2]
   15734:	beq	1574c <__assert_fail@plt+0x43c8>
   15738:	add	ip, ip, #1
   1573c:	add	r4, r4, #4
   15740:	cmp	ip, #10
   15744:	bne	15728 <__assert_fail@plt+0x43a4>
   15748:	mov	ip, #10
   1574c:	str	lr, [sp]
   15750:	str	ip, [sp, #4]
   15754:	bl	153a8 <__assert_fail@plt+0x4024>
   15758:	sub	sp, fp, #8
   1575c:	pop	{r4, r5, fp, pc}
   15760:	push	{fp, lr}
   15764:	mov	fp, sp
   15768:	sub	sp, sp, #8
   1576c:	add	ip, fp, #8
   15770:	str	ip, [sp, #4]
   15774:	str	ip, [sp]
   15778:	bl	15710 <__assert_fail@plt+0x438c>
   1577c:	mov	sp, fp
   15780:	pop	{fp, pc}
   15784:	push	{fp, lr}
   15788:	mov	fp, sp
   1578c:	movw	r0, #37252	; 0x9184
   15790:	movt	r0, #2
   15794:	ldr	r1, [r0]
   15798:	movw	r0, #31821	; 0x7c4d
   1579c:	movt	r0, #1
   157a0:	bl	110cc <fputs_unlocked@plt>
   157a4:	movw	r1, #33131	; 0x816b
   157a8:	mov	r0, #0
   157ac:	mov	r2, #5
   157b0:	movt	r1, #1
   157b4:	bl	1115c <dcgettext@plt>
   157b8:	movw	r2, #33151	; 0x817f
   157bc:	mov	r1, r0
   157c0:	mov	r0, #1
   157c4:	movt	r2, #1
   157c8:	bl	11294 <__printf_chk@plt>
   157cc:	movw	r1, #33173	; 0x8195
   157d0:	mov	r0, #0
   157d4:	mov	r2, #5
   157d8:	movt	r1, #1
   157dc:	bl	1115c <dcgettext@plt>
   157e0:	movw	r2, #31379	; 0x7a93
   157e4:	movw	r3, #31630	; 0x7b8e
   157e8:	mov	r1, r0
   157ec:	mov	r0, #1
   157f0:	movt	r2, #1
   157f4:	movt	r3, #1
   157f8:	bl	11294 <__printf_chk@plt>
   157fc:	movw	r1, #33193	; 0x81a9
   15800:	mov	r0, #0
   15804:	mov	r2, #5
   15808:	movt	r1, #1
   1580c:	bl	1115c <dcgettext@plt>
   15810:	movw	r2, #33232	; 0x81d0
   15814:	mov	r1, r0
   15818:	mov	r0, #1
   1581c:	movt	r2, #1
   15820:	pop	{fp, lr}
   15824:	b	11294 <__printf_chk@plt>
   15828:	b	1582c <__assert_fail@plt+0x44a8>
   1582c:	push	{r4, r5, r6, sl, fp, lr}
   15830:	add	fp, sp, #16
   15834:	mov	r4, r2
   15838:	mov	r5, r1
   1583c:	mov	r6, r0
   15840:	bl	16ec0 <__assert_fail@plt+0x5b3c>
   15844:	cmp	r0, #0
   15848:	popne	{r4, r5, r6, sl, fp, pc}
   1584c:	cmp	r6, #0
   15850:	beq	15864 <__assert_fail@plt+0x44e0>
   15854:	cmp	r5, #0
   15858:	cmpne	r4, #0
   1585c:	bne	15864 <__assert_fail@plt+0x44e0>
   15860:	pop	{r4, r5, r6, sl, fp, pc}
   15864:	bl	15c94 <__assert_fail@plt+0x4910>
   15868:	push	{fp, lr}
   1586c:	mov	fp, sp
   15870:	bl	169d4 <__assert_fail@plt+0x5650>
   15874:	cmp	r0, #0
   15878:	popne	{fp, pc}
   1587c:	bl	15c94 <__assert_fail@plt+0x4910>
   15880:	push	{fp, lr}
   15884:	mov	fp, sp
   15888:	bl	169d4 <__assert_fail@plt+0x5650>
   1588c:	cmp	r0, #0
   15890:	popne	{fp, pc}
   15894:	bl	15c94 <__assert_fail@plt+0x4910>
   15898:	push	{fp, lr}
   1589c:	mov	fp, sp
   158a0:	bl	169d4 <__assert_fail@plt+0x5650>
   158a4:	cmp	r0, #0
   158a8:	popne	{fp, pc}
   158ac:	bl	15c94 <__assert_fail@plt+0x4910>
   158b0:	push	{r4, r5, fp, lr}
   158b4:	add	fp, sp, #8
   158b8:	mov	r4, r1
   158bc:	mov	r5, r0
   158c0:	bl	16a04 <__assert_fail@plt+0x5680>
   158c4:	cmp	r0, #0
   158c8:	popne	{r4, r5, fp, pc}
   158cc:	cmp	r5, #0
   158d0:	beq	158e0 <__assert_fail@plt+0x455c>
   158d4:	cmp	r4, #0
   158d8:	bne	158e0 <__assert_fail@plt+0x455c>
   158dc:	pop	{r4, r5, fp, pc}
   158e0:	bl	15c94 <__assert_fail@plt+0x4910>
   158e4:	push	{fp, lr}
   158e8:	mov	fp, sp
   158ec:	cmp	r1, #0
   158f0:	orreq	r1, r1, #1
   158f4:	bl	16a04 <__assert_fail@plt+0x5680>
   158f8:	cmp	r0, #0
   158fc:	popne	{fp, pc}
   15900:	bl	15c94 <__assert_fail@plt+0x4910>
   15904:	push	{fp, lr}
   15908:	mov	fp, sp
   1590c:	clz	r3, r2
   15910:	lsr	ip, r3, #5
   15914:	clz	r3, r1
   15918:	lsr	r3, r3, #5
   1591c:	orrs	r3, r3, ip
   15920:	movwne	r1, #1
   15924:	movwne	r2, #1
   15928:	bl	16ec0 <__assert_fail@plt+0x5b3c>
   1592c:	cmp	r0, #0
   15930:	popne	{fp, pc}
   15934:	bl	15c94 <__assert_fail@plt+0x4910>
   15938:	push	{fp, lr}
   1593c:	mov	fp, sp
   15940:	mov	r2, r1
   15944:	mov	r1, r0
   15948:	mov	r0, #0
   1594c:	bl	16ec0 <__assert_fail@plt+0x5b3c>
   15950:	cmp	r0, #0
   15954:	popne	{fp, pc}
   15958:	bl	15c94 <__assert_fail@plt+0x4910>
   1595c:	mov	r2, r1
   15960:	mov	r1, r0
   15964:	mov	r0, #0
   15968:	b	15904 <__assert_fail@plt+0x4580>
   1596c:	mov	r2, #1
   15970:	b	15974 <__assert_fail@plt+0x45f0>
   15974:	push	{r4, r5, fp, lr}
   15978:	add	fp, sp, #8
   1597c:	ldr	r5, [r1]
   15980:	mov	r4, r1
   15984:	cmp	r0, #0
   15988:	beq	159a0 <__assert_fail@plt+0x461c>
   1598c:	mov	r1, #1
   15990:	add	r1, r1, r5, lsr #1
   15994:	adds	r5, r5, r1
   15998:	bcc	159b8 <__assert_fail@plt+0x4634>
   1599c:	bl	15c94 <__assert_fail@plt+0x4910>
   159a0:	cmp	r5, #0
   159a4:	bne	159b8 <__assert_fail@plt+0x4634>
   159a8:	mov	r1, #64	; 0x40
   159ac:	cmp	r2, #64	; 0x40
   159b0:	udiv	r5, r1, r2
   159b4:	addhi	r5, r5, #1
   159b8:	mov	r1, r5
   159bc:	bl	1582c <__assert_fail@plt+0x44a8>
   159c0:	str	r5, [r4]
   159c4:	pop	{r4, r5, fp, pc}
   159c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159cc:	add	fp, sp, #24
   159d0:	ldr	r6, [r1]
   159d4:	mov	r8, r1
   159d8:	ldr	r4, [fp, #8]
   159dc:	add	r1, r6, r6, asr #1
   159e0:	cmp	r1, r6
   159e4:	mvnvs	r1, #-2147483648	; 0x80000000
   159e8:	cmp	r1, r3
   159ec:	mov	r5, r1
   159f0:	movgt	r5, r3
   159f4:	cmn	r3, #1
   159f8:	movle	r5, r1
   159fc:	cmn	r4, #1
   15a00:	ble	15a20 <__assert_fail@plt+0x469c>
   15a04:	cmp	r4, #0
   15a08:	beq	15a74 <__assert_fail@plt+0x46f0>
   15a0c:	cmn	r5, #1
   15a10:	ble	15a48 <__assert_fail@plt+0x46c4>
   15a14:	mvn	r7, #-2147483648	; 0x80000000
   15a18:	udiv	r1, r7, r4
   15a1c:	b	15a3c <__assert_fail@plt+0x46b8>
   15a20:	cmn	r5, #1
   15a24:	ble	15a64 <__assert_fail@plt+0x46e0>
   15a28:	cmn	r4, #1
   15a2c:	beq	15a74 <__assert_fail@plt+0x46f0>
   15a30:	mov	r1, #-2147483648	; 0x80000000
   15a34:	mvn	r7, #-2147483648	; 0x80000000
   15a38:	sdiv	r1, r1, r4
   15a3c:	cmp	r1, r5
   15a40:	bge	15a74 <__assert_fail@plt+0x46f0>
   15a44:	b	15a84 <__assert_fail@plt+0x4700>
   15a48:	beq	15a74 <__assert_fail@plt+0x46f0>
   15a4c:	mov	r1, #-2147483648	; 0x80000000
   15a50:	mvn	r7, #-2147483648	; 0x80000000
   15a54:	sdiv	r1, r1, r5
   15a58:	cmp	r1, r4
   15a5c:	bge	15a74 <__assert_fail@plt+0x46f0>
   15a60:	b	15a84 <__assert_fail@plt+0x4700>
   15a64:	mvn	r7, #-2147483648	; 0x80000000
   15a68:	sdiv	r1, r7, r4
   15a6c:	cmp	r5, r1
   15a70:	blt	15a84 <__assert_fail@plt+0x4700>
   15a74:	mul	r1, r5, r4
   15a78:	mov	r7, #64	; 0x40
   15a7c:	cmp	r1, #63	; 0x3f
   15a80:	bgt	15a8c <__assert_fail@plt+0x4708>
   15a84:	sdiv	r5, r7, r4
   15a88:	mul	r1, r5, r4
   15a8c:	cmp	r0, #0
   15a90:	moveq	r7, #0
   15a94:	streq	r7, [r8]
   15a98:	sub	r7, r5, r6
   15a9c:	cmp	r7, r2
   15aa0:	bge	15b44 <__assert_fail@plt+0x47c0>
   15aa4:	add	r5, r6, r2
   15aa8:	mov	r2, #0
   15aac:	mov	r1, #0
   15ab0:	cmp	r5, r3
   15ab4:	movwgt	r2, #1
   15ab8:	cmn	r3, #1
   15abc:	movwgt	r1, #1
   15ac0:	cmp	r5, r6
   15ac4:	bvs	15b2c <__assert_fail@plt+0x47a8>
   15ac8:	ands	r1, r1, r2
   15acc:	bne	15b2c <__assert_fail@plt+0x47a8>
   15ad0:	cmn	r4, #1
   15ad4:	ble	15af4 <__assert_fail@plt+0x4770>
   15ad8:	cmp	r4, #0
   15adc:	beq	15b40 <__assert_fail@plt+0x47bc>
   15ae0:	cmn	r5, #1
   15ae4:	ble	15b18 <__assert_fail@plt+0x4794>
   15ae8:	mvn	r1, #-2147483648	; 0x80000000
   15aec:	udiv	r1, r1, r4
   15af0:	b	15b0c <__assert_fail@plt+0x4788>
   15af4:	cmn	r5, #1
   15af8:	ble	15b30 <__assert_fail@plt+0x47ac>
   15afc:	cmn	r4, #1
   15b00:	beq	15b40 <__assert_fail@plt+0x47bc>
   15b04:	mov	r1, #-2147483648	; 0x80000000
   15b08:	sdiv	r1, r1, r4
   15b0c:	cmp	r1, r5
   15b10:	bge	15b40 <__assert_fail@plt+0x47bc>
   15b14:	b	15b2c <__assert_fail@plt+0x47a8>
   15b18:	beq	15b40 <__assert_fail@plt+0x47bc>
   15b1c:	mov	r1, #-2147483648	; 0x80000000
   15b20:	sdiv	r1, r1, r5
   15b24:	cmp	r1, r4
   15b28:	bge	15b40 <__assert_fail@plt+0x47bc>
   15b2c:	bl	15c94 <__assert_fail@plt+0x4910>
   15b30:	mvn	r1, #-2147483648	; 0x80000000
   15b34:	sdiv	r1, r1, r4
   15b38:	cmp	r5, r1
   15b3c:	blt	15b2c <__assert_fail@plt+0x47a8>
   15b40:	mul	r1, r5, r4
   15b44:	bl	158b0 <__assert_fail@plt+0x452c>
   15b48:	str	r5, [r8]
   15b4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b50:	push	{fp, lr}
   15b54:	mov	fp, sp
   15b58:	mov	r1, #1
   15b5c:	bl	16980 <__assert_fail@plt+0x55fc>
   15b60:	cmp	r0, #0
   15b64:	popne	{fp, pc}
   15b68:	bl	15c94 <__assert_fail@plt+0x4910>
   15b6c:	push	{fp, lr}
   15b70:	mov	fp, sp
   15b74:	bl	16980 <__assert_fail@plt+0x55fc>
   15b78:	cmp	r0, #0
   15b7c:	popne	{fp, pc}
   15b80:	bl	15c94 <__assert_fail@plt+0x4910>
   15b84:	push	{fp, lr}
   15b88:	mov	fp, sp
   15b8c:	mov	r1, #1
   15b90:	bl	16980 <__assert_fail@plt+0x55fc>
   15b94:	cmp	r0, #0
   15b98:	popne	{fp, pc}
   15b9c:	bl	15c94 <__assert_fail@plt+0x4910>
   15ba0:	push	{fp, lr}
   15ba4:	mov	fp, sp
   15ba8:	bl	16980 <__assert_fail@plt+0x55fc>
   15bac:	cmp	r0, #0
   15bb0:	popne	{fp, pc}
   15bb4:	bl	15c94 <__assert_fail@plt+0x4910>
   15bb8:	push	{r4, r5, fp, lr}
   15bbc:	add	fp, sp, #8
   15bc0:	mov	r5, r0
   15bc4:	mov	r0, r1
   15bc8:	mov	r4, r1
   15bcc:	bl	169d4 <__assert_fail@plt+0x5650>
   15bd0:	cmp	r0, #0
   15bd4:	beq	15be8 <__assert_fail@plt+0x4864>
   15bd8:	mov	r1, r5
   15bdc:	mov	r2, r4
   15be0:	pop	{r4, r5, fp, lr}
   15be4:	b	11120 <memcpy@plt>
   15be8:	bl	15c94 <__assert_fail@plt+0x4910>
   15bec:	push	{r4, r5, fp, lr}
   15bf0:	add	fp, sp, #8
   15bf4:	mov	r5, r0
   15bf8:	mov	r0, r1
   15bfc:	mov	r4, r1
   15c00:	bl	169d4 <__assert_fail@plt+0x5650>
   15c04:	cmp	r0, #0
   15c08:	beq	15c1c <__assert_fail@plt+0x4898>
   15c0c:	mov	r1, r5
   15c10:	mov	r2, r4
   15c14:	pop	{r4, r5, fp, lr}
   15c18:	b	11120 <memcpy@plt>
   15c1c:	bl	15c94 <__assert_fail@plt+0x4910>
   15c20:	push	{r4, r5, fp, lr}
   15c24:	add	fp, sp, #8
   15c28:	mov	r5, r0
   15c2c:	add	r0, r1, #1
   15c30:	mov	r4, r1
   15c34:	bl	169d4 <__assert_fail@plt+0x5650>
   15c38:	cmp	r0, #0
   15c3c:	beq	15c58 <__assert_fail@plt+0x48d4>
   15c40:	mov	r1, #0
   15c44:	mov	r2, r4
   15c48:	strb	r1, [r0, r4]
   15c4c:	mov	r1, r5
   15c50:	pop	{r4, r5, fp, lr}
   15c54:	b	11120 <memcpy@plt>
   15c58:	bl	15c94 <__assert_fail@plt+0x4910>
   15c5c:	push	{r4, r5, fp, lr}
   15c60:	add	fp, sp, #8
   15c64:	mov	r4, r0
   15c68:	bl	11258 <strlen@plt>
   15c6c:	add	r5, r0, #1
   15c70:	mov	r0, r5
   15c74:	bl	169d4 <__assert_fail@plt+0x5650>
   15c78:	cmp	r0, #0
   15c7c:	beq	15c90 <__assert_fail@plt+0x490c>
   15c80:	mov	r1, r4
   15c84:	mov	r2, r5
   15c88:	pop	{r4, r5, fp, lr}
   15c8c:	b	11120 <memcpy@plt>
   15c90:	bl	15c94 <__assert_fail@plt+0x4910>
   15c94:	push	{fp, lr}
   15c98:	mov	fp, sp
   15c9c:	movw	r0, #37156	; 0x9124
   15ca0:	movw	r1, #33308	; 0x821c
   15ca4:	mov	r2, #5
   15ca8:	movt	r0, #2
   15cac:	movt	r1, #1
   15cb0:	ldr	r4, [r0]
   15cb4:	mov	r0, #0
   15cb8:	bl	1115c <dcgettext@plt>
   15cbc:	movw	r2, #31986	; 0x7cf2
   15cc0:	mov	r3, r0
   15cc4:	mov	r0, r4
   15cc8:	mov	r1, #0
   15ccc:	movt	r2, #1
   15cd0:	bl	111c8 <error@plt>
   15cd4:	bl	11354 <abort@plt>
   15cd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cdc:	add	fp, sp, #24
   15ce0:	sub	sp, sp, #8
   15ce4:	mov	r6, r3
   15ce8:	mov	r4, r2
   15cec:	mov	r5, r1
   15cf0:	mov	r7, r0
   15cf4:	bl	16d48 <__assert_fail@plt+0x59c4>
   15cf8:	mov	r8, r0
   15cfc:	bl	11270 <__errno_location@plt>
   15d00:	ldr	r0, [r0]
   15d04:	cmp	r0, #0
   15d08:	beq	15d20 <__assert_fail@plt+0x499c>
   15d0c:	mov	r1, r7
   15d10:	mov	r2, r5
   15d14:	mov	r3, r4
   15d18:	str	r6, [sp]
   15d1c:	bl	15d2c <__assert_fail@plt+0x49a8>
   15d20:	mov	r0, r8
   15d24:	sub	sp, fp, #24
   15d28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d30:	add	fp, sp, #24
   15d34:	sub	sp, sp, #8
   15d38:	mov	r6, r1
   15d3c:	movw	r1, #33325	; 0x822d
   15d40:	mov	r5, r2
   15d44:	mov	r7, r0
   15d48:	mov	r0, #0
   15d4c:	mov	r2, #5
   15d50:	mov	r8, r3
   15d54:	movt	r1, #1
   15d58:	bl	1115c <dcgettext@plt>
   15d5c:	mov	r2, r0
   15d60:	mov	r0, #0
   15d64:	mov	r1, r7
   15d68:	bl	111c8 <error@plt>
   15d6c:	movw	r1, #33350	; 0x8246
   15d70:	mov	r0, #0
   15d74:	mov	r2, #5
   15d78:	movt	r1, #1
   15d7c:	bl	1115c <dcgettext@plt>
   15d80:	mov	r2, r0
   15d84:	mov	r0, #0
   15d88:	mov	r1, #0
   15d8c:	bl	111c8 <error@plt>
   15d90:	movw	r0, #37156	; 0x9124
   15d94:	movw	r1, #33393	; 0x8271
   15d98:	mov	r2, #5
   15d9c:	movt	r0, #2
   15da0:	movt	r1, #1
   15da4:	ldr	r7, [r0]
   15da8:	mov	r0, #0
   15dac:	bl	1115c <dcgettext@plt>
   15db0:	mov	r4, r0
   15db4:	mov	r0, #0
   15db8:	mov	r1, #8
   15dbc:	mov	r2, r6
   15dc0:	mov	r3, r5
   15dc4:	bl	14e30 <__assert_fail@plt+0x3aac>
   15dc8:	ldr	r3, [fp, #8]
   15dcc:	mov	r5, r0
   15dd0:	mov	r0, #1
   15dd4:	mov	r1, #8
   15dd8:	mov	r2, r8
   15ddc:	bl	14e30 <__assert_fail@plt+0x3aac>
   15de0:	str	r0, [sp]
   15de4:	mov	r0, r7
   15de8:	mov	r1, #0
   15dec:	mov	r2, r4
   15df0:	mov	r3, r5
   15df4:	bl	111c8 <error@plt>
   15df8:	sub	sp, fp, #24
   15dfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e04:	add	fp, sp, #24
   15e08:	sub	sp, sp, #8
   15e0c:	mov	r7, r3
   15e10:	mov	r4, r2
   15e14:	mov	r6, r1
   15e18:	mov	r5, r0
   15e1c:	bl	16e5c <__assert_fail@plt+0x5ad8>
   15e20:	mov	r8, r0
   15e24:	bl	11270 <__errno_location@plt>
   15e28:	ldr	r0, [r0]
   15e2c:	cmp	r0, #0
   15e30:	beq	15e4c <__assert_fail@plt+0x4ac8>
   15e34:	sub	r1, r7, #1
   15e38:	sub	r2, r6, #1
   15e3c:	mov	r3, r4
   15e40:	str	r1, [sp]
   15e44:	mov	r1, r5
   15e48:	bl	15d2c <__assert_fail@plt+0x49a8>
   15e4c:	mov	r0, r8
   15e50:	sub	sp, fp, #24
   15e54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e5c:	add	fp, sp, #28
   15e60:	sub	sp, sp, #12
   15e64:	cmp	r2, #37	; 0x25
   15e68:	bcs	162a4 <__assert_fail@plt+0x4f20>
   15e6c:	ldr	r9, [fp, #8]
   15e70:	mov	r7, r2
   15e74:	mov	r6, r1
   15e78:	mov	r4, r0
   15e7c:	str	r3, [sp, #4]
   15e80:	bl	11270 <__errno_location@plt>
   15e84:	mov	r5, r0
   15e88:	mov	r0, #0
   15e8c:	str	r0, [r5]
   15e90:	bl	11228 <__ctype_b_loc@plt>
   15e94:	ldr	r1, [r0]
   15e98:	mov	r2, r4
   15e9c:	ldrb	r0, [r2], #1
   15ea0:	add	r3, r1, r0, lsl #1
   15ea4:	ldrb	r3, [r3, #1]
   15ea8:	tst	r3, #32
   15eac:	bne	15e9c <__assert_fail@plt+0x4b18>
   15eb0:	cmp	r6, #0
   15eb4:	add	r8, sp, #8
   15eb8:	mov	sl, #4
   15ebc:	movne	r8, r6
   15ec0:	cmp	r0, #45	; 0x2d
   15ec4:	beq	16298 <__assert_fail@plt+0x4f14>
   15ec8:	mov	r0, r4
   15ecc:	mov	r1, r8
   15ed0:	mov	r2, r7
   15ed4:	bl	1124c <strtoul@plt>
   15ed8:	ldr	r6, [r8]
   15edc:	cmp	r6, r4
   15ee0:	beq	15f04 <__assert_fail@plt+0x4b80>
   15ee4:	mov	r7, r0
   15ee8:	ldr	r0, [r5]
   15eec:	cmp	r0, #0
   15ef0:	beq	15f34 <__assert_fail@plt+0x4bb0>
   15ef4:	cmp	r0, #34	; 0x22
   15ef8:	bne	16298 <__assert_fail@plt+0x4f14>
   15efc:	mov	sl, #1
   15f00:	b	15f38 <__assert_fail@plt+0x4bb4>
   15f04:	cmp	r9, #0
   15f08:	beq	16298 <__assert_fail@plt+0x4f14>
   15f0c:	ldrb	r1, [r4]
   15f10:	cmp	r1, #0
   15f14:	beq	16298 <__assert_fail@plt+0x4f14>
   15f18:	mov	r0, r9
   15f1c:	bl	11264 <strchr@plt>
   15f20:	cmp	r0, #0
   15f24:	beq	16298 <__assert_fail@plt+0x4f14>
   15f28:	mov	r7, #1
   15f2c:	mov	sl, #0
   15f30:	b	15f40 <__assert_fail@plt+0x4bbc>
   15f34:	mov	sl, r0
   15f38:	cmp	r9, #0
   15f3c:	beq	16290 <__assert_fail@plt+0x4f0c>
   15f40:	ldrb	r4, [r6]
   15f44:	cmp	r4, #0
   15f48:	beq	16290 <__assert_fail@plt+0x4f0c>
   15f4c:	mov	r0, r9
   15f50:	mov	r1, r4
   15f54:	bl	11264 <strchr@plt>
   15f58:	cmp	r0, #0
   15f5c:	beq	16218 <__assert_fail@plt+0x4e94>
   15f60:	sub	r0, r4, #69	; 0x45
   15f64:	mov	r3, #1
   15f68:	mov	r5, #1024	; 0x400
   15f6c:	cmp	r0, #21
   15f70:	bhi	15f88 <__assert_fail@plt+0x4c04>
   15f74:	movw	r2, #35141	; 0x8945
   15f78:	mov	r1, #1
   15f7c:	movt	r2, #48	; 0x30
   15f80:	tst	r2, r1, lsl r0
   15f84:	bne	15fa4 <__assert_fail@plt+0x4c20>
   15f88:	sub	r0, r4, #103	; 0x67
   15f8c:	cmp	r0, #13
   15f90:	bhi	15ff4 <__assert_fail@plt+0x4c70>
   15f94:	mov	r1, #1
   15f98:	movw	r2, #8273	; 0x2051
   15f9c:	tst	r2, r1, lsl r0
   15fa0:	beq	15ff4 <__assert_fail@plt+0x4c70>
   15fa4:	mov	r0, r9
   15fa8:	mov	r1, #48	; 0x30
   15fac:	bl	11264 <strchr@plt>
   15fb0:	cmp	r0, #0
   15fb4:	beq	15ff0 <__assert_fail@plt+0x4c6c>
   15fb8:	ldrb	r0, [r6, #1]
   15fbc:	cmp	r0, #66	; 0x42
   15fc0:	cmpne	r0, #68	; 0x44
   15fc4:	bne	15fd4 <__assert_fail@plt+0x4c50>
   15fc8:	mov	r3, #2
   15fcc:	mov	r5, #1000	; 0x3e8
   15fd0:	b	15ff4 <__assert_fail@plt+0x4c70>
   15fd4:	cmp	r0, #105	; 0x69
   15fd8:	bne	15ff0 <__assert_fail@plt+0x4c6c>
   15fdc:	ldrb	r0, [r6, #2]
   15fe0:	mov	r3, #1
   15fe4:	cmp	r0, #66	; 0x42
   15fe8:	movweq	r3, #3
   15fec:	b	15ff4 <__assert_fail@plt+0x4c70>
   15ff0:	mov	r3, #1
   15ff4:	cmp	r4, #89	; 0x59
   15ff8:	bgt	16068 <__assert_fail@plt+0x4ce4>
   15ffc:	sub	r0, r4, #66	; 0x42
   16000:	cmp	r0, #14
   16004:	bhi	160dc <__assert_fail@plt+0x4d58>
   16008:	add	r1, pc, #0
   1600c:	ldr	pc, [r1, r0, lsl #2]
   16010:	andeq	r6, r1, ip, asr #32
   16014:	andeq	r6, r1, r8, lsl r2
   16018:	andeq	r6, r1, r8, lsl r2
   1601c:	andeq	r6, r1, r4, lsr #4
   16020:	andeq	r6, r1, r8, lsl r2
   16024:	andeq	r6, r1, ip, lsr r1
   16028:	andeq	r6, r1, r8, lsl r2
   1602c:	andeq	r6, r1, r8, lsl r2
   16030:	andeq	r6, r1, r8, lsl r2
   16034:	andeq	r6, r1, r8, ror #2
   16038:	andeq	r6, r1, r8, lsl r2
   1603c:	andeq	r6, r1, ip, lsl #3
   16040:	andeq	r6, r1, r8, lsl r2
   16044:	andeq	r6, r1, r8, lsl r2
   16048:	andeq	r6, r1, r0, asr r2
   1604c:	mov	r1, #0
   16050:	lsr	r0, r7, #22
   16054:	cmp	r1, r7, lsr #22
   16058:	lsl	r7, r7, #10
   1605c:	movwne	r0, #1
   16060:	mvnne	r7, #0
   16064:	b	16278 <__assert_fail@plt+0x4ef4>
   16068:	cmp	r4, #115	; 0x73
   1606c:	bgt	16118 <__assert_fail@plt+0x4d94>
   16070:	sub	r1, r4, #98	; 0x62
   16074:	cmp	r1, #11
   16078:	bhi	161e4 <__assert_fail@plt+0x4e60>
   1607c:	add	r2, pc, #4
   16080:	mov	r0, #0
   16084:	ldr	pc, [r2, r1, lsl #2]
   16088:	strheq	r6, [r1], -r8
   1608c:	andeq	r6, r1, r8, ror r2
   16090:	andeq	r6, r1, r8, lsl r2
   16094:	andeq	r6, r1, r8, lsl r2
   16098:	andeq	r6, r1, r8, lsl r2
   1609c:	andeq	r6, r1, ip, lsr r1
   160a0:	andeq	r6, r1, r8, lsl r2
   160a4:	andeq	r6, r1, r8, lsl r2
   160a8:	andeq	r6, r1, r8, lsl r2
   160ac:	andeq	r6, r1, r8, ror #2
   160b0:	andeq	r6, r1, r8, lsl r2
   160b4:	andeq	r6, r1, ip, lsl #3
   160b8:	movw	r0, #65535	; 0xffff
   160bc:	movt	r0, #63	; 0x3f
   160c0:	orr	r1, r0, #4194304	; 0x400000
   160c4:	mov	r0, #0
   160c8:	cmp	r7, r1
   160cc:	lsl	r7, r7, #9
   160d0:	movwhi	r0, #1
   160d4:	mvnhi	r7, #0
   160d8:	b	16278 <__assert_fail@plt+0x4ef4>
   160dc:	cmp	r4, #84	; 0x54
   160e0:	beq	161b8 <__assert_fail@plt+0x4e34>
   160e4:	cmp	r4, #89	; 0x59
   160e8:	bne	16218 <__assert_fail@plt+0x4e94>
   160ec:	mvn	r0, #0
   160f0:	mvn	r2, #7
   160f4:	udiv	r1, r0, r5
   160f8:	mov	r0, #0
   160fc:	cmp	r1, r7
   16100:	mul	r7, r7, r5
   16104:	orrcc	r0, r0, #1
   16108:	mvncc	r7, #0
   1610c:	adds	r2, r2, #1
   16110:	bcc	160fc <__assert_fail@plt+0x4d78>
   16114:	b	16278 <__assert_fail@plt+0x4ef4>
   16118:	cmp	r4, #116	; 0x74
   1611c:	beq	161b8 <__assert_fail@plt+0x4e34>
   16120:	cmp	r4, #119	; 0x77
   16124:	bne	16218 <__assert_fail@plt+0x4e94>
   16128:	cmp	r7, #0
   1612c:	lsl	r1, r7, #1
   16130:	lsr	r0, r7, #31
   16134:	mvnmi	r1, #0
   16138:	b	16184 <__assert_fail@plt+0x4e00>
   1613c:	mvn	r0, #0
   16140:	mvn	r2, #2
   16144:	udiv	r1, r0, r5
   16148:	mov	r0, #0
   1614c:	cmp	r1, r7
   16150:	mul	r7, r7, r5
   16154:	orrcc	r0, r0, #1
   16158:	mvncc	r7, #0
   1615c:	adds	r2, r2, #1
   16160:	bcc	1614c <__assert_fail@plt+0x4dc8>
   16164:	b	16278 <__assert_fail@plt+0x4ef4>
   16168:	mvn	r0, #0
   1616c:	mul	r1, r7, r5
   16170:	udiv	r0, r0, r5
   16174:	cmp	r0, r7
   16178:	mov	r0, #0
   1617c:	mvncc	r1, #0
   16180:	movwcc	r0, #1
   16184:	mov	r7, r1
   16188:	b	16278 <__assert_fail@plt+0x4ef4>
   1618c:	mvn	r0, #0
   16190:	mvn	r2, #1
   16194:	udiv	r1, r0, r5
   16198:	mov	r0, #0
   1619c:	cmp	r1, r7
   161a0:	mul	r7, r7, r5
   161a4:	orrcc	r0, r0, #1
   161a8:	mvncc	r7, #0
   161ac:	adds	r2, r2, #1
   161b0:	bcc	1619c <__assert_fail@plt+0x4e18>
   161b4:	b	16278 <__assert_fail@plt+0x4ef4>
   161b8:	mvn	r0, #0
   161bc:	mvn	r2, #3
   161c0:	udiv	r1, r0, r5
   161c4:	mov	r0, #0
   161c8:	cmp	r1, r7
   161cc:	mul	r7, r7, r5
   161d0:	orrcc	r0, r0, #1
   161d4:	mvncc	r7, #0
   161d8:	adds	r2, r2, #1
   161dc:	bcc	161c8 <__assert_fail@plt+0x4e44>
   161e0:	b	16278 <__assert_fail@plt+0x4ef4>
   161e4:	cmp	r4, #90	; 0x5a
   161e8:	bne	16218 <__assert_fail@plt+0x4e94>
   161ec:	mvn	r0, #0
   161f0:	mvn	r2, #6
   161f4:	udiv	r1, r0, r5
   161f8:	mov	r0, #0
   161fc:	cmp	r1, r7
   16200:	mul	r7, r7, r5
   16204:	orrcc	r0, r0, #1
   16208:	mvncc	r7, #0
   1620c:	adds	r2, r2, #1
   16210:	bcc	161fc <__assert_fail@plt+0x4e78>
   16214:	b	16278 <__assert_fail@plt+0x4ef4>
   16218:	ldr	r0, [sp, #4]
   1621c:	orr	sl, sl, #2
   16220:	b	16294 <__assert_fail@plt+0x4f10>
   16224:	mvn	r0, #0
   16228:	mvn	r2, #5
   1622c:	udiv	r1, r0, r5
   16230:	mov	r0, #0
   16234:	cmp	r1, r7
   16238:	mul	r7, r7, r5
   1623c:	orrcc	r0, r0, #1
   16240:	mvncc	r7, #0
   16244:	adds	r2, r2, #1
   16248:	bcc	16234 <__assert_fail@plt+0x4eb0>
   1624c:	b	16278 <__assert_fail@plt+0x4ef4>
   16250:	mvn	r0, #0
   16254:	mvn	r2, #4
   16258:	udiv	r1, r0, r5
   1625c:	mov	r0, #0
   16260:	cmp	r1, r7
   16264:	mul	r7, r7, r5
   16268:	orrcc	r0, r0, #1
   1626c:	mvncc	r7, #0
   16270:	adds	r2, r2, #1
   16274:	bcc	16260 <__assert_fail@plt+0x4edc>
   16278:	add	r1, r6, r3
   1627c:	orr	sl, r0, sl
   16280:	str	r1, [r8]
   16284:	ldrb	r1, [r6, r3]
   16288:	cmp	r1, #0
   1628c:	orrne	sl, sl, #2
   16290:	ldr	r0, [sp, #4]
   16294:	str	r7, [r0]
   16298:	mov	r0, sl
   1629c:	sub	sp, fp, #28
   162a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162a4:	movw	r0, #33430	; 0x8296
   162a8:	movw	r1, #33468	; 0x82bc
   162ac:	movw	r3, #33484	; 0x82cc
   162b0:	mov	r2, #85	; 0x55
   162b4:	movt	r0, #1
   162b8:	movt	r1, #1
   162bc:	movt	r3, #1
   162c0:	bl	11384 <__assert_fail@plt>
   162c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162c8:	add	fp, sp, #28
   162cc:	sub	sp, sp, #20
   162d0:	cmp	r2, #37	; 0x25
   162d4:	bcs	16960 <__assert_fail@plt+0x55dc>
   162d8:	mov	r8, r3
   162dc:	mov	r5, r2
   162e0:	mov	r6, r1
   162e4:	mov	r4, r0
   162e8:	bl	11270 <__errno_location@plt>
   162ec:	mov	r7, r0
   162f0:	mov	r0, #0
   162f4:	str	r0, [r7]
   162f8:	bl	11228 <__ctype_b_loc@plt>
   162fc:	ldr	r1, [r0]
   16300:	mov	r2, r4
   16304:	ldrb	r0, [r2], #1
   16308:	add	r3, r1, r0, lsl #1
   1630c:	ldrb	r3, [r3, #1]
   16310:	tst	r3, #32
   16314:	bne	16304 <__assert_fail@plt+0x4f80>
   16318:	cmp	r6, #0
   1631c:	add	sl, sp, #16
   16320:	movne	sl, r6
   16324:	mov	r6, #4
   16328:	cmp	r0, #45	; 0x2d
   1632c:	beq	16954 <__assert_fail@plt+0x55d0>
   16330:	mov	r0, r4
   16334:	mov	r1, sl
   16338:	mov	r2, r5
   1633c:	str	r8, [sp, #12]
   16340:	bl	112ac <strtoumax@plt>
   16344:	ldr	r5, [sl]
   16348:	cmp	r5, r4
   1634c:	beq	16374 <__assert_fail@plt+0x4ff0>
   16350:	mov	r8, r0
   16354:	ldr	r0, [r7]
   16358:	mov	r9, r1
   1635c:	cmp	r0, #0
   16360:	beq	163a8 <__assert_fail@plt+0x5024>
   16364:	cmp	r0, #34	; 0x22
   16368:	bne	16954 <__assert_fail@plt+0x55d0>
   1636c:	mov	r6, #1
   16370:	b	163ac <__assert_fail@plt+0x5028>
   16374:	ldr	r0, [fp, #8]
   16378:	cmp	r0, #0
   1637c:	beq	16954 <__assert_fail@plt+0x55d0>
   16380:	ldrb	r1, [r4]
   16384:	cmp	r1, #0
   16388:	beq	16954 <__assert_fail@plt+0x55d0>
   1638c:	bl	11264 <strchr@plt>
   16390:	cmp	r0, #0
   16394:	beq	16954 <__assert_fail@plt+0x55d0>
   16398:	mov	r6, #0
   1639c:	mov	r8, #1
   163a0:	mov	r9, #0
   163a4:	b	163b8 <__assert_fail@plt+0x5034>
   163a8:	mov	r6, r0
   163ac:	ldr	r0, [fp, #8]
   163b0:	cmp	r0, #0
   163b4:	beq	1694c <__assert_fail@plt+0x55c8>
   163b8:	ldrb	r7, [r5]
   163bc:	cmp	r7, #0
   163c0:	beq	1694c <__assert_fail@plt+0x55c8>
   163c4:	ldr	r0, [fp, #8]
   163c8:	mov	r1, r7
   163cc:	bl	11264 <strchr@plt>
   163d0:	cmp	r0, #0
   163d4:	beq	164dc <__assert_fail@plt+0x5158>
   163d8:	sub	r0, r7, #69	; 0x45
   163dc:	mov	r1, #1
   163e0:	mov	r3, #0
   163e4:	mov	r4, #1024	; 0x400
   163e8:	cmp	r0, #21
   163ec:	str	r1, [sp, #8]
   163f0:	bhi	16408 <__assert_fail@plt+0x5084>
   163f4:	movw	r2, #35141	; 0x8945
   163f8:	mov	r1, #1
   163fc:	movt	r2, #48	; 0x30
   16400:	tst	r2, r1, lsl r0
   16404:	bne	16424 <__assert_fail@plt+0x50a0>
   16408:	sub	r0, r7, #103	; 0x67
   1640c:	cmp	r0, #13
   16410:	bhi	16458 <__assert_fail@plt+0x50d4>
   16414:	mov	r1, #1
   16418:	movw	r2, #8273	; 0x2051
   1641c:	tst	r2, r1, lsl r0
   16420:	beq	16458 <__assert_fail@plt+0x50d4>
   16424:	ldr	r0, [fp, #8]
   16428:	mov	r1, #48	; 0x30
   1642c:	bl	11264 <strchr@plt>
   16430:	cmp	r0, #0
   16434:	beq	16454 <__assert_fail@plt+0x50d0>
   16438:	ldrb	r0, [r5, #1]
   1643c:	cmp	r0, #66	; 0x42
   16440:	cmpne	r0, #68	; 0x44
   16444:	bne	1656c <__assert_fail@plt+0x51e8>
   16448:	mov	r4, #1000	; 0x3e8
   1644c:	mov	r0, #2
   16450:	str	r0, [sp, #8]
   16454:	mov	r3, #0
   16458:	cmp	r7, #89	; 0x59
   1645c:	stm	sp, {r5, r6}
   16460:	bgt	164e8 <__assert_fail@plt+0x5164>
   16464:	sub	r0, r7, #66	; 0x42
   16468:	cmp	r0, #14
   1646c:	bhi	16590 <__assert_fail@plt+0x520c>
   16470:	add	r1, pc, #0
   16474:	ldr	pc, [r1, r0, lsl #2]
   16478:			; <UNDEFINED> instruction: 0x000164b4
   1647c:	andeq	r6, r1, r0, asr #16
   16480:	andeq	r6, r1, r0, asr #16
   16484:	andeq	r6, r1, r4, asr r8
   16488:	andeq	r6, r1, r0, asr #16
   1648c:	andeq	r6, r1, r4, asr #12
   16490:	andeq	r6, r1, r0, asr #16
   16494:	andeq	r6, r1, r0, asr #16
   16498:	andeq	r6, r1, r0, asr #16
   1649c:			; <UNDEFINED> instruction: 0x000166b0
   164a0:	andeq	r6, r1, r0, asr #16
   164a4:	strdeq	r6, [r1], -r4
   164a8:	andeq	r6, r1, r0, asr #16
   164ac:	andeq	r6, r1, r0, asr #16
   164b0:	andeq	r6, r1, r0, asr #17
   164b4:	mov	r1, #0
   164b8:	lsl	r3, r9, #10
   164bc:	lsl	r0, r8, #10
   164c0:	lsr	r2, r9, #22
   164c4:	cmp	r1, r9, lsr #22
   164c8:	orr	r3, r3, r8, lsr #22
   164cc:	mvnne	r0, #0
   164d0:	movwne	r2, #1
   164d4:	cmp	r1, r9, lsr #22
   164d8:	b	1655c <__assert_fail@plt+0x51d8>
   164dc:	ldr	r0, [sp, #12]
   164e0:	orr	r6, r6, #2
   164e4:	b	16950 <__assert_fail@plt+0x55cc>
   164e8:	cmp	r7, #115	; 0x73
   164ec:	bgt	1660c <__assert_fail@plt+0x5288>
   164f0:	sub	r0, r7, #98	; 0x62
   164f4:	cmp	r0, #11
   164f8:	bhi	167cc <__assert_fail@plt+0x5448>
   164fc:	add	r1, pc, #4
   16500:	mov	r2, #0
   16504:	ldr	pc, [r1, r0, lsl #2]
   16508:	andeq	r6, r1, r8, lsr r5
   1650c:	andeq	r6, r1, r8, lsr #18
   16510:	andeq	r6, r1, r0, asr #16
   16514:	andeq	r6, r1, r0, asr #16
   16518:	andeq	r6, r1, r0, asr #16
   1651c:	andeq	r6, r1, r4, asr #12
   16520:	andeq	r6, r1, r0, asr #16
   16524:	andeq	r6, r1, r0, asr #16
   16528:	andeq	r6, r1, r0, asr #16
   1652c:			; <UNDEFINED> instruction: 0x000166b0
   16530:	andeq	r6, r1, r0, asr #16
   16534:	strdeq	r6, [r1], -r4
   16538:	mov	r1, #0
   1653c:	lsl	r3, r9, #9
   16540:	lsl	r0, r8, #9
   16544:	lsr	r2, r9, #23
   16548:	cmp	r1, r9, lsr #23
   1654c:	orr	r3, r3, r8, lsr #23
   16550:	mvnne	r0, #0
   16554:	movwne	r2, #1
   16558:	cmp	r1, r9, lsr #23
   1655c:	mvnne	r3, #0
   16560:	mov	r8, r0
   16564:	mov	r9, r3
   16568:	b	16928 <__assert_fail@plt+0x55a4>
   1656c:	cmp	r0, #105	; 0x69
   16570:	mov	r3, #0
   16574:	bne	16458 <__assert_fail@plt+0x50d4>
   16578:	ldrb	r0, [r5, #2]
   1657c:	mov	r1, #1
   16580:	cmp	r0, #66	; 0x42
   16584:	movweq	r1, #3
   16588:	str	r1, [sp, #8]
   1658c:	b	16458 <__assert_fail@plt+0x50d4>
   16590:	cmp	r7, #84	; 0x54
   16594:	beq	16760 <__assert_fail@plt+0x53dc>
   16598:	cmp	r7, #89	; 0x59
   1659c:	bne	16840 <__assert_fail@plt+0x54bc>
   165a0:	mvn	r0, #0
   165a4:	mvn	r1, #0
   165a8:	mov	r2, r4
   165ac:	mov	r5, r3
   165b0:	bl	16efc <__assert_fail@plt+0x5b78>
   165b4:	mov	ip, r5
   165b8:	mvn	lr, #0
   165bc:	mov	r2, #0
   165c0:	mvn	r3, #7
   165c4:	mov	r5, r8
   165c8:	mov	r7, r9
   165cc:	umull	r8, r6, r5, r4
   165d0:	mvn	r9, #0
   165d4:	mla	r6, r5, ip, r6
   165d8:	subs	r5, r0, r5
   165dc:	sbcs	r5, r1, r7
   165e0:	mov	r5, #0
   165e4:	movwcc	r5, #1
   165e8:	cmp	r5, #0
   165ec:	mlaeq	r9, r7, r4, r6
   165f0:	movne	r8, lr
   165f4:	orrne	r2, r2, #1
   165f8:	adds	r3, r3, #1
   165fc:	mov	r5, r8
   16600:	mov	r7, r9
   16604:	bcc	165cc <__assert_fail@plt+0x5248>
   16608:	b	16928 <__assert_fail@plt+0x55a4>
   1660c:	cmp	r7, #116	; 0x74
   16610:	beq	16760 <__assert_fail@plt+0x53dc>
   16614:	cmp	r7, #119	; 0x77
   16618:	bne	16840 <__assert_fail@plt+0x54bc>
   1661c:	lsl	r1, r9, #1
   16620:	cmp	r9, #0
   16624:	lsl	r0, r8, #1
   16628:	lsr	r2, r9, #31
   1662c:	orr	r1, r1, r8, lsr #31
   16630:	mvnmi	r0, #0
   16634:	mvnmi	r1, #0
   16638:	mov	r8, r0
   1663c:	mov	r9, r1
   16640:	b	16928 <__assert_fail@plt+0x55a4>
   16644:	mvn	r0, #0
   16648:	mvn	r1, #0
   1664c:	mov	r2, r4
   16650:	mov	r5, r3
   16654:	bl	16efc <__assert_fail@plt+0x5b78>
   16658:	mov	ip, r5
   1665c:	mvn	lr, #0
   16660:	mov	r2, #0
   16664:	mvn	r3, #2
   16668:	mov	r6, r8
   1666c:	mov	r5, r9
   16670:	umull	r8, r7, r6, r4
   16674:	mvn	r9, #0
   16678:	mla	r7, r6, ip, r7
   1667c:	subs	r6, r0, r6
   16680:	sbcs	r6, r1, r5
   16684:	mov	r6, #0
   16688:	movwcc	r6, #1
   1668c:	cmp	r6, #0
   16690:	mlaeq	r9, r5, r4, r7
   16694:	movne	r8, lr
   16698:	orrne	r2, r2, #1
   1669c:	adds	r3, r3, #1
   166a0:	mov	r6, r8
   166a4:	mov	r5, r9
   166a8:	bcc	16670 <__assert_fail@plt+0x52ec>
   166ac:	b	16928 <__assert_fail@plt+0x55a4>
   166b0:	mvn	r0, #0
   166b4:	mvn	r1, #0
   166b8:	mov	r2, r4
   166bc:	mov	r5, r3
   166c0:	bl	16efc <__assert_fail@plt+0x5b78>
   166c4:	subs	r0, r0, r8
   166c8:	mov	r2, #0
   166cc:	sbcs	r0, r1, r9
   166d0:	umull	r0, r1, r8, r4
   166d4:	movwcc	r2, #1
   166d8:	cmp	r2, #0
   166dc:	mla	r1, r8, r5, r1
   166e0:	mvnne	r0, #0
   166e4:	mla	r9, r9, r4, r1
   166e8:	mvnne	r9, #0
   166ec:	mov	r8, r0
   166f0:	b	16928 <__assert_fail@plt+0x55a4>
   166f4:	mvn	r0, #0
   166f8:	mvn	r1, #0
   166fc:	mov	r2, r4
   16700:	mov	r5, r3
   16704:	bl	16efc <__assert_fail@plt+0x5b78>
   16708:	mov	ip, r5
   1670c:	mvn	lr, #0
   16710:	mov	r2, #0
   16714:	mvn	r3, #1
   16718:	mov	r6, r8
   1671c:	mov	r5, r9
   16720:	umull	r8, r7, r6, r4
   16724:	mvn	r9, #0
   16728:	mla	r7, r6, ip, r7
   1672c:	subs	r6, r0, r6
   16730:	sbcs	r6, r1, r5
   16734:	mov	r6, #0
   16738:	movwcc	r6, #1
   1673c:	cmp	r6, #0
   16740:	mlaeq	r9, r5, r4, r7
   16744:	movne	r8, lr
   16748:	orrne	r2, r2, #1
   1674c:	adds	r3, r3, #1
   16750:	mov	r6, r8
   16754:	mov	r5, r9
   16758:	bcc	16720 <__assert_fail@plt+0x539c>
   1675c:	b	16928 <__assert_fail@plt+0x55a4>
   16760:	mvn	r0, #0
   16764:	mvn	r1, #0
   16768:	mov	r2, r4
   1676c:	mov	r5, r3
   16770:	bl	16efc <__assert_fail@plt+0x5b78>
   16774:	mov	ip, r5
   16778:	mvn	lr, #0
   1677c:	mov	r2, #0
   16780:	mvn	r3, #3
   16784:	mov	r6, r8
   16788:	mov	r5, r9
   1678c:	umull	r8, r7, r6, r4
   16790:	mvn	r9, #0
   16794:	mla	r7, r6, ip, r7
   16798:	subs	r6, r0, r6
   1679c:	sbcs	r6, r1, r5
   167a0:	mov	r6, #0
   167a4:	movwcc	r6, #1
   167a8:	cmp	r6, #0
   167ac:	mlaeq	r9, r5, r4, r7
   167b0:	movne	r8, lr
   167b4:	orrne	r2, r2, #1
   167b8:	adds	r3, r3, #1
   167bc:	mov	r6, r8
   167c0:	mov	r5, r9
   167c4:	bcc	1678c <__assert_fail@plt+0x5408>
   167c8:	b	16928 <__assert_fail@plt+0x55a4>
   167cc:	cmp	r7, #90	; 0x5a
   167d0:	bne	16840 <__assert_fail@plt+0x54bc>
   167d4:	mvn	r0, #0
   167d8:	mvn	r1, #0
   167dc:	mov	r2, r4
   167e0:	mov	r5, r3
   167e4:	bl	16efc <__assert_fail@plt+0x5b78>
   167e8:	mov	ip, r5
   167ec:	mvn	lr, #0
   167f0:	mov	r2, #0
   167f4:	mvn	r3, #6
   167f8:	mov	r5, r8
   167fc:	mov	r7, r9
   16800:	umull	r8, r6, r5, r4
   16804:	mvn	r9, #0
   16808:	mla	r6, r5, ip, r6
   1680c:	subs	r5, r0, r5
   16810:	sbcs	r5, r1, r7
   16814:	mov	r5, #0
   16818:	movwcc	r5, #1
   1681c:	cmp	r5, #0
   16820:	mlaeq	r9, r7, r4, r6
   16824:	movne	r8, lr
   16828:	orrne	r2, r2, #1
   1682c:	adds	r3, r3, #1
   16830:	mov	r5, r8
   16834:	mov	r7, r9
   16838:	bcc	16800 <__assert_fail@plt+0x547c>
   1683c:	b	16928 <__assert_fail@plt+0x55a4>
   16840:	ldr	r0, [sp, #12]
   16844:	strd	r8, [r0]
   16848:	ldr	r6, [sp, #4]
   1684c:	orr	r6, r6, #2
   16850:	b	16954 <__assert_fail@plt+0x55d0>
   16854:	mvn	r0, #0
   16858:	mvn	r1, #0
   1685c:	mov	r2, r4
   16860:	mov	r5, r3
   16864:	bl	16efc <__assert_fail@plt+0x5b78>
   16868:	mov	ip, r5
   1686c:	mvn	lr, #0
   16870:	mov	r2, #0
   16874:	mvn	r3, #5
   16878:	mov	r5, r8
   1687c:	mov	r7, r9
   16880:	umull	r8, r6, r5, r4
   16884:	mvn	r9, #0
   16888:	mla	r6, r5, ip, r6
   1688c:	subs	r5, r0, r5
   16890:	sbcs	r5, r1, r7
   16894:	mov	r5, #0
   16898:	movwcc	r5, #1
   1689c:	cmp	r5, #0
   168a0:	mlaeq	r9, r7, r4, r6
   168a4:	movne	r8, lr
   168a8:	orrne	r2, r2, #1
   168ac:	adds	r3, r3, #1
   168b0:	mov	r5, r8
   168b4:	mov	r7, r9
   168b8:	bcc	16880 <__assert_fail@plt+0x54fc>
   168bc:	b	16928 <__assert_fail@plt+0x55a4>
   168c0:	mvn	r0, #0
   168c4:	mvn	r1, #0
   168c8:	mov	r2, r4
   168cc:	mov	r5, r3
   168d0:	bl	16efc <__assert_fail@plt+0x5b78>
   168d4:	mov	ip, r5
   168d8:	mvn	lr, #0
   168dc:	mov	r2, #0
   168e0:	mvn	r3, #4
   168e4:	mov	r5, r8
   168e8:	mov	r7, r9
   168ec:	umull	r8, r6, r5, r4
   168f0:	mvn	r9, #0
   168f4:	mla	r6, r5, ip, r6
   168f8:	subs	r5, r0, r5
   168fc:	sbcs	r5, r1, r7
   16900:	mov	r5, #0
   16904:	movwcc	r5, #1
   16908:	cmp	r5, #0
   1690c:	mlaeq	r9, r7, r4, r6
   16910:	movne	r8, lr
   16914:	orrne	r2, r2, #1
   16918:	adds	r3, r3, #1
   1691c:	mov	r5, r8
   16920:	mov	r7, r9
   16924:	bcc	168ec <__assert_fail@plt+0x5568>
   16928:	ldr	r1, [sp]
   1692c:	ldr	r3, [sp, #8]
   16930:	ldr	r6, [sp, #4]
   16934:	add	r0, r1, r3
   16938:	orr	r6, r2, r6
   1693c:	str	r0, [sl]
   16940:	ldrb	r0, [r1, r3]
   16944:	cmp	r0, #0
   16948:	orrne	r6, r6, #2
   1694c:	ldr	r0, [sp, #12]
   16950:	strd	r8, [r0]
   16954:	mov	r0, r6
   16958:	sub	sp, fp, #28
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16960:	movw	r0, #33430	; 0x8296
   16964:	movw	r1, #33468	; 0x82bc
   16968:	movw	r3, #33565	; 0x831d
   1696c:	mov	r2, #85	; 0x55
   16970:	movt	r0, #1
   16974:	movt	r1, #1
   16978:	movt	r3, #1
   1697c:	bl	11384 <__assert_fail@plt>
   16980:	clz	r2, r1
   16984:	clz	r3, r0
   16988:	lsr	r2, r2, #5
   1698c:	lsr	r3, r3, #5
   16990:	orrs	r2, r3, r2
   16994:	movwne	r1, #1
   16998:	movwne	r0, #1
   1699c:	cmp	r1, #0
   169a0:	beq	169d0 <__assert_fail@plt+0x564c>
   169a4:	mvn	r2, #-2147483648	; 0x80000000
   169a8:	udiv	r2, r2, r1
   169ac:	cmp	r2, r0
   169b0:	bcs	169d0 <__assert_fail@plt+0x564c>
   169b4:	push	{fp, lr}
   169b8:	mov	fp, sp
   169bc:	bl	11270 <__errno_location@plt>
   169c0:	mov	r1, #12
   169c4:	str	r1, [r0]
   169c8:	mov	r0, #0
   169cc:	pop	{fp, pc}
   169d0:	b	110c0 <calloc@plt>
   169d4:	cmp	r0, #0
   169d8:	movweq	r0, #1
   169dc:	cmn	r0, #1
   169e0:	ble	169e8 <__assert_fail@plt+0x5664>
   169e4:	b	111e0 <malloc@plt>
   169e8:	push	{fp, lr}
   169ec:	mov	fp, sp
   169f0:	bl	11270 <__errno_location@plt>
   169f4:	mov	r1, #12
   169f8:	str	r1, [r0]
   169fc:	mov	r0, #0
   16a00:	pop	{fp, pc}
   16a04:	push	{fp, lr}
   16a08:	mov	fp, sp
   16a0c:	cmp	r0, #0
   16a10:	beq	16a2c <__assert_fail@plt+0x56a8>
   16a14:	cmp	r1, #0
   16a18:	beq	16a38 <__assert_fail@plt+0x56b4>
   16a1c:	cmn	r1, #1
   16a20:	ble	16a40 <__assert_fail@plt+0x56bc>
   16a24:	pop	{fp, lr}
   16a28:	b	11168 <realloc@plt>
   16a2c:	mov	r0, r1
   16a30:	pop	{fp, lr}
   16a34:	b	169d4 <__assert_fail@plt+0x5650>
   16a38:	bl	13548 <__assert_fail@plt+0x21c4>
   16a3c:	b	16a4c <__assert_fail@plt+0x56c8>
   16a40:	bl	11270 <__errno_location@plt>
   16a44:	mov	r1, #12
   16a48:	str	r1, [r0]
   16a4c:	mov	r0, #0
   16a50:	pop	{fp, pc}
   16a54:	push	{r4, r5, r6, sl, fp, lr}
   16a58:	add	fp, sp, #16
   16a5c:	mov	r4, r0
   16a60:	bl	111a4 <__fpending@plt>
   16a64:	mov	r5, r0
   16a68:	mov	r0, r4
   16a6c:	bl	111b0 <ferror_unlocked@plt>
   16a70:	mov	r6, r0
   16a74:	mov	r0, r4
   16a78:	bl	133a4 <__assert_fail@plt+0x2020>
   16a7c:	cmp	r6, #0
   16a80:	beq	16aa0 <__assert_fail@plt+0x571c>
   16a84:	mvn	r4, #0
   16a88:	cmp	r0, #0
   16a8c:	bne	16acc <__assert_fail@plt+0x5748>
   16a90:	bl	11270 <__errno_location@plt>
   16a94:	mov	r1, #0
   16a98:	str	r1, [r0]
   16a9c:	b	16acc <__assert_fail@plt+0x5748>
   16aa0:	cmp	r0, #0
   16aa4:	mov	r4, r0
   16aa8:	mvnne	r4, #0
   16aac:	cmp	r5, #0
   16ab0:	bne	16acc <__assert_fail@plt+0x5748>
   16ab4:	cmp	r0, #0
   16ab8:	beq	16acc <__assert_fail@plt+0x5748>
   16abc:	bl	11270 <__errno_location@plt>
   16ac0:	ldr	r0, [r0]
   16ac4:	subs	r4, r0, #9
   16ac8:	mvnne	r4, #0
   16acc:	mov	r0, r4
   16ad0:	pop	{r4, r5, r6, sl, fp, pc}
   16ad4:	sub	sp, sp, #8
   16ad8:	push	{r4, r5, r6, r7, fp, lr}
   16adc:	add	fp, sp, #16
   16ae0:	sub	sp, sp, #8
   16ae4:	mov	r5, r0
   16ae8:	add	r0, fp, #8
   16aec:	cmp	r1, #11
   16af0:	str	r2, [fp, #8]
   16af4:	str	r3, [fp, #12]
   16af8:	str	r0, [sp, #4]
   16afc:	bhi	16b38 <__assert_fail@plt+0x57b4>
   16b00:	mov	r0, #1
   16b04:	movw	r2, #1300	; 0x514
   16b08:	tst	r2, r0, lsl r1
   16b0c:	bne	16bf0 <__assert_fail@plt+0x586c>
   16b10:	movw	r2, #2570	; 0xa0a
   16b14:	tst	r2, r0, lsl r1
   16b18:	bne	16b60 <__assert_fail@plt+0x57dc>
   16b1c:	cmp	r1, #0
   16b20:	bne	16b38 <__assert_fail@plt+0x57b4>
   16b24:	ldr	r0, [sp, #4]
   16b28:	add	r1, r0, #4
   16b2c:	str	r1, [sp, #4]
   16b30:	mov	r1, #0
   16b34:	b	16bfc <__assert_fail@plt+0x5878>
   16b38:	sub	r0, r1, #1024	; 0x400
   16b3c:	cmp	r0, #10
   16b40:	bhi	16bf0 <__assert_fail@plt+0x586c>
   16b44:	mov	r2, #1
   16b48:	movw	r3, #645	; 0x285
   16b4c:	tst	r3, r2, lsl r0
   16b50:	bne	16bf0 <__assert_fail@plt+0x586c>
   16b54:	movw	r3, #1282	; 0x502
   16b58:	tst	r3, r2, lsl r0
   16b5c:	beq	16b6c <__assert_fail@plt+0x57e8>
   16b60:	mov	r0, r5
   16b64:	bl	112e8 <fcntl64@plt>
   16b68:	b	16c08 <__assert_fail@plt+0x5884>
   16b6c:	cmp	r0, #6
   16b70:	bne	16bf0 <__assert_fail@plt+0x586c>
   16b74:	ldr	r0, [sp, #4]
   16b78:	movw	r7, #37696	; 0x9340
   16b7c:	movt	r7, #2
   16b80:	add	r1, r0, #4
   16b84:	str	r1, [sp, #4]
   16b88:	ldr	r6, [r0]
   16b8c:	ldr	r0, [r7]
   16b90:	cmp	r0, #0
   16b94:	bmi	16c2c <__assert_fail@plt+0x58a8>
   16b98:	mov	r0, r5
   16b9c:	movw	r1, #1030	; 0x406
   16ba0:	mov	r2, r6
   16ba4:	bl	112e8 <fcntl64@plt>
   16ba8:	mov	r4, r0
   16bac:	cmn	r0, #1
   16bb0:	bgt	16c20 <__assert_fail@plt+0x589c>
   16bb4:	bl	11270 <__errno_location@plt>
   16bb8:	ldr	r0, [r0]
   16bbc:	cmp	r0, #22
   16bc0:	bne	16c20 <__assert_fail@plt+0x589c>
   16bc4:	mov	r0, r5
   16bc8:	mov	r1, #0
   16bcc:	mov	r2, r6
   16bd0:	bl	112e8 <fcntl64@plt>
   16bd4:	mov	r4, r0
   16bd8:	cmp	r0, #0
   16bdc:	bmi	16c0c <__assert_fail@plt+0x5888>
   16be0:	mvn	r0, #0
   16be4:	str	r0, [r7]
   16be8:	mov	r0, #1
   16bec:	b	16c50 <__assert_fail@plt+0x58cc>
   16bf0:	ldr	r0, [sp, #4]
   16bf4:	add	r2, r0, #4
   16bf8:	str	r2, [sp, #4]
   16bfc:	ldr	r2, [r0]
   16c00:	mov	r0, r5
   16c04:	bl	112e8 <fcntl64@plt>
   16c08:	mov	r4, r0
   16c0c:	mov	r0, r4
   16c10:	sub	sp, fp, #16
   16c14:	pop	{r4, r5, r6, r7, fp, lr}
   16c18:	add	sp, sp, #8
   16c1c:	bx	lr
   16c20:	mov	r0, #1
   16c24:	str	r0, [r7]
   16c28:	b	16c0c <__assert_fail@plt+0x5888>
   16c2c:	mov	r0, r5
   16c30:	mov	r1, #0
   16c34:	mov	r2, r6
   16c38:	bl	112e8 <fcntl64@plt>
   16c3c:	mov	r4, r0
   16c40:	ldr	r0, [r7]
   16c44:	add	r0, r0, #1
   16c48:	clz	r0, r0
   16c4c:	lsr	r0, r0, #5
   16c50:	cmp	r0, #0
   16c54:	beq	16c0c <__assert_fail@plt+0x5888>
   16c58:	cmp	r4, #0
   16c5c:	bmi	16c0c <__assert_fail@plt+0x5888>
   16c60:	mov	r0, r4
   16c64:	mov	r1, #1
   16c68:	bl	112e8 <fcntl64@plt>
   16c6c:	cmp	r0, #0
   16c70:	bmi	16c8c <__assert_fail@plt+0x5908>
   16c74:	orr	r2, r0, #1
   16c78:	mov	r0, r4
   16c7c:	mov	r1, #2
   16c80:	bl	112e8 <fcntl64@plt>
   16c84:	cmn	r0, #1
   16c88:	bne	16c0c <__assert_fail@plt+0x5888>
   16c8c:	bl	11270 <__errno_location@plt>
   16c90:	ldr	r6, [r0]
   16c94:	mov	r5, r0
   16c98:	mov	r0, r4
   16c9c:	bl	1136c <close@plt>
   16ca0:	str	r6, [r5]
   16ca4:	mvn	r4, #0
   16ca8:	b	16c0c <__assert_fail@plt+0x5888>
   16cac:	push	{fp, lr}
   16cb0:	mov	fp, sp
   16cb4:	mov	r0, #14
   16cb8:	bl	1130c <nl_langinfo@plt>
   16cbc:	movw	r1, #31922	; 0x7cb2
   16cc0:	cmp	r0, #0
   16cc4:	movt	r1, #1
   16cc8:	movne	r1, r0
   16ccc:	movw	r0, #33644	; 0x836c
   16cd0:	ldrb	r2, [r1]
   16cd4:	movt	r0, #1
   16cd8:	cmp	r2, #0
   16cdc:	movne	r0, r1
   16ce0:	pop	{fp, pc}
   16ce4:	push	{r4, r5, r6, r7, fp, lr}
   16ce8:	add	fp, sp, #16
   16cec:	sub	sp, sp, #8
   16cf0:	cmp	r0, #0
   16cf4:	add	r5, sp, #4
   16cf8:	mov	r7, r2
   16cfc:	mov	r4, r1
   16d00:	movne	r5, r0
   16d04:	mov	r0, r5
   16d08:	bl	111bc <mbrtowc@plt>
   16d0c:	mov	r6, r0
   16d10:	cmp	r7, #0
   16d14:	beq	16d3c <__assert_fail@plt+0x59b8>
   16d18:	cmn	r6, #2
   16d1c:	bcc	16d3c <__assert_fail@plt+0x59b8>
   16d20:	mov	r0, #0
   16d24:	bl	13614 <__assert_fail@plt+0x2290>
   16d28:	cmp	r0, #0
   16d2c:	bne	16d3c <__assert_fail@plt+0x59b8>
   16d30:	ldrb	r0, [r4]
   16d34:	mov	r6, #1
   16d38:	str	r0, [r5]
   16d3c:	mov	r0, r6
   16d40:	sub	sp, fp, #16
   16d44:	pop	{r4, r5, r6, r7, fp, pc}
   16d48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16d4c:	add	fp, sp, #24
   16d50:	mov	r4, r3
   16d54:	mov	r5, r2
   16d58:	mov	r6, r1
   16d5c:	mov	r7, r0
   16d60:	cmp	r1, r3
   16d64:	bne	16d80 <__assert_fail@plt+0x59fc>
   16d68:	mov	r0, r7
   16d6c:	mov	r1, r5
   16d70:	mov	r2, r6
   16d74:	bl	11240 <bcmp@plt>
   16d78:	cmp	r0, #0
   16d7c:	beq	16db4 <__assert_fail@plt+0x5a30>
   16d80:	ldrb	r8, [r5, r4]
   16d84:	ldrb	r9, [r7, r6]
   16d88:	mov	r0, #0
   16d8c:	add	r1, r6, #1
   16d90:	add	r3, r4, #1
   16d94:	mov	r2, r5
   16d98:	strb	r0, [r7, r6]
   16d9c:	strb	r0, [r5, r4]
   16da0:	mov	r0, r7
   16da4:	bl	16dc8 <__assert_fail@plt+0x5a44>
   16da8:	strb	r9, [r7, r6]
   16dac:	strb	r8, [r5, r4]
   16db0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16db4:	bl	11270 <__errno_location@plt>
   16db8:	mov	r1, #0
   16dbc:	str	r1, [r0]
   16dc0:	mov	r0, #0
   16dc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16dc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dcc:	add	fp, sp, #28
   16dd0:	sub	sp, sp, #4
   16dd4:	mov	sl, r3
   16dd8:	mov	r5, r2
   16ddc:	mov	r6, r1
   16de0:	mov	r7, r0
   16de4:	bl	11270 <__errno_location@plt>
   16de8:	mov	r8, r0
   16dec:	mov	r9, #0
   16df0:	mov	r0, r7
   16df4:	mov	r1, r5
   16df8:	str	r9, [r8]
   16dfc:	bl	111d4 <strcoll@plt>
   16e00:	cmp	r0, #0
   16e04:	bne	16e54 <__assert_fail@plt+0x5ad0>
   16e08:	mov	r0, r7
   16e0c:	bl	11258 <strlen@plt>
   16e10:	add	r4, r0, #1
   16e14:	mov	r0, r5
   16e18:	sub	r6, r6, r4
   16e1c:	bl	11258 <strlen@plt>
   16e20:	add	r0, r0, #1
   16e24:	cmp	r6, #0
   16e28:	sub	sl, sl, r0
   16e2c:	beq	16e48 <__assert_fail@plt+0x5ac4>
   16e30:	add	r7, r7, r4
   16e34:	add	r5, r5, r0
   16e38:	cmp	sl, #0
   16e3c:	bne	16df0 <__assert_fail@plt+0x5a6c>
   16e40:	mov	r0, #1
   16e44:	b	16e54 <__assert_fail@plt+0x5ad0>
   16e48:	cmp	sl, #0
   16e4c:	mvnne	sl, #0
   16e50:	mov	r0, sl
   16e54:	sub	sp, fp, #28
   16e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e5c:	push	{r4, r5, r6, r7, fp, lr}
   16e60:	add	fp, sp, #16
   16e64:	mov	r4, r3
   16e68:	mov	r5, r2
   16e6c:	mov	r6, r1
   16e70:	mov	r7, r0
   16e74:	cmp	r1, r3
   16e78:	bne	16e94 <__assert_fail@plt+0x5b10>
   16e7c:	mov	r0, r7
   16e80:	mov	r1, r5
   16e84:	mov	r2, r6
   16e88:	bl	11240 <bcmp@plt>
   16e8c:	cmp	r0, #0
   16e90:	beq	16eac <__assert_fail@plt+0x5b28>
   16e94:	mov	r0, r7
   16e98:	mov	r1, r6
   16e9c:	mov	r2, r5
   16ea0:	mov	r3, r4
   16ea4:	pop	{r4, r5, r6, r7, fp, lr}
   16ea8:	b	16dc8 <__assert_fail@plt+0x5a44>
   16eac:	bl	11270 <__errno_location@plt>
   16eb0:	mov	r1, #0
   16eb4:	str	r1, [r0]
   16eb8:	mov	r0, #0
   16ebc:	pop	{r4, r5, r6, r7, fp, pc}
   16ec0:	cmp	r2, #0
   16ec4:	beq	16ef4 <__assert_fail@plt+0x5b70>
   16ec8:	mvn	r3, #0
   16ecc:	udiv	r3, r3, r2
   16ed0:	cmp	r3, r1
   16ed4:	bcs	16ef4 <__assert_fail@plt+0x5b70>
   16ed8:	push	{fp, lr}
   16edc:	mov	fp, sp
   16ee0:	bl	11270 <__errno_location@plt>
   16ee4:	mov	r1, #12
   16ee8:	str	r1, [r0]
   16eec:	mov	r0, #0
   16ef0:	pop	{fp, pc}
   16ef4:	mul	r1, r2, r1
   16ef8:	b	16a04 <__assert_fail@plt+0x5680>
   16efc:	cmp	r3, #0
   16f00:	cmpeq	r2, #0
   16f04:	bne	16f1c <__assert_fail@plt+0x5b98>
   16f08:	cmp	r1, #0
   16f0c:	cmpeq	r0, #0
   16f10:	mvnne	r1, #0
   16f14:	mvnne	r0, #0
   16f18:	b	16f38 <__assert_fail@plt+0x5bb4>
   16f1c:	sub	sp, sp, #8
   16f20:	push	{sp, lr}
   16f24:	bl	16f48 <__assert_fail@plt+0x5bc4>
   16f28:	ldr	lr, [sp, #4]
   16f2c:	add	sp, sp, #8
   16f30:	pop	{r2, r3}
   16f34:	bx	lr
   16f38:	push	{r1, lr}
   16f3c:	mov	r0, #8
   16f40:	bl	110d8 <raise@plt>
   16f44:	pop	{r1, pc}
   16f48:	cmp	r1, r3
   16f4c:	cmpeq	r0, r2
   16f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f54:	mov	r4, r0
   16f58:	movcc	r0, #0
   16f5c:	mov	r5, r1
   16f60:	ldr	lr, [sp, #36]	; 0x24
   16f64:	movcc	r1, r0
   16f68:	bcc	17064 <__assert_fail@plt+0x5ce0>
   16f6c:	cmp	r3, #0
   16f70:	clzeq	ip, r2
   16f74:	clzne	ip, r3
   16f78:	addeq	ip, ip, #32
   16f7c:	cmp	r5, #0
   16f80:	clzeq	r1, r4
   16f84:	addeq	r1, r1, #32
   16f88:	clzne	r1, r5
   16f8c:	sub	ip, ip, r1
   16f90:	sub	sl, ip, #32
   16f94:	lsl	r9, r3, ip
   16f98:	rsb	fp, ip, #32
   16f9c:	orr	r9, r9, r2, lsl sl
   16fa0:	orr	r9, r9, r2, lsr fp
   16fa4:	lsl	r8, r2, ip
   16fa8:	cmp	r5, r9
   16fac:	cmpeq	r4, r8
   16fb0:	movcc	r0, #0
   16fb4:	movcc	r1, r0
   16fb8:	bcc	16fd4 <__assert_fail@plt+0x5c50>
   16fbc:	mov	r0, #1
   16fc0:	subs	r4, r4, r8
   16fc4:	lsl	r1, r0, sl
   16fc8:	orr	r1, r1, r0, lsr fp
   16fcc:	lsl	r0, r0, ip
   16fd0:	sbc	r5, r5, r9
   16fd4:	cmp	ip, #0
   16fd8:	beq	17064 <__assert_fail@plt+0x5ce0>
   16fdc:	lsr	r6, r8, #1
   16fe0:	orr	r6, r6, r9, lsl #31
   16fe4:	lsr	r7, r9, #1
   16fe8:	mov	r2, ip
   16fec:	b	17010 <__assert_fail@plt+0x5c8c>
   16ff0:	subs	r3, r4, r6
   16ff4:	sbc	r8, r5, r7
   16ff8:	adds	r3, r3, r3
   16ffc:	adc	r8, r8, r8
   17000:	adds	r4, r3, #1
   17004:	adc	r5, r8, #0
   17008:	subs	r2, r2, #1
   1700c:	beq	1702c <__assert_fail@plt+0x5ca8>
   17010:	cmp	r5, r7
   17014:	cmpeq	r4, r6
   17018:	bcs	16ff0 <__assert_fail@plt+0x5c6c>
   1701c:	adds	r4, r4, r4
   17020:	adc	r5, r5, r5
   17024:	subs	r2, r2, #1
   17028:	bne	17010 <__assert_fail@plt+0x5c8c>
   1702c:	lsr	r3, r4, ip
   17030:	orr	r3, r3, r5, lsl fp
   17034:	lsr	r2, r5, ip
   17038:	orr	r3, r3, r5, lsr sl
   1703c:	adds	r0, r0, r4
   17040:	mov	r4, r3
   17044:	lsl	r3, r2, ip
   17048:	orr	r3, r3, r4, lsl sl
   1704c:	lsl	ip, r4, ip
   17050:	orr	r3, r3, r4, lsr fp
   17054:	adc	r1, r1, r5
   17058:	subs	r0, r0, ip
   1705c:	mov	r5, r2
   17060:	sbc	r1, r1, r3
   17064:	cmp	lr, #0
   17068:	strdne	r4, [lr]
   1706c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17070:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17074:	mov	r7, r0
   17078:	ldr	r6, [pc, #72]	; 170c8 <__assert_fail@plt+0x5d44>
   1707c:	ldr	r5, [pc, #72]	; 170cc <__assert_fail@plt+0x5d48>
   17080:	add	r6, pc, r6
   17084:	add	r5, pc, r5
   17088:	sub	r6, r6, r5
   1708c:	mov	r8, r1
   17090:	mov	r9, r2
   17094:	bl	11094 <fdopen@plt-0x20>
   17098:	asrs	r6, r6, #2
   1709c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   170a0:	mov	r4, #0
   170a4:	add	r4, r4, #1
   170a8:	ldr	r3, [r5], #4
   170ac:	mov	r2, r9
   170b0:	mov	r1, r8
   170b4:	mov	r0, r7
   170b8:	blx	r3
   170bc:	cmp	r6, r4
   170c0:	bne	170a4 <__assert_fail@plt+0x5d20>
   170c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   170c8:	andeq	r1, r1, r4, lsl #29
   170cc:	andeq	r1, r1, ip, ror lr
   170d0:	bx	lr
   170d4:	ldr	r3, [pc, #12]	; 170e8 <__assert_fail@plt+0x5d64>
   170d8:	mov	r1, #0
   170dc:	add	r3, pc, r3
   170e0:	ldr	r2, [r3]
   170e4:	b	1127c <__cxa_atexit@plt>
   170e8:	andeq	r2, r1, r8, lsr #32

Disassembly of section .fini:

000170ec <.fini>:
   170ec:	push	{r3, lr}
   170f0:	pop	{r3, pc}
