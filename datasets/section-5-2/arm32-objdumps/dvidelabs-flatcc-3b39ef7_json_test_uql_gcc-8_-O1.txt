
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf32-littlearm


Disassembly of section .init:

000144d4 <.init>:
   144d4:	push	{r3, lr}
   144d8:	bl	1463c <_start@@Base+0x3c>
   144dc:	pop	{r3, pc}

Disassembly of section .plt:

000144e0 <raise@plt-0x14>:
   144e0:	push	{lr}		; (str lr, [sp, #-4]!)
   144e4:	ldr	lr, [pc, #4]	; 144f0 <raise@plt-0x4>
   144e8:	add	lr, pc, lr
   144ec:	ldr	pc, [lr, #8]!
   144f0:	andeq	r0, r4, r0, lsl fp

000144f4 <raise@plt>:
   144f4:	add	ip, pc, #0, 12
   144f8:	add	ip, ip, #64, 20	; 0x40000
   144fc:	ldr	pc, [ip, #2832]!	; 0xb10

00014500 <strcmp@plt>:
   14500:	add	ip, pc, #0, 12
   14504:	add	ip, ip, #64, 20	; 0x40000
   14508:	ldr	pc, [ip, #2824]!	; 0xb08

0001450c <memmove@plt>:
   1450c:	add	ip, pc, #0, 12
   14510:	add	ip, ip, #64, 20	; 0x40000
   14514:	ldr	pc, [ip, #2816]!	; 0xb00

00014518 <free@plt>:
   14518:	add	ip, pc, #0, 12
   1451c:	add	ip, ip, #64, 20	; 0x40000
   14520:	ldr	pc, [ip, #2808]!	; 0xaf8

00014524 <memcpy@plt>:
   14524:	add	ip, pc, #0, 12
   14528:	add	ip, ip, #64, 20	; 0x40000
   1452c:	ldr	pc, [ip, #2800]!	; 0xaf0

00014530 <memcmp@plt>:
   14530:	add	ip, pc, #0, 12
   14534:	add	ip, ip, #64, 20	; 0x40000
   14538:	ldr	pc, [ip, #2792]!	; 0xae8

0001453c <realloc@plt>:
   1453c:	add	ip, pc, #0, 12
   14540:	add	ip, ip, #64, 20	; 0x40000
   14544:	ldr	pc, [ip, #2784]!	; 0xae0

00014548 <fwrite@plt>:
   14548:	add	ip, pc, #0, 12
   1454c:	add	ip, ip, #64, 20	; 0x40000
   14550:	ldr	pc, [ip, #2776]!	; 0xad8

00014554 <malloc@plt>:
   14554:	add	ip, pc, #0, 12
   14558:	add	ip, ip, #64, 20	; 0x40000
   1455c:	ldr	pc, [ip, #2768]!	; 0xad0

00014560 <__libc_start_main@plt>:
   14560:	add	ip, pc, #0, 12
   14564:	add	ip, ip, #64, 20	; 0x40000
   14568:	ldr	pc, [ip, #2760]!	; 0xac8

0001456c <__gmon_start__@plt>:
   1456c:	add	ip, pc, #0, 12
   14570:	add	ip, ip, #64, 20	; 0x40000
   14574:	ldr	pc, [ip, #2752]!	; 0xac0

00014578 <strlen@plt>:
   14578:	add	ip, pc, #0, 12
   1457c:	add	ip, ip, #64, 20	; 0x40000
   14580:	ldr	pc, [ip, #2744]!	; 0xab8

00014584 <fprintf@plt>:
   14584:	add	ip, pc, #0, 12
   14588:	add	ip, ip, #64, 20	; 0x40000
   1458c:	ldr	pc, [ip, #2736]!	; 0xab0

00014590 <posix_memalign@plt>:
   14590:	add	ip, pc, #0, 12
   14594:	add	ip, ip, #64, 20	; 0x40000
   14598:	ldr	pc, [ip, #2728]!	; 0xaa8

0001459c <memset@plt>:
   1459c:	add	ip, pc, #0, 12
   145a0:	add	ip, ip, #64, 20	; 0x40000
   145a4:	ldr	pc, [ip, #2720]!	; 0xaa0

000145a8 <strncpy@plt>:
   145a8:	add	ip, pc, #0, 12
   145ac:	add	ip, ip, #64, 20	; 0x40000
   145b0:	ldr	pc, [ip, #2712]!	; 0xa98

000145b4 <strtod@plt>:
   145b4:	add	ip, pc, #0, 12
   145b8:	add	ip, ip, #64, 20	; 0x40000
   145bc:	ldr	pc, [ip, #2704]!	; 0xa90

000145c0 <memchr@plt>:
   145c0:	add	ip, pc, #0, 12
   145c4:	add	ip, ip, #64, 20	; 0x40000
   145c8:	ldr	pc, [ip, #2696]!	; 0xa88

000145cc <fputc@plt>:
   145cc:	add	ip, pc, #0, 12
   145d0:	add	ip, ip, #64, 20	; 0x40000
   145d4:	ldr	pc, [ip, #2688]!	; 0xa80

000145d8 <sprintf@plt>:
   145d8:	add	ip, pc, #0, 12
   145dc:	add	ip, ip, #64, 20	; 0x40000
   145e0:	ldr	pc, [ip, #2680]!	; 0xa78

000145e4 <abort@plt>:
   145e4:	add	ip, pc, #0, 12
   145e8:	add	ip, ip, #64, 20	; 0x40000
   145ec:	ldr	pc, [ip, #2672]!	; 0xa70

000145f0 <__assert_fail@plt>:
   145f0:	add	ip, pc, #0, 12
   145f4:	add	ip, ip, #64, 20	; 0x40000
   145f8:	ldr	pc, [ip, #2664]!	; 0xa68

Disassembly of section .text:

00014600 <_start@@Base>:
   14600:	mov	fp, #0
   14604:	mov	lr, #0
   14608:	pop	{r1}		; (ldr r1, [sp], #4)
   1460c:	mov	r2, sp
   14610:	push	{r2}		; (str r2, [sp, #-4]!)
   14614:	push	{r0}		; (str r0, [sp, #-4]!)
   14618:	ldr	ip, [pc, #16]	; 14630 <_start@@Base+0x30>
   1461c:	push	{ip}		; (str ip, [sp, #-4]!)
   14620:	ldr	r0, [pc, #12]	; 14634 <_start@@Base+0x34>
   14624:	ldr	r3, [pc, #12]	; 14638 <_start@@Base+0x38>
   14628:	bl	14560 <__libc_start_main@plt>
   1462c:	bl	145e4 <abort@plt>
   14630:	andeq	lr, r3, ip, lsl #18
   14634:	strdeq	r4, [r2], -ip
   14638:	andeq	lr, r3, ip, lsr #17
   1463c:	ldr	r3, [pc, #20]	; 14658 <_start@@Base+0x58>
   14640:	ldr	r2, [pc, #20]	; 1465c <_start@@Base+0x5c>
   14644:	add	r3, pc, r3
   14648:	ldr	r2, [r3, r2]
   1464c:	cmp	r2, #0
   14650:	bxeq	lr
   14654:	b	1456c <__gmon_start__@plt>
   14658:			; <UNDEFINED> instruction: 0x000409b4
   1465c:	andeq	r0, r0, r4, rrx
   14660:	ldr	r0, [pc, #24]	; 14680 <_start@@Base+0x80>
   14664:	ldr	r3, [pc, #24]	; 14684 <_start@@Base+0x84>
   14668:	cmp	r3, r0
   1466c:	bxeq	lr
   14670:	ldr	r3, [pc, #16]	; 14688 <_start@@Base+0x88>
   14674:	cmp	r3, #0
   14678:	bxeq	lr
   1467c:	bx	r3
   14680:	andeq	r5, r5, ip, lsr r3
   14684:	andeq	r5, r5, ip, lsr r3
   14688:	andeq	r0, r0, r0
   1468c:	ldr	r0, [pc, #36]	; 146b8 <_start@@Base+0xb8>
   14690:	ldr	r1, [pc, #36]	; 146bc <_start@@Base+0xbc>
   14694:	sub	r1, r1, r0
   14698:	asr	r1, r1, #2
   1469c:	add	r1, r1, r1, lsr #31
   146a0:	asrs	r1, r1, #1
   146a4:	bxeq	lr
   146a8:	ldr	r3, [pc, #16]	; 146c0 <_start@@Base+0xc0>
   146ac:	cmp	r3, #0
   146b0:	bxeq	lr
   146b4:	bx	r3
   146b8:	andeq	r5, r5, ip, lsr r3
   146bc:	andeq	r5, r5, ip, lsr r3
   146c0:	andeq	r0, r0, r0
   146c4:	push	{r4, lr}
   146c8:	ldr	r4, [pc, #24]	; 146e8 <_start@@Base+0xe8>
   146cc:	ldrb	r3, [r4]
   146d0:	cmp	r3, #0
   146d4:	popne	{r4, pc}
   146d8:	bl	14660 <_start@@Base+0x60>
   146dc:	mov	r3, #1
   146e0:	strb	r3, [r4]
   146e4:	pop	{r4, pc}
   146e8:	andeq	r5, r5, r8, asr #6
   146ec:	b	1468c <_start@@Base+0x8c>
   146f0:	strd	r4, [sp, #-8]!
   146f4:	sub	r1, r1, r0
   146f8:	cmp	r1, #8
   146fc:	bhi	14730 <_start@@Base+0x130>
   14700:	sub	r1, r1, #1
   14704:	cmp	r1, #7
   14708:	ldrls	pc, [pc, r1, lsl #2]
   1470c:	b	147d8 <_start@@Base+0x1d8>
   14710:	andeq	r4, r1, ip, asr #15
   14714:	andeq	r4, r1, r0, asr #15
   14718:			; <UNDEFINED> instruction: 0x000147b4
   1471c:	andeq	r4, r1, r8, lsr #15
   14720:	muleq	r1, ip, r7
   14724:	muleq	r1, r0, r7
   14728:	andeq	r4, r1, r4, lsl #15
   1472c:	andeq	r4, r1, r0, lsr r7
   14730:	ldrb	r4, [r0, #7]
   14734:	mov	r5, #0
   14738:	ldrb	r2, [r0, #6]
   1473c:	orr	r2, r4, r2, lsl #8
   14740:	mov	r1, r5
   14744:	ldrb	r4, [r0, #5]
   14748:	orr	r2, r2, r4, lsl #16
   1474c:	ldrb	r4, [r0, #4]
   14750:	orr	r2, r2, r4, lsl #24
   14754:	ldrb	r4, [r0, #3]
   14758:	orr	r1, r1, r4
   1475c:	ldrb	r4, [r0, #2]
   14760:	orr	r1, r1, r4, lsl #8
   14764:	ldrb	r4, [r0, #1]
   14768:	orr	r1, r1, r4, lsl #16
   1476c:	ldrb	r4, [r0]
   14770:	mov	r0, r2
   14774:	orr	r1, r1, r4, lsl #24
   14778:	ldrd	r4, [sp]
   1477c:	add	sp, sp, #8
   14780:	bx	lr
   14784:	mov	r4, #0
   14788:	mov	r5, #0
   1478c:	b	14738 <_start@@Base+0x138>
   14790:	mov	r2, #0
   14794:	mov	r1, r2
   14798:	b	14744 <_start@@Base+0x144>
   1479c:	mov	r2, #0
   147a0:	mov	r1, r2
   147a4:	b	1474c <_start@@Base+0x14c>
   147a8:	mov	r2, #0
   147ac:	mov	r1, r2
   147b0:	b	14754 <_start@@Base+0x154>
   147b4:	mov	r2, #0
   147b8:	mov	r1, r2
   147bc:	b	1475c <_start@@Base+0x15c>
   147c0:	mov	r2, #0
   147c4:	mov	r1, r2
   147c8:	b	14764 <_start@@Base+0x164>
   147cc:	mov	r2, #0
   147d0:	mov	r1, r2
   147d4:	b	1476c <_start@@Base+0x16c>
   147d8:	mov	r0, #0
   147dc:	mov	r1, r0
   147e0:	b	14778 <_start@@Base+0x178>
   147e4:	cmp	r0, #4
   147e8:	movhi	r0, #0
   147ec:	movls	r0, #1
   147f0:	bx	lr
   147f4:	cmp	r0, #11
   147f8:	bhi	1481c <_start@@Base+0x21c>
   147fc:	cmp	r0, #8
   14800:	bcs	1482c <_start@@Base+0x22c>
   14804:	cmp	r0, #0
   14808:	beq	14834 <_start@@Base+0x234>
   1480c:	cmp	r0, #2
   14810:	movne	r0, #0
   14814:	moveq	r0, #1
   14818:	bx	lr
   1481c:	cmp	r0, #255	; 0xff
   14820:	movne	r0, #0
   14824:	moveq	r0, #1
   14828:	bx	lr
   1482c:	mov	r0, #1
   14830:	bx	lr
   14834:	mov	r0, #1
   14838:	bx	lr
   1483c:	bx	lr
   14840:	bx	lr
   14844:	mov	r0, #0
   14848:	bx	lr
   1484c:	mov	r0, #0
   14850:	bx	lr
   14854:	str	r4, [sp, #-8]!
   14858:	str	lr, [sp, #4]
   1485c:	mov	r3, #4
   14860:	mov	r2, r3
   14864:	mov	r1, #0
   14868:	bl	2aa08 <flatcc_verify_field@@Base>
   1486c:	ldr	r4, [sp]
   14870:	add	sp, sp, #4
   14874:	pop	{pc}		; (ldr pc, [sp], #4)
   14878:	str	r4, [sp, #-8]!
   1487c:	str	lr, [sp, #4]
   14880:	mov	r4, r0
   14884:	mov	r3, #8
   14888:	mov	r2, r3
   1488c:	mov	r1, #0
   14890:	bl	2aa08 <flatcc_verify_field@@Base>
   14894:	cmp	r0, #0
   14898:	beq	148a8 <_start@@Base+0x2a8>
   1489c:	ldr	r4, [sp]
   148a0:	add	sp, sp, #4
   148a4:	pop	{pc}		; (ldr pc, [sp], #4)
   148a8:	mov	r3, #4
   148ac:	mov	r2, r3
   148b0:	mov	r1, #1
   148b4:	mov	r0, r4
   148b8:	bl	2aa08 <flatcc_verify_field@@Base>
   148bc:	b	1489c <_start@@Base+0x29c>
   148c0:	str	r4, [sp, #-8]!
   148c4:	str	lr, [sp, #4]
   148c8:	mov	r4, r0
   148cc:	mov	r3, #8
   148d0:	mov	r2, r3
   148d4:	mov	r1, #0
   148d8:	bl	2aa08 <flatcc_verify_field@@Base>
   148dc:	cmp	r0, #0
   148e0:	beq	148f0 <_start@@Base+0x2f0>
   148e4:	ldr	r4, [sp]
   148e8:	add	sp, sp, #4
   148ec:	pop	{pc}		; (ldr pc, [sp], #4)
   148f0:	mov	r3, #4
   148f4:	mov	r2, r3
   148f8:	mov	r1, #1
   148fc:	mov	r0, r4
   14900:	bl	2aa08 <flatcc_verify_field@@Base>
   14904:	b	148e4 <_start@@Base+0x2e4>
   14908:	str	r4, [sp, #-8]!
   1490c:	str	lr, [sp, #4]
   14910:	mov	r4, r0
   14914:	mov	r3, #1
   14918:	mov	r2, r3
   1491c:	mov	r1, #0
   14920:	bl	2aa08 <flatcc_verify_field@@Base>
   14924:	cmp	r0, #0
   14928:	beq	14938 <_start@@Base+0x338>
   1492c:	ldr	r4, [sp]
   14930:	add	sp, sp, #4
   14934:	pop	{pc}		; (ldr pc, [sp], #4)
   14938:	mov	r3, #1
   1493c:	mov	r2, r3
   14940:	mov	r1, r3
   14944:	mov	r0, r4
   14948:	bl	2aa08 <flatcc_verify_field@@Base>
   1494c:	cmp	r0, #0
   14950:	bne	1492c <_start@@Base+0x32c>
   14954:	mov	r3, #1
   14958:	mov	r2, r3
   1495c:	mov	r1, #2
   14960:	mov	r0, r4
   14964:	bl	2aa08 <flatcc_verify_field@@Base>
   14968:	cmp	r0, #0
   1496c:	bne	1492c <_start@@Base+0x32c>
   14970:	mov	r3, #1
   14974:	mov	r2, r3
   14978:	mov	r1, #3
   1497c:	mov	r0, r4
   14980:	bl	2aa08 <flatcc_verify_field@@Base>
   14984:	b	1492c <_start@@Base+0x32c>
   14988:	str	r4, [sp, #-8]!
   1498c:	str	lr, [sp, #4]
   14990:	mov	r4, r0
   14994:	mov	r2, #0
   14998:	mov	r1, r2
   1499c:	bl	2aa80 <flatcc_verify_string_field@@Base>
   149a0:	cmp	r0, #0
   149a4:	beq	149b4 <_start@@Base+0x3b4>
   149a8:	ldr	r4, [sp]
   149ac:	add	sp, sp, #4
   149b0:	pop	{pc}		; (ldr pc, [sp], #4)
   149b4:	mov	r3, #8
   149b8:	mov	r2, r3
   149bc:	mov	r1, #1
   149c0:	mov	r0, r4
   149c4:	bl	2aa08 <flatcc_verify_field@@Base>
   149c8:	cmp	r0, #0
   149cc:	bne	149a8 <_start@@Base+0x3a8>
   149d0:	mov	r3, #2
   149d4:	mov	r2, r3
   149d8:	mov	r1, r3
   149dc:	mov	r0, r4
   149e0:	bl	2aa08 <flatcc_verify_field@@Base>
   149e4:	b	149a8 <_start@@Base+0x3a8>
   149e8:	str	r4, [sp, #-8]!
   149ec:	str	lr, [sp, #4]
   149f0:	mov	r4, r0
   149f4:	mov	r2, #0
   149f8:	mov	r1, r2
   149fc:	bl	2aa80 <flatcc_verify_string_field@@Base>
   14a00:	cmp	r0, #0
   14a04:	beq	14a14 <_start@@Base+0x414>
   14a08:	ldr	r4, [sp]
   14a0c:	add	sp, sp, #4
   14a10:	pop	{pc}		; (ldr pc, [sp], #4)
   14a14:	mov	r3, #4
   14a18:	mov	r2, r3
   14a1c:	mov	r1, #1
   14a20:	mov	r0, r4
   14a24:	bl	2aa08 <flatcc_verify_field@@Base>
   14a28:	cmp	r0, #0
   14a2c:	bne	14a08 <_start@@Base+0x408>
   14a30:	mov	r2, #0
   14a34:	mov	r1, #2
   14a38:	mov	r0, r4
   14a3c:	bl	2aa80 <flatcc_verify_string_field@@Base>
   14a40:	cmp	r0, #0
   14a44:	bne	14a08 <_start@@Base+0x408>
   14a48:	mov	r3, #8
   14a4c:	mov	r2, r3
   14a50:	mov	r1, #3
   14a54:	mov	r0, r4
   14a58:	bl	2aa08 <flatcc_verify_field@@Base>
   14a5c:	cmp	r0, #0
   14a60:	bne	14a08 <_start@@Base+0x408>
   14a64:	mov	r2, #0
   14a68:	mov	r1, #4
   14a6c:	mov	r0, r4
   14a70:	bl	2aa80 <flatcc_verify_string_field@@Base>
   14a74:	cmp	r0, #0
   14a78:	bne	14a08 <_start@@Base+0x408>
   14a7c:	mov	r3, #8
   14a80:	mov	r2, r3
   14a84:	mov	r1, #5
   14a88:	mov	r0, r4
   14a8c:	bl	2aa08 <flatcc_verify_field@@Base>
   14a90:	cmp	r0, #0
   14a94:	bne	14a08 <_start@@Base+0x408>
   14a98:	mov	r3, #4
   14a9c:	mov	r2, r3
   14aa0:	mov	r1, #6
   14aa4:	mov	r0, r4
   14aa8:	bl	2aa08 <flatcc_verify_field@@Base>
   14aac:	cmp	r0, #0
   14ab0:	bne	14a08 <_start@@Base+0x408>
   14ab4:	mov	r3, #8
   14ab8:	mov	r2, r3
   14abc:	mov	r1, #7
   14ac0:	mov	r0, r4
   14ac4:	bl	2aa08 <flatcc_verify_field@@Base>
   14ac8:	cmp	r0, #0
   14acc:	bne	14a08 <_start@@Base+0x408>
   14ad0:	mov	r3, #4
   14ad4:	mov	r2, r3
   14ad8:	mov	r1, #8
   14adc:	mov	r0, r4
   14ae0:	bl	2aa08 <flatcc_verify_field@@Base>
   14ae4:	b	14a08 <_start@@Base+0x408>
   14ae8:	str	r4, [sp, #-8]!
   14aec:	str	lr, [sp, #4]
   14af0:	mov	r4, r0
   14af4:	movw	r3, #18920	; 0x49e8
   14af8:	movt	r3, #1
   14afc:	mov	r2, #0
   14b00:	mov	r1, r2
   14b04:	bl	2ada4 <flatcc_verify_table_field@@Base>
   14b08:	cmp	r0, #0
   14b0c:	beq	14b1c <_start@@Base+0x51c>
   14b10:	ldr	r4, [sp]
   14b14:	add	sp, sp, #4
   14b18:	pop	{pc}		; (ldr pc, [sp], #4)
   14b1c:	movw	r3, #18624	; 0x48c0
   14b20:	movt	r3, #1
   14b24:	mov	r2, #0
   14b28:	mov	r1, #1
   14b2c:	mov	r0, r4
   14b30:	bl	2ada4 <flatcc_verify_table_field@@Base>
   14b34:	cmp	r0, #0
   14b38:	bne	14b10 <_start@@Base+0x510>
   14b3c:	movw	r3, #18552	; 0x4878
   14b40:	movt	r3, #1
   14b44:	mov	r2, #0
   14b48:	mov	r1, #2
   14b4c:	mov	r0, r4
   14b50:	bl	2ada4 <flatcc_verify_table_field@@Base>
   14b54:	b	14b10 <_start@@Base+0x510>
   14b58:	str	r4, [sp, #-8]!
   14b5c:	str	lr, [sp, #4]
   14b60:	sub	sp, sp, #8
   14b64:	mov	r4, r0
   14b68:	mov	r3, #16
   14b6c:	mov	r2, #32
   14b70:	mov	r1, #0
   14b74:	bl	2aa08 <flatcc_verify_field@@Base>
   14b78:	cmp	r0, #0
   14b7c:	beq	14b90 <_start@@Base+0x590>
   14b80:	add	sp, sp, #8
   14b84:	ldr	r4, [sp]
   14b88:	add	sp, sp, #4
   14b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b90:	mov	r3, #2
   14b94:	mov	r2, r3
   14b98:	mov	r1, r3
   14b9c:	mov	r0, r4
   14ba0:	bl	2aa08 <flatcc_verify_field@@Base>
   14ba4:	cmp	r0, #0
   14ba8:	bne	14b80 <_start@@Base+0x580>
   14bac:	mov	r3, #2
   14bb0:	mov	r2, r3
   14bb4:	mov	r1, #1
   14bb8:	mov	r0, r4
   14bbc:	bl	2aa08 <flatcc_verify_field@@Base>
   14bc0:	cmp	r0, #0
   14bc4:	bne	14b80 <_start@@Base+0x580>
   14bc8:	mov	r2, #1
   14bcc:	mov	r1, #3
   14bd0:	mov	r0, r4
   14bd4:	bl	2aa80 <flatcc_verify_string_field@@Base>
   14bd8:	cmp	r0, #0
   14bdc:	bne	14b80 <_start@@Base+0x580>
   14be0:	mov	r3, #1
   14be4:	mov	r2, r3
   14be8:	mov	r1, #6
   14bec:	mov	r0, r4
   14bf0:	bl	2aa08 <flatcc_verify_field@@Base>
   14bf4:	cmp	r0, #0
   14bf8:	bne	14b80 <_start@@Base+0x580>
   14bfc:	mvn	r3, #0
   14c00:	str	r3, [sp, #4]
   14c04:	mov	r3, #1
   14c08:	str	r3, [sp]
   14c0c:	mov	r2, #0
   14c10:	mov	r1, #5
   14c14:	mov	r0, r4
   14c18:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   14c1c:	cmp	r0, #0
   14c20:	bne	14b80 <_start@@Base+0x580>
   14c24:	movw	r3, #19288	; 0x4b58
   14c28:	movt	r3, #1
   14c2c:	mov	r2, #0
   14c30:	mov	r1, #11
   14c34:	mov	r0, r4
   14c38:	bl	2aec8 <flatcc_verify_table_vector_field@@Base>
   14c3c:	cmp	r0, #0
   14c40:	bne	14b80 <_start@@Base+0x580>
   14c44:	mov	r2, #0
   14c48:	mov	r1, #10
   14c4c:	mov	r0, r4
   14c50:	bl	2abd4 <flatcc_verify_string_vector_field@@Base>
   14c54:	cmp	r0, #0
   14c58:	bne	14b80 <_start@@Base+0x580>
   14c5c:	mov	r2, #0
   14c60:	mov	r1, #28
   14c64:	mov	r0, r4
   14c68:	bl	2abd4 <flatcc_verify_string_vector_field@@Base>
   14c6c:	cmp	r0, #0
   14c70:	bne	14b80 <_start@@Base+0x580>
   14c74:	mvn	r3, #0
   14c78:	str	r3, [sp, #4]
   14c7c:	mov	r3, #1
   14c80:	str	r3, [sp]
   14c84:	mov	r2, #0
   14c88:	mov	r1, #24
   14c8c:	mov	r0, r4
   14c90:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   14c94:	cmp	r0, #0
   14c98:	bne	14b80 <_start@@Base+0x580>
   14c9c:	mvn	r3, #-536870912	; 0xe0000000
   14ca0:	str	r3, [sp, #4]
   14ca4:	mov	r3, #4
   14ca8:	str	r3, [sp]
   14cac:	mov	r3, #8
   14cb0:	mov	r2, #0
   14cb4:	mov	r1, #29
   14cb8:	mov	r0, r4
   14cbc:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   14cc0:	cmp	r0, #0
   14cc4:	bne	14b80 <_start@@Base+0x580>
   14cc8:	movw	r3, #19288	; 0x4b58
   14ccc:	movt	r3, #1
   14cd0:	mov	r2, #0
   14cd4:	mov	r1, #12
   14cd8:	mov	r0, r4
   14cdc:	bl	2ada4 <flatcc_verify_table_field@@Base>
   14ce0:	cmp	r0, #0
   14ce4:	bne	14b80 <_start@@Base+0x580>
   14ce8:	movw	r3, #20556	; 0x504c
   14cec:	movt	r3, #1
   14cf0:	mov	r2, #0
   14cf4:	mov	r1, #8
   14cf8:	mov	r0, r4
   14cfc:	bl	2ba30 <flatcc_verify_union_field@@Base>
   14d00:	cmp	r0, #0
   14d04:	bne	14b80 <_start@@Base+0x580>
   14d08:	mvn	r3, #-1073741824	; 0xc0000000
   14d0c:	str	r3, [sp, #4]
   14d10:	mov	r3, #2
   14d14:	str	r3, [sp]
   14d18:	mov	r3, #4
   14d1c:	mov	r2, #0
   14d20:	mov	r1, #9
   14d24:	mov	r0, r4
   14d28:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   14d2c:	cmp	r0, #0
   14d30:	bne	14b80 <_start@@Base+0x580>
   14d34:	mvn	r3, #-1073741824	; 0xc0000000
   14d38:	str	r3, [sp, #4]
   14d3c:	mov	r3, #2
   14d40:	str	r3, [sp]
   14d44:	mov	r3, #4
   14d48:	mov	r2, #0
   14d4c:	mov	r1, #31
   14d50:	mov	r0, r4
   14d54:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   14d58:	cmp	r0, #0
   14d5c:	bne	14b80 <_start@@Base+0x580>
   14d60:	movw	r3, #19288	; 0x4b58
   14d64:	movt	r3, #1
   14d68:	str	r3, [sp, #4]
   14d6c:	mov	r3, #1
   14d70:	str	r3, [sp]
   14d74:	mov	r3, #0
   14d78:	mov	r2, r3
   14d7c:	mov	r1, #13
   14d80:	mov	r0, r4
   14d84:	bl	2b858 <flatcc_verify_table_as_nested_root@@Base>
   14d88:	cmp	r0, #0
   14d8c:	bne	14b80 <_start@@Base+0x580>
   14d90:	movw	r3, #18824	; 0x4988
   14d94:	movt	r3, #1
   14d98:	mov	r2, #0
   14d9c:	mov	r1, #14
   14da0:	mov	r0, r4
   14da4:	bl	2ada4 <flatcc_verify_table_field@@Base>
   14da8:	cmp	r0, #0
   14dac:	bne	14b80 <_start@@Base+0x580>
   14db0:	mov	r3, #1
   14db4:	mov	r2, r3
   14db8:	mov	r1, #15
   14dbc:	mov	r0, r4
   14dc0:	bl	2aa08 <flatcc_verify_field@@Base>
   14dc4:	cmp	r0, #0
   14dc8:	bne	14b80 <_start@@Base+0x580>
   14dcc:	mov	r3, #4
   14dd0:	mov	r2, r3
   14dd4:	mov	r1, #16
   14dd8:	mov	r0, r4
   14ddc:	bl	2aa08 <flatcc_verify_field@@Base>
   14de0:	cmp	r0, #0
   14de4:	bne	14b80 <_start@@Base+0x580>
   14de8:	mov	r3, #4
   14dec:	mov	r2, r3
   14df0:	mov	r1, #17
   14df4:	mov	r0, r4
   14df8:	bl	2aa08 <flatcc_verify_field@@Base>
   14dfc:	cmp	r0, #0
   14e00:	bne	14b80 <_start@@Base+0x580>
   14e04:	mov	r3, #8
   14e08:	mov	r2, r3
   14e0c:	mov	r1, #18
   14e10:	mov	r0, r4
   14e14:	bl	2aa08 <flatcc_verify_field@@Base>
   14e18:	cmp	r0, #0
   14e1c:	bne	14b80 <_start@@Base+0x580>
   14e20:	mov	r3, #8
   14e24:	mov	r2, r3
   14e28:	mov	r1, #19
   14e2c:	mov	r0, r4
   14e30:	bl	2aa08 <flatcc_verify_field@@Base>
   14e34:	cmp	r0, #0
   14e38:	bne	14b80 <_start@@Base+0x580>
   14e3c:	mov	r3, #4
   14e40:	mov	r2, r3
   14e44:	mov	r1, #20
   14e48:	mov	r0, r4
   14e4c:	bl	2aa08 <flatcc_verify_field@@Base>
   14e50:	cmp	r0, #0
   14e54:	bne	14b80 <_start@@Base+0x580>
   14e58:	mov	r3, #4
   14e5c:	mov	r2, r3
   14e60:	mov	r1, #21
   14e64:	mov	r0, r4
   14e68:	bl	2aa08 <flatcc_verify_field@@Base>
   14e6c:	cmp	r0, #0
   14e70:	bne	14b80 <_start@@Base+0x580>
   14e74:	mov	r3, #8
   14e78:	mov	r2, r3
   14e7c:	mov	r1, #22
   14e80:	mov	r0, r4
   14e84:	bl	2aa08 <flatcc_verify_field@@Base>
   14e88:	cmp	r0, #0
   14e8c:	bne	14b80 <_start@@Base+0x580>
   14e90:	mov	r3, #8
   14e94:	mov	r2, r3
   14e98:	mov	r1, #23
   14e9c:	mov	r0, r4
   14ea0:	bl	2aa08 <flatcc_verify_field@@Base>
   14ea4:	cmp	r0, #0
   14ea8:	bne	14b80 <_start@@Base+0x580>
   14eac:	mov	r3, #4
   14eb0:	mov	r2, r3
   14eb4:	mov	r1, #25
   14eb8:	mov	r0, r4
   14ebc:	bl	2aa08 <flatcc_verify_field@@Base>
   14ec0:	cmp	r0, #0
   14ec4:	bne	14b80 <_start@@Base+0x580>
   14ec8:	mov	r3, #4
   14ecc:	mov	r2, r3
   14ed0:	mov	r1, #26
   14ed4:	mov	r0, r4
   14ed8:	bl	2aa08 <flatcc_verify_field@@Base>
   14edc:	cmp	r0, #0
   14ee0:	bne	14b80 <_start@@Base+0x580>
   14ee4:	mov	r3, #4
   14ee8:	mov	r2, r3
   14eec:	mov	r1, #27
   14ef0:	mov	r0, r4
   14ef4:	bl	2aa08 <flatcc_verify_field@@Base>
   14ef8:	cmp	r0, #0
   14efc:	bne	14b80 <_start@@Base+0x580>
   14f00:	mvn	r3, #0
   14f04:	str	r3, [sp, #4]
   14f08:	mov	r3, #1
   14f0c:	str	r3, [sp]
   14f10:	mov	r2, #0
   14f14:	mov	r1, #30
   14f18:	mov	r0, r4
   14f1c:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   14f20:	cmp	r0, #0
   14f24:	bne	14b80 <_start@@Base+0x580>
   14f28:	mvn	r3, #-536870912	; 0xe0000000
   14f2c:	str	r3, [sp, #4]
   14f30:	mov	r3, #8
   14f34:	str	r3, [sp]
   14f38:	mov	r2, #0
   14f3c:	mov	r1, #32
   14f40:	mov	r0, r4
   14f44:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   14f48:	cmp	r0, #0
   14f4c:	bne	14b80 <_start@@Base+0x580>
   14f50:	mvn	r3, #-536870912	; 0xe0000000
   14f54:	str	r3, [sp, #4]
   14f58:	mov	r3, #8
   14f5c:	str	r3, [sp]
   14f60:	mov	r2, #0
   14f64:	mov	r1, #33	; 0x21
   14f68:	mov	r0, r4
   14f6c:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   14f70:	cmp	r0, #0
   14f74:	bne	14b80 <_start@@Base+0x580>
   14f78:	movw	r3, #18500	; 0x4844
   14f7c:	movt	r3, #1
   14f80:	mov	r2, #0
   14f84:	mov	r1, #34	; 0x22
   14f88:	mov	r0, r4
   14f8c:	bl	2ada4 <flatcc_verify_table_field@@Base>
   14f90:	cmp	r0, #0
   14f94:	bne	14b80 <_start@@Base+0x580>
   14f98:	movw	r3, #20404	; 0x4fb4
   14f9c:	movt	r3, #1
   14fa0:	mov	r2, #0
   14fa4:	mov	r1, #35	; 0x23
   14fa8:	mov	r0, r4
   14fac:	bl	2ada4 <flatcc_verify_table_field@@Base>
   14fb0:	b	14b80 <_start@@Base+0x580>
   14fb4:	str	r4, [sp, #-8]!
   14fb8:	str	lr, [sp, #4]
   14fbc:	sub	sp, sp, #8
   14fc0:	mov	r4, r0
   14fc4:	mvn	r3, #0
   14fc8:	str	r3, [sp, #4]
   14fcc:	mov	r3, #1
   14fd0:	str	r3, [sp]
   14fd4:	mov	r2, #0
   14fd8:	mov	r1, r2
   14fdc:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   14fe0:	cmp	r0, #0
   14fe4:	beq	14ff8 <_start@@Base+0x9f8>
   14fe8:	add	sp, sp, #8
   14fec:	ldr	r4, [sp]
   14ff0:	add	sp, sp, #4
   14ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff8:	mvn	r3, #0
   14ffc:	str	r3, [sp, #4]
   15000:	mov	r1, #1
   15004:	str	r1, [sp]
   15008:	mov	r3, r1
   1500c:	mov	r2, #0
   15010:	mov	r0, r4
   15014:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   15018:	cmp	r0, #0
   1501c:	bne	14fe8 <_start@@Base+0x9e8>
   15020:	movw	r3, #19288	; 0x4b58
   15024:	movt	r3, #1
   15028:	str	r3, [sp, #4]
   1502c:	mov	r3, #1
   15030:	str	r3, [sp]
   15034:	mov	r3, #0
   15038:	mov	r2, r3
   1503c:	mov	r1, #2
   15040:	mov	r0, r4
   15044:	bl	2b858 <flatcc_verify_table_as_nested_root@@Base>
   15048:	b	14fe8 <_start@@Base+0x9e8>
   1504c:	str	r4, [sp, #-8]!
   15050:	str	lr, [sp, #4]
   15054:	ldrb	r3, [r0, #12]
   15058:	sub	r3, r3, #1
   1505c:	cmp	r3, #3
   15060:	ldrls	pc, [pc, r3, lsl #2]
   15064:	b	150c0 <_start@@Base+0xac0>
   15068:	andeq	r5, r1, r8, ror r0
   1506c:	muleq	r1, r0, r0
   15070:	andeq	r5, r1, r0, lsr #1
   15074:	strheq	r5, [r1], -r0
   15078:	movw	r1, #19288	; 0x4b58
   1507c:	movt	r1, #1
   15080:	bl	2b16c <flatcc_verify_union_table@@Base>
   15084:	ldr	r4, [sp]
   15088:	add	sp, sp, #4
   1508c:	pop	{pc}		; (ldr pc, [sp], #4)
   15090:	movw	r1, #18696	; 0x4908
   15094:	movt	r1, #1
   15098:	bl	2b16c <flatcc_verify_union_table@@Base>
   1509c:	b	15084 <_start@@Base+0xa84>
   150a0:	movw	r1, #18508	; 0x484c
   150a4:	movt	r1, #1
   150a8:	bl	2b16c <flatcc_verify_union_table@@Base>
   150ac:	b	15084 <_start@@Base+0xa84>
   150b0:	movw	r1, #20680	; 0x50c8
   150b4:	movt	r1, #1
   150b8:	bl	2b16c <flatcc_verify_union_table@@Base>
   150bc:	b	15084 <_start@@Base+0xa84>
   150c0:	mov	r0, #0
   150c4:	b	15084 <_start@@Base+0xa84>
   150c8:	str	r4, [sp, #-8]!
   150cc:	str	lr, [sp, #4]
   150d0:	mov	r4, r0
   150d4:	movw	r3, #19176	; 0x4ae8
   150d8:	movt	r3, #1
   150dc:	mov	r2, #0
   150e0:	mov	r1, r2
   150e4:	bl	2ada4 <flatcc_verify_table_field@@Base>
   150e8:	cmp	r0, #0
   150ec:	beq	150fc <_start@@Base+0xafc>
   150f0:	ldr	r4, [sp]
   150f4:	add	sp, sp, #4
   150f8:	pop	{pc}		; (ldr pc, [sp], #4)
   150fc:	movw	r3, #20792	; 0x5138
   15100:	movt	r3, #1
   15104:	mov	r2, #0
   15108:	mov	r1, #1
   1510c:	mov	r0, r4
   15110:	bl	2ada4 <flatcc_verify_table_field@@Base>
   15114:	cmp	r0, #0
   15118:	bne	150f0 <_start@@Base+0xaf0>
   1511c:	movw	r3, #20556	; 0x504c
   15120:	movt	r3, #1
   15124:	mov	r2, #0
   15128:	mov	r1, #3
   1512c:	mov	r0, r4
   15130:	bl	2bb84 <flatcc_verify_union_vector_field@@Base>
   15134:	b	150f0 <_start@@Base+0xaf0>
   15138:	str	r4, [sp, #-8]!
   1513c:	str	lr, [sp, #4]
   15140:	mov	r4, r0
   15144:	movw	r3, #20968	; 0x51e8
   15148:	movt	r3, #1
   1514c:	mov	r2, #0
   15150:	mov	r1, #1
   15154:	bl	2ba30 <flatcc_verify_union_field@@Base>
   15158:	cmp	r0, #0
   1515c:	beq	1516c <_start@@Base+0xb6c>
   15160:	ldr	r4, [sp]
   15164:	add	sp, sp, #4
   15168:	pop	{pc}		; (ldr pc, [sp], #4)
   1516c:	movw	r3, #20968	; 0x51e8
   15170:	movt	r3, #1
   15174:	mov	r2, #0
   15178:	mov	r1, #3
   1517c:	mov	r0, r4
   15180:	bl	2ba30 <flatcc_verify_union_field@@Base>
   15184:	cmp	r0, #0
   15188:	bne	15160 <_start@@Base+0xb60>
   1518c:	movw	r3, #20968	; 0x51e8
   15190:	movt	r3, #1
   15194:	mov	r2, #0
   15198:	mov	r1, #5
   1519c:	mov	r0, r4
   151a0:	bl	2ba30 <flatcc_verify_union_field@@Base>
   151a4:	cmp	r0, #0
   151a8:	bne	15160 <_start@@Base+0xb60>
   151ac:	movw	r3, #20968	; 0x51e8
   151b0:	movt	r3, #1
   151b4:	mov	r2, #0
   151b8:	mov	r1, #7
   151bc:	mov	r0, r4
   151c0:	bl	2ba30 <flatcc_verify_union_field@@Base>
   151c4:	cmp	r0, #0
   151c8:	bne	15160 <_start@@Base+0xb60>
   151cc:	movw	r3, #20968	; 0x51e8
   151d0:	movt	r3, #1
   151d4:	mov	r2, #0
   151d8:	mov	r1, #9
   151dc:	mov	r0, r4
   151e0:	bl	2bb84 <flatcc_verify_union_vector_field@@Base>
   151e4:	b	15160 <_start@@Base+0xb60>
   151e8:	str	r4, [sp, #-8]!
   151ec:	str	lr, [sp, #4]
   151f0:	ldrb	r3, [r0, #12]
   151f4:	cmp	r3, #9
   151f8:	beq	1525c <_start@@Base+0xc5c>
   151fc:	bls	15220 <_start@@Base+0xc20>
   15200:	cmp	r3, #11
   15204:	beq	1527c <_start@@Base+0xc7c>
   15208:	bcc	1526c <_start@@Base+0xc6c>
   1520c:	cmp	r3, #255	; 0xff
   15210:	movne	r0, #0
   15214:	bne	15250 <_start@@Base+0xc50>
   15218:	bl	2b2d4 <flatcc_verify_union_string@@Base>
   1521c:	b	15250 <_start@@Base+0xc50>
   15220:	cmp	r3, #2
   15224:	beq	15244 <_start@@Base+0xc44>
   15228:	cmp	r3, #8
   1522c:	movne	r0, #0
   15230:	bne	15250 <_start@@Base+0xc50>
   15234:	mov	r2, #2
   15238:	mov	r1, r2
   1523c:	bl	2b26c <flatcc_verify_union_struct@@Base>
   15240:	b	15250 <_start@@Base+0xc50>
   15244:	movw	r1, #18516	; 0x4854
   15248:	movt	r1, #1
   1524c:	bl	2b16c <flatcc_verify_union_table@@Base>
   15250:	ldr	r4, [sp]
   15254:	add	sp, sp, #4
   15258:	pop	{pc}		; (ldr pc, [sp], #4)
   1525c:	mov	r2, #4
   15260:	mov	r1, r2
   15264:	bl	2b26c <flatcc_verify_union_struct@@Base>
   15268:	b	15250 <_start@@Base+0xc50>
   1526c:	mov	r2, #4
   15270:	mov	r1, r2
   15274:	bl	2b26c <flatcc_verify_union_struct@@Base>
   15278:	b	15250 <_start@@Base+0xc50>
   1527c:	bl	2b2d4 <flatcc_verify_union_string@@Base>
   15280:	b	15250 <_start@@Base+0xc50>
   15284:	strd	r4, [sp, #-16]!
   15288:	str	r6, [sp, #8]
   1528c:	str	lr, [sp, #12]
   15290:	sub	sp, sp, #8
   15294:	mov	r4, r0
   15298:	mov	r5, r1
   1529c:	movw	r3, #21548	; 0x542c
   152a0:	movt	r3, #1
   152a4:	str	r3, [sp, #4]
   152a8:	mov	r3, #21
   152ac:	str	r3, [sp]
   152b0:	movw	r3, #59724	; 0xe94c
   152b4:	movt	r3, #3
   152b8:	mov	r2, #0
   152bc:	bl	3caac <flatcc_json_printer_table_field@@Base>
   152c0:	movw	r3, #21440	; 0x53c0
   152c4:	movt	r3, #1
   152c8:	str	r3, [sp, #4]
   152cc:	mov	r6, #22
   152d0:	str	r6, [sp]
   152d4:	movw	r3, #59748	; 0xe964
   152d8:	movt	r3, #3
   152dc:	mov	r2, #1
   152e0:	mov	r1, r5
   152e4:	mov	r0, r4
   152e8:	bl	3caac <flatcc_json_printer_table_field@@Base>
   152ec:	movw	r3, #21332	; 0x5354
   152f0:	movt	r3, #1
   152f4:	str	r3, [sp, #4]
   152f8:	str	r6, [sp]
   152fc:	movw	r3, #59772	; 0xe97c
   15300:	movt	r3, #3
   15304:	mov	r2, #2
   15308:	mov	r1, r5
   1530c:	mov	r0, r4
   15310:	bl	3caac <flatcc_json_printer_table_field@@Base>
   15314:	add	sp, sp, #8
   15318:	ldrd	r4, [sp]
   1531c:	ldr	r6, [sp, #8]
   15320:	add	sp, sp, #12
   15324:	pop	{pc}		; (ldr pc, [sp], #4)
   15328:	push	{lr}		; (str lr, [sp, #-4]!)
   1532c:	sub	sp, sp, #12
   15330:	mov	r2, #0
   15334:	str	r2, [sp, #4]
   15338:	mov	r3, #19
   1533c:	str	r3, [sp]
   15340:	movw	r3, #59796	; 0xe994
   15344:	movt	r3, #3
   15348:	bl	343a4 <flatcc_json_printer_int32_field@@Base>
   1534c:	add	sp, sp, #12
   15350:	pop	{pc}		; (ldr pc, [sp], #4)
   15354:	strd	r4, [sp, #-12]!
   15358:	str	lr, [sp, #8]
   1535c:	sub	sp, sp, #20
   15360:	mov	r4, r0
   15364:	mov	r5, r1
   15368:	mov	r2, #0
   1536c:	mov	r3, #0
   15370:	strd	r2, [sp, #8]
   15374:	mov	r3, #15
   15378:	str	r3, [sp]
   1537c:	movw	r3, #59816	; 0xe9a8
   15380:	movt	r3, #3
   15384:	bl	345a4 <flatcc_json_printer_int64_field@@Base>
   15388:	mov	r3, #0
   1538c:	str	r3, [sp, #4]
   15390:	mov	r3, #21
   15394:	str	r3, [sp]
   15398:	movw	r3, #59832	; 0xe9b8
   1539c:	movt	r3, #3
   153a0:	mov	r2, #1
   153a4:	mov	r1, r5
   153a8:	mov	r0, r4
   153ac:	bl	33b94 <flatcc_json_printer_uint32_field@@Base>
   153b0:	add	sp, sp, #20
   153b4:	ldrd	r4, [sp]
   153b8:	add	sp, sp, #8
   153bc:	pop	{pc}		; (ldr pc, [sp], #4)
   153c0:	strd	r4, [sp, #-12]!
   153c4:	str	lr, [sp, #8]
   153c8:	sub	sp, sp, #20
   153cc:	mov	r4, r0
   153d0:	mov	r5, r1
   153d4:	mov	r2, #0
   153d8:	mov	r3, #0
   153dc:	strd	r2, [sp, #8]
   153e0:	mov	r3, #15
   153e4:	str	r3, [sp]
   153e8:	movw	r3, #59816	; 0xe9a8
   153ec:	movt	r3, #3
   153f0:	bl	345a4 <flatcc_json_printer_int64_field@@Base>
   153f4:	mov	r3, #0
   153f8:	str	r3, [sp, #4]
   153fc:	mov	r3, #16
   15400:	str	r3, [sp]
   15404:	movw	r3, #59856	; 0xe9d0
   15408:	movt	r3, #3
   1540c:	mov	r2, #1
   15410:	mov	r1, r5
   15414:	mov	r0, r4
   15418:	bl	33b94 <flatcc_json_printer_uint32_field@@Base>
   1541c:	add	sp, sp, #20
   15420:	ldrd	r4, [sp]
   15424:	add	sp, sp, #8
   15428:	pop	{pc}		; (ldr pc, [sp], #4)
   1542c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15430:	strd	r6, [sp, #8]
   15434:	strd	r8, [sp, #16]
   15438:	strd	sl, [sp, #24]
   1543c:	str	lr, [sp, #32]
   15440:	sub	sp, sp, #20
   15444:	mov	r4, r0
   15448:	mov	r5, r1
   1544c:	mov	r7, #4
   15450:	str	r7, [sp]
   15454:	movw	r3, #59876	; 0xe9e4
   15458:	movt	r3, #3
   1545c:	mov	r2, #0
   15460:	bl	33280 <flatcc_json_printer_string_field@@Base>
   15464:	mov	fp, #0
   15468:	str	fp, [sp, #4]
   1546c:	mov	sl, #9
   15470:	str	sl, [sp]
   15474:	movw	r3, #59884	; 0xe9ec
   15478:	movt	r3, #3
   1547c:	mov	r2, #1
   15480:	mov	r1, r5
   15484:	mov	r0, r4
   15488:	bl	33b94 <flatcc_json_printer_uint32_field@@Base>
   1548c:	str	r7, [sp]
   15490:	movw	r3, #59896	; 0xe9f8
   15494:	movt	r3, #3
   15498:	mov	r2, #2
   1549c:	mov	r1, r5
   154a0:	mov	r0, r4
   154a4:	bl	33280 <flatcc_json_printer_string_field@@Base>
   154a8:	mov	r8, #0
   154ac:	mov	r9, #0
   154b0:	strd	r8, [sp, #8]
   154b4:	mov	r6, #8
   154b8:	str	r6, [sp]
   154bc:	movw	r3, #59904	; 0xea00
   154c0:	movt	r3, #3
   154c4:	mov	r2, #3
   154c8:	mov	r1, r5
   154cc:	mov	r0, r4
   154d0:	bl	345a4 <flatcc_json_printer_int64_field@@Base>
   154d4:	str	r7, [sp]
   154d8:	movw	r3, #59916	; 0xea0c
   154dc:	movt	r3, #3
   154e0:	mov	r2, r7
   154e4:	mov	r1, r5
   154e8:	mov	r0, r4
   154ec:	bl	33280 <flatcc_json_printer_string_field@@Base>
   154f0:	strd	r8, [sp, #8]
   154f4:	str	r6, [sp]
   154f8:	movw	r3, #59924	; 0xea14
   154fc:	movt	r3, #3
   15500:	mov	r2, #5
   15504:	mov	r1, r5
   15508:	mov	r0, r4
   1550c:	bl	345a4 <flatcc_json_printer_int64_field@@Base>
   15510:	str	fp, [sp, #4]
   15514:	str	sl, [sp]
   15518:	movw	r3, #59936	; 0xea20
   1551c:	movt	r3, #3
   15520:	mov	r2, #6
   15524:	mov	r1, r5
   15528:	mov	r0, r4
   1552c:	bl	33b94 <flatcc_json_printer_uint32_field@@Base>
   15530:	strd	r8, [sp, #8]
   15534:	str	r6, [sp]
   15538:	movw	r3, #59948	; 0xea2c
   1553c:	movt	r3, #3
   15540:	mov	r2, #7
   15544:	mov	r1, r5
   15548:	mov	r0, r4
   1554c:	bl	345a4 <flatcc_json_printer_int64_field@@Base>
   15550:	str	fp, [sp, #4]
   15554:	str	sl, [sp]
   15558:	movw	r3, #59960	; 0xea38
   1555c:	movt	r3, #3
   15560:	mov	r2, r6
   15564:	mov	r1, r5
   15568:	mov	r0, r4
   1556c:	bl	33b94 <flatcc_json_printer_uint32_field@@Base>
   15570:	add	sp, sp, #20
   15574:	ldrd	r4, [sp]
   15578:	ldrd	r6, [sp, #8]
   1557c:	ldrd	r8, [sp, #16]
   15580:	ldrd	sl, [sp, #24]
   15584:	add	sp, sp, #32
   15588:	pop	{pc}		; (ldr pc, [sp], #4)
   1558c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15590:	strd	r6, [sp, #8]
   15594:	strd	r8, [sp, #16]
   15598:	strd	sl, [sp, #24]
   1559c:	str	lr, [sp, #32]
   155a0:	sub	sp, sp, #28
   155a4:	mov	sl, r0
   155a8:	mov	r5, r1
   155ac:	movw	r3, #25344	; 0x6300
   155b0:	movt	r3, #1
   155b4:	str	r3, [sp, #4]
   155b8:	mov	r6, #3
   155bc:	str	r6, [sp]
   155c0:	movw	r3, #59972	; 0xea44
   155c4:	movt	r3, #3
   155c8:	mov	r2, #0
   155cc:	bl	3d4cc <flatcc_json_printer_struct_field@@Base>
   155d0:	mov	r3, #150	; 0x96
   155d4:	str	r3, [sp, #4]
   155d8:	mov	r7, #4
   155dc:	str	r7, [sp]
   155e0:	movw	r3, #59976	; 0xea48
   155e4:	movt	r3, #3
   155e8:	mov	r2, #1
   155ec:	mov	r1, r5
   155f0:	mov	r0, sl
   155f4:	bl	341a4 <flatcc_json_printer_int16_field@@Base>
   155f8:	mov	r3, #100	; 0x64
   155fc:	str	r3, [sp, #4]
   15600:	mov	r2, #2
   15604:	str	r2, [sp]
   15608:	movw	r3, #59984	; 0xea50
   1560c:	movt	r3, #3
   15610:	mov	r1, r5
   15614:	mov	r0, sl
   15618:	bl	341a4 <flatcc_json_printer_int16_field@@Base>
   1561c:	str	r7, [sp]
   15620:	movw	r3, #59988	; 0xea54
   15624:	movt	r3, #3
   15628:	mov	r2, r6
   1562c:	mov	r1, r5
   15630:	mov	r0, sl
   15634:	bl	33280 <flatcc_json_printer_string_field@@Base>
   15638:	mov	r8, #9
   1563c:	str	r8, [sp]
   15640:	movw	r3, #59996	; 0xea5c
   15644:	movt	r3, #3
   15648:	mov	r2, #5
   1564c:	mov	r1, r5
   15650:	mov	r0, sl
   15654:	bl	384bc <flatcc_json_printer_uint8_vector_field@@Base>
   15658:	movw	r3, #25112	; 0x6218
   1565c:	movt	r3, #1
   15660:	str	r3, [sp, #8]
   15664:	mov	r4, #8
   15668:	str	r4, [sp, #4]
   1566c:	mov	r9, #5
   15670:	str	r9, [sp]
   15674:	movw	r3, #60008	; 0xea68
   15678:	movt	r3, #3
   1567c:	mov	r2, #6
   15680:	mov	r1, r5
   15684:	mov	r0, sl
   15688:	bl	35658 <flatcc_json_printer_int8_enum_field@@Base>
   1568c:	movw	r3, #23772	; 0x5cdc
   15690:	movt	r3, #1
   15694:	str	r3, [sp, #8]
   15698:	movw	r3, #24772	; 0x60c4
   1569c:	movt	r3, #1
   156a0:	str	r3, [sp, #4]
   156a4:	str	r7, [sp]
   156a8:	movw	r3, #60016	; 0xea70
   156ac:	movt	r3, #3
   156b0:	mov	r2, r4
   156b4:	mov	r1, r5
   156b8:	mov	r0, sl
   156bc:	bl	3cd84 <flatcc_json_printer_union_field@@Base>
   156c0:	movw	fp, #23656	; 0x5c68
   156c4:	movt	fp, #1
   156c8:	str	fp, [sp, #8]
   156cc:	str	r7, [sp, #4]
   156d0:	str	r9, [sp]
   156d4:	movw	r3, #60024	; 0xea78
   156d8:	movt	r3, #3
   156dc:	mov	r2, r8
   156e0:	mov	r1, r5
   156e4:	mov	r0, sl
   156e8:	bl	3bc04 <flatcc_json_printer_struct_vector_field@@Base>
   156ec:	mov	r6, #17
   156f0:	str	r6, [sp]
   156f4:	movw	r3, #60032	; 0xea80
   156f8:	movt	r3, #3
   156fc:	mov	r2, #10
   15700:	mov	r1, r5
   15704:	str	sl, [sp, #20]
   15708:	mov	r0, sl
   1570c:	bl	3bf9c <flatcc_json_printer_string_vector_field@@Base>
   15710:	movw	sl, #21900	; 0x558c
   15714:	movt	sl, #1
   15718:	str	sl, [sp, #4]
   1571c:	str	r6, [sp]
   15720:	movw	r3, #60052	; 0xea94
   15724:	movt	r3, #3
   15728:	mov	r2, #11
   1572c:	mov	r1, r5
   15730:	ldr	r0, [sp, #20]
   15734:	bl	3c280 <flatcc_json_printer_table_vector_field@@Base>
   15738:	str	sl, [sp, #4]
   1573c:	str	r9, [sp]
   15740:	movw	r3, #60072	; 0xeaa8
   15744:	movt	r3, #3
   15748:	mov	r2, #12
   1574c:	mov	r1, r5
   15750:	ldr	r0, [sp, #20]
   15754:	bl	3caac <flatcc_json_printer_table_field@@Base>
   15758:	str	sl, [sp, #8]
   1575c:	mov	sl, #0
   15760:	str	sl, [sp, #4]
   15764:	mov	r3, #20
   15768:	str	r3, [sp]
   1576c:	movw	r3, #60080	; 0xeab0
   15770:	movt	r3, #3
   15774:	mov	r2, #13
   15778:	mov	r1, r5
   1577c:	ldr	r0, [sp, #20]
   15780:	bl	3db98 <flatcc_json_printer_table_as_nested_root@@Base>
   15784:	movw	r3, #23504	; 0x5bd0
   15788:	movt	r3, #1
   1578c:	str	r3, [sp, #4]
   15790:	str	r8, [sp]
   15794:	movw	r3, #60104	; 0xeac8
   15798:	movt	r3, #3
   1579c:	mov	r2, #14
   157a0:	mov	r1, r5
   157a4:	ldr	r8, [sp, #20]
   157a8:	mov	r0, r8
   157ac:	bl	3caac <flatcc_json_printer_table_field@@Base>
   157b0:	mov	r3, #1
   157b4:	str	r3, [sp, #4]
   157b8:	str	r4, [sp]
   157bc:	movw	r3, #60116	; 0xead4
   157c0:	movt	r3, #3
   157c4:	mov	r2, #15
   157c8:	mov	r1, r5
   157cc:	str	r8, [sp, #20]
   157d0:	mov	r0, r8
   157d4:	bl	347b4 <flatcc_json_printer_bool_field@@Base>
   157d8:	str	sl, [sp, #4]
   157dc:	mov	r8, #16
   157e0:	str	r8, [sp]
   157e4:	movw	r3, #60128	; 0xeae0
   157e8:	movt	r3, #3
   157ec:	mov	r2, r8
   157f0:	mov	r1, r5
   157f4:	ldr	r0, [sp, #20]
   157f8:	bl	343a4 <flatcc_json_printer_int32_field@@Base>
   157fc:	str	sl, [sp, #4]
   15800:	str	r8, [sp]
   15804:	movw	r3, #60148	; 0xeaf4
   15808:	movt	r3, #3
   1580c:	mov	r2, r6
   15810:	mov	r1, r5
   15814:	ldr	r0, [sp, #20]
   15818:	bl	33b94 <flatcc_json_printer_uint32_field@@Base>
   1581c:	mov	r2, #0
   15820:	mov	r3, #0
   15824:	strd	r2, [sp, #8]
   15828:	str	r8, [sp]
   1582c:	movw	r3, #60168	; 0xeb08
   15830:	movt	r3, #3
   15834:	mov	r2, #18
   15838:	mov	r1, r5
   1583c:	ldr	r0, [sp, #20]
   15840:	bl	345a4 <flatcc_json_printer_int64_field@@Base>
   15844:	mov	r2, #0
   15848:	mov	r3, #0
   1584c:	strd	r2, [sp, #8]
   15850:	str	r8, [sp]
   15854:	movw	r3, #60188	; 0xeb1c
   15858:	movt	r3, #3
   1585c:	mov	r2, #19
   15860:	mov	r1, r5
   15864:	ldr	r0, [sp, #20]
   15868:	bl	33d94 <flatcc_json_printer_uint64_field@@Base>
   1586c:	str	sl, [sp, #4]
   15870:	str	r6, [sp]
   15874:	movw	r3, #60208	; 0xeb30
   15878:	movt	r3, #3
   1587c:	mov	r2, #20
   15880:	mov	r1, r5
   15884:	ldr	r0, [sp, #20]
   15888:	bl	343a4 <flatcc_json_printer_int32_field@@Base>
   1588c:	str	sl, [sp, #4]
   15890:	str	r6, [sp]
   15894:	movw	r3, #60228	; 0xeb44
   15898:	movt	r3, #3
   1589c:	mov	r2, #21
   158a0:	mov	r1, r5
   158a4:	ldr	sl, [sp, #20]
   158a8:	mov	r0, sl
   158ac:	bl	33b94 <flatcc_json_printer_uint32_field@@Base>
   158b0:	mov	r2, #0
   158b4:	mov	r3, #0
   158b8:	strd	r2, [sp, #8]
   158bc:	str	r6, [sp]
   158c0:	movw	r3, #60248	; 0xeb58
   158c4:	movt	r3, #3
   158c8:	mov	r2, #22
   158cc:	mov	r1, r5
   158d0:	mov	r0, sl
   158d4:	bl	345a4 <flatcc_json_printer_int64_field@@Base>
   158d8:	mov	r2, #0
   158dc:	mov	r3, #0
   158e0:	strd	r2, [sp, #8]
   158e4:	str	r6, [sp]
   158e8:	movw	r3, #60268	; 0xeb6c
   158ec:	movt	r3, #3
   158f0:	mov	r2, #23
   158f4:	mov	r1, r5
   158f8:	mov	r0, sl
   158fc:	bl	33d94 <flatcc_json_printer_uint64_field@@Base>
   15900:	str	r8, [sp]
   15904:	movw	r3, #60288	; 0xeb80
   15908:	movt	r3, #3
   1590c:	mov	r2, #24
   15910:	mov	r1, r5
   15914:	mov	r0, sl
   15918:	bl	3997c <flatcc_json_printer_bool_vector_field@@Base>
   1591c:	str	r9, [sp]
   15920:	vldr	s0, [pc, #408]	; 15ac0 <_start@@Base+0x14c0>
   15924:	movw	r3, #60308	; 0xeb94
   15928:	movt	r3, #3
   1592c:	mov	r2, #25
   15930:	mov	r1, r5
   15934:	mov	r0, sl
   15938:	bl	349b4 <flatcc_json_printer_float_field@@Base>
   1593c:	mov	r8, #6
   15940:	str	r8, [sp]
   15944:	vldr	s0, [pc, #376]	; 15ac4 <_start@@Base+0x14c4>
   15948:	movw	r3, #60316	; 0xeb9c
   1594c:	movt	r3, #3
   15950:	mov	r2, #26
   15954:	mov	r1, r5
   15958:	mov	r0, sl
   1595c:	bl	349b4 <flatcc_json_printer_float_field@@Base>
   15960:	str	r8, [sp]
   15964:	vldr	s0, [pc, #348]	; 15ac8 <_start@@Base+0x14c8>
   15968:	movw	r3, #60324	; 0xeba4
   1596c:	movt	r3, #3
   15970:	mov	r2, #27
   15974:	mov	r1, r5
   15978:	mov	r0, sl
   1597c:	bl	349b4 <flatcc_json_printer_float_field@@Base>
   15980:	mov	r3, #18
   15984:	str	r3, [sp]
   15988:	movw	r3, #60332	; 0xebac
   1598c:	movt	r3, #3
   15990:	mov	r2, #28
   15994:	mov	r1, r5
   15998:	mov	r0, sl
   1599c:	bl	3bf9c <flatcc_json_printer_string_vector_field@@Base>
   159a0:	movw	r3, #23392	; 0x5b60
   159a4:	movt	r3, #1
   159a8:	str	r3, [sp, #8]
   159ac:	str	r4, [sp, #4]
   159b0:	mov	r3, #23
   159b4:	str	r3, [sp]
   159b8:	movw	r3, #60352	; 0xebc0
   159bc:	movt	r3, #3
   159c0:	mov	r2, #29
   159c4:	mov	r1, r5
   159c8:	mov	r0, sl
   159cc:	bl	3bc04 <flatcc_json_printer_struct_vector_field@@Base>
   159d0:	str	r7, [sp]
   159d4:	movw	r3, #60376	; 0xebd8
   159d8:	movt	r3, #3
   159dc:	mov	r2, #30
   159e0:	mov	r1, r5
   159e4:	mov	r0, sl
   159e8:	bl	384bc <flatcc_json_printer_uint8_vector_field@@Base>
   159ec:	str	fp, [sp, #8]
   159f0:	str	r7, [sp, #4]
   159f4:	str	r9, [sp]
   159f8:	movw	r3, #60384	; 0xebe0
   159fc:	movt	r3, #3
   15a00:	mov	r2, #31
   15a04:	mov	r1, r5
   15a08:	mov	r0, sl
   15a0c:	bl	3bc04 <flatcc_json_printer_struct_vector_field@@Base>
   15a10:	mov	r3, #15
   15a14:	str	r3, [sp]
   15a18:	movw	r3, #60392	; 0xebe8
   15a1c:	movt	r3, #3
   15a20:	mov	r2, #32
   15a24:	mov	r1, r5
   15a28:	mov	r0, sl
   15a2c:	bl	396ec <flatcc_json_printer_int64_vector_field@@Base>
   15a30:	str	r6, [sp]
   15a34:	movw	r3, #60408	; 0xebf8
   15a38:	movt	r3, #3
   15a3c:	mov	r2, #33	; 0x21
   15a40:	mov	r1, r5
   15a44:	mov	r0, sl
   15a48:	bl	39ee4 <flatcc_json_printer_double_vector_field@@Base>
   15a4c:	movw	r3, #18492	; 0x483c
   15a50:	movt	r3, #1
   15a54:	str	r3, [sp, #4]
   15a58:	mov	r3, #21
   15a5c:	str	r3, [sp]
   15a60:	movw	r3, #60428	; 0xec0c
   15a64:	movt	r3, #3
   15a68:	mov	r2, #34	; 0x22
   15a6c:	mov	r1, r5
   15a70:	mov	r0, sl
   15a74:	bl	3caac <flatcc_json_printer_table_field@@Base>
   15a78:	movw	r3, #23244	; 0x5acc
   15a7c:	movt	r3, #1
   15a80:	str	r3, [sp, #4]
   15a84:	mov	r3, #10
   15a88:	str	r3, [sp]
   15a8c:	movw	r3, #60452	; 0xec24
   15a90:	movt	r3, #3
   15a94:	mov	r2, #35	; 0x23
   15a98:	mov	r1, r5
   15a9c:	mov	r0, sl
   15aa0:	bl	3caac <flatcc_json_printer_table_field@@Base>
   15aa4:	add	sp, sp, #28
   15aa8:	ldrd	r4, [sp]
   15aac:	ldrd	r6, [sp, #8]
   15ab0:	ldrd	r8, [sp, #16]
   15ab4:	ldrd	sl, [sp, #24]
   15ab8:	add	sp, sp, #32
   15abc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15ac4:	submi	r0, r0, r0
   15ac8:	andeq	r0, r0, r0
   15acc:	strd	r4, [sp, #-16]!
   15ad0:	str	r6, [sp, #8]
   15ad4:	str	lr, [sp, #12]
   15ad8:	sub	sp, sp, #8
   15adc:	mov	r5, r0
   15ae0:	mov	r6, r1
   15ae4:	mov	r4, #0
   15ae8:	str	r4, [sp, #4]
   15aec:	mov	r3, #4
   15af0:	str	r3, [sp]
   15af4:	movw	r3, #60464	; 0xec30
   15af8:	movt	r3, #3
   15afc:	mov	r2, r4
   15b00:	bl	33460 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b04:	mov	r2, #1
   15b08:	str	r2, [sp, #4]
   15b0c:	mov	r3, #7
   15b10:	str	r3, [sp]
   15b14:	movw	r3, #60472	; 0xec38
   15b18:	movt	r3, #3
   15b1c:	mov	r1, r6
   15b20:	mov	r0, r5
   15b24:	bl	33460 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b28:	str	r4, [sp, #4]
   15b2c:	mov	r3, #6
   15b30:	str	r3, [sp]
   15b34:	movw	r3, #60480	; 0xec40
   15b38:	movt	r3, #3
   15b3c:	mov	r2, #2
   15b40:	mov	r1, r6
   15b44:	mov	r0, r5
   15b48:	bl	33460 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b4c:	add	sp, sp, #8
   15b50:	ldrd	r4, [sp]
   15b54:	ldr	r6, [sp, #8]
   15b58:	add	sp, sp, #12
   15b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b60:	strd	r4, [sp, #-12]!
   15b64:	str	lr, [sp, #8]
   15b68:	sub	sp, sp, #12
   15b6c:	mov	r5, r0
   15b70:	mov	r4, r1
   15b74:	mov	r3, #2
   15b78:	str	r3, [sp, #4]
   15b7c:	movw	r3, #60488	; 0xec48
   15b80:	movt	r3, #3
   15b84:	str	r3, [sp]
   15b88:	mov	r3, #0
   15b8c:	mov	r2, r1
   15b90:	mov	r1, r3
   15b94:	bl	3643c <flatcc_json_printer_uint32_struct_field@@Base>
   15b98:	mov	r3, #8
   15b9c:	str	r3, [sp, #4]
   15ba0:	movw	r3, #60492	; 0xec4c
   15ba4:	movt	r3, #3
   15ba8:	str	r3, [sp]
   15bac:	mov	r3, #4
   15bb0:	mov	r2, r4
   15bb4:	mov	r1, #1
   15bb8:	mov	r0, r5
   15bbc:	bl	3643c <flatcc_json_printer_uint32_struct_field@@Base>
   15bc0:	add	sp, sp, #12
   15bc4:	ldrd	r4, [sp]
   15bc8:	add	sp, sp, #8
   15bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd0:	strd	r4, [sp, #-16]!
   15bd4:	str	r6, [sp, #8]
   15bd8:	str	lr, [sp, #12]
   15bdc:	sub	sp, sp, #16
   15be0:	mov	r4, r0
   15be4:	mov	r5, r1
   15be8:	mov	r6, #2
   15bec:	str	r6, [sp]
   15bf0:	movw	r3, #60488	; 0xec48
   15bf4:	movt	r3, #3
   15bf8:	mov	r2, #0
   15bfc:	bl	33280 <flatcc_json_printer_string_field@@Base>
   15c00:	mov	r2, #0
   15c04:	mov	r3, #0
   15c08:	strd	r2, [sp, #8]
   15c0c:	mov	r3, #3
   15c10:	str	r3, [sp]
   15c14:	movw	r3, #60504	; 0xec58
   15c18:	movt	r3, #3
   15c1c:	mov	r2, #1
   15c20:	mov	r1, r5
   15c24:	mov	r0, r4
   15c28:	bl	345a4 <flatcc_json_printer_int64_field@@Base>
   15c2c:	mov	r3, #0
   15c30:	str	r3, [sp, #4]
   15c34:	mov	r3, #5
   15c38:	str	r3, [sp]
   15c3c:	movw	r3, #60508	; 0xec5c
   15c40:	movt	r3, #3
   15c44:	mov	r2, r6
   15c48:	mov	r1, r5
   15c4c:	mov	r0, r4
   15c50:	bl	33994 <flatcc_json_printer_uint16_field@@Base>
   15c54:	add	sp, sp, #16
   15c58:	ldrd	r4, [sp]
   15c5c:	ldr	r6, [sp, #8]
   15c60:	add	sp, sp, #12
   15c64:	pop	{pc}		; (ldr pc, [sp], #4)
   15c68:	strd	r4, [sp, #-16]!
   15c6c:	str	r6, [sp, #8]
   15c70:	str	lr, [sp, #12]
   15c74:	sub	sp, sp, #8
   15c78:	mov	r6, r0
   15c7c:	mov	r5, r1
   15c80:	mov	r4, #1
   15c84:	str	r4, [sp, #4]
   15c88:	movw	r3, #60224	; 0xeb40
   15c8c:	movt	r3, #3
   15c90:	str	r3, [sp]
   15c94:	mov	r3, #0
   15c98:	mov	r2, r1
   15c9c:	mov	r1, r3
   15ca0:	bl	36908 <flatcc_json_printer_int16_struct_field@@Base>
   15ca4:	str	r4, [sp, #4]
   15ca8:	movw	r3, #60516	; 0xec64
   15cac:	movt	r3, #3
   15cb0:	str	r3, [sp]
   15cb4:	mov	r3, #2
   15cb8:	mov	r2, r5
   15cbc:	mov	r1, r4
   15cc0:	mov	r0, r6
   15cc4:	bl	36770 <flatcc_json_printer_int8_struct_field@@Base>
   15cc8:	add	sp, sp, #8
   15ccc:	ldrd	r4, [sp]
   15cd0:	ldr	r6, [sp, #8]
   15cd4:	add	sp, sp, #12
   15cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cdc:	str	r4, [sp, #-8]!
   15ce0:	str	lr, [sp, #4]
   15ce4:	ldrb	r3, [r1, #8]
   15ce8:	sub	r3, r3, #1
   15cec:	cmp	r3, #3
   15cf0:	ldrls	pc, [pc, r3, lsl #2]
   15cf4:	b	15d14 <_start@@Base+0x1714>
   15cf8:	andeq	r5, r1, r8, lsl #26
   15cfc:	andeq	r5, r1, r0, lsr #26
   15d00:	andeq	r5, r1, r0, lsr sp
   15d04:	andeq	r5, r1, r0, asr #26
   15d08:	movw	r2, #21900	; 0x558c
   15d0c:	movt	r2, #1
   15d10:	bl	3d068 <flatcc_json_printer_union_table@@Base>
   15d14:	ldr	r4, [sp]
   15d18:	add	sp, sp, #4
   15d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d20:	movw	r2, #24920	; 0x6158
   15d24:	movt	r2, #1
   15d28:	bl	3d068 <flatcc_json_printer_union_table@@Base>
   15d2c:	b	15d14 <_start@@Base+0x1714>
   15d30:	movw	r2, #18496	; 0x4840
   15d34:	movt	r2, #1
   15d38:	bl	3d068 <flatcc_json_printer_union_table@@Base>
   15d3c:	b	15d14 <_start@@Base+0x1714>
   15d40:	movw	r2, #23888	; 0x5d50
   15d44:	movt	r2, #1
   15d48:	bl	3d068 <flatcc_json_printer_union_table@@Base>
   15d4c:	b	15d14 <_start@@Base+0x1714>
   15d50:	strd	r4, [sp, #-12]!
   15d54:	str	lr, [sp, #8]
   15d58:	sub	sp, sp, #20
   15d5c:	mov	r4, r0
   15d60:	mov	r5, r1
   15d64:	movw	r3, #21124	; 0x5284
   15d68:	movt	r3, #1
   15d6c:	str	r3, [sp, #4]
   15d70:	mov	r3, #6
   15d74:	str	r3, [sp]
   15d78:	movw	r3, #60520	; 0xec68
   15d7c:	movt	r3, #3
   15d80:	mov	r2, #0
   15d84:	bl	3caac <flatcc_json_printer_table_field@@Base>
   15d88:	movw	r3, #24060	; 0x5dfc
   15d8c:	movt	r3, #1
   15d90:	str	r3, [sp, #4]
   15d94:	mov	r3, #5
   15d98:	str	r3, [sp]
   15d9c:	movw	r3, #60528	; 0xec70
   15da0:	movt	r3, #3
   15da4:	mov	r2, #1
   15da8:	mov	r1, r5
   15dac:	mov	r0, r4
   15db0:	bl	3caac <flatcc_json_printer_table_field@@Base>
   15db4:	movw	r3, #23772	; 0x5cdc
   15db8:	movt	r3, #1
   15dbc:	str	r3, [sp, #8]
   15dc0:	movw	r3, #24772	; 0x60c4
   15dc4:	movt	r3, #1
   15dc8:	str	r3, [sp, #4]
   15dcc:	mov	r3, #7
   15dd0:	str	r3, [sp]
   15dd4:	movw	r3, #60536	; 0xec78
   15dd8:	movt	r3, #3
   15ddc:	mov	r2, #3
   15de0:	mov	r1, r5
   15de4:	mov	r0, r4
   15de8:	bl	3c740 <flatcc_json_printer_union_vector_field@@Base>
   15dec:	add	sp, sp, #20
   15df0:	ldrd	r4, [sp]
   15df4:	add	sp, sp, #8
   15df8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dfc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15e00:	strd	r6, [sp, #8]
   15e04:	strd	r8, [sp, #16]
   15e08:	str	lr, [sp, #24]
   15e0c:	sub	sp, sp, #20
   15e10:	mov	r6, r0
   15e14:	mov	r7, r1
   15e18:	movw	r5, #24316	; 0x5efc
   15e1c:	movt	r5, #1
   15e20:	str	r5, [sp, #8]
   15e24:	movw	r4, #24568	; 0x5ff8
   15e28:	movt	r4, #1
   15e2c:	str	r4, [sp, #4]
   15e30:	mov	r3, #14
   15e34:	str	r3, [sp]
   15e38:	movw	r3, #60544	; 0xec80
   15e3c:	movt	r3, #3
   15e40:	mov	r2, #1
   15e44:	bl	3cd84 <flatcc_json_printer_union_field@@Base>
   15e48:	str	r5, [sp, #8]
   15e4c:	str	r4, [sp, #4]
   15e50:	mov	r9, #10
   15e54:	str	r9, [sp]
   15e58:	movw	r3, #60560	; 0xec90
   15e5c:	movt	r3, #3
   15e60:	mov	r2, #3
   15e64:	mov	r1, r7
   15e68:	mov	r0, r6
   15e6c:	bl	3cd84 <flatcc_json_printer_union_field@@Base>
   15e70:	str	r5, [sp, #8]
   15e74:	str	r4, [sp, #4]
   15e78:	mov	r8, #9
   15e7c:	str	r8, [sp]
   15e80:	movw	r3, #60572	; 0xec9c
   15e84:	movt	r3, #3
   15e88:	mov	r2, #5
   15e8c:	mov	r1, r7
   15e90:	mov	r0, r6
   15e94:	bl	3cd84 <flatcc_json_printer_union_field@@Base>
   15e98:	str	r5, [sp, #8]
   15e9c:	str	r4, [sp, #4]
   15ea0:	mov	r3, #5
   15ea4:	str	r3, [sp]
   15ea8:	movw	r3, #60584	; 0xeca8
   15eac:	movt	r3, #3
   15eb0:	mov	r2, #7
   15eb4:	mov	r1, r7
   15eb8:	mov	r0, r6
   15ebc:	bl	3cd84 <flatcc_json_printer_union_field@@Base>
   15ec0:	str	r5, [sp, #8]
   15ec4:	str	r4, [sp, #4]
   15ec8:	str	r9, [sp]
   15ecc:	movw	r3, #60592	; 0xecb0
   15ed0:	movt	r3, #3
   15ed4:	mov	r2, r8
   15ed8:	mov	r1, r7
   15edc:	mov	r0, r6
   15ee0:	bl	3c740 <flatcc_json_printer_union_vector_field@@Base>
   15ee4:	add	sp, sp, #20
   15ee8:	ldrd	r4, [sp]
   15eec:	ldrd	r6, [sp, #8]
   15ef0:	ldrd	r8, [sp, #16]
   15ef4:	add	sp, sp, #24
   15ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   15efc:	str	r4, [sp, #-8]!
   15f00:	str	lr, [sp, #4]
   15f04:	ldrb	r3, [r1, #8]
   15f08:	cmp	r3, #9
   15f0c:	beq	15f68 <_start@@Base+0x1968>
   15f10:	bls	15f30 <_start@@Base+0x1930>
   15f14:	cmp	r3, #11
   15f18:	beq	15f88 <_start@@Base+0x1988>
   15f1c:	bcc	15f78 <_start@@Base+0x1978>
   15f20:	cmp	r3, #255	; 0xff
   15f24:	bne	15f5c <_start@@Base+0x195c>
   15f28:	bl	3d264 <flatcc_json_printer_union_string@@Base>
   15f2c:	b	15f5c <_start@@Base+0x195c>
   15f30:	cmp	r3, #2
   15f34:	beq	15f50 <_start@@Base+0x1950>
   15f38:	cmp	r3, #8
   15f3c:	bne	15f5c <_start@@Base+0x195c>
   15f40:	movw	r2, #24516	; 0x5fc4
   15f44:	movt	r2, #1
   15f48:	bl	3d18c <flatcc_json_printer_union_struct@@Base>
   15f4c:	b	15f5c <_start@@Base+0x195c>
   15f50:	movw	r2, #21288	; 0x5328
   15f54:	movt	r2, #1
   15f58:	bl	3d068 <flatcc_json_printer_union_table@@Base>
   15f5c:	ldr	r4, [sp]
   15f60:	add	sp, sp, #4
   15f64:	pop	{pc}		; (ldr pc, [sp], #4)
   15f68:	movw	r2, #24464	; 0x5f90
   15f6c:	movt	r2, #1
   15f70:	bl	3d18c <flatcc_json_printer_union_struct@@Base>
   15f74:	b	15f5c <_start@@Base+0x195c>
   15f78:	movw	r2, #24464	; 0x5f90
   15f7c:	movt	r2, #1
   15f80:	bl	3d18c <flatcc_json_printer_union_struct@@Base>
   15f84:	b	15f5c <_start@@Base+0x195c>
   15f88:	bl	3d264 <flatcc_json_printer_union_string@@Base>
   15f8c:	b	15f5c <_start@@Base+0x195c>
   15f90:	push	{lr}		; (str lr, [sp, #-4]!)
   15f94:	sub	sp, sp, #12
   15f98:	mov	r3, #10
   15f9c:	str	r3, [sp, #4]
   15fa0:	movw	r3, #60604	; 0xecbc
   15fa4:	movt	r3, #3
   15fa8:	str	r3, [sp]
   15fac:	mov	r3, #0
   15fb0:	mov	r2, r1
   15fb4:	mov	r1, r3
   15fb8:	bl	36aa0 <flatcc_json_printer_int32_struct_field@@Base>
   15fbc:	add	sp, sp, #12
   15fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc4:	push	{lr}		; (str lr, [sp, #-4]!)
   15fc8:	sub	sp, sp, #12
   15fcc:	mov	r3, #11
   15fd0:	str	r3, [sp, #4]
   15fd4:	movw	r3, #60616	; 0xecc8
   15fd8:	movt	r3, #3
   15fdc:	str	r3, [sp]
   15fe0:	mov	r3, #0
   15fe4:	mov	r2, r1
   15fe8:	mov	r1, r3
   15fec:	bl	362a4 <flatcc_json_printer_uint16_struct_field@@Base>
   15ff0:	add	sp, sp, #12
   15ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ff8:	str	r4, [sp, #-8]!
   15ffc:	str	lr, [sp, #4]
   16000:	cmp	r1, #9
   16004:	beq	16074 <_start@@Base+0x1a74>
   16008:	bls	16034 <_start@@Base+0x1a34>
   1600c:	cmp	r1, #11
   16010:	beq	1609c <_start@@Base+0x1a9c>
   16014:	bcc	16088 <_start@@Base+0x1a88>
   16018:	cmp	r1, #255	; 0xff
   1601c:	bne	160b0 <_start@@Base+0x1ab0>
   16020:	mov	r2, #6
   16024:	movw	r1, #60672	; 0xed00
   16028:	movt	r1, #3
   1602c:	bl	33134 <flatcc_json_printer_enum@@Base>
   16030:	b	16068 <_start@@Base+0x1a68>
   16034:	cmp	r1, #2
   16038:	beq	16058 <_start@@Base+0x1a58>
   1603c:	cmp	r1, #8
   16040:	bne	160b0 <_start@@Base+0x1ab0>
   16044:	mov	r2, #8
   16048:	movw	r1, #60636	; 0xecdc
   1604c:	movt	r1, #3
   16050:	bl	33134 <flatcc_json_printer_enum@@Base>
   16054:	b	16068 <_start@@Base+0x1a68>
   16058:	mov	r2, #5
   1605c:	movw	r1, #60628	; 0xecd4
   16060:	movt	r1, #3
   16064:	bl	33134 <flatcc_json_printer_enum@@Base>
   16068:	ldr	r4, [sp]
   1606c:	add	sp, sp, #4
   16070:	pop	{pc}		; (ldr pc, [sp], #4)
   16074:	mov	r2, #5
   16078:	movw	r1, #60648	; 0xece8
   1607c:	movt	r1, #3
   16080:	bl	33134 <flatcc_json_printer_enum@@Base>
   16084:	b	16068 <_start@@Base+0x1a68>
   16088:	mov	r2, #7
   1608c:	movw	r1, #60656	; 0xecf0
   16090:	movt	r1, #3
   16094:	bl	33134 <flatcc_json_printer_enum@@Base>
   16098:	b	16068 <_start@@Base+0x1a68>
   1609c:	mov	r2, #5
   160a0:	movw	r1, #60664	; 0xecf8
   160a4:	movt	r1, #3
   160a8:	bl	33134 <flatcc_json_printer_enum@@Base>
   160ac:	b	16068 <_start@@Base+0x1a68>
   160b0:	mov	r2, #4
   160b4:	movw	r1, #13596	; 0x351c
   160b8:	movt	r1, #4
   160bc:	bl	33134 <flatcc_json_printer_enum@@Base>
   160c0:	b	16068 <_start@@Base+0x1a68>
   160c4:	str	r4, [sp, #-8]!
   160c8:	str	lr, [sp, #4]
   160cc:	sub	r1, r1, #1
   160d0:	cmp	r1, #3
   160d4:	ldrls	pc, [pc, r1, lsl #2]
   160d8:	b	16144 <_start@@Base+0x1b44>
   160dc:	andeq	r6, r1, ip, ror #1
   160e0:	andeq	r6, r1, r8, lsl #2
   160e4:	andeq	r6, r1, ip, lsl r1
   160e8:	andeq	r6, r1, r0, lsr r1
   160ec:	mov	r2, #7
   160f0:	movw	r1, #60680	; 0xed08
   160f4:	movt	r1, #3
   160f8:	bl	33134 <flatcc_json_printer_enum@@Base>
   160fc:	ldr	r4, [sp]
   16100:	add	sp, sp, #4
   16104:	pop	{pc}		; (ldr pc, [sp], #4)
   16108:	mov	r2, #23
   1610c:	movw	r1, #60688	; 0xed10
   16110:	movt	r1, #3
   16114:	bl	33134 <flatcc_json_printer_enum@@Base>
   16118:	b	160fc <_start@@Base+0x1afc>
   1611c:	mov	r2, #8
   16120:	movw	r1, #60712	; 0xed28
   16124:	movt	r1, #3
   16128:	bl	33134 <flatcc_json_printer_enum@@Base>
   1612c:	b	160fc <_start@@Base+0x1afc>
   16130:	mov	r2, #3
   16134:	movw	r1, #60724	; 0xed34
   16138:	movt	r1, #3
   1613c:	bl	33134 <flatcc_json_printer_enum@@Base>
   16140:	b	160fc <_start@@Base+0x1afc>
   16144:	mov	r2, #4
   16148:	movw	r1, #13596	; 0x351c
   1614c:	movt	r1, #4
   16150:	bl	33134 <flatcc_json_printer_enum@@Base>
   16154:	b	160fc <_start@@Base+0x1afc>
   16158:	strd	r4, [sp, #-20]!	; 0xffffffec
   1615c:	strd	r6, [sp, #8]
   16160:	str	lr, [sp, #16]
   16164:	sub	sp, sp, #20
   16168:	mov	r6, r0
   1616c:	mov	r7, r1
   16170:	movw	r5, #25112	; 0x6218
   16174:	movt	r5, #1
   16178:	str	r5, [sp, #8]
   1617c:	mov	r4, #2
   16180:	str	r4, [sp, #4]
   16184:	mov	r3, #5
   16188:	str	r3, [sp]
   1618c:	movw	r3, #60008	; 0xea68
   16190:	movt	r3, #3
   16194:	mov	r2, #0
   16198:	bl	35658 <flatcc_json_printer_int8_enum_field@@Base>
   1619c:	str	r5, [sp, #8]
   161a0:	str	r4, [sp, #4]
   161a4:	mov	r3, #6
   161a8:	str	r3, [sp]
   161ac:	movw	r3, #60728	; 0xed38
   161b0:	movt	r3, #3
   161b4:	mov	r2, #1
   161b8:	mov	r1, r7
   161bc:	mov	r0, r6
   161c0:	bl	35658 <flatcc_json_printer_int8_enum_field@@Base>
   161c4:	str	r4, [sp, #4]
   161c8:	str	r4, [sp]
   161cc:	movw	r3, #60736	; 0xed40
   161d0:	movt	r3, #3
   161d4:	mov	r2, r4
   161d8:	mov	r1, r7
   161dc:	mov	r0, r6
   161e0:	bl	33794 <flatcc_json_printer_uint8_field@@Base>
   161e4:	str	r4, [sp, #4]
   161e8:	mov	r2, #3
   161ec:	str	r2, [sp]
   161f0:	movw	r3, #60740	; 0xed44
   161f4:	movt	r3, #3
   161f8:	mov	r1, r7
   161fc:	mov	r0, r6
   16200:	bl	33794 <flatcc_json_printer_uint8_field@@Base>
   16204:	add	sp, sp, #20
   16208:	ldrd	r4, [sp]
   1620c:	ldrd	r6, [sp, #8]
   16210:	add	sp, sp, #16
   16214:	pop	{pc}		; (ldr pc, [sp], #4)
   16218:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1621c:	strd	r6, [sp, #8]
   16220:	str	r8, [sp, #16]
   16224:	str	lr, [sp, #20]
   16228:	mov	r5, r0
   1622c:	uxtb	r4, r1
   16230:	tst	r4, #244	; 0xf4
   16234:	movne	r3, #1
   16238:	moveq	r3, #0
   1623c:	cmp	r4, #0
   16240:	moveq	r3, #1
   16244:	cmp	r3, #0
   16248:	beq	16264 <_start@@Base+0x1c64>
   1624c:	bl	33014 <flatcc_json_printer_int8@@Base>
   16250:	ldrd	r4, [sp]
   16254:	ldrd	r6, [sp, #8]
   16258:	ldr	r8, [sp, #16]
   1625c:	add	sp, sp, #20
   16260:	pop	{pc}		; (ldr pc, [sp], #4)
   16264:	sub	r3, r4, #1
   16268:	tst	r3, r4
   1626c:	movne	r6, #1
   16270:	moveq	r6, #0
   16274:	mov	r1, r6
   16278:	bl	331cc <flatcc_json_printer_delimit_enum_flags@@Base>
   1627c:	tst	r4, #1
   16280:	moveq	r1, #0
   16284:	bne	162a8 <_start@@Base+0x1ca8>
   16288:	tst	r4, #2
   1628c:	bne	162c8 <_start@@Base+0x1cc8>
   16290:	tst	r4, #8
   16294:	bne	162e8 <_start@@Base+0x1ce8>
   16298:	mov	r1, r6
   1629c:	mov	r0, r5
   162a0:	bl	331cc <flatcc_json_printer_delimit_enum_flags@@Base>
   162a4:	b	16250 <_start@@Base+0x1c50>
   162a8:	mov	r3, #3
   162ac:	movw	r2, #60744	; 0xed48
   162b0:	movt	r2, #3
   162b4:	mov	r1, #0
   162b8:	mov	r0, r5
   162bc:	bl	33200 <flatcc_json_printer_enum_flag@@Base>
   162c0:	mov	r1, #1
   162c4:	b	16288 <_start@@Base+0x1c88>
   162c8:	add	r7, r1, #1
   162cc:	mov	r3, #5
   162d0:	movw	r2, #60748	; 0xed4c
   162d4:	movt	r2, #3
   162d8:	mov	r0, r5
   162dc:	bl	33200 <flatcc_json_printer_enum_flag@@Base>
   162e0:	mov	r1, r7
   162e4:	b	16290 <_start@@Base+0x1c90>
   162e8:	mov	r3, #4
   162ec:	movw	r2, #60756	; 0xed54
   162f0:	movt	r2, #3
   162f4:	mov	r0, r5
   162f8:	bl	33200 <flatcc_json_printer_enum_flag@@Base>
   162fc:	b	16298 <_start@@Base+0x1c98>
   16300:	strd	r4, [sp, #-16]!
   16304:	str	r6, [sp, #8]
   16308:	str	lr, [sp, #12]
   1630c:	sub	sp, sp, #16
   16310:	mov	r5, r0
   16314:	mov	r4, r1
   16318:	mov	r6, #1
   1631c:	str	r6, [sp, #4]
   16320:	movw	r3, #61220	; 0xef24
   16324:	movt	r3, #3
   16328:	str	r3, [sp]
   1632c:	mov	r3, #0
   16330:	mov	r2, r1
   16334:	mov	r1, r3
   16338:	bl	36f6c <flatcc_json_printer_float_struct_field@@Base>
   1633c:	str	r6, [sp, #4]
   16340:	movw	r3, #60076	; 0xeaac
   16344:	movt	r3, #3
   16348:	str	r3, [sp]
   1634c:	mov	r3, #4
   16350:	mov	r2, r4
   16354:	mov	r1, r6
   16358:	mov	r0, r5
   1635c:	bl	36f6c <flatcc_json_printer_float_struct_field@@Base>
   16360:	str	r6, [sp, #4]
   16364:	movw	r3, #60764	; 0xed5c
   16368:	movt	r3, #3
   1636c:	str	r3, [sp]
   16370:	mov	r3, #8
   16374:	mov	r2, r4
   16378:	mov	r1, #2
   1637c:	mov	r0, r5
   16380:	bl	36f6c <flatcc_json_printer_float_struct_field@@Base>
   16384:	mov	r6, #5
   16388:	str	r6, [sp, #4]
   1638c:	movw	r3, #60768	; 0xed60
   16390:	movt	r3, #3
   16394:	str	r3, [sp]
   16398:	mov	r3, #16
   1639c:	mov	r2, r4
   163a0:	mov	r1, #3
   163a4:	mov	r0, r5
   163a8:	bl	37108 <flatcc_json_printer_double_struct_field@@Base>
   163ac:	movw	r3, #25112	; 0x6218
   163b0:	movt	r3, #1
   163b4:	str	r3, [sp, #8]
   163b8:	str	r6, [sp, #4]
   163bc:	movw	r3, #60776	; 0xed68
   163c0:	movt	r3, #3
   163c4:	str	r3, [sp]
   163c8:	mov	r3, #24
   163cc:	mov	r2, r4
   163d0:	mov	r1, #4
   163d4:	mov	r0, r5
   163d8:	bl	3798c <flatcc_json_printer_int8_enum_struct_field@@Base>
   163dc:	movw	r3, #23656	; 0x5c68
   163e0:	movt	r3, #1
   163e4:	str	r3, [sp, #8]
   163e8:	str	r6, [sp, #4]
   163ec:	movw	r3, #60784	; 0xed70
   163f0:	movt	r3, #3
   163f4:	str	r3, [sp]
   163f8:	mov	r3, #26
   163fc:	mov	r2, r4
   16400:	mov	r1, r6
   16404:	mov	r0, r5
   16408:	bl	3d290 <flatcc_json_printer_embedded_struct_field@@Base>
   1640c:	add	sp, sp, #16
   16410:	ldrd	r4, [sp]
   16414:	ldr	r6, [sp, #8]
   16418:	add	sp, sp, #12
   1641c:	pop	{pc}		; (ldr pc, [sp], #4)
   16420:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16424:	strd	r6, [sp, #8]
   16428:	strd	r8, [sp, #16]
   1642c:	str	lr, [sp, #24]
   16430:	sub	sp, sp, #12
   16434:	mov	r8, r0
   16438:	mov	r4, r1
   1643c:	mov	r9, r2
   16440:	mov	r5, r3
   16444:	mov	r1, r2
   16448:	mov	r0, r4
   1644c:	bl	146f0 <_start@@Base+0xf0>
   16450:	add	r3, pc, #792	; 0x318
   16454:	ldrd	r2, [r3]
   16458:	cmp	r1, r3
   1645c:	cmpeq	r0, r2
   16460:	bhi	165bc <_start@@Base+0x1fbc>
   16464:	add	r3, pc, #780	; 0x30c
   16468:	ldrd	r2, [r3]
   1646c:	cmp	r1, r3
   16470:	cmpeq	r0, r2
   16474:	bhi	164f8 <_start@@Base+0x1ef8>
   16478:	and	r2, r0, #-16777216	; 0xff000000
   1647c:	mov	r3, r1
   16480:	add	r1, pc, #760	; 0x2f8
   16484:	ldrd	r0, [r1]
   16488:	cmp	r3, r1
   1648c:	cmpeq	r2, r0
   16490:	beq	164b0 <_start@@Base+0x1eb0>
   16494:	mov	r0, r4
   16498:	add	sp, sp, #12
   1649c:	ldrd	r4, [sp]
   164a0:	ldrd	r6, [sp, #8]
   164a4:	ldrd	r8, [sp, #16]
   164a8:	add	sp, sp, #24
   164ac:	pop	{pc}		; (ldr pc, [sp], #4)
   164b0:	ldr	r3, [sp, #44]	; 0x2c
   164b4:	str	r3, [sp]
   164b8:	mov	r3, #5
   164bc:	mov	r2, r9
   164c0:	mov	r1, r4
   164c4:	mov	r0, r8
   164c8:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   164cc:	cmp	r4, r0
   164d0:	moveq	r4, r0
   164d4:	beq	16494 <_start@@Base+0x1e94>
   164d8:	mov	r2, #9
   164dc:	mov	r3, #0
   164e0:	ldr	r1, [sp, #40]	; 0x28
   164e4:	strd	r2, [r1]
   164e8:	mov	r3, #0
   164ec:	str	r3, [r5]
   164f0:	mov	r4, r0
   164f4:	b	16494 <_start@@Base+0x1e94>
   164f8:	and	r2, r0, #-16777216	; 0xff000000
   164fc:	add	r7, pc, #644	; 0x284
   16500:	ldrd	r6, [r7]
   16504:	cmp	r1, r7
   16508:	cmpeq	r2, r6
   1650c:	beq	16574 <_start@@Base+0x1f74>
   16510:	bic	r2, r0, #255	; 0xff
   16514:	mov	r3, r1
   16518:	add	r1, pc, #624	; 0x270
   1651c:	ldrd	r0, [r1]
   16520:	cmp	r3, r1
   16524:	cmpeq	r2, r0
   16528:	bne	16494 <_start@@Base+0x1e94>
   1652c:	ldr	r3, [sp, #44]	; 0x2c
   16530:	str	r3, [sp]
   16534:	mov	r3, #7
   16538:	mov	r2, r9
   1653c:	mov	r1, r4
   16540:	mov	r0, r8
   16544:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16548:	cmp	r4, r0
   1654c:	moveq	r4, r0
   16550:	beq	16494 <_start@@Base+0x1e94>
   16554:	mov	r2, #10
   16558:	mov	r3, #0
   1655c:	ldr	r1, [sp, #40]	; 0x28
   16560:	strd	r2, [r1]
   16564:	mov	r3, #0
   16568:	str	r3, [r5]
   1656c:	mov	r4, r0
   16570:	b	16494 <_start@@Base+0x1e94>
   16574:	ldr	r3, [sp, #44]	; 0x2c
   16578:	str	r3, [sp]
   1657c:	mov	r3, #5
   16580:	mov	r2, r9
   16584:	mov	r1, r4
   16588:	mov	r0, r8
   1658c:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16590:	cmp	r4, r0
   16594:	moveq	r4, r0
   16598:	beq	16494 <_start@@Base+0x1e94>
   1659c:	mov	r2, #2
   165a0:	mov	r3, #0
   165a4:	ldr	r1, [sp, #40]	; 0x28
   165a8:	strd	r2, [r1]
   165ac:	mov	r3, #0
   165b0:	str	r3, [r5]
   165b4:	mov	r4, r0
   165b8:	b	16494 <_start@@Base+0x1e94>
   165bc:	add	r3, pc, #468	; 0x1d4
   165c0:	ldrd	r2, [r3]
   165c4:	cmp	r1, r3
   165c8:	cmpeq	r0, r2
   165cc:	bhi	16634 <_start@@Base+0x2034>
   165d0:	mov	r2, #0
   165d4:	mov	r3, r1
   165d8:	add	r1, pc, #448	; 0x1c0
   165dc:	ldrd	r0, [r1]
   165e0:	cmp	r3, r1
   165e4:	cmpeq	r2, r0
   165e8:	bne	16494 <_start@@Base+0x1e94>
   165ec:	ldr	r3, [sp, #44]	; 0x2c
   165f0:	str	r3, [sp]
   165f4:	mov	r3, #4
   165f8:	mov	r2, r9
   165fc:	mov	r1, r4
   16600:	mov	r0, r8
   16604:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16608:	cmp	r4, r0
   1660c:	moveq	r4, r0
   16610:	beq	16494 <_start@@Base+0x1e94>
   16614:	mov	r2, #0
   16618:	mov	r3, #0
   1661c:	ldr	r1, [sp, #40]	; 0x28
   16620:	strd	r2, [r1]
   16624:	mov	r3, #0
   16628:	str	r3, [r5]
   1662c:	mov	r4, r0
   16630:	b	16494 <_start@@Base+0x1e94>
   16634:	add	r3, pc, #364	; 0x16c
   16638:	ldrd	r2, [r3]
   1663c:	cmp	r1, r3
   16640:	cmpeq	r0, r2
   16644:	bhi	166ac <_start@@Base+0x20ac>
   16648:	and	r2, r0, #-16777216	; 0xff000000
   1664c:	mov	r3, r1
   16650:	add	r1, pc, #344	; 0x158
   16654:	ldrd	r0, [r1]
   16658:	cmp	r3, r1
   1665c:	cmpeq	r2, r0
   16660:	bne	16494 <_start@@Base+0x1e94>
   16664:	ldr	r3, [sp, #44]	; 0x2c
   16668:	str	r3, [sp]
   1666c:	mov	r3, #5
   16670:	mov	r2, r9
   16674:	mov	r1, r4
   16678:	mov	r0, r8
   1667c:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16680:	cmp	r4, r0
   16684:	moveq	r4, r0
   16688:	beq	16494 <_start@@Base+0x1e94>
   1668c:	mov	r2, #11
   16690:	mov	r3, #0
   16694:	ldr	r1, [sp, #40]	; 0x28
   16698:	strd	r2, [r1]
   1669c:	mov	r3, #0
   166a0:	str	r3, [r5]
   166a4:	mov	r4, r0
   166a8:	b	16494 <_start@@Base+0x1e94>
   166ac:	lsr	r2, r0, #16
   166b0:	lsl	r2, r2, #16
   166b4:	add	r7, pc, #252	; 0xfc
   166b8:	ldrd	r6, [r7]
   166bc:	cmp	r1, r7
   166c0:	cmpeq	r2, r6
   166c4:	beq	16724 <_start@@Base+0x2124>
   166c8:	add	r3, pc, #240	; 0xf0
   166cc:	ldrd	r2, [r3]
   166d0:	cmp	r1, r3
   166d4:	cmpeq	r0, r2
   166d8:	bne	16494 <_start@@Base+0x1e94>
   166dc:	ldr	r3, [sp, #44]	; 0x2c
   166e0:	str	r3, [sp]
   166e4:	mov	r3, #8
   166e8:	mov	r2, r9
   166ec:	mov	r1, r4
   166f0:	mov	r0, r8
   166f4:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   166f8:	cmp	r4, r0
   166fc:	moveq	r4, r0
   16700:	beq	16494 <_start@@Base+0x1e94>
   16704:	mov	r2, #8
   16708:	mov	r3, #0
   1670c:	ldr	r1, [sp, #40]	; 0x28
   16710:	strd	r2, [r1]
   16714:	mov	r3, #0
   16718:	str	r3, [r5]
   1671c:	mov	r4, r0
   16720:	b	16494 <_start@@Base+0x1e94>
   16724:	ldr	r3, [sp, #44]	; 0x2c
   16728:	str	r3, [sp]
   1672c:	mov	r3, #6
   16730:	mov	r2, r9
   16734:	mov	r1, r4
   16738:	mov	r0, r8
   1673c:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16740:	cmp	r4, r0
   16744:	moveq	r4, r0
   16748:	beq	16494 <_start@@Base+0x1e94>
   1674c:	mov	r2, #255	; 0xff
   16750:	mov	r3, #0
   16754:	ldr	r1, [sp, #40]	; 0x28
   16758:	strd	r2, [r1]
   1675c:	mov	r3, #0
   16760:	str	r3, [r5]
   16764:	mov	r4, r0
   16768:	b	16494 <_start@@Base+0x1e94>
   1676c:	nop	{0}
   16770:			; <UNDEFINED> instruction: 0xffffffff
   16774:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16778:			; <UNDEFINED> instruction: 0x46616dff
   1677c:	rsbmi	r6, pc, #428	; 0x1ac
   16780:	strvs	r0, [r0, #-0]
   16784:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16788:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1678c:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16790:	strbtmi	r6, [r1], -r0, lsl #28
   16794:	rsbmi	r6, pc, #428	; 0x1ac
   16798:	ldrshvc	pc, [pc, #255]	; 1689f <_start@@Base+0x229f>	; <UNPREDICTABLE>
   1679c:	svcmi	0x00746865
   167a0:	andeq	r0, r0, r0
   167a4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   167a8:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   167ac:	rsbpl	r7, r1, #117	; 0x75
   167b0:	andvc	r0, r0, #0
   167b4:	svcmi	0x00746865
   167b8:	strbvs	r0, [r4, #-0]!
   167bc:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   167c0:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   167c4:	rsbpl	r7, r1, #117	; 0x75
   167c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   167cc:	strd	r6, [sp, #8]
   167d0:	str	r8, [sp, #16]
   167d4:	str	lr, [sp, #20]
   167d8:	sub	sp, sp, #8
   167dc:	mov	r6, r0
   167e0:	mov	r4, r1
   167e4:	mov	r5, r2
   167e8:	mov	r7, r3
   167ec:	mov	r1, r2
   167f0:	mov	r0, r4
   167f4:	bl	146f0 <_start@@Base+0xf0>
   167f8:	add	r3, pc, #152	; 0x98
   167fc:	ldrd	r2, [r3]
   16800:	cmp	r1, r3
   16804:	cmpeq	r0, r2
   16808:	bne	16878 <_start@@Base+0x2278>
   1680c:	add	r8, r4, #8
   16810:	mov	r1, r5
   16814:	mov	r0, r8
   16818:	bl	146f0 <_start@@Base+0xf0>
   1681c:	mov	r2, #0
   16820:	and	r3, r1, #-16777216	; 0xff000000
   16824:	cmp	r3, #1912602624	; 0x72000000
   16828:	cmpeq	r2, #0
   1682c:	bne	16878 <_start@@Base+0x2278>
   16830:	sub	r3, r5, r8
   16834:	cmp	r3, #1
   16838:	ble	16878 <_start@@Base+0x2278>
   1683c:	ldrb	r3, [r4, #9]
   16840:	cmp	r3, #46	; 0x2e
   16844:	bne	16878 <_start@@Base+0x2278>
   16848:	add	r1, r4, #10
   1684c:	cmp	r8, r1
   16850:	beq	16878 <_start@@Base+0x2278>
   16854:	ldr	r3, [sp, #36]	; 0x24
   16858:	str	r3, [sp, #4]
   1685c:	ldr	r3, [sp, #32]
   16860:	str	r3, [sp]
   16864:	mov	r3, r7
   16868:	mov	r2, r5
   1686c:	mov	r0, r6
   16870:	bl	16420 <_start@@Base+0x1e20>
   16874:	mov	r4, r0
   16878:	mov	r0, r4
   1687c:	add	sp, sp, #8
   16880:	ldrd	r4, [sp]
   16884:	ldrd	r6, [sp, #8]
   16888:	ldr	r8, [sp, #16]
   1688c:	add	sp, sp, #20
   16890:	pop	{pc}		; (ldr pc, [sp], #4)
   16894:	nop	{0}
   16898:	cmnvs	r3, r5, ror #8
   1689c:	cmnmi	r8, #-2147483620	; 0x8000001c
   168a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   168a4:	strd	r6, [sp, #8]
   168a8:	strd	r8, [sp, #16]
   168ac:	str	lr, [sp, #24]
   168b0:	sub	sp, sp, #12
   168b4:	mov	r8, r0
   168b8:	mov	r4, r1
   168bc:	mov	r9, r2
   168c0:	mov	r5, r3
   168c4:	mov	r1, r2
   168c8:	mov	r0, r4
   168cc:	bl	146f0 <_start@@Base+0xf0>
   168d0:	add	r3, pc, #584	; 0x248
   168d4:	ldrd	r2, [r3]
   168d8:	cmp	r1, r3
   168dc:	cmpeq	r0, r2
   168e0:	bhi	16964 <_start@@Base+0x2364>
   168e4:	mov	r2, #0
   168e8:	bic	r3, r1, #255	; 0xff
   168ec:	add	r1, pc, #564	; 0x234
   168f0:	ldrd	r0, [r1]
   168f4:	cmp	r3, r1
   168f8:	cmpeq	r2, r0
   168fc:	beq	1691c <_start@@Base+0x231c>
   16900:	mov	r0, r4
   16904:	add	sp, sp, #12
   16908:	ldrd	r4, [sp]
   1690c:	ldrd	r6, [sp, #8]
   16910:	ldrd	r8, [sp, #16]
   16914:	add	sp, sp, #24
   16918:	pop	{pc}		; (ldr pc, [sp], #4)
   1691c:	ldr	r3, [sp, #44]	; 0x2c
   16920:	str	r3, [sp]
   16924:	mov	r3, #3
   16928:	mov	r2, r9
   1692c:	mov	r1, r4
   16930:	mov	r0, r8
   16934:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16938:	cmp	r4, r0
   1693c:	moveq	r4, r0
   16940:	beq	16900 <_start@@Base+0x2300>
   16944:	mov	r2, #4
   16948:	mov	r3, #0
   1694c:	ldr	r1, [sp, #40]	; 0x28
   16950:	strd	r2, [r1]
   16954:	mov	r3, #0
   16958:	str	r3, [r5]
   1695c:	mov	r4, r0
   16960:	b	16900 <_start@@Base+0x2300>
   16964:	add	r3, pc, #452	; 0x1c4
   16968:	ldrd	r2, [r3]
   1696c:	cmp	r1, r3
   16970:	cmpeq	r0, r2
   16974:	beq	16a4c <_start@@Base+0x244c>
   16978:	bic	r2, r0, #255	; 0xff
   1697c:	add	r7, pc, #436	; 0x1b4
   16980:	ldrd	r6, [r7]
   16984:	cmp	r1, r7
   16988:	cmpeq	r2, r6
   1698c:	beq	16a90 <_start@@Base+0x2490>
   16990:	mov	r2, #0
   16994:	add	r7, pc, #420	; 0x1a4
   16998:	ldrd	r6, [r7]
   1699c:	cmp	r1, r7
   169a0:	cmpeq	r2, r6
   169a4:	beq	16ad4 <_start@@Base+0x24d4>
   169a8:	add	r3, pc, #408	; 0x198
   169ac:	ldrd	r2, [r3]
   169b0:	cmp	r1, r3
   169b4:	cmpeq	r0, r2
   169b8:	bne	16900 <_start@@Base+0x2300>
   169bc:	mov	r1, r9
   169c0:	add	r0, r4, #8
   169c4:	bl	146f0 <_start@@Base+0xf0>
   169c8:	add	r3, pc, #384	; 0x180
   169cc:	ldrd	r2, [r3]
   169d0:	cmp	r1, r3
   169d4:	cmpeq	r0, r2
   169d8:	bne	16900 <_start@@Base+0x2300>
   169dc:	add	r6, r4, #16
   169e0:	mov	r1, r9
   169e4:	mov	r0, r6
   169e8:	bl	146f0 <_start@@Base+0xf0>
   169ec:	bic	r2, r0, #255	; 0xff
   169f0:	mov	r3, r1
   169f4:	add	r1, pc, #348	; 0x15c
   169f8:	ldrd	r0, [r1]
   169fc:	cmp	r3, r1
   16a00:	cmpeq	r2, r0
   16a04:	bne	16900 <_start@@Base+0x2300>
   16a08:	ldr	r3, [sp, #44]	; 0x2c
   16a0c:	str	r3, [sp]
   16a10:	mov	r3, #7
   16a14:	mov	r2, r9
   16a18:	mov	r1, r6
   16a1c:	mov	r0, r8
   16a20:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16a24:	cmp	r6, r0
   16a28:	beq	16900 <_start@@Base+0x2300>
   16a2c:	mov	r2, #2
   16a30:	mov	r3, #0
   16a34:	ldr	r1, [sp, #40]	; 0x28
   16a38:	strd	r2, [r1]
   16a3c:	mov	r3, #0
   16a40:	str	r3, [r5]
   16a44:	mov	r4, r0
   16a48:	b	16900 <_start@@Base+0x2300>
   16a4c:	ldr	r3, [sp, #44]	; 0x2c
   16a50:	str	r3, [sp]
   16a54:	mov	r3, #8
   16a58:	mov	r2, r9
   16a5c:	mov	r1, r4
   16a60:	mov	r0, r8
   16a64:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16a68:	cmp	r4, r0
   16a6c:	beq	16900 <_start@@Base+0x2300>
   16a70:	mov	r2, #3
   16a74:	mov	r3, #0
   16a78:	ldr	r1, [sp, #40]	; 0x28
   16a7c:	strd	r2, [r1]
   16a80:	mov	r3, #0
   16a84:	str	r3, [r5]
   16a88:	mov	r4, r0
   16a8c:	b	16900 <_start@@Base+0x2300>
   16a90:	ldr	r3, [sp, #44]	; 0x2c
   16a94:	str	r3, [sp]
   16a98:	mov	r3, #7
   16a9c:	mov	r2, r9
   16aa0:	mov	r1, r4
   16aa4:	mov	r0, r8
   16aa8:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16aac:	cmp	r4, r0
   16ab0:	beq	16900 <_start@@Base+0x2300>
   16ab4:	mov	r2, #1
   16ab8:	mov	r3, #0
   16abc:	ldr	r1, [sp, #40]	; 0x28
   16ac0:	strd	r2, [r1]
   16ac4:	mov	r3, #0
   16ac8:	str	r3, [r5]
   16acc:	mov	r4, r0
   16ad0:	b	16900 <_start@@Base+0x2300>
   16ad4:	ldr	r3, [sp, #44]	; 0x2c
   16ad8:	str	r3, [sp]
   16adc:	mov	r3, #4
   16ae0:	mov	r2, r9
   16ae4:	mov	r1, r4
   16ae8:	mov	r0, r8
   16aec:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16af0:	cmp	r4, r0
   16af4:	moveq	r4, r0
   16af8:	beq	16900 <_start@@Base+0x2300>
   16afc:	mov	r2, #0
   16b00:	mov	r3, #0
   16b04:	ldr	r1, [sp, #40]	; 0x28
   16b08:	strd	r2, [r1]
   16b0c:	mov	r3, #0
   16b10:	str	r3, [r5]
   16b14:	mov	r4, r0
   16b18:	b	16900 <_start@@Base+0x2300>
   16b1c:	nop	{0}
   16b20:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   16b24:	stclmi	14, cr6, [pc, #-460]!	; 16960 <_start@@Base+0x2360>
   16b28:	andeq	r0, r0, r0
   16b2c:	cmnmi	ip, r0, lsl #8
   16b30:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   16b34:	stclmi	14, cr6, [pc, #-460]!	; 16970 <_start@@Base+0x2370>
   16b38:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   16b3c:	stclmi	14, cr6, [pc, #-460]!	; 16978 <_start@@Base+0x2378>
   16b40:	andeq	r0, r0, r0
   16b44:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16b48:	cmnpl	r9, #112, 26	; 0x1c00
   16b4c:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16b50:	rsbvs	r6, ip, #364904448	; 0x15c00000
   16b54:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16b58:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   16b5c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16b60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16b64:	strd	r6, [sp, #8]
   16b68:	str	r8, [sp, #16]
   16b6c:	str	lr, [sp, #20]
   16b70:	sub	sp, sp, #8
   16b74:	mov	r6, r0
   16b78:	mov	r4, r1
   16b7c:	mov	r5, r2
   16b80:	mov	r7, r3
   16b84:	mov	r1, r2
   16b88:	mov	r0, r4
   16b8c:	bl	146f0 <_start@@Base+0xf0>
   16b90:	add	r3, pc, #280	; 0x118
   16b94:	ldrd	r2, [r3]
   16b98:	cmp	r1, r3
   16b9c:	cmpeq	r0, r2
   16ba0:	beq	16bdc <_start@@Base+0x25dc>
   16ba4:	mov	r2, #0
   16ba8:	mov	r3, r1
   16bac:	add	r1, pc, #260	; 0x104
   16bb0:	ldrd	r0, [r1]
   16bb4:	cmp	r3, r1
   16bb8:	cmpeq	r2, r0
   16bbc:	beq	16c64 <_start@@Base+0x2664>
   16bc0:	mov	r0, r4
   16bc4:	add	sp, sp, #8
   16bc8:	ldrd	r4, [sp]
   16bcc:	ldrd	r6, [sp, #8]
   16bd0:	ldr	r8, [sp, #16]
   16bd4:	add	sp, sp, #20
   16bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bdc:	mov	r1, r5
   16be0:	add	r0, r4, #8
   16be4:	bl	146f0 <_start@@Base+0xf0>
   16be8:	add	r3, pc, #208	; 0xd0
   16bec:	ldrd	r2, [r3]
   16bf0:	cmp	r1, r3
   16bf4:	cmpeq	r0, r2
   16bf8:	bne	16bc0 <_start@@Base+0x25c0>
   16bfc:	add	r8, r4, #16
   16c00:	mov	r1, r5
   16c04:	mov	r0, r8
   16c08:	bl	146f0 <_start@@Base+0xf0>
   16c0c:	mov	r2, #0
   16c10:	and	r3, r1, #-16777216	; 0xff000000
   16c14:	cmp	r3, #1694498816	; 0x65000000
   16c18:	cmpeq	r2, #0
   16c1c:	bne	16bc0 <_start@@Base+0x25c0>
   16c20:	ldr	r3, [sp, #36]	; 0x24
   16c24:	str	r3, [sp]
   16c28:	mov	r3, #1
   16c2c:	mov	r2, r5
   16c30:	mov	r1, r8
   16c34:	mov	r0, r6
   16c38:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16c3c:	cmp	r8, r0
   16c40:	beq	16bc0 <_start@@Base+0x25c0>
   16c44:	mov	r2, #1
   16c48:	mov	r3, #0
   16c4c:	ldr	r1, [sp, #32]
   16c50:	strd	r2, [r1]
   16c54:	mov	r3, #0
   16c58:	str	r3, [r7]
   16c5c:	mov	r4, r0
   16c60:	b	16bc0 <_start@@Base+0x25c0>
   16c64:	ldr	r3, [sp, #36]	; 0x24
   16c68:	str	r3, [sp]
   16c6c:	mov	r3, #4
   16c70:	mov	r2, r5
   16c74:	mov	r1, r4
   16c78:	mov	r0, r6
   16c7c:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16c80:	cmp	r4, r0
   16c84:	moveq	r4, r0
   16c88:	beq	16bc0 <_start@@Base+0x25c0>
   16c8c:	mov	r2, #0
   16c90:	mov	r3, #0
   16c94:	ldr	r1, [sp, #32]
   16c98:	strd	r2, [r1]
   16c9c:	mov	r3, #0
   16ca0:	str	r3, [r7]
   16ca4:	mov	r4, r0
   16ca8:	b	16bc0 <_start@@Base+0x25c0>
   16cac:	nop	{0}
   16cb0:	rsbvc	r6, r5, #116, 28	; 0x740
   16cb4:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   16cb8:	andeq	r0, r0, r0
   16cbc:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16cc0:	cmnvc	r0, #-1073741800	; 0xc0000018
   16cc4:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   16cc8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16ccc:	strd	r6, [sp, #8]
   16cd0:	strd	r8, [sp, #16]
   16cd4:	str	lr, [sp, #24]
   16cd8:	sub	sp, sp, #12
   16cdc:	mov	r8, r0
   16ce0:	mov	r4, r1
   16ce4:	mov	r9, r2
   16ce8:	mov	r5, r3
   16cec:	mov	r1, r2
   16cf0:	mov	r0, r4
   16cf4:	bl	146f0 <_start@@Base+0xf0>
   16cf8:	add	r3, pc, #344	; 0x158
   16cfc:	ldrd	r2, [r3]
   16d00:	cmp	r1, r3
   16d04:	cmpeq	r0, r2
   16d08:	bhi	16d8c <_start@@Base+0x278c>
   16d0c:	mov	r2, #0
   16d10:	mov	r3, r1
   16d14:	add	r1, pc, #324	; 0x144
   16d18:	ldrd	r0, [r1]
   16d1c:	cmp	r3, r1
   16d20:	cmpeq	r2, r0
   16d24:	beq	16d44 <_start@@Base+0x2744>
   16d28:	mov	r0, r4
   16d2c:	add	sp, sp, #12
   16d30:	ldrd	r4, [sp]
   16d34:	ldrd	r6, [sp, #8]
   16d38:	ldrd	r8, [sp, #16]
   16d3c:	add	sp, sp, #24
   16d40:	pop	{pc}		; (ldr pc, [sp], #4)
   16d44:	ldr	r3, [sp, #44]	; 0x2c
   16d48:	str	r3, [sp]
   16d4c:	mov	r3, #4
   16d50:	mov	r2, r9
   16d54:	mov	r1, r4
   16d58:	mov	r0, r8
   16d5c:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16d60:	cmp	r4, r0
   16d64:	moveq	r4, r0
   16d68:	beq	16d28 <_start@@Base+0x2728>
   16d6c:	mov	r2, #3
   16d70:	mov	r3, #0
   16d74:	ldr	r1, [sp, #40]	; 0x28
   16d78:	strd	r2, [r1]
   16d7c:	mov	r3, #0
   16d80:	str	r3, [r5]
   16d84:	mov	r4, r0
   16d88:	b	16d28 <_start@@Base+0x2728>
   16d8c:	lsr	r2, r0, #16
   16d90:	lsl	r2, r2, #16
   16d94:	add	r7, pc, #204	; 0xcc
   16d98:	ldrd	r6, [r7]
   16d9c:	cmp	r1, r7
   16da0:	cmpeq	r2, r6
   16da4:	beq	16e0c <_start@@Base+0x280c>
   16da8:	mov	r2, #0
   16dac:	mov	r3, r1
   16db0:	add	r1, pc, #184	; 0xb8
   16db4:	ldrd	r0, [r1]
   16db8:	cmp	r3, r1
   16dbc:	cmpeq	r2, r0
   16dc0:	bne	16d28 <_start@@Base+0x2728>
   16dc4:	ldr	r3, [sp, #44]	; 0x2c
   16dc8:	str	r3, [sp]
   16dcc:	mov	r3, #4
   16dd0:	mov	r2, r9
   16dd4:	mov	r1, r4
   16dd8:	mov	r0, r8
   16ddc:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16de0:	cmp	r4, r0
   16de4:	moveq	r4, r0
   16de8:	beq	16d28 <_start@@Base+0x2728>
   16dec:	add	r3, pc, #132	; 0x84
   16df0:	ldrd	r2, [r3]
   16df4:	ldr	r1, [sp, #40]	; 0x28
   16df8:	strd	r2, [r1]
   16dfc:	mov	r3, #0
   16e00:	str	r3, [r5]
   16e04:	mov	r4, r0
   16e08:	b	16d28 <_start@@Base+0x2728>
   16e0c:	ldr	r3, [sp, #44]	; 0x2c
   16e10:	str	r3, [sp]
   16e14:	mov	r3, #6
   16e18:	mov	r2, r9
   16e1c:	mov	r1, r4
   16e20:	mov	r0, r8
   16e24:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16e28:	cmp	r4, r0
   16e2c:	moveq	r4, r0
   16e30:	beq	16d28 <_start@@Base+0x2728>
   16e34:	mvn	r2, #1
   16e38:	mvn	r3, #0
   16e3c:	ldr	r1, [sp, #40]	; 0x28
   16e40:	strd	r2, [r1]
   16e44:	mov	r3, #1
   16e48:	str	r3, [r5]
   16e4c:	mov	r4, r0
   16e50:	b	16d28 <_start@@Base+0x2728>
   16e54:	nop	{0}
   16e58:			; <UNDEFINED> instruction: 0xffffffff
   16e5c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16e60:	andeq	r0, r0, r0
   16e64:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16e68:	strbvs	r0, [r7, #-0]!
   16e6c:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16e70:	andeq	r0, r0, r0
   16e74:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16e78:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16e7c:	andeq	r0, r0, r0
   16e80:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16e84:	strd	r6, [sp, #8]
   16e88:	strd	r8, [sp, #16]
   16e8c:	str	lr, [sp, #24]
   16e90:	sub	sp, sp, #12
   16e94:	mov	r8, r0
   16e98:	mov	r4, r1
   16e9c:	mov	r9, r2
   16ea0:	mov	r5, r3
   16ea4:	mov	r1, r2
   16ea8:	mov	r0, r4
   16eac:	bl	146f0 <_start@@Base+0xf0>
   16eb0:	add	r3, pc, #464	; 0x1d0
   16eb4:	ldrd	r2, [r3]
   16eb8:	cmp	r1, r3
   16ebc:	cmpeq	r0, r2
   16ec0:	bhi	16f44 <_start@@Base+0x2944>
   16ec4:	mov	r2, #0
   16ec8:	mov	r3, r1
   16ecc:	add	r1, pc, #444	; 0x1bc
   16ed0:	ldrd	r0, [r1]
   16ed4:	cmp	r3, r1
   16ed8:	cmpeq	r2, r0
   16edc:	beq	16efc <_start@@Base+0x28fc>
   16ee0:	mov	r0, r4
   16ee4:	add	sp, sp, #12
   16ee8:	ldrd	r4, [sp]
   16eec:	ldrd	r6, [sp, #8]
   16ef0:	ldrd	r8, [sp, #16]
   16ef4:	add	sp, sp, #24
   16ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   16efc:	ldr	r3, [sp, #44]	; 0x2c
   16f00:	str	r3, [sp]
   16f04:	mov	r3, #4
   16f08:	mov	r2, r9
   16f0c:	mov	r1, r4
   16f10:	mov	r0, r8
   16f14:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16f18:	cmp	r4, r0
   16f1c:	moveq	r4, r0
   16f20:	beq	16ee0 <_start@@Base+0x28e0>
   16f24:	mov	r2, #2
   16f28:	mov	r3, #0
   16f2c:	ldr	r1, [sp, #40]	; 0x28
   16f30:	strd	r2, [r1]
   16f34:	mov	r3, #0
   16f38:	str	r3, [r5]
   16f3c:	mov	r4, r0
   16f40:	b	16ee0 <_start@@Base+0x28e0>
   16f44:	add	r3, pc, #332	; 0x14c
   16f48:	ldrd	r2, [r3]
   16f4c:	cmp	r1, r3
   16f50:	cmpeq	r0, r2
   16f54:	bhi	16fbc <_start@@Base+0x29bc>
   16f58:	mov	r2, #0
   16f5c:	mov	r3, r1
   16f60:	add	r1, pc, #312	; 0x138
   16f64:	ldrd	r0, [r1]
   16f68:	cmp	r3, r1
   16f6c:	cmpeq	r2, r0
   16f70:	bne	16ee0 <_start@@Base+0x28e0>
   16f74:	ldr	r3, [sp, #44]	; 0x2c
   16f78:	str	r3, [sp]
   16f7c:	mov	r3, #4
   16f80:	mov	r2, r9
   16f84:	mov	r1, r4
   16f88:	mov	r0, r8
   16f8c:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   16f90:	cmp	r4, r0
   16f94:	moveq	r4, r0
   16f98:	beq	16ee0 <_start@@Base+0x28e0>
   16f9c:	mov	r2, #42	; 0x2a
   16fa0:	mov	r3, #0
   16fa4:	ldr	r1, [sp, #40]	; 0x28
   16fa8:	strd	r2, [r1]
   16fac:	mov	r3, #0
   16fb0:	str	r3, [r5]
   16fb4:	mov	r4, r0
   16fb8:	b	16ee0 <_start@@Base+0x28e0>
   16fbc:	bic	r2, r0, #255	; 0xff
   16fc0:	add	r7, pc, #224	; 0xe0
   16fc4:	ldrd	r6, [r7]
   16fc8:	cmp	r1, r7
   16fcc:	cmpeq	r2, r6
   16fd0:	beq	1703c <_start@@Base+0x2a3c>
   16fd4:	lsr	r2, r0, #16
   16fd8:	lsl	r2, r2, #16
   16fdc:	mov	r3, r1
   16fe0:	add	r1, pc, #200	; 0xc8
   16fe4:	ldrd	r0, [r1]
   16fe8:	cmp	r3, r1
   16fec:	cmpeq	r2, r0
   16ff0:	bne	16ee0 <_start@@Base+0x28e0>
   16ff4:	ldr	r3, [sp, #44]	; 0x2c
   16ff8:	str	r3, [sp]
   16ffc:	mov	r3, #6
   17000:	mov	r2, r9
   17004:	mov	r1, r4
   17008:	mov	r0, r8
   1700c:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   17010:	cmp	r4, r0
   17014:	moveq	r4, r0
   17018:	beq	16ee0 <_start@@Base+0x28e0>
   1701c:	mvn	r2, #1
   17020:	mvn	r3, #0
   17024:	ldr	r1, [sp, #40]	; 0x28
   17028:	strd	r2, [r1]
   1702c:	mov	r3, #1
   17030:	str	r3, [r5]
   17034:	mov	r4, r0
   17038:	b	16ee0 <_start@@Base+0x28e0>
   1703c:	ldr	r3, [sp, #44]	; 0x2c
   17040:	str	r3, [sp]
   17044:	mov	r3, #7
   17048:	mov	r2, r9
   1704c:	mov	r1, r4
   17050:	mov	r0, r8
   17054:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   17058:	cmp	r4, r0
   1705c:	moveq	r4, r0
   17060:	beq	16ee0 <_start@@Base+0x28e0>
   17064:	mvn	r2, #0
   17068:	mvn	r3, #0
   1706c:	ldr	r1, [sp, #40]	; 0x28
   17070:	strd	r2, [r1]
   17074:	mov	r3, #1
   17078:	str	r3, [r5]
   1707c:	mov	r4, r0
   17080:	b	16ee0 <_start@@Base+0x28e0>
   17084:	nop	{0}
   17088:			; <UNDEFINED> instruction: 0xffffffff
   1708c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17090:	andeq	r0, r0, r0
   17094:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17098:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1709c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   170a0:	andeq	r0, r0, r0
   170a4:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   170a8:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   170ac:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   170b0:	strbvs	r0, [r7, #-0]!
   170b4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   170b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   170bc:	strd	r6, [sp, #8]
   170c0:	str	lr, [sp, #16]
   170c4:	sub	sp, sp, #12
   170c8:	mov	r6, r0
   170cc:	mov	r4, r1
   170d0:	mov	r5, r2
   170d4:	mov	r7, r3
   170d8:	mov	r1, r2
   170dc:	mov	r0, r4
   170e0:	bl	146f0 <_start@@Base+0xf0>
   170e4:	add	r3, pc, #332	; 0x14c
   170e8:	ldrd	r2, [r3]
   170ec:	cmp	r1, r3
   170f0:	cmpeq	r0, r2
   170f4:	bhi	17174 <_start@@Base+0x2b74>
   170f8:	mov	r2, #0
   170fc:	mov	r3, r1
   17100:	add	r1, pc, #312	; 0x138
   17104:	ldrd	r0, [r1]
   17108:	cmp	r3, r1
   1710c:	cmpeq	r2, r0
   17110:	beq	1712c <_start@@Base+0x2b2c>
   17114:	mov	r0, r4
   17118:	add	sp, sp, #12
   1711c:	ldrd	r4, [sp]
   17120:	ldrd	r6, [sp, #8]
   17124:	add	sp, sp, #16
   17128:	pop	{pc}		; (ldr pc, [sp], #4)
   1712c:	ldr	r3, [sp, #36]	; 0x24
   17130:	str	r3, [sp]
   17134:	mov	r3, #4
   17138:	mov	r2, r5
   1713c:	mov	r1, r4
   17140:	mov	r0, r6
   17144:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   17148:	cmp	r4, r0
   1714c:	moveq	r4, r0
   17150:	beq	17114 <_start@@Base+0x2b14>
   17154:	mvn	r2, #11
   17158:	mvn	r3, #0
   1715c:	ldr	r1, [sp, #32]
   17160:	strd	r2, [r1]
   17164:	mov	r3, #1
   17168:	str	r3, [r7]
   1716c:	mov	r4, r0
   17170:	b	17114 <_start@@Base+0x2b14>
   17174:	mov	r2, #0
   17178:	mov	r3, r1
   1717c:	add	r1, pc, #196	; 0xc4
   17180:	ldrd	r0, [r1]
   17184:	cmp	r3, r1
   17188:	cmpeq	r2, r0
   1718c:	beq	171ec <_start@@Base+0x2bec>
   17190:	add	r1, pc, #184	; 0xb8
   17194:	ldrd	r0, [r1]
   17198:	cmp	r3, r1
   1719c:	cmpeq	r2, r0
   171a0:	bne	17114 <_start@@Base+0x2b14>
   171a4:	ldr	r3, [sp, #36]	; 0x24
   171a8:	str	r3, [sp]
   171ac:	mov	r3, #4
   171b0:	mov	r2, r5
   171b4:	mov	r1, r4
   171b8:	mov	r0, r6
   171bc:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   171c0:	cmp	r4, r0
   171c4:	moveq	r4, r0
   171c8:	beq	17114 <_start@@Base+0x2b14>
   171cc:	mvn	r2, #10
   171d0:	mvn	r3, #0
   171d4:	ldr	r1, [sp, #32]
   171d8:	strd	r2, [r1]
   171dc:	mov	r3, #1
   171e0:	str	r3, [r7]
   171e4:	mov	r4, r0
   171e8:	b	17114 <_start@@Base+0x2b14>
   171ec:	ldr	r3, [sp, #36]	; 0x24
   171f0:	str	r3, [sp]
   171f4:	mov	r3, #4
   171f8:	mov	r2, r5
   171fc:	mov	r1, r4
   17200:	mov	r0, r6
   17204:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   17208:	cmp	r4, r0
   1720c:	moveq	r4, r0
   17210:	beq	17114 <_start@@Base+0x2b14>
   17214:	mvn	r2, #9
   17218:	mvn	r3, #0
   1721c:	ldr	r1, [sp, #32]
   17220:	strd	r2, [r1]
   17224:	mov	r3, #1
   17228:	str	r3, [r7]
   1722c:	mov	r4, r0
   17230:	b	17114 <_start@@Base+0x2b14>
   17234:	nop	{0}
   17238:			; <UNDEFINED> instruction: 0xffffffff
   1723c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   17240:	andeq	r0, r0, r0
   17244:	mcrvs	7, 3, r6, cr5, cr1, {1}
   17248:	andeq	r0, r0, r0
   1724c:	mcrvs	7, 3, r6, cr5, cr3, {1}
   17250:	andeq	r0, r0, r0
   17254:	mcrvs	7, 3, r6, cr5, cr2, {1}
   17258:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1725c:	strd	r6, [sp, #8]
   17260:	strd	r8, [sp, #16]
   17264:	str	lr, [sp, #24]
   17268:	sub	sp, sp, #12
   1726c:	mov	r8, r0
   17270:	mov	r4, r1
   17274:	mov	r9, r2
   17278:	mov	r5, r3
   1727c:	mov	r1, r2
   17280:	mov	r0, r4
   17284:	bl	146f0 <_start@@Base+0xf0>
   17288:	add	r3, pc, #344	; 0x158
   1728c:	ldrd	r2, [r3]
   17290:	cmp	r1, r3
   17294:	cmpeq	r0, r2
   17298:	bhi	1731c <_start@@Base+0x2d1c>
   1729c:	mov	r2, #0
   172a0:	mov	r3, r1
   172a4:	add	r1, pc, #324	; 0x144
   172a8:	ldrd	r0, [r1]
   172ac:	cmp	r3, r1
   172b0:	cmpeq	r2, r0
   172b4:	beq	172d4 <_start@@Base+0x2cd4>
   172b8:	mov	r0, r4
   172bc:	add	sp, sp, #12
   172c0:	ldrd	r4, [sp]
   172c4:	ldrd	r6, [sp, #8]
   172c8:	ldrd	r8, [sp, #16]
   172cc:	add	sp, sp, #24
   172d0:	pop	{pc}		; (ldr pc, [sp], #4)
   172d4:	ldr	r3, [sp, #44]	; 0x2c
   172d8:	str	r3, [sp]
   172dc:	mov	r3, #4
   172e0:	mov	r2, r9
   172e4:	mov	r1, r4
   172e8:	mov	r0, r8
   172ec:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   172f0:	cmp	r4, r0
   172f4:	moveq	r4, r0
   172f8:	beq	172b8 <_start@@Base+0x2cb8>
   172fc:	mov	r2, #8
   17300:	mov	r3, #0
   17304:	ldr	r1, [sp, #40]	; 0x28
   17308:	strd	r2, [r1]
   1730c:	mov	r3, #0
   17310:	str	r3, [r5]
   17314:	mov	r4, r0
   17318:	b	172b8 <_start@@Base+0x2cb8>
   1731c:	mov	r2, #0
   17320:	bic	r3, r1, #255	; 0xff
   17324:	add	r7, pc, #204	; 0xcc
   17328:	ldrd	r6, [r7]
   1732c:	cmp	r3, r7
   17330:	cmpeq	r2, r6
   17334:	beq	1739c <_start@@Base+0x2d9c>
   17338:	and	r2, r0, #-16777216	; 0xff000000
   1733c:	mov	r3, r1
   17340:	add	r1, pc, #184	; 0xb8
   17344:	ldrd	r0, [r1]
   17348:	cmp	r3, r1
   1734c:	cmpeq	r2, r0
   17350:	bne	172b8 <_start@@Base+0x2cb8>
   17354:	ldr	r3, [sp, #44]	; 0x2c
   17358:	str	r3, [sp]
   1735c:	mov	r3, #5
   17360:	mov	r2, r9
   17364:	mov	r1, r4
   17368:	mov	r0, r8
   1736c:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   17370:	cmp	r4, r0
   17374:	moveq	r4, r0
   17378:	beq	172b8 <_start@@Base+0x2cb8>
   1737c:	mov	r2, #2
   17380:	mov	r3, #0
   17384:	ldr	r1, [sp, #40]	; 0x28
   17388:	strd	r2, [r1]
   1738c:	mov	r3, #0
   17390:	str	r3, [r5]
   17394:	mov	r4, r0
   17398:	b	172b8 <_start@@Base+0x2cb8>
   1739c:	ldr	r3, [sp, #44]	; 0x2c
   173a0:	str	r3, [sp]
   173a4:	mov	r3, #3
   173a8:	mov	r2, r9
   173ac:	mov	r1, r4
   173b0:	mov	r0, r8
   173b4:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   173b8:	cmp	r4, r0
   173bc:	moveq	r4, r0
   173c0:	beq	172b8 <_start@@Base+0x2cb8>
   173c4:	mov	r2, #1
   173c8:	mov	r3, #0
   173cc:	ldr	r1, [sp, #40]	; 0x28
   173d0:	strd	r2, [r1]
   173d4:	mov	r3, #0
   173d8:	str	r3, [r5]
   173dc:	mov	r4, r0
   173e0:	b	172b8 <_start@@Base+0x2cb8>
   173e4:	nop	{0}
   173e8:	ldclvs	15, cr15, [pc, #1020]!	; 177ec <_start@@Base+0x31ec>
   173ec:	ldrbmi	r6, [r2, -r5, ror #10]!
   173f0:	andeq	r0, r0, r0
   173f4:	rsbmi	r7, ip, #423624704	; 0x19400000
   173f8:	andeq	r0, r0, r0
   173fc:	rsbpl	r6, r5, #0, 8
   17400:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   17404:	ldrbmi	r6, [r2, -r5, ror #10]!
   17408:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1740c:	strd	r6, [sp, #8]
   17410:	strd	r8, [sp, #16]
   17414:	str	sl, [sp, #24]
   17418:	str	lr, [sp, #28]
   1741c:	sub	sp, sp, #8
   17420:	mov	r9, r0
   17424:	mov	r4, r1
   17428:	mov	sl, r2
   1742c:	mov	r8, r3
   17430:	mov	r1, r2
   17434:	mov	r0, r4
   17438:	bl	146f0 <_start@@Base+0xf0>
   1743c:	add	r3, pc, #940	; 0x3ac
   17440:	ldrd	r2, [r3]
   17444:	cmp	r1, r3
   17448:	cmpeq	r0, r2
   1744c:	bhi	17508 <_start@@Base+0x2f08>
   17450:	add	r3, pc, #928	; 0x3a0
   17454:	ldrd	r2, [r3]
   17458:	cmp	r1, r3
   1745c:	cmpeq	r0, r2
   17460:	bne	174e8 <_start@@Base+0x2ee8>
   17464:	mov	r1, sl
   17468:	add	r0, r4, #8
   1746c:	bl	146f0 <_start@@Base+0xf0>
   17470:	add	r3, pc, #904	; 0x388
   17474:	ldrd	r2, [r3]
   17478:	cmp	r1, r3
   1747c:	cmpeq	r0, r2
   17480:	bne	174e8 <_start@@Base+0x2ee8>
   17484:	add	r5, r4, #16
   17488:	mov	r1, sl
   1748c:	mov	r0, r5
   17490:	bl	146f0 <_start@@Base+0xf0>
   17494:	mov	r2, #0
   17498:	and	r3, r1, #-16777216	; 0xff000000
   1749c:	cmp	r3, #1912602624	; 0x72000000
   174a0:	cmpeq	r2, #0
   174a4:	bne	174e8 <_start@@Base+0x2ee8>
   174a8:	sub	r5, sl, r5
   174ac:	cmp	r5, #1
   174b0:	ble	174e8 <_start@@Base+0x2ee8>
   174b4:	ldrb	r3, [r4, #17]
   174b8:	cmp	r3, #46	; 0x2e
   174bc:	bne	174e8 <_start@@Base+0x2ee8>
   174c0:	ldr	r3, [sp, #44]	; 0x2c
   174c4:	str	r3, [sp, #4]
   174c8:	ldr	r3, [sp, #40]	; 0x28
   174cc:	str	r3, [sp]
   174d0:	mov	r3, r8
   174d4:	mov	r2, sl
   174d8:	add	r1, r4, #18
   174dc:	mov	r0, r9
   174e0:	bl	16420 <_start@@Base+0x1e20>
   174e4:	mov	r4, r0
   174e8:	mov	r0, r4
   174ec:	add	sp, sp, #8
   174f0:	ldrd	r4, [sp]
   174f4:	ldrd	r6, [sp, #8]
   174f8:	ldrd	r8, [sp, #16]
   174fc:	ldr	sl, [sp, #24]
   17500:	add	sp, sp, #28
   17504:	pop	{pc}		; (ldr pc, [sp], #4)
   17508:	add	r3, pc, #760	; 0x2f8
   1750c:	ldrd	r2, [r3]
   17510:	cmp	r1, r3
   17514:	cmpeq	r0, r2
   17518:	beq	17690 <_start@@Base+0x3090>
   1751c:	add	r3, pc, #748	; 0x2ec
   17520:	ldrd	r2, [r3]
   17524:	cmp	r1, r3
   17528:	cmpeq	r0, r2
   1752c:	bne	174e8 <_start@@Base+0x2ee8>
   17530:	mov	r1, sl
   17534:	add	r0, r4, #8
   17538:	bl	146f0 <_start@@Base+0xf0>
   1753c:	add	r3, pc, #724	; 0x2d4
   17540:	ldrd	r2, [r3]
   17544:	cmp	r1, r3
   17548:	cmpeq	r0, r2
   1754c:	bne	174e8 <_start@@Base+0x2ee8>
   17550:	mov	r1, sl
   17554:	add	r0, r4, #16
   17558:	bl	146f0 <_start@@Base+0xf0>
   1755c:	add	r3, pc, #700	; 0x2bc
   17560:	ldrd	r2, [r3]
   17564:	cmp	r1, r3
   17568:	cmpeq	r0, r2
   1756c:	bne	174e8 <_start@@Base+0x2ee8>
   17570:	mov	r1, sl
   17574:	add	r0, r4, #24
   17578:	bl	146f0 <_start@@Base+0xf0>
   1757c:	add	r3, pc, #676	; 0x2a4
   17580:	ldrd	r2, [r3]
   17584:	cmp	r1, r3
   17588:	cmpeq	r0, r2
   1758c:	bne	174e8 <_start@@Base+0x2ee8>
   17590:	add	r5, r4, #32
   17594:	mov	r1, sl
   17598:	mov	r0, r5
   1759c:	bl	146f0 <_start@@Base+0xf0>
   175a0:	mov	r2, #0
   175a4:	and	r3, r1, #-16777216	; 0xff000000
   175a8:	cmp	r3, #1694498816	; 0x65000000
   175ac:	cmpeq	r2, #0
   175b0:	bne	174e8 <_start@@Base+0x2ee8>
   175b4:	sub	r5, sl, r5
   175b8:	cmp	r5, #1
   175bc:	ble	174e8 <_start@@Base+0x2ee8>
   175c0:	ldrb	r3, [r4, #33]	; 0x21
   175c4:	cmp	r3, #46	; 0x2e
   175c8:	bne	174e8 <_start@@Base+0x2ee8>
   175cc:	add	r5, r4, #34	; 0x22
   175d0:	mov	r1, sl
   175d4:	mov	r0, r5
   175d8:	bl	146f0 <_start@@Base+0xf0>
   175dc:	mov	r2, #0
   175e0:	bic	r3, r1, #255	; 0xff
   175e4:	add	r7, pc, #580	; 0x244
   175e8:	ldrd	r6, [r7]
   175ec:	cmp	r3, r7
   175f0:	cmpeq	r2, r6
   175f4:	beq	17b88 <_start@@Base+0x3588>
   175f8:	add	r3, pc, #568	; 0x238
   175fc:	ldrd	r2, [r3]
   17600:	cmp	r1, r3
   17604:	cmpeq	r0, r2
   17608:	movne	r4, r5
   1760c:	bne	174e8 <_start@@Base+0x2ee8>
   17610:	add	r6, r4, #42	; 0x2a
   17614:	mov	r1, sl
   17618:	mov	r0, r6
   1761c:	bl	146f0 <_start@@Base+0xf0>
   17620:	mov	r2, #0
   17624:	lsr	r3, r1, #16
   17628:	lsl	r3, r3, #16
   1762c:	mov	r0, #0
   17630:	mov	r1, #0
   17634:	movt	r1, #24940	; 0x616c
   17638:	cmp	r3, r1
   1763c:	cmpeq	r2, r0
   17640:	movne	r4, r5
   17644:	bne	174e8 <_start@@Base+0x2ee8>
   17648:	ldr	r3, [sp, #44]	; 0x2c
   1764c:	str	r3, [sp]
   17650:	mov	r3, #2
   17654:	mov	r2, sl
   17658:	mov	r1, r6
   1765c:	mov	r0, r9
   17660:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   17664:	mov	r4, r0
   17668:	cmp	r6, r0
   1766c:	moveq	r4, r5
   17670:	beq	174e8 <_start@@Base+0x2ee8>
   17674:	mov	r2, #0
   17678:	mov	r3, #0
   1767c:	ldr	r1, [sp, #40]	; 0x28
   17680:	strd	r2, [r1]
   17684:	mov	r3, #0
   17688:	str	r3, [r8]
   1768c:	b	174e8 <_start@@Base+0x2ee8>
   17690:	mov	r1, sl
   17694:	add	r0, r4, #8
   17698:	bl	146f0 <_start@@Base+0xf0>
   1769c:	add	r3, pc, #412	; 0x19c
   176a0:	ldrd	r2, [r3]
   176a4:	cmp	r1, r3
   176a8:	cmpeq	r0, r2
   176ac:	bhi	17928 <_start@@Base+0x3328>
   176b0:	add	r3, pc, #400	; 0x190
   176b4:	ldrd	r2, [r3]
   176b8:	cmp	r1, r3
   176bc:	cmpeq	r0, r2
   176c0:	bhi	17750 <_start@@Base+0x3150>
   176c4:	add	r3, pc, #388	; 0x184
   176c8:	ldrd	r2, [r3]
   176cc:	cmp	r1, r3
   176d0:	cmpeq	r0, r2
   176d4:	bne	174e8 <_start@@Base+0x2ee8>
   176d8:	add	r5, r4, #16
   176dc:	mov	r1, sl
   176e0:	mov	r0, r5
   176e4:	bl	146f0 <_start@@Base+0xf0>
   176e8:	mov	r2, #0
   176ec:	lsr	r3, r1, #16
   176f0:	lsl	r3, r3, #16
   176f4:	mov	r0, #0
   176f8:	mov	r1, #0
   176fc:	movt	r1, #28281	; 0x6e79
   17700:	cmp	r3, r1
   17704:	cmpeq	r2, r0
   17708:	bne	174e8 <_start@@Base+0x2ee8>
   1770c:	sub	r5, sl, r5
   17710:	cmp	r5, #2
   17714:	ble	174e8 <_start@@Base+0x2ee8>
   17718:	ldrb	r3, [r4, #18]
   1771c:	cmp	r3, #46	; 0x2e
   17720:	bne	174e8 <_start@@Base+0x2ee8>
   17724:	ldr	r3, [sp, #44]	; 0x2c
   17728:	str	r3, [sp, #4]
   1772c:	ldr	r3, [sp, #40]	; 0x28
   17730:	str	r3, [sp]
   17734:	mov	r3, r8
   17738:	mov	r2, sl
   1773c:	add	r1, r4, #19
   17740:	mov	r0, r9
   17744:	bl	168a0 <_start@@Base+0x22a0>
   17748:	mov	r4, r0
   1774c:	b	174e8 <_start@@Base+0x2ee8>
   17750:	add	r3, pc, #256	; 0x100
   17754:	ldrd	r2, [r3]
   17758:	cmp	r1, r3
   1775c:	cmpeq	r0, r2
   17760:	beq	178b8 <_start@@Base+0x32b8>
   17764:	add	r3, pc, #244	; 0xf4
   17768:	ldrd	r2, [r3]
   1776c:	cmp	r1, r3
   17770:	cmpeq	r0, r2
   17774:	bne	174e8 <_start@@Base+0x2ee8>
   17778:	add	r5, r4, #16
   1777c:	mov	r1, sl
   17780:	mov	r0, r5
   17784:	bl	146f0 <_start@@Base+0xf0>
   17788:	mov	r2, #0
   1778c:	lsr	r3, r1, #16
   17790:	lsl	r3, r3, #16
   17794:	mov	r0, #0
   17798:	mov	r1, #0
   1779c:	movt	r1, #28527	; 0x6f6f
   177a0:	cmp	r3, r1
   177a4:	cmpeq	r2, r0
   177a8:	bne	174e8 <_start@@Base+0x2ee8>
   177ac:	sub	r5, sl, r5
   177b0:	cmp	r5, #2
   177b4:	ble	174e8 <_start@@Base+0x2ee8>
   177b8:	ldrb	r3, [r4, #18]
   177bc:	cmp	r3, #46	; 0x2e
   177c0:	bne	174e8 <_start@@Base+0x2ee8>
   177c4:	ldr	r3, [sp, #44]	; 0x2c
   177c8:	str	r3, [sp, #4]
   177cc:	ldr	r3, [sp, #40]	; 0x28
   177d0:	str	r3, [sp]
   177d4:	mov	r3, r8
   177d8:	mov	r2, sl
   177dc:	add	r1, r4, #19
   177e0:	mov	r0, r9
   177e4:	bl	16b60 <_start@@Base+0x2560>
   177e8:	mov	r4, r0
   177ec:	b	174e8 <_start@@Base+0x2ee8>
   177f0:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   177f4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   177f8:	cmnvs	r3, lr, lsr #18
   177fc:			; <UNDEFINED> instruction: 0x46616e74
   17800:	cmnvs	r3, r5, ror #8
   17804:	cmnmi	r8, #-2147483620	; 0x8000001c
   17808:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   1780c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17810:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   17814:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17818:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1781c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   17820:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   17824:	cmnpl	r0, #-1073741800	; 0xc0000018
   17828:	cmnvs	ip, #100, 10	; 0x19000000
   1782c:	svcvs	0x006d496e
   17830:	andeq	r0, r0, r0
   17834:	strbtmi	r6, [pc], -r0, lsl #30
   17838:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   1783c:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   17840:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   17844:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17848:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   1784c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17850:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   17854:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17858:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   1785c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17860:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   17864:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17868:	andeq	r0, r0, r0
   1786c:	svcvs	0x006c6f72
   17870:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   17874:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17878:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1787c:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   17880:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   17884:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17888:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   1788c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17890:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17894:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   17898:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   1789c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   178a0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   178a4:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   178a8:	rsbsvc	r7, r4, r5, ror #18
   178ac:	svcvs	0x0074656d
   178b0:	andeq	r0, r0, r0
   178b4:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   178b8:	add	r5, r4, #16
   178bc:	mov	r1, sl
   178c0:	mov	r0, r5
   178c4:	bl	146f0 <_start@@Base+0xf0>
   178c8:	mov	r2, #0
   178cc:	mov	r3, r1
   178d0:	sub	r1, pc, #112	; 0x70
   178d4:	ldrd	r0, [r1]
   178d8:	cmp	r3, r1
   178dc:	cmpeq	r2, r0
   178e0:	bne	174e8 <_start@@Base+0x2ee8>
   178e4:	sub	r5, sl, r5
   178e8:	cmp	r5, #4
   178ec:	ble	174e8 <_start@@Base+0x2ee8>
   178f0:	ldrb	r3, [r4, #20]
   178f4:	cmp	r3, #46	; 0x2e
   178f8:	bne	174e8 <_start@@Base+0x2ee8>
   178fc:	ldr	r3, [sp, #44]	; 0x2c
   17900:	str	r3, [sp, #4]
   17904:	ldr	r3, [sp, #40]	; 0x28
   17908:	str	r3, [sp]
   1790c:	mov	r3, r8
   17910:	mov	r2, sl
   17914:	add	r1, r4, #21
   17918:	mov	r0, r9
   1791c:	bl	17258 <_start@@Base+0x2c58>
   17920:	mov	r4, r0
   17924:	b	174e8 <_start@@Base+0x2ee8>
   17928:	sub	r3, pc, #192	; 0xc0
   1792c:	ldrd	r2, [r3]
   17930:	cmp	r1, r3
   17934:	cmpeq	r0, r2
   17938:	bhi	179ac <_start@@Base+0x33ac>
   1793c:	add	r5, r4, #16
   17940:	mov	r1, sl
   17944:	mov	r0, r5
   17948:	bl	146f0 <_start@@Base+0xf0>
   1794c:	bic	r2, r0, #255	; 0xff
   17950:	mov	r3, r1
   17954:	sub	r1, pc, #228	; 0xe4
   17958:	ldrd	r0, [r1]
   1795c:	cmp	r3, r1
   17960:	cmpeq	r2, r0
   17964:	bne	174e8 <_start@@Base+0x2ee8>
   17968:	sub	r5, sl, r5
   1796c:	cmp	r5, #7
   17970:	ble	174e8 <_start@@Base+0x2ee8>
   17974:	ldrb	r3, [r4, #23]
   17978:	cmp	r3, #46	; 0x2e
   1797c:	bne	174e8 <_start@@Base+0x2ee8>
   17980:	ldr	r3, [sp, #44]	; 0x2c
   17984:	str	r3, [sp, #4]
   17988:	ldr	r3, [sp, #40]	; 0x28
   1798c:	str	r3, [sp]
   17990:	mov	r3, r8
   17994:	mov	r2, sl
   17998:	add	r1, r4, #24
   1799c:	mov	r0, r9
   179a0:	bl	16cc8 <_start@@Base+0x26c8>
   179a4:	mov	r4, r0
   179a8:	b	174e8 <_start@@Base+0x2ee8>
   179ac:	sub	r3, pc, #308	; 0x134
   179b0:	ldrd	r2, [r3]
   179b4:	cmp	r1, r3
   179b8:	cmpeq	r0, r2
   179bc:	bhi	17a44 <_start@@Base+0x3444>
   179c0:	sub	r3, pc, #320	; 0x140
   179c4:	ldrd	r2, [r3]
   179c8:	cmp	r1, r3
   179cc:	cmpeq	r0, r2
   179d0:	bne	174e8 <_start@@Base+0x2ee8>
   179d4:	add	r5, r4, #16
   179d8:	mov	r1, sl
   179dc:	mov	r0, r5
   179e0:	bl	146f0 <_start@@Base+0xf0>
   179e4:	bic	r2, r0, #255	; 0xff
   179e8:	mov	r3, r1
   179ec:	sub	r1, pc, #356	; 0x164
   179f0:	ldrd	r0, [r1]
   179f4:	cmp	r3, r1
   179f8:	cmpeq	r2, r0
   179fc:	bne	174e8 <_start@@Base+0x2ee8>
   17a00:	sub	r5, sl, r5
   17a04:	cmp	r5, #7
   17a08:	ble	174e8 <_start@@Base+0x2ee8>
   17a0c:	ldrb	r3, [r4, #23]
   17a10:	cmp	r3, #46	; 0x2e
   17a14:	bne	174e8 <_start@@Base+0x2ee8>
   17a18:	ldr	r3, [sp, #44]	; 0x2c
   17a1c:	str	r3, [sp, #4]
   17a20:	ldr	r3, [sp, #40]	; 0x28
   17a24:	str	r3, [sp]
   17a28:	mov	r3, r8
   17a2c:	mov	r2, sl
   17a30:	add	r1, r4, #24
   17a34:	mov	r0, r9
   17a38:	bl	16e80 <_start@@Base+0x2880>
   17a3c:	mov	r4, r0
   17a40:	b	174e8 <_start@@Base+0x2ee8>
   17a44:	sub	r3, pc, #436	; 0x1b4
   17a48:	ldrd	r2, [r3]
   17a4c:	cmp	r1, r3
   17a50:	cmpeq	r0, r2
   17a54:	bne	174e8 <_start@@Base+0x2ee8>
   17a58:	add	r5, r4, #16
   17a5c:	mov	r1, sl
   17a60:	mov	r0, r5
   17a64:	bl	146f0 <_start@@Base+0xf0>
   17a68:	bic	r2, r0, #255	; 0xff
   17a6c:	sub	r7, pc, #468	; 0x1d4
   17a70:	ldrd	r6, [r7]
   17a74:	cmp	r1, r7
   17a78:	cmpeq	r2, r6
   17a7c:	bne	17ac4 <_start@@Base+0x34c4>
   17a80:	sub	r5, sl, r5
   17a84:	cmp	r5, #7
   17a88:	ble	174e8 <_start@@Base+0x2ee8>
   17a8c:	ldrb	r3, [r4, #23]
   17a90:	cmp	r3, #46	; 0x2e
   17a94:	bne	174e8 <_start@@Base+0x2ee8>
   17a98:	ldr	r3, [sp, #44]	; 0x2c
   17a9c:	str	r3, [sp, #4]
   17aa0:	ldr	r3, [sp, #40]	; 0x28
   17aa4:	str	r3, [sp]
   17aa8:	mov	r3, r8
   17aac:	mov	r2, sl
   17ab0:	add	r1, r4, #24
   17ab4:	mov	r0, r9
   17ab8:	bl	170b8 <_start@@Base+0x2ab8>
   17abc:	mov	r4, r0
   17ac0:	b	174e8 <_start@@Base+0x2ee8>
   17ac4:	sub	r3, pc, #548	; 0x224
   17ac8:	ldrd	r2, [r3]
   17acc:	cmp	r1, r3
   17ad0:	cmpeq	r0, r2
   17ad4:	bne	174e8 <_start@@Base+0x2ee8>
   17ad8:	add	r5, r4, #24
   17adc:	mov	r1, sl
   17ae0:	mov	r0, r5
   17ae4:	bl	146f0 <_start@@Base+0xf0>
   17ae8:	mov	r2, #0
   17aec:	bic	r3, r1, #255	; 0xff
   17af0:	sub	r1, pc, #584	; 0x248
   17af4:	ldrd	r0, [r1]
   17af8:	cmp	r3, r1
   17afc:	cmpeq	r2, r0
   17b00:	bne	174e8 <_start@@Base+0x2ee8>
   17b04:	sub	r5, sl, r5
   17b08:	cmp	r5, #3
   17b0c:	ble	174e8 <_start@@Base+0x2ee8>
   17b10:	ldrb	r3, [r4, #27]
   17b14:	cmp	r3, #46	; 0x2e
   17b18:	bne	174e8 <_start@@Base+0x2ee8>
   17b1c:	add	r5, r4, #28
   17b20:	mov	r1, sl
   17b24:	mov	r0, r5
   17b28:	bl	146f0 <_start@@Base+0xf0>
   17b2c:	mov	r2, #0
   17b30:	and	r3, r1, #-16777216	; 0xff000000
   17b34:	cmp	r3, #2013265920	; 0x78000000
   17b38:	cmpeq	r2, #0
   17b3c:	movne	r4, r5
   17b40:	bne	174e8 <_start@@Base+0x2ee8>
   17b44:	ldr	r3, [sp, #44]	; 0x2c
   17b48:	str	r3, [sp]
   17b4c:	mov	r3, #1
   17b50:	mov	r2, sl
   17b54:	mov	r1, r5
   17b58:	mov	r0, r9
   17b5c:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   17b60:	mov	r4, r0
   17b64:	cmp	r5, r0
   17b68:	beq	174e8 <_start@@Base+0x2ee8>
   17b6c:	mov	r2, #0
   17b70:	mov	r3, #0
   17b74:	ldr	r1, [sp, #40]	; 0x28
   17b78:	strd	r2, [r1]
   17b7c:	mov	r3, #0
   17b80:	str	r3, [r8]
   17b84:	b	174e8 <_start@@Base+0x2ee8>
   17b88:	ldr	r3, [sp, #44]	; 0x2c
   17b8c:	str	r3, [sp]
   17b90:	mov	r3, #3
   17b94:	mov	r2, sl
   17b98:	mov	r1, r5
   17b9c:	mov	r0, r9
   17ba0:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   17ba4:	mov	r4, r0
   17ba8:	cmp	r5, r0
   17bac:	beq	174e8 <_start@@Base+0x2ee8>
   17bb0:	mov	r2, #17
   17bb4:	mov	r3, #0
   17bb8:	ldr	r1, [sp, #40]	; 0x28
   17bbc:	strd	r2, [r1]
   17bc0:	mov	r3, #0
   17bc4:	str	r3, [r8]
   17bc8:	b	174e8 <_start@@Base+0x2ee8>
   17bcc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17bd0:	strd	r6, [sp, #8]
   17bd4:	strd	r8, [sp, #16]
   17bd8:	str	lr, [sp, #24]
   17bdc:	sub	sp, sp, #28
   17be0:	mov	r4, #0
   17be4:	mov	r5, #0
   17be8:	strd	r4, [sp, #16]
   17bec:	mov	ip, #0
   17bf0:	str	ip, [sp, #12]
   17bf4:	strh	ip, [r3]
   17bf8:	cmp	r1, r2
   17bfc:	moveq	r0, r2
   17c00:	beq	17c2c <_start@@Base+0x362c>
   17c04:	mov	r6, r3
   17c08:	mov	r5, r2
   17c0c:	mov	r4, r1
   17c10:	mov	r7, r0
   17c14:	add	r3, sp, #16
   17c18:	str	r3, [sp]
   17c1c:	add	r3, sp, #12
   17c20:	bl	2f170 <flatcc_json_parser_integer@@Base>
   17c24:	cmp	r4, r0
   17c28:	bne	17c44 <_start@@Base+0x3644>
   17c2c:	add	sp, sp, #28
   17c30:	ldrd	r4, [sp]
   17c34:	ldrd	r6, [sp, #8]
   17c38:	ldrd	r8, [sp, #16]
   17c3c:	add	sp, sp, #24
   17c40:	pop	{pc}		; (ldr pc, [sp], #4)
   17c44:	ldrd	r2, [sp, #16]
   17c48:	ldr	r1, [sp, #12]
   17c4c:	cmp	r1, #0
   17c50:	beq	17c80 <_start@@Base+0x3680>
   17c54:	cmp	r3, #0
   17c58:	cmpeq	r2, #32768	; 0x8000
   17c5c:	rsbls	r2, r2, #0
   17c60:	strhls	r2, [r6]
   17c64:	bls	17c2c <_start@@Base+0x362c>
   17c68:	mov	r3, #8
   17c6c:	mov	r2, r5
   17c70:	mov	r1, r0
   17c74:	mov	r0, r7
   17c78:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   17c7c:	b	17c2c <_start@@Base+0x362c>
   17c80:	movw	r8, #32767	; 0x7fff
   17c84:	mov	r9, #0
   17c88:	cmp	r3, r9
   17c8c:	cmpeq	r2, r8
   17c90:	strhls	r2, [r6]
   17c94:	bls	17c2c <_start@@Base+0x362c>
   17c98:	mov	r3, #7
   17c9c:	mov	r2, r5
   17ca0:	mov	r1, r0
   17ca4:	mov	r0, r7
   17ca8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   17cac:	b	17c2c <_start@@Base+0x362c>
   17cb0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17cb4:	strd	r6, [sp, #8]
   17cb8:	strd	r8, [sp, #16]
   17cbc:	str	lr, [sp, #24]
   17cc0:	sub	sp, sp, #28
   17cc4:	mov	r4, #0
   17cc8:	mov	r5, #0
   17ccc:	strd	r4, [sp, #16]
   17cd0:	mov	ip, #0
   17cd4:	str	ip, [sp, #12]
   17cd8:	str	ip, [r3]
   17cdc:	cmp	r1, r2
   17ce0:	moveq	r0, r2
   17ce4:	beq	17d10 <_start@@Base+0x3710>
   17ce8:	mov	r6, r3
   17cec:	mov	r5, r2
   17cf0:	mov	r4, r1
   17cf4:	mov	r7, r0
   17cf8:	add	r3, sp, #16
   17cfc:	str	r3, [sp]
   17d00:	add	r3, sp, #12
   17d04:	bl	2f170 <flatcc_json_parser_integer@@Base>
   17d08:	cmp	r4, r0
   17d0c:	bne	17d28 <_start@@Base+0x3728>
   17d10:	add	sp, sp, #28
   17d14:	ldrd	r4, [sp]
   17d18:	ldrd	r6, [sp, #8]
   17d1c:	ldrd	r8, [sp, #16]
   17d20:	add	sp, sp, #24
   17d24:	pop	{pc}		; (ldr pc, [sp], #4)
   17d28:	ldrd	r2, [sp, #16]
   17d2c:	ldr	r1, [sp, #12]
   17d30:	cmp	r1, #0
   17d34:	beq	17d64 <_start@@Base+0x3764>
   17d38:	cmp	r3, #0
   17d3c:	cmpeq	r2, #-2147483648	; 0x80000000
   17d40:	rsbls	r2, r2, #0
   17d44:	strls	r2, [r6]
   17d48:	bls	17d10 <_start@@Base+0x3710>
   17d4c:	mov	r3, #8
   17d50:	mov	r2, r5
   17d54:	mov	r1, r0
   17d58:	mov	r0, r7
   17d5c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   17d60:	b	17d10 <_start@@Base+0x3710>
   17d64:	mvn	r8, #-2147483648	; 0x80000000
   17d68:	mov	r9, #0
   17d6c:	cmp	r3, r9
   17d70:	cmpeq	r2, r8
   17d74:	strls	r2, [r6]
   17d78:	bls	17d10 <_start@@Base+0x3710>
   17d7c:	mov	r3, #7
   17d80:	mov	r2, r5
   17d84:	mov	r1, r0
   17d88:	mov	r0, r7
   17d8c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   17d90:	b	17d10 <_start@@Base+0x3710>
   17d94:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17d98:	strd	r6, [sp, #8]
   17d9c:	strd	r8, [sp, #16]
   17da0:	str	lr, [sp, #24]
   17da4:	sub	sp, sp, #28
   17da8:	mov	r4, #0
   17dac:	mov	r5, #0
   17db0:	strd	r4, [sp, #16]
   17db4:	mov	ip, #0
   17db8:	str	ip, [sp, #12]
   17dbc:	str	ip, [r3]
   17dc0:	cmp	r1, r2
   17dc4:	moveq	r0, r2
   17dc8:	beq	17df4 <_start@@Base+0x37f4>
   17dcc:	mov	r6, r3
   17dd0:	mov	r5, r2
   17dd4:	mov	r4, r1
   17dd8:	mov	r7, r0
   17ddc:	add	r3, sp, #16
   17de0:	str	r3, [sp]
   17de4:	add	r3, sp, #12
   17de8:	bl	2f170 <flatcc_json_parser_integer@@Base>
   17dec:	cmp	r4, r0
   17df0:	bne	17e0c <_start@@Base+0x380c>
   17df4:	add	sp, sp, #28
   17df8:	ldrd	r4, [sp]
   17dfc:	ldrd	r6, [sp, #8]
   17e00:	ldrd	r8, [sp, #16]
   17e04:	add	sp, sp, #24
   17e08:	pop	{pc}		; (ldr pc, [sp], #4)
   17e0c:	ldr	r3, [sp, #12]
   17e10:	cmp	r3, #0
   17e14:	bne	17e4c <_start@@Base+0x384c>
   17e18:	ldrd	r2, [sp, #16]
   17e1c:	mvn	r8, #0
   17e20:	mov	r9, #0
   17e24:	cmp	r3, r9
   17e28:	cmpeq	r2, r8
   17e2c:	strls	r2, [r6]
   17e30:	bls	17df4 <_start@@Base+0x37f4>
   17e34:	mov	r3, #7
   17e38:	mov	r2, r5
   17e3c:	mov	r1, r0
   17e40:	mov	r0, r7
   17e44:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   17e48:	b	17df4 <_start@@Base+0x37f4>
   17e4c:	mov	r3, #8
   17e50:	mov	r2, r5
   17e54:	mov	r1, r0
   17e58:	mov	r0, r7
   17e5c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   17e60:	b	17df4 <_start@@Base+0x37f4>
   17e64:	strd	r4, [sp, #-20]!	; 0xffffffec
   17e68:	strd	r6, [sp, #8]
   17e6c:	str	lr, [sp, #16]
   17e70:	sub	sp, sp, #28
   17e74:	mov	r4, #0
   17e78:	mov	r5, #0
   17e7c:	strd	r4, [sp, #16]
   17e80:	mov	ip, #0
   17e84:	str	ip, [sp, #12]
   17e88:	strd	r4, [r3]
   17e8c:	cmp	r1, r2
   17e90:	moveq	r0, r2
   17e94:	beq	17ed4 <_start@@Base+0x38d4>
   17e98:	mov	r7, r3
   17e9c:	mov	r5, r2
   17ea0:	mov	r4, r1
   17ea4:	mov	r6, r0
   17ea8:	add	r3, sp, #16
   17eac:	str	r3, [sp]
   17eb0:	add	r3, sp, #12
   17eb4:	bl	2f170 <flatcc_json_parser_integer@@Base>
   17eb8:	cmp	r4, r0
   17ebc:	beq	17ed4 <_start@@Base+0x38d4>
   17ec0:	ldr	r3, [sp, #12]
   17ec4:	cmp	r3, #0
   17ec8:	bne	17ee8 <_start@@Base+0x38e8>
   17ecc:	ldrd	r2, [sp, #16]
   17ed0:	strd	r2, [r7]
   17ed4:	add	sp, sp, #28
   17ed8:	ldrd	r4, [sp]
   17edc:	ldrd	r6, [sp, #8]
   17ee0:	add	sp, sp, #16
   17ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee8:	mov	r3, #8
   17eec:	mov	r2, r5
   17ef0:	mov	r1, r0
   17ef4:	mov	r0, r6
   17ef8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   17efc:	b	17ed4 <_start@@Base+0x38d4>
   17f00:	strd	r4, [sp, #-20]!	; 0xffffffec
   17f04:	strd	r6, [sp, #8]
   17f08:	str	lr, [sp, #16]
   17f0c:	sub	sp, sp, #28
   17f10:	mov	r4, #0
   17f14:	mov	r5, #0
   17f18:	strd	r4, [sp, #16]
   17f1c:	mov	ip, #0
   17f20:	str	ip, [sp, #12]
   17f24:	strb	ip, [r3]
   17f28:	cmp	r1, r2
   17f2c:	moveq	r0, r2
   17f30:	beq	17f5c <_start@@Base+0x395c>
   17f34:	mov	r6, r3
   17f38:	mov	r5, r2
   17f3c:	mov	r4, r1
   17f40:	mov	r7, r0
   17f44:	add	r3, sp, #16
   17f48:	str	r3, [sp]
   17f4c:	add	r3, sp, #12
   17f50:	bl	2f170 <flatcc_json_parser_integer@@Base>
   17f54:	cmp	r4, r0
   17f58:	bne	17f70 <_start@@Base+0x3970>
   17f5c:	add	sp, sp, #28
   17f60:	ldrd	r4, [sp]
   17f64:	ldrd	r6, [sp, #8]
   17f68:	add	sp, sp, #16
   17f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f70:	ldr	r3, [sp, #12]
   17f74:	cmp	r3, #0
   17f78:	bne	17fa8 <_start@@Base+0x39a8>
   17f7c:	ldrd	r2, [sp, #16]
   17f80:	cmp	r3, #0
   17f84:	cmpeq	r2, #255	; 0xff
   17f88:	strbls	r2, [r6]
   17f8c:	bls	17f5c <_start@@Base+0x395c>
   17f90:	mov	r3, #7
   17f94:	mov	r2, r5
   17f98:	mov	r1, r0
   17f9c:	mov	r0, r7
   17fa0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   17fa4:	b	17f5c <_start@@Base+0x395c>
   17fa8:	mov	r3, #8
   17fac:	mov	r2, r5
   17fb0:	mov	r1, r0
   17fb4:	mov	r0, r7
   17fb8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   17fbc:	b	17f5c <_start@@Base+0x395c>
   17fc0:	strd	r4, [sp, #-20]!	; 0xffffffec
   17fc4:	strd	r6, [sp, #8]
   17fc8:	str	lr, [sp, #16]
   17fcc:	sub	sp, sp, #28
   17fd0:	mov	r4, #0
   17fd4:	mov	r5, #0
   17fd8:	strd	r4, [sp, #16]
   17fdc:	mov	ip, #0
   17fe0:	str	ip, [sp, #12]
   17fe4:	strd	r4, [r3]
   17fe8:	cmp	r1, r2
   17fec:	moveq	r0, r2
   17ff0:	beq	1801c <_start@@Base+0x3a1c>
   17ff4:	mov	r6, r3
   17ff8:	mov	r5, r2
   17ffc:	mov	r4, r1
   18000:	mov	r7, r0
   18004:	add	r3, sp, #16
   18008:	str	r3, [sp]
   1800c:	add	r3, sp, #12
   18010:	bl	2f170 <flatcc_json_parser_integer@@Base>
   18014:	cmp	r4, r0
   18018:	bne	18030 <_start@@Base+0x3a30>
   1801c:	add	sp, sp, #28
   18020:	ldrd	r4, [sp]
   18024:	ldrd	r6, [sp, #8]
   18028:	add	sp, sp, #16
   1802c:	pop	{pc}		; (ldr pc, [sp], #4)
   18030:	ldrd	r2, [sp, #16]
   18034:	ldr	r1, [sp, #12]
   18038:	cmp	r1, #0
   1803c:	beq	18074 <_start@@Base+0x3a74>
   18040:	cmp	r3, #-2147483648	; 0x80000000
   18044:	cmpeq	r2, #0
   18048:	bhi	1805c <_start@@Base+0x3a5c>
   1804c:	rsbs	r2, r2, #0
   18050:	rsc	r3, r3, #0
   18054:	strd	r2, [r6]
   18058:	b	1801c <_start@@Base+0x3a1c>
   1805c:	mov	r3, #8
   18060:	mov	r2, r5
   18064:	mov	r1, r0
   18068:	mov	r0, r7
   1806c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18070:	b	1801c <_start@@Base+0x3a1c>
   18074:	cmp	r2, #0
   18078:	sbcs	r1, r3, #0
   1807c:	strdge	r2, [r6]
   18080:	bge	1801c <_start@@Base+0x3a1c>
   18084:	mov	r3, #7
   18088:	mov	r2, r5
   1808c:	mov	r1, r0
   18090:	mov	r0, r7
   18094:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18098:	b	1801c <_start@@Base+0x3a1c>
   1809c:	sub	r3, r2, r1
   180a0:	cmp	r3, #1
   180a4:	ble	180b8 <_start@@Base+0x3ab8>
   180a8:	ldrb	r3, [r1]
   180ac:	cmp	r3, #32
   180b0:	bhi	180e4 <_start@@Base+0x3ae4>
   180b4:	beq	180d0 <_start@@Base+0x3ad0>
   180b8:	str	r4, [sp, #-8]!
   180bc:	str	lr, [sp, #4]
   180c0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   180c4:	ldr	r4, [sp]
   180c8:	add	sp, sp, #4
   180cc:	pop	{pc}		; (ldr pc, [sp], #4)
   180d0:	ldrb	r3, [r1, #1]
   180d4:	cmp	r3, #32
   180d8:	bls	180b8 <_start@@Base+0x3ab8>
   180dc:	add	r0, r1, #1
   180e0:	bx	lr
   180e4:	mov	r0, r1
   180e8:	bx	lr
   180ec:	strd	r4, [sp, #-16]!
   180f0:	str	r6, [sp, #8]
   180f4:	str	lr, [sp, #12]
   180f8:	mov	r5, r0
   180fc:	mov	r4, r2
   18100:	mov	r6, r3
   18104:	sub	r3, r2, r1
   18108:	cmp	r3, #1
   1810c:	ble	18120 <_start@@Base+0x3b20>
   18110:	ldrb	r3, [r1]
   18114:	cmp	r3, #32
   18118:	bhi	18130 <_start@@Base+0x3b30>
   1811c:	beq	18184 <_start@@Base+0x3b84>
   18120:	mov	r2, r4
   18124:	mov	r0, r5
   18128:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1812c:	mov	r1, r0
   18130:	cmp	r4, r1
   18134:	moveq	r3, #0
   18138:	streq	r3, [r6]
   1813c:	moveq	r0, r1
   18140:	beq	18174 <_start@@Base+0x3b74>
   18144:	ldrb	r3, [r1]
   18148:	cmp	r3, #44	; 0x2c
   1814c:	beq	181ac <_start@@Base+0x3bac>
   18150:	mov	r3, #0
   18154:	str	r3, [r6]
   18158:	ldrb	r3, [r1]
   1815c:	cmp	r3, #125	; 0x7d
   18160:	beq	18198 <_start@@Base+0x3b98>
   18164:	mov	r3, #10
   18168:	mov	r2, r4
   1816c:	mov	r0, r5
   18170:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18174:	ldrd	r4, [sp]
   18178:	ldr	r6, [sp, #8]
   1817c:	add	sp, sp, #12
   18180:	pop	{pc}		; (ldr pc, [sp], #4)
   18184:	ldrb	r3, [r1, #1]
   18188:	cmp	r3, #32
   1818c:	addhi	r1, r1, #1
   18190:	bls	18120 <_start@@Base+0x3b20>
   18194:	b	18130 <_start@@Base+0x3b30>
   18198:	mov	r2, r4
   1819c:	add	r1, r1, #1
   181a0:	mov	r0, r5
   181a4:	bl	1809c <_start@@Base+0x3a9c>
   181a8:	b	18174 <_start@@Base+0x3b74>
   181ac:	mov	r2, r4
   181b0:	add	r1, r1, #1
   181b4:	mov	r0, r5
   181b8:	bl	1809c <_start@@Base+0x3a9c>
   181bc:	cmp	r4, r0
   181c0:	beq	181f4 <_start@@Base+0x3bf4>
   181c4:	ldrb	r3, [r0]
   181c8:	cmp	r3, #125	; 0x7d
   181cc:	movne	r3, #1
   181d0:	strne	r3, [r6]
   181d4:	bne	18174 <_start@@Base+0x3b74>
   181d8:	mov	r3, #0
   181dc:	str	r3, [r6]
   181e0:	mov	r2, r4
   181e4:	add	r1, r0, #1
   181e8:	mov	r0, r5
   181ec:	bl	1809c <_start@@Base+0x3a9c>
   181f0:	b	18174 <_start@@Base+0x3b74>
   181f4:	mov	r3, #0
   181f8:	str	r3, [r6]
   181fc:	mov	r3, #10
   18200:	mov	r2, r0
   18204:	mov	r1, r0
   18208:	mov	r0, r5
   1820c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18210:	b	18174 <_start@@Base+0x3b74>
   18214:	strd	r4, [sp, #-16]!
   18218:	str	r6, [sp, #8]
   1821c:	str	lr, [sp, #12]
   18220:	mov	r5, r0
   18224:	mov	r4, r2
   18228:	mov	r6, r3
   1822c:	sub	r3, r2, r1
   18230:	cmp	r3, #1
   18234:	ble	18248 <_start@@Base+0x3c48>
   18238:	ldrb	r3, [r1]
   1823c:	cmp	r3, #32
   18240:	bhi	18258 <_start@@Base+0x3c58>
   18244:	beq	182ac <_start@@Base+0x3cac>
   18248:	mov	r2, r4
   1824c:	mov	r0, r5
   18250:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   18254:	mov	r1, r0
   18258:	cmp	r4, r1
   1825c:	moveq	r3, #0
   18260:	streq	r3, [r6]
   18264:	moveq	r0, r1
   18268:	beq	1829c <_start@@Base+0x3c9c>
   1826c:	ldrb	r3, [r1]
   18270:	cmp	r3, #44	; 0x2c
   18274:	beq	182d4 <_start@@Base+0x3cd4>
   18278:	mov	r3, #0
   1827c:	str	r3, [r6]
   18280:	ldrb	r3, [r1]
   18284:	cmp	r3, #93	; 0x5d
   18288:	beq	182c0 <_start@@Base+0x3cc0>
   1828c:	mov	r3, #9
   18290:	mov	r2, r4
   18294:	mov	r0, r5
   18298:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1829c:	ldrd	r4, [sp]
   182a0:	ldr	r6, [sp, #8]
   182a4:	add	sp, sp, #12
   182a8:	pop	{pc}		; (ldr pc, [sp], #4)
   182ac:	ldrb	r3, [r1, #1]
   182b0:	cmp	r3, #32
   182b4:	addhi	r1, r1, #1
   182b8:	bls	18248 <_start@@Base+0x3c48>
   182bc:	b	18258 <_start@@Base+0x3c58>
   182c0:	mov	r2, r4
   182c4:	add	r1, r1, #1
   182c8:	mov	r0, r5
   182cc:	bl	1809c <_start@@Base+0x3a9c>
   182d0:	b	1829c <_start@@Base+0x3c9c>
   182d4:	mov	r2, r4
   182d8:	add	r1, r1, #1
   182dc:	mov	r0, r5
   182e0:	bl	1809c <_start@@Base+0x3a9c>
   182e4:	cmp	r4, r0
   182e8:	beq	1831c <_start@@Base+0x3d1c>
   182ec:	ldrb	r3, [r0]
   182f0:	cmp	r3, #93	; 0x5d
   182f4:	movne	r3, #1
   182f8:	strne	r3, [r6]
   182fc:	bne	1829c <_start@@Base+0x3c9c>
   18300:	mov	r3, #0
   18304:	str	r3, [r6]
   18308:	mov	r2, r4
   1830c:	add	r1, r0, #1
   18310:	mov	r0, r5
   18314:	bl	1809c <_start@@Base+0x3a9c>
   18318:	b	1829c <_start@@Base+0x3c9c>
   1831c:	mov	r3, #0
   18320:	str	r3, [r6]
   18324:	mov	r3, #9
   18328:	mov	r2, r0
   1832c:	mov	r1, r0
   18330:	mov	r0, r5
   18334:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18338:	b	1829c <_start@@Base+0x3c9c>
   1833c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18340:	strd	r6, [sp, #8]
   18344:	str	r8, [sp, #16]
   18348:	str	lr, [sp, #20]
   1834c:	sub	sp, sp, #24
   18350:	mov	r8, r0
   18354:	mov	r4, r1
   18358:	mov	r5, r2
   1835c:	mov	r7, r3
   18360:	sub	r6, r2, r1
   18364:	cmp	r6, #3
   18368:	ble	18394 <_start@@Base+0x3d94>
   1836c:	mov	r2, #4
   18370:	movw	r1, #60792	; 0xed78
   18374:	movt	r1, #3
   18378:	mov	r0, r4
   1837c:	bl	14530 <memcmp@plt>
   18380:	cmp	r0, #0
   18384:	moveq	r3, #1
   18388:	strbeq	r3, [r7]
   1838c:	addeq	r0, r4, #4
   18390:	beq	18414 <_start@@Base+0x3e14>
   18394:	cmp	r6, #4
   18398:	ble	183c4 <_start@@Base+0x3dc4>
   1839c:	mov	r2, #5
   183a0:	movw	r1, #60800	; 0xed80
   183a4:	movt	r1, #3
   183a8:	mov	r0, r4
   183ac:	bl	14530 <memcmp@plt>
   183b0:	cmp	r0, #0
   183b4:	moveq	r3, #0
   183b8:	strbeq	r3, [r7]
   183bc:	addeq	r0, r4, #5
   183c0:	beq	18414 <_start@@Base+0x3e14>
   183c4:	mov	r2, #0
   183c8:	mov	r3, #0
   183cc:	strd	r2, [sp, #16]
   183d0:	mov	r3, #0
   183d4:	str	r3, [sp, #12]
   183d8:	cmp	r4, r5
   183dc:	beq	18484 <_start@@Base+0x3e84>
   183e0:	add	r3, sp, #16
   183e4:	str	r3, [sp]
   183e8:	add	r3, sp, #12
   183ec:	mov	r2, r5
   183f0:	mov	r1, r4
   183f4:	mov	r0, r8
   183f8:	bl	2f170 <flatcc_json_parser_integer@@Base>
   183fc:	cmp	r4, r0
   18400:	moveq	r2, #0
   18404:	bne	1842c <_start@@Base+0x3e2c>
   18408:	adds	r2, r2, #0
   1840c:	movne	r2, #1
   18410:	strb	r2, [r7]
   18414:	add	sp, sp, #24
   18418:	ldrd	r4, [sp]
   1841c:	ldrd	r6, [sp, #8]
   18420:	ldr	r8, [sp, #16]
   18424:	add	sp, sp, #20
   18428:	pop	{pc}		; (ldr pc, [sp], #4)
   1842c:	ldr	r3, [sp, #12]
   18430:	cmp	r3, #0
   18434:	bne	18468 <_start@@Base+0x3e68>
   18438:	ldrd	r2, [sp, #16]
   1843c:	cmp	r3, #0
   18440:	cmpeq	r2, #255	; 0xff
   18444:	uxtbls	r2, r2
   18448:	bls	18408 <_start@@Base+0x3e08>
   1844c:	mov	r3, #7
   18450:	mov	r2, r5
   18454:	mov	r1, r0
   18458:	mov	r0, r8
   1845c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18460:	mov	r2, #0
   18464:	b	18408 <_start@@Base+0x3e08>
   18468:	mov	r3, #8
   1846c:	mov	r2, r5
   18470:	mov	r1, r0
   18474:	mov	r0, r8
   18478:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1847c:	mov	r2, #0
   18480:	b	18408 <_start@@Base+0x3e08>
   18484:	mov	r0, r5
   18488:	mov	r2, #0
   1848c:	b	18408 <_start@@Base+0x3e08>
   18490:	strd	r4, [sp, #-16]!
   18494:	str	r6, [sp, #8]
   18498:	str	lr, [sp, #12]
   1849c:	mov	r5, r0
   184a0:	mov	r0, r1
   184a4:	mov	r4, r2
   184a8:	sub	r2, r2, r1
   184ac:	cmp	r2, r3
   184b0:	ble	1852c <_start@@Base+0x3f2c>
   184b4:	ldr	r2, [r5, #12]
   184b8:	cmp	r2, #0
   184bc:	beq	1853c <_start@@Base+0x3f3c>
   184c0:	add	r1, r1, r3
   184c4:	ldrb	r3, [r0, r3]
   184c8:	cmp	r3, #58	; 0x3a
   184cc:	cmpne	r3, #32
   184d0:	bhi	1852c <_start@@Base+0x3f2c>
   184d4:	mov	r3, #0
   184d8:	str	r3, [r5, #12]
   184dc:	sub	r3, r4, r1
   184e0:	cmp	r3, #1
   184e4:	ble	184f8 <_start@@Base+0x3ef8>
   184e8:	ldrb	r3, [r1]
   184ec:	cmp	r3, #32
   184f0:	bhi	18508 <_start@@Base+0x3f08>
   184f4:	beq	18554 <_start@@Base+0x3f54>
   184f8:	mov	r2, r4
   184fc:	mov	r0, r5
   18500:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   18504:	mov	r1, r0
   18508:	cmp	r4, r1
   1850c:	beq	1851c <_start@@Base+0x3f1c>
   18510:	ldrb	r3, [r1]
   18514:	cmp	r3, #58	; 0x3a
   18518:	beq	18568 <_start@@Base+0x3f68>
   1851c:	mov	r3, #4
   18520:	mov	r2, r4
   18524:	mov	r0, r5
   18528:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1852c:	ldrd	r4, [sp]
   18530:	ldr	r6, [sp, #8]
   18534:	add	sp, sp, #12
   18538:	pop	{pc}		; (ldr pc, [sp], #4)
   1853c:	ldrb	r2, [r1, r3]
   18540:	cmp	r2, #34	; 0x22
   18544:	bne	1852c <_start@@Base+0x3f2c>
   18548:	add	r3, r3, #1
   1854c:	add	r1, r1, r3
   18550:	b	184dc <_start@@Base+0x3edc>
   18554:	ldrb	r3, [r1, #1]
   18558:	cmp	r3, #32
   1855c:	addhi	r1, r1, #1
   18560:	bls	184f8 <_start@@Base+0x3ef8>
   18564:	b	18508 <_start@@Base+0x3f08>
   18568:	mov	r2, r4
   1856c:	add	r1, r1, #1
   18570:	mov	r0, r5
   18574:	bl	1809c <_start@@Base+0x3a9c>
   18578:	b	1852c <_start@@Base+0x3f2c>
   1857c:	strd	r4, [sp, #-16]!
   18580:	str	r6, [sp, #8]
   18584:	str	lr, [sp, #12]
   18588:	mov	r6, r0
   1858c:	mov	r4, r2
   18590:	mov	r5, r3
   18594:	cmp	r1, r2
   18598:	beq	185a8 <_start@@Base+0x3fa8>
   1859c:	ldrb	r3, [r1]
   185a0:	cmp	r3, #91	; 0x5b
   185a4:	beq	185d0 <_start@@Base+0x3fd0>
   185a8:	mov	r3, #0
   185ac:	str	r3, [r5]
   185b0:	mov	r3, #22
   185b4:	mov	r2, r4
   185b8:	mov	r0, r6
   185bc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   185c0:	ldrd	r4, [sp]
   185c4:	ldr	r6, [sp, #8]
   185c8:	add	sp, sp, #12
   185cc:	pop	{pc}		; (ldr pc, [sp], #4)
   185d0:	add	r0, r1, #1
   185d4:	sub	r3, r2, r0
   185d8:	cmp	r3, #1
   185dc:	ble	185f0 <_start@@Base+0x3ff0>
   185e0:	ldrb	r3, [r1, #1]
   185e4:	cmp	r3, #32
   185e8:	bhi	18600 <_start@@Base+0x4000>
   185ec:	beq	18620 <_start@@Base+0x4020>
   185f0:	mov	r2, r4
   185f4:	mov	r1, r0
   185f8:	mov	r0, r6
   185fc:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   18600:	cmp	r4, r0
   18604:	beq	18614 <_start@@Base+0x4014>
   18608:	ldrb	r3, [r0]
   1860c:	cmp	r3, #93	; 0x5d
   18610:	beq	18634 <_start@@Base+0x4034>
   18614:	mov	r3, #1
   18618:	str	r3, [r5]
   1861c:	b	185c0 <_start@@Base+0x3fc0>
   18620:	ldrb	r3, [r1, #2]
   18624:	cmp	r3, #32
   18628:	addhi	r0, r1, #2
   1862c:	bls	185f0 <_start@@Base+0x3ff0>
   18630:	b	18600 <_start@@Base+0x4000>
   18634:	mov	r3, #0
   18638:	str	r3, [r5]
   1863c:	mov	r2, r4
   18640:	add	r1, r0, #1
   18644:	mov	r0, r6
   18648:	bl	1809c <_start@@Base+0x3a9c>
   1864c:	b	185c0 <_start@@Base+0x3fc0>
   18650:	strd	r4, [sp, #-16]!
   18654:	str	r6, [sp, #8]
   18658:	str	lr, [sp, #12]
   1865c:	mov	r6, r0
   18660:	mov	r4, r2
   18664:	mov	r5, r3
   18668:	cmp	r1, r2
   1866c:	beq	1867c <_start@@Base+0x407c>
   18670:	ldrb	r3, [r1]
   18674:	cmp	r3, #123	; 0x7b
   18678:	beq	186a4 <_start@@Base+0x40a4>
   1867c:	mov	r3, #0
   18680:	str	r3, [r5]
   18684:	mov	r3, #21
   18688:	mov	r2, r4
   1868c:	mov	r0, r6
   18690:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18694:	ldrd	r4, [sp]
   18698:	ldr	r6, [sp, #8]
   1869c:	add	sp, sp, #12
   186a0:	pop	{pc}		; (ldr pc, [sp], #4)
   186a4:	add	r0, r1, #1
   186a8:	sub	r3, r2, r0
   186ac:	cmp	r3, #1
   186b0:	ble	186c4 <_start@@Base+0x40c4>
   186b4:	ldrb	r3, [r1, #1]
   186b8:	cmp	r3, #32
   186bc:	bhi	186d4 <_start@@Base+0x40d4>
   186c0:	beq	186f4 <_start@@Base+0x40f4>
   186c4:	mov	r2, r4
   186c8:	mov	r1, r0
   186cc:	mov	r0, r6
   186d0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   186d4:	cmp	r4, r0
   186d8:	beq	186e8 <_start@@Base+0x40e8>
   186dc:	ldrb	r3, [r0]
   186e0:	cmp	r3, #125	; 0x7d
   186e4:	beq	18708 <_start@@Base+0x4108>
   186e8:	mov	r3, #1
   186ec:	str	r3, [r5]
   186f0:	b	18694 <_start@@Base+0x4094>
   186f4:	ldrb	r3, [r1, #2]
   186f8:	cmp	r3, #32
   186fc:	addhi	r0, r1, #2
   18700:	bls	186c4 <_start@@Base+0x40c4>
   18704:	b	186d4 <_start@@Base+0x40d4>
   18708:	mov	r3, #0
   1870c:	str	r3, [r5]
   18710:	mov	r2, r4
   18714:	add	r1, r0, #1
   18718:	mov	r0, r6
   1871c:	bl	1809c <_start@@Base+0x3a9c>
   18720:	b	18694 <_start@@Base+0x4094>
   18724:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18728:	strd	r6, [sp, #8]
   1872c:	strd	r8, [sp, #16]
   18730:	strd	sl, [sp, #24]
   18734:	str	lr, [sp, #32]
   18738:	sub	sp, sp, #36	; 0x24
   1873c:	mov	r8, r0
   18740:	mov	r7, r2
   18744:	str	r3, [sp, #12]
   18748:	ldr	fp, [sp, #72]	; 0x48
   1874c:	mov	r3, #0
   18750:	str	r3, [fp]
   18754:	cmp	r1, r2
   18758:	beq	188a4 <_start@@Base+0x42a4>
   1875c:	ldrb	r3, [r1]
   18760:	cmp	r3, #34	; 0x22
   18764:	addeq	r4, r1, #1
   18768:	moveq	r3, #0
   1876c:	streq	r3, [r0, #12]
   18770:	beq	187ac <_start@@Base+0x41ac>
   18774:	cmp	r3, #46	; 0x2e
   18778:	movne	r3, #1
   1877c:	strne	r3, [r0, #12]
   18780:	movne	r4, r1
   18784:	beq	18794 <_start@@Base+0x4194>
   18788:	add	sl, sp, #16
   1878c:	add	r9, sp, #24
   18790:	b	18834 <_start@@Base+0x4234>
   18794:	mov	r3, #5
   18798:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1879c:	mov	r4, r0
   187a0:	ldr	r3, [r8, #12]
   187a4:	cmp	r3, #0
   187a8:	bne	187dc <_start@@Base+0x41dc>
   187ac:	sub	r3, r7, r4
   187b0:	cmp	r3, #1
   187b4:	ble	187c8 <_start@@Base+0x41c8>
   187b8:	ldrb	r3, [r4]
   187bc:	cmp	r3, #32
   187c0:	bhi	187dc <_start@@Base+0x41dc>
   187c4:	beq	187e8 <_start@@Base+0x41e8>
   187c8:	mov	r2, r7
   187cc:	mov	r1, r4
   187d0:	mov	r0, r8
   187d4:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   187d8:	mov	r4, r0
   187dc:	cmp	r7, r4
   187e0:	bne	18788 <_start@@Base+0x4188>
   187e4:	b	188c0 <_start@@Base+0x42c0>
   187e8:	ldrb	r3, [r4, #1]
   187ec:	cmp	r3, #32
   187f0:	addhi	r4, r4, #1
   187f4:	bls	187c8 <_start@@Base+0x41c8>
   187f8:	b	187dc <_start@@Base+0x41dc>
   187fc:	mov	r4, r0
   18800:	ldrd	r0, [sp, #24]
   18804:	ldr	r3, [sp, #20]
   18808:	cmp	r3, #0
   1880c:	beq	18898 <_start@@Base+0x4298>
   18810:	bl	3e6ac <flatcc_json_printer_clear@@Base+0x5c8>
   18814:	vmov	s15, r0
   18818:	vneg.f32	s14, s15
   1881c:	vldr	s15, [fp]
   18820:	vadd.f32	s15, s15, s14
   18824:	vstr	s15, [fp]
   18828:	ldr	r3, [sp, #16]
   1882c:	cmp	r3, #0
   18830:	beq	188c0 <_start@@Base+0x42c0>
   18834:	ldr	r6, [sp, #12]
   18838:	mov	r5, r4
   1883c:	str	sl, [sp, #4]
   18840:	str	r9, [sp]
   18844:	ldr	r4, [r6]
   18848:	add	r3, sp, #20
   1884c:	mov	r2, r7
   18850:	mov	r1, r5
   18854:	mov	r0, r8
   18858:	blx	r4
   1885c:	cmp	r7, r0
   18860:	beq	188bc <_start@@Base+0x42bc>
   18864:	cmp	r5, r0
   18868:	bne	187fc <_start@@Base+0x41fc>
   1886c:	mov	r5, r0
   18870:	ldr	r3, [r6, #4]!
   18874:	cmp	r3, #0
   18878:	bne	1883c <_start@@Base+0x423c>
   1887c:	mov	r3, #23
   18880:	mov	r2, r7
   18884:	mov	r1, r0
   18888:	mov	r0, r8
   1888c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18890:	mov	r4, r0
   18894:	b	188c0 <_start@@Base+0x42c0>
   18898:	bl	3e6ac <flatcc_json_printer_clear@@Base+0x5c8>
   1889c:	vmov	s14, r0
   188a0:	b	1881c <_start@@Base+0x421c>
   188a4:	ldr	r3, [r0, #12]
   188a8:	cmp	r3, #0
   188ac:	movne	r4, r2
   188b0:	bne	188c0 <_start@@Base+0x42c0>
   188b4:	mov	r4, r7
   188b8:	b	187c8 <_start@@Base+0x41c8>
   188bc:	mov	r4, r0
   188c0:	mov	r0, r4
   188c4:	add	sp, sp, #36	; 0x24
   188c8:	ldrd	r4, [sp]
   188cc:	ldrd	r6, [sp, #8]
   188d0:	ldrd	r8, [sp, #16]
   188d4:	ldrd	sl, [sp, #24]
   188d8:	add	sp, sp, #32
   188dc:	pop	{pc}		; (ldr pc, [sp], #4)
   188e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   188e4:	strd	r6, [sp, #8]
   188e8:	strd	r8, [sp, #16]
   188ec:	strd	sl, [sp, #24]
   188f0:	str	lr, [sp, #32]
   188f4:	sub	sp, sp, #36	; 0x24
   188f8:	mov	r8, r0
   188fc:	mov	r7, r2
   18900:	str	r3, [sp, #12]
   18904:	ldr	fp, [sp, #72]	; 0x48
   18908:	mov	r2, #0
   1890c:	mov	r3, #0
   18910:	strd	r2, [fp]
   18914:	cmp	r1, r7
   18918:	beq	18a68 <_start@@Base+0x4468>
   1891c:	ldrb	r3, [r1]
   18920:	cmp	r3, #34	; 0x22
   18924:	addeq	r4, r1, #1
   18928:	moveq	r3, #0
   1892c:	streq	r3, [r0, #12]
   18930:	beq	18970 <_start@@Base+0x4370>
   18934:	cmp	r3, #46	; 0x2e
   18938:	movne	r3, #1
   1893c:	strne	r3, [r0, #12]
   18940:	movne	r4, r1
   18944:	beq	18954 <_start@@Base+0x4354>
   18948:	add	sl, sp, #16
   1894c:	add	r9, sp, #24
   18950:	b	189f8 <_start@@Base+0x43f8>
   18954:	mov	r3, #5
   18958:	mov	r2, r7
   1895c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18960:	mov	r4, r0
   18964:	ldr	r3, [r8, #12]
   18968:	cmp	r3, #0
   1896c:	bne	189a0 <_start@@Base+0x43a0>
   18970:	sub	r3, r7, r4
   18974:	cmp	r3, #1
   18978:	ble	1898c <_start@@Base+0x438c>
   1897c:	ldrb	r3, [r4]
   18980:	cmp	r3, #32
   18984:	bhi	189a0 <_start@@Base+0x43a0>
   18988:	beq	189ac <_start@@Base+0x43ac>
   1898c:	mov	r2, r7
   18990:	mov	r1, r4
   18994:	mov	r0, r8
   18998:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1899c:	mov	r4, r0
   189a0:	cmp	r7, r4
   189a4:	bne	18948 <_start@@Base+0x4348>
   189a8:	b	18a84 <_start@@Base+0x4484>
   189ac:	ldrb	r3, [r4, #1]
   189b0:	cmp	r3, #32
   189b4:	addhi	r4, r4, #1
   189b8:	bls	1898c <_start@@Base+0x438c>
   189bc:	b	189a0 <_start@@Base+0x43a0>
   189c0:	mov	r4, r0
   189c4:	ldrd	r0, [sp, #24]
   189c8:	ldr	r3, [sp, #20]
   189cc:	cmp	r3, #0
   189d0:	beq	18a5c <_start@@Base+0x445c>
   189d4:	bl	3e474 <flatcc_json_printer_clear@@Base+0x390>
   189d8:	vmov	d7, r0, r1
   189dc:	vneg.f64	d6, d7
   189e0:	vldr	d7, [fp]
   189e4:	vadd.f64	d7, d7, d6
   189e8:	vstr	d7, [fp]
   189ec:	ldr	r3, [sp, #16]
   189f0:	cmp	r3, #0
   189f4:	beq	18a84 <_start@@Base+0x4484>
   189f8:	ldr	r6, [sp, #12]
   189fc:	mov	r5, r4
   18a00:	str	sl, [sp, #4]
   18a04:	str	r9, [sp]
   18a08:	ldr	r4, [r6]
   18a0c:	add	r3, sp, #20
   18a10:	mov	r2, r7
   18a14:	mov	r1, r5
   18a18:	mov	r0, r8
   18a1c:	blx	r4
   18a20:	cmp	r7, r0
   18a24:	beq	18a80 <_start@@Base+0x4480>
   18a28:	cmp	r5, r0
   18a2c:	bne	189c0 <_start@@Base+0x43c0>
   18a30:	mov	r5, r0
   18a34:	ldr	r3, [r6, #4]!
   18a38:	cmp	r3, #0
   18a3c:	bne	18a00 <_start@@Base+0x4400>
   18a40:	mov	r3, #23
   18a44:	mov	r2, r7
   18a48:	mov	r1, r0
   18a4c:	mov	r0, r8
   18a50:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18a54:	mov	r4, r0
   18a58:	b	18a84 <_start@@Base+0x4484>
   18a5c:	bl	3e474 <flatcc_json_printer_clear@@Base+0x390>
   18a60:	vmov	d6, r0, r1
   18a64:	b	189e0 <_start@@Base+0x43e0>
   18a68:	ldr	r3, [r0, #12]
   18a6c:	cmp	r3, #0
   18a70:	movne	r4, r7
   18a74:	bne	18a84 <_start@@Base+0x4484>
   18a78:	mov	r4, r7
   18a7c:	b	1898c <_start@@Base+0x438c>
   18a80:	mov	r4, r0
   18a84:	mov	r0, r4
   18a88:	add	sp, sp, #36	; 0x24
   18a8c:	ldrd	r4, [sp]
   18a90:	ldrd	r6, [sp, #8]
   18a94:	ldrd	r8, [sp, #16]
   18a98:	ldrd	sl, [sp, #24]
   18a9c:	add	sp, sp, #32
   18aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   18aa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18aa8:	strd	r6, [sp, #8]
   18aac:	strd	r8, [sp, #16]
   18ab0:	strd	sl, [sp, #24]
   18ab4:	str	lr, [sp, #32]
   18ab8:	sub	sp, sp, #116	; 0x74
   18abc:	mov	r8, r0
   18ac0:	mov	r4, r1
   18ac4:	mov	r5, r2
   18ac8:	mov	r9, r3
   18acc:	mov	r3, #0
   18ad0:	str	r3, [r9]
   18ad4:	mov	r1, #10
   18ad8:	ldr	r0, [r0]
   18adc:	bl	27be4 <flatcc_builder_start_table@@Base>
   18ae0:	cmp	r0, #0
   18ae4:	beq	18b20 <_start@@Base+0x4520>
   18ae8:	mov	r3, #33	; 0x21
   18aec:	mov	r2, r5
   18af0:	mov	r1, r4
   18af4:	mov	r0, r8
   18af8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18afc:	mov	r4, r0
   18b00:	mov	r0, r4
   18b04:	add	sp, sp, #116	; 0x74
   18b08:	ldrd	r4, [sp]
   18b0c:	ldrd	r6, [sp, #8]
   18b10:	ldrd	r8, [sp, #16]
   18b14:	ldrd	sl, [sp, #24]
   18b18:	add	sp, sp, #32
   18b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18b20:	add	r3, sp, #104	; 0x68
   18b24:	str	r3, [sp]
   18b28:	mov	r3, #5
   18b2c:	mov	r2, r5
   18b30:	mov	r1, r4
   18b34:	mov	r0, r8
   18b38:	bl	2f8b8 <flatcc_json_parser_prepare_unions@@Base>
   18b3c:	cmp	r5, r0
   18b40:	beq	18ae8 <_start@@Base+0x44e8>
   18b44:	add	r3, sp, #108	; 0x6c
   18b48:	mov	r2, r5
   18b4c:	mov	r1, r4
   18b50:	mov	r0, r8
   18b54:	bl	18650 <_start@@Base+0x4050>
   18b58:	mov	r4, r0
   18b5c:	ldr	r3, [sp, #108]	; 0x6c
   18b60:	cmp	r3, #0
   18b64:	beq	193e8 <_start@@Base+0x4de8>
   18b68:	add	r7, pc, #992	; 0x3e0
   18b6c:	ldrd	r6, [r7]
   18b70:	strd	sl, [sp, #24]
   18b74:	b	1901c <_start@@Base+0x4a1c>
   18b78:	mov	r3, #5
   18b7c:	mov	r2, r5
   18b80:	mov	r1, r4
   18b84:	mov	r0, r8
   18b88:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   18b8c:	mov	r4, r0
   18b90:	b	1904c <_start@@Base+0x4a4c>
   18b94:	add	r4, r4, #8
   18b98:	mov	r1, r5
   18b9c:	mov	r0, r4
   18ba0:	bl	146f0 <_start@@Base+0xf0>
   18ba4:	bic	r3, r0, #255	; 0xff
   18ba8:	str	r3, [sp, #48]	; 0x30
   18bac:	str	r1, [sp, #52]	; 0x34
   18bb0:	add	r3, pc, #928	; 0x3a0
   18bb4:	ldrd	r2, [r3]
   18bb8:	ldrd	sl, [sp, #48]	; 0x30
   18bbc:	cmp	fp, r3
   18bc0:	cmpeq	sl, r2
   18bc4:	beq	18c10 <_start@@Base+0x4610>
   18bc8:	mov	r3, #0
   18bcc:	str	r3, [sp, #24]
   18bd0:	lsr	r3, r1, #16
   18bd4:	lsl	r3, r3, #16
   18bd8:	str	r3, [sp, #28]
   18bdc:	mov	r2, #0
   18be0:	mov	r3, #0
   18be4:	movt	r3, #29556	; 0x7374
   18be8:	ldrd	r0, [sp, #24]
   18bec:	cmp	r1, r3
   18bf0:	cmpeq	r0, r2
   18bf4:	beq	18c84 <_start@@Base+0x4684>
   18bf8:	mov	r2, r5
   18bfc:	mov	r1, r4
   18c00:	mov	r0, r8
   18c04:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18c08:	mov	r1, r0
   18c0c:	b	18ffc <_start@@Base+0x49fc>
   18c10:	mov	r3, #7
   18c14:	mov	r2, r5
   18c18:	mov	r1, r4
   18c1c:	mov	r0, r8
   18c20:	bl	18490 <_start@@Base+0x3e90>
   18c24:	mov	r1, r0
   18c28:	cmp	r4, r0
   18c2c:	beq	18c70 <_start@@Base+0x4670>
   18c30:	movw	r3, #43688	; 0xaaa8
   18c34:	movt	r3, #1
   18c38:	str	r3, [sp, #12]
   18c3c:	movw	r3, #20592	; 0x5070
   18c40:	movt	r3, #5
   18c44:	str	r3, [sp, #8]
   18c48:	ldr	r3, [sp, #104]	; 0x68
   18c4c:	str	r3, [sp, #4]
   18c50:	mov	r3, #3
   18c54:	str	r3, [sp]
   18c58:	mov	r3, #1
   18c5c:	mov	r2, r5
   18c60:	mov	r0, r8
   18c64:	bl	2fb1c <flatcc_json_parser_union_type@@Base>
   18c68:	mov	r1, r0
   18c6c:	b	18ffc <_start@@Base+0x49fc>
   18c70:	mov	r2, r5
   18c74:	mov	r0, r8
   18c78:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18c7c:	mov	r1, r0
   18c80:	b	18ffc <_start@@Base+0x49fc>
   18c84:	mov	r3, #2
   18c88:	mov	r2, r5
   18c8c:	mov	r1, r4
   18c90:	mov	r0, r8
   18c94:	bl	18490 <_start@@Base+0x3e90>
   18c98:	cmp	r4, r0
   18c9c:	beq	18cd8 <_start@@Base+0x46d8>
   18ca0:	movw	r3, #43688	; 0xaaa8
   18ca4:	movt	r3, #1
   18ca8:	str	r3, [sp, #8]
   18cac:	ldr	r3, [sp, #104]	; 0x68
   18cb0:	str	r3, [sp, #4]
   18cb4:	mov	r3, #3
   18cb8:	str	r3, [sp]
   18cbc:	mov	r3, #1
   18cc0:	mov	r2, r5
   18cc4:	mov	r1, r0
   18cc8:	mov	r0, r8
   18ccc:	bl	2f9b4 <flatcc_json_parser_union@@Base>
   18cd0:	mov	r1, r0
   18cd4:	b	18ffc <_start@@Base+0x49fc>
   18cd8:	mov	r2, r5
   18cdc:	mov	r1, r0
   18ce0:	mov	r0, r8
   18ce4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18ce8:	mov	r1, r0
   18cec:	b	18ffc <_start@@Base+0x49fc>
   18cf0:	add	r4, r4, #8
   18cf4:	mov	r1, r5
   18cf8:	mov	r0, r4
   18cfc:	bl	146f0 <_start@@Base+0xf0>
   18d00:	mov	r3, #0
   18d04:	str	r3, [sp, #40]	; 0x28
   18d08:	lsr	r3, r1, #16
   18d0c:	lsl	r3, r3, #16
   18d10:	str	r3, [sp, #44]	; 0x2c
   18d14:	mov	r2, #0
   18d18:	mov	r3, #0
   18d1c:	movt	r3, #28773	; 0x7065
   18d20:	ldrd	r0, [sp, #40]	; 0x28
   18d24:	cmp	r1, r3
   18d28:	cmpeq	r0, r2
   18d2c:	beq	18d48 <_start@@Base+0x4748>
   18d30:	mov	r2, r5
   18d34:	mov	r1, r4
   18d38:	mov	r0, r8
   18d3c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18d40:	mov	r1, r0
   18d44:	b	18ffc <_start@@Base+0x49fc>
   18d48:	mov	r3, #2
   18d4c:	mov	r2, r5
   18d50:	mov	r1, r4
   18d54:	mov	r0, r8
   18d58:	bl	18490 <_start@@Base+0x3e90>
   18d5c:	cmp	r4, r0
   18d60:	beq	18da4 <_start@@Base+0x47a4>
   18d64:	movw	r3, #43688	; 0xaaa8
   18d68:	movt	r3, #1
   18d6c:	str	r3, [sp, #12]
   18d70:	ldr	r3, [pc, #512]	; 18f78 <_start@@Base+0x4978>
   18d74:	str	r3, [sp, #8]
   18d78:	ldr	r3, [sp, #104]	; 0x68
   18d7c:	str	r3, [sp, #4]
   18d80:	mov	r3, #7
   18d84:	str	r3, [sp]
   18d88:	mov	r3, #3
   18d8c:	mov	r2, r5
   18d90:	mov	r1, r0
   18d94:	mov	r0, r8
   18d98:	bl	2fb1c <flatcc_json_parser_union_type@@Base>
   18d9c:	mov	r1, r0
   18da0:	b	18ffc <_start@@Base+0x49fc>
   18da4:	mov	r2, r5
   18da8:	mov	r1, r0
   18dac:	mov	r0, r8
   18db0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18db4:	mov	r1, r0
   18db8:	b	18ffc <_start@@Base+0x49fc>
   18dbc:	mov	r3, #5
   18dc0:	mov	r2, r5
   18dc4:	mov	r1, r4
   18dc8:	mov	r0, r8
   18dcc:	bl	18490 <_start@@Base+0x3e90>
   18dd0:	cmp	r0, r4
   18dd4:	beq	18e10 <_start@@Base+0x4810>
   18dd8:	movw	r3, #43688	; 0xaaa8
   18ddc:	movt	r3, #1
   18de0:	str	r3, [sp, #8]
   18de4:	ldr	r3, [sp, #104]	; 0x68
   18de8:	str	r3, [sp, #4]
   18dec:	mov	r3, #7
   18df0:	str	r3, [sp]
   18df4:	mov	r3, #3
   18df8:	mov	r2, r5
   18dfc:	mov	r1, r0
   18e00:	mov	r0, r8
   18e04:	bl	2f9b4 <flatcc_json_parser_union@@Base>
   18e08:	mov	r1, r0
   18e0c:	b	18ffc <_start@@Base+0x49fc>
   18e10:	mov	r2, r5
   18e14:	mov	r1, r4
   18e18:	mov	r0, r8
   18e1c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18e20:	mov	r1, r0
   18e24:	b	18ffc <_start@@Base+0x49fc>
   18e28:	add	r3, pc, #304	; 0x130
   18e2c:	ldrd	r2, [r3]
   18e30:	cmp	r1, r3
   18e34:	cmpeq	r0, r2
   18e38:	bhi	190c8 <_start@@Base+0x4ac8>
   18e3c:	add	r3, pc, #292	; 0x124
   18e40:	ldrd	r2, [r3]
   18e44:	cmp	r1, r3
   18e48:	cmpeq	r0, r2
   18e4c:	bne	18fe8 <_start@@Base+0x49e8>
   18e50:	add	r4, r4, #8
   18e54:	mov	r1, r5
   18e58:	mov	r0, r4
   18e5c:	bl	146f0 <_start@@Base+0xf0>
   18e60:	bic	r3, r0, #255	; 0xff
   18e64:	str	r3, [sp, #72]	; 0x48
   18e68:	str	r1, [sp, #76]	; 0x4c
   18e6c:	add	r3, pc, #252	; 0xfc
   18e70:	ldrd	r2, [r3]
   18e74:	ldrd	sl, [sp, #72]	; 0x48
   18e78:	cmp	fp, r3
   18e7c:	cmpeq	sl, r2
   18e80:	beq	18ecc <_start@@Base+0x48cc>
   18e84:	mov	r3, #0
   18e88:	str	r3, [sp, #56]	; 0x38
   18e8c:	lsr	r3, r1, #16
   18e90:	lsl	r3, r3, #16
   18e94:	str	r3, [sp, #60]	; 0x3c
   18e98:	mov	r2, #0
   18e9c:	mov	r3, #0
   18ea0:	movt	r3, #29299	; 0x7273
   18ea4:	ldrd	r0, [sp, #56]	; 0x38
   18ea8:	cmp	r1, r3
   18eac:	cmpeq	r0, r2
   18eb0:	beq	18f80 <_start@@Base+0x4980>
   18eb4:	mov	r2, r5
   18eb8:	mov	r1, r4
   18ebc:	mov	r0, r8
   18ec0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18ec4:	mov	r1, r0
   18ec8:	b	18ffc <_start@@Base+0x49fc>
   18ecc:	mov	r3, #7
   18ed0:	mov	r2, r5
   18ed4:	mov	r1, r4
   18ed8:	mov	r0, r8
   18edc:	bl	18490 <_start@@Base+0x3e90>
   18ee0:	cmp	r4, r0
   18ee4:	beq	18f34 <_start@@Base+0x4934>
   18ee8:	movw	r3, #18420	; 0x47f4
   18eec:	movt	r3, #1
   18ef0:	str	r3, [sp, #16]
   18ef4:	movw	r3, #43688	; 0xaaa8
   18ef8:	movt	r3, #1
   18efc:	str	r3, [sp, #12]
   18f00:	ldr	r3, [pc, #116]	; 18f7c <_start@@Base+0x497c>
   18f04:	str	r3, [sp, #8]
   18f08:	ldr	r3, [sp, #104]	; 0x68
   18f0c:	str	r3, [sp, #4]
   18f10:	mov	r3, #9
   18f14:	str	r3, [sp]
   18f18:	mov	r3, #4
   18f1c:	mov	r2, r5
   18f20:	mov	r1, r0
   18f24:	mov	r0, r8
   18f28:	bl	2fe4c <flatcc_json_parser_union_type_vector@@Base>
   18f2c:	mov	r1, r0
   18f30:	b	18ffc <_start@@Base+0x49fc>
   18f34:	mov	r2, r5
   18f38:	mov	r1, r0
   18f3c:	mov	r0, r8
   18f40:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18f44:	mov	r1, r0
   18f48:	b	18ffc <_start@@Base+0x49fc>
   18f4c:	nop	{0}
   18f50:	cmnvs	r3, r4, ror #8
   18f54:	cmnvs	r8, #-2147483620	; 0x8000001c
   18f58:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   18f5c:	cmnvc	r4, #116, 30	; 0x1d0
   18f60:	svcpl	0x00636860
   18f64:			; <UNDEFINED> instruction: 0x6d61696e
   18f68:	cmnvs	r3, r5, ror #8
   18f6c:	cmnvs	r8, #-2147483620	; 0x8000001c
   18f70:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   18f74:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   18f78:	andeq	r5, r5, r0, lsl #1
   18f7c:	muleq	r5, r0, r0
   18f80:	mov	r3, #2
   18f84:	mov	r2, r5
   18f88:	mov	r1, r4
   18f8c:	mov	r0, r8
   18f90:	bl	18490 <_start@@Base+0x3e90>
   18f94:	mov	r1, r0
   18f98:	cmp	r4, r0
   18f9c:	beq	18fd4 <_start@@Base+0x49d4>
   18fa0:	movw	r3, #43688	; 0xaaa8
   18fa4:	movt	r3, #1
   18fa8:	str	r3, [sp, #8]
   18fac:	ldr	r3, [sp, #104]	; 0x68
   18fb0:	str	r3, [sp, #4]
   18fb4:	mov	r3, #9
   18fb8:	str	r3, [sp]
   18fbc:	mov	r3, #4
   18fc0:	mov	r2, r5
   18fc4:	mov	r0, r8
   18fc8:	bl	2fd60 <flatcc_json_parser_union_vector@@Base>
   18fcc:	mov	r1, r0
   18fd0:	b	18ffc <_start@@Base+0x49fc>
   18fd4:	mov	r2, r5
   18fd8:	mov	r0, r8
   18fdc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18fe0:	mov	r1, r0
   18fe4:	b	18ffc <_start@@Base+0x49fc>
   18fe8:	mov	r2, r5
   18fec:	mov	r1, r4
   18ff0:	mov	r0, r8
   18ff4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   18ff8:	mov	r1, r0
   18ffc:	add	r3, sp, #108	; 0x6c
   19000:	mov	r2, r5
   19004:	mov	r0, r8
   19008:	bl	180ec <_start@@Base+0x3aec>
   1900c:	mov	r4, r0
   19010:	ldr	r3, [sp, #108]	; 0x6c
   19014:	cmp	r3, #0
   19018:	beq	193e8 <_start@@Base+0x4de8>
   1901c:	cmp	r5, r4
   19020:	beq	1904c <_start@@Base+0x4a4c>
   19024:	ldrb	r3, [r4]
   19028:	cmp	r3, #34	; 0x22
   1902c:	addeq	r4, r4, #1
   19030:	moveq	r3, #0
   19034:	streq	r3, [r8, #12]
   19038:	beq	1904c <_start@@Base+0x4a4c>
   1903c:	cmp	r3, #46	; 0x2e
   19040:	movne	r3, #1
   19044:	strne	r3, [r8, #12]
   19048:	beq	18b78 <_start@@Base+0x4578>
   1904c:	mov	r1, r5
   19050:	mov	r0, r4
   19054:	bl	146f0 <_start@@Base+0xf0>
   19058:	cmp	r1, r7
   1905c:	cmpeq	r0, r6
   19060:	bhi	18e28 <_start@@Base+0x4828>
   19064:	add	r3, pc, #956	; 0x3bc
   19068:	ldrd	r2, [r3]
   1906c:	cmp	r1, r3
   19070:	cmpeq	r0, r2
   19074:	beq	18b94 <_start@@Base+0x4594>
   19078:	add	r3, pc, #944	; 0x3b0
   1907c:	ldrd	r2, [r3]
   19080:	cmp	r1, r3
   19084:	cmpeq	r0, r2
   19088:	beq	18cf0 <_start@@Base+0x46f0>
   1908c:	and	r3, r0, #-16777216	; 0xff000000
   19090:	str	r3, [sp, #32]
   19094:	str	r1, [sp, #36]	; 0x24
   19098:	add	r3, pc, #920	; 0x398
   1909c:	ldrd	r2, [r3]
   190a0:	ldrd	r0, [sp, #32]
   190a4:	cmp	r1, r3
   190a8:	cmpeq	r0, r2
   190ac:	beq	18dbc <_start@@Base+0x47bc>
   190b0:	mov	r2, r5
   190b4:	mov	r1, r4
   190b8:	mov	r0, r8
   190bc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   190c0:	mov	r1, r0
   190c4:	b	18ffc <_start@@Base+0x49fc>
   190c8:	add	r3, pc, #880	; 0x370
   190cc:	ldrd	r2, [r3]
   190d0:	cmp	r1, r3
   190d4:	cmpeq	r0, r2
   190d8:	beq	19160 <_start@@Base+0x4b60>
   190dc:	add	r3, pc, #868	; 0x364
   190e0:	ldrd	r2, [r3]
   190e4:	cmp	r1, r3
   190e8:	cmpeq	r0, r2
   190ec:	bne	193d0 <_start@@Base+0x4dd0>
   190f0:	add	r4, r4, #8
   190f4:	mov	r1, r5
   190f8:	mov	r0, r4
   190fc:	bl	146f0 <_start@@Base+0xf0>
   19100:	lsr	r3, r0, #16
   19104:	lsl	r3, r3, #16
   19108:	str	r3, [sp, #64]	; 0x40
   1910c:	str	r1, [sp, #68]	; 0x44
   19110:	add	r3, pc, #824	; 0x338
   19114:	ldrd	r2, [r3]
   19118:	ldrd	sl, [sp, #64]	; 0x40
   1911c:	cmp	fp, r3
   19120:	cmpeq	sl, r2
   19124:	beq	192f4 <_start@@Base+0x4cf4>
   19128:	mov	r3, #0
   1912c:	str	r3, [sp, #88]	; 0x58
   19130:	and	r3, r1, #-16777216	; 0xff000000
   19134:	str	r3, [sp, #92]	; 0x5c
   19138:	ldrd	r2, [sp, #88]	; 0x58
   1913c:	cmp	r3, #1795162112	; 0x6b000000
   19140:	cmpeq	r2, #0
   19144:	beq	19368 <_start@@Base+0x4d68>
   19148:	mov	r2, r5
   1914c:	mov	r1, r4
   19150:	mov	r0, r8
   19154:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   19158:	mov	r1, r0
   1915c:	b	18ffc <_start@@Base+0x49fc>
   19160:	add	r3, r4, #8
   19164:	mov	sl, r3
   19168:	mov	r1, r5
   1916c:	mov	r0, r3
   19170:	bl	146f0 <_start@@Base+0xf0>
   19174:	add	r3, pc, #732	; 0x2dc
   19178:	ldrd	r2, [r3]
   1917c:	cmp	r1, r3
   19180:	cmpeq	r0, r2
   19184:	beq	191c8 <_start@@Base+0x4bc8>
   19188:	lsr	r3, r0, #16
   1918c:	lsl	r3, r3, #16
   19190:	str	r3, [sp, #80]	; 0x50
   19194:	str	r1, [sp, #84]	; 0x54
   19198:	add	r3, pc, #704	; 0x2c0
   1919c:	ldrd	r2, [r3]
   191a0:	ldrd	r0, [sp, #80]	; 0x50
   191a4:	cmp	r1, r3
   191a8:	cmpeq	r0, r2
   191ac:	beq	19288 <_start@@Base+0x4c88>
   191b0:	mov	r2, r5
   191b4:	mov	r1, sl
   191b8:	mov	r0, r8
   191bc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   191c0:	mov	r1, r0
   191c4:	b	18ffc <_start@@Base+0x49fc>
   191c8:	add	r4, r4, #16
   191cc:	mov	r1, r5
   191d0:	mov	r0, r4
   191d4:	bl	146f0 <_start@@Base+0xf0>
   191d8:	mov	r3, #0
   191dc:	str	r3, [sp, #96]	; 0x60
   191e0:	bic	r3, r1, #255	; 0xff
   191e4:	str	r3, [sp, #100]	; 0x64
   191e8:	add	r3, pc, #632	; 0x278
   191ec:	ldrd	r2, [r3]
   191f0:	ldrd	r0, [sp, #96]	; 0x60
   191f4:	cmp	r1, r3
   191f8:	cmpeq	r0, r2
   191fc:	beq	19218 <_start@@Base+0x4c18>
   19200:	mov	r2, r5
   19204:	mov	r1, r4
   19208:	mov	r0, r8
   1920c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   19210:	mov	r1, r0
   19214:	b	18ffc <_start@@Base+0x49fc>
   19218:	mov	r3, #3
   1921c:	mov	r2, r5
   19220:	mov	r1, r4
   19224:	mov	r0, r8
   19228:	bl	18490 <_start@@Base+0x3e90>
   1922c:	mov	r1, r0
   19230:	cmp	r4, r0
   19234:	beq	19274 <_start@@Base+0x4c74>
   19238:	movw	r3, #43688	; 0xaaa8
   1923c:	movt	r3, #1
   19240:	str	r3, [sp, #12]
   19244:	ldr	r3, [pc, #548]	; 19470 <_start@@Base+0x4e70>
   19248:	str	r3, [sp, #8]
   1924c:	ldr	r3, [sp, #104]	; 0x68
   19250:	str	r3, [sp, #4]
   19254:	mov	r3, #1
   19258:	str	r3, [sp]
   1925c:	mov	r3, #0
   19260:	mov	r2, r5
   19264:	mov	r0, r8
   19268:	bl	2fb1c <flatcc_json_parser_union_type@@Base>
   1926c:	mov	r1, r0
   19270:	b	18ffc <_start@@Base+0x49fc>
   19274:	mov	r2, r5
   19278:	mov	r0, r8
   1927c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   19280:	mov	r1, r0
   19284:	b	18ffc <_start@@Base+0x49fc>
   19288:	mov	r3, #6
   1928c:	mov	r2, r5
   19290:	mov	r1, sl
   19294:	mov	r0, r8
   19298:	bl	18490 <_start@@Base+0x3e90>
   1929c:	cmp	sl, r0
   192a0:	beq	192dc <_start@@Base+0x4cdc>
   192a4:	movw	r3, #43688	; 0xaaa8
   192a8:	movt	r3, #1
   192ac:	str	r3, [sp, #8]
   192b0:	ldr	r3, [sp, #104]	; 0x68
   192b4:	str	r3, [sp, #4]
   192b8:	mov	r3, #1
   192bc:	str	r3, [sp]
   192c0:	mov	r3, #0
   192c4:	mov	r2, r5
   192c8:	mov	r1, r0
   192cc:	mov	r0, r8
   192d0:	bl	2f9b4 <flatcc_json_parser_union@@Base>
   192d4:	mov	r1, r0
   192d8:	b	18ffc <_start@@Base+0x49fc>
   192dc:	mov	r2, r5
   192e0:	mov	r1, r0
   192e4:	mov	r0, r8
   192e8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   192ec:	mov	r1, r0
   192f0:	b	18ffc <_start@@Base+0x49fc>
   192f4:	mov	r3, #6
   192f8:	mov	r2, r5
   192fc:	mov	r1, r4
   19300:	mov	r0, r8
   19304:	bl	18490 <_start@@Base+0x3e90>
   19308:	cmp	r4, r0
   1930c:	beq	19350 <_start@@Base+0x4d50>
   19310:	movw	r3, #43688	; 0xaaa8
   19314:	movt	r3, #1
   19318:	str	r3, [sp, #12]
   1931c:	ldr	r3, [pc, #336]	; 19474 <_start@@Base+0x4e74>
   19320:	str	r3, [sp, #8]
   19324:	ldr	r3, [sp, #104]	; 0x68
   19328:	str	r3, [sp, #4]
   1932c:	mov	r3, #5
   19330:	str	r3, [sp]
   19334:	mov	r3, #2
   19338:	mov	r2, r5
   1933c:	mov	r1, r0
   19340:	mov	r0, r8
   19344:	bl	2fb1c <flatcc_json_parser_union_type@@Base>
   19348:	mov	r1, r0
   1934c:	b	18ffc <_start@@Base+0x49fc>
   19350:	mov	r2, r5
   19354:	mov	r1, r0
   19358:	mov	r0, r8
   1935c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   19360:	mov	r1, r0
   19364:	b	18ffc <_start@@Base+0x49fc>
   19368:	mov	r3, #1
   1936c:	mov	r2, r5
   19370:	mov	r1, r4
   19374:	mov	r0, r8
   19378:	bl	18490 <_start@@Base+0x3e90>
   1937c:	mov	r1, r0
   19380:	cmp	r4, r0
   19384:	beq	193bc <_start@@Base+0x4dbc>
   19388:	movw	r3, #43688	; 0xaaa8
   1938c:	movt	r3, #1
   19390:	str	r3, [sp, #8]
   19394:	ldr	r3, [sp, #104]	; 0x68
   19398:	str	r3, [sp, #4]
   1939c:	mov	r3, #5
   193a0:	str	r3, [sp]
   193a4:	mov	r3, #2
   193a8:	mov	r2, r5
   193ac:	mov	r0, r8
   193b0:	bl	2f9b4 <flatcc_json_parser_union@@Base>
   193b4:	mov	r1, r0
   193b8:	b	18ffc <_start@@Base+0x49fc>
   193bc:	mov	r2, r5
   193c0:	mov	r0, r8
   193c4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   193c8:	mov	r1, r0
   193cc:	b	18ffc <_start@@Base+0x49fc>
   193d0:	mov	r2, r5
   193d4:	mov	r1, r4
   193d8:	mov	r0, r8
   193dc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   193e0:	mov	r1, r0
   193e4:	b	18ffc <_start@@Base+0x49fc>
   193e8:	ldr	r3, [r8, #24]
   193ec:	cmp	r3, #0
   193f0:	bne	18ae8 <_start@@Base+0x44e8>
   193f4:	ldr	r3, [sp, #104]	; 0x68
   193f8:	mov	r2, r5
   193fc:	mov	r1, r4
   19400:	mov	r0, r8
   19404:	bl	2f93c <flatcc_json_parser_finalize_unions@@Base>
   19408:	mov	r4, r0
   1940c:	ldr	r0, [r8]
   19410:	bl	286bc <flatcc_builder_end_table@@Base>
   19414:	str	r0, [r9]
   19418:	cmp	r0, #0
   1941c:	bne	18b00 <_start@@Base+0x4500>
   19420:	b	18ae8 <_start@@Base+0x44e8>
   19424:	nop	{0}
   19428:	strbvs	r6, [pc, -r9, ror #28]!
   1942c:	cmnvs	lr, r1, ror #8
   19430:	svcvs	0x005f7479
   19434:	cmnvs	r1, #6464	; 0x1940
   19438:	svcvs	0x00000000
   1943c:	cmnvs	r1, #6464	; 0x1940
   19440:	svcpl	0x00636861
   19444:			; <UNDEFINED> instruction: 0x6d61696e
   19448:	svcpl	0x006b6963
   1944c:	cmnvc	r9, #1694498816	; 0x65000000
   19450:	rsbvc	r0, r5, r0
   19454:	blvs	17f6640 <__bss_end__@@Base+0x17a12f4>
   19458:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1945c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   19460:	ldrbvs	r0, [r2, #-0]!
   19464:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   19468:	andeq	r0, r0, r0
   1946c:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   19470:	andeq	r5, r5, r0, lsr #1
   19474:	strheq	r5, [r5], -r0
   19478:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1947c:	strd	r6, [sp, #8]
   19480:	strd	r8, [sp, #16]
   19484:	strd	sl, [sp, #24]
   19488:	str	lr, [sp, #32]
   1948c:	sub	sp, sp, #36	; 0x24
   19490:	mov	r8, r0
   19494:	mov	r7, r2
   19498:	str	r3, [sp, #12]
   1949c:	mov	r3, #0
   194a0:	ldr	r2, [sp, #72]	; 0x48
   194a4:	strb	r3, [r2]
   194a8:	cmp	r1, r7
   194ac:	beq	19624 <_start@@Base+0x5024>
   194b0:	ldrb	r3, [r1]
   194b4:	cmp	r3, #34	; 0x22
   194b8:	addeq	r4, r1, #1
   194bc:	moveq	r3, #0
   194c0:	streq	r3, [r0, #12]
   194c4:	beq	19508 <_start@@Base+0x4f08>
   194c8:	cmp	r3, #46	; 0x2e
   194cc:	movne	r3, #1
   194d0:	strne	r3, [r0, #12]
   194d4:	movne	r4, r1
   194d8:	beq	194ec <_start@@Base+0x4eec>
   194dc:	mov	fp, #0
   194e0:	add	sl, sp, #16
   194e4:	add	r9, sp, #24
   194e8:	b	1959c <_start@@Base+0x4f9c>
   194ec:	mov	r3, #5
   194f0:	mov	r2, r7
   194f4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   194f8:	mov	r4, r0
   194fc:	ldr	r3, [r8, #12]
   19500:	cmp	r3, #0
   19504:	bne	19538 <_start@@Base+0x4f38>
   19508:	sub	r3, r7, r4
   1950c:	cmp	r3, #1
   19510:	ble	19524 <_start@@Base+0x4f24>
   19514:	ldrb	r3, [r4]
   19518:	cmp	r3, #32
   1951c:	bhi	19538 <_start@@Base+0x4f38>
   19520:	beq	19544 <_start@@Base+0x4f44>
   19524:	mov	r2, r7
   19528:	mov	r1, r4
   1952c:	mov	r0, r8
   19530:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   19534:	mov	r4, r0
   19538:	cmp	r7, r4
   1953c:	bne	194dc <_start@@Base+0x4edc>
   19540:	b	19640 <_start@@Base+0x5040>
   19544:	ldrb	r3, [r4, #1]
   19548:	cmp	r3, #32
   1954c:	addhi	r4, r4, #1
   19550:	bls	19524 <_start@@Base+0x4f24>
   19554:	b	19538 <_start@@Base+0x4f38>
   19558:	mov	r4, r0
   1955c:	ldr	r3, [sp, #20]
   19560:	cmp	r3, #0
   19564:	bne	19600 <_start@@Base+0x5000>
   19568:	ldr	r2, [sp, #24]
   1956c:	ldr	r3, [sp, #28]
   19570:	orrs	r3, r2, r3
   19574:	movne	fp, #1
   19578:	moveq	fp, #0
   1957c:	ldr	r3, [sp, #72]	; 0x48
   19580:	ldrb	r3, [r3]
   19584:	add	r3, fp, r3
   19588:	ldr	r2, [sp, #72]	; 0x48
   1958c:	strb	r3, [r2]
   19590:	ldr	r3, [sp, #16]
   19594:	cmp	r3, #0
   19598:	beq	19640 <_start@@Base+0x5040>
   1959c:	ldr	r6, [sp, #12]
   195a0:	mov	r5, r4
   195a4:	str	sl, [sp, #4]
   195a8:	str	r9, [sp]
   195ac:	ldr	r4, [r6]
   195b0:	add	r3, sp, #20
   195b4:	mov	r2, r7
   195b8:	mov	r1, r5
   195bc:	mov	r0, r8
   195c0:	blx	r4
   195c4:	cmp	r7, r0
   195c8:	beq	1963c <_start@@Base+0x503c>
   195cc:	cmp	r5, r0
   195d0:	bne	19558 <_start@@Base+0x4f58>
   195d4:	mov	r5, r0
   195d8:	ldr	r3, [r6, #4]!
   195dc:	cmp	r3, #0
   195e0:	bne	195a4 <_start@@Base+0x4fa4>
   195e4:	mov	r3, #23
   195e8:	mov	r2, r7
   195ec:	mov	r1, r0
   195f0:	mov	r0, r8
   195f4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   195f8:	mov	r4, r0
   195fc:	b	19640 <_start@@Base+0x5040>
   19600:	mov	r3, #8
   19604:	mov	r2, r7
   19608:	mov	r1, r0
   1960c:	mov	r0, r8
   19610:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19614:	cmp	r7, r0
   19618:	bne	1957c <_start@@Base+0x4f7c>
   1961c:	mov	r4, r0
   19620:	b	19640 <_start@@Base+0x5040>
   19624:	ldr	r3, [r0, #12]
   19628:	cmp	r3, #0
   1962c:	movne	r4, r7
   19630:	bne	19640 <_start@@Base+0x5040>
   19634:	mov	r4, r7
   19638:	b	19524 <_start@@Base+0x4f24>
   1963c:	mov	r4, r0
   19640:	mov	r0, r4
   19644:	add	sp, sp, #36	; 0x24
   19648:	ldrd	r4, [sp]
   1964c:	ldrd	r6, [sp, #8]
   19650:	ldrd	r8, [sp, #16]
   19654:	ldrd	sl, [sp, #24]
   19658:	add	sp, sp, #32
   1965c:	pop	{pc}		; (ldr pc, [sp], #4)
   19660:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19664:	strd	r6, [sp, #8]
   19668:	strd	r8, [sp, #16]
   1966c:	strd	sl, [sp, #24]
   19670:	str	lr, [sp, #32]
   19674:	sub	sp, sp, #36	; 0x24
   19678:	mov	r8, r0
   1967c:	mov	r7, r2
   19680:	str	r3, [sp, #8]
   19684:	ldr	fp, [sp, #72]	; 0x48
   19688:	mov	r3, #0
   1968c:	strb	r3, [fp]
   19690:	cmp	r1, r2
   19694:	beq	19824 <_start@@Base+0x5224>
   19698:	ldrb	r3, [r1]
   1969c:	cmp	r3, #34	; 0x22
   196a0:	addeq	r4, r1, #1
   196a4:	moveq	r3, #0
   196a8:	streq	r3, [r0, #12]
   196ac:	beq	196f0 <_start@@Base+0x50f0>
   196b0:	cmp	r3, #46	; 0x2e
   196b4:	movne	r3, #1
   196b8:	strne	r3, [r0, #12]
   196bc:	movne	r4, r1
   196c0:	beq	196d8 <_start@@Base+0x50d8>
   196c4:	mov	r3, #0
   196c8:	str	r3, [sp, #12]
   196cc:	add	sl, sp, #16
   196d0:	add	r9, sp, #24
   196d4:	b	19784 <_start@@Base+0x5184>
   196d8:	mov	r3, #5
   196dc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   196e0:	mov	r4, r0
   196e4:	ldr	r3, [r8, #12]
   196e8:	cmp	r3, #0
   196ec:	bne	19720 <_start@@Base+0x5120>
   196f0:	sub	r3, r7, r4
   196f4:	cmp	r3, #1
   196f8:	ble	1970c <_start@@Base+0x510c>
   196fc:	ldrb	r3, [r4]
   19700:	cmp	r3, #32
   19704:	bhi	19720 <_start@@Base+0x5120>
   19708:	beq	1972c <_start@@Base+0x512c>
   1970c:	mov	r2, r7
   19710:	mov	r1, r4
   19714:	mov	r0, r8
   19718:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1971c:	mov	r4, r0
   19720:	cmp	r7, r4
   19724:	bne	196c4 <_start@@Base+0x50c4>
   19728:	b	19840 <_start@@Base+0x5240>
   1972c:	ldrb	r3, [r4, #1]
   19730:	cmp	r3, #32
   19734:	addhi	r4, r4, #1
   19738:	bls	1970c <_start@@Base+0x510c>
   1973c:	b	19720 <_start@@Base+0x5120>
   19740:	mov	r4, r0
   19744:	ldr	r3, [sp, #20]
   19748:	cmp	r3, #0
   1974c:	bne	197e8 <_start@@Base+0x51e8>
   19750:	ldrd	r2, [sp, #24]
   19754:	cmp	r3, #0
   19758:	cmpeq	r2, #255	; 0xff
   1975c:	uxtbls	r3, r2
   19760:	strls	r3, [sp, #12]
   19764:	bhi	1980c <_start@@Base+0x520c>
   19768:	ldrb	r3, [fp]
   1976c:	ldr	r2, [sp, #12]
   19770:	add	r3, r2, r3
   19774:	strb	r3, [fp]
   19778:	ldr	r3, [sp, #16]
   1977c:	cmp	r3, #0
   19780:	beq	19840 <_start@@Base+0x5240>
   19784:	ldr	r6, [sp, #8]
   19788:	mov	r5, r4
   1978c:	str	sl, [sp, #4]
   19790:	str	r9, [sp]
   19794:	ldr	r4, [r6]
   19798:	add	r3, sp, #20
   1979c:	mov	r2, r7
   197a0:	mov	r1, r5
   197a4:	mov	r0, r8
   197a8:	blx	r4
   197ac:	cmp	r7, r0
   197b0:	beq	1983c <_start@@Base+0x523c>
   197b4:	cmp	r5, r0
   197b8:	bne	19740 <_start@@Base+0x5140>
   197bc:	mov	r5, r0
   197c0:	ldr	r3, [r6, #4]!
   197c4:	cmp	r3, #0
   197c8:	bne	1978c <_start@@Base+0x518c>
   197cc:	mov	r3, #23
   197d0:	mov	r2, r7
   197d4:	mov	r1, r0
   197d8:	mov	r0, r8
   197dc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   197e0:	mov	r4, r0
   197e4:	b	19840 <_start@@Base+0x5240>
   197e8:	mov	r3, #8
   197ec:	mov	r2, r7
   197f0:	mov	r1, r0
   197f4:	mov	r0, r8
   197f8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   197fc:	cmp	r7, r0
   19800:	bne	19768 <_start@@Base+0x5168>
   19804:	mov	r4, r0
   19808:	b	19840 <_start@@Base+0x5240>
   1980c:	mov	r3, #7
   19810:	mov	r2, r7
   19814:	mov	r1, r0
   19818:	mov	r0, r8
   1981c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19820:	b	197fc <_start@@Base+0x51fc>
   19824:	ldr	r3, [r0, #12]
   19828:	cmp	r3, #0
   1982c:	movne	r4, r2
   19830:	bne	19840 <_start@@Base+0x5240>
   19834:	mov	r4, r7
   19838:	b	1970c <_start@@Base+0x510c>
   1983c:	mov	r4, r0
   19840:	mov	r0, r4
   19844:	add	sp, sp, #36	; 0x24
   19848:	ldrd	r4, [sp]
   1984c:	ldrd	r6, [sp, #8]
   19850:	ldrd	r8, [sp, #16]
   19854:	ldrd	sl, [sp, #24]
   19858:	add	sp, sp, #32
   1985c:	pop	{pc}		; (ldr pc, [sp], #4)
   19860:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19864:	strd	r6, [sp, #8]
   19868:	strd	r8, [sp, #16]
   1986c:	strd	sl, [sp, #24]
   19870:	str	lr, [sp, #32]
   19874:	sub	sp, sp, #36	; 0x24
   19878:	mov	r8, r0
   1987c:	mov	r7, r2
   19880:	str	r3, [sp, #12]
   19884:	mov	r3, #0
   19888:	ldr	r2, [sp, #72]	; 0x48
   1988c:	strb	r3, [r2]
   19890:	cmp	r1, r7
   19894:	beq	19a38 <_start@@Base+0x5438>
   19898:	ldrb	r3, [r1]
   1989c:	cmp	r3, #34	; 0x22
   198a0:	addeq	r4, r1, #1
   198a4:	moveq	r3, #0
   198a8:	streq	r3, [r0, #12]
   198ac:	beq	198f0 <_start@@Base+0x52f0>
   198b0:	cmp	r3, #46	; 0x2e
   198b4:	movne	r3, #1
   198b8:	strne	r3, [r0, #12]
   198bc:	movne	r4, r1
   198c0:	beq	198d4 <_start@@Base+0x52d4>
   198c4:	mov	fp, #0
   198c8:	add	sl, sp, #16
   198cc:	add	r9, sp, #24
   198d0:	b	19988 <_start@@Base+0x5388>
   198d4:	mov	r3, #5
   198d8:	mov	r2, r7
   198dc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   198e0:	mov	r4, r0
   198e4:	ldr	r3, [r8, #12]
   198e8:	cmp	r3, #0
   198ec:	bne	19920 <_start@@Base+0x5320>
   198f0:	sub	r3, r7, r4
   198f4:	cmp	r3, #1
   198f8:	ble	1990c <_start@@Base+0x530c>
   198fc:	ldrb	r3, [r4]
   19900:	cmp	r3, #32
   19904:	bhi	19920 <_start@@Base+0x5320>
   19908:	beq	1992c <_start@@Base+0x532c>
   1990c:	mov	r2, r7
   19910:	mov	r1, r4
   19914:	mov	r0, r8
   19918:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1991c:	mov	r4, r0
   19920:	cmp	r7, r4
   19924:	bne	198c4 <_start@@Base+0x52c4>
   19928:	b	19a54 <_start@@Base+0x5454>
   1992c:	ldrb	r3, [r4, #1]
   19930:	cmp	r3, #32
   19934:	addhi	r4, r4, #1
   19938:	bls	1990c <_start@@Base+0x530c>
   1993c:	b	19920 <_start@@Base+0x5320>
   19940:	mov	r4, r0
   19944:	ldrd	r2, [sp, #24]
   19948:	ldr	r1, [sp, #20]
   1994c:	cmp	r1, #0
   19950:	beq	19a10 <_start@@Base+0x5410>
   19954:	cmp	r3, #0
   19958:	cmpeq	r2, #128	; 0x80
   1995c:	rsbls	fp, r2, #0
   19960:	sxtbls	fp, fp
   19964:	bhi	199ec <_start@@Base+0x53ec>
   19968:	ldr	r3, [sp, #72]	; 0x48
   1996c:	ldrb	r3, [r3]
   19970:	add	r3, r3, fp
   19974:	ldr	r2, [sp, #72]	; 0x48
   19978:	strb	r3, [r2]
   1997c:	ldr	r3, [sp, #16]
   19980:	cmp	r3, #0
   19984:	beq	19a54 <_start@@Base+0x5454>
   19988:	ldr	r6, [sp, #12]
   1998c:	mov	r5, r4
   19990:	str	sl, [sp, #4]
   19994:	str	r9, [sp]
   19998:	ldr	r4, [r6]
   1999c:	add	r3, sp, #20
   199a0:	mov	r2, r7
   199a4:	mov	r1, r5
   199a8:	mov	r0, r8
   199ac:	blx	r4
   199b0:	cmp	r7, r0
   199b4:	beq	19a50 <_start@@Base+0x5450>
   199b8:	cmp	r5, r0
   199bc:	bne	19940 <_start@@Base+0x5340>
   199c0:	mov	r5, r0
   199c4:	ldr	r3, [r6, #4]!
   199c8:	cmp	r3, #0
   199cc:	bne	19990 <_start@@Base+0x5390>
   199d0:	mov	r3, #23
   199d4:	mov	r2, r7
   199d8:	mov	r1, r0
   199dc:	mov	r0, r8
   199e0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   199e4:	mov	r4, r0
   199e8:	b	19a54 <_start@@Base+0x5454>
   199ec:	mov	r3, #8
   199f0:	mov	r2, r7
   199f4:	mov	r1, r0
   199f8:	mov	r0, r8
   199fc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19a00:	cmp	r7, r0
   19a04:	bne	19968 <_start@@Base+0x5368>
   19a08:	mov	r4, r0
   19a0c:	b	19a54 <_start@@Base+0x5454>
   19a10:	cmp	r3, #0
   19a14:	cmpeq	r2, #127	; 0x7f
   19a18:	sxtbls	fp, r2
   19a1c:	bls	19968 <_start@@Base+0x5368>
   19a20:	mov	r3, #7
   19a24:	mov	r2, r7
   19a28:	mov	r1, r0
   19a2c:	mov	r0, r8
   19a30:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19a34:	b	19a00 <_start@@Base+0x5400>
   19a38:	ldr	r3, [r0, #12]
   19a3c:	cmp	r3, #0
   19a40:	movne	r4, r7
   19a44:	bne	19a54 <_start@@Base+0x5454>
   19a48:	mov	r4, r7
   19a4c:	b	1990c <_start@@Base+0x530c>
   19a50:	mov	r4, r0
   19a54:	mov	r0, r4
   19a58:	add	sp, sp, #36	; 0x24
   19a5c:	ldrd	r4, [sp]
   19a60:	ldrd	r6, [sp, #8]
   19a64:	ldrd	r8, [sp, #16]
   19a68:	ldrd	sl, [sp, #24]
   19a6c:	add	sp, sp, #32
   19a70:	pop	{pc}		; (ldr pc, [sp], #4)
   19a74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19a78:	strd	r6, [sp, #8]
   19a7c:	strd	r8, [sp, #16]
   19a80:	strd	sl, [sp, #24]
   19a84:	str	lr, [sp, #32]
   19a88:	sub	sp, sp, #36	; 0x24
   19a8c:	mov	r8, r0
   19a90:	mov	r7, r2
   19a94:	str	r3, [sp, #12]
   19a98:	ldr	fp, [sp, #72]	; 0x48
   19a9c:	mov	r3, #0
   19aa0:	str	r3, [fp]
   19aa4:	cmp	r1, r2
   19aa8:	beq	19c50 <_start@@Base+0x5650>
   19aac:	ldrb	r3, [r1]
   19ab0:	cmp	r3, #34	; 0x22
   19ab4:	addeq	r4, r1, #1
   19ab8:	moveq	r3, #0
   19abc:	streq	r3, [r0, #12]
   19ac0:	beq	19afc <_start@@Base+0x54fc>
   19ac4:	cmp	r3, #46	; 0x2e
   19ac8:	movne	r3, #1
   19acc:	strne	r3, [r0, #12]
   19ad0:	movne	r4, r1
   19ad4:	beq	19ae4 <_start@@Base+0x54e4>
   19ad8:	mov	r3, #0
   19adc:	str	r3, [sp, #8]
   19ae0:	b	19b90 <_start@@Base+0x5590>
   19ae4:	mov	r3, #5
   19ae8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19aec:	mov	r4, r0
   19af0:	ldr	r3, [r8, #12]
   19af4:	cmp	r3, #0
   19af8:	bne	19b2c <_start@@Base+0x552c>
   19afc:	sub	r3, r7, r4
   19b00:	cmp	r3, #1
   19b04:	ble	19b18 <_start@@Base+0x5518>
   19b08:	ldrb	r3, [r4]
   19b0c:	cmp	r3, #32
   19b10:	bhi	19b2c <_start@@Base+0x552c>
   19b14:	beq	19b38 <_start@@Base+0x5538>
   19b18:	mov	r2, r7
   19b1c:	mov	r1, r4
   19b20:	mov	r0, r8
   19b24:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   19b28:	mov	r4, r0
   19b2c:	cmp	r7, r4
   19b30:	bne	19ad8 <_start@@Base+0x54d8>
   19b34:	b	19c6c <_start@@Base+0x566c>
   19b38:	ldrb	r3, [r4, #1]
   19b3c:	cmp	r3, #32
   19b40:	addhi	r4, r4, #1
   19b44:	bls	19b18 <_start@@Base+0x5518>
   19b48:	b	19b2c <_start@@Base+0x552c>
   19b4c:	mov	r4, r0
   19b50:	ldrd	r2, [sp, #24]
   19b54:	ldr	r1, [sp, #20]
   19b58:	cmp	r1, #0
   19b5c:	beq	19c20 <_start@@Base+0x5620>
   19b60:	cmp	r3, #0
   19b64:	cmpeq	r2, #-2147483648	; 0x80000000
   19b68:	rsbls	r3, r2, #0
   19b6c:	strls	r3, [sp, #8]
   19b70:	bhi	19bfc <_start@@Base+0x55fc>
   19b74:	ldr	r3, [fp]
   19b78:	ldr	r2, [sp, #8]
   19b7c:	add	r3, r3, r2
   19b80:	str	r3, [fp]
   19b84:	ldr	r3, [sp, #16]
   19b88:	cmp	r3, #0
   19b8c:	beq	19c6c <_start@@Base+0x566c>
   19b90:	ldr	r6, [sp, #12]
   19b94:	mov	r5, r4
   19b98:	add	sl, sp, #16
   19b9c:	add	r9, sp, #24
   19ba0:	str	sl, [sp, #4]
   19ba4:	str	r9, [sp]
   19ba8:	ldr	r4, [r6]
   19bac:	add	r3, sp, #20
   19bb0:	mov	r2, r7
   19bb4:	mov	r1, r5
   19bb8:	mov	r0, r8
   19bbc:	blx	r4
   19bc0:	cmp	r7, r0
   19bc4:	beq	19c68 <_start@@Base+0x5668>
   19bc8:	cmp	r5, r0
   19bcc:	bne	19b4c <_start@@Base+0x554c>
   19bd0:	mov	r5, r0
   19bd4:	ldr	r3, [r6, #4]!
   19bd8:	cmp	r3, #0
   19bdc:	bne	19ba0 <_start@@Base+0x55a0>
   19be0:	mov	r3, #23
   19be4:	mov	r2, r7
   19be8:	mov	r1, r0
   19bec:	mov	r0, r8
   19bf0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19bf4:	mov	r4, r0
   19bf8:	b	19c6c <_start@@Base+0x566c>
   19bfc:	mov	r3, #8
   19c00:	mov	r2, r7
   19c04:	mov	r1, r0
   19c08:	mov	r0, r8
   19c0c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19c10:	cmp	r7, r0
   19c14:	bne	19b74 <_start@@Base+0x5574>
   19c18:	mov	r4, r0
   19c1c:	b	19c6c <_start@@Base+0x566c>
   19c20:	mvn	r0, #-2147483648	; 0x80000000
   19c24:	mov	r1, #0
   19c28:	cmp	r3, r1
   19c2c:	cmpeq	r2, r0
   19c30:	strls	r2, [sp, #8]
   19c34:	bls	19b74 <_start@@Base+0x5574>
   19c38:	mov	r3, #7
   19c3c:	mov	r2, r7
   19c40:	mov	r1, r4
   19c44:	mov	r0, r8
   19c48:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19c4c:	b	19c10 <_start@@Base+0x5610>
   19c50:	ldr	r3, [r0, #12]
   19c54:	cmp	r3, #0
   19c58:	movne	r4, r2
   19c5c:	bne	19c6c <_start@@Base+0x566c>
   19c60:	mov	r4, r7
   19c64:	b	19b18 <_start@@Base+0x5518>
   19c68:	mov	r4, r0
   19c6c:	mov	r0, r4
   19c70:	add	sp, sp, #36	; 0x24
   19c74:	ldrd	r4, [sp]
   19c78:	ldrd	r6, [sp, #8]
   19c7c:	ldrd	r8, [sp, #16]
   19c80:	ldrd	sl, [sp, #24]
   19c84:	add	sp, sp, #32
   19c88:	pop	{pc}		; (ldr pc, [sp], #4)
   19c8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19c90:	strd	r6, [sp, #8]
   19c94:	strd	r8, [sp, #16]
   19c98:	strd	sl, [sp, #24]
   19c9c:	str	lr, [sp, #32]
   19ca0:	sub	sp, sp, #60	; 0x3c
   19ca4:	mov	r6, r0
   19ca8:	mov	r4, r1
   19cac:	mov	r5, r2
   19cb0:	mov	r9, r3
   19cb4:	mov	r3, #0
   19cb8:	str	r3, [r9]
   19cbc:	mov	r2, #4
   19cc0:	mov	r1, r2
   19cc4:	ldr	r0, [r0]
   19cc8:	bl	26e3c <flatcc_builder_start_struct@@Base>
   19ccc:	subs	fp, r0, #0
   19cd0:	beq	19f9c <_start@@Base+0x599c>
   19cd4:	add	r3, sp, #36	; 0x24
   19cd8:	mov	r2, r5
   19cdc:	mov	r1, r4
   19ce0:	mov	r0, r6
   19ce4:	bl	18650 <_start@@Base+0x4050>
   19ce8:	mov	r4, r0
   19cec:	mov	r8, #0
   19cf0:	mov	sl, r8
   19cf4:	movt	sl, #65535	; 0xffff
   19cf8:	str	fp, [sp, #24]
   19cfc:	str	sl, [sp, #28]
   19d00:	b	1a104 <_start@@Base+0x5b04>
   19d04:	mov	r3, #5
   19d08:	mov	r2, r5
   19d0c:	mov	r1, r4
   19d10:	mov	r0, r6
   19d14:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19d18:	mov	r4, r0
   19d1c:	b	1a140 <_start@@Base+0x5b40>
   19d20:	ldrb	r0, [r4, #7]
   19d24:	mov	r1, #0
   19d28:	ldrb	r2, [r4, #6]
   19d2c:	orr	r2, r0, r2, lsl #8
   19d30:	mov	r3, r1
   19d34:	ldrb	r0, [r4, #5]
   19d38:	orr	r1, r2, r0, lsl #16
   19d3c:	mov	r0, r3
   19d40:	ldrb	r2, [r4, #4]
   19d44:	orr	r2, r1, r2, lsl #24
   19d48:	mov	r3, r0
   19d4c:	ldrb	r0, [r4, #3]
   19d50:	orr	r3, r3, r0
   19d54:	ldrb	r0, [r4, #2]
   19d58:	orr	r3, r3, r0, lsl #8
   19d5c:	ldrb	r0, [r4, #1]
   19d60:	orr	r3, r3, r0, lsl #16
   19d64:	ldrb	r0, [r4]
   19d68:	str	r2, [sp, #8]
   19d6c:	orr	r3, r3, r0, lsl #24
   19d70:	str	r3, [sp, #12]
   19d74:	ldrd	r2, [sp, #8]
   19d78:	add	r1, pc, #752	; 0x2f0
   19d7c:	ldrd	r0, [r1]
   19d80:	cmp	r3, r1
   19d84:	cmpeq	r2, r0
   19d88:	bne	1a07c <_start@@Base+0x5a7c>
   19d8c:	add	r7, r4, #8
   19d90:	sub	r3, r5, r7
   19d94:	cmp	r3, #8
   19d98:	bhi	19e30 <_start@@Base+0x5830>
   19d9c:	sub	r3, r3, #1
   19da0:	cmp	r3, #7
   19da4:	ldrls	pc, [pc, r3, lsl #2]
   19da8:	b	19ed4 <_start@@Base+0x58d4>
   19dac:	andeq	r9, r1, ip, asr #29
   19db0:	andeq	r9, r1, r4, asr #29
   19db4:			; <UNDEFINED> instruction: 0x00019ebc
   19db8:			; <UNDEFINED> instruction: 0x00019eb4
   19dbc:	andeq	r9, r1, ip, lsr #29
   19dc0:	andeq	r9, r1, r4, lsr #29
   19dc4:	muleq	r1, ip, lr
   19dc8:	andeq	r9, r1, r0, lsr lr
   19dcc:	mov	r0, r8
   19dd0:	mov	r1, #0
   19dd4:	b	19d28 <_start@@Base+0x5728>
   19dd8:	mov	r2, #0
   19ddc:	mov	r3, r2
   19de0:	b	19d34 <_start@@Base+0x5734>
   19de4:	mov	r1, #0
   19de8:	mov	r0, r1
   19dec:	b	19d40 <_start@@Base+0x5740>
   19df0:	mov	r2, #0
   19df4:	mov	r3, r2
   19df8:	b	19d4c <_start@@Base+0x574c>
   19dfc:	mov	r2, #0
   19e00:	mov	r3, r2
   19e04:	b	19d54 <_start@@Base+0x5754>
   19e08:	mov	r2, #0
   19e0c:	mov	r3, r2
   19e10:	b	19d5c <_start@@Base+0x575c>
   19e14:	mov	r2, #0
   19e18:	mov	r3, r2
   19e1c:	b	19d64 <_start@@Base+0x5764>
   19e20:	mov	r2, #0
   19e24:	mov	r3, #0
   19e28:	strd	r2, [sp, #8]
   19e2c:	b	19d74 <_start@@Base+0x5774>
   19e30:	mov	r3, #0
   19e34:	mov	r1, r3
   19e38:	ldrb	r2, [r4, #11]
   19e3c:	orr	r1, r1, r2
   19e40:	ldrb	r2, [r4, #10]
   19e44:	orr	r1, r1, r2, lsl #8
   19e48:	ldrb	r2, [r4, #9]
   19e4c:	orr	r3, r1, r2, lsl #16
   19e50:	ldrb	r0, [r4, #8]
   19e54:	orr	r3, r3, r0, lsl #24
   19e58:	mov	r2, #0
   19e5c:	str	r2, [sp, #16]
   19e60:	ldr	r2, [sp, #28]
   19e64:	and	r3, r3, r2
   19e68:	str	r3, [sp, #20]
   19e6c:	ldrd	r2, [sp, #16]
   19e70:	mov	r0, #0
   19e74:	mov	r1, #0
   19e78:	movt	r1, #24932	; 0x6164
   19e7c:	cmp	r3, r1
   19e80:	cmpeq	r2, r0
   19e84:	beq	19edc <_start@@Base+0x58dc>
   19e88:	mov	r2, r5
   19e8c:	mov	r1, r7
   19e90:	mov	r0, r6
   19e94:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   19e98:	b	1a08c <_start@@Base+0x5a8c>
   19e9c:	mov	r3, #0
   19ea0:	b	19e34 <_start@@Base+0x5834>
   19ea4:	mov	r1, #0
   19ea8:	b	19e38 <_start@@Base+0x5838>
   19eac:	mov	r1, #0
   19eb0:	b	19e38 <_start@@Base+0x5838>
   19eb4:	mov	r1, #0
   19eb8:	b	19e38 <_start@@Base+0x5838>
   19ebc:	mov	r1, #0
   19ec0:	b	19e40 <_start@@Base+0x5840>
   19ec4:	mov	r1, #0
   19ec8:	b	19e48 <_start@@Base+0x5848>
   19ecc:	mov	r3, #0
   19ed0:	b	19e50 <_start@@Base+0x5850>
   19ed4:	mov	r3, #0
   19ed8:	b	19e58 <_start@@Base+0x5858>
   19edc:	mov	r3, #2
   19ee0:	mov	r2, r5
   19ee4:	mov	r1, r7
   19ee8:	mov	r0, r6
   19eec:	bl	18490 <_start@@Base+0x3e90>
   19ef0:	mov	r4, r0
   19ef4:	cmp	r7, r0
   19ef8:	beq	1a05c <_start@@Base+0x5a5c>
   19efc:	mov	r3, #0
   19f00:	str	r3, [sp, #40]	; 0x28
   19f04:	str	r8, [sp, #48]	; 0x30
   19f08:	str	r3, [sp, #52]	; 0x34
   19f0c:	str	r3, [sp, #44]	; 0x2c
   19f10:	cmp	r5, r0
   19f14:	beq	19f3c <_start@@Base+0x593c>
   19f18:	add	r3, sp, #48	; 0x30
   19f1c:	str	r3, [sp]
   19f20:	add	r3, sp, #44	; 0x2c
   19f24:	mov	r2, r5
   19f28:	mov	r1, r0
   19f2c:	mov	r0, r6
   19f30:	bl	2f170 <flatcc_json_parser_integer@@Base>
   19f34:	cmp	r4, r0
   19f38:	bne	19fd4 <_start@@Base+0x59d4>
   19f3c:	mov	r4, r0
   19f40:	add	r3, sp, #40	; 0x28
   19f44:	str	r3, [sp]
   19f48:	ldr	r3, [pc, #296]	; 1a078 <_start@@Base+0x5a78>
   19f4c:	mov	r2, r5
   19f50:	mov	r1, r4
   19f54:	mov	r0, r6
   19f58:	bl	19a74 <_start@@Base+0x5474>
   19f5c:	cmp	r5, r0
   19f60:	cmpne	r0, r4
   19f64:	bne	1a014 <_start@@Base+0x5a14>
   19f68:	mov	r3, #33	; 0x21
   19f6c:	mov	r2, r5
   19f70:	mov	r1, r0
   19f74:	mov	r0, r6
   19f78:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19f7c:	mov	r4, r0
   19f80:	cmp	r5, r4
   19f84:	beq	19f9c <_start@@Base+0x599c>
   19f88:	ldr	r0, [r6]
   19f8c:	bl	26ef4 <flatcc_builder_end_struct@@Base>
   19f90:	str	r0, [r9]
   19f94:	cmp	r0, #0
   19f98:	bne	19fb4 <_start@@Base+0x59b4>
   19f9c:	mov	r3, #33	; 0x21
   19fa0:	mov	r2, r5
   19fa4:	mov	r1, r4
   19fa8:	mov	r0, r6
   19fac:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   19fb0:	mov	r4, r0
   19fb4:	mov	r0, r4
   19fb8:	add	sp, sp, #60	; 0x3c
   19fbc:	ldrd	r4, [sp]
   19fc0:	ldrd	r6, [sp, #8]
   19fc4:	ldrd	r8, [sp, #16]
   19fc8:	ldrd	sl, [sp, #24]
   19fcc:	add	sp, sp, #32
   19fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   19fd4:	ldrd	r2, [sp, #48]	; 0x30
   19fd8:	ldr	r1, [sp, #44]	; 0x2c
   19fdc:	cmp	r1, #0
   19fe0:	beq	1a024 <_start@@Base+0x5a24>
   19fe4:	cmp	r3, #0
   19fe8:	cmpeq	r2, #-2147483648	; 0x80000000
   19fec:	rsbls	r3, r2, #0
   19ff0:	strls	r3, [sp, #40]	; 0x28
   19ff4:	bls	1a014 <_start@@Base+0x5a14>
   19ff8:	mov	r3, #8
   19ffc:	mov	r2, r5
   1a000:	mov	r1, r0
   1a004:	mov	r0, r6
   1a008:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a00c:	cmp	r4, r0
   1a010:	beq	1a054 <_start@@Base+0x5a54>
   1a014:	ldr	r3, [sp, #40]	; 0x28
   1a018:	ldr	r2, [sp, #24]
   1a01c:	str	r3, [r2]
   1a020:	b	1a08c <_start@@Base+0x5a8c>
   1a024:	mvn	sl, #-2147483648	; 0x80000000
   1a028:	mov	fp, #0
   1a02c:	cmp	r3, fp
   1a030:	cmpeq	r2, sl
   1a034:	strls	r2, [sp, #40]	; 0x28
   1a038:	bls	1a014 <_start@@Base+0x5a14>
   1a03c:	mov	r3, #7
   1a040:	mov	r2, r5
   1a044:	mov	r1, r0
   1a048:	mov	r0, r6
   1a04c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a050:	b	1a00c <_start@@Base+0x5a0c>
   1a054:	mov	r4, r0
   1a058:	b	19f40 <_start@@Base+0x5940>
   1a05c:	mov	r2, r5
   1a060:	mov	r1, r0
   1a064:	mov	r0, r6
   1a068:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1a06c:	b	1a08c <_start@@Base+0x5a8c>
   1a070:	cmpvc	pc, #1342177286	; 0x50000006
   1a074:	rsbvs	r6, pc, #428	; 0x1ac
   1a078:	andeq	r5, r5, r0, asr #1
   1a07c:	mov	r2, r5
   1a080:	mov	r1, r4
   1a084:	mov	r0, r6
   1a088:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1a08c:	sub	r3, r5, r0
   1a090:	cmp	r3, #1
   1a094:	ble	1a0a8 <_start@@Base+0x5aa8>
   1a098:	ldrb	r3, [r0]
   1a09c:	cmp	r3, #32
   1a0a0:	bhi	1a0b8 <_start@@Base+0x5ab8>
   1a0a4:	beq	1a17c <_start@@Base+0x5b7c>
   1a0a8:	mov	r2, r5
   1a0ac:	mov	r1, r0
   1a0b0:	mov	r0, r6
   1a0b4:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1a0b8:	cmp	r5, r0
   1a0bc:	moveq	r3, #0
   1a0c0:	streq	r3, [sp, #36]	; 0x24
   1a0c4:	moveq	r4, r0
   1a0c8:	beq	1a104 <_start@@Base+0x5b04>
   1a0cc:	ldrb	r3, [r0]
   1a0d0:	cmp	r3, #44	; 0x2c
   1a0d4:	beq	1a1dc <_start@@Base+0x5bdc>
   1a0d8:	mov	r3, #0
   1a0dc:	str	r3, [sp, #36]	; 0x24
   1a0e0:	ldrb	r3, [r0]
   1a0e4:	cmp	r3, #125	; 0x7d
   1a0e8:	beq	1a190 <_start@@Base+0x5b90>
   1a0ec:	mov	r3, #10
   1a0f0:	mov	r2, r5
   1a0f4:	mov	r1, r0
   1a0f8:	mov	r0, r6
   1a0fc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a100:	mov	r4, r0
   1a104:	ldr	r3, [sp, #36]	; 0x24
   1a108:	cmp	r3, #0
   1a10c:	beq	19f80 <_start@@Base+0x5980>
   1a110:	cmp	r5, r4
   1a114:	beq	1a140 <_start@@Base+0x5b40>
   1a118:	ldrb	r3, [r4]
   1a11c:	cmp	r3, #34	; 0x22
   1a120:	addeq	r4, r4, #1
   1a124:	moveq	r3, #0
   1a128:	streq	r3, [r6, #12]
   1a12c:	beq	1a140 <_start@@Base+0x5b40>
   1a130:	cmp	r3, #46	; 0x2e
   1a134:	movne	r3, #1
   1a138:	strne	r3, [r6, #12]
   1a13c:	beq	19d04 <_start@@Base+0x5704>
   1a140:	sub	r3, r5, r4
   1a144:	cmp	r3, #8
   1a148:	bhi	19d20 <_start@@Base+0x5720>
   1a14c:	sub	r3, r3, #1
   1a150:	cmp	r3, #7
   1a154:	ldrls	pc, [pc, r3, lsl #2]
   1a158:	b	19e20 <_start@@Base+0x5820>
   1a15c:	andeq	r9, r1, r4, lsl lr
   1a160:	andeq	r9, r1, r8, lsl #28
   1a164:	strdeq	r9, [r1], -ip
   1a168:	strdeq	r9, [r1], -r0
   1a16c:	andeq	r9, r1, r4, ror #27
   1a170:	ldrdeq	r9, [r1], -r8
   1a174:	andeq	r9, r1, ip, asr #27
   1a178:	andeq	r9, r1, r0, lsr #26
   1a17c:	ldrb	r3, [r0, #1]
   1a180:	cmp	r3, #32
   1a184:	addhi	r0, r0, #1
   1a188:	bls	1a0a8 <_start@@Base+0x5aa8>
   1a18c:	b	1a0b8 <_start@@Base+0x5ab8>
   1a190:	add	r4, r0, #1
   1a194:	sub	r3, r5, r4
   1a198:	cmp	r3, #1
   1a19c:	ble	1a1b0 <_start@@Base+0x5bb0>
   1a1a0:	ldrb	r3, [r0, #1]
   1a1a4:	cmp	r3, #32
   1a1a8:	bhi	1a104 <_start@@Base+0x5b04>
   1a1ac:	beq	1a1c8 <_start@@Base+0x5bc8>
   1a1b0:	mov	r2, r5
   1a1b4:	mov	r1, r4
   1a1b8:	mov	r0, r6
   1a1bc:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1a1c0:	mov	r4, r0
   1a1c4:	b	1a104 <_start@@Base+0x5b04>
   1a1c8:	ldrb	r3, [r0, #2]
   1a1cc:	cmp	r3, #32
   1a1d0:	addhi	r4, r0, #2
   1a1d4:	bls	1a1b0 <_start@@Base+0x5bb0>
   1a1d8:	b	1a104 <_start@@Base+0x5b04>
   1a1dc:	add	r4, r0, #1
   1a1e0:	sub	r3, r5, r4
   1a1e4:	cmp	r3, #1
   1a1e8:	ble	1a1fc <_start@@Base+0x5bfc>
   1a1ec:	ldrb	r3, [r0, #1]
   1a1f0:	cmp	r3, #32
   1a1f4:	bhi	1a210 <_start@@Base+0x5c10>
   1a1f8:	beq	1a24c <_start@@Base+0x5c4c>
   1a1fc:	mov	r2, r5
   1a200:	mov	r1, r4
   1a204:	mov	r0, r6
   1a208:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1a20c:	mov	r4, r0
   1a210:	cmp	r5, r4
   1a214:	beq	1a260 <_start@@Base+0x5c60>
   1a218:	ldrb	r3, [r4]
   1a21c:	cmp	r3, #125	; 0x7d
   1a220:	movne	r3, #1
   1a224:	strne	r3, [sp, #36]	; 0x24
   1a228:	bne	1a104 <_start@@Base+0x5b04>
   1a22c:	mov	r3, #0
   1a230:	str	r3, [sp, #36]	; 0x24
   1a234:	mov	r2, r5
   1a238:	add	r1, r4, #1
   1a23c:	mov	r0, r6
   1a240:	bl	1809c <_start@@Base+0x3a9c>
   1a244:	mov	r4, r0
   1a248:	b	1a104 <_start@@Base+0x5b04>
   1a24c:	ldrb	r3, [r0, #2]
   1a250:	cmp	r3, #32
   1a254:	addhi	r4, r0, #2
   1a258:	bls	1a1fc <_start@@Base+0x5bfc>
   1a25c:	b	1a210 <_start@@Base+0x5c10>
   1a260:	mov	r3, #0
   1a264:	str	r3, [sp, #36]	; 0x24
   1a268:	mov	r3, #10
   1a26c:	mov	r2, r5
   1a270:	mov	r1, r4
   1a274:	mov	r0, r6
   1a278:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a27c:	mov	r4, r0
   1a280:	b	1a104 <_start@@Base+0x5b04>
   1a284:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a288:	strd	r6, [sp, #8]
   1a28c:	strd	r8, [sp, #16]
   1a290:	strd	sl, [sp, #24]
   1a294:	str	lr, [sp, #32]
   1a298:	sub	sp, sp, #36	; 0x24
   1a29c:	mov	r8, r0
   1a2a0:	mov	r7, r2
   1a2a4:	str	r3, [sp, #12]
   1a2a8:	mov	r3, #0
   1a2ac:	ldr	r2, [sp, #72]	; 0x48
   1a2b0:	strh	r3, [r2]
   1a2b4:	cmp	r1, r7
   1a2b8:	beq	1a464 <_start@@Base+0x5e64>
   1a2bc:	ldrb	r3, [r1]
   1a2c0:	cmp	r3, #34	; 0x22
   1a2c4:	addeq	r4, r1, #1
   1a2c8:	moveq	r3, #0
   1a2cc:	streq	r3, [r0, #12]
   1a2d0:	beq	1a310 <_start@@Base+0x5d10>
   1a2d4:	cmp	r3, #46	; 0x2e
   1a2d8:	movne	r3, #1
   1a2dc:	strne	r3, [r0, #12]
   1a2e0:	movne	r4, r1
   1a2e4:	beq	1a2f4 <_start@@Base+0x5cf4>
   1a2e8:	mov	fp, #0
   1a2ec:	add	sl, sp, #16
   1a2f0:	b	1a3a8 <_start@@Base+0x5da8>
   1a2f4:	mov	r3, #5
   1a2f8:	mov	r2, r7
   1a2fc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a300:	mov	r4, r0
   1a304:	ldr	r3, [r8, #12]
   1a308:	cmp	r3, #0
   1a30c:	bne	1a340 <_start@@Base+0x5d40>
   1a310:	sub	r3, r7, r4
   1a314:	cmp	r3, #1
   1a318:	ble	1a32c <_start@@Base+0x5d2c>
   1a31c:	ldrb	r3, [r4]
   1a320:	cmp	r3, #32
   1a324:	bhi	1a340 <_start@@Base+0x5d40>
   1a328:	beq	1a34c <_start@@Base+0x5d4c>
   1a32c:	mov	r2, r7
   1a330:	mov	r1, r4
   1a334:	mov	r0, r8
   1a338:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1a33c:	mov	r4, r0
   1a340:	cmp	r7, r4
   1a344:	bne	1a2e8 <_start@@Base+0x5ce8>
   1a348:	b	1a480 <_start@@Base+0x5e80>
   1a34c:	ldrb	r3, [r4, #1]
   1a350:	cmp	r3, #32
   1a354:	addhi	r4, r4, #1
   1a358:	bls	1a32c <_start@@Base+0x5d2c>
   1a35c:	b	1a340 <_start@@Base+0x5d40>
   1a360:	mov	r4, r0
   1a364:	ldrd	r2, [sp, #24]
   1a368:	ldr	r1, [sp, #20]
   1a36c:	cmp	r1, #0
   1a370:	beq	1a434 <_start@@Base+0x5e34>
   1a374:	cmp	r3, #0
   1a378:	cmpeq	r2, #32768	; 0x8000
   1a37c:	rsbls	fp, r2, #0
   1a380:	sxthls	fp, fp
   1a384:	bhi	1a410 <_start@@Base+0x5e10>
   1a388:	ldr	r3, [sp, #72]	; 0x48
   1a38c:	ldrh	r3, [r3]
   1a390:	add	r3, r3, fp
   1a394:	ldr	r2, [sp, #72]	; 0x48
   1a398:	strh	r3, [r2]
   1a39c:	ldr	r3, [sp, #16]
   1a3a0:	cmp	r3, #0
   1a3a4:	beq	1a480 <_start@@Base+0x5e80>
   1a3a8:	ldr	r6, [sp, #12]
   1a3ac:	mov	r5, r4
   1a3b0:	add	r9, sp, #24
   1a3b4:	str	sl, [sp, #4]
   1a3b8:	str	r9, [sp]
   1a3bc:	ldr	r4, [r6]
   1a3c0:	add	r3, sp, #20
   1a3c4:	mov	r2, r7
   1a3c8:	mov	r1, r5
   1a3cc:	mov	r0, r8
   1a3d0:	blx	r4
   1a3d4:	cmp	r7, r0
   1a3d8:	beq	1a47c <_start@@Base+0x5e7c>
   1a3dc:	cmp	r5, r0
   1a3e0:	bne	1a360 <_start@@Base+0x5d60>
   1a3e4:	mov	r5, r0
   1a3e8:	ldr	r3, [r6, #4]!
   1a3ec:	cmp	r3, #0
   1a3f0:	bne	1a3b4 <_start@@Base+0x5db4>
   1a3f4:	mov	r3, #23
   1a3f8:	mov	r2, r7
   1a3fc:	mov	r1, r0
   1a400:	mov	r0, r8
   1a404:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a408:	mov	r4, r0
   1a40c:	b	1a480 <_start@@Base+0x5e80>
   1a410:	mov	r3, #8
   1a414:	mov	r2, r7
   1a418:	mov	r1, r0
   1a41c:	mov	r0, r8
   1a420:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a424:	cmp	r7, r0
   1a428:	bne	1a388 <_start@@Base+0x5d88>
   1a42c:	mov	r4, r0
   1a430:	b	1a480 <_start@@Base+0x5e80>
   1a434:	movw	r0, #32767	; 0x7fff
   1a438:	mov	r1, #0
   1a43c:	cmp	r3, r1
   1a440:	cmpeq	r2, r0
   1a444:	sxthls	fp, r2
   1a448:	bls	1a388 <_start@@Base+0x5d88>
   1a44c:	mov	r3, #7
   1a450:	mov	r2, r7
   1a454:	mov	r1, r4
   1a458:	mov	r0, r8
   1a45c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a460:	b	1a424 <_start@@Base+0x5e24>
   1a464:	ldr	r3, [r0, #12]
   1a468:	cmp	r3, #0
   1a46c:	movne	r4, r7
   1a470:	bne	1a480 <_start@@Base+0x5e80>
   1a474:	mov	r4, r7
   1a478:	b	1a32c <_start@@Base+0x5d2c>
   1a47c:	mov	r4, r0
   1a480:	mov	r0, r4
   1a484:	add	sp, sp, #36	; 0x24
   1a488:	ldrd	r4, [sp]
   1a48c:	ldrd	r6, [sp, #8]
   1a490:	ldrd	r8, [sp, #16]
   1a494:	ldrd	sl, [sp, #24]
   1a498:	add	sp, sp, #32
   1a49c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4a4:	strd	r6, [sp, #8]
   1a4a8:	strd	r8, [sp, #16]
   1a4ac:	strd	sl, [sp, #24]
   1a4b0:	str	lr, [sp, #32]
   1a4b4:	sub	sp, sp, #36	; 0x24
   1a4b8:	mov	r8, r0
   1a4bc:	mov	r7, r2
   1a4c0:	str	r3, [sp, #8]
   1a4c4:	ldr	fp, [sp, #72]	; 0x48
   1a4c8:	mov	r3, #0
   1a4cc:	str	r3, [fp]
   1a4d0:	cmp	r1, r2
   1a4d4:	beq	1a668 <_start@@Base+0x6068>
   1a4d8:	ldrb	r3, [r1]
   1a4dc:	cmp	r3, #34	; 0x22
   1a4e0:	addeq	r4, r1, #1
   1a4e4:	moveq	r3, #0
   1a4e8:	streq	r3, [r0, #12]
   1a4ec:	beq	1a52c <_start@@Base+0x5f2c>
   1a4f0:	cmp	r3, #46	; 0x2e
   1a4f4:	movne	r3, #1
   1a4f8:	strne	r3, [r0, #12]
   1a4fc:	movne	r4, r1
   1a500:	beq	1a514 <_start@@Base+0x5f14>
   1a504:	mov	r3, #0
   1a508:	str	r3, [sp, #12]
   1a50c:	add	sl, sp, #16
   1a510:	b	1a5c4 <_start@@Base+0x5fc4>
   1a514:	mov	r3, #5
   1a518:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a51c:	mov	r4, r0
   1a520:	ldr	r3, [r8, #12]
   1a524:	cmp	r3, #0
   1a528:	bne	1a55c <_start@@Base+0x5f5c>
   1a52c:	sub	r3, r7, r4
   1a530:	cmp	r3, #1
   1a534:	ble	1a548 <_start@@Base+0x5f48>
   1a538:	ldrb	r3, [r4]
   1a53c:	cmp	r3, #32
   1a540:	bhi	1a55c <_start@@Base+0x5f5c>
   1a544:	beq	1a568 <_start@@Base+0x5f68>
   1a548:	mov	r2, r7
   1a54c:	mov	r1, r4
   1a550:	mov	r0, r8
   1a554:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1a558:	mov	r4, r0
   1a55c:	cmp	r7, r4
   1a560:	bne	1a504 <_start@@Base+0x5f04>
   1a564:	b	1a684 <_start@@Base+0x6084>
   1a568:	ldrb	r3, [r4, #1]
   1a56c:	cmp	r3, #32
   1a570:	addhi	r4, r4, #1
   1a574:	bls	1a548 <_start@@Base+0x5f48>
   1a578:	b	1a55c <_start@@Base+0x5f5c>
   1a57c:	mov	r4, r0
   1a580:	ldr	r3, [sp, #20]
   1a584:	cmp	r3, #0
   1a588:	bne	1a62c <_start@@Base+0x602c>
   1a58c:	ldrd	r2, [sp, #24]
   1a590:	mvn	r0, #0
   1a594:	mov	r1, #0
   1a598:	cmp	r3, r1
   1a59c:	cmpeq	r2, r0
   1a5a0:	strls	r2, [sp, #12]
   1a5a4:	bhi	1a650 <_start@@Base+0x6050>
   1a5a8:	ldr	r3, [fp]
   1a5ac:	ldr	r2, [sp, #12]
   1a5b0:	add	r3, r3, r2
   1a5b4:	str	r3, [fp]
   1a5b8:	ldr	r3, [sp, #16]
   1a5bc:	cmp	r3, #0
   1a5c0:	beq	1a684 <_start@@Base+0x6084>
   1a5c4:	ldr	r6, [sp, #8]
   1a5c8:	mov	r5, r4
   1a5cc:	add	r9, sp, #24
   1a5d0:	str	sl, [sp, #4]
   1a5d4:	str	r9, [sp]
   1a5d8:	ldr	r4, [r6]
   1a5dc:	add	r3, sp, #20
   1a5e0:	mov	r2, r7
   1a5e4:	mov	r1, r5
   1a5e8:	mov	r0, r8
   1a5ec:	blx	r4
   1a5f0:	cmp	r7, r0
   1a5f4:	beq	1a680 <_start@@Base+0x6080>
   1a5f8:	cmp	r5, r0
   1a5fc:	bne	1a57c <_start@@Base+0x5f7c>
   1a600:	mov	r5, r0
   1a604:	ldr	r3, [r6, #4]!
   1a608:	cmp	r3, #0
   1a60c:	bne	1a5d0 <_start@@Base+0x5fd0>
   1a610:	mov	r3, #23
   1a614:	mov	r2, r7
   1a618:	mov	r1, r0
   1a61c:	mov	r0, r8
   1a620:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a624:	mov	r4, r0
   1a628:	b	1a684 <_start@@Base+0x6084>
   1a62c:	mov	r3, #8
   1a630:	mov	r2, r7
   1a634:	mov	r1, r0
   1a638:	mov	r0, r8
   1a63c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a640:	cmp	r7, r0
   1a644:	bne	1a5a8 <_start@@Base+0x5fa8>
   1a648:	mov	r4, r0
   1a64c:	b	1a684 <_start@@Base+0x6084>
   1a650:	mov	r3, #7
   1a654:	mov	r2, r7
   1a658:	mov	r1, r4
   1a65c:	mov	r0, r8
   1a660:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a664:	b	1a640 <_start@@Base+0x6040>
   1a668:	ldr	r3, [r0, #12]
   1a66c:	cmp	r3, #0
   1a670:	movne	r4, r2
   1a674:	bne	1a684 <_start@@Base+0x6084>
   1a678:	mov	r4, r7
   1a67c:	b	1a548 <_start@@Base+0x5f48>
   1a680:	mov	r4, r0
   1a684:	mov	r0, r4
   1a688:	add	sp, sp, #36	; 0x24
   1a68c:	ldrd	r4, [sp]
   1a690:	ldrd	r6, [sp, #8]
   1a694:	ldrd	r8, [sp, #16]
   1a698:	ldrd	sl, [sp, #24]
   1a69c:	add	sp, sp, #32
   1a6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a6a8:	strd	r6, [sp, #8]
   1a6ac:	strd	r8, [sp, #16]
   1a6b0:	strd	sl, [sp, #24]
   1a6b4:	str	lr, [sp, #32]
   1a6b8:	sub	sp, sp, #44	; 0x2c
   1a6bc:	mov	r8, r0
   1a6c0:	mov	r7, r2
   1a6c4:	str	r3, [sp, #20]
   1a6c8:	ldr	fp, [sp, #80]	; 0x50
   1a6cc:	mov	r2, #0
   1a6d0:	mov	r3, #0
   1a6d4:	strd	r2, [fp]
   1a6d8:	cmp	r1, r7
   1a6dc:	beq	1a864 <_start@@Base+0x6264>
   1a6e0:	ldrb	r3, [r1]
   1a6e4:	cmp	r3, #34	; 0x22
   1a6e8:	addeq	r4, r1, #1
   1a6ec:	moveq	r3, #0
   1a6f0:	streq	r3, [r0, #12]
   1a6f4:	beq	1a740 <_start@@Base+0x6140>
   1a6f8:	cmp	r3, #46	; 0x2e
   1a6fc:	movne	r3, #1
   1a700:	strne	r3, [r0, #12]
   1a704:	movne	r4, r1
   1a708:	beq	1a724 <_start@@Base+0x6124>
   1a70c:	mov	r3, #0
   1a710:	str	r3, [sp, #12]
   1a714:	str	r3, [sp, #16]
   1a718:	add	sl, sp, #24
   1a71c:	add	r9, sp, #32
   1a720:	b	1a7dc <_start@@Base+0x61dc>
   1a724:	mov	r3, #5
   1a728:	mov	r2, r7
   1a72c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a730:	mov	r4, r0
   1a734:	ldr	r3, [r8, #12]
   1a738:	cmp	r3, #0
   1a73c:	bne	1a770 <_start@@Base+0x6170>
   1a740:	sub	r3, r7, r4
   1a744:	cmp	r3, #1
   1a748:	ble	1a75c <_start@@Base+0x615c>
   1a74c:	ldrb	r3, [r4]
   1a750:	cmp	r3, #32
   1a754:	bhi	1a770 <_start@@Base+0x6170>
   1a758:	beq	1a77c <_start@@Base+0x617c>
   1a75c:	mov	r2, r7
   1a760:	mov	r1, r4
   1a764:	mov	r0, r8
   1a768:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1a76c:	mov	r4, r0
   1a770:	cmp	r7, r4
   1a774:	bne	1a70c <_start@@Base+0x610c>
   1a778:	b	1a880 <_start@@Base+0x6280>
   1a77c:	ldrb	r3, [r4, #1]
   1a780:	cmp	r3, #32
   1a784:	addhi	r4, r4, #1
   1a788:	bls	1a75c <_start@@Base+0x615c>
   1a78c:	b	1a770 <_start@@Base+0x6170>
   1a790:	mov	r4, r0
   1a794:	ldr	r3, [sp, #28]
   1a798:	cmp	r3, #0
   1a79c:	bne	1a840 <_start@@Base+0x6240>
   1a7a0:	ldr	r3, [sp, #32]
   1a7a4:	str	r3, [sp, #12]
   1a7a8:	ldr	r3, [sp, #36]	; 0x24
   1a7ac:	str	r3, [sp, #16]
   1a7b0:	ldr	r3, [fp]
   1a7b4:	ldr	r2, [fp, #4]
   1a7b8:	ldr	r1, [sp, #12]
   1a7bc:	adds	r3, r3, r1
   1a7c0:	ldr	r1, [sp, #16]
   1a7c4:	adc	r2, r2, r1
   1a7c8:	str	r3, [fp]
   1a7cc:	str	r2, [fp, #4]
   1a7d0:	ldr	r3, [sp, #24]
   1a7d4:	cmp	r3, #0
   1a7d8:	beq	1a880 <_start@@Base+0x6280>
   1a7dc:	ldr	r6, [sp, #20]
   1a7e0:	mov	r5, r4
   1a7e4:	str	sl, [sp, #4]
   1a7e8:	str	r9, [sp]
   1a7ec:	ldr	r4, [r6]
   1a7f0:	add	r3, sp, #28
   1a7f4:	mov	r2, r7
   1a7f8:	mov	r1, r5
   1a7fc:	mov	r0, r8
   1a800:	blx	r4
   1a804:	cmp	r7, r0
   1a808:	beq	1a87c <_start@@Base+0x627c>
   1a80c:	cmp	r5, r0
   1a810:	bne	1a790 <_start@@Base+0x6190>
   1a814:	mov	r5, r0
   1a818:	ldr	r3, [r6, #4]!
   1a81c:	cmp	r3, #0
   1a820:	bne	1a7e4 <_start@@Base+0x61e4>
   1a824:	mov	r3, #23
   1a828:	mov	r2, r7
   1a82c:	mov	r1, r0
   1a830:	mov	r0, r8
   1a834:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a838:	mov	r4, r0
   1a83c:	b	1a880 <_start@@Base+0x6280>
   1a840:	mov	r3, #8
   1a844:	mov	r2, r7
   1a848:	mov	r1, r0
   1a84c:	mov	r0, r8
   1a850:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a854:	cmp	r7, r0
   1a858:	bne	1a7b0 <_start@@Base+0x61b0>
   1a85c:	mov	r4, r0
   1a860:	b	1a880 <_start@@Base+0x6280>
   1a864:	ldr	r3, [r0, #12]
   1a868:	cmp	r3, #0
   1a86c:	movne	r4, r7
   1a870:	bne	1a880 <_start@@Base+0x6280>
   1a874:	mov	r4, r7
   1a878:	b	1a75c <_start@@Base+0x615c>
   1a87c:	mov	r4, r0
   1a880:	mov	r0, r4
   1a884:	add	sp, sp, #44	; 0x2c
   1a888:	ldrd	r4, [sp]
   1a88c:	ldrd	r6, [sp, #8]
   1a890:	ldrd	r8, [sp, #16]
   1a894:	ldrd	sl, [sp, #24]
   1a898:	add	sp, sp, #32
   1a89c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a8a4:	strd	r6, [sp, #8]
   1a8a8:	strd	r8, [sp, #16]
   1a8ac:	strd	sl, [sp, #24]
   1a8b0:	str	lr, [sp, #32]
   1a8b4:	sub	sp, sp, #36	; 0x24
   1a8b8:	mov	r8, r0
   1a8bc:	mov	r7, r2
   1a8c0:	str	r3, [sp, #8]
   1a8c4:	ldr	fp, [sp, #72]	; 0x48
   1a8c8:	mov	r3, #0
   1a8cc:	strh	r3, [fp]
   1a8d0:	cmp	r1, r2
   1a8d4:	beq	1aa6c <_start@@Base+0x646c>
   1a8d8:	ldrb	r3, [r1]
   1a8dc:	cmp	r3, #34	; 0x22
   1a8e0:	addeq	r4, r1, #1
   1a8e4:	moveq	r3, #0
   1a8e8:	streq	r3, [r0, #12]
   1a8ec:	beq	1a92c <_start@@Base+0x632c>
   1a8f0:	cmp	r3, #46	; 0x2e
   1a8f4:	movne	r3, #1
   1a8f8:	strne	r3, [r0, #12]
   1a8fc:	movne	r4, r1
   1a900:	beq	1a914 <_start@@Base+0x6314>
   1a904:	mov	r3, #0
   1a908:	str	r3, [sp, #12]
   1a90c:	add	sl, sp, #16
   1a910:	b	1a9c8 <_start@@Base+0x63c8>
   1a914:	mov	r3, #5
   1a918:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1a91c:	mov	r4, r0
   1a920:	ldr	r3, [r8, #12]
   1a924:	cmp	r3, #0
   1a928:	bne	1a95c <_start@@Base+0x635c>
   1a92c:	sub	r3, r7, r4
   1a930:	cmp	r3, #1
   1a934:	ble	1a948 <_start@@Base+0x6348>
   1a938:	ldrb	r3, [r4]
   1a93c:	cmp	r3, #32
   1a940:	bhi	1a95c <_start@@Base+0x635c>
   1a944:	beq	1a968 <_start@@Base+0x6368>
   1a948:	mov	r2, r7
   1a94c:	mov	r1, r4
   1a950:	mov	r0, r8
   1a954:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1a958:	mov	r4, r0
   1a95c:	cmp	r7, r4
   1a960:	bne	1a904 <_start@@Base+0x6304>
   1a964:	b	1aa88 <_start@@Base+0x6488>
   1a968:	ldrb	r3, [r4, #1]
   1a96c:	cmp	r3, #32
   1a970:	addhi	r4, r4, #1
   1a974:	bls	1a948 <_start@@Base+0x6348>
   1a978:	b	1a95c <_start@@Base+0x635c>
   1a97c:	mov	r4, r0
   1a980:	ldr	r3, [sp, #20]
   1a984:	cmp	r3, #0
   1a988:	bne	1aa30 <_start@@Base+0x6430>
   1a98c:	ldrd	r2, [sp, #24]
   1a990:	movw	r0, #65535	; 0xffff
   1a994:	mov	r1, #0
   1a998:	cmp	r3, r1
   1a99c:	cmpeq	r2, r0
   1a9a0:	uxthls	r3, r2
   1a9a4:	strls	r3, [sp, #12]
   1a9a8:	bhi	1aa54 <_start@@Base+0x6454>
   1a9ac:	ldrh	r3, [fp]
   1a9b0:	ldr	r2, [sp, #12]
   1a9b4:	add	r3, r2, r3
   1a9b8:	strh	r3, [fp]
   1a9bc:	ldr	r3, [sp, #16]
   1a9c0:	cmp	r3, #0
   1a9c4:	beq	1aa88 <_start@@Base+0x6488>
   1a9c8:	ldr	r6, [sp, #8]
   1a9cc:	mov	r5, r4
   1a9d0:	add	r9, sp, #24
   1a9d4:	str	sl, [sp, #4]
   1a9d8:	str	r9, [sp]
   1a9dc:	ldr	r4, [r6]
   1a9e0:	add	r3, sp, #20
   1a9e4:	mov	r2, r7
   1a9e8:	mov	r1, r5
   1a9ec:	mov	r0, r8
   1a9f0:	blx	r4
   1a9f4:	cmp	r7, r0
   1a9f8:	beq	1aa84 <_start@@Base+0x6484>
   1a9fc:	cmp	r5, r0
   1aa00:	bne	1a97c <_start@@Base+0x637c>
   1aa04:	mov	r5, r0
   1aa08:	ldr	r3, [r6, #4]!
   1aa0c:	cmp	r3, #0
   1aa10:	bne	1a9d4 <_start@@Base+0x63d4>
   1aa14:	mov	r3, #23
   1aa18:	mov	r2, r7
   1aa1c:	mov	r1, r0
   1aa20:	mov	r0, r8
   1aa24:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1aa28:	mov	r4, r0
   1aa2c:	b	1aa88 <_start@@Base+0x6488>
   1aa30:	mov	r3, #8
   1aa34:	mov	r2, r7
   1aa38:	mov	r1, r0
   1aa3c:	mov	r0, r8
   1aa40:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1aa44:	cmp	r7, r0
   1aa48:	bne	1a9ac <_start@@Base+0x63ac>
   1aa4c:	mov	r4, r0
   1aa50:	b	1aa88 <_start@@Base+0x6488>
   1aa54:	mov	r3, #7
   1aa58:	mov	r2, r7
   1aa5c:	mov	r1, r4
   1aa60:	mov	r0, r8
   1aa64:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1aa68:	b	1aa44 <_start@@Base+0x6444>
   1aa6c:	ldr	r3, [r0, #12]
   1aa70:	cmp	r3, #0
   1aa74:	movne	r4, r2
   1aa78:	bne	1aa88 <_start@@Base+0x6488>
   1aa7c:	mov	r4, r7
   1aa80:	b	1a948 <_start@@Base+0x6348>
   1aa84:	mov	r4, r0
   1aa88:	mov	r0, r4
   1aa8c:	add	sp, sp, #36	; 0x24
   1aa90:	ldrd	r4, [sp]
   1aa94:	ldrd	r6, [sp, #8]
   1aa98:	ldrd	r8, [sp, #16]
   1aa9c:	ldrd	sl, [sp, #24]
   1aaa0:	add	sp, sp, #32
   1aaa4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aaa8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aaac:	strd	r6, [sp, #8]
   1aab0:	strd	r8, [sp, #16]
   1aab4:	strd	sl, [sp, #24]
   1aab8:	str	lr, [sp, #32]
   1aabc:	sub	sp, sp, #52	; 0x34
   1aac0:	mov	sl, r0
   1aac4:	mov	r4, r1
   1aac8:	mov	r5, r2
   1aacc:	mov	r2, #0
   1aad0:	ldr	r1, [sp, #88]	; 0x58
   1aad4:	str	r2, [r1]
   1aad8:	cmp	r3, #9
   1aadc:	beq	1b518 <_start@@Base+0x6f18>
   1aae0:	bhi	1ab24 <_start@@Base+0x6524>
   1aae4:	cmp	r3, #2
   1aae8:	beq	1ab98 <_start@@Base+0x6598>
   1aaec:	cmp	r3, #8
   1aaf0:	beq	1af90 <_start@@Base+0x6990>
   1aaf4:	cmp	r3, r2
   1aaf8:	beq	1ab50 <_start@@Base+0x6550>
   1aafc:	ldr	r3, [sl, #8]
   1ab00:	tst	r3, #1
   1ab04:	bne	1b598 <_start@@Base+0x6f98>
   1ab08:	mov	r3, #15
   1ab0c:	mov	r2, r5
   1ab10:	mov	r1, r4
   1ab14:	mov	r0, sl
   1ab18:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ab1c:	mov	r4, r0
   1ab20:	b	1b548 <_start@@Base+0x6f48>
   1ab24:	cmp	r3, #11
   1ab28:	beq	1b580 <_start@@Base+0x6f80>
   1ab2c:	bcc	1b568 <_start@@Base+0x6f68>
   1ab30:	cmp	r3, #255	; 0xff
   1ab34:	bne	1aafc <_start@@Base+0x64fc>
   1ab38:	ldr	r3, [sp, #88]	; 0x58
   1ab3c:	mov	r2, r5
   1ab40:	mov	r1, r4
   1ab44:	bl	2f708 <flatcc_json_parser_build_string@@Base>
   1ab48:	mov	r4, r0
   1ab4c:	b	1b52c <_start@@Base+0x6f2c>
   1ab50:	sub	r3, r5, r4
   1ab54:	cmp	r3, #3
   1ab58:	ble	1ab7c <_start@@Base+0x657c>
   1ab5c:	mov	r2, #4
   1ab60:	movw	r1, #60808	; 0xed88
   1ab64:	movt	r1, #3
   1ab68:	mov	r0, r4
   1ab6c:	bl	14530 <memcmp@plt>
   1ab70:	cmp	r0, #0
   1ab74:	addeq	r4, r4, #4
   1ab78:	beq	1b548 <_start@@Base+0x6f48>
   1ab7c:	mov	r3, #26
   1ab80:	mov	r2, r5
   1ab84:	mov	r1, r4
   1ab88:	mov	r0, sl
   1ab8c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ab90:	mov	r4, r0
   1ab94:	b	1b548 <_start@@Base+0x6f48>
   1ab98:	mov	r1, #1
   1ab9c:	ldr	r0, [r0]
   1aba0:	bl	27be4 <flatcc_builder_start_table@@Base>
   1aba4:	cmp	r0, #0
   1aba8:	beq	1abc8 <_start@@Base+0x65c8>
   1abac:	mov	r3, #33	; 0x21
   1abb0:	mov	r2, r5
   1abb4:	mov	r1, r4
   1abb8:	mov	r0, sl
   1abbc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1abc0:	mov	r4, r0
   1abc4:	b	1b52c <_start@@Base+0x6f2c>
   1abc8:	add	r3, sp, #28
   1abcc:	mov	r2, r5
   1abd0:	mov	r1, r4
   1abd4:	mov	r0, sl
   1abd8:	bl	18650 <_start@@Base+0x4050>
   1abdc:	mov	r4, r0
   1abe0:	ldr	r3, [sp, #28]
   1abe4:	cmp	r3, #0
   1abe8:	beq	1af68 <_start@@Base+0x6968>
   1abec:	add	r7, pc, #996	; 0x3e4
   1abf0:	ldrd	r6, [r7]
   1abf4:	b	1aefc <_start@@Base+0x68fc>
   1abf8:	mov	r3, #5
   1abfc:	mov	r2, r5
   1ac00:	mov	r1, r4
   1ac04:	mov	r0, sl
   1ac08:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ac0c:	mov	r4, r0
   1ac10:	b	1af2c <_start@@Base+0x692c>
   1ac14:	ldrb	r0, [r4, #7]
   1ac18:	mov	r1, #0
   1ac1c:	ldrb	r2, [r4, #6]
   1ac20:	orr	r2, r0, r2, lsl #8
   1ac24:	mov	r3, r1
   1ac28:	ldrb	r0, [r4, #5]
   1ac2c:	orr	r2, r2, r0, lsl #16
   1ac30:	ldrb	r0, [r4, #4]
   1ac34:	orr	r2, r2, r0, lsl #24
   1ac38:	ldrb	r0, [r4, #3]
   1ac3c:	orr	r3, r3, r0
   1ac40:	ldrb	r0, [r4, #2]
   1ac44:	orr	r3, r3, r0, lsl #8
   1ac48:	ldrb	r0, [r4, #1]
   1ac4c:	orr	r3, r3, r0, lsl #16
   1ac50:	ldrb	r0, [r4]
   1ac54:	mov	r8, r2
   1ac58:	orr	r9, r3, r0, lsl #24
   1ac5c:	cmp	r9, r7
   1ac60:	cmpeq	r8, r6
   1ac64:	bne	1aec4 <_start@@Base+0x68c4>
   1ac68:	add	fp, r4, #8
   1ac6c:	mov	r1, r5
   1ac70:	mov	r0, fp
   1ac74:	bl	146f0 <_start@@Base+0xf0>
   1ac78:	add	r3, pc, #864	; 0x360
   1ac7c:	ldrd	r2, [r3]
   1ac80:	cmp	r1, r3
   1ac84:	cmpeq	r0, r2
   1ac88:	bne	1aeac <_start@@Base+0x68ac>
   1ac8c:	add	r4, r4, #16
   1ac90:	mov	r1, r5
   1ac94:	mov	r0, r4
   1ac98:	bl	146f0 <_start@@Base+0xf0>
   1ac9c:	mov	r3, #0
   1aca0:	str	r3, [sp, #16]
   1aca4:	bic	r3, r1, #255	; 0xff
   1aca8:	str	r3, [sp, #20]
   1acac:	ldrd	r2, [sp, #16]
   1acb0:	add	r1, pc, #816	; 0x330
   1acb4:	ldrd	r0, [r1]
   1acb8:	cmp	r3, r1
   1acbc:	cmpeq	r2, r0
   1acc0:	beq	1ad3c <_start@@Base+0x673c>
   1acc4:	mov	r2, r5
   1acc8:	mov	r1, r4
   1accc:	mov	r0, sl
   1acd0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1acd4:	mov	r4, r0
   1acd8:	b	1aed8 <_start@@Base+0x68d8>
   1acdc:	mov	r0, #0
   1ace0:	mov	r1, r0
   1ace4:	b	1ac1c <_start@@Base+0x661c>
   1ace8:	mov	r2, #0
   1acec:	mov	r3, r2
   1acf0:	b	1ac28 <_start@@Base+0x6628>
   1acf4:	mov	r2, #0
   1acf8:	mov	r3, r2
   1acfc:	b	1ac30 <_start@@Base+0x6630>
   1ad00:	mov	r2, #0
   1ad04:	mov	r3, r2
   1ad08:	b	1ac38 <_start@@Base+0x6638>
   1ad0c:	mov	r2, #0
   1ad10:	mov	r3, r2
   1ad14:	b	1ac40 <_start@@Base+0x6640>
   1ad18:	mov	r2, #0
   1ad1c:	mov	r3, r2
   1ad20:	b	1ac48 <_start@@Base+0x6648>
   1ad24:	mov	r2, #0
   1ad28:	mov	r3, r2
   1ad2c:	b	1ac50 <_start@@Base+0x6650>
   1ad30:	mov	r8, #0
   1ad34:	mov	r9, #0
   1ad38:	b	1ac5c <_start@@Base+0x665c>
   1ad3c:	mov	r3, #3
   1ad40:	mov	r2, r5
   1ad44:	mov	r1, r4
   1ad48:	mov	r0, sl
   1ad4c:	bl	18490 <_start@@Base+0x3e90>
   1ad50:	mov	fp, r0
   1ad54:	cmp	r4, r0
   1ad58:	beq	1ae94 <_start@@Base+0x6894>
   1ad5c:	mov	r3, #0
   1ad60:	str	r3, [sp, #32]
   1ad64:	str	r3, [sp, #40]	; 0x28
   1ad68:	str	r3, [sp, #44]	; 0x2c
   1ad6c:	str	r3, [sp, #36]	; 0x24
   1ad70:	cmp	r5, r0
   1ad74:	beq	1b5cc <_start@@Base+0x6fcc>
   1ad78:	add	r3, sp, #40	; 0x28
   1ad7c:	str	r3, [sp]
   1ad80:	add	r3, sp, #36	; 0x24
   1ad84:	mov	r2, r5
   1ad88:	mov	r1, r0
   1ad8c:	mov	r0, sl
   1ad90:	bl	2f170 <flatcc_json_parser_integer@@Base>
   1ad94:	mov	r4, r0
   1ad98:	cmp	fp, r0
   1ad9c:	bne	1add4 <_start@@Base+0x67d4>
   1ada0:	mov	fp, r4
   1ada4:	add	r3, sp, #32
   1ada8:	str	r3, [sp]
   1adac:	ldr	r3, [pc, #572]	; 1aff0 <_start@@Base+0x69f0>
   1adb0:	mov	r2, r5
   1adb4:	mov	r1, fp
   1adb8:	mov	r0, sl
   1adbc:	bl	19a74 <_start@@Base+0x5474>
   1adc0:	mov	r4, r0
   1adc4:	cmp	r5, r0
   1adc8:	cmpne	r0, fp
   1adcc:	bne	1ae18 <_start@@Base+0x6818>
   1add0:	b	1abac <_start@@Base+0x65ac>
   1add4:	ldrd	r2, [sp, #40]	; 0x28
   1add8:	ldr	r1, [sp, #36]	; 0x24
   1addc:	cmp	r1, #0
   1ade0:	beq	1ae58 <_start@@Base+0x6858>
   1ade4:	cmp	r3, #0
   1ade8:	cmpeq	r2, #-2147483648	; 0x80000000
   1adec:	rsbls	r2, r2, #0
   1adf0:	strls	r2, [sp, #32]
   1adf4:	bls	1ae18 <_start@@Base+0x6818>
   1adf8:	mov	r3, #8
   1adfc:	mov	r2, r5
   1ae00:	mov	r1, r0
   1ae04:	mov	r0, sl
   1ae08:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ae0c:	mov	r4, r0
   1ae10:	cmp	fp, r4
   1ae14:	beq	1ae8c <_start@@Base+0x688c>
   1ae18:	ldr	r3, [sp, #32]
   1ae1c:	cmp	r3, #0
   1ae20:	bne	1ae30 <_start@@Base+0x6830>
   1ae24:	ldr	r3, [sl, #8]
   1ae28:	tst	r3, #2
   1ae2c:	beq	1aed8 <_start@@Base+0x68d8>
   1ae30:	mov	r3, #4
   1ae34:	mov	r2, r3
   1ae38:	mov	r1, #0
   1ae3c:	ldr	r0, [sl]
   1ae40:	bl	297a8 <flatcc_builder_table_add@@Base>
   1ae44:	cmp	r0, #0
   1ae48:	beq	1abac <_start@@Base+0x65ac>
   1ae4c:	ldr	r3, [sp, #32]
   1ae50:	str	r3, [r0]
   1ae54:	b	1aed8 <_start@@Base+0x68d8>
   1ae58:	mvn	r0, #-2147483648	; 0x80000000
   1ae5c:	mov	r1, #0
   1ae60:	cmp	r3, r1
   1ae64:	cmpeq	r2, r0
   1ae68:	strls	r2, [sp, #32]
   1ae6c:	bls	1ae18 <_start@@Base+0x6818>
   1ae70:	mov	r3, #7
   1ae74:	mov	r2, r5
   1ae78:	mov	r1, r4
   1ae7c:	mov	r0, sl
   1ae80:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ae84:	mov	r4, r0
   1ae88:	b	1ae10 <_start@@Base+0x6810>
   1ae8c:	mov	fp, r4
   1ae90:	b	1ada4 <_start@@Base+0x67a4>
   1ae94:	mov	r2, r5
   1ae98:	mov	r1, r0
   1ae9c:	mov	r0, sl
   1aea0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1aea4:	mov	r4, r0
   1aea8:	b	1aed8 <_start@@Base+0x68d8>
   1aeac:	mov	r2, r5
   1aeb0:	mov	r1, fp
   1aeb4:	mov	r0, sl
   1aeb8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1aebc:	mov	r4, r0
   1aec0:	b	1aed8 <_start@@Base+0x68d8>
   1aec4:	mov	r2, r5
   1aec8:	mov	r1, r4
   1aecc:	mov	r0, sl
   1aed0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1aed4:	mov	r4, r0
   1aed8:	add	r3, sp, #28
   1aedc:	mov	r2, r5
   1aee0:	mov	r1, r4
   1aee4:	mov	r0, sl
   1aee8:	bl	180ec <_start@@Base+0x3aec>
   1aeec:	mov	r4, r0
   1aef0:	ldr	r3, [sp, #28]
   1aef4:	cmp	r3, #0
   1aef8:	beq	1af68 <_start@@Base+0x6968>
   1aefc:	cmp	r5, r4
   1af00:	beq	1af2c <_start@@Base+0x692c>
   1af04:	ldrb	r3, [r4]
   1af08:	cmp	r3, #34	; 0x22
   1af0c:	addeq	r4, r4, #1
   1af10:	moveq	r3, #0
   1af14:	streq	r3, [sl, #12]
   1af18:	beq	1af2c <_start@@Base+0x692c>
   1af1c:	cmp	r3, #46	; 0x2e
   1af20:	movne	r3, #1
   1af24:	strne	r3, [sl, #12]
   1af28:	beq	1abf8 <_start@@Base+0x65f8>
   1af2c:	sub	r3, r5, r4
   1af30:	cmp	r3, #8
   1af34:	bhi	1ac14 <_start@@Base+0x6614>
   1af38:	sub	r3, r3, #1
   1af3c:	cmp	r3, #7
   1af40:	ldrls	pc, [pc, r3, lsl #2]
   1af44:	b	1ad30 <_start@@Base+0x6730>
   1af48:	andeq	sl, r1, r4, lsr #26
   1af4c:	andeq	sl, r1, r8, lsl sp
   1af50:	andeq	sl, r1, ip, lsl #26
   1af54:	andeq	sl, r1, r0, lsl #26
   1af58:	strdeq	sl, [r1], -r4
   1af5c:	andeq	sl, r1, r8, ror #25
   1af60:	ldrdeq	sl, [r1], -ip
   1af64:	andeq	sl, r1, r4, lsl ip
   1af68:	ldr	r3, [sl, #24]
   1af6c:	cmp	r3, #0
   1af70:	bne	1abac <_start@@Base+0x65ac>
   1af74:	ldr	r0, [sl]
   1af78:	bl	286bc <flatcc_builder_end_table@@Base>
   1af7c:	ldr	r3, [sp, #88]	; 0x58
   1af80:	str	r0, [r3]
   1af84:	cmp	r0, #0
   1af88:	bne	1b52c <_start@@Base+0x6f2c>
   1af8c:	b	1abac <_start@@Base+0x65ac>
   1af90:	mov	r2, #2
   1af94:	mov	r1, r2
   1af98:	ldr	r0, [r0]
   1af9c:	bl	26e3c <flatcc_builder_start_struct@@Base>
   1afa0:	subs	fp, r0, #0
   1afa4:	beq	1b4fc <_start@@Base+0x6efc>
   1afa8:	add	r3, sp, #32
   1afac:	mov	r2, r5
   1afb0:	mov	r1, r4
   1afb4:	mov	r0, sl
   1afb8:	bl	18650 <_start@@Base+0x4050>
   1afbc:	b	1b350 <_start@@Base+0x6d50>
   1afc0:	mov	r3, #5
   1afc4:	mov	r2, r5
   1afc8:	mov	r1, r0
   1afcc:	mov	r0, sl
   1afd0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1afd4:	b	1b38c <_start@@Base+0x6d8c>
   1afd8:	ldrbvs	r6, [pc], #-372	; 1afe0 <_start@@Base+0x69e0>
   1afdc:	cmnvc	r7, #456	; 0x1c8
   1afe0:	svcpl	0x0064616d
   1afe4:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1afe8:	andeq	r0, r0, r0
   1afec:	cmnvs	r7, r0, lsl #10
   1aff0:	andeq	r5, r5, ip, asr #1
   1aff4:	ldrb	r8, [r0, #7]
   1aff8:	mov	r9, #0
   1affc:	ldrb	r2, [r0, #6]
   1b000:	orr	r2, r8, r2, lsl #8
   1b004:	mov	r3, r9
   1b008:	ldrb	r8, [r0, #5]
   1b00c:	orr	r1, r2, r8, lsl #16
   1b010:	mov	r8, r3
   1b014:	ldrb	r2, [r0, #4]
   1b018:	orr	r2, r1, r2, lsl #24
   1b01c:	mov	r3, r8
   1b020:	ldrb	r8, [r0, #3]
   1b024:	orr	r3, r3, r8
   1b028:	ldrb	r8, [r0, #2]
   1b02c:	orr	r3, r3, r8, lsl #8
   1b030:	ldrb	r8, [r0, #1]
   1b034:	orr	r3, r3, r8, lsl #16
   1b038:	ldrb	r8, [r0]
   1b03c:	mov	r6, r2
   1b040:	orr	r7, r3, r8, lsl #24
   1b044:	add	r3, pc, #988	; 0x3dc
   1b048:	ldrd	r2, [r3]
   1b04c:	cmp	r7, r3
   1b050:	cmpeq	r6, r2
   1b054:	bne	1b2d0 <_start@@Base+0x6cd0>
   1b058:	add	r4, r0, #8
   1b05c:	sub	r3, r5, r4
   1b060:	cmp	r3, #8
   1b064:	bhi	1b0f8 <_start@@Base+0x6af8>
   1b068:	sub	r3, r3, #1
   1b06c:	cmp	r3, #7
   1b070:	ldrls	pc, [pc, r3, lsl #2]
   1b074:	b	1b198 <_start@@Base+0x6b98>
   1b078:	muleq	r1, r0, r1
   1b07c:	andeq	fp, r1, r8, lsl #3
   1b080:	andeq	fp, r1, r0, lsl #3
   1b084:	andeq	fp, r1, r8, ror r1
   1b088:	andeq	fp, r1, r0, ror r1
   1b08c:	andeq	fp, r1, r8, ror #2
   1b090:	andeq	fp, r1, ip, asr r1
   1b094:	strdeq	fp, [r1], -r8
   1b098:	mov	r8, #0
   1b09c:	mov	r9, r8
   1b0a0:	b	1affc <_start@@Base+0x69fc>
   1b0a4:	mov	r2, #0
   1b0a8:	mov	r3, r2
   1b0ac:	b	1b008 <_start@@Base+0x6a08>
   1b0b0:	mov	r1, #0
   1b0b4:	mov	r8, r1
   1b0b8:	b	1b014 <_start@@Base+0x6a14>
   1b0bc:	mov	r2, #0
   1b0c0:	mov	r3, r2
   1b0c4:	b	1b020 <_start@@Base+0x6a20>
   1b0c8:	mov	r2, #0
   1b0cc:	mov	r3, r2
   1b0d0:	b	1b028 <_start@@Base+0x6a28>
   1b0d4:	mov	r2, #0
   1b0d8:	mov	r3, r2
   1b0dc:	b	1b030 <_start@@Base+0x6a30>
   1b0e0:	mov	r2, #0
   1b0e4:	mov	r3, r2
   1b0e8:	b	1b038 <_start@@Base+0x6a38>
   1b0ec:	mov	r6, #0
   1b0f0:	mov	r7, #0
   1b0f4:	b	1b044 <_start@@Base+0x6a44>
   1b0f8:	mov	r3, #0
   1b0fc:	mov	r1, r3
   1b100:	ldrb	r2, [r0, #11]
   1b104:	orr	r1, r1, r2
   1b108:	ldrb	r2, [r0, #10]
   1b10c:	orr	r1, r1, r2, lsl #8
   1b110:	ldrb	r2, [r0, #9]
   1b114:	orr	r1, r1, r2, lsl #16
   1b118:	ldrb	r2, [r0, #8]
   1b11c:	orr	r3, r1, r2, lsl #24
   1b120:	mov	r2, #0
   1b124:	str	r2, [sp, #8]
   1b128:	bic	r3, r3, #255	; 0xff
   1b12c:	str	r3, [sp, #12]
   1b130:	ldrd	r2, [sp, #8]
   1b134:	add	r1, pc, #756	; 0x2f4
   1b138:	ldrd	r0, [r1]
   1b13c:	cmp	r3, r1
   1b140:	cmpeq	r2, r0
   1b144:	beq	1b1a0 <_start@@Base+0x6ba0>
   1b148:	mov	r2, r5
   1b14c:	mov	r1, r4
   1b150:	mov	r0, sl
   1b154:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1b158:	b	1b2e0 <_start@@Base+0x6ce0>
   1b15c:	mov	r2, #0
   1b160:	mov	r3, r2
   1b164:	b	1b0fc <_start@@Base+0x6afc>
   1b168:	mov	r1, #0
   1b16c:	b	1b100 <_start@@Base+0x6b00>
   1b170:	mov	r1, #0
   1b174:	b	1b100 <_start@@Base+0x6b00>
   1b178:	mov	r1, #0
   1b17c:	b	1b100 <_start@@Base+0x6b00>
   1b180:	mov	r1, #0
   1b184:	b	1b108 <_start@@Base+0x6b08>
   1b188:	mov	r1, #0
   1b18c:	b	1b110 <_start@@Base+0x6b10>
   1b190:	mov	r1, #0
   1b194:	b	1b118 <_start@@Base+0x6b18>
   1b198:	mov	r3, #0
   1b19c:	b	1b120 <_start@@Base+0x6b20>
   1b1a0:	mov	r3, #3
   1b1a4:	mov	r2, r5
   1b1a8:	mov	r1, r4
   1b1ac:	mov	r0, sl
   1b1b0:	bl	18490 <_start@@Base+0x3e90>
   1b1b4:	mov	r8, r0
   1b1b8:	cmp	r4, r0
   1b1bc:	beq	1b2bc <_start@@Base+0x6cbc>
   1b1c0:	mov	r3, #0
   1b1c4:	strh	r3, [sp, #28]
   1b1c8:	str	r3, [sp, #40]	; 0x28
   1b1cc:	str	r3, [sp, #44]	; 0x2c
   1b1d0:	str	r3, [sp, #36]	; 0x24
   1b1d4:	cmp	r5, r0
   1b1d8:	beq	1b5d4 <_start@@Base+0x6fd4>
   1b1dc:	add	r3, sp, #40	; 0x28
   1b1e0:	str	r3, [sp]
   1b1e4:	add	r3, sp, #36	; 0x24
   1b1e8:	mov	r2, r5
   1b1ec:	mov	r1, r0
   1b1f0:	mov	r0, sl
   1b1f4:	bl	2f170 <flatcc_json_parser_integer@@Base>
   1b1f8:	mov	r4, r0
   1b1fc:	cmp	r8, r0
   1b200:	bne	1b248 <_start@@Base+0x6c48>
   1b204:	add	r3, sp, #28
   1b208:	str	r3, [sp]
   1b20c:	ldr	r3, [pc, #548]	; 1b438 <_start@@Base+0x6e38>
   1b210:	mov	r2, r5
   1b214:	mov	r1, r4
   1b218:	mov	r0, sl
   1b21c:	bl	1a8a0 <_start@@Base+0x62a0>
   1b220:	cmp	r5, r0
   1b224:	cmpne	r4, r0
   1b228:	bne	1b2a8 <_start@@Base+0x6ca8>
   1b22c:	mov	r3, #33	; 0x21
   1b230:	mov	r2, r5
   1b234:	mov	r1, r0
   1b238:	mov	r0, sl
   1b23c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b240:	mov	r4, r0
   1b244:	b	1b4dc <_start@@Base+0x6edc>
   1b248:	ldr	r3, [sp, #36]	; 0x24
   1b24c:	cmp	r3, #0
   1b250:	bne	1b28c <_start@@Base+0x6c8c>
   1b254:	ldrd	r2, [sp, #40]	; 0x28
   1b258:	movw	r0, #65535	; 0xffff
   1b25c:	mov	r1, #0
   1b260:	cmp	r3, r1
   1b264:	cmpeq	r2, r0
   1b268:	strhls	r2, [sp, #28]
   1b26c:	movls	r0, r4
   1b270:	bls	1b2a8 <_start@@Base+0x6ca8>
   1b274:	mov	r3, #7
   1b278:	mov	r2, r5
   1b27c:	mov	r1, r4
   1b280:	mov	r0, sl
   1b284:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b288:	b	1b2a0 <_start@@Base+0x6ca0>
   1b28c:	mov	r3, #8
   1b290:	mov	r2, r5
   1b294:	mov	r1, r0
   1b298:	mov	r0, sl
   1b29c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b2a0:	cmp	r8, r0
   1b2a4:	beq	1b2b4 <_start@@Base+0x6cb4>
   1b2a8:	ldrh	r3, [sp, #28]
   1b2ac:	strh	r3, [fp]
   1b2b0:	b	1b2e0 <_start@@Base+0x6ce0>
   1b2b4:	mov	r4, r0
   1b2b8:	b	1b204 <_start@@Base+0x6c04>
   1b2bc:	mov	r2, r5
   1b2c0:	mov	r1, r0
   1b2c4:	mov	r0, sl
   1b2c8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1b2cc:	b	1b2e0 <_start@@Base+0x6ce0>
   1b2d0:	mov	r2, r5
   1b2d4:	mov	r1, r0
   1b2d8:	mov	r0, sl
   1b2dc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1b2e0:	sub	r3, r5, r0
   1b2e4:	cmp	r3, #1
   1b2e8:	ble	1b2fc <_start@@Base+0x6cfc>
   1b2ec:	ldrb	r3, [r0]
   1b2f0:	cmp	r3, #32
   1b2f4:	bhi	1b30c <_start@@Base+0x6d0c>
   1b2f8:	beq	1b3c8 <_start@@Base+0x6dc8>
   1b2fc:	mov	r2, r5
   1b300:	mov	r1, r0
   1b304:	mov	r0, sl
   1b308:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1b30c:	cmp	r5, r0
   1b310:	moveq	r3, #0
   1b314:	streq	r3, [sp, #32]
   1b318:	beq	1b350 <_start@@Base+0x6d50>
   1b31c:	ldrb	r3, [r0]
   1b320:	cmp	r3, #44	; 0x2c
   1b324:	beq	1b43c <_start@@Base+0x6e3c>
   1b328:	mov	r3, #0
   1b32c:	str	r3, [sp, #32]
   1b330:	ldrb	r3, [r0]
   1b334:	cmp	r3, #125	; 0x7d
   1b338:	beq	1b3dc <_start@@Base+0x6ddc>
   1b33c:	mov	r3, #10
   1b340:	mov	r2, r5
   1b344:	mov	r1, r0
   1b348:	mov	r0, sl
   1b34c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b350:	ldr	r3, [sp, #32]
   1b354:	cmp	r3, #0
   1b358:	beq	1b4d8 <_start@@Base+0x6ed8>
   1b35c:	cmp	r5, r0
   1b360:	beq	1b38c <_start@@Base+0x6d8c>
   1b364:	ldrb	r3, [r0]
   1b368:	cmp	r3, #34	; 0x22
   1b36c:	addeq	r0, r0, #1
   1b370:	moveq	r3, #0
   1b374:	streq	r3, [sl, #12]
   1b378:	beq	1b38c <_start@@Base+0x6d8c>
   1b37c:	cmp	r3, #46	; 0x2e
   1b380:	movne	r3, #1
   1b384:	strne	r3, [sl, #12]
   1b388:	beq	1afc0 <_start@@Base+0x69c0>
   1b38c:	sub	r3, r5, r0
   1b390:	cmp	r3, #8
   1b394:	bhi	1aff4 <_start@@Base+0x69f4>
   1b398:	sub	r3, r3, #1
   1b39c:	cmp	r3, #7
   1b3a0:	ldrls	pc, [pc, r3, lsl #2]
   1b3a4:	b	1b0ec <_start@@Base+0x6aec>
   1b3a8:	andeq	fp, r1, r0, ror #1
   1b3ac:	ldrdeq	fp, [r1], -r4
   1b3b0:	andeq	fp, r1, r8, asr #1
   1b3b4:	strheq	fp, [r1], -ip
   1b3b8:	strheq	fp, [r1], -r0
   1b3bc:	andeq	fp, r1, r4, lsr #1
   1b3c0:	muleq	r1, r8, r0
   1b3c4:	strdeq	sl, [r1], -r4
   1b3c8:	ldrb	r3, [r0, #1]
   1b3cc:	cmp	r3, #32
   1b3d0:	addhi	r0, r0, #1
   1b3d4:	bls	1b2fc <_start@@Base+0x6cfc>
   1b3d8:	b	1b30c <_start@@Base+0x6d0c>
   1b3dc:	add	r1, r0, #1
   1b3e0:	sub	r3, r5, r1
   1b3e4:	cmp	r3, #1
   1b3e8:	ble	1b400 <_start@@Base+0x6e00>
   1b3ec:	ldrb	r3, [r0, #1]
   1b3f0:	cmp	r3, #32
   1b3f4:	movhi	r0, r1
   1b3f8:	bhi	1b350 <_start@@Base+0x6d50>
   1b3fc:	beq	1b410 <_start@@Base+0x6e10>
   1b400:	mov	r2, r5
   1b404:	mov	r0, sl
   1b408:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1b40c:	b	1b350 <_start@@Base+0x6d50>
   1b410:	ldrb	r3, [r0, #2]
   1b414:	cmp	r3, #32
   1b418:	addhi	r0, r0, #2
   1b41c:	bls	1b400 <_start@@Base+0x6e00>
   1b420:	b	1b350 <_start@@Base+0x6d50>
   1b424:	nop	{0}
   1b428:	svcpl	0x006c656e
   1b42c:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1b430:	andeq	r0, r0, r0
   1b434:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1b438:	ldrdeq	r5, [r5], -r8
   1b43c:	add	r1, r0, #1
   1b440:	sub	r3, r5, r1
   1b444:	cmp	r3, #1
   1b448:	ble	1b460 <_start@@Base+0x6e60>
   1b44c:	ldrb	r3, [r0, #1]
   1b450:	cmp	r3, #32
   1b454:	movhi	r0, r1
   1b458:	bhi	1b46c <_start@@Base+0x6e6c>
   1b45c:	beq	1b4a4 <_start@@Base+0x6ea4>
   1b460:	mov	r2, r5
   1b464:	mov	r0, sl
   1b468:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1b46c:	cmp	r5, r0
   1b470:	beq	1b4b8 <_start@@Base+0x6eb8>
   1b474:	ldrb	r3, [r0]
   1b478:	cmp	r3, #125	; 0x7d
   1b47c:	movne	r3, #1
   1b480:	strne	r3, [sp, #32]
   1b484:	bne	1b350 <_start@@Base+0x6d50>
   1b488:	mov	r3, #0
   1b48c:	str	r3, [sp, #32]
   1b490:	mov	r2, r5
   1b494:	add	r1, r0, #1
   1b498:	mov	r0, sl
   1b49c:	bl	1809c <_start@@Base+0x3a9c>
   1b4a0:	b	1b350 <_start@@Base+0x6d50>
   1b4a4:	ldrb	r3, [r0, #2]
   1b4a8:	cmp	r3, #32
   1b4ac:	addhi	r0, r0, #2
   1b4b0:	bls	1b460 <_start@@Base+0x6e60>
   1b4b4:	b	1b46c <_start@@Base+0x6e6c>
   1b4b8:	mov	r3, #0
   1b4bc:	str	r3, [sp, #32]
   1b4c0:	mov	r3, #10
   1b4c4:	mov	r2, r5
   1b4c8:	mov	r1, r0
   1b4cc:	mov	r0, sl
   1b4d0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b4d4:	b	1b350 <_start@@Base+0x6d50>
   1b4d8:	mov	r4, r0
   1b4dc:	cmp	r5, r4
   1b4e0:	beq	1b4fc <_start@@Base+0x6efc>
   1b4e4:	ldr	r0, [sl]
   1b4e8:	bl	26ef4 <flatcc_builder_end_struct@@Base>
   1b4ec:	ldr	r3, [sp, #88]	; 0x58
   1b4f0:	str	r0, [r3]
   1b4f4:	cmp	r0, #0
   1b4f8:	bne	1b548 <_start@@Base+0x6f48>
   1b4fc:	mov	r3, #33	; 0x21
   1b500:	mov	r2, r5
   1b504:	mov	r1, r4
   1b508:	mov	r0, sl
   1b50c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b510:	mov	r4, r0
   1b514:	b	1b52c <_start@@Base+0x6f2c>
   1b518:	ldr	r3, [sp, #88]	; 0x58
   1b51c:	mov	r2, r5
   1b520:	mov	r1, r4
   1b524:	bl	19c8c <_start@@Base+0x568c>
   1b528:	mov	r4, r0
   1b52c:	ldr	r3, [sl, #24]
   1b530:	cmp	r3, #0
   1b534:	bne	1b548 <_start@@Base+0x6f48>
   1b538:	ldr	r3, [sp, #88]	; 0x58
   1b53c:	ldr	r3, [r3]
   1b540:	cmp	r3, #0
   1b544:	beq	1b5b0 <_start@@Base+0x6fb0>
   1b548:	mov	r0, r4
   1b54c:	add	sp, sp, #52	; 0x34
   1b550:	ldrd	r4, [sp]
   1b554:	ldrd	r6, [sp, #8]
   1b558:	ldrd	r8, [sp, #16]
   1b55c:	ldrd	sl, [sp, #24]
   1b560:	add	sp, sp, #32
   1b564:	pop	{pc}		; (ldr pc, [sp], #4)
   1b568:	ldr	r3, [sp, #88]	; 0x58
   1b56c:	mov	r2, r5
   1b570:	mov	r1, r4
   1b574:	bl	19c8c <_start@@Base+0x568c>
   1b578:	mov	r4, r0
   1b57c:	b	1b52c <_start@@Base+0x6f2c>
   1b580:	ldr	r3, [sp, #88]	; 0x58
   1b584:	mov	r2, r5
   1b588:	mov	r1, r4
   1b58c:	bl	2f708 <flatcc_json_parser_build_string@@Base>
   1b590:	mov	r4, r0
   1b594:	b	1b52c <_start@@Base+0x6f2c>
   1b598:	mov	r2, r5
   1b59c:	mov	r1, r4
   1b5a0:	mov	r0, sl
   1b5a4:	bl	2e43c <flatcc_json_parser_generic_json@@Base>
   1b5a8:	mov	r4, r0
   1b5ac:	b	1b548 <_start@@Base+0x6f48>
   1b5b0:	mov	r3, #33	; 0x21
   1b5b4:	mov	r2, r5
   1b5b8:	mov	r1, r4
   1b5bc:	mov	r0, sl
   1b5c0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b5c4:	mov	r4, r0
   1b5c8:	b	1b548 <_start@@Base+0x6f48>
   1b5cc:	mov	r4, r0
   1b5d0:	b	1ada0 <_start@@Base+0x67a0>
   1b5d4:	mov	r4, r0
   1b5d8:	b	1b204 <_start@@Base+0x6c04>
   1b5dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b5e0:	strd	r6, [sp, #8]
   1b5e4:	strd	r8, [sp, #16]
   1b5e8:	strd	sl, [sp, #24]
   1b5ec:	str	lr, [sp, #32]
   1b5f0:	sub	sp, sp, #44	; 0x2c
   1b5f4:	mov	r8, r0
   1b5f8:	mov	r7, r2
   1b5fc:	str	r3, [sp, #20]
   1b600:	ldr	fp, [sp, #80]	; 0x50
   1b604:	mov	r2, #0
   1b608:	mov	r3, #0
   1b60c:	strd	r2, [fp]
   1b610:	cmp	r1, r7
   1b614:	beq	1b7dc <_start@@Base+0x71dc>
   1b618:	ldrb	r3, [r1]
   1b61c:	cmp	r3, #34	; 0x22
   1b620:	addeq	r4, r1, #1
   1b624:	moveq	r3, #0
   1b628:	streq	r3, [r0, #12]
   1b62c:	beq	1b674 <_start@@Base+0x7074>
   1b630:	cmp	r3, #46	; 0x2e
   1b634:	movne	r3, #1
   1b638:	strne	r3, [r0, #12]
   1b63c:	movne	r4, r1
   1b640:	beq	1b658 <_start@@Base+0x7058>
   1b644:	mov	r3, #0
   1b648:	str	r3, [sp, #12]
   1b64c:	str	r3, [sp, #16]
   1b650:	add	sl, sp, #24
   1b654:	b	1b75c <_start@@Base+0x715c>
   1b658:	mov	r3, #5
   1b65c:	mov	r2, r7
   1b660:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b664:	mov	r4, r0
   1b668:	ldr	r3, [r8, #12]
   1b66c:	cmp	r3, #0
   1b670:	bne	1b6a4 <_start@@Base+0x70a4>
   1b674:	sub	r3, r7, r4
   1b678:	cmp	r3, #1
   1b67c:	ble	1b690 <_start@@Base+0x7090>
   1b680:	ldrb	r3, [r4]
   1b684:	cmp	r3, #32
   1b688:	bhi	1b6a4 <_start@@Base+0x70a4>
   1b68c:	beq	1b6b0 <_start@@Base+0x70b0>
   1b690:	mov	r2, r7
   1b694:	mov	r1, r4
   1b698:	mov	r0, r8
   1b69c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1b6a0:	mov	r4, r0
   1b6a4:	cmp	r7, r4
   1b6a8:	bne	1b644 <_start@@Base+0x7044>
   1b6ac:	b	1b7f8 <_start@@Base+0x71f8>
   1b6b0:	ldrb	r3, [r4, #1]
   1b6b4:	cmp	r3, #32
   1b6b8:	addhi	r4, r4, #1
   1b6bc:	bls	1b690 <_start@@Base+0x7090>
   1b6c0:	b	1b6a4 <_start@@Base+0x70a4>
   1b6c4:	mov	r4, r0
   1b6c8:	ldrd	r2, [sp, #32]
   1b6cc:	ldr	r1, [sp, #28]
   1b6d0:	cmp	r1, #0
   1b6d4:	beq	1b714 <_start@@Base+0x7114>
   1b6d8:	cmp	r3, #-2147483648	; 0x80000000
   1b6dc:	cmpeq	r2, #0
   1b6e0:	bhi	1b6f0 <_start@@Base+0x70f0>
   1b6e4:	rsbs	r0, r2, #0
   1b6e8:	rsc	r1, r3, #0
   1b6ec:	b	1b728 <_start@@Base+0x7128>
   1b6f0:	mov	r3, #8
   1b6f4:	mov	r2, r7
   1b6f8:	mov	r1, r0
   1b6fc:	mov	r0, r8
   1b700:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b704:	cmp	r7, r0
   1b708:	bne	1b730 <_start@@Base+0x7130>
   1b70c:	mov	r4, r0
   1b710:	b	1b7f8 <_start@@Base+0x71f8>
   1b714:	mov	r0, r2
   1b718:	mov	r1, r3
   1b71c:	cmp	r2, #0
   1b720:	sbcs	r3, r3, #0
   1b724:	blt	1b7c4 <_start@@Base+0x71c4>
   1b728:	str	r0, [sp, #12]
   1b72c:	str	r1, [sp, #16]
   1b730:	ldr	r3, [fp]
   1b734:	ldr	r2, [fp, #4]
   1b738:	ldr	r1, [sp, #12]
   1b73c:	adds	r3, r3, r1
   1b740:	ldr	r1, [sp, #16]
   1b744:	adc	r2, r2, r1
   1b748:	str	r3, [fp]
   1b74c:	str	r2, [fp, #4]
   1b750:	ldr	r3, [sp, #24]
   1b754:	cmp	r3, #0
   1b758:	beq	1b7f8 <_start@@Base+0x71f8>
   1b75c:	ldr	r6, [sp, #20]
   1b760:	mov	r5, r4
   1b764:	add	r9, sp, #32
   1b768:	str	sl, [sp, #4]
   1b76c:	str	r9, [sp]
   1b770:	ldr	r4, [r6]
   1b774:	add	r3, sp, #28
   1b778:	mov	r2, r7
   1b77c:	mov	r1, r5
   1b780:	mov	r0, r8
   1b784:	blx	r4
   1b788:	cmp	r7, r0
   1b78c:	beq	1b7f4 <_start@@Base+0x71f4>
   1b790:	cmp	r5, r0
   1b794:	bne	1b6c4 <_start@@Base+0x70c4>
   1b798:	mov	r5, r0
   1b79c:	ldr	r3, [r6, #4]!
   1b7a0:	cmp	r3, #0
   1b7a4:	bne	1b768 <_start@@Base+0x7168>
   1b7a8:	mov	r3, #23
   1b7ac:	mov	r2, r7
   1b7b0:	mov	r1, r0
   1b7b4:	mov	r0, r8
   1b7b8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b7bc:	mov	r4, r0
   1b7c0:	b	1b7f8 <_start@@Base+0x71f8>
   1b7c4:	mov	r3, #7
   1b7c8:	mov	r2, r7
   1b7cc:	mov	r1, r4
   1b7d0:	mov	r0, r8
   1b7d4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b7d8:	b	1b704 <_start@@Base+0x7104>
   1b7dc:	ldr	r3, [r0, #12]
   1b7e0:	cmp	r3, #0
   1b7e4:	movne	r4, r7
   1b7e8:	bne	1b7f8 <_start@@Base+0x71f8>
   1b7ec:	mov	r4, r7
   1b7f0:	b	1b690 <_start@@Base+0x7090>
   1b7f4:	mov	r4, r0
   1b7f8:	mov	r0, r4
   1b7fc:	add	sp, sp, #44	; 0x2c
   1b800:	ldrd	r4, [sp]
   1b804:	ldrd	r6, [sp, #8]
   1b808:	ldrd	r8, [sp, #16]
   1b80c:	ldrd	sl, [sp, #24]
   1b810:	add	sp, sp, #32
   1b814:	pop	{pc}		; (ldr pc, [sp], #4)
   1b818:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b81c:	strd	r6, [sp, #8]
   1b820:	strd	r8, [sp, #16]
   1b824:	strd	sl, [sp, #24]
   1b828:	str	lr, [sp, #32]
   1b82c:	sub	sp, sp, #52	; 0x34
   1b830:	mov	r6, r0
   1b834:	mov	r5, r2
   1b838:	str	r3, [sp, #12]
   1b83c:	add	r3, sp, #44	; 0x2c
   1b840:	bl	18650 <_start@@Base+0x4050>
   1b844:	mov	r4, r0
   1b848:	mov	sl, #0
   1b84c:	mov	fp, #1644167168	; 0x62000000
   1b850:	movw	r3, #20592	; 0x5070
   1b854:	movt	r3, #5
   1b858:	str	r3, [sp, #20]
   1b85c:	add	r3, r3, #128	; 0x80
   1b860:	str	r3, [sp, #16]
   1b864:	b	1bc0c <_start@@Base+0x760c>
   1b868:	mov	r3, #5
   1b86c:	mov	r2, r5
   1b870:	mov	r1, r4
   1b874:	mov	r0, r6
   1b878:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b87c:	mov	r4, r0
   1b880:	b	1bc48 <_start@@Base+0x7648>
   1b884:	sub	r3, r3, #1
   1b888:	cmp	r3, #7
   1b88c:	ldrls	pc, [pc, r3, lsl #2]
   1b890:	b	1b8ec <_start@@Base+0x72ec>
   1b894:	andeq	fp, r1, r4, ror #17
   1b898:	ldrdeq	fp, [r1], -ip
   1b89c:	ldrdeq	fp, [r1], -r4
   1b8a0:	andeq	fp, r1, ip, asr #17
   1b8a4:	andeq	fp, r1, r4, asr #17
   1b8a8:			; <UNDEFINED> instruction: 0x0001b8bc
   1b8ac:			; <UNDEFINED> instruction: 0x0001b8b4
   1b8b0:	andeq	fp, r1, r4, asr ip
   1b8b4:	mov	r3, #0
   1b8b8:	b	1bc58 <_start@@Base+0x7658>
   1b8bc:	mov	r3, #0
   1b8c0:	b	1bc58 <_start@@Base+0x7658>
   1b8c4:	mov	r3, #0
   1b8c8:	b	1bc58 <_start@@Base+0x7658>
   1b8cc:	mov	r3, #0
   1b8d0:	b	1bc58 <_start@@Base+0x7658>
   1b8d4:	mov	r3, #0
   1b8d8:	b	1bc60 <_start@@Base+0x7660>
   1b8dc:	mov	r3, #0
   1b8e0:	b	1bc68 <_start@@Base+0x7668>
   1b8e4:	mov	r3, #0
   1b8e8:	b	1bc70 <_start@@Base+0x7670>
   1b8ec:	mov	r3, #0
   1b8f0:	b	1bc78 <_start@@Base+0x7678>
   1b8f4:	mov	r3, #1
   1b8f8:	mov	r2, r5
   1b8fc:	mov	r1, r4
   1b900:	mov	r0, r6
   1b904:	bl	18490 <_start@@Base+0x3e90>
   1b908:	mov	r7, r0
   1b90c:	cmp	r0, r4
   1b910:	beq	1ba18 <_start@@Base+0x7418>
   1b914:	strb	r8, [sp, #26]
   1b918:	mov	r0, #0
   1b91c:	mov	r1, #0
   1b920:	strd	r0, [sp, #32]
   1b924:	str	r8, [sp, #28]
   1b928:	cmp	r5, r7
   1b92c:	beq	1be04 <_start@@Base+0x7804>
   1b930:	add	r3, sp, #32
   1b934:	str	r3, [sp]
   1b938:	add	r3, sp, #28
   1b93c:	mov	r2, r5
   1b940:	mov	r1, r7
   1b944:	mov	r0, r6
   1b948:	bl	2f170 <flatcc_json_parser_integer@@Base>
   1b94c:	mov	r4, r0
   1b950:	cmp	r7, r0
   1b954:	bne	1b990 <_start@@Base+0x7390>
   1b958:	mov	r7, r4
   1b95c:	add	r3, sp, #26
   1b960:	str	r3, [sp]
   1b964:	ldr	r3, [sp, #20]
   1b968:	add	r3, r3, #116	; 0x74
   1b96c:	mov	r2, r5
   1b970:	mov	r1, r7
   1b974:	mov	r0, r6
   1b978:	bl	19860 <_start@@Base+0x5260>
   1b97c:	mov	r4, r0
   1b980:	cmp	r5, r0
   1b984:	cmpne	r7, r0
   1b988:	bne	1b9d4 <_start@@Base+0x73d4>
   1b98c:	b	1bac8 <_start@@Base+0x74c8>
   1b990:	ldrd	r2, [sp, #32]
   1b994:	ldr	r1, [sp, #28]
   1b998:	cmp	r1, r8
   1b99c:	beq	1b9e4 <_start@@Base+0x73e4>
   1b9a0:	cmp	r3, #0
   1b9a4:	cmpeq	r2, #128	; 0x80
   1b9a8:	rsbls	r2, r2, #0
   1b9ac:	strbls	r2, [sp, #26]
   1b9b0:	bls	1b9d4 <_start@@Base+0x73d4>
   1b9b4:	mov	r3, #8
   1b9b8:	mov	r2, r5
   1b9bc:	mov	r1, r0
   1b9c0:	mov	r0, r6
   1b9c4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1b9c8:	mov	r4, r0
   1b9cc:	cmp	r7, r4
   1b9d0:	beq	1ba10 <_start@@Base+0x7410>
   1b9d4:	ldrb	r3, [sp, #26]
   1b9d8:	ldr	r2, [sp, #12]
   1b9dc:	strb	r3, [r2, #2]
   1b9e0:	b	1bcac <_start@@Base+0x76ac>
   1b9e4:	cmp	r3, #0
   1b9e8:	cmpeq	r2, #127	; 0x7f
   1b9ec:	strbls	r2, [sp, #26]
   1b9f0:	bls	1b9d4 <_start@@Base+0x73d4>
   1b9f4:	mov	r3, #7
   1b9f8:	mov	r2, r5
   1b9fc:	mov	r1, r0
   1ba00:	mov	r0, r6
   1ba04:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ba08:	mov	r4, r0
   1ba0c:	b	1b9cc <_start@@Base+0x73cc>
   1ba10:	mov	r7, r4
   1ba14:	b	1b95c <_start@@Base+0x735c>
   1ba18:	mov	r2, r5
   1ba1c:	mov	r1, r4
   1ba20:	mov	r0, r6
   1ba24:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1ba28:	mov	r4, r0
   1ba2c:	b	1bcac <_start@@Base+0x76ac>
   1ba30:	mov	r3, #1
   1ba34:	mov	r2, r5
   1ba38:	mov	r1, r4
   1ba3c:	mov	r0, r6
   1ba40:	bl	18490 <_start@@Base+0x3e90>
   1ba44:	mov	r7, r0
   1ba48:	cmp	r0, r4
   1ba4c:	beq	1bb90 <_start@@Base+0x7590>
   1ba50:	mov	r3, #0
   1ba54:	strh	r3, [sp, #26]
   1ba58:	mov	r0, #0
   1ba5c:	mov	r1, #0
   1ba60:	strd	r0, [sp, #32]
   1ba64:	str	r3, [sp, #28]
   1ba68:	cmp	r5, r7
   1ba6c:	beq	1be0c <_start@@Base+0x780c>
   1ba70:	add	r3, sp, #32
   1ba74:	str	r3, [sp]
   1ba78:	add	r3, sp, #28
   1ba7c:	mov	r2, r5
   1ba80:	mov	r1, r7
   1ba84:	mov	r0, r6
   1ba88:	bl	2f170 <flatcc_json_parser_integer@@Base>
   1ba8c:	mov	r4, r0
   1ba90:	cmp	r7, r0
   1ba94:	bne	1bb00 <_start@@Base+0x7500>
   1ba98:	mov	r7, r4
   1ba9c:	add	r3, sp, #26
   1baa0:	str	r3, [sp]
   1baa4:	ldr	r3, [sp, #16]
   1baa8:	mov	r2, r5
   1baac:	mov	r1, r7
   1bab0:	mov	r0, r6
   1bab4:	bl	1a284 <_start@@Base+0x5c84>
   1bab8:	mov	r4, r0
   1babc:	cmp	r5, r0
   1bac0:	cmpne	r0, r7
   1bac4:	bne	1bb44 <_start@@Base+0x7544>
   1bac8:	mov	r3, #33	; 0x21
   1bacc:	mov	r2, r5
   1bad0:	mov	r1, r4
   1bad4:	mov	r0, r6
   1bad8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1badc:	mov	r4, r0
   1bae0:	mov	r0, r4
   1bae4:	add	sp, sp, #52	; 0x34
   1bae8:	ldrd	r4, [sp]
   1baec:	ldrd	r6, [sp, #8]
   1baf0:	ldrd	r8, [sp, #16]
   1baf4:	ldrd	sl, [sp, #24]
   1baf8:	add	sp, sp, #32
   1bafc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb00:	ldrd	r2, [sp, #32]
   1bb04:	ldr	r1, [sp, #28]
   1bb08:	cmp	r1, #0
   1bb0c:	beq	1bb54 <_start@@Base+0x7554>
   1bb10:	cmp	r3, #0
   1bb14:	cmpeq	r2, #32768	; 0x8000
   1bb18:	rsbls	r2, r2, #0
   1bb1c:	strhls	r2, [sp, #26]
   1bb20:	bls	1bb44 <_start@@Base+0x7544>
   1bb24:	mov	r3, #8
   1bb28:	mov	r2, r5
   1bb2c:	mov	r1, r0
   1bb30:	mov	r0, r6
   1bb34:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1bb38:	mov	r4, r0
   1bb3c:	cmp	r7, r4
   1bb40:	beq	1bb88 <_start@@Base+0x7588>
   1bb44:	ldrh	r3, [sp, #26]
   1bb48:	ldr	r2, [sp, #12]
   1bb4c:	strh	r3, [r2]
   1bb50:	b	1bcac <_start@@Base+0x76ac>
   1bb54:	movw	r0, #32767	; 0x7fff
   1bb58:	mov	r1, #0
   1bb5c:	cmp	r3, r1
   1bb60:	cmpeq	r2, r0
   1bb64:	strhls	r2, [sp, #26]
   1bb68:	bls	1bb44 <_start@@Base+0x7544>
   1bb6c:	mov	r3, #7
   1bb70:	mov	r2, r5
   1bb74:	mov	r1, r4
   1bb78:	mov	r0, r6
   1bb7c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1bb80:	mov	r4, r0
   1bb84:	b	1bb3c <_start@@Base+0x753c>
   1bb88:	mov	r7, r4
   1bb8c:	b	1ba9c <_start@@Base+0x749c>
   1bb90:	mov	r2, r5
   1bb94:	mov	r1, r4
   1bb98:	mov	r0, r6
   1bb9c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1bba0:	mov	r4, r0
   1bba4:	b	1bcac <_start@@Base+0x76ac>
   1bba8:	mov	r4, r5
   1bbac:	b	1bc98 <_start@@Base+0x7698>
   1bbb0:	mov	r2, r5
   1bbb4:	mov	r1, r4
   1bbb8:	mov	r0, r6
   1bbbc:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1bbc0:	mov	r4, r0
   1bbc4:	cmp	r5, r4
   1bbc8:	moveq	r3, #0
   1bbcc:	streq	r3, [sp, #44]	; 0x2c
   1bbd0:	beq	1bc0c <_start@@Base+0x760c>
   1bbd4:	ldrb	r3, [r4]
   1bbd8:	cmp	r3, #44	; 0x2c
   1bbdc:	beq	1bd28 <_start@@Base+0x7728>
   1bbe0:	mov	r3, #0
   1bbe4:	str	r3, [sp, #44]	; 0x2c
   1bbe8:	ldrb	r3, [r4]
   1bbec:	cmp	r3, #125	; 0x7d
   1bbf0:	beq	1bcdc <_start@@Base+0x76dc>
   1bbf4:	mov	r3, #10
   1bbf8:	mov	r2, r5
   1bbfc:	mov	r1, r4
   1bc00:	mov	r0, r6
   1bc04:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1bc08:	mov	r4, r0
   1bc0c:	ldr	r3, [sp, #44]	; 0x2c
   1bc10:	cmp	r3, #0
   1bc14:	beq	1bae0 <_start@@Base+0x74e0>
   1bc18:	cmp	r4, r5
   1bc1c:	beq	1bba8 <_start@@Base+0x75a8>
   1bc20:	ldrb	r3, [r4]
   1bc24:	cmp	r3, #34	; 0x22
   1bc28:	addeq	r4, r4, #1
   1bc2c:	moveq	r3, #0
   1bc30:	streq	r3, [r6, #12]
   1bc34:	beq	1bc48 <_start@@Base+0x7648>
   1bc38:	cmp	r3, #46	; 0x2e
   1bc3c:	movne	r3, #1
   1bc40:	strne	r3, [r6, #12]
   1bc44:	beq	1b868 <_start@@Base+0x7268>
   1bc48:	sub	r3, r5, r4
   1bc4c:	cmp	r3, #8
   1bc50:	bls	1b884 <_start@@Base+0x7284>
   1bc54:	mov	r3, #0
   1bc58:	ldrb	r0, [r4, #3]
   1bc5c:	orr	r3, r3, r0
   1bc60:	ldrb	r0, [r4, #2]
   1bc64:	orr	r3, r3, r0, lsl #8
   1bc68:	ldrb	r0, [r4, #1]
   1bc6c:	orr	r3, r3, r0, lsl #16
   1bc70:	ldrb	r0, [r4]
   1bc74:	orr	r3, r3, r0, lsl #24
   1bc78:	mov	r8, #0
   1bc7c:	and	r9, r3, #-16777216	; 0xff000000
   1bc80:	cmp	r9, fp
   1bc84:	cmpeq	r8, sl
   1bc88:	beq	1b8f4 <_start@@Base+0x72f4>
   1bc8c:	cmp	r9, #1627389952	; 0x61000000
   1bc90:	cmpeq	r8, #0
   1bc94:	beq	1ba30 <_start@@Base+0x7430>
   1bc98:	mov	r2, r5
   1bc9c:	mov	r1, r4
   1bca0:	mov	r0, r6
   1bca4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1bca8:	mov	r4, r0
   1bcac:	sub	r3, r5, r4
   1bcb0:	cmp	r3, #1
   1bcb4:	ble	1bbb0 <_start@@Base+0x75b0>
   1bcb8:	ldrb	r3, [r4]
   1bcbc:	cmp	r3, #32
   1bcc0:	bhi	1bbc4 <_start@@Base+0x75c4>
   1bcc4:	bne	1bbb0 <_start@@Base+0x75b0>
   1bcc8:	ldrb	r3, [r4, #1]
   1bccc:	cmp	r3, #32
   1bcd0:	addhi	r4, r4, #1
   1bcd4:	bls	1bbb0 <_start@@Base+0x75b0>
   1bcd8:	b	1bbc4 <_start@@Base+0x75c4>
   1bcdc:	add	r1, r4, #1
   1bce0:	sub	r3, r5, r1
   1bce4:	cmp	r3, #1
   1bce8:	ble	1bd00 <_start@@Base+0x7700>
   1bcec:	ldrb	r3, [r4, #1]
   1bcf0:	cmp	r3, #32
   1bcf4:	movhi	r4, r1
   1bcf8:	bhi	1bc0c <_start@@Base+0x760c>
   1bcfc:	beq	1bd14 <_start@@Base+0x7714>
   1bd00:	mov	r2, r5
   1bd04:	mov	r0, r6
   1bd08:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1bd0c:	mov	r4, r0
   1bd10:	b	1bc0c <_start@@Base+0x760c>
   1bd14:	ldrb	r3, [r4, #2]
   1bd18:	cmp	r3, #32
   1bd1c:	addhi	r4, r4, #2
   1bd20:	bls	1bd00 <_start@@Base+0x7700>
   1bd24:	b	1bc0c <_start@@Base+0x760c>
   1bd28:	add	r1, r4, #1
   1bd2c:	sub	r3, r5, r1
   1bd30:	cmp	r3, #1
   1bd34:	ble	1bd4c <_start@@Base+0x774c>
   1bd38:	ldrb	r3, [r4, #1]
   1bd3c:	cmp	r3, #32
   1bd40:	movhi	r4, r1
   1bd44:	bhi	1bd5c <_start@@Base+0x775c>
   1bd48:	beq	1bdb8 <_start@@Base+0x77b8>
   1bd4c:	mov	r2, r5
   1bd50:	mov	r0, r6
   1bd54:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1bd58:	mov	r4, r0
   1bd5c:	cmp	r5, r4
   1bd60:	beq	1bdcc <_start@@Base+0x77cc>
   1bd64:	ldrb	r3, [r4]
   1bd68:	cmp	r3, #125	; 0x7d
   1bd6c:	movne	r3, #1
   1bd70:	strne	r3, [sp, #44]	; 0x2c
   1bd74:	bne	1bc0c <_start@@Base+0x760c>
   1bd78:	mov	r3, #0
   1bd7c:	str	r3, [sp, #44]	; 0x2c
   1bd80:	add	r1, r4, #1
   1bd84:	sub	r3, r5, r1
   1bd88:	cmp	r3, #1
   1bd8c:	ble	1bda4 <_start@@Base+0x77a4>
   1bd90:	ldrb	r3, [r4, #1]
   1bd94:	cmp	r3, #32
   1bd98:	movhi	r4, r1
   1bd9c:	bhi	1bc0c <_start@@Base+0x760c>
   1bda0:	beq	1bdf0 <_start@@Base+0x77f0>
   1bda4:	mov	r2, r5
   1bda8:	mov	r0, r6
   1bdac:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1bdb0:	mov	r4, r0
   1bdb4:	b	1bc0c <_start@@Base+0x760c>
   1bdb8:	ldrb	r3, [r4, #2]
   1bdbc:	cmp	r3, #32
   1bdc0:	addhi	r4, r4, #2
   1bdc4:	bls	1bd4c <_start@@Base+0x774c>
   1bdc8:	b	1bd5c <_start@@Base+0x775c>
   1bdcc:	mov	r3, #0
   1bdd0:	str	r3, [sp, #44]	; 0x2c
   1bdd4:	mov	r3, #10
   1bdd8:	mov	r2, r5
   1bddc:	mov	r1, r4
   1bde0:	mov	r0, r6
   1bde4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1bde8:	mov	r4, r0
   1bdec:	b	1bc0c <_start@@Base+0x760c>
   1bdf0:	ldrb	r3, [r4, #2]
   1bdf4:	cmp	r3, #32
   1bdf8:	addhi	r4, r4, #2
   1bdfc:	bls	1bda4 <_start@@Base+0x77a4>
   1be00:	b	1bc0c <_start@@Base+0x760c>
   1be04:	mov	r4, r7
   1be08:	b	1b958 <_start@@Base+0x7358>
   1be0c:	mov	r4, r7
   1be10:	b	1ba98 <_start@@Base+0x7498>
   1be14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be18:	strd	r6, [sp, #8]
   1be1c:	strd	r8, [sp, #16]
   1be20:	strd	sl, [sp, #24]
   1be24:	str	lr, [sp, #32]
   1be28:	vpush	{d8-d9}
   1be2c:	sub	sp, sp, #396	; 0x18c
   1be30:	mov	fp, r0
   1be34:	mov	r9, r1
   1be38:	mov	r8, r2
   1be3c:	mov	r2, r3
   1be40:	str	r3, [sp, #124]	; 0x7c
   1be44:	mov	r3, #0
   1be48:	str	r3, [r2]
   1be4c:	mov	r1, #36	; 0x24
   1be50:	ldr	r0, [r0]
   1be54:	bl	27be4 <flatcc_builder_start_table@@Base>
   1be58:	cmp	r0, #0
   1be5c:	beq	1be9c <_start@@Base+0x789c>
   1be60:	mov	r3, #33	; 0x21
   1be64:	mov	r2, r8
   1be68:	mov	r1, r9
   1be6c:	mov	r0, fp
   1be70:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1be74:	mov	r4, r0
   1be78:	mov	r0, r4
   1be7c:	add	sp, sp, #396	; 0x18c
   1be80:	vpop	{d8-d9}
   1be84:	ldrd	r4, [sp]
   1be88:	ldrd	r6, [sp, #8]
   1be8c:	ldrd	r8, [sp, #16]
   1be90:	ldrd	sl, [sp, #24]
   1be94:	add	sp, sp, #32
   1be98:	pop	{pc}		; (ldr pc, [sp], #4)
   1be9c:	add	r3, sp, #380	; 0x17c
   1bea0:	str	r3, [sp]
   1bea4:	mov	r3, #1
   1bea8:	mov	r2, r8
   1beac:	mov	r1, r9
   1beb0:	mov	r0, fp
   1beb4:	bl	2f8b8 <flatcc_json_parser_prepare_unions@@Base>
   1beb8:	cmp	r8, r0
   1bebc:	beq	1be60 <_start@@Base+0x7860>
   1bec0:	add	r3, sp, #388	; 0x184
   1bec4:	mov	r2, r8
   1bec8:	mov	r1, r9
   1becc:	mov	r0, fp
   1bed0:	bl	18650 <_start@@Base+0x4050>
   1bed4:	mov	r9, r0
   1bed8:	ldr	r3, [sp, #388]	; 0x184
   1bedc:	cmp	r3, #0
   1bee0:	beq	2089c <_start@@Base+0xc29c>
   1bee4:	mov	sl, fp
   1bee8:	b	1f6d4 <_start@@Base+0xb0d4>
   1beec:	mov	r3, #5
   1bef0:	mov	r2, r8
   1bef4:	mov	r1, r9
   1bef8:	mov	r0, sl
   1befc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1bf00:	mov	r9, r0
   1bf04:	b	1f704 <_start@@Base+0xb104>
   1bf08:	mov	r3, #5
   1bf0c:	mov	r2, r8
   1bf10:	mov	r1, r9
   1bf14:	mov	r0, sl
   1bf18:	bl	18490 <_start@@Base+0x3e90>
   1bf1c:	cmp	r0, r9
   1bf20:	beq	1bf68 <_start@@Base+0x7968>
   1bf24:	add	r3, sp, #384	; 0x180
   1bf28:	mov	r2, r8
   1bf2c:	mov	r1, r0
   1bf30:	mov	r0, sl
   1bf34:	bl	1be14 <_start@@Base+0x7814>
   1bf38:	mov	r9, r0
   1bf3c:	ldr	r3, [sp, #384]	; 0x180
   1bf40:	cmp	r3, #0
   1bf44:	beq	2096c <_start@@Base+0xc36c>
   1bf48:	mov	r1, #12
   1bf4c:	ldr	r0, [sl]
   1bf50:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1bf54:	cmp	r0, #0
   1bf58:	beq	20974 <_start@@Base+0xc374>
   1bf5c:	ldr	r3, [sp, #384]	; 0x180
   1bf60:	str	r3, [r0]
   1bf64:	b	1f6b0 <_start@@Base+0xb0b0>
   1bf68:	mov	r2, r8
   1bf6c:	mov	r1, r9
   1bf70:	mov	r0, sl
   1bf74:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1bf78:	mov	r9, r0
   1bf7c:	b	1f6b0 <_start@@Base+0xb0b0>
   1bf80:	mov	r3, #5
   1bf84:	mov	r2, r8
   1bf88:	mov	r1, r9
   1bf8c:	mov	r0, sl
   1bf90:	bl	18490 <_start@@Base+0x3e90>
   1bf94:	mov	r4, r0
   1bf98:	cmp	r0, r9
   1bf9c:	beq	1c0e4 <_start@@Base+0x7ae4>
   1bfa0:	mov	r3, #0
   1bfa4:	strb	r3, [sp, #360]	; 0x168
   1bfa8:	mov	r0, #0
   1bfac:	mov	r1, #0
   1bfb0:	add	r2, sp, #368	; 0x170
   1bfb4:	strd	r0, [r2]
   1bfb8:	str	r3, [sp, #364]	; 0x16c
   1bfbc:	cmp	r8, r4
   1bfc0:	beq	20b78 <_start@@Base+0xc578>
   1bfc4:	str	r2, [sp]
   1bfc8:	add	r3, sp, #364	; 0x16c
   1bfcc:	mov	r2, r8
   1bfd0:	mov	r1, r4
   1bfd4:	mov	r0, sl
   1bfd8:	bl	2f170 <flatcc_json_parser_integer@@Base>
   1bfdc:	mov	r9, r0
   1bfe0:	cmp	r4, r0
   1bfe4:	bne	1c020 <_start@@Base+0x7a20>
   1bfe8:	mov	r4, r9
   1bfec:	add	r3, sp, #360	; 0x168
   1bff0:	str	r3, [sp]
   1bff4:	ldr	r3, [pc, #1332]	; 1c530 <_start@@Base+0x7f30>
   1bff8:	mov	r2, r8
   1bffc:	mov	r1, r4
   1c000:	mov	r0, sl
   1c004:	bl	19860 <_start@@Base+0x5260>
   1c008:	mov	r9, r0
   1c00c:	cmp	r8, r0
   1c010:	cmpne	r4, r0
   1c014:	bne	1c068 <_start@@Base+0x7a68>
   1c018:	mov	fp, sl
   1c01c:	b	1be60 <_start@@Base+0x7860>
   1c020:	add	r3, sp, #368	; 0x170
   1c024:	ldrd	r2, [r3]
   1c028:	ldr	r1, [sp, #364]	; 0x16c
   1c02c:	cmp	r1, #0
   1c030:	beq	1c0b0 <_start@@Base+0x7ab0>
   1c034:	cmp	r3, #0
   1c038:	cmpeq	r2, #128	; 0x80
   1c03c:	rsbls	r2, r2, #0
   1c040:	strbls	r2, [sp, #360]	; 0x168
   1c044:	bls	1c068 <_start@@Base+0x7a68>
   1c048:	mov	r3, #8
   1c04c:	mov	r2, r8
   1c050:	mov	r1, r0
   1c054:	mov	r0, sl
   1c058:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1c05c:	mov	r9, r0
   1c060:	cmp	r4, r9
   1c064:	beq	1c0dc <_start@@Base+0x7adc>
   1c068:	add	r3, sp, #360	; 0x168
   1c06c:	ldrsb	r3, [r3]
   1c070:	cmp	r3, #8
   1c074:	bne	1c084 <_start@@Base+0x7a84>
   1c078:	ldr	r3, [sl, #8]
   1c07c:	tst	r3, #2
   1c080:	beq	1f6b0 <_start@@Base+0xb0b0>
   1c084:	mov	r3, #1
   1c088:	mov	r2, r3
   1c08c:	mov	r1, #6
   1c090:	ldr	r0, [sl]
   1c094:	bl	297a8 <flatcc_builder_table_add@@Base>
   1c098:	cmp	r0, #0
   1c09c:	beq	2097c <_start@@Base+0xc37c>
   1c0a0:	add	r3, sp, #360	; 0x168
   1c0a4:	ldrsb	r3, [r3]
   1c0a8:	strb	r3, [r0]
   1c0ac:	b	1f6b0 <_start@@Base+0xb0b0>
   1c0b0:	cmp	r3, #0
   1c0b4:	cmpeq	r2, #127	; 0x7f
   1c0b8:	strbls	r2, [sp, #360]	; 0x168
   1c0bc:	bls	1c068 <_start@@Base+0x7a68>
   1c0c0:	mov	r3, #7
   1c0c4:	mov	r2, r8
   1c0c8:	mov	r1, r0
   1c0cc:	mov	r0, sl
   1c0d0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1c0d4:	mov	r9, r0
   1c0d8:	b	1c060 <_start@@Base+0x7a60>
   1c0dc:	mov	r4, r9
   1c0e0:	b	1bfec <_start@@Base+0x79ec>
   1c0e4:	mov	r2, r8
   1c0e8:	mov	r1, r9
   1c0ec:	mov	r0, sl
   1c0f0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c0f4:	mov	r9, r0
   1c0f8:	b	1f6b0 <_start@@Base+0xb0b0>
   1c0fc:	mvn	r2, #0
   1c100:	movw	r3, #65535	; 0xffff
   1c104:	movt	r3, #26735	; 0x686f
   1c108:	cmp	r1, r3
   1c10c:	cmpeq	r0, r2
   1c110:	bhi	1c29c <_start@@Base+0x7c9c>
   1c114:	mov	r3, #0
   1c118:	str	r3, [sp, #96]	; 0x60
   1c11c:	str	r1, [sp, #100]	; 0x64
   1c120:	add	r3, pc, #1000	; 0x3e8
   1c124:	ldrd	r2, [r3]
   1c128:	ldrd	r0, [sp, #96]	; 0x60
   1c12c:	cmp	r1, r3
   1c130:	cmpeq	r0, r2
   1c134:	beq	1c150 <_start@@Base+0x7b50>
   1c138:	mov	r2, r8
   1c13c:	mov	r1, r9
   1c140:	mov	r0, sl
   1c144:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c148:	mov	r9, r0
   1c14c:	b	1f6b0 <_start@@Base+0xb0b0>
   1c150:	mov	r3, #4
   1c154:	mov	r2, r8
   1c158:	mov	r1, r9
   1c15c:	mov	r0, sl
   1c160:	bl	18490 <_start@@Base+0x3e90>
   1c164:	mov	r4, r0
   1c168:	cmp	r0, r9
   1c16c:	bne	1c188 <_start@@Base+0x7b88>
   1c170:	mov	r2, r8
   1c174:	mov	r1, r9
   1c178:	mov	r0, sl
   1c17c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c180:	mov	r9, r0
   1c184:	b	1f6b0 <_start@@Base+0xb0b0>
   1c188:	mvn	r3, #0
   1c18c:	mov	r2, #1
   1c190:	mov	r1, r2
   1c194:	ldr	r0, [sl]
   1c198:	bl	278ec <flatcc_builder_start_vector@@Base>
   1c19c:	cmp	r0, #0
   1c1a0:	bne	2093c <_start@@Base+0xc33c>
   1c1a4:	add	r3, sp, #388	; 0x184
   1c1a8:	mov	r2, r8
   1c1ac:	mov	r1, r4
   1c1b0:	mov	r0, sl
   1c1b4:	bl	1857c <_start@@Base+0x3f7c>
   1c1b8:	mov	r9, r0
   1c1bc:	ldr	r3, [sp, #388]	; 0x184
   1c1c0:	cmp	r3, #0
   1c1c4:	beq	1c268 <_start@@Base+0x7c68>
   1c1c8:	mov	fp, #0
   1c1cc:	b	1c1fc <_start@@Base+0x7bfc>
   1c1d0:	ldrb	r3, [sp, #368]	; 0x170
   1c1d4:	strb	r3, [r5]
   1c1d8:	add	r3, sp, #388	; 0x184
   1c1dc:	mov	r2, r8
   1c1e0:	mov	r1, r4
   1c1e4:	mov	r0, sl
   1c1e8:	bl	18214 <_start@@Base+0x3c14>
   1c1ec:	mov	r9, r0
   1c1f0:	ldr	r3, [sp, #388]	; 0x184
   1c1f4:	cmp	r3, #0
   1c1f8:	beq	1c268 <_start@@Base+0x7c68>
   1c1fc:	strb	fp, [sp, #368]	; 0x170
   1c200:	mov	r1, #1
   1c204:	ldr	r0, [sl]
   1c208:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   1c20c:	subs	r5, r0, #0
   1c210:	beq	20984 <_start@@Base+0xc384>
   1c214:	add	r3, sp, #368	; 0x170
   1c218:	mov	r2, r8
   1c21c:	mov	r1, r9
   1c220:	mov	r0, sl
   1c224:	bl	17f00 <_start@@Base+0x3900>
   1c228:	mov	r4, r0
   1c22c:	cmp	r9, r0
   1c230:	bne	1c1d0 <_start@@Base+0x7bd0>
   1c234:	add	r3, sp, #368	; 0x170
   1c238:	str	r3, [sp]
   1c23c:	ldr	r3, [pc, #752]	; 1c534 <_start@@Base+0x7f34>
   1c240:	mov	r2, r8
   1c244:	mov	r1, r0
   1c248:	mov	r0, sl
   1c24c:	bl	19660 <_start@@Base+0x5060>
   1c250:	mov	r9, r0
   1c254:	cmp	r8, r0
   1c258:	cmpne	r4, r0
   1c25c:	beq	2098c <_start@@Base+0xc38c>
   1c260:	mov	r4, r0
   1c264:	b	1c1d0 <_start@@Base+0x7bd0>
   1c268:	ldr	r0, [sl]
   1c26c:	bl	289f0 <flatcc_builder_end_vector@@Base>
   1c270:	str	r0, [sp, #384]	; 0x180
   1c274:	cmp	r0, #0
   1c278:	beq	20994 <_start@@Base+0xc394>
   1c27c:	mov	r1, #30
   1c280:	ldr	r0, [sl]
   1c284:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1c288:	cmp	r0, #0
   1c28c:	beq	2099c <_start@@Base+0xc39c>
   1c290:	ldr	r3, [sp, #384]	; 0x180
   1c294:	str	r3, [r0]
   1c298:	b	1f6b0 <_start@@Base+0xb0b0>
   1c29c:	add	r3, pc, #628	; 0x274
   1c2a0:	ldrd	r2, [r3]
   1c2a4:	cmp	r1, r3
   1c2a8:	cmpeq	r0, r2
   1c2ac:	bhi	1c3ec <_start@@Base+0x7dec>
   1c2b0:	mov	r3, #0
   1c2b4:	str	r3, [sp, #128]	; 0x80
   1c2b8:	lsr	r3, r1, #16
   1c2bc:	lsl	r3, r3, #16
   1c2c0:	str	r3, [sp, #132]	; 0x84
   1c2c4:	mov	r2, #0
   1c2c8:	mov	r3, #0
   1c2cc:	movt	r3, #26736	; 0x6870
   1c2d0:	ldrd	r0, [sp, #128]	; 0x80
   1c2d4:	cmp	r1, r3
   1c2d8:	cmpeq	r0, r2
   1c2dc:	beq	1c2f8 <_start@@Base+0x7cf8>
   1c2e0:	mov	r2, r8
   1c2e4:	mov	r1, r9
   1c2e8:	mov	r0, sl
   1c2ec:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c2f0:	mov	r9, r0
   1c2f4:	b	1f6b0 <_start@@Base+0xb0b0>
   1c2f8:	mov	r3, #2
   1c2fc:	mov	r2, r8
   1c300:	mov	r1, r9
   1c304:	mov	r0, sl
   1c308:	bl	18490 <_start@@Base+0x3e90>
   1c30c:	mov	r4, r0
   1c310:	cmp	r0, r9
   1c314:	beq	1c3d4 <_start@@Base+0x7dd4>
   1c318:	mov	r3, #0
   1c31c:	add	r2, sp, #368	; 0x170
   1c320:	strh	r3, [r2]
   1c324:	mov	r3, r2
   1c328:	mov	r2, r8
   1c32c:	mov	r1, r0
   1c330:	mov	r0, sl
   1c334:	bl	17bcc <_start@@Base+0x35cc>
   1c338:	mov	r9, r0
   1c33c:	cmp	r4, r0
   1c340:	beq	1c38c <_start@@Base+0x7d8c>
   1c344:	add	r3, sp, #368	; 0x170
   1c348:	ldrsh	r3, [r3]
   1c34c:	cmp	r3, #100	; 0x64
   1c350:	bne	1c360 <_start@@Base+0x7d60>
   1c354:	ldr	r3, [sl, #8]
   1c358:	tst	r3, #2
   1c35c:	beq	1f6b0 <_start@@Base+0xb0b0>
   1c360:	mov	r3, #2
   1c364:	mov	r2, r3
   1c368:	mov	r1, r3
   1c36c:	ldr	r0, [sl]
   1c370:	bl	297a8 <flatcc_builder_table_add@@Base>
   1c374:	cmp	r0, #0
   1c378:	beq	1c3bc <_start@@Base+0x7dbc>
   1c37c:	add	r3, sp, #368	; 0x170
   1c380:	ldrsh	r3, [r3]
   1c384:	strh	r3, [r0]
   1c388:	b	1f6b0 <_start@@Base+0xb0b0>
   1c38c:	add	r3, sp, #368	; 0x170
   1c390:	str	r3, [sp]
   1c394:	ldr	r3, [pc, #412]	; 1c538 <_start@@Base+0x7f38>
   1c398:	mov	r2, r8
   1c39c:	mov	r1, r0
   1c3a0:	mov	r0, sl
   1c3a4:	bl	1a284 <_start@@Base+0x5c84>
   1c3a8:	cmp	r8, r0
   1c3ac:	cmpne	r9, r0
   1c3b0:	beq	1c3cc <_start@@Base+0x7dcc>
   1c3b4:	mov	r9, r0
   1c3b8:	b	1c344 <_start@@Base+0x7d44>
   1c3bc:	mov	fp, sl
   1c3c0:	mov	r0, r9
   1c3c4:	mov	r9, r0
   1c3c8:	b	1be60 <_start@@Base+0x7860>
   1c3cc:	mov	fp, sl
   1c3d0:	b	1c3c4 <_start@@Base+0x7dc4>
   1c3d4:	mov	r2, r8
   1c3d8:	mov	r1, r9
   1c3dc:	mov	r0, sl
   1c3e0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c3e4:	mov	r9, r0
   1c3e8:	b	1f6b0 <_start@@Base+0xb0b0>
   1c3ec:	add	r3, pc, #300	; 0x12c
   1c3f0:	ldrd	r2, [r3]
   1c3f4:	cmp	r1, r3
   1c3f8:	cmpeq	r0, r2
   1c3fc:	beq	1c43c <_start@@Base+0x7e3c>
   1c400:	mov	r3, #0
   1c404:	str	r3, [sp, #208]	; 0xd0
   1c408:	str	r1, [sp, #212]	; 0xd4
   1c40c:	add	r3, pc, #276	; 0x114
   1c410:	ldrd	r2, [r3]
   1c414:	ldrd	r0, [sp, #208]	; 0xd0
   1c418:	cmp	r1, r3
   1c41c:	cmpeq	r0, r2
   1c420:	beq	1c60c <_start@@Base+0x800c>
   1c424:	mov	r2, r8
   1c428:	mov	r1, r9
   1c42c:	mov	r0, sl
   1c430:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c434:	mov	r9, r0
   1c438:	b	1f6b0 <_start@@Base+0xb0b0>
   1c43c:	add	r4, r9, #8
   1c440:	mov	r1, r8
   1c444:	mov	r0, r4
   1c448:	bl	146f0 <_start@@Base+0xf0>
   1c44c:	mov	r3, #0
   1c450:	str	r3, [sp, #272]	; 0x110
   1c454:	and	r3, r1, #-16777216	; 0xff000000
   1c458:	str	r3, [sp, #276]	; 0x114
   1c45c:	add	r3, sp, #272	; 0x110
   1c460:	ldrd	r2, [r3]
   1c464:	cmp	r3, #2030043136	; 0x79000000
   1c468:	cmpeq	r2, #0
   1c46c:	beq	1c488 <_start@@Base+0x7e88>
   1c470:	mov	r2, r8
   1c474:	mov	r1, r4
   1c478:	mov	r0, sl
   1c47c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c480:	mov	r9, r0
   1c484:	b	1f6b0 <_start@@Base+0xb0b0>
   1c488:	mov	r3, #1
   1c48c:	mov	r2, r8
   1c490:	mov	r1, r4
   1c494:	mov	r0, sl
   1c498:	bl	18490 <_start@@Base+0x3e90>
   1c49c:	mov	r9, r0
   1c4a0:	cmp	r4, r0
   1c4a4:	bne	1c4c0 <_start@@Base+0x7ec0>
   1c4a8:	mov	r2, r8
   1c4ac:	mov	r1, r0
   1c4b0:	mov	r0, sl
   1c4b4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c4b8:	mov	r9, r0
   1c4bc:	b	1f6b0 <_start@@Base+0xb0b0>
   1c4c0:	mvn	r3, #0
   1c4c4:	mov	r2, #1
   1c4c8:	mov	r1, r2
   1c4cc:	ldr	r0, [sl]
   1c4d0:	bl	278ec <flatcc_builder_start_vector@@Base>
   1c4d4:	cmp	r0, #0
   1c4d8:	bne	209a4 <_start@@Base+0xc3a4>
   1c4dc:	add	r3, sp, #388	; 0x184
   1c4e0:	mov	r2, r8
   1c4e4:	mov	r1, r9
   1c4e8:	mov	r0, sl
   1c4ec:	bl	1857c <_start@@Base+0x3f7c>
   1c4f0:	mov	r9, r0
   1c4f4:	ldr	r3, [sp, #388]	; 0x184
   1c4f8:	cmp	r3, #0
   1c4fc:	beq	1c5d8 <_start@@Base+0x7fd8>
   1c500:	mov	r5, #0
   1c504:	ldr	fp, [pc, #48]	; 1c53c <_start@@Base+0x7f3c>
   1c508:	b	1c570 <_start@@Base+0x7f70>
   1c50c:	nop	{0}
   1c510:	andeq	r0, r0, r0
   1c514:			; <UNDEFINED> instruction: 0x666c6578
   1c518:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1c51c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1c520:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1c524:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1c528:	andeq	r0, r0, r0
   1c52c:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1c530:	strdeq	r5, [r5], -ip
   1c534:	andeq	r5, r5, ip, lsl #2
   1c538:	andeq	r5, r5, r8, lsl r1
   1c53c:	andeq	r5, r5, r4, lsr #2
   1c540:	andeq	r5, r5, r0, lsr r1
   1c544:	ldrb	r3, [sp, #368]	; 0x170
   1c548:	strb	r3, [r4]
   1c54c:	add	r3, sp, #388	; 0x184
   1c550:	mov	r2, r8
   1c554:	mov	r1, r0
   1c558:	mov	r0, sl
   1c55c:	bl	18214 <_start@@Base+0x3c14>
   1c560:	mov	r9, r0
   1c564:	ldr	r3, [sp, #388]	; 0x184
   1c568:	cmp	r3, #0
   1c56c:	beq	1c5d8 <_start@@Base+0x7fd8>
   1c570:	strb	r5, [sp, #368]	; 0x170
   1c574:	mov	r1, #1
   1c578:	ldr	r0, [sl]
   1c57c:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   1c580:	subs	r4, r0, #0
   1c584:	beq	209ac <_start@@Base+0xc3ac>
   1c588:	add	r3, sp, #368	; 0x170
   1c58c:	mov	r2, r8
   1c590:	mov	r1, r9
   1c594:	mov	r0, sl
   1c598:	bl	17f00 <_start@@Base+0x3900>
   1c59c:	cmp	r0, r9
   1c5a0:	bne	1c544 <_start@@Base+0x7f44>
   1c5a4:	add	r3, sp, #368	; 0x170
   1c5a8:	str	r3, [sp]
   1c5ac:	mov	r3, fp
   1c5b0:	mov	r2, r8
   1c5b4:	mov	r1, r9
   1c5b8:	mov	r0, sl
   1c5bc:	bl	19660 <_start@@Base+0x5060>
   1c5c0:	cmp	r8, r0
   1c5c4:	cmpne	r0, r9
   1c5c8:	bne	1c544 <_start@@Base+0x7f44>
   1c5cc:	mov	fp, sl
   1c5d0:	mov	r9, r0
   1c5d4:	b	1be60 <_start@@Base+0x7860>
   1c5d8:	ldr	r0, [sl]
   1c5dc:	bl	289f0 <flatcc_builder_end_vector@@Base>
   1c5e0:	str	r0, [sp, #384]	; 0x180
   1c5e4:	cmp	r0, #0
   1c5e8:	beq	209b4 <_start@@Base+0xc3b4>
   1c5ec:	mov	r1, #5
   1c5f0:	ldr	r0, [sl]
   1c5f4:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1c5f8:	cmp	r0, #0
   1c5fc:	beq	209bc <_start@@Base+0xc3bc>
   1c600:	ldr	r3, [sp, #384]	; 0x180
   1c604:	str	r3, [r0]
   1c608:	b	1f6b0 <_start@@Base+0xb0b0>
   1c60c:	mov	r3, #4
   1c610:	mov	r2, r8
   1c614:	mov	r1, r9
   1c618:	mov	r0, sl
   1c61c:	bl	18490 <_start@@Base+0x3e90>
   1c620:	mov	r4, r0
   1c624:	cmp	r0, r9
   1c628:	beq	1c6e8 <_start@@Base+0x80e8>
   1c62c:	mov	r3, #0
   1c630:	add	r2, sp, #368	; 0x170
   1c634:	strh	r3, [r2]
   1c638:	mov	r3, r2
   1c63c:	mov	r2, r8
   1c640:	mov	r1, r0
   1c644:	mov	r0, sl
   1c648:	bl	17bcc <_start@@Base+0x35cc>
   1c64c:	mov	r9, r0
   1c650:	cmp	r4, r0
   1c654:	beq	1c6a0 <_start@@Base+0x80a0>
   1c658:	add	r3, sp, #368	; 0x170
   1c65c:	ldrsh	r3, [r3]
   1c660:	cmp	r3, #150	; 0x96
   1c664:	bne	1c674 <_start@@Base+0x8074>
   1c668:	ldr	r3, [sl, #8]
   1c66c:	tst	r3, #2
   1c670:	beq	1f6b0 <_start@@Base+0xb0b0>
   1c674:	mov	r3, #2
   1c678:	mov	r2, r3
   1c67c:	mov	r1, #1
   1c680:	ldr	r0, [sl]
   1c684:	bl	297a8 <flatcc_builder_table_add@@Base>
   1c688:	cmp	r0, #0
   1c68c:	beq	1c6d0 <_start@@Base+0x80d0>
   1c690:	add	r3, sp, #368	; 0x170
   1c694:	ldrsh	r3, [r3]
   1c698:	strh	r3, [r0]
   1c69c:	b	1f6b0 <_start@@Base+0xb0b0>
   1c6a0:	add	r3, sp, #368	; 0x170
   1c6a4:	str	r3, [sp]
   1c6a8:	ldr	r3, [pc, #-368]	; 1c540 <_start@@Base+0x7f40>
   1c6ac:	mov	r2, r8
   1c6b0:	mov	r1, r0
   1c6b4:	mov	r0, sl
   1c6b8:	bl	1a284 <_start@@Base+0x5c84>
   1c6bc:	cmp	r8, r0
   1c6c0:	cmpne	r9, r0
   1c6c4:	beq	1c6e0 <_start@@Base+0x80e0>
   1c6c8:	mov	r9, r0
   1c6cc:	b	1c658 <_start@@Base+0x8058>
   1c6d0:	mov	fp, sl
   1c6d4:	mov	r0, r9
   1c6d8:	mov	r9, r0
   1c6dc:	b	1be60 <_start@@Base+0x7860>
   1c6e0:	mov	fp, sl
   1c6e4:	b	1c6d8 <_start@@Base+0x80d8>
   1c6e8:	mov	r2, r8
   1c6ec:	mov	r1, r9
   1c6f0:	mov	r0, sl
   1c6f4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c6f8:	mov	r9, r0
   1c6fc:	b	1f6b0 <_start@@Base+0xb0b0>
   1c700:	add	r3, pc, #928	; 0x3a0
   1c704:	ldrd	r2, [r3]
   1c708:	cmp	r1, r3
   1c70c:	cmpeq	r0, r2
   1c710:	bhi	1d32c <_start@@Base+0x8d2c>
   1c714:	add	r3, pc, #916	; 0x394
   1c718:	ldrd	r2, [r3]
   1c71c:	cmp	r1, r3
   1c720:	cmpeq	r0, r2
   1c724:	bhi	1c7dc <_start@@Base+0x81dc>
   1c728:	mov	r3, #0
   1c72c:	str	r3, [sp, #104]	; 0x68
   1c730:	str	r1, [sp, #108]	; 0x6c
   1c734:	add	r3, pc, #892	; 0x37c
   1c738:	ldrd	r2, [r3]
   1c73c:	ldrd	r0, [sp, #104]	; 0x68
   1c740:	cmp	r1, r3
   1c744:	cmpeq	r0, r2
   1c748:	beq	1c764 <_start@@Base+0x8164>
   1c74c:	mov	r2, r8
   1c750:	mov	r1, r9
   1c754:	mov	r0, sl
   1c758:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c75c:	mov	r9, r0
   1c760:	b	1f6b0 <_start@@Base+0xb0b0>
   1c764:	mov	r3, #4
   1c768:	mov	r2, r8
   1c76c:	mov	r1, r9
   1c770:	mov	r0, sl
   1c774:	bl	18490 <_start@@Base+0x3e90>
   1c778:	cmp	r0, r9
   1c77c:	beq	1c7c4 <_start@@Base+0x81c4>
   1c780:	add	r3, sp, #384	; 0x180
   1c784:	mov	r2, r8
   1c788:	mov	r1, r0
   1c78c:	mov	r0, sl
   1c790:	bl	2f708 <flatcc_json_parser_build_string@@Base>
   1c794:	mov	r9, r0
   1c798:	ldr	r3, [sp, #384]	; 0x180
   1c79c:	cmp	r3, #0
   1c7a0:	beq	209c4 <_start@@Base+0xc3c4>
   1c7a4:	mov	r1, #3
   1c7a8:	ldr	r0, [sl]
   1c7ac:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1c7b0:	cmp	r0, #0
   1c7b4:	beq	209cc <_start@@Base+0xc3cc>
   1c7b8:	ldr	r3, [sp, #384]	; 0x180
   1c7bc:	str	r3, [r0]
   1c7c0:	b	1f6b0 <_start@@Base+0xb0b0>
   1c7c4:	mov	r2, r8
   1c7c8:	mov	r1, r9
   1c7cc:	mov	r0, sl
   1c7d0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c7d4:	mov	r9, r0
   1c7d8:	b	1f6b0 <_start@@Base+0xb0b0>
   1c7dc:	add	r3, pc, #732	; 0x2dc
   1c7e0:	ldrd	r2, [r3]
   1c7e4:	cmp	r1, r3
   1c7e8:	cmpeq	r0, r2
   1c7ec:	beq	1c830 <_start@@Base+0x8230>
   1c7f0:	mov	r3, #0
   1c7f4:	str	r3, [sp, #176]	; 0xb0
   1c7f8:	bic	r3, r1, #255	; 0xff
   1c7fc:	str	r3, [sp, #180]	; 0xb4
   1c800:	add	r3, pc, #704	; 0x2c0
   1c804:	ldrd	r2, [r3]
   1c808:	ldrd	r0, [sp, #176]	; 0xb0
   1c80c:	cmp	r1, r3
   1c810:	cmpeq	r0, r2
   1c814:	beq	1ca20 <_start@@Base+0x8420>
   1c818:	mov	r2, r8
   1c81c:	mov	r1, r9
   1c820:	mov	r0, sl
   1c824:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c828:	mov	r9, r0
   1c82c:	b	1f6b0 <_start@@Base+0xb0b0>
   1c830:	add	r4, r9, #8
   1c834:	mov	r1, r8
   1c838:	mov	r0, r4
   1c83c:	bl	146f0 <_start@@Base+0xf0>
   1c840:	add	r3, pc, #648	; 0x288
   1c844:	ldrd	r2, [r3]
   1c848:	cmp	r1, r3
   1c84c:	cmpeq	r0, r2
   1c850:	bne	1ca08 <_start@@Base+0x8408>
   1c854:	add	r4, r9, #16
   1c858:	mov	r1, r8
   1c85c:	mov	r0, r4
   1c860:	bl	146f0 <_start@@Base+0xf0>
   1c864:	and	r3, r0, #-16777216	; 0xff000000
   1c868:	str	r3, [sp, #280]	; 0x118
   1c86c:	str	r1, [sp, #284]	; 0x11c
   1c870:	add	r3, pc, #608	; 0x260
   1c874:	ldrd	r2, [r3]
   1c878:	add	r1, sp, #280	; 0x118
   1c87c:	ldrd	r0, [r1]
   1c880:	cmp	r1, r3
   1c884:	cmpeq	r0, r2
   1c888:	beq	1c8a4 <_start@@Base+0x82a4>
   1c88c:	mov	r2, r8
   1c890:	mov	r1, r4
   1c894:	mov	r0, sl
   1c898:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c89c:	mov	r9, r0
   1c8a0:	b	1f6b0 <_start@@Base+0xb0b0>
   1c8a4:	mov	r3, #5
   1c8a8:	mov	r2, r8
   1c8ac:	mov	r1, r4
   1c8b0:	mov	r0, sl
   1c8b4:	bl	18490 <_start@@Base+0x3e90>
   1c8b8:	mov	r9, r0
   1c8bc:	cmp	r4, r0
   1c8c0:	beq	1c9f0 <_start@@Base+0x83f0>
   1c8c4:	mov	r1, #0
   1c8c8:	str	r1, [sp, #384]	; 0x180
   1c8cc:	ldr	r0, [sl]
   1c8d0:	bl	27be4 <flatcc_builder_start_table@@Base>
   1c8d4:	cmp	r0, #0
   1c8d8:	beq	1c920 <_start@@Base+0x8320>
   1c8dc:	mov	r3, #33	; 0x21
   1c8e0:	mov	r2, r8
   1c8e4:	mov	r1, r9
   1c8e8:	mov	r0, sl
   1c8ec:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1c8f0:	mov	r9, r0
   1c8f4:	ldr	r3, [sp, #384]	; 0x180
   1c8f8:	cmp	r3, #0
   1c8fc:	beq	209d4 <_start@@Base+0xc3d4>
   1c900:	mov	r1, #34	; 0x22
   1c904:	ldr	r0, [sl]
   1c908:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1c90c:	cmp	r0, #0
   1c910:	beq	209dc <_start@@Base+0xc3dc>
   1c914:	ldr	r3, [sp, #384]	; 0x180
   1c918:	str	r3, [r0]
   1c91c:	b	1f6b0 <_start@@Base+0xb0b0>
   1c920:	add	r3, sp, #368	; 0x170
   1c924:	mov	r2, r8
   1c928:	mov	r1, r9
   1c92c:	mov	r0, sl
   1c930:	bl	18650 <_start@@Base+0x4050>
   1c934:	mov	r9, r0
   1c938:	ldr	r3, [sp, #368]	; 0x170
   1c93c:	cmp	r3, #0
   1c940:	beq	1c9cc <_start@@Base+0x83cc>
   1c944:	mov	r4, #1
   1c948:	mov	fp, #5
   1c94c:	mov	r5, #0
   1c950:	mov	r1, r0
   1c954:	b	1c99c <_start@@Base+0x839c>
   1c958:	mov	r3, fp
   1c95c:	mov	r2, r8
   1c960:	mov	r0, sl
   1c964:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1c968:	mov	r1, r0
   1c96c:	mov	r2, r8
   1c970:	mov	r0, sl
   1c974:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1c978:	add	r3, sp, #368	; 0x170
   1c97c:	mov	r2, r8
   1c980:	mov	r1, r0
   1c984:	mov	r0, sl
   1c988:	bl	180ec <_start@@Base+0x3aec>
   1c98c:	mov	r1, r0
   1c990:	ldr	r3, [sp, #368]	; 0x170
   1c994:	cmp	r3, #0
   1c998:	beq	1c9c8 <_start@@Base+0x83c8>
   1c99c:	cmp	r8, r1
   1c9a0:	beq	1c96c <_start@@Base+0x836c>
   1c9a4:	ldrb	r3, [r1]
   1c9a8:	cmp	r3, #34	; 0x22
   1c9ac:	addeq	r1, r1, #1
   1c9b0:	streq	r5, [sl, #12]
   1c9b4:	beq	1c96c <_start@@Base+0x836c>
   1c9b8:	cmp	r3, #46	; 0x2e
   1c9bc:	strne	r4, [sl, #12]
   1c9c0:	bne	1c96c <_start@@Base+0x836c>
   1c9c4:	b	1c958 <_start@@Base+0x8358>
   1c9c8:	mov	r9, r0
   1c9cc:	ldr	r3, [sl, #24]
   1c9d0:	cmp	r3, #0
   1c9d4:	bne	1c8dc <_start@@Base+0x82dc>
   1c9d8:	ldr	r0, [sl]
   1c9dc:	bl	286bc <flatcc_builder_end_table@@Base>
   1c9e0:	str	r0, [sp, #384]	; 0x180
   1c9e4:	cmp	r0, #0
   1c9e8:	bne	1c8f4 <_start@@Base+0x82f4>
   1c9ec:	b	1c8dc <_start@@Base+0x82dc>
   1c9f0:	mov	r2, r8
   1c9f4:	mov	r1, r0
   1c9f8:	mov	r0, sl
   1c9fc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca00:	mov	r9, r0
   1ca04:	b	1f6b0 <_start@@Base+0xb0b0>
   1ca08:	mov	r2, r8
   1ca0c:	mov	r1, r4
   1ca10:	mov	r0, sl
   1ca14:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca18:	mov	r9, r0
   1ca1c:	b	1f6b0 <_start@@Base+0xb0b0>
   1ca20:	mov	r3, #3
   1ca24:	mov	r2, r8
   1ca28:	mov	r1, r9
   1ca2c:	mov	r0, sl
   1ca30:	bl	18490 <_start@@Base+0x3e90>
   1ca34:	mov	r4, r0
   1ca38:	cmp	r0, r9
   1ca3c:	beq	1d314 <_start@@Base+0x8d14>
   1ca40:	mov	r3, #16
   1ca44:	mov	r2, #32
   1ca48:	mov	r1, #0
   1ca4c:	ldr	r0, [sl]
   1ca50:	bl	297a8 <flatcc_builder_table_add@@Base>
   1ca54:	subs	fp, r0, #0
   1ca58:	beq	20948 <_start@@Base+0xc348>
   1ca5c:	add	r3, sp, #360	; 0x168
   1ca60:	mov	r2, r8
   1ca64:	mov	r1, r4
   1ca68:	mov	r0, sl
   1ca6c:	bl	18650 <_start@@Base+0x4050>
   1ca70:	mov	r9, r0
   1ca74:	add	r5, pc, #100	; 0x64
   1ca78:	ldrd	r4, [r5]
   1ca7c:	vldr	s18, [pc, #108]	; 1caf0 <_start@@Base+0x84f0>
   1ca80:	vldr	d8, [pc, #96]	; 1cae8 <_start@@Base+0x84e8>
   1ca84:	b	1cc10 <_start@@Base+0x8610>
   1ca88:	mov	r3, #5
   1ca8c:	mov	r2, r8
   1ca90:	mov	r1, r9
   1ca94:	mov	r0, sl
   1ca98:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ca9c:	mov	r9, r0
   1caa0:	b	1cc4c <_start@@Base+0x864c>
   1caa4:	nop	{0}
   1caa8:			; <UNDEFINED> instruction: 0xffffffff
   1caac:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1cab0:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1cab4:	rsbvc	r7, r1, r5, ror #4
   1cab8:	andeq	r0, r0, r0
   1cabc:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1cac0:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1cac4:	rsbvc	r7, r1, r5, ror #4
   1cac8:	andeq	r0, r0, r0
   1cacc:	rsbvc	r7, pc, r0, lsl #6
   1cad0:	rsbvc	r6, r1, r5, ror #6
   1cad4:	smcvs	54867	; 0xd653
   1cad8:	strvc	r0, [r0], #-0
   1cadc:	svcpl	0x00746573
   1cae0:	rscscc	pc, pc, #1020	; 0x3fc
   1cae4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
	...
   1caf4:	ldrb	r0, [r9, #7]
   1caf8:	mov	r1, #0
   1cafc:	ldrb	r2, [r9, #6]
   1cb00:	orr	r3, r0, r2, lsl #8
   1cb04:	mov	r2, r1
   1cb08:	ldrb	r0, [r9, #5]
   1cb0c:	orr	r3, r3, r0, lsl #16
   1cb10:	ldrb	r0, [r9, #4]
   1cb14:	orr	r3, r3, r0, lsl #24
   1cb18:	ldrb	r0, [r9, #3]
   1cb1c:	orr	r2, r2, r0
   1cb20:	ldrb	r0, [r9, #2]
   1cb24:	orr	r2, r2, r0, lsl #8
   1cb28:	ldrb	r0, [r9, #1]
   1cb2c:	orr	r2, r2, r0, lsl #16
   1cb30:	ldrb	r0, [r9]
   1cb34:	mov	r6, r3
   1cb38:	orr	r7, r2, r0, lsl #24
   1cb3c:	cmp	r7, r5
   1cb40:	cmpeq	r6, r4
   1cb44:	bhi	1cef8 <_start@@Base+0x88f8>
   1cb48:	and	r3, r6, #-16777216	; 0xff000000
   1cb4c:	str	r3, [sp, #24]
   1cb50:	str	r7, [sp, #28]
   1cb54:	ldrd	r2, [sp, #24]
   1cb58:	add	r1, pc, #1000	; 0x3e8
   1cb5c:	ldrd	r0, [r1]
   1cb60:	cmp	r3, r1
   1cb64:	cmpeq	r2, r0
   1cb68:	beq	1cce8 <_start@@Base+0x86e8>
   1cb6c:	ldrd	r2, [sp, #24]
   1cb70:	add	r1, pc, #984	; 0x3d8
   1cb74:	ldrd	r0, [r1]
   1cb78:	cmp	r3, r1
   1cb7c:	cmpeq	r2, r0
   1cb80:	beq	1ce38 <_start@@Base+0x8838>
   1cb84:	mov	r2, r8
   1cb88:	mov	r1, r9
   1cb8c:	mov	r0, sl
   1cb90:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1cb94:	mov	r9, r0
   1cb98:	sub	r3, r8, r9
   1cb9c:	cmp	r3, #1
   1cba0:	ble	1cbb4 <_start@@Base+0x85b4>
   1cba4:	ldrb	r3, [r9]
   1cba8:	cmp	r3, #32
   1cbac:	bhi	1cbc8 <_start@@Base+0x85c8>
   1cbb0:	beq	1d20c <_start@@Base+0x8c0c>
   1cbb4:	mov	r2, r8
   1cbb8:	mov	r1, r9
   1cbbc:	mov	r0, sl
   1cbc0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1cbc4:	mov	r9, r0
   1cbc8:	cmp	r8, r9
   1cbcc:	moveq	r3, #0
   1cbd0:	streq	r3, [sp, #360]	; 0x168
   1cbd4:	beq	1cc10 <_start@@Base+0x8610>
   1cbd8:	ldrb	r3, [r9]
   1cbdc:	cmp	r3, #44	; 0x2c
   1cbe0:	beq	1d26c <_start@@Base+0x8c6c>
   1cbe4:	mov	r3, #0
   1cbe8:	str	r3, [sp, #360]	; 0x168
   1cbec:	ldrb	r3, [r9]
   1cbf0:	cmp	r3, #125	; 0x7d
   1cbf4:	beq	1d220 <_start@@Base+0x8c20>
   1cbf8:	mov	r3, #10
   1cbfc:	mov	r2, r8
   1cc00:	mov	r1, r9
   1cc04:	mov	r0, sl
   1cc08:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1cc0c:	mov	r9, r0
   1cc10:	ldr	r3, [sp, #360]	; 0x168
   1cc14:	cmp	r3, #0
   1cc18:	beq	1f6b0 <_start@@Base+0xb0b0>
   1cc1c:	cmp	r8, r9
   1cc20:	beq	1cc4c <_start@@Base+0x864c>
   1cc24:	ldrb	r3, [r9]
   1cc28:	cmp	r3, #34	; 0x22
   1cc2c:	addeq	r9, r9, #1
   1cc30:	moveq	r3, #0
   1cc34:	streq	r3, [sl, #12]
   1cc38:	beq	1cc4c <_start@@Base+0x864c>
   1cc3c:	cmp	r3, #46	; 0x2e
   1cc40:	movne	r3, #1
   1cc44:	strne	r3, [sl, #12]
   1cc48:	beq	1ca88 <_start@@Base+0x8488>
   1cc4c:	sub	r3, r8, r9
   1cc50:	cmp	r3, #8
   1cc54:	bhi	1caf4 <_start@@Base+0x84f4>
   1cc58:	sub	r3, r3, #1
   1cc5c:	cmp	r3, #7
   1cc60:	ldrls	pc, [pc, r3, lsl #2]
   1cc64:	b	1ccdc <_start@@Base+0x86dc>
   1cc68:	ldrdeq	ip, [r1], -r0
   1cc6c:	andeq	ip, r1, r4, asr #25
   1cc70:			; <UNDEFINED> instruction: 0x0001ccb8
   1cc74:	andeq	ip, r1, ip, lsr #25
   1cc78:	andeq	ip, r1, r0, lsr #25
   1cc7c:	muleq	r1, r4, ip
   1cc80:	andeq	ip, r1, r8, lsl #25
   1cc84:	strdeq	ip, [r1], -r4
   1cc88:	mov	r0, #0
   1cc8c:	mov	r1, #0
   1cc90:	b	1cafc <_start@@Base+0x84fc>
   1cc94:	mov	r3, #0
   1cc98:	mov	r2, r3
   1cc9c:	b	1cb08 <_start@@Base+0x8508>
   1cca0:	mov	r3, #0
   1cca4:	mov	r2, r3
   1cca8:	b	1cb10 <_start@@Base+0x8510>
   1ccac:	mov	r3, #0
   1ccb0:	mov	r2, r3
   1ccb4:	b	1cb18 <_start@@Base+0x8518>
   1ccb8:	mov	r3, #0
   1ccbc:	mov	r2, r3
   1ccc0:	b	1cb20 <_start@@Base+0x8520>
   1ccc4:	mov	r3, #0
   1ccc8:	mov	r2, r3
   1cccc:	b	1cb28 <_start@@Base+0x8528>
   1ccd0:	mov	r3, #0
   1ccd4:	mov	r2, r3
   1ccd8:	b	1cb30 <_start@@Base+0x8530>
   1ccdc:	mov	r6, #0
   1cce0:	mov	r7, #0
   1cce4:	b	1cb3c <_start@@Base+0x853c>
   1cce8:	mov	r3, #5
   1ccec:	mov	r2, r8
   1ccf0:	mov	r1, r9
   1ccf4:	mov	r0, sl
   1ccf8:	bl	18490 <_start@@Base+0x3e90>
   1ccfc:	mov	r2, r0
   1cd00:	str	r0, [sp, #72]	; 0x48
   1cd04:	cmp	r0, r9
   1cd08:	beq	1ce20 <_start@@Base+0x8820>
   1cd0c:	mov	r3, #0
   1cd10:	strb	r3, [sp, #356]	; 0x164
   1cd14:	mov	r0, #0
   1cd18:	mov	r1, #0
   1cd1c:	add	ip, sp, #368	; 0x170
   1cd20:	strd	r0, [ip]
   1cd24:	str	r3, [sp, #364]	; 0x16c
   1cd28:	mov	r1, r2
   1cd2c:	cmp	r8, r2
   1cd30:	beq	20b80 <_start@@Base+0xc580>
   1cd34:	str	ip, [sp]
   1cd38:	add	r3, sp, #364	; 0x16c
   1cd3c:	mov	r2, r8
   1cd40:	mov	r0, sl
   1cd44:	bl	2f170 <flatcc_json_parser_integer@@Base>
   1cd48:	mov	r9, r0
   1cd4c:	ldr	r1, [sp, #72]	; 0x48
   1cd50:	cmp	r1, r0
   1cd54:	bne	1cd90 <_start@@Base+0x8790>
   1cd58:	str	r9, [sp, #72]	; 0x48
   1cd5c:	add	r3, sp, #356	; 0x164
   1cd60:	str	r3, [sp]
   1cd64:	ldr	r3, [pc, #500]	; 1cf60 <_start@@Base+0x8960>
   1cd68:	mov	r2, r8
   1cd6c:	ldr	r1, [sp, #72]	; 0x48
   1cd70:	mov	r0, sl
   1cd74:	bl	19860 <_start@@Base+0x5260>
   1cd78:	mov	r9, r0
   1cd7c:	ldr	r3, [sp, #72]	; 0x48
   1cd80:	cmp	r8, r0
   1cd84:	cmpne	r3, r0
   1cd88:	bne	1cddc <_start@@Base+0x87dc>
   1cd8c:	b	1cec4 <_start@@Base+0x88c4>
   1cd90:	add	r3, sp, #368	; 0x170
   1cd94:	ldrd	r2, [r3]
   1cd98:	ldr	r1, [sp, #364]	; 0x16c
   1cd9c:	cmp	r1, #0
   1cda0:	beq	1cdec <_start@@Base+0x87ec>
   1cda4:	cmp	r3, #0
   1cda8:	cmpeq	r2, #128	; 0x80
   1cdac:	rsbls	r2, r2, #0
   1cdb0:	strbls	r2, [sp, #356]	; 0x164
   1cdb4:	bls	1cddc <_start@@Base+0x87dc>
   1cdb8:	mov	r3, #8
   1cdbc:	mov	r2, r8
   1cdc0:	mov	r1, r0
   1cdc4:	mov	r0, sl
   1cdc8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1cdcc:	mov	r9, r0
   1cdd0:	ldr	r3, [sp, #72]	; 0x48
   1cdd4:	cmp	r3, r9
   1cdd8:	beq	1ce18 <_start@@Base+0x8818>
   1cddc:	add	r3, sp, #356	; 0x164
   1cde0:	ldrsb	r3, [r3]
   1cde4:	strb	r3, [fp, #24]
   1cde8:	b	1cb98 <_start@@Base+0x8598>
   1cdec:	cmp	r3, #0
   1cdf0:	cmpeq	r2, #127	; 0x7f
   1cdf4:	strbls	r2, [sp, #356]	; 0x164
   1cdf8:	bls	1cddc <_start@@Base+0x87dc>
   1cdfc:	mov	r3, #7
   1ce00:	mov	r2, r8
   1ce04:	mov	r1, r0
   1ce08:	mov	r0, sl
   1ce0c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ce10:	mov	r9, r0
   1ce14:	b	1cdd0 <_start@@Base+0x87d0>
   1ce18:	str	r9, [sp, #72]	; 0x48
   1ce1c:	b	1cd5c <_start@@Base+0x875c>
   1ce20:	mov	r2, r8
   1ce24:	mov	r1, r9
   1ce28:	mov	r0, sl
   1ce2c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce30:	mov	r9, r0
   1ce34:	b	1cb98 <_start@@Base+0x8598>
   1ce38:	mov	r3, #5
   1ce3c:	mov	r2, r8
   1ce40:	mov	r1, r9
   1ce44:	mov	r0, sl
   1ce48:	bl	18490 <_start@@Base+0x3e90>
   1ce4c:	mov	r1, r0
   1ce50:	cmp	r0, r9
   1ce54:	beq	1cee0 <_start@@Base+0x88e0>
   1ce58:	vstr	d8, [sp, #368]	; 0x170
   1ce5c:	add	r3, sp, #368	; 0x170
   1ce60:	mov	r2, r8
   1ce64:	str	r0, [sp, #72]	; 0x48
   1ce68:	mov	r0, sl
   1ce6c:	bl	2e1fc <flatcc_json_parser_double@@Base>
   1ce70:	mov	r9, r0
   1ce74:	ldr	r3, [sp, #72]	; 0x48
   1ce78:	cmp	r3, r0
   1ce7c:	beq	1ce90 <_start@@Base+0x8890>
   1ce80:	add	r3, sp, #368	; 0x170
   1ce84:	ldrd	r2, [r3]
   1ce88:	strd	r2, [fp, #16]
   1ce8c:	b	1cb98 <_start@@Base+0x8598>
   1ce90:	add	r3, sp, #368	; 0x170
   1ce94:	str	r3, [sp]
   1ce98:	ldr	r3, [pc, #196]	; 1cf64 <_start@@Base+0x8964>
   1ce9c:	mov	r2, r8
   1cea0:	mov	r1, r0
   1cea4:	mov	r0, sl
   1cea8:	bl	188e0 <_start@@Base+0x42e0>
   1ceac:	cmp	r8, r0
   1ceb0:	cmpne	r9, r0
   1ceb4:	beq	1cec0 <_start@@Base+0x88c0>
   1ceb8:	mov	r9, r0
   1cebc:	b	1ce80 <_start@@Base+0x8880>
   1cec0:	mov	r9, r0
   1cec4:	mov	r3, #33	; 0x21
   1cec8:	mov	r2, r8
   1cecc:	mov	r1, r9
   1ced0:	mov	r0, sl
   1ced4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ced8:	mov	r9, r0
   1cedc:	b	1f6b0 <_start@@Base+0xb0b0>
   1cee0:	mov	r2, r8
   1cee4:	mov	r1, r9
   1cee8:	mov	r0, sl
   1ceec:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1cef0:	mov	r9, r0
   1cef4:	b	1cb98 <_start@@Base+0x8598>
   1cef8:	mvn	r2, #0
   1cefc:	mvn	r3, #-2013265920	; 0x88000000
   1cf00:	cmp	r7, r3
   1cf04:	cmpeq	r6, r2
   1cf08:	bhi	1cfc4 <_start@@Base+0x89c4>
   1cf0c:	and	r3, r6, #-16777216	; 0xff000000
   1cf10:	str	r3, [sp, #64]	; 0x40
   1cf14:	str	r7, [sp, #68]	; 0x44
   1cf18:	ldrd	r2, [sp, #64]	; 0x40
   1cf1c:	add	r1, pc, #52	; 0x34
   1cf20:	ldrd	r0, [r1]
   1cf24:	cmp	r3, r1
   1cf28:	cmpeq	r2, r0
   1cf2c:	beq	1cf74 <_start@@Base+0x8974>
   1cf30:	mov	r2, r8
   1cf34:	mov	r1, r9
   1cf38:	mov	r0, sl
   1cf3c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf40:	mov	r9, r0
   1cf44:	b	1cb98 <_start@@Base+0x8598>
   1cf48:	andcc	r0, r0, #0
   1cf4c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cf50:	mrscc	r0, (UNDEF: 0)
   1cf54:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cf58:	movwcc	r0, #0
   1cf5c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cf60:	andeq	r5, r5, ip, lsr r1
   1cf64:	andeq	r5, r5, ip, asr #2
   1cf68:	andeq	r5, r5, r8, asr r1
   1cf6c:	andeq	r5, r5, r4, ror #2
   1cf70:	andeq	r5, r5, r0, ror r1
   1cf74:	mov	r3, #5
   1cf78:	mov	r2, r8
   1cf7c:	mov	r1, r9
   1cf80:	mov	r0, sl
   1cf84:	bl	18490 <_start@@Base+0x3e90>
   1cf88:	cmp	r0, r9
   1cf8c:	beq	1cfac <_start@@Base+0x89ac>
   1cf90:	add	r3, fp, #26
   1cf94:	mov	r2, r8
   1cf98:	mov	r1, r0
   1cf9c:	mov	r0, sl
   1cfa0:	bl	1b818 <_start@@Base+0x7218>
   1cfa4:	mov	r9, r0
   1cfa8:	b	1cb98 <_start@@Base+0x8598>
   1cfac:	mov	r2, r8
   1cfb0:	mov	r1, r9
   1cfb4:	mov	r0, sl
   1cfb8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1cfbc:	mov	r9, r0
   1cfc0:	b	1cb98 <_start@@Base+0x8598>
   1cfc4:	mvn	r2, #0
   1cfc8:	mvn	r3, #-2030043136	; 0x87000000
   1cfcc:	cmp	r7, r3
   1cfd0:	cmpeq	r6, r2
   1cfd4:	bhi	1d07c <_start@@Base+0x8a7c>
   1cfd8:	mov	r3, #1
   1cfdc:	mov	r2, r8
   1cfe0:	mov	r1, r9
   1cfe4:	mov	r0, sl
   1cfe8:	bl	18490 <_start@@Base+0x3e90>
   1cfec:	mov	r1, r0
   1cff0:	cmp	r0, r9
   1cff4:	beq	1d064 <_start@@Base+0x8a64>
   1cff8:	vstr	s18, [sp, #368]	; 0x170
   1cffc:	add	r3, sp, #368	; 0x170
   1d000:	mov	r2, r8
   1d004:	str	r0, [sp, #72]	; 0x48
   1d008:	mov	r0, sl
   1d00c:	bl	2e2f8 <flatcc_json_parser_float@@Base>
   1d010:	mov	r9, r0
   1d014:	ldr	r3, [sp, #72]	; 0x48
   1d018:	cmp	r3, r0
   1d01c:	beq	1d02c <_start@@Base+0x8a2c>
   1d020:	ldr	r3, [sp, #368]	; 0x170
   1d024:	str	r3, [fp]
   1d028:	b	1cb98 <_start@@Base+0x8598>
   1d02c:	add	r3, sp, #368	; 0x170
   1d030:	str	r3, [sp]
   1d034:	ldr	r3, [pc, #-212]	; 1cf68 <_start@@Base+0x8968>
   1d038:	mov	r2, r8
   1d03c:	mov	r1, r0
   1d040:	mov	r0, sl
   1d044:	bl	18724 <_start@@Base+0x4124>
   1d048:	cmp	r8, r0
   1d04c:	cmpne	r9, r0
   1d050:	beq	1d05c <_start@@Base+0x8a5c>
   1d054:	mov	r9, r0
   1d058:	b	1d020 <_start@@Base+0x8a20>
   1d05c:	mov	r9, r0
   1d060:	b	1cec4 <_start@@Base+0x88c4>
   1d064:	mov	r2, r8
   1d068:	mov	r1, r9
   1d06c:	mov	r0, sl
   1d070:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d074:	mov	r9, r0
   1d078:	b	1cb98 <_start@@Base+0x8598>
   1d07c:	mov	r3, #0
   1d080:	str	r3, [sp, #80]	; 0x50
   1d084:	and	r3, r7, #-16777216	; 0xff000000
   1d088:	str	r3, [sp, #84]	; 0x54
   1d08c:	ldrd	r2, [sp, #80]	; 0x50
   1d090:	cmp	r3, #2046820352	; 0x7a000000
   1d094:	cmpeq	r2, #0
   1d098:	beq	1d0c4 <_start@@Base+0x8ac4>
   1d09c:	ldrd	r2, [sp, #80]	; 0x50
   1d0a0:	cmp	r3, #2030043136	; 0x79000000
   1d0a4:	cmpeq	r2, #0
   1d0a8:	beq	1d168 <_start@@Base+0x8b68>
   1d0ac:	mov	r2, r8
   1d0b0:	mov	r1, r9
   1d0b4:	mov	r0, sl
   1d0b8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d0bc:	mov	r9, r0
   1d0c0:	b	1cb98 <_start@@Base+0x8598>
   1d0c4:	mov	r3, #1
   1d0c8:	mov	r2, r8
   1d0cc:	mov	r1, r9
   1d0d0:	mov	r0, sl
   1d0d4:	bl	18490 <_start@@Base+0x3e90>
   1d0d8:	mov	r1, r0
   1d0dc:	cmp	r0, r9
   1d0e0:	beq	1d150 <_start@@Base+0x8b50>
   1d0e4:	vstr	s18, [sp, #368]	; 0x170
   1d0e8:	add	r3, sp, #368	; 0x170
   1d0ec:	mov	r2, r8
   1d0f0:	str	r0, [sp, #72]	; 0x48
   1d0f4:	mov	r0, sl
   1d0f8:	bl	2e2f8 <flatcc_json_parser_float@@Base>
   1d0fc:	mov	r9, r0
   1d100:	ldr	r3, [sp, #72]	; 0x48
   1d104:	cmp	r3, r0
   1d108:	beq	1d118 <_start@@Base+0x8b18>
   1d10c:	ldr	r3, [sp, #368]	; 0x170
   1d110:	str	r3, [fp, #8]
   1d114:	b	1cb98 <_start@@Base+0x8598>
   1d118:	add	r3, sp, #368	; 0x170
   1d11c:	str	r3, [sp]
   1d120:	ldr	r3, [pc, #-444]	; 1cf6c <_start@@Base+0x896c>
   1d124:	mov	r2, r8
   1d128:	mov	r1, r0
   1d12c:	mov	r0, sl
   1d130:	bl	18724 <_start@@Base+0x4124>
   1d134:	cmp	r8, r0
   1d138:	cmpne	r9, r0
   1d13c:	beq	1d148 <_start@@Base+0x8b48>
   1d140:	mov	r9, r0
   1d144:	b	1d10c <_start@@Base+0x8b0c>
   1d148:	mov	r9, r0
   1d14c:	b	1cec4 <_start@@Base+0x88c4>
   1d150:	mov	r2, r8
   1d154:	mov	r1, r9
   1d158:	mov	r0, sl
   1d15c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d160:	mov	r9, r0
   1d164:	b	1cb98 <_start@@Base+0x8598>
   1d168:	mov	r3, #1
   1d16c:	mov	r2, r8
   1d170:	mov	r1, r9
   1d174:	mov	r0, sl
   1d178:	bl	18490 <_start@@Base+0x3e90>
   1d17c:	mov	r1, r0
   1d180:	cmp	r0, r9
   1d184:	beq	1d1f4 <_start@@Base+0x8bf4>
   1d188:	vstr	s18, [sp, #368]	; 0x170
   1d18c:	add	r3, sp, #368	; 0x170
   1d190:	mov	r2, r8
   1d194:	str	r0, [sp, #72]	; 0x48
   1d198:	mov	r0, sl
   1d19c:	bl	2e2f8 <flatcc_json_parser_float@@Base>
   1d1a0:	mov	r9, r0
   1d1a4:	ldr	r3, [sp, #72]	; 0x48
   1d1a8:	cmp	r3, r0
   1d1ac:	beq	1d1bc <_start@@Base+0x8bbc>
   1d1b0:	ldr	r3, [sp, #368]	; 0x170
   1d1b4:	str	r3, [fp, #4]
   1d1b8:	b	1cb98 <_start@@Base+0x8598>
   1d1bc:	add	r3, sp, #368	; 0x170
   1d1c0:	str	r3, [sp]
   1d1c4:	ldr	r3, [pc, #-604]	; 1cf70 <_start@@Base+0x8970>
   1d1c8:	mov	r2, r8
   1d1cc:	mov	r1, r0
   1d1d0:	mov	r0, sl
   1d1d4:	bl	18724 <_start@@Base+0x4124>
   1d1d8:	cmp	r8, r0
   1d1dc:	cmpne	r9, r0
   1d1e0:	beq	1d1ec <_start@@Base+0x8bec>
   1d1e4:	mov	r9, r0
   1d1e8:	b	1d1b0 <_start@@Base+0x8bb0>
   1d1ec:	mov	r9, r0
   1d1f0:	b	1cec4 <_start@@Base+0x88c4>
   1d1f4:	mov	r2, r8
   1d1f8:	mov	r1, r9
   1d1fc:	mov	r0, sl
   1d200:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d204:	mov	r9, r0
   1d208:	b	1cb98 <_start@@Base+0x8598>
   1d20c:	ldrb	r3, [r9, #1]
   1d210:	cmp	r3, #32
   1d214:	addhi	r9, r9, #1
   1d218:	bls	1cbb4 <_start@@Base+0x85b4>
   1d21c:	b	1cbc8 <_start@@Base+0x85c8>
   1d220:	add	r1, r9, #1
   1d224:	sub	r3, r8, r1
   1d228:	cmp	r3, #1
   1d22c:	ble	1d244 <_start@@Base+0x8c44>
   1d230:	ldrb	r3, [r9, #1]
   1d234:	cmp	r3, #32
   1d238:	movhi	r9, r1
   1d23c:	bhi	1cc10 <_start@@Base+0x8610>
   1d240:	beq	1d258 <_start@@Base+0x8c58>
   1d244:	mov	r2, r8
   1d248:	mov	r0, sl
   1d24c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1d250:	mov	r9, r0
   1d254:	b	1cc10 <_start@@Base+0x8610>
   1d258:	ldrb	r3, [r9, #2]
   1d25c:	cmp	r3, #32
   1d260:	addhi	r9, r9, #2
   1d264:	bls	1d244 <_start@@Base+0x8c44>
   1d268:	b	1cc10 <_start@@Base+0x8610>
   1d26c:	add	r1, r9, #1
   1d270:	sub	r3, r8, r1
   1d274:	cmp	r3, #1
   1d278:	ble	1d290 <_start@@Base+0x8c90>
   1d27c:	ldrb	r3, [r9, #1]
   1d280:	cmp	r3, #32
   1d284:	movhi	r9, r1
   1d288:	bhi	1d2a0 <_start@@Base+0x8ca0>
   1d28c:	beq	1d2dc <_start@@Base+0x8cdc>
   1d290:	mov	r2, r8
   1d294:	mov	r0, sl
   1d298:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1d29c:	mov	r9, r0
   1d2a0:	cmp	r8, r9
   1d2a4:	beq	1d2f0 <_start@@Base+0x8cf0>
   1d2a8:	ldrb	r3, [r9]
   1d2ac:	cmp	r3, #125	; 0x7d
   1d2b0:	movne	r3, #1
   1d2b4:	strne	r3, [sp, #360]	; 0x168
   1d2b8:	bne	1cc10 <_start@@Base+0x8610>
   1d2bc:	mov	r3, #0
   1d2c0:	str	r3, [sp, #360]	; 0x168
   1d2c4:	mov	r2, r8
   1d2c8:	add	r1, r9, #1
   1d2cc:	mov	r0, sl
   1d2d0:	bl	1809c <_start@@Base+0x3a9c>
   1d2d4:	mov	r9, r0
   1d2d8:	b	1cc10 <_start@@Base+0x8610>
   1d2dc:	ldrb	r3, [r9, #2]
   1d2e0:	cmp	r3, #32
   1d2e4:	addhi	r9, r9, #2
   1d2e8:	bls	1d290 <_start@@Base+0x8c90>
   1d2ec:	b	1d2a0 <_start@@Base+0x8ca0>
   1d2f0:	mov	r3, #0
   1d2f4:	str	r3, [sp, #360]	; 0x168
   1d2f8:	mov	r3, #10
   1d2fc:	mov	r2, r8
   1d300:	mov	r1, r9
   1d304:	mov	r0, sl
   1d308:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1d30c:	mov	r9, r0
   1d310:	b	1cc10 <_start@@Base+0x8610>
   1d314:	mov	r2, r8
   1d318:	mov	r1, r9
   1d31c:	mov	r0, sl
   1d320:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d324:	mov	r9, r0
   1d328:	b	1f6b0 <_start@@Base+0xb0b0>
   1d32c:	and	r3, r0, #-16777216	; 0xff000000
   1d330:	str	r3, [sp, #48]	; 0x30
   1d334:	str	r1, [sp, #52]	; 0x34
   1d338:	add	r3, pc, #928	; 0x3a0
   1d33c:	ldrd	r2, [r3]
   1d340:	ldrd	r0, [sp, #48]	; 0x30
   1d344:	cmp	r1, r3
   1d348:	cmpeq	r0, r2
   1d34c:	beq	1d3a4 <_start@@Base+0x8da4>
   1d350:	mov	r3, #4
   1d354:	mov	r2, r8
   1d358:	mov	r1, r9
   1d35c:	mov	r0, sl
   1d360:	bl	18490 <_start@@Base+0x3e90>
   1d364:	cmp	r0, r9
   1d368:	beq	1d484 <_start@@Base+0x8e84>
   1d36c:	movw	r3, #12120	; 0x2f58
   1d370:	movt	r3, #2
   1d374:	str	r3, [sp, #8]
   1d378:	ldr	r3, [sp, #380]	; 0x17c
   1d37c:	str	r3, [sp, #4]
   1d380:	mov	r3, #8
   1d384:	str	r3, [sp]
   1d388:	mov	r3, #0
   1d38c:	mov	r2, r8
   1d390:	mov	r1, r0
   1d394:	mov	r0, sl
   1d398:	bl	2f9b4 <flatcc_json_parser_union@@Base>
   1d39c:	mov	r9, r0
   1d3a0:	b	1f6b0 <_start@@Base+0xb0b0>
   1d3a4:	mov	r3, #5
   1d3a8:	mov	r2, r8
   1d3ac:	mov	r1, r9
   1d3b0:	mov	r0, sl
   1d3b4:	bl	18490 <_start@@Base+0x3e90>
   1d3b8:	mov	r4, r0
   1d3bc:	cmp	r0, r9
   1d3c0:	beq	1d518 <_start@@Base+0x8f18>
   1d3c4:	mvn	r3, #-1073741824	; 0xc0000000
   1d3c8:	mov	r2, #2
   1d3cc:	mov	r1, #4
   1d3d0:	ldr	r0, [sl]
   1d3d4:	bl	278ec <flatcc_builder_start_vector@@Base>
   1d3d8:	cmp	r0, #0
   1d3dc:	bne	20954 <_start@@Base+0xc354>
   1d3e0:	add	r3, sp, #388	; 0x184
   1d3e4:	mov	r2, r8
   1d3e8:	mov	r1, r4
   1d3ec:	mov	r0, sl
   1d3f0:	bl	1857c <_start@@Base+0x3f7c>
   1d3f4:	mov	r9, r0
   1d3f8:	ldr	r3, [sp, #388]	; 0x184
   1d3fc:	cmp	r3, #0
   1d400:	beq	1d450 <_start@@Base+0x8e50>
   1d404:	mov	r4, #1
   1d408:	mov	r1, r4
   1d40c:	ldr	r0, [sl]
   1d410:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   1d414:	subs	r3, r0, #0
   1d418:	beq	209e4 <_start@@Base+0xc3e4>
   1d41c:	mov	r2, r8
   1d420:	mov	r1, r9
   1d424:	mov	r0, sl
   1d428:	bl	1b818 <_start@@Base+0x7218>
   1d42c:	add	r3, sp, #388	; 0x184
   1d430:	mov	r2, r8
   1d434:	mov	r1, r0
   1d438:	mov	r0, sl
   1d43c:	bl	18214 <_start@@Base+0x3c14>
   1d440:	mov	r9, r0
   1d444:	ldr	r3, [sp, #388]	; 0x184
   1d448:	cmp	r3, #0
   1d44c:	bne	1d408 <_start@@Base+0x8e08>
   1d450:	ldr	r0, [sl]
   1d454:	bl	289f0 <flatcc_builder_end_vector@@Base>
   1d458:	str	r0, [sp, #384]	; 0x180
   1d45c:	cmp	r0, #0
   1d460:	beq	209ec <_start@@Base+0xc3ec>
   1d464:	mov	r1, #9
   1d468:	ldr	r0, [sl]
   1d46c:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1d470:	cmp	r0, #0
   1d474:	beq	209f4 <_start@@Base+0xc3f4>
   1d478:	ldr	r3, [sp, #384]	; 0x180
   1d47c:	str	r3, [r0]
   1d480:	b	1f6b0 <_start@@Base+0xb0b0>
   1d484:	add	r3, pc, #604	; 0x25c
   1d488:	ldrd	r2, [r3]
   1d48c:	ldrd	r0, [sp, #48]	; 0x30
   1d490:	cmp	r1, r3
   1d494:	cmpeq	r0, r2
   1d498:	beq	1d4f8 <_start@@Base+0x8ef8>
   1d49c:	add	r3, pc, #588	; 0x24c
   1d4a0:	ldrd	r2, [r3]
   1d4a4:	cmp	r5, r3
   1d4a8:	cmpeq	r4, r2
   1d4ac:	bne	1d518 <_start@@Base+0x8f18>
   1d4b0:	add	r9, r9, #8
   1d4b4:	mov	r1, r8
   1d4b8:	mov	r0, r9
   1d4bc:	bl	146f0 <_start@@Base+0xf0>
   1d4c0:	mov	r3, #0
   1d4c4:	str	r3, [sp, #184]	; 0xb8
   1d4c8:	and	r3, r1, #-16777216	; 0xff000000
   1d4cc:	str	r3, [sp, #188]	; 0xbc
   1d4d0:	ldrd	r2, [sp, #184]	; 0xb8
   1d4d4:	cmp	r3, #1694498816	; 0x65000000
   1d4d8:	cmpeq	r2, #0
   1d4dc:	beq	1d5f0 <_start@@Base+0x8ff0>
   1d4e0:	mov	r2, r8
   1d4e4:	mov	r1, r9
   1d4e8:	mov	r0, sl
   1d4ec:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d4f0:	mov	r9, r0
   1d4f4:	b	1f6b0 <_start@@Base+0xb0b0>
   1d4f8:	mov	r3, #5
   1d4fc:	mov	r2, r8
   1d500:	mov	r1, r9
   1d504:	mov	r0, sl
   1d508:	bl	18490 <_start@@Base+0x3e90>
   1d50c:	mov	r4, r0
   1d510:	cmp	r0, r9
   1d514:	bne	1d530 <_start@@Base+0x8f30>
   1d518:	mov	r2, r8
   1d51c:	mov	r1, r9
   1d520:	mov	r0, sl
   1d524:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d528:	mov	r9, r0
   1d52c:	b	1f6b0 <_start@@Base+0xb0b0>
   1d530:	mvn	r3, #-1073741824	; 0xc0000000
   1d534:	mov	r2, #2
   1d538:	mov	r1, #4
   1d53c:	ldr	r0, [sl]
   1d540:	bl	278ec <flatcc_builder_start_vector@@Base>
   1d544:	cmp	r0, #0
   1d548:	bne	20960 <_start@@Base+0xc360>
   1d54c:	add	r3, sp, #388	; 0x184
   1d550:	mov	r2, r8
   1d554:	mov	r1, r4
   1d558:	mov	r0, sl
   1d55c:	bl	1857c <_start@@Base+0x3f7c>
   1d560:	mov	r9, r0
   1d564:	ldr	r3, [sp, #388]	; 0x184
   1d568:	cmp	r3, #0
   1d56c:	beq	1d5bc <_start@@Base+0x8fbc>
   1d570:	mov	r4, #1
   1d574:	mov	r1, r4
   1d578:	ldr	r0, [sl]
   1d57c:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   1d580:	subs	r3, r0, #0
   1d584:	beq	209fc <_start@@Base+0xc3fc>
   1d588:	mov	r2, r8
   1d58c:	mov	r1, r9
   1d590:	mov	r0, sl
   1d594:	bl	1b818 <_start@@Base+0x7218>
   1d598:	add	r3, sp, #388	; 0x184
   1d59c:	mov	r2, r8
   1d5a0:	mov	r1, r0
   1d5a4:	mov	r0, sl
   1d5a8:	bl	18214 <_start@@Base+0x3c14>
   1d5ac:	mov	r9, r0
   1d5b0:	ldr	r3, [sp, #388]	; 0x184
   1d5b4:	cmp	r3, #0
   1d5b8:	bne	1d574 <_start@@Base+0x8f74>
   1d5bc:	ldr	r0, [sl]
   1d5c0:	bl	289f0 <flatcc_builder_end_vector@@Base>
   1d5c4:	str	r0, [sp, #384]	; 0x180
   1d5c8:	cmp	r0, #0
   1d5cc:	beq	20a04 <_start@@Base+0xc404>
   1d5d0:	mov	r1, #31
   1d5d4:	ldr	r0, [sl]
   1d5d8:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1d5dc:	cmp	r0, #0
   1d5e0:	beq	20a0c <_start@@Base+0xc40c>
   1d5e4:	ldr	r3, [sp, #384]	; 0x180
   1d5e8:	str	r3, [r0]
   1d5ec:	b	1f6b0 <_start@@Base+0xb0b0>
   1d5f0:	mov	r3, #1
   1d5f4:	mov	r2, r8
   1d5f8:	mov	r1, r9
   1d5fc:	mov	r0, sl
   1d600:	bl	18490 <_start@@Base+0x3e90>
   1d604:	mov	r1, r0
   1d608:	cmp	r9, r0
   1d60c:	beq	1d64c <_start@@Base+0x904c>
   1d610:	movw	r3, #12120	; 0x2f58
   1d614:	movt	r3, #2
   1d618:	str	r3, [sp, #12]
   1d61c:	ldr	r3, [pc, #252]	; 1d720 <_start@@Base+0x9120>
   1d620:	str	r3, [sp, #8]
   1d624:	ldr	r3, [sp, #380]	; 0x17c
   1d628:	str	r3, [sp, #4]
   1d62c:	mov	r3, #8
   1d630:	str	r3, [sp]
   1d634:	mov	r3, #0
   1d638:	mov	r2, r8
   1d63c:	mov	r0, sl
   1d640:	bl	2fb1c <flatcc_json_parser_union_type@@Base>
   1d644:	mov	r9, r0
   1d648:	b	1f6b0 <_start@@Base+0xb0b0>
   1d64c:	mov	r2, r8
   1d650:	mov	r0, sl
   1d654:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d658:	mov	r9, r0
   1d65c:	b	1f6b0 <_start@@Base+0xb0b0>
   1d660:	add	r3, pc, #144	; 0x90
   1d664:	ldrd	r2, [r3]
   1d668:	cmp	r1, r3
   1d66c:	cmpeq	r0, r2
   1d670:	bhi	1f660 <_start@@Base+0xb060>
   1d674:	add	r3, pc, #132	; 0x84
   1d678:	ldrd	r2, [r3]
   1d67c:	cmp	r1, r3
   1d680:	cmpeq	r0, r2
   1d684:	beq	1d724 <_start@@Base+0x9124>
   1d688:	add	r3, pc, #120	; 0x78
   1d68c:	ldrd	r2, [r3]
   1d690:	cmp	r1, r3
   1d694:	cmpeq	r0, r2
   1d698:	bhi	1ec0c <_start@@Base+0xa60c>
   1d69c:	add	r3, pc, #108	; 0x6c
   1d6a0:	ldrd	r2, [r3]
   1d6a4:	cmp	r1, r3
   1d6a8:	cmpeq	r0, r2
   1d6ac:	beq	1e448 <_start@@Base+0x9e48>
   1d6b0:	add	r3, pc, #96	; 0x60
   1d6b4:	ldrd	r2, [r3]
   1d6b8:	cmp	r1, r3
   1d6bc:	cmpeq	r0, r2
   1d6c0:	beq	1eb30 <_start@@Base+0xa530>
   1d6c4:	mov	r2, r8
   1d6c8:	mov	r1, r9
   1d6cc:	mov	r0, sl
   1d6d0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d6d4:	mov	r9, r0
   1d6d8:	b	1f6b0 <_start@@Base+0xb0b0>
   1d6dc:	nop	{0}
   1d6e0:	strcc	r0, [r0], #-0
   1d6e4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d6e8:	strcc	r0, [r0, #-0]
   1d6ec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d6f0:	svcpl	0x00747970
   1d6f4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d6f8:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1d6fc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d700:	cmnvs	r2, r1, ror #4
   1d704:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d708:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1d70c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d710:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1d714:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d718:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1d71c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d720:	andeq	r5, r5, ip, ror r1
   1d724:	add	r4, r9, #8
   1d728:	mov	r1, r8
   1d72c:	mov	r0, r4
   1d730:	bl	146f0 <_start@@Base+0xf0>
   1d734:	add	r3, pc, #652	; 0x28c
   1d738:	ldrd	r2, [r3]
   1d73c:	cmp	r1, r3
   1d740:	cmpeq	r0, r2
   1d744:	bhi	1e028 <_start@@Base+0x9a28>
   1d748:	add	r3, pc, #640	; 0x280
   1d74c:	ldrd	r2, [r3]
   1d750:	cmp	r1, r3
   1d754:	cmpeq	r0, r2
   1d758:	beq	1d7bc <_start@@Base+0x91bc>
   1d75c:	add	r3, pc, #628	; 0x274
   1d760:	ldrd	r2, [r3]
   1d764:	cmp	r1, r3
   1d768:	cmpeq	r0, r2
   1d76c:	bne	1d7e0 <_start@@Base+0x91e0>
   1d770:	add	r4, r9, #16
   1d774:	mov	r1, r8
   1d778:	mov	r0, r4
   1d77c:	bl	146f0 <_start@@Base+0xf0>
   1d780:	bic	r3, r0, #255	; 0xff
   1d784:	str	r3, [sp, #224]	; 0xe0
   1d788:	str	r1, [sp, #228]	; 0xe4
   1d78c:	add	r3, pc, #588	; 0x24c
   1d790:	ldrd	r2, [r3]
   1d794:	ldrd	r0, [sp, #224]	; 0xe0
   1d798:	cmp	r1, r3
   1d79c:	cmpeq	r0, r2
   1d7a0:	beq	1d90c <_start@@Base+0x930c>
   1d7a4:	mov	r2, r8
   1d7a8:	mov	r1, r4
   1d7ac:	mov	r0, sl
   1d7b0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d7b4:	mov	r9, r0
   1d7b8:	b	1f6b0 <_start@@Base+0xb0b0>
   1d7bc:	mov	r3, #8
   1d7c0:	mov	r2, r8
   1d7c4:	mov	r1, r4
   1d7c8:	mov	r0, sl
   1d7cc:	bl	18490 <_start@@Base+0x3e90>
   1d7d0:	mov	r9, r0
   1d7d4:	cmp	r4, r0
   1d7d8:	moveq	r4, r0
   1d7dc:	bne	1d7f8 <_start@@Base+0x91f8>
   1d7e0:	mov	r2, r8
   1d7e4:	mov	r1, r4
   1d7e8:	mov	r0, sl
   1d7ec:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d7f0:	mov	r9, r0
   1d7f4:	b	1f6b0 <_start@@Base+0xb0b0>
   1d7f8:	mvn	r3, #0
   1d7fc:	mov	r2, #1
   1d800:	mov	r1, r2
   1d804:	ldr	r0, [sl]
   1d808:	bl	278ec <flatcc_builder_start_vector@@Base>
   1d80c:	cmp	r0, #0
   1d810:	bne	20a14 <_start@@Base+0xc414>
   1d814:	add	r3, sp, #388	; 0x184
   1d818:	mov	r2, r8
   1d81c:	mov	r1, r9
   1d820:	mov	r0, sl
   1d824:	bl	1857c <_start@@Base+0x3f7c>
   1d828:	mov	r9, r0
   1d82c:	ldr	r3, [sp, #388]	; 0x184
   1d830:	cmp	r3, #0
   1d834:	beq	1d8d8 <_start@@Base+0x92d8>
   1d838:	mov	fp, #0
   1d83c:	b	1d86c <_start@@Base+0x926c>
   1d840:	ldrb	r3, [sp, #368]	; 0x170
   1d844:	strb	r3, [r5]
   1d848:	add	r3, sp, #388	; 0x184
   1d84c:	mov	r2, r8
   1d850:	mov	r1, r4
   1d854:	mov	r0, sl
   1d858:	bl	18214 <_start@@Base+0x3c14>
   1d85c:	mov	r9, r0
   1d860:	ldr	r3, [sp, #388]	; 0x184
   1d864:	cmp	r3, #0
   1d868:	beq	1d8d8 <_start@@Base+0x92d8>
   1d86c:	strb	fp, [sp, #368]	; 0x170
   1d870:	mov	r1, #1
   1d874:	ldr	r0, [sl]
   1d878:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   1d87c:	subs	r5, r0, #0
   1d880:	beq	20a1c <_start@@Base+0xc41c>
   1d884:	add	r3, sp, #368	; 0x170
   1d888:	mov	r2, r8
   1d88c:	mov	r1, r9
   1d890:	mov	r0, sl
   1d894:	bl	1833c <_start@@Base+0x3d3c>
   1d898:	mov	r4, r0
   1d89c:	cmp	r9, r0
   1d8a0:	bne	1d840 <_start@@Base+0x9240>
   1d8a4:	add	r3, sp, #368	; 0x170
   1d8a8:	str	r3, [sp]
   1d8ac:	ldr	r3, [pc, #308]	; 1d9e8 <_start@@Base+0x93e8>
   1d8b0:	mov	r2, r8
   1d8b4:	mov	r1, r0
   1d8b8:	mov	r0, sl
   1d8bc:	bl	19478 <_start@@Base+0x4e78>
   1d8c0:	mov	r9, r0
   1d8c4:	cmp	r8, r0
   1d8c8:	cmpne	r4, r0
   1d8cc:	beq	20a24 <_start@@Base+0xc424>
   1d8d0:	mov	r4, r0
   1d8d4:	b	1d840 <_start@@Base+0x9240>
   1d8d8:	ldr	r0, [sl]
   1d8dc:	bl	289f0 <flatcc_builder_end_vector@@Base>
   1d8e0:	str	r0, [sp, #384]	; 0x180
   1d8e4:	cmp	r0, #0
   1d8e8:	beq	20a2c <_start@@Base+0xc42c>
   1d8ec:	mov	r1, #24
   1d8f0:	ldr	r0, [sl]
   1d8f4:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1d8f8:	cmp	r0, #0
   1d8fc:	beq	20a34 <_start@@Base+0xc434>
   1d900:	ldr	r3, [sp, #384]	; 0x180
   1d904:	str	r3, [r0]
   1d908:	b	1f6b0 <_start@@Base+0xb0b0>
   1d90c:	mov	r3, #7
   1d910:	mov	r2, r8
   1d914:	mov	r1, r4
   1d918:	mov	r0, sl
   1d91c:	bl	18490 <_start@@Base+0x3e90>
   1d920:	mov	r9, r0
   1d924:	cmp	r4, r0
   1d928:	bne	1d944 <_start@@Base+0x9344>
   1d92c:	mov	r2, r8
   1d930:	mov	r1, r0
   1d934:	mov	r0, sl
   1d938:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1d93c:	mov	r9, r0
   1d940:	b	1f6b0 <_start@@Base+0xb0b0>
   1d944:	mvn	r3, #-536870912	; 0xe0000000
   1d948:	mov	r2, #4
   1d94c:	mov	r1, #8
   1d950:	ldr	r0, [sl]
   1d954:	bl	278ec <flatcc_builder_start_vector@@Base>
   1d958:	cmp	r0, #0
   1d95c:	bne	20a3c <_start@@Base+0xc43c>
   1d960:	add	r3, sp, #388	; 0x184
   1d964:	mov	r2, r8
   1d968:	mov	r1, r9
   1d96c:	mov	r0, sl
   1d970:	bl	1857c <_start@@Base+0x3f7c>
   1d974:	mov	r9, r0
   1d978:	ldr	r3, [sp, #388]	; 0x184
   1d97c:	cmp	r3, #0
   1d980:	beq	1dff4 <_start@@Base+0x99f4>
   1d984:	mov	fp, #0
   1d988:	movt	fp, #65535	; 0xffff
   1d98c:	add	r3, sp, #344	; 0x158
   1d990:	strd	r6, [r3]
   1d994:	mov	r7, sl
   1d998:	mov	r4, r0
   1d99c:	mov	r9, fp
   1d9a0:	add	r3, sp, #256	; 0x100
   1d9a4:	ldrd	sl, [r3]
   1d9a8:	b	1ddd8 <_start@@Base+0x97d8>
   1d9ac:	mov	r3, #5
   1d9b0:	mov	r2, r8
   1d9b4:	mov	r1, r4
   1d9b8:	mov	r0, r7
   1d9bc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1d9c0:	mov	r4, r0
   1d9c4:	b	1db3c <_start@@Base+0x953c>
   1d9c8:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1d9cc:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d9d0:	svcvs	0x006f6c73
   1d9d4:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d9d8:	svcvs	0x00727465
   1d9dc:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d9e0:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1d9e4:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1d9e8:	andeq	r5, r5, ip, lsl #3
   1d9ec:	ldrb	r0, [r4, #7]
   1d9f0:	mov	r1, #0
   1d9f4:	ldrb	r2, [r4, #6]
   1d9f8:	orr	r3, r0, r2, lsl #8
   1d9fc:	mov	r2, r1
   1da00:	ldrb	r0, [r4, #5]
   1da04:	orr	r3, r3, r0, lsl #16
   1da08:	ldrb	r0, [r4, #4]
   1da0c:	orr	r3, r3, r0, lsl #24
   1da10:	ldrb	r0, [r4, #3]
   1da14:	orr	r2, r2, r0
   1da18:	ldrb	r0, [r4, #2]
   1da1c:	orr	r2, r2, r0, lsl #8
   1da20:	ldrb	r0, [r4, #1]
   1da24:	orr	r2, r2, r0, lsl #16
   1da28:	ldrb	r0, [r4]
   1da2c:	mov	sl, r3
   1da30:	orr	fp, r2, r0, lsl #24
   1da34:	mov	r3, #0
   1da38:	str	r3, [sp, #16]
   1da3c:	and	r3, fp, r9
   1da40:	str	r3, [sp, #20]
   1da44:	ldrd	r2, [sp, #16]
   1da48:	mov	r0, #0
   1da4c:	mov	r1, #0
   1da50:	movt	r1, #26980	; 0x6964
   1da54:	cmp	r3, r1
   1da58:	cmpeq	r2, r0
   1da5c:	beq	1dbd8 <_start@@Base+0x95d8>
   1da60:	add	r3, pc, #952	; 0x3b8
   1da64:	ldrd	r2, [r3]
   1da68:	cmp	fp, r3
   1da6c:	cmpeq	sl, r2
   1da70:	beq	1dd0c <_start@@Base+0x970c>
   1da74:	mov	r2, r8
   1da78:	mov	r1, r4
   1da7c:	mov	r0, r7
   1da80:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1da84:	mov	r4, r0
   1da88:	sub	r3, r8, r4
   1da8c:	cmp	r3, #1
   1da90:	ble	1daa4 <_start@@Base+0x94a4>
   1da94:	ldrb	r3, [r4]
   1da98:	cmp	r3, #32
   1da9c:	bhi	1dab8 <_start@@Base+0x94b8>
   1daa0:	beq	1ded4 <_start@@Base+0x98d4>
   1daa4:	mov	r2, r8
   1daa8:	mov	r1, r4
   1daac:	mov	r0, r7
   1dab0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1dab4:	mov	r4, r0
   1dab8:	cmp	r8, r4
   1dabc:	moveq	r3, #0
   1dac0:	streq	r3, [sp, #356]	; 0x164
   1dac4:	beq	1db00 <_start@@Base+0x9500>
   1dac8:	ldrb	r3, [r4]
   1dacc:	cmp	r3, #44	; 0x2c
   1dad0:	beq	1df34 <_start@@Base+0x9934>
   1dad4:	mov	r3, #0
   1dad8:	str	r3, [sp, #356]	; 0x164
   1dadc:	ldrb	r3, [r4]
   1dae0:	cmp	r3, #125	; 0x7d
   1dae4:	beq	1dee8 <_start@@Base+0x98e8>
   1dae8:	mov	r3, #10
   1daec:	mov	r2, r8
   1daf0:	mov	r1, r4
   1daf4:	mov	r0, r7
   1daf8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1dafc:	mov	r4, r0
   1db00:	ldr	r3, [sp, #356]	; 0x164
   1db04:	cmp	r3, #0
   1db08:	beq	1ddb4 <_start@@Base+0x97b4>
   1db0c:	cmp	r8, r4
   1db10:	beq	1db3c <_start@@Base+0x953c>
   1db14:	ldrb	r3, [r4]
   1db18:	cmp	r3, #34	; 0x22
   1db1c:	addeq	r4, r4, #1
   1db20:	moveq	r3, #0
   1db24:	streq	r3, [r7, #12]
   1db28:	beq	1db3c <_start@@Base+0x953c>
   1db2c:	cmp	r3, #46	; 0x2e
   1db30:	movne	r3, #1
   1db34:	strne	r3, [r7, #12]
   1db38:	beq	1d9ac <_start@@Base+0x93ac>
   1db3c:	sub	r3, r8, r4
   1db40:	cmp	r3, #8
   1db44:	bhi	1d9ec <_start@@Base+0x93ec>
   1db48:	sub	r3, r3, #1
   1db4c:	cmp	r3, #7
   1db50:	ldrls	pc, [pc, r3, lsl #2]
   1db54:	b	1dbcc <_start@@Base+0x95cc>
   1db58:	andeq	sp, r1, r0, asr #23
   1db5c:			; <UNDEFINED> instruction: 0x0001dbb4
   1db60:	andeq	sp, r1, r8, lsr #23
   1db64:	muleq	r1, ip, fp
   1db68:	muleq	r1, r0, fp
   1db6c:	andeq	sp, r1, r4, lsl #23
   1db70:	andeq	sp, r1, r8, ror fp
   1db74:	andeq	sp, r1, ip, ror #19
   1db78:	mov	r0, #0
   1db7c:	mov	r1, r0
   1db80:	b	1d9f4 <_start@@Base+0x93f4>
   1db84:	mov	r3, #0
   1db88:	mov	r2, r3
   1db8c:	b	1da00 <_start@@Base+0x9400>
   1db90:	mov	r3, #0
   1db94:	mov	r2, r3
   1db98:	b	1da08 <_start@@Base+0x9408>
   1db9c:	mov	r3, #0
   1dba0:	mov	r2, r3
   1dba4:	b	1da10 <_start@@Base+0x9410>
   1dba8:	mov	r3, #0
   1dbac:	mov	r2, r3
   1dbb0:	b	1da18 <_start@@Base+0x9418>
   1dbb4:	mov	r3, #0
   1dbb8:	mov	r2, r3
   1dbbc:	b	1da20 <_start@@Base+0x9420>
   1dbc0:	mov	r3, #0
   1dbc4:	mov	r2, r3
   1dbc8:	b	1da28 <_start@@Base+0x9428>
   1dbcc:	mov	sl, #0
   1dbd0:	mov	fp, #0
   1dbd4:	b	1da34 <_start@@Base+0x9434>
   1dbd8:	mov	r3, #2
   1dbdc:	mov	r2, r8
   1dbe0:	mov	r1, r4
   1dbe4:	mov	r0, r7
   1dbe8:	bl	18490 <_start@@Base+0x3e90>
   1dbec:	mov	r5, r0
   1dbf0:	cmp	r0, r4
   1dbf4:	beq	1dcf4 <_start@@Base+0x96f4>
   1dbf8:	mov	r3, #0
   1dbfc:	str	r3, [sp, #360]	; 0x168
   1dc00:	str	r3, [sp, #368]	; 0x170
   1dc04:	str	r3, [sp, #372]	; 0x174
   1dc08:	str	r3, [sp, #364]	; 0x16c
   1dc0c:	cmp	r8, r0
   1dc10:	beq	20b88 <_start@@Base+0xc588>
   1dc14:	add	r3, sp, #368	; 0x170
   1dc18:	str	r3, [sp]
   1dc1c:	add	r3, sp, #364	; 0x16c
   1dc20:	mov	r2, r8
   1dc24:	mov	r1, r0
   1dc28:	mov	r0, r7
   1dc2c:	bl	2f170 <flatcc_json_parser_integer@@Base>
   1dc30:	mov	r6, r0
   1dc34:	cmp	r5, r0
   1dc38:	bne	1dc70 <_start@@Base+0x9670>
   1dc3c:	add	r3, sp, #360	; 0x168
   1dc40:	str	r3, [sp]
   1dc44:	ldr	r3, [sp, #256]	; 0x100
   1dc48:	add	r3, r3, #296	; 0x128
   1dc4c:	mov	r2, r8
   1dc50:	mov	r1, r6
   1dc54:	mov	r0, r7
   1dc58:	bl	1a4a0 <_start@@Base+0x5ea0>
   1dc5c:	mov	r4, r0
   1dc60:	cmp	r8, r0
   1dc64:	cmpne	r6, r0
   1dc68:	bne	1dcdc <_start@@Base+0x96dc>
   1dc6c:	b	1dd9c <_start@@Base+0x979c>
   1dc70:	ldr	r3, [sp, #364]	; 0x16c
   1dc74:	cmp	r3, #0
   1dc78:	bne	1dcbc <_start@@Base+0x96bc>
   1dc7c:	add	r3, sp, #368	; 0x170
   1dc80:	ldrd	r2, [r3]
   1dc84:	mvn	r0, #0
   1dc88:	mov	r1, #0
   1dc8c:	cmp	r3, r1
   1dc90:	cmpeq	r2, r0
   1dc94:	strls	r2, [sp, #360]	; 0x168
   1dc98:	movls	r4, r6
   1dc9c:	bls	1dcdc <_start@@Base+0x96dc>
   1dca0:	mov	r3, #7
   1dca4:	mov	r2, r8
   1dca8:	mov	r1, r6
   1dcac:	mov	r0, r7
   1dcb0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1dcb4:	mov	r4, r0
   1dcb8:	b	1dcd4 <_start@@Base+0x96d4>
   1dcbc:	mov	r3, #8
   1dcc0:	mov	r2, r8
   1dcc4:	mov	r1, r0
   1dcc8:	mov	r0, r7
   1dccc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1dcd0:	mov	r4, r0
   1dcd4:	cmp	r5, r4
   1dcd8:	beq	1dcec <_start@@Base+0x96ec>
   1dcdc:	ldr	r3, [sp, #360]	; 0x168
   1dce0:	ldr	r2, [sp, #72]	; 0x48
   1dce4:	str	r3, [r2]
   1dce8:	b	1da88 <_start@@Base+0x9488>
   1dcec:	mov	r6, r4
   1dcf0:	b	1dc3c <_start@@Base+0x963c>
   1dcf4:	mov	r2, r8
   1dcf8:	mov	r1, r4
   1dcfc:	mov	r0, r7
   1dd00:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1dd04:	mov	r4, r0
   1dd08:	b	1da88 <_start@@Base+0x9488>
   1dd0c:	mov	r3, #8
   1dd10:	mov	r2, r8
   1dd14:	mov	r1, r4
   1dd18:	mov	r0, r7
   1dd1c:	bl	18490 <_start@@Base+0x3e90>
   1dd20:	mov	r5, r0
   1dd24:	cmp	r0, r4
   1dd28:	beq	1debc <_start@@Base+0x98bc>
   1dd2c:	mov	r3, #0
   1dd30:	str	r3, [sp, #360]	; 0x168
   1dd34:	str	r3, [sp, #368]	; 0x170
   1dd38:	str	r3, [sp, #372]	; 0x174
   1dd3c:	str	r3, [sp, #364]	; 0x16c
   1dd40:	cmp	r8, r0
   1dd44:	beq	20b90 <_start@@Base+0xc590>
   1dd48:	add	r3, sp, #368	; 0x170
   1dd4c:	str	r3, [sp]
   1dd50:	add	r3, sp, #364	; 0x16c
   1dd54:	mov	r2, r8
   1dd58:	mov	r1, r0
   1dd5c:	mov	r0, r7
   1dd60:	bl	2f170 <flatcc_json_parser_integer@@Base>
   1dd64:	mov	r6, r0
   1dd68:	cmp	r5, r0
   1dd6c:	bne	1de38 <_start@@Base+0x9838>
   1dd70:	add	r3, sp, #360	; 0x168
   1dd74:	str	r3, [sp]
   1dd78:	ldr	r3, [sp, #240]	; 0xf0
   1dd7c:	mov	r2, r8
   1dd80:	mov	r1, r6
   1dd84:	mov	r0, r7
   1dd88:	bl	1a4a0 <_start@@Base+0x5ea0>
   1dd8c:	mov	r4, r0
   1dd90:	cmp	r8, r0
   1dd94:	cmpne	r6, r0
   1dd98:	bne	1dea4 <_start@@Base+0x98a4>
   1dd9c:	mov	r3, #33	; 0x21
   1dda0:	mov	r2, r8
   1dda4:	mov	r1, r4
   1dda8:	mov	r0, r7
   1ddac:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ddb0:	mov	r4, r0
   1ddb4:	add	r3, sp, #388	; 0x184
   1ddb8:	mov	r2, r8
   1ddbc:	mov	r1, r4
   1ddc0:	mov	r0, r7
   1ddc4:	bl	18214 <_start@@Base+0x3c14>
   1ddc8:	mov	r4, r0
   1ddcc:	ldr	r3, [sp, #388]	; 0x184
   1ddd0:	cmp	r3, #0
   1ddd4:	beq	1dfdc <_start@@Base+0x99dc>
   1ddd8:	mov	r1, #1
   1dddc:	ldr	r0, [r7]
   1dde0:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   1dde4:	subs	r3, r0, #0
   1dde8:	str	r3, [sp, #72]	; 0x48
   1ddec:	beq	20a44 <_start@@Base+0xc444>
   1ddf0:	add	r3, sp, #356	; 0x164
   1ddf4:	mov	r2, r8
   1ddf8:	mov	r1, r4
   1ddfc:	mov	r0, r7
   1de00:	bl	18650 <_start@@Base+0x4050>
   1de04:	mov	r4, r0
   1de08:	movw	r3, #20592	; 0x5070
   1de0c:	movt	r3, #5
   1de10:	str	r3, [sp, #256]	; 0x100
   1de14:	add	r3, r3, #308	; 0x134
   1de18:	str	r3, [sp, #240]	; 0xf0
   1de1c:	b	1db00 <_start@@Base+0x9500>
   1de20:	cmnvs	lr, r5, ror #6
   1de24:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1de28:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1de2c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1de30:	cmnvs	r2, r5, ror #24
   1de34:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1de38:	ldr	r3, [sp, #364]	; 0x16c
   1de3c:	cmp	r3, #0
   1de40:	bne	1de84 <_start@@Base+0x9884>
   1de44:	add	r3, sp, #368	; 0x170
   1de48:	ldrd	r2, [r3]
   1de4c:	mvn	r0, #0
   1de50:	mov	r1, #0
   1de54:	cmp	r3, r1
   1de58:	cmpeq	r2, r0
   1de5c:	strls	r2, [sp, #360]	; 0x168
   1de60:	movls	r4, r6
   1de64:	bls	1dea4 <_start@@Base+0x98a4>
   1de68:	mov	r3, #7
   1de6c:	mov	r2, r8
   1de70:	mov	r1, r6
   1de74:	mov	r0, r7
   1de78:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1de7c:	mov	r4, r0
   1de80:	b	1de9c <_start@@Base+0x989c>
   1de84:	mov	r3, #8
   1de88:	mov	r2, r8
   1de8c:	mov	r1, r0
   1de90:	mov	r0, r7
   1de94:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1de98:	mov	r4, r0
   1de9c:	cmp	r5, r4
   1dea0:	beq	1deb4 <_start@@Base+0x98b4>
   1dea4:	ldr	r3, [sp, #360]	; 0x168
   1dea8:	ldr	r2, [sp, #72]	; 0x48
   1deac:	str	r3, [r2, #4]
   1deb0:	b	1da88 <_start@@Base+0x9488>
   1deb4:	mov	r6, r4
   1deb8:	b	1dd70 <_start@@Base+0x9770>
   1debc:	mov	r2, r8
   1dec0:	mov	r1, r4
   1dec4:	mov	r0, r7
   1dec8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1decc:	mov	r4, r0
   1ded0:	b	1da88 <_start@@Base+0x9488>
   1ded4:	ldrb	r3, [r4, #1]
   1ded8:	cmp	r3, #32
   1dedc:	addhi	r4, r4, #1
   1dee0:	bls	1daa4 <_start@@Base+0x94a4>
   1dee4:	b	1dab8 <_start@@Base+0x94b8>
   1dee8:	add	r1, r4, #1
   1deec:	sub	r3, r8, r1
   1def0:	cmp	r3, #1
   1def4:	ble	1df0c <_start@@Base+0x990c>
   1def8:	ldrb	r3, [r4, #1]
   1defc:	cmp	r3, #32
   1df00:	movhi	r4, r1
   1df04:	bhi	1db00 <_start@@Base+0x9500>
   1df08:	beq	1df20 <_start@@Base+0x9920>
   1df0c:	mov	r2, r8
   1df10:	mov	r0, r7
   1df14:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1df18:	mov	r4, r0
   1df1c:	b	1db00 <_start@@Base+0x9500>
   1df20:	ldrb	r3, [r4, #2]
   1df24:	cmp	r3, #32
   1df28:	addhi	r4, r4, #2
   1df2c:	bls	1df0c <_start@@Base+0x990c>
   1df30:	b	1db00 <_start@@Base+0x9500>
   1df34:	add	r1, r4, #1
   1df38:	sub	r3, r8, r1
   1df3c:	cmp	r3, #1
   1df40:	ble	1df58 <_start@@Base+0x9958>
   1df44:	ldrb	r3, [r4, #1]
   1df48:	cmp	r3, #32
   1df4c:	movhi	r4, r1
   1df50:	bhi	1df68 <_start@@Base+0x9968>
   1df54:	beq	1dfa4 <_start@@Base+0x99a4>
   1df58:	mov	r2, r8
   1df5c:	mov	r0, r7
   1df60:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1df64:	mov	r4, r0
   1df68:	cmp	r8, r4
   1df6c:	beq	1dfb8 <_start@@Base+0x99b8>
   1df70:	ldrb	r3, [r4]
   1df74:	cmp	r3, #125	; 0x7d
   1df78:	movne	r3, #1
   1df7c:	strne	r3, [sp, #356]	; 0x164
   1df80:	bne	1db00 <_start@@Base+0x9500>
   1df84:	mov	r3, #0
   1df88:	str	r3, [sp, #356]	; 0x164
   1df8c:	mov	r2, r8
   1df90:	add	r1, r4, #1
   1df94:	mov	r0, r7
   1df98:	bl	1809c <_start@@Base+0x3a9c>
   1df9c:	mov	r4, r0
   1dfa0:	b	1db00 <_start@@Base+0x9500>
   1dfa4:	ldrb	r3, [r4, #2]
   1dfa8:	cmp	r3, #32
   1dfac:	addhi	r4, r4, #2
   1dfb0:	bls	1df58 <_start@@Base+0x9958>
   1dfb4:	b	1df68 <_start@@Base+0x9968>
   1dfb8:	mov	r3, #0
   1dfbc:	str	r3, [sp, #356]	; 0x164
   1dfc0:	mov	r3, #10
   1dfc4:	mov	r2, r8
   1dfc8:	mov	r1, r4
   1dfcc:	mov	r0, r7
   1dfd0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1dfd4:	mov	r4, r0
   1dfd8:	b	1db00 <_start@@Base+0x9500>
   1dfdc:	add	r3, sp, #256	; 0x100
   1dfe0:	strd	sl, [r3]
   1dfe4:	mov	sl, r7
   1dfe8:	add	r3, sp, #344	; 0x158
   1dfec:	ldrd	r6, [r3]
   1dff0:	mov	r9, r0
   1dff4:	ldr	r0, [sl]
   1dff8:	bl	289f0 <flatcc_builder_end_vector@@Base>
   1dffc:	str	r0, [sp, #384]	; 0x180
   1e000:	cmp	r0, #0
   1e004:	beq	20a50 <_start@@Base+0xc450>
   1e008:	mov	r1, #29
   1e00c:	ldr	r0, [sl]
   1e010:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1e014:	cmp	r0, #0
   1e018:	beq	20a58 <_start@@Base+0xc458>
   1e01c:	ldr	r3, [sp, #384]	; 0x180
   1e020:	str	r3, [r0]
   1e024:	b	1f6b0 <_start@@Base+0xb0b0>
   1e028:	sub	r3, pc, #520	; 0x208
   1e02c:	ldrd	r2, [r3]
   1e030:	cmp	r1, r3
   1e034:	cmpeq	r0, r2
   1e038:	beq	1e098 <_start@@Base+0x9a98>
   1e03c:	sub	r3, pc, #532	; 0x214
   1e040:	ldrd	r2, [r3]
   1e044:	cmp	r1, r3
   1e048:	cmpeq	r0, r2
   1e04c:	bne	1e430 <_start@@Base+0x9e30>
   1e050:	add	r4, r9, #16
   1e054:	mov	r1, r8
   1e058:	mov	r0, r4
   1e05c:	bl	146f0 <_start@@Base+0xf0>
   1e060:	mov	r3, #0
   1e064:	str	r3, [sp, #232]	; 0xe8
   1e068:	and	r3, r1, #-16777216	; 0xff000000
   1e06c:	str	r3, [sp, #236]	; 0xec
   1e070:	ldrd	r2, [sp, #232]	; 0xe8
   1e074:	cmp	r3, #1929379840	; 0x73000000
   1e078:	cmpeq	r2, #0
   1e07c:	beq	1e328 <_start@@Base+0x9d28>
   1e080:	mov	r2, r8
   1e084:	mov	r1, r4
   1e088:	mov	r0, sl
   1e08c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e090:	mov	r9, r0
   1e094:	b	1f6b0 <_start@@Base+0xb0b0>
   1e098:	add	r4, r9, #16
   1e09c:	mov	r1, r8
   1e0a0:	mov	r0, r4
   1e0a4:	bl	146f0 <_start@@Base+0xf0>
   1e0a8:	mov	ip, r1
   1e0ac:	mov	r3, #0
   1e0b0:	str	r3, [sp, #200]	; 0xc8
   1e0b4:	lsr	r3, r1, #16
   1e0b8:	lsl	r3, r3, #16
   1e0bc:	str	r3, [sp, #204]	; 0xcc
   1e0c0:	mov	r2, #0
   1e0c4:	mov	r3, #0
   1e0c8:	movt	r3, #26418	; 0x6732
   1e0cc:	ldrd	r0, [sp, #200]	; 0xc8
   1e0d0:	cmp	r1, r3
   1e0d4:	cmpeq	r0, r2
   1e0d8:	beq	1e118 <_start@@Base+0x9b18>
   1e0dc:	mov	r3, #0
   1e0e0:	str	r3, [sp, #264]	; 0x108
   1e0e4:	and	r3, ip, #-16777216	; 0xff000000
   1e0e8:	str	r3, [sp, #268]	; 0x10c
   1e0ec:	add	r3, sp, #264	; 0x108
   1e0f0:	ldrd	r2, [r3]
   1e0f4:	cmp	r3, #1728053248	; 0x67000000
   1e0f8:	cmpeq	r2, #0
   1e0fc:	beq	1e220 <_start@@Base+0x9c20>
   1e100:	mov	r2, r8
   1e104:	mov	r1, r4
   1e108:	mov	r0, sl
   1e10c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e110:	mov	r9, r0
   1e114:	b	1f6b0 <_start@@Base+0xb0b0>
   1e118:	mov	r3, #2
   1e11c:	mov	r2, r8
   1e120:	mov	r1, r4
   1e124:	mov	r0, sl
   1e128:	bl	18490 <_start@@Base+0x3e90>
   1e12c:	mov	r9, r0
   1e130:	cmp	r4, r0
   1e134:	bne	1e150 <_start@@Base+0x9b50>
   1e138:	mov	r2, r8
   1e13c:	mov	r1, r0
   1e140:	mov	r0, sl
   1e144:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e148:	mov	r9, r0
   1e14c:	b	1f6b0 <_start@@Base+0xb0b0>
   1e150:	ldr	r0, [sl]
   1e154:	bl	2798c <flatcc_builder_start_offset_vector@@Base>
   1e158:	cmp	r0, #0
   1e15c:	bne	20a60 <_start@@Base+0xc460>
   1e160:	add	r3, sp, #388	; 0x184
   1e164:	mov	r2, r8
   1e168:	mov	r1, r9
   1e16c:	mov	r0, sl
   1e170:	bl	1857c <_start@@Base+0x3f7c>
   1e174:	mov	r9, r0
   1e178:	ldr	r3, [sp, #388]	; 0x184
   1e17c:	cmp	r3, #0
   1e180:	beq	1e1ec <_start@@Base+0x9bec>
   1e184:	mov	r4, #1
   1e188:	add	r3, sp, #384	; 0x180
   1e18c:	mov	r2, r8
   1e190:	mov	r1, r9
   1e194:	mov	r0, sl
   1e198:	bl	2f708 <flatcc_json_parser_build_string@@Base>
   1e19c:	mov	r9, r0
   1e1a0:	ldr	r3, [sp, #384]	; 0x180
   1e1a4:	cmp	r3, #0
   1e1a8:	beq	20a68 <_start@@Base+0xc468>
   1e1ac:	mov	r1, r4
   1e1b0:	ldr	r0, [sl]
   1e1b4:	bl	27290 <flatcc_builder_extend_offset_vector@@Base>
   1e1b8:	cmp	r0, #0
   1e1bc:	beq	20a70 <_start@@Base+0xc470>
   1e1c0:	ldr	r3, [sp, #384]	; 0x180
   1e1c4:	str	r3, [r0]
   1e1c8:	add	r3, sp, #388	; 0x184
   1e1cc:	mov	r2, r8
   1e1d0:	mov	r1, r9
   1e1d4:	mov	r0, sl
   1e1d8:	bl	18214 <_start@@Base+0x3c14>
   1e1dc:	mov	r9, r0
   1e1e0:	ldr	r3, [sp, #388]	; 0x184
   1e1e4:	cmp	r3, #0
   1e1e8:	bne	1e188 <_start@@Base+0x9b88>
   1e1ec:	ldr	r0, [sl]
   1e1f0:	bl	28b1c <flatcc_builder_end_offset_vector@@Base>
   1e1f4:	str	r0, [sp, #384]	; 0x180
   1e1f8:	cmp	r0, #0
   1e1fc:	beq	20a78 <_start@@Base+0xc478>
   1e200:	mov	r1, #28
   1e204:	ldr	r0, [sl]
   1e208:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1e20c:	cmp	r0, #0
   1e210:	beq	20a80 <_start@@Base+0xc480>
   1e214:	ldr	r3, [sp, #384]	; 0x180
   1e218:	str	r3, [r0]
   1e21c:	b	1f6b0 <_start@@Base+0xb0b0>
   1e220:	mov	r3, #1
   1e224:	mov	r2, r8
   1e228:	mov	r1, r4
   1e22c:	mov	r0, sl
   1e230:	bl	18490 <_start@@Base+0x3e90>
   1e234:	mov	r9, r0
   1e238:	cmp	r4, r0
   1e23c:	bne	1e258 <_start@@Base+0x9c58>
   1e240:	mov	r2, r8
   1e244:	mov	r1, r0
   1e248:	mov	r0, sl
   1e24c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e250:	mov	r9, r0
   1e254:	b	1f6b0 <_start@@Base+0xb0b0>
   1e258:	ldr	r0, [sl]
   1e25c:	bl	2798c <flatcc_builder_start_offset_vector@@Base>
   1e260:	cmp	r0, #0
   1e264:	bne	20a88 <_start@@Base+0xc488>
   1e268:	add	r3, sp, #388	; 0x184
   1e26c:	mov	r2, r8
   1e270:	mov	r1, r9
   1e274:	mov	r0, sl
   1e278:	bl	1857c <_start@@Base+0x3f7c>
   1e27c:	mov	r9, r0
   1e280:	ldr	r3, [sp, #388]	; 0x184
   1e284:	cmp	r3, #0
   1e288:	beq	1e2f4 <_start@@Base+0x9cf4>
   1e28c:	mov	r4, #1
   1e290:	add	r3, sp, #384	; 0x180
   1e294:	mov	r2, r8
   1e298:	mov	r1, r9
   1e29c:	mov	r0, sl
   1e2a0:	bl	2f708 <flatcc_json_parser_build_string@@Base>
   1e2a4:	mov	r9, r0
   1e2a8:	ldr	r3, [sp, #384]	; 0x180
   1e2ac:	cmp	r3, #0
   1e2b0:	beq	20a90 <_start@@Base+0xc490>
   1e2b4:	mov	r1, r4
   1e2b8:	ldr	r0, [sl]
   1e2bc:	bl	27290 <flatcc_builder_extend_offset_vector@@Base>
   1e2c0:	cmp	r0, #0
   1e2c4:	beq	20a98 <_start@@Base+0xc498>
   1e2c8:	ldr	r3, [sp, #384]	; 0x180
   1e2cc:	str	r3, [r0]
   1e2d0:	add	r3, sp, #388	; 0x184
   1e2d4:	mov	r2, r8
   1e2d8:	mov	r1, r9
   1e2dc:	mov	r0, sl
   1e2e0:	bl	18214 <_start@@Base+0x3c14>
   1e2e4:	mov	r9, r0
   1e2e8:	ldr	r3, [sp, #388]	; 0x184
   1e2ec:	cmp	r3, #0
   1e2f0:	bne	1e290 <_start@@Base+0x9c90>
   1e2f4:	ldr	r0, [sl]
   1e2f8:	bl	28b1c <flatcc_builder_end_offset_vector@@Base>
   1e2fc:	str	r0, [sp, #384]	; 0x180
   1e300:	cmp	r0, #0
   1e304:	beq	20aa0 <_start@@Base+0xc4a0>
   1e308:	mov	r1, #10
   1e30c:	ldr	r0, [sl]
   1e310:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1e314:	cmp	r0, #0
   1e318:	beq	20aa8 <_start@@Base+0xc4a8>
   1e31c:	ldr	r3, [sp, #384]	; 0x180
   1e320:	str	r3, [r0]
   1e324:	b	1f6b0 <_start@@Base+0xb0b0>
   1e328:	mov	r3, #1
   1e32c:	mov	r2, r8
   1e330:	mov	r1, r4
   1e334:	mov	r0, sl
   1e338:	bl	18490 <_start@@Base+0x3e90>
   1e33c:	mov	r9, r0
   1e340:	cmp	r4, r0
   1e344:	bne	1e360 <_start@@Base+0x9d60>
   1e348:	mov	r2, r8
   1e34c:	mov	r1, r0
   1e350:	mov	r0, sl
   1e354:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e358:	mov	r9, r0
   1e35c:	b	1f6b0 <_start@@Base+0xb0b0>
   1e360:	ldr	r0, [sl]
   1e364:	bl	2798c <flatcc_builder_start_offset_vector@@Base>
   1e368:	cmp	r0, #0
   1e36c:	bne	20ab0 <_start@@Base+0xc4b0>
   1e370:	add	r3, sp, #388	; 0x184
   1e374:	mov	r2, r8
   1e378:	mov	r1, r9
   1e37c:	mov	r0, sl
   1e380:	bl	1857c <_start@@Base+0x3f7c>
   1e384:	mov	r9, r0
   1e388:	ldr	r3, [sp, #388]	; 0x184
   1e38c:	cmp	r3, #0
   1e390:	beq	1e3fc <_start@@Base+0x9dfc>
   1e394:	mov	r4, #1
   1e398:	add	r3, sp, #384	; 0x180
   1e39c:	mov	r2, r8
   1e3a0:	mov	r1, r9
   1e3a4:	mov	r0, sl
   1e3a8:	bl	1be14 <_start@@Base+0x7814>
   1e3ac:	mov	r9, r0
   1e3b0:	ldr	r3, [sp, #384]	; 0x180
   1e3b4:	cmp	r3, #0
   1e3b8:	beq	20ab8 <_start@@Base+0xc4b8>
   1e3bc:	mov	r1, r4
   1e3c0:	ldr	r0, [sl]
   1e3c4:	bl	27290 <flatcc_builder_extend_offset_vector@@Base>
   1e3c8:	cmp	r0, #0
   1e3cc:	beq	20ac0 <_start@@Base+0xc4c0>
   1e3d0:	ldr	r3, [sp, #384]	; 0x180
   1e3d4:	str	r3, [r0]
   1e3d8:	add	r3, sp, #388	; 0x184
   1e3dc:	mov	r2, r8
   1e3e0:	mov	r1, r9
   1e3e4:	mov	r0, sl
   1e3e8:	bl	18214 <_start@@Base+0x3c14>
   1e3ec:	mov	r9, r0
   1e3f0:	ldr	r3, [sp, #388]	; 0x184
   1e3f4:	cmp	r3, #0
   1e3f8:	bne	1e398 <_start@@Base+0x9d98>
   1e3fc:	ldr	r0, [sl]
   1e400:	bl	28b1c <flatcc_builder_end_offset_vector@@Base>
   1e404:	str	r0, [sp, #384]	; 0x180
   1e408:	cmp	r0, #0
   1e40c:	beq	20ac8 <_start@@Base+0xc4c8>
   1e410:	mov	r1, #11
   1e414:	ldr	r0, [sl]
   1e418:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1e41c:	cmp	r0, #0
   1e420:	beq	20ad0 <_start@@Base+0xc4d0>
   1e424:	ldr	r3, [sp, #384]	; 0x180
   1e428:	str	r3, [r0]
   1e42c:	b	1f6b0 <_start@@Base+0xb0b0>
   1e430:	mov	r2, r8
   1e434:	mov	r1, r4
   1e438:	mov	r0, sl
   1e43c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e440:	mov	r9, r0
   1e444:	b	1f6b0 <_start@@Base+0xb0b0>
   1e448:	add	r4, r9, #8
   1e44c:	mov	r1, r8
   1e450:	mov	r0, r4
   1e454:	bl	146f0 <_start@@Base+0xf0>
   1e458:	mov	r3, #0
   1e45c:	str	r3, [sp, #152]	; 0x98
   1e460:	lsr	r3, r1, #16
   1e464:	lsl	r3, r3, #16
   1e468:	str	r3, [sp, #156]	; 0x9c
   1e46c:	mov	r2, #0
   1e470:	mov	r3, #0
   1e474:	movt	r3, #13876	; 0x3634
   1e478:	ldrd	r0, [sp, #152]	; 0x98
   1e47c:	cmp	r1, r3
   1e480:	cmpeq	r0, r2
   1e484:	beq	1e4a0 <_start@@Base+0x9ea0>
   1e488:	mov	r2, r8
   1e48c:	mov	r1, r4
   1e490:	mov	r0, sl
   1e494:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e498:	mov	r9, r0
   1e49c:	b	1f6b0 <_start@@Base+0xb0b0>
   1e4a0:	mov	r3, #2
   1e4a4:	mov	r2, r8
   1e4a8:	mov	r1, r4
   1e4ac:	mov	r0, sl
   1e4b0:	bl	18490 <_start@@Base+0x3e90>
   1e4b4:	mov	r9, r0
   1e4b8:	cmp	r4, r0
   1e4bc:	beq	1eb18 <_start@@Base+0xa518>
   1e4c0:	mov	r3, #0
   1e4c4:	str	r3, [sp, #384]	; 0x180
   1e4c8:	mov	r1, #3
   1e4cc:	ldr	r0, [sl]
   1e4d0:	bl	27be4 <flatcc_builder_start_table@@Base>
   1e4d4:	cmp	r0, #0
   1e4d8:	beq	1e520 <_start@@Base+0x9f20>
   1e4dc:	mov	r3, #33	; 0x21
   1e4e0:	mov	r2, r8
   1e4e4:	mov	r1, r9
   1e4e8:	mov	r0, sl
   1e4ec:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1e4f0:	mov	r9, r0
   1e4f4:	ldr	r3, [sp, #384]	; 0x180
   1e4f8:	cmp	r3, #0
   1e4fc:	beq	20ad8 <_start@@Base+0xc4d8>
   1e500:	mov	r1, #35	; 0x23
   1e504:	ldr	r0, [sl]
   1e508:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1e50c:	cmp	r0, #0
   1e510:	beq	20ae0 <_start@@Base+0xc4e0>
   1e514:	ldr	r3, [sp, #384]	; 0x180
   1e518:	str	r3, [r0]
   1e51c:	b	1f6b0 <_start@@Base+0xb0b0>
   1e520:	add	r3, sp, #364	; 0x16c
   1e524:	mov	r2, r8
   1e528:	mov	r1, r9
   1e52c:	mov	r0, sl
   1e530:	bl	18650 <_start@@Base+0x4050>
   1e534:	mov	r9, r0
   1e538:	add	r5, pc, #1000	; 0x3e8
   1e53c:	ldrd	r4, [r5]
   1e540:	mov	fp, #0
   1e544:	movt	fp, #65535	; 0xffff
   1e548:	strd	r6, [sp, #240]	; 0xf0
   1e54c:	mov	r7, sl
   1e550:	strd	r4, [sp, #72]	; 0x48
   1e554:	mov	r5, fp
   1e558:	add	r3, sp, #304	; 0x130
   1e55c:	ldrd	sl, [r3]
   1e560:	b	1e688 <_start@@Base+0xa088>
   1e564:	mov	r3, #5
   1e568:	mov	r2, r8
   1e56c:	mov	r1, r9
   1e570:	mov	r0, r7
   1e574:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1e578:	mov	r9, r0
   1e57c:	b	1e6c4 <_start@@Base+0xa0c4>
   1e580:	ldrb	r0, [r9, #7]
   1e584:	mov	r1, #0
   1e588:	ldrb	r2, [r9, #6]
   1e58c:	orr	r3, r0, r2, lsl #8
   1e590:	mov	r2, r1
   1e594:	ldrb	r0, [r9, #5]
   1e598:	orr	r3, r3, r0, lsl #16
   1e59c:	ldrb	r0, [r9, #4]
   1e5a0:	orr	r3, r3, r0, lsl #24
   1e5a4:	ldrb	r0, [r9, #3]
   1e5a8:	orr	r2, r2, r0
   1e5ac:	ldrb	r0, [r9, #2]
   1e5b0:	orr	r2, r2, r0, lsl #8
   1e5b4:	ldrb	r0, [r9, #1]
   1e5b8:	orr	r2, r2, r0, lsl #16
   1e5bc:	ldrb	r0, [r9]
   1e5c0:	mov	sl, r3
   1e5c4:	orr	fp, r2, r0, lsl #24
   1e5c8:	ldrd	r2, [sp, #72]	; 0x48
   1e5cc:	cmp	fp, r3
   1e5d0:	cmpeq	sl, r2
   1e5d4:	bhi	1e7e0 <_start@@Base+0xa1e0>
   1e5d8:	mov	r3, #0
   1e5dc:	str	r3, [sp, #136]	; 0x88
   1e5e0:	str	fp, [sp, #140]	; 0x8c
   1e5e4:	ldrd	r2, [sp, #136]	; 0x88
   1e5e8:	add	r1, pc, #832	; 0x340
   1e5ec:	ldrd	r0, [r1]
   1e5f0:	cmp	r3, r1
   1e5f4:	cmpeq	r2, r0
   1e5f8:	beq	1e760 <_start@@Base+0xa160>
   1e5fc:	mov	r2, r8
   1e600:	mov	r1, r9
   1e604:	mov	r0, r7
   1e608:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e60c:	mov	r9, r0
   1e610:	sub	r3, r8, r9
   1e614:	cmp	r3, #1
   1e618:	ble	1e62c <_start@@Base+0xa02c>
   1e61c:	ldrb	r3, [r9]
   1e620:	cmp	r3, #32
   1e624:	bhi	1e640 <_start@@Base+0xa040>
   1e628:	beq	1e964 <_start@@Base+0xa364>
   1e62c:	mov	r2, r8
   1e630:	mov	r1, r9
   1e634:	mov	r0, r7
   1e638:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1e63c:	mov	r9, r0
   1e640:	cmp	r8, r9
   1e644:	moveq	r3, #0
   1e648:	streq	r3, [sp, #364]	; 0x16c
   1e64c:	beq	1e688 <_start@@Base+0xa088>
   1e650:	ldrb	r3, [r9]
   1e654:	cmp	r3, #44	; 0x2c
   1e658:	beq	1e9c4 <_start@@Base+0xa3c4>
   1e65c:	mov	r3, #0
   1e660:	str	r3, [sp, #364]	; 0x16c
   1e664:	ldrb	r3, [r9]
   1e668:	cmp	r3, #125	; 0x7d
   1e66c:	beq	1e978 <_start@@Base+0xa378>
   1e670:	mov	r3, #10
   1e674:	mov	r2, r8
   1e678:	mov	r1, r9
   1e67c:	mov	r0, r7
   1e680:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1e684:	mov	r9, r0
   1e688:	ldr	r3, [sp, #364]	; 0x16c
   1e68c:	cmp	r3, #0
   1e690:	beq	1ea6c <_start@@Base+0xa46c>
   1e694:	cmp	r8, r9
   1e698:	beq	1e6c4 <_start@@Base+0xa0c4>
   1e69c:	ldrb	r3, [r9]
   1e6a0:	cmp	r3, #34	; 0x22
   1e6a4:	addeq	r9, r9, #1
   1e6a8:	moveq	r3, #0
   1e6ac:	streq	r3, [r7, #12]
   1e6b0:	beq	1e6c4 <_start@@Base+0xa0c4>
   1e6b4:	cmp	r3, #46	; 0x2e
   1e6b8:	movne	r3, #1
   1e6bc:	strne	r3, [r7, #12]
   1e6c0:	beq	1e564 <_start@@Base+0x9f64>
   1e6c4:	sub	r3, r8, r9
   1e6c8:	cmp	r3, #8
   1e6cc:	bhi	1e580 <_start@@Base+0x9f80>
   1e6d0:	sub	r3, r3, #1
   1e6d4:	cmp	r3, #7
   1e6d8:	ldrls	pc, [pc, r3, lsl #2]
   1e6dc:	b	1e754 <_start@@Base+0xa154>
   1e6e0:	andeq	lr, r1, r8, asr #14
   1e6e4:	andeq	lr, r1, ip, lsr r7
   1e6e8:	andeq	lr, r1, r0, lsr r7
   1e6ec:	andeq	lr, r1, r4, lsr #14
   1e6f0:	andeq	lr, r1, r8, lsl r7
   1e6f4:	andeq	lr, r1, ip, lsl #14
   1e6f8:	andeq	lr, r1, r0, lsl #14
   1e6fc:	andeq	lr, r1, r0, lsl #11
   1e700:	mov	r0, #0
   1e704:	mov	r1, r0
   1e708:	b	1e588 <_start@@Base+0x9f88>
   1e70c:	mov	r3, #0
   1e710:	mov	r2, r3
   1e714:	b	1e594 <_start@@Base+0x9f94>
   1e718:	mov	r3, #0
   1e71c:	mov	r2, r3
   1e720:	b	1e59c <_start@@Base+0x9f9c>
   1e724:	mov	r3, #0
   1e728:	mov	r2, r3
   1e72c:	b	1e5a4 <_start@@Base+0x9fa4>
   1e730:	mov	r3, #0
   1e734:	mov	r2, r3
   1e738:	b	1e5ac <_start@@Base+0x9fac>
   1e73c:	mov	r3, #0
   1e740:	mov	r2, r3
   1e744:	b	1e5b4 <_start@@Base+0x9fb4>
   1e748:	mov	r3, #0
   1e74c:	mov	r2, r3
   1e750:	b	1e5bc <_start@@Base+0x9fbc>
   1e754:	mov	sl, #0
   1e758:	mov	fp, #0
   1e75c:	b	1e5c8 <_start@@Base+0x9fc8>
   1e760:	mov	r3, #4
   1e764:	mov	r2, r8
   1e768:	mov	r1, r9
   1e76c:	mov	r0, r7
   1e770:	bl	18490 <_start@@Base+0x3e90>
   1e774:	cmp	r0, r9
   1e778:	beq	1e7c8 <_start@@Base+0xa1c8>
   1e77c:	mov	r3, #0
   1e780:	str	r3, [sp]
   1e784:	add	r3, sp, #368	; 0x170
   1e788:	mov	r2, r8
   1e78c:	mov	r1, r0
   1e790:	mov	r0, r7
   1e794:	bl	2f2e8 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1e798:	mov	r9, r0
   1e79c:	ldr	r3, [sp, #368]	; 0x170
   1e7a0:	cmp	r3, #0
   1e7a4:	beq	1eaa0 <_start@@Base+0xa4a0>
   1e7a8:	mov	r1, #0
   1e7ac:	ldr	r0, [r7]
   1e7b0:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1e7b4:	cmp	r0, #0
   1e7b8:	beq	1eab4 <_start@@Base+0xa4b4>
   1e7bc:	ldr	r3, [sp, #368]	; 0x170
   1e7c0:	str	r3, [r0]
   1e7c4:	b	1e610 <_start@@Base+0xa010>
   1e7c8:	mov	r2, r8
   1e7cc:	mov	r1, r9
   1e7d0:	mov	r0, r7
   1e7d4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7d8:	mov	r9, r0
   1e7dc:	b	1e610 <_start@@Base+0xa010>
   1e7e0:	bic	r3, sl, #255	; 0xff
   1e7e4:	str	r3, [sp, #144]	; 0x90
   1e7e8:	str	fp, [sp, #148]	; 0x94
   1e7ec:	ldrd	r2, [sp, #144]	; 0x90
   1e7f0:	add	r1, pc, #320	; 0x140
   1e7f4:	ldrd	r0, [r1]
   1e7f8:	cmp	r3, r1
   1e7fc:	cmpeq	r2, r0
   1e800:	beq	1e840 <_start@@Base+0xa240>
   1e804:	and	r3, sl, r5
   1e808:	str	r3, [sp, #192]	; 0xc0
   1e80c:	str	fp, [sp, #196]	; 0xc4
   1e810:	ldrd	r2, [sp, #192]	; 0xc0
   1e814:	add	r1, pc, #292	; 0x124
   1e818:	ldrd	r0, [r1]
   1e81c:	cmp	r3, r1
   1e820:	cmpeq	r2, r0
   1e824:	beq	1e8c0 <_start@@Base+0xa2c0>
   1e828:	mov	r2, r8
   1e82c:	mov	r1, r9
   1e830:	mov	r0, r7
   1e834:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e838:	mov	r9, r0
   1e83c:	b	1e610 <_start@@Base+0xa010>
   1e840:	mov	r3, #7
   1e844:	mov	r2, r8
   1e848:	mov	r1, r9
   1e84c:	mov	r0, r7
   1e850:	bl	18490 <_start@@Base+0x3e90>
   1e854:	cmp	r0, r9
   1e858:	beq	1e8a8 <_start@@Base+0xa2a8>
   1e85c:	mov	r3, #1
   1e860:	str	r3, [sp]
   1e864:	add	r3, sp, #368	; 0x170
   1e868:	mov	r2, r8
   1e86c:	mov	r1, r0
   1e870:	mov	r0, r7
   1e874:	bl	2f2e8 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1e878:	mov	r9, r0
   1e87c:	ldr	r3, [sp, #368]	; 0x170
   1e880:	cmp	r3, #0
   1e884:	beq	1eac8 <_start@@Base+0xa4c8>
   1e888:	mov	r1, #1
   1e88c:	ldr	r0, [r7]
   1e890:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1e894:	cmp	r0, #0
   1e898:	beq	1eadc <_start@@Base+0xa4dc>
   1e89c:	ldr	r3, [sp, #368]	; 0x170
   1e8a0:	str	r3, [r0]
   1e8a4:	b	1e610 <_start@@Base+0xa010>
   1e8a8:	mov	r2, r8
   1e8ac:	mov	r1, r9
   1e8b0:	mov	r0, r7
   1e8b4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e8b8:	mov	r9, r0
   1e8bc:	b	1e610 <_start@@Base+0xa010>
   1e8c0:	mov	r3, #6
   1e8c4:	mov	r2, r8
   1e8c8:	mov	r1, r9
   1e8cc:	mov	r0, r7
   1e8d0:	bl	18490 <_start@@Base+0x3e90>
   1e8d4:	cmp	r0, r9
   1e8d8:	beq	1e94c <_start@@Base+0xa34c>
   1e8dc:	mov	r3, #0
   1e8e0:	str	r3, [sp]
   1e8e4:	add	r3, sp, #368	; 0x170
   1e8e8:	mov	r2, r8
   1e8ec:	mov	r1, r0
   1e8f0:	mov	r0, r7
   1e8f4:	bl	2f2e8 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1e8f8:	mov	r9, r0
   1e8fc:	ldr	r3, [sp, #368]	; 0x170
   1e900:	cmp	r3, #0
   1e904:	beq	1eaf0 <_start@@Base+0xa4f0>
   1e908:	mov	r1, #2
   1e90c:	ldr	r0, [r7]
   1e910:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1e914:	cmp	r0, #0
   1e918:	beq	1eb04 <_start@@Base+0xa504>
   1e91c:	ldr	r3, [sp, #368]	; 0x170
   1e920:	str	r3, [r0]
   1e924:	b	1e610 <_start@@Base+0xa010>
   1e928:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1e92c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1e930:	andeq	r0, r0, r0
   1e934:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1e938:	cmnvs	r4, r0, lsl #2
   1e93c:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1e940:	strbvs	r0, [r4, #-0]!
   1e944:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1e948:			; <UNDEFINED> instruction: 0x000551b0
   1e94c:	mov	r2, r8
   1e950:	mov	r1, r9
   1e954:	mov	r0, r7
   1e958:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1e95c:	mov	r9, r0
   1e960:	b	1e610 <_start@@Base+0xa010>
   1e964:	ldrb	r3, [r9, #1]
   1e968:	cmp	r3, #32
   1e96c:	addhi	r9, r9, #1
   1e970:	bls	1e62c <_start@@Base+0xa02c>
   1e974:	b	1e640 <_start@@Base+0xa040>
   1e978:	add	r1, r9, #1
   1e97c:	sub	r3, r8, r1
   1e980:	cmp	r3, #1
   1e984:	ble	1e99c <_start@@Base+0xa39c>
   1e988:	ldrb	r3, [r9, #1]
   1e98c:	cmp	r3, #32
   1e990:	movhi	r9, r1
   1e994:	bhi	1e688 <_start@@Base+0xa088>
   1e998:	beq	1e9b0 <_start@@Base+0xa3b0>
   1e99c:	mov	r2, r8
   1e9a0:	mov	r0, r7
   1e9a4:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1e9a8:	mov	r9, r0
   1e9ac:	b	1e688 <_start@@Base+0xa088>
   1e9b0:	ldrb	r3, [r9, #2]
   1e9b4:	cmp	r3, #32
   1e9b8:	addhi	r9, r9, #2
   1e9bc:	bls	1e99c <_start@@Base+0xa39c>
   1e9c0:	b	1e688 <_start@@Base+0xa088>
   1e9c4:	add	r1, r9, #1
   1e9c8:	sub	r3, r8, r1
   1e9cc:	cmp	r3, #1
   1e9d0:	ble	1e9e8 <_start@@Base+0xa3e8>
   1e9d4:	ldrb	r3, [r9, #1]
   1e9d8:	cmp	r3, #32
   1e9dc:	movhi	r9, r1
   1e9e0:	bhi	1e9f8 <_start@@Base+0xa3f8>
   1e9e4:	beq	1ea34 <_start@@Base+0xa434>
   1e9e8:	mov	r2, r8
   1e9ec:	mov	r0, r7
   1e9f0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1e9f4:	mov	r9, r0
   1e9f8:	cmp	r8, r9
   1e9fc:	beq	1ea48 <_start@@Base+0xa448>
   1ea00:	ldrb	r3, [r9]
   1ea04:	cmp	r3, #125	; 0x7d
   1ea08:	movne	r3, #1
   1ea0c:	strne	r3, [sp, #364]	; 0x16c
   1ea10:	bne	1e688 <_start@@Base+0xa088>
   1ea14:	mov	r3, #0
   1ea18:	str	r3, [sp, #364]	; 0x16c
   1ea1c:	mov	r2, r8
   1ea20:	add	r1, r9, #1
   1ea24:	mov	r0, r7
   1ea28:	bl	1809c <_start@@Base+0x3a9c>
   1ea2c:	mov	r9, r0
   1ea30:	b	1e688 <_start@@Base+0xa088>
   1ea34:	ldrb	r3, [r9, #2]
   1ea38:	cmp	r3, #32
   1ea3c:	addhi	r9, r9, #2
   1ea40:	bls	1e9e8 <_start@@Base+0xa3e8>
   1ea44:	b	1e9f8 <_start@@Base+0xa3f8>
   1ea48:	mov	r3, #0
   1ea4c:	str	r3, [sp, #364]	; 0x16c
   1ea50:	mov	r3, #10
   1ea54:	mov	r2, r8
   1ea58:	mov	r1, r9
   1ea5c:	mov	r0, r7
   1ea60:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ea64:	mov	r9, r0
   1ea68:	b	1e688 <_start@@Base+0xa088>
   1ea6c:	add	r3, sp, #304	; 0x130
   1ea70:	strd	sl, [r3]
   1ea74:	mov	sl, r7
   1ea78:	ldrd	r6, [sp, #240]	; 0xf0
   1ea7c:	ldr	r3, [sl, #24]
   1ea80:	cmp	r3, #0
   1ea84:	bne	1e4dc <_start@@Base+0x9edc>
   1ea88:	ldr	r0, [sl]
   1ea8c:	bl	286bc <flatcc_builder_end_table@@Base>
   1ea90:	str	r0, [sp, #384]	; 0x180
   1ea94:	cmp	r0, #0
   1ea98:	bne	1e4f4 <_start@@Base+0x9ef4>
   1ea9c:	b	1e4dc <_start@@Base+0x9edc>
   1eaa0:	add	r3, sp, #304	; 0x130
   1eaa4:	strd	sl, [r3]
   1eaa8:	mov	sl, r7
   1eaac:	ldrd	r6, [sp, #240]	; 0xf0
   1eab0:	b	1e4dc <_start@@Base+0x9edc>
   1eab4:	add	r3, sp, #304	; 0x130
   1eab8:	strd	sl, [r3]
   1eabc:	mov	sl, r7
   1eac0:	ldrd	r6, [sp, #240]	; 0xf0
   1eac4:	b	1e4dc <_start@@Base+0x9edc>
   1eac8:	add	r3, sp, #304	; 0x130
   1eacc:	strd	sl, [r3]
   1ead0:	mov	sl, r7
   1ead4:	ldrd	r6, [sp, #240]	; 0xf0
   1ead8:	b	1e4dc <_start@@Base+0x9edc>
   1eadc:	add	r3, sp, #304	; 0x130
   1eae0:	strd	sl, [r3]
   1eae4:	mov	sl, r7
   1eae8:	ldrd	r6, [sp, #240]	; 0xf0
   1eaec:	b	1e4dc <_start@@Base+0x9edc>
   1eaf0:	add	r3, sp, #304	; 0x130
   1eaf4:	strd	sl, [r3]
   1eaf8:	mov	sl, r7
   1eafc:	ldrd	r6, [sp, #240]	; 0xf0
   1eb00:	b	1e4dc <_start@@Base+0x9edc>
   1eb04:	add	r3, sp, #304	; 0x130
   1eb08:	strd	sl, [r3]
   1eb0c:	mov	sl, r7
   1eb10:	ldrd	r6, [sp, #240]	; 0xf0
   1eb14:	b	1e4dc <_start@@Base+0x9edc>
   1eb18:	mov	r2, r8
   1eb1c:	mov	r1, r0
   1eb20:	mov	r0, sl
   1eb24:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1eb28:	mov	r9, r0
   1eb2c:	b	1f6b0 <_start@@Base+0xb0b0>
   1eb30:	mov	r3, #8
   1eb34:	mov	r2, r8
   1eb38:	mov	r1, r9
   1eb3c:	mov	r0, sl
   1eb40:	bl	18490 <_start@@Base+0x3e90>
   1eb44:	mov	r4, r0
   1eb48:	cmp	r0, r9
   1eb4c:	beq	1ebf4 <_start@@Base+0xa5f4>
   1eb50:	mov	r3, #0
   1eb54:	strb	r3, [sp, #368]	; 0x170
   1eb58:	add	r3, sp, #368	; 0x170
   1eb5c:	mov	r2, r8
   1eb60:	mov	r1, r0
   1eb64:	mov	r0, sl
   1eb68:	bl	1833c <_start@@Base+0x3d3c>
   1eb6c:	mov	r9, r0
   1eb70:	cmp	r4, r0
   1eb74:	beq	1ebb8 <_start@@Base+0xa5b8>
   1eb78:	ldrb	r3, [sp, #368]	; 0x170
   1eb7c:	cmp	r3, #1
   1eb80:	bne	1eb90 <_start@@Base+0xa590>
   1eb84:	ldr	r3, [sl, #8]
   1eb88:	tst	r3, #2
   1eb8c:	beq	1f6b0 <_start@@Base+0xb0b0>
   1eb90:	mov	r3, #1
   1eb94:	mov	r2, r3
   1eb98:	mov	r1, #15
   1eb9c:	ldr	r0, [sl]
   1eba0:	bl	297a8 <flatcc_builder_table_add@@Base>
   1eba4:	cmp	r0, #0
   1eba8:	beq	20ae8 <_start@@Base+0xc4e8>
   1ebac:	ldrb	r3, [sp, #368]	; 0x170
   1ebb0:	strb	r3, [r0]
   1ebb4:	b	1f6b0 <_start@@Base+0xb0b0>
   1ebb8:	add	r3, sp, #368	; 0x170
   1ebbc:	str	r3, [sp]
   1ebc0:	ldr	r3, [pc, #-640]	; 1e948 <_start@@Base+0xa348>
   1ebc4:	mov	r2, r8
   1ebc8:	mov	r1, r0
   1ebcc:	mov	r0, sl
   1ebd0:	bl	19478 <_start@@Base+0x4e78>
   1ebd4:	cmp	r8, r0
   1ebd8:	cmpne	r9, r0
   1ebdc:	beq	1ebe8 <_start@@Base+0xa5e8>
   1ebe0:	mov	r9, r0
   1ebe4:	b	1eb78 <_start@@Base+0xa578>
   1ebe8:	mov	fp, sl
   1ebec:	mov	r9, r0
   1ebf0:	b	1be60 <_start@@Base+0x7860>
   1ebf4:	mov	r2, r8
   1ebf8:	mov	r1, r9
   1ebfc:	mov	r0, sl
   1ec00:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1ec04:	mov	r9, r0
   1ec08:	b	1f6b0 <_start@@Base+0xb0b0>
   1ec0c:	add	r3, pc, #988	; 0x3dc
   1ec10:	ldrd	r2, [r3]
   1ec14:	cmp	r1, r3
   1ec18:	cmpeq	r0, r2
   1ec1c:	bhi	1f458 <_start@@Base+0xae58>
   1ec20:	add	r3, pc, #976	; 0x3d0
   1ec24:	ldrd	r2, [r3]
   1ec28:	cmp	r1, r3
   1ec2c:	cmpeq	r0, r2
   1ec30:	bne	1f440 <_start@@Base+0xae40>
   1ec34:	add	r4, r9, #8
   1ec38:	mov	r1, r8
   1ec3c:	mov	r0, r4
   1ec40:	bl	146f0 <_start@@Base+0xf0>
   1ec44:	mov	r3, #0
   1ec48:	str	r3, [sp, #216]	; 0xd8
   1ec4c:	and	r3, r1, #-16777216	; 0xff000000
   1ec50:	str	r3, [sp, #220]	; 0xdc
   1ec54:	ldrd	r2, [sp, #216]	; 0xd8
   1ec58:	cmp	r3, #2030043136	; 0x79000000
   1ec5c:	cmpeq	r2, #0
   1ec60:	beq	1ec7c <_start@@Base+0xa67c>
   1ec64:	mov	r2, r8
   1ec68:	mov	r1, r4
   1ec6c:	mov	r0, sl
   1ec70:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1ec74:	mov	r9, r0
   1ec78:	b	1f6b0 <_start@@Base+0xb0b0>
   1ec7c:	mov	r3, #1
   1ec80:	mov	r2, r8
   1ec84:	mov	r1, r4
   1ec88:	mov	r0, sl
   1ec8c:	bl	18490 <_start@@Base+0x3e90>
   1ec90:	mov	r9, r0
   1ec94:	cmp	r4, r0
   1ec98:	beq	1f428 <_start@@Base+0xae28>
   1ec9c:	mov	r3, #0
   1eca0:	str	r3, [sp, #384]	; 0x180
   1eca4:	mov	r1, #3
   1eca8:	ldr	r0, [sl]
   1ecac:	bl	27be4 <flatcc_builder_start_table@@Base>
   1ecb0:	cmp	r0, #0
   1ecb4:	beq	1ecfc <_start@@Base+0xa6fc>
   1ecb8:	mov	r3, #33	; 0x21
   1ecbc:	mov	r2, r8
   1ecc0:	mov	r1, r9
   1ecc4:	mov	r0, sl
   1ecc8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1eccc:	mov	r9, r0
   1ecd0:	ldr	r3, [sp, #384]	; 0x180
   1ecd4:	cmp	r3, #0
   1ecd8:	beq	20af0 <_start@@Base+0xc4f0>
   1ecdc:	mov	r1, #14
   1ece0:	ldr	r0, [sl]
   1ece4:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1ece8:	cmp	r0, #0
   1ecec:	beq	20af8 <_start@@Base+0xc4f8>
   1ecf0:	ldr	r3, [sp, #384]	; 0x180
   1ecf4:	str	r3, [r0]
   1ecf8:	b	1f6b0 <_start@@Base+0xb0b0>
   1ecfc:	add	r3, sp, #356	; 0x164
   1ed00:	mov	r2, r8
   1ed04:	mov	r1, r9
   1ed08:	mov	r0, sl
   1ed0c:	bl	18650 <_start@@Base+0x4050>
   1ed10:	mov	r9, r0
   1ed14:	mvn	r4, #0
   1ed18:	movw	r5, #65535	; 0xffff
   1ed1c:	movt	r5, #26979	; 0x6963
   1ed20:	movw	r3, #20592	; 0x5070
   1ed24:	movt	r3, #5
   1ed28:	str	r3, [sp, #240]	; 0xf0
   1ed2c:	add	r3, r3, #344	; 0x158
   1ed30:	str	r3, [sp, #344]	; 0x158
   1ed34:	strd	r6, [sp, #72]	; 0x48
   1ed38:	b	1ee64 <_start@@Base+0xa864>
   1ed3c:	mov	r3, #5
   1ed40:	mov	r2, r8
   1ed44:	mov	r1, r9
   1ed48:	mov	r0, sl
   1ed4c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ed50:	mov	r9, r0
   1ed54:	b	1eea0 <_start@@Base+0xa8a0>
   1ed58:	ldrb	r0, [r9, #7]
   1ed5c:	mov	r1, #0
   1ed60:	ldrb	r2, [r9, #6]
   1ed64:	orr	r3, r0, r2, lsl #8
   1ed68:	mov	r2, r1
   1ed6c:	ldrb	r0, [r9, #5]
   1ed70:	orr	r3, r3, r0, lsl #16
   1ed74:	ldrb	r0, [r9, #4]
   1ed78:	orr	r3, r3, r0, lsl #24
   1ed7c:	ldrb	r0, [r9, #3]
   1ed80:	orr	r2, r2, r0
   1ed84:	ldrb	r0, [r9, #2]
   1ed88:	orr	r2, r2, r0, lsl #8
   1ed8c:	ldrb	r0, [r9, #1]
   1ed90:	orr	r2, r2, r0, lsl #16
   1ed94:	ldrb	r0, [r9]
   1ed98:	str	r3, [sp, #56]	; 0x38
   1ed9c:	orr	r3, r2, r0, lsl #24
   1eda0:	str	r3, [sp, #60]	; 0x3c
   1eda4:	ldrd	r2, [sp, #56]	; 0x38
   1eda8:	cmp	r3, r5
   1edac:	cmpeq	r2, r4
   1edb0:	bhi	1f0f8 <_start@@Base+0xaaf8>
   1edb4:	and	r1, r2, #-16777216	; 0xff000000
   1edb8:	str	r1, [sp, #160]	; 0xa0
   1edbc:	str	r3, [sp, #164]	; 0xa4
   1edc0:	ldrd	r2, [sp, #160]	; 0xa0
   1edc4:	add	r1, pc, #564	; 0x234
   1edc8:	ldrd	r0, [r1]
   1edcc:	cmp	r3, r1
   1edd0:	cmpeq	r2, r0
   1edd4:	beq	1ef40 <_start@@Base+0xa940>
   1edd8:	mov	r2, r8
   1eddc:	mov	r1, r9
   1ede0:	mov	r0, sl
   1ede4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1ede8:	mov	r9, r0
   1edec:	sub	r3, r8, r9
   1edf0:	cmp	r3, #1
   1edf4:	ble	1ee08 <_start@@Base+0xa808>
   1edf8:	ldrb	r3, [r9]
   1edfc:	cmp	r3, #32
   1ee00:	bhi	1ee1c <_start@@Base+0xa81c>
   1ee04:	beq	1f2e0 <_start@@Base+0xace0>
   1ee08:	mov	r2, r8
   1ee0c:	mov	r1, r9
   1ee10:	mov	r0, sl
   1ee14:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1ee18:	mov	r9, r0
   1ee1c:	cmp	r8, r9
   1ee20:	moveq	r3, #0
   1ee24:	streq	r3, [sp, #356]	; 0x164
   1ee28:	beq	1ee64 <_start@@Base+0xa864>
   1ee2c:	ldrb	r3, [r9]
   1ee30:	cmp	r3, #44	; 0x2c
   1ee34:	beq	1f340 <_start@@Base+0xad40>
   1ee38:	mov	r3, #0
   1ee3c:	str	r3, [sp, #356]	; 0x164
   1ee40:	ldrb	r3, [r9]
   1ee44:	cmp	r3, #125	; 0x7d
   1ee48:	beq	1f2f4 <_start@@Base+0xacf4>
   1ee4c:	mov	r3, #10
   1ee50:	mov	r2, r8
   1ee54:	mov	r1, r9
   1ee58:	mov	r0, sl
   1ee5c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1ee60:	mov	r9, r0
   1ee64:	ldr	r3, [sp, #356]	; 0x164
   1ee68:	cmp	r3, #0
   1ee6c:	beq	1f3e8 <_start@@Base+0xade8>
   1ee70:	cmp	r8, r9
   1ee74:	beq	1eea0 <_start@@Base+0xa8a0>
   1ee78:	ldrb	r3, [r9]
   1ee7c:	cmp	r3, #34	; 0x22
   1ee80:	addeq	r9, r9, #1
   1ee84:	moveq	r3, #0
   1ee88:	streq	r3, [sl, #12]
   1ee8c:	beq	1eea0 <_start@@Base+0xa8a0>
   1ee90:	cmp	r3, #46	; 0x2e
   1ee94:	movne	r3, #1
   1ee98:	strne	r3, [sl, #12]
   1ee9c:	beq	1ed3c <_start@@Base+0xa73c>
   1eea0:	sub	r3, r8, r9
   1eea4:	cmp	r3, #8
   1eea8:	bhi	1ed58 <_start@@Base+0xa758>
   1eeac:	sub	r3, r3, #1
   1eeb0:	cmp	r3, #7
   1eeb4:	ldrls	pc, [pc, r3, lsl #2]
   1eeb8:	b	1ef30 <_start@@Base+0xa930>
   1eebc:	andeq	lr, r1, r4, lsr #30
   1eec0:	andeq	lr, r1, r8, lsl pc
   1eec4:	andeq	lr, r1, ip, lsl #30
   1eec8:	andeq	lr, r1, r0, lsl #30
   1eecc:	strdeq	lr, [r1], -r4
   1eed0:	andeq	lr, r1, r8, ror #29
   1eed4:	ldrdeq	lr, [r1], -ip
   1eed8:	andeq	lr, r1, r8, asr sp
   1eedc:	mov	r0, #0
   1eee0:	mov	r1, #0
   1eee4:	b	1ed60 <_start@@Base+0xa760>
   1eee8:	mov	r3, #0
   1eeec:	mov	r2, r3
   1eef0:	b	1ed6c <_start@@Base+0xa76c>
   1eef4:	mov	r3, #0
   1eef8:	mov	r2, r3
   1eefc:	b	1ed74 <_start@@Base+0xa774>
   1ef00:	mov	r3, #0
   1ef04:	mov	r2, r3
   1ef08:	b	1ed7c <_start@@Base+0xa77c>
   1ef0c:	mov	r3, #0
   1ef10:	mov	r2, r3
   1ef14:	b	1ed84 <_start@@Base+0xa784>
   1ef18:	mov	r3, #0
   1ef1c:	mov	r2, r3
   1ef20:	b	1ed8c <_start@@Base+0xa78c>
   1ef24:	mov	r3, #0
   1ef28:	mov	r2, r3
   1ef2c:	b	1ed94 <_start@@Base+0xa794>
   1ef30:	mov	r2, #0
   1ef34:	mov	r3, #0
   1ef38:	strd	r2, [sp, #56]	; 0x38
   1ef3c:	b	1eda4 <_start@@Base+0xa7a4>
   1ef40:	mov	r3, #5
   1ef44:	mov	r2, r8
   1ef48:	mov	r1, r9
   1ef4c:	mov	r0, sl
   1ef50:	bl	18490 <_start@@Base+0x3e90>
   1ef54:	mov	fp, r0
   1ef58:	cmp	r0, r9
   1ef5c:	beq	1f0e0 <_start@@Base+0xaae0>
   1ef60:	mov	r3, #0
   1ef64:	add	r2, sp, #352	; 0x160
   1ef68:	add	r2, r2, #2
   1ef6c:	strh	r3, [r2]
   1ef70:	mov	r0, #0
   1ef74:	mov	r1, #0
   1ef78:	add	r2, sp, #368	; 0x170
   1ef7c:	strd	r0, [r2]
   1ef80:	str	r3, [sp, #364]	; 0x16c
   1ef84:	cmp	r8, fp
   1ef88:	beq	20b98 <_start@@Base+0xc598>
   1ef8c:	str	r2, [sp]
   1ef90:	add	r3, sp, #364	; 0x16c
   1ef94:	mov	r2, r8
   1ef98:	mov	r1, fp
   1ef9c:	mov	r0, sl
   1efa0:	bl	2f170 <flatcc_json_parser_integer@@Base>
   1efa4:	mov	r7, r0
   1efa8:	cmp	fp, r0
   1efac:	bne	1f010 <_start@@Base+0xaa10>
   1efb0:	add	r3, sp, #352	; 0x160
   1efb4:	add	r3, r3, #2
   1efb8:	str	r3, [sp]
   1efbc:	ldr	r3, [sp, #240]	; 0xf0
   1efc0:	add	r3, r3, #332	; 0x14c
   1efc4:	mov	r2, r8
   1efc8:	mov	r1, r7
   1efcc:	mov	r0, sl
   1efd0:	bl	1a8a0 <_start@@Base+0x62a0>
   1efd4:	mov	r9, r0
   1efd8:	cmp	r8, r0
   1efdc:	cmpne	r0, r7
   1efe0:	bne	1f06c <_start@@Base+0xaa6c>
   1efe4:	ldrd	r6, [sp, #72]	; 0x48
   1efe8:	b	1ecb8 <_start@@Base+0xa6b8>
   1efec:	nop	{0}
   1eff0:	ldrbvs	pc, [pc, #4095]!	; 1fff7 <_start@@Base+0xb9f7>	; <UNPREDICTABLE>
   1eff4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1eff8:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1effc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f000:	strvc	r0, [r0], #-0
   1f004:	cmnvs	pc, #461373440	; 0x1b800000
   1f008:	andeq	r0, r0, r0
   1f00c:	strbtvc	r6, [r1], -r0, lsl #24
   1f010:	ldr	r3, [sp, #364]	; 0x16c
   1f014:	cmp	r3, #0
   1f018:	bne	1f04c <_start@@Base+0xaa4c>
   1f01c:	add	r3, sp, #368	; 0x170
   1f020:	ldrd	r2, [r3]
   1f024:	movw	r0, #65535	; 0xffff
   1f028:	mov	r1, #0
   1f02c:	cmp	r3, r1
   1f030:	cmpeq	r2, r0
   1f034:	bhi	1f0bc <_start@@Base+0xaabc>
   1f038:	add	r1, sp, #352	; 0x160
   1f03c:	add	r1, r1, #2
   1f040:	strh	r2, [r1]
   1f044:	mov	r9, r7
   1f048:	b	1f06c <_start@@Base+0xaa6c>
   1f04c:	mov	r3, #8
   1f050:	mov	r2, r8
   1f054:	mov	r1, r0
   1f058:	mov	r0, sl
   1f05c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1f060:	mov	r9, r0
   1f064:	cmp	fp, r9
   1f068:	beq	1f0d8 <_start@@Base+0xaad8>
   1f06c:	add	r3, sp, #352	; 0x160
   1f070:	add	r3, r3, #2
   1f074:	ldrh	r3, [r3]
   1f078:	cmp	r3, #0
   1f07c:	bne	1f08c <_start@@Base+0xaa8c>
   1f080:	ldr	r3, [sl, #8]
   1f084:	tst	r3, #2
   1f088:	beq	1edec <_start@@Base+0xa7ec>
   1f08c:	mov	r3, #2
   1f090:	mov	r2, r3
   1f094:	mov	r1, r3
   1f098:	ldr	r0, [sl]
   1f09c:	bl	297a8 <flatcc_builder_table_add@@Base>
   1f0a0:	cmp	r0, #0
   1f0a4:	beq	1f410 <_start@@Base+0xae10>
   1f0a8:	add	r3, sp, #352	; 0x160
   1f0ac:	add	r3, r3, #2
   1f0b0:	ldrh	r3, [r3]
   1f0b4:	strh	r3, [r0]
   1f0b8:	b	1edec <_start@@Base+0xa7ec>
   1f0bc:	mov	r3, #7
   1f0c0:	mov	r2, r8
   1f0c4:	mov	r1, r7
   1f0c8:	mov	r0, sl
   1f0cc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1f0d0:	mov	r9, r0
   1f0d4:	b	1f064 <_start@@Base+0xaa64>
   1f0d8:	mov	r7, r9
   1f0dc:	b	1efb0 <_start@@Base+0xa9b0>
   1f0e0:	mov	r2, r8
   1f0e4:	mov	r1, r9
   1f0e8:	mov	r0, sl
   1f0ec:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f0f0:	mov	r9, r0
   1f0f4:	b	1edec <_start@@Base+0xa7ec>
   1f0f8:	mov	r3, #0
   1f0fc:	str	r3, [sp, #168]	; 0xa8
   1f100:	ldr	r3, [sp, #60]	; 0x3c
   1f104:	bic	r3, r3, #255	; 0xff
   1f108:	str	r3, [sp, #172]	; 0xac
   1f10c:	ldrd	r2, [sp, #168]	; 0xa8
   1f110:	sub	r1, pc, #272	; 0x110
   1f114:	ldrd	r0, [r1]
   1f118:	cmp	r3, r1
   1f11c:	cmpeq	r2, r0
   1f120:	beq	1f170 <_start@@Base+0xab70>
   1f124:	mov	r3, #0
   1f128:	str	r3, [sp, #112]	; 0x70
   1f12c:	ldr	r3, [sp, #60]	; 0x3c
   1f130:	lsr	r3, r3, #16
   1f134:	lsl	r3, r3, #16
   1f138:	str	r3, [sp, #116]	; 0x74
   1f13c:	ldrd	r2, [sp, #112]	; 0x70
   1f140:	mov	r0, #0
   1f144:	mov	r1, #0
   1f148:	movt	r1, #26980	; 0x6964
   1f14c:	cmp	r3, r1
   1f150:	cmpeq	r2, r0
   1f154:	beq	1f268 <_start@@Base+0xac68>
   1f158:	mov	r2, r8
   1f15c:	mov	r1, r9
   1f160:	mov	r0, sl
   1f164:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f168:	mov	r9, r0
   1f16c:	b	1edec <_start@@Base+0xa7ec>
   1f170:	mov	r3, #3
   1f174:	mov	r2, r8
   1f178:	mov	r1, r9
   1f17c:	mov	r0, sl
   1f180:	bl	18490 <_start@@Base+0x3e90>
   1f184:	mov	fp, r0
   1f188:	cmp	r0, r9
   1f18c:	beq	1f250 <_start@@Base+0xac50>
   1f190:	mov	r2, #0
   1f194:	mov	r3, #0
   1f198:	add	r1, sp, #368	; 0x170
   1f19c:	strd	r2, [r1]
   1f1a0:	mov	r3, r1
   1f1a4:	mov	r2, r8
   1f1a8:	mov	r1, r0
   1f1ac:	mov	r0, sl
   1f1b0:	bl	17fc0 <_start@@Base+0x39c0>
   1f1b4:	mov	r9, r0
   1f1b8:	cmp	fp, r0
   1f1bc:	beq	1f208 <_start@@Base+0xac08>
   1f1c0:	add	r3, sp, #368	; 0x170
   1f1c4:	ldrd	r2, [r3]
   1f1c8:	orrs	r3, r2, r3
   1f1cc:	bne	1f1dc <_start@@Base+0xabdc>
   1f1d0:	ldr	r3, [sl, #8]
   1f1d4:	tst	r3, #2
   1f1d8:	beq	1edec <_start@@Base+0xa7ec>
   1f1dc:	mov	r3, #8
   1f1e0:	mov	r2, r3
   1f1e4:	mov	r1, #1
   1f1e8:	ldr	r0, [sl]
   1f1ec:	bl	297a8 <flatcc_builder_table_add@@Base>
   1f1f0:	cmp	r0, #0
   1f1f4:	beq	1f238 <_start@@Base+0xac38>
   1f1f8:	add	r3, sp, #368	; 0x170
   1f1fc:	ldrd	r2, [r3]
   1f200:	strd	r2, [r0]
   1f204:	b	1edec <_start@@Base+0xa7ec>
   1f208:	add	r3, sp, #368	; 0x170
   1f20c:	str	r3, [sp]
   1f210:	ldr	r3, [sp, #344]	; 0x158
   1f214:	mov	r2, r8
   1f218:	mov	r1, r0
   1f21c:	mov	r0, sl
   1f220:	bl	1b5dc <_start@@Base+0x6fdc>
   1f224:	cmp	r8, r0
   1f228:	cmpne	r9, r0
   1f22c:	beq	1f248 <_start@@Base+0xac48>
   1f230:	mov	r9, r0
   1f234:	b	1f1c0 <_start@@Base+0xabc0>
   1f238:	ldrd	r6, [sp, #72]	; 0x48
   1f23c:	mov	r0, r9
   1f240:	mov	r9, r0
   1f244:	b	1ecb8 <_start@@Base+0xa6b8>
   1f248:	ldrd	r6, [sp, #72]	; 0x48
   1f24c:	b	1f240 <_start@@Base+0xac40>
   1f250:	mov	r2, r8
   1f254:	mov	r1, r9
   1f258:	mov	r0, sl
   1f25c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f260:	mov	r9, r0
   1f264:	b	1edec <_start@@Base+0xa7ec>
   1f268:	mov	r3, #2
   1f26c:	mov	r2, r8
   1f270:	mov	r1, r9
   1f274:	mov	r0, sl
   1f278:	bl	18490 <_start@@Base+0x3e90>
   1f27c:	cmp	r0, r9
   1f280:	beq	1f2c8 <_start@@Base+0xacc8>
   1f284:	add	r3, sp, #360	; 0x168
   1f288:	mov	r2, r8
   1f28c:	mov	r1, r0
   1f290:	mov	r0, sl
   1f294:	bl	2f708 <flatcc_json_parser_build_string@@Base>
   1f298:	mov	r9, r0
   1f29c:	ldr	r3, [sp, #360]	; 0x168
   1f2a0:	cmp	r3, #0
   1f2a4:	beq	1f418 <_start@@Base+0xae18>
   1f2a8:	mov	r1, #0
   1f2ac:	ldr	r0, [sl]
   1f2b0:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   1f2b4:	cmp	r0, #0
   1f2b8:	beq	1f420 <_start@@Base+0xae20>
   1f2bc:	ldr	r3, [sp, #360]	; 0x168
   1f2c0:	str	r3, [r0]
   1f2c4:	b	1edec <_start@@Base+0xa7ec>
   1f2c8:	mov	r2, r8
   1f2cc:	mov	r1, r9
   1f2d0:	mov	r0, sl
   1f2d4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f2d8:	mov	r9, r0
   1f2dc:	b	1edec <_start@@Base+0xa7ec>
   1f2e0:	ldrb	r3, [r9, #1]
   1f2e4:	cmp	r3, #32
   1f2e8:	addhi	r9, r9, #1
   1f2ec:	bls	1ee08 <_start@@Base+0xa808>
   1f2f0:	b	1ee1c <_start@@Base+0xa81c>
   1f2f4:	add	r1, r9, #1
   1f2f8:	sub	r3, r8, r1
   1f2fc:	cmp	r3, #1
   1f300:	ble	1f318 <_start@@Base+0xad18>
   1f304:	ldrb	r3, [r9, #1]
   1f308:	cmp	r3, #32
   1f30c:	movhi	r9, r1
   1f310:	bhi	1ee64 <_start@@Base+0xa864>
   1f314:	beq	1f32c <_start@@Base+0xad2c>
   1f318:	mov	r2, r8
   1f31c:	mov	r0, sl
   1f320:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1f324:	mov	r9, r0
   1f328:	b	1ee64 <_start@@Base+0xa864>
   1f32c:	ldrb	r3, [r9, #2]
   1f330:	cmp	r3, #32
   1f334:	addhi	r9, r9, #2
   1f338:	bls	1f318 <_start@@Base+0xad18>
   1f33c:	b	1ee64 <_start@@Base+0xa864>
   1f340:	add	r1, r9, #1
   1f344:	sub	r3, r8, r1
   1f348:	cmp	r3, #1
   1f34c:	ble	1f364 <_start@@Base+0xad64>
   1f350:	ldrb	r3, [r9, #1]
   1f354:	cmp	r3, #32
   1f358:	movhi	r9, r1
   1f35c:	bhi	1f374 <_start@@Base+0xad74>
   1f360:	beq	1f3b0 <_start@@Base+0xadb0>
   1f364:	mov	r2, r8
   1f368:	mov	r0, sl
   1f36c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   1f370:	mov	r9, r0
   1f374:	cmp	r8, r9
   1f378:	beq	1f3c4 <_start@@Base+0xadc4>
   1f37c:	ldrb	r3, [r9]
   1f380:	cmp	r3, #125	; 0x7d
   1f384:	movne	r3, #1
   1f388:	strne	r3, [sp, #356]	; 0x164
   1f38c:	bne	1ee64 <_start@@Base+0xa864>
   1f390:	mov	r3, #0
   1f394:	str	r3, [sp, #356]	; 0x164
   1f398:	mov	r2, r8
   1f39c:	add	r1, r9, #1
   1f3a0:	mov	r0, sl
   1f3a4:	bl	1809c <_start@@Base+0x3a9c>
   1f3a8:	mov	r9, r0
   1f3ac:	b	1ee64 <_start@@Base+0xa864>
   1f3b0:	ldrb	r3, [r9, #2]
   1f3b4:	cmp	r3, #32
   1f3b8:	addhi	r9, r9, #2
   1f3bc:	bls	1f364 <_start@@Base+0xad64>
   1f3c0:	b	1f374 <_start@@Base+0xad74>
   1f3c4:	mov	r3, #0
   1f3c8:	str	r3, [sp, #356]	; 0x164
   1f3cc:	mov	r3, #10
   1f3d0:	mov	r2, r8
   1f3d4:	mov	r1, r9
   1f3d8:	mov	r0, sl
   1f3dc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   1f3e0:	mov	r9, r0
   1f3e4:	b	1ee64 <_start@@Base+0xa864>
   1f3e8:	ldrd	r6, [sp, #72]	; 0x48
   1f3ec:	ldr	r3, [sl, #24]
   1f3f0:	cmp	r3, #0
   1f3f4:	bne	1ecb8 <_start@@Base+0xa6b8>
   1f3f8:	ldr	r0, [sl]
   1f3fc:	bl	286bc <flatcc_builder_end_table@@Base>
   1f400:	str	r0, [sp, #384]	; 0x180
   1f404:	cmp	r0, #0
   1f408:	bne	1ecd0 <_start@@Base+0xa6d0>
   1f40c:	b	1ecb8 <_start@@Base+0xa6b8>
   1f410:	ldrd	r6, [sp, #72]	; 0x48
   1f414:	b	1ecb8 <_start@@Base+0xa6b8>
   1f418:	ldrd	r6, [sp, #72]	; 0x48
   1f41c:	b	1ecb8 <_start@@Base+0xa6b8>
   1f420:	ldrd	r6, [sp, #72]	; 0x48
   1f424:	b	1ecb8 <_start@@Base+0xa6b8>
   1f428:	mov	r2, r8
   1f42c:	mov	r1, r0
   1f430:	mov	r0, sl
   1f434:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f438:	mov	r9, r0
   1f43c:	b	1f6b0 <_start@@Base+0xb0b0>
   1f440:	mov	r2, r8
   1f444:	mov	r1, r9
   1f448:	mov	r0, sl
   1f44c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f450:	mov	r9, r0
   1f454:	b	1f6b0 <_start@@Base+0xb0b0>
   1f458:	lsr	r3, r0, #16
   1f45c:	lsl	r3, r3, #16
   1f460:	str	r3, [sp, #88]	; 0x58
   1f464:	str	r1, [sp, #92]	; 0x5c
   1f468:	add	r3, pc, #968	; 0x3c8
   1f46c:	ldrd	r2, [r3]
   1f470:	ldrd	r0, [sp, #88]	; 0x58
   1f474:	cmp	r1, r3
   1f478:	cmpeq	r0, r2
   1f47c:	beq	1f510 <_start@@Base+0xaf10>
   1f480:	mov	r3, #5
   1f484:	mov	r2, r8
   1f488:	mov	r1, r9
   1f48c:	mov	r0, sl
   1f490:	bl	18490 <_start@@Base+0x3e90>
   1f494:	mov	r4, r0
   1f498:	cmp	r0, r9
   1f49c:	beq	1f648 <_start@@Base+0xb048>
   1f4a0:	mov	r3, #0
   1f4a4:	str	r3, [sp, #368]	; 0x170
   1f4a8:	add	r3, sp, #368	; 0x170
   1f4ac:	mov	r2, r8
   1f4b0:	mov	r1, r0
   1f4b4:	mov	r0, sl
   1f4b8:	bl	2e2f8 <flatcc_json_parser_float@@Base>
   1f4bc:	mov	r9, r0
   1f4c0:	cmp	r4, r0
   1f4c4:	beq	1f600 <_start@@Base+0xb000>
   1f4c8:	vldr	s15, [pc, #936]	; 1f878 <_start@@Base+0xb278>
   1f4cc:	vldr	s14, [sp, #368]	; 0x170
   1f4d0:	vcmp.f32	s14, s15
   1f4d4:	vmrs	APSR_nzcv, fpscr
   1f4d8:	bne	1f4e8 <_start@@Base+0xaee8>
   1f4dc:	ldr	r3, [sl, #8]
   1f4e0:	tst	r3, #2
   1f4e4:	beq	1f6b0 <_start@@Base+0xb0b0>
   1f4e8:	mov	r3, #4
   1f4ec:	mov	r2, r3
   1f4f0:	mov	r1, #25
   1f4f4:	ldr	r0, [sl]
   1f4f8:	bl	297a8 <flatcc_builder_table_add@@Base>
   1f4fc:	cmp	r0, #0
   1f500:	beq	1f630 <_start@@Base+0xb030>
   1f504:	ldr	r3, [sp, #368]	; 0x170
   1f508:	str	r3, [r0]
   1f50c:	b	1f6b0 <_start@@Base+0xb0b0>
   1f510:	mov	r3, #6
   1f514:	mov	r2, r8
   1f518:	mov	r1, r9
   1f51c:	mov	r0, sl
   1f520:	bl	18490 <_start@@Base+0x3e90>
   1f524:	mov	r4, r0
   1f528:	cmp	r0, r9
   1f52c:	beq	1f5e8 <_start@@Base+0xafe8>
   1f530:	mov	r3, #0
   1f534:	str	r3, [sp, #368]	; 0x170
   1f538:	add	r3, sp, #368	; 0x170
   1f53c:	mov	r2, r8
   1f540:	mov	r1, r0
   1f544:	mov	r0, sl
   1f548:	bl	2e2f8 <flatcc_json_parser_float@@Base>
   1f54c:	mov	r9, r0
   1f550:	cmp	r4, r0
   1f554:	beq	1f5a0 <_start@@Base+0xafa0>
   1f558:	vldr	s15, [pc, #796]	; 1f87c <_start@@Base+0xb27c>
   1f55c:	vldr	s14, [sp, #368]	; 0x170
   1f560:	vcmp.f32	s14, s15
   1f564:	vmrs	APSR_nzcv, fpscr
   1f568:	bne	1f578 <_start@@Base+0xaf78>
   1f56c:	ldr	r3, [sl, #8]
   1f570:	tst	r3, #2
   1f574:	beq	1f6b0 <_start@@Base+0xb0b0>
   1f578:	mov	r3, #4
   1f57c:	mov	r2, r3
   1f580:	mov	r1, #26
   1f584:	ldr	r0, [sl]
   1f588:	bl	297a8 <flatcc_builder_table_add@@Base>
   1f58c:	cmp	r0, #0
   1f590:	beq	1f5d0 <_start@@Base+0xafd0>
   1f594:	ldr	r3, [sp, #368]	; 0x170
   1f598:	str	r3, [r0]
   1f59c:	b	1f6b0 <_start@@Base+0xb0b0>
   1f5a0:	add	r3, sp, #368	; 0x170
   1f5a4:	str	r3, [sp]
   1f5a8:	ldr	r3, [pc, #720]	; 1f880 <_start@@Base+0xb280>
   1f5ac:	mov	r2, r8
   1f5b0:	mov	r1, r0
   1f5b4:	mov	r0, sl
   1f5b8:	bl	18724 <_start@@Base+0x4124>
   1f5bc:	cmp	r8, r0
   1f5c0:	cmpne	r9, r0
   1f5c4:	beq	1f5e0 <_start@@Base+0xafe0>
   1f5c8:	mov	r9, r0
   1f5cc:	b	1f558 <_start@@Base+0xaf58>
   1f5d0:	mov	fp, sl
   1f5d4:	mov	r0, r9
   1f5d8:	mov	r9, r0
   1f5dc:	b	1be60 <_start@@Base+0x7860>
   1f5e0:	mov	fp, sl
   1f5e4:	b	1f5d8 <_start@@Base+0xafd8>
   1f5e8:	mov	r2, r8
   1f5ec:	mov	r1, r9
   1f5f0:	mov	r0, sl
   1f5f4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f5f8:	mov	r9, r0
   1f5fc:	b	1f6b0 <_start@@Base+0xb0b0>
   1f600:	add	r3, sp, #368	; 0x170
   1f604:	str	r3, [sp]
   1f608:	ldr	r3, [pc, #628]	; 1f884 <_start@@Base+0xb284>
   1f60c:	mov	r2, r8
   1f610:	mov	r1, r0
   1f614:	mov	r0, sl
   1f618:	bl	18724 <_start@@Base+0x4124>
   1f61c:	cmp	r8, r0
   1f620:	cmpne	r9, r0
   1f624:	beq	1f640 <_start@@Base+0xb040>
   1f628:	mov	r9, r0
   1f62c:	b	1f4c8 <_start@@Base+0xaec8>
   1f630:	mov	fp, sl
   1f634:	mov	r0, r9
   1f638:	mov	r9, r0
   1f63c:	b	1be60 <_start@@Base+0x7860>
   1f640:	mov	fp, sl
   1f644:	b	1f638 <_start@@Base+0xb038>
   1f648:	mov	r2, r8
   1f64c:	mov	r1, r9
   1f650:	mov	r0, sl
   1f654:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f658:	mov	r9, r0
   1f65c:	b	1f6b0 <_start@@Base+0xb0b0>
   1f660:	add	r3, pc, #472	; 0x1d8
   1f664:	ldrd	r2, [r3]
   1f668:	cmp	r1, r3
   1f66c:	cmpeq	r0, r2
   1f670:	bhi	1f8e0 <_start@@Base+0xb2e0>
   1f674:	lsr	r3, r0, #16
   1f678:	lsl	r3, r3, #16
   1f67c:	str	r3, [sp, #32]
   1f680:	str	r1, [sp, #36]	; 0x24
   1f684:	add	r3, pc, #444	; 0x1bc
   1f688:	ldrd	r2, [r3]
   1f68c:	ldrd	r0, [sp, #32]
   1f690:	cmp	r1, r3
   1f694:	cmpeq	r0, r2
   1f698:	beq	1f7a8 <_start@@Base+0xb1a8>
   1f69c:	mov	r2, r8
   1f6a0:	mov	r1, r9
   1f6a4:	mov	r0, sl
   1f6a8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f6ac:	mov	r9, r0
   1f6b0:	add	r3, sp, #388	; 0x184
   1f6b4:	mov	r2, r8
   1f6b8:	mov	r1, r9
   1f6bc:	mov	r0, sl
   1f6c0:	bl	180ec <_start@@Base+0x3aec>
   1f6c4:	mov	r9, r0
   1f6c8:	ldr	r3, [sp, #388]	; 0x184
   1f6cc:	cmp	r3, #0
   1f6d0:	beq	20898 <_start@@Base+0xc298>
   1f6d4:	cmp	r8, r9
   1f6d8:	beq	1f704 <_start@@Base+0xb104>
   1f6dc:	ldrb	r3, [r9]
   1f6e0:	cmp	r3, #34	; 0x22
   1f6e4:	addeq	r9, r9, #1
   1f6e8:	moveq	r3, #0
   1f6ec:	streq	r3, [sl, #12]
   1f6f0:	beq	1f704 <_start@@Base+0xb104>
   1f6f4:	cmp	r3, #46	; 0x2e
   1f6f8:	movne	r3, #1
   1f6fc:	strne	r3, [sl, #12]
   1f700:	beq	1beec <_start@@Base+0x78ec>
   1f704:	mov	r1, r8
   1f708:	mov	r0, r9
   1f70c:	bl	146f0 <_start@@Base+0xf0>
   1f710:	mov	r4, r0
   1f714:	mov	r5, r1
   1f718:	add	r3, pc, #304	; 0x130
   1f71c:	ldrd	r2, [r3]
   1f720:	cmp	r1, r3
   1f724:	cmpeq	r0, r2
   1f728:	bhi	1d660 <_start@@Base+0x9060>
   1f72c:	add	r3, pc, #292	; 0x124
   1f730:	ldrd	r2, [r3]
   1f734:	cmp	r1, r3
   1f738:	cmpeq	r0, r2
   1f73c:	bhi	1c700 <_start@@Base+0x8100>
   1f740:	add	r3, pc, #280	; 0x118
   1f744:	ldrd	r2, [r3]
   1f748:	cmp	r1, r3
   1f74c:	cmpeq	r0, r2
   1f750:	bhi	1c0fc <_start@@Base+0x7afc>
   1f754:	and	r3, r0, #-16777216	; 0xff000000
   1f758:	str	r3, [sp, #40]	; 0x28
   1f75c:	str	r1, [sp, #44]	; 0x2c
   1f760:	add	r3, pc, #256	; 0x100
   1f764:	ldrd	r2, [r3]
   1f768:	ldrd	r0, [sp, #40]	; 0x28
   1f76c:	cmp	r1, r3
   1f770:	cmpeq	r0, r2
   1f774:	beq	1bf08 <_start@@Base+0x7908>
   1f778:	add	r3, pc, #240	; 0xf0
   1f77c:	ldrd	r2, [r3]
   1f780:	ldrd	r0, [sp, #40]	; 0x28
   1f784:	cmp	r1, r3
   1f788:	cmpeq	r0, r2
   1f78c:	beq	1bf80 <_start@@Base+0x7980>
   1f790:	mov	r2, r8
   1f794:	mov	r1, r9
   1f798:	mov	r0, sl
   1f79c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f7a0:	mov	r9, r0
   1f7a4:	b	1f6b0 <_start@@Base+0xb0b0>
   1f7a8:	mov	r3, #6
   1f7ac:	mov	r2, r8
   1f7b0:	mov	r1, r9
   1f7b4:	mov	r0, sl
   1f7b8:	bl	18490 <_start@@Base+0x3e90>
   1f7bc:	mov	r4, r0
   1f7c0:	cmp	r0, r9
   1f7c4:	beq	1f8c8 <_start@@Base+0xb2c8>
   1f7c8:	mov	r3, #0
   1f7cc:	str	r3, [sp, #368]	; 0x170
   1f7d0:	add	r3, sp, #368	; 0x170
   1f7d4:	mov	r2, r8
   1f7d8:	mov	r1, r0
   1f7dc:	mov	r0, sl
   1f7e0:	bl	2e2f8 <flatcc_json_parser_float@@Base>
   1f7e4:	mov	r9, r0
   1f7e8:	cmp	r4, r0
   1f7ec:	beq	1f88c <_start@@Base+0xb28c>
   1f7f0:	vldr	s15, [sp, #368]	; 0x170
   1f7f4:	vcmp.f32	s15, #0.0
   1f7f8:	vmrs	APSR_nzcv, fpscr
   1f7fc:	bne	1f80c <_start@@Base+0xb20c>
   1f800:	ldr	r3, [sl, #8]
   1f804:	tst	r3, #2
   1f808:	beq	1f6b0 <_start@@Base+0xb0b0>
   1f80c:	mov	r3, #4
   1f810:	mov	r2, r3
   1f814:	mov	r1, #27
   1f818:	ldr	r0, [sl]
   1f81c:	bl	297a8 <flatcc_builder_table_add@@Base>
   1f820:	cmp	r0, #0
   1f824:	beq	20b00 <_start@@Base+0xc500>
   1f828:	ldr	r3, [sp, #368]	; 0x170
   1f82c:	str	r3, [r0]
   1f830:	b	1f6b0 <_start@@Base+0xb0b0>
   1f834:	nop	{0}
   1f838:	ldrtvs	r0, [r2], -r0
   1f83c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f840:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1f844:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f848:	ldrtvs	r0, [r3], -r0
   1f84c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f850:	cmnvs	r2, r0, ror #4
   1f854:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f858:			; <UNDEFINED> instruction: 0xffffffff
   1f85c:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1f860:			; <UNDEFINED> instruction: 0xffffffff
   1f864:			; <UNDEFINED> instruction: 0x666c6577
   1f868:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1f86c:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1f870:	andvc	r0, r0, #0
   1f874:	cmnvs	pc, #28416	; 0x6f00
   1f878:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1f87c:	submi	r0, r0, r0
   1f880:	ldrdeq	r5, [r5], -r4
   1f884:	andeq	r5, r5, r0, ror #3
   1f888:	andeq	r5, r5, ip, ror #3
   1f88c:	add	r3, sp, #368	; 0x170
   1f890:	str	r3, [sp]
   1f894:	ldr	r3, [pc, #-20]	; 1f888 <_start@@Base+0xb288>
   1f898:	mov	r2, r8
   1f89c:	mov	r1, r0
   1f8a0:	mov	r0, sl
   1f8a4:	bl	18724 <_start@@Base+0x4124>
   1f8a8:	cmp	r8, r0
   1f8ac:	cmpne	r9, r0
   1f8b0:	beq	1f8bc <_start@@Base+0xb2bc>
   1f8b4:	mov	r9, r0
   1f8b8:	b	1f7f0 <_start@@Base+0xb1f0>
   1f8bc:	mov	fp, sl
   1f8c0:	mov	r9, r0
   1f8c4:	b	1be60 <_start@@Base+0x7860>
   1f8c8:	mov	r2, r8
   1f8cc:	mov	r1, r9
   1f8d0:	mov	r0, sl
   1f8d4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f8d8:	mov	r9, r0
   1f8dc:	b	1f6b0 <_start@@Base+0xb0b0>
   1f8e0:	add	r3, pc, #984	; 0x3d8
   1f8e4:	ldrd	r2, [r3]
   1f8e8:	cmp	r1, r3
   1f8ec:	cmpeq	r0, r2
   1f8f0:	beq	1f990 <_start@@Base+0xb390>
   1f8f4:	add	r3, pc, #972	; 0x3cc
   1f8f8:	ldrd	r2, [r3]
   1f8fc:	cmp	r1, r3
   1f900:	cmpeq	r0, r2
   1f904:	bhi	20518 <_start@@Base+0xbf18>
   1f908:	add	r3, pc, #960	; 0x3c0
   1f90c:	ldrd	r2, [r3]
   1f910:	cmp	r1, r3
   1f914:	cmpeq	r0, r2
   1f918:	bne	20500 <_start@@Base+0xbf00>
   1f91c:	add	r4, r9, #8
   1f920:	mov	r1, r8
   1f924:	mov	r0, r4
   1f928:	bl	146f0 <_start@@Base+0xf0>
   1f92c:	add	r3, pc, #932	; 0x3a4
   1f930:	ldrd	r2, [r3]
   1f934:	cmp	r1, r3
   1f938:	cmpeq	r0, r2
   1f93c:	bne	204e8 <_start@@Base+0xbee8>
   1f940:	add	r4, r9, #16
   1f944:	mov	r1, r8
   1f948:	mov	r0, r4
   1f94c:	bl	146f0 <_start@@Base+0xf0>
   1f950:	mov	r3, #0
   1f954:	str	r3, [sp, #288]	; 0x120
   1f958:	str	r1, [sp, #292]	; 0x124
   1f95c:	add	r3, pc, #892	; 0x37c
   1f960:	ldrd	r2, [r3]
   1f964:	add	r1, sp, #288	; 0x120
   1f968:	ldrd	r0, [r1]
   1f96c:	cmp	r1, r3
   1f970:	cmpeq	r0, r2
   1f974:	beq	20334 <_start@@Base+0xbd34>
   1f978:	mov	r2, r8
   1f97c:	mov	r1, r4
   1f980:	mov	r0, sl
   1f984:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f988:	mov	r9, r0
   1f98c:	b	1f6b0 <_start@@Base+0xb0b0>
   1f990:	add	r9, r9, #8
   1f994:	mov	r1, r8
   1f998:	mov	r0, r9
   1f99c:	bl	146f0 <_start@@Base+0xf0>
   1f9a0:	add	r3, pc, #832	; 0x340
   1f9a4:	ldrd	r2, [r3]
   1f9a8:	cmp	r1, r3
   1f9ac:	cmpeq	r0, r2
   1f9b0:	bhi	1fbe4 <_start@@Base+0xb5e4>
   1f9b4:	add	r3, pc, #820	; 0x334
   1f9b8:	ldrd	r2, [r3]
   1f9bc:	cmp	r1, r3
   1f9c0:	cmpeq	r0, r2
   1f9c4:	beq	1f9e0 <_start@@Base+0xb3e0>
   1f9c8:	mov	r2, r8
   1f9cc:	mov	r1, r9
   1f9d0:	mov	r0, sl
   1f9d4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1f9d8:	mov	r9, r0
   1f9dc:	b	1f6b0 <_start@@Base+0xb0b0>
   1f9e0:	mov	r3, #8
   1f9e4:	mov	r2, r8
   1f9e8:	mov	r1, r9
   1f9ec:	mov	r0, sl
   1f9f0:	bl	18490 <_start@@Base+0x3e90>
   1f9f4:	mov	r4, r0
   1f9f8:	cmp	r9, r0
   1f9fc:	beq	1fab0 <_start@@Base+0xb4b0>
   1fa00:	mov	r3, #0
   1fa04:	str	r3, [sp, #368]	; 0x170
   1fa08:	add	r3, sp, #368	; 0x170
   1fa0c:	mov	r2, r8
   1fa10:	mov	r1, r0
   1fa14:	mov	r0, sl
   1fa18:	bl	17cb0 <_start@@Base+0x36b0>
   1fa1c:	mov	r9, r0
   1fa20:	cmp	r4, r0
   1fa24:	beq	1fa68 <_start@@Base+0xb468>
   1fa28:	ldr	r3, [sp, #368]	; 0x170
   1fa2c:	cmp	r3, #0
   1fa30:	bne	1fa40 <_start@@Base+0xb440>
   1fa34:	ldr	r3, [sl, #8]
   1fa38:	tst	r3, #2
   1fa3c:	beq	1f6b0 <_start@@Base+0xb0b0>
   1fa40:	mov	r3, #4
   1fa44:	mov	r2, r3
   1fa48:	mov	r1, #16
   1fa4c:	ldr	r0, [sl]
   1fa50:	bl	297a8 <flatcc_builder_table_add@@Base>
   1fa54:	cmp	r0, #0
   1fa58:	beq	1fa98 <_start@@Base+0xb498>
   1fa5c:	ldr	r3, [sp, #368]	; 0x170
   1fa60:	str	r3, [r0]
   1fa64:	b	1f6b0 <_start@@Base+0xb0b0>
   1fa68:	add	r3, sp, #368	; 0x170
   1fa6c:	str	r3, [sp]
   1fa70:	ldr	r3, [pc, #656]	; 1fd08 <_start@@Base+0xb708>
   1fa74:	mov	r2, r8
   1fa78:	mov	r1, r0
   1fa7c:	mov	r0, sl
   1fa80:	bl	19a74 <_start@@Base+0x5474>
   1fa84:	cmp	r8, r0
   1fa88:	cmpne	r9, r0
   1fa8c:	beq	1faa8 <_start@@Base+0xb4a8>
   1fa90:	mov	r9, r0
   1fa94:	b	1fa28 <_start@@Base+0xb428>
   1fa98:	mov	fp, sl
   1fa9c:	mov	r0, r9
   1faa0:	mov	r9, r0
   1faa4:	b	1be60 <_start@@Base+0x7860>
   1faa8:	mov	fp, sl
   1faac:	b	1faa0 <_start@@Base+0xb4a0>
   1fab0:	add	r4, r0, #8
   1fab4:	mov	r1, r8
   1fab8:	mov	r0, r4
   1fabc:	bl	146f0 <_start@@Base+0xf0>
   1fac0:	mov	r3, #0
   1fac4:	str	r3, [sp, #312]	; 0x138
   1fac8:	and	r3, r1, #-16777216	; 0xff000000
   1facc:	str	r3, [sp, #316]	; 0x13c
   1fad0:	add	r3, sp, #312	; 0x138
   1fad4:	ldrd	r2, [r3]
   1fad8:	cmp	r3, #1627389952	; 0x61000000
   1fadc:	cmpeq	r2, #0
   1fae0:	beq	1fafc <_start@@Base+0xb4fc>
   1fae4:	mov	r2, r8
   1fae8:	mov	r1, r4
   1faec:	mov	r0, sl
   1faf0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1faf4:	mov	r9, r0
   1faf8:	b	1f6b0 <_start@@Base+0xb0b0>
   1fafc:	mov	r3, #1
   1fb00:	mov	r2, r8
   1fb04:	mov	r1, r4
   1fb08:	mov	r0, sl
   1fb0c:	bl	18490 <_start@@Base+0x3e90>
   1fb10:	mov	r5, r0
   1fb14:	cmp	r4, r0
   1fb18:	beq	1fbcc <_start@@Base+0xb5cc>
   1fb1c:	mov	r3, #0
   1fb20:	str	r3, [sp, #368]	; 0x170
   1fb24:	add	r3, sp, #368	; 0x170
   1fb28:	mov	r2, r8
   1fb2c:	mov	r1, r0
   1fb30:	mov	r0, sl
   1fb34:	bl	17cb0 <_start@@Base+0x36b0>
   1fb38:	mov	r9, r0
   1fb3c:	cmp	r5, r0
   1fb40:	beq	1fb84 <_start@@Base+0xb584>
   1fb44:	ldr	r3, [sp, #368]	; 0x170
   1fb48:	cmp	r3, #0
   1fb4c:	bne	1fb5c <_start@@Base+0xb55c>
   1fb50:	ldr	r3, [sl, #8]
   1fb54:	tst	r3, #2
   1fb58:	beq	1f6b0 <_start@@Base+0xb0b0>
   1fb5c:	mov	r3, #4
   1fb60:	mov	r2, r3
   1fb64:	mov	r1, #20
   1fb68:	ldr	r0, [sl]
   1fb6c:	bl	297a8 <flatcc_builder_table_add@@Base>
   1fb70:	cmp	r0, #0
   1fb74:	beq	1fbb4 <_start@@Base+0xb5b4>
   1fb78:	ldr	r3, [sp, #368]	; 0x170
   1fb7c:	str	r3, [r0]
   1fb80:	b	1f6b0 <_start@@Base+0xb0b0>
   1fb84:	add	r3, sp, #368	; 0x170
   1fb88:	str	r3, [sp]
   1fb8c:	ldr	r3, [pc, #376]	; 1fd0c <_start@@Base+0xb70c>
   1fb90:	mov	r2, r8
   1fb94:	mov	r1, r0
   1fb98:	mov	r0, sl
   1fb9c:	bl	19a74 <_start@@Base+0x5474>
   1fba0:	cmp	r8, r0
   1fba4:	cmpne	r9, r0
   1fba8:	beq	1fbc4 <_start@@Base+0xb5c4>
   1fbac:	mov	r9, r0
   1fbb0:	b	1fb44 <_start@@Base+0xb544>
   1fbb4:	mov	fp, sl
   1fbb8:	mov	r0, r9
   1fbbc:	mov	r9, r0
   1fbc0:	b	1be60 <_start@@Base+0x7860>
   1fbc4:	mov	fp, sl
   1fbc8:	b	1fbbc <_start@@Base+0xb5bc>
   1fbcc:	mov	r2, r8
   1fbd0:	mov	r1, r0
   1fbd4:	mov	r0, sl
   1fbd8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1fbdc:	mov	r9, r0
   1fbe0:	b	1f6b0 <_start@@Base+0xb0b0>
   1fbe4:	add	r3, pc, #268	; 0x10c
   1fbe8:	ldrd	r2, [r3]
   1fbec:	cmp	r1, r3
   1fbf0:	cmpeq	r0, r2
   1fbf4:	bhi	1fea4 <_start@@Base+0xb8a4>
   1fbf8:	add	r3, pc, #256	; 0x100
   1fbfc:	ldrd	r2, [r3]
   1fc00:	cmp	r1, r3
   1fc04:	cmpeq	r0, r2
   1fc08:	beq	1fc24 <_start@@Base+0xb624>
   1fc0c:	mov	r2, r8
   1fc10:	mov	r1, r9
   1fc14:	mov	r0, sl
   1fc18:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1fc1c:	mov	r9, r0
   1fc20:	b	1f6b0 <_start@@Base+0xb0b0>
   1fc24:	mov	r3, #8
   1fc28:	mov	r2, r8
   1fc2c:	mov	r1, r9
   1fc30:	mov	r0, sl
   1fc34:	bl	18490 <_start@@Base+0x3e90>
   1fc38:	mov	r4, r0
   1fc3c:	cmp	r9, r0
   1fc40:	beq	1fd60 <_start@@Base+0xb760>
   1fc44:	mov	r2, #0
   1fc48:	mov	r3, #0
   1fc4c:	add	r1, sp, #368	; 0x170
   1fc50:	strd	r2, [r1]
   1fc54:	mov	r3, r1
   1fc58:	mov	r2, r8
   1fc5c:	mov	r1, r0
   1fc60:	mov	r0, sl
   1fc64:	bl	17fc0 <_start@@Base+0x39c0>
   1fc68:	mov	r9, r0
   1fc6c:	cmp	r4, r0
   1fc70:	beq	1fd18 <_start@@Base+0xb718>
   1fc74:	add	r3, sp, #368	; 0x170
   1fc78:	ldrd	r2, [r3]
   1fc7c:	orrs	r3, r2, r3
   1fc80:	bne	1fc90 <_start@@Base+0xb690>
   1fc84:	ldr	r3, [sl, #8]
   1fc88:	tst	r3, #2
   1fc8c:	beq	1f6b0 <_start@@Base+0xb0b0>
   1fc90:	mov	r3, #8
   1fc94:	mov	r2, r3
   1fc98:	mov	r1, #18
   1fc9c:	ldr	r0, [sl]
   1fca0:	bl	297a8 <flatcc_builder_table_add@@Base>
   1fca4:	cmp	r0, #0
   1fca8:	beq	1fd48 <_start@@Base+0xb748>
   1fcac:	add	r3, sp, #368	; 0x170
   1fcb0:	ldrd	r2, [r3]
   1fcb4:	strd	r2, [r0]
   1fcb8:	b	1f6b0 <_start@@Base+0xb0b0>
   1fcbc:	nop	{0}
   1fcc0:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1fcc4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fcc8:	svcvs	0x00725f6e
   1fccc:			; <UNDEFINED> instruction: 0x76656374
   1fcd0:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1fcd4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fcd8:	cmnvs	r4, r5, ror r2
   1fcdc:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1fce0:	andeq	r0, r0, r0
   1fce4:			; <UNDEFINED> instruction: 0x66666572
   1fce8:			; <UNDEFINED> instruction: 0x666e7630
   1fcec:	teqvc	r6, #1593835520	; 0x5f000000
   1fcf0:			; <UNDEFINED> instruction: 0x666e7631
   1fcf4:	teqvc	r3, #-268435451	; 0xf0000005
   1fcf8:			; <UNDEFINED> instruction: 0x666e7630
   1fcfc:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1fd00:			; <UNDEFINED> instruction: 0x666e7631
   1fd04:	teqvc	r6, #1593835520	; 0x5f000000
   1fd08:	strdeq	r5, [r5], -r8
   1fd0c:	andeq	r5, r5, r4, lsl #4
   1fd10:	andeq	r5, r5, r0, lsl r2
   1fd14:	andeq	r5, r5, ip, lsl r2
   1fd18:	add	r3, sp, #368	; 0x170
   1fd1c:	str	r3, [sp]
   1fd20:	ldr	r3, [pc, #-24]	; 1fd10 <_start@@Base+0xb710>
   1fd24:	mov	r2, r8
   1fd28:	mov	r1, r0
   1fd2c:	mov	r0, sl
   1fd30:	bl	1b5dc <_start@@Base+0x6fdc>
   1fd34:	cmp	r8, r0
   1fd38:	cmpne	r9, r0
   1fd3c:	beq	1fd58 <_start@@Base+0xb758>
   1fd40:	mov	r9, r0
   1fd44:	b	1fc74 <_start@@Base+0xb674>
   1fd48:	mov	fp, sl
   1fd4c:	mov	r0, r9
   1fd50:	mov	r9, r0
   1fd54:	b	1be60 <_start@@Base+0x7860>
   1fd58:	mov	fp, sl
   1fd5c:	b	1fd50 <_start@@Base+0xb750>
   1fd60:	add	r4, r0, #8
   1fd64:	mov	r1, r8
   1fd68:	mov	r0, r4
   1fd6c:	bl	146f0 <_start@@Base+0xf0>
   1fd70:	mov	r3, #0
   1fd74:	str	r3, [sp, #320]	; 0x140
   1fd78:	and	r3, r1, #-16777216	; 0xff000000
   1fd7c:	str	r3, [sp, #324]	; 0x144
   1fd80:	add	r3, sp, #320	; 0x140
   1fd84:	ldrd	r2, [r3]
   1fd88:	cmp	r3, #1627389952	; 0x61000000
   1fd8c:	cmpeq	r2, #0
   1fd90:	beq	1fdac <_start@@Base+0xb7ac>
   1fd94:	mov	r2, r8
   1fd98:	mov	r1, r4
   1fd9c:	mov	r0, sl
   1fda0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1fda4:	mov	r9, r0
   1fda8:	b	1f6b0 <_start@@Base+0xb0b0>
   1fdac:	mov	r3, #1
   1fdb0:	mov	r2, r8
   1fdb4:	mov	r1, r4
   1fdb8:	mov	r0, sl
   1fdbc:	bl	18490 <_start@@Base+0x3e90>
   1fdc0:	mov	r5, r0
   1fdc4:	cmp	r4, r0
   1fdc8:	beq	1fe8c <_start@@Base+0xb88c>
   1fdcc:	mov	r2, #0
   1fdd0:	mov	r3, #0
   1fdd4:	add	r1, sp, #368	; 0x170
   1fdd8:	strd	r2, [r1]
   1fddc:	mov	r3, r1
   1fde0:	mov	r2, r8
   1fde4:	mov	r1, r0
   1fde8:	mov	r0, sl
   1fdec:	bl	17fc0 <_start@@Base+0x39c0>
   1fdf0:	mov	r9, r0
   1fdf4:	cmp	r5, r0
   1fdf8:	beq	1fe44 <_start@@Base+0xb844>
   1fdfc:	add	r3, sp, #368	; 0x170
   1fe00:	ldrd	r2, [r3]
   1fe04:	orrs	r3, r2, r3
   1fe08:	bne	1fe18 <_start@@Base+0xb818>
   1fe0c:	ldr	r3, [sl, #8]
   1fe10:	tst	r3, #2
   1fe14:	beq	1f6b0 <_start@@Base+0xb0b0>
   1fe18:	mov	r3, #8
   1fe1c:	mov	r2, r3
   1fe20:	mov	r1, #22
   1fe24:	ldr	r0, [sl]
   1fe28:	bl	297a8 <flatcc_builder_table_add@@Base>
   1fe2c:	cmp	r0, #0
   1fe30:	beq	1fe74 <_start@@Base+0xb874>
   1fe34:	add	r3, sp, #368	; 0x170
   1fe38:	ldrd	r2, [r3]
   1fe3c:	strd	r2, [r0]
   1fe40:	b	1f6b0 <_start@@Base+0xb0b0>
   1fe44:	add	r3, sp, #368	; 0x170
   1fe48:	str	r3, [sp]
   1fe4c:	ldr	r3, [pc, #-320]	; 1fd14 <_start@@Base+0xb714>
   1fe50:	mov	r2, r8
   1fe54:	mov	r1, r0
   1fe58:	mov	r0, sl
   1fe5c:	bl	1b5dc <_start@@Base+0x6fdc>
   1fe60:	cmp	r8, r0
   1fe64:	cmpne	r9, r0
   1fe68:	beq	1fe84 <_start@@Base+0xb884>
   1fe6c:	mov	r9, r0
   1fe70:	b	1fdfc <_start@@Base+0xb7fc>
   1fe74:	mov	fp, sl
   1fe78:	mov	r0, r9
   1fe7c:	mov	r9, r0
   1fe80:	b	1be60 <_start@@Base+0x7860>
   1fe84:	mov	fp, sl
   1fe88:	b	1fe7c <_start@@Base+0xb87c>
   1fe8c:	mov	r2, r8
   1fe90:	mov	r1, r0
   1fe94:	mov	r0, sl
   1fe98:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1fe9c:	mov	r9, r0
   1fea0:	b	1f6b0 <_start@@Base+0xb0b0>
   1fea4:	add	r3, pc, #876	; 0x36c
   1fea8:	ldrd	r2, [r3]
   1feac:	cmp	r1, r3
   1feb0:	cmpeq	r0, r2
   1feb4:	beq	1fee4 <_start@@Base+0xb8e4>
   1feb8:	add	r3, pc, #864	; 0x360
   1febc:	ldrd	r2, [r3]
   1fec0:	cmp	r1, r3
   1fec4:	cmpeq	r0, r2
   1fec8:	beq	200e8 <_start@@Base+0xbae8>
   1fecc:	mov	r2, r8
   1fed0:	mov	r1, r9
   1fed4:	mov	r0, sl
   1fed8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1fedc:	mov	r9, r0
   1fee0:	b	1f6b0 <_start@@Base+0xb0b0>
   1fee4:	mov	r3, #8
   1fee8:	mov	r2, r8
   1feec:	mov	r1, r9
   1fef0:	mov	r0, sl
   1fef4:	bl	18490 <_start@@Base+0x3e90>
   1fef8:	mov	r4, r0
   1fefc:	cmp	r9, r0
   1ff00:	beq	1ffb4 <_start@@Base+0xb9b4>
   1ff04:	mov	r3, #0
   1ff08:	str	r3, [sp, #368]	; 0x170
   1ff0c:	add	r3, sp, #368	; 0x170
   1ff10:	mov	r2, r8
   1ff14:	mov	r1, r0
   1ff18:	mov	r0, sl
   1ff1c:	bl	17d94 <_start@@Base+0x3794>
   1ff20:	mov	r9, r0
   1ff24:	cmp	r4, r0
   1ff28:	beq	1ff6c <_start@@Base+0xb96c>
   1ff2c:	ldr	r3, [sp, #368]	; 0x170
   1ff30:	cmp	r3, #0
   1ff34:	bne	1ff44 <_start@@Base+0xb944>
   1ff38:	ldr	r3, [sl, #8]
   1ff3c:	tst	r3, #2
   1ff40:	beq	1f6b0 <_start@@Base+0xb0b0>
   1ff44:	mov	r3, #4
   1ff48:	mov	r2, r3
   1ff4c:	mov	r1, #17
   1ff50:	ldr	r0, [sl]
   1ff54:	bl	297a8 <flatcc_builder_table_add@@Base>
   1ff58:	cmp	r0, #0
   1ff5c:	beq	1ff9c <_start@@Base+0xb99c>
   1ff60:	ldr	r3, [sp, #368]	; 0x170
   1ff64:	str	r3, [r0]
   1ff68:	b	1f6b0 <_start@@Base+0xb0b0>
   1ff6c:	add	r3, sp, #368	; 0x170
   1ff70:	str	r3, [sp]
   1ff74:	ldr	r3, [pc, #684]	; 20228 <_start@@Base+0xbc28>
   1ff78:	mov	r2, r8
   1ff7c:	mov	r1, r0
   1ff80:	mov	r0, sl
   1ff84:	bl	1a4a0 <_start@@Base+0x5ea0>
   1ff88:	cmp	r8, r0
   1ff8c:	cmpne	r9, r0
   1ff90:	beq	1ffac <_start@@Base+0xb9ac>
   1ff94:	mov	r9, r0
   1ff98:	b	1ff2c <_start@@Base+0xb92c>
   1ff9c:	mov	fp, sl
   1ffa0:	mov	r0, r9
   1ffa4:	mov	r9, r0
   1ffa8:	b	1be60 <_start@@Base+0x7860>
   1ffac:	mov	fp, sl
   1ffb0:	b	1ffa4 <_start@@Base+0xb9a4>
   1ffb4:	add	r4, r0, #8
   1ffb8:	mov	r1, r8
   1ffbc:	mov	r0, r4
   1ffc0:	bl	146f0 <_start@@Base+0xf0>
   1ffc4:	mov	r3, #0
   1ffc8:	str	r3, [sp, #328]	; 0x148
   1ffcc:	and	r3, r1, #-16777216	; 0xff000000
   1ffd0:	str	r3, [sp, #332]	; 0x14c
   1ffd4:	add	r3, sp, #328	; 0x148
   1ffd8:	ldrd	r2, [r3]
   1ffdc:	cmp	r3, #1627389952	; 0x61000000
   1ffe0:	cmpeq	r2, #0
   1ffe4:	beq	20000 <_start@@Base+0xba00>
   1ffe8:	mov	r2, r8
   1ffec:	mov	r1, r4
   1fff0:	mov	r0, sl
   1fff4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   1fff8:	mov	r9, r0
   1fffc:	b	1f6b0 <_start@@Base+0xb0b0>
   20000:	mov	r3, #1
   20004:	mov	r2, r8
   20008:	mov	r1, r4
   2000c:	mov	r0, sl
   20010:	bl	18490 <_start@@Base+0x3e90>
   20014:	mov	r5, r0
   20018:	cmp	r4, r0
   2001c:	beq	200d0 <_start@@Base+0xbad0>
   20020:	mov	r3, #0
   20024:	str	r3, [sp, #368]	; 0x170
   20028:	add	r3, sp, #368	; 0x170
   2002c:	mov	r2, r8
   20030:	mov	r1, r0
   20034:	mov	r0, sl
   20038:	bl	17d94 <_start@@Base+0x3794>
   2003c:	mov	r9, r0
   20040:	cmp	r5, r0
   20044:	beq	20088 <_start@@Base+0xba88>
   20048:	ldr	r3, [sp, #368]	; 0x170
   2004c:	cmp	r3, #0
   20050:	bne	20060 <_start@@Base+0xba60>
   20054:	ldr	r3, [sl, #8]
   20058:	tst	r3, #2
   2005c:	beq	1f6b0 <_start@@Base+0xb0b0>
   20060:	mov	r3, #4
   20064:	mov	r2, r3
   20068:	mov	r1, #21
   2006c:	ldr	r0, [sl]
   20070:	bl	297a8 <flatcc_builder_table_add@@Base>
   20074:	cmp	r0, #0
   20078:	beq	200b8 <_start@@Base+0xbab8>
   2007c:	ldr	r3, [sp, #368]	; 0x170
   20080:	str	r3, [r0]
   20084:	b	1f6b0 <_start@@Base+0xb0b0>
   20088:	add	r3, sp, #368	; 0x170
   2008c:	str	r3, [sp]
   20090:	ldr	r3, [pc, #404]	; 2022c <_start@@Base+0xbc2c>
   20094:	mov	r2, r8
   20098:	mov	r1, r0
   2009c:	mov	r0, sl
   200a0:	bl	1a4a0 <_start@@Base+0x5ea0>
   200a4:	cmp	r8, r0
   200a8:	cmpne	r9, r0
   200ac:	beq	200c8 <_start@@Base+0xbac8>
   200b0:	mov	r9, r0
   200b4:	b	20048 <_start@@Base+0xba48>
   200b8:	mov	fp, sl
   200bc:	mov	r0, r9
   200c0:	mov	r9, r0
   200c4:	b	1be60 <_start@@Base+0x7860>
   200c8:	mov	fp, sl
   200cc:	b	200c0 <_start@@Base+0xbac0>
   200d0:	mov	r2, r8
   200d4:	mov	r1, r0
   200d8:	mov	r0, sl
   200dc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   200e0:	mov	r9, r0
   200e4:	b	1f6b0 <_start@@Base+0xb0b0>
   200e8:	mov	r3, #8
   200ec:	mov	r2, r8
   200f0:	mov	r1, r9
   200f4:	mov	r0, sl
   200f8:	bl	18490 <_start@@Base+0x3e90>
   200fc:	mov	r4, r0
   20100:	cmp	r9, r0
   20104:	beq	201c8 <_start@@Base+0xbbc8>
   20108:	mov	r2, #0
   2010c:	mov	r3, #0
   20110:	add	r1, sp, #368	; 0x170
   20114:	strd	r2, [r1]
   20118:	mov	r3, r1
   2011c:	mov	r2, r8
   20120:	mov	r1, r0
   20124:	mov	r0, sl
   20128:	bl	17e64 <_start@@Base+0x3864>
   2012c:	mov	r9, r0
   20130:	cmp	r4, r0
   20134:	beq	20180 <_start@@Base+0xbb80>
   20138:	add	r3, sp, #368	; 0x170
   2013c:	ldrd	r2, [r3]
   20140:	orrs	r3, r2, r3
   20144:	bne	20154 <_start@@Base+0xbb54>
   20148:	ldr	r3, [sl, #8]
   2014c:	tst	r3, #2
   20150:	beq	1f6b0 <_start@@Base+0xb0b0>
   20154:	mov	r3, #8
   20158:	mov	r2, r3
   2015c:	mov	r1, #19
   20160:	ldr	r0, [sl]
   20164:	bl	297a8 <flatcc_builder_table_add@@Base>
   20168:	cmp	r0, #0
   2016c:	beq	201b0 <_start@@Base+0xbbb0>
   20170:	add	r3, sp, #368	; 0x170
   20174:	ldrd	r2, [r3]
   20178:	strd	r2, [r0]
   2017c:	b	1f6b0 <_start@@Base+0xb0b0>
   20180:	add	r3, sp, #368	; 0x170
   20184:	str	r3, [sp]
   20188:	ldr	r3, [pc, #160]	; 20230 <_start@@Base+0xbc30>
   2018c:	mov	r2, r8
   20190:	mov	r1, r0
   20194:	mov	r0, sl
   20198:	bl	1a6a4 <_start@@Base+0x60a4>
   2019c:	cmp	r8, r0
   201a0:	cmpne	r9, r0
   201a4:	beq	201c0 <_start@@Base+0xbbc0>
   201a8:	mov	r9, r0
   201ac:	b	20138 <_start@@Base+0xbb38>
   201b0:	mov	fp, sl
   201b4:	mov	r0, r9
   201b8:	mov	r9, r0
   201bc:	b	1be60 <_start@@Base+0x7860>
   201c0:	mov	fp, sl
   201c4:	b	201b8 <_start@@Base+0xbbb8>
   201c8:	add	r4, r0, #8
   201cc:	mov	r1, r8
   201d0:	mov	r0, r4
   201d4:	bl	146f0 <_start@@Base+0xf0>
   201d8:	mov	r3, #0
   201dc:	str	r3, [sp, #336]	; 0x150
   201e0:	and	r3, r1, #-16777216	; 0xff000000
   201e4:	str	r3, [sp, #340]	; 0x154
   201e8:	add	r3, sp, #336	; 0x150
   201ec:	ldrd	r2, [r3]
   201f0:	cmp	r3, #1627389952	; 0x61000000
   201f4:	cmpeq	r2, #0
   201f8:	beq	2023c <_start@@Base+0xbc3c>
   201fc:	mov	r2, r8
   20200:	mov	r1, r4
   20204:	mov	r0, sl
   20208:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   2020c:	mov	r9, r0
   20210:	b	1f6b0 <_start@@Base+0xb0b0>
   20214:	nop	{0}
   20218:			; <UNDEFINED> instruction: 0x666e7631
   2021c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   20220:			; <UNDEFINED> instruction: 0x666e7631
   20224:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   20228:	andeq	r5, r5, r8, lsr #4
   2022c:	andeq	r5, r5, r4, lsr r2
   20230:	andeq	r5, r5, r0, asr #4
   20234:	andeq	r5, r5, ip, asr #4
   20238:	andeq	r5, r5, r8, asr r2
   2023c:	mov	r3, #1
   20240:	mov	r2, r8
   20244:	mov	r1, r4
   20248:	mov	r0, sl
   2024c:	bl	18490 <_start@@Base+0x3e90>
   20250:	mov	r5, r0
   20254:	cmp	r4, r0
   20258:	beq	2031c <_start@@Base+0xbd1c>
   2025c:	mov	r2, #0
   20260:	mov	r3, #0
   20264:	add	r1, sp, #368	; 0x170
   20268:	strd	r2, [r1]
   2026c:	mov	r3, r1
   20270:	mov	r2, r8
   20274:	mov	r1, r0
   20278:	mov	r0, sl
   2027c:	bl	17e64 <_start@@Base+0x3864>
   20280:	mov	r9, r0
   20284:	cmp	r5, r0
   20288:	beq	202d4 <_start@@Base+0xbcd4>
   2028c:	add	r3, sp, #368	; 0x170
   20290:	ldrd	r2, [r3]
   20294:	orrs	r3, r2, r3
   20298:	bne	202a8 <_start@@Base+0xbca8>
   2029c:	ldr	r3, [sl, #8]
   202a0:	tst	r3, #2
   202a4:	beq	1f6b0 <_start@@Base+0xb0b0>
   202a8:	mov	r3, #8
   202ac:	mov	r2, r3
   202b0:	mov	r1, #23
   202b4:	ldr	r0, [sl]
   202b8:	bl	297a8 <flatcc_builder_table_add@@Base>
   202bc:	cmp	r0, #0
   202c0:	beq	20304 <_start@@Base+0xbd04>
   202c4:	add	r3, sp, #368	; 0x170
   202c8:	ldrd	r2, [r3]
   202cc:	strd	r2, [r0]
   202d0:	b	1f6b0 <_start@@Base+0xb0b0>
   202d4:	add	r3, sp, #368	; 0x170
   202d8:	str	r3, [sp]
   202dc:	ldr	r3, [pc, #-176]	; 20234 <_start@@Base+0xbc34>
   202e0:	mov	r2, r8
   202e4:	mov	r1, r0
   202e8:	mov	r0, sl
   202ec:	bl	1a6a4 <_start@@Base+0x60a4>
   202f0:	cmp	r8, r0
   202f4:	cmpne	r9, r0
   202f8:	beq	20314 <_start@@Base+0xbd14>
   202fc:	mov	r9, r0
   20300:	b	2028c <_start@@Base+0xbc8c>
   20304:	mov	fp, sl
   20308:	mov	r0, r9
   2030c:	mov	r9, r0
   20310:	b	1be60 <_start@@Base+0x7860>
   20314:	mov	fp, sl
   20318:	b	2030c <_start@@Base+0xbd0c>
   2031c:	mov	r2, r8
   20320:	mov	r1, r0
   20324:	mov	r0, sl
   20328:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   2032c:	mov	r9, r0
   20330:	b	1f6b0 <_start@@Base+0xb0b0>
   20334:	mov	r3, #4
   20338:	mov	r2, r8
   2033c:	mov	r1, r4
   20340:	mov	r0, sl
   20344:	bl	18490 <_start@@Base+0x3e90>
   20348:	mov	r9, r0
   2034c:	cmp	r4, r0
   20350:	beq	204d0 <_start@@Base+0xbed0>
   20354:	cmp	r8, r0
   20358:	beq	20368 <_start@@Base+0xbd68>
   2035c:	ldrb	r3, [r0]
   20360:	cmp	r3, #91	; 0x5b
   20364:	beq	203e0 <_start@@Base+0xbde0>
   20368:	mov	r3, #0
   2036c:	mov	r2, r3
   20370:	mov	r1, r3
   20374:	ldr	r0, [sl]
   20378:	bl	26c24 <flatcc_builder_start_buffer@@Base>
   2037c:	cmp	r0, #0
   20380:	bne	20b18 <_start@@Base+0xc518>
   20384:	add	r3, sp, #384	; 0x180
   20388:	mov	r2, r8
   2038c:	mov	r1, r9
   20390:	mov	r0, sl
   20394:	bl	1be14 <_start@@Base+0x7814>
   20398:	mov	r9, r0
   2039c:	ldr	r1, [sp, #384]	; 0x180
   203a0:	cmp	r1, #0
   203a4:	beq	20b20 <_start@@Base+0xc520>
   203a8:	ldr	r0, [sl]
   203ac:	bl	26cf8 <flatcc_builder_end_buffer@@Base>
   203b0:	str	r0, [sp, #384]	; 0x180
   203b4:	ldr	r3, [sp, #384]	; 0x180
   203b8:	cmp	r3, #0
   203bc:	beq	20b28 <_start@@Base+0xc528>
   203c0:	mov	r1, #13
   203c4:	ldr	r0, [sl]
   203c8:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   203cc:	cmp	r0, #0
   203d0:	beq	20b30 <_start@@Base+0xc530>
   203d4:	ldr	r3, [sp, #384]	; 0x180
   203d8:	str	r3, [r0]
   203dc:	b	1f6b0 <_start@@Base+0xb0b0>
   203e0:	mvn	r3, #0
   203e4:	mov	r2, #1
   203e8:	mov	r1, r2
   203ec:	ldr	r0, [sl]
   203f0:	bl	278ec <flatcc_builder_start_vector@@Base>
   203f4:	cmp	r0, #0
   203f8:	bne	20b08 <_start@@Base+0xc508>
   203fc:	add	r3, sp, #388	; 0x184
   20400:	mov	r2, r8
   20404:	mov	r1, r9
   20408:	mov	r0, sl
   2040c:	bl	1857c <_start@@Base+0x3f7c>
   20410:	mov	r9, r0
   20414:	ldr	r3, [sp, #388]	; 0x184
   20418:	cmp	r3, #0
   2041c:	beq	204c0 <_start@@Base+0xbec0>
   20420:	mov	r5, #0
   20424:	ldr	fp, [pc, #-500]	; 20238 <_start@@Base+0xbc38>
   20428:	b	20458 <_start@@Base+0xbe58>
   2042c:	ldrb	r3, [sp, #368]	; 0x170
   20430:	strb	r3, [r4]
   20434:	add	r3, sp, #388	; 0x184
   20438:	mov	r2, r8
   2043c:	mov	r1, r0
   20440:	mov	r0, sl
   20444:	bl	18214 <_start@@Base+0x3c14>
   20448:	mov	r9, r0
   2044c:	ldr	r3, [sp, #388]	; 0x184
   20450:	cmp	r3, #0
   20454:	beq	204c0 <_start@@Base+0xbec0>
   20458:	strb	r5, [sp, #368]	; 0x170
   2045c:	mov	r1, #1
   20460:	ldr	r0, [sl]
   20464:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   20468:	subs	r4, r0, #0
   2046c:	beq	20b10 <_start@@Base+0xc510>
   20470:	add	r3, sp, #368	; 0x170
   20474:	mov	r2, r8
   20478:	mov	r1, r9
   2047c:	mov	r0, sl
   20480:	bl	17f00 <_start@@Base+0x3900>
   20484:	cmp	r0, r9
   20488:	bne	2042c <_start@@Base+0xbe2c>
   2048c:	add	r3, sp, #368	; 0x170
   20490:	str	r3, [sp]
   20494:	mov	r3, fp
   20498:	mov	r2, r8
   2049c:	mov	r1, r9
   204a0:	mov	r0, sl
   204a4:	bl	19660 <_start@@Base+0x5060>
   204a8:	cmp	r8, r0
   204ac:	cmpne	r0, r9
   204b0:	bne	2042c <_start@@Base+0xbe2c>
   204b4:	mov	fp, sl
   204b8:	mov	r9, r0
   204bc:	b	1be60 <_start@@Base+0x7860>
   204c0:	ldr	r0, [sl]
   204c4:	bl	289f0 <flatcc_builder_end_vector@@Base>
   204c8:	str	r0, [sp, #384]	; 0x180
   204cc:	b	203b4 <_start@@Base+0xbdb4>
   204d0:	mov	r2, r8
   204d4:	mov	r1, r0
   204d8:	mov	r0, sl
   204dc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   204e0:	mov	r9, r0
   204e4:	b	1f6b0 <_start@@Base+0xb0b0>
   204e8:	mov	r2, r8
   204ec:	mov	r1, r4
   204f0:	mov	r0, sl
   204f4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   204f8:	mov	r9, r0
   204fc:	b	1f6b0 <_start@@Base+0xb0b0>
   20500:	mov	r2, r8
   20504:	mov	r1, r9
   20508:	mov	r0, sl
   2050c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   20510:	mov	r9, r0
   20514:	b	1f6b0 <_start@@Base+0xb0b0>
   20518:	add	r3, pc, #984	; 0x3d8
   2051c:	ldrd	r2, [r3]
   20520:	cmp	r1, r3
   20524:	cmpeq	r0, r2
   20528:	bne	20880 <_start@@Base+0xc280>
   2052c:	add	r4, r9, #8
   20530:	mov	r1, r8
   20534:	mov	r0, r4
   20538:	bl	146f0 <_start@@Base+0xf0>
   2053c:	add	r3, pc, #956	; 0x3bc
   20540:	ldrd	r2, [r3]
   20544:	cmp	r1, r3
   20548:	cmpeq	r0, r2
   2054c:	beq	2058c <_start@@Base+0xbf8c>
   20550:	bic	r3, r0, #255	; 0xff
   20554:	str	r3, [sp, #248]	; 0xf8
   20558:	str	r1, [sp, #252]	; 0xfc
   2055c:	add	r3, pc, #932	; 0x3a4
   20560:	ldrd	r2, [r3]
   20564:	ldrd	r0, [sp, #248]	; 0xf8
   20568:	cmp	r1, r3
   2056c:	cmpeq	r0, r2
   20570:	beq	20728 <_start@@Base+0xc128>
   20574:	mov	r2, r8
   20578:	mov	r1, r4
   2057c:	mov	r0, sl
   20580:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   20584:	mov	r9, r0
   20588:	b	1f6b0 <_start@@Base+0xb0b0>
   2058c:	add	r4, r9, #16
   20590:	mov	r1, r8
   20594:	mov	r0, r4
   20598:	bl	146f0 <_start@@Base+0xf0>
   2059c:	mov	r3, #0
   205a0:	str	r3, [sp, #296]	; 0x128
   205a4:	and	r3, r1, #-16777216	; 0xff000000
   205a8:	str	r3, [sp, #300]	; 0x12c
   205ac:	add	r3, sp, #296	; 0x128
   205b0:	ldrd	r2, [r3]
   205b4:	cmp	r3, #1929379840	; 0x73000000
   205b8:	cmpeq	r2, #0
   205bc:	beq	205d8 <_start@@Base+0xbfd8>
   205c0:	mov	r2, r8
   205c4:	mov	r1, r4
   205c8:	mov	r0, sl
   205cc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   205d0:	mov	r9, r0
   205d4:	b	1f6b0 <_start@@Base+0xb0b0>
   205d8:	mov	r3, #1
   205dc:	mov	r2, r8
   205e0:	mov	r1, r4
   205e4:	mov	r0, sl
   205e8:	bl	18490 <_start@@Base+0x3e90>
   205ec:	mov	r9, r0
   205f0:	cmp	r4, r0
   205f4:	bne	20610 <_start@@Base+0xc010>
   205f8:	mov	r2, r8
   205fc:	mov	r1, r0
   20600:	mov	r0, sl
   20604:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   20608:	mov	r9, r0
   2060c:	b	1f6b0 <_start@@Base+0xb0b0>
   20610:	mvn	r3, #-536870912	; 0xe0000000
   20614:	mov	r2, #8
   20618:	mov	r1, r2
   2061c:	ldr	r0, [sl]
   20620:	bl	278ec <flatcc_builder_start_vector@@Base>
   20624:	cmp	r0, #0
   20628:	bne	20b38 <_start@@Base+0xc538>
   2062c:	add	r3, sp, #388	; 0x184
   20630:	mov	r2, r8
   20634:	mov	r1, r9
   20638:	mov	r0, sl
   2063c:	bl	1857c <_start@@Base+0x3f7c>
   20640:	mov	r9, r0
   20644:	ldr	r3, [sp, #388]	; 0x184
   20648:	cmp	r3, #0
   2064c:	beq	206f4 <_start@@Base+0xc0f4>
   20650:	vldr	d8, [pc, #696]	; 20910 <_start@@Base+0xc310>
   20654:	ldr	r5, [pc, #700]	; 20918 <_start@@Base+0xc318>
   20658:	b	2068c <_start@@Base+0xc08c>
   2065c:	add	r3, sp, #368	; 0x170
   20660:	ldrd	r2, [r3]
   20664:	strd	r2, [r4]
   20668:	add	r3, sp, #388	; 0x184
   2066c:	mov	r2, r8
   20670:	mov	r1, r0
   20674:	mov	r0, sl
   20678:	bl	18214 <_start@@Base+0x3c14>
   2067c:	mov	r9, r0
   20680:	ldr	r3, [sp, #388]	; 0x184
   20684:	cmp	r3, #0
   20688:	beq	206f4 <_start@@Base+0xc0f4>
   2068c:	vstr	d8, [sp, #368]	; 0x170
   20690:	mov	r1, #1
   20694:	ldr	r0, [sl]
   20698:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   2069c:	subs	r4, r0, #0
   206a0:	beq	20b40 <_start@@Base+0xc540>
   206a4:	add	r3, sp, #368	; 0x170
   206a8:	mov	r2, r8
   206ac:	mov	r1, r9
   206b0:	mov	r0, sl
   206b4:	bl	2e1fc <flatcc_json_parser_double@@Base>
   206b8:	cmp	r0, r9
   206bc:	bne	2065c <_start@@Base+0xc05c>
   206c0:	add	r3, sp, #368	; 0x170
   206c4:	str	r3, [sp]
   206c8:	mov	r3, r5
   206cc:	mov	r2, r8
   206d0:	mov	r1, r9
   206d4:	mov	r0, sl
   206d8:	bl	188e0 <_start@@Base+0x42e0>
   206dc:	cmp	r8, r0
   206e0:	cmpne	r0, r9
   206e4:	bne	2065c <_start@@Base+0xc05c>
   206e8:	mov	fp, sl
   206ec:	mov	r9, r0
   206f0:	b	1be60 <_start@@Base+0x7860>
   206f4:	ldr	r0, [sl]
   206f8:	bl	289f0 <flatcc_builder_end_vector@@Base>
   206fc:	str	r0, [sp, #384]	; 0x180
   20700:	cmp	r0, #0
   20704:	beq	20b48 <_start@@Base+0xc548>
   20708:	mov	r1, #33	; 0x21
   2070c:	ldr	r0, [sl]
   20710:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   20714:	cmp	r0, #0
   20718:	beq	20b50 <_start@@Base+0xc550>
   2071c:	ldr	r3, [sp, #384]	; 0x180
   20720:	str	r3, [r0]
   20724:	b	1f6b0 <_start@@Base+0xb0b0>
   20728:	mov	r3, #7
   2072c:	mov	r2, r8
   20730:	mov	r1, r4
   20734:	mov	r0, sl
   20738:	bl	18490 <_start@@Base+0x3e90>
   2073c:	mov	r9, r0
   20740:	cmp	r4, r0
   20744:	bne	20760 <_start@@Base+0xc160>
   20748:	mov	r2, r8
   2074c:	mov	r1, r0
   20750:	mov	r0, sl
   20754:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   20758:	mov	r9, r0
   2075c:	b	1f6b0 <_start@@Base+0xb0b0>
   20760:	mvn	r3, #-536870912	; 0xe0000000
   20764:	mov	r2, #8
   20768:	mov	r1, r2
   2076c:	ldr	r0, [sl]
   20770:	bl	278ec <flatcc_builder_start_vector@@Base>
   20774:	cmp	r0, #0
   20778:	bne	20b58 <_start@@Base+0xc558>
   2077c:	add	r3, sp, #388	; 0x184
   20780:	mov	r2, r8
   20784:	mov	r1, r9
   20788:	mov	r0, sl
   2078c:	bl	1857c <_start@@Base+0x3f7c>
   20790:	mov	r9, r0
   20794:	ldr	r3, [sp, #388]	; 0x184
   20798:	cmp	r3, #0
   2079c:	beq	2084c <_start@@Base+0xc24c>
   207a0:	ldr	r5, [pc, #372]	; 2091c <_start@@Base+0xc31c>
   207a4:	b	207d8 <_start@@Base+0xc1d8>
   207a8:	add	r3, sp, #368	; 0x170
   207ac:	ldrd	r2, [r3]
   207b0:	strd	r2, [r4]
   207b4:	add	r3, sp, #388	; 0x184
   207b8:	mov	r2, r8
   207bc:	mov	r1, r0
   207c0:	mov	r0, sl
   207c4:	bl	18214 <_start@@Base+0x3c14>
   207c8:	mov	r9, r0
   207cc:	ldr	r3, [sp, #388]	; 0x184
   207d0:	cmp	r3, #0
   207d4:	beq	2084c <_start@@Base+0xc24c>
   207d8:	mov	r2, #0
   207dc:	mov	r3, #0
   207e0:	add	r1, sp, #368	; 0x170
   207e4:	strd	r2, [r1]
   207e8:	mov	r1, #1
   207ec:	ldr	r0, [sl]
   207f0:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   207f4:	subs	r4, r0, #0
   207f8:	beq	20b60 <_start@@Base+0xc560>
   207fc:	add	r3, sp, #368	; 0x170
   20800:	mov	r2, r8
   20804:	mov	r1, r9
   20808:	mov	r0, sl
   2080c:	bl	17fc0 <_start@@Base+0x39c0>
   20810:	cmp	r0, r9
   20814:	bne	207a8 <_start@@Base+0xc1a8>
   20818:	add	r3, sp, #368	; 0x170
   2081c:	str	r3, [sp]
   20820:	mov	r3, r5
   20824:	mov	r2, r8
   20828:	mov	r1, r9
   2082c:	mov	r0, sl
   20830:	bl	1b5dc <_start@@Base+0x6fdc>
   20834:	cmp	r8, r0
   20838:	cmpne	r0, r9
   2083c:	bne	207a8 <_start@@Base+0xc1a8>
   20840:	mov	fp, sl
   20844:	mov	r9, r0
   20848:	b	1be60 <_start@@Base+0x7860>
   2084c:	ldr	r0, [sl]
   20850:	bl	289f0 <flatcc_builder_end_vector@@Base>
   20854:	str	r0, [sp, #384]	; 0x180
   20858:	cmp	r0, #0
   2085c:	beq	20b68 <_start@@Base+0xc568>
   20860:	mov	r1, #32
   20864:	ldr	r0, [sl]
   20868:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   2086c:	cmp	r0, #0
   20870:	beq	20b70 <_start@@Base+0xc570>
   20874:	ldr	r3, [sp, #384]	; 0x180
   20878:	str	r3, [r0]
   2087c:	b	1f6b0 <_start@@Base+0xb0b0>
   20880:	mov	r2, r8
   20884:	mov	r1, r9
   20888:	mov	r0, sl
   2088c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   20890:	mov	r9, r0
   20894:	b	1f6b0 <_start@@Base+0xb0b0>
   20898:	mov	fp, sl
   2089c:	ldr	r3, [fp, #24]
   208a0:	cmp	r3, #0
   208a4:	bne	1be60 <_start@@Base+0x7860>
   208a8:	mov	r1, #3
   208ac:	ldr	r0, [fp]
   208b0:	bl	284e8 <flatcc_builder_check_required_field@@Base>
   208b4:	cmp	r0, #0
   208b8:	beq	20920 <_start@@Base+0xc320>
   208bc:	ldr	r3, [sp, #380]	; 0x17c
   208c0:	mov	r2, r8
   208c4:	mov	r1, r9
   208c8:	mov	r0, fp
   208cc:	bl	2f93c <flatcc_json_parser_finalize_unions@@Base>
   208d0:	mov	r4, r0
   208d4:	ldr	r0, [fp]
   208d8:	bl	286bc <flatcc_builder_end_table@@Base>
   208dc:	ldr	r3, [sp, #124]	; 0x7c
   208e0:	str	r0, [r3]
   208e4:	cmp	r0, #0
   208e8:	moveq	r9, r4
   208ec:	bne	1be78 <_start@@Base+0x7878>
   208f0:	b	1be60 <_start@@Base+0x7860>
   208f4:	nop	{0}
   208f8:	svcvs	0x00725f6f
   208fc:			; <UNDEFINED> instruction: 0x76656374
   20900:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   20904:	ldrbvs	r6, [pc], -pc, ror #8
   20908:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   2090c:	ldrbvs	r6, [pc], -pc, ror #24
	...
   20918:	andeq	r5, r5, r4, ror #4
   2091c:	andeq	r5, r5, r0, ror r2
   20920:	mov	r3, #29
   20924:	mov	r2, r8
   20928:	mov	r1, r9
   2092c:	mov	r0, fp
   20930:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   20934:	mov	r9, r0
   20938:	b	1be60 <_start@@Base+0x7860>
   2093c:	mov	fp, sl
   20940:	mov	r9, r4
   20944:	b	1be60 <_start@@Base+0x7860>
   20948:	mov	fp, sl
   2094c:	mov	r9, r4
   20950:	b	1be60 <_start@@Base+0x7860>
   20954:	mov	fp, sl
   20958:	mov	r9, r4
   2095c:	b	1be60 <_start@@Base+0x7860>
   20960:	mov	fp, sl
   20964:	mov	r9, r4
   20968:	b	1be60 <_start@@Base+0x7860>
   2096c:	mov	fp, sl
   20970:	b	1be60 <_start@@Base+0x7860>
   20974:	mov	fp, sl
   20978:	b	1be60 <_start@@Base+0x7860>
   2097c:	mov	fp, sl
   20980:	b	1be60 <_start@@Base+0x7860>
   20984:	mov	fp, sl
   20988:	b	1be60 <_start@@Base+0x7860>
   2098c:	mov	fp, sl
   20990:	b	1be60 <_start@@Base+0x7860>
   20994:	mov	fp, sl
   20998:	b	1be60 <_start@@Base+0x7860>
   2099c:	mov	fp, sl
   209a0:	b	1be60 <_start@@Base+0x7860>
   209a4:	mov	fp, sl
   209a8:	b	1be60 <_start@@Base+0x7860>
   209ac:	mov	fp, sl
   209b0:	b	1be60 <_start@@Base+0x7860>
   209b4:	mov	fp, sl
   209b8:	b	1be60 <_start@@Base+0x7860>
   209bc:	mov	fp, sl
   209c0:	b	1be60 <_start@@Base+0x7860>
   209c4:	mov	fp, sl
   209c8:	b	1be60 <_start@@Base+0x7860>
   209cc:	mov	fp, sl
   209d0:	b	1be60 <_start@@Base+0x7860>
   209d4:	mov	fp, sl
   209d8:	b	1be60 <_start@@Base+0x7860>
   209dc:	mov	fp, sl
   209e0:	b	1be60 <_start@@Base+0x7860>
   209e4:	mov	fp, sl
   209e8:	b	1be60 <_start@@Base+0x7860>
   209ec:	mov	fp, sl
   209f0:	b	1be60 <_start@@Base+0x7860>
   209f4:	mov	fp, sl
   209f8:	b	1be60 <_start@@Base+0x7860>
   209fc:	mov	fp, sl
   20a00:	b	1be60 <_start@@Base+0x7860>
   20a04:	mov	fp, sl
   20a08:	b	1be60 <_start@@Base+0x7860>
   20a0c:	mov	fp, sl
   20a10:	b	1be60 <_start@@Base+0x7860>
   20a14:	mov	fp, sl
   20a18:	b	1be60 <_start@@Base+0x7860>
   20a1c:	mov	fp, sl
   20a20:	b	1be60 <_start@@Base+0x7860>
   20a24:	mov	fp, sl
   20a28:	b	1be60 <_start@@Base+0x7860>
   20a2c:	mov	fp, sl
   20a30:	b	1be60 <_start@@Base+0x7860>
   20a34:	mov	fp, sl
   20a38:	b	1be60 <_start@@Base+0x7860>
   20a3c:	mov	fp, sl
   20a40:	b	1be60 <_start@@Base+0x7860>
   20a44:	mov	fp, r7
   20a48:	mov	r9, r4
   20a4c:	b	1be60 <_start@@Base+0x7860>
   20a50:	mov	fp, sl
   20a54:	b	1be60 <_start@@Base+0x7860>
   20a58:	mov	fp, sl
   20a5c:	b	1be60 <_start@@Base+0x7860>
   20a60:	mov	fp, sl
   20a64:	b	1be60 <_start@@Base+0x7860>
   20a68:	mov	fp, sl
   20a6c:	b	1be60 <_start@@Base+0x7860>
   20a70:	mov	fp, sl
   20a74:	b	1be60 <_start@@Base+0x7860>
   20a78:	mov	fp, sl
   20a7c:	b	1be60 <_start@@Base+0x7860>
   20a80:	mov	fp, sl
   20a84:	b	1be60 <_start@@Base+0x7860>
   20a88:	mov	fp, sl
   20a8c:	b	1be60 <_start@@Base+0x7860>
   20a90:	mov	fp, sl
   20a94:	b	1be60 <_start@@Base+0x7860>
   20a98:	mov	fp, sl
   20a9c:	b	1be60 <_start@@Base+0x7860>
   20aa0:	mov	fp, sl
   20aa4:	b	1be60 <_start@@Base+0x7860>
   20aa8:	mov	fp, sl
   20aac:	b	1be60 <_start@@Base+0x7860>
   20ab0:	mov	fp, sl
   20ab4:	b	1be60 <_start@@Base+0x7860>
   20ab8:	mov	fp, sl
   20abc:	b	1be60 <_start@@Base+0x7860>
   20ac0:	mov	fp, sl
   20ac4:	b	1be60 <_start@@Base+0x7860>
   20ac8:	mov	fp, sl
   20acc:	b	1be60 <_start@@Base+0x7860>
   20ad0:	mov	fp, sl
   20ad4:	b	1be60 <_start@@Base+0x7860>
   20ad8:	mov	fp, sl
   20adc:	b	1be60 <_start@@Base+0x7860>
   20ae0:	mov	fp, sl
   20ae4:	b	1be60 <_start@@Base+0x7860>
   20ae8:	mov	fp, sl
   20aec:	b	1be60 <_start@@Base+0x7860>
   20af0:	mov	fp, sl
   20af4:	b	1be60 <_start@@Base+0x7860>
   20af8:	mov	fp, sl
   20afc:	b	1be60 <_start@@Base+0x7860>
   20b00:	mov	fp, sl
   20b04:	b	1be60 <_start@@Base+0x7860>
   20b08:	mov	fp, sl
   20b0c:	b	1be60 <_start@@Base+0x7860>
   20b10:	mov	fp, sl
   20b14:	b	1be60 <_start@@Base+0x7860>
   20b18:	mov	fp, sl
   20b1c:	b	1be60 <_start@@Base+0x7860>
   20b20:	mov	fp, sl
   20b24:	b	1be60 <_start@@Base+0x7860>
   20b28:	mov	fp, sl
   20b2c:	b	1be60 <_start@@Base+0x7860>
   20b30:	mov	fp, sl
   20b34:	b	1be60 <_start@@Base+0x7860>
   20b38:	mov	fp, sl
   20b3c:	b	1be60 <_start@@Base+0x7860>
   20b40:	mov	fp, sl
   20b44:	b	1be60 <_start@@Base+0x7860>
   20b48:	mov	fp, sl
   20b4c:	b	1be60 <_start@@Base+0x7860>
   20b50:	mov	fp, sl
   20b54:	b	1be60 <_start@@Base+0x7860>
   20b58:	mov	fp, sl
   20b5c:	b	1be60 <_start@@Base+0x7860>
   20b60:	mov	fp, sl
   20b64:	b	1be60 <_start@@Base+0x7860>
   20b68:	mov	fp, sl
   20b6c:	b	1be60 <_start@@Base+0x7860>
   20b70:	mov	fp, sl
   20b74:	b	1be60 <_start@@Base+0x7860>
   20b78:	mov	r9, r4
   20b7c:	b	1bfe8 <_start@@Base+0x79e8>
   20b80:	ldr	r9, [sp, #72]	; 0x48
   20b84:	b	1cd58 <_start@@Base+0x8758>
   20b88:	mov	r6, r0
   20b8c:	b	1dc3c <_start@@Base+0x963c>
   20b90:	mov	r6, r0
   20b94:	b	1dd70 <_start@@Base+0x9770>
   20b98:	mov	r7, fp
   20b9c:	b	1efb0 <_start@@Base+0xa9b0>
   20ba0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20ba4:	strd	r6, [sp, #8]
   20ba8:	strd	r8, [sp, #16]
   20bac:	strd	sl, [sp, #24]
   20bb0:	str	lr, [sp, #32]
   20bb4:	sub	sp, sp, #252	; 0xfc
   20bb8:	mov	r8, r0
   20bbc:	mov	r4, r1
   20bc0:	mov	r9, r2
   20bc4:	mov	r2, r3
   20bc8:	str	r3, [sp, #172]	; 0xac
   20bcc:	mov	r3, #0
   20bd0:	str	r3, [r2]
   20bd4:	mov	r1, #4
   20bd8:	ldr	r0, [r0]
   20bdc:	bl	27be4 <flatcc_builder_start_table@@Base>
   20be0:	cmp	r0, #0
   20be4:	beq	20c20 <_start@@Base+0xc620>
   20be8:	mov	r3, #33	; 0x21
   20bec:	mov	r2, r9
   20bf0:	mov	r1, r4
   20bf4:	mov	r0, r8
   20bf8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   20bfc:	mov	r4, r0
   20c00:	mov	r0, r4
   20c04:	add	sp, sp, #252	; 0xfc
   20c08:	ldrd	r4, [sp]
   20c0c:	ldrd	r6, [sp, #8]
   20c10:	ldrd	r8, [sp, #16]
   20c14:	ldrd	sl, [sp, #24]
   20c18:	add	sp, sp, #32
   20c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   20c20:	add	r3, sp, #236	; 0xec
   20c24:	str	r3, [sp]
   20c28:	mov	r3, #1
   20c2c:	mov	r2, r9
   20c30:	mov	r1, r4
   20c34:	mov	r0, r8
   20c38:	bl	2f8b8 <flatcc_json_parser_prepare_unions@@Base>
   20c3c:	cmp	r9, r0
   20c40:	beq	20be8 <_start@@Base+0xc5e8>
   20c44:	add	r3, sp, #244	; 0xf4
   20c48:	mov	r2, r9
   20c4c:	mov	r1, r4
   20c50:	mov	r0, r8
   20c54:	bl	18650 <_start@@Base+0x4050>
   20c58:	mov	r4, r0
   20c5c:	ldr	r3, [sp, #244]	; 0xf4
   20c60:	cmp	r3, #0
   20c64:	beq	22e80 <_start@@Base+0xe880>
   20c68:	mov	r5, r8
   20c6c:	mov	r8, r9
   20c70:	b	22d10 <_start@@Base+0xe710>
   20c74:	mov	r3, #5
   20c78:	mov	r2, r8
   20c7c:	mov	r1, r4
   20c80:	mov	r0, r5
   20c84:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   20c88:	mov	r4, r0
   20c8c:	b	22d40 <_start@@Base+0xe740>
   20c90:	sub	r3, r3, #1
   20c94:	cmp	r3, #7
   20c98:	ldrls	pc, [pc, r3, lsl #2]
   20c9c:	b	20d14 <_start@@Base+0xc714>
   20ca0:	andeq	r0, r2, r8, lsl #26
   20ca4:	strdeq	r0, [r2], -ip
   20ca8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20cac:	andeq	r0, r2, r4, ror #25
   20cb0:	ldrdeq	r0, [r2], -r8
   20cb4:	andeq	r0, r2, ip, asr #25
   20cb8:	andeq	r0, r2, r0, asr #25
   20cbc:	andeq	r2, r2, ip, asr #26
   20cc0:	mov	r0, #0
   20cc4:	mov	r1, #0
   20cc8:	b	22d54 <_start@@Base+0xe754>
   20ccc:	mov	r2, #0
   20cd0:	mov	r3, r2
   20cd4:	b	22d60 <_start@@Base+0xe760>
   20cd8:	mov	r2, #0
   20cdc:	mov	r3, r2
   20ce0:	b	22d68 <_start@@Base+0xe768>
   20ce4:	mov	r2, #0
   20ce8:	mov	r3, r2
   20cec:	b	22d70 <_start@@Base+0xe770>
   20cf0:	mov	r2, #0
   20cf4:	mov	r3, r2
   20cf8:	b	22d78 <_start@@Base+0xe778>
   20cfc:	mov	r2, #0
   20d00:	mov	r3, r2
   20d04:	b	22d80 <_start@@Base+0xe780>
   20d08:	mov	r2, #0
   20d0c:	mov	r3, r2
   20d10:	b	22d88 <_start@@Base+0xe788>
   20d14:	mov	sl, #0
   20d18:	mov	fp, #0
   20d1c:	b	22d94 <_start@@Base+0xe794>
   20d20:	add	r4, r4, #8
   20d24:	mov	r1, r8
   20d28:	mov	r0, r4
   20d2c:	bl	146f0 <_start@@Base+0xf0>
   20d30:	mov	r3, #0
   20d34:	str	r3, [sp, #104]	; 0x68
   20d38:	str	r1, [sp, #108]	; 0x6c
   20d3c:	add	r3, pc, #988	; 0x3dc
   20d40:	ldrd	r2, [r3]
   20d44:	ldrd	r0, [sp, #104]	; 0x68
   20d48:	cmp	r1, r3
   20d4c:	cmpeq	r0, r2
   20d50:	beq	20d6c <_start@@Base+0xc76c>
   20d54:	mov	r2, r8
   20d58:	mov	r1, r4
   20d5c:	mov	r0, r5
   20d60:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   20d64:	mov	r9, r0
   20d68:	b	22cec <_start@@Base+0xe6ec>
   20d6c:	mov	r3, #4
   20d70:	mov	r2, r8
   20d74:	mov	r1, r4
   20d78:	mov	r0, r5
   20d7c:	bl	18490 <_start@@Base+0x3e90>
   20d80:	mov	r1, r0
   20d84:	cmp	r4, r0
   20d88:	beq	20dd4 <_start@@Base+0xc7d4>
   20d8c:	movw	r3, #18404	; 0x47e4
   20d90:	movt	r3, #1
   20d94:	str	r3, [sp, #16]
   20d98:	movw	r3, #12120	; 0x2f58
   20d9c:	movt	r3, #2
   20da0:	str	r3, [sp, #12]
   20da4:	ldr	r3, [pc, #932]	; 21150 <_start@@Base+0xcb50>
   20da8:	str	r3, [sp, #8]
   20dac:	ldr	r3, [sp, #236]	; 0xec
   20db0:	str	r3, [sp, #4]
   20db4:	mov	r3, #3
   20db8:	str	r3, [sp]
   20dbc:	mov	r3, #0
   20dc0:	mov	r2, r8
   20dc4:	mov	r0, r5
   20dc8:	bl	2fe4c <flatcc_json_parser_union_type_vector@@Base>
   20dcc:	mov	r9, r0
   20dd0:	b	22cec <_start@@Base+0xe6ec>
   20dd4:	mov	r2, r8
   20dd8:	mov	r0, r5
   20ddc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   20de0:	mov	r9, r0
   20de4:	b	22cec <_start@@Base+0xe6ec>
   20de8:	mov	sl, #0
   20dec:	mov	fp, #0
   20df0:	b	22da8 <_start@@Base+0xe7a8>
   20df4:	mov	r3, #7
   20df8:	mov	r2, r8
   20dfc:	mov	r1, r4
   20e00:	mov	r0, r5
   20e04:	bl	18490 <_start@@Base+0x3e90>
   20e08:	cmp	r0, r4
   20e0c:	beq	22cd8 <_start@@Base+0xe6d8>
   20e10:	movw	r3, #12120	; 0x2f58
   20e14:	movt	r3, #2
   20e18:	str	r3, [sp, #8]
   20e1c:	ldr	r3, [sp, #236]	; 0xec
   20e20:	str	r3, [sp, #4]
   20e24:	mov	r3, #3
   20e28:	str	r3, [sp]
   20e2c:	mov	r3, #0
   20e30:	mov	r2, r8
   20e34:	mov	r1, r0
   20e38:	mov	r0, r5
   20e3c:	bl	2fd60 <flatcc_json_parser_union_vector@@Base>
   20e40:	mov	r9, r0
   20e44:	b	22cec <_start@@Base+0xe6ec>
   20e48:	mov	r3, #6
   20e4c:	mov	r2, r8
   20e50:	mov	r1, r4
   20e54:	mov	r0, r5
   20e58:	bl	18490 <_start@@Base+0x3e90>
   20e5c:	mov	r9, r0
   20e60:	cmp	r0, r4
   20e64:	beq	22ca8 <_start@@Base+0xe6a8>
   20e68:	mov	r3, #0
   20e6c:	str	r3, [sp, #240]	; 0xf0
   20e70:	mov	r1, #3
   20e74:	ldr	r0, [r5]
   20e78:	bl	27be4 <flatcc_builder_start_table@@Base>
   20e7c:	cmp	r0, #0
   20e80:	bne	2189c <_start@@Base+0xd29c>
   20e84:	add	r3, sp, #212	; 0xd4
   20e88:	mov	r2, r8
   20e8c:	mov	r1, r9
   20e90:	mov	r0, r5
   20e94:	bl	18650 <_start@@Base+0x4050>
   20e98:	mov	r9, r0
   20e9c:	strd	sl, [sp, #144]	; 0x90
   20ea0:	mov	r6, r5
   20ea4:	b	22acc <_start@@Base+0xe4cc>
   20ea8:	mov	r3, #5
   20eac:	mov	r2, r8
   20eb0:	mov	r1, r9
   20eb4:	mov	r0, r6
   20eb8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   20ebc:	mov	r9, r0
   20ec0:	b	22b08 <_start@@Base+0xe508>
   20ec4:	ldrb	r0, [r9, #7]
   20ec8:	mov	r1, #0
   20ecc:	ldrb	r2, [r9, #6]
   20ed0:	orr	r2, r0, r2, lsl #8
   20ed4:	mov	r3, r1
   20ed8:	ldrb	r0, [r9, #5]
   20edc:	orr	r2, r2, r0, lsl #16
   20ee0:	ldrb	r0, [r9, #4]
   20ee4:	orr	r2, r2, r0, lsl #24
   20ee8:	ldrb	r0, [r9, #3]
   20eec:	orr	r3, r3, r0
   20ef0:	ldrb	r0, [r9, #2]
   20ef4:	orr	r3, r3, r0, lsl #8
   20ef8:	ldrb	r0, [r9, #1]
   20efc:	orr	r3, r3, r0, lsl #16
   20f00:	ldrb	r0, [r9]
   20f04:	str	r2, [sp, #24]
   20f08:	orr	r3, r3, r0, lsl #24
   20f0c:	str	r3, [sp, #28]
   20f10:	ldrd	r2, [sp, #24]
   20f14:	add	r1, pc, #524	; 0x20c
   20f18:	ldrd	r0, [r1]
   20f1c:	cmp	r3, r1
   20f20:	cmpeq	r2, r0
   20f24:	bne	22a40 <_start@@Base+0xe440>
   20f28:	add	ip, r9, #8
   20f2c:	sub	r3, r8, ip
   20f30:	cmp	r3, #8
   20f34:	bhi	20fcc <_start@@Base+0xc9cc>
   20f38:	sub	r3, r3, #1
   20f3c:	cmp	r3, #7
   20f40:	ldrls	pc, [pc, r3, lsl #2]
   20f44:	b	21110 <_start@@Base+0xcb10>
   20f48:	andeq	r1, r2, r4, lsl #2
   20f4c:	strdeq	r1, [r2], -r8
   20f50:	andeq	r1, r2, ip, ror #1
   20f54:	andeq	r1, r2, r0, ror #1
   20f58:	ldrdeq	r1, [r2], -r4
   20f5c:	andeq	r1, r2, r8, asr #1
   20f60:	strheq	r1, [r2], -ip
   20f64:	andeq	r0, r2, ip, asr #31
   20f68:	mov	r0, #0
   20f6c:	mov	r1, #0
   20f70:	b	20ecc <_start@@Base+0xc8cc>
   20f74:	mov	r2, #0
   20f78:	mov	r3, r2
   20f7c:	b	20ed8 <_start@@Base+0xc8d8>
   20f80:	mov	r2, #0
   20f84:	mov	r3, r2
   20f88:	b	20ee0 <_start@@Base+0xc8e0>
   20f8c:	mov	r2, #0
   20f90:	mov	r3, r2
   20f94:	b	20ee8 <_start@@Base+0xc8e8>
   20f98:	mov	r2, #0
   20f9c:	mov	r3, r2
   20fa0:	b	20ef0 <_start@@Base+0xc8f0>
   20fa4:	mov	r2, #0
   20fa8:	mov	r3, r2
   20fac:	b	20ef8 <_start@@Base+0xc8f8>
   20fb0:	mov	r2, #0
   20fb4:	mov	r3, r2
   20fb8:	b	20f00 <_start@@Base+0xc900>
   20fbc:	mov	r2, #0
   20fc0:	mov	r3, #0
   20fc4:	strd	r2, [sp, #24]
   20fc8:	b	20f10 <_start@@Base+0xc910>
   20fcc:	ldrb	r0, [r9, #15]
   20fd0:	mov	r1, #0
   20fd4:	ldrb	r2, [r9, #14]
   20fd8:	orr	r2, r0, r2, lsl #8
   20fdc:	mov	r3, r1
   20fe0:	ldrb	r0, [r9, #13]
   20fe4:	orr	r2, r2, r0, lsl #16
   20fe8:	ldrb	r0, [r9, #12]
   20fec:	orr	r2, r2, r0, lsl #24
   20ff0:	ldrb	r0, [r9, #11]
   20ff4:	orr	r3, r3, r0
   20ff8:	ldrb	r0, [r9, #10]
   20ffc:	orr	r3, r3, r0, lsl #8
   21000:	ldrb	r0, [r9, #9]
   21004:	orr	r3, r3, r0, lsl #16
   21008:	ldrb	r0, [r9, #8]
   2100c:	str	r2, [sp, #48]	; 0x30
   21010:	orr	r3, r3, r0, lsl #24
   21014:	str	r3, [sp, #52]	; 0x34
   21018:	ldrd	r2, [sp, #48]	; 0x30
   2101c:	add	r1, pc, #268	; 0x10c
   21020:	ldrd	r0, [r1]
   21024:	cmp	r3, r1
   21028:	cmpeq	r2, r0
   2102c:	bne	22a28 <_start@@Base+0xe428>
   21030:	add	r4, r9, #16
   21034:	mov	r1, r8
   21038:	mov	r0, r4
   2103c:	bl	146f0 <_start@@Base+0xf0>
   21040:	lsr	r3, r0, #16
   21044:	lsl	r3, r3, #16
   21048:	str	r3, [sp, #56]	; 0x38
   2104c:	str	r1, [sp, #60]	; 0x3c
   21050:	add	r3, pc, #224	; 0xe0
   21054:	ldrd	r2, [r3]
   21058:	ldrd	sl, [sp, #56]	; 0x38
   2105c:	cmp	fp, r3
   21060:	cmpeq	sl, r2
   21064:	beq	21154 <_start@@Base+0xcb54>
   21068:	and	r3, r0, #-16777216	; 0xff000000
   2106c:	str	r3, [sp, #120]	; 0x78
   21070:	str	r1, [sp, #124]	; 0x7c
   21074:	add	r3, pc, #196	; 0xc4
   21078:	ldrd	r2, [r3]
   2107c:	ldrd	r0, [sp, #120]	; 0x78
   21080:	cmp	r1, r3
   21084:	cmpeq	r0, r2
   21088:	beq	2184c <_start@@Base+0xd24c>
   2108c:	add	r3, pc, #180	; 0xb4
   21090:	ldrd	r2, [r3]
   21094:	ldrd	r0, [sp, #56]	; 0x38
   21098:	cmp	r1, r3
   2109c:	cmpeq	r0, r2
   210a0:	beq	222c0 <_start@@Base+0xdcc0>
   210a4:	mov	r2, r8
   210a8:	mov	r1, r4
   210ac:	mov	r0, r6
   210b0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   210b4:	mov	r9, r0
   210b8:	b	22a54 <_start@@Base+0xe454>
   210bc:	mov	r0, #0
   210c0:	mov	r1, #0
   210c4:	b	20fd4 <_start@@Base+0xc9d4>
   210c8:	mov	r2, #0
   210cc:	mov	r3, r2
   210d0:	b	20fe0 <_start@@Base+0xc9e0>
   210d4:	mov	r2, #0
   210d8:	mov	r3, r2
   210dc:	b	20fe8 <_start@@Base+0xc9e8>
   210e0:	mov	r2, #0
   210e4:	mov	r3, r2
   210e8:	b	20ff0 <_start@@Base+0xc9f0>
   210ec:	mov	r2, #0
   210f0:	mov	r3, r2
   210f4:	b	20ff8 <_start@@Base+0xc9f8>
   210f8:	mov	r2, #0
   210fc:	mov	r3, r2
   21100:	b	21000 <_start@@Base+0xca00>
   21104:	mov	r2, #0
   21108:	mov	r3, r2
   2110c:	b	21008 <_start@@Base+0xca08>
   21110:	mov	r2, #0
   21114:	mov	r3, #0
   21118:	strd	r2, [sp, #48]	; 0x30
   2111c:	b	21018 <_start@@Base+0xca18>
   21120:	andeq	r0, r0, r0
   21124:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   21128:	bvs	1cfcee8 <__bss_end__@@Base+0x1ca7b9c>
   2112c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21130:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   21134:	rsbsvc	r6, r2, r6, ror #10
   21138:	ldrvs	r0, [r2, -r0]!
   2113c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   21140:	strvs	r0, [r0, -r0]
   21144:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   21148:	ldrvs	r0, [r3, -r0]!
   2114c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   21150:	andeq	r5, r5, ip, ror r2
   21154:	mov	r3, #6
   21158:	mov	r2, r8
   2115c:	mov	r1, r4
   21160:	mov	r0, r6
   21164:	bl	18490 <_start@@Base+0x3e90>
   21168:	mov	r9, r0
   2116c:	cmp	r4, r0
   21170:	beq	22a20 <_start@@Base+0xe420>
   21174:	mov	r1, #2
   21178:	ldr	r0, [r6]
   2117c:	bl	27be4 <flatcc_builder_start_table@@Base>
   21180:	cmp	r0, #0
   21184:	beq	211a8 <_start@@Base+0xcba8>
   21188:	mov	r5, r6
   2118c:	mov	r3, #33	; 0x21
   21190:	mov	r2, r8
   21194:	mov	r1, r9
   21198:	mov	r0, r5
   2119c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   211a0:	mov	r9, r0
   211a4:	b	2189c <_start@@Base+0xd29c>
   211a8:	add	r3, sp, #220	; 0xdc
   211ac:	mov	r2, r8
   211b0:	mov	r1, r9
   211b4:	mov	r0, r6
   211b8:	bl	18650 <_start@@Base+0x4050>
   211bc:	mov	r9, r0
   211c0:	add	r5, pc, #992	; 0x3e0
   211c4:	ldrd	r4, [r5]
   211c8:	movw	r3, #20592	; 0x5070
   211cc:	movt	r3, #5
   211d0:	str	r3, [sp, #204]	; 0xcc
   211d4:	add	r3, r3, #552	; 0x228
   211d8:	str	r3, [sp, #200]	; 0xc8
   211dc:	ldrd	sl, [sp, #192]	; 0xc0
   211e0:	b	21668 <_start@@Base+0xd068>
   211e4:	mov	r3, #5
   211e8:	mov	r2, r8
   211ec:	mov	r1, r9
   211f0:	mov	r0, r6
   211f4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   211f8:	mov	r9, r0
   211fc:	b	216a4 <_start@@Base+0xd0a4>
   21200:	ldrb	r0, [r9, #7]
   21204:	mov	r1, #0
   21208:	ldrb	r2, [r9, #6]
   2120c:	orr	r2, r0, r2, lsl #8
   21210:	mov	r3, r1
   21214:	ldrb	r0, [r9, #5]
   21218:	orr	r2, r2, r0, lsl #16
   2121c:	ldrb	r0, [r9, #4]
   21220:	orr	r2, r2, r0, lsl #24
   21224:	ldrb	r0, [r9, #3]
   21228:	orr	r3, r3, r0
   2122c:	ldrb	r0, [r9, #2]
   21230:	orr	r3, r3, r0, lsl #8
   21234:	ldrb	r0, [r9, #1]
   21238:	orr	r3, r3, r0, lsl #16
   2123c:	ldrb	r0, [r9]
   21240:	mov	sl, r2
   21244:	orr	fp, r3, r0, lsl #24
   21248:	cmp	fp, r5
   2124c:	cmpeq	sl, r4
   21250:	bne	215dc <_start@@Base+0xcfdc>
   21254:	add	r7, r9, #8
   21258:	sub	r3, r8, r7
   2125c:	cmp	r3, #8
   21260:	bhi	212f4 <_start@@Base+0xccf4>
   21264:	sub	r3, r3, #1
   21268:	cmp	r3, #7
   2126c:	ldrls	pc, [pc, r3, lsl #2]
   21270:	b	213ec <_start@@Base+0xcdec>
   21274:	andeq	r1, r2, r0, ror #7
   21278:	ldrdeq	r1, [r2], -r4
   2127c:	andeq	r1, r2, r8, asr #7
   21280:			; <UNDEFINED> instruction: 0x000213bc
   21284:			; <UNDEFINED> instruction: 0x000213b0
   21288:	andeq	r1, r2, r4, lsr #7
   2128c:	muleq	r2, r8, r3
   21290:	strdeq	r1, [r2], -r4
   21294:	mov	r0, #0
   21298:	mov	r1, r0
   2129c:	b	21208 <_start@@Base+0xcc08>
   212a0:	mov	r2, #0
   212a4:	mov	r3, r2
   212a8:	b	21214 <_start@@Base+0xcc14>
   212ac:	mov	r2, #0
   212b0:	mov	r3, r2
   212b4:	b	2121c <_start@@Base+0xcc1c>
   212b8:	mov	r2, #0
   212bc:	mov	r3, r2
   212c0:	b	21224 <_start@@Base+0xcc24>
   212c4:	mov	r2, #0
   212c8:	mov	r3, r2
   212cc:	b	2122c <_start@@Base+0xcc2c>
   212d0:	mov	r2, #0
   212d4:	mov	r3, r2
   212d8:	b	21234 <_start@@Base+0xcc34>
   212dc:	mov	r2, #0
   212e0:	mov	r3, r2
   212e4:	b	2123c <_start@@Base+0xcc3c>
   212e8:	mov	sl, #0
   212ec:	mov	fp, #0
   212f0:	b	21248 <_start@@Base+0xcc48>
   212f4:	ldrb	r0, [r9, #15]
   212f8:	mov	r1, #0
   212fc:	ldrb	r2, [r9, #14]
   21300:	orr	r3, r0, r2, lsl #8
   21304:	mov	r2, r1
   21308:	ldrb	r0, [r9, #13]
   2130c:	orr	r3, r3, r0, lsl #16
   21310:	ldrb	r0, [r9, #12]
   21314:	orr	r3, r3, r0, lsl #24
   21318:	ldrb	r0, [r9, #11]
   2131c:	orr	r2, r2, r0
   21320:	ldrb	r0, [r9, #10]
   21324:	orr	r2, r2, r0, lsl #8
   21328:	ldrb	r0, [r9, #9]
   2132c:	orr	r2, r2, r0, lsl #16
   21330:	ldrb	r0, [r9, #8]
   21334:	str	r3, [sp, #72]	; 0x48
   21338:	orr	r3, r2, r0, lsl #24
   2133c:	str	r3, [sp, #76]	; 0x4c
   21340:	ldrd	r2, [sp, #72]	; 0x48
   21344:	bic	r1, r2, #255	; 0xff
   21348:	str	r1, [sp, #80]	; 0x50
   2134c:	str	r3, [sp, #84]	; 0x54
   21350:	ldrd	r2, [sp, #80]	; 0x50
   21354:	add	r1, pc, #596	; 0x254
   21358:	ldrd	r0, [r1]
   2135c:	cmp	r3, r1
   21360:	cmpeq	r2, r0
   21364:	beq	213fc <_start@@Base+0xcdfc>
   21368:	ldrd	r2, [sp, #72]	; 0x48
   2136c:	add	r1, pc, #580	; 0x244
   21370:	ldrd	r0, [r1]
   21374:	cmp	r3, r1
   21378:	cmpeq	r2, r0
   2137c:	beq	214e0 <_start@@Base+0xcee0>
   21380:	mov	r2, r8
   21384:	mov	r1, r7
   21388:	mov	r0, r6
   2138c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   21390:	mov	r9, r0
   21394:	b	215f0 <_start@@Base+0xcff0>
   21398:	mov	r0, #0
   2139c:	mov	r1, r0
   213a0:	b	212fc <_start@@Base+0xccfc>
   213a4:	mov	r3, #0
   213a8:	mov	r2, r3
   213ac:	b	21308 <_start@@Base+0xcd08>
   213b0:	mov	r3, #0
   213b4:	mov	r2, r3
   213b8:	b	21310 <_start@@Base+0xcd10>
   213bc:	mov	r3, #0
   213c0:	mov	r2, r3
   213c4:	b	21318 <_start@@Base+0xcd18>
   213c8:	mov	r3, #0
   213cc:	mov	r2, r3
   213d0:	b	21320 <_start@@Base+0xcd20>
   213d4:	mov	r3, #0
   213d8:	mov	r2, r3
   213dc:	b	21328 <_start@@Base+0xcd28>
   213e0:	mov	r3, #0
   213e4:	mov	r2, r3
   213e8:	b	21330 <_start@@Base+0xcd30>
   213ec:	mov	r2, #0
   213f0:	mov	r3, #0
   213f4:	strd	r2, [sp, #72]	; 0x48
   213f8:	b	21340 <_start@@Base+0xcd40>
   213fc:	mov	r3, #7
   21400:	mov	r2, r8
   21404:	mov	r1, r7
   21408:	mov	r0, r6
   2140c:	bl	18490 <_start@@Base+0x3e90>
   21410:	mov	r1, r0
   21414:	cmp	r7, r0
   21418:	beq	214cc <_start@@Base+0xcecc>
   2141c:	mov	r3, #0
   21420:	str	r3, [sp, #224]	; 0xe0
   21424:	str	r3, [sp, #228]	; 0xe4
   21428:	add	r3, sp, #224	; 0xe0
   2142c:	mov	r2, r8
   21430:	mov	r7, r0
   21434:	mov	r0, r6
   21438:	bl	17fc0 <_start@@Base+0x39c0>
   2143c:	mov	r9, r0
   21440:	cmp	r7, r0
   21444:	beq	21488 <_start@@Base+0xce88>
   21448:	ldrd	r2, [sp, #224]	; 0xe0
   2144c:	orrs	r3, r2, r3
   21450:	bne	21460 <_start@@Base+0xce60>
   21454:	ldr	r3, [r6, #8]
   21458:	tst	r3, #2
   2145c:	beq	215f0 <_start@@Base+0xcff0>
   21460:	mov	r3, #8
   21464:	mov	r2, r3
   21468:	mov	r1, #0
   2146c:	ldr	r0, [r6]
   21470:	bl	297a8 <flatcc_builder_table_add@@Base>
   21474:	cmp	r0, #0
   21478:	beq	21834 <_start@@Base+0xd234>
   2147c:	ldrd	r2, [sp, #224]	; 0xe0
   21480:	strd	r2, [r0]
   21484:	b	215f0 <_start@@Base+0xcff0>
   21488:	add	r3, sp, #224	; 0xe0
   2148c:	str	r3, [sp]
   21490:	ldr	r3, [sp, #204]	; 0xcc
   21494:	add	r3, r3, #540	; 0x21c
   21498:	mov	r2, r8
   2149c:	mov	r1, r0
   214a0:	mov	r0, r6
   214a4:	bl	1b5dc <_start@@Base+0x6fdc>
   214a8:	cmp	r8, r0
   214ac:	cmpne	r9, r0
   214b0:	beq	214bc <_start@@Base+0xcebc>
   214b4:	mov	r9, r0
   214b8:	b	21448 <_start@@Base+0xce48>
   214bc:	strd	sl, [sp, #192]	; 0xc0
   214c0:	mov	r5, r6
   214c4:	mov	r9, r0
   214c8:	b	2118c <_start@@Base+0xcb8c>
   214cc:	mov	r2, r8
   214d0:	mov	r0, r6
   214d4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   214d8:	mov	r9, r0
   214dc:	b	215f0 <_start@@Base+0xcff0>
   214e0:	mov	r3, #8
   214e4:	mov	r2, r8
   214e8:	mov	r1, r7
   214ec:	mov	r0, r6
   214f0:	bl	18490 <_start@@Base+0x3e90>
   214f4:	mov	r1, r0
   214f8:	cmp	r7, r0
   214fc:	beq	215c8 <_start@@Base+0xcfc8>
   21500:	mov	r3, #0
   21504:	str	r3, [sp, #224]	; 0xe0
   21508:	add	r3, sp, #224	; 0xe0
   2150c:	mov	r2, r8
   21510:	mov	r7, r0
   21514:	mov	r0, r6
   21518:	bl	17d94 <_start@@Base+0x3794>
   2151c:	mov	r9, r0
   21520:	cmp	r7, r0
   21524:	beq	21568 <_start@@Base+0xcf68>
   21528:	ldr	r3, [sp, #224]	; 0xe0
   2152c:	cmp	r3, #0
   21530:	bne	21540 <_start@@Base+0xcf40>
   21534:	ldr	r3, [r6, #8]
   21538:	tst	r3, #2
   2153c:	beq	215f0 <_start@@Base+0xcff0>
   21540:	mov	r3, #4
   21544:	mov	r2, r3
   21548:	mov	r1, #1
   2154c:	ldr	r0, [r6]
   21550:	bl	297a8 <flatcc_builder_table_add@@Base>
   21554:	cmp	r0, #0
   21558:	beq	21840 <_start@@Base+0xd240>
   2155c:	ldr	r3, [sp, #224]	; 0xe0
   21560:	str	r3, [r0]
   21564:	b	215f0 <_start@@Base+0xcff0>
   21568:	add	r3, sp, #224	; 0xe0
   2156c:	str	r3, [sp]
   21570:	ldr	r3, [sp, #200]	; 0xc8
   21574:	mov	r2, r8
   21578:	mov	r1, r0
   2157c:	mov	r0, r6
   21580:	bl	1a4a0 <_start@@Base+0x5ea0>
   21584:	cmp	r8, r0
   21588:	cmpne	r9, r0
   2158c:	beq	21598 <_start@@Base+0xcf98>
   21590:	mov	r9, r0
   21594:	b	21528 <_start@@Base+0xcf28>
   21598:	strd	sl, [sp, #192]	; 0xc0
   2159c:	mov	r5, r6
   215a0:	mov	r9, r0
   215a4:	b	2118c <_start@@Base+0xcb8c>
   215a8:	svcpl	0x00626262
   215ac:	cmnvs	r1, r1, ror #2
   215b0:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   215b4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   215b8:	cmnvs	r2, pc, asr r4
   215bc:	subsvs	r7, pc, #116, 6	; 0xd0000001
   215c0:	andeq	r5, r5, r4, lsr #5
   215c4:			; <UNDEFINED> instruction: 0x000552b0
   215c8:	mov	r2, r8
   215cc:	mov	r0, r6
   215d0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   215d4:	mov	r9, r0
   215d8:	b	215f0 <_start@@Base+0xcff0>
   215dc:	mov	r2, r8
   215e0:	mov	r1, r9
   215e4:	mov	r0, r6
   215e8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   215ec:	mov	r9, r0
   215f0:	sub	r3, r8, r9
   215f4:	cmp	r3, #1
   215f8:	ble	2160c <_start@@Base+0xd00c>
   215fc:	ldrb	r3, [r9]
   21600:	cmp	r3, #32
   21604:	bhi	21620 <_start@@Base+0xd020>
   21608:	beq	216e0 <_start@@Base+0xd0e0>
   2160c:	mov	r2, r8
   21610:	mov	r1, r9
   21614:	mov	r0, r6
   21618:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2161c:	mov	r9, r0
   21620:	cmp	r8, r9
   21624:	moveq	r3, #0
   21628:	streq	r3, [sp, #220]	; 0xdc
   2162c:	beq	21668 <_start@@Base+0xd068>
   21630:	ldrb	r3, [r9]
   21634:	cmp	r3, #44	; 0x2c
   21638:	beq	21740 <_start@@Base+0xd140>
   2163c:	mov	r3, #0
   21640:	str	r3, [sp, #220]	; 0xdc
   21644:	ldrb	r3, [r9]
   21648:	cmp	r3, #125	; 0x7d
   2164c:	beq	216f4 <_start@@Base+0xd0f4>
   21650:	mov	r3, #10
   21654:	mov	r2, r8
   21658:	mov	r1, r9
   2165c:	mov	r0, r6
   21660:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   21664:	mov	r9, r0
   21668:	ldr	r3, [sp, #220]	; 0xdc
   2166c:	cmp	r3, #0
   21670:	beq	217e8 <_start@@Base+0xd1e8>
   21674:	cmp	r8, r9
   21678:	beq	216a4 <_start@@Base+0xd0a4>
   2167c:	ldrb	r3, [r9]
   21680:	cmp	r3, #34	; 0x22
   21684:	addeq	r9, r9, #1
   21688:	moveq	r3, #0
   2168c:	streq	r3, [r6, #12]
   21690:	beq	216a4 <_start@@Base+0xd0a4>
   21694:	cmp	r3, #46	; 0x2e
   21698:	movne	r3, #1
   2169c:	strne	r3, [r6, #12]
   216a0:	beq	211e4 <_start@@Base+0xcbe4>
   216a4:	sub	r3, r8, r9
   216a8:	cmp	r3, #8
   216ac:	bhi	21200 <_start@@Base+0xcc00>
   216b0:	sub	r3, r3, #1
   216b4:	cmp	r3, #7
   216b8:	ldrls	pc, [pc, r3, lsl #2]
   216bc:	b	212e8 <_start@@Base+0xcce8>
   216c0:	ldrdeq	r1, [r2], -ip
   216c4:	ldrdeq	r1, [r2], -r0
   216c8:	andeq	r1, r2, r4, asr #5
   216cc:			; <UNDEFINED> instruction: 0x000212b8
   216d0:	andeq	r1, r2, ip, lsr #5
   216d4:	andeq	r1, r2, r0, lsr #5
   216d8:	muleq	r2, r4, r2
   216dc:	andeq	r1, r2, r0, lsl #4
   216e0:	ldrb	r3, [r9, #1]
   216e4:	cmp	r3, #32
   216e8:	addhi	r9, r9, #1
   216ec:	bls	2160c <_start@@Base+0xd00c>
   216f0:	b	21620 <_start@@Base+0xd020>
   216f4:	add	r1, r9, #1
   216f8:	sub	r3, r8, r1
   216fc:	cmp	r3, #1
   21700:	ble	21718 <_start@@Base+0xd118>
   21704:	ldrb	r3, [r9, #1]
   21708:	cmp	r3, #32
   2170c:	movhi	r9, r1
   21710:	bhi	21668 <_start@@Base+0xd068>
   21714:	beq	2172c <_start@@Base+0xd12c>
   21718:	mov	r2, r8
   2171c:	mov	r0, r6
   21720:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   21724:	mov	r9, r0
   21728:	b	21668 <_start@@Base+0xd068>
   2172c:	ldrb	r3, [r9, #2]
   21730:	cmp	r3, #32
   21734:	addhi	r9, r9, #2
   21738:	bls	21718 <_start@@Base+0xd118>
   2173c:	b	21668 <_start@@Base+0xd068>
   21740:	add	r1, r9, #1
   21744:	sub	r3, r8, r1
   21748:	cmp	r3, #1
   2174c:	ble	21764 <_start@@Base+0xd164>
   21750:	ldrb	r3, [r9, #1]
   21754:	cmp	r3, #32
   21758:	movhi	r9, r1
   2175c:	bhi	21774 <_start@@Base+0xd174>
   21760:	beq	217b0 <_start@@Base+0xd1b0>
   21764:	mov	r2, r8
   21768:	mov	r0, r6
   2176c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   21770:	mov	r9, r0
   21774:	cmp	r8, r9
   21778:	beq	217c4 <_start@@Base+0xd1c4>
   2177c:	ldrb	r3, [r9]
   21780:	cmp	r3, #125	; 0x7d
   21784:	movne	r3, #1
   21788:	strne	r3, [sp, #220]	; 0xdc
   2178c:	bne	21668 <_start@@Base+0xd068>
   21790:	mov	r3, #0
   21794:	str	r3, [sp, #220]	; 0xdc
   21798:	mov	r2, r8
   2179c:	add	r1, r9, #1
   217a0:	mov	r0, r6
   217a4:	bl	1809c <_start@@Base+0x3a9c>
   217a8:	mov	r9, r0
   217ac:	b	21668 <_start@@Base+0xd068>
   217b0:	ldrb	r3, [r9, #2]
   217b4:	cmp	r3, #32
   217b8:	addhi	r9, r9, #2
   217bc:	bls	21764 <_start@@Base+0xd164>
   217c0:	b	21774 <_start@@Base+0xd174>
   217c4:	mov	r3, #0
   217c8:	str	r3, [sp, #220]	; 0xdc
   217cc:	mov	r3, #10
   217d0:	mov	r2, r8
   217d4:	mov	r1, r9
   217d8:	mov	r0, r6
   217dc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   217e0:	mov	r9, r0
   217e4:	b	21668 <_start@@Base+0xd068>
   217e8:	strd	sl, [sp, #192]	; 0xc0
   217ec:	ldr	r3, [r6, #24]
   217f0:	cmp	r3, #0
   217f4:	beq	21800 <_start@@Base+0xd200>
   217f8:	mov	r5, r6
   217fc:	b	2118c <_start@@Base+0xcb8c>
   21800:	ldr	r0, [r6]
   21804:	bl	286bc <flatcc_builder_end_table@@Base>
   21808:	subs	r4, r0, #0
   2180c:	beq	2182c <_start@@Base+0xd22c>
   21810:	mov	r1, #1
   21814:	ldr	r0, [r6]
   21818:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   2181c:	cmp	r0, #0
   21820:	beq	22f1c <_start@@Base+0xe91c>
   21824:	str	r4, [r0]
   21828:	b	22a54 <_start@@Base+0xe454>
   2182c:	mov	r5, r6
   21830:	b	2118c <_start@@Base+0xcb8c>
   21834:	strd	sl, [sp, #192]	; 0xc0
   21838:	mov	r5, r6
   2183c:	b	2118c <_start@@Base+0xcb8c>
   21840:	strd	sl, [sp, #192]	; 0xc0
   21844:	mov	r5, r6
   21848:	b	2118c <_start@@Base+0xcb8c>
   2184c:	mov	r3, #5
   21850:	mov	r2, r8
   21854:	mov	r1, r4
   21858:	mov	r0, r6
   2185c:	bl	18490 <_start@@Base+0x3e90>
   21860:	mov	r9, r0
   21864:	cmp	r4, r0
   21868:	beq	222b8 <_start@@Base+0xdcb8>
   2186c:	mov	r1, #9
   21870:	ldr	r0, [r6]
   21874:	bl	27be4 <flatcc_builder_start_table@@Base>
   21878:	cmp	r0, #0
   2187c:	beq	218e0 <_start@@Base+0xd2e0>
   21880:	mov	r5, r6
   21884:	mov	r3, #33	; 0x21
   21888:	mov	r2, r8
   2188c:	mov	r1, r9
   21890:	mov	r0, r5
   21894:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   21898:	mov	r9, r0
   2189c:	mov	r3, #33	; 0x21
   218a0:	mov	r2, r8
   218a4:	mov	r1, r9
   218a8:	mov	r0, r5
   218ac:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   218b0:	mov	r9, r0
   218b4:	ldr	r3, [sp, #240]	; 0xf0
   218b8:	cmp	r3, #0
   218bc:	beq	22ec0 <_start@@Base+0xe8c0>
   218c0:	mov	r1, #0
   218c4:	ldr	r0, [r5]
   218c8:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   218cc:	cmp	r0, #0
   218d0:	beq	22ed8 <_start@@Base+0xe8d8>
   218d4:	ldr	r3, [sp, #240]	; 0xf0
   218d8:	str	r3, [r0]
   218dc:	b	22cec <_start@@Base+0xe6ec>
   218e0:	add	r3, sp, #216	; 0xd8
   218e4:	mov	r2, r8
   218e8:	mov	r1, r9
   218ec:	mov	r0, r6
   218f0:	bl	18650 <_start@@Base+0x4050>
   218f4:	mov	r9, r0
   218f8:	ldr	r3, [sp, #216]	; 0xd8
   218fc:	cmp	r3, #0
   21900:	beq	221e0 <_start@@Base+0xdbe0>
   21904:	ldrd	sl, [sp, #176]	; 0xb0
   21908:	b	21c94 <_start@@Base+0xd694>
   2190c:	mov	r3, #5
   21910:	mov	r2, r8
   21914:	mov	r1, r9
   21918:	mov	r0, r6
   2191c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   21920:	mov	r9, r0
   21924:	b	21cc4 <_start@@Base+0xd6c4>
   21928:	add	r9, r9, #8
   2192c:	mov	r1, r8
   21930:	mov	r0, r9
   21934:	bl	146f0 <_start@@Base+0xf0>
   21938:	mov	r3, #0
   2193c:	str	r3, [sp, #136]	; 0x88
   21940:	and	r3, r1, #-16777216	; 0xff000000
   21944:	str	r3, [sp, #140]	; 0x8c
   21948:	ldrd	r2, [sp, #136]	; 0x88
   2194c:	cmp	r3, #889192448	; 0x35000000
   21950:	cmpeq	r2, #0
   21954:	beq	21970 <_start@@Base+0xd370>
   21958:	mov	r2, r8
   2195c:	mov	r1, r9
   21960:	mov	r0, r6
   21964:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   21968:	mov	r9, r0
   2196c:	b	21c70 <_start@@Base+0xd670>
   21970:	mov	r3, #1
   21974:	mov	r2, r8
   21978:	mov	r1, r9
   2197c:	mov	r0, r6
   21980:	bl	18490 <_start@@Base+0x3e90>
   21984:	mov	r7, r0
   21988:	cmp	r9, r0
   2198c:	beq	21a38 <_start@@Base+0xd438>
   21990:	mov	r3, #0
   21994:	str	r3, [sp, #224]	; 0xe0
   21998:	add	r3, sp, #224	; 0xe0
   2199c:	mov	r2, r8
   219a0:	mov	r1, r0
   219a4:	mov	r0, r6
   219a8:	bl	17d94 <_start@@Base+0x3794>
   219ac:	mov	r9, r0
   219b0:	cmp	r7, r0
   219b4:	beq	219f8 <_start@@Base+0xd3f8>
   219b8:	ldr	r3, [sp, #224]	; 0xe0
   219bc:	cmp	r3, #0
   219c0:	bne	219d0 <_start@@Base+0xd3d0>
   219c4:	ldr	r3, [r6, #8]
   219c8:	tst	r3, #2
   219cc:	beq	21c70 <_start@@Base+0xd670>
   219d0:	mov	r3, #4
   219d4:	mov	r2, r3
   219d8:	mov	r1, #1
   219dc:	ldr	r0, [r6]
   219e0:	bl	297a8 <flatcc_builder_table_add@@Base>
   219e4:	cmp	r0, #0
   219e8:	beq	22228 <_start@@Base+0xdc28>
   219ec:	ldr	r3, [sp, #224]	; 0xe0
   219f0:	str	r3, [r0]
   219f4:	b	21c70 <_start@@Base+0xd670>
   219f8:	add	r3, sp, #224	; 0xe0
   219fc:	str	r3, [sp]
   21a00:	ldr	r3, [pc, #-1096]	; 215c0 <_start@@Base+0xcfc0>
   21a04:	mov	r2, r8
   21a08:	mov	r1, r0
   21a0c:	mov	r0, r6
   21a10:	bl	1a4a0 <_start@@Base+0x5ea0>
   21a14:	cmp	r8, r0
   21a18:	cmpne	r9, r0
   21a1c:	beq	21a28 <_start@@Base+0xd428>
   21a20:	mov	r9, r0
   21a24:	b	219b8 <_start@@Base+0xd3b8>
   21a28:	strd	sl, [sp, #176]	; 0xb0
   21a2c:	mov	r5, r6
   21a30:	mov	r9, r0
   21a34:	b	21884 <_start@@Base+0xd284>
   21a38:	mov	r2, r8
   21a3c:	mov	r1, r0
   21a40:	mov	r0, r6
   21a44:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   21a48:	mov	r9, r0
   21a4c:	b	21c70 <_start@@Base+0xd670>
   21a50:	mov	r3, #4
   21a54:	mov	r2, r8
   21a58:	mov	r1, r9
   21a5c:	mov	r0, r6
   21a60:	bl	18490 <_start@@Base+0x3e90>
   21a64:	cmp	r0, r9
   21a68:	beq	21d44 <_start@@Base+0xd744>
   21a6c:	add	r3, sp, #220	; 0xdc
   21a70:	mov	r2, r8
   21a74:	mov	r1, r0
   21a78:	mov	r0, r6
   21a7c:	bl	2f708 <flatcc_json_parser_build_string@@Base>
   21a80:	mov	r9, r0
   21a84:	ldr	r3, [sp, #220]	; 0xdc
   21a88:	cmp	r3, sl
   21a8c:	beq	22234 <_start@@Base+0xdc34>
   21a90:	mov	r1, sl
   21a94:	ldr	r0, [r6]
   21a98:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   21a9c:	cmp	r0, #0
   21aa0:	beq	22240 <_start@@Base+0xdc40>
   21aa4:	ldr	r3, [sp, #220]	; 0xdc
   21aa8:	str	r3, [r0]
   21aac:	b	21c70 <_start@@Base+0xd670>
   21ab0:	mov	r3, #8
   21ab4:	mov	r2, r8
   21ab8:	mov	r1, r9
   21abc:	mov	r0, r6
   21ac0:	bl	18490 <_start@@Base+0x3e90>
   21ac4:	mov	r7, r0
   21ac8:	cmp	r0, r9
   21acc:	beq	21b7c <_start@@Base+0xd57c>
   21ad0:	mov	r2, #0
   21ad4:	mov	r3, #0
   21ad8:	strd	r2, [sp, #224]	; 0xe0
   21adc:	add	r3, sp, #224	; 0xe0
   21ae0:	mov	r2, r8
   21ae4:	mov	r1, r0
   21ae8:	mov	r0, r6
   21aec:	bl	17fc0 <_start@@Base+0x39c0>
   21af0:	mov	r9, r0
   21af4:	cmp	r7, r0
   21af8:	beq	21b3c <_start@@Base+0xd53c>
   21afc:	ldrd	r2, [sp, #224]	; 0xe0
   21b00:	orrs	r3, r2, r3
   21b04:	bne	21b14 <_start@@Base+0xd514>
   21b08:	ldr	r3, [r6, #8]
   21b0c:	tst	r3, #2
   21b10:	beq	21c70 <_start@@Base+0xd670>
   21b14:	mov	r3, #8
   21b18:	mov	r2, r3
   21b1c:	mov	r1, #3
   21b20:	ldr	r0, [r6]
   21b24:	bl	297a8 <flatcc_builder_table_add@@Base>
   21b28:	cmp	r0, #0
   21b2c:	beq	2224c <_start@@Base+0xdc4c>
   21b30:	ldrd	r2, [sp, #224]	; 0xe0
   21b34:	strd	r2, [r0]
   21b38:	b	21c70 <_start@@Base+0xd670>
   21b3c:	add	r3, sp, #224	; 0xe0
   21b40:	str	r3, [sp]
   21b44:	ldr	r3, [pc, #-1416]	; 215c4 <_start@@Base+0xcfc4>
   21b48:	mov	r2, r8
   21b4c:	mov	r1, r0
   21b50:	mov	r0, r6
   21b54:	bl	1b5dc <_start@@Base+0x6fdc>
   21b58:	cmp	r8, r0
   21b5c:	cmpne	r9, r0
   21b60:	beq	21b6c <_start@@Base+0xd56c>
   21b64:	mov	r9, r0
   21b68:	b	21afc <_start@@Base+0xd4fc>
   21b6c:	strd	sl, [sp, #176]	; 0xb0
   21b70:	mov	r5, r6
   21b74:	mov	r9, r0
   21b78:	b	21884 <_start@@Base+0xd284>
   21b7c:	mov	r2, r8
   21b80:	mov	r1, r9
   21b84:	mov	r0, r6
   21b88:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   21b8c:	mov	r9, r0
   21b90:	b	21c70 <_start@@Base+0xd670>
   21b94:	mov	r3, #4
   21b98:	mov	r2, r8
   21b9c:	mov	r1, r9
   21ba0:	mov	r0, r6
   21ba4:	bl	18490 <_start@@Base+0x3e90>
   21ba8:	cmp	r0, r9
   21bac:	beq	21bf4 <_start@@Base+0xd5f4>
   21bb0:	add	r3, sp, #220	; 0xdc
   21bb4:	mov	r2, r8
   21bb8:	mov	r1, r0
   21bbc:	mov	r0, r6
   21bc0:	bl	2f708 <flatcc_json_parser_build_string@@Base>
   21bc4:	mov	r9, r0
   21bc8:	ldr	r3, [sp, #220]	; 0xdc
   21bcc:	cmp	r3, #0
   21bd0:	beq	22258 <_start@@Base+0xdc58>
   21bd4:	mov	r1, #2
   21bd8:	ldr	r0, [r6]
   21bdc:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   21be0:	cmp	r0, #0
   21be4:	beq	22264 <_start@@Base+0xdc64>
   21be8:	ldr	r3, [sp, #220]	; 0xdc
   21bec:	str	r3, [r0]
   21bf0:	b	21c70 <_start@@Base+0xd670>
   21bf4:	mov	r2, r8
   21bf8:	mov	r1, r9
   21bfc:	mov	r0, r6
   21c00:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   21c04:	mov	r9, r0
   21c08:	b	21c70 <_start@@Base+0xd670>
   21c0c:	add	r3, pc, #924	; 0x39c
   21c10:	ldrd	r2, [r3]
   21c14:	cmp	r1, r3
   21c18:	cmpeq	r0, r2
   21c1c:	beq	21d5c <_start@@Base+0xd75c>
   21c20:	mov	r3, #0
   21c24:	str	r3, [sp, #88]	; 0x58
   21c28:	str	r1, [sp, #92]	; 0x5c
   21c2c:	ldrd	r2, [sp, #88]	; 0x58
   21c30:	mov	r4, #0
   21c34:	movw	r5, #25443	; 0x6363
   21c38:	movt	r5, #25443	; 0x6363
   21c3c:	cmp	r3, r5
   21c40:	cmpeq	r2, r4
   21c44:	beq	21f50 <_start@@Base+0xd950>
   21c48:	add	r3, pc, #872	; 0x368
   21c4c:	ldrd	r2, [r3]
   21c50:	cmp	r1, r3
   21c54:	cmpeq	r0, r2
   21c58:	beq	21fe8 <_start@@Base+0xd9e8>
   21c5c:	mov	r2, r8
   21c60:	mov	r1, r9
   21c64:	mov	r0, r6
   21c68:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   21c6c:	mov	r9, r0
   21c70:	add	r3, sp, #216	; 0xd8
   21c74:	mov	r2, r8
   21c78:	mov	r1, r9
   21c7c:	mov	r0, r6
   21c80:	bl	180ec <_start@@Base+0x3aec>
   21c84:	mov	r9, r0
   21c88:	ldr	r3, [sp, #216]	; 0xd8
   21c8c:	cmp	r3, #0
   21c90:	beq	221dc <_start@@Base+0xdbdc>
   21c94:	cmp	r8, r9
   21c98:	beq	21cc4 <_start@@Base+0xd6c4>
   21c9c:	ldrb	r3, [r9]
   21ca0:	cmp	r3, #34	; 0x22
   21ca4:	addeq	r9, r9, #1
   21ca8:	moveq	r3, #0
   21cac:	streq	r3, [r6, #12]
   21cb0:	beq	21cc4 <_start@@Base+0xd6c4>
   21cb4:	cmp	r3, #46	; 0x2e
   21cb8:	movne	r3, #1
   21cbc:	strne	r3, [r6, #12]
   21cc0:	beq	2190c <_start@@Base+0xd30c>
   21cc4:	mov	r1, r8
   21cc8:	mov	r0, r9
   21ccc:	bl	146f0 <_start@@Base+0xf0>
   21cd0:	add	r3, pc, #744	; 0x2e8
   21cd4:	ldrd	r2, [r3]
   21cd8:	cmp	r1, r3
   21cdc:	cmpeq	r0, r2
   21ce0:	bhi	21c0c <_start@@Base+0xd60c>
   21ce4:	add	r3, pc, #732	; 0x2dc
   21ce8:	ldrd	r2, [r3]
   21cec:	cmp	r1, r3
   21cf0:	cmpeq	r0, r2
   21cf4:	beq	21928 <_start@@Base+0xd328>
   21cf8:	mov	sl, #0
   21cfc:	mov	fp, r1
   21d00:	mov	r2, #0
   21d04:	movw	r3, #24929	; 0x6161
   21d08:	movt	r3, #24929	; 0x6161
   21d0c:	cmp	r1, r3
   21d10:	cmpeq	sl, r2
   21d14:	beq	21a50 <_start@@Base+0xd450>
   21d18:	add	r3, pc, #688	; 0x2b0
   21d1c:	ldrd	r2, [r3]
   21d20:	cmp	r1, r3
   21d24:	cmpeq	r0, r2
   21d28:	beq	21ab0 <_start@@Base+0xd4b0>
   21d2c:	mov	r2, #0
   21d30:	movw	r3, #25186	; 0x6262
   21d34:	movt	r3, #25186	; 0x6262
   21d38:	cmp	r1, r3
   21d3c:	cmpeq	sl, r2
   21d40:	beq	21b94 <_start@@Base+0xd594>
   21d44:	mov	r2, r8
   21d48:	mov	r1, r9
   21d4c:	mov	r0, r6
   21d50:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   21d54:	mov	r9, r0
   21d58:	b	21c70 <_start@@Base+0xd670>
   21d5c:	mov	r3, #8
   21d60:	mov	r2, r8
   21d64:	mov	r1, r9
   21d68:	mov	r0, r6
   21d6c:	bl	18490 <_start@@Base+0x3e90>
   21d70:	mov	r7, r0
   21d74:	cmp	r0, r9
   21d78:	beq	21e28 <_start@@Base+0xd828>
   21d7c:	mov	r2, #0
   21d80:	mov	r3, #0
   21d84:	strd	r2, [sp, #224]	; 0xe0
   21d88:	add	r3, sp, #224	; 0xe0
   21d8c:	mov	r2, r8
   21d90:	mov	r1, r0
   21d94:	mov	r0, r6
   21d98:	bl	17fc0 <_start@@Base+0x39c0>
   21d9c:	mov	r9, r0
   21da0:	cmp	r7, r0
   21da4:	beq	21de8 <_start@@Base+0xd7e8>
   21da8:	ldrd	r2, [sp, #224]	; 0xe0
   21dac:	orrs	r3, r2, r3
   21db0:	bne	21dc0 <_start@@Base+0xd7c0>
   21db4:	ldr	r3, [r6, #8]
   21db8:	tst	r3, #2
   21dbc:	beq	21c70 <_start@@Base+0xd670>
   21dc0:	mov	r3, #8
   21dc4:	mov	r2, r3
   21dc8:	mov	r1, #5
   21dcc:	ldr	r0, [r6]
   21dd0:	bl	297a8 <flatcc_builder_table_add@@Base>
   21dd4:	cmp	r0, #0
   21dd8:	beq	22270 <_start@@Base+0xdc70>
   21ddc:	ldrd	r2, [sp, #224]	; 0xe0
   21de0:	strd	r2, [r0]
   21de4:	b	21c70 <_start@@Base+0xd670>
   21de8:	add	r3, sp, #224	; 0xe0
   21dec:	str	r3, [sp]
   21df0:	ldr	r3, [pc, #480]	; 21fd8 <_start@@Base+0xd9d8>
   21df4:	mov	r2, r8
   21df8:	mov	r1, r0
   21dfc:	mov	r0, r6
   21e00:	bl	1b5dc <_start@@Base+0x6fdc>
   21e04:	cmp	r8, r0
   21e08:	cmpne	r9, r0
   21e0c:	beq	21e18 <_start@@Base+0xd818>
   21e10:	mov	r9, r0
   21e14:	b	21da8 <_start@@Base+0xd7a8>
   21e18:	strd	sl, [sp, #176]	; 0xb0
   21e1c:	mov	r5, r6
   21e20:	mov	r9, r0
   21e24:	b	21884 <_start@@Base+0xd284>
   21e28:	add	r9, r9, #8
   21e2c:	mov	r1, r8
   21e30:	mov	r0, r9
   21e34:	bl	146f0 <_start@@Base+0xf0>
   21e38:	mov	r3, #0
   21e3c:	str	r3, [sp, #160]	; 0xa0
   21e40:	and	r3, r1, #-16777216	; 0xff000000
   21e44:	str	r3, [sp, #164]	; 0xa4
   21e48:	ldrd	r2, [sp, #160]	; 0xa0
   21e4c:	cmp	r3, #889192448	; 0x35000000
   21e50:	cmpeq	r2, #0
   21e54:	beq	21e70 <_start@@Base+0xd870>
   21e58:	mov	r2, r8
   21e5c:	mov	r1, r9
   21e60:	mov	r0, r6
   21e64:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   21e68:	mov	r9, r0
   21e6c:	b	21c70 <_start@@Base+0xd670>
   21e70:	mov	r3, #1
   21e74:	mov	r2, r8
   21e78:	mov	r1, r9
   21e7c:	mov	r0, r6
   21e80:	bl	18490 <_start@@Base+0x3e90>
   21e84:	mov	r7, r0
   21e88:	cmp	r9, r0
   21e8c:	beq	21f38 <_start@@Base+0xd938>
   21e90:	mov	r3, #0
   21e94:	str	r3, [sp, #224]	; 0xe0
   21e98:	add	r3, sp, #224	; 0xe0
   21e9c:	mov	r2, r8
   21ea0:	mov	r1, r0
   21ea4:	mov	r0, r6
   21ea8:	bl	17d94 <_start@@Base+0x3794>
   21eac:	mov	r9, r0
   21eb0:	cmp	r7, r0
   21eb4:	beq	21ef8 <_start@@Base+0xd8f8>
   21eb8:	ldr	r3, [sp, #224]	; 0xe0
   21ebc:	cmp	r3, #0
   21ec0:	bne	21ed0 <_start@@Base+0xd8d0>
   21ec4:	ldr	r3, [r6, #8]
   21ec8:	tst	r3, #2
   21ecc:	beq	21c70 <_start@@Base+0xd670>
   21ed0:	mov	r3, #4
   21ed4:	mov	r2, r3
   21ed8:	mov	r1, #6
   21edc:	ldr	r0, [r6]
   21ee0:	bl	297a8 <flatcc_builder_table_add@@Base>
   21ee4:	cmp	r0, #0
   21ee8:	beq	2227c <_start@@Base+0xdc7c>
   21eec:	ldr	r3, [sp, #224]	; 0xe0
   21ef0:	str	r3, [r0]
   21ef4:	b	21c70 <_start@@Base+0xd670>
   21ef8:	add	r3, sp, #224	; 0xe0
   21efc:	str	r3, [sp]
   21f00:	ldr	r3, [pc, #212]	; 21fdc <_start@@Base+0xd9dc>
   21f04:	mov	r2, r8
   21f08:	mov	r1, r0
   21f0c:	mov	r0, r6
   21f10:	bl	1a4a0 <_start@@Base+0x5ea0>
   21f14:	cmp	r8, r0
   21f18:	cmpne	r9, r0
   21f1c:	beq	21f28 <_start@@Base+0xd928>
   21f20:	mov	r9, r0
   21f24:	b	21eb8 <_start@@Base+0xd8b8>
   21f28:	strd	sl, [sp, #176]	; 0xb0
   21f2c:	mov	r5, r6
   21f30:	mov	r9, r0
   21f34:	b	21884 <_start@@Base+0xd284>
   21f38:	mov	r2, r8
   21f3c:	mov	r1, r0
   21f40:	mov	r0, r6
   21f44:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   21f48:	mov	r9, r0
   21f4c:	b	21c70 <_start@@Base+0xd670>
   21f50:	mov	r3, #4
   21f54:	mov	r2, r8
   21f58:	mov	r1, r9
   21f5c:	mov	r0, r6
   21f60:	bl	18490 <_start@@Base+0x3e90>
   21f64:	cmp	r0, r9
   21f68:	beq	21c5c <_start@@Base+0xd65c>
   21f6c:	add	r3, sp, #220	; 0xdc
   21f70:	mov	r2, r8
   21f74:	mov	r1, r0
   21f78:	mov	r0, r6
   21f7c:	bl	2f708 <flatcc_json_parser_build_string@@Base>
   21f80:	mov	r9, r0
   21f84:	ldr	r3, [sp, #220]	; 0xdc
   21f88:	cmp	r3, #0
   21f8c:	beq	22288 <_start@@Base+0xdc88>
   21f90:	mov	r1, #4
   21f94:	ldr	r0, [r6]
   21f98:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   21f9c:	cmp	r0, #0
   21fa0:	beq	22294 <_start@@Base+0xdc94>
   21fa4:	ldr	r3, [sp, #220]	; 0xdc
   21fa8:	str	r3, [r0]
   21fac:	b	21c70 <_start@@Base+0xd670>
   21fb0:	teqcc	r2, r4, lsr r3
   21fb4:	cmnvs	r3, #-1946157055	; 0x8c000001
   21fb8:	teqcc	r2, r4, lsr r3
   21fbc:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   21fc0:			; <UNDEFINED> instruction: 0xffffffff
   21fc4:	cmnvs	r3, #-2013265919	; 0x88000001
   21fc8:	teqcc	r2, r4, lsr r3
   21fcc:	cmnvs	r1, r1, ror #2
   21fd0:	teqcc	r2, r4, lsr r3
   21fd4:	rsbvs	r6, r2, #536870918	; 0x20000006
   21fd8:			; <UNDEFINED> instruction: 0x000552bc
   21fdc:	andeq	r5, r5, r8, asr #5
   21fe0:	ldrdeq	r5, [r5], -r4
   21fe4:	andeq	r5, r5, r0, ror #5
   21fe8:	mov	r3, #8
   21fec:	mov	r2, r8
   21ff0:	mov	r1, r9
   21ff4:	mov	r0, r6
   21ff8:	bl	18490 <_start@@Base+0x3e90>
   21ffc:	mov	r7, r0
   22000:	cmp	r0, r9
   22004:	beq	220b4 <_start@@Base+0xdab4>
   22008:	mov	r2, #0
   2200c:	mov	r3, #0
   22010:	strd	r2, [sp, #224]	; 0xe0
   22014:	add	r3, sp, #224	; 0xe0
   22018:	mov	r2, r8
   2201c:	mov	r1, r0
   22020:	mov	r0, r6
   22024:	bl	17fc0 <_start@@Base+0x39c0>
   22028:	mov	r9, r0
   2202c:	cmp	r7, r0
   22030:	beq	22074 <_start@@Base+0xda74>
   22034:	ldrd	r2, [sp, #224]	; 0xe0
   22038:	orrs	r3, r2, r3
   2203c:	bne	2204c <_start@@Base+0xda4c>
   22040:	ldr	r3, [r6, #8]
   22044:	tst	r3, #2
   22048:	beq	21c70 <_start@@Base+0xd670>
   2204c:	mov	r3, #8
   22050:	mov	r2, r3
   22054:	mov	r1, #7
   22058:	ldr	r0, [r6]
   2205c:	bl	297a8 <flatcc_builder_table_add@@Base>
   22060:	cmp	r0, #0
   22064:	beq	222a0 <_start@@Base+0xdca0>
   22068:	ldrd	r2, [sp, #224]	; 0xe0
   2206c:	strd	r2, [r0]
   22070:	b	21c70 <_start@@Base+0xd670>
   22074:	add	r3, sp, #224	; 0xe0
   22078:	str	r3, [sp]
   2207c:	ldr	r3, [pc, #-164]	; 21fe0 <_start@@Base+0xd9e0>
   22080:	mov	r2, r8
   22084:	mov	r1, r0
   22088:	mov	r0, r6
   2208c:	bl	1b5dc <_start@@Base+0x6fdc>
   22090:	cmp	r8, r0
   22094:	cmpne	r9, r0
   22098:	beq	220a4 <_start@@Base+0xdaa4>
   2209c:	mov	r9, r0
   220a0:	b	22034 <_start@@Base+0xda34>
   220a4:	strd	sl, [sp, #176]	; 0xb0
   220a8:	mov	r5, r6
   220ac:	mov	r9, r0
   220b0:	b	21884 <_start@@Base+0xd284>
   220b4:	add	r9, r9, #8
   220b8:	mov	r1, r8
   220bc:	mov	r0, r9
   220c0:	bl	146f0 <_start@@Base+0xf0>
   220c4:	mov	r3, #0
   220c8:	str	r3, [sp, #152]	; 0x98
   220cc:	and	r3, r1, #-16777216	; 0xff000000
   220d0:	str	r3, [sp, #156]	; 0x9c
   220d4:	ldrd	r2, [sp, #152]	; 0x98
   220d8:	cmp	r3, #889192448	; 0x35000000
   220dc:	cmpeq	r2, #0
   220e0:	beq	220fc <_start@@Base+0xdafc>
   220e4:	mov	r2, r8
   220e8:	mov	r1, r9
   220ec:	mov	r0, r6
   220f0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   220f4:	mov	r9, r0
   220f8:	b	21c70 <_start@@Base+0xd670>
   220fc:	mov	r3, #1
   22100:	mov	r2, r8
   22104:	mov	r1, r9
   22108:	mov	r0, r6
   2210c:	bl	18490 <_start@@Base+0x3e90>
   22110:	mov	r7, r0
   22114:	cmp	r9, r0
   22118:	beq	221c4 <_start@@Base+0xdbc4>
   2211c:	mov	r3, #0
   22120:	str	r3, [sp, #224]	; 0xe0
   22124:	add	r3, sp, #224	; 0xe0
   22128:	mov	r2, r8
   2212c:	mov	r1, r0
   22130:	mov	r0, r6
   22134:	bl	17d94 <_start@@Base+0x3794>
   22138:	mov	r9, r0
   2213c:	cmp	r7, r0
   22140:	beq	22184 <_start@@Base+0xdb84>
   22144:	ldr	r3, [sp, #224]	; 0xe0
   22148:	cmp	r3, #0
   2214c:	bne	2215c <_start@@Base+0xdb5c>
   22150:	ldr	r3, [r6, #8]
   22154:	tst	r3, #2
   22158:	beq	21c70 <_start@@Base+0xd670>
   2215c:	mov	r3, #4
   22160:	mov	r2, r3
   22164:	mov	r1, #8
   22168:	ldr	r0, [r6]
   2216c:	bl	297a8 <flatcc_builder_table_add@@Base>
   22170:	cmp	r0, #0
   22174:	beq	222ac <_start@@Base+0xdcac>
   22178:	ldr	r3, [sp, #224]	; 0xe0
   2217c:	str	r3, [r0]
   22180:	b	21c70 <_start@@Base+0xd670>
   22184:	add	r3, sp, #224	; 0xe0
   22188:	str	r3, [sp]
   2218c:	ldr	r3, [pc, #-432]	; 21fe4 <_start@@Base+0xd9e4>
   22190:	mov	r2, r8
   22194:	mov	r1, r0
   22198:	mov	r0, r6
   2219c:	bl	1a4a0 <_start@@Base+0x5ea0>
   221a0:	cmp	r8, r0
   221a4:	cmpne	r9, r0
   221a8:	beq	221b4 <_start@@Base+0xdbb4>
   221ac:	mov	r9, r0
   221b0:	b	22144 <_start@@Base+0xdb44>
   221b4:	strd	sl, [sp, #176]	; 0xb0
   221b8:	mov	r5, r6
   221bc:	mov	r9, r0
   221c0:	b	21884 <_start@@Base+0xd284>
   221c4:	mov	r2, r8
   221c8:	mov	r1, r0
   221cc:	mov	r0, r6
   221d0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   221d4:	mov	r9, r0
   221d8:	b	21c70 <_start@@Base+0xd670>
   221dc:	strd	sl, [sp, #176]	; 0xb0
   221e0:	ldr	r3, [r6, #24]
   221e4:	cmp	r3, #0
   221e8:	beq	221f4 <_start@@Base+0xdbf4>
   221ec:	mov	r5, r6
   221f0:	b	21884 <_start@@Base+0xd284>
   221f4:	ldr	r0, [r6]
   221f8:	bl	286bc <flatcc_builder_end_table@@Base>
   221fc:	subs	r4, r0, #0
   22200:	beq	22220 <_start@@Base+0xdc20>
   22204:	mov	r1, #0
   22208:	ldr	r0, [r6]
   2220c:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   22210:	cmp	r0, #0
   22214:	beq	22f2c <_start@@Base+0xe92c>
   22218:	str	r4, [r0]
   2221c:	b	22a54 <_start@@Base+0xe454>
   22220:	mov	r5, r6
   22224:	b	21884 <_start@@Base+0xd284>
   22228:	strd	sl, [sp, #176]	; 0xb0
   2222c:	mov	r5, r6
   22230:	b	21884 <_start@@Base+0xd284>
   22234:	strd	sl, [sp, #176]	; 0xb0
   22238:	mov	r5, r6
   2223c:	b	21884 <_start@@Base+0xd284>
   22240:	strd	sl, [sp, #176]	; 0xb0
   22244:	mov	r5, r6
   22248:	b	21884 <_start@@Base+0xd284>
   2224c:	strd	sl, [sp, #176]	; 0xb0
   22250:	mov	r5, r6
   22254:	b	21884 <_start@@Base+0xd284>
   22258:	strd	sl, [sp, #176]	; 0xb0
   2225c:	mov	r5, r6
   22260:	b	21884 <_start@@Base+0xd284>
   22264:	strd	sl, [sp, #176]	; 0xb0
   22268:	mov	r5, r6
   2226c:	b	21884 <_start@@Base+0xd284>
   22270:	strd	sl, [sp, #176]	; 0xb0
   22274:	mov	r5, r6
   22278:	b	21884 <_start@@Base+0xd284>
   2227c:	strd	sl, [sp, #176]	; 0xb0
   22280:	mov	r5, r6
   22284:	b	21884 <_start@@Base+0xd284>
   22288:	strd	sl, [sp, #176]	; 0xb0
   2228c:	mov	r5, r6
   22290:	b	21884 <_start@@Base+0xd284>
   22294:	strd	sl, [sp, #176]	; 0xb0
   22298:	mov	r5, r6
   2229c:	b	21884 <_start@@Base+0xd284>
   222a0:	strd	sl, [sp, #176]	; 0xb0
   222a4:	mov	r5, r6
   222a8:	b	21884 <_start@@Base+0xd284>
   222ac:	strd	sl, [sp, #176]	; 0xb0
   222b0:	mov	r5, r6
   222b4:	b	21884 <_start@@Base+0xd284>
   222b8:	mov	r4, r0
   222bc:	b	2108c <_start@@Base+0xca8c>
   222c0:	mov	r3, #6
   222c4:	mov	r2, r8
   222c8:	mov	r1, r4
   222cc:	mov	r0, r6
   222d0:	bl	18490 <_start@@Base+0x3e90>
   222d4:	mov	r9, r0
   222d8:	cmp	r4, r0
   222dc:	beq	22a08 <_start@@Base+0xe408>
   222e0:	mov	r1, #2
   222e4:	ldr	r0, [r6]
   222e8:	bl	27be4 <flatcc_builder_start_table@@Base>
   222ec:	cmp	r0, #0
   222f0:	beq	22314 <_start@@Base+0xdd14>
   222f4:	mov	r5, r6
   222f8:	mov	r3, #33	; 0x21
   222fc:	mov	r2, r8
   22300:	mov	r1, r9
   22304:	mov	r0, r5
   22308:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2230c:	mov	r9, r0
   22310:	b	2189c <_start@@Base+0xd29c>
   22314:	add	r3, sp, #220	; 0xdc
   22318:	mov	r2, r8
   2231c:	mov	r1, r9
   22320:	mov	r0, r6
   22324:	bl	18650 <_start@@Base+0x4050>
   22328:	mov	r9, r0
   2232c:	add	r5, pc, #868	; 0x364
   22330:	ldrd	r4, [r5]
   22334:	movw	r3, #20592	; 0x5070
   22338:	movt	r3, #5
   2233c:	str	r3, [sp, #204]	; 0xcc
   22340:	add	r3, r3, #648	; 0x288
   22344:	str	r3, [sp, #200]	; 0xc8
   22348:	ldrd	sl, [sp, #184]	; 0xb8
   2234c:	b	22824 <_start@@Base+0xe224>
   22350:	mov	r3, #5
   22354:	mov	r2, r8
   22358:	mov	r1, r9
   2235c:	mov	r0, r6
   22360:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   22364:	mov	r9, r0
   22368:	b	22860 <_start@@Base+0xe260>
   2236c:	ldrb	r0, [r9, #7]
   22370:	mov	r1, #0
   22374:	ldrb	r2, [r9, #6]
   22378:	orr	r2, r0, r2, lsl #8
   2237c:	mov	r3, r1
   22380:	ldrb	r0, [r9, #5]
   22384:	orr	r2, r2, r0, lsl #16
   22388:	ldrb	r0, [r9, #4]
   2238c:	orr	r2, r2, r0, lsl #24
   22390:	ldrb	r0, [r9, #3]
   22394:	orr	r3, r3, r0
   22398:	ldrb	r0, [r9, #2]
   2239c:	orr	r3, r3, r0, lsl #8
   223a0:	ldrb	r0, [r9, #1]
   223a4:	orr	r3, r3, r0, lsl #16
   223a8:	ldrb	r0, [r9]
   223ac:	mov	sl, r2
   223b0:	orr	fp, r3, r0, lsl #24
   223b4:	cmp	fp, r5
   223b8:	cmpeq	sl, r4
   223bc:	bne	22798 <_start@@Base+0xe198>
   223c0:	add	r7, r9, #8
   223c4:	sub	r3, r8, r7
   223c8:	cmp	r3, #8
   223cc:	bhi	22460 <_start@@Base+0xde60>
   223d0:	sub	r3, r3, #1
   223d4:	cmp	r3, #7
   223d8:	ldrls	pc, [pc, r3, lsl #2]
   223dc:	b	22558 <_start@@Base+0xdf58>
   223e0:	andeq	r2, r2, ip, asr #10
   223e4:	andeq	r2, r2, r0, asr #10
   223e8:	andeq	r2, r2, r4, lsr r5
   223ec:	andeq	r2, r2, r8, lsr #10
   223f0:	andeq	r2, r2, ip, lsl r5
   223f4:	andeq	r2, r2, r0, lsl r5
   223f8:	andeq	r2, r2, r4, lsl #10
   223fc:	andeq	r2, r2, r0, ror #8
   22400:	mov	r0, #0
   22404:	mov	r1, #0
   22408:	b	22374 <_start@@Base+0xdd74>
   2240c:	mov	r2, #0
   22410:	mov	r3, r2
   22414:	b	22380 <_start@@Base+0xdd80>
   22418:	mov	r2, #0
   2241c:	mov	r3, r2
   22420:	b	22388 <_start@@Base+0xdd88>
   22424:	mov	r2, #0
   22428:	mov	r3, r2
   2242c:	b	22390 <_start@@Base+0xdd90>
   22430:	mov	r2, #0
   22434:	mov	r3, r2
   22438:	b	22398 <_start@@Base+0xdd98>
   2243c:	mov	r2, #0
   22440:	mov	r3, r2
   22444:	b	223a0 <_start@@Base+0xdda0>
   22448:	mov	r2, #0
   2244c:	mov	r3, r2
   22450:	b	223a8 <_start@@Base+0xdda8>
   22454:	mov	sl, #0
   22458:	mov	fp, #0
   2245c:	b	223b4 <_start@@Base+0xddb4>
   22460:	ldrb	r0, [r9, #15]
   22464:	mov	r1, #0
   22468:	ldrb	r2, [r9, #14]
   2246c:	orr	r2, r0, r2, lsl #8
   22470:	mov	r3, r1
   22474:	ldrb	r0, [r9, #13]
   22478:	orr	r2, r2, r0, lsl #16
   2247c:	ldrb	r0, [r9, #12]
   22480:	orr	r2, r2, r0, lsl #24
   22484:	ldrb	r0, [r9, #11]
   22488:	orr	r3, r3, r0
   2248c:	ldrb	r0, [r9, #10]
   22490:	orr	r3, r3, r0, lsl #8
   22494:	ldrb	r0, [r9, #9]
   22498:	orr	r3, r3, r0, lsl #16
   2249c:	ldrb	r0, [r9, #8]
   224a0:	str	r2, [sp, #32]
   224a4:	orr	r3, r3, r0, lsl #24
   224a8:	str	r3, [sp, #36]	; 0x24
   224ac:	ldrd	r2, [sp, #32]
   224b0:	add	r1, pc, #488	; 0x1e8
   224b4:	ldrd	r0, [r1]
   224b8:	cmp	r3, r1
   224bc:	cmpeq	r2, r0
   224c0:	beq	22568 <_start@@Base+0xdf68>
   224c4:	ldrd	r2, [sp, #32]
   224c8:	bic	r1, r2, #255	; 0xff
   224cc:	str	r1, [sp, #96]	; 0x60
   224d0:	str	r3, [sp, #100]	; 0x64
   224d4:	ldrd	r2, [sp, #96]	; 0x60
   224d8:	add	r1, pc, #456	; 0x1c8
   224dc:	ldrd	r0, [r1]
   224e0:	cmp	r3, r1
   224e4:	cmpeq	r2, r0
   224e8:	beq	226b8 <_start@@Base+0xe0b8>
   224ec:	mov	r2, r8
   224f0:	mov	r1, r7
   224f4:	mov	r0, r6
   224f8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   224fc:	mov	r9, r0
   22500:	b	227ac <_start@@Base+0xe1ac>
   22504:	mov	r0, #0
   22508:	mov	r1, #0
   2250c:	b	22468 <_start@@Base+0xde68>
   22510:	mov	r2, #0
   22514:	mov	r3, r2
   22518:	b	22474 <_start@@Base+0xde74>
   2251c:	mov	r2, #0
   22520:	mov	r3, r2
   22524:	b	2247c <_start@@Base+0xde7c>
   22528:	mov	r2, #0
   2252c:	mov	r3, r2
   22530:	b	22484 <_start@@Base+0xde84>
   22534:	mov	r2, #0
   22538:	mov	r3, r2
   2253c:	b	2248c <_start@@Base+0xde8c>
   22540:	mov	r2, #0
   22544:	mov	r3, r2
   22548:	b	22494 <_start@@Base+0xde94>
   2254c:	mov	r2, #0
   22550:	mov	r3, r2
   22554:	b	2249c <_start@@Base+0xde9c>
   22558:	mov	r2, #0
   2255c:	mov	r3, #0
   22560:	strd	r2, [sp, #32]
   22564:	b	224ac <_start@@Base+0xdeac>
   22568:	add	r9, r9, #16
   2256c:	mov	r1, r8
   22570:	mov	r0, r9
   22574:	bl	146f0 <_start@@Base+0xf0>
   22578:	and	r3, r0, #-16777216	; 0xff000000
   2257c:	str	r3, [sp, #128]	; 0x80
   22580:	str	r1, [sp, #132]	; 0x84
   22584:	ldrd	r2, [sp, #128]	; 0x80
   22588:	add	r1, pc, #288	; 0x120
   2258c:	ldrd	r0, [r1]
   22590:	cmp	r3, r1
   22594:	cmpeq	r2, r0
   22598:	beq	225b4 <_start@@Base+0xdfb4>
   2259c:	mov	r2, r8
   225a0:	mov	r1, r9
   225a4:	mov	r0, r6
   225a8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   225ac:	mov	r9, r0
   225b0:	b	227ac <_start@@Base+0xe1ac>
   225b4:	mov	r3, #5
   225b8:	mov	r2, r8
   225bc:	mov	r1, r9
   225c0:	mov	r0, r6
   225c4:	bl	18490 <_start@@Base+0x3e90>
   225c8:	mov	r7, r0
   225cc:	cmp	r9, r0
   225d0:	beq	22680 <_start@@Base+0xe080>
   225d4:	mov	r3, #0
   225d8:	str	r3, [sp, #224]	; 0xe0
   225dc:	add	r3, sp, #224	; 0xe0
   225e0:	mov	r2, r8
   225e4:	mov	r1, r0
   225e8:	mov	r0, r6
   225ec:	bl	17d94 <_start@@Base+0x3794>
   225f0:	mov	r9, r0
   225f4:	cmp	r7, r0
   225f8:	beq	2263c <_start@@Base+0xe03c>
   225fc:	ldr	r3, [sp, #224]	; 0xe0
   22600:	cmp	r3, #0
   22604:	bne	22614 <_start@@Base+0xe014>
   22608:	ldr	r3, [r6, #8]
   2260c:	tst	r3, #2
   22610:	beq	227ac <_start@@Base+0xe1ac>
   22614:	mov	r3, #4
   22618:	mov	r2, r3
   2261c:	mov	r1, #1
   22620:	ldr	r0, [r6]
   22624:	bl	297a8 <flatcc_builder_table_add@@Base>
   22628:	cmp	r0, #0
   2262c:	beq	229f0 <_start@@Base+0xe3f0>
   22630:	ldr	r3, [sp, #224]	; 0xe0
   22634:	str	r3, [r0]
   22638:	b	227ac <_start@@Base+0xe1ac>
   2263c:	add	r3, sp, #224	; 0xe0
   22640:	str	r3, [sp]
   22644:	ldr	r3, [sp, #204]	; 0xcc
   22648:	add	r3, r3, #636	; 0x27c
   2264c:	mov	r2, r8
   22650:	mov	r1, r0
   22654:	mov	r0, r6
   22658:	bl	1a4a0 <_start@@Base+0x5ea0>
   2265c:	cmp	r8, r0
   22660:	cmpne	r9, r0
   22664:	beq	22670 <_start@@Base+0xe070>
   22668:	mov	r9, r0
   2266c:	b	225fc <_start@@Base+0xdffc>
   22670:	strd	sl, [sp, #184]	; 0xb8
   22674:	mov	r5, r6
   22678:	mov	r9, r0
   2267c:	b	222f8 <_start@@Base+0xdcf8>
   22680:	mov	r2, r8
   22684:	mov	r1, r0
   22688:	mov	r0, r6
   2268c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   22690:	mov	r9, r0
   22694:	b	227ac <_start@@Base+0xe1ac>
   22698:	svcpl	0x00626262
   2269c:	cmnvs	r1, r1, ror #2
   226a0:	cmnvs	r2, pc, asr r4
   226a4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   226a8:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   226ac:	subsvs	r7, pc, #116, 6	; 0xd0000001
   226b0:	movwvc	r0, #0
   226b4:	cmnvc	r4, #112, 10	; 0x1c000000
   226b8:	mov	r3, #7
   226bc:	mov	r2, r8
   226c0:	mov	r1, r7
   226c4:	mov	r0, r6
   226c8:	bl	18490 <_start@@Base+0x3e90>
   226cc:	mov	r1, r0
   226d0:	cmp	r7, r0
   226d4:	beq	22784 <_start@@Base+0xe184>
   226d8:	mov	r2, #0
   226dc:	mov	r3, #0
   226e0:	strd	r2, [sp, #224]	; 0xe0
   226e4:	add	r3, sp, #224	; 0xe0
   226e8:	mov	r2, r8
   226ec:	mov	r7, r0
   226f0:	mov	r0, r6
   226f4:	bl	17fc0 <_start@@Base+0x39c0>
   226f8:	mov	r9, r0
   226fc:	cmp	r7, r0
   22700:	beq	22744 <_start@@Base+0xe144>
   22704:	ldrd	r2, [sp, #224]	; 0xe0
   22708:	orrs	r3, r2, r3
   2270c:	bne	2271c <_start@@Base+0xe11c>
   22710:	ldr	r3, [r6, #8]
   22714:	tst	r3, #2
   22718:	beq	227ac <_start@@Base+0xe1ac>
   2271c:	mov	r3, #8
   22720:	mov	r2, r3
   22724:	mov	r1, #0
   22728:	ldr	r0, [r6]
   2272c:	bl	297a8 <flatcc_builder_table_add@@Base>
   22730:	cmp	r0, #0
   22734:	beq	229fc <_start@@Base+0xe3fc>
   22738:	ldrd	r2, [sp, #224]	; 0xe0
   2273c:	strd	r2, [r0]
   22740:	b	227ac <_start@@Base+0xe1ac>
   22744:	add	r3, sp, #224	; 0xe0
   22748:	str	r3, [sp]
   2274c:	ldr	r3, [sp, #200]	; 0xc8
   22750:	mov	r2, r8
   22754:	mov	r1, r0
   22758:	mov	r0, r6
   2275c:	bl	1b5dc <_start@@Base+0x6fdc>
   22760:	cmp	r8, r0
   22764:	cmpne	r9, r0
   22768:	beq	22774 <_start@@Base+0xe174>
   2276c:	mov	r9, r0
   22770:	b	22704 <_start@@Base+0xe104>
   22774:	strd	sl, [sp, #184]	; 0xb8
   22778:	mov	r5, r6
   2277c:	mov	r9, r0
   22780:	b	222f8 <_start@@Base+0xdcf8>
   22784:	mov	r2, r8
   22788:	mov	r0, r6
   2278c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   22790:	mov	r9, r0
   22794:	b	227ac <_start@@Base+0xe1ac>
   22798:	mov	r2, r8
   2279c:	mov	r1, r9
   227a0:	mov	r0, r6
   227a4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   227a8:	mov	r9, r0
   227ac:	sub	r3, r8, r9
   227b0:	cmp	r3, #1
   227b4:	ble	227c8 <_start@@Base+0xe1c8>
   227b8:	ldrb	r3, [r9]
   227bc:	cmp	r3, #32
   227c0:	bhi	227dc <_start@@Base+0xe1dc>
   227c4:	beq	2289c <_start@@Base+0xe29c>
   227c8:	mov	r2, r8
   227cc:	mov	r1, r9
   227d0:	mov	r0, r6
   227d4:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   227d8:	mov	r9, r0
   227dc:	cmp	r8, r9
   227e0:	moveq	r3, #0
   227e4:	streq	r3, [sp, #220]	; 0xdc
   227e8:	beq	22824 <_start@@Base+0xe224>
   227ec:	ldrb	r3, [r9]
   227f0:	cmp	r3, #44	; 0x2c
   227f4:	beq	228fc <_start@@Base+0xe2fc>
   227f8:	mov	r3, #0
   227fc:	str	r3, [sp, #220]	; 0xdc
   22800:	ldrb	r3, [r9]
   22804:	cmp	r3, #125	; 0x7d
   22808:	beq	228b0 <_start@@Base+0xe2b0>
   2280c:	mov	r3, #10
   22810:	mov	r2, r8
   22814:	mov	r1, r9
   22818:	mov	r0, r6
   2281c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   22820:	mov	r9, r0
   22824:	ldr	r3, [sp, #220]	; 0xdc
   22828:	cmp	r3, #0
   2282c:	beq	229a4 <_start@@Base+0xe3a4>
   22830:	cmp	r8, r9
   22834:	beq	22860 <_start@@Base+0xe260>
   22838:	ldrb	r3, [r9]
   2283c:	cmp	r3, #34	; 0x22
   22840:	addeq	r9, r9, #1
   22844:	moveq	r3, #0
   22848:	streq	r3, [r6, #12]
   2284c:	beq	22860 <_start@@Base+0xe260>
   22850:	cmp	r3, #46	; 0x2e
   22854:	movne	r3, #1
   22858:	strne	r3, [r6, #12]
   2285c:	beq	22350 <_start@@Base+0xdd50>
   22860:	sub	r3, r8, r9
   22864:	cmp	r3, #8
   22868:	bhi	2236c <_start@@Base+0xdd6c>
   2286c:	sub	r3, r3, #1
   22870:	cmp	r3, #7
   22874:	ldrls	pc, [pc, r3, lsl #2]
   22878:	b	22454 <_start@@Base+0xde54>
   2287c:	andeq	r2, r2, r8, asr #8
   22880:	andeq	r2, r2, ip, lsr r4
   22884:	andeq	r2, r2, r0, lsr r4
   22888:	andeq	r2, r2, r4, lsr #8
   2288c:	andeq	r2, r2, r8, lsl r4
   22890:	andeq	r2, r2, ip, lsl #8
   22894:	andeq	r2, r2, r0, lsl #8
   22898:	andeq	r2, r2, ip, ror #6
   2289c:	ldrb	r3, [r9, #1]
   228a0:	cmp	r3, #32
   228a4:	addhi	r9, r9, #1
   228a8:	bls	227c8 <_start@@Base+0xe1c8>
   228ac:	b	227dc <_start@@Base+0xe1dc>
   228b0:	add	r1, r9, #1
   228b4:	sub	r3, r8, r1
   228b8:	cmp	r3, #1
   228bc:	ble	228d4 <_start@@Base+0xe2d4>
   228c0:	ldrb	r3, [r9, #1]
   228c4:	cmp	r3, #32
   228c8:	movhi	r9, r1
   228cc:	bhi	22824 <_start@@Base+0xe224>
   228d0:	beq	228e8 <_start@@Base+0xe2e8>
   228d4:	mov	r2, r8
   228d8:	mov	r0, r6
   228dc:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   228e0:	mov	r9, r0
   228e4:	b	22824 <_start@@Base+0xe224>
   228e8:	ldrb	r3, [r9, #2]
   228ec:	cmp	r3, #32
   228f0:	addhi	r9, r9, #2
   228f4:	bls	228d4 <_start@@Base+0xe2d4>
   228f8:	b	22824 <_start@@Base+0xe224>
   228fc:	add	r1, r9, #1
   22900:	sub	r3, r8, r1
   22904:	cmp	r3, #1
   22908:	ble	22920 <_start@@Base+0xe320>
   2290c:	ldrb	r3, [r9, #1]
   22910:	cmp	r3, #32
   22914:	movhi	r9, r1
   22918:	bhi	22930 <_start@@Base+0xe330>
   2291c:	beq	2296c <_start@@Base+0xe36c>
   22920:	mov	r2, r8
   22924:	mov	r0, r6
   22928:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2292c:	mov	r9, r0
   22930:	cmp	r8, r9
   22934:	beq	22980 <_start@@Base+0xe380>
   22938:	ldrb	r3, [r9]
   2293c:	cmp	r3, #125	; 0x7d
   22940:	movne	r3, #1
   22944:	strne	r3, [sp, #220]	; 0xdc
   22948:	bne	22824 <_start@@Base+0xe224>
   2294c:	mov	r3, #0
   22950:	str	r3, [sp, #220]	; 0xdc
   22954:	mov	r2, r8
   22958:	add	r1, r9, #1
   2295c:	mov	r0, r6
   22960:	bl	1809c <_start@@Base+0x3a9c>
   22964:	mov	r9, r0
   22968:	b	22824 <_start@@Base+0xe224>
   2296c:	ldrb	r3, [r9, #2]
   22970:	cmp	r3, #32
   22974:	addhi	r9, r9, #2
   22978:	bls	22920 <_start@@Base+0xe320>
   2297c:	b	22930 <_start@@Base+0xe330>
   22980:	mov	r3, #0
   22984:	str	r3, [sp, #220]	; 0xdc
   22988:	mov	r3, #10
   2298c:	mov	r2, r8
   22990:	mov	r1, r9
   22994:	mov	r0, r6
   22998:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2299c:	mov	r9, r0
   229a0:	b	22824 <_start@@Base+0xe224>
   229a4:	strd	sl, [sp, #184]	; 0xb8
   229a8:	ldr	r3, [r6, #24]
   229ac:	cmp	r3, #0
   229b0:	beq	229bc <_start@@Base+0xe3bc>
   229b4:	mov	r5, r6
   229b8:	b	222f8 <_start@@Base+0xdcf8>
   229bc:	ldr	r0, [r6]
   229c0:	bl	286bc <flatcc_builder_end_table@@Base>
   229c4:	subs	r4, r0, #0
   229c8:	beq	229e8 <_start@@Base+0xe3e8>
   229cc:	mov	r1, #2
   229d0:	ldr	r0, [r6]
   229d4:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   229d8:	cmp	r0, #0
   229dc:	beq	22f24 <_start@@Base+0xe924>
   229e0:	str	r4, [r0]
   229e4:	b	22a54 <_start@@Base+0xe454>
   229e8:	mov	r5, r6
   229ec:	b	222f8 <_start@@Base+0xdcf8>
   229f0:	strd	sl, [sp, #184]	; 0xb8
   229f4:	mov	r5, r6
   229f8:	b	222f8 <_start@@Base+0xdcf8>
   229fc:	strd	sl, [sp, #184]	; 0xb8
   22a00:	mov	r5, r6
   22a04:	b	222f8 <_start@@Base+0xdcf8>
   22a08:	mov	r2, r8
   22a0c:	mov	r1, r0
   22a10:	mov	r0, r6
   22a14:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   22a18:	mov	r9, r0
   22a1c:	b	22a54 <_start@@Base+0xe454>
   22a20:	mov	r4, r0
   22a24:	b	210a4 <_start@@Base+0xcaa4>
   22a28:	mov	r2, r8
   22a2c:	mov	r1, ip
   22a30:	mov	r0, r6
   22a34:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   22a38:	mov	r9, r0
   22a3c:	b	22a54 <_start@@Base+0xe454>
   22a40:	mov	r2, r8
   22a44:	mov	r1, r9
   22a48:	mov	r0, r6
   22a4c:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   22a50:	mov	r9, r0
   22a54:	sub	r3, r8, r9
   22a58:	cmp	r3, #1
   22a5c:	ble	22a70 <_start@@Base+0xe470>
   22a60:	ldrb	r3, [r9]
   22a64:	cmp	r3, #32
   22a68:	bhi	22a84 <_start@@Base+0xe484>
   22a6c:	beq	22b44 <_start@@Base+0xe544>
   22a70:	mov	r2, r8
   22a74:	mov	r1, r9
   22a78:	mov	r0, r6
   22a7c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   22a80:	mov	r9, r0
   22a84:	cmp	r8, r9
   22a88:	moveq	r3, #0
   22a8c:	streq	r3, [sp, #212]	; 0xd4
   22a90:	beq	22acc <_start@@Base+0xe4cc>
   22a94:	ldrb	r3, [r9]
   22a98:	cmp	r3, #44	; 0x2c
   22a9c:	beq	22ba4 <_start@@Base+0xe5a4>
   22aa0:	mov	r3, #0
   22aa4:	str	r3, [sp, #212]	; 0xd4
   22aa8:	ldrb	r3, [r9]
   22aac:	cmp	r3, #125	; 0x7d
   22ab0:	beq	22b58 <_start@@Base+0xe558>
   22ab4:	mov	r3, #10
   22ab8:	mov	r2, r8
   22abc:	mov	r1, r9
   22ac0:	mov	r0, r6
   22ac4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   22ac8:	mov	r9, r0
   22acc:	ldr	r3, [sp, #212]	; 0xd4
   22ad0:	cmp	r3, #0
   22ad4:	beq	22c80 <_start@@Base+0xe680>
   22ad8:	cmp	r8, r9
   22adc:	beq	22b08 <_start@@Base+0xe508>
   22ae0:	ldrb	r3, [r9]
   22ae4:	cmp	r3, #34	; 0x22
   22ae8:	addeq	r9, r9, #1
   22aec:	moveq	r3, #0
   22af0:	streq	r3, [r6, #12]
   22af4:	beq	22b08 <_start@@Base+0xe508>
   22af8:	cmp	r3, #46	; 0x2e
   22afc:	movne	r3, #1
   22b00:	strne	r3, [r6, #12]
   22b04:	beq	20ea8 <_start@@Base+0xc8a8>
   22b08:	sub	r3, r8, r9
   22b0c:	cmp	r3, #8
   22b10:	bhi	20ec4 <_start@@Base+0xc8c4>
   22b14:	sub	r3, r3, #1
   22b18:	cmp	r3, #7
   22b1c:	ldrls	pc, [pc, r3, lsl #2]
   22b20:	b	20fbc <_start@@Base+0xc9bc>
   22b24:			; <UNDEFINED> instruction: 0x00020fb0
   22b28:	andeq	r0, r2, r4, lsr #31
   22b2c:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   22b30:	andeq	r0, r2, ip, lsl #31
   22b34:	andeq	r0, r2, r0, lsl #31
   22b38:	andeq	r0, r2, r4, ror pc
   22b3c:	andeq	r0, r2, r8, ror #30
   22b40:	andeq	r0, r2, r4, asr #29
   22b44:	ldrb	r3, [r9, #1]
   22b48:	cmp	r3, #32
   22b4c:	addhi	r9, r9, #1
   22b50:	bls	22a70 <_start@@Base+0xe470>
   22b54:	b	22a84 <_start@@Base+0xe484>
   22b58:	add	r1, r9, #1
   22b5c:	sub	r3, r8, r1
   22b60:	cmp	r3, #1
   22b64:	ble	22b7c <_start@@Base+0xe57c>
   22b68:	ldrb	r3, [r9, #1]
   22b6c:	cmp	r3, #32
   22b70:	movhi	r9, r1
   22b74:	bhi	22acc <_start@@Base+0xe4cc>
   22b78:	beq	22b90 <_start@@Base+0xe590>
   22b7c:	mov	r2, r8
   22b80:	mov	r0, r6
   22b84:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   22b88:	mov	r9, r0
   22b8c:	b	22acc <_start@@Base+0xe4cc>
   22b90:	ldrb	r3, [r9, #2]
   22b94:	cmp	r3, #32
   22b98:	addhi	r9, r9, #2
   22b9c:	bls	22b7c <_start@@Base+0xe57c>
   22ba0:	b	22acc <_start@@Base+0xe4cc>
   22ba4:	add	r1, r9, #1
   22ba8:	sub	r3, r8, r1
   22bac:	cmp	r3, #1
   22bb0:	ble	22bc8 <_start@@Base+0xe5c8>
   22bb4:	ldrb	r3, [r9, #1]
   22bb8:	cmp	r3, #32
   22bbc:	movhi	r9, r1
   22bc0:	bhi	22bd8 <_start@@Base+0xe5d8>
   22bc4:	beq	22c34 <_start@@Base+0xe634>
   22bc8:	mov	r2, r8
   22bcc:	mov	r0, r6
   22bd0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   22bd4:	mov	r9, r0
   22bd8:	cmp	r8, r9
   22bdc:	beq	22c48 <_start@@Base+0xe648>
   22be0:	ldrb	r3, [r9]
   22be4:	cmp	r3, #125	; 0x7d
   22be8:	movne	r3, #1
   22bec:	strne	r3, [sp, #212]	; 0xd4
   22bf0:	bne	22acc <_start@@Base+0xe4cc>
   22bf4:	mov	r3, #0
   22bf8:	str	r3, [sp, #212]	; 0xd4
   22bfc:	add	r1, r9, #1
   22c00:	sub	r3, r8, r1
   22c04:	cmp	r3, #1
   22c08:	ble	22c20 <_start@@Base+0xe620>
   22c0c:	ldrb	r3, [r9, #1]
   22c10:	cmp	r3, #32
   22c14:	movhi	r9, r1
   22c18:	bhi	22acc <_start@@Base+0xe4cc>
   22c1c:	beq	22c6c <_start@@Base+0xe66c>
   22c20:	mov	r2, r8
   22c24:	mov	r0, r6
   22c28:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   22c2c:	mov	r9, r0
   22c30:	b	22acc <_start@@Base+0xe4cc>
   22c34:	ldrb	r3, [r9, #2]
   22c38:	cmp	r3, #32
   22c3c:	addhi	r9, r9, #2
   22c40:	bls	22bc8 <_start@@Base+0xe5c8>
   22c44:	b	22bd8 <_start@@Base+0xe5d8>
   22c48:	mov	r3, #0
   22c4c:	str	r3, [sp, #212]	; 0xd4
   22c50:	mov	r3, #10
   22c54:	mov	r2, r8
   22c58:	mov	r1, r9
   22c5c:	mov	r0, r6
   22c60:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   22c64:	mov	r9, r0
   22c68:	b	22acc <_start@@Base+0xe4cc>
   22c6c:	ldrb	r3, [r9, #2]
   22c70:	cmp	r3, #32
   22c74:	addhi	r9, r9, #2
   22c78:	bls	22c20 <_start@@Base+0xe620>
   22c7c:	b	22acc <_start@@Base+0xe4cc>
   22c80:	mov	r5, r6
   22c84:	ldr	r3, [r6, #24]
   22c88:	cmp	r3, #0
   22c8c:	bne	2189c <_start@@Base+0xd29c>
   22c90:	ldr	r0, [r6]
   22c94:	bl	286bc <flatcc_builder_end_table@@Base>
   22c98:	str	r0, [sp, #240]	; 0xf0
   22c9c:	cmp	r0, #0
   22ca0:	bne	218b4 <_start@@Base+0xd2b4>
   22ca4:	b	2189c <_start@@Base+0xd29c>
   22ca8:	mov	r2, r8
   22cac:	mov	r1, r4
   22cb0:	mov	r0, r5
   22cb4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   22cb8:	mov	r9, r0
   22cbc:	b	22cec <_start@@Base+0xe6ec>
   22cc0:	mov	r2, r8
   22cc4:	mov	r1, r4
   22cc8:	mov	r0, r5
   22ccc:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   22cd0:	mov	r9, r0
   22cd4:	b	22cec <_start@@Base+0xe6ec>
   22cd8:	mov	r2, r8
   22cdc:	mov	r1, r4
   22ce0:	mov	r0, r5
   22ce4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   22ce8:	mov	r9, r0
   22cec:	add	r3, sp, #244	; 0xf4
   22cf0:	mov	r2, r8
   22cf4:	mov	r1, r9
   22cf8:	mov	r0, r5
   22cfc:	bl	180ec <_start@@Base+0x3aec>
   22d00:	mov	r4, r0
   22d04:	ldr	r3, [sp, #244]	; 0xf4
   22d08:	cmp	r3, #0
   22d0c:	beq	22e78 <_start@@Base+0xe878>
   22d10:	cmp	r8, r4
   22d14:	beq	20de8 <_start@@Base+0xc7e8>
   22d18:	ldrb	r3, [r4]
   22d1c:	cmp	r3, #34	; 0x22
   22d20:	addeq	r4, r4, #1
   22d24:	moveq	r3, #0
   22d28:	streq	r3, [r5, #12]
   22d2c:	beq	22d40 <_start@@Base+0xe740>
   22d30:	cmp	r3, #46	; 0x2e
   22d34:	movne	r3, #1
   22d38:	strne	r3, [r5, #12]
   22d3c:	beq	20c74 <_start@@Base+0xc674>
   22d40:	sub	r3, r8, r4
   22d44:	cmp	r3, #8
   22d48:	bls	20c90 <_start@@Base+0xc690>
   22d4c:	ldrb	r0, [r4, #7]
   22d50:	mov	r1, #0
   22d54:	ldrb	r2, [r4, #6]
   22d58:	orr	r2, r0, r2, lsl #8
   22d5c:	mov	r3, r1
   22d60:	ldrb	r0, [r4, #5]
   22d64:	orr	r2, r2, r0, lsl #16
   22d68:	ldrb	r0, [r4, #4]
   22d6c:	orr	r2, r2, r0, lsl #24
   22d70:	ldrb	r0, [r4, #3]
   22d74:	orr	r3, r3, r0
   22d78:	ldrb	r0, [r4, #2]
   22d7c:	orr	r3, r3, r0, lsl #8
   22d80:	ldrb	r0, [r4, #1]
   22d84:	orr	r3, r3, r0, lsl #16
   22d88:	ldrb	r0, [r4]
   22d8c:	mov	sl, r2
   22d90:	orr	fp, r3, r0, lsl #24
   22d94:	add	r3, pc, #412	; 0x19c
   22d98:	ldrd	r2, [r3]
   22d9c:	cmp	fp, r3
   22da0:	cmpeq	sl, r2
   22da4:	beq	20d20 <_start@@Base+0xc720>
   22da8:	bic	r3, sl, #255	; 0xff
   22dac:	str	r3, [sp, #64]	; 0x40
   22db0:	str	fp, [sp, #68]	; 0x44
   22db4:	add	r3, pc, #388	; 0x184
   22db8:	ldrd	r2, [r3]
   22dbc:	ldrd	r0, [sp, #64]	; 0x40
   22dc0:	cmp	r1, r3
   22dc4:	cmpeq	r0, r2
   22dc8:	beq	20df4 <_start@@Base+0xc7f4>
   22dcc:	lsr	r3, sl, #16
   22dd0:	lsl	r3, r3, #16
   22dd4:	str	r3, [sp, #40]	; 0x28
   22dd8:	str	fp, [sp, #44]	; 0x2c
   22ddc:	add	r3, pc, #356	; 0x164
   22de0:	ldrd	r2, [r3]
   22de4:	ldrd	r0, [sp, #40]	; 0x28
   22de8:	cmp	r1, r3
   22dec:	cmpeq	r0, r2
   22df0:	beq	20e48 <_start@@Base+0xc848>
   22df4:	and	r3, sl, #-16777216	; 0xff000000
   22df8:	str	r3, [sp, #112]	; 0x70
   22dfc:	str	fp, [sp, #116]	; 0x74
   22e00:	add	r3, pc, #328	; 0x148
   22e04:	ldrd	r2, [r3]
   22e08:	ldrd	r0, [sp, #112]	; 0x70
   22e0c:	cmp	r1, r3
   22e10:	cmpeq	r0, r2
   22e14:	bne	22cd8 <_start@@Base+0xe6d8>
   22e18:	mov	r3, #5
   22e1c:	mov	r2, r8
   22e20:	mov	r1, r4
   22e24:	mov	r0, r5
   22e28:	bl	18490 <_start@@Base+0x3e90>
   22e2c:	cmp	r0, r4
   22e30:	beq	22cc0 <_start@@Base+0xe6c0>
   22e34:	add	r3, sp, #240	; 0xf0
   22e38:	mov	r2, r8
   22e3c:	mov	r1, r0
   22e40:	mov	r0, r5
   22e44:	bl	18aa4 <_start@@Base+0x44a4>
   22e48:	mov	r9, r0
   22e4c:	ldr	r3, [sp, #240]	; 0xf0
   22e50:	cmp	r3, #0
   22e54:	beq	22ef0 <_start@@Base+0xe8f0>
   22e58:	mov	r1, #1
   22e5c:	ldr	r0, [r5]
   22e60:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   22e64:	cmp	r0, #0
   22e68:	beq	22f04 <_start@@Base+0xe904>
   22e6c:	ldr	r3, [sp, #240]	; 0xf0
   22e70:	str	r3, [r0]
   22e74:	b	22cec <_start@@Base+0xe6ec>
   22e78:	mov	r9, r8
   22e7c:	mov	r8, r5
   22e80:	ldr	r3, [r8, #24]
   22e84:	cmp	r3, #0
   22e88:	bne	20be8 <_start@@Base+0xc5e8>
   22e8c:	ldr	r3, [sp, #236]	; 0xec
   22e90:	mov	r2, r9
   22e94:	mov	r1, r4
   22e98:	mov	r0, r8
   22e9c:	bl	2f93c <flatcc_json_parser_finalize_unions@@Base>
   22ea0:	mov	r4, r0
   22ea4:	ldr	r0, [r8]
   22ea8:	bl	286bc <flatcc_builder_end_table@@Base>
   22eac:	ldr	r3, [sp, #172]	; 0xac
   22eb0:	str	r0, [r3]
   22eb4:	cmp	r0, #0
   22eb8:	bne	20c00 <_start@@Base+0xc600>
   22ebc:	b	20be8 <_start@@Base+0xc5e8>
   22ec0:	mov	r3, r8
   22ec4:	mov	r8, r5
   22ec8:	mov	r5, r9
   22ecc:	mov	r9, r3
   22ed0:	mov	r4, r5
   22ed4:	b	20be8 <_start@@Base+0xc5e8>
   22ed8:	mov	r3, r8
   22edc:	mov	r8, r5
   22ee0:	mov	r5, r9
   22ee4:	mov	r9, r3
   22ee8:	mov	r4, r5
   22eec:	b	20be8 <_start@@Base+0xc5e8>
   22ef0:	mov	r3, r8
   22ef4:	mov	r8, r5
   22ef8:	mov	r9, r3
   22efc:	mov	r4, r0
   22f00:	b	20be8 <_start@@Base+0xc5e8>
   22f04:	mov	r3, r8
   22f08:	mov	r8, r5
   22f0c:	mov	r5, r9
   22f10:	mov	r9, r3
   22f14:	mov	r4, r5
   22f18:	b	20be8 <_start@@Base+0xc5e8>
   22f1c:	mov	r5, r6
   22f20:	b	2189c <_start@@Base+0xd29c>
   22f24:	mov	r5, r6
   22f28:	b	2189c <_start@@Base+0xd29c>
   22f2c:	mov	r5, r6
   22f30:	b	2189c <_start@@Base+0xd29c>
   22f34:	nop	{0}
   22f38:	cmnvs	lr, pc, asr r9
   22f3c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   22f40:	cmnvs	lr, r0, lsl #18
   22f44:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   22f48:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   22f4c:	rsbsvc	r6, r2, r6, ror #10
   22f50:	strvs	r0, [r0, #-0]
   22f54:	stclvs	6, cr7, [pc, #-420]!	; 22db8 <_start@@Base+0xe7b8>
   22f58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22f5c:	strd	r6, [sp, #8]
   22f60:	strd	r8, [sp, #16]
   22f64:	strd	sl, [sp, #24]
   22f68:	str	lr, [sp, #32]
   22f6c:	sub	sp, sp, #68	; 0x44
   22f70:	mov	r5, r0
   22f74:	mov	r4, r1
   22f78:	mov	r6, r2
   22f7c:	mov	r2, #0
   22f80:	ldr	r1, [sp, #104]	; 0x68
   22f84:	str	r2, [r1]
   22f88:	cmp	r3, #4
   22f8c:	ldrls	pc, [pc, r3, lsl #2]
   22f90:	b	23950 <_start@@Base+0xf350>
   22f94:	andeq	r2, r2, r8, lsr #31
   22f98:	andeq	r2, r2, ip, ror #31
   22f9c:	andeq	r3, r2, r4, lsr r0
   22fa0:	andeq	r3, r2, r8, lsr r8
   22fa4:	andeq	r3, r2, ip, lsr r9
   22fa8:	sub	r3, r6, r4
   22fac:	cmp	r3, #3
   22fb0:	ble	22fd4 <_start@@Base+0xe9d4>
   22fb4:	mov	r2, #4
   22fb8:	movw	r1, #60808	; 0xed88
   22fbc:	movt	r1, #3
   22fc0:	mov	r0, r4
   22fc4:	bl	14530 <memcmp@plt>
   22fc8:	cmp	r0, #0
   22fcc:	addeq	r0, r4, #4
   22fd0:	beq	23018 <_start@@Base+0xea18>
   22fd4:	mov	r3, #26
   22fd8:	mov	r2, r6
   22fdc:	mov	r1, r4
   22fe0:	mov	r0, r5
   22fe4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   22fe8:	b	23018 <_start@@Base+0xea18>
   22fec:	ldr	r3, [sp, #104]	; 0x68
   22ff0:	mov	r2, r6
   22ff4:	mov	r1, r4
   22ff8:	bl	1be14 <_start@@Base+0x7814>
   22ffc:	ldr	r3, [r5, #24]
   23000:	cmp	r3, #0
   23004:	bne	23018 <_start@@Base+0xea18>
   23008:	ldr	r3, [sp, #104]	; 0x68
   2300c:	ldr	r3, [r3]
   23010:	cmp	r3, #0
   23014:	beq	23980 <_start@@Base+0xf380>
   23018:	add	sp, sp, #68	; 0x44
   2301c:	ldrd	r4, [sp]
   23020:	ldrd	r6, [sp, #8]
   23024:	ldrd	r8, [sp, #16]
   23028:	ldrd	sl, [sp, #24]
   2302c:	add	sp, sp, #32
   23030:	pop	{pc}		; (ldr pc, [sp], #4)
   23034:	mov	r1, #4
   23038:	ldr	r0, [r0]
   2303c:	bl	27be4 <flatcc_builder_start_table@@Base>
   23040:	cmp	r0, #0
   23044:	beq	23060 <_start@@Base+0xea60>
   23048:	mov	r3, #33	; 0x21
   2304c:	mov	r2, r6
   23050:	mov	r1, r4
   23054:	mov	r0, r5
   23058:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2305c:	b	22ffc <_start@@Base+0xe9fc>
   23060:	add	r3, sp, #48	; 0x30
   23064:	mov	r2, r6
   23068:	mov	r1, r4
   2306c:	mov	r0, r5
   23070:	bl	18650 <_start@@Base+0x4050>
   23074:	mov	r4, r0
   23078:	ldr	r3, [sp, #48]	; 0x30
   2307c:	cmp	r3, #0
   23080:	beq	2380c <_start@@Base+0xf20c>
   23084:	movw	r3, #20592	; 0x5070
   23088:	movt	r3, #5
   2308c:	str	r3, [sp, #32]
   23090:	add	r3, r3, #704	; 0x2c0
   23094:	str	r3, [sp, #36]	; 0x24
   23098:	strd	r8, [sp, #8]
   2309c:	b	231d0 <_start@@Base+0xebd0>
   230a0:	mov	r3, #5
   230a4:	mov	r2, r6
   230a8:	mov	r1, r4
   230ac:	mov	r0, r5
   230b0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   230b4:	mov	r4, r0
   230b8:	b	23200 <_start@@Base+0xec00>
   230bc:	ldrb	r0, [r4, #7]
   230c0:	mov	r1, #0
   230c4:	ldrb	r2, [r4, #6]
   230c8:	orr	r3, r0, r2, lsl #8
   230cc:	mov	r2, r1
   230d0:	ldrb	r0, [r4, #5]
   230d4:	orr	r3, r3, r0, lsl #16
   230d8:	ldrb	r0, [r4, #4]
   230dc:	orr	r3, r3, r0, lsl #24
   230e0:	ldrb	r0, [r4, #3]
   230e4:	orr	r2, r2, r0
   230e8:	ldrb	r0, [r4, #2]
   230ec:	orr	r2, r2, r0, lsl #8
   230f0:	ldrb	r0, [r4, #1]
   230f4:	orr	r2, r2, r0, lsl #16
   230f8:	ldrb	r0, [r4]
   230fc:	orr	r2, r2, r0, lsl #24
   23100:	lsr	sl, r3, #16
   23104:	lsl	sl, sl, #16
   23108:	add	r1, pc, #904	; 0x388
   2310c:	ldrd	r0, [r1]
   23110:	cmp	r2, r1
   23114:	cmpeq	sl, r0
   23118:	beq	2329c <_start@@Base+0xec9c>
   2311c:	and	r3, r3, #-16777216	; 0xff000000
   23120:	str	r3, [sp, #16]
   23124:	str	r2, [sp, #20]
   23128:	ldrd	r0, [sp, #16]
   2312c:	add	r9, pc, #876	; 0x36c
   23130:	ldrd	r8, [r9]
   23134:	cmp	r1, r9
   23138:	cmpeq	r0, r8
   2313c:	beq	233f4 <_start@@Base+0xedf4>
   23140:	mov	r3, #0
   23144:	str	r3, [sp, #24]
   23148:	bic	r3, r2, #255	; 0xff
   2314c:	str	r3, [sp, #28]
   23150:	ldrd	r0, [sp, #24]
   23154:	add	r9, pc, #844	; 0x34c
   23158:	ldrd	r8, [r9]
   2315c:	cmp	r1, r9
   23160:	cmpeq	r0, r8
   23164:	beq	23568 <_start@@Base+0xef68>
   23168:	mov	r3, #0
   2316c:	str	r3, [sp, #8]
   23170:	lsr	r3, r2, #16
   23174:	lsl	r3, r3, #16
   23178:	str	r3, [sp, #12]
   2317c:	mov	r2, #0
   23180:	mov	r3, #0
   23184:	movt	r3, #30051	; 0x7563
   23188:	ldrd	r0, [sp, #8]
   2318c:	cmp	r1, r3
   23190:	cmpeq	r0, r2
   23194:	beq	236bc <_start@@Base+0xf0bc>
   23198:	mov	r2, r6
   2319c:	mov	r1, r4
   231a0:	mov	r0, r5
   231a4:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   231a8:	mov	r4, r0
   231ac:	add	r3, sp, #48	; 0x30
   231b0:	mov	r2, r6
   231b4:	mov	r1, r4
   231b8:	mov	r0, r5
   231bc:	bl	180ec <_start@@Base+0x3aec>
   231c0:	mov	r4, r0
   231c4:	ldr	r3, [sp, #48]	; 0x30
   231c8:	cmp	r3, #0
   231cc:	beq	2380c <_start@@Base+0xf20c>
   231d0:	cmp	r6, r4
   231d4:	beq	23200 <_start@@Base+0xec00>
   231d8:	ldrb	r3, [r4]
   231dc:	cmp	r3, #34	; 0x22
   231e0:	addeq	r4, r4, #1
   231e4:	moveq	r3, #0
   231e8:	streq	r3, [r5, #12]
   231ec:	beq	23200 <_start@@Base+0xec00>
   231f0:	cmp	r3, #46	; 0x2e
   231f4:	movne	r3, #1
   231f8:	strne	r3, [r5, #12]
   231fc:	beq	230a0 <_start@@Base+0xeaa0>
   23200:	sub	r3, r6, r4
   23204:	cmp	r3, #8
   23208:	bhi	230bc <_start@@Base+0xeabc>
   2320c:	sub	r3, r3, #1
   23210:	cmp	r3, #7
   23214:	ldrls	pc, [pc, r3, lsl #2]
   23218:	b	23290 <_start@@Base+0xec90>
   2321c:	andeq	r3, r2, r4, lsl #5
   23220:	andeq	r3, r2, r8, ror r2
   23224:	andeq	r3, r2, ip, ror #4
   23228:	andeq	r3, r2, r0, ror #4
   2322c:	andeq	r3, r2, r4, asr r2
   23230:	andeq	r3, r2, r8, asr #4
   23234:	andeq	r3, r2, ip, lsr r2
   23238:	strheq	r3, [r2], -ip
   2323c:	mov	r0, #0
   23240:	mov	r1, #0
   23244:	b	230c4 <_start@@Base+0xeac4>
   23248:	mov	r3, #0
   2324c:	mov	r2, r3
   23250:	b	230d0 <_start@@Base+0xead0>
   23254:	mov	r3, #0
   23258:	mov	r2, r3
   2325c:	b	230d8 <_start@@Base+0xead8>
   23260:	mov	r3, #0
   23264:	mov	r2, r3
   23268:	b	230e0 <_start@@Base+0xeae0>
   2326c:	mov	r3, #0
   23270:	mov	r2, r3
   23274:	b	230e8 <_start@@Base+0xeae8>
   23278:	mov	r3, #0
   2327c:	mov	r2, r3
   23280:	b	230f0 <_start@@Base+0xeaf0>
   23284:	mov	r3, #0
   23288:	mov	r2, r3
   2328c:	b	230f8 <_start@@Base+0xeaf8>
   23290:	mov	r3, #0
   23294:	mov	r2, r3
   23298:	b	23100 <_start@@Base+0xeb00>
   2329c:	mov	r3, #6
   232a0:	mov	r2, r6
   232a4:	mov	r1, r4
   232a8:	mov	r0, r5
   232ac:	bl	18490 <_start@@Base+0x3e90>
   232b0:	mov	r7, r0
   232b4:	cmp	r0, r4
   232b8:	beq	23198 <_start@@Base+0xeb98>
   232bc:	mov	r3, #0
   232c0:	strb	r3, [sp, #47]	; 0x2f
   232c4:	mov	r0, #0
   232c8:	mov	r1, #0
   232cc:	strd	r0, [sp, #56]	; 0x38
   232d0:	str	r3, [sp, #52]	; 0x34
   232d4:	cmp	r6, r7
   232d8:	beq	23998 <_start@@Base+0xf398>
   232dc:	add	r3, sp, #56	; 0x38
   232e0:	str	r3, [sp]
   232e4:	add	r3, sp, #52	; 0x34
   232e8:	mov	r2, r6
   232ec:	mov	r1, r7
   232f0:	mov	r0, r5
   232f4:	bl	2f170 <flatcc_json_parser_integer@@Base>
   232f8:	mov	r4, r0
   232fc:	cmp	r7, r0
   23300:	bne	2333c <_start@@Base+0xed3c>
   23304:	mov	r7, r4
   23308:	add	r3, sp, #47	; 0x2f
   2330c:	str	r3, [sp]
   23310:	ldr	r3, [sp, #32]
   23314:	add	r3, r3, #660	; 0x294
   23318:	mov	r2, r6
   2331c:	mov	r1, r7
   23320:	mov	r0, r5
   23324:	bl	19860 <_start@@Base+0x5260>
   23328:	mov	r4, r0
   2332c:	cmp	r6, r0
   23330:	cmpne	r0, r7
   23334:	bne	23380 <_start@@Base+0xed80>
   23338:	b	23048 <_start@@Base+0xea48>
   2333c:	ldrd	r2, [sp, #56]	; 0x38
   23340:	ldr	r1, [sp, #52]	; 0x34
   23344:	cmp	r1, #0
   23348:	beq	233c0 <_start@@Base+0xedc0>
   2334c:	cmp	r3, #0
   23350:	cmpeq	r2, #128	; 0x80
   23354:	rsbls	r2, r2, #0
   23358:	strbls	r2, [sp, #47]	; 0x2f
   2335c:	bls	23380 <_start@@Base+0xed80>
   23360:	mov	r3, #8
   23364:	mov	r2, r6
   23368:	mov	r1, r0
   2336c:	mov	r0, r5
   23370:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   23374:	mov	r4, r0
   23378:	cmp	r7, r4
   2337c:	beq	233ec <_start@@Base+0xedec>
   23380:	ldrsb	r3, [sp, #47]	; 0x2f
   23384:	cmp	r3, #2
   23388:	bne	23398 <_start@@Base+0xed98>
   2338c:	ldr	r3, [r5, #8]
   23390:	tst	r3, #2
   23394:	beq	231ac <_start@@Base+0xebac>
   23398:	mov	r3, #1
   2339c:	mov	r2, r3
   233a0:	mov	r1, r3
   233a4:	ldr	r0, [r5]
   233a8:	bl	297a8 <flatcc_builder_table_add@@Base>
   233ac:	cmp	r0, #0
   233b0:	beq	23048 <_start@@Base+0xea48>
   233b4:	ldrsb	r3, [sp, #47]	; 0x2f
   233b8:	strb	r3, [r0]
   233bc:	b	231ac <_start@@Base+0xebac>
   233c0:	cmp	r3, #0
   233c4:	cmpeq	r2, #127	; 0x7f
   233c8:	strbls	r2, [sp, #47]	; 0x2f
   233cc:	bls	23380 <_start@@Base+0xed80>
   233d0:	mov	r3, #7
   233d4:	mov	r2, r6
   233d8:	mov	r1, r0
   233dc:	mov	r0, r5
   233e0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   233e4:	mov	r4, r0
   233e8:	b	23378 <_start@@Base+0xed78>
   233ec:	mov	r7, r4
   233f0:	b	23308 <_start@@Base+0xed08>
   233f4:	mov	r3, #5
   233f8:	mov	r2, r6
   233fc:	mov	r1, r4
   23400:	mov	r0, r5
   23404:	bl	18490 <_start@@Base+0x3e90>
   23408:	mov	r7, r0
   2340c:	cmp	r0, r4
   23410:	beq	23198 <_start@@Base+0xeb98>
   23414:	mov	r3, #0
   23418:	strb	r3, [sp, #47]	; 0x2f
   2341c:	mov	r0, #0
   23420:	mov	r1, #0
   23424:	strd	r0, [sp, #56]	; 0x38
   23428:	str	r3, [sp, #52]	; 0x34
   2342c:	cmp	r6, r7
   23430:	beq	239b0 <_start@@Base+0xf3b0>
   23434:	add	r3, sp, #56	; 0x38
   23438:	str	r3, [sp]
   2343c:	add	r3, sp, #52	; 0x34
   23440:	mov	r2, r6
   23444:	mov	r1, r7
   23448:	mov	r0, r5
   2344c:	bl	2f170 <flatcc_json_parser_integer@@Base>
   23450:	mov	r4, r0
   23454:	cmp	r7, r0
   23458:	bne	234b0 <_start@@Base+0xeeb0>
   2345c:	mov	r7, r4
   23460:	add	r3, sp, #47	; 0x2f
   23464:	str	r3, [sp]
   23468:	ldr	r3, [sp, #32]
   2346c:	add	r3, r3, #676	; 0x2a4
   23470:	mov	r2, r6
   23474:	mov	r1, r7
   23478:	mov	r0, r5
   2347c:	bl	19860 <_start@@Base+0x5260>
   23480:	mov	r4, r0
   23484:	cmp	r6, r0
   23488:	cmpne	r0, r7
   2348c:	bne	234f4 <_start@@Base+0xeef4>
   23490:	b	23048 <_start@@Base+0xea48>
   23494:	nop	{0}
   23498:	eorsvc	r0, r2, #0
   2349c:	cmnvs	pc, #28416	; 0x6f00
   234a0:	andvc	r0, r0, #0
   234a4:	cmnvs	pc, #28416	; 0x6f00
   234a8:	andeq	r0, r0, r0
   234ac:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   234b0:	ldrd	r2, [sp, #56]	; 0x38
   234b4:	ldr	r1, [sp, #52]	; 0x34
   234b8:	cmp	r1, #0
   234bc:	beq	23534 <_start@@Base+0xef34>
   234c0:	cmp	r3, #0
   234c4:	cmpeq	r2, #128	; 0x80
   234c8:	rsbls	r2, r2, #0
   234cc:	strbls	r2, [sp, #47]	; 0x2f
   234d0:	bls	234f4 <_start@@Base+0xeef4>
   234d4:	mov	r3, #8
   234d8:	mov	r2, r6
   234dc:	mov	r1, r0
   234e0:	mov	r0, r5
   234e4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   234e8:	mov	r4, r0
   234ec:	cmp	r7, r4
   234f0:	beq	23560 <_start@@Base+0xef60>
   234f4:	ldrsb	r3, [sp, #47]	; 0x2f
   234f8:	cmp	r3, #2
   234fc:	bne	2350c <_start@@Base+0xef0c>
   23500:	ldr	r3, [r5, #8]
   23504:	tst	r3, #2
   23508:	beq	231ac <_start@@Base+0xebac>
   2350c:	mov	r3, #1
   23510:	mov	r2, r3
   23514:	mov	r1, #0
   23518:	ldr	r0, [r5]
   2351c:	bl	297a8 <flatcc_builder_table_add@@Base>
   23520:	cmp	r0, #0
   23524:	beq	23048 <_start@@Base+0xea48>
   23528:	ldrsb	r3, [sp, #47]	; 0x2f
   2352c:	strb	r3, [r0]
   23530:	b	231ac <_start@@Base+0xebac>
   23534:	cmp	r3, #0
   23538:	cmpeq	r2, #127	; 0x7f
   2353c:	strbls	r2, [sp, #47]	; 0x2f
   23540:	bls	234f4 <_start@@Base+0xeef4>
   23544:	mov	r3, #7
   23548:	mov	r2, r6
   2354c:	mov	r1, r0
   23550:	mov	r0, r5
   23554:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   23558:	mov	r4, r0
   2355c:	b	234ec <_start@@Base+0xeeec>
   23560:	mov	r7, r4
   23564:	b	23460 <_start@@Base+0xee60>
   23568:	mov	r3, #3
   2356c:	mov	r2, r6
   23570:	mov	r1, r4
   23574:	mov	r0, r5
   23578:	bl	18490 <_start@@Base+0x3e90>
   2357c:	mov	r7, r0
   23580:	cmp	r0, r4
   23584:	beq	236a4 <_start@@Base+0xf0a4>
   23588:	mov	r3, #0
   2358c:	strb	r3, [sp, #47]	; 0x2f
   23590:	mov	r0, #0
   23594:	mov	r1, #0
   23598:	strd	r0, [sp, #56]	; 0x38
   2359c:	str	r3, [sp, #52]	; 0x34
   235a0:	cmp	r6, r7
   235a4:	beq	239a0 <_start@@Base+0xf3a0>
   235a8:	add	r3, sp, #56	; 0x38
   235ac:	str	r3, [sp]
   235b0:	add	r3, sp, #52	; 0x34
   235b4:	mov	r2, r6
   235b8:	mov	r1, r7
   235bc:	mov	r0, r5
   235c0:	bl	2f170 <flatcc_json_parser_integer@@Base>
   235c4:	mov	r1, r0
   235c8:	cmp	r7, r0
   235cc:	bne	23604 <_start@@Base+0xf004>
   235d0:	add	r3, sp, #47	; 0x2f
   235d4:	str	r3, [sp]
   235d8:	ldr	r3, [sp, #32]
   235dc:	add	r3, r3, #692	; 0x2b4
   235e0:	mov	r2, r6
   235e4:	mov	r7, r1
   235e8:	mov	r0, r5
   235ec:	bl	19660 <_start@@Base+0x5060>
   235f0:	mov	r4, r0
   235f4:	cmp	r6, r0
   235f8:	cmpne	r7, r0
   235fc:	bne	2365c <_start@@Base+0xf05c>
   23600:	b	23048 <_start@@Base+0xea48>
   23604:	ldr	r3, [sp, #52]	; 0x34
   23608:	cmp	r3, #0
   2360c:	bne	23640 <_start@@Base+0xf040>
   23610:	ldrd	r2, [sp, #56]	; 0x38
   23614:	cmp	r3, #0
   23618:	cmpeq	r2, #255	; 0xff
   2361c:	strbls	r2, [sp, #47]	; 0x2f
   23620:	movls	r4, r0
   23624:	bls	2365c <_start@@Base+0xf05c>
   23628:	mov	r3, #7
   2362c:	mov	r2, r6
   23630:	mov	r0, r5
   23634:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   23638:	mov	r4, r0
   2363c:	b	23654 <_start@@Base+0xf054>
   23640:	mov	r3, #8
   23644:	mov	r2, r6
   23648:	mov	r0, r5
   2364c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   23650:	mov	r4, r0
   23654:	cmp	r7, r4
   23658:	beq	2369c <_start@@Base+0xf09c>
   2365c:	ldrb	r3, [sp, #47]	; 0x2f
   23660:	cmp	r3, #2
   23664:	bne	23674 <_start@@Base+0xf074>
   23668:	ldr	r3, [r5, #8]
   2366c:	tst	r3, #2
   23670:	beq	231ac <_start@@Base+0xebac>
   23674:	mov	r3, #1
   23678:	mov	r2, r3
   2367c:	mov	r1, #3
   23680:	ldr	r0, [r5]
   23684:	bl	297a8 <flatcc_builder_table_add@@Base>
   23688:	cmp	r0, #0
   2368c:	beq	23048 <_start@@Base+0xea48>
   23690:	ldrb	r3, [sp, #47]	; 0x2f
   23694:	strb	r3, [r0]
   23698:	b	231ac <_start@@Base+0xebac>
   2369c:	mov	r1, r4
   236a0:	b	235d0 <_start@@Base+0xefd0>
   236a4:	mov	r2, r6
   236a8:	mov	r1, r4
   236ac:	mov	r0, r5
   236b0:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   236b4:	mov	r4, r0
   236b8:	b	231ac <_start@@Base+0xebac>
   236bc:	mov	r3, #2
   236c0:	mov	r2, r6
   236c4:	mov	r1, r4
   236c8:	mov	r0, r5
   236cc:	bl	18490 <_start@@Base+0x3e90>
   236d0:	mov	r7, r0
   236d4:	cmp	r0, r4
   236d8:	beq	237f4 <_start@@Base+0xf1f4>
   236dc:	mov	r3, #0
   236e0:	strb	r3, [sp, #47]	; 0x2f
   236e4:	mov	r0, #0
   236e8:	mov	r1, #0
   236ec:	strd	r0, [sp, #56]	; 0x38
   236f0:	str	r3, [sp, #52]	; 0x34
   236f4:	cmp	r6, r7
   236f8:	beq	239a8 <_start@@Base+0xf3a8>
   236fc:	add	r3, sp, #56	; 0x38
   23700:	str	r3, [sp]
   23704:	add	r3, sp, #52	; 0x34
   23708:	mov	r2, r6
   2370c:	mov	r1, r7
   23710:	mov	r0, r5
   23714:	bl	2f170 <flatcc_json_parser_integer@@Base>
   23718:	mov	r1, r0
   2371c:	cmp	r7, r0
   23720:	bne	23754 <_start@@Base+0xf154>
   23724:	add	r3, sp, #47	; 0x2f
   23728:	str	r3, [sp]
   2372c:	ldr	r3, [sp, #36]	; 0x24
   23730:	mov	r2, r6
   23734:	mov	r7, r1
   23738:	mov	r0, r5
   2373c:	bl	19660 <_start@@Base+0x5060>
   23740:	mov	r4, r0
   23744:	cmp	r6, r0
   23748:	cmpne	r0, r7
   2374c:	bne	237ac <_start@@Base+0xf1ac>
   23750:	b	23048 <_start@@Base+0xea48>
   23754:	ldr	r3, [sp, #52]	; 0x34
   23758:	cmp	r3, #0
   2375c:	bne	23790 <_start@@Base+0xf190>
   23760:	ldrd	r2, [sp, #56]	; 0x38
   23764:	cmp	r3, #0
   23768:	cmpeq	r2, #255	; 0xff
   2376c:	strbls	r2, [sp, #47]	; 0x2f
   23770:	movls	r4, r0
   23774:	bls	237ac <_start@@Base+0xf1ac>
   23778:	mov	r3, #7
   2377c:	mov	r2, r6
   23780:	mov	r0, r5
   23784:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   23788:	mov	r4, r0
   2378c:	b	237a4 <_start@@Base+0xf1a4>
   23790:	mov	r3, #8
   23794:	mov	r2, r6
   23798:	mov	r0, r5
   2379c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   237a0:	mov	r4, r0
   237a4:	cmp	r7, r4
   237a8:	beq	237ec <_start@@Base+0xf1ec>
   237ac:	ldrb	r3, [sp, #47]	; 0x2f
   237b0:	cmp	r3, #2
   237b4:	bne	237c4 <_start@@Base+0xf1c4>
   237b8:	ldr	r3, [r5, #8]
   237bc:	tst	r3, #2
   237c0:	beq	231ac <_start@@Base+0xebac>
   237c4:	mov	r3, #1
   237c8:	mov	r2, r3
   237cc:	mov	r1, #2
   237d0:	ldr	r0, [r5]
   237d4:	bl	297a8 <flatcc_builder_table_add@@Base>
   237d8:	cmp	r0, #0
   237dc:	beq	23048 <_start@@Base+0xea48>
   237e0:	ldrb	r3, [sp, #47]	; 0x2f
   237e4:	strb	r3, [r0]
   237e8:	b	231ac <_start@@Base+0xebac>
   237ec:	mov	r1, r4
   237f0:	b	23724 <_start@@Base+0xf124>
   237f4:	mov	r2, r6
   237f8:	mov	r1, r4
   237fc:	mov	r0, r5
   23800:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   23804:	mov	r4, r0
   23808:	b	231ac <_start@@Base+0xebac>
   2380c:	ldr	r3, [r5, #24]
   23810:	cmp	r3, #0
   23814:	bne	23048 <_start@@Base+0xea48>
   23818:	ldr	r0, [r5]
   2381c:	bl	286bc <flatcc_builder_end_table@@Base>
   23820:	ldr	r3, [sp, #104]	; 0x68
   23824:	str	r0, [r3]
   23828:	cmp	r0, #0
   2382c:	movne	r0, r4
   23830:	bne	22ffc <_start@@Base+0xe9fc>
   23834:	b	23048 <_start@@Base+0xea48>
   23838:	mov	r1, #0
   2383c:	ldr	r0, [r0]
   23840:	bl	27be4 <flatcc_builder_start_table@@Base>
   23844:	cmp	r0, #0
   23848:	beq	23864 <_start@@Base+0xf264>
   2384c:	mov	r3, #33	; 0x21
   23850:	mov	r2, r6
   23854:	mov	r1, r4
   23858:	mov	r0, r5
   2385c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   23860:	b	22ffc <_start@@Base+0xe9fc>
   23864:	add	r3, sp, #56	; 0x38
   23868:	mov	r2, r6
   2386c:	mov	r1, r4
   23870:	mov	r0, r5
   23874:	bl	18650 <_start@@Base+0x4050>
   23878:	mov	r4, r0
   2387c:	ldr	r3, [sp, #56]	; 0x38
   23880:	cmp	r3, #0
   23884:	beq	23910 <_start@@Base+0xf310>
   23888:	mov	r7, #1
   2388c:	mov	r9, #5
   23890:	mov	r8, #0
   23894:	mov	r1, r0
   23898:	b	238e0 <_start@@Base+0xf2e0>
   2389c:	mov	r3, r9
   238a0:	mov	r2, r6
   238a4:	mov	r0, r5
   238a8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   238ac:	mov	r1, r0
   238b0:	mov	r2, r6
   238b4:	mov	r0, r5
   238b8:	bl	2ef40 <flatcc_json_parser_unmatched_symbol@@Base>
   238bc:	add	r3, sp, #56	; 0x38
   238c0:	mov	r2, r6
   238c4:	mov	r1, r0
   238c8:	mov	r0, r5
   238cc:	bl	180ec <_start@@Base+0x3aec>
   238d0:	mov	r1, r0
   238d4:	ldr	r3, [sp, #56]	; 0x38
   238d8:	cmp	r3, #0
   238dc:	beq	2390c <_start@@Base+0xf30c>
   238e0:	cmp	r6, r1
   238e4:	beq	238b0 <_start@@Base+0xf2b0>
   238e8:	ldrb	r3, [r1]
   238ec:	cmp	r3, #34	; 0x22
   238f0:	addeq	r1, r1, #1
   238f4:	streq	r8, [r5, #12]
   238f8:	beq	238b0 <_start@@Base+0xf2b0>
   238fc:	cmp	r3, #46	; 0x2e
   23900:	strne	r7, [r5, #12]
   23904:	bne	238b0 <_start@@Base+0xf2b0>
   23908:	b	2389c <_start@@Base+0xf29c>
   2390c:	mov	r4, r0
   23910:	ldr	r3, [r5, #24]
   23914:	cmp	r3, #0
   23918:	bne	2384c <_start@@Base+0xf24c>
   2391c:	ldr	r0, [r5]
   23920:	bl	286bc <flatcc_builder_end_table@@Base>
   23924:	ldr	r3, [sp, #104]	; 0x68
   23928:	str	r0, [r3]
   2392c:	cmp	r0, #0
   23930:	movne	r0, r4
   23934:	bne	22ffc <_start@@Base+0xe9fc>
   23938:	b	2384c <_start@@Base+0xf24c>
   2393c:	ldr	r3, [sp, #104]	; 0x68
   23940:	mov	r2, r6
   23944:	mov	r1, r4
   23948:	bl	20ba0 <_start@@Base+0xc5a0>
   2394c:	b	22ffc <_start@@Base+0xe9fc>
   23950:	ldr	r3, [r0, #8]
   23954:	tst	r3, #1
   23958:	bne	23970 <_start@@Base+0xf370>
   2395c:	mov	r3, #15
   23960:	mov	r2, r6
   23964:	mov	r1, r4
   23968:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2396c:	b	23018 <_start@@Base+0xea18>
   23970:	mov	r2, r6
   23974:	mov	r1, r4
   23978:	bl	2e43c <flatcc_json_parser_generic_json@@Base>
   2397c:	b	23018 <_start@@Base+0xea18>
   23980:	mov	r3, #33	; 0x21
   23984:	mov	r2, r6
   23988:	mov	r1, r0
   2398c:	mov	r0, r5
   23990:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   23994:	b	23018 <_start@@Base+0xea18>
   23998:	mov	r4, r7
   2399c:	b	23304 <_start@@Base+0xed04>
   239a0:	mov	r1, r7
   239a4:	b	235d0 <_start@@Base+0xefd0>
   239a8:	mov	r1, r7
   239ac:	b	23724 <_start@@Base+0xf124>
   239b0:	mov	r4, r7
   239b4:	b	2345c <_start@@Base+0xee5c>
   239b8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   239bc:	strd	r6, [sp, #8]
   239c0:	strd	r8, [sp, #16]
   239c4:	str	lr, [sp, #24]
   239c8:	sub	sp, sp, #12
   239cc:	mov	r9, r0
   239d0:	mov	r4, r1
   239d4:	mov	r5, r2
   239d8:	mov	r8, r3
   239dc:	mov	r1, r2
   239e0:	mov	r0, r4
   239e4:	bl	146f0 <_start@@Base+0xf0>
   239e8:	add	r3, pc, #856	; 0x358
   239ec:	ldrd	r2, [r3]
   239f0:	cmp	r1, r3
   239f4:	cmpeq	r0, r2
   239f8:	bhi	23b48 <_start@@Base+0xf548>
   239fc:	add	r3, pc, #844	; 0x34c
   23a00:	ldrd	r2, [r3]
   23a04:	cmp	r1, r3
   23a08:	cmpeq	r0, r2
   23a0c:	bhi	23a88 <_start@@Base+0xf488>
   23a10:	mov	r2, #0
   23a14:	bic	r3, r1, #255	; 0xff
   23a18:	add	r1, pc, #824	; 0x338
   23a1c:	ldrd	r0, [r1]
   23a20:	cmp	r3, r1
   23a24:	cmpeq	r2, r0
   23a28:	bne	23a6c <_start@@Base+0xf46c>
   23a2c:	sub	r3, r5, r4
   23a30:	cmp	r3, #3
   23a34:	ble	23a6c <_start@@Base+0xf46c>
   23a38:	ldrb	r3, [r4, #3]
   23a3c:	cmp	r3, #46	; 0x2e
   23a40:	bne	23a6c <_start@@Base+0xf46c>
   23a44:	ldr	r3, [sp, #44]	; 0x2c
   23a48:	str	r3, [sp, #4]
   23a4c:	ldr	r3, [sp, #40]	; 0x28
   23a50:	str	r3, [sp]
   23a54:	mov	r3, r8
   23a58:	mov	r2, r5
   23a5c:	add	r1, r4, #4
   23a60:	mov	r0, r9
   23a64:	bl	168a0 <_start@@Base+0x22a0>
   23a68:	mov	r4, r0
   23a6c:	mov	r0, r4
   23a70:	add	sp, sp, #12
   23a74:	ldrd	r4, [sp]
   23a78:	ldrd	r6, [sp, #8]
   23a7c:	ldrd	r8, [sp, #16]
   23a80:	add	sp, sp, #24
   23a84:	pop	{pc}		; (ldr pc, [sp], #4)
   23a88:	mov	r2, #0
   23a8c:	bic	r3, r1, #255	; 0xff
   23a90:	add	r7, pc, #712	; 0x2c8
   23a94:	ldrd	r6, [r7]
   23a98:	cmp	r3, r7
   23a9c:	cmpeq	r2, r6
   23aa0:	beq	23b04 <_start@@Base+0xf504>
   23aa4:	and	r2, r0, #-16777216	; 0xff000000
   23aa8:	mov	r3, r1
   23aac:	add	r1, pc, #692	; 0x2b4
   23ab0:	ldrd	r0, [r1]
   23ab4:	cmp	r3, r1
   23ab8:	cmpeq	r2, r0
   23abc:	bne	23a6c <_start@@Base+0xf46c>
   23ac0:	sub	r3, r5, r4
   23ac4:	cmp	r3, #5
   23ac8:	ble	23a6c <_start@@Base+0xf46c>
   23acc:	ldrb	r3, [r4, #5]
   23ad0:	cmp	r3, #46	; 0x2e
   23ad4:	bne	23a6c <_start@@Base+0xf46c>
   23ad8:	ldr	r3, [sp, #44]	; 0x2c
   23adc:	str	r3, [sp, #4]
   23ae0:	ldr	r3, [sp, #40]	; 0x28
   23ae4:	str	r3, [sp]
   23ae8:	mov	r3, r8
   23aec:	mov	r2, r5
   23af0:	add	r1, r4, #6
   23af4:	mov	r0, r9
   23af8:	bl	17258 <_start@@Base+0x2c58>
   23afc:	mov	r4, r0
   23b00:	b	23a6c <_start@@Base+0xf46c>
   23b04:	sub	r3, r5, r4
   23b08:	cmp	r3, #3
   23b0c:	ble	23a6c <_start@@Base+0xf46c>
   23b10:	ldrb	r3, [r4, #3]
   23b14:	cmp	r3, #46	; 0x2e
   23b18:	bne	23a6c <_start@@Base+0xf46c>
   23b1c:	ldr	r3, [sp, #44]	; 0x2c
   23b20:	str	r3, [sp, #4]
   23b24:	ldr	r3, [sp, #40]	; 0x28
   23b28:	str	r3, [sp]
   23b2c:	mov	r3, r8
   23b30:	mov	r2, r5
   23b34:	add	r1, r4, #4
   23b38:	mov	r0, r9
   23b3c:	bl	16b60 <_start@@Base+0x2560>
   23b40:	mov	r4, r0
   23b44:	b	23a6c <_start@@Base+0xf46c>
   23b48:	add	r3, pc, #544	; 0x220
   23b4c:	ldrd	r2, [r3]
   23b50:	cmp	r1, r3
   23b54:	cmpeq	r0, r2
   23b58:	bhi	23bb4 <_start@@Base+0xf5b4>
   23b5c:	add	r3, pc, #532	; 0x214
   23b60:	ldrd	r2, [r3]
   23b64:	cmp	r1, r3
   23b68:	cmpeq	r0, r2
   23b6c:	bne	23a6c <_start@@Base+0xf46c>
   23b70:	sub	r3, r5, r4
   23b74:	cmp	r3, #8
   23b78:	ble	23a6c <_start@@Base+0xf46c>
   23b7c:	ldrb	r3, [r4, #8]
   23b80:	cmp	r3, #46	; 0x2e
   23b84:	bne	23a6c <_start@@Base+0xf46c>
   23b88:	ldr	r3, [sp, #44]	; 0x2c
   23b8c:	str	r3, [sp, #4]
   23b90:	ldr	r3, [sp, #40]	; 0x28
   23b94:	str	r3, [sp]
   23b98:	mov	r3, r8
   23b9c:	mov	r2, r5
   23ba0:	add	r1, r4, #9
   23ba4:	mov	r0, r9
   23ba8:	bl	16cc8 <_start@@Base+0x26c8>
   23bac:	mov	r4, r0
   23bb0:	b	23a6c <_start@@Base+0xf46c>
   23bb4:	add	r3, pc, #452	; 0x1c4
   23bb8:	ldrd	r2, [r3]
   23bbc:	cmp	r1, r3
   23bc0:	cmpeq	r0, r2
   23bc4:	bhi	23c20 <_start@@Base+0xf620>
   23bc8:	add	r3, pc, #440	; 0x1b8
   23bcc:	ldrd	r2, [r3]
   23bd0:	cmp	r1, r3
   23bd4:	cmpeq	r0, r2
   23bd8:	bne	23a6c <_start@@Base+0xf46c>
   23bdc:	sub	r3, r5, r4
   23be0:	cmp	r3, #8
   23be4:	ble	23a6c <_start@@Base+0xf46c>
   23be8:	ldrb	r3, [r4, #8]
   23bec:	cmp	r3, #46	; 0x2e
   23bf0:	bne	23a6c <_start@@Base+0xf46c>
   23bf4:	ldr	r3, [sp, #44]	; 0x2c
   23bf8:	str	r3, [sp, #4]
   23bfc:	ldr	r3, [sp, #40]	; 0x28
   23c00:	str	r3, [sp]
   23c04:	mov	r3, r8
   23c08:	mov	r2, r5
   23c0c:	add	r1, r4, #9
   23c10:	mov	r0, r9
   23c14:	bl	16e80 <_start@@Base+0x2880>
   23c18:	mov	r4, r0
   23c1c:	b	23a6c <_start@@Base+0xf46c>
   23c20:	add	r3, pc, #360	; 0x168
   23c24:	ldrd	r2, [r3]
   23c28:	cmp	r1, r3
   23c2c:	cmpeq	r0, r2
   23c30:	bne	23c78 <_start@@Base+0xf678>
   23c34:	sub	r3, r5, r4
   23c38:	cmp	r3, #8
   23c3c:	ble	23a6c <_start@@Base+0xf46c>
   23c40:	ldrb	r3, [r4, #8]
   23c44:	cmp	r3, #46	; 0x2e
   23c48:	bne	23a6c <_start@@Base+0xf46c>
   23c4c:	ldr	r3, [sp, #44]	; 0x2c
   23c50:	str	r3, [sp, #4]
   23c54:	ldr	r3, [sp, #40]	; 0x28
   23c58:	str	r3, [sp]
   23c5c:	mov	r3, r8
   23c60:	mov	r2, r5
   23c64:	add	r1, r4, #9
   23c68:	mov	r0, r9
   23c6c:	bl	170b8 <_start@@Base+0x2ab8>
   23c70:	mov	r4, r0
   23c74:	b	23a6c <_start@@Base+0xf46c>
   23c78:	add	r3, pc, #280	; 0x118
   23c7c:	ldrd	r2, [r3]
   23c80:	cmp	r1, r3
   23c84:	cmpeq	r0, r2
   23c88:	bne	23a6c <_start@@Base+0xf46c>
   23c8c:	add	r6, r4, #8
   23c90:	mov	r1, r5
   23c94:	mov	r0, r6
   23c98:	bl	146f0 <_start@@Base+0xf0>
   23c9c:	mov	r2, #0
   23ca0:	mov	r3, r1
   23ca4:	add	r1, pc, #244	; 0xf4
   23ca8:	ldrd	r0, [r1]
   23cac:	cmp	r3, r1
   23cb0:	cmpeq	r2, r0
   23cb4:	bne	23a6c <_start@@Base+0xf46c>
   23cb8:	sub	r3, r5, r6
   23cbc:	cmp	r3, #4
   23cc0:	ble	23a6c <_start@@Base+0xf46c>
   23cc4:	ldrb	r3, [r4, #12]
   23cc8:	cmp	r3, #46	; 0x2e
   23ccc:	bne	23a6c <_start@@Base+0xf46c>
   23cd0:	add	r7, r4, #13
   23cd4:	cmp	r6, r7
   23cd8:	beq	23a6c <_start@@Base+0xf46c>
   23cdc:	mov	r1, r5
   23ce0:	mov	r0, r7
   23ce4:	bl	146f0 <_start@@Base+0xf0>
   23ce8:	mov	r2, #0
   23cec:	and	r3, r1, #-16777216	; 0xff000000
   23cf0:	cmp	r3, #2013265920	; 0x78000000
   23cf4:	cmpeq	r2, #0
   23cf8:	movne	r4, r7
   23cfc:	bne	23a6c <_start@@Base+0xf46c>
   23d00:	ldr	r3, [sp, #44]	; 0x2c
   23d04:	str	r3, [sp]
   23d08:	mov	r3, #1
   23d0c:	mov	r2, r5
   23d10:	mov	r1, r7
   23d14:	mov	r0, r9
   23d18:	bl	2dfa0 <flatcc_json_parser_match_constant@@Base>
   23d1c:	mov	r4, r0
   23d20:	cmp	r7, r0
   23d24:	beq	23a6c <_start@@Base+0xf46c>
   23d28:	mov	r2, #0
   23d2c:	mov	r3, #0
   23d30:	ldr	r1, [sp, #40]	; 0x28
   23d34:	strd	r2, [r1]
   23d38:	mov	r3, #0
   23d3c:	str	r3, [r8]
   23d40:	b	23a6c <_start@@Base+0xf46c>
   23d44:	nop	{0}
   23d48:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   23d4c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   23d50:	ldrshvc	pc, [pc, #255]	; 23e57 <test_json@@Base+0xaf>	; <UNPREDICTABLE>
   23d54:	cmnmi	pc, #28416	; 0x6f00
   23d58:	andeq	r0, r0, r0
   23d5c:	cmnmi	lr, r0, lsl #18
   23d60:	andeq	r0, r0, r0
   23d64:	strbtmi	r6, [pc], -r0, lsl #30
   23d68:	andvc	r0, r0, #0
   23d6c:	cmnmi	pc, #28416	; 0x6f00
   23d70:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   23d74:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   23d78:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   23d7c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   23d80:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   23d84:	mcrvs	7, 3, r6, cr5, cr15, {2}
   23d88:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   23d8c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   23d90:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   23d94:	mcrvs	7, 3, r6, cr5, cr15, {2}
   23d98:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   23d9c:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   23da0:	andeq	r0, r0, r0
   23da4:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

00023da8 <test_json@@Base>:
   23da8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23dac:	strd	r6, [sp, #8]
   23db0:	strd	r8, [sp, #16]
   23db4:	strd	sl, [sp, #24]
   23db8:	str	lr, [sp, #32]
   23dbc:	sub	sp, sp, #380	; 0x17c
   23dc0:	mov	r5, r0
   23dc4:	mov	r6, r1
   23dc8:	mov	r8, r2
   23dcc:	mov	r7, r3
   23dd0:	ldr	r4, [sp, #420]	; 0x1a4
   23dd4:	add	r0, sp, #136	; 0x88
   23dd8:	bl	26230 <flatcc_builder_init@@Base>
   23ddc:	mov	r1, #0
   23de0:	add	r0, sp, #44	; 0x2c
   23de4:	bl	3dfb8 <flatcc_json_printer_init_dynamic_buffer@@Base>
   23de8:	and	r3, r4, #1
   23dec:	strb	r3, [sp, #70]	; 0x46
   23df0:	ubfx	r3, r4, #1, #1
   23df4:	strb	r3, [sp, #71]	; 0x47
   23df8:	ubfx	r3, r4, #2, #1
   23dfc:	strb	r3, [sp, #72]	; 0x48
   23e00:	ubfx	r3, r4, #3, #1
   23e04:	strb	r3, [sp, #73]	; 0x49
   23e08:	tst	r4, #16
   23e0c:	movne	r3, #2
   23e10:	strbne	r3, [sp, #69]	; 0x45
   23e14:	tst	r4, #32
   23e18:	beq	23e34 <test_json@@Base+0x8c>
   23e1c:	mov	r3, #2
   23e20:	strb	r3, [sp, #69]	; 0x45
   23e24:	mov	r3, #1
   23e28:	strb	r3, [sp, #70]	; 0x46
   23e2c:	mov	r3, #0
   23e30:	strb	r3, [sp, #71]	; 0x47
   23e34:	mov	r0, r6
   23e38:	bl	14578 <strlen@plt>
   23e3c:	ldr	r3, [r5, #4]
   23e40:	str	r3, [sp, #8]
   23e44:	ldr	r3, [r5]
   23e48:	str	r3, [sp, #4]
   23e4c:	ldr	r3, [sp, #416]	; 0x1a0
   23e50:	str	r3, [sp]
   23e54:	mov	r3, r0
   23e58:	mov	r2, r6
   23e5c:	add	r1, sp, #92	; 0x5c
   23e60:	add	r0, sp, #136	; 0x88
   23e64:	bl	303ec <flatcc_json_parser_table_as_root@@Base>
   23e68:	cmp	r0, r7
   23e6c:	bne	23eb8 <test_json@@Base+0x110>
   23e70:	cmp	r7, #0
   23e74:	movne	r4, #0
   23e78:	movne	r5, r4
   23e7c:	beq	24010 <test_json@@Base+0x268>
   23e80:	mov	r0, r4
   23e84:	bl	2a098 <flatcc_builder_aligned_free@@Base>
   23e88:	add	r0, sp, #136	; 0x88
   23e8c:	bl	26414 <flatcc_builder_clear@@Base>
   23e90:	add	r0, sp, #44	; 0x2c
   23e94:	bl	3e0e4 <flatcc_json_printer_clear@@Base>
   23e98:	mov	r0, r5
   23e9c:	add	sp, sp, #380	; 0x17c
   23ea0:	ldrd	r4, [sp]
   23ea4:	ldrd	r6, [sp, #8]
   23ea8:	ldrd	r8, [sp, #16]
   23eac:	ldrd	sl, [sp, #24]
   23eb0:	add	sp, sp, #32
   23eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   23eb8:	cmp	r7, #0
   23ebc:	beq	23fd0 <test_json@@Base+0x228>
   23ec0:	cmp	r0, #0
   23ec4:	beq	23f8c <test_json@@Base+0x1e4>
   23ec8:	movw	r4, #21312	; 0x5340
   23ecc:	movt	r4, #5
   23ed0:	ldr	r5, [r4]
   23ed4:	bl	2cf30 <flatcc_json_parser_error_string@@Base>
   23ed8:	mov	r3, r0
   23edc:	ldr	r2, [sp, #424]	; 0x1a8
   23ee0:	movw	r1, #60816	; 0xed90
   23ee4:	movt	r1, #3
   23ee8:	mov	r0, r5
   23eec:	bl	14584 <fprintf@plt>
   23ef0:	ldr	r5, [r4]
   23ef4:	mov	r0, r7
   23ef8:	bl	2cf30 <flatcc_json_parser_error_string@@Base>
   23efc:	mov	r2, r0
   23f00:	movw	r1, #60856	; 0xedb8
   23f04:	movt	r1, #3
   23f08:	mov	r0, r5
   23f0c:	bl	14584 <fprintf@plt>
   23f10:	mov	r2, r6
   23f14:	movw	r1, #60948	; 0xee14
   23f18:	movt	r1, #3
   23f1c:	ldr	r0, [r4]
   23f20:	bl	14584 <fprintf@plt>
   23f24:	ldr	r3, [sp, #112]	; 0x70
   23f28:	cmp	r3, #1
   23f2c:	ble	23f60 <test_json@@Base+0x1b8>
   23f30:	mov	r4, #0
   23f34:	movw	r5, #21312	; 0x5340
   23f38:	movt	r5, #5
   23f3c:	mov	r6, #32
   23f40:	ldr	r1, [r5]
   23f44:	mov	r0, r6
   23f48:	bl	145cc <fputc@plt>
   23f4c:	add	r4, r4, #1
   23f50:	ldr	r3, [sp, #112]	; 0x70
   23f54:	sub	r3, r3, #1
   23f58:	cmp	r3, r4
   23f5c:	bgt	23f40 <test_json@@Base+0x198>
   23f60:	movw	r3, #21312	; 0x5340
   23f64:	movt	r3, #5
   23f68:	ldr	r3, [r3]
   23f6c:	mov	r2, #2
   23f70:	mov	r1, #1
   23f74:	movw	r0, #60988	; 0xee3c
   23f78:	movt	r0, #3
   23f7c:	bl	14548 <fwrite@plt>
   23f80:	mov	r4, #0
   23f84:	mvn	r5, #0
   23f88:	b	23e80 <test_json@@Base+0xd8>
   23f8c:	movw	r4, #21312	; 0x5340
   23f90:	movt	r4, #5
   23f94:	ldr	r5, [r4]
   23f98:	mov	r0, r7
   23f9c:	bl	2cf30 <flatcc_json_parser_error_string@@Base>
   23fa0:	mov	r3, r0
   23fa4:	ldr	r2, [sp, #424]	; 0x1a8
   23fa8:	movw	r1, #60888	; 0xedd8
   23fac:	movt	r1, #3
   23fb0:	mov	r0, r5
   23fb4:	bl	14584 <fprintf@plt>
   23fb8:	mov	r2, r6
   23fbc:	movw	r1, #60948	; 0xee14
   23fc0:	movt	r1, #3
   23fc4:	ldr	r0, [r4]
   23fc8:	bl	14584 <fprintf@plt>
   23fcc:	b	23f24 <test_json@@Base+0x17c>
   23fd0:	movw	r4, #21312	; 0x5340
   23fd4:	movt	r4, #5
   23fd8:	ldr	r5, [r4]
   23fdc:	bl	2cf30 <flatcc_json_parser_error_string@@Base>
   23fe0:	mov	r3, r0
   23fe4:	ldr	r2, [sp, #424]	; 0x1a8
   23fe8:	movw	r1, #60952	; 0xee18
   23fec:	movt	r1, #3
   23ff0:	mov	r0, r5
   23ff4:	bl	14584 <fprintf@plt>
   23ff8:	mov	r2, r6
   23ffc:	movw	r1, #60948	; 0xee14
   24000:	movt	r1, #3
   24004:	ldr	r0, [r4]
   24008:	bl	14584 <fprintf@plt>
   2400c:	b	23f24 <test_json@@Base+0x17c>
   24010:	add	r1, sp, #372	; 0x174
   24014:	add	r0, sp, #136	; 0x88
   24018:	bl	29f78 <flatcc_builder_finalize_aligned_buffer@@Base>
   2401c:	mov	r4, r0
   24020:	ldr	r3, [r5, #12]
   24024:	ldr	r2, [r5]
   24028:	ldr	r1, [sp, #372]	; 0x174
   2402c:	bl	2b558 <flatcc_verify_table_as_root@@Base>
   24030:	cmp	r0, #0
   24034:	bne	2413c <test_json@@Base+0x394>
   24038:	ldr	r3, [r5, #8]
   2403c:	str	r3, [sp]
   24040:	ldr	r3, [r5]
   24044:	ldr	r2, [sp, #372]	; 0x174
   24048:	mov	r1, r4
   2404c:	add	r0, sp, #44	; 0x2c
   24050:	bl	3d898 <flatcc_json_printer_table_as_root@@Base>
   24054:	add	r1, sp, #368	; 0x170
   24058:	add	r0, sp, #44	; 0x2c
   2405c:	bl	3e05c <flatcc_json_printer_get_buffer@@Base>
   24060:	subs	r6, r0, #0
   24064:	beq	2407c <test_json@@Base+0x2d4>
   24068:	mov	r1, r6
   2406c:	mov	r0, r8
   24070:	bl	14500 <strcmp@plt>
   24074:	subs	r5, r0, #0
   24078:	beq	23e80 <test_json@@Base+0xd8>
   2407c:	movw	r5, #21312	; 0x5340
   24080:	movt	r5, #5
   24084:	ldr	r2, [sp, #424]	; 0x1a8
   24088:	movw	r1, #61108	; 0xeeb4
   2408c:	movt	r1, #3
   24090:	ldr	r0, [r5]
   24094:	bl	14584 <fprintf@plt>
   24098:	movw	r7, #60948	; 0xee14
   2409c:	movt	r7, #3
   240a0:	mov	r2, r6
   240a4:	mov	r1, r7
   240a8:	ldr	r0, [r5]
   240ac:	bl	14584 <fprintf@plt>
   240b0:	ldr	r3, [r5]
   240b4:	mov	r2, #10
   240b8:	mov	r1, #1
   240bc:	movw	r0, #61164	; 0xeeec
   240c0:	movt	r0, #3
   240c4:	bl	14548 <fwrite@plt>
   240c8:	mov	r2, r8
   240cc:	mov	r1, r7
   240d0:	ldr	r0, [r5]
   240d4:	bl	14584 <fprintf@plt>
   240d8:	cmp	r4, #0
   240dc:	mvneq	r5, #0
   240e0:	beq	23e80 <test_json@@Base+0xd8>
   240e4:	ldr	r7, [sp, #372]	; 0x174
   240e8:	movw	r3, #21312	; 0x5340
   240ec:	movt	r3, #5
   240f0:	ldr	r8, [r3]
   240f4:	movw	r2, #61176	; 0xeef8
   240f8:	movt	r2, #3
   240fc:	movw	r1, #61192	; 0xef08
   24100:	movt	r1, #3
   24104:	mov	r0, r8
   24108:	bl	14584 <fprintf@plt>
   2410c:	cmp	r7, #0
   24110:	beq	24238 <test_json@@Base+0x490>
   24114:	sub	r9, r4, #1
   24118:	mov	r5, #0
   2411c:	movw	fp, #61208	; 0xef18
   24120:	movt	fp, #3
   24124:	movw	r3, #61200	; 0xef10
   24128:	movt	r3, #3
   2412c:	str	r3, [sp, #20]
   24130:	movw	sl, #61216	; 0xef20
   24134:	movt	sl, #3
   24138:	b	241c4 <test_json@@Base+0x41c>
   2413c:	movw	r3, #21312	; 0x5340
   24140:	movt	r3, #5
   24144:	ldr	r5, [r3]
   24148:	bl	2a7a0 <flatcc_verify_error_string@@Base>
   2414c:	str	r0, [sp]
   24150:	ldr	r3, [sp, #424]	; 0x1a8
   24154:	movw	r2, #60992	; 0xee40
   24158:	movt	r2, #3
   2415c:	movw	r1, #61068	; 0xee8c
   24160:	movt	r1, #3
   24164:	mov	r0, r5
   24168:	bl	14584 <fprintf@plt>
   2416c:	b	240d8 <test_json@@Base+0x330>
   24170:	mov	r2, r5
   24174:	mov	r1, fp
   24178:	mov	r0, r8
   2417c:	bl	14584 <fprintf@plt>
   24180:	ldrb	r2, [r9, #1]!
   24184:	mov	r1, sl
   24188:	mov	r0, r8
   2418c:	bl	14584 <fprintf@plt>
   24190:	ldrb	r3, [r9]
   24194:	sub	r2, r3, #32
   24198:	uxtb	r2, r2
   2419c:	cmp	r2, #95	; 0x5f
   241a0:	movcs	r3, #46	; 0x2e
   241a4:	add	r2, sp, #376	; 0x178
   241a8:	add	r6, r2, r6
   241ac:	strb	r3, [r6, #-352]	; 0xfffffea0
   241b0:	mov	r3, #0
   241b4:	strb	r3, [r6, #-351]	; 0xfffffea1
   241b8:	add	r5, r5, #1
   241bc:	cmp	r7, r5
   241c0:	beq	24200 <test_json@@Base+0x458>
   241c4:	ands	r6, r5, #15
   241c8:	bne	241e8 <test_json@@Base+0x440>
   241cc:	cmp	r5, #0
   241d0:	beq	24170 <test_json@@Base+0x3c8>
   241d4:	add	r2, sp, #24
   241d8:	ldr	r1, [sp, #20]
   241dc:	mov	r0, r8
   241e0:	bl	14584 <fprintf@plt>
   241e4:	b	24170 <test_json@@Base+0x3c8>
   241e8:	tst	r5, #7
   241ec:	bne	24180 <test_json@@Base+0x3d8>
   241f0:	mov	r1, r8
   241f4:	mov	r0, #32
   241f8:	bl	145cc <fputc@plt>
   241fc:	b	24180 <test_json@@Base+0x3d8>
   24200:	tst	r7, #15
   24204:	beq	24238 <test_json@@Base+0x490>
   24208:	movw	r5, #61224	; 0xef28
   2420c:	movt	r5, #3
   24210:	mov	r9, #3
   24214:	mov	r6, #1
   24218:	mov	r3, r8
   2421c:	mov	r2, r9
   24220:	mov	r1, r6
   24224:	mov	r0, r5
   24228:	bl	14548 <fwrite@plt>
   2422c:	add	r7, r7, #1
   24230:	tst	r7, #15
   24234:	bne	24218 <test_json@@Base+0x470>
   24238:	add	r2, sp, #24
   2423c:	movw	r1, #61200	; 0xef10
   24240:	movt	r1, #3
   24244:	mov	r0, r8
   24248:	bl	14584 <fprintf@plt>
   2424c:	mvn	r5, #0
   24250:	b	23e80 <test_json@@Base+0xd8>

00024254 <edge_case_tests@@Base>:
   24254:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24258:	strd	r6, [sp, #8]
   2425c:	strd	r8, [sp, #16]
   24260:	strd	sl, [sp, #24]
   24264:	str	lr, [sp, #32]
   24268:	sub	sp, sp, #36	; 0x24
   2426c:	movw	r6, #59676	; 0xe91c
   24270:	movt	r6, #3
   24274:	mov	r3, #155	; 0x9b
   24278:	str	r3, [sp, #8]
   2427c:	mov	r5, #0
   24280:	str	r5, [sp, #4]
   24284:	str	r5, [sp]
   24288:	mov	r3, r5
   2428c:	movw	r2, #61228	; 0xef2c
   24290:	movt	r2, #3
   24294:	movw	r1, #61260	; 0xef4c
   24298:	movt	r1, #3
   2429c:	mov	r0, r6
   242a0:	bl	23da8 <test_json@@Base>
   242a4:	mov	r4, r0
   242a8:	movw	fp, #61312	; 0xef80
   242ac:	movt	fp, #3
   242b0:	movw	r7, #61348	; 0xefa4
   242b4:	movt	r7, #3
   242b8:	mov	r3, #168	; 0xa8
   242bc:	str	r3, [sp, #8]
   242c0:	str	r5, [sp, #4]
   242c4:	mov	r8, #2
   242c8:	str	r8, [sp]
   242cc:	mov	r3, r5
   242d0:	mov	r2, fp
   242d4:	mov	r1, r7
   242d8:	mov	r0, r6
   242dc:	bl	23da8 <test_json@@Base>
   242e0:	orr	r4, r4, r0
   242e4:	movw	r3, #61384	; 0xefc8
   242e8:	movt	r3, #3
   242ec:	mov	r2, r3
   242f0:	mov	r3, #172	; 0xac
   242f4:	str	r3, [sp, #8]
   242f8:	str	r8, [sp, #4]
   242fc:	str	r5, [sp]
   24300:	mov	r3, r5
   24304:	str	r2, [sp, #20]
   24308:	movw	r1, #61416	; 0xefe8
   2430c:	movt	r1, #3
   24310:	mov	r0, r6
   24314:	bl	23da8 <test_json@@Base>
   24318:	orr	r4, r4, r0
   2431c:	movw	r1, #61456	; 0xf010
   24320:	movt	r1, #3
   24324:	mov	r3, #176	; 0xb0
   24328:	str	r3, [sp, #8]
   2432c:	mov	r0, #4
   24330:	str	r0, [sp, #4]
   24334:	str	r8, [sp]
   24338:	mov	r3, r5
   2433c:	str	r1, [sp, #24]
   24340:	mov	r2, r1
   24344:	mov	r1, r7
   24348:	mov	r0, r6
   2434c:	bl	23da8 <test_json@@Base>
   24350:	orr	r4, r4, r0
   24354:	mov	r3, #180	; 0xb4
   24358:	str	r3, [sp, #8]
   2435c:	mov	ip, #8
   24360:	str	ip, [sp, #4]
   24364:	str	r5, [sp]
   24368:	mov	r3, r5
   2436c:	movw	r2, #61476	; 0xf024
   24370:	movt	r2, #3
   24374:	movw	r1, #61752	; 0xf138
   24378:	movt	r1, #3
   2437c:	mov	r0, r6
   24380:	bl	23da8 <test_json@@Base>
   24384:	orr	r4, r4, r0
   24388:	mov	r3, #195	; 0xc3
   2438c:	str	r3, [sp, #8]
   24390:	str	r5, [sp, #4]
   24394:	str	r8, [sp]
   24398:	mov	r3, r5
   2439c:	mov	r2, fp
   243a0:	movw	r1, #61788	; 0xf15c
   243a4:	movt	r1, #3
   243a8:	mov	r0, r6
   243ac:	bl	23da8 <test_json@@Base>
   243b0:	orr	r4, r4, r0
   243b4:	movw	r9, #61828	; 0xf184
   243b8:	movt	r9, #3
   243bc:	movw	sl, #61856	; 0xf1a0
   243c0:	movt	sl, #3
   243c4:	mov	r3, #199	; 0xc7
   243c8:	str	r3, [sp, #8]
   243cc:	str	r5, [sp, #4]
   243d0:	mov	r7, #1
   243d4:	str	r7, [sp]
   243d8:	mov	r3, r5
   243dc:	mov	r2, r9
   243e0:	mov	r1, sl
   243e4:	mov	r0, r6
   243e8:	bl	23da8 <test_json@@Base>
   243ec:	orr	r4, r4, r0
   243f0:	movw	r0, #61908	; 0xf1d4
   243f4:	movt	r0, #3
   243f8:	mov	r3, #203	; 0xcb
   243fc:	str	r3, [sp, #8]
   24400:	str	r7, [sp, #4]
   24404:	str	r7, [sp]
   24408:	mov	r3, r5
   2440c:	str	r0, [sp, #28]
   24410:	mov	r2, r0
   24414:	mov	r1, sl
   24418:	mov	r0, r6
   2441c:	bl	23da8 <test_json@@Base>
   24420:	orr	r4, r4, r0
   24424:	mov	r3, #209	; 0xd1
   24428:	str	r3, [sp, #8]
   2442c:	str	r5, [sp, #4]
   24430:	str	r7, [sp]
   24434:	mov	r3, r5
   24438:	mov	r2, r9
   2443c:	movw	r1, #61932	; 0xf1ec
   24440:	movt	r1, #3
   24444:	mov	r0, r6
   24448:	bl	23da8 <test_json@@Base>
   2444c:	orr	r4, r4, r0
   24450:	movw	sl, #62048	; 0xf260
   24454:	movt	sl, #3
   24458:	mov	r3, #217	; 0xd9
   2445c:	str	r3, [sp, #8]
   24460:	str	r5, [sp, #4]
   24464:	str	r8, [sp]
   24468:	mov	r3, r5
   2446c:	mov	r2, fp
   24470:	mov	r1, sl
   24474:	mov	r0, r6
   24478:	bl	23da8 <test_json@@Base>
   2447c:	orr	r4, r4, r0
   24480:	mov	r3, #221	; 0xdd
   24484:	str	r3, [sp, #8]
   24488:	str	r8, [sp, #4]
   2448c:	str	r5, [sp]
   24490:	mov	r3, r5
   24494:	ldr	r2, [sp, #20]
   24498:	movw	r1, #62080	; 0xf280
   2449c:	movt	r1, #3
   244a0:	mov	r0, r6
   244a4:	bl	23da8 <test_json@@Base>
   244a8:	orr	r4, r4, r0
   244ac:	mov	r3, #225	; 0xe1
   244b0:	str	r3, [sp, #8]
   244b4:	mov	r3, #4
   244b8:	str	r3, [sp, #4]
   244bc:	str	r8, [sp]
   244c0:	mov	r3, r5
   244c4:	ldr	r2, [sp, #24]
   244c8:	mov	r1, sl
   244cc:	mov	r0, r6
   244d0:	bl	23da8 <test_json@@Base>
   244d4:	orr	r4, r4, r0
   244d8:	mov	r3, #229	; 0xe5
   244dc:	str	r3, [sp, #8]
   244e0:	mov	ip, #8
   244e4:	str	ip, [sp, #4]
   244e8:	str	r5, [sp]
   244ec:	mov	r3, r5
   244f0:	movw	r2, #62116	; 0xf2a4
   244f4:	movt	r2, #3
   244f8:	movw	r1, #62396	; 0xf3bc
   244fc:	movt	r1, #3
   24500:	mov	r0, r6
   24504:	bl	23da8 <test_json@@Base>
   24508:	orr	r4, r4, r0
   2450c:	mov	r3, #233	; 0xe9
   24510:	str	r3, [sp, #8]
   24514:	str	r5, [sp, #4]
   24518:	str	r8, [sp]
   2451c:	mov	r3, r5
   24520:	mov	r2, fp
   24524:	movw	r1, #62416	; 0xf3d0
   24528:	movt	r1, #3
   2452c:	mov	r0, r6
   24530:	bl	23da8 <test_json@@Base>
   24534:	orr	r4, r4, r0
   24538:	movw	r8, #62448	; 0xf3f0
   2453c:	movt	r8, #3
   24540:	mov	r3, #237	; 0xed
   24544:	str	r3, [sp, #8]
   24548:	str	r5, [sp, #4]
   2454c:	str	r7, [sp]
   24550:	mov	r3, r5
   24554:	mov	r2, r9
   24558:	mov	r1, r8
   2455c:	mov	r0, r6
   24560:	bl	23da8 <test_json@@Base>
   24564:	orr	r4, r4, r0
   24568:	mov	r3, #241	; 0xf1
   2456c:	str	r3, [sp, #8]
   24570:	str	r7, [sp, #4]
   24574:	str	r7, [sp]
   24578:	mov	r3, r5
   2457c:	ldr	r2, [sp, #28]
   24580:	mov	r1, r8
   24584:	mov	r0, r6
   24588:	bl	23da8 <test_json@@Base>
   2458c:	orr	r4, r4, r0
   24590:	mov	r3, #247	; 0xf7
   24594:	str	r3, [sp, #8]
   24598:	str	r5, [sp, #4]
   2459c:	str	r7, [sp]
   245a0:	mov	r3, r5
   245a4:	mov	r2, r9
   245a8:	movw	r1, #62492	; 0xf41c
   245ac:	movt	r1, #3
   245b0:	mov	r0, r6
   245b4:	bl	23da8 <test_json@@Base>
   245b8:	orr	r0, r4, r0
   245bc:	add	sp, sp, #36	; 0x24
   245c0:	ldrd	r4, [sp]
   245c4:	ldrd	r6, [sp, #8]
   245c8:	ldrd	r8, [sp, #16]
   245cc:	ldrd	sl, [sp, #24]
   245d0:	add	sp, sp, #32
   245d4:	pop	{pc}		; (ldr pc, [sp], #4)

000245d8 <error_case_tests@@Base>:
   245d8:	strd	r4, [sp, #-16]!
   245dc:	str	r6, [sp, #8]
   245e0:	str	lr, [sp, #12]
   245e4:	sub	sp, sp, #16
   245e8:	movw	r6, #59676	; 0xe91c
   245ec:	movt	r6, #3
   245f0:	movw	r3, #285	; 0x11d
   245f4:	str	r3, [sp, #8]
   245f8:	mov	r4, #0
   245fc:	str	r4, [sp, #4]
   24600:	str	r4, [sp]
   24604:	mov	r3, #13
   24608:	mov	r2, r4
   2460c:	movw	r1, #62588	; 0xf47c
   24610:	movt	r1, #3
   24614:	mov	r0, r6
   24618:	bl	23da8 <test_json@@Base>
   2461c:	mov	r5, r0
   24620:	movw	r3, #287	; 0x11f
   24624:	str	r3, [sp, #8]
   24628:	str	r4, [sp, #4]
   2462c:	str	r4, [sp]
   24630:	mov	r3, #13
   24634:	mov	r2, r4
   24638:	movw	r1, #62616	; 0xf498
   2463c:	movt	r1, #3
   24640:	mov	r0, r6
   24644:	bl	23da8 <test_json@@Base>
   24648:	orr	r5, r5, r0
   2464c:	movw	r3, #289	; 0x121
   24650:	str	r3, [sp, #8]
   24654:	str	r4, [sp, #4]
   24658:	str	r4, [sp]
   2465c:	mov	r3, #13
   24660:	mov	r2, r4
   24664:	movw	r1, #62716	; 0xf4fc
   24668:	movt	r1, #3
   2466c:	mov	r0, r6
   24670:	bl	23da8 <test_json@@Base>
   24674:	orr	r5, r5, r0
   24678:	movw	r3, #291	; 0x123
   2467c:	str	r3, [sp, #8]
   24680:	str	r4, [sp, #4]
   24684:	str	r4, [sp]
   24688:	mov	r3, #13
   2468c:	mov	r2, r4
   24690:	movw	r1, #62812	; 0xf55c
   24694:	movt	r1, #3
   24698:	mov	r0, r6
   2469c:	bl	23da8 <test_json@@Base>
   246a0:	orr	r5, r5, r0
   246a4:	movw	r3, #293	; 0x125
   246a8:	str	r3, [sp, #8]
   246ac:	str	r4, [sp, #4]
   246b0:	str	r4, [sp]
   246b4:	mov	r3, #13
   246b8:	mov	r2, r4
   246bc:	movw	r1, #62900	; 0xf5b4
   246c0:	movt	r1, #3
   246c4:	mov	r0, r6
   246c8:	bl	23da8 <test_json@@Base>
   246cc:	orr	r5, r5, r0
   246d0:	mov	r3, #296	; 0x128
   246d4:	str	r3, [sp, #8]
   246d8:	str	r4, [sp, #4]
   246dc:	str	r4, [sp]
   246e0:	mov	r3, #13
   246e4:	mov	r2, r4
   246e8:	movw	r1, #62988	; 0xf60c
   246ec:	movt	r1, #3
   246f0:	mov	r0, r6
   246f4:	bl	23da8 <test_json@@Base>
   246f8:	orr	r5, r5, r0
   246fc:	movw	r3, #299	; 0x12b
   24700:	str	r3, [sp, #8]
   24704:	str	r4, [sp, #4]
   24708:	str	r4, [sp]
   2470c:	mov	r3, #13
   24710:	mov	r2, r4
   24714:	movw	r1, #63148	; 0xf6ac
   24718:	movt	r1, #3
   2471c:	mov	r0, r6
   24720:	bl	23da8 <test_json@@Base>
   24724:	orr	r5, r5, r0
   24728:	movw	r3, #303	; 0x12f
   2472c:	str	r3, [sp, #8]
   24730:	str	r4, [sp, #4]
   24734:	str	r4, [sp]
   24738:	mov	r3, #13
   2473c:	mov	r2, r4
   24740:	movw	r1, #63304	; 0xf748
   24744:	movt	r1, #3
   24748:	mov	r0, r6
   2474c:	bl	23da8 <test_json@@Base>
   24750:	orr	r5, r5, r0
   24754:	movw	r3, #307	; 0x133
   24758:	str	r3, [sp, #8]
   2475c:	str	r4, [sp, #4]
   24760:	str	r4, [sp]
   24764:	mov	r3, #13
   24768:	mov	r2, r4
   2476c:	movw	r1, #63504	; 0xf810
   24770:	movt	r1, #3
   24774:	mov	r0, r6
   24778:	bl	23da8 <test_json@@Base>
   2477c:	orr	r5, r5, r0
   24780:	movw	r3, #322	; 0x142
   24784:	str	r3, [sp, #8]
   24788:	str	r4, [sp, #4]
   2478c:	str	r4, [sp]
   24790:	mov	r3, #13
   24794:	mov	r2, r4
   24798:	movw	r1, #63704	; 0xf8d8
   2479c:	movt	r1, #3
   247a0:	mov	r0, r6
   247a4:	bl	23da8 <test_json@@Base>
   247a8:	orr	r5, r5, r0
   247ac:	mov	r3, #324	; 0x144
   247b0:	str	r3, [sp, #8]
   247b4:	str	r4, [sp, #4]
   247b8:	str	r4, [sp]
   247bc:	mov	r3, #13
   247c0:	mov	r2, r4
   247c4:	movw	r1, #63728	; 0xf8f0
   247c8:	movt	r1, #3
   247cc:	mov	r0, r6
   247d0:	bl	23da8 <test_json@@Base>
   247d4:	orr	r5, r5, r0
   247d8:	movw	r3, #326	; 0x146
   247dc:	str	r3, [sp, #8]
   247e0:	str	r4, [sp, #4]
   247e4:	str	r4, [sp]
   247e8:	mov	r3, #13
   247ec:	mov	r2, r4
   247f0:	movw	r1, #63816	; 0xf948
   247f4:	movt	r1, #3
   247f8:	mov	r0, r6
   247fc:	bl	23da8 <test_json@@Base>
   24800:	orr	r5, r5, r0
   24804:	mov	r3, #328	; 0x148
   24808:	str	r3, [sp, #8]
   2480c:	str	r4, [sp, #4]
   24810:	str	r4, [sp]
   24814:	mov	r3, #13
   24818:	mov	r2, r4
   2481c:	movw	r1, #63900	; 0xf99c
   24820:	movt	r1, #3
   24824:	mov	r0, r6
   24828:	bl	23da8 <test_json@@Base>
   2482c:	orr	r5, r5, r0
   24830:	movw	r3, #330	; 0x14a
   24834:	str	r3, [sp, #8]
   24838:	str	r4, [sp, #4]
   2483c:	str	r4, [sp]
   24840:	mov	r3, #13
   24844:	mov	r2, r4
   24848:	movw	r1, #63980	; 0xf9ec
   2484c:	movt	r1, #3
   24850:	mov	r0, r6
   24854:	bl	23da8 <test_json@@Base>
   24858:	orr	r5, r5, r0
   2485c:	movw	r3, #333	; 0x14d
   24860:	str	r3, [sp, #8]
   24864:	str	r4, [sp, #4]
   24868:	str	r4, [sp]
   2486c:	mov	r3, #13
   24870:	mov	r2, r4
   24874:	movw	r1, #64060	; 0xfa3c
   24878:	movt	r1, #3
   2487c:	mov	r0, r6
   24880:	bl	23da8 <test_json@@Base>
   24884:	orr	r5, r5, r0
   24888:	mov	r3, #336	; 0x150
   2488c:	str	r3, [sp, #8]
   24890:	str	r4, [sp, #4]
   24894:	str	r4, [sp]
   24898:	mov	r3, #13
   2489c:	mov	r2, r4
   248a0:	movw	r1, #64200	; 0xfac8
   248a4:	movt	r1, #3
   248a8:	mov	r0, r6
   248ac:	bl	23da8 <test_json@@Base>
   248b0:	orr	r5, r5, r0
   248b4:	mov	r3, #340	; 0x154
   248b8:	str	r3, [sp, #8]
   248bc:	str	r4, [sp, #4]
   248c0:	str	r4, [sp]
   248c4:	mov	r3, #13
   248c8:	mov	r2, r4
   248cc:	movw	r1, #64340	; 0xfb54
   248d0:	movt	r1, #3
   248d4:	mov	r0, r6
   248d8:	bl	23da8 <test_json@@Base>
   248dc:	orr	r5, r5, r0
   248e0:	mov	r3, #344	; 0x158
   248e4:	str	r3, [sp, #8]
   248e8:	str	r4, [sp, #4]
   248ec:	str	r4, [sp]
   248f0:	mov	r3, #13
   248f4:	mov	r2, r4
   248f8:	movw	r1, #64516	; 0xfc04
   248fc:	movt	r1, #3
   24900:	mov	r0, r6
   24904:	bl	23da8 <test_json@@Base>
   24908:	orr	r0, r5, r0
   2490c:	add	sp, sp, #16
   24910:	ldrd	r4, [sp]
   24914:	ldr	r6, [sp, #8]
   24918:	add	sp, sp, #12
   2491c:	pop	{pc}		; (ldr pc, [sp], #4)

00024920 <base64_tests@@Base>:
   24920:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24924:	strd	r6, [sp, #8]
   24928:	str	r8, [sp, #16]
   2492c:	str	lr, [sp, #20]
   24930:	sub	sp, sp, #16
   24934:	movw	r6, #59676	; 0xe91c
   24938:	movt	r6, #3
   2493c:	movw	r3, #369	; 0x171
   24940:	str	r3, [sp, #8]
   24944:	mov	r4, #0
   24948:	str	r4, [sp, #4]
   2494c:	str	r4, [sp]
   24950:	mov	r3, r4
   24954:	movw	r2, #61456	; 0xf010
   24958:	movt	r2, #3
   2495c:	movw	r1, #64692	; 0xfcb4
   24960:	movt	r1, #3
   24964:	mov	r0, r6
   24968:	bl	23da8 <test_json@@Base>
   2496c:	mov	r5, r0
   24970:	mov	r3, #372	; 0x174
   24974:	str	r3, [sp, #8]
   24978:	str	r4, [sp, #4]
   2497c:	str	r4, [sp]
   24980:	mov	r3, r4
   24984:	movw	r2, #64716	; 0xfccc
   24988:	movt	r2, #3
   2498c:	movw	r1, #64752	; 0xfcf0
   24990:	movt	r1, #3
   24994:	mov	r0, r6
   24998:	bl	23da8 <test_json@@Base>
   2499c:	orr	r5, r5, r0
   249a0:	movw	r8, #64792	; 0xfd18
   249a4:	movt	r8, #3
   249a8:	mov	r3, #376	; 0x178
   249ac:	str	r3, [sp, #8]
   249b0:	str	r4, [sp, #4]
   249b4:	str	r4, [sp]
   249b8:	mov	r3, r4
   249bc:	mov	r2, r8
   249c0:	movw	r1, #64972	; 0xfdcc
   249c4:	movt	r1, #3
   249c8:	mov	r0, r6
   249cc:	bl	23da8 <test_json@@Base>
   249d0:	orr	r5, r5, r0
   249d4:	movw	r7, #65160	; 0xfe88
   249d8:	movt	r7, #3
   249dc:	movw	r3, #379	; 0x17b
   249e0:	str	r3, [sp, #8]
   249e4:	str	r4, [sp, #4]
   249e8:	str	r4, [sp]
   249ec:	mov	r3, r4
   249f0:	mov	r2, r7
   249f4:	movw	r1, #65344	; 0xff40
   249f8:	movt	r1, #3
   249fc:	mov	r0, r6
   24a00:	bl	23da8 <test_json@@Base>
   24a04:	orr	r5, r5, r0
   24a08:	movw	r3, #382	; 0x17e
   24a0c:	str	r3, [sp, #8]
   24a10:	str	r4, [sp, #4]
   24a14:	str	r4, [sp]
   24a18:	mov	r3, r4
   24a1c:	mov	r2, r8
   24a20:	movw	r1, #65532	; 0xfffc
   24a24:	movt	r1, #3
   24a28:	mov	r0, r6
   24a2c:	bl	23da8 <test_json@@Base>
   24a30:	orr	r5, r5, r0
   24a34:	movw	r3, #385	; 0x181
   24a38:	str	r3, [sp, #8]
   24a3c:	str	r4, [sp, #4]
   24a40:	str	r4, [sp]
   24a44:	mov	r3, r4
   24a48:	mov	r2, r7
   24a4c:	movw	r1, #180	; 0xb4
   24a50:	movt	r1, #4
   24a54:	mov	r0, r6
   24a58:	bl	23da8 <test_json@@Base>
   24a5c:	orr	r5, r5, r0
   24a60:	mov	r3, #388	; 0x184
   24a64:	str	r3, [sp, #8]
   24a68:	str	r4, [sp, #4]
   24a6c:	str	r4, [sp]
   24a70:	mov	r3, #31
   24a74:	mov	r2, r4
   24a78:	movw	r1, #368	; 0x170
   24a7c:	movt	r1, #4
   24a80:	mov	r0, r6
   24a84:	bl	23da8 <test_json@@Base>
   24a88:	orr	r5, r5, r0
   24a8c:	movw	r3, #391	; 0x187
   24a90:	str	r3, [sp, #8]
   24a94:	str	r4, [sp, #4]
   24a98:	str	r4, [sp]
   24a9c:	mov	r3, #32
   24aa0:	mov	r2, r4
   24aa4:	movw	r1, #556	; 0x22c
   24aa8:	movt	r1, #4
   24aac:	mov	r0, r6
   24ab0:	bl	23da8 <test_json@@Base>
   24ab4:	orr	r5, r5, r0
   24ab8:	movw	r7, #744	; 0x2e8
   24abc:	movt	r7, #4
   24ac0:	movw	r3, #406	; 0x196
   24ac4:	str	r3, [sp, #8]
   24ac8:	str	r4, [sp, #4]
   24acc:	str	r4, [sp]
   24ad0:	mov	r3, r4
   24ad4:	mov	r2, r7
   24ad8:	movw	r1, #960	; 0x3c0
   24adc:	movt	r1, #4
   24ae0:	mov	r0, r6
   24ae4:	bl	23da8 <test_json@@Base>
   24ae8:	orr	r5, r5, r0
   24aec:	movw	r3, #419	; 0x1a3
   24af0:	str	r3, [sp, #8]
   24af4:	str	r4, [sp, #4]
   24af8:	str	r4, [sp]
   24afc:	mov	r3, r4
   24b00:	mov	r2, r7
   24b04:	movw	r1, #1168	; 0x490
   24b08:	movt	r1, #4
   24b0c:	mov	r0, r6
   24b10:	bl	23da8 <test_json@@Base>
   24b14:	orr	r0, r5, r0
   24b18:	add	sp, sp, #16
   24b1c:	ldrd	r4, [sp]
   24b20:	ldrd	r6, [sp, #8]
   24b24:	ldr	r8, [sp, #16]
   24b28:	add	sp, sp, #20
   24b2c:	pop	{pc}		; (ldr pc, [sp], #4)

00024b30 <mixed_type_union_tests@@Base>:
   24b30:	strd	r4, [sp, #-20]!	; 0xffffffec
   24b34:	strd	r6, [sp, #8]
   24b38:	str	lr, [sp, #16]
   24b3c:	sub	sp, sp, #20
   24b40:	ldr	r6, [pc, #352]	; 24ca8 <mixed_type_union_tests@@Base+0x178>
   24b44:	mov	r3, #432	; 0x1b0
   24b48:	str	r3, [sp, #8]
   24b4c:	mov	r4, #0
   24b50:	str	r4, [sp, #4]
   24b54:	str	r4, [sp]
   24b58:	mov	r3, r4
   24b5c:	movw	r2, #1372	; 0x55c
   24b60:	movt	r2, #4
   24b64:	movw	r1, #1444	; 0x5a4
   24b68:	movt	r1, #4
   24b6c:	mov	r0, r6
   24b70:	bl	23da8 <test_json@@Base>
   24b74:	mov	r5, r0
   24b78:	movw	r7, #1524	; 0x5f4
   24b7c:	movt	r7, #4
   24b80:	movw	r3, #437	; 0x1b5
   24b84:	str	r3, [sp, #8]
   24b88:	str	r4, [sp, #4]
   24b8c:	str	r4, [sp]
   24b90:	mov	r3, r4
   24b94:	mov	r2, r7
   24b98:	movw	r1, #1644	; 0x66c
   24b9c:	movt	r1, #4
   24ba0:	mov	r0, r6
   24ba4:	bl	23da8 <test_json@@Base>
   24ba8:	orr	r5, r5, r0
   24bac:	movw	r3, #442	; 0x1ba
   24bb0:	str	r3, [sp, #8]
   24bb4:	str	r4, [sp, #4]
   24bb8:	str	r4, [sp]
   24bbc:	mov	r3, r4
   24bc0:	mov	r2, r7
   24bc4:	movw	r1, #1776	; 0x6f0
   24bc8:	movt	r1, #4
   24bcc:	mov	r0, r6
   24bd0:	bl	23da8 <test_json@@Base>
   24bd4:	orr	r5, r5, r0
   24bd8:	movw	r3, #449	; 0x1c1
   24bdc:	str	r3, [sp, #8]
   24be0:	str	r4, [sp, #4]
   24be4:	str	r4, [sp]
   24be8:	mov	r3, r4
   24bec:	movw	r2, #1928	; 0x788
   24bf0:	movt	r2, #4
   24bf4:	movw	r1, #2116	; 0x844
   24bf8:	movt	r1, #4
   24bfc:	mov	r0, r6
   24c00:	bl	23da8 <test_json@@Base>
   24c04:	orr	r5, r5, r0
   24c08:	movw	r3, #458	; 0x1ca
   24c0c:	str	r3, [sp, #8]
   24c10:	str	r4, [sp, #4]
   24c14:	str	r4, [sp]
   24c18:	mov	r3, r4
   24c1c:	movw	r2, #2340	; 0x924
   24c20:	movt	r2, #4
   24c24:	movw	r1, #2564	; 0xa04
   24c28:	movt	r1, #4
   24c2c:	mov	r0, r6
   24c30:	bl	23da8 <test_json@@Base>
   24c34:	orr	r5, r5, r0
   24c38:	movw	r3, #469	; 0x1d5
   24c3c:	str	r3, [sp, #8]
   24c40:	str	r4, [sp, #4]
   24c44:	str	r4, [sp]
   24c48:	mov	r3, r4
   24c4c:	movw	r2, #2828	; 0xb0c
   24c50:	movt	r2, #4
   24c54:	movw	r1, #3156	; 0xc54
   24c58:	movt	r1, #4
   24c5c:	mov	r0, r6
   24c60:	bl	23da8 <test_json@@Base>
   24c64:	orr	r5, r5, r0
   24c68:	movw	r3, #474	; 0x1da
   24c6c:	str	r3, [sp, #8]
   24c70:	str	r4, [sp, #4]
   24c74:	str	r4, [sp]
   24c78:	mov	r3, r4
   24c7c:	mov	r2, r7
   24c80:	movw	r1, #3544	; 0xdd8
   24c84:	movt	r1, #4
   24c88:	mov	r0, r6
   24c8c:	bl	23da8 <test_json@@Base>
   24c90:	orr	r0, r5, r0
   24c94:	add	sp, sp, #20
   24c98:	ldrd	r4, [sp]
   24c9c:	ldrd	r6, [sp, #8]
   24ca0:	add	sp, sp, #16
   24ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   24ca8:	andeq	lr, r3, ip, lsr #18

00024cac <union_vector_tests@@Base>:
   24cac:	strd	r4, [sp, #-20]!	; 0xffffffec
   24cb0:	strd	r6, [sp, #8]
   24cb4:	str	lr, [sp, #16]
   24cb8:	sub	sp, sp, #20
   24cbc:	movw	r7, #3688	; 0xe68
   24cc0:	movt	r7, #4
   24cc4:	ldr	r6, [pc, #300]	; 24df8 <union_vector_tests@@Base+0x14c>
   24cc8:	movw	r3, #485	; 0x1e5
   24ccc:	str	r3, [sp, #8]
   24cd0:	mov	r4, #0
   24cd4:	str	r4, [sp, #4]
   24cd8:	str	r4, [sp]
   24cdc:	mov	r3, r4
   24ce0:	mov	r2, r7
   24ce4:	movw	r1, #3744	; 0xea0
   24ce8:	movt	r1, #4
   24cec:	mov	r0, r6
   24cf0:	bl	23da8 <test_json@@Base>
   24cf4:	mov	r5, r0
   24cf8:	mov	r3, #488	; 0x1e8
   24cfc:	str	r3, [sp, #8]
   24d00:	str	r4, [sp, #4]
   24d04:	str	r4, [sp]
   24d08:	mov	r3, r4
   24d0c:	movw	r2, #3808	; 0xee0
   24d10:	movt	r2, #4
   24d14:	movw	r1, #3852	; 0xf0c
   24d18:	movt	r1, #4
   24d1c:	mov	r0, r6
   24d20:	bl	23da8 <test_json@@Base>
   24d24:	orr	r5, r5, r0
   24d28:	movw	r3, #491	; 0x1eb
   24d2c:	str	r3, [sp, #8]
   24d30:	str	r4, [sp, #4]
   24d34:	str	r4, [sp]
   24d38:	mov	r3, r4
   24d3c:	movw	r2, #3904	; 0xf40
   24d40:	movt	r2, #4
   24d44:	movw	r1, #3972	; 0xf84
   24d48:	movt	r1, #4
   24d4c:	mov	r0, r6
   24d50:	bl	23da8 <test_json@@Base>
   24d54:	orr	r5, r5, r0
   24d58:	movw	r3, #494	; 0x1ee
   24d5c:	str	r3, [sp, #8]
   24d60:	str	r4, [sp, #4]
   24d64:	str	r4, [sp]
   24d68:	mov	r3, r4
   24d6c:	movw	r2, #4052	; 0xfd4
   24d70:	movt	r2, #4
   24d74:	movw	r1, #4160	; 0x1040
   24d78:	movt	r1, #4
   24d7c:	mov	r0, r6
   24d80:	bl	23da8 <test_json@@Base>
   24d84:	orr	r5, r5, r0
   24d88:	movw	r3, #497	; 0x1f1
   24d8c:	str	r3, [sp, #8]
   24d90:	str	r4, [sp, #4]
   24d94:	str	r4, [sp]
   24d98:	mov	r3, r4
   24d9c:	mov	r2, r7
   24da0:	movw	r1, #4288	; 0x10c0
   24da4:	movt	r1, #4
   24da8:	mov	r0, r6
   24dac:	bl	23da8 <test_json@@Base>
   24db0:	orr	r5, r5, r0
   24db4:	mov	r3, #500	; 0x1f4
   24db8:	str	r3, [sp, #8]
   24dbc:	str	r4, [sp, #4]
   24dc0:	str	r4, [sp]
   24dc4:	mov	r3, r4
   24dc8:	movw	r2, #4352	; 0x1100
   24dcc:	movt	r2, #4
   24dd0:	movw	r1, #4444	; 0x115c
   24dd4:	movt	r1, #4
   24dd8:	mov	r0, r6
   24ddc:	bl	23da8 <test_json@@Base>
   24de0:	orr	r0, r5, r0
   24de4:	add	sp, sp, #20
   24de8:	ldrd	r4, [sp]
   24dec:	ldrd	r6, [sp, #8]
   24df0:	add	sp, sp, #16
   24df4:	pop	{pc}		; (ldr pc, [sp], #4)
   24df8:	andeq	lr, r3, ip, lsr r9

00024dfc <main@@Base>:
   24dfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24e00:	strd	r6, [sp, #8]
   24e04:	strd	r8, [sp, #16]
   24e08:	strd	sl, [sp, #24]
   24e0c:	str	lr, [sp, #32]
   24e10:	sub	sp, sp, #52	; 0x34
   24e14:	bl	24254 <edge_case_tests@@Base>
   24e18:	mov	r5, r0
   24e1c:	bl	245d8 <error_case_tests@@Base>
   24e20:	orr	r5, r5, r0
   24e24:	bl	24cac <union_vector_tests@@Base>
   24e28:	orr	r5, r5, r0
   24e2c:	bl	24920 <base64_tests@@Base>
   24e30:	orr	r5, r5, r0
   24e34:	bl	24b30 <mixed_type_union_tests@@Base>
   24e38:	orr	r5, r5, r0
   24e3c:	movw	r7, #61456	; 0xf010
   24e40:	movt	r7, #3
   24e44:	movw	r6, #59676	; 0xe91c
   24e48:	movt	r6, #3
   24e4c:	movw	r3, #525	; 0x20d
   24e50:	str	r3, [sp, #8]
   24e54:	mov	r4, #0
   24e58:	str	r4, [sp, #4]
   24e5c:	str	r4, [sp]
   24e60:	mov	r3, r4
   24e64:	mov	r2, r7
   24e68:	movw	r1, #4548	; 0x11c4
   24e6c:	movt	r1, #4
   24e70:	mov	r0, r6
   24e74:	bl	23da8 <test_json@@Base>
   24e78:	orr	r5, r5, r0
   24e7c:	movw	r8, #4572	; 0x11dc
   24e80:	movt	r8, #4
   24e84:	mov	r3, #528	; 0x210
   24e88:	str	r3, [sp, #8]
   24e8c:	str	r4, [sp, #4]
   24e90:	str	r4, [sp]
   24e94:	mov	r3, r4
   24e98:	mov	r2, r8
   24e9c:	movw	r1, #4608	; 0x1200
   24ea0:	movt	r1, #4
   24ea4:	mov	r0, r6
   24ea8:	bl	23da8 <test_json@@Base>
   24eac:	orr	r5, r5, r0
   24eb0:	movw	sl, #4648	; 0x1228
   24eb4:	movt	sl, #4
   24eb8:	movw	r3, #531	; 0x213
   24ebc:	str	r3, [sp, #8]
   24ec0:	str	r4, [sp, #4]
   24ec4:	str	r4, [sp]
   24ec8:	mov	r3, r4
   24ecc:	mov	r2, sl
   24ed0:	movw	r1, #4684	; 0x124c
   24ed4:	movt	r1, #4
   24ed8:	mov	r0, r6
   24edc:	bl	23da8 <test_json@@Base>
   24ee0:	orr	r5, r5, r0
   24ee4:	movw	r9, #4724	; 0x1274
   24ee8:	movt	r9, #4
   24eec:	movw	r3, #534	; 0x216
   24ef0:	str	r3, [sp, #8]
   24ef4:	str	r4, [sp, #4]
   24ef8:	str	r4, [sp]
   24efc:	mov	r3, r4
   24f00:	mov	r2, r9
   24f04:	movw	r1, #4768	; 0x12a0
   24f08:	movt	r1, #4
   24f0c:	mov	r0, r6
   24f10:	bl	23da8 <test_json@@Base>
   24f14:	orr	r5, r5, r0
   24f18:	movw	r3, #537	; 0x219
   24f1c:	str	r3, [sp, #8]
   24f20:	str	r4, [sp, #4]
   24f24:	str	r4, [sp]
   24f28:	mov	r3, r4
   24f2c:	mov	r2, r9
   24f30:	movw	r1, #4820	; 0x12d4
   24f34:	movt	r1, #4
   24f38:	mov	r0, r6
   24f3c:	bl	23da8 <test_json@@Base>
   24f40:	orr	r5, r5, r0
   24f44:	mov	r3, #540	; 0x21c
   24f48:	str	r3, [sp, #8]
   24f4c:	str	r4, [sp, #4]
   24f50:	str	r4, [sp]
   24f54:	mov	r3, r4
   24f58:	mov	r2, r8
   24f5c:	movw	r1, #4880	; 0x1310
   24f60:	movt	r1, #4
   24f64:	mov	r0, r6
   24f68:	bl	23da8 <test_json@@Base>
   24f6c:	orr	r5, r5, r0
   24f70:	movw	r3, #543	; 0x21f
   24f74:	str	r3, [sp, #8]
   24f78:	str	r4, [sp, #4]
   24f7c:	str	r4, [sp]
   24f80:	mov	r3, r4
   24f84:	mov	r2, sl
   24f88:	movw	r1, #4920	; 0x1338
   24f8c:	movt	r1, #4
   24f90:	mov	r0, r6
   24f94:	bl	23da8 <test_json@@Base>
   24f98:	orr	r5, r5, r0
   24f9c:	movw	r3, #547	; 0x223
   24fa0:	str	r3, [sp, #8]
   24fa4:	str	r4, [sp, #4]
   24fa8:	str	r4, [sp]
   24fac:	mov	r3, r4
   24fb0:	mov	r2, r7
   24fb4:	movw	r1, #4964	; 0x1364
   24fb8:	movt	r1, #4
   24fbc:	mov	r0, r6
   24fc0:	bl	23da8 <test_json@@Base>
   24fc4:	orr	r5, r5, r0
   24fc8:	movw	r3, #551	; 0x227
   24fcc:	str	r3, [sp, #8]
   24fd0:	str	r4, [sp, #4]
   24fd4:	str	r4, [sp]
   24fd8:	mov	r3, r4
   24fdc:	mov	r2, r7
   24fe0:	movw	r1, #61348	; 0xefa4
   24fe4:	movt	r1, #3
   24fe8:	mov	r0, r6
   24fec:	bl	23da8 <test_json@@Base>
   24ff0:	orr	r5, r5, r0
   24ff4:	movw	r3, #555	; 0x22b
   24ff8:	str	r3, [sp, #8]
   24ffc:	str	r4, [sp, #4]
   25000:	str	r4, [sp]
   25004:	mov	r3, r4
   25008:	mov	r2, r7
   2500c:	movw	r1, #5004	; 0x138c
   25010:	movt	r1, #4
   25014:	mov	r0, r6
   25018:	bl	23da8 <test_json@@Base>
   2501c:	orr	r5, r5, r0
   25020:	movw	r3, #558	; 0x22e
   25024:	str	r3, [sp, #8]
   25028:	str	r4, [sp, #4]
   2502c:	str	r4, [sp]
   25030:	mov	r3, r4
   25034:	mov	r2, r8
   25038:	movw	r1, #5028	; 0x13a4
   2503c:	movt	r1, #4
   25040:	mov	r0, r6
   25044:	bl	23da8 <test_json@@Base>
   25048:	orr	r5, r5, r0
   2504c:	movw	r3, #561	; 0x231
   25050:	str	r3, [sp, #8]
   25054:	str	r4, [sp, #4]
   25058:	str	r4, [sp]
   2505c:	mov	r3, r4
   25060:	mov	r2, sl
   25064:	movw	r1, #5064	; 0x13c8
   25068:	movt	r1, #4
   2506c:	mov	r0, r6
   25070:	bl	23da8 <test_json@@Base>
   25074:	orr	r5, r5, r0
   25078:	mov	r3, #564	; 0x234
   2507c:	str	r3, [sp, #8]
   25080:	str	r4, [sp, #4]
   25084:	str	r4, [sp]
   25088:	mov	r3, r4
   2508c:	mov	r2, r9
   25090:	movw	r1, #5100	; 0x13ec
   25094:	movt	r1, #4
   25098:	mov	r0, r6
   2509c:	bl	23da8 <test_json@@Base>
   250a0:	orr	r5, r5, r0
   250a4:	movw	r3, #567	; 0x237
   250a8:	str	r3, [sp, #8]
   250ac:	str	r4, [sp, #4]
   250b0:	str	r4, [sp]
   250b4:	mov	r3, r4
   250b8:	mov	r2, r9
   250bc:	movw	r1, #5148	; 0x141c
   250c0:	movt	r1, #4
   250c4:	mov	r0, r6
   250c8:	bl	23da8 <test_json@@Base>
   250cc:	orr	r5, r5, r0
   250d0:	movw	r3, #570	; 0x23a
   250d4:	str	r3, [sp, #8]
   250d8:	str	r4, [sp, #4]
   250dc:	str	r4, [sp]
   250e0:	mov	r3, r4
   250e4:	mov	r2, r8
   250e8:	movw	r1, #5204	; 0x1454
   250ec:	movt	r1, #4
   250f0:	mov	r0, r6
   250f4:	bl	23da8 <test_json@@Base>
   250f8:	orr	r5, r5, r0
   250fc:	movw	r3, #573	; 0x23d
   25100:	str	r3, [sp, #8]
   25104:	str	r4, [sp, #4]
   25108:	str	r4, [sp]
   2510c:	mov	r3, r4
   25110:	mov	r2, sl
   25114:	movw	r1, #5236	; 0x1474
   25118:	movt	r1, #4
   2511c:	mov	r0, r6
   25120:	bl	23da8 <test_json@@Base>
   25124:	orr	r5, r5, r0
   25128:	movw	r3, #577	; 0x241
   2512c:	str	r3, [sp, #8]
   25130:	str	r4, [sp, #4]
   25134:	str	r4, [sp]
   25138:	mov	r3, r4
   2513c:	mov	r2, r7
   25140:	movw	r1, #5272	; 0x1498
   25144:	movt	r1, #4
   25148:	mov	r0, r6
   2514c:	bl	23da8 <test_json@@Base>
   25150:	orr	r5, r5, r0
   25154:	movw	r3, #581	; 0x245
   25158:	str	r3, [sp, #8]
   2515c:	str	r4, [sp, #4]
   25160:	str	r4, [sp]
   25164:	mov	r3, r4
   25168:	mov	r2, r7
   2516c:	movw	r1, #62048	; 0xf260
   25170:	movt	r1, #3
   25174:	mov	r0, r6
   25178:	bl	23da8 <test_json@@Base>
   2517c:	orr	r5, r5, r0
   25180:	movw	fp, #5308	; 0x14bc
   25184:	movt	fp, #4
   25188:	movw	r3, #585	; 0x249
   2518c:	str	r3, [sp, #8]
   25190:	str	r4, [sp, #4]
   25194:	str	r4, [sp]
   25198:	mov	r3, r4
   2519c:	mov	r2, fp
   251a0:	movw	r1, #5348	; 0x14e4
   251a4:	movt	r1, #4
   251a8:	mov	r0, r6
   251ac:	bl	23da8 <test_json@@Base>
   251b0:	orr	r5, r5, r0
   251b4:	movw	r3, #591	; 0x24f
   251b8:	str	r3, [sp, #8]
   251bc:	str	r4, [sp, #4]
   251c0:	str	r4, [sp]
   251c4:	mov	r3, r4
   251c8:	mov	r2, fp
   251cc:	movw	r1, #5388	; 0x150c
   251d0:	movt	r1, #4
   251d4:	mov	r0, r6
   251d8:	bl	23da8 <test_json@@Base>
   251dc:	orr	r5, r5, r0
   251e0:	movw	r3, #594	; 0x252
   251e4:	str	r3, [sp, #8]
   251e8:	str	r4, [sp, #4]
   251ec:	str	r4, [sp]
   251f0:	mov	r3, r4
   251f4:	mov	r2, fp
   251f8:	movw	r1, #5428	; 0x1534
   251fc:	movt	r1, #4
   25200:	mov	r0, r6
   25204:	bl	23da8 <test_json@@Base>
   25208:	orr	r5, r5, r0
   2520c:	movw	r3, #597	; 0x255
   25210:	str	r3, [sp, #8]
   25214:	str	r4, [sp, #4]
   25218:	str	r4, [sp]
   2521c:	mov	r3, r4
   25220:	mov	r2, r9
   25224:	movw	r1, #5468	; 0x155c
   25228:	movt	r1, #4
   2522c:	mov	r0, r6
   25230:	bl	23da8 <test_json@@Base>
   25234:	orr	r5, r5, r0
   25238:	movw	r3, #601	; 0x259
   2523c:	str	r3, [sp, #8]
   25240:	str	r4, [sp, #4]
   25244:	str	r4, [sp]
   25248:	mov	r3, r4
   2524c:	mov	r2, r8
   25250:	movw	r1, #5516	; 0x158c
   25254:	movt	r1, #4
   25258:	mov	r0, r6
   2525c:	bl	23da8 <test_json@@Base>
   25260:	orr	r5, r5, r0
   25264:	mov	r3, #604	; 0x25c
   25268:	str	r3, [sp, #8]
   2526c:	str	r4, [sp, #4]
   25270:	str	r4, [sp]
   25274:	mov	r3, r4
   25278:	mov	r2, sl
   2527c:	movw	r1, #5552	; 0x15b0
   25280:	movt	r1, #4
   25284:	mov	r0, r6
   25288:	bl	23da8 <test_json@@Base>
   2528c:	orr	r5, r5, r0
   25290:	movw	r3, #5588	; 0x15d4
   25294:	movt	r3, #4
   25298:	mov	r2, r3
   2529c:	movw	r3, #607	; 0x25f
   252a0:	str	r3, [sp, #8]
   252a4:	str	r4, [sp, #4]
   252a8:	str	r4, [sp]
   252ac:	mov	r3, r4
   252b0:	str	r2, [sp, #24]
   252b4:	movw	r1, #5628	; 0x15fc
   252b8:	movt	r1, #4
   252bc:	mov	r0, r6
   252c0:	bl	23da8 <test_json@@Base>
   252c4:	orr	r5, r5, r0
   252c8:	movw	r3, #610	; 0x262
   252cc:	str	r3, [sp, #8]
   252d0:	str	r4, [sp, #4]
   252d4:	str	r4, [sp]
   252d8:	mov	r3, r4
   252dc:	mov	r2, r9
   252e0:	movw	r1, #5664	; 0x1620
   252e4:	movt	r1, #4
   252e8:	mov	r0, r6
   252ec:	bl	23da8 <test_json@@Base>
   252f0:	orr	r5, r5, r0
   252f4:	movw	r1, #5700	; 0x1644
   252f8:	movt	r1, #4
   252fc:	movw	r3, #613	; 0x265
   25300:	str	r3, [sp, #8]
   25304:	str	r4, [sp, #4]
   25308:	str	r4, [sp]
   2530c:	mov	r3, r4
   25310:	str	r1, [sp, #28]
   25314:	mov	r2, r1
   25318:	movw	r1, #5732	; 0x1664
   2531c:	movt	r1, #4
   25320:	mov	r0, r6
   25324:	bl	23da8 <test_json@@Base>
   25328:	orr	r5, r5, r0
   2532c:	movw	r0, #5768	; 0x1688
   25330:	movt	r0, #4
   25334:	mov	r3, #616	; 0x268
   25338:	str	r3, [sp, #8]
   2533c:	str	r4, [sp, #4]
   25340:	str	r4, [sp]
   25344:	mov	r3, r4
   25348:	str	r0, [sp, #32]
   2534c:	mov	r2, r0
   25350:	movw	r1, #5800	; 0x16a8
   25354:	movt	r1, #4
   25358:	mov	r0, r6
   2535c:	bl	23da8 <test_json@@Base>
   25360:	orr	r5, r5, r0
   25364:	movw	ip, #5836	; 0x16cc
   25368:	movt	ip, #4
   2536c:	movw	r3, #619	; 0x26b
   25370:	str	r3, [sp, #8]
   25374:	str	r4, [sp, #4]
   25378:	str	r4, [sp]
   2537c:	mov	r3, r4
   25380:	str	ip, [sp, #36]	; 0x24
   25384:	mov	r2, ip
   25388:	movw	r1, #5868	; 0x16ec
   2538c:	movt	r1, #4
   25390:	mov	r0, r6
   25394:	bl	23da8 <test_json@@Base>
   25398:	orr	r5, r5, r0
   2539c:	movw	r3, #622	; 0x26e
   253a0:	str	r3, [sp, #8]
   253a4:	str	r4, [sp, #4]
   253a8:	str	r4, [sp]
   253ac:	mov	r3, r4
   253b0:	mov	r2, r8
   253b4:	movw	r1, #5904	; 0x1710
   253b8:	movt	r1, #4
   253bc:	mov	r0, r6
   253c0:	bl	23da8 <test_json@@Base>
   253c4:	orr	r5, r5, r0
   253c8:	movw	r3, #625	; 0x271
   253cc:	str	r3, [sp, #8]
   253d0:	str	r4, [sp, #4]
   253d4:	str	r4, [sp]
   253d8:	mov	r3, r4
   253dc:	mov	r2, r8
   253e0:	movw	r1, #5948	; 0x173c
   253e4:	movt	r1, #4
   253e8:	mov	r0, r6
   253ec:	bl	23da8 <test_json@@Base>
   253f0:	orr	r5, r5, r0
   253f4:	movw	r3, #6008	; 0x1778
   253f8:	movt	r3, #4
   253fc:	mov	r1, r3
   25400:	movw	fp, #6036	; 0x1794
   25404:	movt	fp, #4
   25408:	mov	r3, #628	; 0x274
   2540c:	str	r3, [sp, #8]
   25410:	str	r4, [sp, #4]
   25414:	str	r4, [sp]
   25418:	mov	r3, r4
   2541c:	str	r1, [sp, #20]
   25420:	mov	r2, r1
   25424:	mov	r1, fp
   25428:	mov	r0, r6
   2542c:	bl	23da8 <test_json@@Base>
   25430:	orr	r5, r5, r0
   25434:	movw	r3, #631	; 0x277
   25438:	str	r3, [sp, #8]
   2543c:	str	r4, [sp, #4]
   25440:	str	r4, [sp]
   25444:	mov	r3, r4
   25448:	ldr	r2, [sp, #20]
   2544c:	mov	r1, fp
   25450:	mov	r0, r6
   25454:	bl	23da8 <test_json@@Base>
   25458:	orr	r5, r5, r0
   2545c:	movw	lr, #6080	; 0x17c0
   25460:	movt	lr, #4
   25464:	movw	r3, #634	; 0x27a
   25468:	str	r3, [sp, #8]
   2546c:	str	r4, [sp, #4]
   25470:	str	r4, [sp]
   25474:	mov	r3, r4
   25478:	str	lr, [sp, #40]	; 0x28
   2547c:	mov	r2, lr
   25480:	movw	r1, #6152	; 0x1808
   25484:	movt	r1, #4
   25488:	mov	r0, r6
   2548c:	bl	23da8 <test_json@@Base>
   25490:	orr	r5, r5, r0
   25494:	movw	fp, #6236	; 0x185c
   25498:	movt	fp, #4
   2549c:	movw	r3, #638	; 0x27e
   254a0:	str	r3, [sp, #8]
   254a4:	str	r4, [sp, #4]
   254a8:	str	r4, [sp]
   254ac:	mov	r3, r4
   254b0:	str	fp, [sp, #44]	; 0x2c
   254b4:	mov	r2, fp
   254b8:	movw	r1, #6312	; 0x18a8
   254bc:	movt	r1, #4
   254c0:	mov	r0, r6
   254c4:	bl	23da8 <test_json@@Base>
   254c8:	orr	r5, r5, r0
   254cc:	movw	fp, #6400	; 0x1900
   254d0:	movt	fp, #4
   254d4:	movw	r3, #642	; 0x282
   254d8:	str	r3, [sp, #8]
   254dc:	str	r4, [sp, #4]
   254e0:	str	r4, [sp]
   254e4:	mov	r3, r4
   254e8:	mov	r2, fp
   254ec:	movw	r1, #6500	; 0x1964
   254f0:	movt	r1, #4
   254f4:	mov	r0, r6
   254f8:	bl	23da8 <test_json@@Base>
   254fc:	orr	r5, r5, r0
   25500:	movw	r3, #646	; 0x286
   25504:	str	r3, [sp, #8]
   25508:	str	r4, [sp, #4]
   2550c:	str	r4, [sp]
   25510:	mov	r3, r4
   25514:	mov	r2, r7
   25518:	movw	r1, #6612	; 0x19d4
   2551c:	movt	r1, #4
   25520:	mov	r0, r6
   25524:	bl	23da8 <test_json@@Base>
   25528:	orr	r5, r5, r0
   2552c:	movw	r3, #649	; 0x289
   25530:	str	r3, [sp, #8]
   25534:	str	r4, [sp, #4]
   25538:	str	r4, [sp]
   2553c:	mov	r3, r4
   25540:	mov	r2, r7
   25544:	movw	r1, #6656	; 0x1a00
   25548:	movt	r1, #4
   2554c:	mov	r0, r6
   25550:	bl	23da8 <test_json@@Base>
   25554:	orr	r5, r5, r0
   25558:	movw	r3, #653	; 0x28d
   2555c:	str	r3, [sp, #8]
   25560:	str	r4, [sp, #4]
   25564:	str	r4, [sp]
   25568:	mov	r3, r4
   2556c:	mov	r2, r8
   25570:	movw	r1, #6696	; 0x1a28
   25574:	movt	r1, #4
   25578:	mov	r0, r6
   2557c:	bl	23da8 <test_json@@Base>
   25580:	orr	r5, r5, r0
   25584:	mov	r3, #656	; 0x290
   25588:	str	r3, [sp, #8]
   2558c:	str	r4, [sp, #4]
   25590:	str	r4, [sp]
   25594:	mov	r3, r4
   25598:	mov	r2, sl
   2559c:	movw	r1, #6728	; 0x1a48
   255a0:	movt	r1, #4
   255a4:	mov	r0, r6
   255a8:	bl	23da8 <test_json@@Base>
   255ac:	orr	r5, r5, r0
   255b0:	movw	r3, #659	; 0x293
   255b4:	str	r3, [sp, #8]
   255b8:	str	r4, [sp, #4]
   255bc:	str	r4, [sp]
   255c0:	mov	r3, r4
   255c4:	ldr	r2, [sp, #24]
   255c8:	movw	r1, #6760	; 0x1a68
   255cc:	movt	r1, #4
   255d0:	mov	r0, r6
   255d4:	bl	23da8 <test_json@@Base>
   255d8:	orr	r5, r5, r0
   255dc:	movw	r3, #662	; 0x296
   255e0:	str	r3, [sp, #8]
   255e4:	str	r4, [sp, #4]
   255e8:	str	r4, [sp]
   255ec:	mov	r3, r4
   255f0:	mov	r2, r9
   255f4:	movw	r1, #6792	; 0x1a88
   255f8:	movt	r1, #4
   255fc:	mov	r0, r6
   25600:	bl	23da8 <test_json@@Base>
   25604:	orr	r5, r5, r0
   25608:	movw	r3, #665	; 0x299
   2560c:	str	r3, [sp, #8]
   25610:	str	r4, [sp, #4]
   25614:	str	r4, [sp]
   25618:	mov	r3, r4
   2561c:	ldr	r2, [sp, #28]
   25620:	movw	r1, #6824	; 0x1aa8
   25624:	movt	r1, #4
   25628:	mov	r0, r6
   2562c:	bl	23da8 <test_json@@Base>
   25630:	orr	r5, r5, r0
   25634:	mov	r3, #668	; 0x29c
   25638:	str	r3, [sp, #8]
   2563c:	str	r4, [sp, #4]
   25640:	str	r4, [sp]
   25644:	mov	r3, r4
   25648:	ldr	r2, [sp, #32]
   2564c:	movw	r1, #6856	; 0x1ac8
   25650:	movt	r1, #4
   25654:	mov	r0, r6
   25658:	bl	23da8 <test_json@@Base>
   2565c:	orr	r5, r5, r0
   25660:	movw	r3, #671	; 0x29f
   25664:	str	r3, [sp, #8]
   25668:	str	r4, [sp, #4]
   2566c:	str	r4, [sp]
   25670:	mov	r3, r4
   25674:	ldr	r2, [sp, #36]	; 0x24
   25678:	movw	r1, #6888	; 0x1ae8
   2567c:	movt	r1, #4
   25680:	mov	r0, r6
   25684:	bl	23da8 <test_json@@Base>
   25688:	orr	r5, r5, r0
   2568c:	movw	r3, #674	; 0x2a2
   25690:	str	r3, [sp, #8]
   25694:	str	r4, [sp, #4]
   25698:	str	r4, [sp]
   2569c:	mov	r3, r4
   256a0:	mov	r2, r8
   256a4:	movw	r1, #6920	; 0x1b08
   256a8:	movt	r1, #4
   256ac:	mov	r0, r6
   256b0:	bl	23da8 <test_json@@Base>
   256b4:	orr	r5, r5, r0
   256b8:	movw	r3, #677	; 0x2a5
   256bc:	str	r3, [sp, #8]
   256c0:	str	r4, [sp, #4]
   256c4:	str	r4, [sp]
   256c8:	mov	r3, r4
   256cc:	mov	r2, r8
   256d0:	movw	r1, #6960	; 0x1b30
   256d4:	movt	r1, #4
   256d8:	mov	r0, r6
   256dc:	bl	23da8 <test_json@@Base>
   256e0:	orr	r5, r5, r0
   256e4:	movw	r8, #7012	; 0x1b64
   256e8:	movt	r8, #4
   256ec:	mov	r3, #680	; 0x2a8
   256f0:	str	r3, [sp, #8]
   256f4:	str	r4, [sp, #4]
   256f8:	str	r4, [sp]
   256fc:	mov	r3, r4
   25700:	ldr	r9, [sp, #20]
   25704:	mov	r2, r9
   25708:	mov	r1, r8
   2570c:	mov	r0, r6
   25710:	bl	23da8 <test_json@@Base>
   25714:	orr	r5, r5, r0
   25718:	movw	r3, #683	; 0x2ab
   2571c:	str	r3, [sp, #8]
   25720:	str	r4, [sp, #4]
   25724:	str	r4, [sp]
   25728:	mov	r3, r4
   2572c:	mov	r2, r9
   25730:	mov	r1, r8
   25734:	mov	r0, r6
   25738:	bl	23da8 <test_json@@Base>
   2573c:	orr	r5, r5, r0
   25740:	movw	r3, #686	; 0x2ae
   25744:	str	r3, [sp, #8]
   25748:	str	r4, [sp, #4]
   2574c:	str	r4, [sp]
   25750:	mov	r3, r4
   25754:	ldr	r2, [sp, #40]	; 0x28
   25758:	movw	r1, #7048	; 0x1b88
   2575c:	movt	r1, #4
   25760:	mov	r0, r6
   25764:	bl	23da8 <test_json@@Base>
   25768:	orr	r5, r5, r0
   2576c:	movw	r3, #690	; 0x2b2
   25770:	str	r3, [sp, #8]
   25774:	str	r4, [sp, #4]
   25778:	str	r4, [sp]
   2577c:	mov	r3, r4
   25780:	ldr	r2, [sp, #44]	; 0x2c
   25784:	movw	r1, #7120	; 0x1bd0
   25788:	movt	r1, #4
   2578c:	mov	r0, r6
   25790:	bl	23da8 <test_json@@Base>
   25794:	orr	r5, r5, r0
   25798:	movw	r3, #694	; 0x2b6
   2579c:	str	r3, [sp, #8]
   257a0:	str	r4, [sp, #4]
   257a4:	str	r4, [sp]
   257a8:	mov	r3, r4
   257ac:	mov	r2, fp
   257b0:	movw	r1, #7196	; 0x1c1c
   257b4:	movt	r1, #4
   257b8:	mov	r0, r6
   257bc:	bl	23da8 <test_json@@Base>
   257c0:	orr	r5, r5, r0
   257c4:	movw	r3, #698	; 0x2ba
   257c8:	str	r3, [sp, #8]
   257cc:	str	r4, [sp, #4]
   257d0:	str	r4, [sp]
   257d4:	mov	r3, r4
   257d8:	mov	r2, r7
   257dc:	movw	r1, #7292	; 0x1c7c
   257e0:	movt	r1, #4
   257e4:	mov	r0, r6
   257e8:	bl	23da8 <test_json@@Base>
   257ec:	orr	r5, r5, r0
   257f0:	movw	r3, #701	; 0x2bd
   257f4:	str	r3, [sp, #8]
   257f8:	str	r4, [sp, #4]
   257fc:	str	r4, [sp]
   25800:	mov	r3, r4
   25804:	mov	r2, r7
   25808:	movw	r1, #7332	; 0x1ca4
   2580c:	movt	r1, #4
   25810:	mov	r0, r6
   25814:	bl	23da8 <test_json@@Base>
   25818:	orr	r5, r5, r0
   2581c:	movw	r7, #7368	; 0x1cc8
   25820:	movt	r7, #4
   25824:	movw	r3, #711	; 0x2c7
   25828:	str	r3, [sp, #8]
   2582c:	str	r4, [sp, #4]
   25830:	str	r4, [sp]
   25834:	mov	r3, r4
   25838:	mov	r2, r7
   2583c:	movw	r1, #7464	; 0x1d28
   25840:	movt	r1, #4
   25844:	mov	r0, r6
   25848:	bl	23da8 <test_json@@Base>
   2584c:	orr	r5, r5, r0
   25850:	mov	r3, #716	; 0x2cc
   25854:	str	r3, [sp, #8]
   25858:	str	r4, [sp, #4]
   2585c:	str	r4, [sp]
   25860:	mov	r3, r4
   25864:	mov	r2, r7
   25868:	movw	r1, #7560	; 0x1d88
   2586c:	movt	r1, #4
   25870:	mov	r0, r6
   25874:	bl	23da8 <test_json@@Base>
   25878:	orr	r5, r5, r0
   2587c:	movw	r3, #731	; 0x2db
   25880:	str	r3, [sp, #8]
   25884:	str	r4, [sp, #4]
   25888:	str	r4, [sp]
   2588c:	mov	r3, r4
   25890:	movw	r2, #7672	; 0x1df8
   25894:	movt	r2, #4
   25898:	movw	r1, #7720	; 0x1e28
   2589c:	movt	r1, #4
   258a0:	mov	r0, r6
   258a4:	bl	23da8 <test_json@@Base>
   258a8:	orr	r5, r5, r0
   258ac:	movw	r3, #734	; 0x2de
   258b0:	str	r3, [sp, #8]
   258b4:	str	r4, [sp, #4]
   258b8:	str	r4, [sp]
   258bc:	mov	r3, r4
   258c0:	movw	r2, #7784	; 0x1e68
   258c4:	movt	r2, #4
   258c8:	movw	r1, #7804	; 0x1e7c
   258cc:	movt	r1, #4
   258d0:	mov	r0, r6
   258d4:	bl	23da8 <test_json@@Base>
   258d8:	orr	r5, r5, r0
   258dc:	movw	r7, #7832	; 0x1e98
   258e0:	movt	r7, #4
   258e4:	movw	r3, #738	; 0x2e2
   258e8:	str	r3, [sp, #8]
   258ec:	str	r4, [sp, #4]
   258f0:	str	r4, [sp]
   258f4:	mov	r3, r4
   258f8:	mov	r2, r7
   258fc:	movw	r1, #7900	; 0x1edc
   25900:	movt	r1, #4
   25904:	mov	r0, r6
   25908:	bl	23da8 <test_json@@Base>
   2590c:	orr	r5, r5, r0
   25910:	movw	r3, #750	; 0x2ee
   25914:	str	r3, [sp, #8]
   25918:	str	r4, [sp, #4]
   2591c:	str	r4, [sp]
   25920:	mov	r3, r4
   25924:	mov	r2, r7
   25928:	movw	r1, #7972	; 0x1f24
   2592c:	movt	r1, #4
   25930:	mov	r0, r6
   25934:	bl	23da8 <test_json@@Base>
   25938:	orr	r5, r5, r0
   2593c:	movw	r3, #766	; 0x2fe
   25940:	str	r3, [sp, #8]
   25944:	str	r4, [sp, #4]
   25948:	str	r4, [sp]
   2594c:	mov	r3, r4
   25950:	movw	r2, #8132	; 0x1fc4
   25954:	movt	r2, #4
   25958:	movw	r1, #8168	; 0x1fe8
   2595c:	movt	r1, #4
   25960:	mov	r0, r6
   25964:	bl	23da8 <test_json@@Base>
   25968:	orr	r5, r5, r0
   2596c:	movw	r3, #770	; 0x302
   25970:	str	r3, [sp, #8]
   25974:	str	r4, [sp, #4]
   25978:	str	r4, [sp]
   2597c:	mov	r3, r4
   25980:	movw	r2, #8208	; 0x2010
   25984:	movt	r2, #4
   25988:	movw	r1, #8252	; 0x203c
   2598c:	movt	r1, #4
   25990:	mov	r0, r6
   25994:	bl	23da8 <test_json@@Base>
   25998:	orr	r4, r5, r0
   2599c:	movw	r6, #59676	; 0xe91c
   259a0:	movt	r6, #3
   259a4:	mov	r3, #776	; 0x308
   259a8:	str	r3, [sp, #8]
   259ac:	mov	r5, #0
   259b0:	str	r5, [sp, #4]
   259b4:	str	r5, [sp]
   259b8:	mov	r3, r5
   259bc:	movw	r2, #8300	; 0x206c
   259c0:	movt	r2, #4
   259c4:	movw	r1, #8412	; 0x20dc
   259c8:	movt	r1, #4
   259cc:	mov	r0, r6
   259d0:	bl	23da8 <test_json@@Base>
   259d4:	orr	r4, r4, r0
   259d8:	movw	r3, #781	; 0x30d
   259dc:	str	r3, [sp, #8]
   259e0:	str	r5, [sp, #4]
   259e4:	str	r5, [sp]
   259e8:	mov	r3, r5
   259ec:	movw	r2, #61456	; 0xf010
   259f0:	movt	r2, #3
   259f4:	movw	r1, #8536	; 0x2158
   259f8:	movt	r1, #4
   259fc:	mov	r0, r6
   25a00:	bl	23da8 <test_json@@Base>
   25a04:	orr	r4, r4, r0
   25a08:	movw	r3, #786	; 0x312
   25a0c:	str	r3, [sp, #8]
   25a10:	str	r5, [sp, #4]
   25a14:	str	r5, [sp]
   25a18:	mov	r3, r5
   25a1c:	movw	r2, #8656	; 0x21d0
   25a20:	movt	r2, #4
   25a24:	movw	r1, #8768	; 0x2240
   25a28:	movt	r1, #4
   25a2c:	mov	r0, r6
   25a30:	bl	23da8 <test_json@@Base>
   25a34:	orr	r4, r4, r0
   25a38:	movw	r3, #791	; 0x317
   25a3c:	str	r3, [sp, #8]
   25a40:	str	r5, [sp, #4]
   25a44:	str	r5, [sp]
   25a48:	mov	r3, r5
   25a4c:	movw	r2, #8892	; 0x22bc
   25a50:	movt	r2, #4
   25a54:	movw	r1, #9020	; 0x233c
   25a58:	movt	r1, #4
   25a5c:	mov	r0, r6
   25a60:	bl	23da8 <test_json@@Base>
   25a64:	orr	r4, r4, r0
   25a68:	mov	r3, #796	; 0x31c
   25a6c:	str	r3, [sp, #8]
   25a70:	str	r5, [sp, #4]
   25a74:	str	r5, [sp]
   25a78:	mov	r3, r5
   25a7c:	movw	r2, #9160	; 0x23c8
   25a80:	movt	r2, #4
   25a84:	movw	r1, #9272	; 0x2438
   25a88:	movt	r1, #4
   25a8c:	mov	r0, r6
   25a90:	bl	23da8 <test_json@@Base>
   25a94:	orr	r4, r4, r0
   25a98:	movw	r3, #801	; 0x321
   25a9c:	str	r3, [sp, #8]
   25aa0:	str	r5, [sp, #4]
   25aa4:	str	r5, [sp]
   25aa8:	mov	r3, r5
   25aac:	movw	r2, #9396	; 0x24b4
   25ab0:	movt	r2, #4
   25ab4:	movw	r1, #9524	; 0x2534
   25ab8:	movt	r1, #4
   25abc:	mov	r0, r6
   25ac0:	bl	23da8 <test_json@@Base>
   25ac4:	orr	r4, r4, r0
   25ac8:	movw	r3, #806	; 0x326
   25acc:	str	r3, [sp, #8]
   25ad0:	str	r5, [sp, #4]
   25ad4:	str	r5, [sp]
   25ad8:	mov	r3, r5
   25adc:	movw	r2, #9664	; 0x25c0
   25ae0:	movt	r2, #4
   25ae4:	movw	r1, #9796	; 0x2644
   25ae8:	movt	r1, #4
   25aec:	mov	r0, r6
   25af0:	bl	23da8 <test_json@@Base>
   25af4:	orrs	r3, r4, r0
   25af8:	mvnne	r0, #0
   25afc:	moveq	r0, r5
   25b00:	add	sp, sp, #52	; 0x34
   25b04:	ldrd	r4, [sp]
   25b08:	ldrd	r6, [sp, #8]
   25b0c:	ldrd	r8, [sp, #16]
   25b10:	ldrd	sl, [sp, #24]
   25b14:	add	sp, sp, #32
   25b18:	pop	{pc}		; (ldr pc, [sp], #4)
   25b1c:	strd	r4, [sp, #-16]!
   25b20:	str	r6, [sp, #8]
   25b24:	str	lr, [sp, #12]
   25b28:	sub	sp, sp, #8
   25b2c:	mov	r4, r0
   25b30:	mov	r5, r2
   25b34:	ldr	r2, [r0, #28]
   25b38:	mov	r3, #1
   25b3c:	str	r3, [sp]
   25b40:	ldr	r6, [r0, #48]	; 0x30
   25b44:	add	r2, r1, r2
   25b48:	add	r1, r0, #60	; 0x3c
   25b4c:	ldr	r0, [r0, #40]	; 0x28
   25b50:	blx	r6
   25b54:	cmp	r0, #0
   25b58:	bne	25b9c <main@@Base+0xda0>
   25b5c:	ldr	r1, [r4, #28]
   25b60:	ldr	r2, [r4, #60]	; 0x3c
   25b64:	add	r2, r2, r1
   25b68:	str	r2, [r4, #16]
   25b6c:	ldr	r3, [r4, #64]	; 0x40
   25b70:	sub	r3, r3, r1
   25b74:	cmp	r3, r5
   25b78:	movcs	r3, r5
   25b7c:	str	r3, [r4, #24]
   25b80:	ldr	r3, [r4, #32]
   25b84:	str	r5, [r3, #4]
   25b88:	add	sp, sp, #8
   25b8c:	ldrd	r4, [sp]
   25b90:	ldr	r6, [sp, #8]
   25b94:	add	sp, sp, #12
   25b98:	pop	{pc}		; (ldr pc, [sp], #4)
   25b9c:	mvn	r0, #0
   25ba0:	b	25b88 <main@@Base+0xd8c>

00025ba4 <flatcc_builder_default_alloc@@Base>:
   25ba4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25ba8:	strd	r6, [sp, #8]
   25bac:	str	r8, [sp, #16]
   25bb0:	str	lr, [sp, #20]
   25bb4:	mov	r5, r1
   25bb8:	cmp	r2, #0
   25bbc:	beq	25bf4 <flatcc_builder_default_alloc@@Base+0x50>
   25bc0:	mov	r6, r3
   25bc4:	ldr	r3, [sp, #24]
   25bc8:	sub	r3, r3, #1
   25bcc:	cmp	r3, #6
   25bd0:	ldrls	pc, [pc, r3, lsl #2]
   25bd4:	b	25ca0 <flatcc_builder_default_alloc@@Base+0xfc>
   25bd8:	andeq	r5, r2, r0, lsr #24
   25bdc:	andeq	r5, r2, r0, lsr #25
   25be0:	andeq	r5, r2, r0, lsr #25
   25be4:	andeq	r5, r2, r8, lsl ip
   25be8:	andeq	r5, r2, r8, lsr #25
   25bec:	andeq	r5, r2, r0, lsr #25
   25bf0:	muleq	r2, r8, ip
   25bf4:	ldr	r0, [r1]
   25bf8:	cmp	r0, #0
   25bfc:	moveq	r0, #0
   25c00:	beq	25c84 <flatcc_builder_default_alloc@@Base+0xe0>
   25c04:	bl	14518 <free@plt>
   25c08:	mov	r0, #0
   25c0c:	str	r0, [r5]
   25c10:	str	r0, [r5, #4]
   25c14:	b	25c84 <flatcc_builder_default_alloc@@Base+0xe0>
   25c18:	mov	r4, #288	; 0x120
   25c1c:	b	25c24 <flatcc_builder_default_alloc@@Base+0x80>
   25c20:	mov	r4, #256	; 0x100
   25c24:	cmp	r4, r2
   25c28:	bcs	25c38 <flatcc_builder_default_alloc@@Base+0x94>
   25c2c:	lsl	r4, r4, #1
   25c30:	cmp	r2, r4
   25c34:	bhi	25c2c <flatcc_builder_default_alloc@@Base+0x88>
   25c38:	ldr	r3, [r5, #4]
   25c3c:	cmp	r3, r2
   25c40:	bcc	25c50 <flatcc_builder_default_alloc@@Base+0xac>
   25c44:	cmp	r4, r3, lsr #1
   25c48:	movls	r0, #0
   25c4c:	bls	25c84 <flatcc_builder_default_alloc@@Base+0xe0>
   25c50:	mov	r1, r4
   25c54:	ldr	r0, [r5]
   25c58:	bl	1453c <realloc@plt>
   25c5c:	subs	r7, r0, #0
   25c60:	beq	25cc4 <flatcc_builder_default_alloc@@Base+0x120>
   25c64:	cmp	r6, #0
   25c68:	beq	25c78 <flatcc_builder_default_alloc@@Base+0xd4>
   25c6c:	ldr	r0, [r5, #4]
   25c70:	cmp	r0, r4
   25c74:	bcc	25cb0 <flatcc_builder_default_alloc@@Base+0x10c>
   25c78:	str	r7, [r5]
   25c7c:	str	r4, [r5, #4]
   25c80:	mov	r0, #0
   25c84:	ldrd	r4, [sp]
   25c88:	ldrd	r6, [sp, #8]
   25c8c:	ldr	r8, [sp, #16]
   25c90:	add	sp, sp, #20
   25c94:	pop	{pc}		; (ldr pc, [sp], #4)
   25c98:	mov	r4, #64	; 0x40
   25c9c:	b	25c24 <flatcc_builder_default_alloc@@Base+0x80>
   25ca0:	mov	r4, #32
   25ca4:	b	25c24 <flatcc_builder_default_alloc@@Base+0x80>
   25ca8:	mov	r4, r2
   25cac:	b	25c38 <flatcc_builder_default_alloc@@Base+0x94>
   25cb0:	sub	r2, r4, r0
   25cb4:	mov	r1, #0
   25cb8:	add	r0, r7, r0
   25cbc:	bl	1459c <memset@plt>
   25cc0:	b	25c78 <flatcc_builder_default_alloc@@Base+0xd4>
   25cc4:	mvn	r0, #0
   25cc8:	b	25c84 <flatcc_builder_default_alloc@@Base+0xe0>
   25ccc:	cmp	r2, #0
   25cd0:	bne	25ce0 <flatcc_builder_default_alloc@@Base+0x13c>
   25cd4:	ldrh	r2, [r0, #132]	; 0x84
   25cd8:	cmp	r2, #0
   25cdc:	moveq	r2, #1
   25ce0:	ldrh	ip, [r1]
   25ce4:	cmp	ip, #3
   25ce8:	movls	ip, #4
   25cec:	strhls	ip, [r1]
   25cf0:	ldrh	ip, [r1]
   25cf4:	cmp	ip, r2
   25cf8:	strhcc	r2, [r1]
   25cfc:	cmp	r3, #0
   25d00:	bne	25de0 <flatcc_builder_default_alloc@@Base+0x23c>
   25d04:	strd	r4, [sp, #-12]!
   25d08:	str	lr, [sp, #8]
   25d0c:	sub	sp, sp, #84	; 0x54
   25d10:	ldr	r4, [r0, #140]	; 0x8c
   25d14:	sub	r2, r2, #1
   25d18:	ands	r2, r2, r4
   25d1c:	bne	25d34 <flatcc_builder_default_alloc@@Base+0x190>
   25d20:	mov	r0, #0
   25d24:	add	sp, sp, #84	; 0x54
   25d28:	ldrd	r4, [sp]
   25d2c:	add	sp, sp, #8
   25d30:	pop	{pc}		; (ldr pc, [sp], #4)
   25d34:	str	r2, [sp, #8]
   25d38:	movw	r3, #9964	; 0x26ec
   25d3c:	movt	r3, #4
   25d40:	str	r3, [sp, #16]
   25d44:	str	r2, [sp, #20]
   25d48:	mov	r3, #1
   25d4c:	str	r3, [sp, #12]
   25d50:	add	r3, r4, r2
   25d54:	str	r3, [r0, #140]	; 0x8c
   25d58:	cmp	r4, r3
   25d5c:	bgt	25da8 <flatcc_builder_default_alloc@@Base+0x204>
   25d60:	str	r2, [sp]
   25d64:	ldr	r5, [r0, #44]	; 0x2c
   25d68:	mov	r3, r4
   25d6c:	mov	r2, #1
   25d70:	add	r1, sp, #16
   25d74:	ldr	r0, [r0, #36]	; 0x24
   25d78:	blx	r5
   25d7c:	cmp	r0, #0
   25d80:	bne	25dc4 <flatcc_builder_default_alloc@@Base+0x220>
   25d84:	cmn	r4, #1
   25d88:	bne	25d20 <flatcc_builder_default_alloc@@Base+0x17c>
   25d8c:	ldr	r3, [pc, #84]	; 25de8 <flatcc_builder_default_alloc@@Base+0x244>
   25d90:	movw	r2, #702	; 0x2be
   25d94:	movw	r1, #11836	; 0x2e3c
   25d98:	movt	r1, #4
   25d9c:	movw	r0, #11920	; 0x2e90
   25da0:	movt	r0, #4
   25da4:	bl	145f0 <__assert_fail@plt>
   25da8:	ldr	r3, [pc, #60]	; 25dec <flatcc_builder_default_alloc@@Base+0x248>
   25dac:	movw	r2, #673	; 0x2a1
   25db0:	movw	r1, #11836	; 0x2e3c
   25db4:	movt	r1, #4
   25db8:	movw	r0, #11920	; 0x2e90
   25dbc:	movt	r0, #4
   25dc0:	bl	145f0 <__assert_fail@plt>
   25dc4:	ldr	r3, [pc, #32]	; 25dec <flatcc_builder_default_alloc@@Base+0x248>
   25dc8:	movw	r2, #677	; 0x2a5
   25dcc:	movw	r1, #11836	; 0x2e3c
   25dd0:	movt	r1, #4
   25dd4:	movw	r0, #11920	; 0x2e90
   25dd8:	movt	r0, #4
   25ddc:	bl	145f0 <__assert_fail@plt>
   25de0:	mov	r0, #0
   25de4:	bx	lr
   25de8:	strdeq	r2, [r4], -r8
   25dec:	andeq	r2, r4, ip, ror #17
   25df0:	strd	r4, [sp, #-20]!	; 0xffffffec
   25df4:	strd	r6, [sp, #8]
   25df8:	str	lr, [sp, #16]
   25dfc:	sub	sp, sp, #12
   25e00:	mov	r4, r0
   25e04:	mov	r6, r1
   25e08:	ldr	r3, [r0, #156]	; 0x9c
   25e0c:	add	r2, r3, #1
   25e10:	str	r2, [r0, #156]	; 0x9c
   25e14:	ldr	r1, [r0, #160]	; 0xa0
   25e18:	cmp	r2, r1
   25e1c:	ble	25ed4 <flatcc_builder_default_alloc@@Base+0x330>
   25e20:	ldr	r1, [r0, #176]	; 0xb0
   25e24:	cmp	r2, r1
   25e28:	cmpgt	r1, #0
   25e2c:	bgt	25f48 <flatcc_builder_default_alloc@@Base+0x3a4>
   25e30:	add	r3, r3, r3, lsl #3
   25e34:	lsl	r5, r3, #2
   25e38:	add	r2, r5, #36	; 0x24
   25e3c:	ldr	r3, [r0, #88]	; 0x58
   25e40:	cmp	r2, r3
   25e44:	bls	25e6c <flatcc_builder_default_alloc@@Base+0x2c8>
   25e48:	mov	r3, #4
   25e4c:	str	r3, [sp]
   25e50:	ldr	r7, [r0, #48]	; 0x30
   25e54:	mov	r3, #0
   25e58:	add	r1, r0, #84	; 0x54
   25e5c:	ldr	r0, [r0, #40]	; 0x28
   25e60:	blx	r7
   25e64:	cmp	r0, #0
   25e68:	bne	25eb8 <flatcc_builder_default_alloc@@Base+0x314>
   25e6c:	ldr	r3, [r4, #84]	; 0x54
   25e70:	add	r5, r3, r5
   25e74:	str	r5, [r4, #32]
   25e78:	cmp	r5, #0
   25e7c:	beq	25f50 <flatcc_builder_default_alloc@@Base+0x3ac>
   25e80:	ldr	r3, [r4, #88]	; 0x58
   25e84:	movw	r2, #36409	; 0x8e39
   25e88:	movt	r2, #14563	; 0x38e3
   25e8c:	umull	r2, r3, r2, r3
   25e90:	lsr	r3, r3, #3
   25e94:	ldr	r2, [r4, #176]	; 0xb0
   25e98:	cmp	r2, #0
   25e9c:	cmpgt	r3, r2
   25ea0:	movgt	r1, #1
   25ea4:	movle	r1, #0
   25ea8:	cmp	r1, #0
   25eac:	movne	r3, r2
   25eb0:	str	r3, [r4, #160]	; 0xa0
   25eb4:	b	25ee0 <flatcc_builder_default_alloc@@Base+0x33c>
   25eb8:	ldr	r3, [pc, #152]	; 25f58 <flatcc_builder_default_alloc@@Base+0x3b4>
   25ebc:	mov	r2, #308	; 0x134
   25ec0:	movw	r1, #11836	; 0x2e3c
   25ec4:	movt	r1, #4
   25ec8:	movw	r0, #11920	; 0x2e90
   25ecc:	movt	r0, #4
   25ed0:	bl	145f0 <__assert_fail@plt>
   25ed4:	ldr	r3, [r0, #32]
   25ed8:	add	r3, r3, #36	; 0x24
   25edc:	str	r3, [r0, #32]
   25ee0:	ldr	r3, [r4, #32]
   25ee4:	ldr	r2, [r4, #20]
   25ee8:	str	r2, [r3, #8]
   25eec:	ldr	r3, [r4, #32]
   25ef0:	ldrh	r2, [r4, #130]	; 0x82
   25ef4:	strh	r2, [r3, #12]
   25ef8:	strh	r6, [r4, #130]	; 0x82
   25efc:	ldr	r3, [r4, #32]
   25f00:	ldr	r2, [r4, #28]
   25f04:	str	r2, [r3]
   25f08:	ldr	r3, [r4, #32]
   25f0c:	mvn	r2, #3
   25f10:	str	r2, [r3, #4]
   25f14:	ldr	r3, [r4, #28]
   25f18:	ldr	r2, [r4, #20]
   25f1c:	add	r3, r3, r2
   25f20:	add	r3, r3, #7
   25f24:	bic	r3, r3, #7
   25f28:	str	r3, [r4, #28]
   25f2c:	mov	r0, #0
   25f30:	str	r0, [r4, #20]
   25f34:	add	sp, sp, #12
   25f38:	ldrd	r4, [sp]
   25f3c:	ldrd	r6, [sp, #8]
   25f40:	add	sp, sp, #16
   25f44:	pop	{pc}		; (ldr pc, [sp], #4)
   25f48:	mvn	r0, #0
   25f4c:	b	25f34 <flatcc_builder_default_alloc@@Base+0x390>
   25f50:	mvn	r0, #0
   25f54:	b	25f34 <flatcc_builder_default_alloc@@Base+0x390>
   25f58:	andeq	r2, r4, r8, lsl #18
   25f5c:	strd	r4, [sp, #-16]!
   25f60:	str	r6, [sp, #8]
   25f64:	str	lr, [sp, #12]
   25f68:	sub	sp, sp, #88	; 0x58
   25f6c:	cmn	r2, #-1073741823	; 0xc0000001
   25f70:	bhi	26154 <flatcc_builder_default_alloc@@Base+0x5b0>
   25f74:	ldrh	ip, [r0, #128]	; 0x80
   25f78:	cmp	ip, #3
   25f7c:	movls	ip, #4
   25f80:	strhls	ip, [r0, #128]	; 0x80
   25f84:	str	r2, [sp, #84]	; 0x54
   25f88:	ldr	lr, [r0, #136]	; 0x88
   25f8c:	and	ip, lr, #3
   25f90:	mov	r4, #4
   25f94:	str	r4, [sp, #12]
   25f98:	add	r5, sp, #84	; 0x54
   25f9c:	str	r5, [sp, #20]
   25fa0:	str	r4, [sp, #24]
   25fa4:	mov	r4, #1
   25fa8:	str	r4, [sp, #16]
   25fac:	lsls	r4, r2, #2
   25fb0:	beq	25fcc <flatcc_builder_default_alloc@@Base+0x428>
   25fb4:	add	r5, r4, #4
   25fb8:	str	r5, [sp, #12]
   25fbc:	str	r1, [sp, #28]
   25fc0:	str	r4, [sp, #32]
   25fc4:	mov	r4, #2
   25fc8:	str	r4, [sp, #16]
   25fcc:	cmp	ip, #0
   25fd0:	beq	26004 <flatcc_builder_default_alloc@@Base+0x460>
   25fd4:	ldr	r4, [sp, #12]
   25fd8:	add	r4, r4, ip
   25fdc:	str	r4, [sp, #12]
   25fe0:	ldr	r4, [sp, #16]
   25fe4:	add	r4, r4, #1
   25fe8:	add	r5, sp, #88	; 0x58
   25fec:	add	r6, r5, r4, lsl #3
   25ff0:	movw	r5, #9964	; 0x26ec
   25ff4:	movt	r5, #4
   25ff8:	str	r5, [r6, #-76]	; 0xffffffb4
   25ffc:	str	ip, [r6, #-72]	; 0xffffffb8
   26000:	str	r4, [sp, #16]
   26004:	mov	r5, r0
   26008:	ldr	r6, [sp, #12]
   2600c:	cmp	r2, #0
   26010:	beq	260cc <flatcc_builder_default_alloc@@Base+0x528>
   26014:	mov	ip, r3
   26018:	add	r4, r2, r3
   2601c:	mov	r2, r1
   26020:	add	r1, r1, r6
   26024:	sub	r0, r1, lr
   26028:	b	2604c <flatcc_builder_default_alloc@@Base+0x4a8>
   2602c:	cmp	r3, #0
   26030:	beq	260b0 <flatcc_builder_default_alloc@@Base+0x50c>
   26034:	ldrb	r1, [ip]
   26038:	cmp	r1, #0
   2603c:	bne	26094 <flatcc_builder_default_alloc@@Base+0x4f0>
   26040:	add	ip, ip, #1
   26044:	cmp	ip, r4
   26048:	beq	260cc <flatcc_builder_default_alloc@@Base+0x528>
   2604c:	ldr	r1, [r2], #4
   26050:	cmp	r1, #0
   26054:	beq	2602c <flatcc_builder_default_alloc@@Base+0x488>
   26058:	sub	lr, r0, r2
   2605c:	add	r1, lr, r1
   26060:	str	r1, [r2, #-4]
   26064:	cmp	r3, #0
   26068:	beq	26040 <flatcc_builder_default_alloc@@Base+0x49c>
   2606c:	ldrb	r1, [ip]
   26070:	cmp	r1, #0
   26074:	bne	26040 <flatcc_builder_default_alloc@@Base+0x49c>
   26078:	ldr	r3, [pc, #220]	; 2615c <flatcc_builder_default_alloc@@Base+0x5b8>
   2607c:	movw	r2, #1457	; 0x5b1
   26080:	movw	r1, #11836	; 0x2e3c
   26084:	movt	r1, #4
   26088:	movw	r0, #11908	; 0x2e84
   2608c:	movt	r0, #4
   26090:	bl	145f0 <__assert_fail@plt>
   26094:	ldr	r3, [pc, #192]	; 2615c <flatcc_builder_default_alloc@@Base+0x5b8>
   26098:	movw	r2, #1461	; 0x5b5
   2609c:	movw	r1, #11836	; 0x2e3c
   260a0:	movt	r1, #4
   260a4:	movw	r0, #11924	; 0x2e94
   260a8:	movt	r0, #4
   260ac:	bl	145f0 <__assert_fail@plt>
   260b0:	ldr	r3, [pc, #164]	; 2615c <flatcc_builder_default_alloc@@Base+0x5b8>
   260b4:	movw	r2, #1463	; 0x5b7
   260b8:	movw	r1, #11836	; 0x2e3c
   260bc:	movt	r1, #4
   260c0:	movw	r0, #11920	; 0x2e90
   260c4:	movt	r0, #4
   260c8:	bl	145f0 <__assert_fail@plt>
   260cc:	ldr	r3, [r5, #136]	; 0x88
   260d0:	sub	r4, r3, r6
   260d4:	cmp	r3, r4
   260d8:	ble	2611c <flatcc_builder_default_alloc@@Base+0x578>
   260dc:	str	r6, [sp]
   260e0:	ldr	r6, [r5, #44]	; 0x2c
   260e4:	mov	r3, r4
   260e8:	ldr	r2, [sp, #16]
   260ec:	add	r1, sp, #20
   260f0:	ldr	r0, [r5, #36]	; 0x24
   260f4:	blx	r6
   260f8:	cmp	r0, #0
   260fc:	streq	r4, [r5, #136]	; 0x88
   26100:	bne	26138 <flatcc_builder_default_alloc@@Base+0x594>
   26104:	mov	r0, r4
   26108:	add	sp, sp, #88	; 0x58
   2610c:	ldrd	r4, [sp]
   26110:	ldr	r6, [sp, #8]
   26114:	add	sp, sp, #12
   26118:	pop	{pc}		; (ldr pc, [sp], #4)
   2611c:	ldr	r3, [pc, #60]	; 26160 <flatcc_builder_default_alloc@@Base+0x5bc>
   26120:	movw	r2, #647	; 0x287
   26124:	movw	r1, #11836	; 0x2e3c
   26128:	movt	r1, #4
   2612c:	movw	r0, #11920	; 0x2e90
   26130:	movt	r0, #4
   26134:	bl	145f0 <__assert_fail@plt>
   26138:	ldr	r3, [pc, #32]	; 26160 <flatcc_builder_default_alloc@@Base+0x5bc>
   2613c:	movw	r2, #651	; 0x28b
   26140:	movw	r1, #11836	; 0x2e3c
   26144:	movt	r1, #4
   26148:	movw	r0, #11920	; 0x2e90
   2614c:	movt	r0, #4
   26150:	bl	145f0 <__assert_fail@plt>
   26154:	mov	r4, #0
   26158:	b	26104 <flatcc_builder_default_alloc@@Base+0x560>
   2615c:	andeq	r2, r4, r8, lsl r9
   26160:	andeq	r2, r4, r8, lsr r9

00026164 <flatcc_builder_flush_vtable_cache@@Base>:
   26164:	ldr	r3, [r0, #116]	; 0x74
   26168:	cmp	r3, #0
   2616c:	bxeq	lr
   26170:	str	r4, [sp, #-8]!
   26174:	str	lr, [sp, #4]
   26178:	mov	r4, r0
   2617c:	ldr	r2, [r0, #96]	; 0x60
   26180:	mov	r1, #0
   26184:	ldr	r0, [r0, #92]	; 0x5c
   26188:	bl	1459c <memset@plt>
   2618c:	mov	r3, #16
   26190:	str	r3, [r4, #124]	; 0x7c
   26194:	mov	r3, #0
   26198:	str	r3, [r4, #120]	; 0x78
   2619c:	ldr	r4, [sp]
   261a0:	add	sp, sp, #4
   261a4:	pop	{pc}		; (ldr pc, [sp], #4)

000261a8 <flatcc_builder_custom_init@@Base>:
   261a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   261ac:	strd	r6, [sp, #8]
   261b0:	str	r8, [sp, #16]
   261b4:	str	lr, [sp, #20]
   261b8:	mov	r4, r0
   261bc:	mov	r6, r1
   261c0:	mov	r7, r2
   261c4:	mov	r5, r3
   261c8:	mov	r2, #232	; 0xe8
   261cc:	mov	r1, #0
   261d0:	bl	1459c <memset@plt>
   261d4:	cmp	r6, #0
   261d8:	beq	26218 <flatcc_builder_custom_init@@Base+0x70>
   261dc:	movw	r3, #23460	; 0x5ba4
   261e0:	movt	r3, #2
   261e4:	cmp	r5, #0
   261e8:	moveq	r5, r3
   261ec:	ldr	r3, [sp, #24]
   261f0:	str	r3, [r4, #40]	; 0x28
   261f4:	str	r5, [r4, #48]	; 0x30
   261f8:	str	r7, [r4, #36]	; 0x24
   261fc:	str	r6, [r4, #44]	; 0x2c
   26200:	mov	r0, #0
   26204:	ldrd	r4, [sp]
   26208:	ldrd	r6, [sp, #8]
   2620c:	ldr	r8, [sp, #16]
   26210:	add	sp, sp, #20
   26214:	pop	{pc}		; (ldr pc, [sp], #4)
   26218:	mov	r3, #1
   2621c:	str	r3, [r4, #184]	; 0xb8
   26220:	add	r7, r4, #188	; 0xbc
   26224:	movw	r6, #41588	; 0xa274
   26228:	movt	r6, #2
   2622c:	b	261dc <flatcc_builder_custom_init@@Base+0x34>

00026230 <flatcc_builder_init@@Base>:
   26230:	str	r4, [sp, #-8]!
   26234:	str	lr, [sp, #4]
   26238:	mov	r4, r0
   2623c:	mov	r2, #232	; 0xe8
   26240:	mov	r1, #0
   26244:	bl	1459c <memset@plt>
   26248:	mov	r3, #1
   2624c:	str	r3, [r4, #184]	; 0xb8
   26250:	movw	r3, #23460	; 0x5ba4
   26254:	movt	r3, #2
   26258:	str	r3, [r4, #48]	; 0x30
   2625c:	add	r3, r4, #188	; 0xbc
   26260:	str	r3, [r4, #36]	; 0x24
   26264:	movw	r3, #41588	; 0xa274
   26268:	movt	r3, #2
   2626c:	str	r3, [r4, #44]	; 0x2c
   26270:	mov	r0, #0
   26274:	ldr	r4, [sp]
   26278:	add	sp, sp, #4
   2627c:	pop	{pc}		; (ldr pc, [sp], #4)

00026280 <flatcc_builder_custom_reset@@Base>:
   26280:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26284:	strd	r6, [sp, #8]
   26288:	strd	r8, [sp, #16]
   2628c:	strd	sl, [sp, #24]
   26290:	str	lr, [sp, #32]
   26294:	sub	sp, sp, #12
   26298:	mov	r6, r0
   2629c:	mov	fp, r1
   262a0:	mov	r9, r2
   262a4:	mov	r4, r0
   262a8:	mov	r5, #0
   262ac:	mov	sl, r5
   262b0:	mov	r8, #1
   262b4:	b	262d8 <flatcc_builder_custom_reset@@Base+0x58>
   262b8:	ldr	r2, [r7, #56]	; 0x38
   262bc:	mov	r1, sl
   262c0:	ldr	r0, [r7, #52]	; 0x34
   262c4:	bl	1459c <memset@plt>
   262c8:	add	r5, r5, #1
   262cc:	add	r4, r4, #8
   262d0:	cmp	r5, #8
   262d4:	beq	26348 <flatcc_builder_custom_reset@@Base+0xc8>
   262d8:	add	r1, r4, #52	; 0x34
   262dc:	mov	r7, r4
   262e0:	ldr	r3, [r4, #52]	; 0x34
   262e4:	cmp	r3, #0
   262e8:	beq	26320 <flatcc_builder_custom_reset@@Base+0xa0>
   262ec:	cmp	r5, #5
   262f0:	cmpne	r9, #0
   262f4:	beq	262b8 <flatcc_builder_custom_reset@@Base+0x38>
   262f8:	str	r5, [sp]
   262fc:	mov	r3, r8
   26300:	mov	r2, r8
   26304:	ldr	r0, [r6, #40]	; 0x28
   26308:	ldr	ip, [r6, #48]	; 0x30
   2630c:	blx	ip
   26310:	cmp	r0, #0
   26314:	beq	262b8 <flatcc_builder_custom_reset@@Base+0x38>
   26318:	mvn	r0, #0
   2631c:	b	263c4 <flatcc_builder_custom_reset@@Base+0x144>
   26320:	ldr	r3, [r4, #56]	; 0x38
   26324:	cmp	r3, #0
   26328:	beq	262c8 <flatcc_builder_custom_reset@@Base+0x48>
   2632c:	ldr	r3, [pc, #188]	; 263f0 <flatcc_builder_custom_reset@@Base+0x170>
   26330:	movw	r2, #434	; 0x1b2
   26334:	movw	r1, #11836	; 0x2e3c
   26338:	movt	r1, #4
   2633c:	movw	r0, #11940	; 0x2ea4
   26340:	movt	r0, #4
   26344:	bl	145f0 <__assert_fail@plt>
   26348:	mov	r3, #0
   2634c:	str	r3, [r6, #120]	; 0x78
   26350:	ldr	r3, [r6, #124]	; 0x7c
   26354:	cmp	r3, #0
   26358:	movne	r3, #16
   2635c:	strne	r3, [r6, #124]	; 0x7c
   26360:	mov	r3, #0
   26364:	strh	r3, [r6, #128]	; 0x80
   26368:	str	r3, [r6, #136]	; 0x88
   2636c:	str	r3, [r6, #140]	; 0x8c
   26370:	str	r3, [r6, #156]	; 0x9c
   26374:	str	r3, [r6, #160]	; 0xa0
   26378:	str	r3, [r6, #20]
   2637c:	str	r3, [r6, #24]
   26380:	str	r3, [r6, #148]	; 0x94
   26384:	str	r3, [r6, #152]	; 0x98
   26388:	ldr	r2, [r6, #60]	; 0x3c
   2638c:	str	r2, [r6, #16]
   26390:	ldr	r2, [r6, #76]	; 0x4c
   26394:	str	r2, [r6]
   26398:	ldr	r2, [r6, #52]	; 0x34
   2639c:	str	r2, [r6, #4]
   263a0:	str	r3, [r6, #32]
   263a4:	cmp	fp, r3
   263a8:	beq	263b8 <flatcc_builder_custom_reset@@Base+0x138>
   263ac:	str	r3, [r6, #172]	; 0xac
   263b0:	str	r3, [r6, #176]	; 0xb0
   263b4:	str	r3, [r6, #180]	; 0xb4
   263b8:	ldr	r0, [r6, #184]	; 0xb8
   263bc:	cmp	r0, #0
   263c0:	bne	263e0 <flatcc_builder_custom_reset@@Base+0x160>
   263c4:	add	sp, sp, #12
   263c8:	ldrd	r4, [sp]
   263cc:	ldrd	r6, [sp, #8]
   263d0:	ldrd	r8, [sp, #16]
   263d4:	ldrd	sl, [sp, #24]
   263d8:	add	sp, sp, #32
   263dc:	pop	{pc}		; (ldr pc, [sp], #4)
   263e0:	add	r0, r6, #188	; 0xbc
   263e4:	bl	2a11c <flatcc_emitter_reset@@Base>
   263e8:	mov	r0, #0
   263ec:	b	263c4 <flatcc_builder_custom_reset@@Base+0x144>
   263f0:	andeq	r2, r4, r4, asr #18

000263f4 <flatcc_builder_reset@@Base>:
   263f4:	str	r4, [sp, #-8]!
   263f8:	str	lr, [sp, #4]
   263fc:	mov	r2, #0
   26400:	mov	r1, r2
   26404:	bl	26280 <flatcc_builder_custom_reset@@Base>
   26408:	ldr	r4, [sp]
   2640c:	add	sp, sp, #4
   26410:	pop	{pc}		; (ldr pc, [sp], #4)

00026414 <flatcc_builder_clear@@Base>:
   26414:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26418:	strd	r6, [sp, #8]
   2641c:	str	r8, [sp, #16]
   26420:	str	lr, [sp, #20]
   26424:	sub	sp, sp, #8
   26428:	mov	r6, r0
   2642c:	add	r5, r0, #52	; 0x34
   26430:	mov	r4, #0
   26434:	mov	r8, r4
   26438:	str	r4, [sp]
   2643c:	ldr	r7, [r6, #48]	; 0x30
   26440:	mov	r3, r8
   26444:	mov	r2, r8
   26448:	mov	r1, r5
   2644c:	ldr	r0, [r6, #40]	; 0x28
   26450:	blx	r7
   26454:	add	r4, r4, #1
   26458:	add	r5, r5, #8
   2645c:	cmp	r4, #8
   26460:	bne	26438 <flatcc_builder_clear@@Base+0x24>
   26464:	ldr	r3, [r6, #184]	; 0xb8
   26468:	cmp	r3, #0
   2646c:	bne	26498 <flatcc_builder_clear@@Base+0x84>
   26470:	mov	r2, #232	; 0xe8
   26474:	mov	r1, #0
   26478:	mov	r0, r6
   2647c:	bl	1459c <memset@plt>
   26480:	add	sp, sp, #8
   26484:	ldrd	r4, [sp]
   26488:	ldrd	r6, [sp, #8]
   2648c:	ldr	r8, [sp, #16]
   26490:	add	sp, sp, #20
   26494:	pop	{pc}		; (ldr pc, [sp], #4)
   26498:	add	r0, r6, #188	; 0xbc
   2649c:	bl	2a1f8 <flatcc_emitter_clear@@Base>
   264a0:	b	26470 <flatcc_builder_clear@@Base+0x5c>

000264a4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   264a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   264a8:	strd	r6, [sp, #8]
   264ac:	str	r8, [sp, #16]
   264b0:	str	lr, [sp, #20]
   264b4:	sub	sp, sp, #8
   264b8:	mov	r4, r0
   264bc:	add	r5, r1, #3
   264c0:	bic	r5, r5, #3
   264c4:	add	r5, r5, #4
   264c8:	ldr	r6, [r0, #228]	; 0xe4
   264cc:	add	r2, r6, r5
   264d0:	ldr	r3, [r0, #112]	; 0x70
   264d4:	cmp	r2, r3
   264d8:	bls	26500 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   264dc:	mov	r3, #7
   264e0:	str	r3, [sp]
   264e4:	ldr	r7, [r0, #48]	; 0x30
   264e8:	mov	r3, #0
   264ec:	add	r1, r0, #108	; 0x6c
   264f0:	ldr	r0, [r0, #40]	; 0x28
   264f4:	blx	r7
   264f8:	cmp	r0, #0
   264fc:	bne	26558 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   26500:	ldr	r8, [r4, #108]	; 0x6c
   26504:	adds	r7, r8, r6
   26508:	moveq	r0, #0
   2650c:	beq	26540 <flatcc_builder_enter_user_frame_ptr@@Base+0x9c>
   26510:	mov	r2, r5
   26514:	mov	r1, #0
   26518:	mov	r0, r7
   2651c:	bl	1459c <memset@plt>
   26520:	add	r0, r7, #4
   26524:	ldr	r3, [r4, #224]	; 0xe0
   26528:	str	r3, [r8, r6]
   2652c:	ldr	r1, [r4, #228]	; 0xe4
   26530:	add	r3, r1, #4
   26534:	str	r3, [r4, #224]	; 0xe0
   26538:	add	r5, r1, r5
   2653c:	str	r5, [r4, #228]	; 0xe4
   26540:	add	sp, sp, #8
   26544:	ldrd	r4, [sp]
   26548:	ldrd	r6, [sp, #8]
   2654c:	ldr	r8, [sp, #16]
   26550:	add	sp, sp, #20
   26554:	pop	{pc}		; (ldr pc, [sp], #4)
   26558:	ldr	r3, [pc, #20]	; 26574 <flatcc_builder_enter_user_frame_ptr@@Base+0xd0>
   2655c:	mov	r2, #308	; 0x134
   26560:	movw	r1, #11836	; 0x2e3c
   26564:	movt	r1, #4
   26568:	movw	r0, #11920	; 0x2e90
   2656c:	movt	r0, #4
   26570:	bl	145f0 <__assert_fail@plt>
   26574:	andeq	r2, r4, r8, lsl #18

00026578 <flatcc_builder_enter_user_frame@@Base>:
   26578:	strd	r4, [sp, #-20]!	; 0xffffffec
   2657c:	strd	r6, [sp, #8]
   26580:	str	lr, [sp, #16]
   26584:	sub	sp, sp, #12
   26588:	mov	r4, r0
   2658c:	add	r5, r1, #3
   26590:	bic	r5, r5, #3
   26594:	add	r5, r5, #4
   26598:	ldr	r6, [r0, #228]	; 0xe4
   2659c:	add	r2, r6, r5
   265a0:	ldr	r3, [r0, #112]	; 0x70
   265a4:	cmp	r2, r3
   265a8:	bls	265d0 <flatcc_builder_enter_user_frame@@Base+0x58>
   265ac:	mov	r3, #7
   265b0:	str	r3, [sp]
   265b4:	ldr	r7, [r0, #48]	; 0x30
   265b8:	mov	r3, #0
   265bc:	add	r1, r0, #108	; 0x6c
   265c0:	ldr	r0, [r0, #40]	; 0x28
   265c4:	blx	r7
   265c8:	cmp	r0, #0
   265cc:	bne	26618 <flatcc_builder_enter_user_frame@@Base+0xa0>
   265d0:	ldr	r7, [r4, #108]	; 0x6c
   265d4:	adds	r0, r7, r6
   265d8:	beq	26604 <flatcc_builder_enter_user_frame@@Base+0x8c>
   265dc:	mov	r2, r5
   265e0:	mov	r1, #0
   265e4:	bl	1459c <memset@plt>
   265e8:	ldr	r3, [r4, #224]	; 0xe0
   265ec:	str	r3, [r7, r6]
   265f0:	ldr	r1, [r4, #228]	; 0xe4
   265f4:	add	r0, r1, #4
   265f8:	str	r0, [r4, #224]	; 0xe0
   265fc:	add	r5, r1, r5
   26600:	str	r5, [r4, #228]	; 0xe4
   26604:	add	sp, sp, #12
   26608:	ldrd	r4, [sp]
   2660c:	ldrd	r6, [sp, #8]
   26610:	add	sp, sp, #16
   26614:	pop	{pc}		; (ldr pc, [sp], #4)
   26618:	ldr	r3, [pc, #20]	; 26634 <flatcc_builder_enter_user_frame@@Base+0xbc>
   2661c:	mov	r2, #308	; 0x134
   26620:	movw	r1, #11836	; 0x2e3c
   26624:	movt	r1, #4
   26628:	movw	r0, #11920	; 0x2e90
   2662c:	movt	r0, #4
   26630:	bl	145f0 <__assert_fail@plt>
   26634:	andeq	r2, r4, r8, lsl #18

00026638 <flatcc_builder_exit_user_frame@@Base>:
   26638:	ldr	r3, [r0, #224]	; 0xe0
   2663c:	cmp	r3, #0
   26640:	beq	26664 <flatcc_builder_exit_user_frame@@Base+0x2c>
   26644:	ldr	r2, [r0, #108]	; 0x6c
   26648:	add	r2, r2, r3
   2664c:	sub	r3, r3, #4
   26650:	str	r3, [r0, #228]	; 0xe4
   26654:	ldr	r3, [r2, #-4]
   26658:	str	r3, [r0, #224]	; 0xe0
   2665c:	mov	r0, r3
   26660:	bx	lr
   26664:	str	r4, [sp, #-8]!
   26668:	str	lr, [sp, #4]
   2666c:	ldr	r3, [pc, #20]	; 26688 <flatcc_builder_exit_user_frame@@Base+0x50>
   26670:	movw	r2, #542	; 0x21e
   26674:	movw	r1, #11836	; 0x2e3c
   26678:	movt	r1, #4
   2667c:	movw	r0, #11960	; 0x2eb8
   26680:	movt	r0, #4
   26684:	bl	145f0 <__assert_fail@plt>
   26688:	andeq	r2, r4, r0, ror #18

0002668c <flatcc_builder_exit_user_frame_at@@Base>:
   2668c:	str	r4, [sp, #-8]!
   26690:	str	lr, [sp, #4]
   26694:	ldr	r3, [r0, #224]	; 0xe0
   26698:	cmp	r3, r1
   2669c:	bcc	266b4 <flatcc_builder_exit_user_frame_at@@Base+0x28>
   266a0:	str	r1, [r0, #224]	; 0xe0
   266a4:	bl	26638 <flatcc_builder_exit_user_frame@@Base>
   266a8:	ldr	r4, [sp]
   266ac:	add	sp, sp, #4
   266b0:	pop	{pc}		; (ldr pc, [sp], #4)
   266b4:	ldr	r3, [pc, #20]	; 266d0 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   266b8:	movw	r2, #551	; 0x227
   266bc:	movw	r1, #11836	; 0x2e3c
   266c0:	movt	r1, #4
   266c4:	movw	r0, #11988	; 0x2ed4
   266c8:	movt	r0, #4
   266cc:	bl	145f0 <__assert_fail@plt>
   266d0:	andeq	r2, r4, r0, lsl #19

000266d4 <flatcc_builder_get_current_user_frame@@Base>:
   266d4:	ldr	r0, [r0, #224]	; 0xe0
   266d8:	bx	lr

000266dc <flatcc_builder_get_user_frame_ptr@@Base>:
   266dc:	ldr	r0, [r0, #108]	; 0x6c
   266e0:	add	r0, r0, r1
   266e4:	bx	lr

000266e8 <flatcc_builder_embed_buffer@@Base>:
   266e8:	strd	r4, [sp, #-16]!
   266ec:	str	r6, [sp, #8]
   266f0:	str	lr, [sp, #12]
   266f4:	sub	sp, sp, #88	; 0x58
   266f8:	mov	r4, r0
   266fc:	mov	r6, r2
   26700:	mov	r5, r3
   26704:	ldr	r3, [r0, #152]	; 0x98
   26708:	adds	r3, r3, #0
   2670c:	movne	r3, #1
   26710:	mov	r2, r1
   26714:	add	r1, sp, #104	; 0x68
   26718:	bl	25ccc <flatcc_builder_default_alloc@@Base+0x128>
   2671c:	cmp	r0, #0
   26720:	bne	2687c <flatcc_builder_embed_buffer@@Base+0x194>
   26724:	ldr	r3, [sp, #108]	; 0x6c
   26728:	and	r3, r3, #2
   2672c:	cmp	r3, #0
   26730:	movne	r2, #4
   26734:	moveq	r2, #0
   26738:	ldr	r1, [r4, #136]	; 0x88
   2673c:	sub	r3, r1, r5
   26740:	sub	r2, r3, r2
   26744:	ldrh	r3, [sp, #104]	; 0x68
   26748:	sub	r3, r3, #1
   2674c:	and	r3, r3, r2
   26750:	add	r2, r5, r3
   26754:	str	r2, [sp, #84]	; 0x54
   26758:	mov	r2, #0
   2675c:	str	r2, [sp, #12]
   26760:	str	r2, [sp, #16]
   26764:	ldr	r2, [r4, #152]	; 0x98
   26768:	cmp	r2, #0
   2676c:	beq	2678c <flatcc_builder_embed_buffer@@Base+0xa4>
   26770:	mov	r2, #4
   26774:	str	r2, [sp, #12]
   26778:	add	r0, sp, #84	; 0x54
   2677c:	str	r0, [sp, #20]
   26780:	str	r2, [sp, #24]
   26784:	mov	r2, #1
   26788:	str	r2, [sp, #16]
   2678c:	cmp	r5, #0
   26790:	beq	267bc <flatcc_builder_embed_buffer@@Base+0xd4>
   26794:	ldr	r2, [sp, #12]
   26798:	add	r2, r2, r5
   2679c:	str	r2, [sp, #12]
   267a0:	ldr	r2, [sp, #16]
   267a4:	add	r2, r2, #1
   267a8:	add	r0, sp, #88	; 0x58
   267ac:	add	r0, r0, r2, lsl #3
   267b0:	str	r6, [r0, #-76]	; 0xffffffb4
   267b4:	str	r5, [r0, #-72]	; 0xffffffb8
   267b8:	str	r2, [sp, #16]
   267bc:	cmp	r3, #0
   267c0:	beq	267f4 <flatcc_builder_embed_buffer@@Base+0x10c>
   267c4:	ldr	r2, [sp, #12]
   267c8:	add	r2, r2, r3
   267cc:	str	r2, [sp, #12]
   267d0:	ldr	r2, [sp, #16]
   267d4:	add	r2, r2, #1
   267d8:	add	r0, sp, #88	; 0x58
   267dc:	add	ip, r0, r2, lsl #3
   267e0:	movw	r0, #9964	; 0x26ec
   267e4:	movt	r0, #4
   267e8:	str	r0, [ip, #-76]	; 0xffffffb4
   267ec:	str	r3, [ip, #-72]	; 0xffffffb8
   267f0:	str	r2, [sp, #16]
   267f4:	ldr	r3, [sp, #12]
   267f8:	sub	r5, r1, r3
   267fc:	cmp	r1, r5
   26800:	ble	26844 <flatcc_builder_embed_buffer@@Base+0x15c>
   26804:	str	r3, [sp]
   26808:	ldr	r6, [r4, #44]	; 0x2c
   2680c:	mov	r3, r5
   26810:	ldr	r2, [sp, #16]
   26814:	add	r1, sp, #20
   26818:	ldr	r0, [r4, #36]	; 0x24
   2681c:	blx	r6
   26820:	cmp	r0, #0
   26824:	streq	r5, [r4, #136]	; 0x88
   26828:	bne	26860 <flatcc_builder_embed_buffer@@Base+0x178>
   2682c:	mov	r0, r5
   26830:	add	sp, sp, #88	; 0x58
   26834:	ldrd	r4, [sp]
   26838:	ldr	r6, [sp, #8]
   2683c:	add	sp, sp, #12
   26840:	pop	{pc}		; (ldr pc, [sp], #4)
   26844:	ldr	r3, [pc, #56]	; 26884 <flatcc_builder_embed_buffer@@Base+0x19c>
   26848:	movw	r2, #647	; 0x287
   2684c:	movw	r1, #11836	; 0x2e3c
   26850:	movt	r1, #4
   26854:	movw	r0, #11920	; 0x2e90
   26858:	movt	r0, #4
   2685c:	bl	145f0 <__assert_fail@plt>
   26860:	ldr	r3, [pc, #28]	; 26884 <flatcc_builder_embed_buffer@@Base+0x19c>
   26864:	movw	r2, #651	; 0x28b
   26868:	movw	r1, #11836	; 0x2e3c
   2686c:	movt	r1, #4
   26870:	movw	r0, #11920	; 0x2e90
   26874:	movt	r0, #4
   26878:	bl	145f0 <__assert_fail@plt>
   2687c:	mov	r5, #0
   26880:	b	2682c <flatcc_builder_embed_buffer@@Base+0x144>
   26884:	andeq	r2, r4, r8, lsr r9

00026888 <flatcc_builder_create_buffer@@Base>:
   26888:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2688c:	strd	r6, [sp, #8]
   26890:	strd	r8, [sp, #16]
   26894:	str	lr, [sp, #24]
   26898:	sub	sp, sp, #100	; 0x64
   2689c:	mov	r5, r0
   268a0:	mov	r8, r1
   268a4:	mov	r4, r3
   268a8:	ldr	r7, [sp, #132]	; 0x84
   268ac:	mov	r3, #0
   268b0:	str	r3, [sp, #12]
   268b4:	and	r6, r7, #1
   268b8:	mov	r3, r6
   268bc:	add	r1, sp, #128	; 0x80
   268c0:	bl	25ccc <flatcc_builder_default_alloc@@Base+0x128>
   268c4:	cmp	r0, #0
   268c8:	bne	26ac4 <flatcc_builder_create_buffer@@Base+0x23c>
   268cc:	ldrh	r2, [sp, #128]	; 0x80
   268d0:	ldrh	r3, [r5, #128]	; 0x80
   268d4:	cmp	r3, r2
   268d8:	strhcc	r2, [r5, #128]	; 0x80
   268dc:	cmp	r8, #0
   268e0:	ldrne	r3, [r8]
   268e4:	strne	r3, [sp, #12]
   268e8:	ldr	r1, [sp, #12]
   268ec:	cmp	r1, #0
   268f0:	movne	r1, #4
   268f4:	and	r3, r7, #2
   268f8:	cmp	r3, #0
   268fc:	movne	ip, #4
   26900:	moveq	ip, #0
   26904:	ldr	r0, [r5, #136]	; 0x88
   26908:	sub	r3, r0, #4
   2690c:	sub	r3, r3, r1
   26910:	sub	r3, r3, ip
   26914:	sub	r2, r2, #1
   26918:	and	r3, r3, r2
   2691c:	mov	r2, #0
   26920:	str	r2, [sp, #16]
   26924:	str	r2, [sp, #20]
   26928:	ands	r7, r7, #3
   2692c:	beq	2694c <flatcc_builder_create_buffer@@Base+0xc4>
   26930:	mov	r2, #4
   26934:	str	r2, [sp, #16]
   26938:	add	ip, sp, #88	; 0x58
   2693c:	str	ip, [sp, #24]
   26940:	str	r2, [sp, #28]
   26944:	mov	r2, #1
   26948:	str	r2, [sp, #20]
   2694c:	ldr	ip, [sp, #16]
   26950:	add	ip, ip, #4
   26954:	str	ip, [sp, #16]
   26958:	ldr	lr, [sp, #20]
   2695c:	add	r2, lr, #1
   26960:	add	r8, sp, #96	; 0x60
   26964:	add	r8, r8, r2, lsl #3
   26968:	add	r9, sp, #92	; 0x5c
   2696c:	str	r9, [r8, #-80]	; 0xffffffb0
   26970:	mov	r9, #4
   26974:	str	r9, [r8, #-76]	; 0xffffffb4
   26978:	str	r2, [sp, #20]
   2697c:	cmp	r1, #0
   26980:	beq	269ac <flatcc_builder_create_buffer@@Base+0x124>
   26984:	add	ip, ip, r1
   26988:	str	ip, [sp, #16]
   2698c:	add	r2, lr, #2
   26990:	add	ip, sp, #96	; 0x60
   26994:	add	r2, ip, r2, lsl #3
   26998:	add	ip, sp, #12
   2699c:	str	ip, [r2, #-80]	; 0xffffffb0
   269a0:	str	r1, [r2, #-76]	; 0xffffffb4
   269a4:	add	lr, lr, #2
   269a8:	str	lr, [sp, #20]
   269ac:	cmp	r3, #0
   269b0:	beq	269e4 <flatcc_builder_create_buffer@@Base+0x15c>
   269b4:	ldr	r2, [sp, #16]
   269b8:	add	r2, r2, r3
   269bc:	str	r2, [sp, #16]
   269c0:	ldr	r2, [sp, #20]
   269c4:	add	r2, r2, #1
   269c8:	add	r1, sp, #96	; 0x60
   269cc:	add	ip, r1, r2, lsl #3
   269d0:	movw	r1, #9964	; 0x26ec
   269d4:	movt	r1, #4
   269d8:	str	r1, [ip, #-80]	; 0xffffffb0
   269dc:	str	r3, [ip, #-76]	; 0xffffffb4
   269e0:	str	r2, [sp, #20]
   269e4:	ldr	r1, [sp, #16]
   269e8:	sub	r3, r0, r1
   269ec:	cmp	r7, #0
   269f0:	movne	r2, #4
   269f4:	moveq	r2, #0
   269f8:	add	r3, r3, r2
   269fc:	cmp	r6, #0
   26a00:	ldrne	r2, [r5, #144]	; 0x90
   26a04:	ldreq	r2, [r5, #140]	; 0x8c
   26a08:	sub	r2, r2, r3
   26a0c:	str	r2, [sp, #88]	; 0x58
   26a10:	sub	r4, r4, r3
   26a14:	str	r4, [sp, #92]	; 0x5c
   26a18:	sub	r4, r0, r1
   26a1c:	cmp	r0, r4
   26a20:	ble	26a70 <flatcc_builder_create_buffer@@Base+0x1e8>
   26a24:	str	r1, [sp]
   26a28:	ldr	r6, [r5, #44]	; 0x2c
   26a2c:	mov	r3, r4
   26a30:	ldr	r2, [sp, #20]
   26a34:	add	r1, sp, #24
   26a38:	ldr	r0, [r5, #36]	; 0x24
   26a3c:	blx	r6
   26a40:	cmp	r0, #0
   26a44:	bne	26a8c <flatcc_builder_create_buffer@@Base+0x204>
   26a48:	str	r4, [r5, #136]	; 0x88
   26a4c:	cmp	r4, #0
   26a50:	beq	26aa8 <flatcc_builder_create_buffer@@Base+0x220>
   26a54:	mov	r0, r4
   26a58:	add	sp, sp, #100	; 0x64
   26a5c:	ldrd	r4, [sp]
   26a60:	ldrd	r6, [sp, #8]
   26a64:	ldrd	r8, [sp, #16]
   26a68:	add	sp, sp, #24
   26a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   26a70:	ldr	r3, [pc, #84]	; 26acc <flatcc_builder_create_buffer@@Base+0x244>
   26a74:	movw	r2, #647	; 0x287
   26a78:	movw	r1, #11836	; 0x2e3c
   26a7c:	movt	r1, #4
   26a80:	movw	r0, #11920	; 0x2e90
   26a84:	movt	r0, #4
   26a88:	bl	145f0 <__assert_fail@plt>
   26a8c:	ldr	r3, [pc, #56]	; 26acc <flatcc_builder_create_buffer@@Base+0x244>
   26a90:	movw	r2, #651	; 0x28b
   26a94:	movw	r1, #11836	; 0x2e3c
   26a98:	movt	r1, #4
   26a9c:	movw	r0, #11920	; 0x2e90
   26aa0:	movt	r0, #4
   26aa4:	bl	145f0 <__assert_fail@plt>
   26aa8:	ldr	r3, [pc, #32]	; 26ad0 <flatcc_builder_create_buffer@@Base+0x248>
   26aac:	mov	r2, #772	; 0x304
   26ab0:	movw	r1, #11836	; 0x2e3c
   26ab4:	movt	r1, #4
   26ab8:	movw	r0, #11920	; 0x2e90
   26abc:	movt	r0, #4
   26ac0:	bl	145f0 <__assert_fail@plt>
   26ac4:	mov	r4, #0
   26ac8:	b	26a54 <flatcc_builder_create_buffer@@Base+0x1cc>
   26acc:	andeq	r2, r4, r8, lsr r9
   26ad0:	andeq	r2, r4, r4, lsr #19

00026ad4 <flatcc_builder_create_struct@@Base>:
   26ad4:	strd	r4, [sp, #-16]!
   26ad8:	str	r6, [sp, #8]
   26adc:	str	lr, [sp, #12]
   26ae0:	sub	sp, sp, #80	; 0x50
   26ae4:	cmp	r3, #0
   26ae8:	beq	26b40 <flatcc_builder_create_struct@@Base+0x6c>
   26aec:	mov	r4, r0
   26af0:	ldrh	r0, [r0, #128]	; 0x80
   26af4:	cmp	r0, r3
   26af8:	strhcc	r3, [r4, #128]	; 0x80
   26afc:	ldr	ip, [r4, #136]	; 0x88
   26b00:	sub	r0, ip, r2
   26b04:	sub	r3, r3, #1
   26b08:	and	r3, r3, r0
   26b0c:	mov	r0, #0
   26b10:	str	r0, [sp, #8]
   26b14:	str	r0, [sp, #12]
   26b18:	cmp	r2, r0
   26b1c:	beq	26b94 <flatcc_builder_create_struct@@Base+0xc0>
   26b20:	str	r2, [sp, #8]
   26b24:	str	r1, [sp, #16]
   26b28:	str	r2, [sp, #20]
   26b2c:	mov	r2, #1
   26b30:	str	r2, [sp, #12]
   26b34:	cmp	r3, r0
   26b38:	beq	26bcc <flatcc_builder_create_struct@@Base+0xf8>
   26b3c:	b	26b9c <flatcc_builder_create_struct@@Base+0xc8>
   26b40:	ldr	r3, [pc, #212]	; 26c1c <flatcc_builder_create_struct@@Base+0x148>
   26b44:	movw	r2, #783	; 0x30f
   26b48:	movw	r1, #11836	; 0x2e3c
   26b4c:	movt	r1, #4
   26b50:	movw	r0, #12020	; 0x2ef4
   26b54:	movt	r0, #4
   26b58:	bl	145f0 <__assert_fail@plt>
   26b5c:	ldr	r3, [pc, #188]	; 26c20 <flatcc_builder_create_struct@@Base+0x14c>
   26b60:	movw	r2, #647	; 0x287
   26b64:	movw	r1, #11836	; 0x2e3c
   26b68:	movt	r1, #4
   26b6c:	movw	r0, #11920	; 0x2e90
   26b70:	movt	r0, #4
   26b74:	bl	145f0 <__assert_fail@plt>
   26b78:	ldr	r3, [pc, #160]	; 26c20 <flatcc_builder_create_struct@@Base+0x14c>
   26b7c:	movw	r2, #651	; 0x28b
   26b80:	movw	r1, #11836	; 0x2e3c
   26b84:	movt	r1, #4
   26b88:	movw	r0, #11920	; 0x2e90
   26b8c:	movt	r0, #4
   26b90:	bl	145f0 <__assert_fail@plt>
   26b94:	cmp	r3, #0
   26b98:	beq	26b5c <flatcc_builder_create_struct@@Base+0x88>
   26b9c:	ldr	r2, [sp, #8]
   26ba0:	add	r2, r2, r3
   26ba4:	str	r2, [sp, #8]
   26ba8:	ldr	r2, [sp, #12]
   26bac:	add	r2, r2, #1
   26bb0:	add	r1, sp, #80	; 0x50
   26bb4:	add	r0, r1, r2, lsl #3
   26bb8:	movw	r1, #9964	; 0x26ec
   26bbc:	movt	r1, #4
   26bc0:	str	r1, [r0, #-72]	; 0xffffffb8
   26bc4:	str	r3, [r0, #-68]	; 0xffffffbc
   26bc8:	str	r2, [sp, #12]
   26bcc:	ldr	r3, [sp, #8]
   26bd0:	sub	r5, ip, r3
   26bd4:	cmp	ip, r5
   26bd8:	ble	26b5c <flatcc_builder_create_struct@@Base+0x88>
   26bdc:	str	r3, [sp]
   26be0:	ldr	r6, [r4, #44]	; 0x2c
   26be4:	mov	r3, r5
   26be8:	ldr	r2, [sp, #12]
   26bec:	add	r1, sp, #16
   26bf0:	ldr	r0, [r4, #36]	; 0x24
   26bf4:	blx	r6
   26bf8:	cmp	r0, #0
   26bfc:	bne	26b78 <flatcc_builder_create_struct@@Base+0xa4>
   26c00:	str	r5, [r4, #136]	; 0x88
   26c04:	mov	r0, r5
   26c08:	add	sp, sp, #80	; 0x50
   26c0c:	ldrd	r4, [sp]
   26c10:	ldr	r6, [sp, #8]
   26c14:	add	sp, sp, #12
   26c18:	pop	{pc}		; (ldr pc, [sp], #4)
   26c1c:	andeq	r2, r4, r4, asr #19
   26c20:	andeq	r2, r4, r8, lsr r9

00026c24 <flatcc_builder_start_buffer@@Base>:
   26c24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26c28:	strd	r6, [sp, #8]
   26c2c:	str	r8, [sp, #16]
   26c30:	str	lr, [sp, #20]
   26c34:	mov	r4, r0
   26c38:	mov	r5, r1
   26c3c:	mov	r7, r2
   26c40:	mov	r6, r3
   26c44:	ldrh	r1, [r0, #128]	; 0x80
   26c48:	bl	25df0 <flatcc_builder_default_alloc@@Base+0x24c>
   26c4c:	cmp	r0, #0
   26c50:	bne	26cf0 <flatcc_builder_start_buffer@@Base+0xcc>
   26c54:	mov	r3, #1
   26c58:	strh	r3, [r4, #128]	; 0x80
   26c5c:	ldr	r3, [r4, #32]
   26c60:	ldrh	r2, [r4, #132]	; 0x84
   26c64:	strh	r2, [r3, #34]	; 0x22
   26c68:	strh	r7, [r4, #132]	; 0x84
   26c6c:	ldr	r3, [r4, #32]
   26c70:	ldrh	r2, [r4, #164]	; 0xa4
   26c74:	strh	r2, [r3, #32]
   26c78:	strh	r6, [r4, #164]	; 0xa4
   26c7c:	ldr	r3, [r4, #32]
   26c80:	ldr	r2, [r4, #144]	; 0x90
   26c84:	str	r2, [r3, #20]
   26c88:	ldr	r3, [r4, #32]
   26c8c:	ldr	r2, [r4, #152]	; 0x98
   26c90:	str	r2, [r3, #28]
   26c94:	ldr	r3, [r4, #136]	; 0x88
   26c98:	str	r3, [r4, #144]	; 0x90
   26c9c:	ldr	r3, [r4, #148]	; 0x94
   26ca0:	add	r2, r3, #1
   26ca4:	str	r2, [r4, #148]	; 0x94
   26ca8:	str	r3, [r4, #152]	; 0x98
   26cac:	ldr	r3, [r4, #32]
   26cb0:	ldr	r2, [r4, #168]	; 0xa8
   26cb4:	str	r2, [r3, #16]
   26cb8:	movw	r3, #9964	; 0x26ec
   26cbc:	movt	r3, #4
   26cc0:	cmp	r5, #0
   26cc4:	moveq	r5, r3
   26cc8:	ldr	r3, [r5]
   26ccc:	str	r3, [r4, #168]	; 0xa8
   26cd0:	ldr	r3, [r4, #32]
   26cd4:	mov	r2, #1
   26cd8:	strh	r2, [r3, #14]
   26cdc:	ldrd	r4, [sp]
   26ce0:	ldrd	r6, [sp, #8]
   26ce4:	ldr	r8, [sp, #16]
   26ce8:	add	sp, sp, #20
   26cec:	pop	{pc}		; (ldr pc, [sp], #4)
   26cf0:	mvn	r0, #0
   26cf4:	b	26cdc <flatcc_builder_start_buffer@@Base+0xb8>

00026cf8 <flatcc_builder_end_buffer@@Base>:
   26cf8:	strd	r4, [sp, #-12]!
   26cfc:	str	lr, [sp, #8]
   26d00:	sub	sp, sp, #12
   26d04:	mov	r4, r0
   26d08:	ldrh	r2, [r0, #164]	; 0xa4
   26d0c:	and	r2, r2, #2
   26d10:	ldr	r0, [r0, #152]	; 0x98
   26d14:	cmp	r0, #0
   26d18:	moveq	r0, r2
   26d1c:	orrne	r0, r2, #1
   26d20:	ldr	r2, [r4, #32]
   26d24:	ldrh	r2, [r2, #14]
   26d28:	cmp	r2, #1
   26d2c:	bne	26d78 <flatcc_builder_end_buffer@@Base+0x80>
   26d30:	ldrh	r2, [r4, #132]	; 0x84
   26d34:	ldrh	r3, [r4, #128]	; 0x80
   26d38:	cmp	r3, r2
   26d3c:	strhcc	r2, [r4, #128]	; 0x80
   26d40:	str	r0, [sp, #4]
   26d44:	ldrh	r3, [r4, #128]	; 0x80
   26d48:	str	r3, [sp]
   26d4c:	mov	r3, r1
   26d50:	add	r1, r4, #168	; 0xa8
   26d54:	mov	r0, r4
   26d58:	bl	26888 <flatcc_builder_create_buffer@@Base>
   26d5c:	subs	r5, r0, #0
   26d60:	bne	26d94 <flatcc_builder_end_buffer@@Base+0x9c>
   26d64:	mov	r0, r5
   26d68:	add	sp, sp, #12
   26d6c:	ldrd	r4, [sp]
   26d70:	add	sp, sp, #8
   26d74:	pop	{pc}		; (ldr pc, [sp], #4)
   26d78:	ldr	r3, [pc, #184]	; 26e38 <flatcc_builder_end_buffer@@Base+0x140>
   26d7c:	movw	r2, #838	; 0x346
   26d80:	movw	r1, #11836	; 0x2e3c
   26d84:	movt	r1, #4
   26d88:	movw	r0, #12032	; 0x2f00
   26d8c:	movt	r0, #4
   26d90:	bl	145f0 <__assert_fail@plt>
   26d94:	ldr	r3, [r4, #32]
   26d98:	ldr	r2, [r3, #20]
   26d9c:	str	r2, [r4, #144]	; 0x90
   26da0:	ldr	r2, [r3, #28]
   26da4:	str	r2, [r4, #152]	; 0x98
   26da8:	ldr	r2, [r3, #16]
   26dac:	str	r2, [r4, #168]	; 0xa8
   26db0:	ldrh	r3, [r3, #32]
   26db4:	strh	r3, [r4, #164]	; 0xa4
   26db8:	ldr	r2, [r4, #20]
   26dbc:	mov	r1, #0
   26dc0:	ldr	r0, [r4, #16]
   26dc4:	bl	1459c <memset@plt>
   26dc8:	ldr	r2, [r4, #32]
   26dcc:	ldr	r3, [r2, #8]
   26dd0:	str	r3, [r4, #20]
   26dd4:	ldr	r0, [r2]
   26dd8:	str	r0, [r4, #28]
   26ddc:	ldr	r1, [r2, #4]
   26de0:	ldr	r3, [r4, #60]	; 0x3c
   26de4:	add	r3, r3, r0
   26de8:	str	r3, [r4, #16]
   26dec:	ldr	r3, [r4, #64]	; 0x40
   26df0:	sub	r3, r3, r0
   26df4:	cmp	r3, r1
   26df8:	movcs	r3, r1
   26dfc:	str	r3, [r4, #24]
   26e00:	str	r1, [r2, #4]
   26e04:	ldrh	r3, [r4, #130]	; 0x82
   26e08:	ldrh	r2, [r4, #128]	; 0x80
   26e0c:	cmp	r2, r3
   26e10:	strhcc	r3, [r4, #128]	; 0x80
   26e14:	ldr	r3, [r4, #32]
   26e18:	ldrh	r2, [r3, #12]
   26e1c:	strh	r2, [r4, #130]	; 0x82
   26e20:	sub	r3, r3, #36	; 0x24
   26e24:	str	r3, [r4, #32]
   26e28:	ldr	r3, [r4, #156]	; 0x9c
   26e2c:	sub	r3, r3, #1
   26e30:	str	r3, [r4, #156]	; 0x9c
   26e34:	b	26d64 <flatcc_builder_end_buffer@@Base+0x6c>
   26e38:	andeq	r2, r4, r4, ror #19

00026e3c <flatcc_builder_start_struct@@Base>:
   26e3c:	strd	r4, [sp, #-16]!
   26e40:	str	r6, [sp, #8]
   26e44:	str	lr, [sp, #12]
   26e48:	mov	r4, r0
   26e4c:	mov	r5, r1
   26e50:	mov	r1, r2
   26e54:	bl	25df0 <flatcc_builder_default_alloc@@Base+0x24c>
   26e58:	cmp	r0, #0
   26e5c:	movne	r0, #0
   26e60:	bne	26ec0 <flatcc_builder_start_struct@@Base+0x84>
   26e64:	ldr	r3, [r4, #32]
   26e68:	mov	r2, #2
   26e6c:	strh	r2, [r3, #14]
   26e70:	ldr	r1, [r4, #28]
   26e74:	ldr	r2, [r4, #60]	; 0x3c
   26e78:	add	r2, r2, r1
   26e7c:	str	r2, [r4, #16]
   26e80:	ldr	r3, [r4, #64]	; 0x40
   26e84:	sub	r3, r3, r1
   26e88:	cmn	r3, #4
   26e8c:	mvnhi	r3, #3
   26e90:	str	r3, [r4, #24]
   26e94:	ldr	r3, [r4, #32]
   26e98:	mvn	r2, #3
   26e9c:	str	r2, [r3, #4]
   26ea0:	ldr	r6, [r4, #20]
   26ea4:	add	r5, r5, r6
   26ea8:	str	r5, [r4, #20]
   26eac:	ldr	r3, [r4, #24]
   26eb0:	cmp	r5, r3
   26eb4:	bcs	26ed0 <flatcc_builder_start_struct@@Base+0x94>
   26eb8:	ldr	r0, [r4, #16]
   26ebc:	add	r0, r0, r6
   26ec0:	ldrd	r4, [sp]
   26ec4:	ldr	r6, [sp, #8]
   26ec8:	add	sp, sp, #12
   26ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   26ed0:	add	r1, r5, #1
   26ed4:	mov	r0, r4
   26ed8:	bl	25b1c <main@@Base+0xd20>
   26edc:	cmp	r0, #0
   26ee0:	movne	r0, #0
   26ee4:	beq	26eb8 <flatcc_builder_start_struct@@Base+0x7c>
   26ee8:	b	26ec0 <flatcc_builder_start_struct@@Base+0x84>

00026eec <flatcc_builder_struct_edit@@Base>:
   26eec:	ldr	r0, [r0, #16]
   26ef0:	bx	lr

00026ef4 <flatcc_builder_end_struct@@Base>:
   26ef4:	strd	r4, [sp, #-16]!
   26ef8:	str	r6, [sp, #8]
   26efc:	str	lr, [sp, #12]
   26f00:	ldr	r3, [r0, #32]
   26f04:	ldrh	r3, [r3, #14]
   26f08:	cmp	r3, #2
   26f0c:	bne	26f40 <flatcc_builder_end_struct@@Base+0x4c>
   26f10:	mov	r4, r0
   26f14:	ldrh	r3, [r0, #130]	; 0x82
   26f18:	ldr	r2, [r0, #20]
   26f1c:	ldr	r1, [r0, #16]
   26f20:	bl	26ad4 <flatcc_builder_create_struct@@Base>
   26f24:	subs	r5, r0, #0
   26f28:	bne	26f5c <flatcc_builder_end_struct@@Base+0x68>
   26f2c:	mov	r0, r5
   26f30:	ldrd	r4, [sp]
   26f34:	ldr	r6, [sp, #8]
   26f38:	add	sp, sp, #12
   26f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   26f40:	ldr	r3, [pc, #148]	; 26fdc <flatcc_builder_end_struct@@Base+0xe8>
   26f44:	mov	r2, #872	; 0x368
   26f48:	movw	r1, #11836	; 0x2e3c
   26f4c:	movt	r1, #4
   26f50:	movw	r0, #12076	; 0x2f2c
   26f54:	movt	r0, #4
   26f58:	bl	145f0 <__assert_fail@plt>
   26f5c:	ldr	r2, [r4, #20]
   26f60:	mov	r1, #0
   26f64:	ldr	r0, [r4, #16]
   26f68:	bl	1459c <memset@plt>
   26f6c:	ldr	r2, [r4, #32]
   26f70:	ldr	r3, [r2, #8]
   26f74:	str	r3, [r4, #20]
   26f78:	ldr	r0, [r2]
   26f7c:	str	r0, [r4, #28]
   26f80:	ldr	r1, [r2, #4]
   26f84:	ldr	r3, [r4, #60]	; 0x3c
   26f88:	add	r3, r3, r0
   26f8c:	str	r3, [r4, #16]
   26f90:	ldr	r3, [r4, #64]	; 0x40
   26f94:	sub	r3, r3, r0
   26f98:	cmp	r3, r1
   26f9c:	movcs	r3, r1
   26fa0:	str	r3, [r4, #24]
   26fa4:	str	r1, [r2, #4]
   26fa8:	ldrh	r3, [r4, #130]	; 0x82
   26fac:	ldrh	r2, [r4, #128]	; 0x80
   26fb0:	cmp	r2, r3
   26fb4:	strhcc	r3, [r4, #128]	; 0x80
   26fb8:	ldr	r3, [r4, #32]
   26fbc:	ldrh	r2, [r3, #12]
   26fc0:	strh	r2, [r4, #130]	; 0x82
   26fc4:	sub	r3, r3, #36	; 0x24
   26fc8:	str	r3, [r4, #32]
   26fcc:	ldr	r3, [r4, #156]	; 0x9c
   26fd0:	sub	r3, r3, #1
   26fd4:	str	r3, [r4, #156]	; 0x9c
   26fd8:	b	26f2c <flatcc_builder_end_struct@@Base+0x38>
   26fdc:	andeq	r2, r4, r0, lsl #20

00026fe0 <flatcc_builder_extend_vector@@Base>:
   26fe0:	strd	r4, [sp, #-16]!
   26fe4:	str	r6, [sp, #8]
   26fe8:	str	lr, [sp, #12]
   26fec:	mov	r4, r0
   26ff0:	ldr	r2, [r0, #32]
   26ff4:	ldr	r3, [r2, #20]
   26ff8:	add	r0, r1, r3
   26ffc:	ldr	ip, [r2, #24]
   27000:	cmp	r3, r0
   27004:	movls	r3, #0
   27008:	movhi	r3, #1
   2700c:	cmp	ip, r0
   27010:	orrcc	r3, r3, #1
   27014:	cmp	r3, #0
   27018:	bne	27058 <flatcc_builder_extend_vector@@Base+0x78>
   2701c:	str	r0, [r2, #20]
   27020:	ldr	r5, [r4, #20]
   27024:	ldr	r3, [r4, #32]
   27028:	ldr	r3, [r3, #16]
   2702c:	mla	r1, r3, r1, r5
   27030:	str	r1, [r4, #20]
   27034:	ldr	r3, [r4, #24]
   27038:	cmp	r1, r3
   2703c:	bcs	27074 <flatcc_builder_extend_vector@@Base+0x94>
   27040:	ldr	r0, [r4, #16]
   27044:	add	r0, r0, r5
   27048:	ldrd	r4, [sp]
   2704c:	ldr	r6, [sp, #8]
   27050:	add	sp, sp, #12
   27054:	pop	{pc}		; (ldr pc, [sp], #4)
   27058:	ldr	r3, [pc, #52]	; 27094 <flatcc_builder_extend_vector@@Base+0xb4>
   2705c:	mov	r2, #892	; 0x37c
   27060:	movw	r1, #11836	; 0x2e3c
   27064:	movt	r1, #4
   27068:	movw	r0, #12120	; 0x2f58
   2706c:	movt	r0, #4
   27070:	bl	145f0 <__assert_fail@plt>
   27074:	mvn	r2, #3
   27078:	add	r1, r1, #1
   2707c:	mov	r0, r4
   27080:	bl	25b1c <main@@Base+0xd20>
   27084:	cmp	r0, #0
   27088:	movne	r0, #0
   2708c:	beq	27040 <flatcc_builder_extend_vector@@Base+0x60>
   27090:	b	27048 <flatcc_builder_extend_vector@@Base+0x68>
   27094:	andeq	r2, r4, ip, lsl sl

00027098 <flatcc_builder_vector_push@@Base>:
   27098:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2709c:	strd	r6, [sp, #8]
   270a0:	str	r8, [sp, #16]
   270a4:	str	lr, [sp, #20]
   270a8:	ldr	r3, [r0, #32]
   270ac:	ldrh	r2, [r3, #14]
   270b0:	cmp	r2, #4
   270b4:	bne	2712c <flatcc_builder_vector_push@@Base+0x94>
   270b8:	mov	r4, r0
   270bc:	mov	r6, r1
   270c0:	ldr	r2, [r3, #20]
   270c4:	ldr	r1, [r3, #24]
   270c8:	cmp	r2, r1
   270cc:	bhi	27148 <flatcc_builder_vector_push@@Base+0xb0>
   270d0:	add	r2, r2, #1
   270d4:	str	r2, [r3, #20]
   270d8:	ldr	r3, [r0, #32]
   270dc:	ldr	r7, [r3, #16]
   270e0:	ldr	r5, [r0, #20]
   270e4:	add	r1, r7, r5
   270e8:	str	r1, [r0, #20]
   270ec:	ldr	r3, [r0, #24]
   270f0:	cmp	r1, r3
   270f4:	bcs	27164 <flatcc_builder_vector_push@@Base+0xcc>
   270f8:	ldr	r4, [r4, #16]
   270fc:	adds	r4, r4, r5
   27100:	beq	27114 <flatcc_builder_vector_push@@Base+0x7c>
   27104:	mov	r2, r7
   27108:	mov	r1, r6
   2710c:	mov	r0, r4
   27110:	bl	14524 <memcpy@plt>
   27114:	mov	r0, r4
   27118:	ldrd	r4, [sp]
   2711c:	ldrd	r6, [sp, #8]
   27120:	ldr	r8, [sp, #16]
   27124:	add	sp, sp, #20
   27128:	pop	{pc}		; (ldr pc, [sp], #4)
   2712c:	ldr	r3, [pc, #76]	; 27180 <flatcc_builder_vector_push@@Base+0xe8>
   27130:	movw	r2, #907	; 0x38b
   27134:	movw	r1, #11836	; 0x2e3c
   27138:	movt	r1, #4
   2713c:	movw	r0, #12148	; 0x2f74
   27140:	movt	r0, #4
   27144:	bl	145f0 <__assert_fail@plt>
   27148:	ldr	r3, [pc, #48]	; 27180 <flatcc_builder_vector_push@@Base+0xe8>
   2714c:	mov	r2, #908	; 0x38c
   27150:	movw	r1, #11836	; 0x2e3c
   27154:	movt	r1, #4
   27158:	movw	r0, #12192	; 0x2fa0
   2715c:	movt	r0, #4
   27160:	bl	145f0 <__assert_fail@plt>
   27164:	mvn	r2, #3
   27168:	add	r1, r1, #1
   2716c:	bl	25b1c <main@@Base+0xd20>
   27170:	cmp	r0, #0
   27174:	movne	r4, #0
   27178:	beq	270f8 <flatcc_builder_vector_push@@Base+0x60>
   2717c:	b	27114 <flatcc_builder_vector_push@@Base+0x7c>
   27180:	andeq	r2, r4, r0, lsr sl

00027184 <flatcc_builder_append_vector@@Base>:
   27184:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27188:	strd	r6, [sp, #8]
   2718c:	str	r8, [sp, #16]
   27190:	str	lr, [sp, #20]
   27194:	mov	r6, r1
   27198:	ldr	r1, [r0, #32]
   2719c:	ldrh	r3, [r1, #14]
   271a0:	cmp	r3, #4
   271a4:	bne	27230 <flatcc_builder_append_vector@@Base+0xac>
   271a8:	mov	r4, r0
   271ac:	ldr	r3, [r1, #20]
   271b0:	add	r0, r2, r3
   271b4:	ldr	ip, [r1, #24]
   271b8:	cmp	r3, r0
   271bc:	movls	r3, #0
   271c0:	movhi	r3, #1
   271c4:	cmp	ip, r0
   271c8:	orrcc	r3, r3, #1
   271cc:	cmp	r3, #0
   271d0:	bne	2724c <flatcc_builder_append_vector@@Base+0xc8>
   271d4:	str	r0, [r1, #20]
   271d8:	ldr	r3, [r4, #32]
   271dc:	ldr	r5, [r3, #16]
   271e0:	mul	r5, r5, r2
   271e4:	ldr	r7, [r4, #20]
   271e8:	add	r1, r5, r7
   271ec:	str	r1, [r4, #20]
   271f0:	ldr	r3, [r4, #24]
   271f4:	cmp	r1, r3
   271f8:	bcs	27268 <flatcc_builder_append_vector@@Base+0xe4>
   271fc:	ldr	r4, [r4, #16]
   27200:	adds	r4, r4, r7
   27204:	beq	27218 <flatcc_builder_append_vector@@Base+0x94>
   27208:	mov	r2, r5
   2720c:	mov	r1, r6
   27210:	mov	r0, r4
   27214:	bl	14524 <memcpy@plt>
   27218:	mov	r0, r4
   2721c:	ldrd	r4, [sp]
   27220:	ldrd	r6, [sp, #8]
   27224:	ldr	r8, [sp, #16]
   27228:	add	sp, sp, #20
   2722c:	pop	{pc}		; (ldr pc, [sp], #4)
   27230:	ldr	r3, [pc, #80]	; 27288 <flatcc_builder_append_vector@@Base+0x104>
   27234:	movw	r2, #915	; 0x393
   27238:	movw	r1, #11836	; 0x2e3c
   2723c:	movt	r1, #4
   27240:	movw	r0, #12148	; 0x2f74
   27244:	movt	r0, #4
   27248:	bl	145f0 <__assert_fail@plt>
   2724c:	ldr	r3, [pc, #56]	; 2728c <flatcc_builder_append_vector@@Base+0x108>
   27250:	mov	r2, #892	; 0x37c
   27254:	movw	r1, #11836	; 0x2e3c
   27258:	movt	r1, #4
   2725c:	movw	r0, #12120	; 0x2f58
   27260:	movt	r0, #4
   27264:	bl	145f0 <__assert_fail@plt>
   27268:	mvn	r2, #3
   2726c:	add	r1, r1, #1
   27270:	mov	r0, r4
   27274:	bl	25b1c <main@@Base+0xd20>
   27278:	cmp	r0, #0
   2727c:	movne	r4, #0
   27280:	beq	271fc <flatcc_builder_append_vector@@Base+0x78>
   27284:	b	27218 <flatcc_builder_append_vector@@Base+0x94>
   27288:	andeq	r2, r4, ip, asr #20
   2728c:	andeq	r2, r4, ip, lsl sl

00027290 <flatcc_builder_extend_offset_vector@@Base>:
   27290:	strd	r4, [sp, #-16]!
   27294:	str	r6, [sp, #8]
   27298:	str	lr, [sp, #12]
   2729c:	mov	r4, r0
   272a0:	ldr	r2, [r0, #32]
   272a4:	ldr	r3, [r2, #20]
   272a8:	adds	r3, r1, r3
   272ac:	movcs	ip, #1
   272b0:	movcc	ip, #0
   272b4:	cmn	r3, #-1073741823	; 0xc0000001
   272b8:	movls	r0, #0
   272bc:	movhi	r0, #1
   272c0:	orrs	r0, ip, r0
   272c4:	bne	272fc <flatcc_builder_extend_offset_vector@@Base+0x6c>
   272c8:	str	r3, [r2, #20]
   272cc:	ldr	r5, [r4, #20]
   272d0:	add	r1, r5, r1, lsl #2
   272d4:	str	r1, [r4, #20]
   272d8:	ldr	r3, [r4, #24]
   272dc:	cmp	r1, r3
   272e0:	bcs	27318 <flatcc_builder_extend_offset_vector@@Base+0x88>
   272e4:	ldr	r0, [r4, #16]
   272e8:	add	r0, r0, r5
   272ec:	ldrd	r4, [sp]
   272f0:	ldr	r6, [sp, #8]
   272f4:	add	sp, sp, #12
   272f8:	pop	{pc}		; (ldr pc, [sp], #4)
   272fc:	ldr	r3, [pc, #52]	; 27338 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   27300:	mov	r2, #892	; 0x37c
   27304:	movw	r1, #11836	; 0x2e3c
   27308:	movt	r1, #4
   2730c:	movw	r0, #12120	; 0x2f58
   27310:	movt	r0, #4
   27314:	bl	145f0 <__assert_fail@plt>
   27318:	mvn	r2, #3
   2731c:	add	r1, r1, #1
   27320:	mov	r0, r4
   27324:	bl	25b1c <main@@Base+0xd20>
   27328:	cmp	r0, #0
   2732c:	movne	r0, #0
   27330:	beq	272e4 <flatcc_builder_extend_offset_vector@@Base+0x54>
   27334:	b	272ec <flatcc_builder_extend_offset_vector@@Base+0x5c>
   27338:	andeq	r2, r4, ip, lsl sl

0002733c <flatcc_builder_offset_vector_push@@Base>:
   2733c:	strd	r4, [sp, #-16]!
   27340:	str	r6, [sp, #8]
   27344:	str	lr, [sp, #12]
   27348:	ldr	r2, [r0, #32]
   2734c:	ldrh	r3, [r2, #14]
   27350:	cmp	r3, #5
   27354:	bne	273ac <flatcc_builder_offset_vector_push@@Base+0x70>
   27358:	mov	r4, r0
   2735c:	mov	r6, r1
   27360:	ldr	r3, [r2, #20]
   27364:	cmn	r3, #-1073741823	; 0xc0000001
   27368:	moveq	r0, #0
   2736c:	beq	2739c <flatcc_builder_offset_vector_push@@Base+0x60>
   27370:	add	r3, r3, #1
   27374:	str	r3, [r2, #20]
   27378:	ldr	r5, [r4, #20]
   2737c:	add	r3, r5, #4
   27380:	str	r3, [r4, #20]
   27384:	ldr	r2, [r4, #24]
   27388:	cmp	r3, r2
   2738c:	bcs	273c8 <flatcc_builder_offset_vector_push@@Base+0x8c>
   27390:	ldr	r3, [r4, #16]
   27394:	adds	r0, r3, r5
   27398:	strne	r6, [r3, r5]
   2739c:	ldrd	r4, [sp]
   273a0:	ldr	r6, [sp, #8]
   273a4:	add	sp, sp, #12
   273a8:	pop	{pc}		; (ldr pc, [sp], #4)
   273ac:	ldr	r3, [pc, #52]	; 273e8 <flatcc_builder_offset_vector_push@@Base+0xac>
   273b0:	movw	r2, #934	; 0x3a6
   273b4:	movw	r1, #11836	; 0x2e3c
   273b8:	movt	r1, #4
   273bc:	movw	r0, #12256	; 0x2fe0
   273c0:	movt	r0, #4
   273c4:	bl	145f0 <__assert_fail@plt>
   273c8:	mvn	r2, #3
   273cc:	add	r1, r5, #5
   273d0:	mov	r0, r4
   273d4:	bl	25b1c <main@@Base+0xd20>
   273d8:	cmp	r0, #0
   273dc:	movne	r0, #0
   273e0:	beq	27390 <flatcc_builder_offset_vector_push@@Base+0x54>
   273e4:	b	2739c <flatcc_builder_offset_vector_push@@Base+0x60>
   273e8:	andeq	r2, r4, ip, ror #20

000273ec <flatcc_builder_append_offset_vector@@Base>:
   273ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   273f0:	strd	r6, [sp, #8]
   273f4:	str	r8, [sp, #16]
   273f8:	str	lr, [sp, #20]
   273fc:	mov	r6, r1
   27400:	ldr	r1, [r0, #32]
   27404:	ldrh	r3, [r1, #14]
   27408:	cmp	r3, #5
   2740c:	bne	2748c <flatcc_builder_append_offset_vector@@Base+0xa0>
   27410:	mov	r5, r0
   27414:	ldr	r3, [r1, #20]
   27418:	adds	r3, r2, r3
   2741c:	movcs	ip, #1
   27420:	movcc	ip, #0
   27424:	cmn	r3, #-1073741823	; 0xc0000001
   27428:	movls	r0, #0
   2742c:	movhi	r0, #1
   27430:	orrs	r0, ip, r0
   27434:	bne	274a8 <flatcc_builder_append_offset_vector@@Base+0xbc>
   27438:	str	r3, [r1, #20]
   2743c:	lsl	r4, r2, #2
   27440:	ldr	r7, [r5, #20]
   27444:	add	r1, r4, r7
   27448:	str	r1, [r5, #20]
   2744c:	ldr	r3, [r5, #24]
   27450:	cmp	r1, r3
   27454:	bcs	274c4 <flatcc_builder_append_offset_vector@@Base+0xd8>
   27458:	ldr	r5, [r5, #16]
   2745c:	adds	r5, r5, r7
   27460:	beq	27474 <flatcc_builder_append_offset_vector@@Base+0x88>
   27464:	mov	r2, r4
   27468:	mov	r1, r6
   2746c:	mov	r0, r5
   27470:	bl	14524 <memcpy@plt>
   27474:	mov	r0, r5
   27478:	ldrd	r4, [sp]
   2747c:	ldrd	r6, [sp, #8]
   27480:	ldr	r8, [sp, #16]
   27484:	add	sp, sp, #20
   27488:	pop	{pc}		; (ldr pc, [sp], #4)
   2748c:	ldr	r3, [pc, #80]	; 274e4 <flatcc_builder_append_offset_vector@@Base+0xf8>
   27490:	mov	r2, #948	; 0x3b4
   27494:	movw	r1, #11836	; 0x2e3c
   27498:	movt	r1, #4
   2749c:	movw	r0, #12256	; 0x2fe0
   274a0:	movt	r0, #4
   274a4:	bl	145f0 <__assert_fail@plt>
   274a8:	ldr	r3, [pc, #56]	; 274e8 <flatcc_builder_append_offset_vector@@Base+0xfc>
   274ac:	mov	r2, #892	; 0x37c
   274b0:	movw	r1, #11836	; 0x2e3c
   274b4:	movt	r1, #4
   274b8:	movw	r0, #12120	; 0x2f58
   274bc:	movt	r0, #4
   274c0:	bl	145f0 <__assert_fail@plt>
   274c4:	mvn	r2, #3
   274c8:	add	r1, r1, #1
   274cc:	mov	r0, r5
   274d0:	bl	25b1c <main@@Base+0xd20>
   274d4:	cmp	r0, #0
   274d8:	movne	r5, #0
   274dc:	beq	27458 <flatcc_builder_append_offset_vector@@Base+0x6c>
   274e0:	b	27474 <flatcc_builder_append_offset_vector@@Base+0x88>
   274e4:	muleq	r4, r0, sl
   274e8:	andeq	r2, r4, ip, lsl sl

000274ec <flatcc_builder_extend_string@@Base>:
   274ec:	strd	r4, [sp, #-16]!
   274f0:	str	r6, [sp, #8]
   274f4:	str	lr, [sp, #12]
   274f8:	ldr	r2, [r0, #32]
   274fc:	ldrh	r3, [r2, #14]
   27500:	cmp	r3, #6
   27504:	bne	2754c <flatcc_builder_extend_string@@Base+0x60>
   27508:	mov	r4, r0
   2750c:	ldr	r3, [r2, #20]
   27510:	adds	r3, r1, r3
   27514:	bcs	27568 <flatcc_builder_extend_string@@Base+0x7c>
   27518:	str	r3, [r2, #20]
   2751c:	ldr	r5, [r0, #20]
   27520:	add	r1, r1, r5
   27524:	str	r1, [r0, #20]
   27528:	ldr	r3, [r0, #24]
   2752c:	cmp	r1, r3
   27530:	bcs	27584 <flatcc_builder_extend_string@@Base+0x98>
   27534:	ldr	r0, [r4, #16]
   27538:	add	r0, r0, r5
   2753c:	ldrd	r4, [sp]
   27540:	ldr	r6, [sp, #8]
   27544:	add	sp, sp, #12
   27548:	pop	{pc}		; (ldr pc, [sp], #4)
   2754c:	ldr	r3, [pc, #76]	; 275a0 <flatcc_builder_extend_string@@Base+0xb4>
   27550:	movw	r2, #957	; 0x3bd
   27554:	movw	r1, #11836	; 0x2e3c
   27558:	movt	r1, #4
   2755c:	movw	r0, #12308	; 0x3014
   27560:	movt	r0, #4
   27564:	bl	145f0 <__assert_fail@plt>
   27568:	ldr	r3, [pc, #52]	; 275a4 <flatcc_builder_extend_string@@Base+0xb8>
   2756c:	mov	r2, #892	; 0x37c
   27570:	movw	r1, #11836	; 0x2e3c
   27574:	movt	r1, #4
   27578:	movw	r0, #12120	; 0x2f58
   2757c:	movt	r0, #4
   27580:	bl	145f0 <__assert_fail@plt>
   27584:	mvn	r2, #3
   27588:	add	r1, r1, #1
   2758c:	bl	25b1c <main@@Base+0xd20>
   27590:	cmp	r0, #0
   27594:	movne	r0, #0
   27598:	beq	27534 <flatcc_builder_extend_string@@Base+0x48>
   2759c:	b	2753c <flatcc_builder_extend_string@@Base+0x50>
   275a0:			; <UNDEFINED> instruction: 0x00042ab4
   275a4:	andeq	r2, r4, ip, lsl sl

000275a8 <flatcc_builder_append_string@@Base>:
   275a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   275ac:	strd	r6, [sp, #8]
   275b0:	str	r8, [sp, #16]
   275b4:	str	lr, [sp, #20]
   275b8:	mov	r5, r2
   275bc:	ldr	r2, [r0, #32]
   275c0:	ldrh	r3, [r2, #14]
   275c4:	cmp	r3, #6
   275c8:	bne	27630 <flatcc_builder_append_string@@Base+0x88>
   275cc:	mov	r4, r0
   275d0:	mov	r6, r1
   275d4:	ldr	r3, [r2, #20]
   275d8:	adds	r3, r5, r3
   275dc:	bcs	2764c <flatcc_builder_append_string@@Base+0xa4>
   275e0:	str	r3, [r2, #20]
   275e4:	ldr	r7, [r0, #20]
   275e8:	add	r1, r5, r7
   275ec:	str	r1, [r0, #20]
   275f0:	ldr	r3, [r0, #24]
   275f4:	cmp	r1, r3
   275f8:	bcs	27668 <flatcc_builder_append_string@@Base+0xc0>
   275fc:	ldr	r4, [r4, #16]
   27600:	adds	r4, r4, r7
   27604:	beq	27618 <flatcc_builder_append_string@@Base+0x70>
   27608:	mov	r2, r5
   2760c:	mov	r1, r6
   27610:	mov	r0, r4
   27614:	bl	14524 <memcpy@plt>
   27618:	mov	r0, r4
   2761c:	ldrd	r4, [sp]
   27620:	ldrd	r6, [sp, #8]
   27624:	ldr	r8, [sp, #16]
   27628:	add	sp, sp, #20
   2762c:	pop	{pc}		; (ldr pc, [sp], #4)
   27630:	ldr	r3, [pc, #76]	; 27684 <flatcc_builder_append_string@@Base+0xdc>
   27634:	movw	r2, #966	; 0x3c6
   27638:	movw	r1, #11836	; 0x2e3c
   2763c:	movt	r1, #4
   27640:	movw	r0, #12308	; 0x3014
   27644:	movt	r0, #4
   27648:	bl	145f0 <__assert_fail@plt>
   2764c:	ldr	r3, [pc, #52]	; 27688 <flatcc_builder_append_string@@Base+0xe0>
   27650:	mov	r2, #892	; 0x37c
   27654:	movw	r1, #11836	; 0x2e3c
   27658:	movt	r1, #4
   2765c:	movw	r0, #12120	; 0x2f58
   27660:	movt	r0, #4
   27664:	bl	145f0 <__assert_fail@plt>
   27668:	mvn	r2, #3
   2766c:	add	r1, r1, #1
   27670:	bl	25b1c <main@@Base+0xd20>
   27674:	cmp	r0, #0
   27678:	movne	r4, #0
   2767c:	beq	275fc <flatcc_builder_append_string@@Base+0x54>
   27680:	b	27618 <flatcc_builder_append_string@@Base+0x70>
   27684:	ldrdeq	r2, [r4], -r4
   27688:	andeq	r2, r4, ip, lsl sl

0002768c <flatcc_builder_append_string_str@@Base>:
   2768c:	strd	r4, [sp, #-16]!
   27690:	str	r6, [sp, #8]
   27694:	str	lr, [sp, #12]
   27698:	mov	r5, r0
   2769c:	mov	r4, r1
   276a0:	mov	r0, r1
   276a4:	bl	14578 <strlen@plt>
   276a8:	mov	r2, r0
   276ac:	mov	r1, r4
   276b0:	mov	r0, r5
   276b4:	bl	275a8 <flatcc_builder_append_string@@Base>
   276b8:	ldrd	r4, [sp]
   276bc:	ldr	r6, [sp, #8]
   276c0:	add	sp, sp, #12
   276c4:	pop	{pc}		; (ldr pc, [sp], #4)

000276c8 <flatcc_builder_append_string_strn@@Base>:
   276c8:	strd	r4, [sp, #-16]!
   276cc:	str	r6, [sp, #8]
   276d0:	str	lr, [sp, #12]
   276d4:	mov	r6, r0
   276d8:	mov	r4, r1
   276dc:	mov	r5, r2
   276e0:	mov	r1, #0
   276e4:	mov	r0, r4
   276e8:	bl	145c0 <memchr@plt>
   276ec:	cmp	r0, #0
   276f0:	subne	r5, r0, r4
   276f4:	mov	r2, r5
   276f8:	mov	r1, r4
   276fc:	mov	r0, r6
   27700:	bl	275a8 <flatcc_builder_append_string@@Base>
   27704:	ldrd	r4, [sp]
   27708:	ldr	r6, [sp, #8]
   2770c:	add	sp, sp, #12
   27710:	pop	{pc}		; (ldr pc, [sp], #4)

00027714 <flatcc_builder_truncate_vector@@Base>:
   27714:	str	r4, [sp, #-8]!
   27718:	str	lr, [sp, #4]
   2771c:	ldr	ip, [r0, #32]
   27720:	ldrh	r3, [ip, #14]
   27724:	cmp	r3, #4
   27728:	bne	27778 <flatcc_builder_truncate_vector@@Base+0x64>
   2772c:	ldr	r3, [ip, #20]
   27730:	cmp	r3, r1
   27734:	bcc	27794 <flatcc_builder_truncate_vector@@Base+0x80>
   27738:	sub	r3, r3, r1
   2773c:	str	r3, [ip, #20]
   27740:	ldr	r3, [r0, #32]
   27744:	ldr	r2, [r3, #16]
   27748:	mul	r2, r2, r1
   2774c:	ldr	r3, [r0, #20]
   27750:	sub	r3, r3, r2
   27754:	str	r3, [r0, #20]
   27758:	ldr	r0, [r0, #16]
   2775c:	mov	r1, #0
   27760:	add	r0, r0, r3
   27764:	bl	1459c <memset@plt>
   27768:	mov	r0, #0
   2776c:	ldr	r4, [sp]
   27770:	add	sp, sp, #4
   27774:	pop	{pc}		; (ldr pc, [sp], #4)
   27778:	ldr	r3, [pc, #48]	; 277b0 <flatcc_builder_truncate_vector@@Base+0x9c>
   2777c:	movw	r2, #985	; 0x3d9
   27780:	movw	r1, #11836	; 0x2e3c
   27784:	movt	r1, #4
   27788:	movw	r0, #12148	; 0x2f74
   2778c:	movt	r0, #4
   27790:	bl	145f0 <__assert_fail@plt>
   27794:	ldr	r3, [pc, #20]	; 277b0 <flatcc_builder_truncate_vector@@Base+0x9c>
   27798:	movw	r2, #986	; 0x3da
   2779c:	movw	r1, #11836	; 0x2e3c
   277a0:	movt	r1, #4
   277a4:	movw	r0, #12352	; 0x3040
   277a8:	movt	r0, #4
   277ac:	bl	145f0 <__assert_fail@plt>
   277b0:	strdeq	r2, [r4], -r4

000277b4 <flatcc_builder_truncate_offset_vector@@Base>:
   277b4:	str	r4, [sp, #-8]!
   277b8:	str	lr, [sp, #4]
   277bc:	ldr	ip, [r0, #32]
   277c0:	ldrh	r3, [ip, #14]
   277c4:	cmp	r3, #5
   277c8:	bne	27818 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   277cc:	ldr	r3, [ip, #20]
   277d0:	cmp	r3, r1
   277d4:	bcc	27834 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   277d8:	sub	r3, r3, r1
   277dc:	str	r3, [ip, #20]
   277e0:	ldr	r3, [r0, #32]
   277e4:	ldr	r2, [r3, #16]
   277e8:	mul	r2, r2, r1
   277ec:	ldr	r3, [r0, #20]
   277f0:	sub	r3, r3, r2
   277f4:	str	r3, [r0, #20]
   277f8:	ldr	r0, [r0, #16]
   277fc:	mov	r1, #0
   27800:	add	r0, r0, r3
   27804:	bl	1459c <memset@plt>
   27808:	mov	r0, #0
   2780c:	ldr	r4, [sp]
   27810:	add	sp, sp, #4
   27814:	pop	{pc}		; (ldr pc, [sp], #4)
   27818:	ldr	r3, [pc, #48]	; 27850 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   2781c:	movw	r2, #994	; 0x3e2
   27820:	movw	r1, #11836	; 0x2e3c
   27824:	movt	r1, #4
   27828:	movw	r0, #12256	; 0x2fe0
   2782c:	movt	r0, #4
   27830:	bl	145f0 <__assert_fail@plt>
   27834:	ldr	r3, [pc, #20]	; 27850 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   27838:	movw	r2, #995	; 0x3e3
   2783c:	movw	r1, #11836	; 0x2e3c
   27840:	movt	r1, #4
   27844:	movw	r0, #12388	; 0x3064
   27848:	movt	r0, #4
   2784c:	bl	145f0 <__assert_fail@plt>
   27850:	andeq	r2, r4, r4, lsl fp

00027854 <flatcc_builder_truncate_string@@Base>:
   27854:	str	r4, [sp, #-8]!
   27858:	str	lr, [sp, #4]
   2785c:	ldr	r2, [r0, #32]
   27860:	ldrh	r3, [r2, #14]
   27864:	cmp	r3, #6
   27868:	bne	278b0 <flatcc_builder_truncate_string@@Base+0x5c>
   2786c:	ldr	r3, [r2, #20]
   27870:	cmp	r3, r1
   27874:	bcc	278cc <flatcc_builder_truncate_string@@Base+0x78>
   27878:	sub	r3, r3, r1
   2787c:	str	r3, [r2, #20]
   27880:	ldr	r3, [r0, #20]
   27884:	sub	r3, r3, r1
   27888:	str	r3, [r0, #20]
   2788c:	ldr	r0, [r0, #16]
   27890:	mov	r2, r1
   27894:	mov	r1, #0
   27898:	add	r0, r0, r3
   2789c:	bl	1459c <memset@plt>
   278a0:	mov	r0, #0
   278a4:	ldr	r4, [sp]
   278a8:	add	sp, sp, #4
   278ac:	pop	{pc}		; (ldr pc, [sp], #4)
   278b0:	ldr	r3, [pc, #48]	; 278e8 <flatcc_builder_truncate_string@@Base+0x94>
   278b4:	movw	r2, #1003	; 0x3eb
   278b8:	movw	r1, #11836	; 0x2e3c
   278bc:	movt	r1, #4
   278c0:	movw	r0, #12308	; 0x3014
   278c4:	movt	r0, #4
   278c8:	bl	145f0 <__assert_fail@plt>
   278cc:	ldr	r3, [pc, #20]	; 278e8 <flatcc_builder_truncate_string@@Base+0x94>
   278d0:	mov	r2, #1004	; 0x3ec
   278d4:	movw	r1, #11836	; 0x2e3c
   278d8:	movt	r1, #4
   278dc:	movw	r0, #12448	; 0x30a0
   278e0:	movt	r0, #4
   278e4:	bl	145f0 <__assert_fail@plt>
   278e8:	andeq	r2, r4, ip, lsr fp

000278ec <flatcc_builder_start_vector@@Base>:
   278ec:	strd	r4, [sp, #-16]!
   278f0:	str	r6, [sp, #8]
   278f4:	str	lr, [sp, #12]
   278f8:	mov	r4, r0
   278fc:	mov	r6, r1
   27900:	mov	r5, r3
   27904:	cmp	r2, #4
   27908:	movcs	r1, r2
   2790c:	movcc	r1, #4
   27910:	bl	25df0 <flatcc_builder_default_alloc@@Base+0x24c>
   27914:	cmp	r0, #0
   27918:	bne	27984 <flatcc_builder_start_vector@@Base+0x98>
   2791c:	ldr	r3, [r4, #32]
   27920:	str	r6, [r3, #16]
   27924:	ldr	r3, [r4, #32]
   27928:	mov	r2, #0
   2792c:	str	r2, [r3, #20]
   27930:	ldr	r3, [r4, #32]
   27934:	str	r5, [r3, #24]
   27938:	ldr	r3, [r4, #32]
   2793c:	mov	r2, #4
   27940:	strh	r2, [r3, #14]
   27944:	ldr	r1, [r4, #28]
   27948:	ldr	r2, [r4, #60]	; 0x3c
   2794c:	add	r2, r2, r1
   27950:	str	r2, [r4, #16]
   27954:	ldr	r3, [r4, #64]	; 0x40
   27958:	sub	r3, r3, r1
   2795c:	cmn	r3, #4
   27960:	mvnhi	r3, #3
   27964:	str	r3, [r4, #24]
   27968:	ldr	r3, [r4, #32]
   2796c:	mvn	r2, #3
   27970:	str	r2, [r3, #4]
   27974:	ldrd	r4, [sp]
   27978:	ldr	r6, [sp, #8]
   2797c:	add	sp, sp, #12
   27980:	pop	{pc}		; (ldr pc, [sp], #4)
   27984:	mvn	r0, #0
   27988:	b	27974 <flatcc_builder_start_vector@@Base+0x88>

0002798c <flatcc_builder_start_offset_vector@@Base>:
   2798c:	str	r4, [sp, #-8]!
   27990:	str	lr, [sp, #4]
   27994:	mov	r4, r0
   27998:	mov	r1, #4
   2799c:	bl	25df0 <flatcc_builder_default_alloc@@Base+0x24c>
   279a0:	cmp	r0, #0
   279a4:	bne	27a08 <flatcc_builder_start_offset_vector@@Base+0x7c>
   279a8:	ldr	r3, [r4, #32]
   279ac:	mov	r2, #4
   279b0:	str	r2, [r3, #16]
   279b4:	ldr	r3, [r4, #32]
   279b8:	mov	r2, #0
   279bc:	str	r2, [r3, #20]
   279c0:	ldr	r3, [r4, #32]
   279c4:	mov	r2, #5
   279c8:	strh	r2, [r3, #14]
   279cc:	ldr	r1, [r4, #28]
   279d0:	ldr	r2, [r4, #60]	; 0x3c
   279d4:	add	r2, r2, r1
   279d8:	str	r2, [r4, #16]
   279dc:	ldr	r3, [r4, #64]	; 0x40
   279e0:	sub	r3, r3, r1
   279e4:	cmn	r3, #4
   279e8:	mvnhi	r3, #3
   279ec:	str	r3, [r4, #24]
   279f0:	ldr	r3, [r4, #32]
   279f4:	mvn	r2, #3
   279f8:	str	r2, [r3, #4]
   279fc:	ldr	r4, [sp]
   27a00:	add	sp, sp, #4
   27a04:	pop	{pc}		; (ldr pc, [sp], #4)
   27a08:	mvn	r0, #0
   27a0c:	b	279fc <flatcc_builder_start_offset_vector@@Base+0x70>

00027a10 <flatcc_builder_start_string@@Base>:
   27a10:	str	r4, [sp, #-8]!
   27a14:	str	lr, [sp, #4]
   27a18:	mov	r4, r0
   27a1c:	mov	r1, #1
   27a20:	bl	25df0 <flatcc_builder_default_alloc@@Base+0x24c>
   27a24:	cmp	r0, #0
   27a28:	bne	27a8c <flatcc_builder_start_string@@Base+0x7c>
   27a2c:	ldr	r3, [r4, #32]
   27a30:	mov	r2, #1
   27a34:	str	r2, [r3, #16]
   27a38:	ldr	r3, [r4, #32]
   27a3c:	mov	r2, #0
   27a40:	str	r2, [r3, #20]
   27a44:	ldr	r3, [r4, #32]
   27a48:	mov	r2, #6
   27a4c:	strh	r2, [r3, #14]
   27a50:	ldr	r1, [r4, #28]
   27a54:	ldr	r2, [r4, #60]	; 0x3c
   27a58:	add	r2, r2, r1
   27a5c:	str	r2, [r4, #16]
   27a60:	ldr	r3, [r4, #64]	; 0x40
   27a64:	sub	r3, r3, r1
   27a68:	cmn	r3, #4
   27a6c:	mvnhi	r3, #3
   27a70:	str	r3, [r4, #24]
   27a74:	ldr	r3, [r4, #32]
   27a78:	mvn	r2, #3
   27a7c:	str	r2, [r3, #4]
   27a80:	ldr	r4, [sp]
   27a84:	add	sp, sp, #4
   27a88:	pop	{pc}		; (ldr pc, [sp], #4)
   27a8c:	mvn	r0, #0
   27a90:	b	27a80 <flatcc_builder_start_string@@Base+0x70>

00027a94 <flatcc_builder_reserve_table@@Base>:
   27a94:	strd	r4, [sp, #-20]!	; 0xffffffec
   27a98:	strd	r6, [sp, #8]
   27a9c:	str	lr, [sp, #16]
   27aa0:	sub	sp, sp, #12
   27aa4:	cmp	r1, #0
   27aa8:	blt	27b88 <flatcc_builder_reserve_table@@Base+0xf4>
   27aac:	mov	r4, r0
   27ab0:	ldr	r2, [r0, #32]
   27ab4:	ldrh	r6, [r2, #28]
   27ab8:	ldr	r3, [r2, #16]
   27abc:	add	r6, r3, r6, lsl #1
   27ac0:	add	r1, r1, #2
   27ac4:	lsl	r5, r1, #1
   27ac8:	add	r2, r6, r5
   27acc:	ldr	r3, [r0, #56]	; 0x38
   27ad0:	cmp	r2, r3
   27ad4:	bls	27afc <flatcc_builder_reserve_table@@Base+0x68>
   27ad8:	mov	r3, #0
   27adc:	str	r3, [sp]
   27ae0:	ldr	r7, [r0, #48]	; 0x30
   27ae4:	mov	r3, #1
   27ae8:	add	r1, r0, #52	; 0x34
   27aec:	ldr	r0, [r0, #40]	; 0x28
   27af0:	blx	r7
   27af4:	cmp	r0, #0
   27af8:	bne	27ba4 <flatcc_builder_reserve_table@@Base+0x110>
   27afc:	ldr	r3, [r4, #52]	; 0x34
   27b00:	adds	r3, r3, r6
   27b04:	moveq	r3, #0
   27b08:	streq	r3, [r4, #4]
   27b0c:	mvneq	r0, #0
   27b10:	beq	27b74 <flatcc_builder_reserve_table@@Base+0xe0>
   27b14:	add	r3, r3, #4
   27b18:	str	r3, [r4, #4]
   27b1c:	ldr	r3, [r4, #32]
   27b20:	ldr	r6, [r3, #20]
   27b24:	add	r2, r5, r6
   27b28:	sub	r2, r2, #3
   27b2c:	ldr	r3, [r4, #80]	; 0x50
   27b30:	cmp	r2, r3
   27b34:	bls	27b5c <flatcc_builder_reserve_table@@Base+0xc8>
   27b38:	mov	r3, #3
   27b3c:	str	r3, [sp]
   27b40:	ldr	r5, [r4, #48]	; 0x30
   27b44:	mov	r3, #0
   27b48:	add	r1, r4, #76	; 0x4c
   27b4c:	ldr	r0, [r4, #40]	; 0x28
   27b50:	blx	r5
   27b54:	cmp	r0, #0
   27b58:	bne	27bc0 <flatcc_builder_reserve_table@@Base+0x12c>
   27b5c:	ldr	r0, [r4, #76]	; 0x4c
   27b60:	add	r0, r0, r6
   27b64:	str	r0, [r4]
   27b68:	clz	r0, r0
   27b6c:	lsr	r0, r0, #5
   27b70:	rsb	r0, r0, #0
   27b74:	add	sp, sp, #12
   27b78:	ldrd	r4, [sp]
   27b7c:	ldrd	r6, [sp, #8]
   27b80:	add	sp, sp, #16
   27b84:	pop	{pc}		; (ldr pc, [sp], #4)
   27b88:	ldr	r3, [pc, #76]	; 27bdc <flatcc_builder_reserve_table@@Base+0x148>
   27b8c:	movw	r2, #1065	; 0x429
   27b90:	movw	r1, #11836	; 0x2e3c
   27b94:	movt	r1, #4
   27b98:	movw	r0, #12484	; 0x30c4
   27b9c:	movt	r0, #4
   27ba0:	bl	145f0 <__assert_fail@plt>
   27ba4:	ldr	r3, [pc, #52]	; 27be0 <flatcc_builder_reserve_table@@Base+0x14c>
   27ba8:	mov	r2, #308	; 0x134
   27bac:	movw	r1, #11836	; 0x2e3c
   27bb0:	movt	r1, #4
   27bb4:	movw	r0, #11920	; 0x2e90
   27bb8:	movt	r0, #4
   27bbc:	bl	145f0 <__assert_fail@plt>
   27bc0:	ldr	r3, [pc, #24]	; 27be0 <flatcc_builder_reserve_table@@Base+0x14c>
   27bc4:	mov	r2, #308	; 0x134
   27bc8:	movw	r1, #11836	; 0x2e3c
   27bcc:	movt	r1, #4
   27bd0:	movw	r0, #11920	; 0x2e90
   27bd4:	movt	r0, #4
   27bd8:	bl	145f0 <__assert_fail@plt>
   27bdc:	andeq	r2, r4, ip, asr fp
   27be0:	andeq	r2, r4, r8, lsl #18

00027be4 <flatcc_builder_start_table@@Base>:
   27be4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27be8:	strd	r6, [sp, #8]
   27bec:	str	r8, [sp, #16]
   27bf0:	str	lr, [sp, #20]
   27bf4:	sub	sp, sp, #8
   27bf8:	mov	r4, r0
   27bfc:	mov	r5, r1
   27c00:	mov	r1, #4
   27c04:	bl	25df0 <flatcc_builder_default_alloc@@Base+0x24c>
   27c08:	subs	r6, r0, #0
   27c0c:	bne	27db8 <flatcc_builder_start_table@@Base+0x1d4>
   27c10:	ldr	r2, [r4, #32]
   27c14:	ldr	r3, [r4, #4]
   27c18:	ldr	r1, [r4, #52]	; 0x34
   27c1c:	sub	r3, r3, r1
   27c20:	str	r3, [r2, #16]
   27c24:	ldr	r2, [r4, #32]
   27c28:	ldr	r3, [r4]
   27c2c:	ldr	r1, [r4, #76]	; 0x4c
   27c30:	sub	r3, r3, r1
   27c34:	str	r3, [r2, #20]
   27c38:	ldr	r3, [r4, #32]
   27c3c:	ldr	r2, [r4, #12]
   27c40:	str	r2, [r3, #24]
   27c44:	ldr	r3, [r4, #32]
   27c48:	ldrh	r2, [r4, #8]
   27c4c:	strh	r2, [r3, #28]
   27c50:	movw	r3, #15186	; 0x3b52
   27c54:	movt	r3, #12137	; 0x2f69
   27c58:	str	r3, [r4, #12]
   27c5c:	mov	r3, #0
   27c60:	strh	r3, [r4, #8]
   27c64:	ldr	r3, [r4, #32]
   27c68:	mov	r2, #3
   27c6c:	strh	r2, [r3, #14]
   27c70:	ldr	r2, [r4, #32]
   27c74:	ldrh	r7, [r2, #28]
   27c78:	ldr	r3, [r2, #16]
   27c7c:	add	r7, r3, r7, lsl #1
   27c80:	add	r5, r5, #2
   27c84:	lsl	r5, r5, #1
   27c88:	add	r2, r7, r5
   27c8c:	ldr	r3, [r4, #56]	; 0x38
   27c90:	cmp	r2, r3
   27c94:	bls	27cbc <flatcc_builder_start_table@@Base+0xd8>
   27c98:	mov	r3, #0
   27c9c:	str	r3, [sp]
   27ca0:	ldr	r8, [r4, #48]	; 0x30
   27ca4:	mov	r3, #1
   27ca8:	add	r1, r4, #52	; 0x34
   27cac:	ldr	r0, [r4, #40]	; 0x28
   27cb0:	blx	r8
   27cb4:	cmp	r0, #0
   27cb8:	bne	27d80 <flatcc_builder_start_table@@Base+0x19c>
   27cbc:	ldr	r3, [r4, #52]	; 0x34
   27cc0:	adds	r3, r3, r7
   27cc4:	moveq	r3, #0
   27cc8:	streq	r3, [r4, #4]
   27ccc:	mvneq	r6, #0
   27cd0:	beq	27d64 <flatcc_builder_start_table@@Base+0x180>
   27cd4:	add	r3, r3, #4
   27cd8:	str	r3, [r4, #4]
   27cdc:	ldr	r3, [r4, #32]
   27ce0:	ldr	r7, [r3, #20]
   27ce4:	sub	r2, r5, #3
   27ce8:	add	r2, r2, r7
   27cec:	ldr	r3, [r4, #80]	; 0x50
   27cf0:	cmp	r2, r3
   27cf4:	bls	27d1c <flatcc_builder_start_table@@Base+0x138>
   27cf8:	mov	r3, #3
   27cfc:	str	r3, [sp]
   27d00:	ldr	r5, [r4, #48]	; 0x30
   27d04:	mov	r3, #0
   27d08:	add	r1, r4, #76	; 0x4c
   27d0c:	ldr	r0, [r4, #40]	; 0x28
   27d10:	blx	r5
   27d14:	cmp	r0, #0
   27d18:	bne	27d9c <flatcc_builder_start_table@@Base+0x1b8>
   27d1c:	ldr	r3, [r4, #76]	; 0x4c
   27d20:	add	r3, r3, r7
   27d24:	str	r3, [r4]
   27d28:	cmp	r3, #0
   27d2c:	beq	27dc0 <flatcc_builder_start_table@@Base+0x1dc>
   27d30:	ldr	r1, [r4, #28]
   27d34:	ldr	r2, [r4, #60]	; 0x3c
   27d38:	add	r2, r2, r1
   27d3c:	str	r2, [r4, #16]
   27d40:	ldr	r3, [r4, #64]	; 0x40
   27d44:	sub	r3, r3, r1
   27d48:	movw	r2, #65532	; 0xfffc
   27d4c:	cmp	r3, r2
   27d50:	movwhi	r3, #65532	; 0xfffc
   27d54:	str	r3, [r4, #24]
   27d58:	ldr	r3, [r4, #32]
   27d5c:	movw	r2, #65532	; 0xfffc
   27d60:	str	r2, [r3, #4]
   27d64:	mov	r0, r6
   27d68:	add	sp, sp, #8
   27d6c:	ldrd	r4, [sp]
   27d70:	ldrd	r6, [sp, #8]
   27d74:	ldr	r8, [sp, #16]
   27d78:	add	sp, sp, #20
   27d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   27d80:	ldr	r3, [pc, #64]	; 27dc8 <flatcc_builder_start_table@@Base+0x1e4>
   27d84:	mov	r2, #308	; 0x134
   27d88:	movw	r1, #11836	; 0x2e3c
   27d8c:	movt	r1, #4
   27d90:	movw	r0, #11920	; 0x2e90
   27d94:	movt	r0, #4
   27d98:	bl	145f0 <__assert_fail@plt>
   27d9c:	ldr	r3, [pc, #36]	; 27dc8 <flatcc_builder_start_table@@Base+0x1e4>
   27da0:	mov	r2, #308	; 0x134
   27da4:	movw	r1, #11836	; 0x2e3c
   27da8:	movt	r1, #4
   27dac:	movw	r0, #11920	; 0x2e90
   27db0:	movt	r0, #4
   27db4:	bl	145f0 <__assert_fail@plt>
   27db8:	mvn	r6, #0
   27dbc:	b	27d64 <flatcc_builder_start_table@@Base+0x180>
   27dc0:	mvn	r6, #0
   27dc4:	b	27d64 <flatcc_builder_start_table@@Base+0x180>
   27dc8:	andeq	r2, r4, r8, lsl #18

00027dcc <flatcc_builder_create_vtable@@Base>:
   27dcc:	strd	r4, [sp, #-16]!
   27dd0:	str	r6, [sp, #8]
   27dd4:	str	lr, [sp, #12]
   27dd8:	sub	sp, sp, #80	; 0x50
   27ddc:	mov	r5, r0
   27de0:	mov	r3, #0
   27de4:	str	r3, [sp, #8]
   27de8:	str	r3, [sp, #12]
   27dec:	cmp	r2, #0
   27df0:	beq	27e8c <flatcc_builder_create_vtable@@Base+0xc0>
   27df4:	str	r2, [sp, #8]
   27df8:	str	r1, [sp, #16]
   27dfc:	str	r2, [sp, #20]
   27e00:	mov	r3, #1
   27e04:	str	r3, [sp, #12]
   27e08:	ldr	r3, [r0, #152]	; 0x98
   27e0c:	cmp	r3, #0
   27e10:	bne	27ea4 <flatcc_builder_create_vtable@@Base+0xd8>
   27e14:	ldr	r3, [r0, #180]	; 0xb4
   27e18:	cmp	r3, #0
   27e1c:	bne	27ea4 <flatcc_builder_create_vtable@@Base+0xd8>
   27e20:	ldr	r4, [r0, #140]	; 0x8c
   27e24:	mov	r3, r2
   27e28:	add	r2, r2, r4
   27e2c:	str	r2, [r0, #140]	; 0x8c
   27e30:	cmp	r4, r2
   27e34:	ble	27f10 <flatcc_builder_create_vtable@@Base+0x144>
   27e38:	ldr	r3, [pc, #276]	; 27f54 <flatcc_builder_create_vtable@@Base+0x188>
   27e3c:	movw	r2, #673	; 0x2a1
   27e40:	movw	r1, #11836	; 0x2e3c
   27e44:	movt	r1, #4
   27e48:	movw	r0, #11920	; 0x2e90
   27e4c:	movt	r0, #4
   27e50:	bl	145f0 <__assert_fail@plt>
   27e54:	ldr	r3, [pc, #252]	; 27f58 <flatcc_builder_create_vtable@@Base+0x18c>
   27e58:	movw	r2, #647	; 0x287
   27e5c:	movw	r1, #11836	; 0x2e3c
   27e60:	movt	r1, #4
   27e64:	movw	r0, #11920	; 0x2e90
   27e68:	movt	r0, #4
   27e6c:	bl	145f0 <__assert_fail@plt>
   27e70:	ldr	r3, [pc, #224]	; 27f58 <flatcc_builder_create_vtable@@Base+0x18c>
   27e74:	movw	r2, #651	; 0x28b
   27e78:	movw	r1, #11836	; 0x2e3c
   27e7c:	movt	r1, #4
   27e80:	movw	r0, #11920	; 0x2e90
   27e84:	movt	r0, #4
   27e88:	bl	145f0 <__assert_fail@plt>
   27e8c:	ldr	r3, [r0, #152]	; 0x98
   27e90:	cmp	r3, #0
   27e94:	bne	27e54 <flatcc_builder_create_vtable@@Base+0x88>
   27e98:	ldr	r3, [r0, #180]	; 0xb4
   27e9c:	cmp	r3, #0
   27ea0:	beq	27f00 <flatcc_builder_create_vtable@@Base+0x134>
   27ea4:	ldr	r2, [r5, #136]	; 0x88
   27ea8:	ldr	r3, [sp, #8]
   27eac:	sub	r4, r2, r3
   27eb0:	cmp	r2, r4
   27eb4:	ble	27e54 <flatcc_builder_create_vtable@@Base+0x88>
   27eb8:	str	r3, [sp]
   27ebc:	ldr	r6, [r5, #44]	; 0x2c
   27ec0:	mov	r3, r4
   27ec4:	ldr	r2, [sp, #12]
   27ec8:	add	r1, sp, #16
   27ecc:	ldr	r0, [r5, #36]	; 0x24
   27ed0:	blx	r6
   27ed4:	cmp	r0, #0
   27ed8:	bne	27e70 <flatcc_builder_create_vtable@@Base+0xa4>
   27edc:	str	r4, [r5, #136]	; 0x88
   27ee0:	cmp	r4, #0
   27ee4:	addne	r4, r4, #1
   27ee8:	mov	r0, r4
   27eec:	add	sp, sp, #80	; 0x50
   27ef0:	ldrd	r4, [sp]
   27ef4:	ldr	r6, [sp, #8]
   27ef8:	add	sp, sp, #12
   27efc:	pop	{pc}		; (ldr pc, [sp], #4)
   27f00:	ldr	r4, [r5, #140]	; 0x8c
   27f04:	ldr	r3, [sp, #8]
   27f08:	add	r2, r3, r4
   27f0c:	str	r2, [r5, #140]	; 0x8c
   27f10:	str	r3, [sp]
   27f14:	ldr	r6, [r5, #44]	; 0x2c
   27f18:	mov	r3, r4
   27f1c:	ldr	r2, [sp, #12]
   27f20:	add	r1, sp, #16
   27f24:	ldr	r0, [r5, #36]	; 0x24
   27f28:	blx	r6
   27f2c:	cmp	r0, #0
   27f30:	addeq	r4, r4, #1
   27f34:	beq	27ee8 <flatcc_builder_create_vtable@@Base+0x11c>
   27f38:	ldr	r3, [pc, #20]	; 27f54 <flatcc_builder_create_vtable@@Base+0x188>
   27f3c:	movw	r2, #677	; 0x2a5
   27f40:	movw	r1, #11836	; 0x2e3c
   27f44:	movt	r1, #4
   27f48:	movw	r0, #11920	; 0x2e90
   27f4c:	movt	r0, #4
   27f50:	bl	145f0 <__assert_fail@plt>
   27f54:	andeq	r2, r4, ip, ror #17
   27f58:	andeq	r2, r4, r8, lsr r9

00027f5c <flatcc_builder_create_cached_vtable@@Base>:
   27f5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27f60:	strd	r6, [sp, #8]
   27f64:	strd	r8, [sp, #16]
   27f68:	strd	sl, [sp, #24]
   27f6c:	str	lr, [sp, #32]
   27f70:	sub	sp, sp, #36	; 0x24
   27f74:	mov	r5, r0
   27f78:	str	r1, [sp, #12]
   27f7c:	str	r2, [sp, #16]
   27f80:	mov	r6, r3
   27f84:	ldr	r3, [r0, #116]	; 0x74
   27f88:	cmp	r3, #0
   27f8c:	beq	27fd4 <flatcc_builder_create_cached_vtable@@Base+0x78>
   27f90:	ldr	r8, [r5, #116]	; 0x74
   27f94:	rsb	r3, r8, #32
   27f98:	lsr	r8, r6, r3
   27f9c:	ldr	sl, [r5, #92]	; 0x5c
   27fa0:	adds	r9, sl, r8, lsl #2
   27fa4:	str	r9, [sp, #20]
   27fa8:	beq	282e4 <flatcc_builder_create_cached_vtable@@Base+0x388>
   27fac:	ldr	r6, [sl, r8, lsl #2]
   27fb0:	cmp	r6, #0
   27fb4:	beq	2820c <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   27fb8:	ldr	fp, [r5, #100]	; 0x64
   27fbc:	ldr	r7, [r5, #68]	; 0x44
   27fc0:	mov	r3, #0
   27fc4:	str	r3, [sp, #28]
   27fc8:	str	r8, [sp, #24]
   27fcc:	ldr	r8, [sp, #16]
   27fd0:	b	280dc <flatcc_builder_create_cached_vtable@@Base+0x180>
   27fd4:	add	r8, r0, #92	; 0x5c
   27fd8:	ldr	r4, [r0, #124]	; 0x7c
   27fdc:	cmp	r4, #0
   27fe0:	bne	28060 <flatcc_builder_create_cached_vtable@@Base+0x104>
   27fe4:	ldr	r3, [r0, #104]	; 0x68
   27fe8:	cmp	r3, #15
   27fec:	bhi	28018 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   27ff0:	mov	r3, #6
   27ff4:	str	r3, [sp]
   27ff8:	ldr	r7, [r0, #48]	; 0x30
   27ffc:	mov	r3, #0
   28000:	mov	r2, #16
   28004:	add	r1, r0, #100	; 0x64
   28008:	ldr	r0, [r0, #40]	; 0x28
   2800c:	blx	r7
   28010:	cmp	r0, #0
   28014:	bne	2807c <flatcc_builder_create_cached_vtable@@Base+0x120>
   28018:	ldr	r3, [r5, #100]	; 0x64
   2801c:	cmp	r3, #0
   28020:	beq	282fc <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   28024:	mov	r3, #16
   28028:	str	r3, [r5, #124]	; 0x7c
   2802c:	mov	r3, #5
   28030:	str	r3, [sp]
   28034:	ldr	r7, [r5, #48]	; 0x30
   28038:	mov	r3, #1
   2803c:	mov	r2, #256	; 0x100
   28040:	mov	r1, r8
   28044:	ldr	r0, [r5, #40]	; 0x28
   28048:	blx	r7
   2804c:	cmp	r0, #0
   28050:	bne	282fc <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   28054:	ldr	r1, [r5, #96]	; 0x60
   28058:	mov	r2, #256	; 0x100
   2805c:	b	2809c <flatcc_builder_create_cached_vtable@@Base+0x140>
   28060:	ldr	r3, [pc, #668]	; 28304 <flatcc_builder_create_cached_vtable@@Base+0x3a8>
   28064:	movw	r2, #342	; 0x156
   28068:	movw	r1, #11836	; 0x2e3c
   2806c:	movt	r1, #4
   28070:	movw	r0, #12496	; 0x30d0
   28074:	movt	r0, #4
   28078:	bl	145f0 <__assert_fail@plt>
   2807c:	ldr	r3, [pc, #644]	; 28308 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   28080:	mov	r2, #308	; 0x134
   28084:	movw	r1, #11836	; 0x2e3c
   28088:	movt	r1, #4
   2808c:	movw	r0, #11920	; 0x2e90
   28090:	movt	r0, #4
   28094:	bl	145f0 <__assert_fail@plt>
   28098:	mov	r2, r3
   2809c:	lsl	r3, r2, #1
   280a0:	cmp	r3, r1
   280a4:	bls	28098 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   280a8:	lsr	r3, r2, #2
   280ac:	cmp	r2, #7
   280b0:	bls	280c4 <flatcc_builder_create_cached_vtable@@Base+0x168>
   280b4:	mov	r2, #1
   280b8:	add	r4, r4, #1
   280bc:	cmp	r3, r2, lsl r4
   280c0:	bhi	280b8 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   280c4:	str	r4, [r5, #116]	; 0x74
   280c8:	b	27f90 <flatcc_builder_create_cached_vtable@@Base+0x34>
   280cc:	add	r9, r4, #12
   280d0:	ldr	r6, [r4, #12]
   280d4:	cmp	r6, #0
   280d8:	beq	2816c <flatcc_builder_create_cached_vtable@@Base+0x210>
   280dc:	add	r4, fp, r6
   280e0:	ldr	r3, [r4, #8]
   280e4:	add	r1, r7, r3
   280e8:	ldrh	r3, [r7, r3]
   280ec:	cmp	r3, r8
   280f0:	bne	280cc <flatcc_builder_create_cached_vtable@@Base+0x170>
   280f4:	mov	r2, r8
   280f8:	ldr	r0, [sp, #12]
   280fc:	bl	14530 <memcmp@plt>
   28100:	cmp	r0, #0
   28104:	bne	280cc <flatcc_builder_create_cached_vtable@@Base+0x170>
   28108:	ldr	r2, [r4, #4]
   2810c:	ldr	r3, [r5, #152]	; 0x98
   28110:	cmp	r2, r3
   28114:	bne	2815c <flatcc_builder_create_cached_vtable@@Base+0x200>
   28118:	ldr	r8, [sp, #24]
   2811c:	ldr	r3, [sp, #20]
   28120:	cmp	r3, r9
   28124:	beq	2813c <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   28128:	ldr	r3, [r4, #12]
   2812c:	str	r3, [r9]
   28130:	ldr	r3, [sl, r8, lsl #2]
   28134:	str	r3, [r4, #12]
   28138:	str	r6, [sl, r8, lsl #2]
   2813c:	ldr	r0, [r4]
   28140:	add	sp, sp, #36	; 0x24
   28144:	ldrd	r4, [sp]
   28148:	ldrd	r6, [sp, #8]
   2814c:	ldrd	r8, [sp, #16]
   28150:	ldrd	sl, [sp, #24]
   28154:	add	sp, sp, #32
   28158:	pop	{pc}		; (ldr pc, [sp], #4)
   2815c:	add	r9, r4, #12
   28160:	ldr	r6, [r4, #12]
   28164:	str	r4, [sp, #28]
   28168:	b	280d4 <flatcc_builder_create_cached_vtable@@Base+0x178>
   2816c:	ldr	r8, [sp, #24]
   28170:	ldr	r4, [r5, #124]	; 0x7c
   28174:	add	r2, r4, #16
   28178:	ldr	r3, [r5, #104]	; 0x68
   2817c:	cmp	r2, r3
   28180:	bls	281a8 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   28184:	mov	r3, #6
   28188:	str	r3, [sp]
   2818c:	ldr	r6, [r5, #48]	; 0x30
   28190:	mov	r3, #0
   28194:	add	r1, r5, #100	; 0x64
   28198:	ldr	r0, [r5, #40]	; 0x28
   2819c:	blx	r6
   281a0:	cmp	r0, #0
   281a4:	bne	28218 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   281a8:	ldr	r6, [r5, #100]	; 0x64
   281ac:	adds	r7, r6, r4
   281b0:	beq	282ec <flatcc_builder_create_cached_vtable@@Base+0x390>
   281b4:	ldr	r3, [r5, #124]	; 0x7c
   281b8:	add	r2, r3, #16
   281bc:	str	r2, [r5, #124]	; 0x7c
   281c0:	ldr	r2, [r5, #152]	; 0x98
   281c4:	str	r2, [r7, #4]
   281c8:	ldr	r2, [sl, r8, lsl #2]
   281cc:	str	r2, [r7, #12]
   281d0:	str	r3, [sl, r8, lsl #2]
   281d4:	ldr	r2, [sp, #16]
   281d8:	ldr	r1, [sp, #12]
   281dc:	mov	r0, r5
   281e0:	bl	27dcc <flatcc_builder_create_vtable@@Base>
   281e4:	str	r0, [r6, r4]
   281e8:	cmp	r0, #0
   281ec:	beq	28140 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   281f0:	ldr	r3, [sp, #28]
   281f4:	cmp	r3, #0
   281f8:	beq	28234 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   281fc:	ldr	r3, [r3, #8]
   28200:	str	r3, [r7, #8]
   28204:	ldr	r0, [r6, r4]
   28208:	b	28140 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   2820c:	mov	r3, #0
   28210:	str	r3, [sp, #28]
   28214:	b	28170 <flatcc_builder_create_cached_vtable@@Base+0x214>
   28218:	ldr	r3, [pc, #232]	; 28308 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   2821c:	mov	r2, #308	; 0x134
   28220:	movw	r1, #11836	; 0x2e3c
   28224:	movt	r1, #4
   28228:	movw	r0, #11920	; 0x2e90
   2822c:	movt	r0, #4
   28230:	bl	145f0 <__assert_fail@plt>
   28234:	ldr	r2, [r5, #172]	; 0xac
   28238:	cmp	r2, #0
   2823c:	beq	28254 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   28240:	ldr	r3, [r5, #120]	; 0x78
   28244:	ldr	r1, [sp, #16]
   28248:	add	r3, r1, r3
   2824c:	cmp	r2, r3
   28250:	bcc	282bc <flatcc_builder_create_cached_vtable@@Base+0x360>
   28254:	ldr	r8, [r5, #120]	; 0x78
   28258:	ldr	r3, [sp, #16]
   2825c:	add	r2, r8, r3
   28260:	ldr	r3, [r5, #72]	; 0x48
   28264:	cmp	r2, r3
   28268:	bls	28290 <flatcc_builder_create_cached_vtable@@Base+0x334>
   2826c:	mov	r3, #2
   28270:	str	r3, [sp]
   28274:	ldr	sl, [r5, #48]	; 0x30
   28278:	mov	r3, #0
   2827c:	add	r1, r5, #68	; 0x44
   28280:	ldr	r0, [r5, #40]	; 0x28
   28284:	blx	sl
   28288:	cmp	r0, #0
   2828c:	bne	282c8 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   28290:	ldr	r3, [r5, #68]	; 0x44
   28294:	adds	r0, r3, r8
   28298:	beq	282f4 <flatcc_builder_create_cached_vtable@@Base+0x398>
   2829c:	ldr	r3, [r5, #120]	; 0x78
   282a0:	str	r3, [r7, #8]
   282a4:	ldr	r2, [sp, #16]
   282a8:	add	r3, r2, r3
   282ac:	str	r3, [r5, #120]	; 0x78
   282b0:	ldr	r1, [sp, #12]
   282b4:	bl	14524 <memcpy@plt>
   282b8:	b	28204 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   282bc:	mov	r0, r5
   282c0:	bl	26164 <flatcc_builder_flush_vtable_cache@@Base>
   282c4:	b	28204 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   282c8:	ldr	r3, [pc, #56]	; 28308 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   282cc:	mov	r2, #308	; 0x134
   282d0:	movw	r1, #11836	; 0x2e3c
   282d4:	movt	r1, #4
   282d8:	movw	r0, #11920	; 0x2e90
   282dc:	movt	r0, #4
   282e0:	bl	145f0 <__assert_fail@plt>
   282e4:	mov	r0, #0
   282e8:	b	28140 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   282ec:	mov	r0, #0
   282f0:	b	28140 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   282f4:	mvn	r0, #0
   282f8:	b	28140 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   282fc:	mov	r0, #0
   28300:	b	28140 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   28304:	andeq	r2, r4, ip, ror fp
   28308:	andeq	r2, r4, r8, lsl #18

0002830c <flatcc_builder_create_table@@Base>:
   2830c:	strd	r4, [sp, #-20]!	; 0xffffffec
   28310:	strd	r6, [sp, #8]
   28314:	str	lr, [sp, #16]
   28318:	sub	sp, sp, #92	; 0x5c
   2831c:	ldr	r7, [sp, #116]	; 0x74
   28320:	ldr	ip, [sp, #120]	; 0x78
   28324:	cmp	r7, #0
   28328:	blt	28470 <flatcc_builder_create_table@@Base+0x164>
   2832c:	mov	r4, r0
   28330:	tst	ip, #1
   28334:	beq	2848c <flatcc_builder_create_table@@Base+0x180>
   28338:	cmp	r3, #4
   2833c:	movcc	r3, #4
   28340:	ldrh	r0, [r0, #128]	; 0x80
   28344:	cmp	r0, r3
   28348:	strhcc	r3, [r4, #128]	; 0x80
   2834c:	ldr	r0, [r4, #136]	; 0x88
   28350:	sub	r6, r0, r2
   28354:	sub	r3, r3, #1
   28358:	and	r6, r6, r3
   2835c:	sub	r0, r0, r2
   28360:	sub	r0, r0, #4
   28364:	sub	ip, ip, #1
   28368:	sub	ip, r0, ip
   2836c:	sub	ip, ip, r6
   28370:	str	ip, [sp, #84]	; 0x54
   28374:	cmp	r7, #0
   28378:	ble	283a8 <flatcc_builder_create_table@@Base+0x9c>
   2837c:	ldr	ip, [sp, #112]	; 0x70
   28380:	add	r7, ip, r7, lsl #1
   28384:	sub	r0, r6, r0
   28388:	sub	lr, r0, #4
   2838c:	ldrh	r3, [ip], #2
   28390:	sub	r5, lr, r3
   28394:	ldr	r0, [r1, r3]
   28398:	add	r0, r0, r5
   2839c:	str	r0, [r1, r3]
   283a0:	cmp	r7, ip
   283a4:	bne	2838c <flatcc_builder_create_table@@Base+0x80>
   283a8:	mov	r3, #4
   283ac:	str	r3, [sp, #12]
   283b0:	add	r0, sp, #84	; 0x54
   283b4:	str	r0, [sp, #20]
   283b8:	str	r3, [sp, #24]
   283bc:	mov	r3, #1
   283c0:	str	r3, [sp, #16]
   283c4:	cmp	r2, #0
   283c8:	beq	283e4 <flatcc_builder_create_table@@Base+0xd8>
   283cc:	add	r3, r2, #4
   283d0:	str	r3, [sp, #12]
   283d4:	str	r1, [sp, #28]
   283d8:	str	r2, [sp, #32]
   283dc:	mov	r3, #2
   283e0:	str	r3, [sp, #16]
   283e4:	cmp	r6, #0
   283e8:	beq	2841c <flatcc_builder_create_table@@Base+0x110>
   283ec:	ldr	r3, [sp, #12]
   283f0:	add	r3, r3, r6
   283f4:	str	r3, [sp, #12]
   283f8:	ldr	r3, [sp, #16]
   283fc:	add	r3, r3, #1
   28400:	add	r2, sp, #88	; 0x58
   28404:	add	r1, r2, r3, lsl #3
   28408:	movw	r2, #9964	; 0x26ec
   2840c:	movt	r2, #4
   28410:	str	r2, [r1, #-76]	; 0xffffffb4
   28414:	str	r6, [r1, #-72]	; 0xffffffb8
   28418:	str	r3, [sp, #16]
   2841c:	ldr	r2, [r4, #136]	; 0x88
   28420:	ldr	r3, [sp, #12]
   28424:	sub	r5, r2, r3
   28428:	cmp	r2, r5
   2842c:	ble	284a8 <flatcc_builder_create_table@@Base+0x19c>
   28430:	str	r3, [sp]
   28434:	ldr	r6, [r4, #44]	; 0x2c
   28438:	mov	r3, r5
   2843c:	ldr	r2, [sp, #16]
   28440:	add	r1, sp, #20
   28444:	ldr	r0, [r4, #36]	; 0x24
   28448:	blx	r6
   2844c:	cmp	r0, #0
   28450:	bne	284c4 <flatcc_builder_create_table@@Base+0x1b8>
   28454:	str	r5, [r4, #136]	; 0x88
   28458:	mov	r0, r5
   2845c:	add	sp, sp, #92	; 0x5c
   28460:	ldrd	r4, [sp]
   28464:	ldrd	r6, [sp, #8]
   28468:	add	sp, sp, #16
   2846c:	pop	{pc}		; (ldr pc, [sp], #4)
   28470:	ldr	r3, [pc, #104]	; 284e0 <flatcc_builder_create_table@@Base+0x1d4>
   28474:	movw	r2, #1237	; 0x4d5
   28478:	movw	r1, #11836	; 0x2e3c
   2847c:	movt	r1, #4
   28480:	movw	r0, #12512	; 0x30e0
   28484:	movt	r0, #4
   28488:	bl	145f0 <__assert_fail@plt>
   2848c:	ldr	r3, [pc, #76]	; 284e0 <flatcc_builder_create_table@@Base+0x1d4>
   28490:	movw	r2, #1243	; 0x4db
   28494:	movw	r1, #11836	; 0x2e3c
   28498:	movt	r1, #4
   2849c:	movw	r0, #12532	; 0x30f4
   284a0:	movt	r0, #4
   284a4:	bl	145f0 <__assert_fail@plt>
   284a8:	ldr	r3, [pc, #52]	; 284e4 <flatcc_builder_create_table@@Base+0x1d8>
   284ac:	movw	r2, #647	; 0x287
   284b0:	movw	r1, #11836	; 0x2e3c
   284b4:	movt	r1, #4
   284b8:	movw	r0, #11920	; 0x2e90
   284bc:	movt	r0, #4
   284c0:	bl	145f0 <__assert_fail@plt>
   284c4:	ldr	r3, [pc, #24]	; 284e4 <flatcc_builder_create_table@@Base+0x1d8>
   284c8:	movw	r2, #651	; 0x28b
   284cc:	movw	r1, #11836	; 0x2e3c
   284d0:	movt	r1, #4
   284d4:	movw	r0, #11920	; 0x2e90
   284d8:	movt	r0, #4
   284dc:	bl	145f0 <__assert_fail@plt>
   284e0:	andeq	r2, r4, r8, lsl #23
   284e4:	andeq	r2, r4, r8, lsr r9

000284e8 <flatcc_builder_check_required_field@@Base>:
   284e8:	ldr	r3, [r0, #32]
   284ec:	ldrh	r3, [r3, #14]
   284f0:	cmp	r3, #3
   284f4:	bne	2851c <flatcc_builder_check_required_field@@Base+0x34>
   284f8:	ldrh	r3, [r0, #8]
   284fc:	cmp	r3, r1
   28500:	bls	28540 <flatcc_builder_check_required_field@@Base+0x58>
   28504:	ldr	r3, [r0, #4]
   28508:	lsl	r1, r1, #1
   2850c:	ldrh	r0, [r3, r1]
   28510:	adds	r0, r0, #0
   28514:	movne	r0, #1
   28518:	bx	lr
   2851c:	str	r4, [sp, #-8]!
   28520:	str	lr, [sp, #4]
   28524:	ldr	r3, [pc, #28]	; 28548 <flatcc_builder_check_required_field@@Base+0x60>
   28528:	movw	r2, #1272	; 0x4f8
   2852c:	movw	r1, #11836	; 0x2e3c
   28530:	movt	r1, #4
   28534:	movw	r0, #12544	; 0x3100
   28538:	movt	r0, #4
   2853c:	bl	145f0 <__assert_fail@plt>
   28540:	mov	r0, #0
   28544:	bx	lr
   28548:	andeq	r2, r4, r4, lsr #23

0002854c <flatcc_builder_check_union_field@@Base>:
   2854c:	ldr	r3, [r0, #32]
   28550:	ldrh	r3, [r3, #14]
   28554:	cmp	r3, #3
   28558:	bne	285ac <flatcc_builder_check_union_field@@Base+0x60>
   2855c:	cmp	r1, #0
   28560:	beq	285f8 <flatcc_builder_check_union_field@@Base+0xac>
   28564:	ldrh	r3, [r0, #8]
   28568:	cmp	r3, r1
   2856c:	bls	28600 <flatcc_builder_check_union_field@@Base+0xb4>
   28570:	ldr	r3, [r0, #4]
   28574:	sub	r1, r1, #-2147483647	; 0x80000001
   28578:	lsl	r1, r1, #1
   2857c:	ldrh	r2, [r3, r1]
   28580:	cmp	r2, #0
   28584:	beq	285d0 <flatcc_builder_check_union_field@@Base+0x84>
   28588:	ldr	r0, [r0, #16]
   2858c:	ldrb	r2, [r0, r2]
   28590:	cmp	r2, #0
   28594:	bne	285e4 <flatcc_builder_check_union_field@@Base+0x98>
   28598:	add	r1, r3, r1
   2859c:	ldrh	r0, [r1, #2]
   285a0:	clz	r0, r0
   285a4:	lsr	r0, r0, #5
   285a8:	bx	lr
   285ac:	str	r4, [sp, #-8]!
   285b0:	str	lr, [sp, #4]
   285b4:	ldr	r3, [pc, #76]	; 28608 <flatcc_builder_check_union_field@@Base+0xbc>
   285b8:	movw	r2, #1279	; 0x4ff
   285bc:	movw	r1, #11836	; 0x2e3c
   285c0:	movt	r1, #4
   285c4:	movw	r0, #12544	; 0x3100
   285c8:	movt	r0, #4
   285cc:	bl	145f0 <__assert_fail@plt>
   285d0:	add	r1, r3, r1
   285d4:	ldrh	r0, [r1, #2]
   285d8:	clz	r0, r0
   285dc:	lsr	r0, r0, #5
   285e0:	bx	lr
   285e4:	add	r1, r3, r1
   285e8:	ldrh	r0, [r1, #2]
   285ec:	adds	r0, r0, #0
   285f0:	movne	r0, #1
   285f4:	bx	lr
   285f8:	mov	r0, #0
   285fc:	bx	lr
   28600:	mov	r0, #0
   28604:	bx	lr
   28608:	andeq	r2, r4, r8, asr #23

0002860c <flatcc_builder_check_required@@Base>:
   2860c:	ldr	r3, [r0, #32]
   28610:	ldrh	r3, [r3, #14]
   28614:	cmp	r3, #3
   28618:	bne	28674 <flatcc_builder_check_required@@Base+0x68>
   2861c:	ldrh	r3, [r0, #8]
   28620:	cmp	r3, r2
   28624:	blt	286a0 <flatcc_builder_check_required@@Base+0x94>
   28628:	cmp	r2, #0
   2862c:	ble	286a8 <flatcc_builder_check_required@@Base+0x9c>
   28630:	ldr	ip, [r0, #4]
   28634:	ldrh	r3, [r1]
   28638:	lsl	r3, r3, #1
   2863c:	ldrh	r3, [ip, r3]
   28640:	cmp	r3, #0
   28644:	beq	286b0 <flatcc_builder_check_required@@Base+0xa4>
   28648:	add	r0, r1, #2
   2864c:	add	r2, r1, r2, lsl #1
   28650:	cmp	r0, r2
   28654:	beq	28698 <flatcc_builder_check_required@@Base+0x8c>
   28658:	ldrh	r3, [r0], #2
   2865c:	lsl	r3, r3, #1
   28660:	ldrh	r3, [ip, r3]
   28664:	cmp	r3, #0
   28668:	bne	28650 <flatcc_builder_check_required@@Base+0x44>
   2866c:	mov	r0, #0
   28670:	bx	lr
   28674:	str	r4, [sp, #-8]!
   28678:	str	lr, [sp, #4]
   2867c:	ldr	r3, [pc, #52]	; 286b8 <flatcc_builder_check_required@@Base+0xac>
   28680:	movw	r2, #1297	; 0x511
   28684:	movw	r1, #11836	; 0x2e3c
   28688:	movt	r1, #4
   2868c:	movw	r0, #12544	; 0x3100
   28690:	movt	r0, #4
   28694:	bl	145f0 <__assert_fail@plt>
   28698:	mov	r0, #1
   2869c:	bx	lr
   286a0:	mov	r0, #0
   286a4:	bx	lr
   286a8:	mov	r0, #1
   286ac:	bx	lr
   286b0:	mov	r0, #0
   286b4:	bx	lr
   286b8:	andeq	r2, r4, ip, ror #23

000286bc <flatcc_builder_end_table@@Base>:
   286bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   286c0:	strd	r6, [sp, #8]
   286c4:	str	lr, [sp, #16]
   286c8:	sub	sp, sp, #20
   286cc:	ldr	r3, [r0, #32]
   286d0:	ldrh	r3, [r3, #14]
   286d4:	cmp	r3, #3
   286d8:	bne	28758 <flatcc_builder_end_table@@Base+0x9c>
   286dc:	mov	r4, r0
   286e0:	ldr	r2, [r0, #4]
   286e4:	sub	r6, r2, #4
   286e8:	ldrh	r5, [r0, #8]
   286ec:	add	r5, r5, #2
   286f0:	lsl	r5, r5, #1
   286f4:	uxth	r5, r5
   286f8:	strh	r5, [r2, #-4]
   286fc:	ldr	r3, [r0, #20]
   28700:	add	r3, r3, #4
   28704:	uxth	r1, r3
   28708:	strh	r1, [r2, #-2]
   2870c:	ldr	r3, [r0, #12]
   28710:	eor	r3, r3, r5
   28714:	movw	r2, #31153	; 0x79b1
   28718:	movt	r2, #40503	; 0x9e37
   2871c:	mul	r3, r2, r3
   28720:	eor	r3, r3, r1
   28724:	mul	r3, r2, r3
   28728:	str	r3, [r0, #12]
   2872c:	mov	r2, r5
   28730:	mov	r1, r6
   28734:	bl	27f5c <flatcc_builder_create_cached_vtable@@Base>
   28738:	subs	r7, r0, #0
   2873c:	bne	28774 <flatcc_builder_end_table@@Base+0xb8>
   28740:	mov	r0, r7
   28744:	add	sp, sp, #20
   28748:	ldrd	r4, [sp]
   2874c:	ldrd	r6, [sp, #8]
   28750:	add	sp, sp, #16
   28754:	pop	{pc}		; (ldr pc, [sp], #4)
   28758:	ldr	r3, [pc, #284]	; 2887c <flatcc_builder_end_table@@Base+0x1c0>
   2875c:	movw	r2, #1317	; 0x525
   28760:	movw	r1, #11836	; 0x2e3c
   28764:	movt	r1, #4
   28768:	movw	r0, #12544	; 0x3100
   2876c:	movt	r0, #4
   28770:	bl	145f0 <__assert_fail@plt>
   28774:	mov	r2, r5
   28778:	mov	r1, #0
   2877c:	mov	r0, r6
   28780:	bl	1459c <memset@plt>
   28784:	ldr	r3, [r4, #32]
   28788:	ldr	r2, [r4, #76]	; 0x4c
   2878c:	ldr	r3, [r3, #20]
   28790:	add	r2, r2, r3
   28794:	str	r7, [sp, #8]
   28798:	ldr	r3, [r4]
   2879c:	sub	r3, r3, r2
   287a0:	asr	r3, r3, #1
   287a4:	str	r3, [sp, #4]
   287a8:	str	r2, [sp]
   287ac:	ldrh	r3, [r4, #130]	; 0x82
   287b0:	ldr	r2, [r4, #20]
   287b4:	ldr	r1, [r4, #16]
   287b8:	mov	r0, r4
   287bc:	bl	2830c <flatcc_builder_create_table@@Base>
   287c0:	subs	r7, r0, #0
   287c4:	beq	28740 <flatcc_builder_end_table@@Base+0x84>
   287c8:	ldr	r3, [r4, #32]
   287cc:	ldr	r2, [r3, #24]
   287d0:	str	r2, [r4, #12]
   287d4:	ldrh	r2, [r3, #28]
   287d8:	strh	r2, [r4, #8]
   287dc:	ldr	r2, [r4, #52]	; 0x34
   287e0:	ldr	r1, [r3, #16]
   287e4:	add	r2, r2, r1
   287e8:	str	r2, [r4, #4]
   287ec:	ldr	r2, [r4, #76]	; 0x4c
   287f0:	ldr	r3, [r3, #20]
   287f4:	add	r3, r2, r3
   287f8:	str	r3, [r4]
   287fc:	ldr	r2, [r4, #20]
   28800:	mov	r1, #0
   28804:	ldr	r0, [r4, #16]
   28808:	bl	1459c <memset@plt>
   2880c:	ldr	r2, [r4, #32]
   28810:	ldr	r3, [r2, #8]
   28814:	str	r3, [r4, #20]
   28818:	ldr	r0, [r2]
   2881c:	str	r0, [r4, #28]
   28820:	ldr	r1, [r2, #4]
   28824:	ldr	r3, [r4, #60]	; 0x3c
   28828:	add	r3, r3, r0
   2882c:	str	r3, [r4, #16]
   28830:	ldr	r3, [r4, #64]	; 0x40
   28834:	sub	r3, r3, r0
   28838:	cmp	r3, r1
   2883c:	movcs	r3, r1
   28840:	str	r3, [r4, #24]
   28844:	str	r1, [r2, #4]
   28848:	ldrh	r3, [r4, #130]	; 0x82
   2884c:	ldrh	r2, [r4, #128]	; 0x80
   28850:	cmp	r2, r3
   28854:	strhcc	r3, [r4, #128]	; 0x80
   28858:	ldr	r3, [r4, #32]
   2885c:	ldrh	r2, [r3, #12]
   28860:	strh	r2, [r4, #130]	; 0x82
   28864:	sub	r3, r3, #36	; 0x24
   28868:	str	r3, [r4, #32]
   2886c:	ldr	r3, [r4, #156]	; 0x9c
   28870:	sub	r3, r3, #1
   28874:	str	r3, [r4, #156]	; 0x9c
   28878:	b	28740 <flatcc_builder_end_table@@Base+0x84>
   2887c:	andeq	r2, r4, ip, lsl #24

00028880 <flatcc_builder_create_vector@@Base>:
   28880:	strd	r4, [sp, #-16]!
   28884:	str	r6, [sp, #8]
   28888:	str	lr, [sp, #12]
   2888c:	sub	sp, sp, #88	; 0x58
   28890:	mov	r4, r0
   28894:	ldrh	r0, [sp, #104]	; 0x68
   28898:	ldr	ip, [sp, #108]	; 0x6c
   2889c:	cmp	r2, ip
   288a0:	bhi	28994 <flatcc_builder_create_vector@@Base+0x114>
   288a4:	cmp	r0, #4
   288a8:	movcc	r0, #4
   288ac:	ldrh	ip, [r4, #128]	; 0x80
   288b0:	cmp	ip, r0
   288b4:	strhcc	r0, [r4, #128]	; 0x80
   288b8:	mul	r3, r3, r2
   288bc:	str	r2, [sp, #84]	; 0x54
   288c0:	ldr	r2, [r4, #136]	; 0x88
   288c4:	sub	ip, r2, r3
   288c8:	sub	r0, r0, #1
   288cc:	and	r0, r0, ip
   288d0:	mov	ip, #4
   288d4:	str	ip, [sp, #12]
   288d8:	add	lr, sp, #84	; 0x54
   288dc:	str	lr, [sp, #20]
   288e0:	str	ip, [sp, #24]
   288e4:	mov	ip, #1
   288e8:	str	ip, [sp, #16]
   288ec:	cmp	r3, #0
   288f0:	beq	2890c <flatcc_builder_create_vector@@Base+0x8c>
   288f4:	add	ip, r3, #4
   288f8:	str	ip, [sp, #12]
   288fc:	str	r1, [sp, #28]
   28900:	str	r3, [sp, #32]
   28904:	mov	r3, #2
   28908:	str	r3, [sp, #16]
   2890c:	cmp	r0, #0
   28910:	beq	28944 <flatcc_builder_create_vector@@Base+0xc4>
   28914:	ldr	r3, [sp, #12]
   28918:	add	r3, r3, r0
   2891c:	str	r3, [sp, #12]
   28920:	ldr	r3, [sp, #16]
   28924:	add	r3, r3, #1
   28928:	add	r1, sp, #88	; 0x58
   2892c:	add	ip, r1, r3, lsl #3
   28930:	movw	r1, #9964	; 0x26ec
   28934:	movt	r1, #4
   28938:	str	r1, [ip, #-76]	; 0xffffffb4
   2893c:	str	r0, [ip, #-72]	; 0xffffffb8
   28940:	str	r3, [sp, #16]
   28944:	ldr	r3, [sp, #12]
   28948:	sub	r5, r2, r3
   2894c:	cmp	r2, r5
   28950:	ble	289b0 <flatcc_builder_create_vector@@Base+0x130>
   28954:	str	r3, [sp]
   28958:	ldr	r6, [r4, #44]	; 0x2c
   2895c:	mov	r3, r5
   28960:	ldr	r2, [sp, #16]
   28964:	add	r1, sp, #20
   28968:	ldr	r0, [r4, #36]	; 0x24
   2896c:	blx	r6
   28970:	cmp	r0, #0
   28974:	bne	289cc <flatcc_builder_create_vector@@Base+0x14c>
   28978:	str	r5, [r4, #136]	; 0x88
   2897c:	mov	r0, r5
   28980:	add	sp, sp, #88	; 0x58
   28984:	ldrd	r4, [sp]
   28988:	ldr	r6, [sp, #8]
   2898c:	add	sp, sp, #12
   28990:	pop	{pc}		; (ldr pc, [sp], #4)
   28994:	ldr	r3, [pc, #76]	; 289e8 <flatcc_builder_create_vector@@Base+0x168>
   28998:	movw	r2, #1365	; 0x555
   2899c:	movw	r1, #11836	; 0x2e3c
   289a0:	movt	r1, #4
   289a4:	movw	r0, #12588	; 0x312c
   289a8:	movt	r0, #4
   289ac:	bl	145f0 <__assert_fail@plt>
   289b0:	ldr	r3, [pc, #52]	; 289ec <flatcc_builder_create_vector@@Base+0x16c>
   289b4:	movw	r2, #647	; 0x287
   289b8:	movw	r1, #11836	; 0x2e3c
   289bc:	movt	r1, #4
   289c0:	movw	r0, #11920	; 0x2e90
   289c4:	movt	r0, #4
   289c8:	bl	145f0 <__assert_fail@plt>
   289cc:	ldr	r3, [pc, #24]	; 289ec <flatcc_builder_create_vector@@Base+0x16c>
   289d0:	movw	r2, #651	; 0x28b
   289d4:	movw	r1, #11836	; 0x2e3c
   289d8:	movt	r1, #4
   289dc:	movw	r0, #11920	; 0x2e90
   289e0:	movt	r0, #4
   289e4:	bl	145f0 <__assert_fail@plt>
   289e8:	andeq	r2, r4, r8, lsr #24
   289ec:	andeq	r2, r4, r8, lsr r9

000289f0 <flatcc_builder_end_vector@@Base>:
   289f0:	strd	r4, [sp, #-12]!
   289f4:	str	lr, [sp, #8]
   289f8:	sub	sp, sp, #12
   289fc:	ldr	r1, [r0, #32]
   28a00:	ldrh	r3, [r1, #14]
   28a04:	cmp	r3, #4
   28a08:	bne	28a4c <flatcc_builder_end_vector@@Base+0x5c>
   28a0c:	mov	r4, r0
   28a10:	ldr	r3, [r1, #16]
   28a14:	ldr	r2, [r1, #20]
   28a18:	ldr	r1, [r1, #24]
   28a1c:	str	r1, [sp, #4]
   28a20:	ldrh	r1, [r0, #130]	; 0x82
   28a24:	str	r1, [sp]
   28a28:	ldr	r1, [r0, #16]
   28a2c:	bl	28880 <flatcc_builder_create_vector@@Base>
   28a30:	subs	r5, r0, #0
   28a34:	bne	28a68 <flatcc_builder_end_vector@@Base+0x78>
   28a38:	mov	r0, r5
   28a3c:	add	sp, sp, #12
   28a40:	ldrd	r4, [sp]
   28a44:	add	sp, sp, #8
   28a48:	pop	{pc}		; (ldr pc, [sp], #4)
   28a4c:	ldr	r3, [pc, #148]	; 28ae8 <flatcc_builder_end_vector@@Base+0xf8>
   28a50:	movw	r2, #1400	; 0x578
   28a54:	movw	r1, #11836	; 0x2e3c
   28a58:	movt	r1, #4
   28a5c:	movw	r0, #12148	; 0x2f74
   28a60:	movt	r0, #4
   28a64:	bl	145f0 <__assert_fail@plt>
   28a68:	ldr	r2, [r4, #20]
   28a6c:	mov	r1, #0
   28a70:	ldr	r0, [r4, #16]
   28a74:	bl	1459c <memset@plt>
   28a78:	ldr	r2, [r4, #32]
   28a7c:	ldr	r3, [r2, #8]
   28a80:	str	r3, [r4, #20]
   28a84:	ldr	r0, [r2]
   28a88:	str	r0, [r4, #28]
   28a8c:	ldr	r1, [r2, #4]
   28a90:	ldr	r3, [r4, #60]	; 0x3c
   28a94:	add	r3, r3, r0
   28a98:	str	r3, [r4, #16]
   28a9c:	ldr	r3, [r4, #64]	; 0x40
   28aa0:	sub	r3, r3, r0
   28aa4:	cmp	r3, r1
   28aa8:	movcs	r3, r1
   28aac:	str	r3, [r4, #24]
   28ab0:	str	r1, [r2, #4]
   28ab4:	ldrh	r3, [r4, #130]	; 0x82
   28ab8:	ldrh	r2, [r4, #128]	; 0x80
   28abc:	cmp	r2, r3
   28ac0:	strhcc	r3, [r4, #128]	; 0x80
   28ac4:	ldr	r3, [r4, #32]
   28ac8:	ldrh	r2, [r3, #12]
   28acc:	strh	r2, [r4, #130]	; 0x82
   28ad0:	sub	r3, r3, #36	; 0x24
   28ad4:	str	r3, [r4, #32]
   28ad8:	ldr	r3, [r4, #156]	; 0x9c
   28adc:	sub	r3, r3, #1
   28ae0:	str	r3, [r4, #156]	; 0x9c
   28ae4:	b	28a38 <flatcc_builder_end_vector@@Base+0x48>
   28ae8:	andeq	r2, r4, r8, asr #24

00028aec <flatcc_builder_vector_count@@Base>:
   28aec:	ldr	r3, [r0, #32]
   28af0:	ldr	r0, [r3, #20]
   28af4:	bx	lr

00028af8 <flatcc_builder_vector_edit@@Base>:
   28af8:	ldr	r0, [r0, #16]
   28afc:	bx	lr

00028b00 <flatcc_builder_create_offset_vector_direct@@Base>:
   28b00:	str	r4, [sp, #-8]!
   28b04:	str	lr, [sp, #4]
   28b08:	mov	r3, #0
   28b0c:	bl	25f5c <flatcc_builder_default_alloc@@Base+0x3b8>
   28b10:	ldr	r4, [sp]
   28b14:	add	sp, sp, #4
   28b18:	pop	{pc}		; (ldr pc, [sp], #4)

00028b1c <flatcc_builder_end_offset_vector@@Base>:
   28b1c:	strd	r4, [sp, #-16]!
   28b20:	str	r6, [sp, #8]
   28b24:	str	lr, [sp, #12]
   28b28:	ldr	r3, [r0, #32]
   28b2c:	ldrh	r2, [r3, #14]
   28b30:	cmp	r2, #5
   28b34:	bne	28b64 <flatcc_builder_end_offset_vector@@Base+0x48>
   28b38:	mov	r4, r0
   28b3c:	ldr	r2, [r3, #20]
   28b40:	ldr	r1, [r0, #16]
   28b44:	bl	28b00 <flatcc_builder_create_offset_vector_direct@@Base>
   28b48:	subs	r5, r0, #0
   28b4c:	bne	28b80 <flatcc_builder_end_offset_vector@@Base+0x64>
   28b50:	mov	r0, r5
   28b54:	ldrd	r4, [sp]
   28b58:	ldr	r6, [sp, #8]
   28b5c:	add	sp, sp, #12
   28b60:	pop	{pc}		; (ldr pc, [sp], #4)
   28b64:	ldr	r3, [pc, #148]	; 28c00 <flatcc_builder_end_offset_vector@@Base+0xe4>
   28b68:	movw	r2, #1480	; 0x5c8
   28b6c:	movw	r1, #11836	; 0x2e3c
   28b70:	movt	r1, #4
   28b74:	movw	r0, #12256	; 0x2fe0
   28b78:	movt	r0, #4
   28b7c:	bl	145f0 <__assert_fail@plt>
   28b80:	ldr	r2, [r4, #20]
   28b84:	mov	r1, #0
   28b88:	ldr	r0, [r4, #16]
   28b8c:	bl	1459c <memset@plt>
   28b90:	ldr	r2, [r4, #32]
   28b94:	ldr	r3, [r2, #8]
   28b98:	str	r3, [r4, #20]
   28b9c:	ldr	r0, [r2]
   28ba0:	str	r0, [r4, #28]
   28ba4:	ldr	r1, [r2, #4]
   28ba8:	ldr	r3, [r4, #60]	; 0x3c
   28bac:	add	r3, r3, r0
   28bb0:	str	r3, [r4, #16]
   28bb4:	ldr	r3, [r4, #64]	; 0x40
   28bb8:	sub	r3, r3, r0
   28bbc:	cmp	r3, r1
   28bc0:	movcs	r3, r1
   28bc4:	str	r3, [r4, #24]
   28bc8:	str	r1, [r2, #4]
   28bcc:	ldrh	r3, [r4, #130]	; 0x82
   28bd0:	ldrh	r2, [r4, #128]	; 0x80
   28bd4:	cmp	r2, r3
   28bd8:	strhcc	r3, [r4, #128]	; 0x80
   28bdc:	ldr	r3, [r4, #32]
   28be0:	ldrh	r2, [r3, #12]
   28be4:	strh	r2, [r4, #130]	; 0x82
   28be8:	sub	r3, r3, #36	; 0x24
   28bec:	str	r3, [r4, #32]
   28bf0:	ldr	r3, [r4, #156]	; 0x9c
   28bf4:	sub	r3, r3, #1
   28bf8:	str	r3, [r4, #156]	; 0x9c
   28bfc:	b	28b50 <flatcc_builder_end_offset_vector@@Base+0x34>
   28c00:	andeq	r2, r4, r4, ror #24

00028c04 <flatcc_builder_create_offset_vector@@Base>:
   28c04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28c08:	strd	r6, [sp, #8]
   28c0c:	str	r8, [sp, #16]
   28c10:	str	lr, [sp, #20]
   28c14:	mov	r5, r0
   28c18:	mov	r7, r1
   28c1c:	mov	r6, r2
   28c20:	bl	2798c <flatcc_builder_start_offset_vector@@Base>
   28c24:	subs	r4, r0, #0
   28c28:	movne	r4, #0
   28c2c:	beq	28c48 <flatcc_builder_create_offset_vector@@Base+0x44>
   28c30:	mov	r0, r4
   28c34:	ldrd	r4, [sp]
   28c38:	ldrd	r6, [sp, #8]
   28c3c:	ldr	r8, [sp, #16]
   28c40:	add	sp, sp, #20
   28c44:	pop	{pc}		; (ldr pc, [sp], #4)
   28c48:	mov	r1, r6
   28c4c:	mov	r0, r5
   28c50:	bl	27290 <flatcc_builder_extend_offset_vector@@Base>
   28c54:	cmp	r0, #0
   28c58:	beq	28c30 <flatcc_builder_create_offset_vector@@Base+0x2c>
   28c5c:	lsl	r2, r6, #2
   28c60:	mov	r1, r7
   28c64:	bl	14524 <memcpy@plt>
   28c68:	mov	r0, r5
   28c6c:	bl	28b1c <flatcc_builder_end_offset_vector@@Base>
   28c70:	mov	r4, r0
   28c74:	b	28c30 <flatcc_builder_create_offset_vector@@Base+0x2c>

00028c78 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   28c78:	strd	r4, [sp, #-16]!
   28c7c:	str	r6, [sp, #8]
   28c80:	str	lr, [sp, #12]
   28c84:	mov	r4, r0
   28c88:	ldr	r2, [r0, #32]
   28c8c:	ldrh	r0, [r2, #14]
   28c90:	cmp	r0, #5
   28c94:	bne	28cc8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   28c98:	mov	r3, r1
   28c9c:	ldr	r2, [r2, #20]
   28ca0:	ldr	r1, [r4, #16]
   28ca4:	mov	r0, r4
   28ca8:	bl	25f5c <flatcc_builder_default_alloc@@Base+0x3b8>
   28cac:	subs	r5, r0, #0
   28cb0:	bne	28ce4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   28cb4:	mov	r0, r5
   28cb8:	ldrd	r4, [sp]
   28cbc:	ldr	r6, [sp, #8]
   28cc0:	add	sp, sp, #12
   28cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   28cc8:	ldr	r3, [pc, #148]	; 28d64 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   28ccc:	movw	r2, #1493	; 0x5d5
   28cd0:	movw	r1, #11836	; 0x2e3c
   28cd4:	movt	r1, #4
   28cd8:	movw	r0, #12256	; 0x2fe0
   28cdc:	movt	r0, #4
   28ce0:	bl	145f0 <__assert_fail@plt>
   28ce4:	ldr	r2, [r4, #20]
   28ce8:	mov	r1, #0
   28cec:	ldr	r0, [r4, #16]
   28cf0:	bl	1459c <memset@plt>
   28cf4:	ldr	r2, [r4, #32]
   28cf8:	ldr	r3, [r2, #8]
   28cfc:	str	r3, [r4, #20]
   28d00:	ldr	r0, [r2]
   28d04:	str	r0, [r4, #28]
   28d08:	ldr	r1, [r2, #4]
   28d0c:	ldr	r3, [r4, #60]	; 0x3c
   28d10:	add	r3, r3, r0
   28d14:	str	r3, [r4, #16]
   28d18:	ldr	r3, [r4, #64]	; 0x40
   28d1c:	sub	r3, r3, r0
   28d20:	cmp	r3, r1
   28d24:	movcs	r3, r1
   28d28:	str	r3, [r4, #24]
   28d2c:	str	r1, [r2, #4]
   28d30:	ldrh	r3, [r4, #130]	; 0x82
   28d34:	ldrh	r2, [r4, #128]	; 0x80
   28d38:	cmp	r2, r3
   28d3c:	strhcc	r3, [r4, #128]	; 0x80
   28d40:	ldr	r3, [r4, #32]
   28d44:	ldrh	r2, [r3, #12]
   28d48:	strh	r2, [r4, #130]	; 0x82
   28d4c:	sub	r3, r3, #36	; 0x24
   28d50:	str	r3, [r4, #32]
   28d54:	ldr	r3, [r4, #156]	; 0x9c
   28d58:	sub	r3, r3, #1
   28d5c:	str	r3, [r4, #156]	; 0x9c
   28d60:	b	28cb4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   28d64:	andeq	r2, r4, r8, lsl #25

00028d68 <flatcc_builder_offset_vector_edit@@Base>:
   28d68:	ldr	r0, [r0, #16]
   28d6c:	bx	lr

00028d70 <flatcc_builder_offset_vector_count@@Base>:
   28d70:	ldr	r3, [r0, #32]
   28d74:	ldr	r0, [r3, #20]
   28d78:	bx	lr

00028d7c <flatcc_builder_create_union_vector_direct@@Base>:
   28d7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   28d80:	strd	r6, [sp, #8]
   28d84:	str	lr, [sp, #16]
   28d88:	sub	sp, sp, #12
   28d8c:	mov	r4, r0
   28d90:	mov	r5, r1
   28d94:	mov	r6, r2
   28d98:	mov	r1, r3
   28d9c:	mov	r3, r2
   28da0:	ldr	r2, [sp, #32]
   28da4:	mov	r0, r5
   28da8:	bl	25f5c <flatcc_builder_default_alloc@@Base+0x3b8>
   28dac:	subs	r7, r0, #0
   28db0:	bne	28dd8 <flatcc_builder_create_union_vector_direct@@Base+0x5c>
   28db4:	mov	r3, #0
   28db8:	str	r3, [r4]
   28dbc:	str	r3, [r4, #4]
   28dc0:	mov	r0, r4
   28dc4:	add	sp, sp, #12
   28dc8:	ldrd	r4, [sp]
   28dcc:	ldrd	r6, [sp, #8]
   28dd0:	add	sp, sp, #16
   28dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   28dd8:	mvn	r3, #0
   28ddc:	str	r3, [sp, #4]
   28de0:	mov	r3, #1
   28de4:	str	r3, [sp]
   28de8:	ldr	r2, [sp, #32]
   28dec:	mov	r1, r6
   28df0:	mov	r0, r5
   28df4:	bl	28880 <flatcc_builder_create_vector@@Base>
   28df8:	cmp	r0, #0
   28dfc:	moveq	r3, #0
   28e00:	streq	r3, [r4]
   28e04:	strne	r0, [r4]
   28e08:	str	r7, [r4, #4]
   28e0c:	b	28dc0 <flatcc_builder_create_union_vector_direct@@Base+0x44>

00028e10 <flatcc_builder_create_union_vector@@Base>:
   28e10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28e14:	strd	r6, [sp, #8]
   28e18:	str	r8, [sp, #16]
   28e1c:	str	lr, [sp, #20]
   28e20:	sub	sp, sp, #16
   28e24:	mov	r5, r0
   28e28:	mov	r4, r1
   28e2c:	mov	r7, r2
   28e30:	mov	r6, r3
   28e34:	mov	r0, r1
   28e38:	bl	2798c <flatcc_builder_start_offset_vector@@Base>
   28e3c:	cmp	r0, #0
   28e40:	beq	28e6c <flatcc_builder_create_union_vector@@Base+0x5c>
   28e44:	mov	r3, #0
   28e48:	str	r3, [r5]
   28e4c:	str	r3, [r5, #4]
   28e50:	mov	r0, r5
   28e54:	add	sp, sp, #16
   28e58:	ldrd	r4, [sp]
   28e5c:	ldrd	r6, [sp, #8]
   28e60:	ldr	r8, [sp, #16]
   28e64:	add	sp, sp, #20
   28e68:	pop	{pc}		; (ldr pc, [sp], #4)
   28e6c:	mov	r1, r6
   28e70:	mov	r0, r4
   28e74:	bl	27290 <flatcc_builder_extend_offset_vector@@Base>
   28e78:	cmp	r0, #0
   28e7c:	moveq	r3, #0
   28e80:	streq	r3, [r5]
   28e84:	streq	r3, [r5, #4]
   28e88:	beq	28e50 <flatcc_builder_create_union_vector@@Base+0x40>
   28e8c:	ldr	r8, [r4, #20]
   28e90:	add	r1, r6, r8
   28e94:	str	r1, [r4, #20]
   28e98:	ldr	r3, [r4, #24]
   28e9c:	cmp	r1, r3
   28ea0:	bcs	28f84 <flatcc_builder_create_union_vector@@Base+0x174>
   28ea4:	ldr	r3, [r4, #16]
   28ea8:	adds	r2, r3, r8
   28eac:	beq	28f9c <flatcc_builder_create_union_vector@@Base+0x18c>
   28eb0:	cmp	r6, #0
   28eb4:	beq	28ee4 <flatcc_builder_create_union_vector@@Base+0xd4>
   28eb8:	mov	r1, r7
   28ebc:	sub	ip, r2, #1
   28ec0:	sub	r0, r3, #4
   28ec4:	add	r7, r7, r6, lsl #3
   28ec8:	ldrb	lr, [r1]
   28ecc:	strb	lr, [ip, #1]!
   28ed0:	ldr	lr, [r1, #4]
   28ed4:	str	lr, [r0, #4]!
   28ed8:	add	r1, r1, #8
   28edc:	cmp	r1, r7
   28ee0:	bne	28ec8 <flatcc_builder_create_union_vector@@Base+0xb8>
   28ee4:	str	r6, [sp]
   28ee8:	mov	r1, r4
   28eec:	add	r0, sp, #8
   28ef0:	bl	28d7c <flatcc_builder_create_union_vector_direct@@Base>
   28ef4:	ldr	r7, [sp, #8]
   28ef8:	ldr	r6, [sp, #12]
   28efc:	ldr	r2, [r4, #20]
   28f00:	mov	r1, #0
   28f04:	ldr	r0, [r4, #16]
   28f08:	bl	1459c <memset@plt>
   28f0c:	ldr	r2, [r4, #32]
   28f10:	ldr	r3, [r2, #8]
   28f14:	str	r3, [r4, #20]
   28f18:	ldr	r0, [r2]
   28f1c:	str	r0, [r4, #28]
   28f20:	ldr	r1, [r2, #4]
   28f24:	ldr	r3, [r4, #60]	; 0x3c
   28f28:	add	r3, r3, r0
   28f2c:	str	r3, [r4, #16]
   28f30:	ldr	r3, [r4, #64]	; 0x40
   28f34:	sub	r3, r3, r0
   28f38:	cmp	r3, r1
   28f3c:	movcs	r3, r1
   28f40:	str	r3, [r4, #24]
   28f44:	str	r1, [r2, #4]
   28f48:	ldrh	r3, [r4, #130]	; 0x82
   28f4c:	ldrh	r2, [r4, #128]	; 0x80
   28f50:	cmp	r2, r3
   28f54:	strhcc	r3, [r4, #128]	; 0x80
   28f58:	ldr	r3, [r4, #32]
   28f5c:	ldrh	r2, [r3, #12]
   28f60:	strh	r2, [r4, #130]	; 0x82
   28f64:	sub	r3, r3, #36	; 0x24
   28f68:	str	r3, [r4, #32]
   28f6c:	ldr	r3, [r4, #156]	; 0x9c
   28f70:	sub	r3, r3, #1
   28f74:	str	r3, [r4, #156]	; 0x9c
   28f78:	str	r7, [r5]
   28f7c:	str	r6, [r5, #4]
   28f80:	b	28e50 <flatcc_builder_create_union_vector@@Base+0x40>
   28f84:	mvn	r2, #3
   28f88:	add	r1, r1, #1
   28f8c:	mov	r0, r4
   28f90:	bl	25b1c <main@@Base+0xd20>
   28f94:	cmp	r0, #0
   28f98:	beq	28ea4 <flatcc_builder_create_union_vector@@Base+0x94>
   28f9c:	mov	r3, #0
   28fa0:	str	r3, [r5]
   28fa4:	str	r3, [r5, #4]
   28fa8:	b	28e50 <flatcc_builder_create_union_vector@@Base+0x40>

00028fac <flatcc_builder_start_union_vector@@Base>:
   28fac:	str	r4, [sp, #-8]!
   28fb0:	str	lr, [sp, #4]
   28fb4:	mov	r4, r0
   28fb8:	mov	r1, #4
   28fbc:	bl	25df0 <flatcc_builder_default_alloc@@Base+0x24c>
   28fc0:	cmp	r0, #0
   28fc4:	bne	29028 <flatcc_builder_start_union_vector@@Base+0x7c>
   28fc8:	ldr	r3, [r4, #32]
   28fcc:	mov	r2, #8
   28fd0:	str	r2, [r3, #16]
   28fd4:	ldr	r3, [r4, #32]
   28fd8:	mov	r2, #0
   28fdc:	str	r2, [r3, #20]
   28fe0:	ldr	r3, [r4, #32]
   28fe4:	mov	r2, #7
   28fe8:	strh	r2, [r3, #14]
   28fec:	ldr	r1, [r4, #28]
   28ff0:	ldr	r2, [r4, #60]	; 0x3c
   28ff4:	add	r2, r2, r1
   28ff8:	str	r2, [r4, #16]
   28ffc:	ldr	r3, [r4, #64]	; 0x40
   29000:	sub	r3, r3, r1
   29004:	cmn	r3, #4
   29008:	mvnhi	r3, #3
   2900c:	str	r3, [r4, #24]
   29010:	ldr	r3, [r4, #32]
   29014:	mvn	r2, #3
   29018:	str	r2, [r3, #4]
   2901c:	ldr	r4, [sp]
   29020:	add	sp, sp, #4
   29024:	pop	{pc}		; (ldr pc, [sp], #4)
   29028:	mvn	r0, #0
   2902c:	b	2901c <flatcc_builder_start_union_vector@@Base+0x70>

00029030 <flatcc_builder_end_union_vector@@Base>:
   29030:	strd	r4, [sp, #-24]!	; 0xffffffe8
   29034:	strd	r6, [sp, #8]
   29038:	str	r8, [sp, #16]
   2903c:	str	lr, [sp, #20]
   29040:	sub	sp, sp, #16
   29044:	ldr	r3, [r1, #32]
   29048:	ldrh	r2, [r3, #14]
   2904c:	cmp	r2, #7
   29050:	bne	29178 <flatcc_builder_end_union_vector@@Base+0x148>
   29054:	mov	r6, r0
   29058:	mov	r4, r1
   2905c:	ldr	r5, [r3, #20]
   29060:	ldr	r8, [r1, #20]
   29064:	add	r1, r5, r5, lsl #2
   29068:	add	r1, r1, r8
   2906c:	str	r1, [r4, #20]
   29070:	ldr	r3, [r4, #24]
   29074:	cmp	r1, r3
   29078:	bcs	29194 <flatcc_builder_end_union_vector@@Base+0x164>
   2907c:	ldr	r7, [r4, #16]
   29080:	adds	r3, r7, r8
   29084:	beq	291ac <flatcc_builder_end_union_vector@@Base+0x17c>
   29088:	add	r2, r3, r5, lsl #2
   2908c:	cmp	r5, #0
   29090:	beq	290c0 <flatcc_builder_end_union_vector@@Base+0x90>
   29094:	mov	r1, r7
   29098:	sub	ip, r2, #1
   2909c:	sub	r0, r3, #4
   290a0:	add	r7, r7, r5, lsl #3
   290a4:	ldrb	lr, [r1]
   290a8:	strb	lr, [ip, #1]!
   290ac:	ldr	lr, [r1, #4]
   290b0:	str	lr, [r0, #4]!
   290b4:	add	r1, r1, #8
   290b8:	cmp	r1, r7
   290bc:	bne	290a4 <flatcc_builder_end_union_vector@@Base+0x74>
   290c0:	str	r5, [sp]
   290c4:	mov	r1, r4
   290c8:	add	r0, sp, #8
   290cc:	bl	28d7c <flatcc_builder_create_union_vector_direct@@Base>
   290d0:	ldr	r7, [sp, #8]
   290d4:	ldr	r5, [sp, #12]
   290d8:	ldr	r2, [r4, #20]
   290dc:	mov	r1, #0
   290e0:	ldr	r0, [r4, #16]
   290e4:	bl	1459c <memset@plt>
   290e8:	ldr	r2, [r4, #32]
   290ec:	ldr	r3, [r2, #8]
   290f0:	str	r3, [r4, #20]
   290f4:	ldr	r0, [r2]
   290f8:	str	r0, [r4, #28]
   290fc:	ldr	r1, [r2, #4]
   29100:	ldr	r3, [r4, #60]	; 0x3c
   29104:	add	r3, r3, r0
   29108:	str	r3, [r4, #16]
   2910c:	ldr	r3, [r4, #64]	; 0x40
   29110:	sub	r3, r3, r0
   29114:	cmp	r3, r1
   29118:	movcs	r3, r1
   2911c:	str	r3, [r4, #24]
   29120:	str	r1, [r2, #4]
   29124:	ldrh	r3, [r4, #130]	; 0x82
   29128:	ldrh	r2, [r4, #128]	; 0x80
   2912c:	cmp	r2, r3
   29130:	strhcc	r3, [r4, #128]	; 0x80
   29134:	ldr	r3, [r4, #32]
   29138:	ldrh	r2, [r3, #12]
   2913c:	strh	r2, [r4, #130]	; 0x82
   29140:	sub	r3, r3, #36	; 0x24
   29144:	str	r3, [r4, #32]
   29148:	ldr	r3, [r4, #156]	; 0x9c
   2914c:	sub	r3, r3, #1
   29150:	str	r3, [r4, #156]	; 0x9c
   29154:	str	r7, [r6]
   29158:	str	r5, [r6, #4]
   2915c:	mov	r0, r6
   29160:	add	sp, sp, #16
   29164:	ldrd	r4, [sp]
   29168:	ldrd	r6, [sp, #8]
   2916c:	ldr	r8, [sp, #16]
   29170:	add	sp, sp, #20
   29174:	pop	{pc}		; (ldr pc, [sp], #4)
   29178:	ldr	r3, [pc, #60]	; 291bc <flatcc_builder_end_union_vector@@Base+0x18c>
   2917c:	movw	r2, #1617	; 0x651
   29180:	movw	r1, #11836	; 0x2e3c
   29184:	movt	r1, #4
   29188:	movw	r0, #12608	; 0x3140
   2918c:	movt	r0, #4
   29190:	bl	145f0 <__assert_fail@plt>
   29194:	mvn	r2, #3
   29198:	add	r1, r1, #1
   2919c:	mov	r0, r4
   291a0:	bl	25b1c <main@@Base+0xd20>
   291a4:	cmp	r0, #0
   291a8:	beq	2907c <flatcc_builder_end_union_vector@@Base+0x4c>
   291ac:	mov	r3, #0
   291b0:	str	r3, [r6]
   291b4:	str	r3, [r6, #4]
   291b8:	b	2915c <flatcc_builder_end_union_vector@@Base+0x12c>
   291bc:			; <UNDEFINED> instruction: 0x00042cb4

000291c0 <flatcc_builder_union_vector_edit@@Base>:
   291c0:	ldr	r0, [r0, #16]
   291c4:	bx	lr

000291c8 <flatcc_builder_union_vector_count@@Base>:
   291c8:	ldr	r3, [r0, #32]
   291cc:	ldr	r0, [r3, #20]
   291d0:	bx	lr

000291d4 <flatcc_builder_extend_union_vector@@Base>:
   291d4:	strd	r4, [sp, #-16]!
   291d8:	str	r6, [sp, #8]
   291dc:	str	lr, [sp, #12]
   291e0:	mov	r4, r0
   291e4:	ldr	r2, [r0, #32]
   291e8:	ldr	r3, [r2, #20]
   291ec:	adds	r3, r1, r3
   291f0:	movcs	ip, #1
   291f4:	movcc	ip, #0
   291f8:	cmn	r3, #-536870911	; 0xe0000001
   291fc:	movls	r0, #0
   29200:	movhi	r0, #1
   29204:	orrs	r0, ip, r0
   29208:	bne	29240 <flatcc_builder_extend_union_vector@@Base+0x6c>
   2920c:	str	r3, [r2, #20]
   29210:	ldr	r5, [r4, #20]
   29214:	add	r1, r5, r1, lsl #3
   29218:	str	r1, [r4, #20]
   2921c:	ldr	r3, [r4, #24]
   29220:	cmp	r1, r3
   29224:	bcs	2925c <flatcc_builder_extend_union_vector@@Base+0x88>
   29228:	ldr	r0, [r4, #16]
   2922c:	add	r0, r0, r5
   29230:	ldrd	r4, [sp]
   29234:	ldr	r6, [sp, #8]
   29238:	add	sp, sp, #12
   2923c:	pop	{pc}		; (ldr pc, [sp], #4)
   29240:	ldr	r3, [pc, #52]	; 2927c <flatcc_builder_extend_union_vector@@Base+0xa8>
   29244:	mov	r2, #892	; 0x37c
   29248:	movw	r1, #11836	; 0x2e3c
   2924c:	movt	r1, #4
   29250:	movw	r0, #12120	; 0x2f58
   29254:	movt	r0, #4
   29258:	bl	145f0 <__assert_fail@plt>
   2925c:	mvn	r2, #3
   29260:	add	r1, r1, #1
   29264:	mov	r0, r4
   29268:	bl	25b1c <main@@Base+0xd20>
   2926c:	cmp	r0, #0
   29270:	movne	r0, #0
   29274:	beq	29228 <flatcc_builder_extend_union_vector@@Base+0x54>
   29278:	b	29230 <flatcc_builder_extend_union_vector@@Base+0x5c>
   2927c:	andeq	r2, r4, ip, lsl sl

00029280 <flatcc_builder_truncate_union_vector@@Base>:
   29280:	str	r4, [sp, #-8]!
   29284:	str	lr, [sp, #4]
   29288:	ldr	ip, [r0, #32]
   2928c:	ldrh	r3, [ip, #14]
   29290:	cmp	r3, #7
   29294:	bne	292e4 <flatcc_builder_truncate_union_vector@@Base+0x64>
   29298:	ldr	r3, [ip, #20]
   2929c:	cmp	r3, r1
   292a0:	bcc	29300 <flatcc_builder_truncate_union_vector@@Base+0x80>
   292a4:	sub	r3, r3, r1
   292a8:	str	r3, [ip, #20]
   292ac:	ldr	r3, [r0, #32]
   292b0:	ldr	r2, [r3, #16]
   292b4:	mul	r2, r2, r1
   292b8:	ldr	r3, [r0, #20]
   292bc:	sub	r3, r3, r2
   292c0:	str	r3, [r0, #20]
   292c4:	ldr	r0, [r0, #16]
   292c8:	mov	r1, #0
   292cc:	add	r0, r0, r3
   292d0:	bl	1459c <memset@plt>
   292d4:	mov	r0, #0
   292d8:	ldr	r4, [sp]
   292dc:	add	sp, sp, #4
   292e0:	pop	{pc}		; (ldr pc, [sp], #4)
   292e4:	ldr	r3, [pc, #48]	; 2931c <flatcc_builder_truncate_union_vector@@Base+0x9c>
   292e8:	movw	r2, #1665	; 0x681
   292ec:	movw	r1, #11836	; 0x2e3c
   292f0:	movt	r1, #4
   292f4:	movw	r0, #12608	; 0x3140
   292f8:	movt	r0, #4
   292fc:	bl	145f0 <__assert_fail@plt>
   29300:	ldr	r3, [pc, #20]	; 2931c <flatcc_builder_truncate_union_vector@@Base+0x9c>
   29304:	movw	r2, #1666	; 0x682
   29308:	movw	r1, #11836	; 0x2e3c
   2930c:	movt	r1, #4
   29310:	movw	r0, #12388	; 0x3064
   29314:	movt	r0, #4
   29318:	bl	145f0 <__assert_fail@plt>
   2931c:	ldrdeq	r2, [r4], -r4

00029320 <flatcc_builder_union_vector_push@@Base>:
   29320:	strd	r4, [sp, #-20]!	; 0xffffffec
   29324:	strd	r6, [sp, #8]
   29328:	str	lr, [sp, #16]
   2932c:	sub	sp, sp, #12
   29330:	add	r3, sp, #8
   29334:	stmdb	r3, {r1, r2}
   29338:	ldr	r2, [r0, #32]
   2933c:	ldrh	r3, [r2, #14]
   29340:	cmp	r3, #7
   29344:	bne	293a0 <flatcc_builder_union_vector_push@@Base+0x80>
   29348:	mov	r4, r0
   2934c:	ldr	r3, [r2, #20]
   29350:	cmn	r3, #-536870911	; 0xe0000001
   29354:	moveq	r0, #0
   29358:	beq	2938c <flatcc_builder_union_vector_push@@Base+0x6c>
   2935c:	add	r3, r3, #1
   29360:	str	r3, [r2, #20]
   29364:	ldr	r5, [r4, #20]
   29368:	add	r3, r5, #8
   2936c:	str	r3, [r4, #20]
   29370:	ldr	r2, [r4, #24]
   29374:	cmp	r3, r2
   29378:	bcs	293bc <flatcc_builder_union_vector_push@@Base+0x9c>
   2937c:	ldr	r3, [r4, #16]
   29380:	adds	r0, r3, r5
   29384:	ldrdne	r6, [sp]
   29388:	strdne	r6, [r3, r5]
   2938c:	add	sp, sp, #12
   29390:	ldrd	r4, [sp]
   29394:	ldrd	r6, [sp, #8]
   29398:	add	sp, sp, #16
   2939c:	pop	{pc}		; (ldr pc, [sp], #4)
   293a0:	ldr	r3, [pc, #52]	; 293dc <flatcc_builder_union_vector_push@@Base+0xbc>
   293a4:	movw	r2, #1677	; 0x68d
   293a8:	movw	r1, #11836	; 0x2e3c
   293ac:	movt	r1, #4
   293b0:	movw	r0, #12608	; 0x3140
   293b4:	movt	r0, #4
   293b8:	bl	145f0 <__assert_fail@plt>
   293bc:	mvn	r2, #3
   293c0:	add	r1, r5, #9
   293c4:	mov	r0, r4
   293c8:	bl	25b1c <main@@Base+0xd20>
   293cc:	cmp	r0, #0
   293d0:	movne	r0, #0
   293d4:	beq	2937c <flatcc_builder_union_vector_push@@Base+0x5c>
   293d8:	b	2938c <flatcc_builder_union_vector_push@@Base+0x6c>
   293dc:	strdeq	r2, [r4], -ip

000293e0 <flatcc_builder_append_union_vector@@Base>:
   293e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   293e4:	strd	r6, [sp, #8]
   293e8:	str	r8, [sp, #16]
   293ec:	str	lr, [sp, #20]
   293f0:	mov	r6, r1
   293f4:	ldr	r1, [r0, #32]
   293f8:	ldrh	r3, [r1, #14]
   293fc:	cmp	r3, #7
   29400:	bne	29480 <flatcc_builder_append_union_vector@@Base+0xa0>
   29404:	mov	r5, r0
   29408:	ldr	r3, [r1, #20]
   2940c:	adds	r3, r2, r3
   29410:	movcs	ip, #1
   29414:	movcc	ip, #0
   29418:	cmn	r3, #-536870911	; 0xe0000001
   2941c:	movls	r0, #0
   29420:	movhi	r0, #1
   29424:	orrs	r0, ip, r0
   29428:	bne	2949c <flatcc_builder_append_union_vector@@Base+0xbc>
   2942c:	str	r3, [r1, #20]
   29430:	lsl	r4, r2, #3
   29434:	ldr	r7, [r5, #20]
   29438:	add	r1, r4, r7
   2943c:	str	r1, [r5, #20]
   29440:	ldr	r3, [r5, #24]
   29444:	cmp	r1, r3
   29448:	bcs	294b8 <flatcc_builder_append_union_vector@@Base+0xd8>
   2944c:	ldr	r5, [r5, #16]
   29450:	adds	r5, r5, r7
   29454:	beq	29468 <flatcc_builder_append_union_vector@@Base+0x88>
   29458:	mov	r2, r4
   2945c:	mov	r1, r6
   29460:	mov	r0, r5
   29464:	bl	14524 <memcpy@plt>
   29468:	mov	r0, r5
   2946c:	ldrd	r4, [sp]
   29470:	ldrd	r6, [sp, #8]
   29474:	ldr	r8, [sp, #16]
   29478:	add	sp, sp, #20
   2947c:	pop	{pc}		; (ldr pc, [sp], #4)
   29480:	ldr	r3, [pc, #80]	; 294d8 <flatcc_builder_append_union_vector@@Base+0xf8>
   29484:	movw	r2, #1692	; 0x69c
   29488:	movw	r1, #11836	; 0x2e3c
   2948c:	movt	r1, #4
   29490:	movw	r0, #12608	; 0x3140
   29494:	movt	r0, #4
   29498:	bl	145f0 <__assert_fail@plt>
   2949c:	ldr	r3, [pc, #56]	; 294dc <flatcc_builder_append_union_vector@@Base+0xfc>
   294a0:	mov	r2, #892	; 0x37c
   294a4:	movw	r1, #11836	; 0x2e3c
   294a8:	movt	r1, #4
   294ac:	movw	r0, #12120	; 0x2f58
   294b0:	movt	r0, #4
   294b4:	bl	145f0 <__assert_fail@plt>
   294b8:	mvn	r2, #3
   294bc:	add	r1, r1, #1
   294c0:	mov	r0, r5
   294c4:	bl	25b1c <main@@Base+0xd20>
   294c8:	cmp	r0, #0
   294cc:	movne	r5, #0
   294d0:	beq	2944c <flatcc_builder_append_union_vector@@Base+0x6c>
   294d4:	b	29468 <flatcc_builder_append_union_vector@@Base+0x88>
   294d8:	andeq	r2, r4, r0, lsr #26
   294dc:	andeq	r2, r4, ip, lsl sl

000294e0 <flatcc_builder_create_string@@Base>:
   294e0:	strd	r4, [sp, #-16]!
   294e4:	str	r6, [sp, #8]
   294e8:	str	lr, [sp, #12]
   294ec:	sub	sp, sp, #88	; 0x58
   294f0:	mov	r4, r0
   294f4:	str	r2, [sp, #84]	; 0x54
   294f8:	ldr	r0, [r0, #136]	; 0x88
   294fc:	sub	r3, r0, r2
   29500:	sub	r3, r3, #1
   29504:	and	r3, r3, #3
   29508:	add	r3, r3, #1
   2950c:	mov	ip, #4
   29510:	str	ip, [sp, #12]
   29514:	add	lr, sp, #84	; 0x54
   29518:	str	lr, [sp, #20]
   2951c:	str	ip, [sp, #24]
   29520:	mov	ip, #1
   29524:	str	ip, [sp, #16]
   29528:	cmp	r2, #0
   2952c:	beq	29548 <flatcc_builder_create_string@@Base+0x68>
   29530:	add	ip, r2, #4
   29534:	str	ip, [sp, #12]
   29538:	str	r1, [sp, #28]
   2953c:	str	r2, [sp, #32]
   29540:	mov	r2, #2
   29544:	str	r2, [sp, #16]
   29548:	ldr	r1, [sp, #12]
   2954c:	add	r1, r3, r1
   29550:	str	r1, [sp, #12]
   29554:	ldr	r2, [sp, #16]
   29558:	add	r2, r2, #1
   2955c:	add	ip, sp, #88	; 0x58
   29560:	add	lr, ip, r2, lsl #3
   29564:	movw	ip, #9964	; 0x26ec
   29568:	movt	ip, #4
   2956c:	str	ip, [lr, #-76]	; 0xffffffb4
   29570:	str	r3, [lr, #-72]	; 0xffffffb8
   29574:	str	r2, [sp, #16]
   29578:	sub	r5, r0, r1
   2957c:	cmp	r0, r5
   29580:	ble	295c0 <flatcc_builder_create_string@@Base+0xe0>
   29584:	str	r1, [sp]
   29588:	ldr	r6, [r4, #44]	; 0x2c
   2958c:	mov	r3, r5
   29590:	add	r1, sp, #20
   29594:	ldr	r0, [r4, #36]	; 0x24
   29598:	blx	r6
   2959c:	cmp	r0, #0
   295a0:	bne	295dc <flatcc_builder_create_string@@Base+0xfc>
   295a4:	str	r5, [r4, #136]	; 0x88
   295a8:	mov	r0, r5
   295ac:	add	sp, sp, #88	; 0x58
   295b0:	ldrd	r4, [sp]
   295b4:	ldr	r6, [sp, #8]
   295b8:	add	sp, sp, #12
   295bc:	pop	{pc}		; (ldr pc, [sp], #4)
   295c0:	add	r3, ip, #588	; 0x24c
   295c4:	movw	r2, #647	; 0x287
   295c8:	movw	r1, #11836	; 0x2e3c
   295cc:	movt	r1, #4
   295d0:	movw	r0, #11920	; 0x2e90
   295d4:	movt	r0, #4
   295d8:	bl	145f0 <__assert_fail@plt>
   295dc:	ldr	r3, [pc, #20]	; 295f8 <flatcc_builder_create_string@@Base+0x118>
   295e0:	movw	r2, #651	; 0x28b
   295e4:	movw	r1, #11836	; 0x2e3c
   295e8:	movt	r1, #4
   295ec:	movw	r0, #11920	; 0x2e90
   295f0:	movt	r0, #4
   295f4:	bl	145f0 <__assert_fail@plt>
   295f8:	andeq	r2, r4, r8, lsr r9

000295fc <flatcc_builder_create_string_str@@Base>:
   295fc:	strd	r4, [sp, #-16]!
   29600:	str	r6, [sp, #8]
   29604:	str	lr, [sp, #12]
   29608:	mov	r5, r0
   2960c:	mov	r4, r1
   29610:	mov	r0, r1
   29614:	bl	14578 <strlen@plt>
   29618:	mov	r2, r0
   2961c:	mov	r1, r4
   29620:	mov	r0, r5
   29624:	bl	294e0 <flatcc_builder_create_string@@Base>
   29628:	ldrd	r4, [sp]
   2962c:	ldr	r6, [sp, #8]
   29630:	add	sp, sp, #12
   29634:	pop	{pc}		; (ldr pc, [sp], #4)

00029638 <flatcc_builder_create_string_strn@@Base>:
   29638:	strd	r4, [sp, #-16]!
   2963c:	str	r6, [sp, #8]
   29640:	str	lr, [sp, #12]
   29644:	mov	r6, r0
   29648:	mov	r4, r1
   2964c:	mov	r5, r2
   29650:	mov	r1, #0
   29654:	mov	r0, r4
   29658:	bl	145c0 <memchr@plt>
   2965c:	cmp	r0, #0
   29660:	subne	r5, r0, r4
   29664:	mov	r2, r5
   29668:	mov	r1, r4
   2966c:	mov	r0, r6
   29670:	bl	294e0 <flatcc_builder_create_string@@Base>
   29674:	ldrd	r4, [sp]
   29678:	ldr	r6, [sp, #8]
   2967c:	add	sp, sp, #12
   29680:	pop	{pc}		; (ldr pc, [sp], #4)

00029684 <flatcc_builder_end_string@@Base>:
   29684:	strd	r4, [sp, #-16]!
   29688:	str	r6, [sp, #8]
   2968c:	str	lr, [sp, #12]
   29690:	ldr	r3, [r0, #32]
   29694:	ldrh	r2, [r3, #14]
   29698:	cmp	r2, #6
   2969c:	bne	296d8 <flatcc_builder_end_string@@Base+0x54>
   296a0:	mov	r4, r0
   296a4:	ldr	r2, [r0, #20]
   296a8:	ldr	r3, [r3, #20]
   296ac:	cmp	r3, r2
   296b0:	bne	296f4 <flatcc_builder_end_string@@Base+0x70>
   296b4:	ldr	r1, [r0, #16]
   296b8:	bl	294e0 <flatcc_builder_create_string@@Base>
   296bc:	subs	r5, r0, #0
   296c0:	bne	29710 <flatcc_builder_end_string@@Base+0x8c>
   296c4:	mov	r0, r5
   296c8:	ldrd	r4, [sp]
   296cc:	ldr	r6, [sp, #8]
   296d0:	add	sp, sp, #12
   296d4:	pop	{pc}		; (ldr pc, [sp], #4)
   296d8:	ldr	r3, [pc, #176]	; 29790 <flatcc_builder_end_string@@Base+0x10c>
   296dc:	movw	r2, #1732	; 0x6c4
   296e0:	movw	r1, #11836	; 0x2e3c
   296e4:	movt	r1, #4
   296e8:	movw	r0, #12308	; 0x3014
   296ec:	movt	r0, #4
   296f0:	bl	145f0 <__assert_fail@plt>
   296f4:	ldr	r3, [pc, #148]	; 29790 <flatcc_builder_end_string@@Base+0x10c>
   296f8:	movw	r2, #1733	; 0x6c5
   296fc:	movw	r1, #11836	; 0x2e3c
   29700:	movt	r1, #4
   29704:	movw	r0, #12660	; 0x3174
   29708:	movt	r0, #4
   2970c:	bl	145f0 <__assert_fail@plt>
   29710:	ldr	r2, [r4, #20]
   29714:	mov	r1, #0
   29718:	ldr	r0, [r4, #16]
   2971c:	bl	1459c <memset@plt>
   29720:	ldr	r2, [r4, #32]
   29724:	ldr	r3, [r2, #8]
   29728:	str	r3, [r4, #20]
   2972c:	ldr	r0, [r2]
   29730:	str	r0, [r4, #28]
   29734:	ldr	r1, [r2, #4]
   29738:	ldr	r3, [r4, #60]	; 0x3c
   2973c:	add	r3, r3, r0
   29740:	str	r3, [r4, #16]
   29744:	ldr	r3, [r4, #64]	; 0x40
   29748:	sub	r3, r3, r0
   2974c:	cmp	r3, r1
   29750:	movcs	r3, r1
   29754:	str	r3, [r4, #24]
   29758:	str	r1, [r2, #4]
   2975c:	ldrh	r3, [r4, #130]	; 0x82
   29760:	ldrh	r2, [r4, #128]	; 0x80
   29764:	cmp	r2, r3
   29768:	strhcc	r3, [r4, #128]	; 0x80
   2976c:	ldr	r3, [r4, #32]
   29770:	ldrh	r2, [r3, #12]
   29774:	strh	r2, [r4, #130]	; 0x82
   29778:	sub	r3, r3, #36	; 0x24
   2977c:	str	r3, [r4, #32]
   29780:	ldr	r3, [r4, #156]	; 0x9c
   29784:	sub	r3, r3, #1
   29788:	str	r3, [r4, #156]	; 0x9c
   2978c:	b	296c4 <flatcc_builder_end_string@@Base+0x40>
   29790:	andeq	r2, r4, r4, asr #26

00029794 <flatcc_builder_string_edit@@Base>:
   29794:	ldr	r0, [r0, #16]
   29798:	bx	lr

0002979c <flatcc_builder_string_len@@Base>:
   2979c:	ldr	r3, [r0, #32]
   297a0:	ldr	r0, [r3, #20]
   297a4:	bx	lr

000297a8 <flatcc_builder_table_add@@Base>:
   297a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   297ac:	strd	r6, [sp, #8]
   297b0:	str	r8, [sp, #16]
   297b4:	str	lr, [sp, #20]
   297b8:	mov	r5, r1
   297bc:	ldr	r1, [r0, #32]
   297c0:	ldrh	r1, [r1, #14]
   297c4:	cmp	r1, #3
   297c8:	bne	29888 <flatcc_builder_table_add@@Base+0xe0>
   297cc:	mov	r4, r0
   297d0:	movw	r1, #32764	; 0x7ffc
   297d4:	cmp	r5, r1
   297d8:	bhi	298a4 <flatcc_builder_table_add@@Base+0xfc>
   297dc:	ldrh	r1, [r0, #130]	; 0x82
   297e0:	cmp	r1, r3
   297e4:	strhcc	r3, [r0, #130]	; 0x82
   297e8:	ldr	r0, [r0, #4]
   297ec:	lsl	r1, r5, #1
   297f0:	ldrh	r1, [r0, r1]
   297f4:	cmp	r1, #0
   297f8:	bne	298c0 <flatcc_builder_table_add@@Base+0x118>
   297fc:	ldr	r0, [r4, #12]
   29800:	eor	r0, r0, r5
   29804:	movw	r1, #31153	; 0x79b1
   29808:	movt	r1, #40503	; 0x9e37
   2980c:	mul	r0, r1, r0
   29810:	eor	r0, r0, r2
   29814:	mul	r0, r1, r0
   29818:	str	r0, [r4, #12]
   2981c:	uxth	r7, r5
   29820:	sub	r6, r3, #1
   29824:	ldr	r0, [r4, #20]
   29828:	add	r6, r6, r0
   2982c:	rsb	r3, r3, #0
   29830:	and	r6, r6, r3
   29834:	add	r1, r2, r6
   29838:	str	r1, [r4, #20]
   2983c:	ldr	r3, [r4, #24]
   29840:	cmp	r1, r3
   29844:	bcs	298dc <flatcc_builder_table_add@@Base+0x134>
   29848:	uxth	r5, r5
   2984c:	ldr	r3, [r4, #4]
   29850:	lsl	r5, r5, #1
   29854:	add	r2, r6, #4
   29858:	strh	r2, [r3, r5]
   2985c:	ldrh	r3, [r4, #8]
   29860:	cmp	r3, r7
   29864:	addls	r7, r7, #1
   29868:	strhls	r7, [r4, #8]
   2986c:	ldr	r0, [r4, #16]
   29870:	add	r0, r0, r6
   29874:	ldrd	r4, [sp]
   29878:	ldrd	r6, [sp, #8]
   2987c:	ldr	r8, [sp, #16]
   29880:	add	sp, sp, #20
   29884:	pop	{pc}		; (ldr pc, [sp], #4)
   29888:	ldr	r3, [pc, #108]	; 298fc <flatcc_builder_table_add@@Base+0x154>
   2988c:	movw	r2, #1773	; 0x6ed
   29890:	movw	r1, #11836	; 0x2e3c
   29894:	movt	r1, #4
   29898:	movw	r0, #12544	; 0x3100
   2989c:	movt	r0, #4
   298a0:	bl	145f0 <__assert_fail@plt>
   298a4:	ldr	r3, [pc, #80]	; 298fc <flatcc_builder_table_add@@Base+0x154>
   298a8:	movw	r2, #1774	; 0x6ee
   298ac:	movw	r1, #11836	; 0x2e3c
   298b0:	movt	r1, #4
   298b4:	movw	r0, #12696	; 0x3198
   298b8:	movt	r0, #4
   298bc:	bl	145f0 <__assert_fail@plt>
   298c0:	ldr	r3, [pc, #52]	; 298fc <flatcc_builder_table_add@@Base+0x154>
   298c4:	movw	r2, #1784	; 0x6f8
   298c8:	movw	r1, #11836	; 0x2e3c
   298cc:	movt	r1, #4
   298d0:	movw	r0, #11920	; 0x2e90
   298d4:	movt	r0, #4
   298d8:	bl	145f0 <__assert_fail@plt>
   298dc:	movw	r2, #65532	; 0xfffc
   298e0:	add	r1, r1, #1
   298e4:	mov	r0, r4
   298e8:	bl	25b1c <main@@Base+0xd20>
   298ec:	cmp	r0, #0
   298f0:	movne	r0, #0
   298f4:	beq	29848 <flatcc_builder_table_add@@Base+0xa0>
   298f8:	b	29874 <flatcc_builder_table_add@@Base+0xcc>
   298fc:	andeq	r2, r4, r0, ror #26

00029900 <flatcc_builder_table_edit@@Base>:
   29900:	ldr	r2, [r0, #32]
   29904:	ldrh	r2, [r2, #14]
   29908:	cmp	r2, #3
   2990c:	bne	29924 <flatcc_builder_table_edit@@Base+0x24>
   29910:	ldr	r3, [r0, #20]
   29914:	sub	r3, r3, r1
   29918:	ldr	r0, [r0, #16]
   2991c:	add	r0, r0, r3
   29920:	bx	lr
   29924:	str	r4, [sp, #-8]!
   29928:	str	lr, [sp, #4]
   2992c:	ldr	r3, [pc, #20]	; 29948 <flatcc_builder_table_edit@@Base+0x48>
   29930:	movw	r2, #1794	; 0x702
   29934:	movw	r1, #11836	; 0x2e3c
   29938:	movt	r1, #4
   2993c:	movw	r0, #12544	; 0x3100
   29940:	movt	r0, #4
   29944:	bl	145f0 <__assert_fail@plt>
   29948:	andeq	r2, r4, ip, ror sp

0002994c <flatcc_builder_table_add_copy@@Base>:
   2994c:	strd	r4, [sp, #-16]!
   29950:	str	r6, [sp, #8]
   29954:	str	lr, [sp, #12]
   29958:	mov	r6, r2
   2995c:	mov	r5, r3
   29960:	ldrh	r3, [sp, #16]
   29964:	mov	r2, r5
   29968:	bl	297a8 <flatcc_builder_table_add@@Base>
   2996c:	subs	r4, r0, #0
   29970:	beq	29984 <flatcc_builder_table_add_copy@@Base+0x38>
   29974:	mov	r2, r5
   29978:	mov	r1, r6
   2997c:	mov	r0, r4
   29980:	bl	14524 <memcpy@plt>
   29984:	mov	r0, r4
   29988:	ldrd	r4, [sp]
   2998c:	ldr	r6, [sp, #8]
   29990:	add	sp, sp, #12
   29994:	pop	{pc}		; (ldr pc, [sp], #4)

00029998 <flatcc_builder_table_add_offset@@Base>:
   29998:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2999c:	strd	r6, [sp, #8]
   299a0:	str	r8, [sp, #16]
   299a4:	str	lr, [sp, #20]
   299a8:	ldr	r3, [r0, #32]
   299ac:	ldrh	r3, [r3, #14]
   299b0:	cmp	r3, #3
   299b4:	bne	29a78 <flatcc_builder_table_add_offset@@Base+0xe0>
   299b8:	mov	r4, r0
   299bc:	mov	r5, r1
   299c0:	movw	r3, #32764	; 0x7ffc
   299c4:	cmp	r1, r3
   299c8:	bhi	29a94 <flatcc_builder_table_add_offset@@Base+0xfc>
   299cc:	ldr	r2, [r0, #4]
   299d0:	lsl	r3, r1, #1
   299d4:	ldrh	r3, [r2, r3]
   299d8:	cmp	r3, #0
   299dc:	bne	29ab0 <flatcc_builder_table_add_offset@@Base+0x118>
   299e0:	ldr	r3, [r0, #12]
   299e4:	eor	r3, r3, r1
   299e8:	movw	r2, #31153	; 0x79b1
   299ec:	movt	r2, #40503	; 0x9e37
   299f0:	mul	r3, r2, r3
   299f4:	eor	r3, r3, #4
   299f8:	mul	r3, r2, r3
   299fc:	str	r3, [r0, #12]
   29a00:	uxth	r7, r1
   29a04:	ldr	r6, [r0, #20]
   29a08:	add	r6, r6, #3
   29a0c:	bic	r6, r6, #3
   29a10:	add	r1, r6, #4
   29a14:	str	r1, [r0, #20]
   29a18:	ldr	r3, [r0, #24]
   29a1c:	cmp	r1, r3
   29a20:	bhi	29acc <flatcc_builder_table_add_offset@@Base+0x134>
   29a24:	uxth	r2, r6
   29a28:	uxth	r5, r5
   29a2c:	ldr	r3, [r4, #4]
   29a30:	lsl	r5, r5, #1
   29a34:	add	r1, r2, #4
   29a38:	strh	r1, [r3, r5]
   29a3c:	ldrh	r3, [r4, #8]
   29a40:	cmp	r3, r7
   29a44:	addls	r7, r7, #1
   29a48:	strhls	r7, [r4, #8]
   29a4c:	ldr	r3, [r4]
   29a50:	add	r1, r3, #2
   29a54:	str	r1, [r4]
   29a58:	strh	r2, [r3]
   29a5c:	ldr	r0, [r4, #16]
   29a60:	add	r0, r0, r6
   29a64:	ldrd	r4, [sp]
   29a68:	ldrd	r6, [sp, #8]
   29a6c:	ldr	r8, [sp, #16]
   29a70:	add	sp, sp, #20
   29a74:	pop	{pc}		; (ldr pc, [sp], #4)
   29a78:	ldr	r3, [pc, #100]	; 29ae4 <flatcc_builder_table_add_offset@@Base+0x14c>
   29a7c:	movw	r2, #1811	; 0x713
   29a80:	movw	r1, #11836	; 0x2e3c
   29a84:	movt	r1, #4
   29a88:	movw	r0, #12544	; 0x3100
   29a8c:	movt	r0, #4
   29a90:	bl	145f0 <__assert_fail@plt>
   29a94:	ldr	r3, [pc, #72]	; 29ae4 <flatcc_builder_table_add_offset@@Base+0x14c>
   29a98:	movw	r2, #1812	; 0x714
   29a9c:	movw	r1, #11836	; 0x2e3c
   29aa0:	movt	r1, #4
   29aa4:	movw	r0, #12696	; 0x3198
   29aa8:	movt	r0, #4
   29aac:	bl	145f0 <__assert_fail@plt>
   29ab0:	ldr	r3, [pc, #44]	; 29ae4 <flatcc_builder_table_add_offset@@Base+0x14c>
   29ab4:	movw	r2, #1819	; 0x71b
   29ab8:	movw	r1, #11836	; 0x2e3c
   29abc:	movt	r1, #4
   29ac0:	movw	r0, #11920	; 0x2e90
   29ac4:	movt	r0, #4
   29ac8:	bl	145f0 <__assert_fail@plt>
   29acc:	movw	r2, #65532	; 0xfffc
   29ad0:	bl	25b1c <main@@Base+0xd20>
   29ad4:	cmp	r0, #0
   29ad8:	movne	r0, #0
   29adc:	beq	29a24 <flatcc_builder_table_add_offset@@Base+0x8c>
   29ae0:	b	29a64 <flatcc_builder_table_add_offset@@Base+0xcc>
   29ae4:	muleq	r4, r8, sp

00029ae8 <flatcc_builder_table_add_union@@Base>:
   29ae8:	strd	r4, [sp, #-20]!	; 0xffffffec
   29aec:	strd	r6, [sp, #8]
   29af0:	str	lr, [sp, #16]
   29af4:	sub	sp, sp, #12
   29af8:	mov	r7, r1
   29afc:	add	r1, sp, #8
   29b00:	stmdb	r1, {r2, r3}
   29b04:	ldrb	r6, [sp]
   29b08:	ldr	r5, [sp, #4]
   29b0c:	ldr	r3, [r0, #32]
   29b10:	ldrh	r3, [r3, #14]
   29b14:	cmp	r3, #3
   29b18:	bne	29b8c <flatcc_builder_table_add_union@@Base+0xa4>
   29b1c:	mov	r4, r0
   29b20:	clz	r3, r6
   29b24:	lsr	r3, r3, #5
   29b28:	cmp	r5, #0
   29b2c:	moveq	r3, #0
   29b30:	cmp	r3, #0
   29b34:	bne	29ba8 <flatcc_builder_table_add_union@@Base+0xc0>
   29b38:	cmp	r5, #0
   29b3c:	beq	29b54 <flatcc_builder_table_add_union@@Base+0x6c>
   29b40:	mov	r1, r7
   29b44:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   29b48:	cmp	r0, #0
   29b4c:	strne	r5, [r0]
   29b50:	beq	29bc4 <flatcc_builder_table_add_union@@Base+0xdc>
   29b54:	mov	r3, #1
   29b58:	mov	r2, r3
   29b5c:	sub	r1, r7, #1
   29b60:	mov	r0, r4
   29b64:	bl	297a8 <flatcc_builder_table_add@@Base>
   29b68:	cmp	r0, #0
   29b6c:	beq	29be0 <flatcc_builder_table_add_union@@Base+0xf8>
   29b70:	strb	r6, [r0]
   29b74:	mov	r0, #0
   29b78:	add	sp, sp, #12
   29b7c:	ldrd	r4, [sp]
   29b80:	ldrd	r6, [sp, #8]
   29b84:	add	sp, sp, #16
   29b88:	pop	{pc}		; (ldr pc, [sp], #4)
   29b8c:	ldr	r3, [pc, #104]	; 29bfc <flatcc_builder_table_add_union@@Base+0x114>
   29b90:	movw	r2, #1518	; 0x5ee
   29b94:	movw	r1, #11836	; 0x2e3c
   29b98:	movt	r1, #4
   29b9c:	movw	r0, #12544	; 0x3100
   29ba0:	movt	r0, #4
   29ba4:	bl	145f0 <__assert_fail@plt>
   29ba8:	ldr	r3, [pc, #76]	; 29bfc <flatcc_builder_table_add_union@@Base+0x114>
   29bac:	movw	r2, #1519	; 0x5ef
   29bb0:	movw	r1, #11836	; 0x2e3c
   29bb4:	movt	r1, #4
   29bb8:	movw	r0, #12764	; 0x31dc
   29bbc:	movt	r0, #4
   29bc0:	bl	145f0 <__assert_fail@plt>
   29bc4:	ldr	r3, [pc, #48]	; 29bfc <flatcc_builder_table_add_union@@Base+0x114>
   29bc8:	movw	r2, #1522	; 0x5f2
   29bcc:	movw	r1, #11836	; 0x2e3c
   29bd0:	movt	r1, #4
   29bd4:	movw	r0, #12800	; 0x3200
   29bd8:	movt	r0, #4
   29bdc:	bl	145f0 <__assert_fail@plt>
   29be0:	ldr	r3, [pc, #20]	; 29bfc <flatcc_builder_table_add_union@@Base+0x114>
   29be4:	movw	r2, #1526	; 0x5f6
   29be8:	movw	r1, #11836	; 0x2e3c
   29bec:	movt	r1, #4
   29bf0:	movw	r0, #12812	; 0x320c
   29bf4:	movt	r0, #4
   29bf8:	bl	145f0 <__assert_fail@plt>
   29bfc:			; <UNDEFINED> instruction: 0x00042db8

00029c00 <flatcc_builder_table_add_union_vector@@Base>:
   29c00:	strd	r4, [sp, #-20]!	; 0xffffffec
   29c04:	strd	r6, [sp, #8]
   29c08:	str	lr, [sp, #16]
   29c0c:	sub	sp, sp, #12
   29c10:	mov	r7, r1
   29c14:	add	r1, sp, #8
   29c18:	stmdb	r1, {r2, r3}
   29c1c:	ldr	r4, [sp]
   29c20:	ldr	r6, [sp, #4]
   29c24:	ldr	r3, [r0, #32]
   29c28:	ldrh	r3, [r3, #14]
   29c2c:	cmp	r3, #3
   29c30:	bne	29c7c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   29c34:	mov	r5, r0
   29c38:	clz	r3, r6
   29c3c:	lsr	r3, r3, #5
   29c40:	clz	r2, r4
   29c44:	lsr	r2, r2, #5
   29c48:	cmp	r2, r3
   29c4c:	beq	29cb4 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   29c50:	adds	r4, r4, #0
   29c54:	movne	r4, #1
   29c58:	cmp	r4, r3
   29c5c:	mvnne	r4, #0
   29c60:	beq	29c98 <flatcc_builder_table_add_union_vector@@Base+0x98>
   29c64:	mov	r0, r4
   29c68:	add	sp, sp, #12
   29c6c:	ldrd	r4, [sp]
   29c70:	ldrd	r6, [sp, #8]
   29c74:	add	sp, sp, #16
   29c78:	pop	{pc}		; (ldr pc, [sp], #4)
   29c7c:	ldr	r3, [pc, #160]	; 29d24 <flatcc_builder_table_add_union_vector@@Base+0x124>
   29c80:	mov	r2, #1536	; 0x600
   29c84:	movw	r1, #11836	; 0x2e3c
   29c88:	movt	r1, #4
   29c8c:	movw	r0, #12544	; 0x3100
   29c90:	movt	r0, #4
   29c94:	bl	145f0 <__assert_fail@plt>
   29c98:	ldr	r3, [pc, #132]	; 29d24 <flatcc_builder_table_add_union_vector@@Base+0x124>
   29c9c:	movw	r2, #1537	; 0x601
   29ca0:	movw	r1, #11836	; 0x2e3c
   29ca4:	movt	r1, #4
   29ca8:	movw	r0, #12824	; 0x3218
   29cac:	movt	r0, #4
   29cb0:	bl	145f0 <__assert_fail@plt>
   29cb4:	cmp	r4, #0
   29cb8:	beq	29c64 <flatcc_builder_table_add_union_vector@@Base+0x64>
   29cbc:	sub	r1, r7, #1
   29cc0:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   29cc4:	cmp	r0, #0
   29cc8:	beq	29d08 <flatcc_builder_table_add_union_vector@@Base+0x108>
   29ccc:	str	r4, [r0]
   29cd0:	mov	r1, r7
   29cd4:	mov	r0, r5
   29cd8:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   29cdc:	cmp	r0, #0
   29ce0:	strne	r6, [r0]
   29ce4:	movne	r4, #0
   29ce8:	bne	29c64 <flatcc_builder_table_add_union_vector@@Base+0x64>
   29cec:	ldr	r3, [pc, #48]	; 29d24 <flatcc_builder_table_add_union_vector@@Base+0x124>
   29cf0:	movw	r2, #1544	; 0x608
   29cf4:	movw	r1, #11836	; 0x2e3c
   29cf8:	movt	r1, #4
   29cfc:	movw	r0, #12800	; 0x3200
   29d00:	movt	r0, #4
   29d04:	bl	145f0 <__assert_fail@plt>
   29d08:	ldr	r3, [pc, #20]	; 29d24 <flatcc_builder_table_add_union_vector@@Base+0x124>
   29d0c:	movw	r2, #1540	; 0x604
   29d10:	movw	r1, #11836	; 0x2e3c
   29d14:	movt	r1, #4
   29d18:	movw	r0, #12800	; 0x3200
   29d1c:	movt	r0, #4
   29d20:	bl	145f0 <__assert_fail@plt>
   29d24:	ldrdeq	r2, [r4], -r8

00029d28 <flatcc_builder_push_buffer_alignment@@Base>:
   29d28:	mov	r3, r0
   29d2c:	ldrh	r0, [r0, #128]	; 0x80
   29d30:	mov	r2, #4
   29d34:	strh	r2, [r3, #128]	; 0x80
   29d38:	bx	lr

00029d3c <flatcc_builder_pop_buffer_alignment@@Base>:
   29d3c:	ldrh	r3, [r0, #128]	; 0x80
   29d40:	cmp	r3, r1
   29d44:	strhcc	r1, [r0, #128]	; 0x80
   29d48:	bx	lr

00029d4c <flatcc_builder_get_buffer_alignment@@Base>:
   29d4c:	ldrh	r0, [r0, #128]	; 0x80
   29d50:	bx	lr

00029d54 <flatcc_builder_set_vtable_clustering@@Base>:
   29d54:	clz	r1, r1
   29d58:	lsr	r1, r1, #5
   29d5c:	str	r1, [r0, #180]	; 0xb4
   29d60:	bx	lr

00029d64 <flatcc_builder_set_block_align@@Base>:
   29d64:	strh	r1, [r0, #132]	; 0x84
   29d68:	bx	lr

00029d6c <flatcc_builder_get_level@@Base>:
   29d6c:	ldr	r0, [r0, #156]	; 0x9c
   29d70:	bx	lr

00029d74 <flatcc_builder_set_max_level@@Base>:
   29d74:	str	r1, [r0, #176]	; 0xb0
   29d78:	ldr	r3, [r0, #160]	; 0xa0
   29d7c:	cmp	r3, r1
   29d80:	strlt	r1, [r0, #160]	; 0xa0
   29d84:	bx	lr

00029d88 <flatcc_builder_get_buffer_size@@Base>:
   29d88:	ldr	r2, [r0, #140]	; 0x8c
   29d8c:	ldr	r0, [r0, #136]	; 0x88
   29d90:	sub	r0, r2, r0
   29d94:	bx	lr

00029d98 <flatcc_builder_get_buffer_start@@Base>:
   29d98:	ldr	r0, [r0, #136]	; 0x88
   29d9c:	bx	lr

00029da0 <flatcc_builder_get_buffer_end@@Base>:
   29da0:	ldr	r0, [r0, #140]	; 0x8c
   29da4:	bx	lr

00029da8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   29da8:	str	r1, [r0, #172]	; 0xac
   29dac:	bx	lr

00029db0 <flatcc_builder_set_identifier@@Base>:
   29db0:	movw	r3, #9964	; 0x26ec
   29db4:	movt	r3, #4
   29db8:	cmp	r1, #0
   29dbc:	moveq	r1, r3
   29dc0:	ldr	r3, [r1]
   29dc4:	str	r3, [r0, #168]	; 0xa8
   29dc8:	bx	lr

00029dcc <flatcc_builder_get_type@@Base>:
   29dcc:	ldr	r3, [r0, #32]
   29dd0:	cmp	r3, #0
   29dd4:	ldrhne	r0, [r3, #14]
   29dd8:	moveq	r0, #0
   29ddc:	bx	lr

00029de0 <flatcc_builder_get_type_at@@Base>:
   29de0:	cmp	r1, #0
   29de4:	ble	29e0c <flatcc_builder_get_type_at@@Base+0x2c>
   29de8:	ldr	r3, [r0, #156]	; 0x9c
   29dec:	cmp	r3, r1
   29df0:	blt	29e14 <flatcc_builder_get_type_at@@Base+0x34>
   29df4:	sub	r1, r1, r3
   29df8:	ldr	r3, [r0, #32]
   29dfc:	add	r1, r1, r1, lsl #3
   29e00:	add	r1, r3, r1, lsl #2
   29e04:	ldrh	r0, [r1, #14]
   29e08:	bx	lr
   29e0c:	mov	r0, #0
   29e10:	bx	lr
   29e14:	mov	r0, #0
   29e18:	bx	lr

00029e1c <flatcc_builder_get_direct_buffer@@Base>:
   29e1c:	ldr	r3, [r0, #184]	; 0xb8
   29e20:	cmp	r3, #0
   29e24:	bne	29e3c <flatcc_builder_get_direct_buffer@@Base+0x20>
   29e28:	cmp	r1, #0
   29e2c:	beq	29e7c <flatcc_builder_get_direct_buffer@@Base+0x60>
   29e30:	mov	r0, #0
   29e34:	str	r0, [r1]
   29e38:	bx	lr
   29e3c:	ldr	r2, [r0, #188]	; 0xbc
   29e40:	ldr	r3, [r0, #192]	; 0xc0
   29e44:	cmp	r2, r3
   29e48:	beq	29e60 <flatcc_builder_get_direct_buffer@@Base+0x44>
   29e4c:	cmp	r1, #0
   29e50:	beq	29e74 <flatcc_builder_get_direct_buffer@@Base+0x58>
   29e54:	mov	r0, #0
   29e58:	str	r0, [r1]
   29e5c:	bx	lr
   29e60:	cmp	r1, #0
   29e64:	ldrne	r3, [r0, #212]	; 0xd4
   29e68:	strne	r3, [r1]
   29e6c:	ldr	r0, [r0, #196]	; 0xc4
   29e70:	bx	lr
   29e74:	mov	r0, r1
   29e78:	bx	lr
   29e7c:	mov	r0, r1
   29e80:	bx	lr

00029e84 <flatcc_builder_copy_buffer@@Base>:
   29e84:	ldr	r3, [r0, #184]	; 0xb8
   29e88:	cmp	r3, #0
   29e8c:	beq	29ed0 <flatcc_builder_copy_buffer@@Base+0x4c>
   29e90:	str	r4, [sp, #-8]!
   29e94:	str	lr, [sp, #4]
   29e98:	add	r0, r0, #188	; 0xbc
   29e9c:	bl	2a640 <flatcc_emitter_copy_buffer@@Base>
   29ea0:	cmp	r0, #0
   29ea4:	beq	29eb4 <flatcc_builder_copy_buffer@@Base+0x30>
   29ea8:	ldr	r4, [sp]
   29eac:	add	sp, sp, #4
   29eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   29eb4:	ldr	r3, [pc, #28]	; 29ed8 <flatcc_builder_copy_buffer@@Base+0x54>
   29eb8:	movw	r2, #1926	; 0x786
   29ebc:	movw	r1, #11836	; 0x2e3c
   29ec0:	movt	r1, #4
   29ec4:	movw	r0, #12864	; 0x3240
   29ec8:	movt	r0, #4
   29ecc:	bl	145f0 <__assert_fail@plt>
   29ed0:	mov	r0, #0
   29ed4:	bx	lr
   29ed8:	andeq	r2, r4, r0, lsl #28

00029edc <flatcc_builder_finalize_buffer@@Base>:
   29edc:	strd	r4, [sp, #-16]!
   29ee0:	str	r6, [sp, #8]
   29ee4:	str	lr, [sp, #12]
   29ee8:	mov	r5, r0
   29eec:	ldr	r4, [r0, #140]	; 0x8c
   29ef0:	ldr	r3, [r0, #136]	; 0x88
   29ef4:	sub	r4, r4, r3
   29ef8:	cmp	r1, #0
   29efc:	strne	r4, [r1]
   29f00:	mov	r0, r4
   29f04:	bl	14554 <malloc@plt>
   29f08:	subs	r6, r0, #0
   29f0c:	beq	29f3c <flatcc_builder_finalize_buffer@@Base+0x60>
   29f10:	mov	r2, r4
   29f14:	mov	r1, r6
   29f18:	mov	r0, r5
   29f1c:	bl	29e84 <flatcc_builder_copy_buffer@@Base>
   29f20:	cmp	r0, #0
   29f24:	beq	29f58 <flatcc_builder_finalize_buffer@@Base+0x7c>
   29f28:	mov	r0, r6
   29f2c:	ldrd	r4, [sp]
   29f30:	ldr	r6, [sp, #8]
   29f34:	add	sp, sp, #12
   29f38:	pop	{pc}		; (ldr pc, [sp], #4)
   29f3c:	ldr	r3, [pc, #48]	; 29f74 <flatcc_builder_finalize_buffer@@Base+0x98>
   29f40:	movw	r2, #1944	; 0x798
   29f44:	movw	r1, #11836	; 0x2e3c
   29f48:	movt	r1, #4
   29f4c:	movw	r0, #11920	; 0x2e90
   29f50:	movt	r0, #4
   29f54:	bl	145f0 <__assert_fail@plt>
   29f58:	ldr	r3, [pc, #20]	; 29f74 <flatcc_builder_finalize_buffer@@Base+0x98>
   29f5c:	movw	r2, #1948	; 0x79c
   29f60:	movw	r1, #11836	; 0x2e3c
   29f64:	movt	r1, #4
   29f68:	movw	r0, #11920	; 0x2e90
   29f6c:	movt	r0, #4
   29f70:	bl	145f0 <__assert_fail@plt>
   29f74:	andeq	r2, r4, ip, lsl lr

00029f78 <flatcc_builder_finalize_aligned_buffer@@Base>:
   29f78:	strd	r4, [sp, #-20]!	; 0xffffffec
   29f7c:	strd	r6, [sp, #8]
   29f80:	str	lr, [sp, #16]
   29f84:	sub	sp, sp, #12
   29f88:	mov	r7, r0
   29f8c:	ldr	r4, [r0, #140]	; 0x8c
   29f90:	ldr	r3, [r0, #136]	; 0x88
   29f94:	sub	r3, r4, r3
   29f98:	subs	r6, r1, #0
   29f9c:	strne	r3, [r6]
   29fa0:	ldrh	r1, [r0, #128]	; 0x80
   29fa4:	sub	r4, r1, #1
   29fa8:	add	r4, r4, r3
   29fac:	rsb	r3, r1, #0
   29fb0:	and	r4, r4, r3
   29fb4:	mov	r3, #0
   29fb8:	str	r3, [sp, #4]
   29fbc:	mov	r2, r4
   29fc0:	cmp	r1, #4
   29fc4:	movcc	r1, #4
   29fc8:	add	r0, sp, #4
   29fcc:	bl	14590 <posix_memalign@plt>
   29fd0:	cmp	r0, #0
   29fd4:	beq	29ffc <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   29fd8:	ldr	r0, [sp, #4]
   29fdc:	cmp	r0, #0
   29fe0:	beq	29fe8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   29fe4:	bl	14518 <free@plt>
   29fe8:	cmp	r6, #0
   29fec:	movne	r5, #0
   29ff0:	strne	r5, [r6]
   29ff4:	moveq	r5, r6
   29ff8:	b	2a020 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   29ffc:	ldr	r5, [sp, #4]
   2a000:	cmp	r5, #0
   2a004:	beq	29fe8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   2a008:	mov	r2, r4
   2a00c:	mov	r1, r5
   2a010:	mov	r0, r7
   2a014:	bl	29e84 <flatcc_builder_copy_buffer@@Base>
   2a018:	cmp	r0, #0
   2a01c:	beq	2a038 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   2a020:	mov	r0, r5
   2a024:	add	sp, sp, #12
   2a028:	ldrd	r4, [sp]
   2a02c:	ldrd	r6, [sp, #8]
   2a030:	add	sp, sp, #16
   2a034:	pop	{pc}		; (ldr pc, [sp], #4)
   2a038:	mov	r0, r5
   2a03c:	bl	14518 <free@plt>
   2a040:	b	29fe8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>

0002a044 <flatcc_builder_aligned_alloc@@Base>:
   2a044:	push	{lr}		; (str lr, [sp, #-4]!)
   2a048:	sub	sp, sp, #12
   2a04c:	mov	r3, #0
   2a050:	str	r3, [sp, #4]
   2a054:	mov	r2, r1
   2a058:	cmp	r0, #4
   2a05c:	movcs	r1, r0
   2a060:	movcc	r1, #4
   2a064:	add	r0, sp, #4
   2a068:	bl	14590 <posix_memalign@plt>
   2a06c:	cmp	r0, #0
   2a070:	beq	2a08c <flatcc_builder_aligned_alloc@@Base+0x48>
   2a074:	ldr	r0, [sp, #4]
   2a078:	cmp	r0, #0
   2a07c:	beq	2a08c <flatcc_builder_aligned_alloc@@Base+0x48>
   2a080:	bl	14518 <free@plt>
   2a084:	mov	r3, #0
   2a088:	str	r3, [sp, #4]
   2a08c:	ldr	r0, [sp, #4]
   2a090:	add	sp, sp, #12
   2a094:	pop	{pc}		; (ldr pc, [sp], #4)

0002a098 <flatcc_builder_aligned_free@@Base>:
   2a098:	str	r4, [sp, #-8]!
   2a09c:	str	lr, [sp, #4]
   2a0a0:	bl	14518 <free@plt>
   2a0a4:	ldr	r4, [sp]
   2a0a8:	add	sp, sp, #4
   2a0ac:	pop	{pc}		; (ldr pc, [sp], #4)

0002a0b0 <flatcc_builder_get_emit_context@@Base>:
   2a0b0:	ldr	r0, [r0, #36]	; 0x24
   2a0b4:	bx	lr

0002a0b8 <flatcc_emitter_recycle_page@@Base>:
   2a0b8:	ldr	r3, [r0]
   2a0bc:	cmp	r3, r1
   2a0c0:	beq	2a10c <flatcc_emitter_recycle_page@@Base+0x54>
   2a0c4:	ldr	r3, [r0, #4]
   2a0c8:	cmp	r3, r1
   2a0cc:	beq	2a114 <flatcc_emitter_recycle_page@@Base+0x5c>
   2a0d0:	ldr	r2, [r1, #2944]	; 0xb80
   2a0d4:	ldr	r3, [r1, #2948]	; 0xb84
   2a0d8:	str	r3, [r2, #2948]	; 0xb84
   2a0dc:	ldr	r2, [r1, #2944]	; 0xb80
   2a0e0:	str	r2, [r3, #2944]	; 0xb80
   2a0e4:	ldr	r3, [r0]
   2a0e8:	ldr	r3, [r3, #2948]	; 0xb84
   2a0ec:	str	r3, [r1, #2948]	; 0xb84
   2a0f0:	ldr	r2, [r0]
   2a0f4:	str	r2, [r1, #2944]	; 0xb80
   2a0f8:	str	r1, [r3, #2944]	; 0xb80
   2a0fc:	ldr	r3, [r1, #2944]	; 0xb80
   2a100:	str	r1, [r3, #2948]	; 0xb84
   2a104:	mov	r0, #0
   2a108:	bx	lr
   2a10c:	mvn	r0, #0
   2a110:	bx	lr
   2a114:	mvn	r0, #0
   2a118:	bx	lr

0002a11c <flatcc_emitter_reset@@Base>:
   2a11c:	ldr	r3, [r0]
   2a120:	cmp	r3, #0
   2a124:	bxeq	lr
   2a128:	str	r3, [r0, #4]
   2a12c:	add	r2, r3, #1472	; 0x5c0
   2a130:	str	r2, [r0, #8]
   2a134:	str	r2, [r0, #16]
   2a138:	mov	r2, #1472	; 0x5c0
   2a13c:	str	r2, [r0, #12]
   2a140:	str	r2, [r0, #20]
   2a144:	movw	r2, #64064	; 0xfa40
   2a148:	movt	r2, #65535	; 0xffff
   2a14c:	str	r2, [r3, #2952]	; 0xb88
   2a150:	ldr	r3, [r0, #32]
   2a154:	cmp	r3, #0
   2a158:	ldreq	r3, [r0, #24]
   2a15c:	streq	r3, [r0, #32]
   2a160:	ldr	r3, [r0, #32]
   2a164:	add	r2, r3, r3, lsl #1
   2a168:	ldr	r3, [r0, #24]
   2a16c:	lsr	r3, r3, #2
   2a170:	add	r3, r3, r2, lsr #2
   2a174:	str	r3, [r0, #32]
   2a178:	mov	r2, #0
   2a17c:	str	r2, [r0, #24]
   2a180:	ldr	r2, [r0, #28]
   2a184:	cmp	r2, r3, lsl #1
   2a188:	bxls	lr
   2a18c:	str	r4, [sp, #-8]!
   2a190:	str	lr, [sp, #4]
   2a194:	mov	r4, r0
   2a198:	ldr	r3, [r0, #4]
   2a19c:	ldr	r0, [r3, #2944]	; 0xb80
   2a1a0:	ldr	r2, [r4]
   2a1a4:	cmp	r0, r2
   2a1a8:	beq	2a1ec <flatcc_emitter_reset@@Base+0xd0>
   2a1ac:	ldr	r2, [r0, #2944]	; 0xb80
   2a1b0:	str	r2, [r3, #2944]	; 0xb80
   2a1b4:	ldr	r3, [r4, #4]
   2a1b8:	str	r3, [r2, #2948]	; 0xb84
   2a1bc:	bl	14518 <free@plt>
   2a1c0:	ldr	r3, [r4, #28]
   2a1c4:	sub	r3, r3, #2944	; 0xb80
   2a1c8:	str	r3, [r4, #28]
   2a1cc:	ldr	r2, [r4, #32]
   2a1d0:	cmp	r3, r2, lsl #1
   2a1d4:	bls	2a1ec <flatcc_emitter_reset@@Base+0xd0>
   2a1d8:	ldr	r3, [r4, #4]
   2a1dc:	ldr	r0, [r3, #2944]	; 0xb80
   2a1e0:	ldr	r2, [r4]
   2a1e4:	cmp	r0, r2
   2a1e8:	bne	2a1ac <flatcc_emitter_reset@@Base+0x90>
   2a1ec:	ldr	r4, [sp]
   2a1f0:	add	sp, sp, #4
   2a1f4:	pop	{pc}		; (ldr pc, [sp], #4)

0002a1f8 <flatcc_emitter_clear@@Base>:
   2a1f8:	ldr	r3, [r0]
   2a1fc:	cmp	r3, #0
   2a200:	bxeq	lr
   2a204:	strd	r4, [sp, #-16]!
   2a208:	str	r6, [sp, #8]
   2a20c:	str	lr, [sp, #12]
   2a210:	mov	r5, r0
   2a214:	ldr	r2, [r3, #2948]	; 0xb84
   2a218:	mov	r1, #0
   2a21c:	str	r1, [r2, #2944]	; 0xb80
   2a220:	ldr	r4, [r3, #2944]	; 0xb80
   2a224:	cmp	r4, r1
   2a228:	bne	2a238 <flatcc_emitter_clear@@Base+0x40>
   2a22c:	mov	r4, r3
   2a230:	b	2a24c <flatcc_emitter_clear@@Base+0x54>
   2a234:	mov	r4, r3
   2a238:	ldr	r0, [r4, #2948]	; 0xb84
   2a23c:	bl	14518 <free@plt>
   2a240:	ldr	r3, [r4, #2944]	; 0xb80
   2a244:	cmp	r3, #0
   2a248:	bne	2a234 <flatcc_emitter_clear@@Base+0x3c>
   2a24c:	mov	r0, r4
   2a250:	bl	14518 <free@plt>
   2a254:	mov	r2, #36	; 0x24
   2a258:	mov	r1, #0
   2a25c:	mov	r0, r5
   2a260:	bl	1459c <memset@plt>
   2a264:	ldrd	r4, [sp]
   2a268:	ldr	r6, [sp, #8]
   2a26c:	add	sp, sp, #12
   2a270:	pop	{pc}		; (ldr pc, [sp], #4)

0002a274 <flatcc_emitter@@Base>:
   2a274:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a278:	strd	r6, [sp, #8]
   2a27c:	strd	r8, [sp, #16]
   2a280:	strd	sl, [sp, #24]
   2a284:	str	lr, [sp, #32]
   2a288:	sub	sp, sp, #4
   2a28c:	mov	r4, r0
   2a290:	ldr	ip, [sp, #40]	; 0x28
   2a294:	ldr	r0, [r0, #24]
   2a298:	add	r0, r0, ip
   2a29c:	str	r0, [r4, #24]
   2a2a0:	cmp	r3, #0
   2a2a4:	blt	2a2d4 <flatcc_emitter@@Base+0x60>
   2a2a8:	ldr	r3, [r4, #20]
   2a2ac:	cmp	r3, ip
   2a2b0:	bcs	2a3bc <flatcc_emitter@@Base+0x148>
   2a2b4:	cmp	r2, #0
   2a2b8:	moveq	r0, r2
   2a2bc:	beq	2a4bc <flatcc_emitter@@Base+0x248>
   2a2c0:	add	r5, r1, #8
   2a2c4:	mov	r8, r2
   2a2c8:	movw	fp, #64064	; 0xfa40
   2a2cc:	movt	fp, #65535	; 0xffff
   2a2d0:	b	2a518 <flatcc_emitter@@Base+0x2a4>
   2a2d4:	ldr	r3, [r4, #12]
   2a2d8:	cmp	r3, ip
   2a2dc:	bcs	2a2f4 <flatcc_emitter@@Base+0x80>
   2a2e0:	add	r5, r1, r2, lsl #3
   2a2e4:	sub	r8, r2, #1
   2a2e8:	movw	fp, #64064	; 0xfa40
   2a2ec:	movt	fp, #65535	; 0xffff
   2a2f0:	b	2a4e8 <flatcc_emitter@@Base+0x274>
   2a2f4:	ldr	r6, [r4, #8]
   2a2f8:	sub	r6, r6, ip
   2a2fc:	str	r6, [r4, #8]
   2a300:	sub	ip, r3, ip
   2a304:	str	ip, [r4, #12]
   2a308:	b	2a3d0 <flatcc_emitter@@Base+0x15c>
   2a30c:	mov	r2, r6
   2a310:	rsb	r1, r2, #0
   2a314:	ldr	r0, [r4, #8]
   2a318:	add	r0, r0, r1
   2a31c:	str	r0, [r4, #8]
   2a320:	sub	r3, r3, r2
   2a324:	str	r3, [r4, #12]
   2a328:	add	r9, r9, r1
   2a32c:	sub	r6, r6, r2
   2a330:	mov	r1, r9
   2a334:	bl	14524 <memcpy@plt>
   2a338:	cmp	r6, #0
   2a33c:	beq	2a4e0 <flatcc_emitter@@Base+0x26c>
   2a340:	ldr	r3, [r4, #12]
   2a344:	cmp	r3, r6
   2a348:	bcs	2a30c <flatcc_emitter@@Base+0x98>
   2a34c:	cmp	r3, #0
   2a350:	movne	r2, r3
   2a354:	bne	2a310 <flatcc_emitter@@Base+0x9c>
   2a358:	ldr	r7, [r4]
   2a35c:	cmp	r7, #0
   2a360:	beq	2a574 <flatcc_emitter@@Base+0x300>
   2a364:	ldr	r2, [r7, #2948]	; 0xb84
   2a368:	ldr	r3, [r4, #4]
   2a36c:	cmp	r2, r3
   2a370:	beq	2a538 <flatcc_emitter@@Base+0x2c4>
   2a374:	ldr	r3, [r7, #2952]	; 0xb88
   2a378:	sub	r3, r3, #2944	; 0xb80
   2a37c:	str	r3, [r2, #2952]	; 0xb88
   2a380:	ldr	r3, [r4]
   2a384:	ldr	r3, [r3, #2948]	; 0xb84
   2a388:	str	r3, [r4]
   2a38c:	ldr	r3, [r4]
   2a390:	add	r2, r3, #2944	; 0xb80
   2a394:	str	r2, [r4, #8]
   2a398:	mov	r2, #2944	; 0xb80
   2a39c:	str	r2, [r4, #12]
   2a3a0:	ldr	r2, [r3, #2944]	; 0xb80
   2a3a4:	ldr	r2, [r2, #2952]	; 0xb88
   2a3a8:	sub	r2, r2, #2944	; 0xb80
   2a3ac:	str	r2, [r3, #2952]	; 0xb88
   2a3b0:	b	2a338 <flatcc_emitter@@Base+0xc4>
   2a3b4:	mov	r0, #0
   2a3b8:	b	2a4bc <flatcc_emitter@@Base+0x248>
   2a3bc:	ldr	r6, [r4, #16]
   2a3c0:	add	r0, r6, ip
   2a3c4:	str	r0, [r4, #16]
   2a3c8:	sub	ip, r3, ip
   2a3cc:	str	ip, [r4, #20]
   2a3d0:	sub	r4, r2, #1
   2a3d4:	cmp	r2, #0
   2a3d8:	moveq	r0, r2
   2a3dc:	beq	2a4bc <flatcc_emitter@@Base+0x248>
   2a3e0:	add	r5, r1, #8
   2a3e4:	ldr	r2, [r5, #-4]
   2a3e8:	ldr	r1, [r5, #-8]
   2a3ec:	mov	r0, r6
   2a3f0:	bl	14524 <memcpy@plt>
   2a3f4:	ldr	r3, [r5, #-4]
   2a3f8:	add	r6, r6, r3
   2a3fc:	sub	r4, r4, #1
   2a400:	add	r5, r5, #8
   2a404:	cmn	r4, #1
   2a408:	bne	2a3e4 <flatcc_emitter@@Base+0x170>
   2a40c:	mov	r0, #0
   2a410:	b	2a4bc <flatcc_emitter@@Base+0x248>
   2a414:	mov	r6, r7
   2a418:	mov	r2, r6
   2a41c:	mov	r1, r9
   2a420:	ldr	r0, [r4, #16]
   2a424:	bl	14524 <memcpy@plt>
   2a428:	sub	r7, r7, r6
   2a42c:	add	r9, r9, r6
   2a430:	ldr	r3, [r4, #16]
   2a434:	add	r3, r3, r6
   2a438:	str	r3, [r4, #16]
   2a43c:	ldr	r3, [r4, #20]
   2a440:	sub	r6, r3, r6
   2a444:	str	r6, [r4, #20]
   2a448:	cmp	r7, #0
   2a44c:	beq	2a50c <flatcc_emitter@@Base+0x298>
   2a450:	ldr	r6, [r4, #20]
   2a454:	cmp	r6, r7
   2a458:	bcs	2a414 <flatcc_emitter@@Base+0x1a0>
   2a45c:	cmp	r6, #0
   2a460:	bne	2a418 <flatcc_emitter@@Base+0x1a4>
   2a464:	ldr	r6, [r4, #4]
   2a468:	cmp	r6, #0
   2a46c:	beq	2a5f8 <flatcc_emitter@@Base+0x384>
   2a470:	ldr	r3, [r6, #2944]	; 0xb80
   2a474:	ldr	r2, [r4]
   2a478:	cmp	r3, r2
   2a47c:	beq	2a5bc <flatcc_emitter@@Base+0x348>
   2a480:	str	r3, [r4, #4]
   2a484:	ldr	r3, [r4, #4]
   2a488:	str	r3, [r4, #16]
   2a48c:	mov	r2, #2944	; 0xb80
   2a490:	str	r2, [r4, #20]
   2a494:	ldr	r2, [r3, #2948]	; 0xb84
   2a498:	ldr	r2, [r2, #2952]	; 0xb88
   2a49c:	add	r2, r2, #2944	; 0xb80
   2a4a0:	str	r2, [r3, #2952]	; 0xb88
   2a4a4:	b	2a448 <flatcc_emitter@@Base+0x1d4>
   2a4a8:	mvn	r0, #0
   2a4ac:	b	2a4bc <flatcc_emitter@@Base+0x248>
   2a4b0:	mvn	r0, #0
   2a4b4:	b	2a4bc <flatcc_emitter@@Base+0x248>
   2a4b8:	mvn	r0, #0
   2a4bc:	add	sp, sp, #4
   2a4c0:	ldrd	r4, [sp]
   2a4c4:	ldrd	r6, [sp, #8]
   2a4c8:	ldrd	r8, [sp, #16]
   2a4cc:	ldrd	sl, [sp, #24]
   2a4d0:	add	sp, sp, #32
   2a4d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a4d8:	mvn	r0, #0
   2a4dc:	b	2a4bc <flatcc_emitter@@Base+0x248>
   2a4e0:	sub	r5, r5, #8
   2a4e4:	sub	r8, r8, #1
   2a4e8:	cmn	r8, #1
   2a4ec:	beq	2a3b4 <flatcc_emitter@@Base+0x140>
   2a4f0:	ldr	r6, [r5, #-4]
   2a4f4:	ldr	r9, [r5, #-8]
   2a4f8:	add	r9, r9, r6
   2a4fc:	cmp	r6, #0
   2a500:	beq	2a4e0 <flatcc_emitter@@Base+0x26c>
   2a504:	mov	sl, #1472	; 0x5c0
   2a508:	b	2a340 <flatcc_emitter@@Base+0xcc>
   2a50c:	add	r5, r5, #8
   2a510:	subs	r8, r8, #1
   2a514:	beq	2a530 <flatcc_emitter@@Base+0x2bc>
   2a518:	ldr	r9, [r5, #-8]
   2a51c:	ldr	r7, [r5, #-4]
   2a520:	cmp	r7, #0
   2a524:	beq	2a50c <flatcc_emitter@@Base+0x298>
   2a528:	mov	sl, #1472	; 0x5c0
   2a52c:	b	2a450 <flatcc_emitter@@Base+0x1dc>
   2a530:	mov	r0, #0
   2a534:	b	2a4bc <flatcc_emitter@@Base+0x248>
   2a538:	movw	r0, #2956	; 0xb8c
   2a53c:	bl	14554 <malloc@plt>
   2a540:	cmp	r0, #0
   2a544:	beq	2a4a8 <flatcc_emitter@@Base+0x234>
   2a548:	ldr	r3, [r4, #28]
   2a54c:	add	r3, r3, #2944	; 0xb80
   2a550:	str	r3, [r4, #28]
   2a554:	ldr	r3, [r4, #4]
   2a558:	str	r3, [r0, #2948]	; 0xb84
   2a55c:	str	r7, [r0, #2944]	; 0xb80
   2a560:	str	r0, [r7, #2948]	; 0xb84
   2a564:	ldr	r3, [r4, #4]
   2a568:	str	r0, [r3, #2944]	; 0xb80
   2a56c:	str	r0, [r4]
   2a570:	b	2a38c <flatcc_emitter@@Base+0x118>
   2a574:	movw	r0, #2956	; 0xb8c
   2a578:	bl	14554 <malloc@plt>
   2a57c:	cmp	r0, #0
   2a580:	beq	2a4b0 <flatcc_emitter@@Base+0x23c>
   2a584:	ldr	r3, [r4, #28]
   2a588:	add	r3, r3, #2944	; 0xb80
   2a58c:	str	r3, [r4, #28]
   2a590:	str	r0, [r4]
   2a594:	str	r0, [r4, #4]
   2a598:	str	r0, [r0, #2944]	; 0xb80
   2a59c:	str	r0, [r0, #2948]	; 0xb84
   2a5a0:	add	r3, r0, #1472	; 0x5c0
   2a5a4:	str	r3, [r4, #8]
   2a5a8:	str	r3, [r4, #16]
   2a5ac:	str	sl, [r4, #12]
   2a5b0:	str	sl, [r4, #20]
   2a5b4:	str	fp, [r0, #2952]	; 0xb88
   2a5b8:	b	2a338 <flatcc_emitter@@Base+0xc4>
   2a5bc:	movw	r0, #2956	; 0xb8c
   2a5c0:	bl	14554 <malloc@plt>
   2a5c4:	cmp	r0, #0
   2a5c8:	beq	2a4b8 <flatcc_emitter@@Base+0x244>
   2a5cc:	ldr	r3, [r4, #28]
   2a5d0:	add	r3, r3, #2944	; 0xb80
   2a5d4:	str	r3, [r4, #28]
   2a5d8:	str	r6, [r0, #2948]	; 0xb84
   2a5dc:	ldr	r3, [r4]
   2a5e0:	str	r3, [r0, #2944]	; 0xb80
   2a5e4:	str	r0, [r3, #2948]	; 0xb84
   2a5e8:	ldr	r3, [r4, #4]
   2a5ec:	str	r0, [r3, #2944]	; 0xb80
   2a5f0:	str	r0, [r4, #4]
   2a5f4:	b	2a484 <flatcc_emitter@@Base+0x210>
   2a5f8:	movw	r0, #2956	; 0xb8c
   2a5fc:	bl	14554 <malloc@plt>
   2a600:	cmp	r0, #0
   2a604:	beq	2a4d8 <flatcc_emitter@@Base+0x264>
   2a608:	ldr	r3, [r4, #28]
   2a60c:	add	r3, r3, #2944	; 0xb80
   2a610:	str	r3, [r4, #28]
   2a614:	str	r0, [r4]
   2a618:	str	r0, [r4, #4]
   2a61c:	str	r0, [r0, #2944]	; 0xb80
   2a620:	str	r0, [r0, #2948]	; 0xb84
   2a624:	add	r3, r0, #1472	; 0x5c0
   2a628:	str	r3, [r4, #8]
   2a62c:	str	r3, [r4, #16]
   2a630:	str	sl, [r4, #12]
   2a634:	str	sl, [r4, #20]
   2a638:	str	fp, [r0, #2952]	; 0xb88
   2a63c:	b	2a448 <flatcc_emitter@@Base+0x1d4>

0002a640 <flatcc_emitter_copy_buffer@@Base>:
   2a640:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a644:	strd	r6, [sp, #8]
   2a648:	str	r8, [sp, #16]
   2a64c:	str	lr, [sp, #20]
   2a650:	ldr	r3, [r0, #24]
   2a654:	cmp	r3, r2
   2a658:	movhi	r4, #0
   2a65c:	bhi	2a6ec <flatcc_emitter_copy_buffer@@Base+0xac>
   2a660:	ldr	r4, [r0]
   2a664:	cmp	r4, #0
   2a668:	beq	2a6ec <flatcc_emitter_copy_buffer@@Base+0xac>
   2a66c:	mov	r5, r1
   2a670:	mov	r7, r0
   2a674:	ldr	r2, [r0, #4]
   2a678:	cmp	r4, r2
   2a67c:	beq	2a704 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2a680:	ldr	r4, [r0, #12]
   2a684:	rsb	r4, r4, #2944	; 0xb80
   2a688:	mov	r2, r4
   2a68c:	ldr	r1, [r0, #8]
   2a690:	mov	r0, r5
   2a694:	bl	14524 <memcpy@plt>
   2a698:	add	r4, r5, r4
   2a69c:	ldr	r3, [r7]
   2a6a0:	ldr	r5, [r3, #2944]	; 0xb80
   2a6a4:	ldr	r3, [r7, #4]
   2a6a8:	cmp	r5, r3
   2a6ac:	beq	2a71c <flatcc_emitter_copy_buffer@@Base+0xdc>
   2a6b0:	mov	r6, #2944	; 0xb80
   2a6b4:	mov	r2, r6
   2a6b8:	mov	r1, r5
   2a6bc:	mov	r0, r4
   2a6c0:	bl	14524 <memcpy@plt>
   2a6c4:	add	r4, r4, #2944	; 0xb80
   2a6c8:	ldr	r5, [r5, #2944]	; 0xb80
   2a6cc:	ldr	r3, [r7, #4]
   2a6d0:	cmp	r3, r5
   2a6d4:	bne	2a6b4 <flatcc_emitter_copy_buffer@@Base+0x74>
   2a6d8:	ldr	r2, [r7, #20]
   2a6dc:	rsb	r2, r2, #2944	; 0xb80
   2a6e0:	mov	r1, r5
   2a6e4:	mov	r0, r4
   2a6e8:	bl	14524 <memcpy@plt>
   2a6ec:	mov	r0, r4
   2a6f0:	ldrd	r4, [sp]
   2a6f4:	ldrd	r6, [sp, #8]
   2a6f8:	ldr	r8, [sp, #16]
   2a6fc:	add	sp, sp, #20
   2a700:	pop	{pc}		; (ldr pc, [sp], #4)
   2a704:	mov	r2, r3
   2a708:	ldr	r1, [r0, #8]
   2a70c:	mov	r0, r5
   2a710:	bl	14524 <memcpy@plt>
   2a714:	mov	r4, r5
   2a718:	b	2a6ec <flatcc_emitter_copy_buffer@@Base+0xac>
   2a71c:	mov	r5, r3
   2a720:	b	2a6d8 <flatcc_emitter_copy_buffer@@Base+0x98>
   2a724:	add	r1, r1, #2
   2a728:	lsl	r1, r1, #1
   2a72c:	uxth	r1, r1
   2a730:	ldrh	ip, [r0, #22]
   2a734:	cmp	ip, r1
   2a738:	bls	2a778 <flatcc_emitter_copy_buffer@@Base+0x138>
   2a73c:	ldr	ip, [r0, #12]
   2a740:	ldrh	r1, [ip, r1]
   2a744:	cmp	r1, #0
   2a748:	beq	2a778 <flatcc_emitter_copy_buffer@@Base+0x138>
   2a74c:	ldrh	ip, [r0, #20]
   2a750:	add	r2, r1, #4
   2a754:	cmp	ip, r2
   2a758:	bcc	2a790 <flatcc_emitter_copy_buffer@@Base+0x150>
   2a75c:	ldr	r2, [r0, #16]
   2a760:	add	r1, r1, r2
   2a764:	tst	r1, #3
   2a768:	bne	2a798 <flatcc_emitter_copy_buffer@@Base+0x158>
   2a76c:	str	r1, [r3]
   2a770:	mov	r0, #0
   2a774:	bx	lr
   2a778:	mov	r1, #0
   2a77c:	str	r1, [r3]
   2a780:	cmp	r2, r1
   2a784:	moveq	r0, r2
   2a788:	movne	r0, #4
   2a78c:	bx	lr
   2a790:	mov	r0, #13
   2a794:	bx	lr
   2a798:	mov	r0, #12
   2a79c:	bx	lr

0002a7a0 <flatcc_verify_error_string@@Base>:
   2a7a0:	cmp	r0, #36	; 0x24
   2a7a4:	ldrls	pc, [pc, r0, lsl #2]
   2a7a8:	b	2a9f0 <flatcc_verify_error_string@@Base+0x250>
   2a7ac:	strdeq	sl, [r2], -ip
   2a7b0:	andeq	sl, r2, r0, asr #16
   2a7b4:	andeq	sl, r2, ip, asr #16
   2a7b8:	andeq	sl, r2, r8, asr r8
   2a7bc:	andeq	sl, r2, r4, ror #16
   2a7c0:	andeq	sl, r2, r0, ror r8
   2a7c4:	andeq	sl, r2, ip, ror r8
   2a7c8:	andeq	sl, r2, r8, lsl #17
   2a7cc:	muleq	r2, r4, r8
   2a7d0:	andeq	sl, r2, r0, lsr #17
   2a7d4:	andeq	sl, r2, ip, lsr #17
   2a7d8:			; <UNDEFINED> instruction: 0x0002a8b8
   2a7dc:	andeq	sl, r2, r4, asr #17
   2a7e0:	ldrdeq	sl, [r2], -r0
   2a7e4:	ldrdeq	sl, [r2], -ip
   2a7e8:	andeq	sl, r2, r8, ror #17
   2a7ec:	strdeq	sl, [r2], -r4
   2a7f0:	andeq	sl, r2, r0, lsl #18
   2a7f4:	andeq	sl, r2, ip, lsl #18
   2a7f8:	andeq	sl, r2, r8, lsl r9
   2a7fc:	andeq	sl, r2, r4, lsr #18
   2a800:	andeq	sl, r2, r0, lsr r9
   2a804:	andeq	sl, r2, ip, lsr r9
   2a808:	andeq	sl, r2, r8, asr #18
   2a80c:	andeq	sl, r2, r4, asr r9
   2a810:	andeq	sl, r2, r0, ror #18
   2a814:	andeq	sl, r2, ip, ror #18
   2a818:	andeq	sl, r2, r8, ror r9
   2a81c:	andeq	sl, r2, r4, lsl #19
   2a820:	muleq	r2, r0, r9
   2a824:	muleq	r2, ip, r9
   2a828:	andeq	sl, r2, r8, lsr #19
   2a82c:			; <UNDEFINED> instruction: 0x0002a9b4
   2a830:	andeq	sl, r2, r0, asr #19
   2a834:	andeq	sl, r2, ip, asr #19
   2a838:	ldrdeq	sl, [r2], -r8
   2a83c:	andeq	sl, r2, r4, ror #19
   2a840:	movw	r0, #14016	; 0x36c0
   2a844:	movt	r0, #4
   2a848:	bx	lr
   2a84c:	movw	r0, #12884	; 0x3254
   2a850:	movt	r0, #4
   2a854:	bx	lr
   2a858:	movw	r0, #12904	; 0x3268
   2a85c:	movt	r0, #4
   2a860:	bx	lr
   2a864:	movw	r0, #12932	; 0x3284
   2a868:	movt	r0, #4
   2a86c:	bx	lr
   2a870:	movw	r0, #12956	; 0x329c
   2a874:	movt	r0, #4
   2a878:	bx	lr
   2a87c:	movw	r0, #12992	; 0x32c0
   2a880:	movt	r0, #4
   2a884:	bx	lr
   2a888:	movw	r0, #13024	; 0x32e0
   2a88c:	movt	r0, #4
   2a890:	bx	lr
   2a894:	movw	r0, #13052	; 0x32fc
   2a898:	movt	r0, #4
   2a89c:	bx	lr
   2a8a0:	movw	r0, #13072	; 0x3310
   2a8a4:	movt	r0, #4
   2a8a8:	bx	lr
   2a8ac:	movw	r0, #13092	; 0x3324
   2a8b0:	movt	r0, #4
   2a8b4:	bx	lr
   2a8b8:	movw	r0, #13116	; 0x333c
   2a8bc:	movt	r0, #4
   2a8c0:	bx	lr
   2a8c4:	movw	r0, #13136	; 0x3350
   2a8c8:	movt	r0, #4
   2a8cc:	bx	lr
   2a8d0:	movw	r0, #13160	; 0x3368
   2a8d4:	movt	r0, #4
   2a8d8:	bx	lr
   2a8dc:	movw	r0, #13188	; 0x3384
   2a8e0:	movt	r0, #4
   2a8e4:	bx	lr
   2a8e8:	movw	r0, #13216	; 0x33a0
   2a8ec:	movt	r0, #4
   2a8f0:	bx	lr
   2a8f4:	movw	r0, #13256	; 0x33c8
   2a8f8:	movt	r0, #4
   2a8fc:	bx	lr
   2a900:	movw	r0, #13296	; 0x33f0
   2a904:	movt	r0, #4
   2a908:	bx	lr
   2a90c:	movw	r0, #13336	; 0x3418
   2a910:	movt	r0, #4
   2a914:	bx	lr
   2a918:	movw	r0, #13356	; 0x342c
   2a91c:	movt	r0, #4
   2a920:	bx	lr
   2a924:	movw	r0, #13396	; 0x3454
   2a928:	movt	r0, #4
   2a92c:	bx	lr
   2a930:	movw	r0, #13420	; 0x346c
   2a934:	movt	r0, #4
   2a938:	bx	lr
   2a93c:	movw	r0, #13464	; 0x3498
   2a940:	movt	r0, #4
   2a944:	bx	lr
   2a948:	movw	r0, #13516	; 0x34cc
   2a94c:	movt	r0, #4
   2a950:	bx	lr
   2a954:	movw	r0, #13560	; 0x34f8
   2a958:	movt	r0, #4
   2a95c:	bx	lr
   2a960:	movw	r0, #13604	; 0x3524
   2a964:	movt	r0, #4
   2a968:	bx	lr
   2a96c:	movw	r0, #13652	; 0x3554
   2a970:	movt	r0, #4
   2a974:	bx	lr
   2a978:	movw	r0, #13672	; 0x3568
   2a97c:	movt	r0, #4
   2a980:	bx	lr
   2a984:	movw	r0, #13700	; 0x3584
   2a988:	movt	r0, #4
   2a98c:	bx	lr
   2a990:	movw	r0, #13724	; 0x359c
   2a994:	movt	r0, #4
   2a998:	bx	lr
   2a99c:	movw	r0, #13764	; 0x35c4
   2a9a0:	movt	r0, #4
   2a9a4:	bx	lr
   2a9a8:	movw	r0, #13804	; 0x35ec
   2a9ac:	movt	r0, #4
   2a9b0:	bx	lr
   2a9b4:	movw	r0, #13828	; 0x3604
   2a9b8:	movt	r0, #4
   2a9bc:	bx	lr
   2a9c0:	movw	r0, #13868	; 0x362c
   2a9c4:	movt	r0, #4
   2a9c8:	bx	lr
   2a9cc:	movw	r0, #13908	; 0x3654
   2a9d0:	movt	r0, #4
   2a9d4:	bx	lr
   2a9d8:	movw	r0, #13960	; 0x3688
   2a9dc:	movt	r0, #4
   2a9e0:	bx	lr
   2a9e4:	movw	r0, #14000	; 0x36b0
   2a9e8:	movt	r0, #4
   2a9ec:	bx	lr
   2a9f0:	movw	r0, #12872	; 0x3248
   2a9f4:	movt	r0, #4
   2a9f8:	bx	lr
   2a9fc:	movw	r0, #12880	; 0x3250
   2aa00:	movt	r0, #4
   2aa04:	bx	lr

0002aa08 <flatcc_verify_field@@Base>:
   2aa08:	add	r1, r1, #2
   2aa0c:	lsl	r1, r1, #1
   2aa10:	uxth	r1, r1
   2aa14:	ldrh	ip, [r0, #22]
   2aa18:	cmp	ip, r1
   2aa1c:	bls	2aa68 <flatcc_verify_field@@Base+0x60>
   2aa20:	ldr	ip, [r0, #12]
   2aa24:	ldrh	r1, [ip, r1]
   2aa28:	cmp	r1, #0
   2aa2c:	beq	2aa70 <flatcc_verify_field@@Base+0x68>
   2aa30:	add	r2, r2, r1
   2aa34:	ldrh	ip, [r0, #20]
   2aa38:	cmp	r2, ip
   2aa3c:	bhi	2aa78 <flatcc_verify_field@@Base+0x70>
   2aa40:	ldr	r2, [r0]
   2aa44:	ldr	r0, [r0, #16]
   2aa48:	add	r2, r2, r0
   2aa4c:	add	r2, r2, r1
   2aa50:	sub	r3, r3, #1
   2aa54:	and	r2, r2, r3
   2aa58:	cmp	r2, #0
   2aa5c:	moveq	r0, #0
   2aa60:	movne	r0, #12
   2aa64:	bx	lr
   2aa68:	mov	r0, #0
   2aa6c:	bx	lr
   2aa70:	mov	r0, #0
   2aa74:	bx	lr
   2aa78:	mov	r0, #13
   2aa7c:	bx	lr

0002aa80 <flatcc_verify_string_field@@Base>:
   2aa80:	str	r4, [sp, #-8]!
   2aa84:	str	lr, [sp, #4]
   2aa88:	sub	sp, sp, #8
   2aa8c:	mov	r4, r0
   2aa90:	add	r3, sp, #4
   2aa94:	bl	2a724 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2aa98:	cmp	r0, #0
   2aa9c:	bne	2ab0c <flatcc_verify_string_field@@Base+0x8c>
   2aaa0:	ldr	r3, [sp, #4]
   2aaa4:	cmp	r3, #0
   2aaa8:	beq	2ab0c <flatcc_verify_string_field@@Base+0x8c>
   2aaac:	ldr	r1, [r4]
   2aab0:	ldr	r2, [r1, r3]
   2aab4:	add	r2, r3, r2
   2aab8:	cmp	r3, r2
   2aabc:	movcs	r0, #17
   2aac0:	bcs	2ab0c <flatcc_verify_string_field@@Base+0x8c>
   2aac4:	ldr	r3, [r4, #4]
   2aac8:	add	ip, r2, #4
   2aacc:	cmp	r3, ip
   2aad0:	movcc	r0, #17
   2aad4:	bcc	2ab0c <flatcc_verify_string_field@@Base+0x8c>
   2aad8:	tst	r2, #3
   2aadc:	movne	r0, #17
   2aae0:	bne	2ab0c <flatcc_verify_string_field@@Base+0x8c>
   2aae4:	ldr	r2, [r1, r2]
   2aae8:	sub	r3, r3, ip
   2aaec:	add	lr, r2, #1
   2aaf0:	cmp	r3, lr
   2aaf4:	movcc	r0, #8
   2aaf8:	bcc	2ab0c <flatcc_verify_string_field@@Base+0x8c>
   2aafc:	add	r1, r1, ip
   2ab00:	ldrb	r3, [r1, r2]
   2ab04:	cmp	r3, #0
   2ab08:	movne	r0, #7
   2ab0c:	add	sp, sp, #8
   2ab10:	ldr	r4, [sp]
   2ab14:	add	sp, sp, #4
   2ab18:	pop	{pc}		; (ldr pc, [sp], #4)

0002ab1c <flatcc_verify_vector_field@@Base>:
   2ab1c:	strd	r4, [sp, #-16]!
   2ab20:	str	r6, [sp, #8]
   2ab24:	str	lr, [sp, #12]
   2ab28:	sub	sp, sp, #8
   2ab2c:	mov	r6, r0
   2ab30:	mov	r5, r3
   2ab34:	ldrh	r4, [sp, #24]
   2ab38:	add	r3, sp, #4
   2ab3c:	bl	2a724 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2ab40:	cmp	r0, #0
   2ab44:	bne	2abc0 <flatcc_verify_vector_field@@Base+0xa4>
   2ab48:	ldr	r3, [sp, #4]
   2ab4c:	cmp	r3, #0
   2ab50:	beq	2abc0 <flatcc_verify_vector_field@@Base+0xa4>
   2ab54:	ldr	r1, [r6]
   2ab58:	ldr	r2, [r1, r3]
   2ab5c:	add	r2, r3, r2
   2ab60:	cmp	r3, r2
   2ab64:	movcs	r0, #16
   2ab68:	bcs	2abc0 <flatcc_verify_vector_field@@Base+0xa4>
   2ab6c:	ldr	ip, [r6, #4]
   2ab70:	add	r3, r2, #4
   2ab74:	cmp	ip, r3
   2ab78:	movcc	r0, #16
   2ab7c:	bcc	2abc0 <flatcc_verify_vector_field@@Base+0xa4>
   2ab80:	cmp	r4, #4
   2ab84:	movcc	r4, #4
   2ab88:	sub	r4, r4, #1
   2ab8c:	orr	r4, r4, #3
   2ab90:	tst	r4, r3
   2ab94:	movne	r0, #16
   2ab98:	bne	2abc0 <flatcc_verify_vector_field@@Base+0xa4>
   2ab9c:	ldr	r2, [r1, r2]
   2aba0:	ldr	r1, [sp, #28]
   2aba4:	cmp	r1, r2
   2aba8:	movcc	r0, #25
   2abac:	bcc	2abc0 <flatcc_verify_vector_field@@Base+0xa4>
   2abb0:	sub	r3, ip, r3
   2abb4:	mul	r5, r2, r5
   2abb8:	cmp	r3, r5
   2abbc:	movcc	r0, #26
   2abc0:	add	sp, sp, #8
   2abc4:	ldrd	r4, [sp]
   2abc8:	ldr	r6, [sp, #8]
   2abcc:	add	sp, sp, #12
   2abd0:	pop	{pc}		; (ldr pc, [sp], #4)

0002abd4 <flatcc_verify_string_vector_field@@Base>:
   2abd4:	strd	r4, [sp, #-20]!	; 0xffffffec
   2abd8:	strd	r6, [sp, #8]
   2abdc:	str	lr, [sp, #16]
   2abe0:	sub	sp, sp, #12
   2abe4:	mov	r4, r0
   2abe8:	add	r3, sp, #4
   2abec:	bl	2a724 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2abf0:	cmp	r0, #0
   2abf4:	bne	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2abf8:	ldr	r3, [sp, #4]
   2abfc:	cmp	r3, #0
   2ac00:	beq	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ac04:	ldr	r1, [r4]
   2ac08:	ldr	r2, [r1, r3]
   2ac0c:	add	r2, r3, r2
   2ac10:	cmp	r3, r2
   2ac14:	movcs	r0, #16
   2ac18:	bcs	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ac1c:	ldr	r4, [r4, #4]
   2ac20:	add	r3, r2, #4
   2ac24:	cmp	r4, r3
   2ac28:	movcc	r0, #16
   2ac2c:	bcc	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ac30:	tst	r3, #3
   2ac34:	bne	2ad64 <flatcc_verify_string_vector_field@@Base+0x190>
   2ac38:	ldr	ip, [r1, r2]
   2ac3c:	cmn	ip, #-1073741823	; 0xc0000001
   2ac40:	bhi	2ad64 <flatcc_verify_string_vector_field@@Base+0x190>
   2ac44:	lsl	r5, ip, #2
   2ac48:	sub	lr, r4, r3
   2ac4c:	cmp	lr, r5
   2ac50:	bcc	2ad64 <flatcc_verify_string_vector_field@@Base+0x190>
   2ac54:	cmp	ip, #0
   2ac58:	beq	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ac5c:	ldr	r2, [r1, r3]
   2ac60:	add	r2, r3, r2
   2ac64:	cmp	r2, r3
   2ac68:	movls	r0, #17
   2ac6c:	bls	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ac70:	add	lr, r2, #4
   2ac74:	cmp	r4, lr
   2ac78:	movcc	r0, #17
   2ac7c:	bcc	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ac80:	tst	r2, #3
   2ac84:	bne	2acf4 <flatcc_verify_string_vector_field@@Base+0x120>
   2ac88:	ldr	r7, [r1, r2]
   2ac8c:	sub	ip, r4, lr
   2ac90:	add	r6, r7, #1
   2ac94:	cmp	ip, r6
   2ac98:	addcs	ip, r3, r5
   2ac9c:	bcc	2acf4 <flatcc_verify_string_vector_field@@Base+0x120>
   2aca0:	add	lr, r1, lr
   2aca4:	ldrb	lr, [lr, r7]
   2aca8:	cmp	lr, #0
   2acac:	bne	2ad30 <flatcc_verify_string_vector_field@@Base+0x15c>
   2acb0:	add	r3, r3, #4
   2acb4:	cmp	r3, ip
   2acb8:	beq	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2acbc:	ldr	r2, [r1, r3]
   2acc0:	add	r2, r3, r2
   2acc4:	cmp	r2, r3
   2acc8:	bls	2ad4c <flatcc_verify_string_vector_field@@Base+0x178>
   2accc:	add	lr, r2, #4
   2acd0:	cmp	r4, lr
   2acd4:	bcc	2ad54 <flatcc_verify_string_vector_field@@Base+0x180>
   2acd8:	tst	r2, #3
   2acdc:	bne	2acf4 <flatcc_verify_string_vector_field@@Base+0x120>
   2ace0:	ldr	r7, [r1, r2]
   2ace4:	sub	r5, r4, lr
   2ace8:	add	r6, r7, #1
   2acec:	cmp	r5, r6
   2acf0:	bcs	2aca0 <flatcc_verify_string_vector_field@@Base+0xcc>
   2acf4:	add	ip, r2, #4
   2acf8:	tst	r2, #3
   2acfc:	movne	r0, #17
   2ad00:	bne	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ad04:	ldr	r2, [r1, r2]
   2ad08:	sub	r3, r4, ip
   2ad0c:	add	lr, r2, #1
   2ad10:	cmp	r3, lr
   2ad14:	movcc	r0, #8
   2ad18:	bcc	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ad1c:	add	r1, r1, ip
   2ad20:	ldrb	r3, [r1, r2]
   2ad24:	cmp	r3, #0
   2ad28:	movne	r0, #7
   2ad2c:	b	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ad30:	cmp	r3, r2
   2ad34:	bcs	2ad5c <flatcc_verify_string_vector_field@@Base+0x188>
   2ad38:	add	ip, r2, #4
   2ad3c:	cmp	r4, ip
   2ad40:	bcs	2acf8 <flatcc_verify_string_vector_field@@Base+0x124>
   2ad44:	mov	r0, #17
   2ad48:	b	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ad4c:	mov	r0, #17
   2ad50:	b	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ad54:	mov	r0, #17
   2ad58:	b	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ad5c:	mov	r0, #17
   2ad60:	b	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ad64:	tst	r3, #3
   2ad68:	movne	r0, #16
   2ad6c:	bne	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ad70:	ldr	r2, [r1, r2]
   2ad74:	cmn	r2, #-1073741823	; 0xc0000001
   2ad78:	movhi	r0, #25
   2ad7c:	bhi	2ad90 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2ad80:	sub	r3, r4, r3
   2ad84:	lsl	r2, r2, #2
   2ad88:	cmp	r3, r2
   2ad8c:	movcc	r0, #26
   2ad90:	add	sp, sp, #12
   2ad94:	ldrd	r4, [sp]
   2ad98:	ldrd	r6, [sp, #8]
   2ad9c:	add	sp, sp, #16
   2ada0:	pop	{pc}		; (ldr pc, [sp], #4)

0002ada4 <flatcc_verify_table_field@@Base>:
   2ada4:	strd	r4, [sp, #-12]!
   2ada8:	str	lr, [sp, #8]
   2adac:	sub	sp, sp, #36	; 0x24
   2adb0:	mov	r4, r0
   2adb4:	mov	r5, r3
   2adb8:	add	r3, sp, #28
   2adbc:	bl	2a724 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2adc0:	cmp	r0, #0
   2adc4:	bne	2add4 <flatcc_verify_table_field@@Base+0x30>
   2adc8:	ldr	r3, [sp, #28]
   2adcc:	cmp	r3, #0
   2add0:	bne	2ade4 <flatcc_verify_table_field@@Base+0x40>
   2add4:	add	sp, sp, #36	; 0x24
   2add8:	ldrd	r4, [sp]
   2addc:	add	sp, sp, #8
   2ade0:	pop	{pc}		; (ldr pc, [sp], #4)
   2ade4:	ldr	r0, [r4]
   2ade8:	ldr	ip, [r4, #4]
   2adec:	ldr	r1, [r0, r3]
   2adf0:	ldr	r2, [r4, #8]
   2adf4:	sub	r2, r2, #1
   2adf8:	str	r2, [sp, #12]
   2adfc:	cmp	r2, #0
   2ae00:	moveq	r0, #3
   2ae04:	beq	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae08:	add	r2, r3, r1
   2ae0c:	cmp	r3, r2
   2ae10:	movcs	r0, #15
   2ae14:	bcs	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae18:	add	r3, r2, #4
   2ae1c:	cmp	ip, r3
   2ae20:	movcc	r0, #15
   2ae24:	bcc	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae28:	tst	r2, #3
   2ae2c:	movne	r0, #15
   2ae30:	bne	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae34:	str	r2, [sp, #20]
   2ae38:	ldr	r3, [r0, r2]
   2ae3c:	subs	r3, r2, r3
   2ae40:	movmi	r0, #29
   2ae44:	bmi	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae48:	tst	r3, #1
   2ae4c:	movne	r0, #29
   2ae50:	bne	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae54:	add	lr, r3, #2
   2ae58:	cmp	ip, lr
   2ae5c:	movcc	r0, #27
   2ae60:	bcc	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae64:	add	r4, r0, r3
   2ae68:	ldrh	r1, [r0, r3]
   2ae6c:	strh	r1, [sp, #26]
   2ae70:	add	r3, r1, r3
   2ae74:	cmp	ip, r3
   2ae78:	movcc	r0, #30
   2ae7c:	bcc	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae80:	tst	r1, #1
   2ae84:	movne	r0, #30
   2ae88:	bne	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae8c:	cmp	r1, #3
   2ae90:	movls	r0, #28
   2ae94:	bls	2add4 <flatcc_verify_table_field@@Base+0x30>
   2ae98:	ldrh	r3, [r0, lr]
   2ae9c:	strh	r3, [sp, #24]
   2aea0:	sub	r2, ip, r2
   2aea4:	cmp	r2, r3
   2aea8:	movcc	r0, #20
   2aeac:	bcc	2add4 <flatcc_verify_table_field@@Base+0x30>
   2aeb0:	str	r4, [sp, #16]
   2aeb4:	str	r0, [sp, #4]
   2aeb8:	str	ip, [sp, #8]
   2aebc:	add	r0, sp, #4
   2aec0:	blx	r5
   2aec4:	b	2add4 <flatcc_verify_table_field@@Base+0x30>

0002aec8 <flatcc_verify_table_vector_field@@Base>:
   2aec8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2aecc:	strd	r6, [sp, #8]
   2aed0:	strd	r8, [sp, #16]
   2aed4:	strd	sl, [sp, #24]
   2aed8:	str	lr, [sp, #32]
   2aedc:	sub	sp, sp, #36	; 0x24
   2aee0:	mov	r4, r0
   2aee4:	mov	r5, r3
   2aee8:	add	r3, sp, #28
   2aeec:	bl	2a724 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2aef0:	cmp	r0, #0
   2aef4:	bne	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2aef8:	ldr	r3, [sp, #28]
   2aefc:	cmp	r3, #0
   2af00:	bne	2af20 <flatcc_verify_table_vector_field@@Base+0x58>
   2af04:	add	sp, sp, #36	; 0x24
   2af08:	ldrd	r4, [sp]
   2af0c:	ldrd	r6, [sp, #8]
   2af10:	ldrd	r8, [sp, #16]
   2af14:	ldrd	sl, [sp, #24]
   2af18:	add	sp, sp, #32
   2af1c:	pop	{pc}		; (ldr pc, [sp], #4)
   2af20:	ldr	r7, [r4]
   2af24:	ldr	r2, [r7, r3]
   2af28:	ldr	r6, [r4, #8]
   2af2c:	cmp	r6, #0
   2af30:	movle	r0, #3
   2af34:	ble	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2af38:	add	r2, r3, r2
   2af3c:	cmp	r3, r2
   2af40:	movcs	r0, #16
   2af44:	bcs	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2af48:	ldr	r8, [r4, #4]
   2af4c:	add	r4, r2, #4
   2af50:	cmp	r8, r4
   2af54:	movcc	r0, #16
   2af58:	bcc	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2af5c:	tst	r4, #3
   2af60:	bne	2b15c <flatcc_verify_table_vector_field@@Base+0x294>
   2af64:	ldr	r3, [r7, r2]
   2af68:	cmn	r3, #-1073741823	; 0xc0000001
   2af6c:	bhi	2b15c <flatcc_verify_table_vector_field@@Base+0x294>
   2af70:	lsl	sl, r3, #2
   2af74:	sub	r1, r8, r4
   2af78:	cmp	r1, sl
   2af7c:	bcc	2b15c <flatcc_verify_table_vector_field@@Base+0x294>
   2af80:	cmp	r3, #0
   2af84:	addne	r9, r7, r4
   2af88:	addne	sl, r4, sl
   2af8c:	subne	r6, r6, #2
   2af90:	bne	2afe4 <flatcc_verify_table_vector_field@@Base+0x11c>
   2af94:	b	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2af98:	ldr	r3, [r7, r2]
   2af9c:	cmn	r3, #-1073741823	; 0xc0000001
   2afa0:	movhi	r0, #25
   2afa4:	bhi	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2afa8:	sub	r4, r8, r4
   2afac:	lsl	r3, r3, #2
   2afb0:	cmp	r4, r3
   2afb4:	movcc	r0, #26
   2afb8:	b	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2afbc:	str	r2, [sp, #16]
   2afc0:	str	r7, [sp, #4]
   2afc4:	str	r8, [sp, #8]
   2afc8:	add	r0, sp, #4
   2afcc:	blx	r5
   2afd0:	cmp	r0, #0
   2afd4:	bne	2b148 <flatcc_verify_table_vector_field@@Base+0x280>
   2afd8:	add	r4, r4, #4
   2afdc:	cmp	r4, sl
   2afe0:	beq	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2afe4:	mov	fp, r9
   2afe8:	ldr	r3, [r9], #4
   2afec:	str	r6, [sp, #12]
   2aff0:	cmp	r6, #0
   2aff4:	beq	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2aff8:	add	r3, r3, r4
   2affc:	cmp	r4, r3
   2b000:	bcs	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2b004:	add	r2, r3, #4
   2b008:	cmp	r8, r2
   2b00c:	bcc	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2b010:	tst	r3, #3
   2b014:	bne	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2b018:	str	r3, [sp, #20]
   2b01c:	ldr	r1, [r7, r3]
   2b020:	subs	r1, r3, r1
   2b024:	bmi	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2b028:	tst	r1, #1
   2b02c:	bne	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2b030:	add	ip, r1, #2
   2b034:	cmp	r8, ip
   2b038:	bcc	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2b03c:	add	r2, r7, r1
   2b040:	ldrh	r0, [r7, r1]
   2b044:	strh	r0, [sp, #26]
   2b048:	add	r1, r0, r1
   2b04c:	cmp	r8, r1
   2b050:	bcc	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2b054:	tst	r0, #1
   2b058:	bne	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2b05c:	cmp	r0, #3
   2b060:	bls	2b078 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2b064:	ldrh	r1, [r7, ip]
   2b068:	strh	r1, [sp, #24]
   2b06c:	sub	r3, r8, r3
   2b070:	cmp	r3, r1
   2b074:	bcs	2afbc <flatcc_verify_table_vector_field@@Base+0xf4>
   2b078:	ldr	r3, [fp]
   2b07c:	str	r6, [sp, #12]
   2b080:	cmp	r6, #0
   2b084:	beq	2b154 <flatcc_verify_table_vector_field@@Base+0x28c>
   2b088:	add	r3, r4, r3
   2b08c:	cmp	r4, r3
   2b090:	movcs	r0, #15
   2b094:	bcs	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b098:	add	r2, r3, #4
   2b09c:	cmp	r8, r2
   2b0a0:	movcc	r0, #15
   2b0a4:	bcc	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b0a8:	tst	r3, #3
   2b0ac:	movne	r0, #15
   2b0b0:	bne	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b0b4:	str	r3, [sp, #20]
   2b0b8:	ldr	r2, [r7, r3]
   2b0bc:	subs	r2, r3, r2
   2b0c0:	movmi	r0, #29
   2b0c4:	bmi	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b0c8:	tst	r2, #1
   2b0cc:	movne	r0, #29
   2b0d0:	bne	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b0d4:	add	r0, r2, #2
   2b0d8:	cmp	r8, r0
   2b0dc:	movcc	r0, #27
   2b0e0:	bcc	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b0e4:	add	ip, r7, r2
   2b0e8:	ldrh	r1, [r7, r2]
   2b0ec:	strh	r1, [sp, #26]
   2b0f0:	add	r2, r1, r2
   2b0f4:	cmp	r8, r2
   2b0f8:	movcc	r0, #30
   2b0fc:	bcc	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b100:	tst	r1, #1
   2b104:	movne	r0, #30
   2b108:	bne	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b10c:	cmp	r1, #3
   2b110:	movls	r0, #28
   2b114:	bls	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b118:	ldrh	r2, [r7, r0]
   2b11c:	strh	r2, [sp, #24]
   2b120:	sub	r3, r8, r3
   2b124:	cmp	r3, r2
   2b128:	movcc	r0, #20
   2b12c:	bcc	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b130:	str	ip, [sp, #16]
   2b134:	str	r7, [sp, #4]
   2b138:	str	r8, [sp, #8]
   2b13c:	add	r0, sp, #4
   2b140:	blx	r5
   2b144:	b	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b148:	ldr	r3, [fp]
   2b14c:	str	r6, [sp, #12]
   2b150:	b	2b088 <flatcc_verify_table_vector_field@@Base+0x1c0>
   2b154:	mov	r0, #3
   2b158:	b	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>
   2b15c:	tst	r4, #3
   2b160:	beq	2af98 <flatcc_verify_table_vector_field@@Base+0xd0>
   2b164:	mov	r0, #16
   2b168:	b	2af04 <flatcc_verify_table_vector_field@@Base+0x3c>

0002b16c <flatcc_verify_union_table@@Base>:
   2b16c:	strd	r4, [sp, #-12]!
   2b170:	str	lr, [sp, #8]
   2b174:	sub	sp, sp, #28
   2b178:	ldr	r4, [r0]
   2b17c:	ldr	lr, [r0, #4]
   2b180:	ldr	ip, [r0, #16]
   2b184:	ldr	r2, [r0, #20]
   2b188:	ldr	r3, [r0, #8]
   2b18c:	sub	r3, r3, #1
   2b190:	str	r3, [sp, #8]
   2b194:	cmp	r3, #0
   2b198:	moveq	r0, #3
   2b19c:	beq	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b1a0:	add	r3, ip, r2
   2b1a4:	cmp	ip, r3
   2b1a8:	movcs	r0, #15
   2b1ac:	bcs	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b1b0:	add	r2, r3, #4
   2b1b4:	cmp	lr, r2
   2b1b8:	movcc	r0, #15
   2b1bc:	bcc	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b1c0:	tst	r3, #3
   2b1c4:	movne	r0, #15
   2b1c8:	bne	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b1cc:	str	r3, [sp, #16]
   2b1d0:	ldr	r2, [r4, r3]
   2b1d4:	subs	r2, r3, r2
   2b1d8:	movmi	r0, #29
   2b1dc:	bmi	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b1e0:	tst	r2, #1
   2b1e4:	movne	r0, #29
   2b1e8:	bne	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b1ec:	add	ip, r2, #2
   2b1f0:	cmp	lr, ip
   2b1f4:	movcc	r0, #27
   2b1f8:	bcc	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b1fc:	add	r5, r4, r2
   2b200:	ldrh	r0, [r4, r2]
   2b204:	strh	r0, [sp, #22]
   2b208:	add	r2, r0, r2
   2b20c:	cmp	lr, r2
   2b210:	movcc	r0, #30
   2b214:	bcc	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b218:	tst	r0, #1
   2b21c:	movne	r0, #30
   2b220:	bne	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b224:	cmp	r0, #3
   2b228:	movls	r0, #28
   2b22c:	bls	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b230:	ldrh	r2, [r4, ip]
   2b234:	strh	r2, [sp, #20]
   2b238:	sub	r3, lr, r3
   2b23c:	cmp	r3, r2
   2b240:	movcc	r0, #20
   2b244:	bcc	2b25c <flatcc_verify_union_table@@Base+0xf0>
   2b248:	str	r5, [sp, #12]
   2b24c:	str	r4, [sp]
   2b250:	str	lr, [sp, #4]
   2b254:	mov	r0, sp
   2b258:	blx	r1
   2b25c:	add	sp, sp, #28
   2b260:	ldrd	r4, [sp]
   2b264:	add	sp, sp, #8
   2b268:	pop	{pc}		; (ldr pc, [sp], #4)

0002b26c <flatcc_verify_union_struct@@Base>:
   2b26c:	ldr	ip, [r0, #4]
   2b270:	ldr	r3, [r0, #16]
   2b274:	ldr	r0, [r0, #20]
   2b278:	cmp	r0, #0
   2b27c:	beq	2b2b4 <flatcc_verify_union_struct@@Base+0x48>
   2b280:	add	r3, r3, r0
   2b284:	cmp	ip, r3
   2b288:	bcc	2b2bc <flatcc_verify_union_struct@@Base+0x50>
   2b28c:	adds	r1, r1, r3
   2b290:	bcs	2b2c4 <flatcc_verify_union_struct@@Base+0x58>
   2b294:	cmp	ip, r1
   2b298:	bcc	2b2cc <flatcc_verify_union_struct@@Base+0x60>
   2b29c:	sub	r2, r2, #1
   2b2a0:	and	r3, r3, r2
   2b2a4:	cmp	r3, #0
   2b2a8:	moveq	r0, #0
   2b2ac:	movne	r0, #11
   2b2b0:	bx	lr
   2b2b4:	mov	r0, #18
   2b2b8:	bx	lr
   2b2bc:	mov	r0, #18
   2b2c0:	bx	lr
   2b2c4:	mov	r0, #10
   2b2c8:	bx	lr
   2b2cc:	mov	r0, #9
   2b2d0:	bx	lr

0002b2d4 <flatcc_verify_union_string@@Base>:
   2b2d4:	ldr	r2, [r0, #16]
   2b2d8:	ldr	r3, [r0, #20]
   2b2dc:	add	r3, r2, r3
   2b2e0:	cmp	r2, r3
   2b2e4:	bcs	2b330 <flatcc_verify_union_string@@Base+0x5c>
   2b2e8:	ldr	r2, [r0, #4]
   2b2ec:	add	r1, r3, #4
   2b2f0:	cmp	r2, r1
   2b2f4:	bcc	2b338 <flatcc_verify_union_string@@Base+0x64>
   2b2f8:	tst	r3, #3
   2b2fc:	bne	2b340 <flatcc_verify_union_string@@Base+0x6c>
   2b300:	ldr	r0, [r0]
   2b304:	ldr	r3, [r0, r3]
   2b308:	sub	r2, r2, r1
   2b30c:	add	ip, r3, #1
   2b310:	cmp	r2, ip
   2b314:	bcc	2b348 <flatcc_verify_union_string@@Base+0x74>
   2b318:	add	r1, r0, r1
   2b31c:	ldrb	r3, [r1, r3]
   2b320:	cmp	r3, #0
   2b324:	moveq	r0, #0
   2b328:	movne	r0, #7
   2b32c:	bx	lr
   2b330:	mov	r0, #17
   2b334:	bx	lr
   2b338:	mov	r0, #17
   2b33c:	bx	lr
   2b340:	mov	r0, #17
   2b344:	bx	lr
   2b348:	mov	r0, #8
   2b34c:	bx	lr

0002b350 <flatcc_verify_buffer_header@@Base>:
   2b350:	tst	r0, #3
   2b354:	bne	2b3c4 <flatcc_verify_buffer_header@@Base+0x74>
   2b358:	cmn	r1, #9
   2b35c:	bhi	2b3cc <flatcc_verify_buffer_header@@Base+0x7c>
   2b360:	cmp	r1, #7
   2b364:	bls	2b3d4 <flatcc_verify_buffer_header@@Base+0x84>
   2b368:	cmp	r2, #0
   2b36c:	beq	2b3dc <flatcc_verify_buffer_header@@Base+0x8c>
   2b370:	str	r4, [sp, #-8]!
   2b374:	str	lr, [sp, #4]
   2b378:	sub	sp, sp, #8
   2b37c:	mov	r1, r2
   2b380:	mov	r4, r0
   2b384:	mov	r2, #4
   2b388:	add	r0, sp, r2
   2b38c:	bl	145a8 <strncpy@plt>
   2b390:	ldr	r3, [sp, #4]
   2b394:	ldr	r2, [r4, #4]
   2b398:	cmp	r3, #0
   2b39c:	cmpne	r2, r3
   2b3a0:	moveq	r3, #1
   2b3a4:	movne	r3, #0
   2b3a8:	cmp	r3, #0
   2b3ac:	movne	r0, #0
   2b3b0:	moveq	r0, #2
   2b3b4:	add	sp, sp, #8
   2b3b8:	ldr	r4, [sp]
   2b3bc:	add	sp, sp, #4
   2b3c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b3c4:	mov	r0, #5
   2b3c8:	bx	lr
   2b3cc:	mov	r0, #6
   2b3d0:	bx	lr
   2b3d4:	mov	r0, #1
   2b3d8:	bx	lr
   2b3dc:	mov	r0, #0
   2b3e0:	bx	lr

0002b3e4 <flatcc_verify_typed_buffer_header@@Base>:
   2b3e4:	tst	r0, #3
   2b3e8:	bne	2b418 <flatcc_verify_typed_buffer_header@@Base+0x34>
   2b3ec:	cmn	r1, #9
   2b3f0:	bhi	2b420 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   2b3f4:	cmp	r1, #7
   2b3f8:	bls	2b428 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2b3fc:	cmp	r2, #0
   2b400:	beq	2b430 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2b404:	ldr	r0, [r0, #4]
   2b408:	cmp	r2, r0
   2b40c:	movne	r0, #2
   2b410:	moveq	r0, #0
   2b414:	bx	lr
   2b418:	mov	r0, #5
   2b41c:	bx	lr
   2b420:	mov	r0, #6
   2b424:	bx	lr
   2b428:	mov	r0, #1
   2b42c:	bx	lr
   2b430:	mov	r0, #0
   2b434:	bx	lr

0002b438 <flatcc_verify_struct_as_root@@Base>:
   2b438:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b43c:	strd	r6, [sp, #8]
   2b440:	str	r8, [sp, #16]
   2b444:	str	lr, [sp, #20]
   2b448:	mov	r6, r0
   2b44c:	mov	r5, r1
   2b450:	mov	r7, r2
   2b454:	mov	r4, r3
   2b458:	bl	2b350 <flatcc_verify_buffer_header@@Base>
   2b45c:	cmp	r0, #0
   2b460:	bne	2b4c4 <flatcc_verify_struct_as_root@@Base+0x8c>
   2b464:	ldr	r2, [r6]
   2b468:	clz	r3, r2
   2b46c:	lsr	r3, r3, #5
   2b470:	cmp	r5, r2
   2b474:	orrcc	r3, r3, #1
   2b478:	cmp	r3, #0
   2b47c:	movne	r0, #18
   2b480:	bne	2b4b0 <flatcc_verify_struct_as_root@@Base+0x78>
   2b484:	adds	r4, r4, r2
   2b488:	movcs	r0, #10
   2b48c:	bcs	2b4b0 <flatcc_verify_struct_as_root@@Base+0x78>
   2b490:	cmp	r5, r4
   2b494:	movcc	r0, #9
   2b498:	bcc	2b4b0 <flatcc_verify_struct_as_root@@Base+0x78>
   2b49c:	ldrh	r3, [sp, #24]
   2b4a0:	sub	r3, r3, #1
   2b4a4:	and	r2, r2, r3
   2b4a8:	cmp	r2, #0
   2b4ac:	movne	r0, #11
   2b4b0:	ldrd	r4, [sp]
   2b4b4:	ldrd	r6, [sp, #8]
   2b4b8:	ldr	r8, [sp, #16]
   2b4bc:	add	sp, sp, #20
   2b4c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b4c4:	mov	r2, r7
   2b4c8:	mov	r1, r5
   2b4cc:	mov	r0, r6
   2b4d0:	bl	2b350 <flatcc_verify_buffer_header@@Base>
   2b4d4:	b	2b4b0 <flatcc_verify_struct_as_root@@Base+0x78>

0002b4d8 <flatcc_verify_struct_as_typed_root@@Base>:
   2b4d8:	strd	r4, [sp, #-16]!
   2b4dc:	str	r6, [sp, #8]
   2b4e0:	str	lr, [sp, #12]
   2b4e4:	mov	r6, r0
   2b4e8:	mov	r5, r1
   2b4ec:	mov	r4, r3
   2b4f0:	bl	2b3e4 <flatcc_verify_typed_buffer_header@@Base>
   2b4f4:	cmp	r0, #0
   2b4f8:	bne	2b548 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2b4fc:	ldr	r2, [r6]
   2b500:	clz	r3, r2
   2b504:	lsr	r3, r3, #5
   2b508:	cmp	r5, r2
   2b50c:	orrcc	r3, r3, #1
   2b510:	cmp	r3, #0
   2b514:	movne	r0, #18
   2b518:	bne	2b548 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2b51c:	adds	r4, r4, r2
   2b520:	movcs	r0, #10
   2b524:	bcs	2b548 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2b528:	cmp	r5, r4
   2b52c:	movcc	r0, #9
   2b530:	bcc	2b548 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2b534:	ldrh	r3, [sp, #16]
   2b538:	sub	r3, r3, #1
   2b53c:	and	r2, r2, r3
   2b540:	cmp	r2, #0
   2b544:	movne	r0, #11
   2b548:	ldrd	r4, [sp]
   2b54c:	ldr	r6, [sp, #8]
   2b550:	add	sp, sp, #12
   2b554:	pop	{pc}		; (ldr pc, [sp], #4)

0002b558 <flatcc_verify_table_as_root@@Base>:
   2b558:	strd	r4, [sp, #-20]!	; 0xffffffec
   2b55c:	strd	r6, [sp, #8]
   2b560:	str	lr, [sp, #16]
   2b564:	sub	sp, sp, #28
   2b568:	mov	r4, r0
   2b56c:	mov	r5, r1
   2b570:	mov	r6, r2
   2b574:	mov	r7, r3
   2b578:	bl	2b350 <flatcc_verify_buffer_header@@Base>
   2b57c:	cmp	r0, #0
   2b580:	bne	2b64c <flatcc_verify_table_as_root@@Base+0xf4>
   2b584:	ldr	r3, [r4]
   2b588:	mov	r2, #99	; 0x63
   2b58c:	str	r2, [sp, #8]
   2b590:	cmp	r3, #0
   2b594:	moveq	r0, #15
   2b598:	beq	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b59c:	add	r2, r3, #4
   2b5a0:	cmp	r5, r2
   2b5a4:	movcc	r0, #15
   2b5a8:	bcc	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b5ac:	tst	r3, #3
   2b5b0:	movne	r0, #15
   2b5b4:	bne	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b5b8:	str	r3, [sp, #16]
   2b5bc:	ldr	r2, [r4, r3]
   2b5c0:	subs	r2, r3, r2
   2b5c4:	movmi	r0, #29
   2b5c8:	bmi	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b5cc:	tst	r2, #1
   2b5d0:	movne	r0, #29
   2b5d4:	bne	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b5d8:	add	r0, r2, #2
   2b5dc:	cmp	r5, r0
   2b5e0:	movcc	r0, #27
   2b5e4:	bcc	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b5e8:	add	ip, r4, r2
   2b5ec:	ldrh	r1, [r4, r2]
   2b5f0:	strh	r1, [sp, #22]
   2b5f4:	add	r2, r1, r2
   2b5f8:	cmp	r5, r2
   2b5fc:	movcc	r0, #30
   2b600:	bcc	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b604:	tst	r1, #1
   2b608:	movne	r0, #30
   2b60c:	bne	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b610:	cmp	r1, #3
   2b614:	movls	r0, #28
   2b618:	bls	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b61c:	ldrh	r2, [r4, r0]
   2b620:	strh	r2, [sp, #20]
   2b624:	sub	r3, r5, r3
   2b628:	cmp	r3, r2
   2b62c:	movcc	r0, #20
   2b630:	bcc	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b634:	str	ip, [sp, #12]
   2b638:	str	r4, [sp]
   2b63c:	str	r5, [sp, #4]
   2b640:	mov	r0, sp
   2b644:	blx	r7
   2b648:	b	2b65c <flatcc_verify_table_as_root@@Base+0x104>
   2b64c:	mov	r2, r6
   2b650:	mov	r1, r5
   2b654:	mov	r0, r4
   2b658:	bl	2b350 <flatcc_verify_buffer_header@@Base>
   2b65c:	add	sp, sp, #28
   2b660:	ldrd	r4, [sp]
   2b664:	ldrd	r6, [sp, #8]
   2b668:	add	sp, sp, #16
   2b66c:	pop	{pc}		; (ldr pc, [sp], #4)

0002b670 <flatcc_verify_table_as_typed_root@@Base>:
   2b670:	strd	r4, [sp, #-16]!
   2b674:	str	r6, [sp, #8]
   2b678:	str	lr, [sp, #12]
   2b67c:	sub	sp, sp, #24
   2b680:	mov	r4, r0
   2b684:	mov	r5, r1
   2b688:	mov	r6, r3
   2b68c:	bl	2b3e4 <flatcc_verify_typed_buffer_header@@Base>
   2b690:	cmp	r0, #0
   2b694:	beq	2b6ac <flatcc_verify_table_as_typed_root@@Base+0x3c>
   2b698:	add	sp, sp, #24
   2b69c:	ldrd	r4, [sp]
   2b6a0:	ldr	r6, [sp, #8]
   2b6a4:	add	sp, sp, #12
   2b6a8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b6ac:	ldr	r3, [r4]
   2b6b0:	mov	r2, #99	; 0x63
   2b6b4:	str	r2, [sp, #8]
   2b6b8:	cmp	r3, #0
   2b6bc:	moveq	r0, #15
   2b6c0:	beq	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b6c4:	add	r2, r3, #4
   2b6c8:	cmp	r5, r2
   2b6cc:	movcc	r0, #15
   2b6d0:	bcc	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b6d4:	tst	r3, #3
   2b6d8:	movne	r0, #15
   2b6dc:	bne	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b6e0:	str	r3, [sp, #16]
   2b6e4:	ldr	r2, [r4, r3]
   2b6e8:	subs	r2, r3, r2
   2b6ec:	movmi	r0, #29
   2b6f0:	bmi	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b6f4:	tst	r2, #1
   2b6f8:	movne	r0, #29
   2b6fc:	bne	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b700:	add	r0, r2, #2
   2b704:	cmp	r5, r0
   2b708:	movcc	r0, #27
   2b70c:	bcc	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b710:	add	ip, r4, r2
   2b714:	ldrh	r1, [r4, r2]
   2b718:	strh	r1, [sp, #22]
   2b71c:	add	r2, r1, r2
   2b720:	cmp	r5, r2
   2b724:	movcc	r0, #30
   2b728:	bcc	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b72c:	tst	r1, #1
   2b730:	movne	r0, #30
   2b734:	bne	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b738:	cmp	r1, #3
   2b73c:	movls	r0, #28
   2b740:	bls	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b744:	ldrh	r2, [r4, r0]
   2b748:	strh	r2, [sp, #20]
   2b74c:	sub	r3, r5, r3
   2b750:	cmp	r3, r2
   2b754:	movcc	r0, #20
   2b758:	bcc	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2b75c:	str	ip, [sp, #12]
   2b760:	str	r4, [sp]
   2b764:	str	r5, [sp, #4]
   2b768:	mov	r0, sp
   2b76c:	blx	r6
   2b770:	b	2b698 <flatcc_verify_table_as_typed_root@@Base+0x28>

0002b774 <flatcc_verify_struct_as_nested_root@@Base>:
   2b774:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b778:	strd	r6, [sp, #8]
   2b77c:	str	r8, [sp, #16]
   2b780:	str	lr, [sp, #20]
   2b784:	sub	sp, sp, #8
   2b788:	mov	r5, r0
   2b78c:	mov	r4, r1
   2b790:	mov	r8, r2
   2b794:	mov	r7, r3
   2b798:	ldrh	r6, [sp, #36]	; 0x24
   2b79c:	mvn	r3, #0
   2b7a0:	str	r3, [sp, #4]
   2b7a4:	mov	r3, #1
   2b7a8:	str	r3, [sp]
   2b7ac:	mov	r3, r6
   2b7b0:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   2b7b4:	cmp	r0, #0
   2b7b8:	bne	2b830 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   2b7bc:	add	r1, r4, #2
   2b7c0:	lsl	r1, r1, #1
   2b7c4:	uxth	r1, r1
   2b7c8:	ldrh	r3, [r5, #22]
   2b7cc:	cmp	r3, r1
   2b7d0:	bls	2b818 <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2b7d4:	ldr	r3, [r5, #12]
   2b7d8:	ldrh	r3, [r3, r1]
   2b7dc:	cmp	r3, #0
   2b7e0:	beq	2b818 <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2b7e4:	ldr	r2, [r5, #16]
   2b7e8:	add	r3, r3, r2
   2b7ec:	ldr	r2, [r5]
   2b7f0:	adds	r1, r2, r3
   2b7f4:	beq	2b818 <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2b7f8:	ldr	r3, [r2, r3]
   2b7fc:	add	r0, r1, r3
   2b800:	ldr	r1, [r1, r3]
   2b804:	str	r6, [sp]
   2b808:	ldr	r3, [sp, #32]
   2b80c:	mov	r2, r7
   2b810:	add	r0, r0, #4
   2b814:	bl	2b438 <flatcc_verify_struct_as_root@@Base>
   2b818:	add	sp, sp, #8
   2b81c:	ldrd	r4, [sp]
   2b820:	ldrd	r6, [sp, #8]
   2b824:	ldr	r8, [sp, #16]
   2b828:	add	sp, sp, #20
   2b82c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b830:	mvn	r3, #0
   2b834:	str	r3, [sp, #4]
   2b838:	mov	r3, #1
   2b83c:	str	r3, [sp]
   2b840:	mov	r3, r6
   2b844:	mov	r2, r8
   2b848:	mov	r1, r4
   2b84c:	mov	r0, r5
   2b850:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   2b854:	b	2b818 <flatcc_verify_struct_as_nested_root@@Base+0xa4>

0002b858 <flatcc_verify_table_as_nested_root@@Base>:
   2b858:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b85c:	strd	r6, [sp, #8]
   2b860:	str	r8, [sp, #16]
   2b864:	str	lr, [sp, #20]
   2b868:	sub	sp, sp, #32
   2b86c:	mov	r5, r0
   2b870:	mov	r4, r1
   2b874:	mov	r8, r2
   2b878:	mov	r6, r3
   2b87c:	ldrh	r7, [sp, #56]	; 0x38
   2b880:	mvn	r3, #0
   2b884:	str	r3, [sp, #4]
   2b888:	mov	r3, #1
   2b88c:	str	r3, [sp]
   2b890:	mov	r3, r7
   2b894:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   2b898:	cmp	r0, #0
   2b89c:	bne	2b9e0 <flatcc_verify_table_as_nested_root@@Base+0x188>
   2b8a0:	add	r1, r4, #2
   2b8a4:	lsl	r1, r1, #1
   2b8a8:	uxth	r1, r1
   2b8ac:	ldrh	r3, [r5, #22]
   2b8b0:	cmp	r3, r1
   2b8b4:	bls	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b8b8:	ldr	r3, [r5, #12]
   2b8bc:	ldrh	r3, [r3, r1]
   2b8c0:	cmp	r3, #0
   2b8c4:	beq	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b8c8:	ldr	r2, [r5, #16]
   2b8cc:	add	r3, r3, r2
   2b8d0:	ldr	r2, [r5]
   2b8d4:	adds	r1, r2, r3
   2b8d8:	beq	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b8dc:	ldr	r3, [r2, r3]
   2b8e0:	add	r7, r1, r3
   2b8e4:	ldr	r4, [r1, r3]
   2b8e8:	add	r8, r7, #4
   2b8ec:	mov	r2, r6
   2b8f0:	mov	r1, r4
   2b8f4:	mov	r0, r8
   2b8f8:	bl	2b350 <flatcc_verify_buffer_header@@Base>
   2b8fc:	cmp	r0, #0
   2b900:	bne	2ba1c <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   2b904:	ldr	r2, [r7, #4]
   2b908:	ldr	r3, [r5, #8]
   2b90c:	sub	r3, r3, #1
   2b910:	str	r3, [sp, #16]
   2b914:	cmp	r3, #0
   2b918:	moveq	r0, #3
   2b91c:	beq	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b920:	cmp	r2, #0
   2b924:	moveq	r0, #15
   2b928:	beq	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b92c:	add	r3, r2, #4
   2b930:	cmp	r4, r3
   2b934:	movcc	r0, #15
   2b938:	bcc	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b93c:	tst	r2, #3
   2b940:	movne	r0, #15
   2b944:	bne	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b948:	str	r2, [sp, #24]
   2b94c:	ldr	r3, [r8, r2]
   2b950:	subs	r3, r2, r3
   2b954:	movmi	r0, #29
   2b958:	bmi	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b95c:	tst	r3, #1
   2b960:	movne	r0, #29
   2b964:	bne	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b968:	add	r0, r3, #2
   2b96c:	cmp	r4, r0
   2b970:	movcc	r0, #27
   2b974:	bcc	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b978:	add	ip, r8, r3
   2b97c:	ldrh	r1, [r8, r3]
   2b980:	strh	r1, [sp, #30]
   2b984:	add	r3, r1, r3
   2b988:	cmp	r4, r3
   2b98c:	movcc	r0, #30
   2b990:	bcc	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b994:	tst	r1, #1
   2b998:	movne	r0, #30
   2b99c:	bne	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b9a0:	cmp	r1, #3
   2b9a4:	movls	r0, #28
   2b9a8:	bls	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b9ac:	ldrh	r3, [r8, r0]
   2b9b0:	strh	r3, [sp, #28]
   2b9b4:	sub	r2, r4, r2
   2b9b8:	cmp	r2, r3
   2b9bc:	movcc	r0, #20
   2b9c0:	bcc	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b9c4:	str	ip, [sp, #20]
   2b9c8:	str	r8, [sp, #8]
   2b9cc:	str	r4, [sp, #12]
   2b9d0:	add	r0, sp, #8
   2b9d4:	ldr	r3, [sp, #60]	; 0x3c
   2b9d8:	blx	r3
   2b9dc:	b	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2b9e0:	mvn	r3, #0
   2b9e4:	str	r3, [sp, #4]
   2b9e8:	mov	r3, #1
   2b9ec:	str	r3, [sp]
   2b9f0:	mov	r3, r7
   2b9f4:	mov	r2, r8
   2b9f8:	mov	r1, r4
   2b9fc:	mov	r0, r5
   2ba00:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   2ba04:	add	sp, sp, #32
   2ba08:	ldrd	r4, [sp]
   2ba0c:	ldrd	r6, [sp, #8]
   2ba10:	ldr	r8, [sp, #16]
   2ba14:	add	sp, sp, #20
   2ba18:	pop	{pc}		; (ldr pc, [sp], #4)
   2ba1c:	mov	r2, r6
   2ba20:	mov	r1, r4
   2ba24:	mov	r0, r8
   2ba28:	bl	2b350 <flatcc_verify_buffer_header@@Base>
   2ba2c:	b	2ba04 <flatcc_verify_table_as_nested_root@@Base+0x1ac>

0002ba30 <flatcc_verify_union_field@@Base>:
   2ba30:	strd	r4, [sp, #-20]!	; 0xffffffec
   2ba34:	strd	r6, [sp, #8]
   2ba38:	str	lr, [sp, #16]
   2ba3c:	sub	sp, sp, #36	; 0x24
   2ba40:	add	ip, r1, #1
   2ba44:	lsl	ip, ip, #1
   2ba48:	uxth	ip, ip
   2ba4c:	ldrh	lr, [r0, #22]
   2ba50:	cmp	lr, ip
   2ba54:	bls	2bb24 <flatcc_verify_union_field@@Base+0xf4>
   2ba58:	ldr	r6, [r0, #12]
   2ba5c:	ldrh	r4, [r6, ip]
   2ba60:	cmp	r4, #0
   2ba64:	beq	2bb24 <flatcc_verify_union_field@@Base+0xf4>
   2ba68:	add	r5, r4, #1
   2ba6c:	ldrh	r7, [r0, #20]
   2ba70:	cmp	r5, r7
   2ba74:	bhi	2bb68 <flatcc_verify_union_field@@Base+0x138>
   2ba78:	ldr	r7, [r0]
   2ba7c:	add	ip, ip, #2
   2ba80:	uxth	ip, ip
   2ba84:	cmp	lr, ip
   2ba88:	bls	2bb70 <flatcc_verify_union_field@@Base+0x140>
   2ba8c:	ldr	lr, [r0, #16]
   2ba90:	add	r4, r4, lr
   2ba94:	add	r5, r7, r4
   2ba98:	ldrb	lr, [r7, r4]
   2ba9c:	ldrh	r4, [r6, ip]
   2baa0:	adds	ip, lr, #0
   2baa4:	movne	ip, #1
   2baa8:	cmp	r4, #0
   2baac:	moveq	ip, #1
   2bab0:	cmp	ip, #0
   2bab4:	moveq	r0, #24
   2bab8:	beq	2bb54 <flatcc_verify_union_field@@Base+0x124>
   2babc:	cmp	lr, #0
   2bac0:	moveq	r0, #0
   2bac4:	beq	2bb54 <flatcc_verify_union_field@@Base+0x124>
   2bac8:	mov	r6, r3
   2bacc:	mov	r4, r0
   2bad0:	add	r3, sp, #28
   2bad4:	bl	2a724 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2bad8:	cmp	r0, #0
   2badc:	bne	2bb54 <flatcc_verify_union_field@@Base+0x124>
   2bae0:	ldr	r3, [sp, #28]
   2bae4:	cmp	r3, #0
   2bae8:	beq	2bb54 <flatcc_verify_union_field@@Base+0x124>
   2baec:	ldr	r2, [r4]
   2baf0:	str	r2, [sp, #4]
   2baf4:	ldr	r1, [r4, #4]
   2baf8:	str	r1, [sp, #8]
   2bafc:	ldr	r1, [r4, #8]
   2bb00:	str	r1, [sp, #12]
   2bb04:	str	r3, [sp, #20]
   2bb08:	ldr	r3, [r2, r3]
   2bb0c:	str	r3, [sp, #24]
   2bb10:	ldrb	r3, [r5]
   2bb14:	strb	r3, [sp, #16]
   2bb18:	add	r0, sp, #4
   2bb1c:	blx	r6
   2bb20:	b	2bb54 <flatcc_verify_union_field@@Base+0x124>
   2bb24:	add	ip, ip, #2
   2bb28:	uxth	ip, ip
   2bb2c:	cmp	lr, ip
   2bb30:	bls	2bb48 <flatcc_verify_union_field@@Base+0x118>
   2bb34:	ldr	r3, [r0, #12]
   2bb38:	ldrh	r3, [r3, ip]
   2bb3c:	cmp	r3, #0
   2bb40:	movne	r0, #23
   2bb44:	bne	2bb54 <flatcc_verify_union_field@@Base+0x124>
   2bb48:	cmp	r2, #0
   2bb4c:	moveq	r0, r2
   2bb50:	movne	r0, #21
   2bb54:	add	sp, sp, #36	; 0x24
   2bb58:	ldrd	r4, [sp]
   2bb5c:	ldrd	r6, [sp, #8]
   2bb60:	add	sp, sp, #16
   2bb64:	pop	{pc}		; (ldr pc, [sp], #4)
   2bb68:	mov	r0, #13
   2bb6c:	b	2bb54 <flatcc_verify_union_field@@Base+0x124>
   2bb70:	ldr	ip, [r0, #16]
   2bb74:	add	r4, r4, ip
   2bb78:	add	r5, r7, r4
   2bb7c:	ldrb	lr, [r7, r4]
   2bb80:	b	2babc <flatcc_verify_union_field@@Base+0x8c>

0002bb84 <flatcc_verify_union_vector_field@@Base>:
   2bb84:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2bb88:	strd	r6, [sp, #8]
   2bb8c:	strd	r8, [sp, #16]
   2bb90:	str	sl, [sp, #24]
   2bb94:	str	lr, [sp, #28]
   2bb98:	sub	sp, sp, #40	; 0x28
   2bb9c:	sub	r7, r1, #1
   2bba0:	uxth	r7, r7
   2bba4:	add	r5, r1, #1
   2bba8:	lsl	r5, r5, #1
   2bbac:	uxth	r5, r5
   2bbb0:	ldrh	lr, [r0, #22]
   2bbb4:	cmp	lr, r5
   2bbb8:	bls	2bbcc <flatcc_verify_union_vector_field@@Base+0x48>
   2bbbc:	ldr	ip, [r0, #12]
   2bbc0:	ldrh	ip, [ip, r5]
   2bbc4:	cmp	ip, #0
   2bbc8:	bne	2bc00 <flatcc_verify_union_vector_field@@Base+0x7c>
   2bbcc:	add	ip, r5, #2
   2bbd0:	uxth	ip, ip
   2bbd4:	cmp	lr, ip
   2bbd8:	ldrhi	lr, [r0, #12]
   2bbdc:	ldrhhi	ip, [lr, ip]
   2bbe0:	movls	ip, #0
   2bbe4:	uxth	lr, ip
   2bbe8:	adds	ip, r2, #0
   2bbec:	movne	ip, #1
   2bbf0:	cmp	lr, #0
   2bbf4:	movne	ip, #0
   2bbf8:	cmp	ip, #0
   2bbfc:	bne	2be08 <flatcc_verify_union_vector_field@@Base+0x284>
   2bc00:	mov	r9, r3
   2bc04:	mov	r8, r2
   2bc08:	mov	r6, r1
   2bc0c:	mov	r4, r0
   2bc10:	mvn	r3, #0
   2bc14:	str	r3, [sp, #4]
   2bc18:	mov	r3, #1
   2bc1c:	str	r3, [sp]
   2bc20:	mov	r1, r7
   2bc24:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   2bc28:	subs	sl, r0, #0
   2bc2c:	bne	2bd28 <flatcc_verify_union_vector_field@@Base+0x1a4>
   2bc30:	ldrh	r3, [r4, #22]
   2bc34:	cmp	r3, r5
   2bc38:	bls	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bc3c:	ldr	r3, [r4, #12]
   2bc40:	ldrh	r3, [r3, r5]
   2bc44:	cmp	r3, #0
   2bc48:	beq	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bc4c:	ldr	r2, [r4, #16]
   2bc50:	add	r3, r3, r2
   2bc54:	ldr	r2, [r4]
   2bc58:	adds	r1, r2, r3
   2bc5c:	beq	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bc60:	ldr	r3, [r2, r3]
   2bc64:	add	r5, r1, r3
   2bc68:	ldr	r7, [r1, r3]
   2bc6c:	add	r3, sp, #36	; 0x24
   2bc70:	mov	r2, r8
   2bc74:	mov	r1, r6
   2bc78:	mov	r0, r4
   2bc7c:	bl	2a724 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2bc80:	subs	sl, r0, #0
   2bc84:	bne	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bc88:	ldr	r3, [sp, #36]	; 0x24
   2bc8c:	cmp	r3, #0
   2bc90:	beq	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bc94:	ldr	r1, [r4]
   2bc98:	ldr	r2, [r1, r3]
   2bc9c:	ldr	r0, [r4, #8]
   2bca0:	cmp	r0, #0
   2bca4:	movle	sl, #3
   2bca8:	ble	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bcac:	add	r2, r3, r2
   2bcb0:	cmp	r3, r2
   2bcb4:	movcs	sl, #16
   2bcb8:	bcs	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bcbc:	ldr	ip, [r4, #4]
   2bcc0:	add	r3, r2, #4
   2bcc4:	cmp	ip, r3
   2bcc8:	movcc	sl, #16
   2bccc:	bcc	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bcd0:	tst	r3, #3
   2bcd4:	bne	2be10 <flatcc_verify_union_vector_field@@Base+0x28c>
   2bcd8:	add	r6, r1, r2
   2bcdc:	ldr	lr, [r1, r2]
   2bce0:	cmn	lr, #-1073741823	; 0xc0000001
   2bce4:	bhi	2be10 <flatcc_verify_union_vector_field@@Base+0x28c>
   2bce8:	sub	r4, ip, r3
   2bcec:	cmp	r4, lr, lsl #2
   2bcf0:	bcc	2be10 <flatcc_verify_union_vector_field@@Base+0x28c>
   2bcf4:	cmp	r7, lr
   2bcf8:	bne	2bdf8 <flatcc_verify_union_vector_field@@Base+0x274>
   2bcfc:	str	r1, [sp, #12]
   2bd00:	str	ip, [sp, #16]
   2bd04:	sub	r0, r0, #1
   2bd08:	str	r0, [sp, #20]
   2bd0c:	cmp	lr, #0
   2bd10:	beq	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bd14:	add	r4, r5, #4
   2bd18:	add	lr, lr, #4
   2bd1c:	add	r5, lr, r5
   2bd20:	rsb	r7, r1, #4
   2bd24:	b	2bdc4 <flatcc_verify_union_vector_field@@Base+0x240>
   2bd28:	mvn	r3, #0
   2bd2c:	str	r3, [sp, #4]
   2bd30:	mov	r3, #1
   2bd34:	str	r3, [sp]
   2bd38:	mov	r2, r8
   2bd3c:	mov	r1, r7
   2bd40:	mov	r0, r4
   2bd44:	bl	2ab1c <flatcc_verify_vector_field@@Base>
   2bd48:	mov	sl, r0
   2bd4c:	mov	r0, sl
   2bd50:	add	sp, sp, #40	; 0x28
   2bd54:	ldrd	r4, [sp]
   2bd58:	ldrd	r6, [sp, #8]
   2bd5c:	ldrd	r8, [sp, #16]
   2bd60:	ldr	sl, [sp, #24]
   2bd64:	add	sp, sp, #28
   2bd68:	pop	{pc}		; (ldr pc, [sp], #4)
   2bd6c:	ldr	r2, [r1, r2]
   2bd70:	cmn	r2, #-1073741823	; 0xc0000001
   2bd74:	movhi	sl, #25
   2bd78:	bhi	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bd7c:	sub	r3, ip, r3
   2bd80:	lsl	r2, r2, #2
   2bd84:	cmp	r3, r2
   2bd88:	movcc	sl, #26
   2bd8c:	b	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bd90:	ldrb	r1, [r4]
   2bd94:	cmp	r1, #0
   2bd98:	beq	2be00 <flatcc_verify_union_vector_field@@Base+0x27c>
   2bd9c:	strb	r1, [sp, #24]
   2bda0:	str	r2, [sp, #28]
   2bda4:	str	r3, [sp, #32]
   2bda8:	add	r0, sp, #12
   2bdac:	blx	r9
   2bdb0:	cmp	r0, #0
   2bdb4:	bne	2bde8 <flatcc_verify_union_vector_field@@Base+0x264>
   2bdb8:	add	r4, r4, #1
   2bdbc:	cmp	r5, r4
   2bdc0:	beq	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bdc4:	add	r2, r7, r6
   2bdc8:	ldr	r3, [r6, #4]!
   2bdcc:	cmp	r3, #0
   2bdd0:	bne	2bd90 <flatcc_verify_union_vector_field@@Base+0x20c>
   2bdd4:	ldrb	r3, [r4]
   2bdd8:	cmp	r3, #0
   2bddc:	beq	2bdb8 <flatcc_verify_union_vector_field@@Base+0x234>
   2bde0:	mov	sl, #32
   2bde4:	b	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bde8:	add	r0, sp, #12
   2bdec:	blx	r9
   2bdf0:	mov	sl, r0
   2bdf4:	b	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2bdf8:	mov	sl, #34	; 0x22
   2bdfc:	b	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2be00:	mov	sl, #33	; 0x21
   2be04:	b	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2be08:	mov	sl, #22
   2be0c:	b	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2be10:	tst	r3, #3
   2be14:	beq	2bd6c <flatcc_verify_union_vector_field@@Base+0x1e8>
   2be18:	mov	sl, #16
   2be1c:	b	2bd4c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2be20:	sub	sp, sp, #8
   2be24:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2be28:	strd	r6, [sp, #8]
   2be2c:	strd	r8, [sp, #16]
   2be30:	str	sl, [sp, #24]
   2be34:	str	lr, [sp, #28]
   2be38:	add	r1, sp, #28
   2be3c:	stmib	r1, {r2, r3}
   2be40:	ldrd	r2, [sp, #32]
   2be44:	ldr	lr, [sp, #40]	; 0x28
   2be48:	orrs	r1, r2, r3
   2be4c:	beq	2bf08 <flatcc_verify_union_vector_field@@Base+0x384>
   2be50:	mov	r8, #0
   2be54:	lsr	r9, r3, #22
   2be58:	lsl	r9, r9, #22
   2be5c:	orrs	r1, r8, r9
   2be60:	subeq	ip, lr, #10
   2be64:	moveq	r9, #0
   2be68:	moveq	r8, r9
   2be6c:	movteq	r8, #65472	; 0xffc0
   2be70:	bne	2bea0 <flatcc_verify_union_vector_field@@Base+0x31c>
   2be74:	lsl	r1, r3, #10
   2be78:	orr	r1, r1, r2, lsr #22
   2be7c:	lsl	lr, r2, #10
   2be80:	mov	r2, lr
   2be84:	mov	r3, r1
   2be88:	mov	lr, ip
   2be8c:	mov	r6, r9
   2be90:	and	r7, r1, r8
   2be94:	sub	ip, ip, #10
   2be98:	orrs	r1, r6, r7
   2be9c:	beq	2be74 <flatcc_verify_union_vector_field@@Base+0x2f0>
   2bea0:	cmp	r2, #0
   2bea4:	sbcs	r1, r3, #0
   2bea8:	blt	2bed4 <flatcc_verify_union_vector_field@@Base+0x350>
   2beac:	sub	r1, lr, #1
   2beb0:	adds	r4, r2, r2
   2beb4:	adc	r5, r3, r3
   2beb8:	mov	r2, r4
   2bebc:	mov	r3, r5
   2bec0:	mov	lr, r1
   2bec4:	sub	r1, r1, #1
   2bec8:	cmp	r4, #0
   2becc:	sbcs	ip, r5, #0
   2bed0:	bge	2beb0 <flatcc_verify_union_vector_field@@Base+0x32c>
   2bed4:	strd	r2, [sp, #32]
   2bed8:	str	lr, [sp, #40]	; 0x28
   2bedc:	strd	r2, [r0]
   2bee0:	ldrd	r2, [sp, #40]	; 0x28
   2bee4:	strd	r2, [r0, #8]
   2bee8:	ldrd	r4, [sp]
   2beec:	ldrd	r6, [sp, #8]
   2bef0:	ldrd	r8, [sp, #16]
   2bef4:	ldr	sl, [sp, #24]
   2bef8:	ldr	lr, [sp, #28]
   2befc:	add	sp, sp, #32
   2bf00:	add	sp, sp, #8
   2bf04:	bx	lr
   2bf08:	movw	r3, #14040	; 0x36d8
   2bf0c:	movt	r3, #4
   2bf10:	mov	r2, #260	; 0x104
   2bf14:	movw	r1, #16216	; 0x3f58
   2bf18:	movt	r1, #4
   2bf1c:	movw	r0, #16304	; 0x3fb0
   2bf20:	movt	r0, #4
   2bf24:	bl	145f0 <__assert_fail@plt>

0002bf28 <grisu3_diy_fp_encode_double@@Base>:
   2bf28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bf2c:	strd	r6, [sp, #8]
   2bf30:	strd	r8, [sp, #16]
   2bf34:	strd	sl, [sp, #24]
   2bf38:	str	lr, [sp, #32]
   2bf3c:	sub	sp, sp, #92	; 0x5c
   2bf40:	mov	r6, r3
   2bf44:	ldr	r7, [sp, #128]	; 0x80
   2bf48:	cmp	r7, #0
   2bf4c:	movne	r7, #4
   2bf50:	sub	r5, r2, r3
   2bf54:	strd	r0, [sp, #72]	; 0x48
   2bf58:	mov	r3, #0
   2bf5c:	str	r3, [sp, #80]	; 0x50
   2bf60:	add	r0, sp, #72	; 0x48
   2bf64:	ldrd	r2, [sp, #80]	; 0x50
   2bf68:	strd	r2, [sp]
   2bf6c:	ldm	r0, {r2, r3}
   2bf70:	bl	2be20 <flatcc_verify_union_vector_field@@Base+0x29c>
   2bf74:	ldr	r4, [sp, #72]	; 0x48
   2bf78:	ldr	r3, [sp, #76]	; 0x4c
   2bf7c:	ldr	r1, [sp, #80]	; 0x50
   2bf80:	rsb	ip, r1, #0
   2bf84:	lsl	ip, r7, ip
   2bf88:	cmn	r5, #348	; 0x15c
   2bf8c:	blt	2c18c <grisu3_diy_fp_encode_double@@Base+0x264>
   2bf90:	cmp	r5, #348	; 0x15c
   2bf94:	bge	2c1a8 <grisu3_diy_fp_encode_double@@Base+0x280>
   2bf98:	add	r0, r5, #348	; 0x15c
   2bf9c:	add	r2, r0, #7
   2bfa0:	cmp	r0, #0
   2bfa4:	movlt	r0, r2
   2bfa8:	asr	r0, r0, #3
   2bfac:	movw	r2, #14040	; 0x36d8
   2bfb0:	movt	r2, #4
   2bfb4:	add	r0, r2, r0, lsl #4
   2bfb8:	ldrsh	r2, [r0, #66]	; 0x42
   2bfbc:	ldr	r7, [r0, #56]	; 0x38
   2bfc0:	ldr	lr, [r0, #60]	; 0x3c
   2bfc4:	ldrsh	r0, [r0, #64]	; 0x40
   2bfc8:	str	r0, [sp, #44]	; 0x2c
   2bfcc:	cmp	r5, r2
   2bfd0:	blt	2c1c4 <grisu3_diy_fp_encode_double@@Base+0x29c>
   2bfd4:	add	r0, r2, #7
   2bfd8:	cmp	r5, r0
   2bfdc:	bgt	2c1e0 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   2bfe0:	cmp	r5, r2
   2bfe4:	beq	2c094 <grisu3_diy_fp_encode_double@@Base+0x16c>
   2bfe8:	sub	r2, r5, r2
   2bfec:	sub	r2, r2, #1
   2bff0:	cmp	r2, #6
   2bff4:	bhi	2c1fc <grisu3_diy_fp_encode_double@@Base+0x2d4>
   2bff8:	ldr	r0, [pc, #1052]	; 2c41c <grisu3_diy_fp_encode_double@@Base+0x4f4>
   2bffc:	add	sl, r0, r2, lsl #4
   2c000:	ldr	r0, [r0, r2, lsl #4]
   2c004:	ldr	r5, [sl, #4]
   2c008:	umull	r8, r9, r4, r5
   2c00c:	strd	r8, [sp, #16]
   2c010:	umull	r8, r9, r3, r0
   2c014:	strd	r8, [sp, #24]
   2c018:	umull	r4, r5, r4, r0
   2c01c:	mov	r8, r5
   2c020:	mov	r9, #0
   2c024:	ldr	r0, [sp, #24]
   2c028:	adds	r0, r8, r0
   2c02c:	adc	r4, r9, r9
   2c030:	adds	r0, r0, #-2147483648	; 0x80000000
   2c034:	adc	r4, r4, r9
   2c038:	ldr	r5, [sp, #16]
   2c03c:	adds	r0, r0, r5
   2c040:	adc	r8, r4, r9
   2c044:	mov	r4, r8
   2c048:	mov	fp, r9
   2c04c:	ldr	r0, [sp, #28]
   2c050:	ldr	r5, [sp, #20]
   2c054:	adds	r0, r0, r5
   2c058:	str	r0, [sp, #32]
   2c05c:	adc	r0, r9, r9
   2c060:	str	r0, [sp, #36]	; 0x24
   2c064:	ldrd	r8, [sp, #32]
   2c068:	ldr	r0, [sl, #4]
   2c06c:	umlal	r8, r9, r0, r3
   2c070:	adds	r4, r4, r8
   2c074:	adc	r3, fp, r9
   2c078:	ldr	r0, [sl, #8]
   2c07c:	add	r1, r1, r0
   2c080:	add	r1, r1, #64	; 0x40
   2c084:	add	r6, r6, #1
   2c088:	add	r2, r6, r2
   2c08c:	cmp	r2, #19
   2c090:	addgt	ip, ip, #4
   2c094:	mov	r2, #0
   2c098:	umull	sl, fp, r4, lr
   2c09c:	umull	r8, r9, r3, r7
   2c0a0:	umull	r4, r5, r4, r7
   2c0a4:	mov	r6, r5
   2c0a8:	mov	r7, r2
   2c0ac:	adds	r0, r6, r8
   2c0b0:	adc	r4, r2, r2
   2c0b4:	adds	r0, r0, #-2147483648	; 0x80000000
   2c0b8:	adc	r4, r4, r2
   2c0bc:	adds	r0, r0, sl
   2c0c0:	adc	r4, r4, r2
   2c0c4:	mov	r0, r4
   2c0c8:	mov	r5, r2
   2c0cc:	mov	r8, r2
   2c0d0:	adds	r2, r9, fp
   2c0d4:	str	r2, [sp, #8]
   2c0d8:	adc	r2, r7, r7
   2c0dc:	str	r2, [sp, #12]
   2c0e0:	ldrd	r6, [sp, #8]
   2c0e4:	umlal	r6, r7, lr, r3
   2c0e8:	adds	r0, r0, r6
   2c0ec:	adc	r5, r5, r7
   2c0f0:	ldr	r3, [sp, #44]	; 0x2c
   2c0f4:	add	r1, r1, r3
   2c0f8:	add	r6, r1, #64	; 0x40
   2c0fc:	cmp	ip, r8
   2c100:	movne	r7, #9
   2c104:	moveq	r7, #8
   2c108:	add	r7, ip, r7
   2c10c:	str	r0, [sp, #72]	; 0x48
   2c110:	str	r5, [sp, #76]	; 0x4c
   2c114:	str	r6, [sp, #80]	; 0x50
   2c118:	ldrd	r2, [sp, #80]	; 0x50
   2c11c:	strd	r2, [sp]
   2c120:	add	r3, sp, #72	; 0x48
   2c124:	ldm	r3, {r2, r3}
   2c128:	add	r0, sp, #56	; 0x38
   2c12c:	bl	2be20 <flatcc_verify_union_vector_field@@Base+0x29c>
   2c130:	ldr	lr, [sp, #56]	; 0x38
   2c134:	str	lr, [sp, #72]	; 0x48
   2c138:	ldr	r3, [sp, #60]	; 0x3c
   2c13c:	str	r3, [sp, #76]	; 0x4c
   2c140:	mov	ip, r3
   2c144:	ldr	r4, [sp, #64]	; 0x40
   2c148:	sub	r0, r6, r4
   2c14c:	lsl	r0, r7, r0
   2c150:	add	r2, r4, #64	; 0x40
   2c154:	movw	r3, #64526	; 0xfc0e
   2c158:	movt	r3, #65535	; 0xffff
   2c15c:	cmp	r2, r3
   2c160:	movge	r5, #0
   2c164:	bge	2c248 <grisu3_diy_fp_encode_double@@Base+0x320>
   2c168:	mvn	r3, #1072	; 0x430
   2c16c:	cmp	r2, r3
   2c170:	blt	2c218 <grisu3_diy_fp_encode_double@@Base+0x2f0>
   2c174:	add	r3, r4, #1136	; 0x470
   2c178:	add	r3, r3, #2
   2c17c:	rsb	r5, r3, #64	; 0x40
   2c180:	cmp	r5, #60	; 0x3c
   2c184:	bgt	2c21c <grisu3_diy_fp_encode_double@@Base+0x2f4>
   2c188:	b	2c248 <grisu3_diy_fp_encode_double@@Base+0x320>
   2c18c:	ldr	r3, [pc, #652]	; 2c420 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2c190:	mov	r2, #80	; 0x50
   2c194:	movw	r1, #16316	; 0x3fbc
   2c198:	movt	r1, #4
   2c19c:	movw	r0, #16404	; 0x4014
   2c1a0:	movt	r0, #4
   2c1a4:	bl	145f0 <__assert_fail@plt>
   2c1a8:	ldr	r3, [pc, #624]	; 2c420 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2c1ac:	mov	r2, #81	; 0x51
   2c1b0:	movw	r1, #16316	; 0x3fbc
   2c1b4:	movt	r1, #4
   2c1b8:	movw	r0, #16436	; 0x4034
   2c1bc:	movt	r0, #4
   2c1c0:	bl	145f0 <__assert_fail@plt>
   2c1c4:	ldr	r3, [pc, #596]	; 2c420 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2c1c8:	mov	r2, #88	; 0x58
   2c1cc:	movw	r1, #16316	; 0x3fbc
   2c1d0:	movt	r1, #4
   2c1d4:	movw	r0, #16480	; 0x4060
   2c1d8:	movt	r0, #4
   2c1dc:	bl	145f0 <__assert_fail@plt>
   2c1e0:	ldr	r3, [pc, #568]	; 2c420 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2c1e4:	mov	r2, #89	; 0x59
   2c1e8:	movw	r1, #16316	; 0x3fbc
   2c1ec:	movt	r1, #4
   2c1f0:	movw	r0, #16496	; 0x4070
   2c1f4:	movt	r0, #4
   2c1f8:	bl	145f0 <__assert_fail@plt>
   2c1fc:	ldr	r3, [pc, #544]	; 2c424 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   2c200:	mov	r2, #185	; 0xb9
   2c204:	movw	r1, #16316	; 0x3fbc
   2c208:	movt	r1, #4
   2c20c:	movw	r0, #16524	; 0x408c
   2c210:	movt	r0, #4
   2c214:	bl	145f0 <__assert_fail@plt>
   2c218:	mov	r3, #0
   2c21c:	rsb	r3, r3, #2
   2c220:	rsb	r1, r3, #32
   2c224:	sub	r2, r3, #32
   2c228:	lsr	lr, lr, r3
   2c22c:	orr	lr, lr, ip, lsl r1
   2c230:	orr	lr, lr, ip, lsr r2
   2c234:	lsr	ip, ip, r3
   2c238:	add	r4, r4, r3
   2c23c:	asr	r0, r0, r3
   2c240:	add	r0, r0, #9
   2c244:	mov	r5, #62	; 0x3e
   2c248:	rsb	r6, r5, #32
   2c24c:	sub	r1, r5, #32
   2c250:	lsr	sl, lr, r5
   2c254:	orr	sl, sl, ip, lsl r6
   2c258:	orr	sl, sl, ip, lsr r1
   2c25c:	lsr	fp, ip, r5
   2c260:	add	r4, r5, r4
   2c264:	sub	ip, r5, #1
   2c268:	mov	r1, #1
   2c26c:	and	r1, lr, r1, lsl ip
   2c270:	lsl	r1, r1, #3
   2c274:	mov	lr, #8
   2c278:	lsl	ip, lr, ip
   2c27c:	add	lr, r0, ip
   2c280:	cmp	lr, r5
   2c284:	bgt	2c2b8 <grisu3_diy_fp_encode_double@@Base+0x390>
   2c288:	adds	sl, sl, #1
   2c28c:	adc	fp, fp, #0
   2c290:	mov	r6, #0
   2c294:	and	r7, fp, #2097152	; 0x200000
   2c298:	orrs	r3, r6, r7
   2c29c:	beq	2c2b8 <grisu3_diy_fp_encode_double@@Base+0x390>
   2c2a0:	lsr	r5, sl, #1
   2c2a4:	orr	r5, r5, fp, lsl #31
   2c2a8:	lsr	r6, fp, #1
   2c2ac:	mov	sl, r5
   2c2b0:	mov	fp, r6
   2c2b4:	add	r4, r4, #1
   2c2b8:	mvn	r6, #0
   2c2bc:	movw	r7, #65535	; 0xffff
   2c2c0:	movt	r7, #31
   2c2c4:	cmp	fp, r7
   2c2c8:	cmpeq	sl, r6
   2c2cc:	bls	2c304 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   2c2d0:	mov	r2, sl
   2c2d4:	mov	r3, fp
   2c2d8:	lsr	r5, r2, #1
   2c2dc:	orr	r5, r5, r3, lsl #31
   2c2e0:	lsr	r8, r3, #1
   2c2e4:	mov	r2, r5
   2c2e8:	mov	r3, r8
   2c2ec:	add	r4, r4, #1
   2c2f0:	cmp	r8, r7
   2c2f4:	cmpeq	r5, r6
   2c2f8:	bhi	2c2d8 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   2c2fc:	mov	sl, r5
   2c300:	mov	fp, r8
   2c304:	movw	r5, #64462	; 0xfbce
   2c308:	movt	r5, #65535	; 0xffff
   2c30c:	cmp	r4, r5
   2c310:	blt	2c410 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2c314:	mvn	r5, #1072	; 0x430
   2c318:	cmp	r4, r5
   2c31c:	blt	2c3d8 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   2c320:	mov	r6, #0
   2c324:	and	r7, fp, #1048576	; 0x100000
   2c328:	orrs	r3, r6, r7
   2c32c:	bne	2c384 <grisu3_diy_fp_encode_double@@Base+0x45c>
   2c330:	sub	r5, r4, #1
   2c334:	movw	r7, #64462	; 0xfbce
   2c338:	movt	r7, #65535	; 0xffff
   2c33c:	mov	r8, #0
   2c340:	mov	r2, sl
   2c344:	mov	r3, fp
   2c348:	mov	sl, r7
   2c34c:	adds	r4, r2, r2
   2c350:	adc	r9, r3, r3
   2c354:	mov	r2, r4
   2c358:	mov	r3, r9
   2c35c:	mov	r4, r5
   2c360:	cmp	r5, sl
   2c364:	beq	2c3ec <grisu3_diy_fp_encode_double@@Base+0x4c4>
   2c368:	mov	r6, r8
   2c36c:	and	r7, r9, #1048576	; 0x100000
   2c370:	sub	r5, r5, #1
   2c374:	orrs	r9, r6, r7
   2c378:	beq	2c34c <grisu3_diy_fp_encode_double@@Base+0x424>
   2c37c:	mov	sl, r2
   2c380:	mov	fp, r3
   2c384:	add	r4, r4, #1072	; 0x430
   2c388:	add	r4, r4, #3
   2c38c:	ubfx	r3, fp, #0, #20
   2c390:	mov	r6, sl
   2c394:	orr	r7, r3, r4, lsl #20
   2c398:	ldr	r3, [sp, #132]	; 0x84
   2c39c:	strd	r6, [r3]
   2c3a0:	sub	r0, ip, r0
   2c3a4:	cmp	lr, r1
   2c3a8:	movgt	lr, #0
   2c3ac:	movle	lr, #1
   2c3b0:	cmp	r0, r1
   2c3b4:	movlt	r0, lr
   2c3b8:	orrge	r0, lr, #1
   2c3bc:	add	sp, sp, #92	; 0x5c
   2c3c0:	ldrd	r4, [sp]
   2c3c4:	ldrd	r6, [sp, #8]
   2c3c8:	ldrd	r8, [sp, #16]
   2c3cc:	ldrd	sl, [sp, #24]
   2c3d0:	add	sp, sp, #32
   2c3d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2c3d8:	movw	r5, #64462	; 0xfbce
   2c3dc:	movt	r5, #65535	; 0xffff
   2c3e0:	cmp	r4, r5
   2c3e4:	bne	2c384 <grisu3_diy_fp_encode_double@@Base+0x45c>
   2c3e8:	b	2c3f4 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2c3ec:	mov	sl, r2
   2c3f0:	mov	fp, r9
   2c3f4:	mov	r4, #0
   2c3f8:	and	r5, fp, #1048576	; 0x100000
   2c3fc:	orrs	r3, r4, r5
   2c400:	beq	2c38c <grisu3_diy_fp_encode_double@@Base+0x464>
   2c404:	movw	r4, #64462	; 0xfbce
   2c408:	movt	r4, #65535	; 0xffff
   2c40c:	b	2c384 <grisu3_diy_fp_encode_double@@Base+0x45c>
   2c410:	mov	r6, #0
   2c414:	mov	r7, #0
   2c418:	b	2c398 <grisu3_diy_fp_encode_double@@Base+0x470>
   2c41c:	andeq	r3, r4, r0, lsr #25
   2c420:	strdeq	r3, [r4], -r0
   2c424:	andeq	r3, r4, r0, lsl #25
   2c428:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c42c:	strd	r6, [sp, #8]
   2c430:	strd	r8, [sp, #16]
   2c434:	strd	sl, [sp, #24]
   2c438:	str	lr, [sp, #32]
   2c43c:	sub	sp, sp, #44	; 0x2c
   2c440:	mov	ip, r2
   2c444:	str	r2, [sp, #12]
   2c448:	mov	r2, #0
   2c44c:	mov	r3, #0
   2c450:	strd	r2, [ip]
   2c454:	cmp	r1, #1000	; 0x3e8
   2c458:	addle	r1, r1, #1
   2c45c:	addle	r1, r0, r1
   2c460:	addgt	r1, r0, #1000	; 0x3e8
   2c464:	addgt	r1, r1, #1
   2c468:	cmp	r1, r0
   2c46c:	moveq	r6, r0
   2c470:	beq	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c474:	ldrb	r3, [r0]
   2c478:	cmp	r3, #45	; 0x2d
   2c47c:	movne	r3, r0
   2c480:	movne	r2, #0
   2c484:	strne	r2, [sp, #16]
   2c488:	beq	2c574 <grisu3_diy_fp_encode_double@@Base+0x64c>
   2c48c:	ldrb	r4, [r3]
   2c490:	cmp	r4, #48	; 0x30
   2c494:	beq	2c58c <grisu3_diy_fp_encode_double@@Base+0x664>
   2c498:	sub	r2, r4, #49	; 0x31
   2c49c:	uxtb	r2, r2
   2c4a0:	cmp	r2, #8
   2c4a4:	bhi	2c5e4 <grisu3_diy_fp_encode_double@@Base+0x6bc>
   2c4a8:	add	ip, r3, #1
   2c4ac:	sub	r4, r4, #48	; 0x30
   2c4b0:	asr	r5, r4, #31
   2c4b4:	cmp	r1, ip
   2c4b8:	beq	2cc64 <grisu3_diy_fp_encode_double@@Base+0xd3c>
   2c4bc:	ldrb	sl, [ip]
   2c4c0:	sub	r3, sl, #48	; 0x30
   2c4c4:	uxtb	r3, r3
   2c4c8:	cmp	r3, #9
   2c4cc:	movhi	r6, ip
   2c4d0:	bhi	2ce0c <grisu3_diy_fp_encode_double@@Base+0xee4>
   2c4d4:	add	r2, ip, #1
   2c4d8:	mov	lr, r1
   2c4dc:	add	r9, pc, #964	; 0x3c4
   2c4e0:	ldrd	r8, [r9]
   2c4e4:	mov	r6, r2
   2c4e8:	lsl	fp, r5, #2
   2c4ec:	lsl	r3, r4, #2
   2c4f0:	orr	r7, fp, r4, lsr #30
   2c4f4:	adds	r3, r3, r4
   2c4f8:	adc	r7, r7, r5
   2c4fc:	adds	r3, r3, r3
   2c500:	adc	r7, r7, r7
   2c504:	uxtb	sl, sl
   2c508:	mov	fp, #0
   2c50c:	adds	r3, r3, sl
   2c510:	adc	r7, r7, fp
   2c514:	subs	r4, r3, #48	; 0x30
   2c518:	sbc	r5, r7, #0
   2c51c:	cmp	r2, lr
   2c520:	beq	2cc6c <grisu3_diy_fp_encode_double@@Base+0xd44>
   2c524:	ldrb	sl, [r2], #1
   2c528:	sub	r3, sl, #48	; 0x30
   2c52c:	uxtb	r3, r3
   2c530:	cmp	r3, #9
   2c534:	bhi	2ce0c <grisu3_diy_fp_encode_double@@Base+0xee4>
   2c538:	cmp	r5, r9
   2c53c:	cmpeq	r4, r8
   2c540:	bls	2c4e4 <grisu3_diy_fp_encode_double@@Base+0x5bc>
   2c544:	cmp	sl, #52	; 0x34
   2c548:	movls	sl, #0
   2c54c:	movhi	sl, #1
   2c550:	adds	r4, r4, sl
   2c554:	adc	r5, r5, #0
   2c558:	sub	r7, r6, ip
   2c55c:	cmp	r1, r6
   2c560:	moveq	r6, #0
   2c564:	beq	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c568:	mov	r3, #1
   2c56c:	str	r3, [sp, #20]
   2c570:	b	2ce18 <grisu3_diy_fp_encode_double@@Base+0xef0>
   2c574:	add	r3, r0, #1
   2c578:	cmp	r1, r3
   2c57c:	beq	2cc4c <grisu3_diy_fp_encode_double@@Base+0xd24>
   2c580:	mov	r2, #1
   2c584:	str	r2, [sp, #16]
   2c588:	b	2c48c <grisu3_diy_fp_encode_double@@Base+0x564>
   2c58c:	add	ip, r3, #1
   2c590:	cmp	r1, ip
   2c594:	moveq	r6, #0
   2c598:	beq	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c59c:	ldrb	r2, [r3, #1]
   2c5a0:	orr	lr, r2, #32
   2c5a4:	cmp	lr, #120	; 0x78
   2c5a8:	beq	2cc54 <grisu3_diy_fp_encode_double@@Base+0xd2c>
   2c5ac:	cmp	r2, #48	; 0x30
   2c5b0:	addeq	r3, r3, #2
   2c5b4:	moveq	lr, r1
   2c5b8:	bne	2c5d8 <grisu3_diy_fp_encode_double@@Base+0x6b0>
   2c5bc:	mov	ip, r3
   2c5c0:	cmp	r3, lr
   2c5c4:	beq	2cc5c <grisu3_diy_fp_encode_double@@Base+0xd34>
   2c5c8:	add	r3, r3, #1
   2c5cc:	ldrb	r2, [ip]
   2c5d0:	cmp	r2, #48	; 0x30
   2c5d4:	beq	2c5bc <grisu3_diy_fp_encode_double@@Base+0x694>
   2c5d8:	mov	r4, #0
   2c5dc:	mov	r5, #0
   2c5e0:	b	2c4bc <grisu3_diy_fp_encode_double@@Base+0x594>
   2c5e4:	ldr	r3, [sp, #16]
   2c5e8:	cmp	r3, #0
   2c5ec:	moveq	r6, r0
   2c5f0:	movne	r6, #0
   2c5f4:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c5f8:	add	lr, ip, #1
   2c5fc:	add	r2, r6, #1
   2c600:	cmp	r1, r2
   2c604:	beq	2cc98 <grisu3_diy_fp_encode_double@@Base+0xd70>
   2c608:	ldrb	r3, [r6, #1]
   2c60c:	sub	r3, r3, #48	; 0x30
   2c610:	uxtb	r3, r3
   2c614:	cmp	r3, #9
   2c618:	bhi	2cdf0 <grisu3_diy_fp_encode_double@@Base+0xec8>
   2c61c:	add	r2, r6, #2
   2c620:	mov	r9, r1
   2c624:	sub	sl, ip, r6
   2c628:	add	ip, sl, r2
   2c62c:	mov	lr, r2
   2c630:	cmp	r2, r9
   2c634:	beq	2cca0 <grisu3_diy_fp_encode_double@@Base+0xd78>
   2c638:	add	r2, r2, #1
   2c63c:	ldrb	r3, [lr]
   2c640:	sub	r3, r3, #48	; 0x30
   2c644:	uxtb	r3, r3
   2c648:	cmp	r3, #9
   2c64c:	bls	2c628 <grisu3_diy_fp_encode_double@@Base+0x700>
   2c650:	mov	r6, lr
   2c654:	mov	r3, #1
   2c658:	str	r3, [sp, #20]
   2c65c:	b	2ce64 <grisu3_diy_fp_encode_double@@Base+0xf3c>
   2c660:	add	r2, r6, #1
   2c664:	mov	sl, r2
   2c668:	ldrb	r8, [r6, #1]
   2c66c:	sub	r3, r8, #48	; 0x30
   2c670:	uxtb	r3, r3
   2c674:	cmp	r3, #9
   2c678:	movhi	r6, #0
   2c67c:	bhi	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c680:	cmp	r1, r2
   2c684:	beq	2cca8 <grisu3_diy_fp_encode_double@@Base+0xd80>
   2c688:	add	r3, pc, #536	; 0x218
   2c68c:	ldrd	r2, [r3]
   2c690:	cmp	r5, r3
   2c694:	cmpeq	r4, r2
   2c698:	bhi	2cefc <grisu3_diy_fp_encode_double@@Base+0xfd4>
   2c69c:	add	lr, r6, #2
   2c6a0:	add	r6, r6, ip
   2c6a4:	add	r6, r6, #1
   2c6a8:	str	r1, [sp, #24]
   2c6ac:	mov	r2, r1
   2c6b0:	str	r0, [sp, #28]
   2c6b4:	mov	fp, lr
   2c6b8:	lsl	r9, r5, #2
   2c6bc:	lsl	r3, r4, #2
   2c6c0:	orr	ip, r9, r4, lsr #30
   2c6c4:	adds	r3, r3, r4
   2c6c8:	adc	ip, ip, r5
   2c6cc:	adds	r3, r3, r3
   2c6d0:	adc	ip, ip, ip
   2c6d4:	uxtb	r8, r8
   2c6d8:	mov	r9, #0
   2c6dc:	adds	r3, r3, r8
   2c6e0:	adc	ip, ip, r9
   2c6e4:	subs	r4, r3, #48	; 0x30
   2c6e8:	sbc	r5, ip, #0
   2c6ec:	sub	ip, r6, lr
   2c6f0:	cmp	lr, r2
   2c6f4:	beq	2ccb0 <grisu3_diy_fp_encode_double@@Base+0xd88>
   2c6f8:	ldrb	r8, [lr], #1
   2c6fc:	sub	r3, r8, #48	; 0x30
   2c700:	uxtb	r3, r3
   2c704:	cmp	r3, #9
   2c708:	bhi	2c768 <grisu3_diy_fp_encode_double@@Base+0x840>
   2c70c:	add	r1, pc, #404	; 0x194
   2c710:	ldrd	r0, [r1]
   2c714:	cmp	r5, r1
   2c718:	cmpeq	r4, r0
   2c71c:	bls	2c6b4 <grisu3_diy_fp_encode_double@@Base+0x78c>
   2c720:	ldr	r1, [sp, #24]
   2c724:	ldr	r0, [sp, #28]
   2c728:	ldr	r3, [sp, #20]
   2c72c:	cmp	r3, #0
   2c730:	bne	2cddc <grisu3_diy_fp_encode_double@@Base+0xeb4>
   2c734:	cmp	r8, #52	; 0x34
   2c738:	movls	r2, #0
   2c73c:	movhi	r2, #1
   2c740:	adds	r4, r4, r2
   2c744:	adc	r5, r5, #0
   2c748:	sub	r3, fp, sl
   2c74c:	add	r7, r7, r3
   2c750:	cmp	r1, fp
   2c754:	moveq	r6, #0
   2c758:	beq	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c75c:	mov	r3, #1
   2c760:	str	r3, [sp, #20]
   2c764:	b	2c778 <grisu3_diy_fp_encode_double@@Base+0x850>
   2c768:	ldr	r1, [sp, #24]
   2c76c:	ldr	r0, [sp, #28]
   2c770:	sub	r3, fp, sl
   2c774:	add	r7, r7, r3
   2c778:	ldrb	r3, [fp]
   2c77c:	cmp	r3, #48	; 0x30
   2c780:	bne	2cdd4 <grisu3_diy_fp_encode_double@@Base+0xeac>
   2c784:	add	r3, fp, #1
   2c788:	mov	r2, r1
   2c78c:	sub	fp, ip, fp
   2c790:	add	ip, fp, r3
   2c794:	mov	r6, r3
   2c798:	cmp	r2, r3
   2c79c:	beq	2ccb8 <grisu3_diy_fp_encode_double@@Base+0xd90>
   2c7a0:	add	r3, r3, #1
   2c7a4:	ldrb	lr, [r6]
   2c7a8:	cmp	lr, #48	; 0x30
   2c7ac:	beq	2c790 <grisu3_diy_fp_encode_double@@Base+0x868>
   2c7b0:	ldrb	r3, [r6]
   2c7b4:	sub	r3, r3, #49	; 0x31
   2c7b8:	uxtb	r3, r3
   2c7bc:	cmp	r3, #8
   2c7c0:	bhi	2ce70 <grisu3_diy_fp_encode_double@@Base+0xf48>
   2c7c4:	add	r2, r6, #1
   2c7c8:	cmp	r1, r2
   2c7cc:	beq	2ccc0 <grisu3_diy_fp_encode_double@@Base+0xd98>
   2c7d0:	ldrb	r3, [r6, #1]
   2c7d4:	sub	r3, r3, #48	; 0x30
   2c7d8:	uxtb	r3, r3
   2c7dc:	cmp	r3, #9
   2c7e0:	bhi	2cdc4 <grisu3_diy_fp_encode_double@@Base+0xe9c>
   2c7e4:	add	r2, r6, #2
   2c7e8:	mov	lr, r1
   2c7ec:	mov	r6, r2
   2c7f0:	cmp	lr, r2
   2c7f4:	beq	2ccc8 <grisu3_diy_fp_encode_double@@Base+0xda0>
   2c7f8:	add	r2, r2, #1
   2c7fc:	ldrb	r3, [r6]
   2c800:	sub	r3, r3, #48	; 0x30
   2c804:	uxtb	r3, r3
   2c808:	cmp	r3, #9
   2c80c:	bls	2c7ec <grisu3_diy_fp_encode_double@@Base+0x8c4>
   2c810:	mov	r3, #1
   2c814:	str	r3, [sp, #20]
   2c818:	b	2ce70 <grisu3_diy_fp_encode_double@@Base+0xf48>
   2c81c:	add	r2, r6, #2
   2c820:	cmp	r1, r2
   2c824:	beq	2ccd0 <grisu3_diy_fp_encode_double@@Base+0xda8>
   2c828:	mov	fp, #0
   2c82c:	b	2ceb4 <grisu3_diy_fp_encode_double@@Base+0xf8c>
   2c830:	add	r2, r6, #2
   2c834:	cmp	r1, r2
   2c838:	beq	2ccd8 <grisu3_diy_fp_encode_double@@Base+0xdb0>
   2c83c:	mov	fp, #1
   2c840:	b	2ceb4 <grisu3_diy_fp_encode_double@@Base+0xf8c>
   2c844:	mov	r6, r2
   2c848:	cmp	sl, r2
   2c84c:	beq	2cce8 <grisu3_diy_fp_encode_double@@Base+0xdc0>
   2c850:	ldrb	r9, [r2], #1
   2c854:	sub	lr, r9, #48	; 0x30
   2c858:	uxtb	lr, lr
   2c85c:	cmp	lr, #9
   2c860:	bhi	2cd00 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   2c864:	cmp	r3, #32768	; 0x8000
   2c868:	bge	2c844 <grisu3_diy_fp_encode_double@@Base+0x91c>
   2c86c:	add	r3, r3, r3, lsl #2
   2c870:	add	r3, r9, r3, lsl #1
   2c874:	sub	r3, r3, #48	; 0x30
   2c878:	b	2c844 <grisu3_diy_fp_encode_double@@Base+0x91c>
   2c87c:	mov	r2, #0
   2c880:	mov	r3, #0
   2c884:	movt	r3, #32752	; 0x7ff0
   2c888:	strd	r2, [r9]
   2c88c:	ldr	r3, [sp, #16]
   2c890:	cmp	r3, #0
   2c894:	beq	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c898:	vldr	d7, [r9]
   2c89c:	vneg.f64	d7, d7
   2c8a0:	vstr	d7, [r9]
   2c8a4:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c8a8:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2c8ac:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2c8b0:	andeq	r0, r0, r0
   2c8b4:	sbcmi	r8, r3, r0, lsl #16
   2c8b8:	andeq	r0, r0, r0
   2c8bc:	addmi	r4, pc, r0
   2c8c0:	andeq	r0, r0, r0
   2c8c4:	smlawbmi	lr, r0, r4, r8
   2c8c8:	andeq	r0, r0, r0
   2c8cc:	orrsmi	sp, r7, r4, lsl #15
   2c8d0:	andcs	r0, r0, r0
   2c8d4:	andmi	sl, r2, #95	; 0x5f
   2c8d8:	andge	r0, r0, #0
   2c8dc:	rsbmi	r1, sp, #148, 20	; 0x94000
   2c8e0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2c8e4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2c8e8:	strbcc	r8, [r0, r0]!
   2c8ec:	movtmi	ip, #4985	; 0x1379
   2c8f0:	strbvs	ip, [lr, -r0, lsl #16]
   2c8f4:			; <UNDEFINED> instruction: 0x43abc16d
   2c8f8:	ldmvc	r5!, {r6, sl, fp, pc}
   2c8fc:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2c900:			; <UNDEFINED> instruction: 0x064dd592
   2c904:	strmi	pc, [r0], #207	; 0xcf
   2c908:	usatle	lr, #2, r0, asr #30
   2c90c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2c910:	addsvs	r3, r1, r0, lsl #26
   2c914:	mvnmi	r5, #228, 16	; 0xe40000
   2c918:	ldrbhi	sl, [r8]
   2c91c:	cmnmi	r6, #1459617792	; 0x57000000
   2c920:	ldrtcs	r0, [r4], -r0
   2c924:	movwmi	r6, #52213	; 0xcbf5
   2c928:	strb	r0, [r0, #-0]
   2c92c:	adcmi	r3, r2, #156	; 0x9c
   2c930:	stmda	r0, {}	; <UNPREDICTABLE>
   2c934:	eorsmi	r4, r7, #7733248	; 0x760000
   2c938:	andeq	r0, r0, r0
   2c93c:	bicmi	ip, sp, r5, ror #26
   2c940:	andeq	r0, r0, r0
   2c944:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2c948:	andeq	r0, r0, r0
   2c94c:	rscsmi	r6, r8, r0, lsl #20
   2c950:	andeq	r0, r0, r0
   2c954:	subsmi	r0, r9, r0
   2c958:	andeq	r0, r0, r0
   2c95c:	eormi	r0, r4, r0
   2c960:	mov	r0, r4
   2c964:	mov	r1, r5
   2c968:	bl	3e474 <flatcc_json_printer_clear@@Base+0x390>
   2c96c:	vmov	d7, r0, r1
   2c970:	sub	r3, r8, r7
   2c974:	add	r3, r3, #22
   2c978:	cmp	r3, #44	; 0x2c
   2c97c:	ldrls	pc, [pc, r3, lsl #2]
   2c980:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c984:	andeq	ip, r2, r8, lsr sl
   2c988:	andeq	ip, r2, r8, asr #20
   2c98c:	andeq	ip, r2, r4, asr sl
   2c990:	andeq	ip, r2, r0, ror #20
   2c994:	andeq	ip, r2, ip, ror #20
   2c998:	andeq	ip, r2, r8, ror sl
   2c99c:	andeq	ip, r2, r4, lsl #21
   2c9a0:	muleq	r2, r0, sl
   2c9a4:	muleq	r2, ip, sl
   2c9a8:	andeq	ip, r2, r8, lsr #21
   2c9ac:			; <UNDEFINED> instruction: 0x0002cab4
   2c9b0:	andeq	ip, r2, r0, asr #21
   2c9b4:	andeq	ip, r2, ip, asr #21
   2c9b8:	ldrdeq	ip, [r2], -r8
   2c9bc:	andeq	ip, r2, r4, ror #21
   2c9c0:	strdeq	ip, [r2], -r0
   2c9c4:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c9c8:	andeq	ip, r2, r8, lsl #22
   2c9cc:	andeq	ip, r2, r4, lsl fp
   2c9d0:	andeq	ip, r2, r0, lsr #22
   2c9d4:	andeq	ip, r2, ip, lsr #22
   2c9d8:	andeq	ip, r2, r8, lsr fp
   2c9dc:	andeq	ip, r2, r0, asr #20
   2c9e0:	andeq	ip, r2, r4, asr #22
   2c9e4:	andeq	ip, r2, r0, asr fp
   2c9e8:	andeq	ip, r2, ip, asr fp
   2c9ec:	andeq	ip, r2, r8, ror #22
   2c9f0:	andeq	ip, r2, r4, ror fp
   2c9f4:	andeq	ip, r2, r0, lsl #23
   2c9f8:	andeq	ip, r2, ip, lsl #23
   2c9fc:	muleq	r2, r8, fp
   2ca00:	andeq	ip, r2, r4, lsr #23
   2ca04:			; <UNDEFINED> instruction: 0x0002cbb0
   2ca08:			; <UNDEFINED> instruction: 0x0002cbbc
   2ca0c:	andeq	ip, r2, r8, asr #23
   2ca10:	ldrdeq	ip, [r2], -r4
   2ca14:	andeq	ip, r2, r0, ror #23
   2ca18:	andeq	ip, r2, ip, ror #23
   2ca1c:	strdeq	ip, [r2], -r8
   2ca20:	andeq	ip, r2, r4, lsl #24
   2ca24:	andeq	ip, r2, r0, lsl ip
   2ca28:	andeq	ip, r2, ip, lsl ip
   2ca2c:	andeq	ip, r2, r8, lsr #24
   2ca30:	andeq	ip, r2, r4, lsr ip
   2ca34:	andeq	ip, r2, r0, asr #24
   2ca38:	vldr	d6, [pc, #-320]	; 2c900 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   2ca3c:	vdiv.f64	d7, d7, d6
   2ca40:	vstr	d7, [r9]
   2ca44:	b	2c88c <grisu3_diy_fp_encode_double@@Base+0x964>
   2ca48:	vldr	d6, [pc, #-328]	; 2c908 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   2ca4c:	vdiv.f64	d7, d7, d6
   2ca50:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2ca54:	vldr	d6, [pc, #-356]	; 2c8f8 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   2ca58:	vdiv.f64	d7, d7, d6
   2ca5c:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2ca60:	vldr	d6, [pc, #-344]	; 2c910 <grisu3_diy_fp_encode_double@@Base+0x9e8>
   2ca64:	vdiv.f64	d7, d7, d6
   2ca68:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2ca6c:	vldr	d6, [pc, #-388]	; 2c8f0 <grisu3_diy_fp_encode_double@@Base+0x9c8>
   2ca70:	vdiv.f64	d7, d7, d6
   2ca74:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2ca78:	vldr	d6, [pc, #-360]	; 2c918 <grisu3_diy_fp_encode_double@@Base+0x9f0>
   2ca7c:	vdiv.f64	d7, d7, d6
   2ca80:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2ca84:	vldr	d6, [pc, #-420]	; 2c8e8 <grisu3_diy_fp_encode_double@@Base+0x9c0>
   2ca88:	vdiv.f64	d7, d7, d6
   2ca8c:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2ca90:	vldr	d6, [pc, #-376]	; 2c920 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   2ca94:	vdiv.f64	d7, d7, d6
   2ca98:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2ca9c:	vldr	d6, [pc, #-452]	; 2c8e0 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   2caa0:	vdiv.f64	d7, d7, d6
   2caa4:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2caa8:	vldr	d6, [pc, #-392]	; 2c928 <grisu3_diy_fp_encode_double@@Base+0xa00>
   2caac:	vdiv.f64	d7, d7, d6
   2cab0:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cab4:	vldr	d6, [pc, #-484]	; 2c8d8 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   2cab8:	vdiv.f64	d7, d7, d6
   2cabc:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cac0:	vldr	d6, [pc, #-408]	; 2c930 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2cac4:	vdiv.f64	d7, d7, d6
   2cac8:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cacc:	vldr	d6, [pc, #-516]	; 2c8d0 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   2cad0:	vdiv.f64	d7, d7, d6
   2cad4:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cad8:	vldr	d6, [pc, #-424]	; 2c938 <grisu3_diy_fp_encode_double@@Base+0xa10>
   2cadc:	vdiv.f64	d7, d7, d6
   2cae0:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cae4:	vldr	d6, [pc, #-548]	; 2c8c8 <grisu3_diy_fp_encode_double@@Base+0x9a0>
   2cae8:	vdiv.f64	d7, d7, d6
   2caec:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2caf0:	vldr	d6, [pc, #-440]	; 2c940 <grisu3_diy_fp_encode_double@@Base+0xa18>
   2caf4:	vdiv.f64	d7, d7, d6
   2caf8:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cafc:	vldr	d6, [pc, #-580]	; 2c8c0 <grisu3_diy_fp_encode_double@@Base+0x998>
   2cb00:	vdiv.f64	d7, d7, d6
   2cb04:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb08:	vldr	d6, [pc, #-456]	; 2c948 <grisu3_diy_fp_encode_double@@Base+0xa20>
   2cb0c:	vdiv.f64	d7, d7, d6
   2cb10:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb14:	vldr	d6, [pc, #-620]	; 2c8b0 <grisu3_diy_fp_encode_double@@Base+0x988>
   2cb18:	vdiv.f64	d7, d7, d6
   2cb1c:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb20:	vldr	d6, [pc, #-624]	; 2c8b8 <grisu3_diy_fp_encode_double@@Base+0x990>
   2cb24:	vdiv.f64	d7, d7, d6
   2cb28:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb2c:	vldr	d6, [pc, #-484]	; 2c950 <grisu3_diy_fp_encode_double@@Base+0xa28>
   2cb30:	vdiv.f64	d7, d7, d6
   2cb34:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb38:	vldr	d6, [pc, #-488]	; 2c958 <grisu3_diy_fp_encode_double@@Base+0xa30>
   2cb3c:	vdiv.f64	d7, d7, d6
   2cb40:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb44:	vldr	d6, [pc, #-500]	; 2c958 <grisu3_diy_fp_encode_double@@Base+0xa30>
   2cb48:	vmul.f64	d7, d7, d6
   2cb4c:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb50:	vldr	d6, [pc, #-520]	; 2c950 <grisu3_diy_fp_encode_double@@Base+0xa28>
   2cb54:	vmul.f64	d7, d7, d6
   2cb58:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb5c:	vldr	d6, [pc, #-684]	; 2c8b8 <grisu3_diy_fp_encode_double@@Base+0x990>
   2cb60:	vmul.f64	d7, d7, d6
   2cb64:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb68:	vldr	d6, [pc, #-704]	; 2c8b0 <grisu3_diy_fp_encode_double@@Base+0x988>
   2cb6c:	vmul.f64	d7, d7, d6
   2cb70:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb74:	vldr	d6, [pc, #-564]	; 2c948 <grisu3_diy_fp_encode_double@@Base+0xa20>
   2cb78:	vmul.f64	d7, d7, d6
   2cb7c:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb80:	vldr	d6, [pc, #-712]	; 2c8c0 <grisu3_diy_fp_encode_double@@Base+0x998>
   2cb84:	vmul.f64	d7, d7, d6
   2cb88:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb8c:	vldr	d6, [pc, #-596]	; 2c940 <grisu3_diy_fp_encode_double@@Base+0xa18>
   2cb90:	vmul.f64	d7, d7, d6
   2cb94:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cb98:	vldr	d6, [pc, #-728]	; 2c8c8 <grisu3_diy_fp_encode_double@@Base+0x9a0>
   2cb9c:	vmul.f64	d7, d7, d6
   2cba0:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cba4:	vldr	d6, [pc, #-628]	; 2c938 <grisu3_diy_fp_encode_double@@Base+0xa10>
   2cba8:	vmul.f64	d7, d7, d6
   2cbac:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cbb0:	vldr	d6, [pc, #-744]	; 2c8d0 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   2cbb4:	vmul.f64	d7, d7, d6
   2cbb8:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cbbc:	vldr	d6, [pc, #-660]	; 2c930 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2cbc0:	vmul.f64	d7, d7, d6
   2cbc4:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cbc8:	vldr	d6, [pc, #-760]	; 2c8d8 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   2cbcc:	vmul.f64	d7, d7, d6
   2cbd0:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cbd4:	vldr	d6, [pc, #-692]	; 2c928 <grisu3_diy_fp_encode_double@@Base+0xa00>
   2cbd8:	vmul.f64	d7, d7, d6
   2cbdc:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cbe0:	vldr	d6, [pc, #-776]	; 2c8e0 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   2cbe4:	vmul.f64	d7, d7, d6
   2cbe8:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cbec:	vldr	d6, [pc, #-724]	; 2c920 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   2cbf0:	vmul.f64	d7, d7, d6
   2cbf4:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cbf8:	vldr	d6, [pc, #-792]	; 2c8e8 <grisu3_diy_fp_encode_double@@Base+0x9c0>
   2cbfc:	vmul.f64	d7, d7, d6
   2cc00:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cc04:	vldr	d6, [pc, #-756]	; 2c918 <grisu3_diy_fp_encode_double@@Base+0x9f0>
   2cc08:	vmul.f64	d7, d7, d6
   2cc0c:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cc10:	vldr	d6, [pc, #-808]	; 2c8f0 <grisu3_diy_fp_encode_double@@Base+0x9c8>
   2cc14:	vmul.f64	d7, d7, d6
   2cc18:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cc1c:	vldr	d6, [pc, #-788]	; 2c910 <grisu3_diy_fp_encode_double@@Base+0x9e8>
   2cc20:	vmul.f64	d7, d7, d6
   2cc24:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cc28:	vldr	d6, [pc, #-824]	; 2c8f8 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   2cc2c:	vmul.f64	d7, d7, d6
   2cc30:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cc34:	vldr	d6, [pc, #-820]	; 2c908 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   2cc38:	vmul.f64	d7, d7, d6
   2cc3c:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cc40:	vldr	d6, [pc, #-840]	; 2c900 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   2cc44:	vmul.f64	d7, d7, d6
   2cc48:	b	2ca40 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2cc4c:	mov	r6, #0
   2cc50:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cc54:	mov	r6, r0
   2cc58:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cc5c:	mov	r6, #0
   2cc60:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cc64:	mov	r6, #0
   2cc68:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cc6c:	mov	r6, #0
   2cc70:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cc74:	mov	r6, #0
   2cc78:	mov	r0, r6
   2cc7c:	add	sp, sp, #44	; 0x2c
   2cc80:	ldrd	r4, [sp]
   2cc84:	ldrd	r6, [sp, #8]
   2cc88:	ldrd	r8, [sp, #16]
   2cc8c:	ldrd	sl, [sp, #24]
   2cc90:	add	sp, sp, #32
   2cc94:	pop	{pc}		; (ldr pc, [sp], #4)
   2cc98:	mov	r6, #0
   2cc9c:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cca0:	mov	r6, #0
   2cca4:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cca8:	mov	r6, #0
   2ccac:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ccb0:	mov	r6, #0
   2ccb4:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ccb8:	mov	r6, #0
   2ccbc:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ccc0:	mov	r6, #0
   2ccc4:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ccc8:	mov	r6, #0
   2cccc:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ccd0:	mov	r6, #0
   2ccd4:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ccd8:	mov	r6, #0
   2ccdc:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cce0:	mov	r6, #0
   2cce4:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cce8:	cmp	fp, #0
   2ccec:	moveq	r6, #0
   2ccf0:	bne	2cd08 <grisu3_diy_fp_encode_double@@Base+0xde0>
   2ccf4:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ccf8:	add	r8, ip, r3
   2ccfc:	b	2cd18 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   2cd00:	cmp	fp, #0
   2cd04:	beq	2ccf8 <grisu3_diy_fp_encode_double@@Base+0xdd0>
   2cd08:	rsb	r8, r3, #0
   2cd0c:	add	r8, ip, r8
   2cd10:	cmp	r1, r6
   2cd14:	beq	2cce0 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   2cd18:	ldr	r9, [sp, #12]
   2cd1c:	mov	sl, r0
   2cd20:	orrs	r3, r4, r5
   2cd24:	moveq	r2, #1
   2cd28:	movne	r2, #0
   2cd2c:	cmn	r8, #324	; 0x144
   2cd30:	movge	r3, #0
   2cd34:	movlt	r3, #1
   2cd38:	orrs	r3, r2, r3
   2cd3c:	bne	2c88c <grisu3_diy_fp_encode_double@@Base+0x964>
   2cd40:	movw	r3, #310	; 0x136
   2cd44:	cmp	r8, r3
   2cd48:	bgt	2c87c <grisu3_diy_fp_encode_double@@Base+0x954>
   2cd4c:	mvn	r2, #0
   2cd50:	movw	r3, #65535	; 0xffff
   2cd54:	movt	r3, #31
   2cd58:	cmp	r5, r3
   2cd5c:	cmpeq	r4, r2
   2cd60:	movls	r3, #1
   2cd64:	movhi	r3, #0
   2cd68:	cmp	r8, #22
   2cd6c:	movhi	r3, #0
   2cd70:	andls	r3, r3, #1
   2cd74:	cmp	r3, #0
   2cd78:	bne	2c960 <grisu3_diy_fp_encode_double@@Base+0xa38>
   2cd7c:	str	r9, [sp, #4]
   2cd80:	ldr	r3, [sp, #20]
   2cd84:	str	r3, [sp]
   2cd88:	mov	r3, r7
   2cd8c:	mov	r2, r8
   2cd90:	mov	r0, r4
   2cd94:	mov	r1, r5
   2cd98:	bl	2bf28 <grisu3_diy_fp_encode_double@@Base>
   2cd9c:	cmp	r0, #0
   2cda0:	bne	2c88c <grisu3_diy_fp_encode_double@@Base+0x964>
   2cda4:	add	r1, sp, #36	; 0x24
   2cda8:	mov	r0, sl
   2cdac:	bl	145b4 <strtod@plt>
   2cdb0:	vstr	d0, [r9]
   2cdb4:	ldr	r3, [sp, #36]	; 0x24
   2cdb8:	cmp	r6, r3
   2cdbc:	movcs	r6, r3
   2cdc0:	b	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cdc4:	mov	r6, r2
   2cdc8:	mov	r3, #1
   2cdcc:	str	r3, [sp, #20]
   2cdd0:	b	2ce70 <grisu3_diy_fp_encode_double@@Base+0xf48>
   2cdd4:	mov	r6, fp
   2cdd8:	b	2c7b0 <grisu3_diy_fp_encode_double@@Base+0x888>
   2cddc:	sub	r3, fp, sl
   2cde0:	add	r7, r7, r3
   2cde4:	mov	r3, #1
   2cde8:	str	r3, [sp, #20]
   2cdec:	b	2c778 <grisu3_diy_fp_encode_double@@Base+0x850>
   2cdf0:	mov	ip, lr
   2cdf4:	mov	r6, r2
   2cdf8:	mov	r3, #1
   2cdfc:	str	r3, [sp, #20]
   2ce00:	b	2ce64 <grisu3_diy_fp_encode_double@@Base+0xf3c>
   2ce04:	mov	ip, #0
   2ce08:	b	2ce50 <grisu3_diy_fp_encode_double@@Base+0xf28>
   2ce0c:	sub	r7, r6, ip
   2ce10:	mov	r3, #0
   2ce14:	str	r3, [sp, #20]
   2ce18:	ldrb	r3, [r6]
   2ce1c:	cmp	r3, #48	; 0x30
   2ce20:	bne	2ce04 <grisu3_diy_fp_encode_double@@Base+0xedc>
   2ce24:	add	r3, r6, #1
   2ce28:	mov	lr, r1
   2ce2c:	mov	ip, #0
   2ce30:	add	ip, ip, #1
   2ce34:	mov	r6, r3
   2ce38:	cmp	r3, lr
   2ce3c:	beq	2cc74 <grisu3_diy_fp_encode_double@@Base+0xd4c>
   2ce40:	add	r3, r3, #1
   2ce44:	ldrb	r2, [r6]
   2ce48:	cmp	r2, #48	; 0x30
   2ce4c:	beq	2ce30 <grisu3_diy_fp_encode_double@@Base+0xf08>
   2ce50:	ldrb	r3, [r6]
   2ce54:	sub	r3, r3, #49	; 0x31
   2ce58:	uxtb	r3, r3
   2ce5c:	cmp	r3, #8
   2ce60:	bls	2c5f8 <grisu3_diy_fp_encode_double@@Base+0x6d0>
   2ce64:	ldrb	r3, [r6]
   2ce68:	cmp	r3, #46	; 0x2e
   2ce6c:	beq	2c660 <grisu3_diy_fp_encode_double@@Base+0x738>
   2ce70:	add	ip, r7, ip
   2ce74:	ldrb	r3, [r6]
   2ce78:	orr	r3, r3, #32
   2ce7c:	cmp	r3, #101	; 0x65
   2ce80:	movne	r8, #0
   2ce84:	bne	2cd0c <grisu3_diy_fp_encode_double@@Base+0xde4>
   2ce88:	sub	r3, r1, r6
   2ce8c:	cmp	r3, #1
   2ce90:	movle	r6, #0
   2ce94:	ble	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ce98:	ldrb	r3, [r6, #1]
   2ce9c:	cmp	r3, #43	; 0x2b
   2cea0:	beq	2c81c <grisu3_diy_fp_encode_double@@Base+0x8f4>
   2cea4:	cmp	r3, #45	; 0x2d
   2cea8:	beq	2c830 <grisu3_diy_fp_encode_double@@Base+0x908>
   2ceac:	add	r2, r6, #1
   2ceb0:	mov	fp, #0
   2ceb4:	ldrb	r8, [r2]
   2ceb8:	sub	lr, r8, #48	; 0x30
   2cebc:	uxtb	lr, lr
   2cec0:	cmp	lr, #9
   2cec4:	movhi	r6, #0
   2cec8:	bhi	2cc78 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2cecc:	add	r6, r2, #1
   2ced0:	sub	r3, r8, #48	; 0x30
   2ced4:	cmp	r1, r6
   2ced8:	beq	2cce8 <grisu3_diy_fp_encode_double@@Base+0xdc0>
   2cedc:	ldrb	r9, [r2, #1]
   2cee0:	sub	lr, r9, #48	; 0x30
   2cee4:	uxtb	lr, lr
   2cee8:	cmp	lr, #9
   2ceec:	bhi	2cd00 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   2cef0:	add	r2, r2, #2
   2cef4:	mov	sl, r1
   2cef8:	b	2c864 <grisu3_diy_fp_encode_double@@Base+0x93c>
   2cefc:	ldr	r3, [sp, #20]
   2cf00:	cmp	r3, #0
   2cf04:	movne	fp, sl
   2cf08:	bne	2cddc <grisu3_diy_fp_encode_double@@Base+0xeb4>
   2cf0c:	cmp	r8, #52	; 0x34
   2cf10:	movls	r2, #0
   2cf14:	movhi	r2, #1
   2cf18:	adds	r4, r4, r2
   2cf1c:	adc	r5, r5, #0
   2cf20:	mov	fp, sl
   2cf24:	mov	r3, #1
   2cf28:	str	r3, [sp, #20]
   2cf2c:	b	2c778 <grisu3_diy_fp_encode_double@@Base+0x850>

0002cf30 <flatcc_json_parser_error_string@@Base>:
   2cf30:	cmp	r0, #34	; 0x22
   2cf34:	ldrls	pc, [pc, r0, lsl #2]
   2cf38:	b	2d160 <flatcc_json_parser_error_string@@Base+0x230>
   2cf3c:	andeq	sp, r2, ip, ror #2
   2cf40:	andeq	ip, r2, r8, asr #31
   2cf44:	ldrdeq	ip, [r2], -r4
   2cf48:	andeq	ip, r2, r0, ror #31
   2cf4c:	andeq	ip, r2, ip, ror #31
   2cf50:	strdeq	ip, [r2], -r8
   2cf54:	andeq	sp, r2, r4
   2cf58:	andeq	sp, r2, r0, lsl r0
   2cf5c:	andeq	sp, r2, ip, lsl r0
   2cf60:	andeq	sp, r2, r8, lsr #32
   2cf64:	andeq	sp, r2, r4, lsr r0
   2cf68:	andeq	sp, r2, r0, asr #32
   2cf6c:	andeq	sp, r2, ip, asr #32
   2cf70:	andeq	sp, r2, r8, asr r0
   2cf74:	andeq	sp, r2, r4, rrx
   2cf78:	andeq	sp, r2, r0, ror r0
   2cf7c:	andeq	sp, r2, ip, ror r0
   2cf80:	andeq	sp, r2, r8, lsl #1
   2cf84:	muleq	r2, r4, r0
   2cf88:	andeq	sp, r2, r0, lsr #1
   2cf8c:	andeq	sp, r2, ip, lsr #1
   2cf90:	strheq	sp, [r2], -r8
   2cf94:	andeq	sp, r2, r4, asr #1
   2cf98:	ldrdeq	sp, [r2], -r0
   2cf9c:	ldrdeq	sp, [r2], -ip
   2cfa0:	andeq	sp, r2, r8, ror #1
   2cfa4:	strdeq	sp, [r2], -r4
   2cfa8:	andeq	sp, r2, r0, lsl #2
   2cfac:	andeq	sp, r2, ip, lsl #2
   2cfb0:	andeq	sp, r2, r8, lsl r1
   2cfb4:	andeq	sp, r2, r4, lsr #2
   2cfb8:	andeq	sp, r2, r0, lsr r1
   2cfbc:	andeq	sp, r2, ip, lsr r1
   2cfc0:	andeq	sp, r2, r8, asr #2
   2cfc4:	andeq	sp, r2, r4, asr r1
   2cfc8:	movw	r0, #17188	; 0x4324
   2cfcc:	movt	r0, #4
   2cfd0:	bx	lr
   2cfd4:	movw	r0, #16552	; 0x40a8
   2cfd8:	movt	r0, #4
   2cfdc:	bx	lr
   2cfe0:	movw	r0, #16568	; 0x40b8
   2cfe4:	movt	r0, #4
   2cfe8:	bx	lr
   2cfec:	movw	r0, #16584	; 0x40c8
   2cff0:	movt	r0, #4
   2cff4:	bx	lr
   2cff8:	movw	r0, #16600	; 0x40d8
   2cffc:	movt	r0, #4
   2d000:	bx	lr
   2d004:	movw	r0, #16624	; 0x40f0
   2d008:	movt	r0, #4
   2d00c:	bx	lr
   2d010:	movw	r0, #13816	; 0x35f8
   2d014:	movt	r0, #4
   2d018:	bx	lr
   2d01c:	movw	r0, #16640	; 0x4100
   2d020:	movt	r0, #4
   2d024:	bx	lr
   2d028:	movw	r0, #16652	; 0x410c
   2d02c:	movt	r0, #4
   2d030:	bx	lr
   2d034:	movw	r0, #16672	; 0x4120
   2d038:	movt	r0, #4
   2d03c:	bx	lr
   2d040:	movw	r0, #16692	; 0x4134
   2d044:	movt	r0, #4
   2d048:	bx	lr
   2d04c:	movw	r0, #16708	; 0x4144
   2d050:	movt	r0, #4
   2d054:	bx	lr
   2d058:	movw	r0, #16728	; 0x4158
   2d05c:	movt	r0, #4
   2d060:	bx	lr
   2d064:	movw	r0, #16744	; 0x4168
   2d068:	movt	r0, #4
   2d06c:	bx	lr
   2d070:	movw	r0, #16772	; 0x4184
   2d074:	movt	r0, #4
   2d078:	bx	lr
   2d07c:	movw	r0, #16792	; 0x4198
   2d080:	movt	r0, #4
   2d084:	bx	lr
   2d088:	movw	r0, #16808	; 0x41a8
   2d08c:	movt	r0, #4
   2d090:	bx	lr
   2d094:	movw	r0, #16828	; 0x41bc
   2d098:	movt	r0, #4
   2d09c:	bx	lr
   2d0a0:	movw	r0, #16844	; 0x41cc
   2d0a4:	movt	r0, #4
   2d0a8:	bx	lr
   2d0ac:	movw	r0, #16860	; 0x41dc
   2d0b0:	movt	r0, #4
   2d0b4:	bx	lr
   2d0b8:	movw	r0, #16880	; 0x41f0
   2d0bc:	movt	r0, #4
   2d0c0:	bx	lr
   2d0c4:	movw	r0, #16896	; 0x4200
   2d0c8:	movt	r0, #4
   2d0cc:	bx	lr
   2d0d0:	movw	r0, #16912	; 0x4210
   2d0d4:	movt	r0, #4
   2d0d8:	bx	lr
   2d0dc:	movw	r0, #16948	; 0x4234
   2d0e0:	movt	r0, #4
   2d0e4:	bx	lr
   2d0e8:	movw	r0, #16968	; 0x4248
   2d0ec:	movt	r0, #4
   2d0f0:	bx	lr
   2d0f4:	movw	r0, #17000	; 0x4268
   2d0f8:	movt	r0, #4
   2d0fc:	bx	lr
   2d100:	movw	r0, #17032	; 0x4288
   2d104:	movt	r0, #4
   2d108:	bx	lr
   2d10c:	movw	r0, #17060	; 0x42a4
   2d110:	movt	r0, #4
   2d114:	bx	lr
   2d118:	movw	r0, #12932	; 0x3284
   2d11c:	movt	r0, #4
   2d120:	bx	lr
   2d124:	movw	r0, #17088	; 0x42c0
   2d128:	movt	r0, #4
   2d12c:	bx	lr
   2d130:	movw	r0, #17120	; 0x42e0
   2d134:	movt	r0, #4
   2d138:	bx	lr
   2d13c:	movw	r0, #17144	; 0x42f8
   2d140:	movt	r0, #4
   2d144:	bx	lr
   2d148:	movw	r0, #17172	; 0x4314
   2d14c:	movt	r0, #4
   2d150:	bx	lr
   2d154:	movw	r0, #14000	; 0x36b0
   2d158:	movt	r0, #4
   2d15c:	bx	lr
   2d160:	movw	r0, #12872	; 0x3248
   2d164:	movt	r0, #4
   2d168:	bx	lr
   2d16c:	movw	r0, #12880	; 0x3250
   2d170:	movt	r0, #4
   2d174:	bx	lr

0002d178 <flatcc_json_parser_set_error@@Base>:
   2d178:	ldr	ip, [r0, #24]
   2d17c:	cmp	ip, #0
   2d180:	bne	2d19c <flatcc_json_parser_set_error@@Base+0x24>
   2d184:	str	r3, [r0, #24]
   2d188:	ldr	r3, [r0, #4]
   2d18c:	sub	r3, r1, r3
   2d190:	add	r3, r3, #1
   2d194:	str	r3, [r0, #20]
   2d198:	str	r1, [r0, #36]	; 0x24
   2d19c:	mov	r0, r2
   2d1a0:	bx	lr

0002d1a4 <flatcc_json_parser_string_part@@Base>:
   2d1a4:	str	r4, [sp, #-8]!
   2d1a8:	str	lr, [sp, #4]
   2d1ac:	cmp	r1, r2
   2d1b0:	beq	2d244 <flatcc_json_parser_string_part@@Base+0xa0>
   2d1b4:	ldrb	ip, [r1]
   2d1b8:	cmp	ip, #34	; 0x22
   2d1bc:	cmpne	ip, #31
   2d1c0:	movhi	r3, #1
   2d1c4:	movls	r3, #0
   2d1c8:	cmp	ip, #92	; 0x5c
   2d1cc:	moveq	r3, #0
   2d1d0:	andne	r3, r3, #1
   2d1d4:	cmp	r3, #0
   2d1d8:	beq	2d218 <flatcc_json_parser_string_part@@Base+0x74>
   2d1dc:	add	r3, r1, #1
   2d1e0:	mov	r4, r2
   2d1e4:	mov	r1, r3
   2d1e8:	cmp	r3, r4
   2d1ec:	beq	2d248 <flatcc_json_parser_string_part@@Base+0xa4>
   2d1f0:	ldrb	lr, [r3], #1
   2d1f4:	cmp	lr, #34	; 0x22
   2d1f8:	cmpne	lr, #31
   2d1fc:	movhi	ip, #1
   2d200:	movls	ip, #0
   2d204:	cmp	lr, #92	; 0x5c
   2d208:	moveq	ip, #0
   2d20c:	andne	ip, ip, #1
   2d210:	cmp	ip, #0
   2d214:	bne	2d1e4 <flatcc_json_parser_string_part@@Base+0x40>
   2d218:	ldrb	r3, [r1]
   2d21c:	cmp	r3, #31
   2d220:	bls	2d234 <flatcc_json_parser_string_part@@Base+0x90>
   2d224:	mov	r0, r1
   2d228:	ldr	r4, [sp]
   2d22c:	add	sp, sp, #4
   2d230:	pop	{pc}		; (ldr pc, [sp], #4)
   2d234:	mov	r3, #17
   2d238:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d23c:	mov	r1, r0
   2d240:	b	2d224 <flatcc_json_parser_string_part@@Base+0x80>
   2d244:	mov	r1, r2
   2d248:	mov	r3, #20
   2d24c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d250:	mov	r1, r0
   2d254:	b	2d224 <flatcc_json_parser_string_part@@Base+0x80>

0002d258 <flatcc_json_parser_space_ext@@Base>:
   2d258:	str	r4, [sp, #-8]!
   2d25c:	str	lr, [sp, #4]
   2d260:	mov	lr, r2
   2d264:	mov	r4, #0
   2d268:	cmp	r1, r2
   2d26c:	beq	2d398 <flatcc_json_parser_space_ext@@Base+0x140>
   2d270:	ldrb	r3, [r1]
   2d274:	cmp	r3, #32
   2d278:	bne	2d29c <flatcc_json_parser_space_ext@@Base+0x44>
   2d27c:	add	r3, r1, #1
   2d280:	mov	r1, r3
   2d284:	cmp	r3, lr
   2d288:	beq	2d39c <flatcc_json_parser_space_ext@@Base+0x144>
   2d28c:	add	r3, r3, #1
   2d290:	ldrb	ip, [r1]
   2d294:	cmp	ip, #32
   2d298:	beq	2d280 <flatcc_json_parser_space_ext@@Base+0x28>
   2d29c:	ldrb	r3, [r1]
   2d2a0:	cmp	r3, #32
   2d2a4:	bls	2d2fc <flatcc_json_parser_space_ext@@Base+0xa4>
   2d2a8:	mov	r0, r1
   2d2ac:	b	2d37c <flatcc_json_parser_space_ext@@Base+0x124>
   2d2b0:	sub	r3, r2, r1
   2d2b4:	cmp	r3, #1
   2d2b8:	movle	r3, r4
   2d2bc:	ble	2d2d0 <flatcc_json_parser_space_ext@@Base+0x78>
   2d2c0:	ldrb	r3, [r1, #1]
   2d2c4:	cmp	r3, #10
   2d2c8:	movne	r3, #0
   2d2cc:	moveq	r3, #1
   2d2d0:	add	r1, r1, r3
   2d2d4:	ldr	r3, [r0, #16]
   2d2d8:	add	r3, r3, #1
   2d2dc:	str	r3, [r0, #16]
   2d2e0:	add	r1, r1, #1
   2d2e4:	str	r1, [r0, #4]
   2d2e8:	cmp	r2, r1
   2d2ec:	beq	2d390 <flatcc_json_parser_space_ext@@Base+0x138>
   2d2f0:	ldrb	r3, [r1]
   2d2f4:	cmp	r3, #32
   2d2f8:	bhi	2d388 <flatcc_json_parser_space_ext@@Base+0x130>
   2d2fc:	sub	r3, r3, #9
   2d300:	cmp	r3, #23
   2d304:	ldrls	pc, [pc, r3, lsl #2]
   2d308:	b	2d374 <flatcc_json_parser_space_ext@@Base+0x11c>
   2d30c:	andeq	sp, r2, ip, ror #6
   2d310:	ldrdeq	sp, [r2], -r4
   2d314:	andeq	sp, r2, r4, ror r3
   2d318:	andeq	sp, r2, r4, ror r3
   2d31c:			; <UNDEFINED> instruction: 0x0002d2b0
   2d320:	andeq	sp, r2, r4, ror r3
   2d324:	andeq	sp, r2, r4, ror r3
   2d328:	andeq	sp, r2, r4, ror r3
   2d32c:	andeq	sp, r2, r4, ror r3
   2d330:	andeq	sp, r2, r4, ror r3
   2d334:	andeq	sp, r2, r4, ror r3
   2d338:	andeq	sp, r2, r4, ror r3
   2d33c:	andeq	sp, r2, r4, ror r3
   2d340:	andeq	sp, r2, r4, ror r3
   2d344:	andeq	sp, r2, r4, ror r3
   2d348:	andeq	sp, r2, r4, ror r3
   2d34c:	andeq	sp, r2, r4, ror r3
   2d350:	andeq	sp, r2, r4, ror r3
   2d354:	andeq	sp, r2, r4, ror r3
   2d358:	andeq	sp, r2, r4, ror r3
   2d35c:	andeq	sp, r2, r4, ror r3
   2d360:	andeq	sp, r2, r4, ror r3
   2d364:	andeq	sp, r2, r4, ror r3
   2d368:	andeq	sp, r2, r8, ror #4
   2d36c:	add	r1, r1, #1
   2d370:	b	2d2e8 <flatcc_json_parser_space_ext@@Base+0x90>
   2d374:	mov	r3, #5
   2d378:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d37c:	ldr	r4, [sp]
   2d380:	add	sp, sp, #4
   2d384:	pop	{pc}		; (ldr pc, [sp], #4)
   2d388:	mov	r0, r1
   2d38c:	b	2d37c <flatcc_json_parser_space_ext@@Base+0x124>
   2d390:	mov	r0, r1
   2d394:	b	2d37c <flatcc_json_parser_space_ext@@Base+0x124>
   2d398:	mov	r1, r2
   2d39c:	mov	r0, r1
   2d3a0:	b	2d37c <flatcc_json_parser_space_ext@@Base+0x124>
   2d3a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d3a8:	strd	r6, [sp, #8]
   2d3ac:	strd	r8, [sp, #16]
   2d3b0:	strd	sl, [sp, #24]
   2d3b4:	str	lr, [sp, #32]
   2d3b8:	sub	sp, sp, #36	; 0x24
   2d3bc:	mov	r8, r0
   2d3c0:	mov	r7, r2
   2d3c4:	str	r3, [sp, #8]
   2d3c8:	ldr	fp, [sp, #72]	; 0x48
   2d3cc:	mov	r3, #0
   2d3d0:	strb	r3, [fp]
   2d3d4:	cmp	r1, r2
   2d3d8:	beq	2d568 <flatcc_json_parser_space_ext@@Base+0x310>
   2d3dc:	ldrb	r3, [r1]
   2d3e0:	cmp	r3, #34	; 0x22
   2d3e4:	addeq	r4, r1, #1
   2d3e8:	moveq	r3, #0
   2d3ec:	streq	r3, [r0, #12]
   2d3f0:	beq	2d434 <flatcc_json_parser_space_ext@@Base+0x1dc>
   2d3f4:	cmp	r3, #46	; 0x2e
   2d3f8:	movne	r3, #1
   2d3fc:	strne	r3, [r0, #12]
   2d400:	movne	r4, r1
   2d404:	beq	2d41c <flatcc_json_parser_space_ext@@Base+0x1c4>
   2d408:	mov	r3, #0
   2d40c:	str	r3, [sp, #12]
   2d410:	add	sl, sp, #16
   2d414:	add	r9, sp, #24
   2d418:	b	2d4c8 <flatcc_json_parser_space_ext@@Base+0x270>
   2d41c:	mov	r3, #5
   2d420:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d424:	mov	r4, r0
   2d428:	ldr	r3, [r8, #12]
   2d42c:	cmp	r3, #0
   2d430:	bne	2d464 <flatcc_json_parser_space_ext@@Base+0x20c>
   2d434:	sub	r3, r7, r4
   2d438:	cmp	r3, #1
   2d43c:	ble	2d450 <flatcc_json_parser_space_ext@@Base+0x1f8>
   2d440:	ldrb	r3, [r4]
   2d444:	cmp	r3, #32
   2d448:	bhi	2d464 <flatcc_json_parser_space_ext@@Base+0x20c>
   2d44c:	beq	2d470 <flatcc_json_parser_space_ext@@Base+0x218>
   2d450:	mov	r2, r7
   2d454:	mov	r1, r4
   2d458:	mov	r0, r8
   2d45c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2d460:	mov	r4, r0
   2d464:	cmp	r7, r4
   2d468:	bne	2d408 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2d46c:	b	2d584 <flatcc_json_parser_space_ext@@Base+0x32c>
   2d470:	ldrb	r3, [r4, #1]
   2d474:	cmp	r3, #32
   2d478:	addhi	r4, r4, #1
   2d47c:	bls	2d450 <flatcc_json_parser_space_ext@@Base+0x1f8>
   2d480:	b	2d464 <flatcc_json_parser_space_ext@@Base+0x20c>
   2d484:	mov	r4, r0
   2d488:	ldr	r3, [sp, #20]
   2d48c:	cmp	r3, #0
   2d490:	bne	2d52c <flatcc_json_parser_space_ext@@Base+0x2d4>
   2d494:	ldrd	r2, [sp, #24]
   2d498:	cmp	r3, #0
   2d49c:	cmpeq	r2, #255	; 0xff
   2d4a0:	uxtbls	r3, r2
   2d4a4:	strls	r3, [sp, #12]
   2d4a8:	bhi	2d550 <flatcc_json_parser_space_ext@@Base+0x2f8>
   2d4ac:	ldrb	r3, [fp]
   2d4b0:	ldr	r2, [sp, #12]
   2d4b4:	add	r3, r2, r3
   2d4b8:	strb	r3, [fp]
   2d4bc:	ldr	r3, [sp, #16]
   2d4c0:	cmp	r3, #0
   2d4c4:	beq	2d584 <flatcc_json_parser_space_ext@@Base+0x32c>
   2d4c8:	ldr	r6, [sp, #8]
   2d4cc:	mov	r5, r4
   2d4d0:	str	sl, [sp, #4]
   2d4d4:	str	r9, [sp]
   2d4d8:	ldr	r4, [r6]
   2d4dc:	add	r3, sp, #20
   2d4e0:	mov	r2, r7
   2d4e4:	mov	r1, r5
   2d4e8:	mov	r0, r8
   2d4ec:	blx	r4
   2d4f0:	cmp	r7, r0
   2d4f4:	beq	2d580 <flatcc_json_parser_space_ext@@Base+0x328>
   2d4f8:	cmp	r5, r0
   2d4fc:	bne	2d484 <flatcc_json_parser_space_ext@@Base+0x22c>
   2d500:	mov	r5, r0
   2d504:	ldr	r3, [r6, #4]!
   2d508:	cmp	r3, #0
   2d50c:	bne	2d4d0 <flatcc_json_parser_space_ext@@Base+0x278>
   2d510:	mov	r3, #23
   2d514:	mov	r2, r7
   2d518:	mov	r1, r0
   2d51c:	mov	r0, r8
   2d520:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d524:	mov	r4, r0
   2d528:	b	2d584 <flatcc_json_parser_space_ext@@Base+0x32c>
   2d52c:	mov	r3, #8
   2d530:	mov	r2, r7
   2d534:	mov	r1, r0
   2d538:	mov	r0, r8
   2d53c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d540:	cmp	r7, r0
   2d544:	bne	2d4ac <flatcc_json_parser_space_ext@@Base+0x254>
   2d548:	mov	r4, r0
   2d54c:	b	2d584 <flatcc_json_parser_space_ext@@Base+0x32c>
   2d550:	mov	r3, #7
   2d554:	mov	r2, r7
   2d558:	mov	r1, r0
   2d55c:	mov	r0, r8
   2d560:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d564:	b	2d540 <flatcc_json_parser_space_ext@@Base+0x2e8>
   2d568:	ldr	r3, [r0, #12]
   2d56c:	cmp	r3, #0
   2d570:	movne	r4, r2
   2d574:	bne	2d584 <flatcc_json_parser_space_ext@@Base+0x32c>
   2d578:	mov	r4, r7
   2d57c:	b	2d450 <flatcc_json_parser_space_ext@@Base+0x1f8>
   2d580:	mov	r4, r0
   2d584:	mov	r0, r4
   2d588:	add	sp, sp, #36	; 0x24
   2d58c:	ldrd	r4, [sp]
   2d590:	ldrd	r6, [sp, #8]
   2d594:	ldrd	r8, [sp, #16]
   2d598:	ldrd	sl, [sp, #24]
   2d59c:	add	sp, sp, #32
   2d5a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d5a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d5a8:	strd	r6, [sp, #8]
   2d5ac:	strd	r8, [sp, #16]
   2d5b0:	strd	sl, [sp, #24]
   2d5b4:	str	lr, [sp, #32]
   2d5b8:	sub	sp, sp, #28
   2d5bc:	mov	r6, r0
   2d5c0:	mov	r4, r1
   2d5c4:	mov	r5, r2
   2d5c8:	str	r3, [sp, #12]
   2d5cc:	ldr	r9, [sp, #64]	; 0x40
   2d5d0:	ldr	sl, [sp, #72]	; 0x48
   2d5d4:	mov	r3, #0
   2d5d8:	str	r3, [sp, #20]
   2d5dc:	ldr	r0, [r0]
   2d5e0:	bl	2798c <flatcc_builder_start_offset_vector@@Base>
   2d5e4:	cmp	r0, #0
   2d5e8:	beq	2d624 <flatcc_json_parser_space_ext@@Base+0x3cc>
   2d5ec:	mov	r3, #33	; 0x21
   2d5f0:	mov	r2, r5
   2d5f4:	mov	r1, r4
   2d5f8:	mov	r0, r6
   2d5fc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d600:	mov	r4, r0
   2d604:	mov	r0, r4
   2d608:	add	sp, sp, #28
   2d60c:	ldrd	r4, [sp]
   2d610:	ldrd	r6, [sp, #8]
   2d614:	ldrd	r8, [sp, #16]
   2d618:	ldrd	sl, [sp, #24]
   2d61c:	add	sp, sp, #32
   2d620:	pop	{pc}		; (ldr pc, [sp], #4)
   2d624:	cmp	r4, r5
   2d628:	beq	2d638 <flatcc_json_parser_space_ext@@Base+0x3e0>
   2d62c:	ldrb	r3, [r4]
   2d630:	cmp	r3, #91	; 0x5b
   2d634:	beq	2d658 <flatcc_json_parser_space_ext@@Base+0x400>
   2d638:	mov	r3, #22
   2d63c:	mov	r2, r5
   2d640:	mov	r1, r4
   2d644:	mov	r0, r6
   2d648:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d64c:	mov	r4, r0
   2d650:	mov	r7, #0
   2d654:	b	2d898 <flatcc_json_parser_space_ext@@Base+0x640>
   2d658:	add	r8, r4, #1
   2d65c:	sub	r3, r5, r8
   2d660:	cmp	r3, #1
   2d664:	ble	2d678 <flatcc_json_parser_space_ext@@Base+0x420>
   2d668:	ldrb	r3, [r4, #1]
   2d66c:	cmp	r3, #32
   2d670:	bhi	2d68c <flatcc_json_parser_space_ext@@Base+0x434>
   2d674:	beq	2d6b4 <flatcc_json_parser_space_ext@@Base+0x45c>
   2d678:	mov	r2, r5
   2d67c:	mov	r1, r8
   2d680:	mov	r0, r6
   2d684:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2d688:	mov	r8, r0
   2d68c:	cmp	r5, r8
   2d690:	beq	2d6a0 <flatcc_json_parser_space_ext@@Base+0x448>
   2d694:	ldrb	r3, [r8]
   2d698:	cmp	r3, #93	; 0x5d
   2d69c:	beq	2d6c8 <flatcc_json_parser_space_ext@@Base+0x470>
   2d6a0:	cmp	r9, #0
   2d6a4:	beq	2d714 <flatcc_json_parser_space_ext@@Base+0x4bc>
   2d6a8:	mov	r7, #0
   2d6ac:	add	fp, sp, #20
   2d6b0:	b	2d7e4 <flatcc_json_parser_space_ext@@Base+0x58c>
   2d6b4:	ldrb	r3, [r4, #2]
   2d6b8:	cmp	r3, #32
   2d6bc:	addhi	r8, r4, #2
   2d6c0:	bls	2d678 <flatcc_json_parser_space_ext@@Base+0x420>
   2d6c4:	b	2d68c <flatcc_json_parser_space_ext@@Base+0x434>
   2d6c8:	add	r4, r8, #1
   2d6cc:	sub	r3, r5, r4
   2d6d0:	cmp	r3, #1
   2d6d4:	ble	2d6e8 <flatcc_json_parser_space_ext@@Base+0x490>
   2d6d8:	ldrb	r3, [r8, #1]
   2d6dc:	cmp	r3, #32
   2d6e0:	bhi	2d650 <flatcc_json_parser_space_ext@@Base+0x3f8>
   2d6e4:	beq	2d700 <flatcc_json_parser_space_ext@@Base+0x4a8>
   2d6e8:	mov	r2, r5
   2d6ec:	mov	r1, r4
   2d6f0:	mov	r0, r6
   2d6f4:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2d6f8:	mov	r4, r0
   2d6fc:	b	2d650 <flatcc_json_parser_space_ext@@Base+0x3f8>
   2d700:	ldrb	r3, [r8, #2]
   2d704:	cmp	r3, #32
   2d708:	addhi	r4, r8, #2
   2d70c:	bls	2d6e8 <flatcc_json_parser_space_ext@@Base+0x490>
   2d710:	b	2d650 <flatcc_json_parser_space_ext@@Base+0x3f8>
   2d714:	mov	r3, #30
   2d718:	mov	r2, r5
   2d71c:	mov	r1, r8
   2d720:	mov	r0, r6
   2d724:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d728:	mov	r4, r0
   2d72c:	b	2d604 <flatcc_json_parser_space_ext@@Base+0x3ac>
   2d730:	ldrb	r3, [r4, #1]
   2d734:	cmp	r3, #32
   2d738:	addhi	r4, r4, #1
   2d73c:	bls	2d84c <flatcc_json_parser_space_ext@@Base+0x5f4>
   2d740:	b	2d860 <flatcc_json_parser_space_ext@@Base+0x608>
   2d744:	add	r1, r4, #1
   2d748:	sub	r3, r5, r1
   2d74c:	cmp	r3, #1
   2d750:	ble	2d768 <flatcc_json_parser_space_ext@@Base+0x510>
   2d754:	ldrb	r3, [r4, #1]
   2d758:	cmp	r3, #32
   2d75c:	movhi	r4, r1
   2d760:	bhi	2d894 <flatcc_json_parser_space_ext@@Base+0x63c>
   2d764:	beq	2d77c <flatcc_json_parser_space_ext@@Base+0x524>
   2d768:	mov	r2, r5
   2d76c:	mov	r0, r6
   2d770:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2d774:	mov	r4, r0
   2d778:	b	2d894 <flatcc_json_parser_space_ext@@Base+0x63c>
   2d77c:	ldrb	r3, [r4, #2]
   2d780:	cmp	r3, #32
   2d784:	addhi	r4, r4, #2
   2d788:	bls	2d768 <flatcc_json_parser_space_ext@@Base+0x510>
   2d78c:	b	2d894 <flatcc_json_parser_space_ext@@Base+0x63c>
   2d790:	add	r8, r4, #1
   2d794:	sub	r3, r5, r8
   2d798:	cmp	r3, #1
   2d79c:	ble	2d7b0 <flatcc_json_parser_space_ext@@Base+0x558>
   2d7a0:	ldrb	r3, [r4, #1]
   2d7a4:	cmp	r3, #32
   2d7a8:	bhi	2d7c4 <flatcc_json_parser_space_ext@@Base+0x56c>
   2d7ac:	beq	2d8bc <flatcc_json_parser_space_ext@@Base+0x664>
   2d7b0:	mov	r2, r5
   2d7b4:	mov	r1, r8
   2d7b8:	mov	r0, r6
   2d7bc:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2d7c0:	mov	r8, r0
   2d7c4:	cmp	r5, r8
   2d7c8:	beq	2d8d0 <flatcc_json_parser_space_ext@@Base+0x678>
   2d7cc:	ldrb	r3, [r8]
   2d7d0:	cmp	r3, #93	; 0x5d
   2d7d4:	beq	2d8ec <flatcc_json_parser_space_ext@@Base+0x694>
   2d7d8:	add	r7, r7, #1
   2d7dc:	cmp	r9, r7
   2d7e0:	beq	2d714 <flatcc_json_parser_space_ext@@Base+0x4bc>
   2d7e4:	ldr	r1, [sp, #12]
   2d7e8:	ldr	r0, [r6]
   2d7ec:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2d7f0:	ldrb	r3, [r0, r7]
   2d7f4:	str	fp, [sp]
   2d7f8:	mov	r2, r5
   2d7fc:	mov	r1, r8
   2d800:	mov	r0, r6
   2d804:	blx	sl
   2d808:	mov	r4, r0
   2d80c:	cmp	r5, r0
   2d810:	beq	2d604 <flatcc_json_parser_space_ext@@Base+0x3ac>
   2d814:	mov	r1, #1
   2d818:	ldr	r0, [r6]
   2d81c:	bl	27290 <flatcc_builder_extend_offset_vector@@Base>
   2d820:	cmp	r0, #0
   2d824:	beq	2d5ec <flatcc_json_parser_space_ext@@Base+0x394>
   2d828:	ldr	r3, [sp, #20]
   2d82c:	str	r3, [r0]
   2d830:	sub	r3, r5, r4
   2d834:	cmp	r3, #1
   2d838:	ble	2d84c <flatcc_json_parser_space_ext@@Base+0x5f4>
   2d83c:	ldrb	r3, [r4]
   2d840:	cmp	r3, #32
   2d844:	bhi	2d868 <flatcc_json_parser_space_ext@@Base+0x610>
   2d848:	beq	2d730 <flatcc_json_parser_space_ext@@Base+0x4d8>
   2d84c:	mov	r2, r5
   2d850:	mov	r1, r4
   2d854:	mov	r0, r6
   2d858:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2d85c:	mov	r4, r0
   2d860:	cmp	r5, r4
   2d864:	beq	2d894 <flatcc_json_parser_space_ext@@Base+0x63c>
   2d868:	ldrb	r3, [r4]
   2d86c:	cmp	r3, #44	; 0x2c
   2d870:	beq	2d790 <flatcc_json_parser_space_ext@@Base+0x538>
   2d874:	cmp	r3, #93	; 0x5d
   2d878:	beq	2d744 <flatcc_json_parser_space_ext@@Base+0x4ec>
   2d87c:	mov	r3, #9
   2d880:	mov	r2, r5
   2d884:	mov	r1, r4
   2d888:	mov	r0, r6
   2d88c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d890:	mov	r4, r0
   2d894:	add	r7, r7, #1
   2d898:	cmp	r9, r7
   2d89c:	beq	2d938 <flatcc_json_parser_space_ext@@Base+0x6e0>
   2d8a0:	mov	r3, #30
   2d8a4:	mov	r2, r5
   2d8a8:	mov	r1, r4
   2d8ac:	mov	r0, r6
   2d8b0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d8b4:	mov	r4, r0
   2d8b8:	b	2d604 <flatcc_json_parser_space_ext@@Base+0x3ac>
   2d8bc:	ldrb	r3, [r4, #2]
   2d8c0:	cmp	r3, #32
   2d8c4:	addhi	r8, r4, #2
   2d8c8:	bls	2d7b0 <flatcc_json_parser_space_ext@@Base+0x558>
   2d8cc:	b	2d7c4 <flatcc_json_parser_space_ext@@Base+0x56c>
   2d8d0:	mov	r3, #9
   2d8d4:	mov	r2, r5
   2d8d8:	mov	r1, r8
   2d8dc:	mov	r0, r6
   2d8e0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d8e4:	mov	r4, r0
   2d8e8:	b	2d894 <flatcc_json_parser_space_ext@@Base+0x63c>
   2d8ec:	add	r4, r8, #1
   2d8f0:	sub	r3, r5, r4
   2d8f4:	cmp	r3, #1
   2d8f8:	ble	2d90c <flatcc_json_parser_space_ext@@Base+0x6b4>
   2d8fc:	ldrb	r3, [r8, #1]
   2d900:	cmp	r3, #32
   2d904:	bhi	2d894 <flatcc_json_parser_space_ext@@Base+0x63c>
   2d908:	beq	2d924 <flatcc_json_parser_space_ext@@Base+0x6cc>
   2d90c:	mov	r2, r5
   2d910:	mov	r1, r4
   2d914:	mov	r0, r6
   2d918:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2d91c:	mov	r4, r0
   2d920:	b	2d894 <flatcc_json_parser_space_ext@@Base+0x63c>
   2d924:	ldrb	r3, [r8, #2]
   2d928:	cmp	r3, #32
   2d92c:	addhi	r4, r8, #2
   2d930:	bls	2d90c <flatcc_json_parser_space_ext@@Base+0x6b4>
   2d934:	b	2d894 <flatcc_json_parser_space_ext@@Base+0x63c>
   2d938:	ldr	r1, [sp, #12]
   2d93c:	ldr	r0, [r6]
   2d940:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2d944:	mov	r1, r0
   2d948:	ldr	r0, [r6]
   2d94c:	bl	28c78 <flatcc_builder_end_offset_vector_for_unions@@Base>
   2d950:	str	r0, [sp, #20]
   2d954:	cmp	r0, #0
   2d958:	beq	2d5ec <flatcc_json_parser_space_ext@@Base+0x394>
   2d95c:	ldrh	r1, [sp, #68]	; 0x44
   2d960:	ldr	r0, [r6]
   2d964:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   2d968:	cmp	r0, #0
   2d96c:	beq	2d5ec <flatcc_json_parser_space_ext@@Base+0x394>
   2d970:	ldr	r3, [sp, #20]
   2d974:	str	r3, [r0]
   2d978:	b	2d604 <flatcc_json_parser_space_ext@@Base+0x3ac>

0002d97c <flatcc_json_parser_string_escape@@Base>:
   2d97c:	str	r4, [sp, #-8]!
   2d980:	str	lr, [sp, #4]
   2d984:	sub	lr, r2, r1
   2d988:	cmp	lr, #1
   2d98c:	ble	2d99c <flatcc_json_parser_string_escape@@Base+0x20>
   2d990:	ldrb	ip, [r1]
   2d994:	cmp	ip, #92	; 0x5c
   2d998:	beq	2d9b8 <flatcc_json_parser_string_escape@@Base+0x3c>
   2d99c:	mov	ip, #0
   2d9a0:	strb	ip, [r3]
   2d9a4:	mov	r3, #18
   2d9a8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2d9ac:	ldr	r4, [sp]
   2d9b0:	add	sp, sp, #4
   2d9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d9b8:	ldrb	ip, [r1, #1]
   2d9bc:	sub	ip, ip, #34	; 0x22
   2d9c0:	cmp	ip, #86	; 0x56
   2d9c4:	ldrls	pc, [pc, ip, lsl #2]
   2d9c8:	b	2deb8 <flatcc_json_parser_string_escape@@Base+0x53c>
   2d9cc:	andeq	sp, r2, r0, ror lr
   2d9d0:			; <UNDEFINED> instruction: 0x0002deb8
   2d9d4:			; <UNDEFINED> instruction: 0x0002deb8
   2d9d8:			; <UNDEFINED> instruction: 0x0002deb8
   2d9dc:			; <UNDEFINED> instruction: 0x0002deb8
   2d9e0:			; <UNDEFINED> instruction: 0x0002deb8
   2d9e4:			; <UNDEFINED> instruction: 0x0002deb8
   2d9e8:			; <UNDEFINED> instruction: 0x0002deb8
   2d9ec:			; <UNDEFINED> instruction: 0x0002deb8
   2d9f0:			; <UNDEFINED> instruction: 0x0002deb8
   2d9f4:			; <UNDEFINED> instruction: 0x0002deb8
   2d9f8:			; <UNDEFINED> instruction: 0x0002deb8
   2d9fc:			; <UNDEFINED> instruction: 0x0002deb8
   2da00:	andeq	sp, r2, r0, lsr #29
   2da04:			; <UNDEFINED> instruction: 0x0002deb8
   2da08:			; <UNDEFINED> instruction: 0x0002deb8
   2da0c:			; <UNDEFINED> instruction: 0x0002deb8
   2da10:			; <UNDEFINED> instruction: 0x0002deb8
   2da14:			; <UNDEFINED> instruction: 0x0002deb8
   2da18:			; <UNDEFINED> instruction: 0x0002deb8
   2da1c:			; <UNDEFINED> instruction: 0x0002deb8
   2da20:			; <UNDEFINED> instruction: 0x0002deb8
   2da24:			; <UNDEFINED> instruction: 0x0002deb8
   2da28:			; <UNDEFINED> instruction: 0x0002deb8
   2da2c:			; <UNDEFINED> instruction: 0x0002deb8
   2da30:			; <UNDEFINED> instruction: 0x0002deb8
   2da34:			; <UNDEFINED> instruction: 0x0002deb8
   2da38:			; <UNDEFINED> instruction: 0x0002deb8
   2da3c:			; <UNDEFINED> instruction: 0x0002deb8
   2da40:			; <UNDEFINED> instruction: 0x0002deb8
   2da44:			; <UNDEFINED> instruction: 0x0002deb8
   2da48:			; <UNDEFINED> instruction: 0x0002deb8
   2da4c:			; <UNDEFINED> instruction: 0x0002deb8
   2da50:			; <UNDEFINED> instruction: 0x0002deb8
   2da54:			; <UNDEFINED> instruction: 0x0002deb8
   2da58:			; <UNDEFINED> instruction: 0x0002deb8
   2da5c:			; <UNDEFINED> instruction: 0x0002deb8
   2da60:			; <UNDEFINED> instruction: 0x0002deb8
   2da64:			; <UNDEFINED> instruction: 0x0002deb8
   2da68:			; <UNDEFINED> instruction: 0x0002deb8
   2da6c:			; <UNDEFINED> instruction: 0x0002deb8
   2da70:			; <UNDEFINED> instruction: 0x0002deb8
   2da74:			; <UNDEFINED> instruction: 0x0002deb8
   2da78:			; <UNDEFINED> instruction: 0x0002deb8
   2da7c:			; <UNDEFINED> instruction: 0x0002deb8
   2da80:			; <UNDEFINED> instruction: 0x0002deb8
   2da84:			; <UNDEFINED> instruction: 0x0002deb8
   2da88:			; <UNDEFINED> instruction: 0x0002deb8
   2da8c:			; <UNDEFINED> instruction: 0x0002deb8
   2da90:			; <UNDEFINED> instruction: 0x0002deb8
   2da94:			; <UNDEFINED> instruction: 0x0002deb8
   2da98:			; <UNDEFINED> instruction: 0x0002deb8
   2da9c:			; <UNDEFINED> instruction: 0x0002deb8
   2daa0:			; <UNDEFINED> instruction: 0x0002deb8
   2daa4:			; <UNDEFINED> instruction: 0x0002deb8
   2daa8:			; <UNDEFINED> instruction: 0x0002deb8
   2daac:			; <UNDEFINED> instruction: 0x0002deb8
   2dab0:			; <UNDEFINED> instruction: 0x0002deb8
   2dab4:	andeq	sp, r2, r8, lsl #29
   2dab8:			; <UNDEFINED> instruction: 0x0002deb8
   2dabc:			; <UNDEFINED> instruction: 0x0002deb8
   2dac0:			; <UNDEFINED> instruction: 0x0002deb8
   2dac4:			; <UNDEFINED> instruction: 0x0002deb8
   2dac8:			; <UNDEFINED> instruction: 0x0002deb8
   2dacc:	andeq	sp, r2, r0, asr #28
   2dad0:			; <UNDEFINED> instruction: 0x0002deb8
   2dad4:			; <UNDEFINED> instruction: 0x0002deb8
   2dad8:			; <UNDEFINED> instruction: 0x0002deb8
   2dadc:	andeq	sp, r2, r8, asr lr
   2dae0:			; <UNDEFINED> instruction: 0x0002deb8
   2dae4:			; <UNDEFINED> instruction: 0x0002deb8
   2dae8:			; <UNDEFINED> instruction: 0x0002deb8
   2daec:			; <UNDEFINED> instruction: 0x0002deb8
   2daf0:			; <UNDEFINED> instruction: 0x0002deb8
   2daf4:			; <UNDEFINED> instruction: 0x0002deb8
   2daf8:			; <UNDEFINED> instruction: 0x0002deb8
   2dafc:	andeq	sp, r2, r0, lsl lr
   2db00:			; <UNDEFINED> instruction: 0x0002deb8
   2db04:			; <UNDEFINED> instruction: 0x0002deb8
   2db08:			; <UNDEFINED> instruction: 0x0002deb8
   2db0c:	andeq	sp, r2, r8, lsr #28
   2db10:			; <UNDEFINED> instruction: 0x0002deb8
   2db14:	strdeq	sp, [r2], -r8
   2db18:	strdeq	sp, [r2], -r4
   2db1c:			; <UNDEFINED> instruction: 0x0002deb8
   2db20:			; <UNDEFINED> instruction: 0x0002deb8
   2db24:	andeq	sp, r2, r8, lsr #22
   2db28:	mov	ip, #1
   2db2c:	strb	ip, [r3]
   2db30:	cmp	lr, #3
   2db34:	ble	2dbb8 <flatcc_json_parser_string_escape@@Base+0x23c>
   2db38:	ldrb	ip, [r1, #2]
   2db3c:	sub	lr, ip, #48	; 0x30
   2db40:	uxtb	lr, lr
   2db44:	cmp	lr, #9
   2db48:	lslls	ip, ip, #4
   2db4c:	andls	ip, ip, #240	; 0xf0
   2db50:	bls	2db74 <flatcc_json_parser_string_escape@@Base+0x1f8>
   2db54:	orr	ip, ip, #32
   2db58:	sub	lr, ip, #97	; 0x61
   2db5c:	uxtb	lr, lr
   2db60:	cmp	lr, #5
   2db64:	bhi	2dbcc <flatcc_json_parser_string_escape@@Base+0x250>
   2db68:	sub	ip, ip, #87	; 0x57
   2db6c:	lsl	ip, ip, #4
   2db70:	uxtb	ip, ip
   2db74:	ldrb	lr, [r1, #3]
   2db78:	sub	r4, lr, #48	; 0x30
   2db7c:	uxtb	r4, r4
   2db80:	cmp	r4, #9
   2db84:	orrls	ip, r4, ip
   2db88:	bls	2dbac <flatcc_json_parser_string_escape@@Base+0x230>
   2db8c:	orr	lr, lr, #32
   2db90:	sub	r4, lr, #97	; 0x61
   2db94:	uxtb	r4, r4
   2db98:	cmp	r4, #5
   2db9c:	bhi	2dbe0 <flatcc_json_parser_string_escape@@Base+0x264>
   2dba0:	sub	lr, lr, #87	; 0x57
   2dba4:	orr	ip, lr, ip
   2dba8:	uxtb	ip, ip
   2dbac:	strb	ip, [r3, #1]
   2dbb0:	add	r0, r1, #4
   2dbb4:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dbb8:	mov	ip, #0
   2dbbc:	strb	ip, [r3]
   2dbc0:	mov	r3, #18
   2dbc4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2dbc8:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dbcc:	mov	ip, #0
   2dbd0:	strb	ip, [r3]
   2dbd4:	mov	r3, #18
   2dbd8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2dbdc:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dbe0:	mov	ip, #0
   2dbe4:	strb	ip, [r3]
   2dbe8:	mov	r3, #18
   2dbec:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2dbf0:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dbf4:	cmp	lr, #5
   2dbf8:	ble	2dcbc <flatcc_json_parser_string_escape@@Base+0x340>
   2dbfc:	ldrb	ip, [r1, #2]
   2dc00:	sub	lr, ip, #48	; 0x30
   2dc04:	uxtb	lr, lr
   2dc08:	cmp	lr, #9
   2dc0c:	lslls	ip, ip, #12
   2dc10:	andls	lr, ip, #61440	; 0xf000
   2dc14:	bls	2dc38 <flatcc_json_parser_string_escape@@Base+0x2bc>
   2dc18:	orr	ip, ip, #32
   2dc1c:	sub	lr, ip, #97	; 0x61
   2dc20:	uxtb	lr, lr
   2dc24:	cmp	lr, #5
   2dc28:	bhi	2dcd0 <flatcc_json_parser_string_escape@@Base+0x354>
   2dc2c:	sub	ip, ip, #87	; 0x57
   2dc30:	lsl	ip, ip, #12
   2dc34:	and	lr, ip, #61440	; 0xf000
   2dc38:	ldrb	ip, [r1, #3]
   2dc3c:	sub	r4, ip, #48	; 0x30
   2dc40:	uxtb	r4, r4
   2dc44:	cmp	r4, #9
   2dc48:	bhi	2dce4 <flatcc_json_parser_string_escape@@Base+0x368>
   2dc4c:	sub	ip, ip, #48	; 0x30
   2dc50:	uxth	ip, ip
   2dc54:	orr	ip, lr, ip, lsl #8
   2dc58:	and	ip, ip, #65280	; 0xff00
   2dc5c:	ldrb	lr, [r1, #4]
   2dc60:	sub	r4, lr, #48	; 0x30
   2dc64:	uxtb	r4, r4
   2dc68:	cmp	r4, #9
   2dc6c:	bhi	2dd20 <flatcc_json_parser_string_escape@@Base+0x3a4>
   2dc70:	sub	lr, lr, #48	; 0x30
   2dc74:	uxth	lr, lr
   2dc78:	orr	ip, ip, lr, lsl #4
   2dc7c:	uxth	ip, ip
   2dc80:	ldrb	lr, [r1, #5]
   2dc84:	sub	r4, lr, #48	; 0x30
   2dc88:	uxtb	r4, r4
   2dc8c:	cmp	r4, #9
   2dc90:	bhi	2dd5c <flatcc_json_parser_string_escape@@Base+0x3e0>
   2dc94:	sub	r2, lr, #48	; 0x30
   2dc98:	orr	r2, ip, r2
   2dc9c:	uxth	r2, r2
   2dca0:	cmp	r2, #127	; 0x7f
   2dca4:	bhi	2dd94 <flatcc_json_parser_string_escape@@Base+0x418>
   2dca8:	mov	r0, #1
   2dcac:	strb	r0, [r3]
   2dcb0:	strb	r2, [r3, #1]
   2dcb4:	add	r0, r1, #6
   2dcb8:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dcbc:	mov	ip, #0
   2dcc0:	strb	ip, [r3]
   2dcc4:	mov	r3, #18
   2dcc8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2dccc:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dcd0:	mov	ip, #0
   2dcd4:	strb	ip, [r3]
   2dcd8:	mov	r3, #18
   2dcdc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2dce0:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dce4:	orr	ip, ip, #32
   2dce8:	sub	r4, ip, #97	; 0x61
   2dcec:	uxtb	r4, r4
   2dcf0:	cmp	r4, #5
   2dcf4:	bhi	2dd0c <flatcc_json_parser_string_escape@@Base+0x390>
   2dcf8:	sub	ip, ip, #87	; 0x57
   2dcfc:	uxth	ip, ip
   2dd00:	orr	ip, lr, ip, lsl #8
   2dd04:	and	ip, ip, #65280	; 0xff00
   2dd08:	b	2dc5c <flatcc_json_parser_string_escape@@Base+0x2e0>
   2dd0c:	mov	ip, #0
   2dd10:	strb	ip, [r3]
   2dd14:	mov	r3, #18
   2dd18:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2dd1c:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dd20:	orr	lr, lr, #32
   2dd24:	sub	r4, lr, #97	; 0x61
   2dd28:	uxtb	r4, r4
   2dd2c:	cmp	r4, #5
   2dd30:	bhi	2dd48 <flatcc_json_parser_string_escape@@Base+0x3cc>
   2dd34:	sub	lr, lr, #87	; 0x57
   2dd38:	uxth	lr, lr
   2dd3c:	orr	ip, ip, lr, lsl #4
   2dd40:	uxth	ip, ip
   2dd44:	b	2dc80 <flatcc_json_parser_string_escape@@Base+0x304>
   2dd48:	mov	ip, #0
   2dd4c:	strb	ip, [r3]
   2dd50:	mov	r3, #18
   2dd54:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2dd58:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dd5c:	orr	lr, lr, #32
   2dd60:	sub	r4, lr, #97	; 0x61
   2dd64:	uxtb	r4, r4
   2dd68:	cmp	r4, #5
   2dd6c:	bhi	2dd80 <flatcc_json_parser_string_escape@@Base+0x404>
   2dd70:	sub	r2, lr, #87	; 0x57
   2dd74:	orr	r2, ip, r2
   2dd78:	uxth	r2, r2
   2dd7c:	b	2dca0 <flatcc_json_parser_string_escape@@Base+0x324>
   2dd80:	mov	ip, #0
   2dd84:	strb	ip, [r3]
   2dd88:	mov	r3, #18
   2dd8c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2dd90:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dd94:	cmp	r2, #2048	; 0x800
   2dd98:	bcs	2ddc4 <flatcc_json_parser_string_escape@@Base+0x448>
   2dd9c:	mov	r0, #2
   2dda0:	strb	r0, [r3]
   2dda4:	mvn	r0, #63	; 0x3f
   2dda8:	orr	r0, r0, r2, lsr #6
   2ddac:	strb	r0, [r3, #1]
   2ddb0:	and	r2, r2, #63	; 0x3f
   2ddb4:	mvn	r2, r2, lsl #25
   2ddb8:	mvn	r2, r2, lsr #25
   2ddbc:	strb	r2, [r3, #2]
   2ddc0:	b	2dcb4 <flatcc_json_parser_string_escape@@Base+0x338>
   2ddc4:	mov	r0, #3
   2ddc8:	strb	r0, [r3]
   2ddcc:	mvn	r0, #31
   2ddd0:	orr	r0, r0, r2, lsr #12
   2ddd4:	strb	r0, [r3, #1]
   2ddd8:	ubfx	ip, r2, #6, #6
   2dddc:	mvn	r0, #127	; 0x7f
   2dde0:	orr	ip, r0, ip
   2dde4:	strb	ip, [r3, #2]
   2dde8:	and	r2, r2, #63	; 0x3f
   2ddec:	orr	r2, r0, r2
   2ddf0:	strb	r2, [r3, #3]
   2ddf4:	b	2dcb4 <flatcc_json_parser_string_escape@@Base+0x338>
   2ddf8:	mov	r2, #1
   2ddfc:	strb	r2, [r3]
   2de00:	mov	r2, #9
   2de04:	strb	r2, [r3, #1]
   2de08:	add	r0, r1, #2
   2de0c:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2de10:	mov	r2, #1
   2de14:	strb	r2, [r3]
   2de18:	mov	r2, #10
   2de1c:	strb	r2, [r3, #1]
   2de20:	add	r0, r1, #2
   2de24:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2de28:	mov	r2, #1
   2de2c:	strb	r2, [r3]
   2de30:	mov	r2, #13
   2de34:	strb	r2, [r3, #1]
   2de38:	add	r0, r1, #2
   2de3c:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2de40:	mov	r2, #1
   2de44:	strb	r2, [r3]
   2de48:	mov	r2, #8
   2de4c:	strb	r2, [r3, #1]
   2de50:	add	r0, r1, #2
   2de54:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2de58:	mov	r2, #1
   2de5c:	strb	r2, [r3]
   2de60:	mov	r2, #12
   2de64:	strb	r2, [r3, #1]
   2de68:	add	r0, r1, #2
   2de6c:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2de70:	mov	r2, #1
   2de74:	strb	r2, [r3]
   2de78:	mov	r2, #34	; 0x22
   2de7c:	strb	r2, [r3, #1]
   2de80:	add	r0, r1, #2
   2de84:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2de88:	mov	r2, #1
   2de8c:	strb	r2, [r3]
   2de90:	mov	r2, #92	; 0x5c
   2de94:	strb	r2, [r3, #1]
   2de98:	add	r0, r1, #2
   2de9c:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2dea0:	mov	r2, #1
   2dea4:	strb	r2, [r3]
   2dea8:	mov	r2, #47	; 0x2f
   2deac:	strb	r2, [r3, #1]
   2deb0:	add	r0, r1, #2
   2deb4:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>
   2deb8:	mov	ip, #0
   2debc:	strb	ip, [r3]
   2dec0:	mov	r3, #18
   2dec4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2dec8:	b	2d9ac <flatcc_json_parser_string_escape@@Base+0x30>

0002decc <flatcc_json_parser_skip_constant@@Base>:
   2decc:	strd	r4, [sp, #-16]!
   2ded0:	str	r6, [sp, #8]
   2ded4:	str	lr, [sp, #12]
   2ded8:	mov	r6, r0
   2dedc:	mov	r4, r1
   2dee0:	mov	r5, r2
   2dee4:	cmp	r1, r2
   2dee8:	bne	2df10 <flatcc_json_parser_skip_constant@@Base+0x44>
   2deec:	mov	r4, r2
   2def0:	mov	r0, r4
   2def4:	ldrd	r4, [sp]
   2def8:	ldr	r6, [sp, #8]
   2defc:	add	sp, sp, #12
   2df00:	pop	{pc}		; (ldr pc, [sp], #4)
   2df04:	add	r4, r4, #1
   2df08:	cmp	r5, r4
   2df0c:	beq	2def0 <flatcc_json_parser_skip_constant@@Base+0x24>
   2df10:	ldrb	r3, [r4]
   2df14:	cmp	r3, #95	; 0x5f
   2df18:	movne	r2, #0
   2df1c:	moveq	r2, #1
   2df20:	orrs	r2, r2, r3, lsr #7
   2df24:	bne	2df04 <flatcc_json_parser_skip_constant@@Base+0x38>
   2df28:	sub	r2, r3, #48	; 0x30
   2df2c:	uxtb	r2, r2
   2df30:	cmp	r3, #46	; 0x2e
   2df34:	cmpne	r2, #9
   2df38:	bls	2df04 <flatcc_json_parser_skip_constant@@Base+0x38>
   2df3c:	orr	r2, r3, #32
   2df40:	sub	r2, r2, #97	; 0x61
   2df44:	uxtb	r2, r2
   2df48:	cmp	r2, #25
   2df4c:	addls	r4, r4, #1
   2df50:	bls	2df08 <flatcc_json_parser_skip_constant@@Base+0x3c>
   2df54:	sub	r2, r5, r4
   2df58:	cmp	r2, #1
   2df5c:	ble	2df6c <flatcc_json_parser_skip_constant@@Base+0xa0>
   2df60:	cmp	r3, #32
   2df64:	bhi	2def0 <flatcc_json_parser_skip_constant@@Base+0x24>
   2df68:	beq	2df8c <flatcc_json_parser_skip_constant@@Base+0xc0>
   2df6c:	mov	r2, r5
   2df70:	mov	r1, r4
   2df74:	mov	r0, r6
   2df78:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2df7c:	cmp	r0, r4
   2df80:	beq	2def0 <flatcc_json_parser_skip_constant@@Base+0x24>
   2df84:	mov	r4, r0
   2df88:	b	2df08 <flatcc_json_parser_skip_constant@@Base+0x3c>
   2df8c:	ldrb	r3, [r4, #1]
   2df90:	cmp	r3, #32
   2df94:	addhi	r0, r4, #1
   2df98:	bls	2df6c <flatcc_json_parser_skip_constant@@Base+0xa0>
   2df9c:	b	2df7c <flatcc_json_parser_skip_constant@@Base+0xb0>

0002dfa0 <flatcc_json_parser_match_constant@@Base>:
   2dfa0:	strd	r4, [sp, #-16]!
   2dfa4:	str	r6, [sp, #8]
   2dfa8:	str	lr, [sp, #12]
   2dfac:	sub	lr, r2, r1
   2dfb0:	cmp	lr, r3
   2dfb4:	ble	2e010 <flatcc_json_parser_match_constant@@Base+0x70>
   2dfb8:	mov	r5, r2
   2dfbc:	mov	r6, r1
   2dfc0:	mov	ip, r0
   2dfc4:	add	r4, r1, r3
   2dfc8:	ldr	r2, [r0, #12]
   2dfcc:	cmp	r2, #0
   2dfd0:	bne	2e030 <flatcc_json_parser_match_constant@@Base+0x90>
   2dfd4:	ldrb	r3, [r1, r3]
   2dfd8:	cmp	r3, #32
   2dfdc:	beq	2e0fc <flatcc_json_parser_match_constant@@Base+0x15c>
   2dfe0:	cmp	r3, #34	; 0x22
   2dfe4:	beq	2e144 <flatcc_json_parser_match_constant@@Base+0x1a4>
   2dfe8:	cmp	r3, #92	; 0x5c
   2dfec:	bne	2e1a8 <flatcc_json_parser_match_constant@@Base+0x208>
   2dff0:	mov	r3, #0
   2dff4:	ldr	r2, [sp, #16]
   2dff8:	str	r3, [r2]
   2dffc:	mov	r3, #18
   2e000:	mov	r2, r5
   2e004:	mov	r1, r4
   2e008:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e00c:	b	2e020 <flatcc_json_parser_match_constant@@Base+0x80>
   2e010:	mov	r3, #0
   2e014:	ldr	r2, [sp, #16]
   2e018:	str	r3, [r2]
   2e01c:	mov	r0, r1
   2e020:	ldrd	r4, [sp]
   2e024:	ldr	r6, [sp, #8]
   2e028:	add	sp, sp, #12
   2e02c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e030:	sub	r2, r5, r4
   2e034:	cmp	r2, #1
   2e038:	ble	2e04c <flatcc_json_parser_match_constant@@Base+0xac>
   2e03c:	ldrb	r3, [r1, r3]
   2e040:	cmp	r3, #32
   2e044:	bhi	2e1bc <flatcc_json_parser_match_constant@@Base+0x21c>
   2e048:	beq	2e0c8 <flatcc_json_parser_match_constant@@Base+0x128>
   2e04c:	mov	r2, r5
   2e050:	mov	r1, r4
   2e054:	mov	r0, ip
   2e058:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2e05c:	cmp	r5, r0
   2e060:	beq	2e1cc <flatcc_json_parser_match_constant@@Base+0x22c>
   2e064:	cmp	r4, r0
   2e068:	beq	2e098 <flatcc_json_parser_match_constant@@Base+0xf8>
   2e06c:	ldrb	r3, [r0]
   2e070:	cmp	r3, #95	; 0x5f
   2e074:	movne	r2, #0
   2e078:	moveq	r2, #1
   2e07c:	orrs	r2, r2, r3, lsr #7
   2e080:	bne	2e0dc <flatcc_json_parser_match_constant@@Base+0x13c>
   2e084:	orr	r3, r3, #32
   2e088:	sub	r3, r3, #97	; 0x61
   2e08c:	uxtb	r3, r3
   2e090:	cmp	r3, #25
   2e094:	bls	2e0ec <flatcc_json_parser_match_constant@@Base+0x14c>
   2e098:	mov	r3, #0
   2e09c:	ldr	r2, [sp, #16]
   2e0a0:	str	r3, [r2]
   2e0a4:	ldrb	r2, [r0]
   2e0a8:	and	r3, r2, #223	; 0xdf
   2e0ac:	cmp	r2, #44	; 0x2c
   2e0b0:	cmpne	r3, #93	; 0x5d
   2e0b4:	moveq	r3, #1
   2e0b8:	movne	r3, #0
   2e0bc:	cmp	r3, #0
   2e0c0:	moveq	r0, r6
   2e0c4:	b	2e020 <flatcc_json_parser_match_constant@@Base+0x80>
   2e0c8:	ldrb	r3, [r4, #1]
   2e0cc:	cmp	r3, #32
   2e0d0:	addhi	r0, r4, #1
   2e0d4:	bls	2e04c <flatcc_json_parser_match_constant@@Base+0xac>
   2e0d8:	b	2e05c <flatcc_json_parser_match_constant@@Base+0xbc>
   2e0dc:	mov	r3, #1
   2e0e0:	ldr	r2, [sp, #16]
   2e0e4:	str	r3, [r2]
   2e0e8:	b	2e020 <flatcc_json_parser_match_constant@@Base+0x80>
   2e0ec:	mov	r3, #1
   2e0f0:	ldr	r2, [sp, #16]
   2e0f4:	str	r3, [r2]
   2e0f8:	b	2e020 <flatcc_json_parser_match_constant@@Base+0x80>
   2e0fc:	add	r3, r4, #1
   2e100:	cmp	r5, r3
   2e104:	beq	2e1dc <flatcc_json_parser_match_constant@@Base+0x23c>
   2e108:	ldrb	r2, [r4, #1]
   2e10c:	cmp	r2, #32
   2e110:	bne	2e1f4 <flatcc_json_parser_match_constant@@Base+0x254>
   2e114:	add	r3, r4, #2
   2e118:	mov	r2, r5
   2e11c:	mov	r4, r3
   2e120:	cmp	r2, r3
   2e124:	beq	2e1e0 <flatcc_json_parser_match_constant@@Base+0x240>
   2e128:	add	r3, r3, #1
   2e12c:	ldrb	r1, [r4]
   2e130:	cmp	r1, #32
   2e134:	beq	2e11c <flatcc_json_parser_match_constant@@Base+0x17c>
   2e138:	ldrb	r3, [r4]
   2e13c:	cmp	r3, #34	; 0x22
   2e140:	bne	2e180 <flatcc_json_parser_match_constant@@Base+0x1e0>
   2e144:	add	r0, r4, #1
   2e148:	cmn	r0, #1
   2e14c:	bge	2e160 <flatcc_json_parser_match_constant@@Base+0x1c0>
   2e150:	ldrb	r3, [r4, #1]
   2e154:	cmp	r3, #32
   2e158:	bhi	2e170 <flatcc_json_parser_match_constant@@Base+0x1d0>
   2e15c:	beq	2e194 <flatcc_json_parser_match_constant@@Base+0x1f4>
   2e160:	mov	r2, #0
   2e164:	mov	r1, r0
   2e168:	mov	r0, ip
   2e16c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2e170:	mov	r3, #0
   2e174:	ldr	r2, [sp, #16]
   2e178:	str	r3, [r2]
   2e17c:	b	2e020 <flatcc_json_parser_match_constant@@Base+0x80>
   2e180:	mov	r3, #1
   2e184:	ldr	r2, [sp, #16]
   2e188:	str	r3, [r2]
   2e18c:	mov	r0, r4
   2e190:	b	2e020 <flatcc_json_parser_match_constant@@Base+0x80>
   2e194:	ldrb	r3, [r4, #2]
   2e198:	cmp	r3, #32
   2e19c:	addhi	r0, r4, #2
   2e1a0:	bls	2e160 <flatcc_json_parser_match_constant@@Base+0x1c0>
   2e1a4:	b	2e170 <flatcc_json_parser_match_constant@@Base+0x1d0>
   2e1a8:	mov	r3, #0
   2e1ac:	ldr	r2, [sp, #16]
   2e1b0:	str	r3, [r2]
   2e1b4:	mov	r0, r1
   2e1b8:	b	2e020 <flatcc_json_parser_match_constant@@Base+0x80>
   2e1bc:	cmp	r4, r5
   2e1c0:	movne	r0, r4
   2e1c4:	bne	2e098 <flatcc_json_parser_match_constant@@Base+0xf8>
   2e1c8:	mov	r0, r5
   2e1cc:	mov	r3, #0
   2e1d0:	ldr	r2, [sp, #16]
   2e1d4:	str	r3, [r2]
   2e1d8:	b	2e020 <flatcc_json_parser_match_constant@@Base+0x80>
   2e1dc:	mov	r4, r3
   2e1e0:	mov	r3, #0
   2e1e4:	ldr	r2, [sp, #16]
   2e1e8:	str	r3, [r2]
   2e1ec:	mov	r0, r4
   2e1f0:	b	2e020 <flatcc_json_parser_match_constant@@Base+0x80>
   2e1f4:	mov	r4, r3
   2e1f8:	b	2e138 <flatcc_json_parser_match_constant@@Base+0x198>

0002e1fc <flatcc_json_parser_double@@Base>:
   2e1fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2e200:	strd	r6, [sp, #8]
   2e204:	str	r8, [sp, #16]
   2e208:	str	lr, [sp, #20]
   2e20c:	mov	r4, #0
   2e210:	mov	r5, #0
   2e214:	strd	r4, [r3]
   2e218:	cmp	r1, r2
   2e21c:	beq	2e2b0 <flatcc_json_parser_double@@Base+0xb4>
   2e220:	ldrb	ip, [r1]
   2e224:	cmp	ip, #45	; 0x2d
   2e228:	addeq	ip, r1, #1
   2e22c:	movne	ip, r1
   2e230:	mov	r6, r3
   2e234:	mov	r5, r2
   2e238:	mov	r4, r1
   2e23c:	mov	r7, r0
   2e240:	sub	r3, r2, ip
   2e244:	cmp	r3, #1
   2e248:	ble	2e260 <flatcc_json_parser_double@@Base+0x64>
   2e24c:	ldrb	r3, [ip]
   2e250:	cmp	r3, #46	; 0x2e
   2e254:	beq	2e2d4 <flatcc_json_parser_double@@Base+0xd8>
   2e258:	cmp	r3, #48	; 0x30
   2e25c:	beq	2e2c8 <flatcc_json_parser_double@@Base+0xcc>
   2e260:	mov	r2, r6
   2e264:	sub	r1, r5, r4
   2e268:	mov	r0, r4
   2e26c:	bl	2c428 <grisu3_diy_fp_encode_double@@Base+0x500>
   2e270:	mov	r2, r0
   2e274:	cmp	r4, r0
   2e278:	cmpne	r0, #0
   2e27c:	bne	2e2b0 <flatcc_json_parser_double@@Base+0xb4>
   2e280:	vldr	d7, [r6]
   2e284:	vabs.f64	d7, d7
   2e288:	vldr	d6, [pc, #96]	; 2e2f0 <flatcc_json_parser_double@@Base+0xf4>
   2e28c:	vcmp.f64	d7, d6
   2e290:	vmrs	APSR_nzcv, fpscr
   2e294:	movgt	r3, #7
   2e298:	movle	r3, #6
   2e29c:	mov	r2, r5
   2e2a0:	mov	r1, r4
   2e2a4:	mov	r0, r7
   2e2a8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e2ac:	mov	r2, r0
   2e2b0:	mov	r0, r2
   2e2b4:	ldrd	r4, [sp]
   2e2b8:	ldrd	r6, [sp, #8]
   2e2bc:	ldr	r8, [sp, #16]
   2e2c0:	add	sp, sp, #20
   2e2c4:	pop	{pc}		; (ldr pc, [sp], #4)
   2e2c8:	ldrb	r3, [ip, #1]
   2e2cc:	cmp	r3, #48	; 0x30
   2e2d0:	bne	2e260 <flatcc_json_parser_double@@Base+0x64>
   2e2d4:	mov	r3, #6
   2e2d8:	mov	r2, r5
   2e2dc:	mov	r1, r4
   2e2e0:	mov	r0, r7
   2e2e4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e2e8:	mov	r2, r0
   2e2ec:	b	2e2b0 <flatcc_json_parser_double@@Base+0xb4>
   2e2f0:			; <UNDEFINED> instruction: 0xffffffff
   2e2f4:	svcvc	0x00efffff

0002e2f8 <flatcc_json_parser_float@@Base>:
   2e2f8:	mov	ip, #0
   2e2fc:	str	ip, [r3]
   2e300:	cmp	r1, r2
   2e304:	beq	2e428 <flatcc_json_parser_float@@Base+0x130>
   2e308:	strd	r4, [sp, #-20]!	; 0xffffffec
   2e30c:	strd	r6, [sp, #8]
   2e310:	str	lr, [sp, #16]
   2e314:	sub	sp, sp, #12
   2e318:	ldrb	ip, [r1]
   2e31c:	cmp	ip, #45	; 0x2d
   2e320:	addeq	ip, r1, #1
   2e324:	movne	ip, r1
   2e328:	mov	r6, r3
   2e32c:	mov	r5, r2
   2e330:	mov	r4, r1
   2e334:	mov	r7, r0
   2e338:	sub	r3, r2, ip
   2e33c:	cmp	r3, #1
   2e340:	ble	2e358 <flatcc_json_parser_float@@Base+0x60>
   2e344:	ldrb	r3, [ip]
   2e348:	cmp	r3, #46	; 0x2e
   2e34c:	beq	2e3b4 <flatcc_json_parser_float@@Base+0xbc>
   2e350:	cmp	r3, #48	; 0x30
   2e354:	beq	2e3a8 <flatcc_json_parser_float@@Base+0xb0>
   2e358:	mov	r2, sp
   2e35c:	sub	r1, r5, r4
   2e360:	mov	r0, r4
   2e364:	bl	2c428 <grisu3_diy_fp_encode_double@@Base+0x500>
   2e368:	vldr	d6, [sp]
   2e36c:	vcvt.f32.f64	s15, d6
   2e370:	vstr	s15, [r6]
   2e374:	vabs.f32	s15, s15
   2e378:	vldr	s14, [pc, #176]	; 2e430 <flatcc_json_parser_float@@Base+0x138>
   2e37c:	vcmp.f32	s15, s14
   2e380:	vmrs	APSR_nzcv, fpscr
   2e384:	bgt	2e3cc <flatcc_json_parser_float@@Base+0xd4>
   2e388:	cmp	r4, r0
   2e38c:	cmpne	r0, #0
   2e390:	beq	2e410 <flatcc_json_parser_float@@Base+0x118>
   2e394:	add	sp, sp, #12
   2e398:	ldrd	r4, [sp]
   2e39c:	ldrd	r6, [sp, #8]
   2e3a0:	add	sp, sp, #16
   2e3a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2e3a8:	ldrb	r3, [ip, #1]
   2e3ac:	cmp	r3, #48	; 0x30
   2e3b0:	bne	2e358 <flatcc_json_parser_float@@Base+0x60>
   2e3b4:	mov	r3, #6
   2e3b8:	mov	r2, r5
   2e3bc:	mov	r1, r4
   2e3c0:	mov	r0, r7
   2e3c4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e3c8:	b	2e394 <flatcc_json_parser_float@@Base+0x9c>
   2e3cc:	vcmpe.f64	d6, #0.0
   2e3d0:	vmrs	APSR_nzcv, fpscr
   2e3d4:	vldr	s15, [pc, #88]	; 2e434 <flatcc_json_parser_float@@Base+0x13c>
   2e3d8:	vldr	s14, [pc, #88]	; 2e438 <flatcc_json_parser_float@@Base+0x140>
   2e3dc:	vmovpl.f32	s15, s14
   2e3e0:	vstr	s15, [r6]
   2e3e4:	vabs.f32	s15, s15
   2e3e8:	vldr	s14, [pc, #64]	; 2e430 <flatcc_json_parser_float@@Base+0x138>
   2e3ec:	vcmp.f32	s15, s14
   2e3f0:	vmrs	APSR_nzcv, fpscr
   2e3f4:	ble	2e410 <flatcc_json_parser_float@@Base+0x118>
   2e3f8:	mov	r3, #7
   2e3fc:	mov	r2, r5
   2e400:	mov	r1, r4
   2e404:	mov	r0, r7
   2e408:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e40c:	b	2e394 <flatcc_json_parser_float@@Base+0x9c>
   2e410:	mov	r3, #6
   2e414:	mov	r2, r5
   2e418:	mov	r1, r4
   2e41c:	mov	r0, r7
   2e420:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e424:	b	2e394 <flatcc_json_parser_float@@Base+0x9c>
   2e428:	mov	r0, r2
   2e42c:	bx	lr
   2e430:	svcvc	0x007fffff
   2e434:			; <UNDEFINED> instruction: 0xff800000
   2e438:	svcvc	0x00800000

0002e43c <flatcc_json_parser_generic_json@@Base>:
   2e43c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e440:	strd	r6, [sp, #8]
   2e444:	strd	r8, [sp, #16]
   2e448:	strd	sl, [sp, #24]
   2e44c:	str	lr, [sp, #32]
   2e450:	sub	sp, sp, #524	; 0x20c
   2e454:	mov	r4, r2
   2e458:	cmp	r1, r2
   2e45c:	beq	2edc4 <flatcc_json_parser_generic_json@@Base+0x988>
   2e460:	mov	r8, r0
   2e464:	mov	r6, r1
   2e468:	add	r5, sp, #8
   2e46c:	mov	r7, r5
   2e470:	b	2ec68 <flatcc_json_parser_generic_json@@Base+0x82c>
   2e474:	ldrb	r3, [r6]
   2e478:	cmp	r3, #34	; 0x22
   2e47c:	addeq	r6, r6, #1
   2e480:	moveq	r3, #0
   2e484:	streq	r3, [r8, #12]
   2e488:	beq	2e4dc <flatcc_json_parser_generic_json@@Base+0xa0>
   2e48c:	cmp	r3, #46	; 0x2e
   2e490:	movne	r3, #1
   2e494:	strne	r3, [r8, #12]
   2e498:	beq	2e4b8 <flatcc_json_parser_generic_json@@Base+0x7c>
   2e49c:	cmp	r4, r6
   2e4a0:	beq	2ef38 <flatcc_json_parser_generic_json@@Base+0xafc>
   2e4a4:	ldrb	r3, [r6]
   2e4a8:	cmp	r3, #32
   2e4ac:	bhi	2e518 <flatcc_json_parser_generic_json@@Base+0xdc>
   2e4b0:	mov	r0, r6
   2e4b4:	b	2e554 <flatcc_json_parser_generic_json@@Base+0x118>
   2e4b8:	mov	r3, #5
   2e4bc:	mov	r2, r4
   2e4c0:	mov	r1, r6
   2e4c4:	mov	r0, r8
   2e4c8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e4cc:	mov	r6, r0
   2e4d0:	ldr	r3, [r8, #12]
   2e4d4:	cmp	r3, #0
   2e4d8:	bne	2e49c <flatcc_json_parser_generic_json@@Base+0x60>
   2e4dc:	cmp	r4, r6
   2e4e0:	beq	2e640 <flatcc_json_parser_generic_json@@Base+0x204>
   2e4e4:	ldrb	r3, [r6]
   2e4e8:	cmp	r3, #34	; 0x22
   2e4ec:	bne	2e60c <flatcc_json_parser_generic_json@@Base+0x1d0>
   2e4f0:	add	r0, r6, #1
   2e4f4:	b	2e554 <flatcc_json_parser_generic_json@@Base+0x118>
   2e4f8:	add	r0, r6, #1
   2e4fc:	cmp	r4, r0
   2e500:	beq	2e5d4 <flatcc_json_parser_generic_json@@Base+0x198>
   2e504:	ldrb	r2, [r0]
   2e508:	add	r6, r6, #1
   2e50c:	cmp	r2, #32
   2e510:	bls	2e5d4 <flatcc_json_parser_generic_json@@Base+0x198>
   2e514:	mov	r3, r2
   2e518:	mov	r0, r6
   2e51c:	cmp	r3, #46	; 0x2e
   2e520:	cmpne	r3, #95	; 0x5f
   2e524:	beq	2e4f8 <flatcc_json_parser_generic_json@@Base+0xbc>
   2e528:	tst	r3, #128	; 0x80
   2e52c:	bne	2e4f8 <flatcc_json_parser_generic_json@@Base+0xbc>
   2e530:	sub	r2, r3, #48	; 0x30
   2e534:	uxtb	r2, r2
   2e538:	cmp	r2, #9
   2e53c:	bls	2e4f8 <flatcc_json_parser_generic_json@@Base+0xbc>
   2e540:	orr	r2, r3, #32
   2e544:	sub	r2, r2, #97	; 0x61
   2e548:	uxtb	r2, r2
   2e54c:	cmp	r2, #25
   2e550:	bls	2e5cc <flatcc_json_parser_generic_json@@Base+0x190>
   2e554:	sub	r3, r4, r0
   2e558:	cmp	r3, #1
   2e55c:	ble	2e570 <flatcc_json_parser_generic_json@@Base+0x134>
   2e560:	ldrb	r3, [r0]
   2e564:	cmp	r3, #32
   2e568:	bhi	2e580 <flatcc_json_parser_generic_json@@Base+0x144>
   2e56c:	beq	2e658 <flatcc_json_parser_generic_json@@Base+0x21c>
   2e570:	mov	r2, r4
   2e574:	mov	r1, r0
   2e578:	mov	r0, r8
   2e57c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2e580:	cmp	r4, r0
   2e584:	beq	2e66c <flatcc_json_parser_generic_json@@Base+0x230>
   2e588:	ldrb	r3, [r0]
   2e58c:	cmp	r3, #58	; 0x3a
   2e590:	bne	2e684 <flatcc_json_parser_generic_json@@Base+0x248>
   2e594:	add	r6, r0, #1
   2e598:	sub	r3, r4, r6
   2e59c:	cmp	r3, #1
   2e5a0:	ble	2e5b4 <flatcc_json_parser_generic_json@@Base+0x178>
   2e5a4:	ldrb	r3, [r0, #1]
   2e5a8:	cmp	r3, #32
   2e5ac:	bhi	2ec7c <flatcc_json_parser_generic_json@@Base+0x840>
   2e5b0:	beq	2e69c <flatcc_json_parser_generic_json@@Base+0x260>
   2e5b4:	mov	r2, r4
   2e5b8:	mov	r1, r6
   2e5bc:	mov	r0, r8
   2e5c0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2e5c4:	mov	r6, r0
   2e5c8:	b	2ec7c <flatcc_json_parser_generic_json@@Base+0x840>
   2e5cc:	add	r0, r6, #1
   2e5d0:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xc0>
   2e5d4:	cmp	r3, #46	; 0x2e
   2e5d8:	bne	2e554 <flatcc_json_parser_generic_json@@Base+0x118>
   2e5dc:	mov	r3, #5
   2e5e0:	mov	r2, r4
   2e5e4:	mov	r1, r0
   2e5e8:	mov	r0, r8
   2e5ec:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e5f0:	b	2e554 <flatcc_json_parser_generic_json@@Base+0x118>
   2e5f4:	add	r6, r3, #1
   2e5f8:	cmp	r4, r6
   2e5fc:	beq	2e640 <flatcc_json_parser_generic_json@@Base+0x204>
   2e600:	ldrb	r3, [r3, #1]
   2e604:	cmp	r3, #34	; 0x22
   2e608:	beq	2e634 <flatcc_json_parser_generic_json@@Base+0x1f8>
   2e60c:	cmp	r3, #92	; 0x5c
   2e610:	movne	r3, r6
   2e614:	bne	2e5f4 <flatcc_json_parser_generic_json@@Base+0x1b8>
   2e618:	sub	r3, r4, r6
   2e61c:	cmp	r3, #1
   2e620:	ble	2e62c <flatcc_json_parser_generic_json@@Base+0x1f0>
   2e624:	add	r3, r6, #1
   2e628:	b	2e5f4 <flatcc_json_parser_generic_json@@Base+0x1b8>
   2e62c:	cmp	r4, r6
   2e630:	beq	2e640 <flatcc_json_parser_generic_json@@Base+0x204>
   2e634:	ldrb	r3, [r6]
   2e638:	cmp	r3, #34	; 0x22
   2e63c:	beq	2e4f0 <flatcc_json_parser_generic_json@@Base+0xb4>
   2e640:	mov	r3, #20
   2e644:	mov	r2, r4
   2e648:	mov	r1, r6
   2e64c:	mov	r0, r8
   2e650:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e654:	b	2e554 <flatcc_json_parser_generic_json@@Base+0x118>
   2e658:	ldrb	r3, [r0, #1]
   2e65c:	cmp	r3, #32
   2e660:	addhi	r0, r0, #1
   2e664:	bls	2e570 <flatcc_json_parser_generic_json@@Base+0x134>
   2e668:	b	2e580 <flatcc_json_parser_generic_json@@Base+0x144>
   2e66c:	mov	r3, #10
   2e670:	mov	r2, r4
   2e674:	mov	r1, r0
   2e678:	mov	r0, r8
   2e67c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e680:	b	2ed84 <flatcc_json_parser_generic_json@@Base+0x948>
   2e684:	mov	r3, #4
   2e688:	mov	r2, r4
   2e68c:	mov	r1, r0
   2e690:	mov	r0, r8
   2e694:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e698:	b	2ed84 <flatcc_json_parser_generic_json@@Base+0x948>
   2e69c:	ldrb	r3, [r0, #2]
   2e6a0:	cmp	r3, #32
   2e6a4:	addhi	r6, r0, #2
   2e6a8:	bls	2e5b4 <flatcc_json_parser_generic_json@@Base+0x178>
   2e6ac:	b	2ec7c <flatcc_json_parser_generic_json@@Base+0x840>
   2e6b0:	cmp	r3, #48	; 0x30
   2e6b4:	bcs	2ee5c <flatcc_json_parser_generic_json@@Base+0xa20>
   2e6b8:	cmp	r3, #34	; 0x22
   2e6bc:	beq	2e6ec <flatcc_json_parser_generic_json@@Base+0x2b0>
   2e6c0:	cmp	r3, #45	; 0x2d
   2e6c4:	beq	2ee5c <flatcc_json_parser_generic_json@@Base+0xa20>
   2e6c8:	mov	r2, r4
   2e6cc:	mov	r1, r6
   2e6d0:	mov	r0, r8
   2e6d4:	bl	2decc <flatcc_json_parser_skip_constant@@Base>
   2e6d8:	cmp	r0, r6
   2e6dc:	beq	2e9b0 <flatcc_json_parser_generic_json@@Base+0x574>
   2e6e0:	mov	sl, #10
   2e6e4:	mov	fp, #9
   2e6e8:	b	2eb84 <flatcc_json_parser_generic_json@@Base+0x748>
   2e6ec:	cmp	r4, r6
   2e6f0:	addne	r0, r6, #1
   2e6f4:	bne	2e70c <flatcc_json_parser_generic_json@@Base+0x2d0>
   2e6f8:	mov	r3, #16
   2e6fc:	mov	r2, r4
   2e700:	mov	r1, r6
   2e704:	mov	r0, r8
   2e708:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e70c:	cmp	r4, r0
   2e710:	beq	2edd4 <flatcc_json_parser_generic_json@@Base+0x998>
   2e714:	ldrb	r3, [r0]
   2e718:	cmp	r3, #34	; 0x22
   2e71c:	bne	2e74c <flatcc_json_parser_generic_json@@Base+0x310>
   2e720:	b	2e770 <flatcc_json_parser_generic_json@@Base+0x334>
   2e724:	add	r3, sp, #4
   2e728:	mov	r2, r4
   2e72c:	mov	r1, r0
   2e730:	mov	r0, r8
   2e734:	bl	2d97c <flatcc_json_parser_string_escape@@Base>
   2e738:	cmp	r4, r0
   2e73c:	beq	2edd4 <flatcc_json_parser_generic_json@@Base+0x998>
   2e740:	ldrb	r3, [r0]
   2e744:	cmp	r3, #34	; 0x22
   2e748:	beq	2e770 <flatcc_json_parser_generic_json@@Base+0x334>
   2e74c:	mov	r2, r4
   2e750:	mov	r1, r0
   2e754:	mov	r0, r8
   2e758:	bl	2d1a4 <flatcc_json_parser_string_part@@Base>
   2e75c:	cmp	r4, r0
   2e760:	beq	2e724 <flatcc_json_parser_generic_json@@Base+0x2e8>
   2e764:	ldrb	r3, [r0]
   2e768:	cmp	r3, #34	; 0x22
   2e76c:	bne	2e724 <flatcc_json_parser_generic_json@@Base+0x2e8>
   2e770:	add	r0, r0, #1
   2e774:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2e778:	add	r6, r6, #1
   2e77c:	cmp	r4, r6
   2e780:	bne	2ee70 <flatcc_json_parser_generic_json@@Base+0xa34>
   2e784:	mov	r3, #6
   2e788:	mov	r2, r6
   2e78c:	mov	r1, r6
   2e790:	mov	r0, r8
   2e794:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e798:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2e79c:	add	r0, r6, #1
   2e7a0:	cmp	r4, r0
   2e7a4:	bne	2eed8 <flatcc_json_parser_generic_json@@Base+0xa9c>
   2e7a8:	b	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2e7ac:	mov	r3, #6
   2e7b0:	mov	r2, r4
   2e7b4:	mov	r1, r6
   2e7b8:	mov	r0, r8
   2e7bc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e7c0:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2e7c4:	ldrb	r3, [r0, #1]
   2e7c8:	sub	r3, r3, #48	; 0x30
   2e7cc:	uxtb	r3, r3
   2e7d0:	cmp	r3, #9
   2e7d4:	bhi	2e828 <flatcc_json_parser_generic_json@@Base+0x3ec>
   2e7d8:	add	r2, r0, #2
   2e7dc:	cmp	r4, r2
   2e7e0:	beq	2ee28 <flatcc_json_parser_generic_json@@Base+0x9ec>
   2e7e4:	ldrb	r3, [r0, #2]
   2e7e8:	sub	r3, r3, #48	; 0x30
   2e7ec:	uxtb	r3, r3
   2e7f0:	cmp	r3, #9
   2e7f4:	bhi	2ee30 <flatcc_json_parser_generic_json@@Base+0x9f4>
   2e7f8:	add	r2, r0, #3
   2e7fc:	mov	r1, r4
   2e800:	mov	r0, r2
   2e804:	cmp	r1, r2
   2e808:	beq	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2e80c:	add	r2, r2, #1
   2e810:	ldrb	r3, [r0]
   2e814:	sub	r3, r3, #48	; 0x30
   2e818:	uxtb	r3, r3
   2e81c:	cmp	r3, #9
   2e820:	bls	2e800 <flatcc_json_parser_generic_json@@Base+0x3c4>
   2e824:	b	2eee4 <flatcc_json_parser_generic_json@@Base+0xaa8>
   2e828:	mov	r3, #6
   2e82c:	mov	r2, r4
   2e830:	add	r1, r0, #1
   2e834:	mov	r0, r8
   2e838:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e83c:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2e840:	add	r1, r0, #1
   2e844:	cmp	r4, r1
   2e848:	beq	2e890 <flatcc_json_parser_generic_json@@Base+0x454>
   2e84c:	ldrb	r3, [r0, #1]
   2e850:	sub	r3, r3, #43	; 0x2b
   2e854:	tst	r3, #253	; 0xfd
   2e858:	bne	2e868 <flatcc_json_parser_generic_json@@Base+0x42c>
   2e85c:	add	r1, r0, #2
   2e860:	cmp	r4, r1
   2e864:	beq	2e87c <flatcc_json_parser_generic_json@@Base+0x440>
   2e868:	ldrb	r3, [r1]
   2e86c:	sub	r3, r3, #48	; 0x30
   2e870:	uxtb	r3, r3
   2e874:	cmp	r3, #9
   2e878:	bls	2e8a4 <flatcc_json_parser_generic_json@@Base+0x468>
   2e87c:	mov	r3, #6
   2e880:	mov	r2, r4
   2e884:	mov	r0, r8
   2e888:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e88c:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2e890:	mov	r3, #6
   2e894:	mov	r2, r1
   2e898:	mov	r0, r8
   2e89c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e8a0:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2e8a4:	add	r0, r1, #1
   2e8a8:	cmp	r4, r0
   2e8ac:	beq	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2e8b0:	ldrb	r3, [r1, #1]
   2e8b4:	sub	r3, r3, #48	; 0x30
   2e8b8:	uxtb	r3, r3
   2e8bc:	cmp	r3, #9
   2e8c0:	bhi	2eef4 <flatcc_json_parser_generic_json@@Base+0xab8>
   2e8c4:	add	r3, r1, #2
   2e8c8:	mov	r1, r4
   2e8cc:	mov	r0, r3
   2e8d0:	cmp	r1, r3
   2e8d4:	beq	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2e8d8:	add	r3, r3, #1
   2e8dc:	ldrb	r2, [r0]
   2e8e0:	sub	r2, r2, #48	; 0x30
   2e8e4:	uxtb	r2, r2
   2e8e8:	cmp	r2, #9
   2e8ec:	bls	2e8cc <flatcc_json_parser_generic_json@@Base+0x490>
   2e8f0:	b	2eef4 <flatcc_json_parser_generic_json@@Base+0xab8>
   2e8f4:	add	r3, sp, #520	; 0x208
   2e8f8:	cmp	r5, r3
   2e8fc:	beq	2e958 <flatcc_json_parser_generic_json@@Base+0x51c>
   2e900:	mov	r3, #93	; 0x5d
   2e904:	strb	r3, [r5], #1
   2e908:	add	r1, r6, #1
   2e90c:	sub	r3, r4, r1
   2e910:	cmp	r3, #1
   2e914:	ble	2e92c <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e918:	ldrb	r3, [r6, #1]
   2e91c:	cmp	r3, #32
   2e920:	movhi	r6, r1
   2e924:	bhi	2e93c <flatcc_json_parser_generic_json@@Base+0x500>
   2e928:	beq	2e970 <flatcc_json_parser_generic_json@@Base+0x534>
   2e92c:	mov	r2, r4
   2e930:	mov	r0, r8
   2e934:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2e938:	mov	r6, r0
   2e93c:	cmp	r4, r6
   2e940:	beq	2edcc <flatcc_json_parser_generic_json@@Base+0x990>
   2e944:	ldrb	r3, [r6]
   2e948:	cmp	r3, #93	; 0x5d
   2e94c:	bne	2ec68 <flatcc_json_parser_generic_json@@Base+0x82c>
   2e950:	mov	r0, r6
   2e954:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2e958:	mov	r3, #2
   2e95c:	mov	r2, r4
   2e960:	mov	r1, r6
   2e964:	mov	r0, r8
   2e968:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e96c:	b	2ed84 <flatcc_json_parser_generic_json@@Base+0x948>
   2e970:	ldrb	r3, [r6, #2]
   2e974:	cmp	r3, #32
   2e978:	addhi	r6, r6, #2
   2e97c:	bls	2e92c <flatcc_json_parser_generic_json@@Base+0x4f0>
   2e980:	b	2e93c <flatcc_json_parser_generic_json@@Base+0x500>
   2e984:	mov	r3, #2
   2e988:	mov	r2, r4
   2e98c:	mov	r1, r6
   2e990:	mov	r0, r8
   2e994:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e998:	b	2ed84 <flatcc_json_parser_generic_json@@Base+0x948>
   2e99c:	ldrb	r3, [r6, #2]
   2e9a0:	cmp	r3, #32
   2e9a4:	addhi	r6, r6, #2
   2e9a8:	bls	2ecd0 <flatcc_json_parser_generic_json@@Base+0x894>
   2e9ac:	b	2ece0 <flatcc_json_parser_generic_json@@Base+0x8a4>
   2e9b0:	mov	r3, #5
   2e9b4:	mov	r2, r4
   2e9b8:	mov	r1, r6
   2e9bc:	mov	r0, r8
   2e9c0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2e9c4:	b	2ed84 <flatcc_json_parser_generic_json@@Base+0x948>
   2e9c8:	sub	r3, r4, r0
   2e9cc:	cmp	r3, #1
   2e9d0:	ble	2e9e4 <flatcc_json_parser_generic_json@@Base+0x5a8>
   2e9d4:	ldrb	r3, [r0]
   2e9d8:	cmp	r3, #32
   2e9dc:	bhi	2e9fc <flatcc_json_parser_generic_json@@Base+0x5c0>
   2e9e0:	beq	2ea28 <flatcc_json_parser_generic_json@@Base+0x5ec>
   2e9e4:	mov	r2, r4
   2e9e8:	mov	r1, r0
   2e9ec:	mov	r0, r8
   2e9f0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2e9f4:	cmp	r4, r0
   2e9f8:	beq	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2e9fc:	ldrb	r3, [r0]
   2ea00:	cmp	r3, #44	; 0x2c
   2ea04:	beq	2ea84 <flatcc_json_parser_generic_json@@Base+0x648>
   2ea08:	cmp	r3, #93	; 0x5d
   2ea0c:	beq	2ea3c <flatcc_json_parser_generic_json@@Base+0x600>
   2ea10:	mov	r3, fp
   2ea14:	mov	r2, r4
   2ea18:	mov	r1, r0
   2ea1c:	mov	r0, r8
   2ea20:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2ea24:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ea28:	ldrb	r3, [r0, #1]
   2ea2c:	cmp	r3, #32
   2ea30:	addhi	r0, r0, #1
   2ea34:	bls	2e9e4 <flatcc_json_parser_generic_json@@Base+0x5a8>
   2ea38:	b	2e9f4 <flatcc_json_parser_generic_json@@Base+0x5b8>
   2ea3c:	add	r1, r0, #1
   2ea40:	sub	r3, r4, r1
   2ea44:	cmp	r3, #1
   2ea48:	ble	2ea60 <flatcc_json_parser_generic_json@@Base+0x624>
   2ea4c:	ldrb	r3, [r0, #1]
   2ea50:	cmp	r3, #32
   2ea54:	movhi	r0, r1
   2ea58:	bhi	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ea5c:	beq	2ea70 <flatcc_json_parser_generic_json@@Base+0x634>
   2ea60:	mov	r2, r4
   2ea64:	mov	r0, r8
   2ea68:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2ea6c:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ea70:	ldrb	r3, [r0, #2]
   2ea74:	cmp	r3, #32
   2ea78:	addhi	r0, r0, #2
   2ea7c:	bls	2ea60 <flatcc_json_parser_generic_json@@Base+0x624>
   2ea80:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ea84:	add	r6, r0, #1
   2ea88:	sub	r3, r4, r6
   2ea8c:	cmp	r3, #1
   2ea90:	ble	2eaa4 <flatcc_json_parser_generic_json@@Base+0x668>
   2ea94:	ldrb	r3, [r0, #1]
   2ea98:	cmp	r3, #32
   2ea9c:	bhi	2eab8 <flatcc_json_parser_generic_json@@Base+0x67c>
   2eaa0:	beq	2eb00 <flatcc_json_parser_generic_json@@Base+0x6c4>
   2eaa4:	mov	r2, r4
   2eaa8:	mov	r1, r6
   2eaac:	mov	r0, r8
   2eab0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2eab4:	mov	r6, r0
   2eab8:	cmp	r4, r6
   2eabc:	beq	2eb14 <flatcc_json_parser_generic_json@@Base+0x6d8>
   2eac0:	ldrb	r3, [r6]
   2eac4:	cmp	r3, #93	; 0x5d
   2eac8:	bne	2ec68 <flatcc_json_parser_generic_json@@Base+0x82c>
   2eacc:	add	r0, r6, #1
   2ead0:	sub	r3, r4, r0
   2ead4:	cmp	r3, #1
   2ead8:	ble	2eaec <flatcc_json_parser_generic_json@@Base+0x6b0>
   2eadc:	ldrb	r3, [r6, #1]
   2eae0:	cmp	r3, #32
   2eae4:	bhi	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2eae8:	beq	2eb2c <flatcc_json_parser_generic_json@@Base+0x6f0>
   2eaec:	mov	r2, r4
   2eaf0:	mov	r1, r0
   2eaf4:	mov	r0, r8
   2eaf8:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2eafc:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2eb00:	ldrb	r3, [r0, #2]
   2eb04:	cmp	r3, #32
   2eb08:	addhi	r6, r0, #2
   2eb0c:	bls	2eaa4 <flatcc_json_parser_generic_json@@Base+0x668>
   2eb10:	b	2eab8 <flatcc_json_parser_generic_json@@Base+0x67c>
   2eb14:	mov	r3, fp
   2eb18:	mov	r2, r4
   2eb1c:	mov	r1, r6
   2eb20:	mov	r0, r8
   2eb24:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2eb28:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2eb2c:	ldrb	r3, [r6, #2]
   2eb30:	cmp	r3, #32
   2eb34:	addhi	r0, r6, #2
   2eb38:	bls	2eaec <flatcc_json_parser_generic_json@@Base+0x6b0>
   2eb3c:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2eb40:	mov	r2, r4
   2eb44:	mov	r1, r0
   2eb48:	mov	r0, r8
   2eb4c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2eb50:	cmp	r4, r0
   2eb54:	beq	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2eb58:	ldrb	r3, [r0]
   2eb5c:	cmp	r3, #44	; 0x2c
   2eb60:	beq	2ec20 <flatcc_json_parser_generic_json@@Base+0x7e4>
   2eb64:	cmp	r3, #125	; 0x7d
   2eb68:	beq	2ebd8 <flatcc_json_parser_generic_json@@Base+0x79c>
   2eb6c:	mov	r3, sl
   2eb70:	mov	r2, r4
   2eb74:	mov	r1, r0
   2eb78:	mov	r0, r8
   2eb7c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2eb80:	mov	r5, r9
   2eb84:	subs	r3, r5, r7
   2eb88:	movne	r3, #1
   2eb8c:	cmp	r0, r4
   2eb90:	cmpne	r5, r7
   2eb94:	beq	2ed70 <flatcc_json_parser_generic_json@@Base+0x934>
   2eb98:	sub	r9, r5, #1
   2eb9c:	ldrb	r3, [r5, #-1]
   2eba0:	cmp	r3, #93	; 0x5d
   2eba4:	beq	2e9c8 <flatcc_json_parser_generic_json@@Base+0x58c>
   2eba8:	sub	r3, r4, r0
   2ebac:	cmp	r3, #1
   2ebb0:	ble	2eb40 <flatcc_json_parser_generic_json@@Base+0x704>
   2ebb4:	ldrb	r3, [r0]
   2ebb8:	cmp	r3, #32
   2ebbc:	bhi	2eb58 <flatcc_json_parser_generic_json@@Base+0x71c>
   2ebc0:	bne	2eb40 <flatcc_json_parser_generic_json@@Base+0x704>
   2ebc4:	ldrb	r3, [r0, #1]
   2ebc8:	cmp	r3, #32
   2ebcc:	addhi	r0, r0, #1
   2ebd0:	bls	2eb40 <flatcc_json_parser_generic_json@@Base+0x704>
   2ebd4:	b	2eb50 <flatcc_json_parser_generic_json@@Base+0x714>
   2ebd8:	add	r1, r0, #1
   2ebdc:	sub	r3, r4, r1
   2ebe0:	cmp	r3, #1
   2ebe4:	ble	2ebfc <flatcc_json_parser_generic_json@@Base+0x7c0>
   2ebe8:	ldrb	r3, [r0, #1]
   2ebec:	cmp	r3, #32
   2ebf0:	movhi	r0, r1
   2ebf4:	bhi	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ebf8:	beq	2ec0c <flatcc_json_parser_generic_json@@Base+0x7d0>
   2ebfc:	mov	r2, r4
   2ec00:	mov	r0, r8
   2ec04:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2ec08:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ec0c:	ldrb	r3, [r0, #2]
   2ec10:	cmp	r3, #32
   2ec14:	addhi	r0, r0, #2
   2ec18:	bls	2ebfc <flatcc_json_parser_generic_json@@Base+0x7c0>
   2ec1c:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ec20:	add	r6, r0, #1
   2ec24:	sub	r3, r4, r6
   2ec28:	cmp	r3, #1
   2ec2c:	ble	2ec40 <flatcc_json_parser_generic_json@@Base+0x804>
   2ec30:	ldrb	r3, [r0, #1]
   2ec34:	cmp	r3, #32
   2ec38:	bhi	2ec54 <flatcc_json_parser_generic_json@@Base+0x818>
   2ec3c:	beq	2ecfc <flatcc_json_parser_generic_json@@Base+0x8c0>
   2ec40:	mov	r2, r4
   2ec44:	mov	r1, r6
   2ec48:	mov	r0, r8
   2ec4c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2ec50:	mov	r6, r0
   2ec54:	cmp	r4, r6
   2ec58:	beq	2ed10 <flatcc_json_parser_generic_json@@Base+0x8d4>
   2ec5c:	ldrb	r3, [r6]
   2ec60:	cmp	r3, #125	; 0x7d
   2ec64:	beq	2ed28 <flatcc_json_parser_generic_json@@Base+0x8ec>
   2ec68:	cmp	r5, r7
   2ec6c:	beq	2ee38 <flatcc_json_parser_generic_json@@Base+0x9fc>
   2ec70:	ldrb	r3, [r5, #-1]
   2ec74:	cmp	r3, #125	; 0x7d
   2ec78:	beq	2e474 <flatcc_json_parser_generic_json@@Base+0x38>
   2ec7c:	ldrb	r3, [r6]
   2ec80:	cmp	r3, #57	; 0x39
   2ec84:	bls	2e6b0 <flatcc_json_parser_generic_json@@Base+0x274>
   2ec88:	cmp	r3, #91	; 0x5b
   2ec8c:	beq	2e8f4 <flatcc_json_parser_generic_json@@Base+0x4b8>
   2ec90:	cmp	r3, #123	; 0x7b
   2ec94:	bne	2e6c8 <flatcc_json_parser_generic_json@@Base+0x28c>
   2ec98:	add	r3, sp, #520	; 0x208
   2ec9c:	cmp	r5, r3
   2eca0:	beq	2e984 <flatcc_json_parser_generic_json@@Base+0x548>
   2eca4:	mov	r3, #125	; 0x7d
   2eca8:	strb	r3, [r5], #1
   2ecac:	add	r1, r6, #1
   2ecb0:	sub	r3, r4, r1
   2ecb4:	cmp	r3, #1
   2ecb8:	ble	2ecd0 <flatcc_json_parser_generic_json@@Base+0x894>
   2ecbc:	ldrb	r3, [r6, #1]
   2ecc0:	cmp	r3, #32
   2ecc4:	movhi	r6, r1
   2ecc8:	bhi	2ece0 <flatcc_json_parser_generic_json@@Base+0x8a4>
   2eccc:	beq	2e99c <flatcc_json_parser_generic_json@@Base+0x560>
   2ecd0:	mov	r2, r4
   2ecd4:	mov	r0, r8
   2ecd8:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2ecdc:	mov	r6, r0
   2ece0:	cmp	r4, r6
   2ece4:	beq	2edcc <flatcc_json_parser_generic_json@@Base+0x990>
   2ece8:	ldrb	r3, [r6]
   2ecec:	cmp	r3, #125	; 0x7d
   2ecf0:	bne	2ec68 <flatcc_json_parser_generic_json@@Base+0x82c>
   2ecf4:	mov	r0, r6
   2ecf8:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2ecfc:	ldrb	r3, [r0, #2]
   2ed00:	cmp	r3, #32
   2ed04:	addhi	r6, r0, #2
   2ed08:	bls	2ec40 <flatcc_json_parser_generic_json@@Base+0x804>
   2ed0c:	b	2ec54 <flatcc_json_parser_generic_json@@Base+0x818>
   2ed10:	mov	r3, sl
   2ed14:	mov	r2, r4
   2ed18:	mov	r1, r6
   2ed1c:	mov	r0, r8
   2ed20:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2ed24:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ed28:	add	r0, r6, #1
   2ed2c:	sub	r3, r4, r0
   2ed30:	cmp	r3, #1
   2ed34:	ble	2ed48 <flatcc_json_parser_generic_json@@Base+0x90c>
   2ed38:	ldrb	r3, [r6, #1]
   2ed3c:	cmp	r3, #32
   2ed40:	bhi	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ed44:	beq	2ed5c <flatcc_json_parser_generic_json@@Base+0x920>
   2ed48:	mov	r2, r4
   2ed4c:	mov	r1, r0
   2ed50:	mov	r0, r8
   2ed54:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2ed58:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ed5c:	ldrb	r3, [r6, #2]
   2ed60:	cmp	r3, #32
   2ed64:	addhi	r0, r6, #2
   2ed68:	bls	2ed48 <flatcc_json_parser_generic_json@@Base+0x90c>
   2ed6c:	b	2eb80 <flatcc_json_parser_generic_json@@Base+0x744>
   2ed70:	cmp	r0, r4
   2ed74:	movne	r3, #0
   2ed78:	andeq	r3, r3, #1
   2ed7c:	cmp	r3, #0
   2ed80:	bne	2eda0 <flatcc_json_parser_generic_json@@Base+0x964>
   2ed84:	add	sp, sp, #524	; 0x20c
   2ed88:	ldrd	r4, [sp]
   2ed8c:	ldrd	r6, [sp, #8]
   2ed90:	ldrd	r8, [sp, #16]
   2ed94:	ldrd	sl, [sp, #24]
   2ed98:	add	sp, sp, #32
   2ed9c:	pop	{pc}		; (ldr pc, [sp], #4)
   2eda0:	ldrb	r3, [r5, #-1]
   2eda4:	cmp	r3, #93	; 0x5d
   2eda8:	moveq	r3, #9
   2edac:	movne	r3, #10
   2edb0:	mov	r2, r4
   2edb4:	mov	r1, r0
   2edb8:	mov	r0, r8
   2edbc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2edc0:	b	2ed84 <flatcc_json_parser_generic_json@@Base+0x948>
   2edc4:	mov	r0, r2
   2edc8:	b	2ed84 <flatcc_json_parser_generic_json@@Base+0x948>
   2edcc:	mov	r0, r4
   2edd0:	b	2ed84 <flatcc_json_parser_generic_json@@Base+0x948>
   2edd4:	mov	r3, #20
   2edd8:	mov	r2, r4
   2eddc:	mov	r1, r0
   2ede0:	mov	r0, r8
   2ede4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2ede8:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2edec:	cmp	r3, #9
   2edf0:	bcc	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2edf4:	cmp	r3, #11
   2edf8:	bls	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2edfc:	cmp	r3, #13
   2ee00:	beq	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2ee04:	mov	r3, #6
   2ee08:	mov	r2, r4
   2ee0c:	mov	r1, r0
   2ee10:	mov	r0, r8
   2ee14:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2ee18:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2ee1c:	cmp	r3, #44	; 0x2c
   2ee20:	bne	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2ee24:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2ee28:	mov	r0, r2
   2ee2c:	b	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2ee30:	mov	r0, r2
   2ee34:	b	2eee4 <flatcc_json_parser_generic_json@@Base+0xaa8>
   2ee38:	ldrb	r3, [r6]
   2ee3c:	cmp	r3, #57	; 0x39
   2ee40:	bhi	2ef24 <flatcc_json_parser_generic_json@@Base+0xae8>
   2ee44:	cmp	r3, #48	; 0x30
   2ee48:	bcs	2ee5c <flatcc_json_parser_generic_json@@Base+0xa20>
   2ee4c:	cmp	r3, #34	; 0x22
   2ee50:	beq	2e6ec <flatcc_json_parser_generic_json@@Base+0x2b0>
   2ee54:	cmp	r3, #45	; 0x2d
   2ee58:	bne	2e6c8 <flatcc_json_parser_generic_json@@Base+0x28c>
   2ee5c:	cmp	r4, r6
   2ee60:	moveq	r0, r6
   2ee64:	beq	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2ee68:	cmp	r3, #45	; 0x2d
   2ee6c:	beq	2e778 <flatcc_json_parser_generic_json@@Base+0x33c>
   2ee70:	ldrb	r3, [r6]
   2ee74:	cmp	r3, #48	; 0x30
   2ee78:	beq	2e79c <flatcc_json_parser_generic_json@@Base+0x360>
   2ee7c:	sub	r3, r3, #49	; 0x31
   2ee80:	uxtb	r3, r3
   2ee84:	cmp	r3, #8
   2ee88:	bhi	2e7ac <flatcc_json_parser_generic_json@@Base+0x370>
   2ee8c:	add	r0, r6, #1
   2ee90:	cmp	r4, r0
   2ee94:	beq	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2ee98:	ldrb	r3, [r6, #1]
   2ee9c:	sub	r3, r3, #48	; 0x30
   2eea0:	uxtb	r3, r3
   2eea4:	cmp	r3, #9
   2eea8:	bhi	2eed8 <flatcc_json_parser_generic_json@@Base+0xa9c>
   2eeac:	add	r6, r6, #2
   2eeb0:	mov	r2, r4
   2eeb4:	mov	r0, r6
   2eeb8:	cmp	r6, r2
   2eebc:	beq	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2eec0:	add	r6, r6, #1
   2eec4:	ldrb	r3, [r0]
   2eec8:	sub	r3, r3, #48	; 0x30
   2eecc:	uxtb	r3, r3
   2eed0:	cmp	r3, #9
   2eed4:	bls	2eeb4 <flatcc_json_parser_generic_json@@Base+0xa78>
   2eed8:	ldrb	r3, [r0]
   2eedc:	cmp	r3, #46	; 0x2e
   2eee0:	beq	2e7c4 <flatcc_json_parser_generic_json@@Base+0x388>
   2eee4:	ldrb	r3, [r0]
   2eee8:	and	r3, r3, #223	; 0xdf
   2eeec:	cmp	r3, #69	; 0x45
   2eef0:	beq	2e840 <flatcc_json_parser_generic_json@@Base+0x404>
   2eef4:	ldrb	r3, [r0]
   2eef8:	cmp	r3, #32
   2eefc:	beq	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2ef00:	bls	2edec <flatcc_json_parser_generic_json@@Base+0x9b0>
   2ef04:	cmp	r3, #58	; 0x3a
   2ef08:	beq	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2ef0c:	bls	2ee1c <flatcc_json_parser_generic_json@@Base+0x9e0>
   2ef10:	cmp	r3, #93	; 0x5d
   2ef14:	beq	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2ef18:	cmp	r3, #125	; 0x7d
   2ef1c:	bne	2ee04 <flatcc_json_parser_generic_json@@Base+0x9c8>
   2ef20:	b	2e6e0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2ef24:	cmp	r3, #91	; 0x5b
   2ef28:	beq	2e900 <flatcc_json_parser_generic_json@@Base+0x4c4>
   2ef2c:	cmp	r3, #123	; 0x7b
   2ef30:	beq	2ec98 <flatcc_json_parser_generic_json@@Base+0x85c>
   2ef34:	b	2e6c8 <flatcc_json_parser_generic_json@@Base+0x28c>
   2ef38:	mov	r0, r6
   2ef3c:	b	2e554 <flatcc_json_parser_generic_json@@Base+0x118>

0002ef40 <flatcc_json_parser_unmatched_symbol@@Base>:
   2ef40:	strd	r4, [sp, #-16]!
   2ef44:	str	r6, [sp, #8]
   2ef48:	str	lr, [sp, #12]
   2ef4c:	mov	r5, r0
   2ef50:	mov	r4, r2
   2ef54:	ldr	r3, [r0, #8]
   2ef58:	tst	r3, #1
   2ef5c:	beq	2f15c <flatcc_json_parser_unmatched_symbol@@Base+0x21c>
   2ef60:	ldr	r3, [r0, #12]
   2ef64:	cmp	r3, #0
   2ef68:	bne	2ef88 <flatcc_json_parser_unmatched_symbol@@Base+0x48>
   2ef6c:	cmp	r1, r2
   2ef70:	beq	2f168 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   2ef74:	ldrb	r3, [r1]
   2ef78:	cmp	r3, #34	; 0x22
   2ef7c:	bne	2f0a4 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   2ef80:	add	r1, r1, #1
   2ef84:	b	2f000 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   2ef88:	cmp	r1, r2
   2ef8c:	beq	2f0fc <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   2ef90:	ldrb	r3, [r1]
   2ef94:	cmp	r3, #32
   2ef98:	bls	2f000 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   2ef9c:	mov	r2, r1
   2efa0:	b	2efc4 <flatcc_json_parser_unmatched_symbol@@Base+0x84>
   2efa4:	add	r1, r2, #1
   2efa8:	cmp	r4, r1
   2efac:	beq	2f068 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2efb0:	ldrb	r0, [r1]
   2efb4:	add	r2, r2, #1
   2efb8:	cmp	r0, #32
   2efbc:	bls	2f068 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2efc0:	mov	r3, r0
   2efc4:	mov	r1, r2
   2efc8:	cmp	r3, #46	; 0x2e
   2efcc:	cmpne	r3, #95	; 0x5f
   2efd0:	beq	2efa4 <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   2efd4:	tst	r3, #128	; 0x80
   2efd8:	bne	2efa4 <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   2efdc:	sub	r0, r3, #48	; 0x30
   2efe0:	uxtb	r0, r0
   2efe4:	cmp	r0, #9
   2efe8:	bls	2efa4 <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   2efec:	orr	r0, r3, #32
   2eff0:	sub	r0, r0, #97	; 0x61
   2eff4:	uxtb	r0, r0
   2eff8:	cmp	r0, #25
   2effc:	bls	2f060 <flatcc_json_parser_unmatched_symbol@@Base+0x120>
   2f000:	sub	r3, r4, r1
   2f004:	cmp	r3, #1
   2f008:	ble	2f01c <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   2f00c:	ldrb	r3, [r1]
   2f010:	cmp	r3, #32
   2f014:	bhi	2f02c <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   2f018:	beq	2f0e8 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   2f01c:	mov	r2, r4
   2f020:	mov	r0, r5
   2f024:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2f028:	mov	r1, r0
   2f02c:	cmp	r4, r1
   2f030:	beq	2f040 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   2f034:	ldrb	r3, [r1]
   2f038:	cmp	r3, #58	; 0x3a
   2f03c:	beq	2f104 <flatcc_json_parser_unmatched_symbol@@Base+0x1c4>
   2f040:	mov	r3, #4
   2f044:	mov	r2, r4
   2f048:	mov	r0, r5
   2f04c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f050:	ldrd	r4, [sp]
   2f054:	ldr	r6, [sp, #8]
   2f058:	add	sp, sp, #12
   2f05c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f060:	add	r1, r2, #1
   2f064:	b	2efa8 <flatcc_json_parser_unmatched_symbol@@Base+0x68>
   2f068:	cmp	r3, #46	; 0x2e
   2f06c:	bne	2f000 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   2f070:	mov	r3, #5
   2f074:	mov	r2, r4
   2f078:	mov	r0, r5
   2f07c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f080:	mov	r1, r0
   2f084:	b	2f000 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   2f088:	add	r3, r1, #1
   2f08c:	add	r1, r3, #1
   2f090:	cmp	r4, r1
   2f094:	beq	2f0d0 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   2f098:	ldrb	r3, [r3, #1]
   2f09c:	cmp	r3, #34	; 0x22
   2f0a0:	beq	2f0c4 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   2f0a4:	cmp	r3, #92	; 0x5c
   2f0a8:	movne	r3, r1
   2f0ac:	bne	2f08c <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   2f0b0:	sub	r3, r4, r1
   2f0b4:	cmp	r3, #1
   2f0b8:	bgt	2f088 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   2f0bc:	cmp	r4, r1
   2f0c0:	beq	2f0d0 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   2f0c4:	ldrb	r3, [r1]
   2f0c8:	cmp	r3, #34	; 0x22
   2f0cc:	beq	2ef80 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   2f0d0:	mov	r3, #20
   2f0d4:	mov	r2, r4
   2f0d8:	mov	r0, r5
   2f0dc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f0e0:	mov	r1, r0
   2f0e4:	b	2f000 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   2f0e8:	ldrb	r3, [r1, #1]
   2f0ec:	cmp	r3, #32
   2f0f0:	addhi	r1, r1, #1
   2f0f4:	bls	2f01c <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   2f0f8:	b	2f02c <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   2f0fc:	mov	r1, r2
   2f100:	b	2f01c <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   2f104:	add	r0, r1, #1
   2f108:	sub	r3, r4, r0
   2f10c:	cmp	r3, #1
   2f110:	ble	2f124 <flatcc_json_parser_unmatched_symbol@@Base+0x1e4>
   2f114:	ldrb	r3, [r1, #1]
   2f118:	cmp	r3, #32
   2f11c:	bhi	2f134 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   2f120:	beq	2f148 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   2f124:	mov	r2, r4
   2f128:	mov	r1, r0
   2f12c:	mov	r0, r5
   2f130:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   2f134:	mov	r2, r4
   2f138:	mov	r1, r0
   2f13c:	mov	r0, r5
   2f140:	bl	2e43c <flatcc_json_parser_generic_json@@Base>
   2f144:	b	2f050 <flatcc_json_parser_unmatched_symbol@@Base+0x110>
   2f148:	ldrb	r3, [r1, #2]
   2f14c:	cmp	r3, #32
   2f150:	addhi	r0, r1, #2
   2f154:	bls	2f124 <flatcc_json_parser_unmatched_symbol@@Base+0x1e4>
   2f158:	b	2f134 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   2f15c:	mov	r3, #13
   2f160:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f164:	b	2f050 <flatcc_json_parser_unmatched_symbol@@Base+0x110>
   2f168:	mov	r1, r2
   2f16c:	b	2f0d0 <flatcc_json_parser_unmatched_symbol@@Base+0x190>

0002f170 <flatcc_json_parser_integer@@Base>:
   2f170:	cmp	r1, r2
   2f174:	beq	2f27c <flatcc_json_parser_integer@@Base+0x10c>
   2f178:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f17c:	strd	r6, [sp, #8]
   2f180:	strd	r8, [sp, #16]
   2f184:	strd	sl, [sp, #24]
   2f188:	str	lr, [sp, #32]
   2f18c:	sub	sp, sp, #12
   2f190:	mov	r8, r0
   2f194:	ldrb	lr, [r1]
   2f198:	cmp	lr, #45	; 0x2d
   2f19c:	movne	lr, #0
   2f1a0:	moveq	lr, #1
   2f1a4:	str	lr, [r3]
   2f1a8:	add	r0, r1, lr
   2f1ac:	cmp	r2, r0
   2f1b0:	beq	2f2d4 <flatcc_json_parser_integer@@Base+0x164>
   2f1b4:	mov	ip, r1
   2f1b8:	str	r8, [sp, #4]
   2f1bc:	ldrb	r8, [r1, lr]
   2f1c0:	sub	r3, r8, #48	; 0x30
   2f1c4:	uxtb	r3, r3
   2f1c8:	cmp	r3, #9
   2f1cc:	bhi	2f28c <flatcc_json_parser_integer@@Base+0x11c>
   2f1d0:	uxtb	r8, r8
   2f1d4:	mov	r9, #0
   2f1d8:	subs	r4, r8, #48	; 0x30
   2f1dc:	sbc	r5, r9, #0
   2f1e0:	add	lr, r0, #1
   2f1e4:	mov	sl, r2
   2f1e8:	mov	r0, lr
   2f1ec:	cmp	lr, sl
   2f1f0:	beq	2f2dc <flatcc_json_parser_integer@@Base+0x16c>
   2f1f4:	ldrb	r8, [lr], #1
   2f1f8:	sub	r3, r8, #48	; 0x30
   2f1fc:	uxtb	r3, r3
   2f200:	cmp	r3, #9
   2f204:	bhi	2f294 <flatcc_json_parser_integer@@Base+0x124>
   2f208:	lsl	fp, r5, #2
   2f20c:	lsl	r3, r4, #2
   2f210:	orr	r9, fp, r4, lsr #30
   2f214:	adds	r3, r3, r4
   2f218:	adc	r9, r9, r5
   2f21c:	adds	r3, r3, r3
   2f220:	adc	r9, r9, r9
   2f224:	subs	r3, r3, #48	; 0x30
   2f228:	sbc	fp, r9, #0
   2f22c:	uxtb	r8, r8
   2f230:	mov	r9, #0
   2f234:	adds	r6, r8, r3
   2f238:	adc	r7, r9, fp
   2f23c:	cmp	r7, r5
   2f240:	cmpeq	r6, r4
   2f244:	bcc	2f254 <flatcc_json_parser_integer@@Base+0xe4>
   2f248:	mov	r4, r6
   2f24c:	mov	r5, r7
   2f250:	b	2f1e8 <flatcc_json_parser_integer@@Base+0x78>
   2f254:	mov	r3, #8
   2f258:	mov	r1, r0
   2f25c:	ldr	r0, [sp, #4]
   2f260:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f264:	b	2f2b8 <flatcc_json_parser_integer@@Base+0x148>
   2f268:	mov	r3, #12
   2f26c:	mov	r1, r0
   2f270:	ldr	r0, [sp, #4]
   2f274:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f278:	b	2f2b8 <flatcc_json_parser_integer@@Base+0x148>
   2f27c:	mov	r0, r2
   2f280:	bx	lr
   2f284:	mov	r0, ip
   2f288:	b	2f2b8 <flatcc_json_parser_integer@@Base+0x148>
   2f28c:	mov	r4, #0
   2f290:	mov	r5, #0
   2f294:	cmp	r0, ip
   2f298:	beq	2f284 <flatcc_json_parser_integer@@Base+0x114>
   2f29c:	ldrb	r3, [r0]
   2f2a0:	and	r1, r3, #223	; 0xdf
   2f2a4:	cmp	r3, #46	; 0x2e
   2f2a8:	cmpne	r1, #69	; 0x45
   2f2ac:	beq	2f268 <flatcc_json_parser_integer@@Base+0xf8>
   2f2b0:	ldr	r3, [sp, #48]	; 0x30
   2f2b4:	strd	r4, [r3]
   2f2b8:	add	sp, sp, #12
   2f2bc:	ldrd	r4, [sp]
   2f2c0:	ldrd	r6, [sp, #8]
   2f2c4:	ldrd	r8, [sp, #16]
   2f2c8:	ldrd	sl, [sp, #24]
   2f2cc:	add	sp, sp, #32
   2f2d0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f2d4:	mov	r4, #0
   2f2d8:	mov	r5, #0
   2f2dc:	cmp	r1, r0
   2f2e0:	bne	2f2b0 <flatcc_json_parser_integer@@Base+0x140>
   2f2e4:	b	2f2b8 <flatcc_json_parser_integer@@Base+0x148>

0002f2e8 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2f2e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f2ec:	strd	r6, [sp, #8]
   2f2f0:	strd	r8, [sp, #16]
   2f2f4:	strd	sl, [sp, #24]
   2f2f8:	str	lr, [sp, #32]
   2f2fc:	sub	sp, sp, #28
   2f300:	mov	r7, r0
   2f304:	mov	r6, r2
   2f308:	mov	r8, r3
   2f30c:	cmp	r1, r2
   2f310:	beq	2f324 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c>
   2f314:	ldrb	r3, [r1]
   2f318:	cmp	r3, #34	; 0x22
   2f31c:	addeq	r4, r1, #1
   2f320:	beq	2f338 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x50>
   2f324:	mov	r3, #16
   2f328:	mov	r2, r6
   2f32c:	mov	r0, r7
   2f330:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f334:	mov	r4, r0
   2f338:	mov	r2, r6
   2f33c:	mov	r1, r4
   2f340:	mov	r0, r7
   2f344:	bl	2d1a4 <flatcc_json_parser_string_part@@Base>
   2f348:	mov	r5, r0
   2f34c:	cmp	r6, r0
   2f350:	beq	2f360 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   2f354:	ldrb	r3, [r0]
   2f358:	cmp	r3, #34	; 0x22
   2f35c:	beq	2f3a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   2f360:	mov	r3, #0
   2f364:	str	r3, [r8]
   2f368:	ldr	r3, [sp, #64]	; 0x40
   2f36c:	cmp	r3, #0
   2f370:	movne	r3, #32
   2f374:	moveq	r3, #31
   2f378:	mov	r2, r6
   2f37c:	mov	r1, r5
   2f380:	mov	r0, r7
   2f384:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f388:	add	sp, sp, #28
   2f38c:	ldrd	r4, [sp]
   2f390:	ldrd	r6, [sp, #8]
   2f394:	ldrd	r8, [sp, #16]
   2f398:	ldrd	sl, [sp, #24]
   2f39c:	add	sp, sp, #32
   2f3a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f3a4:	sub	sl, r0, r4
   2f3a8:	and	r3, sl, #3
   2f3ac:	lsr	r9, sl, #2
   2f3b0:	add	r9, r9, r9, lsl #1
   2f3b4:	cmp	r3, #2
   2f3b8:	addeq	r9, r9, #1
   2f3bc:	beq	2f3c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe0>
   2f3c0:	cmp	r3, #3
   2f3c4:	addeq	r9, r9, #2
   2f3c8:	mvn	r3, #0
   2f3cc:	mov	r2, #1
   2f3d0:	mov	r1, r2
   2f3d4:	ldr	r0, [r7]
   2f3d8:	bl	278ec <flatcc_builder_start_vector@@Base>
   2f3dc:	cmp	r0, #0
   2f3e0:	beq	2f404 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   2f3e4:	mov	r3, #0
   2f3e8:	str	r3, [r8]
   2f3ec:	mov	r3, #33	; 0x21
   2f3f0:	mov	r2, r6
   2f3f4:	mov	r1, r5
   2f3f8:	mov	r0, r7
   2f3fc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f400:	b	2f388 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   2f404:	mov	r1, r9
   2f408:	ldr	r0, [r7]
   2f40c:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   2f410:	subs	r3, r0, #0
   2f414:	str	r3, [sp]
   2f418:	beq	2f3e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   2f41c:	ldr	r3, [sp, #64]	; 0x40
   2f420:	adds	r3, r3, #0
   2f424:	movne	r3, #1
   2f428:	cmp	r3, #0
   2f42c:	beq	2f448 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   2f430:	cmp	r3, #1
   2f434:	ldreq	r0, [pc, #708]	; 2f700 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x418>
   2f438:	beq	2f44c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x164>
   2f43c:	mov	r5, #0
   2f440:	add	r5, r4, r5
   2f444:	b	2f360 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   2f448:	ldr	r0, [pc, #692]	; 2f704 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x41c>
   2f44c:	cmp	r9, #0
   2f450:	movne	fp, r9
   2f454:	mvneq	fp, #0
   2f458:	str	sl, [sp, #8]
   2f45c:	mov	ip, r4
   2f460:	ldr	r3, [sp]
   2f464:	str	r3, [sp, #4]
   2f468:	add	fp, r3, fp
   2f46c:	ldr	r3, [sp, #4]
   2f470:	sub	r3, fp, r3
   2f474:	str	r3, [sp, #12]
   2f478:	ldr	r1, [sp, #8]
   2f47c:	cmp	r1, #0
   2f480:	beq	2f48c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a4>
   2f484:	mov	r3, #0
   2f488:	b	2f4cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   2f48c:	ldr	r1, [sp, #8]
   2f490:	cmp	r1, #2
   2f494:	beq	2f604 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x31c>
   2f498:	cmp	r1, #3
   2f49c:	beq	2f6a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3bc>
   2f4a0:	cmp	r1, #0
   2f4a4:	bne	2f518 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   2f4a8:	b	2f640 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x358>
   2f4ac:	add	ip, ip, #1
   2f4b0:	sub	r1, r1, #1
   2f4b4:	sub	r3, r3, #1
   2f4b8:	add	r3, r3, #1
   2f4bc:	cmp	r3, #3
   2f4c0:	bhi	2f59c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b4>
   2f4c4:	cmp	r3, r1
   2f4c8:	beq	2f490 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a8>
   2f4cc:	ldrb	r2, [ip, r3]
   2f4d0:	ldrb	r2, [r0, r2]
   2f4d4:	add	lr, sp, #24
   2f4d8:	add	lr, lr, r3
   2f4dc:	strb	r2, [lr, #-4]
   2f4e0:	cmp	r2, #63	; 0x3f
   2f4e4:	bls	2f4b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2f4e8:	cmp	r2, #65	; 0x41
   2f4ec:	beq	2f4ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   2f4f0:	cmp	r2, #66	; 0x42
   2f4f4:	movne	r2, r3
   2f4f8:	beq	2f524 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x23c>
   2f4fc:	sub	r2, r1, r2
   2f500:	cmp	r3, #2
   2f504:	beq	2f608 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   2f508:	cmp	r3, #3
   2f50c:	beq	2f6a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
   2f510:	cmp	r3, #0
   2f514:	beq	2f630 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   2f518:	ldr	r3, [sp, #8]
   2f51c:	sub	r5, sl, r3
   2f520:	b	2f440 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   2f524:	add	r2, r3, #1
   2f528:	cmp	r2, #7
   2f52c:	movhi	lr, #0
   2f530:	movls	lr, #1
   2f534:	cmp	r1, r2
   2f538:	movls	lr, #0
   2f53c:	cmp	lr, #0
   2f540:	beq	2f4fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   2f544:	add	lr, ip, r2
   2f548:	ldrb	ip, [ip, r2]
   2f54c:	ldrb	ip, [r0, ip]
   2f550:	sub	ip, ip, #65	; 0x41
   2f554:	uxtb	ip, ip
   2f558:	cmp	ip, #1
   2f55c:	bhi	2f4fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   2f560:	add	r2, r2, #1
   2f564:	cmp	r1, r2
   2f568:	movls	ip, #0
   2f56c:	movhi	ip, #1
   2f570:	cmp	r2, #7
   2f574:	movhi	ip, #0
   2f578:	cmp	ip, #0
   2f57c:	beq	2f4fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   2f580:	ldrb	ip, [lr, #1]!
   2f584:	ldrb	ip, [r0, ip]
   2f588:	sub	ip, ip, #65	; 0x41
   2f58c:	uxtb	ip, ip
   2f590:	cmp	ip, #1
   2f594:	bls	2f560 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x278>
   2f598:	b	2f4fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   2f59c:	ldr	r3, [sp, #12]
   2f5a0:	cmp	r3, #2
   2f5a4:	bls	2f6f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   2f5a8:	ldrb	lr, [sp, #21]
   2f5ac:	ldrb	r2, [sp, #20]
   2f5b0:	lsr	r3, lr, #4
   2f5b4:	orr	r3, r3, r2, lsl #2
   2f5b8:	ldr	r2, [sp, #4]
   2f5bc:	strb	r3, [r2]
   2f5c0:	ldrb	r2, [sp, #22]
   2f5c4:	lsr	r3, r2, #2
   2f5c8:	orr	r3, r3, lr, lsl #4
   2f5cc:	ldr	lr, [sp, #4]
   2f5d0:	strb	r3, [lr, #1]
   2f5d4:	ldrb	r3, [sp, #23]
   2f5d8:	orr	r3, r3, r2, lsl #6
   2f5dc:	strb	r3, [lr, #2]
   2f5e0:	add	r3, lr, #3
   2f5e4:	str	r3, [sp, #4]
   2f5e8:	add	ip, ip, #4
   2f5ec:	sub	r2, r1, #4
   2f5f0:	str	r2, [sp, #8]
   2f5f4:	cmp	r3, fp
   2f5f8:	bne	2f46c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x184>
   2f5fc:	ldr	r2, [sp, #8]
   2f600:	b	2f630 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   2f604:	mov	r2, #0
   2f608:	ldrb	r3, [sp, #21]
   2f60c:	lsl	r1, r3, #4
   2f610:	tst	r1, #255	; 0xff
   2f614:	bne	2f6f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   2f618:	ldrb	r1, [sp, #20]
   2f61c:	lsr	r3, r3, #4
   2f620:	orr	r3, r3, r1, lsl #2
   2f624:	ldr	r1, [sp, #4]
   2f628:	strb	r3, [r1], #1
   2f62c:	str	r1, [sp, #4]
   2f630:	sub	r2, sl, r2
   2f634:	cmp	sl, r2
   2f638:	addne	r5, r4, r2
   2f63c:	bne	2f360 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   2f640:	ldr	r3, [sp, #4]
   2f644:	ldr	r2, [sp]
   2f648:	sub	r1, r3, r2
   2f64c:	cmp	r9, r1
   2f650:	bls	2f668 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x380>
   2f654:	sub	r1, r9, r1
   2f658:	ldr	r0, [r7]
   2f65c:	bl	27714 <flatcc_builder_truncate_vector@@Base>
   2f660:	cmp	r0, #0
   2f664:	bne	2f3e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   2f668:	ldr	r0, [r7]
   2f66c:	bl	289f0 <flatcc_builder_end_vector@@Base>
   2f670:	str	r0, [r8]
   2f674:	cmp	r0, #0
   2f678:	beq	2f3e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   2f67c:	ldrb	r3, [r5]
   2f680:	cmp	r3, #34	; 0x22
   2f684:	addeq	r0, r5, #1
   2f688:	beq	2f388 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   2f68c:	mov	r3, #20
   2f690:	mov	r2, r6
   2f694:	mov	r1, r5
   2f698:	mov	r0, r7
   2f69c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f6a0:	b	2f388 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   2f6a4:	mov	r2, #0
   2f6a8:	ldrb	r3, [sp, #22]
   2f6ac:	lsl	r1, r3, #6
   2f6b0:	tst	r1, #255	; 0xff
   2f6b4:	bne	2f6f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   2f6b8:	ldr	r1, [sp, #12]
   2f6bc:	cmp	r1, #1
   2f6c0:	bls	2f6f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   2f6c4:	ldrb	r0, [sp, #21]
   2f6c8:	ldrb	ip, [sp, #20]
   2f6cc:	lsr	r1, r0, #4
   2f6d0:	orr	r1, r1, ip, lsl #2
   2f6d4:	ldr	ip, [sp, #4]
   2f6d8:	strb	r1, [ip]
   2f6dc:	lsr	r3, r3, #2
   2f6e0:	orr	r3, r3, r0, lsl #4
   2f6e4:	strb	r3, [ip, #1]
   2f6e8:	add	r3, ip, #2
   2f6ec:	str	r3, [sp, #4]
   2f6f0:	b	2f630 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   2f6f4:	ldr	r3, [sp, #8]
   2f6f8:	sub	r5, sl, r3
   2f6fc:	b	2f440 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   2f700:	andeq	r3, r4, r0, lsl lr
   2f704:	andeq	r3, r4, r0, lsl sp

0002f708 <flatcc_json_parser_build_string@@Base>:
   2f708:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2f70c:	strd	r6, [sp, #8]
   2f710:	str	r8, [sp, #16]
   2f714:	str	lr, [sp, #20]
   2f718:	sub	sp, sp, #8
   2f71c:	mov	r5, r0
   2f720:	mov	r6, r2
   2f724:	mov	r8, r3
   2f728:	cmp	r1, r2
   2f72c:	beq	2f740 <flatcc_json_parser_build_string@@Base+0x38>
   2f730:	ldrb	r3, [r1]
   2f734:	cmp	r3, #34	; 0x22
   2f738:	addeq	r7, r1, #1
   2f73c:	beq	2f754 <flatcc_json_parser_build_string@@Base+0x4c>
   2f740:	mov	r3, #16
   2f744:	mov	r2, r6
   2f748:	mov	r0, r5
   2f74c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f750:	mov	r7, r0
   2f754:	mov	r2, r6
   2f758:	mov	r1, r7
   2f75c:	mov	r0, r5
   2f760:	bl	2d1a4 <flatcc_json_parser_string_part@@Base>
   2f764:	mov	r4, r0
   2f768:	cmp	r6, r0
   2f76c:	beq	2f77c <flatcc_json_parser_build_string@@Base+0x74>
   2f770:	ldrb	r3, [r0]
   2f774:	cmp	r3, #34	; 0x22
   2f778:	beq	2f7b0 <flatcc_json_parser_build_string@@Base+0xa8>
   2f77c:	ldr	r0, [r5]
   2f780:	bl	27a10 <flatcc_builder_start_string@@Base>
   2f784:	cmp	r0, #0
   2f788:	beq	2f7f0 <flatcc_json_parser_build_string@@Base+0xe8>
   2f78c:	mov	r3, #0
   2f790:	str	r3, [r8]
   2f794:	mov	r0, r4
   2f798:	add	sp, sp, #8
   2f79c:	ldrd	r4, [sp]
   2f7a0:	ldrd	r6, [sp, #8]
   2f7a4:	ldr	r8, [sp, #16]
   2f7a8:	add	sp, sp, #20
   2f7ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2f7b0:	sub	r2, r0, r7
   2f7b4:	mov	r1, r7
   2f7b8:	ldr	r0, [r5]
   2f7bc:	bl	294e0 <flatcc_builder_create_string@@Base>
   2f7c0:	str	r0, [r8]
   2f7c4:	ldrb	r3, [r4]
   2f7c8:	cmp	r3, #34	; 0x22
   2f7cc:	addeq	r4, r4, #1
   2f7d0:	beq	2f794 <flatcc_json_parser_build_string@@Base+0x8c>
   2f7d4:	mov	r3, #20
   2f7d8:	mov	r2, r6
   2f7dc:	mov	r1, r4
   2f7e0:	mov	r0, r5
   2f7e4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f7e8:	mov	r4, r0
   2f7ec:	b	2f794 <flatcc_json_parser_build_string@@Base+0x8c>
   2f7f0:	sub	r2, r4, r7
   2f7f4:	mov	r1, r7
   2f7f8:	ldr	r0, [r5]
   2f7fc:	bl	275a8 <flatcc_builder_append_string@@Base>
   2f800:	cmp	r0, #0
   2f804:	beq	2f78c <flatcc_json_parser_build_string@@Base+0x84>
   2f808:	cmp	r6, r4
   2f80c:	beq	2f8a8 <flatcc_json_parser_build_string@@Base+0x1a0>
   2f810:	ldrb	r3, [r4]
   2f814:	cmp	r3, #34	; 0x22
   2f818:	bne	2f840 <flatcc_json_parser_build_string@@Base+0x138>
   2f81c:	ldr	r0, [r5]
   2f820:	bl	29684 <flatcc_builder_end_string@@Base>
   2f824:	str	r0, [r8]
   2f828:	b	2f7c4 <flatcc_json_parser_build_string@@Base+0xbc>
   2f82c:	mov	r4, r7
   2f830:	b	2f78c <flatcc_json_parser_build_string@@Base+0x84>
   2f834:	ldrb	r3, [r4]
   2f838:	cmp	r3, #34	; 0x22
   2f83c:	beq	2f81c <flatcc_json_parser_build_string@@Base+0x114>
   2f840:	add	r3, sp, #4
   2f844:	mov	r2, r6
   2f848:	mov	r1, r4
   2f84c:	mov	r0, r5
   2f850:	bl	2d97c <flatcc_json_parser_string_escape@@Base>
   2f854:	mov	r7, r0
   2f858:	ldrb	r2, [sp, #4]
   2f85c:	add	r1, sp, #5
   2f860:	ldr	r0, [r5]
   2f864:	bl	275a8 <flatcc_builder_append_string@@Base>
   2f868:	cmp	r0, #0
   2f86c:	beq	2f82c <flatcc_json_parser_build_string@@Base+0x124>
   2f870:	mov	r2, r6
   2f874:	mov	r1, r7
   2f878:	mov	r0, r5
   2f87c:	bl	2d1a4 <flatcc_json_parser_string_part@@Base>
   2f880:	mov	r4, r0
   2f884:	cmp	r6, r0
   2f888:	beq	2f8a8 <flatcc_json_parser_build_string@@Base+0x1a0>
   2f88c:	sub	r2, r0, r7
   2f890:	mov	r1, r7
   2f894:	ldr	r0, [r5]
   2f898:	bl	275a8 <flatcc_builder_append_string@@Base>
   2f89c:	cmp	r0, #0
   2f8a0:	bne	2f834 <flatcc_json_parser_build_string@@Base+0x12c>
   2f8a4:	b	2f78c <flatcc_json_parser_build_string@@Base+0x84>
   2f8a8:	ldr	r0, [r5]
   2f8ac:	bl	29684 <flatcc_builder_end_string@@Base>
   2f8b0:	str	r0, [r8]
   2f8b4:	b	2f7d4 <flatcc_json_parser_build_string@@Base+0xcc>

0002f8b8 <flatcc_json_parser_prepare_unions@@Base>:
   2f8b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2f8bc:	strd	r6, [sp, #8]
   2f8c0:	str	r8, [sp, #16]
   2f8c4:	str	lr, [sp, #20]
   2f8c8:	mov	r6, r0
   2f8cc:	mov	r4, r1
   2f8d0:	mov	r7, r2
   2f8d4:	mov	r5, r3
   2f8d8:	add	r1, r3, r3, lsl #1
   2f8dc:	lsl	r1, r1, #3
   2f8e0:	add	r1, r1, #8
   2f8e4:	ldr	r0, [r0]
   2f8e8:	bl	26578 <flatcc_builder_enter_user_frame@@Base>
   2f8ec:	ldr	r3, [sp, #24]
   2f8f0:	str	r0, [r3]
   2f8f4:	cmp	r0, #0
   2f8f8:	beq	2f924 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   2f8fc:	mov	r1, r0
   2f900:	ldr	r0, [r6]
   2f904:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2f908:	str	r5, [r0]
   2f90c:	mov	r0, r4
   2f910:	ldrd	r4, [sp]
   2f914:	ldrd	r6, [sp, #8]
   2f918:	ldr	r8, [sp, #16]
   2f91c:	add	sp, sp, #20
   2f920:	pop	{pc}		; (ldr pc, [sp], #4)
   2f924:	mov	r3, #33	; 0x21
   2f928:	mov	r2, r7
   2f92c:	mov	r1, r4
   2f930:	mov	r0, r6
   2f934:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f938:	b	2f910 <flatcc_json_parser_prepare_unions@@Base+0x58>

0002f93c <flatcc_json_parser_finalize_unions@@Base>:
   2f93c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2f940:	strd	r6, [sp, #8]
   2f944:	str	r8, [sp, #16]
   2f948:	str	lr, [sp, #20]
   2f94c:	mov	r4, r0
   2f950:	mov	r6, r1
   2f954:	mov	r7, r2
   2f958:	mov	r5, r3
   2f95c:	mov	r1, r3
   2f960:	ldr	r0, [r0]
   2f964:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2f968:	ldr	r3, [r0, #4]
   2f96c:	cmp	r3, #0
   2f970:	bne	2f998 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   2f974:	mov	r1, r5
   2f978:	ldr	r0, [r4]
   2f97c:	bl	2668c <flatcc_builder_exit_user_frame_at@@Base>
   2f980:	mov	r0, r6
   2f984:	ldrd	r4, [sp]
   2f988:	ldrd	r6, [sp, #8]
   2f98c:	ldr	r8, [sp, #16]
   2f990:	add	sp, sp, #20
   2f994:	pop	{pc}		; (ldr pc, [sp], #4)
   2f998:	mov	r3, #27
   2f99c:	mov	r2, r7
   2f9a0:	mov	r1, r6
   2f9a4:	mov	r0, r4
   2f9a8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2f9ac:	mov	r6, r0
   2f9b0:	b	2f974 <flatcc_json_parser_finalize_unions@@Base+0x38>

0002f9b4 <flatcc_json_parser_union@@Base>:
   2f9b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   2f9b8:	strd	r6, [sp, #8]
   2f9bc:	str	lr, [sp, #16]
   2f9c0:	sub	sp, sp, #20
   2f9c4:	mov	r5, r0
   2f9c8:	mov	r7, r1
   2f9cc:	mov	r6, r2
   2f9d0:	mov	r4, r3
   2f9d4:	ldr	r1, [sp, #44]	; 0x2c
   2f9d8:	ldr	r0, [r0]
   2f9dc:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2f9e0:	add	r3, r4, r4, lsl #1
   2f9e4:	add	r3, r0, r3, lsl #3
   2f9e8:	ldr	r3, [r3, #8]
   2f9ec:	cmp	r3, #0
   2f9f0:	bne	2fa8c <flatcc_json_parser_union@@Base+0xd8>
   2f9f4:	add	r3, r4, r4, lsl #1
   2f9f8:	add	r3, r0, r3, lsl #3
   2f9fc:	ldrb	r3, [r3, #20]
   2fa00:	cmp	r3, #0
   2fa04:	beq	2fabc <flatcc_json_parser_union@@Base+0x108>
   2fa08:	add	r4, r4, r4, lsl #1
   2fa0c:	add	r4, r0, r4, lsl #3
   2fa10:	ldrb	r3, [r4, #21]
   2fa14:	strb	r3, [sp, #8]
   2fa18:	cmp	r3, #0
   2fa1c:	beq	2fb00 <flatcc_json_parser_union@@Base+0x14c>
   2fa20:	ldr	r2, [r0, #4]
   2fa24:	sub	r2, r2, #1
   2fa28:	str	r2, [r0, #4]
   2fa2c:	add	r2, sp, #12
   2fa30:	str	r2, [sp]
   2fa34:	mov	r2, r6
   2fa38:	mov	r1, r7
   2fa3c:	mov	r0, r5
   2fa40:	ldr	r4, [sp, #48]	; 0x30
   2fa44:	blx	r4
   2fa48:	mov	r4, r0
   2fa4c:	cmp	r6, r0
   2fa50:	beq	2faa4 <flatcc_json_parser_union@@Base+0xf0>
   2fa54:	add	r3, sp, #16
   2fa58:	ldmdb	r3, {r2, r3}
   2fa5c:	ldrh	r1, [sp, #40]	; 0x28
   2fa60:	ldr	r0, [r5]
   2fa64:	bl	29ae8 <flatcc_builder_table_add_union@@Base>
   2fa68:	cmp	r0, #0
   2fa6c:	beq	2faa4 <flatcc_json_parser_union@@Base+0xf0>
   2fa70:	mov	r3, #28
   2fa74:	mov	r2, r6
   2fa78:	mov	r1, r4
   2fa7c:	mov	r0, r5
   2fa80:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2fa84:	mov	r4, r0
   2fa88:	b	2faa4 <flatcc_json_parser_union@@Base+0xf0>
   2fa8c:	mov	r3, #28
   2fa90:	mov	r2, r6
   2fa94:	mov	r1, r7
   2fa98:	mov	r0, r5
   2fa9c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2faa0:	mov	r4, r0
   2faa4:	mov	r0, r4
   2faa8:	add	sp, sp, #20
   2faac:	ldrd	r4, [sp]
   2fab0:	ldrd	r6, [sp, #8]
   2fab4:	add	sp, sp, #16
   2fab8:	pop	{pc}		; (ldr pc, [sp], #4)
   2fabc:	ldr	r3, [r0, #4]
   2fac0:	add	r3, r3, #1
   2fac4:	str	r3, [r0, #4]
   2fac8:	ldr	r1, [r5, #16]
   2facc:	lsl	r3, r4, #1
   2fad0:	add	r2, r3, r4
   2fad4:	add	r2, r0, r2, lsl #3
   2fad8:	str	r1, [r2, #16]
   2fadc:	ldr	r1, [r5, #4]
   2fae0:	str	r1, [r2, #12]
   2fae4:	str	r7, [r2, #8]
   2fae8:	mov	r2, r6
   2faec:	mov	r1, r7
   2faf0:	mov	r0, r5
   2faf4:	bl	2e43c <flatcc_json_parser_generic_json@@Base>
   2faf8:	mov	r4, r0
   2fafc:	b	2faa4 <flatcc_json_parser_union@@Base+0xf0>
   2fb00:	mov	r3, #25
   2fb04:	mov	r2, r6
   2fb08:	mov	r1, r7
   2fb0c:	mov	r0, r5
   2fb10:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2fb14:	mov	r4, r0
   2fb18:	b	2faa4 <flatcc_json_parser_union@@Base+0xf0>

0002fb1c <flatcc_json_parser_union_type@@Base>:
   2fb1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2fb20:	strd	r6, [sp, #8]
   2fb24:	strd	r8, [sp, #16]
   2fb28:	strd	sl, [sp, #24]
   2fb2c:	str	lr, [sp, #32]
   2fb30:	sub	sp, sp, #36	; 0x24
   2fb34:	mov	r5, r0
   2fb38:	mov	r7, r1
   2fb3c:	mov	r6, r2
   2fb40:	mov	r4, r3
   2fb44:	ldr	r1, [sp, #76]	; 0x4c
   2fb48:	ldr	r0, [r0]
   2fb4c:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2fb50:	add	r9, r0, #8
   2fb54:	add	r4, r4, r4, lsl #1
   2fb58:	lsl	r4, r4, #3
   2fb5c:	add	sl, r9, r4
   2fb60:	ldrb	r3, [sl, #12]
   2fb64:	cmp	r3, #0
   2fb68:	bne	2fbe4 <flatcc_json_parser_union_type@@Base+0xc8>
   2fb6c:	mov	r8, r0
   2fb70:	mov	r3, #1
   2fb74:	strb	r3, [sl, #12]
   2fb78:	mov	r2, #0
   2fb7c:	mov	r3, #0
   2fb80:	strd	r2, [sp, #16]
   2fb84:	mov	r3, #0
   2fb88:	str	r3, [sp, #12]
   2fb8c:	strb	r3, [sl, #13]
   2fb90:	cmp	r7, r6
   2fb94:	beq	2fd54 <flatcc_json_parser_union_type@@Base+0x238>
   2fb98:	add	r3, sp, #16
   2fb9c:	str	r3, [sp]
   2fba0:	add	r3, sp, #12
   2fba4:	mov	r2, r6
   2fba8:	mov	r1, r7
   2fbac:	mov	r0, r5
   2fbb0:	bl	2f170 <flatcc_json_parser_integer@@Base>
   2fbb4:	mov	fp, r0
   2fbb8:	cmp	r7, r0
   2fbbc:	bne	2fc1c <flatcc_json_parser_union_type@@Base+0x100>
   2fbc0:	add	r3, sl, #13
   2fbc4:	str	r3, [sp]
   2fbc8:	ldr	r3, [sp, #80]	; 0x50
   2fbcc:	mov	r2, r6
   2fbd0:	mov	r1, fp
   2fbd4:	mov	r0, r5
   2fbd8:	bl	2d3a4 <flatcc_json_parser_space_ext@@Base+0x14c>
   2fbdc:	mov	fp, r0
   2fbe0:	b	2fc78 <flatcc_json_parser_union_type@@Base+0x15c>
   2fbe4:	mov	r3, #28
   2fbe8:	mov	r2, r6
   2fbec:	mov	r1, r7
   2fbf0:	mov	r0, r5
   2fbf4:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2fbf8:	mov	fp, r0
   2fbfc:	mov	r0, fp
   2fc00:	add	sp, sp, #36	; 0x24
   2fc04:	ldrd	r4, [sp]
   2fc08:	ldrd	r6, [sp, #8]
   2fc0c:	ldrd	r8, [sp, #16]
   2fc10:	ldrd	sl, [sp, #24]
   2fc14:	add	sp, sp, #32
   2fc18:	pop	{pc}		; (ldr pc, [sp], #4)
   2fc1c:	ldr	r3, [sp, #12]
   2fc20:	cmp	r3, #0
   2fc24:	bne	2fc58 <flatcc_json_parser_union_type@@Base+0x13c>
   2fc28:	ldrd	r2, [sp, #16]
   2fc2c:	cmp	r3, #0
   2fc30:	cmpeq	r2, #255	; 0xff
   2fc34:	strbls	r2, [sl, #13]
   2fc38:	bls	2fc78 <flatcc_json_parser_union_type@@Base+0x15c>
   2fc3c:	mov	r3, #7
   2fc40:	mov	r2, r6
   2fc44:	mov	r1, r0
   2fc48:	mov	r0, r5
   2fc4c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2fc50:	mov	fp, r0
   2fc54:	b	2fc70 <flatcc_json_parser_union_type@@Base+0x154>
   2fc58:	mov	r3, #8
   2fc5c:	mov	r2, r6
   2fc60:	mov	r1, r0
   2fc64:	mov	r0, r5
   2fc68:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2fc6c:	mov	fp, r0
   2fc70:	cmp	r7, fp
   2fc74:	beq	2fbc0 <flatcc_json_parser_union_type@@Base+0xa4>
   2fc78:	ldr	r3, [r9, r4]
   2fc7c:	cmp	r3, #0
   2fc80:	beq	2fd20 <flatcc_json_parser_union_type@@Base+0x204>
   2fc84:	ldr	r3, [r8, #4]
   2fc88:	cmp	r3, #0
   2fc8c:	beq	2fd38 <flatcc_json_parser_union_type@@Base+0x21c>
   2fc90:	sub	r3, r3, #1
   2fc94:	str	r3, [r8, #4]
   2fc98:	ldr	r8, [r5, #16]
   2fc9c:	ldr	r7, [r5, #4]
   2fca0:	ldr	r3, [sl, #8]
   2fca4:	str	r3, [r5, #16]
   2fca8:	ldr	r3, [sl, #4]
   2fcac:	str	r3, [r5, #4]
   2fcb0:	ldrb	r3, [sl, #13]
   2fcb4:	strb	r3, [sp, #24]
   2fcb8:	ldr	r1, [r9, r4]
   2fcbc:	add	r2, sp, #28
   2fcc0:	str	r2, [sp]
   2fcc4:	mov	r2, r6
   2fcc8:	mov	r0, r5
   2fccc:	ldr	r4, [sp, #84]	; 0x54
   2fcd0:	blx	r4
   2fcd4:	cmp	r6, r0
   2fcd8:	moveq	fp, r6
   2fcdc:	beq	2fbfc <flatcc_json_parser_union_type@@Base+0xe0>
   2fce0:	add	r3, sp, #32
   2fce4:	ldmdb	r3, {r2, r3}
   2fce8:	ldrh	r1, [sp, #72]	; 0x48
   2fcec:	ldr	r0, [r5]
   2fcf0:	bl	29ae8 <flatcc_builder_table_add_union@@Base>
   2fcf4:	cmp	r0, #0
   2fcf8:	streq	r8, [r5, #16]
   2fcfc:	streq	r7, [r5, #4]
   2fd00:	beq	2fbfc <flatcc_json_parser_union_type@@Base+0xe0>
   2fd04:	mov	r3, #28
   2fd08:	mov	r2, r6
   2fd0c:	mov	r1, fp
   2fd10:	mov	r0, r5
   2fd14:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2fd18:	mov	fp, r0
   2fd1c:	b	2fbfc <flatcc_json_parser_union_type@@Base+0xe0>
   2fd20:	ldrb	r2, [sl, #13]
   2fd24:	ldr	r3, [r8, #4]
   2fd28:	cmp	r2, #0
   2fd2c:	addne	r3, r3, #1
   2fd30:	str	r3, [r8, #4]
   2fd34:	b	2fbfc <flatcc_json_parser_union_type@@Base+0xe0>
   2fd38:	ldr	r3, [pc, #28]	; 2fd5c <flatcc_json_parser_union_type@@Base+0x240>
   2fd3c:	movw	r2, #965	; 0x3c5
   2fd40:	movw	r1, #17192	; 0x4328
   2fd44:	movt	r1, #4
   2fd48:	movw	r0, #17268	; 0x4374
   2fd4c:	movt	r0, #4
   2fd50:	bl	145f0 <__assert_fail@plt>
   2fd54:	mov	fp, r6
   2fd58:	b	2fbc0 <flatcc_json_parser_union_type@@Base+0xa4>
   2fd5c:	andeq	r3, r4, r0, lsl pc

0002fd60 <flatcc_json_parser_union_vector@@Base>:
   2fd60:	strd	r4, [sp, #-20]!	; 0xffffffec
   2fd64:	strd	r6, [sp, #8]
   2fd68:	str	lr, [sp, #16]
   2fd6c:	sub	sp, sp, #20
   2fd70:	mov	r5, r0
   2fd74:	mov	r6, r1
   2fd78:	mov	r7, r2
   2fd7c:	mov	r4, r3
   2fd80:	ldr	r1, [sp, #44]	; 0x2c
   2fd84:	ldr	r0, [r0]
   2fd88:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2fd8c:	add	r2, r0, #8
   2fd90:	add	r4, r4, r4, lsl #1
   2fd94:	lsl	r3, r4, #3
   2fd98:	add	r1, r2, r3
   2fd9c:	ldr	ip, [r2, r3]
   2fda0:	cmp	ip, #0
   2fda4:	bne	2fde8 <flatcc_json_parser_union_vector@@Base+0x88>
   2fda8:	ldrb	ip, [r1, #12]
   2fdac:	cmp	ip, #0
   2fdb0:	bne	2fe10 <flatcc_json_parser_union_vector@@Base+0xb0>
   2fdb4:	ldr	ip, [r0, #4]
   2fdb8:	add	ip, ip, #1
   2fdbc:	str	ip, [r0, #4]
   2fdc0:	ldr	r0, [r5, #16]
   2fdc4:	str	r0, [r1, #8]
   2fdc8:	ldr	r0, [r5, #4]
   2fdcc:	str	r0, [r1, #4]
   2fdd0:	str	r6, [r2, r3]
   2fdd4:	mov	r2, r7
   2fdd8:	mov	r1, r6
   2fddc:	mov	r0, r5
   2fde0:	bl	2e43c <flatcc_json_parser_generic_json@@Base>
   2fde4:	b	2fdfc <flatcc_json_parser_union_vector@@Base+0x9c>
   2fde8:	mov	r3, #28
   2fdec:	mov	r2, r7
   2fdf0:	mov	r1, r6
   2fdf4:	mov	r0, r5
   2fdf8:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2fdfc:	add	sp, sp, #20
   2fe00:	ldrd	r4, [sp]
   2fe04:	ldrd	r6, [sp, #8]
   2fe08:	add	sp, sp, #16
   2fe0c:	pop	{pc}		; (ldr pc, [sp], #4)
   2fe10:	ldr	r3, [r0, #4]
   2fe14:	sub	r3, r3, #1
   2fe18:	str	r3, [r0, #4]
   2fe1c:	ldr	r3, [r1, #20]
   2fe20:	ldr	r2, [sp, #48]	; 0x30
   2fe24:	str	r2, [sp, #8]
   2fe28:	ldrh	r2, [sp, #40]	; 0x28
   2fe2c:	str	r2, [sp, #4]
   2fe30:	ldr	r2, [r1, #16]
   2fe34:	str	r2, [sp]
   2fe38:	mov	r2, r7
   2fe3c:	mov	r1, r6
   2fe40:	mov	r0, r5
   2fe44:	bl	2d5a4 <flatcc_json_parser_space_ext@@Base+0x34c>
   2fe48:	b	2fdfc <flatcc_json_parser_union_vector@@Base+0x9c>

0002fe4c <flatcc_json_parser_union_type_vector@@Base>:
   2fe4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2fe50:	strd	r6, [sp, #8]
   2fe54:	strd	r8, [sp, #16]
   2fe58:	strd	sl, [sp, #24]
   2fe5c:	str	lr, [sp, #32]
   2fe60:	sub	sp, sp, #52	; 0x34
   2fe64:	mov	r7, r0
   2fe68:	mov	r6, r1
   2fe6c:	mov	r5, r2
   2fe70:	mov	r4, r3
   2fe74:	ldrh	r3, [sp, #88]	; 0x58
   2fe78:	str	r3, [sp, #16]
   2fe7c:	ldr	sl, [sp, #104]	; 0x68
   2fe80:	ldr	r1, [sp, #92]	; 0x5c
   2fe84:	ldr	r0, [r0]
   2fe88:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2fe8c:	add	r4, r4, r4, lsl #1
   2fe90:	lsl	r3, r4, #3
   2fe94:	str	r3, [sp, #20]
   2fe98:	add	r0, r0, #8
   2fe9c:	add	fp, r0, r3
   2fea0:	ldrb	r3, [fp, #12]
   2fea4:	cmp	r3, #0
   2fea8:	bne	2fefc <flatcc_json_parser_union_type_vector@@Base+0xb0>
   2feac:	mov	r1, #1
   2feb0:	strb	r1, [fp, #12]
   2feb4:	mvn	r3, #0
   2feb8:	mov	r2, r1
   2febc:	ldr	r0, [r7]
   2fec0:	bl	278ec <flatcc_builder_start_vector@@Base>
   2fec4:	cmp	r0, #0
   2fec8:	beq	2ff14 <flatcc_json_parser_union_type_vector@@Base+0xc8>
   2fecc:	mov	r3, #33	; 0x21
   2fed0:	mov	r2, r5
   2fed4:	mov	r1, r6
   2fed8:	mov	r0, r7
   2fedc:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2fee0:	add	sp, sp, #52	; 0x34
   2fee4:	ldrd	r4, [sp]
   2fee8:	ldrd	r6, [sp, #8]
   2feec:	ldrd	r8, [sp, #16]
   2fef0:	ldrd	sl, [sp, #24]
   2fef4:	add	sp, sp, #32
   2fef8:	pop	{pc}		; (ldr pc, [sp], #4)
   2fefc:	mov	r3, #28
   2ff00:	mov	r2, r5
   2ff04:	mov	r1, r6
   2ff08:	mov	r0, r7
   2ff0c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2ff10:	b	2fee0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   2ff14:	cmp	r6, r5
   2ff18:	beq	2ff28 <flatcc_json_parser_union_type_vector@@Base+0xdc>
   2ff1c:	ldrb	r3, [r6]
   2ff20:	cmp	r3, #91	; 0x5b
   2ff24:	beq	30050 <flatcc_json_parser_union_type_vector@@Base+0x204>
   2ff28:	mov	r3, #22
   2ff2c:	mov	r2, r5
   2ff30:	mov	r1, r6
   2ff34:	mov	r0, r7
   2ff38:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   2ff3c:	mov	r6, r0
   2ff40:	ldr	r0, [r7]
   2ff44:	bl	28aec <flatcc_builder_vector_count@@Base>
   2ff48:	mov	r4, r0
   2ff4c:	str	r0, [fp, #16]
   2ff50:	mov	r1, r0
   2ff54:	ldr	r0, [r7]
   2ff58:	bl	26578 <flatcc_builder_enter_user_frame@@Base>
   2ff5c:	mov	r8, r0
   2ff60:	mov	r1, r0
   2ff64:	ldr	r0, [r7]
   2ff68:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2ff6c:	mov	r9, r0
   2ff70:	ldr	r0, [r7]
   2ff74:	bl	28af8 <flatcc_builder_vector_edit@@Base>
   2ff78:	mov	r2, r4
   2ff7c:	mov	r1, r0
   2ff80:	mov	r0, r9
   2ff84:	bl	14524 <memcpy@plt>
   2ff88:	ldr	r0, [r7]
   2ff8c:	bl	289f0 <flatcc_builder_end_vector@@Base>
   2ff90:	subs	r9, r0, #0
   2ff94:	beq	2fecc <flatcc_json_parser_union_type_vector@@Base+0x80>
   2ff98:	ldr	r3, [sp, #16]
   2ff9c:	sub	r1, r3, #1
   2ffa0:	ldr	r0, [r7]
   2ffa4:	bl	29998 <flatcc_builder_table_add_offset@@Base>
   2ffa8:	cmp	r0, #0
   2ffac:	beq	2fecc <flatcc_json_parser_union_type_vector@@Base+0x80>
   2ffb0:	str	r9, [r0]
   2ffb4:	ldr	r1, [sp, #92]	; 0x5c
   2ffb8:	ldr	r0, [r7]
   2ffbc:	bl	266dc <flatcc_builder_get_user_frame_ptr@@Base>
   2ffc0:	add	r2, r0, #8
   2ffc4:	ldr	r3, [sp, #20]
   2ffc8:	add	r1, r2, r3
   2ffcc:	str	r8, [r1, #20]
   2ffd0:	ldr	r3, [r2, r3]
   2ffd4:	cmp	r3, #0
   2ffd8:	beq	303b8 <flatcc_json_parser_union_type_vector@@Base+0x56c>
   2ffdc:	ldr	r3, [r0, #4]
   2ffe0:	cmp	r3, #0
   2ffe4:	beq	303cc <flatcc_json_parser_union_type_vector@@Base+0x580>
   2ffe8:	sub	r3, r3, #1
   2ffec:	str	r3, [r0, #4]
   2fff0:	ldr	sl, [r7, #16]
   2fff4:	ldr	r9, [r7, #4]
   2fff8:	ldr	r3, [r1, #8]
   2fffc:	str	r3, [r7, #16]
   30000:	ldr	r3, [r1, #4]
   30004:	str	r3, [r7, #4]
   30008:	ldr	r3, [sp, #20]
   3000c:	ldr	r1, [r2, r3]
   30010:	ldr	r3, [sp, #100]	; 0x64
   30014:	str	r3, [sp, #8]
   30018:	ldr	r3, [sp, #16]
   3001c:	str	r3, [sp, #4]
   30020:	str	r4, [sp]
   30024:	mov	r3, r8
   30028:	mov	r2, r5
   3002c:	mov	r0, r7
   30030:	bl	2d5a4 <flatcc_json_parser_space_ext@@Base+0x34c>
   30034:	cmp	r5, r0
   30038:	moveq	r0, r5
   3003c:	beq	2fee0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   30040:	str	sl, [r7, #16]
   30044:	str	r9, [r7, #4]
   30048:	mov	r0, r6
   3004c:	b	2fee0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   30050:	add	r1, r6, #1
   30054:	sub	r3, r5, r1
   30058:	cmp	r3, #1
   3005c:	ble	30074 <flatcc_json_parser_union_type_vector@@Base+0x228>
   30060:	ldrb	r3, [r6, #1]
   30064:	cmp	r3, #32
   30068:	movhi	r6, r1
   3006c:	bhi	30084 <flatcc_json_parser_union_type_vector@@Base+0x238>
   30070:	beq	300a0 <flatcc_json_parser_union_type_vector@@Base+0x254>
   30074:	mov	r2, r5
   30078:	mov	r0, r7
   3007c:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   30080:	mov	r6, r0
   30084:	cmp	r5, r6
   30088:	beq	30098 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   3008c:	ldrb	r3, [r6]
   30090:	cmp	r3, #93	; 0x5d
   30094:	beq	300b4 <flatcc_json_parser_union_type_vector@@Base+0x268>
   30098:	mov	r8, #0
   3009c:	b	302b0 <flatcc_json_parser_union_type_vector@@Base+0x464>
   300a0:	ldrb	r3, [r6, #2]
   300a4:	cmp	r3, #32
   300a8:	addhi	r6, r6, #2
   300ac:	bls	30074 <flatcc_json_parser_union_type_vector@@Base+0x228>
   300b0:	b	30084 <flatcc_json_parser_union_type_vector@@Base+0x238>
   300b4:	add	r1, r6, #1
   300b8:	sub	r3, r5, r1
   300bc:	cmp	r3, #1
   300c0:	ble	300d8 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   300c4:	ldrb	r3, [r6, #1]
   300c8:	cmp	r3, #32
   300cc:	movhi	r6, r1
   300d0:	bhi	2ff40 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   300d4:	beq	300ec <flatcc_json_parser_union_type_vector@@Base+0x2a0>
   300d8:	mov	r2, r5
   300dc:	mov	r0, r7
   300e0:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   300e4:	mov	r6, r0
   300e8:	b	2ff40 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   300ec:	ldrb	r3, [r6, #2]
   300f0:	cmp	r3, #32
   300f4:	addhi	r6, r6, #2
   300f8:	bls	300d8 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   300fc:	b	2ff40 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   30100:	ldr	r3, [sp, #28]
   30104:	cmp	r3, #0
   30108:	bne	3013c <flatcc_json_parser_union_type_vector@@Base+0x2f0>
   3010c:	ldrd	r2, [sp, #32]
   30110:	cmp	r3, #0
   30114:	cmpeq	r2, #255	; 0xff
   30118:	strbls	r2, [sp, #47]	; 0x2f
   3011c:	bls	3015c <flatcc_json_parser_union_type_vector@@Base+0x310>
   30120:	mov	r3, #7
   30124:	mov	r2, r5
   30128:	mov	r1, r0
   3012c:	mov	r0, r7
   30130:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   30134:	mov	r4, r0
   30138:	b	30154 <flatcc_json_parser_union_type_vector@@Base+0x308>
   3013c:	mov	r3, #8
   30140:	mov	r2, r5
   30144:	mov	r1, r0
   30148:	mov	r0, r7
   3014c:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   30150:	mov	r4, r0
   30154:	cmp	r4, r6
   30158:	beq	30308 <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   3015c:	ldrb	r0, [sp, #47]	; 0x2f
   30160:	blx	sl
   30164:	cmp	r0, #0
   30168:	bne	3017c <flatcc_json_parser_union_type_vector@@Base+0x330>
   3016c:	ldr	r3, [r7, #8]
   30170:	tst	r3, #1
   30174:	beq	301f0 <flatcc_json_parser_union_type_vector@@Base+0x3a4>
   30178:	strb	r8, [sp, #47]	; 0x2f
   3017c:	ldrb	r3, [sp, #47]	; 0x2f
   30180:	strb	r3, [r9]
   30184:	sub	r3, r5, r4
   30188:	cmp	r3, #1
   3018c:	ble	301a0 <flatcc_json_parser_union_type_vector@@Base+0x354>
   30190:	ldrb	r3, [r4]
   30194:	cmp	r3, #32
   30198:	bhi	301b4 <flatcc_json_parser_union_type_vector@@Base+0x368>
   3019c:	beq	30208 <flatcc_json_parser_union_type_vector@@Base+0x3bc>
   301a0:	mov	r2, r5
   301a4:	mov	r1, r4
   301a8:	mov	r0, r7
   301ac:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   301b0:	mov	r4, r0
   301b4:	cmp	r5, r4
   301b8:	beq	301e8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   301bc:	ldrb	r3, [r4]
   301c0:	cmp	r3, #44	; 0x2c
   301c4:	beq	30268 <flatcc_json_parser_union_type_vector@@Base+0x41c>
   301c8:	cmp	r3, #93	; 0x5d
   301cc:	beq	3021c <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   301d0:	mov	r3, #9
   301d4:	mov	r2, r5
   301d8:	mov	r1, r4
   301dc:	mov	r0, r7
   301e0:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   301e4:	mov	r4, r0
   301e8:	mov	r6, r4
   301ec:	b	2ff40 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   301f0:	mov	r3, #15
   301f4:	mov	r2, r5
   301f8:	mov	r1, r4
   301fc:	mov	r0, r7
   30200:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   30204:	b	2fee0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   30208:	ldrb	r3, [r4, #1]
   3020c:	cmp	r3, #32
   30210:	addhi	r4, r4, #1
   30214:	bls	301a0 <flatcc_json_parser_union_type_vector@@Base+0x354>
   30218:	b	301b4 <flatcc_json_parser_union_type_vector@@Base+0x368>
   3021c:	add	r1, r4, #1
   30220:	sub	r3, r5, r1
   30224:	cmp	r3, #1
   30228:	ble	30240 <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   3022c:	ldrb	r3, [r4, #1]
   30230:	cmp	r3, #32
   30234:	movhi	r4, r1
   30238:	bhi	301e8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   3023c:	beq	30254 <flatcc_json_parser_union_type_vector@@Base+0x408>
   30240:	mov	r2, r5
   30244:	mov	r0, r7
   30248:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   3024c:	mov	r4, r0
   30250:	b	301e8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   30254:	ldrb	r3, [r4, #2]
   30258:	cmp	r3, #32
   3025c:	addhi	r4, r4, #2
   30260:	bls	30240 <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   30264:	b	301e8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   30268:	add	r6, r4, #1
   3026c:	sub	r3, r5, r6
   30270:	cmp	r3, #1
   30274:	ble	30288 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   30278:	ldrb	r3, [r4, #1]
   3027c:	cmp	r3, #32
   30280:	bhi	3029c <flatcc_json_parser_union_type_vector@@Base+0x450>
   30284:	beq	3033c <flatcc_json_parser_union_type_vector@@Base+0x4f0>
   30288:	mov	r2, r5
   3028c:	mov	r1, r6
   30290:	mov	r0, r7
   30294:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   30298:	mov	r6, r0
   3029c:	cmp	r5, r6
   302a0:	beq	30350 <flatcc_json_parser_union_type_vector@@Base+0x504>
   302a4:	ldrb	r3, [r6]
   302a8:	cmp	r3, #93	; 0x5d
   302ac:	beq	3036c <flatcc_json_parser_union_type_vector@@Base+0x520>
   302b0:	mov	r1, #1
   302b4:	ldr	r0, [r7]
   302b8:	bl	26fe0 <flatcc_builder_extend_vector@@Base>
   302bc:	subs	r9, r0, #0
   302c0:	beq	2fecc <flatcc_json_parser_union_type_vector@@Base+0x80>
   302c4:	mov	r2, #0
   302c8:	mov	r3, #0
   302cc:	strd	r2, [sp, #32]
   302d0:	str	r8, [sp, #28]
   302d4:	strb	r8, [sp, #47]	; 0x2f
   302d8:	cmp	r5, r6
   302dc:	beq	30308 <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   302e0:	add	r3, sp, #32
   302e4:	str	r3, [sp]
   302e8:	add	r3, sp, #28
   302ec:	mov	r2, r5
   302f0:	mov	r1, r6
   302f4:	mov	r0, r7
   302f8:	bl	2f170 <flatcc_json_parser_integer@@Base>
   302fc:	mov	r4, r0
   30300:	cmp	r0, r6
   30304:	bne	30100 <flatcc_json_parser_union_type_vector@@Base+0x2b4>
   30308:	add	r3, sp, #47	; 0x2f
   3030c:	str	r3, [sp]
   30310:	ldr	r3, [sp, #96]	; 0x60
   30314:	mov	r2, r5
   30318:	mov	r1, r6
   3031c:	mov	r0, r7
   30320:	bl	2d3a4 <flatcc_json_parser_space_ext@@Base+0x14c>
   30324:	mov	r4, r0
   30328:	cmp	r5, r0
   3032c:	cmpne	r0, r6
   30330:	bne	3015c <flatcc_json_parser_union_type_vector@@Base+0x310>
   30334:	mov	r6, r0
   30338:	b	2fecc <flatcc_json_parser_union_type_vector@@Base+0x80>
   3033c:	ldrb	r3, [r4, #2]
   30340:	cmp	r3, #32
   30344:	addhi	r6, r4, #2
   30348:	bls	30288 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   3034c:	b	3029c <flatcc_json_parser_union_type_vector@@Base+0x450>
   30350:	mov	r3, #9
   30354:	mov	r2, r5
   30358:	mov	r1, r6
   3035c:	mov	r0, r7
   30360:	bl	2d178 <flatcc_json_parser_set_error@@Base>
   30364:	mov	r4, r0
   30368:	b	301e8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   3036c:	add	r4, r6, #1
   30370:	sub	r3, r5, r4
   30374:	cmp	r3, #1
   30378:	ble	3038c <flatcc_json_parser_union_type_vector@@Base+0x540>
   3037c:	ldrb	r3, [r6, #1]
   30380:	cmp	r3, #32
   30384:	bhi	301e8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   30388:	beq	303a4 <flatcc_json_parser_union_type_vector@@Base+0x558>
   3038c:	mov	r2, r5
   30390:	mov	r1, r4
   30394:	mov	r0, r7
   30398:	bl	2d258 <flatcc_json_parser_space_ext@@Base>
   3039c:	mov	r4, r0
   303a0:	b	301e8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   303a4:	ldrb	r3, [r6, #2]
   303a8:	cmp	r3, #32
   303ac:	addhi	r4, r6, #2
   303b0:	bls	3038c <flatcc_json_parser_union_type_vector@@Base+0x540>
   303b4:	b	301e8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   303b8:	ldr	r3, [r0, #4]
   303bc:	add	r3, r3, #1
   303c0:	str	r3, [r0, #4]
   303c4:	mov	r0, r6
   303c8:	b	2fee0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   303cc:	ldr	r3, [pc, #20]	; 303e8 <flatcc_json_parser_union_type_vector@@Base+0x59c>
   303d0:	movw	r2, #1122	; 0x462
   303d4:	movw	r1, #17192	; 0x4328
   303d8:	movt	r1, #4
   303dc:	movw	r0, #17268	; 0x4374
   303e0:	movt	r0, #4
   303e4:	bl	145f0 <__assert_fail@plt>
   303e8:	andeq	r3, r4, r0, lsr pc

000303ec <flatcc_json_parser_table_as_root@@Base>:
   303ec:	strd	r4, [sp, #-28]!	; 0xffffffe4
   303f0:	strd	r6, [sp, #8]
   303f4:	strd	r8, [sp, #16]
   303f8:	str	lr, [sp, #24]
   303fc:	sub	sp, sp, #52	; 0x34
   30400:	mov	r8, r0
   30404:	mov	r5, r2
   30408:	ldr	r9, [sp, #80]	; 0x50
   3040c:	asr	r7, r9, #1
   30410:	and	r7, r7, #2
   30414:	subs	r4, r1, #0
   30418:	addeq	r4, sp, #4
   3041c:	add	r6, r2, r3
   30420:	mov	r2, #32
   30424:	mov	r1, #0
   30428:	add	r0, r4, #12
   3042c:	bl	1459c <memset@plt>
   30430:	str	r8, [r4]
   30434:	str	r5, [r4, #4]
   30438:	mov	r3, #1
   3043c:	str	r3, [r4, #16]
   30440:	str	r9, [r4, #8]
   30444:	str	r5, [r4, #28]
   30448:	str	r6, [r4, #32]
   3044c:	str	r5, [r4, #36]	; 0x24
   30450:	mov	r3, r7
   30454:	mov	r2, #0
   30458:	ldr	r1, [sp, #84]	; 0x54
   3045c:	mov	r0, r8
   30460:	bl	26c24 <flatcc_builder_start_buffer@@Base>
   30464:	cmp	r0, #0
   30468:	bne	304c8 <flatcc_json_parser_table_as_root@@Base+0xdc>
   3046c:	mov	r3, sp
   30470:	mov	r2, r6
   30474:	mov	r1, r5
   30478:	mov	r0, r4
   3047c:	ldr	r6, [sp, #88]	; 0x58
   30480:	blx	r6
   30484:	ldr	r6, [r4, #24]
   30488:	cmp	r6, #0
   3048c:	beq	304ac <flatcc_json_parser_table_as_root@@Base+0xc0>
   30490:	mov	r0, r6
   30494:	add	sp, sp, #52	; 0x34
   30498:	ldrd	r4, [sp]
   3049c:	ldrd	r6, [sp, #8]
   304a0:	ldrd	r8, [sp, #16]
   304a4:	add	sp, sp, #24
   304a8:	pop	{pc}		; (ldr pc, [sp], #4)
   304ac:	ldr	r1, [sp]
   304b0:	mov	r0, r8
   304b4:	bl	26cf8 <flatcc_builder_end_buffer@@Base>
   304b8:	cmp	r0, #0
   304bc:	beq	304d0 <flatcc_json_parser_table_as_root@@Base+0xe4>
   304c0:	str	r5, [r4, #40]	; 0x28
   304c4:	b	30490 <flatcc_json_parser_table_as_root@@Base+0xa4>
   304c8:	mvn	r6, #0
   304cc:	b	30490 <flatcc_json_parser_table_as_root@@Base+0xa4>
   304d0:	mvn	r6, #0
   304d4:	b	30490 <flatcc_json_parser_table_as_root@@Base+0xa4>

000304d8 <flatcc_json_parser_struct_as_root@@Base>:
   304d8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   304dc:	strd	r6, [sp, #8]
   304e0:	strd	r8, [sp, #16]
   304e4:	str	lr, [sp, #24]
   304e8:	sub	sp, sp, #52	; 0x34
   304ec:	mov	r8, r0
   304f0:	mov	r5, r2
   304f4:	ldr	r9, [sp, #80]	; 0x50
   304f8:	asr	r7, r9, #1
   304fc:	and	r7, r7, #2
   30500:	subs	r4, r1, #0
   30504:	addeq	r4, sp, #4
   30508:	add	r6, r2, r3
   3050c:	mov	r2, #32
   30510:	mov	r1, #0
   30514:	add	r0, r4, #12
   30518:	bl	1459c <memset@plt>
   3051c:	str	r8, [r4]
   30520:	str	r5, [r4, #4]
   30524:	mov	r3, #1
   30528:	str	r3, [r4, #16]
   3052c:	str	r9, [r4, #8]
   30530:	str	r5, [r4, #28]
   30534:	str	r6, [r4, #32]
   30538:	str	r5, [r4, #36]	; 0x24
   3053c:	mov	r3, r7
   30540:	mov	r2, #0
   30544:	ldr	r1, [sp, #84]	; 0x54
   30548:	mov	r0, r8
   3054c:	bl	26c24 <flatcc_builder_start_buffer@@Base>
   30550:	cmp	r0, #0
   30554:	bne	305b4 <flatcc_json_parser_struct_as_root@@Base+0xdc>
   30558:	mov	r3, sp
   3055c:	mov	r2, r6
   30560:	mov	r1, r5
   30564:	mov	r0, r4
   30568:	ldr	r6, [sp, #88]	; 0x58
   3056c:	blx	r6
   30570:	ldr	r6, [r4, #24]
   30574:	cmp	r6, #0
   30578:	beq	30598 <flatcc_json_parser_struct_as_root@@Base+0xc0>
   3057c:	mov	r0, r6
   30580:	add	sp, sp, #52	; 0x34
   30584:	ldrd	r4, [sp]
   30588:	ldrd	r6, [sp, #8]
   3058c:	ldrd	r8, [sp, #16]
   30590:	add	sp, sp, #24
   30594:	pop	{pc}		; (ldr pc, [sp], #4)
   30598:	ldr	r1, [sp]
   3059c:	mov	r0, r8
   305a0:	bl	26cf8 <flatcc_builder_end_buffer@@Base>
   305a4:	cmp	r0, #0
   305a8:	beq	305bc <flatcc_json_parser_struct_as_root@@Base+0xe4>
   305ac:	str	r5, [r4, #40]	; 0x28
   305b0:	b	3057c <flatcc_json_parser_struct_as_root@@Base+0xa4>
   305b4:	mvn	r6, #0
   305b8:	b	3057c <flatcc_json_parser_struct_as_root@@Base+0xa4>
   305bc:	mvn	r6, #0
   305c0:	b	3057c <flatcc_json_parser_struct_as_root@@Base+0xa4>
   305c4:	andeq	r0, r0, r0
   305c8:	cmp	r0, #99	; 0x63
   305cc:	bhi	305f0 <flatcc_json_parser_struct_as_root@@Base+0x118>
   305d0:	cmp	r0, #9
   305d4:	bhi	30640 <flatcc_json_parser_struct_as_root@@Base+0x168>
   305d8:	mov	r3, #0
   305dc:	strb	r3, [r1, #1]
   305e0:	add	r0, r0, #48	; 0x30
   305e4:	strb	r0, [r1]
   305e8:	mov	r0, #1
   305ec:	bx	lr
   305f0:	mov	r3, #0
   305f4:	strb	r3, [r1, #3]
   305f8:	movw	ip, #17288	; 0x4388
   305fc:	movt	ip, #4
   30600:	movw	r3, #34079	; 0x851f
   30604:	movt	r3, #20971	; 0x51eb
   30608:	umull	r2, r3, r3, r0
   3060c:	lsr	r3, r3, #5
   30610:	mov	r2, #100	; 0x64
   30614:	mls	r0, r2, r3, r0
   30618:	uxtb	r0, r0
   3061c:	add	r2, ip, r0, lsl #1
   30620:	ldrb	r0, [ip, r0, lsl #1]
   30624:	strb	r0, [r1, #1]
   30628:	ldrb	r2, [r2, #1]
   3062c:	strb	r2, [r1, #2]
   30630:	add	r3, r3, #48	; 0x30
   30634:	strb	r3, [r1]
   30638:	mov	r0, #3
   3063c:	bx	lr
   30640:	mov	r3, #0
   30644:	strb	r3, [r1, #2]
   30648:	movw	r2, #17288	; 0x4388
   3064c:	movt	r2, #4
   30650:	movw	r3, #34079	; 0x851f
   30654:	movt	r3, #20971	; 0x51eb
   30658:	umull	ip, r3, r3, r0
   3065c:	lsr	r3, r3, #5
   30660:	mov	ip, #100	; 0x64
   30664:	mls	r0, ip, r3, r0
   30668:	uxtb	r0, r0
   3066c:	add	r3, r2, r0, lsl #1
   30670:	ldrb	r2, [r2, r0, lsl #1]
   30674:	strb	r2, [r1]
   30678:	ldrb	r3, [r3, #1]
   3067c:	strb	r3, [r1, #1]
   30680:	mov	r0, #2
   30684:	bx	lr
   30688:	strd	r4, [sp, #-12]!
   3068c:	str	lr, [sp, #8]
   30690:	cmp	r0, #1000	; 0x3e8
   30694:	bcc	3072c <flatcc_json_parser_struct_as_root@@Base+0x254>
   30698:	movw	r3, #9999	; 0x270f
   3069c:	cmp	r0, r3
   306a0:	bhi	30764 <flatcc_json_parser_struct_as_root@@Base+0x28c>
   306a4:	mov	r3, #0
   306a8:	strb	r3, [r1, #4]
   306ac:	add	ip, r1, #2
   306b0:	movw	lr, #17288	; 0x4388
   306b4:	movt	lr, #4
   306b8:	movw	r3, #34079	; 0x851f
   306bc:	movt	r3, #20971	; 0x51eb
   306c0:	umull	r2, r3, r3, r0
   306c4:	lsr	r3, r3, #5
   306c8:	mov	r2, #100	; 0x64
   306cc:	mls	r2, r2, r3, r0
   306d0:	uxth	r2, r2
   306d4:	add	r4, lr, r2, lsl #1
   306d8:	uxth	r0, r3
   306dc:	ldrb	r3, [lr, r2, lsl #1]
   306e0:	strb	r3, [r1, #2]
   306e4:	ldrb	r3, [r4, #1]
   306e8:	strb	r3, [r1, #3]
   306ec:	mov	r1, #4
   306f0:	movw	r2, #17288	; 0x4388
   306f4:	movt	r2, #4
   306f8:	movw	r3, #34079	; 0x851f
   306fc:	movt	r3, #20971	; 0x51eb
   30700:	umull	lr, r3, r3, r0
   30704:	lsr	r3, r3, #5
   30708:	mov	lr, #100	; 0x64
   3070c:	mls	r3, lr, r3, r0
   30710:	uxth	r3, r3
   30714:	add	r0, r2, r3, lsl #1
   30718:	ldrb	r3, [r2, r3, lsl #1]
   3071c:	strb	r3, [ip, #-2]
   30720:	ldrb	r3, [r0, #1]
   30724:	strb	r3, [ip, #-1]
   30728:	b	3080c <flatcc_json_parser_struct_as_root@@Base+0x334>
   3072c:	cmp	r0, #99	; 0x63
   30730:	bhi	307b4 <flatcc_json_parser_struct_as_root@@Base+0x2dc>
   30734:	cmp	r0, #9
   30738:	bhi	30750 <flatcc_json_parser_struct_as_root@@Base+0x278>
   3073c:	add	r4, r1, #1
   30740:	mov	r3, #0
   30744:	strb	r3, [r1, #1]
   30748:	mov	r1, #1
   3074c:	b	30804 <flatcc_json_parser_struct_as_root@@Base+0x32c>
   30750:	add	ip, r1, #2
   30754:	mov	r3, #0
   30758:	strb	r3, [r1, #2]
   3075c:	mov	r1, #2
   30760:	b	306f0 <flatcc_json_parser_struct_as_root@@Base+0x218>
   30764:	mov	r3, #0
   30768:	strb	r3, [r1, #5]
   3076c:	add	lr, r1, #3
   30770:	movw	ip, #17288	; 0x4388
   30774:	movt	ip, #4
   30778:	movw	r3, #34079	; 0x851f
   3077c:	movt	r3, #20971	; 0x51eb
   30780:	umull	r2, r3, r3, r0
   30784:	lsr	r3, r3, #5
   30788:	mov	r2, #100	; 0x64
   3078c:	mls	r2, r2, r3, r0
   30790:	uxth	r2, r2
   30794:	add	r4, ip, r2, lsl #1
   30798:	uxth	r0, r3
   3079c:	ldrb	r3, [ip, r2, lsl #1]
   307a0:	strb	r3, [r1, #3]
   307a4:	ldrb	r3, [r4, #1]
   307a8:	strb	r3, [r1, #4]
   307ac:	mov	r1, #5
   307b0:	b	307c4 <flatcc_json_parser_struct_as_root@@Base+0x2ec>
   307b4:	add	lr, r1, #3
   307b8:	mov	r3, #0
   307bc:	strb	r3, [r1, #3]
   307c0:	mov	r1, #3
   307c4:	sub	r4, lr, #2
   307c8:	movw	ip, #17288	; 0x4388
   307cc:	movt	ip, #4
   307d0:	movw	r3, #34079	; 0x851f
   307d4:	movt	r3, #20971	; 0x51eb
   307d8:	umull	r2, r3, r3, r0
   307dc:	lsr	r3, r3, #5
   307e0:	mov	r2, #100	; 0x64
   307e4:	mls	r2, r2, r3, r0
   307e8:	uxth	r2, r2
   307ec:	add	r5, ip, r2, lsl #1
   307f0:	uxth	r0, r3
   307f4:	ldrb	r3, [ip, r2, lsl #1]
   307f8:	strb	r3, [lr, #-2]
   307fc:	ldrb	r3, [r5, #1]
   30800:	strb	r3, [lr, #-1]
   30804:	add	r0, r0, #48	; 0x30
   30808:	strb	r0, [r4, #-1]
   3080c:	mov	r0, r1
   30810:	ldrd	r4, [sp]
   30814:	add	sp, sp, #8
   30818:	pop	{pc}		; (ldr pc, [sp], #4)
   3081c:	strd	r4, [sp, #-12]!
   30820:	str	lr, [sp, #8]
   30824:	mov	r3, r0
   30828:	movw	r2, #9999	; 0x270f
   3082c:	cmp	r0, r2
   30830:	bls	308ac <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   30834:	movw	r2, #38527	; 0x967f
   30838:	movt	r2, #152	; 0x98
   3083c:	cmp	r0, r2
   30840:	bls	30878 <flatcc_json_parser_struct_as_root@@Base+0x3a0>
   30844:	movw	r2, #51711	; 0xc9ff
   30848:	movt	r2, #15258	; 0x3b9a
   3084c:	cmp	r0, r2
   30850:	bhi	30a38 <flatcc_json_parser_struct_as_root@@Base+0x560>
   30854:	movw	r2, #57599	; 0xe0ff
   30858:	movt	r2, #1525	; 0x5f5
   3085c:	cmp	r0, r2
   30860:	bhi	30914 <flatcc_json_parser_struct_as_root@@Base+0x43c>
   30864:	add	r4, r1, #8
   30868:	mov	r2, #0
   3086c:	strb	r2, [r1, #8]
   30870:	mov	r0, #8
   30874:	b	30a80 <flatcc_json_parser_struct_as_root@@Base+0x5a8>
   30878:	movw	r2, #16959	; 0x423f
   3087c:	movt	r2, #15
   30880:	cmp	r0, r2
   30884:	bhi	30a24 <flatcc_json_parser_struct_as_root@@Base+0x54c>
   30888:	movw	r2, #34463	; 0x869f
   3088c:	movt	r2, #1
   30890:	cmp	r0, r2
   30894:	bhi	30b6c <flatcc_json_parser_struct_as_root@@Base+0x694>
   30898:	add	r4, r1, #5
   3089c:	mov	r2, #0
   308a0:	strb	r2, [r1, #5]
   308a4:	mov	r0, #5
   308a8:	b	30998 <flatcc_json_parser_struct_as_root@@Base+0x4c0>
   308ac:	cmp	r0, #99	; 0x63
   308b0:	bls	308d0 <flatcc_json_parser_struct_as_root@@Base+0x3f8>
   308b4:	cmp	r0, #1000	; 0x3e8
   308b8:	bcs	308ec <flatcc_json_parser_struct_as_root@@Base+0x414>
   308bc:	add	lr, r1, #3
   308c0:	mov	r2, #0
   308c4:	strb	r2, [r1, #3]
   308c8:	mov	r0, #3
   308cc:	b	309d4 <flatcc_json_parser_struct_as_root@@Base+0x4fc>
   308d0:	cmp	r0, #9
   308d4:	bhi	30900 <flatcc_json_parser_struct_as_root@@Base+0x428>
   308d8:	add	r4, r1, #1
   308dc:	mov	r2, #0
   308e0:	strb	r2, [r1, #1]
   308e4:	mov	r0, #1
   308e8:	b	30a10 <flatcc_json_parser_struct_as_root@@Base+0x538>
   308ec:	add	r4, r1, #4
   308f0:	mov	r2, #0
   308f4:	strb	r2, [r1, #4]
   308f8:	mov	r0, #4
   308fc:	b	30af8 <flatcc_json_parser_struct_as_root@@Base+0x620>
   30900:	add	lr, r1, #2
   30904:	mov	r2, #0
   30908:	strb	r2, [r1, #2]
   3090c:	mov	r0, #2
   30910:	b	30b34 <flatcc_json_parser_struct_as_root@@Base+0x65c>
   30914:	mov	r2, #0
   30918:	strb	r2, [r1, #9]
   3091c:	add	lr, r1, #7
   30920:	movw	r0, #17288	; 0x4388
   30924:	movt	r0, #4
   30928:	movw	r2, #34079	; 0x851f
   3092c:	movt	r2, #20971	; 0x51eb
   30930:	umull	ip, r2, r2, r3
   30934:	lsr	r2, r2, #5
   30938:	mov	ip, #100	; 0x64
   3093c:	mls	ip, ip, r2, r3
   30940:	add	r4, r0, ip, lsl #1
   30944:	mov	r3, r2
   30948:	ldrb	r2, [r0, ip, lsl #1]
   3094c:	strb	r2, [r1, #7]
   30950:	ldrb	r2, [r4, #1]
   30954:	strb	r2, [r1, #8]
   30958:	mov	r0, #9
   3095c:	sub	r4, lr, #2
   30960:	movw	r1, #17288	; 0x4388
   30964:	movt	r1, #4
   30968:	movw	r2, #34079	; 0x851f
   3096c:	movt	r2, #20971	; 0x51eb
   30970:	umull	ip, r2, r2, r3
   30974:	lsr	r2, r2, #5
   30978:	mov	ip, #100	; 0x64
   3097c:	mls	ip, ip, r2, r3
   30980:	add	r5, r1, ip, lsl #1
   30984:	mov	r3, r2
   30988:	ldrb	r2, [r1, ip, lsl #1]
   3098c:	strb	r2, [lr, #-2]
   30990:	ldrb	r2, [r5, #1]
   30994:	strb	r2, [lr, #-1]
   30998:	sub	lr, r4, #2
   3099c:	movw	r1, #17288	; 0x4388
   309a0:	movt	r1, #4
   309a4:	movw	r2, #34079	; 0x851f
   309a8:	movt	r2, #20971	; 0x51eb
   309ac:	umull	ip, r2, r2, r3
   309b0:	lsr	r2, r2, #5
   309b4:	mov	ip, #100	; 0x64
   309b8:	mls	ip, ip, r2, r3
   309bc:	add	r5, r1, ip, lsl #1
   309c0:	mov	r3, r2
   309c4:	ldrb	r2, [r1, ip, lsl #1]
   309c8:	strb	r2, [r4, #-2]
   309cc:	ldrb	r2, [r5, #1]
   309d0:	strb	r2, [r4, #-1]
   309d4:	sub	r4, lr, #2
   309d8:	movw	r1, #17288	; 0x4388
   309dc:	movt	r1, #4
   309e0:	movw	r2, #34079	; 0x851f
   309e4:	movt	r2, #20971	; 0x51eb
   309e8:	umull	ip, r2, r2, r3
   309ec:	lsr	r2, r2, #5
   309f0:	mov	ip, #100	; 0x64
   309f4:	mls	ip, ip, r2, r3
   309f8:	add	r5, r1, ip, lsl #1
   309fc:	mov	r3, r2
   30a00:	ldrb	r2, [r1, ip, lsl #1]
   30a04:	strb	r2, [lr, #-2]
   30a08:	ldrb	r2, [r5, #1]
   30a0c:	strb	r2, [lr, #-1]
   30a10:	add	r3, r3, #48	; 0x30
   30a14:	strb	r3, [r4, #-1]
   30a18:	ldrd	r4, [sp]
   30a1c:	add	sp, sp, #8
   30a20:	pop	{pc}		; (ldr pc, [sp], #4)
   30a24:	add	lr, r1, #7
   30a28:	mov	r2, #0
   30a2c:	strb	r2, [r1, #7]
   30a30:	mov	r0, #7
   30a34:	b	3095c <flatcc_json_parser_struct_as_root@@Base+0x484>
   30a38:	mov	r2, #0
   30a3c:	strb	r2, [r1, #10]
   30a40:	add	r4, r1, #8
   30a44:	movw	r0, #17288	; 0x4388
   30a48:	movt	r0, #4
   30a4c:	movw	r2, #34079	; 0x851f
   30a50:	movt	r2, #20971	; 0x51eb
   30a54:	umull	ip, r2, r2, r3
   30a58:	lsr	r2, r2, #5
   30a5c:	mov	ip, #100	; 0x64
   30a60:	mls	ip, ip, r2, r3
   30a64:	add	lr, r0, ip, lsl #1
   30a68:	mov	r3, r2
   30a6c:	ldrb	r2, [r0, ip, lsl #1]
   30a70:	strb	r2, [r1, #8]
   30a74:	ldrb	r2, [lr, #1]
   30a78:	strb	r2, [r1, #9]
   30a7c:	mov	r0, #10
   30a80:	sub	lr, r4, #2
   30a84:	movw	r1, #17288	; 0x4388
   30a88:	movt	r1, #4
   30a8c:	movw	r2, #34079	; 0x851f
   30a90:	movt	r2, #20971	; 0x51eb
   30a94:	umull	ip, r2, r2, r3
   30a98:	lsr	r2, r2, #5
   30a9c:	mov	ip, #100	; 0x64
   30aa0:	mls	ip, ip, r2, r3
   30aa4:	add	r5, r1, ip, lsl #1
   30aa8:	mov	r3, r2
   30aac:	ldrb	r2, [r1, ip, lsl #1]
   30ab0:	strb	r2, [r4, #-2]
   30ab4:	ldrb	r2, [r5, #1]
   30ab8:	strb	r2, [r4, #-1]
   30abc:	sub	r4, lr, #2
   30ac0:	movw	r1, #17288	; 0x4388
   30ac4:	movt	r1, #4
   30ac8:	movw	r2, #34079	; 0x851f
   30acc:	movt	r2, #20971	; 0x51eb
   30ad0:	umull	ip, r2, r2, r3
   30ad4:	lsr	r2, r2, #5
   30ad8:	mov	ip, #100	; 0x64
   30adc:	mls	ip, ip, r2, r3
   30ae0:	add	r5, r1, ip, lsl #1
   30ae4:	mov	r3, r2
   30ae8:	ldrb	r2, [r1, ip, lsl #1]
   30aec:	strb	r2, [lr, #-2]
   30af0:	ldrb	r2, [r5, #1]
   30af4:	strb	r2, [lr, #-1]
   30af8:	sub	lr, r4, #2
   30afc:	movw	r1, #17288	; 0x4388
   30b00:	movt	r1, #4
   30b04:	movw	r2, #34079	; 0x851f
   30b08:	movt	r2, #20971	; 0x51eb
   30b0c:	umull	ip, r2, r2, r3
   30b10:	lsr	r2, r2, #5
   30b14:	mov	ip, #100	; 0x64
   30b18:	mls	ip, ip, r2, r3
   30b1c:	add	r5, r1, ip, lsl #1
   30b20:	mov	r3, r2
   30b24:	ldrb	r2, [r1, ip, lsl #1]
   30b28:	strb	r2, [r4, #-2]
   30b2c:	ldrb	r2, [r5, #1]
   30b30:	strb	r2, [r4, #-1]
   30b34:	movw	r1, #17288	; 0x4388
   30b38:	movt	r1, #4
   30b3c:	movw	r2, #34079	; 0x851f
   30b40:	movt	r2, #20971	; 0x51eb
   30b44:	umull	ip, r2, r2, r3
   30b48:	lsr	r2, r2, #5
   30b4c:	mov	ip, #100	; 0x64
   30b50:	mls	r3, ip, r2, r3
   30b54:	add	r2, r1, r3, lsl #1
   30b58:	ldrb	r3, [r1, r3, lsl #1]
   30b5c:	strb	r3, [lr, #-2]
   30b60:	ldrb	r3, [r2, #1]
   30b64:	strb	r3, [lr, #-1]
   30b68:	b	30a18 <flatcc_json_parser_struct_as_root@@Base+0x540>
   30b6c:	add	lr, r1, #6
   30b70:	mov	r2, #0
   30b74:	strb	r2, [r1, #6]
   30b78:	mov	r0, #6
   30b7c:	b	30abc <flatcc_json_parser_struct_as_root@@Base+0x5e4>
   30b80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30b84:	strd	r6, [sp, #8]
   30b88:	strd	r8, [sp, #16]
   30b8c:	strd	sl, [sp, #24]
   30b90:	str	lr, [sp, #32]
   30b94:	sub	sp, sp, #4
   30b98:	mov	r4, r0
   30b9c:	mov	r6, r2
   30ba0:	add	r3, pc, #840	; 0x348
   30ba4:	ldrd	r2, [r3]
   30ba8:	cmp	r1, r3
   30bac:	cmpeq	r0, r2
   30bb0:	bls	30dd8 <flatcc_json_parser_struct_as_root@@Base+0x900>
   30bb4:	mov	r5, r1
   30bb8:	add	r3, pc, #824	; 0x338
   30bbc:	ldrd	r2, [r3]
   30bc0:	cmp	r1, r3
   30bc4:	cmpeq	r0, r2
   30bc8:	bls	30e4c <flatcc_json_parser_struct_as_root@@Base+0x974>
   30bcc:	add	r3, pc, #812	; 0x32c
   30bd0:	ldrd	r2, [r3]
   30bd4:	cmp	r1, r3
   30bd8:	cmpeq	r0, r2
   30bdc:	bls	30e10 <flatcc_json_parser_struct_as_root@@Base+0x938>
   30be0:	add	r3, pc, #800	; 0x320
   30be4:	ldrd	r2, [r3]
   30be8:	cmp	r1, r3
   30bec:	cmpeq	r0, r2
   30bf0:	bls	30de8 <flatcc_json_parser_struct_as_root@@Base+0x910>
   30bf4:	add	r3, pc, #788	; 0x314
   30bf8:	ldrd	r2, [r3]
   30bfc:	cmp	r1, r3
   30c00:	cmpeq	r0, r2
   30c04:	bhi	30f48 <flatcc_json_parser_struct_as_root@@Base+0xa70>
   30c08:	mov	r3, #0
   30c0c:	strb	r3, [r6, #19]
   30c10:	add	r9, r6, #17
   30c14:	movw	r7, #17288	; 0x4388
   30c18:	movt	r7, #4
   30c1c:	mov	r2, #100	; 0x64
   30c20:	mov	r3, #0
   30c24:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30c28:	mov	r8, r2
   30c2c:	add	sl, r7, r2, lsl #1
   30c30:	mov	r2, #100	; 0x64
   30c34:	mov	r3, #0
   30c38:	mov	r0, r4
   30c3c:	mov	r1, r5
   30c40:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30c44:	mov	r4, r0
   30c48:	mov	r5, r1
   30c4c:	ldrb	r3, [r7, r8, lsl #1]
   30c50:	strb	r3, [r6, #17]
   30c54:	ldrb	r3, [sl, #1]
   30c58:	strb	r3, [r6, #18]
   30c5c:	mov	r7, #19
   30c60:	sub	r8, r9, #2
   30c64:	movw	r6, #17288	; 0x4388
   30c68:	movt	r6, #4
   30c6c:	mov	r2, #100	; 0x64
   30c70:	mov	r3, #0
   30c74:	mov	r0, r4
   30c78:	mov	r1, r5
   30c7c:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30c80:	mov	sl, r2
   30c84:	add	fp, r6, r2, lsl #1
   30c88:	mov	r2, #100	; 0x64
   30c8c:	mov	r3, #0
   30c90:	mov	r0, r4
   30c94:	mov	r1, r5
   30c98:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30c9c:	mov	r4, r0
   30ca0:	mov	r5, r1
   30ca4:	ldrb	r3, [r6, sl, lsl #1]
   30ca8:	strb	r3, [r9, #-2]
   30cac:	ldrb	r3, [fp, #1]
   30cb0:	strb	r3, [r9, #-1]
   30cb4:	sub	r9, r8, #2
   30cb8:	movw	r6, #17288	; 0x4388
   30cbc:	movt	r6, #4
   30cc0:	mov	r2, #100	; 0x64
   30cc4:	mov	r3, #0
   30cc8:	mov	r0, r4
   30ccc:	mov	r1, r5
   30cd0:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30cd4:	mov	sl, r2
   30cd8:	add	fp, r6, r2, lsl #1
   30cdc:	mov	r2, #100	; 0x64
   30ce0:	mov	r3, #0
   30ce4:	mov	r0, r4
   30ce8:	mov	r1, r5
   30cec:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30cf0:	mov	r4, r0
   30cf4:	mov	r5, r1
   30cf8:	ldrb	r3, [r6, sl, lsl #1]
   30cfc:	strb	r3, [r8, #-2]
   30d00:	ldrb	r3, [fp, #1]
   30d04:	strb	r3, [r8, #-1]
   30d08:	sub	r8, r9, #2
   30d0c:	movw	r6, #17288	; 0x4388
   30d10:	movt	r6, #4
   30d14:	mov	r2, #100	; 0x64
   30d18:	mov	r3, #0
   30d1c:	mov	r0, r4
   30d20:	mov	r1, r5
   30d24:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30d28:	mov	sl, r2
   30d2c:	add	fp, r6, r2, lsl #1
   30d30:	mov	r2, #100	; 0x64
   30d34:	mov	r3, #0
   30d38:	mov	r0, r4
   30d3c:	mov	r1, r5
   30d40:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30d44:	mov	r4, r0
   30d48:	mov	r5, r1
   30d4c:	ldrb	r3, [r6, sl, lsl #1]
   30d50:	strb	r3, [r9, #-2]
   30d54:	ldrb	r3, [fp, #1]
   30d58:	strb	r3, [r9, #-1]
   30d5c:	movw	r6, #17288	; 0x4388
   30d60:	movt	r6, #4
   30d64:	mov	r2, #100	; 0x64
   30d68:	mov	r3, #0
   30d6c:	mov	r0, r4
   30d70:	mov	r1, r5
   30d74:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30d78:	add	r3, r6, r2, lsl #1
   30d7c:	ldrb	r2, [r6, r2, lsl #1]
   30d80:	strb	r2, [r8, #-2]
   30d84:	ldrb	r3, [r3, #1]
   30d88:	strb	r3, [r8, #-1]
   30d8c:	sub	r6, r8, #3
   30d90:	mov	r2, #100	; 0x64
   30d94:	mov	r3, #0
   30d98:	mov	r0, r4
   30d9c:	mov	r1, r5
   30da0:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30da4:	mov	r2, #10
   30da8:	mov	r3, #0
   30dac:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30db0:	add	r2, r2, #48	; 0x30
   30db4:	strb	r2, [r8, #-3]
   30db8:	mov	r2, #1000	; 0x3e8
   30dbc:	mov	r3, #0
   30dc0:	mov	r0, r4
   30dc4:	mov	r1, r5
   30dc8:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30dcc:	mov	r4, r0
   30dd0:	mov	r5, r1
   30dd4:	b	31144 <flatcc_json_parser_struct_as_root@@Base+0xc6c>
   30dd8:	mov	r1, r6
   30ddc:	bl	3081c <flatcc_json_parser_struct_as_root@@Base+0x344>
   30de0:	mov	r7, r0
   30de4:	b	31214 <flatcc_json_parser_struct_as_root@@Base+0xd3c>
   30de8:	add	r3, pc, #296	; 0x128
   30dec:	ldrd	r2, [r3]
   30df0:	cmp	r1, r3
   30df4:	cmpeq	r0, r2
   30df8:	bhi	31234 <flatcc_json_parser_struct_as_root@@Base+0xd5c>
   30dfc:	add	r9, r6, #17
   30e00:	mov	r3, #0
   30e04:	strb	r3, [r6, #17]
   30e08:	mov	r7, #17
   30e0c:	b	30c60 <flatcc_json_parser_struct_as_root@@Base+0x788>
   30e10:	add	r3, pc, #264	; 0x108
   30e14:	ldrd	r2, [r3]
   30e18:	cmp	r1, r3
   30e1c:	cmpeq	r0, r2
   30e20:	bhi	31248 <flatcc_json_parser_struct_as_root@@Base+0xd70>
   30e24:	add	r3, pc, #252	; 0xfc
   30e28:	ldrd	r2, [r3]
   30e2c:	cmp	r1, r3
   30e30:	cmpeq	r0, r2
   30e34:	bhi	30eb0 <flatcc_json_parser_struct_as_root@@Base+0x9d8>
   30e38:	add	r9, r6, #14
   30e3c:	mov	r3, #0
   30e40:	strb	r3, [r6, #14]
   30e44:	mov	r7, #14
   30e48:	b	31048 <flatcc_json_parser_struct_as_root@@Base+0xb70>
   30e4c:	add	r3, pc, #220	; 0xdc
   30e50:	ldrd	r2, [r3]
   30e54:	cmp	r1, r3
   30e58:	cmpeq	r0, r2
   30e5c:	bls	30e88 <flatcc_json_parser_struct_as_root@@Base+0x9b0>
   30e60:	add	r3, pc, #208	; 0xd0
   30e64:	ldrd	r2, [r3]
   30e68:	cmp	r1, r3
   30e6c:	cmpeq	r0, r2
   30e70:	bhi	30ec4 <flatcc_json_parser_struct_as_root@@Base+0x9ec>
   30e74:	add	r8, r6, #12
   30e78:	mov	r3, #0
   30e7c:	strb	r3, [r6, #12]
   30e80:	mov	r7, #12
   30e84:	b	3109c <flatcc_json_parser_struct_as_root@@Base+0xbc4>
   30e88:	add	r3, pc, #176	; 0xb0
   30e8c:	ldrd	r2, [r3]
   30e90:	cmp	r1, r3
   30e94:	cmpeq	r0, r2
   30e98:	bhi	30ed8 <flatcc_json_parser_struct_as_root@@Base+0xa00>
   30e9c:	add	r9, r6, #10
   30ea0:	mov	r3, #0
   30ea4:	strb	r3, [r6, #10]
   30ea8:	mov	r7, #10
   30eac:	b	310f0 <flatcc_json_parser_struct_as_root@@Base+0xc18>
   30eb0:	add	r8, r6, #15
   30eb4:	mov	r3, #0
   30eb8:	strb	r3, [r6, #15]
   30ebc:	mov	r7, #15
   30ec0:	b	30cb4 <flatcc_json_parser_struct_as_root@@Base+0x7dc>
   30ec4:	add	r9, r6, #13
   30ec8:	mov	r3, #0
   30ecc:	strb	r3, [r6, #13]
   30ed0:	mov	r7, #13
   30ed4:	b	30d08 <flatcc_json_parser_struct_as_root@@Base+0x830>
   30ed8:	add	r8, r6, #11
   30edc:	mov	r3, #0
   30ee0:	strb	r3, [r6, #11]
   30ee4:	mov	r7, #11
   30ee8:	b	30d5c <flatcc_json_parser_struct_as_root@@Base+0x884>
   30eec:	nop	{0}
   30ef0:	blcc	fe6e36f4 <__bss_end__@@Base+0xfe68e3a8>
   30ef4:	andeq	r0, r0, r0
   30ef8:	mrcmi	15, 3, r9, cr2, cr15, {7}
   30efc:	andeq	r0, r0, r8, lsl r9
   30f00:	svcvs	0x00c0ffff
   30f04:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   30f08:			; <UNDEFINED> instruction: 0xa763ffff
   30f0c:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   30f10:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   30f14:	bhi	ff1f9b2c <__bss_end__@@Base+0xff1a47e0>
   30f18:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   30f1c:	smceq	13400	; 0x3458
   30f20:	strbge	r7, [r6], #4095	; 0xfff
   30f24:	andeq	r8, r3, lr, ror sp
   30f28:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   30f2c:	strdeq	r5, [r0], -r3
   30f30:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   30f34:	andeq	r0, r0, r7, lsl r0
   30f38:	strtle	r0, [r5], #4095	; 0xfff
   30f3c:	andeq	r0, r0, r8, ror #1
   30f40:	strpl	lr, [fp], #-1023	; 0xfffffc01
   30f44:	andeq	r0, r0, r2
   30f48:	mov	r3, #0
   30f4c:	strb	r3, [r6, #20]
   30f50:	add	r9, r6, #18
   30f54:	movw	r7, #17288	; 0x4388
   30f58:	movt	r7, #4
   30f5c:	mov	r2, #100	; 0x64
   30f60:	mov	r3, #0
   30f64:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30f68:	mov	r8, r2
   30f6c:	add	sl, r7, r2, lsl #1
   30f70:	mov	r2, #100	; 0x64
   30f74:	mov	r3, #0
   30f78:	mov	r0, r4
   30f7c:	mov	r1, r5
   30f80:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30f84:	mov	r4, r0
   30f88:	mov	r5, r1
   30f8c:	ldrb	r3, [r7, r8, lsl #1]
   30f90:	strb	r3, [r6, #18]
   30f94:	ldrb	r3, [sl, #1]
   30f98:	strb	r3, [r6, #19]
   30f9c:	mov	r7, #20
   30fa0:	sub	r8, r9, #2
   30fa4:	movw	r6, #17288	; 0x4388
   30fa8:	movt	r6, #4
   30fac:	mov	r2, #100	; 0x64
   30fb0:	mov	r3, #0
   30fb4:	mov	r0, r4
   30fb8:	mov	r1, r5
   30fbc:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30fc0:	mov	sl, r2
   30fc4:	add	fp, r6, r2, lsl #1
   30fc8:	mov	r2, #100	; 0x64
   30fcc:	mov	r3, #0
   30fd0:	mov	r0, r4
   30fd4:	mov	r1, r5
   30fd8:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   30fdc:	mov	r4, r0
   30fe0:	mov	r5, r1
   30fe4:	ldrb	r3, [r6, sl, lsl #1]
   30fe8:	strb	r3, [r9, #-2]
   30fec:	ldrb	r3, [fp, #1]
   30ff0:	strb	r3, [r9, #-1]
   30ff4:	sub	r9, r8, #2
   30ff8:	movw	r6, #17288	; 0x4388
   30ffc:	movt	r6, #4
   31000:	mov	r2, #100	; 0x64
   31004:	mov	r3, #0
   31008:	mov	r0, r4
   3100c:	mov	r1, r5
   31010:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   31014:	mov	sl, r2
   31018:	add	fp, r6, r2, lsl #1
   3101c:	mov	r2, #100	; 0x64
   31020:	mov	r3, #0
   31024:	mov	r0, r4
   31028:	mov	r1, r5
   3102c:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   31030:	mov	r4, r0
   31034:	mov	r5, r1
   31038:	ldrb	r3, [r6, sl, lsl #1]
   3103c:	strb	r3, [r8, #-2]
   31040:	ldrb	r3, [fp, #1]
   31044:	strb	r3, [r8, #-1]
   31048:	sub	r8, r9, #2
   3104c:	movw	r6, #17288	; 0x4388
   31050:	movt	r6, #4
   31054:	mov	r2, #100	; 0x64
   31058:	mov	r3, #0
   3105c:	mov	r0, r4
   31060:	mov	r1, r5
   31064:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   31068:	mov	sl, r2
   3106c:	add	fp, r6, r2, lsl #1
   31070:	mov	r2, #100	; 0x64
   31074:	mov	r3, #0
   31078:	mov	r0, r4
   3107c:	mov	r1, r5
   31080:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   31084:	mov	r4, r0
   31088:	mov	r5, r1
   3108c:	ldrb	r3, [r6, sl, lsl #1]
   31090:	strb	r3, [r9, #-2]
   31094:	ldrb	r3, [fp, #1]
   31098:	strb	r3, [r9, #-1]
   3109c:	sub	r9, r8, #2
   310a0:	movw	r6, #17288	; 0x4388
   310a4:	movt	r6, #4
   310a8:	mov	r2, #100	; 0x64
   310ac:	mov	r3, #0
   310b0:	mov	r0, r4
   310b4:	mov	r1, r5
   310b8:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   310bc:	mov	sl, r2
   310c0:	add	fp, r6, r2, lsl #1
   310c4:	mov	r2, #100	; 0x64
   310c8:	mov	r3, #0
   310cc:	mov	r0, r4
   310d0:	mov	r1, r5
   310d4:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   310d8:	mov	r4, r0
   310dc:	mov	r5, r1
   310e0:	ldrb	r3, [r6, sl, lsl #1]
   310e4:	strb	r3, [r8, #-2]
   310e8:	ldrb	r3, [fp, #1]
   310ec:	strb	r3, [r8, #-1]
   310f0:	sub	r6, r9, #2
   310f4:	movw	r8, #17288	; 0x4388
   310f8:	movt	r8, #4
   310fc:	mov	r2, #100	; 0x64
   31100:	mov	r3, #0
   31104:	mov	r0, r4
   31108:	mov	r1, r5
   3110c:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   31110:	mov	sl, r2
   31114:	add	fp, r8, r2, lsl #1
   31118:	mov	r2, #100	; 0x64
   3111c:	mov	r3, #0
   31120:	mov	r0, r4
   31124:	mov	r1, r5
   31128:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   3112c:	mov	r4, r0
   31130:	mov	r5, r1
   31134:	ldrb	r3, [r8, sl, lsl #1]
   31138:	strb	r3, [r9, #-2]
   3113c:	ldrb	r3, [fp, #1]
   31140:	strb	r3, [r9, #-1]
   31144:	movw	r8, #17288	; 0x4388
   31148:	movt	r8, #4
   3114c:	mov	r2, #100	; 0x64
   31150:	mov	r3, #0
   31154:	mov	r0, r4
   31158:	mov	r1, r5
   3115c:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   31160:	add	r3, r8, r2, lsl #1
   31164:	ldrb	r2, [r8, r2, lsl #1]
   31168:	strb	r2, [r6, #-2]
   3116c:	ldrb	r3, [r3, #1]
   31170:	strb	r3, [r6, #-1]
   31174:	mov	r2, #100	; 0x64
   31178:	mov	r3, #0
   3117c:	mov	r0, r4
   31180:	mov	r1, r5
   31184:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   31188:	mov	r2, #100	; 0x64
   3118c:	mov	r3, #0
   31190:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   31194:	add	r3, r8, r2, lsl #1
   31198:	ldrb	r2, [r8, r2, lsl #1]
   3119c:	strb	r2, [r6, #-4]
   311a0:	ldrb	r3, [r3, #1]
   311a4:	strb	r3, [r6, #-3]
   311a8:	movw	r2, #10000	; 0x2710
   311ac:	mov	r3, #0
   311b0:	mov	r0, r4
   311b4:	mov	r1, r5
   311b8:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   311bc:	mov	r2, #100	; 0x64
   311c0:	mov	r3, #0
   311c4:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   311c8:	add	r3, r8, r2, lsl #1
   311cc:	ldrb	r2, [r8, r2, lsl #1]
   311d0:	strb	r2, [r6, #-6]
   311d4:	ldrb	r3, [r3, #1]
   311d8:	strb	r3, [r6, #-5]
   311dc:	movw	r2, #16960	; 0x4240
   311e0:	movt	r2, #15
   311e4:	mov	r3, #0
   311e8:	mov	r0, r4
   311ec:	mov	r1, r5
   311f0:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   311f4:	mov	r2, #100	; 0x64
   311f8:	mov	r3, #0
   311fc:	bl	3e738 <flatcc_json_printer_clear@@Base+0x654>
   31200:	add	r3, r8, r2, lsl #1
   31204:	ldrb	r2, [r8, r2, lsl #1]
   31208:	strb	r2, [r6, #-8]
   3120c:	ldrb	r3, [r3, #1]
   31210:	strb	r3, [r6, #-7]
   31214:	mov	r0, r7
   31218:	add	sp, sp, #4
   3121c:	ldrd	r4, [sp]
   31220:	ldrd	r6, [sp, #8]
   31224:	ldrd	r8, [sp, #16]
   31228:	ldrd	sl, [sp, #24]
   3122c:	add	sp, sp, #32
   31230:	pop	{pc}		; (ldr pc, [sp], #4)
   31234:	add	r9, r6, #18
   31238:	mov	r3, #0
   3123c:	strb	r3, [r6, #18]
   31240:	mov	r7, #18
   31244:	b	30fa0 <flatcc_json_parser_struct_as_root@@Base+0xac8>
   31248:	add	r8, r6, #16
   3124c:	mov	r3, #0
   31250:	strb	r3, [r6, #16]
   31254:	mov	r7, #16
   31258:	b	30ff4 <flatcc_json_parser_struct_as_root@@Base+0xb1c>
   3125c:	str	r4, [sp, #-8]!
   31260:	str	lr, [sp, #4]
   31264:	lsr	r4, r0, #31
   31268:	cmp	r0, #0
   3126c:	blt	31288 <flatcc_json_parser_struct_as_root@@Base+0xdb0>
   31270:	uxtb	r0, r0
   31274:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   31278:	add	r0, r0, r4
   3127c:	ldr	r4, [sp]
   31280:	add	sp, sp, #4
   31284:	pop	{pc}		; (ldr pc, [sp], #4)
   31288:	mov	r3, #45	; 0x2d
   3128c:	strb	r3, [r1], #1
   31290:	rsb	r0, r0, #0
   31294:	sxtb	r0, r0
   31298:	b	31270 <flatcc_json_parser_struct_as_root@@Base+0xd98>
   3129c:	str	r4, [sp, #-8]!
   312a0:	str	lr, [sp, #4]
   312a4:	lsr	r4, r0, #31
   312a8:	cmp	r0, #0
   312ac:	blt	312c8 <flatcc_json_parser_struct_as_root@@Base+0xdf0>
   312b0:	uxth	r0, r0
   312b4:	bl	30688 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   312b8:	add	r0, r0, r4
   312bc:	ldr	r4, [sp]
   312c0:	add	sp, sp, #4
   312c4:	pop	{pc}		; (ldr pc, [sp], #4)
   312c8:	mov	r3, #45	; 0x2d
   312cc:	strb	r3, [r1], #1
   312d0:	rsb	r0, r0, #0
   312d4:	sxth	r0, r0
   312d8:	b	312b0 <flatcc_json_parser_struct_as_root@@Base+0xdd8>
   312dc:	str	r4, [sp, #-8]!
   312e0:	str	lr, [sp, #4]
   312e4:	lsr	r4, r0, #31
   312e8:	cmp	r0, #0
   312ec:	blt	31304 <flatcc_json_parser_struct_as_root@@Base+0xe2c>
   312f0:	bl	3081c <flatcc_json_parser_struct_as_root@@Base+0x344>
   312f4:	add	r0, r0, r4
   312f8:	ldr	r4, [sp]
   312fc:	add	sp, sp, #4
   31300:	pop	{pc}		; (ldr pc, [sp], #4)
   31304:	mov	r3, #45	; 0x2d
   31308:	strb	r3, [r1], #1
   3130c:	rsb	r0, r0, #0
   31310:	b	312f0 <flatcc_json_parser_struct_as_root@@Base+0xe18>
   31314:	str	r4, [sp, #-8]!
   31318:	str	lr, [sp, #4]
   3131c:	lsr	r4, r1, #31
   31320:	cmp	r0, #0
   31324:	sbcs	r3, r1, #0
   31328:	blt	31340 <flatcc_json_parser_struct_as_root@@Base+0xe68>
   3132c:	bl	30b80 <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   31330:	add	r0, r0, r4
   31334:	ldr	r4, [sp]
   31338:	add	sp, sp, #4
   3133c:	pop	{pc}		; (ldr pc, [sp], #4)
   31340:	mov	r3, #45	; 0x2d
   31344:	strb	r3, [r2], #1
   31348:	rsbs	r0, r0, #0
   3134c:	rsc	r1, r1, #0
   31350:	b	3132c <flatcc_json_parser_struct_as_root@@Base+0xe54>
   31354:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31358:	strd	r6, [sp, #8]
   3135c:	strd	r8, [sp, #16]
   31360:	strd	sl, [sp, #24]
   31364:	str	lr, [sp, #32]
   31368:	sub	sp, sp, #116	; 0x74
   3136c:	str	r0, [sp, #52]	; 0x34
   31370:	str	r1, [sp, #64]	; 0x40
   31374:	mov	r4, r2
   31378:	str	r2, [sp, #28]
   3137c:	str	r3, [sp, #20]
   31380:	ldr	ip, [sp, #152]	; 0x98
   31384:	str	ip, [sp, #68]	; 0x44
   31388:	ldr	lr, [sp, #156]	; 0x9c
   3138c:	str	lr, [sp, #48]	; 0x30
   31390:	ldrd	r0, [sp, #160]	; 0xa0
   31394:	ldrd	r2, [sp, #168]	; 0xa8
   31398:	ldr	lr, [sp, #176]	; 0xb0
   3139c:	ldr	r5, [sp, #180]	; 0xb4
   313a0:	str	r5, [sp, #24]
   313a4:	subs	sl, r4, lr
   313a8:	ldr	r4, [sp, #20]
   313ac:	sbc	fp, r4, r5
   313b0:	cmp	fp, r1
   313b4:	cmpeq	sl, r0
   313b8:	bls	31404 <flatcc_json_parser_struct_as_root@@Base+0xf2c>
   313bc:	subs	r6, ip, r0
   313c0:	ldr	r4, [sp, #48]	; 0x30
   313c4:	sbc	r7, r4, r1
   313c8:	cmp	r3, r7
   313cc:	cmpeq	r2, r6
   313d0:	bhi	31410 <flatcc_json_parser_struct_as_root@@Base+0xf38>
   313d4:	subs	ip, ip, r2
   313d8:	sbc	r6, r4, r3
   313dc:	subs	ip, ip, r0
   313e0:	str	ip, [sp, #32]
   313e4:	sbc	ip, r6, r1
   313e8:	str	ip, [sp, #36]	; 0x24
   313ec:	ldr	ip, [sp, #64]	; 0x40
   313f0:	sub	ip, ip, #1
   313f4:	ldr	r4, [sp, #52]	; 0x34
   313f8:	add	ip, r4, ip
   313fc:	ldrd	r4, [sp, #32]
   31400:	b	31454 <flatcc_json_parser_struct_as_root@@Base+0xf7c>
   31404:	mov	r8, r0
   31408:	mov	r9, r1
   3140c:	b	314d0 <flatcc_json_parser_struct_as_root@@Base+0xff8>
   31410:	mov	r8, r0
   31414:	mov	r9, r1
   31418:	b	3157c <flatcc_json_parser_struct_as_root@@Base+0x10a4>
   3141c:	mov	r0, #0
   31420:	b	315dc <flatcc_json_parser_struct_as_root@@Base+0x1104>
   31424:	ldrb	r1, [ip]
   31428:	sub	r1, r1, #1
   3142c:	strb	r1, [ip]
   31430:	subs	r7, r4, r2
   31434:	sbc	r6, r5, r3
   31438:	mov	r0, r8
   3143c:	mov	r1, r9
   31440:	cmp	r3, r5
   31444:	cmpeq	r2, r4
   31448:	bhi	3157c <flatcc_json_parser_struct_as_root@@Base+0x10a4>
   3144c:	mov	r4, r7
   31450:	mov	r5, r6
   31454:	adds	r8, r2, r0
   31458:	adc	r9, r3, r1
   3145c:	cmp	r9, fp
   31460:	cmpeq	r8, sl
   31464:	bcc	31424 <flatcc_json_parser_struct_as_root@@Base+0xf4c>
   31468:	subs	ip, sl, r0
   3146c:	str	ip, [sp]
   31470:	sbc	ip, fp, r1
   31474:	str	ip, [sp, #4]
   31478:	ldr	ip, [sp, #28]
   3147c:	subs	ip, lr, ip
   31480:	ldr	r4, [sp, #24]
   31484:	ldr	r5, [sp, #20]
   31488:	sbc	r4, r4, r5
   3148c:	adds	ip, ip, r8
   31490:	str	ip, [sp, #8]
   31494:	adc	ip, r4, r9
   31498:	str	ip, [sp, #12]
   3149c:	ldrd	r4, [sp]
   314a0:	ldrd	r6, [sp, #8]
   314a4:	cmp	r5, r7
   314a8:	cmpeq	r4, r6
   314ac:	movcc	r8, r0
   314b0:	movcc	r9, r1
   314b4:	bcc	314d0 <flatcc_json_parser_struct_as_root@@Base+0xff8>
   314b8:	ldr	r1, [sp, #64]	; 0x40
   314bc:	sub	r1, r1, #1
   314c0:	ldr	ip, [sp, #52]	; 0x34
   314c4:	ldrb	r0, [ip, r1]
   314c8:	sub	r0, r0, #1
   314cc:	strb	r0, [ip, r1]
   314d0:	ldr	r1, [sp, #28]
   314d4:	adds	r1, r1, lr
   314d8:	str	r1, [sp, #56]	; 0x38
   314dc:	ldr	r1, [sp, #20]
   314e0:	ldr	r0, [sp, #24]
   314e4:	adc	r1, r1, r0
   314e8:	str	r1, [sp, #60]	; 0x3c
   314ec:	ldrd	r0, [sp, #56]	; 0x38
   314f0:	cmp	r1, r9
   314f4:	cmpeq	r0, r8
   314f8:	bls	3157c <flatcc_json_parser_struct_as_root@@Base+0x10a4>
   314fc:	ldr	ip, [sp, #68]	; 0x44
   31500:	subs	ip, ip, r8
   31504:	str	ip, [sp, #80]	; 0x50
   31508:	ldr	ip, [sp, #48]	; 0x30
   3150c:	sbc	ip, ip, r9
   31510:	str	ip, [sp, #84]	; 0x54
   31514:	ldrd	r4, [sp, #80]	; 0x50
   31518:	cmp	r5, r3
   3151c:	cmpeq	r4, r2
   31520:	bcc	3157c <flatcc_json_parser_struct_as_root@@Base+0x10a4>
   31524:	adds	ip, r2, r8
   31528:	str	ip, [sp, #88]	; 0x58
   3152c:	adc	r3, r3, r9
   31530:	str	r3, [sp, #92]	; 0x5c
   31534:	ldrd	r2, [sp, #88]	; 0x58
   31538:	cmp	r3, r1
   3153c:	cmpeq	r2, r0
   31540:	movcc	r0, #0
   31544:	bcc	315dc <flatcc_json_parser_struct_as_root@@Base+0x1104>
   31548:	subs	ip, r0, r8
   3154c:	str	ip, [sp, #96]	; 0x60
   31550:	sbc	ip, r1, r9
   31554:	str	ip, [sp, #100]	; 0x64
   31558:	subs	ip, r2, r0
   3155c:	str	ip, [sp, #104]	; 0x68
   31560:	sbc	r3, r3, r1
   31564:	str	r3, [sp, #108]	; 0x6c
   31568:	ldrd	r2, [sp, #96]	; 0x60
   3156c:	ldrd	r0, [sp, #104]	; 0x68
   31570:	cmp	r3, r1
   31574:	cmpeq	r2, r0
   31578:	bhi	3141c <flatcc_json_parser_struct_as_root@@Base+0xf44>
   3157c:	adds	r3, lr, lr
   31580:	str	r3, [sp, #40]	; 0x28
   31584:	ldr	r1, [sp, #24]
   31588:	adc	r3, r1, r1
   3158c:	str	r3, [sp, #44]	; 0x2c
   31590:	ldrd	r2, [sp, #40]	; 0x28
   31594:	cmp	r3, r9
   31598:	cmpeq	r2, r8
   3159c:	movhi	r0, #0
   315a0:	bhi	315dc <flatcc_json_parser_struct_as_root@@Base+0x1104>
   315a4:	lsl	r3, r1, #2
   315a8:	orr	r3, r3, lr, lsr #30
   315ac:	lsl	r2, lr, #2
   315b0:	ldr	r1, [sp, #68]	; 0x44
   315b4:	subs	r2, r1, r2
   315b8:	str	r2, [sp, #72]	; 0x48
   315bc:	ldr	r2, [sp, #48]	; 0x30
   315c0:	sbc	r3, r2, r3
   315c4:	str	r3, [sp, #76]	; 0x4c
   315c8:	ldrd	r2, [sp, #72]	; 0x48
   315cc:	cmp	r3, r9
   315d0:	cmpeq	r2, r8
   315d4:	movcs	r0, #1
   315d8:	movcc	r0, #0
   315dc:	add	sp, sp, #116	; 0x74
   315e0:	ldrd	r4, [sp]
   315e4:	ldrd	r6, [sp, #8]
   315e8:	ldrd	r8, [sp, #16]
   315ec:	ldrd	sl, [sp, #24]
   315f0:	add	sp, sp, #32
   315f4:	pop	{pc}		; (ldr pc, [sp], #4)
   315f8:	strd	r4, [sp, #-12]!
   315fc:	str	lr, [sp, #8]
   31600:	subs	r3, r0, #0
   31604:	mov	lr, r1
   31608:	movlt	r2, #45	; 0x2d
   3160c:	strblt	r2, [lr], #1
   31610:	rsblt	r3, r3, #0
   31614:	mov	r0, lr
   31618:	movw	r4, #26215	; 0x6667
   3161c:	movt	r4, #26214	; 0x6666
   31620:	mvn	r5, #9
   31624:	smull	r2, ip, r4, r3
   31628:	asr	r2, r3, #31
   3162c:	rsb	r2, r2, ip, asr #2
   31630:	mla	r3, r5, r2, r3
   31634:	add	r3, r3, #48	; 0x30
   31638:	strb	r3, [r0], #1
   3163c:	mov	r3, r2
   31640:	cmp	r2, #0
   31644:	bne	31624 <flatcc_json_parser_struct_as_root@@Base+0x114c>
   31648:	mov	r3, #0
   3164c:	strb	r3, [r0]
   31650:	sub	r3, r0, lr
   31654:	add	r5, r3, r3, lsr #31
   31658:	asr	r5, r5, #1
   3165c:	cmp	r3, #1
   31660:	ble	31690 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   31664:	sub	r3, lr, #1
   31668:	mov	ip, r0
   3166c:	ldrb	r2, [r3, #1]
   31670:	ldrb	r4, [ip, #-1]!
   31674:	strb	r4, [r3, #1]
   31678:	strb	r2, [ip]
   3167c:	add	r2, r3, #2
   31680:	sub	r2, r2, lr
   31684:	add	r3, r3, #1
   31688:	cmp	r5, r2
   3168c:	bgt	3166c <flatcc_json_parser_struct_as_root@@Base+0x1194>
   31690:	sub	r0, r0, r1
   31694:	ldrd	r4, [sp]
   31698:	add	sp, sp, #8
   3169c:	pop	{pc}		; (ldr pc, [sp], #4)
   316a0:	lsl	r3, r0, #2
   316a4:	movw	r2, #43691	; 0xaaab
   316a8:	movt	r2, #43690	; 0xaaaa
   316ac:	umull	r2, r3, r2, r3
   316b0:	lsr	r3, r3, #1
   316b4:	add	r3, r3, #3
   316b8:	bic	r3, r3, #3
   316bc:	tst	r1, #128	; 0x80
   316c0:	bne	316f0 <flatcc_json_parser_struct_as_root@@Base+0x1218>
   316c4:	movw	r2, #43691	; 0xaaab
   316c8:	movt	r2, #43690	; 0xaaaa
   316cc:	umull	r1, r2, r2, r0
   316d0:	lsr	r2, r2, #1
   316d4:	add	r2, r2, r2, lsl #1
   316d8:	sub	r2, r0, r2
   316dc:	cmp	r2, #1
   316e0:	subeq	r3, r3, #2
   316e4:	beq	316f0 <flatcc_json_parser_struct_as_root@@Base+0x1218>
   316e8:	cmp	r2, #2
   316ec:	subeq	r3, r3, #1
   316f0:	mov	r0, r3
   316f4:	bx	lr
   316f8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   316fc:	strd	r6, [sp, #8]
   31700:	strd	r8, [sp, #16]
   31704:	str	lr, [sp, #24]
   31708:	ldr	r8, [sp, #28]
   3170c:	cmp	r3, #0
   31710:	beq	318d4 <flatcc_json_parser_struct_as_root@@Base+0x13fc>
   31714:	ldr	r6, [r3]
   31718:	bics	ip, r8, #224	; 0xe0
   3171c:	beq	31774 <flatcc_json_parser_struct_as_root@@Base+0x129c>
   31720:	cmp	ip, #1
   31724:	movweq	r5, #19208	; 0x4b08
   31728:	movteq	r5, #4
   3172c:	beq	3177c <flatcc_json_parser_struct_as_root@@Base+0x12a4>
   31730:	mov	r7, r0
   31734:	mov	r1, #3
   31738:	cmp	r2, #0
   3173c:	beq	31750 <flatcc_json_parser_struct_as_root@@Base+0x1278>
   31740:	sub	r0, r7, r0
   31744:	str	r0, [r2]
   31748:	cmp	r3, #0
   3174c:	beq	3175c <flatcc_json_parser_struct_as_root@@Base+0x1284>
   31750:	ldr	r2, [r3]
   31754:	sub	r6, r2, r6
   31758:	str	r6, [r3]
   3175c:	mov	r0, r1
   31760:	ldrd	r4, [sp]
   31764:	ldrd	r6, [sp, #8]
   31768:	ldrd	r8, [sp, #16]
   3176c:	add	sp, sp, #24
   31770:	pop	{pc}		; (ldr pc, [sp], #4)
   31774:	movw	r5, #19140	; 0x4ac4
   31778:	movt	r5, #4
   3177c:	cmp	r6, #2
   31780:	bls	31880 <flatcc_json_parser_struct_as_root@@Base+0x13a8>
   31784:	add	r4, r0, #4
   31788:	add	ip, r1, #3
   3178c:	mov	r1, ip
   31790:	mov	r7, r4
   31794:	ldrb	lr, [ip, #-3]
   31798:	ldrb	lr, [r5, lr, lsr #2]
   3179c:	strb	lr, [r4, #-4]
   317a0:	ldrb	lr, [ip, #-3]
   317a4:	lsl	lr, lr, #4
   317a8:	and	lr, lr, #48	; 0x30
   317ac:	ldrb	r9, [ip, #-2]
   317b0:	orr	lr, lr, r9, lsr #4
   317b4:	ldrb	lr, [r5, lr]
   317b8:	strb	lr, [r4, #-3]
   317bc:	ldrb	lr, [ip, #-2]
   317c0:	lsl	lr, lr, #2
   317c4:	and	lr, lr, #60	; 0x3c
   317c8:	ldrb	r9, [ip, #-1]
   317cc:	orr	lr, lr, r9, lsr #6
   317d0:	ldrb	lr, [r5, lr]
   317d4:	strb	lr, [r4, #-2]
   317d8:	ldrb	lr, [ip, #-1]
   317dc:	and	lr, lr, #63	; 0x3f
   317e0:	ldrb	lr, [r5, lr]
   317e4:	strb	lr, [r4, #-1]
   317e8:	sub	r6, r6, #3
   317ec:	add	r4, r4, #4
   317f0:	add	ip, ip, #3
   317f4:	cmp	r6, #2
   317f8:	bhi	3178c <flatcc_json_parser_struct_as_root@@Base+0x12b4>
   317fc:	and	r8, r8, #128	; 0x80
   31800:	cmp	r6, #1
   31804:	beq	31888 <flatcc_json_parser_struct_as_root@@Base+0x13b0>
   31808:	cmp	r6, #2
   3180c:	bne	318c8 <flatcc_json_parser_struct_as_root@@Base+0x13f0>
   31810:	ldrb	ip, [r1]
   31814:	ldrb	ip, [r5, ip, lsr #2]
   31818:	strb	ip, [r7]
   3181c:	ldrb	ip, [r1]
   31820:	lsl	ip, ip, #4
   31824:	and	ip, ip, #48	; 0x30
   31828:	ldrb	lr, [r1, #1]
   3182c:	orr	ip, ip, lr, lsr #4
   31830:	ldrb	ip, [r5, ip]
   31834:	strb	ip, [r7, #1]
   31838:	ldrb	r1, [r1, #1]
   3183c:	lsl	r1, r1, #2
   31840:	and	r1, r1, #60	; 0x3c
   31844:	ldrb	r1, [r5, r1]
   31848:	strb	r1, [r7, #2]
   3184c:	cmp	r8, #0
   31850:	addeq	r7, r7, #3
   31854:	beq	31864 <flatcc_json_parser_struct_as_root@@Base+0x138c>
   31858:	mov	r1, #61	; 0x3d
   3185c:	strb	r1, [r7, #3]
   31860:	add	r7, r7, #4
   31864:	cmp	r2, #0
   31868:	moveq	r1, #0
   3186c:	moveq	r6, r1
   31870:	beq	31750 <flatcc_json_parser_struct_as_root@@Base+0x1278>
   31874:	mov	r1, #0
   31878:	mov	r6, r1
   3187c:	b	31740 <flatcc_json_parser_struct_as_root@@Base+0x1268>
   31880:	mov	r7, r0
   31884:	b	317fc <flatcc_json_parser_struct_as_root@@Base+0x1324>
   31888:	ldrb	ip, [r1]
   3188c:	ldrb	ip, [r5, ip, lsr #2]
   31890:	strb	ip, [r7]
   31894:	ldrb	r1, [r1]
   31898:	lsl	r1, r1, #4
   3189c:	and	r1, r1, #48	; 0x30
   318a0:	ldrb	r1, [r5, r1]
   318a4:	strb	r1, [r7, #1]
   318a8:	cmp	r8, #0
   318ac:	addeq	r7, r7, #2
   318b0:	beq	31864 <flatcc_json_parser_struct_as_root@@Base+0x138c>
   318b4:	mov	r1, #61	; 0x3d
   318b8:	strb	r1, [r7, #2]
   318bc:	strb	r1, [r7, #3]
   318c0:	add	r7, r7, #4
   318c4:	b	31864 <flatcc_json_parser_struct_as_root@@Base+0x138c>
   318c8:	mov	r1, #0
   318cc:	mov	r6, r1
   318d0:	b	31738 <flatcc_json_parser_struct_as_root@@Base+0x1260>
   318d4:	cmp	r2, #0
   318d8:	movne	r7, r0
   318dc:	movne	r1, #2
   318e0:	movne	r6, #0
   318e4:	bne	31740 <flatcc_json_parser_struct_as_root@@Base+0x1268>
   318e8:	mov	r1, #2
   318ec:	b	3175c <flatcc_json_parser_struct_as_root@@Base+0x1284>
   318f0:	ldr	r3, [r0, #20]
   318f4:	ldr	r2, [r0, #16]
   318f8:	cmp	r3, r2
   318fc:	bcc	31928 <flatcc_json_parser_struct_as_root@@Base+0x1450>
   31900:	ldr	r2, [r0, #36]	; 0x24
   31904:	cmp	r2, #0
   31908:	moveq	r2, #3
   3190c:	streq	r2, [r0, #36]	; 0x24
   31910:	ldr	r1, [r0]
   31914:	sub	r3, r3, r1
   31918:	ldr	r2, [r0, #12]
   3191c:	add	r3, r2, r3
   31920:	str	r3, [r0, #12]
   31924:	str	r1, [r0, #20]
   31928:	ldr	r3, [r0, #20]
   3192c:	mov	r2, #0
   31930:	strb	r2, [r3]
   31934:	bx	lr
   31938:	sub	sp, sp, #8
   3193c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   31940:	strd	r6, [sp, #8]
   31944:	strd	r8, [sp, #16]
   31948:	str	sl, [sp, #24]
   3194c:	str	lr, [sp, #28]
   31950:	add	r1, sp, #28
   31954:	stmib	r1, {r2, r3}
   31958:	ldrd	r2, [sp, #32]
   3195c:	ldr	lr, [sp, #40]	; 0x28
   31960:	orrs	r1, r2, r3
   31964:	beq	31a20 <flatcc_json_parser_struct_as_root@@Base+0x1548>
   31968:	mov	r8, #0
   3196c:	lsr	r9, r3, #22
   31970:	lsl	r9, r9, #22
   31974:	orrs	r1, r8, r9
   31978:	subeq	ip, lr, #10
   3197c:	moveq	r9, #0
   31980:	moveq	r8, r9
   31984:	movteq	r8, #65472	; 0xffc0
   31988:	bne	319b8 <flatcc_json_parser_struct_as_root@@Base+0x14e0>
   3198c:	lsl	r1, r3, #10
   31990:	orr	r1, r1, r2, lsr #22
   31994:	lsl	lr, r2, #10
   31998:	mov	r2, lr
   3199c:	mov	r3, r1
   319a0:	mov	lr, ip
   319a4:	mov	r6, r9
   319a8:	and	r7, r1, r8
   319ac:	sub	ip, ip, #10
   319b0:	orrs	r1, r6, r7
   319b4:	beq	3198c <flatcc_json_parser_struct_as_root@@Base+0x14b4>
   319b8:	cmp	r2, #0
   319bc:	sbcs	r1, r3, #0
   319c0:	blt	319ec <flatcc_json_parser_struct_as_root@@Base+0x1514>
   319c4:	sub	r1, lr, #1
   319c8:	adds	r4, r2, r2
   319cc:	adc	r5, r3, r3
   319d0:	mov	r2, r4
   319d4:	mov	r3, r5
   319d8:	mov	lr, r1
   319dc:	sub	r1, r1, #1
   319e0:	cmp	r4, #0
   319e4:	sbcs	ip, r5, #0
   319e8:	bge	319c8 <flatcc_json_parser_struct_as_root@@Base+0x14f0>
   319ec:	strd	r2, [sp, #32]
   319f0:	str	lr, [sp, #40]	; 0x28
   319f4:	strd	r2, [r0]
   319f8:	ldrd	r2, [sp, #40]	; 0x28
   319fc:	strd	r2, [r0, #8]
   31a00:	ldrd	r4, [sp]
   31a04:	ldrd	r6, [sp, #8]
   31a08:	ldrd	r8, [sp, #16]
   31a0c:	ldr	sl, [sp, #24]
   31a10:	ldr	lr, [sp, #28]
   31a14:	add	sp, sp, #32
   31a18:	add	sp, sp, #8
   31a1c:	bx	lr
   31a20:	ldr	r3, [pc, #20]	; 31a3c <flatcc_json_parser_struct_as_root@@Base+0x1564>
   31a24:	mov	r2, #260	; 0x104
   31a28:	movw	r1, #16216	; 0x3f58
   31a2c:	movt	r1, #4
   31a30:	movw	r0, #16304	; 0x3fb0
   31a34:	movt	r0, #4
   31a38:	bl	145f0 <__assert_fail@plt>
   31a3c:	andeq	r4, r4, r4, asr r4
   31a40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31a44:	strd	r6, [sp, #8]
   31a48:	str	r8, [sp, #16]
   31a4c:	str	lr, [sp, #20]
   31a50:	mov	r5, r0
   31a54:	mov	r7, r1
   31a58:	mov	r6, r2
   31a5c:	ldr	r2, [r0, #20]
   31a60:	ldr	r3, [r0, #16]
   31a64:	cmp	r2, r3
   31a68:	bcc	31a78 <flatcc_json_parser_struct_as_root@@Base+0x15a0>
   31a6c:	ldr	r3, [r0, #44]	; 0x2c
   31a70:	mov	r1, #0
   31a74:	blx	r3
   31a78:	ldr	r4, [r5, #16]
   31a7c:	ldr	r3, [r5, #20]
   31a80:	sub	r4, r4, r3
   31a84:	cmp	r4, r6
   31a88:	bcs	31ad8 <flatcc_json_parser_struct_as_root@@Base+0x1600>
   31a8c:	mov	r8, #0
   31a90:	mov	r2, r4
   31a94:	mov	r1, r7
   31a98:	ldr	r0, [r5, #20]
   31a9c:	bl	14524 <memcpy@plt>
   31aa0:	ldr	r3, [r5, #20]
   31aa4:	add	r3, r3, r4
   31aa8:	str	r3, [r5, #20]
   31aac:	add	r7, r7, r4
   31ab0:	sub	r6, r6, r4
   31ab4:	ldr	r3, [r5, #44]	; 0x2c
   31ab8:	mov	r1, r8
   31abc:	mov	r0, r5
   31ac0:	blx	r3
   31ac4:	ldr	r4, [r5, #16]
   31ac8:	ldr	r3, [r5, #20]
   31acc:	sub	r4, r4, r3
   31ad0:	cmp	r6, r4
   31ad4:	bhi	31a90 <flatcc_json_parser_struct_as_root@@Base+0x15b8>
   31ad8:	mov	r2, r6
   31adc:	mov	r1, r7
   31ae0:	ldr	r0, [r5, #20]
   31ae4:	bl	14524 <memcpy@plt>
   31ae8:	ldr	r3, [r5, #20]
   31aec:	add	r6, r3, r6
   31af0:	str	r6, [r5, #20]
   31af4:	ldrd	r4, [sp]
   31af8:	ldrd	r6, [sp, #8]
   31afc:	ldr	r8, [sp, #16]
   31b00:	add	sp, sp, #20
   31b04:	pop	{pc}		; (ldr pc, [sp], #4)
   31b08:	cmp	r0, #0
   31b0c:	beq	31b30 <flatcc_json_parser_struct_as_root@@Base+0x1658>
   31b10:	movw	r3, #17288	; 0x4388
   31b14:	movt	r3, #4
   31b18:	ldr	r2, [r3, #228]	; 0xe4
   31b1c:	str	r2, [r1]
   31b20:	ldrb	r3, [r3, #232]	; 0xe8
   31b24:	strb	r3, [r1, #4]
   31b28:	mov	r0, #4
   31b2c:	bx	lr
   31b30:	movw	r3, #17288	; 0x4388
   31b34:	movt	r3, #4
   31b38:	ldr	r2, [r3, #236]	; 0xec
   31b3c:	str	r2, [r1]
   31b40:	ldrh	r3, [r3, #240]	; 0xf0
   31b44:	strh	r3, [r1, #4]
   31b48:	mov	r0, #5
   31b4c:	bx	lr
   31b50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31b54:	strd	r6, [sp, #8]
   31b58:	str	r8, [sp, #16]
   31b5c:	str	lr, [sp, #20]
   31b60:	mov	r4, r0
   31b64:	mov	r6, r1
   31b68:	ldr	r2, [r0, #20]
   31b6c:	ldr	r3, [r0, #16]
   31b70:	cmp	r2, r3
   31b74:	bcc	31b84 <flatcc_json_parser_struct_as_root@@Base+0x16ac>
   31b78:	ldr	r3, [r0, #44]	; 0x2c
   31b7c:	mov	r1, #0
   31b80:	blx	r3
   31b84:	ldr	r5, [r4, #16]
   31b88:	ldr	r3, [r4, #20]
   31b8c:	sub	r5, r5, r3
   31b90:	cmp	r5, r6
   31b94:	bcs	31be4 <flatcc_json_parser_struct_as_root@@Base+0x170c>
   31b98:	mov	r8, #32
   31b9c:	mov	r7, #0
   31ba0:	mov	r2, r5
   31ba4:	mov	r1, r8
   31ba8:	ldr	r0, [r4, #20]
   31bac:	bl	1459c <memset@plt>
   31bb0:	ldr	r3, [r4, #20]
   31bb4:	add	r3, r3, r5
   31bb8:	str	r3, [r4, #20]
   31bbc:	sub	r6, r6, r5
   31bc0:	ldr	r3, [r4, #44]	; 0x2c
   31bc4:	mov	r1, r7
   31bc8:	mov	r0, r4
   31bcc:	blx	r3
   31bd0:	ldr	r5, [r4, #16]
   31bd4:	ldr	r3, [r4, #20]
   31bd8:	sub	r5, r5, r3
   31bdc:	cmp	r6, r5
   31be0:	bhi	31ba0 <flatcc_json_parser_struct_as_root@@Base+0x16c8>
   31be4:	mov	r2, r6
   31be8:	mov	r1, #32
   31bec:	ldr	r0, [r4, #20]
   31bf0:	bl	1459c <memset@plt>
   31bf4:	ldr	r3, [r4, #20]
   31bf8:	add	r6, r3, r6
   31bfc:	str	r6, [r4, #20]
   31c00:	ldrd	r4, [sp]
   31c04:	ldrd	r6, [sp, #8]
   31c08:	ldr	r8, [sp, #16]
   31c0c:	add	sp, sp, #20
   31c10:	pop	{pc}		; (ldr pc, [sp], #4)
   31c14:	strd	r4, [sp, #-16]!
   31c18:	str	r6, [sp, #8]
   31c1c:	str	lr, [sp, #12]
   31c20:	mov	r4, r0
   31c24:	ldrb	r3, [r0, #25]
   31c28:	ldr	r5, [r0, #32]
   31c2c:	mul	r5, r5, r3
   31c30:	ldr	r0, [r0, #20]
   31c34:	add	r3, r0, r5
   31c38:	ldr	r2, [r4, #16]
   31c3c:	cmp	r2, r3
   31c40:	bcs	31c60 <flatcc_json_parser_struct_as_root@@Base+0x1788>
   31c44:	mov	r1, r5
   31c48:	mov	r0, r4
   31c4c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   31c50:	ldrd	r4, [sp]
   31c54:	ldr	r6, [sp, #8]
   31c58:	add	sp, sp, #12
   31c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   31c60:	mov	r2, r5
   31c64:	mov	r1, #32
   31c68:	bl	1459c <memset@plt>
   31c6c:	ldr	r3, [r4, #20]
   31c70:	add	r5, r3, r5
   31c74:	str	r5, [r4, #20]
   31c78:	b	31c50 <flatcc_json_parser_struct_as_root@@Base+0x1778>
   31c7c:	strd	r4, [sp, #-12]!
   31c80:	str	lr, [sp, #8]
   31c84:	sub	sp, sp, #12
   31c88:	mov	r5, r0
   31c8c:	mov	r0, #0
   31c90:	str	r0, [sp, #4]
   31c94:	cmp	r1, r0
   31c98:	cmpne	r2, #7
   31c9c:	bls	31ce4 <flatcc_json_parser_struct_as_root@@Base+0x180c>
   31ca0:	mov	r4, r1
   31ca4:	cmp	r3, #0
   31ca8:	beq	31cd0 <flatcc_json_parser_struct_as_root@@Base+0x17f8>
   31cac:	mov	r2, #4
   31cb0:	mov	r1, r3
   31cb4:	add	r0, sp, r2
   31cb8:	bl	145a8 <strncpy@plt>
   31cbc:	ldr	r3, [sp, #4]
   31cc0:	ldr	r2, [r4, #4]
   31cc4:	cmp	r2, r3
   31cc8:	cmpne	r3, #0
   31ccc:	bne	31d10 <flatcc_json_parser_struct_as_root@@Base+0x1838>
   31cd0:	mov	r0, #1
   31cd4:	add	sp, sp, #12
   31cd8:	ldrd	r4, [sp]
   31cdc:	add	sp, sp, #8
   31ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   31ce4:	ldr	r3, [r5, #36]	; 0x24
   31ce8:	cmp	r3, r0
   31cec:	moveq	r3, #1
   31cf0:	streq	r3, [r5, #36]	; 0x24
   31cf4:	ldr	r3, [pc, #64]	; 31d3c <flatcc_json_parser_struct_as_root@@Base+0x1864>
   31cf8:	movw	r2, #1019	; 0x3fb
   31cfc:	movw	r1, #19276	; 0x4b4c
   31d00:	movt	r1, #4
   31d04:	movw	r0, #19352	; 0x4b98
   31d08:	movt	r0, #4
   31d0c:	bl	145f0 <__assert_fail@plt>
   31d10:	ldr	r3, [r5, #36]	; 0x24
   31d14:	cmp	r3, #0
   31d18:	moveq	r3, #1
   31d1c:	streq	r3, [r5, #36]	; 0x24
   31d20:	ldr	r3, [pc, #20]	; 31d3c <flatcc_json_parser_struct_as_root@@Base+0x1864>
   31d24:	movw	r2, #1028	; 0x404
   31d28:	movw	r1, #19276	; 0x4b4c
   31d2c:	movt	r1, #4
   31d30:	movw	r0, #19384	; 0x4bb8
   31d34:	movt	r0, #4
   31d38:	bl	145f0 <__assert_fail@plt>
   31d3c:	andeq	r4, r4, ip, ror r4
   31d40:	strd	r4, [sp, #-16]!
   31d44:	str	r6, [sp, #8]
   31d48:	str	lr, [sp, #12]
   31d4c:	mov	r4, r0
   31d50:	cmp	r1, #0
   31d54:	bne	31d68 <flatcc_json_parser_struct_as_root@@Base+0x1890>
   31d58:	ldr	r3, [r0, #20]
   31d5c:	ldr	r5, [r0, #16]
   31d60:	cmp	r3, r5
   31d64:	bcs	31db4 <flatcc_json_parser_struct_as_root@@Base+0x18dc>
   31d68:	ldr	r0, [r4]
   31d6c:	ldr	r5, [r4, #20]
   31d70:	sub	r5, r5, r0
   31d74:	ldr	r3, [r4, #40]	; 0x28
   31d78:	mov	r2, #1
   31d7c:	mov	r1, r5
   31d80:	bl	14548 <fwrite@plt>
   31d84:	ldr	r3, [r4]
   31d88:	str	r3, [r4, #20]
   31d8c:	ldr	r3, [r4, #12]
   31d90:	add	r5, r3, r5
   31d94:	str	r5, [r4, #12]
   31d98:	ldr	r3, [r4, #20]
   31d9c:	mov	r2, #0
   31da0:	strb	r2, [r3]
   31da4:	ldrd	r4, [sp]
   31da8:	ldr	r6, [sp, #8]
   31dac:	add	sp, sp, #12
   31db0:	pop	{pc}		; (ldr pc, [sp], #4)
   31db4:	sub	r5, r3, r5
   31db8:	ldr	r3, [r0, #40]	; 0x28
   31dbc:	mov	r2, #1
   31dc0:	ldr	r1, [r0, #8]
   31dc4:	ldr	r0, [r0]
   31dc8:	bl	14548 <fwrite@plt>
   31dcc:	ldr	r0, [r4]
   31dd0:	ldr	r1, [r4, #8]
   31dd4:	mov	r2, r5
   31dd8:	add	r1, r0, r1
   31ddc:	bl	14524 <memcpy@plt>
   31de0:	ldr	r3, [r4]
   31de4:	add	r3, r3, r5
   31de8:	str	r3, [r4, #20]
   31dec:	ldr	r3, [r4, #12]
   31df0:	ldr	r2, [r4, #8]
   31df4:	add	r3, r3, r2
   31df8:	str	r3, [r4, #12]
   31dfc:	b	31d98 <flatcc_json_parser_struct_as_root@@Base+0x18c0>
   31e00:	strd	r4, [sp, #-16]!
   31e04:	str	r6, [sp, #8]
   31e08:	str	lr, [sp, #12]
   31e0c:	ldr	r3, [r0, #20]
   31e10:	ldr	r5, [r0]
   31e14:	mov	r2, #0
   31e18:	strb	r2, [r3]
   31e1c:	ldr	r1, [r0, #20]
   31e20:	ldr	r2, [r0, #16]
   31e24:	cmp	r1, r2
   31e28:	bcs	31e3c <flatcc_json_parser_struct_as_root@@Base+0x1964>
   31e2c:	ldrd	r4, [sp]
   31e30:	ldr	r6, [sp, #8]
   31e34:	add	sp, sp, #12
   31e38:	pop	{pc}		; (ldr pc, [sp], #4)
   31e3c:	mov	r4, r0
   31e40:	sub	r5, r3, r5
   31e44:	ldr	r1, [r0, #4]
   31e48:	lsl	r1, r1, #1
   31e4c:	ldr	r0, [r0]
   31e50:	bl	1453c <realloc@plt>
   31e54:	cmp	r0, #0
   31e58:	beq	31e94 <flatcc_json_parser_struct_as_root@@Base+0x19bc>
   31e5c:	ldr	r3, [r4, #4]
   31e60:	lsl	r3, r3, #1
   31e64:	str	r3, [r4, #4]
   31e68:	sub	r3, r3, #64	; 0x40
   31e6c:	str	r3, [r4, #8]
   31e70:	str	r0, [r4]
   31e74:	add	r5, r0, r5
   31e78:	str	r5, [r4, #20]
   31e7c:	add	r0, r0, r3
   31e80:	str	r0, [r4, #16]
   31e84:	ldr	r3, [r4, #20]
   31e88:	mov	r2, #0
   31e8c:	strb	r2, [r3]
   31e90:	b	31e2c <flatcc_json_parser_struct_as_root@@Base+0x1954>
   31e94:	ldr	r3, [r4, #36]	; 0x24
   31e98:	cmp	r3, #0
   31e9c:	moveq	r3, #3
   31ea0:	streq	r3, [r4, #36]	; 0x24
   31ea4:	ldr	r3, [r4, #12]
   31ea8:	add	r3, r3, r5
   31eac:	str	r3, [r4, #12]
   31eb0:	ldr	r3, [r4]
   31eb4:	str	r3, [r4, #20]
   31eb8:	b	31e84 <flatcc_json_parser_struct_as_root@@Base+0x19ac>
   31ebc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31ec0:	strd	r6, [sp, #8]
   31ec4:	strd	r8, [sp, #16]
   31ec8:	strd	sl, [sp, #24]
   31ecc:	str	lr, [sp, #32]
   31ed0:	sub	sp, sp, #4
   31ed4:	mov	r6, r0
   31ed8:	mov	sl, r2
   31edc:	ldr	r3, [r0, #20]
   31ee0:	add	r2, r3, #1
   31ee4:	str	r2, [r0, #20]
   31ee8:	mov	r2, #34	; 0x22
   31eec:	strb	r2, [r3]
   31ef0:	mov	r7, #92	; 0x5c
   31ef4:	mov	r9, #102	; 0x66
   31ef8:	mov	r8, #117	; 0x75
   31efc:	b	31f6c <flatcc_json_parser_struct_as_root@@Base+0x1a94>
   31f00:	mov	r5, r1
   31f04:	b	31fc0 <flatcc_json_parser_struct_as_root@@Base+0x1ae8>
   31f08:	mov	r2, fp
   31f0c:	bl	14524 <memcpy@plt>
   31f10:	ldr	r3, [r6, #20]
   31f14:	add	r3, r3, fp
   31f18:	str	r3, [r6, #20]
   31f1c:	b	31fe4 <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   31f20:	cmp	r4, #34	; 0x22
   31f24:	beq	31f50 <flatcc_json_parser_struct_as_root@@Base+0x1a78>
   31f28:	cmp	r4, #92	; 0x5c
   31f2c:	beq	320a0 <flatcc_json_parser_struct_as_root@@Base+0x1bc8>
   31f30:	cmp	r4, #13
   31f34:	bne	32020 <flatcc_json_parser_struct_as_root@@Base+0x1b48>
   31f38:	ldr	r3, [r6, #20]
   31f3c:	add	r2, r3, #1
   31f40:	str	r2, [r6, #20]
   31f44:	mov	r2, #114	; 0x72
   31f48:	strb	r2, [r3]
   31f4c:	b	31f64 <flatcc_json_parser_struct_as_root@@Base+0x1a8c>
   31f50:	ldr	r3, [r6, #20]
   31f54:	add	r2, r3, #1
   31f58:	str	r2, [r6, #20]
   31f5c:	mov	r2, #34	; 0x22
   31f60:	strb	r2, [r3]
   31f64:	sub	sl, sl, #1
   31f68:	add	r1, r5, #1
   31f6c:	ldrb	r4, [r1]
   31f70:	cmp	r4, #34	; 0x22
   31f74:	cmpne	r4, #31
   31f78:	movhi	r3, #1
   31f7c:	movls	r3, #0
   31f80:	cmp	r4, #92	; 0x5c
   31f84:	moveq	r3, #0
   31f88:	andne	r3, r3, #1
   31f8c:	cmp	r3, #0
   31f90:	beq	31f00 <flatcc_json_parser_struct_as_root@@Base+0x1a28>
   31f94:	mov	r5, r1
   31f98:	ldrb	r4, [r5, #1]!
   31f9c:	cmp	r4, #34	; 0x22
   31fa0:	cmpne	r4, #31
   31fa4:	movhi	r3, #1
   31fa8:	movls	r3, #0
   31fac:	cmp	r4, #92	; 0x5c
   31fb0:	moveq	r3, #0
   31fb4:	andne	r3, r3, #1
   31fb8:	cmp	r3, #0
   31fbc:	bne	31f98 <flatcc_json_parser_struct_as_root@@Base+0x1ac0>
   31fc0:	sub	fp, r5, r1
   31fc4:	ldr	r0, [r6, #20]
   31fc8:	add	r3, r0, fp
   31fcc:	ldr	r2, [r6, #16]
   31fd0:	cmp	r2, r3
   31fd4:	bhi	31f08 <flatcc_json_parser_struct_as_root@@Base+0x1a30>
   31fd8:	mov	r2, fp
   31fdc:	mov	r0, r6
   31fe0:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   31fe4:	subs	sl, sl, fp
   31fe8:	beq	32110 <flatcc_json_parser_struct_as_root@@Base+0x1c38>
   31fec:	ldr	r3, [r6, #20]
   31ff0:	add	r2, r3, #1
   31ff4:	str	r2, [r6, #20]
   31ff8:	strb	r7, [r3]
   31ffc:	cmp	r4, #12
   32000:	beq	320cc <flatcc_json_parser_struct_as_root@@Base+0x1bf4>
   32004:	bhi	31f20 <flatcc_json_parser_struct_as_root@@Base+0x1a48>
   32008:	cmp	r4, #9
   3200c:	beq	320b4 <flatcc_json_parser_struct_as_root@@Base+0x1bdc>
   32010:	cmp	r4, #10
   32014:	beq	320e0 <flatcc_json_parser_struct_as_root@@Base+0x1c08>
   32018:	cmp	r4, #8
   3201c:	beq	320f8 <flatcc_json_parser_struct_as_root@@Base+0x1c20>
   32020:	ldr	r3, [r6, #20]
   32024:	add	r2, r3, #1
   32028:	str	r2, [r6, #20]
   3202c:	strb	r8, [r3]
   32030:	ldr	r3, [r6, #20]
   32034:	add	r2, r3, #1
   32038:	str	r2, [r6, #20]
   3203c:	mov	r2, #48	; 0x30
   32040:	strb	r2, [r3]
   32044:	ldr	r3, [r6, #20]
   32048:	add	r1, r3, #1
   3204c:	str	r1, [r6, #20]
   32050:	strb	r2, [r3]
   32054:	lsr	r1, r4, #4
   32058:	cmp	r1, #10
   3205c:	movcc	r3, r2
   32060:	movcs	r3, #87	; 0x57
   32064:	ldr	r2, [r6, #20]
   32068:	add	r0, r2, #1
   3206c:	str	r0, [r6, #20]
   32070:	add	r3, r3, r1
   32074:	strb	r3, [r2]
   32078:	and	r4, r4, #15
   3207c:	cmp	r4, #10
   32080:	movcc	r3, #48	; 0x30
   32084:	movcs	r3, #87	; 0x57
   32088:	ldr	r2, [r6, #20]
   3208c:	add	r1, r2, #1
   32090:	str	r1, [r6, #20]
   32094:	add	r4, r3, r4
   32098:	strb	r4, [r2]
   3209c:	b	31f64 <flatcc_json_parser_struct_as_root@@Base+0x1a8c>
   320a0:	ldr	r3, [r6, #20]
   320a4:	add	r2, r3, #1
   320a8:	str	r2, [r6, #20]
   320ac:	strb	r7, [r3]
   320b0:	b	31f64 <flatcc_json_parser_struct_as_root@@Base+0x1a8c>
   320b4:	ldr	r3, [r6, #20]
   320b8:	add	r2, r3, #1
   320bc:	str	r2, [r6, #20]
   320c0:	mov	r2, #116	; 0x74
   320c4:	strb	r2, [r3]
   320c8:	b	31f64 <flatcc_json_parser_struct_as_root@@Base+0x1a8c>
   320cc:	ldr	r3, [r6, #20]
   320d0:	add	r2, r3, #1
   320d4:	str	r2, [r6, #20]
   320d8:	strb	r9, [r3]
   320dc:	b	31f64 <flatcc_json_parser_struct_as_root@@Base+0x1a8c>
   320e0:	ldr	r3, [r6, #20]
   320e4:	add	r2, r3, #1
   320e8:	str	r2, [r6, #20]
   320ec:	mov	r2, #110	; 0x6e
   320f0:	strb	r2, [r3]
   320f4:	b	31f64 <flatcc_json_parser_struct_as_root@@Base+0x1a8c>
   320f8:	ldr	r3, [r6, #20]
   320fc:	add	r2, r3, #1
   32100:	str	r2, [r6, #20]
   32104:	mov	r2, #98	; 0x62
   32108:	strb	r2, [r3]
   3210c:	b	31f64 <flatcc_json_parser_struct_as_root@@Base+0x1a8c>
   32110:	ldr	r3, [r6, #20]
   32114:	add	r2, r3, #1
   32118:	str	r2, [r6, #20]
   3211c:	mov	r2, #34	; 0x22
   32120:	strb	r2, [r3]
   32124:	add	sp, sp, #4
   32128:	ldrd	r4, [sp]
   3212c:	ldrd	r6, [sp, #8]
   32130:	ldrd	r8, [sp, #16]
   32134:	ldrd	sl, [sp, #24]
   32138:	add	sp, sp, #32
   3213c:	pop	{pc}		; (ldr pc, [sp], #4)
   32140:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32144:	strd	r6, [sp, #8]
   32148:	str	r8, [sp, #16]
   3214c:	str	lr, [sp, #20]
   32150:	mov	r4, r0
   32154:	mov	r6, r1
   32158:	mov	r5, r2
   3215c:	ldrb	r3, [r0, #25]
   32160:	cmp	r3, #0
   32164:	bne	32230 <flatcc_json_parser_struct_as_root@@Base+0x1d58>
   32168:	ldr	r2, [r0, #20]
   3216c:	ldr	r3, [r0, #16]
   32170:	cmp	r2, r3
   32174:	bcc	32184 <flatcc_json_parser_struct_as_root@@Base+0x1cac>
   32178:	ldr	r3, [r0, #44]	; 0x2c
   3217c:	mov	r1, #0
   32180:	blx	r3
   32184:	ldr	r3, [r4, #20]
   32188:	mov	r2, #34	; 0x22
   3218c:	strb	r2, [r3]
   32190:	ldrb	r3, [r4, #26]
   32194:	ldr	r0, [r4, #20]
   32198:	cmp	r3, #0
   3219c:	addeq	r0, r0, #1
   321a0:	str	r0, [r4, #20]
   321a4:	add	r3, r0, r5
   321a8:	ldr	r2, [r4, #16]
   321ac:	cmp	r2, r3
   321b0:	bls	32290 <flatcc_json_parser_struct_as_root@@Base+0x1db8>
   321b4:	mov	r2, r5
   321b8:	mov	r1, r6
   321bc:	bl	14524 <memcpy@plt>
   321c0:	ldr	r3, [r4, #20]
   321c4:	add	r5, r3, r5
   321c8:	str	r5, [r4, #20]
   321cc:	ldr	r3, [r4, #20]
   321d0:	mov	r2, #34	; 0x22
   321d4:	strb	r2, [r3]
   321d8:	ldrb	r3, [r4, #26]
   321dc:	clz	r3, r3
   321e0:	lsr	r3, r3, #5
   321e4:	ldr	r1, [r4, #20]
   321e8:	add	r2, r1, r3
   321ec:	add	r2, r2, #1
   321f0:	str	r2, [r4, #20]
   321f4:	mov	r2, #58	; 0x3a
   321f8:	strb	r2, [r1, r3]
   321fc:	ldr	r3, [r4, #20]
   32200:	mov	r2, #32
   32204:	strb	r2, [r3]
   32208:	ldrb	r2, [r4, #25]
   3220c:	ldr	r3, [r4, #20]
   32210:	cmp	r2, #0
   32214:	addne	r3, r3, #1
   32218:	str	r3, [r4, #20]
   3221c:	ldrd	r4, [sp]
   32220:	ldrd	r6, [sp, #8]
   32224:	ldr	r8, [sp, #16]
   32228:	add	sp, sp, #20
   3222c:	pop	{pc}		; (ldr pc, [sp], #4)
   32230:	ldr	r3, [r0, #20]
   32234:	add	r2, r3, #1
   32238:	str	r2, [r0, #20]
   3223c:	mov	r2, #10
   32240:	strb	r2, [r3]
   32244:	ldrb	r3, [r0, #25]
   32248:	ldr	r7, [r0, #32]
   3224c:	mul	r7, r7, r3
   32250:	ldr	r0, [r0, #20]
   32254:	add	r3, r0, r7
   32258:	ldr	r2, [r4, #16]
   3225c:	cmp	r2, r3
   32260:	bcs	32274 <flatcc_json_parser_struct_as_root@@Base+0x1d9c>
   32264:	mov	r1, r7
   32268:	mov	r0, r4
   3226c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   32270:	b	32184 <flatcc_json_parser_struct_as_root@@Base+0x1cac>
   32274:	mov	r2, r7
   32278:	mov	r1, #32
   3227c:	bl	1459c <memset@plt>
   32280:	ldr	r3, [r4, #20]
   32284:	add	r7, r3, r7
   32288:	str	r7, [r4, #20]
   3228c:	b	32184 <flatcc_json_parser_struct_as_root@@Base+0x1cac>
   32290:	mov	r2, r5
   32294:	mov	r1, r6
   32298:	mov	r0, r4
   3229c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   322a0:	b	321cc <flatcc_json_parser_struct_as_root@@Base+0x1cf4>
   322a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   322a8:	strd	r6, [sp, #8]
   322ac:	strd	r8, [sp, #16]
   322b0:	strd	sl, [sp, #24]
   322b4:	str	lr, [sp, #32]
   322b8:	sub	sp, sp, #220	; 0xdc
   322bc:	vstr	d0, [sp, #48]	; 0x30
   322c0:	subs	r1, r0, #0
   322c4:	str	r1, [sp, #44]	; 0x2c
   322c8:	beq	328a8 <flatcc_json_parser_struct_as_root@@Base+0x23d0>
   322cc:	vmov	r4, r5, d0
   322d0:	adds	r2, r4, r4
   322d4:	adc	r3, r5, r5
   322d8:	mov	r0, #0
   322dc:	mov	r1, #0
   322e0:	movt	r1, #65504	; 0xffe0
   322e4:	cmp	r3, r1
   322e8:	cmpeq	r2, r0
   322ec:	bhi	328c4 <flatcc_json_parser_struct_as_root@@Base+0x23ec>
   322f0:	cmp	r4, #0
   322f4:	sbcs	r3, r5, #0
   322f8:	blt	328e4 <flatcc_json_parser_struct_as_root@@Base+0x240c>
   322fc:	ldr	fp, [sp, #44]	; 0x2c
   32300:	orrs	r3, r4, r5
   32304:	beq	3290c <flatcc_json_parser_struct_as_root@@Base+0x2434>
   32308:	mov	r2, #0
   3230c:	mov	r3, #0
   32310:	movt	r3, #32752	; 0x7ff0
   32314:	cmp	r5, r3
   32318:	cmpeq	r4, r2
   3231c:	beq	3292c <flatcc_json_parser_struct_as_root@@Base+0x2454>
   32320:	ldrd	r2, [sp, #48]	; 0x30
   32324:	mov	r1, r2
   32328:	str	r2, [sp, #96]	; 0x60
   3232c:	mov	r8, r3
   32330:	mov	r4, #0
   32334:	bic	r5, r3, #-2147483648	; 0x80000000
   32338:	lsr	r5, r5, #20
   3233c:	lsl	r5, r5, #20
   32340:	orrs	r3, r4, r5
   32344:	bne	3295c <flatcc_json_parser_struct_as_root@@Base+0x2484>
   32348:	mov	r6, r1
   3234c:	ubfx	r9, r8, #0, #20
   32350:	movw	sl, #64462	; 0xfbce
   32354:	movt	sl, #65535	; 0xffff
   32358:	str	r6, [sp, #152]	; 0x98
   3235c:	str	r9, [sp, #156]	; 0x9c
   32360:	str	sl, [sp, #160]	; 0xa0
   32364:	ldrd	r2, [sp, #160]	; 0xa0
   32368:	strd	r2, [sp]
   3236c:	add	r3, sp, #152	; 0x98
   32370:	ldm	r3, {r2, r3}
   32374:	add	r0, sp, #168	; 0xa8
   32378:	bl	31938 <flatcc_json_parser_struct_as_root@@Base+0x1460>
   3237c:	ldr	r3, [sp, #168]	; 0xa8
   32380:	str	r3, [sp, #112]	; 0x70
   32384:	ldr	r3, [sp, #172]	; 0xac
   32388:	str	r3, [sp, #120]	; 0x78
   3238c:	ldr	r3, [sp, #176]	; 0xb0
   32390:	str	r3, [sp, #128]	; 0x80
   32394:	adds	r3, r6, r6
   32398:	str	r3, [sp, #136]	; 0x88
   3239c:	adc	r1, r9, r9
   323a0:	str	r1, [sp, #140]	; 0x8c
   323a4:	adds	r2, r3, #1
   323a8:	adc	r3, r1, #0
   323ac:	str	r2, [sp, #184]	; 0xb8
   323b0:	str	r3, [sp, #188]	; 0xbc
   323b4:	sub	r7, sl, #1
   323b8:	str	r7, [sp, #192]	; 0xc0
   323bc:	ldrd	r2, [sp, #192]	; 0xc0
   323c0:	strd	r2, [sp]
   323c4:	add	r3, sp, #184	; 0xb8
   323c8:	ldm	r3, {r2, r3}
   323cc:	add	r0, sp, #200	; 0xc8
   323d0:	bl	31938 <flatcc_json_parser_struct_as_root@@Base+0x1460>
   323d4:	ldr	r3, [sp, #208]	; 0xd0
   323d8:	str	r3, [sp, #132]	; 0x84
   323dc:	vldr	d7, [sp, #48]	; 0x30
   323e0:	vcmpe.f64	d7, #0.0
   323e4:	vmrs	APSR_nzcv, fpscr
   323e8:	ble	3297c <flatcc_json_parser_struct_as_root@@Base+0x24a4>
   323ec:	vldr	d7, [pc, #916]	; 32788 <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   323f0:	vldr	d6, [sp, #48]	; 0x30
   323f4:	vcmpe.f64	d6, d7
   323f8:	vmrs	APSR_nzcv, fpscr
   323fc:	bhi	3297c <flatcc_json_parser_struct_as_root@@Base+0x24a4>
   32400:	ubfx	r8, r8, #0, #20
   32404:	ldr	r3, [sp, #96]	; 0x60
   32408:	orrs	r3, r3, r8
   3240c:	moveq	r3, #1
   32410:	movne	r3, #0
   32414:	orrs	r2, r4, r5
   32418:	moveq	r3, #0
   3241c:	cmp	r3, #0
   32420:	bne	32998 <flatcc_json_parser_struct_as_root@@Base+0x24c0>
   32424:	ldr	r3, [sp, #136]	; 0x88
   32428:	subs	r0, r3, #1
   3242c:	ldr	r3, [sp, #140]	; 0x8c
   32430:	sbc	r4, r3, #0
   32434:	ldr	r3, [sp, #132]	; 0x84
   32438:	sub	r7, r7, r3
   3243c:	sub	r2, r7, #32
   32440:	rsb	r3, r7, #32
   32444:	lsl	r4, r4, r7
   32448:	orr	r4, r4, r0, lsl r2
   3244c:	orr	r4, r4, r0, lsr r3
   32450:	lsl	r0, r0, r7
   32454:	ldr	r3, [sp, #128]	; 0x80
   32458:	rsb	r3, r3, #-16777216	; 0xff000000
   3245c:	add	r3, r3, #16711680	; 0xff0000
   32460:	add	r3, r3, #65280	; 0xff00
   32464:	add	r3, r3, #195	; 0xc3
   32468:	vmov	s12, r3
   3246c:	vcvt.f64.s32	d6, s12
   32470:	vldr	d7, [pc, #792]	; 32790 <flatcc_json_parser_struct_as_root@@Base+0x22b8>
   32474:	vmul.f64	d6, d6, d7
   32478:	vcvt.s32.f64	s15, d6
   3247c:	vcmpe.f64	d6, #0.0
   32480:	vmrs	APSR_nzcv, fpscr
   32484:	bmi	324a8 <flatcc_json_parser_struct_as_root@@Base+0x1fd0>
   32488:	vcvt.f64.s32	d5, s15
   3248c:	vsub.f64	d6, d6, d5
   32490:	vcmp.f64	d6, #0.0
   32494:	vmrs	APSR_nzcv, fpscr
   32498:	beq	324a8 <flatcc_json_parser_struct_as_root@@Base+0x1fd0>
   3249c:	vmov	r3, s15
   324a0:	add	r3, r3, #1
   324a4:	vmov	s15, r3
   324a8:	vmov	r3, s15
   324ac:	add	r3, r3, #344	; 0x158
   324b0:	add	r2, r3, #10
   324b4:	add	r3, r3, #3
   324b8:	cmp	r3, #0
   324bc:	movlt	r3, r2
   324c0:	asr	r3, r3, #3
   324c4:	add	r3, r3, #1
   324c8:	ldr	r1, [pc, #712]	; 32798 <flatcc_json_parser_struct_as_root@@Base+0x22c0>
   324cc:	add	r2, r1, r3, lsl #4
   324d0:	ldr	lr, [r1, r3, lsl #4]
   324d4:	ldr	ip, [r2, #4]
   324d8:	ldrsh	r3, [r2, #10]
   324dc:	str	r3, [sp, #136]	; 0x88
   324e0:	mov	r3, #0
   324e4:	ldr	r1, [sp, #112]	; 0x70
   324e8:	umull	r8, r9, r1, ip
   324ec:	ldr	sl, [sp, #120]	; 0x78
   324f0:	umull	r6, r7, sl, lr
   324f4:	strd	r6, [sp, #96]	; 0x60
   324f8:	umull	r6, r7, r1, lr
   324fc:	mov	r1, r7
   32500:	ldr	r6, [sp, #96]	; 0x60
   32504:	adds	r1, r1, r6
   32508:	adc	r5, r3, r3
   3250c:	adds	r1, r1, #-2147483648	; 0x80000000
   32510:	adc	r5, r5, r3
   32514:	strd	r8, [sp, #112]	; 0x70
   32518:	adds	r1, r1, r8
   3251c:	adc	r5, r5, r3
   32520:	mov	r1, r5
   32524:	ldr	r5, [sp, #100]	; 0x64
   32528:	ldr	r6, [sp, #116]	; 0x74
   3252c:	adds	r5, r5, r6
   32530:	str	r5, [sp, #104]	; 0x68
   32534:	adc	r5, r3, r3
   32538:	str	r5, [sp, #108]	; 0x6c
   3253c:	ldrd	r6, [sp, #104]	; 0x68
   32540:	umlal	r6, r7, ip, sl
   32544:	adds	r1, r1, r6
   32548:	str	r1, [sp, #80]	; 0x50
   3254c:	adc	r1, r3, r7
   32550:	str	r1, [sp, #84]	; 0x54
   32554:	ldrsh	r2, [r2, #8]
   32558:	ldr	r1, [sp, #128]	; 0x80
   3255c:	add	r2, r2, r1
   32560:	umull	r6, r7, r0, ip
   32564:	strd	r6, [sp, #104]	; 0x68
   32568:	umull	r8, r9, r4, lr
   3256c:	strd	r8, [sp, #112]	; 0x70
   32570:	ldr	r7, [sp, #200]	; 0xc8
   32574:	ldr	r6, [sp, #204]	; 0xcc
   32578:	umull	r8, r9, r7, ip
   3257c:	strd	r8, [sp, #120]	; 0x78
   32580:	umull	r8, r9, r6, lr
   32584:	strd	r8, [sp, #96]	; 0x60
   32588:	umull	r0, r1, r0, lr
   3258c:	mov	r9, r1
   32590:	ldr	r1, [sp, #112]	; 0x70
   32594:	adds	r0, r9, r1
   32598:	adc	r5, r3, r3
   3259c:	adds	r0, r0, #-2147483648	; 0x80000000
   325a0:	adc	r5, r5, r3
   325a4:	ldr	r1, [sp, #104]	; 0x68
   325a8:	adds	r0, r0, r1
   325ac:	adc	r5, r5, r3
   325b0:	mov	r0, r5
   325b4:	umull	r4, r5, r4, ip
   325b8:	subs	r9, r4, #1
   325bc:	sbc	r5, r5, #0
   325c0:	ldr	r1, [sp, #116]	; 0x74
   325c4:	adds	r1, r9, r1
   325c8:	adc	r4, r5, r3
   325cc:	ldr	sl, [sp, #108]	; 0x6c
   325d0:	adds	r1, r1, sl
   325d4:	adc	r4, r4, r3
   325d8:	adds	r1, r0, r1
   325dc:	str	r1, [sp, #64]	; 0x40
   325e0:	adc	r1, r3, r4
   325e4:	str	r1, [sp, #68]	; 0x44
   325e8:	umull	r0, r1, r7, lr
   325ec:	mov	lr, r1
   325f0:	ldr	r1, [sp, #96]	; 0x60
   325f4:	adds	r1, lr, r1
   325f8:	adc	r0, r3, r3
   325fc:	adds	r1, r1, #-2147483648	; 0x80000000
   32600:	adc	r0, r0, r3
   32604:	ldrd	r8, [sp, #120]	; 0x78
   32608:	adds	r1, r1, r8
   3260c:	adc	r4, r0, r3
   32610:	mov	r1, r4
   32614:	mov	r0, r3
   32618:	umull	r6, r7, r6, ip
   3261c:	adds	ip, r6, #1
   32620:	adc	lr, r7, r3
   32624:	ldr	r5, [sp, #100]	; 0x64
   32628:	adds	ip, ip, r5
   3262c:	adc	lr, lr, r3
   32630:	adds	ip, ip, r9
   32634:	adc	lr, lr, r3
   32638:	adds	r3, r1, ip
   3263c:	str	r3, [sp, #72]	; 0x48
   32640:	adc	r3, r0, lr
   32644:	str	r3, [sp, #76]	; 0x4c
   32648:	ldrd	r4, [sp, #72]	; 0x48
   3264c:	ldrd	r0, [sp, #64]	; 0x40
   32650:	subs	r3, r4, r0
   32654:	str	r3, [sp, #56]	; 0x38
   32658:	sbc	r3, r5, r1
   3265c:	str	r3, [sp, #60]	; 0x3c
   32660:	cmp	r1, r5
   32664:	cmpeq	r0, r4
   32668:	bhi	329b4 <flatcc_json_parser_struct_as_root@@Base+0x24dc>
   3266c:	movw	r6, #65472	; 0xffc0
   32670:	movt	r6, #65535	; 0xffff
   32674:	sub	r6, r6, r2
   32678:	mov	r3, #1
   3267c:	sub	r1, r6, #32
   32680:	rsb	r0, r6, #32
   32684:	lsl	ip, r3, r1
   32688:	orr	ip, ip, r3, lsr r0
   3268c:	str	ip, [sp, #148]	; 0x94
   32690:	lsl	lr, r3, r6
   32694:	str	lr, [sp, #144]	; 0x90
   32698:	ldrd	r4, [sp, #72]	; 0x48
   3269c:	lsr	r3, r4, r6
   326a0:	orr	r3, r3, r5, lsl r0
   326a4:	orr	r3, r3, r5, lsr r1
   326a8:	subs	r1, lr, #1
   326ac:	str	r1, [sp, #104]	; 0x68
   326b0:	sbc	r0, ip, #0
   326b4:	str	r0, [sp, #112]	; 0x70
   326b8:	and	r8, r4, r1
   326bc:	and	r9, r5, r0
   326c0:	add	r2, r2, #129	; 0x81
   326c4:	movw	r1, #1233	; 0x4d1
   326c8:	mul	r2, r1, r2
   326cc:	asr	r2, r2, #12
   326d0:	add	r4, r2, #1
   326d4:	movw	r1, #17288	; 0x4388
   326d8:	movt	r1, #4
   326dc:	add	r1, r1, r4, lsl #2
   326e0:	ldr	r1, [r1, #1700]	; 0x6a4
   326e4:	cmp	r3, r1
   326e8:	movcc	r4, r2
   326ec:	movw	r2, #17288	; 0x4388
   326f0:	movt	r2, #4
   326f4:	add	r2, r2, r4, lsl #2
   326f8:	ldr	r1, [r2, #1700]	; 0x6a4
   326fc:	str	r1, [sp, #64]	; 0x40
   32700:	cmp	r4, #0
   32704:	ble	32bfc <flatcc_json_parser_struct_as_root@@Base+0x2724>
   32708:	udiv	r2, r3, r1
   3270c:	add	r0, r2, #48	; 0x30
   32710:	strb	r0, [fp]
   32714:	mls	r3, r1, r2, r3
   32718:	str	r3, [sp, #96]	; 0x60
   3271c:	sub	r4, r4, #1
   32720:	sub	lr, r6, #32
   32724:	rsb	ip, r6, #32
   32728:	lsl	r2, r3, lr
   3272c:	orr	r2, r2, r3, lsr ip
   32730:	lsl	r0, r3, r6
   32734:	adds	r3, r0, r8
   32738:	str	r3, [sp, #88]	; 0x58
   3273c:	adc	r3, r2, r9
   32740:	str	r3, [sp, #92]	; 0x5c
   32744:	ldrd	r2, [sp, #88]	; 0x58
   32748:	ldrd	r0, [sp, #56]	; 0x38
   3274c:	cmp	r3, r1
   32750:	cmpeq	r2, r0
   32754:	bcc	329d0 <flatcc_json_parser_struct_as_root@@Base+0x24f8>
   32758:	mov	r5, #1
   3275c:	movw	lr, #52429	; 0xcccd
   32760:	movt	lr, #52428	; 0xcccc
   32764:	sub	sl, r6, #32
   32768:	rsb	r7, r6, #32
   3276c:	str	fp, [sp, #140]	; 0x8c
   32770:	ldr	r1, [sp, #64]	; 0x40
   32774:	ldr	r3, [sp, #96]	; 0x60
   32778:	strd	r8, [sp, #96]	; 0x60
   3277c:	str	fp, [sp, #64]	; 0x40
   32780:	str	sl, [sp, #120]	; 0x78
   32784:	b	327a8 <flatcc_json_parser_struct_as_root@@Base+0x22d0>
   32788:			; <UNDEFINED> instruction: 0xffffffff
   3278c:	svcvc	0x00efffff
   32790:			; <UNDEFINED> instruction: 0x509f79fe
   32794:	svccc	0x00d34413
   32798:	andeq	r4, r4, r8, lsr #9
   3279c:	andeq	r4, r4, ip, lsl #9
   327a0:	andeq	r4, r4, r0, lsr #9
   327a4:	andeq	r4, r4, r8, lsl sl
   327a8:	umull	r2, r1, lr, r1
   327ac:	lsr	r1, r1, #3
   327b0:	cmp	r4, #0
   327b4:	beq	329f4 <flatcc_json_parser_struct_as_root@@Base+0x251c>
   327b8:	udiv	r2, r3, r1
   327bc:	add	r0, r2, #48	; 0x30
   327c0:	ldr	ip, [sp, #64]	; 0x40
   327c4:	strb	r0, [ip, #1]!
   327c8:	str	ip, [sp, #64]	; 0x40
   327cc:	add	r5, r5, #1
   327d0:	mls	r3, r1, r2, r3
   327d4:	sub	r4, r4, #1
   327d8:	ldr	r2, [sp, #120]	; 0x78
   327dc:	lsl	r2, r3, r2
   327e0:	orr	r2, r2, r3, lsr r7
   327e4:	lsl	r0, r3, r6
   327e8:	ldrd	r8, [sp, #96]	; 0x60
   327ec:	adds	sl, r0, r8
   327f0:	mov	r0, r9
   327f4:	adc	fp, r2, r9
   327f8:	ldrd	r8, [sp, #56]	; 0x38
   327fc:	cmp	fp, r9
   32800:	cmpeq	sl, r8
   32804:	bcs	327a8 <flatcc_json_parser_struct_as_root@@Base+0x22d0>
   32808:	str	r1, [sp, #64]	; 0x40
   3280c:	strd	sl, [sp, #88]	; 0x58
   32810:	ldr	fp, [sp, #140]	; 0x8c
   32814:	ldrd	r8, [sp, #72]	; 0x48
   32818:	ldr	r1, [sp, #80]	; 0x50
   3281c:	subs	lr, r8, r1
   32820:	ldr	r1, [sp, #84]	; 0x54
   32824:	sbc	r1, r9, r1
   32828:	ldrd	r2, [sp, #80]	; 0x50
   3282c:	cmp	r9, r3
   32830:	cmpeq	r8, r2
   32834:	movcc	r0, #1
   32838:	movcs	r0, #0
   3283c:	ldr	r3, [sp, #132]	; 0x84
   32840:	ldr	r2, [sp, #128]	; 0x80
   32844:	cmp	r3, r2
   32848:	orrne	r0, r0, #1
   3284c:	cmp	r0, #0
   32850:	bne	329d8 <flatcc_json_parser_struct_as_root@@Base+0x2500>
   32854:	mov	r8, #1
   32858:	mov	r9, #0
   3285c:	strd	r8, [sp, #24]
   32860:	sub	r0, r6, #32
   32864:	rsb	ip, r6, #32
   32868:	ldr	r3, [sp, #64]	; 0x40
   3286c:	lsl	r0, r3, r0
   32870:	orr	r0, r0, r3, lsr ip
   32874:	lsl	r6, r3, r6
   32878:	str	r6, [sp, #16]
   3287c:	str	r0, [sp, #20]
   32880:	ldrd	r2, [sp, #88]	; 0x58
   32884:	strd	r2, [sp, #8]
   32888:	ldrd	r2, [sp, #56]	; 0x38
   3288c:	strd	r2, [sp]
   32890:	mov	r2, lr
   32894:	mov	r3, r1
   32898:	mov	r1, r5
   3289c:	mov	r0, fp
   328a0:	bl	31354 <flatcc_json_parser_struct_as_root@@Base+0xe7c>
   328a4:	b	32b60 <flatcc_json_parser_struct_as_root@@Base+0x2688>
   328a8:	ldr	r3, [pc, #-276]	; 3279c <flatcc_json_parser_struct_as_root@@Base+0x22c4>
   328ac:	mov	r2, #189	; 0xbd
   328b0:	movw	r1, #19412	; 0x4bd4
   328b4:	movt	r1, #4
   328b8:	movw	r0, #19500	; 0x4c2c
   328bc:	movt	r0, #4
   328c0:	bl	145f0 <__assert_fail@plt>
   328c4:	vmov	r3, s0
   328c8:	mov	r2, r5
   328cc:	movw	r1, #19504	; 0x4c30
   328d0:	movt	r1, #4
   328d4:	ldr	r0, [sp, #44]	; 0x2c
   328d8:	bl	145d8 <sprintf@plt>
   328dc:	mov	r0, #21
   328e0:	b	32be0 <flatcc_json_parser_struct_as_root@@Base+0x2708>
   328e4:	ldr	fp, [sp, #44]	; 0x2c
   328e8:	mov	r3, #45	; 0x2d
   328ec:	strb	r3, [fp], #1
   328f0:	vldr	d7, [sp, #48]	; 0x30
   328f4:	vneg.f64	d7, d7
   328f8:	vstr	d7, [sp, #48]	; 0x30
   328fc:	add	r3, r5, #-2147483648	; 0x80000000
   32900:	vmov	r4, s0
   32904:	mov	r5, r3
   32908:	b	32300 <flatcc_json_parser_struct_as_root@@Base+0x1e28>
   3290c:	mov	r3, #48	; 0x30
   32910:	strb	r3, [fp]
   32914:	mov	r0, fp
   32918:	mov	r3, #0
   3291c:	strb	r3, [r0, #1]!
   32920:	ldr	r3, [sp, #44]	; 0x2c
   32924:	sub	r0, r0, r3
   32928:	b	32be0 <flatcc_json_parser_struct_as_root@@Base+0x2708>
   3292c:	mov	r3, #105	; 0x69
   32930:	strb	r3, [fp]
   32934:	mov	r3, #110	; 0x6e
   32938:	strb	r3, [fp, #1]
   3293c:	mov	r3, #102	; 0x66
   32940:	strb	r3, [fp, #2]
   32944:	mov	r0, fp
   32948:	mov	r3, #0
   3294c:	strb	r3, [r0, #3]!
   32950:	ldr	r3, [sp, #44]	; 0x2c
   32954:	sub	r0, r0, r3
   32958:	b	32be0 <flatcc_json_parser_struct_as_root@@Base+0x2708>
   3295c:	ldr	r6, [sp, #96]	; 0x60
   32960:	ubfx	r9, r8, #0, #20
   32964:	adds	r6, r6, #0
   32968:	adc	r9, r9, #1048576	; 0x100000
   3296c:	ubfx	sl, r8, #20, #11
   32970:	sub	sl, sl, #1072	; 0x430
   32974:	sub	sl, sl, #3
   32978:	b	32358 <flatcc_json_parser_struct_as_root@@Base+0x1e80>
   3297c:	ldr	r3, [pc, #-484]	; 327a0 <flatcc_json_parser_struct_as_root@@Base+0x22c8>
   32980:	mov	r2, #138	; 0x8a
   32984:	movw	r1, #19412	; 0x4bd4
   32988:	movt	r1, #4
   3298c:	movw	r0, #19520	; 0x4c40
   32990:	movt	r0, #4
   32994:	bl	145f0 <__assert_fail@plt>
   32998:	lsl	r4, r9, #2
   3299c:	orr	r4, r4, r6, lsr #30
   329a0:	lsl	r0, r6, #2
   329a4:	subs	r0, r0, #1
   329a8:	sbc	r4, r4, #0
   329ac:	sub	r7, sl, #2
   329b0:	b	32434 <flatcc_json_parser_struct_as_root@@Base+0x1f5c>
   329b4:	ldr	r3, [pc, #-536]	; 327a4 <flatcc_json_parser_struct_as_root@@Base+0x22cc>
   329b8:	mov	r2, #239	; 0xef
   329bc:	movw	r1, #16216	; 0x3f58
   329c0:	movt	r1, #4
   329c4:	movw	r0, #19560	; 0x4c68
   329c8:	movt	r0, #4
   329cc:	bl	145f0 <__assert_fail@plt>
   329d0:	mov	r5, #1
   329d4:	b	32814 <flatcc_json_parser_struct_as_root@@Base+0x233c>
   329d8:	ldr	r3, [pc, #-572]	; 327a4 <flatcc_json_parser_struct_as_root@@Base+0x22cc>
   329dc:	mov	r2, #239	; 0xef
   329e0:	movw	r1, #16216	; 0x3f58
   329e4:	movt	r1, #4
   329e8:	movw	r0, #19560	; 0x4c68
   329ec:	movt	r0, #4
   329f0:	bl	145f0 <__assert_fail@plt>
   329f4:	ldr	fp, [sp, #140]	; 0x8c
   329f8:	ldrd	r8, [sp, #96]	; 0x60
   329fc:	sub	r7, r5, #1
   32a00:	add	r7, fp, r7
   32a04:	mov	r3, #1
   32a08:	mov	ip, #0
   32a0c:	rsb	r2, r6, #32
   32a10:	str	r2, [sp, #64]	; 0x40
   32a14:	sub	r2, r6, #32
   32a18:	str	r2, [sp, #88]	; 0x58
   32a1c:	add	lr, r4, r5
   32a20:	str	fp, [sp, #96]	; 0x60
   32a24:	ldrd	sl, [sp, #56]	; 0x38
   32a28:	str	lr, [sp, #56]	; 0x38
   32a2c:	lsl	r1, r9, #2
   32a30:	lsl	r2, r8, #2
   32a34:	orr	r0, r1, r8, lsr #30
   32a38:	adds	r2, r2, r8
   32a3c:	adc	r0, r0, r9
   32a40:	adds	r2, r2, r2
   32a44:	adc	r0, r0, r0
   32a48:	lsl	lr, ip, #2
   32a4c:	lsl	r1, r3, #2
   32a50:	orr	r4, lr, r3, lsr #30
   32a54:	adds	r3, r1, r3
   32a58:	adc	ip, r4, ip
   32a5c:	adds	r3, r3, r3
   32a60:	adc	ip, ip, ip
   32a64:	lsl	lr, fp, #2
   32a68:	lsl	r1, sl, #2
   32a6c:	orr	r4, lr, sl, lsr #30
   32a70:	adds	r1, r1, sl
   32a74:	adc	r4, r4, fp
   32a78:	adds	r1, r1, r1
   32a7c:	str	r1, [sp, #32]
   32a80:	adc	r1, r4, r4
   32a84:	str	r1, [sp, #36]	; 0x24
   32a88:	ldrd	sl, [sp, #32]
   32a8c:	lsr	r1, r2, r6
   32a90:	ldr	lr, [sp, #64]	; 0x40
   32a94:	orr	r1, r1, r0, lsl lr
   32a98:	ldr	lr, [sp, #88]	; 0x58
   32a9c:	orr	r1, r1, r0, lsr lr
   32aa0:	add	r1, r1, #48	; 0x30
   32aa4:	strb	r1, [r7, #1]!
   32aa8:	add	r5, r5, #1
   32aac:	ldr	r1, [sp, #104]	; 0x68
   32ab0:	and	r8, r1, r2
   32ab4:	ldr	r2, [sp, #112]	; 0x70
   32ab8:	and	r9, r2, r0
   32abc:	ldr	r2, [sp, #56]	; 0x38
   32ac0:	sub	r4, r2, r5
   32ac4:	cmp	fp, r9
   32ac8:	cmpeq	sl, r8
   32acc:	bls	32a2c <flatcc_json_parser_struct_as_root@@Base+0x2554>
   32ad0:	strd	sl, [sp, #56]	; 0x38
   32ad4:	ldr	fp, [sp, #96]	; 0x60
   32ad8:	ldrd	r6, [sp, #72]	; 0x48
   32adc:	ldr	r1, [sp, #80]	; 0x50
   32ae0:	subs	sl, r6, r1
   32ae4:	ldr	r1, [sp, #84]	; 0x54
   32ae8:	sbc	lr, r7, r1
   32aec:	ldrd	r0, [sp, #80]	; 0x50
   32af0:	cmp	r7, r1
   32af4:	cmpeq	r6, r0
   32af8:	movcc	r1, #1
   32afc:	movcs	r1, #0
   32b00:	ldr	r2, [sp, #132]	; 0x84
   32b04:	ldr	r0, [sp, #128]	; 0x80
   32b08:	cmp	r2, r0
   32b0c:	orrne	r1, r1, #1
   32b10:	cmp	r1, #0
   32b14:	bne	32c04 <flatcc_json_parser_struct_as_root@@Base+0x272c>
   32b18:	mul	lr, r3, lr
   32b1c:	mla	lr, sl, ip, lr
   32b20:	umull	r0, r1, r3, sl
   32b24:	add	r1, lr, r1
   32b28:	str	r3, [sp, #24]
   32b2c:	str	ip, [sp, #28]
   32b30:	ldr	r3, [sp, #144]	; 0x90
   32b34:	str	r3, [sp, #16]
   32b38:	ldr	r3, [sp, #148]	; 0x94
   32b3c:	str	r3, [sp, #20]
   32b40:	strd	r8, [sp, #8]
   32b44:	ldrd	r2, [sp, #56]	; 0x38
   32b48:	strd	r2, [sp]
   32b4c:	mov	r2, r0
   32b50:	mov	r3, r1
   32b54:	mov	r1, r5
   32b58:	mov	r0, fp
   32b5c:	bl	31354 <flatcc_json_parser_struct_as_root@@Base+0xe7c>
   32b60:	ldr	r3, [sp, #136]	; 0x88
   32b64:	sub	r6, r4, r3
   32b68:	cmp	r0, #0
   32b6c:	beq	32c20 <flatcc_json_parser_struct_as_root@@Base+0x2748>
   32b70:	cmp	r5, #2
   32b74:	movge	r0, r5
   32b78:	movlt	r0, #2
   32b7c:	ldr	r3, [sp, #136]	; 0x88
   32b80:	sub	r4, r3, r4
   32b84:	cmp	r0, r4
   32b88:	suble	r0, r0, #1
   32b8c:	movgt	r0, r4
   32b90:	cmp	r6, #0
   32b94:	blt	32c44 <flatcc_json_parser_struct_as_root@@Base+0x276c>
   32b98:	cmp	r6, #2
   32b9c:	bhi	32d18 <flatcc_json_parser_struct_as_root@@Base+0x2840>
   32ba0:	cmp	r6, #0
   32ba4:	ble	32bcc <flatcc_json_parser_struct_as_root@@Base+0x26f4>
   32ba8:	sub	r1, r6, #1
   32bac:	add	r3, fp, r5
   32bb0:	add	r6, r3, r6
   32bb4:	mov	r2, #48	; 0x30
   32bb8:	strb	r2, [r3], #1
   32bbc:	cmp	r3, r6
   32bc0:	bne	32bb8 <flatcc_json_parser_struct_as_root@@Base+0x26e0>
   32bc4:	add	r5, r5, #1
   32bc8:	add	r5, r5, r1
   32bcc:	add	r0, fp, r5
   32bd0:	mov	r3, #0
   32bd4:	strb	r3, [fp, r5]
   32bd8:	ldr	r3, [sp, #44]	; 0x2c
   32bdc:	sub	r0, r0, r3
   32be0:	add	sp, sp, #220	; 0xdc
   32be4:	ldrd	r4, [sp]
   32be8:	ldrd	r6, [sp, #8]
   32bec:	ldrd	r8, [sp, #16]
   32bf0:	ldrd	sl, [sp, #24]
   32bf4:	add	sp, sp, #32
   32bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   32bfc:	mov	r5, #0
   32c00:	b	329fc <flatcc_json_parser_struct_as_root@@Base+0x2524>
   32c04:	ldr	r3, [pc, #-1128]	; 327a4 <flatcc_json_parser_struct_as_root@@Base+0x22cc>
   32c08:	mov	r2, #239	; 0xef
   32c0c:	movw	r1, #16216	; 0x3f58
   32c10:	movt	r1, #4
   32c14:	movw	r0, #19560	; 0x4c68
   32c18:	movt	r0, #4
   32c1c:	bl	145f0 <__assert_fail@plt>
   32c20:	ldrd	r2, [sp, #48]	; 0x30
   32c24:	movw	r1, #19588	; 0x4c84
   32c28:	movt	r1, #4
   32c2c:	mov	r0, fp
   32c30:	bl	145d8 <sprintf@plt>
   32c34:	ldr	r3, [sp, #44]	; 0x2c
   32c38:	sub	r3, fp, r3
   32c3c:	add	r0, r3, r0
   32c40:	b	32be0 <flatcc_json_parser_struct_as_root@@Base+0x2708>
   32c44:	add	r3, r6, r5
   32c48:	cmp	r4, r5
   32c4c:	cmnge	r3, #2
   32c50:	bge	32cb4 <flatcc_json_parser_struct_as_root@@Base+0x27dc>
   32c54:	cmp	r5, #1
   32c58:	ble	32d18 <flatcc_json_parser_struct_as_root@@Base+0x2840>
   32c5c:	cmp	r0, #0
   32c60:	ble	32c7c <flatcc_json_parser_struct_as_root@@Base+0x27a4>
   32c64:	add	r3, fp, r5
   32c68:	sub	r1, r3, r0
   32c6c:	ldrb	r2, [r3, #-1]
   32c70:	strb	r2, [r3], #-1
   32c74:	cmp	r1, r3
   32c78:	bne	32c6c <flatcc_json_parser_struct_as_root@@Base+0x2794>
   32c7c:	add	r3, r5, #1
   32c80:	sub	r2, r5, r0
   32c84:	mov	r1, #46	; 0x2e
   32c88:	strb	r1, [fp, r2]
   32c8c:	adds	r0, r0, r6
   32c90:	moveq	r5, r3
   32c94:	beq	32bcc <flatcc_json_parser_struct_as_root@@Base+0x26f4>
   32c98:	add	r5, r5, #2
   32c9c:	mov	r2, #101	; 0x65
   32ca0:	strb	r2, [fp, r3]
   32ca4:	add	r1, fp, r5
   32ca8:	bl	315f8 <flatcc_json_parser_struct_as_root@@Base+0x1120>
   32cac:	add	r5, r5, r0
   32cb0:	b	32bcc <flatcc_json_parser_struct_as_root@@Base+0x26f4>
   32cb4:	rsb	r0, r5, #2
   32cb8:	sub	r0, r0, r6
   32cbc:	mov	r2, r5
   32cc0:	mov	r1, fp
   32cc4:	add	r0, fp, r0
   32cc8:	bl	1450c <memmove@plt>
   32ccc:	mov	r3, #48	; 0x30
   32cd0:	strb	r3, [fp]
   32cd4:	mov	r3, #46	; 0x2e
   32cd8:	strb	r3, [fp, #1]
   32cdc:	rsb	r6, r6, #2
   32ce0:	sub	r6, r6, r5
   32ce4:	cmp	r6, #2
   32ce8:	ble	32d10 <flatcc_json_parser_struct_as_root@@Base+0x2838>
   32cec:	add	r3, fp, #1
   32cf0:	sub	r2, fp, #1
   32cf4:	add	r2, r2, r6
   32cf8:	mov	r1, #48	; 0x30
   32cfc:	strb	r1, [r3, #1]!
   32d00:	cmp	r3, r2
   32d04:	bne	32cfc <flatcc_json_parser_struct_as_root@@Base+0x2824>
   32d08:	add	r5, r5, r6
   32d0c:	b	32bcc <flatcc_json_parser_struct_as_root@@Base+0x26f4>
   32d10:	mov	r6, #2
   32d14:	b	32d08 <flatcc_json_parser_struct_as_root@@Base+0x2830>
   32d18:	add	r4, r5, #1
   32d1c:	mov	r3, #101	; 0x65
   32d20:	strb	r3, [fp, r5]
   32d24:	add	r1, fp, r4
   32d28:	mov	r0, r6
   32d2c:	bl	315f8 <flatcc_json_parser_struct_as_root@@Base+0x1120>
   32d30:	add	r5, r4, r0
   32d34:	b	32bcc <flatcc_json_parser_struct_as_root@@Base+0x26f4>

00032d38 <flatcc_json_printer_error_string@@Base>:
   32d38:	cmp	r0, #3
   32d3c:	ldrls	pc, [pc, r0, lsl #2]
   32d40:	b	32d78 <flatcc_json_printer_error_string@@Base+0x40>
   32d44:	andeq	r2, r3, r4, lsl #27
   32d48:	andeq	r2, r3, r4, asr sp
   32d4c:	andeq	r2, r3, r0, ror #26
   32d50:	andeq	r2, r3, ip, ror #26
   32d54:	movw	r0, #19612	; 0x4c9c
   32d58:	movt	r0, #4
   32d5c:	bx	lr
   32d60:	movw	r0, #19596	; 0x4c8c
   32d64:	movt	r0, #4
   32d68:	bx	lr
   32d6c:	movw	r0, #13816	; 0x35f8
   32d70:	movt	r0, #4
   32d74:	bx	lr
   32d78:	movw	r0, #12872	; 0x3248
   32d7c:	movt	r0, #4
   32d80:	bx	lr
   32d84:	movw	r0, #12880	; 0x3250
   32d88:	movt	r0, #4
   32d8c:	bx	lr

00032d90 <flatcc_json_printer_fmt_float@@Base>:
   32d90:	str	r4, [sp, #-8]!
   32d94:	str	lr, [sp, #4]
   32d98:	vcvt.f64.f32	d0, s0
   32d9c:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   32da0:	ldr	r4, [sp]
   32da4:	add	sp, sp, #4
   32da8:	pop	{pc}		; (ldr pc, [sp], #4)

00032dac <flatcc_json_printer_fmt_double@@Base>:
   32dac:	str	r4, [sp, #-8]!
   32db0:	str	lr, [sp, #4]
   32db4:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   32db8:	ldr	r4, [sp]
   32dbc:	add	sp, sp, #4
   32dc0:	pop	{pc}		; (ldr pc, [sp], #4)

00032dc4 <flatcc_json_printer_fmt_bool@@Base>:
   32dc4:	cmp	r1, #0
   32dc8:	bne	32dec <flatcc_json_printer_fmt_bool@@Base+0x28>
   32dcc:	movw	r3, #60800	; 0xed80
   32dd0:	movt	r3, #3
   32dd4:	ldr	r2, [r3]
   32dd8:	str	r2, [r0]
   32ddc:	ldrb	r3, [r3, #4]
   32de0:	strb	r3, [r0, #4]
   32de4:	mov	r0, #5
   32de8:	bx	lr
   32dec:	movw	r3, #60792	; 0xed78
   32df0:	movt	r3, #3
   32df4:	ldr	r3, [r3]
   32df8:	str	r3, [r0]
   32dfc:	mov	r0, #4
   32e00:	bx	lr

00032e04 <flatcc_json_printer_string@@Base>:
   32e04:	str	r4, [sp, #-8]!
   32e08:	str	lr, [sp, #4]
   32e0c:	bl	31ebc <flatcc_json_parser_struct_as_root@@Base+0x19e4>
   32e10:	ldr	r4, [sp]
   32e14:	add	sp, sp, #4
   32e18:	pop	{pc}		; (ldr pc, [sp], #4)

00032e1c <flatcc_json_printer_write@@Base>:
   32e1c:	strd	r4, [sp, #-16]!
   32e20:	str	r6, [sp, #8]
   32e24:	str	lr, [sp, #12]
   32e28:	mov	r4, r0
   32e2c:	mov	r5, r2
   32e30:	ldr	r0, [r0, #20]
   32e34:	add	r3, r0, r2
   32e38:	ldr	r2, [r4, #16]
   32e3c:	cmp	r2, r3
   32e40:	bhi	32e60 <flatcc_json_printer_write@@Base+0x44>
   32e44:	mov	r2, r5
   32e48:	mov	r0, r4
   32e4c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   32e50:	ldrd	r4, [sp]
   32e54:	ldr	r6, [sp, #8]
   32e58:	add	sp, sp, #12
   32e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   32e60:	mov	r2, r5
   32e64:	bl	14524 <memcpy@plt>
   32e68:	ldr	r3, [r4, #20]
   32e6c:	add	r5, r3, r5
   32e70:	str	r5, [r4, #20]
   32e74:	b	32e50 <flatcc_json_printer_write@@Base+0x34>

00032e78 <flatcc_json_printer_nl@@Base>:
   32e78:	ldr	r3, [r0, #20]
   32e7c:	add	r2, r3, #1
   32e80:	str	r2, [r0, #20]
   32e84:	mov	r2, #10
   32e88:	strb	r2, [r3]
   32e8c:	ldr	r2, [r0, #20]
   32e90:	ldr	r3, [r0, #16]
   32e94:	cmp	r2, r3
   32e98:	bxcc	lr
   32e9c:	str	r4, [sp, #-8]!
   32ea0:	str	lr, [sp, #4]
   32ea4:	ldr	r3, [r0, #44]	; 0x2c
   32ea8:	mov	r1, #0
   32eac:	blx	r3
   32eb0:	ldr	r4, [sp]
   32eb4:	add	sp, sp, #4
   32eb8:	pop	{pc}		; (ldr pc, [sp], #4)

00032ebc <flatcc_json_printer_char@@Base>:
   32ebc:	ldr	r3, [r0, #20]
   32ec0:	add	r2, r3, #1
   32ec4:	str	r2, [r0, #20]
   32ec8:	strb	r1, [r3]
   32ecc:	bx	lr

00032ed0 <flatcc_json_printer_indent@@Base>:
   32ed0:	strd	r4, [sp, #-16]!
   32ed4:	str	r6, [sp, #8]
   32ed8:	str	lr, [sp, #12]
   32edc:	mov	r4, r0
   32ee0:	ldrb	r3, [r0, #25]
   32ee4:	ldr	r5, [r0, #32]
   32ee8:	mul	r5, r5, r3
   32eec:	ldr	r0, [r0, #20]
   32ef0:	add	r3, r0, r5
   32ef4:	ldr	r2, [r4, #16]
   32ef8:	cmp	r2, r3
   32efc:	bcs	32f1c <flatcc_json_printer_indent@@Base+0x4c>
   32f00:	mov	r1, r5
   32f04:	mov	r0, r4
   32f08:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   32f0c:	ldrd	r4, [sp]
   32f10:	ldr	r6, [sp, #8]
   32f14:	add	sp, sp, #12
   32f18:	pop	{pc}		; (ldr pc, [sp], #4)
   32f1c:	mov	r2, r5
   32f20:	mov	r1, #32
   32f24:	bl	1459c <memset@plt>
   32f28:	ldr	r3, [r4, #20]
   32f2c:	add	r5, r3, r5
   32f30:	str	r5, [r4, #20]
   32f34:	b	32f0c <flatcc_json_printer_indent@@Base+0x3c>

00032f38 <flatcc_json_printer_add_level@@Base>:
   32f38:	ldr	r3, [r0, #32]
   32f3c:	add	r1, r3, r1
   32f40:	str	r1, [r0, #32]
   32f44:	bx	lr

00032f48 <flatcc_json_printer_get_level@@Base>:
   32f48:	ldr	r0, [r0, #32]
   32f4c:	bx	lr

00032f50 <flatcc_json_printer_uint8@@Base>:
   32f50:	str	r4, [sp, #-8]!
   32f54:	str	lr, [sp, #4]
   32f58:	mov	r4, r0
   32f5c:	mov	r0, r1
   32f60:	ldr	r1, [r4, #20]
   32f64:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   32f68:	ldr	r3, [r4, #20]
   32f6c:	add	r0, r3, r0
   32f70:	str	r0, [r4, #20]
   32f74:	ldr	r4, [sp]
   32f78:	add	sp, sp, #4
   32f7c:	pop	{pc}		; (ldr pc, [sp], #4)

00032f80 <flatcc_json_printer_uint16@@Base>:
   32f80:	str	r4, [sp, #-8]!
   32f84:	str	lr, [sp, #4]
   32f88:	mov	r4, r0
   32f8c:	mov	r0, r1
   32f90:	ldr	r1, [r4, #20]
   32f94:	bl	30688 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   32f98:	ldr	r3, [r4, #20]
   32f9c:	add	r0, r3, r0
   32fa0:	str	r0, [r4, #20]
   32fa4:	ldr	r4, [sp]
   32fa8:	add	sp, sp, #4
   32fac:	pop	{pc}		; (ldr pc, [sp], #4)

00032fb0 <flatcc_json_printer_uint32@@Base>:
   32fb0:	str	r4, [sp, #-8]!
   32fb4:	str	lr, [sp, #4]
   32fb8:	mov	r4, r0
   32fbc:	mov	r0, r1
   32fc0:	ldr	r1, [r4, #20]
   32fc4:	bl	3081c <flatcc_json_parser_struct_as_root@@Base+0x344>
   32fc8:	ldr	r3, [r4, #20]
   32fcc:	add	r0, r3, r0
   32fd0:	str	r0, [r4, #20]
   32fd4:	ldr	r4, [sp]
   32fd8:	add	sp, sp, #4
   32fdc:	pop	{pc}		; (ldr pc, [sp], #4)

00032fe0 <flatcc_json_printer_uint64@@Base>:
   32fe0:	str	r4, [sp, #-8]!
   32fe4:	str	lr, [sp, #4]
   32fe8:	mov	r4, r0
   32fec:	mov	r0, r2
   32ff0:	mov	r1, r3
   32ff4:	ldr	r2, [r4, #20]
   32ff8:	bl	30b80 <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   32ffc:	ldr	r3, [r4, #20]
   33000:	add	r0, r3, r0
   33004:	str	r0, [r4, #20]
   33008:	ldr	r4, [sp]
   3300c:	add	sp, sp, #4
   33010:	pop	{pc}		; (ldr pc, [sp], #4)

00033014 <flatcc_json_printer_int8@@Base>:
   33014:	str	r4, [sp, #-8]!
   33018:	str	lr, [sp, #4]
   3301c:	mov	r4, r0
   33020:	mov	r0, r1
   33024:	ldr	r1, [r4, #20]
   33028:	bl	3125c <flatcc_json_parser_struct_as_root@@Base+0xd84>
   3302c:	ldr	r3, [r4, #20]
   33030:	add	r0, r3, r0
   33034:	str	r0, [r4, #20]
   33038:	ldr	r4, [sp]
   3303c:	add	sp, sp, #4
   33040:	pop	{pc}		; (ldr pc, [sp], #4)

00033044 <flatcc_json_printer_int16@@Base>:
   33044:	str	r4, [sp, #-8]!
   33048:	str	lr, [sp, #4]
   3304c:	mov	r4, r0
   33050:	mov	r0, r1
   33054:	ldr	r1, [r4, #20]
   33058:	bl	3129c <flatcc_json_parser_struct_as_root@@Base+0xdc4>
   3305c:	ldr	r3, [r4, #20]
   33060:	add	r0, r3, r0
   33064:	str	r0, [r4, #20]
   33068:	ldr	r4, [sp]
   3306c:	add	sp, sp, #4
   33070:	pop	{pc}		; (ldr pc, [sp], #4)

00033074 <flatcc_json_printer_int32@@Base>:
   33074:	str	r4, [sp, #-8]!
   33078:	str	lr, [sp, #4]
   3307c:	mov	r4, r0
   33080:	mov	r0, r1
   33084:	ldr	r1, [r4, #20]
   33088:	bl	312dc <flatcc_json_parser_struct_as_root@@Base+0xe04>
   3308c:	ldr	r3, [r4, #20]
   33090:	add	r0, r3, r0
   33094:	str	r0, [r4, #20]
   33098:	ldr	r4, [sp]
   3309c:	add	sp, sp, #4
   330a0:	pop	{pc}		; (ldr pc, [sp], #4)

000330a4 <flatcc_json_printer_int64@@Base>:
   330a4:	str	r4, [sp, #-8]!
   330a8:	str	lr, [sp, #4]
   330ac:	mov	r4, r0
   330b0:	mov	r0, r2
   330b4:	mov	r1, r3
   330b8:	ldr	r2, [r4, #20]
   330bc:	bl	31314 <flatcc_json_parser_struct_as_root@@Base+0xe3c>
   330c0:	ldr	r3, [r4, #20]
   330c4:	add	r0, r3, r0
   330c8:	str	r0, [r4, #20]
   330cc:	ldr	r4, [sp]
   330d0:	add	sp, sp, #4
   330d4:	pop	{pc}		; (ldr pc, [sp], #4)

000330d8 <flatcc_json_printer_float@@Base>:
   330d8:	str	r4, [sp, #-8]!
   330dc:	str	lr, [sp, #4]
   330e0:	mov	r4, r0
   330e4:	ldr	r0, [r0, #20]
   330e8:	vcvt.f64.f32	d0, s0
   330ec:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   330f0:	ldr	r3, [r4, #20]
   330f4:	add	r0, r3, r0
   330f8:	str	r0, [r4, #20]
   330fc:	ldr	r4, [sp]
   33100:	add	sp, sp, #4
   33104:	pop	{pc}		; (ldr pc, [sp], #4)

00033108 <flatcc_json_printer_double@@Base>:
   33108:	str	r4, [sp, #-8]!
   3310c:	str	lr, [sp, #4]
   33110:	mov	r4, r0
   33114:	ldr	r0, [r0, #20]
   33118:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   3311c:	ldr	r3, [r4, #20]
   33120:	add	r0, r3, r0
   33124:	str	r0, [r4, #20]
   33128:	ldr	r4, [sp]
   3312c:	add	sp, sp, #4
   33130:	pop	{pc}		; (ldr pc, [sp], #4)

00033134 <flatcc_json_printer_enum@@Base>:
   33134:	strd	r4, [sp, #-16]!
   33138:	str	r6, [sp, #8]
   3313c:	str	lr, [sp, #12]
   33140:	mov	r4, r0
   33144:	mov	r5, r2
   33148:	ldr	r3, [r0, #20]
   3314c:	mov	r2, #34	; 0x22
   33150:	strb	r2, [r3]
   33154:	ldrb	r3, [r0, #26]
   33158:	ldr	r0, [r0, #20]
   3315c:	cmp	r3, #0
   33160:	addeq	r0, r0, #1
   33164:	str	r0, [r4, #20]
   33168:	add	r3, r0, r5
   3316c:	ldr	r2, [r4, #16]
   33170:	cmp	r2, r3
   33174:	bls	331bc <flatcc_json_printer_enum@@Base+0x88>
   33178:	mov	r2, r5
   3317c:	bl	14524 <memcpy@plt>
   33180:	ldr	r3, [r4, #20]
   33184:	add	r5, r3, r5
   33188:	str	r5, [r4, #20]
   3318c:	ldr	r3, [r4, #20]
   33190:	mov	r2, #34	; 0x22
   33194:	strb	r2, [r3]
   33198:	ldrb	r2, [r4, #26]
   3319c:	ldr	r3, [r4, #20]
   331a0:	cmp	r2, #0
   331a4:	addeq	r3, r3, #1
   331a8:	str	r3, [r4, #20]
   331ac:	ldrd	r4, [sp]
   331b0:	ldr	r6, [sp, #8]
   331b4:	add	sp, sp, #12
   331b8:	pop	{pc}		; (ldr pc, [sp], #4)
   331bc:	mov	r2, r5
   331c0:	mov	r0, r4
   331c4:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   331c8:	b	3318c <flatcc_json_printer_enum@@Base+0x58>

000331cc <flatcc_json_printer_delimit_enum_flags@@Base>:
   331cc:	ldrb	r3, [r0, #26]
   331d0:	adds	r1, r1, #0
   331d4:	movne	r1, #1
   331d8:	cmp	r3, #0
   331dc:	movne	r3, r1
   331e0:	moveq	r3, #1
   331e4:	ldr	r2, [r0, #20]
   331e8:	mov	r1, #34	; 0x22
   331ec:	strb	r1, [r2]
   331f0:	ldr	r1, [r0, #20]
   331f4:	add	r1, r1, r3
   331f8:	str	r1, [r0, #20]
   331fc:	bx	lr

00033200 <flatcc_json_printer_enum_flag@@Base>:
   33200:	strd	r4, [sp, #-16]!
   33204:	str	r6, [sp, #8]
   33208:	str	lr, [sp, #12]
   3320c:	mov	r4, r0
   33210:	mov	ip, r2
   33214:	mov	r5, r3
   33218:	ldr	r3, [r0, #20]
   3321c:	mov	r2, #32
   33220:	strb	r2, [r3]
   33224:	ldr	r0, [r0, #20]
   33228:	cmp	r1, #0
   3322c:	addgt	r0, r0, #1
   33230:	str	r0, [r4, #20]
   33234:	add	r3, r0, r5
   33238:	ldr	r2, [r4, #16]
   3323c:	cmp	r2, r3
   33240:	bhi	33264 <flatcc_json_printer_enum_flag@@Base+0x64>
   33244:	mov	r2, r5
   33248:	mov	r1, ip
   3324c:	mov	r0, r4
   33250:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   33254:	ldrd	r4, [sp]
   33258:	ldr	r6, [sp, #8]
   3325c:	add	sp, sp, #12
   33260:	pop	{pc}		; (ldr pc, [sp], #4)
   33264:	mov	r2, r5
   33268:	mov	r1, ip
   3326c:	bl	14524 <memcpy@plt>
   33270:	ldr	r3, [r4, #20]
   33274:	add	r5, r3, r5
   33278:	str	r5, [r4, #20]
   3327c:	b	33254 <flatcc_json_printer_enum_flag@@Base+0x54>

00033280 <flatcc_json_printer_string_field@@Base>:
   33280:	add	r2, r2, #2
   33284:	lsl	r2, r2, #1
   33288:	ldr	ip, [r1, #8]
   3328c:	cmp	r2, ip
   33290:	bxge	lr
   33294:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33298:	strd	r6, [sp, #8]
   3329c:	strd	r8, [sp, #16]
   332a0:	str	sl, [sp, #24]
   332a4:	str	lr, [sp, #28]
   332a8:	ldr	ip, [r1, #4]
   332ac:	ldrh	r5, [ip, r2]
   332b0:	cmp	r5, #0
   332b4:	beq	333d4 <flatcc_json_printer_string_field@@Base+0x154>
   332b8:	ldr	r6, [r1]
   332bc:	adds	r7, r6, r5
   332c0:	beq	333d4 <flatcc_json_printer_string_field@@Base+0x154>
   332c4:	ldr	r2, [r1, #16]
   332c8:	add	ip, r2, #1
   332cc:	str	ip, [r1, #16]
   332d0:	cmp	r2, #0
   332d4:	beq	332ec <flatcc_json_printer_string_field@@Base+0x6c>
   332d8:	ldr	r2, [r0, #20]
   332dc:	add	r1, r2, #1
   332e0:	str	r1, [r0, #20]
   332e4:	mov	r1, #44	; 0x2c
   332e8:	strb	r1, [r2]
   332ec:	mov	r8, r3
   332f0:	mov	r4, r0
   332f4:	ldrb	r3, [r0, #25]
   332f8:	cmp	r3, #0
   332fc:	bne	333ec <flatcc_json_printer_string_field@@Base+0x16c>
   33300:	ldr	r2, [r0, #20]
   33304:	ldr	r3, [r0, #16]
   33308:	cmp	r2, r3
   3330c:	bcc	3331c <flatcc_json_printer_string_field@@Base+0x9c>
   33310:	ldr	r3, [r0, #44]	; 0x2c
   33314:	mov	r1, #0
   33318:	blx	r3
   3331c:	ldr	r3, [r4, #20]
   33320:	mov	r2, #34	; 0x22
   33324:	strb	r2, [r3]
   33328:	ldrb	r3, [r4, #26]
   3332c:	ldr	r0, [r4, #20]
   33330:	cmp	r3, #0
   33334:	addeq	r0, r0, #1
   33338:	str	r0, [r4, #20]
   3333c:	ldr	r3, [sp, #32]
   33340:	add	r3, r0, r3
   33344:	ldr	r2, [r4, #16]
   33348:	cmp	r2, r3
   3334c:	bls	3344c <flatcc_json_printer_string_field@@Base+0x1cc>
   33350:	ldr	r2, [sp, #32]
   33354:	mov	r1, r8
   33358:	bl	14524 <memcpy@plt>
   3335c:	ldr	r3, [r4, #20]
   33360:	ldr	r2, [sp, #32]
   33364:	add	r3, r3, r2
   33368:	str	r3, [r4, #20]
   3336c:	ldr	r3, [r4, #20]
   33370:	mov	r2, #34	; 0x22
   33374:	strb	r2, [r3]
   33378:	ldrb	r3, [r4, #26]
   3337c:	clz	r3, r3
   33380:	lsr	r3, r3, #5
   33384:	ldr	r1, [r4, #20]
   33388:	add	r2, r1, r3
   3338c:	add	r2, r2, #1
   33390:	str	r2, [r4, #20]
   33394:	mov	r2, #58	; 0x3a
   33398:	strb	r2, [r1, r3]
   3339c:	ldr	r3, [r4, #20]
   333a0:	mov	r2, #32
   333a4:	strb	r2, [r3]
   333a8:	ldrb	r2, [r4, #25]
   333ac:	ldr	r3, [r4, #20]
   333b0:	cmp	r2, #0
   333b4:	addne	r3, r3, #1
   333b8:	str	r3, [r4, #20]
   333bc:	ldr	r3, [r6, r5]
   333c0:	add	r1, r7, r3
   333c4:	ldr	r2, [r7, r3]
   333c8:	add	r1, r1, #4
   333cc:	mov	r0, r4
   333d0:	bl	31ebc <flatcc_json_parser_struct_as_root@@Base+0x19e4>
   333d4:	ldrd	r4, [sp]
   333d8:	ldrd	r6, [sp, #8]
   333dc:	ldrd	r8, [sp, #16]
   333e0:	ldr	sl, [sp, #24]
   333e4:	add	sp, sp, #28
   333e8:	pop	{pc}		; (ldr pc, [sp], #4)
   333ec:	ldr	r3, [r0, #20]
   333f0:	add	r2, r3, #1
   333f4:	str	r2, [r0, #20]
   333f8:	mov	r2, #10
   333fc:	strb	r2, [r3]
   33400:	ldrb	r3, [r0, #25]
   33404:	ldr	r9, [r0, #32]
   33408:	mul	r9, r9, r3
   3340c:	ldr	r0, [r0, #20]
   33410:	add	r3, r0, r9
   33414:	ldr	r2, [r4, #16]
   33418:	cmp	r2, r3
   3341c:	bcs	33430 <flatcc_json_printer_string_field@@Base+0x1b0>
   33420:	mov	r1, r9
   33424:	mov	r0, r4
   33428:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3342c:	b	3331c <flatcc_json_printer_string_field@@Base+0x9c>
   33430:	mov	r2, r9
   33434:	mov	r1, #32
   33438:	bl	1459c <memset@plt>
   3343c:	ldr	r3, [r4, #20]
   33440:	add	r9, r3, r9
   33444:	str	r9, [r4, #20]
   33448:	b	3331c <flatcc_json_printer_string_field@@Base+0x9c>
   3344c:	ldr	r2, [sp, #32]
   33450:	mov	r1, r8
   33454:	mov	r0, r4
   33458:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3345c:	b	3336c <flatcc_json_printer_string_field@@Base+0xec>

00033460 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   33460:	add	r2, r2, #2
   33464:	lsl	r2, r2, #1
   33468:	ldr	ip, [r1, #8]
   3346c:	cmp	r2, ip
   33470:	bxge	lr
   33474:	strd	r4, [sp, #-36]!	; 0xffffffdc
   33478:	strd	r6, [sp, #8]
   3347c:	strd	r8, [sp, #16]
   33480:	strd	sl, [sp, #24]
   33484:	str	lr, [sp, #32]
   33488:	sub	sp, sp, #20
   3348c:	ldr	ip, [r1, #4]
   33490:	ldrh	r6, [ip, r2]
   33494:	cmp	r6, #0
   33498:	beq	33774 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x314>
   3349c:	ldr	r9, [r1]
   334a0:	ldr	r5, [sp, #60]	; 0x3c
   334a4:	adds	r5, r5, #0
   334a8:	movne	r5, #1
   334ac:	orr	r8, r5, #128	; 0x80
   334b0:	adds	sl, r9, r6
   334b4:	beq	33774 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x314>
   334b8:	ldr	r2, [r1, #16]
   334bc:	add	ip, r2, #1
   334c0:	str	ip, [r1, #16]
   334c4:	cmp	r2, #0
   334c8:	beq	334e0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x80>
   334cc:	ldr	r2, [r0, #20]
   334d0:	add	r1, r2, #1
   334d4:	str	r1, [r0, #20]
   334d8:	mov	r1, #44	; 0x2c
   334dc:	strb	r1, [r2]
   334e0:	mov	r7, r3
   334e4:	mov	r4, r0
   334e8:	ldrb	r3, [r0, #25]
   334ec:	cmp	r3, #0
   334f0:	bne	336d4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x274>
   334f4:	ldr	r2, [r0, #20]
   334f8:	ldr	r3, [r0, #16]
   334fc:	cmp	r2, r3
   33500:	bcc	33510 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb0>
   33504:	ldr	r3, [r0, #44]	; 0x2c
   33508:	mov	r1, #0
   3350c:	blx	r3
   33510:	ldr	r3, [r4, #20]
   33514:	mov	r2, #34	; 0x22
   33518:	strb	r2, [r3]
   3351c:	ldrb	r3, [r4, #26]
   33520:	ldr	r0, [r4, #20]
   33524:	cmp	r3, #0
   33528:	addeq	r0, r0, #1
   3352c:	str	r0, [r4, #20]
   33530:	ldr	r3, [sp, #56]	; 0x38
   33534:	add	r3, r0, r3
   33538:	ldr	r2, [r4, #16]
   3353c:	cmp	r2, r3
   33540:	bls	33734 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2d4>
   33544:	ldr	r2, [sp, #56]	; 0x38
   33548:	mov	r1, r7
   3354c:	bl	14524 <memcpy@plt>
   33550:	ldr	r3, [r4, #20]
   33554:	ldr	r2, [sp, #56]	; 0x38
   33558:	add	r3, r3, r2
   3355c:	str	r3, [r4, #20]
   33560:	ldr	r3, [r4, #20]
   33564:	mov	r1, #34	; 0x22
   33568:	strb	r1, [r3]
   3356c:	ldrb	r3, [r4, #26]
   33570:	clz	r3, r3
   33574:	lsr	r3, r3, #5
   33578:	ldr	r0, [r4, #20]
   3357c:	add	r2, r0, r3
   33580:	add	r2, r2, #1
   33584:	str	r2, [r4, #20]
   33588:	mov	r2, #58	; 0x3a
   3358c:	strb	r2, [r0, r3]
   33590:	ldr	r3, [r4, #20]
   33594:	mov	r2, #32
   33598:	strb	r2, [r3]
   3359c:	ldrb	r3, [r4, #25]
   335a0:	adds	r3, r3, #0
   335a4:	movne	r3, #1
   335a8:	ldr	r0, [r4, #20]
   335ac:	add	r2, r0, r3
   335b0:	str	r2, [r4, #20]
   335b4:	ldr	ip, [r9, r6]
   335b8:	add	r7, sl, ip
   335bc:	ldr	ip, [sl, ip]
   335c0:	str	ip, [sp, #8]
   335c4:	add	r7, r7, #4
   335c8:	add	r2, r2, #1
   335cc:	str	r2, [r4, #20]
   335d0:	strb	r1, [r0, r3]
   335d4:	mov	r1, r8
   335d8:	ldr	r0, [sp, #8]
   335dc:	bl	316a0 <flatcc_json_parser_struct_as_root@@Base+0x11c8>
   335e0:	mov	r9, r0
   335e4:	ldr	r3, [r4, #20]
   335e8:	add	r3, r3, r0
   335ec:	ldr	r2, [r4, #16]
   335f0:	cmp	r2, r3
   335f4:	bhi	33608 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1a8>
   335f8:	ldr	r3, [r4, #44]	; 0x2c
   335fc:	mov	r1, #0
   33600:	mov	r0, r4
   33604:	blx	r3
   33608:	ldr	r0, [r4, #20]
   3360c:	ldr	r6, [r4, #16]
   33610:	add	r3, r0, r9
   33614:	cmp	r6, r3
   33618:	bcs	33748 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2e8>
   3361c:	sub	r6, r6, r0
   33620:	bic	r6, r6, #3
   33624:	add	r3, r6, r6, lsl #1
   33628:	lsr	r9, r3, #2
   3362c:	cmp	r3, #3
   33630:	bls	336b8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x258>
   33634:	mov	sl, #0
   33638:	str	r9, [sp, #12]
   3363c:	str	r5, [sp]
   33640:	add	r3, sp, #12
   33644:	mov	r2, sl
   33648:	mov	r1, r7
   3364c:	bl	316f8 <flatcc_json_parser_struct_as_root@@Base+0x1220>
   33650:	ldr	r3, [r4, #20]
   33654:	add	r6, r3, r6
   33658:	str	r6, [r4, #20]
   3365c:	add	r7, r7, r9
   33660:	ldr	r3, [sp, #8]
   33664:	sub	r9, r3, r9
   33668:	str	r9, [sp, #8]
   3366c:	ldr	r3, [r4, #44]	; 0x2c
   33670:	mov	r1, sl
   33674:	mov	r0, r4
   33678:	blx	r3
   3367c:	mov	r1, r8
   33680:	ldr	r0, [sp, #8]
   33684:	bl	316a0 <flatcc_json_parser_struct_as_root@@Base+0x11c8>
   33688:	mov	r9, r0
   3368c:	ldr	r0, [r4, #20]
   33690:	ldr	r6, [r4, #16]
   33694:	add	r3, r0, r9
   33698:	cmp	r6, r3
   3369c:	bcs	33748 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2e8>
   336a0:	sub	r6, r6, r0
   336a4:	bic	r6, r6, #3
   336a8:	add	r3, r6, r6, lsl #1
   336ac:	lsr	r9, r3, #2
   336b0:	cmp	r3, #3
   336b4:	bhi	33638 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1d8>
   336b8:	ldr	r3, [pc, #208]	; 33790 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x330>
   336bc:	movw	r2, #277	; 0x115
   336c0:	movw	r1, #19276	; 0x4b4c
   336c4:	movt	r1, #4
   336c8:	movw	r0, #19624	; 0x4ca8
   336cc:	movt	r0, #4
   336d0:	bl	145f0 <__assert_fail@plt>
   336d4:	ldr	r3, [r0, #20]
   336d8:	add	r2, r3, #1
   336dc:	str	r2, [r0, #20]
   336e0:	mov	r2, #10
   336e4:	strb	r2, [r3]
   336e8:	ldrb	r3, [r0, #25]
   336ec:	ldr	fp, [r0, #32]
   336f0:	mul	fp, fp, r3
   336f4:	ldr	r0, [r0, #20]
   336f8:	add	r3, r0, fp
   336fc:	ldr	r2, [r4, #16]
   33700:	cmp	r2, r3
   33704:	bcs	33718 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b8>
   33708:	mov	r1, fp
   3370c:	mov	r0, r4
   33710:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   33714:	b	33510 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb0>
   33718:	mov	r2, fp
   3371c:	mov	r1, #32
   33720:	bl	1459c <memset@plt>
   33724:	ldr	r3, [r4, #20]
   33728:	add	fp, r3, fp
   3372c:	str	fp, [r4, #20]
   33730:	b	33510 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb0>
   33734:	ldr	r2, [sp, #56]	; 0x38
   33738:	mov	r1, r7
   3373c:	mov	r0, r4
   33740:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   33744:	b	33560 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x100>
   33748:	str	r8, [sp]
   3374c:	add	r3, sp, #8
   33750:	mov	r2, #0
   33754:	mov	r1, r7
   33758:	bl	316f8 <flatcc_json_parser_struct_as_root@@Base+0x1220>
   3375c:	ldr	r2, [r4, #20]
   33760:	add	r3, r2, r9
   33764:	add	r3, r3, #1
   33768:	str	r3, [r4, #20]
   3376c:	mov	r3, #34	; 0x22
   33770:	strb	r3, [r2, r9]
   33774:	add	sp, sp, #20
   33778:	ldrd	r4, [sp]
   3377c:	ldrd	r6, [sp, #8]
   33780:	ldrd	r8, [sp, #16]
   33784:	ldrd	sl, [sp, #24]
   33788:	add	sp, sp, #32
   3378c:	pop	{pc}		; (ldr pc, [sp], #4)
   33790:	andeq	r4, r4, r8, asr sl

00033794 <flatcc_json_printer_uint8_field@@Base>:
   33794:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33798:	strd	r6, [sp, #8]
   3379c:	str	r8, [sp, #16]
   337a0:	str	lr, [sp, #20]
   337a4:	ldr	r6, [sp, #24]
   337a8:	ldrb	lr, [sp, #28]
   337ac:	add	r2, r2, #2
   337b0:	lsl	r2, r2, #1
   337b4:	ldr	ip, [r1, #8]
   337b8:	cmp	r2, ip
   337bc:	bge	337f8 <flatcc_json_printer_uint8_field@@Base+0x64>
   337c0:	ldr	ip, [r1, #4]
   337c4:	ldrh	r2, [ip, r2]
   337c8:	cmp	r2, #0
   337cc:	beq	337f8 <flatcc_json_printer_uint8_field@@Base+0x64>
   337d0:	ldr	ip, [r1]
   337d4:	cmn	ip, r2
   337d8:	beq	337f8 <flatcc_json_printer_uint8_field@@Base+0x64>
   337dc:	ldrb	r5, [ip, r2]
   337e0:	cmp	lr, r5
   337e4:	bne	33808 <flatcc_json_printer_uint8_field@@Base+0x74>
   337e8:	ldrb	r2, [r0, #28]
   337ec:	cmp	r2, #0
   337f0:	beq	33808 <flatcc_json_printer_uint8_field@@Base+0x74>
   337f4:	b	3390c <flatcc_json_printer_uint8_field@@Base+0x178>
   337f8:	ldrb	r2, [r0, #29]
   337fc:	cmp	r2, #0
   33800:	beq	3390c <flatcc_json_printer_uint8_field@@Base+0x178>
   33804:	mov	r5, lr
   33808:	ldr	r2, [r1, #16]
   3380c:	add	ip, r2, #1
   33810:	str	ip, [r1, #16]
   33814:	cmp	r2, #0
   33818:	beq	33830 <flatcc_json_printer_uint8_field@@Base+0x9c>
   3381c:	ldr	r2, [r0, #20]
   33820:	add	r1, r2, #1
   33824:	str	r1, [r0, #20]
   33828:	mov	r1, #44	; 0x2c
   3382c:	strb	r1, [r2]
   33830:	mov	r7, r3
   33834:	mov	r4, r0
   33838:	ldrb	r3, [r0, #25]
   3383c:	cmp	r3, #0
   33840:	bne	33920 <flatcc_json_printer_uint8_field@@Base+0x18c>
   33844:	ldr	r2, [r0, #20]
   33848:	ldr	r3, [r0, #16]
   3384c:	cmp	r2, r3
   33850:	bcc	33860 <flatcc_json_printer_uint8_field@@Base+0xcc>
   33854:	ldr	r3, [r0, #44]	; 0x2c
   33858:	mov	r1, #0
   3385c:	blx	r3
   33860:	ldr	r3, [r4, #20]
   33864:	mov	r2, #34	; 0x22
   33868:	strb	r2, [r3]
   3386c:	ldrb	r3, [r4, #26]
   33870:	ldr	r0, [r4, #20]
   33874:	cmp	r3, #0
   33878:	addeq	r0, r0, #1
   3387c:	str	r0, [r4, #20]
   33880:	add	r3, r0, r6
   33884:	ldr	r2, [r4, #16]
   33888:	cmp	r2, r3
   3388c:	bls	33980 <flatcc_json_printer_uint8_field@@Base+0x1ec>
   33890:	mov	r2, r6
   33894:	mov	r1, r7
   33898:	bl	14524 <memcpy@plt>
   3389c:	ldr	r3, [r4, #20]
   338a0:	add	r6, r3, r6
   338a4:	str	r6, [r4, #20]
   338a8:	ldr	r3, [r4, #20]
   338ac:	mov	r2, #34	; 0x22
   338b0:	strb	r2, [r3]
   338b4:	ldrb	r3, [r4, #26]
   338b8:	clz	r3, r3
   338bc:	lsr	r3, r3, #5
   338c0:	ldr	r1, [r4, #20]
   338c4:	add	r2, r1, r3
   338c8:	add	r2, r2, #1
   338cc:	str	r2, [r4, #20]
   338d0:	mov	r2, #58	; 0x3a
   338d4:	strb	r2, [r1, r3]
   338d8:	ldr	r3, [r4, #20]
   338dc:	mov	r2, #32
   338e0:	strb	r2, [r3]
   338e4:	ldrb	r3, [r4, #25]
   338e8:	ldr	r1, [r4, #20]
   338ec:	cmp	r3, #0
   338f0:	addne	r1, r1, #1
   338f4:	str	r1, [r4, #20]
   338f8:	mov	r0, r5
   338fc:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   33900:	ldr	r3, [r4, #20]
   33904:	add	r0, r3, r0
   33908:	str	r0, [r4, #20]
   3390c:	ldrd	r4, [sp]
   33910:	ldrd	r6, [sp, #8]
   33914:	ldr	r8, [sp, #16]
   33918:	add	sp, sp, #20
   3391c:	pop	{pc}		; (ldr pc, [sp], #4)
   33920:	ldr	r3, [r0, #20]
   33924:	add	r2, r3, #1
   33928:	str	r2, [r0, #20]
   3392c:	mov	r2, #10
   33930:	strb	r2, [r3]
   33934:	ldrb	r3, [r0, #25]
   33938:	ldr	r8, [r0, #32]
   3393c:	mul	r8, r8, r3
   33940:	ldr	r0, [r0, #20]
   33944:	add	r3, r0, r8
   33948:	ldr	r2, [r4, #16]
   3394c:	cmp	r2, r3
   33950:	bcs	33964 <flatcc_json_printer_uint8_field@@Base+0x1d0>
   33954:	mov	r1, r8
   33958:	mov	r0, r4
   3395c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   33960:	b	33860 <flatcc_json_printer_uint8_field@@Base+0xcc>
   33964:	mov	r2, r8
   33968:	mov	r1, #32
   3396c:	bl	1459c <memset@plt>
   33970:	ldr	r3, [r4, #20]
   33974:	add	r8, r3, r8
   33978:	str	r8, [r4, #20]
   3397c:	b	33860 <flatcc_json_printer_uint8_field@@Base+0xcc>
   33980:	mov	r2, r6
   33984:	mov	r1, r7
   33988:	mov	r0, r4
   3398c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   33990:	b	338a8 <flatcc_json_printer_uint8_field@@Base+0x114>

00033994 <flatcc_json_printer_uint16_field@@Base>:
   33994:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33998:	strd	r6, [sp, #8]
   3399c:	str	r8, [sp, #16]
   339a0:	str	lr, [sp, #20]
   339a4:	ldr	r6, [sp, #24]
   339a8:	ldrh	lr, [sp, #28]
   339ac:	add	r2, r2, #2
   339b0:	lsl	r2, r2, #1
   339b4:	ldr	ip, [r1, #8]
   339b8:	cmp	r2, ip
   339bc:	bge	339f8 <flatcc_json_printer_uint16_field@@Base+0x64>
   339c0:	ldr	ip, [r1, #4]
   339c4:	ldrh	r2, [ip, r2]
   339c8:	cmp	r2, #0
   339cc:	beq	339f8 <flatcc_json_printer_uint16_field@@Base+0x64>
   339d0:	ldr	ip, [r1]
   339d4:	cmn	ip, r2
   339d8:	beq	339f8 <flatcc_json_printer_uint16_field@@Base+0x64>
   339dc:	ldrh	r5, [ip, r2]
   339e0:	cmp	lr, r5
   339e4:	bne	33a08 <flatcc_json_printer_uint16_field@@Base+0x74>
   339e8:	ldrb	r2, [r0, #28]
   339ec:	cmp	r2, #0
   339f0:	beq	33a08 <flatcc_json_printer_uint16_field@@Base+0x74>
   339f4:	b	33b0c <flatcc_json_printer_uint16_field@@Base+0x178>
   339f8:	ldrb	r2, [r0, #29]
   339fc:	cmp	r2, #0
   33a00:	beq	33b0c <flatcc_json_printer_uint16_field@@Base+0x178>
   33a04:	mov	r5, lr
   33a08:	ldr	r2, [r1, #16]
   33a0c:	add	ip, r2, #1
   33a10:	str	ip, [r1, #16]
   33a14:	cmp	r2, #0
   33a18:	beq	33a30 <flatcc_json_printer_uint16_field@@Base+0x9c>
   33a1c:	ldr	r2, [r0, #20]
   33a20:	add	r1, r2, #1
   33a24:	str	r1, [r0, #20]
   33a28:	mov	r1, #44	; 0x2c
   33a2c:	strb	r1, [r2]
   33a30:	mov	r7, r3
   33a34:	mov	r4, r0
   33a38:	ldrb	r3, [r0, #25]
   33a3c:	cmp	r3, #0
   33a40:	bne	33b20 <flatcc_json_printer_uint16_field@@Base+0x18c>
   33a44:	ldr	r2, [r0, #20]
   33a48:	ldr	r3, [r0, #16]
   33a4c:	cmp	r2, r3
   33a50:	bcc	33a60 <flatcc_json_printer_uint16_field@@Base+0xcc>
   33a54:	ldr	r3, [r0, #44]	; 0x2c
   33a58:	mov	r1, #0
   33a5c:	blx	r3
   33a60:	ldr	r3, [r4, #20]
   33a64:	mov	r2, #34	; 0x22
   33a68:	strb	r2, [r3]
   33a6c:	ldrb	r3, [r4, #26]
   33a70:	ldr	r0, [r4, #20]
   33a74:	cmp	r3, #0
   33a78:	addeq	r0, r0, #1
   33a7c:	str	r0, [r4, #20]
   33a80:	add	r3, r0, r6
   33a84:	ldr	r2, [r4, #16]
   33a88:	cmp	r2, r3
   33a8c:	bls	33b80 <flatcc_json_printer_uint16_field@@Base+0x1ec>
   33a90:	mov	r2, r6
   33a94:	mov	r1, r7
   33a98:	bl	14524 <memcpy@plt>
   33a9c:	ldr	r3, [r4, #20]
   33aa0:	add	r6, r3, r6
   33aa4:	str	r6, [r4, #20]
   33aa8:	ldr	r3, [r4, #20]
   33aac:	mov	r2, #34	; 0x22
   33ab0:	strb	r2, [r3]
   33ab4:	ldrb	r3, [r4, #26]
   33ab8:	clz	r3, r3
   33abc:	lsr	r3, r3, #5
   33ac0:	ldr	r1, [r4, #20]
   33ac4:	add	r2, r1, r3
   33ac8:	add	r2, r2, #1
   33acc:	str	r2, [r4, #20]
   33ad0:	mov	r2, #58	; 0x3a
   33ad4:	strb	r2, [r1, r3]
   33ad8:	ldr	r3, [r4, #20]
   33adc:	mov	r2, #32
   33ae0:	strb	r2, [r3]
   33ae4:	ldrb	r3, [r4, #25]
   33ae8:	ldr	r1, [r4, #20]
   33aec:	cmp	r3, #0
   33af0:	addne	r1, r1, #1
   33af4:	str	r1, [r4, #20]
   33af8:	mov	r0, r5
   33afc:	bl	30688 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   33b00:	ldr	r3, [r4, #20]
   33b04:	add	r0, r3, r0
   33b08:	str	r0, [r4, #20]
   33b0c:	ldrd	r4, [sp]
   33b10:	ldrd	r6, [sp, #8]
   33b14:	ldr	r8, [sp, #16]
   33b18:	add	sp, sp, #20
   33b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   33b20:	ldr	r3, [r0, #20]
   33b24:	add	r2, r3, #1
   33b28:	str	r2, [r0, #20]
   33b2c:	mov	r2, #10
   33b30:	strb	r2, [r3]
   33b34:	ldrb	r3, [r0, #25]
   33b38:	ldr	r8, [r0, #32]
   33b3c:	mul	r8, r8, r3
   33b40:	ldr	r0, [r0, #20]
   33b44:	add	r3, r0, r8
   33b48:	ldr	r2, [r4, #16]
   33b4c:	cmp	r2, r3
   33b50:	bcs	33b64 <flatcc_json_printer_uint16_field@@Base+0x1d0>
   33b54:	mov	r1, r8
   33b58:	mov	r0, r4
   33b5c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   33b60:	b	33a60 <flatcc_json_printer_uint16_field@@Base+0xcc>
   33b64:	mov	r2, r8
   33b68:	mov	r1, #32
   33b6c:	bl	1459c <memset@plt>
   33b70:	ldr	r3, [r4, #20]
   33b74:	add	r8, r3, r8
   33b78:	str	r8, [r4, #20]
   33b7c:	b	33a60 <flatcc_json_printer_uint16_field@@Base+0xcc>
   33b80:	mov	r2, r6
   33b84:	mov	r1, r7
   33b88:	mov	r0, r4
   33b8c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   33b90:	b	33aa8 <flatcc_json_printer_uint16_field@@Base+0x114>

00033b94 <flatcc_json_printer_uint32_field@@Base>:
   33b94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33b98:	strd	r6, [sp, #8]
   33b9c:	str	r8, [sp, #16]
   33ba0:	str	lr, [sp, #20]
   33ba4:	ldr	r6, [sp, #24]
   33ba8:	add	r2, r2, #2
   33bac:	lsl	r2, r2, #1
   33bb0:	ldr	ip, [r1, #8]
   33bb4:	cmp	r2, ip
   33bb8:	bge	33bf8 <flatcc_json_printer_uint32_field@@Base+0x64>
   33bbc:	ldr	ip, [r1, #4]
   33bc0:	ldrh	r2, [ip, r2]
   33bc4:	cmp	r2, #0
   33bc8:	beq	33bf8 <flatcc_json_printer_uint32_field@@Base+0x64>
   33bcc:	ldr	ip, [r1]
   33bd0:	cmn	ip, r2
   33bd4:	beq	33bf8 <flatcc_json_printer_uint32_field@@Base+0x64>
   33bd8:	ldr	r5, [ip, r2]
   33bdc:	ldr	r2, [sp, #28]
   33be0:	cmp	r2, r5
   33be4:	bne	33c08 <flatcc_json_printer_uint32_field@@Base+0x74>
   33be8:	ldrb	r2, [r0, #28]
   33bec:	cmp	r2, #0
   33bf0:	beq	33c08 <flatcc_json_printer_uint32_field@@Base+0x74>
   33bf4:	b	33d0c <flatcc_json_printer_uint32_field@@Base+0x178>
   33bf8:	ldrb	r2, [r0, #29]
   33bfc:	cmp	r2, #0
   33c00:	beq	33d0c <flatcc_json_printer_uint32_field@@Base+0x178>
   33c04:	ldr	r5, [sp, #28]
   33c08:	ldr	r2, [r1, #16]
   33c0c:	add	ip, r2, #1
   33c10:	str	ip, [r1, #16]
   33c14:	cmp	r2, #0
   33c18:	beq	33c30 <flatcc_json_printer_uint32_field@@Base+0x9c>
   33c1c:	ldr	r2, [r0, #20]
   33c20:	add	r1, r2, #1
   33c24:	str	r1, [r0, #20]
   33c28:	mov	r1, #44	; 0x2c
   33c2c:	strb	r1, [r2]
   33c30:	mov	r7, r3
   33c34:	mov	r4, r0
   33c38:	ldrb	r3, [r0, #25]
   33c3c:	cmp	r3, #0
   33c40:	bne	33d20 <flatcc_json_printer_uint32_field@@Base+0x18c>
   33c44:	ldr	r2, [r0, #20]
   33c48:	ldr	r3, [r0, #16]
   33c4c:	cmp	r2, r3
   33c50:	bcc	33c60 <flatcc_json_printer_uint32_field@@Base+0xcc>
   33c54:	ldr	r3, [r0, #44]	; 0x2c
   33c58:	mov	r1, #0
   33c5c:	blx	r3
   33c60:	ldr	r3, [r4, #20]
   33c64:	mov	r2, #34	; 0x22
   33c68:	strb	r2, [r3]
   33c6c:	ldrb	r3, [r4, #26]
   33c70:	ldr	r0, [r4, #20]
   33c74:	cmp	r3, #0
   33c78:	addeq	r0, r0, #1
   33c7c:	str	r0, [r4, #20]
   33c80:	add	r3, r0, r6
   33c84:	ldr	r2, [r4, #16]
   33c88:	cmp	r2, r3
   33c8c:	bls	33d80 <flatcc_json_printer_uint32_field@@Base+0x1ec>
   33c90:	mov	r2, r6
   33c94:	mov	r1, r7
   33c98:	bl	14524 <memcpy@plt>
   33c9c:	ldr	r3, [r4, #20]
   33ca0:	add	r6, r3, r6
   33ca4:	str	r6, [r4, #20]
   33ca8:	ldr	r3, [r4, #20]
   33cac:	mov	r2, #34	; 0x22
   33cb0:	strb	r2, [r3]
   33cb4:	ldrb	r3, [r4, #26]
   33cb8:	clz	r3, r3
   33cbc:	lsr	r3, r3, #5
   33cc0:	ldr	r1, [r4, #20]
   33cc4:	add	r2, r1, r3
   33cc8:	add	r2, r2, #1
   33ccc:	str	r2, [r4, #20]
   33cd0:	mov	r2, #58	; 0x3a
   33cd4:	strb	r2, [r1, r3]
   33cd8:	ldr	r3, [r4, #20]
   33cdc:	mov	r2, #32
   33ce0:	strb	r2, [r3]
   33ce4:	ldrb	r3, [r4, #25]
   33ce8:	ldr	r1, [r4, #20]
   33cec:	cmp	r3, #0
   33cf0:	addne	r1, r1, #1
   33cf4:	str	r1, [r4, #20]
   33cf8:	mov	r0, r5
   33cfc:	bl	3081c <flatcc_json_parser_struct_as_root@@Base+0x344>
   33d00:	ldr	r3, [r4, #20]
   33d04:	add	r0, r3, r0
   33d08:	str	r0, [r4, #20]
   33d0c:	ldrd	r4, [sp]
   33d10:	ldrd	r6, [sp, #8]
   33d14:	ldr	r8, [sp, #16]
   33d18:	add	sp, sp, #20
   33d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   33d20:	ldr	r3, [r0, #20]
   33d24:	add	r2, r3, #1
   33d28:	str	r2, [r0, #20]
   33d2c:	mov	r2, #10
   33d30:	strb	r2, [r3]
   33d34:	ldrb	r3, [r0, #25]
   33d38:	ldr	r8, [r0, #32]
   33d3c:	mul	r8, r8, r3
   33d40:	ldr	r0, [r0, #20]
   33d44:	add	r3, r0, r8
   33d48:	ldr	r2, [r4, #16]
   33d4c:	cmp	r2, r3
   33d50:	bcs	33d64 <flatcc_json_printer_uint32_field@@Base+0x1d0>
   33d54:	mov	r1, r8
   33d58:	mov	r0, r4
   33d5c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   33d60:	b	33c60 <flatcc_json_printer_uint32_field@@Base+0xcc>
   33d64:	mov	r2, r8
   33d68:	mov	r1, #32
   33d6c:	bl	1459c <memset@plt>
   33d70:	ldr	r3, [r4, #20]
   33d74:	add	r8, r3, r8
   33d78:	str	r8, [r4, #20]
   33d7c:	b	33c60 <flatcc_json_printer_uint32_field@@Base+0xcc>
   33d80:	mov	r2, r6
   33d84:	mov	r1, r7
   33d88:	mov	r0, r4
   33d8c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   33d90:	b	33ca8 <flatcc_json_printer_uint32_field@@Base+0x114>

00033d94 <flatcc_json_printer_uint64_field@@Base>:
   33d94:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33d98:	strd	r6, [sp, #8]
   33d9c:	strd	r8, [sp, #16]
   33da0:	str	sl, [sp, #24]
   33da4:	str	lr, [sp, #28]
   33da8:	ldr	r5, [sp, #32]
   33dac:	add	r2, r2, #2
   33db0:	lsl	r2, r2, #1
   33db4:	ldr	ip, [r1, #8]
   33db8:	cmp	r2, ip
   33dbc:	bge	33e00 <flatcc_json_printer_uint64_field@@Base+0x6c>
   33dc0:	ldr	ip, [r1, #4]
   33dc4:	ldrh	r2, [ip, r2]
   33dc8:	cmp	r2, #0
   33dcc:	beq	33e00 <flatcc_json_printer_uint64_field@@Base+0x6c>
   33dd0:	ldr	ip, [r1]
   33dd4:	cmn	ip, r2
   33dd8:	beq	33e00 <flatcc_json_printer_uint64_field@@Base+0x6c>
   33ddc:	ldrd	r6, [ip, r2]
   33de0:	ldrd	r8, [sp, #40]	; 0x28
   33de4:	cmp	r9, r7
   33de8:	cmpeq	r8, r6
   33dec:	bne	33e10 <flatcc_json_printer_uint64_field@@Base+0x7c>
   33df0:	ldrb	r2, [r0, #28]
   33df4:	cmp	r2, #0
   33df8:	beq	33e10 <flatcc_json_printer_uint64_field@@Base+0x7c>
   33dfc:	b	33f18 <flatcc_json_printer_uint64_field@@Base+0x184>
   33e00:	ldrb	r2, [r0, #29]
   33e04:	cmp	r2, #0
   33e08:	beq	33f18 <flatcc_json_printer_uint64_field@@Base+0x184>
   33e0c:	ldrd	r6, [sp, #40]	; 0x28
   33e10:	ldr	r2, [r1, #16]
   33e14:	add	ip, r2, #1
   33e18:	str	ip, [r1, #16]
   33e1c:	cmp	r2, #0
   33e20:	beq	33e38 <flatcc_json_printer_uint64_field@@Base+0xa4>
   33e24:	ldr	r2, [r0, #20]
   33e28:	add	r1, r2, #1
   33e2c:	str	r1, [r0, #20]
   33e30:	mov	r1, #44	; 0x2c
   33e34:	strb	r1, [r2]
   33e38:	mov	r8, r3
   33e3c:	mov	r4, r0
   33e40:	ldrb	r3, [r0, #25]
   33e44:	cmp	r3, #0
   33e48:	bne	33f30 <flatcc_json_printer_uint64_field@@Base+0x19c>
   33e4c:	ldr	r2, [r0, #20]
   33e50:	ldr	r3, [r0, #16]
   33e54:	cmp	r2, r3
   33e58:	bcc	33e68 <flatcc_json_printer_uint64_field@@Base+0xd4>
   33e5c:	ldr	r3, [r0, #44]	; 0x2c
   33e60:	mov	r1, #0
   33e64:	blx	r3
   33e68:	ldr	r3, [r4, #20]
   33e6c:	mov	r2, #34	; 0x22
   33e70:	strb	r2, [r3]
   33e74:	ldrb	r3, [r4, #26]
   33e78:	ldr	r0, [r4, #20]
   33e7c:	cmp	r3, #0
   33e80:	addeq	r0, r0, #1
   33e84:	str	r0, [r4, #20]
   33e88:	add	r3, r0, r5
   33e8c:	ldr	r2, [r4, #16]
   33e90:	cmp	r2, r3
   33e94:	bls	33f90 <flatcc_json_printer_uint64_field@@Base+0x1fc>
   33e98:	mov	r2, r5
   33e9c:	mov	r1, r8
   33ea0:	bl	14524 <memcpy@plt>
   33ea4:	ldr	r3, [r4, #20]
   33ea8:	add	r5, r3, r5
   33eac:	str	r5, [r4, #20]
   33eb0:	ldr	r3, [r4, #20]
   33eb4:	mov	r2, #34	; 0x22
   33eb8:	strb	r2, [r3]
   33ebc:	ldrb	r3, [r4, #26]
   33ec0:	clz	r3, r3
   33ec4:	lsr	r3, r3, #5
   33ec8:	ldr	r1, [r4, #20]
   33ecc:	add	r2, r1, r3
   33ed0:	add	r2, r2, #1
   33ed4:	str	r2, [r4, #20]
   33ed8:	mov	r2, #58	; 0x3a
   33edc:	strb	r2, [r1, r3]
   33ee0:	ldr	r3, [r4, #20]
   33ee4:	mov	r2, #32
   33ee8:	strb	r2, [r3]
   33eec:	ldrb	r3, [r4, #25]
   33ef0:	ldr	r2, [r4, #20]
   33ef4:	cmp	r3, #0
   33ef8:	addne	r2, r2, #1
   33efc:	str	r2, [r4, #20]
   33f00:	mov	r0, r6
   33f04:	mov	r1, r7
   33f08:	bl	30b80 <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   33f0c:	ldr	r3, [r4, #20]
   33f10:	add	r0, r3, r0
   33f14:	str	r0, [r4, #20]
   33f18:	ldrd	r4, [sp]
   33f1c:	ldrd	r6, [sp, #8]
   33f20:	ldrd	r8, [sp, #16]
   33f24:	ldr	sl, [sp, #24]
   33f28:	add	sp, sp, #28
   33f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   33f30:	ldr	r3, [r0, #20]
   33f34:	add	r2, r3, #1
   33f38:	str	r2, [r0, #20]
   33f3c:	mov	r2, #10
   33f40:	strb	r2, [r3]
   33f44:	ldrb	r3, [r0, #25]
   33f48:	ldr	r9, [r0, #32]
   33f4c:	mul	r9, r9, r3
   33f50:	ldr	r0, [r0, #20]
   33f54:	add	r3, r0, r9
   33f58:	ldr	r2, [r4, #16]
   33f5c:	cmp	r2, r3
   33f60:	bcs	33f74 <flatcc_json_printer_uint64_field@@Base+0x1e0>
   33f64:	mov	r1, r9
   33f68:	mov	r0, r4
   33f6c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   33f70:	b	33e68 <flatcc_json_printer_uint64_field@@Base+0xd4>
   33f74:	mov	r2, r9
   33f78:	mov	r1, #32
   33f7c:	bl	1459c <memset@plt>
   33f80:	ldr	r3, [r4, #20]
   33f84:	add	r9, r3, r9
   33f88:	str	r9, [r4, #20]
   33f8c:	b	33e68 <flatcc_json_printer_uint64_field@@Base+0xd4>
   33f90:	mov	r2, r5
   33f94:	mov	r1, r8
   33f98:	mov	r0, r4
   33f9c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   33fa0:	b	33eb0 <flatcc_json_printer_uint64_field@@Base+0x11c>

00033fa4 <flatcc_json_printer_int8_field@@Base>:
   33fa4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33fa8:	strd	r6, [sp, #8]
   33fac:	str	r8, [sp, #16]
   33fb0:	str	lr, [sp, #20]
   33fb4:	ldr	r6, [sp, #24]
   33fb8:	ldrsb	lr, [sp, #28]
   33fbc:	add	r2, r2, #2
   33fc0:	lsl	r2, r2, #1
   33fc4:	ldr	ip, [r1, #8]
   33fc8:	cmp	r2, ip
   33fcc:	bge	34008 <flatcc_json_printer_int8_field@@Base+0x64>
   33fd0:	ldr	ip, [r1, #4]
   33fd4:	ldrh	r2, [ip, r2]
   33fd8:	cmp	r2, #0
   33fdc:	beq	34008 <flatcc_json_printer_int8_field@@Base+0x64>
   33fe0:	ldr	ip, [r1]
   33fe4:	cmn	ip, r2
   33fe8:	beq	34008 <flatcc_json_printer_int8_field@@Base+0x64>
   33fec:	ldrsb	r5, [ip, r2]
   33ff0:	cmp	lr, r5
   33ff4:	bne	34018 <flatcc_json_printer_int8_field@@Base+0x74>
   33ff8:	ldrb	r2, [r0, #28]
   33ffc:	cmp	r2, #0
   34000:	beq	34018 <flatcc_json_printer_int8_field@@Base+0x74>
   34004:	b	3411c <flatcc_json_printer_int8_field@@Base+0x178>
   34008:	ldrb	r2, [r0, #29]
   3400c:	cmp	r2, #0
   34010:	beq	3411c <flatcc_json_printer_int8_field@@Base+0x178>
   34014:	mov	r5, lr
   34018:	ldr	r2, [r1, #16]
   3401c:	add	ip, r2, #1
   34020:	str	ip, [r1, #16]
   34024:	cmp	r2, #0
   34028:	beq	34040 <flatcc_json_printer_int8_field@@Base+0x9c>
   3402c:	ldr	r2, [r0, #20]
   34030:	add	r1, r2, #1
   34034:	str	r1, [r0, #20]
   34038:	mov	r1, #44	; 0x2c
   3403c:	strb	r1, [r2]
   34040:	mov	r7, r3
   34044:	mov	r4, r0
   34048:	ldrb	r3, [r0, #25]
   3404c:	cmp	r3, #0
   34050:	bne	34130 <flatcc_json_printer_int8_field@@Base+0x18c>
   34054:	ldr	r2, [r0, #20]
   34058:	ldr	r3, [r0, #16]
   3405c:	cmp	r2, r3
   34060:	bcc	34070 <flatcc_json_printer_int8_field@@Base+0xcc>
   34064:	ldr	r3, [r0, #44]	; 0x2c
   34068:	mov	r1, #0
   3406c:	blx	r3
   34070:	ldr	r3, [r4, #20]
   34074:	mov	r2, #34	; 0x22
   34078:	strb	r2, [r3]
   3407c:	ldrb	r3, [r4, #26]
   34080:	ldr	r0, [r4, #20]
   34084:	cmp	r3, #0
   34088:	addeq	r0, r0, #1
   3408c:	str	r0, [r4, #20]
   34090:	add	r3, r0, r6
   34094:	ldr	r2, [r4, #16]
   34098:	cmp	r2, r3
   3409c:	bls	34190 <flatcc_json_printer_int8_field@@Base+0x1ec>
   340a0:	mov	r2, r6
   340a4:	mov	r1, r7
   340a8:	bl	14524 <memcpy@plt>
   340ac:	ldr	r3, [r4, #20]
   340b0:	add	r6, r3, r6
   340b4:	str	r6, [r4, #20]
   340b8:	ldr	r3, [r4, #20]
   340bc:	mov	r2, #34	; 0x22
   340c0:	strb	r2, [r3]
   340c4:	ldrb	r3, [r4, #26]
   340c8:	clz	r3, r3
   340cc:	lsr	r3, r3, #5
   340d0:	ldr	r1, [r4, #20]
   340d4:	add	r2, r1, r3
   340d8:	add	r2, r2, #1
   340dc:	str	r2, [r4, #20]
   340e0:	mov	r2, #58	; 0x3a
   340e4:	strb	r2, [r1, r3]
   340e8:	ldr	r3, [r4, #20]
   340ec:	mov	r2, #32
   340f0:	strb	r2, [r3]
   340f4:	ldrb	r3, [r4, #25]
   340f8:	ldr	r1, [r4, #20]
   340fc:	cmp	r3, #0
   34100:	addne	r1, r1, #1
   34104:	str	r1, [r4, #20]
   34108:	mov	r0, r5
   3410c:	bl	3125c <flatcc_json_parser_struct_as_root@@Base+0xd84>
   34110:	ldr	r3, [r4, #20]
   34114:	add	r0, r3, r0
   34118:	str	r0, [r4, #20]
   3411c:	ldrd	r4, [sp]
   34120:	ldrd	r6, [sp, #8]
   34124:	ldr	r8, [sp, #16]
   34128:	add	sp, sp, #20
   3412c:	pop	{pc}		; (ldr pc, [sp], #4)
   34130:	ldr	r3, [r0, #20]
   34134:	add	r2, r3, #1
   34138:	str	r2, [r0, #20]
   3413c:	mov	r2, #10
   34140:	strb	r2, [r3]
   34144:	ldrb	r3, [r0, #25]
   34148:	ldr	r8, [r0, #32]
   3414c:	mul	r8, r8, r3
   34150:	ldr	r0, [r0, #20]
   34154:	add	r3, r0, r8
   34158:	ldr	r2, [r4, #16]
   3415c:	cmp	r2, r3
   34160:	bcs	34174 <flatcc_json_printer_int8_field@@Base+0x1d0>
   34164:	mov	r1, r8
   34168:	mov	r0, r4
   3416c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   34170:	b	34070 <flatcc_json_printer_int8_field@@Base+0xcc>
   34174:	mov	r2, r8
   34178:	mov	r1, #32
   3417c:	bl	1459c <memset@plt>
   34180:	ldr	r3, [r4, #20]
   34184:	add	r8, r3, r8
   34188:	str	r8, [r4, #20]
   3418c:	b	34070 <flatcc_json_printer_int8_field@@Base+0xcc>
   34190:	mov	r2, r6
   34194:	mov	r1, r7
   34198:	mov	r0, r4
   3419c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   341a0:	b	340b8 <flatcc_json_printer_int8_field@@Base+0x114>

000341a4 <flatcc_json_printer_int16_field@@Base>:
   341a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   341a8:	strd	r6, [sp, #8]
   341ac:	str	r8, [sp, #16]
   341b0:	str	lr, [sp, #20]
   341b4:	ldr	r6, [sp, #24]
   341b8:	ldrsh	lr, [sp, #28]
   341bc:	add	r2, r2, #2
   341c0:	lsl	r2, r2, #1
   341c4:	ldr	ip, [r1, #8]
   341c8:	cmp	r2, ip
   341cc:	bge	34208 <flatcc_json_printer_int16_field@@Base+0x64>
   341d0:	ldr	ip, [r1, #4]
   341d4:	ldrh	r2, [ip, r2]
   341d8:	cmp	r2, #0
   341dc:	beq	34208 <flatcc_json_printer_int16_field@@Base+0x64>
   341e0:	ldr	ip, [r1]
   341e4:	cmn	ip, r2
   341e8:	beq	34208 <flatcc_json_printer_int16_field@@Base+0x64>
   341ec:	ldrsh	r5, [ip, r2]
   341f0:	cmp	lr, r5
   341f4:	bne	34218 <flatcc_json_printer_int16_field@@Base+0x74>
   341f8:	ldrb	r2, [r0, #28]
   341fc:	cmp	r2, #0
   34200:	beq	34218 <flatcc_json_printer_int16_field@@Base+0x74>
   34204:	b	3431c <flatcc_json_printer_int16_field@@Base+0x178>
   34208:	ldrb	r2, [r0, #29]
   3420c:	cmp	r2, #0
   34210:	beq	3431c <flatcc_json_printer_int16_field@@Base+0x178>
   34214:	mov	r5, lr
   34218:	ldr	r2, [r1, #16]
   3421c:	add	ip, r2, #1
   34220:	str	ip, [r1, #16]
   34224:	cmp	r2, #0
   34228:	beq	34240 <flatcc_json_printer_int16_field@@Base+0x9c>
   3422c:	ldr	r2, [r0, #20]
   34230:	add	r1, r2, #1
   34234:	str	r1, [r0, #20]
   34238:	mov	r1, #44	; 0x2c
   3423c:	strb	r1, [r2]
   34240:	mov	r7, r3
   34244:	mov	r4, r0
   34248:	ldrb	r3, [r0, #25]
   3424c:	cmp	r3, #0
   34250:	bne	34330 <flatcc_json_printer_int16_field@@Base+0x18c>
   34254:	ldr	r2, [r0, #20]
   34258:	ldr	r3, [r0, #16]
   3425c:	cmp	r2, r3
   34260:	bcc	34270 <flatcc_json_printer_int16_field@@Base+0xcc>
   34264:	ldr	r3, [r0, #44]	; 0x2c
   34268:	mov	r1, #0
   3426c:	blx	r3
   34270:	ldr	r3, [r4, #20]
   34274:	mov	r2, #34	; 0x22
   34278:	strb	r2, [r3]
   3427c:	ldrb	r3, [r4, #26]
   34280:	ldr	r0, [r4, #20]
   34284:	cmp	r3, #0
   34288:	addeq	r0, r0, #1
   3428c:	str	r0, [r4, #20]
   34290:	add	r3, r0, r6
   34294:	ldr	r2, [r4, #16]
   34298:	cmp	r2, r3
   3429c:	bls	34390 <flatcc_json_printer_int16_field@@Base+0x1ec>
   342a0:	mov	r2, r6
   342a4:	mov	r1, r7
   342a8:	bl	14524 <memcpy@plt>
   342ac:	ldr	r3, [r4, #20]
   342b0:	add	r6, r3, r6
   342b4:	str	r6, [r4, #20]
   342b8:	ldr	r3, [r4, #20]
   342bc:	mov	r2, #34	; 0x22
   342c0:	strb	r2, [r3]
   342c4:	ldrb	r3, [r4, #26]
   342c8:	clz	r3, r3
   342cc:	lsr	r3, r3, #5
   342d0:	ldr	r1, [r4, #20]
   342d4:	add	r2, r1, r3
   342d8:	add	r2, r2, #1
   342dc:	str	r2, [r4, #20]
   342e0:	mov	r2, #58	; 0x3a
   342e4:	strb	r2, [r1, r3]
   342e8:	ldr	r3, [r4, #20]
   342ec:	mov	r2, #32
   342f0:	strb	r2, [r3]
   342f4:	ldrb	r3, [r4, #25]
   342f8:	ldr	r1, [r4, #20]
   342fc:	cmp	r3, #0
   34300:	addne	r1, r1, #1
   34304:	str	r1, [r4, #20]
   34308:	mov	r0, r5
   3430c:	bl	3129c <flatcc_json_parser_struct_as_root@@Base+0xdc4>
   34310:	ldr	r3, [r4, #20]
   34314:	add	r0, r3, r0
   34318:	str	r0, [r4, #20]
   3431c:	ldrd	r4, [sp]
   34320:	ldrd	r6, [sp, #8]
   34324:	ldr	r8, [sp, #16]
   34328:	add	sp, sp, #20
   3432c:	pop	{pc}		; (ldr pc, [sp], #4)
   34330:	ldr	r3, [r0, #20]
   34334:	add	r2, r3, #1
   34338:	str	r2, [r0, #20]
   3433c:	mov	r2, #10
   34340:	strb	r2, [r3]
   34344:	ldrb	r3, [r0, #25]
   34348:	ldr	r8, [r0, #32]
   3434c:	mul	r8, r8, r3
   34350:	ldr	r0, [r0, #20]
   34354:	add	r3, r0, r8
   34358:	ldr	r2, [r4, #16]
   3435c:	cmp	r2, r3
   34360:	bcs	34374 <flatcc_json_printer_int16_field@@Base+0x1d0>
   34364:	mov	r1, r8
   34368:	mov	r0, r4
   3436c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   34370:	b	34270 <flatcc_json_printer_int16_field@@Base+0xcc>
   34374:	mov	r2, r8
   34378:	mov	r1, #32
   3437c:	bl	1459c <memset@plt>
   34380:	ldr	r3, [r4, #20]
   34384:	add	r8, r3, r8
   34388:	str	r8, [r4, #20]
   3438c:	b	34270 <flatcc_json_printer_int16_field@@Base+0xcc>
   34390:	mov	r2, r6
   34394:	mov	r1, r7
   34398:	mov	r0, r4
   3439c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   343a0:	b	342b8 <flatcc_json_printer_int16_field@@Base+0x114>

000343a4 <flatcc_json_printer_int32_field@@Base>:
   343a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   343a8:	strd	r6, [sp, #8]
   343ac:	str	r8, [sp, #16]
   343b0:	str	lr, [sp, #20]
   343b4:	ldr	r6, [sp, #24]
   343b8:	add	r2, r2, #2
   343bc:	lsl	r2, r2, #1
   343c0:	ldr	ip, [r1, #8]
   343c4:	cmp	r2, ip
   343c8:	bge	34408 <flatcc_json_printer_int32_field@@Base+0x64>
   343cc:	ldr	ip, [r1, #4]
   343d0:	ldrh	r2, [ip, r2]
   343d4:	cmp	r2, #0
   343d8:	beq	34408 <flatcc_json_printer_int32_field@@Base+0x64>
   343dc:	ldr	ip, [r1]
   343e0:	cmn	ip, r2
   343e4:	beq	34408 <flatcc_json_printer_int32_field@@Base+0x64>
   343e8:	ldr	r5, [ip, r2]
   343ec:	ldr	r2, [sp, #28]
   343f0:	cmp	r2, r5
   343f4:	bne	34418 <flatcc_json_printer_int32_field@@Base+0x74>
   343f8:	ldrb	r2, [r0, #28]
   343fc:	cmp	r2, #0
   34400:	beq	34418 <flatcc_json_printer_int32_field@@Base+0x74>
   34404:	b	3451c <flatcc_json_printer_int32_field@@Base+0x178>
   34408:	ldrb	r2, [r0, #29]
   3440c:	cmp	r2, #0
   34410:	beq	3451c <flatcc_json_printer_int32_field@@Base+0x178>
   34414:	ldr	r5, [sp, #28]
   34418:	ldr	r2, [r1, #16]
   3441c:	add	ip, r2, #1
   34420:	str	ip, [r1, #16]
   34424:	cmp	r2, #0
   34428:	beq	34440 <flatcc_json_printer_int32_field@@Base+0x9c>
   3442c:	ldr	r2, [r0, #20]
   34430:	add	r1, r2, #1
   34434:	str	r1, [r0, #20]
   34438:	mov	r1, #44	; 0x2c
   3443c:	strb	r1, [r2]
   34440:	mov	r7, r3
   34444:	mov	r4, r0
   34448:	ldrb	r3, [r0, #25]
   3444c:	cmp	r3, #0
   34450:	bne	34530 <flatcc_json_printer_int32_field@@Base+0x18c>
   34454:	ldr	r2, [r0, #20]
   34458:	ldr	r3, [r0, #16]
   3445c:	cmp	r2, r3
   34460:	bcc	34470 <flatcc_json_printer_int32_field@@Base+0xcc>
   34464:	ldr	r3, [r0, #44]	; 0x2c
   34468:	mov	r1, #0
   3446c:	blx	r3
   34470:	ldr	r3, [r4, #20]
   34474:	mov	r2, #34	; 0x22
   34478:	strb	r2, [r3]
   3447c:	ldrb	r3, [r4, #26]
   34480:	ldr	r0, [r4, #20]
   34484:	cmp	r3, #0
   34488:	addeq	r0, r0, #1
   3448c:	str	r0, [r4, #20]
   34490:	add	r3, r0, r6
   34494:	ldr	r2, [r4, #16]
   34498:	cmp	r2, r3
   3449c:	bls	34590 <flatcc_json_printer_int32_field@@Base+0x1ec>
   344a0:	mov	r2, r6
   344a4:	mov	r1, r7
   344a8:	bl	14524 <memcpy@plt>
   344ac:	ldr	r3, [r4, #20]
   344b0:	add	r6, r3, r6
   344b4:	str	r6, [r4, #20]
   344b8:	ldr	r3, [r4, #20]
   344bc:	mov	r2, #34	; 0x22
   344c0:	strb	r2, [r3]
   344c4:	ldrb	r3, [r4, #26]
   344c8:	clz	r3, r3
   344cc:	lsr	r3, r3, #5
   344d0:	ldr	r1, [r4, #20]
   344d4:	add	r2, r1, r3
   344d8:	add	r2, r2, #1
   344dc:	str	r2, [r4, #20]
   344e0:	mov	r2, #58	; 0x3a
   344e4:	strb	r2, [r1, r3]
   344e8:	ldr	r3, [r4, #20]
   344ec:	mov	r2, #32
   344f0:	strb	r2, [r3]
   344f4:	ldrb	r3, [r4, #25]
   344f8:	ldr	r1, [r4, #20]
   344fc:	cmp	r3, #0
   34500:	addne	r1, r1, #1
   34504:	str	r1, [r4, #20]
   34508:	mov	r0, r5
   3450c:	bl	312dc <flatcc_json_parser_struct_as_root@@Base+0xe04>
   34510:	ldr	r3, [r4, #20]
   34514:	add	r0, r3, r0
   34518:	str	r0, [r4, #20]
   3451c:	ldrd	r4, [sp]
   34520:	ldrd	r6, [sp, #8]
   34524:	ldr	r8, [sp, #16]
   34528:	add	sp, sp, #20
   3452c:	pop	{pc}		; (ldr pc, [sp], #4)
   34530:	ldr	r3, [r0, #20]
   34534:	add	r2, r3, #1
   34538:	str	r2, [r0, #20]
   3453c:	mov	r2, #10
   34540:	strb	r2, [r3]
   34544:	ldrb	r3, [r0, #25]
   34548:	ldr	r8, [r0, #32]
   3454c:	mul	r8, r8, r3
   34550:	ldr	r0, [r0, #20]
   34554:	add	r3, r0, r8
   34558:	ldr	r2, [r4, #16]
   3455c:	cmp	r2, r3
   34560:	bcs	34574 <flatcc_json_printer_int32_field@@Base+0x1d0>
   34564:	mov	r1, r8
   34568:	mov	r0, r4
   3456c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   34570:	b	34470 <flatcc_json_printer_int32_field@@Base+0xcc>
   34574:	mov	r2, r8
   34578:	mov	r1, #32
   3457c:	bl	1459c <memset@plt>
   34580:	ldr	r3, [r4, #20]
   34584:	add	r8, r3, r8
   34588:	str	r8, [r4, #20]
   3458c:	b	34470 <flatcc_json_printer_int32_field@@Base+0xcc>
   34590:	mov	r2, r6
   34594:	mov	r1, r7
   34598:	mov	r0, r4
   3459c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   345a0:	b	344b8 <flatcc_json_printer_int32_field@@Base+0x114>

000345a4 <flatcc_json_printer_int64_field@@Base>:
   345a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   345a8:	strd	r6, [sp, #8]
   345ac:	strd	r8, [sp, #16]
   345b0:	str	sl, [sp, #24]
   345b4:	str	lr, [sp, #28]
   345b8:	ldr	r5, [sp, #32]
   345bc:	add	r2, r2, #2
   345c0:	lsl	r2, r2, #1
   345c4:	ldr	ip, [r1, #8]
   345c8:	cmp	r2, ip
   345cc:	bge	34610 <flatcc_json_printer_int64_field@@Base+0x6c>
   345d0:	ldr	ip, [r1, #4]
   345d4:	ldrh	r2, [ip, r2]
   345d8:	cmp	r2, #0
   345dc:	beq	34610 <flatcc_json_printer_int64_field@@Base+0x6c>
   345e0:	ldr	ip, [r1]
   345e4:	cmn	ip, r2
   345e8:	beq	34610 <flatcc_json_printer_int64_field@@Base+0x6c>
   345ec:	ldrd	r6, [ip, r2]
   345f0:	ldrd	r8, [sp, #40]	; 0x28
   345f4:	cmp	r9, r7
   345f8:	cmpeq	r8, r6
   345fc:	bne	34620 <flatcc_json_printer_int64_field@@Base+0x7c>
   34600:	ldrb	r2, [r0, #28]
   34604:	cmp	r2, #0
   34608:	beq	34620 <flatcc_json_printer_int64_field@@Base+0x7c>
   3460c:	b	34728 <flatcc_json_printer_int64_field@@Base+0x184>
   34610:	ldrb	r2, [r0, #29]
   34614:	cmp	r2, #0
   34618:	beq	34728 <flatcc_json_printer_int64_field@@Base+0x184>
   3461c:	ldrd	r6, [sp, #40]	; 0x28
   34620:	ldr	r2, [r1, #16]
   34624:	add	ip, r2, #1
   34628:	str	ip, [r1, #16]
   3462c:	cmp	r2, #0
   34630:	beq	34648 <flatcc_json_printer_int64_field@@Base+0xa4>
   34634:	ldr	r2, [r0, #20]
   34638:	add	r1, r2, #1
   3463c:	str	r1, [r0, #20]
   34640:	mov	r1, #44	; 0x2c
   34644:	strb	r1, [r2]
   34648:	mov	r8, r3
   3464c:	mov	r4, r0
   34650:	ldrb	r3, [r0, #25]
   34654:	cmp	r3, #0
   34658:	bne	34740 <flatcc_json_printer_int64_field@@Base+0x19c>
   3465c:	ldr	r2, [r0, #20]
   34660:	ldr	r3, [r0, #16]
   34664:	cmp	r2, r3
   34668:	bcc	34678 <flatcc_json_printer_int64_field@@Base+0xd4>
   3466c:	ldr	r3, [r0, #44]	; 0x2c
   34670:	mov	r1, #0
   34674:	blx	r3
   34678:	ldr	r3, [r4, #20]
   3467c:	mov	r2, #34	; 0x22
   34680:	strb	r2, [r3]
   34684:	ldrb	r3, [r4, #26]
   34688:	ldr	r0, [r4, #20]
   3468c:	cmp	r3, #0
   34690:	addeq	r0, r0, #1
   34694:	str	r0, [r4, #20]
   34698:	add	r3, r0, r5
   3469c:	ldr	r2, [r4, #16]
   346a0:	cmp	r2, r3
   346a4:	bls	347a0 <flatcc_json_printer_int64_field@@Base+0x1fc>
   346a8:	mov	r2, r5
   346ac:	mov	r1, r8
   346b0:	bl	14524 <memcpy@plt>
   346b4:	ldr	r3, [r4, #20]
   346b8:	add	r5, r3, r5
   346bc:	str	r5, [r4, #20]
   346c0:	ldr	r3, [r4, #20]
   346c4:	mov	r2, #34	; 0x22
   346c8:	strb	r2, [r3]
   346cc:	ldrb	r3, [r4, #26]
   346d0:	clz	r3, r3
   346d4:	lsr	r3, r3, #5
   346d8:	ldr	r1, [r4, #20]
   346dc:	add	r2, r1, r3
   346e0:	add	r2, r2, #1
   346e4:	str	r2, [r4, #20]
   346e8:	mov	r2, #58	; 0x3a
   346ec:	strb	r2, [r1, r3]
   346f0:	ldr	r3, [r4, #20]
   346f4:	mov	r2, #32
   346f8:	strb	r2, [r3]
   346fc:	ldrb	r3, [r4, #25]
   34700:	ldr	r2, [r4, #20]
   34704:	cmp	r3, #0
   34708:	addne	r2, r2, #1
   3470c:	str	r2, [r4, #20]
   34710:	mov	r0, r6
   34714:	mov	r1, r7
   34718:	bl	31314 <flatcc_json_parser_struct_as_root@@Base+0xe3c>
   3471c:	ldr	r3, [r4, #20]
   34720:	add	r0, r3, r0
   34724:	str	r0, [r4, #20]
   34728:	ldrd	r4, [sp]
   3472c:	ldrd	r6, [sp, #8]
   34730:	ldrd	r8, [sp, #16]
   34734:	ldr	sl, [sp, #24]
   34738:	add	sp, sp, #28
   3473c:	pop	{pc}		; (ldr pc, [sp], #4)
   34740:	ldr	r3, [r0, #20]
   34744:	add	r2, r3, #1
   34748:	str	r2, [r0, #20]
   3474c:	mov	r2, #10
   34750:	strb	r2, [r3]
   34754:	ldrb	r3, [r0, #25]
   34758:	ldr	r9, [r0, #32]
   3475c:	mul	r9, r9, r3
   34760:	ldr	r0, [r0, #20]
   34764:	add	r3, r0, r9
   34768:	ldr	r2, [r4, #16]
   3476c:	cmp	r2, r3
   34770:	bcs	34784 <flatcc_json_printer_int64_field@@Base+0x1e0>
   34774:	mov	r1, r9
   34778:	mov	r0, r4
   3477c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   34780:	b	34678 <flatcc_json_printer_int64_field@@Base+0xd4>
   34784:	mov	r2, r9
   34788:	mov	r1, #32
   3478c:	bl	1459c <memset@plt>
   34790:	ldr	r3, [r4, #20]
   34794:	add	r9, r3, r9
   34798:	str	r9, [r4, #20]
   3479c:	b	34678 <flatcc_json_printer_int64_field@@Base+0xd4>
   347a0:	mov	r2, r5
   347a4:	mov	r1, r8
   347a8:	mov	r0, r4
   347ac:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   347b0:	b	346c0 <flatcc_json_printer_int64_field@@Base+0x11c>

000347b4 <flatcc_json_printer_bool_field@@Base>:
   347b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   347b8:	strd	r6, [sp, #8]
   347bc:	str	r8, [sp, #16]
   347c0:	str	lr, [sp, #20]
   347c4:	ldr	r6, [sp, #24]
   347c8:	ldrb	lr, [sp, #28]
   347cc:	add	r2, r2, #2
   347d0:	lsl	r2, r2, #1
   347d4:	ldr	ip, [r1, #8]
   347d8:	cmp	r2, ip
   347dc:	bge	34818 <flatcc_json_printer_bool_field@@Base+0x64>
   347e0:	ldr	ip, [r1, #4]
   347e4:	ldrh	r2, [ip, r2]
   347e8:	cmp	r2, #0
   347ec:	beq	34818 <flatcc_json_printer_bool_field@@Base+0x64>
   347f0:	ldr	ip, [r1]
   347f4:	cmn	ip, r2
   347f8:	beq	34818 <flatcc_json_printer_bool_field@@Base+0x64>
   347fc:	ldrb	r5, [ip, r2]
   34800:	cmp	lr, r5
   34804:	bne	34828 <flatcc_json_printer_bool_field@@Base+0x74>
   34808:	ldrb	r2, [r0, #28]
   3480c:	cmp	r2, #0
   34810:	beq	34828 <flatcc_json_printer_bool_field@@Base+0x74>
   34814:	b	3492c <flatcc_json_printer_bool_field@@Base+0x178>
   34818:	ldrb	r2, [r0, #29]
   3481c:	cmp	r2, #0
   34820:	beq	3492c <flatcc_json_printer_bool_field@@Base+0x178>
   34824:	mov	r5, lr
   34828:	ldr	r2, [r1, #16]
   3482c:	add	ip, r2, #1
   34830:	str	ip, [r1, #16]
   34834:	cmp	r2, #0
   34838:	beq	34850 <flatcc_json_printer_bool_field@@Base+0x9c>
   3483c:	ldr	r2, [r0, #20]
   34840:	add	r1, r2, #1
   34844:	str	r1, [r0, #20]
   34848:	mov	r1, #44	; 0x2c
   3484c:	strb	r1, [r2]
   34850:	mov	r7, r3
   34854:	mov	r4, r0
   34858:	ldrb	r3, [r0, #25]
   3485c:	cmp	r3, #0
   34860:	bne	34940 <flatcc_json_printer_bool_field@@Base+0x18c>
   34864:	ldr	r2, [r0, #20]
   34868:	ldr	r3, [r0, #16]
   3486c:	cmp	r2, r3
   34870:	bcc	34880 <flatcc_json_printer_bool_field@@Base+0xcc>
   34874:	ldr	r3, [r0, #44]	; 0x2c
   34878:	mov	r1, #0
   3487c:	blx	r3
   34880:	ldr	r3, [r4, #20]
   34884:	mov	r2, #34	; 0x22
   34888:	strb	r2, [r3]
   3488c:	ldrb	r3, [r4, #26]
   34890:	ldr	r0, [r4, #20]
   34894:	cmp	r3, #0
   34898:	addeq	r0, r0, #1
   3489c:	str	r0, [r4, #20]
   348a0:	add	r3, r0, r6
   348a4:	ldr	r2, [r4, #16]
   348a8:	cmp	r2, r3
   348ac:	bls	349a0 <flatcc_json_printer_bool_field@@Base+0x1ec>
   348b0:	mov	r2, r6
   348b4:	mov	r1, r7
   348b8:	bl	14524 <memcpy@plt>
   348bc:	ldr	r3, [r4, #20]
   348c0:	add	r6, r3, r6
   348c4:	str	r6, [r4, #20]
   348c8:	ldr	r3, [r4, #20]
   348cc:	mov	r2, #34	; 0x22
   348d0:	strb	r2, [r3]
   348d4:	ldrb	r3, [r4, #26]
   348d8:	clz	r3, r3
   348dc:	lsr	r3, r3, #5
   348e0:	ldr	r1, [r4, #20]
   348e4:	add	r2, r1, r3
   348e8:	add	r2, r2, #1
   348ec:	str	r2, [r4, #20]
   348f0:	mov	r2, #58	; 0x3a
   348f4:	strb	r2, [r1, r3]
   348f8:	ldr	r3, [r4, #20]
   348fc:	mov	r2, #32
   34900:	strb	r2, [r3]
   34904:	ldrb	r3, [r4, #25]
   34908:	ldr	r1, [r4, #20]
   3490c:	cmp	r3, #0
   34910:	addne	r1, r1, #1
   34914:	str	r1, [r4, #20]
   34918:	mov	r0, r5
   3491c:	bl	31b08 <flatcc_json_parser_struct_as_root@@Base+0x1630>
   34920:	ldr	r3, [r4, #20]
   34924:	add	r0, r3, r0
   34928:	str	r0, [r4, #20]
   3492c:	ldrd	r4, [sp]
   34930:	ldrd	r6, [sp, #8]
   34934:	ldr	r8, [sp, #16]
   34938:	add	sp, sp, #20
   3493c:	pop	{pc}		; (ldr pc, [sp], #4)
   34940:	ldr	r3, [r0, #20]
   34944:	add	r2, r3, #1
   34948:	str	r2, [r0, #20]
   3494c:	mov	r2, #10
   34950:	strb	r2, [r3]
   34954:	ldrb	r3, [r0, #25]
   34958:	ldr	r8, [r0, #32]
   3495c:	mul	r8, r8, r3
   34960:	ldr	r0, [r0, #20]
   34964:	add	r3, r0, r8
   34968:	ldr	r2, [r4, #16]
   3496c:	cmp	r2, r3
   34970:	bcs	34984 <flatcc_json_printer_bool_field@@Base+0x1d0>
   34974:	mov	r1, r8
   34978:	mov	r0, r4
   3497c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   34980:	b	34880 <flatcc_json_printer_bool_field@@Base+0xcc>
   34984:	mov	r2, r8
   34988:	mov	r1, #32
   3498c:	bl	1459c <memset@plt>
   34990:	ldr	r3, [r4, #20]
   34994:	add	r8, r3, r8
   34998:	str	r8, [r4, #20]
   3499c:	b	34880 <flatcc_json_printer_bool_field@@Base+0xcc>
   349a0:	mov	r2, r6
   349a4:	mov	r1, r7
   349a8:	mov	r0, r4
   349ac:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   349b0:	b	348c8 <flatcc_json_printer_bool_field@@Base+0x114>

000349b4 <flatcc_json_printer_float_field@@Base>:
   349b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   349b8:	strd	r6, [sp, #8]
   349bc:	str	r8, [sp, #16]
   349c0:	str	lr, [sp, #20]
   349c4:	vpush	{d8}
   349c8:	ldr	r5, [sp, #32]
   349cc:	add	r2, r2, #2
   349d0:	lsl	r2, r2, #1
   349d4:	ldr	ip, [r1, #8]
   349d8:	cmp	r2, ip
   349dc:	bge	34a1c <flatcc_json_printer_float_field@@Base+0x68>
   349e0:	ldr	ip, [r1, #4]
   349e4:	ldrh	ip, [ip, r2]
   349e8:	cmp	ip, #0
   349ec:	beq	34a1c <flatcc_json_printer_float_field@@Base+0x68>
   349f0:	ldr	r2, [r1]
   349f4:	adds	r2, r2, ip
   349f8:	beq	34a1c <flatcc_json_printer_float_field@@Base+0x68>
   349fc:	vldr	s16, [r2]
   34a00:	vcmp.f32	s0, s16
   34a04:	vmrs	APSR_nzcv, fpscr
   34a08:	bne	34a2c <flatcc_json_printer_float_field@@Base+0x78>
   34a0c:	ldrb	r2, [r0, #28]
   34a10:	cmp	r2, #0
   34a14:	beq	34a2c <flatcc_json_printer_float_field@@Base+0x78>
   34a18:	b	34b30 <flatcc_json_printer_float_field@@Base+0x17c>
   34a1c:	ldrb	r2, [r0, #29]
   34a20:	cmp	r2, #0
   34a24:	beq	34b30 <flatcc_json_printer_float_field@@Base+0x17c>
   34a28:	vmov.f32	s16, s0
   34a2c:	ldr	r2, [r1, #16]
   34a30:	add	ip, r2, #1
   34a34:	str	ip, [r1, #16]
   34a38:	cmp	r2, #0
   34a3c:	beq	34a54 <flatcc_json_printer_float_field@@Base+0xa0>
   34a40:	ldr	r2, [r0, #20]
   34a44:	add	r1, r2, #1
   34a48:	str	r1, [r0, #20]
   34a4c:	mov	r1, #44	; 0x2c
   34a50:	strb	r1, [r2]
   34a54:	mov	r6, r3
   34a58:	mov	r4, r0
   34a5c:	ldrb	r3, [r0, #25]
   34a60:	cmp	r3, #0
   34a64:	bne	34b48 <flatcc_json_printer_float_field@@Base+0x194>
   34a68:	ldr	r2, [r0, #20]
   34a6c:	ldr	r3, [r0, #16]
   34a70:	cmp	r2, r3
   34a74:	bcc	34a84 <flatcc_json_printer_float_field@@Base+0xd0>
   34a78:	ldr	r3, [r0, #44]	; 0x2c
   34a7c:	mov	r1, #0
   34a80:	blx	r3
   34a84:	ldr	r3, [r4, #20]
   34a88:	mov	r2, #34	; 0x22
   34a8c:	strb	r2, [r3]
   34a90:	ldrb	r3, [r4, #26]
   34a94:	ldr	r0, [r4, #20]
   34a98:	cmp	r3, #0
   34a9c:	addeq	r0, r0, #1
   34aa0:	str	r0, [r4, #20]
   34aa4:	add	r3, r0, r5
   34aa8:	ldr	r2, [r4, #16]
   34aac:	cmp	r2, r3
   34ab0:	bls	34ba8 <flatcc_json_printer_float_field@@Base+0x1f4>
   34ab4:	mov	r2, r5
   34ab8:	mov	r1, r6
   34abc:	bl	14524 <memcpy@plt>
   34ac0:	ldr	r3, [r4, #20]
   34ac4:	add	r5, r3, r5
   34ac8:	str	r5, [r4, #20]
   34acc:	ldr	r3, [r4, #20]
   34ad0:	mov	r2, #34	; 0x22
   34ad4:	strb	r2, [r3]
   34ad8:	ldrb	r3, [r4, #26]
   34adc:	clz	r3, r3
   34ae0:	lsr	r3, r3, #5
   34ae4:	ldr	r1, [r4, #20]
   34ae8:	add	r2, r1, r3
   34aec:	add	r2, r2, #1
   34af0:	str	r2, [r4, #20]
   34af4:	mov	r2, #58	; 0x3a
   34af8:	strb	r2, [r1, r3]
   34afc:	ldr	r3, [r4, #20]
   34b00:	mov	r2, #32
   34b04:	strb	r2, [r3]
   34b08:	ldrb	r3, [r4, #25]
   34b0c:	ldr	r0, [r4, #20]
   34b10:	cmp	r3, #0
   34b14:	addne	r0, r0, #1
   34b18:	str	r0, [r4, #20]
   34b1c:	vcvt.f64.f32	d0, s16
   34b20:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   34b24:	ldr	r3, [r4, #20]
   34b28:	add	r0, r3, r0
   34b2c:	str	r0, [r4, #20]
   34b30:	vpop	{d8}
   34b34:	ldrd	r4, [sp]
   34b38:	ldrd	r6, [sp, #8]
   34b3c:	ldr	r8, [sp, #16]
   34b40:	add	sp, sp, #20
   34b44:	pop	{pc}		; (ldr pc, [sp], #4)
   34b48:	ldr	r3, [r0, #20]
   34b4c:	add	r2, r3, #1
   34b50:	str	r2, [r0, #20]
   34b54:	mov	r2, #10
   34b58:	strb	r2, [r3]
   34b5c:	ldrb	r3, [r0, #25]
   34b60:	ldr	r7, [r0, #32]
   34b64:	mul	r7, r7, r3
   34b68:	ldr	r0, [r0, #20]
   34b6c:	add	r3, r0, r7
   34b70:	ldr	r2, [r4, #16]
   34b74:	cmp	r2, r3
   34b78:	bcs	34b8c <flatcc_json_printer_float_field@@Base+0x1d8>
   34b7c:	mov	r1, r7
   34b80:	mov	r0, r4
   34b84:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   34b88:	b	34a84 <flatcc_json_printer_float_field@@Base+0xd0>
   34b8c:	mov	r2, r7
   34b90:	mov	r1, #32
   34b94:	bl	1459c <memset@plt>
   34b98:	ldr	r3, [r4, #20]
   34b9c:	add	r7, r3, r7
   34ba0:	str	r7, [r4, #20]
   34ba4:	b	34a84 <flatcc_json_printer_float_field@@Base+0xd0>
   34ba8:	mov	r2, r5
   34bac:	mov	r1, r6
   34bb0:	mov	r0, r4
   34bb4:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   34bb8:	b	34acc <flatcc_json_printer_float_field@@Base+0x118>

00034bbc <flatcc_json_printer_double_field@@Base>:
   34bbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34bc0:	strd	r6, [sp, #8]
   34bc4:	str	r8, [sp, #16]
   34bc8:	str	lr, [sp, #20]
   34bcc:	vpush	{d8}
   34bd0:	ldr	r5, [sp, #32]
   34bd4:	add	r2, r2, #2
   34bd8:	lsl	r2, r2, #1
   34bdc:	ldr	ip, [r1, #8]
   34be0:	cmp	r2, ip
   34be4:	bge	34c24 <flatcc_json_printer_double_field@@Base+0x68>
   34be8:	ldr	ip, [r1, #4]
   34bec:	ldrh	ip, [ip, r2]
   34bf0:	cmp	ip, #0
   34bf4:	beq	34c24 <flatcc_json_printer_double_field@@Base+0x68>
   34bf8:	ldr	r2, [r1]
   34bfc:	adds	r2, r2, ip
   34c00:	beq	34c24 <flatcc_json_printer_double_field@@Base+0x68>
   34c04:	vldr	d8, [r2]
   34c08:	vcmp.f64	d0, d8
   34c0c:	vmrs	APSR_nzcv, fpscr
   34c10:	bne	34c34 <flatcc_json_printer_double_field@@Base+0x78>
   34c14:	ldrb	r2, [r0, #28]
   34c18:	cmp	r2, #0
   34c1c:	beq	34c34 <flatcc_json_printer_double_field@@Base+0x78>
   34c20:	b	34d38 <flatcc_json_printer_double_field@@Base+0x17c>
   34c24:	ldrb	r2, [r0, #29]
   34c28:	cmp	r2, #0
   34c2c:	beq	34d38 <flatcc_json_printer_double_field@@Base+0x17c>
   34c30:	vmov.f64	d8, d0
   34c34:	ldr	r2, [r1, #16]
   34c38:	add	ip, r2, #1
   34c3c:	str	ip, [r1, #16]
   34c40:	cmp	r2, #0
   34c44:	beq	34c5c <flatcc_json_printer_double_field@@Base+0xa0>
   34c48:	ldr	r2, [r0, #20]
   34c4c:	add	r1, r2, #1
   34c50:	str	r1, [r0, #20]
   34c54:	mov	r1, #44	; 0x2c
   34c58:	strb	r1, [r2]
   34c5c:	mov	r6, r3
   34c60:	mov	r4, r0
   34c64:	ldrb	r3, [r0, #25]
   34c68:	cmp	r3, #0
   34c6c:	bne	34d50 <flatcc_json_printer_double_field@@Base+0x194>
   34c70:	ldr	r2, [r0, #20]
   34c74:	ldr	r3, [r0, #16]
   34c78:	cmp	r2, r3
   34c7c:	bcc	34c8c <flatcc_json_printer_double_field@@Base+0xd0>
   34c80:	ldr	r3, [r0, #44]	; 0x2c
   34c84:	mov	r1, #0
   34c88:	blx	r3
   34c8c:	ldr	r3, [r4, #20]
   34c90:	mov	r2, #34	; 0x22
   34c94:	strb	r2, [r3]
   34c98:	ldrb	r3, [r4, #26]
   34c9c:	ldr	r0, [r4, #20]
   34ca0:	cmp	r3, #0
   34ca4:	addeq	r0, r0, #1
   34ca8:	str	r0, [r4, #20]
   34cac:	add	r3, r0, r5
   34cb0:	ldr	r2, [r4, #16]
   34cb4:	cmp	r2, r3
   34cb8:	bls	34db0 <flatcc_json_printer_double_field@@Base+0x1f4>
   34cbc:	mov	r2, r5
   34cc0:	mov	r1, r6
   34cc4:	bl	14524 <memcpy@plt>
   34cc8:	ldr	r3, [r4, #20]
   34ccc:	add	r5, r3, r5
   34cd0:	str	r5, [r4, #20]
   34cd4:	ldr	r3, [r4, #20]
   34cd8:	mov	r2, #34	; 0x22
   34cdc:	strb	r2, [r3]
   34ce0:	ldrb	r3, [r4, #26]
   34ce4:	clz	r3, r3
   34ce8:	lsr	r3, r3, #5
   34cec:	ldr	r1, [r4, #20]
   34cf0:	add	r2, r1, r3
   34cf4:	add	r2, r2, #1
   34cf8:	str	r2, [r4, #20]
   34cfc:	mov	r2, #58	; 0x3a
   34d00:	strb	r2, [r1, r3]
   34d04:	ldr	r3, [r4, #20]
   34d08:	mov	r2, #32
   34d0c:	strb	r2, [r3]
   34d10:	ldrb	r3, [r4, #25]
   34d14:	ldr	r0, [r4, #20]
   34d18:	cmp	r3, #0
   34d1c:	addne	r0, r0, #1
   34d20:	str	r0, [r4, #20]
   34d24:	vmov.f64	d0, d8
   34d28:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   34d2c:	ldr	r3, [r4, #20]
   34d30:	add	r0, r3, r0
   34d34:	str	r0, [r4, #20]
   34d38:	vpop	{d8}
   34d3c:	ldrd	r4, [sp]
   34d40:	ldrd	r6, [sp, #8]
   34d44:	ldr	r8, [sp, #16]
   34d48:	add	sp, sp, #20
   34d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   34d50:	ldr	r3, [r0, #20]
   34d54:	add	r2, r3, #1
   34d58:	str	r2, [r0, #20]
   34d5c:	mov	r2, #10
   34d60:	strb	r2, [r3]
   34d64:	ldrb	r3, [r0, #25]
   34d68:	ldr	r7, [r0, #32]
   34d6c:	mul	r7, r7, r3
   34d70:	ldr	r0, [r0, #20]
   34d74:	add	r3, r0, r7
   34d78:	ldr	r2, [r4, #16]
   34d7c:	cmp	r2, r3
   34d80:	bcs	34d94 <flatcc_json_printer_double_field@@Base+0x1d8>
   34d84:	mov	r1, r7
   34d88:	mov	r0, r4
   34d8c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   34d90:	b	34c8c <flatcc_json_printer_double_field@@Base+0xd0>
   34d94:	mov	r2, r7
   34d98:	mov	r1, #32
   34d9c:	bl	1459c <memset@plt>
   34da0:	ldr	r3, [r4, #20]
   34da4:	add	r7, r3, r7
   34da8:	str	r7, [r4, #20]
   34dac:	b	34c8c <flatcc_json_printer_double_field@@Base+0xd0>
   34db0:	mov	r2, r5
   34db4:	mov	r1, r6
   34db8:	mov	r0, r4
   34dbc:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   34dc0:	b	34cd4 <flatcc_json_printer_double_field@@Base+0x118>

00034dc4 <flatcc_json_printer_uint8_enum_field@@Base>:
   34dc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34dc8:	strd	r6, [sp, #8]
   34dcc:	str	r8, [sp, #16]
   34dd0:	str	lr, [sp, #20]
   34dd4:	ldr	r6, [sp, #24]
   34dd8:	ldrb	lr, [sp, #28]
   34ddc:	add	r2, r2, #2
   34de0:	lsl	r2, r2, #1
   34de4:	ldr	ip, [r1, #8]
   34de8:	cmp	r2, ip
   34dec:	bge	34e28 <flatcc_json_printer_uint8_enum_field@@Base+0x64>
   34df0:	ldr	ip, [r1, #4]
   34df4:	ldrh	r2, [ip, r2]
   34df8:	cmp	r2, #0
   34dfc:	beq	34e28 <flatcc_json_printer_uint8_enum_field@@Base+0x64>
   34e00:	ldr	ip, [r1]
   34e04:	cmn	ip, r2
   34e08:	beq	34e28 <flatcc_json_printer_uint8_enum_field@@Base+0x64>
   34e0c:	ldrb	r5, [ip, r2]
   34e10:	cmp	lr, r5
   34e14:	bne	34e38 <flatcc_json_printer_uint8_enum_field@@Base+0x74>
   34e18:	ldrb	r2, [r0, #28]
   34e1c:	cmp	r2, #0
   34e20:	beq	34e38 <flatcc_json_printer_uint8_enum_field@@Base+0x74>
   34e24:	b	34f44 <flatcc_json_printer_uint8_enum_field@@Base+0x180>
   34e28:	ldrb	r2, [r0, #29]
   34e2c:	cmp	r2, #0
   34e30:	beq	34f44 <flatcc_json_printer_uint8_enum_field@@Base+0x180>
   34e34:	mov	r5, lr
   34e38:	ldr	r2, [r1, #16]
   34e3c:	add	ip, r2, #1
   34e40:	str	ip, [r1, #16]
   34e44:	cmp	r2, #0
   34e48:	beq	34e60 <flatcc_json_printer_uint8_enum_field@@Base+0x9c>
   34e4c:	ldr	r2, [r0, #20]
   34e50:	add	r1, r2, #1
   34e54:	str	r1, [r0, #20]
   34e58:	mov	r1, #44	; 0x2c
   34e5c:	strb	r1, [r2]
   34e60:	mov	r7, r3
   34e64:	mov	r4, r0
   34e68:	ldrb	r3, [r0, #25]
   34e6c:	cmp	r3, #0
   34e70:	bne	34f58 <flatcc_json_printer_uint8_enum_field@@Base+0x194>
   34e74:	ldr	r2, [r0, #20]
   34e78:	ldr	r3, [r0, #16]
   34e7c:	cmp	r2, r3
   34e80:	bcc	34e90 <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   34e84:	ldr	r3, [r0, #44]	; 0x2c
   34e88:	mov	r1, #0
   34e8c:	blx	r3
   34e90:	ldr	r3, [r4, #20]
   34e94:	mov	r2, #34	; 0x22
   34e98:	strb	r2, [r3]
   34e9c:	ldrb	r3, [r4, #26]
   34ea0:	ldr	r0, [r4, #20]
   34ea4:	cmp	r3, #0
   34ea8:	addeq	r0, r0, #1
   34eac:	str	r0, [r4, #20]
   34eb0:	add	r3, r0, r6
   34eb4:	ldr	r2, [r4, #16]
   34eb8:	cmp	r2, r3
   34ebc:	bls	34fb8 <flatcc_json_printer_uint8_enum_field@@Base+0x1f4>
   34ec0:	mov	r2, r6
   34ec4:	mov	r1, r7
   34ec8:	bl	14524 <memcpy@plt>
   34ecc:	ldr	r3, [r4, #20]
   34ed0:	add	r6, r3, r6
   34ed4:	str	r6, [r4, #20]
   34ed8:	ldr	r3, [r4, #20]
   34edc:	mov	r2, #34	; 0x22
   34ee0:	strb	r2, [r3]
   34ee4:	ldrb	r3, [r4, #26]
   34ee8:	clz	r3, r3
   34eec:	lsr	r3, r3, #5
   34ef0:	ldr	r1, [r4, #20]
   34ef4:	add	r2, r1, r3
   34ef8:	add	r2, r2, #1
   34efc:	str	r2, [r4, #20]
   34f00:	mov	r2, #58	; 0x3a
   34f04:	strb	r2, [r1, r3]
   34f08:	ldr	r3, [r4, #20]
   34f0c:	mov	r2, #32
   34f10:	strb	r2, [r3]
   34f14:	ldrb	r3, [r4, #25]
   34f18:	ldr	r1, [r4, #20]
   34f1c:	cmp	r3, #0
   34f20:	addne	r1, r1, #1
   34f24:	str	r1, [r4, #20]
   34f28:	ldrb	r3, [r4, #27]
   34f2c:	cmp	r3, #0
   34f30:	bne	34fcc <flatcc_json_printer_uint8_enum_field@@Base+0x208>
   34f34:	mov	r1, r5
   34f38:	mov	r0, r4
   34f3c:	ldr	r3, [sp, #32]
   34f40:	blx	r3
   34f44:	ldrd	r4, [sp]
   34f48:	ldrd	r6, [sp, #8]
   34f4c:	ldr	r8, [sp, #16]
   34f50:	add	sp, sp, #20
   34f54:	pop	{pc}		; (ldr pc, [sp], #4)
   34f58:	ldr	r3, [r0, #20]
   34f5c:	add	r2, r3, #1
   34f60:	str	r2, [r0, #20]
   34f64:	mov	r2, #10
   34f68:	strb	r2, [r3]
   34f6c:	ldrb	r3, [r0, #25]
   34f70:	ldr	r8, [r0, #32]
   34f74:	mul	r8, r8, r3
   34f78:	ldr	r0, [r0, #20]
   34f7c:	add	r3, r0, r8
   34f80:	ldr	r2, [r4, #16]
   34f84:	cmp	r2, r3
   34f88:	bcs	34f9c <flatcc_json_printer_uint8_enum_field@@Base+0x1d8>
   34f8c:	mov	r1, r8
   34f90:	mov	r0, r4
   34f94:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   34f98:	b	34e90 <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   34f9c:	mov	r2, r8
   34fa0:	mov	r1, #32
   34fa4:	bl	1459c <memset@plt>
   34fa8:	ldr	r3, [r4, #20]
   34fac:	add	r8, r3, r8
   34fb0:	str	r8, [r4, #20]
   34fb4:	b	34e90 <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   34fb8:	mov	r2, r6
   34fbc:	mov	r1, r7
   34fc0:	mov	r0, r4
   34fc4:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   34fc8:	b	34ed8 <flatcc_json_printer_uint8_enum_field@@Base+0x114>
   34fcc:	mov	r0, r5
   34fd0:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   34fd4:	ldr	r3, [r4, #20]
   34fd8:	add	r0, r3, r0
   34fdc:	str	r0, [r4, #20]
   34fe0:	b	34f44 <flatcc_json_printer_uint8_enum_field@@Base+0x180>

00034fe4 <flatcc_json_printer_uint16_enum_field@@Base>:
   34fe4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34fe8:	strd	r6, [sp, #8]
   34fec:	str	r8, [sp, #16]
   34ff0:	str	lr, [sp, #20]
   34ff4:	ldr	r6, [sp, #24]
   34ff8:	ldrh	lr, [sp, #28]
   34ffc:	add	r2, r2, #2
   35000:	lsl	r2, r2, #1
   35004:	ldr	ip, [r1, #8]
   35008:	cmp	r2, ip
   3500c:	bge	35048 <flatcc_json_printer_uint16_enum_field@@Base+0x64>
   35010:	ldr	ip, [r1, #4]
   35014:	ldrh	r2, [ip, r2]
   35018:	cmp	r2, #0
   3501c:	beq	35048 <flatcc_json_printer_uint16_enum_field@@Base+0x64>
   35020:	ldr	ip, [r1]
   35024:	cmn	ip, r2
   35028:	beq	35048 <flatcc_json_printer_uint16_enum_field@@Base+0x64>
   3502c:	ldrh	r5, [ip, r2]
   35030:	cmp	lr, r5
   35034:	bne	35058 <flatcc_json_printer_uint16_enum_field@@Base+0x74>
   35038:	ldrb	r2, [r0, #28]
   3503c:	cmp	r2, #0
   35040:	beq	35058 <flatcc_json_printer_uint16_enum_field@@Base+0x74>
   35044:	b	35164 <flatcc_json_printer_uint16_enum_field@@Base+0x180>
   35048:	ldrb	r2, [r0, #29]
   3504c:	cmp	r2, #0
   35050:	beq	35164 <flatcc_json_printer_uint16_enum_field@@Base+0x180>
   35054:	mov	r5, lr
   35058:	ldr	r2, [r1, #16]
   3505c:	add	ip, r2, #1
   35060:	str	ip, [r1, #16]
   35064:	cmp	r2, #0
   35068:	beq	35080 <flatcc_json_printer_uint16_enum_field@@Base+0x9c>
   3506c:	ldr	r2, [r0, #20]
   35070:	add	r1, r2, #1
   35074:	str	r1, [r0, #20]
   35078:	mov	r1, #44	; 0x2c
   3507c:	strb	r1, [r2]
   35080:	mov	r7, r3
   35084:	mov	r4, r0
   35088:	ldrb	r3, [r0, #25]
   3508c:	cmp	r3, #0
   35090:	bne	35178 <flatcc_json_printer_uint16_enum_field@@Base+0x194>
   35094:	ldr	r2, [r0, #20]
   35098:	ldr	r3, [r0, #16]
   3509c:	cmp	r2, r3
   350a0:	bcc	350b0 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   350a4:	ldr	r3, [r0, #44]	; 0x2c
   350a8:	mov	r1, #0
   350ac:	blx	r3
   350b0:	ldr	r3, [r4, #20]
   350b4:	mov	r2, #34	; 0x22
   350b8:	strb	r2, [r3]
   350bc:	ldrb	r3, [r4, #26]
   350c0:	ldr	r0, [r4, #20]
   350c4:	cmp	r3, #0
   350c8:	addeq	r0, r0, #1
   350cc:	str	r0, [r4, #20]
   350d0:	add	r3, r0, r6
   350d4:	ldr	r2, [r4, #16]
   350d8:	cmp	r2, r3
   350dc:	bls	351d8 <flatcc_json_printer_uint16_enum_field@@Base+0x1f4>
   350e0:	mov	r2, r6
   350e4:	mov	r1, r7
   350e8:	bl	14524 <memcpy@plt>
   350ec:	ldr	r3, [r4, #20]
   350f0:	add	r6, r3, r6
   350f4:	str	r6, [r4, #20]
   350f8:	ldr	r3, [r4, #20]
   350fc:	mov	r2, #34	; 0x22
   35100:	strb	r2, [r3]
   35104:	ldrb	r3, [r4, #26]
   35108:	clz	r3, r3
   3510c:	lsr	r3, r3, #5
   35110:	ldr	r1, [r4, #20]
   35114:	add	r2, r1, r3
   35118:	add	r2, r2, #1
   3511c:	str	r2, [r4, #20]
   35120:	mov	r2, #58	; 0x3a
   35124:	strb	r2, [r1, r3]
   35128:	ldr	r3, [r4, #20]
   3512c:	mov	r2, #32
   35130:	strb	r2, [r3]
   35134:	ldrb	r3, [r4, #25]
   35138:	ldr	r1, [r4, #20]
   3513c:	cmp	r3, #0
   35140:	addne	r1, r1, #1
   35144:	str	r1, [r4, #20]
   35148:	ldrb	r3, [r4, #27]
   3514c:	cmp	r3, #0
   35150:	bne	351ec <flatcc_json_printer_uint16_enum_field@@Base+0x208>
   35154:	mov	r1, r5
   35158:	mov	r0, r4
   3515c:	ldr	r3, [sp, #32]
   35160:	blx	r3
   35164:	ldrd	r4, [sp]
   35168:	ldrd	r6, [sp, #8]
   3516c:	ldr	r8, [sp, #16]
   35170:	add	sp, sp, #20
   35174:	pop	{pc}		; (ldr pc, [sp], #4)
   35178:	ldr	r3, [r0, #20]
   3517c:	add	r2, r3, #1
   35180:	str	r2, [r0, #20]
   35184:	mov	r2, #10
   35188:	strb	r2, [r3]
   3518c:	ldrb	r3, [r0, #25]
   35190:	ldr	r8, [r0, #32]
   35194:	mul	r8, r8, r3
   35198:	ldr	r0, [r0, #20]
   3519c:	add	r3, r0, r8
   351a0:	ldr	r2, [r4, #16]
   351a4:	cmp	r2, r3
   351a8:	bcs	351bc <flatcc_json_printer_uint16_enum_field@@Base+0x1d8>
   351ac:	mov	r1, r8
   351b0:	mov	r0, r4
   351b4:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   351b8:	b	350b0 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   351bc:	mov	r2, r8
   351c0:	mov	r1, #32
   351c4:	bl	1459c <memset@plt>
   351c8:	ldr	r3, [r4, #20]
   351cc:	add	r8, r3, r8
   351d0:	str	r8, [r4, #20]
   351d4:	b	350b0 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   351d8:	mov	r2, r6
   351dc:	mov	r1, r7
   351e0:	mov	r0, r4
   351e4:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   351e8:	b	350f8 <flatcc_json_printer_uint16_enum_field@@Base+0x114>
   351ec:	mov	r0, r5
   351f0:	bl	30688 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   351f4:	ldr	r3, [r4, #20]
   351f8:	add	r0, r3, r0
   351fc:	str	r0, [r4, #20]
   35200:	b	35164 <flatcc_json_printer_uint16_enum_field@@Base+0x180>

00035204 <flatcc_json_printer_uint32_enum_field@@Base>:
   35204:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35208:	strd	r6, [sp, #8]
   3520c:	str	r8, [sp, #16]
   35210:	str	lr, [sp, #20]
   35214:	ldr	r6, [sp, #24]
   35218:	add	r2, r2, #2
   3521c:	lsl	r2, r2, #1
   35220:	ldr	ip, [r1, #8]
   35224:	cmp	r2, ip
   35228:	bge	35268 <flatcc_json_printer_uint32_enum_field@@Base+0x64>
   3522c:	ldr	ip, [r1, #4]
   35230:	ldrh	r2, [ip, r2]
   35234:	cmp	r2, #0
   35238:	beq	35268 <flatcc_json_printer_uint32_enum_field@@Base+0x64>
   3523c:	ldr	ip, [r1]
   35240:	cmn	ip, r2
   35244:	beq	35268 <flatcc_json_printer_uint32_enum_field@@Base+0x64>
   35248:	ldr	r5, [ip, r2]
   3524c:	ldr	r2, [sp, #28]
   35250:	cmp	r2, r5
   35254:	bne	35278 <flatcc_json_printer_uint32_enum_field@@Base+0x74>
   35258:	ldrb	r2, [r0, #28]
   3525c:	cmp	r2, #0
   35260:	beq	35278 <flatcc_json_printer_uint32_enum_field@@Base+0x74>
   35264:	b	35384 <flatcc_json_printer_uint32_enum_field@@Base+0x180>
   35268:	ldrb	r2, [r0, #29]
   3526c:	cmp	r2, #0
   35270:	beq	35384 <flatcc_json_printer_uint32_enum_field@@Base+0x180>
   35274:	ldr	r5, [sp, #28]
   35278:	ldr	r2, [r1, #16]
   3527c:	add	ip, r2, #1
   35280:	str	ip, [r1, #16]
   35284:	cmp	r2, #0
   35288:	beq	352a0 <flatcc_json_printer_uint32_enum_field@@Base+0x9c>
   3528c:	ldr	r2, [r0, #20]
   35290:	add	r1, r2, #1
   35294:	str	r1, [r0, #20]
   35298:	mov	r1, #44	; 0x2c
   3529c:	strb	r1, [r2]
   352a0:	mov	r7, r3
   352a4:	mov	r4, r0
   352a8:	ldrb	r3, [r0, #25]
   352ac:	cmp	r3, #0
   352b0:	bne	35398 <flatcc_json_printer_uint32_enum_field@@Base+0x194>
   352b4:	ldr	r2, [r0, #20]
   352b8:	ldr	r3, [r0, #16]
   352bc:	cmp	r2, r3
   352c0:	bcc	352d0 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   352c4:	ldr	r3, [r0, #44]	; 0x2c
   352c8:	mov	r1, #0
   352cc:	blx	r3
   352d0:	ldr	r3, [r4, #20]
   352d4:	mov	r2, #34	; 0x22
   352d8:	strb	r2, [r3]
   352dc:	ldrb	r3, [r4, #26]
   352e0:	ldr	r0, [r4, #20]
   352e4:	cmp	r3, #0
   352e8:	addeq	r0, r0, #1
   352ec:	str	r0, [r4, #20]
   352f0:	add	r3, r0, r6
   352f4:	ldr	r2, [r4, #16]
   352f8:	cmp	r2, r3
   352fc:	bls	353f8 <flatcc_json_printer_uint32_enum_field@@Base+0x1f4>
   35300:	mov	r2, r6
   35304:	mov	r1, r7
   35308:	bl	14524 <memcpy@plt>
   3530c:	ldr	r3, [r4, #20]
   35310:	add	r6, r3, r6
   35314:	str	r6, [r4, #20]
   35318:	ldr	r3, [r4, #20]
   3531c:	mov	r2, #34	; 0x22
   35320:	strb	r2, [r3]
   35324:	ldrb	r3, [r4, #26]
   35328:	clz	r3, r3
   3532c:	lsr	r3, r3, #5
   35330:	ldr	r1, [r4, #20]
   35334:	add	r2, r1, r3
   35338:	add	r2, r2, #1
   3533c:	str	r2, [r4, #20]
   35340:	mov	r2, #58	; 0x3a
   35344:	strb	r2, [r1, r3]
   35348:	ldr	r3, [r4, #20]
   3534c:	mov	r2, #32
   35350:	strb	r2, [r3]
   35354:	ldrb	r3, [r4, #25]
   35358:	ldr	r1, [r4, #20]
   3535c:	cmp	r3, #0
   35360:	addne	r1, r1, #1
   35364:	str	r1, [r4, #20]
   35368:	ldrb	r3, [r4, #27]
   3536c:	cmp	r3, #0
   35370:	bne	3540c <flatcc_json_printer_uint32_enum_field@@Base+0x208>
   35374:	mov	r1, r5
   35378:	mov	r0, r4
   3537c:	ldr	r3, [sp, #32]
   35380:	blx	r3
   35384:	ldrd	r4, [sp]
   35388:	ldrd	r6, [sp, #8]
   3538c:	ldr	r8, [sp, #16]
   35390:	add	sp, sp, #20
   35394:	pop	{pc}		; (ldr pc, [sp], #4)
   35398:	ldr	r3, [r0, #20]
   3539c:	add	r2, r3, #1
   353a0:	str	r2, [r0, #20]
   353a4:	mov	r2, #10
   353a8:	strb	r2, [r3]
   353ac:	ldrb	r3, [r0, #25]
   353b0:	ldr	r8, [r0, #32]
   353b4:	mul	r8, r8, r3
   353b8:	ldr	r0, [r0, #20]
   353bc:	add	r3, r0, r8
   353c0:	ldr	r2, [r4, #16]
   353c4:	cmp	r2, r3
   353c8:	bcs	353dc <flatcc_json_printer_uint32_enum_field@@Base+0x1d8>
   353cc:	mov	r1, r8
   353d0:	mov	r0, r4
   353d4:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   353d8:	b	352d0 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   353dc:	mov	r2, r8
   353e0:	mov	r1, #32
   353e4:	bl	1459c <memset@plt>
   353e8:	ldr	r3, [r4, #20]
   353ec:	add	r8, r3, r8
   353f0:	str	r8, [r4, #20]
   353f4:	b	352d0 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   353f8:	mov	r2, r6
   353fc:	mov	r1, r7
   35400:	mov	r0, r4
   35404:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   35408:	b	35318 <flatcc_json_printer_uint32_enum_field@@Base+0x114>
   3540c:	mov	r0, r5
   35410:	bl	3081c <flatcc_json_parser_struct_as_root@@Base+0x344>
   35414:	ldr	r3, [r4, #20]
   35418:	add	r0, r3, r0
   3541c:	str	r0, [r4, #20]
   35420:	b	35384 <flatcc_json_printer_uint32_enum_field@@Base+0x180>

00035424 <flatcc_json_printer_uint64_enum_field@@Base>:
   35424:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35428:	strd	r6, [sp, #8]
   3542c:	strd	r8, [sp, #16]
   35430:	str	sl, [sp, #24]
   35434:	str	lr, [sp, #28]
   35438:	ldr	r5, [sp, #32]
   3543c:	add	r2, r2, #2
   35440:	lsl	r2, r2, #1
   35444:	ldr	ip, [r1, #8]
   35448:	cmp	r2, ip
   3544c:	bge	35490 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   35450:	ldr	ip, [r1, #4]
   35454:	ldrh	r2, [ip, r2]
   35458:	cmp	r2, #0
   3545c:	beq	35490 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   35460:	ldr	ip, [r1]
   35464:	cmn	ip, r2
   35468:	beq	35490 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   3546c:	ldrd	r6, [ip, r2]
   35470:	ldrd	r8, [sp, #40]	; 0x28
   35474:	cmp	r9, r7
   35478:	cmpeq	r8, r6
   3547c:	bne	354a0 <flatcc_json_printer_uint64_enum_field@@Base+0x7c>
   35480:	ldrb	r2, [r0, #28]
   35484:	cmp	r2, #0
   35488:	beq	354a0 <flatcc_json_printer_uint64_enum_field@@Base+0x7c>
   3548c:	b	355b0 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>
   35490:	ldrb	r2, [r0, #29]
   35494:	cmp	r2, #0
   35498:	beq	355b0 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>
   3549c:	ldrd	r6, [sp, #40]	; 0x28
   354a0:	ldr	r2, [r1, #16]
   354a4:	add	ip, r2, #1
   354a8:	str	ip, [r1, #16]
   354ac:	cmp	r2, #0
   354b0:	beq	354c8 <flatcc_json_printer_uint64_enum_field@@Base+0xa4>
   354b4:	ldr	r2, [r0, #20]
   354b8:	add	r1, r2, #1
   354bc:	str	r1, [r0, #20]
   354c0:	mov	r1, #44	; 0x2c
   354c4:	strb	r1, [r2]
   354c8:	mov	r8, r3
   354cc:	mov	r4, r0
   354d0:	ldrb	r3, [r0, #25]
   354d4:	cmp	r3, #0
   354d8:	bne	355c8 <flatcc_json_printer_uint64_enum_field@@Base+0x1a4>
   354dc:	ldr	r2, [r0, #20]
   354e0:	ldr	r3, [r0, #16]
   354e4:	cmp	r2, r3
   354e8:	bcc	354f8 <flatcc_json_printer_uint64_enum_field@@Base+0xd4>
   354ec:	ldr	r3, [r0, #44]	; 0x2c
   354f0:	mov	r1, #0
   354f4:	blx	r3
   354f8:	ldr	r3, [r4, #20]
   354fc:	mov	r2, #34	; 0x22
   35500:	strb	r2, [r3]
   35504:	ldrb	r3, [r4, #26]
   35508:	ldr	r0, [r4, #20]
   3550c:	cmp	r3, #0
   35510:	addeq	r0, r0, #1
   35514:	str	r0, [r4, #20]
   35518:	add	r3, r0, r5
   3551c:	ldr	r2, [r4, #16]
   35520:	cmp	r2, r3
   35524:	bls	35628 <flatcc_json_printer_uint64_enum_field@@Base+0x204>
   35528:	mov	r2, r5
   3552c:	mov	r1, r8
   35530:	bl	14524 <memcpy@plt>
   35534:	ldr	r3, [r4, #20]
   35538:	add	r5, r3, r5
   3553c:	str	r5, [r4, #20]
   35540:	ldr	r3, [r4, #20]
   35544:	mov	r2, #34	; 0x22
   35548:	strb	r2, [r3]
   3554c:	ldrb	r3, [r4, #26]
   35550:	clz	r3, r3
   35554:	lsr	r3, r3, #5
   35558:	ldr	r1, [r4, #20]
   3555c:	add	r2, r1, r3
   35560:	add	r2, r2, #1
   35564:	str	r2, [r4, #20]
   35568:	mov	r2, #58	; 0x3a
   3556c:	strb	r2, [r1, r3]
   35570:	ldr	r3, [r4, #20]
   35574:	mov	r2, #32
   35578:	strb	r2, [r3]
   3557c:	ldrb	r3, [r4, #25]
   35580:	ldr	r2, [r4, #20]
   35584:	cmp	r3, #0
   35588:	addne	r2, r2, #1
   3558c:	str	r2, [r4, #20]
   35590:	ldrb	r3, [r4, #27]
   35594:	cmp	r3, #0
   35598:	bne	3563c <flatcc_json_printer_uint64_enum_field@@Base+0x218>
   3559c:	mov	r2, r6
   355a0:	mov	r3, r7
   355a4:	mov	r0, r4
   355a8:	ldr	r1, [sp, #48]	; 0x30
   355ac:	blx	r1
   355b0:	ldrd	r4, [sp]
   355b4:	ldrd	r6, [sp, #8]
   355b8:	ldrd	r8, [sp, #16]
   355bc:	ldr	sl, [sp, #24]
   355c0:	add	sp, sp, #28
   355c4:	pop	{pc}		; (ldr pc, [sp], #4)
   355c8:	ldr	r3, [r0, #20]
   355cc:	add	r2, r3, #1
   355d0:	str	r2, [r0, #20]
   355d4:	mov	r2, #10
   355d8:	strb	r2, [r3]
   355dc:	ldrb	r3, [r0, #25]
   355e0:	ldr	r9, [r0, #32]
   355e4:	mul	r9, r9, r3
   355e8:	ldr	r0, [r0, #20]
   355ec:	add	r3, r0, r9
   355f0:	ldr	r2, [r4, #16]
   355f4:	cmp	r2, r3
   355f8:	bcs	3560c <flatcc_json_printer_uint64_enum_field@@Base+0x1e8>
   355fc:	mov	r1, r9
   35600:	mov	r0, r4
   35604:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   35608:	b	354f8 <flatcc_json_printer_uint64_enum_field@@Base+0xd4>
   3560c:	mov	r2, r9
   35610:	mov	r1, #32
   35614:	bl	1459c <memset@plt>
   35618:	ldr	r3, [r4, #20]
   3561c:	add	r9, r3, r9
   35620:	str	r9, [r4, #20]
   35624:	b	354f8 <flatcc_json_printer_uint64_enum_field@@Base+0xd4>
   35628:	mov	r2, r5
   3562c:	mov	r1, r8
   35630:	mov	r0, r4
   35634:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   35638:	b	35540 <flatcc_json_printer_uint64_enum_field@@Base+0x11c>
   3563c:	mov	r0, r6
   35640:	mov	r1, r7
   35644:	bl	30b80 <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   35648:	ldr	r3, [r4, #20]
   3564c:	add	r0, r3, r0
   35650:	str	r0, [r4, #20]
   35654:	b	355b0 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>

00035658 <flatcc_json_printer_int8_enum_field@@Base>:
   35658:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3565c:	strd	r6, [sp, #8]
   35660:	str	r8, [sp, #16]
   35664:	str	lr, [sp, #20]
   35668:	ldr	r6, [sp, #24]
   3566c:	ldrsb	lr, [sp, #28]
   35670:	add	r2, r2, #2
   35674:	lsl	r2, r2, #1
   35678:	ldr	ip, [r1, #8]
   3567c:	cmp	r2, ip
   35680:	bge	356bc <flatcc_json_printer_int8_enum_field@@Base+0x64>
   35684:	ldr	ip, [r1, #4]
   35688:	ldrh	r2, [ip, r2]
   3568c:	cmp	r2, #0
   35690:	beq	356bc <flatcc_json_printer_int8_enum_field@@Base+0x64>
   35694:	ldr	ip, [r1]
   35698:	cmn	ip, r2
   3569c:	beq	356bc <flatcc_json_printer_int8_enum_field@@Base+0x64>
   356a0:	ldrsb	r5, [ip, r2]
   356a4:	cmp	lr, r5
   356a8:	bne	356cc <flatcc_json_printer_int8_enum_field@@Base+0x74>
   356ac:	ldrb	r2, [r0, #28]
   356b0:	cmp	r2, #0
   356b4:	beq	356cc <flatcc_json_printer_int8_enum_field@@Base+0x74>
   356b8:	b	357d8 <flatcc_json_printer_int8_enum_field@@Base+0x180>
   356bc:	ldrb	r2, [r0, #29]
   356c0:	cmp	r2, #0
   356c4:	beq	357d8 <flatcc_json_printer_int8_enum_field@@Base+0x180>
   356c8:	mov	r5, lr
   356cc:	ldr	r2, [r1, #16]
   356d0:	add	ip, r2, #1
   356d4:	str	ip, [r1, #16]
   356d8:	cmp	r2, #0
   356dc:	beq	356f4 <flatcc_json_printer_int8_enum_field@@Base+0x9c>
   356e0:	ldr	r2, [r0, #20]
   356e4:	add	r1, r2, #1
   356e8:	str	r1, [r0, #20]
   356ec:	mov	r1, #44	; 0x2c
   356f0:	strb	r1, [r2]
   356f4:	mov	r7, r3
   356f8:	mov	r4, r0
   356fc:	ldrb	r3, [r0, #25]
   35700:	cmp	r3, #0
   35704:	bne	357ec <flatcc_json_printer_int8_enum_field@@Base+0x194>
   35708:	ldr	r2, [r0, #20]
   3570c:	ldr	r3, [r0, #16]
   35710:	cmp	r2, r3
   35714:	bcc	35724 <flatcc_json_printer_int8_enum_field@@Base+0xcc>
   35718:	ldr	r3, [r0, #44]	; 0x2c
   3571c:	mov	r1, #0
   35720:	blx	r3
   35724:	ldr	r3, [r4, #20]
   35728:	mov	r2, #34	; 0x22
   3572c:	strb	r2, [r3]
   35730:	ldrb	r3, [r4, #26]
   35734:	ldr	r0, [r4, #20]
   35738:	cmp	r3, #0
   3573c:	addeq	r0, r0, #1
   35740:	str	r0, [r4, #20]
   35744:	add	r3, r0, r6
   35748:	ldr	r2, [r4, #16]
   3574c:	cmp	r2, r3
   35750:	bls	3584c <flatcc_json_printer_int8_enum_field@@Base+0x1f4>
   35754:	mov	r2, r6
   35758:	mov	r1, r7
   3575c:	bl	14524 <memcpy@plt>
   35760:	ldr	r3, [r4, #20]
   35764:	add	r6, r3, r6
   35768:	str	r6, [r4, #20]
   3576c:	ldr	r3, [r4, #20]
   35770:	mov	r2, #34	; 0x22
   35774:	strb	r2, [r3]
   35778:	ldrb	r3, [r4, #26]
   3577c:	clz	r3, r3
   35780:	lsr	r3, r3, #5
   35784:	ldr	r1, [r4, #20]
   35788:	add	r2, r1, r3
   3578c:	add	r2, r2, #1
   35790:	str	r2, [r4, #20]
   35794:	mov	r2, #58	; 0x3a
   35798:	strb	r2, [r1, r3]
   3579c:	ldr	r3, [r4, #20]
   357a0:	mov	r2, #32
   357a4:	strb	r2, [r3]
   357a8:	ldrb	r3, [r4, #25]
   357ac:	ldr	r1, [r4, #20]
   357b0:	cmp	r3, #0
   357b4:	addne	r1, r1, #1
   357b8:	str	r1, [r4, #20]
   357bc:	ldrb	r3, [r4, #27]
   357c0:	cmp	r3, #0
   357c4:	bne	35860 <flatcc_json_printer_int8_enum_field@@Base+0x208>
   357c8:	mov	r1, r5
   357cc:	mov	r0, r4
   357d0:	ldr	r3, [sp, #32]
   357d4:	blx	r3
   357d8:	ldrd	r4, [sp]
   357dc:	ldrd	r6, [sp, #8]
   357e0:	ldr	r8, [sp, #16]
   357e4:	add	sp, sp, #20
   357e8:	pop	{pc}		; (ldr pc, [sp], #4)
   357ec:	ldr	r3, [r0, #20]
   357f0:	add	r2, r3, #1
   357f4:	str	r2, [r0, #20]
   357f8:	mov	r2, #10
   357fc:	strb	r2, [r3]
   35800:	ldrb	r3, [r0, #25]
   35804:	ldr	r8, [r0, #32]
   35808:	mul	r8, r8, r3
   3580c:	ldr	r0, [r0, #20]
   35810:	add	r3, r0, r8
   35814:	ldr	r2, [r4, #16]
   35818:	cmp	r2, r3
   3581c:	bcs	35830 <flatcc_json_printer_int8_enum_field@@Base+0x1d8>
   35820:	mov	r1, r8
   35824:	mov	r0, r4
   35828:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3582c:	b	35724 <flatcc_json_printer_int8_enum_field@@Base+0xcc>
   35830:	mov	r2, r8
   35834:	mov	r1, #32
   35838:	bl	1459c <memset@plt>
   3583c:	ldr	r3, [r4, #20]
   35840:	add	r8, r3, r8
   35844:	str	r8, [r4, #20]
   35848:	b	35724 <flatcc_json_printer_int8_enum_field@@Base+0xcc>
   3584c:	mov	r2, r6
   35850:	mov	r1, r7
   35854:	mov	r0, r4
   35858:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3585c:	b	3576c <flatcc_json_printer_int8_enum_field@@Base+0x114>
   35860:	mov	r0, r5
   35864:	bl	3125c <flatcc_json_parser_struct_as_root@@Base+0xd84>
   35868:	ldr	r3, [r4, #20]
   3586c:	add	r0, r3, r0
   35870:	str	r0, [r4, #20]
   35874:	b	357d8 <flatcc_json_printer_int8_enum_field@@Base+0x180>

00035878 <flatcc_json_printer_int16_enum_field@@Base>:
   35878:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3587c:	strd	r6, [sp, #8]
   35880:	str	r8, [sp, #16]
   35884:	str	lr, [sp, #20]
   35888:	ldr	r6, [sp, #24]
   3588c:	ldrsh	lr, [sp, #28]
   35890:	add	r2, r2, #2
   35894:	lsl	r2, r2, #1
   35898:	ldr	ip, [r1, #8]
   3589c:	cmp	r2, ip
   358a0:	bge	358dc <flatcc_json_printer_int16_enum_field@@Base+0x64>
   358a4:	ldr	ip, [r1, #4]
   358a8:	ldrh	r2, [ip, r2]
   358ac:	cmp	r2, #0
   358b0:	beq	358dc <flatcc_json_printer_int16_enum_field@@Base+0x64>
   358b4:	ldr	ip, [r1]
   358b8:	cmn	ip, r2
   358bc:	beq	358dc <flatcc_json_printer_int16_enum_field@@Base+0x64>
   358c0:	ldrsh	r5, [ip, r2]
   358c4:	cmp	lr, r5
   358c8:	bne	358ec <flatcc_json_printer_int16_enum_field@@Base+0x74>
   358cc:	ldrb	r2, [r0, #28]
   358d0:	cmp	r2, #0
   358d4:	beq	358ec <flatcc_json_printer_int16_enum_field@@Base+0x74>
   358d8:	b	359f8 <flatcc_json_printer_int16_enum_field@@Base+0x180>
   358dc:	ldrb	r2, [r0, #29]
   358e0:	cmp	r2, #0
   358e4:	beq	359f8 <flatcc_json_printer_int16_enum_field@@Base+0x180>
   358e8:	mov	r5, lr
   358ec:	ldr	r2, [r1, #16]
   358f0:	add	ip, r2, #1
   358f4:	str	ip, [r1, #16]
   358f8:	cmp	r2, #0
   358fc:	beq	35914 <flatcc_json_printer_int16_enum_field@@Base+0x9c>
   35900:	ldr	r2, [r0, #20]
   35904:	add	r1, r2, #1
   35908:	str	r1, [r0, #20]
   3590c:	mov	r1, #44	; 0x2c
   35910:	strb	r1, [r2]
   35914:	mov	r7, r3
   35918:	mov	r4, r0
   3591c:	ldrb	r3, [r0, #25]
   35920:	cmp	r3, #0
   35924:	bne	35a0c <flatcc_json_printer_int16_enum_field@@Base+0x194>
   35928:	ldr	r2, [r0, #20]
   3592c:	ldr	r3, [r0, #16]
   35930:	cmp	r2, r3
   35934:	bcc	35944 <flatcc_json_printer_int16_enum_field@@Base+0xcc>
   35938:	ldr	r3, [r0, #44]	; 0x2c
   3593c:	mov	r1, #0
   35940:	blx	r3
   35944:	ldr	r3, [r4, #20]
   35948:	mov	r2, #34	; 0x22
   3594c:	strb	r2, [r3]
   35950:	ldrb	r3, [r4, #26]
   35954:	ldr	r0, [r4, #20]
   35958:	cmp	r3, #0
   3595c:	addeq	r0, r0, #1
   35960:	str	r0, [r4, #20]
   35964:	add	r3, r0, r6
   35968:	ldr	r2, [r4, #16]
   3596c:	cmp	r2, r3
   35970:	bls	35a6c <flatcc_json_printer_int16_enum_field@@Base+0x1f4>
   35974:	mov	r2, r6
   35978:	mov	r1, r7
   3597c:	bl	14524 <memcpy@plt>
   35980:	ldr	r3, [r4, #20]
   35984:	add	r6, r3, r6
   35988:	str	r6, [r4, #20]
   3598c:	ldr	r3, [r4, #20]
   35990:	mov	r2, #34	; 0x22
   35994:	strb	r2, [r3]
   35998:	ldrb	r3, [r4, #26]
   3599c:	clz	r3, r3
   359a0:	lsr	r3, r3, #5
   359a4:	ldr	r1, [r4, #20]
   359a8:	add	r2, r1, r3
   359ac:	add	r2, r2, #1
   359b0:	str	r2, [r4, #20]
   359b4:	mov	r2, #58	; 0x3a
   359b8:	strb	r2, [r1, r3]
   359bc:	ldr	r3, [r4, #20]
   359c0:	mov	r2, #32
   359c4:	strb	r2, [r3]
   359c8:	ldrb	r3, [r4, #25]
   359cc:	ldr	r1, [r4, #20]
   359d0:	cmp	r3, #0
   359d4:	addne	r1, r1, #1
   359d8:	str	r1, [r4, #20]
   359dc:	ldrb	r3, [r4, #27]
   359e0:	cmp	r3, #0
   359e4:	bne	35a80 <flatcc_json_printer_int16_enum_field@@Base+0x208>
   359e8:	mov	r1, r5
   359ec:	mov	r0, r4
   359f0:	ldr	r3, [sp, #32]
   359f4:	blx	r3
   359f8:	ldrd	r4, [sp]
   359fc:	ldrd	r6, [sp, #8]
   35a00:	ldr	r8, [sp, #16]
   35a04:	add	sp, sp, #20
   35a08:	pop	{pc}		; (ldr pc, [sp], #4)
   35a0c:	ldr	r3, [r0, #20]
   35a10:	add	r2, r3, #1
   35a14:	str	r2, [r0, #20]
   35a18:	mov	r2, #10
   35a1c:	strb	r2, [r3]
   35a20:	ldrb	r3, [r0, #25]
   35a24:	ldr	r8, [r0, #32]
   35a28:	mul	r8, r8, r3
   35a2c:	ldr	r0, [r0, #20]
   35a30:	add	r3, r0, r8
   35a34:	ldr	r2, [r4, #16]
   35a38:	cmp	r2, r3
   35a3c:	bcs	35a50 <flatcc_json_printer_int16_enum_field@@Base+0x1d8>
   35a40:	mov	r1, r8
   35a44:	mov	r0, r4
   35a48:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   35a4c:	b	35944 <flatcc_json_printer_int16_enum_field@@Base+0xcc>
   35a50:	mov	r2, r8
   35a54:	mov	r1, #32
   35a58:	bl	1459c <memset@plt>
   35a5c:	ldr	r3, [r4, #20]
   35a60:	add	r8, r3, r8
   35a64:	str	r8, [r4, #20]
   35a68:	b	35944 <flatcc_json_printer_int16_enum_field@@Base+0xcc>
   35a6c:	mov	r2, r6
   35a70:	mov	r1, r7
   35a74:	mov	r0, r4
   35a78:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   35a7c:	b	3598c <flatcc_json_printer_int16_enum_field@@Base+0x114>
   35a80:	mov	r0, r5
   35a84:	bl	3129c <flatcc_json_parser_struct_as_root@@Base+0xdc4>
   35a88:	ldr	r3, [r4, #20]
   35a8c:	add	r0, r3, r0
   35a90:	str	r0, [r4, #20]
   35a94:	b	359f8 <flatcc_json_printer_int16_enum_field@@Base+0x180>

00035a98 <flatcc_json_printer_int32_enum_field@@Base>:
   35a98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35a9c:	strd	r6, [sp, #8]
   35aa0:	str	r8, [sp, #16]
   35aa4:	str	lr, [sp, #20]
   35aa8:	ldr	r6, [sp, #24]
   35aac:	add	r2, r2, #2
   35ab0:	lsl	r2, r2, #1
   35ab4:	ldr	ip, [r1, #8]
   35ab8:	cmp	r2, ip
   35abc:	bge	35afc <flatcc_json_printer_int32_enum_field@@Base+0x64>
   35ac0:	ldr	ip, [r1, #4]
   35ac4:	ldrh	r2, [ip, r2]
   35ac8:	cmp	r2, #0
   35acc:	beq	35afc <flatcc_json_printer_int32_enum_field@@Base+0x64>
   35ad0:	ldr	ip, [r1]
   35ad4:	cmn	ip, r2
   35ad8:	beq	35afc <flatcc_json_printer_int32_enum_field@@Base+0x64>
   35adc:	ldr	r5, [ip, r2]
   35ae0:	ldr	r2, [sp, #28]
   35ae4:	cmp	r2, r5
   35ae8:	bne	35b0c <flatcc_json_printer_int32_enum_field@@Base+0x74>
   35aec:	ldrb	r2, [r0, #28]
   35af0:	cmp	r2, #0
   35af4:	beq	35b0c <flatcc_json_printer_int32_enum_field@@Base+0x74>
   35af8:	b	35c18 <flatcc_json_printer_int32_enum_field@@Base+0x180>
   35afc:	ldrb	r2, [r0, #29]
   35b00:	cmp	r2, #0
   35b04:	beq	35c18 <flatcc_json_printer_int32_enum_field@@Base+0x180>
   35b08:	ldr	r5, [sp, #28]
   35b0c:	ldr	r2, [r1, #16]
   35b10:	add	ip, r2, #1
   35b14:	str	ip, [r1, #16]
   35b18:	cmp	r2, #0
   35b1c:	beq	35b34 <flatcc_json_printer_int32_enum_field@@Base+0x9c>
   35b20:	ldr	r2, [r0, #20]
   35b24:	add	r1, r2, #1
   35b28:	str	r1, [r0, #20]
   35b2c:	mov	r1, #44	; 0x2c
   35b30:	strb	r1, [r2]
   35b34:	mov	r7, r3
   35b38:	mov	r4, r0
   35b3c:	ldrb	r3, [r0, #25]
   35b40:	cmp	r3, #0
   35b44:	bne	35c2c <flatcc_json_printer_int32_enum_field@@Base+0x194>
   35b48:	ldr	r2, [r0, #20]
   35b4c:	ldr	r3, [r0, #16]
   35b50:	cmp	r2, r3
   35b54:	bcc	35b64 <flatcc_json_printer_int32_enum_field@@Base+0xcc>
   35b58:	ldr	r3, [r0, #44]	; 0x2c
   35b5c:	mov	r1, #0
   35b60:	blx	r3
   35b64:	ldr	r3, [r4, #20]
   35b68:	mov	r2, #34	; 0x22
   35b6c:	strb	r2, [r3]
   35b70:	ldrb	r3, [r4, #26]
   35b74:	ldr	r0, [r4, #20]
   35b78:	cmp	r3, #0
   35b7c:	addeq	r0, r0, #1
   35b80:	str	r0, [r4, #20]
   35b84:	add	r3, r0, r6
   35b88:	ldr	r2, [r4, #16]
   35b8c:	cmp	r2, r3
   35b90:	bls	35c8c <flatcc_json_printer_int32_enum_field@@Base+0x1f4>
   35b94:	mov	r2, r6
   35b98:	mov	r1, r7
   35b9c:	bl	14524 <memcpy@plt>
   35ba0:	ldr	r3, [r4, #20]
   35ba4:	add	r6, r3, r6
   35ba8:	str	r6, [r4, #20]
   35bac:	ldr	r3, [r4, #20]
   35bb0:	mov	r2, #34	; 0x22
   35bb4:	strb	r2, [r3]
   35bb8:	ldrb	r3, [r4, #26]
   35bbc:	clz	r3, r3
   35bc0:	lsr	r3, r3, #5
   35bc4:	ldr	r1, [r4, #20]
   35bc8:	add	r2, r1, r3
   35bcc:	add	r2, r2, #1
   35bd0:	str	r2, [r4, #20]
   35bd4:	mov	r2, #58	; 0x3a
   35bd8:	strb	r2, [r1, r3]
   35bdc:	ldr	r3, [r4, #20]
   35be0:	mov	r2, #32
   35be4:	strb	r2, [r3]
   35be8:	ldrb	r3, [r4, #25]
   35bec:	ldr	r1, [r4, #20]
   35bf0:	cmp	r3, #0
   35bf4:	addne	r1, r1, #1
   35bf8:	str	r1, [r4, #20]
   35bfc:	ldrb	r3, [r4, #27]
   35c00:	cmp	r3, #0
   35c04:	bne	35ca0 <flatcc_json_printer_int32_enum_field@@Base+0x208>
   35c08:	mov	r1, r5
   35c0c:	mov	r0, r4
   35c10:	ldr	r3, [sp, #32]
   35c14:	blx	r3
   35c18:	ldrd	r4, [sp]
   35c1c:	ldrd	r6, [sp, #8]
   35c20:	ldr	r8, [sp, #16]
   35c24:	add	sp, sp, #20
   35c28:	pop	{pc}		; (ldr pc, [sp], #4)
   35c2c:	ldr	r3, [r0, #20]
   35c30:	add	r2, r3, #1
   35c34:	str	r2, [r0, #20]
   35c38:	mov	r2, #10
   35c3c:	strb	r2, [r3]
   35c40:	ldrb	r3, [r0, #25]
   35c44:	ldr	r8, [r0, #32]
   35c48:	mul	r8, r8, r3
   35c4c:	ldr	r0, [r0, #20]
   35c50:	add	r3, r0, r8
   35c54:	ldr	r2, [r4, #16]
   35c58:	cmp	r2, r3
   35c5c:	bcs	35c70 <flatcc_json_printer_int32_enum_field@@Base+0x1d8>
   35c60:	mov	r1, r8
   35c64:	mov	r0, r4
   35c68:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   35c6c:	b	35b64 <flatcc_json_printer_int32_enum_field@@Base+0xcc>
   35c70:	mov	r2, r8
   35c74:	mov	r1, #32
   35c78:	bl	1459c <memset@plt>
   35c7c:	ldr	r3, [r4, #20]
   35c80:	add	r8, r3, r8
   35c84:	str	r8, [r4, #20]
   35c88:	b	35b64 <flatcc_json_printer_int32_enum_field@@Base+0xcc>
   35c8c:	mov	r2, r6
   35c90:	mov	r1, r7
   35c94:	mov	r0, r4
   35c98:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   35c9c:	b	35bac <flatcc_json_printer_int32_enum_field@@Base+0x114>
   35ca0:	mov	r0, r5
   35ca4:	bl	312dc <flatcc_json_parser_struct_as_root@@Base+0xe04>
   35ca8:	ldr	r3, [r4, #20]
   35cac:	add	r0, r3, r0
   35cb0:	str	r0, [r4, #20]
   35cb4:	b	35c18 <flatcc_json_printer_int32_enum_field@@Base+0x180>

00035cb8 <flatcc_json_printer_int64_enum_field@@Base>:
   35cb8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35cbc:	strd	r6, [sp, #8]
   35cc0:	strd	r8, [sp, #16]
   35cc4:	str	sl, [sp, #24]
   35cc8:	str	lr, [sp, #28]
   35ccc:	ldr	r5, [sp, #32]
   35cd0:	add	r2, r2, #2
   35cd4:	lsl	r2, r2, #1
   35cd8:	ldr	ip, [r1, #8]
   35cdc:	cmp	r2, ip
   35ce0:	bge	35d24 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   35ce4:	ldr	ip, [r1, #4]
   35ce8:	ldrh	r2, [ip, r2]
   35cec:	cmp	r2, #0
   35cf0:	beq	35d24 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   35cf4:	ldr	ip, [r1]
   35cf8:	cmn	ip, r2
   35cfc:	beq	35d24 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   35d00:	ldrd	r6, [ip, r2]
   35d04:	ldrd	r8, [sp, #40]	; 0x28
   35d08:	cmp	r9, r7
   35d0c:	cmpeq	r8, r6
   35d10:	bne	35d34 <flatcc_json_printer_int64_enum_field@@Base+0x7c>
   35d14:	ldrb	r2, [r0, #28]
   35d18:	cmp	r2, #0
   35d1c:	beq	35d34 <flatcc_json_printer_int64_enum_field@@Base+0x7c>
   35d20:	b	35e44 <flatcc_json_printer_int64_enum_field@@Base+0x18c>
   35d24:	ldrb	r2, [r0, #29]
   35d28:	cmp	r2, #0
   35d2c:	beq	35e44 <flatcc_json_printer_int64_enum_field@@Base+0x18c>
   35d30:	ldrd	r6, [sp, #40]	; 0x28
   35d34:	ldr	r2, [r1, #16]
   35d38:	add	ip, r2, #1
   35d3c:	str	ip, [r1, #16]
   35d40:	cmp	r2, #0
   35d44:	beq	35d5c <flatcc_json_printer_int64_enum_field@@Base+0xa4>
   35d48:	ldr	r2, [r0, #20]
   35d4c:	add	r1, r2, #1
   35d50:	str	r1, [r0, #20]
   35d54:	mov	r1, #44	; 0x2c
   35d58:	strb	r1, [r2]
   35d5c:	mov	r8, r3
   35d60:	mov	r4, r0
   35d64:	ldrb	r3, [r0, #25]
   35d68:	cmp	r3, #0
   35d6c:	bne	35e5c <flatcc_json_printer_int64_enum_field@@Base+0x1a4>
   35d70:	ldr	r2, [r0, #20]
   35d74:	ldr	r3, [r0, #16]
   35d78:	cmp	r2, r3
   35d7c:	bcc	35d8c <flatcc_json_printer_int64_enum_field@@Base+0xd4>
   35d80:	ldr	r3, [r0, #44]	; 0x2c
   35d84:	mov	r1, #0
   35d88:	blx	r3
   35d8c:	ldr	r3, [r4, #20]
   35d90:	mov	r2, #34	; 0x22
   35d94:	strb	r2, [r3]
   35d98:	ldrb	r3, [r4, #26]
   35d9c:	ldr	r0, [r4, #20]
   35da0:	cmp	r3, #0
   35da4:	addeq	r0, r0, #1
   35da8:	str	r0, [r4, #20]
   35dac:	add	r3, r0, r5
   35db0:	ldr	r2, [r4, #16]
   35db4:	cmp	r2, r3
   35db8:	bls	35ebc <flatcc_json_printer_int64_enum_field@@Base+0x204>
   35dbc:	mov	r2, r5
   35dc0:	mov	r1, r8
   35dc4:	bl	14524 <memcpy@plt>
   35dc8:	ldr	r3, [r4, #20]
   35dcc:	add	r5, r3, r5
   35dd0:	str	r5, [r4, #20]
   35dd4:	ldr	r3, [r4, #20]
   35dd8:	mov	r2, #34	; 0x22
   35ddc:	strb	r2, [r3]
   35de0:	ldrb	r3, [r4, #26]
   35de4:	clz	r3, r3
   35de8:	lsr	r3, r3, #5
   35dec:	ldr	r1, [r4, #20]
   35df0:	add	r2, r1, r3
   35df4:	add	r2, r2, #1
   35df8:	str	r2, [r4, #20]
   35dfc:	mov	r2, #58	; 0x3a
   35e00:	strb	r2, [r1, r3]
   35e04:	ldr	r3, [r4, #20]
   35e08:	mov	r2, #32
   35e0c:	strb	r2, [r3]
   35e10:	ldrb	r3, [r4, #25]
   35e14:	ldr	r2, [r4, #20]
   35e18:	cmp	r3, #0
   35e1c:	addne	r2, r2, #1
   35e20:	str	r2, [r4, #20]
   35e24:	ldrb	r3, [r4, #27]
   35e28:	cmp	r3, #0
   35e2c:	bne	35ed0 <flatcc_json_printer_int64_enum_field@@Base+0x218>
   35e30:	mov	r2, r6
   35e34:	mov	r3, r7
   35e38:	mov	r0, r4
   35e3c:	ldr	r1, [sp, #48]	; 0x30
   35e40:	blx	r1
   35e44:	ldrd	r4, [sp]
   35e48:	ldrd	r6, [sp, #8]
   35e4c:	ldrd	r8, [sp, #16]
   35e50:	ldr	sl, [sp, #24]
   35e54:	add	sp, sp, #28
   35e58:	pop	{pc}		; (ldr pc, [sp], #4)
   35e5c:	ldr	r3, [r0, #20]
   35e60:	add	r2, r3, #1
   35e64:	str	r2, [r0, #20]
   35e68:	mov	r2, #10
   35e6c:	strb	r2, [r3]
   35e70:	ldrb	r3, [r0, #25]
   35e74:	ldr	r9, [r0, #32]
   35e78:	mul	r9, r9, r3
   35e7c:	ldr	r0, [r0, #20]
   35e80:	add	r3, r0, r9
   35e84:	ldr	r2, [r4, #16]
   35e88:	cmp	r2, r3
   35e8c:	bcs	35ea0 <flatcc_json_printer_int64_enum_field@@Base+0x1e8>
   35e90:	mov	r1, r9
   35e94:	mov	r0, r4
   35e98:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   35e9c:	b	35d8c <flatcc_json_printer_int64_enum_field@@Base+0xd4>
   35ea0:	mov	r2, r9
   35ea4:	mov	r1, #32
   35ea8:	bl	1459c <memset@plt>
   35eac:	ldr	r3, [r4, #20]
   35eb0:	add	r9, r3, r9
   35eb4:	str	r9, [r4, #20]
   35eb8:	b	35d8c <flatcc_json_printer_int64_enum_field@@Base+0xd4>
   35ebc:	mov	r2, r5
   35ec0:	mov	r1, r8
   35ec4:	mov	r0, r4
   35ec8:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   35ecc:	b	35dd4 <flatcc_json_printer_int64_enum_field@@Base+0x11c>
   35ed0:	mov	r0, r6
   35ed4:	mov	r1, r7
   35ed8:	bl	31314 <flatcc_json_parser_struct_as_root@@Base+0xe3c>
   35edc:	ldr	r3, [r4, #20]
   35ee0:	add	r0, r3, r0
   35ee4:	str	r0, [r4, #20]
   35ee8:	b	35e44 <flatcc_json_printer_int64_enum_field@@Base+0x18c>

00035eec <flatcc_json_printer_bool_enum_field@@Base>:
   35eec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35ef0:	strd	r6, [sp, #8]
   35ef4:	str	r8, [sp, #16]
   35ef8:	str	lr, [sp, #20]
   35efc:	ldr	r6, [sp, #24]
   35f00:	ldrb	lr, [sp, #28]
   35f04:	add	r2, r2, #2
   35f08:	lsl	r2, r2, #1
   35f0c:	ldr	ip, [r1, #8]
   35f10:	cmp	r2, ip
   35f14:	bge	35f50 <flatcc_json_printer_bool_enum_field@@Base+0x64>
   35f18:	ldr	ip, [r1, #4]
   35f1c:	ldrh	r2, [ip, r2]
   35f20:	cmp	r2, #0
   35f24:	beq	35f50 <flatcc_json_printer_bool_enum_field@@Base+0x64>
   35f28:	ldr	ip, [r1]
   35f2c:	cmn	ip, r2
   35f30:	beq	35f50 <flatcc_json_printer_bool_enum_field@@Base+0x64>
   35f34:	ldrb	r5, [ip, r2]
   35f38:	cmp	lr, r5
   35f3c:	bne	35f60 <flatcc_json_printer_bool_enum_field@@Base+0x74>
   35f40:	ldrb	r2, [r0, #28]
   35f44:	cmp	r2, #0
   35f48:	beq	35f60 <flatcc_json_printer_bool_enum_field@@Base+0x74>
   35f4c:	b	3606c <flatcc_json_printer_bool_enum_field@@Base+0x180>
   35f50:	ldrb	r2, [r0, #29]
   35f54:	cmp	r2, #0
   35f58:	beq	3606c <flatcc_json_printer_bool_enum_field@@Base+0x180>
   35f5c:	mov	r5, lr
   35f60:	ldr	r2, [r1, #16]
   35f64:	add	ip, r2, #1
   35f68:	str	ip, [r1, #16]
   35f6c:	cmp	r2, #0
   35f70:	beq	35f88 <flatcc_json_printer_bool_enum_field@@Base+0x9c>
   35f74:	ldr	r2, [r0, #20]
   35f78:	add	r1, r2, #1
   35f7c:	str	r1, [r0, #20]
   35f80:	mov	r1, #44	; 0x2c
   35f84:	strb	r1, [r2]
   35f88:	mov	r7, r3
   35f8c:	mov	r4, r0
   35f90:	ldrb	r3, [r0, #25]
   35f94:	cmp	r3, #0
   35f98:	bne	36080 <flatcc_json_printer_bool_enum_field@@Base+0x194>
   35f9c:	ldr	r2, [r0, #20]
   35fa0:	ldr	r3, [r0, #16]
   35fa4:	cmp	r2, r3
   35fa8:	bcc	35fb8 <flatcc_json_printer_bool_enum_field@@Base+0xcc>
   35fac:	ldr	r3, [r0, #44]	; 0x2c
   35fb0:	mov	r1, #0
   35fb4:	blx	r3
   35fb8:	ldr	r3, [r4, #20]
   35fbc:	mov	r2, #34	; 0x22
   35fc0:	strb	r2, [r3]
   35fc4:	ldrb	r3, [r4, #26]
   35fc8:	ldr	r0, [r4, #20]
   35fcc:	cmp	r3, #0
   35fd0:	addeq	r0, r0, #1
   35fd4:	str	r0, [r4, #20]
   35fd8:	add	r3, r0, r6
   35fdc:	ldr	r2, [r4, #16]
   35fe0:	cmp	r2, r3
   35fe4:	bls	360e0 <flatcc_json_printer_bool_enum_field@@Base+0x1f4>
   35fe8:	mov	r2, r6
   35fec:	mov	r1, r7
   35ff0:	bl	14524 <memcpy@plt>
   35ff4:	ldr	r3, [r4, #20]
   35ff8:	add	r6, r3, r6
   35ffc:	str	r6, [r4, #20]
   36000:	ldr	r3, [r4, #20]
   36004:	mov	r2, #34	; 0x22
   36008:	strb	r2, [r3]
   3600c:	ldrb	r3, [r4, #26]
   36010:	clz	r3, r3
   36014:	lsr	r3, r3, #5
   36018:	ldr	r1, [r4, #20]
   3601c:	add	r2, r1, r3
   36020:	add	r2, r2, #1
   36024:	str	r2, [r4, #20]
   36028:	mov	r2, #58	; 0x3a
   3602c:	strb	r2, [r1, r3]
   36030:	ldr	r3, [r4, #20]
   36034:	mov	r2, #32
   36038:	strb	r2, [r3]
   3603c:	ldrb	r3, [r4, #25]
   36040:	ldr	r1, [r4, #20]
   36044:	cmp	r3, #0
   36048:	addne	r1, r1, #1
   3604c:	str	r1, [r4, #20]
   36050:	ldrb	r3, [r4, #27]
   36054:	cmp	r3, #0
   36058:	bne	360f4 <flatcc_json_printer_bool_enum_field@@Base+0x208>
   3605c:	mov	r1, r5
   36060:	mov	r0, r4
   36064:	ldr	r3, [sp, #32]
   36068:	blx	r3
   3606c:	ldrd	r4, [sp]
   36070:	ldrd	r6, [sp, #8]
   36074:	ldr	r8, [sp, #16]
   36078:	add	sp, sp, #20
   3607c:	pop	{pc}		; (ldr pc, [sp], #4)
   36080:	ldr	r3, [r0, #20]
   36084:	add	r2, r3, #1
   36088:	str	r2, [r0, #20]
   3608c:	mov	r2, #10
   36090:	strb	r2, [r3]
   36094:	ldrb	r3, [r0, #25]
   36098:	ldr	r8, [r0, #32]
   3609c:	mul	r8, r8, r3
   360a0:	ldr	r0, [r0, #20]
   360a4:	add	r3, r0, r8
   360a8:	ldr	r2, [r4, #16]
   360ac:	cmp	r2, r3
   360b0:	bcs	360c4 <flatcc_json_printer_bool_enum_field@@Base+0x1d8>
   360b4:	mov	r1, r8
   360b8:	mov	r0, r4
   360bc:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   360c0:	b	35fb8 <flatcc_json_printer_bool_enum_field@@Base+0xcc>
   360c4:	mov	r2, r8
   360c8:	mov	r1, #32
   360cc:	bl	1459c <memset@plt>
   360d0:	ldr	r3, [r4, #20]
   360d4:	add	r8, r3, r8
   360d8:	str	r8, [r4, #20]
   360dc:	b	35fb8 <flatcc_json_printer_bool_enum_field@@Base+0xcc>
   360e0:	mov	r2, r6
   360e4:	mov	r1, r7
   360e8:	mov	r0, r4
   360ec:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   360f0:	b	36000 <flatcc_json_printer_bool_enum_field@@Base+0x114>
   360f4:	mov	r0, r5
   360f8:	bl	31b08 <flatcc_json_parser_struct_as_root@@Base+0x1630>
   360fc:	ldr	r3, [r4, #20]
   36100:	add	r0, r3, r0
   36104:	str	r0, [r4, #20]
   36108:	b	3606c <flatcc_json_printer_bool_enum_field@@Base+0x180>

0003610c <flatcc_json_printer_uint8_struct_field@@Base>:
   3610c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36110:	strd	r6, [sp, #8]
   36114:	str	r8, [sp, #16]
   36118:	str	lr, [sp, #20]
   3611c:	mov	r4, r0
   36120:	ldr	r6, [sp, #28]
   36124:	ldrb	r5, [r2, r3]
   36128:	cmp	r1, #0
   3612c:	beq	36144 <flatcc_json_printer_uint8_struct_field@@Base+0x38>
   36130:	ldr	r3, [r0, #20]
   36134:	add	r2, r3, #1
   36138:	str	r2, [r0, #20]
   3613c:	mov	r2, #44	; 0x2c
   36140:	strb	r2, [r3]
   36144:	ldrb	r3, [r4, #25]
   36148:	cmp	r3, #0
   3614c:	bne	36230 <flatcc_json_printer_uint8_struct_field@@Base+0x124>
   36150:	ldr	r2, [r4, #20]
   36154:	ldr	r3, [r4, #16]
   36158:	cmp	r2, r3
   3615c:	bcc	36170 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   36160:	ldr	r3, [r4, #44]	; 0x2c
   36164:	mov	r1, #0
   36168:	mov	r0, r4
   3616c:	blx	r3
   36170:	ldr	r3, [r4, #20]
   36174:	mov	r2, #34	; 0x22
   36178:	strb	r2, [r3]
   3617c:	ldrb	r3, [r4, #26]
   36180:	ldr	r0, [r4, #20]
   36184:	cmp	r3, #0
   36188:	addeq	r0, r0, #1
   3618c:	str	r0, [r4, #20]
   36190:	add	r3, r0, r6
   36194:	ldr	r2, [r4, #16]
   36198:	cmp	r2, r3
   3619c:	bls	36290 <flatcc_json_printer_uint8_struct_field@@Base+0x184>
   361a0:	mov	r2, r6
   361a4:	ldr	r1, [sp, #24]
   361a8:	bl	14524 <memcpy@plt>
   361ac:	ldr	r3, [r4, #20]
   361b0:	add	r6, r3, r6
   361b4:	str	r6, [r4, #20]
   361b8:	ldr	r3, [r4, #20]
   361bc:	mov	r2, #34	; 0x22
   361c0:	strb	r2, [r3]
   361c4:	ldrb	r3, [r4, #26]
   361c8:	clz	r3, r3
   361cc:	lsr	r3, r3, #5
   361d0:	ldr	r1, [r4, #20]
   361d4:	add	r2, r1, r3
   361d8:	add	r2, r2, #1
   361dc:	str	r2, [r4, #20]
   361e0:	mov	r2, #58	; 0x3a
   361e4:	strb	r2, [r1, r3]
   361e8:	ldr	r3, [r4, #20]
   361ec:	mov	r2, #32
   361f0:	strb	r2, [r3]
   361f4:	ldrb	r3, [r4, #25]
   361f8:	ldr	r1, [r4, #20]
   361fc:	cmp	r3, #0
   36200:	addne	r1, r1, #1
   36204:	str	r1, [r4, #20]
   36208:	mov	r0, r5
   3620c:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   36210:	ldr	r3, [r4, #20]
   36214:	add	r0, r3, r0
   36218:	str	r0, [r4, #20]
   3621c:	ldrd	r4, [sp]
   36220:	ldrd	r6, [sp, #8]
   36224:	ldr	r8, [sp, #16]
   36228:	add	sp, sp, #20
   3622c:	pop	{pc}		; (ldr pc, [sp], #4)
   36230:	ldr	r3, [r4, #20]
   36234:	add	r2, r3, #1
   36238:	str	r2, [r4, #20]
   3623c:	mov	r2, #10
   36240:	strb	r2, [r3]
   36244:	ldrb	r3, [r4, #25]
   36248:	ldr	r7, [r4, #32]
   3624c:	mul	r7, r7, r3
   36250:	ldr	r0, [r4, #20]
   36254:	add	r3, r0, r7
   36258:	ldr	r2, [r4, #16]
   3625c:	cmp	r2, r3
   36260:	bcs	36274 <flatcc_json_printer_uint8_struct_field@@Base+0x168>
   36264:	mov	r1, r7
   36268:	mov	r0, r4
   3626c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   36270:	b	36170 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   36274:	mov	r2, r7
   36278:	mov	r1, #32
   3627c:	bl	1459c <memset@plt>
   36280:	ldr	r3, [r4, #20]
   36284:	add	r7, r3, r7
   36288:	str	r7, [r4, #20]
   3628c:	b	36170 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   36290:	mov	r2, r6
   36294:	ldr	r1, [sp, #24]
   36298:	mov	r0, r4
   3629c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   362a0:	b	361b8 <flatcc_json_printer_uint8_struct_field@@Base+0xac>

000362a4 <flatcc_json_printer_uint16_struct_field@@Base>:
   362a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   362a8:	strd	r6, [sp, #8]
   362ac:	str	r8, [sp, #16]
   362b0:	str	lr, [sp, #20]
   362b4:	mov	r4, r0
   362b8:	ldr	r6, [sp, #28]
   362bc:	ldrh	r5, [r2, r3]
   362c0:	cmp	r1, #0
   362c4:	beq	362dc <flatcc_json_printer_uint16_struct_field@@Base+0x38>
   362c8:	ldr	r3, [r0, #20]
   362cc:	add	r2, r3, #1
   362d0:	str	r2, [r0, #20]
   362d4:	mov	r2, #44	; 0x2c
   362d8:	strb	r2, [r3]
   362dc:	ldrb	r3, [r4, #25]
   362e0:	cmp	r3, #0
   362e4:	bne	363c8 <flatcc_json_printer_uint16_struct_field@@Base+0x124>
   362e8:	ldr	r2, [r4, #20]
   362ec:	ldr	r3, [r4, #16]
   362f0:	cmp	r2, r3
   362f4:	bcc	36308 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   362f8:	ldr	r3, [r4, #44]	; 0x2c
   362fc:	mov	r1, #0
   36300:	mov	r0, r4
   36304:	blx	r3
   36308:	ldr	r3, [r4, #20]
   3630c:	mov	r2, #34	; 0x22
   36310:	strb	r2, [r3]
   36314:	ldrb	r3, [r4, #26]
   36318:	ldr	r0, [r4, #20]
   3631c:	cmp	r3, #0
   36320:	addeq	r0, r0, #1
   36324:	str	r0, [r4, #20]
   36328:	add	r3, r0, r6
   3632c:	ldr	r2, [r4, #16]
   36330:	cmp	r2, r3
   36334:	bls	36428 <flatcc_json_printer_uint16_struct_field@@Base+0x184>
   36338:	mov	r2, r6
   3633c:	ldr	r1, [sp, #24]
   36340:	bl	14524 <memcpy@plt>
   36344:	ldr	r3, [r4, #20]
   36348:	add	r6, r3, r6
   3634c:	str	r6, [r4, #20]
   36350:	ldr	r3, [r4, #20]
   36354:	mov	r2, #34	; 0x22
   36358:	strb	r2, [r3]
   3635c:	ldrb	r3, [r4, #26]
   36360:	clz	r3, r3
   36364:	lsr	r3, r3, #5
   36368:	ldr	r1, [r4, #20]
   3636c:	add	r2, r1, r3
   36370:	add	r2, r2, #1
   36374:	str	r2, [r4, #20]
   36378:	mov	r2, #58	; 0x3a
   3637c:	strb	r2, [r1, r3]
   36380:	ldr	r3, [r4, #20]
   36384:	mov	r2, #32
   36388:	strb	r2, [r3]
   3638c:	ldrb	r3, [r4, #25]
   36390:	ldr	r1, [r4, #20]
   36394:	cmp	r3, #0
   36398:	addne	r1, r1, #1
   3639c:	str	r1, [r4, #20]
   363a0:	mov	r0, r5
   363a4:	bl	30688 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   363a8:	ldr	r3, [r4, #20]
   363ac:	add	r0, r3, r0
   363b0:	str	r0, [r4, #20]
   363b4:	ldrd	r4, [sp]
   363b8:	ldrd	r6, [sp, #8]
   363bc:	ldr	r8, [sp, #16]
   363c0:	add	sp, sp, #20
   363c4:	pop	{pc}		; (ldr pc, [sp], #4)
   363c8:	ldr	r3, [r4, #20]
   363cc:	add	r2, r3, #1
   363d0:	str	r2, [r4, #20]
   363d4:	mov	r2, #10
   363d8:	strb	r2, [r3]
   363dc:	ldrb	r3, [r4, #25]
   363e0:	ldr	r7, [r4, #32]
   363e4:	mul	r7, r7, r3
   363e8:	ldr	r0, [r4, #20]
   363ec:	add	r3, r0, r7
   363f0:	ldr	r2, [r4, #16]
   363f4:	cmp	r2, r3
   363f8:	bcs	3640c <flatcc_json_printer_uint16_struct_field@@Base+0x168>
   363fc:	mov	r1, r7
   36400:	mov	r0, r4
   36404:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   36408:	b	36308 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   3640c:	mov	r2, r7
   36410:	mov	r1, #32
   36414:	bl	1459c <memset@plt>
   36418:	ldr	r3, [r4, #20]
   3641c:	add	r7, r3, r7
   36420:	str	r7, [r4, #20]
   36424:	b	36308 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   36428:	mov	r2, r6
   3642c:	ldr	r1, [sp, #24]
   36430:	mov	r0, r4
   36434:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   36438:	b	36350 <flatcc_json_printer_uint16_struct_field@@Base+0xac>

0003643c <flatcc_json_printer_uint32_struct_field@@Base>:
   3643c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36440:	strd	r6, [sp, #8]
   36444:	str	r8, [sp, #16]
   36448:	str	lr, [sp, #20]
   3644c:	mov	r4, r0
   36450:	ldr	r6, [sp, #28]
   36454:	ldr	r5, [r2, r3]
   36458:	cmp	r1, #0
   3645c:	beq	36474 <flatcc_json_printer_uint32_struct_field@@Base+0x38>
   36460:	ldr	r3, [r0, #20]
   36464:	add	r2, r3, #1
   36468:	str	r2, [r0, #20]
   3646c:	mov	r2, #44	; 0x2c
   36470:	strb	r2, [r3]
   36474:	ldrb	r3, [r4, #25]
   36478:	cmp	r3, #0
   3647c:	bne	36560 <flatcc_json_printer_uint32_struct_field@@Base+0x124>
   36480:	ldr	r2, [r4, #20]
   36484:	ldr	r3, [r4, #16]
   36488:	cmp	r2, r3
   3648c:	bcc	364a0 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   36490:	ldr	r3, [r4, #44]	; 0x2c
   36494:	mov	r1, #0
   36498:	mov	r0, r4
   3649c:	blx	r3
   364a0:	ldr	r3, [r4, #20]
   364a4:	mov	r2, #34	; 0x22
   364a8:	strb	r2, [r3]
   364ac:	ldrb	r3, [r4, #26]
   364b0:	ldr	r0, [r4, #20]
   364b4:	cmp	r3, #0
   364b8:	addeq	r0, r0, #1
   364bc:	str	r0, [r4, #20]
   364c0:	add	r3, r0, r6
   364c4:	ldr	r2, [r4, #16]
   364c8:	cmp	r2, r3
   364cc:	bls	365c0 <flatcc_json_printer_uint32_struct_field@@Base+0x184>
   364d0:	mov	r2, r6
   364d4:	ldr	r1, [sp, #24]
   364d8:	bl	14524 <memcpy@plt>
   364dc:	ldr	r3, [r4, #20]
   364e0:	add	r6, r3, r6
   364e4:	str	r6, [r4, #20]
   364e8:	ldr	r3, [r4, #20]
   364ec:	mov	r2, #34	; 0x22
   364f0:	strb	r2, [r3]
   364f4:	ldrb	r3, [r4, #26]
   364f8:	clz	r3, r3
   364fc:	lsr	r3, r3, #5
   36500:	ldr	r1, [r4, #20]
   36504:	add	r2, r1, r3
   36508:	add	r2, r2, #1
   3650c:	str	r2, [r4, #20]
   36510:	mov	r2, #58	; 0x3a
   36514:	strb	r2, [r1, r3]
   36518:	ldr	r3, [r4, #20]
   3651c:	mov	r2, #32
   36520:	strb	r2, [r3]
   36524:	ldrb	r3, [r4, #25]
   36528:	ldr	r1, [r4, #20]
   3652c:	cmp	r3, #0
   36530:	addne	r1, r1, #1
   36534:	str	r1, [r4, #20]
   36538:	mov	r0, r5
   3653c:	bl	3081c <flatcc_json_parser_struct_as_root@@Base+0x344>
   36540:	ldr	r3, [r4, #20]
   36544:	add	r0, r3, r0
   36548:	str	r0, [r4, #20]
   3654c:	ldrd	r4, [sp]
   36550:	ldrd	r6, [sp, #8]
   36554:	ldr	r8, [sp, #16]
   36558:	add	sp, sp, #20
   3655c:	pop	{pc}		; (ldr pc, [sp], #4)
   36560:	ldr	r3, [r4, #20]
   36564:	add	r2, r3, #1
   36568:	str	r2, [r4, #20]
   3656c:	mov	r2, #10
   36570:	strb	r2, [r3]
   36574:	ldrb	r3, [r4, #25]
   36578:	ldr	r7, [r4, #32]
   3657c:	mul	r7, r7, r3
   36580:	ldr	r0, [r4, #20]
   36584:	add	r3, r0, r7
   36588:	ldr	r2, [r4, #16]
   3658c:	cmp	r2, r3
   36590:	bcs	365a4 <flatcc_json_printer_uint32_struct_field@@Base+0x168>
   36594:	mov	r1, r7
   36598:	mov	r0, r4
   3659c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   365a0:	b	364a0 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   365a4:	mov	r2, r7
   365a8:	mov	r1, #32
   365ac:	bl	1459c <memset@plt>
   365b0:	ldr	r3, [r4, #20]
   365b4:	add	r7, r3, r7
   365b8:	str	r7, [r4, #20]
   365bc:	b	364a0 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   365c0:	mov	r2, r6
   365c4:	ldr	r1, [sp, #24]
   365c8:	mov	r0, r4
   365cc:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   365d0:	b	364e8 <flatcc_json_printer_uint32_struct_field@@Base+0xac>

000365d4 <flatcc_json_printer_uint64_struct_field@@Base>:
   365d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   365d8:	strd	r6, [sp, #8]
   365dc:	str	r8, [sp, #16]
   365e0:	str	lr, [sp, #20]
   365e4:	mov	r4, r0
   365e8:	ldr	r5, [sp, #28]
   365ec:	ldrd	r6, [r2, r3]
   365f0:	cmp	r1, #0
   365f4:	beq	3660c <flatcc_json_printer_uint64_struct_field@@Base+0x38>
   365f8:	ldr	r3, [r0, #20]
   365fc:	add	r2, r3, #1
   36600:	str	r2, [r0, #20]
   36604:	mov	r2, #44	; 0x2c
   36608:	strb	r2, [r3]
   3660c:	ldrb	r3, [r4, #25]
   36610:	cmp	r3, #0
   36614:	bne	366fc <flatcc_json_printer_uint64_struct_field@@Base+0x128>
   36618:	ldr	r2, [r4, #20]
   3661c:	ldr	r3, [r4, #16]
   36620:	cmp	r2, r3
   36624:	bcc	36638 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   36628:	ldr	r3, [r4, #44]	; 0x2c
   3662c:	mov	r1, #0
   36630:	mov	r0, r4
   36634:	blx	r3
   36638:	ldr	r3, [r4, #20]
   3663c:	mov	r2, #34	; 0x22
   36640:	strb	r2, [r3]
   36644:	ldrb	r3, [r4, #26]
   36648:	ldr	r0, [r4, #20]
   3664c:	cmp	r3, #0
   36650:	addeq	r0, r0, #1
   36654:	str	r0, [r4, #20]
   36658:	add	r3, r0, r5
   3665c:	ldr	r2, [r4, #16]
   36660:	cmp	r2, r3
   36664:	bls	3675c <flatcc_json_printer_uint64_struct_field@@Base+0x188>
   36668:	mov	r2, r5
   3666c:	ldr	r1, [sp, #24]
   36670:	bl	14524 <memcpy@plt>
   36674:	ldr	r3, [r4, #20]
   36678:	add	r5, r3, r5
   3667c:	str	r5, [r4, #20]
   36680:	ldr	r3, [r4, #20]
   36684:	mov	r2, #34	; 0x22
   36688:	strb	r2, [r3]
   3668c:	ldrb	r3, [r4, #26]
   36690:	clz	r3, r3
   36694:	lsr	r3, r3, #5
   36698:	ldr	r1, [r4, #20]
   3669c:	add	r2, r1, r3
   366a0:	add	r2, r2, #1
   366a4:	str	r2, [r4, #20]
   366a8:	mov	r2, #58	; 0x3a
   366ac:	strb	r2, [r1, r3]
   366b0:	ldr	r3, [r4, #20]
   366b4:	mov	r2, #32
   366b8:	strb	r2, [r3]
   366bc:	ldrb	r3, [r4, #25]
   366c0:	ldr	r2, [r4, #20]
   366c4:	cmp	r3, #0
   366c8:	addne	r2, r2, #1
   366cc:	str	r2, [r4, #20]
   366d0:	mov	r0, r6
   366d4:	mov	r1, r7
   366d8:	bl	30b80 <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   366dc:	ldr	r3, [r4, #20]
   366e0:	add	r0, r3, r0
   366e4:	str	r0, [r4, #20]
   366e8:	ldrd	r4, [sp]
   366ec:	ldrd	r6, [sp, #8]
   366f0:	ldr	r8, [sp, #16]
   366f4:	add	sp, sp, #20
   366f8:	pop	{pc}		; (ldr pc, [sp], #4)
   366fc:	ldr	r3, [r4, #20]
   36700:	add	r2, r3, #1
   36704:	str	r2, [r4, #20]
   36708:	mov	r2, #10
   3670c:	strb	r2, [r3]
   36710:	ldrb	r3, [r4, #25]
   36714:	ldr	r8, [r4, #32]
   36718:	mul	r8, r8, r3
   3671c:	ldr	r0, [r4, #20]
   36720:	add	r3, r0, r8
   36724:	ldr	r2, [r4, #16]
   36728:	cmp	r2, r3
   3672c:	bcs	36740 <flatcc_json_printer_uint64_struct_field@@Base+0x16c>
   36730:	mov	r1, r8
   36734:	mov	r0, r4
   36738:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3673c:	b	36638 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   36740:	mov	r2, r8
   36744:	mov	r1, #32
   36748:	bl	1459c <memset@plt>
   3674c:	ldr	r3, [r4, #20]
   36750:	add	r8, r3, r8
   36754:	str	r8, [r4, #20]
   36758:	b	36638 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   3675c:	mov	r2, r5
   36760:	ldr	r1, [sp, #24]
   36764:	mov	r0, r4
   36768:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3676c:	b	36680 <flatcc_json_printer_uint64_struct_field@@Base+0xac>

00036770 <flatcc_json_printer_int8_struct_field@@Base>:
   36770:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36774:	strd	r6, [sp, #8]
   36778:	str	r8, [sp, #16]
   3677c:	str	lr, [sp, #20]
   36780:	mov	r4, r0
   36784:	ldr	r6, [sp, #28]
   36788:	ldrsb	r5, [r2, r3]
   3678c:	cmp	r1, #0
   36790:	beq	367a8 <flatcc_json_printer_int8_struct_field@@Base+0x38>
   36794:	ldr	r3, [r0, #20]
   36798:	add	r2, r3, #1
   3679c:	str	r2, [r0, #20]
   367a0:	mov	r2, #44	; 0x2c
   367a4:	strb	r2, [r3]
   367a8:	ldrb	r3, [r4, #25]
   367ac:	cmp	r3, #0
   367b0:	bne	36894 <flatcc_json_printer_int8_struct_field@@Base+0x124>
   367b4:	ldr	r2, [r4, #20]
   367b8:	ldr	r3, [r4, #16]
   367bc:	cmp	r2, r3
   367c0:	bcc	367d4 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   367c4:	ldr	r3, [r4, #44]	; 0x2c
   367c8:	mov	r1, #0
   367cc:	mov	r0, r4
   367d0:	blx	r3
   367d4:	ldr	r3, [r4, #20]
   367d8:	mov	r2, #34	; 0x22
   367dc:	strb	r2, [r3]
   367e0:	ldrb	r3, [r4, #26]
   367e4:	ldr	r0, [r4, #20]
   367e8:	cmp	r3, #0
   367ec:	addeq	r0, r0, #1
   367f0:	str	r0, [r4, #20]
   367f4:	add	r3, r0, r6
   367f8:	ldr	r2, [r4, #16]
   367fc:	cmp	r2, r3
   36800:	bls	368f4 <flatcc_json_printer_int8_struct_field@@Base+0x184>
   36804:	mov	r2, r6
   36808:	ldr	r1, [sp, #24]
   3680c:	bl	14524 <memcpy@plt>
   36810:	ldr	r3, [r4, #20]
   36814:	add	r6, r3, r6
   36818:	str	r6, [r4, #20]
   3681c:	ldr	r3, [r4, #20]
   36820:	mov	r2, #34	; 0x22
   36824:	strb	r2, [r3]
   36828:	ldrb	r3, [r4, #26]
   3682c:	clz	r3, r3
   36830:	lsr	r3, r3, #5
   36834:	ldr	r1, [r4, #20]
   36838:	add	r2, r1, r3
   3683c:	add	r2, r2, #1
   36840:	str	r2, [r4, #20]
   36844:	mov	r2, #58	; 0x3a
   36848:	strb	r2, [r1, r3]
   3684c:	ldr	r3, [r4, #20]
   36850:	mov	r2, #32
   36854:	strb	r2, [r3]
   36858:	ldrb	r3, [r4, #25]
   3685c:	ldr	r1, [r4, #20]
   36860:	cmp	r3, #0
   36864:	addne	r1, r1, #1
   36868:	str	r1, [r4, #20]
   3686c:	mov	r0, r5
   36870:	bl	3125c <flatcc_json_parser_struct_as_root@@Base+0xd84>
   36874:	ldr	r3, [r4, #20]
   36878:	add	r0, r3, r0
   3687c:	str	r0, [r4, #20]
   36880:	ldrd	r4, [sp]
   36884:	ldrd	r6, [sp, #8]
   36888:	ldr	r8, [sp, #16]
   3688c:	add	sp, sp, #20
   36890:	pop	{pc}		; (ldr pc, [sp], #4)
   36894:	ldr	r3, [r4, #20]
   36898:	add	r2, r3, #1
   3689c:	str	r2, [r4, #20]
   368a0:	mov	r2, #10
   368a4:	strb	r2, [r3]
   368a8:	ldrb	r3, [r4, #25]
   368ac:	ldr	r7, [r4, #32]
   368b0:	mul	r7, r7, r3
   368b4:	ldr	r0, [r4, #20]
   368b8:	add	r3, r0, r7
   368bc:	ldr	r2, [r4, #16]
   368c0:	cmp	r2, r3
   368c4:	bcs	368d8 <flatcc_json_printer_int8_struct_field@@Base+0x168>
   368c8:	mov	r1, r7
   368cc:	mov	r0, r4
   368d0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   368d4:	b	367d4 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   368d8:	mov	r2, r7
   368dc:	mov	r1, #32
   368e0:	bl	1459c <memset@plt>
   368e4:	ldr	r3, [r4, #20]
   368e8:	add	r7, r3, r7
   368ec:	str	r7, [r4, #20]
   368f0:	b	367d4 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   368f4:	mov	r2, r6
   368f8:	ldr	r1, [sp, #24]
   368fc:	mov	r0, r4
   36900:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   36904:	b	3681c <flatcc_json_printer_int8_struct_field@@Base+0xac>

00036908 <flatcc_json_printer_int16_struct_field@@Base>:
   36908:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3690c:	strd	r6, [sp, #8]
   36910:	str	r8, [sp, #16]
   36914:	str	lr, [sp, #20]
   36918:	mov	r4, r0
   3691c:	ldr	r6, [sp, #28]
   36920:	ldrsh	r5, [r2, r3]
   36924:	cmp	r1, #0
   36928:	beq	36940 <flatcc_json_printer_int16_struct_field@@Base+0x38>
   3692c:	ldr	r3, [r0, #20]
   36930:	add	r2, r3, #1
   36934:	str	r2, [r0, #20]
   36938:	mov	r2, #44	; 0x2c
   3693c:	strb	r2, [r3]
   36940:	ldrb	r3, [r4, #25]
   36944:	cmp	r3, #0
   36948:	bne	36a2c <flatcc_json_printer_int16_struct_field@@Base+0x124>
   3694c:	ldr	r2, [r4, #20]
   36950:	ldr	r3, [r4, #16]
   36954:	cmp	r2, r3
   36958:	bcc	3696c <flatcc_json_printer_int16_struct_field@@Base+0x64>
   3695c:	ldr	r3, [r4, #44]	; 0x2c
   36960:	mov	r1, #0
   36964:	mov	r0, r4
   36968:	blx	r3
   3696c:	ldr	r3, [r4, #20]
   36970:	mov	r2, #34	; 0x22
   36974:	strb	r2, [r3]
   36978:	ldrb	r3, [r4, #26]
   3697c:	ldr	r0, [r4, #20]
   36980:	cmp	r3, #0
   36984:	addeq	r0, r0, #1
   36988:	str	r0, [r4, #20]
   3698c:	add	r3, r0, r6
   36990:	ldr	r2, [r4, #16]
   36994:	cmp	r2, r3
   36998:	bls	36a8c <flatcc_json_printer_int16_struct_field@@Base+0x184>
   3699c:	mov	r2, r6
   369a0:	ldr	r1, [sp, #24]
   369a4:	bl	14524 <memcpy@plt>
   369a8:	ldr	r3, [r4, #20]
   369ac:	add	r6, r3, r6
   369b0:	str	r6, [r4, #20]
   369b4:	ldr	r3, [r4, #20]
   369b8:	mov	r2, #34	; 0x22
   369bc:	strb	r2, [r3]
   369c0:	ldrb	r3, [r4, #26]
   369c4:	clz	r3, r3
   369c8:	lsr	r3, r3, #5
   369cc:	ldr	r1, [r4, #20]
   369d0:	add	r2, r1, r3
   369d4:	add	r2, r2, #1
   369d8:	str	r2, [r4, #20]
   369dc:	mov	r2, #58	; 0x3a
   369e0:	strb	r2, [r1, r3]
   369e4:	ldr	r3, [r4, #20]
   369e8:	mov	r2, #32
   369ec:	strb	r2, [r3]
   369f0:	ldrb	r3, [r4, #25]
   369f4:	ldr	r1, [r4, #20]
   369f8:	cmp	r3, #0
   369fc:	addne	r1, r1, #1
   36a00:	str	r1, [r4, #20]
   36a04:	mov	r0, r5
   36a08:	bl	3129c <flatcc_json_parser_struct_as_root@@Base+0xdc4>
   36a0c:	ldr	r3, [r4, #20]
   36a10:	add	r0, r3, r0
   36a14:	str	r0, [r4, #20]
   36a18:	ldrd	r4, [sp]
   36a1c:	ldrd	r6, [sp, #8]
   36a20:	ldr	r8, [sp, #16]
   36a24:	add	sp, sp, #20
   36a28:	pop	{pc}		; (ldr pc, [sp], #4)
   36a2c:	ldr	r3, [r4, #20]
   36a30:	add	r2, r3, #1
   36a34:	str	r2, [r4, #20]
   36a38:	mov	r2, #10
   36a3c:	strb	r2, [r3]
   36a40:	ldrb	r3, [r4, #25]
   36a44:	ldr	r7, [r4, #32]
   36a48:	mul	r7, r7, r3
   36a4c:	ldr	r0, [r4, #20]
   36a50:	add	r3, r0, r7
   36a54:	ldr	r2, [r4, #16]
   36a58:	cmp	r2, r3
   36a5c:	bcs	36a70 <flatcc_json_printer_int16_struct_field@@Base+0x168>
   36a60:	mov	r1, r7
   36a64:	mov	r0, r4
   36a68:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   36a6c:	b	3696c <flatcc_json_printer_int16_struct_field@@Base+0x64>
   36a70:	mov	r2, r7
   36a74:	mov	r1, #32
   36a78:	bl	1459c <memset@plt>
   36a7c:	ldr	r3, [r4, #20]
   36a80:	add	r7, r3, r7
   36a84:	str	r7, [r4, #20]
   36a88:	b	3696c <flatcc_json_printer_int16_struct_field@@Base+0x64>
   36a8c:	mov	r2, r6
   36a90:	ldr	r1, [sp, #24]
   36a94:	mov	r0, r4
   36a98:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   36a9c:	b	369b4 <flatcc_json_printer_int16_struct_field@@Base+0xac>

00036aa0 <flatcc_json_printer_int32_struct_field@@Base>:
   36aa0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36aa4:	strd	r6, [sp, #8]
   36aa8:	str	r8, [sp, #16]
   36aac:	str	lr, [sp, #20]
   36ab0:	mov	r4, r0
   36ab4:	ldr	r6, [sp, #28]
   36ab8:	ldr	r5, [r2, r3]
   36abc:	cmp	r1, #0
   36ac0:	beq	36ad8 <flatcc_json_printer_int32_struct_field@@Base+0x38>
   36ac4:	ldr	r3, [r0, #20]
   36ac8:	add	r2, r3, #1
   36acc:	str	r2, [r0, #20]
   36ad0:	mov	r2, #44	; 0x2c
   36ad4:	strb	r2, [r3]
   36ad8:	ldrb	r3, [r4, #25]
   36adc:	cmp	r3, #0
   36ae0:	bne	36bc4 <flatcc_json_printer_int32_struct_field@@Base+0x124>
   36ae4:	ldr	r2, [r4, #20]
   36ae8:	ldr	r3, [r4, #16]
   36aec:	cmp	r2, r3
   36af0:	bcc	36b04 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   36af4:	ldr	r3, [r4, #44]	; 0x2c
   36af8:	mov	r1, #0
   36afc:	mov	r0, r4
   36b00:	blx	r3
   36b04:	ldr	r3, [r4, #20]
   36b08:	mov	r2, #34	; 0x22
   36b0c:	strb	r2, [r3]
   36b10:	ldrb	r3, [r4, #26]
   36b14:	ldr	r0, [r4, #20]
   36b18:	cmp	r3, #0
   36b1c:	addeq	r0, r0, #1
   36b20:	str	r0, [r4, #20]
   36b24:	add	r3, r0, r6
   36b28:	ldr	r2, [r4, #16]
   36b2c:	cmp	r2, r3
   36b30:	bls	36c24 <flatcc_json_printer_int32_struct_field@@Base+0x184>
   36b34:	mov	r2, r6
   36b38:	ldr	r1, [sp, #24]
   36b3c:	bl	14524 <memcpy@plt>
   36b40:	ldr	r3, [r4, #20]
   36b44:	add	r6, r3, r6
   36b48:	str	r6, [r4, #20]
   36b4c:	ldr	r3, [r4, #20]
   36b50:	mov	r2, #34	; 0x22
   36b54:	strb	r2, [r3]
   36b58:	ldrb	r3, [r4, #26]
   36b5c:	clz	r3, r3
   36b60:	lsr	r3, r3, #5
   36b64:	ldr	r1, [r4, #20]
   36b68:	add	r2, r1, r3
   36b6c:	add	r2, r2, #1
   36b70:	str	r2, [r4, #20]
   36b74:	mov	r2, #58	; 0x3a
   36b78:	strb	r2, [r1, r3]
   36b7c:	ldr	r3, [r4, #20]
   36b80:	mov	r2, #32
   36b84:	strb	r2, [r3]
   36b88:	ldrb	r3, [r4, #25]
   36b8c:	ldr	r1, [r4, #20]
   36b90:	cmp	r3, #0
   36b94:	addne	r1, r1, #1
   36b98:	str	r1, [r4, #20]
   36b9c:	mov	r0, r5
   36ba0:	bl	312dc <flatcc_json_parser_struct_as_root@@Base+0xe04>
   36ba4:	ldr	r3, [r4, #20]
   36ba8:	add	r0, r3, r0
   36bac:	str	r0, [r4, #20]
   36bb0:	ldrd	r4, [sp]
   36bb4:	ldrd	r6, [sp, #8]
   36bb8:	ldr	r8, [sp, #16]
   36bbc:	add	sp, sp, #20
   36bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   36bc4:	ldr	r3, [r4, #20]
   36bc8:	add	r2, r3, #1
   36bcc:	str	r2, [r4, #20]
   36bd0:	mov	r2, #10
   36bd4:	strb	r2, [r3]
   36bd8:	ldrb	r3, [r4, #25]
   36bdc:	ldr	r7, [r4, #32]
   36be0:	mul	r7, r7, r3
   36be4:	ldr	r0, [r4, #20]
   36be8:	add	r3, r0, r7
   36bec:	ldr	r2, [r4, #16]
   36bf0:	cmp	r2, r3
   36bf4:	bcs	36c08 <flatcc_json_printer_int32_struct_field@@Base+0x168>
   36bf8:	mov	r1, r7
   36bfc:	mov	r0, r4
   36c00:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   36c04:	b	36b04 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   36c08:	mov	r2, r7
   36c0c:	mov	r1, #32
   36c10:	bl	1459c <memset@plt>
   36c14:	ldr	r3, [r4, #20]
   36c18:	add	r7, r3, r7
   36c1c:	str	r7, [r4, #20]
   36c20:	b	36b04 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   36c24:	mov	r2, r6
   36c28:	ldr	r1, [sp, #24]
   36c2c:	mov	r0, r4
   36c30:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   36c34:	b	36b4c <flatcc_json_printer_int32_struct_field@@Base+0xac>

00036c38 <flatcc_json_printer_int64_struct_field@@Base>:
   36c38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36c3c:	strd	r6, [sp, #8]
   36c40:	str	r8, [sp, #16]
   36c44:	str	lr, [sp, #20]
   36c48:	mov	r4, r0
   36c4c:	ldr	r5, [sp, #28]
   36c50:	ldrd	r6, [r2, r3]
   36c54:	cmp	r1, #0
   36c58:	beq	36c70 <flatcc_json_printer_int64_struct_field@@Base+0x38>
   36c5c:	ldr	r3, [r0, #20]
   36c60:	add	r2, r3, #1
   36c64:	str	r2, [r0, #20]
   36c68:	mov	r2, #44	; 0x2c
   36c6c:	strb	r2, [r3]
   36c70:	ldrb	r3, [r4, #25]
   36c74:	cmp	r3, #0
   36c78:	bne	36d60 <flatcc_json_printer_int64_struct_field@@Base+0x128>
   36c7c:	ldr	r2, [r4, #20]
   36c80:	ldr	r3, [r4, #16]
   36c84:	cmp	r2, r3
   36c88:	bcc	36c9c <flatcc_json_printer_int64_struct_field@@Base+0x64>
   36c8c:	ldr	r3, [r4, #44]	; 0x2c
   36c90:	mov	r1, #0
   36c94:	mov	r0, r4
   36c98:	blx	r3
   36c9c:	ldr	r3, [r4, #20]
   36ca0:	mov	r2, #34	; 0x22
   36ca4:	strb	r2, [r3]
   36ca8:	ldrb	r3, [r4, #26]
   36cac:	ldr	r0, [r4, #20]
   36cb0:	cmp	r3, #0
   36cb4:	addeq	r0, r0, #1
   36cb8:	str	r0, [r4, #20]
   36cbc:	add	r3, r0, r5
   36cc0:	ldr	r2, [r4, #16]
   36cc4:	cmp	r2, r3
   36cc8:	bls	36dc0 <flatcc_json_printer_int64_struct_field@@Base+0x188>
   36ccc:	mov	r2, r5
   36cd0:	ldr	r1, [sp, #24]
   36cd4:	bl	14524 <memcpy@plt>
   36cd8:	ldr	r3, [r4, #20]
   36cdc:	add	r5, r3, r5
   36ce0:	str	r5, [r4, #20]
   36ce4:	ldr	r3, [r4, #20]
   36ce8:	mov	r2, #34	; 0x22
   36cec:	strb	r2, [r3]
   36cf0:	ldrb	r3, [r4, #26]
   36cf4:	clz	r3, r3
   36cf8:	lsr	r3, r3, #5
   36cfc:	ldr	r1, [r4, #20]
   36d00:	add	r2, r1, r3
   36d04:	add	r2, r2, #1
   36d08:	str	r2, [r4, #20]
   36d0c:	mov	r2, #58	; 0x3a
   36d10:	strb	r2, [r1, r3]
   36d14:	ldr	r3, [r4, #20]
   36d18:	mov	r2, #32
   36d1c:	strb	r2, [r3]
   36d20:	ldrb	r3, [r4, #25]
   36d24:	ldr	r2, [r4, #20]
   36d28:	cmp	r3, #0
   36d2c:	addne	r2, r2, #1
   36d30:	str	r2, [r4, #20]
   36d34:	mov	r0, r6
   36d38:	mov	r1, r7
   36d3c:	bl	31314 <flatcc_json_parser_struct_as_root@@Base+0xe3c>
   36d40:	ldr	r3, [r4, #20]
   36d44:	add	r0, r3, r0
   36d48:	str	r0, [r4, #20]
   36d4c:	ldrd	r4, [sp]
   36d50:	ldrd	r6, [sp, #8]
   36d54:	ldr	r8, [sp, #16]
   36d58:	add	sp, sp, #20
   36d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   36d60:	ldr	r3, [r4, #20]
   36d64:	add	r2, r3, #1
   36d68:	str	r2, [r4, #20]
   36d6c:	mov	r2, #10
   36d70:	strb	r2, [r3]
   36d74:	ldrb	r3, [r4, #25]
   36d78:	ldr	r8, [r4, #32]
   36d7c:	mul	r8, r8, r3
   36d80:	ldr	r0, [r4, #20]
   36d84:	add	r3, r0, r8
   36d88:	ldr	r2, [r4, #16]
   36d8c:	cmp	r2, r3
   36d90:	bcs	36da4 <flatcc_json_printer_int64_struct_field@@Base+0x16c>
   36d94:	mov	r1, r8
   36d98:	mov	r0, r4
   36d9c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   36da0:	b	36c9c <flatcc_json_printer_int64_struct_field@@Base+0x64>
   36da4:	mov	r2, r8
   36da8:	mov	r1, #32
   36dac:	bl	1459c <memset@plt>
   36db0:	ldr	r3, [r4, #20]
   36db4:	add	r8, r3, r8
   36db8:	str	r8, [r4, #20]
   36dbc:	b	36c9c <flatcc_json_printer_int64_struct_field@@Base+0x64>
   36dc0:	mov	r2, r5
   36dc4:	ldr	r1, [sp, #24]
   36dc8:	mov	r0, r4
   36dcc:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   36dd0:	b	36ce4 <flatcc_json_printer_int64_struct_field@@Base+0xac>

00036dd4 <flatcc_json_printer_bool_struct_field@@Base>:
   36dd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36dd8:	strd	r6, [sp, #8]
   36ddc:	str	r8, [sp, #16]
   36de0:	str	lr, [sp, #20]
   36de4:	mov	r4, r0
   36de8:	ldr	r6, [sp, #28]
   36dec:	ldrb	r5, [r2, r3]
   36df0:	cmp	r1, #0
   36df4:	beq	36e0c <flatcc_json_printer_bool_struct_field@@Base+0x38>
   36df8:	ldr	r3, [r0, #20]
   36dfc:	add	r2, r3, #1
   36e00:	str	r2, [r0, #20]
   36e04:	mov	r2, #44	; 0x2c
   36e08:	strb	r2, [r3]
   36e0c:	ldrb	r3, [r4, #25]
   36e10:	cmp	r3, #0
   36e14:	bne	36ef8 <flatcc_json_printer_bool_struct_field@@Base+0x124>
   36e18:	ldr	r2, [r4, #20]
   36e1c:	ldr	r3, [r4, #16]
   36e20:	cmp	r2, r3
   36e24:	bcc	36e38 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   36e28:	ldr	r3, [r4, #44]	; 0x2c
   36e2c:	mov	r1, #0
   36e30:	mov	r0, r4
   36e34:	blx	r3
   36e38:	ldr	r3, [r4, #20]
   36e3c:	mov	r2, #34	; 0x22
   36e40:	strb	r2, [r3]
   36e44:	ldrb	r3, [r4, #26]
   36e48:	ldr	r0, [r4, #20]
   36e4c:	cmp	r3, #0
   36e50:	addeq	r0, r0, #1
   36e54:	str	r0, [r4, #20]
   36e58:	add	r3, r0, r6
   36e5c:	ldr	r2, [r4, #16]
   36e60:	cmp	r2, r3
   36e64:	bls	36f58 <flatcc_json_printer_bool_struct_field@@Base+0x184>
   36e68:	mov	r2, r6
   36e6c:	ldr	r1, [sp, #24]
   36e70:	bl	14524 <memcpy@plt>
   36e74:	ldr	r3, [r4, #20]
   36e78:	add	r6, r3, r6
   36e7c:	str	r6, [r4, #20]
   36e80:	ldr	r3, [r4, #20]
   36e84:	mov	r2, #34	; 0x22
   36e88:	strb	r2, [r3]
   36e8c:	ldrb	r3, [r4, #26]
   36e90:	clz	r3, r3
   36e94:	lsr	r3, r3, #5
   36e98:	ldr	r1, [r4, #20]
   36e9c:	add	r2, r1, r3
   36ea0:	add	r2, r2, #1
   36ea4:	str	r2, [r4, #20]
   36ea8:	mov	r2, #58	; 0x3a
   36eac:	strb	r2, [r1, r3]
   36eb0:	ldr	r3, [r4, #20]
   36eb4:	mov	r2, #32
   36eb8:	strb	r2, [r3]
   36ebc:	ldrb	r3, [r4, #25]
   36ec0:	ldr	r1, [r4, #20]
   36ec4:	cmp	r3, #0
   36ec8:	addne	r1, r1, #1
   36ecc:	str	r1, [r4, #20]
   36ed0:	mov	r0, r5
   36ed4:	bl	31b08 <flatcc_json_parser_struct_as_root@@Base+0x1630>
   36ed8:	ldr	r3, [r4, #20]
   36edc:	add	r0, r3, r0
   36ee0:	str	r0, [r4, #20]
   36ee4:	ldrd	r4, [sp]
   36ee8:	ldrd	r6, [sp, #8]
   36eec:	ldr	r8, [sp, #16]
   36ef0:	add	sp, sp, #20
   36ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   36ef8:	ldr	r3, [r4, #20]
   36efc:	add	r2, r3, #1
   36f00:	str	r2, [r4, #20]
   36f04:	mov	r2, #10
   36f08:	strb	r2, [r3]
   36f0c:	ldrb	r3, [r4, #25]
   36f10:	ldr	r7, [r4, #32]
   36f14:	mul	r7, r7, r3
   36f18:	ldr	r0, [r4, #20]
   36f1c:	add	r3, r0, r7
   36f20:	ldr	r2, [r4, #16]
   36f24:	cmp	r2, r3
   36f28:	bcs	36f3c <flatcc_json_printer_bool_struct_field@@Base+0x168>
   36f2c:	mov	r1, r7
   36f30:	mov	r0, r4
   36f34:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   36f38:	b	36e38 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   36f3c:	mov	r2, r7
   36f40:	mov	r1, #32
   36f44:	bl	1459c <memset@plt>
   36f48:	ldr	r3, [r4, #20]
   36f4c:	add	r7, r3, r7
   36f50:	str	r7, [r4, #20]
   36f54:	b	36e38 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   36f58:	mov	r2, r6
   36f5c:	ldr	r1, [sp, #24]
   36f60:	mov	r0, r4
   36f64:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   36f68:	b	36e80 <flatcc_json_printer_bool_struct_field@@Base+0xac>

00036f6c <flatcc_json_printer_float_struct_field@@Base>:
   36f6c:	strd	r4, [sp, #-16]!
   36f70:	str	r6, [sp, #8]
   36f74:	str	lr, [sp, #12]
   36f78:	vpush	{d8}
   36f7c:	mov	r4, r0
   36f80:	ldr	r5, [sp, #28]
   36f84:	add	r3, r2, r3
   36f88:	vldr	s16, [r3]
   36f8c:	cmp	r1, #0
   36f90:	beq	36fa8 <flatcc_json_printer_float_struct_field@@Base+0x3c>
   36f94:	ldr	r3, [r0, #20]
   36f98:	add	r2, r3, #1
   36f9c:	str	r2, [r0, #20]
   36fa0:	mov	r2, #44	; 0x2c
   36fa4:	strb	r2, [r3]
   36fa8:	ldrb	r3, [r4, #25]
   36fac:	cmp	r3, #0
   36fb0:	bne	37094 <flatcc_json_printer_float_struct_field@@Base+0x128>
   36fb4:	ldr	r2, [r4, #20]
   36fb8:	ldr	r3, [r4, #16]
   36fbc:	cmp	r2, r3
   36fc0:	bcc	36fd4 <flatcc_json_printer_float_struct_field@@Base+0x68>
   36fc4:	ldr	r3, [r4, #44]	; 0x2c
   36fc8:	mov	r1, #0
   36fcc:	mov	r0, r4
   36fd0:	blx	r3
   36fd4:	ldr	r3, [r4, #20]
   36fd8:	mov	r2, #34	; 0x22
   36fdc:	strb	r2, [r3]
   36fe0:	ldrb	r3, [r4, #26]
   36fe4:	ldr	r0, [r4, #20]
   36fe8:	cmp	r3, #0
   36fec:	addeq	r0, r0, #1
   36ff0:	str	r0, [r4, #20]
   36ff4:	add	r3, r0, r5
   36ff8:	ldr	r2, [r4, #16]
   36ffc:	cmp	r2, r3
   37000:	bls	370f4 <flatcc_json_printer_float_struct_field@@Base+0x188>
   37004:	mov	r2, r5
   37008:	ldr	r1, [sp, #24]
   3700c:	bl	14524 <memcpy@plt>
   37010:	ldr	r3, [r4, #20]
   37014:	add	r5, r3, r5
   37018:	str	r5, [r4, #20]
   3701c:	ldr	r3, [r4, #20]
   37020:	mov	r2, #34	; 0x22
   37024:	strb	r2, [r3]
   37028:	ldrb	r3, [r4, #26]
   3702c:	clz	r3, r3
   37030:	lsr	r3, r3, #5
   37034:	ldr	r1, [r4, #20]
   37038:	add	r2, r1, r3
   3703c:	add	r2, r2, #1
   37040:	str	r2, [r4, #20]
   37044:	mov	r2, #58	; 0x3a
   37048:	strb	r2, [r1, r3]
   3704c:	ldr	r3, [r4, #20]
   37050:	mov	r2, #32
   37054:	strb	r2, [r3]
   37058:	ldrb	r3, [r4, #25]
   3705c:	ldr	r0, [r4, #20]
   37060:	cmp	r3, #0
   37064:	addne	r0, r0, #1
   37068:	str	r0, [r4, #20]
   3706c:	vcvt.f64.f32	d0, s16
   37070:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   37074:	ldr	r3, [r4, #20]
   37078:	add	r0, r3, r0
   3707c:	str	r0, [r4, #20]
   37080:	vpop	{d8}
   37084:	ldrd	r4, [sp]
   37088:	ldr	r6, [sp, #8]
   3708c:	add	sp, sp, #12
   37090:	pop	{pc}		; (ldr pc, [sp], #4)
   37094:	ldr	r3, [r4, #20]
   37098:	add	r2, r3, #1
   3709c:	str	r2, [r4, #20]
   370a0:	mov	r2, #10
   370a4:	strb	r2, [r3]
   370a8:	ldrb	r3, [r4, #25]
   370ac:	ldr	r6, [r4, #32]
   370b0:	mul	r6, r6, r3
   370b4:	ldr	r0, [r4, #20]
   370b8:	add	r3, r0, r6
   370bc:	ldr	r2, [r4, #16]
   370c0:	cmp	r2, r3
   370c4:	bcs	370d8 <flatcc_json_printer_float_struct_field@@Base+0x16c>
   370c8:	mov	r1, r6
   370cc:	mov	r0, r4
   370d0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   370d4:	b	36fd4 <flatcc_json_printer_float_struct_field@@Base+0x68>
   370d8:	mov	r2, r6
   370dc:	mov	r1, #32
   370e0:	bl	1459c <memset@plt>
   370e4:	ldr	r3, [r4, #20]
   370e8:	add	r6, r3, r6
   370ec:	str	r6, [r4, #20]
   370f0:	b	36fd4 <flatcc_json_printer_float_struct_field@@Base+0x68>
   370f4:	mov	r2, r5
   370f8:	ldr	r1, [sp, #24]
   370fc:	mov	r0, r4
   37100:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   37104:	b	3701c <flatcc_json_printer_float_struct_field@@Base+0xb0>

00037108 <flatcc_json_printer_double_struct_field@@Base>:
   37108:	strd	r4, [sp, #-16]!
   3710c:	str	r6, [sp, #8]
   37110:	str	lr, [sp, #12]
   37114:	vpush	{d8}
   37118:	mov	r4, r0
   3711c:	ldr	r5, [sp, #28]
   37120:	add	r3, r2, r3
   37124:	vldr	d8, [r3]
   37128:	cmp	r1, #0
   3712c:	beq	37144 <flatcc_json_printer_double_struct_field@@Base+0x3c>
   37130:	ldr	r3, [r0, #20]
   37134:	add	r2, r3, #1
   37138:	str	r2, [r0, #20]
   3713c:	mov	r2, #44	; 0x2c
   37140:	strb	r2, [r3]
   37144:	ldrb	r3, [r4, #25]
   37148:	cmp	r3, #0
   3714c:	bne	37230 <flatcc_json_printer_double_struct_field@@Base+0x128>
   37150:	ldr	r2, [r4, #20]
   37154:	ldr	r3, [r4, #16]
   37158:	cmp	r2, r3
   3715c:	bcc	37170 <flatcc_json_printer_double_struct_field@@Base+0x68>
   37160:	ldr	r3, [r4, #44]	; 0x2c
   37164:	mov	r1, #0
   37168:	mov	r0, r4
   3716c:	blx	r3
   37170:	ldr	r3, [r4, #20]
   37174:	mov	r2, #34	; 0x22
   37178:	strb	r2, [r3]
   3717c:	ldrb	r3, [r4, #26]
   37180:	ldr	r0, [r4, #20]
   37184:	cmp	r3, #0
   37188:	addeq	r0, r0, #1
   3718c:	str	r0, [r4, #20]
   37190:	add	r3, r0, r5
   37194:	ldr	r2, [r4, #16]
   37198:	cmp	r2, r3
   3719c:	bls	37290 <flatcc_json_printer_double_struct_field@@Base+0x188>
   371a0:	mov	r2, r5
   371a4:	ldr	r1, [sp, #24]
   371a8:	bl	14524 <memcpy@plt>
   371ac:	ldr	r3, [r4, #20]
   371b0:	add	r5, r3, r5
   371b4:	str	r5, [r4, #20]
   371b8:	ldr	r3, [r4, #20]
   371bc:	mov	r2, #34	; 0x22
   371c0:	strb	r2, [r3]
   371c4:	ldrb	r3, [r4, #26]
   371c8:	clz	r3, r3
   371cc:	lsr	r3, r3, #5
   371d0:	ldr	r1, [r4, #20]
   371d4:	add	r2, r1, r3
   371d8:	add	r2, r2, #1
   371dc:	str	r2, [r4, #20]
   371e0:	mov	r2, #58	; 0x3a
   371e4:	strb	r2, [r1, r3]
   371e8:	ldr	r3, [r4, #20]
   371ec:	mov	r2, #32
   371f0:	strb	r2, [r3]
   371f4:	ldrb	r3, [r4, #25]
   371f8:	ldr	r0, [r4, #20]
   371fc:	cmp	r3, #0
   37200:	addne	r0, r0, #1
   37204:	str	r0, [r4, #20]
   37208:	vmov.f64	d0, d8
   3720c:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   37210:	ldr	r3, [r4, #20]
   37214:	add	r0, r3, r0
   37218:	str	r0, [r4, #20]
   3721c:	vpop	{d8}
   37220:	ldrd	r4, [sp]
   37224:	ldr	r6, [sp, #8]
   37228:	add	sp, sp, #12
   3722c:	pop	{pc}		; (ldr pc, [sp], #4)
   37230:	ldr	r3, [r4, #20]
   37234:	add	r2, r3, #1
   37238:	str	r2, [r4, #20]
   3723c:	mov	r2, #10
   37240:	strb	r2, [r3]
   37244:	ldrb	r3, [r4, #25]
   37248:	ldr	r6, [r4, #32]
   3724c:	mul	r6, r6, r3
   37250:	ldr	r0, [r4, #20]
   37254:	add	r3, r0, r6
   37258:	ldr	r2, [r4, #16]
   3725c:	cmp	r2, r3
   37260:	bcs	37274 <flatcc_json_printer_double_struct_field@@Base+0x16c>
   37264:	mov	r1, r6
   37268:	mov	r0, r4
   3726c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   37270:	b	37170 <flatcc_json_printer_double_struct_field@@Base+0x68>
   37274:	mov	r2, r6
   37278:	mov	r1, #32
   3727c:	bl	1459c <memset@plt>
   37280:	ldr	r3, [r4, #20]
   37284:	add	r6, r3, r6
   37288:	str	r6, [r4, #20]
   3728c:	b	37170 <flatcc_json_printer_double_struct_field@@Base+0x68>
   37290:	mov	r2, r5
   37294:	ldr	r1, [sp, #24]
   37298:	mov	r0, r4
   3729c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   372a0:	b	371b8 <flatcc_json_printer_double_struct_field@@Base+0xb0>

000372a4 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   372a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   372a8:	strd	r6, [sp, #8]
   372ac:	str	r8, [sp, #16]
   372b0:	str	lr, [sp, #20]
   372b4:	mov	r4, r0
   372b8:	ldr	r6, [sp, #28]
   372bc:	ldrb	r5, [r2, r3]
   372c0:	cmp	r1, #0
   372c4:	beq	372dc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x38>
   372c8:	ldr	r3, [r0, #20]
   372cc:	add	r2, r3, #1
   372d0:	str	r2, [r0, #20]
   372d4:	mov	r2, #44	; 0x2c
   372d8:	strb	r2, [r3]
   372dc:	ldrb	r3, [r4, #25]
   372e0:	cmp	r3, #0
   372e4:	bne	373d0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x12c>
   372e8:	ldr	r2, [r4, #20]
   372ec:	ldr	r3, [r4, #16]
   372f0:	cmp	r2, r3
   372f4:	bcc	37308 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x64>
   372f8:	ldr	r3, [r4, #44]	; 0x2c
   372fc:	mov	r1, #0
   37300:	mov	r0, r4
   37304:	blx	r3
   37308:	ldr	r3, [r4, #20]
   3730c:	mov	r2, #34	; 0x22
   37310:	strb	r2, [r3]
   37314:	ldrb	r3, [r4, #26]
   37318:	ldr	r0, [r4, #20]
   3731c:	cmp	r3, #0
   37320:	addeq	r0, r0, #1
   37324:	str	r0, [r4, #20]
   37328:	add	r3, r0, r6
   3732c:	ldr	r2, [r4, #16]
   37330:	cmp	r2, r3
   37334:	bls	37430 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x18c>
   37338:	mov	r2, r6
   3733c:	ldr	r1, [sp, #24]
   37340:	bl	14524 <memcpy@plt>
   37344:	ldr	r3, [r4, #20]
   37348:	add	r6, r3, r6
   3734c:	str	r6, [r4, #20]
   37350:	ldr	r3, [r4, #20]
   37354:	mov	r2, #34	; 0x22
   37358:	strb	r2, [r3]
   3735c:	ldrb	r3, [r4, #26]
   37360:	clz	r3, r3
   37364:	lsr	r3, r3, #5
   37368:	ldr	r1, [r4, #20]
   3736c:	add	r2, r1, r3
   37370:	add	r2, r2, #1
   37374:	str	r2, [r4, #20]
   37378:	mov	r2, #58	; 0x3a
   3737c:	strb	r2, [r1, r3]
   37380:	ldr	r3, [r4, #20]
   37384:	mov	r2, #32
   37388:	strb	r2, [r3]
   3738c:	ldrb	r3, [r4, #25]
   37390:	ldr	r1, [r4, #20]
   37394:	cmp	r3, #0
   37398:	addne	r1, r1, #1
   3739c:	str	r1, [r4, #20]
   373a0:	ldrb	r3, [r4, #27]
   373a4:	cmp	r3, #0
   373a8:	bne	37444 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1a0>
   373ac:	mov	r1, r5
   373b0:	mov	r0, r4
   373b4:	ldr	r3, [sp, #32]
   373b8:	blx	r3
   373bc:	ldrd	r4, [sp]
   373c0:	ldrd	r6, [sp, #8]
   373c4:	ldr	r8, [sp, #16]
   373c8:	add	sp, sp, #20
   373cc:	pop	{pc}		; (ldr pc, [sp], #4)
   373d0:	ldr	r3, [r4, #20]
   373d4:	add	r2, r3, #1
   373d8:	str	r2, [r4, #20]
   373dc:	mov	r2, #10
   373e0:	strb	r2, [r3]
   373e4:	ldrb	r3, [r4, #25]
   373e8:	ldr	r7, [r4, #32]
   373ec:	mul	r7, r7, r3
   373f0:	ldr	r0, [r4, #20]
   373f4:	add	r3, r0, r7
   373f8:	ldr	r2, [r4, #16]
   373fc:	cmp	r2, r3
   37400:	bcs	37414 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x170>
   37404:	mov	r1, r7
   37408:	mov	r0, r4
   3740c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   37410:	b	37308 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x64>
   37414:	mov	r2, r7
   37418:	mov	r1, #32
   3741c:	bl	1459c <memset@plt>
   37420:	ldr	r3, [r4, #20]
   37424:	add	r7, r3, r7
   37428:	str	r7, [r4, #20]
   3742c:	b	37308 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x64>
   37430:	mov	r2, r6
   37434:	ldr	r1, [sp, #24]
   37438:	mov	r0, r4
   3743c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   37440:	b	37350 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xac>
   37444:	mov	r0, r5
   37448:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   3744c:	ldr	r3, [r4, #20]
   37450:	add	r0, r3, r0
   37454:	str	r0, [r4, #20]
   37458:	b	373bc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x118>

0003745c <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   3745c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37460:	strd	r6, [sp, #8]
   37464:	str	r8, [sp, #16]
   37468:	str	lr, [sp, #20]
   3746c:	mov	r4, r0
   37470:	ldr	r6, [sp, #28]
   37474:	ldrh	r5, [r2, r3]
   37478:	cmp	r1, #0
   3747c:	beq	37494 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x38>
   37480:	ldr	r3, [r0, #20]
   37484:	add	r2, r3, #1
   37488:	str	r2, [r0, #20]
   3748c:	mov	r2, #44	; 0x2c
   37490:	strb	r2, [r3]
   37494:	ldrb	r3, [r4, #25]
   37498:	cmp	r3, #0
   3749c:	bne	37588 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x12c>
   374a0:	ldr	r2, [r4, #20]
   374a4:	ldr	r3, [r4, #16]
   374a8:	cmp	r2, r3
   374ac:	bcc	374c0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x64>
   374b0:	ldr	r3, [r4, #44]	; 0x2c
   374b4:	mov	r1, #0
   374b8:	mov	r0, r4
   374bc:	blx	r3
   374c0:	ldr	r3, [r4, #20]
   374c4:	mov	r2, #34	; 0x22
   374c8:	strb	r2, [r3]
   374cc:	ldrb	r3, [r4, #26]
   374d0:	ldr	r0, [r4, #20]
   374d4:	cmp	r3, #0
   374d8:	addeq	r0, r0, #1
   374dc:	str	r0, [r4, #20]
   374e0:	add	r3, r0, r6
   374e4:	ldr	r2, [r4, #16]
   374e8:	cmp	r2, r3
   374ec:	bls	375e8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x18c>
   374f0:	mov	r2, r6
   374f4:	ldr	r1, [sp, #24]
   374f8:	bl	14524 <memcpy@plt>
   374fc:	ldr	r3, [r4, #20]
   37500:	add	r6, r3, r6
   37504:	str	r6, [r4, #20]
   37508:	ldr	r3, [r4, #20]
   3750c:	mov	r2, #34	; 0x22
   37510:	strb	r2, [r3]
   37514:	ldrb	r3, [r4, #26]
   37518:	clz	r3, r3
   3751c:	lsr	r3, r3, #5
   37520:	ldr	r1, [r4, #20]
   37524:	add	r2, r1, r3
   37528:	add	r2, r2, #1
   3752c:	str	r2, [r4, #20]
   37530:	mov	r2, #58	; 0x3a
   37534:	strb	r2, [r1, r3]
   37538:	ldr	r3, [r4, #20]
   3753c:	mov	r2, #32
   37540:	strb	r2, [r3]
   37544:	ldrb	r3, [r4, #25]
   37548:	ldr	r1, [r4, #20]
   3754c:	cmp	r3, #0
   37550:	addne	r1, r1, #1
   37554:	str	r1, [r4, #20]
   37558:	ldrb	r3, [r4, #27]
   3755c:	cmp	r3, #0
   37560:	bne	375fc <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1a0>
   37564:	mov	r1, r5
   37568:	mov	r0, r4
   3756c:	ldr	r3, [sp, #32]
   37570:	blx	r3
   37574:	ldrd	r4, [sp]
   37578:	ldrd	r6, [sp, #8]
   3757c:	ldr	r8, [sp, #16]
   37580:	add	sp, sp, #20
   37584:	pop	{pc}		; (ldr pc, [sp], #4)
   37588:	ldr	r3, [r4, #20]
   3758c:	add	r2, r3, #1
   37590:	str	r2, [r4, #20]
   37594:	mov	r2, #10
   37598:	strb	r2, [r3]
   3759c:	ldrb	r3, [r4, #25]
   375a0:	ldr	r7, [r4, #32]
   375a4:	mul	r7, r7, r3
   375a8:	ldr	r0, [r4, #20]
   375ac:	add	r3, r0, r7
   375b0:	ldr	r2, [r4, #16]
   375b4:	cmp	r2, r3
   375b8:	bcs	375cc <flatcc_json_printer_uint16_enum_struct_field@@Base+0x170>
   375bc:	mov	r1, r7
   375c0:	mov	r0, r4
   375c4:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   375c8:	b	374c0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x64>
   375cc:	mov	r2, r7
   375d0:	mov	r1, #32
   375d4:	bl	1459c <memset@plt>
   375d8:	ldr	r3, [r4, #20]
   375dc:	add	r7, r3, r7
   375e0:	str	r7, [r4, #20]
   375e4:	b	374c0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x64>
   375e8:	mov	r2, r6
   375ec:	ldr	r1, [sp, #24]
   375f0:	mov	r0, r4
   375f4:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   375f8:	b	37508 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xac>
   375fc:	mov	r0, r5
   37600:	bl	30688 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   37604:	ldr	r3, [r4, #20]
   37608:	add	r0, r3, r0
   3760c:	str	r0, [r4, #20]
   37610:	b	37574 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x118>

00037614 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   37614:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37618:	strd	r6, [sp, #8]
   3761c:	str	r8, [sp, #16]
   37620:	str	lr, [sp, #20]
   37624:	mov	r4, r0
   37628:	ldr	r6, [sp, #28]
   3762c:	ldr	r5, [r2, r3]
   37630:	cmp	r1, #0
   37634:	beq	3764c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x38>
   37638:	ldr	r3, [r0, #20]
   3763c:	add	r2, r3, #1
   37640:	str	r2, [r0, #20]
   37644:	mov	r2, #44	; 0x2c
   37648:	strb	r2, [r3]
   3764c:	ldrb	r3, [r4, #25]
   37650:	cmp	r3, #0
   37654:	bne	37740 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x12c>
   37658:	ldr	r2, [r4, #20]
   3765c:	ldr	r3, [r4, #16]
   37660:	cmp	r2, r3
   37664:	bcc	37678 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x64>
   37668:	ldr	r3, [r4, #44]	; 0x2c
   3766c:	mov	r1, #0
   37670:	mov	r0, r4
   37674:	blx	r3
   37678:	ldr	r3, [r4, #20]
   3767c:	mov	r2, #34	; 0x22
   37680:	strb	r2, [r3]
   37684:	ldrb	r3, [r4, #26]
   37688:	ldr	r0, [r4, #20]
   3768c:	cmp	r3, #0
   37690:	addeq	r0, r0, #1
   37694:	str	r0, [r4, #20]
   37698:	add	r3, r0, r6
   3769c:	ldr	r2, [r4, #16]
   376a0:	cmp	r2, r3
   376a4:	bls	377a0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x18c>
   376a8:	mov	r2, r6
   376ac:	ldr	r1, [sp, #24]
   376b0:	bl	14524 <memcpy@plt>
   376b4:	ldr	r3, [r4, #20]
   376b8:	add	r6, r3, r6
   376bc:	str	r6, [r4, #20]
   376c0:	ldr	r3, [r4, #20]
   376c4:	mov	r2, #34	; 0x22
   376c8:	strb	r2, [r3]
   376cc:	ldrb	r3, [r4, #26]
   376d0:	clz	r3, r3
   376d4:	lsr	r3, r3, #5
   376d8:	ldr	r1, [r4, #20]
   376dc:	add	r2, r1, r3
   376e0:	add	r2, r2, #1
   376e4:	str	r2, [r4, #20]
   376e8:	mov	r2, #58	; 0x3a
   376ec:	strb	r2, [r1, r3]
   376f0:	ldr	r3, [r4, #20]
   376f4:	mov	r2, #32
   376f8:	strb	r2, [r3]
   376fc:	ldrb	r3, [r4, #25]
   37700:	ldr	r1, [r4, #20]
   37704:	cmp	r3, #0
   37708:	addne	r1, r1, #1
   3770c:	str	r1, [r4, #20]
   37710:	ldrb	r3, [r4, #27]
   37714:	cmp	r3, #0
   37718:	bne	377b4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1a0>
   3771c:	mov	r1, r5
   37720:	mov	r0, r4
   37724:	ldr	r3, [sp, #32]
   37728:	blx	r3
   3772c:	ldrd	r4, [sp]
   37730:	ldrd	r6, [sp, #8]
   37734:	ldr	r8, [sp, #16]
   37738:	add	sp, sp, #20
   3773c:	pop	{pc}		; (ldr pc, [sp], #4)
   37740:	ldr	r3, [r4, #20]
   37744:	add	r2, r3, #1
   37748:	str	r2, [r4, #20]
   3774c:	mov	r2, #10
   37750:	strb	r2, [r3]
   37754:	ldrb	r3, [r4, #25]
   37758:	ldr	r7, [r4, #32]
   3775c:	mul	r7, r7, r3
   37760:	ldr	r0, [r4, #20]
   37764:	add	r3, r0, r7
   37768:	ldr	r2, [r4, #16]
   3776c:	cmp	r2, r3
   37770:	bcs	37784 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x170>
   37774:	mov	r1, r7
   37778:	mov	r0, r4
   3777c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   37780:	b	37678 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x64>
   37784:	mov	r2, r7
   37788:	mov	r1, #32
   3778c:	bl	1459c <memset@plt>
   37790:	ldr	r3, [r4, #20]
   37794:	add	r7, r3, r7
   37798:	str	r7, [r4, #20]
   3779c:	b	37678 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x64>
   377a0:	mov	r2, r6
   377a4:	ldr	r1, [sp, #24]
   377a8:	mov	r0, r4
   377ac:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   377b0:	b	376c0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xac>
   377b4:	mov	r0, r5
   377b8:	bl	3081c <flatcc_json_parser_struct_as_root@@Base+0x344>
   377bc:	ldr	r3, [r4, #20]
   377c0:	add	r0, r3, r0
   377c4:	str	r0, [r4, #20]
   377c8:	b	3772c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x118>

000377cc <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   377cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   377d0:	strd	r6, [sp, #8]
   377d4:	str	r8, [sp, #16]
   377d8:	str	lr, [sp, #20]
   377dc:	mov	r4, r0
   377e0:	ldr	r5, [sp, #28]
   377e4:	ldrd	r6, [r2, r3]
   377e8:	cmp	r1, #0
   377ec:	beq	37804 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x38>
   377f0:	ldr	r3, [r0, #20]
   377f4:	add	r2, r3, #1
   377f8:	str	r2, [r0, #20]
   377fc:	mov	r2, #44	; 0x2c
   37800:	strb	r2, [r3]
   37804:	ldrb	r3, [r4, #25]
   37808:	cmp	r3, #0
   3780c:	bne	378fc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x130>
   37810:	ldr	r2, [r4, #20]
   37814:	ldr	r3, [r4, #16]
   37818:	cmp	r2, r3
   3781c:	bcc	37830 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x64>
   37820:	ldr	r3, [r4, #44]	; 0x2c
   37824:	mov	r1, #0
   37828:	mov	r0, r4
   3782c:	blx	r3
   37830:	ldr	r3, [r4, #20]
   37834:	mov	r2, #34	; 0x22
   37838:	strb	r2, [r3]
   3783c:	ldrb	r3, [r4, #26]
   37840:	ldr	r0, [r4, #20]
   37844:	cmp	r3, #0
   37848:	addeq	r0, r0, #1
   3784c:	str	r0, [r4, #20]
   37850:	add	r3, r0, r5
   37854:	ldr	r2, [r4, #16]
   37858:	cmp	r2, r3
   3785c:	bls	3795c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x190>
   37860:	mov	r2, r5
   37864:	ldr	r1, [sp, #24]
   37868:	bl	14524 <memcpy@plt>
   3786c:	ldr	r3, [r4, #20]
   37870:	add	r5, r3, r5
   37874:	str	r5, [r4, #20]
   37878:	ldr	r3, [r4, #20]
   3787c:	mov	r2, #34	; 0x22
   37880:	strb	r2, [r3]
   37884:	ldrb	r3, [r4, #26]
   37888:	clz	r3, r3
   3788c:	lsr	r3, r3, #5
   37890:	ldr	r1, [r4, #20]
   37894:	add	r2, r1, r3
   37898:	add	r2, r2, #1
   3789c:	str	r2, [r4, #20]
   378a0:	mov	r2, #58	; 0x3a
   378a4:	strb	r2, [r1, r3]
   378a8:	ldr	r3, [r4, #20]
   378ac:	mov	r2, #32
   378b0:	strb	r2, [r3]
   378b4:	ldrb	r3, [r4, #25]
   378b8:	ldr	r2, [r4, #20]
   378bc:	cmp	r3, #0
   378c0:	addne	r2, r2, #1
   378c4:	str	r2, [r4, #20]
   378c8:	ldrb	r3, [r4, #27]
   378cc:	cmp	r3, #0
   378d0:	bne	37970 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1a4>
   378d4:	mov	r2, r6
   378d8:	mov	r3, r7
   378dc:	mov	r0, r4
   378e0:	ldr	r1, [sp, #32]
   378e4:	blx	r1
   378e8:	ldrd	r4, [sp]
   378ec:	ldrd	r6, [sp, #8]
   378f0:	ldr	r8, [sp, #16]
   378f4:	add	sp, sp, #20
   378f8:	pop	{pc}		; (ldr pc, [sp], #4)
   378fc:	ldr	r3, [r4, #20]
   37900:	add	r2, r3, #1
   37904:	str	r2, [r4, #20]
   37908:	mov	r2, #10
   3790c:	strb	r2, [r3]
   37910:	ldrb	r3, [r4, #25]
   37914:	ldr	r8, [r4, #32]
   37918:	mul	r8, r8, r3
   3791c:	ldr	r0, [r4, #20]
   37920:	add	r3, r0, r8
   37924:	ldr	r2, [r4, #16]
   37928:	cmp	r2, r3
   3792c:	bcs	37940 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x174>
   37930:	mov	r1, r8
   37934:	mov	r0, r4
   37938:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3793c:	b	37830 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x64>
   37940:	mov	r2, r8
   37944:	mov	r1, #32
   37948:	bl	1459c <memset@plt>
   3794c:	ldr	r3, [r4, #20]
   37950:	add	r8, r3, r8
   37954:	str	r8, [r4, #20]
   37958:	b	37830 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x64>
   3795c:	mov	r2, r5
   37960:	ldr	r1, [sp, #24]
   37964:	mov	r0, r4
   37968:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3796c:	b	37878 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xac>
   37970:	mov	r0, r6
   37974:	mov	r1, r7
   37978:	bl	30b80 <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   3797c:	ldr	r3, [r4, #20]
   37980:	add	r0, r3, r0
   37984:	str	r0, [r4, #20]
   37988:	b	378e8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x11c>

0003798c <flatcc_json_printer_int8_enum_struct_field@@Base>:
   3798c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37990:	strd	r6, [sp, #8]
   37994:	str	r8, [sp, #16]
   37998:	str	lr, [sp, #20]
   3799c:	mov	r4, r0
   379a0:	ldr	r6, [sp, #28]
   379a4:	ldrsb	r5, [r2, r3]
   379a8:	cmp	r1, #0
   379ac:	beq	379c4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x38>
   379b0:	ldr	r3, [r0, #20]
   379b4:	add	r2, r3, #1
   379b8:	str	r2, [r0, #20]
   379bc:	mov	r2, #44	; 0x2c
   379c0:	strb	r2, [r3]
   379c4:	ldrb	r3, [r4, #25]
   379c8:	cmp	r3, #0
   379cc:	bne	37ab8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x12c>
   379d0:	ldr	r2, [r4, #20]
   379d4:	ldr	r3, [r4, #16]
   379d8:	cmp	r2, r3
   379dc:	bcc	379f0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x64>
   379e0:	ldr	r3, [r4, #44]	; 0x2c
   379e4:	mov	r1, #0
   379e8:	mov	r0, r4
   379ec:	blx	r3
   379f0:	ldr	r3, [r4, #20]
   379f4:	mov	r2, #34	; 0x22
   379f8:	strb	r2, [r3]
   379fc:	ldrb	r3, [r4, #26]
   37a00:	ldr	r0, [r4, #20]
   37a04:	cmp	r3, #0
   37a08:	addeq	r0, r0, #1
   37a0c:	str	r0, [r4, #20]
   37a10:	add	r3, r0, r6
   37a14:	ldr	r2, [r4, #16]
   37a18:	cmp	r2, r3
   37a1c:	bls	37b18 <flatcc_json_printer_int8_enum_struct_field@@Base+0x18c>
   37a20:	mov	r2, r6
   37a24:	ldr	r1, [sp, #24]
   37a28:	bl	14524 <memcpy@plt>
   37a2c:	ldr	r3, [r4, #20]
   37a30:	add	r6, r3, r6
   37a34:	str	r6, [r4, #20]
   37a38:	ldr	r3, [r4, #20]
   37a3c:	mov	r2, #34	; 0x22
   37a40:	strb	r2, [r3]
   37a44:	ldrb	r3, [r4, #26]
   37a48:	clz	r3, r3
   37a4c:	lsr	r3, r3, #5
   37a50:	ldr	r1, [r4, #20]
   37a54:	add	r2, r1, r3
   37a58:	add	r2, r2, #1
   37a5c:	str	r2, [r4, #20]
   37a60:	mov	r2, #58	; 0x3a
   37a64:	strb	r2, [r1, r3]
   37a68:	ldr	r3, [r4, #20]
   37a6c:	mov	r2, #32
   37a70:	strb	r2, [r3]
   37a74:	ldrb	r3, [r4, #25]
   37a78:	ldr	r1, [r4, #20]
   37a7c:	cmp	r3, #0
   37a80:	addne	r1, r1, #1
   37a84:	str	r1, [r4, #20]
   37a88:	ldrb	r3, [r4, #27]
   37a8c:	cmp	r3, #0
   37a90:	bne	37b2c <flatcc_json_printer_int8_enum_struct_field@@Base+0x1a0>
   37a94:	mov	r1, r5
   37a98:	mov	r0, r4
   37a9c:	ldr	r3, [sp, #32]
   37aa0:	blx	r3
   37aa4:	ldrd	r4, [sp]
   37aa8:	ldrd	r6, [sp, #8]
   37aac:	ldr	r8, [sp, #16]
   37ab0:	add	sp, sp, #20
   37ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   37ab8:	ldr	r3, [r4, #20]
   37abc:	add	r2, r3, #1
   37ac0:	str	r2, [r4, #20]
   37ac4:	mov	r2, #10
   37ac8:	strb	r2, [r3]
   37acc:	ldrb	r3, [r4, #25]
   37ad0:	ldr	r7, [r4, #32]
   37ad4:	mul	r7, r7, r3
   37ad8:	ldr	r0, [r4, #20]
   37adc:	add	r3, r0, r7
   37ae0:	ldr	r2, [r4, #16]
   37ae4:	cmp	r2, r3
   37ae8:	bcs	37afc <flatcc_json_printer_int8_enum_struct_field@@Base+0x170>
   37aec:	mov	r1, r7
   37af0:	mov	r0, r4
   37af4:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   37af8:	b	379f0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x64>
   37afc:	mov	r2, r7
   37b00:	mov	r1, #32
   37b04:	bl	1459c <memset@plt>
   37b08:	ldr	r3, [r4, #20]
   37b0c:	add	r7, r3, r7
   37b10:	str	r7, [r4, #20]
   37b14:	b	379f0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x64>
   37b18:	mov	r2, r6
   37b1c:	ldr	r1, [sp, #24]
   37b20:	mov	r0, r4
   37b24:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   37b28:	b	37a38 <flatcc_json_printer_int8_enum_struct_field@@Base+0xac>
   37b2c:	mov	r0, r5
   37b30:	bl	3125c <flatcc_json_parser_struct_as_root@@Base+0xd84>
   37b34:	ldr	r3, [r4, #20]
   37b38:	add	r0, r3, r0
   37b3c:	str	r0, [r4, #20]
   37b40:	b	37aa4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x118>

00037b44 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   37b44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37b48:	strd	r6, [sp, #8]
   37b4c:	str	r8, [sp, #16]
   37b50:	str	lr, [sp, #20]
   37b54:	mov	r4, r0
   37b58:	ldr	r6, [sp, #28]
   37b5c:	ldrsh	r5, [r2, r3]
   37b60:	cmp	r1, #0
   37b64:	beq	37b7c <flatcc_json_printer_int16_enum_struct_field@@Base+0x38>
   37b68:	ldr	r3, [r0, #20]
   37b6c:	add	r2, r3, #1
   37b70:	str	r2, [r0, #20]
   37b74:	mov	r2, #44	; 0x2c
   37b78:	strb	r2, [r3]
   37b7c:	ldrb	r3, [r4, #25]
   37b80:	cmp	r3, #0
   37b84:	bne	37c70 <flatcc_json_printer_int16_enum_struct_field@@Base+0x12c>
   37b88:	ldr	r2, [r4, #20]
   37b8c:	ldr	r3, [r4, #16]
   37b90:	cmp	r2, r3
   37b94:	bcc	37ba8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x64>
   37b98:	ldr	r3, [r4, #44]	; 0x2c
   37b9c:	mov	r1, #0
   37ba0:	mov	r0, r4
   37ba4:	blx	r3
   37ba8:	ldr	r3, [r4, #20]
   37bac:	mov	r2, #34	; 0x22
   37bb0:	strb	r2, [r3]
   37bb4:	ldrb	r3, [r4, #26]
   37bb8:	ldr	r0, [r4, #20]
   37bbc:	cmp	r3, #0
   37bc0:	addeq	r0, r0, #1
   37bc4:	str	r0, [r4, #20]
   37bc8:	add	r3, r0, r6
   37bcc:	ldr	r2, [r4, #16]
   37bd0:	cmp	r2, r3
   37bd4:	bls	37cd0 <flatcc_json_printer_int16_enum_struct_field@@Base+0x18c>
   37bd8:	mov	r2, r6
   37bdc:	ldr	r1, [sp, #24]
   37be0:	bl	14524 <memcpy@plt>
   37be4:	ldr	r3, [r4, #20]
   37be8:	add	r6, r3, r6
   37bec:	str	r6, [r4, #20]
   37bf0:	ldr	r3, [r4, #20]
   37bf4:	mov	r2, #34	; 0x22
   37bf8:	strb	r2, [r3]
   37bfc:	ldrb	r3, [r4, #26]
   37c00:	clz	r3, r3
   37c04:	lsr	r3, r3, #5
   37c08:	ldr	r1, [r4, #20]
   37c0c:	add	r2, r1, r3
   37c10:	add	r2, r2, #1
   37c14:	str	r2, [r4, #20]
   37c18:	mov	r2, #58	; 0x3a
   37c1c:	strb	r2, [r1, r3]
   37c20:	ldr	r3, [r4, #20]
   37c24:	mov	r2, #32
   37c28:	strb	r2, [r3]
   37c2c:	ldrb	r3, [r4, #25]
   37c30:	ldr	r1, [r4, #20]
   37c34:	cmp	r3, #0
   37c38:	addne	r1, r1, #1
   37c3c:	str	r1, [r4, #20]
   37c40:	ldrb	r3, [r4, #27]
   37c44:	cmp	r3, #0
   37c48:	bne	37ce4 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1a0>
   37c4c:	mov	r1, r5
   37c50:	mov	r0, r4
   37c54:	ldr	r3, [sp, #32]
   37c58:	blx	r3
   37c5c:	ldrd	r4, [sp]
   37c60:	ldrd	r6, [sp, #8]
   37c64:	ldr	r8, [sp, #16]
   37c68:	add	sp, sp, #20
   37c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   37c70:	ldr	r3, [r4, #20]
   37c74:	add	r2, r3, #1
   37c78:	str	r2, [r4, #20]
   37c7c:	mov	r2, #10
   37c80:	strb	r2, [r3]
   37c84:	ldrb	r3, [r4, #25]
   37c88:	ldr	r7, [r4, #32]
   37c8c:	mul	r7, r7, r3
   37c90:	ldr	r0, [r4, #20]
   37c94:	add	r3, r0, r7
   37c98:	ldr	r2, [r4, #16]
   37c9c:	cmp	r2, r3
   37ca0:	bcs	37cb4 <flatcc_json_printer_int16_enum_struct_field@@Base+0x170>
   37ca4:	mov	r1, r7
   37ca8:	mov	r0, r4
   37cac:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   37cb0:	b	37ba8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x64>
   37cb4:	mov	r2, r7
   37cb8:	mov	r1, #32
   37cbc:	bl	1459c <memset@plt>
   37cc0:	ldr	r3, [r4, #20]
   37cc4:	add	r7, r3, r7
   37cc8:	str	r7, [r4, #20]
   37ccc:	b	37ba8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x64>
   37cd0:	mov	r2, r6
   37cd4:	ldr	r1, [sp, #24]
   37cd8:	mov	r0, r4
   37cdc:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   37ce0:	b	37bf0 <flatcc_json_printer_int16_enum_struct_field@@Base+0xac>
   37ce4:	mov	r0, r5
   37ce8:	bl	3129c <flatcc_json_parser_struct_as_root@@Base+0xdc4>
   37cec:	ldr	r3, [r4, #20]
   37cf0:	add	r0, r3, r0
   37cf4:	str	r0, [r4, #20]
   37cf8:	b	37c5c <flatcc_json_printer_int16_enum_struct_field@@Base+0x118>

00037cfc <flatcc_json_printer_int32_enum_struct_field@@Base>:
   37cfc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37d00:	strd	r6, [sp, #8]
   37d04:	str	r8, [sp, #16]
   37d08:	str	lr, [sp, #20]
   37d0c:	mov	r4, r0
   37d10:	ldr	r6, [sp, #28]
   37d14:	ldr	r5, [r2, r3]
   37d18:	cmp	r1, #0
   37d1c:	beq	37d34 <flatcc_json_printer_int32_enum_struct_field@@Base+0x38>
   37d20:	ldr	r3, [r0, #20]
   37d24:	add	r2, r3, #1
   37d28:	str	r2, [r0, #20]
   37d2c:	mov	r2, #44	; 0x2c
   37d30:	strb	r2, [r3]
   37d34:	ldrb	r3, [r4, #25]
   37d38:	cmp	r3, #0
   37d3c:	bne	37e28 <flatcc_json_printer_int32_enum_struct_field@@Base+0x12c>
   37d40:	ldr	r2, [r4, #20]
   37d44:	ldr	r3, [r4, #16]
   37d48:	cmp	r2, r3
   37d4c:	bcc	37d60 <flatcc_json_printer_int32_enum_struct_field@@Base+0x64>
   37d50:	ldr	r3, [r4, #44]	; 0x2c
   37d54:	mov	r1, #0
   37d58:	mov	r0, r4
   37d5c:	blx	r3
   37d60:	ldr	r3, [r4, #20]
   37d64:	mov	r2, #34	; 0x22
   37d68:	strb	r2, [r3]
   37d6c:	ldrb	r3, [r4, #26]
   37d70:	ldr	r0, [r4, #20]
   37d74:	cmp	r3, #0
   37d78:	addeq	r0, r0, #1
   37d7c:	str	r0, [r4, #20]
   37d80:	add	r3, r0, r6
   37d84:	ldr	r2, [r4, #16]
   37d88:	cmp	r2, r3
   37d8c:	bls	37e88 <flatcc_json_printer_int32_enum_struct_field@@Base+0x18c>
   37d90:	mov	r2, r6
   37d94:	ldr	r1, [sp, #24]
   37d98:	bl	14524 <memcpy@plt>
   37d9c:	ldr	r3, [r4, #20]
   37da0:	add	r6, r3, r6
   37da4:	str	r6, [r4, #20]
   37da8:	ldr	r3, [r4, #20]
   37dac:	mov	r2, #34	; 0x22
   37db0:	strb	r2, [r3]
   37db4:	ldrb	r3, [r4, #26]
   37db8:	clz	r3, r3
   37dbc:	lsr	r3, r3, #5
   37dc0:	ldr	r1, [r4, #20]
   37dc4:	add	r2, r1, r3
   37dc8:	add	r2, r2, #1
   37dcc:	str	r2, [r4, #20]
   37dd0:	mov	r2, #58	; 0x3a
   37dd4:	strb	r2, [r1, r3]
   37dd8:	ldr	r3, [r4, #20]
   37ddc:	mov	r2, #32
   37de0:	strb	r2, [r3]
   37de4:	ldrb	r3, [r4, #25]
   37de8:	ldr	r1, [r4, #20]
   37dec:	cmp	r3, #0
   37df0:	addne	r1, r1, #1
   37df4:	str	r1, [r4, #20]
   37df8:	ldrb	r3, [r4, #27]
   37dfc:	cmp	r3, #0
   37e00:	bne	37e9c <flatcc_json_printer_int32_enum_struct_field@@Base+0x1a0>
   37e04:	mov	r1, r5
   37e08:	mov	r0, r4
   37e0c:	ldr	r3, [sp, #32]
   37e10:	blx	r3
   37e14:	ldrd	r4, [sp]
   37e18:	ldrd	r6, [sp, #8]
   37e1c:	ldr	r8, [sp, #16]
   37e20:	add	sp, sp, #20
   37e24:	pop	{pc}		; (ldr pc, [sp], #4)
   37e28:	ldr	r3, [r4, #20]
   37e2c:	add	r2, r3, #1
   37e30:	str	r2, [r4, #20]
   37e34:	mov	r2, #10
   37e38:	strb	r2, [r3]
   37e3c:	ldrb	r3, [r4, #25]
   37e40:	ldr	r7, [r4, #32]
   37e44:	mul	r7, r7, r3
   37e48:	ldr	r0, [r4, #20]
   37e4c:	add	r3, r0, r7
   37e50:	ldr	r2, [r4, #16]
   37e54:	cmp	r2, r3
   37e58:	bcs	37e6c <flatcc_json_printer_int32_enum_struct_field@@Base+0x170>
   37e5c:	mov	r1, r7
   37e60:	mov	r0, r4
   37e64:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   37e68:	b	37d60 <flatcc_json_printer_int32_enum_struct_field@@Base+0x64>
   37e6c:	mov	r2, r7
   37e70:	mov	r1, #32
   37e74:	bl	1459c <memset@plt>
   37e78:	ldr	r3, [r4, #20]
   37e7c:	add	r7, r3, r7
   37e80:	str	r7, [r4, #20]
   37e84:	b	37d60 <flatcc_json_printer_int32_enum_struct_field@@Base+0x64>
   37e88:	mov	r2, r6
   37e8c:	ldr	r1, [sp, #24]
   37e90:	mov	r0, r4
   37e94:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   37e98:	b	37da8 <flatcc_json_printer_int32_enum_struct_field@@Base+0xac>
   37e9c:	mov	r0, r5
   37ea0:	bl	312dc <flatcc_json_parser_struct_as_root@@Base+0xe04>
   37ea4:	ldr	r3, [r4, #20]
   37ea8:	add	r0, r3, r0
   37eac:	str	r0, [r4, #20]
   37eb0:	b	37e14 <flatcc_json_printer_int32_enum_struct_field@@Base+0x118>

00037eb4 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   37eb4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37eb8:	strd	r6, [sp, #8]
   37ebc:	str	r8, [sp, #16]
   37ec0:	str	lr, [sp, #20]
   37ec4:	mov	r4, r0
   37ec8:	ldr	r5, [sp, #28]
   37ecc:	ldrd	r6, [r2, r3]
   37ed0:	cmp	r1, #0
   37ed4:	beq	37eec <flatcc_json_printer_int64_enum_struct_field@@Base+0x38>
   37ed8:	ldr	r3, [r0, #20]
   37edc:	add	r2, r3, #1
   37ee0:	str	r2, [r0, #20]
   37ee4:	mov	r2, #44	; 0x2c
   37ee8:	strb	r2, [r3]
   37eec:	ldrb	r3, [r4, #25]
   37ef0:	cmp	r3, #0
   37ef4:	bne	37fe4 <flatcc_json_printer_int64_enum_struct_field@@Base+0x130>
   37ef8:	ldr	r2, [r4, #20]
   37efc:	ldr	r3, [r4, #16]
   37f00:	cmp	r2, r3
   37f04:	bcc	37f18 <flatcc_json_printer_int64_enum_struct_field@@Base+0x64>
   37f08:	ldr	r3, [r4, #44]	; 0x2c
   37f0c:	mov	r1, #0
   37f10:	mov	r0, r4
   37f14:	blx	r3
   37f18:	ldr	r3, [r4, #20]
   37f1c:	mov	r2, #34	; 0x22
   37f20:	strb	r2, [r3]
   37f24:	ldrb	r3, [r4, #26]
   37f28:	ldr	r0, [r4, #20]
   37f2c:	cmp	r3, #0
   37f30:	addeq	r0, r0, #1
   37f34:	str	r0, [r4, #20]
   37f38:	add	r3, r0, r5
   37f3c:	ldr	r2, [r4, #16]
   37f40:	cmp	r2, r3
   37f44:	bls	38044 <flatcc_json_printer_int64_enum_struct_field@@Base+0x190>
   37f48:	mov	r2, r5
   37f4c:	ldr	r1, [sp, #24]
   37f50:	bl	14524 <memcpy@plt>
   37f54:	ldr	r3, [r4, #20]
   37f58:	add	r5, r3, r5
   37f5c:	str	r5, [r4, #20]
   37f60:	ldr	r3, [r4, #20]
   37f64:	mov	r2, #34	; 0x22
   37f68:	strb	r2, [r3]
   37f6c:	ldrb	r3, [r4, #26]
   37f70:	clz	r3, r3
   37f74:	lsr	r3, r3, #5
   37f78:	ldr	r1, [r4, #20]
   37f7c:	add	r2, r1, r3
   37f80:	add	r2, r2, #1
   37f84:	str	r2, [r4, #20]
   37f88:	mov	r2, #58	; 0x3a
   37f8c:	strb	r2, [r1, r3]
   37f90:	ldr	r3, [r4, #20]
   37f94:	mov	r2, #32
   37f98:	strb	r2, [r3]
   37f9c:	ldrb	r3, [r4, #25]
   37fa0:	ldr	r2, [r4, #20]
   37fa4:	cmp	r3, #0
   37fa8:	addne	r2, r2, #1
   37fac:	str	r2, [r4, #20]
   37fb0:	ldrb	r3, [r4, #27]
   37fb4:	cmp	r3, #0
   37fb8:	bne	38058 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1a4>
   37fbc:	mov	r2, r6
   37fc0:	mov	r3, r7
   37fc4:	mov	r0, r4
   37fc8:	ldr	r1, [sp, #32]
   37fcc:	blx	r1
   37fd0:	ldrd	r4, [sp]
   37fd4:	ldrd	r6, [sp, #8]
   37fd8:	ldr	r8, [sp, #16]
   37fdc:	add	sp, sp, #20
   37fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   37fe4:	ldr	r3, [r4, #20]
   37fe8:	add	r2, r3, #1
   37fec:	str	r2, [r4, #20]
   37ff0:	mov	r2, #10
   37ff4:	strb	r2, [r3]
   37ff8:	ldrb	r3, [r4, #25]
   37ffc:	ldr	r8, [r4, #32]
   38000:	mul	r8, r8, r3
   38004:	ldr	r0, [r4, #20]
   38008:	add	r3, r0, r8
   3800c:	ldr	r2, [r4, #16]
   38010:	cmp	r2, r3
   38014:	bcs	38028 <flatcc_json_printer_int64_enum_struct_field@@Base+0x174>
   38018:	mov	r1, r8
   3801c:	mov	r0, r4
   38020:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   38024:	b	37f18 <flatcc_json_printer_int64_enum_struct_field@@Base+0x64>
   38028:	mov	r2, r8
   3802c:	mov	r1, #32
   38030:	bl	1459c <memset@plt>
   38034:	ldr	r3, [r4, #20]
   38038:	add	r8, r3, r8
   3803c:	str	r8, [r4, #20]
   38040:	b	37f18 <flatcc_json_printer_int64_enum_struct_field@@Base+0x64>
   38044:	mov	r2, r5
   38048:	ldr	r1, [sp, #24]
   3804c:	mov	r0, r4
   38050:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   38054:	b	37f60 <flatcc_json_printer_int64_enum_struct_field@@Base+0xac>
   38058:	mov	r0, r6
   3805c:	mov	r1, r7
   38060:	bl	31314 <flatcc_json_parser_struct_as_root@@Base+0xe3c>
   38064:	ldr	r3, [r4, #20]
   38068:	add	r0, r3, r0
   3806c:	str	r0, [r4, #20]
   38070:	b	37fd0 <flatcc_json_printer_int64_enum_struct_field@@Base+0x11c>

00038074 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   38074:	strd	r4, [sp, #-24]!	; 0xffffffe8
   38078:	strd	r6, [sp, #8]
   3807c:	str	r8, [sp, #16]
   38080:	str	lr, [sp, #20]
   38084:	mov	r4, r0
   38088:	ldr	r6, [sp, #28]
   3808c:	ldrb	r5, [r2, r3]
   38090:	cmp	r1, #0
   38094:	beq	380ac <flatcc_json_printer_bool_enum_struct_field@@Base+0x38>
   38098:	ldr	r3, [r0, #20]
   3809c:	add	r2, r3, #1
   380a0:	str	r2, [r0, #20]
   380a4:	mov	r2, #44	; 0x2c
   380a8:	strb	r2, [r3]
   380ac:	ldrb	r3, [r4, #25]
   380b0:	cmp	r3, #0
   380b4:	bne	381a0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x12c>
   380b8:	ldr	r2, [r4, #20]
   380bc:	ldr	r3, [r4, #16]
   380c0:	cmp	r2, r3
   380c4:	bcc	380d8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x64>
   380c8:	ldr	r3, [r4, #44]	; 0x2c
   380cc:	mov	r1, #0
   380d0:	mov	r0, r4
   380d4:	blx	r3
   380d8:	ldr	r3, [r4, #20]
   380dc:	mov	r2, #34	; 0x22
   380e0:	strb	r2, [r3]
   380e4:	ldrb	r3, [r4, #26]
   380e8:	ldr	r0, [r4, #20]
   380ec:	cmp	r3, #0
   380f0:	addeq	r0, r0, #1
   380f4:	str	r0, [r4, #20]
   380f8:	add	r3, r0, r6
   380fc:	ldr	r2, [r4, #16]
   38100:	cmp	r2, r3
   38104:	bls	38200 <flatcc_json_printer_bool_enum_struct_field@@Base+0x18c>
   38108:	mov	r2, r6
   3810c:	ldr	r1, [sp, #24]
   38110:	bl	14524 <memcpy@plt>
   38114:	ldr	r3, [r4, #20]
   38118:	add	r6, r3, r6
   3811c:	str	r6, [r4, #20]
   38120:	ldr	r3, [r4, #20]
   38124:	mov	r2, #34	; 0x22
   38128:	strb	r2, [r3]
   3812c:	ldrb	r3, [r4, #26]
   38130:	clz	r3, r3
   38134:	lsr	r3, r3, #5
   38138:	ldr	r1, [r4, #20]
   3813c:	add	r2, r1, r3
   38140:	add	r2, r2, #1
   38144:	str	r2, [r4, #20]
   38148:	mov	r2, #58	; 0x3a
   3814c:	strb	r2, [r1, r3]
   38150:	ldr	r3, [r4, #20]
   38154:	mov	r2, #32
   38158:	strb	r2, [r3]
   3815c:	ldrb	r3, [r4, #25]
   38160:	ldr	r1, [r4, #20]
   38164:	cmp	r3, #0
   38168:	addne	r1, r1, #1
   3816c:	str	r1, [r4, #20]
   38170:	ldrb	r3, [r4, #27]
   38174:	cmp	r3, #0
   38178:	bne	38214 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1a0>
   3817c:	mov	r1, r5
   38180:	mov	r0, r4
   38184:	ldr	r3, [sp, #32]
   38188:	blx	r3
   3818c:	ldrd	r4, [sp]
   38190:	ldrd	r6, [sp, #8]
   38194:	ldr	r8, [sp, #16]
   38198:	add	sp, sp, #20
   3819c:	pop	{pc}		; (ldr pc, [sp], #4)
   381a0:	ldr	r3, [r4, #20]
   381a4:	add	r2, r3, #1
   381a8:	str	r2, [r4, #20]
   381ac:	mov	r2, #10
   381b0:	strb	r2, [r3]
   381b4:	ldrb	r3, [r4, #25]
   381b8:	ldr	r7, [r4, #32]
   381bc:	mul	r7, r7, r3
   381c0:	ldr	r0, [r4, #20]
   381c4:	add	r3, r0, r7
   381c8:	ldr	r2, [r4, #16]
   381cc:	cmp	r2, r3
   381d0:	bcs	381e4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x170>
   381d4:	mov	r1, r7
   381d8:	mov	r0, r4
   381dc:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   381e0:	b	380d8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x64>
   381e4:	mov	r2, r7
   381e8:	mov	r1, #32
   381ec:	bl	1459c <memset@plt>
   381f0:	ldr	r3, [r4, #20]
   381f4:	add	r7, r3, r7
   381f8:	str	r7, [r4, #20]
   381fc:	b	380d8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x64>
   38200:	mov	r2, r6
   38204:	ldr	r1, [sp, #24]
   38208:	mov	r0, r4
   3820c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   38210:	b	38120 <flatcc_json_printer_bool_enum_struct_field@@Base+0xac>
   38214:	mov	r0, r5
   38218:	bl	31b08 <flatcc_json_parser_struct_as_root@@Base+0x1630>
   3821c:	ldr	r3, [r4, #20]
   38220:	add	r0, r3, r0
   38224:	str	r0, [r4, #20]
   38228:	b	3818c <flatcc_json_printer_bool_enum_struct_field@@Base+0x118>

0003822c <flatcc_json_printer_utype_vector_field@@Base>:
   3822c:	add	r2, r2, #2
   38230:	lsl	r2, r2, #1
   38234:	ldr	ip, [r1, #8]
   38238:	cmp	ip, r2
   3823c:	bxle	lr
   38240:	ldr	ip, [r1, #4]
   38244:	ldrh	r2, [ip, r2]
   38248:	cmp	r2, #0
   3824c:	bxeq	lr
   38250:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38254:	strd	r6, [sp, #8]
   38258:	strd	r8, [sp, #16]
   3825c:	str	sl, [sp, #24]
   38260:	str	lr, [sp, #28]
   38264:	ldr	ip, [r1]
   38268:	adds	lr, ip, r2
   3826c:	beq	3843c <flatcc_json_printer_utype_vector_field@@Base+0x210>
   38270:	ldr	r4, [r1, #16]
   38274:	add	r5, r4, #1
   38278:	str	r5, [r1, #16]
   3827c:	cmp	r4, #0
   38280:	beq	38298 <flatcc_json_printer_utype_vector_field@@Base+0x6c>
   38284:	ldr	r1, [r0, #20]
   38288:	add	r4, r1, #1
   3828c:	str	r4, [r0, #20]
   38290:	mov	r4, #44	; 0x2c
   38294:	strb	r4, [r1]
   38298:	mov	r1, r3
   3829c:	mov	r4, r0
   382a0:	ldr	r3, [ip, r2]
   382a4:	add	r6, lr, r3
   382a8:	ldr	r7, [lr, r3]
   382ac:	ldr	r2, [sp, #32]
   382b0:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   382b4:	ldr	r3, [r4, #32]
   382b8:	add	r3, r3, #1
   382bc:	str	r3, [r4, #32]
   382c0:	ldr	r3, [r4, #20]
   382c4:	add	r2, r3, #1
   382c8:	str	r2, [r4, #20]
   382cc:	mov	r2, #91	; 0x5b
   382d0:	strb	r2, [r3]
   382d4:	cmp	r7, #0
   382d8:	beq	3841c <flatcc_json_printer_utype_vector_field@@Base+0x1f0>
   382dc:	ldrb	r3, [r4, #25]
   382e0:	cmp	r3, #0
   382e4:	bne	38344 <flatcc_json_printer_utype_vector_field@@Base+0x118>
   382e8:	ldr	r2, [r4, #20]
   382ec:	ldr	r3, [r4, #16]
   382f0:	cmp	r2, r3
   382f4:	bcc	38308 <flatcc_json_printer_utype_vector_field@@Base+0xdc>
   382f8:	ldr	r3, [r4, #44]	; 0x2c
   382fc:	mov	r1, #0
   38300:	mov	r0, r4
   38304:	blx	r3
   38308:	ldr	r1, [r4, #20]
   3830c:	ldrb	r0, [r6, #4]
   38310:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   38314:	ldr	r3, [r4, #20]
   38318:	add	r0, r3, r0
   3831c:	str	r0, [r4, #20]
   38320:	add	r5, r6, #5
   38324:	cmp	r7, #1
   38328:	beq	3841c <flatcc_json_printer_utype_vector_field@@Base+0x1f0>
   3832c:	add	r7, r7, #4
   38330:	add	r6, r6, r7
   38334:	mov	r7, #44	; 0x2c
   38338:	mov	r8, #0
   3833c:	mov	r9, #10
   38340:	b	383c0 <flatcc_json_printer_utype_vector_field@@Base+0x194>
   38344:	ldr	r3, [r4, #20]
   38348:	add	r2, r3, #1
   3834c:	str	r2, [r4, #20]
   38350:	mov	r2, #10
   38354:	strb	r2, [r3]
   38358:	mov	r0, r4
   3835c:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   38360:	b	38308 <flatcc_json_printer_utype_vector_field@@Base+0xdc>
   38364:	ldr	r3, [r4, #20]
   38368:	add	r2, r3, #1
   3836c:	str	r2, [r4, #20]
   38370:	strb	r9, [r3]
   38374:	ldrb	r3, [r4, #25]
   38378:	ldr	sl, [r4, #32]
   3837c:	mul	sl, sl, r3
   38380:	ldr	r0, [r4, #20]
   38384:	add	r3, r0, sl
   38388:	ldr	r2, [r4, #16]
   3838c:	cmp	r2, r3
   38390:	bcs	38400 <flatcc_json_printer_utype_vector_field@@Base+0x1d4>
   38394:	mov	r1, sl
   38398:	mov	r0, r4
   3839c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   383a0:	ldr	r1, [r4, #20]
   383a4:	ldrb	r0, [r5], #1
   383a8:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   383ac:	ldr	r3, [r4, #20]
   383b0:	add	r0, r3, r0
   383b4:	str	r0, [r4, #20]
   383b8:	cmp	r6, r5
   383bc:	beq	3841c <flatcc_json_printer_utype_vector_field@@Base+0x1f0>
   383c0:	ldr	r3, [r4, #20]
   383c4:	add	r2, r3, #1
   383c8:	str	r2, [r4, #20]
   383cc:	strb	r7, [r3]
   383d0:	ldrb	r3, [r4, #25]
   383d4:	cmp	r3, #0
   383d8:	bne	38364 <flatcc_json_printer_utype_vector_field@@Base+0x138>
   383dc:	ldr	r2, [r4, #20]
   383e0:	ldr	r3, [r4, #16]
   383e4:	cmp	r2, r3
   383e8:	bcc	383a0 <flatcc_json_printer_utype_vector_field@@Base+0x174>
   383ec:	ldr	r3, [r4, #44]	; 0x2c
   383f0:	mov	r1, r8
   383f4:	mov	r0, r4
   383f8:	blx	r3
   383fc:	b	383a0 <flatcc_json_printer_utype_vector_field@@Base+0x174>
   38400:	mov	r2, sl
   38404:	mov	r1, #32
   38408:	bl	1459c <memset@plt>
   3840c:	ldr	r3, [r4, #20]
   38410:	add	sl, r3, sl
   38414:	str	sl, [r4, #20]
   38418:	b	383a0 <flatcc_json_printer_utype_vector_field@@Base+0x174>
   3841c:	ldrb	r3, [r4, #25]
   38420:	cmp	r3, #0
   38424:	bne	38454 <flatcc_json_printer_utype_vector_field@@Base+0x228>
   38428:	ldr	r3, [r4, #20]
   3842c:	add	r2, r3, #1
   38430:	str	r2, [r4, #20]
   38434:	mov	r2, #93	; 0x5d
   38438:	strb	r2, [r3]
   3843c:	ldrd	r4, [sp]
   38440:	ldrd	r6, [sp, #8]
   38444:	ldrd	r8, [sp, #16]
   38448:	ldr	sl, [sp, #24]
   3844c:	add	sp, sp, #28
   38450:	pop	{pc}		; (ldr pc, [sp], #4)
   38454:	ldr	r3, [r4, #20]
   38458:	add	r2, r3, #1
   3845c:	str	r2, [r4, #20]
   38460:	mov	r2, #10
   38464:	strb	r2, [r3]
   38468:	ldr	r5, [r4, #32]
   3846c:	sub	r5, r5, #1
   38470:	str	r5, [r4, #32]
   38474:	ldrb	r3, [r4, #25]
   38478:	mul	r5, r5, r3
   3847c:	ldr	r0, [r4, #20]
   38480:	add	r3, r0, r5
   38484:	ldr	r2, [r4, #16]
   38488:	cmp	r2, r3
   3848c:	bcs	384a0 <flatcc_json_printer_utype_vector_field@@Base+0x274>
   38490:	mov	r1, r5
   38494:	mov	r0, r4
   38498:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3849c:	b	38428 <flatcc_json_printer_utype_vector_field@@Base+0x1fc>
   384a0:	mov	r2, r5
   384a4:	mov	r1, #32
   384a8:	bl	1459c <memset@plt>
   384ac:	ldr	r3, [r4, #20]
   384b0:	add	r5, r3, r5
   384b4:	str	r5, [r4, #20]
   384b8:	b	38428 <flatcc_json_printer_utype_vector_field@@Base+0x1fc>

000384bc <flatcc_json_printer_uint8_vector_field@@Base>:
   384bc:	add	r2, r2, #2
   384c0:	lsl	r2, r2, #1
   384c4:	ldr	ip, [r1, #8]
   384c8:	cmp	ip, r2
   384cc:	bxle	lr
   384d0:	ldr	ip, [r1, #4]
   384d4:	ldrh	r2, [ip, r2]
   384d8:	cmp	r2, #0
   384dc:	bxeq	lr
   384e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   384e4:	strd	r6, [sp, #8]
   384e8:	strd	r8, [sp, #16]
   384ec:	str	sl, [sp, #24]
   384f0:	str	lr, [sp, #28]
   384f4:	ldr	ip, [r1]
   384f8:	adds	lr, ip, r2
   384fc:	beq	386cc <flatcc_json_printer_uint8_vector_field@@Base+0x210>
   38500:	ldr	r4, [r1, #16]
   38504:	add	r5, r4, #1
   38508:	str	r5, [r1, #16]
   3850c:	cmp	r4, #0
   38510:	beq	38528 <flatcc_json_printer_uint8_vector_field@@Base+0x6c>
   38514:	ldr	r1, [r0, #20]
   38518:	add	r4, r1, #1
   3851c:	str	r4, [r0, #20]
   38520:	mov	r4, #44	; 0x2c
   38524:	strb	r4, [r1]
   38528:	mov	r1, r3
   3852c:	mov	r4, r0
   38530:	ldr	r3, [ip, r2]
   38534:	add	r6, lr, r3
   38538:	ldr	r7, [lr, r3]
   3853c:	ldr	r2, [sp, #32]
   38540:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   38544:	ldr	r3, [r4, #32]
   38548:	add	r3, r3, #1
   3854c:	str	r3, [r4, #32]
   38550:	ldr	r3, [r4, #20]
   38554:	add	r2, r3, #1
   38558:	str	r2, [r4, #20]
   3855c:	mov	r2, #91	; 0x5b
   38560:	strb	r2, [r3]
   38564:	cmp	r7, #0
   38568:	beq	386ac <flatcc_json_printer_uint8_vector_field@@Base+0x1f0>
   3856c:	ldrb	r3, [r4, #25]
   38570:	cmp	r3, #0
   38574:	bne	385d4 <flatcc_json_printer_uint8_vector_field@@Base+0x118>
   38578:	ldr	r2, [r4, #20]
   3857c:	ldr	r3, [r4, #16]
   38580:	cmp	r2, r3
   38584:	bcc	38598 <flatcc_json_printer_uint8_vector_field@@Base+0xdc>
   38588:	ldr	r3, [r4, #44]	; 0x2c
   3858c:	mov	r1, #0
   38590:	mov	r0, r4
   38594:	blx	r3
   38598:	ldr	r1, [r4, #20]
   3859c:	ldrb	r0, [r6, #4]
   385a0:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   385a4:	ldr	r3, [r4, #20]
   385a8:	add	r0, r3, r0
   385ac:	str	r0, [r4, #20]
   385b0:	add	r5, r6, #5
   385b4:	cmp	r7, #1
   385b8:	beq	386ac <flatcc_json_printer_uint8_vector_field@@Base+0x1f0>
   385bc:	add	r7, r7, #4
   385c0:	add	r6, r6, r7
   385c4:	mov	r7, #44	; 0x2c
   385c8:	mov	r8, #0
   385cc:	mov	r9, #10
   385d0:	b	38650 <flatcc_json_printer_uint8_vector_field@@Base+0x194>
   385d4:	ldr	r3, [r4, #20]
   385d8:	add	r2, r3, #1
   385dc:	str	r2, [r4, #20]
   385e0:	mov	r2, #10
   385e4:	strb	r2, [r3]
   385e8:	mov	r0, r4
   385ec:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   385f0:	b	38598 <flatcc_json_printer_uint8_vector_field@@Base+0xdc>
   385f4:	ldr	r3, [r4, #20]
   385f8:	add	r2, r3, #1
   385fc:	str	r2, [r4, #20]
   38600:	strb	r9, [r3]
   38604:	ldrb	r3, [r4, #25]
   38608:	ldr	sl, [r4, #32]
   3860c:	mul	sl, sl, r3
   38610:	ldr	r0, [r4, #20]
   38614:	add	r3, r0, sl
   38618:	ldr	r2, [r4, #16]
   3861c:	cmp	r2, r3
   38620:	bcs	38690 <flatcc_json_printer_uint8_vector_field@@Base+0x1d4>
   38624:	mov	r1, sl
   38628:	mov	r0, r4
   3862c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   38630:	ldr	r1, [r4, #20]
   38634:	ldrb	r0, [r5], #1
   38638:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   3863c:	ldr	r3, [r4, #20]
   38640:	add	r0, r3, r0
   38644:	str	r0, [r4, #20]
   38648:	cmp	r6, r5
   3864c:	beq	386ac <flatcc_json_printer_uint8_vector_field@@Base+0x1f0>
   38650:	ldr	r3, [r4, #20]
   38654:	add	r2, r3, #1
   38658:	str	r2, [r4, #20]
   3865c:	strb	r7, [r3]
   38660:	ldrb	r3, [r4, #25]
   38664:	cmp	r3, #0
   38668:	bne	385f4 <flatcc_json_printer_uint8_vector_field@@Base+0x138>
   3866c:	ldr	r2, [r4, #20]
   38670:	ldr	r3, [r4, #16]
   38674:	cmp	r2, r3
   38678:	bcc	38630 <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   3867c:	ldr	r3, [r4, #44]	; 0x2c
   38680:	mov	r1, r8
   38684:	mov	r0, r4
   38688:	blx	r3
   3868c:	b	38630 <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   38690:	mov	r2, sl
   38694:	mov	r1, #32
   38698:	bl	1459c <memset@plt>
   3869c:	ldr	r3, [r4, #20]
   386a0:	add	sl, r3, sl
   386a4:	str	sl, [r4, #20]
   386a8:	b	38630 <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   386ac:	ldrb	r3, [r4, #25]
   386b0:	cmp	r3, #0
   386b4:	bne	386e4 <flatcc_json_printer_uint8_vector_field@@Base+0x228>
   386b8:	ldr	r3, [r4, #20]
   386bc:	add	r2, r3, #1
   386c0:	str	r2, [r4, #20]
   386c4:	mov	r2, #93	; 0x5d
   386c8:	strb	r2, [r3]
   386cc:	ldrd	r4, [sp]
   386d0:	ldrd	r6, [sp, #8]
   386d4:	ldrd	r8, [sp, #16]
   386d8:	ldr	sl, [sp, #24]
   386dc:	add	sp, sp, #28
   386e0:	pop	{pc}		; (ldr pc, [sp], #4)
   386e4:	ldr	r3, [r4, #20]
   386e8:	add	r2, r3, #1
   386ec:	str	r2, [r4, #20]
   386f0:	mov	r2, #10
   386f4:	strb	r2, [r3]
   386f8:	ldr	r5, [r4, #32]
   386fc:	sub	r5, r5, #1
   38700:	str	r5, [r4, #32]
   38704:	ldrb	r3, [r4, #25]
   38708:	mul	r5, r5, r3
   3870c:	ldr	r0, [r4, #20]
   38710:	add	r3, r0, r5
   38714:	ldr	r2, [r4, #16]
   38718:	cmp	r2, r3
   3871c:	bcs	38730 <flatcc_json_printer_uint8_vector_field@@Base+0x274>
   38720:	mov	r1, r5
   38724:	mov	r0, r4
   38728:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3872c:	b	386b8 <flatcc_json_printer_uint8_vector_field@@Base+0x1fc>
   38730:	mov	r2, r5
   38734:	mov	r1, #32
   38738:	bl	1459c <memset@plt>
   3873c:	ldr	r3, [r4, #20]
   38740:	add	r5, r3, r5
   38744:	str	r5, [r4, #20]
   38748:	b	386b8 <flatcc_json_printer_uint8_vector_field@@Base+0x1fc>

0003874c <flatcc_json_printer_uint16_vector_field@@Base>:
   3874c:	add	r2, r2, #2
   38750:	lsl	r2, r2, #1
   38754:	ldr	ip, [r1, #8]
   38758:	cmp	ip, r2
   3875c:	bxle	lr
   38760:	ldr	ip, [r1, #4]
   38764:	ldrh	r2, [ip, r2]
   38768:	cmp	r2, #0
   3876c:	bxeq	lr
   38770:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38774:	strd	r6, [sp, #8]
   38778:	strd	r8, [sp, #16]
   3877c:	str	sl, [sp, #24]
   38780:	str	lr, [sp, #28]
   38784:	ldr	ip, [r1]
   38788:	adds	lr, ip, r2
   3878c:	beq	3899c <flatcc_json_printer_uint16_vector_field@@Base+0x250>
   38790:	ldr	r4, [r1, #16]
   38794:	add	r5, r4, #1
   38798:	str	r5, [r1, #16]
   3879c:	cmp	r4, #0
   387a0:	beq	387b8 <flatcc_json_printer_uint16_vector_field@@Base+0x6c>
   387a4:	ldr	r1, [r0, #20]
   387a8:	add	r4, r1, #1
   387ac:	str	r4, [r0, #20]
   387b0:	mov	r4, #44	; 0x2c
   387b4:	strb	r4, [r1]
   387b8:	mov	r1, r3
   387bc:	mov	r4, r0
   387c0:	ldr	r3, [ip, r2]
   387c4:	add	r6, lr, r3
   387c8:	ldr	r7, [lr, r3]
   387cc:	ldr	r2, [sp, #32]
   387d0:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   387d4:	ldr	r3, [r4, #32]
   387d8:	add	r3, r3, #1
   387dc:	str	r3, [r4, #32]
   387e0:	ldr	r3, [r4, #20]
   387e4:	add	r2, r3, #1
   387e8:	str	r2, [r4, #20]
   387ec:	mov	r2, #91	; 0x5b
   387f0:	strb	r2, [r3]
   387f4:	cmp	r7, #0
   387f8:	beq	3897c <flatcc_json_printer_uint16_vector_field@@Base+0x230>
   387fc:	ldrb	r3, [r4, #25]
   38800:	cmp	r3, #0
   38804:	bne	38860 <flatcc_json_printer_uint16_vector_field@@Base+0x114>
   38808:	ldr	r2, [r4, #20]
   3880c:	ldr	r3, [r4, #16]
   38810:	cmp	r2, r3
   38814:	bcc	38828 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   38818:	ldr	r3, [r4, #44]	; 0x2c
   3881c:	mov	r1, #0
   38820:	mov	r0, r4
   38824:	blx	r3
   38828:	ldr	r1, [r4, #20]
   3882c:	ldrh	r0, [r6, #4]
   38830:	bl	30688 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   38834:	ldr	r3, [r4, #20]
   38838:	add	r0, r3, r0
   3883c:	str	r0, [r4, #20]
   38840:	add	r6, r6, #6
   38844:	sub	r5, r7, #2
   38848:	cmp	r7, #1
   3884c:	beq	3897c <flatcc_json_printer_uint16_vector_field@@Base+0x230>
   38850:	mov	r7, #44	; 0x2c
   38854:	mov	r8, #0
   38858:	mov	r9, #10
   3885c:	b	38920 <flatcc_json_printer_uint16_vector_field@@Base+0x1d4>
   38860:	ldr	r3, [r4, #20]
   38864:	add	r2, r3, #1
   38868:	str	r2, [r4, #20]
   3886c:	mov	r2, #10
   38870:	strb	r2, [r3]
   38874:	ldrb	r3, [r4, #25]
   38878:	ldr	r5, [r4, #32]
   3887c:	mul	r5, r5, r3
   38880:	ldr	r0, [r4, #20]
   38884:	add	r3, r0, r5
   38888:	ldr	r2, [r4, #16]
   3888c:	cmp	r2, r3
   38890:	bcs	388a4 <flatcc_json_printer_uint16_vector_field@@Base+0x158>
   38894:	mov	r1, r5
   38898:	mov	r0, r4
   3889c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   388a0:	b	38828 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   388a4:	mov	r2, r5
   388a8:	mov	r1, #32
   388ac:	bl	1459c <memset@plt>
   388b0:	ldr	r3, [r4, #20]
   388b4:	add	r5, r3, r5
   388b8:	str	r5, [r4, #20]
   388bc:	b	38828 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   388c0:	ldr	r3, [r4, #20]
   388c4:	add	r2, r3, #1
   388c8:	str	r2, [r4, #20]
   388cc:	strb	r9, [r3]
   388d0:	ldrb	r3, [r4, #25]
   388d4:	ldr	sl, [r4, #32]
   388d8:	mul	sl, sl, r3
   388dc:	ldr	r0, [r4, #20]
   388e0:	add	r3, r0, sl
   388e4:	ldr	r2, [r4, #16]
   388e8:	cmp	r2, r3
   388ec:	bcs	38960 <flatcc_json_printer_uint16_vector_field@@Base+0x214>
   388f0:	mov	r1, sl
   388f4:	mov	r0, r4
   388f8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   388fc:	ldr	r1, [r4, #20]
   38900:	ldrh	r0, [r6], #2
   38904:	bl	30688 <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   38908:	ldr	r3, [r4, #20]
   3890c:	add	r0, r3, r0
   38910:	str	r0, [r4, #20]
   38914:	sub	r5, r5, #1
   38918:	cmn	r5, #1
   3891c:	beq	3897c <flatcc_json_printer_uint16_vector_field@@Base+0x230>
   38920:	ldr	r3, [r4, #20]
   38924:	add	r2, r3, #1
   38928:	str	r2, [r4, #20]
   3892c:	strb	r7, [r3]
   38930:	ldrb	r3, [r4, #25]
   38934:	cmp	r3, #0
   38938:	bne	388c0 <flatcc_json_printer_uint16_vector_field@@Base+0x174>
   3893c:	ldr	r2, [r4, #20]
   38940:	ldr	r3, [r4, #16]
   38944:	cmp	r2, r3
   38948:	bcc	388fc <flatcc_json_printer_uint16_vector_field@@Base+0x1b0>
   3894c:	ldr	r3, [r4, #44]	; 0x2c
   38950:	mov	r1, r8
   38954:	mov	r0, r4
   38958:	blx	r3
   3895c:	b	388fc <flatcc_json_printer_uint16_vector_field@@Base+0x1b0>
   38960:	mov	r2, sl
   38964:	mov	r1, #32
   38968:	bl	1459c <memset@plt>
   3896c:	ldr	r3, [r4, #20]
   38970:	add	sl, r3, sl
   38974:	str	sl, [r4, #20]
   38978:	b	388fc <flatcc_json_printer_uint16_vector_field@@Base+0x1b0>
   3897c:	ldrb	r3, [r4, #25]
   38980:	cmp	r3, #0
   38984:	bne	389b4 <flatcc_json_printer_uint16_vector_field@@Base+0x268>
   38988:	ldr	r3, [r4, #20]
   3898c:	add	r2, r3, #1
   38990:	str	r2, [r4, #20]
   38994:	mov	r2, #93	; 0x5d
   38998:	strb	r2, [r3]
   3899c:	ldrd	r4, [sp]
   389a0:	ldrd	r6, [sp, #8]
   389a4:	ldrd	r8, [sp, #16]
   389a8:	ldr	sl, [sp, #24]
   389ac:	add	sp, sp, #28
   389b0:	pop	{pc}		; (ldr pc, [sp], #4)
   389b4:	ldr	r3, [r4, #20]
   389b8:	add	r2, r3, #1
   389bc:	str	r2, [r4, #20]
   389c0:	mov	r2, #10
   389c4:	strb	r2, [r3]
   389c8:	ldr	r5, [r4, #32]
   389cc:	sub	r5, r5, #1
   389d0:	str	r5, [r4, #32]
   389d4:	ldrb	r3, [r4, #25]
   389d8:	mul	r5, r5, r3
   389dc:	ldr	r0, [r4, #20]
   389e0:	add	r3, r0, r5
   389e4:	ldr	r2, [r4, #16]
   389e8:	cmp	r2, r3
   389ec:	bcs	38a00 <flatcc_json_printer_uint16_vector_field@@Base+0x2b4>
   389f0:	mov	r1, r5
   389f4:	mov	r0, r4
   389f8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   389fc:	b	38988 <flatcc_json_printer_uint16_vector_field@@Base+0x23c>
   38a00:	mov	r2, r5
   38a04:	mov	r1, #32
   38a08:	bl	1459c <memset@plt>
   38a0c:	ldr	r3, [r4, #20]
   38a10:	add	r5, r3, r5
   38a14:	str	r5, [r4, #20]
   38a18:	b	38988 <flatcc_json_printer_uint16_vector_field@@Base+0x23c>

00038a1c <flatcc_json_printer_uint32_vector_field@@Base>:
   38a1c:	add	r2, r2, #2
   38a20:	lsl	r2, r2, #1
   38a24:	ldr	ip, [r1, #8]
   38a28:	cmp	ip, r2
   38a2c:	bxle	lr
   38a30:	ldr	ip, [r1, #4]
   38a34:	ldrh	r2, [ip, r2]
   38a38:	cmp	r2, #0
   38a3c:	bxeq	lr
   38a40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38a44:	strd	r6, [sp, #8]
   38a48:	strd	r8, [sp, #16]
   38a4c:	str	sl, [sp, #24]
   38a50:	str	lr, [sp, #28]
   38a54:	ldr	ip, [r1]
   38a58:	adds	lr, ip, r2
   38a5c:	beq	38c2c <flatcc_json_printer_uint32_vector_field@@Base+0x210>
   38a60:	ldr	r4, [r1, #16]
   38a64:	add	r5, r4, #1
   38a68:	str	r5, [r1, #16]
   38a6c:	cmp	r4, #0
   38a70:	beq	38a88 <flatcc_json_printer_uint32_vector_field@@Base+0x6c>
   38a74:	ldr	r1, [r0, #20]
   38a78:	add	r4, r1, #1
   38a7c:	str	r4, [r0, #20]
   38a80:	mov	r4, #44	; 0x2c
   38a84:	strb	r4, [r1]
   38a88:	mov	r1, r3
   38a8c:	mov	r4, r0
   38a90:	ldr	r3, [ip, r2]
   38a94:	add	r6, lr, r3
   38a98:	ldr	r7, [lr, r3]
   38a9c:	ldr	r2, [sp, #32]
   38aa0:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   38aa4:	ldr	r3, [r4, #32]
   38aa8:	add	r3, r3, #1
   38aac:	str	r3, [r4, #32]
   38ab0:	ldr	r3, [r4, #20]
   38ab4:	add	r2, r3, #1
   38ab8:	str	r2, [r4, #20]
   38abc:	mov	r2, #91	; 0x5b
   38ac0:	strb	r2, [r3]
   38ac4:	cmp	r7, #0
   38ac8:	beq	38c0c <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   38acc:	ldrb	r3, [r4, #25]
   38ad0:	cmp	r3, #0
   38ad4:	bne	38b30 <flatcc_json_printer_uint32_vector_field@@Base+0x114>
   38ad8:	ldr	r2, [r4, #20]
   38adc:	ldr	r3, [r4, #16]
   38ae0:	cmp	r2, r3
   38ae4:	bcc	38af8 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>
   38ae8:	ldr	r3, [r4, #44]	; 0x2c
   38aec:	mov	r1, #0
   38af0:	mov	r0, r4
   38af4:	blx	r3
   38af8:	ldr	r1, [r4, #20]
   38afc:	ldr	r0, [r6, #4]
   38b00:	bl	3081c <flatcc_json_parser_struct_as_root@@Base+0x344>
   38b04:	ldr	r3, [r4, #20]
   38b08:	add	r0, r3, r0
   38b0c:	str	r0, [r4, #20]
   38b10:	add	r6, r6, #8
   38b14:	sub	r5, r7, #2
   38b18:	cmp	r7, #1
   38b1c:	beq	38c0c <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   38b20:	mov	r7, #44	; 0x2c
   38b24:	mov	r8, #0
   38b28:	mov	r9, #10
   38b2c:	b	38bb0 <flatcc_json_printer_uint32_vector_field@@Base+0x194>
   38b30:	ldr	r3, [r4, #20]
   38b34:	add	r2, r3, #1
   38b38:	str	r2, [r4, #20]
   38b3c:	mov	r2, #10
   38b40:	strb	r2, [r3]
   38b44:	mov	r0, r4
   38b48:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   38b4c:	b	38af8 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>
   38b50:	ldr	r3, [r4, #20]
   38b54:	add	r2, r3, #1
   38b58:	str	r2, [r4, #20]
   38b5c:	strb	r9, [r3]
   38b60:	ldrb	r3, [r4, #25]
   38b64:	ldr	sl, [r4, #32]
   38b68:	mul	sl, sl, r3
   38b6c:	ldr	r0, [r4, #20]
   38b70:	add	r3, r0, sl
   38b74:	ldr	r2, [r4, #16]
   38b78:	cmp	r2, r3
   38b7c:	bcs	38bf0 <flatcc_json_printer_uint32_vector_field@@Base+0x1d4>
   38b80:	mov	r1, sl
   38b84:	mov	r0, r4
   38b88:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   38b8c:	ldr	r1, [r4, #20]
   38b90:	ldr	r0, [r6], #4
   38b94:	bl	3081c <flatcc_json_parser_struct_as_root@@Base+0x344>
   38b98:	ldr	r3, [r4, #20]
   38b9c:	add	r0, r3, r0
   38ba0:	str	r0, [r4, #20]
   38ba4:	sub	r5, r5, #1
   38ba8:	cmn	r5, #1
   38bac:	beq	38c0c <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   38bb0:	ldr	r3, [r4, #20]
   38bb4:	add	r2, r3, #1
   38bb8:	str	r2, [r4, #20]
   38bbc:	strb	r7, [r3]
   38bc0:	ldrb	r3, [r4, #25]
   38bc4:	cmp	r3, #0
   38bc8:	bne	38b50 <flatcc_json_printer_uint32_vector_field@@Base+0x134>
   38bcc:	ldr	r2, [r4, #20]
   38bd0:	ldr	r3, [r4, #16]
   38bd4:	cmp	r2, r3
   38bd8:	bcc	38b8c <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   38bdc:	ldr	r3, [r4, #44]	; 0x2c
   38be0:	mov	r1, r8
   38be4:	mov	r0, r4
   38be8:	blx	r3
   38bec:	b	38b8c <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   38bf0:	mov	r2, sl
   38bf4:	mov	r1, #32
   38bf8:	bl	1459c <memset@plt>
   38bfc:	ldr	r3, [r4, #20]
   38c00:	add	sl, r3, sl
   38c04:	str	sl, [r4, #20]
   38c08:	b	38b8c <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   38c0c:	ldrb	r3, [r4, #25]
   38c10:	cmp	r3, #0
   38c14:	bne	38c44 <flatcc_json_printer_uint32_vector_field@@Base+0x228>
   38c18:	ldr	r3, [r4, #20]
   38c1c:	add	r2, r3, #1
   38c20:	str	r2, [r4, #20]
   38c24:	mov	r2, #93	; 0x5d
   38c28:	strb	r2, [r3]
   38c2c:	ldrd	r4, [sp]
   38c30:	ldrd	r6, [sp, #8]
   38c34:	ldrd	r8, [sp, #16]
   38c38:	ldr	sl, [sp, #24]
   38c3c:	add	sp, sp, #28
   38c40:	pop	{pc}		; (ldr pc, [sp], #4)
   38c44:	ldr	r3, [r4, #20]
   38c48:	add	r2, r3, #1
   38c4c:	str	r2, [r4, #20]
   38c50:	mov	r2, #10
   38c54:	strb	r2, [r3]
   38c58:	ldr	r5, [r4, #32]
   38c5c:	sub	r5, r5, #1
   38c60:	str	r5, [r4, #32]
   38c64:	ldrb	r3, [r4, #25]
   38c68:	mul	r5, r5, r3
   38c6c:	ldr	r0, [r4, #20]
   38c70:	add	r3, r0, r5
   38c74:	ldr	r2, [r4, #16]
   38c78:	cmp	r2, r3
   38c7c:	bcs	38c90 <flatcc_json_printer_uint32_vector_field@@Base+0x274>
   38c80:	mov	r1, r5
   38c84:	mov	r0, r4
   38c88:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   38c8c:	b	38c18 <flatcc_json_printer_uint32_vector_field@@Base+0x1fc>
   38c90:	mov	r2, r5
   38c94:	mov	r1, #32
   38c98:	bl	1459c <memset@plt>
   38c9c:	ldr	r3, [r4, #20]
   38ca0:	add	r5, r3, r5
   38ca4:	str	r5, [r4, #20]
   38ca8:	b	38c18 <flatcc_json_printer_uint32_vector_field@@Base+0x1fc>

00038cac <flatcc_json_printer_uint64_vector_field@@Base>:
   38cac:	add	r2, r2, #2
   38cb0:	lsl	r2, r2, #1
   38cb4:	ldr	ip, [r1, #8]
   38cb8:	cmp	ip, r2
   38cbc:	bxle	lr
   38cc0:	ldr	ip, [r1, #4]
   38cc4:	ldrh	r2, [ip, r2]
   38cc8:	cmp	r2, #0
   38ccc:	bxeq	lr
   38cd0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38cd4:	strd	r6, [sp, #8]
   38cd8:	strd	r8, [sp, #16]
   38cdc:	str	sl, [sp, #24]
   38ce0:	str	lr, [sp, #28]
   38ce4:	ldr	ip, [r1]
   38ce8:	adds	lr, ip, r2
   38cec:	beq	38ebc <flatcc_json_printer_uint64_vector_field@@Base+0x210>
   38cf0:	ldr	r4, [r1, #16]
   38cf4:	add	r5, r4, #1
   38cf8:	str	r5, [r1, #16]
   38cfc:	cmp	r4, #0
   38d00:	beq	38d18 <flatcc_json_printer_uint64_vector_field@@Base+0x6c>
   38d04:	ldr	r1, [r0, #20]
   38d08:	add	r4, r1, #1
   38d0c:	str	r4, [r0, #20]
   38d10:	mov	r4, #44	; 0x2c
   38d14:	strb	r4, [r1]
   38d18:	mov	r1, r3
   38d1c:	mov	r4, r0
   38d20:	ldr	r3, [ip, r2]
   38d24:	add	r6, lr, r3
   38d28:	ldr	r7, [lr, r3]
   38d2c:	ldr	r2, [sp, #32]
   38d30:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   38d34:	ldr	r3, [r4, #32]
   38d38:	add	r3, r3, #1
   38d3c:	str	r3, [r4, #32]
   38d40:	ldr	r3, [r4, #20]
   38d44:	add	r2, r3, #1
   38d48:	str	r2, [r4, #20]
   38d4c:	mov	r2, #91	; 0x5b
   38d50:	strb	r2, [r3]
   38d54:	cmp	r7, #0
   38d58:	beq	38e9c <flatcc_json_printer_uint64_vector_field@@Base+0x1f0>
   38d5c:	ldrb	r3, [r4, #25]
   38d60:	cmp	r3, #0
   38d64:	bne	38dc0 <flatcc_json_printer_uint64_vector_field@@Base+0x114>
   38d68:	ldr	r2, [r4, #20]
   38d6c:	ldr	r3, [r4, #16]
   38d70:	cmp	r2, r3
   38d74:	bcc	38d88 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   38d78:	ldr	r3, [r4, #44]	; 0x2c
   38d7c:	mov	r1, #0
   38d80:	mov	r0, r4
   38d84:	blx	r3
   38d88:	ldr	r2, [r4, #20]
   38d8c:	ldrd	r0, [r6, #4]
   38d90:	bl	30b80 <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   38d94:	ldr	r3, [r4, #20]
   38d98:	add	r0, r3, r0
   38d9c:	str	r0, [r4, #20]
   38da0:	add	r6, r6, #12
   38da4:	sub	r5, r7, #2
   38da8:	cmp	r7, #1
   38dac:	beq	38e9c <flatcc_json_printer_uint64_vector_field@@Base+0x1f0>
   38db0:	mov	r7, #44	; 0x2c
   38db4:	mov	r8, #0
   38db8:	mov	r9, #10
   38dbc:	b	38e40 <flatcc_json_printer_uint64_vector_field@@Base+0x194>
   38dc0:	ldr	r3, [r4, #20]
   38dc4:	add	r2, r3, #1
   38dc8:	str	r2, [r4, #20]
   38dcc:	mov	r2, #10
   38dd0:	strb	r2, [r3]
   38dd4:	mov	r0, r4
   38dd8:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   38ddc:	b	38d88 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   38de0:	ldr	r3, [r4, #20]
   38de4:	add	r2, r3, #1
   38de8:	str	r2, [r4, #20]
   38dec:	strb	r9, [r3]
   38df0:	ldrb	r3, [r4, #25]
   38df4:	ldr	sl, [r4, #32]
   38df8:	mul	sl, sl, r3
   38dfc:	ldr	r0, [r4, #20]
   38e00:	add	r3, r0, sl
   38e04:	ldr	r2, [r4, #16]
   38e08:	cmp	r2, r3
   38e0c:	bcs	38e80 <flatcc_json_printer_uint64_vector_field@@Base+0x1d4>
   38e10:	mov	r1, sl
   38e14:	mov	r0, r4
   38e18:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   38e1c:	ldr	r2, [r4, #20]
   38e20:	ldrd	r0, [r6], #8
   38e24:	bl	30b80 <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   38e28:	ldr	r3, [r4, #20]
   38e2c:	add	r0, r3, r0
   38e30:	str	r0, [r4, #20]
   38e34:	sub	r5, r5, #1
   38e38:	cmn	r5, #1
   38e3c:	beq	38e9c <flatcc_json_printer_uint64_vector_field@@Base+0x1f0>
   38e40:	ldr	r3, [r4, #20]
   38e44:	add	r2, r3, #1
   38e48:	str	r2, [r4, #20]
   38e4c:	strb	r7, [r3]
   38e50:	ldrb	r3, [r4, #25]
   38e54:	cmp	r3, #0
   38e58:	bne	38de0 <flatcc_json_printer_uint64_vector_field@@Base+0x134>
   38e5c:	ldr	r2, [r4, #20]
   38e60:	ldr	r3, [r4, #16]
   38e64:	cmp	r2, r3
   38e68:	bcc	38e1c <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   38e6c:	ldr	r3, [r4, #44]	; 0x2c
   38e70:	mov	r1, r8
   38e74:	mov	r0, r4
   38e78:	blx	r3
   38e7c:	b	38e1c <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   38e80:	mov	r2, sl
   38e84:	mov	r1, #32
   38e88:	bl	1459c <memset@plt>
   38e8c:	ldr	r3, [r4, #20]
   38e90:	add	sl, r3, sl
   38e94:	str	sl, [r4, #20]
   38e98:	b	38e1c <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   38e9c:	ldrb	r3, [r4, #25]
   38ea0:	cmp	r3, #0
   38ea4:	bne	38ed4 <flatcc_json_printer_uint64_vector_field@@Base+0x228>
   38ea8:	ldr	r3, [r4, #20]
   38eac:	add	r2, r3, #1
   38eb0:	str	r2, [r4, #20]
   38eb4:	mov	r2, #93	; 0x5d
   38eb8:	strb	r2, [r3]
   38ebc:	ldrd	r4, [sp]
   38ec0:	ldrd	r6, [sp, #8]
   38ec4:	ldrd	r8, [sp, #16]
   38ec8:	ldr	sl, [sp, #24]
   38ecc:	add	sp, sp, #28
   38ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   38ed4:	ldr	r3, [r4, #20]
   38ed8:	add	r2, r3, #1
   38edc:	str	r2, [r4, #20]
   38ee0:	mov	r2, #10
   38ee4:	strb	r2, [r3]
   38ee8:	ldr	r5, [r4, #32]
   38eec:	sub	r5, r5, #1
   38ef0:	str	r5, [r4, #32]
   38ef4:	ldrb	r3, [r4, #25]
   38ef8:	mul	r5, r5, r3
   38efc:	ldr	r0, [r4, #20]
   38f00:	add	r3, r0, r5
   38f04:	ldr	r2, [r4, #16]
   38f08:	cmp	r2, r3
   38f0c:	bcs	38f20 <flatcc_json_printer_uint64_vector_field@@Base+0x274>
   38f10:	mov	r1, r5
   38f14:	mov	r0, r4
   38f18:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   38f1c:	b	38ea8 <flatcc_json_printer_uint64_vector_field@@Base+0x1fc>
   38f20:	mov	r2, r5
   38f24:	mov	r1, #32
   38f28:	bl	1459c <memset@plt>
   38f2c:	ldr	r3, [r4, #20]
   38f30:	add	r5, r3, r5
   38f34:	str	r5, [r4, #20]
   38f38:	b	38ea8 <flatcc_json_printer_uint64_vector_field@@Base+0x1fc>

00038f3c <flatcc_json_printer_int8_vector_field@@Base>:
   38f3c:	add	r2, r2, #2
   38f40:	lsl	r2, r2, #1
   38f44:	ldr	ip, [r1, #8]
   38f48:	cmp	ip, r2
   38f4c:	bxle	lr
   38f50:	ldr	ip, [r1, #4]
   38f54:	ldrh	r2, [ip, r2]
   38f58:	cmp	r2, #0
   38f5c:	bxeq	lr
   38f60:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38f64:	strd	r6, [sp, #8]
   38f68:	strd	r8, [sp, #16]
   38f6c:	str	sl, [sp, #24]
   38f70:	str	lr, [sp, #28]
   38f74:	ldr	ip, [r1]
   38f78:	adds	lr, ip, r2
   38f7c:	beq	3914c <flatcc_json_printer_int8_vector_field@@Base+0x210>
   38f80:	ldr	r4, [r1, #16]
   38f84:	add	r5, r4, #1
   38f88:	str	r5, [r1, #16]
   38f8c:	cmp	r4, #0
   38f90:	beq	38fa8 <flatcc_json_printer_int8_vector_field@@Base+0x6c>
   38f94:	ldr	r1, [r0, #20]
   38f98:	add	r4, r1, #1
   38f9c:	str	r4, [r0, #20]
   38fa0:	mov	r4, #44	; 0x2c
   38fa4:	strb	r4, [r1]
   38fa8:	mov	r1, r3
   38fac:	mov	r4, r0
   38fb0:	ldr	r3, [ip, r2]
   38fb4:	add	r6, lr, r3
   38fb8:	ldr	r7, [lr, r3]
   38fbc:	ldr	r2, [sp, #32]
   38fc0:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   38fc4:	ldr	r3, [r4, #32]
   38fc8:	add	r3, r3, #1
   38fcc:	str	r3, [r4, #32]
   38fd0:	ldr	r3, [r4, #20]
   38fd4:	add	r2, r3, #1
   38fd8:	str	r2, [r4, #20]
   38fdc:	mov	r2, #91	; 0x5b
   38fe0:	strb	r2, [r3]
   38fe4:	cmp	r7, #0
   38fe8:	beq	3912c <flatcc_json_printer_int8_vector_field@@Base+0x1f0>
   38fec:	ldrb	r3, [r4, #25]
   38ff0:	cmp	r3, #0
   38ff4:	bne	39054 <flatcc_json_printer_int8_vector_field@@Base+0x118>
   38ff8:	ldr	r2, [r4, #20]
   38ffc:	ldr	r3, [r4, #16]
   39000:	cmp	r2, r3
   39004:	bcc	39018 <flatcc_json_printer_int8_vector_field@@Base+0xdc>
   39008:	ldr	r3, [r4, #44]	; 0x2c
   3900c:	mov	r1, #0
   39010:	mov	r0, r4
   39014:	blx	r3
   39018:	ldr	r1, [r4, #20]
   3901c:	ldrsb	r0, [r6, #4]
   39020:	bl	3125c <flatcc_json_parser_struct_as_root@@Base+0xd84>
   39024:	ldr	r3, [r4, #20]
   39028:	add	r0, r3, r0
   3902c:	str	r0, [r4, #20]
   39030:	add	r5, r6, #5
   39034:	cmp	r7, #1
   39038:	beq	3912c <flatcc_json_printer_int8_vector_field@@Base+0x1f0>
   3903c:	add	r7, r7, #4
   39040:	add	r6, r6, r7
   39044:	mov	r7, #44	; 0x2c
   39048:	mov	r8, #0
   3904c:	mov	r9, #10
   39050:	b	390d0 <flatcc_json_printer_int8_vector_field@@Base+0x194>
   39054:	ldr	r3, [r4, #20]
   39058:	add	r2, r3, #1
   3905c:	str	r2, [r4, #20]
   39060:	mov	r2, #10
   39064:	strb	r2, [r3]
   39068:	mov	r0, r4
   3906c:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   39070:	b	39018 <flatcc_json_printer_int8_vector_field@@Base+0xdc>
   39074:	ldr	r3, [r4, #20]
   39078:	add	r2, r3, #1
   3907c:	str	r2, [r4, #20]
   39080:	strb	r9, [r3]
   39084:	ldrb	r3, [r4, #25]
   39088:	ldr	sl, [r4, #32]
   3908c:	mul	sl, sl, r3
   39090:	ldr	r0, [r4, #20]
   39094:	add	r3, r0, sl
   39098:	ldr	r2, [r4, #16]
   3909c:	cmp	r2, r3
   390a0:	bcs	39110 <flatcc_json_printer_int8_vector_field@@Base+0x1d4>
   390a4:	mov	r1, sl
   390a8:	mov	r0, r4
   390ac:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   390b0:	ldr	r1, [r4, #20]
   390b4:	ldrsb	r0, [r5], #1
   390b8:	bl	3125c <flatcc_json_parser_struct_as_root@@Base+0xd84>
   390bc:	ldr	r3, [r4, #20]
   390c0:	add	r0, r3, r0
   390c4:	str	r0, [r4, #20]
   390c8:	cmp	r6, r5
   390cc:	beq	3912c <flatcc_json_printer_int8_vector_field@@Base+0x1f0>
   390d0:	ldr	r3, [r4, #20]
   390d4:	add	r2, r3, #1
   390d8:	str	r2, [r4, #20]
   390dc:	strb	r7, [r3]
   390e0:	ldrb	r3, [r4, #25]
   390e4:	cmp	r3, #0
   390e8:	bne	39074 <flatcc_json_printer_int8_vector_field@@Base+0x138>
   390ec:	ldr	r2, [r4, #20]
   390f0:	ldr	r3, [r4, #16]
   390f4:	cmp	r2, r3
   390f8:	bcc	390b0 <flatcc_json_printer_int8_vector_field@@Base+0x174>
   390fc:	ldr	r3, [r4, #44]	; 0x2c
   39100:	mov	r1, r8
   39104:	mov	r0, r4
   39108:	blx	r3
   3910c:	b	390b0 <flatcc_json_printer_int8_vector_field@@Base+0x174>
   39110:	mov	r2, sl
   39114:	mov	r1, #32
   39118:	bl	1459c <memset@plt>
   3911c:	ldr	r3, [r4, #20]
   39120:	add	sl, r3, sl
   39124:	str	sl, [r4, #20]
   39128:	b	390b0 <flatcc_json_printer_int8_vector_field@@Base+0x174>
   3912c:	ldrb	r3, [r4, #25]
   39130:	cmp	r3, #0
   39134:	bne	39164 <flatcc_json_printer_int8_vector_field@@Base+0x228>
   39138:	ldr	r3, [r4, #20]
   3913c:	add	r2, r3, #1
   39140:	str	r2, [r4, #20]
   39144:	mov	r2, #93	; 0x5d
   39148:	strb	r2, [r3]
   3914c:	ldrd	r4, [sp]
   39150:	ldrd	r6, [sp, #8]
   39154:	ldrd	r8, [sp, #16]
   39158:	ldr	sl, [sp, #24]
   3915c:	add	sp, sp, #28
   39160:	pop	{pc}		; (ldr pc, [sp], #4)
   39164:	ldr	r3, [r4, #20]
   39168:	add	r2, r3, #1
   3916c:	str	r2, [r4, #20]
   39170:	mov	r2, #10
   39174:	strb	r2, [r3]
   39178:	ldr	r5, [r4, #32]
   3917c:	sub	r5, r5, #1
   39180:	str	r5, [r4, #32]
   39184:	ldrb	r3, [r4, #25]
   39188:	mul	r5, r5, r3
   3918c:	ldr	r0, [r4, #20]
   39190:	add	r3, r0, r5
   39194:	ldr	r2, [r4, #16]
   39198:	cmp	r2, r3
   3919c:	bcs	391b0 <flatcc_json_printer_int8_vector_field@@Base+0x274>
   391a0:	mov	r1, r5
   391a4:	mov	r0, r4
   391a8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   391ac:	b	39138 <flatcc_json_printer_int8_vector_field@@Base+0x1fc>
   391b0:	mov	r2, r5
   391b4:	mov	r1, #32
   391b8:	bl	1459c <memset@plt>
   391bc:	ldr	r3, [r4, #20]
   391c0:	add	r5, r3, r5
   391c4:	str	r5, [r4, #20]
   391c8:	b	39138 <flatcc_json_printer_int8_vector_field@@Base+0x1fc>

000391cc <flatcc_json_printer_int16_vector_field@@Base>:
   391cc:	add	r2, r2, #2
   391d0:	lsl	r2, r2, #1
   391d4:	ldr	ip, [r1, #8]
   391d8:	cmp	ip, r2
   391dc:	bxle	lr
   391e0:	ldr	ip, [r1, #4]
   391e4:	ldrh	r2, [ip, r2]
   391e8:	cmp	r2, #0
   391ec:	bxeq	lr
   391f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   391f4:	strd	r6, [sp, #8]
   391f8:	strd	r8, [sp, #16]
   391fc:	str	sl, [sp, #24]
   39200:	str	lr, [sp, #28]
   39204:	ldr	ip, [r1]
   39208:	adds	lr, ip, r2
   3920c:	beq	393dc <flatcc_json_printer_int16_vector_field@@Base+0x210>
   39210:	ldr	r4, [r1, #16]
   39214:	add	r5, r4, #1
   39218:	str	r5, [r1, #16]
   3921c:	cmp	r4, #0
   39220:	beq	39238 <flatcc_json_printer_int16_vector_field@@Base+0x6c>
   39224:	ldr	r1, [r0, #20]
   39228:	add	r4, r1, #1
   3922c:	str	r4, [r0, #20]
   39230:	mov	r4, #44	; 0x2c
   39234:	strb	r4, [r1]
   39238:	mov	r1, r3
   3923c:	mov	r4, r0
   39240:	ldr	r3, [ip, r2]
   39244:	add	r6, lr, r3
   39248:	ldr	r7, [lr, r3]
   3924c:	ldr	r2, [sp, #32]
   39250:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   39254:	ldr	r3, [r4, #32]
   39258:	add	r3, r3, #1
   3925c:	str	r3, [r4, #32]
   39260:	ldr	r3, [r4, #20]
   39264:	add	r2, r3, #1
   39268:	str	r2, [r4, #20]
   3926c:	mov	r2, #91	; 0x5b
   39270:	strb	r2, [r3]
   39274:	cmp	r7, #0
   39278:	beq	393bc <flatcc_json_printer_int16_vector_field@@Base+0x1f0>
   3927c:	ldrb	r3, [r4, #25]
   39280:	cmp	r3, #0
   39284:	bne	392e0 <flatcc_json_printer_int16_vector_field@@Base+0x114>
   39288:	ldr	r2, [r4, #20]
   3928c:	ldr	r3, [r4, #16]
   39290:	cmp	r2, r3
   39294:	bcc	392a8 <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   39298:	ldr	r3, [r4, #44]	; 0x2c
   3929c:	mov	r1, #0
   392a0:	mov	r0, r4
   392a4:	blx	r3
   392a8:	ldr	r1, [r4, #20]
   392ac:	ldrsh	r0, [r6, #4]
   392b0:	bl	3129c <flatcc_json_parser_struct_as_root@@Base+0xdc4>
   392b4:	ldr	r3, [r4, #20]
   392b8:	add	r0, r3, r0
   392bc:	str	r0, [r4, #20]
   392c0:	add	r6, r6, #6
   392c4:	sub	r5, r7, #2
   392c8:	cmp	r7, #1
   392cc:	beq	393bc <flatcc_json_printer_int16_vector_field@@Base+0x1f0>
   392d0:	mov	r7, #44	; 0x2c
   392d4:	mov	r8, #0
   392d8:	mov	r9, #10
   392dc:	b	39360 <flatcc_json_printer_int16_vector_field@@Base+0x194>
   392e0:	ldr	r3, [r4, #20]
   392e4:	add	r2, r3, #1
   392e8:	str	r2, [r4, #20]
   392ec:	mov	r2, #10
   392f0:	strb	r2, [r3]
   392f4:	mov	r0, r4
   392f8:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   392fc:	b	392a8 <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   39300:	ldr	r3, [r4, #20]
   39304:	add	r2, r3, #1
   39308:	str	r2, [r4, #20]
   3930c:	strb	r9, [r3]
   39310:	ldrb	r3, [r4, #25]
   39314:	ldr	sl, [r4, #32]
   39318:	mul	sl, sl, r3
   3931c:	ldr	r0, [r4, #20]
   39320:	add	r3, r0, sl
   39324:	ldr	r2, [r4, #16]
   39328:	cmp	r2, r3
   3932c:	bcs	393a0 <flatcc_json_printer_int16_vector_field@@Base+0x1d4>
   39330:	mov	r1, sl
   39334:	mov	r0, r4
   39338:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3933c:	ldr	r1, [r4, #20]
   39340:	ldrsh	r0, [r6], #2
   39344:	bl	3129c <flatcc_json_parser_struct_as_root@@Base+0xdc4>
   39348:	ldr	r3, [r4, #20]
   3934c:	add	r0, r3, r0
   39350:	str	r0, [r4, #20]
   39354:	sub	r5, r5, #1
   39358:	cmn	r5, #1
   3935c:	beq	393bc <flatcc_json_printer_int16_vector_field@@Base+0x1f0>
   39360:	ldr	r3, [r4, #20]
   39364:	add	r2, r3, #1
   39368:	str	r2, [r4, #20]
   3936c:	strb	r7, [r3]
   39370:	ldrb	r3, [r4, #25]
   39374:	cmp	r3, #0
   39378:	bne	39300 <flatcc_json_printer_int16_vector_field@@Base+0x134>
   3937c:	ldr	r2, [r4, #20]
   39380:	ldr	r3, [r4, #16]
   39384:	cmp	r2, r3
   39388:	bcc	3933c <flatcc_json_printer_int16_vector_field@@Base+0x170>
   3938c:	ldr	r3, [r4, #44]	; 0x2c
   39390:	mov	r1, r8
   39394:	mov	r0, r4
   39398:	blx	r3
   3939c:	b	3933c <flatcc_json_printer_int16_vector_field@@Base+0x170>
   393a0:	mov	r2, sl
   393a4:	mov	r1, #32
   393a8:	bl	1459c <memset@plt>
   393ac:	ldr	r3, [r4, #20]
   393b0:	add	sl, r3, sl
   393b4:	str	sl, [r4, #20]
   393b8:	b	3933c <flatcc_json_printer_int16_vector_field@@Base+0x170>
   393bc:	ldrb	r3, [r4, #25]
   393c0:	cmp	r3, #0
   393c4:	bne	393f4 <flatcc_json_printer_int16_vector_field@@Base+0x228>
   393c8:	ldr	r3, [r4, #20]
   393cc:	add	r2, r3, #1
   393d0:	str	r2, [r4, #20]
   393d4:	mov	r2, #93	; 0x5d
   393d8:	strb	r2, [r3]
   393dc:	ldrd	r4, [sp]
   393e0:	ldrd	r6, [sp, #8]
   393e4:	ldrd	r8, [sp, #16]
   393e8:	ldr	sl, [sp, #24]
   393ec:	add	sp, sp, #28
   393f0:	pop	{pc}		; (ldr pc, [sp], #4)
   393f4:	ldr	r3, [r4, #20]
   393f8:	add	r2, r3, #1
   393fc:	str	r2, [r4, #20]
   39400:	mov	r2, #10
   39404:	strb	r2, [r3]
   39408:	ldr	r5, [r4, #32]
   3940c:	sub	r5, r5, #1
   39410:	str	r5, [r4, #32]
   39414:	ldrb	r3, [r4, #25]
   39418:	mul	r5, r5, r3
   3941c:	ldr	r0, [r4, #20]
   39420:	add	r3, r0, r5
   39424:	ldr	r2, [r4, #16]
   39428:	cmp	r2, r3
   3942c:	bcs	39440 <flatcc_json_printer_int16_vector_field@@Base+0x274>
   39430:	mov	r1, r5
   39434:	mov	r0, r4
   39438:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3943c:	b	393c8 <flatcc_json_printer_int16_vector_field@@Base+0x1fc>
   39440:	mov	r2, r5
   39444:	mov	r1, #32
   39448:	bl	1459c <memset@plt>
   3944c:	ldr	r3, [r4, #20]
   39450:	add	r5, r3, r5
   39454:	str	r5, [r4, #20]
   39458:	b	393c8 <flatcc_json_printer_int16_vector_field@@Base+0x1fc>

0003945c <flatcc_json_printer_int32_vector_field@@Base>:
   3945c:	add	r2, r2, #2
   39460:	lsl	r2, r2, #1
   39464:	ldr	ip, [r1, #8]
   39468:	cmp	ip, r2
   3946c:	bxle	lr
   39470:	ldr	ip, [r1, #4]
   39474:	ldrh	r2, [ip, r2]
   39478:	cmp	r2, #0
   3947c:	bxeq	lr
   39480:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39484:	strd	r6, [sp, #8]
   39488:	strd	r8, [sp, #16]
   3948c:	str	sl, [sp, #24]
   39490:	str	lr, [sp, #28]
   39494:	ldr	ip, [r1]
   39498:	adds	lr, ip, r2
   3949c:	beq	3966c <flatcc_json_printer_int32_vector_field@@Base+0x210>
   394a0:	ldr	r4, [r1, #16]
   394a4:	add	r5, r4, #1
   394a8:	str	r5, [r1, #16]
   394ac:	cmp	r4, #0
   394b0:	beq	394c8 <flatcc_json_printer_int32_vector_field@@Base+0x6c>
   394b4:	ldr	r1, [r0, #20]
   394b8:	add	r4, r1, #1
   394bc:	str	r4, [r0, #20]
   394c0:	mov	r4, #44	; 0x2c
   394c4:	strb	r4, [r1]
   394c8:	mov	r1, r3
   394cc:	mov	r4, r0
   394d0:	ldr	r3, [ip, r2]
   394d4:	add	r6, lr, r3
   394d8:	ldr	r7, [lr, r3]
   394dc:	ldr	r2, [sp, #32]
   394e0:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   394e4:	ldr	r3, [r4, #32]
   394e8:	add	r3, r3, #1
   394ec:	str	r3, [r4, #32]
   394f0:	ldr	r3, [r4, #20]
   394f4:	add	r2, r3, #1
   394f8:	str	r2, [r4, #20]
   394fc:	mov	r2, #91	; 0x5b
   39500:	strb	r2, [r3]
   39504:	cmp	r7, #0
   39508:	beq	3964c <flatcc_json_printer_int32_vector_field@@Base+0x1f0>
   3950c:	ldrb	r3, [r4, #25]
   39510:	cmp	r3, #0
   39514:	bne	39570 <flatcc_json_printer_int32_vector_field@@Base+0x114>
   39518:	ldr	r2, [r4, #20]
   3951c:	ldr	r3, [r4, #16]
   39520:	cmp	r2, r3
   39524:	bcc	39538 <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   39528:	ldr	r3, [r4, #44]	; 0x2c
   3952c:	mov	r1, #0
   39530:	mov	r0, r4
   39534:	blx	r3
   39538:	ldr	r1, [r4, #20]
   3953c:	ldr	r0, [r6, #4]
   39540:	bl	312dc <flatcc_json_parser_struct_as_root@@Base+0xe04>
   39544:	ldr	r3, [r4, #20]
   39548:	add	r0, r3, r0
   3954c:	str	r0, [r4, #20]
   39550:	add	r6, r6, #8
   39554:	sub	r5, r7, #2
   39558:	cmp	r7, #1
   3955c:	beq	3964c <flatcc_json_printer_int32_vector_field@@Base+0x1f0>
   39560:	mov	r7, #44	; 0x2c
   39564:	mov	r8, #0
   39568:	mov	r9, #10
   3956c:	b	395f0 <flatcc_json_printer_int32_vector_field@@Base+0x194>
   39570:	ldr	r3, [r4, #20]
   39574:	add	r2, r3, #1
   39578:	str	r2, [r4, #20]
   3957c:	mov	r2, #10
   39580:	strb	r2, [r3]
   39584:	mov	r0, r4
   39588:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3958c:	b	39538 <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   39590:	ldr	r3, [r4, #20]
   39594:	add	r2, r3, #1
   39598:	str	r2, [r4, #20]
   3959c:	strb	r9, [r3]
   395a0:	ldrb	r3, [r4, #25]
   395a4:	ldr	sl, [r4, #32]
   395a8:	mul	sl, sl, r3
   395ac:	ldr	r0, [r4, #20]
   395b0:	add	r3, r0, sl
   395b4:	ldr	r2, [r4, #16]
   395b8:	cmp	r2, r3
   395bc:	bcs	39630 <flatcc_json_printer_int32_vector_field@@Base+0x1d4>
   395c0:	mov	r1, sl
   395c4:	mov	r0, r4
   395c8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   395cc:	ldr	r1, [r4, #20]
   395d0:	ldr	r0, [r6], #4
   395d4:	bl	312dc <flatcc_json_parser_struct_as_root@@Base+0xe04>
   395d8:	ldr	r3, [r4, #20]
   395dc:	add	r0, r3, r0
   395e0:	str	r0, [r4, #20]
   395e4:	sub	r5, r5, #1
   395e8:	cmn	r5, #1
   395ec:	beq	3964c <flatcc_json_printer_int32_vector_field@@Base+0x1f0>
   395f0:	ldr	r3, [r4, #20]
   395f4:	add	r2, r3, #1
   395f8:	str	r2, [r4, #20]
   395fc:	strb	r7, [r3]
   39600:	ldrb	r3, [r4, #25]
   39604:	cmp	r3, #0
   39608:	bne	39590 <flatcc_json_printer_int32_vector_field@@Base+0x134>
   3960c:	ldr	r2, [r4, #20]
   39610:	ldr	r3, [r4, #16]
   39614:	cmp	r2, r3
   39618:	bcc	395cc <flatcc_json_printer_int32_vector_field@@Base+0x170>
   3961c:	ldr	r3, [r4, #44]	; 0x2c
   39620:	mov	r1, r8
   39624:	mov	r0, r4
   39628:	blx	r3
   3962c:	b	395cc <flatcc_json_printer_int32_vector_field@@Base+0x170>
   39630:	mov	r2, sl
   39634:	mov	r1, #32
   39638:	bl	1459c <memset@plt>
   3963c:	ldr	r3, [r4, #20]
   39640:	add	sl, r3, sl
   39644:	str	sl, [r4, #20]
   39648:	b	395cc <flatcc_json_printer_int32_vector_field@@Base+0x170>
   3964c:	ldrb	r3, [r4, #25]
   39650:	cmp	r3, #0
   39654:	bne	39684 <flatcc_json_printer_int32_vector_field@@Base+0x228>
   39658:	ldr	r3, [r4, #20]
   3965c:	add	r2, r3, #1
   39660:	str	r2, [r4, #20]
   39664:	mov	r2, #93	; 0x5d
   39668:	strb	r2, [r3]
   3966c:	ldrd	r4, [sp]
   39670:	ldrd	r6, [sp, #8]
   39674:	ldrd	r8, [sp, #16]
   39678:	ldr	sl, [sp, #24]
   3967c:	add	sp, sp, #28
   39680:	pop	{pc}		; (ldr pc, [sp], #4)
   39684:	ldr	r3, [r4, #20]
   39688:	add	r2, r3, #1
   3968c:	str	r2, [r4, #20]
   39690:	mov	r2, #10
   39694:	strb	r2, [r3]
   39698:	ldr	r5, [r4, #32]
   3969c:	sub	r5, r5, #1
   396a0:	str	r5, [r4, #32]
   396a4:	ldrb	r3, [r4, #25]
   396a8:	mul	r5, r5, r3
   396ac:	ldr	r0, [r4, #20]
   396b0:	add	r3, r0, r5
   396b4:	ldr	r2, [r4, #16]
   396b8:	cmp	r2, r3
   396bc:	bcs	396d0 <flatcc_json_printer_int32_vector_field@@Base+0x274>
   396c0:	mov	r1, r5
   396c4:	mov	r0, r4
   396c8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   396cc:	b	39658 <flatcc_json_printer_int32_vector_field@@Base+0x1fc>
   396d0:	mov	r2, r5
   396d4:	mov	r1, #32
   396d8:	bl	1459c <memset@plt>
   396dc:	ldr	r3, [r4, #20]
   396e0:	add	r5, r3, r5
   396e4:	str	r5, [r4, #20]
   396e8:	b	39658 <flatcc_json_printer_int32_vector_field@@Base+0x1fc>

000396ec <flatcc_json_printer_int64_vector_field@@Base>:
   396ec:	add	r2, r2, #2
   396f0:	lsl	r2, r2, #1
   396f4:	ldr	ip, [r1, #8]
   396f8:	cmp	ip, r2
   396fc:	bxle	lr
   39700:	ldr	ip, [r1, #4]
   39704:	ldrh	r2, [ip, r2]
   39708:	cmp	r2, #0
   3970c:	bxeq	lr
   39710:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39714:	strd	r6, [sp, #8]
   39718:	strd	r8, [sp, #16]
   3971c:	str	sl, [sp, #24]
   39720:	str	lr, [sp, #28]
   39724:	ldr	ip, [r1]
   39728:	adds	lr, ip, r2
   3972c:	beq	398fc <flatcc_json_printer_int64_vector_field@@Base+0x210>
   39730:	ldr	r4, [r1, #16]
   39734:	add	r5, r4, #1
   39738:	str	r5, [r1, #16]
   3973c:	cmp	r4, #0
   39740:	beq	39758 <flatcc_json_printer_int64_vector_field@@Base+0x6c>
   39744:	ldr	r1, [r0, #20]
   39748:	add	r4, r1, #1
   3974c:	str	r4, [r0, #20]
   39750:	mov	r4, #44	; 0x2c
   39754:	strb	r4, [r1]
   39758:	mov	r1, r3
   3975c:	mov	r4, r0
   39760:	ldr	r3, [ip, r2]
   39764:	add	r6, lr, r3
   39768:	ldr	r7, [lr, r3]
   3976c:	ldr	r2, [sp, #32]
   39770:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   39774:	ldr	r3, [r4, #32]
   39778:	add	r3, r3, #1
   3977c:	str	r3, [r4, #32]
   39780:	ldr	r3, [r4, #20]
   39784:	add	r2, r3, #1
   39788:	str	r2, [r4, #20]
   3978c:	mov	r2, #91	; 0x5b
   39790:	strb	r2, [r3]
   39794:	cmp	r7, #0
   39798:	beq	398dc <flatcc_json_printer_int64_vector_field@@Base+0x1f0>
   3979c:	ldrb	r3, [r4, #25]
   397a0:	cmp	r3, #0
   397a4:	bne	39800 <flatcc_json_printer_int64_vector_field@@Base+0x114>
   397a8:	ldr	r2, [r4, #20]
   397ac:	ldr	r3, [r4, #16]
   397b0:	cmp	r2, r3
   397b4:	bcc	397c8 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   397b8:	ldr	r3, [r4, #44]	; 0x2c
   397bc:	mov	r1, #0
   397c0:	mov	r0, r4
   397c4:	blx	r3
   397c8:	ldr	r2, [r4, #20]
   397cc:	ldrd	r0, [r6, #4]
   397d0:	bl	31314 <flatcc_json_parser_struct_as_root@@Base+0xe3c>
   397d4:	ldr	r3, [r4, #20]
   397d8:	add	r0, r3, r0
   397dc:	str	r0, [r4, #20]
   397e0:	add	r6, r6, #12
   397e4:	sub	r5, r7, #2
   397e8:	cmp	r7, #1
   397ec:	beq	398dc <flatcc_json_printer_int64_vector_field@@Base+0x1f0>
   397f0:	mov	r7, #44	; 0x2c
   397f4:	mov	r8, #0
   397f8:	mov	r9, #10
   397fc:	b	39880 <flatcc_json_printer_int64_vector_field@@Base+0x194>
   39800:	ldr	r3, [r4, #20]
   39804:	add	r2, r3, #1
   39808:	str	r2, [r4, #20]
   3980c:	mov	r2, #10
   39810:	strb	r2, [r3]
   39814:	mov	r0, r4
   39818:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3981c:	b	397c8 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   39820:	ldr	r3, [r4, #20]
   39824:	add	r2, r3, #1
   39828:	str	r2, [r4, #20]
   3982c:	strb	r9, [r3]
   39830:	ldrb	r3, [r4, #25]
   39834:	ldr	sl, [r4, #32]
   39838:	mul	sl, sl, r3
   3983c:	ldr	r0, [r4, #20]
   39840:	add	r3, r0, sl
   39844:	ldr	r2, [r4, #16]
   39848:	cmp	r2, r3
   3984c:	bcs	398c0 <flatcc_json_printer_int64_vector_field@@Base+0x1d4>
   39850:	mov	r1, sl
   39854:	mov	r0, r4
   39858:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3985c:	ldr	r2, [r4, #20]
   39860:	ldrd	r0, [r6], #8
   39864:	bl	31314 <flatcc_json_parser_struct_as_root@@Base+0xe3c>
   39868:	ldr	r3, [r4, #20]
   3986c:	add	r0, r3, r0
   39870:	str	r0, [r4, #20]
   39874:	sub	r5, r5, #1
   39878:	cmn	r5, #1
   3987c:	beq	398dc <flatcc_json_printer_int64_vector_field@@Base+0x1f0>
   39880:	ldr	r3, [r4, #20]
   39884:	add	r2, r3, #1
   39888:	str	r2, [r4, #20]
   3988c:	strb	r7, [r3]
   39890:	ldrb	r3, [r4, #25]
   39894:	cmp	r3, #0
   39898:	bne	39820 <flatcc_json_printer_int64_vector_field@@Base+0x134>
   3989c:	ldr	r2, [r4, #20]
   398a0:	ldr	r3, [r4, #16]
   398a4:	cmp	r2, r3
   398a8:	bcc	3985c <flatcc_json_printer_int64_vector_field@@Base+0x170>
   398ac:	ldr	r3, [r4, #44]	; 0x2c
   398b0:	mov	r1, r8
   398b4:	mov	r0, r4
   398b8:	blx	r3
   398bc:	b	3985c <flatcc_json_printer_int64_vector_field@@Base+0x170>
   398c0:	mov	r2, sl
   398c4:	mov	r1, #32
   398c8:	bl	1459c <memset@plt>
   398cc:	ldr	r3, [r4, #20]
   398d0:	add	sl, r3, sl
   398d4:	str	sl, [r4, #20]
   398d8:	b	3985c <flatcc_json_printer_int64_vector_field@@Base+0x170>
   398dc:	ldrb	r3, [r4, #25]
   398e0:	cmp	r3, #0
   398e4:	bne	39914 <flatcc_json_printer_int64_vector_field@@Base+0x228>
   398e8:	ldr	r3, [r4, #20]
   398ec:	add	r2, r3, #1
   398f0:	str	r2, [r4, #20]
   398f4:	mov	r2, #93	; 0x5d
   398f8:	strb	r2, [r3]
   398fc:	ldrd	r4, [sp]
   39900:	ldrd	r6, [sp, #8]
   39904:	ldrd	r8, [sp, #16]
   39908:	ldr	sl, [sp, #24]
   3990c:	add	sp, sp, #28
   39910:	pop	{pc}		; (ldr pc, [sp], #4)
   39914:	ldr	r3, [r4, #20]
   39918:	add	r2, r3, #1
   3991c:	str	r2, [r4, #20]
   39920:	mov	r2, #10
   39924:	strb	r2, [r3]
   39928:	ldr	r5, [r4, #32]
   3992c:	sub	r5, r5, #1
   39930:	str	r5, [r4, #32]
   39934:	ldrb	r3, [r4, #25]
   39938:	mul	r5, r5, r3
   3993c:	ldr	r0, [r4, #20]
   39940:	add	r3, r0, r5
   39944:	ldr	r2, [r4, #16]
   39948:	cmp	r2, r3
   3994c:	bcs	39960 <flatcc_json_printer_int64_vector_field@@Base+0x274>
   39950:	mov	r1, r5
   39954:	mov	r0, r4
   39958:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3995c:	b	398e8 <flatcc_json_printer_int64_vector_field@@Base+0x1fc>
   39960:	mov	r2, r5
   39964:	mov	r1, #32
   39968:	bl	1459c <memset@plt>
   3996c:	ldr	r3, [r4, #20]
   39970:	add	r5, r3, r5
   39974:	str	r5, [r4, #20]
   39978:	b	398e8 <flatcc_json_printer_int64_vector_field@@Base+0x1fc>

0003997c <flatcc_json_printer_bool_vector_field@@Base>:
   3997c:	add	r2, r2, #2
   39980:	lsl	r2, r2, #1
   39984:	ldr	ip, [r1, #8]
   39988:	cmp	ip, r2
   3998c:	bxle	lr
   39990:	ldr	ip, [r1, #4]
   39994:	ldrh	r2, [ip, r2]
   39998:	cmp	r2, #0
   3999c:	bxeq	lr
   399a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   399a4:	strd	r6, [sp, #8]
   399a8:	strd	r8, [sp, #16]
   399ac:	str	sl, [sp, #24]
   399b0:	str	lr, [sp, #28]
   399b4:	ldr	ip, [r1]
   399b8:	adds	lr, ip, r2
   399bc:	beq	39bcc <flatcc_json_printer_bool_vector_field@@Base+0x250>
   399c0:	ldr	r4, [r1, #16]
   399c4:	add	r5, r4, #1
   399c8:	str	r5, [r1, #16]
   399cc:	cmp	r4, #0
   399d0:	beq	399e8 <flatcc_json_printer_bool_vector_field@@Base+0x6c>
   399d4:	ldr	r1, [r0, #20]
   399d8:	add	r4, r1, #1
   399dc:	str	r4, [r0, #20]
   399e0:	mov	r4, #44	; 0x2c
   399e4:	strb	r4, [r1]
   399e8:	mov	r1, r3
   399ec:	mov	r4, r0
   399f0:	ldr	r3, [ip, r2]
   399f4:	add	r6, lr, r3
   399f8:	ldr	r7, [lr, r3]
   399fc:	ldr	r2, [sp, #32]
   39a00:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   39a04:	ldr	r3, [r4, #32]
   39a08:	add	r3, r3, #1
   39a0c:	str	r3, [r4, #32]
   39a10:	ldr	r3, [r4, #20]
   39a14:	add	r2, r3, #1
   39a18:	str	r2, [r4, #20]
   39a1c:	mov	r2, #91	; 0x5b
   39a20:	strb	r2, [r3]
   39a24:	cmp	r7, #0
   39a28:	beq	39bac <flatcc_json_printer_bool_vector_field@@Base+0x230>
   39a2c:	ldrb	r3, [r4, #25]
   39a30:	cmp	r3, #0
   39a34:	bne	39a94 <flatcc_json_printer_bool_vector_field@@Base+0x118>
   39a38:	ldr	r2, [r4, #20]
   39a3c:	ldr	r3, [r4, #16]
   39a40:	cmp	r2, r3
   39a44:	bcc	39a58 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   39a48:	ldr	r3, [r4, #44]	; 0x2c
   39a4c:	mov	r1, #0
   39a50:	mov	r0, r4
   39a54:	blx	r3
   39a58:	ldr	r1, [r4, #20]
   39a5c:	ldrb	r0, [r6, #4]
   39a60:	bl	31b08 <flatcc_json_parser_struct_as_root@@Base+0x1630>
   39a64:	ldr	r3, [r4, #20]
   39a68:	add	r0, r3, r0
   39a6c:	str	r0, [r4, #20]
   39a70:	add	r5, r6, #5
   39a74:	cmp	r7, #1
   39a78:	beq	39bac <flatcc_json_printer_bool_vector_field@@Base+0x230>
   39a7c:	add	r7, r7, #4
   39a80:	add	r6, r6, r7
   39a84:	mov	r7, #44	; 0x2c
   39a88:	mov	r8, #0
   39a8c:	mov	r9, #10
   39a90:	b	39b50 <flatcc_json_printer_bool_vector_field@@Base+0x1d4>
   39a94:	ldr	r3, [r4, #20]
   39a98:	add	r2, r3, #1
   39a9c:	str	r2, [r4, #20]
   39aa0:	mov	r2, #10
   39aa4:	strb	r2, [r3]
   39aa8:	ldrb	r3, [r4, #25]
   39aac:	ldr	r5, [r4, #32]
   39ab0:	mul	r5, r5, r3
   39ab4:	ldr	r0, [r4, #20]
   39ab8:	add	r3, r0, r5
   39abc:	ldr	r2, [r4, #16]
   39ac0:	cmp	r2, r3
   39ac4:	bcs	39ad8 <flatcc_json_printer_bool_vector_field@@Base+0x15c>
   39ac8:	mov	r1, r5
   39acc:	mov	r0, r4
   39ad0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   39ad4:	b	39a58 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   39ad8:	mov	r2, r5
   39adc:	mov	r1, #32
   39ae0:	bl	1459c <memset@plt>
   39ae4:	ldr	r3, [r4, #20]
   39ae8:	add	r5, r3, r5
   39aec:	str	r5, [r4, #20]
   39af0:	b	39a58 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   39af4:	ldr	r3, [r4, #20]
   39af8:	add	r2, r3, #1
   39afc:	str	r2, [r4, #20]
   39b00:	strb	r9, [r3]
   39b04:	ldrb	r3, [r4, #25]
   39b08:	ldr	sl, [r4, #32]
   39b0c:	mul	sl, sl, r3
   39b10:	ldr	r0, [r4, #20]
   39b14:	add	r3, r0, sl
   39b18:	ldr	r2, [r4, #16]
   39b1c:	cmp	r2, r3
   39b20:	bcs	39b90 <flatcc_json_printer_bool_vector_field@@Base+0x214>
   39b24:	mov	r1, sl
   39b28:	mov	r0, r4
   39b2c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   39b30:	ldr	r1, [r4, #20]
   39b34:	ldrb	r0, [r5], #1
   39b38:	bl	31b08 <flatcc_json_parser_struct_as_root@@Base+0x1630>
   39b3c:	ldr	r3, [r4, #20]
   39b40:	add	r0, r3, r0
   39b44:	str	r0, [r4, #20]
   39b48:	cmp	r6, r5
   39b4c:	beq	39bac <flatcc_json_printer_bool_vector_field@@Base+0x230>
   39b50:	ldr	r3, [r4, #20]
   39b54:	add	r2, r3, #1
   39b58:	str	r2, [r4, #20]
   39b5c:	strb	r7, [r3]
   39b60:	ldrb	r3, [r4, #25]
   39b64:	cmp	r3, #0
   39b68:	bne	39af4 <flatcc_json_printer_bool_vector_field@@Base+0x178>
   39b6c:	ldr	r2, [r4, #20]
   39b70:	ldr	r3, [r4, #16]
   39b74:	cmp	r2, r3
   39b78:	bcc	39b30 <flatcc_json_printer_bool_vector_field@@Base+0x1b4>
   39b7c:	ldr	r3, [r4, #44]	; 0x2c
   39b80:	mov	r1, r8
   39b84:	mov	r0, r4
   39b88:	blx	r3
   39b8c:	b	39b30 <flatcc_json_printer_bool_vector_field@@Base+0x1b4>
   39b90:	mov	r2, sl
   39b94:	mov	r1, #32
   39b98:	bl	1459c <memset@plt>
   39b9c:	ldr	r3, [r4, #20]
   39ba0:	add	sl, r3, sl
   39ba4:	str	sl, [r4, #20]
   39ba8:	b	39b30 <flatcc_json_printer_bool_vector_field@@Base+0x1b4>
   39bac:	ldrb	r3, [r4, #25]
   39bb0:	cmp	r3, #0
   39bb4:	bne	39be4 <flatcc_json_printer_bool_vector_field@@Base+0x268>
   39bb8:	ldr	r3, [r4, #20]
   39bbc:	add	r2, r3, #1
   39bc0:	str	r2, [r4, #20]
   39bc4:	mov	r2, #93	; 0x5d
   39bc8:	strb	r2, [r3]
   39bcc:	ldrd	r4, [sp]
   39bd0:	ldrd	r6, [sp, #8]
   39bd4:	ldrd	r8, [sp, #16]
   39bd8:	ldr	sl, [sp, #24]
   39bdc:	add	sp, sp, #28
   39be0:	pop	{pc}		; (ldr pc, [sp], #4)
   39be4:	ldr	r3, [r4, #20]
   39be8:	add	r2, r3, #1
   39bec:	str	r2, [r4, #20]
   39bf0:	mov	r2, #10
   39bf4:	strb	r2, [r3]
   39bf8:	ldr	r5, [r4, #32]
   39bfc:	sub	r5, r5, #1
   39c00:	str	r5, [r4, #32]
   39c04:	ldrb	r3, [r4, #25]
   39c08:	mul	r5, r5, r3
   39c0c:	ldr	r0, [r4, #20]
   39c10:	add	r3, r0, r5
   39c14:	ldr	r2, [r4, #16]
   39c18:	cmp	r2, r3
   39c1c:	bcs	39c30 <flatcc_json_printer_bool_vector_field@@Base+0x2b4>
   39c20:	mov	r1, r5
   39c24:	mov	r0, r4
   39c28:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   39c2c:	b	39bb8 <flatcc_json_printer_bool_vector_field@@Base+0x23c>
   39c30:	mov	r2, r5
   39c34:	mov	r1, #32
   39c38:	bl	1459c <memset@plt>
   39c3c:	ldr	r3, [r4, #20]
   39c40:	add	r5, r3, r5
   39c44:	str	r5, [r4, #20]
   39c48:	b	39bb8 <flatcc_json_printer_bool_vector_field@@Base+0x23c>

00039c4c <flatcc_json_printer_float_vector_field@@Base>:
   39c4c:	add	r2, r2, #2
   39c50:	lsl	r2, r2, #1
   39c54:	ldr	ip, [r1, #8]
   39c58:	cmp	ip, r2
   39c5c:	bxle	lr
   39c60:	ldr	ip, [r1, #4]
   39c64:	ldrh	r2, [ip, r2]
   39c68:	cmp	r2, #0
   39c6c:	bxeq	lr
   39c70:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39c74:	strd	r6, [sp, #8]
   39c78:	strd	r8, [sp, #16]
   39c7c:	str	sl, [sp, #24]
   39c80:	str	lr, [sp, #28]
   39c84:	ldr	ip, [r1]
   39c88:	adds	lr, ip, r2
   39c8c:	beq	39e64 <flatcc_json_printer_float_vector_field@@Base+0x218>
   39c90:	ldr	r4, [r1, #16]
   39c94:	add	r5, r4, #1
   39c98:	str	r5, [r1, #16]
   39c9c:	cmp	r4, #0
   39ca0:	beq	39cb8 <flatcc_json_printer_float_vector_field@@Base+0x6c>
   39ca4:	ldr	r1, [r0, #20]
   39ca8:	add	r4, r1, #1
   39cac:	str	r4, [r0, #20]
   39cb0:	mov	r4, #44	; 0x2c
   39cb4:	strb	r4, [r1]
   39cb8:	mov	r1, r3
   39cbc:	mov	r4, r0
   39cc0:	ldr	r3, [ip, r2]
   39cc4:	add	r6, lr, r3
   39cc8:	ldr	r7, [lr, r3]
   39ccc:	ldr	r2, [sp, #32]
   39cd0:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   39cd4:	ldr	r3, [r4, #32]
   39cd8:	add	r3, r3, #1
   39cdc:	str	r3, [r4, #32]
   39ce0:	ldr	r3, [r4, #20]
   39ce4:	add	r2, r3, #1
   39ce8:	str	r2, [r4, #20]
   39cec:	mov	r2, #91	; 0x5b
   39cf0:	strb	r2, [r3]
   39cf4:	cmp	r7, #0
   39cf8:	beq	39e44 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
   39cfc:	ldrb	r3, [r4, #25]
   39d00:	cmp	r3, #0
   39d04:	bne	39d64 <flatcc_json_printer_float_vector_field@@Base+0x118>
   39d08:	ldr	r2, [r4, #20]
   39d0c:	ldr	r3, [r4, #16]
   39d10:	cmp	r2, r3
   39d14:	bcc	39d28 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   39d18:	ldr	r3, [r4, #44]	; 0x2c
   39d1c:	mov	r1, #0
   39d20:	mov	r0, r4
   39d24:	blx	r3
   39d28:	vldr	s0, [r6, #4]
   39d2c:	ldr	r0, [r4, #20]
   39d30:	vcvt.f64.f32	d0, s0
   39d34:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   39d38:	ldr	r3, [r4, #20]
   39d3c:	add	r0, r3, r0
   39d40:	str	r0, [r4, #20]
   39d44:	add	r6, r6, #8
   39d48:	sub	r5, r7, #2
   39d4c:	cmp	r7, #1
   39d50:	beq	39e44 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
   39d54:	mov	r7, #44	; 0x2c
   39d58:	mov	r8, #0
   39d5c:	mov	r9, #10
   39d60:	b	39de8 <flatcc_json_printer_float_vector_field@@Base+0x19c>
   39d64:	ldr	r3, [r4, #20]
   39d68:	add	r2, r3, #1
   39d6c:	str	r2, [r4, #20]
   39d70:	mov	r2, #10
   39d74:	strb	r2, [r3]
   39d78:	mov	r0, r4
   39d7c:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   39d80:	b	39d28 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   39d84:	ldr	r3, [r4, #20]
   39d88:	add	r2, r3, #1
   39d8c:	str	r2, [r4, #20]
   39d90:	strb	r9, [r3]
   39d94:	ldrb	r3, [r4, #25]
   39d98:	ldr	sl, [r4, #32]
   39d9c:	mul	sl, sl, r3
   39da0:	ldr	r0, [r4, #20]
   39da4:	add	r3, r0, sl
   39da8:	ldr	r2, [r4, #16]
   39dac:	cmp	r2, r3
   39db0:	bcs	39e28 <flatcc_json_printer_float_vector_field@@Base+0x1dc>
   39db4:	mov	r1, sl
   39db8:	mov	r0, r4
   39dbc:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   39dc0:	vldmia	r6!, {s0}
   39dc4:	ldr	r0, [r4, #20]
   39dc8:	vcvt.f64.f32	d0, s0
   39dcc:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   39dd0:	ldr	r3, [r4, #20]
   39dd4:	add	r0, r3, r0
   39dd8:	str	r0, [r4, #20]
   39ddc:	sub	r5, r5, #1
   39de0:	cmn	r5, #1
   39de4:	beq	39e44 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
   39de8:	ldr	r3, [r4, #20]
   39dec:	add	r2, r3, #1
   39df0:	str	r2, [r4, #20]
   39df4:	strb	r7, [r3]
   39df8:	ldrb	r3, [r4, #25]
   39dfc:	cmp	r3, #0
   39e00:	bne	39d84 <flatcc_json_printer_float_vector_field@@Base+0x138>
   39e04:	ldr	r2, [r4, #20]
   39e08:	ldr	r3, [r4, #16]
   39e0c:	cmp	r2, r3
   39e10:	bcc	39dc0 <flatcc_json_printer_float_vector_field@@Base+0x174>
   39e14:	ldr	r3, [r4, #44]	; 0x2c
   39e18:	mov	r1, r8
   39e1c:	mov	r0, r4
   39e20:	blx	r3
   39e24:	b	39dc0 <flatcc_json_printer_float_vector_field@@Base+0x174>
   39e28:	mov	r2, sl
   39e2c:	mov	r1, #32
   39e30:	bl	1459c <memset@plt>
   39e34:	ldr	r3, [r4, #20]
   39e38:	add	sl, r3, sl
   39e3c:	str	sl, [r4, #20]
   39e40:	b	39dc0 <flatcc_json_printer_float_vector_field@@Base+0x174>
   39e44:	ldrb	r3, [r4, #25]
   39e48:	cmp	r3, #0
   39e4c:	bne	39e7c <flatcc_json_printer_float_vector_field@@Base+0x230>
   39e50:	ldr	r3, [r4, #20]
   39e54:	add	r2, r3, #1
   39e58:	str	r2, [r4, #20]
   39e5c:	mov	r2, #93	; 0x5d
   39e60:	strb	r2, [r3]
   39e64:	ldrd	r4, [sp]
   39e68:	ldrd	r6, [sp, #8]
   39e6c:	ldrd	r8, [sp, #16]
   39e70:	ldr	sl, [sp, #24]
   39e74:	add	sp, sp, #28
   39e78:	pop	{pc}		; (ldr pc, [sp], #4)
   39e7c:	ldr	r3, [r4, #20]
   39e80:	add	r2, r3, #1
   39e84:	str	r2, [r4, #20]
   39e88:	mov	r2, #10
   39e8c:	strb	r2, [r3]
   39e90:	ldr	r5, [r4, #32]
   39e94:	sub	r5, r5, #1
   39e98:	str	r5, [r4, #32]
   39e9c:	ldrb	r3, [r4, #25]
   39ea0:	mul	r5, r5, r3
   39ea4:	ldr	r0, [r4, #20]
   39ea8:	add	r3, r0, r5
   39eac:	ldr	r2, [r4, #16]
   39eb0:	cmp	r2, r3
   39eb4:	bcs	39ec8 <flatcc_json_printer_float_vector_field@@Base+0x27c>
   39eb8:	mov	r1, r5
   39ebc:	mov	r0, r4
   39ec0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   39ec4:	b	39e50 <flatcc_json_printer_float_vector_field@@Base+0x204>
   39ec8:	mov	r2, r5
   39ecc:	mov	r1, #32
   39ed0:	bl	1459c <memset@plt>
   39ed4:	ldr	r3, [r4, #20]
   39ed8:	add	r5, r3, r5
   39edc:	str	r5, [r4, #20]
   39ee0:	b	39e50 <flatcc_json_printer_float_vector_field@@Base+0x204>

00039ee4 <flatcc_json_printer_double_vector_field@@Base>:
   39ee4:	add	r2, r2, #2
   39ee8:	lsl	r2, r2, #1
   39eec:	ldr	ip, [r1, #8]
   39ef0:	cmp	ip, r2
   39ef4:	bxle	lr
   39ef8:	ldr	ip, [r1, #4]
   39efc:	ldrh	r2, [ip, r2]
   39f00:	cmp	r2, #0
   39f04:	bxeq	lr
   39f08:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39f0c:	strd	r6, [sp, #8]
   39f10:	strd	r8, [sp, #16]
   39f14:	str	sl, [sp, #24]
   39f18:	str	lr, [sp, #28]
   39f1c:	ldr	ip, [r1]
   39f20:	adds	lr, ip, r2
   39f24:	beq	3a0f4 <flatcc_json_printer_double_vector_field@@Base+0x210>
   39f28:	ldr	r4, [r1, #16]
   39f2c:	add	r5, r4, #1
   39f30:	str	r5, [r1, #16]
   39f34:	cmp	r4, #0
   39f38:	beq	39f50 <flatcc_json_printer_double_vector_field@@Base+0x6c>
   39f3c:	ldr	r1, [r0, #20]
   39f40:	add	r4, r1, #1
   39f44:	str	r4, [r0, #20]
   39f48:	mov	r4, #44	; 0x2c
   39f4c:	strb	r4, [r1]
   39f50:	mov	r1, r3
   39f54:	mov	r4, r0
   39f58:	ldr	r3, [ip, r2]
   39f5c:	add	r6, lr, r3
   39f60:	ldr	r7, [lr, r3]
   39f64:	ldr	r2, [sp, #32]
   39f68:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   39f6c:	ldr	r3, [r4, #32]
   39f70:	add	r3, r3, #1
   39f74:	str	r3, [r4, #32]
   39f78:	ldr	r3, [r4, #20]
   39f7c:	add	r2, r3, #1
   39f80:	str	r2, [r4, #20]
   39f84:	mov	r2, #91	; 0x5b
   39f88:	strb	r2, [r3]
   39f8c:	cmp	r7, #0
   39f90:	beq	3a0d4 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
   39f94:	ldrb	r3, [r4, #25]
   39f98:	cmp	r3, #0
   39f9c:	bne	39ff8 <flatcc_json_printer_double_vector_field@@Base+0x114>
   39fa0:	ldr	r2, [r4, #20]
   39fa4:	ldr	r3, [r4, #16]
   39fa8:	cmp	r2, r3
   39fac:	bcc	39fc0 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   39fb0:	ldr	r3, [r4, #44]	; 0x2c
   39fb4:	mov	r1, #0
   39fb8:	mov	r0, r4
   39fbc:	blx	r3
   39fc0:	ldr	r0, [r4, #20]
   39fc4:	vldr	d0, [r6, #4]
   39fc8:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   39fcc:	ldr	r3, [r4, #20]
   39fd0:	add	r0, r3, r0
   39fd4:	str	r0, [r4, #20]
   39fd8:	add	r6, r6, #12
   39fdc:	sub	r5, r7, #2
   39fe0:	cmp	r7, #1
   39fe4:	beq	3a0d4 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
   39fe8:	mov	r7, #44	; 0x2c
   39fec:	mov	r8, #0
   39ff0:	mov	r9, #10
   39ff4:	b	3a078 <flatcc_json_printer_double_vector_field@@Base+0x194>
   39ff8:	ldr	r3, [r4, #20]
   39ffc:	add	r2, r3, #1
   3a000:	str	r2, [r4, #20]
   3a004:	mov	r2, #10
   3a008:	strb	r2, [r3]
   3a00c:	mov	r0, r4
   3a010:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3a014:	b	39fc0 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   3a018:	ldr	r3, [r4, #20]
   3a01c:	add	r2, r3, #1
   3a020:	str	r2, [r4, #20]
   3a024:	strb	r9, [r3]
   3a028:	ldrb	r3, [r4, #25]
   3a02c:	ldr	sl, [r4, #32]
   3a030:	mul	sl, sl, r3
   3a034:	ldr	r0, [r4, #20]
   3a038:	add	r3, r0, sl
   3a03c:	ldr	r2, [r4, #16]
   3a040:	cmp	r2, r3
   3a044:	bcs	3a0b8 <flatcc_json_printer_double_vector_field@@Base+0x1d4>
   3a048:	mov	r1, sl
   3a04c:	mov	r0, r4
   3a050:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3a054:	ldr	r0, [r4, #20]
   3a058:	vldmia	r6!, {d0}
   3a05c:	bl	322a4 <flatcc_json_parser_struct_as_root@@Base+0x1dcc>
   3a060:	ldr	r3, [r4, #20]
   3a064:	add	r0, r3, r0
   3a068:	str	r0, [r4, #20]
   3a06c:	sub	r5, r5, #1
   3a070:	cmn	r5, #1
   3a074:	beq	3a0d4 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
   3a078:	ldr	r3, [r4, #20]
   3a07c:	add	r2, r3, #1
   3a080:	str	r2, [r4, #20]
   3a084:	strb	r7, [r3]
   3a088:	ldrb	r3, [r4, #25]
   3a08c:	cmp	r3, #0
   3a090:	bne	3a018 <flatcc_json_printer_double_vector_field@@Base+0x134>
   3a094:	ldr	r2, [r4, #20]
   3a098:	ldr	r3, [r4, #16]
   3a09c:	cmp	r2, r3
   3a0a0:	bcc	3a054 <flatcc_json_printer_double_vector_field@@Base+0x170>
   3a0a4:	ldr	r3, [r4, #44]	; 0x2c
   3a0a8:	mov	r1, r8
   3a0ac:	mov	r0, r4
   3a0b0:	blx	r3
   3a0b4:	b	3a054 <flatcc_json_printer_double_vector_field@@Base+0x170>
   3a0b8:	mov	r2, sl
   3a0bc:	mov	r1, #32
   3a0c0:	bl	1459c <memset@plt>
   3a0c4:	ldr	r3, [r4, #20]
   3a0c8:	add	sl, r3, sl
   3a0cc:	str	sl, [r4, #20]
   3a0d0:	b	3a054 <flatcc_json_printer_double_vector_field@@Base+0x170>
   3a0d4:	ldrb	r3, [r4, #25]
   3a0d8:	cmp	r3, #0
   3a0dc:	bne	3a10c <flatcc_json_printer_double_vector_field@@Base+0x228>
   3a0e0:	ldr	r3, [r4, #20]
   3a0e4:	add	r2, r3, #1
   3a0e8:	str	r2, [r4, #20]
   3a0ec:	mov	r2, #93	; 0x5d
   3a0f0:	strb	r2, [r3]
   3a0f4:	ldrd	r4, [sp]
   3a0f8:	ldrd	r6, [sp, #8]
   3a0fc:	ldrd	r8, [sp, #16]
   3a100:	ldr	sl, [sp, #24]
   3a104:	add	sp, sp, #28
   3a108:	pop	{pc}		; (ldr pc, [sp], #4)
   3a10c:	ldr	r3, [r4, #20]
   3a110:	add	r2, r3, #1
   3a114:	str	r2, [r4, #20]
   3a118:	mov	r2, #10
   3a11c:	strb	r2, [r3]
   3a120:	ldr	r5, [r4, #32]
   3a124:	sub	r5, r5, #1
   3a128:	str	r5, [r4, #32]
   3a12c:	ldrb	r3, [r4, #25]
   3a130:	mul	r5, r5, r3
   3a134:	ldr	r0, [r4, #20]
   3a138:	add	r3, r0, r5
   3a13c:	ldr	r2, [r4, #16]
   3a140:	cmp	r2, r3
   3a144:	bcs	3a158 <flatcc_json_printer_double_vector_field@@Base+0x274>
   3a148:	mov	r1, r5
   3a14c:	mov	r0, r4
   3a150:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3a154:	b	3a0e0 <flatcc_json_printer_double_vector_field@@Base+0x1fc>
   3a158:	mov	r2, r5
   3a15c:	mov	r1, #32
   3a160:	bl	1459c <memset@plt>
   3a164:	ldr	r3, [r4, #20]
   3a168:	add	r5, r3, r5
   3a16c:	str	r5, [r4, #20]
   3a170:	b	3a0e0 <flatcc_json_printer_double_vector_field@@Base+0x1fc>

0003a174 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   3a174:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a178:	strd	r6, [sp, #8]
   3a17c:	strd	r8, [sp, #16]
   3a180:	strd	sl, [sp, #24]
   3a184:	str	lr, [sp, #32]
   3a188:	sub	sp, sp, #12
   3a18c:	mov	r4, r0
   3a190:	ldr	r7, [sp, #52]	; 0x34
   3a194:	ldrb	r0, [r0, #27]
   3a198:	cmp	r0, #0
   3a19c:	bne	3a298 <flatcc_json_printer_utype_enum_vector_field@@Base+0x124>
   3a1a0:	add	r2, r2, #2
   3a1a4:	lsl	r2, r2, #1
   3a1a8:	ldr	r0, [r1, #8]
   3a1ac:	cmp	r0, r2
   3a1b0:	ble	3a398 <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   3a1b4:	ldr	r0, [r1, #4]
   3a1b8:	ldrh	r2, [r0, r2]
   3a1bc:	cmp	r2, #0
   3a1c0:	beq	3a398 <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   3a1c4:	ldr	r0, [r1]
   3a1c8:	adds	ip, r0, r2
   3a1cc:	beq	3a398 <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   3a1d0:	ldr	lr, [r1, #16]
   3a1d4:	add	r5, lr, #1
   3a1d8:	str	r5, [r1, #16]
   3a1dc:	cmp	lr, #0
   3a1e0:	beq	3a1f8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x84>
   3a1e4:	ldr	r1, [r4, #20]
   3a1e8:	add	lr, r1, #1
   3a1ec:	str	lr, [r4, #20]
   3a1f0:	mov	lr, #44	; 0x2c
   3a1f4:	strb	lr, [r1]
   3a1f8:	ldr	r2, [r0, r2]
   3a1fc:	add	r6, ip, r2
   3a200:	ldr	r8, [ip, r2]
   3a204:	ldr	r2, [sp, #48]	; 0x30
   3a208:	mov	r1, r3
   3a20c:	mov	r0, r4
   3a210:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3a214:	ldr	r3, [r4, #32]
   3a218:	add	r3, r3, #1
   3a21c:	str	r3, [r4, #32]
   3a220:	ldr	r3, [r4, #20]
   3a224:	add	r2, r3, #1
   3a228:	str	r2, [r4, #20]
   3a22c:	mov	r2, #91	; 0x5b
   3a230:	strb	r2, [r3]
   3a234:	cmp	r8, #0
   3a238:	beq	3a378 <flatcc_json_printer_utype_enum_vector_field@@Base+0x204>
   3a23c:	ldrb	r3, [r4, #25]
   3a240:	cmp	r3, #0
   3a244:	bne	3a2ac <flatcc_json_printer_utype_enum_vector_field@@Base+0x138>
   3a248:	ldr	r2, [r4, #20]
   3a24c:	ldr	r3, [r4, #16]
   3a250:	cmp	r2, r3
   3a254:	bcc	3a268 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf4>
   3a258:	ldr	r3, [r4, #44]	; 0x2c
   3a25c:	mov	r1, #0
   3a260:	mov	r0, r4
   3a264:	blx	r3
   3a268:	ldrb	r1, [r6, #4]
   3a26c:	mov	r0, r4
   3a270:	blx	r7
   3a274:	add	r5, r6, #5
   3a278:	cmp	r8, #1
   3a27c:	beq	3a378 <flatcc_json_printer_utype_enum_vector_field@@Base+0x204>
   3a280:	add	r8, r8, #4
   3a284:	add	r6, r6, r8
   3a288:	mov	r8, #44	; 0x2c
   3a28c:	mov	r9, #0
   3a290:	mov	sl, #10
   3a294:	b	3a31c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1a8>
   3a298:	ldr	r0, [sp, #48]	; 0x30
   3a29c:	str	r0, [sp]
   3a2a0:	mov	r0, r4
   3a2a4:	bl	3822c <flatcc_json_printer_utype_vector_field@@Base>
   3a2a8:	b	3a398 <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   3a2ac:	ldr	r3, [r4, #20]
   3a2b0:	add	r2, r3, #1
   3a2b4:	str	r2, [r4, #20]
   3a2b8:	mov	r2, #10
   3a2bc:	strb	r2, [r3]
   3a2c0:	mov	r0, r4
   3a2c4:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3a2c8:	b	3a268 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf4>
   3a2cc:	ldr	r3, [r4, #20]
   3a2d0:	add	r2, r3, #1
   3a2d4:	str	r2, [r4, #20]
   3a2d8:	strb	sl, [r3]
   3a2dc:	ldrb	r3, [r4, #25]
   3a2e0:	ldr	fp, [r4, #32]
   3a2e4:	mul	fp, fp, r3
   3a2e8:	ldr	r0, [r4, #20]
   3a2ec:	add	r3, r0, fp
   3a2f0:	ldr	r2, [r4, #16]
   3a2f4:	cmp	r2, r3
   3a2f8:	bcs	3a35c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1e8>
   3a2fc:	mov	r1, fp
   3a300:	mov	r0, r4
   3a304:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3a308:	ldrb	r1, [r5], #1
   3a30c:	mov	r0, r4
   3a310:	blx	r7
   3a314:	cmp	r6, r5
   3a318:	beq	3a378 <flatcc_json_printer_utype_enum_vector_field@@Base+0x204>
   3a31c:	ldr	r3, [r4, #20]
   3a320:	add	r2, r3, #1
   3a324:	str	r2, [r4, #20]
   3a328:	strb	r8, [r3]
   3a32c:	ldrb	r3, [r4, #25]
   3a330:	cmp	r3, #0
   3a334:	bne	3a2cc <flatcc_json_printer_utype_enum_vector_field@@Base+0x158>
   3a338:	ldr	r2, [r4, #20]
   3a33c:	ldr	r3, [r4, #16]
   3a340:	cmp	r2, r3
   3a344:	bcc	3a308 <flatcc_json_printer_utype_enum_vector_field@@Base+0x194>
   3a348:	ldr	r3, [r4, #44]	; 0x2c
   3a34c:	mov	r1, r9
   3a350:	mov	r0, r4
   3a354:	blx	r3
   3a358:	b	3a308 <flatcc_json_printer_utype_enum_vector_field@@Base+0x194>
   3a35c:	mov	r2, fp
   3a360:	mov	r1, #32
   3a364:	bl	1459c <memset@plt>
   3a368:	ldr	r3, [r4, #20]
   3a36c:	add	fp, r3, fp
   3a370:	str	fp, [r4, #20]
   3a374:	b	3a308 <flatcc_json_printer_utype_enum_vector_field@@Base+0x194>
   3a378:	ldrb	r3, [r4, #25]
   3a37c:	cmp	r3, #0
   3a380:	bne	3a3b4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x240>
   3a384:	ldr	r3, [r4, #20]
   3a388:	add	r2, r3, #1
   3a38c:	str	r2, [r4, #20]
   3a390:	mov	r2, #93	; 0x5d
   3a394:	strb	r2, [r3]
   3a398:	add	sp, sp, #12
   3a39c:	ldrd	r4, [sp]
   3a3a0:	ldrd	r6, [sp, #8]
   3a3a4:	ldrd	r8, [sp, #16]
   3a3a8:	ldrd	sl, [sp, #24]
   3a3ac:	add	sp, sp, #32
   3a3b0:	pop	{pc}		; (ldr pc, [sp], #4)
   3a3b4:	ldr	r3, [r4, #20]
   3a3b8:	add	r2, r3, #1
   3a3bc:	str	r2, [r4, #20]
   3a3c0:	mov	r2, #10
   3a3c4:	strb	r2, [r3]
   3a3c8:	ldr	r5, [r4, #32]
   3a3cc:	sub	r5, r5, #1
   3a3d0:	str	r5, [r4, #32]
   3a3d4:	ldrb	r3, [r4, #25]
   3a3d8:	mul	r5, r5, r3
   3a3dc:	ldr	r0, [r4, #20]
   3a3e0:	add	r3, r0, r5
   3a3e4:	ldr	r2, [r4, #16]
   3a3e8:	cmp	r2, r3
   3a3ec:	bcs	3a400 <flatcc_json_printer_utype_enum_vector_field@@Base+0x28c>
   3a3f0:	mov	r1, r5
   3a3f4:	mov	r0, r4
   3a3f8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3a3fc:	b	3a384 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   3a400:	mov	r2, r5
   3a404:	mov	r1, #32
   3a408:	bl	1459c <memset@plt>
   3a40c:	ldr	r3, [r4, #20]
   3a410:	add	r5, r3, r5
   3a414:	str	r5, [r4, #20]
   3a418:	b	3a384 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>

0003a41c <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   3a41c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a420:	strd	r6, [sp, #8]
   3a424:	strd	r8, [sp, #16]
   3a428:	strd	sl, [sp, #24]
   3a42c:	str	lr, [sp, #32]
   3a430:	sub	sp, sp, #12
   3a434:	mov	r4, r0
   3a438:	ldr	r7, [sp, #52]	; 0x34
   3a43c:	ldrb	r0, [r0, #27]
   3a440:	cmp	r0, #0
   3a444:	bne	3a540 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x124>
   3a448:	add	r2, r2, #2
   3a44c:	lsl	r2, r2, #1
   3a450:	ldr	r0, [r1, #8]
   3a454:	cmp	r0, r2
   3a458:	ble	3a640 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3a45c:	ldr	r0, [r1, #4]
   3a460:	ldrh	r2, [r0, r2]
   3a464:	cmp	r2, #0
   3a468:	beq	3a640 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3a46c:	ldr	r0, [r1]
   3a470:	adds	ip, r0, r2
   3a474:	beq	3a640 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3a478:	ldr	lr, [r1, #16]
   3a47c:	add	r5, lr, #1
   3a480:	str	r5, [r1, #16]
   3a484:	cmp	lr, #0
   3a488:	beq	3a4a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x84>
   3a48c:	ldr	r1, [r4, #20]
   3a490:	add	lr, r1, #1
   3a494:	str	lr, [r4, #20]
   3a498:	mov	lr, #44	; 0x2c
   3a49c:	strb	lr, [r1]
   3a4a0:	ldr	r2, [r0, r2]
   3a4a4:	add	r6, ip, r2
   3a4a8:	ldr	r8, [ip, r2]
   3a4ac:	ldr	r2, [sp, #48]	; 0x30
   3a4b0:	mov	r1, r3
   3a4b4:	mov	r0, r4
   3a4b8:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3a4bc:	ldr	r3, [r4, #32]
   3a4c0:	add	r3, r3, #1
   3a4c4:	str	r3, [r4, #32]
   3a4c8:	ldr	r3, [r4, #20]
   3a4cc:	add	r2, r3, #1
   3a4d0:	str	r2, [r4, #20]
   3a4d4:	mov	r2, #91	; 0x5b
   3a4d8:	strb	r2, [r3]
   3a4dc:	cmp	r8, #0
   3a4e0:	beq	3a620 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x204>
   3a4e4:	ldrb	r3, [r4, #25]
   3a4e8:	cmp	r3, #0
   3a4ec:	bne	3a554 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x138>
   3a4f0:	ldr	r2, [r4, #20]
   3a4f4:	ldr	r3, [r4, #16]
   3a4f8:	cmp	r2, r3
   3a4fc:	bcc	3a510 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
   3a500:	ldr	r3, [r4, #44]	; 0x2c
   3a504:	mov	r1, #0
   3a508:	mov	r0, r4
   3a50c:	blx	r3
   3a510:	ldrb	r1, [r6, #4]
   3a514:	mov	r0, r4
   3a518:	blx	r7
   3a51c:	add	r5, r6, #5
   3a520:	cmp	r8, #1
   3a524:	beq	3a620 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x204>
   3a528:	add	r8, r8, #4
   3a52c:	add	r6, r6, r8
   3a530:	mov	r8, #44	; 0x2c
   3a534:	mov	r9, #0
   3a538:	mov	sl, #10
   3a53c:	b	3a5c4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1a8>
   3a540:	ldr	r0, [sp, #48]	; 0x30
   3a544:	str	r0, [sp]
   3a548:	mov	r0, r4
   3a54c:	bl	384bc <flatcc_json_printer_uint8_vector_field@@Base>
   3a550:	b	3a640 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3a554:	ldr	r3, [r4, #20]
   3a558:	add	r2, r3, #1
   3a55c:	str	r2, [r4, #20]
   3a560:	mov	r2, #10
   3a564:	strb	r2, [r3]
   3a568:	mov	r0, r4
   3a56c:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3a570:	b	3a510 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
   3a574:	ldr	r3, [r4, #20]
   3a578:	add	r2, r3, #1
   3a57c:	str	r2, [r4, #20]
   3a580:	strb	sl, [r3]
   3a584:	ldrb	r3, [r4, #25]
   3a588:	ldr	fp, [r4, #32]
   3a58c:	mul	fp, fp, r3
   3a590:	ldr	r0, [r4, #20]
   3a594:	add	r3, r0, fp
   3a598:	ldr	r2, [r4, #16]
   3a59c:	cmp	r2, r3
   3a5a0:	bcs	3a604 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1e8>
   3a5a4:	mov	r1, fp
   3a5a8:	mov	r0, r4
   3a5ac:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3a5b0:	ldrb	r1, [r5], #1
   3a5b4:	mov	r0, r4
   3a5b8:	blx	r7
   3a5bc:	cmp	r6, r5
   3a5c0:	beq	3a620 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x204>
   3a5c4:	ldr	r3, [r4, #20]
   3a5c8:	add	r2, r3, #1
   3a5cc:	str	r2, [r4, #20]
   3a5d0:	strb	r8, [r3]
   3a5d4:	ldrb	r3, [r4, #25]
   3a5d8:	cmp	r3, #0
   3a5dc:	bne	3a574 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x158>
   3a5e0:	ldr	r2, [r4, #20]
   3a5e4:	ldr	r3, [r4, #16]
   3a5e8:	cmp	r2, r3
   3a5ec:	bcc	3a5b0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   3a5f0:	ldr	r3, [r4, #44]	; 0x2c
   3a5f4:	mov	r1, r9
   3a5f8:	mov	r0, r4
   3a5fc:	blx	r3
   3a600:	b	3a5b0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   3a604:	mov	r2, fp
   3a608:	mov	r1, #32
   3a60c:	bl	1459c <memset@plt>
   3a610:	ldr	r3, [r4, #20]
   3a614:	add	fp, r3, fp
   3a618:	str	fp, [r4, #20]
   3a61c:	b	3a5b0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   3a620:	ldrb	r3, [r4, #25]
   3a624:	cmp	r3, #0
   3a628:	bne	3a65c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x240>
   3a62c:	ldr	r3, [r4, #20]
   3a630:	add	r2, r3, #1
   3a634:	str	r2, [r4, #20]
   3a638:	mov	r2, #93	; 0x5d
   3a63c:	strb	r2, [r3]
   3a640:	add	sp, sp, #12
   3a644:	ldrd	r4, [sp]
   3a648:	ldrd	r6, [sp, #8]
   3a64c:	ldrd	r8, [sp, #16]
   3a650:	ldrd	sl, [sp, #24]
   3a654:	add	sp, sp, #32
   3a658:	pop	{pc}		; (ldr pc, [sp], #4)
   3a65c:	ldr	r3, [r4, #20]
   3a660:	add	r2, r3, #1
   3a664:	str	r2, [r4, #20]
   3a668:	mov	r2, #10
   3a66c:	strb	r2, [r3]
   3a670:	ldr	r5, [r4, #32]
   3a674:	sub	r5, r5, #1
   3a678:	str	r5, [r4, #32]
   3a67c:	ldrb	r3, [r4, #25]
   3a680:	mul	r5, r5, r3
   3a684:	ldr	r0, [r4, #20]
   3a688:	add	r3, r0, r5
   3a68c:	ldr	r2, [r4, #16]
   3a690:	cmp	r2, r3
   3a694:	bcs	3a6a8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x28c>
   3a698:	mov	r1, r5
   3a69c:	mov	r0, r4
   3a6a0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3a6a4:	b	3a62c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   3a6a8:	mov	r2, r5
   3a6ac:	mov	r1, #32
   3a6b0:	bl	1459c <memset@plt>
   3a6b4:	ldr	r3, [r4, #20]
   3a6b8:	add	r5, r3, r5
   3a6bc:	str	r5, [r4, #20]
   3a6c0:	b	3a62c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>

0003a6c4 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   3a6c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a6c8:	strd	r6, [sp, #8]
   3a6cc:	strd	r8, [sp, #16]
   3a6d0:	strd	sl, [sp, #24]
   3a6d4:	str	lr, [sp, #32]
   3a6d8:	sub	sp, sp, #12
   3a6dc:	mov	r4, r0
   3a6e0:	ldr	r7, [sp, #52]	; 0x34
   3a6e4:	ldrb	r0, [r0, #27]
   3a6e8:	cmp	r0, #0
   3a6ec:	bne	3a7e4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   3a6f0:	add	r2, r2, #2
   3a6f4:	lsl	r2, r2, #1
   3a6f8:	ldr	r0, [r1, #8]
   3a6fc:	cmp	r0, r2
   3a700:	ble	3a8e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x224>
   3a704:	ldr	r0, [r1, #4]
   3a708:	ldrh	r2, [r0, r2]
   3a70c:	cmp	r2, #0
   3a710:	beq	3a8e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x224>
   3a714:	ldr	r0, [r1]
   3a718:	adds	ip, r0, r2
   3a71c:	beq	3a8e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x224>
   3a720:	ldr	lr, [r1, #16]
   3a724:	add	r5, lr, #1
   3a728:	str	r5, [r1, #16]
   3a72c:	cmp	lr, #0
   3a730:	beq	3a748 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x84>
   3a734:	ldr	r1, [r4, #20]
   3a738:	add	lr, r1, #1
   3a73c:	str	lr, [r4, #20]
   3a740:	mov	lr, #44	; 0x2c
   3a744:	strb	lr, [r1]
   3a748:	ldr	r2, [r0, r2]
   3a74c:	add	r6, ip, r2
   3a750:	ldr	r8, [ip, r2]
   3a754:	ldr	r2, [sp, #48]	; 0x30
   3a758:	mov	r1, r3
   3a75c:	mov	r0, r4
   3a760:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3a764:	ldr	r3, [r4, #32]
   3a768:	add	r3, r3, #1
   3a76c:	str	r3, [r4, #32]
   3a770:	ldr	r3, [r4, #20]
   3a774:	add	r2, r3, #1
   3a778:	str	r2, [r4, #20]
   3a77c:	mov	r2, #91	; 0x5b
   3a780:	strb	r2, [r3]
   3a784:	cmp	r8, #0
   3a788:	beq	3a8c8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>
   3a78c:	ldrb	r3, [r4, #25]
   3a790:	cmp	r3, #0
   3a794:	bne	3a7f8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x134>
   3a798:	ldr	r2, [r4, #20]
   3a79c:	ldr	r3, [r4, #16]
   3a7a0:	cmp	r2, r3
   3a7a4:	bcc	3a7b8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   3a7a8:	ldr	r3, [r4, #44]	; 0x2c
   3a7ac:	mov	r1, #0
   3a7b0:	mov	r0, r4
   3a7b4:	blx	r3
   3a7b8:	ldrh	r1, [r6, #4]
   3a7bc:	mov	r0, r4
   3a7c0:	blx	r7
   3a7c4:	add	r6, r6, #6
   3a7c8:	sub	r5, r8, #2
   3a7cc:	cmp	r8, #1
   3a7d0:	beq	3a8c8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>
   3a7d4:	mov	r8, #44	; 0x2c
   3a7d8:	mov	r9, #0
   3a7dc:	mov	sl, #10
   3a7e0:	b	3a86c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a8>
   3a7e4:	ldr	r0, [sp, #48]	; 0x30
   3a7e8:	str	r0, [sp]
   3a7ec:	mov	r0, r4
   3a7f0:	bl	3874c <flatcc_json_printer_uint16_vector_field@@Base>
   3a7f4:	b	3a8e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x224>
   3a7f8:	ldr	r3, [r4, #20]
   3a7fc:	add	r2, r3, #1
   3a800:	str	r2, [r4, #20]
   3a804:	mov	r2, #10
   3a808:	strb	r2, [r3]
   3a80c:	mov	r0, r4
   3a810:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3a814:	b	3a7b8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   3a818:	ldr	r3, [r4, #20]
   3a81c:	add	r2, r3, #1
   3a820:	str	r2, [r4, #20]
   3a824:	strb	sl, [r3]
   3a828:	ldrb	r3, [r4, #25]
   3a82c:	ldr	fp, [r4, #32]
   3a830:	mul	fp, fp, r3
   3a834:	ldr	r0, [r4, #20]
   3a838:	add	r3, r0, fp
   3a83c:	ldr	r2, [r4, #16]
   3a840:	cmp	r2, r3
   3a844:	bcs	3a8ac <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e8>
   3a848:	mov	r1, fp
   3a84c:	mov	r0, r4
   3a850:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3a854:	ldrh	r1, [r6], #2
   3a858:	mov	r0, r4
   3a85c:	blx	r7
   3a860:	sub	r5, r5, #1
   3a864:	cmn	r5, #1
   3a868:	beq	3a8c8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>
   3a86c:	ldr	r3, [r4, #20]
   3a870:	add	r2, r3, #1
   3a874:	str	r2, [r4, #20]
   3a878:	strb	r8, [r3]
   3a87c:	ldrb	r3, [r4, #25]
   3a880:	cmp	r3, #0
   3a884:	bne	3a818 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x154>
   3a888:	ldr	r2, [r4, #20]
   3a88c:	ldr	r3, [r4, #16]
   3a890:	cmp	r2, r3
   3a894:	bcc	3a854 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x190>
   3a898:	ldr	r3, [r4, #44]	; 0x2c
   3a89c:	mov	r1, r9
   3a8a0:	mov	r0, r4
   3a8a4:	blx	r3
   3a8a8:	b	3a854 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x190>
   3a8ac:	mov	r2, fp
   3a8b0:	mov	r1, #32
   3a8b4:	bl	1459c <memset@plt>
   3a8b8:	ldr	r3, [r4, #20]
   3a8bc:	add	fp, r3, fp
   3a8c0:	str	fp, [r4, #20]
   3a8c4:	b	3a854 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x190>
   3a8c8:	ldrb	r3, [r4, #25]
   3a8cc:	cmp	r3, #0
   3a8d0:	bne	3a904 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x240>
   3a8d4:	ldr	r3, [r4, #20]
   3a8d8:	add	r2, r3, #1
   3a8dc:	str	r2, [r4, #20]
   3a8e0:	mov	r2, #93	; 0x5d
   3a8e4:	strb	r2, [r3]
   3a8e8:	add	sp, sp, #12
   3a8ec:	ldrd	r4, [sp]
   3a8f0:	ldrd	r6, [sp, #8]
   3a8f4:	ldrd	r8, [sp, #16]
   3a8f8:	ldrd	sl, [sp, #24]
   3a8fc:	add	sp, sp, #32
   3a900:	pop	{pc}		; (ldr pc, [sp], #4)
   3a904:	ldr	r3, [r4, #20]
   3a908:	add	r2, r3, #1
   3a90c:	str	r2, [r4, #20]
   3a910:	mov	r2, #10
   3a914:	strb	r2, [r3]
   3a918:	ldr	r5, [r4, #32]
   3a91c:	sub	r5, r5, #1
   3a920:	str	r5, [r4, #32]
   3a924:	ldrb	r3, [r4, #25]
   3a928:	mul	r5, r5, r3
   3a92c:	ldr	r0, [r4, #20]
   3a930:	add	r3, r0, r5
   3a934:	ldr	r2, [r4, #16]
   3a938:	cmp	r2, r3
   3a93c:	bcs	3a950 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x28c>
   3a940:	mov	r1, r5
   3a944:	mov	r0, r4
   3a948:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3a94c:	b	3a8d4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x210>
   3a950:	mov	r2, r5
   3a954:	mov	r1, #32
   3a958:	bl	1459c <memset@plt>
   3a95c:	ldr	r3, [r4, #20]
   3a960:	add	r5, r3, r5
   3a964:	str	r5, [r4, #20]
   3a968:	b	3a8d4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x210>

0003a96c <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   3a96c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a970:	strd	r6, [sp, #8]
   3a974:	strd	r8, [sp, #16]
   3a978:	strd	sl, [sp, #24]
   3a97c:	str	lr, [sp, #32]
   3a980:	sub	sp, sp, #12
   3a984:	mov	r4, r0
   3a988:	ldr	r7, [sp, #52]	; 0x34
   3a98c:	ldrb	r0, [r0, #27]
   3a990:	cmp	r0, #0
   3a994:	bne	3aa8c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   3a998:	add	r2, r2, #2
   3a99c:	lsl	r2, r2, #1
   3a9a0:	ldr	r0, [r1, #8]
   3a9a4:	cmp	r0, r2
   3a9a8:	ble	3ab90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x224>
   3a9ac:	ldr	r0, [r1, #4]
   3a9b0:	ldrh	r2, [r0, r2]
   3a9b4:	cmp	r2, #0
   3a9b8:	beq	3ab90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x224>
   3a9bc:	ldr	r0, [r1]
   3a9c0:	adds	ip, r0, r2
   3a9c4:	beq	3ab90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x224>
   3a9c8:	ldr	lr, [r1, #16]
   3a9cc:	add	r5, lr, #1
   3a9d0:	str	r5, [r1, #16]
   3a9d4:	cmp	lr, #0
   3a9d8:	beq	3a9f0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x84>
   3a9dc:	ldr	r1, [r4, #20]
   3a9e0:	add	lr, r1, #1
   3a9e4:	str	lr, [r4, #20]
   3a9e8:	mov	lr, #44	; 0x2c
   3a9ec:	strb	lr, [r1]
   3a9f0:	ldr	r2, [r0, r2]
   3a9f4:	add	r6, ip, r2
   3a9f8:	ldr	r8, [ip, r2]
   3a9fc:	ldr	r2, [sp, #48]	; 0x30
   3aa00:	mov	r1, r3
   3aa04:	mov	r0, r4
   3aa08:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3aa0c:	ldr	r3, [r4, #32]
   3aa10:	add	r3, r3, #1
   3aa14:	str	r3, [r4, #32]
   3aa18:	ldr	r3, [r4, #20]
   3aa1c:	add	r2, r3, #1
   3aa20:	str	r2, [r4, #20]
   3aa24:	mov	r2, #91	; 0x5b
   3aa28:	strb	r2, [r3]
   3aa2c:	cmp	r8, #0
   3aa30:	beq	3ab70 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>
   3aa34:	ldrb	r3, [r4, #25]
   3aa38:	cmp	r3, #0
   3aa3c:	bne	3aaa0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x134>
   3aa40:	ldr	r2, [r4, #20]
   3aa44:	ldr	r3, [r4, #16]
   3aa48:	cmp	r2, r3
   3aa4c:	bcc	3aa60 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3aa50:	ldr	r3, [r4, #44]	; 0x2c
   3aa54:	mov	r1, #0
   3aa58:	mov	r0, r4
   3aa5c:	blx	r3
   3aa60:	ldr	r1, [r6, #4]
   3aa64:	mov	r0, r4
   3aa68:	blx	r7
   3aa6c:	add	r6, r6, #8
   3aa70:	sub	r5, r8, #2
   3aa74:	cmp	r8, #1
   3aa78:	beq	3ab70 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>
   3aa7c:	mov	r8, #44	; 0x2c
   3aa80:	mov	r9, #0
   3aa84:	mov	sl, #10
   3aa88:	b	3ab14 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1a8>
   3aa8c:	ldr	r0, [sp, #48]	; 0x30
   3aa90:	str	r0, [sp]
   3aa94:	mov	r0, r4
   3aa98:	bl	38a1c <flatcc_json_printer_uint32_vector_field@@Base>
   3aa9c:	b	3ab90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x224>
   3aaa0:	ldr	r3, [r4, #20]
   3aaa4:	add	r2, r3, #1
   3aaa8:	str	r2, [r4, #20]
   3aaac:	mov	r2, #10
   3aab0:	strb	r2, [r3]
   3aab4:	mov	r0, r4
   3aab8:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3aabc:	b	3aa60 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3aac0:	ldr	r3, [r4, #20]
   3aac4:	add	r2, r3, #1
   3aac8:	str	r2, [r4, #20]
   3aacc:	strb	sl, [r3]
   3aad0:	ldrb	r3, [r4, #25]
   3aad4:	ldr	fp, [r4, #32]
   3aad8:	mul	fp, fp, r3
   3aadc:	ldr	r0, [r4, #20]
   3aae0:	add	r3, r0, fp
   3aae4:	ldr	r2, [r4, #16]
   3aae8:	cmp	r2, r3
   3aaec:	bcs	3ab54 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1e8>
   3aaf0:	mov	r1, fp
   3aaf4:	mov	r0, r4
   3aaf8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3aafc:	ldr	r1, [r6], #4
   3ab00:	mov	r0, r4
   3ab04:	blx	r7
   3ab08:	sub	r5, r5, #1
   3ab0c:	cmn	r5, #1
   3ab10:	beq	3ab70 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>
   3ab14:	ldr	r3, [r4, #20]
   3ab18:	add	r2, r3, #1
   3ab1c:	str	r2, [r4, #20]
   3ab20:	strb	r8, [r3]
   3ab24:	ldrb	r3, [r4, #25]
   3ab28:	cmp	r3, #0
   3ab2c:	bne	3aac0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x154>
   3ab30:	ldr	r2, [r4, #20]
   3ab34:	ldr	r3, [r4, #16]
   3ab38:	cmp	r2, r3
   3ab3c:	bcc	3aafc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
   3ab40:	ldr	r3, [r4, #44]	; 0x2c
   3ab44:	mov	r1, r9
   3ab48:	mov	r0, r4
   3ab4c:	blx	r3
   3ab50:	b	3aafc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
   3ab54:	mov	r2, fp
   3ab58:	mov	r1, #32
   3ab5c:	bl	1459c <memset@plt>
   3ab60:	ldr	r3, [r4, #20]
   3ab64:	add	fp, r3, fp
   3ab68:	str	fp, [r4, #20]
   3ab6c:	b	3aafc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
   3ab70:	ldrb	r3, [r4, #25]
   3ab74:	cmp	r3, #0
   3ab78:	bne	3abac <flatcc_json_printer_uint32_enum_vector_field@@Base+0x240>
   3ab7c:	ldr	r3, [r4, #20]
   3ab80:	add	r2, r3, #1
   3ab84:	str	r2, [r4, #20]
   3ab88:	mov	r2, #93	; 0x5d
   3ab8c:	strb	r2, [r3]
   3ab90:	add	sp, sp, #12
   3ab94:	ldrd	r4, [sp]
   3ab98:	ldrd	r6, [sp, #8]
   3ab9c:	ldrd	r8, [sp, #16]
   3aba0:	ldrd	sl, [sp, #24]
   3aba4:	add	sp, sp, #32
   3aba8:	pop	{pc}		; (ldr pc, [sp], #4)
   3abac:	ldr	r3, [r4, #20]
   3abb0:	add	r2, r3, #1
   3abb4:	str	r2, [r4, #20]
   3abb8:	mov	r2, #10
   3abbc:	strb	r2, [r3]
   3abc0:	ldr	r5, [r4, #32]
   3abc4:	sub	r5, r5, #1
   3abc8:	str	r5, [r4, #32]
   3abcc:	ldrb	r3, [r4, #25]
   3abd0:	mul	r5, r5, r3
   3abd4:	ldr	r0, [r4, #20]
   3abd8:	add	r3, r0, r5
   3abdc:	ldr	r2, [r4, #16]
   3abe0:	cmp	r2, r3
   3abe4:	bcs	3abf8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x28c>
   3abe8:	mov	r1, r5
   3abec:	mov	r0, r4
   3abf0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3abf4:	b	3ab7c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x210>
   3abf8:	mov	r2, r5
   3abfc:	mov	r1, #32
   3ac00:	bl	1459c <memset@plt>
   3ac04:	ldr	r3, [r4, #20]
   3ac08:	add	r5, r3, r5
   3ac0c:	str	r5, [r4, #20]
   3ac10:	b	3ab7c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x210>

0003ac14 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3ac14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3ac18:	strd	r6, [sp, #8]
   3ac1c:	strd	r8, [sp, #16]
   3ac20:	strd	sl, [sp, #24]
   3ac24:	str	lr, [sp, #32]
   3ac28:	sub	sp, sp, #12
   3ac2c:	mov	r4, r0
   3ac30:	ldr	r7, [sp, #52]	; 0x34
   3ac34:	ldrb	r0, [r0, #27]
   3ac38:	cmp	r0, #0
   3ac3c:	bne	3ad34 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x120>
   3ac40:	add	r2, r2, #2
   3ac44:	lsl	r2, r2, #1
   3ac48:	ldr	r0, [r1, #8]
   3ac4c:	cmp	r0, r2
   3ac50:	ble	3ae38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x224>
   3ac54:	ldr	r0, [r1, #4]
   3ac58:	ldrh	r2, [r0, r2]
   3ac5c:	cmp	r2, #0
   3ac60:	beq	3ae38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x224>
   3ac64:	ldr	r0, [r1]
   3ac68:	adds	ip, r0, r2
   3ac6c:	beq	3ae38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x224>
   3ac70:	ldr	lr, [r1, #16]
   3ac74:	add	r5, lr, #1
   3ac78:	str	r5, [r1, #16]
   3ac7c:	cmp	lr, #0
   3ac80:	beq	3ac98 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x84>
   3ac84:	ldr	r1, [r4, #20]
   3ac88:	add	lr, r1, #1
   3ac8c:	str	lr, [r4, #20]
   3ac90:	mov	lr, #44	; 0x2c
   3ac94:	strb	lr, [r1]
   3ac98:	ldr	r2, [r0, r2]
   3ac9c:	add	r6, ip, r2
   3aca0:	ldr	r8, [ip, r2]
   3aca4:	ldr	r2, [sp, #48]	; 0x30
   3aca8:	mov	r1, r3
   3acac:	mov	r0, r4
   3acb0:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3acb4:	ldr	r3, [r4, #32]
   3acb8:	add	r3, r3, #1
   3acbc:	str	r3, [r4, #32]
   3acc0:	ldr	r3, [r4, #20]
   3acc4:	add	r2, r3, #1
   3acc8:	str	r2, [r4, #20]
   3accc:	mov	r2, #91	; 0x5b
   3acd0:	strb	r2, [r3]
   3acd4:	cmp	r8, #0
   3acd8:	beq	3ae18 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>
   3acdc:	ldrb	r3, [r4, #25]
   3ace0:	cmp	r3, #0
   3ace4:	bne	3ad48 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x134>
   3ace8:	ldr	r2, [r4, #20]
   3acec:	ldr	r3, [r4, #16]
   3acf0:	cmp	r2, r3
   3acf4:	bcc	3ad08 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3acf8:	ldr	r3, [r4, #44]	; 0x2c
   3acfc:	mov	r1, #0
   3ad00:	mov	r0, r4
   3ad04:	blx	r3
   3ad08:	ldrd	r2, [r6, #4]
   3ad0c:	mov	r0, r4
   3ad10:	blx	r7
   3ad14:	add	r6, r6, #12
   3ad18:	sub	r5, r8, #2
   3ad1c:	cmp	r8, #1
   3ad20:	beq	3ae18 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>
   3ad24:	mov	r8, #44	; 0x2c
   3ad28:	mov	r9, #0
   3ad2c:	mov	sl, #10
   3ad30:	b	3adbc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a8>
   3ad34:	ldr	r0, [sp, #48]	; 0x30
   3ad38:	str	r0, [sp]
   3ad3c:	mov	r0, r4
   3ad40:	bl	38cac <flatcc_json_printer_uint64_vector_field@@Base>
   3ad44:	b	3ae38 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x224>
   3ad48:	ldr	r3, [r4, #20]
   3ad4c:	add	r2, r3, #1
   3ad50:	str	r2, [r4, #20]
   3ad54:	mov	r2, #10
   3ad58:	strb	r2, [r3]
   3ad5c:	mov	r0, r4
   3ad60:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3ad64:	b	3ad08 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3ad68:	ldr	r3, [r4, #20]
   3ad6c:	add	r2, r3, #1
   3ad70:	str	r2, [r4, #20]
   3ad74:	strb	sl, [r3]
   3ad78:	ldrb	r3, [r4, #25]
   3ad7c:	ldr	fp, [r4, #32]
   3ad80:	mul	fp, fp, r3
   3ad84:	ldr	r0, [r4, #20]
   3ad88:	add	r3, r0, fp
   3ad8c:	ldr	r2, [r4, #16]
   3ad90:	cmp	r2, r3
   3ad94:	bcs	3adfc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e8>
   3ad98:	mov	r1, fp
   3ad9c:	mov	r0, r4
   3ada0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3ada4:	ldrd	r2, [r6], #8
   3ada8:	mov	r0, r4
   3adac:	blx	r7
   3adb0:	sub	r5, r5, #1
   3adb4:	cmn	r5, #1
   3adb8:	beq	3ae18 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>
   3adbc:	ldr	r3, [r4, #20]
   3adc0:	add	r2, r3, #1
   3adc4:	str	r2, [r4, #20]
   3adc8:	strb	r8, [r3]
   3adcc:	ldrb	r3, [r4, #25]
   3add0:	cmp	r3, #0
   3add4:	bne	3ad68 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x154>
   3add8:	ldr	r2, [r4, #20]
   3addc:	ldr	r3, [r4, #16]
   3ade0:	cmp	r2, r3
   3ade4:	bcc	3ada4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   3ade8:	ldr	r3, [r4, #44]	; 0x2c
   3adec:	mov	r1, r9
   3adf0:	mov	r0, r4
   3adf4:	blx	r3
   3adf8:	b	3ada4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   3adfc:	mov	r2, fp
   3ae00:	mov	r1, #32
   3ae04:	bl	1459c <memset@plt>
   3ae08:	ldr	r3, [r4, #20]
   3ae0c:	add	fp, r3, fp
   3ae10:	str	fp, [r4, #20]
   3ae14:	b	3ada4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   3ae18:	ldrb	r3, [r4, #25]
   3ae1c:	cmp	r3, #0
   3ae20:	bne	3ae54 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x240>
   3ae24:	ldr	r3, [r4, #20]
   3ae28:	add	r2, r3, #1
   3ae2c:	str	r2, [r4, #20]
   3ae30:	mov	r2, #93	; 0x5d
   3ae34:	strb	r2, [r3]
   3ae38:	add	sp, sp, #12
   3ae3c:	ldrd	r4, [sp]
   3ae40:	ldrd	r6, [sp, #8]
   3ae44:	ldrd	r8, [sp, #16]
   3ae48:	ldrd	sl, [sp, #24]
   3ae4c:	add	sp, sp, #32
   3ae50:	pop	{pc}		; (ldr pc, [sp], #4)
   3ae54:	ldr	r3, [r4, #20]
   3ae58:	add	r2, r3, #1
   3ae5c:	str	r2, [r4, #20]
   3ae60:	mov	r2, #10
   3ae64:	strb	r2, [r3]
   3ae68:	ldr	r5, [r4, #32]
   3ae6c:	sub	r5, r5, #1
   3ae70:	str	r5, [r4, #32]
   3ae74:	ldrb	r3, [r4, #25]
   3ae78:	mul	r5, r5, r3
   3ae7c:	ldr	r0, [r4, #20]
   3ae80:	add	r3, r0, r5
   3ae84:	ldr	r2, [r4, #16]
   3ae88:	cmp	r2, r3
   3ae8c:	bcs	3aea0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x28c>
   3ae90:	mov	r1, r5
   3ae94:	mov	r0, r4
   3ae98:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3ae9c:	b	3ae24 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x210>
   3aea0:	mov	r2, r5
   3aea4:	mov	r1, #32
   3aea8:	bl	1459c <memset@plt>
   3aeac:	ldr	r3, [r4, #20]
   3aeb0:	add	r5, r3, r5
   3aeb4:	str	r5, [r4, #20]
   3aeb8:	b	3ae24 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x210>

0003aebc <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3aebc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3aec0:	strd	r6, [sp, #8]
   3aec4:	strd	r8, [sp, #16]
   3aec8:	strd	sl, [sp, #24]
   3aecc:	str	lr, [sp, #32]
   3aed0:	sub	sp, sp, #12
   3aed4:	mov	r4, r0
   3aed8:	ldr	r7, [sp, #52]	; 0x34
   3aedc:	ldrb	r0, [r0, #27]
   3aee0:	cmp	r0, #0
   3aee4:	bne	3afe0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x124>
   3aee8:	add	r2, r2, #2
   3aeec:	lsl	r2, r2, #1
   3aef0:	ldr	r0, [r1, #8]
   3aef4:	cmp	r0, r2
   3aef8:	ble	3b0e0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3aefc:	ldr	r0, [r1, #4]
   3af00:	ldrh	r2, [r0, r2]
   3af04:	cmp	r2, #0
   3af08:	beq	3b0e0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3af0c:	ldr	r0, [r1]
   3af10:	adds	ip, r0, r2
   3af14:	beq	3b0e0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3af18:	ldr	lr, [r1, #16]
   3af1c:	add	r5, lr, #1
   3af20:	str	r5, [r1, #16]
   3af24:	cmp	lr, #0
   3af28:	beq	3af40 <flatcc_json_printer_int8_enum_vector_field@@Base+0x84>
   3af2c:	ldr	r1, [r4, #20]
   3af30:	add	lr, r1, #1
   3af34:	str	lr, [r4, #20]
   3af38:	mov	lr, #44	; 0x2c
   3af3c:	strb	lr, [r1]
   3af40:	ldr	r2, [r0, r2]
   3af44:	add	r6, ip, r2
   3af48:	ldr	r8, [ip, r2]
   3af4c:	ldr	r2, [sp, #48]	; 0x30
   3af50:	mov	r1, r3
   3af54:	mov	r0, r4
   3af58:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3af5c:	ldr	r3, [r4, #32]
   3af60:	add	r3, r3, #1
   3af64:	str	r3, [r4, #32]
   3af68:	ldr	r3, [r4, #20]
   3af6c:	add	r2, r3, #1
   3af70:	str	r2, [r4, #20]
   3af74:	mov	r2, #91	; 0x5b
   3af78:	strb	r2, [r3]
   3af7c:	cmp	r8, #0
   3af80:	beq	3b0c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x204>
   3af84:	ldrb	r3, [r4, #25]
   3af88:	cmp	r3, #0
   3af8c:	bne	3aff4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x138>
   3af90:	ldr	r2, [r4, #20]
   3af94:	ldr	r3, [r4, #16]
   3af98:	cmp	r2, r3
   3af9c:	bcc	3afb0 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
   3afa0:	ldr	r3, [r4, #44]	; 0x2c
   3afa4:	mov	r1, #0
   3afa8:	mov	r0, r4
   3afac:	blx	r3
   3afb0:	ldrsb	r1, [r6, #4]
   3afb4:	mov	r0, r4
   3afb8:	blx	r7
   3afbc:	add	r5, r6, #5
   3afc0:	cmp	r8, #1
   3afc4:	beq	3b0c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x204>
   3afc8:	add	r8, r8, #4
   3afcc:	add	r6, r6, r8
   3afd0:	mov	r8, #44	; 0x2c
   3afd4:	mov	r9, #0
   3afd8:	mov	sl, #10
   3afdc:	b	3b064 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1a8>
   3afe0:	ldr	r0, [sp, #48]	; 0x30
   3afe4:	str	r0, [sp]
   3afe8:	mov	r0, r4
   3afec:	bl	38f3c <flatcc_json_printer_int8_vector_field@@Base>
   3aff0:	b	3b0e0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3aff4:	ldr	r3, [r4, #20]
   3aff8:	add	r2, r3, #1
   3affc:	str	r2, [r4, #20]
   3b000:	mov	r2, #10
   3b004:	strb	r2, [r3]
   3b008:	mov	r0, r4
   3b00c:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3b010:	b	3afb0 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
   3b014:	ldr	r3, [r4, #20]
   3b018:	add	r2, r3, #1
   3b01c:	str	r2, [r4, #20]
   3b020:	strb	sl, [r3]
   3b024:	ldrb	r3, [r4, #25]
   3b028:	ldr	fp, [r4, #32]
   3b02c:	mul	fp, fp, r3
   3b030:	ldr	r0, [r4, #20]
   3b034:	add	r3, r0, fp
   3b038:	ldr	r2, [r4, #16]
   3b03c:	cmp	r2, r3
   3b040:	bcs	3b0a4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1e8>
   3b044:	mov	r1, fp
   3b048:	mov	r0, r4
   3b04c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3b050:	ldrsb	r1, [r5], #1
   3b054:	mov	r0, r4
   3b058:	blx	r7
   3b05c:	cmp	r6, r5
   3b060:	beq	3b0c0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x204>
   3b064:	ldr	r3, [r4, #20]
   3b068:	add	r2, r3, #1
   3b06c:	str	r2, [r4, #20]
   3b070:	strb	r8, [r3]
   3b074:	ldrb	r3, [r4, #25]
   3b078:	cmp	r3, #0
   3b07c:	bne	3b014 <flatcc_json_printer_int8_enum_vector_field@@Base+0x158>
   3b080:	ldr	r2, [r4, #20]
   3b084:	ldr	r3, [r4, #16]
   3b088:	cmp	r2, r3
   3b08c:	bcc	3b050 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   3b090:	ldr	r3, [r4, #44]	; 0x2c
   3b094:	mov	r1, r9
   3b098:	mov	r0, r4
   3b09c:	blx	r3
   3b0a0:	b	3b050 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   3b0a4:	mov	r2, fp
   3b0a8:	mov	r1, #32
   3b0ac:	bl	1459c <memset@plt>
   3b0b0:	ldr	r3, [r4, #20]
   3b0b4:	add	fp, r3, fp
   3b0b8:	str	fp, [r4, #20]
   3b0bc:	b	3b050 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   3b0c0:	ldrb	r3, [r4, #25]
   3b0c4:	cmp	r3, #0
   3b0c8:	bne	3b0fc <flatcc_json_printer_int8_enum_vector_field@@Base+0x240>
   3b0cc:	ldr	r3, [r4, #20]
   3b0d0:	add	r2, r3, #1
   3b0d4:	str	r2, [r4, #20]
   3b0d8:	mov	r2, #93	; 0x5d
   3b0dc:	strb	r2, [r3]
   3b0e0:	add	sp, sp, #12
   3b0e4:	ldrd	r4, [sp]
   3b0e8:	ldrd	r6, [sp, #8]
   3b0ec:	ldrd	r8, [sp, #16]
   3b0f0:	ldrd	sl, [sp, #24]
   3b0f4:	add	sp, sp, #32
   3b0f8:	pop	{pc}		; (ldr pc, [sp], #4)
   3b0fc:	ldr	r3, [r4, #20]
   3b100:	add	r2, r3, #1
   3b104:	str	r2, [r4, #20]
   3b108:	mov	r2, #10
   3b10c:	strb	r2, [r3]
   3b110:	ldr	r5, [r4, #32]
   3b114:	sub	r5, r5, #1
   3b118:	str	r5, [r4, #32]
   3b11c:	ldrb	r3, [r4, #25]
   3b120:	mul	r5, r5, r3
   3b124:	ldr	r0, [r4, #20]
   3b128:	add	r3, r0, r5
   3b12c:	ldr	r2, [r4, #16]
   3b130:	cmp	r2, r3
   3b134:	bcs	3b148 <flatcc_json_printer_int8_enum_vector_field@@Base+0x28c>
   3b138:	mov	r1, r5
   3b13c:	mov	r0, r4
   3b140:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3b144:	b	3b0cc <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   3b148:	mov	r2, r5
   3b14c:	mov	r1, #32
   3b150:	bl	1459c <memset@plt>
   3b154:	ldr	r3, [r4, #20]
   3b158:	add	r5, r3, r5
   3b15c:	str	r5, [r4, #20]
   3b160:	b	3b0cc <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>

0003b164 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3b164:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b168:	strd	r6, [sp, #8]
   3b16c:	strd	r8, [sp, #16]
   3b170:	strd	sl, [sp, #24]
   3b174:	str	lr, [sp, #32]
   3b178:	sub	sp, sp, #12
   3b17c:	mov	r4, r0
   3b180:	ldr	r7, [sp, #52]	; 0x34
   3b184:	ldrb	r0, [r0, #27]
   3b188:	cmp	r0, #0
   3b18c:	bne	3b284 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   3b190:	add	r2, r2, #2
   3b194:	lsl	r2, r2, #1
   3b198:	ldr	r0, [r1, #8]
   3b19c:	cmp	r0, r2
   3b1a0:	ble	3b388 <flatcc_json_printer_int16_enum_vector_field@@Base+0x224>
   3b1a4:	ldr	r0, [r1, #4]
   3b1a8:	ldrh	r2, [r0, r2]
   3b1ac:	cmp	r2, #0
   3b1b0:	beq	3b388 <flatcc_json_printer_int16_enum_vector_field@@Base+0x224>
   3b1b4:	ldr	r0, [r1]
   3b1b8:	adds	ip, r0, r2
   3b1bc:	beq	3b388 <flatcc_json_printer_int16_enum_vector_field@@Base+0x224>
   3b1c0:	ldr	lr, [r1, #16]
   3b1c4:	add	r5, lr, #1
   3b1c8:	str	r5, [r1, #16]
   3b1cc:	cmp	lr, #0
   3b1d0:	beq	3b1e8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x84>
   3b1d4:	ldr	r1, [r4, #20]
   3b1d8:	add	lr, r1, #1
   3b1dc:	str	lr, [r4, #20]
   3b1e0:	mov	lr, #44	; 0x2c
   3b1e4:	strb	lr, [r1]
   3b1e8:	ldr	r2, [r0, r2]
   3b1ec:	add	r6, ip, r2
   3b1f0:	ldr	r8, [ip, r2]
   3b1f4:	ldr	r2, [sp, #48]	; 0x30
   3b1f8:	mov	r1, r3
   3b1fc:	mov	r0, r4
   3b200:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3b204:	ldr	r3, [r4, #32]
   3b208:	add	r3, r3, #1
   3b20c:	str	r3, [r4, #32]
   3b210:	ldr	r3, [r4, #20]
   3b214:	add	r2, r3, #1
   3b218:	str	r2, [r4, #20]
   3b21c:	mov	r2, #91	; 0x5b
   3b220:	strb	r2, [r3]
   3b224:	cmp	r8, #0
   3b228:	beq	3b368 <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>
   3b22c:	ldrb	r3, [r4, #25]
   3b230:	cmp	r3, #0
   3b234:	bne	3b298 <flatcc_json_printer_int16_enum_vector_field@@Base+0x134>
   3b238:	ldr	r2, [r4, #20]
   3b23c:	ldr	r3, [r4, #16]
   3b240:	cmp	r2, r3
   3b244:	bcc	3b258 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3b248:	ldr	r3, [r4, #44]	; 0x2c
   3b24c:	mov	r1, #0
   3b250:	mov	r0, r4
   3b254:	blx	r3
   3b258:	ldrsh	r1, [r6, #4]
   3b25c:	mov	r0, r4
   3b260:	blx	r7
   3b264:	add	r6, r6, #6
   3b268:	sub	r5, r8, #2
   3b26c:	cmp	r8, #1
   3b270:	beq	3b368 <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>
   3b274:	mov	r8, #44	; 0x2c
   3b278:	mov	r9, #0
   3b27c:	mov	sl, #10
   3b280:	b	3b30c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a8>
   3b284:	ldr	r0, [sp, #48]	; 0x30
   3b288:	str	r0, [sp]
   3b28c:	mov	r0, r4
   3b290:	bl	391cc <flatcc_json_printer_int16_vector_field@@Base>
   3b294:	b	3b388 <flatcc_json_printer_int16_enum_vector_field@@Base+0x224>
   3b298:	ldr	r3, [r4, #20]
   3b29c:	add	r2, r3, #1
   3b2a0:	str	r2, [r4, #20]
   3b2a4:	mov	r2, #10
   3b2a8:	strb	r2, [r3]
   3b2ac:	mov	r0, r4
   3b2b0:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3b2b4:	b	3b258 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3b2b8:	ldr	r3, [r4, #20]
   3b2bc:	add	r2, r3, #1
   3b2c0:	str	r2, [r4, #20]
   3b2c4:	strb	sl, [r3]
   3b2c8:	ldrb	r3, [r4, #25]
   3b2cc:	ldr	fp, [r4, #32]
   3b2d0:	mul	fp, fp, r3
   3b2d4:	ldr	r0, [r4, #20]
   3b2d8:	add	r3, r0, fp
   3b2dc:	ldr	r2, [r4, #16]
   3b2e0:	cmp	r2, r3
   3b2e4:	bcs	3b34c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e8>
   3b2e8:	mov	r1, fp
   3b2ec:	mov	r0, r4
   3b2f0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3b2f4:	ldrsh	r1, [r6], #2
   3b2f8:	mov	r0, r4
   3b2fc:	blx	r7
   3b300:	sub	r5, r5, #1
   3b304:	cmn	r5, #1
   3b308:	beq	3b368 <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>
   3b30c:	ldr	r3, [r4, #20]
   3b310:	add	r2, r3, #1
   3b314:	str	r2, [r4, #20]
   3b318:	strb	r8, [r3]
   3b31c:	ldrb	r3, [r4, #25]
   3b320:	cmp	r3, #0
   3b324:	bne	3b2b8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x154>
   3b328:	ldr	r2, [r4, #20]
   3b32c:	ldr	r3, [r4, #16]
   3b330:	cmp	r2, r3
   3b334:	bcc	3b2f4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x190>
   3b338:	ldr	r3, [r4, #44]	; 0x2c
   3b33c:	mov	r1, r9
   3b340:	mov	r0, r4
   3b344:	blx	r3
   3b348:	b	3b2f4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x190>
   3b34c:	mov	r2, fp
   3b350:	mov	r1, #32
   3b354:	bl	1459c <memset@plt>
   3b358:	ldr	r3, [r4, #20]
   3b35c:	add	fp, r3, fp
   3b360:	str	fp, [r4, #20]
   3b364:	b	3b2f4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x190>
   3b368:	ldrb	r3, [r4, #25]
   3b36c:	cmp	r3, #0
   3b370:	bne	3b3a4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x240>
   3b374:	ldr	r3, [r4, #20]
   3b378:	add	r2, r3, #1
   3b37c:	str	r2, [r4, #20]
   3b380:	mov	r2, #93	; 0x5d
   3b384:	strb	r2, [r3]
   3b388:	add	sp, sp, #12
   3b38c:	ldrd	r4, [sp]
   3b390:	ldrd	r6, [sp, #8]
   3b394:	ldrd	r8, [sp, #16]
   3b398:	ldrd	sl, [sp, #24]
   3b39c:	add	sp, sp, #32
   3b3a0:	pop	{pc}		; (ldr pc, [sp], #4)
   3b3a4:	ldr	r3, [r4, #20]
   3b3a8:	add	r2, r3, #1
   3b3ac:	str	r2, [r4, #20]
   3b3b0:	mov	r2, #10
   3b3b4:	strb	r2, [r3]
   3b3b8:	ldr	r5, [r4, #32]
   3b3bc:	sub	r5, r5, #1
   3b3c0:	str	r5, [r4, #32]
   3b3c4:	ldrb	r3, [r4, #25]
   3b3c8:	mul	r5, r5, r3
   3b3cc:	ldr	r0, [r4, #20]
   3b3d0:	add	r3, r0, r5
   3b3d4:	ldr	r2, [r4, #16]
   3b3d8:	cmp	r2, r3
   3b3dc:	bcs	3b3f0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x28c>
   3b3e0:	mov	r1, r5
   3b3e4:	mov	r0, r4
   3b3e8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3b3ec:	b	3b374 <flatcc_json_printer_int16_enum_vector_field@@Base+0x210>
   3b3f0:	mov	r2, r5
   3b3f4:	mov	r1, #32
   3b3f8:	bl	1459c <memset@plt>
   3b3fc:	ldr	r3, [r4, #20]
   3b400:	add	r5, r3, r5
   3b404:	str	r5, [r4, #20]
   3b408:	b	3b374 <flatcc_json_printer_int16_enum_vector_field@@Base+0x210>

0003b40c <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3b40c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b410:	strd	r6, [sp, #8]
   3b414:	strd	r8, [sp, #16]
   3b418:	strd	sl, [sp, #24]
   3b41c:	str	lr, [sp, #32]
   3b420:	sub	sp, sp, #12
   3b424:	mov	r4, r0
   3b428:	ldr	r7, [sp, #52]	; 0x34
   3b42c:	ldrb	r0, [r0, #27]
   3b430:	cmp	r0, #0
   3b434:	bne	3b52c <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   3b438:	add	r2, r2, #2
   3b43c:	lsl	r2, r2, #1
   3b440:	ldr	r0, [r1, #8]
   3b444:	cmp	r0, r2
   3b448:	ble	3b630 <flatcc_json_printer_int32_enum_vector_field@@Base+0x224>
   3b44c:	ldr	r0, [r1, #4]
   3b450:	ldrh	r2, [r0, r2]
   3b454:	cmp	r2, #0
   3b458:	beq	3b630 <flatcc_json_printer_int32_enum_vector_field@@Base+0x224>
   3b45c:	ldr	r0, [r1]
   3b460:	adds	ip, r0, r2
   3b464:	beq	3b630 <flatcc_json_printer_int32_enum_vector_field@@Base+0x224>
   3b468:	ldr	lr, [r1, #16]
   3b46c:	add	r5, lr, #1
   3b470:	str	r5, [r1, #16]
   3b474:	cmp	lr, #0
   3b478:	beq	3b490 <flatcc_json_printer_int32_enum_vector_field@@Base+0x84>
   3b47c:	ldr	r1, [r4, #20]
   3b480:	add	lr, r1, #1
   3b484:	str	lr, [r4, #20]
   3b488:	mov	lr, #44	; 0x2c
   3b48c:	strb	lr, [r1]
   3b490:	ldr	r2, [r0, r2]
   3b494:	add	r6, ip, r2
   3b498:	ldr	r8, [ip, r2]
   3b49c:	ldr	r2, [sp, #48]	; 0x30
   3b4a0:	mov	r1, r3
   3b4a4:	mov	r0, r4
   3b4a8:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3b4ac:	ldr	r3, [r4, #32]
   3b4b0:	add	r3, r3, #1
   3b4b4:	str	r3, [r4, #32]
   3b4b8:	ldr	r3, [r4, #20]
   3b4bc:	add	r2, r3, #1
   3b4c0:	str	r2, [r4, #20]
   3b4c4:	mov	r2, #91	; 0x5b
   3b4c8:	strb	r2, [r3]
   3b4cc:	cmp	r8, #0
   3b4d0:	beq	3b610 <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>
   3b4d4:	ldrb	r3, [r4, #25]
   3b4d8:	cmp	r3, #0
   3b4dc:	bne	3b540 <flatcc_json_printer_int32_enum_vector_field@@Base+0x134>
   3b4e0:	ldr	r2, [r4, #20]
   3b4e4:	ldr	r3, [r4, #16]
   3b4e8:	cmp	r2, r3
   3b4ec:	bcc	3b500 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3b4f0:	ldr	r3, [r4, #44]	; 0x2c
   3b4f4:	mov	r1, #0
   3b4f8:	mov	r0, r4
   3b4fc:	blx	r3
   3b500:	ldr	r1, [r6, #4]
   3b504:	mov	r0, r4
   3b508:	blx	r7
   3b50c:	add	r6, r6, #8
   3b510:	sub	r5, r8, #2
   3b514:	cmp	r8, #1
   3b518:	beq	3b610 <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>
   3b51c:	mov	r8, #44	; 0x2c
   3b520:	mov	r9, #0
   3b524:	mov	sl, #10
   3b528:	b	3b5b4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1a8>
   3b52c:	ldr	r0, [sp, #48]	; 0x30
   3b530:	str	r0, [sp]
   3b534:	mov	r0, r4
   3b538:	bl	3945c <flatcc_json_printer_int32_vector_field@@Base>
   3b53c:	b	3b630 <flatcc_json_printer_int32_enum_vector_field@@Base+0x224>
   3b540:	ldr	r3, [r4, #20]
   3b544:	add	r2, r3, #1
   3b548:	str	r2, [r4, #20]
   3b54c:	mov	r2, #10
   3b550:	strb	r2, [r3]
   3b554:	mov	r0, r4
   3b558:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3b55c:	b	3b500 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3b560:	ldr	r3, [r4, #20]
   3b564:	add	r2, r3, #1
   3b568:	str	r2, [r4, #20]
   3b56c:	strb	sl, [r3]
   3b570:	ldrb	r3, [r4, #25]
   3b574:	ldr	fp, [r4, #32]
   3b578:	mul	fp, fp, r3
   3b57c:	ldr	r0, [r4, #20]
   3b580:	add	r3, r0, fp
   3b584:	ldr	r2, [r4, #16]
   3b588:	cmp	r2, r3
   3b58c:	bcs	3b5f4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1e8>
   3b590:	mov	r1, fp
   3b594:	mov	r0, r4
   3b598:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3b59c:	ldr	r1, [r6], #4
   3b5a0:	mov	r0, r4
   3b5a4:	blx	r7
   3b5a8:	sub	r5, r5, #1
   3b5ac:	cmn	r5, #1
   3b5b0:	beq	3b610 <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>
   3b5b4:	ldr	r3, [r4, #20]
   3b5b8:	add	r2, r3, #1
   3b5bc:	str	r2, [r4, #20]
   3b5c0:	strb	r8, [r3]
   3b5c4:	ldrb	r3, [r4, #25]
   3b5c8:	cmp	r3, #0
   3b5cc:	bne	3b560 <flatcc_json_printer_int32_enum_vector_field@@Base+0x154>
   3b5d0:	ldr	r2, [r4, #20]
   3b5d4:	ldr	r3, [r4, #16]
   3b5d8:	cmp	r2, r3
   3b5dc:	bcc	3b59c <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
   3b5e0:	ldr	r3, [r4, #44]	; 0x2c
   3b5e4:	mov	r1, r9
   3b5e8:	mov	r0, r4
   3b5ec:	blx	r3
   3b5f0:	b	3b59c <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
   3b5f4:	mov	r2, fp
   3b5f8:	mov	r1, #32
   3b5fc:	bl	1459c <memset@plt>
   3b600:	ldr	r3, [r4, #20]
   3b604:	add	fp, r3, fp
   3b608:	str	fp, [r4, #20]
   3b60c:	b	3b59c <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
   3b610:	ldrb	r3, [r4, #25]
   3b614:	cmp	r3, #0
   3b618:	bne	3b64c <flatcc_json_printer_int32_enum_vector_field@@Base+0x240>
   3b61c:	ldr	r3, [r4, #20]
   3b620:	add	r2, r3, #1
   3b624:	str	r2, [r4, #20]
   3b628:	mov	r2, #93	; 0x5d
   3b62c:	strb	r2, [r3]
   3b630:	add	sp, sp, #12
   3b634:	ldrd	r4, [sp]
   3b638:	ldrd	r6, [sp, #8]
   3b63c:	ldrd	r8, [sp, #16]
   3b640:	ldrd	sl, [sp, #24]
   3b644:	add	sp, sp, #32
   3b648:	pop	{pc}		; (ldr pc, [sp], #4)
   3b64c:	ldr	r3, [r4, #20]
   3b650:	add	r2, r3, #1
   3b654:	str	r2, [r4, #20]
   3b658:	mov	r2, #10
   3b65c:	strb	r2, [r3]
   3b660:	ldr	r5, [r4, #32]
   3b664:	sub	r5, r5, #1
   3b668:	str	r5, [r4, #32]
   3b66c:	ldrb	r3, [r4, #25]
   3b670:	mul	r5, r5, r3
   3b674:	ldr	r0, [r4, #20]
   3b678:	add	r3, r0, r5
   3b67c:	ldr	r2, [r4, #16]
   3b680:	cmp	r2, r3
   3b684:	bcs	3b698 <flatcc_json_printer_int32_enum_vector_field@@Base+0x28c>
   3b688:	mov	r1, r5
   3b68c:	mov	r0, r4
   3b690:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3b694:	b	3b61c <flatcc_json_printer_int32_enum_vector_field@@Base+0x210>
   3b698:	mov	r2, r5
   3b69c:	mov	r1, #32
   3b6a0:	bl	1459c <memset@plt>
   3b6a4:	ldr	r3, [r4, #20]
   3b6a8:	add	r5, r3, r5
   3b6ac:	str	r5, [r4, #20]
   3b6b0:	b	3b61c <flatcc_json_printer_int32_enum_vector_field@@Base+0x210>

0003b6b4 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3b6b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b6b8:	strd	r6, [sp, #8]
   3b6bc:	strd	r8, [sp, #16]
   3b6c0:	strd	sl, [sp, #24]
   3b6c4:	str	lr, [sp, #32]
   3b6c8:	sub	sp, sp, #12
   3b6cc:	mov	r4, r0
   3b6d0:	ldr	r7, [sp, #52]	; 0x34
   3b6d4:	ldrb	r0, [r0, #27]
   3b6d8:	cmp	r0, #0
   3b6dc:	bne	3b7d4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x120>
   3b6e0:	add	r2, r2, #2
   3b6e4:	lsl	r2, r2, #1
   3b6e8:	ldr	r0, [r1, #8]
   3b6ec:	cmp	r0, r2
   3b6f0:	ble	3b8d8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x224>
   3b6f4:	ldr	r0, [r1, #4]
   3b6f8:	ldrh	r2, [r0, r2]
   3b6fc:	cmp	r2, #0
   3b700:	beq	3b8d8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x224>
   3b704:	ldr	r0, [r1]
   3b708:	adds	ip, r0, r2
   3b70c:	beq	3b8d8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x224>
   3b710:	ldr	lr, [r1, #16]
   3b714:	add	r5, lr, #1
   3b718:	str	r5, [r1, #16]
   3b71c:	cmp	lr, #0
   3b720:	beq	3b738 <flatcc_json_printer_int64_enum_vector_field@@Base+0x84>
   3b724:	ldr	r1, [r4, #20]
   3b728:	add	lr, r1, #1
   3b72c:	str	lr, [r4, #20]
   3b730:	mov	lr, #44	; 0x2c
   3b734:	strb	lr, [r1]
   3b738:	ldr	r2, [r0, r2]
   3b73c:	add	r6, ip, r2
   3b740:	ldr	r8, [ip, r2]
   3b744:	ldr	r2, [sp, #48]	; 0x30
   3b748:	mov	r1, r3
   3b74c:	mov	r0, r4
   3b750:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3b754:	ldr	r3, [r4, #32]
   3b758:	add	r3, r3, #1
   3b75c:	str	r3, [r4, #32]
   3b760:	ldr	r3, [r4, #20]
   3b764:	add	r2, r3, #1
   3b768:	str	r2, [r4, #20]
   3b76c:	mov	r2, #91	; 0x5b
   3b770:	strb	r2, [r3]
   3b774:	cmp	r8, #0
   3b778:	beq	3b8b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>
   3b77c:	ldrb	r3, [r4, #25]
   3b780:	cmp	r3, #0
   3b784:	bne	3b7e8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x134>
   3b788:	ldr	r2, [r4, #20]
   3b78c:	ldr	r3, [r4, #16]
   3b790:	cmp	r2, r3
   3b794:	bcc	3b7a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3b798:	ldr	r3, [r4, #44]	; 0x2c
   3b79c:	mov	r1, #0
   3b7a0:	mov	r0, r4
   3b7a4:	blx	r3
   3b7a8:	ldrd	r2, [r6, #4]
   3b7ac:	mov	r0, r4
   3b7b0:	blx	r7
   3b7b4:	add	r6, r6, #12
   3b7b8:	sub	r5, r8, #2
   3b7bc:	cmp	r8, #1
   3b7c0:	beq	3b8b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>
   3b7c4:	mov	r8, #44	; 0x2c
   3b7c8:	mov	r9, #0
   3b7cc:	mov	sl, #10
   3b7d0:	b	3b85c <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a8>
   3b7d4:	ldr	r0, [sp, #48]	; 0x30
   3b7d8:	str	r0, [sp]
   3b7dc:	mov	r0, r4
   3b7e0:	bl	396ec <flatcc_json_printer_int64_vector_field@@Base>
   3b7e4:	b	3b8d8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x224>
   3b7e8:	ldr	r3, [r4, #20]
   3b7ec:	add	r2, r3, #1
   3b7f0:	str	r2, [r4, #20]
   3b7f4:	mov	r2, #10
   3b7f8:	strb	r2, [r3]
   3b7fc:	mov	r0, r4
   3b800:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3b804:	b	3b7a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3b808:	ldr	r3, [r4, #20]
   3b80c:	add	r2, r3, #1
   3b810:	str	r2, [r4, #20]
   3b814:	strb	sl, [r3]
   3b818:	ldrb	r3, [r4, #25]
   3b81c:	ldr	fp, [r4, #32]
   3b820:	mul	fp, fp, r3
   3b824:	ldr	r0, [r4, #20]
   3b828:	add	r3, r0, fp
   3b82c:	ldr	r2, [r4, #16]
   3b830:	cmp	r2, r3
   3b834:	bcs	3b89c <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e8>
   3b838:	mov	r1, fp
   3b83c:	mov	r0, r4
   3b840:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3b844:	ldrd	r2, [r6], #8
   3b848:	mov	r0, r4
   3b84c:	blx	r7
   3b850:	sub	r5, r5, #1
   3b854:	cmn	r5, #1
   3b858:	beq	3b8b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>
   3b85c:	ldr	r3, [r4, #20]
   3b860:	add	r2, r3, #1
   3b864:	str	r2, [r4, #20]
   3b868:	strb	r8, [r3]
   3b86c:	ldrb	r3, [r4, #25]
   3b870:	cmp	r3, #0
   3b874:	bne	3b808 <flatcc_json_printer_int64_enum_vector_field@@Base+0x154>
   3b878:	ldr	r2, [r4, #20]
   3b87c:	ldr	r3, [r4, #16]
   3b880:	cmp	r2, r3
   3b884:	bcc	3b844 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   3b888:	ldr	r3, [r4, #44]	; 0x2c
   3b88c:	mov	r1, r9
   3b890:	mov	r0, r4
   3b894:	blx	r3
   3b898:	b	3b844 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   3b89c:	mov	r2, fp
   3b8a0:	mov	r1, #32
   3b8a4:	bl	1459c <memset@plt>
   3b8a8:	ldr	r3, [r4, #20]
   3b8ac:	add	fp, r3, fp
   3b8b0:	str	fp, [r4, #20]
   3b8b4:	b	3b844 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   3b8b8:	ldrb	r3, [r4, #25]
   3b8bc:	cmp	r3, #0
   3b8c0:	bne	3b8f4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x240>
   3b8c4:	ldr	r3, [r4, #20]
   3b8c8:	add	r2, r3, #1
   3b8cc:	str	r2, [r4, #20]
   3b8d0:	mov	r2, #93	; 0x5d
   3b8d4:	strb	r2, [r3]
   3b8d8:	add	sp, sp, #12
   3b8dc:	ldrd	r4, [sp]
   3b8e0:	ldrd	r6, [sp, #8]
   3b8e4:	ldrd	r8, [sp, #16]
   3b8e8:	ldrd	sl, [sp, #24]
   3b8ec:	add	sp, sp, #32
   3b8f0:	pop	{pc}		; (ldr pc, [sp], #4)
   3b8f4:	ldr	r3, [r4, #20]
   3b8f8:	add	r2, r3, #1
   3b8fc:	str	r2, [r4, #20]
   3b900:	mov	r2, #10
   3b904:	strb	r2, [r3]
   3b908:	ldr	r5, [r4, #32]
   3b90c:	sub	r5, r5, #1
   3b910:	str	r5, [r4, #32]
   3b914:	ldrb	r3, [r4, #25]
   3b918:	mul	r5, r5, r3
   3b91c:	ldr	r0, [r4, #20]
   3b920:	add	r3, r0, r5
   3b924:	ldr	r2, [r4, #16]
   3b928:	cmp	r2, r3
   3b92c:	bcs	3b940 <flatcc_json_printer_int64_enum_vector_field@@Base+0x28c>
   3b930:	mov	r1, r5
   3b934:	mov	r0, r4
   3b938:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3b93c:	b	3b8c4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x210>
   3b940:	mov	r2, r5
   3b944:	mov	r1, #32
   3b948:	bl	1459c <memset@plt>
   3b94c:	ldr	r3, [r4, #20]
   3b950:	add	r5, r3, r5
   3b954:	str	r5, [r4, #20]
   3b958:	b	3b8c4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x210>

0003b95c <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3b95c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b960:	strd	r6, [sp, #8]
   3b964:	strd	r8, [sp, #16]
   3b968:	strd	sl, [sp, #24]
   3b96c:	str	lr, [sp, #32]
   3b970:	sub	sp, sp, #12
   3b974:	mov	r4, r0
   3b978:	ldr	r7, [sp, #52]	; 0x34
   3b97c:	ldrb	r0, [r0, #27]
   3b980:	cmp	r0, #0
   3b984:	bne	3ba80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x124>
   3b988:	add	r2, r2, #2
   3b98c:	lsl	r2, r2, #1
   3b990:	ldr	r0, [r1, #8]
   3b994:	cmp	r0, r2
   3b998:	ble	3bb80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3b99c:	ldr	r0, [r1, #4]
   3b9a0:	ldrh	r2, [r0, r2]
   3b9a4:	cmp	r2, #0
   3b9a8:	beq	3bb80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3b9ac:	ldr	r0, [r1]
   3b9b0:	adds	ip, r0, r2
   3b9b4:	beq	3bb80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3b9b8:	ldr	lr, [r1, #16]
   3b9bc:	add	r5, lr, #1
   3b9c0:	str	r5, [r1, #16]
   3b9c4:	cmp	lr, #0
   3b9c8:	beq	3b9e0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x84>
   3b9cc:	ldr	r1, [r4, #20]
   3b9d0:	add	lr, r1, #1
   3b9d4:	str	lr, [r4, #20]
   3b9d8:	mov	lr, #44	; 0x2c
   3b9dc:	strb	lr, [r1]
   3b9e0:	ldr	r2, [r0, r2]
   3b9e4:	add	r6, ip, r2
   3b9e8:	ldr	r8, [ip, r2]
   3b9ec:	ldr	r2, [sp, #48]	; 0x30
   3b9f0:	mov	r1, r3
   3b9f4:	mov	r0, r4
   3b9f8:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3b9fc:	ldr	r3, [r4, #32]
   3ba00:	add	r3, r3, #1
   3ba04:	str	r3, [r4, #32]
   3ba08:	ldr	r3, [r4, #20]
   3ba0c:	add	r2, r3, #1
   3ba10:	str	r2, [r4, #20]
   3ba14:	mov	r2, #91	; 0x5b
   3ba18:	strb	r2, [r3]
   3ba1c:	cmp	r8, #0
   3ba20:	beq	3bb60 <flatcc_json_printer_bool_enum_vector_field@@Base+0x204>
   3ba24:	ldrb	r3, [r4, #25]
   3ba28:	cmp	r3, #0
   3ba2c:	bne	3ba94 <flatcc_json_printer_bool_enum_vector_field@@Base+0x138>
   3ba30:	ldr	r2, [r4, #20]
   3ba34:	ldr	r3, [r4, #16]
   3ba38:	cmp	r2, r3
   3ba3c:	bcc	3ba50 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
   3ba40:	ldr	r3, [r4, #44]	; 0x2c
   3ba44:	mov	r1, #0
   3ba48:	mov	r0, r4
   3ba4c:	blx	r3
   3ba50:	ldrb	r1, [r6, #4]
   3ba54:	mov	r0, r4
   3ba58:	blx	r7
   3ba5c:	add	r5, r6, #5
   3ba60:	cmp	r8, #1
   3ba64:	beq	3bb60 <flatcc_json_printer_bool_enum_vector_field@@Base+0x204>
   3ba68:	add	r8, r8, #4
   3ba6c:	add	r6, r6, r8
   3ba70:	mov	r8, #44	; 0x2c
   3ba74:	mov	r9, #0
   3ba78:	mov	sl, #10
   3ba7c:	b	3bb04 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1a8>
   3ba80:	ldr	r0, [sp, #48]	; 0x30
   3ba84:	str	r0, [sp]
   3ba88:	mov	r0, r4
   3ba8c:	bl	3997c <flatcc_json_printer_bool_vector_field@@Base>
   3ba90:	b	3bb80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3ba94:	ldr	r3, [r4, #20]
   3ba98:	add	r2, r3, #1
   3ba9c:	str	r2, [r4, #20]
   3baa0:	mov	r2, #10
   3baa4:	strb	r2, [r3]
   3baa8:	mov	r0, r4
   3baac:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3bab0:	b	3ba50 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
   3bab4:	ldr	r3, [r4, #20]
   3bab8:	add	r2, r3, #1
   3babc:	str	r2, [r4, #20]
   3bac0:	strb	sl, [r3]
   3bac4:	ldrb	r3, [r4, #25]
   3bac8:	ldr	fp, [r4, #32]
   3bacc:	mul	fp, fp, r3
   3bad0:	ldr	r0, [r4, #20]
   3bad4:	add	r3, r0, fp
   3bad8:	ldr	r2, [r4, #16]
   3badc:	cmp	r2, r3
   3bae0:	bcs	3bb44 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1e8>
   3bae4:	mov	r1, fp
   3bae8:	mov	r0, r4
   3baec:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3baf0:	ldrb	r1, [r5], #1
   3baf4:	mov	r0, r4
   3baf8:	blx	r7
   3bafc:	cmp	r6, r5
   3bb00:	beq	3bb60 <flatcc_json_printer_bool_enum_vector_field@@Base+0x204>
   3bb04:	ldr	r3, [r4, #20]
   3bb08:	add	r2, r3, #1
   3bb0c:	str	r2, [r4, #20]
   3bb10:	strb	r8, [r3]
   3bb14:	ldrb	r3, [r4, #25]
   3bb18:	cmp	r3, #0
   3bb1c:	bne	3bab4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x158>
   3bb20:	ldr	r2, [r4, #20]
   3bb24:	ldr	r3, [r4, #16]
   3bb28:	cmp	r2, r3
   3bb2c:	bcc	3baf0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   3bb30:	ldr	r3, [r4, #44]	; 0x2c
   3bb34:	mov	r1, r9
   3bb38:	mov	r0, r4
   3bb3c:	blx	r3
   3bb40:	b	3baf0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   3bb44:	mov	r2, fp
   3bb48:	mov	r1, #32
   3bb4c:	bl	1459c <memset@plt>
   3bb50:	ldr	r3, [r4, #20]
   3bb54:	add	fp, r3, fp
   3bb58:	str	fp, [r4, #20]
   3bb5c:	b	3baf0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   3bb60:	ldrb	r3, [r4, #25]
   3bb64:	cmp	r3, #0
   3bb68:	bne	3bb9c <flatcc_json_printer_bool_enum_vector_field@@Base+0x240>
   3bb6c:	ldr	r3, [r4, #20]
   3bb70:	add	r2, r3, #1
   3bb74:	str	r2, [r4, #20]
   3bb78:	mov	r2, #93	; 0x5d
   3bb7c:	strb	r2, [r3]
   3bb80:	add	sp, sp, #12
   3bb84:	ldrd	r4, [sp]
   3bb88:	ldrd	r6, [sp, #8]
   3bb8c:	ldrd	r8, [sp, #16]
   3bb90:	ldrd	sl, [sp, #24]
   3bb94:	add	sp, sp, #32
   3bb98:	pop	{pc}		; (ldr pc, [sp], #4)
   3bb9c:	ldr	r3, [r4, #20]
   3bba0:	add	r2, r3, #1
   3bba4:	str	r2, [r4, #20]
   3bba8:	mov	r2, #10
   3bbac:	strb	r2, [r3]
   3bbb0:	ldr	r5, [r4, #32]
   3bbb4:	sub	r5, r5, #1
   3bbb8:	str	r5, [r4, #32]
   3bbbc:	ldrb	r3, [r4, #25]
   3bbc0:	mul	r5, r5, r3
   3bbc4:	ldr	r0, [r4, #20]
   3bbc8:	add	r3, r0, r5
   3bbcc:	ldr	r2, [r4, #16]
   3bbd0:	cmp	r2, r3
   3bbd4:	bcs	3bbe8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x28c>
   3bbd8:	mov	r1, r5
   3bbdc:	mov	r0, r4
   3bbe0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3bbe4:	b	3bb6c <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3bbe8:	mov	r2, r5
   3bbec:	mov	r1, #32
   3bbf0:	bl	1459c <memset@plt>
   3bbf4:	ldr	r3, [r4, #20]
   3bbf8:	add	r5, r3, r5
   3bbfc:	str	r5, [r4, #20]
   3bc00:	b	3bb6c <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>

0003bc04 <flatcc_json_printer_struct_vector_field@@Base>:
   3bc04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3bc08:	strd	r6, [sp, #8]
   3bc0c:	strd	r8, [sp, #16]
   3bc10:	strd	sl, [sp, #24]
   3bc14:	str	lr, [sp, #32]
   3bc18:	sub	sp, sp, #4
   3bc1c:	ldr	r9, [sp, #44]	; 0x2c
   3bc20:	ldr	r8, [sp, #48]	; 0x30
   3bc24:	add	r2, r2, #2
   3bc28:	lsl	r2, r2, #1
   3bc2c:	ldr	ip, [r1, #8]
   3bc30:	cmp	r2, ip
   3bc34:	bge	3bf18 <flatcc_json_printer_struct_vector_field@@Base+0x314>
   3bc38:	ldr	ip, [r1, #4]
   3bc3c:	ldrh	r2, [ip, r2]
   3bc40:	cmp	r2, #0
   3bc44:	beq	3bf18 <flatcc_json_printer_struct_vector_field@@Base+0x314>
   3bc48:	ldr	ip, [r1]
   3bc4c:	adds	lr, ip, r2
   3bc50:	beq	3bf18 <flatcc_json_printer_struct_vector_field@@Base+0x314>
   3bc54:	ldr	r4, [r1, #16]
   3bc58:	add	r5, r4, #1
   3bc5c:	str	r5, [r1, #16]
   3bc60:	cmp	r4, #0
   3bc64:	beq	3bc7c <flatcc_json_printer_struct_vector_field@@Base+0x78>
   3bc68:	ldr	r1, [r0, #20]
   3bc6c:	add	r4, r1, #1
   3bc70:	str	r4, [r0, #20]
   3bc74:	mov	r4, #44	; 0x2c
   3bc78:	strb	r4, [r1]
   3bc7c:	mov	r1, r3
   3bc80:	mov	r4, r0
   3bc84:	ldr	r3, [ip, r2]
   3bc88:	add	r5, lr, r3
   3bc8c:	ldr	r7, [lr, r3]
   3bc90:	ldr	r2, [sp, #40]	; 0x28
   3bc94:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3bc98:	ldr	r3, [r4, #32]
   3bc9c:	add	r3, r3, #1
   3bca0:	str	r3, [r4, #32]
   3bca4:	ldr	r3, [r4, #20]
   3bca8:	add	r2, r3, #1
   3bcac:	str	r2, [r4, #20]
   3bcb0:	mov	r2, #91	; 0x5b
   3bcb4:	strb	r2, [r3]
   3bcb8:	cmp	r7, #0
   3bcbc:	beq	3bef8 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3bcc0:	ldrb	r3, [r4, #25]
   3bcc4:	cmp	r3, #0
   3bcc8:	bne	3bd54 <flatcc_json_printer_struct_vector_field@@Base+0x150>
   3bccc:	ldr	r2, [r4, #20]
   3bcd0:	ldr	r3, [r4, #16]
   3bcd4:	cmp	r2, r3
   3bcd8:	bcc	3bcec <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3bcdc:	ldr	r3, [r4, #44]	; 0x2c
   3bce0:	mov	r1, #0
   3bce4:	mov	r0, r4
   3bce8:	blx	r3
   3bcec:	add	r5, r5, #4
   3bcf0:	ldr	r3, [r4, #32]
   3bcf4:	add	r3, r3, #1
   3bcf8:	str	r3, [r4, #32]
   3bcfc:	ldr	r3, [r4, #20]
   3bd00:	add	r2, r3, #1
   3bd04:	str	r2, [r4, #20]
   3bd08:	mov	r2, #123	; 0x7b
   3bd0c:	strb	r2, [r3]
   3bd10:	mov	r1, r5
   3bd14:	mov	r0, r4
   3bd18:	blx	r8
   3bd1c:	ldrb	r3, [r4, #25]
   3bd20:	cmp	r3, #0
   3bd24:	bne	3bd74 <flatcc_json_printer_struct_vector_field@@Base+0x170>
   3bd28:	ldr	r3, [r4, #20]
   3bd2c:	add	r2, r3, #1
   3bd30:	str	r2, [r4, #20]
   3bd34:	mov	r2, #125	; 0x7d
   3bd38:	strb	r2, [r3]
   3bd3c:	sub	r6, r7, #2
   3bd40:	cmp	r7, #1
   3bd44:	beq	3bef8 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3bd48:	mov	sl, #44	; 0x2c
   3bd4c:	mov	fp, #10
   3bd50:	b	3be34 <flatcc_json_printer_struct_vector_field@@Base+0x230>
   3bd54:	ldr	r3, [r4, #20]
   3bd58:	add	r2, r3, #1
   3bd5c:	str	r2, [r4, #20]
   3bd60:	mov	r2, #10
   3bd64:	strb	r2, [r3]
   3bd68:	mov	r0, r4
   3bd6c:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3bd70:	b	3bcec <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3bd74:	ldr	r3, [r4, #20]
   3bd78:	add	r2, r3, #1
   3bd7c:	str	r2, [r4, #20]
   3bd80:	mov	r2, #10
   3bd84:	strb	r2, [r3]
   3bd88:	ldr	r3, [r4, #32]
   3bd8c:	sub	r3, r3, #1
   3bd90:	str	r3, [r4, #32]
   3bd94:	mov	r0, r4
   3bd98:	bl	31c14 <flatcc_json_parser_struct_as_root@@Base+0x173c>
   3bd9c:	b	3bd28 <flatcc_json_printer_struct_vector_field@@Base+0x124>
   3bda0:	ldr	r3, [r4, #20]
   3bda4:	add	r2, r3, #1
   3bda8:	str	r2, [r4, #20]
   3bdac:	strb	fp, [r3]
   3bdb0:	ldrb	r3, [r4, #25]
   3bdb4:	ldr	r7, [r4, #32]
   3bdb8:	mul	r7, r7, r3
   3bdbc:	ldr	r0, [r4, #20]
   3bdc0:	add	r3, r0, r7
   3bdc4:	ldr	r2, [r4, #16]
   3bdc8:	cmp	r2, r3
   3bdcc:	bcs	3be78 <flatcc_json_printer_struct_vector_field@@Base+0x274>
   3bdd0:	mov	r1, r7
   3bdd4:	mov	r0, r4
   3bdd8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3bddc:	ldr	r3, [r4, #32]
   3bde0:	add	r3, r3, #1
   3bde4:	str	r3, [r4, #32]
   3bde8:	ldr	r3, [r4, #20]
   3bdec:	add	r2, r3, #1
   3bdf0:	str	r2, [r4, #20]
   3bdf4:	mov	r2, #123	; 0x7b
   3bdf8:	strb	r2, [r3]
   3bdfc:	mov	r1, r5
   3be00:	mov	r0, r4
   3be04:	blx	r8
   3be08:	ldrb	r3, [r4, #25]
   3be0c:	cmp	r3, #0
   3be10:	bne	3be94 <flatcc_json_printer_struct_vector_field@@Base+0x290>
   3be14:	ldr	r3, [r4, #20]
   3be18:	add	r2, r3, #1
   3be1c:	str	r2, [r4, #20]
   3be20:	mov	r2, #125	; 0x7d
   3be24:	strb	r2, [r3]
   3be28:	sub	r6, r6, #1
   3be2c:	cmn	r6, #1
   3be30:	beq	3bef8 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3be34:	add	r5, r5, r9
   3be38:	ldr	r3, [r4, #20]
   3be3c:	add	r2, r3, #1
   3be40:	str	r2, [r4, #20]
   3be44:	strb	sl, [r3]
   3be48:	ldrb	r3, [r4, #25]
   3be4c:	cmp	r3, #0
   3be50:	bne	3bda0 <flatcc_json_printer_struct_vector_field@@Base+0x19c>
   3be54:	ldr	r2, [r4, #20]
   3be58:	ldr	r3, [r4, #16]
   3be5c:	cmp	r2, r3
   3be60:	bcc	3bddc <flatcc_json_printer_struct_vector_field@@Base+0x1d8>
   3be64:	ldr	r3, [r4, #44]	; 0x2c
   3be68:	mov	r1, #0
   3be6c:	mov	r0, r4
   3be70:	blx	r3
   3be74:	b	3bddc <flatcc_json_printer_struct_vector_field@@Base+0x1d8>
   3be78:	mov	r2, r7
   3be7c:	mov	r1, #32
   3be80:	bl	1459c <memset@plt>
   3be84:	ldr	r3, [r4, #20]
   3be88:	add	r7, r3, r7
   3be8c:	str	r7, [r4, #20]
   3be90:	b	3bddc <flatcc_json_printer_struct_vector_field@@Base+0x1d8>
   3be94:	ldr	r3, [r4, #20]
   3be98:	add	r2, r3, #1
   3be9c:	str	r2, [r4, #20]
   3bea0:	strb	fp, [r3]
   3bea4:	ldr	r7, [r4, #32]
   3bea8:	sub	r7, r7, #1
   3beac:	str	r7, [r4, #32]
   3beb0:	ldrb	r3, [r4, #25]
   3beb4:	mul	r7, r7, r3
   3beb8:	ldr	r0, [r4, #20]
   3bebc:	add	r3, r0, r7
   3bec0:	ldr	r2, [r4, #16]
   3bec4:	cmp	r2, r3
   3bec8:	bcs	3bedc <flatcc_json_printer_struct_vector_field@@Base+0x2d8>
   3becc:	mov	r1, r7
   3bed0:	mov	r0, r4
   3bed4:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3bed8:	b	3be14 <flatcc_json_printer_struct_vector_field@@Base+0x210>
   3bedc:	mov	r2, r7
   3bee0:	mov	r1, #32
   3bee4:	bl	1459c <memset@plt>
   3bee8:	ldr	r3, [r4, #20]
   3beec:	add	r7, r3, r7
   3bef0:	str	r7, [r4, #20]
   3bef4:	b	3be14 <flatcc_json_printer_struct_vector_field@@Base+0x210>
   3bef8:	ldrb	r3, [r4, #25]
   3befc:	cmp	r3, #0
   3bf00:	bne	3bf34 <flatcc_json_printer_struct_vector_field@@Base+0x330>
   3bf04:	ldr	r3, [r4, #20]
   3bf08:	add	r2, r3, #1
   3bf0c:	str	r2, [r4, #20]
   3bf10:	mov	r2, #93	; 0x5d
   3bf14:	strb	r2, [r3]
   3bf18:	add	sp, sp, #4
   3bf1c:	ldrd	r4, [sp]
   3bf20:	ldrd	r6, [sp, #8]
   3bf24:	ldrd	r8, [sp, #16]
   3bf28:	ldrd	sl, [sp, #24]
   3bf2c:	add	sp, sp, #32
   3bf30:	pop	{pc}		; (ldr pc, [sp], #4)
   3bf34:	ldr	r3, [r4, #20]
   3bf38:	add	r2, r3, #1
   3bf3c:	str	r2, [r4, #20]
   3bf40:	mov	r2, #10
   3bf44:	strb	r2, [r3]
   3bf48:	ldr	r5, [r4, #32]
   3bf4c:	sub	r5, r5, #1
   3bf50:	str	r5, [r4, #32]
   3bf54:	ldrb	r3, [r4, #25]
   3bf58:	mul	r5, r5, r3
   3bf5c:	ldr	r0, [r4, #20]
   3bf60:	add	r3, r0, r5
   3bf64:	ldr	r2, [r4, #16]
   3bf68:	cmp	r2, r3
   3bf6c:	bcs	3bf80 <flatcc_json_printer_struct_vector_field@@Base+0x37c>
   3bf70:	mov	r1, r5
   3bf74:	mov	r0, r4
   3bf78:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3bf7c:	b	3bf04 <flatcc_json_printer_struct_vector_field@@Base+0x300>
   3bf80:	mov	r2, r5
   3bf84:	mov	r1, #32
   3bf88:	bl	1459c <memset@plt>
   3bf8c:	ldr	r3, [r4, #20]
   3bf90:	add	r5, r3, r5
   3bf94:	str	r5, [r4, #20]
   3bf98:	b	3bf04 <flatcc_json_printer_struct_vector_field@@Base+0x300>

0003bf9c <flatcc_json_printer_string_vector_field@@Base>:
   3bf9c:	add	r2, r2, #2
   3bfa0:	lsl	r2, r2, #1
   3bfa4:	ldr	ip, [r1, #8]
   3bfa8:	cmp	ip, r2
   3bfac:	bxle	lr
   3bfb0:	ldr	ip, [r1, #4]
   3bfb4:	ldrh	r2, [ip, r2]
   3bfb8:	cmp	r2, #0
   3bfbc:	bxeq	lr
   3bfc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3bfc4:	strd	r6, [sp, #8]
   3bfc8:	strd	r8, [sp, #16]
   3bfcc:	strd	sl, [sp, #24]
   3bfd0:	str	lr, [sp, #32]
   3bfd4:	sub	sp, sp, #4
   3bfd8:	ldr	ip, [r1]
   3bfdc:	adds	lr, ip, r2
   3bfe0:	beq	3c1fc <flatcc_json_printer_string_vector_field@@Base+0x260>
   3bfe4:	ldr	r4, [r1, #16]
   3bfe8:	add	r5, r4, #1
   3bfec:	str	r5, [r1, #16]
   3bff0:	cmp	r4, #0
   3bff4:	beq	3c00c <flatcc_json_printer_string_vector_field@@Base+0x70>
   3bff8:	ldr	r1, [r0, #20]
   3bffc:	add	r4, r1, #1
   3c000:	str	r4, [r0, #20]
   3c004:	mov	r4, #44	; 0x2c
   3c008:	strb	r4, [r1]
   3c00c:	mov	r1, r3
   3c010:	mov	r4, r0
   3c014:	ldr	r3, [ip, r2]
   3c018:	add	r6, lr, r3
   3c01c:	ldr	r5, [lr, r3]
   3c020:	ldr	r2, [sp, #40]	; 0x28
   3c024:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3c028:	ldr	r3, [r4, #32]
   3c02c:	add	r3, r3, #1
   3c030:	str	r3, [r4, #32]
   3c034:	ldr	r3, [r4, #20]
   3c038:	add	r2, r3, #1
   3c03c:	str	r2, [r4, #20]
   3c040:	mov	r2, #91	; 0x5b
   3c044:	strb	r2, [r3]
   3c048:	cmp	r5, #0
   3c04c:	beq	3c1dc <flatcc_json_printer_string_vector_field@@Base+0x240>
   3c050:	ldrb	r3, [r4, #25]
   3c054:	cmp	r3, #0
   3c058:	bne	3c0b8 <flatcc_json_printer_string_vector_field@@Base+0x11c>
   3c05c:	ldr	r2, [r4, #20]
   3c060:	ldr	r3, [r4, #16]
   3c064:	cmp	r2, r3
   3c068:	bcc	3c07c <flatcc_json_printer_string_vector_field@@Base+0xe0>
   3c06c:	ldr	r3, [r4, #44]	; 0x2c
   3c070:	mov	r1, #0
   3c074:	mov	r0, r4
   3c078:	blx	r3
   3c07c:	ldr	r3, [r6, #4]
   3c080:	add	r3, r3, #4
   3c084:	add	r1, r6, r3
   3c088:	ldr	r2, [r6, r3]
   3c08c:	add	r1, r1, #4
   3c090:	mov	r0, r4
   3c094:	bl	31ebc <flatcc_json_parser_struct_as_root@@Base+0x19e4>
   3c098:	sub	r7, r5, #2
   3c09c:	cmp	r5, #1
   3c0a0:	beq	3c1dc <flatcc_json_printer_string_vector_field@@Base+0x240>
   3c0a4:	add	r6, r6, #8
   3c0a8:	mov	r8, #44	; 0x2c
   3c0ac:	mov	r9, #0
   3c0b0:	mov	sl, #10
   3c0b4:	b	3c17c <flatcc_json_printer_string_vector_field@@Base+0x1e0>
   3c0b8:	ldr	r3, [r4, #20]
   3c0bc:	add	r2, r3, #1
   3c0c0:	str	r2, [r4, #20]
   3c0c4:	mov	r2, #10
   3c0c8:	strb	r2, [r3]
   3c0cc:	ldrb	r3, [r4, #25]
   3c0d0:	ldr	r7, [r4, #32]
   3c0d4:	mul	r7, r7, r3
   3c0d8:	ldr	r0, [r4, #20]
   3c0dc:	add	r3, r0, r7
   3c0e0:	ldr	r2, [r4, #16]
   3c0e4:	cmp	r2, r3
   3c0e8:	bcs	3c0fc <flatcc_json_printer_string_vector_field@@Base+0x160>
   3c0ec:	mov	r1, r7
   3c0f0:	mov	r0, r4
   3c0f4:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3c0f8:	b	3c07c <flatcc_json_printer_string_vector_field@@Base+0xe0>
   3c0fc:	mov	r2, r7
   3c100:	mov	r1, #32
   3c104:	bl	1459c <memset@plt>
   3c108:	ldr	r3, [r4, #20]
   3c10c:	add	r7, r3, r7
   3c110:	str	r7, [r4, #20]
   3c114:	b	3c07c <flatcc_json_printer_string_vector_field@@Base+0xe0>
   3c118:	ldr	r3, [r4, #20]
   3c11c:	add	r2, r3, #1
   3c120:	str	r2, [r4, #20]
   3c124:	strb	sl, [r3]
   3c128:	ldrb	r3, [r4, #25]
   3c12c:	ldr	fp, [r4, #32]
   3c130:	mul	fp, fp, r3
   3c134:	ldr	r0, [r4, #20]
   3c138:	add	r3, r0, fp
   3c13c:	ldr	r2, [r4, #16]
   3c140:	cmp	r2, r3
   3c144:	bcs	3c1c0 <flatcc_json_printer_string_vector_field@@Base+0x224>
   3c148:	mov	r1, fp
   3c14c:	mov	r0, r4
   3c150:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3c154:	add	r6, r6, #4
   3c158:	ldr	r3, [r5]
   3c15c:	add	r1, r5, r3
   3c160:	ldr	r2, [r5, r3]
   3c164:	add	r1, r1, #4
   3c168:	mov	r0, r4
   3c16c:	bl	31ebc <flatcc_json_parser_struct_as_root@@Base+0x19e4>
   3c170:	sub	r7, r7, #1
   3c174:	cmn	r7, #1
   3c178:	beq	3c1dc <flatcc_json_printer_string_vector_field@@Base+0x240>
   3c17c:	mov	r5, r6
   3c180:	ldr	r3, [r4, #20]
   3c184:	add	r2, r3, #1
   3c188:	str	r2, [r4, #20]
   3c18c:	strb	r8, [r3]
   3c190:	ldrb	r3, [r4, #25]
   3c194:	cmp	r3, #0
   3c198:	bne	3c118 <flatcc_json_printer_string_vector_field@@Base+0x17c>
   3c19c:	ldr	r2, [r4, #20]
   3c1a0:	ldr	r3, [r4, #16]
   3c1a4:	cmp	r2, r3
   3c1a8:	bcc	3c154 <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3c1ac:	ldr	r3, [r4, #44]	; 0x2c
   3c1b0:	mov	r1, r9
   3c1b4:	mov	r0, r4
   3c1b8:	blx	r3
   3c1bc:	b	3c154 <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3c1c0:	mov	r2, fp
   3c1c4:	mov	r1, #32
   3c1c8:	bl	1459c <memset@plt>
   3c1cc:	ldr	r3, [r4, #20]
   3c1d0:	add	fp, r3, fp
   3c1d4:	str	fp, [r4, #20]
   3c1d8:	b	3c154 <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3c1dc:	ldrb	r3, [r4, #25]
   3c1e0:	cmp	r3, #0
   3c1e4:	bne	3c218 <flatcc_json_printer_string_vector_field@@Base+0x27c>
   3c1e8:	ldr	r3, [r4, #20]
   3c1ec:	add	r2, r3, #1
   3c1f0:	str	r2, [r4, #20]
   3c1f4:	mov	r2, #93	; 0x5d
   3c1f8:	strb	r2, [r3]
   3c1fc:	add	sp, sp, #4
   3c200:	ldrd	r4, [sp]
   3c204:	ldrd	r6, [sp, #8]
   3c208:	ldrd	r8, [sp, #16]
   3c20c:	ldrd	sl, [sp, #24]
   3c210:	add	sp, sp, #32
   3c214:	pop	{pc}		; (ldr pc, [sp], #4)
   3c218:	ldr	r3, [r4, #20]
   3c21c:	add	r2, r3, #1
   3c220:	str	r2, [r4, #20]
   3c224:	mov	r2, #10
   3c228:	strb	r2, [r3]
   3c22c:	ldr	r5, [r4, #32]
   3c230:	sub	r5, r5, #1
   3c234:	str	r5, [r4, #32]
   3c238:	ldrb	r3, [r4, #25]
   3c23c:	mul	r5, r5, r3
   3c240:	ldr	r0, [r4, #20]
   3c244:	add	r3, r0, r5
   3c248:	ldr	r2, [r4, #16]
   3c24c:	cmp	r2, r3
   3c250:	bcs	3c264 <flatcc_json_printer_string_vector_field@@Base+0x2c8>
   3c254:	mov	r1, r5
   3c258:	mov	r0, r4
   3c25c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3c260:	b	3c1e8 <flatcc_json_printer_string_vector_field@@Base+0x24c>
   3c264:	mov	r2, r5
   3c268:	mov	r1, #32
   3c26c:	bl	1459c <memset@plt>
   3c270:	ldr	r3, [r4, #20]
   3c274:	add	r5, r3, r5
   3c278:	str	r5, [r4, #20]
   3c27c:	b	3c1e8 <flatcc_json_printer_string_vector_field@@Base+0x24c>

0003c280 <flatcc_json_printer_table_vector_field@@Base>:
   3c280:	add	r2, r2, #2
   3c284:	lsl	r2, r2, #1
   3c288:	ldr	ip, [r1, #8]
   3c28c:	cmp	ip, r2
   3c290:	bxle	lr
   3c294:	ldr	ip, [r1, #4]
   3c298:	ldrh	r2, [ip, r2]
   3c29c:	cmp	r2, #0
   3c2a0:	bxeq	lr
   3c2a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3c2a8:	strd	r6, [sp, #8]
   3c2ac:	strd	r8, [sp, #16]
   3c2b0:	strd	sl, [sp, #24]
   3c2b4:	str	lr, [sp, #32]
   3c2b8:	sub	sp, sp, #28
   3c2bc:	ldr	ip, [r1]
   3c2c0:	adds	lr, ip, r2
   3c2c4:	beq	3c414 <flatcc_json_printer_table_vector_field@@Base+0x194>
   3c2c8:	ldr	r4, [r1, #16]
   3c2cc:	add	r5, r4, #1
   3c2d0:	str	r5, [r1, #16]
   3c2d4:	cmp	r4, #0
   3c2d8:	beq	3c2f0 <flatcc_json_printer_table_vector_field@@Base+0x70>
   3c2dc:	ldr	r4, [r0, #20]
   3c2e0:	add	r5, r4, #1
   3c2e4:	str	r5, [r0, #20]
   3c2e8:	mov	r5, #44	; 0x2c
   3c2ec:	strb	r5, [r4]
   3c2f0:	mov	r5, r3
   3c2f4:	mov	r7, r1
   3c2f8:	mov	r4, r0
   3c2fc:	ldr	r3, [ip, r2]
   3c300:	add	r8, lr, r3
   3c304:	ldr	r6, [lr, r3]
   3c308:	ldrb	r3, [r0, #25]
   3c30c:	cmp	r3, #0
   3c310:	bne	3c430 <flatcc_json_printer_table_vector_field@@Base+0x1b0>
   3c314:	ldr	r2, [r0, #20]
   3c318:	ldr	r3, [r0, #16]
   3c31c:	cmp	r2, r3
   3c320:	bcc	3c330 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   3c324:	ldr	r3, [r0, #44]	; 0x2c
   3c328:	mov	r1, #0
   3c32c:	blx	r3
   3c330:	ldr	r3, [r4, #20]
   3c334:	mov	r2, #34	; 0x22
   3c338:	strb	r2, [r3]
   3c33c:	ldrb	r3, [r4, #26]
   3c340:	ldr	r0, [r4, #20]
   3c344:	cmp	r3, #0
   3c348:	addeq	r0, r0, #1
   3c34c:	str	r0, [r4, #20]
   3c350:	ldr	r3, [sp, #64]	; 0x40
   3c354:	add	r3, r0, r3
   3c358:	ldr	r2, [r4, #16]
   3c35c:	cmp	r2, r3
   3c360:	bls	3c490 <flatcc_json_printer_table_vector_field@@Base+0x210>
   3c364:	ldr	r2, [sp, #64]	; 0x40
   3c368:	mov	r1, r5
   3c36c:	bl	14524 <memcpy@plt>
   3c370:	ldr	r3, [r4, #20]
   3c374:	ldr	r2, [sp, #64]	; 0x40
   3c378:	add	r3, r3, r2
   3c37c:	str	r3, [r4, #20]
   3c380:	ldr	r3, [r4, #20]
   3c384:	mov	r2, #34	; 0x22
   3c388:	strb	r2, [r3]
   3c38c:	ldrb	r3, [r4, #26]
   3c390:	clz	r3, r3
   3c394:	lsr	r3, r3, #5
   3c398:	ldr	r1, [r4, #20]
   3c39c:	add	r2, r1, r3
   3c3a0:	add	r2, r2, #1
   3c3a4:	str	r2, [r4, #20]
   3c3a8:	mov	r2, #58	; 0x3a
   3c3ac:	strb	r2, [r1, r3]
   3c3b0:	ldr	r3, [r4, #20]
   3c3b4:	mov	r2, #32
   3c3b8:	strb	r2, [r3]
   3c3bc:	ldrb	r3, [r4, #25]
   3c3c0:	adds	r3, r3, #0
   3c3c4:	movne	r3, #1
   3c3c8:	ldr	r0, [r4, #20]
   3c3cc:	add	r2, r0, r3
   3c3d0:	ldr	r1, [r4, #32]
   3c3d4:	add	r1, r1, #1
   3c3d8:	str	r1, [r4, #32]
   3c3dc:	add	r2, r2, #1
   3c3e0:	str	r2, [r4, #20]
   3c3e4:	mov	r2, #91	; 0x5b
   3c3e8:	strb	r2, [r0, r3]
   3c3ec:	cmp	r6, #0
   3c3f0:	bne	3c4a4 <flatcc_json_printer_table_vector_field@@Base+0x224>
   3c3f4:	ldrb	r3, [r4, #25]
   3c3f8:	cmp	r3, #0
   3c3fc:	bne	3c6d8 <flatcc_json_printer_table_vector_field@@Base+0x458>
   3c400:	ldr	r3, [r4, #20]
   3c404:	add	r2, r3, #1
   3c408:	str	r2, [r4, #20]
   3c40c:	mov	r2, #93	; 0x5d
   3c410:	strb	r2, [r3]
   3c414:	add	sp, sp, #28
   3c418:	ldrd	r4, [sp]
   3c41c:	ldrd	r6, [sp, #8]
   3c420:	ldrd	r8, [sp, #16]
   3c424:	ldrd	sl, [sp, #24]
   3c428:	add	sp, sp, #32
   3c42c:	pop	{pc}		; (ldr pc, [sp], #4)
   3c430:	ldr	r3, [r0, #20]
   3c434:	add	r2, r3, #1
   3c438:	str	r2, [r0, #20]
   3c43c:	mov	r2, #10
   3c440:	strb	r2, [r3]
   3c444:	ldrb	r3, [r0, #25]
   3c448:	ldr	r9, [r0, #32]
   3c44c:	mul	r9, r9, r3
   3c450:	ldr	r0, [r0, #20]
   3c454:	add	r3, r0, r9
   3c458:	ldr	r2, [r4, #16]
   3c45c:	cmp	r2, r3
   3c460:	bcs	3c474 <flatcc_json_printer_table_vector_field@@Base+0x1f4>
   3c464:	mov	r1, r9
   3c468:	mov	r0, r4
   3c46c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3c470:	b	3c330 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   3c474:	mov	r2, r9
   3c478:	mov	r1, #32
   3c47c:	bl	1459c <memset@plt>
   3c480:	ldr	r3, [r4, #20]
   3c484:	add	r9, r3, r9
   3c488:	str	r9, [r4, #20]
   3c48c:	b	3c330 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   3c490:	ldr	r2, [sp, #64]	; 0x40
   3c494:	mov	r1, r5
   3c498:	mov	r0, r4
   3c49c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3c4a0:	b	3c380 <flatcc_json_printer_table_vector_field@@Base+0x100>
   3c4a4:	add	r5, r8, #4
   3c4a8:	ldr	r3, [r7, #12]
   3c4ac:	subs	r2, r3, #1
   3c4b0:	beq	3c544 <flatcc_json_printer_table_vector_field@@Base+0x2c4>
   3c4b4:	ldr	r0, [r8, #4]
   3c4b8:	add	r3, r5, r0
   3c4bc:	ldr	r1, [r4, #32]
   3c4c0:	add	r1, r1, #1
   3c4c4:	str	r1, [r4, #32]
   3c4c8:	ldr	r1, [r4, #20]
   3c4cc:	add	ip, r1, #1
   3c4d0:	str	ip, [r4, #20]
   3c4d4:	mov	ip, #123	; 0x7b
   3c4d8:	strb	ip, [r1]
   3c4dc:	mov	r1, #0
   3c4e0:	str	r1, [sp, #20]
   3c4e4:	str	r2, [sp, #16]
   3c4e8:	str	r3, [sp, #4]
   3c4ec:	ldr	r2, [r5, r0]
   3c4f0:	sub	r3, r3, r2
   3c4f4:	str	r3, [sp, #8]
   3c4f8:	ldrh	r3, [r3]
   3c4fc:	str	r3, [sp, #12]
   3c500:	add	r1, sp, #4
   3c504:	mov	r0, r4
   3c508:	ldr	r3, [sp, #68]	; 0x44
   3c50c:	blx	r3
   3c510:	ldrb	r3, [r4, #25]
   3c514:	cmp	r3, #0
   3c518:	bne	3c558 <flatcc_json_printer_table_vector_field@@Base+0x2d8>
   3c51c:	ldr	r3, [r4, #20]
   3c520:	add	r2, r3, #1
   3c524:	str	r2, [r4, #20]
   3c528:	mov	r2, #125	; 0x7d
   3c52c:	strb	r2, [r3]
   3c530:	sub	r6, r6, #1
   3c534:	mov	r9, #44	; 0x2c
   3c538:	mov	fp, #123	; 0x7b
   3c53c:	mov	sl, #0
   3c540:	b	3c600 <flatcc_json_printer_table_vector_field@@Base+0x380>
   3c544:	ldr	r3, [r4, #36]	; 0x24
   3c548:	cmp	r3, #0
   3c54c:	moveq	r3, #2
   3c550:	streq	r3, [r4, #36]	; 0x24
   3c554:	b	3c530 <flatcc_json_printer_table_vector_field@@Base+0x2b0>
   3c558:	ldr	r3, [r4, #20]
   3c55c:	add	r2, r3, #1
   3c560:	str	r2, [r4, #20]
   3c564:	mov	r2, #10
   3c568:	strb	r2, [r3]
   3c56c:	ldr	r8, [r4, #32]
   3c570:	sub	r8, r8, #1
   3c574:	str	r8, [r4, #32]
   3c578:	ldrb	r3, [r4, #25]
   3c57c:	mul	r8, r8, r3
   3c580:	ldr	r0, [r4, #20]
   3c584:	add	r3, r0, r8
   3c588:	ldr	r2, [r4, #16]
   3c58c:	cmp	r2, r3
   3c590:	bcs	3c5a4 <flatcc_json_printer_table_vector_field@@Base+0x324>
   3c594:	mov	r1, r8
   3c598:	mov	r0, r4
   3c59c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3c5a0:	b	3c51c <flatcc_json_printer_table_vector_field@@Base+0x29c>
   3c5a4:	mov	r2, r8
   3c5a8:	mov	r1, #32
   3c5ac:	bl	1459c <memset@plt>
   3c5b0:	ldr	r3, [r4, #20]
   3c5b4:	add	r8, r3, r8
   3c5b8:	str	r8, [r4, #20]
   3c5bc:	b	3c51c <flatcc_json_printer_table_vector_field@@Base+0x29c>
   3c5c0:	ldr	r3, [r4, #36]	; 0x24
   3c5c4:	cmp	r3, #0
   3c5c8:	moveq	r3, #2
   3c5cc:	streq	r3, [r4, #36]	; 0x24
   3c5d0:	b	3c600 <flatcc_json_printer_table_vector_field@@Base+0x380>
   3c5d4:	mov	r2, r8
   3c5d8:	mov	r1, #32
   3c5dc:	bl	1459c <memset@plt>
   3c5e0:	ldr	r3, [r4, #20]
   3c5e4:	add	r8, r3, r8
   3c5e8:	str	r8, [r4, #20]
   3c5ec:	ldr	r3, [r4, #20]
   3c5f0:	add	r2, r3, #1
   3c5f4:	str	r2, [r4, #20]
   3c5f8:	mov	r2, #125	; 0x7d
   3c5fc:	strb	r2, [r3]
   3c600:	sub	r6, r6, #1
   3c604:	cmn	r6, #1
   3c608:	beq	3c3f4 <flatcc_json_printer_table_vector_field@@Base+0x174>
   3c60c:	add	r5, r5, #4
   3c610:	ldr	r3, [r4, #20]
   3c614:	add	r2, r3, #1
   3c618:	str	r2, [r4, #20]
   3c61c:	strb	r9, [r3]
   3c620:	ldr	r3, [r7, #12]
   3c624:	subs	r3, r3, #1
   3c628:	beq	3c5c0 <flatcc_json_printer_table_vector_field@@Base+0x340>
   3c62c:	ldr	r0, [r5]
   3c630:	add	r2, r5, r0
   3c634:	ldr	r1, [r4, #32]
   3c638:	add	r1, r1, #1
   3c63c:	str	r1, [r4, #32]
   3c640:	ldr	r1, [r4, #20]
   3c644:	add	ip, r1, #1
   3c648:	str	ip, [r4, #20]
   3c64c:	strb	fp, [r1]
   3c650:	str	sl, [sp, #20]
   3c654:	str	r3, [sp, #16]
   3c658:	str	r2, [sp, #4]
   3c65c:	ldr	r3, [r5, r0]
   3c660:	sub	r3, r2, r3
   3c664:	str	r3, [sp, #8]
   3c668:	ldrh	r3, [r3]
   3c66c:	str	r3, [sp, #12]
   3c670:	add	r1, sp, #4
   3c674:	mov	r0, r4
   3c678:	ldr	r3, [sp, #68]	; 0x44
   3c67c:	blx	r3
   3c680:	ldrb	r3, [r4, #25]
   3c684:	cmp	r3, #0
   3c688:	beq	3c5ec <flatcc_json_printer_table_vector_field@@Base+0x36c>
   3c68c:	ldr	r3, [r4, #20]
   3c690:	add	r2, r3, #1
   3c694:	str	r2, [r4, #20]
   3c698:	mov	r2, #10
   3c69c:	strb	r2, [r3]
   3c6a0:	ldr	r8, [r4, #32]
   3c6a4:	sub	r8, r8, #1
   3c6a8:	str	r8, [r4, #32]
   3c6ac:	ldrb	r3, [r4, #25]
   3c6b0:	mul	r8, r8, r3
   3c6b4:	ldr	r0, [r4, #20]
   3c6b8:	add	r3, r0, r8
   3c6bc:	ldr	r2, [r4, #16]
   3c6c0:	cmp	r2, r3
   3c6c4:	bcs	3c5d4 <flatcc_json_printer_table_vector_field@@Base+0x354>
   3c6c8:	mov	r1, r8
   3c6cc:	mov	r0, r4
   3c6d0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3c6d4:	b	3c5ec <flatcc_json_printer_table_vector_field@@Base+0x36c>
   3c6d8:	ldr	r3, [r4, #20]
   3c6dc:	add	r2, r3, #1
   3c6e0:	str	r2, [r4, #20]
   3c6e4:	mov	r2, #10
   3c6e8:	strb	r2, [r3]
   3c6ec:	ldr	r5, [r4, #32]
   3c6f0:	sub	r5, r5, #1
   3c6f4:	str	r5, [r4, #32]
   3c6f8:	ldrb	r3, [r4, #25]
   3c6fc:	mul	r5, r5, r3
   3c700:	ldr	r0, [r4, #20]
   3c704:	add	r3, r0, r5
   3c708:	ldr	r2, [r4, #16]
   3c70c:	cmp	r2, r3
   3c710:	bcs	3c724 <flatcc_json_printer_table_vector_field@@Base+0x4a4>
   3c714:	mov	r1, r5
   3c718:	mov	r0, r4
   3c71c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3c720:	b	3c400 <flatcc_json_printer_table_vector_field@@Base+0x180>
   3c724:	mov	r2, r5
   3c728:	mov	r1, #32
   3c72c:	bl	1459c <memset@plt>
   3c730:	ldr	r3, [r4, #20]
   3c734:	add	r5, r3, r5
   3c738:	str	r5, [r4, #20]
   3c73c:	b	3c400 <flatcc_json_printer_table_vector_field@@Base+0x180>

0003c740 <flatcc_json_printer_union_vector_field@@Base>:
   3c740:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3c744:	strd	r6, [sp, #8]
   3c748:	strd	r8, [sp, #16]
   3c74c:	strd	sl, [sp, #24]
   3c750:	str	lr, [sp, #32]
   3c754:	sub	sp, sp, #140	; 0x8c
   3c758:	mov	r4, r0
   3c75c:	mov	r5, r1
   3c760:	str	r2, [sp, #12]
   3c764:	str	r3, [sp, #8]
   3c768:	ldr	r6, [sp, #176]	; 0xb0
   3c76c:	add	r3, r2, #1
   3c770:	lsl	r3, r3, #1
   3c774:	ldr	r2, [r1, #8]
   3c778:	cmp	r3, r2
   3c77c:	movge	r7, #0
   3c780:	bge	3c79c <flatcc_json_printer_union_vector_field@@Base+0x5c>
   3c784:	ldr	r1, [r1, #4]
   3c788:	ldrh	r1, [r1, r3]
   3c78c:	cmp	r1, #0
   3c790:	ldrne	r7, [r5]
   3c794:	addne	r7, r7, r1
   3c798:	moveq	r7, #0
   3c79c:	add	r3, r3, #2
   3c7a0:	cmp	r3, r2
   3c7a4:	bge	3ca6c <flatcc_json_printer_union_vector_field@@Base+0x32c>
   3c7a8:	ldr	r2, [r5, #4]
   3c7ac:	ldrh	r9, [r2, r3]
   3c7b0:	cmp	r9, #0
   3c7b4:	beq	3ca6c <flatcc_json_printer_union_vector_field@@Base+0x32c>
   3c7b8:	ldr	sl, [r5]
   3c7bc:	add	fp, sl, r9
   3c7c0:	ldr	r3, [r5, #12]
   3c7c4:	str	r3, [sp, #20]
   3c7c8:	cmp	r6, #100	; 0x64
   3c7cc:	bgt	3ca7c <flatcc_json_printer_union_vector_field@@Base+0x33c>
   3c7d0:	add	r8, sp, #28
   3c7d4:	mov	r2, r6
   3c7d8:	ldr	r1, [sp, #8]
   3c7dc:	mov	r0, r8
   3c7e0:	bl	14524 <memcpy@plt>
   3c7e4:	add	r2, r8, r6
   3c7e8:	movw	r3, #19660	; 0x4ccc
   3c7ec:	movt	r3, #4
   3c7f0:	ldr	r1, [r3]
   3c7f4:	str	r1, [r8, r6]
   3c7f8:	ldrb	r3, [r3, #4]
   3c7fc:	strb	r3, [r2, #4]
   3c800:	cmp	fp, #0
   3c804:	cmpne	r7, #0
   3c808:	bne	3c828 <flatcc_json_printer_union_vector_field@@Base+0xe8>
   3c80c:	add	sp, sp, #140	; 0x8c
   3c810:	ldrd	r4, [sp]
   3c814:	ldrd	r6, [sp, #8]
   3c818:	ldrd	r8, [sp, #16]
   3c81c:	ldrd	sl, [sp, #24]
   3c820:	add	sp, sp, #32
   3c824:	pop	{pc}		; (ldr pc, [sp], #4)
   3c828:	ldr	r3, [sp, #180]	; 0xb4
   3c82c:	str	r3, [sp, #4]
   3c830:	add	r3, r6, #5
   3c834:	str	r3, [sp]
   3c838:	add	r3, sp, #28
   3c83c:	ldr	r2, [sp, #12]
   3c840:	sub	r2, r2, #1
   3c844:	mov	r1, r5
   3c848:	mov	r0, r4
   3c84c:	bl	3a174 <flatcc_json_printer_utype_enum_vector_field@@Base>
   3c850:	ldr	r3, [r5, #16]
   3c854:	add	r2, r3, #1
   3c858:	str	r2, [r5, #16]
   3c85c:	cmp	r3, #0
   3c860:	beq	3c878 <flatcc_json_printer_union_vector_field@@Base+0x138>
   3c864:	ldr	r3, [r4, #20]
   3c868:	add	r2, r3, #1
   3c86c:	str	r2, [r4, #20]
   3c870:	mov	r2, #44	; 0x2c
   3c874:	strb	r2, [r3]
   3c878:	ldr	r3, [sl, r9]
   3c87c:	add	r5, fp, r3
   3c880:	ldr	r8, [r7]
   3c884:	ldr	r9, [fp, r3]
   3c888:	mov	r2, r6
   3c88c:	ldr	r1, [sp, #8]
   3c890:	mov	r0, r4
   3c894:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3c898:	ldr	r3, [r4, #32]
   3c89c:	add	r3, r3, #1
   3c8a0:	str	r3, [r4, #32]
   3c8a4:	ldr	r3, [r4, #20]
   3c8a8:	add	r2, r3, #1
   3c8ac:	str	r2, [r4, #20]
   3c8b0:	mov	r2, #91	; 0x5b
   3c8b4:	strb	r2, [r3]
   3c8b8:	cmp	r9, #0
   3c8bc:	beq	3c9e0 <flatcc_json_printer_union_vector_field@@Base+0x2a0>
   3c8c0:	add	r7, r7, r8
   3c8c4:	add	r5, r5, #4
   3c8c8:	ldrb	r3, [r7, #4]
   3c8cc:	cmp	r3, #0
   3c8d0:	beq	3c908 <flatcc_json_printer_union_vector_field@@Base+0x1c8>
   3c8d4:	strb	r3, [sp, #24]
   3c8d8:	str	r5, [sp, #16]
   3c8dc:	add	r1, sp, #16
   3c8e0:	mov	r0, r4
   3c8e4:	ldr	r3, [sp, #184]	; 0xb8
   3c8e8:	blx	r3
   3c8ec:	add	r6, r7, #4
   3c8f0:	add	r9, r9, #3
   3c8f4:	add	r7, r7, r9
   3c8f8:	mov	r8, #44	; 0x2c
   3c8fc:	mov	sl, #110	; 0x6e
   3c900:	mov	r9, #117	; 0x75
   3c904:	b	3c99c <flatcc_json_printer_union_vector_field@@Base+0x25c>
   3c908:	ldr	r3, [r4, #20]
   3c90c:	add	r2, r3, #1
   3c910:	str	r2, [r4, #20]
   3c914:	mov	r2, #110	; 0x6e
   3c918:	strb	r2, [r3]
   3c91c:	ldr	r3, [r4, #20]
   3c920:	add	r2, r3, #1
   3c924:	str	r2, [r4, #20]
   3c928:	mov	r2, #117	; 0x75
   3c92c:	strb	r2, [r3]
   3c930:	ldr	r3, [r4, #20]
   3c934:	add	r2, r3, #1
   3c938:	str	r2, [r4, #20]
   3c93c:	mov	r2, #108	; 0x6c
   3c940:	strb	r2, [r3]
   3c944:	ldr	r3, [r4, #20]
   3c948:	add	r1, r3, #1
   3c94c:	str	r1, [r4, #20]
   3c950:	strb	r2, [r3]
   3c954:	b	3c8ec <flatcc_json_printer_union_vector_field@@Base+0x1ac>
   3c958:	ldr	r3, [r4, #20]
   3c95c:	add	r2, r3, #1
   3c960:	str	r2, [r4, #20]
   3c964:	strb	sl, [r3]
   3c968:	ldr	r3, [r4, #20]
   3c96c:	add	r2, r3, #1
   3c970:	str	r2, [r4, #20]
   3c974:	strb	r9, [r3]
   3c978:	ldr	r3, [r4, #20]
   3c97c:	add	r2, r3, #1
   3c980:	str	r2, [r4, #20]
   3c984:	mov	r2, #108	; 0x6c
   3c988:	strb	r2, [r3]
   3c98c:	ldr	r3, [r4, #20]
   3c990:	add	r1, r3, #1
   3c994:	str	r1, [r4, #20]
   3c998:	strb	r2, [r3]
   3c99c:	cmp	r6, r7
   3c9a0:	beq	3c9e0 <flatcc_json_printer_union_vector_field@@Base+0x2a0>
   3c9a4:	add	r5, r5, #4
   3c9a8:	ldrb	r2, [r6, #1]!
   3c9ac:	ldr	r3, [r4, #20]
   3c9b0:	add	r1, r3, #1
   3c9b4:	str	r1, [r4, #20]
   3c9b8:	strb	r8, [r3]
   3c9bc:	cmp	r2, #0
   3c9c0:	beq	3c958 <flatcc_json_printer_union_vector_field@@Base+0x218>
   3c9c4:	strb	r2, [sp, #24]
   3c9c8:	str	r5, [sp, #16]
   3c9cc:	add	r1, sp, #16
   3c9d0:	mov	r0, r4
   3c9d4:	ldr	r3, [sp, #184]	; 0xb8
   3c9d8:	blx	r3
   3c9dc:	b	3c99c <flatcc_json_printer_union_vector_field@@Base+0x25c>
   3c9e0:	ldrb	r3, [r4, #25]
   3c9e4:	cmp	r3, #0
   3c9e8:	bne	3ca04 <flatcc_json_printer_union_vector_field@@Base+0x2c4>
   3c9ec:	ldr	r3, [r4, #20]
   3c9f0:	add	r2, r3, #1
   3c9f4:	str	r2, [r4, #20]
   3c9f8:	mov	r2, #93	; 0x5d
   3c9fc:	strb	r2, [r3]
   3ca00:	b	3c80c <flatcc_json_printer_union_vector_field@@Base+0xcc>
   3ca04:	ldr	r3, [r4, #20]
   3ca08:	add	r2, r3, #1
   3ca0c:	str	r2, [r4, #20]
   3ca10:	mov	r2, #10
   3ca14:	strb	r2, [r3]
   3ca18:	ldr	r5, [r4, #32]
   3ca1c:	sub	r5, r5, #1
   3ca20:	str	r5, [r4, #32]
   3ca24:	ldrb	r3, [r4, #25]
   3ca28:	mul	r5, r5, r3
   3ca2c:	ldr	r0, [r4, #20]
   3ca30:	add	r3, r0, r5
   3ca34:	ldr	r2, [r4, #16]
   3ca38:	cmp	r2, r3
   3ca3c:	bcs	3ca50 <flatcc_json_printer_union_vector_field@@Base+0x310>
   3ca40:	mov	r1, r5
   3ca44:	mov	r0, r4
   3ca48:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3ca4c:	b	3c9ec <flatcc_json_printer_union_vector_field@@Base+0x2ac>
   3ca50:	mov	r2, r5
   3ca54:	mov	r1, #32
   3ca58:	bl	1459c <memset@plt>
   3ca5c:	ldr	r3, [r4, #20]
   3ca60:	add	r5, r3, r5
   3ca64:	str	r5, [r4, #20]
   3ca68:	b	3c9ec <flatcc_json_printer_union_vector_field@@Base+0x2ac>
   3ca6c:	ldr	r3, [r5, #12]
   3ca70:	str	r3, [sp, #20]
   3ca74:	cmp	r6, #100	; 0x64
   3ca78:	ble	3c80c <flatcc_json_printer_union_vector_field@@Base+0xcc>
   3ca7c:	ldr	r3, [r4, #36]	; 0x24
   3ca80:	cmp	r3, #0
   3ca84:	moveq	r3, #1
   3ca88:	streq	r3, [r4, #36]	; 0x24
   3ca8c:	ldr	r3, [pc, #20]	; 3caa8 <flatcc_json_printer_union_vector_field@@Base+0x368>
   3ca90:	movw	r2, #843	; 0x34b
   3ca94:	movw	r1, #19276	; 0x4b4c
   3ca98:	movt	r1, #4
   3ca9c:	movw	r0, #19632	; 0x4cb0
   3caa0:	movt	r0, #4
   3caa4:	bl	145f0 <__assert_fail@plt>
   3caa8:	andeq	r4, r4, ip, ror sl

0003caac <flatcc_json_printer_table_field@@Base>:
   3caac:	add	r2, r2, #2
   3cab0:	lsl	r2, r2, #1
   3cab4:	ldr	ip, [r1, #8]
   3cab8:	cmp	r2, ip
   3cabc:	bxge	lr
   3cac0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3cac4:	strd	r6, [sp, #8]
   3cac8:	strd	r8, [sp, #16]
   3cacc:	str	sl, [sp, #24]
   3cad0:	str	lr, [sp, #28]
   3cad4:	sub	sp, sp, #24
   3cad8:	ldr	ip, [r1, #4]
   3cadc:	ldrh	r6, [ip, r2]
   3cae0:	cmp	r6, #0
   3cae4:	beq	3cc78 <flatcc_json_printer_table_field@@Base+0x1cc>
   3cae8:	ldr	r7, [r1]
   3caec:	adds	r8, r7, r6
   3caf0:	beq	3cc78 <flatcc_json_printer_table_field@@Base+0x1cc>
   3caf4:	ldr	r2, [r1, #16]
   3caf8:	add	ip, r2, #1
   3cafc:	str	ip, [r1, #16]
   3cb00:	cmp	r2, #0
   3cb04:	beq	3cb1c <flatcc_json_printer_table_field@@Base+0x70>
   3cb08:	ldr	r2, [r0, #20]
   3cb0c:	add	ip, r2, #1
   3cb10:	str	ip, [r0, #20]
   3cb14:	mov	ip, #44	; 0x2c
   3cb18:	strb	ip, [r2]
   3cb1c:	mov	r9, r3
   3cb20:	mov	r5, r1
   3cb24:	mov	r4, r0
   3cb28:	ldrb	r3, [r0, #25]
   3cb2c:	cmp	r3, #0
   3cb30:	bne	3cc94 <flatcc_json_printer_table_field@@Base+0x1e8>
   3cb34:	ldr	r2, [r0, #20]
   3cb38:	ldr	r3, [r0, #16]
   3cb3c:	cmp	r2, r3
   3cb40:	bcc	3cb50 <flatcc_json_printer_table_field@@Base+0xa4>
   3cb44:	ldr	r3, [r0, #44]	; 0x2c
   3cb48:	mov	r1, #0
   3cb4c:	blx	r3
   3cb50:	ldr	r3, [r4, #20]
   3cb54:	mov	r2, #34	; 0x22
   3cb58:	strb	r2, [r3]
   3cb5c:	ldrb	r3, [r4, #26]
   3cb60:	ldr	r0, [r4, #20]
   3cb64:	cmp	r3, #0
   3cb68:	addeq	r0, r0, #1
   3cb6c:	str	r0, [r4, #20]
   3cb70:	ldr	r3, [sp, #56]	; 0x38
   3cb74:	add	r3, r0, r3
   3cb78:	ldr	r2, [r4, #16]
   3cb7c:	cmp	r2, r3
   3cb80:	bls	3ccf4 <flatcc_json_printer_table_field@@Base+0x248>
   3cb84:	ldr	r2, [sp, #56]	; 0x38
   3cb88:	mov	r1, r9
   3cb8c:	bl	14524 <memcpy@plt>
   3cb90:	ldr	r3, [r4, #20]
   3cb94:	ldr	r2, [sp, #56]	; 0x38
   3cb98:	add	r3, r3, r2
   3cb9c:	str	r3, [r4, #20]
   3cba0:	ldr	r3, [r4, #20]
   3cba4:	mov	r2, #34	; 0x22
   3cba8:	strb	r2, [r3]
   3cbac:	ldrb	r3, [r4, #26]
   3cbb0:	clz	r3, r3
   3cbb4:	lsr	r3, r3, #5
   3cbb8:	ldr	r1, [r4, #20]
   3cbbc:	add	r2, r1, r3
   3cbc0:	add	r2, r2, #1
   3cbc4:	str	r2, [r4, #20]
   3cbc8:	mov	r2, #58	; 0x3a
   3cbcc:	strb	r2, [r1, r3]
   3cbd0:	ldr	r3, [r4, #20]
   3cbd4:	mov	r2, #32
   3cbd8:	strb	r2, [r3]
   3cbdc:	ldrb	r0, [r4, #25]
   3cbe0:	adds	r0, r0, #0
   3cbe4:	movne	r0, #1
   3cbe8:	ldr	lr, [r4, #20]
   3cbec:	add	r3, lr, r0
   3cbf0:	str	r3, [r4, #20]
   3cbf4:	ldr	r2, [r5, #12]
   3cbf8:	subs	r1, r2, #1
   3cbfc:	beq	3cd08 <flatcc_json_printer_table_field@@Base+0x25c>
   3cc00:	ldr	r5, [r7, r6]
   3cc04:	add	r2, r8, r5
   3cc08:	ldr	ip, [r4, #32]
   3cc0c:	add	ip, ip, #1
   3cc10:	str	ip, [r4, #32]
   3cc14:	add	r3, r3, #1
   3cc18:	str	r3, [r4, #20]
   3cc1c:	mov	r3, #123	; 0x7b
   3cc20:	strb	r3, [lr, r0]
   3cc24:	mov	r3, #0
   3cc28:	str	r3, [sp, #20]
   3cc2c:	str	r1, [sp, #16]
   3cc30:	str	r2, [sp, #4]
   3cc34:	ldr	r3, [r8, r5]
   3cc38:	sub	r3, r2, r3
   3cc3c:	str	r3, [sp, #8]
   3cc40:	ldrh	r3, [r3]
   3cc44:	str	r3, [sp, #12]
   3cc48:	add	r1, sp, #4
   3cc4c:	mov	r0, r4
   3cc50:	ldr	r3, [sp, #60]	; 0x3c
   3cc54:	blx	r3
   3cc58:	ldrb	r3, [r4, #25]
   3cc5c:	cmp	r3, #0
   3cc60:	bne	3cd1c <flatcc_json_printer_table_field@@Base+0x270>
   3cc64:	ldr	r3, [r4, #20]
   3cc68:	add	r2, r3, #1
   3cc6c:	str	r2, [r4, #20]
   3cc70:	mov	r2, #125	; 0x7d
   3cc74:	strb	r2, [r3]
   3cc78:	add	sp, sp, #24
   3cc7c:	ldrd	r4, [sp]
   3cc80:	ldrd	r6, [sp, #8]
   3cc84:	ldrd	r8, [sp, #16]
   3cc88:	ldr	sl, [sp, #24]
   3cc8c:	add	sp, sp, #28
   3cc90:	pop	{pc}		; (ldr pc, [sp], #4)
   3cc94:	ldr	r3, [r0, #20]
   3cc98:	add	r2, r3, #1
   3cc9c:	str	r2, [r0, #20]
   3cca0:	mov	r2, #10
   3cca4:	strb	r2, [r3]
   3cca8:	ldrb	r3, [r0, #25]
   3ccac:	ldr	sl, [r0, #32]
   3ccb0:	mul	sl, sl, r3
   3ccb4:	ldr	r0, [r0, #20]
   3ccb8:	add	r3, r0, sl
   3ccbc:	ldr	r2, [r4, #16]
   3ccc0:	cmp	r2, r3
   3ccc4:	bcs	3ccd8 <flatcc_json_printer_table_field@@Base+0x22c>
   3ccc8:	mov	r1, sl
   3cccc:	mov	r0, r4
   3ccd0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3ccd4:	b	3cb50 <flatcc_json_printer_table_field@@Base+0xa4>
   3ccd8:	mov	r2, sl
   3ccdc:	mov	r1, #32
   3cce0:	bl	1459c <memset@plt>
   3cce4:	ldr	r3, [r4, #20]
   3cce8:	add	sl, r3, sl
   3ccec:	str	sl, [r4, #20]
   3ccf0:	b	3cb50 <flatcc_json_printer_table_field@@Base+0xa4>
   3ccf4:	ldr	r2, [sp, #56]	; 0x38
   3ccf8:	mov	r1, r9
   3ccfc:	mov	r0, r4
   3cd00:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3cd04:	b	3cba0 <flatcc_json_printer_table_field@@Base+0xf4>
   3cd08:	ldr	r3, [r4, #36]	; 0x24
   3cd0c:	cmp	r3, #0
   3cd10:	moveq	r3, #2
   3cd14:	streq	r3, [r4, #36]	; 0x24
   3cd18:	b	3cc78 <flatcc_json_printer_table_field@@Base+0x1cc>
   3cd1c:	ldr	r3, [r4, #20]
   3cd20:	add	r2, r3, #1
   3cd24:	str	r2, [r4, #20]
   3cd28:	mov	r2, #10
   3cd2c:	strb	r2, [r3]
   3cd30:	ldr	r5, [r4, #32]
   3cd34:	sub	r5, r5, #1
   3cd38:	str	r5, [r4, #32]
   3cd3c:	ldrb	r3, [r4, #25]
   3cd40:	mul	r5, r5, r3
   3cd44:	ldr	r0, [r4, #20]
   3cd48:	add	r3, r0, r5
   3cd4c:	ldr	r2, [r4, #16]
   3cd50:	cmp	r2, r3
   3cd54:	bcs	3cd68 <flatcc_json_printer_table_field@@Base+0x2bc>
   3cd58:	mov	r1, r5
   3cd5c:	mov	r0, r4
   3cd60:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3cd64:	b	3cc64 <flatcc_json_printer_table_field@@Base+0x1b8>
   3cd68:	mov	r2, r5
   3cd6c:	mov	r1, #32
   3cd70:	bl	1459c <memset@plt>
   3cd74:	ldr	r3, [r4, #20]
   3cd78:	add	r5, r3, r5
   3cd7c:	str	r5, [r4, #20]
   3cd80:	b	3cc64 <flatcc_json_printer_table_field@@Base+0x1b8>

0003cd84 <flatcc_json_printer_union_field@@Base>:
   3cd84:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3cd88:	strd	r6, [sp, #8]
   3cd8c:	strd	r8, [sp, #16]
   3cd90:	str	sl, [sp, #24]
   3cd94:	str	lr, [sp, #28]
   3cd98:	sub	sp, sp, #16
   3cd9c:	ldr	r6, [sp, #48]	; 0x30
   3cda0:	add	r2, r2, #1
   3cda4:	lsl	r2, r2, #1
   3cda8:	ldr	lr, [r1, #8]
   3cdac:	cmp	r2, lr
   3cdb0:	movge	ip, #0
   3cdb4:	bge	3cdd0 <flatcc_json_printer_union_field@@Base+0x4c>
   3cdb8:	ldr	ip, [r1, #4]
   3cdbc:	ldrh	r4, [ip, r2]
   3cdc0:	cmp	r4, #0
   3cdc4:	ldrne	ip, [r1]
   3cdc8:	addne	ip, ip, r4
   3cdcc:	moveq	ip, #0
   3cdd0:	add	r2, r2, #2
   3cdd4:	cmp	r2, lr
   3cdd8:	bge	3cf50 <flatcc_json_printer_union_field@@Base+0x1cc>
   3cddc:	ldr	lr, [r1, #4]
   3cde0:	ldrh	r2, [lr, r2]
   3cde4:	cmp	r2, #0
   3cde8:	beq	3cf50 <flatcc_json_printer_union_field@@Base+0x1cc>
   3cdec:	ldr	r8, [r1]
   3cdf0:	adds	r8, r8, r2
   3cdf4:	moveq	r2, #1
   3cdf8:	movne	r2, #0
   3cdfc:	cmp	ip, #0
   3ce00:	moveq	r2, #1
   3ce04:	cmp	r2, #0
   3ce08:	bne	3cf50 <flatcc_json_printer_union_field@@Base+0x1cc>
   3ce0c:	ldrb	r9, [ip]
   3ce10:	ldr	r2, [r1, #16]
   3ce14:	add	ip, r2, #1
   3ce18:	str	ip, [r1, #16]
   3ce1c:	cmp	r2, #0
   3ce20:	beq	3ce38 <flatcc_json_printer_union_field@@Base+0xb4>
   3ce24:	ldr	r2, [r0, #20]
   3ce28:	add	ip, r2, #1
   3ce2c:	str	ip, [r0, #20]
   3ce30:	mov	ip, #44	; 0x2c
   3ce34:	strb	ip, [r2]
   3ce38:	mov	r7, r3
   3ce3c:	mov	r5, r1
   3ce40:	mov	r4, r0
   3ce44:	ldrb	r3, [r0, #25]
   3ce48:	cmp	r3, #0
   3ce4c:	bne	3cf6c <flatcc_json_printer_union_field@@Base+0x1e8>
   3ce50:	ldr	r2, [r0, #20]
   3ce54:	ldr	r3, [r0, #16]
   3ce58:	cmp	r2, r3
   3ce5c:	bcc	3ce6c <flatcc_json_printer_union_field@@Base+0xe8>
   3ce60:	ldr	r3, [r0, #44]	; 0x2c
   3ce64:	mov	r1, #0
   3ce68:	blx	r3
   3ce6c:	ldr	r3, [r4, #20]
   3ce70:	mov	r2, #34	; 0x22
   3ce74:	strb	r2, [r3]
   3ce78:	ldrb	r3, [r4, #26]
   3ce7c:	ldr	r0, [r4, #20]
   3ce80:	cmp	r3, #0
   3ce84:	addeq	r0, r0, #1
   3ce88:	str	r0, [r4, #20]
   3ce8c:	add	r3, r0, r6
   3ce90:	ldr	r2, [r4, #16]
   3ce94:	cmp	r2, r3
   3ce98:	bls	3cfcc <flatcc_json_printer_union_field@@Base+0x248>
   3ce9c:	mov	r2, r6
   3cea0:	mov	r1, r7
   3cea4:	bl	14524 <memcpy@plt>
   3cea8:	ldr	r3, [r4, #20]
   3ceac:	add	r3, r3, r6
   3ceb0:	str	r3, [r4, #20]
   3ceb4:	ldr	r3, [r4, #20]
   3ceb8:	add	r2, r3, #5
   3cebc:	ldr	r1, [r4, #16]
   3cec0:	cmp	r1, r2
   3cec4:	bhi	3cfe0 <flatcc_json_printer_union_field@@Base+0x25c>
   3cec8:	mov	r2, #5
   3cecc:	movw	r1, #19660	; 0x4ccc
   3ced0:	movt	r1, #4
   3ced4:	mov	r0, r4
   3ced8:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3cedc:	ldr	r3, [r4, #20]
   3cee0:	mov	r2, #34	; 0x22
   3cee4:	strb	r2, [r3]
   3cee8:	ldrb	r3, [r4, #26]
   3ceec:	clz	r3, r3
   3cef0:	lsr	r3, r3, #5
   3cef4:	ldr	r1, [r4, #20]
   3cef8:	add	r2, r1, r3
   3cefc:	add	r2, r2, #1
   3cf00:	str	r2, [r4, #20]
   3cf04:	mov	r2, #58	; 0x3a
   3cf08:	strb	r2, [r1, r3]
   3cf0c:	ldr	r3, [r4, #20]
   3cf10:	mov	r2, #32
   3cf14:	strb	r2, [r3]
   3cf18:	ldrb	r3, [r4, #25]
   3cf1c:	ldr	r1, [r4, #20]
   3cf20:	cmp	r3, #0
   3cf24:	addne	r1, r1, #1
   3cf28:	str	r1, [r4, #20]
   3cf2c:	ldrb	r3, [r4, #27]
   3cf30:	cmp	r3, #0
   3cf34:	bne	3d008 <flatcc_json_printer_union_field@@Base+0x284>
   3cf38:	mov	r1, r9
   3cf3c:	mov	r0, r4
   3cf40:	ldr	r3, [sp, #52]	; 0x34
   3cf44:	blx	r3
   3cf48:	cmp	r9, #0
   3cf4c:	bne	3d020 <flatcc_json_printer_union_field@@Base+0x29c>
   3cf50:	add	sp, sp, #16
   3cf54:	ldrd	r4, [sp]
   3cf58:	ldrd	r6, [sp, #8]
   3cf5c:	ldrd	r8, [sp, #16]
   3cf60:	ldr	sl, [sp, #24]
   3cf64:	add	sp, sp, #28
   3cf68:	pop	{pc}		; (ldr pc, [sp], #4)
   3cf6c:	ldr	r3, [r0, #20]
   3cf70:	add	r2, r3, #1
   3cf74:	str	r2, [r0, #20]
   3cf78:	mov	r2, #10
   3cf7c:	strb	r2, [r3]
   3cf80:	ldrb	r3, [r0, #25]
   3cf84:	ldr	sl, [r0, #32]
   3cf88:	mul	sl, sl, r3
   3cf8c:	ldr	r0, [r0, #20]
   3cf90:	add	r3, r0, sl
   3cf94:	ldr	r2, [r4, #16]
   3cf98:	cmp	r2, r3
   3cf9c:	bcs	3cfb0 <flatcc_json_printer_union_field@@Base+0x22c>
   3cfa0:	mov	r1, sl
   3cfa4:	mov	r0, r4
   3cfa8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3cfac:	b	3ce6c <flatcc_json_printer_union_field@@Base+0xe8>
   3cfb0:	mov	r2, sl
   3cfb4:	mov	r1, #32
   3cfb8:	bl	1459c <memset@plt>
   3cfbc:	ldr	r3, [r4, #20]
   3cfc0:	add	sl, r3, sl
   3cfc4:	str	sl, [r4, #20]
   3cfc8:	b	3ce6c <flatcc_json_printer_union_field@@Base+0xe8>
   3cfcc:	mov	r2, r6
   3cfd0:	mov	r1, r7
   3cfd4:	mov	r0, r4
   3cfd8:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3cfdc:	b	3ceb4 <flatcc_json_printer_union_field@@Base+0x130>
   3cfe0:	movw	r2, #19660	; 0x4ccc
   3cfe4:	movt	r2, #4
   3cfe8:	ldr	r1, [r2]
   3cfec:	str	r1, [r3]
   3cff0:	ldrb	r2, [r2, #4]
   3cff4:	strb	r2, [r3, #4]
   3cff8:	ldr	r3, [r4, #20]
   3cffc:	add	r3, r3, #5
   3d000:	str	r3, [r4, #20]
   3d004:	b	3cedc <flatcc_json_printer_union_field@@Base+0x158>
   3d008:	mov	r0, r9
   3d00c:	bl	305c8 <flatcc_json_parser_struct_as_root@@Base+0xf0>
   3d010:	ldr	r3, [r4, #20]
   3d014:	add	r0, r3, r0
   3d018:	str	r0, [r4, #20]
   3d01c:	b	3cf48 <flatcc_json_printer_union_field@@Base+0x1c4>
   3d020:	ldr	r3, [r4, #20]
   3d024:	add	r2, r3, #1
   3d028:	str	r2, [r4, #20]
   3d02c:	mov	r2, #44	; 0x2c
   3d030:	strb	r2, [r3]
   3d034:	mov	r2, r6
   3d038:	mov	r1, r7
   3d03c:	mov	r0, r4
   3d040:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3d044:	ldr	r3, [r5, #12]
   3d048:	str	r3, [sp, #8]
   3d04c:	strb	r9, [sp, #12]
   3d050:	str	r8, [sp, #4]
   3d054:	add	r1, sp, #4
   3d058:	mov	r0, r4
   3d05c:	ldr	r3, [sp, #56]	; 0x38
   3d060:	blx	r3
   3d064:	b	3cf50 <flatcc_json_printer_union_field@@Base+0x1cc>

0003d068 <flatcc_json_printer_union_table@@Base>:
   3d068:	ldr	r3, [r1, #4]
   3d06c:	subs	ip, r3, #1
   3d070:	beq	3d110 <flatcc_json_printer_union_table@@Base+0xa8>
   3d074:	strd	r4, [sp, #-12]!
   3d078:	str	lr, [sp, #8]
   3d07c:	sub	sp, sp, #28
   3d080:	mov	r4, r0
   3d084:	ldr	r1, [r1]
   3d088:	ldr	lr, [r1]
   3d08c:	add	r3, r1, lr
   3d090:	ldr	r0, [r0, #32]
   3d094:	add	r0, r0, #1
   3d098:	str	r0, [r4, #32]
   3d09c:	ldr	r0, [r4, #20]
   3d0a0:	add	r5, r0, #1
   3d0a4:	str	r5, [r4, #20]
   3d0a8:	mov	r5, #123	; 0x7b
   3d0ac:	strb	r5, [r0]
   3d0b0:	mov	r0, #0
   3d0b4:	str	r0, [sp, #20]
   3d0b8:	str	ip, [sp, #16]
   3d0bc:	str	r3, [sp, #4]
   3d0c0:	ldr	r1, [r1, lr]
   3d0c4:	sub	r3, r3, r1
   3d0c8:	str	r3, [sp, #8]
   3d0cc:	ldrh	r3, [r3]
   3d0d0:	str	r3, [sp, #12]
   3d0d4:	add	r1, sp, #4
   3d0d8:	mov	r0, r4
   3d0dc:	blx	r2
   3d0e0:	ldrb	r3, [r4, #25]
   3d0e4:	cmp	r3, #0
   3d0e8:	bne	3d124 <flatcc_json_printer_union_table@@Base+0xbc>
   3d0ec:	ldr	r3, [r4, #20]
   3d0f0:	add	r2, r3, #1
   3d0f4:	str	r2, [r4, #20]
   3d0f8:	mov	r2, #125	; 0x7d
   3d0fc:	strb	r2, [r3]
   3d100:	add	sp, sp, #28
   3d104:	ldrd	r4, [sp]
   3d108:	add	sp, sp, #8
   3d10c:	pop	{pc}		; (ldr pc, [sp], #4)
   3d110:	ldr	r3, [r0, #36]	; 0x24
   3d114:	cmp	r3, #0
   3d118:	moveq	r3, #2
   3d11c:	streq	r3, [r0, #36]	; 0x24
   3d120:	bx	lr
   3d124:	ldr	r3, [r4, #20]
   3d128:	add	r2, r3, #1
   3d12c:	str	r2, [r4, #20]
   3d130:	mov	r2, #10
   3d134:	strb	r2, [r3]
   3d138:	ldr	r5, [r4, #32]
   3d13c:	sub	r5, r5, #1
   3d140:	str	r5, [r4, #32]
   3d144:	ldrb	r3, [r4, #25]
   3d148:	mul	r5, r5, r3
   3d14c:	ldr	r0, [r4, #20]
   3d150:	add	r3, r0, r5
   3d154:	ldr	r2, [r4, #16]
   3d158:	cmp	r2, r3
   3d15c:	bcs	3d170 <flatcc_json_printer_union_table@@Base+0x108>
   3d160:	mov	r1, r5
   3d164:	mov	r0, r4
   3d168:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3d16c:	b	3d0ec <flatcc_json_printer_union_table@@Base+0x84>
   3d170:	mov	r2, r5
   3d174:	mov	r1, #32
   3d178:	bl	1459c <memset@plt>
   3d17c:	ldr	r3, [r4, #20]
   3d180:	add	r5, r3, r5
   3d184:	str	r5, [r4, #20]
   3d188:	b	3d0ec <flatcc_json_printer_union_table@@Base+0x84>

0003d18c <flatcc_json_printer_union_struct@@Base>:
   3d18c:	strd	r4, [sp, #-16]!
   3d190:	str	r6, [sp, #8]
   3d194:	str	lr, [sp, #12]
   3d198:	mov	r4, r0
   3d19c:	ldr	r3, [r0, #32]
   3d1a0:	add	r3, r3, #1
   3d1a4:	str	r3, [r0, #32]
   3d1a8:	ldr	r3, [r0, #20]
   3d1ac:	add	ip, r3, #1
   3d1b0:	str	ip, [r0, #20]
   3d1b4:	mov	ip, #123	; 0x7b
   3d1b8:	strb	ip, [r3]
   3d1bc:	ldr	r3, [r1]
   3d1c0:	ldr	r1, [r3]
   3d1c4:	add	r1, r3, r1
   3d1c8:	blx	r2
   3d1cc:	ldrb	r3, [r4, #25]
   3d1d0:	cmp	r3, #0
   3d1d4:	bne	3d1fc <flatcc_json_printer_union_struct@@Base+0x70>
   3d1d8:	ldr	r3, [r4, #20]
   3d1dc:	add	r2, r3, #1
   3d1e0:	str	r2, [r4, #20]
   3d1e4:	mov	r2, #125	; 0x7d
   3d1e8:	strb	r2, [r3]
   3d1ec:	ldrd	r4, [sp]
   3d1f0:	ldr	r6, [sp, #8]
   3d1f4:	add	sp, sp, #12
   3d1f8:	pop	{pc}		; (ldr pc, [sp], #4)
   3d1fc:	ldr	r3, [r4, #20]
   3d200:	add	r2, r3, #1
   3d204:	str	r2, [r4, #20]
   3d208:	mov	r2, #10
   3d20c:	strb	r2, [r3]
   3d210:	ldr	r5, [r4, #32]
   3d214:	sub	r5, r5, #1
   3d218:	str	r5, [r4, #32]
   3d21c:	ldrb	r3, [r4, #25]
   3d220:	mul	r5, r5, r3
   3d224:	ldr	r0, [r4, #20]
   3d228:	add	r3, r0, r5
   3d22c:	ldr	r2, [r4, #16]
   3d230:	cmp	r2, r3
   3d234:	bcs	3d248 <flatcc_json_printer_union_struct@@Base+0xbc>
   3d238:	mov	r1, r5
   3d23c:	mov	r0, r4
   3d240:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3d244:	b	3d1d8 <flatcc_json_printer_union_struct@@Base+0x4c>
   3d248:	mov	r2, r5
   3d24c:	mov	r1, #32
   3d250:	bl	1459c <memset@plt>
   3d254:	ldr	r3, [r4, #20]
   3d258:	add	r5, r3, r5
   3d25c:	str	r5, [r4, #20]
   3d260:	b	3d1d8 <flatcc_json_printer_union_struct@@Base+0x4c>

0003d264 <flatcc_json_printer_union_string@@Base>:
   3d264:	str	r4, [sp, #-8]!
   3d268:	str	lr, [sp, #4]
   3d26c:	ldr	r3, [r1]
   3d270:	ldr	r2, [r3]
   3d274:	add	r1, r3, r2
   3d278:	ldr	r2, [r3, r2]
   3d27c:	add	r1, r1, #4
   3d280:	bl	31ebc <flatcc_json_parser_struct_as_root@@Base+0x19e4>
   3d284:	ldr	r4, [sp]
   3d288:	add	sp, sp, #4
   3d28c:	pop	{pc}		; (ldr pc, [sp], #4)

0003d290 <flatcc_json_printer_embedded_struct_field@@Base>:
   3d290:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3d294:	strd	r6, [sp, #8]
   3d298:	str	r8, [sp, #16]
   3d29c:	str	lr, [sp, #20]
   3d2a0:	mov	r4, r0
   3d2a4:	mov	r6, r2
   3d2a8:	mov	r5, r3
   3d2ac:	ldr	r7, [sp, #28]
   3d2b0:	cmp	r1, #0
   3d2b4:	beq	3d2cc <flatcc_json_printer_embedded_struct_field@@Base+0x3c>
   3d2b8:	ldr	r3, [r0, #20]
   3d2bc:	add	r2, r3, #1
   3d2c0:	str	r2, [r0, #20]
   3d2c4:	mov	r2, #44	; 0x2c
   3d2c8:	strb	r2, [r3]
   3d2cc:	ldrb	r3, [r4, #25]
   3d2d0:	cmp	r3, #0
   3d2d4:	bne	3d3f0 <flatcc_json_printer_embedded_struct_field@@Base+0x160>
   3d2d8:	ldr	r2, [r4, #20]
   3d2dc:	ldr	r3, [r4, #16]
   3d2e0:	cmp	r2, r3
   3d2e4:	bcc	3d2f8 <flatcc_json_printer_embedded_struct_field@@Base+0x68>
   3d2e8:	ldr	r3, [r4, #44]	; 0x2c
   3d2ec:	mov	r1, #0
   3d2f0:	mov	r0, r4
   3d2f4:	blx	r3
   3d2f8:	ldr	r3, [r4, #20]
   3d2fc:	mov	r2, #34	; 0x22
   3d300:	strb	r2, [r3]
   3d304:	ldrb	r3, [r4, #26]
   3d308:	ldr	r0, [r4, #20]
   3d30c:	cmp	r3, #0
   3d310:	addeq	r0, r0, #1
   3d314:	str	r0, [r4, #20]
   3d318:	add	r3, r0, r7
   3d31c:	ldr	r2, [r4, #16]
   3d320:	cmp	r2, r3
   3d324:	bls	3d450 <flatcc_json_printer_embedded_struct_field@@Base+0x1c0>
   3d328:	mov	r2, r7
   3d32c:	ldr	r1, [sp, #24]
   3d330:	bl	14524 <memcpy@plt>
   3d334:	ldr	r3, [r4, #20]
   3d338:	add	r7, r3, r7
   3d33c:	str	r7, [r4, #20]
   3d340:	ldr	r3, [r4, #20]
   3d344:	mov	r2, #34	; 0x22
   3d348:	strb	r2, [r3]
   3d34c:	ldrb	r3, [r4, #26]
   3d350:	clz	r3, r3
   3d354:	lsr	r3, r3, #5
   3d358:	ldr	r1, [r4, #20]
   3d35c:	add	r2, r1, r3
   3d360:	add	r2, r2, #1
   3d364:	str	r2, [r4, #20]
   3d368:	mov	r2, #58	; 0x3a
   3d36c:	strb	r2, [r1, r3]
   3d370:	ldr	r3, [r4, #20]
   3d374:	mov	r2, #32
   3d378:	strb	r2, [r3]
   3d37c:	ldrb	r3, [r4, #25]
   3d380:	adds	r3, r3, #0
   3d384:	movne	r3, #1
   3d388:	ldr	r0, [r4, #20]
   3d38c:	add	r2, r0, r3
   3d390:	ldr	r1, [r4, #32]
   3d394:	add	r1, r1, #1
   3d398:	str	r1, [r4, #32]
   3d39c:	add	r2, r2, #1
   3d3a0:	str	r2, [r4, #20]
   3d3a4:	mov	r2, #123	; 0x7b
   3d3a8:	strb	r2, [r0, r3]
   3d3ac:	add	r1, r6, r5
   3d3b0:	mov	r0, r4
   3d3b4:	ldr	r3, [sp, #32]
   3d3b8:	blx	r3
   3d3bc:	ldrb	r3, [r4, #25]
   3d3c0:	cmp	r3, #0
   3d3c4:	bne	3d464 <flatcc_json_printer_embedded_struct_field@@Base+0x1d4>
   3d3c8:	ldr	r3, [r4, #20]
   3d3cc:	add	r2, r3, #1
   3d3d0:	str	r2, [r4, #20]
   3d3d4:	mov	r2, #125	; 0x7d
   3d3d8:	strb	r2, [r3]
   3d3dc:	ldrd	r4, [sp]
   3d3e0:	ldrd	r6, [sp, #8]
   3d3e4:	ldr	r8, [sp, #16]
   3d3e8:	add	sp, sp, #20
   3d3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   3d3f0:	ldr	r3, [r4, #20]
   3d3f4:	add	r2, r3, #1
   3d3f8:	str	r2, [r4, #20]
   3d3fc:	mov	r2, #10
   3d400:	strb	r2, [r3]
   3d404:	ldrb	r3, [r4, #25]
   3d408:	ldr	r8, [r4, #32]
   3d40c:	mul	r8, r8, r3
   3d410:	ldr	r0, [r4, #20]
   3d414:	add	r3, r0, r8
   3d418:	ldr	r2, [r4, #16]
   3d41c:	cmp	r2, r3
   3d420:	bcs	3d434 <flatcc_json_printer_embedded_struct_field@@Base+0x1a4>
   3d424:	mov	r1, r8
   3d428:	mov	r0, r4
   3d42c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3d430:	b	3d2f8 <flatcc_json_printer_embedded_struct_field@@Base+0x68>
   3d434:	mov	r2, r8
   3d438:	mov	r1, #32
   3d43c:	bl	1459c <memset@plt>
   3d440:	ldr	r3, [r4, #20]
   3d444:	add	r8, r3, r8
   3d448:	str	r8, [r4, #20]
   3d44c:	b	3d2f8 <flatcc_json_printer_embedded_struct_field@@Base+0x68>
   3d450:	mov	r2, r7
   3d454:	ldr	r1, [sp, #24]
   3d458:	mov	r0, r4
   3d45c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3d460:	b	3d340 <flatcc_json_printer_embedded_struct_field@@Base+0xb0>
   3d464:	ldr	r3, [r4, #20]
   3d468:	add	r2, r3, #1
   3d46c:	str	r2, [r4, #20]
   3d470:	mov	r2, #10
   3d474:	strb	r2, [r3]
   3d478:	ldr	r5, [r4, #32]
   3d47c:	sub	r5, r5, #1
   3d480:	str	r5, [r4, #32]
   3d484:	ldrb	r3, [r4, #25]
   3d488:	mul	r5, r5, r3
   3d48c:	ldr	r0, [r4, #20]
   3d490:	add	r3, r0, r5
   3d494:	ldr	r2, [r4, #16]
   3d498:	cmp	r2, r3
   3d49c:	bcs	3d4b0 <flatcc_json_printer_embedded_struct_field@@Base+0x220>
   3d4a0:	mov	r1, r5
   3d4a4:	mov	r0, r4
   3d4a8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3d4ac:	b	3d3c8 <flatcc_json_printer_embedded_struct_field@@Base+0x138>
   3d4b0:	mov	r2, r5
   3d4b4:	mov	r1, #32
   3d4b8:	bl	1459c <memset@plt>
   3d4bc:	ldr	r3, [r4, #20]
   3d4c0:	add	r5, r3, r5
   3d4c4:	str	r5, [r4, #20]
   3d4c8:	b	3d3c8 <flatcc_json_printer_embedded_struct_field@@Base+0x138>

0003d4cc <flatcc_json_printer_struct_field@@Base>:
   3d4cc:	add	r2, r2, #2
   3d4d0:	lsl	r2, r2, #1
   3d4d4:	ldr	ip, [r1, #8]
   3d4d8:	cmp	r2, ip
   3d4dc:	bxge	lr
   3d4e0:	ldr	ip, [r1, #4]
   3d4e4:	ldrh	r2, [ip, r2]
   3d4e8:	cmp	r2, #0
   3d4ec:	bxeq	lr
   3d4f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3d4f4:	strd	r6, [sp, #8]
   3d4f8:	str	r8, [sp, #16]
   3d4fc:	str	lr, [sp, #20]
   3d500:	ldr	r5, [r1]
   3d504:	adds	r5, r5, r2
   3d508:	beq	3d650 <flatcc_json_printer_struct_field@@Base+0x184>
   3d50c:	ldr	r2, [r1, #16]
   3d510:	add	ip, r2, #1
   3d514:	str	ip, [r1, #16]
   3d518:	cmp	r2, #0
   3d51c:	beq	3d534 <flatcc_json_printer_struct_field@@Base+0x68>
   3d520:	ldr	r2, [r0, #20]
   3d524:	add	r1, r2, #1
   3d528:	str	r1, [r0, #20]
   3d52c:	mov	r1, #44	; 0x2c
   3d530:	strb	r1, [r2]
   3d534:	mov	r6, r3
   3d538:	mov	r4, r0
   3d53c:	ldrb	r3, [r0, #25]
   3d540:	cmp	r3, #0
   3d544:	bne	3d664 <flatcc_json_printer_struct_field@@Base+0x198>
   3d548:	ldr	r2, [r0, #20]
   3d54c:	ldr	r3, [r0, #16]
   3d550:	cmp	r2, r3
   3d554:	bcc	3d564 <flatcc_json_printer_struct_field@@Base+0x98>
   3d558:	ldr	r3, [r0, #44]	; 0x2c
   3d55c:	mov	r1, #0
   3d560:	blx	r3
   3d564:	ldr	r3, [r4, #20]
   3d568:	mov	r2, #34	; 0x22
   3d56c:	strb	r2, [r3]
   3d570:	ldrb	r3, [r4, #26]
   3d574:	ldr	r0, [r4, #20]
   3d578:	cmp	r3, #0
   3d57c:	addeq	r0, r0, #1
   3d580:	str	r0, [r4, #20]
   3d584:	ldr	r3, [sp, #24]
   3d588:	add	r3, r0, r3
   3d58c:	ldr	r2, [r4, #16]
   3d590:	cmp	r2, r3
   3d594:	bls	3d6c4 <flatcc_json_printer_struct_field@@Base+0x1f8>
   3d598:	ldr	r2, [sp, #24]
   3d59c:	mov	r1, r6
   3d5a0:	bl	14524 <memcpy@plt>
   3d5a4:	ldr	r3, [r4, #20]
   3d5a8:	ldr	r2, [sp, #24]
   3d5ac:	add	r3, r3, r2
   3d5b0:	str	r3, [r4, #20]
   3d5b4:	ldr	r3, [r4, #20]
   3d5b8:	mov	r2, #34	; 0x22
   3d5bc:	strb	r2, [r3]
   3d5c0:	ldrb	r3, [r4, #26]
   3d5c4:	clz	r3, r3
   3d5c8:	lsr	r3, r3, #5
   3d5cc:	ldr	r1, [r4, #20]
   3d5d0:	add	r2, r1, r3
   3d5d4:	add	r2, r2, #1
   3d5d8:	str	r2, [r4, #20]
   3d5dc:	mov	r2, #58	; 0x3a
   3d5e0:	strb	r2, [r1, r3]
   3d5e4:	ldr	r3, [r4, #20]
   3d5e8:	mov	r2, #32
   3d5ec:	strb	r2, [r3]
   3d5f0:	ldrb	r3, [r4, #25]
   3d5f4:	adds	r3, r3, #0
   3d5f8:	movne	r3, #1
   3d5fc:	ldr	r0, [r4, #20]
   3d600:	add	r2, r0, r3
   3d604:	ldr	r1, [r4, #32]
   3d608:	add	r1, r1, #1
   3d60c:	str	r1, [r4, #32]
   3d610:	add	r2, r2, #1
   3d614:	str	r2, [r4, #20]
   3d618:	mov	r2, #123	; 0x7b
   3d61c:	strb	r2, [r0, r3]
   3d620:	mov	r1, r5
   3d624:	mov	r0, r4
   3d628:	ldr	r3, [sp, #28]
   3d62c:	blx	r3
   3d630:	ldrb	r3, [r4, #25]
   3d634:	cmp	r3, #0
   3d638:	bne	3d6d8 <flatcc_json_printer_struct_field@@Base+0x20c>
   3d63c:	ldr	r3, [r4, #20]
   3d640:	add	r2, r3, #1
   3d644:	str	r2, [r4, #20]
   3d648:	mov	r2, #125	; 0x7d
   3d64c:	strb	r2, [r3]
   3d650:	ldrd	r4, [sp]
   3d654:	ldrd	r6, [sp, #8]
   3d658:	ldr	r8, [sp, #16]
   3d65c:	add	sp, sp, #20
   3d660:	pop	{pc}		; (ldr pc, [sp], #4)
   3d664:	ldr	r3, [r0, #20]
   3d668:	add	r2, r3, #1
   3d66c:	str	r2, [r0, #20]
   3d670:	mov	r2, #10
   3d674:	strb	r2, [r3]
   3d678:	ldrb	r3, [r0, #25]
   3d67c:	ldr	r7, [r0, #32]
   3d680:	mul	r7, r7, r3
   3d684:	ldr	r0, [r0, #20]
   3d688:	add	r3, r0, r7
   3d68c:	ldr	r2, [r4, #16]
   3d690:	cmp	r2, r3
   3d694:	bcs	3d6a8 <flatcc_json_printer_struct_field@@Base+0x1dc>
   3d698:	mov	r1, r7
   3d69c:	mov	r0, r4
   3d6a0:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3d6a4:	b	3d564 <flatcc_json_printer_struct_field@@Base+0x98>
   3d6a8:	mov	r2, r7
   3d6ac:	mov	r1, #32
   3d6b0:	bl	1459c <memset@plt>
   3d6b4:	ldr	r3, [r4, #20]
   3d6b8:	add	r7, r3, r7
   3d6bc:	str	r7, [r4, #20]
   3d6c0:	b	3d564 <flatcc_json_printer_struct_field@@Base+0x98>
   3d6c4:	ldr	r2, [sp, #24]
   3d6c8:	mov	r1, r6
   3d6cc:	mov	r0, r4
   3d6d0:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3d6d4:	b	3d5b4 <flatcc_json_printer_struct_field@@Base+0xe8>
   3d6d8:	ldr	r3, [r4, #20]
   3d6dc:	add	r2, r3, #1
   3d6e0:	str	r2, [r4, #20]
   3d6e4:	mov	r2, #10
   3d6e8:	strb	r2, [r3]
   3d6ec:	ldr	r5, [r4, #32]
   3d6f0:	sub	r5, r5, #1
   3d6f4:	str	r5, [r4, #32]
   3d6f8:	ldrb	r3, [r4, #25]
   3d6fc:	mul	r5, r5, r3
   3d700:	ldr	r0, [r4, #20]
   3d704:	add	r3, r0, r5
   3d708:	ldr	r2, [r4, #16]
   3d70c:	cmp	r2, r3
   3d710:	bcs	3d724 <flatcc_json_printer_struct_field@@Base+0x258>
   3d714:	mov	r1, r5
   3d718:	mov	r0, r4
   3d71c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3d720:	b	3d63c <flatcc_json_printer_struct_field@@Base+0x170>
   3d724:	mov	r2, r5
   3d728:	mov	r1, #32
   3d72c:	bl	1459c <memset@plt>
   3d730:	ldr	r3, [r4, #20]
   3d734:	add	r5, r3, r5
   3d738:	str	r5, [r4, #20]
   3d73c:	b	3d63c <flatcc_json_printer_struct_field@@Base+0x170>

0003d740 <flatcc_json_printer_struct_as_root@@Base>:
   3d740:	strd	r4, [sp, #-16]!
   3d744:	str	r6, [sp, #8]
   3d748:	str	lr, [sp, #12]
   3d74c:	mov	r4, r0
   3d750:	mov	r5, r1
   3d754:	bl	31c7c <flatcc_json_parser_struct_as_root@@Base+0x17a4>
   3d758:	cmp	r0, #0
   3d75c:	beq	3d888 <flatcc_json_printer_struct_as_root@@Base+0x148>
   3d760:	ldr	r3, [r4, #32]
   3d764:	add	r3, r3, #1
   3d768:	str	r3, [r4, #32]
   3d76c:	ldr	r3, [r4, #20]
   3d770:	add	r2, r3, #1
   3d774:	str	r2, [r4, #20]
   3d778:	mov	r2, #123	; 0x7b
   3d77c:	strb	r2, [r3]
   3d780:	ldr	r1, [r5]
   3d784:	add	r1, r5, r1
   3d788:	mov	r0, r4
   3d78c:	ldr	r3, [sp, #16]
   3d790:	blx	r3
   3d794:	ldrb	r3, [r4, #25]
   3d798:	cmp	r3, #0
   3d79c:	bne	3d820 <flatcc_json_printer_struct_as_root@@Base+0xe0>
   3d7a0:	ldr	r3, [r4, #20]
   3d7a4:	add	r2, r3, #1
   3d7a8:	str	r2, [r4, #20]
   3d7ac:	mov	r2, #125	; 0x7d
   3d7b0:	strb	r2, [r3]
   3d7b4:	ldrb	r3, [r4, #25]
   3d7b8:	cmp	r3, #0
   3d7bc:	beq	3d7e0 <flatcc_json_printer_struct_as_root@@Base+0xa0>
   3d7c0:	ldr	r3, [r4, #32]
   3d7c4:	cmp	r3, #0
   3d7c8:	bne	3d7e0 <flatcc_json_printer_struct_as_root@@Base+0xa0>
   3d7cc:	ldr	r3, [r4, #20]
   3d7d0:	add	r2, r3, #1
   3d7d4:	str	r2, [r4, #20]
   3d7d8:	mov	r2, #10
   3d7dc:	strb	r2, [r3]
   3d7e0:	ldr	r3, [r4, #44]	; 0x2c
   3d7e4:	mov	r1, #1
   3d7e8:	mov	r0, r4
   3d7ec:	blx	r3
   3d7f0:	ldr	r3, [r4, #36]	; 0x24
   3d7f4:	cmp	r3, #0
   3d7f8:	bne	3d890 <flatcc_json_printer_struct_as_root@@Base+0x150>
   3d7fc:	ldr	r0, [r4, #20]
   3d800:	ldr	r3, [r4]
   3d804:	sub	r0, r0, r3
   3d808:	ldr	r3, [r4, #12]
   3d80c:	add	r0, r0, r3
   3d810:	ldrd	r4, [sp]
   3d814:	ldr	r6, [sp, #8]
   3d818:	add	sp, sp, #12
   3d81c:	pop	{pc}		; (ldr pc, [sp], #4)
   3d820:	ldr	r3, [r4, #20]
   3d824:	add	r2, r3, #1
   3d828:	str	r2, [r4, #20]
   3d82c:	mov	r2, #10
   3d830:	strb	r2, [r3]
   3d834:	ldr	r5, [r4, #32]
   3d838:	sub	r5, r5, #1
   3d83c:	str	r5, [r4, #32]
   3d840:	ldrb	r3, [r4, #25]
   3d844:	mul	r5, r5, r3
   3d848:	ldr	r0, [r4, #20]
   3d84c:	add	r3, r0, r5
   3d850:	ldr	r2, [r4, #16]
   3d854:	cmp	r2, r3
   3d858:	bcs	3d86c <flatcc_json_printer_struct_as_root@@Base+0x12c>
   3d85c:	mov	r1, r5
   3d860:	mov	r0, r4
   3d864:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3d868:	b	3d7a0 <flatcc_json_printer_struct_as_root@@Base+0x60>
   3d86c:	mov	r2, r5
   3d870:	mov	r1, #32
   3d874:	bl	1459c <memset@plt>
   3d878:	ldr	r3, [r4, #20]
   3d87c:	add	r5, r3, r5
   3d880:	str	r5, [r4, #20]
   3d884:	b	3d7a0 <flatcc_json_printer_struct_as_root@@Base+0x60>
   3d888:	mvn	r0, #0
   3d88c:	b	3d810 <flatcc_json_printer_struct_as_root@@Base+0xd0>
   3d890:	mvn	r0, #0
   3d894:	b	3d810 <flatcc_json_printer_struct_as_root@@Base+0xd0>

0003d898 <flatcc_json_printer_table_as_root@@Base>:
   3d898:	strd	r4, [sp, #-12]!
   3d89c:	str	lr, [sp, #8]
   3d8a0:	sub	sp, sp, #28
   3d8a4:	mov	r4, r0
   3d8a8:	mov	r5, r1
   3d8ac:	bl	31c7c <flatcc_json_parser_struct_as_root@@Base+0x17a4>
   3d8b0:	cmp	r0, #0
   3d8b4:	beq	3da0c <flatcc_json_printer_table_as_root@@Base+0x174>
   3d8b8:	ldr	r1, [r5]
   3d8bc:	add	r3, r5, r1
   3d8c0:	ldr	r2, [r4, #32]
   3d8c4:	add	r2, r2, #1
   3d8c8:	str	r2, [r4, #32]
   3d8cc:	ldr	r2, [r4, #20]
   3d8d0:	add	r0, r2, #1
   3d8d4:	str	r0, [r4, #20]
   3d8d8:	mov	r0, #123	; 0x7b
   3d8dc:	strb	r0, [r2]
   3d8e0:	mov	r2, #0
   3d8e4:	str	r2, [sp, #20]
   3d8e8:	mov	r2, #99	; 0x63
   3d8ec:	str	r2, [sp, #16]
   3d8f0:	str	r3, [sp, #4]
   3d8f4:	ldr	r2, [r5, r1]
   3d8f8:	sub	r3, r3, r2
   3d8fc:	str	r3, [sp, #8]
   3d900:	ldrh	r3, [r3]
   3d904:	str	r3, [sp, #12]
   3d908:	add	r1, sp, #4
   3d90c:	mov	r0, r4
   3d910:	ldr	r3, [sp, #40]	; 0x28
   3d914:	blx	r3
   3d918:	ldrb	r3, [r4, #25]
   3d91c:	cmp	r3, #0
   3d920:	bne	3d9a4 <flatcc_json_printer_table_as_root@@Base+0x10c>
   3d924:	ldr	r3, [r4, #20]
   3d928:	add	r2, r3, #1
   3d92c:	str	r2, [r4, #20]
   3d930:	mov	r2, #125	; 0x7d
   3d934:	strb	r2, [r3]
   3d938:	ldrb	r3, [r4, #25]
   3d93c:	cmp	r3, #0
   3d940:	beq	3d964 <flatcc_json_printer_table_as_root@@Base+0xcc>
   3d944:	ldr	r3, [r4, #32]
   3d948:	cmp	r3, #0
   3d94c:	bne	3d964 <flatcc_json_printer_table_as_root@@Base+0xcc>
   3d950:	ldr	r3, [r4, #20]
   3d954:	add	r2, r3, #1
   3d958:	str	r2, [r4, #20]
   3d95c:	mov	r2, #10
   3d960:	strb	r2, [r3]
   3d964:	ldr	r3, [r4, #44]	; 0x2c
   3d968:	mov	r1, #1
   3d96c:	mov	r0, r4
   3d970:	blx	r3
   3d974:	ldr	r3, [r4, #36]	; 0x24
   3d978:	cmp	r3, #0
   3d97c:	bne	3da14 <flatcc_json_printer_table_as_root@@Base+0x17c>
   3d980:	ldr	r0, [r4, #20]
   3d984:	ldr	r3, [r4]
   3d988:	sub	r0, r0, r3
   3d98c:	ldr	r3, [r4, #12]
   3d990:	add	r0, r0, r3
   3d994:	add	sp, sp, #28
   3d998:	ldrd	r4, [sp]
   3d99c:	add	sp, sp, #8
   3d9a0:	pop	{pc}		; (ldr pc, [sp], #4)
   3d9a4:	ldr	r3, [r4, #20]
   3d9a8:	add	r2, r3, #1
   3d9ac:	str	r2, [r4, #20]
   3d9b0:	mov	r2, #10
   3d9b4:	strb	r2, [r3]
   3d9b8:	ldr	r5, [r4, #32]
   3d9bc:	sub	r5, r5, #1
   3d9c0:	str	r5, [r4, #32]
   3d9c4:	ldrb	r3, [r4, #25]
   3d9c8:	mul	r5, r5, r3
   3d9cc:	ldr	r0, [r4, #20]
   3d9d0:	add	r3, r0, r5
   3d9d4:	ldr	r2, [r4, #16]
   3d9d8:	cmp	r2, r3
   3d9dc:	bcs	3d9f0 <flatcc_json_printer_table_as_root@@Base+0x158>
   3d9e0:	mov	r1, r5
   3d9e4:	mov	r0, r4
   3d9e8:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3d9ec:	b	3d924 <flatcc_json_printer_table_as_root@@Base+0x8c>
   3d9f0:	mov	r2, r5
   3d9f4:	mov	r1, #32
   3d9f8:	bl	1459c <memset@plt>
   3d9fc:	ldr	r3, [r4, #20]
   3da00:	add	r5, r3, r5
   3da04:	str	r5, [r4, #20]
   3da08:	b	3d924 <flatcc_json_printer_table_as_root@@Base+0x8c>
   3da0c:	mvn	r0, #0
   3da10:	b	3d994 <flatcc_json_printer_table_as_root@@Base+0xfc>
   3da14:	mvn	r0, #0
   3da18:	b	3d994 <flatcc_json_printer_table_as_root@@Base+0xfc>

0003da1c <flatcc_json_printer_struct_as_nested_root@@Base>:
   3da1c:	add	r2, r2, #2
   3da20:	lsl	r2, r2, #1
   3da24:	ldr	ip, [r1, #8]
   3da28:	cmp	r2, ip
   3da2c:	bxge	lr
   3da30:	ldr	ip, [r1, #4]
   3da34:	ldrh	r2, [ip, r2]
   3da38:	cmp	r2, #0
   3da3c:	bxeq	lr
   3da40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3da44:	strd	r6, [sp, #8]
   3da48:	strd	r8, [sp, #16]
   3da4c:	str	sl, [sp, #24]
   3da50:	str	lr, [sp, #28]
   3da54:	ldr	ip, [r1]
   3da58:	adds	r7, ip, r2
   3da5c:	beq	3db18 <flatcc_json_printer_struct_as_nested_root@@Base+0xfc>
   3da60:	mov	r6, r3
   3da64:	mov	r5, r1
   3da68:	mov	r4, r0
   3da6c:	ldr	r8, [ip, r2]
   3da70:	add	r9, r7, r8
   3da74:	ldr	r3, [sp, #36]	; 0x24
   3da78:	ldr	r2, [r7, r8]
   3da7c:	mov	r1, r9
   3da80:	bl	31c7c <flatcc_json_parser_struct_as_root@@Base+0x17a4>
   3da84:	cmp	r0, #0
   3da88:	beq	3db18 <flatcc_json_printer_struct_as_nested_root@@Base+0xfc>
   3da8c:	ldr	r3, [r5, #16]
   3da90:	add	r2, r3, #1
   3da94:	str	r2, [r5, #16]
   3da98:	cmp	r3, #0
   3da9c:	beq	3dab4 <flatcc_json_printer_struct_as_nested_root@@Base+0x98>
   3daa0:	ldr	r3, [r4, #20]
   3daa4:	add	r2, r3, #1
   3daa8:	str	r2, [r4, #20]
   3daac:	mov	r2, #44	; 0x2c
   3dab0:	strb	r2, [r3]
   3dab4:	ldr	r2, [sp, #32]
   3dab8:	mov	r1, r6
   3dabc:	mov	r0, r4
   3dac0:	bl	32140 <flatcc_json_parser_struct_as_root@@Base+0x1c68>
   3dac4:	ldr	r3, [r4, #32]
   3dac8:	add	r3, r3, #1
   3dacc:	str	r3, [r4, #32]
   3dad0:	ldr	r3, [r4, #20]
   3dad4:	add	r2, r3, #1
   3dad8:	str	r2, [r4, #20]
   3dadc:	mov	r2, #123	; 0x7b
   3dae0:	strb	r2, [r3]
   3dae4:	ldr	r1, [r7, r8]
   3dae8:	add	r1, r9, r1
   3daec:	mov	r0, r4
   3daf0:	ldr	r3, [sp, #40]	; 0x28
   3daf4:	blx	r3
   3daf8:	ldrb	r3, [r4, #25]
   3dafc:	cmp	r3, #0
   3db00:	bne	3db30 <flatcc_json_printer_struct_as_nested_root@@Base+0x114>
   3db04:	ldr	r3, [r4, #20]
   3db08:	add	r2, r3, #1
   3db0c:	str	r2, [r4, #20]
   3db10:	mov	r2, #125	; 0x7d
   3db14:	strb	r2, [r3]
   3db18:	ldrd	r4, [sp]
   3db1c:	ldrd	r6, [sp, #8]
   3db20:	ldrd	r8, [sp, #16]
   3db24:	ldr	sl, [sp, #24]
   3db28:	add	sp, sp, #28
   3db2c:	pop	{pc}		; (ldr pc, [sp], #4)
   3db30:	ldr	r3, [r4, #20]
   3db34:	add	r2, r3, #1
   3db38:	str	r2, [r4, #20]
   3db3c:	mov	r2, #10
   3db40:	strb	r2, [r3]
   3db44:	ldr	r5, [r4, #32]
   3db48:	sub	r5, r5, #1
   3db4c:	str	r5, [r4, #32]
   3db50:	ldrb	r3, [r4, #25]
   3db54:	mul	r5, r5, r3
   3db58:	ldr	r0, [r4, #20]
   3db5c:	add	r3, r0, r5
   3db60:	ldr	r2, [r4, #16]
   3db64:	cmp	r2, r3
   3db68:	bcs	3db7c <flatcc_json_printer_struct_as_nested_root@@Base+0x160>
   3db6c:	mov	r1, r5
   3db70:	mov	r0, r4
   3db74:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3db78:	b	3db04 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>
   3db7c:	mov	r2, r5
   3db80:	mov	r1, #32
   3db84:	bl	1459c <memset@plt>
   3db88:	ldr	r3, [r4, #20]
   3db8c:	add	r5, r3, r5
   3db90:	str	r5, [r4, #20]
   3db94:	b	3db04 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>

0003db98 <flatcc_json_printer_table_as_nested_root@@Base>:
   3db98:	add	r2, r2, #2
   3db9c:	lsl	r2, r2, #1
   3dba0:	ldr	ip, [r1, #8]
   3dba4:	cmp	r2, ip
   3dba8:	bxge	lr
   3dbac:	ldr	ip, [r1, #4]
   3dbb0:	ldrh	r2, [ip, r2]
   3dbb4:	cmp	r2, #0
   3dbb8:	bxeq	lr
   3dbbc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   3dbc0:	strd	r6, [sp, #8]
   3dbc4:	strd	r8, [sp, #16]
   3dbc8:	str	lr, [sp, #24]
   3dbcc:	sub	sp, sp, #28
   3dbd0:	ldr	ip, [r1]
   3dbd4:	adds	lr, ip, r2
   3dbd8:	beq	3dd88 <flatcc_json_printer_table_as_nested_root@@Base+0x1f0>
   3dbdc:	mov	r6, r3
   3dbe0:	mov	r5, r1
   3dbe4:	mov	r4, r0
   3dbe8:	ldr	r2, [ip, r2]
   3dbec:	add	r8, lr, r2
   3dbf0:	add	r7, r8, #4
   3dbf4:	ldr	r3, [sp, #60]	; 0x3c
   3dbf8:	ldr	r2, [lr, r2]
   3dbfc:	mov	r1, r7
   3dc00:	bl	31c7c <flatcc_json_parser_struct_as_root@@Base+0x17a4>
   3dc04:	cmp	r0, #0
   3dc08:	beq	3dd88 <flatcc_json_printer_table_as_nested_root@@Base+0x1f0>
   3dc0c:	ldr	r3, [r5, #16]
   3dc10:	add	r2, r3, #1
   3dc14:	str	r2, [r5, #16]
   3dc18:	cmp	r3, #0
   3dc1c:	beq	3dc34 <flatcc_json_printer_table_as_nested_root@@Base+0x9c>
   3dc20:	ldr	r3, [r4, #20]
   3dc24:	add	r2, r3, #1
   3dc28:	str	r2, [r4, #20]
   3dc2c:	mov	r2, #44	; 0x2c
   3dc30:	strb	r2, [r3]
   3dc34:	ldrb	r3, [r4, #25]
   3dc38:	cmp	r3, #0
   3dc3c:	bne	3dda0 <flatcc_json_printer_table_as_nested_root@@Base+0x208>
   3dc40:	ldr	r2, [r4, #20]
   3dc44:	ldr	r3, [r4, #16]
   3dc48:	cmp	r2, r3
   3dc4c:	bcc	3dc60 <flatcc_json_printer_table_as_nested_root@@Base+0xc8>
   3dc50:	ldr	r3, [r4, #44]	; 0x2c
   3dc54:	mov	r1, #0
   3dc58:	mov	r0, r4
   3dc5c:	blx	r3
   3dc60:	ldr	r3, [r4, #20]
   3dc64:	mov	r2, #34	; 0x22
   3dc68:	strb	r2, [r3]
   3dc6c:	ldrb	r3, [r4, #26]
   3dc70:	ldr	r0, [r4, #20]
   3dc74:	cmp	r3, #0
   3dc78:	addeq	r0, r0, #1
   3dc7c:	str	r0, [r4, #20]
   3dc80:	ldr	r3, [sp, #56]	; 0x38
   3dc84:	add	r3, r0, r3
   3dc88:	ldr	r2, [r4, #16]
   3dc8c:	cmp	r2, r3
   3dc90:	bls	3de00 <flatcc_json_printer_table_as_nested_root@@Base+0x268>
   3dc94:	ldr	r2, [sp, #56]	; 0x38
   3dc98:	mov	r1, r6
   3dc9c:	bl	14524 <memcpy@plt>
   3dca0:	ldr	r3, [r4, #20]
   3dca4:	ldr	r2, [sp, #56]	; 0x38
   3dca8:	add	r3, r3, r2
   3dcac:	str	r3, [r4, #20]
   3dcb0:	ldr	r3, [r4, #20]
   3dcb4:	mov	r2, #34	; 0x22
   3dcb8:	strb	r2, [r3]
   3dcbc:	ldrb	r3, [r4, #26]
   3dcc0:	clz	r3, r3
   3dcc4:	lsr	r3, r3, #5
   3dcc8:	ldr	r1, [r4, #20]
   3dccc:	add	r2, r1, r3
   3dcd0:	add	r2, r2, #1
   3dcd4:	str	r2, [r4, #20]
   3dcd8:	mov	r2, #58	; 0x3a
   3dcdc:	strb	r2, [r1, r3]
   3dce0:	ldr	r3, [r4, #20]
   3dce4:	mov	r2, #32
   3dce8:	strb	r2, [r3]
   3dcec:	ldrb	r2, [r4, #25]
   3dcf0:	adds	r2, r2, #0
   3dcf4:	movne	r2, #1
   3dcf8:	ldr	lr, [r4, #20]
   3dcfc:	add	r1, lr, r2
   3dd00:	str	r1, [r4, #20]
   3dd04:	ldr	r3, [r5, #12]
   3dd08:	subs	r3, r3, #1
   3dd0c:	beq	3de14 <flatcc_json_printer_table_as_nested_root@@Base+0x27c>
   3dd10:	ldr	r5, [r8, #4]
   3dd14:	add	r0, r7, r5
   3dd18:	ldr	ip, [r4, #32]
   3dd1c:	add	ip, ip, #1
   3dd20:	str	ip, [r4, #32]
   3dd24:	add	r1, r1, #1
   3dd28:	str	r1, [r4, #20]
   3dd2c:	mov	r1, #123	; 0x7b
   3dd30:	strb	r1, [lr, r2]
   3dd34:	mov	r2, #0
   3dd38:	str	r2, [sp, #20]
   3dd3c:	str	r3, [sp, #16]
   3dd40:	str	r0, [sp, #4]
   3dd44:	ldr	r3, [r7, r5]
   3dd48:	sub	r3, r0, r3
   3dd4c:	str	r3, [sp, #8]
   3dd50:	ldrh	r3, [r3]
   3dd54:	str	r3, [sp, #12]
   3dd58:	add	r1, sp, #4
   3dd5c:	mov	r0, r4
   3dd60:	ldr	r3, [sp, #64]	; 0x40
   3dd64:	blx	r3
   3dd68:	ldrb	r3, [r4, #25]
   3dd6c:	cmp	r3, #0
   3dd70:	bne	3de28 <flatcc_json_printer_table_as_nested_root@@Base+0x290>
   3dd74:	ldr	r3, [r4, #20]
   3dd78:	add	r2, r3, #1
   3dd7c:	str	r2, [r4, #20]
   3dd80:	mov	r2, #125	; 0x7d
   3dd84:	strb	r2, [r3]
   3dd88:	add	sp, sp, #28
   3dd8c:	ldrd	r4, [sp]
   3dd90:	ldrd	r6, [sp, #8]
   3dd94:	ldrd	r8, [sp, #16]
   3dd98:	add	sp, sp, #24
   3dd9c:	pop	{pc}		; (ldr pc, [sp], #4)
   3dda0:	ldr	r3, [r4, #20]
   3dda4:	add	r2, r3, #1
   3dda8:	str	r2, [r4, #20]
   3ddac:	mov	r2, #10
   3ddb0:	strb	r2, [r3]
   3ddb4:	ldrb	r3, [r4, #25]
   3ddb8:	ldr	r9, [r4, #32]
   3ddbc:	mul	r9, r9, r3
   3ddc0:	ldr	r0, [r4, #20]
   3ddc4:	add	r3, r0, r9
   3ddc8:	ldr	r2, [r4, #16]
   3ddcc:	cmp	r2, r3
   3ddd0:	bcs	3dde4 <flatcc_json_printer_table_as_nested_root@@Base+0x24c>
   3ddd4:	mov	r1, r9
   3ddd8:	mov	r0, r4
   3dddc:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3dde0:	b	3dc60 <flatcc_json_printer_table_as_nested_root@@Base+0xc8>
   3dde4:	mov	r2, r9
   3dde8:	mov	r1, #32
   3ddec:	bl	1459c <memset@plt>
   3ddf0:	ldr	r3, [r4, #20]
   3ddf4:	add	r9, r3, r9
   3ddf8:	str	r9, [r4, #20]
   3ddfc:	b	3dc60 <flatcc_json_printer_table_as_nested_root@@Base+0xc8>
   3de00:	ldr	r2, [sp, #56]	; 0x38
   3de04:	mov	r1, r6
   3de08:	mov	r0, r4
   3de0c:	bl	31a40 <flatcc_json_parser_struct_as_root@@Base+0x1568>
   3de10:	b	3dcb0 <flatcc_json_printer_table_as_nested_root@@Base+0x118>
   3de14:	ldr	r3, [r4, #36]	; 0x24
   3de18:	cmp	r3, #0
   3de1c:	moveq	r3, #2
   3de20:	streq	r3, [r4, #36]	; 0x24
   3de24:	b	3dd88 <flatcc_json_printer_table_as_nested_root@@Base+0x1f0>
   3de28:	ldr	r3, [r4, #20]
   3de2c:	add	r2, r3, #1
   3de30:	str	r2, [r4, #20]
   3de34:	mov	r2, #10
   3de38:	strb	r2, [r3]
   3de3c:	ldr	r5, [r4, #32]
   3de40:	sub	r5, r5, #1
   3de44:	str	r5, [r4, #32]
   3de48:	ldrb	r3, [r4, #25]
   3de4c:	mul	r5, r5, r3
   3de50:	ldr	r0, [r4, #20]
   3de54:	add	r3, r0, r5
   3de58:	ldr	r2, [r4, #16]
   3de5c:	cmp	r2, r3
   3de60:	bcs	3de74 <flatcc_json_printer_table_as_nested_root@@Base+0x2dc>
   3de64:	mov	r1, r5
   3de68:	mov	r0, r4
   3de6c:	bl	31b50 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   3de70:	b	3dd74 <flatcc_json_printer_table_as_nested_root@@Base+0x1dc>
   3de74:	mov	r2, r5
   3de78:	mov	r1, #32
   3de7c:	bl	1459c <memset@plt>
   3de80:	ldr	r3, [r4, #20]
   3de84:	add	r5, r3, r5
   3de88:	str	r5, [r4, #20]
   3de8c:	b	3dd74 <flatcc_json_printer_table_as_nested_root@@Base+0x1dc>

0003de90 <flatcc_json_printer_init@@Base>:
   3de90:	strd	r4, [sp, #-16]!
   3de94:	str	r6, [sp, #8]
   3de98:	str	lr, [sp, #12]
   3de9c:	mov	r4, r0
   3dea0:	mov	r5, r1
   3dea4:	mov	r2, #48	; 0x30
   3dea8:	mov	r1, #0
   3deac:	bl	1459c <memset@plt>
   3deb0:	cmp	r5, #0
   3deb4:	beq	3df14 <flatcc_json_printer_init@@Base+0x84>
   3deb8:	str	r5, [r4, #40]	; 0x28
   3debc:	movw	r3, #7488	; 0x1d40
   3dec0:	movt	r3, #3
   3dec4:	str	r3, [r4, #44]	; 0x2c
   3dec8:	movw	r0, #16448	; 0x4040
   3decc:	bl	14554 <malloc@plt>
   3ded0:	str	r0, [r4]
   3ded4:	cmp	r0, #0
   3ded8:	beq	3df24 <flatcc_json_printer_init@@Base+0x94>
   3dedc:	mov	r3, #1
   3dee0:	strb	r3, [r4, #24]
   3dee4:	movw	r3, #16448	; 0x4040
   3dee8:	str	r3, [r4, #4]
   3deec:	mov	r3, #16384	; 0x4000
   3def0:	str	r3, [r4, #8]
   3def4:	str	r0, [r4, #20]
   3def8:	add	r0, r0, r3
   3defc:	str	r0, [r4, #16]
   3df00:	mov	r0, #0
   3df04:	ldrd	r4, [sp]
   3df08:	ldr	r6, [sp, #8]
   3df0c:	add	sp, sp, #12
   3df10:	pop	{pc}		; (ldr pc, [sp], #4)
   3df14:	movw	r3, #21316	; 0x5344
   3df18:	movt	r3, #5
   3df1c:	ldr	r5, [r3]
   3df20:	b	3deb8 <flatcc_json_printer_init@@Base+0x28>
   3df24:	mvn	r0, #0
   3df28:	b	3df04 <flatcc_json_printer_init@@Base+0x74>

0003df2c <flatcc_json_printer_init_buffer@@Base>:
   3df2c:	strd	r4, [sp, #-16]!
   3df30:	str	r6, [sp, #8]
   3df34:	str	lr, [sp, #12]
   3df38:	cmp	r2, #63	; 0x3f
   3df3c:	bls	3df98 <flatcc_json_printer_init_buffer@@Base+0x6c>
   3df40:	mov	r4, r0
   3df44:	mov	r6, r1
   3df48:	mov	r5, r2
   3df4c:	mov	r2, #32
   3df50:	mov	r1, #0
   3df54:	add	r0, r0, #12
   3df58:	bl	1459c <memset@plt>
   3df5c:	str	r6, [r4]
   3df60:	str	r5, [r4, #4]
   3df64:	sub	r5, r5, #64	; 0x40
   3df68:	str	r5, [r4, #8]
   3df6c:	str	r6, [r4, #20]
   3df70:	add	r5, r6, r5
   3df74:	str	r5, [r4, #16]
   3df78:	movw	r3, #6384	; 0x18f0
   3df7c:	movt	r3, #3
   3df80:	str	r3, [r4, #44]	; 0x2c
   3df84:	mov	r0, #0
   3df88:	ldrd	r4, [sp]
   3df8c:	ldr	r6, [sp, #8]
   3df90:	add	sp, sp, #12
   3df94:	pop	{pc}		; (ldr pc, [sp], #4)
   3df98:	ldr	r3, [pc, #20]	; 3dfb4 <flatcc_json_printer_init_buffer@@Base+0x88>
   3df9c:	movw	r2, #1165	; 0x48d
   3dfa0:	movw	r1, #19276	; 0x4b4c
   3dfa4:	movt	r1, #4
   3dfa8:	movw	r0, #19668	; 0x4cd4
   3dfac:	movt	r0, #4
   3dfb0:	bl	145f0 <__assert_fail@plt>
   3dfb4:	andeq	r4, r4, r4, lsr #21

0003dfb8 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   3dfb8:	strd	r4, [sp, #-16]!
   3dfbc:	str	r6, [sp, #8]
   3dfc0:	str	lr, [sp, #12]
   3dfc4:	mov	r5, r0
   3dfc8:	cmp	r1, #0
   3dfcc:	moveq	r4, #4096	; 0x1000
   3dfd0:	beq	3dfe0 <flatcc_json_printer_init_dynamic_buffer@@Base+0x28>
   3dfd4:	cmp	r1, #64	; 0x40
   3dfd8:	movcs	r4, r1
   3dfdc:	movcc	r4, #64	; 0x40
   3dfe0:	mov	r2, #32
   3dfe4:	mov	r1, #0
   3dfe8:	add	r0, r5, #12
   3dfec:	bl	1459c <memset@plt>
   3dff0:	mov	r0, r4
   3dff4:	bl	14554 <malloc@plt>
   3dff8:	str	r0, [r5]
   3dffc:	mov	r3, #1
   3e000:	strb	r3, [r5, #24]
   3e004:	str	r4, [r5, #4]
   3e008:	sub	r4, r4, #64	; 0x40
   3e00c:	str	r4, [r5, #8]
   3e010:	str	r0, [r5, #20]
   3e014:	add	r4, r0, r4
   3e018:	str	r4, [r5, #16]
   3e01c:	movw	r3, #7680	; 0x1e00
   3e020:	movt	r3, #3
   3e024:	str	r3, [r5, #44]	; 0x2c
   3e028:	cmp	r0, #0
   3e02c:	movne	r0, #0
   3e030:	beq	3e044 <flatcc_json_printer_init_dynamic_buffer@@Base+0x8c>
   3e034:	ldrd	r4, [sp]
   3e038:	ldr	r6, [sp, #8]
   3e03c:	add	sp, sp, #12
   3e040:	pop	{pc}		; (ldr pc, [sp], #4)
   3e044:	ldr	r3, [r5, #36]	; 0x24
   3e048:	cmp	r3, #0
   3e04c:	moveq	r3, #3
   3e050:	streq	r3, [r5, #36]	; 0x24
   3e054:	mvn	r0, #0
   3e058:	b	3e034 <flatcc_json_printer_init_dynamic_buffer@@Base+0x7c>

0003e05c <flatcc_json_printer_get_buffer@@Base>:
   3e05c:	strd	r4, [sp, #-16]!
   3e060:	str	r6, [sp, #8]
   3e064:	str	lr, [sp, #12]
   3e068:	mov	r4, r0
   3e06c:	mov	r5, r1
   3e070:	ldr	r3, [r0, #44]	; 0x2c
   3e074:	mov	r1, #0
   3e078:	blx	r3
   3e07c:	cmp	r5, #0
   3e080:	beq	3e094 <flatcc_json_printer_get_buffer@@Base+0x38>
   3e084:	ldr	r3, [r4, #20]
   3e088:	ldr	r2, [r4]
   3e08c:	sub	r3, r3, r2
   3e090:	str	r3, [r5]
   3e094:	ldr	r0, [r4]
   3e098:	ldrd	r4, [sp]
   3e09c:	ldr	r6, [sp, #8]
   3e0a0:	add	sp, sp, #12
   3e0a4:	pop	{pc}		; (ldr pc, [sp], #4)

0003e0a8 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   3e0a8:	strd	r4, [sp, #-16]!
   3e0ac:	str	r6, [sp, #8]
   3e0b0:	str	lr, [sp, #12]
   3e0b4:	mov	r5, r0
   3e0b8:	bl	3e05c <flatcc_json_printer_get_buffer@@Base>
   3e0bc:	mov	r4, r0
   3e0c0:	mov	r2, #48	; 0x30
   3e0c4:	mov	r1, #0
   3e0c8:	mov	r0, r5
   3e0cc:	bl	1459c <memset@plt>
   3e0d0:	mov	r0, r4
   3e0d4:	ldrd	r4, [sp]
   3e0d8:	ldr	r6, [sp, #8]
   3e0dc:	add	sp, sp, #12
   3e0e0:	pop	{pc}		; (ldr pc, [sp], #4)

0003e0e4 <flatcc_json_printer_clear@@Base>:
   3e0e4:	str	r4, [sp, #-8]!
   3e0e8:	str	lr, [sp, #4]
   3e0ec:	mov	r4, r0
   3e0f0:	ldrb	r3, [r0, #24]
   3e0f4:	cmp	r3, #0
   3e0f8:	beq	3e10c <flatcc_json_printer_clear@@Base+0x28>
   3e0fc:	ldr	r0, [r0]
   3e100:	cmp	r0, #0
   3e104:	beq	3e10c <flatcc_json_printer_clear@@Base+0x28>
   3e108:	bl	14518 <free@plt>
   3e10c:	mov	r2, #48	; 0x30
   3e110:	mov	r1, #0
   3e114:	mov	r0, r4
   3e118:	bl	1459c <memset@plt>
   3e11c:	ldr	r4, [sp]
   3e120:	add	sp, sp, #4
   3e124:	pop	{pc}		; (ldr pc, [sp], #4)
   3e128:	eor	r1, r1, #-2147483648	; 0x80000000
   3e12c:	b	3e134 <flatcc_json_printer_clear@@Base+0x50>
   3e130:	eor	r3, r3, #-2147483648	; 0x80000000
   3e134:	push	{r4, r5, lr}
   3e138:	lsl	r4, r1, #1
   3e13c:	lsl	r5, r3, #1
   3e140:	teq	r4, r5
   3e144:	teqeq	r0, r2
   3e148:	orrsne	ip, r4, r0
   3e14c:	orrsne	ip, r5, r2
   3e150:	mvnsne	ip, r4, asr #21
   3e154:	mvnsne	ip, r5, asr #21
   3e158:	beq	3e344 <flatcc_json_printer_clear@@Base+0x260>
   3e15c:	lsr	r4, r4, #21
   3e160:	rsbs	r5, r4, r5, lsr #21
   3e164:	rsblt	r5, r5, #0
   3e168:	ble	3e188 <flatcc_json_printer_clear@@Base+0xa4>
   3e16c:	add	r4, r4, r5
   3e170:	eor	r2, r0, r2
   3e174:	eor	r3, r1, r3
   3e178:	eor	r0, r2, r0
   3e17c:	eor	r1, r3, r1
   3e180:	eor	r2, r0, r2
   3e184:	eor	r3, r1, r3
   3e188:	cmp	r5, #54	; 0x36
   3e18c:	pophi	{r4, r5, pc}
   3e190:	tst	r1, #-2147483648	; 0x80000000
   3e194:	lsl	r1, r1, #12
   3e198:	mov	ip, #1048576	; 0x100000
   3e19c:	orr	r1, ip, r1, lsr #12
   3e1a0:	beq	3e1ac <flatcc_json_printer_clear@@Base+0xc8>
   3e1a4:	rsbs	r0, r0, #0
   3e1a8:	rsc	r1, r1, #0
   3e1ac:	tst	r3, #-2147483648	; 0x80000000
   3e1b0:	lsl	r3, r3, #12
   3e1b4:	orr	r3, ip, r3, lsr #12
   3e1b8:	beq	3e1c4 <flatcc_json_printer_clear@@Base+0xe0>
   3e1bc:	rsbs	r2, r2, #0
   3e1c0:	rsc	r3, r3, #0
   3e1c4:	teq	r4, r5
   3e1c8:	beq	3e32c <flatcc_json_printer_clear@@Base+0x248>
   3e1cc:	sub	r4, r4, #1
   3e1d0:	rsbs	lr, r5, #32
   3e1d4:	blt	3e1f0 <flatcc_json_printer_clear@@Base+0x10c>
   3e1d8:	lsl	ip, r2, lr
   3e1dc:	adds	r0, r0, r2, lsr r5
   3e1e0:	adc	r1, r1, #0
   3e1e4:	adds	r0, r0, r3, lsl lr
   3e1e8:	adcs	r1, r1, r3, asr r5
   3e1ec:	b	3e20c <flatcc_json_printer_clear@@Base+0x128>
   3e1f0:	sub	r5, r5, #32
   3e1f4:	add	lr, lr, #32
   3e1f8:	cmp	r2, #1
   3e1fc:	lsl	ip, r3, lr
   3e200:	orrcs	ip, ip, #2
   3e204:	adds	r0, r0, r3, asr r5
   3e208:	adcs	r1, r1, r3, asr #31
   3e20c:	and	r5, r1, #-2147483648	; 0x80000000
   3e210:	bpl	3e220 <flatcc_json_printer_clear@@Base+0x13c>
   3e214:	rsbs	ip, ip, #0
   3e218:	rscs	r0, r0, #0
   3e21c:	rsc	r1, r1, #0
   3e220:	cmp	r1, #1048576	; 0x100000
   3e224:	bcc	3e264 <flatcc_json_printer_clear@@Base+0x180>
   3e228:	cmp	r1, #2097152	; 0x200000
   3e22c:	bcc	3e24c <flatcc_json_printer_clear@@Base+0x168>
   3e230:	lsrs	r1, r1, #1
   3e234:	rrxs	r0, r0
   3e238:	rrx	ip, ip
   3e23c:	add	r4, r4, #1
   3e240:	lsl	r2, r4, #21
   3e244:	cmn	r2, #4194304	; 0x400000
   3e248:	bcs	3e3a4 <flatcc_json_printer_clear@@Base+0x2c0>
   3e24c:	cmp	ip, #-2147483648	; 0x80000000
   3e250:	lsrseq	ip, r0, #1
   3e254:	adcs	r0, r0, #0
   3e258:	adc	r1, r1, r4, lsl #20
   3e25c:	orr	r1, r1, r5
   3e260:	pop	{r4, r5, pc}
   3e264:	lsls	ip, ip, #1
   3e268:	adcs	r0, r0, r0
   3e26c:	adc	r1, r1, r1
   3e270:	tst	r1, #1048576	; 0x100000
   3e274:	sub	r4, r4, #1
   3e278:	bne	3e24c <flatcc_json_printer_clear@@Base+0x168>
   3e27c:	teq	r1, #0
   3e280:	moveq	r1, r0
   3e284:	moveq	r0, #0
   3e288:	clz	r3, r1
   3e28c:	addeq	r3, r3, #32
   3e290:	sub	r3, r3, #11
   3e294:	subs	r2, r3, #32
   3e298:	bge	3e2bc <flatcc_json_printer_clear@@Base+0x1d8>
   3e29c:	adds	r2, r2, #12
   3e2a0:	ble	3e2b8 <flatcc_json_printer_clear@@Base+0x1d4>
   3e2a4:	add	ip, r2, #20
   3e2a8:	rsb	r2, r2, #12
   3e2ac:	lsl	r0, r1, ip
   3e2b0:	lsr	r1, r1, r2
   3e2b4:	b	3e2cc <flatcc_json_printer_clear@@Base+0x1e8>
   3e2b8:	add	r2, r2, #20
   3e2bc:	rsble	ip, r2, #32
   3e2c0:	lsl	r1, r1, r2
   3e2c4:	orrle	r1, r1, r0, lsr ip
   3e2c8:	lslle	r0, r0, r2
   3e2cc:	subs	r4, r4, r3
   3e2d0:	addge	r1, r1, r4, lsl #20
   3e2d4:	orrge	r1, r1, r5
   3e2d8:	popge	{r4, r5, pc}
   3e2dc:	mvn	r4, r4
   3e2e0:	subs	r4, r4, #31
   3e2e4:	bge	3e320 <flatcc_json_printer_clear@@Base+0x23c>
   3e2e8:	adds	r4, r4, #12
   3e2ec:	bgt	3e308 <flatcc_json_printer_clear@@Base+0x224>
   3e2f0:	add	r4, r4, #20
   3e2f4:	rsb	r2, r4, #32
   3e2f8:	lsr	r0, r0, r4
   3e2fc:	orr	r0, r0, r1, lsl r2
   3e300:	orr	r1, r5, r1, lsr r4
   3e304:	pop	{r4, r5, pc}
   3e308:	rsb	r4, r4, #12
   3e30c:	rsb	r2, r4, #32
   3e310:	lsr	r0, r0, r2
   3e314:	orr	r0, r0, r1, lsl r4
   3e318:	mov	r1, r5
   3e31c:	pop	{r4, r5, pc}
   3e320:	lsr	r0, r1, r4
   3e324:	mov	r1, r5
   3e328:	pop	{r4, r5, pc}
   3e32c:	teq	r4, #0
   3e330:	eor	r3, r3, #1048576	; 0x100000
   3e334:	eoreq	r1, r1, #1048576	; 0x100000
   3e338:	addeq	r4, r4, #1
   3e33c:	subne	r5, r5, #1
   3e340:	b	3e1cc <flatcc_json_printer_clear@@Base+0xe8>
   3e344:	mvns	ip, r4, asr #21
   3e348:	mvnsne	ip, r5, asr #21
   3e34c:	beq	3e3b4 <flatcc_json_printer_clear@@Base+0x2d0>
   3e350:	teq	r4, r5
   3e354:	teqeq	r0, r2
   3e358:	beq	3e36c <flatcc_json_printer_clear@@Base+0x288>
   3e35c:	orrs	ip, r4, r0
   3e360:	moveq	r1, r3
   3e364:	moveq	r0, r2
   3e368:	pop	{r4, r5, pc}
   3e36c:	teq	r1, r3
   3e370:	movne	r1, #0
   3e374:	movne	r0, #0
   3e378:	popne	{r4, r5, pc}
   3e37c:	lsrs	ip, r4, #21
   3e380:	bne	3e394 <flatcc_json_printer_clear@@Base+0x2b0>
   3e384:	lsls	r0, r0, #1
   3e388:	adcs	r1, r1, r1
   3e38c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3e390:	pop	{r4, r5, pc}
   3e394:	adds	r4, r4, #4194304	; 0x400000
   3e398:	addcc	r1, r1, #1048576	; 0x100000
   3e39c:	popcc	{r4, r5, pc}
   3e3a0:	and	r5, r1, #-2147483648	; 0x80000000
   3e3a4:	orr	r1, r5, #2130706432	; 0x7f000000
   3e3a8:	orr	r1, r1, #15728640	; 0xf00000
   3e3ac:	mov	r0, #0
   3e3b0:	pop	{r4, r5, pc}
   3e3b4:	mvns	ip, r4, asr #21
   3e3b8:	movne	r1, r3
   3e3bc:	movne	r0, r2
   3e3c0:	mvnseq	ip, r5, asr #21
   3e3c4:	movne	r3, r1
   3e3c8:	movne	r2, r0
   3e3cc:	orrs	r4, r0, r1, lsl #12
   3e3d0:	orrseq	r5, r2, r3, lsl #12
   3e3d4:	teqeq	r1, r3
   3e3d8:	orrne	r1, r1, #524288	; 0x80000
   3e3dc:	pop	{r4, r5, pc}
   3e3e0:	teq	r0, #0
   3e3e4:	moveq	r1, #0
   3e3e8:	bxeq	lr
   3e3ec:	push	{r4, r5, lr}
   3e3f0:	mov	r4, #1024	; 0x400
   3e3f4:	add	r4, r4, #50	; 0x32
   3e3f8:	mov	r5, #0
   3e3fc:	mov	r1, #0
   3e400:	b	3e27c <flatcc_json_printer_clear@@Base+0x198>
   3e404:	teq	r0, #0
   3e408:	moveq	r1, #0
   3e40c:	bxeq	lr
   3e410:	push	{r4, r5, lr}
   3e414:	mov	r4, #1024	; 0x400
   3e418:	add	r4, r4, #50	; 0x32
   3e41c:	ands	r5, r0, #-2147483648	; 0x80000000
   3e420:	rsbmi	r0, r0, #0
   3e424:	mov	r1, #0
   3e428:	b	3e27c <flatcc_json_printer_clear@@Base+0x198>
   3e42c:	lsls	r2, r0, #1
   3e430:	asr	r1, r2, #3
   3e434:	rrx	r1, r1
   3e438:	lsl	r0, r2, #28
   3e43c:	andsne	r3, r2, #-16777216	; 0xff000000
   3e440:	teqne	r3, #-16777216	; 0xff000000
   3e444:	eorne	r1, r1, #939524096	; 0x38000000
   3e448:	bxne	lr
   3e44c:	bics	r2, r2, #-16777216	; 0xff000000
   3e450:	bxeq	lr
   3e454:	teq	r3, #-16777216	; 0xff000000
   3e458:	orreq	r1, r1, #524288	; 0x80000
   3e45c:	bxeq	lr
   3e460:	push	{r4, r5, lr}
   3e464:	mov	r4, #896	; 0x380
   3e468:	and	r5, r1, #-2147483648	; 0x80000000
   3e46c:	bic	r1, r1, #-2147483648	; 0x80000000
   3e470:	b	3e27c <flatcc_json_printer_clear@@Base+0x198>
   3e474:	orrs	r2, r0, r1
   3e478:	bxeq	lr
   3e47c:	push	{r4, r5, lr}
   3e480:	mov	r5, #0
   3e484:	b	3e4a4 <flatcc_json_printer_clear@@Base+0x3c0>
   3e488:	orrs	r2, r0, r1
   3e48c:	bxeq	lr
   3e490:	push	{r4, r5, lr}
   3e494:	ands	r5, r1, #-2147483648	; 0x80000000
   3e498:	bpl	3e4a4 <flatcc_json_printer_clear@@Base+0x3c0>
   3e49c:	rsbs	r0, r0, #0
   3e4a0:	rsc	r1, r1, #0
   3e4a4:	mov	r4, #1024	; 0x400
   3e4a8:	add	r4, r4, #50	; 0x32
   3e4ac:	lsrs	ip, r1, #22
   3e4b0:	beq	3e220 <flatcc_json_printer_clear@@Base+0x13c>
   3e4b4:	mov	r2, #3
   3e4b8:	lsrs	ip, ip, #3
   3e4bc:	addne	r2, r2, #3
   3e4c0:	lsrs	ip, ip, #3
   3e4c4:	addne	r2, r2, #3
   3e4c8:	add	r2, r2, ip, lsr #3
   3e4cc:	rsb	r3, r2, #32
   3e4d0:	lsl	ip, r0, r3
   3e4d4:	lsr	r0, r0, r2
   3e4d8:	orr	r0, r0, r1, lsl r3
   3e4dc:	lsr	r1, r1, r2
   3e4e0:	add	r4, r4, r2
   3e4e4:	b	3e220 <flatcc_json_printer_clear@@Base+0x13c>
   3e4e8:	eor	r0, r0, #-2147483648	; 0x80000000
   3e4ec:	b	3e4f4 <flatcc_json_printer_clear@@Base+0x410>
   3e4f0:	eor	r1, r1, #-2147483648	; 0x80000000
   3e4f4:	lsls	r2, r0, #1
   3e4f8:	lslsne	r3, r1, #1
   3e4fc:	teqne	r2, r3
   3e500:	mvnsne	ip, r2, asr #24
   3e504:	mvnsne	ip, r3, asr #24
   3e508:	beq	3e600 <flatcc_json_printer_clear@@Base+0x51c>
   3e50c:	lsr	r2, r2, #24
   3e510:	rsbs	r3, r2, r3, lsr #24
   3e514:	addgt	r2, r2, r3
   3e518:	eorgt	r1, r0, r1
   3e51c:	eorgt	r0, r1, r0
   3e520:	eorgt	r1, r0, r1
   3e524:	rsblt	r3, r3, #0
   3e528:	cmp	r3, #25
   3e52c:	bxhi	lr
   3e530:	tst	r0, #-2147483648	; 0x80000000
   3e534:	orr	r0, r0, #8388608	; 0x800000
   3e538:	bic	r0, r0, #-16777216	; 0xff000000
   3e53c:	rsbne	r0, r0, #0
   3e540:	tst	r1, #-2147483648	; 0x80000000
   3e544:	orr	r1, r1, #8388608	; 0x800000
   3e548:	bic	r1, r1, #-16777216	; 0xff000000
   3e54c:	rsbne	r1, r1, #0
   3e550:	teq	r2, r3
   3e554:	beq	3e5e8 <flatcc_json_printer_clear@@Base+0x504>
   3e558:	sub	r2, r2, #1
   3e55c:	adds	r0, r0, r1, asr r3
   3e560:	rsb	r3, r3, #32
   3e564:	lsl	r1, r1, r3
   3e568:	and	r3, r0, #-2147483648	; 0x80000000
   3e56c:	bpl	3e578 <flatcc_json_printer_clear@@Base+0x494>
   3e570:	rsbs	r1, r1, #0
   3e574:	rsc	r0, r0, #0
   3e578:	cmp	r0, #8388608	; 0x800000
   3e57c:	bcc	3e5b0 <flatcc_json_printer_clear@@Base+0x4cc>
   3e580:	cmp	r0, #16777216	; 0x1000000
   3e584:	bcc	3e59c <flatcc_json_printer_clear@@Base+0x4b8>
   3e588:	lsrs	r0, r0, #1
   3e58c:	rrx	r1, r1
   3e590:	add	r2, r2, #1
   3e594:	cmp	r2, #254	; 0xfe
   3e598:	bcs	3e654 <flatcc_json_printer_clear@@Base+0x570>
   3e59c:	cmp	r1, #-2147483648	; 0x80000000
   3e5a0:	adc	r0, r0, r2, lsl #23
   3e5a4:	biceq	r0, r0, #1
   3e5a8:	orr	r0, r0, r3
   3e5ac:	bx	lr
   3e5b0:	lsls	r1, r1, #1
   3e5b4:	adc	r0, r0, r0
   3e5b8:	tst	r0, #8388608	; 0x800000
   3e5bc:	sub	r2, r2, #1
   3e5c0:	bne	3e59c <flatcc_json_printer_clear@@Base+0x4b8>
   3e5c4:	clz	ip, r0
   3e5c8:	sub	ip, ip, #8
   3e5cc:	subs	r2, r2, ip
   3e5d0:	lsl	r0, r0, ip
   3e5d4:	addge	r0, r0, r2, lsl #23
   3e5d8:	rsblt	r2, r2, #0
   3e5dc:	orrge	r0, r0, r3
   3e5e0:	orrlt	r0, r3, r0, lsr r2
   3e5e4:	bx	lr
   3e5e8:	teq	r2, #0
   3e5ec:	eor	r1, r1, #8388608	; 0x800000
   3e5f0:	eoreq	r0, r0, #8388608	; 0x800000
   3e5f4:	addeq	r2, r2, #1
   3e5f8:	subne	r3, r3, #1
   3e5fc:	b	3e558 <flatcc_json_printer_clear@@Base+0x474>
   3e600:	lsl	r3, r1, #1
   3e604:	mvns	ip, r2, asr #24
   3e608:	mvnsne	ip, r3, asr #24
   3e60c:	beq	3e660 <flatcc_json_printer_clear@@Base+0x57c>
   3e610:	teq	r2, r3
   3e614:	beq	3e624 <flatcc_json_printer_clear@@Base+0x540>
   3e618:	teq	r2, #0
   3e61c:	moveq	r0, r1
   3e620:	bx	lr
   3e624:	teq	r0, r1
   3e628:	movne	r0, #0
   3e62c:	bxne	lr
   3e630:	tst	r2, #-16777216	; 0xff000000
   3e634:	bne	3e644 <flatcc_json_printer_clear@@Base+0x560>
   3e638:	lsls	r0, r0, #1
   3e63c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   3e640:	bx	lr
   3e644:	adds	r2, r2, #33554432	; 0x2000000
   3e648:	addcc	r0, r0, #8388608	; 0x800000
   3e64c:	bxcc	lr
   3e650:	and	r3, r0, #-2147483648	; 0x80000000
   3e654:	orr	r0, r3, #2130706432	; 0x7f000000
   3e658:	orr	r0, r0, #8388608	; 0x800000
   3e65c:	bx	lr
   3e660:	mvns	r2, r2, asr #24
   3e664:	movne	r0, r1
   3e668:	mvnseq	r3, r3, asr #24
   3e66c:	movne	r1, r0
   3e670:	lsls	r2, r0, #9
   3e674:	lslseq	r3, r1, #9
   3e678:	teqeq	r0, r1
   3e67c:	orrne	r0, r0, #4194304	; 0x400000
   3e680:	bx	lr
   3e684:	mov	r3, #0
   3e688:	b	3e694 <flatcc_json_printer_clear@@Base+0x5b0>
   3e68c:	ands	r3, r0, #-2147483648	; 0x80000000
   3e690:	rsbmi	r0, r0, #0
   3e694:	movs	ip, r0
   3e698:	bxeq	lr
   3e69c:	orr	r3, r3, #1258291200	; 0x4b000000
   3e6a0:	mov	r1, r0
   3e6a4:	mov	r0, #0
   3e6a8:	b	3e6ec <flatcc_json_printer_clear@@Base+0x608>
   3e6ac:	orrs	r2, r0, r1
   3e6b0:	bxeq	lr
   3e6b4:	mov	r3, #0
   3e6b8:	b	3e6d4 <flatcc_json_printer_clear@@Base+0x5f0>
   3e6bc:	orrs	r2, r0, r1
   3e6c0:	bxeq	lr
   3e6c4:	ands	r3, r1, #-2147483648	; 0x80000000
   3e6c8:	bpl	3e6d4 <flatcc_json_printer_clear@@Base+0x5f0>
   3e6cc:	rsbs	r0, r0, #0
   3e6d0:	rsc	r1, r1, #0
   3e6d4:	movs	ip, r1
   3e6d8:	moveq	ip, r0
   3e6dc:	moveq	r1, r0
   3e6e0:	moveq	r0, #0
   3e6e4:	orr	r3, r3, #1526726656	; 0x5b000000
   3e6e8:	subeq	r3, r3, #268435456	; 0x10000000
   3e6ec:	sub	r3, r3, #8388608	; 0x800000
   3e6f0:	clz	r2, ip
   3e6f4:	subs	r2, r2, #8
   3e6f8:	sub	r3, r3, r2, lsl #23
   3e6fc:	blt	3e71c <flatcc_json_printer_clear@@Base+0x638>
   3e700:	add	r3, r3, r1, lsl r2
   3e704:	lsl	ip, r0, r2
   3e708:	rsb	r2, r2, #32
   3e70c:	cmp	ip, #-2147483648	; 0x80000000
   3e710:	adc	r0, r3, r0, lsr r2
   3e714:	biceq	r0, r0, #1
   3e718:	bx	lr
   3e71c:	add	r2, r2, #32
   3e720:	lsl	ip, r1, r2
   3e724:	rsb	r2, r2, #32
   3e728:	orrs	r0, r0, ip, lsl #1
   3e72c:	adc	r0, r3, r1, lsr r2
   3e730:	biceq	r0, r0, ip, lsr #31
   3e734:	bx	lr
   3e738:	cmp	r3, #0
   3e73c:	cmpeq	r2, #0
   3e740:	bne	3e758 <flatcc_json_printer_clear@@Base+0x674>
   3e744:	cmp	r1, #0
   3e748:	cmpeq	r0, #0
   3e74c:	mvnne	r1, #0
   3e750:	mvnne	r0, #0
   3e754:	b	3e774 <flatcc_json_printer_clear@@Base+0x690>
   3e758:	sub	sp, sp, #8
   3e75c:	push	{sp, lr}
   3e760:	bl	3e784 <flatcc_json_printer_clear@@Base+0x6a0>
   3e764:	ldr	lr, [sp, #4]
   3e768:	add	sp, sp, #8
   3e76c:	pop	{r2, r3}
   3e770:	bx	lr
   3e774:	push	{r1, lr}
   3e778:	mov	r0, #8
   3e77c:	bl	144f4 <raise@plt>
   3e780:	pop	{r1, pc}
   3e784:	cmp	r1, r3
   3e788:	cmpeq	r0, r2
   3e78c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e790:	mov	r4, r0
   3e794:	movcc	r0, #0
   3e798:	mov	r5, r1
   3e79c:	ldr	lr, [sp, #36]	; 0x24
   3e7a0:	movcc	r1, r0
   3e7a4:	bcc	3e8a0 <flatcc_json_printer_clear@@Base+0x7bc>
   3e7a8:	cmp	r3, #0
   3e7ac:	clzeq	ip, r2
   3e7b0:	clzne	ip, r3
   3e7b4:	addeq	ip, ip, #32
   3e7b8:	cmp	r5, #0
   3e7bc:	clzeq	r1, r4
   3e7c0:	addeq	r1, r1, #32
   3e7c4:	clzne	r1, r5
   3e7c8:	sub	ip, ip, r1
   3e7cc:	sub	sl, ip, #32
   3e7d0:	lsl	r9, r3, ip
   3e7d4:	rsb	fp, ip, #32
   3e7d8:	orr	r9, r9, r2, lsl sl
   3e7dc:	orr	r9, r9, r2, lsr fp
   3e7e0:	lsl	r8, r2, ip
   3e7e4:	cmp	r5, r9
   3e7e8:	cmpeq	r4, r8
   3e7ec:	movcc	r0, #0
   3e7f0:	movcc	r1, r0
   3e7f4:	bcc	3e810 <flatcc_json_printer_clear@@Base+0x72c>
   3e7f8:	mov	r0, #1
   3e7fc:	subs	r4, r4, r8
   3e800:	lsl	r1, r0, sl
   3e804:	orr	r1, r1, r0, lsr fp
   3e808:	lsl	r0, r0, ip
   3e80c:	sbc	r5, r5, r9
   3e810:	cmp	ip, #0
   3e814:	beq	3e8a0 <flatcc_json_printer_clear@@Base+0x7bc>
   3e818:	lsr	r6, r8, #1
   3e81c:	orr	r6, r6, r9, lsl #31
   3e820:	lsr	r7, r9, #1
   3e824:	mov	r2, ip
   3e828:	b	3e84c <flatcc_json_printer_clear@@Base+0x768>
   3e82c:	subs	r3, r4, r6
   3e830:	sbc	r8, r5, r7
   3e834:	adds	r3, r3, r3
   3e838:	adc	r8, r8, r8
   3e83c:	adds	r4, r3, #1
   3e840:	adc	r5, r8, #0
   3e844:	subs	r2, r2, #1
   3e848:	beq	3e868 <flatcc_json_printer_clear@@Base+0x784>
   3e84c:	cmp	r5, r7
   3e850:	cmpeq	r4, r6
   3e854:	bcs	3e82c <flatcc_json_printer_clear@@Base+0x748>
   3e858:	adds	r4, r4, r4
   3e85c:	adc	r5, r5, r5
   3e860:	subs	r2, r2, #1
   3e864:	bne	3e84c <flatcc_json_printer_clear@@Base+0x768>
   3e868:	lsr	r3, r4, ip
   3e86c:	orr	r3, r3, r5, lsl fp
   3e870:	lsr	r2, r5, ip
   3e874:	orr	r3, r3, r5, lsr sl
   3e878:	adds	r0, r0, r4
   3e87c:	mov	r4, r3
   3e880:	lsl	r3, r2, ip
   3e884:	orr	r3, r3, r4, lsl sl
   3e888:	lsl	ip, r4, ip
   3e88c:	orr	r3, r3, r4, lsr fp
   3e890:	adc	r1, r1, r5
   3e894:	subs	r0, r0, ip
   3e898:	mov	r5, r2
   3e89c:	sbc	r1, r1, r3
   3e8a0:	cmp	lr, #0
   3e8a4:	strdne	r4, [lr]
   3e8a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003e8ac <__libc_csu_init@@Base>:
   3e8ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e8b0:	mov	r7, r0
   3e8b4:	ldr	r6, [pc, #72]	; 3e904 <__libc_csu_init@@Base+0x58>
   3e8b8:	ldr	r5, [pc, #72]	; 3e908 <__libc_csu_init@@Base+0x5c>
   3e8bc:	add	r6, pc, r6
   3e8c0:	add	r5, pc, r5
   3e8c4:	sub	r6, r6, r5
   3e8c8:	mov	r8, r1
   3e8cc:	mov	r9, r2
   3e8d0:	bl	144d4 <raise@plt-0x20>
   3e8d4:	asrs	r6, r6, #2
   3e8d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e8dc:	mov	r4, #0
   3e8e0:	add	r4, r4, #1
   3e8e4:	ldr	r3, [r5], #4
   3e8e8:	mov	r2, r9
   3e8ec:	mov	r1, r8
   3e8f0:	mov	r0, r7
   3e8f4:	blx	r3
   3e8f8:	cmp	r6, r4
   3e8fc:	bne	3e8e0 <__libc_csu_init@@Base+0x34>
   3e900:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e904:	andeq	r6, r1, r0, asr r6
   3e908:	andeq	r6, r1, r8, asr #12

0003e90c <__libc_csu_fini@@Base>:
   3e90c:	bx	lr

Disassembly of section .fini:

0003e910 <.fini>:
   3e910:	push	{r3, lr}
   3e914:	pop	{r3, pc}
