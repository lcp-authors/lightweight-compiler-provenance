
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	114a4 <_start@@Base+0x3c>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <coda_match_filefilter@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <coda_match_filefilter@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r2, r1, r4, asr #6

00010cc0 <coda_match_filefilter@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #73728	; 0x12000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <coda_expression_eval_integer@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #73728	; 0x12000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <strcmp@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #73728	; 0x12000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <printf@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #73728	; 0x12000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <coda_set_error@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #73728	; 0x12000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <coda_open@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #73728	; 0x12000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <free@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #73728	; 0x12000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <coda_set_definition_path_conditional@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #73728	; 0x12000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <coda_set_definition_path@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #73728	; 0x12000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <fwrite@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #73728	; 0x12000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <coda_expression_eval_bool@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #73728	; 0x12000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <coda_cursor_set_product@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #73728	; 0x12000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <coda_done@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #73728	; 0x12000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <puts@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #73728	; 0x12000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <__libc_start_main@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #73728	; 0x12000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <coda_expression_delete@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #73728	; 0x12000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <__gmon_start__@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #73728	; 0x12000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <__ctype_b_loc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #73728	; 0x12000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <exit@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #73728	; 0x12000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <strlen@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #73728	; 0x12000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <fprintf@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #73728	; 0x12000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <coda_init@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #73728	; 0x12000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <coda_set_option_perform_conversions@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #73728	; 0x12000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <coda_expression_eval_string@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #73728	; 0x12000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <putchar@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #73728	; 0x12000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <coda_expression_get_type@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #73728	; 0x12000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <coda_close@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #73728	; 0x12000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <coda_expression_is_constant@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #73728	; 0x12000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <coda_expression_eval_float@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #73728	; 0x12000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <coda_expression_eval_node@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #73728	; 0x12000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <coda_errno_to_string@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #73728	; 0x12000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <coda_expression_get_type_name@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #73728	; 0x12000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <coda_expression_from_string@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #73728	; 0x12000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <coda_get_libcoda_version@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #73728	; 0x12000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <coda_get_errno@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #73728	; 0x12000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <abort@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #73728	; 0x12000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <coda_str64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #73728	; 0x12000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <__assert_fail@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #73728	; 0x12000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

Disassembly of section .text:

00010e88 <main@@Base-0x1b8>:
   10e88:	push	{r4, lr}
   10e8c:	ldr	r0, [pc, #300]	; 10fc0 <__assert_fail@plt+0x144>
   10e90:	bl	10d5c <puts@plt>
   10e94:	ldr	r0, [pc, #296]	; 10fc4 <__assert_fail@plt+0x148>
   10e98:	bl	10d5c <puts@plt>
   10e9c:	ldr	r0, [pc, #292]	; 10fc8 <__assert_fail@plt+0x14c>
   10ea0:	bl	10d5c <puts@plt>
   10ea4:	ldr	r0, [pc, #288]	; 10fcc <__assert_fail@plt+0x150>
   10ea8:	bl	10d5c <puts@plt>
   10eac:	ldr	r0, [pc, #284]	; 10fd0 <__assert_fail@plt+0x154>
   10eb0:	bl	10d5c <puts@plt>
   10eb4:	ldr	r0, [pc, #280]	; 10fd4 <__assert_fail@plt+0x158>
   10eb8:	bl	10d5c <puts@plt>
   10ebc:	ldr	r0, [pc, #276]	; 10fd8 <__assert_fail@plt+0x15c>
   10ec0:	bl	10d5c <puts@plt>
   10ec4:	mov	r0, #10
   10ec8:	bl	10de0 <putchar@plt>
   10ecc:	ldr	r0, [pc, #264]	; 10fdc <__assert_fail@plt+0x160>
   10ed0:	bl	10d5c <puts@plt>
   10ed4:	ldr	r0, [pc, #260]	; 10fe0 <__assert_fail@plt+0x164>
   10ed8:	bl	10d5c <puts@plt>
   10edc:	ldr	r0, [pc, #256]	; 10fe4 <__assert_fail@plt+0x168>
   10ee0:	bl	10d5c <puts@plt>
   10ee4:	ldr	r0, [pc, #252]	; 10fe8 <__assert_fail@plt+0x16c>
   10ee8:	bl	10d5c <puts@plt>
   10eec:	ldr	r0, [pc, #248]	; 10fec <__assert_fail@plt+0x170>
   10ef0:	bl	10d5c <puts@plt>
   10ef4:	ldr	r0, [pc, #244]	; 10ff0 <__assert_fail@plt+0x174>
   10ef8:	bl	10d5c <puts@plt>
   10efc:	ldr	r0, [pc, #240]	; 10ff4 <__assert_fail@plt+0x178>
   10f00:	bl	10d5c <puts@plt>
   10f04:	ldr	r0, [pc, #236]	; 10ff8 <__assert_fail@plt+0x17c>
   10f08:	bl	10d5c <puts@plt>
   10f0c:	ldr	r0, [pc, #232]	; 10ffc <__assert_fail@plt+0x180>
   10f10:	bl	10d5c <puts@plt>
   10f14:	ldr	r0, [pc, #228]	; 11000 <__assert_fail@plt+0x184>
   10f18:	bl	10d5c <puts@plt>
   10f1c:	ldr	r0, [pc, #224]	; 11004 <__assert_fail@plt+0x188>
   10f20:	bl	10d5c <puts@plt>
   10f24:	ldr	r0, [pc, #220]	; 11008 <__assert_fail@plt+0x18c>
   10f28:	bl	10d5c <puts@plt>
   10f2c:	mov	r0, #10
   10f30:	bl	10de0 <putchar@plt>
   10f34:	ldr	r0, [pc, #208]	; 1100c <__assert_fail@plt+0x190>
   10f38:	bl	10d5c <puts@plt>
   10f3c:	ldr	r0, [pc, #204]	; 11010 <__assert_fail@plt+0x194>
   10f40:	bl	10d5c <puts@plt>
   10f44:	mov	r0, #10
   10f48:	bl	10de0 <putchar@plt>
   10f4c:	ldr	r0, [pc, #192]	; 11014 <__assert_fail@plt+0x198>
   10f50:	bl	10d5c <puts@plt>
   10f54:	ldr	r0, [pc, #188]	; 11018 <__assert_fail@plt+0x19c>
   10f58:	bl	10d5c <puts@plt>
   10f5c:	mov	r0, #10
   10f60:	bl	10de0 <putchar@plt>
   10f64:	ldr	r0, [pc, #176]	; 1101c <__assert_fail@plt+0x1a0>
   10f68:	bl	10d5c <puts@plt>
   10f6c:	ldr	r0, [pc, #172]	; 11020 <__assert_fail@plt+0x1a4>
   10f70:	bl	10d5c <puts@plt>
   10f74:	mov	r0, #10
   10f78:	bl	10de0 <putchar@plt>
   10f7c:	ldr	r0, [pc, #160]	; 11024 <__assert_fail@plt+0x1a8>
   10f80:	bl	10d5c <puts@plt>
   10f84:	ldr	r0, [pc, #156]	; 11028 <__assert_fail@plt+0x1ac>
   10f88:	bl	10d5c <puts@plt>
   10f8c:	ldr	r0, [pc, #152]	; 1102c <__assert_fail@plt+0x1b0>
   10f90:	bl	10d5c <puts@plt>
   10f94:	ldr	r0, [pc, #148]	; 11030 <__assert_fail@plt+0x1b4>
   10f98:	bl	10d5c <puts@plt>
   10f9c:	ldr	r0, [pc, #144]	; 11034 <__assert_fail@plt+0x1b8>
   10fa0:	bl	10d5c <puts@plt>
   10fa4:	ldr	r0, [pc, #140]	; 11038 <__assert_fail@plt+0x1bc>
   10fa8:	bl	10d5c <puts@plt>
   10fac:	ldr	r0, [pc, #136]	; 1103c <__assert_fail@plt+0x1c0>
   10fb0:	bl	10d5c <puts@plt>
   10fb4:	mov	r0, #10
   10fb8:	pop	{r4, lr}
   10fbc:	b	10de0 <putchar@plt>
   10fc0:	andeq	r1, r1, r8, asr #24
   10fc4:	andeq	r1, r1, r0, asr ip
   10fc8:	andeq	r1, r1, r0, lsr #25
   10fcc:	strdeq	r1, [r1], -r0
   10fd0:	andeq	r1, r1, r4, lsl sp
   10fd4:	andeq	r1, r1, r0, ror #26
   10fd8:	andeq	r1, r1, ip, lsr #27
   10fdc:	ldrdeq	r1, [r1], -ip
   10fe0:	strdeq	r1, [r1], -r0
   10fe4:	andeq	r1, r1, r8, lsl #28
   10fe8:	andeq	r1, r1, r8, asr lr
   10fec:	andeq	r1, r1, r8, lsr #29
   10ff0:	ldrdeq	r1, [r1], -r0
   10ff4:	andeq	r1, r1, ip, lsl #30
   10ff8:	andeq	r1, r1, r4, lsr #30
   10ffc:	andeq	r1, r1, r0, ror pc
   11000:			; <UNDEFINED> instruction: 0x00011fbc
   11004:	ldrdeq	r1, [r1], -ip
   11008:	andeq	r2, r1, r8, lsr #32
   1100c:	andeq	r2, r1, r8, asr r0
   11010:	andeq	r2, r1, r8, lsr #1
   11014:	andeq	r2, r1, r0, asr #1
   11018:	ldrdeq	r2, [r1], -r8
   1101c:	strdeq	r2, [r1], -r8
   11020:	andeq	r2, r1, r4, lsl r1
   11024:	andeq	r2, r1, r8, asr #2
   11028:	muleq	r1, r4, r1
   1102c:	andeq	r2, r1, r0, ror #3
   11030:	andeq	r2, r1, r0, lsl r2
   11034:	andeq	r2, r1, ip, asr r2
   11038:	andeq	r2, r1, r8, lsr #5
   1103c:	andeq	r2, r1, r8, ror #5

00011040 <main@@Base>:
   11040:	cmp	r0, #1
   11044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11048:	sub	sp, sp, #20
   1104c:	beq	1136c <main@@Base+0x32c>
   11050:	ldr	r4, [r1, #4]
   11054:	mov	r6, r0
   11058:	mov	r7, r1
   1105c:	mov	r0, r4
   11060:	ldr	r1, [pc, #928]	; 11408 <main@@Base+0x3c8>
   11064:	bl	10cd8 <strcmp@plt>
   11068:	cmp	r0, #0
   1106c:	beq	1136c <main@@Base+0x32c>
   11070:	ldr	r1, [pc, #916]	; 1140c <main@@Base+0x3cc>
   11074:	mov	r0, r4
   11078:	bl	10cd8 <strcmp@plt>
   1107c:	cmp	r0, #0
   11080:	beq	1136c <main@@Base+0x32c>
   11084:	ldr	r1, [pc, #900]	; 11410 <main@@Base+0x3d0>
   11088:	mov	r0, r4
   1108c:	bl	10cd8 <strcmp@plt>
   11090:	cmp	r0, #0
   11094:	beq	11318 <main@@Base+0x2d8>
   11098:	ldr	r1, [pc, #884]	; 11414 <main@@Base+0x3d4>
   1109c:	mov	r0, r4
   110a0:	bl	10cd8 <strcmp@plt>
   110a4:	cmp	r0, #0
   110a8:	beq	11318 <main@@Base+0x2d8>
   110ac:	cmp	r6, #2
   110b0:	ble	110c8 <main@@Base+0x88>
   110b4:	mov	r0, r4
   110b8:	ldr	r1, [pc, #856]	; 11418 <main@@Base+0x3d8>
   110bc:	bl	10cd8 <strcmp@plt>
   110c0:	cmp	r0, #0
   110c4:	beq	111f4 <main@@Base+0x1b4>
   110c8:	ldr	r2, [pc, #844]	; 1141c <main@@Base+0x3dc>
   110cc:	mov	r1, #0
   110d0:	ldr	r0, [r7]
   110d4:	bl	10d14 <coda_set_definition_path_conditional@plt>
   110d8:	cmp	r0, #0
   110dc:	moveq	fp, #1
   110e0:	bne	11340 <main@@Base+0x300>
   110e4:	cmp	r6, fp
   110e8:	ble	111c8 <main@@Base+0x188>
   110ec:	mov	r3, #1
   110f0:	ldr	r8, [pc, #808]	; 11420 <main@@Base+0x3e0>
   110f4:	ldr	sl, [pc, #808]	; 11424 <main@@Base+0x3e4>
   110f8:	mov	r9, #0
   110fc:	str	r3, [sp, #8]
   11100:	b	1119c <main@@Base+0x15c>
   11104:	mov	r1, sl
   11108:	mov	r0, r4
   1110c:	bl	10cd8 <strcmp@plt>
   11110:	cmp	r0, #0
   11114:	beq	111b8 <main@@Base+0x178>
   11118:	ldr	r1, [pc, #776]	; 11428 <main@@Base+0x3e8>
   1111c:	mov	r0, r4
   11120:	bl	10cd8 <strcmp@plt>
   11124:	cmp	r0, #0
   11128:	beq	111ec <main@@Base+0x1ac>
   1112c:	ldr	r1, [pc, #760]	; 1142c <main@@Base+0x3ec>
   11130:	mov	r0, r4
   11134:	bl	10cd8 <strcmp@plt>
   11138:	cmp	r0, #0
   1113c:	beq	111ec <main@@Base+0x1ac>
   11140:	ldr	r1, [pc, #744]	; 11430 <main@@Base+0x3f0>
   11144:	mov	r0, r4
   11148:	bl	10cd8 <strcmp@plt>
   1114c:	cmp	r0, #0
   11150:	bne	11204 <main@@Base+0x1c4>
   11154:	add	r2, fp, #1
   11158:	cmp	r6, r2
   1115c:	str	r2, [sp, #12]
   11160:	ble	11204 <main@@Base+0x1c4>
   11164:	add	r5, r7, r5
   11168:	ldr	r0, [r5, #4]
   1116c:	ldrb	r1, [r0]
   11170:	cmp	r1, #45	; 0x2d
   11174:	beq	11204 <main@@Base+0x1c4>
   11178:	ldr	r1, [pc, #692]	; 11434 <main@@Base+0x3f4>
   1117c:	bl	10e40 <coda_expression_from_string@plt>
   11180:	ldr	r2, [sp, #12]
   11184:	cmp	r0, #0
   11188:	bne	11378 <main@@Base+0x338>
   1118c:	mov	fp, r2
   11190:	add	fp, fp, #1
   11194:	cmp	r6, fp
   11198:	ble	111c8 <main@@Base+0x188>
   1119c:	ldr	r4, [r7, fp, lsl #2]
   111a0:	mov	r1, r8
   111a4:	mov	r0, r4
   111a8:	bl	10cd8 <strcmp@plt>
   111ac:	lsl	r5, fp, #2
   111b0:	cmp	r0, #0
   111b4:	bne	11104 <main@@Base+0xc4>
   111b8:	add	fp, fp, #1
   111bc:	cmp	r6, fp
   111c0:	mov	r9, #1
   111c4:	bgt	1119c <main@@Base+0x15c>
   111c8:	ldr	r3, [pc, #616]	; 11438 <main@@Base+0x3f8>
   111cc:	mov	r2, #25
   111d0:	mov	r1, #1
   111d4:	ldr	r3, [r3]
   111d8:	ldr	r0, [pc, #604]	; 1143c <main@@Base+0x3fc>
   111dc:	bl	10d2c <fwrite@plt>
   111e0:	bl	10e88 <__assert_fail@plt+0xc>
   111e4:	mov	r0, #1
   111e8:	bl	10d98 <exit@plt>
   111ec:	str	r0, [sp, #8]
   111f0:	b	11190 <main@@Base+0x150>
   111f4:	ldr	r0, [r7, #8]
   111f8:	bl	10d20 <coda_set_definition_path@plt>
   111fc:	mov	fp, #3
   11200:	b	110e4 <main@@Base+0xa4>
   11204:	ldrb	r2, [r4]
   11208:	cmp	r2, #45	; 0x2d
   1120c:	beq	111c8 <main@@Base+0x188>
   11210:	ldr	r5, [pc, #552]	; 11440 <main@@Base+0x400>
   11214:	mov	r0, r4
   11218:	add	r1, r5, #4
   1121c:	bl	10e40 <coda_expression_from_string@plt>
   11220:	cmp	r0, #0
   11224:	bne	112ec <main@@Base+0x2ac>
   11228:	mov	r1, r5
   1122c:	ldr	r0, [r5, #4]
   11230:	bl	10dec <coda_expression_get_type@plt>
   11234:	cmp	r0, #0
   11238:	bne	11340 <main@@Base+0x300>
   1123c:	ldr	r0, [r5]
   11240:	sub	r2, r0, #4
   11244:	cmp	r2, #1
   11248:	bls	113e4 <main@@Base+0x3a4>
   1124c:	cmp	r9, #0
   11250:	bne	1128c <main@@Base+0x24c>
   11254:	add	fp, fp, #1
   11258:	cmp	r6, fp
   1125c:	bgt	112b0 <main@@Base+0x270>
   11260:	ldr	r3, [r5, #8]
   11264:	cmp	r3, #0
   11268:	bne	113c4 <main@@Base+0x384>
   1126c:	ldr	r0, [r5, #4]
   11270:	bl	10e04 <coda_expression_is_constant@plt>
   11274:	cmp	r0, #0
   11278:	beq	113a4 <main@@Base+0x364>
   1127c:	mov	r0, r9
   11280:	bl	11590 <_start@@Base+0x128>
   11284:	cmp	r0, #0
   11288:	bne	11340 <main@@Base+0x300>
   1128c:	ldr	r0, [r5, #4]
   11290:	bl	10d74 <coda_expression_delete@plt>
   11294:	ldr	r0, [r5, #8]
   11298:	cmp	r0, #0
   1129c:	beq	112a4 <main@@Base+0x264>
   112a0:	bl	10d74 <coda_expression_delete@plt>
   112a4:	mov	r0, #0
   112a8:	add	sp, sp, #20
   112ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112b0:	bl	10dbc <coda_init@plt>
   112b4:	cmp	r0, #0
   112b8:	bne	11340 <main@@Base+0x300>
   112bc:	ldr	r0, [sp, #8]
   112c0:	bl	10dc8 <coda_set_option_perform_conversions@plt>
   112c4:	str	r9, [sp]
   112c8:	add	r2, r7, fp, lsl #2
   112cc:	sub	r1, r6, fp
   112d0:	mov	r0, r9
   112d4:	ldr	r3, [pc, #360]	; 11444 <main@@Base+0x404>
   112d8:	bl	10cc0 <coda_match_filefilter@plt>
   112dc:	cmp	r0, #0
   112e0:	bne	11340 <main@@Base+0x300>
   112e4:	bl	10d50 <coda_done@plt>
   112e8:	b	1128c <main@@Base+0x24c>
   112ec:	ldr	r3, [pc, #324]	; 11438 <main@@Base+0x3f8>
   112f0:	ldr	r4, [r3]
   112f4:	bl	10e58 <coda_get_errno@plt>
   112f8:	ldr	r0, [r0]
   112fc:	bl	10e28 <coda_errno_to_string@plt>
   11300:	ldr	r1, [pc, #320]	; 11448 <main@@Base+0x408>
   11304:	mov	r2, r0
   11308:	mov	r0, r4
   1130c:	bl	10db0 <fprintf@plt>
   11310:	mov	r0, #1
   11314:	bl	10d98 <exit@plt>
   11318:	bl	10e4c <coda_get_libcoda_version@plt>
   1131c:	mov	r1, r0
   11320:	ldr	r0, [pc, #292]	; 1144c <main@@Base+0x40c>
   11324:	bl	10ce4 <printf@plt>
   11328:	ldr	r0, [pc, #288]	; 11450 <main@@Base+0x410>
   1132c:	bl	10d5c <puts@plt>
   11330:	mov	r0, #10
   11334:	bl	10de0 <putchar@plt>
   11338:	mov	r0, #0
   1133c:	bl	10d98 <exit@plt>
   11340:	ldr	r3, [pc, #240]	; 11438 <main@@Base+0x3f8>
   11344:	ldr	r4, [r3]
   11348:	bl	10e58 <coda_get_errno@plt>
   1134c:	ldr	r0, [r0]
   11350:	bl	10e28 <coda_errno_to_string@plt>
   11354:	ldr	r1, [pc, #248]	; 11454 <main@@Base+0x414>
   11358:	mov	r2, r0
   1135c:	mov	r0, r4
   11360:	bl	10db0 <fprintf@plt>
   11364:	mov	r0, #1
   11368:	bl	10d98 <exit@plt>
   1136c:	bl	10e88 <__assert_fail@plt+0xc>
   11370:	mov	r0, #0
   11374:	bl	10d98 <exit@plt>
   11378:	ldr	r3, [pc, #184]	; 11438 <main@@Base+0x3f8>
   1137c:	ldr	r4, [r3]
   11380:	bl	10e58 <coda_get_errno@plt>
   11384:	ldr	r0, [r0]
   11388:	bl	10e28 <coda_errno_to_string@plt>
   1138c:	ldr	r1, [pc, #196]	; 11458 <main@@Base+0x418>
   11390:	mov	r2, r0
   11394:	mov	r0, r4
   11398:	bl	10db0 <fprintf@plt>
   1139c:	mov	r0, #1
   113a0:	bl	10d98 <exit@plt>
   113a4:	ldr	r3, [pc, #140]	; 11438 <main@@Base+0x3f8>
   113a8:	mov	r2, #111	; 0x6f
   113ac:	mov	r1, #1
   113b0:	ldr	r3, [r3]
   113b4:	ldr	r0, [pc, #160]	; 1145c <main@@Base+0x41c>
   113b8:	bl	10d2c <fwrite@plt>
   113bc:	mov	r0, #1
   113c0:	bl	10d98 <exit@plt>
   113c4:	ldr	r3, [pc, #108]	; 11438 <main@@Base+0x3f8>
   113c8:	mov	r2, #96	; 0x60
   113cc:	mov	r1, #1
   113d0:	ldr	r3, [r3]
   113d4:	ldr	r0, [pc, #132]	; 11460 <main@@Base+0x420>
   113d8:	bl	10d2c <fwrite@plt>
   113dc:	mov	r0, #1
   113e0:	bl	10d98 <exit@plt>
   113e4:	ldr	r3, [pc, #76]	; 11438 <main@@Base+0x3f8>
   113e8:	ldr	r4, [r3]
   113ec:	bl	10e34 <coda_expression_get_type_name@plt>
   113f0:	ldr	r1, [pc, #108]	; 11464 <main@@Base+0x424>
   113f4:	mov	r2, r0
   113f8:	mov	r0, r4
   113fc:	bl	10db0 <fprintf@plt>
   11400:	mov	r0, #1
   11404:	bl	10d98 <exit@plt>
   11408:	strdeq	r2, [r1], -r4
   1140c:	ldrdeq	r2, [r1], -r0
   11410:	strdeq	r2, [r1], -r8
   11414:	strdeq	r2, [r1], -ip
   11418:	andeq	r2, r1, r8, asr #10
   1141c:	andeq	r2, r1, ip, asr #10
   11420:	andeq	r2, r1, r4, ror r5
   11424:	andeq	r1, r1, r0, lsl #28
   11428:	andeq	r2, r1, r8, ror r5
   1142c:			; <UNDEFINED> instruction: 0x00011eb8
   11430:	andeq	r2, r1, ip, ror r5
   11434:	andeq	r3, r2, r0, asr #1
   11438:	strheq	r3, [r2], -r0
   1143c:	andeq	r2, r1, r8, lsr #11
   11440:	strheq	r3, [r2], -r8
   11444:	andeq	r1, r1, r0, lsr fp
   11448:	andeq	r2, r1, r4, asr #11
   1144c:	andeq	r2, r1, r8, lsl #10
   11450:	andeq	r2, r1, r8, lsl r5
   11454:	andeq	r2, r1, r8, ror #10
   11458:	andeq	r2, r1, r0, lsl #11
   1145c:	andeq	r2, r1, r8, ror r6
   11460:	andeq	r2, r1, r4, lsl r6
   11464:	andeq	r2, r1, r4, ror #11

00011468 <_start@@Base>:
   11468:	mov	fp, #0
   1146c:	mov	lr, #0
   11470:	pop	{r1}		; (ldr r1, [sp], #4)
   11474:	mov	r2, sp
   11478:	push	{r2}		; (str r2, [sp, #-4]!)
   1147c:	push	{r0}		; (str r0, [sp, #-4]!)
   11480:	ldr	ip, [pc, #16]	; 11498 <_start@@Base+0x30>
   11484:	push	{ip}		; (str ip, [sp, #-4]!)
   11488:	ldr	r0, [pc, #12]	; 1149c <_start@@Base+0x34>
   1148c:	ldr	r3, [pc, #12]	; 114a0 <_start@@Base+0x38>
   11490:	bl	10d68 <__libc_start_main@plt>
   11494:	bl	10e64 <abort@plt>
   11498:	andeq	r1, r1, r8, lsr #24
   1149c:	andeq	r1, r1, r0, asr #32
   114a0:	andeq	r1, r1, r8, asr #23
   114a4:	ldr	r3, [pc, #20]	; 114c0 <_start@@Base+0x58>
   114a8:	ldr	r2, [pc, #20]	; 114c4 <_start@@Base+0x5c>
   114ac:	add	r3, pc, r3
   114b0:	ldr	r2, [r3, r2]
   114b4:	cmp	r2, #0
   114b8:	bxeq	lr
   114bc:	b	10d80 <__gmon_start__@plt>
   114c0:	andeq	r1, r1, ip, asr #22
   114c4:	andeq	r0, r0, r4, lsr #1
   114c8:	ldr	r3, [pc, #28]	; 114ec <_start@@Base+0x84>
   114cc:	ldr	r0, [pc, #28]	; 114f0 <_start@@Base+0x88>
   114d0:	sub	r3, r3, r0
   114d4:	cmp	r3, #6
   114d8:	bxls	lr
   114dc:	ldr	r3, [pc, #16]	; 114f4 <_start@@Base+0x8c>
   114e0:	cmp	r3, #0
   114e4:	bxeq	lr
   114e8:	bx	r3
   114ec:	strheq	r3, [r2], -r3	; <UNPREDICTABLE>
   114f0:	strheq	r3, [r2], -r0
   114f4:	andeq	r0, r0, r0
   114f8:	ldr	r1, [pc, #36]	; 11524 <_start@@Base+0xbc>
   114fc:	ldr	r0, [pc, #36]	; 11528 <_start@@Base+0xc0>
   11500:	sub	r1, r1, r0
   11504:	asr	r1, r1, #2
   11508:	add	r1, r1, r1, lsr #31
   1150c:	asrs	r1, r1, #1
   11510:	bxeq	lr
   11514:	ldr	r3, [pc, #16]	; 1152c <_start@@Base+0xc4>
   11518:	cmp	r3, #0
   1151c:	bxeq	lr
   11520:	bx	r3
   11524:	strheq	r3, [r2], -r0
   11528:	strheq	r3, [r2], -r0
   1152c:	andeq	r0, r0, r0
   11530:	push	{r4, lr}
   11534:	ldr	r4, [pc, #24]	; 11554 <_start@@Base+0xec>
   11538:	ldrb	r3, [r4]
   1153c:	cmp	r3, #0
   11540:	popne	{r4, pc}
   11544:	bl	114c8 <_start@@Base+0x60>
   11548:	mov	r3, #1
   1154c:	strb	r3, [r4]
   11550:	pop	{r4, pc}
   11554:	strheq	r3, [r2], -r4
   11558:	ldr	r0, [pc, #40]	; 11588 <_start@@Base+0x120>
   1155c:	ldr	r3, [r0]
   11560:	cmp	r3, #0
   11564:	bne	1156c <_start@@Base+0x104>
   11568:	b	114f8 <_start@@Base+0x90>
   1156c:	ldr	r3, [pc, #24]	; 1158c <_start@@Base+0x124>
   11570:	cmp	r3, #0
   11574:	beq	11568 <_start@@Base+0x100>
   11578:	push	{r4, lr}
   1157c:	blx	r3
   11580:	pop	{r4, lr}
   11584:	b	114f8 <_start@@Base+0x90>
   11588:	strdeq	r2, [r2], -ip
   1158c:	andeq	r0, r0, r0
   11590:	ldr	r2, [pc, #1072]	; 119c8 <_start@@Base+0x560>
   11594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11598:	sub	sp, sp, #44	; 0x2c
   1159c:	ldr	r3, [r2]
   115a0:	cmp	r3, #5
   115a4:	ldrls	pc, [pc, r3, lsl #2]
   115a8:	b	119c0 <_start@@Base+0x558>
   115ac:	ldrdeq	r1, [r1], -r8
   115b0:	andeq	r1, r1, r8, lsl r6
   115b4:	andeq	r1, r1, r0, asr r6
   115b8:	andeq	r1, r1, r0, lsl #13
   115bc:	andeq	r1, r1, r4, asr #11
   115c0:	andeq	r1, r1, r4, asr #11
   115c4:	ldr	r3, [pc, #1024]	; 119cc <_start@@Base+0x564>
   115c8:	mov	r2, #230	; 0xe6
   115cc:	ldr	r1, [pc, #1020]	; 119d0 <_start@@Base+0x568>
   115d0:	ldr	r0, [pc, #1020]	; 119d4 <_start@@Base+0x56c>
   115d4:	bl	10e7c <__assert_fail@plt>
   115d8:	mov	r1, r0
   115dc:	ldr	r0, [r2, #4]
   115e0:	add	r2, sp, #16
   115e4:	bl	10d38 <coda_expression_eval_bool@plt>
   115e8:	subs	r5, r0, #0
   115ec:	bne	1199c <_start@@Base+0x534>
   115f0:	ldr	r0, [sp, #16]
   115f4:	ldr	r2, [pc, #988]	; 119d8 <_start@@Base+0x570>
   115f8:	ldr	r3, [pc, #988]	; 119dc <_start@@Base+0x574>
   115fc:	cmp	r0, #0
   11600:	movne	r0, r2
   11604:	moveq	r0, r3
   11608:	bl	10d5c <puts@plt>
   1160c:	mov	r0, r5
   11610:	add	sp, sp, #44	; 0x2c
   11614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11618:	mov	r1, r0
   1161c:	ldr	r0, [r2, #4]
   11620:	add	r2, sp, #8
   11624:	bl	10ccc <coda_expression_eval_integer@plt>
   11628:	subs	r5, r0, #0
   1162c:	bne	11978 <_start@@Base+0x510>
   11630:	ldrd	r0, [sp, #8]
   11634:	add	r2, sp, #16
   11638:	bl	10e70 <coda_str64@plt>
   1163c:	add	r0, sp, #16
   11640:	bl	10d5c <puts@plt>
   11644:	mov	r0, r5
   11648:	add	sp, sp, #44	; 0x2c
   1164c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11650:	mov	r1, r0
   11654:	ldr	r0, [r2, #4]
   11658:	add	r2, sp, #16
   1165c:	bl	10e10 <coda_expression_eval_float@plt>
   11660:	subs	r5, r0, #0
   11664:	bne	11954 <_start@@Base+0x4ec>
   11668:	ldrd	r2, [sp, #16]
   1166c:	ldr	r0, [pc, #876]	; 119e0 <_start@@Base+0x578>
   11670:	bl	10ce4 <printf@plt>
   11674:	mov	r0, r5
   11678:	add	sp, sp, #44	; 0x2c
   1167c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11680:	mov	r1, r0
   11684:	mov	ip, #0
   11688:	ldr	r0, [r2, #4]
   1168c:	add	r3, sp, #16
   11690:	add	r2, sp, #8
   11694:	str	ip, [sp, #8]
   11698:	bl	10dd4 <coda_expression_eval_string@plt>
   1169c:	subs	r5, r0, #0
   116a0:	bne	11930 <_start@@Base+0x4c8>
   116a4:	ldr	fp, [sp, #8]
   116a8:	ldr	r0, [sp, #16]
   116ac:	cmp	fp, #0
   116b0:	cmpne	r0, #0
   116b4:	beq	11854 <_start@@Base+0x3ec>
   116b8:	cmp	r0, #0
   116bc:	blt	1191c <_start@@Base+0x4b4>
   116c0:	ldr	sl, [pc, #796]	; 119e4 <_start@@Base+0x57c>
   116c4:	ldr	r9, [pc, #796]	; 119e8 <_start@@Base+0x580>
   116c8:	ldr	r8, [pc, #796]	; 119ec <_start@@Base+0x584>
   116cc:	ldr	r7, [pc, #796]	; 119f0 <_start@@Base+0x588>
   116d0:	ldr	r6, [pc, #796]	; 119f4 <_start@@Base+0x58c>
   116d4:	add	r4, fp, r0
   116d8:	ldrb	r1, [fp], #1
   116dc:	sub	r2, r1, #7
   116e0:	cmp	r2, #85	; 0x55
   116e4:	ldrls	pc, [pc, r2, lsl #2]
   116e8:	b	118e4 <_start@@Base+0x47c>
   116ec:	ldrdeq	r1, [r1], -r8
   116f0:	andeq	r1, r1, ip, asr #17
   116f4:	andeq	r1, r1, r0, asr #17
   116f8:			; <UNDEFINED> instruction: 0x000118b4
   116fc:	andeq	r1, r1, r8, lsr #17
   11700:	muleq	r1, ip, r8
   11704:	muleq	r1, r0, r8
   11708:	andeq	r1, r1, r4, ror #17
   1170c:	andeq	r1, r1, r4, ror #17
   11710:	andeq	r1, r1, r4, ror #17
   11714:	andeq	r1, r1, r4, ror #17
   11718:	andeq	r1, r1, r4, ror #17
   1171c:	andeq	r1, r1, r4, ror #17
   11720:	andeq	r1, r1, r4, ror #17
   11724:	andeq	r1, r1, r4, ror #17
   11728:	andeq	r1, r1, r4, ror #17
   1172c:	andeq	r1, r1, r4, ror #17
   11730:	andeq	r1, r1, r4, ror #17
   11734:	andeq	r1, r1, r4, ror #17
   11738:	andeq	r1, r1, r4, ror #17
   1173c:	andeq	r1, r1, r4, lsl #17
   11740:	andeq	r1, r1, r4, ror #17
   11744:	andeq	r1, r1, r4, ror #17
   11748:	andeq	r1, r1, r4, ror #17
   1174c:	andeq	r1, r1, r4, ror #17
   11750:	andeq	r1, r1, r4, ror #17
   11754:	andeq	r1, r1, r4, ror #17
   11758:	andeq	r1, r1, r8, ror r8
   1175c:	andeq	r1, r1, r4, ror #17
   11760:	andeq	r1, r1, r4, ror #17
   11764:	andeq	r1, r1, r4, ror #17
   11768:	andeq	r1, r1, r4, ror #17
   1176c:	andeq	r1, r1, r4, ror #17
   11770:	andeq	r1, r1, r4, ror #17
   11774:	andeq	r1, r1, r4, ror #17
   11778:	andeq	r1, r1, r4, ror #17
   1177c:	andeq	r1, r1, r4, ror #17
   11780:	andeq	r1, r1, r4, ror #17
   11784:	andeq	r1, r1, r4, ror #17
   11788:	andeq	r1, r1, r4, ror #17
   1178c:	andeq	r1, r1, r4, ror #17
   11790:	andeq	r1, r1, r4, ror #17
   11794:	andeq	r1, r1, r4, ror #17
   11798:	andeq	r1, r1, r4, ror #17
   1179c:	andeq	r1, r1, r4, ror #17
   117a0:	andeq	r1, r1, r4, ror #17
   117a4:	andeq	r1, r1, r4, ror #17
   117a8:	andeq	r1, r1, r4, ror #17
   117ac:	andeq	r1, r1, r4, ror #17
   117b0:	andeq	r1, r1, r4, ror #17
   117b4:	andeq	r1, r1, r4, ror #17
   117b8:	andeq	r1, r1, r4, ror #17
   117bc:	andeq	r1, r1, r4, ror #17
   117c0:	andeq	r1, r1, r4, ror #17
   117c4:	andeq	r1, r1, r4, ror #17
   117c8:	andeq	r1, r1, r4, ror #17
   117cc:	andeq	r1, r1, r4, ror #17
   117d0:	andeq	r1, r1, r4, ror #17
   117d4:	andeq	r1, r1, r4, ror #17
   117d8:	andeq	r1, r1, r4, ror #17
   117dc:	andeq	r1, r1, r4, ror #17
   117e0:	andeq	r1, r1, r4, ror #17
   117e4:	andeq	r1, r1, r4, ror #17
   117e8:	andeq	r1, r1, r4, ror #17
   117ec:	andeq	r1, r1, r4, ror #17
   117f0:	andeq	r1, r1, r4, ror #17
   117f4:	andeq	r1, r1, r4, ror #17
   117f8:	andeq	r1, r1, r4, ror #17
   117fc:	andeq	r1, r1, r4, ror #17
   11800:	andeq	r1, r1, r4, ror #17
   11804:	andeq	r1, r1, r4, ror #17
   11808:	andeq	r1, r1, r4, ror #17
   1180c:	andeq	r1, r1, r4, ror #17
   11810:	andeq	r1, r1, r4, ror #17
   11814:	andeq	r1, r1, r4, ror #17
   11818:	andeq	r1, r1, r4, ror #17
   1181c:	andeq	r1, r1, r4, ror #17
   11820:	andeq	r1, r1, r4, ror #17
   11824:	andeq	r1, r1, r4, ror #17
   11828:	andeq	r1, r1, r4, ror #17
   1182c:	andeq	r1, r1, r4, ror #17
   11830:	andeq	r1, r1, r4, ror #17
   11834:	andeq	r1, r1, r4, ror #17
   11838:	andeq	r1, r1, r4, ror #17
   1183c:	andeq	r1, r1, r4, ror #17
   11840:	andeq	r1, r1, r4, asr #16
   11844:	mov	r0, r9
   11848:	bl	10ce4 <printf@plt>
   1184c:	cmp	r4, fp
   11850:	bne	116d8 <_start@@Base+0x270>
   11854:	mov	r0, #10
   11858:	bl	10de0 <putchar@plt>
   1185c:	ldr	r0, [sp, #8]
   11860:	cmp	r0, #0
   11864:	beq	1160c <_start@@Base+0x1a4>
   11868:	bl	10d08 <free@plt>
   1186c:	mov	r0, r5
   11870:	add	sp, sp, #44	; 0x2c
   11874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11878:	mov	r0, sl
   1187c:	bl	10ce4 <printf@plt>
   11880:	b	1184c <_start@@Base+0x3e4>
   11884:	ldr	r0, [pc, #364]	; 119f8 <_start@@Base+0x590>
   11888:	bl	10ce4 <printf@plt>
   1188c:	b	1184c <_start@@Base+0x3e4>
   11890:	mov	r0, r6
   11894:	bl	10ce4 <printf@plt>
   11898:	b	1184c <_start@@Base+0x3e4>
   1189c:	ldr	r0, [pc, #344]	; 119fc <_start@@Base+0x594>
   118a0:	bl	10ce4 <printf@plt>
   118a4:	b	1184c <_start@@Base+0x3e4>
   118a8:	mov	r0, r8
   118ac:	bl	10ce4 <printf@plt>
   118b0:	b	1184c <_start@@Base+0x3e4>
   118b4:	ldr	r0, [pc, #324]	; 11a00 <_start@@Base+0x598>
   118b8:	bl	10ce4 <printf@plt>
   118bc:	b	1184c <_start@@Base+0x3e4>
   118c0:	mov	r0, r7
   118c4:	bl	10ce4 <printf@plt>
   118c8:	b	1184c <_start@@Base+0x3e4>
   118cc:	ldr	r0, [pc, #304]	; 11a04 <_start@@Base+0x59c>
   118d0:	bl	10ce4 <printf@plt>
   118d4:	b	1184c <_start@@Base+0x3e4>
   118d8:	ldr	r0, [pc, #296]	; 11a08 <_start@@Base+0x5a0>
   118dc:	bl	10ce4 <printf@plt>
   118e0:	b	1184c <_start@@Base+0x3e4>
   118e4:	str	r1, [sp, #4]
   118e8:	bl	10d8c <__ctype_b_loc@plt>
   118ec:	ldr	r1, [sp, #4]
   118f0:	lsl	r2, r1, #1
   118f4:	ldr	r0, [r0]
   118f8:	ldrh	r2, [r0, r2]
   118fc:	tst	r2, #16384	; 0x4000
   11900:	bne	11910 <_start@@Base+0x4a8>
   11904:	ldr	r0, [pc, #256]	; 11a0c <_start@@Base+0x5a4>
   11908:	bl	10ce4 <printf@plt>
   1190c:	b	1184c <_start@@Base+0x3e4>
   11910:	mov	r0, r1
   11914:	bl	10de0 <putchar@plt>
   11918:	b	1184c <_start@@Base+0x3e4>
   1191c:	mov	r0, fp
   11920:	bl	10da4 <strlen@plt>
   11924:	cmp	r0, #0
   11928:	bgt	116c0 <_start@@Base+0x258>
   1192c:	b	11854 <_start@@Base+0x3ec>
   11930:	bl	10e58 <coda_get_errno@plt>
   11934:	mvn	r5, #0
   11938:	ldr	r0, [r0]
   1193c:	bl	10e28 <coda_errno_to_string@plt>
   11940:	ldr	r1, [pc, #200]	; 11a10 <_start@@Base+0x5a8>
   11944:	mov	r2, r0
   11948:	mvn	r0, #400	; 0x190
   1194c:	bl	10cf0 <coda_set_error@plt>
   11950:	b	1160c <_start@@Base+0x1a4>
   11954:	bl	10e58 <coda_get_errno@plt>
   11958:	mvn	r5, #0
   1195c:	ldr	r0, [r0]
   11960:	bl	10e28 <coda_errno_to_string@plt>
   11964:	ldr	r1, [pc, #168]	; 11a14 <_start@@Base+0x5ac>
   11968:	mov	r2, r0
   1196c:	mvn	r0, #400	; 0x190
   11970:	bl	10cf0 <coda_set_error@plt>
   11974:	b	1160c <_start@@Base+0x1a4>
   11978:	bl	10e58 <coda_get_errno@plt>
   1197c:	mvn	r5, #0
   11980:	ldr	r0, [r0]
   11984:	bl	10e28 <coda_errno_to_string@plt>
   11988:	ldr	r1, [pc, #136]	; 11a18 <_start@@Base+0x5b0>
   1198c:	mov	r2, r0
   11990:	mvn	r0, #400	; 0x190
   11994:	bl	10cf0 <coda_set_error@plt>
   11998:	b	1160c <_start@@Base+0x1a4>
   1199c:	bl	10e58 <coda_get_errno@plt>
   119a0:	mvn	r5, #0
   119a4:	ldr	r0, [r0]
   119a8:	bl	10e28 <coda_errno_to_string@plt>
   119ac:	ldr	r1, [pc, #104]	; 11a1c <_start@@Base+0x5b4>
   119b0:	mov	r2, r0
   119b4:	mvn	r0, #400	; 0x190
   119b8:	bl	10cf0 <coda_set_error@plt>
   119bc:	b	1160c <_start@@Base+0x1a4>
   119c0:	mov	r5, #0
   119c4:	b	1160c <_start@@Base+0x1a4>
   119c8:	strheq	r3, [r2], -r8
   119cc:	andeq	r1, r1, r8, lsr ip
   119d0:	andeq	r2, r1, r8, lsl r4
   119d4:	andeq	r2, r1, r0, ror #8
   119d8:	andeq	r2, r1, r8, lsr #6
   119dc:	andeq	r2, r1, r0, lsr r3
   119e0:			; <UNDEFINED> instruction: 0x000123b8
   119e4:	andeq	r2, r1, ip, lsl #8
   119e8:	andeq	r2, r1, r8, lsl #8
   119ec:	andeq	r2, r1, r4, lsl #8
   119f0:	andeq	r2, r1, r0, lsl #8
   119f4:	strdeq	r2, [r1], -ip
   119f8:	andeq	r2, r1, r8, ror #7
   119fc:	strdeq	r2, [r1], -r4
   11a00:	strdeq	r2, [r1], -r8
   11a04:	strdeq	r2, [r1], -r0
   11a08:	andeq	r2, r1, ip, ror #7
   11a0c:	andeq	r2, r1, r0, lsl r4
   11a10:	andeq	r2, r1, r0, asr #7
   11a14:	andeq	r2, r1, r8, lsl #7
   11a18:	andeq	r2, r1, r0, ror #6
   11a1c:	andeq	r2, r1, r8, lsr r3
   11a20:	push	{r4, r5, lr}
   11a24:	sub	sp, sp, #532	; 0x214
   11a28:	add	r1, sp, #528	; 0x210
   11a2c:	mov	r3, #0
   11a30:	str	r3, [r1, #-524]!	; 0xfffffdf4
   11a34:	mov	r5, r0
   11a38:	bl	10cfc <coda_open@plt>
   11a3c:	cmp	r0, #0
   11a40:	movne	r4, #1
   11a44:	beq	11a54 <_start@@Base+0x5ec>
   11a48:	mov	r0, r4
   11a4c:	add	sp, sp, #532	; 0x214
   11a50:	pop	{r4, r5, pc}
   11a54:	add	r0, sp, #8
   11a58:	ldr	r1, [sp, #4]
   11a5c:	bl	10d44 <coda_cursor_set_product@plt>
   11a60:	subs	r4, r0, #0
   11a64:	bne	11ae0 <_start@@Base+0x678>
   11a68:	ldr	r3, [pc, #176]	; 11b20 <_start@@Base+0x6b8>
   11a6c:	ldr	r0, [r3, #8]
   11a70:	cmp	r0, #0
   11a74:	beq	11a88 <_start@@Base+0x620>
   11a78:	add	r1, sp, #8
   11a7c:	bl	10e1c <coda_expression_eval_node@plt>
   11a80:	cmp	r0, #0
   11a84:	bne	11af0 <_start@@Base+0x688>
   11a88:	add	r0, sp, #8
   11a8c:	bl	11590 <_start@@Base+0x128>
   11a90:	cmp	r0, #0
   11a94:	bne	11ab4 <_start@@Base+0x64c>
   11a98:	ldr	r0, [sp, #4]
   11a9c:	bl	10df8 <coda_close@plt>
   11aa0:	adds	r4, r0, #0
   11aa4:	movne	r4, #1
   11aa8:	mov	r0, r4
   11aac:	add	sp, sp, #532	; 0x214
   11ab0:	pop	{r4, r5, pc}
   11ab4:	ldr	r3, [pc, #104]	; 11b24 <_start@@Base+0x6bc>
   11ab8:	ldr	r4, [r3]
   11abc:	bl	10e58 <coda_get_errno@plt>
   11ac0:	ldr	r0, [r0]
   11ac4:	bl	10e28 <coda_errno_to_string@plt>
   11ac8:	mov	r3, r5
   11acc:	ldr	r1, [pc, #84]	; 11b28 <_start@@Base+0x6c0>
   11ad0:	mov	r2, r0
   11ad4:	mov	r0, r4
   11ad8:	bl	10db0 <fprintf@plt>
   11adc:	b	11a98 <_start@@Base+0x630>
   11ae0:	ldr	r0, [sp, #4]
   11ae4:	bl	10df8 <coda_close@plt>
   11ae8:	mov	r4, #1
   11aec:	b	11a48 <_start@@Base+0x5e0>
   11af0:	ldr	r3, [pc, #44]	; 11b24 <_start@@Base+0x6bc>
   11af4:	ldr	r5, [r3]
   11af8:	bl	10e58 <coda_get_errno@plt>
   11afc:	ldr	r0, [r0]
   11b00:	bl	10e28 <coda_errno_to_string@plt>
   11b04:	ldr	r1, [pc, #32]	; 11b2c <_start@@Base+0x6c4>
   11b08:	mov	r2, r0
   11b0c:	mov	r0, r5
   11b10:	bl	10db0 <fprintf@plt>
   11b14:	ldr	r0, [sp, #4]
   11b18:	bl	10df8 <coda_close@plt>
   11b1c:	b	11a48 <_start@@Base+0x5e0>
   11b20:	strheq	r3, [r2], -r8
   11b24:	strheq	r3, [r2], -r0
   11b28:	muleq	r1, r4, r4
   11b2c:	andeq	r2, r1, r4, ror #8

00011b30 <callback@@Base>:
   11b30:	push	{r4, lr}
   11b34:	subs	r4, r1, #0
   11b38:	mov	r1, r0
   11b3c:	beq	11b60 <callback@@Base+0x30>
   11b40:	cmp	r4, #2
   11b44:	beq	11b84 <callback@@Base+0x54>
   11b48:	cmp	r4, #1
   11b4c:	beq	11b9c <callback@@Base+0x6c>
   11b50:	cmp	r4, #4
   11b54:	beq	11b7c <callback@@Base+0x4c>
   11b58:	mov	r0, #0
   11b5c:	pop	{r4, pc}
   11b60:	ldr	r0, [pc, #80]	; 11bb8 <callback@@Base+0x88>
   11b64:	mov	r3, r1
   11b68:	ldr	r1, [pc, #76]	; 11bbc <callback@@Base+0x8c>
   11b6c:	ldr	r0, [r0]
   11b70:	bl	10db0 <fprintf@plt>
   11b74:	mov	r0, r4
   11b78:	pop	{r4, pc}
   11b7c:	pop	{r4, lr}
   11b80:	b	11a20 <_start@@Base+0x5b8>
   11b84:	ldr	r3, [pc, #44]	; 11bb8 <callback@@Base+0x88>
   11b88:	mov	r2, r0
   11b8c:	ldr	r1, [pc, #44]	; 11bc0 <callback@@Base+0x90>
   11b90:	ldr	r0, [r3]
   11b94:	bl	10db0 <fprintf@plt>
   11b98:	b	11b58 <callback@@Base+0x28>
   11b9c:	ldr	r0, [pc, #20]	; 11bb8 <callback@@Base+0x88>
   11ba0:	mov	r3, r2
   11ba4:	mov	r2, r1
   11ba8:	ldr	r0, [r0]
   11bac:	ldr	r1, [pc, #16]	; 11bc4 <callback@@Base+0x94>
   11bb0:	bl	10db0 <fprintf@plt>
   11bb4:	b	11b58 <callback@@Base+0x28>
   11bb8:	strheq	r3, [r2], -r0
   11bbc:	muleq	r1, r4, r4
   11bc0:	andeq	r2, r1, r8, lsr #9
   11bc4:	ldrdeq	r2, [r1], -r0

00011bc8 <__libc_csu_init@@Base>:
   11bc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bcc:	mov	r7, r0
   11bd0:	ldr	r6, [pc, #72]	; 11c20 <__libc_csu_init@@Base+0x58>
   11bd4:	ldr	r5, [pc, #72]	; 11c24 <__libc_csu_init@@Base+0x5c>
   11bd8:	add	r6, pc, r6
   11bdc:	add	r5, pc, r5
   11be0:	sub	r6, r6, r5
   11be4:	mov	r8, r1
   11be8:	mov	r9, r2
   11bec:	bl	10ca0 <coda_match_filefilter@plt-0x20>
   11bf0:	asrs	r6, r6, #2
   11bf4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11bf8:	mov	r4, #0
   11bfc:	add	r4, r4, #1
   11c00:	ldr	r3, [r5], #4
   11c04:	mov	r2, r9
   11c08:	mov	r1, r8
   11c0c:	mov	r0, r7
   11c10:	blx	r3
   11c14:	cmp	r6, r4
   11c18:	bne	11bfc <__libc_csu_init@@Base+0x34>
   11c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c20:	andeq	r1, r1, r8, lsl r3
   11c24:	andeq	r1, r1, r0, lsl r3

00011c28 <__libc_csu_fini@@Base>:
   11c28:	bx	lr

Disassembly of section .fini:

00011c2c <.fini>:
   11c2c:	push	{r3, lr}
   11c30:	pop	{r3, pc}
