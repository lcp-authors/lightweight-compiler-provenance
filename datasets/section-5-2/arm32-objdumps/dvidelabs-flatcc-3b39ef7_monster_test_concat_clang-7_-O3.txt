
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_concat/monster_test_concat:     file format elf32-littlearm


Disassembly of section .init:

000126ec <.init>:
   126ec:	push	{r3, lr}
   126f0:	bl	127f0 <_start@@Base+0x3c>
   126f4:	pop	{r3, pc}

Disassembly of section .plt:

000126f8 <free@plt-0x14>:
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	ldr	lr, [pc, #4]	; 12708 <free@plt-0x4>
   12700:	add	lr, pc, lr
   12704:	ldr	pc, [lr, #8]!
   12708:	strdeq	r9, [r1], -r8

0001270c <free@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #102400	; 0x19000
   12714:	ldr	pc, [ip, #2296]!	; 0x8f8

00012718 <memcpy@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #102400	; 0x19000
   12720:	ldr	pc, [ip, #2288]!	; 0x8f0

00012724 <memcmp@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #102400	; 0x19000
   1272c:	ldr	pc, [ip, #2280]!	; 0x8e8

00012730 <realloc@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #102400	; 0x19000
   12738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001273c <malloc@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #102400	; 0x19000
   12744:	ldr	pc, [ip, #2264]!	; 0x8d8

00012748 <__libc_start_main@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #102400	; 0x19000
   12750:	ldr	pc, [ip, #2256]!	; 0x8d0

00012754 <__gmon_start__@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #102400	; 0x19000
   1275c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012760 <strlen@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #102400	; 0x19000
   12768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001276c <posix_memalign@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #102400	; 0x19000
   12774:	ldr	pc, [ip, #2232]!	; 0x8b8

00012778 <memset@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #102400	; 0x19000
   12780:	ldr	pc, [ip, #2224]!	; 0x8b0

00012784 <strncpy@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #102400	; 0x19000
   1278c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012790 <memchr@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #102400	; 0x19000
   12798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001279c <abort@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #102400	; 0x19000
   127a4:	ldr	pc, [ip, #2200]!	; 0x898

000127a8 <__assert_fail@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #102400	; 0x19000
   127b0:	ldr	pc, [ip, #2192]!	; 0x890

Disassembly of section .text:

000127b4 <_start@@Base>:
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <_start@@Base+0x30>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <_start@@Base+0x34>
   127d8:	ldr	r3, [pc, #12]	; 127ec <_start@@Base+0x38>
   127dc:	bl	12748 <__libc_start_main@plt>
   127e0:	bl	1279c <abort@plt>
   127e4:	andeq	sl, r1, r8, asr #32
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	r9, r1, r8, ror #31
   127f0:	ldr	r3, [pc, #20]	; 1280c <_start@@Base+0x58>
   127f4:	ldr	r2, [pc, #20]	; 12810 <_start@@Base+0x5c>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	12754 <__gmon_start__@plt>
   1280c:	andeq	r9, r1, r0, lsl #16
   12810:	andeq	r0, r0, r4, asr #32
   12814:	ldr	r0, [pc, #24]	; 12834 <_start@@Base+0x80>
   12818:	ldr	r3, [pc, #24]	; 12838 <_start@@Base+0x84>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <_start@@Base+0x88>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:	andeq	ip, r2, r0, asr r0
   12838:	andeq	ip, r2, r0, asr r0
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <_start@@Base+0xb8>
   12844:	ldr	r1, [pc, #36]	; 12870 <_start@@Base+0xbc>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <_start@@Base+0xc0>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:	andeq	ip, r2, r0, asr r0
   12870:	andeq	ip, r2, r0, asr r0
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <_start@@Base+0xe8>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <_start@@Base+0x60>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	ip, r2, r0, asr r0
   128a0:	b	12840 <_start@@Base+0x8c>

000128a4 <main@@Base>:
   128a4:	push	{r4, r5, r6, r7, fp, lr}
   128a8:	add	fp, sp, #16
   128ac:	sub	sp, sp, #240	; 0xf0
   128b0:	add	r4, sp, #4
   128b4:	mov	r0, r4
   128b8:	bl	134c4 <flatcc_builder_init@@Base>
   128bc:	movw	r1, #41070	; 0xa06e
   128c0:	mov	r0, r4
   128c4:	mov	r2, #0
   128c8:	mov	r3, #0
   128cc:	movt	r1, #1
   128d0:	bl	143e0 <flatcc_builder_start_buffer@@Base>
   128d4:	cmp	r0, #0
   128d8:	bne	128e8 <main@@Base+0x44>
   128dc:	add	r0, sp, #4
   128e0:	mov	r1, #36	; 0x24
   128e4:	bl	159d8 <flatcc_builder_start_table@@Base>
   128e8:	movw	r1, #41060	; 0xa064
   128ec:	add	r0, sp, #4
   128f0:	movt	r1, #1
   128f4:	bl	17a88 <flatcc_builder_create_string_str@@Base>
   128f8:	cmp	r0, #0
   128fc:	beq	12918 <main@@Base+0x74>
   12900:	mov	r4, r0
   12904:	add	r0, sp, #4
   12908:	mov	r1, #3
   1290c:	bl	16bb8 <flatcc_builder_table_add_offset@@Base>
   12910:	cmp	r0, #0
   12914:	strne	r4, [r0]
   12918:	movw	r1, #41416	; 0xa1c8
   1291c:	add	r0, sp, #4
   12920:	mov	r2, #1
   12924:	movt	r1, #1
   12928:	bl	162f8 <flatcc_builder_check_required@@Base>
   1292c:	cmp	r0, #0
   12930:	beq	12988 <main@@Base+0xe4>
   12934:	add	r4, sp, #4
   12938:	mov	r0, r4
   1293c:	bl	16388 <flatcc_builder_end_table@@Base>
   12940:	mov	r1, r0
   12944:	mov	r0, r4
   12948:	bl	145d0 <flatcc_builder_end_buffer@@Base>
   1294c:	sub	r1, fp, #20
   12950:	mov	r0, r4
   12954:	bl	17d78 <flatcc_builder_get_direct_buffer@@Base>
   12958:	ldr	r1, [fp, #-20]	; 0xffffffec
   1295c:	movw	r2, #41070	; 0xa06e
   12960:	movw	r3, #10664	; 0x29a8
   12964:	movt	r2, #1
   12968:	movt	r3, #1
   1296c:	bl	19270 <flatcc_verify_table_as_root@@Base>
   12970:	mov	r5, r0
   12974:	mov	r0, r4
   12978:	bl	13a6c <flatcc_builder_clear@@Base>
   1297c:	mov	r0, r5
   12980:	sub	sp, fp, #16
   12984:	pop	{r4, r5, r6, r7, fp, pc}
   12988:	movw	r0, #41075	; 0xa073
   1298c:	movw	r1, #41237	; 0xa115
   12990:	movw	r3, #41335	; 0xa177
   12994:	movw	r2, #2398	; 0x95e
   12998:	movt	r0, #1
   1299c:	movt	r1, #1
   129a0:	movt	r3, #1
   129a4:	bl	127a8 <__assert_fail@plt>
   129a8:	push	{r4, r5, r6, r7, fp, lr}
   129ac:	add	fp, sp, #16
   129b0:	sub	sp, sp, #8
   129b4:	mov	r1, #0
   129b8:	mov	r2, #32
   129bc:	mov	r3, #16
   129c0:	mov	r4, r0
   129c4:	bl	1860c <flatcc_verify_field@@Base>
   129c8:	cmp	r0, #0
   129cc:	bne	12dd4 <main@@Base+0x530>
   129d0:	mov	r0, r4
   129d4:	mov	r1, #2
   129d8:	mov	r2, #2
   129dc:	mov	r3, #2
   129e0:	bl	1860c <flatcc_verify_field@@Base>
   129e4:	cmp	r0, #0
   129e8:	bne	12dd4 <main@@Base+0x530>
   129ec:	mov	r0, r4
   129f0:	mov	r1, #1
   129f4:	mov	r2, #2
   129f8:	mov	r3, #2
   129fc:	bl	1860c <flatcc_verify_field@@Base>
   12a00:	cmp	r0, #0
   12a04:	bne	12dd4 <main@@Base+0x530>
   12a08:	mov	r0, r4
   12a0c:	mov	r1, #3
   12a10:	mov	r2, #1
   12a14:	bl	18690 <flatcc_verify_string_field@@Base>
   12a18:	cmp	r0, #0
   12a1c:	bne	12dd4 <main@@Base+0x530>
   12a20:	mov	r0, r4
   12a24:	mov	r1, #6
   12a28:	mov	r2, #1
   12a2c:	mov	r3, #1
   12a30:	mov	r5, #1
   12a34:	bl	1860c <flatcc_verify_field@@Base>
   12a38:	cmp	r0, #0
   12a3c:	bne	12dd4 <main@@Base+0x530>
   12a40:	mvn	r0, #0
   12a44:	mov	r1, #5
   12a48:	mov	r2, #0
   12a4c:	mov	r3, #1
   12a50:	str	r5, [sp]
   12a54:	str	r0, [sp, #4]
   12a58:	mov	r0, r4
   12a5c:	bl	18774 <flatcc_verify_vector_field@@Base>
   12a60:	cmp	r0, #0
   12a64:	bne	12dd4 <main@@Base+0x530>
   12a68:	movw	r3, #10664	; 0x29a8
   12a6c:	mov	r0, r4
   12a70:	mov	r1, #11
   12a74:	mov	r2, #0
   12a78:	movt	r3, #1
   12a7c:	bl	18b7c <flatcc_verify_table_vector_field@@Base>
   12a80:	cmp	r0, #0
   12a84:	bne	12dd4 <main@@Base+0x530>
   12a88:	mov	r0, r4
   12a8c:	mov	r1, #10
   12a90:	mov	r2, #0
   12a94:	bl	1886c <flatcc_verify_string_vector_field@@Base>
   12a98:	cmp	r0, #0
   12a9c:	bne	12dd4 <main@@Base+0x530>
   12aa0:	mov	r0, r4
   12aa4:	mov	r1, #28
   12aa8:	mov	r2, #0
   12aac:	bl	1886c <flatcc_verify_string_vector_field@@Base>
   12ab0:	cmp	r0, #0
   12ab4:	bne	12dd4 <main@@Base+0x530>
   12ab8:	mvn	r0, #0
   12abc:	mov	r1, #1
   12ac0:	mov	r2, #0
   12ac4:	mov	r3, #1
   12ac8:	str	r1, [sp]
   12acc:	str	r0, [sp, #4]
   12ad0:	mov	r0, r4
   12ad4:	mov	r1, #24
   12ad8:	bl	18774 <flatcc_verify_vector_field@@Base>
   12adc:	cmp	r0, #0
   12ae0:	bne	12dd4 <main@@Base+0x530>
   12ae4:	mvn	r0, #-536870912	; 0xe0000000
   12ae8:	mov	r1, #4
   12aec:	mov	r2, #0
   12af0:	mov	r3, #8
   12af4:	str	r1, [sp]
   12af8:	str	r0, [sp, #4]
   12afc:	mov	r0, r4
   12b00:	mov	r1, #29
   12b04:	bl	18774 <flatcc_verify_vector_field@@Base>
   12b08:	cmp	r0, #0
   12b0c:	bne	12dd4 <main@@Base+0x530>
   12b10:	movw	r5, #10664	; 0x29a8
   12b14:	mov	r0, r4
   12b18:	mov	r1, #12
   12b1c:	mov	r2, #0
   12b20:	movt	r5, #1
   12b24:	mov	r3, r5
   12b28:	bl	18a10 <flatcc_verify_table_field@@Base>
   12b2c:	cmp	r0, #0
   12b30:	bne	12dd4 <main@@Base+0x530>
   12b34:	movw	r3, #11772	; 0x2dfc
   12b38:	mov	r0, r4
   12b3c:	mov	r1, #8
   12b40:	mov	r2, #0
   12b44:	movt	r3, #1
   12b48:	bl	19ab8 <flatcc_verify_union_field@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	12dd4 <main@@Base+0x530>
   12b54:	mvn	r6, #-1073741824	; 0xc0000000
   12b58:	mov	r7, #2
   12b5c:	mov	r0, r4
   12b60:	mov	r1, #9
   12b64:	mov	r2, #0
   12b68:	mov	r3, #4
   12b6c:	str	r7, [sp]
   12b70:	str	r6, [sp, #4]
   12b74:	bl	18774 <flatcc_verify_vector_field@@Base>
   12b78:	cmp	r0, #0
   12b7c:	bne	12dd4 <main@@Base+0x530>
   12b80:	mov	r0, r4
   12b84:	mov	r1, #31
   12b88:	mov	r2, #0
   12b8c:	mov	r3, #4
   12b90:	str	r7, [sp]
   12b94:	str	r6, [sp, #4]
   12b98:	bl	18774 <flatcc_verify_vector_field@@Base>
   12b9c:	cmp	r0, #0
   12ba0:	bne	12dd4 <main@@Base+0x530>
   12ba4:	mov	r0, #1
   12ba8:	mov	r1, #13
   12bac:	mov	r2, #0
   12bb0:	mov	r3, #0
   12bb4:	stm	sp, {r0, r5}
   12bb8:	mov	r0, r4
   12bbc:	bl	19780 <flatcc_verify_table_as_nested_root@@Base>
   12bc0:	cmp	r0, #0
   12bc4:	bne	12dd4 <main@@Base+0x530>
   12bc8:	movw	r3, #11816	; 0x2e28
   12bcc:	mov	r0, r4
   12bd0:	mov	r1, #14
   12bd4:	mov	r2, #0
   12bd8:	movt	r3, #1
   12bdc:	bl	18a10 <flatcc_verify_table_field@@Base>
   12be0:	cmp	r0, #0
   12be4:	bne	12dd4 <main@@Base+0x530>
   12be8:	mov	r0, r4
   12bec:	mov	r1, #15
   12bf0:	mov	r2, #1
   12bf4:	mov	r3, #1
   12bf8:	bl	1860c <flatcc_verify_field@@Base>
   12bfc:	cmp	r0, #0
   12c00:	bne	12dd4 <main@@Base+0x530>
   12c04:	mov	r0, r4
   12c08:	mov	r1, #16
   12c0c:	mov	r2, #4
   12c10:	mov	r3, #4
   12c14:	bl	1860c <flatcc_verify_field@@Base>
   12c18:	cmp	r0, #0
   12c1c:	bne	12dd4 <main@@Base+0x530>
   12c20:	mov	r0, r4
   12c24:	mov	r1, #17
   12c28:	mov	r2, #4
   12c2c:	mov	r3, #4
   12c30:	bl	1860c <flatcc_verify_field@@Base>
   12c34:	cmp	r0, #0
   12c38:	bne	12dd4 <main@@Base+0x530>
   12c3c:	mov	r0, r4
   12c40:	mov	r1, #18
   12c44:	mov	r2, #8
   12c48:	mov	r3, #8
   12c4c:	bl	1860c <flatcc_verify_field@@Base>
   12c50:	cmp	r0, #0
   12c54:	bne	12dd4 <main@@Base+0x530>
   12c58:	mov	r0, r4
   12c5c:	mov	r1, #19
   12c60:	mov	r2, #8
   12c64:	mov	r3, #8
   12c68:	bl	1860c <flatcc_verify_field@@Base>
   12c6c:	cmp	r0, #0
   12c70:	bne	12dd4 <main@@Base+0x530>
   12c74:	mov	r0, r4
   12c78:	mov	r1, #20
   12c7c:	mov	r2, #4
   12c80:	mov	r3, #4
   12c84:	bl	1860c <flatcc_verify_field@@Base>
   12c88:	cmp	r0, #0
   12c8c:	bne	12dd4 <main@@Base+0x530>
   12c90:	mov	r0, r4
   12c94:	mov	r1, #21
   12c98:	mov	r2, #4
   12c9c:	mov	r3, #4
   12ca0:	bl	1860c <flatcc_verify_field@@Base>
   12ca4:	cmp	r0, #0
   12ca8:	bne	12dd4 <main@@Base+0x530>
   12cac:	mov	r0, r4
   12cb0:	mov	r1, #22
   12cb4:	mov	r2, #8
   12cb8:	mov	r3, #8
   12cbc:	bl	1860c <flatcc_verify_field@@Base>
   12cc0:	cmp	r0, #0
   12cc4:	bne	12dd4 <main@@Base+0x530>
   12cc8:	mov	r0, r4
   12ccc:	mov	r1, #23
   12cd0:	mov	r2, #8
   12cd4:	mov	r3, #8
   12cd8:	bl	1860c <flatcc_verify_field@@Base>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12dd4 <main@@Base+0x530>
   12ce4:	mov	r0, r4
   12ce8:	mov	r1, #25
   12cec:	mov	r2, #4
   12cf0:	mov	r3, #4
   12cf4:	bl	1860c <flatcc_verify_field@@Base>
   12cf8:	cmp	r0, #0
   12cfc:	bne	12dd4 <main@@Base+0x530>
   12d00:	mov	r0, r4
   12d04:	mov	r1, #26
   12d08:	mov	r2, #4
   12d0c:	mov	r3, #4
   12d10:	bl	1860c <flatcc_verify_field@@Base>
   12d14:	cmp	r0, #0
   12d18:	bne	12dd4 <main@@Base+0x530>
   12d1c:	mov	r0, r4
   12d20:	mov	r1, #27
   12d24:	mov	r2, #4
   12d28:	mov	r3, #4
   12d2c:	bl	1860c <flatcc_verify_field@@Base>
   12d30:	cmp	r0, #0
   12d34:	bne	12dd4 <main@@Base+0x530>
   12d38:	mvn	r0, #0
   12d3c:	mov	r1, #1
   12d40:	mov	r2, #0
   12d44:	mov	r3, #1
   12d48:	str	r1, [sp]
   12d4c:	str	r0, [sp, #4]
   12d50:	mov	r0, r4
   12d54:	mov	r1, #30
   12d58:	bl	18774 <flatcc_verify_vector_field@@Base>
   12d5c:	cmp	r0, #0
   12d60:	bne	12dd4 <main@@Base+0x530>
   12d64:	mvn	r5, #-536870912	; 0xe0000000
   12d68:	mov	r6, #8
   12d6c:	mov	r0, r4
   12d70:	mov	r1, #32
   12d74:	mov	r2, #0
   12d78:	mov	r3, #8
   12d7c:	str	r6, [sp]
   12d80:	str	r5, [sp, #4]
   12d84:	bl	18774 <flatcc_verify_vector_field@@Base>
   12d88:	cmp	r0, #0
   12d8c:	bne	12dd4 <main@@Base+0x530>
   12d90:	mov	r0, r4
   12d94:	mov	r1, #33	; 0x21
   12d98:	mov	r2, #0
   12d9c:	mov	r3, #8
   12da0:	str	r6, [sp]
   12da4:	str	r5, [sp, #4]
   12da8:	bl	18774 <flatcc_verify_vector_field@@Base>
   12dac:	cmp	r0, #0
   12db0:	bne	12dd4 <main@@Base+0x530>
   12db4:	movw	r3, #11904	; 0x2e80
   12db8:	mov	r0, r4
   12dbc:	mov	r1, #34	; 0x22
   12dc0:	mov	r2, #0
   12dc4:	movt	r3, #1
   12dc8:	bl	18a10 <flatcc_verify_table_field@@Base>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12ddc <main@@Base+0x538>
   12dd4:	sub	sp, fp, #16
   12dd8:	pop	{r4, r5, r6, r7, fp, pc}
   12ddc:	movw	r3, #11912	; 0x2e88
   12de0:	mov	r0, r4
   12de4:	mov	r1, #35	; 0x23
   12de8:	mov	r2, #0
   12dec:	movt	r3, #1
   12df0:	sub	sp, fp, #16
   12df4:	pop	{r4, r5, r6, r7, fp, lr}
   12df8:	b	18a10 <flatcc_verify_table_field@@Base>
   12dfc:	ldrb	r1, [r0, #12]
   12e00:	sub	r1, r1, #1
   12e04:	uxtb	r2, r1
   12e08:	cmp	r2, #3
   12e0c:	movhi	r0, #0
   12e10:	bxhi	lr
   12e14:	movw	r2, #41420	; 0xa1cc
   12e18:	sxtb	r1, r1
   12e1c:	movt	r2, #1
   12e20:	ldr	r1, [r2, r1, lsl #2]
   12e24:	b	18e7c <flatcc_verify_union_table@@Base>
   12e28:	push	{r4, sl, fp, lr}
   12e2c:	add	fp, sp, #8
   12e30:	mov	r1, #0
   12e34:	mov	r2, #0
   12e38:	mov	r4, r0
   12e3c:	bl	18690 <flatcc_verify_string_field@@Base>
   12e40:	cmp	r0, #0
   12e44:	popne	{r4, sl, fp, pc}
   12e48:	mov	r0, r4
   12e4c:	mov	r1, #1
   12e50:	mov	r2, #8
   12e54:	mov	r3, #8
   12e58:	bl	1860c <flatcc_verify_field@@Base>
   12e5c:	cmp	r0, #0
   12e60:	beq	12e68 <main@@Base+0x5c4>
   12e64:	pop	{r4, sl, fp, pc}
   12e68:	mov	r0, r4
   12e6c:	mov	r1, #2
   12e70:	mov	r2, #2
   12e74:	mov	r3, #2
   12e78:	pop	{r4, sl, fp, lr}
   12e7c:	b	1860c <flatcc_verify_field@@Base>
   12e80:	mov	r0, #0
   12e84:	bx	lr
   12e88:	push	{r4, r5, r6, sl, fp, lr}
   12e8c:	add	fp, sp, #16
   12e90:	sub	sp, sp, #8
   12e94:	mvn	r5, #0
   12e98:	mov	r6, #1
   12e9c:	mov	r1, #0
   12ea0:	mov	r2, #0
   12ea4:	mov	r3, #1
   12ea8:	mov	r4, r0
   12eac:	str	r6, [sp]
   12eb0:	str	r5, [sp, #4]
   12eb4:	bl	18774 <flatcc_verify_vector_field@@Base>
   12eb8:	cmp	r0, #0
   12ebc:	bne	12ee4 <main@@Base+0x640>
   12ec0:	mov	r0, r4
   12ec4:	mov	r1, #1
   12ec8:	mov	r2, #0
   12ecc:	mov	r3, #1
   12ed0:	str	r6, [sp]
   12ed4:	str	r5, [sp, #4]
   12ed8:	bl	18774 <flatcc_verify_vector_field@@Base>
   12edc:	cmp	r0, #0
   12ee0:	beq	12eec <main@@Base+0x648>
   12ee4:	sub	sp, fp, #16
   12ee8:	pop	{r4, r5, r6, sl, fp, pc}
   12eec:	movw	r0, #10664	; 0x29a8
   12ef0:	mov	r1, #1
   12ef4:	mov	r2, #0
   12ef8:	mov	r3, #0
   12efc:	movt	r0, #1
   12f00:	str	r1, [sp]
   12f04:	mov	r1, #2
   12f08:	str	r0, [sp, #4]
   12f0c:	mov	r0, r4
   12f10:	bl	19780 <flatcc_verify_table_as_nested_root@@Base>
   12f14:	sub	sp, fp, #16
   12f18:	pop	{r4, r5, r6, sl, fp, pc}
   12f1c:	push	{r4, sl, fp, lr}
   12f20:	add	fp, sp, #8
   12f24:	mov	r1, #0
   12f28:	mov	r2, #1
   12f2c:	mov	r3, #1
   12f30:	mov	r4, r0
   12f34:	bl	1860c <flatcc_verify_field@@Base>
   12f38:	cmp	r0, #0
   12f3c:	bne	12f78 <main@@Base+0x6d4>
   12f40:	mov	r0, r4
   12f44:	mov	r1, #1
   12f48:	mov	r2, #1
   12f4c:	mov	r3, #1
   12f50:	bl	1860c <flatcc_verify_field@@Base>
   12f54:	cmp	r0, #0
   12f58:	popne	{r4, sl, fp, pc}
   12f5c:	mov	r0, r4
   12f60:	mov	r1, #2
   12f64:	mov	r2, #1
   12f68:	mov	r3, #1
   12f6c:	bl	1860c <flatcc_verify_field@@Base>
   12f70:	cmp	r0, #0
   12f74:	beq	12f7c <main@@Base+0x6d8>
   12f78:	pop	{r4, sl, fp, pc}
   12f7c:	mov	r0, r4
   12f80:	mov	r1, #3
   12f84:	mov	r2, #1
   12f88:	mov	r3, #1
   12f8c:	pop	{r4, sl, fp, lr}
   12f90:	b	1860c <flatcc_verify_field@@Base>
   12f94:	mov	r0, #0
   12f98:	bx	lr
   12f9c:	push	{r4, sl, fp, lr}
   12fa0:	add	fp, sp, #8
   12fa4:	movw	r3, #12292	; 0x3004
   12fa8:	mov	r1, #0
   12fac:	mov	r2, #0
   12fb0:	mov	r4, r0
   12fb4:	movt	r3, #1
   12fb8:	bl	18a10 <flatcc_verify_table_field@@Base>
   12fbc:	cmp	r0, #0
   12fc0:	popne	{r4, sl, fp, pc}
   12fc4:	movw	r3, #12396	; 0x306c
   12fc8:	mov	r0, r4
   12fcc:	mov	r1, #1
   12fd0:	mov	r2, #0
   12fd4:	movt	r3, #1
   12fd8:	bl	18a10 <flatcc_verify_table_field@@Base>
   12fdc:	cmp	r0, #0
   12fe0:	beq	12fe8 <main@@Base+0x744>
   12fe4:	pop	{r4, sl, fp, pc}
   12fe8:	movw	r3, #11772	; 0x2dfc
   12fec:	mov	r0, r4
   12ff0:	mov	r1, #3
   12ff4:	mov	r2, #0
   12ff8:	movt	r3, #1
   12ffc:	pop	{r4, sl, fp, lr}
   13000:	b	19c3c <flatcc_verify_union_vector_field@@Base>
   13004:	push	{r4, sl, fp, lr}
   13008:	add	fp, sp, #8
   1300c:	movw	r3, #12564	; 0x3114
   13010:	mov	r1, #0
   13014:	mov	r2, #0
   13018:	mov	r4, r0
   1301c:	movt	r3, #1
   13020:	bl	18a10 <flatcc_verify_table_field@@Base>
   13024:	cmp	r0, #0
   13028:	popne	{r4, sl, fp, pc}
   1302c:	movw	r3, #12812	; 0x320c
   13030:	mov	r0, r4
   13034:	mov	r1, #1
   13038:	mov	r2, #0
   1303c:	movt	r3, #1
   13040:	bl	18a10 <flatcc_verify_table_field@@Base>
   13044:	cmp	r0, #0
   13048:	beq	13050 <main@@Base+0x7ac>
   1304c:	pop	{r4, sl, fp, pc}
   13050:	movw	r3, #12872	; 0x3248
   13054:	mov	r0, r4
   13058:	mov	r1, #2
   1305c:	mov	r2, #0
   13060:	movt	r3, #1
   13064:	pop	{r4, sl, fp, lr}
   13068:	b	18a10 <flatcc_verify_table_field@@Base>
   1306c:	push	{r4, sl, fp, lr}
   13070:	add	fp, sp, #8
   13074:	movw	r3, #12932	; 0x3284
   13078:	mov	r1, #1
   1307c:	mov	r2, #0
   13080:	mov	r4, r0
   13084:	movt	r3, #1
   13088:	bl	19ab8 <flatcc_verify_union_field@@Base>
   1308c:	cmp	r0, #0
   13090:	bne	130f4 <main@@Base+0x850>
   13094:	movw	r3, #12932	; 0x3284
   13098:	mov	r0, r4
   1309c:	mov	r1, #3
   130a0:	mov	r2, #0
   130a4:	movt	r3, #1
   130a8:	bl	19ab8 <flatcc_verify_union_field@@Base>
   130ac:	cmp	r0, #0
   130b0:	bne	130f4 <main@@Base+0x850>
   130b4:	movw	r3, #12932	; 0x3284
   130b8:	mov	r0, r4
   130bc:	mov	r1, #5
   130c0:	mov	r2, #0
   130c4:	movt	r3, #1
   130c8:	bl	19ab8 <flatcc_verify_union_field@@Base>
   130cc:	cmp	r0, #0
   130d0:	popne	{r4, sl, fp, pc}
   130d4:	movw	r3, #12932	; 0x3284
   130d8:	mov	r0, r4
   130dc:	mov	r1, #7
   130e0:	mov	r2, #0
   130e4:	movt	r3, #1
   130e8:	bl	19ab8 <flatcc_verify_union_field@@Base>
   130ec:	cmp	r0, #0
   130f0:	beq	130f8 <main@@Base+0x854>
   130f4:	pop	{r4, sl, fp, pc}
   130f8:	movw	r3, #12932	; 0x3284
   130fc:	mov	r0, r4
   13100:	mov	r1, #9
   13104:	mov	r2, #0
   13108:	movt	r3, #1
   1310c:	pop	{r4, sl, fp, lr}
   13110:	b	19c3c <flatcc_verify_union_vector_field@@Base>
   13114:	push	{r4, sl, fp, lr}
   13118:	add	fp, sp, #8
   1311c:	mov	r1, #0
   13120:	mov	r2, #0
   13124:	mov	r4, r0
   13128:	bl	18690 <flatcc_verify_string_field@@Base>
   1312c:	cmp	r0, #0
   13130:	bne	131f0 <main@@Base+0x94c>
   13134:	mov	r0, r4
   13138:	mov	r1, #1
   1313c:	mov	r2, #4
   13140:	mov	r3, #4
   13144:	bl	1860c <flatcc_verify_field@@Base>
   13148:	cmp	r0, #0
   1314c:	bne	131f0 <main@@Base+0x94c>
   13150:	mov	r0, r4
   13154:	mov	r1, #2
   13158:	mov	r2, #0
   1315c:	bl	18690 <flatcc_verify_string_field@@Base>
   13160:	cmp	r0, #0
   13164:	bne	131f0 <main@@Base+0x94c>
   13168:	mov	r0, r4
   1316c:	mov	r1, #3
   13170:	mov	r2, #8
   13174:	mov	r3, #8
   13178:	bl	1860c <flatcc_verify_field@@Base>
   1317c:	cmp	r0, #0
   13180:	bne	131f0 <main@@Base+0x94c>
   13184:	mov	r0, r4
   13188:	mov	r1, #4
   1318c:	mov	r2, #0
   13190:	bl	18690 <flatcc_verify_string_field@@Base>
   13194:	cmp	r0, #0
   13198:	bne	131f0 <main@@Base+0x94c>
   1319c:	mov	r0, r4
   131a0:	mov	r1, #5
   131a4:	mov	r2, #8
   131a8:	mov	r3, #8
   131ac:	bl	1860c <flatcc_verify_field@@Base>
   131b0:	cmp	r0, #0
   131b4:	bne	131f0 <main@@Base+0x94c>
   131b8:	mov	r0, r4
   131bc:	mov	r1, #6
   131c0:	mov	r2, #4
   131c4:	mov	r3, #4
   131c8:	bl	1860c <flatcc_verify_field@@Base>
   131cc:	cmp	r0, #0
   131d0:	popne	{r4, sl, fp, pc}
   131d4:	mov	r0, r4
   131d8:	mov	r1, #7
   131dc:	mov	r2, #8
   131e0:	mov	r3, #8
   131e4:	bl	1860c <flatcc_verify_field@@Base>
   131e8:	cmp	r0, #0
   131ec:	beq	131f4 <main@@Base+0x950>
   131f0:	pop	{r4, sl, fp, pc}
   131f4:	mov	r0, r4
   131f8:	mov	r1, #8
   131fc:	mov	r2, #4
   13200:	mov	r3, #4
   13204:	pop	{r4, sl, fp, lr}
   13208:	b	1860c <flatcc_verify_field@@Base>
   1320c:	push	{r4, sl, fp, lr}
   13210:	add	fp, sp, #8
   13214:	mov	r1, #0
   13218:	mov	r2, #8
   1321c:	mov	r3, #8
   13220:	mov	r4, r0
   13224:	bl	1860c <flatcc_verify_field@@Base>
   13228:	cmp	r0, #0
   1322c:	popne	{r4, sl, fp, pc}
   13230:	mov	r0, r4
   13234:	mov	r1, #1
   13238:	mov	r2, #4
   1323c:	mov	r3, #4
   13240:	pop	{r4, sl, fp, lr}
   13244:	b	1860c <flatcc_verify_field@@Base>
   13248:	push	{r4, sl, fp, lr}
   1324c:	add	fp, sp, #8
   13250:	mov	r1, #0
   13254:	mov	r2, #8
   13258:	mov	r3, #8
   1325c:	mov	r4, r0
   13260:	bl	1860c <flatcc_verify_field@@Base>
   13264:	cmp	r0, #0
   13268:	popne	{r4, sl, fp, pc}
   1326c:	mov	r0, r4
   13270:	mov	r1, #1
   13274:	mov	r2, #4
   13278:	mov	r3, #4
   1327c:	pop	{r4, sl, fp, lr}
   13280:	b	1860c <flatcc_verify_field@@Base>
   13284:	ldrb	r2, [r0, #12]
   13288:	sub	r1, r2, #2
   1328c:	cmp	r1, #9
   13290:	bhi	132d0 <main@@Base+0xa2c>
   13294:	add	r2, pc, #0
   13298:	ldr	pc, [r2, r1, lsl #2]
   1329c:	andeq	r3, r1, r4, ror #5
   132a0:	ldrdeq	r3, [r1], -ip
   132a4:	ldrdeq	r3, [r1], -ip
   132a8:	ldrdeq	r3, [r1], -ip
   132ac:	ldrdeq	r3, [r1], -ip
   132b0:	ldrdeq	r3, [r1], -ip
   132b4:	strdeq	r3, [r1], -r0
   132b8:	andeq	r3, r1, r4, asr #5
   132bc:	andeq	r3, r1, r4, asr #5
   132c0:	ldrdeq	r3, [r1], -r8
   132c4:	mov	r1, #4
   132c8:	mov	r2, #4
   132cc:	b	18f64 <flatcc_verify_union_struct@@Base>
   132d0:	cmp	r2, #255	; 0xff
   132d4:	bne	132dc <main@@Base+0xa38>
   132d8:	b	18fbc <flatcc_verify_union_string@@Base>
   132dc:	mov	r0, #0
   132e0:	bx	lr
   132e4:	movw	r1, #13052	; 0x32fc
   132e8:	movt	r1, #1
   132ec:	b	18e7c <flatcc_verify_union_table@@Base>
   132f0:	mov	r1, #2
   132f4:	mov	r2, #2
   132f8:	b	18f64 <flatcc_verify_union_struct@@Base>
   132fc:	mov	r1, #0
   13300:	mov	r2, #4
   13304:	mov	r3, #4
   13308:	b	1860c <flatcc_verify_field@@Base>

0001330c <flatcc_builder_default_alloc@@Base>:
   1330c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13310:	add	fp, sp, #24
   13314:	mov	r4, r1
   13318:	cmp	r2, #0
   1331c:	beq	13364 <flatcc_builder_default_alloc@@Base+0x58>
   13320:	ldr	r0, [fp, #8]
   13324:	mov	r8, r3
   13328:	sub	r1, r0, #1
   1332c:	cmp	r1, #6
   13330:	bhi	13390 <flatcc_builder_default_alloc@@Base+0x84>
   13334:	add	r3, pc, #4
   13338:	mov	r0, #256	; 0x100
   1333c:	ldr	pc, [r3, r1, lsl #2]
   13340:	andeq	r3, r1, r4, lsr #7
   13344:	muleq	r1, r0, r3
   13348:	muleq	r1, r0, r3
   1334c:	andeq	r3, r1, ip, asr r3
   13350:	muleq	r1, r8, r3
   13354:	muleq	r1, r0, r3
   13358:	andeq	r3, r1, r0, lsr #7
   1335c:	mov	r0, #288	; 0x120
   13360:	b	133a4 <flatcc_builder_default_alloc@@Base+0x98>
   13364:	ldr	r0, [r4]
   13368:	cmp	r0, #0
   1336c:	moveq	r6, #0
   13370:	moveq	r0, r6
   13374:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13378:	bl	1270c <free@plt>
   1337c:	mov	r6, #0
   13380:	mov	r0, r6
   13384:	str	r6, [r4]
   13388:	str	r6, [r4, #4]
   1338c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13390:	mov	r0, #32
   13394:	b	133a4 <flatcc_builder_default_alloc@@Base+0x98>
   13398:	mov	r0, r2
   1339c:	b	133a4 <flatcc_builder_default_alloc@@Base+0x98>
   133a0:	mov	r0, #64	; 0x40
   133a4:	mov	r7, r0
   133a8:	lsl	r0, r0, #1
   133ac:	cmp	r7, r2
   133b0:	bcc	133a4 <flatcc_builder_default_alloc@@Base+0x98>
   133b4:	ldr	r0, [r4, #4]
   133b8:	mov	r6, #0
   133bc:	cmp	r0, r2
   133c0:	lsrcs	r0, r0, #1
   133c4:	cmpcs	r0, r7
   133c8:	bcs	13400 <flatcc_builder_default_alloc@@Base+0xf4>
   133cc:	ldr	r0, [r4]
   133d0:	mov	r1, r7
   133d4:	bl	12730 <realloc@plt>
   133d8:	cmp	r0, #0
   133dc:	mvneq	r6, #0
   133e0:	moveq	r0, r6
   133e4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   133e8:	cmp	r8, #0
   133ec:	mov	r5, r0
   133f0:	ldrne	r1, [r4, #4]
   133f4:	cmpne	r7, r1
   133f8:	bhi	13408 <flatcc_builder_default_alloc@@Base+0xfc>
   133fc:	stm	r4, {r5, r7}
   13400:	mov	r0, r6
   13404:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13408:	add	r0, r5, r1
   1340c:	sub	r2, r7, r1
   13410:	mov	r1, #0
   13414:	bl	12778 <memset@plt>
   13418:	b	133fc <flatcc_builder_default_alloc@@Base+0xf0>

0001341c <flatcc_builder_flush_vtable_cache@@Base>:
   1341c:	push	{r4, r5, fp, lr}
   13420:	add	fp, sp, #8
   13424:	mov	r4, r0
   13428:	ldr	r0, [r0, #116]	; 0x74
   1342c:	cmp	r0, #0
   13430:	popeq	{r4, r5, fp, pc}
   13434:	ldr	r0, [r4, #92]	; 0x5c
   13438:	ldr	r2, [r4, #96]	; 0x60
   1343c:	mov	r1, #0
   13440:	mov	r5, #0
   13444:	bl	12778 <memset@plt>
   13448:	mov	r0, #16
   1344c:	str	r5, [r4, #120]	; 0x78
   13450:	str	r0, [r4, #124]	; 0x7c
   13454:	pop	{r4, r5, fp, pc}

00013458 <flatcc_builder_custom_init@@Base>:
   13458:	push	{r4, r5, r6, r7, fp, lr}
   1345c:	add	fp, sp, #16
   13460:	mov	r6, r2
   13464:	mov	r7, r1
   13468:	mov	r1, #0
   1346c:	mov	r2, #232	; 0xe8
   13470:	mov	r5, r3
   13474:	mov	r4, r0
   13478:	bl	12778 <memset@plt>
   1347c:	ldr	r0, [fp, #8]
   13480:	cmp	r7, #0
   13484:	bne	1349c <flatcc_builder_custom_init@@Base+0x44>
   13488:	movw	r7, #33208	; 0x81b8
   1348c:	mov	r1, #1
   13490:	add	r6, r4, #188	; 0xbc
   13494:	movt	r7, #1
   13498:	str	r1, [r4, #184]	; 0xb8
   1349c:	movw	r1, #13068	; 0x330c
   134a0:	cmp	r5, #0
   134a4:	str	r6, [r4, #36]	; 0x24
   134a8:	str	r0, [r4, #40]	; 0x28
   134ac:	mov	r0, #0
   134b0:	str	r7, [r4, #44]	; 0x2c
   134b4:	movt	r1, #1
   134b8:	movne	r1, r5
   134bc:	str	r1, [r4, #48]	; 0x30
   134c0:	pop	{r4, r5, r6, r7, fp, pc}

000134c4 <flatcc_builder_init@@Base>:
   134c4:	push	{r4, r5, fp, lr}
   134c8:	add	fp, sp, #8
   134cc:	mov	r1, #0
   134d0:	mov	r2, #232	; 0xe8
   134d4:	mov	r4, r0
   134d8:	mov	r5, #0
   134dc:	bl	12778 <memset@plt>
   134e0:	mov	r0, #1
   134e4:	movw	r2, #33208	; 0x81b8
   134e8:	add	r1, r4, #188	; 0xbc
   134ec:	str	r0, [r4, #184]	; 0xb8
   134f0:	movw	r0, #13068	; 0x330c
   134f4:	movt	r2, #1
   134f8:	str	r1, [r4, #36]	; 0x24
   134fc:	str	r5, [r4, #40]	; 0x28
   13500:	movt	r0, #1
   13504:	str	r2, [r4, #44]	; 0x2c
   13508:	str	r0, [r4, #48]	; 0x30
   1350c:	mov	r0, #0
   13510:	pop	{r4, r5, fp, pc}

00013514 <flatcc_builder_custom_reset@@Base>:
   13514:	push	{r4, r5, r6, sl, fp, lr}
   13518:	add	fp, sp, #16
   1351c:	sub	sp, sp, #8
   13520:	mov	r5, r1
   13524:	mov	r4, r0
   13528:	cmp	r2, #0
   1352c:	beq	1358c <flatcc_builder_custom_reset@@Base+0x78>
   13530:	mov	r1, r4
   13534:	ldr	r0, [r1, #52]!	; 0x34
   13538:	cmp	r0, #0
   1353c:	beq	135b8 <flatcc_builder_custom_reset@@Base+0xa4>
   13540:	ldr	r0, [r4, #40]	; 0x28
   13544:	ldr	r6, [r4, #48]	; 0x30
   13548:	mov	r2, #0
   1354c:	mov	r3, #1
   13550:	str	r2, [sp]
   13554:	mov	r2, #1
   13558:	blx	r6
   1355c:	mvn	r6, #0
   13560:	cmp	r0, #0
   13564:	bne	1386c <flatcc_builder_custom_reset@@Base+0x358>
   13568:	ldr	r0, [r4, #52]	; 0x34
   1356c:	ldr	r2, [r4, #56]	; 0x38
   13570:	mov	r1, #0
   13574:	bl	12778 <memset@plt>
   13578:	mov	r1, r4
   1357c:	ldr	r0, [r1, #60]!	; 0x3c
   13580:	cmp	r0, #0
   13584:	bne	135d4 <flatcc_builder_custom_reset@@Base+0xc0>
   13588:	b	13620 <flatcc_builder_custom_reset@@Base+0x10c>
   1358c:	ldr	r0, [r4, #52]	; 0x34
   13590:	ldr	r2, [r4, #56]	; 0x38
   13594:	cmp	r0, #0
   13598:	beq	13688 <flatcc_builder_custom_reset@@Base+0x174>
   1359c:	mov	r1, #0
   135a0:	bl	12778 <memset@plt>
   135a4:	ldr	r0, [r4, #60]	; 0x3c
   135a8:	ldr	r2, [r4, #64]	; 0x40
   135ac:	cmp	r0, #0
   135b0:	bne	136a0 <flatcc_builder_custom_reset@@Base+0x18c>
   135b4:	b	136bc <flatcc_builder_custom_reset@@Base+0x1a8>
   135b8:	ldr	r0, [r4, #56]	; 0x38
   135bc:	cmp	r0, #0
   135c0:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   135c4:	mov	r1, r4
   135c8:	ldr	r0, [r1, #60]!	; 0x3c
   135cc:	cmp	r0, #0
   135d0:	beq	13620 <flatcc_builder_custom_reset@@Base+0x10c>
   135d4:	ldr	r0, [r4, #40]	; 0x28
   135d8:	ldr	r6, [r4, #48]	; 0x30
   135dc:	mov	r2, #1
   135e0:	mov	r3, #1
   135e4:	str	r2, [sp]
   135e8:	mov	r2, #1
   135ec:	blx	r6
   135f0:	mvn	r6, #0
   135f4:	cmp	r0, #0
   135f8:	bne	1386c <flatcc_builder_custom_reset@@Base+0x358>
   135fc:	ldr	r0, [r4, #60]	; 0x3c
   13600:	ldr	r2, [r4, #64]	; 0x40
   13604:	mov	r1, #0
   13608:	bl	12778 <memset@plt>
   1360c:	mov	r1, r4
   13610:	ldr	r0, [r1, #68]!	; 0x44
   13614:	cmp	r0, #0
   13618:	bne	1363c <flatcc_builder_custom_reset@@Base+0x128>
   1361c:	b	13878 <flatcc_builder_custom_reset@@Base+0x364>
   13620:	ldr	r0, [r4, #64]	; 0x40
   13624:	cmp	r0, #0
   13628:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   1362c:	mov	r1, r4
   13630:	ldr	r0, [r1, #68]!	; 0x44
   13634:	cmp	r0, #0
   13638:	beq	13878 <flatcc_builder_custom_reset@@Base+0x364>
   1363c:	ldr	r0, [r4, #40]	; 0x28
   13640:	ldr	r6, [r4, #48]	; 0x30
   13644:	mov	r2, #2
   13648:	mov	r3, #1
   1364c:	str	r2, [sp]
   13650:	mov	r2, #1
   13654:	blx	r6
   13658:	mvn	r6, #0
   1365c:	cmp	r0, #0
   13660:	bne	1386c <flatcc_builder_custom_reset@@Base+0x358>
   13664:	ldr	r0, [r4, #68]	; 0x44
   13668:	ldr	r2, [r4, #72]	; 0x48
   1366c:	mov	r1, #0
   13670:	bl	12778 <memset@plt>
   13674:	mov	r1, r4
   13678:	ldr	r0, [r1, #76]!	; 0x4c
   1367c:	cmp	r0, #0
   13680:	bne	13894 <flatcc_builder_custom_reset@@Base+0x380>
   13684:	b	138e0 <flatcc_builder_custom_reset@@Base+0x3cc>
   13688:	cmp	r2, #0
   1368c:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   13690:	ldr	r0, [r4, #60]	; 0x3c
   13694:	ldr	r2, [r4, #64]	; 0x40
   13698:	cmp	r0, #0
   1369c:	beq	136bc <flatcc_builder_custom_reset@@Base+0x1a8>
   136a0:	mov	r1, #0
   136a4:	bl	12778 <memset@plt>
   136a8:	ldr	r0, [r4, #68]	; 0x44
   136ac:	ldr	r2, [r4, #72]	; 0x48
   136b0:	cmp	r0, #0
   136b4:	bne	136d4 <flatcc_builder_custom_reset@@Base+0x1c0>
   136b8:	b	136f0 <flatcc_builder_custom_reset@@Base+0x1dc>
   136bc:	cmp	r2, #0
   136c0:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   136c4:	ldr	r0, [r4, #68]	; 0x44
   136c8:	ldr	r2, [r4, #72]	; 0x48
   136cc:	cmp	r0, #0
   136d0:	beq	136f0 <flatcc_builder_custom_reset@@Base+0x1dc>
   136d4:	mov	r1, #0
   136d8:	bl	12778 <memset@plt>
   136dc:	ldr	r0, [r4, #76]	; 0x4c
   136e0:	ldr	r2, [r4, #80]	; 0x50
   136e4:	cmp	r0, #0
   136e8:	bne	13708 <flatcc_builder_custom_reset@@Base+0x1f4>
   136ec:	b	13724 <flatcc_builder_custom_reset@@Base+0x210>
   136f0:	cmp	r2, #0
   136f4:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   136f8:	ldr	r0, [r4, #76]	; 0x4c
   136fc:	ldr	r2, [r4, #80]	; 0x50
   13700:	cmp	r0, #0
   13704:	beq	13724 <flatcc_builder_custom_reset@@Base+0x210>
   13708:	mov	r1, #0
   1370c:	bl	12778 <memset@plt>
   13710:	ldr	r0, [r4, #84]	; 0x54
   13714:	ldr	r2, [r4, #88]	; 0x58
   13718:	cmp	r0, #0
   1371c:	bne	1373c <flatcc_builder_custom_reset@@Base+0x228>
   13720:	b	13758 <flatcc_builder_custom_reset@@Base+0x244>
   13724:	cmp	r2, #0
   13728:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   1372c:	ldr	r0, [r4, #84]	; 0x54
   13730:	ldr	r2, [r4, #88]	; 0x58
   13734:	cmp	r0, #0
   13738:	beq	13758 <flatcc_builder_custom_reset@@Base+0x244>
   1373c:	mov	r1, #0
   13740:	bl	12778 <memset@plt>
   13744:	ldr	r0, [r4, #92]	; 0x5c
   13748:	ldr	r2, [r4, #96]	; 0x60
   1374c:	cmp	r0, #0
   13750:	bne	13770 <flatcc_builder_custom_reset@@Base+0x25c>
   13754:	b	1378c <flatcc_builder_custom_reset@@Base+0x278>
   13758:	cmp	r2, #0
   1375c:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   13760:	ldr	r0, [r4, #92]	; 0x5c
   13764:	ldr	r2, [r4, #96]	; 0x60
   13768:	cmp	r0, #0
   1376c:	beq	1378c <flatcc_builder_custom_reset@@Base+0x278>
   13770:	mov	r1, #0
   13774:	bl	12778 <memset@plt>
   13778:	ldr	r0, [r4, #100]	; 0x64
   1377c:	ldr	r2, [r4, #104]	; 0x68
   13780:	cmp	r0, #0
   13784:	bne	137a4 <flatcc_builder_custom_reset@@Base+0x290>
   13788:	b	137c0 <flatcc_builder_custom_reset@@Base+0x2ac>
   1378c:	cmp	r2, #0
   13790:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   13794:	ldr	r0, [r4, #100]	; 0x64
   13798:	ldr	r2, [r4, #104]	; 0x68
   1379c:	cmp	r0, #0
   137a0:	beq	137c0 <flatcc_builder_custom_reset@@Base+0x2ac>
   137a4:	mov	r1, #0
   137a8:	bl	12778 <memset@plt>
   137ac:	ldr	r0, [r4, #108]	; 0x6c
   137b0:	ldr	r2, [r4, #112]	; 0x70
   137b4:	cmp	r0, #0
   137b8:	bne	137d8 <flatcc_builder_custom_reset@@Base+0x2c4>
   137bc:	b	137e4 <flatcc_builder_custom_reset@@Base+0x2d0>
   137c0:	cmp	r2, #0
   137c4:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   137c8:	ldr	r0, [r4, #108]	; 0x6c
   137cc:	ldr	r2, [r4, #112]	; 0x70
   137d0:	cmp	r0, #0
   137d4:	beq	137e4 <flatcc_builder_custom_reset@@Base+0x2d0>
   137d8:	mov	r1, #0
   137dc:	bl	12778 <memset@plt>
   137e0:	b	137ec <flatcc_builder_custom_reset@@Base+0x2d8>
   137e4:	cmp	r2, #0
   137e8:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   137ec:	mov	r0, #0
   137f0:	vmov.i32	q8, #0	; 0x00000000
   137f4:	mov	r6, #0
   137f8:	str	r0, [r4, #120]	; 0x78
   137fc:	ldr	r1, [r4, #124]	; 0x7c
   13800:	cmp	r1, #0
   13804:	movne	r1, #16
   13808:	strne	r1, [r4, #124]	; 0x7c
   1380c:	add	r1, r4, #148	; 0x94
   13810:	strh	r0, [r4, #128]	; 0x80
   13814:	str	r0, [r4, #136]	; 0x88
   13818:	str	r0, [r4, #140]	; 0x8c
   1381c:	str	r0, [r4, #32]
   13820:	cmp	r5, #0
   13824:	vst1.32	{d16-d17}, [r1]
   13828:	ldr	r2, [r4, #60]	; 0x3c
   1382c:	ldr	r1, [r4, #52]	; 0x34
   13830:	ldr	r3, [r4, #76]	; 0x4c
   13834:	str	r2, [r4, #16]
   13838:	str	r0, [r4, #20]
   1383c:	str	r0, [r4, #24]
   13840:	movne	r0, #0
   13844:	str	r3, [r4]
   13848:	str	r1, [r4, #4]
   1384c:	strne	r0, [r4, #172]	; 0xac
   13850:	strne	r0, [r4, #176]	; 0xb0
   13854:	strne	r0, [r4, #180]	; 0xb4
   13858:	ldr	r0, [r4, #184]	; 0xb8
   1385c:	cmp	r0, #0
   13860:	beq	1386c <flatcc_builder_custom_reset@@Base+0x358>
   13864:	add	r0, r4, #188	; 0xbc
   13868:	bl	18080 <flatcc_emitter_reset@@Base>
   1386c:	mov	r0, r6
   13870:	sub	sp, fp, #16
   13874:	pop	{r4, r5, r6, sl, fp, pc}
   13878:	ldr	r0, [r4, #72]	; 0x48
   1387c:	cmp	r0, #0
   13880:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   13884:	mov	r1, r4
   13888:	ldr	r0, [r1, #76]!	; 0x4c
   1388c:	cmp	r0, #0
   13890:	beq	138e0 <flatcc_builder_custom_reset@@Base+0x3cc>
   13894:	ldr	r0, [r4, #40]	; 0x28
   13898:	ldr	r6, [r4, #48]	; 0x30
   1389c:	mov	r2, #3
   138a0:	mov	r3, #1
   138a4:	str	r2, [sp]
   138a8:	mov	r2, #1
   138ac:	blx	r6
   138b0:	mvn	r6, #0
   138b4:	cmp	r0, #0
   138b8:	bne	1386c <flatcc_builder_custom_reset@@Base+0x358>
   138bc:	ldr	r0, [r4, #76]	; 0x4c
   138c0:	ldr	r2, [r4, #80]	; 0x50
   138c4:	mov	r1, #0
   138c8:	bl	12778 <memset@plt>
   138cc:	mov	r1, r4
   138d0:	ldr	r0, [r1, #84]!	; 0x54
   138d4:	cmp	r0, #0
   138d8:	bne	138fc <flatcc_builder_custom_reset@@Base+0x3e8>
   138dc:	b	13948 <flatcc_builder_custom_reset@@Base+0x434>
   138e0:	ldr	r0, [r4, #80]	; 0x50
   138e4:	cmp	r0, #0
   138e8:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   138ec:	mov	r1, r4
   138f0:	ldr	r0, [r1, #84]!	; 0x54
   138f4:	cmp	r0, #0
   138f8:	beq	13948 <flatcc_builder_custom_reset@@Base+0x434>
   138fc:	ldr	r0, [r4, #40]	; 0x28
   13900:	ldr	r6, [r4, #48]	; 0x30
   13904:	mov	r2, #4
   13908:	mov	r3, #1
   1390c:	str	r2, [sp]
   13910:	mov	r2, #1
   13914:	blx	r6
   13918:	mvn	r6, #0
   1391c:	cmp	r0, #0
   13920:	bne	1386c <flatcc_builder_custom_reset@@Base+0x358>
   13924:	ldr	r0, [r4, #84]	; 0x54
   13928:	ldr	r2, [r4, #88]	; 0x58
   1392c:	mov	r1, #0
   13930:	bl	12778 <memset@plt>
   13934:	ldr	r0, [r4, #92]	; 0x5c
   13938:	ldr	r2, [r4, #96]	; 0x60
   1393c:	cmp	r0, #0
   13940:	bne	13964 <flatcc_builder_custom_reset@@Base+0x450>
   13944:	b	13980 <flatcc_builder_custom_reset@@Base+0x46c>
   13948:	ldr	r0, [r4, #88]	; 0x58
   1394c:	cmp	r0, #0
   13950:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   13954:	ldr	r0, [r4, #92]	; 0x5c
   13958:	ldr	r2, [r4, #96]	; 0x60
   1395c:	cmp	r0, #0
   13960:	beq	13980 <flatcc_builder_custom_reset@@Base+0x46c>
   13964:	mov	r1, #0
   13968:	bl	12778 <memset@plt>
   1396c:	mov	r1, r4
   13970:	ldr	r0, [r1, #100]!	; 0x64
   13974:	cmp	r0, #0
   13978:	bne	13998 <flatcc_builder_custom_reset@@Base+0x484>
   1397c:	b	139e4 <flatcc_builder_custom_reset@@Base+0x4d0>
   13980:	cmp	r2, #0
   13984:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   13988:	mov	r1, r4
   1398c:	ldr	r0, [r1, #100]!	; 0x64
   13990:	cmp	r0, #0
   13994:	beq	139e4 <flatcc_builder_custom_reset@@Base+0x4d0>
   13998:	ldr	r0, [r4, #40]	; 0x28
   1399c:	ldr	r6, [r4, #48]	; 0x30
   139a0:	mov	r2, #6
   139a4:	mov	r3, #1
   139a8:	str	r2, [sp]
   139ac:	mov	r2, #1
   139b0:	blx	r6
   139b4:	mvn	r6, #0
   139b8:	cmp	r0, #0
   139bc:	bne	1386c <flatcc_builder_custom_reset@@Base+0x358>
   139c0:	ldr	r0, [r4, #100]	; 0x64
   139c4:	ldr	r2, [r4, #104]	; 0x68
   139c8:	mov	r1, #0
   139cc:	bl	12778 <memset@plt>
   139d0:	mov	r1, r4
   139d4:	ldr	r0, [r1, #108]!	; 0x6c
   139d8:	cmp	r0, #0
   139dc:	bne	13a00 <flatcc_builder_custom_reset@@Base+0x4ec>
   139e0:	b	13a34 <flatcc_builder_custom_reset@@Base+0x520>
   139e4:	ldr	r0, [r4, #104]	; 0x68
   139e8:	cmp	r0, #0
   139ec:	bne	13a40 <flatcc_builder_custom_reset@@Base+0x52c>
   139f0:	mov	r1, r4
   139f4:	ldr	r0, [r1, #108]!	; 0x6c
   139f8:	cmp	r0, #0
   139fc:	beq	13a34 <flatcc_builder_custom_reset@@Base+0x520>
   13a00:	ldr	r0, [r4, #40]	; 0x28
   13a04:	ldr	r6, [r4, #48]	; 0x30
   13a08:	mov	r2, #7
   13a0c:	mov	r3, #1
   13a10:	str	r2, [sp]
   13a14:	mov	r2, #1
   13a18:	blx	r6
   13a1c:	mvn	r6, #0
   13a20:	cmp	r0, #0
   13a24:	bne	1386c <flatcc_builder_custom_reset@@Base+0x358>
   13a28:	ldr	r0, [r4, #108]	; 0x6c
   13a2c:	ldr	r2, [r4, #112]	; 0x70
   13a30:	b	137d8 <flatcc_builder_custom_reset@@Base+0x2c4>
   13a34:	ldr	r0, [r4, #112]	; 0x70
   13a38:	cmp	r0, #0
   13a3c:	beq	137ec <flatcc_builder_custom_reset@@Base+0x2d8>
   13a40:	movw	r0, #41948	; 0xa3dc
   13a44:	movw	r1, #41966	; 0xa3ee
   13a48:	movw	r3, #42036	; 0xa434
   13a4c:	movw	r2, #434	; 0x1b2
   13a50:	movt	r0, #1
   13a54:	movt	r1, #1
   13a58:	movt	r3, #1
   13a5c:	bl	127a8 <__assert_fail@plt>

00013a60 <flatcc_builder_reset@@Base>:
   13a60:	mov	r1, #0
   13a64:	mov	r2, #0
   13a68:	b	13514 <flatcc_builder_custom_reset@@Base>

00013a6c <flatcc_builder_clear@@Base>:
   13a6c:	push	{r4, sl, fp, lr}
   13a70:	add	fp, sp, #8
   13a74:	sub	sp, sp, #8
   13a78:	mov	r4, r0
   13a7c:	ldr	r0, [r0, #40]	; 0x28
   13a80:	mov	r1, #0
   13a84:	mov	r2, #0
   13a88:	mov	r3, #0
   13a8c:	ldr	ip, [r4, #48]	; 0x30
   13a90:	str	r1, [sp]
   13a94:	add	r1, r4, #52	; 0x34
   13a98:	blx	ip
   13a9c:	ldr	r0, [r4, #40]	; 0x28
   13aa0:	ldr	ip, [r4, #48]	; 0x30
   13aa4:	mov	r1, #1
   13aa8:	mov	r2, #0
   13aac:	mov	r3, #0
   13ab0:	str	r1, [sp]
   13ab4:	add	r1, r4, #60	; 0x3c
   13ab8:	blx	ip
   13abc:	ldr	r0, [r4, #40]	; 0x28
   13ac0:	ldr	ip, [r4, #48]	; 0x30
   13ac4:	mov	r1, #2
   13ac8:	mov	r2, #0
   13acc:	mov	r3, #0
   13ad0:	str	r1, [sp]
   13ad4:	add	r1, r4, #68	; 0x44
   13ad8:	blx	ip
   13adc:	ldr	r0, [r4, #40]	; 0x28
   13ae0:	ldr	ip, [r4, #48]	; 0x30
   13ae4:	mov	r1, #3
   13ae8:	mov	r2, #0
   13aec:	mov	r3, #0
   13af0:	str	r1, [sp]
   13af4:	add	r1, r4, #76	; 0x4c
   13af8:	blx	ip
   13afc:	ldr	r0, [r4, #40]	; 0x28
   13b00:	ldr	ip, [r4, #48]	; 0x30
   13b04:	mov	r1, #4
   13b08:	mov	r2, #0
   13b0c:	mov	r3, #0
   13b10:	str	r1, [sp]
   13b14:	add	r1, r4, #84	; 0x54
   13b18:	blx	ip
   13b1c:	ldr	r0, [r4, #40]	; 0x28
   13b20:	ldr	ip, [r4, #48]	; 0x30
   13b24:	mov	r1, #5
   13b28:	mov	r2, #0
   13b2c:	mov	r3, #0
   13b30:	str	r1, [sp]
   13b34:	add	r1, r4, #92	; 0x5c
   13b38:	blx	ip
   13b3c:	ldr	r0, [r4, #40]	; 0x28
   13b40:	ldr	ip, [r4, #48]	; 0x30
   13b44:	mov	r1, #6
   13b48:	mov	r2, #0
   13b4c:	mov	r3, #0
   13b50:	str	r1, [sp]
   13b54:	add	r1, r4, #100	; 0x64
   13b58:	blx	ip
   13b5c:	ldr	r0, [r4, #40]	; 0x28
   13b60:	ldr	ip, [r4, #48]	; 0x30
   13b64:	mov	r1, #7
   13b68:	mov	r2, #0
   13b6c:	mov	r3, #0
   13b70:	str	r1, [sp]
   13b74:	add	r1, r4, #108	; 0x6c
   13b78:	blx	ip
   13b7c:	ldr	r0, [r4, #184]	; 0xb8
   13b80:	cmp	r0, #0
   13b84:	beq	13b90 <flatcc_builder_clear@@Base+0x124>
   13b88:	add	r0, r4, #188	; 0xbc
   13b8c:	bl	1814c <flatcc_emitter_clear@@Base>
   13b90:	mov	r0, r4
   13b94:	mov	r1, #0
   13b98:	mov	r2, #232	; 0xe8
   13b9c:	sub	sp, fp, #8
   13ba0:	pop	{r4, sl, fp, lr}
   13ba4:	b	12778 <memset@plt>

00013ba8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13ba8:	push	{r4, r5, r6, r7, fp, lr}
   13bac:	add	fp, sp, #16
   13bb0:	sub	sp, sp, #8
   13bb4:	mov	r4, r0
   13bb8:	ldr	r0, [r0, #112]	; 0x70
   13bbc:	add	r1, r1, #7
   13bc0:	ldr	r7, [r4, #228]	; 0xe4
   13bc4:	bic	r5, r1, #3
   13bc8:	add	r6, r4, #108	; 0x6c
   13bcc:	add	r2, r7, r5
   13bd0:	cmp	r2, r0
   13bd4:	bls	13bfc <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13bd8:	ldr	r0, [r4, #40]	; 0x28
   13bdc:	ldr	ip, [r4, #48]	; 0x30
   13be0:	mov	r1, #7
   13be4:	mov	r3, #0
   13be8:	str	r1, [sp]
   13bec:	mov	r1, r6
   13bf0:	blx	ip
   13bf4:	cmp	r0, #0
   13bf8:	bne	13c50 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   13bfc:	ldr	r0, [r6]
   13c00:	adds	r6, r0, r7
   13c04:	beq	13c40 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13c08:	mov	r0, r6
   13c0c:	mov	r1, #0
   13c10:	mov	r2, r5
   13c14:	bl	12778 <memset@plt>
   13c18:	ldr	r0, [r4, #224]	; 0xe0
   13c1c:	str	r0, [r6], #4
   13c20:	ldr	r0, [r4, #228]	; 0xe4
   13c24:	add	r1, r0, #4
   13c28:	add	r0, r0, r5
   13c2c:	str	r1, [r4, #224]	; 0xe0
   13c30:	str	r0, [r4, #228]	; 0xe4
   13c34:	mov	r0, r6
   13c38:	sub	sp, fp, #16
   13c3c:	pop	{r4, r5, r6, r7, fp, pc}
   13c40:	mov	r6, #0
   13c44:	mov	r0, r6
   13c48:	sub	sp, fp, #16
   13c4c:	pop	{r4, r5, r6, r7, fp, pc}
   13c50:	movw	r0, #46484	; 0xb594
   13c54:	movw	r1, #41966	; 0xa3ee
   13c58:	movw	r3, #46030	; 0xb3ce
   13c5c:	mov	r2, #308	; 0x134
   13c60:	movt	r0, #1
   13c64:	movt	r1, #1
   13c68:	movt	r3, #1
   13c6c:	bl	127a8 <__assert_fail@plt>

00013c70 <flatcc_builder_enter_user_frame@@Base>:
   13c70:	push	{r4, r5, r6, r7, fp, lr}
   13c74:	add	fp, sp, #16
   13c78:	sub	sp, sp, #8
   13c7c:	mov	r4, r0
   13c80:	ldr	r0, [r0, #112]	; 0x70
   13c84:	add	r1, r1, #7
   13c88:	ldr	r7, [r4, #228]	; 0xe4
   13c8c:	bic	r5, r1, #3
   13c90:	add	r6, r4, #108	; 0x6c
   13c94:	add	r2, r7, r5
   13c98:	cmp	r2, r0
   13c9c:	bls	13cc4 <flatcc_builder_enter_user_frame@@Base+0x54>
   13ca0:	ldr	r0, [r4, #40]	; 0x28
   13ca4:	ldr	ip, [r4, #48]	; 0x30
   13ca8:	mov	r1, #7
   13cac:	mov	r3, #0
   13cb0:	str	r1, [sp]
   13cb4:	mov	r1, r6
   13cb8:	blx	ip
   13cbc:	cmp	r0, #0
   13cc0:	bne	13d0c <flatcc_builder_enter_user_frame@@Base+0x9c>
   13cc4:	ldr	r0, [r6]
   13cc8:	adds	r6, r0, r7
   13ccc:	moveq	r0, #0
   13cd0:	subeq	sp, fp, #16
   13cd4:	popeq	{r4, r5, r6, r7, fp, pc}
   13cd8:	mov	r0, r6
   13cdc:	mov	r1, #0
   13ce0:	mov	r2, r5
   13ce4:	bl	12778 <memset@plt>
   13ce8:	ldr	r0, [r4, #224]	; 0xe0
   13cec:	str	r0, [r6]
   13cf0:	ldr	r1, [r4, #228]	; 0xe4
   13cf4:	add	r0, r1, #4
   13cf8:	add	r1, r1, r5
   13cfc:	str	r0, [r4, #224]	; 0xe0
   13d00:	str	r1, [r4, #228]	; 0xe4
   13d04:	sub	sp, fp, #16
   13d08:	pop	{r4, r5, r6, r7, fp, pc}
   13d0c:	movw	r0, #46484	; 0xb594
   13d10:	movw	r1, #41966	; 0xa3ee
   13d14:	movw	r3, #46030	; 0xb3ce
   13d18:	mov	r2, #308	; 0x134
   13d1c:	movt	r0, #1
   13d20:	movt	r1, #1
   13d24:	movt	r3, #1
   13d28:	bl	127a8 <__assert_fail@plt>

00013d2c <flatcc_builder_exit_user_frame@@Base>:
   13d2c:	ldr	r1, [r0, #224]	; 0xe0
   13d30:	cmp	r1, #0
   13d34:	subne	r2, r1, #4
   13d38:	strne	r2, [r0, #228]	; 0xe4
   13d3c:	ldrne	r2, [r0, #108]	; 0x6c
   13d40:	addne	r1, r2, r1
   13d44:	ldrne	r1, [r1, #-4]
   13d48:	strne	r1, [r0, #224]	; 0xe0
   13d4c:	movne	r0, r1
   13d50:	bxne	lr
   13d54:	push	{fp, lr}
   13d58:	mov	fp, sp
   13d5c:	movw	r0, #42098	; 0xa472
   13d60:	movw	r1, #41966	; 0xa3ee
   13d64:	movw	r3, #42123	; 0xa48b
   13d68:	movw	r2, #542	; 0x21e
   13d6c:	movt	r0, #1
   13d70:	movt	r1, #1
   13d74:	movt	r3, #1
   13d78:	bl	127a8 <__assert_fail@plt>

00013d7c <flatcc_builder_exit_user_frame_at@@Base>:
   13d7c:	push	{fp, lr}
   13d80:	mov	fp, sp
   13d84:	ldr	r2, [r0, #224]	; 0xe0
   13d88:	cmp	r2, r1
   13d8c:	bcc	13dd8 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13d90:	cmp	r1, #0
   13d94:	str	r1, [r0, #224]	; 0xe0
   13d98:	subne	r2, r1, #4
   13d9c:	strne	r2, [r0, #228]	; 0xe4
   13da0:	ldrne	r2, [r0, #108]	; 0x6c
   13da4:	addne	r1, r2, r1
   13da8:	ldrne	r1, [r1, #-4]
   13dac:	strne	r1, [r0, #224]	; 0xe0
   13db0:	movne	r0, r1
   13db4:	popne	{fp, pc}
   13db8:	movw	r0, #42098	; 0xa472
   13dbc:	movw	r1, #41966	; 0xa3ee
   13dc0:	movw	r3, #42123	; 0xa48b
   13dc4:	movw	r2, #542	; 0x21e
   13dc8:	movt	r0, #1
   13dcc:	movt	r1, #1
   13dd0:	movt	r3, #1
   13dd4:	bl	127a8 <__assert_fail@plt>
   13dd8:	movw	r0, #42181	; 0xa4c5
   13ddc:	movw	r1, #41966	; 0xa3ee
   13de0:	movw	r3, #42212	; 0xa4e4
   13de4:	movw	r2, #551	; 0x227
   13de8:	movt	r0, #1
   13dec:	movt	r1, #1
   13df0:	movt	r3, #1
   13df4:	bl	127a8 <__assert_fail@plt>

00013df8 <flatcc_builder_get_current_user_frame@@Base>:
   13df8:	ldr	r0, [r0, #224]	; 0xe0
   13dfc:	bx	lr

00013e00 <flatcc_builder_get_user_frame_ptr@@Base>:
   13e00:	ldr	r0, [r0, #108]	; 0x6c
   13e04:	add	r0, r0, r1
   13e08:	bx	lr

00013e0c <flatcc_builder_embed_buffer@@Base>:
   13e0c:	push	{r4, r5, r6, r7, fp, lr}
   13e10:	add	fp, sp, #16
   13e14:	sub	sp, sp, #88	; 0x58
   13e18:	mov	r4, r0
   13e1c:	ldr	r0, [fp, #8]
   13e20:	mov	r5, r3
   13e24:	mov	r7, r2
   13e28:	mov	r2, r1
   13e2c:	sub	r1, fp, #18
   13e30:	strh	r0, [fp, #-18]	; 0xffffffee
   13e34:	mov	r0, r4
   13e38:	ldr	r3, [r4, #152]	; 0x98
   13e3c:	cmp	r3, #0
   13e40:	movwne	r3, #1
   13e44:	bl	13f7c <flatcc_builder_embed_buffer@@Base+0x170>
   13e48:	ldr	r1, [fp, #12]
   13e4c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13e50:	ldr	r0, [r4, #136]	; 0x88
   13e54:	mov	r2, #0
   13e58:	str	r2, [sp, #8]
   13e5c:	str	r2, [sp, #12]
   13e60:	and	r1, r1, #2
   13e64:	sub	r3, r3, #1
   13e68:	add	r1, r5, r1, lsl #1
   13e6c:	sub	r1, r0, r1
   13e70:	and	r3, r3, r1
   13e74:	add	r1, r3, r5
   13e78:	str	r1, [fp, #-24]	; 0xffffffe8
   13e7c:	ldr	r1, [r4, #152]	; 0x98
   13e80:	cmp	r1, #0
   13e84:	mov	r1, #0
   13e88:	beq	13ea8 <flatcc_builder_embed_buffer@@Base+0x9c>
   13e8c:	sub	r1, fp, #24
   13e90:	mov	r2, #1
   13e94:	str	r1, [sp, #16]
   13e98:	mov	r1, #4
   13e9c:	str	r1, [sp, #8]
   13ea0:	str	r1, [sp, #20]
   13ea4:	str	r2, [sp, #12]
   13ea8:	cmp	r5, #0
   13eac:	beq	13ed0 <flatcc_builder_embed_buffer@@Base+0xc4>
   13eb0:	add	r6, sp, #8
   13eb4:	add	r1, r1, r5
   13eb8:	add	r6, r6, r2, lsl #3
   13ebc:	add	r2, r2, #1
   13ec0:	str	r1, [sp, #8]
   13ec4:	str	r7, [r6, #8]
   13ec8:	str	r5, [r6, #12]
   13ecc:	str	r2, [sp, #12]
   13ed0:	cmp	r3, #0
   13ed4:	beq	13f00 <flatcc_builder_embed_buffer@@Base+0xf4>
   13ed8:	add	r7, sp, #8
   13edc:	movw	r6, #41436	; 0xa1dc
   13ee0:	add	r1, r1, r3
   13ee4:	add	r7, r7, r2, lsl #3
   13ee8:	add	r2, r2, #1
   13eec:	movt	r6, #1
   13ef0:	str	r1, [sp, #8]
   13ef4:	str	r6, [r7, #8]
   13ef8:	str	r3, [r7, #12]
   13efc:	str	r2, [sp, #12]
   13f00:	cmp	r1, #0
   13f04:	ble	13f5c <flatcc_builder_embed_buffer@@Base+0x150>
   13f08:	sub	r5, r0, r1
   13f0c:	ldr	r0, [r4, #36]	; 0x24
   13f10:	ldr	r7, [r4, #44]	; 0x2c
   13f14:	str	r1, [sp]
   13f18:	add	r1, sp, #8
   13f1c:	add	r1, r1, #8
   13f20:	mov	r3, r5
   13f24:	blx	r7
   13f28:	cmp	r0, #0
   13f2c:	streq	r5, [r4, #136]	; 0x88
   13f30:	moveq	r0, r5
   13f34:	subeq	sp, fp, #16
   13f38:	popeq	{r4, r5, r6, r7, fp, pc}
   13f3c:	movw	r0, #46484	; 0xb594
   13f40:	movw	r1, #41966	; 0xa3ee
   13f44:	movw	r3, #46163	; 0xb453
   13f48:	movw	r2, #651	; 0x28b
   13f4c:	movt	r0, #1
   13f50:	movt	r1, #1
   13f54:	movt	r3, #1
   13f58:	bl	127a8 <__assert_fail@plt>
   13f5c:	movw	r0, #46484	; 0xb594
   13f60:	movw	r1, #41966	; 0xa3ee
   13f64:	movw	r3, #46163	; 0xb453
   13f68:	movw	r2, #647	; 0x287
   13f6c:	movt	r0, #1
   13f70:	movt	r1, #1
   13f74:	movt	r3, #1
   13f78:	bl	127a8 <__assert_fail@plt>
   13f7c:	push	{r4, sl, fp, lr}
   13f80:	add	fp, sp, #8
   13f84:	sub	sp, sp, #80	; 0x50
   13f88:	cmp	r2, #0
   13f8c:	bne	13f9c <flatcc_builder_embed_buffer@@Base+0x190>
   13f90:	ldrh	r2, [r0, #132]	; 0x84
   13f94:	cmp	r2, #0
   13f98:	movweq	r2, #1
   13f9c:	ldrh	r4, [r1]
   13fa0:	cmp	r4, #4
   13fa4:	movwcc	r4, #4
   13fa8:	cmpcs	r4, r2
   13fac:	bcs	13fbc <flatcc_builder_embed_buffer@@Base+0x1b0>
   13fb0:	cmp	r4, r2
   13fb4:	movcc	r4, r2
   13fb8:	strh	r4, [r1]
   13fbc:	cmp	r3, #0
   13fc0:	bne	14034 <flatcc_builder_embed_buffer@@Base+0x228>
   13fc4:	ldr	r4, [r0, #140]	; 0x8c
   13fc8:	sub	r1, r2, #1
   13fcc:	ands	r1, r4, r1
   13fd0:	beq	14034 <flatcc_builder_embed_buffer@@Base+0x228>
   13fd4:	movw	r2, #41436	; 0xa1dc
   13fd8:	cmn	r1, #1
   13fdc:	movt	r2, #1
   13fe0:	str	r2, [sp, #16]
   13fe4:	mov	r2, #1
   13fe8:	str	r1, [sp, #8]
   13fec:	str	r1, [sp, #20]
   13ff0:	str	r2, [sp, #12]
   13ff4:	add	r2, r4, r1
   13ff8:	str	r2, [r0, #140]	; 0x8c
   13ffc:	ble	1403c <flatcc_builder_embed_buffer@@Base+0x230>
   14000:	ldr	r2, [r0, #36]	; 0x24
   14004:	ldr	ip, [r0, #44]	; 0x2c
   14008:	add	r0, sp, #8
   1400c:	str	r1, [sp]
   14010:	mov	r3, r4
   14014:	add	r1, r0, #8
   14018:	mov	r0, r2
   1401c:	mov	r2, #1
   14020:	blx	ip
   14024:	cmp	r0, #0
   14028:	bne	1405c <flatcc_builder_embed_buffer@@Base+0x250>
   1402c:	cmn	r4, #1
   14030:	beq	1407c <flatcc_builder_embed_buffer@@Base+0x270>
   14034:	sub	sp, fp, #8
   14038:	pop	{r4, sl, fp, pc}
   1403c:	movw	r0, #46484	; 0xb594
   14040:	movw	r1, #41966	; 0xa3ee
   14044:	movw	r3, #46351	; 0xb50f
   14048:	movw	r2, #673	; 0x2a1
   1404c:	movt	r0, #1
   14050:	movt	r1, #1
   14054:	movt	r3, #1
   14058:	bl	127a8 <__assert_fail@plt>
   1405c:	movw	r0, #46484	; 0xb594
   14060:	movw	r1, #41966	; 0xa3ee
   14064:	movw	r3, #46351	; 0xb50f
   14068:	movw	r2, #677	; 0x2a5
   1406c:	movt	r0, #1
   14070:	movt	r1, #1
   14074:	movt	r3, #1
   14078:	bl	127a8 <__assert_fail@plt>
   1407c:	movw	r0, #46484	; 0xb594
   14080:	movw	r1, #41966	; 0xa3ee
   14084:	movw	r3, #46097	; 0xb411
   14088:	movw	r2, #702	; 0x2be
   1408c:	movt	r0, #1
   14090:	movt	r1, #1
   14094:	movt	r3, #1
   14098:	bl	127a8 <__assert_fail@plt>

0001409c <flatcc_builder_create_buffer@@Base>:
   1409c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140a0:	add	fp, sp, #28
   140a4:	sub	sp, sp, #100	; 0x64
   140a8:	ldr	r8, [fp, #12]
   140ac:	mov	r4, r0
   140b0:	ldr	r0, [fp, #8]
   140b4:	mov	r7, r1
   140b8:	mov	r5, #0
   140bc:	mov	r9, r3
   140c0:	sub	r1, fp, #30
   140c4:	str	r5, [sp, #12]
   140c8:	and	r6, r8, #1
   140cc:	strh	r0, [fp, #-30]	; 0xffffffe2
   140d0:	mov	r0, r4
   140d4:	mov	r3, r6
   140d8:	bl	13f7c <flatcc_builder_embed_buffer@@Base+0x170>
   140dc:	ldrh	r0, [r4, #128]	; 0x80
   140e0:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   140e4:	cmp	r0, r1
   140e8:	strhcc	r1, [r4, #128]	; 0x80
   140ec:	cmp	r7, #0
   140f0:	stmib	sp, {r6, r9}
   140f4:	beq	14110 <flatcc_builder_create_buffer@@Base+0x74>
   140f8:	ldr	r5, [r7]
   140fc:	cmp	r5, #0
   14100:	str	r5, [sp, #12]
   14104:	movwne	r5, #1
   14108:	lsl	r7, r5, #2
   1410c:	b	14114 <flatcc_builder_create_buffer@@Base+0x78>
   14110:	mov	r7, #0
   14114:	ldr	r9, [r4, #136]	; 0x88
   14118:	mov	sl, #4
   1411c:	mvn	r6, #3
   14120:	mov	r3, #0
   14124:	ands	ip, r8, #3
   14128:	and	r2, sl, r8, lsl #1
   1412c:	str	r3, [sp, #20]
   14130:	str	r3, [sp, #16]
   14134:	sub	r2, r6, r2
   14138:	sub	r6, r1, #1
   1413c:	mov	r1, #4
   14140:	add	r2, r2, r9
   14144:	sub	r2, r2, r7
   14148:	beq	1416c <flatcc_builder_create_buffer@@Base+0xd0>
   1414c:	sub	r1, fp, #40	; 0x28
   14150:	mov	r3, #1
   14154:	str	r1, [sp, #24]
   14158:	mov	r1, #4
   1415c:	str	r1, [sp, #16]
   14160:	str	r1, [sp, #28]
   14164:	mov	r1, #8
   14168:	str	r3, [sp, #20]
   1416c:	add	lr, sp, #16
   14170:	and	r6, r2, r6
   14174:	sub	r0, fp, #36	; 0x24
   14178:	str	r1, [sp, #16]
   1417c:	cmp	r5, #0
   14180:	add	r2, lr, r3, lsl #3
   14184:	str	r0, [r2, #8]
   14188:	str	sl, [r2, #12]
   1418c:	add	r2, r3, #1
   14190:	str	r2, [sp, #20]
   14194:	beq	141b8 <flatcc_builder_create_buffer@@Base+0x11c>
   14198:	add	r1, r1, r7
   1419c:	add	r0, lr, r2, lsl #3
   141a0:	add	r2, sp, #12
   141a4:	str	r1, [sp, #16]
   141a8:	str	r2, [r0, #8]
   141ac:	orr	r2, r3, #2
   141b0:	str	r7, [r0, #12]
   141b4:	str	r2, [sp, #20]
   141b8:	cmp	r6, #0
   141bc:	beq	141e4 <flatcc_builder_create_buffer@@Base+0x148>
   141c0:	movw	r3, #41436	; 0xa1dc
   141c4:	add	r1, r1, r6
   141c8:	add	r0, lr, r2, lsl #3
   141cc:	add	r2, r2, #1
   141d0:	movt	r3, #1
   141d4:	str	r1, [sp, #16]
   141d8:	str	r3, [r0, #8]
   141dc:	str	r6, [r0, #12]
   141e0:	str	r2, [sp, #20]
   141e4:	ldr	r5, [sp, #4]
   141e8:	sub	r7, r9, r1
   141ec:	cmp	ip, #0
   141f0:	mov	r6, #144	; 0x90
   141f4:	ldr	r3, [sp, #8]
   141f8:	mov	r0, r7
   141fc:	addne	r0, r0, #4
   14200:	cmp	r5, #0
   14204:	sub	r3, r3, r0
   14208:	movweq	r6, #140	; 0x8c
   1420c:	cmp	r1, #0
   14210:	ldr	r6, [r4, r6]
   14214:	str	r3, [fp, #-36]	; 0xffffffdc
   14218:	sub	r0, r6, r0
   1421c:	str	r0, [fp, #-40]	; 0xffffffd8
   14220:	ble	14278 <flatcc_builder_create_buffer@@Base+0x1dc>
   14224:	ldr	r0, [r4, #36]	; 0x24
   14228:	ldr	r6, [r4, #44]	; 0x2c
   1422c:	str	r1, [sp]
   14230:	add	r1, lr, #8
   14234:	mov	r3, r7
   14238:	blx	r6
   1423c:	cmp	r0, #0
   14240:	bne	14298 <flatcc_builder_create_buffer@@Base+0x1fc>
   14244:	cmp	r7, #0
   14248:	str	r7, [r4, #136]	; 0x88
   1424c:	movne	r0, r7
   14250:	subne	sp, fp, #28
   14254:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14258:	movw	r0, #46484	; 0xb594
   1425c:	movw	r1, #41966	; 0xa3ee
   14260:	movw	r3, #42281	; 0xa529
   14264:	mov	r2, #772	; 0x304
   14268:	movt	r0, #1
   1426c:	movt	r1, #1
   14270:	movt	r3, #1
   14274:	bl	127a8 <__assert_fail@plt>
   14278:	movw	r0, #46484	; 0xb594
   1427c:	movw	r1, #41966	; 0xa3ee
   14280:	movw	r3, #46163	; 0xb453
   14284:	movw	r2, #647	; 0x287
   14288:	movt	r0, #1
   1428c:	movt	r1, #1
   14290:	movt	r3, #1
   14294:	bl	127a8 <__assert_fail@plt>
   14298:	movw	r0, #46484	; 0xb594
   1429c:	movw	r1, #41966	; 0xa3ee
   142a0:	movw	r3, #46163	; 0xb453
   142a4:	movw	r2, #651	; 0x28b
   142a8:	movt	r0, #1
   142ac:	movt	r1, #1
   142b0:	movt	r3, #1
   142b4:	bl	127a8 <__assert_fail@plt>

000142b8 <flatcc_builder_create_struct@@Base>:
   142b8:	push	{r4, r5, r6, sl, fp, lr}
   142bc:	add	fp, sp, #16
   142c0:	sub	sp, sp, #80	; 0x50
   142c4:	cmp	r3, #0
   142c8:	beq	143a0 <flatcc_builder_create_struct@@Base+0xe8>
   142cc:	mov	r5, r0
   142d0:	ldrh	r0, [r0, #128]	; 0x80
   142d4:	mov	r4, #0
   142d8:	cmp	r0, r3
   142dc:	strhcc	r3, [r5, #128]	; 0x80
   142e0:	sub	r3, r3, #1
   142e4:	cmp	r2, #0
   142e8:	ldr	r0, [r5, #136]	; 0x88
   142ec:	str	r4, [sp, #12]
   142f0:	str	r4, [sp, #8]
   142f4:	movne	r4, #1
   142f8:	strne	r1, [sp, #16]
   142fc:	strne	r2, [sp, #8]
   14300:	strne	r2, [sp, #20]
   14304:	strne	r4, [sp, #12]
   14308:	sub	r6, r0, r2
   1430c:	and	r3, r6, r3
   14310:	cmp	r3, #0
   14314:	beq	14340 <flatcc_builder_create_struct@@Base+0x88>
   14318:	add	r1, sp, #8
   1431c:	movw	r6, #41436	; 0xa1dc
   14320:	add	r2, r3, r2
   14324:	add	r1, r1, r4, lsl #3
   14328:	add	r4, r4, #1
   1432c:	movt	r6, #1
   14330:	str	r2, [sp, #8]
   14334:	str	r6, [r1, #8]
   14338:	str	r3, [r1, #12]
   1433c:	str	r4, [sp, #12]
   14340:	cmp	r2, #0
   14344:	ble	143c0 <flatcc_builder_create_struct@@Base+0x108>
   14348:	sub	r6, r0, r2
   1434c:	ldr	r0, [r5, #36]	; 0x24
   14350:	ldr	ip, [r5, #44]	; 0x2c
   14354:	add	r1, sp, #8
   14358:	str	r2, [sp]
   1435c:	mov	r2, r4
   14360:	add	r1, r1, #8
   14364:	mov	r3, r6
   14368:	blx	ip
   1436c:	cmp	r0, #0
   14370:	streq	r6, [r5, #136]	; 0x88
   14374:	moveq	r0, r6
   14378:	subeq	sp, fp, #16
   1437c:	popeq	{r4, r5, r6, sl, fp, pc}
   14380:	movw	r0, #46484	; 0xb594
   14384:	movw	r1, #41966	; 0xa3ee
   14388:	movw	r3, #46163	; 0xb453
   1438c:	movw	r2, #651	; 0x28b
   14390:	movt	r0, #1
   14394:	movt	r1, #1
   14398:	movt	r3, #1
   1439c:	bl	127a8 <__assert_fail@plt>
   143a0:	movw	r0, #42412	; 0xa5ac
   143a4:	movw	r1, #41966	; 0xa3ee
   143a8:	movw	r3, #42423	; 0xa5b7
   143ac:	movw	r2, #783	; 0x30f
   143b0:	movt	r0, #1
   143b4:	movt	r1, #1
   143b8:	movt	r3, #1
   143bc:	bl	127a8 <__assert_fail@plt>
   143c0:	movw	r0, #46484	; 0xb594
   143c4:	movw	r1, #41966	; 0xa3ee
   143c8:	movw	r3, #46163	; 0xb453
   143cc:	movw	r2, #647	; 0x287
   143d0:	movt	r0, #1
   143d4:	movt	r1, #1
   143d8:	movt	r3, #1
   143dc:	bl	127a8 <__assert_fail@plt>

000143e0 <flatcc_builder_start_buffer@@Base>:
   143e0:	push	{r4, r5, r6, r7, fp, lr}
   143e4:	add	fp, sp, #16
   143e8:	mov	r5, r1
   143ec:	ldrh	r1, [r0, #128]	; 0x80
   143f0:	mov	r6, r3
   143f4:	mov	r7, r2
   143f8:	mov	r4, r0
   143fc:	bl	1449c <flatcc_builder_start_buffer@@Base+0xbc>
   14400:	mov	r1, r0
   14404:	mvn	r0, #0
   14408:	cmp	r1, #0
   1440c:	popne	{r4, r5, r6, r7, fp, pc}
   14410:	mov	r0, #1
   14414:	cmp	r5, #0
   14418:	strh	r0, [r4, #128]	; 0x80
   1441c:	ldrh	r1, [r4, #132]	; 0x84
   14420:	ldr	r2, [r4, #32]
   14424:	strh	r1, [r2, #34]	; 0x22
   14428:	strh	r7, [r4, #132]	; 0x84
   1442c:	ldrh	r1, [r4, #164]	; 0xa4
   14430:	ldr	r2, [r4, #32]
   14434:	strh	r1, [r2, #32]
   14438:	strh	r6, [r4, #164]	; 0xa4
   1443c:	ldr	r1, [r4, #32]
   14440:	ldr	r2, [r4, #144]	; 0x90
   14444:	str	r2, [r1, #20]
   14448:	ldr	r1, [r4, #32]
   1444c:	ldr	r2, [r4, #152]	; 0x98
   14450:	str	r2, [r1, #28]
   14454:	ldr	r3, [r4, #148]	; 0x94
   14458:	ldr	r1, [r4, #32]
   1445c:	ldr	r2, [r4, #136]	; 0x88
   14460:	ldr	r7, [r4, #168]	; 0xa8
   14464:	add	r6, r3, #1
   14468:	str	r2, [r4, #144]	; 0x90
   1446c:	str	r6, [r4, #148]	; 0x94
   14470:	str	r3, [r4, #152]	; 0x98
   14474:	str	r7, [r1, #16]
   14478:	movw	r1, #41436	; 0xa1dc
   1447c:	movt	r1, #1
   14480:	movne	r1, r5
   14484:	ldr	r1, [r1]
   14488:	str	r1, [r4, #168]	; 0xa8
   1448c:	ldr	r1, [r4, #32]
   14490:	strh	r0, [r1, #14]
   14494:	mov	r0, #0
   14498:	pop	{r4, r5, r6, r7, fp, pc}
   1449c:	push	{r4, r5, r6, r7, fp, lr}
   144a0:	add	fp, sp, #16
   144a4:	sub	sp, sp, #8
   144a8:	mov	r5, r1
   144ac:	ldr	r1, [r0, #156]	; 0x9c
   144b0:	ldr	r2, [r0, #160]	; 0xa0
   144b4:	mov	r4, r0
   144b8:	add	r0, r1, #1
   144bc:	cmp	r1, r2
   144c0:	str	r0, [r4, #156]	; 0x9c
   144c4:	bge	144d8 <flatcc_builder_start_buffer@@Base+0xf8>
   144c8:	ldr	r0, [r4, #32]
   144cc:	add	r0, r0, #36	; 0x24
   144d0:	str	r0, [r4, #32]
   144d4:	b	1456c <flatcc_builder_start_buffer@@Base+0x18c>
   144d8:	ldr	r2, [r4, #176]	; 0xb0
   144dc:	mvn	r6, #0
   144e0:	cmp	r2, #1
   144e4:	cmpge	r1, r2
   144e8:	bge	145a4 <flatcc_builder_start_buffer@@Base+0x1c4>
   144ec:	add	r7, r0, r0, lsl #3
   144f0:	ldr	r0, [r4, #88]	; 0x58
   144f4:	lsl	r2, r7, #2
   144f8:	cmp	r2, r0
   144fc:	bls	14524 <flatcc_builder_start_buffer@@Base+0x144>
   14500:	ldr	r0, [r4, #40]	; 0x28
   14504:	ldr	ip, [r4, #48]	; 0x30
   14508:	mov	r3, #4
   1450c:	add	r1, r4, #84	; 0x54
   14510:	str	r3, [sp]
   14514:	mov	r3, #0
   14518:	blx	ip
   1451c:	cmp	r0, #0
   14520:	bne	145b0 <flatcc_builder_start_buffer@@Base+0x1d0>
   14524:	ldr	r1, [r4, #84]	; 0x54
   14528:	mvn	r0, #35	; 0x23
   1452c:	add	r0, r0, r7, lsl #2
   14530:	adds	r0, r0, r1
   14534:	str	r0, [r4, #32]
   14538:	beq	145a4 <flatcc_builder_start_buffer@@Base+0x1c4>
   1453c:	ldr	r1, [r4, #88]	; 0x58
   14540:	movw	r3, #36409	; 0x8e39
   14544:	ldr	r2, [r4, #176]	; 0xb0
   14548:	movt	r3, #14563	; 0x38e3
   1454c:	umull	r1, r3, r1, r3
   14550:	lsr	r1, r3, #3
   14554:	cmp	r2, r3, lsr #3
   14558:	mov	r3, r1
   1455c:	movlt	r3, r2
   14560:	cmp	r2, #0
   14564:	movle	r3, r1
   14568:	str	r3, [r4, #160]	; 0xa0
   1456c:	ldr	r1, [r4, #20]
   14570:	mvn	r3, #3
   14574:	mov	r6, #0
   14578:	str	r1, [r0, #8]
   1457c:	ldrh	r2, [r4, #130]	; 0x82
   14580:	strh	r2, [r0, #12]
   14584:	strh	r5, [r4, #130]	; 0x82
   14588:	ldr	r2, [r4, #28]
   1458c:	stm	r0, {r2, r3}
   14590:	add	r0, r1, r2
   14594:	str	r6, [r4, #20]
   14598:	add	r0, r0, #7
   1459c:	bic	r0, r0, #7
   145a0:	str	r0, [r4, #28]
   145a4:	mov	r0, r6
   145a8:	sub	sp, fp, #16
   145ac:	pop	{r4, r5, r6, r7, fp, pc}
   145b0:	movw	r0, #46484	; 0xb594
   145b4:	movw	r1, #41966	; 0xa3ee
   145b8:	movw	r3, #46030	; 0xb3ce
   145bc:	mov	r2, #308	; 0x134
   145c0:	movt	r0, #1
   145c4:	movt	r1, #1
   145c8:	movt	r3, #1
   145cc:	bl	127a8 <__assert_fail@plt>

000145d0 <flatcc_builder_end_buffer@@Base>:
   145d0:	push	{r4, r5, r6, sl, fp, lr}
   145d4:	add	fp, sp, #16
   145d8:	sub	sp, sp, #8
   145dc:	mov	r4, r0
   145e0:	ldr	r0, [r0, #32]
   145e4:	ldrh	r0, [r0, #14]
   145e8:	cmp	r0, #1
   145ec:	bne	146e0 <flatcc_builder_end_buffer@@Base+0x110>
   145f0:	mov	r3, r1
   145f4:	ldr	r1, [r4, #152]	; 0x98
   145f8:	ldrh	r0, [r4, #164]	; 0xa4
   145fc:	ldrh	r2, [r4, #132]	; 0x84
   14600:	cmp	r1, #0
   14604:	ldrh	r1, [r4, #128]	; 0x80
   14608:	and	r0, r0, #2
   1460c:	orrne	r0, r0, #1
   14610:	cmp	r1, r2
   14614:	movcc	r1, r2
   14618:	strhcc	r2, [r4, #128]	; 0x80
   1461c:	str	r0, [sp, #4]
   14620:	mov	r0, r4
   14624:	str	r1, [sp]
   14628:	add	r1, r4, #168	; 0xa8
   1462c:	bl	1409c <flatcc_builder_create_buffer@@Base>
   14630:	mov	r6, r0
   14634:	cmp	r0, #0
   14638:	beq	146d4 <flatcc_builder_end_buffer@@Base+0x104>
   1463c:	ldr	r1, [r4, #32]
   14640:	ldr	r0, [r4, #16]
   14644:	ldr	r2, [r4, #20]
   14648:	ldr	r3, [r1, #20]
   1464c:	str	r3, [r4, #144]	; 0x90
   14650:	ldr	r3, [r1, #28]
   14654:	str	r3, [r4, #152]	; 0x98
   14658:	ldr	r3, [r1, #16]
   1465c:	str	r3, [r4, #168]	; 0xa8
   14660:	ldrh	r1, [r1, #32]
   14664:	strh	r1, [r4, #164]	; 0xa4
   14668:	mov	r1, #0
   1466c:	bl	12778 <memset@plt>
   14670:	ldr	r0, [r4, #32]
   14674:	ldr	r1, [r4, #60]	; 0x3c
   14678:	ldr	r2, [r4, #64]	; 0x40
   1467c:	ldr	r3, [r0, #8]
   14680:	str	r3, [r4, #20]
   14684:	ldr	r3, [r0]
   14688:	str	r3, [r4, #28]
   1468c:	add	r1, r1, r3
   14690:	ldr	r5, [r0, #4]
   14694:	str	r1, [r4, #16]
   14698:	sub	r1, r2, r3
   1469c:	cmp	r1, r5
   146a0:	movhi	r1, r5
   146a4:	str	r1, [r4, #24]
   146a8:	ldrh	r1, [r4, #130]	; 0x82
   146ac:	ldrh	r2, [r4, #128]	; 0x80
   146b0:	cmp	r2, r1
   146b4:	strhcc	r1, [r4, #128]	; 0x80
   146b8:	ldrh	r1, [r0, #12]
   146bc:	sub	r0, r0, #36	; 0x24
   146c0:	str	r0, [r4, #32]
   146c4:	strh	r1, [r4, #130]	; 0x82
   146c8:	ldr	r0, [r4, #156]	; 0x9c
   146cc:	sub	r0, r0, #1
   146d0:	str	r0, [r4, #156]	; 0x9c
   146d4:	mov	r0, r6
   146d8:	sub	sp, fp, #16
   146dc:	pop	{r4, r5, r6, sl, fp, pc}
   146e0:	movw	r0, #42525	; 0xa61d
   146e4:	movw	r1, #41966	; 0xa3ee
   146e8:	movw	r3, #42569	; 0xa649
   146ec:	movw	r2, #838	; 0x346
   146f0:	movt	r0, #1
   146f4:	movt	r1, #1
   146f8:	movt	r3, #1
   146fc:	bl	127a8 <__assert_fail@plt>

00014700 <flatcc_builder_start_struct@@Base>:
   14700:	push	{r4, r5, r6, r7, fp, lr}
   14704:	add	fp, sp, #16
   14708:	sub	sp, sp, #8
   1470c:	mov	r6, r1
   14710:	mov	r1, r2
   14714:	mov	r4, r0
   14718:	bl	1449c <flatcc_builder_start_buffer@@Base+0xbc>
   1471c:	mov	r5, #0
   14720:	cmp	r0, #0
   14724:	bne	147a0 <flatcc_builder_start_struct@@Base+0xa0>
   14728:	ldr	r2, [r4, #32]
   1472c:	mov	r0, #2
   14730:	mvn	r7, #3
   14734:	strh	r0, [r2, #14]
   14738:	ldr	r1, [r4, #28]
   1473c:	ldr	r3, [r4, #64]	; 0x40
   14740:	ldr	r0, [r4, #60]	; 0x3c
   14744:	sub	r3, r3, r1
   14748:	add	r0, r0, r1
   1474c:	cmn	r3, #4
   14750:	str	r0, [r4, #16]
   14754:	movcs	r3, r7
   14758:	str	r3, [r4, #24]
   1475c:	str	r7, [r2, #4]
   14760:	ldr	r7, [r4, #20]
   14764:	add	r2, r7, r6
   14768:	cmp	r2, r3
   1476c:	str	r2, [r4, #20]
   14770:	bcc	147dc <flatcc_builder_start_struct@@Base+0xdc>
   14774:	ldr	r0, [r4, #40]	; 0x28
   14778:	ldr	r6, [r4, #48]	; 0x30
   1477c:	add	r1, r1, r2
   14780:	mov	r3, #1
   14784:	str	r3, [sp]
   14788:	add	r2, r1, #1
   1478c:	add	r1, r4, #60	; 0x3c
   14790:	mov	r3, #1
   14794:	blx	r6
   14798:	cmp	r0, #0
   1479c:	beq	147ac <flatcc_builder_start_struct@@Base+0xac>
   147a0:	mov	r0, r5
   147a4:	sub	sp, fp, #16
   147a8:	pop	{r4, r5, r6, r7, fp, pc}
   147ac:	ldr	r1, [r4, #28]
   147b0:	ldr	r0, [r4, #60]	; 0x3c
   147b4:	ldr	r3, [r4, #64]	; 0x40
   147b8:	ldr	r2, [r4, #32]
   147bc:	add	r0, r0, r1
   147c0:	sub	r1, r3, r1
   147c4:	mvn	r3, #3
   147c8:	cmn	r1, #4
   147cc:	str	r0, [r4, #16]
   147d0:	movcs	r1, r3
   147d4:	str	r1, [r4, #24]
   147d8:	str	r3, [r2, #4]
   147dc:	add	r5, r0, r7
   147e0:	mov	r0, r5
   147e4:	sub	sp, fp, #16
   147e8:	pop	{r4, r5, r6, r7, fp, pc}

000147ec <flatcc_builder_struct_edit@@Base>:
   147ec:	ldr	r0, [r0, #16]
   147f0:	bx	lr

000147f4 <flatcc_builder_end_struct@@Base>:
   147f4:	push	{r4, r5, fp, lr}
   147f8:	add	fp, sp, #8
   147fc:	mov	r4, r0
   14800:	ldr	r0, [r0, #32]
   14804:	ldrh	r0, [r0, #14]
   14808:	cmp	r0, #2
   1480c:	bne	148ac <flatcc_builder_end_struct@@Base+0xb8>
   14810:	ldrh	r3, [r4, #130]	; 0x82
   14814:	ldr	r1, [r4, #16]
   14818:	ldr	r2, [r4, #20]
   1481c:	mov	r0, r4
   14820:	bl	142b8 <flatcc_builder_create_struct@@Base>
   14824:	mov	r5, r0
   14828:	cmp	r0, #0
   1482c:	beq	148a4 <flatcc_builder_end_struct@@Base+0xb0>
   14830:	ldr	r0, [r4, #16]
   14834:	ldr	r2, [r4, #20]
   14838:	mov	r1, #0
   1483c:	bl	12778 <memset@plt>
   14840:	ldr	r0, [r4, #32]
   14844:	ldr	r1, [r4, #60]	; 0x3c
   14848:	ldr	ip, [r4, #64]	; 0x40
   1484c:	ldr	r3, [r0, #8]
   14850:	str	r3, [r4, #20]
   14854:	ldr	r3, [r0]
   14858:	str	r3, [r4, #28]
   1485c:	add	r1, r1, r3
   14860:	ldr	r2, [r0, #4]
   14864:	str	r1, [r4, #16]
   14868:	sub	r1, ip, r3
   1486c:	cmp	r1, r2
   14870:	movhi	r1, r2
   14874:	str	r1, [r4, #24]
   14878:	ldrh	r1, [r4, #130]	; 0x82
   1487c:	ldrh	r2, [r4, #128]	; 0x80
   14880:	cmp	r2, r1
   14884:	strhcc	r1, [r4, #128]	; 0x80
   14888:	ldrh	r1, [r0, #12]
   1488c:	sub	r0, r0, #36	; 0x24
   14890:	str	r0, [r4, #32]
   14894:	strh	r1, [r4, #130]	; 0x82
   14898:	ldr	r0, [r4, #156]	; 0x9c
   1489c:	sub	r0, r0, #1
   148a0:	str	r0, [r4, #156]	; 0x9c
   148a4:	mov	r0, r5
   148a8:	pop	{r4, r5, fp, pc}
   148ac:	movw	r0, #42658	; 0xa6a2
   148b0:	movw	r1, #41966	; 0xa3ee
   148b4:	movw	r3, #42702	; 0xa6ce
   148b8:	mov	r2, #872	; 0x368
   148bc:	movt	r0, #1
   148c0:	movt	r1, #1
   148c4:	movt	r3, #1
   148c8:	bl	127a8 <__assert_fail@plt>

000148cc <flatcc_builder_extend_vector@@Base>:
   148cc:	push	{r4, r5, fp, lr}
   148d0:	add	fp, sp, #8
   148d4:	sub	sp, sp, #8
   148d8:	mov	r4, r0
   148dc:	ldr	r0, [r0, #32]
   148e0:	ldr	r2, [r0, #20]
   148e4:	adds	r2, r2, r1
   148e8:	bcs	149a8 <flatcc_builder_extend_vector@@Base+0xdc>
   148ec:	ldr	r3, [r0, #24]
   148f0:	cmp	r2, r3
   148f4:	bhi	149a8 <flatcc_builder_extend_vector@@Base+0xdc>
   148f8:	str	r2, [r0, #20]
   148fc:	ldr	r2, [r4, #32]
   14900:	ldr	r5, [r4, #20]
   14904:	ldr	r0, [r4, #24]
   14908:	ldr	r2, [r2, #16]
   1490c:	mla	r1, r2, r1, r5
   14910:	cmp	r1, r0
   14914:	str	r1, [r4, #20]
   14918:	bcs	1492c <flatcc_builder_extend_vector@@Base+0x60>
   1491c:	ldr	r0, [r4, #16]
   14920:	add	r0, r0, r5
   14924:	sub	sp, fp, #8
   14928:	pop	{r4, r5, fp, pc}
   1492c:	ldr	r2, [r4, #28]
   14930:	ldr	r0, [r4, #40]	; 0x28
   14934:	ldr	ip, [r4, #48]	; 0x30
   14938:	mov	r3, #1
   1493c:	str	r3, [sp]
   14940:	mov	r3, #1
   14944:	add	r1, r1, r2
   14948:	add	r2, r1, #1
   1494c:	add	r1, r4, #60	; 0x3c
   14950:	blx	ip
   14954:	mov	r1, r0
   14958:	mov	r0, #0
   1495c:	cmp	r1, #0
   14960:	beq	1496c <flatcc_builder_extend_vector@@Base+0xa0>
   14964:	sub	sp, fp, #8
   14968:	pop	{r4, r5, fp, pc}
   1496c:	ldr	r1, [r4, #28]
   14970:	ldr	r0, [r4, #60]	; 0x3c
   14974:	ldr	r3, [r4, #64]	; 0x40
   14978:	ldr	r2, [r4, #32]
   1497c:	add	r0, r0, r1
   14980:	sub	r1, r3, r1
   14984:	mvn	r3, #3
   14988:	cmn	r1, #4
   1498c:	str	r0, [r4, #16]
   14990:	movcs	r1, r3
   14994:	str	r1, [r4, #24]
   14998:	str	r3, [r2, #4]
   1499c:	add	r0, r0, r5
   149a0:	sub	sp, fp, #8
   149a4:	pop	{r4, r5, fp, pc}
   149a8:	movw	r0, #46237	; 0xb49d
   149ac:	movw	r1, #41966	; 0xa3ee
   149b0:	movw	r3, #46264	; 0xb4b8
   149b4:	mov	r2, #892	; 0x37c
   149b8:	movt	r0, #1
   149bc:	movt	r1, #1
   149c0:	movt	r3, #1
   149c4:	bl	127a8 <__assert_fail@plt>

000149c8 <flatcc_builder_vector_push@@Base>:
   149c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149cc:	add	fp, sp, #24
   149d0:	sub	sp, sp, #8
   149d4:	mov	r5, r0
   149d8:	ldr	r0, [r0, #32]
   149dc:	mov	r8, r1
   149e0:	ldrh	r1, [r0, #14]
   149e4:	cmp	r1, #4
   149e8:	bne	14ad4 <flatcc_builder_vector_push@@Base+0x10c>
   149ec:	ldr	r1, [r0, #20]
   149f0:	ldr	r2, [r0, #24]
   149f4:	cmp	r1, r2
   149f8:	bhi	14af4 <flatcc_builder_vector_push@@Base+0x12c>
   149fc:	add	r1, r1, #1
   14a00:	str	r1, [r0, #20]
   14a04:	ldr	r1, [r5, #32]
   14a08:	ldr	r4, [r5, #20]
   14a0c:	ldr	r0, [r5, #24]
   14a10:	ldr	r6, [r1, #16]
   14a14:	add	r1, r4, r6
   14a18:	cmp	r1, r0
   14a1c:	str	r1, [r5, #20]
   14a20:	bcs	14a4c <flatcc_builder_vector_push@@Base+0x84>
   14a24:	ldr	r0, [r5, #16]
   14a28:	adds	r7, r0, r4
   14a2c:	beq	14ac4 <flatcc_builder_vector_push@@Base+0xfc>
   14a30:	mov	r0, r7
   14a34:	mov	r1, r8
   14a38:	mov	r2, r6
   14a3c:	bl	12718 <memcpy@plt>
   14a40:	mov	r0, r7
   14a44:	sub	sp, fp, #24
   14a48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a4c:	ldr	r2, [r5, #28]
   14a50:	ldr	r0, [r5, #40]	; 0x28
   14a54:	ldr	r7, [r5, #48]	; 0x30
   14a58:	mov	r3, #1
   14a5c:	str	r3, [sp]
   14a60:	mov	r3, #1
   14a64:	add	r1, r1, r2
   14a68:	add	r2, r1, #1
   14a6c:	add	r1, r5, #60	; 0x3c
   14a70:	blx	r7
   14a74:	mov	r7, #0
   14a78:	cmp	r0, #0
   14a7c:	beq	14a8c <flatcc_builder_vector_push@@Base+0xc4>
   14a80:	mov	r0, r7
   14a84:	sub	sp, fp, #24
   14a88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a8c:	ldr	r1, [r5, #28]
   14a90:	ldr	r0, [r5, #60]	; 0x3c
   14a94:	ldr	r3, [r5, #64]	; 0x40
   14a98:	ldr	r2, [r5, #32]
   14a9c:	add	r0, r0, r1
   14aa0:	sub	r1, r3, r1
   14aa4:	mvn	r3, #3
   14aa8:	cmn	r1, #4
   14aac:	str	r0, [r5, #16]
   14ab0:	movcs	r1, r3
   14ab4:	str	r1, [r5, #24]
   14ab8:	str	r3, [r2, #4]
   14abc:	adds	r7, r0, r4
   14ac0:	bne	14a30 <flatcc_builder_vector_push@@Base+0x68>
   14ac4:	mov	r7, #0
   14ac8:	mov	r0, r7
   14acc:	sub	sp, fp, #24
   14ad0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ad4:	movw	r0, #42769	; 0xa711
   14ad8:	movw	r1, #41966	; 0xa3ee
   14adc:	movw	r3, #42813	; 0xa73d
   14ae0:	movw	r2, #907	; 0x38b
   14ae4:	movt	r0, #1
   14ae8:	movt	r1, #1
   14aec:	movt	r3, #1
   14af0:	bl	127a8 <__assert_fail@plt>
   14af4:	movw	r0, #42880	; 0xa780
   14af8:	movw	r1, #41966	; 0xa3ee
   14afc:	movw	r3, #42813	; 0xa73d
   14b00:	mov	r2, #908	; 0x38c
   14b04:	movt	r0, #1
   14b08:	movt	r1, #1
   14b0c:	movt	r3, #1
   14b10:	bl	127a8 <__assert_fail@plt>

00014b14 <flatcc_builder_append_vector@@Base>:
   14b14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b18:	add	fp, sp, #24
   14b1c:	sub	sp, sp, #8
   14b20:	mov	r6, r0
   14b24:	ldr	r0, [r0, #32]
   14b28:	mov	r8, r1
   14b2c:	ldrh	r1, [r0, #14]
   14b30:	cmp	r1, #4
   14b34:	bne	14c48 <flatcc_builder_append_vector@@Base+0x134>
   14b38:	ldr	r1, [r0, #20]
   14b3c:	mov	r5, r2
   14b40:	adds	r1, r1, r2
   14b44:	bcs	14c28 <flatcc_builder_append_vector@@Base+0x114>
   14b48:	ldr	r2, [r0, #24]
   14b4c:	cmp	r1, r2
   14b50:	bhi	14c28 <flatcc_builder_append_vector@@Base+0x114>
   14b54:	str	r1, [r0, #20]
   14b58:	ldr	r1, [r6, #32]
   14b5c:	ldr	r4, [r6, #20]
   14b60:	ldr	r0, [r6, #24]
   14b64:	ldr	r9, [r1, #16]
   14b68:	mla	r1, r9, r5, r4
   14b6c:	cmp	r1, r0
   14b70:	str	r1, [r6, #20]
   14b74:	bcs	14ba0 <flatcc_builder_append_vector@@Base+0x8c>
   14b78:	ldr	r0, [r6, #16]
   14b7c:	adds	r7, r0, r4
   14b80:	beq	14c18 <flatcc_builder_append_vector@@Base+0x104>
   14b84:	mul	r2, r9, r5
   14b88:	mov	r0, r7
   14b8c:	mov	r1, r8
   14b90:	bl	12718 <memcpy@plt>
   14b94:	mov	r0, r7
   14b98:	sub	sp, fp, #24
   14b9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ba0:	ldr	r2, [r6, #28]
   14ba4:	ldr	r0, [r6, #40]	; 0x28
   14ba8:	ldr	r7, [r6, #48]	; 0x30
   14bac:	mov	r3, #1
   14bb0:	str	r3, [sp]
   14bb4:	mov	r3, #1
   14bb8:	add	r1, r1, r2
   14bbc:	add	r2, r1, #1
   14bc0:	add	r1, r6, #60	; 0x3c
   14bc4:	blx	r7
   14bc8:	mov	r7, #0
   14bcc:	cmp	r0, #0
   14bd0:	beq	14be0 <flatcc_builder_append_vector@@Base+0xcc>
   14bd4:	mov	r0, r7
   14bd8:	sub	sp, fp, #24
   14bdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14be0:	ldr	r1, [r6, #28]
   14be4:	ldr	r0, [r6, #60]	; 0x3c
   14be8:	ldr	r3, [r6, #64]	; 0x40
   14bec:	ldr	r2, [r6, #32]
   14bf0:	add	r0, r0, r1
   14bf4:	sub	r1, r3, r1
   14bf8:	mvn	r3, #3
   14bfc:	cmn	r1, #4
   14c00:	str	r0, [r6, #16]
   14c04:	movcs	r1, r3
   14c08:	str	r1, [r6, #24]
   14c0c:	str	r3, [r2, #4]
   14c10:	adds	r7, r0, r4
   14c14:	bne	14b84 <flatcc_builder_append_vector@@Base+0x70>
   14c18:	mov	r7, #0
   14c1c:	mov	r0, r7
   14c20:	sub	sp, fp, #24
   14c24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c28:	movw	r0, #46237	; 0xb49d
   14c2c:	movw	r1, #41966	; 0xa3ee
   14c30:	movw	r3, #46264	; 0xb4b8
   14c34:	mov	r2, #892	; 0x37c
   14c38:	movt	r0, #1
   14c3c:	movt	r1, #1
   14c40:	movt	r3, #1
   14c44:	bl	127a8 <__assert_fail@plt>
   14c48:	movw	r0, #42769	; 0xa711
   14c4c:	movw	r1, #41966	; 0xa3ee
   14c50:	movw	r3, #42941	; 0xa7bd
   14c54:	movw	r2, #915	; 0x393
   14c58:	movt	r0, #1
   14c5c:	movt	r1, #1
   14c60:	movt	r3, #1
   14c64:	bl	127a8 <__assert_fail@plt>

00014c68 <flatcc_builder_extend_offset_vector@@Base>:
   14c68:	push	{r4, r5, fp, lr}
   14c6c:	add	fp, sp, #8
   14c70:	sub	sp, sp, #8
   14c74:	mov	r4, r0
   14c78:	ldr	r0, [r0, #32]
   14c7c:	ldr	r2, [r0, #20]
   14c80:	adds	r2, r2, r1
   14c84:	cmpcc	r2, #1073741824	; 0x40000000
   14c88:	bcc	14cac <flatcc_builder_extend_offset_vector@@Base+0x44>
   14c8c:	movw	r0, #46237	; 0xb49d
   14c90:	movw	r1, #41966	; 0xa3ee
   14c94:	movw	r3, #46264	; 0xb4b8
   14c98:	mov	r2, #892	; 0x37c
   14c9c:	movt	r0, #1
   14ca0:	movt	r1, #1
   14ca4:	movt	r3, #1
   14ca8:	bl	127a8 <__assert_fail@plt>
   14cac:	str	r2, [r0, #20]
   14cb0:	ldr	r5, [r4, #20]
   14cb4:	ldr	r0, [r4, #24]
   14cb8:	add	r1, r5, r1, lsl #2
   14cbc:	cmp	r1, r0
   14cc0:	str	r1, [r4, #20]
   14cc4:	bcs	14cd8 <flatcc_builder_extend_offset_vector@@Base+0x70>
   14cc8:	ldr	r0, [r4, #16]
   14ccc:	add	r0, r0, r5
   14cd0:	sub	sp, fp, #8
   14cd4:	pop	{r4, r5, fp, pc}
   14cd8:	ldr	r2, [r4, #28]
   14cdc:	ldr	r0, [r4, #40]	; 0x28
   14ce0:	ldr	ip, [r4, #48]	; 0x30
   14ce4:	mov	r3, #1
   14ce8:	str	r3, [sp]
   14cec:	mov	r3, #1
   14cf0:	add	r1, r1, r2
   14cf4:	add	r2, r1, #1
   14cf8:	add	r1, r4, #60	; 0x3c
   14cfc:	blx	ip
   14d00:	mov	r1, r0
   14d04:	mov	r0, #0
   14d08:	cmp	r1, #0
   14d0c:	beq	14d18 <flatcc_builder_extend_offset_vector@@Base+0xb0>
   14d10:	sub	sp, fp, #8
   14d14:	pop	{r4, r5, fp, pc}
   14d18:	ldr	r1, [r4, #28]
   14d1c:	ldr	r0, [r4, #60]	; 0x3c
   14d20:	ldr	r3, [r4, #64]	; 0x40
   14d24:	ldr	r2, [r4, #32]
   14d28:	add	r0, r0, r1
   14d2c:	sub	r1, r3, r1
   14d30:	mvn	r3, #3
   14d34:	cmn	r1, #4
   14d38:	str	r0, [r4, #16]
   14d3c:	movcs	r1, r3
   14d40:	str	r1, [r4, #24]
   14d44:	str	r3, [r2, #4]
   14d48:	add	r0, r0, r5
   14d4c:	sub	sp, fp, #8
   14d50:	pop	{r4, r5, fp, pc}

00014d54 <flatcc_builder_offset_vector_push@@Base>:
   14d54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d58:	add	fp, sp, #24
   14d5c:	sub	sp, sp, #8
   14d60:	mov	r6, r0
   14d64:	ldr	r0, [r0, #32]
   14d68:	mov	r8, r1
   14d6c:	ldrh	r1, [r0, #14]
   14d70:	cmp	r1, #5
   14d74:	bne	14e34 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14d78:	ldr	r1, [r0, #20]
   14d7c:	mov	r5, #0
   14d80:	cmn	r1, #-1073741823	; 0xc0000001
   14d84:	beq	14de0 <flatcc_builder_offset_vector_push@@Base+0x8c>
   14d88:	add	r1, r1, #1
   14d8c:	str	r1, [r0, #20]
   14d90:	ldr	r7, [r6, #20]
   14d94:	ldr	r0, [r6, #24]
   14d98:	add	r1, r7, #4
   14d9c:	cmp	r1, r0
   14da0:	str	r1, [r6, #20]
   14da4:	bcs	14db0 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14da8:	ldr	r0, [r6, #16]
   14dac:	b	14e1c <flatcc_builder_offset_vector_push@@Base+0xc8>
   14db0:	ldr	r1, [r6, #28]
   14db4:	ldr	r0, [r6, #40]	; 0x28
   14db8:	ldr	r4, [r6, #48]	; 0x30
   14dbc:	mov	r2, #1
   14dc0:	mov	r3, #1
   14dc4:	str	r2, [sp]
   14dc8:	add	r1, r7, r1
   14dcc:	add	r2, r1, #5
   14dd0:	add	r1, r6, #60	; 0x3c
   14dd4:	blx	r4
   14dd8:	cmp	r0, #0
   14ddc:	beq	14dec <flatcc_builder_offset_vector_push@@Base+0x98>
   14de0:	mov	r0, r5
   14de4:	sub	sp, fp, #24
   14de8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14dec:	ldr	r1, [r6, #28]
   14df0:	ldr	r0, [r6, #60]	; 0x3c
   14df4:	ldr	r3, [r6, #64]	; 0x40
   14df8:	ldr	r2, [r6, #32]
   14dfc:	add	r0, r0, r1
   14e00:	sub	r1, r3, r1
   14e04:	mvn	r3, #3
   14e08:	cmn	r1, #4
   14e0c:	str	r0, [r6, #16]
   14e10:	movcs	r1, r3
   14e14:	str	r1, [r6, #24]
   14e18:	str	r3, [r2, #4]
   14e1c:	adds	r0, r0, r7
   14e20:	movne	r5, r0
   14e24:	strne	r8, [r0]
   14e28:	mov	r0, r5
   14e2c:	sub	sp, fp, #24
   14e30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e34:	movw	r0, #43018	; 0xa80a
   14e38:	movw	r1, #41966	; 0xa3ee
   14e3c:	movw	r3, #43069	; 0xa83d
   14e40:	movw	r2, #934	; 0x3a6
   14e44:	movt	r0, #1
   14e48:	movt	r1, #1
   14e4c:	movt	r3, #1
   14e50:	bl	127a8 <__assert_fail@plt>

00014e54 <flatcc_builder_append_offset_vector@@Base>:
   14e54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e58:	add	fp, sp, #24
   14e5c:	sub	sp, sp, #8
   14e60:	mov	r6, r0
   14e64:	ldr	r0, [r0, #32]
   14e68:	mov	r8, r1
   14e6c:	ldrh	r1, [r0, #14]
   14e70:	cmp	r1, #5
   14e74:	bne	14f78 <flatcc_builder_append_offset_vector@@Base+0x124>
   14e78:	ldr	r1, [r0, #20]
   14e7c:	mov	r5, r2
   14e80:	adds	r1, r1, r2
   14e84:	cmpcc	r1, #1073741824	; 0x40000000
   14e88:	bcc	14eac <flatcc_builder_append_offset_vector@@Base+0x58>
   14e8c:	movw	r0, #46237	; 0xb49d
   14e90:	movw	r1, #41966	; 0xa3ee
   14e94:	movw	r3, #46264	; 0xb4b8
   14e98:	mov	r2, #892	; 0x37c
   14e9c:	movt	r0, #1
   14ea0:	movt	r1, #1
   14ea4:	movt	r3, #1
   14ea8:	bl	127a8 <__assert_fail@plt>
   14eac:	str	r1, [r0, #20]
   14eb0:	ldr	r4, [r6, #20]
   14eb4:	ldr	r0, [r6, #24]
   14eb8:	add	r1, r4, r5, lsl #2
   14ebc:	cmp	r1, r0
   14ec0:	str	r1, [r6, #20]
   14ec4:	bcs	14ef0 <flatcc_builder_append_offset_vector@@Base+0x9c>
   14ec8:	ldr	r0, [r6, #16]
   14ecc:	adds	r7, r0, r4
   14ed0:	beq	14f68 <flatcc_builder_append_offset_vector@@Base+0x114>
   14ed4:	lsl	r2, r5, #2
   14ed8:	mov	r0, r7
   14edc:	mov	r1, r8
   14ee0:	bl	12718 <memcpy@plt>
   14ee4:	mov	r0, r7
   14ee8:	sub	sp, fp, #24
   14eec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ef0:	ldr	r2, [r6, #28]
   14ef4:	ldr	r0, [r6, #40]	; 0x28
   14ef8:	ldr	r7, [r6, #48]	; 0x30
   14efc:	mov	r3, #1
   14f00:	str	r3, [sp]
   14f04:	mov	r3, #1
   14f08:	add	r1, r1, r2
   14f0c:	add	r2, r1, #1
   14f10:	add	r1, r6, #60	; 0x3c
   14f14:	blx	r7
   14f18:	mov	r7, #0
   14f1c:	cmp	r0, #0
   14f20:	beq	14f30 <flatcc_builder_append_offset_vector@@Base+0xdc>
   14f24:	mov	r0, r7
   14f28:	sub	sp, fp, #24
   14f2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f30:	ldr	r1, [r6, #28]
   14f34:	ldr	r0, [r6, #60]	; 0x3c
   14f38:	ldr	r3, [r6, #64]	; 0x40
   14f3c:	ldr	r2, [r6, #32]
   14f40:	add	r0, r0, r1
   14f44:	sub	r1, r3, r1
   14f48:	mvn	r3, #3
   14f4c:	cmn	r1, #4
   14f50:	str	r0, [r6, #16]
   14f54:	movcs	r1, r3
   14f58:	str	r1, [r6, #24]
   14f5c:	str	r3, [r2, #4]
   14f60:	adds	r7, r0, r4
   14f64:	bne	14ed4 <flatcc_builder_append_offset_vector@@Base+0x80>
   14f68:	mov	r7, #0
   14f6c:	mov	r0, r7
   14f70:	sub	sp, fp, #24
   14f74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f78:	movw	r0, #43018	; 0xa80a
   14f7c:	movw	r1, #41966	; 0xa3ee
   14f80:	movw	r3, #43167	; 0xa89f
   14f84:	mov	r2, #948	; 0x3b4
   14f88:	movt	r0, #1
   14f8c:	movt	r1, #1
   14f90:	movt	r3, #1
   14f94:	bl	127a8 <__assert_fail@plt>

00014f98 <flatcc_builder_extend_string@@Base>:
   14f98:	push	{r4, r5, fp, lr}
   14f9c:	add	fp, sp, #8
   14fa0:	sub	sp, sp, #8
   14fa4:	mov	r4, r0
   14fa8:	ldr	r0, [r0, #32]
   14fac:	ldrh	r2, [r0, #14]
   14fb0:	cmp	r2, #6
   14fb4:	bne	1506c <flatcc_builder_extend_string@@Base+0xd4>
   14fb8:	ldr	r2, [r0, #20]
   14fbc:	adds	r2, r2, r1
   14fc0:	bcs	1508c <flatcc_builder_extend_string@@Base+0xf4>
   14fc4:	str	r2, [r0, #20]
   14fc8:	ldr	r5, [r4, #20]
   14fcc:	ldr	r0, [r4, #24]
   14fd0:	add	r1, r5, r1
   14fd4:	cmp	r1, r0
   14fd8:	str	r1, [r4, #20]
   14fdc:	bcs	14ff0 <flatcc_builder_extend_string@@Base+0x58>
   14fe0:	ldr	r0, [r4, #16]
   14fe4:	add	r0, r0, r5
   14fe8:	sub	sp, fp, #8
   14fec:	pop	{r4, r5, fp, pc}
   14ff0:	ldr	r2, [r4, #28]
   14ff4:	ldr	r0, [r4, #40]	; 0x28
   14ff8:	ldr	ip, [r4, #48]	; 0x30
   14ffc:	mov	r3, #1
   15000:	str	r3, [sp]
   15004:	mov	r3, #1
   15008:	add	r1, r1, r2
   1500c:	add	r2, r1, #1
   15010:	add	r1, r4, #60	; 0x3c
   15014:	blx	ip
   15018:	mov	r1, r0
   1501c:	mov	r0, #0
   15020:	cmp	r1, #0
   15024:	beq	15030 <flatcc_builder_extend_string@@Base+0x98>
   15028:	sub	sp, fp, #8
   1502c:	pop	{r4, r5, fp, pc}
   15030:	ldr	r1, [r4, #28]
   15034:	ldr	r0, [r4, #60]	; 0x3c
   15038:	ldr	r3, [r4, #64]	; 0x40
   1503c:	ldr	r2, [r4, #32]
   15040:	add	r0, r0, r1
   15044:	sub	r1, r3, r1
   15048:	mvn	r3, #3
   1504c:	cmn	r1, #4
   15050:	str	r0, [r4, #16]
   15054:	movcs	r1, r3
   15058:	str	r1, [r4, #24]
   1505c:	str	r3, [r2, #4]
   15060:	add	r0, r0, r5
   15064:	sub	sp, fp, #8
   15068:	pop	{r4, r5, fp, pc}
   1506c:	movw	r0, #43283	; 0xa913
   15070:	movw	r1, #41966	; 0xa3ee
   15074:	movw	r3, #43327	; 0xa93f
   15078:	movw	r2, #957	; 0x3bd
   1507c:	movt	r0, #1
   15080:	movt	r1, #1
   15084:	movt	r3, #1
   15088:	bl	127a8 <__assert_fail@plt>
   1508c:	movw	r0, #46237	; 0xb49d
   15090:	movw	r1, #41966	; 0xa3ee
   15094:	movw	r3, #46264	; 0xb4b8
   15098:	mov	r2, #892	; 0x37c
   1509c:	movt	r0, #1
   150a0:	movt	r1, #1
   150a4:	movt	r3, #1
   150a8:	bl	127a8 <__assert_fail@plt>

000150ac <flatcc_builder_append_string@@Base>:
   150ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150b0:	add	fp, sp, #24
   150b4:	sub	sp, sp, #8
   150b8:	mov	r6, r0
   150bc:	ldr	r0, [r0, #32]
   150c0:	mov	r8, r1
   150c4:	ldrh	r1, [r0, #14]
   150c8:	cmp	r1, #6
   150cc:	bne	151ac <flatcc_builder_append_string@@Base+0x100>
   150d0:	ldr	r1, [r0, #20]
   150d4:	mov	r4, r2
   150d8:	adds	r1, r1, r2
   150dc:	bcs	151cc <flatcc_builder_append_string@@Base+0x120>
   150e0:	str	r1, [r0, #20]
   150e4:	ldr	r5, [r6, #20]
   150e8:	ldr	r0, [r6, #24]
   150ec:	add	r1, r5, r4
   150f0:	cmp	r1, r0
   150f4:	str	r1, [r6, #20]
   150f8:	bcs	15124 <flatcc_builder_append_string@@Base+0x78>
   150fc:	ldr	r0, [r6, #16]
   15100:	adds	r7, r0, r5
   15104:	beq	1519c <flatcc_builder_append_string@@Base+0xf0>
   15108:	mov	r0, r7
   1510c:	mov	r1, r8
   15110:	mov	r2, r4
   15114:	bl	12718 <memcpy@plt>
   15118:	mov	r0, r7
   1511c:	sub	sp, fp, #24
   15120:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15124:	ldr	r2, [r6, #28]
   15128:	ldr	r0, [r6, #40]	; 0x28
   1512c:	ldr	r7, [r6, #48]	; 0x30
   15130:	mov	r3, #1
   15134:	str	r3, [sp]
   15138:	mov	r3, #1
   1513c:	add	r1, r1, r2
   15140:	add	r2, r1, #1
   15144:	add	r1, r6, #60	; 0x3c
   15148:	blx	r7
   1514c:	mov	r7, #0
   15150:	cmp	r0, #0
   15154:	beq	15164 <flatcc_builder_append_string@@Base+0xb8>
   15158:	mov	r0, r7
   1515c:	sub	sp, fp, #24
   15160:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15164:	ldr	r1, [r6, #28]
   15168:	ldr	r0, [r6, #60]	; 0x3c
   1516c:	ldr	r3, [r6, #64]	; 0x40
   15170:	ldr	r2, [r6, #32]
   15174:	add	r0, r0, r1
   15178:	sub	r1, r3, r1
   1517c:	mvn	r3, #3
   15180:	cmn	r1, #4
   15184:	str	r0, [r6, #16]
   15188:	movcs	r1, r3
   1518c:	str	r1, [r6, #24]
   15190:	str	r3, [r2, #4]
   15194:	adds	r7, r0, r5
   15198:	bne	15108 <flatcc_builder_append_string@@Base+0x5c>
   1519c:	mov	r7, #0
   151a0:	mov	r0, r7
   151a4:	sub	sp, fp, #24
   151a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151ac:	movw	r0, #43283	; 0xa913
   151b0:	movw	r1, #41966	; 0xa3ee
   151b4:	movw	r3, #43390	; 0xa97e
   151b8:	movw	r2, #966	; 0x3c6
   151bc:	movt	r0, #1
   151c0:	movt	r1, #1
   151c4:	movt	r3, #1
   151c8:	bl	127a8 <__assert_fail@plt>
   151cc:	movw	r0, #46237	; 0xb49d
   151d0:	movw	r1, #41966	; 0xa3ee
   151d4:	movw	r3, #46264	; 0xb4b8
   151d8:	mov	r2, #892	; 0x37c
   151dc:	movt	r0, #1
   151e0:	movt	r1, #1
   151e4:	movt	r3, #1
   151e8:	bl	127a8 <__assert_fail@plt>

000151ec <flatcc_builder_append_string_str@@Base>:
   151ec:	push	{r4, r5, fp, lr}
   151f0:	add	fp, sp, #8
   151f4:	mov	r5, r0
   151f8:	mov	r0, r1
   151fc:	mov	r4, r1
   15200:	bl	12760 <strlen@plt>
   15204:	mov	r2, r0
   15208:	mov	r0, r5
   1520c:	mov	r1, r4
   15210:	pop	{r4, r5, fp, lr}
   15214:	b	150ac <flatcc_builder_append_string@@Base>

00015218 <flatcc_builder_append_string_strn@@Base>:
   15218:	push	{r4, r5, r6, sl, fp, lr}
   1521c:	add	fp, sp, #16
   15220:	mov	r6, r0
   15224:	mov	r5, r1
   15228:	mov	r0, r1
   1522c:	mov	r1, #0
   15230:	mov	r4, r2
   15234:	bl	12790 <memchr@plt>
   15238:	cmp	r0, #0
   1523c:	mov	r1, r5
   15240:	subne	r4, r0, r5
   15244:	mov	r0, r6
   15248:	mov	r2, r4
   1524c:	pop	{r4, r5, r6, sl, fp, lr}
   15250:	b	150ac <flatcc_builder_append_string@@Base>

00015254 <flatcc_builder_truncate_vector@@Base>:
   15254:	push	{fp, lr}
   15258:	mov	fp, sp
   1525c:	ldr	r2, [r0, #32]
   15260:	ldrh	r3, [r2, #14]
   15264:	cmp	r3, #4
   15268:	bne	152b0 <flatcc_builder_truncate_vector@@Base+0x5c>
   1526c:	ldr	r3, [r2, #20]
   15270:	cmp	r3, r1
   15274:	bcc	152d0 <flatcc_builder_truncate_vector@@Base+0x7c>
   15278:	sub	r3, r3, r1
   1527c:	str	r3, [r2, #20]
   15280:	ldr	r2, [r0, #32]
   15284:	ldr	r3, [r0, #20]
   15288:	ldr	ip, [r0, #16]
   1528c:	ldr	r2, [r2, #16]
   15290:	mls	r3, r2, r1, r3
   15294:	mul	r2, r2, r1
   15298:	mov	r1, #0
   1529c:	str	r3, [r0, #20]
   152a0:	add	r0, ip, r3
   152a4:	bl	12778 <memset@plt>
   152a8:	mov	r0, #0
   152ac:	pop	{fp, pc}
   152b0:	movw	r0, #42769	; 0xa711
   152b4:	movw	r1, #41966	; 0xa3ee
   152b8:	movw	r3, #43467	; 0xa9cb
   152bc:	movw	r2, #985	; 0x3d9
   152c0:	movt	r0, #1
   152c4:	movt	r1, #1
   152c8:	movt	r3, #1
   152cc:	bl	127a8 <__assert_fail@plt>
   152d0:	movw	r0, #43530	; 0xaa0a
   152d4:	movw	r1, #41966	; 0xa3ee
   152d8:	movw	r3, #43467	; 0xa9cb
   152dc:	movw	r2, #986	; 0x3da
   152e0:	movt	r0, #1
   152e4:	movt	r1, #1
   152e8:	movt	r3, #1
   152ec:	bl	127a8 <__assert_fail@plt>

000152f0 <flatcc_builder_truncate_offset_vector@@Base>:
   152f0:	push	{fp, lr}
   152f4:	mov	fp, sp
   152f8:	ldr	r2, [r0, #32]
   152fc:	ldrh	r3, [r2, #14]
   15300:	cmp	r3, #5
   15304:	bne	1534c <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15308:	ldr	r3, [r2, #20]
   1530c:	cmp	r3, r1
   15310:	bcc	1536c <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15314:	sub	r3, r3, r1
   15318:	str	r3, [r2, #20]
   1531c:	ldr	r2, [r0, #32]
   15320:	ldr	r3, [r0, #20]
   15324:	ldr	ip, [r0, #16]
   15328:	ldr	r2, [r2, #16]
   1532c:	mls	r3, r2, r1, r3
   15330:	mul	r2, r2, r1
   15334:	mov	r1, #0
   15338:	str	r3, [r0, #20]
   1533c:	add	r0, ip, r3
   15340:	bl	12778 <memset@plt>
   15344:	mov	r0, #0
   15348:	pop	{fp, pc}
   1534c:	movw	r0, #43018	; 0xa80a
   15350:	movw	r1, #41966	; 0xa3ee
   15354:	movw	r3, #43566	; 0xaa2e
   15358:	movw	r2, #994	; 0x3e2
   1535c:	movt	r0, #1
   15360:	movt	r1, #1
   15364:	movt	r3, #1
   15368:	bl	127a8 <__assert_fail@plt>
   1536c:	movw	r0, #43636	; 0xaa74
   15370:	movw	r1, #41966	; 0xa3ee
   15374:	movw	r3, #43566	; 0xaa2e
   15378:	movw	r2, #995	; 0x3e3
   1537c:	movt	r0, #1
   15380:	movt	r1, #1
   15384:	movt	r3, #1
   15388:	bl	127a8 <__assert_fail@plt>

0001538c <flatcc_builder_truncate_string@@Base>:
   1538c:	push	{fp, lr}
   15390:	mov	fp, sp
   15394:	mov	r2, r1
   15398:	ldr	r1, [r0, #32]
   1539c:	ldrh	r3, [r1, #14]
   153a0:	cmp	r3, #6
   153a4:	bne	153e0 <flatcc_builder_truncate_string@@Base+0x54>
   153a8:	ldr	r3, [r1, #20]
   153ac:	cmp	r3, r2
   153b0:	bcc	15400 <flatcc_builder_truncate_string@@Base+0x74>
   153b4:	sub	r3, r3, r2
   153b8:	str	r3, [r1, #20]
   153bc:	ldr	r3, [r0, #20]
   153c0:	ldr	r1, [r0, #16]
   153c4:	sub	r3, r3, r2
   153c8:	str	r3, [r0, #20]
   153cc:	add	r0, r1, r3
   153d0:	mov	r1, #0
   153d4:	bl	12778 <memset@plt>
   153d8:	mov	r0, #0
   153dc:	pop	{fp, pc}
   153e0:	movw	r0, #43283	; 0xa913
   153e4:	movw	r1, #41966	; 0xa3ee
   153e8:	movw	r3, #43695	; 0xaaaf
   153ec:	movw	r2, #1003	; 0x3eb
   153f0:	movt	r0, #1
   153f4:	movt	r1, #1
   153f8:	movt	r3, #1
   153fc:	bl	127a8 <__assert_fail@plt>
   15400:	movw	r0, #43758	; 0xaaee
   15404:	movw	r1, #41966	; 0xa3ee
   15408:	movw	r3, #43695	; 0xaaaf
   1540c:	mov	r2, #1004	; 0x3ec
   15410:	movt	r0, #1
   15414:	movt	r1, #1
   15418:	movt	r3, #1
   1541c:	bl	127a8 <__assert_fail@plt>

00015420 <flatcc_builder_start_vector@@Base>:
   15420:	push	{r4, r5, r6, r7, fp, lr}
   15424:	add	fp, sp, #16
   15428:	mov	r7, #4
   1542c:	cmp	r2, #4
   15430:	mov	r6, r1
   15434:	mov	r5, r3
   15438:	mov	r4, r0
   1543c:	movls	r2, r7
   15440:	mov	r1, r2
   15444:	bl	1449c <flatcc_builder_start_buffer@@Base+0xbc>
   15448:	mov	r1, r0
   1544c:	mvn	r0, #0
   15450:	cmp	r1, #0
   15454:	popne	{r4, r5, r6, r7, fp, pc}
   15458:	ldr	r0, [r4, #32]
   1545c:	str	r6, [r0, #16]
   15460:	mov	r0, #0
   15464:	ldr	r1, [r4, #32]
   15468:	str	r0, [r1, #20]
   1546c:	ldr	r1, [r4, #32]
   15470:	str	r5, [r1, #24]
   15474:	ldr	r1, [r4, #32]
   15478:	strh	r7, [r1, #14]
   1547c:	ldr	r2, [r4, #28]
   15480:	ldr	r3, [r4, #60]	; 0x3c
   15484:	ldr	r7, [r4, #64]	; 0x40
   15488:	add	r3, r3, r2
   1548c:	sub	r2, r7, r2
   15490:	str	r3, [r4, #16]
   15494:	mvn	r3, #3
   15498:	cmn	r2, #4
   1549c:	movcs	r2, r3
   154a0:	str	r2, [r4, #24]
   154a4:	str	r3, [r1, #4]
   154a8:	pop	{r4, r5, r6, r7, fp, pc}

000154ac <flatcc_builder_start_offset_vector@@Base>:
   154ac:	push	{r4, r5, fp, lr}
   154b0:	add	fp, sp, #8
   154b4:	mov	r1, #4
   154b8:	mov	r4, r0
   154bc:	mov	r5, #4
   154c0:	bl	1449c <flatcc_builder_start_buffer@@Base+0xbc>
   154c4:	mov	r1, r0
   154c8:	mvn	r0, #0
   154cc:	cmp	r1, #0
   154d0:	popne	{r4, r5, fp, pc}
   154d4:	ldr	r0, [r4, #32]
   154d8:	mov	r2, #5
   154dc:	str	r5, [r0, #16]
   154e0:	mov	r0, #0
   154e4:	ldr	r1, [r4, #32]
   154e8:	str	r0, [r1, #20]
   154ec:	ldr	r1, [r4, #32]
   154f0:	strh	r2, [r1, #14]
   154f4:	ldr	r2, [r4, #28]
   154f8:	ldr	r3, [r4, #60]	; 0x3c
   154fc:	ldr	r5, [r4, #64]	; 0x40
   15500:	add	r3, r3, r2
   15504:	sub	r2, r5, r2
   15508:	str	r3, [r4, #16]
   1550c:	mvn	r3, #3
   15510:	cmn	r2, #4
   15514:	movcs	r2, r3
   15518:	str	r2, [r4, #24]
   1551c:	str	r3, [r1, #4]
   15520:	pop	{r4, r5, fp, pc}

00015524 <flatcc_builder_create_offset_vector@@Base>:
   15524:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15528:	add	fp, sp, #24
   1552c:	sub	sp, sp, #8
   15530:	mov	r8, r1
   15534:	mov	r1, #4
   15538:	mov	r6, r2
   1553c:	mov	r4, r0
   15540:	mov	r5, #4
   15544:	bl	1449c <flatcc_builder_start_buffer@@Base+0xbc>
   15548:	mov	r7, #0
   1554c:	cmp	r0, #0
   15550:	beq	15560 <flatcc_builder_create_offset_vector@@Base+0x3c>
   15554:	mov	r0, r7
   15558:	sub	sp, fp, #24
   1555c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15560:	ldr	r0, [r4, #32]
   15564:	mov	r1, #0
   15568:	str	r5, [r0, #16]
   1556c:	ldr	r0, [r4, #32]
   15570:	str	r1, [r0, #20]
   15574:	mov	r1, #5
   15578:	ldr	r0, [r4, #32]
   1557c:	strh	r1, [r0, #14]
   15580:	ldr	r1, [r4, #28]
   15584:	ldr	r2, [r4, #60]	; 0x3c
   15588:	ldr	r3, [r4, #64]	; 0x40
   1558c:	add	r2, r2, r1
   15590:	sub	r1, r3, r1
   15594:	str	r2, [r4, #16]
   15598:	mvn	r2, #3
   1559c:	cmn	r1, #4
   155a0:	movcs	r1, r2
   155a4:	str	r1, [r4, #24]
   155a8:	str	r2, [r0, #4]
   155ac:	ldr	r1, [r0, #20]
   155b0:	adds	r1, r1, r6
   155b4:	cmpcc	r1, #1073741824	; 0x40000000
   155b8:	bcc	155dc <flatcc_builder_create_offset_vector@@Base+0xb8>
   155bc:	movw	r0, #46237	; 0xb49d
   155c0:	movw	r1, #41966	; 0xa3ee
   155c4:	movw	r3, #46264	; 0xb4b8
   155c8:	mov	r2, #892	; 0x37c
   155cc:	movt	r0, #1
   155d0:	movt	r1, #1
   155d4:	movt	r3, #1
   155d8:	bl	127a8 <__assert_fail@plt>
   155dc:	str	r1, [r0, #20]
   155e0:	ldr	r5, [r4, #20]
   155e4:	ldr	r0, [r4, #24]
   155e8:	add	r1, r5, r6, lsl #2
   155ec:	cmp	r1, r0
   155f0:	str	r1, [r4, #20]
   155f4:	bcs	156c8 <flatcc_builder_create_offset_vector@@Base+0x1a4>
   155f8:	ldr	r0, [r4, #16]
   155fc:	adds	r0, r0, r5
   15600:	beq	15734 <flatcc_builder_create_offset_vector@@Base+0x210>
   15604:	lsl	r2, r6, #2
   15608:	mov	r1, r8
   1560c:	bl	12718 <memcpy@plt>
   15610:	ldr	r0, [r4, #32]
   15614:	ldrh	r1, [r0, #14]
   15618:	cmp	r1, #5
   1561c:	bne	15744 <flatcc_builder_create_offset_vector@@Base+0x220>
   15620:	ldr	r2, [r0, #20]
   15624:	ldr	r1, [r4, #16]
   15628:	mov	r0, r4
   1562c:	mov	r3, #0
   15630:	mov	r7, #0
   15634:	bl	167ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15638:	cmp	r0, #0
   1563c:	beq	15554 <flatcc_builder_create_offset_vector@@Base+0x30>
   15640:	mov	r5, r0
   15644:	ldr	r0, [r4, #16]
   15648:	ldr	r2, [r4, #20]
   1564c:	mov	r1, #0
   15650:	bl	12778 <memset@plt>
   15654:	ldr	r0, [r4, #32]
   15658:	ldr	r1, [r4, #60]	; 0x3c
   1565c:	ldr	r2, [r4, #64]	; 0x40
   15660:	ldr	r3, [r0, #8]
   15664:	str	r3, [r4, #20]
   15668:	ldr	r3, [r0]
   1566c:	str	r3, [r4, #28]
   15670:	add	r1, r1, r3
   15674:	ldr	r7, [r0, #4]
   15678:	str	r1, [r4, #16]
   1567c:	sub	r1, r2, r3
   15680:	cmp	r1, r7
   15684:	movhi	r1, r7
   15688:	mov	r7, r5
   1568c:	str	r1, [r4, #24]
   15690:	ldrh	r1, [r4, #130]	; 0x82
   15694:	ldrh	r2, [r4, #128]	; 0x80
   15698:	cmp	r2, r1
   1569c:	strhcc	r1, [r4, #128]	; 0x80
   156a0:	ldrh	r1, [r0, #12]
   156a4:	sub	r0, r0, #36	; 0x24
   156a8:	str	r0, [r4, #32]
   156ac:	strh	r1, [r4, #130]	; 0x82
   156b0:	ldr	r0, [r4, #156]	; 0x9c
   156b4:	sub	r0, r0, #1
   156b8:	str	r0, [r4, #156]	; 0x9c
   156bc:	mov	r0, r7
   156c0:	sub	sp, fp, #24
   156c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156c8:	ldr	r2, [r4, #28]
   156cc:	ldr	r0, [r4, #40]	; 0x28
   156d0:	ldr	r7, [r4, #48]	; 0x30
   156d4:	mov	r3, #1
   156d8:	str	r3, [sp]
   156dc:	mov	r3, #1
   156e0:	add	r1, r1, r2
   156e4:	add	r2, r1, #1
   156e8:	add	r1, r4, #60	; 0x3c
   156ec:	blx	r7
   156f0:	mov	r7, #0
   156f4:	cmp	r0, #0
   156f8:	bne	15554 <flatcc_builder_create_offset_vector@@Base+0x30>
   156fc:	ldr	r1, [r4, #28]
   15700:	ldr	r0, [r4, #60]	; 0x3c
   15704:	ldr	r3, [r4, #64]	; 0x40
   15708:	ldr	r2, [r4, #32]
   1570c:	add	r0, r0, r1
   15710:	sub	r1, r3, r1
   15714:	mvn	r3, #3
   15718:	cmn	r1, #4
   1571c:	str	r0, [r4, #16]
   15720:	movcs	r1, r3
   15724:	str	r1, [r4, #24]
   15728:	str	r3, [r2, #4]
   1572c:	adds	r0, r0, r5
   15730:	bne	15604 <flatcc_builder_create_offset_vector@@Base+0xe0>
   15734:	mov	r7, #0
   15738:	mov	r0, r7
   1573c:	sub	sp, fp, #24
   15740:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15744:	movw	r0, #43018	; 0xa80a
   15748:	movw	r1, #41966	; 0xa3ee
   1574c:	movw	r3, #44601	; 0xae39
   15750:	movw	r2, #1480	; 0x5c8
   15754:	movt	r0, #1
   15758:	movt	r1, #1
   1575c:	movt	r3, #1
   15760:	bl	127a8 <__assert_fail@plt>

00015764 <flatcc_builder_end_offset_vector@@Base>:
   15764:	push	{r4, r5, fp, lr}
   15768:	add	fp, sp, #8
   1576c:	mov	r4, r0
   15770:	ldr	r0, [r0, #32]
   15774:	ldrh	r1, [r0, #14]
   15778:	cmp	r1, #5
   1577c:	bne	1581c <flatcc_builder_end_offset_vector@@Base+0xb8>
   15780:	ldr	r2, [r0, #20]
   15784:	ldr	r1, [r4, #16]
   15788:	mov	r0, r4
   1578c:	mov	r3, #0
   15790:	bl	167ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15794:	mov	r5, r0
   15798:	cmp	r0, #0
   1579c:	beq	15814 <flatcc_builder_end_offset_vector@@Base+0xb0>
   157a0:	ldr	r0, [r4, #16]
   157a4:	ldr	r2, [r4, #20]
   157a8:	mov	r1, #0
   157ac:	bl	12778 <memset@plt>
   157b0:	ldr	r0, [r4, #32]
   157b4:	ldr	r1, [r4, #60]	; 0x3c
   157b8:	ldr	ip, [r4, #64]	; 0x40
   157bc:	ldr	r3, [r0, #8]
   157c0:	str	r3, [r4, #20]
   157c4:	ldr	r3, [r0]
   157c8:	str	r3, [r4, #28]
   157cc:	add	r1, r1, r3
   157d0:	ldr	r2, [r0, #4]
   157d4:	str	r1, [r4, #16]
   157d8:	sub	r1, ip, r3
   157dc:	cmp	r1, r2
   157e0:	movhi	r1, r2
   157e4:	str	r1, [r4, #24]
   157e8:	ldrh	r1, [r4, #130]	; 0x82
   157ec:	ldrh	r2, [r4, #128]	; 0x80
   157f0:	cmp	r2, r1
   157f4:	strhcc	r1, [r4, #128]	; 0x80
   157f8:	ldrh	r1, [r0, #12]
   157fc:	sub	r0, r0, #36	; 0x24
   15800:	str	r0, [r4, #32]
   15804:	strh	r1, [r4, #130]	; 0x82
   15808:	ldr	r0, [r4, #156]	; 0x9c
   1580c:	sub	r0, r0, #1
   15810:	str	r0, [r4, #156]	; 0x9c
   15814:	mov	r0, r5
   15818:	pop	{r4, r5, fp, pc}
   1581c:	movw	r0, #43018	; 0xa80a
   15820:	movw	r1, #41966	; 0xa3ee
   15824:	movw	r3, #44601	; 0xae39
   15828:	movw	r2, #1480	; 0x5c8
   1582c:	movt	r0, #1
   15830:	movt	r1, #1
   15834:	movt	r3, #1
   15838:	bl	127a8 <__assert_fail@plt>

0001583c <flatcc_builder_start_string@@Base>:
   1583c:	push	{r4, r5, fp, lr}
   15840:	add	fp, sp, #8
   15844:	mov	r1, #1
   15848:	mov	r4, r0
   1584c:	mov	r5, #1
   15850:	bl	1449c <flatcc_builder_start_buffer@@Base+0xbc>
   15854:	mov	r1, r0
   15858:	mvn	r0, #0
   1585c:	cmp	r1, #0
   15860:	popne	{r4, r5, fp, pc}
   15864:	ldr	r0, [r4, #32]
   15868:	mov	r2, #6
   1586c:	str	r5, [r0, #16]
   15870:	mov	r0, #0
   15874:	ldr	r1, [r4, #32]
   15878:	str	r0, [r1, #20]
   1587c:	ldr	r1, [r4, #32]
   15880:	strh	r2, [r1, #14]
   15884:	ldr	r2, [r4, #28]
   15888:	ldr	r3, [r4, #60]	; 0x3c
   1588c:	ldr	r5, [r4, #64]	; 0x40
   15890:	add	r3, r3, r2
   15894:	sub	r2, r5, r2
   15898:	str	r3, [r4, #16]
   1589c:	mvn	r3, #3
   158a0:	cmn	r2, #4
   158a4:	movcs	r2, r3
   158a8:	str	r2, [r4, #24]
   158ac:	str	r3, [r1, #4]
   158b0:	pop	{r4, r5, fp, pc}

000158b4 <flatcc_builder_reserve_table@@Base>:
   158b4:	push	{r4, r5, r6, sl, fp, lr}
   158b8:	add	fp, sp, #16
   158bc:	sub	sp, sp, #8
   158c0:	cmn	r1, #1
   158c4:	ble	15998 <flatcc_builder_reserve_table@@Base+0xe4>
   158c8:	mov	r4, r0
   158cc:	ldr	r0, [r0, #32]
   158d0:	mov	r5, r1
   158d4:	ldr	r1, [r4, #56]	; 0x38
   158d8:	ldrh	r2, [r0, #28]
   158dc:	ldr	r0, [r0, #16]
   158e0:	add	r6, r0, r2, lsl #1
   158e4:	add	r0, r6, r5, lsl #1
   158e8:	add	r2, r0, #4
   158ec:	cmp	r2, r1
   158f0:	bls	15918 <flatcc_builder_reserve_table@@Base+0x64>
   158f4:	ldr	r0, [r4, #40]	; 0x28
   158f8:	ldr	ip, [r4, #48]	; 0x30
   158fc:	mov	r3, #0
   15900:	add	r1, r4, #52	; 0x34
   15904:	str	r3, [sp]
   15908:	mov	r3, #1
   1590c:	blx	ip
   15910:	cmp	r0, #0
   15914:	bne	159b8 <flatcc_builder_reserve_table@@Base+0x104>
   15918:	ldr	r0, [r4, #52]	; 0x34
   1591c:	adds	r0, r0, r6
   15920:	str	r0, [r4, #4]
   15924:	mvneq	r0, #0
   15928:	subeq	sp, fp, #16
   1592c:	popeq	{r4, r5, r6, sl, fp, pc}
   15930:	add	r0, r0, #4
   15934:	lsl	r1, r5, #1
   15938:	str	r0, [r4, #4]
   1593c:	ldr	r0, [r4, #32]
   15940:	ldr	r3, [r4, #80]	; 0x50
   15944:	ldr	r5, [r0, #20]
   15948:	orr	r0, r1, #1
   1594c:	add	r2, r5, r0
   15950:	cmp	r2, r3
   15954:	bls	1597c <flatcc_builder_reserve_table@@Base+0xc8>
   15958:	ldr	r0, [r4, #40]	; 0x28
   1595c:	ldr	r6, [r4, #48]	; 0x30
   15960:	mov	r3, #3
   15964:	add	r1, r4, #76	; 0x4c
   15968:	str	r3, [sp]
   1596c:	mov	r3, #0
   15970:	blx	r6
   15974:	cmp	r0, #0
   15978:	bne	159b8 <flatcc_builder_reserve_table@@Base+0x104>
   1597c:	ldr	r0, [r4, #76]	; 0x4c
   15980:	adds	r0, r0, r5
   15984:	str	r0, [r4]
   15988:	mov	r0, #0
   1598c:	mvneq	r0, #0
   15990:	sub	sp, fp, #16
   15994:	pop	{r4, r5, r6, sl, fp, pc}
   15998:	movw	r0, #43857	; 0xab51
   1599c:	movw	r1, #41966	; 0xa3ee
   159a0:	movw	r3, #43792	; 0xab10
   159a4:	movw	r2, #1065	; 0x429
   159a8:	movt	r0, #1
   159ac:	movt	r1, #1
   159b0:	movt	r3, #1
   159b4:	bl	127a8 <__assert_fail@plt>
   159b8:	movw	r0, #46484	; 0xb594
   159bc:	movw	r1, #41966	; 0xa3ee
   159c0:	movw	r3, #46030	; 0xb3ce
   159c4:	mov	r2, #308	; 0x134
   159c8:	movt	r0, #1
   159cc:	movt	r1, #1
   159d0:	movt	r3, #1
   159d4:	bl	127a8 <__assert_fail@plt>

000159d8 <flatcc_builder_start_table@@Base>:
   159d8:	push	{r4, r5, r6, r7, fp, lr}
   159dc:	add	fp, sp, #16
   159e0:	sub	sp, sp, #8
   159e4:	mov	r6, r1
   159e8:	mov	r1, #4
   159ec:	mov	r4, r0
   159f0:	bl	1449c <flatcc_builder_start_buffer@@Base+0xbc>
   159f4:	mvn	r5, #0
   159f8:	cmp	r0, #0
   159fc:	beq	15a0c <flatcc_builder_start_table@@Base+0x34>
   15a00:	mov	r0, r5
   15a04:	sub	sp, fp, #16
   15a08:	pop	{r4, r5, r6, r7, fp, pc}
   15a0c:	mov	r1, r4
   15a10:	ldr	r2, [r4, #4]
   15a14:	ldr	r3, [r4, #32]
   15a18:	ldr	r0, [r1, #52]!	; 0x34
   15a1c:	sub	r0, r2, r0
   15a20:	str	r0, [r3, #16]
   15a24:	ldr	r0, [r4]
   15a28:	ldr	r3, [r4, #76]	; 0x4c
   15a2c:	ldr	r2, [r4, #32]
   15a30:	sub	r0, r0, r3
   15a34:	mov	r3, #0
   15a38:	str	r0, [r2, #20]
   15a3c:	ldr	r0, [r4, #12]
   15a40:	ldr	r2, [r4, #32]
   15a44:	str	r0, [r2, #24]
   15a48:	ldr	r0, [r4, #32]
   15a4c:	ldrh	r2, [r4, #8]
   15a50:	strh	r2, [r0, #28]
   15a54:	movw	r0, #15186	; 0x3b52
   15a58:	strh	r3, [r4, #8]
   15a5c:	mov	r2, #3
   15a60:	movt	r0, #12137	; 0x2f69
   15a64:	str	r0, [r4, #12]
   15a68:	ldr	r0, [r4, #32]
   15a6c:	strh	r2, [r0, #14]
   15a70:	ldrh	r2, [r0, #28]
   15a74:	ldr	r0, [r0, #16]
   15a78:	add	r7, r0, r2, lsl #1
   15a7c:	add	r0, r7, r6, lsl #1
   15a80:	add	r2, r0, #4
   15a84:	ldr	r0, [r4, #56]	; 0x38
   15a88:	cmp	r2, r0
   15a8c:	bls	15aac <flatcc_builder_start_table@@Base+0xd4>
   15a90:	ldr	r0, [r4, #40]	; 0x28
   15a94:	ldr	ip, [r4, #48]	; 0x30
   15a98:	str	r3, [sp]
   15a9c:	mov	r3, #1
   15aa0:	blx	ip
   15aa4:	cmp	r0, #0
   15aa8:	bne	15b58 <flatcc_builder_start_table@@Base+0x180>
   15aac:	ldr	r0, [r4, #52]	; 0x34
   15ab0:	adds	r0, r0, r7
   15ab4:	str	r0, [r4, #4]
   15ab8:	beq	15a00 <flatcc_builder_start_table@@Base+0x28>
   15abc:	add	r0, r0, #4
   15ac0:	lsl	r1, r6, #1
   15ac4:	str	r0, [r4, #4]
   15ac8:	ldr	r0, [r4, #32]
   15acc:	ldr	r3, [r4, #80]	; 0x50
   15ad0:	ldr	r6, [r0, #20]
   15ad4:	orr	r0, r1, #1
   15ad8:	add	r2, r6, r0
   15adc:	cmp	r2, r3
   15ae0:	bls	15b08 <flatcc_builder_start_table@@Base+0x130>
   15ae4:	ldr	r0, [r4, #40]	; 0x28
   15ae8:	ldr	r7, [r4, #48]	; 0x30
   15aec:	mov	r3, #3
   15af0:	add	r1, r4, #76	; 0x4c
   15af4:	str	r3, [sp]
   15af8:	mov	r3, #0
   15afc:	blx	r7
   15b00:	cmp	r0, #0
   15b04:	bne	15b58 <flatcc_builder_start_table@@Base+0x180>
   15b08:	ldr	r0, [r4, #76]	; 0x4c
   15b0c:	adds	r0, r0, r6
   15b10:	str	r0, [r4]
   15b14:	beq	15a00 <flatcc_builder_start_table@@Base+0x28>
   15b18:	ldr	r0, [r4, #28]
   15b1c:	ldr	r2, [r4, #60]	; 0x3c
   15b20:	ldr	r3, [r4, #64]	; 0x40
   15b24:	ldr	r1, [r4, #32]
   15b28:	mov	r5, #0
   15b2c:	add	r2, r2, r0
   15b30:	sub	r0, r3, r0
   15b34:	str	r2, [r4, #16]
   15b38:	movw	r2, #65532	; 0xfffc
   15b3c:	cmp	r0, r2
   15b40:	movcs	r0, r2
   15b44:	str	r0, [r4, #24]
   15b48:	str	r2, [r1, #4]
   15b4c:	mov	r0, r5
   15b50:	sub	sp, fp, #16
   15b54:	pop	{r4, r5, r6, r7, fp, pc}
   15b58:	movw	r0, #46484	; 0xb594
   15b5c:	movw	r1, #41966	; 0xa3ee
   15b60:	movw	r3, #46030	; 0xb3ce
   15b64:	mov	r2, #308	; 0x134
   15b68:	movt	r0, #1
   15b6c:	movt	r1, #1
   15b70:	movt	r3, #1
   15b74:	bl	127a8 <__assert_fail@plt>

00015b78 <flatcc_builder_create_vtable@@Base>:
   15b78:	push	{r4, r5, fp, lr}
   15b7c:	add	fp, sp, #8
   15b80:	sub	sp, sp, #80	; 0x50
   15b84:	mov	r3, r2
   15b88:	mov	r2, #0
   15b8c:	mov	r4, r0
   15b90:	cmp	r3, #0
   15b94:	str	r2, [sp, #12]
   15b98:	str	r2, [sp, #8]
   15b9c:	movne	r2, #1
   15ba0:	strne	r1, [sp, #16]
   15ba4:	strne	r3, [sp, #8]
   15ba8:	strne	r3, [sp, #20]
   15bac:	strne	r2, [sp, #12]
   15bb0:	ldr	r0, [r4, #152]	; 0x98
   15bb4:	cmp	r0, #0
   15bb8:	bne	15bc8 <flatcc_builder_create_vtable@@Base+0x50>
   15bbc:	ldr	r0, [r4, #180]	; 0xb4
   15bc0:	cmp	r0, #0
   15bc4:	beq	15c14 <flatcc_builder_create_vtable@@Base+0x9c>
   15bc8:	cmp	r3, #0
   15bcc:	beq	15c58 <flatcc_builder_create_vtable@@Base+0xe0>
   15bd0:	ldr	r0, [r4, #136]	; 0x88
   15bd4:	ldr	ip, [r4, #44]	; 0x2c
   15bd8:	add	r1, sp, #8
   15bdc:	add	r1, r1, #8
   15be0:	sub	r5, r0, r3
   15be4:	ldr	r0, [r4, #36]	; 0x24
   15be8:	str	r3, [sp]
   15bec:	mov	r3, r5
   15bf0:	blx	ip
   15bf4:	cmp	r0, #0
   15bf8:	bne	15c78 <flatcc_builder_create_vtable@@Base+0x100>
   15bfc:	cmp	r5, #0
   15c00:	str	r5, [r4, #136]	; 0x88
   15c04:	beq	15c4c <flatcc_builder_create_vtable@@Base+0xd4>
   15c08:	add	r0, r5, #1
   15c0c:	sub	sp, fp, #8
   15c10:	pop	{r4, r5, fp, pc}
   15c14:	ldr	r5, [r4, #140]	; 0x8c
   15c18:	ldr	r0, [r4, #36]	; 0x24
   15c1c:	ldr	ip, [r4, #44]	; 0x2c
   15c20:	add	r1, r5, r3
   15c24:	str	r1, [r4, #140]	; 0x8c
   15c28:	add	r1, sp, #8
   15c2c:	str	r3, [sp]
   15c30:	mov	r3, r5
   15c34:	add	r1, r1, #8
   15c38:	blx	ip
   15c3c:	cmp	r0, #0
   15c40:	bne	15c98 <flatcc_builder_create_vtable@@Base+0x120>
   15c44:	adds	r0, r5, #1
   15c48:	bne	15c0c <flatcc_builder_create_vtable@@Base+0x94>
   15c4c:	mov	r0, #0
   15c50:	sub	sp, fp, #8
   15c54:	pop	{r4, r5, fp, pc}
   15c58:	movw	r0, #46484	; 0xb594
   15c5c:	movw	r1, #41966	; 0xa3ee
   15c60:	movw	r3, #46163	; 0xb453
   15c64:	movw	r2, #647	; 0x287
   15c68:	movt	r0, #1
   15c6c:	movt	r1, #1
   15c70:	movt	r3, #1
   15c74:	bl	127a8 <__assert_fail@plt>
   15c78:	movw	r0, #46484	; 0xb594
   15c7c:	movw	r1, #41966	; 0xa3ee
   15c80:	movw	r3, #46163	; 0xb453
   15c84:	movw	r2, #651	; 0x28b
   15c88:	movt	r0, #1
   15c8c:	movt	r1, #1
   15c90:	movt	r3, #1
   15c94:	bl	127a8 <__assert_fail@plt>
   15c98:	movw	r0, #46484	; 0xb594
   15c9c:	movw	r1, #41966	; 0xa3ee
   15ca0:	movw	r3, #46351	; 0xb50f
   15ca4:	movw	r2, #677	; 0x2a5
   15ca8:	movt	r0, #1
   15cac:	movt	r1, #1
   15cb0:	movt	r3, #1
   15cb4:	bl	127a8 <__assert_fail@plt>

00015cb8 <flatcc_builder_create_cached_vtable@@Base>:
   15cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cbc:	add	fp, sp, #28
   15cc0:	sub	sp, sp, #20
   15cc4:	mov	sl, r0
   15cc8:	ldr	r0, [r0, #116]	; 0x74
   15ccc:	mov	r8, r3
   15cd0:	mov	r5, r2
   15cd4:	str	r1, [sp, #16]
   15cd8:	cmp	r0, #0
   15cdc:	beq	15d80 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15ce0:	ldr	r1, [sl, #92]	; 0x5c
   15ce4:	rsb	r0, r0, #32
   15ce8:	lsr	r0, r8, r0
   15cec:	add	r6, r1, r0, lsl #2
   15cf0:	cmp	r6, #0
   15cf4:	beq	15e44 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15cf8:	ldr	r7, [r6]
   15cfc:	str	r6, [sp, #12]
   15d00:	cmp	r7, #0
   15d04:	beq	15e54 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15d08:	ldr	r4, [sl, #68]	; 0x44
   15d0c:	ldr	r8, [sl, #100]	; 0x64
   15d10:	mov	r0, #0
   15d14:	str	r0, [sp, #8]
   15d18:	add	r9, r8, r7
   15d1c:	mov	r1, r4
   15d20:	ldr	r0, [r9, #8]
   15d24:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15d28:	cmp	r0, r5
   15d2c:	bne	15d44 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15d30:	ldr	r0, [sp, #16]
   15d34:	mov	r2, r5
   15d38:	bl	12724 <memcmp@plt>
   15d3c:	cmp	r0, #0
   15d40:	beq	15d58 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   15d44:	ldr	r7, [r9, #12]!
   15d48:	cmp	r7, #0
   15d4c:	mov	r6, r9
   15d50:	bne	15d18 <flatcc_builder_create_cached_vtable@@Base+0x60>
   15d54:	b	15e3c <flatcc_builder_create_cached_vtable@@Base+0x184>
   15d58:	ldr	r0, [sl, #152]	; 0x98
   15d5c:	ldr	r1, [r9, #4]
   15d60:	cmp	r1, r0
   15d64:	beq	15fc0 <flatcc_builder_create_cached_vtable@@Base+0x308>
   15d68:	mov	r6, r9
   15d6c:	mov	r0, r9
   15d70:	ldr	r7, [r6, #12]!
   15d74:	cmp	r7, #0
   15d78:	bne	15d14 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15d7c:	b	15e58 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15d80:	ldr	r0, [sl, #124]	; 0x7c
   15d84:	cmp	r0, #0
   15d88:	bne	16014 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   15d8c:	ldr	r0, [sl, #104]	; 0x68
   15d90:	add	r7, sl, #100	; 0x64
   15d94:	cmp	r0, #15
   15d98:	bhi	15dc4 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15d9c:	ldr	r0, [sl, #40]	; 0x28
   15da0:	ldr	r6, [sl, #48]	; 0x30
   15da4:	mov	r1, #6
   15da8:	mov	r2, #16
   15dac:	mov	r3, #0
   15db0:	str	r1, [sp]
   15db4:	mov	r1, r7
   15db8:	blx	r6
   15dbc:	cmp	r0, #0
   15dc0:	bne	15ff4 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15dc4:	ldr	r0, [r7]
   15dc8:	mov	r7, #0
   15dcc:	cmp	r0, #0
   15dd0:	beq	15ef8 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15dd4:	mov	r0, #16
   15dd8:	mov	r2, #5
   15ddc:	add	r1, sl, #92	; 0x5c
   15de0:	mov	r3, #1
   15de4:	mov	r4, #256	; 0x100
   15de8:	str	r0, [sl, #124]	; 0x7c
   15dec:	ldr	r0, [sl, #40]	; 0x28
   15df0:	ldr	r6, [sl, #48]	; 0x30
   15df4:	str	r2, [sp]
   15df8:	mov	r2, #256	; 0x100
   15dfc:	blx	r6
   15e00:	cmp	r0, #0
   15e04:	bne	15ef8 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15e08:	ldr	r0, [sl, #96]	; 0x60
   15e0c:	mov	r1, r4
   15e10:	lsl	r4, r4, #1
   15e14:	cmp	r0, r1, lsl #1
   15e18:	bcs	15e0c <flatcc_builder_create_cached_vtable@@Base+0x154>
   15e1c:	lsr	r1, r1, #2
   15e20:	mvn	r0, #0
   15e24:	mov	r2, #1
   15e28:	add	r0, r0, #1
   15e2c:	cmp	r1, r2, lsl r0
   15e30:	bhi	15e28 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15e34:	str	r0, [sl, #116]	; 0x74
   15e38:	b	15ce0 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15e3c:	ldr	r9, [sp, #8]
   15e40:	b	15e58 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15e44:	mov	r7, #0
   15e48:	mov	r0, r7
   15e4c:	sub	sp, fp, #28
   15e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e54:	mov	r9, #0
   15e58:	ldr	r4, [sl, #124]	; 0x7c
   15e5c:	ldr	r0, [sl, #104]	; 0x68
   15e60:	add	r7, sl, #100	; 0x64
   15e64:	add	r2, r4, #16
   15e68:	cmp	r2, r0
   15e6c:	bls	15e94 <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   15e70:	ldr	r0, [sl, #40]	; 0x28
   15e74:	ldr	r6, [sl, #48]	; 0x30
   15e78:	mov	r1, #6
   15e7c:	mov	r3, #0
   15e80:	str	r1, [sp]
   15e84:	mov	r1, r7
   15e88:	blx	r6
   15e8c:	cmp	r0, #0
   15e90:	bne	15ff4 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15e94:	ldr	r0, [r7]
   15e98:	mov	r7, #0
   15e9c:	adds	r4, r0, r4
   15ea0:	beq	15ef8 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15ea4:	ldr	r0, [sl, #124]	; 0x7c
   15ea8:	ldr	r1, [sl, #152]	; 0x98
   15eac:	add	r2, r0, #16
   15eb0:	str	r2, [sl, #124]	; 0x7c
   15eb4:	ldr	r2, [sp, #12]
   15eb8:	str	r1, [r4, #4]
   15ebc:	ldr	r1, [r2]
   15ec0:	str	r1, [r4, #12]
   15ec4:	ldr	r1, [sp, #16]
   15ec8:	str	r0, [r2]
   15ecc:	mov	r0, sl
   15ed0:	mov	r2, r5
   15ed4:	bl	15b78 <flatcc_builder_create_vtable@@Base>
   15ed8:	cmp	r0, #0
   15edc:	str	r0, [r4]
   15ee0:	beq	15ef8 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15ee4:	cmp	r9, #0
   15ee8:	beq	15f04 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   15eec:	ldr	r0, [r9, #8]
   15ef0:	str	r0, [r4, #8]
   15ef4:	ldr	r7, [r4]
   15ef8:	mov	r0, r7
   15efc:	sub	sp, fp, #28
   15f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f04:	ldr	r6, [sl, #120]	; 0x78
   15f08:	ldr	r0, [sl, #172]	; 0xac
   15f0c:	add	r2, r6, r5
   15f10:	cmp	r0, #0
   15f14:	beq	15f50 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15f18:	cmp	r0, r2
   15f1c:	bcs	15f50 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15f20:	ldr	r0, [sl, #116]	; 0x74
   15f24:	cmp	r0, #0
   15f28:	beq	15ef4 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15f2c:	ldr	r0, [sl, #92]	; 0x5c
   15f30:	ldr	r2, [sl, #96]	; 0x60
   15f34:	mov	r1, #0
   15f38:	mov	r5, #0
   15f3c:	bl	12778 <memset@plt>
   15f40:	mov	r0, #16
   15f44:	str	r5, [sl, #120]	; 0x78
   15f48:	str	r0, [sl, #124]	; 0x7c
   15f4c:	b	15ef4 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15f50:	ldr	r0, [sl, #72]	; 0x48
   15f54:	add	r7, sl, #68	; 0x44
   15f58:	cmp	r2, r0
   15f5c:	bls	15f84 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15f60:	ldr	r0, [sl, #40]	; 0x28
   15f64:	ldr	ip, [sl, #48]	; 0x30
   15f68:	mov	r1, #2
   15f6c:	mov	r3, #0
   15f70:	str	r1, [sp]
   15f74:	mov	r1, r7
   15f78:	blx	ip
   15f7c:	cmp	r0, #0
   15f80:	bne	15ff4 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15f84:	ldr	r0, [r7]
   15f88:	adds	r0, r0, r6
   15f8c:	beq	15fb0 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15f90:	ldr	r1, [sl, #120]	; 0x78
   15f94:	mov	r2, r5
   15f98:	str	r1, [r4, #8]
   15f9c:	add	r1, r1, r5
   15fa0:	str	r1, [sl, #120]	; 0x78
   15fa4:	ldr	r1, [sp, #16]
   15fa8:	bl	12718 <memcpy@plt>
   15fac:	b	15ef4 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15fb0:	mvn	r7, #0
   15fb4:	mov	r0, r7
   15fb8:	sub	sp, fp, #28
   15fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fc0:	ldr	r0, [sp, #12]
   15fc4:	cmp	r6, r0
   15fc8:	beq	15fe4 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15fcc:	mov	r1, r0
   15fd0:	ldr	r0, [r9, #12]
   15fd4:	str	r0, [r6]
   15fd8:	ldr	r0, [r1]
   15fdc:	str	r0, [r9, #12]
   15fe0:	str	r7, [r1]
   15fe4:	ldr	r7, [r9]
   15fe8:	mov	r0, r7
   15fec:	sub	sp, fp, #28
   15ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ff4:	movw	r0, #46484	; 0xb594
   15ff8:	movw	r1, #41966	; 0xa3ee
   15ffc:	movw	r3, #46030	; 0xb3ce
   16000:	mov	r2, #308	; 0x134
   16004:	movt	r0, #1
   16008:	movt	r1, #1
   1600c:	movt	r3, #1
   16010:	bl	127a8 <__assert_fail@plt>
   16014:	movw	r0, #46424	; 0xb558
   16018:	movw	r1, #41966	; 0xa3ee
   1601c:	movw	r3, #46439	; 0xb567
   16020:	movw	r2, #342	; 0x156
   16024:	movt	r0, #1
   16028:	movt	r1, #1
   1602c:	movt	r3, #1
   16030:	bl	127a8 <__assert_fail@plt>

00016034 <flatcc_builder_create_table@@Base>:
   16034:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16038:	add	fp, sp, #24
   1603c:	sub	sp, sp, #80	; 0x50
   16040:	ldr	r5, [fp, #12]
   16044:	cmn	r5, #1
   16048:	ble	1619c <flatcc_builder_create_table@@Base+0x168>
   1604c:	ldr	ip, [fp, #16]
   16050:	tst	ip, #1
   16054:	beq	161bc <flatcc_builder_create_table@@Base+0x188>
   16058:	mov	r8, r0
   1605c:	ldrh	r0, [r0, #128]	; 0x80
   16060:	cmp	r3, #4
   16064:	movls	r3, #4
   16068:	cmp	r0, r3
   1606c:	strhcc	r3, [r8, #128]	; 0x80
   16070:	sub	r3, r3, #1
   16074:	cmp	r5, #1
   16078:	ldr	r4, [r8, #136]	; 0x88
   1607c:	sub	r0, r4, r2
   16080:	and	r0, r0, r3
   16084:	add	r3, ip, r0
   16088:	mvn	ip, #3
   1608c:	sub	r6, ip, r2
   16090:	add	r4, r6, r4
   16094:	add	r6, r4, #1
   16098:	sub	r3, r6, r3
   1609c:	str	r3, [fp, #-28]	; 0xffffffe4
   160a0:	blt	160cc <flatcc_builder_create_table@@Base+0x98>
   160a4:	ldr	r3, [fp, #8]
   160a8:	sub	r6, r4, r0
   160ac:	sub	r4, ip, r6
   160b0:	ldrh	r6, [r3], #2
   160b4:	subs	r5, r5, #1
   160b8:	ldr	r7, [r6, r1]
   160bc:	add	r7, r4, r7
   160c0:	sub	r7, r7, r6
   160c4:	str	r7, [r6, r1]
   160c8:	bne	160b0 <flatcc_builder_create_table@@Base+0x7c>
   160cc:	sub	r3, fp, #28
   160d0:	mov	r4, #4
   160d4:	cmp	r2, #0
   160d8:	str	r3, [sp, #12]
   160dc:	mov	r3, #1
   160e0:	str	r4, [sp, #4]
   160e4:	str	r4, [sp, #16]
   160e8:	str	r3, [sp, #8]
   160ec:	beq	16108 <flatcc_builder_create_table@@Base+0xd4>
   160f0:	mov	r3, #2
   160f4:	add	r4, r2, #4
   160f8:	str	r1, [sp, #20]
   160fc:	str	r2, [sp, #24]
   16100:	str	r3, [sp, #8]
   16104:	str	r4, [sp, #4]
   16108:	cmp	r0, #0
   1610c:	beq	16138 <flatcc_builder_create_table@@Base+0x104>
   16110:	add	r1, sp, #4
   16114:	movw	r2, #41436	; 0xa1dc
   16118:	add	r4, r4, r0
   1611c:	add	r1, r1, r3, lsl #3
   16120:	add	r3, r3, #1
   16124:	movt	r2, #1
   16128:	str	r4, [sp, #4]
   1612c:	str	r2, [r1, #8]
   16130:	str	r0, [r1, #12]
   16134:	str	r3, [sp, #8]
   16138:	cmp	r4, #0
   1613c:	ble	161dc <flatcc_builder_create_table@@Base+0x1a8>
   16140:	ldr	r0, [r8, #136]	; 0x88
   16144:	ldr	r7, [r8, #44]	; 0x2c
   16148:	add	r1, sp, #4
   1614c:	mov	r2, r3
   16150:	add	r1, r1, #8
   16154:	sub	r5, r0, r4
   16158:	ldr	r0, [r8, #36]	; 0x24
   1615c:	str	r4, [sp]
   16160:	mov	r3, r5
   16164:	blx	r7
   16168:	cmp	r0, #0
   1616c:	streq	r5, [r8, #136]	; 0x88
   16170:	moveq	r0, r5
   16174:	subeq	sp, fp, #24
   16178:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1617c:	movw	r0, #46484	; 0xb594
   16180:	movw	r1, #41966	; 0xa3ee
   16184:	movw	r3, #46163	; 0xb453
   16188:	movw	r2, #651	; 0x28b
   1618c:	movt	r0, #1
   16190:	movt	r1, #1
   16194:	movt	r3, #1
   16198:	bl	127a8 <__assert_fail@plt>
   1619c:	movw	r0, #43850	; 0xab4a
   161a0:	movw	r1, #41966	; 0xa3ee
   161a4:	movw	r3, #43868	; 0xab5c
   161a8:	movw	r2, #1237	; 0x4d5
   161ac:	movt	r0, #1
   161b0:	movt	r1, #1
   161b4:	movt	r3, #1
   161b8:	bl	127a8 <__assert_fail@plt>
   161bc:	movw	r0, #44024	; 0xabf8
   161c0:	movw	r1, #41966	; 0xa3ee
   161c4:	movw	r3, #43868	; 0xab5c
   161c8:	movw	r2, #1243	; 0x4db
   161cc:	movt	r0, #1
   161d0:	movt	r1, #1
   161d4:	movt	r3, #1
   161d8:	bl	127a8 <__assert_fail@plt>
   161dc:	movw	r0, #46484	; 0xb594
   161e0:	movw	r1, #41966	; 0xa3ee
   161e4:	movw	r3, #46163	; 0xb453
   161e8:	movw	r2, #647	; 0x287
   161ec:	movt	r0, #1
   161f0:	movt	r1, #1
   161f4:	movt	r3, #1
   161f8:	bl	127a8 <__assert_fail@plt>

000161fc <flatcc_builder_check_required_field@@Base>:
   161fc:	ldr	r2, [r0, #32]
   16200:	ldrh	r2, [r2, #14]
   16204:	cmp	r2, #3
   16208:	bne	16238 <flatcc_builder_check_required_field@@Base+0x3c>
   1620c:	ldrh	r3, [r0, #8]
   16210:	mov	r2, #0
   16214:	cmp	r3, r1
   16218:	bls	16230 <flatcc_builder_check_required_field@@Base+0x34>
   1621c:	ldr	r0, [r0, #4]
   16220:	add	r0, r0, r1, lsl #1
   16224:	ldrh	r2, [r0]
   16228:	cmp	r2, #0
   1622c:	movwne	r2, #1
   16230:	mov	r0, r2
   16234:	bx	lr
   16238:	push	{fp, lr}
   1623c:	mov	fp, sp
   16240:	movw	r0, #44035	; 0xac03
   16244:	movw	r1, #41966	; 0xa3ee
   16248:	movw	r3, #44078	; 0xac2e
   1624c:	movw	r2, #1272	; 0x4f8
   16250:	movt	r0, #1
   16254:	movt	r1, #1
   16258:	movt	r3, #1
   1625c:	bl	127a8 <__assert_fail@plt>

00016260 <flatcc_builder_check_union_field@@Base>:
   16260:	mov	r2, r0
   16264:	ldr	r0, [r0, #32]
   16268:	ldrh	r0, [r0, #14]
   1626c:	cmp	r0, #3
   16270:	bne	162d0 <flatcc_builder_check_union_field@@Base+0x70>
   16274:	cmp	r1, #0
   16278:	mov	r0, #0
   1627c:	ldrhne	r3, [r2, #8]
   16280:	cmpne	r3, r1
   16284:	bhi	1628c <flatcc_builder_check_union_field@@Base+0x2c>
   16288:	bx	lr
   1628c:	ldr	r0, [r2, #4]
   16290:	add	r0, r0, r1, lsl #1
   16294:	ldrh	r1, [r0, #-2]
   16298:	cmp	r1, #0
   1629c:	beq	162c0 <flatcc_builder_check_union_field@@Base+0x60>
   162a0:	ldr	r2, [r2, #16]
   162a4:	ldrh	r0, [r0]
   162a8:	ldrb	r1, [r2, r1]
   162ac:	cmp	r1, #0
   162b0:	beq	162c4 <flatcc_builder_check_union_field@@Base+0x64>
   162b4:	cmp	r0, #0
   162b8:	movwne	r0, #1
   162bc:	bx	lr
   162c0:	ldrh	r0, [r0]
   162c4:	clz	r0, r0
   162c8:	lsr	r0, r0, #5
   162cc:	bx	lr
   162d0:	push	{fp, lr}
   162d4:	mov	fp, sp
   162d8:	movw	r0, #44035	; 0xac03
   162dc:	movw	r1, #41966	; 0xa3ee
   162e0:	movw	r3, #44161	; 0xac81
   162e4:	movw	r2, #1279	; 0x4ff
   162e8:	movt	r0, #1
   162ec:	movt	r1, #1
   162f0:	movt	r3, #1
   162f4:	bl	127a8 <__assert_fail@plt>

000162f8 <flatcc_builder_check_required@@Base>:
   162f8:	push	{fp, lr}
   162fc:	mov	fp, sp
   16300:	mov	r3, r0
   16304:	ldr	r0, [r0, #32]
   16308:	ldrh	r0, [r0, #14]
   1630c:	cmp	r0, #3
   16310:	bne	16368 <flatcc_builder_check_required@@Base+0x70>
   16314:	ldrh	ip, [r3, #8]
   16318:	mov	r0, #0
   1631c:	cmp	ip, r2
   16320:	movge	r0, #1
   16324:	cmpge	r2, #1
   16328:	bge	16330 <flatcc_builder_check_required@@Base+0x38>
   1632c:	pop	{fp, pc}
   16330:	ldr	ip, [r3, #4]
   16334:	mov	lr, #0
   16338:	b	1634c <flatcc_builder_check_required@@Base+0x54>
   1633c:	add	lr, lr, #1
   16340:	add	r1, r1, #2
   16344:	cmp	lr, r2
   16348:	popge	{fp, pc}
   1634c:	ldrh	r3, [r1]
   16350:	add	r3, ip, r3, lsl #1
   16354:	ldrh	r3, [r3]
   16358:	cmp	r3, #0
   1635c:	bne	1633c <flatcc_builder_check_required@@Base+0x44>
   16360:	mov	r0, #0
   16364:	pop	{fp, pc}
   16368:	movw	r0, #44035	; 0xac03
   1636c:	movw	r1, #41966	; 0xa3ee
   16370:	movw	r3, #44241	; 0xacd1
   16374:	movw	r2, #1297	; 0x511
   16378:	movt	r0, #1
   1637c:	movt	r1, #1
   16380:	movt	r3, #1
   16384:	bl	127a8 <__assert_fail@plt>

00016388 <flatcc_builder_end_table@@Base>:
   16388:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1638c:	add	fp, sp, #24
   16390:	sub	sp, sp, #16
   16394:	mov	r4, r0
   16398:	ldr	r0, [r0, #32]
   1639c:	ldrh	r0, [r0, #14]
   163a0:	cmp	r0, #3
   163a4:	bne	16528 <flatcc_builder_end_table@@Base+0x1a0>
   163a8:	ldrh	r0, [r4, #8]
   163ac:	ldr	r5, [r4, #4]
   163b0:	mov	r1, #4
   163b4:	movw	r2, #31153	; 0x79b1
   163b8:	movt	r2, #40503	; 0x9e37
   163bc:	add	r0, r1, r0, lsl #1
   163c0:	strh	r0, [r5, #-4]!
   163c4:	ldrh	r1, [r4, #20]
   163c8:	uxth	r6, r0
   163cc:	add	r1, r1, #4
   163d0:	strh	r1, [r5, #2]
   163d4:	uxth	r1, r1
   163d8:	ldr	r0, [r4, #12]
   163dc:	eor	r0, r0, r6
   163e0:	mul	r0, r0, r2
   163e4:	eor	r0, r0, r1
   163e8:	mov	r1, r5
   163ec:	mul	r3, r0, r2
   163f0:	mov	r0, r4
   163f4:	mov	r2, r6
   163f8:	str	r3, [r4, #12]
   163fc:	bl	15cb8 <flatcc_builder_create_cached_vtable@@Base>
   16400:	cmp	r0, #0
   16404:	beq	16518 <flatcc_builder_end_table@@Base+0x190>
   16408:	mov	r7, r0
   1640c:	mov	r0, r5
   16410:	mov	r1, #0
   16414:	mov	r2, r6
   16418:	mov	r8, #0
   1641c:	bl	12778 <memset@plt>
   16420:	ldr	r5, [r4, #32]
   16424:	ldr	r0, [r4, #76]	; 0x4c
   16428:	ldr	r6, [r4]
   1642c:	ldrh	r3, [r4, #130]	; 0x82
   16430:	ldr	r1, [r4, #16]
   16434:	ldr	r2, [r4, #20]
   16438:	ldr	r5, [r5, #20]
   1643c:	add	r0, r0, r5
   16440:	sub	r6, r6, r0
   16444:	asr	r6, r6, #1
   16448:	stm	sp, {r0, r6, r7}
   1644c:	mov	r0, r4
   16450:	bl	16034 <flatcc_builder_create_table@@Base>
   16454:	cmp	r0, #0
   16458:	beq	1650c <flatcc_builder_end_table@@Base+0x184>
   1645c:	ldr	r1, [r4, #32]
   16460:	mov	r5, r0
   16464:	ldr	r0, [r4, #16]
   16468:	ldr	r2, [r4, #20]
   1646c:	ldr	r3, [r4, #52]	; 0x34
   16470:	ldr	r7, [r1, #24]
   16474:	str	r7, [r4, #12]
   16478:	ldrh	r7, [r1, #28]
   1647c:	strh	r7, [r4, #8]
   16480:	ldr	r7, [r1, #16]
   16484:	add	r3, r3, r7
   16488:	str	r3, [r4, #4]
   1648c:	ldr	r3, [r4, #76]	; 0x4c
   16490:	ldr	r1, [r1, #20]
   16494:	add	r1, r3, r1
   16498:	str	r1, [r4]
   1649c:	mov	r1, #0
   164a0:	bl	12778 <memset@plt>
   164a4:	ldr	r0, [r4, #32]
   164a8:	ldr	r1, [r4, #60]	; 0x3c
   164ac:	ldr	r2, [r4, #64]	; 0x40
   164b0:	mov	r8, r5
   164b4:	ldr	r3, [r0, #8]
   164b8:	str	r3, [r4, #20]
   164bc:	ldr	r3, [r0]
   164c0:	str	r3, [r4, #28]
   164c4:	add	r1, r1, r3
   164c8:	ldr	r7, [r0, #4]
   164cc:	str	r1, [r4, #16]
   164d0:	sub	r1, r2, r3
   164d4:	cmp	r1, r7
   164d8:	movhi	r1, r7
   164dc:	str	r1, [r4, #24]
   164e0:	ldrh	r1, [r4, #130]	; 0x82
   164e4:	ldrh	r2, [r4, #128]	; 0x80
   164e8:	cmp	r2, r1
   164ec:	strhcc	r1, [r4, #128]	; 0x80
   164f0:	ldrh	r1, [r0, #12]
   164f4:	sub	r0, r0, #36	; 0x24
   164f8:	str	r0, [r4, #32]
   164fc:	strh	r1, [r4, #130]	; 0x82
   16500:	ldr	r0, [r4, #156]	; 0x9c
   16504:	sub	r0, r0, #1
   16508:	str	r0, [r4, #156]	; 0x9c
   1650c:	mov	r0, r8
   16510:	sub	sp, fp, #24
   16514:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16518:	mov	r8, #0
   1651c:	mov	r0, r8
   16520:	sub	sp, fp, #24
   16524:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16528:	movw	r0, #44035	; 0xac03
   1652c:	movw	r1, #41966	; 0xa3ee
   16530:	movw	r3, #44331	; 0xad2b
   16534:	movw	r2, #1317	; 0x525
   16538:	movt	r0, #1
   1653c:	movt	r1, #1
   16540:	movt	r3, #1
   16544:	bl	127a8 <__assert_fail@plt>

00016548 <flatcc_builder_create_vector@@Base>:
   16548:	push	{r4, r5, r6, r7, fp, lr}
   1654c:	add	fp, sp, #16
   16550:	sub	sp, sp, #80	; 0x50
   16554:	mov	r7, r0
   16558:	ldr	r0, [fp, #12]
   1655c:	cmp	r2, r0
   16560:	bhi	16660 <flatcc_builder_create_vector@@Base+0x118>
   16564:	ldr	r0, [fp, #8]
   16568:	mov	r4, r2
   1656c:	ldrh	r2, [r7, #128]	; 0x80
   16570:	mov	r5, #4
   16574:	cmp	r0, #4
   16578:	movls	r0, r5
   1657c:	cmp	r2, r0
   16580:	sub	r2, fp, #20
   16584:	strhcc	r0, [r7, #128]	; 0x80
   16588:	str	r4, [fp, #-20]	; 0xffffffec
   1658c:	sub	r0, r0, #1
   16590:	ldr	ip, [r7, #136]	; 0x88
   16594:	str	r2, [sp, #12]
   16598:	mov	r2, #1
   1659c:	str	r5, [sp, #4]
   165a0:	str	r5, [sp, #16]
   165a4:	str	r2, [sp, #8]
   165a8:	mls	r6, r3, r4, ip
   165ac:	mul	r3, r3, r4
   165b0:	and	r0, r6, r0
   165b4:	cmp	r3, #0
   165b8:	beq	165d4 <flatcc_builder_create_vector@@Base+0x8c>
   165bc:	mov	r2, #2
   165c0:	add	r5, r3, #4
   165c4:	str	r1, [sp, #20]
   165c8:	str	r3, [sp, #24]
   165cc:	str	r2, [sp, #8]
   165d0:	str	r5, [sp, #4]
   165d4:	cmp	r0, #0
   165d8:	beq	16604 <flatcc_builder_create_vector@@Base+0xbc>
   165dc:	add	r1, sp, #4
   165e0:	movw	r3, #41436	; 0xa1dc
   165e4:	add	r5, r5, r0
   165e8:	add	r1, r1, r2, lsl #3
   165ec:	add	r2, r2, #1
   165f0:	movt	r3, #1
   165f4:	str	r5, [sp, #4]
   165f8:	str	r3, [r1, #8]
   165fc:	str	r0, [r1, #12]
   16600:	str	r2, [sp, #8]
   16604:	cmp	r5, #0
   16608:	ble	16680 <flatcc_builder_create_vector@@Base+0x138>
   1660c:	ldr	r0, [r7, #36]	; 0x24
   16610:	ldr	r6, [r7, #44]	; 0x2c
   16614:	add	r1, sp, #4
   16618:	sub	r4, ip, r5
   1661c:	str	r5, [sp]
   16620:	add	r1, r1, #8
   16624:	mov	r3, r4
   16628:	blx	r6
   1662c:	cmp	r0, #0
   16630:	streq	r4, [r7, #136]	; 0x88
   16634:	moveq	r0, r4
   16638:	subeq	sp, fp, #16
   1663c:	popeq	{r4, r5, r6, r7, fp, pc}
   16640:	movw	r0, #46484	; 0xb594
   16644:	movw	r1, #41966	; 0xa3ee
   16648:	movw	r3, #46163	; 0xb453
   1664c:	movw	r2, #651	; 0x28b
   16650:	movt	r0, #1
   16654:	movt	r1, #1
   16658:	movt	r3, #1
   1665c:	bl	127a8 <__assert_fail@plt>
   16660:	movw	r0, #44397	; 0xad6d
   16664:	movw	r1, #41966	; 0xa3ee
   16668:	movw	r3, #44416	; 0xad80
   1666c:	movw	r2, #1365	; 0x555
   16670:	movt	r0, #1
   16674:	movt	r1, #1
   16678:	movt	r3, #1
   1667c:	bl	127a8 <__assert_fail@plt>
   16680:	movw	r0, #46484	; 0xb594
   16684:	movw	r1, #41966	; 0xa3ee
   16688:	movw	r3, #46163	; 0xb453
   1668c:	movw	r2, #647	; 0x287
   16690:	movt	r0, #1
   16694:	movt	r1, #1
   16698:	movt	r3, #1
   1669c:	bl	127a8 <__assert_fail@plt>

000166a0 <flatcc_builder_end_vector@@Base>:
   166a0:	push	{r4, r5, fp, lr}
   166a4:	add	fp, sp, #8
   166a8:	sub	sp, sp, #8
   166ac:	mov	r4, r0
   166b0:	ldr	r0, [r0, #32]
   166b4:	ldrh	r1, [r0, #14]
   166b8:	cmp	r1, #4
   166bc:	bne	16770 <flatcc_builder_end_vector@@Base+0xd0>
   166c0:	ldr	r3, [r0, #16]
   166c4:	ldr	r2, [r0, #20]
   166c8:	ldr	r0, [r0, #24]
   166cc:	ldr	r1, [r4, #16]
   166d0:	ldrh	r5, [r4, #130]	; 0x82
   166d4:	str	r0, [sp, #4]
   166d8:	mov	r0, r4
   166dc:	str	r5, [sp]
   166e0:	bl	16548 <flatcc_builder_create_vector@@Base>
   166e4:	mov	r5, r0
   166e8:	cmp	r0, #0
   166ec:	beq	16764 <flatcc_builder_end_vector@@Base+0xc4>
   166f0:	ldr	r0, [r4, #16]
   166f4:	ldr	r2, [r4, #20]
   166f8:	mov	r1, #0
   166fc:	bl	12778 <memset@plt>
   16700:	ldr	r0, [r4, #32]
   16704:	ldr	r1, [r4, #60]	; 0x3c
   16708:	ldr	ip, [r4, #64]	; 0x40
   1670c:	ldr	r3, [r0, #8]
   16710:	str	r3, [r4, #20]
   16714:	ldr	r3, [r0]
   16718:	str	r3, [r4, #28]
   1671c:	add	r1, r1, r3
   16720:	ldr	r2, [r0, #4]
   16724:	str	r1, [r4, #16]
   16728:	sub	r1, ip, r3
   1672c:	cmp	r1, r2
   16730:	movhi	r1, r2
   16734:	str	r1, [r4, #24]
   16738:	ldrh	r1, [r4, #130]	; 0x82
   1673c:	ldrh	r2, [r4, #128]	; 0x80
   16740:	cmp	r2, r1
   16744:	strhcc	r1, [r4, #128]	; 0x80
   16748:	ldrh	r1, [r0, #12]
   1674c:	sub	r0, r0, #36	; 0x24
   16750:	str	r0, [r4, #32]
   16754:	strh	r1, [r4, #130]	; 0x82
   16758:	ldr	r0, [r4, #156]	; 0x9c
   1675c:	sub	r0, r0, #1
   16760:	str	r0, [r4, #156]	; 0x9c
   16764:	mov	r0, r5
   16768:	sub	sp, fp, #8
   1676c:	pop	{r4, r5, fp, pc}
   16770:	movw	r0, #42769	; 0xa711
   16774:	movw	r1, #41966	; 0xa3ee
   16778:	movw	r3, #44534	; 0xadf6
   1677c:	movw	r2, #1400	; 0x578
   16780:	movt	r0, #1
   16784:	movt	r1, #1
   16788:	movt	r3, #1
   1678c:	bl	127a8 <__assert_fail@plt>

00016790 <flatcc_builder_vector_count@@Base>:
   16790:	ldr	r0, [r0, #32]
   16794:	ldr	r0, [r0, #20]
   16798:	bx	lr

0001679c <flatcc_builder_vector_edit@@Base>:
   1679c:	ldr	r0, [r0, #16]
   167a0:	bx	lr

000167a4 <flatcc_builder_create_offset_vector_direct@@Base>:
   167a4:	mov	r3, #0
   167a8:	b	167ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   167ac:	push	{r4, r5, r6, r7, fp, lr}
   167b0:	add	fp, sp, #16
   167b4:	sub	sp, sp, #80	; 0x50
   167b8:	mov	r5, #0
   167bc:	cmn	r2, #-1073741823	; 0xc0000001
   167c0:	bhi	16920 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   167c4:	mov	r7, r0
   167c8:	ldrh	r0, [r0, #128]	; 0x80
   167cc:	sub	r6, fp, #20
   167d0:	mov	r4, #4
   167d4:	mov	ip, #1
   167d8:	cmp	r0, #3
   167dc:	movls	r0, #4
   167e0:	strhls	r0, [r7, #128]	; 0x80
   167e4:	str	r2, [fp, #-20]	; 0xffffffec
   167e8:	ldr	lr, [r7, #136]	; 0x88
   167ec:	str	r6, [sp, #12]
   167f0:	mov	r6, #0
   167f4:	str	r4, [sp, #4]
   167f8:	str	r4, [sp, #16]
   167fc:	str	ip, [sp, #8]
   16800:	cmp	r6, r2, lsl #2
   16804:	and	r5, lr, #3
   16808:	beq	16828 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   1680c:	lsl	r6, r2, #2
   16810:	mov	ip, #2
   16814:	str	r1, [sp, #20]
   16818:	add	r4, r6, #4
   1681c:	str	r6, [sp, #24]
   16820:	str	ip, [sp, #8]
   16824:	str	r4, [sp, #4]
   16828:	cmp	r5, #0
   1682c:	beq	16858 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16830:	add	r6, sp, #4
   16834:	movw	r0, #41436	; 0xa1dc
   16838:	add	r4, r4, r5
   1683c:	add	r6, r6, ip, lsl #3
   16840:	add	ip, ip, #1
   16844:	movt	r0, #1
   16848:	str	r4, [sp, #4]
   1684c:	str	r0, [r6, #8]
   16850:	str	r5, [r6, #12]
   16854:	str	ip, [sp, #8]
   16858:	cmp	r2, #0
   1685c:	beq	168e4 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   16860:	mvn	r0, #3
   16864:	cmp	r3, #0
   16868:	sub	r0, r0, lr
   1686c:	add	r0, r0, r4
   16870:	beq	168bc <flatcc_builder_create_offset_vector_direct@@Base+0x118>
   16874:	mov	r5, #0
   16878:	ldr	r6, [r1, r5, lsl #2]
   1687c:	cmp	r6, #0
   16880:	beq	1689c <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   16884:	add	r6, r0, r6
   16888:	str	r6, [r1, r5, lsl #2]
   1688c:	ldrb	r6, [r3, r5]
   16890:	cmp	r6, #0
   16894:	bne	168a8 <flatcc_builder_create_offset_vector_direct@@Base+0x104>
   16898:	b	1692c <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   1689c:	ldrb	r6, [r3, r5]
   168a0:	cmp	r6, #0
   168a4:	bne	1696c <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   168a8:	add	r5, r5, #1
   168ac:	sub	r0, r0, #4
   168b0:	cmp	r5, r2
   168b4:	bcc	16878 <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   168b8:	b	168e4 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   168bc:	mov	r3, #0
   168c0:	ldr	r5, [r1, r3, lsl #2]
   168c4:	cmp	r5, #0
   168c8:	beq	1694c <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   168cc:	add	r6, r0, r5
   168d0:	sub	r0, r0, #4
   168d4:	str	r6, [r1, r3, lsl #2]
   168d8:	add	r3, r3, #1
   168dc:	cmp	r3, r2
   168e0:	bcc	168c0 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   168e4:	cmp	r4, #0
   168e8:	ble	1698c <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   168ec:	ldr	r0, [r7, #136]	; 0x88
   168f0:	ldr	r6, [r7, #44]	; 0x2c
   168f4:	add	r1, sp, #4
   168f8:	mov	r2, ip
   168fc:	add	r1, r1, #8
   16900:	sub	r5, r0, r4
   16904:	ldr	r0, [r7, #36]	; 0x24
   16908:	str	r4, [sp]
   1690c:	mov	r3, r5
   16910:	blx	r6
   16914:	cmp	r0, #0
   16918:	bne	169ac <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   1691c:	str	r5, [r7, #136]	; 0x88
   16920:	mov	r0, r5
   16924:	sub	sp, fp, #16
   16928:	pop	{r4, r5, r6, r7, fp, pc}
   1692c:	movw	r0, #46472	; 0xb588
   16930:	movw	r1, #41966	; 0xa3ee
   16934:	movw	r3, #46486	; 0xb596
   16938:	movw	r2, #1457	; 0x5b1
   1693c:	movt	r0, #1
   16940:	movt	r1, #1
   16944:	movt	r3, #1
   16948:	bl	127a8 <__assert_fail@plt>
   1694c:	movw	r0, #46484	; 0xb594
   16950:	movw	r1, #41966	; 0xa3ee
   16954:	movw	r3, #46486	; 0xb596
   16958:	movw	r2, #1463	; 0x5b7
   1695c:	movt	r0, #1
   16960:	movt	r1, #1
   16964:	movt	r3, #1
   16968:	bl	127a8 <__assert_fail@plt>
   1696c:	movw	r0, #46617	; 0xb619
   16970:	movw	r1, #41966	; 0xa3ee
   16974:	movw	r3, #46486	; 0xb596
   16978:	movw	r2, #1461	; 0x5b5
   1697c:	movt	r0, #1
   16980:	movt	r1, #1
   16984:	movt	r3, #1
   16988:	bl	127a8 <__assert_fail@plt>
   1698c:	movw	r0, #46484	; 0xb594
   16990:	movw	r1, #41966	; 0xa3ee
   16994:	movw	r3, #46163	; 0xb453
   16998:	movw	r2, #647	; 0x287
   1699c:	movt	r0, #1
   169a0:	movt	r1, #1
   169a4:	movt	r3, #1
   169a8:	bl	127a8 <__assert_fail@plt>
   169ac:	movw	r0, #46484	; 0xb594
   169b0:	movw	r1, #41966	; 0xa3ee
   169b4:	movw	r3, #46163	; 0xb453
   169b8:	movw	r2, #651	; 0x28b
   169bc:	movt	r0, #1
   169c0:	movt	r1, #1
   169c4:	movt	r3, #1
   169c8:	bl	127a8 <__assert_fail@plt>

000169cc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   169cc:	push	{r4, r5, fp, lr}
   169d0:	add	fp, sp, #8
   169d4:	mov	r4, r0
   169d8:	ldr	r0, [r0, #32]
   169dc:	mov	r3, r1
   169e0:	ldrh	r1, [r0, #14]
   169e4:	cmp	r1, #5
   169e8:	bne	16a84 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   169ec:	ldr	r2, [r0, #20]
   169f0:	ldr	r1, [r4, #16]
   169f4:	mov	r0, r4
   169f8:	bl	167ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   169fc:	mov	r5, r0
   16a00:	cmp	r0, #0
   16a04:	beq	16a7c <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16a08:	ldr	r0, [r4, #16]
   16a0c:	ldr	r2, [r4, #20]
   16a10:	mov	r1, #0
   16a14:	bl	12778 <memset@plt>
   16a18:	ldr	r0, [r4, #32]
   16a1c:	ldr	r1, [r4, #60]	; 0x3c
   16a20:	ldr	ip, [r4, #64]	; 0x40
   16a24:	ldr	r3, [r0, #8]
   16a28:	str	r3, [r4, #20]
   16a2c:	ldr	r3, [r0]
   16a30:	str	r3, [r4, #28]
   16a34:	add	r1, r1, r3
   16a38:	ldr	r2, [r0, #4]
   16a3c:	str	r1, [r4, #16]
   16a40:	sub	r1, ip, r3
   16a44:	cmp	r1, r2
   16a48:	movhi	r1, r2
   16a4c:	str	r1, [r4, #24]
   16a50:	ldrh	r1, [r4, #130]	; 0x82
   16a54:	ldrh	r2, [r4, #128]	; 0x80
   16a58:	cmp	r2, r1
   16a5c:	strhcc	r1, [r4, #128]	; 0x80
   16a60:	ldrh	r1, [r0, #12]
   16a64:	sub	r0, r0, #36	; 0x24
   16a68:	str	r0, [r4, #32]
   16a6c:	strh	r1, [r4, #130]	; 0x82
   16a70:	ldr	r0, [r4, #156]	; 0x9c
   16a74:	sub	r0, r0, #1
   16a78:	str	r0, [r4, #156]	; 0x9c
   16a7c:	mov	r0, r5
   16a80:	pop	{r4, r5, fp, pc}
   16a84:	movw	r0, #43018	; 0xa80a
   16a88:	movw	r1, #41966	; 0xa3ee
   16a8c:	movw	r3, #44675	; 0xae83
   16a90:	movw	r2, #1493	; 0x5d5
   16a94:	movt	r0, #1
   16a98:	movt	r1, #1
   16a9c:	movt	r3, #1
   16aa0:	bl	127a8 <__assert_fail@plt>

00016aa4 <flatcc_builder_offset_vector_edit@@Base>:
   16aa4:	ldr	r0, [r0, #16]
   16aa8:	bx	lr

00016aac <flatcc_builder_offset_vector_count@@Base>:
   16aac:	ldr	r0, [r0, #32]
   16ab0:	ldr	r0, [r0, #20]
   16ab4:	bx	lr

00016ab8 <flatcc_builder_table_add_union@@Base>:
   16ab8:	push	{r4, r5, r6, r7, fp, lr}
   16abc:	add	fp, sp, #16
   16ac0:	mov	r5, r0
   16ac4:	ldr	r0, [r0, #32]
   16ac8:	ldrh	r0, [r0, #14]
   16acc:	cmp	r0, #3
   16ad0:	bne	16b58 <flatcc_builder_table_add_union@@Base+0xa0>
   16ad4:	mov	r7, r3
   16ad8:	mov	r4, r2
   16adc:	mov	r6, r1
   16ae0:	cmp	r3, #0
   16ae4:	beq	16af4 <flatcc_builder_table_add_union@@Base+0x3c>
   16ae8:	uxtb	r0, r4
   16aec:	cmp	r0, #0
   16af0:	beq	16b78 <flatcc_builder_table_add_union@@Base+0xc0>
   16af4:	cmp	r7, #0
   16af8:	beq	16b14 <flatcc_builder_table_add_union@@Base+0x5c>
   16afc:	mov	r0, r5
   16b00:	mov	r1, r6
   16b04:	bl	16bb8 <flatcc_builder_table_add_offset@@Base>
   16b08:	cmp	r0, #0
   16b0c:	beq	16b98 <flatcc_builder_table_add_union@@Base+0xe0>
   16b10:	str	r7, [r0]
   16b14:	sub	r1, r6, #1
   16b18:	mov	r0, r5
   16b1c:	mov	r2, #1
   16b20:	mov	r3, #1
   16b24:	bl	16d48 <flatcc_builder_table_add@@Base>
   16b28:	cmp	r0, #0
   16b2c:	strbne	r4, [r0]
   16b30:	movne	r0, #0
   16b34:	popne	{r4, r5, r6, r7, fp, pc}
   16b38:	movw	r0, #44921	; 0xaf79
   16b3c:	movw	r1, #41966	; 0xa3ee
   16b40:	movw	r3, #44789	; 0xaef5
   16b44:	movw	r2, #1526	; 0x5f6
   16b48:	movt	r0, #1
   16b4c:	movt	r1, #1
   16b50:	movt	r3, #1
   16b54:	bl	127a8 <__assert_fail@plt>
   16b58:	movw	r0, #44035	; 0xac03
   16b5c:	movw	r1, #41966	; 0xa3ee
   16b60:	movw	r3, #44789	; 0xaef5
   16b64:	movw	r2, #1518	; 0x5ee
   16b68:	movt	r0, #1
   16b6c:	movt	r1, #1
   16b70:	movt	r3, #1
   16b74:	bl	127a8 <__assert_fail@plt>
   16b78:	movw	r0, #44877	; 0xaf4d
   16b7c:	movw	r1, #41966	; 0xa3ee
   16b80:	movw	r3, #44789	; 0xaef5
   16b84:	movw	r2, #1519	; 0x5ef
   16b88:	movt	r0, #1
   16b8c:	movt	r1, #1
   16b90:	movt	r3, #1
   16b94:	bl	127a8 <__assert_fail@plt>
   16b98:	movw	r0, #44911	; 0xaf6f
   16b9c:	movw	r1, #41966	; 0xa3ee
   16ba0:	movw	r3, #44789	; 0xaef5
   16ba4:	movw	r2, #1522	; 0x5f2
   16ba8:	movt	r0, #1
   16bac:	movt	r1, #1
   16bb0:	movt	r3, #1
   16bb4:	bl	127a8 <__assert_fail@plt>

00016bb8 <flatcc_builder_table_add_offset@@Base>:
   16bb8:	push	{r4, r5, r6, r7, fp, lr}
   16bbc:	add	fp, sp, #16
   16bc0:	sub	sp, sp, #8
   16bc4:	mov	r4, r0
   16bc8:	ldr	r0, [r0, #32]
   16bcc:	ldrh	r0, [r0, #14]
   16bd0:	cmp	r0, #3
   16bd4:	bne	16ce8 <flatcc_builder_table_add_offset@@Base+0x130>
   16bd8:	movw	r0, #32765	; 0x7ffd
   16bdc:	mov	r5, r1
   16be0:	cmp	r1, r0
   16be4:	bcs	16d08 <flatcc_builder_table_add_offset@@Base+0x150>
   16be8:	ldr	r0, [r4, #4]
   16bec:	add	r1, r0, r5, lsl #1
   16bf0:	ldrh	r1, [r1]
   16bf4:	cmp	r1, #0
   16bf8:	bne	16d28 <flatcc_builder_table_add_offset@@Base+0x170>
   16bfc:	ldr	r2, [r4, #20]
   16c00:	ldr	r1, [r4, #12]
   16c04:	ldr	r3, [r4, #24]
   16c08:	add	r2, r2, #3
   16c0c:	eor	r1, r1, r5
   16c10:	bic	r6, r2, #3
   16c14:	movw	r2, #31153	; 0x79b1
   16c18:	movt	r2, #40503	; 0x9e37
   16c1c:	add	r7, r6, #4
   16c20:	mul	r1, r1, r2
   16c24:	cmp	r7, r3
   16c28:	str	r7, [r4, #20]
   16c2c:	eor	r1, r1, #4
   16c30:	mul	r1, r1, r2
   16c34:	str	r1, [r4, #12]
   16c38:	bls	16cac <flatcc_builder_table_add_offset@@Base+0xf4>
   16c3c:	ldr	r1, [r4, #28]
   16c40:	ldr	r0, [r4, #40]	; 0x28
   16c44:	ldr	ip, [r4, #48]	; 0x30
   16c48:	mov	r2, #1
   16c4c:	mov	r3, #1
   16c50:	str	r2, [sp]
   16c54:	add	r2, r1, r7
   16c58:	add	r1, r4, #60	; 0x3c
   16c5c:	blx	ip
   16c60:	mov	r1, r0
   16c64:	mov	r0, #0
   16c68:	cmp	r1, #0
   16c6c:	beq	16c78 <flatcc_builder_table_add_offset@@Base+0xc0>
   16c70:	sub	sp, fp, #16
   16c74:	pop	{r4, r5, r6, r7, fp, pc}
   16c78:	ldr	r0, [r4, #28]
   16c7c:	ldr	r2, [r4, #60]	; 0x3c
   16c80:	ldr	r3, [r4, #64]	; 0x40
   16c84:	ldr	r1, [r4, #32]
   16c88:	add	r2, r2, r0
   16c8c:	sub	r0, r3, r0
   16c90:	str	r2, [r4, #16]
   16c94:	movw	r2, #65532	; 0xfffc
   16c98:	cmp	r0, r2
   16c9c:	movcs	r0, r2
   16ca0:	str	r0, [r4, #24]
   16ca4:	str	r2, [r1, #4]
   16ca8:	ldr	r0, [r4, #4]
   16cac:	uxth	r1, r5
   16cb0:	add	r0, r0, r1, lsl #1
   16cb4:	strh	r7, [r0]
   16cb8:	ldrh	r0, [r4, #8]
   16cbc:	cmp	r0, r1
   16cc0:	addls	r0, r5, #1
   16cc4:	strhls	r0, [r4, #8]
   16cc8:	ldr	r0, [r4]
   16ccc:	add	r1, r0, #2
   16cd0:	str	r1, [r4]
   16cd4:	strh	r6, [r0]
   16cd8:	ldr	r0, [r4, #16]
   16cdc:	add	r0, r0, r6
   16ce0:	sub	sp, fp, #16
   16ce4:	pop	{r4, r5, r6, r7, fp, pc}
   16ce8:	movw	r0, #44035	; 0xac03
   16cec:	movw	r1, #41966	; 0xa3ee
   16cf0:	movw	r3, #45815	; 0xb2f7
   16cf4:	movw	r2, #1811	; 0x713
   16cf8:	movt	r0, #1
   16cfc:	movt	r1, #1
   16d00:	movt	r3, #1
   16d04:	bl	127a8 <__assert_fail@plt>
   16d08:	movw	r0, #45687	; 0xb277
   16d0c:	movw	r1, #41966	; 0xa3ee
   16d10:	movw	r3, #45815	; 0xb2f7
   16d14:	movw	r2, #1812	; 0x714
   16d18:	movt	r0, #1
   16d1c:	movt	r1, #1
   16d20:	movt	r3, #1
   16d24:	bl	127a8 <__assert_fail@plt>
   16d28:	movw	r0, #46484	; 0xb594
   16d2c:	movw	r1, #41966	; 0xa3ee
   16d30:	movw	r3, #45815	; 0xb2f7
   16d34:	movw	r2, #1819	; 0x71b
   16d38:	movt	r0, #1
   16d3c:	movt	r1, #1
   16d40:	movt	r3, #1
   16d44:	bl	127a8 <__assert_fail@plt>

00016d48 <flatcc_builder_table_add@@Base>:
   16d48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d4c:	add	fp, sp, #24
   16d50:	sub	sp, sp, #8
   16d54:	mov	r4, r0
   16d58:	ldr	r0, [r0, #32]
   16d5c:	ldrh	r0, [r0, #14]
   16d60:	cmp	r0, #3
   16d64:	bne	16e84 <flatcc_builder_table_add@@Base+0x13c>
   16d68:	movw	r0, #32765	; 0x7ffd
   16d6c:	mov	r8, r1
   16d70:	cmp	r1, r0
   16d74:	bcs	16ea4 <flatcc_builder_table_add@@Base+0x15c>
   16d78:	ldrh	r0, [r4, #130]	; 0x82
   16d7c:	cmp	r0, r3
   16d80:	strhcc	r3, [r4, #130]	; 0x82
   16d84:	ldr	r0, [r4, #4]
   16d88:	add	r1, r0, r8, lsl #1
   16d8c:	ldrh	r1, [r1]
   16d90:	cmp	r1, #0
   16d94:	bne	16ec4 <flatcc_builder_table_add@@Base+0x17c>
   16d98:	ldr	r1, [r4, #12]
   16d9c:	movw	r7, #31153	; 0x79b1
   16da0:	ldr	r6, [r4, #20]
   16da4:	ldr	r5, [r4, #24]
   16da8:	movt	r7, #40503	; 0x9e37
   16dac:	eor	r1, r1, r8
   16db0:	mul	r1, r1, r7
   16db4:	eor	r1, r1, r2
   16db8:	mul	r1, r1, r7
   16dbc:	str	r1, [r4, #12]
   16dc0:	add	r1, r3, r6
   16dc4:	rsb	r3, r3, #0
   16dc8:	sub	r1, r1, #1
   16dcc:	and	r6, r1, r3
   16dd0:	add	r1, r6, r2
   16dd4:	cmp	r1, r5
   16dd8:	str	r1, [r4, #20]
   16ddc:	bcc	16e54 <flatcc_builder_table_add@@Base+0x10c>
   16de0:	ldr	r2, [r4, #28]
   16de4:	ldr	r0, [r4, #40]	; 0x28
   16de8:	ldr	r7, [r4, #48]	; 0x30
   16dec:	mov	r3, #1
   16df0:	str	r3, [sp]
   16df4:	mov	r3, #1
   16df8:	add	r1, r1, r2
   16dfc:	add	r2, r1, #1
   16e00:	add	r1, r4, #60	; 0x3c
   16e04:	blx	r7
   16e08:	mov	r1, r0
   16e0c:	mov	r0, #0
   16e10:	cmp	r1, #0
   16e14:	beq	16e20 <flatcc_builder_table_add@@Base+0xd8>
   16e18:	sub	sp, fp, #24
   16e1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e20:	ldr	r0, [r4, #28]
   16e24:	ldr	r2, [r4, #60]	; 0x3c
   16e28:	ldr	r3, [r4, #64]	; 0x40
   16e2c:	ldr	r1, [r4, #32]
   16e30:	add	r2, r2, r0
   16e34:	sub	r0, r3, r0
   16e38:	str	r2, [r4, #16]
   16e3c:	movw	r2, #65532	; 0xfffc
   16e40:	cmp	r0, r2
   16e44:	movcs	r0, r2
   16e48:	str	r0, [r4, #24]
   16e4c:	str	r2, [r1, #4]
   16e50:	ldr	r0, [r4, #4]
   16e54:	uxth	r1, r8
   16e58:	add	r2, r6, #4
   16e5c:	add	r0, r0, r1, lsl #1
   16e60:	strh	r2, [r0]
   16e64:	ldrh	r0, [r4, #8]
   16e68:	cmp	r0, r1
   16e6c:	addls	r0, r8, #1
   16e70:	strhls	r0, [r4, #8]
   16e74:	ldr	r0, [r4, #16]
   16e78:	add	r0, r0, r6
   16e7c:	sub	sp, fp, #24
   16e80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e84:	movw	r0, #44035	; 0xac03
   16e88:	movw	r1, #41966	; 0xa3ee
   16e8c:	movw	r3, #45613	; 0xb22d
   16e90:	movw	r2, #1773	; 0x6ed
   16e94:	movt	r0, #1
   16e98:	movt	r1, #1
   16e9c:	movt	r3, #1
   16ea0:	bl	127a8 <__assert_fail@plt>
   16ea4:	movw	r0, #45687	; 0xb277
   16ea8:	movw	r1, #41966	; 0xa3ee
   16eac:	movw	r3, #45613	; 0xb22d
   16eb0:	movw	r2, #1774	; 0x6ee
   16eb4:	movt	r0, #1
   16eb8:	movt	r1, #1
   16ebc:	movt	r3, #1
   16ec0:	bl	127a8 <__assert_fail@plt>
   16ec4:	movw	r0, #46484	; 0xb594
   16ec8:	movw	r1, #41966	; 0xa3ee
   16ecc:	movw	r3, #45613	; 0xb22d
   16ed0:	movw	r2, #1784	; 0x6f8
   16ed4:	movt	r0, #1
   16ed8:	movt	r1, #1
   16edc:	movt	r3, #1
   16ee0:	bl	127a8 <__assert_fail@plt>

00016ee4 <flatcc_builder_table_add_union_vector@@Base>:
   16ee4:	push	{r4, r5, r6, r7, fp, lr}
   16ee8:	add	fp, sp, #16
   16eec:	mov	r6, r0
   16ef0:	ldr	r0, [r0, #32]
   16ef4:	ldrh	r0, [r0, #14]
   16ef8:	cmp	r0, #3
   16efc:	bne	16f64 <flatcc_builder_table_add_union_vector@@Base+0x80>
   16f00:	clz	r0, r3
   16f04:	mov	r5, r1
   16f08:	clz	r1, r2
   16f0c:	mov	r4, r3
   16f10:	mov	r7, r2
   16f14:	lsr	r0, r0, #5
   16f18:	lsr	r1, r1, #5
   16f1c:	cmp	r1, r0
   16f20:	bne	16f84 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   16f24:	cmp	r7, #0
   16f28:	beq	16f5c <flatcc_builder_table_add_union_vector@@Base+0x78>
   16f2c:	sub	r1, r5, #1
   16f30:	mov	r0, r6
   16f34:	bl	16bb8 <flatcc_builder_table_add_offset@@Base>
   16f38:	cmp	r0, #0
   16f3c:	beq	16fa4 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   16f40:	str	r7, [r0]
   16f44:	mov	r0, r6
   16f48:	mov	r1, r5
   16f4c:	bl	16bb8 <flatcc_builder_table_add_offset@@Base>
   16f50:	cmp	r0, #0
   16f54:	beq	16fc4 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16f58:	str	r4, [r0]
   16f5c:	mov	r0, #0
   16f60:	pop	{r4, r5, r6, r7, fp, pc}
   16f64:	movw	r0, #44035	; 0xac03
   16f68:	movw	r1, #41966	; 0xa3ee
   16f6c:	movw	r3, #44933	; 0xaf85
   16f70:	mov	r2, #1536	; 0x600
   16f74:	movt	r0, #1
   16f78:	movt	r1, #1
   16f7c:	movt	r3, #1
   16f80:	bl	127a8 <__assert_fail@plt>
   16f84:	movw	r0, #45032	; 0xafe8
   16f88:	movw	r1, #41966	; 0xa3ee
   16f8c:	movw	r3, #44933	; 0xaf85
   16f90:	movw	r2, #1537	; 0x601
   16f94:	movt	r0, #1
   16f98:	movt	r1, #1
   16f9c:	movt	r3, #1
   16fa0:	bl	127a8 <__assert_fail@plt>
   16fa4:	movw	r0, #44911	; 0xaf6f
   16fa8:	movw	r1, #41966	; 0xa3ee
   16fac:	movw	r3, #44933	; 0xaf85
   16fb0:	movw	r2, #1540	; 0x604
   16fb4:	movt	r0, #1
   16fb8:	movt	r1, #1
   16fbc:	movt	r3, #1
   16fc0:	bl	127a8 <__assert_fail@plt>
   16fc4:	movw	r0, #44911	; 0xaf6f
   16fc8:	movw	r1, #41966	; 0xa3ee
   16fcc:	movw	r3, #44933	; 0xaf85
   16fd0:	movw	r2, #1544	; 0x608
   16fd4:	movt	r0, #1
   16fd8:	movt	r1, #1
   16fdc:	movt	r3, #1
   16fe0:	bl	127a8 <__assert_fail@plt>

00016fe4 <flatcc_builder_create_union_vector@@Base>:
   16fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fe8:	add	fp, sp, #28
   16fec:	sub	sp, sp, #12
   16ff0:	mov	r7, #0
   16ff4:	mov	r4, r1
   16ff8:	mov	r5, r0
   16ffc:	mov	sl, r3
   17000:	mov	r9, r2
   17004:	mov	r6, #4
   17008:	str	r7, [r0]
   1700c:	str	r7, [r0, #4]
   17010:	mov	r0, r1
   17014:	mov	r1, #4
   17018:	bl	1449c <flatcc_builder_start_buffer@@Base+0xbc>
   1701c:	cmp	r0, #0
   17020:	beq	1702c <flatcc_builder_create_union_vector@@Base+0x48>
   17024:	sub	sp, fp, #28
   17028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1702c:	ldr	r0, [r4, #32]
   17030:	mov	r1, #5
   17034:	str	r6, [r0, #16]
   17038:	ldr	r0, [r4, #32]
   1703c:	str	r7, [r0, #20]
   17040:	ldr	r0, [r4, #32]
   17044:	strh	r1, [r0, #14]
   17048:	ldr	r1, [r4, #28]
   1704c:	ldr	r2, [r4, #60]	; 0x3c
   17050:	ldr	r3, [r4, #64]	; 0x40
   17054:	add	r2, r2, r1
   17058:	sub	r1, r3, r1
   1705c:	str	r2, [r4, #16]
   17060:	mvn	r2, #3
   17064:	cmn	r1, #4
   17068:	movcs	r1, r2
   1706c:	str	r1, [r4, #24]
   17070:	str	r2, [r0, #4]
   17074:	ldr	r1, [r0, #20]
   17078:	adds	r1, r1, sl
   1707c:	cmpcc	r1, #1073741824	; 0x40000000
   17080:	bcc	170a4 <flatcc_builder_create_union_vector@@Base+0xc0>
   17084:	movw	r0, #46237	; 0xb49d
   17088:	movw	r1, #41966	; 0xa3ee
   1708c:	movw	r3, #46264	; 0xb4b8
   17090:	mov	r2, #892	; 0x37c
   17094:	movt	r0, #1
   17098:	movt	r1, #1
   1709c:	movt	r3, #1
   170a0:	bl	127a8 <__assert_fail@plt>
   170a4:	str	r1, [r0, #20]
   170a8:	ldr	r7, [r4, #20]
   170ac:	ldr	r0, [r4, #24]
   170b0:	add	r1, r7, sl, lsl #2
   170b4:	cmp	r1, r0
   170b8:	str	r1, [r4, #20]
   170bc:	bcs	170d0 <flatcc_builder_create_union_vector@@Base+0xec>
   170c0:	ldr	r1, [r4, #16]
   170c4:	adds	r2, r1, r7
   170c8:	bne	17138 <flatcc_builder_create_union_vector@@Base+0x154>
   170cc:	b	17024 <flatcc_builder_create_union_vector@@Base+0x40>
   170d0:	ldr	r2, [r4, #28]
   170d4:	ldr	r0, [r4, #40]	; 0x28
   170d8:	ldr	r6, [r4, #48]	; 0x30
   170dc:	mov	r3, #1
   170e0:	str	r3, [sp]
   170e4:	mov	r3, #1
   170e8:	add	r1, r1, r2
   170ec:	add	r2, r1, #1
   170f0:	add	r1, r4, #60	; 0x3c
   170f4:	blx	r6
   170f8:	cmp	r0, #0
   170fc:	bne	17024 <flatcc_builder_create_union_vector@@Base+0x40>
   17100:	ldr	r0, [r4, #28]
   17104:	ldr	r1, [r4, #60]	; 0x3c
   17108:	ldr	r3, [r4, #64]	; 0x40
   1710c:	ldr	r2, [r4, #32]
   17110:	add	r1, r1, r0
   17114:	sub	r0, r3, r0
   17118:	mvn	r3, #3
   1711c:	cmn	r0, #4
   17120:	str	r1, [r4, #16]
   17124:	movcs	r0, r3
   17128:	str	r0, [r4, #24]
   1712c:	str	r3, [r2, #4]
   17130:	adds	r2, r1, r7
   17134:	beq	17024 <flatcc_builder_create_union_vector@@Base+0x40>
   17138:	ldr	r7, [r4, #20]
   1713c:	add	r2, r7, sl
   17140:	cmp	r2, r0
   17144:	str	r2, [r4, #20]
   17148:	bcc	171ac <flatcc_builder_create_union_vector@@Base+0x1c8>
   1714c:	ldr	r1, [r4, #28]
   17150:	ldr	r0, [r4, #40]	; 0x28
   17154:	ldr	r6, [r4, #48]	; 0x30
   17158:	mov	r3, #1
   1715c:	str	r3, [sp]
   17160:	mov	r3, #1
   17164:	add	r1, r2, r1
   17168:	add	r2, r1, #1
   1716c:	add	r1, r4, #60	; 0x3c
   17170:	blx	r6
   17174:	cmp	r0, #0
   17178:	bne	17024 <flatcc_builder_create_union_vector@@Base+0x40>
   1717c:	ldr	r0, [r4, #28]
   17180:	ldr	r1, [r4, #60]	; 0x3c
   17184:	ldr	r3, [r4, #64]	; 0x40
   17188:	ldr	r2, [r4, #32]
   1718c:	add	r1, r1, r0
   17190:	sub	r0, r3, r0
   17194:	mvn	r3, #3
   17198:	cmn	r0, #4
   1719c:	str	r1, [r4, #16]
   171a0:	movcs	r0, r3
   171a4:	str	r0, [r4, #24]
   171a8:	str	r3, [r2, #4]
   171ac:	adds	r8, r1, r7
   171b0:	beq	17024 <flatcc_builder_create_union_vector@@Base+0x40>
   171b4:	cmp	sl, #0
   171b8:	beq	171e8 <flatcc_builder_create_union_vector@@Base+0x204>
   171bc:	add	r0, r9, #4
   171c0:	mov	r2, sl
   171c4:	mov	r3, r1
   171c8:	mov	r7, r8
   171cc:	ldrb	r6, [r0, #-4]
   171d0:	subs	r2, r2, #1
   171d4:	strb	r6, [r7], #1
   171d8:	ldr	r6, [r0]
   171dc:	add	r0, r0, #8
   171e0:	str	r6, [r3], #4
   171e4:	bne	171cc <flatcc_builder_create_union_vector@@Base+0x1e8>
   171e8:	mov	r0, r4
   171ec:	mov	r2, sl
   171f0:	mov	r3, r8
   171f4:	bl	167ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   171f8:	mov	r7, r0
   171fc:	mov	r9, #0
   17200:	cmp	r0, #0
   17204:	beq	17230 <flatcc_builder_create_union_vector@@Base+0x24c>
   17208:	mvn	r0, #0
   1720c:	mov	r1, #1
   17210:	mov	r2, sl
   17214:	mov	r3, #1
   17218:	str	r1, [sp]
   1721c:	str	r0, [sp, #4]
   17220:	mov	r0, r4
   17224:	mov	r1, r8
   17228:	bl	16548 <flatcc_builder_create_vector@@Base>
   1722c:	b	17234 <flatcc_builder_create_union_vector@@Base+0x250>
   17230:	mov	r0, #0
   17234:	orr	r1, r9, r7
   17238:	stm	r5, {r0, r1}
   1723c:	mov	r1, #0
   17240:	ldr	r0, [r4, #16]
   17244:	ldr	r2, [r4, #20]
   17248:	bl	12778 <memset@plt>
   1724c:	ldr	r0, [r4, #32]
   17250:	ldr	r1, [r4, #60]	; 0x3c
   17254:	ldr	r2, [r4, #64]	; 0x40
   17258:	ldr	r3, [r0, #8]
   1725c:	str	r3, [r4, #20]
   17260:	ldr	r3, [r0]
   17264:	str	r3, [r4, #28]
   17268:	add	r1, r1, r3
   1726c:	ldr	r7, [r0, #4]
   17270:	str	r1, [r4, #16]
   17274:	sub	r1, r2, r3
   17278:	cmp	r1, r7
   1727c:	movhi	r1, r7
   17280:	str	r1, [r4, #24]
   17284:	ldrh	r1, [r4, #130]	; 0x82
   17288:	ldrh	r2, [r4, #128]	; 0x80
   1728c:	cmp	r2, r1
   17290:	strhcc	r1, [r4, #128]	; 0x80
   17294:	ldrh	r1, [r0, #12]
   17298:	sub	r0, r0, #36	; 0x24
   1729c:	str	r0, [r4, #32]
   172a0:	strh	r1, [r4, #130]	; 0x82
   172a4:	ldr	r0, [r4, #156]	; 0x9c
   172a8:	sub	r0, r0, #1
   172ac:	str	r0, [r4, #156]	; 0x9c
   172b0:	sub	sp, fp, #28
   172b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000172b8 <flatcc_builder_create_union_vector_direct@@Base>:
   172b8:	push	{r4, r5, r6, r7, fp, lr}
   172bc:	add	fp, sp, #16
   172c0:	sub	sp, sp, #8
   172c4:	ldr	r7, [fp, #8]
   172c8:	mov	r5, r2
   172cc:	mov	r4, r0
   172d0:	mov	r0, #0
   172d4:	mov	r6, r1
   172d8:	str	r0, [r4]
   172dc:	str	r0, [r4, #4]
   172e0:	mov	r0, r1
   172e4:	mov	r1, r3
   172e8:	mov	r3, r5
   172ec:	mov	r2, r7
   172f0:	bl	167ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   172f4:	cmp	r0, #0
   172f8:	str	r0, [r4, #4]
   172fc:	beq	17328 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   17300:	mvn	r0, #0
   17304:	mov	r1, #1
   17308:	mov	r2, r7
   1730c:	mov	r3, #1
   17310:	str	r1, [sp]
   17314:	str	r0, [sp, #4]
   17318:	mov	r0, r6
   1731c:	mov	r1, r5
   17320:	bl	16548 <flatcc_builder_create_vector@@Base>
   17324:	str	r0, [r4]
   17328:	sub	sp, fp, #16
   1732c:	pop	{r4, r5, r6, r7, fp, pc}

00017330 <flatcc_builder_start_union_vector@@Base>:
   17330:	push	{r4, sl, fp, lr}
   17334:	add	fp, sp, #8
   17338:	mov	r1, #4
   1733c:	mov	r4, r0
   17340:	bl	1449c <flatcc_builder_start_buffer@@Base+0xbc>
   17344:	mov	r1, r0
   17348:	mvn	r0, #0
   1734c:	cmp	r1, #0
   17350:	popne	{r4, sl, fp, pc}
   17354:	ldr	r0, [r4, #32]
   17358:	mov	r1, #8
   1735c:	mov	r2, #7
   17360:	str	r1, [r0, #16]
   17364:	mov	r0, #0
   17368:	ldr	r1, [r4, #32]
   1736c:	str	r0, [r1, #20]
   17370:	ldr	r1, [r4, #32]
   17374:	strh	r2, [r1, #14]
   17378:	ldr	r2, [r4, #28]
   1737c:	ldr	r3, [r4, #60]	; 0x3c
   17380:	ldr	ip, [r4, #64]	; 0x40
   17384:	add	r3, r3, r2
   17388:	sub	r2, ip, r2
   1738c:	str	r3, [r4, #16]
   17390:	mvn	r3, #3
   17394:	cmn	r2, #4
   17398:	movcs	r2, r3
   1739c:	str	r2, [r4, #24]
   173a0:	str	r3, [r1, #4]
   173a4:	pop	{r4, sl, fp, pc}

000173a8 <flatcc_builder_end_union_vector@@Base>:
   173a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173ac:	add	fp, sp, #28
   173b0:	sub	sp, sp, #12
   173b4:	mov	sl, r0
   173b8:	mov	r0, #0
   173bc:	mov	r4, r1
   173c0:	str	r0, [sl]
   173c4:	str	r0, [sl, #4]
   173c8:	ldr	r0, [r1, #32]
   173cc:	ldrh	r1, [r0, #14]
   173d0:	cmp	r1, #7
   173d4:	bne	1757c <flatcc_builder_end_union_vector@@Base+0x1d4>
   173d8:	ldr	r6, [r0, #20]
   173dc:	ldr	r7, [r4, #20]
   173e0:	ldr	r2, [r4, #24]
   173e4:	add	r0, r6, r6, lsl #2
   173e8:	add	r1, r7, r0
   173ec:	cmp	r1, r2
   173f0:	str	r1, [r4, #20]
   173f4:	bcs	17484 <flatcc_builder_end_union_vector@@Base+0xdc>
   173f8:	ldr	r0, [r4, #16]
   173fc:	adds	r1, r0, r7
   17400:	beq	174ec <flatcc_builder_end_union_vector@@Base+0x144>
   17404:	add	r8, r1, r6, lsl #2
   17408:	cmp	r6, #0
   1740c:	beq	1743c <flatcc_builder_end_union_vector@@Base+0x94>
   17410:	add	r0, r0, #4
   17414:	mov	r2, r6
   17418:	mov	r3, r1
   1741c:	mov	r7, r8
   17420:	ldrb	r5, [r0, #-4]
   17424:	subs	r2, r2, #1
   17428:	strb	r5, [r7], #1
   1742c:	ldr	r5, [r0]
   17430:	add	r0, r0, #8
   17434:	str	r5, [r3], #4
   17438:	bne	17420 <flatcc_builder_end_union_vector@@Base+0x78>
   1743c:	mov	r0, r4
   17440:	mov	r2, r6
   17444:	mov	r3, r8
   17448:	bl	167ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1744c:	mov	r7, r0
   17450:	mov	r9, #0
   17454:	cmp	r0, #0
   17458:	beq	174f4 <flatcc_builder_end_union_vector@@Base+0x14c>
   1745c:	mvn	r0, #0
   17460:	mov	r1, #1
   17464:	mov	r2, r6
   17468:	mov	r3, #1
   1746c:	str	r1, [sp]
   17470:	str	r0, [sp, #4]
   17474:	mov	r0, r4
   17478:	mov	r1, r8
   1747c:	bl	16548 <flatcc_builder_create_vector@@Base>
   17480:	b	174f8 <flatcc_builder_end_union_vector@@Base+0x150>
   17484:	ldr	r2, [r4, #28]
   17488:	ldr	r0, [r4, #40]	; 0x28
   1748c:	ldr	r5, [r4, #48]	; 0x30
   17490:	mov	r3, #1
   17494:	str	r3, [sp]
   17498:	mov	r3, #1
   1749c:	add	r1, r1, r2
   174a0:	add	r2, r1, #1
   174a4:	add	r1, r4, #60	; 0x3c
   174a8:	blx	r5
   174ac:	cmp	r0, #0
   174b0:	bne	174ec <flatcc_builder_end_union_vector@@Base+0x144>
   174b4:	ldr	r1, [r4, #28]
   174b8:	ldr	r0, [r4, #60]	; 0x3c
   174bc:	ldr	r3, [r4, #64]	; 0x40
   174c0:	ldr	r2, [r4, #32]
   174c4:	add	r0, r0, r1
   174c8:	sub	r1, r3, r1
   174cc:	mvn	r3, #3
   174d0:	cmn	r1, #4
   174d4:	str	r0, [r4, #16]
   174d8:	movcs	r1, r3
   174dc:	str	r1, [r4, #24]
   174e0:	str	r3, [r2, #4]
   174e4:	adds	r1, r0, r7
   174e8:	bne	17404 <flatcc_builder_end_union_vector@@Base+0x5c>
   174ec:	sub	sp, fp, #28
   174f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174f4:	mov	r0, #0
   174f8:	orr	r1, r9, r7
   174fc:	stm	sl, {r0, r1}
   17500:	mov	r1, #0
   17504:	ldr	r0, [r4, #16]
   17508:	ldr	r2, [r4, #20]
   1750c:	bl	12778 <memset@plt>
   17510:	ldr	r0, [r4, #32]
   17514:	ldr	r1, [r4, #60]	; 0x3c
   17518:	ldr	r2, [r4, #64]	; 0x40
   1751c:	ldr	r3, [r0, #8]
   17520:	str	r3, [r4, #20]
   17524:	ldr	r3, [r0]
   17528:	str	r3, [r4, #28]
   1752c:	add	r1, r1, r3
   17530:	ldr	r7, [r0, #4]
   17534:	str	r1, [r4, #16]
   17538:	sub	r1, r2, r3
   1753c:	cmp	r1, r7
   17540:	movhi	r1, r7
   17544:	str	r1, [r4, #24]
   17548:	ldrh	r1, [r4, #130]	; 0x82
   1754c:	ldrh	r2, [r4, #128]	; 0x80
   17550:	cmp	r2, r1
   17554:	strhcc	r1, [r4, #128]	; 0x80
   17558:	ldrh	r1, [r0, #12]
   1755c:	sub	r0, r0, #36	; 0x24
   17560:	str	r0, [r4, #32]
   17564:	strh	r1, [r4, #130]	; 0x82
   17568:	ldr	r0, [r4, #156]	; 0x9c
   1756c:	sub	r0, r0, #1
   17570:	str	r0, [r4, #156]	; 0x9c
   17574:	sub	sp, fp, #28
   17578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1757c:	movw	r0, #45072	; 0xb010
   17580:	movw	r1, #41966	; 0xa3ee
   17584:	movw	r3, #45122	; 0xb042
   17588:	movw	r2, #1617	; 0x651
   1758c:	movt	r0, #1
   17590:	movt	r1, #1
   17594:	movt	r3, #1
   17598:	bl	127a8 <__assert_fail@plt>

0001759c <flatcc_builder_union_vector_count@@Base>:
   1759c:	ldr	r0, [r0, #32]
   175a0:	ldr	r0, [r0, #20]
   175a4:	bx	lr

000175a8 <flatcc_builder_union_vector_edit@@Base>:
   175a8:	ldr	r0, [r0, #16]
   175ac:	bx	lr

000175b0 <flatcc_builder_extend_union_vector@@Base>:
   175b0:	push	{r4, r5, fp, lr}
   175b4:	add	fp, sp, #8
   175b8:	sub	sp, sp, #8
   175bc:	mov	r4, r0
   175c0:	ldr	r0, [r0, #32]
   175c4:	ldr	r2, [r0, #20]
   175c8:	adds	r2, r2, r1
   175cc:	cmpcc	r2, #536870912	; 0x20000000
   175d0:	bcc	175f4 <flatcc_builder_extend_union_vector@@Base+0x44>
   175d4:	movw	r0, #46237	; 0xb49d
   175d8:	movw	r1, #41966	; 0xa3ee
   175dc:	movw	r3, #46264	; 0xb4b8
   175e0:	mov	r2, #892	; 0x37c
   175e4:	movt	r0, #1
   175e8:	movt	r1, #1
   175ec:	movt	r3, #1
   175f0:	bl	127a8 <__assert_fail@plt>
   175f4:	str	r2, [r0, #20]
   175f8:	ldr	r5, [r4, #20]
   175fc:	ldr	r0, [r4, #24]
   17600:	add	r1, r5, r1, lsl #3
   17604:	cmp	r1, r0
   17608:	str	r1, [r4, #20]
   1760c:	bcs	17620 <flatcc_builder_extend_union_vector@@Base+0x70>
   17610:	ldr	r0, [r4, #16]
   17614:	add	r0, r0, r5
   17618:	sub	sp, fp, #8
   1761c:	pop	{r4, r5, fp, pc}
   17620:	ldr	r2, [r4, #28]
   17624:	ldr	r0, [r4, #40]	; 0x28
   17628:	ldr	ip, [r4, #48]	; 0x30
   1762c:	mov	r3, #1
   17630:	str	r3, [sp]
   17634:	mov	r3, #1
   17638:	add	r1, r1, r2
   1763c:	add	r2, r1, #1
   17640:	add	r1, r4, #60	; 0x3c
   17644:	blx	ip
   17648:	mov	r1, r0
   1764c:	mov	r0, #0
   17650:	cmp	r1, #0
   17654:	beq	17660 <flatcc_builder_extend_union_vector@@Base+0xb0>
   17658:	sub	sp, fp, #8
   1765c:	pop	{r4, r5, fp, pc}
   17660:	ldr	r1, [r4, #28]
   17664:	ldr	r0, [r4, #60]	; 0x3c
   17668:	ldr	r3, [r4, #64]	; 0x40
   1766c:	ldr	r2, [r4, #32]
   17670:	add	r0, r0, r1
   17674:	sub	r1, r3, r1
   17678:	mvn	r3, #3
   1767c:	cmn	r1, #4
   17680:	str	r0, [r4, #16]
   17684:	movcs	r1, r3
   17688:	str	r1, [r4, #24]
   1768c:	str	r3, [r2, #4]
   17690:	add	r0, r0, r5
   17694:	sub	sp, fp, #8
   17698:	pop	{r4, r5, fp, pc}

0001769c <flatcc_builder_truncate_union_vector@@Base>:
   1769c:	push	{fp, lr}
   176a0:	mov	fp, sp
   176a4:	ldr	r2, [r0, #32]
   176a8:	ldrh	r3, [r2, #14]
   176ac:	cmp	r3, #7
   176b0:	bne	176f8 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   176b4:	ldr	r3, [r2, #20]
   176b8:	cmp	r3, r1
   176bc:	bcc	17718 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   176c0:	sub	r3, r3, r1
   176c4:	str	r3, [r2, #20]
   176c8:	ldr	r2, [r0, #32]
   176cc:	ldr	r3, [r0, #20]
   176d0:	ldr	ip, [r0, #16]
   176d4:	ldr	r2, [r2, #16]
   176d8:	mls	r3, r2, r1, r3
   176dc:	mul	r2, r2, r1
   176e0:	mov	r1, #0
   176e4:	str	r3, [r0, #20]
   176e8:	add	r0, ip, r3
   176ec:	bl	12778 <memset@plt>
   176f0:	mov	r0, #0
   176f4:	pop	{fp, pc}
   176f8:	movw	r0, #45072	; 0xb010
   176fc:	movw	r1, #41966	; 0xa3ee
   17700:	movw	r3, #45205	; 0xb095
   17704:	movw	r2, #1665	; 0x681
   17708:	movt	r0, #1
   1770c:	movt	r1, #1
   17710:	movt	r3, #1
   17714:	bl	127a8 <__assert_fail@plt>
   17718:	movw	r0, #43636	; 0xaa74
   1771c:	movw	r1, #41966	; 0xa3ee
   17720:	movw	r3, #45205	; 0xb095
   17724:	movw	r2, #1666	; 0x682
   17728:	movt	r0, #1
   1772c:	movt	r1, #1
   17730:	movt	r3, #1
   17734:	bl	127a8 <__assert_fail@plt>

00017738 <flatcc_builder_union_vector_push@@Base>:
   17738:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1773c:	add	fp, sp, #24
   17740:	sub	sp, sp, #8
   17744:	mov	r7, r0
   17748:	ldr	r0, [r0, #32]
   1774c:	mov	r9, r1
   17750:	ldrh	r1, [r0, #14]
   17754:	cmp	r1, #7
   17758:	bne	17820 <flatcc_builder_union_vector_push@@Base+0xe8>
   1775c:	ldr	r1, [r0, #20]
   17760:	mov	r6, #0
   17764:	cmn	r1, #-536870911	; 0xe0000001
   17768:	beq	177c8 <flatcc_builder_union_vector_push@@Base+0x90>
   1776c:	add	r1, r1, #1
   17770:	mov	r8, r2
   17774:	str	r1, [r0, #20]
   17778:	ldr	r4, [r7, #20]
   1777c:	ldr	r0, [r7, #24]
   17780:	add	r1, r4, #8
   17784:	cmp	r1, r0
   17788:	str	r1, [r7, #20]
   1778c:	bcs	17798 <flatcc_builder_union_vector_push@@Base+0x60>
   17790:	ldr	r0, [r7, #16]
   17794:	b	17804 <flatcc_builder_union_vector_push@@Base+0xcc>
   17798:	ldr	r1, [r7, #28]
   1779c:	ldr	r0, [r7, #40]	; 0x28
   177a0:	ldr	r5, [r7, #48]	; 0x30
   177a4:	mov	r2, #1
   177a8:	mov	r3, #1
   177ac:	str	r2, [sp]
   177b0:	add	r1, r4, r1
   177b4:	add	r2, r1, #9
   177b8:	add	r1, r7, #60	; 0x3c
   177bc:	blx	r5
   177c0:	cmp	r0, #0
   177c4:	beq	177d4 <flatcc_builder_union_vector_push@@Base+0x9c>
   177c8:	mov	r0, r6
   177cc:	sub	sp, fp, #24
   177d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   177d4:	ldr	r1, [r7, #28]
   177d8:	ldr	r0, [r7, #60]	; 0x3c
   177dc:	ldr	r3, [r7, #64]	; 0x40
   177e0:	ldr	r2, [r7, #32]
   177e4:	add	r0, r0, r1
   177e8:	sub	r1, r3, r1
   177ec:	mvn	r3, #3
   177f0:	cmn	r1, #4
   177f4:	str	r0, [r7, #16]
   177f8:	movcs	r1, r3
   177fc:	str	r1, [r7, #24]
   17800:	str	r3, [r2, #4]
   17804:	adds	r0, r0, r4
   17808:	movne	r6, r0
   1780c:	strne	r9, [r0]
   17810:	strne	r8, [r0, #4]
   17814:	mov	r0, r6
   17818:	sub	sp, fp, #24
   1781c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17820:	movw	r0, #45072	; 0xb010
   17824:	movw	r1, #41966	; 0xa3ee
   17828:	movw	r3, #45274	; 0xb0da
   1782c:	movw	r2, #1677	; 0x68d
   17830:	movt	r0, #1
   17834:	movt	r1, #1
   17838:	movt	r3, #1
   1783c:	bl	127a8 <__assert_fail@plt>

00017840 <flatcc_builder_append_union_vector@@Base>:
   17840:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17844:	add	fp, sp, #24
   17848:	sub	sp, sp, #8
   1784c:	mov	r6, r0
   17850:	ldr	r0, [r0, #32]
   17854:	mov	r8, r1
   17858:	ldrh	r1, [r0, #14]
   1785c:	cmp	r1, #7
   17860:	bne	17964 <flatcc_builder_append_union_vector@@Base+0x124>
   17864:	ldr	r1, [r0, #20]
   17868:	mov	r5, r2
   1786c:	adds	r1, r1, r2
   17870:	cmpcc	r1, #536870912	; 0x20000000
   17874:	bcc	17898 <flatcc_builder_append_union_vector@@Base+0x58>
   17878:	movw	r0, #46237	; 0xb49d
   1787c:	movw	r1, #41966	; 0xa3ee
   17880:	movw	r3, #46264	; 0xb4b8
   17884:	mov	r2, #892	; 0x37c
   17888:	movt	r0, #1
   1788c:	movt	r1, #1
   17890:	movt	r3, #1
   17894:	bl	127a8 <__assert_fail@plt>
   17898:	str	r1, [r0, #20]
   1789c:	ldr	r4, [r6, #20]
   178a0:	ldr	r0, [r6, #24]
   178a4:	add	r1, r4, r5, lsl #3
   178a8:	cmp	r1, r0
   178ac:	str	r1, [r6, #20]
   178b0:	bcs	178dc <flatcc_builder_append_union_vector@@Base+0x9c>
   178b4:	ldr	r0, [r6, #16]
   178b8:	adds	r7, r0, r4
   178bc:	beq	17954 <flatcc_builder_append_union_vector@@Base+0x114>
   178c0:	lsl	r2, r5, #3
   178c4:	mov	r0, r7
   178c8:	mov	r1, r8
   178cc:	bl	12718 <memcpy@plt>
   178d0:	mov	r0, r7
   178d4:	sub	sp, fp, #24
   178d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178dc:	ldr	r2, [r6, #28]
   178e0:	ldr	r0, [r6, #40]	; 0x28
   178e4:	ldr	r7, [r6, #48]	; 0x30
   178e8:	mov	r3, #1
   178ec:	str	r3, [sp]
   178f0:	mov	r3, #1
   178f4:	add	r1, r1, r2
   178f8:	add	r2, r1, #1
   178fc:	add	r1, r6, #60	; 0x3c
   17900:	blx	r7
   17904:	mov	r7, #0
   17908:	cmp	r0, #0
   1790c:	beq	1791c <flatcc_builder_append_union_vector@@Base+0xdc>
   17910:	mov	r0, r7
   17914:	sub	sp, fp, #24
   17918:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1791c:	ldr	r1, [r6, #28]
   17920:	ldr	r0, [r6, #60]	; 0x3c
   17924:	ldr	r3, [r6, #64]	; 0x40
   17928:	ldr	r2, [r6, #32]
   1792c:	add	r0, r0, r1
   17930:	sub	r1, r3, r1
   17934:	mvn	r3, #3
   17938:	cmn	r1, #4
   1793c:	str	r0, [r6, #16]
   17940:	movcs	r1, r3
   17944:	str	r1, [r6, #24]
   17948:	str	r3, [r2, #4]
   1794c:	adds	r7, r0, r4
   17950:	bne	178c0 <flatcc_builder_append_union_vector@@Base+0x80>
   17954:	mov	r7, #0
   17958:	mov	r0, r7
   1795c:	sub	sp, fp, #24
   17960:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17964:	movw	r0, #45072	; 0xb010
   17968:	movw	r1, #41966	; 0xa3ee
   1796c:	movw	r3, #45383	; 0xb147
   17970:	movw	r2, #1692	; 0x69c
   17974:	movt	r0, #1
   17978:	movt	r1, #1
   1797c:	movt	r3, #1
   17980:	bl	127a8 <__assert_fail@plt>

00017984 <flatcc_builder_create_string@@Base>:
   17984:	push	{r4, r5, r6, sl, fp, lr}
   17988:	add	fp, sp, #16
   1798c:	sub	sp, sp, #80	; 0x50
   17990:	str	r2, [fp, #-20]	; 0xffffffec
   17994:	mvn	r5, r2
   17998:	mov	r6, r0
   1799c:	mov	r3, #1
   179a0:	cmp	r2, #0
   179a4:	ldr	ip, [r0, #136]	; 0x88
   179a8:	sub	r0, fp, #20
   179ac:	str	r0, [sp, #12]
   179b0:	mov	r0, #4
   179b4:	str	r0, [sp, #4]
   179b8:	str	r0, [sp, #16]
   179bc:	str	r3, [sp, #8]
   179c0:	add	r5, ip, r5
   179c4:	and	r5, r5, #3
   179c8:	add	r5, r5, #1
   179cc:	beq	179e8 <flatcc_builder_create_string@@Base+0x64>
   179d0:	mov	r3, #2
   179d4:	add	r0, r2, #4
   179d8:	str	r1, [sp, #20]
   179dc:	str	r2, [sp, #24]
   179e0:	str	r3, [sp, #8]
   179e4:	str	r0, [sp, #4]
   179e8:	movw	r2, #41436	; 0xa1dc
   179ec:	add	lr, sp, #4
   179f0:	add	r1, r0, r5
   179f4:	add	r0, lr, r3, lsl #3
   179f8:	movt	r2, #1
   179fc:	str	r1, [sp, #4]
   17a00:	cmp	r1, #0
   17a04:	str	r2, [r0, #8]
   17a08:	add	r2, r3, #1
   17a0c:	str	r5, [r0, #12]
   17a10:	str	r2, [sp, #8]
   17a14:	ble	17a68 <flatcc_builder_create_string@@Base+0xe4>
   17a18:	ldr	r0, [r6, #36]	; 0x24
   17a1c:	ldr	r4, [r6, #44]	; 0x2c
   17a20:	sub	r5, ip, r1
   17a24:	str	r1, [sp]
   17a28:	add	r1, lr, #8
   17a2c:	mov	r3, r5
   17a30:	blx	r4
   17a34:	cmp	r0, #0
   17a38:	streq	r5, [r6, #136]	; 0x88
   17a3c:	moveq	r0, r5
   17a40:	subeq	sp, fp, #16
   17a44:	popeq	{r4, r5, r6, sl, fp, pc}
   17a48:	movw	r0, #46484	; 0xb594
   17a4c:	movw	r1, #41966	; 0xa3ee
   17a50:	movw	r3, #46163	; 0xb453
   17a54:	movw	r2, #651	; 0x28b
   17a58:	movt	r0, #1
   17a5c:	movt	r1, #1
   17a60:	movt	r3, #1
   17a64:	bl	127a8 <__assert_fail@plt>
   17a68:	movw	r0, #46484	; 0xb594
   17a6c:	movw	r1, #41966	; 0xa3ee
   17a70:	movw	r3, #46163	; 0xb453
   17a74:	movw	r2, #647	; 0x287
   17a78:	movt	r0, #1
   17a7c:	movt	r1, #1
   17a80:	movt	r3, #1
   17a84:	bl	127a8 <__assert_fail@plt>

00017a88 <flatcc_builder_create_string_str@@Base>:
   17a88:	push	{r4, r5, fp, lr}
   17a8c:	add	fp, sp, #8
   17a90:	mov	r5, r0
   17a94:	mov	r0, r1
   17a98:	mov	r4, r1
   17a9c:	bl	12760 <strlen@plt>
   17aa0:	mov	r2, r0
   17aa4:	mov	r0, r5
   17aa8:	mov	r1, r4
   17aac:	pop	{r4, r5, fp, lr}
   17ab0:	b	17984 <flatcc_builder_create_string@@Base>

00017ab4 <flatcc_builder_create_string_strn@@Base>:
   17ab4:	push	{r4, r5, r6, sl, fp, lr}
   17ab8:	add	fp, sp, #16
   17abc:	mov	r6, r0
   17ac0:	mov	r5, r1
   17ac4:	mov	r0, r1
   17ac8:	mov	r1, #0
   17acc:	mov	r4, r2
   17ad0:	bl	12790 <memchr@plt>
   17ad4:	cmp	r0, #0
   17ad8:	mov	r1, r5
   17adc:	subne	r4, r0, r5
   17ae0:	mov	r0, r6
   17ae4:	mov	r2, r4
   17ae8:	pop	{r4, r5, r6, sl, fp, lr}
   17aec:	b	17984 <flatcc_builder_create_string@@Base>

00017af0 <flatcc_builder_end_string@@Base>:
   17af0:	push	{r4, r5, fp, lr}
   17af4:	add	fp, sp, #8
   17af8:	mov	r4, r0
   17afc:	ldr	r0, [r0, #32]
   17b00:	ldrh	r1, [r0, #14]
   17b04:	cmp	r1, #6
   17b08:	bne	17bb0 <flatcc_builder_end_string@@Base+0xc0>
   17b0c:	ldr	r2, [r0, #20]
   17b10:	ldr	r0, [r4, #20]
   17b14:	cmp	r2, r0
   17b18:	bne	17bd0 <flatcc_builder_end_string@@Base+0xe0>
   17b1c:	ldr	r1, [r4, #16]
   17b20:	mov	r0, r4
   17b24:	bl	17984 <flatcc_builder_create_string@@Base>
   17b28:	mov	r5, r0
   17b2c:	cmp	r0, #0
   17b30:	beq	17ba8 <flatcc_builder_end_string@@Base+0xb8>
   17b34:	ldr	r0, [r4, #16]
   17b38:	ldr	r2, [r4, #20]
   17b3c:	mov	r1, #0
   17b40:	bl	12778 <memset@plt>
   17b44:	ldr	r0, [r4, #32]
   17b48:	ldr	r1, [r4, #60]	; 0x3c
   17b4c:	ldr	ip, [r4, #64]	; 0x40
   17b50:	ldr	r3, [r0, #8]
   17b54:	str	r3, [r4, #20]
   17b58:	ldr	r3, [r0]
   17b5c:	str	r3, [r4, #28]
   17b60:	add	r1, r1, r3
   17b64:	ldr	r2, [r0, #4]
   17b68:	str	r1, [r4, #16]
   17b6c:	sub	r1, ip, r3
   17b70:	cmp	r1, r2
   17b74:	movhi	r1, r2
   17b78:	str	r1, [r4, #24]
   17b7c:	ldrh	r1, [r4, #130]	; 0x82
   17b80:	ldrh	r2, [r4, #128]	; 0x80
   17b84:	cmp	r2, r1
   17b88:	strhcc	r1, [r4, #128]	; 0x80
   17b8c:	ldrh	r1, [r0, #12]
   17b90:	sub	r0, r0, #36	; 0x24
   17b94:	str	r0, [r4, #32]
   17b98:	strh	r1, [r4, #130]	; 0x82
   17b9c:	ldr	r0, [r4, #156]	; 0x9c
   17ba0:	sub	r0, r0, #1
   17ba4:	str	r0, [r4, #156]	; 0x9c
   17ba8:	mov	r0, r5
   17bac:	pop	{r4, r5, fp, pc}
   17bb0:	movw	r0, #43283	; 0xa913
   17bb4:	movw	r1, #41966	; 0xa3ee
   17bb8:	movw	r3, #45510	; 0xb1c6
   17bbc:	movw	r2, #1732	; 0x6c4
   17bc0:	movt	r0, #1
   17bc4:	movt	r1, #1
   17bc8:	movt	r3, #1
   17bcc:	bl	127a8 <__assert_fail@plt>
   17bd0:	movw	r0, #45577	; 0xb209
   17bd4:	movw	r1, #41966	; 0xa3ee
   17bd8:	movw	r3, #45510	; 0xb1c6
   17bdc:	movw	r2, #1733	; 0x6c5
   17be0:	movt	r0, #1
   17be4:	movt	r1, #1
   17be8:	movt	r3, #1
   17bec:	bl	127a8 <__assert_fail@plt>

00017bf0 <flatcc_builder_string_edit@@Base>:
   17bf0:	ldr	r0, [r0, #16]
   17bf4:	bx	lr

00017bf8 <flatcc_builder_string_len@@Base>:
   17bf8:	ldr	r0, [r0, #32]
   17bfc:	ldr	r0, [r0, #20]
   17c00:	bx	lr

00017c04 <flatcc_builder_table_edit@@Base>:
   17c04:	ldr	r2, [r0, #32]
   17c08:	ldrh	r2, [r2, #14]
   17c0c:	cmp	r2, #3
   17c10:	ldreq	r2, [r0, #16]
   17c14:	ldreq	r0, [r0, #20]
   17c18:	addeq	r0, r2, r0
   17c1c:	subeq	r0, r0, r1
   17c20:	bxeq	lr
   17c24:	push	{fp, lr}
   17c28:	mov	fp, sp
   17c2c:	movw	r0, #44035	; 0xac03
   17c30:	movw	r1, #41966	; 0xa3ee
   17c34:	movw	r3, #45755	; 0xb2bb
   17c38:	movw	r2, #1794	; 0x702
   17c3c:	movt	r0, #1
   17c40:	movt	r1, #1
   17c44:	movt	r3, #1
   17c48:	bl	127a8 <__assert_fail@plt>

00017c4c <flatcc_builder_table_add_copy@@Base>:
   17c4c:	push	{r4, r5, r6, sl, fp, lr}
   17c50:	add	fp, sp, #16
   17c54:	mov	r4, r3
   17c58:	ldr	r3, [fp, #8]
   17c5c:	mov	r5, r2
   17c60:	mov	r2, r4
   17c64:	bl	16d48 <flatcc_builder_table_add@@Base>
   17c68:	mov	r6, r0
   17c6c:	cmp	r0, #0
   17c70:	beq	17c84 <flatcc_builder_table_add_copy@@Base+0x38>
   17c74:	mov	r0, r6
   17c78:	mov	r1, r5
   17c7c:	mov	r2, r4
   17c80:	bl	12718 <memcpy@plt>
   17c84:	mov	r0, r6
   17c88:	pop	{r4, r5, r6, sl, fp, pc}

00017c8c <flatcc_builder_push_buffer_alignment@@Base>:
   17c8c:	ldrh	r1, [r0, #128]	; 0x80
   17c90:	mov	r2, #4
   17c94:	strh	r2, [r0, #128]	; 0x80
   17c98:	mov	r0, r1
   17c9c:	bx	lr

00017ca0 <flatcc_builder_pop_buffer_alignment@@Base>:
   17ca0:	ldrh	r2, [r0, #128]	; 0x80
   17ca4:	cmp	r2, r1
   17ca8:	strhcc	r1, [r0, #128]	; 0x80
   17cac:	bx	lr

00017cb0 <flatcc_builder_get_buffer_alignment@@Base>:
   17cb0:	ldrh	r0, [r0, #128]	; 0x80
   17cb4:	bx	lr

00017cb8 <flatcc_builder_set_vtable_clustering@@Base>:
   17cb8:	clz	r1, r1
   17cbc:	lsr	r1, r1, #5
   17cc0:	str	r1, [r0, #180]	; 0xb4
   17cc4:	bx	lr

00017cc8 <flatcc_builder_set_block_align@@Base>:
   17cc8:	strh	r1, [r0, #132]	; 0x84
   17ccc:	bx	lr

00017cd0 <flatcc_builder_get_level@@Base>:
   17cd0:	ldr	r0, [r0, #156]	; 0x9c
   17cd4:	bx	lr

00017cd8 <flatcc_builder_set_max_level@@Base>:
   17cd8:	str	r1, [r0, #176]	; 0xb0
   17cdc:	ldr	r2, [r0, #160]	; 0xa0
   17ce0:	cmp	r2, r1
   17ce4:	strlt	r1, [r0, #160]	; 0xa0
   17ce8:	bx	lr

00017cec <flatcc_builder_get_buffer_size@@Base>:
   17cec:	ldr	r1, [r0, #136]	; 0x88
   17cf0:	ldr	r0, [r0, #140]	; 0x8c
   17cf4:	sub	r0, r0, r1
   17cf8:	bx	lr

00017cfc <flatcc_builder_get_buffer_start@@Base>:
   17cfc:	ldr	r0, [r0, #136]	; 0x88
   17d00:	bx	lr

00017d04 <flatcc_builder_get_buffer_end@@Base>:
   17d04:	ldr	r0, [r0, #140]	; 0x8c
   17d08:	bx	lr

00017d0c <flatcc_builder_set_vtable_cache_limit@@Base>:
   17d0c:	str	r1, [r0, #172]	; 0xac
   17d10:	bx	lr

00017d14 <flatcc_builder_set_identifier@@Base>:
   17d14:	movw	r2, #41436	; 0xa1dc
   17d18:	cmp	r1, #0
   17d1c:	movt	r2, #1
   17d20:	movne	r2, r1
   17d24:	ldr	r1, [r2]
   17d28:	str	r1, [r0, #168]	; 0xa8
   17d2c:	bx	lr

00017d30 <flatcc_builder_get_type@@Base>:
   17d30:	ldr	r0, [r0, #32]
   17d34:	cmp	r0, #0
   17d38:	ldrhne	r0, [r0, #14]
   17d3c:	moveq	r0, #0
   17d40:	bx	lr

00017d44 <flatcc_builder_get_type_at@@Base>:
   17d44:	mov	r2, r0
   17d48:	cmp	r1, #1
   17d4c:	mov	r0, #0
   17d50:	ldrge	r3, [r2, #156]	; 0x9c
   17d54:	cmpge	r3, r1
   17d58:	bge	17d60 <flatcc_builder_get_type_at@@Base+0x1c>
   17d5c:	bx	lr
   17d60:	sub	r0, r1, r3
   17d64:	ldr	r1, [r2, #32]
   17d68:	add	r0, r0, r0, lsl #3
   17d6c:	add	r0, r1, r0, lsl #2
   17d70:	ldrh	r0, [r0, #14]
   17d74:	bx	lr

00017d78 <flatcc_builder_get_direct_buffer@@Base>:
   17d78:	ldr	r2, [r0, #184]	; 0xb8
   17d7c:	cmp	r2, #0
   17d80:	beq	17dac <flatcc_builder_get_direct_buffer@@Base+0x34>
   17d84:	ldr	r2, [r0, #188]	; 0xbc
   17d88:	ldr	r3, [r0, #192]	; 0xc0
   17d8c:	cmp	r2, r3
   17d90:	beq	17dc4 <flatcc_builder_get_direct_buffer@@Base+0x4c>
   17d94:	cmp	r1, #0
   17d98:	moveq	r0, #0
   17d9c:	bxeq	lr
   17da0:	mov	r0, #0
   17da4:	str	r0, [r1]
   17da8:	bx	lr
   17dac:	cmp	r1, #0
   17db0:	moveq	r0, #0
   17db4:	bxeq	lr
   17db8:	mov	r0, #0
   17dbc:	str	r0, [r1]
   17dc0:	bx	lr
   17dc4:	cmp	r1, #0
   17dc8:	ldrne	r2, [r0, #212]	; 0xd4
   17dcc:	strne	r2, [r1]
   17dd0:	ldr	r0, [r0, #196]	; 0xc4
   17dd4:	bx	lr

00017dd8 <flatcc_builder_copy_buffer@@Base>:
   17dd8:	push	{fp, lr}
   17ddc:	mov	fp, sp
   17de0:	ldr	r3, [r0, #184]	; 0xb8
   17de4:	cmp	r3, #0
   17de8:	beq	17e1c <flatcc_builder_copy_buffer@@Base+0x44>
   17dec:	add	r0, r0, #188	; 0xbc
   17df0:	bl	18530 <flatcc_emitter_copy_buffer@@Base>
   17df4:	cmp	r0, #0
   17df8:	popne	{fp, pc}
   17dfc:	movw	r0, #42562	; 0xa642
   17e00:	movw	r1, #41966	; 0xa3ee
   17e04:	movw	r3, #45894	; 0xb346
   17e08:	movw	r2, #1926	; 0x786
   17e0c:	movt	r0, #1
   17e10:	movt	r1, #1
   17e14:	movt	r3, #1
   17e18:	bl	127a8 <__assert_fail@plt>
   17e1c:	mov	r0, #0
   17e20:	pop	{fp, pc}

00017e24 <flatcc_builder_finalize_buffer@@Base>:
   17e24:	push	{r4, r5, r6, sl, fp, lr}
   17e28:	add	fp, sp, #16
   17e2c:	mov	r5, r0
   17e30:	ldr	r0, [r0, #136]	; 0x88
   17e34:	cmp	r1, #0
   17e38:	ldr	r2, [r5, #140]	; 0x8c
   17e3c:	sub	r4, r2, r0
   17e40:	mov	r0, r4
   17e44:	strne	r4, [r1]
   17e48:	bl	1273c <malloc@plt>
   17e4c:	cmp	r0, #0
   17e50:	beq	17ea0 <flatcc_builder_finalize_buffer@@Base+0x7c>
   17e54:	mov	r6, r0
   17e58:	ldr	r0, [r5, #184]	; 0xb8
   17e5c:	cmp	r0, #0
   17e60:	beq	17ec0 <flatcc_builder_finalize_buffer@@Base+0x9c>
   17e64:	add	r0, r5, #188	; 0xbc
   17e68:	mov	r1, r6
   17e6c:	mov	r2, r4
   17e70:	bl	18530 <flatcc_emitter_copy_buffer@@Base>
   17e74:	cmp	r0, #0
   17e78:	movne	r0, r6
   17e7c:	popne	{r4, r5, r6, sl, fp, pc}
   17e80:	movw	r0, #42562	; 0xa642
   17e84:	movw	r1, #41966	; 0xa3ee
   17e88:	movw	r3, #45894	; 0xb346
   17e8c:	movw	r2, #1926	; 0x786
   17e90:	movt	r0, #1
   17e94:	movt	r1, #1
   17e98:	movt	r3, #1
   17e9c:	bl	127a8 <__assert_fail@plt>
   17ea0:	movw	r0, #46484	; 0xb594
   17ea4:	movw	r1, #41966	; 0xa3ee
   17ea8:	movw	r3, #45963	; 0xb38b
   17eac:	movw	r2, #1944	; 0x798
   17eb0:	movt	r0, #1
   17eb4:	movt	r1, #1
   17eb8:	movt	r3, #1
   17ebc:	bl	127a8 <__assert_fail@plt>
   17ec0:	movw	r0, #46484	; 0xb594
   17ec4:	movw	r1, #41966	; 0xa3ee
   17ec8:	movw	r3, #45963	; 0xb38b
   17ecc:	movw	r2, #1948	; 0x79c
   17ed0:	movt	r0, #1
   17ed4:	movt	r1, #1
   17ed8:	movt	r3, #1
   17edc:	bl	127a8 <__assert_fail@plt>

00017ee0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17ee0:	push	{r4, r5, r6, r7, fp, lr}
   17ee4:	add	fp, sp, #16
   17ee8:	sub	sp, sp, #8
   17eec:	mov	r5, r0
   17ef0:	mov	r4, r1
   17ef4:	ldr	r0, [r0, #136]	; 0x88
   17ef8:	ldr	r1, [r5, #140]	; 0x8c
   17efc:	cmp	r4, #0
   17f00:	sub	r0, r1, r0
   17f04:	mov	r1, #0
   17f08:	strne	r0, [r4]
   17f0c:	ldrh	r2, [r5, #128]	; 0x80
   17f10:	str	r1, [sp, #4]
   17f14:	add	r0, r0, r2
   17f18:	cmp	r2, #4
   17f1c:	mov	r1, r2
   17f20:	rsb	r2, r2, #0
   17f24:	sub	r0, r0, #1
   17f28:	movls	r1, #4
   17f2c:	and	r7, r0, r2
   17f30:	add	r0, sp, #4
   17f34:	mov	r2, r7
   17f38:	bl	1276c <posix_memalign@plt>
   17f3c:	ldr	r6, [sp, #4]
   17f40:	cmp	r0, #0
   17f44:	cmpne	r6, #0
   17f48:	bne	17f84 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17f4c:	cmp	r6, #0
   17f50:	beq	17f8c <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   17f54:	ldr	r0, [r5, #184]	; 0xb8
   17f58:	cmp	r0, #0
   17f5c:	beq	17f84 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17f60:	add	r0, r5, #188	; 0xbc
   17f64:	mov	r1, r6
   17f68:	mov	r2, r7
   17f6c:	bl	18530 <flatcc_emitter_copy_buffer@@Base>
   17f70:	cmp	r0, #0
   17f74:	beq	17fa4 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   17f78:	mov	r0, r6
   17f7c:	sub	sp, fp, #16
   17f80:	pop	{r4, r5, r6, r7, fp, pc}
   17f84:	mov	r0, r6
   17f88:	bl	1270c <free@plt>
   17f8c:	mov	r6, #0
   17f90:	cmp	r4, #0
   17f94:	strne	r6, [r4]
   17f98:	mov	r0, r6
   17f9c:	sub	sp, fp, #16
   17fa0:	pop	{r4, r5, r6, r7, fp, pc}
   17fa4:	movw	r0, #42562	; 0xa642
   17fa8:	movw	r1, #41966	; 0xa3ee
   17fac:	movw	r3, #45894	; 0xb346
   17fb0:	movw	r2, #1926	; 0x786
   17fb4:	movt	r0, #1
   17fb8:	movt	r1, #1
   17fbc:	movt	r3, #1
   17fc0:	bl	127a8 <__assert_fail@plt>

00017fc4 <flatcc_builder_aligned_alloc@@Base>:
   17fc4:	push	{fp, lr}
   17fc8:	mov	fp, sp
   17fcc:	sub	sp, sp, #8
   17fd0:	mov	r2, r1
   17fd4:	mov	r1, r0
   17fd8:	mov	r0, #0
   17fdc:	cmp	r1, #4
   17fe0:	str	r0, [sp, #4]
   17fe4:	add	r0, sp, #4
   17fe8:	movls	r1, #4
   17fec:	bl	1276c <posix_memalign@plt>
   17ff0:	mov	r1, r0
   17ff4:	ldr	r0, [sp, #4]
   17ff8:	cmp	r1, #0
   17ffc:	cmpne	r0, #0
   18000:	bne	1800c <flatcc_builder_aligned_alloc@@Base+0x48>
   18004:	mov	sp, fp
   18008:	pop	{fp, pc}
   1800c:	bl	1270c <free@plt>
   18010:	mov	r0, #0
   18014:	str	r0, [sp, #4]
   18018:	mov	sp, fp
   1801c:	pop	{fp, pc}

00018020 <flatcc_builder_aligned_free@@Base>:
   18020:	b	1270c <free@plt>

00018024 <flatcc_builder_get_emit_context@@Base>:
   18024:	ldr	r0, [r0, #36]	; 0x24
   18028:	bx	lr

0001802c <flatcc_emitter_recycle_page@@Base>:
   1802c:	ldr	r3, [r0]
   18030:	mov	r2, r0
   18034:	mvn	r0, #0
   18038:	cmp	r3, r1
   1803c:	ldrne	r2, [r2, #4]
   18040:	cmpne	r2, r1
   18044:	bne	1804c <flatcc_emitter_recycle_page@@Base+0x20>
   18048:	bx	lr
   1804c:	ldr	r0, [r1, #2944]	; 0xb80
   18050:	ldr	r2, [r1, #2948]	; 0xb84
   18054:	str	r2, [r0, #2948]	; 0xb84
   18058:	ldr	r2, [r1, #2948]	; 0xb84
   1805c:	str	r0, [r2, #2944]	; 0xb80
   18060:	ldr	r0, [r3, #2948]	; 0xb84
   18064:	str	r3, [r1, #2944]	; 0xb80
   18068:	str	r0, [r1, #2948]	; 0xb84
   1806c:	str	r1, [r0, #2944]	; 0xb80
   18070:	ldr	r0, [r1, #2944]	; 0xb80
   18074:	str	r1, [r0, #2948]	; 0xb84
   18078:	mov	r0, #0
   1807c:	bx	lr

00018080 <flatcc_emitter_reset@@Base>:
   18080:	push	{r4, sl, fp, lr}
   18084:	add	fp, sp, #8
   18088:	ldr	r1, [r0]
   1808c:	cmp	r1, #0
   18090:	beq	18148 <flatcc_emitter_reset@@Base+0xc8>
   18094:	mov	r4, r0
   18098:	add	r2, r1, #1472	; 0x5c0
   1809c:	mov	r0, #1472	; 0x5c0
   180a0:	mov	r3, #0
   180a4:	stmib	r4, {r1, r2}
   180a8:	str	r0, [r4, #12]
   180ac:	str	r2, [r4, #16]
   180b0:	str	r0, [r4, #20]
   180b4:	movw	r0, #64064	; 0xfa40
   180b8:	movt	r0, #65535	; 0xffff
   180bc:	str	r0, [r1, #2952]	; 0xb88
   180c0:	ldr	r2, [r4, #32]
   180c4:	ldr	r0, [r4, #24]
   180c8:	cmp	r2, #0
   180cc:	moveq	r2, r0
   180d0:	streq	r0, [r4, #32]
   180d4:	str	r3, [r4, #24]
   180d8:	add	r2, r2, r2, lsl #1
   180dc:	lsr	r2, r2, #2
   180e0:	add	r0, r2, r0, lsr #2
   180e4:	str	r0, [r4, #32]
   180e8:	ldr	r2, [r4, #28]
   180ec:	cmp	r2, r0, lsl #1
   180f0:	bls	18148 <flatcc_emitter_reset@@Base+0xc8>
   180f4:	mov	r2, r1
   180f8:	ldr	r0, [r2, #2944]!	; 0xb80
   180fc:	cmp	r0, r1
   18100:	beq	18148 <flatcc_emitter_reset@@Base+0xc8>
   18104:	ldr	r3, [r0, #2944]	; 0xb80
   18108:	str	r3, [r2]
   1810c:	ldr	r2, [r0, #2944]	; 0xb80
   18110:	str	r1, [r2, #2948]	; 0xb84
   18114:	bl	1270c <free@plt>
   18118:	ldr	r0, [r4, #28]
   1811c:	ldr	r1, [r4, #32]
   18120:	sub	r0, r0, #2944	; 0xb80
   18124:	cmp	r0, r1, lsl #1
   18128:	str	r0, [r4, #28]
   1812c:	popls	{r4, sl, fp, pc}
   18130:	ldr	r1, [r4, #4]
   18134:	ldr	r3, [r4]
   18138:	mov	r2, r1
   1813c:	ldr	r0, [r2, #2944]!	; 0xb80
   18140:	cmp	r0, r3
   18144:	bne	18104 <flatcc_emitter_reset@@Base+0x84>
   18148:	pop	{r4, sl, fp, pc}

0001814c <flatcc_emitter_clear@@Base>:
   1814c:	push	{r4, r5, r6, sl, fp, lr}
   18150:	add	fp, sp, #16
   18154:	ldr	r5, [r0]
   18158:	cmp	r5, #0
   1815c:	popeq	{r4, r5, r6, sl, fp, pc}
   18160:	mov	r4, r0
   18164:	ldr	r0, [r5, #2948]	; 0xb84
   18168:	mov	r6, #0
   1816c:	str	r6, [r0, #2944]	; 0xb80
   18170:	ldr	r0, [r5, #2944]	; 0xb80
   18174:	cmp	r0, #0
   18178:	beq	18194 <flatcc_emitter_clear@@Base+0x48>
   1817c:	mov	r5, r0
   18180:	ldr	r0, [r0, #2948]	; 0xb84
   18184:	bl	1270c <free@plt>
   18188:	ldr	r0, [r5, #2944]	; 0xb80
   1818c:	cmp	r0, #0
   18190:	bne	1817c <flatcc_emitter_clear@@Base+0x30>
   18194:	mov	r0, r5
   18198:	bl	1270c <free@plt>
   1819c:	vmov.i32	q8, #0	; 0x00000000
   181a0:	add	r0, r4, #16
   181a4:	vst1.32	{d16-d17}, [r0]
   181a8:	mov	r0, #32
   181ac:	vst1.32	{d16-d17}, [r4], r0
   181b0:	str	r6, [r4]
   181b4:	pop	{r4, r5, r6, sl, fp, pc}

000181b8 <flatcc_emitter@@Base>:
   181b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181bc:	add	fp, sp, #28
   181c0:	sub	sp, sp, #4
   181c4:	mov	r6, r0
   181c8:	mov	r7, r1
   181cc:	ldr	r0, [r0, #24]
   181d0:	ldr	r1, [fp, #8]
   181d4:	mov	r4, r2
   181d8:	cmn	r3, #1
   181dc:	mov	r9, r6
   181e0:	add	r0, r0, r1
   181e4:	str	r0, [r6, #24]
   181e8:	ble	18334 <flatcc_emitter@@Base+0x17c>
   181ec:	ldr	r0, [r9, #20]!
   181f0:	cmp	r0, r1
   181f4:	bcs	184b4 <flatcc_emitter@@Base+0x2fc>
   181f8:	mov	r8, #0
   181fc:	cmp	r4, #0
   18200:	beq	18514 <flatcc_emitter@@Base+0x35c>
   18204:	movw	sl, #64064	; 0xfa40
   18208:	movt	sl, #65535	; 0xffff
   1820c:	ldr	r8, [r7, #4]
   18210:	cmp	r8, #0
   18214:	beq	18318 <flatcc_emitter@@Base+0x160>
   18218:	ldr	r9, [r7]
   1821c:	cmp	r8, r0
   18220:	mov	r5, r8
   18224:	bls	182e4 <flatcc_emitter@@Base+0x12c>
   18228:	mov	r5, r0
   1822c:	cmp	r5, #0
   18230:	bne	182e4 <flatcc_emitter@@Base+0x12c>
   18234:	ldr	r5, [r6, #4]
   18238:	cmp	r5, #0
   1823c:	beq	18250 <flatcc_emitter@@Base+0x98>
   18240:	ldr	r0, [r5, #2944]	; 0xb80
   18244:	ldr	r1, [r6]
   18248:	cmp	r0, r1
   1824c:	bne	18288 <flatcc_emitter@@Base+0xd0>
   18250:	movw	r0, #2956	; 0xb8c
   18254:	bl	1273c <malloc@plt>
   18258:	cmp	r0, #0
   1825c:	beq	184c4 <flatcc_emitter@@Base+0x30c>
   18260:	ldr	r1, [r6, #28]
   18264:	cmp	r5, #0
   18268:	add	r1, r1, #2944	; 0xb80
   1826c:	str	r1, [r6, #28]
   18270:	beq	182b4 <flatcc_emitter@@Base+0xfc>
   18274:	ldr	r1, [r6]
   18278:	str	r1, [r0, #2944]	; 0xb80
   1827c:	str	r5, [r0, #2948]	; 0xb84
   18280:	str	r0, [r1, #2948]	; 0xb84
   18284:	str	r0, [r5, #2944]	; 0xb80
   18288:	mov	r5, #2944	; 0xb80
   1828c:	str	r0, [r6, #4]
   18290:	str	r0, [r6, #16]
   18294:	str	r5, [r6, #20]
   18298:	ldr	r1, [r0, #2948]	; 0xb84
   1829c:	ldr	r1, [r1, #2952]	; 0xb88
   182a0:	add	r1, r1, #2944	; 0xb80
   182a4:	str	r1, [r0, #2952]	; 0xb88
   182a8:	cmp	r8, r5
   182ac:	bhi	1822c <flatcc_emitter@@Base+0x74>
   182b0:	b	182e0 <flatcc_emitter@@Base+0x128>
   182b4:	add	r1, r0, #1472	; 0x5c0
   182b8:	mov	r5, #1472	; 0x5c0
   182bc:	str	r0, [r6]
   182c0:	stmib	r6, {r0, r1, r5}
   182c4:	str	r1, [r6, #16]
   182c8:	str	r5, [r6, #20]
   182cc:	str	r0, [r0, #2944]	; 0xb80
   182d0:	str	r0, [r0, #2948]	; 0xb84
   182d4:	str	sl, [r0, #2952]	; 0xb88
   182d8:	cmp	r8, r5
   182dc:	bhi	1822c <flatcc_emitter@@Base+0x74>
   182e0:	mov	r5, r8
   182e4:	ldr	r0, [r6, #16]
   182e8:	mov	r1, r9
   182ec:	mov	r2, r5
   182f0:	bl	12718 <memcpy@plt>
   182f4:	ldr	r0, [r6, #16]
   182f8:	ldr	r1, [r6, #20]
   182fc:	add	r9, r9, r5
   18300:	subs	r8, r8, r5
   18304:	add	r2, r0, r5
   18308:	sub	r0, r1, r5
   1830c:	str	r2, [r6, #16]
   18310:	str	r0, [r6, #20]
   18314:	bne	1821c <flatcc_emitter@@Base+0x64>
   18318:	subs	r4, r4, #1
   1831c:	add	r7, r7, #8
   18320:	bne	1820c <flatcc_emitter@@Base+0x54>
   18324:	mov	r8, #0
   18328:	mov	r0, r8
   1832c:	sub	sp, fp, #28
   18330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18334:	ldr	r0, [r9, #12]!
   18338:	cmp	r0, r1
   1833c:	bcs	184d4 <flatcc_emitter@@Base+0x31c>
   18340:	mov	r8, #0
   18344:	cmp	r4, #0
   18348:	beq	18514 <flatcc_emitter@@Base+0x35c>
   1834c:	add	r0, r7, r4, lsl #3
   18350:	movw	sl, #2952	; 0xb88
   18354:	ldr	r8, [r0, #-4]
   18358:	sub	r1, r0, #8
   1835c:	str	r1, [sp]
   18360:	cmp	r8, #0
   18364:	beq	18498 <flatcc_emitter@@Base+0x2e0>
   18368:	ldr	r0, [sp]
   1836c:	ldr	r0, [r0]
   18370:	add	r7, r0, r8
   18374:	ldr	r1, [r9]
   18378:	cmp	r8, r1
   1837c:	bhi	183ac <flatcc_emitter@@Base+0x1f4>
   18380:	b	18468 <flatcc_emitter@@Base+0x2b0>
   18384:	add	r3, r0, #2944	; 0xb80
   18388:	mov	r1, #2944	; 0xb80
   1838c:	str	r3, [r6, #8]
   18390:	str	r1, [r6, #12]
   18394:	ldr	r0, [r0, #2944]	; 0xb80
   18398:	ldr	r0, [r0, #2952]	; 0xb88
   1839c:	sub	r0, r0, #2944	; 0xb80
   183a0:	str	r0, [r2]
   183a4:	cmp	r8, r1
   183a8:	bls	18468 <flatcc_emitter@@Base+0x2b0>
   183ac:	cmp	r1, #0
   183b0:	mov	r5, r1
   183b4:	bne	1846c <flatcc_emitter@@Base+0x2b4>
   183b8:	ldr	r5, [r6]
   183bc:	cmp	r5, #0
   183c0:	beq	183ec <flatcc_emitter@@Base+0x234>
   183c4:	ldr	r0, [r5, #2948]	; 0xb84
   183c8:	ldr	r1, [r6, #4]
   183cc:	cmp	r0, r1
   183d0:	beq	183ec <flatcc_emitter@@Base+0x234>
   183d4:	ldr	r1, [r5, #2952]	; 0xb88
   183d8:	mov	r2, r0
   183dc:	sub	r1, r1, #2944	; 0xb80
   183e0:	str	r1, [r2, #2952]!	; 0xb88
   183e4:	str	r0, [r6]
   183e8:	b	18384 <flatcc_emitter@@Base+0x1cc>
   183ec:	movw	r0, #2956	; 0xb8c
   183f0:	bl	1273c <malloc@plt>
   183f4:	cmp	r0, #0
   183f8:	beq	18520 <flatcc_emitter@@Base+0x368>
   183fc:	ldr	r1, [r6, #28]
   18400:	cmp	r5, #0
   18404:	add	r1, r1, #2944	; 0xb80
   18408:	str	r1, [r6, #28]
   1840c:	beq	18430 <flatcc_emitter@@Base+0x278>
   18410:	ldr	r1, [r6, #4]
   18414:	add	r2, r0, sl
   18418:	str	r5, [r0, #2944]	; 0xb80
   1841c:	str	r1, [r0, #2948]	; 0xb84
   18420:	str	r0, [r5, #2948]	; 0xb84
   18424:	str	r0, [r1, #2944]	; 0xb80
   18428:	str	r0, [r6]
   1842c:	b	18384 <flatcc_emitter@@Base+0x1cc>
   18430:	add	r2, r0, #1472	; 0x5c0
   18434:	mov	r1, #1472	; 0x5c0
   18438:	str	r0, [r6]
   1843c:	stmib	r6, {r0, r2}
   18440:	str	r1, [r6, #12]
   18444:	str	r2, [r6, #16]
   18448:	movw	r2, #64064	; 0xfa40
   1844c:	str	r1, [r6, #20]
   18450:	str	r0, [r0, #2944]	; 0xb80
   18454:	str	r0, [r0, #2948]	; 0xb84
   18458:	movt	r2, #65535	; 0xffff
   1845c:	str	r2, [r0, #2952]	; 0xb88
   18460:	cmp	r8, r1
   18464:	bhi	183ac <flatcc_emitter@@Base+0x1f4>
   18468:	mov	r5, r8
   1846c:	sub	r0, r1, r5
   18470:	sub	r7, r7, r5
   18474:	mov	r2, r5
   18478:	str	r0, [r6, #12]
   1847c:	mov	r1, r7
   18480:	ldr	r0, [r6, #8]
   18484:	sub	r0, r0, r5
   18488:	str	r0, [r6, #8]
   1848c:	bl	12718 <memcpy@plt>
   18490:	subs	r8, r8, r5
   18494:	bne	18374 <flatcc_emitter@@Base+0x1bc>
   18498:	ldr	r0, [sp]
   1849c:	subs	r4, r4, #1
   184a0:	bne	18354 <flatcc_emitter@@Base+0x19c>
   184a4:	mov	r8, #0
   184a8:	mov	r0, r8
   184ac:	sub	sp, fp, #28
   184b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184b4:	ldr	r5, [r6, #16]
   184b8:	add	r2, r5, r1
   184bc:	str	r2, [r6, #16]
   184c0:	b	184e0 <flatcc_emitter@@Base+0x328>
   184c4:	mvn	r8, #0
   184c8:	mov	r0, r8
   184cc:	sub	sp, fp, #28
   184d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184d4:	ldr	r2, [r6, #8]
   184d8:	sub	r5, r2, r1
   184dc:	str	r5, [r6, #8]
   184e0:	sub	r0, r0, r1
   184e4:	mov	r8, #0
   184e8:	cmp	r4, #0
   184ec:	str	r0, [r9]
   184f0:	beq	18514 <flatcc_emitter@@Base+0x35c>
   184f4:	ldm	r7, {r1, r2}
   184f8:	mov	r0, r5
   184fc:	bl	12718 <memcpy@plt>
   18500:	ldr	r0, [r7, #4]
   18504:	add	r7, r7, #8
   18508:	subs	r4, r4, #1
   1850c:	add	r5, r5, r0
   18510:	bne	184f4 <flatcc_emitter@@Base+0x33c>
   18514:	mov	r0, r8
   18518:	sub	sp, fp, #28
   1851c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18520:	mvn	r8, #0
   18524:	mov	r0, r8
   18528:	sub	sp, fp, #28
   1852c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018530 <flatcc_emitter_copy_buffer@@Base>:
   18530:	push	{r4, r5, r6, sl, fp, lr}
   18534:	add	fp, sp, #16
   18538:	mov	r3, r2
   1853c:	ldr	r2, [r0, #24]
   18540:	mov	r5, #0
   18544:	cmp	r2, r3
   18548:	bhi	185d0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   1854c:	mov	r4, r0
   18550:	ldr	r0, [r0]
   18554:	cmp	r0, #0
   18558:	beq	185d0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   1855c:	mov	r6, r1
   18560:	ldr	r1, [r4, #4]
   18564:	cmp	r0, r1
   18568:	beq	185d8 <flatcc_emitter_copy_buffer@@Base+0xa8>
   1856c:	ldr	r0, [r4, #12]
   18570:	ldr	r1, [r4, #8]
   18574:	rsb	r5, r0, #2944	; 0xb80
   18578:	mov	r0, r6
   1857c:	mov	r2, r5
   18580:	bl	12718 <memcpy@plt>
   18584:	ldm	r4, {r0, r1}
   18588:	add	r5, r6, r5
   1858c:	ldr	r6, [r0, #2944]	; 0xb80
   18590:	cmp	r6, r1
   18594:	beq	185bc <flatcc_emitter_copy_buffer@@Base+0x8c>
   18598:	mov	r0, r5
   1859c:	mov	r1, r6
   185a0:	mov	r2, #2944	; 0xb80
   185a4:	bl	12718 <memcpy@plt>
   185a8:	ldr	r6, [r6, #2944]	; 0xb80
   185ac:	ldr	r0, [r4, #4]
   185b0:	add	r5, r5, #2944	; 0xb80
   185b4:	cmp	r6, r0
   185b8:	bne	18598 <flatcc_emitter_copy_buffer@@Base+0x68>
   185bc:	ldr	r0, [r4, #20]
   185c0:	mov	r1, r6
   185c4:	rsb	r2, r0, #2944	; 0xb80
   185c8:	mov	r0, r5
   185cc:	bl	12718 <memcpy@plt>
   185d0:	mov	r0, r5
   185d4:	pop	{r4, r5, r6, sl, fp, pc}
   185d8:	ldr	r1, [r4, #8]
   185dc:	mov	r0, r6
   185e0:	bl	12718 <memcpy@plt>
   185e4:	mov	r0, r6
   185e8:	pop	{r4, r5, r6, sl, fp, pc}

000185ec <flatcc_verify_error_string@@Base>:
   185ec:	cmp	r0, #36	; 0x24
   185f0:	movwhi	r0, #47698	; 0xba52
   185f4:	movthi	r0, #1
   185f8:	bxhi	lr
   185fc:	movw	r1, #47712	; 0xba60
   18600:	movt	r1, #1
   18604:	ldr	r0, [r1, r0, lsl #2]
   18608:	bx	lr

0001860c <flatcc_verify_field@@Base>:
   1860c:	push	{r4, sl, fp, lr}
   18610:	add	fp, sp, #8
   18614:	ldrh	r4, [r0, #22]
   18618:	mov	ip, #4
   1861c:	mov	lr, #0
   18620:	add	r1, ip, r1, lsl #1
   18624:	uxth	ip, r1
   18628:	cmp	ip, r4
   1862c:	bcs	18688 <flatcc_verify_field@@Base+0x7c>
   18630:	ldr	r4, [r0, #12]
   18634:	uxtah	r1, r4, r1
   18638:	ldrh	ip, [r1]
   1863c:	cmp	ip, #0
   18640:	beq	18688 <flatcc_verify_field@@Base+0x7c>
   18644:	add	r1, ip, r2
   18648:	ldrh	r2, [r0, #20]
   1864c:	mov	lr, #13
   18650:	cmp	r1, r2
   18654:	bhi	18688 <flatcc_verify_field@@Base+0x7c>
   18658:	ldr	r1, [r0]
   1865c:	mov	lr, #0
   18660:	add	r2, r1, ip
   18664:	ldr	r1, [r0, #16]
   18668:	add	r4, r2, r1
   1866c:	sub	r1, r3, #1
   18670:	tst	r4, r1
   18674:	beq	18688 <flatcc_verify_field@@Base+0x7c>
   18678:	ldr	r0, [r0, #16]
   1867c:	add	r0, r2, r0
   18680:	ands	lr, r0, r1
   18684:	movwne	lr, #12
   18688:	mov	r0, lr
   1868c:	pop	{r4, sl, fp, pc}

00018690 <flatcc_verify_string_field@@Base>:
   18690:	push	{fp, lr}
   18694:	mov	fp, sp
   18698:	mov	lr, r2
   1869c:	ldrh	r2, [r0, #22]
   186a0:	mov	r3, #4
   186a4:	add	r1, r3, r1, lsl #1
   186a8:	uxth	r3, r1
   186ac:	cmp	r3, r2
   186b0:	bcs	1874c <flatcc_verify_string_field@@Base+0xbc>
   186b4:	ldr	r2, [r0, #12]
   186b8:	uxtah	r1, r2, r1
   186bc:	ldrh	r1, [r1]
   186c0:	cmp	r1, #0
   186c4:	beq	1874c <flatcc_verify_string_field@@Base+0xbc>
   186c8:	ldrh	r2, [r0, #20]
   186cc:	add	r3, r1, #4
   186d0:	mov	lr, #13
   186d4:	cmp	r3, r2
   186d8:	bhi	18744 <flatcc_verify_string_field@@Base+0xb4>
   186dc:	ldr	r2, [r0, #16]
   186e0:	mov	lr, #12
   186e4:	add	r3, r2, r1
   186e8:	tst	r3, #3
   186ec:	bne	18744 <flatcc_verify_string_field@@Base+0xb4>
   186f0:	cmp	r3, #0
   186f4:	moveq	lr, #0
   186f8:	moveq	r0, lr
   186fc:	popeq	{fp, pc}
   18700:	ldr	ip, [r0]
   18704:	mov	lr, #17
   18708:	ldr	r1, [ip, r3]
   1870c:	add	r1, r1, r3
   18710:	tst	r1, #3
   18714:	bne	18744 <flatcc_verify_string_field@@Base+0xb4>
   18718:	cmp	r1, r3
   1871c:	bls	18744 <flatcc_verify_string_field@@Base+0xb4>
   18720:	ldr	r3, [r0, #4]
   18724:	add	r0, r1, #4
   18728:	cmp	r3, r0
   1872c:	ldrcs	r1, [ip, r1]
   18730:	subcs	r2, r3, r0
   18734:	movcs	lr, #8
   18738:	addcs	r3, r1, #1
   1873c:	cmpcs	r2, r3
   18740:	bcs	1875c <flatcc_verify_string_field@@Base+0xcc>
   18744:	mov	r0, lr
   18748:	pop	{fp, pc}
   1874c:	cmp	lr, #0
   18750:	movwne	lr, #4
   18754:	mov	r0, lr
   18758:	pop	{fp, pc}
   1875c:	add	r0, ip, r0
   18760:	ldrb	lr, [r0, r1]
   18764:	cmp	lr, #0
   18768:	movwne	lr, #7
   1876c:	mov	r0, lr
   18770:	pop	{fp, pc}

00018774 <flatcc_verify_vector_field@@Base>:
   18774:	push	{r4, r5, fp, lr}
   18778:	add	fp, sp, #8
   1877c:	mov	r5, r2
   18780:	ldrh	r2, [r0, #22]
   18784:	mov	r4, #4
   18788:	add	r1, r4, r1, lsl #1
   1878c:	uxth	r4, r1
   18790:	cmp	r4, r2
   18794:	bcs	1885c <flatcc_verify_vector_field@@Base+0xe8>
   18798:	ldr	r2, [r0, #12]
   1879c:	uxtah	r1, r2, r1
   187a0:	ldrh	r1, [r1]
   187a4:	cmp	r1, #0
   187a8:	beq	1885c <flatcc_verify_vector_field@@Base+0xe8>
   187ac:	ldrh	r2, [r0, #20]
   187b0:	add	r4, r1, #4
   187b4:	mov	r5, #13
   187b8:	cmp	r4, r2
   187bc:	bhi	18854 <flatcc_verify_vector_field@@Base+0xe0>
   187c0:	ldr	r2, [r0, #16]
   187c4:	mov	r5, #12
   187c8:	add	r1, r2, r1
   187cc:	tst	r1, #3
   187d0:	bne	18854 <flatcc_verify_vector_field@@Base+0xe0>
   187d4:	cmp	r1, #0
   187d8:	moveq	r5, #0
   187dc:	moveq	r0, r5
   187e0:	popeq	{r4, r5, fp, pc}
   187e4:	ldr	ip, [r0]
   187e8:	ldr	r4, [fp, #8]
   187ec:	mov	r5, #16
   187f0:	ldr	r2, [ip, r1]
   187f4:	cmp	r4, #4
   187f8:	movls	r4, #4
   187fc:	add	lr, r2, r1
   18800:	cmp	lr, r1
   18804:	bls	18854 <flatcc_verify_vector_field@@Base+0xe0>
   18808:	ldr	r0, [r0, #4]
   1880c:	add	r1, lr, #4
   18810:	cmp	r1, r0
   18814:	bhi	18854 <flatcc_verify_vector_field@@Base+0xe0>
   18818:	sub	r2, r4, #1
   1881c:	orr	r2, r2, #3
   18820:	tst	r1, r2
   18824:	bne	18854 <flatcc_verify_vector_field@@Base+0xe0>
   18828:	ldr	r2, [fp, #12]
   1882c:	ldr	r1, [ip, lr]
   18830:	mov	r5, #25
   18834:	cmp	r1, r2
   18838:	bhi	18854 <flatcc_verify_vector_field@@Base+0xe0>
   1883c:	sub	r0, r0, #4
   18840:	mul	r1, r1, r3
   18844:	mov	r5, #0
   18848:	sub	r0, r0, lr
   1884c:	cmp	r0, r1
   18850:	movwcc	r5, #26
   18854:	mov	r0, r5
   18858:	pop	{r4, r5, fp, pc}
   1885c:	cmp	r5, #0
   18860:	movwne	r5, #4
   18864:	mov	r0, r5
   18868:	pop	{r4, r5, fp, pc}

0001886c <flatcc_verify_string_vector_field@@Base>:
   1886c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18870:	add	fp, sp, #24
   18874:	ldrh	r7, [r0, #22]
   18878:	mov	r3, #4
   1887c:	add	r1, r3, r1, lsl #1
   18880:	uxth	r3, r1
   18884:	cmp	r3, r7
   18888:	bcs	188d0 <flatcc_verify_string_vector_field@@Base+0x64>
   1888c:	ldr	r3, [r0, #12]
   18890:	uxtah	r1, r3, r1
   18894:	ldrh	r1, [r1]
   18898:	cmp	r1, #0
   1889c:	beq	188d0 <flatcc_verify_string_vector_field@@Base+0x64>
   188a0:	ldrh	r3, [r0, #20]
   188a4:	add	r7, r1, #4
   188a8:	mov	r2, #13
   188ac:	cmp	r7, r3
   188b0:	bhi	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   188b4:	ldr	r4, [r0, #16]
   188b8:	mov	r2, #12
   188bc:	add	r6, r4, r1
   188c0:	tst	r6, #3
   188c4:	beq	188e0 <flatcc_verify_string_vector_field@@Base+0x74>
   188c8:	mov	r0, r2
   188cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   188d0:	cmp	r2, #0
   188d4:	movwne	r2, #4
   188d8:	mov	r0, r2
   188dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   188e0:	mov	r2, #0
   188e4:	cmp	r6, #0
   188e8:	beq	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   188ec:	ldr	r5, [r0]
   188f0:	mov	r2, #16
   188f4:	ldr	r7, [r5, r6]
   188f8:	add	r3, r7, r6
   188fc:	cmp	r3, r6
   18900:	bls	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   18904:	ldr	lr, [r0, #4]
   18908:	add	r0, r3, #4
   1890c:	cmp	r0, lr
   18910:	bhi	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   18914:	ands	r0, r0, #3
   18918:	bne	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   1891c:	ldr	ip, [r5, r3]
   18920:	mov	r2, #25
   18924:	cmn	ip, #-1073741823	; 0xc0000001
   18928:	bhi	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   1892c:	sub	r0, lr, #4
   18930:	mov	r2, #26
   18934:	sub	r0, r0, r3
   18938:	cmp	r0, ip, lsl #2
   1893c:	bcc	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   18940:	cmp	ip, #0
   18944:	mov	r2, #0
   18948:	beq	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   1894c:	sub	r0, lr, #8
   18950:	add	r9, r7, r4
   18954:	sub	r0, r0, r1
   18958:	sub	r0, r0, r7
   1895c:	sub	r8, r0, r4
   18960:	add	r0, r5, r9
   18964:	mov	r5, #0
   18968:	rsb	r4, r0, #0
   1896c:	sub	r0, r1, r4
   18970:	add	r3, r1, r9
   18974:	mov	r2, #17
   18978:	ldr	r6, [r0, #4]
   1897c:	add	r7, r3, r6
   18980:	add	r0, r7, #4
   18984:	tst	r0, #3
   18988:	bne	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   1898c:	add	r3, r3, #4
   18990:	cmp	r0, r3
   18994:	bls	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   18998:	add	r0, r7, #8
   1899c:	cmp	lr, r0
   189a0:	bcc	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   189a4:	add	r0, r1, r6
   189a8:	sub	r2, r8, r6
   189ac:	sub	r0, r0, r4
   189b0:	ldr	r0, [r0, #4]
   189b4:	add	r3, r0, #1
   189b8:	cmp	r2, r3
   189bc:	bcc	189f8 <flatcc_verify_string_vector_field@@Base+0x18c>
   189c0:	add	r0, r6, r0
   189c4:	add	r0, r1, r0
   189c8:	sub	r0, r0, r4
   189cc:	ldrb	r0, [r0, #8]
   189d0:	cmp	r0, #0
   189d4:	bne	18a04 <flatcc_verify_string_vector_field@@Base+0x198>
   189d8:	add	r5, r5, #1
   189dc:	sub	r8, r8, #4
   189e0:	add	r9, r9, #4
   189e4:	sub	r4, r4, #4
   189e8:	mov	r2, #0
   189ec:	cmp	r5, ip
   189f0:	bcc	1896c <flatcc_verify_string_vector_field@@Base+0x100>
   189f4:	b	188c8 <flatcc_verify_string_vector_field@@Base+0x5c>
   189f8:	mov	r2, #8
   189fc:	mov	r0, r2
   18a00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18a04:	mov	r2, #7
   18a08:	mov	r0, r2
   18a0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00018a10 <flatcc_verify_table_field@@Base>:
   18a10:	push	{r4, r5, r6, sl, fp, lr}
   18a14:	add	fp, sp, #16
   18a18:	sub	sp, sp, #24
   18a1c:	ldrh	r5, [r0, #22]
   18a20:	mov	r6, #4
   18a24:	add	r1, r6, r1, lsl #1
   18a28:	uxth	r6, r1
   18a2c:	cmp	r6, r5
   18a30:	bcs	18b48 <flatcc_verify_table_field@@Base+0x138>
   18a34:	ldr	r6, [r0, #12]
   18a38:	uxtah	r1, r6, r1
   18a3c:	ldrh	r1, [r1]
   18a40:	cmp	r1, #0
   18a44:	beq	18b48 <flatcc_verify_table_field@@Base+0x138>
   18a48:	ldrh	r6, [r0, #20]
   18a4c:	add	r5, r1, #4
   18a50:	mov	r2, #13
   18a54:	cmp	r5, r6
   18a58:	bhi	18b50 <flatcc_verify_table_field@@Base+0x140>
   18a5c:	ldr	r2, [r0, #16]
   18a60:	add	r4, r2, r1
   18a64:	mov	r2, #12
   18a68:	tst	r4, #3
   18a6c:	bne	18b50 <flatcc_verify_table_field@@Base+0x140>
   18a70:	cmp	r4, #0
   18a74:	beq	18b5c <flatcc_verify_table_field@@Base+0x14c>
   18a78:	ldm	r0, {r1, ip}
   18a7c:	ldr	r2, [r0, #8]
   18a80:	ldr	r0, [r1, r4]
   18a84:	subs	r2, r2, #1
   18a88:	str	r2, [sp, #8]
   18a8c:	beq	18b6c <flatcc_verify_table_field@@Base+0x15c>
   18a90:	add	r0, r0, r4
   18a94:	mov	r2, #15
   18a98:	tst	r0, #3
   18a9c:	bne	18b50 <flatcc_verify_table_field@@Base+0x140>
   18aa0:	cmp	r0, r4
   18aa4:	bls	18b50 <flatcc_verify_table_field@@Base+0x140>
   18aa8:	add	r6, r0, #4
   18aac:	cmp	r6, ip
   18ab0:	bhi	18b50 <flatcc_verify_table_field@@Base+0x140>
   18ab4:	str	r0, [sp, #16]
   18ab8:	ldr	r2, [r1, r0]
   18abc:	sub	r5, r0, r2
   18ac0:	mov	r2, #29
   18ac4:	tst	r5, #-2147483647	; 0x80000001
   18ac8:	bne	18b50 <flatcc_verify_table_field@@Base+0x140>
   18acc:	add	r4, r5, #2
   18ad0:	mov	r2, #27
   18ad4:	cmp	r4, ip
   18ad8:	bhi	18b50 <flatcc_verify_table_field@@Base+0x140>
   18adc:	mov	lr, r1
   18ae0:	mov	r2, #30
   18ae4:	ldrh	r6, [lr, r5]!
   18ae8:	tst	r6, #1
   18aec:	strh	r6, [sp, #22]
   18af0:	bne	18b50 <flatcc_verify_table_field@@Base+0x140>
   18af4:	add	r5, r5, r6
   18af8:	cmp	r5, ip
   18afc:	bhi	18b50 <flatcc_verify_table_field@@Base+0x140>
   18b00:	mov	r2, #28
   18b04:	cmp	r6, #4
   18b08:	bcc	18b50 <flatcc_verify_table_field@@Base+0x140>
   18b0c:	add	r2, r1, r4
   18b10:	sub	r0, ip, r0
   18b14:	ldrh	r4, [r2]
   18b18:	mov	r2, #20
   18b1c:	cmp	r0, r4
   18b20:	strh	r4, [sp, #20]
   18b24:	bcc	18b50 <flatcc_verify_table_field@@Base+0x140>
   18b28:	mov	r0, sp
   18b2c:	str	lr, [sp, #12]
   18b30:	stm	sp, {r1, ip}
   18b34:	blx	r3
   18b38:	mov	r2, r0
   18b3c:	mov	r0, r2
   18b40:	sub	sp, fp, #16
   18b44:	pop	{r4, r5, r6, sl, fp, pc}
   18b48:	cmp	r2, #0
   18b4c:	movwne	r2, #4
   18b50:	mov	r0, r2
   18b54:	sub	sp, fp, #16
   18b58:	pop	{r4, r5, r6, sl, fp, pc}
   18b5c:	mov	r2, #0
   18b60:	mov	r0, r2
   18b64:	sub	sp, fp, #16
   18b68:	pop	{r4, r5, r6, sl, fp, pc}
   18b6c:	mov	r2, #3
   18b70:	mov	r0, r2
   18b74:	sub	sp, fp, #16
   18b78:	pop	{r4, r5, r6, sl, fp, pc}

00018b7c <flatcc_verify_table_vector_field@@Base>:
   18b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b80:	add	fp, sp, #28
   18b84:	sub	sp, sp, #36	; 0x24
   18b88:	ldrh	r7, [r0, #22]
   18b8c:	mov	r4, r3
   18b90:	mov	r3, #4
   18b94:	add	r1, r3, r1, lsl #1
   18b98:	uxth	r3, r1
   18b9c:	cmp	r3, r7
   18ba0:	bcs	18d60 <flatcc_verify_table_vector_field@@Base+0x1e4>
   18ba4:	ldr	r3, [r0, #12]
   18ba8:	uxtah	r1, r3, r1
   18bac:	ldrh	r1, [r1]
   18bb0:	cmp	r1, #0
   18bb4:	beq	18d60 <flatcc_verify_table_vector_field@@Base+0x1e4>
   18bb8:	ldrh	r3, [r0, #20]
   18bbc:	add	r7, r1, #4
   18bc0:	mov	r2, #13
   18bc4:	cmp	r7, r3
   18bc8:	bhi	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18bcc:	ldr	r3, [r0, #16]
   18bd0:	mov	r2, #12
   18bd4:	add	r6, r3, r1
   18bd8:	tst	r6, #3
   18bdc:	bne	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18be0:	mov	r2, #0
   18be4:	cmp	r6, #0
   18be8:	beq	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18bec:	ldr	r7, [r0, #8]
   18bf0:	cmp	r7, #1
   18bf4:	blt	18d74 <flatcc_verify_table_vector_field@@Base+0x1f8>
   18bf8:	ldr	sl, [r0]
   18bfc:	mov	r2, #16
   18c00:	ldr	ip, [sl, r6]
   18c04:	add	r5, ip, r6
   18c08:	cmp	r5, r6
   18c0c:	bls	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18c10:	ldr	r9, [r0, #4]
   18c14:	add	r8, r5, #4
   18c18:	cmp	r8, r9
   18c1c:	bhi	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18c20:	ands	r0, r8, #3
   18c24:	bne	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18c28:	ldr	lr, [sl, r5]
   18c2c:	mov	r2, #25
   18c30:	cmn	lr, #-1073741823	; 0xc0000001
   18c34:	bhi	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18c38:	sub	r0, r9, #4
   18c3c:	mov	r2, #26
   18c40:	sub	r6, r0, r5
   18c44:	cmp	r6, lr, lsl #2
   18c48:	bcc	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18c4c:	cmp	lr, #0
   18c50:	mov	r2, #0
   18c54:	beq	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18c58:	subs	r2, r7, #2
   18c5c:	str	r2, [sp, #4]
   18c60:	beq	18e40 <flatcc_verify_table_vector_field@@Base+0x2c4>
   18c64:	sub	r0, r0, r1
   18c68:	sub	r0, r0, ip
   18c6c:	sub	r5, r0, r3
   18c70:	mov	r0, #0
   18c74:	str	r0, [sp, #8]
   18c78:	ldr	r2, [sl, r8]
   18c7c:	ldr	r0, [sp, #4]
   18c80:	str	r0, [sp, #20]
   18c84:	add	r0, r8, r2
   18c88:	add	ip, r0, #4
   18c8c:	tst	r0, #3
   18c90:	bne	18d84 <flatcc_verify_table_vector_field@@Base+0x208>
   18c94:	cmp	r0, r8
   18c98:	bls	18d84 <flatcc_verify_table_vector_field@@Base+0x208>
   18c9c:	cmp	ip, r9
   18ca0:	bhi	18d84 <flatcc_verify_table_vector_field@@Base+0x208>
   18ca4:	str	r0, [sp, #28]
   18ca8:	add	r1, sl, r2
   18cac:	ldr	r7, [r1, r8]
   18cb0:	sub	r1, r2, r7
   18cb4:	add	r3, r8, r1
   18cb8:	tst	r3, #-2147483647	; 0x80000001
   18cbc:	bne	18d84 <flatcc_verify_table_vector_field@@Base+0x208>
   18cc0:	add	r6, r3, #2
   18cc4:	cmp	r6, r9
   18cc8:	bhi	18d84 <flatcc_verify_table_vector_field@@Base+0x208>
   18ccc:	add	r1, sl, r1
   18cd0:	add	r1, r1, r8
   18cd4:	ldrh	r1, [r1]
   18cd8:	cmp	r1, #4
   18cdc:	strh	r1, [sp, #34]	; 0x22
   18ce0:	bcc	18d84 <flatcc_verify_table_vector_field@@Base+0x208>
   18ce4:	ands	r6, r1, #1
   18ce8:	bne	18d84 <flatcc_verify_table_vector_field@@Base+0x208>
   18cec:	add	r1, r2, r1
   18cf0:	sub	r1, r1, r7
   18cf4:	add	r1, r8, r1
   18cf8:	cmp	r1, r9
   18cfc:	bhi	18d84 <flatcc_verify_table_vector_field@@Base+0x208>
   18d00:	add	r1, sl, r3
   18d04:	sub	r2, r5, r2
   18d08:	ldrh	r3, [r1, #2]
   18d0c:	cmp	r2, r3
   18d10:	strh	r3, [sp, #32]
   18d14:	bcc	18d84 <flatcc_verify_table_vector_field@@Base+0x208>
   18d18:	add	r0, sp, #12
   18d1c:	str	sl, [sp, #12]
   18d20:	str	r1, [sp, #24]
   18d24:	mov	r6, lr
   18d28:	str	r9, [sp, #16]
   18d2c:	blx	r4
   18d30:	cmp	r0, #0
   18d34:	bne	18e58 <flatcc_verify_table_vector_field@@Base+0x2dc>
   18d38:	ldr	r0, [sp, #8]
   18d3c:	sub	r5, r5, #4
   18d40:	add	r8, r8, #4
   18d44:	mov	r2, #0
   18d48:	mov	lr, r6
   18d4c:	add	r0, r0, #1
   18d50:	cmp	r0, r6
   18d54:	str	r0, [sp, #8]
   18d58:	bcc	18c78 <flatcc_verify_table_vector_field@@Base+0xfc>
   18d5c:	b	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18d60:	cmp	r2, #0
   18d64:	movwne	r2, #4
   18d68:	mov	r0, r2
   18d6c:	sub	sp, fp, #28
   18d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d74:	mov	r2, #3
   18d78:	mov	r0, r2
   18d7c:	sub	sp, fp, #28
   18d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d84:	ldr	r1, [sp, #4]
   18d88:	str	r1, [sp, #20]
   18d8c:	mov	r2, #15
   18d90:	tst	r0, #3
   18d94:	bne	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18d98:	cmp	r0, r8
   18d9c:	bls	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18da0:	cmp	ip, r9
   18da4:	bhi	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18da8:	str	r0, [sp, #28]
   18dac:	mov	r2, #29
   18db0:	ldr	r1, [sl, r0]
   18db4:	sub	r7, r0, r1
   18db8:	tst	r7, #-2147483647	; 0x80000001
   18dbc:	bne	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18dc0:	add	r3, r7, #2
   18dc4:	mov	r2, #27
   18dc8:	cmp	r3, r9
   18dcc:	bhi	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18dd0:	mov	r1, sl
   18dd4:	mov	r2, #30
   18dd8:	ldrh	r6, [r1, r7]!
   18ddc:	tst	r6, #1
   18de0:	strh	r6, [sp, #34]	; 0x22
   18de4:	bne	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18de8:	add	r7, r7, r6
   18dec:	cmp	r7, r9
   18df0:	bhi	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18df4:	mov	r2, #28
   18df8:	cmp	r6, #4
   18dfc:	bcc	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18e00:	add	r2, sl, r3
   18e04:	sub	r0, r9, r0
   18e08:	ldrh	r3, [r2]
   18e0c:	mov	r2, #20
   18e10:	cmp	r0, r3
   18e14:	strh	r3, [sp, #32]
   18e18:	bcc	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>
   18e1c:	add	r0, sp, #12
   18e20:	str	sl, [sp, #12]
   18e24:	str	r1, [sp, #24]
   18e28:	str	r9, [sp, #16]
   18e2c:	blx	r4
   18e30:	mov	r2, r0
   18e34:	mov	r0, r2
   18e38:	sub	sp, fp, #28
   18e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e40:	mov	r0, #0
   18e44:	mov	r2, #3
   18e48:	str	r0, [sp, #20]
   18e4c:	mov	r0, r2
   18e50:	sub	sp, fp, #28
   18e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e58:	ldr	r0, [sl, r8]
   18e5c:	ldr	r1, [sp, #4]
   18e60:	add	r0, r0, r8
   18e64:	str	r1, [sp, #20]
   18e68:	add	ip, r0, #4
   18e6c:	mov	r2, #15
   18e70:	tst	r0, #3
   18e74:	beq	18d98 <flatcc_verify_table_vector_field@@Base+0x21c>
   18e78:	b	18d68 <flatcc_verify_table_vector_field@@Base+0x1ec>

00018e7c <flatcc_verify_union_table@@Base>:
   18e7c:	push	{r4, r5, r6, sl, fp, lr}
   18e80:	add	fp, sp, #16
   18e84:	sub	sp, sp, #24
   18e88:	ldr	r5, [r0, #16]
   18e8c:	ldr	r3, [r0, #20]
   18e90:	ldr	ip, [r0]
   18e94:	ldr	r2, [r0, #4]
   18e98:	ldr	r0, [r0, #8]
   18e9c:	subs	r0, r0, #1
   18ea0:	str	r0, [sp, #8]
   18ea4:	moveq	r0, #3
   18ea8:	subeq	sp, fp, #16
   18eac:	popeq	{r4, r5, r6, sl, fp, pc}
   18eb0:	add	r3, r3, r5
   18eb4:	mov	r0, #15
   18eb8:	tst	r3, #3
   18ebc:	bne	18f5c <flatcc_verify_union_table@@Base+0xe0>
   18ec0:	cmp	r3, r5
   18ec4:	bls	18f5c <flatcc_verify_union_table@@Base+0xe0>
   18ec8:	add	r6, r3, #4
   18ecc:	cmp	r6, r2
   18ed0:	bhi	18f5c <flatcc_verify_union_table@@Base+0xe0>
   18ed4:	str	r3, [sp, #16]
   18ed8:	ldr	r0, [ip, r3]
   18edc:	sub	r5, r3, r0
   18ee0:	mov	r0, #29
   18ee4:	tst	r5, #-2147483647	; 0x80000001
   18ee8:	bne	18f5c <flatcc_verify_union_table@@Base+0xe0>
   18eec:	add	r4, r5, #2
   18ef0:	mov	r0, #27
   18ef4:	cmp	r4, r2
   18ef8:	bhi	18f5c <flatcc_verify_union_table@@Base+0xe0>
   18efc:	mov	lr, ip
   18f00:	mov	r0, #30
   18f04:	ldrh	r6, [lr, r5]!
   18f08:	tst	r6, #1
   18f0c:	strh	r6, [sp, #22]
   18f10:	bne	18f5c <flatcc_verify_union_table@@Base+0xe0>
   18f14:	add	r5, r5, r6
   18f18:	cmp	r5, r2
   18f1c:	bhi	18f5c <flatcc_verify_union_table@@Base+0xe0>
   18f20:	mov	r0, #28
   18f24:	cmp	r6, #4
   18f28:	bcc	18f5c <flatcc_verify_union_table@@Base+0xe0>
   18f2c:	add	r0, ip, r4
   18f30:	sub	r3, r2, r3
   18f34:	ldrh	r4, [r0]
   18f38:	mov	r0, #20
   18f3c:	cmp	r3, r4
   18f40:	strh	r4, [sp, #20]
   18f44:	bcc	18f5c <flatcc_verify_union_table@@Base+0xe0>
   18f48:	mov	r0, sp
   18f4c:	str	ip, [sp]
   18f50:	str	lr, [sp, #12]
   18f54:	str	r2, [sp, #4]
   18f58:	blx	r1
   18f5c:	sub	sp, fp, #16
   18f60:	pop	{r4, r5, r6, sl, fp, pc}

00018f64 <flatcc_verify_union_struct@@Base>:
   18f64:	push	{fp, lr}
   18f68:	mov	fp, sp
   18f6c:	ldr	lr, [r0, #20]
   18f70:	mov	r3, r0
   18f74:	mov	r0, #18
   18f78:	cmp	lr, #0
   18f7c:	beq	18fb8 <flatcc_verify_union_struct@@Base+0x54>
   18f80:	ldr	ip, [r3, #4]
   18f84:	ldr	r3, [r3, #16]
   18f88:	add	r3, r3, lr
   18f8c:	cmp	r3, ip
   18f90:	bhi	18fb8 <flatcc_verify_union_struct@@Base+0x54>
   18f94:	adds	r1, r3, r1
   18f98:	mov	r0, #10
   18f9c:	bcs	18fb8 <flatcc_verify_union_struct@@Base+0x54>
   18fa0:	mov	r0, #9
   18fa4:	cmp	r1, ip
   18fa8:	pophi	{fp, pc}
   18fac:	sub	r0, r2, #1
   18fb0:	ands	r0, r3, r0
   18fb4:	movwne	r0, #11
   18fb8:	pop	{fp, pc}

00018fbc <flatcc_verify_union_string@@Base>:
   18fbc:	mov	r1, r0
   18fc0:	ldr	r3, [r0, #16]
   18fc4:	ldr	r0, [r0, #20]
   18fc8:	add	r2, r0, r3
   18fcc:	mov	r0, #17
   18fd0:	tst	r2, #3
   18fd4:	bne	19028 <flatcc_verify_union_string@@Base+0x6c>
   18fd8:	cmp	r2, r3
   18fdc:	bls	19028 <flatcc_verify_union_string@@Base+0x6c>
   18fe0:	ldr	r3, [r1, #4]
   18fe4:	add	ip, r2, #4
   18fe8:	cmp	r3, ip
   18fec:	bcc	19028 <flatcc_verify_union_string@@Base+0x6c>
   18ff0:	push	{fp, lr}
   18ff4:	mov	fp, sp
   18ff8:	ldr	r1, [r1]
   18ffc:	sub	lr, r3, ip
   19000:	mov	r0, #8
   19004:	ldr	r2, [r1, r2]
   19008:	add	r3, r2, #1
   1900c:	cmp	lr, r3
   19010:	pop	{fp, lr}
   19014:	bxcc	lr
   19018:	add	r0, r1, ip
   1901c:	ldrb	r0, [r0, r2]
   19020:	cmp	r0, #0
   19024:	movwne	r0, #7
   19028:	bx	lr

0001902c <flatcc_verify_buffer_header@@Base>:
   1902c:	push	{r4, sl, fp, lr}
   19030:	add	fp, sp, #8
   19034:	sub	sp, sp, #8
   19038:	mov	r4, r0
   1903c:	mov	r0, #5
   19040:	tst	r4, #3
   19044:	bne	19098 <flatcc_verify_buffer_header@@Base+0x6c>
   19048:	mov	r0, #6
   1904c:	cmn	r1, #9
   19050:	bhi	19098 <flatcc_verify_buffer_header@@Base+0x6c>
   19054:	mov	r0, #1
   19058:	cmp	r1, #8
   1905c:	bcc	19098 <flatcc_verify_buffer_header@@Base+0x6c>
   19060:	cmp	r2, #0
   19064:	beq	190a0 <flatcc_verify_buffer_header@@Base+0x74>
   19068:	mov	r0, #0
   1906c:	mov	r1, r2
   19070:	mov	r2, #4
   19074:	str	r0, [sp, #4]
   19078:	add	r0, sp, #4
   1907c:	bl	12784 <strncpy@plt>
   19080:	ldr	r1, [sp, #4]
   19084:	cmp	r1, #0
   19088:	ldrne	r2, [r4, #4]
   1908c:	movne	r0, #2
   19090:	cmpne	r2, r1
   19094:	moveq	r0, #0
   19098:	sub	sp, fp, #8
   1909c:	pop	{r4, sl, fp, pc}
   190a0:	mov	r0, #0
   190a4:	sub	sp, fp, #8
   190a8:	pop	{r4, sl, fp, pc}

000190ac <flatcc_verify_typed_buffer_header@@Base>:
   190ac:	mov	r3, r0
   190b0:	mov	r0, #5
   190b4:	tst	r3, #3
   190b8:	bne	190ec <flatcc_verify_typed_buffer_header@@Base+0x40>
   190bc:	mov	r0, #6
   190c0:	cmn	r1, #9
   190c4:	bhi	190ec <flatcc_verify_typed_buffer_header@@Base+0x40>
   190c8:	mov	r0, #1
   190cc:	cmp	r1, #8
   190d0:	bxcc	lr
   190d4:	cmp	r2, #0
   190d8:	beq	190f0 <flatcc_verify_typed_buffer_header@@Base+0x44>
   190dc:	ldr	r1, [r3, #4]
   190e0:	mov	r0, #2
   190e4:	cmp	r1, r2
   190e8:	moveq	r0, #0
   190ec:	bx	lr
   190f0:	mov	r0, #0
   190f4:	bx	lr

000190f8 <flatcc_verify_struct_as_root@@Base>:
   190f8:	push	{r4, r5, r6, r7, fp, lr}
   190fc:	add	fp, sp, #16
   19100:	sub	sp, sp, #8
   19104:	mov	r5, r0
   19108:	mov	r0, #5
   1910c:	tst	r5, #3
   19110:	bne	191a8 <flatcc_verify_struct_as_root@@Base+0xb0>
   19114:	mov	r4, r1
   19118:	mov	r0, #6
   1911c:	cmn	r1, #9
   19120:	bhi	191a8 <flatcc_verify_struct_as_root@@Base+0xb0>
   19124:	mov	r0, #1
   19128:	cmp	r4, #8
   1912c:	bcc	191a8 <flatcc_verify_struct_as_root@@Base+0xb0>
   19130:	mov	r6, r3
   19134:	mov	r7, r2
   19138:	cmp	r2, #0
   1913c:	beq	1916c <flatcc_verify_struct_as_root@@Base+0x74>
   19140:	mov	r0, #0
   19144:	mov	r1, r7
   19148:	mov	r2, #4
   1914c:	str	r0, [sp]
   19150:	mov	r0, sp
   19154:	bl	12784 <strncpy@plt>
   19158:	ldr	r0, [sp]
   1915c:	cmp	r0, #0
   19160:	ldrne	r1, [r5, #4]
   19164:	cmpne	r1, r0
   19168:	bne	191b0 <flatcc_verify_struct_as_root@@Base+0xb8>
   1916c:	ldr	r1, [r5]
   19170:	mov	r0, #18
   19174:	sub	r2, r1, #1
   19178:	cmp	r2, r4
   1917c:	bcs	191a8 <flatcc_verify_struct_as_root@@Base+0xb0>
   19180:	adds	r2, r1, r6
   19184:	mov	r0, #10
   19188:	bcs	191a8 <flatcc_verify_struct_as_root@@Base+0xb0>
   1918c:	mov	r0, #9
   19190:	cmp	r2, r4
   19194:	bhi	191a8 <flatcc_verify_struct_as_root@@Base+0xb0>
   19198:	ldr	r0, [fp, #8]
   1919c:	sub	r0, r0, #1
   191a0:	ands	r0, r1, r0
   191a4:	movwne	r0, #11
   191a8:	sub	sp, fp, #16
   191ac:	pop	{r4, r5, r6, r7, fp, pc}
   191b0:	mov	r0, #0
   191b4:	mov	r1, r7
   191b8:	mov	r2, #4
   191bc:	str	r0, [sp, #4]
   191c0:	add	r0, sp, #4
   191c4:	bl	12784 <strncpy@plt>
   191c8:	ldr	r1, [sp, #4]
   191cc:	ldr	r0, [r5, #4]
   191d0:	subs	r0, r0, r1
   191d4:	movwne	r0, #2
   191d8:	cmp	r1, #0
   191dc:	moveq	r0, r1
   191e0:	sub	sp, fp, #16
   191e4:	pop	{r4, r5, r6, r7, fp, pc}

000191e8 <flatcc_verify_struct_as_typed_root@@Base>:
   191e8:	push	{fp, lr}
   191ec:	mov	fp, sp
   191f0:	mov	ip, r0
   191f4:	mov	r0, #5
   191f8:	tst	ip, #3
   191fc:	bne	1926c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19200:	mov	r0, #6
   19204:	cmn	r1, #9
   19208:	bhi	1926c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   1920c:	mov	r0, #1
   19210:	cmp	r1, #8
   19214:	bcc	1926c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19218:	cmp	r2, #0
   1921c:	beq	19230 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   19220:	ldr	lr, [ip, #4]
   19224:	mov	r0, #2
   19228:	cmp	lr, r2
   1922c:	bne	1926c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19230:	ldr	ip, [ip]
   19234:	mov	r0, #18
   19238:	sub	r2, ip, #1
   1923c:	cmp	r2, r1
   19240:	bcs	1926c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19244:	adds	r3, ip, r3
   19248:	mov	r0, #10
   1924c:	bcs	1926c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19250:	mov	r0, #9
   19254:	cmp	r3, r1
   19258:	pophi	{fp, pc}
   1925c:	ldr	r0, [fp, #8]
   19260:	sub	r0, r0, #1
   19264:	ands	r0, ip, r0
   19268:	movwne	r0, #11
   1926c:	pop	{fp, pc}

00019270 <flatcc_verify_table_as_root@@Base>:
   19270:	push	{r4, r5, r6, r7, fp, lr}
   19274:	add	fp, sp, #16
   19278:	sub	sp, sp, #24
   1927c:	mov	r4, r0
   19280:	mov	r0, #5
   19284:	tst	r4, #3
   19288:	bne	19394 <flatcc_verify_table_as_root@@Base+0x124>
   1928c:	mov	r6, r1
   19290:	mov	r0, #6
   19294:	cmn	r1, #9
   19298:	bhi	19394 <flatcc_verify_table_as_root@@Base+0x124>
   1929c:	mov	r0, #1
   192a0:	cmp	r6, #8
   192a4:	bcc	19394 <flatcc_verify_table_as_root@@Base+0x124>
   192a8:	mov	r5, r3
   192ac:	mov	r7, r2
   192b0:	cmp	r2, #0
   192b4:	beq	192e4 <flatcc_verify_table_as_root@@Base+0x74>
   192b8:	mov	r0, #0
   192bc:	mov	r1, r7
   192c0:	mov	r2, #4
   192c4:	str	r0, [sp]
   192c8:	mov	r0, sp
   192cc:	bl	12784 <strncpy@plt>
   192d0:	ldr	r0, [sp]
   192d4:	cmp	r0, #0
   192d8:	ldrne	r1, [r4, #4]
   192dc:	cmpne	r1, r0
   192e0:	bne	1939c <flatcc_verify_table_as_root@@Base+0x12c>
   192e4:	ldr	r1, [r4]
   192e8:	mov	r0, #99	; 0x63
   192ec:	str	r0, [sp, #8]
   192f0:	mov	r0, #15
   192f4:	tst	r1, #3
   192f8:	bne	19394 <flatcc_verify_table_as_root@@Base+0x124>
   192fc:	cmp	r1, #0
   19300:	beq	19394 <flatcc_verify_table_as_root@@Base+0x124>
   19304:	add	r2, r1, #4
   19308:	cmp	r2, r6
   1930c:	bhi	19394 <flatcc_verify_table_as_root@@Base+0x124>
   19310:	str	r1, [sp, #16]
   19314:	ldr	r0, [r4, r1]
   19318:	sub	r7, r1, r0
   1931c:	mov	r0, #29
   19320:	tst	r7, #-2147483647	; 0x80000001
   19324:	bne	19394 <flatcc_verify_table_as_root@@Base+0x124>
   19328:	add	r3, r7, #2
   1932c:	mov	r0, #27
   19330:	cmp	r3, r6
   19334:	bhi	19394 <flatcc_verify_table_as_root@@Base+0x124>
   19338:	mov	ip, r4
   1933c:	mov	r0, #30
   19340:	ldrh	r2, [ip, r7]!
   19344:	tst	r2, #1
   19348:	strh	r2, [sp, #22]
   1934c:	bne	19394 <flatcc_verify_table_as_root@@Base+0x124>
   19350:	add	r7, r7, r2
   19354:	cmp	r7, r6
   19358:	bhi	19394 <flatcc_verify_table_as_root@@Base+0x124>
   1935c:	mov	r0, #28
   19360:	cmp	r2, #4
   19364:	bcc	19394 <flatcc_verify_table_as_root@@Base+0x124>
   19368:	add	r0, r4, r3
   1936c:	sub	r1, r6, r1
   19370:	ldrh	r2, [r0]
   19374:	mov	r0, #20
   19378:	cmp	r1, r2
   1937c:	strh	r2, [sp, #20]
   19380:	bcc	19394 <flatcc_verify_table_as_root@@Base+0x124>
   19384:	mov	r0, sp
   19388:	str	ip, [sp, #12]
   1938c:	stm	sp, {r4, r6}
   19390:	blx	r5
   19394:	sub	sp, fp, #16
   19398:	pop	{r4, r5, r6, r7, fp, pc}
   1939c:	mov	r0, #0
   193a0:	mov	r1, r7
   193a4:	mov	r2, #4
   193a8:	str	r0, [sp]
   193ac:	mov	r0, sp
   193b0:	bl	12784 <strncpy@plt>
   193b4:	ldr	r1, [sp]
   193b8:	ldr	r0, [r4, #4]
   193bc:	subs	r0, r0, r1
   193c0:	movwne	r0, #2
   193c4:	cmp	r1, #0
   193c8:	moveq	r0, r1
   193cc:	sub	sp, fp, #16
   193d0:	pop	{r4, r5, r6, r7, fp, pc}

000193d4 <flatcc_verify_table_as_typed_root@@Base>:
   193d4:	push	{r4, r5, r6, sl, fp, lr}
   193d8:	add	fp, sp, #16
   193dc:	sub	sp, sp, #24
   193e0:	mov	ip, #5
   193e4:	tst	r0, #3
   193e8:	bne	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   193ec:	mov	ip, #6
   193f0:	cmn	r1, #9
   193f4:	bhi	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   193f8:	mov	ip, #1
   193fc:	cmp	r1, #8
   19400:	bcc	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19404:	cmp	r2, #0
   19408:	beq	1941c <flatcc_verify_table_as_typed_root@@Base+0x48>
   1940c:	ldr	r6, [r0, #4]
   19410:	mov	ip, #2
   19414:	cmp	r6, r2
   19418:	bne	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1941c:	ldr	r2, [r0]
   19420:	mov	r6, #99	; 0x63
   19424:	mov	ip, #15
   19428:	str	r6, [sp, #8]
   1942c:	tst	r2, #3
   19430:	bne	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19434:	cmp	r2, #0
   19438:	beq	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1943c:	add	r6, r2, #4
   19440:	cmp	r6, r1
   19444:	bhi	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19448:	str	r2, [sp, #16]
   1944c:	mov	ip, #29
   19450:	ldr	r6, [r0, r2]
   19454:	sub	r5, r2, r6
   19458:	tst	r5, #-2147483647	; 0x80000001
   1945c:	bne	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19460:	add	r4, r5, #2
   19464:	mov	ip, #27
   19468:	cmp	r4, r1
   1946c:	bhi	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19470:	mov	lr, r0
   19474:	mov	ip, #30
   19478:	ldrh	r6, [lr, r5]!
   1947c:	tst	r6, #1
   19480:	strh	r6, [sp, #22]
   19484:	bne	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19488:	add	r5, r5, r6
   1948c:	cmp	r5, r1
   19490:	bhi	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19494:	mov	ip, #28
   19498:	cmp	r6, #4
   1949c:	bcc	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194a0:	add	r6, r0, r4
   194a4:	sub	r2, r1, r2
   194a8:	mov	ip, #20
   194ac:	ldrh	r4, [r6]
   194b0:	cmp	r2, r4
   194b4:	strh	r4, [sp, #20]
   194b8:	bcc	194d0 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194bc:	str	lr, [sp, #12]
   194c0:	stm	sp, {r0, r1}
   194c4:	mov	r0, sp
   194c8:	blx	r3
   194cc:	mov	ip, r0
   194d0:	mov	r0, ip
   194d4:	sub	sp, fp, #16
   194d8:	pop	{r4, r5, r6, sl, fp, pc}

000194dc <flatcc_verify_struct_as_nested_root@@Base>:
   194dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   194e0:	add	fp, sp, #24
   194e4:	sub	sp, sp, #8
   194e8:	ldrh	r6, [r0, #22]
   194ec:	mov	r4, r3
   194f0:	mov	r3, #4
   194f4:	ldr	r9, [fp, #12]
   194f8:	add	r3, r3, r1, lsl #1
   194fc:	uxth	r7, r3
   19500:	cmp	r7, r6
   19504:	bcs	19588 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   19508:	ldr	r1, [r0, #12]
   1950c:	ldrh	r5, [r1, r7]!
   19510:	cmp	r5, #0
   19514:	beq	19588 <flatcc_verify_struct_as_nested_root@@Base+0xac>
   19518:	ldrh	r3, [r0, #20]
   1951c:	add	r7, r5, #4
   19520:	cmp	r7, r3
   19524:	bhi	195a0 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   19528:	ldr	r3, [r0, #16]
   1952c:	add	r6, r3, r5
   19530:	tst	r6, #3
   19534:	bne	195a0 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   19538:	cmp	r6, #0
   1953c:	beq	1965c <flatcc_verify_struct_as_nested_root@@Base+0x180>
   19540:	ldr	r3, [r0]
   19544:	ldr	r7, [r3, r6]
   19548:	add	r7, r7, r6
   1954c:	cmp	r7, r6
   19550:	bls	195a0 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   19554:	ldr	r6, [r0, #4]
   19558:	add	r5, r7, #4
   1955c:	cmp	r5, r6
   19560:	bhi	195a0 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   19564:	ands	r5, r5, #3
   19568:	bne	195a0 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   1956c:	ldr	r3, [r3, r7]
   19570:	sub	r6, r6, #4
   19574:	sub	r6, r6, r7
   19578:	mul	r3, r3, r9
   1957c:	cmp	r6, r3
   19580:	bcc	195a0 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   19584:	b	1965c <flatcc_verify_struct_as_nested_root@@Base+0x180>
   19588:	cmp	r2, #0
   1958c:	beq	19648 <flatcc_verify_struct_as_nested_root@@Base+0x16c>
   19590:	cmp	r7, r6
   19594:	bcs	19634 <flatcc_verify_struct_as_nested_root@@Base+0x158>
   19598:	ldr	r1, [r0, #12]
   1959c:	uxtah	r1, r1, r3
   195a0:	ldrh	r1, [r1]
   195a4:	cmp	r1, #0
   195a8:	beq	19634 <flatcc_verify_struct_as_nested_root@@Base+0x158>
   195ac:	ldrh	r3, [r0, #20]
   195b0:	add	r7, r1, #4
   195b4:	mov	r2, #13
   195b8:	cmp	r7, r3
   195bc:	bhi	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   195c0:	ldr	r2, [r0, #16]
   195c4:	add	r7, r2, r1
   195c8:	mov	r2, #12
   195cc:	tst	r7, #3
   195d0:	bne	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   195d4:	cmp	r7, #0
   195d8:	beq	19734 <flatcc_verify_struct_as_nested_root@@Base+0x258>
   195dc:	ldr	r1, [r0]
   195e0:	ldr	r2, [r1, r7]
   195e4:	add	r3, r2, r7
   195e8:	mov	r2, #16
   195ec:	cmp	r3, r7
   195f0:	bls	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   195f4:	ldr	r0, [r0, #4]
   195f8:	add	r7, r3, #4
   195fc:	cmp	r7, r0
   19600:	bhi	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   19604:	ands	r7, r7, #3
   19608:	bne	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   1960c:	ldr	r1, [r1, r3]
   19610:	sub	r0, r0, #4
   19614:	mov	r2, #0
   19618:	sub	r0, r0, r3
   1961c:	mul	r1, r1, r9
   19620:	cmp	r0, r1
   19624:	movwcc	r2, #26
   19628:	mov	r0, r2
   1962c:	sub	sp, fp, #24
   19630:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19634:	cmp	r2, #0
   19638:	movwne	r2, #4
   1963c:	mov	r0, r2
   19640:	sub	sp, fp, #24
   19644:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19648:	mov	r2, #0
   1964c:	cmp	r7, r6
   19650:	bcs	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   19654:	ldr	r1, [r0, #12]
   19658:	uxtah	r1, r1, r3
   1965c:	ldrh	r1, [r1]
   19660:	mov	r2, #0
   19664:	cmp	r1, #0
   19668:	ldrne	r3, [r0]
   1966c:	ldrne	r0, [r0, #16]
   19670:	addne	r0, r3, r0
   19674:	addsne	r0, r0, r1
   19678:	bne	19688 <flatcc_verify_struct_as_nested_root@@Base+0x1ac>
   1967c:	mov	r0, r2
   19680:	sub	sp, fp, #24
   19684:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19688:	ldr	r7, [r0]
   1968c:	mov	r2, #5
   19690:	ldr	r8, [r7, r0]!
   19694:	add	r6, r7, #4
   19698:	tst	r6, #3
   1969c:	bne	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   196a0:	mov	r2, #6
   196a4:	cmn	r8, #9
   196a8:	bhi	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   196ac:	mov	r2, #1
   196b0:	cmp	r8, #8
   196b4:	bcc	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   196b8:	cmp	r4, #0
   196bc:	beq	196ec <flatcc_verify_struct_as_nested_root@@Base+0x210>
   196c0:	mov	r0, #0
   196c4:	mov	r1, r4
   196c8:	mov	r2, #4
   196cc:	str	r0, [sp]
   196d0:	mov	r0, sp
   196d4:	bl	12784 <strncpy@plt>
   196d8:	ldr	r0, [sp]
   196dc:	cmp	r0, #0
   196e0:	ldrne	r1, [r7, #8]
   196e4:	cmpne	r1, r0
   196e8:	bne	19744 <flatcc_verify_struct_as_nested_root@@Base+0x268>
   196ec:	ldr	r0, [r6]
   196f0:	mov	r2, #18
   196f4:	sub	r1, r0, #1
   196f8:	cmp	r1, r8
   196fc:	bcs	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   19700:	ldr	r1, [fp, #8]
   19704:	mov	r2, #10
   19708:	adds	r1, r0, r1
   1970c:	bcs	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   19710:	mov	r2, #9
   19714:	cmp	r1, r8
   19718:	bhi	1967c <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   1971c:	sub	r1, r9, #1
   19720:	ands	r2, r0, r1
   19724:	movwne	r2, #11
   19728:	mov	r0, r2
   1972c:	sub	sp, fp, #24
   19730:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19734:	mov	r2, #0
   19738:	mov	r0, r2
   1973c:	sub	sp, fp, #24
   19740:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19744:	mov	r0, #0
   19748:	mov	r1, r4
   1974c:	mov	r2, #4
   19750:	str	r0, [sp, #4]
   19754:	add	r0, sp, #4
   19758:	bl	12784 <strncpy@plt>
   1975c:	ldr	r0, [sp, #4]
   19760:	ldr	r1, [r7, #8]
   19764:	subs	r2, r1, r0
   19768:	movwne	r2, #2
   1976c:	cmp	r0, #0
   19770:	moveq	r2, r0
   19774:	mov	r0, r2
   19778:	sub	sp, fp, #24
   1977c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00019780 <flatcc_verify_table_as_nested_root@@Base>:
   19780:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19784:	add	fp, sp, #24
   19788:	sub	sp, sp, #24
   1978c:	mov	r4, r0
   19790:	mov	r0, #4
   19794:	ldr	ip, [fp, #8]
   19798:	mov	r5, r3
   1979c:	ldrh	r6, [r4, #22]
   197a0:	add	r3, r0, r1, lsl #1
   197a4:	uxth	r7, r3
   197a8:	cmp	r7, r6
   197ac:	bcs	19830 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   197b0:	ldr	r1, [r4, #12]
   197b4:	ldrh	r0, [r1, r7]!
   197b8:	cmp	r0, #0
   197bc:	beq	19830 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   197c0:	ldrh	r3, [r4, #20]
   197c4:	add	r7, r0, #4
   197c8:	cmp	r7, r3
   197cc:	bhi	19848 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   197d0:	ldr	r3, [r4, #16]
   197d4:	add	r0, r3, r0
   197d8:	tst	r0, #3
   197dc:	bne	19848 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   197e0:	cmp	r0, #0
   197e4:	beq	19904 <flatcc_verify_table_as_nested_root@@Base+0x184>
   197e8:	ldr	r3, [r4]
   197ec:	ldr	r7, [r3, r0]
   197f0:	add	r7, r7, r0
   197f4:	cmp	r7, r0
   197f8:	bls	19848 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   197fc:	ldr	r0, [r4, #4]
   19800:	add	r6, r7, #4
   19804:	cmp	r6, r0
   19808:	bhi	19848 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1980c:	ands	r6, r6, #3
   19810:	bne	19848 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19814:	ldr	r3, [r3, r7]
   19818:	sub	r0, r0, #4
   1981c:	sub	r0, r0, r7
   19820:	mul	r3, r3, ip
   19824:	cmp	r0, r3
   19828:	bcc	19848 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1982c:	b	19904 <flatcc_verify_table_as_nested_root@@Base+0x184>
   19830:	cmp	r2, #0
   19834:	beq	198f0 <flatcc_verify_table_as_nested_root@@Base+0x170>
   19838:	cmp	r7, r6
   1983c:	bcs	198dc <flatcc_verify_table_as_nested_root@@Base+0x15c>
   19840:	ldr	r0, [r4, #12]
   19844:	uxtah	r1, r0, r3
   19848:	ldrh	r0, [r1]
   1984c:	cmp	r0, #0
   19850:	beq	198dc <flatcc_verify_table_as_nested_root@@Base+0x15c>
   19854:	ldrh	r1, [r4, #20]
   19858:	add	r3, r0, #4
   1985c:	mov	r2, #13
   19860:	cmp	r3, r1
   19864:	bhi	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   19868:	ldr	r1, [r4, #16]
   1986c:	mov	r2, #12
   19870:	add	r0, r1, r0
   19874:	tst	r0, #3
   19878:	bne	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   1987c:	cmp	r0, #0
   19880:	beq	19a60 <flatcc_verify_table_as_nested_root@@Base+0x2e0>
   19884:	ldr	r1, [r4]
   19888:	ldr	r2, [r1, r0]
   1988c:	add	r3, r2, r0
   19890:	mov	r2, #16
   19894:	cmp	r3, r0
   19898:	bls	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   1989c:	ldr	r0, [r4, #4]
   198a0:	add	r7, r3, #4
   198a4:	cmp	r7, r0
   198a8:	bhi	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   198ac:	ands	r7, r7, #3
   198b0:	bne	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   198b4:	ldr	r1, [r1, r3]
   198b8:	sub	r0, r0, #4
   198bc:	mov	r2, #0
   198c0:	sub	r0, r0, r3
   198c4:	mul	r1, r1, ip
   198c8:	cmp	r0, r1
   198cc:	movwcc	r2, #26
   198d0:	mov	r0, r2
   198d4:	sub	sp, fp, #24
   198d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   198dc:	cmp	r2, #0
   198e0:	movwne	r2, #4
   198e4:	mov	r0, r2
   198e8:	sub	sp, fp, #24
   198ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   198f0:	mov	r2, #0
   198f4:	cmp	r7, r6
   198f8:	bcs	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   198fc:	ldr	r0, [r4, #12]
   19900:	uxtah	r1, r0, r3
   19904:	ldrh	r0, [r1]
   19908:	mov	r2, #0
   1990c:	cmp	r0, #0
   19910:	ldrne	r1, [r4]
   19914:	ldrne	r3, [r4, #16]
   19918:	addne	r1, r1, r3
   1991c:	addsne	r0, r1, r0
   19920:	bne	19930 <flatcc_verify_table_as_nested_root@@Base+0x1b0>
   19924:	mov	r0, r2
   19928:	sub	sp, fp, #24
   1992c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19930:	ldr	r6, [r0]
   19934:	mov	r2, #5
   19938:	ldr	r8, [r6, r0]!
   1993c:	add	r7, r6, #4
   19940:	tst	r7, #3
   19944:	bne	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   19948:	mov	r2, #6
   1994c:	cmn	r8, #9
   19950:	bhi	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   19954:	mov	r2, #1
   19958:	cmp	r8, #8
   1995c:	bcc	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   19960:	cmp	r5, #0
   19964:	beq	19994 <flatcc_verify_table_as_nested_root@@Base+0x214>
   19968:	mov	r0, #0
   1996c:	mov	r1, r5
   19970:	mov	r2, #4
   19974:	str	r0, [sp]
   19978:	mov	r0, sp
   1997c:	bl	12784 <strncpy@plt>
   19980:	ldr	r0, [sp]
   19984:	cmp	r0, #0
   19988:	ldrne	r1, [r6, #8]
   1998c:	cmpne	r1, r0
   19990:	bne	19a70 <flatcc_verify_table_as_nested_root@@Base+0x2f0>
   19994:	ldr	r1, [r4, #8]
   19998:	ldr	r0, [r7]
   1999c:	subs	r1, r1, #1
   199a0:	str	r1, [sp, #8]
   199a4:	beq	19aa8 <flatcc_verify_table_as_nested_root@@Base+0x328>
   199a8:	mov	r2, #15
   199ac:	tst	r0, #3
   199b0:	bne	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   199b4:	cmp	r0, #0
   199b8:	beq	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   199bc:	add	r1, r0, #4
   199c0:	cmp	r1, r8
   199c4:	bhi	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   199c8:	str	r0, [sp, #16]
   199cc:	mov	r2, #29
   199d0:	ldr	r1, [r7, r0]
   199d4:	sub	r6, r0, r1
   199d8:	tst	r6, #-2147483647	; 0x80000001
   199dc:	bne	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   199e0:	add	r3, r6, #2
   199e4:	mov	r2, #27
   199e8:	cmp	r3, r8
   199ec:	bhi	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   199f0:	mov	r1, r7
   199f4:	mov	r2, #30
   199f8:	ldrh	r5, [r1, r6]!
   199fc:	tst	r5, #1
   19a00:	strh	r5, [sp, #22]
   19a04:	bne	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   19a08:	add	r6, r6, r5
   19a0c:	cmp	r6, r8
   19a10:	bhi	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   19a14:	mov	r2, #28
   19a18:	cmp	r5, #4
   19a1c:	bcc	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   19a20:	add	r2, r7, r3
   19a24:	sub	r0, r8, r0
   19a28:	ldrh	r3, [r2]
   19a2c:	mov	r2, #20
   19a30:	cmp	r0, r3
   19a34:	strh	r3, [sp, #20]
   19a38:	bcc	19924 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   19a3c:	ldr	r2, [fp, #12]
   19a40:	mov	r0, sp
   19a44:	str	r1, [sp, #12]
   19a48:	stm	sp, {r7, r8}
   19a4c:	blx	r2
   19a50:	mov	r2, r0
   19a54:	mov	r0, r2
   19a58:	sub	sp, fp, #24
   19a5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19a60:	mov	r2, #0
   19a64:	mov	r0, r2
   19a68:	sub	sp, fp, #24
   19a6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19a70:	mov	r0, #0
   19a74:	mov	r1, r5
   19a78:	mov	r2, #4
   19a7c:	str	r0, [sp]
   19a80:	mov	r0, sp
   19a84:	bl	12784 <strncpy@plt>
   19a88:	ldr	r1, [sp]
   19a8c:	ldr	r0, [r6, #8]
   19a90:	subs	r0, r0, r1
   19a94:	movwne	r0, #2
   19a98:	cmp	r1, #0
   19a9c:	moveq	r0, r1
   19aa0:	sub	sp, fp, #24
   19aa4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19aa8:	mov	r2, #3
   19aac:	mov	r0, r2
   19ab0:	sub	sp, fp, #24
   19ab4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00019ab8 <flatcc_verify_union_field@@Base>:
   19ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19abc:	add	fp, sp, #28
   19ac0:	sub	sp, sp, #28
   19ac4:	ldrh	r4, [r0, #22]
   19ac8:	mov	r7, #2
   19acc:	lsl	r5, r1, #1
   19ad0:	add	r7, r7, r1, lsl #1
   19ad4:	uxth	r6, r7
   19ad8:	cmp	r6, r4
   19adc:	bcs	19bd8 <flatcc_verify_union_field@@Base+0x120>
   19ae0:	ldr	r6, [r0, #12]
   19ae4:	uxtah	r1, r6, r7
   19ae8:	ldrh	ip, [r1]
   19aec:	cmp	ip, #0
   19af0:	beq	19bd8 <flatcc_verify_union_field@@Base+0x120>
   19af4:	ldrh	r7, [r0, #20]
   19af8:	mov	r1, #13
   19afc:	cmp	ip, r7
   19b00:	bcs	19c00 <flatcc_verify_union_field@@Base+0x148>
   19b04:	add	r7, r5, #4
   19b08:	ldr	lr, [r0]
   19b0c:	ldr	r9, [r0, #16]
   19b10:	mov	r1, #1
   19b14:	uxth	sl, r7
   19b18:	cmp	sl, r4
   19b1c:	uxtahcc	r1, r6, r7
   19b20:	ldrhcc	r1, [r1]
   19b24:	add	r8, lr, r9
   19b28:	ldrb	r5, [r8, ip]
   19b2c:	clzcc	r1, r1
   19b30:	lsrcc	r1, r1, #5
   19b34:	cmp	r1, #0
   19b38:	moveq	r1, #24
   19b3c:	cmpeq	r5, #0
   19b40:	beq	19c00 <flatcc_verify_union_field@@Base+0x148>
   19b44:	mov	r1, #0
   19b48:	cmp	r5, #0
   19b4c:	beq	19c00 <flatcc_verify_union_field@@Base+0x148>
   19b50:	cmp	sl, r4
   19b54:	bcs	19c24 <flatcc_verify_union_field@@Base+0x16c>
   19b58:	uxtah	r1, r6, r7
   19b5c:	ldrh	r4, [r1]
   19b60:	cmp	r4, #0
   19b64:	beq	19c24 <flatcc_verify_union_field@@Base+0x16c>
   19b68:	ldrh	r1, [r0, #20]
   19b6c:	add	r2, r4, #4
   19b70:	cmp	r2, r1
   19b74:	mov	r1, #13
   19b78:	bhi	19c00 <flatcc_verify_union_field@@Base+0x148>
   19b7c:	add	r2, r9, r4
   19b80:	mov	r1, #12
   19b84:	tst	r2, #3
   19b88:	bne	19c00 <flatcc_verify_union_field@@Base+0x148>
   19b8c:	cmp	r2, #0
   19b90:	mov	r1, #0
   19b94:	beq	19c00 <flatcc_verify_union_field@@Base+0x148>
   19b98:	str	lr, [sp, #4]
   19b9c:	ldr	r1, [r0, #4]
   19ba0:	ldr	r0, [r0, #8]
   19ba4:	str	r1, [sp, #8]
   19ba8:	str	r2, [sp, #20]
   19bac:	str	r0, [sp, #12]
   19bb0:	ldr	r0, [lr, r2]
   19bb4:	str	r0, [sp, #24]
   19bb8:	ldrb	r0, [r8, ip]
   19bbc:	strb	r0, [sp, #16]
   19bc0:	add	r0, sp, #4
   19bc4:	blx	r3
   19bc8:	mov	r1, r0
   19bcc:	mov	r0, r1
   19bd0:	sub	sp, fp, #28
   19bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bd8:	add	r1, r5, #4
   19bdc:	uxth	r3, r1
   19be0:	cmp	r3, r4
   19be4:	bcs	19c0c <flatcc_verify_union_field@@Base+0x154>
   19be8:	ldr	r0, [r0, #12]
   19bec:	uxtah	r0, r0, r1
   19bf0:	mov	r1, #23
   19bf4:	ldrh	r0, [r0]
   19bf8:	cmp	r0, #0
   19bfc:	beq	19c0c <flatcc_verify_union_field@@Base+0x154>
   19c00:	mov	r0, r1
   19c04:	sub	sp, fp, #28
   19c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c0c:	cmp	r2, #0
   19c10:	movwne	r2, #21
   19c14:	mov	r1, r2
   19c18:	mov	r0, r1
   19c1c:	sub	sp, fp, #28
   19c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c24:	cmp	r2, #0
   19c28:	movwne	r2, #4
   19c2c:	mov	r1, r2
   19c30:	mov	r0, r1
   19c34:	sub	sp, fp, #28
   19c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019c3c <flatcc_verify_union_vector_field@@Base>:
   19c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c40:	add	fp, sp, #28
   19c44:	sub	sp, sp, #28
   19c48:	mov	r9, r3
   19c4c:	mov	r3, #2
   19c50:	lsl	lr, r1, #1
   19c54:	add	r6, r3, r1, lsl #1
   19c58:	ldrh	r3, [r0, #22]
   19c5c:	uxth	r4, r6
   19c60:	cmp	r4, r3
   19c64:	bcs	19c7c <flatcc_verify_union_vector_field@@Base+0x40>
   19c68:	ldr	r7, [r0, #12]
   19c6c:	mov	r1, r7
   19c70:	ldrh	r5, [r1, r4]!
   19c74:	cmp	r5, #0
   19c78:	bne	19cc8 <flatcc_verify_union_vector_field@@Base+0x8c>
   19c7c:	add	r1, lr, #4
   19c80:	uxth	r7, r1
   19c84:	cmp	r7, r3
   19c88:	bcs	19d34 <flatcc_verify_union_vector_field@@Base+0xf8>
   19c8c:	cmp	r2, #0
   19c90:	beq	19cac <flatcc_verify_union_vector_field@@Base+0x70>
   19c94:	ldr	r7, [r0, #12]
   19c98:	uxtah	r1, r7, r1
   19c9c:	ldrh	r7, [r1]
   19ca0:	mov	r1, #22
   19ca4:	cmp	r7, #0
   19ca8:	beq	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19cac:	cmp	r4, r3
   19cb0:	bcs	19d44 <flatcc_verify_union_vector_field@@Base+0x108>
   19cb4:	ldr	r7, [r0, #12]
   19cb8:	mov	r1, r7
   19cbc:	ldrh	r5, [r1, r4]!
   19cc0:	cmp	r5, #0
   19cc4:	beq	19d44 <flatcc_verify_union_vector_field@@Base+0x108>
   19cc8:	ldrh	r6, [r0, #20]
   19ccc:	add	r4, r5, #4
   19cd0:	cmp	r4, r6
   19cd4:	bhi	19d5c <flatcc_verify_union_vector_field@@Base+0x120>
   19cd8:	ldr	r6, [r0, #16]
   19cdc:	add	r4, r6, r5
   19ce0:	tst	r4, #3
   19ce4:	bne	19d5c <flatcc_verify_union_vector_field@@Base+0x120>
   19ce8:	cmp	r4, #0
   19cec:	beq	19e00 <flatcc_verify_union_vector_field@@Base+0x1c4>
   19cf0:	ldr	r6, [r0]
   19cf4:	ldr	r5, [r6, r4]
   19cf8:	add	r5, r5, r4
   19cfc:	cmp	r5, r4
   19d00:	bls	19d5c <flatcc_verify_union_vector_field@@Base+0x120>
   19d04:	ldr	ip, [r0, #4]
   19d08:	add	r4, r5, #4
   19d0c:	cmp	r4, ip
   19d10:	bhi	19d5c <flatcc_verify_union_vector_field@@Base+0x120>
   19d14:	ands	r4, r4, #3
   19d18:	bne	19d5c <flatcc_verify_union_vector_field@@Base+0x120>
   19d1c:	ldr	r4, [r6, r5]
   19d20:	sub	r6, ip, #4
   19d24:	sub	r6, r6, r5
   19d28:	cmp	r6, r4
   19d2c:	bcc	19d5c <flatcc_verify_union_vector_field@@Base+0x120>
   19d30:	b	19e00 <flatcc_verify_union_vector_field@@Base+0x1c4>
   19d34:	mov	r1, #22
   19d38:	cmp	r2, #0
   19d3c:	bne	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19d40:	b	19cac <flatcc_verify_union_vector_field@@Base+0x70>
   19d44:	cmp	r2, #0
   19d48:	beq	19dec <flatcc_verify_union_vector_field@@Base+0x1b0>
   19d4c:	cmp	r4, r3
   19d50:	bcs	19f68 <flatcc_verify_union_vector_field@@Base+0x32c>
   19d54:	ldr	r1, [r0, #12]
   19d58:	uxtah	r1, r1, r6
   19d5c:	ldrh	r3, [r1]
   19d60:	cmp	r3, #0
   19d64:	beq	19f68 <flatcc_verify_union_vector_field@@Base+0x32c>
   19d68:	ldrh	r2, [r0, #20]
   19d6c:	add	r7, r3, #4
   19d70:	mov	r1, #13
   19d74:	cmp	r7, r2
   19d78:	bhi	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19d7c:	ldr	r1, [r0, #16]
   19d80:	add	r7, r1, r3
   19d84:	mov	r1, #12
   19d88:	tst	r7, #3
   19d8c:	bne	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19d90:	cmp	r7, #0
   19d94:	beq	19f80 <flatcc_verify_union_vector_field@@Base+0x344>
   19d98:	ldr	r2, [r0]
   19d9c:	ldr	r1, [r2, r7]
   19da0:	add	r3, r1, r7
   19da4:	mov	r1, #16
   19da8:	cmp	r3, r7
   19dac:	bls	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19db0:	ldr	r0, [r0, #4]
   19db4:	add	r7, r3, #4
   19db8:	cmp	r7, r0
   19dbc:	bhi	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19dc0:	ands	r7, r7, #3
   19dc4:	bne	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19dc8:	ldr	r2, [r2, r3]
   19dcc:	sub	r0, r0, #4
   19dd0:	mov	r1, #0
   19dd4:	sub	r0, r0, r3
   19dd8:	cmp	r0, r2
   19ddc:	movwcc	r1, #26
   19de0:	mov	r0, r1
   19de4:	sub	sp, fp, #28
   19de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dec:	mov	r1, #0
   19df0:	cmp	r4, r3
   19df4:	bcs	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19df8:	ldr	r7, [r0, #12]
   19dfc:	uxtah	r1, r7, r6
   19e00:	ldrh	r5, [r1]
   19e04:	mov	r1, #0
   19e08:	cmp	r5, #0
   19e0c:	ldrne	r8, [r0]
   19e10:	ldrne	r6, [r0, #16]
   19e14:	addne	r4, r8, r6
   19e18:	addsne	ip, r4, r5
   19e1c:	beq	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19e20:	add	r1, lr, #4
   19e24:	uxth	r5, r1
   19e28:	cmp	r5, r3
   19e2c:	bcs	19f68 <flatcc_verify_union_vector_field@@Base+0x32c>
   19e30:	uxtah	r1, r7, r1
   19e34:	ldrh	r3, [r1]
   19e38:	cmp	r3, #0
   19e3c:	beq	19f68 <flatcc_verify_union_vector_field@@Base+0x32c>
   19e40:	ldrh	r2, [r0, #20]
   19e44:	add	r7, r3, #4
   19e48:	mov	r1, #13
   19e4c:	cmp	r7, r2
   19e50:	bhi	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19e54:	add	r4, r6, r3
   19e58:	mov	r1, #12
   19e5c:	tst	r4, #3
   19e60:	bne	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19e64:	cmp	r4, #0
   19e68:	mov	r1, #0
   19e6c:	beq	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19e70:	ldr	r7, [r0, #8]
   19e74:	cmp	r7, #1
   19e78:	blt	19f90 <flatcc_verify_union_vector_field@@Base+0x354>
   19e7c:	ldr	r2, [r8, r4]
   19e80:	mov	r1, #16
   19e84:	add	r5, r2, r4
   19e88:	cmp	r5, r4
   19e8c:	bls	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19e90:	ldr	r0, [r0, #4]
   19e94:	add	r4, r5, #4
   19e98:	cmp	r4, r0
   19e9c:	bhi	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19ea0:	ands	r4, r4, #3
   19ea4:	bne	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19ea8:	ldr	r4, [r8, r5]
   19eac:	mov	r1, #25
   19eb0:	cmn	r4, #-1073741823	; 0xc0000001
   19eb4:	bhi	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19eb8:	sub	r1, r0, #4
   19ebc:	sub	r5, r1, r5
   19ec0:	mov	r1, #26
   19ec4:	cmp	r5, r4, lsl #2
   19ec8:	bcc	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19ecc:	ldr	r5, [ip]
   19ed0:	mov	r1, #34	; 0x22
   19ed4:	ldr	sl, [r5, ip]!
   19ed8:	cmp	r4, sl
   19edc:	bne	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19ee0:	cmp	sl, #0
   19ee4:	sub	r1, r7, #1
   19ee8:	str	r0, [sp, #8]
   19eec:	str	r8, [sp, #4]
   19ef0:	str	r1, [sp, #12]
   19ef4:	beq	19fa0 <flatcc_verify_union_vector_field@@Base+0x364>
   19ef8:	add	r0, r2, r6
   19efc:	add	r7, r5, #4
   19f00:	mov	r5, #0
   19f04:	add	r4, sp, #4
   19f08:	add	r0, r0, r3
   19f0c:	add	r6, r0, #4
   19f10:	ldr	r1, [r8, r6]
   19f14:	ldrb	r0, [r7, r5]
   19f18:	cmp	r1, #0
   19f1c:	beq	19f48 <flatcc_verify_union_vector_field@@Base+0x30c>
   19f20:	cmp	r0, #0
   19f24:	beq	19fb0 <flatcc_verify_union_vector_field@@Base+0x374>
   19f28:	str	r6, [sp, #20]
   19f2c:	strb	r0, [sp, #16]
   19f30:	mov	r0, r4
   19f34:	str	r1, [sp, #24]
   19f38:	blx	r9
   19f3c:	cmp	r0, #0
   19f40:	beq	19f50 <flatcc_verify_union_vector_field@@Base+0x314>
   19f44:	b	19fc0 <flatcc_verify_union_vector_field@@Base+0x384>
   19f48:	cmp	r0, #0
   19f4c:	bne	19fd8 <flatcc_verify_union_vector_field@@Base+0x39c>
   19f50:	add	r5, r5, #1
   19f54:	add	r6, r6, #4
   19f58:	mov	r1, #0
   19f5c:	cmp	r5, sl
   19f60:	bcc	19f10 <flatcc_verify_union_vector_field@@Base+0x2d4>
   19f64:	b	19f74 <flatcc_verify_union_vector_field@@Base+0x338>
   19f68:	cmp	r2, #0
   19f6c:	movwne	r2, #4
   19f70:	mov	r1, r2
   19f74:	mov	r0, r1
   19f78:	sub	sp, fp, #28
   19f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f80:	mov	r1, #0
   19f84:	mov	r0, r1
   19f88:	sub	sp, fp, #28
   19f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f90:	mov	r1, #3
   19f94:	mov	r0, r1
   19f98:	sub	sp, fp, #28
   19f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fa0:	mov	r1, #0
   19fa4:	mov	r0, r1
   19fa8:	sub	sp, fp, #28
   19fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fb0:	mov	r1, #33	; 0x21
   19fb4:	mov	r0, r1
   19fb8:	sub	sp, fp, #28
   19fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fc0:	add	r0, sp, #4
   19fc4:	blx	r9
   19fc8:	mov	r1, r0
   19fcc:	mov	r0, r1
   19fd0:	sub	sp, fp, #28
   19fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fd8:	mov	r1, #32
   19fdc:	mov	r0, r1
   19fe0:	sub	sp, fp, #28
   19fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019fe8 <__libc_csu_init@@Base>:
   19fe8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fec:	mov	r7, r0
   19ff0:	ldr	r6, [pc, #72]	; 1a040 <__libc_csu_init@@Base+0x58>
   19ff4:	ldr	r5, [pc, #72]	; 1a044 <__libc_csu_init@@Base+0x5c>
   19ff8:	add	r6, pc, r6
   19ffc:	add	r5, pc, r5
   1a000:	sub	r6, r6, r5
   1a004:	mov	r8, r1
   1a008:	mov	r9, r2
   1a00c:	bl	126ec <free@plt-0x20>
   1a010:	asrs	r6, r6, #2
   1a014:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a018:	mov	r4, #0
   1a01c:	add	r4, r4, #1
   1a020:	ldr	r3, [r5], #4
   1a024:	mov	r2, r9
   1a028:	mov	r1, r8
   1a02c:	mov	r0, r7
   1a030:	blx	r3
   1a034:	cmp	r6, r4
   1a038:	bne	1a01c <__libc_csu_init@@Base+0x34>
   1a03c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a040:	andeq	r1, r1, ip, lsl #30
   1a044:	andeq	r1, r1, r4, lsl #30

0001a048 <__libc_csu_fini@@Base>:
   1a048:	bx	lr

Disassembly of section .fini:

0001a04c <.fini>:
   1a04c:	push	{r3, lr}
   1a050:	pop	{r3, pc}
