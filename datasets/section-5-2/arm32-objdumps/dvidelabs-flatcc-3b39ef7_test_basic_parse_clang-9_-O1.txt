
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128d4 <.init>:
   128d4:	push	{r3, lr}
   128d8:	bl	12a0c <_start@@Base+0x3c>
   128dc:	pop	{r3, pc}

Disassembly of section .plt:

000128e0 <free@plt-0x14>:
   128e0:	push	{lr}		; (str lr, [sp, #-4]!)
   128e4:	ldr	lr, [pc, #4]	; 128f0 <free@plt-0x4>
   128e8:	add	lr, pc, lr
   128ec:	ldr	pc, [lr, #8]!
   128f0:	andeq	fp, r1, r0, lsl r7

000128f4 <free@plt>:
   128f4:	add	ip, pc, #0, 12
   128f8:	add	ip, ip, #110592	; 0x1b000
   128fc:	ldr	pc, [ip, #1808]!	; 0x710

00012900 <memcpy@plt>:
   12900:	add	ip, pc, #0, 12
   12904:	add	ip, ip, #110592	; 0x1b000
   12908:	ldr	pc, [ip, #1800]!	; 0x708

0001290c <__isinff@plt>:
   1290c:	add	ip, pc, #0, 12
   12910:	add	ip, ip, #110592	; 0x1b000
   12914:	ldr	pc, [ip, #1792]!	; 0x700

00012918 <__isinf@plt>:
   12918:	add	ip, pc, #0, 12
   1291c:	add	ip, ip, #110592	; 0x1b000
   12920:	ldr	pc, [ip, #1784]!	; 0x6f8

00012924 <realloc@plt>:
   12924:	add	ip, pc, #0, 12
   12928:	add	ip, ip, #110592	; 0x1b000
   1292c:	ldr	pc, [ip, #1776]!	; 0x6f0

00012930 <fwrite@plt>:
   12930:	add	ip, pc, #0, 12
   12934:	add	ip, ip, #110592	; 0x1b000
   12938:	ldr	pc, [ip, #1768]!	; 0x6e8

0001293c <malloc@plt>:
   1293c:	add	ip, pc, #0, 12
   12940:	add	ip, ip, #110592	; 0x1b000
   12944:	ldr	pc, [ip, #1760]!	; 0x6e0

00012948 <__libc_start_main@plt>:
   12948:	add	ip, pc, #0, 12
   1294c:	add	ip, ip, #110592	; 0x1b000
   12950:	ldr	pc, [ip, #1752]!	; 0x6d8

00012954 <__gmon_start__@plt>:
   12954:	add	ip, pc, #0, 12
   12958:	add	ip, ip, #110592	; 0x1b000
   1295c:	ldr	pc, [ip, #1744]!	; 0x6d0

00012960 <bcmp@plt>:
   12960:	add	ip, pc, #0, 12
   12964:	add	ip, ip, #110592	; 0x1b000
   12968:	ldr	pc, [ip, #1736]!	; 0x6c8

0001296c <strlen@plt>:
   1296c:	add	ip, pc, #0, 12
   12970:	add	ip, ip, #110592	; 0x1b000
   12974:	ldr	pc, [ip, #1728]!	; 0x6c0

00012978 <fprintf@plt>:
   12978:	add	ip, pc, #0, 12
   1297c:	add	ip, ip, #110592	; 0x1b000
   12980:	ldr	pc, [ip, #1720]!	; 0x6b8

00012984 <posix_memalign@plt>:
   12984:	add	ip, pc, #0, 12
   12988:	add	ip, ip, #110592	; 0x1b000
   1298c:	ldr	pc, [ip, #1712]!	; 0x6b0

00012990 <memset@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #110592	; 0x1b000
   12998:	ldr	pc, [ip, #1704]!	; 0x6a8

0001299c <strtod@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #110592	; 0x1b000
   129a4:	ldr	pc, [ip, #1696]!	; 0x6a0

000129a8 <memchr@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #110592	; 0x1b000
   129b0:	ldr	pc, [ip, #1688]!	; 0x698

000129b4 <abort@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #110592	; 0x1b000
   129bc:	ldr	pc, [ip, #1680]!	; 0x690

000129c0 <__assert_fail@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #110592	; 0x1b000
   129c8:	ldr	pc, [ip, #1672]!	; 0x688

Disassembly of section .text:

000129d0 <_start@@Base>:
   129d0:	mov	fp, #0
   129d4:	mov	lr, #0
   129d8:	pop	{r1}		; (ldr r1, [sp], #4)
   129dc:	mov	r2, sp
   129e0:	push	{r2}		; (str r2, [sp, #-4]!)
   129e4:	push	{r0}		; (str r0, [sp, #-4]!)
   129e8:	ldr	ip, [pc, #16]	; 12a00 <_start@@Base+0x30>
   129ec:	push	{ip}		; (str ip, [sp, #-4]!)
   129f0:	ldr	r0, [pc, #12]	; 12a04 <_start@@Base+0x34>
   129f4:	ldr	r3, [pc, #12]	; 12a08 <_start@@Base+0x38>
   129f8:	bl	12948 <__libc_start_main@plt>
   129fc:	bl	129b4 <abort@plt>
   12a00:	andeq	sl, r1, r8, lsr #23
   12a04:	andeq	r3, r1, r0, lsr r6
   12a08:	andeq	sl, r1, r8, asr #22
   12a0c:	ldr	r3, [pc, #20]	; 12a28 <_start@@Base+0x58>
   12a10:	ldr	r2, [pc, #20]	; 12a2c <_start@@Base+0x5c>
   12a14:	add	r3, pc, r3
   12a18:	ldr	r2, [r3, r2]
   12a1c:	cmp	r2, #0
   12a20:	bxeq	lr
   12a24:	b	12954 <__gmon_start__@plt>
   12a28:	andeq	fp, r1, r4, ror #11
   12a2c:	andeq	r0, r0, r4, asr r0
   12a30:	ldr	r0, [pc, #24]	; 12a50 <_start@@Base+0x80>
   12a34:	ldr	r3, [pc, #24]	; 12a54 <_start@@Base+0x84>
   12a38:	cmp	r3, r0
   12a3c:	bxeq	lr
   12a40:	ldr	r3, [pc, #16]	; 12a58 <_start@@Base+0x88>
   12a44:	cmp	r3, #0
   12a48:	bxeq	lr
   12a4c:	bx	r3
   12a50:	andeq	lr, r2, r0, rrx
   12a54:	andeq	lr, r2, r0, rrx
   12a58:	andeq	r0, r0, r0
   12a5c:	ldr	r0, [pc, #36]	; 12a88 <_start@@Base+0xb8>
   12a60:	ldr	r1, [pc, #36]	; 12a8c <_start@@Base+0xbc>
   12a64:	sub	r1, r1, r0
   12a68:	asr	r1, r1, #2
   12a6c:	add	r1, r1, r1, lsr #31
   12a70:	asrs	r1, r1, #1
   12a74:	bxeq	lr
   12a78:	ldr	r3, [pc, #16]	; 12a90 <_start@@Base+0xc0>
   12a7c:	cmp	r3, #0
   12a80:	bxeq	lr
   12a84:	bx	r3
   12a88:	andeq	lr, r2, r0, rrx
   12a8c:	andeq	lr, r2, r0, rrx
   12a90:	andeq	r0, r0, r0
   12a94:	push	{r4, lr}
   12a98:	ldr	r4, [pc, #24]	; 12ab8 <_start@@Base+0xe8>
   12a9c:	ldrb	r3, [r4]
   12aa0:	cmp	r3, #0
   12aa4:	popne	{r4, pc}
   12aa8:	bl	12a30 <_start@@Base+0x60>
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [r4]
   12ab4:	pop	{r4, pc}
   12ab8:	andeq	lr, r2, r4, rrx
   12abc:	b	12a5c <_start@@Base+0x8c>

00012ac0 <test@@Base>:
   12ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac4:	add	fp, sp, #28
   12ac8:	sub	sp, sp, #68	; 0x44
   12acc:	str	r3, [sp, #8]
   12ad0:	mov	r8, r2
   12ad4:	mov	r4, r1
   12ad8:	add	r6, sp, #24
   12adc:	vmov.i32	q8, #0	; 0x00000000
   12ae0:	add	r1, r6, #16
   12ae4:	vst1.64	{d16-d17}, [r1]
   12ae8:	mov	r2, #28
   12aec:	mov	r1, r6
   12af0:	vst1.64	{d16-d17}, [r1], r2
   12af4:	vst1.32	{d16-d17}, [r1]
   12af8:	str	r4, [sp, #28]
   12afc:	mov	r1, #1
   12b00:	str	r1, [sp, #40]	; 0x28
   12b04:	movw	r1, #44610	; 0xae42
   12b08:	movt	r1, #1
   12b0c:	str	r0, [sp, #16]
   12b10:	mov	r2, #0
   12b14:	mov	r3, #0
   12b18:	bl	142c4 <flatcc_builder_start_buffer@@Base>
   12b1c:	mov	r0, r6
   12b20:	mov	r1, r4
   12b24:	mov	r2, r8
   12b28:	bl	132b4 <test@@Base+0x7f4>
   12b2c:	mov	r7, r0
   12b30:	cmp	r0, r8
   12b34:	beq	13158 <test@@Base+0x698>
   12b38:	bcs	13198 <test@@Base+0x6d8>
   12b3c:	ldrb	r0, [r7]
   12b40:	cmp	r0, #123	; 0x7b
   12b44:	bne	13198 <test@@Base+0x6d8>
   12b48:	add	r1, r7, #1
   12b4c:	add	r0, sp, #24
   12b50:	mov	r2, r8
   12b54:	bl	132b4 <test@@Base+0x7f4>
   12b58:	mov	r7, r0
   12b5c:	cmp	r0, r8
   12b60:	beq	13158 <test@@Base+0x698>
   12b64:	ldr	r0, [sp, #16]
   12b68:	mov	r1, #11
   12b6c:	bl	14fb0 <flatcc_builder_start_table@@Base>
   12b70:	add	r3, sp, #20
   12b74:	add	r0, r3, #1
   12b78:	str	r0, [sp, #12]
   12b7c:	add	r9, sp, #24
   12b80:	movw	r4, #27764	; 0x6c74
   12b84:	movt	r4, #31349	; 0x7a75
   12b88:	movw	sl, #29472	; 0x7320
   12b8c:	movt	sl, #28260	; 0x6e64
   12b90:	mov	r0, r9
   12b94:	mov	r1, r7
   12b98:	mov	r2, r8
   12b9c:	bl	132ec <test@@Base+0x82c>
   12ba0:	mov	r7, r0
   12ba4:	sub	r0, r8, r0
   12ba8:	cmp	r0, #8
   12bac:	mov	r6, r8
   12bb0:	addgt	r6, r7, #8
   12bb4:	mov	r0, r7
   12bb8:	mov	r1, r8
   12bbc:	bl	13330 <test@@Base+0x870>
   12bc0:	mov	r2, r0
   12bc4:	bfc	r2, #0, #16
   12bc8:	movw	r3, #0
   12bcc:	movt	r3, #28260	; 0x6e64
   12bd0:	subs	r3, r2, r3
   12bd4:	movw	r5, #25455	; 0x636f
   12bd8:	movt	r5, #29541	; 0x7365
   12bdc:	sbcs	r3, r1, r5
   12be0:	bcs	12ca0 <test@@Base+0x1e0>
   12be4:	movw	r2, #29299	; 0x7273
   12be8:	movt	r2, #26217	; 0x6669
   12bec:	eor	r1, r1, r2
   12bf0:	and	r0, r0, #-16777216	; 0xff000000
   12bf4:	eor	r0, r0, #1946157056	; 0x74000000
   12bf8:	orrs	r0, r0, r1
   12bfc:	bne	131b4 <test@@Base+0x6f4>
   12c00:	add	r1, r7, #5
   12c04:	add	r6, sp, #24
   12c08:	mov	r0, r6
   12c0c:	mov	r2, r8
   12c10:	bl	13334 <test@@Base+0x874>
   12c14:	mov	r1, r0
   12c18:	mov	r0, r6
   12c1c:	mov	r2, r8
   12c20:	bl	132b4 <test@@Base+0x7f4>
   12c24:	mov	r7, r0
   12c28:	cmp	r0, r8
   12c2c:	beq	13158 <test@@Base+0x698>
   12c30:	bcs	1317c <test@@Base+0x6bc>
   12c34:	ldrb	r0, [r7]
   12c38:	cmp	r0, #58	; 0x3a
   12c3c:	bne	1317c <test@@Base+0x6bc>
   12c40:	add	r1, r7, #1
   12c44:	mov	r0, r6
   12c48:	mov	r2, r8
   12c4c:	bl	132b4 <test@@Base+0x7f4>
   12c50:	mov	r6, r0
   12c54:	cmp	r0, r8
   12c58:	beq	13280 <test@@Base+0x7c0>
   12c5c:	ldr	r0, [sp, #16]
   12c60:	mov	r1, #0
   12c64:	mov	r2, #1
   12c68:	mov	r3, #1
   12c6c:	bl	15dac <flatcc_builder_table_add@@Base>
   12c70:	cmp	r0, #0
   12c74:	beq	132a0 <test@@Base+0x7e0>
   12c78:	mov	r3, r0
   12c7c:	add	r9, sp, #24
   12c80:	mov	r0, r9
   12c84:	mov	r1, r6
   12c88:	mov	r2, r8
   12c8c:	bl	1343c <test@@Base+0x97c>
   12c90:	mov	r7, r0
   12c94:	cmp	r6, r0
   12c98:	bne	130a4 <test@@Base+0x5e4>
   12c9c:	b	131fc <test@@Base+0x73c>
   12ca0:	cmp	r1, r4
   12ca4:	bhi	12d64 <test@@Base+0x2a4>
   12ca8:	subs	r3, r0, sl
   12cac:	sbcs	r3, r1, r5
   12cb0:	bcs	12e30 <test@@Base+0x370>
   12cb4:	movw	r0, #0
   12cb8:	movt	r0, #28260	; 0x6e64
   12cbc:	eor	r0, r2, r0
   12cc0:	eor	r1, r1, r5
   12cc4:	orrs	r0, r0, r1
   12cc8:	bne	131b4 <test@@Base+0x6f4>
   12ccc:	add	r1, r7, #6
   12cd0:	add	r6, sp, #24
   12cd4:	mov	r0, r6
   12cd8:	mov	r2, r8
   12cdc:	bl	13334 <test@@Base+0x874>
   12ce0:	mov	r1, r0
   12ce4:	mov	r0, r6
   12ce8:	mov	r2, r8
   12cec:	bl	132b4 <test@@Base+0x7f4>
   12cf0:	mov	r7, r0
   12cf4:	cmp	r0, r8
   12cf8:	beq	13158 <test@@Base+0x698>
   12cfc:	bcs	1317c <test@@Base+0x6bc>
   12d00:	ldrb	r0, [r7]
   12d04:	cmp	r0, #58	; 0x3a
   12d08:	bne	1317c <test@@Base+0x6bc>
   12d0c:	add	r1, r7, #1
   12d10:	mov	r0, r6
   12d14:	mov	r2, r8
   12d18:	bl	132b4 <test@@Base+0x7f4>
   12d1c:	mov	r6, r0
   12d20:	cmp	r0, r8
   12d24:	beq	13280 <test@@Base+0x7c0>
   12d28:	ldr	r0, [sp, #16]
   12d2c:	mov	r1, #1
   12d30:	mov	r2, #8
   12d34:	mov	r3, #8
   12d38:	bl	15dac <flatcc_builder_table_add@@Base>
   12d3c:	cmp	r0, #0
   12d40:	beq	132a0 <test@@Base+0x7e0>
   12d44:	mov	r3, r0
   12d48:	mov	sl, r4
   12d4c:	add	r9, sp, #24
   12d50:	mov	r0, r9
   12d54:	mov	r1, r6
   12d58:	mov	r2, r8
   12d5c:	bl	183dc <flatcc_json_parser_double@@Base>
   12d60:	b	13090 <test@@Base+0x5d0>
   12d64:	movw	r0, #27765	; 0x6c75
   12d68:	movt	r0, #31349	; 0x7a75
   12d6c:	teq	r1, r0
   12d70:	bne	131b4 <test@@Base+0x6f4>
   12d74:	add	r1, r7, #4
   12d78:	add	r6, sp, #24
   12d7c:	mov	r0, r6
   12d80:	mov	r2, r8
   12d84:	bl	13334 <test@@Base+0x874>
   12d88:	mov	r1, r0
   12d8c:	mov	r0, r6
   12d90:	mov	r2, r8
   12d94:	bl	132b4 <test@@Base+0x7f4>
   12d98:	mov	r7, r0
   12d9c:	cmp	r0, r8
   12da0:	beq	13158 <test@@Base+0x698>
   12da4:	bcs	1317c <test@@Base+0x6bc>
   12da8:	ldrb	r0, [r7]
   12dac:	cmp	r0, #58	; 0x3a
   12db0:	bne	1317c <test@@Base+0x6bc>
   12db4:	add	r1, r7, #1
   12db8:	mov	r0, r6
   12dbc:	mov	r2, r8
   12dc0:	bl	132b4 <test@@Base+0x7f4>
   12dc4:	mov	r7, r0
   12dc8:	cmp	r0, r8
   12dcc:	beq	13158 <test@@Base+0x698>
   12dd0:	mov	r0, r6
   12dd4:	mov	r1, r7
   12dd8:	mov	r2, r8
   12ddc:	bl	135f0 <test@@Base+0xb30>
   12de0:	mov	r1, r6
   12de4:	mov	r6, r0
   12de8:	mov	r0, r1
   12dec:	mov	r1, r6
   12df0:	mov	r2, r8
   12df4:	bl	177a8 <flatcc_json_parser_string_part@@Base>
   12df8:	mov	r7, r0
   12dfc:	cmp	r0, r8
   12e00:	beq	131fc <test@@Base+0x73c>
   12e04:	ldrb	r0, [r7]
   12e08:	cmp	r0, #34	; 0x22
   12e0c:	bne	12f04 <test@@Base+0x444>
   12e10:	sub	r2, r7, r6
   12e14:	ldr	r0, [sp, #16]
   12e18:	mov	r1, r6
   12e1c:	bl	163f0 <flatcc_builder_create_string@@Base>
   12e20:	mov	r6, r0
   12e24:	cmp	r6, #0
   12e28:	bne	12fb8 <test@@Base+0x4f8>
   12e2c:	b	131fc <test@@Base+0x73c>
   12e30:	eor	r0, r0, sl
   12e34:	eor	r1, r1, r5
   12e38:	orrs	r0, r0, r1
   12e3c:	bne	131b4 <test@@Base+0x6f4>
   12e40:	mov	r0, r6
   12e44:	mov	r1, r8
   12e48:	bl	13330 <test@@Base+0x870>
   12e4c:	movw	r0, #26227	; 0x6673
   12e50:	movt	r0, #27749	; 0x6c65
   12e54:	cmp	r1, r0
   12e58:	bhi	12fec <test@@Base+0x52c>
   12e5c:	movw	r0, #24932	; 0x6164
   12e60:	movt	r0, #27749	; 0x6c65
   12e64:	teq	r1, r0
   12e68:	bne	132a8 <test@@Base+0x7e8>
   12e6c:	add	r1, r6, #4
   12e70:	add	r6, sp, #24
   12e74:	mov	r0, r6
   12e78:	mov	r2, r8
   12e7c:	bl	13334 <test@@Base+0x874>
   12e80:	mov	r1, r0
   12e84:	mov	r0, r6
   12e88:	mov	r2, r8
   12e8c:	bl	132b4 <test@@Base+0x7f4>
   12e90:	mov	r7, r0
   12e94:	cmp	r0, r8
   12e98:	beq	13158 <test@@Base+0x698>
   12e9c:	bcs	1317c <test@@Base+0x6bc>
   12ea0:	ldrb	r0, [r7]
   12ea4:	cmp	r0, #58	; 0x3a
   12ea8:	bne	1317c <test@@Base+0x6bc>
   12eac:	add	r1, r7, #1
   12eb0:	mov	r0, r6
   12eb4:	mov	r2, r8
   12eb8:	bl	132b4 <test@@Base+0x7f4>
   12ebc:	mov	r6, r0
   12ec0:	cmp	r0, r8
   12ec4:	beq	13280 <test@@Base+0x7c0>
   12ec8:	ldr	r0, [sp, #16]
   12ecc:	mov	r1, #3
   12ed0:	mov	r2, #8
   12ed4:	mov	r3, #8
   12ed8:	bl	15dac <flatcc_builder_table_add@@Base>
   12edc:	cmp	r0, #0
   12ee0:	beq	132a0 <test@@Base+0x7e0>
   12ee4:	mov	r3, r0
   12ee8:	mov	sl, r4
   12eec:	add	r9, sp, #24
   12ef0:	mov	r0, r9
   12ef4:	mov	r1, r6
   12ef8:	mov	r2, r8
   12efc:	bl	134cc <test@@Base+0xa0c>
   12f00:	b	13090 <test@@Base+0x5d0>
   12f04:	ldr	r4, [sp, #16]
   12f08:	mov	r0, r4
   12f0c:	bl	14e84 <flatcc_builder_start_string@@Base>
   12f10:	sub	r9, r7, r6
   12f14:	mov	r0, r4
   12f18:	mov	r1, r9
   12f1c:	bl	149d4 <flatcc_builder_extend_string@@Base>
   12f20:	cmp	r0, #0
   12f24:	beq	131fc <test@@Base+0x73c>
   12f28:	mov	r1, r6
   12f2c:	mov	r2, r9
   12f30:	bl	12900 <memcpy@plt>
   12f34:	add	r4, sp, #20
   12f38:	add	r5, sp, #24
   12f3c:	mov	r0, r5
   12f40:	mov	r1, r7
   12f44:	mov	r2, r8
   12f48:	mov	r3, r4
   12f4c:	bl	17914 <flatcc_json_parser_string_escape@@Base>
   12f50:	mov	r6, r0
   12f54:	ldrb	r2, [sp, #20]
   12f58:	ldr	r0, [sp, #16]
   12f5c:	ldr	r1, [sp, #12]
   12f60:	bl	14a3c <flatcc_builder_append_string@@Base>
   12f64:	mov	r0, r5
   12f68:	mov	r1, r6
   12f6c:	mov	r2, r8
   12f70:	bl	177a8 <flatcc_json_parser_string_part@@Base>
   12f74:	mov	r7, r0
   12f78:	cmp	r0, r8
   12f7c:	beq	131fc <test@@Base+0x73c>
   12f80:	sub	r2, r7, r6
   12f84:	ldr	r0, [sp, #16]
   12f88:	mov	r1, r6
   12f8c:	bl	14a3c <flatcc_builder_append_string@@Base>
   12f90:	ldrb	r0, [r7]
   12f94:	cmp	r0, #34	; 0x22
   12f98:	bne	12f38 <test@@Base+0x478>
   12f9c:	ldr	r0, [sp, #16]
   12fa0:	bl	16504 <flatcc_builder_end_string@@Base>
   12fa4:	mov	r6, r0
   12fa8:	movw	r4, #27764	; 0x6c74
   12fac:	movt	r4, #31349	; 0x7a75
   12fb0:	cmp	r6, #0
   12fb4:	beq	131fc <test@@Base+0x73c>
   12fb8:	ldr	r0, [sp, #16]
   12fbc:	mov	r1, #10
   12fc0:	bl	15ce8 <flatcc_builder_table_add_offset@@Base>
   12fc4:	cmp	r0, #0
   12fc8:	beq	131fc <test@@Base+0x73c>
   12fcc:	str	r6, [r0]
   12fd0:	add	r9, sp, #24
   12fd4:	mov	r0, r9
   12fd8:	mov	r1, r7
   12fdc:	mov	r2, r8
   12fe0:	bl	13610 <test@@Base+0xb50>
   12fe4:	mov	r7, r0
   12fe8:	b	130a4 <test@@Base+0x5e4>
   12fec:	movw	r0, #26228	; 0x6674
   12ff0:	movt	r0, #27749	; 0x6c65
   12ff4:	teq	r1, r0
   12ff8:	bne	132a8 <test@@Base+0x7e8>
   12ffc:	add	r1, r6, #4
   13000:	add	r6, sp, #24
   13004:	mov	r0, r6
   13008:	mov	r2, r8
   1300c:	bl	13334 <test@@Base+0x874>
   13010:	mov	r1, r0
   13014:	mov	r0, r6
   13018:	mov	r2, r8
   1301c:	bl	132b4 <test@@Base+0x7f4>
   13020:	mov	r7, r0
   13024:	cmp	r0, r8
   13028:	beq	13158 <test@@Base+0x698>
   1302c:	bcs	1317c <test@@Base+0x6bc>
   13030:	ldrb	r0, [r7]
   13034:	cmp	r0, #58	; 0x3a
   13038:	bne	1317c <test@@Base+0x6bc>
   1303c:	add	r1, r7, #1
   13040:	mov	r0, r6
   13044:	mov	r2, r8
   13048:	bl	132b4 <test@@Base+0x7f4>
   1304c:	mov	r6, r0
   13050:	cmp	r0, r8
   13054:	beq	13280 <test@@Base+0x7c0>
   13058:	ldr	r0, [sp, #16]
   1305c:	mov	r1, #2
   13060:	mov	r2, #4
   13064:	mov	r3, #4
   13068:	bl	15dac <flatcc_builder_table_add@@Base>
   1306c:	cmp	r0, #0
   13070:	beq	132a0 <test@@Base+0x7e0>
   13074:	mov	r3, r0
   13078:	mov	sl, r4
   1307c:	add	r9, sp, #24
   13080:	mov	r0, r9
   13084:	mov	r1, r6
   13088:	mov	r2, r8
   1308c:	bl	13560 <test@@Base+0xaa0>
   13090:	mov	r7, r0
   13094:	cmp	r6, r0
   13098:	movw	sl, #29472	; 0x7320
   1309c:	movt	sl, #28260	; 0x6e64
   130a0:	beq	131fc <test@@Base+0x73c>
   130a4:	mov	r0, r9
   130a8:	mov	r1, r7
   130ac:	mov	r2, r8
   130b0:	bl	132b4 <test@@Base+0x7f4>
   130b4:	mov	r7, r0
   130b8:	cmp	r0, r8
   130bc:	beq	13158 <test@@Base+0x698>
   130c0:	ldrb	r0, [r7]
   130c4:	cmp	r0, #44	; 0x2c
   130c8:	bne	130f4 <test@@Base+0x634>
   130cc:	add	r1, r7, #1
   130d0:	mov	r0, r9
   130d4:	mov	r2, r8
   130d8:	bl	132b4 <test@@Base+0x7f4>
   130dc:	mov	r7, r0
   130e0:	cmp	r0, r8
   130e4:	beq	13158 <test@@Base+0x698>
   130e8:	ldrb	r0, [r7]
   130ec:	cmp	r0, #125	; 0x7d
   130f0:	bne	12b90 <test@@Base+0xd0>
   130f4:	cmp	r7, r8
   130f8:	bcs	131c8 <test@@Base+0x708>
   130fc:	ldrb	r0, [r7]
   13100:	cmp	r0, #125	; 0x7d
   13104:	bne	131c8 <test@@Base+0x708>
   13108:	ldr	r4, [sp, #16]
   1310c:	mov	r0, r4
   13110:	bl	156bc <flatcc_builder_end_table@@Base>
   13114:	mov	r1, r0
   13118:	mov	r0, r4
   1311c:	bl	14478 <flatcc_builder_end_buffer@@Base>
   13120:	add	r1, r7, #1
   13124:	add	r0, sp, #24
   13128:	mov	r2, r8
   1312c:	bl	132b4 <test@@Base+0x7f4>
   13130:	mov	r7, r0
   13134:	cmp	r0, r8
   13138:	beq	131fc <test@@Base+0x73c>
   1313c:	movw	r0, #57440	; 0xe060
   13140:	movt	r0, #2
   13144:	ldr	r3, [r0]
   13148:	movw	r0, #44651	; 0xae6b
   1314c:	movt	r0, #1
   13150:	mov	r1, #26
   13154:	b	13170 <test@@Base+0x6b0>
   13158:	movw	r0, #57440	; 0xe060
   1315c:	movt	r0, #2
   13160:	ldr	r3, [r0]
   13164:	movw	r0, #44615	; 0xae47
   13168:	movt	r0, #1
   1316c:	mov	r1, #13
   13170:	mov	r2, #1
   13174:	bl	12930 <fwrite@plt>
   13178:	b	131fc <test@@Base+0x73c>
   1317c:	movw	r0, #57440	; 0xe060
   13180:	movt	r0, #2
   13184:	ldr	r0, [r0]
   13188:	movw	r1, #44629	; 0xae55
   1318c:	movt	r1, #1
   13190:	mov	r2, #58	; 0x3a
   13194:	b	131e0 <test@@Base+0x720>
   13198:	movw	r0, #57440	; 0xe060
   1319c:	movt	r0, #2
   131a0:	ldr	r0, [r0]
   131a4:	movw	r1, #44629	; 0xae55
   131a8:	movt	r1, #1
   131ac:	mov	r2, #123	; 0x7b
   131b0:	b	131e0 <test@@Base+0x720>
   131b4:	add	r0, sp, #24
   131b8:	mov	r1, r7
   131bc:	mov	r2, r8
   131c0:	mov	r3, #13
   131c4:	b	131f4 <test@@Base+0x734>
   131c8:	movw	r0, #57440	; 0xe060
   131cc:	movt	r0, #2
   131d0:	ldr	r0, [r0]
   131d4:	movw	r1, #44629	; 0xae55
   131d8:	movt	r1, #1
   131dc:	mov	r2, #125	; 0x7d
   131e0:	bl	12978 <fprintf@plt>
   131e4:	add	r0, sp, #24
   131e8:	mov	r1, r7
   131ec:	mov	r2, r8
   131f0:	mov	r3, #17
   131f4:	bl	17770 <flatcc_json_parser_set_error@@Base>
   131f8:	mov	r7, r0
   131fc:	movw	r0, #57440	; 0xe060
   13200:	movt	r0, #2
   13204:	ldr	r4, [r0]
   13208:	ldr	r0, [sp, #48]	; 0x30
   1320c:	cmp	r0, #0
   13210:	bne	13230 <test@@Base+0x770>
   13214:	movw	r0, #44689	; 0xae91
   13218:	movt	r0, #1
   1321c:	mov	r1, #15
   13220:	mov	r2, #1
   13224:	mov	r3, r4
   13228:	bl	12930 <fwrite@plt>
   1322c:	b	13268 <test@@Base+0x7a8>
   13230:	ldr	r5, [sp, #28]
   13234:	ldr	r8, [sp, #40]	; 0x28
   13238:	ldr	r6, [sp, #60]	; 0x3c
   1323c:	bl	17750 <flatcc_json_parser_error_string@@Base>
   13240:	str	r0, [sp]
   13244:	sub	r0, r6, r5
   13248:	add	r3, r0, #1
   1324c:	movw	r1, #44678	; 0xae86
   13250:	movt	r1, #1
   13254:	mov	r0, r4
   13258:	mov	r2, r8
   1325c:	bl	12978 <fprintf@plt>
   13260:	ldr	r0, [sp, #16]
   13264:	bl	13b20 <flatcc_builder_reset@@Base>
   13268:	ldr	r0, [sp, #48]	; 0x30
   1326c:	ldr	r1, [sp, #8]
   13270:	str	r0, [r1]
   13274:	mov	r0, r7
   13278:	sub	sp, fp, #28
   1327c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13280:	movw	r0, #57440	; 0xe060
   13284:	movt	r0, #2
   13288:	ldr	r3, [r0]
   1328c:	movw	r0, #44615	; 0xae47
   13290:	movt	r0, #1
   13294:	mov	r1, #13
   13298:	mov	r2, #1
   1329c:	bl	12930 <fwrite@plt>
   132a0:	mov	r7, r6
   132a4:	b	131fc <test@@Base+0x73c>
   132a8:	add	r0, sp, #24
   132ac:	mov	r1, r6
   132b0:	b	131bc <test@@Base+0x6fc>
   132b4:	sub	r3, r2, r1
   132b8:	cmp	r3, #2
   132bc:	blt	132e8 <test@@Base+0x828>
   132c0:	ldrb	r3, [r1]
   132c4:	cmp	r3, #32
   132c8:	movhi	r0, r1
   132cc:	bxhi	lr
   132d0:	bne	132e8 <test@@Base+0x828>
   132d4:	mov	ip, r1
   132d8:	ldrb	r3, [ip, #1]!
   132dc:	cmp	r3, #32
   132e0:	movhi	r0, ip
   132e4:	bxhi	lr
   132e8:	b	177f8 <flatcc_json_parser_space_ext@@Base>
   132ec:	cmp	r1, r2
   132f0:	beq	13320 <test@@Base+0x860>
   132f4:	ldrb	r3, [r1]
   132f8:	cmp	r3, #46	; 0x2e
   132fc:	beq	13328 <test@@Base+0x868>
   13300:	cmp	r3, #34	; 0x22
   13304:	moveq	r2, #0
   13308:	streq	r2, [r0, #12]
   1330c:	addeq	r1, r1, #1
   13310:	moveq	r0, r1
   13314:	bxeq	lr
   13318:	mov	r2, #1
   1331c:	str	r2, [r0, #12]
   13320:	mov	r0, r1
   13324:	bx	lr
   13328:	mov	r3, #5
   1332c:	b	17770 <flatcc_json_parser_set_error@@Base>
   13330:	b	13680 <main@@Base+0x50>
   13334:	push	{fp, lr}
   13338:	mov	fp, sp
   1333c:	ldr	r3, [r0, #12]
   13340:	cmp	r3, #0
   13344:	beq	133f0 <test@@Base+0x930>
   13348:	cmp	r1, r2
   1334c:	beq	13428 <test@@Base+0x968>
   13350:	ldrb	lr, [r1]
   13354:	mov	ip, #0
   13358:	cmp	lr, #33	; 0x21
   1335c:	bcc	133cc <test@@Base+0x90c>
   13360:	add	r3, r1, #1
   13364:	mov	ip, lr
   13368:	mov	r1, r3
   1336c:	uxtb	r3, lr
   13370:	cmp	r3, #46	; 0x2e
   13374:	cmpne	r3, #95	; 0x5f
   13378:	bne	13398 <test@@Base+0x8d8>
   1337c:	cmp	r2, r1
   13380:	beq	133cc <test@@Base+0x90c>
   13384:	mov	r3, r1
   13388:	ldrb	lr, [r3], #1
   1338c:	cmp	lr, #33	; 0x21
   13390:	bcs	13364 <test@@Base+0x8a4>
   13394:	b	133cc <test@@Base+0x90c>
   13398:	sxtb	r3, ip
   1339c:	cmp	r3, #0
   133a0:	bmi	1337c <test@@Base+0x8bc>
   133a4:	sub	r3, ip, #48	; 0x30
   133a8:	uxtb	r3, r3
   133ac:	cmp	r3, #9
   133b0:	bls	1337c <test@@Base+0x8bc>
   133b4:	orr	r3, ip, #32
   133b8:	sub	r3, r3, #97	; 0x61
   133bc:	uxtb	r3, r3
   133c0:	cmp	r3, #26
   133c4:	bcc	1337c <test@@Base+0x8bc>
   133c8:	sub	r1, r1, #1
   133cc:	uxtb	r3, ip
   133d0:	cmp	r3, #46	; 0x2e
   133d4:	bne	13428 <test@@Base+0x968>
   133d8:	mov	r3, #5
   133dc:	pop	{fp, lr}
   133e0:	b	17770 <flatcc_json_parser_set_error@@Base>
   133e4:	cmp	r3, #34	; 0x22
   133e8:	beq	13424 <test@@Base+0x964>
   133ec:	add	r1, r1, #1
   133f0:	cmp	r1, r2
   133f4:	beq	13430 <test@@Base+0x970>
   133f8:	ldrb	r3, [r1]
   133fc:	cmp	r3, #92	; 0x5c
   13400:	bne	133e4 <test@@Base+0x924>
   13404:	sub	r3, r2, r1
   13408:	cmp	r3, #2
   1340c:	blt	13418 <test@@Base+0x958>
   13410:	add	r1, r1, #1
   13414:	b	133ec <test@@Base+0x92c>
   13418:	ldrb	r3, [r1]
   1341c:	cmp	r3, #34	; 0x22
   13420:	bne	13430 <test@@Base+0x970>
   13424:	add	r1, r1, #1
   13428:	mov	r0, r1
   1342c:	pop	{fp, pc}
   13430:	mov	r3, #20
   13434:	pop	{fp, lr}
   13438:	b	17770 <flatcc_json_parser_set_error@@Base>
   1343c:	push	{r4, r5, r6, r7, fp, lr}
   13440:	add	fp, sp, #16
   13444:	sub	sp, sp, #24
   13448:	mov	r7, r1
   1344c:	mov	r6, r0
   13450:	mov	r0, #0
   13454:	str	r0, [sp, #20]
   13458:	str	r0, [sp, #16]
   1345c:	str	r0, [sp, #12]
   13460:	strb	r0, [r3]
   13464:	cmp	r1, r2
   13468:	beq	134c0 <test@@Base+0xa00>
   1346c:	mov	r5, r3
   13470:	mov	r4, r2
   13474:	add	r0, sp, #16
   13478:	str	r0, [sp]
   1347c:	add	r3, sp, #12
   13480:	mov	r0, r6
   13484:	mov	r1, r7
   13488:	bl	18a84 <flatcc_json_parser_integer@@Base>
   1348c:	mov	r1, r0
   13490:	cmp	r0, r7
   13494:	beq	134bc <test@@Base+0x9fc>
   13498:	ldr	r3, [sp, #12]
   1349c:	ldr	r0, [sp, #16]
   134a0:	ldr	r2, [sp, #20]
   134a4:	stm	sp, {r0, r2, r5}
   134a8:	mov	r0, r6
   134ac:	mov	r2, r4
   134b0:	bl	1370c <main@@Base+0xdc>
   134b4:	mov	r7, r0
   134b8:	b	134c0 <test@@Base+0xa00>
   134bc:	mov	r7, r1
   134c0:	mov	r0, r7
   134c4:	sub	sp, fp, #16
   134c8:	pop	{r4, r5, r6, r7, fp, pc}
   134cc:	push	{r4, r5, r6, r7, fp, lr}
   134d0:	add	fp, sp, #16
   134d4:	sub	sp, sp, #24
   134d8:	mov	r7, r1
   134dc:	mov	r6, r0
   134e0:	mov	r0, #0
   134e4:	str	r0, [sp, #20]
   134e8:	str	r0, [sp, #16]
   134ec:	str	r0, [sp, #12]
   134f0:	str	r0, [r3]
   134f4:	str	r0, [r3, #4]
   134f8:	cmp	r1, r2
   134fc:	beq	13554 <test@@Base+0xa94>
   13500:	mov	r5, r3
   13504:	mov	r4, r2
   13508:	add	r0, sp, #16
   1350c:	str	r0, [sp]
   13510:	add	r3, sp, #12
   13514:	mov	r0, r6
   13518:	mov	r1, r7
   1351c:	bl	18a84 <flatcc_json_parser_integer@@Base>
   13520:	mov	r1, r0
   13524:	cmp	r0, r7
   13528:	beq	13550 <test@@Base+0xa90>
   1352c:	ldr	r3, [sp, #12]
   13530:	ldr	r0, [sp, #16]
   13534:	ldr	r2, [sp, #20]
   13538:	stm	sp, {r0, r2, r5}
   1353c:	mov	r0, r6
   13540:	mov	r2, r4
   13544:	bl	13758 <main@@Base+0x128>
   13548:	mov	r7, r0
   1354c:	b	13554 <test@@Base+0xa94>
   13550:	mov	r7, r1
   13554:	mov	r0, r7
   13558:	sub	sp, fp, #16
   1355c:	pop	{r4, r5, r6, r7, fp, pc}
   13560:	push	{r4, r5, r6, r7, fp, lr}
   13564:	add	fp, sp, #16
   13568:	sub	sp, sp, #24
   1356c:	mov	r7, r1
   13570:	mov	r6, r0
   13574:	mov	r0, #0
   13578:	str	r0, [sp, #20]
   1357c:	str	r0, [sp, #16]
   13580:	str	r0, [sp, #12]
   13584:	str	r0, [r3]
   13588:	cmp	r1, r2
   1358c:	beq	135e4 <test@@Base+0xb24>
   13590:	mov	r5, r3
   13594:	mov	r4, r2
   13598:	add	r0, sp, #16
   1359c:	str	r0, [sp]
   135a0:	add	r3, sp, #12
   135a4:	mov	r0, r6
   135a8:	mov	r1, r7
   135ac:	bl	18a84 <flatcc_json_parser_integer@@Base>
   135b0:	mov	r1, r0
   135b4:	cmp	r0, r7
   135b8:	beq	135e0 <test@@Base+0xb20>
   135bc:	ldr	r3, [sp, #12]
   135c0:	ldr	r0, [sp, #16]
   135c4:	ldr	r2, [sp, #20]
   135c8:	stm	sp, {r0, r2, r5}
   135cc:	mov	r0, r6
   135d0:	mov	r2, r4
   135d4:	bl	137b0 <main@@Base+0x180>
   135d8:	mov	r7, r0
   135dc:	b	135e4 <test@@Base+0xb24>
   135e0:	mov	r7, r1
   135e4:	mov	r0, r7
   135e8:	sub	sp, fp, #16
   135ec:	pop	{r4, r5, r6, r7, fp, pc}
   135f0:	cmp	r1, r2
   135f4:	beq	13608 <test@@Base+0xb48>
   135f8:	ldrb	r3, [r1]
   135fc:	cmp	r3, #34	; 0x22
   13600:	addeq	r0, r1, #1
   13604:	bxeq	lr
   13608:	mov	r3, #16
   1360c:	b	17770 <flatcc_json_parser_set_error@@Base>
   13610:	cmp	r1, r2
   13614:	beq	13628 <test@@Base+0xb68>
   13618:	ldrb	r3, [r1]
   1361c:	cmp	r3, #34	; 0x22
   13620:	addeq	r0, r1, #1
   13624:	bxeq	lr
   13628:	mov	r3, #20
   1362c:	b	17770 <flatcc_json_parser_set_error@@Base>

00013630 <main@@Base>:
   13630:	push	{r4, sl, fp, lr}
   13634:	add	fp, sp, #8
   13638:	sub	sp, sp, #240	; 0xf0
   1363c:	mvn	r0, #0
   13640:	str	r0, [fp, #-12]
   13644:	add	r4, sp, #4
   13648:	mov	r0, r4
   1364c:	bl	139a8 <flatcc_builder_init@@Base>
   13650:	movw	r0, #645	; 0x285
   13654:	movw	r1, #43964	; 0xabbc
   13658:	movt	r1, #1
   1365c:	add	r2, r1, r0
   13660:	sub	r3, fp, #12
   13664:	mov	r0, r4
   13668:	bl	12ac0 <test@@Base>
   1366c:	mov	r0, r4
   13670:	bl	13b2c <flatcc_builder_clear@@Base>
   13674:	ldr	r0, [fp, #-12]
   13678:	sub	sp, fp, #8
   1367c:	pop	{r4, sl, fp, pc}
   13680:	mov	ip, r0
   13684:	sub	r0, r1, r0
   13688:	cmp	r0, #8
   1368c:	movcs	r0, #8
   13690:	sub	r3, r0, #1
   13694:	mov	r1, #0
   13698:	mov	r0, #0
   1369c:	cmp	r3, #7
   136a0:	bxhi	lr
   136a4:	add	r2, pc, #0
   136a8:	ldr	pc, [r2, r3, lsl #2]
   136ac:	andeq	r3, r1, r0, lsl #14
   136b0:	strdeq	r3, [r1], -r8
   136b4:	strdeq	r3, [r1], -r0
   136b8:	andeq	r3, r1, r8, ror #13
   136bc:	andeq	r3, r1, r0, ror #13
   136c0:	ldrdeq	r3, [r1], -r8
   136c4:	ldrdeq	r3, [r1], -r0
   136c8:	andeq	r3, r1, ip, asr #13
   136cc:	ldrb	r0, [ip, #7]
   136d0:	ldrb	r2, [ip, #6]
   136d4:	orr	r0, r0, r2, lsl #8
   136d8:	ldrb	r2, [ip, #5]
   136dc:	orr	r0, r0, r2, lsl #16
   136e0:	ldrb	r2, [ip, #4]
   136e4:	orr	r0, r0, r2, lsl #24
   136e8:	ldrb	r2, [ip, #3]
   136ec:	orr	r1, r2, r1
   136f0:	ldrb	r2, [ip, #2]
   136f4:	orr	r1, r1, r2, lsl #8
   136f8:	ldrb	r2, [ip, #1]
   136fc:	orr	r1, r1, r2, lsl #16
   13700:	ldrb	r2, [ip]
   13704:	orr	r1, r1, r2, lsl #24
   13708:	bx	lr
   1370c:	push	{fp, lr}
   13710:	mov	fp, sp
   13714:	cmp	r3, #0
   13718:	beq	13728 <main@@Base+0xf8>
   1371c:	mov	r3, #8
   13720:	pop	{fp, lr}
   13724:	b	17770 <flatcc_json_parser_set_error@@Base>
   13728:	ldr	ip, [fp, #12]
   1372c:	ldr	lr, [fp, #8]
   13730:	subs	r3, lr, #256	; 0x100
   13734:	sbcs	r3, ip, #0
   13738:	bcc	13748 <main@@Base+0x118>
   1373c:	mov	r3, #7
   13740:	pop	{fp, lr}
   13744:	b	17770 <flatcc_json_parser_set_error@@Base>
   13748:	ldr	r0, [fp, #16]
   1374c:	strb	lr, [r0]
   13750:	mov	r0, r1
   13754:	pop	{fp, pc}
   13758:	push	{r4, r5, fp, lr}
   1375c:	add	fp, sp, #8
   13760:	add	ip, fp, #8
   13764:	ldm	ip, {r4, r5, ip}
   13768:	cmp	r3, #0
   1376c:	beq	13788 <main@@Base+0x158>
   13770:	subs	r3, r4, #1
   13774:	sbcs	r3, r5, #-2147483648	; 0x80000000
   13778:	bcc	1379c <main@@Base+0x16c>
   1377c:	mov	r3, #8
   13780:	pop	{r4, r5, fp, lr}
   13784:	b	17770 <flatcc_json_parser_set_error@@Base>
   13788:	cmn	r5, #1
   1378c:	bgt	137a4 <main@@Base+0x174>
   13790:	mov	r3, #7
   13794:	pop	{r4, r5, fp, lr}
   13798:	b	17770 <flatcc_json_parser_set_error@@Base>
   1379c:	rsbs	r4, r4, #0
   137a0:	rsc	r5, r5, #0
   137a4:	strd	r4, [ip]
   137a8:	mov	r0, r1
   137ac:	pop	{r4, r5, fp, pc}
   137b0:	cmp	r3, #0
   137b4:	beq	137c0 <main@@Base+0x190>
   137b8:	mov	r3, #8
   137bc:	b	17770 <flatcc_json_parser_set_error@@Base>
   137c0:	ldr	r3, [sp, #4]
   137c4:	cmp	r3, #0
   137c8:	beq	137d4 <main@@Base+0x1a4>
   137cc:	mov	r3, #7
   137d0:	b	17770 <flatcc_json_parser_set_error@@Base>
   137d4:	ldr	r0, [sp]
   137d8:	ldr	r2, [sp, #8]
   137dc:	str	r0, [r2]
   137e0:	mov	r0, r1
   137e4:	bx	lr

000137e8 <flatcc_builder_default_alloc@@Base>:
   137e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   137ec:	add	fp, sp, #24
   137f0:	mov	r4, r1
   137f4:	cmp	r2, #0
   137f8:	beq	13840 <flatcc_builder_default_alloc@@Base+0x58>
   137fc:	mov	r8, r3
   13800:	ldr	r0, [fp, #8]
   13804:	sub	r1, r0, #1
   13808:	cmp	r1, #6
   1380c:	bhi	13870 <flatcc_builder_default_alloc@@Base+0x88>
   13810:	mov	r0, #256	; 0x100
   13814:	add	r3, pc, #0
   13818:	ldr	pc, [r3, r1, lsl #2]
   1381c:	andeq	r3, r1, r4, lsl #17
   13820:	andeq	r3, r1, r0, ror r8
   13824:	andeq	r3, r1, r0, ror r8
   13828:	andeq	r3, r1, r8, lsr r8
   1382c:	andeq	r3, r1, r8, ror r8
   13830:	andeq	r3, r1, r0, ror r8
   13834:	andeq	r3, r1, r0, lsl #17
   13838:	mov	r0, #288	; 0x120
   1383c:	b	13884 <flatcc_builder_default_alloc@@Base+0x9c>
   13840:	ldr	r0, [r4]
   13844:	cmp	r0, #0
   13848:	beq	13864 <flatcc_builder_default_alloc@@Base+0x7c>
   1384c:	bl	128f4 <free@plt>
   13850:	mov	r6, #0
   13854:	str	r6, [r4]
   13858:	str	r6, [r4, #4]
   1385c:	mov	r0, r6
   13860:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13864:	mov	r6, #0
   13868:	mov	r0, r6
   1386c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13870:	mov	r0, #32
   13874:	b	13884 <flatcc_builder_default_alloc@@Base+0x9c>
   13878:	mov	r0, r2
   1387c:	b	13884 <flatcc_builder_default_alloc@@Base+0x9c>
   13880:	mov	r0, #64	; 0x40
   13884:	mov	r7, r0
   13888:	lsl	r0, r0, #1
   1388c:	cmp	r7, r2
   13890:	bcc	13884 <flatcc_builder_default_alloc@@Base+0x9c>
   13894:	ldr	r0, [r4, #4]
   13898:	mov	r6, #0
   1389c:	cmp	r0, r2
   138a0:	lsrcs	r0, r0, #1
   138a4:	cmpcs	r0, r7
   138a8:	bcs	138ec <flatcc_builder_default_alloc@@Base+0x104>
   138ac:	ldr	r0, [r4]
   138b0:	mov	r1, r7
   138b4:	bl	12924 <realloc@plt>
   138b8:	cmp	r0, #0
   138bc:	beq	138f4 <flatcc_builder_default_alloc@@Base+0x10c>
   138c0:	mov	r5, r0
   138c4:	cmp	r8, #0
   138c8:	beq	138e8 <flatcc_builder_default_alloc@@Base+0x100>
   138cc:	ldr	r1, [r4, #4]
   138d0:	cmp	r7, r1
   138d4:	bls	138e8 <flatcc_builder_default_alloc@@Base+0x100>
   138d8:	add	r0, r5, r1
   138dc:	sub	r2, r7, r1
   138e0:	mov	r1, #0
   138e4:	bl	12990 <memset@plt>
   138e8:	stm	r4, {r5, r7}
   138ec:	mov	r0, r6
   138f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138f4:	mvn	r6, #0
   138f8:	mov	r0, r6
   138fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013900 <flatcc_builder_flush_vtable_cache@@Base>:
   13900:	push	{r4, r5, fp, lr}
   13904:	add	fp, sp, #8
   13908:	mov	r4, r0
   1390c:	ldr	r0, [r0, #116]	; 0x74
   13910:	cmp	r0, #0
   13914:	popeq	{r4, r5, fp, pc}
   13918:	ldr	r0, [r4, #92]	; 0x5c
   1391c:	ldr	r2, [r4, #96]	; 0x60
   13920:	mov	r5, #0
   13924:	mov	r1, #0
   13928:	bl	12990 <memset@plt>
   1392c:	mov	r0, #16
   13930:	str	r5, [r4, #120]	; 0x78
   13934:	str	r0, [r4, #124]	; 0x7c
   13938:	pop	{r4, r5, fp, pc}

0001393c <flatcc_builder_custom_init@@Base>:
   1393c:	push	{r4, r5, r6, r7, fp, lr}
   13940:	add	fp, sp, #16
   13944:	mov	r5, r3
   13948:	mov	r6, r2
   1394c:	mov	r7, r1
   13950:	mov	r4, r0
   13954:	mov	r1, #0
   13958:	mov	r2, #232	; 0xe8
   1395c:	bl	12990 <memset@plt>
   13960:	ldr	r0, [fp, #8]
   13964:	cmp	r7, #0
   13968:	bne	13980 <flatcc_builder_custom_init@@Base+0x44>
   1396c:	mov	r1, #1
   13970:	str	r1, [r4, #184]	; 0xb8
   13974:	add	r6, r4, #188	; 0xbc
   13978:	movw	r7, #27916	; 0x6d0c
   1397c:	movt	r7, #1
   13980:	movw	r1, #14312	; 0x37e8
   13984:	movt	r1, #1
   13988:	cmp	r5, #0
   1398c:	movne	r1, r5
   13990:	str	r6, [r4, #36]	; 0x24
   13994:	str	r0, [r4, #40]	; 0x28
   13998:	str	r7, [r4, #44]	; 0x2c
   1399c:	str	r1, [r4, #48]	; 0x30
   139a0:	mov	r0, #0
   139a4:	pop	{r4, r5, r6, r7, fp, pc}

000139a8 <flatcc_builder_init@@Base>:
   139a8:	push	{fp, lr}
   139ac:	mov	fp, sp
   139b0:	sub	sp, sp, #8
   139b4:	mov	r1, #0
   139b8:	str	r1, [sp]
   139bc:	mov	r1, #0
   139c0:	mov	r2, #0
   139c4:	mov	r3, #0
   139c8:	bl	1393c <flatcc_builder_custom_init@@Base>
   139cc:	mov	r0, #0
   139d0:	mov	sp, fp
   139d4:	pop	{fp, pc}

000139d8 <flatcc_builder_custom_reset@@Base>:
   139d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139dc:	add	fp, sp, #28
   139e0:	sub	sp, sp, #4
   139e4:	mov	r9, r2
   139e8:	mov	r8, r1
   139ec:	mov	sl, r0
   139f0:	add	r7, r0, #52	; 0x34
   139f4:	mov	r5, #0
   139f8:	b	13a18 <flatcc_builder_custom_reset@@Base+0x40>
   139fc:	ldr	r0, [r6, #56]	; 0x38
   13a00:	cmp	r0, #0
   13a04:	bne	13b00 <flatcc_builder_custom_reset@@Base+0x128>
   13a08:	add	r7, r7, #8
   13a0c:	add	r5, r5, #1
   13a10:	cmp	r5, #8
   13a14:	beq	13a6c <flatcc_builder_custom_reset@@Base+0x94>
   13a18:	add	r6, sl, r5, lsl #3
   13a1c:	ldr	r0, [r6, #52]	; 0x34
   13a20:	cmp	r0, #0
   13a24:	beq	139fc <flatcc_builder_custom_reset@@Base+0x24>
   13a28:	cmp	r9, #0
   13a2c:	cmpne	r5, #5
   13a30:	beq	13a58 <flatcc_builder_custom_reset@@Base+0x80>
   13a34:	ldr	r0, [sl, #40]	; 0x28
   13a38:	ldr	r4, [sl, #48]	; 0x30
   13a3c:	str	r5, [sp]
   13a40:	mov	r1, r7
   13a44:	mov	r2, #1
   13a48:	mov	r3, #1
   13a4c:	blx	r4
   13a50:	cmp	r0, #0
   13a54:	bne	13af0 <flatcc_builder_custom_reset@@Base+0x118>
   13a58:	ldr	r0, [r6, #52]	; 0x34
   13a5c:	ldr	r2, [r6, #56]	; 0x38
   13a60:	mov	r1, #0
   13a64:	bl	12990 <memset@plt>
   13a68:	b	13a08 <flatcc_builder_custom_reset@@Base+0x30>
   13a6c:	mov	r0, #0
   13a70:	str	r0, [sl, #120]	; 0x78
   13a74:	ldr	r1, [sl, #124]	; 0x7c
   13a78:	cmp	r1, #0
   13a7c:	movne	r1, #16
   13a80:	strne	r1, [sl, #124]	; 0x7c
   13a84:	vmov.i32	q8, #0	; 0x00000000
   13a88:	str	r0, [sl, #136]	; 0x88
   13a8c:	str	r0, [sl, #140]	; 0x8c
   13a90:	strh	r0, [sl, #128]	; 0x80
   13a94:	str	r0, [sl, #32]
   13a98:	add	r1, sl, #148	; 0x94
   13a9c:	vst1.32	{d16-d17}, [r1]
   13aa0:	ldr	r1, [sl, #52]	; 0x34
   13aa4:	ldr	r2, [sl, #60]	; 0x3c
   13aa8:	ldr	r3, [sl, #76]	; 0x4c
   13aac:	str	r2, [sl, #16]
   13ab0:	str	r0, [sl, #20]
   13ab4:	str	r0, [sl, #24]
   13ab8:	str	r3, [sl]
   13abc:	str	r1, [sl, #4]
   13ac0:	cmp	r8, #0
   13ac4:	movne	r0, #0
   13ac8:	strne	r0, [sl, #172]	; 0xac
   13acc:	strne	r0, [sl, #176]	; 0xb0
   13ad0:	strne	r0, [sl, #180]	; 0xb4
   13ad4:	ldr	r0, [sl, #184]	; 0xb8
   13ad8:	mov	r5, #0
   13adc:	cmp	r0, #0
   13ae0:	beq	13af4 <flatcc_builder_custom_reset@@Base+0x11c>
   13ae4:	add	r0, sl, #188	; 0xbc
   13ae8:	bl	16be8 <flatcc_emitter_reset@@Base>
   13aec:	b	13af4 <flatcc_builder_custom_reset@@Base+0x11c>
   13af0:	mvn	r5, #0
   13af4:	mov	r0, r5
   13af8:	sub	sp, fp, #28
   13afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b00:	movw	r0, #45217	; 0xb0a1
   13b04:	movt	r0, #1
   13b08:	movw	r1, #45235	; 0xb0b3
   13b0c:	movt	r1, #1
   13b10:	movw	r3, #45305	; 0xb0f9
   13b14:	movt	r3, #1
   13b18:	movw	r2, #434	; 0x1b2
   13b1c:	bl	129c0 <__assert_fail@plt>

00013b20 <flatcc_builder_reset@@Base>:
   13b20:	mov	r1, #0
   13b24:	mov	r2, #0
   13b28:	b	139d8 <flatcc_builder_custom_reset@@Base>

00013b2c <flatcc_builder_clear@@Base>:
   13b2c:	push	{r4, r5, r6, r7, fp, lr}
   13b30:	add	fp, sp, #16
   13b34:	sub	sp, sp, #8
   13b38:	mov	r7, r0
   13b3c:	add	r5, r0, #52	; 0x34
   13b40:	mov	r6, #0
   13b44:	ldr	r0, [r7, #40]	; 0x28
   13b48:	ldr	r4, [r7, #48]	; 0x30
   13b4c:	str	r6, [sp]
   13b50:	mov	r1, r5
   13b54:	mov	r2, #0
   13b58:	mov	r3, #0
   13b5c:	blx	r4
   13b60:	add	r5, r5, #8
   13b64:	add	r6, r6, #1
   13b68:	cmp	r6, #8
   13b6c:	bne	13b44 <flatcc_builder_clear@@Base+0x18>
   13b70:	ldr	r0, [r7, #184]	; 0xb8
   13b74:	cmp	r0, #0
   13b78:	beq	13b84 <flatcc_builder_clear@@Base+0x58>
   13b7c:	add	r0, r7, #188	; 0xbc
   13b80:	bl	16ca8 <flatcc_emitter_clear@@Base>
   13b84:	mov	r0, r7
   13b88:	mov	r1, #0
   13b8c:	mov	r2, #232	; 0xe8
   13b90:	sub	sp, fp, #16
   13b94:	pop	{r4, r5, r6, r7, fp, lr}
   13b98:	b	12990 <memset@plt>

00013b9c <flatcc_builder_enter_user_frame_ptr@@Base>:
   13b9c:	push	{r4, r5, r6, r7, fp, lr}
   13ba0:	add	fp, sp, #16
   13ba4:	sub	sp, sp, #8
   13ba8:	mov	r4, r0
   13bac:	ldr	r2, [r0, #228]	; 0xe4
   13bb0:	mov	r7, #0
   13bb4:	str	r7, [sp]
   13bb8:	add	r0, r1, #7
   13bbc:	bic	r5, r0, #3
   13bc0:	mov	r0, r4
   13bc4:	mov	r1, #7
   13bc8:	mov	r3, r5
   13bcc:	bl	13c14 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13bd0:	cmp	r0, #0
   13bd4:	beq	13c08 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   13bd8:	mov	r6, r0
   13bdc:	mov	r1, #0
   13be0:	mov	r2, r5
   13be4:	bl	12990 <memset@plt>
   13be8:	ldr	r0, [r4, #224]	; 0xe0
   13bec:	str	r0, [r6], #4
   13bf0:	ldr	r0, [r4, #228]	; 0xe4
   13bf4:	add	r1, r0, #4
   13bf8:	add	r0, r0, r5
   13bfc:	str	r1, [r4, #224]	; 0xe0
   13c00:	str	r0, [r4, #228]	; 0xe4
   13c04:	mov	r7, r6
   13c08:	mov	r0, r7
   13c0c:	sub	sp, fp, #16
   13c10:	pop	{r4, r5, r6, r7, fp, pc}
   13c14:	push	{r4, r5, fp, lr}
   13c18:	add	fp, sp, #8
   13c1c:	sub	sp, sp, #8
   13c20:	mov	r4, r2
   13c24:	add	r2, r3, r2
   13c28:	add	r3, r0, r1, lsl #3
   13c2c:	add	r5, r3, #52	; 0x34
   13c30:	ldr	r3, [r3, #56]	; 0x38
   13c34:	cmp	r2, r3
   13c38:	bls	13c60 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13c3c:	ldr	r3, [fp, #8]
   13c40:	ldr	ip, [r0, #40]	; 0x28
   13c44:	ldr	lr, [r0, #48]	; 0x30
   13c48:	str	r1, [sp]
   13c4c:	mov	r0, ip
   13c50:	mov	r1, r5
   13c54:	blx	lr
   13c58:	cmp	r0, #0
   13c5c:	bne	13c70 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   13c60:	ldr	r0, [r5]
   13c64:	add	r0, r0, r4
   13c68:	sub	sp, fp, #8
   13c6c:	pop	{r4, r5, fp, pc}
   13c70:	movw	r0, #49753	; 0xc259
   13c74:	movt	r0, #1
   13c78:	movw	r1, #45235	; 0xb0b3
   13c7c:	movt	r1, #1
   13c80:	movw	r3, #49299	; 0xc093
   13c84:	movt	r3, #1
   13c88:	mov	r2, #308	; 0x134
   13c8c:	bl	129c0 <__assert_fail@plt>

00013c90 <flatcc_builder_enter_user_frame@@Base>:
   13c90:	push	{r4, r5, r6, r7, fp, lr}
   13c94:	add	fp, sp, #16
   13c98:	sub	sp, sp, #8
   13c9c:	mov	r4, r0
   13ca0:	ldr	r2, [r0, #228]	; 0xe4
   13ca4:	mov	r6, #0
   13ca8:	str	r6, [sp]
   13cac:	add	r0, r1, #7
   13cb0:	bic	r5, r0, #3
   13cb4:	mov	r0, r4
   13cb8:	mov	r1, #7
   13cbc:	mov	r3, r5
   13cc0:	bl	13c14 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13cc4:	cmp	r0, #0
   13cc8:	beq	13cf8 <flatcc_builder_enter_user_frame@@Base+0x68>
   13ccc:	mov	r7, r0
   13cd0:	mov	r1, #0
   13cd4:	mov	r2, r5
   13cd8:	bl	12990 <memset@plt>
   13cdc:	ldr	r0, [r4, #224]	; 0xe0
   13ce0:	str	r0, [r7]
   13ce4:	ldr	r0, [r4, #228]	; 0xe4
   13ce8:	add	r6, r0, #4
   13cec:	add	r0, r0, r5
   13cf0:	str	r6, [r4, #224]	; 0xe0
   13cf4:	str	r0, [r4, #228]	; 0xe4
   13cf8:	mov	r0, r6
   13cfc:	sub	sp, fp, #16
   13d00:	pop	{r4, r5, r6, r7, fp, pc}

00013d04 <flatcc_builder_exit_user_frame@@Base>:
   13d04:	push	{fp, lr}
   13d08:	mov	fp, sp
   13d0c:	ldr	r1, [r0, #224]	; 0xe0
   13d10:	cmp	r1, #0
   13d14:	subne	r2, r1, #4
   13d18:	strne	r2, [r0, #228]	; 0xe4
   13d1c:	ldrne	r2, [r0, #108]	; 0x6c
   13d20:	addne	r1, r2, r1
   13d24:	ldrne	r1, [r1, #-4]
   13d28:	strne	r1, [r0, #224]	; 0xe0
   13d2c:	movne	r0, r1
   13d30:	popne	{fp, pc}
   13d34:	movw	r0, #45367	; 0xb137
   13d38:	movt	r0, #1
   13d3c:	movw	r1, #45235	; 0xb0b3
   13d40:	movt	r1, #1
   13d44:	movw	r3, #45392	; 0xb150
   13d48:	movt	r3, #1
   13d4c:	movw	r2, #542	; 0x21e
   13d50:	bl	129c0 <__assert_fail@plt>

00013d54 <flatcc_builder_exit_user_frame_at@@Base>:
   13d54:	push	{fp, lr}
   13d58:	mov	fp, sp
   13d5c:	ldr	r2, [r0, #224]	; 0xe0
   13d60:	cmp	r2, r1
   13d64:	bcc	13d74 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   13d68:	str	r1, [r0, #224]	; 0xe0
   13d6c:	pop	{fp, lr}
   13d70:	b	13d04 <flatcc_builder_exit_user_frame@@Base>
   13d74:	movw	r0, #45450	; 0xb18a
   13d78:	movt	r0, #1
   13d7c:	movw	r1, #45235	; 0xb0b3
   13d80:	movt	r1, #1
   13d84:	movw	r3, #45481	; 0xb1a9
   13d88:	movt	r3, #1
   13d8c:	movw	r2, #551	; 0x227
   13d90:	bl	129c0 <__assert_fail@plt>

00013d94 <flatcc_builder_get_current_user_frame@@Base>:
   13d94:	ldr	r0, [r0, #224]	; 0xe0
   13d98:	bx	lr

00013d9c <flatcc_builder_get_user_frame_ptr@@Base>:
   13d9c:	ldr	r0, [r0, #108]	; 0x6c
   13da0:	add	r0, r0, r1
   13da4:	bx	lr

00013da8 <flatcc_builder_embed_buffer@@Base>:
   13da8:	push	{r4, r5, r6, r7, fp, lr}
   13dac:	add	fp, sp, #16
   13db0:	sub	sp, sp, #80	; 0x50
   13db4:	mov	r5, r3
   13db8:	mov	r6, r2
   13dbc:	mov	r2, r1
   13dc0:	mov	r4, r0
   13dc4:	ldr	r0, [fp, #8]
   13dc8:	strh	r0, [fp, #-18]	; 0xffffffee
   13dcc:	ldr	r3, [r4, #152]	; 0x98
   13dd0:	cmp	r3, #0
   13dd4:	movwne	r3, #1
   13dd8:	sub	r1, fp, #18
   13ddc:	mov	r0, r4
   13de0:	bl	13eb4 <flatcc_builder_embed_buffer@@Base+0x10c>
   13de4:	ldr	r0, [fp, #12]
   13de8:	and	r0, r0, #2
   13dec:	add	r1, r5, r0, lsl #1
   13df0:	ldrh	r2, [fp, #-18]	; 0xffffffee
   13df4:	mov	r0, r4
   13df8:	bl	13f70 <flatcc_builder_embed_buffer@@Base+0x1c8>
   13dfc:	mov	r7, r0
   13e00:	add	r0, r0, r5
   13e04:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   13e08:	mov	r1, #0
   13e0c:	str	r1, [sp, #4]
   13e10:	str	r1, [sp]
   13e14:	str	r0, [fp, #-24]	; 0xffffffe8
   13e18:	ldr	r0, [r4, #152]	; 0x98
   13e1c:	cmp	r0, #0
   13e20:	beq	13e40 <flatcc_builder_embed_buffer@@Base+0x98>
   13e24:	mov	r0, #4
   13e28:	str	r0, [sp, #12]
   13e2c:	sub	r1, fp, #24
   13e30:	str	r1, [sp, #8]
   13e34:	str	r0, [sp]
   13e38:	mov	r0, #1
   13e3c:	str	r0, [sp, #4]
   13e40:	cmp	r5, #0
   13e44:	beq	13e6c <flatcc_builder_embed_buffer@@Base+0xc4>
   13e48:	ldm	sp, {r0, r1}
   13e4c:	add	r0, r0, r5
   13e50:	str	r0, [sp]
   13e54:	mov	r0, sp
   13e58:	add	r0, r0, r1, lsl #3
   13e5c:	str	r6, [r0, #8]
   13e60:	str	r5, [r0, #12]
   13e64:	add	r0, r1, #1
   13e68:	str	r0, [sp, #4]
   13e6c:	cmp	r7, #0
   13e70:	beq	13ea0 <flatcc_builder_embed_buffer@@Base+0xf8>
   13e74:	ldm	sp, {r0, r1}
   13e78:	add	r0, r0, r7
   13e7c:	str	r0, [sp]
   13e80:	mov	r0, sp
   13e84:	add	r0, r0, r1, lsl #3
   13e88:	movw	r2, #44705	; 0xaea1
   13e8c:	movt	r2, #1
   13e90:	str	r2, [r0, #8]
   13e94:	str	r7, [r0, #12]
   13e98:	add	r0, r1, #1
   13e9c:	str	r0, [sp, #4]
   13ea0:	mov	r1, sp
   13ea4:	mov	r0, r4
   13ea8:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13eac:	sub	sp, fp, #16
   13eb0:	pop	{r4, r5, r6, r7, fp, pc}
   13eb4:	push	{r4, r5, r6, r7, fp, lr}
   13eb8:	add	fp, sp, #16
   13ebc:	sub	sp, sp, #72	; 0x48
   13ec0:	mov	r6, r3
   13ec4:	mov	r5, r2
   13ec8:	mov	r7, r1
   13ecc:	mov	r4, r0
   13ed0:	cmp	r2, #0
   13ed4:	bne	13ee4 <flatcc_builder_embed_buffer@@Base+0x13c>
   13ed8:	ldrh	r5, [r4, #132]	; 0x84
   13edc:	cmp	r5, #0
   13ee0:	movweq	r5, #1
   13ee4:	mov	r0, r7
   13ee8:	mov	r1, #4
   13eec:	bl	14d5c <flatcc_builder_start_vector@@Base+0x80>
   13ef0:	mov	r0, r7
   13ef4:	mov	r1, r5
   13ef8:	bl	14d5c <flatcc_builder_start_vector@@Base+0x80>
   13efc:	cmp	r6, #0
   13f00:	bne	13f48 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13f04:	mov	r0, r4
   13f08:	mov	r1, r5
   13f0c:	bl	16a3c <flatcc_builder_get_emit_context@@Base+0x8>
   13f10:	cmp	r0, #0
   13f14:	beq	13f48 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13f18:	str	r0, [sp, #12]
   13f1c:	movw	r1, #44705	; 0xaea1
   13f20:	movt	r1, #1
   13f24:	str	r1, [sp, #8]
   13f28:	str	r0, [sp]
   13f2c:	mov	r0, #1
   13f30:	str	r0, [sp, #4]
   13f34:	mov	r1, sp
   13f38:	mov	r0, r4
   13f3c:	bl	150e8 <flatcc_builder_create_vtable@@Base+0x80>
   13f40:	cmp	r0, #0
   13f44:	beq	13f50 <flatcc_builder_embed_buffer@@Base+0x1a8>
   13f48:	sub	sp, fp, #16
   13f4c:	pop	{r4, r5, r6, r7, fp, pc}
   13f50:	movw	r0, #49753	; 0xc259
   13f54:	movt	r0, #1
   13f58:	movw	r1, #45235	; 0xb0b3
   13f5c:	movt	r1, #1
   13f60:	movw	r3, #49366	; 0xc0d6
   13f64:	movt	r3, #1
   13f68:	movw	r2, #702	; 0x2be
   13f6c:	bl	129c0 <__assert_fail@plt>
   13f70:	ldr	r0, [r0, #136]	; 0x88
   13f74:	sub	r0, r0, r1
   13f78:	sub	r1, r2, #1
   13f7c:	and	r0, r0, r1
   13f80:	bx	lr
   13f84:	bx	lr
   13f88:	push	{r4, r5, fp, lr}
   13f8c:	add	fp, sp, #8
   13f90:	sub	sp, sp, #8
   13f94:	ldr	r3, [r1]
   13f98:	cmp	r3, #0
   13f9c:	ble	13ffc <flatcc_builder_embed_buffer@@Base+0x254>
   13fa0:	mov	r4, r0
   13fa4:	ldr	r0, [r0, #136]	; 0x88
   13fa8:	sub	r5, r0, r3
   13fac:	ldr	r2, [r1, #4]
   13fb0:	ldr	r0, [r4, #36]	; 0x24
   13fb4:	ldr	ip, [r4, #44]	; 0x2c
   13fb8:	str	r3, [sp]
   13fbc:	add	r1, r1, #8
   13fc0:	mov	r3, r5
   13fc4:	blx	ip
   13fc8:	cmp	r0, #0
   13fcc:	streq	r5, [r4, #136]	; 0x88
   13fd0:	moveq	r0, r5
   13fd4:	subeq	sp, fp, #8
   13fd8:	popeq	{r4, r5, fp, pc}
   13fdc:	movw	r0, #49753	; 0xc259
   13fe0:	movt	r0, #1
   13fe4:	movw	r1, #45235	; 0xb0b3
   13fe8:	movt	r1, #1
   13fec:	movw	r3, #49432	; 0xc118
   13ff0:	movt	r3, #1
   13ff4:	movw	r2, #651	; 0x28b
   13ff8:	bl	129c0 <__assert_fail@plt>
   13ffc:	movw	r0, #49753	; 0xc259
   14000:	movt	r0, #1
   14004:	movw	r1, #45235	; 0xb0b3
   14008:	movt	r1, #1
   1400c:	movw	r3, #49432	; 0xc118
   14010:	movt	r3, #1
   14014:	movw	r2, #647	; 0x287
   14018:	bl	129c0 <__assert_fail@plt>

0001401c <flatcc_builder_create_buffer@@Base>:
   1401c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14020:	add	fp, sp, #28
   14024:	sub	sp, sp, #92	; 0x5c
   14028:	mov	r6, r3
   1402c:	mov	r7, r1
   14030:	mov	r4, r0
   14034:	ldr	r0, [fp, #8]
   14038:	strh	r0, [fp, #-30]	; 0xffffffe2
   1403c:	mov	r0, #0
   14040:	str	r0, [sp, #4]
   14044:	ldr	sl, [fp, #12]
   14048:	and	r9, sl, #1
   1404c:	sub	r1, fp, #30
   14050:	mov	r0, r4
   14054:	mov	r3, r9
   14058:	bl	13eb4 <flatcc_builder_embed_buffer@@Base+0x10c>
   1405c:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   14060:	mov	r0, r4
   14064:	mov	r1, r5
   14068:	bl	141e8 <flatcc_builder_create_buffer@@Base+0x1cc>
   1406c:	cmp	r7, #0
   14070:	str	r6, [sp]
   14074:	beq	14090 <flatcc_builder_create_buffer@@Base+0x74>
   14078:	ldr	r7, [r7]
   1407c:	mov	r0, r7
   14080:	bl	141f8 <flatcc_builder_create_buffer@@Base+0x1dc>
   14084:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14088:	str	r7, [sp, #4]
   1408c:	b	14094 <flatcc_builder_create_buffer@@Base+0x78>
   14090:	ldr	r7, [sp, #4]
   14094:	mov	r8, #4
   14098:	and	r0, r8, sl, lsl #1
   1409c:	cmp	r7, #0
   140a0:	mov	r6, r7
   140a4:	movwne	r6, #1
   140a8:	add	r0, r0, r6, lsl #2
   140ac:	add	r1, r0, #4
   140b0:	mov	r0, r4
   140b4:	mov	r2, r5
   140b8:	bl	13f70 <flatcc_builder_embed_buffer@@Base+0x1c8>
   140bc:	mov	r1, #0
   140c0:	str	r1, [sp, #12]
   140c4:	str	r1, [sp, #8]
   140c8:	ands	ip, sl, #3
   140cc:	strne	r8, [sp, #20]
   140d0:	subne	r1, fp, #40	; 0x28
   140d4:	strne	r1, [sp, #16]
   140d8:	strne	r8, [sp, #8]
   140dc:	movne	r1, #1
   140e0:	strne	r1, [sp, #12]
   140e4:	ldr	r1, [sp, #8]
   140e8:	ldr	r3, [sp, #12]
   140ec:	add	r5, r1, #4
   140f0:	str	r5, [sp, #8]
   140f4:	add	lr, sp, #8
   140f8:	add	r1, lr, r3, lsl #3
   140fc:	sub	r2, fp, #36	; 0x24
   14100:	str	r2, [r1, #8]
   14104:	str	r8, [r1, #12]
   14108:	add	r1, r3, #1
   1410c:	str	r1, [sp, #12]
   14110:	cmp	r7, #0
   14114:	beq	1413c <flatcc_builder_create_buffer@@Base+0x120>
   14118:	lsl	r2, r6, #2
   1411c:	add	r5, r5, r2
   14120:	str	r5, [sp, #8]
   14124:	add	r1, lr, r1, lsl #3
   14128:	add	r5, sp, #4
   1412c:	str	r5, [r1, #8]
   14130:	str	r2, [r1, #12]
   14134:	add	r1, r3, #2
   14138:	str	r1, [sp, #12]
   1413c:	cmp	r0, #0
   14140:	beq	14170 <flatcc_builder_create_buffer@@Base+0x154>
   14144:	ldr	r1, [sp, #8]
   14148:	ldr	r2, [sp, #12]
   1414c:	add	r1, r1, r0
   14150:	str	r1, [sp, #8]
   14154:	add	r1, lr, r2, lsl #3
   14158:	movw	r3, #44705	; 0xaea1
   1415c:	movt	r3, #1
   14160:	str	r3, [r1, #8]
   14164:	str	r0, [r1, #12]
   14168:	add	r0, r2, #1
   1416c:	str	r0, [sp, #12]
   14170:	ldr	r0, [r4, #136]	; 0x88
   14174:	ldr	r1, [sp, #8]
   14178:	sub	r5, r0, r1
   1417c:	cmp	ip, #0
   14180:	addne	r5, r5, #4
   14184:	mov	r0, #144	; 0x90
   14188:	cmp	r9, #0
   1418c:	movweq	r0, #140	; 0x8c
   14190:	ldr	r0, [r4, r0]
   14194:	sub	r0, r0, r5
   14198:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1419c:	str	r0, [fp, #-40]	; 0xffffffd8
   141a0:	ldr	r0, [sp]
   141a4:	sub	r0, r0, r5
   141a8:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   141ac:	str	r0, [fp, #-36]	; 0xffffffdc
   141b0:	add	r1, sp, #8
   141b4:	mov	r0, r4
   141b8:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x1e0>
   141bc:	cmp	r0, #0
   141c0:	subne	sp, fp, #28
   141c4:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141c8:	movw	r0, #49753	; 0xc259
   141cc:	movt	r0, #1
   141d0:	movw	r1, #45235	; 0xb0b3
   141d4:	movt	r1, #1
   141d8:	movw	r3, #45550	; 0xb1ee
   141dc:	movt	r3, #1
   141e0:	mov	r2, #772	; 0x304
   141e4:	bl	129c0 <__assert_fail@plt>
   141e8:	ldrh	r2, [r0, #128]	; 0x80
   141ec:	cmp	r2, r1
   141f0:	strhcc	r1, [r0, #128]	; 0x80
   141f4:	bx	lr
   141f8:	bx	lr

000141fc <flatcc_builder_create_struct@@Base>:
   141fc:	push	{r4, r5, r6, r7, fp, lr}
   14200:	add	fp, sp, #16
   14204:	sub	sp, sp, #72	; 0x48
   14208:	cmp	r3, #0
   1420c:	beq	142a4 <flatcc_builder_create_struct@@Base+0xa8>
   14210:	mov	r7, r3
   14214:	mov	r5, r2
   14218:	mov	r6, r1
   1421c:	mov	r4, r0
   14220:	mov	r1, r3
   14224:	bl	141e8 <flatcc_builder_create_buffer@@Base+0x1cc>
   14228:	mov	r0, r4
   1422c:	mov	r1, r5
   14230:	mov	r2, r7
   14234:	bl	13f70 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14238:	mov	r1, #0
   1423c:	str	r1, [sp, #4]
   14240:	str	r1, [sp]
   14244:	cmp	r5, #0
   14248:	strne	r5, [sp, #12]
   1424c:	strne	r6, [sp, #8]
   14250:	strne	r5, [sp]
   14254:	movne	r1, #1
   14258:	strne	r1, [sp, #4]
   1425c:	cmp	r0, #0
   14260:	beq	14290 <flatcc_builder_create_struct@@Base+0x94>
   14264:	ldm	sp, {r1, r2}
   14268:	add	r1, r1, r0
   1426c:	str	r1, [sp]
   14270:	mov	r1, sp
   14274:	add	r1, r1, r2, lsl #3
   14278:	movw	r3, #44705	; 0xaea1
   1427c:	movt	r3, #1
   14280:	str	r3, [r1, #8]
   14284:	str	r0, [r1, #12]
   14288:	add	r0, r2, #1
   1428c:	str	r0, [sp, #4]
   14290:	mov	r1, sp
   14294:	mov	r0, r4
   14298:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x1e0>
   1429c:	sub	sp, fp, #16
   142a0:	pop	{r4, r5, r6, r7, fp, pc}
   142a4:	movw	r0, #45681	; 0xb271
   142a8:	movt	r0, #1
   142ac:	movw	r1, #45235	; 0xb0b3
   142b0:	movt	r1, #1
   142b4:	movw	r3, #45692	; 0xb27c
   142b8:	movt	r3, #1
   142bc:	movw	r2, #783	; 0x30f
   142c0:	bl	129c0 <__assert_fail@plt>

000142c4 <flatcc_builder_start_buffer@@Base>:
   142c4:	push	{r4, r5, r6, r7, fp, lr}
   142c8:	add	fp, sp, #16
   142cc:	mov	r6, r3
   142d0:	mov	r7, r2
   142d4:	mov	r5, r1
   142d8:	mov	r4, r0
   142dc:	ldrh	r1, [r0, #128]	; 0x80
   142e0:	bl	14380 <flatcc_builder_start_buffer@@Base+0xbc>
   142e4:	mov	r1, r0
   142e8:	mvn	r0, #0
   142ec:	cmp	r1, #0
   142f0:	popne	{r4, r5, r6, r7, fp, pc}
   142f4:	mov	r0, #1
   142f8:	strh	r0, [r4, #128]	; 0x80
   142fc:	ldrh	r1, [r4, #132]	; 0x84
   14300:	ldr	r2, [r4, #32]
   14304:	strh	r1, [r2, #34]	; 0x22
   14308:	strh	r7, [r4, #132]	; 0x84
   1430c:	ldrh	r1, [r4, #164]	; 0xa4
   14310:	ldr	r2, [r4, #32]
   14314:	strh	r1, [r2, #32]
   14318:	strh	r6, [r4, #164]	; 0xa4
   1431c:	ldr	r1, [r4, #32]
   14320:	ldr	r2, [r4, #144]	; 0x90
   14324:	str	r2, [r1, #20]
   14328:	ldr	r1, [r4, #32]
   1432c:	ldr	r2, [r4, #152]	; 0x98
   14330:	str	r2, [r1, #28]
   14334:	ldr	r1, [r4, #32]
   14338:	ldr	r2, [r4, #136]	; 0x88
   1433c:	ldr	r3, [r4, #148]	; 0x94
   14340:	ldr	r7, [r4, #168]	; 0xa8
   14344:	add	r6, r3, #1
   14348:	str	r2, [r4, #144]	; 0x90
   1434c:	str	r6, [r4, #148]	; 0x94
   14350:	str	r3, [r4, #152]	; 0x98
   14354:	str	r7, [r1, #16]
   14358:	movw	r1, #44705	; 0xaea1
   1435c:	movt	r1, #1
   14360:	cmp	r5, #0
   14364:	movne	r1, r5
   14368:	ldr	r1, [r1]
   1436c:	str	r1, [r4, #168]	; 0xa8
   14370:	ldr	r1, [r4, #32]
   14374:	strh	r0, [r1, #14]
   14378:	mov	r0, #0
   1437c:	pop	{r4, r5, r6, r7, fp, pc}
   14380:	push	{r4, r5, r6, sl, fp, lr}
   14384:	add	fp, sp, #16
   14388:	sub	sp, sp, #8
   1438c:	mov	r5, r1
   14390:	mov	r4, r0
   14394:	ldr	r1, [r0, #156]	; 0x9c
   14398:	ldr	r2, [r0, #160]	; 0xa0
   1439c:	add	r0, r1, #1
   143a0:	str	r0, [r4, #156]	; 0x9c
   143a4:	cmp	r1, r2
   143a8:	bge	143bc <flatcc_builder_start_buffer@@Base+0xf8>
   143ac:	ldr	r0, [r4, #32]
   143b0:	add	r0, r0, #36	; 0x24
   143b4:	str	r0, [r4, #32]
   143b8:	b	14430 <flatcc_builder_start_buffer@@Base+0x16c>
   143bc:	ldr	r2, [r4, #176]	; 0xb0
   143c0:	mvn	r6, #0
   143c4:	cmp	r2, #1
   143c8:	cmpge	r1, r2
   143cc:	bge	1446c <flatcc_builder_start_buffer@@Base+0x1a8>
   143d0:	mov	r1, #0
   143d4:	str	r1, [sp]
   143d8:	add	r0, r0, r0, lsl #3
   143dc:	mvn	r1, #35	; 0x23
   143e0:	add	r2, r1, r0, lsl #2
   143e4:	mov	r0, r4
   143e8:	mov	r1, #4
   143ec:	mov	r3, #36	; 0x24
   143f0:	bl	13c14 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   143f4:	str	r0, [r4, #32]
   143f8:	cmp	r0, #0
   143fc:	beq	1446c <flatcc_builder_start_buffer@@Base+0x1a8>
   14400:	ldr	r0, [r4, #88]	; 0x58
   14404:	ldr	r1, [r4, #176]	; 0xb0
   14408:	movw	r2, #36409	; 0x8e39
   1440c:	movt	r2, #14563	; 0x38e3
   14410:	umull	r0, r2, r0, r2
   14414:	lsr	r0, r2, #3
   14418:	cmp	r1, r2, lsr #3
   1441c:	mov	r2, r0
   14420:	movlt	r2, r1
   14424:	cmp	r1, #0
   14428:	movle	r2, r0
   1442c:	str	r2, [r4, #160]	; 0xa0
   14430:	ldr	r0, [r4, #20]
   14434:	ldr	r1, [r4, #32]
   14438:	str	r0, [r1, #8]
   1443c:	ldrh	r2, [r4, #130]	; 0x82
   14440:	strh	r2, [r1, #12]
   14444:	strh	r5, [r4, #130]	; 0x82
   14448:	ldr	r2, [r4, #28]
   1444c:	mvn	r3, #3
   14450:	stm	r1, {r2, r3}
   14454:	mov	r6, #0
   14458:	str	r6, [r4, #20]
   1445c:	add	r0, r0, r2
   14460:	add	r0, r0, #7
   14464:	bic	r0, r0, #7
   14468:	str	r0, [r4, #28]
   1446c:	mov	r0, r6
   14470:	sub	sp, fp, #16
   14474:	pop	{r4, r5, r6, sl, fp, pc}

00014478 <flatcc_builder_end_buffer@@Base>:
   14478:	push	{r4, r5, r6, r7, fp, lr}
   1447c:	add	fp, sp, #16
   14480:	sub	sp, sp, #8
   14484:	mov	r4, r0
   14488:	ldr	r0, [r0, #32]
   1448c:	ldrh	r0, [r0, #14]
   14490:	cmp	r0, #1
   14494:	bne	14520 <flatcc_builder_end_buffer@@Base+0xa8>
   14498:	mov	r5, r1
   1449c:	ldr	r6, [r4, #152]	; 0x98
   144a0:	ldrh	r7, [r4, #164]	; 0xa4
   144a4:	ldrh	r1, [r4, #132]	; 0x84
   144a8:	mov	r0, r4
   144ac:	bl	141e8 <flatcc_builder_create_buffer@@Base+0x1cc>
   144b0:	and	r0, r7, #2
   144b4:	cmp	r6, #0
   144b8:	orrne	r0, r0, #1
   144bc:	ldrh	r2, [r4, #132]	; 0x84
   144c0:	ldrh	r1, [r4, #128]	; 0x80
   144c4:	str	r1, [sp]
   144c8:	str	r0, [sp, #4]
   144cc:	add	r1, r4, #168	; 0xa8
   144d0:	mov	r0, r4
   144d4:	mov	r3, r5
   144d8:	bl	1401c <flatcc_builder_create_buffer@@Base>
   144dc:	mov	r5, r0
   144e0:	cmp	r0, #0
   144e4:	beq	14514 <flatcc_builder_end_buffer@@Base+0x9c>
   144e8:	ldr	r0, [r4, #32]
   144ec:	ldr	r1, [r0, #20]
   144f0:	str	r1, [r4, #144]	; 0x90
   144f4:	ldr	r1, [r0, #28]
   144f8:	str	r1, [r4, #152]	; 0x98
   144fc:	ldr	r1, [r0, #16]
   14500:	str	r1, [r4, #168]	; 0xa8
   14504:	ldrh	r0, [r0, #32]
   14508:	strh	r0, [r4, #164]	; 0xa4
   1450c:	mov	r0, r4
   14510:	bl	14540 <flatcc_builder_end_buffer@@Base+0xc8>
   14514:	mov	r0, r5
   14518:	sub	sp, fp, #16
   1451c:	pop	{r4, r5, r6, r7, fp, pc}
   14520:	movw	r0, #45794	; 0xb2e2
   14524:	movt	r0, #1
   14528:	movw	r1, #45235	; 0xb0b3
   1452c:	movt	r1, #1
   14530:	movw	r3, #45838	; 0xb30e
   14534:	movt	r3, #1
   14538:	movw	r2, #838	; 0x346
   1453c:	bl	129c0 <__assert_fail@plt>
   14540:	push	{r4, sl, fp, lr}
   14544:	add	fp, sp, #8
   14548:	mov	r4, r0
   1454c:	ldr	r0, [r0, #16]
   14550:	ldr	r2, [r4, #20]
   14554:	mov	r1, #0
   14558:	bl	12990 <memset@plt>
   1455c:	ldr	r0, [r4, #32]
   14560:	ldr	r1, [r0, #8]
   14564:	str	r1, [r4, #20]
   14568:	ldr	r1, [r0]
   1456c:	str	r1, [r4, #28]
   14570:	ldr	r1, [r0, #4]
   14574:	mov	r0, r4
   14578:	bl	145f8 <flatcc_builder_start_struct@@Base+0x4c>
   1457c:	ldrh	r1, [r4, #130]	; 0x82
   14580:	mov	r0, r4
   14584:	bl	141e8 <flatcc_builder_create_buffer@@Base+0x1cc>
   14588:	ldr	r0, [r4, #32]
   1458c:	ldr	r1, [r4, #156]	; 0x9c
   14590:	ldrh	r2, [r0, #12]
   14594:	sub	r0, r0, #36	; 0x24
   14598:	str	r0, [r4, #32]
   1459c:	sub	r0, r1, #1
   145a0:	str	r0, [r4, #156]	; 0x9c
   145a4:	strh	r2, [r4, #130]	; 0x82
   145a8:	pop	{r4, sl, fp, pc}

000145ac <flatcc_builder_start_struct@@Base>:
   145ac:	push	{r4, r5, fp, lr}
   145b0:	add	fp, sp, #8
   145b4:	mov	r4, r1
   145b8:	mov	r5, r0
   145bc:	mov	r1, r2
   145c0:	bl	14380 <flatcc_builder_start_buffer@@Base+0xbc>
   145c4:	cmp	r0, #0
   145c8:	movne	r0, #0
   145cc:	popne	{r4, r5, fp, pc}
   145d0:	ldr	r0, [r5, #32]
   145d4:	mov	r1, #2
   145d8:	strh	r1, [r0, #14]
   145dc:	mov	r0, r5
   145e0:	mvn	r1, #3
   145e4:	bl	145f8 <flatcc_builder_start_struct@@Base+0x4c>
   145e8:	mov	r0, r5
   145ec:	mov	r1, r4
   145f0:	pop	{r4, r5, fp, lr}
   145f4:	b	14630 <flatcc_builder_start_struct@@Base+0x84>
   145f8:	push	{fp, lr}
   145fc:	mov	fp, sp
   14600:	ldr	r2, [r0, #28]
   14604:	ldr	ip, [r0, #32]
   14608:	ldr	r3, [r0, #60]	; 0x3c
   1460c:	ldr	lr, [r0, #64]	; 0x40
   14610:	add	r3, r3, r2
   14614:	str	r3, [r0, #16]
   14618:	sub	r2, lr, r2
   1461c:	cmp	r2, r1
   14620:	movhi	r2, r1
   14624:	str	r2, [r0, #24]
   14628:	str	r1, [ip, #4]
   1462c:	pop	{fp, pc}
   14630:	push	{r4, r5, fp, lr}
   14634:	add	fp, sp, #8
   14638:	mov	r4, r0
   1463c:	ldr	r5, [r0, #20]
   14640:	ldr	r2, [r0, #24]
   14644:	add	r0, r5, r1
   14648:	str	r0, [r4, #20]
   1464c:	cmp	r0, r2
   14650:	bcc	14674 <flatcc_builder_start_struct@@Base+0xc8>
   14654:	add	r1, r0, #1
   14658:	mov	r0, r4
   1465c:	mvn	r2, #3
   14660:	bl	16a4c <flatcc_builder_get_emit_context@@Base+0x18>
   14664:	mov	r1, r0
   14668:	mov	r0, #0
   1466c:	cmp	r1, #0
   14670:	popne	{r4, r5, fp, pc}
   14674:	ldr	r0, [r4, #16]
   14678:	add	r0, r0, r5
   1467c:	pop	{r4, r5, fp, pc}

00014680 <flatcc_builder_struct_edit@@Base>:
   14680:	ldr	r0, [r0, #16]
   14684:	bx	lr

00014688 <flatcc_builder_end_struct@@Base>:
   14688:	push	{r4, r5, fp, lr}
   1468c:	add	fp, sp, #8
   14690:	mov	r4, r0
   14694:	ldr	r0, [r0, #32]
   14698:	ldrh	r0, [r0, #14]
   1469c:	cmp	r0, #2
   146a0:	bne	146d0 <flatcc_builder_end_struct@@Base+0x48>
   146a4:	ldrh	r3, [r4, #130]	; 0x82
   146a8:	ldr	r1, [r4, #16]
   146ac:	ldr	r2, [r4, #20]
   146b0:	mov	r0, r4
   146b4:	bl	141fc <flatcc_builder_create_struct@@Base>
   146b8:	mov	r5, r0
   146bc:	cmp	r0, #0
   146c0:	movne	r0, r4
   146c4:	blne	14540 <flatcc_builder_end_buffer@@Base+0xc8>
   146c8:	mov	r0, r5
   146cc:	pop	{r4, r5, fp, pc}
   146d0:	movw	r0, #45927	; 0xb367
   146d4:	movt	r0, #1
   146d8:	movw	r1, #45235	; 0xb0b3
   146dc:	movt	r1, #1
   146e0:	movw	r3, #45971	; 0xb393
   146e4:	movt	r3, #1
   146e8:	mov	r2, #872	; 0x368
   146ec:	bl	129c0 <__assert_fail@plt>

000146f0 <flatcc_builder_extend_vector@@Base>:
   146f0:	push	{r4, r5, fp, lr}
   146f4:	add	fp, sp, #8
   146f8:	mov	r5, r1
   146fc:	mov	r4, r0
   14700:	ldr	r0, [r0, #32]
   14704:	ldr	r2, [r0, #24]
   14708:	mov	r0, r4
   1470c:	bl	14734 <flatcc_builder_extend_vector@@Base+0x44>
   14710:	cmp	r0, #0
   14714:	movne	r0, #0
   14718:	popne	{r4, r5, fp, pc}
   1471c:	ldr	r0, [r4, #32]
   14720:	ldr	r0, [r0, #16]
   14724:	mul	r1, r0, r5
   14728:	mov	r0, r4
   1472c:	pop	{r4, r5, fp, lr}
   14730:	b	14630 <flatcc_builder_start_struct@@Base+0x84>
   14734:	push	{fp, lr}
   14738:	mov	fp, sp
   1473c:	ldr	r0, [r0, #32]
   14740:	ldr	r3, [r0, #20]
   14744:	adds	r1, r3, r1
   14748:	bcs	1475c <flatcc_builder_extend_vector@@Base+0x6c>
   1474c:	cmp	r1, r2
   14750:	strls	r1, [r0, #20]
   14754:	movls	r0, #0
   14758:	popls	{fp, pc}
   1475c:	movw	r0, #49506	; 0xc162
   14760:	movt	r0, #1
   14764:	movw	r1, #45235	; 0xb0b3
   14768:	movt	r1, #1
   1476c:	movw	r3, #49533	; 0xc17d
   14770:	movt	r3, #1
   14774:	mov	r2, #892	; 0x37c
   14778:	bl	129c0 <__assert_fail@plt>

0001477c <flatcc_builder_vector_push@@Base>:
   1477c:	push	{fp, lr}
   14780:	mov	fp, sp
   14784:	ldr	r2, [r0, #32]
   14788:	ldrh	r3, [r2, #14]
   1478c:	cmp	r3, #4
   14790:	bne	147bc <flatcc_builder_vector_push@@Base+0x40>
   14794:	ldr	ip, [r2, #20]
   14798:	ldr	r3, [r2, #24]
   1479c:	cmp	ip, r3
   147a0:	bhi	147dc <flatcc_builder_vector_push@@Base+0x60>
   147a4:	add	r3, ip, #1
   147a8:	str	r3, [r2, #20]
   147ac:	ldr	r2, [r0, #32]
   147b0:	ldr	r2, [r2, #16]
   147b4:	pop	{fp, lr}
   147b8:	b	147fc <flatcc_builder_vector_push@@Base+0x80>
   147bc:	movw	r0, #46038	; 0xb3d6
   147c0:	movt	r0, #1
   147c4:	movw	r1, #45235	; 0xb0b3
   147c8:	movt	r1, #1
   147cc:	movw	r3, #46082	; 0xb402
   147d0:	movt	r3, #1
   147d4:	movw	r2, #907	; 0x38b
   147d8:	bl	129c0 <__assert_fail@plt>
   147dc:	movw	r0, #46149	; 0xb445
   147e0:	movt	r0, #1
   147e4:	movw	r1, #45235	; 0xb0b3
   147e8:	movt	r1, #1
   147ec:	movw	r3, #46082	; 0xb402
   147f0:	movt	r3, #1
   147f4:	mov	r2, #908	; 0x38c
   147f8:	bl	129c0 <__assert_fail@plt>
   147fc:	push	{r4, r5, r6, sl, fp, lr}
   14800:	add	fp, sp, #16
   14804:	mov	r4, r2
   14808:	mov	r5, r1
   1480c:	mov	r1, r2
   14810:	bl	14630 <flatcc_builder_start_struct@@Base+0x84>
   14814:	mov	r6, r0
   14818:	cmp	r0, #0
   1481c:	beq	14830 <flatcc_builder_vector_push@@Base+0xb4>
   14820:	mov	r0, r6
   14824:	mov	r1, r5
   14828:	mov	r2, r4
   1482c:	bl	12900 <memcpy@plt>
   14830:	mov	r0, r6
   14834:	pop	{r4, r5, r6, sl, fp, pc}

00014838 <flatcc_builder_append_vector@@Base>:
   14838:	push	{r4, r5, r6, sl, fp, lr}
   1483c:	add	fp, sp, #16
   14840:	mov	r4, r1
   14844:	mov	r6, r0
   14848:	ldr	r0, [r0, #32]
   1484c:	ldrh	r1, [r0, #14]
   14850:	cmp	r1, #4
   14854:	bne	14898 <flatcc_builder_append_vector@@Base+0x60>
   14858:	mov	r5, r2
   1485c:	ldr	r2, [r0, #24]
   14860:	mov	r0, r6
   14864:	mov	r1, r5
   14868:	bl	14734 <flatcc_builder_extend_vector@@Base+0x44>
   1486c:	cmp	r0, #0
   14870:	beq	1487c <flatcc_builder_append_vector@@Base+0x44>
   14874:	mov	r0, #0
   14878:	pop	{r4, r5, r6, sl, fp, pc}
   1487c:	ldr	r0, [r6, #32]
   14880:	ldr	r0, [r0, #16]
   14884:	mul	r2, r0, r5
   14888:	mov	r0, r6
   1488c:	mov	r1, r4
   14890:	pop	{r4, r5, r6, sl, fp, lr}
   14894:	b	147fc <flatcc_builder_vector_push@@Base+0x80>
   14898:	movw	r0, #46038	; 0xb3d6
   1489c:	movt	r0, #1
   148a0:	movw	r1, #45235	; 0xb0b3
   148a4:	movt	r1, #1
   148a8:	movw	r3, #46210	; 0xb482
   148ac:	movt	r3, #1
   148b0:	movw	r2, #915	; 0x393
   148b4:	bl	129c0 <__assert_fail@plt>

000148b8 <flatcc_builder_extend_offset_vector@@Base>:
   148b8:	push	{r4, r5, fp, lr}
   148bc:	add	fp, sp, #8
   148c0:	mov	r5, r1
   148c4:	mov	r4, r0
   148c8:	mvn	r2, #-1073741824	; 0xc0000000
   148cc:	bl	14734 <flatcc_builder_extend_vector@@Base+0x44>
   148d0:	cmp	r0, #0
   148d4:	movne	r0, #0
   148d8:	popne	{r4, r5, fp, pc}
   148dc:	lsl	r1, r5, #2
   148e0:	mov	r0, r4
   148e4:	pop	{r4, r5, fp, lr}
   148e8:	b	14630 <flatcc_builder_start_struct@@Base+0x84>

000148ec <flatcc_builder_offset_vector_push@@Base>:
   148ec:	push	{r4, r5, fp, lr}
   148f0:	add	fp, sp, #8
   148f4:	mov	r4, r1
   148f8:	ldr	r1, [r0, #32]
   148fc:	ldrh	r2, [r1, #14]
   14900:	cmp	r2, #5
   14904:	bne	1493c <flatcc_builder_offset_vector_push@@Base+0x50>
   14908:	ldr	r2, [r1, #20]
   1490c:	mov	r5, #0
   14910:	cmn	r2, #-1073741823	; 0xc0000001
   14914:	beq	14934 <flatcc_builder_offset_vector_push@@Base+0x48>
   14918:	add	r2, r2, #1
   1491c:	str	r2, [r1, #20]
   14920:	mov	r1, #4
   14924:	bl	14630 <flatcc_builder_start_struct@@Base+0x84>
   14928:	cmp	r0, #0
   1492c:	strne	r4, [r0]
   14930:	movne	r5, r0
   14934:	mov	r0, r5
   14938:	pop	{r4, r5, fp, pc}
   1493c:	movw	r0, #46287	; 0xb4cf
   14940:	movt	r0, #1
   14944:	movw	r1, #45235	; 0xb0b3
   14948:	movt	r1, #1
   1494c:	movw	r3, #46338	; 0xb502
   14950:	movt	r3, #1
   14954:	movw	r2, #934	; 0x3a6
   14958:	bl	129c0 <__assert_fail@plt>

0001495c <flatcc_builder_append_offset_vector@@Base>:
   1495c:	push	{r4, r5, r6, sl, fp, lr}
   14960:	add	fp, sp, #16
   14964:	mov	r6, r0
   14968:	ldr	r0, [r0, #32]
   1496c:	ldrh	r0, [r0, #14]
   14970:	cmp	r0, #5
   14974:	bne	149b4 <flatcc_builder_append_offset_vector@@Base+0x58>
   14978:	mov	r5, r2
   1497c:	mov	r4, r1
   14980:	mov	r0, r6
   14984:	mov	r1, r2
   14988:	mvn	r2, #-1073741824	; 0xc0000000
   1498c:	bl	14734 <flatcc_builder_extend_vector@@Base+0x44>
   14990:	cmp	r0, #0
   14994:	beq	149a0 <flatcc_builder_append_offset_vector@@Base+0x44>
   14998:	mov	r0, #0
   1499c:	pop	{r4, r5, r6, sl, fp, pc}
   149a0:	lsl	r2, r5, #2
   149a4:	mov	r0, r6
   149a8:	mov	r1, r4
   149ac:	pop	{r4, r5, r6, sl, fp, lr}
   149b0:	b	147fc <flatcc_builder_vector_push@@Base+0x80>
   149b4:	movw	r0, #46287	; 0xb4cf
   149b8:	movt	r0, #1
   149bc:	movw	r1, #45235	; 0xb0b3
   149c0:	movt	r1, #1
   149c4:	movw	r3, #46436	; 0xb564
   149c8:	movt	r3, #1
   149cc:	mov	r2, #948	; 0x3b4
   149d0:	bl	129c0 <__assert_fail@plt>

000149d4 <flatcc_builder_extend_string@@Base>:
   149d4:	push	{r4, r5, fp, lr}
   149d8:	add	fp, sp, #8
   149dc:	mov	r5, r0
   149e0:	ldr	r0, [r0, #32]
   149e4:	ldrh	r0, [r0, #14]
   149e8:	cmp	r0, #6
   149ec:	bne	14a1c <flatcc_builder_extend_string@@Base+0x48>
   149f0:	mov	r4, r1
   149f4:	mov	r0, r5
   149f8:	mvn	r2, #0
   149fc:	bl	14734 <flatcc_builder_extend_vector@@Base+0x44>
   14a00:	cmp	r0, #0
   14a04:	movne	r0, #0
   14a08:	popne	{r4, r5, fp, pc}
   14a0c:	mov	r0, r5
   14a10:	mov	r1, r4
   14a14:	pop	{r4, r5, fp, lr}
   14a18:	b	14630 <flatcc_builder_start_struct@@Base+0x84>
   14a1c:	movw	r0, #46552	; 0xb5d8
   14a20:	movt	r0, #1
   14a24:	movw	r1, #45235	; 0xb0b3
   14a28:	movt	r1, #1
   14a2c:	movw	r3, #46596	; 0xb604
   14a30:	movt	r3, #1
   14a34:	movw	r2, #957	; 0x3bd
   14a38:	bl	129c0 <__assert_fail@plt>

00014a3c <flatcc_builder_append_string@@Base>:
   14a3c:	push	{r4, r5, r6, sl, fp, lr}
   14a40:	add	fp, sp, #16
   14a44:	mov	r6, r0
   14a48:	ldr	r0, [r0, #32]
   14a4c:	ldrh	r0, [r0, #14]
   14a50:	cmp	r0, #6
   14a54:	bne	14a94 <flatcc_builder_append_string@@Base+0x58>
   14a58:	mov	r4, r2
   14a5c:	mov	r5, r1
   14a60:	mov	r0, r6
   14a64:	mov	r1, r2
   14a68:	mvn	r2, #0
   14a6c:	bl	14734 <flatcc_builder_extend_vector@@Base+0x44>
   14a70:	cmp	r0, #0
   14a74:	beq	14a80 <flatcc_builder_append_string@@Base+0x44>
   14a78:	mov	r0, #0
   14a7c:	pop	{r4, r5, r6, sl, fp, pc}
   14a80:	mov	r0, r6
   14a84:	mov	r1, r5
   14a88:	mov	r2, r4
   14a8c:	pop	{r4, r5, r6, sl, fp, lr}
   14a90:	b	147fc <flatcc_builder_vector_push@@Base+0x80>
   14a94:	movw	r0, #46552	; 0xb5d8
   14a98:	movt	r0, #1
   14a9c:	movw	r1, #45235	; 0xb0b3
   14aa0:	movt	r1, #1
   14aa4:	movw	r3, #46659	; 0xb643
   14aa8:	movt	r3, #1
   14aac:	movw	r2, #966	; 0x3c6
   14ab0:	bl	129c0 <__assert_fail@plt>

00014ab4 <flatcc_builder_append_string_str@@Base>:
   14ab4:	push	{r4, r5, fp, lr}
   14ab8:	add	fp, sp, #8
   14abc:	mov	r4, r1
   14ac0:	mov	r5, r0
   14ac4:	mov	r0, r1
   14ac8:	bl	1296c <strlen@plt>
   14acc:	mov	r2, r0
   14ad0:	mov	r0, r5
   14ad4:	mov	r1, r4
   14ad8:	pop	{r4, r5, fp, lr}
   14adc:	b	14a3c <flatcc_builder_append_string@@Base>

00014ae0 <flatcc_builder_append_string_strn@@Base>:
   14ae0:	push	{r4, r5, fp, lr}
   14ae4:	add	fp, sp, #8
   14ae8:	mov	r4, r1
   14aec:	mov	r5, r0
   14af0:	mov	r0, r1
   14af4:	mov	r1, r2
   14af8:	bl	14b10 <flatcc_builder_append_string_strn@@Base+0x30>
   14afc:	mov	r2, r0
   14b00:	mov	r0, r5
   14b04:	mov	r1, r4
   14b08:	pop	{r4, r5, fp, lr}
   14b0c:	b	14a3c <flatcc_builder_append_string@@Base>
   14b10:	push	{r4, r5, fp, lr}
   14b14:	add	fp, sp, #8
   14b18:	mov	r4, r1
   14b1c:	mov	r5, r0
   14b20:	mov	r1, #0
   14b24:	mov	r2, r4
   14b28:	bl	129a8 <memchr@plt>
   14b2c:	cmp	r0, #0
   14b30:	subne	r4, r0, r5
   14b34:	mov	r0, r4
   14b38:	pop	{r4, r5, fp, pc}

00014b3c <flatcc_builder_truncate_vector@@Base>:
   14b3c:	push	{fp, lr}
   14b40:	mov	fp, sp
   14b44:	ldr	r2, [r0, #32]
   14b48:	ldrh	r3, [r2, #14]
   14b4c:	cmp	r3, #4
   14b50:	bne	14b80 <flatcc_builder_truncate_vector@@Base+0x44>
   14b54:	ldr	r3, [r2, #20]
   14b58:	cmp	r3, r1
   14b5c:	bcc	14ba0 <flatcc_builder_truncate_vector@@Base+0x64>
   14b60:	sub	r3, r3, r1
   14b64:	str	r3, [r2, #20]
   14b68:	ldr	r2, [r0, #32]
   14b6c:	ldr	r2, [r2, #16]
   14b70:	mul	r1, r2, r1
   14b74:	bl	14bc0 <flatcc_builder_truncate_vector@@Base+0x84>
   14b78:	mov	r0, #0
   14b7c:	pop	{fp, pc}
   14b80:	movw	r0, #46038	; 0xb3d6
   14b84:	movt	r0, #1
   14b88:	movw	r1, #45235	; 0xb0b3
   14b8c:	movt	r1, #1
   14b90:	movw	r3, #46736	; 0xb690
   14b94:	movt	r3, #1
   14b98:	movw	r2, #985	; 0x3d9
   14b9c:	bl	129c0 <__assert_fail@plt>
   14ba0:	movw	r0, #46799	; 0xb6cf
   14ba4:	movt	r0, #1
   14ba8:	movw	r1, #45235	; 0xb0b3
   14bac:	movt	r1, #1
   14bb0:	movw	r3, #46736	; 0xb690
   14bb4:	movt	r3, #1
   14bb8:	movw	r2, #986	; 0x3da
   14bbc:	bl	129c0 <__assert_fail@plt>
   14bc0:	mov	r2, r1
   14bc4:	ldr	r1, [r0, #16]
   14bc8:	ldr	r3, [r0, #20]
   14bcc:	sub	r3, r3, r2
   14bd0:	str	r3, [r0, #20]
   14bd4:	add	r0, r1, r3
   14bd8:	mov	r1, #0
   14bdc:	b	12990 <memset@plt>

00014be0 <flatcc_builder_truncate_offset_vector@@Base>:
   14be0:	push	{fp, lr}
   14be4:	mov	fp, sp
   14be8:	ldr	r2, [r0, #32]
   14bec:	ldrh	r3, [r2, #14]
   14bf0:	cmp	r3, #5
   14bf4:	bne	14c24 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   14bf8:	ldr	r3, [r2, #20]
   14bfc:	cmp	r3, r1
   14c00:	bcc	14c44 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14c04:	sub	r3, r3, r1
   14c08:	str	r3, [r2, #20]
   14c0c:	ldr	r2, [r0, #32]
   14c10:	ldr	r2, [r2, #16]
   14c14:	mul	r1, r2, r1
   14c18:	bl	14bc0 <flatcc_builder_truncate_vector@@Base+0x84>
   14c1c:	mov	r0, #0
   14c20:	pop	{fp, pc}
   14c24:	movw	r0, #46287	; 0xb4cf
   14c28:	movt	r0, #1
   14c2c:	movw	r1, #45235	; 0xb0b3
   14c30:	movt	r1, #1
   14c34:	movw	r3, #46835	; 0xb6f3
   14c38:	movt	r3, #1
   14c3c:	movw	r2, #994	; 0x3e2
   14c40:	bl	129c0 <__assert_fail@plt>
   14c44:	movw	r0, #46905	; 0xb739
   14c48:	movt	r0, #1
   14c4c:	movw	r1, #45235	; 0xb0b3
   14c50:	movt	r1, #1
   14c54:	movw	r3, #46835	; 0xb6f3
   14c58:	movt	r3, #1
   14c5c:	movw	r2, #995	; 0x3e3
   14c60:	bl	129c0 <__assert_fail@plt>

00014c64 <flatcc_builder_truncate_string@@Base>:
   14c64:	push	{fp, lr}
   14c68:	mov	fp, sp
   14c6c:	ldr	r2, [r0, #32]
   14c70:	ldrh	r3, [r2, #14]
   14c74:	cmp	r3, #6
   14c78:	bne	14c9c <flatcc_builder_truncate_string@@Base+0x38>
   14c7c:	ldr	r3, [r2, #20]
   14c80:	cmp	r3, r1
   14c84:	bcc	14cbc <flatcc_builder_truncate_string@@Base+0x58>
   14c88:	sub	r3, r3, r1
   14c8c:	str	r3, [r2, #20]
   14c90:	bl	14bc0 <flatcc_builder_truncate_vector@@Base+0x84>
   14c94:	mov	r0, #0
   14c98:	pop	{fp, pc}
   14c9c:	movw	r0, #46552	; 0xb5d8
   14ca0:	movt	r0, #1
   14ca4:	movw	r1, #45235	; 0xb0b3
   14ca8:	movt	r1, #1
   14cac:	movw	r3, #46964	; 0xb774
   14cb0:	movt	r3, #1
   14cb4:	movw	r2, #1003	; 0x3eb
   14cb8:	bl	129c0 <__assert_fail@plt>
   14cbc:	movw	r0, #47027	; 0xb7b3
   14cc0:	movt	r0, #1
   14cc4:	movw	r1, #45235	; 0xb0b3
   14cc8:	movt	r1, #1
   14ccc:	movw	r3, #46964	; 0xb774
   14cd0:	movt	r3, #1
   14cd4:	mov	r2, #1004	; 0x3ec
   14cd8:	bl	129c0 <__assert_fail@plt>

00014cdc <flatcc_builder_start_vector@@Base>:
   14cdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ce0:	add	fp, sp, #24
   14ce4:	sub	sp, sp, #8
   14ce8:	mov	r5, r3
   14cec:	mov	r6, r1
   14cf0:	mov	r4, r0
   14cf4:	strh	r2, [sp, #6]
   14cf8:	add	r0, sp, #6
   14cfc:	mov	r8, #4
   14d00:	mov	r1, #4
   14d04:	bl	14d5c <flatcc_builder_start_vector@@Base+0x80>
   14d08:	ldrh	r1, [sp, #6]
   14d0c:	mov	r0, r4
   14d10:	bl	14380 <flatcc_builder_start_buffer@@Base+0xbc>
   14d14:	mvn	r7, #0
   14d18:	cmp	r0, #0
   14d1c:	bne	14d50 <flatcc_builder_start_vector@@Base+0x74>
   14d20:	ldr	r0, [r4, #32]
   14d24:	str	r6, [r0, #16]
   14d28:	ldr	r0, [r4, #32]
   14d2c:	mov	r7, #0
   14d30:	str	r7, [r0, #20]
   14d34:	ldr	r0, [r4, #32]
   14d38:	str	r5, [r0, #24]
   14d3c:	ldr	r0, [r4, #32]
   14d40:	strh	r8, [r0, #14]
   14d44:	mov	r0, r4
   14d48:	mvn	r1, #3
   14d4c:	bl	145f8 <flatcc_builder_start_struct@@Base+0x4c>
   14d50:	mov	r0, r7
   14d54:	sub	sp, fp, #24
   14d58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d5c:	ldrh	r2, [r0]
   14d60:	cmp	r2, r1
   14d64:	strhcc	r1, [r0]
   14d68:	bx	lr

00014d6c <flatcc_builder_start_offset_vector@@Base>:
   14d6c:	push	{r4, r5, r6, sl, fp, lr}
   14d70:	add	fp, sp, #16
   14d74:	mov	r4, r0
   14d78:	mov	r6, #4
   14d7c:	mov	r1, #4
   14d80:	bl	14380 <flatcc_builder_start_buffer@@Base+0xbc>
   14d84:	mvn	r5, #0
   14d88:	cmp	r0, #0
   14d8c:	beq	14d98 <flatcc_builder_start_offset_vector@@Base+0x2c>
   14d90:	mov	r0, r5
   14d94:	pop	{r4, r5, r6, sl, fp, pc}
   14d98:	ldr	r0, [r4, #32]
   14d9c:	str	r6, [r0, #16]
   14da0:	ldr	r0, [r4, #32]
   14da4:	mov	r5, #0
   14da8:	str	r5, [r0, #20]
   14dac:	ldr	r0, [r4, #32]
   14db0:	mov	r1, #5
   14db4:	strh	r1, [r0, #14]
   14db8:	mov	r0, r4
   14dbc:	mvn	r1, #3
   14dc0:	bl	145f8 <flatcc_builder_start_struct@@Base+0x4c>
   14dc4:	mov	r0, r5
   14dc8:	pop	{r4, r5, r6, sl, fp, pc}

00014dcc <flatcc_builder_create_offset_vector@@Base>:
   14dcc:	push	{r4, r5, r6, sl, fp, lr}
   14dd0:	add	fp, sp, #16
   14dd4:	mov	r6, r2
   14dd8:	mov	r5, r1
   14ddc:	mov	r4, r0
   14de0:	bl	14d6c <flatcc_builder_start_offset_vector@@Base>
   14de4:	cmp	r0, #0
   14de8:	beq	14df4 <flatcc_builder_create_offset_vector@@Base+0x28>
   14dec:	mov	r0, #0
   14df0:	pop	{r4, r5, r6, sl, fp, pc}
   14df4:	mov	r0, r4
   14df8:	mov	r1, r6
   14dfc:	bl	148b8 <flatcc_builder_extend_offset_vector@@Base>
   14e00:	cmp	r0, #0
   14e04:	beq	14dec <flatcc_builder_create_offset_vector@@Base+0x20>
   14e08:	lsl	r2, r6, #2
   14e0c:	mov	r1, r5
   14e10:	bl	12900 <memcpy@plt>
   14e14:	mov	r0, r4
   14e18:	pop	{r4, r5, r6, sl, fp, lr}
   14e1c:	b	14e20 <flatcc_builder_end_offset_vector@@Base>

00014e20 <flatcc_builder_end_offset_vector@@Base>:
   14e20:	push	{r4, r5, fp, lr}
   14e24:	add	fp, sp, #8
   14e28:	mov	r4, r0
   14e2c:	ldr	r0, [r0, #32]
   14e30:	ldrh	r1, [r0, #14]
   14e34:	cmp	r1, #5
   14e38:	bne	14e64 <flatcc_builder_end_offset_vector@@Base+0x44>
   14e3c:	ldr	r2, [r0, #20]
   14e40:	ldr	r1, [r4, #16]
   14e44:	mov	r0, r4
   14e48:	bl	159a8 <flatcc_builder_create_offset_vector_direct@@Base>
   14e4c:	mov	r5, r0
   14e50:	cmp	r0, #0
   14e54:	movne	r0, r4
   14e58:	blne	14540 <flatcc_builder_end_buffer@@Base+0xc8>
   14e5c:	mov	r0, r5
   14e60:	pop	{r4, r5, fp, pc}
   14e64:	movw	r0, #46287	; 0xb4cf
   14e68:	movt	r0, #1
   14e6c:	movw	r1, #45235	; 0xb0b3
   14e70:	movt	r1, #1
   14e74:	movw	r3, #47870	; 0xbafe
   14e78:	movt	r3, #1
   14e7c:	movw	r2, #1480	; 0x5c8
   14e80:	bl	129c0 <__assert_fail@plt>

00014e84 <flatcc_builder_start_string@@Base>:
   14e84:	push	{r4, r5, r6, sl, fp, lr}
   14e88:	add	fp, sp, #16
   14e8c:	mov	r4, r0
   14e90:	mov	r6, #1
   14e94:	mov	r1, #1
   14e98:	bl	14380 <flatcc_builder_start_buffer@@Base+0xbc>
   14e9c:	mvn	r5, #0
   14ea0:	cmp	r0, #0
   14ea4:	beq	14eb0 <flatcc_builder_start_string@@Base+0x2c>
   14ea8:	mov	r0, r5
   14eac:	pop	{r4, r5, r6, sl, fp, pc}
   14eb0:	ldr	r0, [r4, #32]
   14eb4:	str	r6, [r0, #16]
   14eb8:	ldr	r0, [r4, #32]
   14ebc:	mov	r5, #0
   14ec0:	str	r5, [r0, #20]
   14ec4:	ldr	r0, [r4, #32]
   14ec8:	mov	r1, #6
   14ecc:	strh	r1, [r0, #14]
   14ed0:	mov	r0, r4
   14ed4:	mvn	r1, #3
   14ed8:	bl	145f8 <flatcc_builder_start_struct@@Base+0x4c>
   14edc:	mov	r0, r5
   14ee0:	pop	{r4, r5, r6, sl, fp, pc}

00014ee4 <flatcc_builder_reserve_table@@Base>:
   14ee4:	cmn	r1, #1
   14ee8:	ble	14ef0 <flatcc_builder_reserve_table@@Base+0xc>
   14eec:	b	14f18 <flatcc_builder_reserve_table@@Base+0x34>
   14ef0:	push	{fp, lr}
   14ef4:	mov	fp, sp
   14ef8:	movw	r0, #47126	; 0xb816
   14efc:	movt	r0, #1
   14f00:	movw	r1, #45235	; 0xb0b3
   14f04:	movt	r1, #1
   14f08:	movw	r3, #47061	; 0xb7d5
   14f0c:	movt	r3, #1
   14f10:	movw	r2, #1065	; 0x429
   14f14:	bl	129c0 <__assert_fail@plt>
   14f18:	push	{r4, r5, r6, sl, fp, lr}
   14f1c:	add	fp, sp, #16
   14f20:	sub	sp, sp, #8
   14f24:	mov	r6, r1
   14f28:	mov	r4, r0
   14f2c:	ldr	r0, [r0, #32]
   14f30:	ldrh	r1, [r0, #28]
   14f34:	ldr	r0, [r0, #16]
   14f38:	mov	r2, #1
   14f3c:	str	r2, [sp]
   14f40:	mov	r2, #4
   14f44:	add	r3, r2, r6, lsl #1
   14f48:	add	r2, r0, r1, lsl #1
   14f4c:	mov	r5, #0
   14f50:	mov	r0, r4
   14f54:	mov	r1, #0
   14f58:	bl	13c14 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14f5c:	str	r0, [r4, #4]
   14f60:	cmp	r0, #0
   14f64:	beq	14fa0 <flatcc_builder_reserve_table@@Base+0xbc>
   14f68:	lsl	r1, r6, #1
   14f6c:	add	r0, r0, #4
   14f70:	str	r0, [r4, #4]
   14f74:	ldr	r0, [r4, #32]
   14f78:	ldr	r2, [r0, #20]
   14f7c:	str	r5, [sp]
   14f80:	orr	r3, r1, #1
   14f84:	mov	r0, r4
   14f88:	mov	r1, #3
   14f8c:	bl	13c14 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14f90:	str	r0, [r4]
   14f94:	cmp	r0, #0
   14f98:	mvneq	r5, #0
   14f9c:	b	14fa4 <flatcc_builder_reserve_table@@Base+0xc0>
   14fa0:	mvn	r5, #0
   14fa4:	mov	r0, r5
   14fa8:	sub	sp, fp, #16
   14fac:	pop	{r4, r5, r6, sl, fp, pc}

00014fb0 <flatcc_builder_start_table@@Base>:
   14fb0:	push	{r4, r5, r6, sl, fp, lr}
   14fb4:	add	fp, sp, #16
   14fb8:	mov	r6, r1
   14fbc:	mov	r4, r0
   14fc0:	mov	r1, #4
   14fc4:	bl	14380 <flatcc_builder_start_buffer@@Base+0xbc>
   14fc8:	mvn	r5, #0
   14fcc:	cmp	r0, #0
   14fd0:	bne	15048 <flatcc_builder_start_table@@Base+0x98>
   14fd4:	ldr	r0, [r4, #4]
   14fd8:	ldr	r1, [r4, #32]
   14fdc:	ldr	r2, [r4, #52]	; 0x34
   14fe0:	sub	r0, r0, r2
   14fe4:	str	r0, [r1, #16]
   14fe8:	ldr	r0, [r4]
   14fec:	ldr	r1, [r4, #32]
   14ff0:	ldr	r2, [r4, #76]	; 0x4c
   14ff4:	sub	r0, r0, r2
   14ff8:	str	r0, [r1, #20]
   14ffc:	ldr	r0, [r4, #12]
   15000:	ldr	r1, [r4, #32]
   15004:	str	r0, [r1, #24]
   15008:	ldr	r0, [r4, #32]
   1500c:	ldrh	r1, [r4, #8]
   15010:	strh	r1, [r0, #28]
   15014:	mov	r0, #0
   15018:	strh	r0, [r4, #8]
   1501c:	movw	r0, #15186	; 0x3b52
   15020:	movt	r0, #12137	; 0x2f69
   15024:	str	r0, [r4, #12]
   15028:	ldr	r0, [r4, #32]
   1502c:	mov	r1, #3
   15030:	strh	r1, [r0, #14]
   15034:	mov	r0, r4
   15038:	mov	r1, r6
   1503c:	bl	14f18 <flatcc_builder_reserve_table@@Base+0x34>
   15040:	cmp	r0, #0
   15044:	beq	15050 <flatcc_builder_start_table@@Base+0xa0>
   15048:	mov	r0, r5
   1504c:	pop	{r4, r5, r6, sl, fp, pc}
   15050:	mov	r0, r4
   15054:	movw	r1, #65532	; 0xfffc
   15058:	bl	145f8 <flatcc_builder_start_struct@@Base+0x4c>
   1505c:	mov	r5, #0
   15060:	mov	r0, r5
   15064:	pop	{r4, r5, r6, sl, fp, pc}

00015068 <flatcc_builder_create_vtable@@Base>:
   15068:	push	{fp, lr}
   1506c:	mov	fp, sp
   15070:	sub	sp, sp, #72	; 0x48
   15074:	mov	r3, #0
   15078:	str	r3, [sp, #4]
   1507c:	str	r3, [sp]
   15080:	cmp	r2, #0
   15084:	strne	r2, [sp, #12]
   15088:	strne	r1, [sp, #8]
   1508c:	strne	r2, [sp]
   15090:	movne	r1, #1
   15094:	strne	r1, [sp, #4]
   15098:	ldr	r1, [r0, #152]	; 0x98
   1509c:	cmp	r1, #0
   150a0:	bne	150b0 <flatcc_builder_create_vtable@@Base+0x48>
   150a4:	ldr	r1, [r0, #180]	; 0xb4
   150a8:	cmp	r1, #0
   150ac:	beq	150cc <flatcc_builder_create_vtable@@Base+0x64>
   150b0:	mov	r1, sp
   150b4:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x1e0>
   150b8:	cmp	r0, #0
   150bc:	beq	150dc <flatcc_builder_create_vtable@@Base+0x74>
   150c0:	add	r0, r0, #1
   150c4:	mov	sp, fp
   150c8:	pop	{fp, pc}
   150cc:	mov	r1, sp
   150d0:	bl	150e8 <flatcc_builder_create_vtable@@Base+0x80>
   150d4:	cmp	r0, #0
   150d8:	bne	150c4 <flatcc_builder_create_vtable@@Base+0x5c>
   150dc:	mov	r0, #0
   150e0:	mov	sp, fp
   150e4:	pop	{fp, pc}
   150e8:	push	{r4, sl, fp, lr}
   150ec:	add	fp, sp, #8
   150f0:	sub	sp, sp, #8
   150f4:	ldr	r4, [r0, #140]	; 0x8c
   150f8:	ldr	r3, [r1]
   150fc:	add	r2, r3, r4
   15100:	str	r2, [r0, #140]	; 0x8c
   15104:	cmn	r3, #1
   15108:	ble	1515c <flatcc_builder_create_vtable@@Base+0xf4>
   1510c:	ldr	r2, [r1, #4]
   15110:	ldr	ip, [r0, #36]	; 0x24
   15114:	ldr	lr, [r0, #44]	; 0x2c
   15118:	str	r3, [sp]
   1511c:	add	r1, r1, #8
   15120:	mov	r0, ip
   15124:	mov	r3, r4
   15128:	blx	lr
   1512c:	cmp	r0, #0
   15130:	addeq	r0, r4, #1
   15134:	subeq	sp, fp, #8
   15138:	popeq	{r4, sl, fp, pc}
   1513c:	movw	r0, #49753	; 0xc259
   15140:	movt	r0, #1
   15144:	movw	r1, #45235	; 0xb0b3
   15148:	movt	r1, #1
   1514c:	movw	r3, #49620	; 0xc1d4
   15150:	movt	r3, #1
   15154:	movw	r2, #677	; 0x2a5
   15158:	bl	129c0 <__assert_fail@plt>
   1515c:	movw	r0, #49753	; 0xc259
   15160:	movt	r0, #1
   15164:	movw	r1, #45235	; 0xb0b3
   15168:	movt	r1, #1
   1516c:	movw	r3, #49620	; 0xc1d4
   15170:	movt	r3, #1
   15174:	movw	r2, #673	; 0x2a1
   15178:	bl	129c0 <__assert_fail@plt>

0001517c <flatcc_builder_create_cached_vtable@@Base>:
   1517c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15180:	add	fp, sp, #28
   15184:	sub	sp, sp, #20
   15188:	mov	r4, r2
   1518c:	mov	r9, r1
   15190:	mov	sl, r0
   15194:	mov	r1, r3
   15198:	bl	15374 <flatcc_builder_create_cached_vtable@@Base+0x1f8>
   1519c:	cmp	r0, #0
   151a0:	beq	152c4 <flatcc_builder_create_cached_vtable@@Base+0x148>
   151a4:	mov	r7, r0
   151a8:	ldr	r6, [r0]
   151ac:	mov	r5, #0
   151b0:	cmp	r6, #0
   151b4:	mov	r8, #0
   151b8:	beq	15250 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   151bc:	ldr	r5, [sl, #68]	; 0x44
   151c0:	str	sl, [sp, #16]
   151c4:	ldr	sl, [sl, #100]	; 0x64
   151c8:	mov	r0, #0
   151cc:	str	r7, [sp, #8]
   151d0:	str	r0, [sp, #12]
   151d4:	b	151e8 <flatcc_builder_create_cached_vtable@@Base+0x6c>
   151d8:	ldr	r6, [r8, #12]!
   151dc:	cmp	r6, #0
   151e0:	mov	r7, r8
   151e4:	beq	15240 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   151e8:	add	r8, sl, r6
   151ec:	ldr	r0, [r8, #8]
   151f0:	mov	r1, r5
   151f4:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   151f8:	cmp	r0, r4
   151fc:	bne	151d8 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15200:	mov	r0, r9
   15204:	mov	r2, r4
   15208:	bl	12960 <bcmp@plt>
   1520c:	cmp	r0, #0
   15210:	bne	151d8 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15214:	ldr	r0, [sp, #16]
   15218:	ldr	r0, [r0, #152]	; 0x98
   1521c:	ldr	r1, [r8, #4]
   15220:	cmp	r1, r0
   15224:	beq	1534c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   15228:	mov	r7, r8
   1522c:	ldr	r6, [r7, #12]!
   15230:	cmp	r6, #0
   15234:	mov	r0, r8
   15238:	bne	151d0 <flatcc_builder_create_cached_vtable@@Base+0x54>
   1523c:	b	15244 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15240:	ldr	r8, [sp, #12]
   15244:	ldr	sl, [sp, #16]
   15248:	mov	r5, #0
   1524c:	ldr	r7, [sp, #8]
   15250:	ldr	r2, [sl, #124]	; 0x7c
   15254:	str	r5, [sp]
   15258:	mov	r0, sl
   1525c:	mov	r1, #6
   15260:	mov	r3, #16
   15264:	bl	13c14 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   15268:	cmp	r0, #0
   1526c:	beq	15338 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15270:	mov	r6, r0
   15274:	ldr	r0, [sl, #124]	; 0x7c
   15278:	ldr	r1, [sl, #152]	; 0x98
   1527c:	add	r2, r0, #16
   15280:	str	r2, [sl, #124]	; 0x7c
   15284:	str	r1, [r6, #4]
   15288:	ldr	r1, [r7]
   1528c:	str	r1, [r6, #12]
   15290:	str	r0, [r7]
   15294:	mov	r0, sl
   15298:	mov	r1, r9
   1529c:	mov	r2, r4
   152a0:	bl	15068 <flatcc_builder_create_vtable@@Base>
   152a4:	str	r0, [r6]
   152a8:	cmp	r0, #0
   152ac:	beq	15338 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   152b0:	cmp	r8, #0
   152b4:	beq	152cc <flatcc_builder_create_cached_vtable@@Base+0x150>
   152b8:	ldr	r0, [r8, #8]
   152bc:	str	r0, [r6, #8]
   152c0:	b	15334 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   152c4:	mov	r5, #0
   152c8:	b	15338 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   152cc:	ldr	r0, [sl, #172]	; 0xac
   152d0:	cmp	r0, #0
   152d4:	beq	152f4 <flatcc_builder_create_cached_vtable@@Base+0x178>
   152d8:	ldr	r1, [sl, #120]	; 0x78
   152dc:	add	r1, r1, r4
   152e0:	cmp	r0, r1
   152e4:	bcs	152f4 <flatcc_builder_create_cached_vtable@@Base+0x178>
   152e8:	mov	r0, sl
   152ec:	bl	13900 <flatcc_builder_flush_vtable_cache@@Base>
   152f0:	b	15334 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   152f4:	ldr	r2, [sl, #120]	; 0x78
   152f8:	mov	r0, #0
   152fc:	str	r0, [sp]
   15300:	mov	r0, sl
   15304:	mov	r1, #2
   15308:	mov	r3, r4
   1530c:	bl	13c14 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   15310:	cmp	r0, #0
   15314:	beq	15344 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   15318:	ldr	r1, [sl, #120]	; 0x78
   1531c:	str	r1, [r6, #8]
   15320:	add	r1, r1, r4
   15324:	str	r1, [sl, #120]	; 0x78
   15328:	mov	r1, r9
   1532c:	mov	r2, r4
   15330:	bl	12900 <memcpy@plt>
   15334:	ldr	r5, [r6]
   15338:	mov	r0, r5
   1533c:	sub	sp, fp, #28
   15340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15344:	mvn	r5, #0
   15348:	b	15338 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1534c:	ldr	r1, [sp, #8]
   15350:	cmp	r7, r1
   15354:	beq	1536c <flatcc_builder_create_cached_vtable@@Base+0x1f0>
   15358:	ldr	r0, [r8, #12]
   1535c:	str	r0, [r7]
   15360:	ldr	r0, [r1]
   15364:	str	r0, [r8, #12]
   15368:	str	r6, [r1]
   1536c:	ldr	r5, [r8]
   15370:	b	15338 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15374:	push	{r4, r5, fp, lr}
   15378:	add	fp, sp, #8
   1537c:	mov	r4, r1
   15380:	mov	r5, r0
   15384:	ldr	r0, [r0, #116]	; 0x74
   15388:	cmp	r0, #0
   1538c:	bne	153a8 <flatcc_builder_create_cached_vtable@@Base+0x22c>
   15390:	mov	r0, r5
   15394:	bl	16ab4 <flatcc_builder_get_emit_context@@Base+0x80>
   15398:	mov	r1, r0
   1539c:	mov	r0, #0
   153a0:	cmp	r1, #0
   153a4:	popne	{r4, r5, fp, pc}
   153a8:	ldr	r0, [r5, #92]	; 0x5c
   153ac:	ldr	r1, [r5, #116]	; 0x74
   153b0:	rsb	r1, r1, #32
   153b4:	lsr	r1, r4, r1
   153b8:	add	r0, r0, r1, lsl #2
   153bc:	pop	{r4, r5, fp, pc}

000153c0 <flatcc_builder_create_table@@Base>:
   153c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153c4:	add	fp, sp, #28
   153c8:	sub	sp, sp, #84	; 0x54
   153cc:	strh	r3, [fp, #-30]	; 0xffffffe2
   153d0:	ldr	r4, [fp, #12]
   153d4:	cmn	r4, #1
   153d8:	ble	15500 <flatcc_builder_create_table@@Base+0x140>
   153dc:	ldr	r8, [fp, #16]
   153e0:	tst	r8, #1
   153e4:	beq	15520 <flatcc_builder_create_table@@Base+0x160>
   153e8:	mov	sl, r2
   153ec:	mov	r6, r1
   153f0:	mov	r5, r0
   153f4:	sub	r0, fp, #30
   153f8:	mov	r1, #4
   153fc:	bl	14d5c <flatcc_builder_start_vector@@Base+0x80>
   15400:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   15404:	mov	r0, r5
   15408:	mov	r1, r7
   1540c:	bl	141e8 <flatcc_builder_create_buffer@@Base+0x1cc>
   15410:	mov	r0, r5
   15414:	mov	r1, sl
   15418:	mov	r2, r7
   1541c:	bl	13f70 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15420:	mov	r9, r0
   15424:	add	r0, sl, r0
   15428:	str	r5, [sp]
   1542c:	ldr	r1, [r5, #136]	; 0x88
   15430:	sub	r0, r1, r0
   15434:	sub	r5, r0, #4
   15438:	sub	r0, r5, r8
   1543c:	add	r0, r0, #1
   15440:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15444:	str	r0, [fp, #-36]	; 0xffffffdc
   15448:	cmp	r4, #1
   1544c:	blt	1547c <flatcc_builder_create_table@@Base+0xbc>
   15450:	ldr	r7, [fp, #8]
   15454:	mvn	r0, #3
   15458:	sub	r5, r0, r5
   1545c:	ldrh	r8, [r7], #2
   15460:	ldr	r0, [r8, r6]
   15464:	add	r0, r5, r0
   15468:	sub	r0, r0, r8
   1546c:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15470:	str	r0, [r8, r6]
   15474:	subs	r4, r4, #1
   15478:	bne	1545c <flatcc_builder_create_table@@Base+0x9c>
   1547c:	mov	r1, #4
   15480:	str	r1, [sp, #16]
   15484:	sub	r0, fp, #36	; 0x24
   15488:	str	r0, [sp, #12]
   1548c:	str	r1, [sp, #4]
   15490:	mov	r0, #1
   15494:	str	r0, [sp, #8]
   15498:	cmp	sl, #0
   1549c:	strne	sl, [sp, #24]
   154a0:	strne	r6, [sp, #20]
   154a4:	movne	r0, #2
   154a8:	strne	r0, [sp, #8]
   154ac:	addne	r0, sl, #4
   154b0:	strne	r0, [sp, #4]
   154b4:	cmp	r9, #0
   154b8:	ldr	r0, [sp]
   154bc:	beq	154f0 <flatcc_builder_create_table@@Base+0x130>
   154c0:	ldr	r2, [sp, #4]
   154c4:	ldr	r1, [sp, #8]
   154c8:	add	r2, r2, r9
   154cc:	str	r2, [sp, #4]
   154d0:	add	r2, sp, #4
   154d4:	add	r3, r2, r1, lsl #3
   154d8:	movw	r2, #44705	; 0xaea1
   154dc:	movt	r2, #1
   154e0:	str	r2, [r3, #8]
   154e4:	str	r9, [r3, #12]
   154e8:	add	r1, r1, #1
   154ec:	str	r1, [sp, #8]
   154f0:	add	r1, sp, #4
   154f4:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x1e0>
   154f8:	sub	sp, fp, #28
   154fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15500:	movw	r0, #47119	; 0xb80f
   15504:	movt	r0, #1
   15508:	movw	r1, #45235	; 0xb0b3
   1550c:	movt	r1, #1
   15510:	movw	r3, #47137	; 0xb821
   15514:	movt	r3, #1
   15518:	movw	r2, #1237	; 0x4d5
   1551c:	bl	129c0 <__assert_fail@plt>
   15520:	movw	r0, #47293	; 0xb8bd
   15524:	movt	r0, #1
   15528:	movw	r1, #45235	; 0xb0b3
   1552c:	movt	r1, #1
   15530:	movw	r3, #47137	; 0xb821
   15534:	movt	r3, #1
   15538:	movw	r2, #1243	; 0x4db
   1553c:	bl	129c0 <__assert_fail@plt>

00015540 <flatcc_builder_check_required_field@@Base>:
   15540:	push	{fp, lr}
   15544:	mov	fp, sp
   15548:	ldr	r2, [r0, #32]
   1554c:	ldrh	r2, [r2, #14]
   15550:	cmp	r2, #3
   15554:	bne	15584 <flatcc_builder_check_required_field@@Base+0x44>
   15558:	ldrh	r3, [r0, #8]
   1555c:	mov	r2, #0
   15560:	cmp	r3, r1
   15564:	bls	1557c <flatcc_builder_check_required_field@@Base+0x3c>
   15568:	ldr	r0, [r0, #4]
   1556c:	add	r0, r0, r1, lsl #1
   15570:	ldrh	r2, [r0]
   15574:	cmp	r2, #0
   15578:	movwne	r2, #1
   1557c:	mov	r0, r2
   15580:	pop	{fp, pc}
   15584:	movw	r0, #47304	; 0xb8c8
   15588:	movt	r0, #1
   1558c:	movw	r1, #45235	; 0xb0b3
   15590:	movt	r1, #1
   15594:	movw	r3, #47347	; 0xb8f3
   15598:	movt	r3, #1
   1559c:	movw	r2, #1272	; 0x4f8
   155a0:	bl	129c0 <__assert_fail@plt>

000155a4 <flatcc_builder_check_union_field@@Base>:
   155a4:	push	{fp, lr}
   155a8:	mov	fp, sp
   155ac:	mov	r2, r0
   155b0:	ldr	r0, [r0, #32]
   155b4:	ldrh	r0, [r0, #14]
   155b8:	cmp	r0, #3
   155bc:	bne	1561c <flatcc_builder_check_union_field@@Base+0x78>
   155c0:	mov	r0, #0
   155c4:	cmp	r1, #0
   155c8:	beq	15608 <flatcc_builder_check_union_field@@Base+0x64>
   155cc:	ldrh	r3, [r2, #8]
   155d0:	cmp	r3, r1
   155d4:	popls	{fp, pc}
   155d8:	ldr	r0, [r2, #4]
   155dc:	add	r0, r0, r1, lsl #1
   155e0:	ldrh	r1, [r0, #-2]
   155e4:	cmp	r1, #0
   155e8:	beq	1560c <flatcc_builder_check_union_field@@Base+0x68>
   155ec:	ldr	r2, [r2, #16]
   155f0:	ldrb	r1, [r2, r1]
   155f4:	ldrh	r0, [r0]
   155f8:	cmp	r1, #0
   155fc:	beq	15610 <flatcc_builder_check_union_field@@Base+0x6c>
   15600:	cmp	r0, #0
   15604:	movwne	r0, #1
   15608:	pop	{fp, pc}
   1560c:	ldrh	r0, [r0]
   15610:	clz	r0, r0
   15614:	lsr	r0, r0, #5
   15618:	pop	{fp, pc}
   1561c:	movw	r0, #47304	; 0xb8c8
   15620:	movt	r0, #1
   15624:	movw	r1, #45235	; 0xb0b3
   15628:	movt	r1, #1
   1562c:	movw	r3, #47430	; 0xb946
   15630:	movt	r3, #1
   15634:	movw	r2, #1279	; 0x4ff
   15638:	bl	129c0 <__assert_fail@plt>

0001563c <flatcc_builder_check_required@@Base>:
   1563c:	push	{fp, lr}
   15640:	mov	fp, sp
   15644:	mov	r3, r0
   15648:	ldr	r0, [r0, #32]
   1564c:	ldrh	r0, [r0, #14]
   15650:	cmp	r0, #3
   15654:	bne	1569c <flatcc_builder_check_required@@Base+0x60>
   15658:	ldrh	ip, [r3, #8]
   1565c:	mov	r0, #0
   15660:	cmp	ip, r2
   15664:	poplt	{fp, pc}
   15668:	cmp	r2, #1
   1566c:	blt	15694 <flatcc_builder_check_required@@Base+0x58>
   15670:	ldr	ip, [r3, #4]
   15674:	ldrh	r3, [r1]
   15678:	add	r3, ip, r3, lsl #1
   1567c:	ldrh	r3, [r3]
   15680:	cmp	r3, #0
   15684:	beq	15698 <flatcc_builder_check_required@@Base+0x5c>
   15688:	add	r1, r1, #2
   1568c:	subs	r2, r2, #1
   15690:	bne	15674 <flatcc_builder_check_required@@Base+0x38>
   15694:	mov	r0, #1
   15698:	pop	{fp, pc}
   1569c:	movw	r0, #47304	; 0xb8c8
   156a0:	movt	r0, #1
   156a4:	movw	r1, #45235	; 0xb0b3
   156a8:	movt	r1, #1
   156ac:	movw	r3, #47510	; 0xb996
   156b0:	movt	r3, #1
   156b4:	movw	r2, #1297	; 0x511
   156b8:	bl	129c0 <__assert_fail@plt>

000156bc <flatcc_builder_end_table@@Base>:
   156bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156c0:	add	fp, sp, #24
   156c4:	sub	sp, sp, #16
   156c8:	mov	r4, r0
   156cc:	ldr	r0, [r0, #32]
   156d0:	ldrh	r0, [r0, #14]
   156d4:	cmp	r0, #3
   156d8:	bne	157e8 <flatcc_builder_end_table@@Base+0x12c>
   156dc:	ldrh	r0, [r4, #8]
   156e0:	mov	r1, #4
   156e4:	add	r0, r1, r0, lsl #1
   156e8:	ldr	r6, [r4, #4]
   156ec:	strh	r0, [r6, #-4]!
   156f0:	ldrh	r1, [r4, #20]
   156f4:	add	r1, r1, #4
   156f8:	strh	r1, [r6, #2]
   156fc:	uxth	r5, r0
   15700:	ldr	r0, [r4, #12]
   15704:	eor	r0, r0, r5
   15708:	movw	r2, #31153	; 0x79b1
   1570c:	movt	r2, #40503	; 0x9e37
   15710:	mul	r0, r0, r2
   15714:	uxth	r1, r1
   15718:	eor	r0, r0, r1
   1571c:	mul	r3, r0, r2
   15720:	str	r3, [r4, #12]
   15724:	mov	r0, r4
   15728:	mov	r1, r6
   1572c:	mov	r2, r5
   15730:	bl	1517c <flatcc_builder_create_cached_vtable@@Base>
   15734:	cmp	r0, #0
   15738:	beq	157d8 <flatcc_builder_end_table@@Base+0x11c>
   1573c:	mov	r7, r0
   15740:	mov	r8, #0
   15744:	mov	r0, r6
   15748:	mov	r1, #0
   1574c:	mov	r2, r5
   15750:	bl	12990 <memset@plt>
   15754:	ldrh	r3, [r4, #130]	; 0x82
   15758:	ldr	r0, [r4, #76]	; 0x4c
   1575c:	ldr	r6, [r4]
   15760:	ldr	r1, [r4, #16]
   15764:	ldr	r2, [r4, #20]
   15768:	ldr	r5, [r4, #32]
   1576c:	ldr	r5, [r5, #20]
   15770:	add	r0, r0, r5
   15774:	sub	r6, r6, r0
   15778:	asr	r6, r6, #1
   1577c:	stm	sp, {r0, r6, r7}
   15780:	mov	r0, r4
   15784:	bl	153c0 <flatcc_builder_create_table@@Base>
   15788:	cmp	r0, #0
   1578c:	beq	157dc <flatcc_builder_end_table@@Base+0x120>
   15790:	mov	r5, r0
   15794:	ldr	r0, [r4, #32]
   15798:	ldr	r1, [r4, #52]	; 0x34
   1579c:	ldr	r2, [r4, #76]	; 0x4c
   157a0:	ldr	r3, [r0, #24]
   157a4:	str	r3, [r4, #12]
   157a8:	ldrh	r3, [r0, #28]
   157ac:	strh	r3, [r4, #8]
   157b0:	ldr	r3, [r0, #16]
   157b4:	add	r1, r1, r3
   157b8:	str	r1, [r4, #4]
   157bc:	ldr	r0, [r0, #20]
   157c0:	add	r0, r2, r0
   157c4:	str	r0, [r4]
   157c8:	mov	r0, r4
   157cc:	bl	14540 <flatcc_builder_end_buffer@@Base+0xc8>
   157d0:	mov	r8, r5
   157d4:	b	157dc <flatcc_builder_end_table@@Base+0x120>
   157d8:	mov	r8, #0
   157dc:	mov	r0, r8
   157e0:	sub	sp, fp, #24
   157e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157e8:	movw	r0, #47304	; 0xb8c8
   157ec:	movt	r0, #1
   157f0:	movw	r1, #45235	; 0xb0b3
   157f4:	movt	r1, #1
   157f8:	movw	r3, #47600	; 0xb9f0
   157fc:	movt	r3, #1
   15800:	movw	r2, #1317	; 0x525
   15804:	bl	129c0 <__assert_fail@plt>

00015808 <flatcc_builder_create_vector@@Base>:
   15808:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1580c:	add	fp, sp, #24
   15810:	sub	sp, sp, #80	; 0x50
   15814:	mov	r4, r0
   15818:	ldr	r0, [fp, #8]
   1581c:	strh	r0, [fp, #-26]	; 0xffffffe6
   15820:	ldr	r0, [fp, #12]
   15824:	cmp	r2, r0
   15828:	bhi	158f4 <flatcc_builder_create_vector@@Base+0xec>
   1582c:	mov	r6, r3
   15830:	mov	r7, r2
   15834:	mov	r8, r1
   15838:	sub	r0, fp, #26
   1583c:	mov	r9, #4
   15840:	mov	r1, #4
   15844:	bl	14d5c <flatcc_builder_start_vector@@Base+0x80>
   15848:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   1584c:	mov	r0, r4
   15850:	mov	r1, r5
   15854:	bl	141e8 <flatcc_builder_create_buffer@@Base+0x1cc>
   15858:	mov	r0, r7
   1585c:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15860:	str	r7, [fp, #-32]	; 0xffffffe0
   15864:	mul	r6, r6, r7
   15868:	mov	r0, r4
   1586c:	mov	r1, r6
   15870:	mov	r2, r5
   15874:	bl	13f70 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15878:	str	r9, [sp, #12]
   1587c:	sub	r1, fp, #32
   15880:	str	r1, [sp, #8]
   15884:	str	r9, [sp]
   15888:	mov	r1, #1
   1588c:	str	r1, [sp, #4]
   15890:	cmp	r6, #0
   15894:	strne	r6, [sp, #20]
   15898:	strne	r8, [sp, #16]
   1589c:	movne	r1, #2
   158a0:	strne	r1, [sp, #4]
   158a4:	addne	r1, r6, #4
   158a8:	strne	r1, [sp]
   158ac:	cmp	r0, #0
   158b0:	beq	158e0 <flatcc_builder_create_vector@@Base+0xd8>
   158b4:	ldm	sp, {r1, r2}
   158b8:	add	r1, r1, r0
   158bc:	str	r1, [sp]
   158c0:	mov	r1, sp
   158c4:	add	r1, r1, r2, lsl #3
   158c8:	movw	r3, #44705	; 0xaea1
   158cc:	movt	r3, #1
   158d0:	str	r3, [r1, #8]
   158d4:	str	r0, [r1, #12]
   158d8:	add	r0, r2, #1
   158dc:	str	r0, [sp, #4]
   158e0:	mov	r1, sp
   158e4:	mov	r0, r4
   158e8:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x1e0>
   158ec:	sub	sp, fp, #24
   158f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   158f4:	movw	r0, #47666	; 0xba32
   158f8:	movt	r0, #1
   158fc:	movw	r1, #45235	; 0xb0b3
   15900:	movt	r1, #1
   15904:	movw	r3, #47685	; 0xba45
   15908:	movt	r3, #1
   1590c:	movw	r2, #1365	; 0x555
   15910:	bl	129c0 <__assert_fail@plt>

00015914 <flatcc_builder_end_vector@@Base>:
   15914:	push	{r4, r5, fp, lr}
   15918:	add	fp, sp, #8
   1591c:	sub	sp, sp, #8
   15920:	mov	r4, r0
   15924:	ldr	r0, [r0, #32]
   15928:	ldrh	r1, [r0, #14]
   1592c:	cmp	r1, #4
   15930:	bne	15974 <flatcc_builder_end_vector@@Base+0x60>
   15934:	ldr	r1, [r4, #16]
   15938:	ldrh	r5, [r4, #130]	; 0x82
   1593c:	ldr	r3, [r0, #16]
   15940:	ldr	r2, [r0, #20]
   15944:	ldr	r0, [r0, #24]
   15948:	str	r5, [sp]
   1594c:	str	r0, [sp, #4]
   15950:	mov	r0, r4
   15954:	bl	15808 <flatcc_builder_create_vector@@Base>
   15958:	mov	r5, r0
   1595c:	cmp	r0, #0
   15960:	movne	r0, r4
   15964:	blne	14540 <flatcc_builder_end_buffer@@Base+0xc8>
   15968:	mov	r0, r5
   1596c:	sub	sp, fp, #8
   15970:	pop	{r4, r5, fp, pc}
   15974:	movw	r0, #46038	; 0xb3d6
   15978:	movt	r0, #1
   1597c:	movw	r1, #45235	; 0xb0b3
   15980:	movt	r1, #1
   15984:	movw	r3, #47803	; 0xbabb
   15988:	movt	r3, #1
   1598c:	movw	r2, #1400	; 0x578
   15990:	bl	129c0 <__assert_fail@plt>

00015994 <flatcc_builder_vector_count@@Base>:
   15994:	ldr	r0, [r0, #32]
   15998:	ldr	r0, [r0, #20]
   1599c:	bx	lr

000159a0 <flatcc_builder_vector_edit@@Base>:
   159a0:	ldr	r0, [r0, #16]
   159a4:	bx	lr

000159a8 <flatcc_builder_create_offset_vector_direct@@Base>:
   159a8:	mov	r3, #0
   159ac:	b	159b0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   159b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   159b4:	add	fp, sp, #24
   159b8:	sub	sp, sp, #80	; 0x50
   159bc:	mov	r8, r0
   159c0:	mov	r0, #0
   159c4:	cmn	r2, #-1073741823	; 0xc0000001
   159c8:	bhi	15b18 <flatcc_builder_create_offset_vector_direct@@Base+0x170>
   159cc:	mov	r9, r3
   159d0:	mov	r6, r2
   159d4:	mov	r7, r1
   159d8:	mov	r5, #4
   159dc:	mov	r0, r8
   159e0:	mov	r1, #4
   159e4:	bl	141e8 <flatcc_builder_create_buffer@@Base+0x1cc>
   159e8:	mov	r0, r6
   159ec:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   159f0:	str	r6, [fp, #-28]	; 0xffffffe4
   159f4:	lsl	r4, r6, #2
   159f8:	mov	r0, r8
   159fc:	mov	r1, r4
   15a00:	mov	r2, #4
   15a04:	bl	13f70 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15a08:	str	r5, [sp, #16]
   15a0c:	sub	r1, fp, #28
   15a10:	str	r1, [sp, #12]
   15a14:	str	r5, [sp, #4]
   15a18:	mov	r1, #1
   15a1c:	str	r1, [sp, #8]
   15a20:	mov	r1, #0
   15a24:	cmp	r1, r6, lsl #2
   15a28:	strne	r4, [sp, #24]
   15a2c:	strne	r7, [sp, #20]
   15a30:	movne	r1, #2
   15a34:	strne	r1, [sp, #8]
   15a38:	addne	r1, r4, #4
   15a3c:	strne	r1, [sp, #4]
   15a40:	cmp	r0, #0
   15a44:	beq	15a74 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   15a48:	ldmib	sp, {r1, r2}
   15a4c:	add	r1, r1, r0
   15a50:	str	r1, [sp, #4]
   15a54:	add	r1, sp, #4
   15a58:	add	r1, r1, r2, lsl #3
   15a5c:	movw	r3, #44705	; 0xaea1
   15a60:	movt	r3, #1
   15a64:	str	r3, [r1, #8]
   15a68:	str	r0, [r1, #12]
   15a6c:	add	r0, r2, #1
   15a70:	str	r0, [sp, #8]
   15a74:	cmp	r6, #0
   15a78:	beq	15b0c <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15a7c:	ldr	r0, [r8, #136]	; 0x88
   15a80:	ldr	r1, [sp, #4]
   15a84:	sub	r0, r1, r0
   15a88:	sub	r4, r0, #4
   15a8c:	mov	r5, r9
   15a90:	b	15aa8 <flatcc_builder_create_offset_vector_direct@@Base+0x100>
   15a94:	sub	r4, r4, #4
   15a98:	add	r7, r7, #4
   15a9c:	add	r5, r5, #1
   15aa0:	subs	r6, r6, #1
   15aa4:	beq	15b0c <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15aa8:	ldr	r0, [r7]
   15aac:	cmp	r0, #0
   15ab0:	beq	15ad8 <flatcc_builder_create_offset_vector_direct@@Base+0x130>
   15ab4:	add	r0, r4, r0
   15ab8:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15abc:	str	r0, [r7]
   15ac0:	cmp	r9, #0
   15ac4:	beq	15a94 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   15ac8:	ldrb	r0, [r5]
   15acc:	cmp	r0, #0
   15ad0:	bne	15a94 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   15ad4:	b	15b20 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   15ad8:	cmp	r9, #0
   15adc:	beq	15b40 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   15ae0:	ldrb	r0, [r5]
   15ae4:	cmp	r0, #0
   15ae8:	beq	15a94 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   15aec:	movw	r0, #49886	; 0xc2de
   15af0:	movt	r0, #1
   15af4:	movw	r1, #45235	; 0xb0b3
   15af8:	movt	r1, #1
   15afc:	movw	r3, #49755	; 0xc25b
   15b00:	movt	r3, #1
   15b04:	movw	r2, #1461	; 0x5b5
   15b08:	bl	129c0 <__assert_fail@plt>
   15b0c:	add	r1, sp, #4
   15b10:	mov	r0, r8
   15b14:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15b18:	sub	sp, fp, #24
   15b1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b20:	movw	r0, #49741	; 0xc24d
   15b24:	movt	r0, #1
   15b28:	movw	r1, #45235	; 0xb0b3
   15b2c:	movt	r1, #1
   15b30:	movw	r3, #49755	; 0xc25b
   15b34:	movt	r3, #1
   15b38:	movw	r2, #1457	; 0x5b1
   15b3c:	bl	129c0 <__assert_fail@plt>
   15b40:	movw	r0, #49753	; 0xc259
   15b44:	movt	r0, #1
   15b48:	movw	r1, #45235	; 0xb0b3
   15b4c:	movt	r1, #1
   15b50:	movw	r3, #49755	; 0xc25b
   15b54:	movt	r3, #1
   15b58:	movw	r2, #1463	; 0x5b7
   15b5c:	bl	129c0 <__assert_fail@plt>

00015b60 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15b60:	push	{r4, r5, fp, lr}
   15b64:	add	fp, sp, #8
   15b68:	mov	r3, r1
   15b6c:	mov	r4, r0
   15b70:	ldr	r0, [r0, #32]
   15b74:	ldrh	r1, [r0, #14]
   15b78:	cmp	r1, #5
   15b7c:	bne	15ba8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   15b80:	ldr	r2, [r0, #20]
   15b84:	ldr	r1, [r4, #16]
   15b88:	mov	r0, r4
   15b8c:	bl	159b0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15b90:	mov	r5, r0
   15b94:	cmp	r0, #0
   15b98:	movne	r0, r4
   15b9c:	blne	14540 <flatcc_builder_end_buffer@@Base+0xc8>
   15ba0:	mov	r0, r5
   15ba4:	pop	{r4, r5, fp, pc}
   15ba8:	movw	r0, #46287	; 0xb4cf
   15bac:	movt	r0, #1
   15bb0:	movw	r1, #45235	; 0xb0b3
   15bb4:	movt	r1, #1
   15bb8:	movw	r3, #47944	; 0xbb48
   15bbc:	movt	r3, #1
   15bc0:	movw	r2, #1493	; 0x5d5
   15bc4:	bl	129c0 <__assert_fail@plt>

00015bc8 <flatcc_builder_offset_vector_edit@@Base>:
   15bc8:	ldr	r0, [r0, #16]
   15bcc:	bx	lr

00015bd0 <flatcc_builder_offset_vector_count@@Base>:
   15bd0:	ldr	r0, [r0, #32]
   15bd4:	ldr	r0, [r0, #20]
   15bd8:	bx	lr

00015bdc <flatcc_builder_table_add_union@@Base>:
   15bdc:	push	{r4, r5, r6, r7, fp, lr}
   15be0:	add	fp, sp, #16
   15be4:	mov	r5, r0
   15be8:	ldr	r0, [r0, #32]
   15bec:	ldrh	r0, [r0, #14]
   15bf0:	cmp	r0, #3
   15bf4:	bne	15c68 <flatcc_builder_table_add_union@@Base+0x8c>
   15bf8:	mov	r7, r3
   15bfc:	mov	r6, r1
   15c00:	uxtb	r4, r2
   15c04:	cmp	r3, #0
   15c08:	beq	15c14 <flatcc_builder_table_add_union@@Base+0x38>
   15c0c:	cmp	r4, #0
   15c10:	beq	15c88 <flatcc_builder_table_add_union@@Base+0xac>
   15c14:	cmp	r7, #0
   15c18:	beq	15c34 <flatcc_builder_table_add_union@@Base+0x58>
   15c1c:	mov	r0, r5
   15c20:	mov	r1, r6
   15c24:	bl	15ce8 <flatcc_builder_table_add_offset@@Base>
   15c28:	cmp	r0, #0
   15c2c:	beq	15cc8 <flatcc_builder_table_add_union@@Base+0xec>
   15c30:	str	r7, [r0]
   15c34:	sub	r1, r6, #1
   15c38:	mov	r0, r5
   15c3c:	mov	r2, #1
   15c40:	mov	r3, #1
   15c44:	bl	15dac <flatcc_builder_table_add@@Base>
   15c48:	cmp	r0, #0
   15c4c:	beq	15ca8 <flatcc_builder_table_add_union@@Base+0xcc>
   15c50:	mov	r5, r0
   15c54:	mov	r0, r4
   15c58:	bl	15e8c <flatcc_builder_table_add@@Base+0xe0>
   15c5c:	strb	r4, [r5]
   15c60:	mov	r0, #0
   15c64:	pop	{r4, r5, r6, r7, fp, pc}
   15c68:	movw	r0, #47304	; 0xb8c8
   15c6c:	movt	r0, #1
   15c70:	movw	r1, #45235	; 0xb0b3
   15c74:	movt	r1, #1
   15c78:	movw	r3, #48058	; 0xbbba
   15c7c:	movt	r3, #1
   15c80:	movw	r2, #1518	; 0x5ee
   15c84:	bl	129c0 <__assert_fail@plt>
   15c88:	movw	r0, #48146	; 0xbc12
   15c8c:	movt	r0, #1
   15c90:	movw	r1, #45235	; 0xb0b3
   15c94:	movt	r1, #1
   15c98:	movw	r3, #48058	; 0xbbba
   15c9c:	movt	r3, #1
   15ca0:	movw	r2, #1519	; 0x5ef
   15ca4:	bl	129c0 <__assert_fail@plt>
   15ca8:	movw	r0, #48190	; 0xbc3e
   15cac:	movt	r0, #1
   15cb0:	movw	r1, #45235	; 0xb0b3
   15cb4:	movt	r1, #1
   15cb8:	movw	r3, #48058	; 0xbbba
   15cbc:	movt	r3, #1
   15cc0:	movw	r2, #1526	; 0x5f6
   15cc4:	bl	129c0 <__assert_fail@plt>
   15cc8:	movw	r0, #48180	; 0xbc34
   15ccc:	movt	r0, #1
   15cd0:	movw	r1, #45235	; 0xb0b3
   15cd4:	movt	r1, #1
   15cd8:	movw	r3, #48058	; 0xbbba
   15cdc:	movt	r3, #1
   15ce0:	movw	r2, #1522	; 0x5f2
   15ce4:	bl	129c0 <__assert_fail@plt>

00015ce8 <flatcc_builder_table_add_offset@@Base>:
   15ce8:	push	{fp, lr}
   15cec:	mov	fp, sp
   15cf0:	ldr	r2, [r0, #32]
   15cf4:	ldrh	r2, [r2, #14]
   15cf8:	cmp	r2, #3
   15cfc:	bne	15d4c <flatcc_builder_table_add_offset@@Base+0x64>
   15d00:	movw	r2, #32765	; 0x7ffd
   15d04:	cmp	r1, r2
   15d08:	bcs	15d6c <flatcc_builder_table_add_offset@@Base+0x84>
   15d0c:	ldr	r2, [r0, #4]
   15d10:	add	r2, r2, r1, lsl #1
   15d14:	ldrh	r2, [r2]
   15d18:	cmp	r2, #0
   15d1c:	bne	15d8c <flatcc_builder_table_add_offset@@Base+0xa4>
   15d20:	ldr	r2, [r0, #12]
   15d24:	eor	r2, r2, r1
   15d28:	movw	r3, #31153	; 0x79b1
   15d2c:	movt	r3, #40503	; 0x9e37
   15d30:	mul	r2, r2, r3
   15d34:	eor	r2, r2, #4
   15d38:	mul	r2, r2, r3
   15d3c:	str	r2, [r0, #12]
   15d40:	uxth	r1, r1
   15d44:	pop	{fp, lr}
   15d48:	b	166b4 <flatcc_builder_table_add_copy@@Base+0x40>
   15d4c:	movw	r0, #47304	; 0xb8c8
   15d50:	movt	r0, #1
   15d54:	movw	r1, #45235	; 0xb0b3
   15d58:	movt	r1, #1
   15d5c:	movw	r3, #49084	; 0xbfbc
   15d60:	movt	r3, #1
   15d64:	movw	r2, #1811	; 0x713
   15d68:	bl	129c0 <__assert_fail@plt>
   15d6c:	movw	r0, #48956	; 0xbf3c
   15d70:	movt	r0, #1
   15d74:	movw	r1, #45235	; 0xb0b3
   15d78:	movt	r1, #1
   15d7c:	movw	r3, #49084	; 0xbfbc
   15d80:	movt	r3, #1
   15d84:	movw	r2, #1812	; 0x714
   15d88:	bl	129c0 <__assert_fail@plt>
   15d8c:	movw	r0, #49753	; 0xc259
   15d90:	movt	r0, #1
   15d94:	movw	r1, #45235	; 0xb0b3
   15d98:	movt	r1, #1
   15d9c:	movw	r3, #49084	; 0xbfbc
   15da0:	movt	r3, #1
   15da4:	movw	r2, #1819	; 0x71b
   15da8:	bl	129c0 <__assert_fail@plt>

00015dac <flatcc_builder_table_add@@Base>:
   15dac:	push	{fp, lr}
   15db0:	mov	fp, sp
   15db4:	mov	ip, r3
   15db8:	ldr	r3, [r0, #32]
   15dbc:	ldrh	r3, [r3, #14]
   15dc0:	cmp	r3, #3
   15dc4:	bne	15e2c <flatcc_builder_table_add@@Base+0x80>
   15dc8:	movw	r3, #32765	; 0x7ffd
   15dcc:	cmp	r1, r3
   15dd0:	bcs	15e4c <flatcc_builder_table_add@@Base+0xa0>
   15dd4:	mov	lr, r2
   15dd8:	ldrh	r3, [r0, #130]	; 0x82
   15ddc:	cmp	r3, ip
   15de0:	strhcc	ip, [r0, #130]	; 0x82
   15de4:	ldr	r3, [r0, #4]
   15de8:	add	r3, r3, r1, lsl #1
   15dec:	ldrh	r3, [r3]
   15df0:	cmp	r3, #0
   15df4:	bne	15e6c <flatcc_builder_table_add@@Base+0xc0>
   15df8:	ldr	r3, [r0, #12]
   15dfc:	eor	r3, r3, r1
   15e00:	movw	r2, #31153	; 0x79b1
   15e04:	movt	r2, #40503	; 0x9e37
   15e08:	mul	r3, r3, r2
   15e0c:	eor	r3, r3, lr
   15e10:	mul	r2, r3, r2
   15e14:	str	r2, [r0, #12]
   15e18:	uxth	r3, r1
   15e1c:	mov	r1, lr
   15e20:	mov	r2, ip
   15e24:	pop	{fp, lr}
   15e28:	b	165a8 <flatcc_builder_string_len@@Base+0xc>
   15e2c:	movw	r0, #47304	; 0xb8c8
   15e30:	movt	r0, #1
   15e34:	movw	r1, #45235	; 0xb0b3
   15e38:	movt	r1, #1
   15e3c:	movw	r3, #48882	; 0xbef2
   15e40:	movt	r3, #1
   15e44:	movw	r2, #1773	; 0x6ed
   15e48:	bl	129c0 <__assert_fail@plt>
   15e4c:	movw	r0, #48956	; 0xbf3c
   15e50:	movt	r0, #1
   15e54:	movw	r1, #45235	; 0xb0b3
   15e58:	movt	r1, #1
   15e5c:	movw	r3, #48882	; 0xbef2
   15e60:	movt	r3, #1
   15e64:	movw	r2, #1774	; 0x6ee
   15e68:	bl	129c0 <__assert_fail@plt>
   15e6c:	movw	r0, #49753	; 0xc259
   15e70:	movt	r0, #1
   15e74:	movw	r1, #45235	; 0xb0b3
   15e78:	movt	r1, #1
   15e7c:	movw	r3, #48882	; 0xbef2
   15e80:	movt	r3, #1
   15e84:	movw	r2, #1784	; 0x6f8
   15e88:	bl	129c0 <__assert_fail@plt>
   15e8c:	bx	lr

00015e90 <flatcc_builder_table_add_union_vector@@Base>:
   15e90:	push	{r4, r5, r6, r7, fp, lr}
   15e94:	add	fp, sp, #16
   15e98:	mov	r6, r0
   15e9c:	ldr	r0, [r0, #32]
   15ea0:	ldrh	r0, [r0, #14]
   15ea4:	cmp	r0, #3
   15ea8:	bne	15f14 <flatcc_builder_table_add_union_vector@@Base+0x84>
   15eac:	mov	r4, r3
   15eb0:	mov	r7, r2
   15eb4:	mov	r5, r1
   15eb8:	cmp	r2, #0
   15ebc:	mov	r0, r2
   15ec0:	movwne	r0, #1
   15ec4:	clz	r1, r3
   15ec8:	lsr	r1, r1, #5
   15ecc:	teq	r1, r0
   15ed0:	beq	15f34 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   15ed4:	cmp	r7, #0
   15ed8:	beq	15f0c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   15edc:	sub	r1, r5, #1
   15ee0:	mov	r0, r6
   15ee4:	bl	15ce8 <flatcc_builder_table_add_offset@@Base>
   15ee8:	cmp	r0, #0
   15eec:	beq	15f54 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   15ef0:	str	r7, [r0]
   15ef4:	mov	r0, r6
   15ef8:	mov	r1, r5
   15efc:	bl	15ce8 <flatcc_builder_table_add_offset@@Base>
   15f00:	cmp	r0, #0
   15f04:	beq	15f74 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   15f08:	str	r4, [r0]
   15f0c:	mov	r0, #0
   15f10:	pop	{r4, r5, r6, r7, fp, pc}
   15f14:	movw	r0, #47304	; 0xb8c8
   15f18:	movt	r0, #1
   15f1c:	movw	r1, #45235	; 0xb0b3
   15f20:	movt	r1, #1
   15f24:	movw	r3, #48202	; 0xbc4a
   15f28:	movt	r3, #1
   15f2c:	mov	r2, #1536	; 0x600
   15f30:	bl	129c0 <__assert_fail@plt>
   15f34:	movw	r0, #48301	; 0xbcad
   15f38:	movt	r0, #1
   15f3c:	movw	r1, #45235	; 0xb0b3
   15f40:	movt	r1, #1
   15f44:	movw	r3, #48202	; 0xbc4a
   15f48:	movt	r3, #1
   15f4c:	movw	r2, #1537	; 0x601
   15f50:	bl	129c0 <__assert_fail@plt>
   15f54:	movw	r0, #48180	; 0xbc34
   15f58:	movt	r0, #1
   15f5c:	movw	r1, #45235	; 0xb0b3
   15f60:	movt	r1, #1
   15f64:	movw	r3, #48202	; 0xbc4a
   15f68:	movt	r3, #1
   15f6c:	movw	r2, #1540	; 0x604
   15f70:	bl	129c0 <__assert_fail@plt>
   15f74:	movw	r0, #48180	; 0xbc34
   15f78:	movt	r0, #1
   15f7c:	movw	r1, #45235	; 0xb0b3
   15f80:	movt	r1, #1
   15f84:	movw	r3, #48202	; 0xbc4a
   15f88:	movt	r3, #1
   15f8c:	movw	r2, #1544	; 0x608
   15f90:	bl	129c0 <__assert_fail@plt>

00015f94 <flatcc_builder_create_union_vector@@Base>:
   15f94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f98:	add	fp, sp, #24
   15f9c:	sub	sp, sp, #16
   15fa0:	mov	r7, r3
   15fa4:	mov	r6, r2
   15fa8:	mov	r4, r1
   15fac:	mov	r5, r0
   15fb0:	mov	r0, #0
   15fb4:	str	r0, [r5]
   15fb8:	str	r0, [r5, #4]
   15fbc:	mov	r0, r1
   15fc0:	bl	14d6c <flatcc_builder_start_offset_vector@@Base>
   15fc4:	cmp	r0, #0
   15fc8:	beq	15fd4 <flatcc_builder_create_union_vector@@Base+0x40>
   15fcc:	sub	sp, fp, #24
   15fd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fd4:	mov	r0, r4
   15fd8:	mov	r1, r7
   15fdc:	bl	148b8 <flatcc_builder_extend_offset_vector@@Base>
   15fe0:	cmp	r0, #0
   15fe4:	beq	15fcc <flatcc_builder_create_union_vector@@Base+0x38>
   15fe8:	mov	r0, r4
   15fec:	mov	r1, r7
   15ff0:	bl	14630 <flatcc_builder_start_struct@@Base+0x84>
   15ff4:	cmp	r0, #0
   15ff8:	beq	15fcc <flatcc_builder_create_union_vector@@Base+0x38>
   15ffc:	mov	r8, r0
   16000:	mov	r0, r4
   16004:	bl	15bc8 <flatcc_builder_offset_vector_edit@@Base>
   16008:	mov	ip, r0
   1600c:	cmp	r7, #0
   16010:	beq	16040 <flatcc_builder_create_union_vector@@Base+0xac>
   16014:	add	r0, r6, #4
   16018:	mov	r1, r8
   1601c:	mov	r2, ip
   16020:	mov	r6, r7
   16024:	ldrb	r3, [r0, #-4]
   16028:	strb	r3, [r1], #1
   1602c:	ldr	r3, [r0]
   16030:	str	r3, [r2], #4
   16034:	add	r0, r0, #8
   16038:	subs	r6, r6, #1
   1603c:	bne	16024 <flatcc_builder_create_union_vector@@Base+0x90>
   16040:	str	r7, [sp]
   16044:	add	r0, sp, #8
   16048:	mov	r1, r4
   1604c:	mov	r2, r8
   16050:	mov	r3, ip
   16054:	bl	16074 <flatcc_builder_create_union_vector_direct@@Base>
   16058:	ldr	r0, [sp, #8]
   1605c:	ldr	r1, [sp, #12]
   16060:	stm	r5, {r0, r1}
   16064:	mov	r0, r4
   16068:	bl	14540 <flatcc_builder_end_buffer@@Base+0xc8>
   1606c:	sub	sp, fp, #24
   16070:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016074 <flatcc_builder_create_union_vector_direct@@Base>:
   16074:	push	{r4, r5, r6, r7, fp, lr}
   16078:	add	fp, sp, #16
   1607c:	sub	sp, sp, #8
   16080:	mov	r5, r2
   16084:	mov	r6, r1
   16088:	mov	r4, r0
   1608c:	mov	r0, #0
   16090:	str	r0, [r4]
   16094:	str	r0, [r4, #4]
   16098:	ldr	r7, [fp, #8]
   1609c:	mov	r0, r1
   160a0:	mov	r1, r3
   160a4:	mov	r2, r7
   160a8:	mov	r3, r5
   160ac:	bl	159b0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   160b0:	str	r0, [r4, #4]
   160b4:	cmp	r0, #0
   160b8:	beq	160e4 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   160bc:	mvn	r0, #0
   160c0:	mov	r1, #1
   160c4:	str	r1, [sp]
   160c8:	str	r0, [sp, #4]
   160cc:	mov	r0, r6
   160d0:	mov	r1, r5
   160d4:	mov	r2, r7
   160d8:	mov	r3, #1
   160dc:	bl	15808 <flatcc_builder_create_vector@@Base>
   160e0:	str	r0, [r4]
   160e4:	sub	sp, fp, #16
   160e8:	pop	{r4, r5, r6, r7, fp, pc}

000160ec <flatcc_builder_start_union_vector@@Base>:
   160ec:	push	{r4, r5, fp, lr}
   160f0:	add	fp, sp, #8
   160f4:	mov	r4, r0
   160f8:	mov	r1, #4
   160fc:	bl	14380 <flatcc_builder_start_buffer@@Base+0xbc>
   16100:	mvn	r5, #0
   16104:	cmp	r0, #0
   16108:	beq	16114 <flatcc_builder_start_union_vector@@Base+0x28>
   1610c:	mov	r0, r5
   16110:	pop	{r4, r5, fp, pc}
   16114:	ldr	r0, [r4, #32]
   16118:	mov	r1, #8
   1611c:	str	r1, [r0, #16]
   16120:	ldr	r0, [r4, #32]
   16124:	mov	r5, #0
   16128:	str	r5, [r0, #20]
   1612c:	ldr	r0, [r4, #32]
   16130:	mov	r1, #7
   16134:	strh	r1, [r0, #14]
   16138:	mov	r0, r4
   1613c:	mvn	r1, #3
   16140:	bl	145f8 <flatcc_builder_start_struct@@Base+0x4c>
   16144:	mov	r0, r5
   16148:	pop	{r4, r5, fp, pc}

0001614c <flatcc_builder_end_union_vector@@Base>:
   1614c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16150:	add	fp, sp, #24
   16154:	sub	sp, sp, #16
   16158:	mov	r9, r0
   1615c:	mov	r0, #0
   16160:	str	r0, [r9]
   16164:	str	r0, [r9, #4]
   16168:	ldr	r0, [r1, #32]
   1616c:	ldrh	r0, [r0, #14]
   16170:	cmp	r0, #7
   16174:	bne	16214 <flatcc_builder_end_union_vector@@Base+0xc8>
   16178:	mov	r4, r1
   1617c:	mov	r0, r1
   16180:	bl	16234 <flatcc_builder_union_vector_count@@Base>
   16184:	mov	r6, r0
   16188:	add	r1, r0, r0, lsl #2
   1618c:	mov	r0, r4
   16190:	bl	14630 <flatcc_builder_start_struct@@Base+0x84>
   16194:	cmp	r0, #0
   16198:	beq	1620c <flatcc_builder_end_union_vector@@Base+0xc0>
   1619c:	mov	r7, r0
   161a0:	add	r8, r0, r6, lsl #2
   161a4:	mov	r0, r4
   161a8:	bl	16240 <flatcc_builder_union_vector_edit@@Base>
   161ac:	cmp	r6, #0
   161b0:	beq	161e0 <flatcc_builder_end_union_vector@@Base+0x94>
   161b4:	add	r0, r0, #4
   161b8:	mov	r1, r8
   161bc:	mov	r2, r7
   161c0:	mov	r3, r6
   161c4:	ldrb	r5, [r0, #-4]
   161c8:	strb	r5, [r1], #1
   161cc:	ldr	r5, [r0]
   161d0:	str	r5, [r2], #4
   161d4:	add	r0, r0, #8
   161d8:	subs	r3, r3, #1
   161dc:	bne	161c4 <flatcc_builder_end_union_vector@@Base+0x78>
   161e0:	str	r6, [sp]
   161e4:	add	r0, sp, #8
   161e8:	mov	r1, r4
   161ec:	mov	r2, r8
   161f0:	mov	r3, r7
   161f4:	bl	16074 <flatcc_builder_create_union_vector_direct@@Base>
   161f8:	ldr	r0, [sp, #8]
   161fc:	ldr	r1, [sp, #12]
   16200:	stm	r9, {r0, r1}
   16204:	mov	r0, r4
   16208:	bl	14540 <flatcc_builder_end_buffer@@Base+0xc8>
   1620c:	sub	sp, fp, #24
   16210:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16214:	movw	r0, #48341	; 0xbcd5
   16218:	movt	r0, #1
   1621c:	movw	r1, #45235	; 0xb0b3
   16220:	movt	r1, #1
   16224:	movw	r3, #48391	; 0xbd07
   16228:	movt	r3, #1
   1622c:	movw	r2, #1617	; 0x651
   16230:	bl	129c0 <__assert_fail@plt>

00016234 <flatcc_builder_union_vector_count@@Base>:
   16234:	ldr	r0, [r0, #32]
   16238:	ldr	r0, [r0, #20]
   1623c:	bx	lr

00016240 <flatcc_builder_union_vector_edit@@Base>:
   16240:	ldr	r0, [r0, #16]
   16244:	bx	lr

00016248 <flatcc_builder_extend_union_vector@@Base>:
   16248:	push	{r4, r5, fp, lr}
   1624c:	add	fp, sp, #8
   16250:	mov	r5, r1
   16254:	mov	r4, r0
   16258:	mvn	r2, #-536870912	; 0xe0000000
   1625c:	bl	14734 <flatcc_builder_extend_vector@@Base+0x44>
   16260:	cmp	r0, #0
   16264:	movne	r0, #0
   16268:	popne	{r4, r5, fp, pc}
   1626c:	lsl	r1, r5, #3
   16270:	mov	r0, r4
   16274:	pop	{r4, r5, fp, lr}
   16278:	b	14630 <flatcc_builder_start_struct@@Base+0x84>

0001627c <flatcc_builder_truncate_union_vector@@Base>:
   1627c:	push	{fp, lr}
   16280:	mov	fp, sp
   16284:	ldr	r2, [r0, #32]
   16288:	ldrh	r3, [r2, #14]
   1628c:	cmp	r3, #7
   16290:	bne	162c0 <flatcc_builder_truncate_union_vector@@Base+0x44>
   16294:	ldr	r3, [r2, #20]
   16298:	cmp	r3, r1
   1629c:	bcc	162e0 <flatcc_builder_truncate_union_vector@@Base+0x64>
   162a0:	sub	r3, r3, r1
   162a4:	str	r3, [r2, #20]
   162a8:	ldr	r2, [r0, #32]
   162ac:	ldr	r2, [r2, #16]
   162b0:	mul	r1, r2, r1
   162b4:	bl	14bc0 <flatcc_builder_truncate_vector@@Base+0x84>
   162b8:	mov	r0, #0
   162bc:	pop	{fp, pc}
   162c0:	movw	r0, #48341	; 0xbcd5
   162c4:	movt	r0, #1
   162c8:	movw	r1, #45235	; 0xb0b3
   162cc:	movt	r1, #1
   162d0:	movw	r3, #48474	; 0xbd5a
   162d4:	movt	r3, #1
   162d8:	movw	r2, #1665	; 0x681
   162dc:	bl	129c0 <__assert_fail@plt>
   162e0:	movw	r0, #46905	; 0xb739
   162e4:	movt	r0, #1
   162e8:	movw	r1, #45235	; 0xb0b3
   162ec:	movt	r1, #1
   162f0:	movw	r3, #48474	; 0xbd5a
   162f4:	movt	r3, #1
   162f8:	movw	r2, #1666	; 0x682
   162fc:	bl	129c0 <__assert_fail@plt>

00016300 <flatcc_builder_union_vector_push@@Base>:
   16300:	push	{r4, r5, r6, sl, fp, lr}
   16304:	add	fp, sp, #16
   16308:	mov	r4, r2
   1630c:	mov	r5, r1
   16310:	ldr	r1, [r0, #32]
   16314:	ldrh	r2, [r1, #14]
   16318:	cmp	r2, #7
   1631c:	bne	16358 <flatcc_builder_union_vector_push@@Base+0x58>
   16320:	ldr	r2, [r1, #20]
   16324:	mov	r6, #0
   16328:	cmn	r2, #-536870911	; 0xe0000001
   1632c:	beq	16350 <flatcc_builder_union_vector_push@@Base+0x50>
   16330:	add	r2, r2, #1
   16334:	str	r2, [r1, #20]
   16338:	mov	r1, #8
   1633c:	bl	14630 <flatcc_builder_start_struct@@Base+0x84>
   16340:	cmp	r0, #0
   16344:	strne	r5, [r0]
   16348:	strne	r4, [r0, #4]
   1634c:	movne	r6, r0
   16350:	mov	r0, r6
   16354:	pop	{r4, r5, r6, sl, fp, pc}
   16358:	movw	r0, #48341	; 0xbcd5
   1635c:	movt	r0, #1
   16360:	movw	r1, #45235	; 0xb0b3
   16364:	movt	r1, #1
   16368:	movw	r3, #48543	; 0xbd9f
   1636c:	movt	r3, #1
   16370:	movw	r2, #1677	; 0x68d
   16374:	bl	129c0 <__assert_fail@plt>

00016378 <flatcc_builder_append_union_vector@@Base>:
   16378:	push	{r4, r5, r6, sl, fp, lr}
   1637c:	add	fp, sp, #16
   16380:	mov	r6, r0
   16384:	ldr	r0, [r0, #32]
   16388:	ldrh	r0, [r0, #14]
   1638c:	cmp	r0, #7
   16390:	bne	163d0 <flatcc_builder_append_union_vector@@Base+0x58>
   16394:	mov	r5, r2
   16398:	mov	r4, r1
   1639c:	mov	r0, r6
   163a0:	mov	r1, r2
   163a4:	mvn	r2, #-536870912	; 0xe0000000
   163a8:	bl	14734 <flatcc_builder_extend_vector@@Base+0x44>
   163ac:	cmp	r0, #0
   163b0:	beq	163bc <flatcc_builder_append_union_vector@@Base+0x44>
   163b4:	mov	r0, #0
   163b8:	pop	{r4, r5, r6, sl, fp, pc}
   163bc:	lsl	r2, r5, #3
   163c0:	mov	r0, r6
   163c4:	mov	r1, r4
   163c8:	pop	{r4, r5, r6, sl, fp, lr}
   163cc:	b	147fc <flatcc_builder_vector_push@@Base+0x80>
   163d0:	movw	r0, #48341	; 0xbcd5
   163d4:	movt	r0, #1
   163d8:	movw	r1, #45235	; 0xb0b3
   163dc:	movt	r1, #1
   163e0:	movw	r3, #48652	; 0xbe0c
   163e4:	movt	r3, #1
   163e8:	movw	r2, #1692	; 0x69c
   163ec:	bl	129c0 <__assert_fail@plt>

000163f0 <flatcc_builder_create_string@@Base>:
   163f0:	push	{r4, r5, r6, r7, fp, lr}
   163f4:	add	fp, sp, #16
   163f8:	sub	sp, sp, #80	; 0x50
   163fc:	mov	r5, r2
   16400:	mov	r6, r1
   16404:	mov	r4, r0
   16408:	mov	r0, r2
   1640c:	bl	13f84 <flatcc_builder_embed_buffer@@Base+0x1dc>
   16410:	str	r5, [fp, #-20]	; 0xffffffec
   16414:	add	r1, r5, #1
   16418:	mov	r7, #4
   1641c:	mov	r0, r4
   16420:	mov	r2, #4
   16424:	bl	13f70 <flatcc_builder_embed_buffer@@Base+0x1c8>
   16428:	str	r7, [sp, #16]
   1642c:	sub	r1, fp, #20
   16430:	str	r1, [sp, #12]
   16434:	str	r7, [sp, #4]
   16438:	mov	r1, #1
   1643c:	str	r1, [sp, #8]
   16440:	add	r0, r0, #1
   16444:	cmp	r5, #0
   16448:	strne	r5, [sp, #24]
   1644c:	strne	r6, [sp, #20]
   16450:	movne	r1, #2
   16454:	strne	r1, [sp, #8]
   16458:	addne	r1, r5, #4
   1645c:	strne	r1, [sp, #4]
   16460:	cmp	r0, #0
   16464:	beq	16494 <flatcc_builder_create_string@@Base+0xa4>
   16468:	ldmib	sp, {r1, r2}
   1646c:	add	r1, r1, r0
   16470:	str	r1, [sp, #4]
   16474:	add	r1, sp, #4
   16478:	add	r1, r1, r2, lsl #3
   1647c:	movw	r3, #44705	; 0xaea1
   16480:	movt	r3, #1
   16484:	str	r3, [r1, #8]
   16488:	str	r0, [r1, #12]
   1648c:	add	r0, r2, #1
   16490:	str	r0, [sp, #8]
   16494:	add	r1, sp, #4
   16498:	mov	r0, r4
   1649c:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x1e0>
   164a0:	sub	sp, fp, #16
   164a4:	pop	{r4, r5, r6, r7, fp, pc}

000164a8 <flatcc_builder_create_string_str@@Base>:
   164a8:	push	{r4, r5, fp, lr}
   164ac:	add	fp, sp, #8
   164b0:	mov	r4, r1
   164b4:	mov	r5, r0
   164b8:	mov	r0, r1
   164bc:	bl	1296c <strlen@plt>
   164c0:	mov	r2, r0
   164c4:	mov	r0, r5
   164c8:	mov	r1, r4
   164cc:	pop	{r4, r5, fp, lr}
   164d0:	b	163f0 <flatcc_builder_create_string@@Base>

000164d4 <flatcc_builder_create_string_strn@@Base>:
   164d4:	push	{r4, r5, fp, lr}
   164d8:	add	fp, sp, #8
   164dc:	mov	r4, r1
   164e0:	mov	r5, r0
   164e4:	mov	r0, r1
   164e8:	mov	r1, r2
   164ec:	bl	14b10 <flatcc_builder_append_string_strn@@Base+0x30>
   164f0:	mov	r2, r0
   164f4:	mov	r0, r5
   164f8:	mov	r1, r4
   164fc:	pop	{r4, r5, fp, lr}
   16500:	b	163f0 <flatcc_builder_create_string@@Base>

00016504 <flatcc_builder_end_string@@Base>:
   16504:	push	{r4, r5, fp, lr}
   16508:	add	fp, sp, #8
   1650c:	mov	r4, r0
   16510:	ldr	r0, [r0, #32]
   16514:	ldrh	r1, [r0, #14]
   16518:	cmp	r1, #6
   1651c:	bne	16554 <flatcc_builder_end_string@@Base+0x50>
   16520:	ldr	r2, [r4, #20]
   16524:	ldr	r0, [r0, #20]
   16528:	cmp	r0, r2
   1652c:	bne	16574 <flatcc_builder_end_string@@Base+0x70>
   16530:	ldr	r1, [r4, #16]
   16534:	mov	r0, r4
   16538:	bl	163f0 <flatcc_builder_create_string@@Base>
   1653c:	mov	r5, r0
   16540:	cmp	r0, #0
   16544:	movne	r0, r4
   16548:	blne	14540 <flatcc_builder_end_buffer@@Base+0xc8>
   1654c:	mov	r0, r5
   16550:	pop	{r4, r5, fp, pc}
   16554:	movw	r0, #46552	; 0xb5d8
   16558:	movt	r0, #1
   1655c:	movw	r1, #45235	; 0xb0b3
   16560:	movt	r1, #1
   16564:	movw	r3, #48779	; 0xbe8b
   16568:	movt	r3, #1
   1656c:	movw	r2, #1732	; 0x6c4
   16570:	bl	129c0 <__assert_fail@plt>
   16574:	movw	r0, #48846	; 0xbece
   16578:	movt	r0, #1
   1657c:	movw	r1, #45235	; 0xb0b3
   16580:	movt	r1, #1
   16584:	movw	r3, #48779	; 0xbe8b
   16588:	movt	r3, #1
   1658c:	movw	r2, #1733	; 0x6c5
   16590:	bl	129c0 <__assert_fail@plt>

00016594 <flatcc_builder_string_edit@@Base>:
   16594:	ldr	r0, [r0, #16]
   16598:	bx	lr

0001659c <flatcc_builder_string_len@@Base>:
   1659c:	ldr	r0, [r0, #32]
   165a0:	ldr	r0, [r0, #20]
   165a4:	bx	lr
   165a8:	push	{r4, r5, r6, sl, fp, lr}
   165ac:	add	fp, sp, #16
   165b0:	mov	r5, r3
   165b4:	mov	r4, r0
   165b8:	ldr	r0, [r0, #20]
   165bc:	ldr	r3, [r4, #24]
   165c0:	add	r0, r2, r0
   165c4:	sub	r0, r0, #1
   165c8:	rsb	r2, r2, #0
   165cc:	and	r6, r0, r2
   165d0:	add	r0, r6, r1
   165d4:	str	r0, [r4, #20]
   165d8:	cmp	r0, r3
   165dc:	bcc	16600 <flatcc_builder_string_len@@Base+0x64>
   165e0:	add	r1, r0, #1
   165e4:	mov	r0, r4
   165e8:	movw	r2, #65532	; 0xfffc
   165ec:	bl	16a4c <flatcc_builder_get_emit_context@@Base+0x18>
   165f0:	mov	r1, r0
   165f4:	mov	r0, #0
   165f8:	cmp	r1, #0
   165fc:	popne	{r4, r5, r6, sl, fp, pc}
   16600:	ldr	r0, [r4, #4]
   16604:	add	r0, r0, r5, lsl #1
   16608:	add	r1, r6, #4
   1660c:	strh	r1, [r0]
   16610:	ldrh	r0, [r4, #8]
   16614:	cmp	r0, r5
   16618:	addls	r0, r5, #1
   1661c:	strhls	r0, [r4, #8]
   16620:	ldr	r0, [r4, #16]
   16624:	add	r0, r0, r6
   16628:	pop	{r4, r5, r6, sl, fp, pc}

0001662c <flatcc_builder_table_edit@@Base>:
   1662c:	push	{fp, lr}
   16630:	mov	fp, sp
   16634:	ldr	r2, [r0, #32]
   16638:	ldrh	r2, [r2, #14]
   1663c:	cmp	r2, #3
   16640:	ldreq	r2, [r0, #16]
   16644:	ldreq	r0, [r0, #20]
   16648:	addeq	r0, r2, r0
   1664c:	subeq	r0, r0, r1
   16650:	popeq	{fp, pc}
   16654:	movw	r0, #47304	; 0xb8c8
   16658:	movt	r0, #1
   1665c:	movw	r1, #45235	; 0xb0b3
   16660:	movt	r1, #1
   16664:	movw	r3, #49024	; 0xbf80
   16668:	movt	r3, #1
   1666c:	movw	r2, #1794	; 0x702
   16670:	bl	129c0 <__assert_fail@plt>

00016674 <flatcc_builder_table_add_copy@@Base>:
   16674:	push	{r4, r5, r6, sl, fp, lr}
   16678:	add	fp, sp, #16
   1667c:	mov	r4, r3
   16680:	mov	r5, r2
   16684:	ldr	r3, [fp, #8]
   16688:	mov	r2, r4
   1668c:	bl	15dac <flatcc_builder_table_add@@Base>
   16690:	mov	r6, r0
   16694:	cmp	r0, #0
   16698:	beq	166ac <flatcc_builder_table_add_copy@@Base+0x38>
   1669c:	mov	r0, r6
   166a0:	mov	r1, r5
   166a4:	mov	r2, r4
   166a8:	bl	12900 <memcpy@plt>
   166ac:	mov	r0, r6
   166b0:	pop	{r4, r5, r6, sl, fp, pc}
   166b4:	push	{r4, r5, r6, r7, fp, lr}
   166b8:	add	fp, sp, #16
   166bc:	mov	r5, r1
   166c0:	mov	r4, r0
   166c4:	ldr	r0, [r0, #20]
   166c8:	ldr	r1, [r4, #24]
   166cc:	add	r0, r0, #3
   166d0:	bic	r7, r0, #3
   166d4:	add	r6, r7, #4
   166d8:	str	r6, [r4, #20]
   166dc:	cmp	r6, r1
   166e0:	bls	16704 <flatcc_builder_table_add_copy@@Base+0x90>
   166e4:	mov	r0, r4
   166e8:	mov	r1, r6
   166ec:	movw	r2, #65532	; 0xfffc
   166f0:	bl	16a4c <flatcc_builder_get_emit_context@@Base+0x18>
   166f4:	mov	r1, r0
   166f8:	mov	r0, #0
   166fc:	cmp	r1, #0
   16700:	popne	{r4, r5, r6, r7, fp, pc}
   16704:	ldr	r0, [r4, #4]
   16708:	add	r0, r0, r5, lsl #1
   1670c:	strh	r6, [r0]
   16710:	ldrh	r0, [r4, #8]
   16714:	cmp	r0, r5
   16718:	addls	r0, r5, #1
   1671c:	strhls	r0, [r4, #8]
   16720:	ldr	r0, [r4]
   16724:	add	r1, r0, #2
   16728:	str	r1, [r4]
   1672c:	strh	r7, [r0]
   16730:	ldr	r0, [r4, #16]
   16734:	add	r0, r0, r7
   16738:	pop	{r4, r5, r6, r7, fp, pc}

0001673c <flatcc_builder_push_buffer_alignment@@Base>:
   1673c:	ldrh	r1, [r0, #128]	; 0x80
   16740:	mov	r2, #4
   16744:	strh	r2, [r0, #128]	; 0x80
   16748:	mov	r0, r1
   1674c:	bx	lr

00016750 <flatcc_builder_pop_buffer_alignment@@Base>:
   16750:	b	141e8 <flatcc_builder_create_buffer@@Base+0x1cc>

00016754 <flatcc_builder_get_buffer_alignment@@Base>:
   16754:	ldrh	r0, [r0, #128]	; 0x80
   16758:	bx	lr

0001675c <flatcc_builder_set_vtable_clustering@@Base>:
   1675c:	clz	r1, r1
   16760:	lsr	r1, r1, #5
   16764:	str	r1, [r0, #180]	; 0xb4
   16768:	bx	lr

0001676c <flatcc_builder_set_block_align@@Base>:
   1676c:	strh	r1, [r0, #132]	; 0x84
   16770:	bx	lr

00016774 <flatcc_builder_get_level@@Base>:
   16774:	ldr	r0, [r0, #156]	; 0x9c
   16778:	bx	lr

0001677c <flatcc_builder_set_max_level@@Base>:
   1677c:	str	r1, [r0, #176]	; 0xb0
   16780:	ldr	r2, [r0, #160]	; 0xa0
   16784:	cmp	r2, r1
   16788:	strlt	r1, [r0, #160]	; 0xa0
   1678c:	bx	lr

00016790 <flatcc_builder_get_buffer_size@@Base>:
   16790:	ldr	r1, [r0, #136]	; 0x88
   16794:	ldr	r0, [r0, #140]	; 0x8c
   16798:	sub	r0, r0, r1
   1679c:	bx	lr

000167a0 <flatcc_builder_get_buffer_start@@Base>:
   167a0:	ldr	r0, [r0, #136]	; 0x88
   167a4:	bx	lr

000167a8 <flatcc_builder_get_buffer_end@@Base>:
   167a8:	ldr	r0, [r0, #140]	; 0x8c
   167ac:	bx	lr

000167b0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   167b0:	str	r1, [r0, #172]	; 0xac
   167b4:	bx	lr

000167b8 <flatcc_builder_set_identifier@@Base>:
   167b8:	movw	r2, #44705	; 0xaea1
   167bc:	movt	r2, #1
   167c0:	cmp	r1, #0
   167c4:	movne	r2, r1
   167c8:	ldr	r1, [r2]
   167cc:	str	r1, [r0, #168]	; 0xa8
   167d0:	bx	lr

000167d4 <flatcc_builder_get_type@@Base>:
   167d4:	ldr	r0, [r0, #32]
   167d8:	cmp	r0, #0
   167dc:	ldrhne	r0, [r0, #14]
   167e0:	moveq	r0, #0
   167e4:	bx	lr

000167e8 <flatcc_builder_get_type_at@@Base>:
   167e8:	mov	r2, r0
   167ec:	mov	r0, #0
   167f0:	cmp	r1, #1
   167f4:	blt	16818 <flatcc_builder_get_type_at@@Base+0x30>
   167f8:	ldr	r3, [r2, #156]	; 0x9c
   167fc:	cmp	r3, r1
   16800:	bxlt	lr
   16804:	sub	r0, r1, r3
   16808:	add	r0, r0, r0, lsl #3
   1680c:	ldr	r1, [r2, #32]
   16810:	add	r0, r1, r0, lsl #2
   16814:	ldrh	r0, [r0, #14]
   16818:	bx	lr

0001681c <flatcc_builder_get_direct_buffer@@Base>:
   1681c:	ldr	r2, [r0, #184]	; 0xb8
   16820:	cmp	r2, #0
   16824:	beq	16830 <flatcc_builder_get_direct_buffer@@Base+0x14>
   16828:	add	r0, r0, #188	; 0xbc
   1682c:	b	16844 <flatcc_builder_get_direct_buffer@@Base+0x28>
   16830:	cmp	r1, #0
   16834:	movne	r0, #0
   16838:	strne	r0, [r1]
   1683c:	mov	r0, #0
   16840:	bx	lr
   16844:	ldm	r0, {r2, r3}
   16848:	cmp	r2, r3
   1684c:	beq	16860 <flatcc_builder_get_direct_buffer@@Base+0x44>
   16850:	mov	r0, #0
   16854:	cmp	r1, #0
   16858:	strne	r0, [r1]
   1685c:	bx	lr
   16860:	cmp	r1, #0
   16864:	ldrne	r2, [r0, #24]
   16868:	strne	r2, [r1]
   1686c:	ldr	r0, [r0, #8]
   16870:	bx	lr

00016874 <flatcc_builder_copy_buffer@@Base>:
   16874:	push	{fp, lr}
   16878:	mov	fp, sp
   1687c:	ldr	r3, [r0, #184]	; 0xb8
   16880:	cmp	r3, #0
   16884:	beq	168b8 <flatcc_builder_copy_buffer@@Base+0x44>
   16888:	add	r0, r0, #188	; 0xbc
   1688c:	bl	16f84 <flatcc_emitter_copy_buffer@@Base>
   16890:	cmp	r0, #0
   16894:	popne	{fp, pc}
   16898:	movw	r0, #45831	; 0xb307
   1689c:	movt	r0, #1
   168a0:	movw	r1, #45235	; 0xb0b3
   168a4:	movt	r1, #1
   168a8:	movw	r3, #49163	; 0xc00b
   168ac:	movt	r3, #1
   168b0:	movw	r2, #1926	; 0x786
   168b4:	bl	129c0 <__assert_fail@plt>
   168b8:	mov	r0, #0
   168bc:	pop	{fp, pc}

000168c0 <flatcc_builder_finalize_buffer@@Base>:
   168c0:	push	{r4, r5, r6, sl, fp, lr}
   168c4:	add	fp, sp, #16
   168c8:	mov	r6, r1
   168cc:	mov	r4, r0
   168d0:	bl	16790 <flatcc_builder_get_buffer_size@@Base>
   168d4:	mov	r5, r0
   168d8:	cmp	r6, #0
   168dc:	strne	r5, [r6]
   168e0:	mov	r0, r5
   168e4:	bl	1293c <malloc@plt>
   168e8:	cmp	r0, #0
   168ec:	beq	16930 <flatcc_builder_finalize_buffer@@Base+0x70>
   168f0:	mov	r6, r0
   168f4:	mov	r0, r4
   168f8:	mov	r1, r6
   168fc:	mov	r2, r5
   16900:	bl	16874 <flatcc_builder_copy_buffer@@Base>
   16904:	cmp	r0, #0
   16908:	movne	r0, r6
   1690c:	popne	{r4, r5, r6, sl, fp, pc}
   16910:	movw	r0, #49753	; 0xc259
   16914:	movt	r0, #1
   16918:	movw	r1, #45235	; 0xb0b3
   1691c:	movt	r1, #1
   16920:	movw	r3, #49232	; 0xc050
   16924:	movt	r3, #1
   16928:	movw	r2, #1948	; 0x79c
   1692c:	bl	129c0 <__assert_fail@plt>
   16930:	movw	r0, #49753	; 0xc259
   16934:	movt	r0, #1
   16938:	movw	r1, #45235	; 0xb0b3
   1693c:	movt	r1, #1
   16940:	movw	r3, #49232	; 0xc050
   16944:	movt	r3, #1
   16948:	movw	r2, #1944	; 0x798
   1694c:	bl	129c0 <__assert_fail@plt>

00016950 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16950:	push	{r4, r5, r6, r7, fp, lr}
   16954:	add	fp, sp, #16
   16958:	mov	r4, r1
   1695c:	mov	r5, r0
   16960:	bl	16790 <flatcc_builder_get_buffer_size@@Base>
   16964:	mov	r6, r0
   16968:	cmp	r4, #0
   1696c:	strne	r6, [r4]
   16970:	mov	r0, r5
   16974:	bl	16754 <flatcc_builder_get_buffer_alignment@@Base>
   16978:	add	r1, r6, r0
   1697c:	sub	r1, r1, #1
   16980:	rsb	r2, r0, #0
   16984:	and	r7, r1, r2
   16988:	mov	r1, r7
   1698c:	bl	169d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   16990:	cmp	r0, #0
   16994:	beq	169c4 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   16998:	mov	r6, r0
   1699c:	mov	r0, r5
   169a0:	mov	r1, r6
   169a4:	mov	r2, r7
   169a8:	bl	16874 <flatcc_builder_copy_buffer@@Base>
   169ac:	cmp	r0, #0
   169b0:	beq	169bc <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   169b4:	mov	r0, r6
   169b8:	pop	{r4, r5, r6, r7, fp, pc}
   169bc:	mov	r0, r6
   169c0:	bl	128f4 <free@plt>
   169c4:	mov	r6, #0
   169c8:	cmp	r4, #0
   169cc:	strne	r6, [r4]
   169d0:	mov	r0, r6
   169d4:	pop	{r4, r5, r6, r7, fp, pc}
   169d8:	push	{fp, lr}
   169dc:	mov	fp, sp
   169e0:	sub	sp, sp, #8
   169e4:	mov	r2, r1
   169e8:	mov	r1, r0
   169ec:	mov	r0, #0
   169f0:	str	r0, [sp, #4]
   169f4:	cmp	r1, #4
   169f8:	movls	r1, #4
   169fc:	add	r0, sp, #4
   16a00:	bl	12984 <posix_memalign@plt>
   16a04:	cmp	r0, #0
   16a08:	ldrne	r0, [sp, #4]
   16a0c:	cmpne	r0, #0
   16a10:	beq	16a20 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   16a14:	bl	128f4 <free@plt>
   16a18:	mov	r0, #0
   16a1c:	str	r0, [sp, #4]
   16a20:	ldr	r0, [sp, #4]
   16a24:	mov	sp, fp
   16a28:	pop	{fp, pc}

00016a2c <flatcc_builder_aligned_alloc@@Base>:
   16a2c:	b	169d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00016a30 <flatcc_builder_aligned_free@@Base>:
   16a30:	b	128f4 <free@plt>

00016a34 <flatcc_builder_get_emit_context@@Base>:
   16a34:	ldr	r0, [r0, #36]	; 0x24
   16a38:	bx	lr
   16a3c:	ldr	r0, [r0, #140]	; 0x8c
   16a40:	sub	r1, r1, #1
   16a44:	and	r0, r0, r1
   16a48:	bx	lr
   16a4c:	push	{r4, r5, r6, sl, fp, lr}
   16a50:	add	fp, sp, #16
   16a54:	sub	sp, sp, #8
   16a58:	mov	r6, r2
   16a5c:	mov	r5, r0
   16a60:	ldr	r2, [r0, #28]
   16a64:	ldr	r0, [r0, #40]	; 0x28
   16a68:	ldr	r4, [r5, #48]	; 0x30
   16a6c:	mov	r3, #1
   16a70:	str	r3, [sp]
   16a74:	add	r2, r2, r1
   16a78:	add	r1, r5, #60	; 0x3c
   16a7c:	mov	r3, #1
   16a80:	blx	r4
   16a84:	mov	r1, r0
   16a88:	mvn	r0, #0
   16a8c:	cmp	r1, #0
   16a90:	beq	16a9c <flatcc_builder_get_emit_context@@Base+0x68>
   16a94:	sub	sp, fp, #16
   16a98:	pop	{r4, r5, r6, sl, fp, pc}
   16a9c:	mov	r0, r5
   16aa0:	mov	r1, r6
   16aa4:	bl	145f8 <flatcc_builder_start_struct@@Base+0x4c>
   16aa8:	mov	r0, #0
   16aac:	sub	sp, fp, #16
   16ab0:	pop	{r4, r5, r6, sl, fp, pc}
   16ab4:	push	{r4, r5, r6, sl, fp, lr}
   16ab8:	add	fp, sp, #16
   16abc:	sub	sp, sp, #8
   16ac0:	mov	r4, r0
   16ac4:	ldr	r0, [r0, #124]	; 0x7c
   16ac8:	cmp	r0, #0
   16acc:	bne	16b6c <flatcc_builder_get_emit_context@@Base+0x138>
   16ad0:	mov	r0, #0
   16ad4:	str	r0, [sp]
   16ad8:	mov	r6, #16
   16adc:	mov	r0, r4
   16ae0:	mov	r1, #6
   16ae4:	mov	r2, #0
   16ae8:	mov	r3, #16
   16aec:	bl	13c14 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   16af0:	mvn	r5, #0
   16af4:	cmp	r0, #0
   16af8:	beq	16b60 <flatcc_builder_get_emit_context@@Base+0x12c>
   16afc:	add	r1, r4, #92	; 0x5c
   16b00:	str	r6, [r4, #124]	; 0x7c
   16b04:	ldr	r0, [r4, #40]	; 0x28
   16b08:	ldr	ip, [r4, #48]	; 0x30
   16b0c:	mov	r2, #5
   16b10:	str	r2, [sp]
   16b14:	mov	r6, #256	; 0x100
   16b18:	mov	r2, #256	; 0x100
   16b1c:	mov	r3, #1
   16b20:	blx	ip
   16b24:	cmp	r0, #0
   16b28:	bne	16b60 <flatcc_builder_get_emit_context@@Base+0x12c>
   16b2c:	ldr	r0, [r4, #96]	; 0x60
   16b30:	mov	r1, r6
   16b34:	lsl	r6, r6, #1
   16b38:	cmp	r0, r1, lsl #1
   16b3c:	bcs	16b30 <flatcc_builder_get_emit_context@@Base+0xfc>
   16b40:	lsr	r1, r1, #2
   16b44:	mvn	r0, #0
   16b48:	mov	r2, #1
   16b4c:	add	r0, r0, #1
   16b50:	cmp	r1, r2, lsl r0
   16b54:	bhi	16b4c <flatcc_builder_get_emit_context@@Base+0x118>
   16b58:	str	r0, [r4, #116]	; 0x74
   16b5c:	mov	r5, #0
   16b60:	mov	r0, r5
   16b64:	sub	sp, fp, #16
   16b68:	pop	{r4, r5, r6, sl, fp, pc}
   16b6c:	movw	r0, #49693	; 0xc21d
   16b70:	movt	r0, #1
   16b74:	movw	r1, #45235	; 0xb0b3
   16b78:	movt	r1, #1
   16b7c:	movw	r3, #49708	; 0xc22c
   16b80:	movt	r3, #1
   16b84:	movw	r2, #342	; 0x156
   16b88:	bl	129c0 <__assert_fail@plt>

00016b8c <flatcc_emitter_recycle_page@@Base>:
   16b8c:	ldr	ip, [r0]
   16b90:	mvn	r2, #0
   16b94:	cmp	ip, r1
   16b98:	beq	16be0 <flatcc_emitter_recycle_page@@Base+0x54>
   16b9c:	ldr	r3, [r0, #4]
   16ba0:	cmp	r3, r1
   16ba4:	beq	16be0 <flatcc_emitter_recycle_page@@Base+0x54>
   16ba8:	ldr	r2, [r1, #2944]	; 0xb80
   16bac:	ldr	r3, [r1, #2948]	; 0xb84
   16bb0:	str	r3, [r2, #2948]	; 0xb84
   16bb4:	ldr	r2, [r1, #2944]	; 0xb80
   16bb8:	ldr	r3, [r1, #2948]	; 0xb84
   16bbc:	str	r2, [r3, #2944]	; 0xb80
   16bc0:	ldr	r2, [ip, #2948]	; 0xb84
   16bc4:	str	r2, [r1, #2948]	; 0xb84
   16bc8:	ldr	r0, [r0]
   16bcc:	str	r0, [r1, #2944]	; 0xb80
   16bd0:	str	r1, [r2, #2944]	; 0xb80
   16bd4:	ldr	r0, [r1, #2944]	; 0xb80
   16bd8:	str	r1, [r0, #2948]	; 0xb84
   16bdc:	mov	r2, #0
   16be0:	mov	r0, r2
   16be4:	bx	lr

00016be8 <flatcc_emitter_reset@@Base>:
   16be8:	push	{r4, sl, fp, lr}
   16bec:	add	fp, sp, #8
   16bf0:	mov	r4, r0
   16bf4:	ldr	r0, [r0]
   16bf8:	cmp	r0, #0
   16bfc:	beq	16ca4 <flatcc_emitter_reset@@Base+0xbc>
   16c00:	mov	r1, #1472	; 0x5c0
   16c04:	add	r2, r0, #1472	; 0x5c0
   16c08:	stmib	r4, {r0, r2}
   16c0c:	str	r1, [r4, #12]
   16c10:	str	r2, [r4, #16]
   16c14:	str	r1, [r4, #20]
   16c18:	movw	r1, #64064	; 0xfa40
   16c1c:	movt	r1, #65535	; 0xffff
   16c20:	str	r1, [r0, #2952]	; 0xb88
   16c24:	ldr	r0, [r4, #32]
   16c28:	cmp	r0, #0
   16c2c:	bne	16c38 <flatcc_emitter_reset@@Base+0x50>
   16c30:	ldr	r0, [r4, #24]
   16c34:	str	r0, [r4, #32]
   16c38:	add	r2, r4, #24
   16c3c:	ldm	r2, {r0, r1, r2}
   16c40:	mov	r3, #0
   16c44:	str	r3, [r4, #24]
   16c48:	add	r2, r2, r2, lsl #1
   16c4c:	lsr	r2, r2, #2
   16c50:	add	r0, r2, r0, lsr #2
   16c54:	str	r0, [r4, #32]
   16c58:	cmp	r1, r0, lsl #1
   16c5c:	popls	{r4, sl, fp, pc}
   16c60:	ldr	r2, [r4]
   16c64:	ldr	r1, [r4, #4]
   16c68:	ldr	r0, [r1, #2944]	; 0xb80
   16c6c:	cmp	r0, r2
   16c70:	beq	16ca4 <flatcc_emitter_reset@@Base+0xbc>
   16c74:	ldr	r2, [r0, #2944]	; 0xb80
   16c78:	str	r2, [r1, #2944]	; 0xb80
   16c7c:	ldr	r1, [r0, #2944]	; 0xb80
   16c80:	ldr	r2, [r4, #4]
   16c84:	str	r2, [r1, #2948]	; 0xb84
   16c88:	bl	128f4 <free@plt>
   16c8c:	ldr	r0, [r4, #28]
   16c90:	ldr	r1, [r4, #32]
   16c94:	sub	r0, r0, #2944	; 0xb80
   16c98:	str	r0, [r4, #28]
   16c9c:	cmp	r0, r1, lsl #1
   16ca0:	bhi	16c60 <flatcc_emitter_reset@@Base+0x78>
   16ca4:	pop	{r4, sl, fp, pc}

00016ca8 <flatcc_emitter_clear@@Base>:
   16ca8:	push	{r4, r5, r6, sl, fp, lr}
   16cac:	add	fp, sp, #16
   16cb0:	ldr	r5, [r0]
   16cb4:	cmp	r5, #0
   16cb8:	beq	16d08 <flatcc_emitter_clear@@Base+0x60>
   16cbc:	mov	r4, r0
   16cc0:	ldr	r0, [r5, #2948]	; 0xb84
   16cc4:	mov	r6, #0
   16cc8:	str	r6, [r0, #2944]	; 0xb80
   16ccc:	ldr	r0, [r5, #2944]	; 0xb80
   16cd0:	cmp	r0, #0
   16cd4:	beq	16ce8 <flatcc_emitter_clear@@Base+0x40>
   16cd8:	mov	r5, r0
   16cdc:	ldr	r0, [r0, #2948]	; 0xb84
   16ce0:	bl	128f4 <free@plt>
   16ce4:	b	16ccc <flatcc_emitter_clear@@Base+0x24>
   16ce8:	mov	r0, r5
   16cec:	bl	128f4 <free@plt>
   16cf0:	vmov.i32	q8, #0	; 0x00000000
   16cf4:	add	r0, r4, #16
   16cf8:	vst1.32	{d16-d17}, [r0]
   16cfc:	mov	r0, #32
   16d00:	vst1.32	{d16-d17}, [r4], r0
   16d04:	str	r6, [r4]
   16d08:	pop	{r4, r5, r6, sl, fp, pc}

00016d0c <flatcc_emitter@@Base>:
   16d0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d10:	add	fp, sp, #24
   16d14:	mov	r4, r2
   16d18:	mov	r5, r1
   16d1c:	mov	r6, r0
   16d20:	ldr	r1, [r0, #24]
   16d24:	ldr	r0, [fp, #8]
   16d28:	add	r1, r1, r0
   16d2c:	str	r1, [r6, #24]
   16d30:	mov	r1, r6
   16d34:	cmn	r3, #1
   16d38:	ble	16d78 <flatcc_emitter@@Base+0x6c>
   16d3c:	ldr	r2, [r1, #20]!
   16d40:	cmp	r2, r0
   16d44:	bcs	16dc0 <flatcc_emitter@@Base+0xb4>
   16d48:	mov	r8, #0
   16d4c:	cmp	r4, #0
   16d50:	beq	16e10 <flatcc_emitter@@Base+0x104>
   16d54:	ldm	r5, {r1, r2}
   16d58:	mov	r0, r6
   16d5c:	bl	16ed4 <flatcc_emitter@@Base+0x1c8>
   16d60:	cmp	r0, #0
   16d64:	bne	16db4 <flatcc_emitter@@Base+0xa8>
   16d68:	subs	r4, r4, #1
   16d6c:	add	r5, r5, #8
   16d70:	bne	16d54 <flatcc_emitter@@Base+0x48>
   16d74:	b	16e10 <flatcc_emitter@@Base+0x104>
   16d78:	ldr	r2, [r1, #12]!
   16d7c:	cmp	r2, r0
   16d80:	bcs	16dd0 <flatcc_emitter@@Base+0xc4>
   16d84:	add	r0, r5, r4, lsl #3
   16d88:	sub	r5, r0, #4
   16d8c:	rsb	r4, r4, #1
   16d90:	cmp	r4, #1
   16d94:	beq	16e18 <flatcc_emitter@@Base+0x10c>
   16d98:	ldmda	r5, {r1, r2}
   16d9c:	mov	r0, r6
   16da0:	bl	16e24 <flatcc_emitter@@Base+0x118>
   16da4:	sub	r5, r5, #8
   16da8:	add	r4, r4, #1
   16dac:	cmp	r0, #0
   16db0:	beq	16d90 <flatcc_emitter@@Base+0x84>
   16db4:	mvn	r8, #0
   16db8:	mov	r0, r8
   16dbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16dc0:	ldr	r7, [r6, #16]
   16dc4:	add	r3, r7, r0
   16dc8:	str	r3, [r6, #16]
   16dcc:	b	16ddc <flatcc_emitter@@Base+0xd0>
   16dd0:	ldr	r3, [r6, #8]
   16dd4:	sub	r7, r3, r0
   16dd8:	str	r7, [r6, #8]
   16ddc:	sub	r0, r2, r0
   16de0:	str	r0, [r1]
   16de4:	mov	r8, #0
   16de8:	cmp	r4, #0
   16dec:	beq	16e10 <flatcc_emitter@@Base+0x104>
   16df0:	ldm	r5, {r1, r2}
   16df4:	mov	r0, r7
   16df8:	bl	12900 <memcpy@plt>
   16dfc:	ldr	r0, [r5, #4]
   16e00:	add	r7, r7, r0
   16e04:	add	r5, r5, #8
   16e08:	subs	r4, r4, #1
   16e0c:	bne	16df0 <flatcc_emitter@@Base+0xe4>
   16e10:	mov	r0, r8
   16e14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e18:	mov	r8, #0
   16e1c:	mov	r0, r8
   16e20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e24:	push	{r4, r5, r6, r7, fp, lr}
   16e28:	add	fp, sp, #16
   16e2c:	cmp	r2, #0
   16e30:	beq	16ec0 <flatcc_emitter@@Base+0x1b4>
   16e34:	mov	r4, r2
   16e38:	mov	r5, r0
   16e3c:	clz	r0, r2
   16e40:	lsr	r7, r0, #5
   16e44:	add	r6, r1, r2
   16e48:	ldr	r0, [r5, #12]
   16e4c:	cmp	r4, r0
   16e50:	bls	16e80 <flatcc_emitter@@Base+0x174>
   16e54:	cmp	r0, #0
   16e58:	bne	16e88 <flatcc_emitter@@Base+0x17c>
   16e5c:	mov	r0, r5
   16e60:	bl	17040 <flatcc_emitter_copy_buffer@@Base+0xbc>
   16e64:	cmp	r0, #0
   16e68:	mov	r1, r0
   16e6c:	movwne	r1, #1
   16e70:	orr	r1, r1, r7
   16e74:	tst	r1, #1
   16e78:	beq	16e48 <flatcc_emitter@@Base+0x13c>
   16e7c:	b	16ec8 <flatcc_emitter@@Base+0x1bc>
   16e80:	mov	r7, r4
   16e84:	b	16e8c <flatcc_emitter@@Base+0x180>
   16e88:	mov	r7, r0
   16e8c:	sub	r0, r0, r7
   16e90:	str	r0, [r5, #12]
   16e94:	ldr	r0, [r5, #8]
   16e98:	sub	r0, r0, r7
   16e9c:	str	r0, [r5, #8]
   16ea0:	sub	r6, r6, r7
   16ea4:	mov	r1, r6
   16ea8:	mov	r2, r7
   16eac:	bl	12900 <memcpy@plt>
   16eb0:	subs	r4, r4, r7
   16eb4:	clz	r0, r4
   16eb8:	lsr	r7, r0, #5
   16ebc:	bne	16e48 <flatcc_emitter@@Base+0x13c>
   16ec0:	mov	r0, #0
   16ec4:	pop	{r4, r5, r6, r7, fp, pc}
   16ec8:	cmp	r0, #0
   16ecc:	mvnne	r0, #0
   16ed0:	pop	{r4, r5, r6, r7, fp, pc}
   16ed4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ed8:	add	fp, sp, #24
   16edc:	cmp	r2, #0
   16ee0:	beq	16f70 <flatcc_emitter@@Base+0x264>
   16ee4:	mov	r4, r2
   16ee8:	mov	r8, r1
   16eec:	mov	r6, r0
   16ef0:	clz	r0, r2
   16ef4:	lsr	r5, r0, #5
   16ef8:	ldr	r7, [r6, #20]
   16efc:	cmp	r4, r7
   16f00:	bls	16f30 <flatcc_emitter@@Base+0x224>
   16f04:	cmp	r7, #0
   16f08:	bne	16f34 <flatcc_emitter@@Base+0x228>
   16f0c:	mov	r0, r6
   16f10:	bl	17130 <flatcc_emitter_copy_buffer@@Base+0x1ac>
   16f14:	cmp	r0, #0
   16f18:	mov	r1, r0
   16f1c:	movwne	r1, #1
   16f20:	orr	r1, r1, r5
   16f24:	tst	r1, #1
   16f28:	beq	16ef8 <flatcc_emitter@@Base+0x1ec>
   16f2c:	b	16f78 <flatcc_emitter@@Base+0x26c>
   16f30:	mov	r7, r4
   16f34:	ldr	r0, [r6, #16]
   16f38:	mov	r1, r8
   16f3c:	mov	r2, r7
   16f40:	bl	12900 <memcpy@plt>
   16f44:	ldr	r0, [r6, #16]
   16f48:	ldr	r1, [r6, #20]
   16f4c:	add	r0, r0, r7
   16f50:	sub	r1, r1, r7
   16f54:	str	r0, [r6, #16]
   16f58:	str	r1, [r6, #20]
   16f5c:	add	r8, r8, r7
   16f60:	subs	r4, r4, r7
   16f64:	clz	r0, r4
   16f68:	lsr	r5, r0, #5
   16f6c:	bne	16ef8 <flatcc_emitter@@Base+0x1ec>
   16f70:	mov	r0, #0
   16f74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16f78:	cmp	r0, #0
   16f7c:	mvnne	r0, #0
   16f80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016f84 <flatcc_emitter_copy_buffer@@Base>:
   16f84:	push	{r4, r5, r6, sl, fp, lr}
   16f88:	add	fp, sp, #16
   16f8c:	mov	r3, r2
   16f90:	ldr	r2, [r0, #24]
   16f94:	mov	r5, #0
   16f98:	cmp	r2, r3
   16f9c:	bhi	17024 <flatcc_emitter_copy_buffer@@Base+0xa0>
   16fa0:	mov	r4, r0
   16fa4:	ldr	r0, [r0]
   16fa8:	cmp	r0, #0
   16fac:	beq	17024 <flatcc_emitter_copy_buffer@@Base+0xa0>
   16fb0:	mov	r6, r1
   16fb4:	ldr	r1, [r4, #4]
   16fb8:	cmp	r0, r1
   16fbc:	beq	1702c <flatcc_emitter_copy_buffer@@Base+0xa8>
   16fc0:	ldr	r1, [r4, #8]
   16fc4:	ldr	r0, [r4, #12]
   16fc8:	rsb	r5, r0, #2944	; 0xb80
   16fcc:	mov	r0, r6
   16fd0:	mov	r2, r5
   16fd4:	bl	12900 <memcpy@plt>
   16fd8:	add	r5, r6, r5
   16fdc:	ldm	r4, {r0, r1}
   16fe0:	ldr	r6, [r0, #2944]	; 0xb80
   16fe4:	cmp	r6, r1
   16fe8:	beq	17010 <flatcc_emitter_copy_buffer@@Base+0x8c>
   16fec:	mov	r0, r5
   16ff0:	mov	r1, r6
   16ff4:	mov	r2, #2944	; 0xb80
   16ff8:	bl	12900 <memcpy@plt>
   16ffc:	add	r5, r5, #2944	; 0xb80
   17000:	ldr	r6, [r6, #2944]	; 0xb80
   17004:	ldr	r0, [r4, #4]
   17008:	cmp	r6, r0
   1700c:	bne	16fec <flatcc_emitter_copy_buffer@@Base+0x68>
   17010:	ldr	r0, [r4, #20]
   17014:	rsb	r2, r0, #2944	; 0xb80
   17018:	mov	r0, r5
   1701c:	mov	r1, r6
   17020:	bl	12900 <memcpy@plt>
   17024:	mov	r0, r5
   17028:	pop	{r4, r5, r6, sl, fp, pc}
   1702c:	ldr	r1, [r4, #8]
   17030:	mov	r0, r6
   17034:	bl	12900 <memcpy@plt>
   17038:	mov	r0, r6
   1703c:	pop	{r4, r5, r6, sl, fp, pc}
   17040:	push	{r4, r5, fp, lr}
   17044:	add	fp, sp, #8
   17048:	mov	r4, r0
   1704c:	ldr	r5, [r0]
   17050:	cmp	r5, #0
   17054:	beq	1707c <flatcc_emitter_copy_buffer@@Base+0xf8>
   17058:	ldr	r0, [r5, #2948]	; 0xb84
   1705c:	ldr	r1, [r4, #4]
   17060:	cmp	r0, r1
   17064:	beq	1707c <flatcc_emitter_copy_buffer@@Base+0xf8>
   17068:	ldr	r1, [r5, #2952]	; 0xb88
   1706c:	sub	r1, r1, #2944	; 0xb80
   17070:	str	r1, [r0, #2952]	; 0xb88
   17074:	ldr	r0, [r5, #2948]	; 0xb84
   17078:	b	170b8 <flatcc_emitter_copy_buffer@@Base+0x134>
   1707c:	movw	r0, #2956	; 0xb8c
   17080:	bl	1293c <malloc@plt>
   17084:	cmp	r0, #0
   17088:	beq	170e8 <flatcc_emitter_copy_buffer@@Base+0x164>
   1708c:	ldr	r1, [r4, #28]
   17090:	add	r1, r1, #2944	; 0xb80
   17094:	str	r1, [r4, #28]
   17098:	cmp	r5, #0
   1709c:	beq	170f0 <flatcc_emitter_copy_buffer@@Base+0x16c>
   170a0:	ldm	r4, {r1, r2}
   170a4:	str	r1, [r0, #2944]	; 0xb80
   170a8:	str	r2, [r0, #2948]	; 0xb84
   170ac:	str	r0, [r1, #2948]	; 0xb84
   170b0:	ldr	r1, [r4, #4]
   170b4:	str	r0, [r1, #2944]	; 0xb80
   170b8:	str	r0, [r4]
   170bc:	mov	r0, #2944	; 0xb80
   170c0:	ldr	r1, [r4]
   170c4:	add	r2, r1, #2944	; 0xb80
   170c8:	str	r2, [r4, #8]
   170cc:	str	r0, [r4, #12]
   170d0:	ldr	r0, [r1, #2944]	; 0xb80
   170d4:	ldr	r0, [r0, #2952]	; 0xb88
   170d8:	sub	r0, r0, #2944	; 0xb80
   170dc:	str	r0, [r1, #2952]	; 0xb88
   170e0:	mov	r0, #0
   170e4:	pop	{r4, r5, fp, pc}
   170e8:	mvn	r0, #0
   170ec:	pop	{r4, r5, fp, pc}
   170f0:	str	r0, [r4, #4]
   170f4:	str	r0, [r4]
   170f8:	mov	r1, #1472	; 0x5c0
   170fc:	str	r1, [r4, #20]
   17100:	str	r1, [r4, #12]
   17104:	ldr	r1, [r4]
   17108:	add	r1, r1, #1472	; 0x5c0
   1710c:	str	r1, [r4, #16]
   17110:	str	r1, [r4, #8]
   17114:	movw	r1, #64064	; 0xfa40
   17118:	movt	r1, #65535	; 0xffff
   1711c:	str	r0, [r0, #2944]	; 0xb80
   17120:	str	r0, [r0, #2948]	; 0xb84
   17124:	str	r1, [r0, #2952]	; 0xb88
   17128:	mov	r0, #0
   1712c:	pop	{r4, r5, fp, pc}
   17130:	push	{r4, r5, fp, lr}
   17134:	add	fp, sp, #8
   17138:	mov	r4, r0
   1713c:	ldr	r5, [r0, #4]
   17140:	cmp	r5, #0
   17144:	beq	17158 <flatcc_emitter_copy_buffer@@Base+0x1d4>
   17148:	ldr	r0, [r5, #2944]	; 0xb80
   1714c:	ldr	r1, [r4]
   17150:	cmp	r0, r1
   17154:	bne	17190 <flatcc_emitter_copy_buffer@@Base+0x20c>
   17158:	movw	r0, #2956	; 0xb8c
   1715c:	bl	1293c <malloc@plt>
   17160:	cmp	r0, #0
   17164:	beq	171bc <flatcc_emitter_copy_buffer@@Base+0x238>
   17168:	ldr	r1, [r4, #28]
   1716c:	add	r1, r1, #2944	; 0xb80
   17170:	str	r1, [r4, #28]
   17174:	cmp	r5, #0
   17178:	beq	171c4 <flatcc_emitter_copy_buffer@@Base+0x240>
   1717c:	ldr	r1, [r4]
   17180:	str	r1, [r0, #2944]	; 0xb80
   17184:	str	r5, [r0, #2948]	; 0xb84
   17188:	str	r0, [r1, #2948]	; 0xb84
   1718c:	str	r0, [r5, #2944]	; 0xb80
   17190:	str	r0, [r4, #4]
   17194:	mov	r0, #2944	; 0xb80
   17198:	ldr	r1, [r4, #4]
   1719c:	str	r1, [r4, #16]
   171a0:	str	r0, [r4, #20]
   171a4:	ldr	r0, [r1, #2948]	; 0xb84
   171a8:	ldr	r0, [r0, #2952]	; 0xb88
   171ac:	add	r0, r0, #2944	; 0xb80
   171b0:	str	r0, [r1, #2952]	; 0xb88
   171b4:	mov	r0, #0
   171b8:	pop	{r4, r5, fp, pc}
   171bc:	mvn	r0, #0
   171c0:	pop	{r4, r5, fp, pc}
   171c4:	str	r0, [r4, #4]
   171c8:	str	r0, [r4]
   171cc:	mov	r1, #1472	; 0x5c0
   171d0:	str	r1, [r4, #20]
   171d4:	str	r1, [r4, #12]
   171d8:	ldr	r1, [r4]
   171dc:	add	r1, r1, #1472	; 0x5c0
   171e0:	str	r1, [r4, #16]
   171e4:	str	r1, [r4, #8]
   171e8:	movw	r1, #64064	; 0xfa40
   171ec:	movt	r1, #65535	; 0xffff
   171f0:	str	r0, [r0, #2944]	; 0xb80
   171f4:	str	r0, [r0, #2948]	; 0xb84
   171f8:	str	r1, [r0, #2952]	; 0xb88
   171fc:	mov	r0, #0
   17200:	pop	{r4, r5, fp, pc}
   17204:	andeq	r0, r0, r0

00017208 <grisu3_diy_fp_encode_double@@Base>:
   17208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1720c:	add	fp, sp, #28
   17210:	sub	sp, sp, #68	; 0x44
   17214:	mov	r9, r3
   17218:	mov	r7, r2
   1721c:	mov	r2, r0
   17220:	mov	r6, #0
   17224:	str	r6, [sp]
   17228:	str	r6, [sp, #4]
   1722c:	add	r0, sp, #48	; 0x30
   17230:	mov	r3, r1
   17234:	bl	17480 <grisu3_diy_fp_encode_double@@Base+0x278>
   17238:	ldr	r0, [fp, #8]
   1723c:	cmp	r0, #0
   17240:	movwne	r0, #1
   17244:	lsl	r0, r0, #2
   17248:	ldr	r1, [sp, #48]	; 0x30
   1724c:	str	r1, [sp, #28]
   17250:	ldr	sl, [sp, #52]	; 0x34
   17254:	ldr	r5, [sp, #56]	; 0x38
   17258:	ldr	r8, [sp, #60]	; 0x3c
   1725c:	rsb	r1, r5, #0
   17260:	lsl	r4, r0, r1
   17264:	str	r9, [sp, #24]
   17268:	sub	r7, r7, r9
   1726c:	add	r1, sp, #48	; 0x30
   17270:	mov	r0, r7
   17274:	bl	17524 <grisu3_diy_fp_encode_double@@Base+0x31c>
   17278:	cmp	r7, r0
   1727c:	bne	17288 <grisu3_diy_fp_encode_double@@Base+0x80>
   17280:	ldr	r2, [sp, #28]
   17284:	b	172f4 <grisu3_diy_fp_encode_double@@Base+0xec>
   17288:	mvn	r0, r0
   1728c:	add	r7, r7, r0
   17290:	cmp	r7, #7
   17294:	bcs	17460 <grisu3_diy_fp_encode_double@@Base+0x258>
   17298:	stm	sp, {r5, r8}
   1729c:	movw	r0, #49904	; 0xc2f0
   172a0:	movt	r0, #1
   172a4:	ldr	r1, [r0, r7, lsl #4]!
   172a8:	str	r1, [sp, #8]
   172ac:	ldmib	r0, {r1, r2}
   172b0:	ldr	r0, [r0, #12]
   172b4:	str	r0, [sp, #20]
   172b8:	str	r2, [sp, #16]
   172bc:	str	r1, [sp, #12]
   172c0:	add	r0, sp, #32
   172c4:	ldr	r2, [sp, #28]
   172c8:	mov	r3, sl
   172cc:	bl	1760c <grisu3_diy_fp_encode_double@@Base+0x404>
   172d0:	ldr	r0, [sp, #24]
   172d4:	add	r0, r0, r7
   172d8:	add	r0, r0, #1
   172dc:	cmp	r0, #19
   172e0:	addgt	r4, r4, #4
   172e4:	ldr	r2, [sp, #32]
   172e8:	ldr	sl, [sp, #36]	; 0x24
   172ec:	ldr	r5, [sp, #40]	; 0x28
   172f0:	ldr	r8, [sp, #44]	; 0x2c
   172f4:	add	r7, sp, #48	; 0x30
   172f8:	ldm	r7, {r0, r1, r7}
   172fc:	ldr	r3, [sp, #60]	; 0x3c
   17300:	stm	sp, {r5, r8}
   17304:	add	ip, sp, #8
   17308:	stm	ip, {r0, r1, r7}
   1730c:	str	r3, [sp, #20]
   17310:	add	r0, sp, #32
   17314:	mov	r3, sl
   17318:	bl	1760c <grisu3_diy_fp_encode_double@@Base+0x404>
   1731c:	add	r5, sp, #32
   17320:	ldm	r5, {r2, r3, r5}
   17324:	ldr	r0, [sp, #44]	; 0x2c
   17328:	str	r5, [sp]
   1732c:	str	r0, [sp, #4]
   17330:	add	r0, sp, #32
   17334:	bl	17480 <grisu3_diy_fp_encode_double@@Base+0x278>
   17338:	mov	r0, #9
   1733c:	cmp	r4, #0
   17340:	movweq	r0, #8
   17344:	add	r0, r0, r4
   17348:	ldr	r3, [sp, #32]
   1734c:	ldr	r1, [sp, #36]	; 0x24
   17350:	ldr	r2, [sp, #40]	; 0x28
   17354:	sub	r7, r5, r2
   17358:	lsl	r9, r0, r7
   1735c:	add	r7, r2, #64	; 0x40
   17360:	movw	r0, #64462	; 0xfbce
   17364:	movt	r0, #65535	; 0xffff
   17368:	add	r5, r0, #63	; 0x3f
   1736c:	cmp	r7, r5
   17370:	bgt	173c0 <grisu3_diy_fp_encode_double@@Base+0x1b8>
   17374:	mov	r6, #64	; 0x40
   17378:	mvn	r5, #1072	; 0x430
   1737c:	cmp	r7, r5
   17380:	blt	17390 <grisu3_diy_fp_encode_double@@Base+0x188>
   17384:	sub	r6, r0, r2
   17388:	cmp	r6, #61	; 0x3d
   1738c:	blt	173c0 <grisu3_diy_fp_encode_double@@Base+0x1b8>
   17390:	sub	r0, r6, #62	; 0x3e
   17394:	mov	r7, #9
   17398:	add	r9, r7, r9, asr r0
   1739c:	lsr	r3, r3, r0
   173a0:	rsb	r7, r6, #94	; 0x5e
   173a4:	orr	r3, r3, r1, lsl r7
   173a8:	subs	r7, r6, #94	; 0x5e
   173ac:	lsrpl	r3, r1, r7
   173b0:	add	r2, r0, r2
   173b4:	lsr	r1, r1, r0
   173b8:	movwpl	r1, #0
   173bc:	mov	r6, #62	; 0x3e
   173c0:	ldr	r8, [fp, #12]
   173c4:	lsr	r0, r3, r6
   173c8:	rsb	r7, r6, #32
   173cc:	orr	r0, r0, r1, lsl r7
   173d0:	subs	r7, r6, #32
   173d4:	lsrpl	r0, r1, r7
   173d8:	add	r2, r2, r6
   173dc:	lsr	r1, r1, r6
   173e0:	movwpl	r1, #0
   173e4:	sub	r7, r6, #1
   173e8:	mov	r5, #1
   173ec:	lsl	r5, r5, r7
   173f0:	subs	r7, r6, #33	; 0x21
   173f4:	movwpl	r5, #0
   173f8:	add	r7, r9, r5, lsl #3
   173fc:	lsl	sl, r5, #3
   17400:	and	r3, r5, r3
   17404:	lsl	r5, r3, #3
   17408:	mov	r4, #0
   1740c:	cmp	r6, r7
   17410:	blt	17430 <grisu3_diy_fp_encode_double@@Base+0x228>
   17414:	adds	r0, r0, #1
   17418:	adc	r1, r1, #0
   1741c:	tst	r1, #2097152	; 0x200000
   17420:	beq	17430 <grisu3_diy_fp_encode_double@@Base+0x228>
   17424:	lsrs	r1, r1, #1
   17428:	rrx	r0, r0
   1742c:	add	r2, r2, #1
   17430:	mov	r3, r4
   17434:	bl	1766c <grisu3_diy_fp_encode_double@@Base+0x464>
   17438:	vstr	d0, [r8]
   1743c:	cmp	r5, r7
   17440:	mov	r0, #0
   17444:	movwge	r0, #1
   17448:	sub	r1, sl, r9
   1744c:	cmp	r1, r5
   17450:	movwge	r4, #1
   17454:	orr	r0, r0, r4
   17458:	sub	sp, fp, #28
   1745c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17460:	movw	r0, #52572	; 0xcd5c
   17464:	movt	r0, #1
   17468:	movw	r1, #52600	; 0xcd78
   1746c:	movt	r1, #1
   17470:	movw	r3, #52687	; 0xcdcf
   17474:	movt	r3, #1
   17478:	mov	r2, #185	; 0xb9
   1747c:	bl	129c0 <__assert_fail@plt>
   17480:	push	{r4, sl, fp, lr}
   17484:	add	fp, sp, #8
   17488:	orrs	r1, r2, r3
   1748c:	beq	17504 <grisu3_diy_fp_encode_double@@Base+0x2fc>
   17490:	ldr	r1, [fp, #8]
   17494:	mov	r4, #0
   17498:	cmp	r4, r3, lsr #22
   1749c:	bne	174b8 <grisu3_diy_fp_encode_double@@Base+0x2b0>
   174a0:	lsl	r3, r3, #10
   174a4:	orr	r3, r3, r2, lsr #22
   174a8:	sub	r1, r1, #10
   174ac:	lsl	r2, r2, #10
   174b0:	cmp	r3, #4194304	; 0x400000
   174b4:	bcc	174a0 <grisu3_diy_fp_encode_double@@Base+0x298>
   174b8:	ldr	ip, [fp, #12]
   174bc:	cmp	r3, #0
   174c0:	bmi	174ec <grisu3_diy_fp_encode_double@@Base+0x2e4>
   174c4:	mvn	lr, #0
   174c8:	lsl	r3, r3, #1
   174cc:	orr	r3, r3, r2, lsr #31
   174d0:	sub	r1, r1, #1
   174d4:	lsl	r4, r2, #1
   174d8:	subs	r2, lr, r2, lsl #1
   174dc:	sbcs	r2, lr, r3
   174e0:	mov	r2, r4
   174e4:	blt	174c8 <grisu3_diy_fp_encode_double@@Base+0x2c0>
   174e8:	b	174f0 <grisu3_diy_fp_encode_double@@Base+0x2e8>
   174ec:	mov	r4, r2
   174f0:	str	r4, [r0]
   174f4:	str	r3, [r0, #4]
   174f8:	str	r1, [r0, #8]
   174fc:	str	ip, [r0, #12]
   17500:	pop	{r4, sl, fp, pc}
   17504:	movw	r0, #53947	; 0xd2bb
   17508:	movt	r0, #1
   1750c:	movw	r1, #53956	; 0xd2c4
   17510:	movt	r1, #1
   17514:	movw	r3, #54042	; 0xd31a
   17518:	movt	r3, #1
   1751c:	mov	r2, #260	; 0x104
   17520:	bl	129c0 <__assert_fail@plt>
   17524:	push	{fp, lr}
   17528:	mov	fp, sp
   1752c:	cmn	r0, #348	; 0x15c
   17530:	blt	175ac <grisu3_diy_fp_encode_double@@Base+0x3a4>
   17534:	cmp	r0, #348	; 0x15c
   17538:	bge	175cc <grisu3_diy_fp_encode_double@@Base+0x3c4>
   1753c:	add	r2, r0, #348	; 0x15c
   17540:	asr	r3, r2, #31
   17544:	add	r2, r2, r3, lsr #29
   17548:	mvn	r3, #14
   1754c:	and	r2, r3, r2, lsl #1
   17550:	movw	r3, #50016	; 0xc360
   17554:	movt	r3, #1
   17558:	ldr	r2, [r3, r2]!
   1755c:	str	r2, [r1]
   17560:	ldr	r2, [r3, #4]
   17564:	str	r2, [r1, #4]
   17568:	ldrsh	r2, [r3, #8]
   1756c:	str	r2, [r1, #8]
   17570:	ldrsh	r1, [r3, #10]
   17574:	cmp	r1, r0
   17578:	bgt	175ec <grisu3_diy_fp_encode_double@@Base+0x3e4>
   1757c:	add	r2, r1, #8
   17580:	cmp	r2, r0
   17584:	movgt	r0, r1
   17588:	popgt	{fp, pc}
   1758c:	movw	r0, #54245	; 0xd3e5
   17590:	movt	r0, #1
   17594:	movw	r1, #52600	; 0xcd78
   17598:	movt	r1, #1
   1759c:	movw	r3, #54130	; 0xd372
   175a0:	movt	r3, #1
   175a4:	mov	r2, #89	; 0x59
   175a8:	bl	129c0 <__assert_fail@plt>
   175ac:	movw	r0, #54099	; 0xd353
   175b0:	movt	r0, #1
   175b4:	movw	r1, #52600	; 0xcd78
   175b8:	movt	r1, #1
   175bc:	movw	r3, #54130	; 0xd372
   175c0:	movt	r3, #1
   175c4:	mov	r2, #80	; 0x50
   175c8:	bl	129c0 <__assert_fail@plt>
   175cc:	movw	r0, #54187	; 0xd3ab
   175d0:	movt	r0, #1
   175d4:	movw	r1, #52600	; 0xcd78
   175d8:	movt	r1, #1
   175dc:	movw	r3, #54130	; 0xd372
   175e0:	movt	r3, #1
   175e4:	mov	r2, #81	; 0x51
   175e8:	bl	129c0 <__assert_fail@plt>
   175ec:	movw	r0, #54230	; 0xd3d6
   175f0:	movt	r0, #1
   175f4:	movw	r1, #52600	; 0xcd78
   175f8:	movt	r1, #1
   175fc:	movw	r3, #54130	; 0xd372
   17600:	movt	r3, #1
   17604:	mov	r2, #88	; 0x58
   17608:	bl	129c0 <__assert_fail@plt>
   1760c:	push	{r4, r5, fp, lr}
   17610:	add	fp, sp, #8
   17614:	ldr	ip, [fp, #24]
   17618:	ldr	r1, [fp, #8]
   1761c:	add	r1, r1, ip
   17620:	add	r1, r1, #64	; 0x40
   17624:	str	r1, [r0, #8]
   17628:	ldr	ip, [fp, #16]
   1762c:	umull	r1, lr, ip, r2
   17630:	umull	ip, r1, ip, r3
   17634:	mov	r5, #0
   17638:	adds	lr, ip, lr
   1763c:	adc	r5, r5, #0
   17640:	ldr	ip, [fp, #20]
   17644:	umull	r2, r4, ip, r2
   17648:	adds	r2, lr, r2
   1764c:	adc	r5, r5, #0
   17650:	umaal	r1, r4, ip, r3
   17654:	adds	r2, r2, #-2147483648	; 0x80000000
   17658:	adcs	r1, r1, r5
   1765c:	str	r1, [r0]
   17660:	adc	r1, r4, #0
   17664:	str	r1, [r0, #4]
   17668:	pop	{r4, r5, fp, pc}
   1766c:	push	{r4, sl, fp, lr}
   17670:	add	fp, sp, #8
   17674:	cmp	r1, #2097152	; 0x200000
   17678:	bcc	1769c <grisu3_diy_fp_encode_double@@Base+0x494>
   1767c:	mov	r4, #0
   17680:	lsrs	r3, r1, #1
   17684:	rrx	r0, r0
   17688:	add	r2, r2, #1
   1768c:	cmp	r4, r1, lsr #22
   17690:	mov	r1, r3
   17694:	bne	17680 <grisu3_diy_fp_encode_double@@Base+0x478>
   17698:	b	176a0 <grisu3_diy_fp_encode_double@@Base+0x498>
   1769c:	mov	r3, r1
   176a0:	movw	ip, #64462	; 0xfbce
   176a4:	movt	ip, #65535	; 0xffff
   176a8:	cmp	r2, ip
   176ac:	bge	176b8 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   176b0:	vmov.i32	d0, #0	; 0x00000000
   176b4:	pop	{r4, sl, fp, pc}
   176b8:	and	r1, r3, #1048576	; 0x100000
   176bc:	mov	r4, #1
   176c0:	eor	lr, r4, r1, lsr #20
   176c4:	cmp	r2, ip
   176c8:	beq	17710 <grisu3_diy_fp_encode_double@@Base+0x508>
   176cc:	cmp	r1, #0
   176d0:	bne	17710 <grisu3_diy_fp_encode_double@@Base+0x508>
   176d4:	mov	r4, #1
   176d8:	lsl	r1, r3, #1
   176dc:	orr	r1, r1, r0, lsr #31
   176e0:	and	r3, r3, #524288	; 0x80000
   176e4:	eor	lr, r4, r3, lsr #19
   176e8:	lsl	r0, r0, #1
   176ec:	sub	r2, r2, #1
   176f0:	cmp	r2, ip
   176f4:	ble	17704 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   176f8:	cmp	r3, #0
   176fc:	mov	r3, r1
   17700:	beq	176d8 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   17704:	cmp	r2, ip
   17708:	beq	1771c <grisu3_diy_fp_encode_double@@Base+0x514>
   1770c:	b	1772c <grisu3_diy_fp_encode_double@@Base+0x524>
   17710:	mov	r1, r3
   17714:	cmp	r2, ip
   17718:	bne	1772c <grisu3_diy_fp_encode_double@@Base+0x524>
   1771c:	mov	r3, #0
   17720:	cmp	lr, #0
   17724:	mov	r4, #0
   17728:	bne	1773c <grisu3_diy_fp_encode_double@@Base+0x534>
   1772c:	movw	r3, #1075	; 0x433
   17730:	add	r2, r2, r3
   17734:	lsl	r4, r2, #20
   17738:	mov	r3, #0
   1773c:	orr	r0, r3, r0
   17740:	bfc	r1, #20, #12
   17744:	orr	r1, r4, r1
   17748:	pop	{r4, sl, fp, lr}
   1774c:	b	19de0 <flatcc_json_parser_struct_as_root@@Base+0xb4>

00017750 <flatcc_json_parser_error_string@@Base>:
   17750:	cmp	r0, #34	; 0x22
   17754:	movwhi	r0, #53397	; 0xd095
   17758:	movthi	r0, #1
   1775c:	bxhi	lr
   17760:	movw	r1, #52432	; 0xccd0
   17764:	movt	r1, #1
   17768:	ldr	r0, [r1, r0, lsl #2]
   1776c:	bx	lr

00017770 <flatcc_json_parser_set_error@@Base>:
   17770:	mov	ip, r2
   17774:	ldr	r2, [r0, #24]
   17778:	cmp	r2, #0
   1777c:	beq	17788 <flatcc_json_parser_set_error@@Base+0x18>
   17780:	mov	r0, ip
   17784:	bx	lr
   17788:	str	r1, [r0, #36]	; 0x24
   1778c:	ldr	r2, [r0, #4]
   17790:	sub	r1, r1, r2
   17794:	add	r1, r1, #1
   17798:	str	r1, [r0, #20]
   1779c:	str	r3, [r0, #24]
   177a0:	mov	r0, ip
   177a4:	bx	lr

000177a8 <flatcc_json_parser_string_part@@Base>:
   177a8:	push	{fp, lr}
   177ac:	mov	fp, sp
   177b0:	cmp	r1, r2
   177b4:	beq	177dc <flatcc_json_parser_string_part@@Base+0x34>
   177b8:	ldrb	r3, [r1]
   177bc:	cmp	r3, #32
   177c0:	bcc	177f0 <flatcc_json_parser_string_part@@Base+0x48>
   177c4:	cmp	r3, #34	; 0x22
   177c8:	cmpne	r3, #92	; 0x5c
   177cc:	beq	177e8 <flatcc_json_parser_string_part@@Base+0x40>
   177d0:	add	r1, r1, #1
   177d4:	cmp	r2, r1
   177d8:	bne	177b8 <flatcc_json_parser_string_part@@Base+0x10>
   177dc:	mov	r3, #20
   177e0:	bl	17770 <flatcc_json_parser_set_error@@Base>
   177e4:	mov	r1, r0
   177e8:	mov	r0, r1
   177ec:	pop	{fp, pc}
   177f0:	mov	r3, #17
   177f4:	b	177e0 <flatcc_json_parser_string_part@@Base+0x38>

000177f8 <flatcc_json_parser_space_ext@@Base>:
   177f8:	push	{fp, lr}
   177fc:	mov	fp, sp
   17800:	mov	ip, r1
   17804:	cmp	ip, r2
   17808:	beq	17840 <flatcc_json_parser_space_ext@@Base+0x48>
   1780c:	ldrb	r3, [ip]
   17810:	cmp	r3, #32
   17814:	bne	17840 <flatcc_json_parser_space_ext@@Base+0x48>
   17818:	add	ip, ip, #1
   1781c:	cmp	r2, ip
   17820:	bne	1780c <flatcc_json_parser_space_ext@@Base+0x14>
   17824:	b	17840 <flatcc_json_parser_space_ext@@Base+0x48>
   17828:	add	ip, ip, r3
   1782c:	add	ip, ip, #1
   17830:	str	ip, [r0, #4]
   17834:	ldr	r1, [r0, #16]
   17838:	add	r1, r1, #1
   1783c:	str	r1, [r0, #16]
   17840:	cmp	ip, r2
   17844:	beq	1790c <flatcc_json_parser_space_ext@@Base+0x114>
   17848:	ldrb	r3, [ip]
   1784c:	cmp	r3, #32
   17850:	bhi	1790c <flatcc_json_parser_space_ext@@Base+0x114>
   17854:	sub	r3, r3, #9
   17858:	cmp	r3, #23
   1785c:	bhi	178fc <flatcc_json_parser_space_ext@@Base+0x104>
   17860:	add	r1, pc, #0
   17864:	ldr	pc, [r1, r3, lsl #2]
   17868:	andeq	r7, r1, r8, asr #17
   1786c:	andeq	r7, r1, ip, lsr #16
   17870:	strdeq	r7, [r1], -ip
   17874:	strdeq	r7, [r1], -ip
   17878:	ldrdeq	r7, [r1], -r8
   1787c:	strdeq	r7, [r1], -ip
   17880:	strdeq	r7, [r1], -ip
   17884:	strdeq	r7, [r1], -ip
   17888:	strdeq	r7, [r1], -ip
   1788c:	strdeq	r7, [r1], -ip
   17890:	strdeq	r7, [r1], -ip
   17894:	strdeq	r7, [r1], -ip
   17898:	strdeq	r7, [r1], -ip
   1789c:	strdeq	r7, [r1], -ip
   178a0:	strdeq	r7, [r1], -ip
   178a4:	strdeq	r7, [r1], -ip
   178a8:	strdeq	r7, [r1], -ip
   178ac:	strdeq	r7, [r1], -ip
   178b0:	strdeq	r7, [r1], -ip
   178b4:	strdeq	r7, [r1], -ip
   178b8:	strdeq	r7, [r1], -ip
   178bc:	strdeq	r7, [r1], -ip
   178c0:	strdeq	r7, [r1], -ip
   178c4:	andeq	r7, r1, r4, lsl #16
   178c8:	add	ip, ip, #1
   178cc:	cmp	ip, r2
   178d0:	bne	17848 <flatcc_json_parser_space_ext@@Base+0x50>
   178d4:	b	1790c <flatcc_json_parser_space_ext@@Base+0x114>
   178d8:	sub	r1, r2, ip
   178dc:	mov	r3, #0
   178e0:	cmp	r1, #2
   178e4:	blt	17828 <flatcc_json_parser_space_ext@@Base+0x30>
   178e8:	ldrb	r1, [ip, #1]
   178ec:	sub	r1, r1, #10
   178f0:	clz	r1, r1
   178f4:	lsr	r3, r1, #5
   178f8:	b	17828 <flatcc_json_parser_space_ext@@Base+0x30>
   178fc:	mov	r1, ip
   17900:	mov	r3, #5
   17904:	bl	17770 <flatcc_json_parser_set_error@@Base>
   17908:	mov	ip, r0
   1790c:	mov	r0, ip
   17910:	pop	{fp, pc}

00017914 <flatcc_json_parser_string_escape@@Base>:
   17914:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17918:	add	fp, sp, #24
   1791c:	sub	r7, r2, r1
   17920:	cmp	r7, #2
   17924:	blt	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17928:	ldrb	r6, [r1]
   1792c:	cmp	r6, #92	; 0x5c
   17930:	bne	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17934:	ldrb	r6, [r1, #1]
   17938:	sub	r6, r6, #34	; 0x22
   1793c:	cmp	r6, #86	; 0x56
   17940:	bhi	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17944:	add	r5, pc, #0
   17948:	ldr	pc, [r5, r6, lsl #2]
   1794c:	andeq	r7, r1, r8, lsr #21
   17950:	andeq	r7, r1, r4, lsr #22
   17954:	andeq	r7, r1, r4, lsr #22
   17958:	andeq	r7, r1, r4, lsr #22
   1795c:	andeq	r7, r1, r4, lsr #22
   17960:	andeq	r7, r1, r4, lsr #22
   17964:	andeq	r7, r1, r4, lsr #22
   17968:	andeq	r7, r1, r4, lsr #22
   1796c:	andeq	r7, r1, r4, lsr #22
   17970:	andeq	r7, r1, r4, lsr #22
   17974:	andeq	r7, r1, r4, lsr #22
   17978:	andeq	r7, r1, r4, lsr #22
   1797c:	andeq	r7, r1, r4, lsr #22
   17980:			; <UNDEFINED> instruction: 0x00017ab0
   17984:	andeq	r7, r1, r4, lsr #22
   17988:	andeq	r7, r1, r4, lsr #22
   1798c:	andeq	r7, r1, r4, lsr #22
   17990:	andeq	r7, r1, r4, lsr #22
   17994:	andeq	r7, r1, r4, lsr #22
   17998:	andeq	r7, r1, r4, lsr #22
   1799c:	andeq	r7, r1, r4, lsr #22
   179a0:	andeq	r7, r1, r4, lsr #22
   179a4:	andeq	r7, r1, r4, lsr #22
   179a8:	andeq	r7, r1, r4, lsr #22
   179ac:	andeq	r7, r1, r4, lsr #22
   179b0:	andeq	r7, r1, r4, lsr #22
   179b4:	andeq	r7, r1, r4, lsr #22
   179b8:	andeq	r7, r1, r4, lsr #22
   179bc:	andeq	r7, r1, r4, lsr #22
   179c0:	andeq	r7, r1, r4, lsr #22
   179c4:	andeq	r7, r1, r4, lsr #22
   179c8:	andeq	r7, r1, r4, lsr #22
   179cc:	andeq	r7, r1, r4, lsr #22
   179d0:	andeq	r7, r1, r4, lsr #22
   179d4:	andeq	r7, r1, r4, lsr #22
   179d8:	andeq	r7, r1, r4, lsr #22
   179dc:	andeq	r7, r1, r4, lsr #22
   179e0:	andeq	r7, r1, r4, lsr #22
   179e4:	andeq	r7, r1, r4, lsr #22
   179e8:	andeq	r7, r1, r4, lsr #22
   179ec:	andeq	r7, r1, r4, lsr #22
   179f0:	andeq	r7, r1, r4, lsr #22
   179f4:	andeq	r7, r1, r4, lsr #22
   179f8:	andeq	r7, r1, r4, lsr #22
   179fc:	andeq	r7, r1, r4, lsr #22
   17a00:	andeq	r7, r1, r4, lsr #22
   17a04:	andeq	r7, r1, r4, lsr #22
   17a08:	andeq	r7, r1, r4, lsr #22
   17a0c:	andeq	r7, r1, r4, lsr #22
   17a10:	andeq	r7, r1, r4, lsr #22
   17a14:	andeq	r7, r1, r4, lsr #22
   17a18:	andeq	r7, r1, r4, lsr #22
   17a1c:	andeq	r7, r1, r4, lsr #22
   17a20:	andeq	r7, r1, r4, lsr #22
   17a24:	andeq	r7, r1, r4, lsr #22
   17a28:	andeq	r7, r1, r4, lsr #22
   17a2c:	andeq	r7, r1, r4, lsr #22
   17a30:	andeq	r7, r1, r4, lsr #22
   17a34:			; <UNDEFINED> instruction: 0x00017ab8
   17a38:	andeq	r7, r1, r4, lsr #22
   17a3c:	andeq	r7, r1, r4, lsr #22
   17a40:	andeq	r7, r1, r4, lsr #22
   17a44:	andeq	r7, r1, r4, lsr #22
   17a48:	andeq	r7, r1, r4, lsr #22
   17a4c:	andeq	r7, r1, r0, asr #21
   17a50:	andeq	r7, r1, r4, lsr #22
   17a54:	andeq	r7, r1, r4, lsr #22
   17a58:	andeq	r7, r1, r4, lsr #22
   17a5c:	andeq	r7, r1, r8, asr #21
   17a60:	andeq	r7, r1, r4, lsr #22
   17a64:	andeq	r7, r1, r4, lsr #22
   17a68:	andeq	r7, r1, r4, lsr #22
   17a6c:	andeq	r7, r1, r4, lsr #22
   17a70:	andeq	r7, r1, r4, lsr #22
   17a74:	andeq	r7, r1, r4, lsr #22
   17a78:	andeq	r7, r1, r4, lsr #22
   17a7c:	ldrdeq	r7, [r1], -r0
   17a80:	andeq	r7, r1, r4, lsr #22
   17a84:	andeq	r7, r1, r4, lsr #22
   17a88:	andeq	r7, r1, r4, lsr #22
   17a8c:	ldrdeq	r7, [r1], -r8
   17a90:	andeq	r7, r1, r4, lsr #22
   17a94:	andeq	r7, r1, r0, ror #21
   17a98:	strdeq	r7, [r1], -r0
   17a9c:	andeq	r7, r1, r4, lsr #22
   17aa0:	andeq	r7, r1, r4, lsr #22
   17aa4:	andeq	r7, r1, r4, lsl fp
   17aa8:	movw	r0, #8705	; 0x2201
   17aac:	b	17ae4 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17ab0:	movw	r0, #12033	; 0x2f01
   17ab4:	b	17ae4 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17ab8:	movw	r0, #23553	; 0x5c01
   17abc:	b	17ae4 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17ac0:	movw	r0, #2049	; 0x801
   17ac4:	b	17ae4 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17ac8:	movw	r0, #3073	; 0xc01
   17acc:	b	17ae4 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17ad0:	movw	r0, #2561	; 0xa01
   17ad4:	b	17ae4 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17ad8:	movw	r0, #3329	; 0xd01
   17adc:	b	17ae4 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17ae0:	movw	r0, #2305	; 0x901
   17ae4:	strh	r0, [r3]
   17ae8:	add	r0, r1, #2
   17aec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17af0:	cmp	r7, #5
   17af4:	ble	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17af8:	ldrb	r7, [r1, #2]
   17afc:	sub	r6, r7, #48	; 0x30
   17b00:	uxtb	r6, r6
   17b04:	cmp	r6, #9
   17b08:	bhi	17b54 <flatcc_json_parser_string_escape@@Base+0x240>
   17b0c:	lsl	ip, r7, #12
   17b10:	b	17b74 <flatcc_json_parser_string_escape@@Base+0x260>
   17b14:	mov	r6, #1
   17b18:	strb	r6, [r3]
   17b1c:	cmp	r7, #3
   17b20:	bgt	17b38 <flatcc_json_parser_string_escape@@Base+0x224>
   17b24:	mov	r7, #0
   17b28:	strb	r7, [r3]
   17b2c:	mov	r3, #18
   17b30:	bl	17770 <flatcc_json_parser_set_error@@Base>
   17b34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b38:	ldrb	r7, [r1, #2]
   17b3c:	sub	r6, r7, #48	; 0x30
   17b40:	uxtb	r6, r6
   17b44:	cmp	r6, #9
   17b48:	bhi	17b90 <flatcc_json_parser_string_escape@@Base+0x27c>
   17b4c:	lsl	r6, r7, #4
   17b50:	b	17bac <flatcc_json_parser_string_escape@@Base+0x298>
   17b54:	orr	r6, r7, #32
   17b58:	sub	r6, r6, #97	; 0x61
   17b5c:	uxtb	r6, r6
   17b60:	cmp	r6, #5
   17b64:	bhi	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17b68:	movw	r6, #36864	; 0x9000
   17b6c:	movt	r6, #65535	; 0xffff
   17b70:	add	ip, r6, r7, lsl #12
   17b74:	ldrb	lr, [r1, #3]
   17b78:	sub	r4, lr, #48	; 0x30
   17b7c:	uxtb	r4, r4
   17b80:	cmp	r4, #10
   17b84:	bcs	17be8 <flatcc_json_parser_string_escape@@Base+0x2d4>
   17b88:	mov	r8, #53248	; 0xd000
   17b8c:	b	17c00 <flatcc_json_parser_string_escape@@Base+0x2ec>
   17b90:	orr	r6, r7, #32
   17b94:	sub	r6, r6, #97	; 0x61
   17b98:	uxtb	r6, r6
   17b9c:	cmp	r6, #5
   17ba0:	bhi	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17ba4:	mvn	r6, #111	; 0x6f
   17ba8:	add	r6, r6, r7, lsl #4
   17bac:	ldrb	r5, [r1, #3]
   17bb0:	sub	r7, r5, #48	; 0x30
   17bb4:	uxtb	r4, r7
   17bb8:	cmp	r4, #9
   17bbc:	bls	17bd8 <flatcc_json_parser_string_escape@@Base+0x2c4>
   17bc0:	orr	r7, r5, #32
   17bc4:	sub	r5, r7, #97	; 0x61
   17bc8:	uxtb	r5, r5
   17bcc:	cmp	r5, #5
   17bd0:	bhi	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17bd4:	sub	r7, r7, #87	; 0x57
   17bd8:	orr	r0, r7, r6
   17bdc:	strb	r0, [r3, #1]
   17be0:	add	r0, r1, #4
   17be4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17be8:	orr	lr, lr, #32
   17bec:	sub	r4, lr, #97	; 0x61
   17bf0:	uxtb	r4, r4
   17bf4:	mov	r8, #43264	; 0xa900
   17bf8:	cmp	r4, #6
   17bfc:	bcs	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17c00:	ldrb	r5, [r1, #4]
   17c04:	sub	r4, r5, #48	; 0x30
   17c08:	uxtb	r4, r4
   17c0c:	cmp	r4, #10
   17c10:	bcs	17c1c <flatcc_json_parser_string_escape@@Base+0x308>
   17c14:	mov	r9, #64768	; 0xfd00
   17c18:	b	17c34 <flatcc_json_parser_string_escape@@Base+0x320>
   17c1c:	orr	r5, r5, #32
   17c20:	sub	r4, r5, #97	; 0x61
   17c24:	uxtb	r4, r4
   17c28:	movw	r9, #64144	; 0xfa90
   17c2c:	cmp	r4, #6
   17c30:	bcs	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17c34:	ldrb	r7, [r1, #5]
   17c38:	sub	r4, r7, #48	; 0x30
   17c3c:	uxtb	r4, r4
   17c40:	cmp	r4, #10
   17c44:	bcs	17c54 <flatcc_json_parser_string_escape@@Base+0x340>
   17c48:	mvn	r0, #86	; 0x56
   17c4c:	add	r4, r0, #39	; 0x27
   17c50:	b	17c6c <flatcc_json_parser_string_escape@@Base+0x358>
   17c54:	movw	r4, #65449	; 0xffa9
   17c58:	orr	r7, r7, #32
   17c5c:	sub	r6, r7, #97	; 0x61
   17c60:	uxtb	r6, r6
   17c64:	cmp	r6, #6
   17c68:	bcs	17b24 <flatcc_json_parser_string_escape@@Base+0x210>
   17c6c:	add	r0, r8, lr, lsl #8
   17c70:	orr	r0, r0, ip
   17c74:	add	r2, r9, r5, lsl #4
   17c78:	orr	r0, r0, r2
   17c7c:	add	r2, r4, r7
   17c80:	orr	r0, r0, r2
   17c84:	uxth	r7, r0
   17c88:	cmp	r7, #127	; 0x7f
   17c8c:	bhi	17c9c <flatcc_json_parser_string_escape@@Base+0x388>
   17c90:	mov	r2, #1
   17c94:	strb	r2, [r3]
   17c98:	b	17cec <flatcc_json_parser_string_escape@@Base+0x3d8>
   17c9c:	mov	r2, #0
   17ca0:	cmp	r2, r7, lsr #11
   17ca4:	bne	17cc0 <flatcc_json_parser_string_escape@@Base+0x3ac>
   17ca8:	mov	r2, #2
   17cac:	strb	r2, [r3]
   17cb0:	mov	r7, #192	; 0xc0
   17cb4:	orr	r7, r7, r0, lsr #6
   17cb8:	strb	r7, [r3, #1]
   17cbc:	b	17ce4 <flatcc_json_parser_string_escape@@Base+0x3d0>
   17cc0:	mov	r2, #3
   17cc4:	strb	r2, [r3]
   17cc8:	mov	r6, #224	; 0xe0
   17ccc:	orr	r6, r6, r7, lsr #12
   17cd0:	strb	r6, [r3, #1]
   17cd4:	lsr	r7, r7, #6
   17cd8:	mov	r6, #2
   17cdc:	bfi	r7, r6, #6, #26
   17ce0:	strb	r7, [r3, #2]
   17ce4:	mvn	r7, #-67108863	; 0xfc000001
   17ce8:	bfi	r0, r7, #6, #26
   17cec:	strb	r0, [r3, r2]
   17cf0:	add	r0, r1, #6
   17cf4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00017cf8 <flatcc_json_parser_skip_constant@@Base>:
   17cf8:	push	{r4, r5, r6, sl, fp, lr}
   17cfc:	add	fp, sp, #16
   17d00:	mov	r4, r1
   17d04:	cmp	r1, r2
   17d08:	beq	17d7c <flatcc_json_parser_skip_constant@@Base+0x84>
   17d0c:	mov	r5, r2
   17d10:	mov	r6, r0
   17d14:	ldrsb	r0, [r4]
   17d18:	cmp	r0, #0
   17d1c:	bmi	17d2c <flatcc_json_parser_skip_constant@@Base+0x34>
   17d20:	cmp	r0, #95	; 0x5f
   17d24:	cmpne	r0, #46	; 0x2e
   17d28:	bne	17d3c <flatcc_json_parser_skip_constant@@Base+0x44>
   17d2c:	add	r4, r4, #1
   17d30:	cmp	r4, r5
   17d34:	bne	17d14 <flatcc_json_parser_skip_constant@@Base+0x1c>
   17d38:	b	17d7c <flatcc_json_parser_skip_constant@@Base+0x84>
   17d3c:	sub	r1, r0, #48	; 0x30
   17d40:	uxtb	r1, r1
   17d44:	cmp	r1, #9
   17d48:	bls	17d2c <flatcc_json_parser_skip_constant@@Base+0x34>
   17d4c:	orr	r0, r0, #32
   17d50:	sub	r0, r0, #97	; 0x61
   17d54:	uxtb	r0, r0
   17d58:	cmp	r0, #25
   17d5c:	bls	17d2c <flatcc_json_parser_skip_constant@@Base+0x34>
   17d60:	mov	r0, r6
   17d64:	mov	r1, r4
   17d68:	mov	r2, r5
   17d6c:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17d70:	cmp	r0, r4
   17d74:	mov	r4, r0
   17d78:	bne	17d30 <flatcc_json_parser_skip_constant@@Base+0x38>
   17d7c:	mov	r0, r4
   17d80:	pop	{r4, r5, r6, sl, fp, pc}
   17d84:	sub	r3, r2, r1
   17d88:	cmp	r3, #2
   17d8c:	blt	17db8 <flatcc_json_parser_skip_constant@@Base+0xc0>
   17d90:	ldrb	r3, [r1]
   17d94:	cmp	r3, #32
   17d98:	movhi	r0, r1
   17d9c:	bxhi	lr
   17da0:	bne	17db8 <flatcc_json_parser_skip_constant@@Base+0xc0>
   17da4:	mov	ip, r1
   17da8:	ldrb	r3, [ip, #1]!
   17dac:	cmp	r3, #32
   17db0:	movhi	r0, ip
   17db4:	bxhi	lr
   17db8:	b	177f8 <flatcc_json_parser_space_ext@@Base>

00017dbc <flatcc_json_parser_match_constant@@Base>:
   17dbc:	push	{r4, r5, r6, r7, fp, lr}
   17dc0:	add	fp, sp, #16
   17dc4:	mov	r5, r2
   17dc8:	mov	r4, r1
   17dcc:	mov	r2, r0
   17dd0:	sub	r0, r5, r1
   17dd4:	ldr	r7, [fp, #8]
   17dd8:	cmp	r0, r3
   17ddc:	ble	17ebc <flatcc_json_parser_match_constant@@Base+0x100>
   17de0:	add	r6, r4, r3
   17de4:	ldr	r0, [r2, #12]
   17de8:	cmp	r0, #0
   17dec:	beq	17e54 <flatcc_json_parser_match_constant@@Base+0x98>
   17df0:	mov	r0, r2
   17df4:	mov	r1, r6
   17df8:	mov	r2, r5
   17dfc:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17e00:	cmp	r0, r5
   17e04:	beq	17ecc <flatcc_json_parser_match_constant@@Base+0x110>
   17e08:	cmp	r0, r6
   17e0c:	beq	17e38 <flatcc_json_parser_match_constant@@Base+0x7c>
   17e10:	ldrsb	r1, [r0]
   17e14:	cmp	r1, #95	; 0x5f
   17e18:	beq	17ed8 <flatcc_json_parser_match_constant@@Base+0x11c>
   17e1c:	cmn	r1, #1
   17e20:	ble	17ed8 <flatcc_json_parser_match_constant@@Base+0x11c>
   17e24:	orr	r1, r1, #32
   17e28:	sub	r1, r1, #97	; 0x61
   17e2c:	uxtb	r1, r1
   17e30:	cmp	r1, #25
   17e34:	bls	17ed8 <flatcc_json_parser_match_constant@@Base+0x11c>
   17e38:	mov	r1, #0
   17e3c:	str	r1, [r7]
   17e40:	ldrb	r1, [r0]
   17e44:	cmp	r1, #44	; 0x2c
   17e48:	cmpne	r1, #93	; 0x5d
   17e4c:	bne	17f04 <flatcc_json_parser_match_constant@@Base+0x148>
   17e50:	pop	{r4, r5, r6, r7, fp, pc}
   17e54:	ldrb	r0, [r6]
   17e58:	cmp	r0, #92	; 0x5c
   17e5c:	beq	17ee4 <flatcc_json_parser_match_constant@@Base+0x128>
   17e60:	cmp	r0, #34	; 0x22
   17e64:	beq	17ea0 <flatcc_json_parser_match_constant@@Base+0xe4>
   17e68:	cmp	r0, #32
   17e6c:	bne	17ebc <flatcc_json_parser_match_constant@@Base+0x100>
   17e70:	add	r0, r4, r3
   17e74:	add	r6, r0, #1
   17e78:	mov	r0, r6
   17e7c:	cmp	r5, r6
   17e80:	beq	17ecc <flatcc_json_parser_match_constant@@Base+0x110>
   17e84:	mov	r6, r0
   17e88:	ldrb	r1, [r6], #1
   17e8c:	cmp	r1, #32
   17e90:	beq	17e78 <flatcc_json_parser_match_constant@@Base+0xbc>
   17e94:	ldrb	r1, [r6, #-1]!
   17e98:	cmp	r1, #34	; 0x22
   17e9c:	bne	17ed8 <flatcc_json_parser_match_constant@@Base+0x11c>
   17ea0:	add	r1, r6, #1
   17ea4:	mov	r4, #0
   17ea8:	mov	r0, r2
   17eac:	mov	r2, #0
   17eb0:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17eb4:	str	r4, [r7]
   17eb8:	pop	{r4, r5, r6, r7, fp, pc}
   17ebc:	mov	r0, #0
   17ec0:	str	r0, [r7]
   17ec4:	mov	r0, r4
   17ec8:	pop	{r4, r5, r6, r7, fp, pc}
   17ecc:	mov	r1, #0
   17ed0:	str	r1, [r7]
   17ed4:	pop	{r4, r5, r6, r7, fp, pc}
   17ed8:	mov	r1, #1
   17edc:	str	r1, [r7]
   17ee0:	pop	{r4, r5, r6, r7, fp, pc}
   17ee4:	mov	r0, #0
   17ee8:	str	r0, [r7]
   17eec:	mov	r0, r2
   17ef0:	mov	r1, r6
   17ef4:	mov	r2, r5
   17ef8:	mov	r3, #18
   17efc:	bl	17770 <flatcc_json_parser_set_error@@Base>
   17f00:	pop	{r4, r5, r6, r7, fp, pc}
   17f04:	cmp	r1, #125	; 0x7d
   17f08:	movne	r0, r4
   17f0c:	pop	{r4, r5, r6, r7, fp, pc}

00017f10 <flatcc_json_parser_unmatched_symbol@@Base>:
   17f10:	push	{r4, r5, fp, lr}
   17f14:	add	fp, sp, #8
   17f18:	mov	r4, r2
   17f1c:	mov	r5, r0
   17f20:	ldrb	r0, [r0, #8]
   17f24:	tst	r0, #1
   17f28:	bne	17f40 <flatcc_json_parser_unmatched_symbol@@Base+0x30>
   17f2c:	mov	r0, r5
   17f30:	mov	r2, r4
   17f34:	mov	r3, #13
   17f38:	bl	17770 <flatcc_json_parser_set_error@@Base>
   17f3c:	pop	{r4, r5, fp, pc}
   17f40:	mov	r0, r5
   17f44:	mov	r2, r4
   17f48:	bl	17fac <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   17f4c:	mov	r1, r0
   17f50:	mov	r0, r5
   17f54:	mov	r2, r4
   17f58:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17f5c:	mov	r1, r0
   17f60:	cmp	r0, r4
   17f64:	beq	17f98 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   17f68:	ldrb	r0, [r1]
   17f6c:	cmp	r0, #58	; 0x3a
   17f70:	bne	17f98 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   17f74:	add	r1, r1, #1
   17f78:	mov	r0, r5
   17f7c:	mov	r2, r4
   17f80:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17f84:	mov	r1, r0
   17f88:	mov	r0, r5
   17f8c:	mov	r2, r4
   17f90:	pop	{r4, r5, fp, lr}
   17f94:	b	180c4 <flatcc_json_parser_generic_json@@Base>
   17f98:	mov	r0, r5
   17f9c:	mov	r2, r4
   17fa0:	mov	r3, #4
   17fa4:	bl	17770 <flatcc_json_parser_set_error@@Base>
   17fa8:	pop	{r4, r5, fp, pc}
   17fac:	push	{fp, lr}
   17fb0:	mov	fp, sp
   17fb4:	mov	lr, r1
   17fb8:	ldr	r1, [r0, #12]
   17fbc:	cmp	r1, #0
   17fc0:	beq	1806c <flatcc_json_parser_unmatched_symbol@@Base+0x15c>
   17fc4:	cmp	lr, r2
   17fc8:	beq	180bc <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   17fcc:	ldrb	r3, [lr]
   17fd0:	mov	ip, #0
   17fd4:	cmp	r3, #33	; 0x21
   17fd8:	bcc	18048 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   17fdc:	add	r1, lr, #1
   17fe0:	mov	ip, r3
   17fe4:	mov	lr, r1
   17fe8:	uxtb	r1, r3
   17fec:	cmp	r1, #46	; 0x2e
   17ff0:	cmpne	r1, #95	; 0x5f
   17ff4:	bne	18014 <flatcc_json_parser_unmatched_symbol@@Base+0x104>
   17ff8:	cmp	r2, lr
   17ffc:	beq	18048 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   18000:	mov	r1, lr
   18004:	ldrb	r3, [r1], #1
   18008:	cmp	r3, #33	; 0x21
   1800c:	bcs	17fe0 <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
   18010:	b	18048 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   18014:	sxtb	r1, ip
   18018:	cmp	r1, #0
   1801c:	bmi	17ff8 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   18020:	sub	r1, ip, #48	; 0x30
   18024:	uxtb	r1, r1
   18028:	cmp	r1, #9
   1802c:	bls	17ff8 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   18030:	orr	r1, ip, #32
   18034:	sub	r1, r1, #97	; 0x61
   18038:	uxtb	r1, r1
   1803c:	cmp	r1, #26
   18040:	bcc	17ff8 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   18044:	sub	lr, lr, #1
   18048:	uxtb	r1, ip
   1804c:	cmp	r1, #46	; 0x2e
   18050:	bne	180bc <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   18054:	mov	r1, lr
   18058:	mov	r3, #5
   1805c:	b	180b4 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   18060:	cmp	r1, #34	; 0x22
   18064:	beq	180a0 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   18068:	add	lr, lr, #1
   1806c:	cmp	lr, r2
   18070:	beq	180ac <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   18074:	ldrb	r1, [lr]
   18078:	cmp	r1, #92	; 0x5c
   1807c:	bne	18060 <flatcc_json_parser_unmatched_symbol@@Base+0x150>
   18080:	sub	r1, r2, lr
   18084:	cmp	r1, #2
   18088:	blt	18094 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   1808c:	add	lr, lr, #1
   18090:	b	18068 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
   18094:	ldrb	r1, [lr]
   18098:	cmp	r1, #34	; 0x22
   1809c:	bne	180ac <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   180a0:	add	lr, lr, #1
   180a4:	mov	r0, lr
   180a8:	pop	{fp, pc}
   180ac:	mov	r1, lr
   180b0:	mov	r3, #20
   180b4:	bl	17770 <flatcc_json_parser_set_error@@Base>
   180b8:	mov	lr, r0
   180bc:	mov	r0, lr
   180c0:	pop	{fp, pc}

000180c4 <flatcc_json_parser_generic_json@@Base>:
   180c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c8:	add	fp, sp, #28
   180cc:	sub	sp, sp, #524	; 0x20c
   180d0:	mov	r7, r1
   180d4:	mov	r6, #0
   180d8:	str	r6, [sp]
   180dc:	cmp	r1, r2
   180e0:	beq	1838c <flatcc_json_parser_generic_json@@Base+0x2c8>
   180e4:	mov	r4, r2
   180e8:	mov	r5, r0
   180ec:	add	sl, sp, #8
   180f0:	sub	r8, sl, #1
   180f4:	mov	r9, sp
   180f8:	mov	r0, sl
   180fc:	cmp	r6, #0
   18100:	beq	1816c <flatcc_json_parser_generic_json@@Base+0xa8>
   18104:	ldrb	r0, [r0, #-1]
   18108:	cmp	r0, #125	; 0x7d
   1810c:	bne	1816c <flatcc_json_parser_generic_json@@Base+0xa8>
   18110:	mov	r0, r5
   18114:	mov	r1, r7
   18118:	mov	r2, r4
   1811c:	bl	185f4 <flatcc_json_parser_float@@Base+0x140>
   18120:	mov	r1, r0
   18124:	mov	r0, r5
   18128:	mov	r2, r4
   1812c:	bl	17fac <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   18130:	mov	r1, r0
   18134:	mov	r0, r5
   18138:	mov	r2, r4
   1813c:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18140:	mov	r1, r0
   18144:	cmp	r0, r4
   18148:	beq	18398 <flatcc_json_parser_generic_json@@Base+0x2d4>
   1814c:	ldrb	r0, [r1]
   18150:	cmp	r0, #58	; 0x3a
   18154:	bne	183a8 <flatcc_json_parser_generic_json@@Base+0x2e4>
   18158:	add	r1, r1, #1
   1815c:	mov	r0, r5
   18160:	mov	r2, r4
   18164:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18168:	mov	r7, r0
   1816c:	ldrb	r0, [r7]
   18170:	sub	r1, r0, #48	; 0x30
   18174:	cmp	r1, #10
   18178:	bcs	181f0 <flatcc_json_parser_generic_json@@Base+0x12c>
   1817c:	mov	r0, r5
   18180:	mov	r1, r7
   18184:	mov	r2, r4
   18188:	bl	186a0 <flatcc_json_parser_float@@Base+0x1ec>
   1818c:	mov	r7, r0
   18190:	cmp	r6, #0
   18194:	cmpne	r7, r4
   18198:	beq	18350 <flatcc_json_parser_generic_json@@Base+0x28c>
   1819c:	ldrb	r0, [r8, r6]
   181a0:	cmp	r0, #93	; 0x5d
   181a4:	bne	181c0 <flatcc_json_parser_generic_json@@Base+0xfc>
   181a8:	mov	r0, r5
   181ac:	mov	r1, r7
   181b0:	mov	r2, r4
   181b4:	mov	r3, r9
   181b8:	bl	18904 <flatcc_json_parser_float@@Base+0x450>
   181bc:	b	181d4 <flatcc_json_parser_generic_json@@Base+0x110>
   181c0:	mov	r0, r5
   181c4:	mov	r1, r7
   181c8:	mov	r2, r4
   181cc:	mov	r3, r9
   181d0:	bl	189c4 <flatcc_json_parser_float@@Base+0x510>
   181d4:	mov	r7, r0
   181d8:	sub	r6, r6, #1
   181dc:	ldr	r0, [sp]
   181e0:	cmp	r0, #0
   181e4:	beq	18190 <flatcc_json_parser_generic_json@@Base+0xcc>
   181e8:	add	r6, r6, #1
   181ec:	b	1831c <flatcc_json_parser_generic_json@@Base+0x258>
   181f0:	cmp	r0, #90	; 0x5a
   181f4:	bgt	1820c <flatcc_json_parser_generic_json@@Base+0x148>
   181f8:	cmp	r0, #34	; 0x22
   181fc:	beq	1825c <flatcc_json_parser_generic_json@@Base+0x198>
   18200:	cmp	r0, #45	; 0x2d
   18204:	beq	1817c <flatcc_json_parser_generic_json@@Base+0xb8>
   18208:	b	1832c <flatcc_json_parser_generic_json@@Base+0x268>
   1820c:	cmp	r0, #91	; 0x5b
   18210:	beq	182e0 <flatcc_json_parser_generic_json@@Base+0x21c>
   18214:	cmp	r0, #123	; 0x7b
   18218:	bne	1832c <flatcc_json_parser_generic_json@@Base+0x268>
   1821c:	cmp	r6, #512	; 0x200
   18220:	beq	183b8 <flatcc_json_parser_generic_json@@Base+0x2f4>
   18224:	mov	r0, #125	; 0x7d
   18228:	strb	r0, [sl, r6]
   1822c:	add	r1, r7, #1
   18230:	mov	r0, r5
   18234:	mov	r2, r4
   18238:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   1823c:	mov	r7, r0
   18240:	add	r6, r6, #1
   18244:	cmp	r0, r4
   18248:	beq	1831c <flatcc_json_parser_generic_json@@Base+0x258>
   1824c:	ldrb	r0, [r7]
   18250:	cmp	r0, #125	; 0x7d
   18254:	beq	18190 <flatcc_json_parser_generic_json@@Base+0xcc>
   18258:	b	1831c <flatcc_json_parser_generic_json@@Base+0x258>
   1825c:	mov	r0, r5
   18260:	mov	r1, r7
   18264:	mov	r2, r4
   18268:	bl	18648 <flatcc_json_parser_float@@Base+0x194>
   1826c:	mov	r1, r0
   18270:	cmp	r0, r4
   18274:	beq	182cc <flatcc_json_parser_generic_json@@Base+0x208>
   18278:	add	r7, sp, #4
   1827c:	b	1829c <flatcc_json_parser_generic_json@@Base+0x1d8>
   18280:	mov	r0, r5
   18284:	mov	r2, r4
   18288:	mov	r3, r7
   1828c:	bl	17914 <flatcc_json_parser_string_escape@@Base>
   18290:	mov	r1, r0
   18294:	cmp	r0, r4
   18298:	beq	182cc <flatcc_json_parser_generic_json@@Base+0x208>
   1829c:	ldrb	r0, [r1]
   182a0:	cmp	r0, #34	; 0x22
   182a4:	beq	182cc <flatcc_json_parser_generic_json@@Base+0x208>
   182a8:	mov	r0, r5
   182ac:	mov	r2, r4
   182b0:	bl	177a8 <flatcc_json_parser_string_part@@Base>
   182b4:	mov	r1, r0
   182b8:	cmp	r0, r4
   182bc:	beq	18280 <flatcc_json_parser_generic_json@@Base+0x1bc>
   182c0:	ldrb	r0, [r1]
   182c4:	cmp	r0, #34	; 0x22
   182c8:	bne	18280 <flatcc_json_parser_generic_json@@Base+0x1bc>
   182cc:	mov	r0, r5
   182d0:	mov	r2, r4
   182d4:	bl	18674 <flatcc_json_parser_float@@Base+0x1c0>
   182d8:	mov	r7, r0
   182dc:	b	18190 <flatcc_json_parser_generic_json@@Base+0xcc>
   182e0:	cmp	r6, #512	; 0x200
   182e4:	beq	183b8 <flatcc_json_parser_generic_json@@Base+0x2f4>
   182e8:	mov	r0, #93	; 0x5d
   182ec:	strb	r0, [sl, r6]
   182f0:	add	r1, r7, #1
   182f4:	mov	r0, r5
   182f8:	mov	r2, r4
   182fc:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18300:	mov	r7, r0
   18304:	add	r6, r6, #1
   18308:	cmp	r0, r4
   1830c:	beq	1831c <flatcc_json_parser_generic_json@@Base+0x258>
   18310:	ldrb	r0, [r7]
   18314:	cmp	r0, #93	; 0x5d
   18318:	beq	18190 <flatcc_json_parser_generic_json@@Base+0xcc>
   1831c:	add	r0, sl, r6
   18320:	cmp	r7, r4
   18324:	bne	180fc <flatcc_json_parser_generic_json@@Base+0x38>
   18328:	b	1838c <flatcc_json_parser_generic_json@@Base+0x2c8>
   1832c:	mov	r0, r5
   18330:	mov	r1, r7
   18334:	mov	r2, r4
   18338:	bl	17cf8 <flatcc_json_parser_skip_constant@@Base>
   1833c:	mov	r1, r0
   18340:	cmp	r7, r0
   18344:	beq	183cc <flatcc_json_parser_generic_json@@Base+0x308>
   18348:	mov	r7, r1
   1834c:	b	18190 <flatcc_json_parser_generic_json@@Base+0xcc>
   18350:	cmp	r7, r4
   18354:	bne	1838c <flatcc_json_parser_generic_json@@Base+0x2c8>
   18358:	cmp	r6, #0
   1835c:	beq	1838c <flatcc_json_parser_generic_json@@Base+0x2c8>
   18360:	add	r0, sp, #8
   18364:	add	r0, r0, r6
   18368:	ldrb	r0, [r0, #-1]
   1836c:	mov	r3, #10
   18370:	cmp	r0, #93	; 0x5d
   18374:	movweq	r3, #9
   18378:	mov	r0, r5
   1837c:	mov	r1, r7
   18380:	mov	r2, r4
   18384:	bl	17770 <flatcc_json_parser_set_error@@Base>
   18388:	mov	r7, r0
   1838c:	mov	r0, r7
   18390:	sub	sp, fp, #28
   18394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18398:	mov	r0, r5
   1839c:	mov	r2, r4
   183a0:	mov	r3, #10
   183a4:	b	18384 <flatcc_json_parser_generic_json@@Base+0x2c0>
   183a8:	mov	r0, r5
   183ac:	mov	r2, r4
   183b0:	mov	r3, #4
   183b4:	b	18384 <flatcc_json_parser_generic_json@@Base+0x2c0>
   183b8:	mov	r0, r5
   183bc:	mov	r1, r7
   183c0:	mov	r2, r4
   183c4:	mov	r3, #2
   183c8:	b	18384 <flatcc_json_parser_generic_json@@Base+0x2c0>
   183cc:	mov	r0, r5
   183d0:	mov	r2, r4
   183d4:	mov	r3, #5
   183d8:	b	18384 <flatcc_json_parser_generic_json@@Base+0x2c0>

000183dc <flatcc_json_parser_double@@Base>:
   183dc:	push	{r4, r5, r6, r7, fp, lr}
   183e0:	add	fp, sp, #16
   183e4:	mov	r5, r1
   183e8:	mov	r6, r0
   183ec:	mov	r0, #0
   183f0:	str	r0, [r3]
   183f4:	str	r0, [r3, #4]
   183f8:	cmp	r1, r2
   183fc:	beq	18490 <flatcc_json_parser_double@@Base+0xb4>
   18400:	mov	r7, r3
   18404:	mov	r4, r2
   18408:	mov	r0, r5
   1840c:	ldrb	r1, [r0], #1
   18410:	cmp	r1, #45	; 0x2d
   18414:	movne	r0, r5
   18418:	sub	r2, r2, r0
   1841c:	cmp	r2, #2
   18420:	blt	18450 <flatcc_json_parser_double@@Base+0x74>
   18424:	sub	r1, r1, #45	; 0x2d
   18428:	clz	r1, r1
   1842c:	lsr	r1, r1, #5
   18430:	ldrb	r1, [r5, r1]
   18434:	cmp	r1, #46	; 0x2e
   18438:	beq	18498 <flatcc_json_parser_double@@Base+0xbc>
   1843c:	cmp	r1, #48	; 0x30
   18440:	bne	18450 <flatcc_json_parser_double@@Base+0x74>
   18444:	ldrb	r0, [r0, #1]
   18448:	cmp	r0, #48	; 0x30
   1844c:	beq	18498 <flatcc_json_parser_double@@Base+0xbc>
   18450:	sub	r1, r4, r5
   18454:	mov	r0, r5
   18458:	mov	r2, r7
   1845c:	bl	184b0 <flatcc_json_parser_double@@Base+0xd4>
   18460:	cmp	r0, #0
   18464:	cmpne	r0, r5
   18468:	bne	184ac <flatcc_json_parser_double@@Base+0xd0>
   1846c:	vldr	d0, [r7]
   18470:	bl	12918 <__isinf@plt>
   18474:	cmp	r0, #0
   18478:	beq	18498 <flatcc_json_parser_double@@Base+0xbc>
   1847c:	mov	r0, r6
   18480:	mov	r1, r5
   18484:	mov	r2, r4
   18488:	mov	r3, #7
   1848c:	b	184a8 <flatcc_json_parser_double@@Base+0xcc>
   18490:	mov	r0, r5
   18494:	pop	{r4, r5, r6, r7, fp, pc}
   18498:	mov	r0, r6
   1849c:	mov	r1, r5
   184a0:	mov	r2, r4
   184a4:	mov	r3, #6
   184a8:	bl	17770 <flatcc_json_parser_set_error@@Base>
   184ac:	pop	{r4, r5, r6, r7, fp, pc}
   184b0:	b	19de8 <flatcc_json_parser_struct_as_root@@Base+0xbc>

000184b4 <flatcc_json_parser_float@@Base>:
   184b4:	push	{r4, r5, r6, r7, fp, lr}
   184b8:	add	fp, sp, #16
   184bc:	mov	r5, r1
   184c0:	mov	r6, r0
   184c4:	mov	r0, #0
   184c8:	str	r0, [r3]
   184cc:	cmp	r1, r2
   184d0:	beq	18564 <flatcc_json_parser_float@@Base+0xb0>
   184d4:	mov	r7, r3
   184d8:	mov	r4, r2
   184dc:	mov	r0, r5
   184e0:	ldrb	r1, [r0], #1
   184e4:	cmp	r1, #45	; 0x2d
   184e8:	movne	r0, r5
   184ec:	sub	r2, r2, r0
   184f0:	cmp	r2, #2
   184f4:	blt	18524 <flatcc_json_parser_float@@Base+0x70>
   184f8:	sub	r1, r1, #45	; 0x2d
   184fc:	clz	r1, r1
   18500:	lsr	r1, r1, #5
   18504:	ldrb	r1, [r5, r1]
   18508:	cmp	r1, #46	; 0x2e
   1850c:	beq	1856c <flatcc_json_parser_float@@Base+0xb8>
   18510:	cmp	r1, #48	; 0x30
   18514:	bne	18524 <flatcc_json_parser_float@@Base+0x70>
   18518:	ldrb	r0, [r0, #1]
   1851c:	cmp	r0, #48	; 0x30
   18520:	beq	1856c <flatcc_json_parser_float@@Base+0xb8>
   18524:	sub	r1, r4, r5
   18528:	mov	r0, r5
   1852c:	mov	r2, r7
   18530:	bl	18584 <flatcc_json_parser_float@@Base+0xd0>
   18534:	cmp	r0, #0
   18538:	cmpne	r0, r5
   1853c:	bne	18580 <flatcc_json_parser_float@@Base+0xcc>
   18540:	vldr	s0, [r7]
   18544:	bl	1290c <__isinff@plt>
   18548:	cmp	r0, #0
   1854c:	beq	1856c <flatcc_json_parser_float@@Base+0xb8>
   18550:	mov	r0, r6
   18554:	mov	r1, r5
   18558:	mov	r2, r4
   1855c:	mov	r3, #7
   18560:	b	1857c <flatcc_json_parser_float@@Base+0xc8>
   18564:	mov	r0, r5
   18568:	pop	{r4, r5, r6, r7, fp, pc}
   1856c:	mov	r0, r6
   18570:	mov	r1, r5
   18574:	mov	r2, r4
   18578:	mov	r3, #6
   1857c:	bl	17770 <flatcc_json_parser_set_error@@Base>
   18580:	pop	{r4, r5, r6, r7, fp, pc}
   18584:	push	{r4, r5, r6, sl, fp, lr}
   18588:	add	fp, sp, #16
   1858c:	vpush	{d8-d9}
   18590:	sub	sp, sp, #8
   18594:	mov	r4, r2
   18598:	mov	r5, r0
   1859c:	mov	r2, sp
   185a0:	bl	184b0 <flatcc_json_parser_double@@Base+0xd4>
   185a4:	mov	r6, r0
   185a8:	vldr	d16, [sp]
   185ac:	add	r0, pc, #56	; 0x38
   185b0:	vcmpe.f64	d16, #0.0
   185b4:	vmrs	APSR_nzcv, fpscr
   185b8:	addmi	r0, r0, #4
   185bc:	vcvt.f32.f64	s16, d16
   185c0:	vldr	s18, [r0]
   185c4:	vmov.f32	s0, s16
   185c8:	bl	1290c <__isinff@plt>
   185cc:	cmp	r0, #0
   185d0:	vseleq.f32	s0, s16, s18
   185d4:	vstr	s0, [r4]
   185d8:	movne	r6, r5
   185dc:	mov	r0, r6
   185e0:	sub	sp, fp, #32
   185e4:	vpop	{d8-d9}
   185e8:	pop	{r4, r5, r6, sl, fp, pc}
   185ec:	svcvc	0x00800000
   185f0:			; <UNDEFINED> instruction: 0xff800000
   185f4:	push	{fp, lr}
   185f8:	mov	fp, sp
   185fc:	cmp	r1, r2
   18600:	beq	18640 <flatcc_json_parser_float@@Base+0x18c>
   18604:	ldrb	r3, [r1]
   18608:	cmp	r3, #46	; 0x2e
   1860c:	beq	1862c <flatcc_json_parser_float@@Base+0x178>
   18610:	cmp	r3, #34	; 0x22
   18614:	bne	18638 <flatcc_json_parser_float@@Base+0x184>
   18618:	mov	r2, #0
   1861c:	str	r2, [r0, #12]
   18620:	add	r1, r1, #1
   18624:	mov	r0, r1
   18628:	pop	{fp, pc}
   1862c:	mov	r3, #5
   18630:	bl	17770 <flatcc_json_parser_set_error@@Base>
   18634:	pop	{fp, pc}
   18638:	mov	r2, #1
   1863c:	str	r2, [r0, #12]
   18640:	mov	r0, r1
   18644:	pop	{fp, pc}
   18648:	push	{fp, lr}
   1864c:	mov	fp, sp
   18650:	cmp	r1, r2
   18654:	beq	18668 <flatcc_json_parser_float@@Base+0x1b4>
   18658:	ldrb	r3, [r1]
   1865c:	cmp	r3, #34	; 0x22
   18660:	addeq	r0, r1, #1
   18664:	popeq	{fp, pc}
   18668:	mov	r3, #16
   1866c:	bl	17770 <flatcc_json_parser_set_error@@Base>
   18670:	pop	{fp, pc}
   18674:	push	{fp, lr}
   18678:	mov	fp, sp
   1867c:	cmp	r1, r2
   18680:	beq	18694 <flatcc_json_parser_float@@Base+0x1e0>
   18684:	ldrb	r3, [r1]
   18688:	cmp	r3, #34	; 0x22
   1868c:	addeq	r0, r1, #1
   18690:	popeq	{fp, pc}
   18694:	mov	r3, #20
   18698:	bl	17770 <flatcc_json_parser_set_error@@Base>
   1869c:	pop	{fp, pc}
   186a0:	push	{fp, lr}
   186a4:	mov	fp, sp
   186a8:	mov	lr, r1
   186ac:	cmp	r1, r2
   186b0:	beq	188d8 <flatcc_json_parser_float@@Base+0x424>
   186b4:	ldrb	r1, [lr]
   186b8:	cmp	r1, #45	; 0x2d
   186bc:	bne	186d0 <flatcc_json_parser_float@@Base+0x21c>
   186c0:	add	lr, lr, #1
   186c4:	cmp	lr, r2
   186c8:	beq	188ec <flatcc_json_parser_float@@Base+0x438>
   186cc:	ldrb	r1, [lr]
   186d0:	cmp	r1, #48	; 0x30
   186d4:	bne	186e8 <flatcc_json_parser_float@@Base+0x234>
   186d8:	add	lr, lr, #1
   186dc:	cmp	lr, r2
   186e0:	bne	18728 <flatcc_json_parser_float@@Base+0x274>
   186e4:	b	18778 <flatcc_json_parser_float@@Base+0x2c4>
   186e8:	sub	r1, r1, #49	; 0x31
   186ec:	uxtb	r1, r1
   186f0:	cmp	r1, #8
   186f4:	bhi	188ec <flatcc_json_parser_float@@Base+0x438>
   186f8:	add	r1, lr, #1
   186fc:	mov	lr, r1
   18700:	cmp	r2, r1
   18704:	beq	18720 <flatcc_json_parser_float@@Base+0x26c>
   18708:	mov	r1, lr
   1870c:	ldrb	r3, [r1], #1
   18710:	sub	r3, r3, #48	; 0x30
   18714:	uxtb	r3, r3
   18718:	cmp	r3, #10
   1871c:	bcc	186fc <flatcc_json_parser_float@@Base+0x248>
   18720:	cmp	lr, r2
   18724:	beq	18778 <flatcc_json_parser_float@@Base+0x2c4>
   18728:	ldrb	r1, [lr]
   1872c:	cmp	r1, #46	; 0x2e
   18730:	bne	18778 <flatcc_json_parser_float@@Base+0x2c4>
   18734:	mov	r1, lr
   18738:	ldrb	r3, [r1, #1]!
   1873c:	sub	r3, r3, #48	; 0x30
   18740:	uxtb	r3, r3
   18744:	cmp	r3, #10
   18748:	bcs	188f0 <flatcc_json_parser_float@@Base+0x43c>
   1874c:	add	lr, lr, #2
   18750:	cmp	lr, r2
   18754:	beq	18778 <flatcc_json_parser_float@@Base+0x2c4>
   18758:	ldrb	r1, [lr]
   1875c:	sub	r1, r1, #48	; 0x30
   18760:	uxtb	r1, r1
   18764:	cmp	r1, #9
   18768:	bhi	18778 <flatcc_json_parser_float@@Base+0x2c4>
   1876c:	add	lr, lr, #1
   18770:	cmp	r2, lr
   18774:	bne	18758 <flatcc_json_parser_float@@Base+0x2a4>
   18778:	cmp	lr, r2
   1877c:	beq	187f0 <flatcc_json_parser_float@@Base+0x33c>
   18780:	ldrb	r1, [lr]
   18784:	orr	r1, r1, #32
   18788:	cmp	r1, #101	; 0x65
   1878c:	bne	187f0 <flatcc_json_parser_float@@Base+0x33c>
   18790:	add	r1, lr, #1
   18794:	cmp	r1, r2
   18798:	beq	188f0 <flatcc_json_parser_float@@Base+0x43c>
   1879c:	ldrb	ip, [r1]
   187a0:	cmp	ip, #45	; 0x2d
   187a4:	cmpne	ip, #43	; 0x2b
   187a8:	addeq	r1, lr, #2
   187ac:	cmp	r1, r2
   187b0:	beq	188f0 <flatcc_json_parser_float@@Base+0x43c>
   187b4:	ldrb	r3, [r1]
   187b8:	sub	r3, r3, #48	; 0x30
   187bc:	uxtb	r3, r3
   187c0:	cmp	r3, #9
   187c4:	bhi	188f0 <flatcc_json_parser_float@@Base+0x43c>
   187c8:	add	r1, r1, #1
   187cc:	mov	lr, r1
   187d0:	cmp	r2, r1
   187d4:	beq	187f0 <flatcc_json_parser_float@@Base+0x33c>
   187d8:	mov	r1, lr
   187dc:	ldrb	r3, [r1], #1
   187e0:	sub	r3, r3, #48	; 0x30
   187e4:	uxtb	r3, r3
   187e8:	cmp	r3, #10
   187ec:	bcc	187cc <flatcc_json_parser_float@@Base+0x318>
   187f0:	cmp	lr, r2
   187f4:	beq	188ec <flatcc_json_parser_float@@Base+0x438>
   187f8:	ldrb	ip, [lr]
   187fc:	sub	r1, ip, #9
   18800:	cmp	r1, #49	; 0x31
   18804:	bhi	188e0 <flatcc_json_parser_float@@Base+0x42c>
   18808:	add	r3, pc, #0
   1880c:	ldr	pc, [r3, r1, lsl #2]
   18810:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18814:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18818:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1881c:	andeq	r8, r1, ip, ror #17
   18820:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18824:	andeq	r8, r1, ip, ror #17
   18828:	andeq	r8, r1, ip, ror #17
   1882c:	andeq	r8, r1, ip, ror #17
   18830:	andeq	r8, r1, ip, ror #17
   18834:	andeq	r8, r1, ip, ror #17
   18838:	andeq	r8, r1, ip, ror #17
   1883c:	andeq	r8, r1, ip, ror #17
   18840:	andeq	r8, r1, ip, ror #17
   18844:	andeq	r8, r1, ip, ror #17
   18848:	andeq	r8, r1, ip, ror #17
   1884c:	andeq	r8, r1, ip, ror #17
   18850:	andeq	r8, r1, ip, ror #17
   18854:	andeq	r8, r1, ip, ror #17
   18858:	andeq	r8, r1, ip, ror #17
   1885c:	andeq	r8, r1, ip, ror #17
   18860:	andeq	r8, r1, ip, ror #17
   18864:	andeq	r8, r1, ip, ror #17
   18868:	andeq	r8, r1, ip, ror #17
   1886c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18870:	andeq	r8, r1, ip, ror #17
   18874:	andeq	r8, r1, ip, ror #17
   18878:	andeq	r8, r1, ip, ror #17
   1887c:	andeq	r8, r1, ip, ror #17
   18880:	andeq	r8, r1, ip, ror #17
   18884:	andeq	r8, r1, ip, ror #17
   18888:	andeq	r8, r1, ip, ror #17
   1888c:	andeq	r8, r1, ip, ror #17
   18890:	andeq	r8, r1, ip, ror #17
   18894:	andeq	r8, r1, ip, ror #17
   18898:	andeq	r8, r1, ip, ror #17
   1889c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188a0:	andeq	r8, r1, ip, ror #17
   188a4:	andeq	r8, r1, ip, ror #17
   188a8:	andeq	r8, r1, ip, ror #17
   188ac:	andeq	r8, r1, ip, ror #17
   188b0:	andeq	r8, r1, ip, ror #17
   188b4:	andeq	r8, r1, ip, ror #17
   188b8:	andeq	r8, r1, ip, ror #17
   188bc:	andeq	r8, r1, ip, ror #17
   188c0:	andeq	r8, r1, ip, ror #17
   188c4:	andeq	r8, r1, ip, ror #17
   188c8:	andeq	r8, r1, ip, ror #17
   188cc:	andeq	r8, r1, ip, ror #17
   188d0:	andeq	r8, r1, ip, ror #17
   188d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188d8:	mov	r0, lr
   188dc:	pop	{fp, pc}
   188e0:	cmp	ip, #93	; 0x5d
   188e4:	cmpne	ip, #125	; 0x7d
   188e8:	beq	188d8 <flatcc_json_parser_float@@Base+0x424>
   188ec:	mov	r1, lr
   188f0:	mov	r3, #6
   188f4:	bl	17770 <flatcc_json_parser_set_error@@Base>
   188f8:	mov	lr, r0
   188fc:	mov	r0, lr
   18900:	pop	{fp, pc}
   18904:	push	{r4, r5, r6, sl, fp, lr}
   18908:	add	fp, sp, #16
   1890c:	mov	r6, r3
   18910:	mov	r4, r2
   18914:	mov	r5, r0
   18918:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   1891c:	mov	r1, r0
   18920:	cmp	r0, r4
   18924:	beq	18968 <flatcc_json_parser_float@@Base+0x4b4>
   18928:	ldrb	r0, [r1]
   1892c:	cmp	r0, #44	; 0x2c
   18930:	bne	18970 <flatcc_json_parser_float@@Base+0x4bc>
   18934:	add	r1, r1, #1
   18938:	mov	r0, r5
   1893c:	mov	r2, r4
   18940:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18944:	mov	r1, r0
   18948:	cmp	r0, r4
   1894c:	beq	18998 <flatcc_json_parser_float@@Base+0x4e4>
   18950:	ldrb	r0, [r1]
   18954:	cmp	r0, #93	; 0x5d
   18958:	bne	189b4 <flatcc_json_parser_float@@Base+0x500>
   1895c:	mov	r0, #0
   18960:	str	r0, [r6]
   18964:	b	18984 <flatcc_json_parser_float@@Base+0x4d0>
   18968:	mov	r0, #0
   1896c:	b	189b8 <flatcc_json_parser_float@@Base+0x504>
   18970:	mov	r0, #0
   18974:	str	r0, [r6]
   18978:	ldrb	r0, [r1]
   1897c:	cmp	r0, #93	; 0x5d
   18980:	bne	189a0 <flatcc_json_parser_float@@Base+0x4ec>
   18984:	add	r1, r1, #1
   18988:	mov	r0, r5
   1898c:	mov	r2, r4
   18990:	pop	{r4, r5, r6, sl, fp, lr}
   18994:	b	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18998:	mov	r0, #0
   1899c:	str	r0, [r6]
   189a0:	mov	r0, r5
   189a4:	mov	r2, r4
   189a8:	mov	r3, #9
   189ac:	bl	17770 <flatcc_json_parser_set_error@@Base>
   189b0:	pop	{r4, r5, r6, sl, fp, pc}
   189b4:	mov	r0, #1
   189b8:	str	r0, [r6]
   189bc:	mov	r0, r1
   189c0:	pop	{r4, r5, r6, sl, fp, pc}
   189c4:	push	{r4, r5, r6, sl, fp, lr}
   189c8:	add	fp, sp, #16
   189cc:	mov	r6, r3
   189d0:	mov	r4, r2
   189d4:	mov	r5, r0
   189d8:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   189dc:	mov	r1, r0
   189e0:	cmp	r0, r4
   189e4:	beq	18a28 <flatcc_json_parser_float@@Base+0x574>
   189e8:	ldrb	r0, [r1]
   189ec:	cmp	r0, #44	; 0x2c
   189f0:	bne	18a30 <flatcc_json_parser_float@@Base+0x57c>
   189f4:	add	r1, r1, #1
   189f8:	mov	r0, r5
   189fc:	mov	r2, r4
   18a00:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18a04:	mov	r1, r0
   18a08:	cmp	r0, r4
   18a0c:	beq	18a58 <flatcc_json_parser_float@@Base+0x5a4>
   18a10:	ldrb	r0, [r1]
   18a14:	cmp	r0, #125	; 0x7d
   18a18:	bne	18a74 <flatcc_json_parser_float@@Base+0x5c0>
   18a1c:	mov	r0, #0
   18a20:	str	r0, [r6]
   18a24:	b	18a44 <flatcc_json_parser_float@@Base+0x590>
   18a28:	mov	r0, #0
   18a2c:	b	18a78 <flatcc_json_parser_float@@Base+0x5c4>
   18a30:	mov	r0, #0
   18a34:	str	r0, [r6]
   18a38:	ldrb	r0, [r1]
   18a3c:	cmp	r0, #125	; 0x7d
   18a40:	bne	18a60 <flatcc_json_parser_float@@Base+0x5ac>
   18a44:	add	r1, r1, #1
   18a48:	mov	r0, r5
   18a4c:	mov	r2, r4
   18a50:	pop	{r4, r5, r6, sl, fp, lr}
   18a54:	b	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18a58:	mov	r0, #0
   18a5c:	str	r0, [r6]
   18a60:	mov	r0, r5
   18a64:	mov	r2, r4
   18a68:	mov	r3, #10
   18a6c:	bl	17770 <flatcc_json_parser_set_error@@Base>
   18a70:	pop	{r4, r5, r6, sl, fp, pc}
   18a74:	mov	r0, #1
   18a78:	str	r0, [r6]
   18a7c:	mov	r0, r1
   18a80:	pop	{r4, r5, r6, sl, fp, pc}

00018a84 <flatcc_json_parser_integer@@Base>:
   18a84:	push	{r4, r5, r6, r7, fp, lr}
   18a88:	add	fp, sp, #16
   18a8c:	cmp	r1, r2
   18a90:	beq	18b44 <flatcc_json_parser_integer@@Base+0xc0>
   18a94:	ldrb	r7, [r1]
   18a98:	sub	r7, r7, #45	; 0x2d
   18a9c:	clz	r7, r7
   18aa0:	lsr	r7, r7, #5
   18aa4:	str	r7, [r3]
   18aa8:	add	ip, r1, r7
   18aac:	mov	r4, #0
   18ab0:	cmp	ip, r2
   18ab4:	beq	18b4c <flatcc_json_parser_integer@@Base+0xc8>
   18ab8:	mov	lr, #10
   18abc:	mov	r5, #0
   18ac0:	ldrb	r6, [ip]
   18ac4:	sub	r7, r6, #48	; 0x30
   18ac8:	uxtb	r7, r7
   18acc:	cmp	r7, #9
   18ad0:	bhi	18b64 <flatcc_json_parser_integer@@Base+0xe0>
   18ad4:	add	r7, r5, r5, lsl #2
   18ad8:	lsl	r7, r7, #1
   18adc:	umlal	r6, r7, r4, lr
   18ae0:	subs	r6, r6, #48	; 0x30
   18ae4:	sbc	r7, r7, #0
   18ae8:	subs	r4, r6, r4
   18aec:	sbcs	r4, r7, r5
   18af0:	bcc	18b74 <flatcc_json_parser_integer@@Base+0xf0>
   18af4:	add	ip, ip, #1
   18af8:	cmp	r2, ip
   18afc:	mov	r4, r6
   18b00:	mov	r5, r7
   18b04:	bne	18ac0 <flatcc_json_parser_integer@@Base+0x3c>
   18b08:	mov	r3, #0
   18b0c:	mov	r4, r6
   18b10:	mov	r5, r7
   18b14:	cmp	ip, r1
   18b18:	beq	18b5c <flatcc_json_parser_integer@@Base+0xd8>
   18b1c:	cmp	r3, #0
   18b20:	beq	18b98 <flatcc_json_parser_integer@@Base+0x114>
   18b24:	ldrb	r1, [ip]
   18b28:	cmp	r1, #46	; 0x2e
   18b2c:	cmpne	r1, #101	; 0x65
   18b30:	bne	18b90 <flatcc_json_parser_integer@@Base+0x10c>
   18b34:	mov	r1, ip
   18b38:	mov	r3, #12
   18b3c:	bl	17770 <flatcc_json_parser_set_error@@Base>
   18b40:	pop	{r4, r5, r6, r7, fp, pc}
   18b44:	mov	r0, r1
   18b48:	pop	{r4, r5, r6, r7, fp, pc}
   18b4c:	mov	r5, #0
   18b50:	mov	r3, #0
   18b54:	cmp	ip, r1
   18b58:	bne	18b1c <flatcc_json_parser_integer@@Base+0x98>
   18b5c:	mov	r0, ip
   18b60:	pop	{r4, r5, r6, r7, fp, pc}
   18b64:	mov	r3, #1
   18b68:	cmp	ip, r1
   18b6c:	bne	18b1c <flatcc_json_parser_integer@@Base+0x98>
   18b70:	b	18b5c <flatcc_json_parser_integer@@Base+0xd8>
   18b74:	mov	lr, #8
   18b78:	cmp	r3, #0
   18b7c:	movweq	lr, #7
   18b80:	mov	r1, ip
   18b84:	mov	r3, lr
   18b88:	bl	17770 <flatcc_json_parser_set_error@@Base>
   18b8c:	pop	{r4, r5, r6, r7, fp, pc}
   18b90:	cmp	r1, #69	; 0x45
   18b94:	beq	18b34 <flatcc_json_parser_integer@@Base+0xb0>
   18b98:	ldr	r0, [fp, #8]
   18b9c:	strd	r4, [r0]
   18ba0:	mov	r0, ip
   18ba4:	pop	{r4, r5, r6, r7, fp, pc}

00018ba8 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   18ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bac:	add	fp, sp, #28
   18bb0:	sub	sp, sp, #20
   18bb4:	mov	r8, r3
   18bb8:	mov	r4, r2
   18bbc:	mov	r5, r0
   18bc0:	bl	18648 <flatcc_json_parser_float@@Base+0x194>
   18bc4:	mov	r6, r0
   18bc8:	mov	r0, r5
   18bcc:	mov	r1, r6
   18bd0:	mov	r2, r4
   18bd4:	bl	177a8 <flatcc_json_parser_string_part@@Base>
   18bd8:	mov	r7, r0
   18bdc:	ldr	sl, [fp, #8]
   18be0:	cmp	sl, #0
   18be4:	mov	r9, sl
   18be8:	movwne	r9, #1
   18bec:	cmp	r0, r4
   18bf0:	beq	18ce8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   18bf4:	ldrb	r0, [r7]
   18bf8:	cmp	r0, #34	; 0x22
   18bfc:	bne	18ce8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   18c00:	sub	r0, r7, r6
   18c04:	str	r0, [sp, #4]
   18c08:	bl	18d14 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   18c0c:	str	r0, [sp, #8]
   18c10:	ldr	r0, [r5]
   18c14:	mov	r1, #1
   18c18:	mov	r2, #1
   18c1c:	mvn	r3, #0
   18c20:	bl	14cdc <flatcc_builder_start_vector@@Base>
   18c24:	cmp	r0, #0
   18c28:	beq	18c48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   18c2c:	mov	r0, #0
   18c30:	str	r0, [r8]
   18c34:	mov	r0, r5
   18c38:	mov	r1, r7
   18c3c:	mov	r2, r4
   18c40:	mov	r3, #33	; 0x21
   18c44:	b	18d08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   18c48:	ldr	r0, [r5]
   18c4c:	ldr	r1, [sp, #8]
   18c50:	bl	146f0 <flatcc_builder_extend_vector@@Base>
   18c54:	cmp	r0, #0
   18c58:	beq	18c2c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   18c5c:	ldr	r1, [sp, #8]
   18c60:	str	r1, [sp, #16]
   18c64:	ldr	r1, [sp, #4]
   18c68:	str	r1, [sp, #12]
   18c6c:	str	r9, [sp]
   18c70:	add	r2, sp, #16
   18c74:	add	r3, sp, #12
   18c78:	mov	r1, r6
   18c7c:	bl	18d40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   18c80:	ldr	r1, [sp, #12]
   18c84:	cmp	r0, #0
   18c88:	bne	18ce4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   18c8c:	ldmib	sp, {r0, r2}
   18c90:	cmp	r1, r0
   18c94:	bne	18ce4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   18c98:	ldr	r0, [sp, #16]
   18c9c:	cmp	r2, r0
   18ca0:	bls	18cb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x110>
   18ca4:	sub	r1, r2, r0
   18ca8:	ldr	r0, [r5]
   18cac:	bl	14b3c <flatcc_builder_truncate_vector@@Base>
   18cb0:	cmp	r0, #0
   18cb4:	bne	18c2c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   18cb8:	ldr	r0, [r5]
   18cbc:	bl	15914 <flatcc_builder_end_vector@@Base>
   18cc0:	str	r0, [r8]
   18cc4:	cmp	r0, #0
   18cc8:	beq	18c2c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   18ccc:	mov	r0, r5
   18cd0:	mov	r1, r7
   18cd4:	mov	r2, r4
   18cd8:	bl	18674 <flatcc_json_parser_float@@Base+0x1c0>
   18cdc:	sub	sp, fp, #28
   18ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ce4:	add	r7, r6, r1
   18ce8:	mov	r0, #0
   18cec:	str	r0, [r8]
   18cf0:	mov	r3, #31
   18cf4:	cmp	sl, #0
   18cf8:	movwne	r3, #32
   18cfc:	mov	r0, r5
   18d00:	mov	r1, r7
   18d04:	mov	r2, r4
   18d08:	bl	17770 <flatcc_json_parser_set_error@@Base>
   18d0c:	sub	sp, fp, #28
   18d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d14:	and	r1, r0, #3
   18d18:	lsr	r0, r0, #2
   18d1c:	add	r0, r0, r0, lsl #1
   18d20:	cmp	r1, #2
   18d24:	beq	18d38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   18d28:	cmp	r1, #3
   18d2c:	addeq	r0, r0, #2
   18d30:	bxeq	lr
   18d34:	bx	lr
   18d38:	add	r0, r0, #1
   18d3c:	bx	lr
   18d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d44:	add	fp, sp, #28
   18d48:	sub	sp, sp, #4
   18d4c:	ldr	r7, [fp, #8]
   18d50:	cmp	r3, #0
   18d54:	beq	18d60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   18d58:	ldr	lr, [r3]
   18d5c:	b	18d64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1bc>
   18d60:	mvn	lr, #0
   18d64:	and	r5, r7, #32
   18d68:	bic	r4, r7, #224	; 0xe0
   18d6c:	cmp	r4, #1
   18d70:	beq	18d94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   18d74:	mov	ip, #3
   18d78:	cmp	r4, #0
   18d7c:	bne	18dc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   18d80:	movw	r4, #51408	; 0xc8d0
   18d84:	movt	r4, #1
   18d88:	movw	ip, #51920	; 0xcad0
   18d8c:	movt	ip, #1
   18d90:	b	18da4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1fc>
   18d94:	movw	r4, #51664	; 0xc9d0
   18d98:	movt	r4, #1
   18d9c:	movw	ip, #52176	; 0xcbd0
   18da0:	movt	ip, #1
   18da4:	cmp	r5, #0
   18da8:	moveq	ip, r4
   18dac:	cmp	r2, #0
   18db0:	beq	18dcc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   18db4:	ldr	r9, [r2]
   18db8:	cmp	r9, #0
   18dbc:	mvneq	r9, #0
   18dc0:	b	18dd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   18dc4:	mov	r8, r0
   18dc8:	b	18f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   18dcc:	mvn	r9, #0
   18dd0:	mov	r6, sp
   18dd4:	mov	r8, r0
   18dd8:	mov	r7, #0
   18ddc:	mov	r5, lr
   18de0:	cmp	r5, r7
   18de4:	bne	18e00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x258>
   18de8:	b	18e80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   18dec:	add	r7, r7, #1
   18df0:	cmp	r7, #4
   18df4:	bcs	18e2c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x284>
   18df8:	cmp	r5, r7
   18dfc:	beq	18e80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   18e00:	ldrb	r4, [r1, r7]
   18e04:	ldrb	r4, [ip, r4]
   18e08:	strb	r4, [r6, r7]
   18e0c:	cmp	r4, #64	; 0x40
   18e10:	bcc	18dec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x244>
   18e14:	cmp	r4, #65	; 0x41
   18e18:	bne	18ec8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   18e1c:	sub	r7, r7, #1
   18e20:	sub	r5, r5, #1
   18e24:	add	r1, r1, #1
   18e28:	b	18dec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x244>
   18e2c:	cmp	r9, #3
   18e30:	bcc	18f78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
   18e34:	ldrb	lr, [sp]
   18e38:	ldrb	r4, [sp, #1]
   18e3c:	lsr	r7, r4, #4
   18e40:	orr	r7, r7, lr, lsl #2
   18e44:	strb	r7, [r8]
   18e48:	ldrb	r7, [sp, #2]
   18e4c:	lsr	r7, r7, #2
   18e50:	orr	r7, r7, r4, lsl #4
   18e54:	strb	r7, [r8, #1]
   18e58:	ldrb	r7, [sp, #2]
   18e5c:	ldrb	r4, [sp, #3]
   18e60:	orr	r7, r4, r7, lsl #6
   18e64:	strb	r7, [r8, #2]
   18e68:	sub	lr, r5, #4
   18e6c:	subs	r9, r9, #3
   18e70:	add	r1, r1, #4
   18e74:	add	r8, r8, #3
   18e78:	bne	18dd8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   18e7c:	b	18f4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a4>
   18e80:	mov	r4, r7
   18e84:	cmp	r7, #0
   18e88:	beq	18f48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a0>
   18e8c:	cmp	r7, #3
   18e90:	beq	18f08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   18e94:	mov	ip, #4
   18e98:	cmp	r7, #2
   18e9c:	bne	18f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   18ea0:	ldrb	r1, [sp, #1]
   18ea4:	ands	r7, r1, #15
   18ea8:	mov	ip, #1
   18eac:	movwne	ip, #5
   18eb0:	bne	18f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   18eb4:	ldrb	r7, [sp]
   18eb8:	lsl	r7, r7, #2
   18ebc:	orr	r1, r7, r1, lsr #4
   18ec0:	strb	r1, [r8], #1
   18ec4:	b	18f48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a0>
   18ec8:	cmp	r4, #66	; 0x42
   18ecc:	mov	r4, r7
   18ed0:	bne	18e84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   18ed4:	add	r6, r7, #1
   18ed8:	mov	r4, r6
   18edc:	cmp	r6, r5
   18ee0:	bcs	18e84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   18ee4:	cmp	r4, #7
   18ee8:	ldrbls	r6, [r1, r4]
   18eec:	ldrbls	r6, [ip, r6]
   18ef0:	subls	r6, r6, #65	; 0x41
   18ef4:	uxtbls	sl, r6
   18ef8:	addls	r6, r4, #1
   18efc:	cmpls	sl, #2
   18f00:	bcc	18ed8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x330>
   18f04:	b	18e84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   18f08:	mov	ip, #5
   18f0c:	ldrb	r1, [sp, #2]
   18f10:	tst	r1, #3
   18f14:	bne	18f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   18f18:	mov	ip, #1
   18f1c:	cmp	r9, #2
   18f20:	bcc	18f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   18f24:	ldrb	ip, [sp]
   18f28:	ldrb	r6, [sp, #1]
   18f2c:	lsl	r7, r6, #4
   18f30:	orr	r1, r7, r1, lsr #2
   18f34:	strb	r1, [r8, #1]
   18f38:	lsr	r1, r6, #4
   18f3c:	orr	r1, r1, ip, lsl #2
   18f40:	strb	r1, [r8]
   18f44:	add	r8, r8, #2
   18f48:	sub	lr, r5, r4
   18f4c:	mov	ip, #0
   18f50:	cmp	r2, #0
   18f54:	subne	r0, r8, r0
   18f58:	strne	r0, [r2]
   18f5c:	cmp	r3, #0
   18f60:	ldrne	r0, [r3]
   18f64:	subne	r0, r0, lr
   18f68:	strne	r0, [r3]
   18f6c:	mov	r0, ip
   18f70:	sub	sp, fp, #28
   18f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f78:	mov	ip, #1
   18f7c:	b	18f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>

00018f80 <flatcc_json_parser_build_string@@Base>:
   18f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f84:	add	fp, sp, #28
   18f88:	sub	sp, sp, #4
   18f8c:	mov	r9, r3
   18f90:	mov	sl, r2
   18f94:	mov	r6, r0
   18f98:	bl	18648 <flatcc_json_parser_float@@Base+0x194>
   18f9c:	mov	r4, r0
   18fa0:	mov	r0, r6
   18fa4:	mov	r1, r4
   18fa8:	mov	r2, sl
   18fac:	bl	177a8 <flatcc_json_parser_string_part@@Base>
   18fb0:	mov	r5, r0
   18fb4:	cmp	r0, sl
   18fb8:	beq	18fdc <flatcc_json_parser_build_string@@Base+0x5c>
   18fbc:	ldrb	r0, [r5]
   18fc0:	cmp	r0, #34	; 0x22
   18fc4:	bne	18fdc <flatcc_json_parser_build_string@@Base+0x5c>
   18fc8:	sub	r2, r5, r4
   18fcc:	ldr	r0, [r6]
   18fd0:	mov	r1, r4
   18fd4:	bl	163f0 <flatcc_builder_create_string@@Base>
   18fd8:	b	190a8 <flatcc_json_parser_build_string@@Base+0x128>
   18fdc:	ldr	r0, [r6]
   18fe0:	bl	14e84 <flatcc_builder_start_string@@Base>
   18fe4:	cmp	r0, #0
   18fe8:	beq	18ff8 <flatcc_json_parser_build_string@@Base+0x78>
   18fec:	mov	r0, #0
   18ff0:	str	r0, [r9]
   18ff4:	b	190c0 <flatcc_json_parser_build_string@@Base+0x140>
   18ff8:	sub	r2, r5, r4
   18ffc:	ldr	r0, [r6]
   19000:	mov	r1, r4
   19004:	bl	14a3c <flatcc_builder_append_string@@Base>
   19008:	cmp	r0, #0
   1900c:	beq	18fec <flatcc_json_parser_build_string@@Base+0x6c>
   19010:	cmp	r5, sl
   19014:	beq	190a0 <flatcc_json_parser_build_string@@Base+0x120>
   19018:	mov	r8, sp
   1901c:	add	r4, r8, #1
   19020:	b	1902c <flatcc_json_parser_build_string@@Base+0xac>
   19024:	cmp	r5, sl
   19028:	beq	190a0 <flatcc_json_parser_build_string@@Base+0x120>
   1902c:	ldrb	r0, [r5]
   19030:	cmp	r0, #34	; 0x22
   19034:	beq	190a0 <flatcc_json_parser_build_string@@Base+0x120>
   19038:	mov	r0, r6
   1903c:	mov	r1, r5
   19040:	mov	r2, sl
   19044:	mov	r3, r8
   19048:	bl	17914 <flatcc_json_parser_string_escape@@Base>
   1904c:	mov	r7, r0
   19050:	ldr	r0, [r6]
   19054:	ldrb	r2, [sp]
   19058:	mov	r1, r4
   1905c:	bl	14a3c <flatcc_builder_append_string@@Base>
   19060:	cmp	r0, #0
   19064:	beq	190cc <flatcc_json_parser_build_string@@Base+0x14c>
   19068:	mov	r0, r6
   1906c:	mov	r1, r7
   19070:	mov	r2, sl
   19074:	bl	177a8 <flatcc_json_parser_string_part@@Base>
   19078:	mov	r5, r0
   1907c:	cmp	r0, sl
   19080:	beq	19024 <flatcc_json_parser_build_string@@Base+0xa4>
   19084:	sub	r2, r5, r7
   19088:	ldr	r0, [r6]
   1908c:	mov	r1, r7
   19090:	bl	14a3c <flatcc_builder_append_string@@Base>
   19094:	cmp	r0, #0
   19098:	bne	19024 <flatcc_json_parser_build_string@@Base+0xa4>
   1909c:	b	18fec <flatcc_json_parser_build_string@@Base+0x6c>
   190a0:	ldr	r0, [r6]
   190a4:	bl	16504 <flatcc_builder_end_string@@Base>
   190a8:	str	r0, [r9]
   190ac:	mov	r0, r6
   190b0:	mov	r1, r5
   190b4:	mov	r2, sl
   190b8:	bl	18674 <flatcc_json_parser_float@@Base+0x1c0>
   190bc:	mov	r5, r0
   190c0:	mov	r0, r5
   190c4:	sub	sp, fp, #28
   190c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190cc:	mov	r5, r7
   190d0:	b	18fec <flatcc_json_parser_build_string@@Base+0x6c>

000190d4 <flatcc_json_parser_prepare_unions@@Base>:
   190d4:	push	{r4, r5, r6, r7, fp, lr}
   190d8:	add	fp, sp, #16
   190dc:	mov	r5, r3
   190e0:	mov	r6, r2
   190e4:	mov	r4, r1
   190e8:	mov	r7, r0
   190ec:	add	r0, r3, r3, lsl #1
   190f0:	mov	r1, #8
   190f4:	add	r1, r1, r0, lsl #3
   190f8:	ldr	r0, [r7]
   190fc:	bl	13c90 <flatcc_builder_enter_user_frame@@Base>
   19100:	mov	r1, r0
   19104:	ldr	r0, [fp, #8]
   19108:	str	r1, [r0]
   1910c:	cmp	r1, #0
   19110:	beq	19128 <flatcc_json_parser_prepare_unions@@Base+0x54>
   19114:	ldr	r0, [r7]
   19118:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   1911c:	str	r5, [r0]
   19120:	mov	r0, r4
   19124:	pop	{r4, r5, r6, r7, fp, pc}
   19128:	mov	r0, r7
   1912c:	mov	r1, r4
   19130:	mov	r2, r6
   19134:	mov	r3, #33	; 0x21
   19138:	bl	17770 <flatcc_json_parser_set_error@@Base>
   1913c:	pop	{r4, r5, r6, r7, fp, pc}

00019140 <flatcc_json_parser_finalize_unions@@Base>:
   19140:	push	{r4, r5, r6, r7, fp, lr}
   19144:	add	fp, sp, #16
   19148:	mov	r4, r3
   1914c:	mov	r7, r2
   19150:	mov	r5, r1
   19154:	mov	r6, r0
   19158:	ldr	r0, [r0]
   1915c:	mov	r1, r3
   19160:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   19164:	ldr	r0, [r0, #4]
   19168:	cmp	r0, #0
   1916c:	beq	19188 <flatcc_json_parser_finalize_unions@@Base+0x48>
   19170:	mov	r0, r6
   19174:	mov	r1, r5
   19178:	mov	r2, r7
   1917c:	mov	r3, #27
   19180:	bl	17770 <flatcc_json_parser_set_error@@Base>
   19184:	mov	r5, r0
   19188:	ldr	r0, [r6]
   1918c:	mov	r1, r4
   19190:	bl	13d54 <flatcc_builder_exit_user_frame_at@@Base>
   19194:	mov	r0, r5
   19198:	pop	{r4, r5, r6, r7, fp, pc}

0001919c <flatcc_json_parser_union@@Base>:
   1919c:	push	{r4, r5, r6, r7, fp, lr}
   191a0:	add	fp, sp, #16
   191a4:	sub	sp, sp, #16
   191a8:	mov	r7, r3
   191ac:	mov	r4, r2
   191b0:	mov	r6, r1
   191b4:	mov	r5, r0
   191b8:	ldr	r0, [r0]
   191bc:	ldr	r1, [fp, #12]
   191c0:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   191c4:	add	r2, r0, #8
   191c8:	add	r3, r7, r7, lsl #1
   191cc:	mov	r1, r2
   191d0:	ldr	r7, [r1, r3, lsl #3]!
   191d4:	cmp	r7, #0
   191d8:	beq	19200 <flatcc_json_parser_union@@Base+0x64>
   191dc:	mov	r0, r5
   191e0:	mov	r1, r6
   191e4:	mov	r2, r4
   191e8:	mov	r3, #28
   191ec:	bl	17770 <flatcc_json_parser_set_error@@Base>
   191f0:	mov	r6, r0
   191f4:	mov	r0, r6
   191f8:	sub	sp, fp, #16
   191fc:	pop	{r4, r5, r6, r7, fp, pc}
   19200:	add	r2, r2, r3, lsl #3
   19204:	ldrb	r3, [r2, #12]
   19208:	cmp	r3, #0
   1920c:	beq	19278 <flatcc_json_parser_union@@Base+0xdc>
   19210:	ldrb	r3, [r2, #13]
   19214:	strb	r3, [sp, #8]
   19218:	cmp	r3, #0
   1921c:	beq	192ac <flatcc_json_parser_union@@Base+0x110>
   19220:	ldr	r7, [fp, #16]
   19224:	ldr	r1, [r0, #4]
   19228:	sub	r1, r1, #1
   1922c:	str	r1, [r0, #4]
   19230:	add	r0, sp, #8
   19234:	add	r0, r0, #4
   19238:	str	r0, [sp]
   1923c:	mov	r0, r5
   19240:	mov	r1, r6
   19244:	mov	r2, r4
   19248:	blx	r7
   1924c:	mov	r6, r0
   19250:	cmp	r0, r4
   19254:	beq	191f4 <flatcc_json_parser_union@@Base+0x58>
   19258:	ldr	r1, [fp, #8]
   1925c:	ldr	r0, [r5]
   19260:	ldr	r2, [sp, #8]
   19264:	ldr	r3, [sp, #12]
   19268:	bl	15bdc <flatcc_builder_table_add_union@@Base>
   1926c:	cmp	r0, #0
   19270:	bne	191dc <flatcc_json_parser_union@@Base+0x40>
   19274:	b	191f4 <flatcc_json_parser_union@@Base+0x58>
   19278:	ldr	r3, [r0, #4]
   1927c:	add	r3, r3, #1
   19280:	str	r3, [r0, #4]
   19284:	ldr	r0, [r5, #16]
   19288:	str	r0, [r2, #8]
   1928c:	ldr	r0, [r5, #4]
   19290:	str	r0, [r2, #4]
   19294:	str	r6, [r1]
   19298:	mov	r0, r5
   1929c:	mov	r1, r6
   192a0:	mov	r2, r4
   192a4:	bl	180c4 <flatcc_json_parser_generic_json@@Base>
   192a8:	b	191f0 <flatcc_json_parser_union@@Base+0x54>
   192ac:	mov	r0, r5
   192b0:	mov	r1, r6
   192b4:	mov	r2, r4
   192b8:	mov	r3, #25
   192bc:	b	191ec <flatcc_json_parser_union@@Base+0x50>

000192c0 <flatcc_json_parser_union_type@@Base>:
   192c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192c4:	add	fp, sp, #28
   192c8:	sub	sp, sp, #20
   192cc:	mov	r6, r3
   192d0:	mov	r7, r2
   192d4:	mov	r4, r1
   192d8:	mov	r5, r0
   192dc:	ldr	r0, [r0]
   192e0:	ldr	r1, [fp, #12]
   192e4:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   192e8:	mov	sl, r0
   192ec:	add	r8, r0, #8
   192f0:	add	r9, r6, r6, lsl #1
   192f4:	add	r6, r8, r9, lsl #3
   192f8:	mov	r0, r6
   192fc:	ldrb	r1, [r0, #12]!
   19300:	cmp	r1, #0
   19304:	beq	1932c <flatcc_json_parser_union_type@@Base+0x6c>
   19308:	mov	r0, r5
   1930c:	mov	r1, r4
   19310:	mov	r2, r7
   19314:	mov	r3, #28
   19318:	bl	17770 <flatcc_json_parser_set_error@@Base>
   1931c:	mov	r7, r0
   19320:	mov	r0, r7
   19324:	sub	sp, fp, #28
   19328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1932c:	mov	r1, #1
   19330:	strb	r1, [r0]
   19334:	add	r3, r6, #13
   19338:	mov	r0, r5
   1933c:	mov	r1, r4
   19340:	mov	r2, r7
   19344:	str	r3, [sp, #8]
   19348:	bl	19468 <flatcc_json_parser_union_type@@Base+0x1a8>
   1934c:	mov	r2, r7
   19350:	mov	r7, r0
   19354:	cmp	r0, r4
   19358:	str	r2, [sp, #4]
   1935c:	beq	19368 <flatcc_json_parser_union_type@@Base+0xa8>
   19360:	ldr	r4, [sp, #8]
   19364:	b	19388 <flatcc_json_parser_union_type@@Base+0xc8>
   19368:	ldr	r3, [fp, #16]
   1936c:	ldr	r0, [sp, #8]
   19370:	mov	r4, r0
   19374:	str	r0, [sp]
   19378:	mov	r0, r5
   1937c:	mov	r1, r7
   19380:	bl	194f8 <flatcc_json_parser_union_type@@Base+0x238>
   19384:	mov	r7, r0
   19388:	ldr	r1, [r8, r9, lsl #3]
   1938c:	cmp	r1, #0
   19390:	beq	1941c <flatcc_json_parser_union_type@@Base+0x15c>
   19394:	ldr	r0, [sl, #4]
   19398:	cmp	r0, #0
   1939c:	beq	19448 <flatcc_json_parser_union_type@@Base+0x188>
   193a0:	ldr	ip, [fp, #20]
   193a4:	sub	r0, r0, #1
   193a8:	str	r0, [sl, #4]
   193ac:	ldr	r0, [r6, #8]
   193b0:	ldr	r9, [r5, #4]
   193b4:	ldr	r8, [r5, #16]
   193b8:	str	r0, [r5, #16]
   193bc:	ldr	r0, [r6, #4]
   193c0:	str	r0, [r5, #4]
   193c4:	ldrb	r3, [r4]
   193c8:	strb	r3, [sp, #12]
   193cc:	add	r0, sp, #12
   193d0:	add	r0, r0, #4
   193d4:	str	r0, [sp]
   193d8:	mov	r0, r5
   193dc:	ldr	r6, [sp, #4]
   193e0:	mov	r2, r6
   193e4:	blx	ip
   193e8:	cmp	r0, r6
   193ec:	beq	19434 <flatcc_json_parser_union_type@@Base+0x174>
   193f0:	ldr	r1, [fp, #8]
   193f4:	ldr	r0, [r5]
   193f8:	ldr	r2, [sp, #12]
   193fc:	ldr	r3, [sp, #16]
   19400:	bl	15bdc <flatcc_builder_table_add_union@@Base>
   19404:	cmp	r0, #0
   19408:	beq	1943c <flatcc_json_parser_union_type@@Base+0x17c>
   1940c:	mov	r0, r5
   19410:	mov	r1, r7
   19414:	ldr	r2, [sp, #4]
   19418:	b	19314 <flatcc_json_parser_union_type@@Base+0x54>
   1941c:	ldrb	r0, [r4]
   19420:	ldr	r1, [sl, #4]
   19424:	cmp	r0, #0
   19428:	addne	r1, r1, #1
   1942c:	str	r1, [sl, #4]
   19430:	b	19320 <flatcc_json_parser_union_type@@Base+0x60>
   19434:	mov	r7, r6
   19438:	b	19320 <flatcc_json_parser_union_type@@Base+0x60>
   1943c:	str	r9, [r5, #4]
   19440:	str	r8, [r5, #16]
   19444:	b	19320 <flatcc_json_parser_union_type@@Base+0x60>
   19448:	movw	r0, #53405	; 0xd09d
   1944c:	movt	r0, #1
   19450:	movw	r1, #53420	; 0xd0ac
   19454:	movt	r1, #1
   19458:	movw	r3, #53494	; 0xd0f6
   1945c:	movt	r3, #1
   19460:	movw	r2, #965	; 0x3c5
   19464:	bl	129c0 <__assert_fail@plt>
   19468:	push	{r4, r5, r6, r7, fp, lr}
   1946c:	add	fp, sp, #16
   19470:	sub	sp, sp, #24
   19474:	mov	r7, r1
   19478:	mov	r6, r0
   1947c:	mov	r0, #0
   19480:	str	r0, [sp, #20]
   19484:	str	r0, [sp, #16]
   19488:	str	r0, [sp, #12]
   1948c:	strb	r0, [r3]
   19490:	cmp	r1, r2
   19494:	beq	194ec <flatcc_json_parser_union_type@@Base+0x22c>
   19498:	mov	r5, r3
   1949c:	mov	r4, r2
   194a0:	add	r0, sp, #16
   194a4:	str	r0, [sp]
   194a8:	add	r3, sp, #12
   194ac:	mov	r0, r6
   194b0:	mov	r1, r7
   194b4:	bl	18a84 <flatcc_json_parser_integer@@Base>
   194b8:	mov	r1, r0
   194bc:	cmp	r0, r7
   194c0:	beq	194e8 <flatcc_json_parser_union_type@@Base+0x228>
   194c4:	ldr	r3, [sp, #12]
   194c8:	ldr	r0, [sp, #16]
   194cc:	ldr	r2, [sp, #20]
   194d0:	stm	sp, {r0, r2, r5}
   194d4:	mov	r0, r6
   194d8:	mov	r2, r4
   194dc:	bl	1a700 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   194e0:	mov	r7, r0
   194e4:	b	194ec <flatcc_json_parser_union_type@@Base+0x22c>
   194e8:	mov	r7, r1
   194ec:	mov	r0, r7
   194f0:	sub	sp, fp, #16
   194f4:	pop	{r4, r5, r6, r7, fp, pc}
   194f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194fc:	add	fp, sp, #28
   19500:	sub	sp, sp, #44	; 0x2c
   19504:	mov	r4, r3
   19508:	mov	r7, r2
   1950c:	mov	r5, r0
   19510:	mov	sl, #0
   19514:	strb	sl, [fp, #-29]	; 0xffffffe3
   19518:	ldr	r0, [fp, #8]
   1951c:	strb	sl, [r0]
   19520:	mov	r0, r5
   19524:	bl	1a74c <flatcc_json_parser_struct_as_root@@Base+0xa20>
   19528:	mov	r6, r0
   1952c:	cmp	r0, r7
   19530:	beq	19614 <flatcc_json_parser_union_type@@Base+0x354>
   19534:	add	r0, r4, #4
   19538:	add	r9, sp, #32
   1953c:	add	r8, sp, #28
   19540:	str	r0, [sp, #16]
   19544:	str	sl, [sp, #20]
   19548:	mov	sl, r0
   1954c:	ldr	r4, [sl, #-4]
   19550:	str	r9, [sp]
   19554:	add	r0, sp, #24
   19558:	str	r0, [sp, #4]
   1955c:	mov	r0, r5
   19560:	mov	r1, r6
   19564:	mov	r2, r7
   19568:	mov	r3, r8
   1956c:	blx	r4
   19570:	mov	r4, r0
   19574:	cmp	r0, r7
   19578:	beq	19634 <flatcc_json_parser_union_type@@Base+0x374>
   1957c:	cmp	r4, r6
   19580:	bne	19598 <flatcc_json_parser_union_type@@Base+0x2d8>
   19584:	ldr	r0, [sl], #4
   19588:	cmp	r0, #0
   1958c:	mov	r6, r4
   19590:	bne	1954c <flatcc_json_parser_union_type@@Base+0x28c>
   19594:	b	1961c <flatcc_json_parser_union_type@@Base+0x35c>
   19598:	ldr	sl, [sp, #20]
   1959c:	cmp	sl, #0
   195a0:	beq	195b0 <flatcc_json_parser_union_type@@Base+0x2f0>
   195a4:	ldr	r0, [r5, #12]
   195a8:	cmp	r0, #0
   195ac:	bne	19648 <flatcc_json_parser_union_type@@Base+0x388>
   195b0:	ldr	r3, [sp, #28]
   195b4:	ldr	r0, [sp, #32]
   195b8:	ldr	r1, [sp, #36]	; 0x24
   195bc:	stm	sp, {r0, r1}
   195c0:	sub	r0, fp, #29
   195c4:	str	r0, [sp, #8]
   195c8:	mov	r0, r5
   195cc:	mov	r1, r4
   195d0:	mov	r2, r7
   195d4:	bl	1a700 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   195d8:	cmp	r0, r7
   195dc:	beq	19640 <flatcc_json_parser_union_type@@Base+0x380>
   195e0:	add	sl, sl, #1
   195e4:	ldr	r0, [fp, #8]
   195e8:	mov	r2, r0
   195ec:	ldrb	r0, [r0]
   195f0:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   195f4:	add	r0, r0, r1
   195f8:	strb	r0, [r2]
   195fc:	ldr	r0, [sp, #24]
   19600:	cmp	r0, #0
   19604:	mov	r6, r4
   19608:	ldr	r0, [sp, #16]
   1960c:	bne	19544 <flatcc_json_parser_union_type@@Base+0x284>
   19610:	b	19634 <flatcc_json_parser_union_type@@Base+0x374>
   19614:	mov	r4, r6
   19618:	b	19634 <flatcc_json_parser_union_type@@Base+0x374>
   1961c:	mov	r0, r5
   19620:	mov	r1, r4
   19624:	mov	r2, r7
   19628:	mov	r3, #23
   1962c:	bl	17770 <flatcc_json_parser_set_error@@Base>
   19630:	mov	r4, r0
   19634:	mov	r0, r4
   19638:	sub	sp, fp, #28
   1963c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19640:	mov	r4, r7
   19644:	b	19634 <flatcc_json_parser_union_type@@Base+0x374>
   19648:	mov	r0, r5
   1964c:	mov	r1, r4
   19650:	mov	r2, r7
   19654:	mov	r3, #14
   19658:	b	1962c <flatcc_json_parser_union_type@@Base+0x36c>

0001965c <flatcc_json_parser_union_vector@@Base>:
   1965c:	push	{r4, r5, r6, r7, fp, lr}
   19660:	add	fp, sp, #16
   19664:	sub	sp, sp, #16
   19668:	mov	r7, r3
   1966c:	mov	r4, r2
   19670:	mov	r5, r1
   19674:	mov	r6, r0
   19678:	ldr	r0, [r0]
   1967c:	ldr	r1, [fp, #12]
   19680:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   19684:	add	r2, r0, #8
   19688:	add	r3, r7, r7, lsl #1
   1968c:	mov	r1, r2
   19690:	ldr	r7, [r1, r3, lsl #3]!
   19694:	cmp	r7, #0
   19698:	beq	196b8 <flatcc_json_parser_union_vector@@Base+0x5c>
   1969c:	mov	r0, r6
   196a0:	mov	r1, r5
   196a4:	mov	r2, r4
   196a8:	mov	r3, #28
   196ac:	sub	sp, fp, #16
   196b0:	pop	{r4, r5, r6, r7, fp, lr}
   196b4:	b	17770 <flatcc_json_parser_set_error@@Base>
   196b8:	add	r2, r2, r3, lsl #3
   196bc:	ldrb	r7, [r2, #12]
   196c0:	ldr	r3, [r0, #4]
   196c4:	cmp	r7, #0
   196c8:	beq	19704 <flatcc_json_parser_union_vector@@Base+0xa8>
   196cc:	ldr	r1, [fp, #16]
   196d0:	ldr	r7, [fp, #8]
   196d4:	sub	r3, r3, #1
   196d8:	str	r3, [r0, #4]
   196dc:	ldr	r0, [r2, #16]
   196e0:	ldr	r3, [r2, #20]
   196e4:	stm	sp, {r0, r7}
   196e8:	str	r1, [sp, #8]
   196ec:	mov	r0, r6
   196f0:	mov	r1, r5
   196f4:	mov	r2, r4
   196f8:	bl	19738 <flatcc_json_parser_union_vector@@Base+0xdc>
   196fc:	sub	sp, fp, #16
   19700:	pop	{r4, r5, r6, r7, fp, pc}
   19704:	add	r3, r3, #1
   19708:	str	r3, [r0, #4]
   1970c:	ldr	r0, [r6, #16]
   19710:	str	r0, [r2, #8]
   19714:	ldr	r0, [r6, #4]
   19718:	str	r0, [r2, #4]
   1971c:	str	r5, [r1]
   19720:	mov	r0, r6
   19724:	mov	r1, r5
   19728:	mov	r2, r4
   1972c:	sub	sp, fp, #16
   19730:	pop	{r4, r5, r6, r7, fp, lr}
   19734:	b	180c4 <flatcc_json_parser_generic_json@@Base>
   19738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1973c:	add	fp, sp, #28
   19740:	sub	sp, sp, #12
   19744:	mov	r7, r3
   19748:	mov	r5, r2
   1974c:	mov	r4, r1
   19750:	mov	r6, r0
   19754:	mov	r0, #0
   19758:	str	r0, [sp, #8]
   1975c:	ldr	r0, [r6]
   19760:	bl	14d6c <flatcc_builder_start_offset_vector@@Base>
   19764:	cmp	r0, #0
   19768:	beq	19790 <flatcc_json_parser_union_vector@@Base+0x134>
   1976c:	mov	r0, r6
   19770:	mov	r1, r4
   19774:	mov	r2, r5
   19778:	mov	r3, #33	; 0x21
   1977c:	bl	17770 <flatcc_json_parser_set_error@@Base>
   19780:	mov	r4, r0
   19784:	mov	r0, r4
   19788:	sub	sp, fp, #28
   1978c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19790:	ldr	r8, [fp, #8]
   19794:	add	r3, sp, #4
   19798:	mov	r0, r6
   1979c:	mov	r1, r4
   197a0:	mov	r2, r5
   197a4:	bl	19b90 <flatcc_json_parser_union_type_vector@@Base+0x2d8>
   197a8:	mov	r4, r0
   197ac:	clz	r0, r8
   197b0:	lsr	r0, r0, #5
   197b4:	ldr	r1, [sp, #4]
   197b8:	cmp	r1, #0
   197bc:	beq	19858 <flatcc_json_parser_union_vector@@Base+0x1fc>
   197c0:	sub	sl, r8, #1
   197c4:	mov	r9, #0
   197c8:	add	r8, sp, #8
   197cc:	tst	r0, #1
   197d0:	bne	198a4 <flatcc_json_parser_union_vector@@Base+0x248>
   197d4:	ldr	r0, [r6]
   197d8:	mov	r1, r7
   197dc:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   197e0:	ldrb	r3, [r0, r9]
   197e4:	str	r8, [sp]
   197e8:	mov	r0, r6
   197ec:	mov	r1, r4
   197f0:	mov	r2, r5
   197f4:	ldr	r4, [fp, #16]
   197f8:	blx	r4
   197fc:	mov	r4, r0
   19800:	cmp	r0, r5
   19804:	beq	19784 <flatcc_json_parser_union_vector@@Base+0x128>
   19808:	ldr	r0, [r6]
   1980c:	mov	r1, #1
   19810:	bl	148b8 <flatcc_builder_extend_offset_vector@@Base>
   19814:	cmp	r0, #0
   19818:	beq	1976c <flatcc_json_parser_union_vector@@Base+0x110>
   1981c:	ldr	r1, [sp, #8]
   19820:	str	r1, [r0]
   19824:	mov	r0, r6
   19828:	mov	r1, r4
   1982c:	mov	r2, r5
   19830:	add	r3, sp, #4
   19834:	bl	18904 <flatcc_json_parser_float@@Base+0x450>
   19838:	mov	r4, r0
   1983c:	sub	r0, sl, r9
   19840:	clz	r0, r0
   19844:	lsr	r0, r0, #5
   19848:	add	r9, r9, #1
   1984c:	ldr	r1, [sp, #4]
   19850:	cmp	r1, #0
   19854:	bne	197cc <flatcc_json_parser_union_vector@@Base+0x170>
   19858:	cmp	r0, #0
   1985c:	beq	198a4 <flatcc_json_parser_union_vector@@Base+0x248>
   19860:	ldr	r0, [r6]
   19864:	mov	r1, r7
   19868:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   1986c:	mov	r1, r0
   19870:	ldr	r0, [r6]
   19874:	bl	15b60 <flatcc_builder_end_offset_vector_for_unions@@Base>
   19878:	str	r0, [sp, #8]
   1987c:	cmp	r0, #0
   19880:	beq	1976c <flatcc_json_parser_union_vector@@Base+0x110>
   19884:	ldr	r1, [fp, #12]
   19888:	ldr	r0, [r6]
   1988c:	bl	15ce8 <flatcc_builder_table_add_offset@@Base>
   19890:	cmp	r0, #0
   19894:	beq	1976c <flatcc_json_parser_union_vector@@Base+0x110>
   19898:	ldr	r1, [sp, #8]
   1989c:	str	r1, [r0]
   198a0:	b	19784 <flatcc_json_parser_union_vector@@Base+0x128>
   198a4:	mov	r0, r6
   198a8:	mov	r1, r4
   198ac:	mov	r2, r5
   198b0:	mov	r3, #30
   198b4:	b	1977c <flatcc_json_parser_union_vector@@Base+0x120>

000198b8 <flatcc_json_parser_union_type_vector@@Base>:
   198b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198bc:	add	fp, sp, #28
   198c0:	sub	sp, sp, #28
   198c4:	mov	r6, r3
   198c8:	mov	r9, r2
   198cc:	mov	r4, r1
   198d0:	mov	r5, r0
   198d4:	ldr	r0, [r0]
   198d8:	ldr	r1, [fp, #12]
   198dc:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   198e0:	add	r0, r0, #8
   198e4:	add	sl, r6, r6, lsl #1
   198e8:	add	r7, r0, sl, lsl #3
   198ec:	mov	r0, r7
   198f0:	ldrb	r1, [r0, #12]!
   198f4:	cmp	r1, #0
   198f8:	beq	19910 <flatcc_json_parser_union_type_vector@@Base+0x58>
   198fc:	mov	r0, r5
   19900:	mov	r1, r4
   19904:	mov	r2, r9
   19908:	mov	r3, #28
   1990c:	b	19b38 <flatcc_json_parser_union_type_vector@@Base+0x280>
   19910:	mov	r1, #1
   19914:	strb	r1, [r0]
   19918:	ldr	r0, [r5]
   1991c:	mov	r1, #1
   19920:	mov	r2, #1
   19924:	mvn	r3, #0
   19928:	bl	14cdc <flatcc_builder_start_vector@@Base>
   1992c:	cmp	r0, #0
   19930:	bne	19b28 <flatcc_json_parser_union_type_vector@@Base+0x270>
   19934:	add	r3, sp, #24
   19938:	mov	r0, r5
   1993c:	mov	r1, r4
   19940:	mov	r2, r9
   19944:	bl	19b90 <flatcc_json_parser_union_type_vector@@Base+0x2d8>
   19948:	mov	r4, r0
   1994c:	ldr	r0, [r5]
   19950:	ldr	r1, [sp, #24]
   19954:	cmp	r1, #0
   19958:	beq	19a30 <flatcc_json_parser_union_type_vector@@Base+0x178>
   1995c:	add	r6, sp, #23
   19960:	b	19998 <flatcc_json_parser_union_type_vector@@Base+0xe0>
   19964:	ldrb	r1, [sp, #23]
   19968:	mov	r0, r8
   1996c:	bl	19c20 <flatcc_json_parser_union_type_vector@@Base+0x368>
   19970:	mov	r0, r5
   19974:	mov	r1, r4
   19978:	mov	r2, r9
   1997c:	add	r3, sp, #24
   19980:	bl	18904 <flatcc_json_parser_float@@Base+0x450>
   19984:	mov	r4, r0
   19988:	ldr	r0, [r5]
   1998c:	ldr	r1, [sp, #24]
   19990:	cmp	r1, #0
   19994:	beq	19a30 <flatcc_json_parser_union_type_vector@@Base+0x178>
   19998:	mov	r1, #1
   1999c:	bl	146f0 <flatcc_builder_extend_vector@@Base>
   199a0:	cmp	r0, #0
   199a4:	beq	19b28 <flatcc_json_parser_union_type_vector@@Base+0x270>
   199a8:	mov	r8, r0
   199ac:	mov	r0, r5
   199b0:	mov	r1, r4
   199b4:	mov	r2, r9
   199b8:	mov	r3, r6
   199bc:	bl	19468 <flatcc_json_parser_union_type@@Base+0x1a8>
   199c0:	mov	r1, r6
   199c4:	mov	r6, r0
   199c8:	cmp	r4, r0
   199cc:	beq	199d8 <flatcc_json_parser_union_type_vector@@Base+0x120>
   199d0:	mov	r4, r6
   199d4:	b	19a00 <flatcc_json_parser_union_type_vector@@Base+0x148>
   199d8:	str	r1, [sp]
   199dc:	mov	r0, r5
   199e0:	mov	r1, r6
   199e4:	mov	r2, r9
   199e8:	ldr	r3, [fp, #16]
   199ec:	bl	194f8 <flatcc_json_parser_union_type@@Base+0x238>
   199f0:	mov	r4, r0
   199f4:	cmp	r0, r6
   199f8:	cmpne	r4, r9
   199fc:	beq	19b28 <flatcc_json_parser_union_type_vector@@Base+0x270>
   19a00:	ldrb	r0, [sp, #23]
   19a04:	ldr	r1, [fp, #24]
   19a08:	blx	r1
   19a0c:	cmp	r0, #0
   19a10:	add	r6, sp, #23
   19a14:	bne	19964 <flatcc_json_parser_union_type_vector@@Base+0xac>
   19a18:	ldrb	r0, [r5, #8]
   19a1c:	tst	r0, #1
   19a20:	beq	19b5c <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   19a24:	mov	r0, #0
   19a28:	strb	r0, [sp, #23]
   19a2c:	b	19964 <flatcc_json_parser_union_type_vector@@Base+0xac>
   19a30:	bl	15994 <flatcc_builder_vector_count@@Base>
   19a34:	mov	r8, r0
   19a38:	str	r0, [r7, #16]
   19a3c:	ldr	r0, [r5]
   19a40:	mov	r1, r8
   19a44:	bl	13c90 <flatcc_builder_enter_user_frame@@Base>
   19a48:	mov	r1, r0
   19a4c:	ldr	r0, [r5]
   19a50:	str	r1, [sp, #16]
   19a54:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   19a58:	mov	r6, r0
   19a5c:	ldr	r0, [r5]
   19a60:	bl	159a0 <flatcc_builder_vector_edit@@Base>
   19a64:	mov	r1, r0
   19a68:	mov	r0, r6
   19a6c:	mov	r2, r8
   19a70:	bl	12900 <memcpy@plt>
   19a74:	ldr	r0, [r5]
   19a78:	bl	15914 <flatcc_builder_end_vector@@Base>
   19a7c:	cmp	r0, #0
   19a80:	beq	19b28 <flatcc_json_parser_union_type_vector@@Base+0x270>
   19a84:	mov	r7, r0
   19a88:	ldr	r6, [fp, #8]
   19a8c:	ldr	r0, [r5]
   19a90:	sub	r1, r6, #1
   19a94:	bl	15ce8 <flatcc_builder_table_add_offset@@Base>
   19a98:	cmp	r0, #0
   19a9c:	beq	19b28 <flatcc_json_parser_union_type_vector@@Base+0x270>
   19aa0:	str	r7, [r0]
   19aa4:	ldr	r0, [r5]
   19aa8:	ldr	r1, [fp, #12]
   19aac:	bl	13d9c <flatcc_builder_get_user_frame_ptr@@Base>
   19ab0:	add	r7, r0, #8
   19ab4:	mov	r2, r7
   19ab8:	ldr	r1, [r2, sl, lsl #3]!
   19abc:	ldr	r3, [sp, #16]
   19ac0:	str	r3, [r2, #20]
   19ac4:	ldr	r2, [r0, #4]
   19ac8:	cmp	r1, #0
   19acc:	beq	19b4c <flatcc_json_parser_union_type_vector@@Base+0x294>
   19ad0:	cmp	r2, #0
   19ad4:	beq	19b70 <flatcc_json_parser_union_type_vector@@Base+0x2b8>
   19ad8:	ldr	ip, [fp, #20]
   19adc:	sub	r2, r2, #1
   19ae0:	str	r2, [r0, #4]
   19ae4:	add	r0, r7, sl, lsl #3
   19ae8:	ldr	r2, [r0, #8]
   19aec:	ldr	sl, [r5, #4]
   19af0:	ldr	r7, [r5, #16]
   19af4:	str	r2, [r5, #16]
   19af8:	ldr	r0, [r0, #4]
   19afc:	str	r0, [r5, #4]
   19b00:	str	r8, [sp]
   19b04:	stmib	sp, {r6, ip}
   19b08:	mov	r0, r5
   19b0c:	mov	r2, r9
   19b10:	bl	19738 <flatcc_json_parser_union_vector@@Base+0xdc>
   19b14:	cmp	r0, r9
   19b18:	strne	sl, [r5, #4]
   19b1c:	strne	r7, [r5, #16]
   19b20:	movne	r9, r4
   19b24:	b	19b40 <flatcc_json_parser_union_type_vector@@Base+0x288>
   19b28:	mov	r0, r5
   19b2c:	mov	r1, r4
   19b30:	mov	r2, r9
   19b34:	mov	r3, #33	; 0x21
   19b38:	bl	17770 <flatcc_json_parser_set_error@@Base>
   19b3c:	mov	r9, r0
   19b40:	mov	r0, r9
   19b44:	sub	sp, fp, #28
   19b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b4c:	add	r1, r2, #1
   19b50:	str	r1, [r0, #4]
   19b54:	mov	r9, r4
   19b58:	b	19b40 <flatcc_json_parser_union_type_vector@@Base+0x288>
   19b5c:	mov	r0, r5
   19b60:	mov	r1, r4
   19b64:	mov	r2, r9
   19b68:	mov	r3, #15
   19b6c:	b	19b38 <flatcc_json_parser_union_type_vector@@Base+0x280>
   19b70:	movw	r0, #53405	; 0xd09d
   19b74:	movt	r0, #1
   19b78:	movw	r1, #53420	; 0xd0ac
   19b7c:	movt	r1, #1
   19b80:	movw	r3, #53698	; 0xd1c2
   19b84:	movt	r3, #1
   19b88:	movw	r2, #1122	; 0x462
   19b8c:	bl	129c0 <__assert_fail@plt>
   19b90:	push	{r4, r5, r6, sl, fp, lr}
   19b94:	add	fp, sp, #16
   19b98:	mov	r5, r3
   19b9c:	mov	r4, r2
   19ba0:	mov	r6, r0
   19ba4:	cmp	r1, r2
   19ba8:	beq	19bf8 <flatcc_json_parser_union_type_vector@@Base+0x340>
   19bac:	ldrb	r0, [r1]
   19bb0:	cmp	r0, #91	; 0x5b
   19bb4:	bne	19bf8 <flatcc_json_parser_union_type_vector@@Base+0x340>
   19bb8:	add	r1, r1, #1
   19bbc:	mov	r0, r6
   19bc0:	mov	r2, r4
   19bc4:	bl	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   19bc8:	cmp	r0, r4
   19bcc:	beq	19c14 <flatcc_json_parser_union_type_vector@@Base+0x35c>
   19bd0:	ldrb	r1, [r0]
   19bd4:	cmp	r1, #93	; 0x5d
   19bd8:	bne	19c14 <flatcc_json_parser_union_type_vector@@Base+0x35c>
   19bdc:	mov	r1, #0
   19be0:	str	r1, [r5]
   19be4:	add	r1, r0, #1
   19be8:	mov	r0, r6
   19bec:	mov	r2, r4
   19bf0:	pop	{r4, r5, r6, sl, fp, lr}
   19bf4:	b	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   19bf8:	mov	r0, #0
   19bfc:	str	r0, [r5]
   19c00:	mov	r0, r6
   19c04:	mov	r2, r4
   19c08:	mov	r3, #22
   19c0c:	bl	17770 <flatcc_json_parser_set_error@@Base>
   19c10:	pop	{r4, r5, r6, sl, fp, pc}
   19c14:	mov	r1, #1
   19c18:	str	r1, [r5]
   19c1c:	pop	{r4, r5, r6, sl, fp, pc}
   19c20:	push	{r4, r5, fp, lr}
   19c24:	add	fp, sp, #8
   19c28:	mov	r4, r1
   19c2c:	mov	r5, r0
   19c30:	mov	r0, r1
   19c34:	bl	1a784 <flatcc_json_parser_struct_as_root@@Base+0xa58>
   19c38:	strb	r4, [r5]
   19c3c:	pop	{r4, r5, fp, pc}

00019c40 <flatcc_json_parser_table_as_root@@Base>:
   19c40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19c44:	add	fp, sp, #24
   19c48:	sub	sp, sp, #56	; 0x38
   19c4c:	mov	r4, r2
   19c50:	mov	r6, r0
   19c54:	ldr	r8, [fp, #8]
   19c58:	str	r8, [sp]
   19c5c:	add	r5, sp, #12
   19c60:	cmp	r1, #0
   19c64:	movne	r5, r1
   19c68:	add	r7, r2, r3
   19c6c:	mov	r0, r5
   19c70:	mov	r1, r6
   19c74:	mov	r3, r7
   19c78:	bl	19cf4 <flatcc_json_parser_table_as_root@@Base+0xb4>
   19c7c:	mov	r0, #2
   19c80:	and	r3, r0, r8, lsr #1
   19c84:	ldr	r1, [fp, #12]
   19c88:	mov	r0, r6
   19c8c:	mov	r2, #0
   19c90:	bl	142c4 <flatcc_builder_start_buffer@@Base>
   19c94:	mov	r1, r0
   19c98:	mvn	r0, #0
   19c9c:	cmp	r1, #0
   19ca0:	bne	19cc8 <flatcc_json_parser_table_as_root@@Base+0x88>
   19ca4:	ldr	ip, [fp, #16]
   19ca8:	add	r3, sp, #8
   19cac:	mov	r0, r5
   19cb0:	mov	r1, r4
   19cb4:	mov	r2, r7
   19cb8:	blx	ip
   19cbc:	ldr	r0, [r5, #24]
   19cc0:	cmp	r0, #0
   19cc4:	beq	19cd0 <flatcc_json_parser_table_as_root@@Base+0x90>
   19cc8:	sub	sp, fp, #24
   19ccc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19cd0:	ldr	r1, [sp, #8]
   19cd4:	mov	r0, r6
   19cd8:	bl	14478 <flatcc_builder_end_buffer@@Base>
   19cdc:	cmp	r0, #0
   19ce0:	mvn	r0, #0
   19ce4:	strne	r4, [r5, #40]	; 0x28
   19ce8:	movne	r0, #0
   19cec:	sub	sp, fp, #24
   19cf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19cf4:	vmov.i32	q8, #0	; 0x00000000
   19cf8:	add	ip, r0, #12
   19cfc:	vst1.32	{d16-d17}, [ip]
   19d00:	add	ip, r0, #28
   19d04:	vst1.32	{d16-d17}, [ip]
   19d08:	stm	r0, {r1, r2}
   19d0c:	mov	r1, #1
   19d10:	str	r1, [r0, #16]
   19d14:	str	r2, [r0, #28]
   19d18:	str	r3, [r0, #32]
   19d1c:	str	r2, [r0, #36]	; 0x24
   19d20:	ldr	r1, [sp]
   19d24:	str	r1, [r0, #8]
   19d28:	bx	lr

00019d2c <flatcc_json_parser_struct_as_root@@Base>:
   19d2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19d30:	add	fp, sp, #24
   19d34:	sub	sp, sp, #56	; 0x38
   19d38:	mov	r4, r2
   19d3c:	mov	r6, r0
   19d40:	ldr	r8, [fp, #8]
   19d44:	str	r8, [sp]
   19d48:	add	r5, sp, #12
   19d4c:	cmp	r1, #0
   19d50:	movne	r5, r1
   19d54:	add	r7, r2, r3
   19d58:	mov	r0, r5
   19d5c:	mov	r1, r6
   19d60:	mov	r3, r7
   19d64:	bl	19cf4 <flatcc_json_parser_table_as_root@@Base+0xb4>
   19d68:	mov	r0, #2
   19d6c:	and	r3, r0, r8, lsr #1
   19d70:	ldr	r1, [fp, #12]
   19d74:	mov	r0, r6
   19d78:	mov	r2, #0
   19d7c:	bl	142c4 <flatcc_builder_start_buffer@@Base>
   19d80:	mov	r1, r0
   19d84:	mvn	r0, #0
   19d88:	cmp	r1, #0
   19d8c:	bne	19db4 <flatcc_json_parser_struct_as_root@@Base+0x88>
   19d90:	ldr	ip, [fp, #16]
   19d94:	add	r3, sp, #8
   19d98:	mov	r0, r5
   19d9c:	mov	r1, r4
   19da0:	mov	r2, r7
   19da4:	blx	ip
   19da8:	ldr	r0, [r5, #24]
   19dac:	cmp	r0, #0
   19db0:	beq	19dbc <flatcc_json_parser_struct_as_root@@Base+0x90>
   19db4:	sub	sp, fp, #24
   19db8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19dbc:	ldr	r1, [sp, #8]
   19dc0:	mov	r0, r6
   19dc4:	bl	14478 <flatcc_builder_end_buffer@@Base>
   19dc8:	cmp	r0, #0
   19dcc:	mvn	r0, #0
   19dd0:	strne	r4, [r5, #40]	; 0x28
   19dd4:	movne	r0, #0
   19dd8:	sub	sp, fp, #24
   19ddc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19de0:	vmov	d0, r0, r1
   19de4:	bx	lr
   19de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dec:	add	fp, sp, #28
   19df0:	sub	sp, sp, #44	; 0x2c
   19df4:	mov	sl, r2
   19df8:	mov	r8, r0
   19dfc:	mov	r2, #0
   19e00:	str	r2, [sl]
   19e04:	str	r2, [sl, #4]
   19e08:	cmp	r1, #1000	; 0x3e8
   19e0c:	movge	r1, #1000	; 0x3e8
   19e10:	add	ip, r0, r1
   19e14:	add	r4, ip, #1
   19e18:	cmp	r4, r0
   19e1c:	beq	19e8c <flatcc_json_parser_struct_as_root@@Base+0x160>
   19e20:	ldrb	r7, [r8]
   19e24:	cmp	r7, #45	; 0x2d
   19e28:	mov	r3, r8
   19e2c:	bne	19e44 <flatcc_json_parser_struct_as_root@@Base+0x118>
   19e30:	cmp	r1, #0
   19e34:	beq	1a220 <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   19e38:	add	r3, r8, #1
   19e3c:	ldrb	r7, [r3]
   19e40:	mov	r2, #1
   19e44:	cmp	r7, #48	; 0x30
   19e48:	bne	19e74 <flatcc_json_parser_struct_as_root@@Base+0x148>
   19e4c:	add	r0, r3, #1
   19e50:	cmp	r3, ip
   19e54:	beq	19e98 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   19e58:	ldrb	r7, [r0]
   19e5c:	orr	r7, r7, #32
   19e60:	cmp	r7, #120	; 0x78
   19e64:	bne	19e98 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   19e68:	mov	r1, sl
   19e6c:	bl	1a2e4 <flatcc_json_parser_struct_as_root@@Base+0x5b8>
   19e70:	b	19e8c <flatcc_json_parser_struct_as_root@@Base+0x160>
   19e74:	sub	r0, r7, #49	; 0x31
   19e78:	uxtb	r0, r0
   19e7c:	cmp	r0, #9
   19e80:	bcc	19ec8 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   19e84:	cmp	r2, #0
   19e88:	movne	r8, #0
   19e8c:	mov	r0, r8
   19e90:	sub	sp, fp, #28
   19e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e98:	cmp	r3, ip
   19e9c:	beq	19ebc <flatcc_json_parser_struct_as_root@@Base+0x190>
   19ea0:	ldrb	r0, [r3, #1]
   19ea4:	cmp	r0, #48	; 0x30
   19ea8:	bne	19eb8 <flatcc_json_parser_struct_as_root@@Base+0x18c>
   19eac:	add	r3, r3, #1
   19eb0:	cmp	ip, r3
   19eb4:	bne	19ea0 <flatcc_json_parser_struct_as_root@@Base+0x174>
   19eb8:	add	r0, r3, #1
   19ebc:	mov	r7, #0
   19ec0:	mov	r3, #0
   19ec4:	b	19ed4 <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   19ec8:	add	r0, r3, #1
   19ecc:	sub	r7, r7, #48	; 0x30
   19ed0:	asr	r3, r7, #31
   19ed4:	mov	r5, #0
   19ed8:	cmp	r0, r4
   19edc:	str	r2, [sp, #36]	; 0x24
   19ee0:	beq	19f58 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   19ee4:	str	ip, [sp, #28]
   19ee8:	str	sl, [sp, #32]
   19eec:	str	r8, [fp, #-32]	; 0xffffffe0
   19ef0:	movw	lr, #39321	; 0x9999
   19ef4:	movt	lr, #6553	; 0x1999
   19ef8:	movw	ip, #39320	; 0x9998
   19efc:	movt	ip, #39321	; 0x9999
   19f00:	mov	r9, #10
   19f04:	mov	r6, r0
   19f08:	ldrb	r8, [r6]
   19f0c:	sub	sl, r8, #48	; 0x30
   19f10:	uxtb	r2, sl
   19f14:	cmp	r2, #9
   19f18:	bhi	19f48 <flatcc_json_parser_struct_as_root@@Base+0x21c>
   19f1c:	subs	r2, ip, r7
   19f20:	sbcs	r2, lr, r3
   19f24:	bcc	19f78 <flatcc_json_parser_struct_as_root@@Base+0x24c>
   19f28:	add	r2, r3, r3, lsl #2
   19f2c:	lsl	r2, r2, #1
   19f30:	umlal	r8, r2, r7, r9
   19f34:	subs	r7, r8, #48	; 0x30
   19f38:	sbc	r3, r2, #0
   19f3c:	add	r6, r6, #1
   19f40:	cmp	r4, r6
   19f44:	bne	19f08 <flatcc_json_parser_struct_as_root@@Base+0x1dc>
   19f48:	mov	lr, r7
   19f4c:	mov	r9, r3
   19f50:	mov	r3, #0
   19f54:	b	19f90 <flatcc_json_parser_struct_as_root@@Base+0x264>
   19f58:	mov	r6, r0
   19f5c:	mov	lr, r7
   19f60:	mov	r9, r3
   19f64:	mov	r3, #0
   19f68:	cmp	r6, r4
   19f6c:	bne	19fa4 <flatcc_json_parser_struct_as_root@@Base+0x278>
   19f70:	mov	r1, r6
   19f74:	b	1a040 <flatcc_json_parser_struct_as_root@@Base+0x314>
   19f78:	adds	lr, r7, #1
   19f7c:	adc	r9, r3, #0
   19f80:	cmp	r8, #52	; 0x34
   19f84:	movls	lr, r7
   19f88:	movls	r9, r3
   19f8c:	mov	r3, #1
   19f90:	ldr	r8, [fp, #-32]	; 0xffffffe0
   19f94:	ldr	sl, [sp, #32]
   19f98:	ldr	ip, [sp, #28]
   19f9c:	cmp	r6, r4
   19fa0:	beq	19f70 <flatcc_json_parser_struct_as_root@@Base+0x244>
   19fa4:	mov	r7, r3
   19fa8:	str	r4, [fp, #-32]	; 0xffffffe0
   19fac:	sub	r1, r1, r6
   19fb0:	add	r3, r8, r1
   19fb4:	mov	r5, #0
   19fb8:	mov	r1, r6
   19fbc:	ldrb	r4, [r1]
   19fc0:	cmp	r4, #48	; 0x30
   19fc4:	bne	19fe8 <flatcc_json_parser_struct_as_root@@Base+0x2bc>
   19fc8:	sub	r3, r3, #1
   19fcc:	add	r4, r1, #1
   19fd0:	add	r5, r5, #1
   19fd4:	cmp	r1, ip
   19fd8:	mov	r1, r4
   19fdc:	bne	19fbc <flatcc_json_parser_struct_as_root@@Base+0x290>
   19fe0:	mov	r1, r4
   19fe4:	b	1a038 <flatcc_json_parser_struct_as_root@@Base+0x30c>
   19fe8:	sub	r2, r4, #49	; 0x31
   19fec:	uxtb	r2, r2
   19ff0:	cmp	r2, #8
   19ff4:	bhi	1a038 <flatcc_json_parser_struct_as_root@@Base+0x30c>
   19ff8:	mvn	r7, #0
   19ffc:	mov	r4, r7
   1a000:	cmp	r3, #0
   1a004:	beq	1a024 <flatcc_json_parser_struct_as_root@@Base+0x2f8>
   1a008:	ldrb	r2, [r1, -r4]
   1a00c:	sub	r2, r2, #48	; 0x30
   1a010:	uxtb	r2, r2
   1a014:	sub	r7, r4, #1
   1a018:	sub	r3, r3, #1
   1a01c:	cmp	r2, #10
   1a020:	bcc	19ffc <flatcc_json_parser_struct_as_root@@Base+0x2d0>
   1a024:	sub	r5, r5, r4
   1a028:	sub	r1, r1, r4
   1a02c:	mov	r3, #1
   1a030:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1a034:	b	1a040 <flatcc_json_parser_struct_as_root@@Base+0x314>
   1a038:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1a03c:	mov	r3, r7
   1a040:	sub	r2, r6, r0
   1a044:	cmp	r1, r4
   1a048:	beq	1a0fc <flatcc_json_parser_struct_as_root@@Base+0x3d0>
   1a04c:	ldrb	r0, [r1]
   1a050:	cmp	r0, #46	; 0x2e
   1a054:	bne	1a0fc <flatcc_json_parser_struct_as_root@@Base+0x3d0>
   1a058:	mov	r6, r1
   1a05c:	ldrb	r0, [r6, #1]!
   1a060:	sub	r0, r0, #48	; 0x30
   1a064:	str	r2, [sp, #28]
   1a068:	uxtb	r2, r0
   1a06c:	mov	r0, #0
   1a070:	cmp	r2, #9
   1a074:	ldr	r2, [sp, #28]
   1a078:	bhi	1a224 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   1a07c:	cmp	r1, ip
   1a080:	beq	1a1ac <flatcc_json_parser_struct_as_root@@Base+0x480>
   1a084:	str	r3, [sp, #24]
   1a088:	str	r4, [fp, #-32]	; 0xffffffe0
   1a08c:	movw	r0, #39321	; 0x9999
   1a090:	movt	r0, #6553	; 0x1999
   1a094:	movw	r7, #39320	; 0x9998
   1a098:	movt	r7, #39321	; 0x9999
   1a09c:	mov	r3, #10
   1a0a0:	ldrb	r4, [r1, #1]
   1a0a4:	sub	r2, r4, #48	; 0x30
   1a0a8:	uxtb	r2, r2
   1a0ac:	cmp	r2, #9
   1a0b0:	bhi	1a0e4 <flatcc_json_parser_struct_as_root@@Base+0x3b8>
   1a0b4:	subs	r2, r7, lr
   1a0b8:	sbcs	r2, r0, r9
   1a0bc:	bcc	1a22c <flatcc_json_parser_struct_as_root@@Base+0x500>
   1a0c0:	add	r2, r9, r9, lsl #2
   1a0c4:	lsl	r2, r2, #1
   1a0c8:	umlal	r4, r2, lr, r3
   1a0cc:	subs	lr, r4, #48	; 0x30
   1a0d0:	sbc	r9, r2, #0
   1a0d4:	add	r1, r1, #1
   1a0d8:	sub	r5, r5, #1
   1a0dc:	cmp	ip, r1
   1a0e0:	bne	1a0a0 <flatcc_json_parser_struct_as_root@@Base+0x374>
   1a0e4:	add	r1, r1, #1
   1a0e8:	str	lr, [sp, #32]
   1a0ec:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1a0f0:	ldr	r3, [sp, #24]
   1a0f4:	ldr	r2, [sp, #28]
   1a0f8:	b	1a26c <flatcc_json_parser_struct_as_root@@Base+0x540>
   1a0fc:	str	lr, [sp, #32]
   1a100:	mov	lr, #0
   1a104:	cmp	r1, r4
   1a108:	beq	1a168 <flatcc_json_parser_struct_as_root@@Base+0x43c>
   1a10c:	ldrb	r0, [r1]
   1a110:	orr	r0, r0, #32
   1a114:	cmp	r0, #101	; 0x65
   1a118:	bne	1a168 <flatcc_json_parser_struct_as_root@@Base+0x43c>
   1a11c:	mov	r7, r2
   1a120:	sub	r2, r4, r1
   1a124:	mov	r0, #0
   1a128:	cmp	r2, #2
   1a12c:	blt	1a224 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   1a130:	mov	r2, r7
   1a134:	mov	r6, r1
   1a138:	ldrb	r0, [r6, #1]!
   1a13c:	cmp	r0, #45	; 0x2d
   1a140:	beq	1a1b8 <flatcc_json_parser_struct_as_root@@Base+0x48c>
   1a144:	mov	lr, #0
   1a148:	cmp	r0, #43	; 0x2b
   1a14c:	bne	1a1c8 <flatcc_json_parser_struct_as_root@@Base+0x49c>
   1a150:	add	r6, r1, #2
   1a154:	mov	r0, #0
   1a158:	cmp	r6, r4
   1a15c:	beq	1a224 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   1a160:	mov	lr, #0
   1a164:	b	1a1c8 <flatcc_json_parser_struct_as_root@@Base+0x49c>
   1a168:	mov	r7, #0
   1a16c:	cmp	r1, r4
   1a170:	mov	r0, #0
   1a174:	beq	1a224 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   1a178:	add	r0, r2, r5
   1a17c:	cmp	lr, #0
   1a180:	rsbne	r7, r7, #0
   1a184:	add	r0, r0, r7
   1a188:	ldr	r7, [sp, #32]
   1a18c:	stm	sp, {r7, r9}
   1a190:	add	ip, sp, #8
   1a194:	stm	ip, {r0, r2, r3, sl}
   1a198:	mov	r0, r8
   1a19c:	ldr	r2, [sp, #36]	; 0x24
   1a1a0:	bl	1a2f8 <flatcc_json_parser_struct_as_root@@Base+0x5cc>
   1a1a4:	sub	sp, fp, #28
   1a1a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1ac:	mov	r1, r6
   1a1b0:	str	lr, [sp, #32]
   1a1b4:	b	1a26c <flatcc_json_parser_struct_as_root@@Base+0x540>
   1a1b8:	add	r6, r1, #2
   1a1bc:	mov	lr, #1
   1a1c0:	cmp	r6, r4
   1a1c4:	beq	1a220 <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   1a1c8:	ldrb	r0, [r6]
   1a1cc:	sub	r7, r0, #48	; 0x30
   1a1d0:	uxtb	r1, r7
   1a1d4:	mov	r0, #0
   1a1d8:	cmp	r1, #9
   1a1dc:	bhi	1a224 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   1a1e0:	cmp	r6, ip
   1a1e4:	beq	1a218 <flatcc_json_parser_struct_as_root@@Base+0x4ec>
   1a1e8:	ldrb	r0, [r6, #1]
   1a1ec:	sub	r1, r0, #48	; 0x30
   1a1f0:	uxtb	r1, r1
   1a1f4:	cmp	r1, #9
   1a1f8:	bhi	1a218 <flatcc_json_parser_struct_as_root@@Base+0x4ec>
   1a1fc:	cmp	r7, #32768	; 0x8000
   1a200:	addlt	r1, r7, r7, lsl #2
   1a204:	addlt	r0, r0, r1, lsl #1
   1a208:	sublt	r7, r0, #48	; 0x30
   1a20c:	add	r6, r6, #1
   1a210:	cmp	ip, r6
   1a214:	bne	1a1e8 <flatcc_json_parser_struct_as_root@@Base+0x4bc>
   1a218:	add	r1, r6, #1
   1a21c:	b	1a16c <flatcc_json_parser_struct_as_root@@Base+0x440>
   1a220:	mov	r0, #0
   1a224:	sub	sp, fp, #28
   1a228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a22c:	add	r1, r1, #1
   1a230:	ldr	r3, [sp, #24]
   1a234:	cmp	r3, #0
   1a238:	ldr	r2, [sp, #28]
   1a23c:	beq	1a248 <flatcc_json_parser_struct_as_root@@Base+0x51c>
   1a240:	str	lr, [sp, #32]
   1a244:	b	1a268 <flatcc_json_parser_struct_as_root@@Base+0x53c>
   1a248:	adds	r0, lr, #1
   1a24c:	adc	r3, r9, #0
   1a250:	cmp	r4, #52	; 0x34
   1a254:	movls	r0, lr
   1a258:	str	r0, [sp, #32]
   1a25c:	movls	r3, r9
   1a260:	mov	r9, r3
   1a264:	mov	r3, #1
   1a268:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1a26c:	sub	r0, r1, r6
   1a270:	add	r2, r0, r2
   1a274:	cmp	r1, r4
   1a278:	beq	1a100 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   1a27c:	ldrb	r0, [r1]
   1a280:	cmp	r0, #48	; 0x30
   1a284:	bne	1a29c <flatcc_json_parser_struct_as_root@@Base+0x570>
   1a288:	add	r1, r1, #1
   1a28c:	add	r5, r5, #1
   1a290:	cmp	r4, r1
   1a294:	bne	1a27c <flatcc_json_parser_struct_as_root@@Base+0x550>
   1a298:	b	1a100 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   1a29c:	sub	r0, r0, #49	; 0x31
   1a2a0:	uxtb	r0, r0
   1a2a4:	cmp	r0, #8
   1a2a8:	bhi	1a100 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   1a2ac:	mov	r7, r2
   1a2b0:	mov	r0, r1
   1a2b4:	cmp	ip, r1
   1a2b8:	beq	1a2d4 <flatcc_json_parser_struct_as_root@@Base+0x5a8>
   1a2bc:	add	r1, r0, #1
   1a2c0:	ldrb	r2, [r0, #1]
   1a2c4:	sub	r2, r2, #48	; 0x30
   1a2c8:	uxtb	r2, r2
   1a2cc:	cmp	r2, #10
   1a2d0:	bcc	1a2b0 <flatcc_json_parser_struct_as_root@@Base+0x584>
   1a2d4:	add	r1, r0, #1
   1a2d8:	mov	r3, #1
   1a2dc:	mov	r2, r7
   1a2e0:	b	1a100 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   1a2e4:	mov	r2, #0
   1a2e8:	str	r2, [r1]
   1a2ec:	str	r2, [r1, #4]
   1a2f0:	bx	lr
   1a2f4:	nop	{0}
   1a2f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a2fc:	add	fp, sp, #24
   1a300:	sub	sp, sp, #16
   1a304:	mov	r5, r2
   1a308:	mov	r4, r1
   1a30c:	mov	r6, r0
   1a310:	ldr	r1, [fp, #12]
   1a314:	ldr	r0, [fp, #8]
   1a318:	vmov.i32	d0, #0	; 0x00000000
   1a31c:	orrs	r2, r0, r1
   1a320:	ldr	r9, [fp, #28]
   1a324:	beq	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a328:	ldr	r7, [fp, #16]
   1a32c:	cmn	r7, #324	; 0x144
   1a330:	blt	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a334:	movw	r2, #311	; 0x137
   1a338:	cmp	r7, r2
   1a33c:	blt	1a374 <flatcc_json_parser_struct_as_root@@Base+0x648>
   1a340:	movw	r1, #0
   1a344:	movt	r1, #32752	; 0x7ff0
   1a348:	mov	r0, #0
   1a34c:	bl	19de0 <flatcc_json_parser_struct_as_root@@Base+0xb4>
   1a350:	vstr	d0, [r9]
   1a354:	cmp	r5, #0
   1a358:	beq	1a368 <flatcc_json_parser_struct_as_root@@Base+0x63c>
   1a35c:	vldr	d16, [r9]
   1a360:	vneg.f64	d16, d16
   1a364:	vstr	d16, [r9]
   1a368:	mov	r0, r4
   1a36c:	sub	sp, fp, #24
   1a370:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a374:	ldr	r8, [fp, #20]
   1a378:	mov	r2, #0
   1a37c:	cmp	r2, r1, lsr #21
   1a380:	bne	1a468 <flatcc_json_parser_struct_as_root@@Base+0x73c>
   1a384:	cmp	r7, #22
   1a388:	bhi	1a468 <flatcc_json_parser_struct_as_root@@Base+0x73c>
   1a38c:	bl	1aad4 <flatcc_json_parser_struct_as_root@@Base+0xda8>
   1a390:	sub	r2, r7, r8
   1a394:	vmov	d0, r0, r1
   1a398:	add	r0, r2, #22
   1a39c:	cmp	r0, #44	; 0x2c
   1a3a0:	bhi	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a3a4:	add	r1, pc, #0
   1a3a8:	ldr	pc, [r1, r0, lsl #2]
   1a3ac:	andeq	sl, r1, r0, ror #8
   1a3b0:	andeq	sl, r1, r4, lsr #9
   1a3b4:	andeq	sl, r1, ip, lsr #9
   1a3b8:			; <UNDEFINED> instruction: 0x0001a4b4
   1a3bc:			; <UNDEFINED> instruction: 0x0001a4bc
   1a3c0:	andeq	sl, r1, r4, asr #9
   1a3c4:	andeq	sl, r1, ip, asr #9
   1a3c8:	ldrdeq	sl, [r1], -r4
   1a3cc:	ldrdeq	sl, [r1], -ip
   1a3d0:	andeq	sl, r1, r4, ror #9
   1a3d4:	andeq	sl, r1, ip, ror #9
   1a3d8:	strdeq	sl, [r1], -r4
   1a3dc:	strdeq	sl, [r1], -ip
   1a3e0:	andeq	sl, r1, r4, lsl #10
   1a3e4:	andeq	sl, r1, ip, lsl #10
   1a3e8:	andeq	sl, r1, r4, lsl r5
   1a3ec:	andeq	sl, r1, ip, lsl r5
   1a3f0:	andeq	sl, r1, r4, lsr #10
   1a3f4:	andeq	sl, r1, ip, lsr #10
   1a3f8:	andeq	sl, r1, r4, lsr r5
   1a3fc:	andeq	sl, r1, ip, lsr r5
   1a400:	andeq	sl, r1, r4, asr #10
   1a404:	andeq	sl, r1, r0, asr r3
   1a408:	andeq	sl, r1, r0, asr r5
   1a40c:	andeq	sl, r1, ip, asr r5
   1a410:	andeq	sl, r1, r8, ror #10
   1a414:	andeq	sl, r1, r4, ror r5
   1a418:	andeq	sl, r1, r0, lsl #11
   1a41c:	andeq	sl, r1, ip, lsl #11
   1a420:	muleq	r1, r8, r5
   1a424:	andeq	sl, r1, r4, lsr #11
   1a428:			; <UNDEFINED> instruction: 0x0001a5b0
   1a42c:			; <UNDEFINED> instruction: 0x0001a5bc
   1a430:	andeq	sl, r1, r8, asr #11
   1a434:	ldrdeq	sl, [r1], -r4
   1a438:	andeq	sl, r1, r0, ror #11
   1a43c:	andeq	sl, r1, ip, ror #11
   1a440:	strdeq	sl, [r1], -r8
   1a444:	andeq	sl, r1, r4, lsl #12
   1a448:	andeq	sl, r1, r0, lsl r6
   1a44c:	andeq	sl, r1, ip, lsl r6
   1a450:	andeq	sl, r1, r8, lsr #12
   1a454:	andeq	sl, r1, r4, lsr r6
   1a458:	andeq	sl, r1, r0, asr #12
   1a45c:	andeq	sl, r1, ip, asr #12
   1a460:	vldr	d16, [pc, #656]	; 1a6f8 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   1a464:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a468:	ldr	r2, [fp, #24]
   1a46c:	stm	sp, {r2, r9}
   1a470:	mov	r2, r7
   1a474:	mov	r3, r8
   1a478:	bl	17208 <grisu3_diy_fp_encode_double@@Base>
   1a47c:	cmp	r0, #0
   1a480:	bne	1a354 <flatcc_json_parser_struct_as_root@@Base+0x628>
   1a484:	add	r1, sp, #12
   1a488:	mov	r0, r6
   1a48c:	bl	1299c <strtod@plt>
   1a490:	vstr	d0, [r9]
   1a494:	ldr	r0, [sp, #12]
   1a498:	cmp	r0, r4
   1a49c:	movcc	r4, r0
   1a4a0:	b	1a368 <flatcc_json_parser_struct_as_root@@Base+0x63c>
   1a4a4:	vldr	d16, [pc, #428]	; 1a658 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   1a4a8:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4ac:	vldr	d16, [pc, #428]	; 1a660 <flatcc_json_parser_struct_as_root@@Base+0x934>
   1a4b0:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4b4:	vldr	d16, [pc, #428]	; 1a668 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   1a4b8:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4bc:	vldr	d16, [pc, #428]	; 1a670 <flatcc_json_parser_struct_as_root@@Base+0x944>
   1a4c0:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4c4:	vldr	d16, [pc, #428]	; 1a678 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   1a4c8:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4cc:	vldr	d16, [pc, #428]	; 1a680 <flatcc_json_parser_struct_as_root@@Base+0x954>
   1a4d0:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4d4:	vldr	d16, [pc, #428]	; 1a688 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   1a4d8:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4dc:	vldr	d16, [pc, #428]	; 1a690 <flatcc_json_parser_struct_as_root@@Base+0x964>
   1a4e0:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4e4:	vldr	d16, [pc, #428]	; 1a698 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   1a4e8:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4ec:	vldr	d16, [pc, #428]	; 1a6a0 <flatcc_json_parser_struct_as_root@@Base+0x974>
   1a4f0:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4f4:	vldr	d16, [pc, #428]	; 1a6a8 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   1a4f8:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a4fc:	vldr	d16, [pc, #428]	; 1a6b0 <flatcc_json_parser_struct_as_root@@Base+0x984>
   1a500:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a504:	vldr	d16, [pc, #428]	; 1a6b8 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   1a508:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a50c:	vldr	d16, [pc, #428]	; 1a6c0 <flatcc_json_parser_struct_as_root@@Base+0x994>
   1a510:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a514:	vldr	d16, [pc, #428]	; 1a6c8 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   1a518:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a51c:	vldr	d16, [pc, #428]	; 1a6d0 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   1a520:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a524:	vldr	d16, [pc, #428]	; 1a6d8 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   1a528:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a52c:	vldr	d16, [pc, #428]	; 1a6e0 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   1a530:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a534:	vldr	d16, [pc, #428]	; 1a6e8 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   1a538:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a53c:	vldr	d16, [pc, #428]	; 1a6f0 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   1a540:	b	1a548 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   1a544:	vmov.f64	d16, #36	; 0x41200000  10.0
   1a548:	vdiv.f64	d0, d0, d16
   1a54c:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a550:	vmov.f64	d16, #36	; 0x41200000  10.0
   1a554:	vmul.f64	d0, d0, d16
   1a558:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a55c:	vldr	d16, [pc, #396]	; 1a6f0 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   1a560:	vmul.f64	d0, d0, d16
   1a564:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a568:	vldr	d16, [pc, #376]	; 1a6e8 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   1a56c:	vmul.f64	d0, d0, d16
   1a570:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a574:	vldr	d16, [pc, #356]	; 1a6e0 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   1a578:	vmul.f64	d0, d0, d16
   1a57c:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a580:	vldr	d16, [pc, #336]	; 1a6d8 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   1a584:	vmul.f64	d0, d0, d16
   1a588:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a58c:	vldr	d16, [pc, #316]	; 1a6d0 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   1a590:	vmul.f64	d0, d0, d16
   1a594:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a598:	vldr	d16, [pc, #296]	; 1a6c8 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   1a59c:	vmul.f64	d0, d0, d16
   1a5a0:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5a4:	vldr	d16, [pc, #276]	; 1a6c0 <flatcc_json_parser_struct_as_root@@Base+0x994>
   1a5a8:	vmul.f64	d0, d0, d16
   1a5ac:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5b0:	vldr	d16, [pc, #256]	; 1a6b8 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   1a5b4:	vmul.f64	d0, d0, d16
   1a5b8:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5bc:	vldr	d16, [pc, #236]	; 1a6b0 <flatcc_json_parser_struct_as_root@@Base+0x984>
   1a5c0:	vmul.f64	d0, d0, d16
   1a5c4:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5c8:	vldr	d16, [pc, #216]	; 1a6a8 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   1a5cc:	vmul.f64	d0, d0, d16
   1a5d0:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5d4:	vldr	d16, [pc, #196]	; 1a6a0 <flatcc_json_parser_struct_as_root@@Base+0x974>
   1a5d8:	vmul.f64	d0, d0, d16
   1a5dc:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5e0:	vldr	d16, [pc, #176]	; 1a698 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   1a5e4:	vmul.f64	d0, d0, d16
   1a5e8:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5ec:	vldr	d16, [pc, #156]	; 1a690 <flatcc_json_parser_struct_as_root@@Base+0x964>
   1a5f0:	vmul.f64	d0, d0, d16
   1a5f4:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5f8:	vldr	d16, [pc, #136]	; 1a688 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   1a5fc:	vmul.f64	d0, d0, d16
   1a600:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a604:	vldr	d16, [pc, #116]	; 1a680 <flatcc_json_parser_struct_as_root@@Base+0x954>
   1a608:	vmul.f64	d0, d0, d16
   1a60c:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a610:	vldr	d16, [pc, #96]	; 1a678 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   1a614:	vmul.f64	d0, d0, d16
   1a618:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a61c:	vldr	d16, [pc, #76]	; 1a670 <flatcc_json_parser_struct_as_root@@Base+0x944>
   1a620:	vmul.f64	d0, d0, d16
   1a624:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a628:	vldr	d16, [pc, #56]	; 1a668 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   1a62c:	vmul.f64	d0, d0, d16
   1a630:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a634:	vldr	d16, [pc, #36]	; 1a660 <flatcc_json_parser_struct_as_root@@Base+0x934>
   1a638:	vmul.f64	d0, d0, d16
   1a63c:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a640:	vldr	d16, [pc, #16]	; 1a658 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   1a644:	vmul.f64	d0, d0, d16
   1a648:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a64c:	vldr	d16, [pc, #164]	; 1a6f8 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   1a650:	vmul.f64	d0, d0, d16
   1a654:	b	1a350 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a658:	usatle	lr, #2, r0, asr #30
   1a65c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1a660:	ldmvc	r5!, {r6, sl, fp, pc}
   1a664:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1a668:	addsvs	r3, r1, r0, lsl #26
   1a66c:	mvnmi	r5, #228, 16	; 0xe40000
   1a670:	strbvs	ip, [lr, -r0, lsl #16]
   1a674:			; <UNDEFINED> instruction: 0x43abc16d
   1a678:	ldrbhi	sl, [r8]
   1a67c:	cmnmi	r6, #1459617792	; 0x57000000
   1a680:	strbcc	r8, [r0, r0]!
   1a684:	movtmi	ip, #4985	; 0x1379
   1a688:	ldrtcs	r0, [r4], -r0
   1a68c:	movwmi	r6, #52213	; 0xcbf5
   1a690:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1a694:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1a698:	strb	r0, [r0, #-0]
   1a69c:	adcmi	r3, r2, #156	; 0x9c
   1a6a0:	andge	r0, r0, #0
   1a6a4:	rsbmi	r1, sp, #148, 20	; 0x94000
   1a6a8:	stmda	r0, {}	; <UNPREDICTABLE>
   1a6ac:	eorsmi	r4, r7, #7733248	; 0x760000
   1a6b0:	andcs	r0, r0, r0
   1a6b4:	andmi	sl, r2, #95	; 0x5f
   1a6b8:	andeq	r0, r0, r0
   1a6bc:	bicmi	ip, sp, r5, ror #26
   1a6c0:	andeq	r0, r0, r0
   1a6c4:	orrsmi	sp, r7, r4, lsl #15
   1a6c8:	andeq	r0, r0, r0
   1a6cc:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1a6d0:	andeq	r0, r0, r0
   1a6d4:	smlawbmi	lr, r0, r4, r8
   1a6d8:	andeq	r0, r0, r0
   1a6dc:	rscsmi	r6, r8, r0, lsl #20
   1a6e0:	andeq	r0, r0, r0
   1a6e4:	sbcmi	r8, r3, r0, lsl #16
   1a6e8:	andeq	r0, r0, r0
   1a6ec:	addmi	r4, pc, r0
   1a6f0:	andeq	r0, r0, r0
   1a6f4:	subsmi	r0, r9, r0
   1a6f8:			; <UNDEFINED> instruction: 0x064dd592
   1a6fc:	strmi	pc, [r0], #207	; 0xcf
   1a700:	push	{fp, lr}
   1a704:	mov	fp, sp
   1a708:	cmp	r3, #0
   1a70c:	beq	1a71c <flatcc_json_parser_struct_as_root@@Base+0x9f0>
   1a710:	mov	r3, #8
   1a714:	bl	17770 <flatcc_json_parser_set_error@@Base>
   1a718:	pop	{fp, pc}
   1a71c:	ldr	ip, [fp, #12]
   1a720:	ldr	lr, [fp, #8]
   1a724:	subs	r3, lr, #256	; 0x100
   1a728:	sbcs	r3, ip, #0
   1a72c:	bcc	1a73c <flatcc_json_parser_struct_as_root@@Base+0xa10>
   1a730:	mov	r3, #7
   1a734:	bl	17770 <flatcc_json_parser_set_error@@Base>
   1a738:	pop	{fp, pc}
   1a73c:	ldr	r0, [fp, #16]
   1a740:	strb	lr, [r0]
   1a744:	mov	r0, r1
   1a748:	pop	{fp, pc}
   1a74c:	push	{r4, r5, fp, lr}
   1a750:	add	fp, sp, #8
   1a754:	mov	r4, r2
   1a758:	mov	r5, r0
   1a75c:	bl	185f4 <flatcc_json_parser_float@@Base+0x140>
   1a760:	mov	r1, r0
   1a764:	ldr	r0, [r5, #12]
   1a768:	cmp	r0, #0
   1a76c:	movne	r0, r1
   1a770:	popne	{r4, r5, fp, pc}
   1a774:	mov	r0, r5
   1a778:	mov	r2, r4
   1a77c:	pop	{r4, r5, fp, lr}
   1a780:	b	17d84 <flatcc_json_parser_skip_constant@@Base+0x8c>
   1a784:	bx	lr
   1a788:	eor	r1, r1, #-2147483648	; 0x80000000
   1a78c:	b	1a794 <flatcc_json_parser_struct_as_root@@Base+0xa68>
   1a790:	eor	r3, r3, #-2147483648	; 0x80000000
   1a794:	push	{r4, r5, lr}
   1a798:	lsl	r4, r1, #1
   1a79c:	lsl	r5, r3, #1
   1a7a0:	teq	r4, r5
   1a7a4:	teqeq	r0, r2
   1a7a8:	orrsne	ip, r4, r0
   1a7ac:	orrsne	ip, r5, r2
   1a7b0:	mvnsne	ip, r4, asr #21
   1a7b4:	mvnsne	ip, r5, asr #21
   1a7b8:	beq	1a9a4 <flatcc_json_parser_struct_as_root@@Base+0xc78>
   1a7bc:	lsr	r4, r4, #21
   1a7c0:	rsbs	r5, r4, r5, lsr #21
   1a7c4:	rsblt	r5, r5, #0
   1a7c8:	ble	1a7e8 <flatcc_json_parser_struct_as_root@@Base+0xabc>
   1a7cc:	add	r4, r4, r5
   1a7d0:	eor	r2, r0, r2
   1a7d4:	eor	r3, r1, r3
   1a7d8:	eor	r0, r2, r0
   1a7dc:	eor	r1, r3, r1
   1a7e0:	eor	r2, r0, r2
   1a7e4:	eor	r3, r1, r3
   1a7e8:	cmp	r5, #54	; 0x36
   1a7ec:	pophi	{r4, r5, pc}
   1a7f0:	tst	r1, #-2147483648	; 0x80000000
   1a7f4:	lsl	r1, r1, #12
   1a7f8:	mov	ip, #1048576	; 0x100000
   1a7fc:	orr	r1, ip, r1, lsr #12
   1a800:	beq	1a80c <flatcc_json_parser_struct_as_root@@Base+0xae0>
   1a804:	rsbs	r0, r0, #0
   1a808:	rsc	r1, r1, #0
   1a80c:	tst	r3, #-2147483648	; 0x80000000
   1a810:	lsl	r3, r3, #12
   1a814:	orr	r3, ip, r3, lsr #12
   1a818:	beq	1a824 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   1a81c:	rsbs	r2, r2, #0
   1a820:	rsc	r3, r3, #0
   1a824:	teq	r4, r5
   1a828:	beq	1a98c <flatcc_json_parser_struct_as_root@@Base+0xc60>
   1a82c:	sub	r4, r4, #1
   1a830:	rsbs	lr, r5, #32
   1a834:	blt	1a850 <flatcc_json_parser_struct_as_root@@Base+0xb24>
   1a838:	lsl	ip, r2, lr
   1a83c:	adds	r0, r0, r2, lsr r5
   1a840:	adc	r1, r1, #0
   1a844:	adds	r0, r0, r3, lsl lr
   1a848:	adcs	r1, r1, r3, asr r5
   1a84c:	b	1a86c <flatcc_json_parser_struct_as_root@@Base+0xb40>
   1a850:	sub	r5, r5, #32
   1a854:	add	lr, lr, #32
   1a858:	cmp	r2, #1
   1a85c:	lsl	ip, r3, lr
   1a860:	orrcs	ip, ip, #2
   1a864:	adds	r0, r0, r3, asr r5
   1a868:	adcs	r1, r1, r3, asr #31
   1a86c:	and	r5, r1, #-2147483648	; 0x80000000
   1a870:	bpl	1a880 <flatcc_json_parser_struct_as_root@@Base+0xb54>
   1a874:	rsbs	ip, ip, #0
   1a878:	rscs	r0, r0, #0
   1a87c:	rsc	r1, r1, #0
   1a880:	cmp	r1, #1048576	; 0x100000
   1a884:	bcc	1a8c4 <flatcc_json_parser_struct_as_root@@Base+0xb98>
   1a888:	cmp	r1, #2097152	; 0x200000
   1a88c:	bcc	1a8ac <flatcc_json_parser_struct_as_root@@Base+0xb80>
   1a890:	lsrs	r1, r1, #1
   1a894:	rrxs	r0, r0
   1a898:	rrx	ip, ip
   1a89c:	add	r4, r4, #1
   1a8a0:	lsl	r2, r4, #21
   1a8a4:	cmn	r2, #4194304	; 0x400000
   1a8a8:	bcs	1aa04 <flatcc_json_parser_struct_as_root@@Base+0xcd8>
   1a8ac:	cmp	ip, #-2147483648	; 0x80000000
   1a8b0:	lsrseq	ip, r0, #1
   1a8b4:	adcs	r0, r0, #0
   1a8b8:	adc	r1, r1, r4, lsl #20
   1a8bc:	orr	r1, r1, r5
   1a8c0:	pop	{r4, r5, pc}
   1a8c4:	lsls	ip, ip, #1
   1a8c8:	adcs	r0, r0, r0
   1a8cc:	adc	r1, r1, r1
   1a8d0:	tst	r1, #1048576	; 0x100000
   1a8d4:	sub	r4, r4, #1
   1a8d8:	bne	1a8ac <flatcc_json_parser_struct_as_root@@Base+0xb80>
   1a8dc:	teq	r1, #0
   1a8e0:	moveq	r1, r0
   1a8e4:	moveq	r0, #0
   1a8e8:	clz	r3, r1
   1a8ec:	addeq	r3, r3, #32
   1a8f0:	sub	r3, r3, #11
   1a8f4:	subs	r2, r3, #32
   1a8f8:	bge	1a91c <flatcc_json_parser_struct_as_root@@Base+0xbf0>
   1a8fc:	adds	r2, r2, #12
   1a900:	ble	1a918 <flatcc_json_parser_struct_as_root@@Base+0xbec>
   1a904:	add	ip, r2, #20
   1a908:	rsb	r2, r2, #12
   1a90c:	lsl	r0, r1, ip
   1a910:	lsr	r1, r1, r2
   1a914:	b	1a92c <flatcc_json_parser_struct_as_root@@Base+0xc00>
   1a918:	add	r2, r2, #20
   1a91c:	rsble	ip, r2, #32
   1a920:	lsl	r1, r1, r2
   1a924:	orrle	r1, r1, r0, lsr ip
   1a928:	lslle	r0, r0, r2
   1a92c:	subs	r4, r4, r3
   1a930:	addge	r1, r1, r4, lsl #20
   1a934:	orrge	r1, r1, r5
   1a938:	popge	{r4, r5, pc}
   1a93c:	mvn	r4, r4
   1a940:	subs	r4, r4, #31
   1a944:	bge	1a980 <flatcc_json_parser_struct_as_root@@Base+0xc54>
   1a948:	adds	r4, r4, #12
   1a94c:	bgt	1a968 <flatcc_json_parser_struct_as_root@@Base+0xc3c>
   1a950:	add	r4, r4, #20
   1a954:	rsb	r2, r4, #32
   1a958:	lsr	r0, r0, r4
   1a95c:	orr	r0, r0, r1, lsl r2
   1a960:	orr	r1, r5, r1, lsr r4
   1a964:	pop	{r4, r5, pc}
   1a968:	rsb	r4, r4, #12
   1a96c:	rsb	r2, r4, #32
   1a970:	lsr	r0, r0, r2
   1a974:	orr	r0, r0, r1, lsl r4
   1a978:	mov	r1, r5
   1a97c:	pop	{r4, r5, pc}
   1a980:	lsr	r0, r1, r4
   1a984:	mov	r1, r5
   1a988:	pop	{r4, r5, pc}
   1a98c:	teq	r4, #0
   1a990:	eor	r3, r3, #1048576	; 0x100000
   1a994:	eoreq	r1, r1, #1048576	; 0x100000
   1a998:	addeq	r4, r4, #1
   1a99c:	subne	r5, r5, #1
   1a9a0:	b	1a82c <flatcc_json_parser_struct_as_root@@Base+0xb00>
   1a9a4:	mvns	ip, r4, asr #21
   1a9a8:	mvnsne	ip, r5, asr #21
   1a9ac:	beq	1aa14 <flatcc_json_parser_struct_as_root@@Base+0xce8>
   1a9b0:	teq	r4, r5
   1a9b4:	teqeq	r0, r2
   1a9b8:	beq	1a9cc <flatcc_json_parser_struct_as_root@@Base+0xca0>
   1a9bc:	orrs	ip, r4, r0
   1a9c0:	moveq	r1, r3
   1a9c4:	moveq	r0, r2
   1a9c8:	pop	{r4, r5, pc}
   1a9cc:	teq	r1, r3
   1a9d0:	movne	r1, #0
   1a9d4:	movne	r0, #0
   1a9d8:	popne	{r4, r5, pc}
   1a9dc:	lsrs	ip, r4, #21
   1a9e0:	bne	1a9f4 <flatcc_json_parser_struct_as_root@@Base+0xcc8>
   1a9e4:	lsls	r0, r0, #1
   1a9e8:	adcs	r1, r1, r1
   1a9ec:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1a9f0:	pop	{r4, r5, pc}
   1a9f4:	adds	r4, r4, #4194304	; 0x400000
   1a9f8:	addcc	r1, r1, #1048576	; 0x100000
   1a9fc:	popcc	{r4, r5, pc}
   1aa00:	and	r5, r1, #-2147483648	; 0x80000000
   1aa04:	orr	r1, r5, #2130706432	; 0x7f000000
   1aa08:	orr	r1, r1, #15728640	; 0xf00000
   1aa0c:	mov	r0, #0
   1aa10:	pop	{r4, r5, pc}
   1aa14:	mvns	ip, r4, asr #21
   1aa18:	movne	r1, r3
   1aa1c:	movne	r0, r2
   1aa20:	mvnseq	ip, r5, asr #21
   1aa24:	movne	r3, r1
   1aa28:	movne	r2, r0
   1aa2c:	orrs	r4, r0, r1, lsl #12
   1aa30:	orrseq	r5, r2, r3, lsl #12
   1aa34:	teqeq	r1, r3
   1aa38:	orrne	r1, r1, #524288	; 0x80000
   1aa3c:	pop	{r4, r5, pc}
   1aa40:	teq	r0, #0
   1aa44:	moveq	r1, #0
   1aa48:	bxeq	lr
   1aa4c:	push	{r4, r5, lr}
   1aa50:	mov	r4, #1024	; 0x400
   1aa54:	add	r4, r4, #50	; 0x32
   1aa58:	mov	r5, #0
   1aa5c:	mov	r1, #0
   1aa60:	b	1a8dc <flatcc_json_parser_struct_as_root@@Base+0xbb0>
   1aa64:	teq	r0, #0
   1aa68:	moveq	r1, #0
   1aa6c:	bxeq	lr
   1aa70:	push	{r4, r5, lr}
   1aa74:	mov	r4, #1024	; 0x400
   1aa78:	add	r4, r4, #50	; 0x32
   1aa7c:	ands	r5, r0, #-2147483648	; 0x80000000
   1aa80:	rsbmi	r0, r0, #0
   1aa84:	mov	r1, #0
   1aa88:	b	1a8dc <flatcc_json_parser_struct_as_root@@Base+0xbb0>
   1aa8c:	lsls	r2, r0, #1
   1aa90:	asr	r1, r2, #3
   1aa94:	rrx	r1, r1
   1aa98:	lsl	r0, r2, #28
   1aa9c:	andsne	r3, r2, #-16777216	; 0xff000000
   1aaa0:	teqne	r3, #-16777216	; 0xff000000
   1aaa4:	eorne	r1, r1, #939524096	; 0x38000000
   1aaa8:	bxne	lr
   1aaac:	bics	r2, r2, #-16777216	; 0xff000000
   1aab0:	bxeq	lr
   1aab4:	teq	r3, #-16777216	; 0xff000000
   1aab8:	orreq	r1, r1, #524288	; 0x80000
   1aabc:	bxeq	lr
   1aac0:	push	{r4, r5, lr}
   1aac4:	mov	r4, #896	; 0x380
   1aac8:	and	r5, r1, #-2147483648	; 0x80000000
   1aacc:	bic	r1, r1, #-2147483648	; 0x80000000
   1aad0:	b	1a8dc <flatcc_json_parser_struct_as_root@@Base+0xbb0>
   1aad4:	orrs	r2, r0, r1
   1aad8:	bxeq	lr
   1aadc:	push	{r4, r5, lr}
   1aae0:	mov	r5, #0
   1aae4:	b	1ab04 <flatcc_json_parser_struct_as_root@@Base+0xdd8>
   1aae8:	orrs	r2, r0, r1
   1aaec:	bxeq	lr
   1aaf0:	push	{r4, r5, lr}
   1aaf4:	ands	r5, r1, #-2147483648	; 0x80000000
   1aaf8:	bpl	1ab04 <flatcc_json_parser_struct_as_root@@Base+0xdd8>
   1aafc:	rsbs	r0, r0, #0
   1ab00:	rsc	r1, r1, #0
   1ab04:	mov	r4, #1024	; 0x400
   1ab08:	add	r4, r4, #50	; 0x32
   1ab0c:	lsrs	ip, r1, #22
   1ab10:	beq	1a880 <flatcc_json_parser_struct_as_root@@Base+0xb54>
   1ab14:	mov	r2, #3
   1ab18:	lsrs	ip, ip, #3
   1ab1c:	addne	r2, r2, #3
   1ab20:	lsrs	ip, ip, #3
   1ab24:	addne	r2, r2, #3
   1ab28:	add	r2, r2, ip, lsr #3
   1ab2c:	rsb	r3, r2, #32
   1ab30:	lsl	ip, r0, r3
   1ab34:	lsr	r0, r0, r2
   1ab38:	orr	r0, r0, r1, lsl r3
   1ab3c:	lsr	r1, r1, r2
   1ab40:	add	r4, r4, r2
   1ab44:	b	1a880 <flatcc_json_parser_struct_as_root@@Base+0xb54>

0001ab48 <__libc_csu_init@@Base>:
   1ab48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab4c:	mov	r7, r0
   1ab50:	ldr	r6, [pc, #72]	; 1aba0 <__libc_csu_init@@Base+0x58>
   1ab54:	ldr	r5, [pc, #72]	; 1aba4 <__libc_csu_init@@Base+0x5c>
   1ab58:	add	r6, pc, r6
   1ab5c:	add	r5, pc, r5
   1ab60:	sub	r6, r6, r5
   1ab64:	mov	r8, r1
   1ab68:	mov	r9, r2
   1ab6c:	bl	128d4 <free@plt-0x20>
   1ab70:	asrs	r6, r6, #2
   1ab74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab78:	mov	r4, #0
   1ab7c:	add	r4, r4, #1
   1ab80:	ldr	r3, [r5], #4
   1ab84:	mov	r2, r9
   1ab88:	mov	r1, r8
   1ab8c:	mov	r0, r7
   1ab90:	blx	r3
   1ab94:	cmp	r6, r4
   1ab98:	bne	1ab7c <__libc_csu_init@@Base+0x34>
   1ab9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aba0:	andeq	r3, r1, ip, lsr #7
   1aba4:	andeq	r3, r1, r4, lsr #7

0001aba8 <__libc_csu_fini@@Base>:
   1aba8:	bx	lr

Disassembly of section .fini:

0001abac <.fini>:
   1abac:	push	{r3, lr}
   1abb0:	pop	{r3, pc}
