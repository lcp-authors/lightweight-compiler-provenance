
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010ab8 <.init>:
   10ab8:	push	{r3, lr}
   10abc:	bl	11410 <__assert_fail@plt+0x734>
   10ac0:	pop	{r3, pc}

Disassembly of section .plt:

00010ac4 <calloc@plt-0x14>:
   10ac4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ac8:	ldr	lr, [pc, #4]	; 10ad4 <calloc@plt-0x4>
   10acc:	add	lr, pc, lr
   10ad0:	ldr	pc, [lr, #8]!
   10ad4:	andeq	r7, r1, ip, lsr #10

00010ad8 <calloc@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #94208	; 0x17000
   10ae0:	ldr	pc, [ip, #1324]!	; 0x52c

00010ae4 <fputs_unlocked@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #94208	; 0x17000
   10aec:	ldr	pc, [ip, #1316]!	; 0x524

00010af0 <strcmp@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #94208	; 0x17000
   10af8:	ldr	pc, [ip, #1308]!	; 0x51c

00010afc <fflush@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #94208	; 0x17000
   10b04:	ldr	pc, [ip, #1300]!	; 0x514

00010b08 <free@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #94208	; 0x17000
   10b10:	ldr	pc, [ip, #1292]!	; 0x50c

00010b14 <_exit@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #94208	; 0x17000
   10b1c:	ldr	pc, [ip, #1284]!	; 0x504

00010b20 <memcpy@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #94208	; 0x17000
   10b28:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b2c <mbsinit@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #94208	; 0x17000
   10b34:	ldr	pc, [ip, #1268]!	; 0x4f4

00010b38 <memcmp@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #94208	; 0x17000
   10b40:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b44 <fputc_unlocked@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #94208	; 0x17000
   10b4c:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b50 <dcgettext@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #94208	; 0x17000
   10b58:	ldr	pc, [ip, #1244]!	; 0x4dc

00010b5c <realloc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #94208	; 0x17000
   10b64:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b68 <textdomain@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #94208	; 0x17000
   10b70:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b74 <iswprint@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #94208	; 0x17000
   10b7c:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b80 <fwrite@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #94208	; 0x17000
   10b88:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b8c <lseek64@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #94208	; 0x17000
   10b94:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b98 <__ctype_get_mb_cur_max@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #94208	; 0x17000
   10ba0:	ldr	pc, [ip, #1196]!	; 0x4ac

00010ba4 <__fpending@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #94208	; 0x17000
   10bac:	ldr	pc, [ip, #1188]!	; 0x4a4

00010bb0 <mbrtowc@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #94208	; 0x17000
   10bb8:	ldr	pc, [ip, #1180]!	; 0x49c

00010bbc <error@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #94208	; 0x17000
   10bc4:	ldr	pc, [ip, #1172]!	; 0x494

00010bc8 <getenv@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #94208	; 0x17000
   10bd0:	ldr	pc, [ip, #1164]!	; 0x48c

00010bd4 <malloc@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #94208	; 0x17000
   10bdc:	ldr	pc, [ip, #1156]!	; 0x484

00010be0 <__libc_start_main@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #94208	; 0x17000
   10be8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bec <__freading@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #94208	; 0x17000
   10bf4:	ldr	pc, [ip, #1140]!	; 0x474

00010bf8 <__gmon_start__@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #94208	; 0x17000
   10c00:	ldr	pc, [ip, #1132]!	; 0x46c

00010c04 <__ctype_b_loc@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #94208	; 0x17000
   10c0c:	ldr	pc, [ip, #1124]!	; 0x464

00010c10 <exit@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #94208	; 0x17000
   10c18:	ldr	pc, [ip, #1116]!	; 0x45c

00010c1c <strlen@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #94208	; 0x17000
   10c24:	ldr	pc, [ip, #1108]!	; 0x454

00010c28 <__errno_location@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #94208	; 0x17000
   10c30:	ldr	pc, [ip, #1100]!	; 0x44c

00010c34 <__cxa_atexit@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #94208	; 0x17000
   10c3c:	ldr	pc, [ip, #1092]!	; 0x444

00010c40 <memset@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #94208	; 0x17000
   10c48:	ldr	pc, [ip, #1084]!	; 0x43c

00010c4c <__printf_chk@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #94208	; 0x17000
   10c54:	ldr	pc, [ip, #1076]!	; 0x434

00010c58 <fileno@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #94208	; 0x17000
   10c60:	ldr	pc, [ip, #1068]!	; 0x42c

00010c64 <__fprintf_chk@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #94208	; 0x17000
   10c6c:	ldr	pc, [ip, #1060]!	; 0x424

00010c70 <fclose@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #94208	; 0x17000
   10c78:	ldr	pc, [ip, #1052]!	; 0x41c

00010c7c <fseeko64@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #94208	; 0x17000
   10c84:	ldr	pc, [ip, #1044]!	; 0x414

00010c88 <__overflow@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #94208	; 0x17000
   10c90:	ldr	pc, [ip, #1036]!	; 0x40c

00010c94 <setlocale@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #94208	; 0x17000
   10c9c:	ldr	pc, [ip, #1028]!	; 0x404

00010ca0 <strrchr@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #94208	; 0x17000
   10ca8:	ldr	pc, [ip, #1020]!	; 0x3fc

00010cac <nl_langinfo@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #94208	; 0x17000
   10cb4:	ldr	pc, [ip, #1012]!	; 0x3f4

00010cb8 <bindtextdomain@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #94208	; 0x17000
   10cc0:	ldr	pc, [ip, #1004]!	; 0x3ec

00010cc4 <strncmp@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #94208	; 0x17000
   10ccc:	ldr	pc, [ip, #996]!	; 0x3e4

00010cd0 <abort@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #94208	; 0x17000
   10cd8:	ldr	pc, [ip, #988]!	; 0x3dc

00010cdc <__assert_fail@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #94208	; 0x17000
   10ce4:	ldr	pc, [ip, #980]!	; 0x3d4

Disassembly of section .text:

00010ce8 <.text>:
   10ce8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10cec:	strd	r6, [sp, #8]
   10cf0:	mov	r6, r0
   10cf4:	movw	r0, #28336	; 0x6eb0
   10cf8:	movt	r0, #1
   10cfc:	strd	r8, [sp, #16]
   10d00:	mov	r7, r1
   10d04:	strd	sl, [sp, #24]
   10d08:	str	lr, [sp, #32]
   10d0c:	sub	sp, sp, #20
   10d10:	bl	10bc8 <getenv@plt>
   10d14:	subs	r5, r0, #0
   10d18:	movne	r4, #1
   10d1c:	moveq	r4, #0
   10d20:	beq	112dc <__assert_fail@plt+0x600>
   10d24:	cmp	r6, #1
   10d28:	ble	10e78 <__assert_fail@plt+0x19c>
   10d2c:	movw	r1, #28352	; 0x6ec0
   10d30:	movt	r1, #1
   10d34:	ldr	r0, [r7, #4]
   10d38:	bl	10af0 <strcmp@plt>
   10d3c:	cmp	r0, #0
   10d40:	bne	10e78 <__assert_fail@plt+0x19c>
   10d44:	ldr	r0, [r7]
   10d48:	bl	11a5c <__assert_fail@plt+0xd80>
   10d4c:	movw	r1, #28096	; 0x6dc0
   10d50:	movt	r1, #1
   10d54:	mov	r0, #6
   10d58:	bl	10c94 <setlocale@plt>
   10d5c:	movw	r1, #28356	; 0x6ec4
   10d60:	movt	r1, #1
   10d64:	movw	r0, #28168	; 0x6e08
   10d68:	movt	r0, #1
   10d6c:	bl	10cb8 <bindtextdomain@plt>
   10d70:	movw	r0, #28168	; 0x6e08
   10d74:	movt	r0, #1
   10d78:	bl	10b68 <textdomain@plt>
   10d7c:	movw	r0, #6512	; 0x1970
   10d80:	movt	r0, #1
   10d84:	bl	168e4 <__assert_fail@plt+0x5c08>
   10d88:	cmp	r6, #2
   10d8c:	bne	113c4 <__assert_fail@plt+0x6e8>
   10d90:	ldr	r6, [r7, #4]
   10d94:	movw	r1, #28380	; 0x6edc
   10d98:	movt	r1, #1
   10d9c:	mov	r0, r6
   10da0:	bl	10af0 <strcmp@plt>
   10da4:	cmp	r0, #0
   10da8:	beq	113d0 <__assert_fail@plt+0x6f4>
   10dac:	mov	r0, r6
   10db0:	movw	r1, #28388	; 0x6ee4
   10db4:	movt	r1, #1
   10db8:	bl	10af0 <strcmp@plt>
   10dbc:	cmp	r0, #0
   10dc0:	addne	r7, r7, #4
   10dc4:	movne	r6, #1
   10dc8:	beq	1133c <__assert_fail@plt+0x660>
   10dcc:	ldr	r0, [r7]
   10dd0:	ldrb	r3, [r0]
   10dd4:	cmp	r3, #45	; 0x2d
   10dd8:	moveq	lr, r7
   10ddc:	moveq	ip, #0
   10de0:	moveq	r8, #1
   10de4:	bne	113b4 <__assert_fail@plt+0x6d8>
   10de8:	ldrb	r2, [r0, #1]
   10dec:	mov	r7, lr
   10df0:	add	r0, r0, #1
   10df4:	cmp	r2, #0
   10df8:	beq	11394 <__assert_fail@plt+0x6b8>
   10dfc:	mov	r3, r2
   10e00:	mov	r1, r0
   10e04:	cmp	r3, #101	; 0x65
   10e08:	beq	11230 <__assert_fail@plt+0x554>
   10e0c:	cmp	r3, #110	; 0x6e
   10e10:	beq	11230 <__assert_fail@plt+0x554>
   10e14:	cmp	r3, #69	; 0x45
   10e18:	beq	11230 <__assert_fail@plt+0x554>
   10e1c:	orr	ip, r4, ip
   10e20:	tst	ip, #255	; 0xff
   10e24:	bne	10f28 <__assert_fail@plt+0x24c>
   10e28:	movw	r4, #33052	; 0x811c
   10e2c:	movt	r4, #2
   10e30:	sub	r7, r7, #4
   10e34:	mov	r5, #32
   10e38:	ldr	r0, [r7, #4]!
   10e3c:	ldr	r1, [r4]
   10e40:	bl	10ae4 <fputs_unlocked@plt>
   10e44:	subs	r6, r6, #1
   10e48:	beq	10ed4 <__assert_fail@plt+0x1f8>
   10e4c:	ldr	r0, [r4]
   10e50:	ldr	r3, [r0, #20]
   10e54:	ldr	r2, [r0, #24]
   10e58:	cmp	r3, r2
   10e5c:	addcc	r2, r3, #1
   10e60:	strcc	r2, [r0, #20]
   10e64:	strbcc	r5, [r3]
   10e68:	bcc	10e38 <__assert_fail@plt+0x15c>
   10e6c:	mov	r1, #32
   10e70:	bl	10c88 <__overflow@plt>
   10e74:	b	10e38 <__assert_fail@plt+0x15c>
   10e78:	ldr	r0, [r7], #4
   10e7c:	sub	r6, r6, #1
   10e80:	mov	r8, #1
   10e84:	bl	11a5c <__assert_fail@plt+0xd80>
   10e88:	movw	r1, #28096	; 0x6dc0
   10e8c:	movt	r1, #1
   10e90:	mov	r0, #6
   10e94:	bl	10c94 <setlocale@plt>
   10e98:	movw	r1, #28356	; 0x6ec4
   10e9c:	movt	r1, #1
   10ea0:	movw	r0, #28168	; 0x6e08
   10ea4:	movt	r0, #1
   10ea8:	bl	10cb8 <bindtextdomain@plt>
   10eac:	movw	r0, #28168	; 0x6e08
   10eb0:	movt	r0, #1
   10eb4:	bl	10b68 <textdomain@plt>
   10eb8:	movw	r0, #6512	; 0x1970
   10ebc:	movt	r0, #1
   10ec0:	bl	168e4 <__assert_fail@plt+0x5c08>
   10ec4:	cmp	r5, #0
   10ec8:	bne	10f28 <__assert_fail@plt+0x24c>
   10ecc:	cmp	r6, #0
   10ed0:	bgt	10e28 <__assert_fail@plt+0x14c>
   10ed4:	cmp	r8, #0
   10ed8:	beq	10f08 <__assert_fail@plt+0x22c>
   10edc:	movw	r3, #33052	; 0x811c
   10ee0:	movt	r3, #2
   10ee4:	ldr	r0, [r3]
   10ee8:	ldr	r3, [r0, #20]
   10eec:	ldr	r2, [r0, #24]
   10ef0:	cmp	r3, r2
   10ef4:	addcc	r1, r3, #1
   10ef8:	movcc	r2, #10
   10efc:	strcc	r1, [r0, #20]
   10f00:	strbcc	r2, [r3]
   10f04:	bcs	11388 <__assert_fail@plt+0x6ac>
   10f08:	mov	r0, #0
   10f0c:	add	sp, sp, #20
   10f10:	ldrd	r4, [sp]
   10f14:	ldrd	r6, [sp, #8]
   10f18:	ldrd	r8, [sp, #16]
   10f1c:	ldrd	sl, [sp, #24]
   10f20:	add	sp, sp, #32
   10f24:	pop	{pc}		; (ldr pc, [sp], #4)
   10f28:	cmp	r6, #0
   10f2c:	ble	10ed4 <__assert_fail@plt+0x1f8>
   10f30:	movw	r9, #33052	; 0x811c
   10f34:	movt	r9, #2
   10f38:	sub	r7, r7, #4
   10f3c:	ldr	r5, [r7, #4]!
   10f40:	b	10f6c <__assert_fail@plt+0x290>
   10f44:	mov	sl, r3
   10f48:	ldr	r0, [r9]
   10f4c:	ldr	r2, [r0, #20]
   10f50:	ldr	r1, [r0, #24]
   10f54:	cmp	r2, r1
   10f58:	addcc	r1, r2, #1
   10f5c:	strcc	r1, [r0, #20]
   10f60:	strbcc	r3, [r2]
   10f64:	bcs	11298 <__assert_fail@plt+0x5bc>
   10f68:	mov	r5, r4
   10f6c:	mov	r4, r5
   10f70:	ldrb	r3, [r4], #1
   10f74:	cmp	r3, #0
   10f78:	beq	112a4 <__assert_fail@plt+0x5c8>
   10f7c:	cmp	r3, #92	; 0x5c
   10f80:	bne	10f44 <__assert_fail@plt+0x268>
   10f84:	ldrb	sl, [r5, #1]
   10f88:	cmp	sl, #0
   10f8c:	beq	10f44 <__assert_fail@plt+0x268>
   10f90:	sub	r3, sl, #48	; 0x30
   10f94:	add	r4, r5, #2
   10f98:	cmp	r3, #72	; 0x48
   10f9c:	ldrls	pc, [pc, r3, lsl #2]
   10fa0:	b	11208 <__assert_fail@plt+0x52c>
   10fa4:	andeq	r1, r1, r0, lsr r1
   10fa8:	andeq	r1, r1, ip, ror #1
   10fac:	andeq	r1, r1, ip, ror #1
   10fb0:	andeq	r1, r1, ip, ror #1
   10fb4:	andeq	r1, r1, ip, ror #1
   10fb8:	andeq	r1, r1, ip, ror #1
   10fbc:	andeq	r1, r1, ip, ror #1
   10fc0:	andeq	r1, r1, ip, ror #1
   10fc4:	andeq	r1, r1, r8, lsl #4
   10fc8:	andeq	r1, r1, r8, lsl #4
   10fcc:	andeq	r1, r1, r8, lsl #4
   10fd0:	andeq	r1, r1, r8, lsl #4
   10fd4:	andeq	r1, r1, r8, lsl #4
   10fd8:	andeq	r1, r1, r8, lsl #4
   10fdc:	andeq	r1, r1, r8, lsl #4
   10fe0:	andeq	r1, r1, r8, lsl #4
   10fe4:	andeq	r1, r1, r8, lsl #4
   10fe8:	andeq	r1, r1, r8, lsl #4
   10fec:	andeq	r1, r1, r8, lsl #4
   10ff0:	andeq	r1, r1, r8, lsl #4
   10ff4:	andeq	r1, r1, r8, lsl #4
   10ff8:	andeq	r1, r1, r8, lsl #4
   10ffc:	andeq	r1, r1, r8, lsl #4
   11000:	andeq	r1, r1, r8, lsl #4
   11004:	andeq	r1, r1, r8, lsl #4
   11008:	andeq	r1, r1, r8, lsl #4
   1100c:	andeq	r1, r1, r8, lsl #4
   11010:	andeq	r1, r1, r8, lsl #4
   11014:	andeq	r1, r1, r8, lsl #4
   11018:	andeq	r1, r1, r8, lsl #4
   1101c:	andeq	r1, r1, r8, lsl #4
   11020:	andeq	r1, r1, r8, lsl #4
   11024:	andeq	r1, r1, r8, lsl #4
   11028:	andeq	r1, r1, r8, lsl #4
   1102c:	andeq	r1, r1, r8, lsl #4
   11030:	andeq	r1, r1, r8, lsl #4
   11034:	andeq	r1, r1, r8, lsl #4
   11038:	andeq	r1, r1, r8, lsl #4
   1103c:	andeq	r1, r1, r8, lsl #4
   11040:	andeq	r1, r1, r8, lsl #4
   11044:	andeq	r1, r1, r8, lsl #4
   11048:	andeq	r1, r1, r8, lsl #4
   1104c:	andeq	r1, r1, r8, lsl #4
   11050:	andeq	r1, r1, r8, lsl #4
   11054:	andeq	r1, r1, r8, asr #1
   11058:	andeq	r1, r1, r8, lsl #4
   1105c:	andeq	r1, r1, r8, lsl #4
   11060:	andeq	r1, r1, r8, lsl #4
   11064:	andeq	r1, r1, r8, lsl #4
   11068:	andeq	r1, r1, r0, ror #1
   1106c:	ldrdeq	r1, [r1], -r4
   11070:	andeq	r0, r1, r8, lsl #30
   11074:	andeq	r1, r1, r8, lsl #4
   11078:	strdeq	r1, [r1], -ip
   1107c:	strdeq	r1, [r1], -r0
   11080:	andeq	r1, r1, r8, lsl #4
   11084:	andeq	r1, r1, r8, lsl #4
   11088:	andeq	r1, r1, r8, lsl #4
   1108c:	andeq	r1, r1, r8, lsl #4
   11090:	andeq	r1, r1, r8, lsl #4
   11094:	andeq	r1, r1, r8, lsl #4
   11098:	andeq	r1, r1, r8, lsl #4
   1109c:	andeq	r1, r1, r4, ror #3
   110a0:	andeq	r1, r1, r8, lsl #4
   110a4:	andeq	r1, r1, r8, lsl #4
   110a8:	andeq	r1, r1, r8, lsl #4
   110ac:	ldrdeq	r1, [r1], -r8
   110b0:	andeq	r1, r1, r8, lsl #4
   110b4:	andeq	r1, r1, ip, asr #3
   110b8:	andeq	r1, r1, r8, lsl #4
   110bc:	andeq	r1, r1, r0, asr #3
   110c0:	andeq	r1, r1, r8, lsl #4
   110c4:	andeq	r1, r1, r8, asr r1
   110c8:	mov	r3, sl
   110cc:	mov	sl, #92	; 0x5c
   110d0:	b	10f48 <__assert_fail@plt+0x26c>
   110d4:	mov	sl, #8
   110d8:	mov	r3, sl
   110dc:	b	10f48 <__assert_fail@plt+0x26c>
   110e0:	mov	sl, #7
   110e4:	mov	r3, sl
   110e8:	b	10f48 <__assert_fail@plt+0x26c>
   110ec:	ldrb	r2, [r5, #2]
   110f0:	sub	r2, r2, #48	; 0x30
   110f4:	uxtb	r3, r3
   110f8:	uxtb	r2, r2
   110fc:	cmp	r2, #7
   11100:	bhi	11110 <__assert_fail@plt+0x434>
   11104:	add	r3, r2, r3, lsl #3
   11108:	add	r4, r4, #1
   1110c:	and	r3, r3, #255	; 0xff
   11110:	ldrb	r2, [r4]
   11114:	sub	r1, r2, #48	; 0x30
   11118:	cmp	r1, #7
   1111c:	addls	r3, r2, r3, lsl #3
   11120:	addls	r4, r4, #1
   11124:	subls	r3, r3, #48	; 0x30
   11128:	andls	r3, r3, #255	; 0xff
   1112c:	b	10f44 <__assert_fail@plt+0x268>
   11130:	ldrb	sl, [r5, #2]
   11134:	sub	r3, sl, #48	; 0x30
   11138:	uxtb	r2, r3
   1113c:	cmp	r2, #7
   11140:	movhi	sl, #0
   11144:	movhi	r3, sl
   11148:	bhi	10f48 <__assert_fail@plt+0x26c>
   1114c:	ldrb	r2, [r5, #3]
   11150:	add	r4, r5, #3
   11154:	b	110f0 <__assert_fail@plt+0x414>
   11158:	ldrb	fp, [r5, #2]
   1115c:	bl	10c04 <__ctype_b_loc@plt>
   11160:	ldr	r2, [r0]
   11164:	lsl	r3, fp, #1
   11168:	ldrh	r3, [r2, r3]
   1116c:	tst	r3, #4096	; 0x1000
   11170:	beq	11208 <__assert_fail@plt+0x52c>
   11174:	mov	r0, fp
   11178:	bl	114c4 <__assert_fail@plt+0x7e8>
   1117c:	ldrb	r1, [r5, #3]
   11180:	uxtb	r3, r0
   11184:	lsl	r0, r1, #1
   11188:	ldrh	r2, [r2, r0]
   1118c:	tst	r2, #4096	; 0x1000
   11190:	addeq	r4, r5, #3
   11194:	moveq	sl, r3
   11198:	beq	10f48 <__assert_fail@plt+0x26c>
   1119c:	lsl	r3, r3, #4
   111a0:	mov	r0, r1
   111a4:	add	r4, r5, #4
   111a8:	uxtb	r2, r3
   111ac:	bl	114c4 <__assert_fail@plt+0x7e8>
   111b0:	add	r3, r2, r0
   111b4:	uxtb	r3, r3
   111b8:	mov	sl, r3
   111bc:	b	10f48 <__assert_fail@plt+0x26c>
   111c0:	mov	sl, #11
   111c4:	mov	r3, sl
   111c8:	b	10f48 <__assert_fail@plt+0x26c>
   111cc:	mov	sl, #9
   111d0:	mov	r3, sl
   111d4:	b	10f48 <__assert_fail@plt+0x26c>
   111d8:	mov	sl, #13
   111dc:	mov	r3, sl
   111e0:	b	10f48 <__assert_fail@plt+0x26c>
   111e4:	mov	sl, #10
   111e8:	mov	r3, sl
   111ec:	b	10f48 <__assert_fail@plt+0x26c>
   111f0:	mov	sl, #12
   111f4:	mov	r3, sl
   111f8:	b	10f48 <__assert_fail@plt+0x26c>
   111fc:	mov	sl, #27
   11200:	mov	r3, sl
   11204:	b	10f48 <__assert_fail@plt+0x26c>
   11208:	ldr	r0, [r9]
   1120c:	ldrd	r2, [r0, #20]
   11210:	cmp	r3, r2
   11214:	bls	113a4 <__assert_fail@plt+0x6c8>
   11218:	add	r3, r2, #1
   1121c:	mov	r1, #92	; 0x5c
   11220:	str	r3, [r0, #20]
   11224:	mov	r3, sl
   11228:	strb	r1, [r2]
   1122c:	b	10f48 <__assert_fail@plt+0x26c>
   11230:	ldrb	r3, [r1, #1]!
   11234:	cmp	r3, #0
   11238:	bne	10e04 <__assert_fail@plt+0x128>
   1123c:	cmp	r2, #101	; 0x65
   11240:	moveq	ip, #1
   11244:	beq	1125c <__assert_fail@plt+0x580>
   11248:	cmp	r2, #110	; 0x6e
   1124c:	moveq	r8, #0
   11250:	beq	1125c <__assert_fail@plt+0x580>
   11254:	cmp	r2, #69	; 0x45
   11258:	moveq	ip, #0
   1125c:	ldrb	r2, [r0, #1]!
   11260:	cmp	r2, #0
   11264:	bne	1123c <__assert_fail@plt+0x560>
   11268:	add	r7, lr, #4
   1126c:	subs	r6, r6, #1
   11270:	mov	lr, r7
   11274:	beq	10ed4 <__assert_fail@plt+0x1f8>
   11278:	ldr	r0, [r7]
   1127c:	ldrb	r3, [r0]
   11280:	cmp	r3, #45	; 0x2d
   11284:	beq	10de8 <__assert_fail@plt+0x10c>
   11288:	orr	ip, r4, ip
   1128c:	tst	ip, #255	; 0xff
   11290:	beq	10e28 <__assert_fail@plt+0x14c>
   11294:	b	10f30 <__assert_fail@plt+0x254>
   11298:	mov	r1, sl
   1129c:	bl	10c88 <__overflow@plt>
   112a0:	b	10f68 <__assert_fail@plt+0x28c>
   112a4:	subs	r6, r6, #1
   112a8:	beq	10ed4 <__assert_fail@plt+0x1f8>
   112ac:	ldr	r0, [r9]
   112b0:	ldr	r3, [r0, #20]
   112b4:	ldr	r2, [r0, #24]
   112b8:	cmp	r3, r2
   112bc:	addcc	r1, r3, #1
   112c0:	movcc	r2, #32
   112c4:	strcc	r1, [r0, #20]
   112c8:	strbcc	r2, [r3]
   112cc:	bcc	10f3c <__assert_fail@plt+0x260>
   112d0:	mov	r1, #32
   112d4:	bl	10c88 <__overflow@plt>
   112d8:	b	10f3c <__assert_fail@plt+0x260>
   112dc:	ldr	r0, [r7]
   112e0:	bl	11a5c <__assert_fail@plt+0xd80>
   112e4:	movw	r1, #28096	; 0x6dc0
   112e8:	movt	r1, #1
   112ec:	mov	r0, #6
   112f0:	bl	10c94 <setlocale@plt>
   112f4:	movw	r1, #28356	; 0x6ec4
   112f8:	movt	r1, #1
   112fc:	movw	r0, #28168	; 0x6e08
   11300:	movt	r0, #1
   11304:	bl	10cb8 <bindtextdomain@plt>
   11308:	movw	r0, #28168	; 0x6e08
   1130c:	movt	r0, #1
   11310:	bl	10b68 <textdomain@plt>
   11314:	movw	r0, #6512	; 0x1970
   11318:	movt	r0, #1
   1131c:	bl	168e4 <__assert_fail@plt+0x5c08>
   11320:	cmp	r6, #2
   11324:	beq	10d90 <__assert_fail@plt+0xb4>
   11328:	sub	r6, r6, #1
   1132c:	add	r7, r7, #4
   11330:	cmp	r6, #0
   11334:	bgt	10dcc <__assert_fail@plt+0xf0>
   11338:	b	10edc <__assert_fail@plt+0x200>
   1133c:	movw	r1, #28400	; 0x6ef0
   11340:	movt	r1, #1
   11344:	movw	r2, #28412	; 0x6efc
   11348:	movt	r2, #1
   1134c:	movw	r3, #32968	; 0x80c8
   11350:	movt	r3, #2
   11354:	str	r0, [sp, #8]
   11358:	movw	r0, #33052	; 0x811c
   1135c:	movt	r0, #2
   11360:	str	r2, [sp]
   11364:	movw	r2, #28164	; 0x6e04
   11368:	movt	r2, #1
   1136c:	str	r1, [sp, #4]
   11370:	movw	r1, #26952	; 0x6948
   11374:	movt	r1, #1
   11378:	ldr	r0, [r0]
   1137c:	ldr	r3, [r3]
   11380:	bl	15a90 <__assert_fail@plt+0x4db4>
   11384:	b	10f08 <__assert_fail@plt+0x22c>
   11388:	mov	r1, #10
   1138c:	bl	10c88 <__overflow@plt>
   11390:	b	10f08 <__assert_fail@plt+0x22c>
   11394:	orr	ip, r4, ip
   11398:	tst	ip, #255	; 0xff
   1139c:	bne	10f30 <__assert_fail@plt+0x254>
   113a0:	b	10ecc <__assert_fail@plt+0x1f0>
   113a4:	mov	r1, #92	; 0x5c
   113a8:	bl	10c88 <__overflow@plt>
   113ac:	mov	r3, sl
   113b0:	b	10f48 <__assert_fail@plt+0x26c>
   113b4:	cmp	r5, #0
   113b8:	mov	r8, #1
   113bc:	bne	10f30 <__assert_fail@plt+0x254>
   113c0:	b	10e28 <__assert_fail@plt+0x14c>
   113c4:	sub	r6, r6, #1
   113c8:	add	r7, r7, #4
   113cc:	b	10dcc <__assert_fail@plt+0xf0>
   113d0:	bl	115a4 <__assert_fail@plt+0x8c8>
   113d4:	mov	fp, #0
   113d8:	mov	lr, #0
   113dc:	pop	{r1}		; (ldr r1, [sp], #4)
   113e0:	mov	r2, sp
   113e4:	push	{r2}		; (str r2, [sp, #-4]!)
   113e8:	push	{r0}		; (str r0, [sp, #-4]!)
   113ec:	ldr	ip, [pc, #16]	; 11404 <__assert_fail@plt+0x728>
   113f0:	push	{ip}		; (str ip, [sp, #-4]!)
   113f4:	ldr	r0, [pc, #12]	; 11408 <__assert_fail@plt+0x72c>
   113f8:	ldr	r3, [pc, #12]	; 1140c <__assert_fail@plt+0x730>
   113fc:	bl	10be0 <__libc_start_main@plt>
   11400:	bl	10cd0 <abort@plt>
   11404:	andeq	r6, r1, r0, ror #17
   11408:	andeq	r0, r1, r8, ror #25
   1140c:	andeq	r6, r1, r0, lsl #17
   11410:	ldr	r3, [pc, #20]	; 1142c <__assert_fail@plt+0x750>
   11414:	ldr	r2, [pc, #20]	; 11430 <__assert_fail@plt+0x754>
   11418:	add	r3, pc, r3
   1141c:	ldr	r2, [r3, r2]
   11420:	cmp	r2, #0
   11424:	bxeq	lr
   11428:	b	10bf8 <__gmon_start__@plt>
   1142c:	andeq	r6, r1, r0, ror #23
   11430:	strheq	r0, [r0], -ip
   11434:	ldr	r0, [pc, #24]	; 11454 <__assert_fail@plt+0x778>
   11438:	ldr	r3, [pc, #24]	; 11458 <__assert_fail@plt+0x77c>
   1143c:	cmp	r3, r0
   11440:	bxeq	lr
   11444:	ldr	r3, [pc, #16]	; 1145c <__assert_fail@plt+0x780>
   11448:	cmp	r3, #0
   1144c:	bxeq	lr
   11450:	bx	r3
   11454:	andeq	r8, r2, r0, lsl r1
   11458:	andeq	r8, r2, r0, lsl r1
   1145c:	andeq	r0, r0, r0
   11460:	ldr	r0, [pc, #36]	; 1148c <__assert_fail@plt+0x7b0>
   11464:	ldr	r1, [pc, #36]	; 11490 <__assert_fail@plt+0x7b4>
   11468:	sub	r1, r1, r0
   1146c:	asr	r1, r1, #2
   11470:	add	r1, r1, r1, lsr #31
   11474:	asrs	r1, r1, #1
   11478:	bxeq	lr
   1147c:	ldr	r3, [pc, #16]	; 11494 <__assert_fail@plt+0x7b8>
   11480:	cmp	r3, #0
   11484:	bxeq	lr
   11488:	bx	r3
   1148c:	andeq	r8, r2, r0, lsl r1
   11490:	andeq	r8, r2, r0, lsl r1
   11494:	andeq	r0, r0, r0
   11498:	push	{r4, lr}
   1149c:	ldr	r4, [pc, #24]	; 114bc <__assert_fail@plt+0x7e0>
   114a0:	ldrb	r3, [r4]
   114a4:	cmp	r3, #0
   114a8:	popne	{r4, pc}
   114ac:	bl	11434 <__assert_fail@plt+0x758>
   114b0:	mov	r3, #1
   114b4:	strb	r3, [r4]
   114b8:	pop	{r4, pc}
   114bc:	andeq	r8, r2, r0, lsr #2
   114c0:	b	11460 <__assert_fail@plt+0x784>
   114c4:	sub	r3, r0, #65	; 0x41
   114c8:	cmp	r3, #37	; 0x25
   114cc:	ldrls	pc, [pc, r3, lsl #2]
   114d0:	b	1159c <__assert_fail@plt+0x8c0>
   114d4:	andeq	r1, r1, ip, ror #10
   114d8:	muleq	r1, r4, r5
   114dc:	andeq	r1, r1, r4, ror r5
   114e0:	andeq	r1, r1, ip, ror r5
   114e4:	andeq	r1, r1, r4, lsl #11
   114e8:	andeq	r1, r1, ip, lsl #11
   114ec:	muleq	r1, ip, r5
   114f0:	muleq	r1, ip, r5
   114f4:	muleq	r1, ip, r5
   114f8:	muleq	r1, ip, r5
   114fc:	muleq	r1, ip, r5
   11500:	muleq	r1, ip, r5
   11504:	muleq	r1, ip, r5
   11508:	muleq	r1, ip, r5
   1150c:	muleq	r1, ip, r5
   11510:	muleq	r1, ip, r5
   11514:	muleq	r1, ip, r5
   11518:	muleq	r1, ip, r5
   1151c:	muleq	r1, ip, r5
   11520:	muleq	r1, ip, r5
   11524:	muleq	r1, ip, r5
   11528:	muleq	r1, ip, r5
   1152c:	muleq	r1, ip, r5
   11530:	muleq	r1, ip, r5
   11534:	muleq	r1, ip, r5
   11538:	muleq	r1, ip, r5
   1153c:	muleq	r1, ip, r5
   11540:	muleq	r1, ip, r5
   11544:	muleq	r1, ip, r5
   11548:	muleq	r1, ip, r5
   1154c:	muleq	r1, ip, r5
   11550:	muleq	r1, ip, r5
   11554:	andeq	r1, r1, ip, ror #10
   11558:	muleq	r1, r4, r5
   1155c:	andeq	r1, r1, r4, ror r5
   11560:	andeq	r1, r1, ip, ror r5
   11564:	andeq	r1, r1, r4, lsl #11
   11568:	andeq	r1, r1, ip, lsl #11
   1156c:	mov	r0, #10
   11570:	bx	lr
   11574:	mov	r0, #12
   11578:	bx	lr
   1157c:	mov	r0, #13
   11580:	bx	lr
   11584:	mov	r0, #14
   11588:	bx	lr
   1158c:	mov	r0, #15
   11590:	bx	lr
   11594:	mov	r0, #11
   11598:	bx	lr
   1159c:	sub	r0, r0, #48	; 0x30
   115a0:	bx	lr
   115a4:	subs	r4, r0, #0
   115a8:	push	{lr}		; (str lr, [sp, #-4]!)
   115ac:	sub	sp, sp, #60	; 0x3c
   115b0:	beq	115d4 <__assert_fail@plt+0x8f8>
   115b4:	movw	r3, #26888	; 0x6908
   115b8:	movt	r3, #1
   115bc:	movw	r1, #26960	; 0x6950
   115c0:	movt	r1, #1
   115c4:	movw	r0, #26972	; 0x695c
   115c8:	movt	r0, #1
   115cc:	mov	r2, #40	; 0x28
   115d0:	bl	10cdc <__assert_fail@plt>
   115d4:	mov	r2, #5
   115d8:	movw	r1, #26996	; 0x6974
   115dc:	movt	r1, #1
   115e0:	movw	r6, #33052	; 0x811c
   115e4:	movt	r6, #2
   115e8:	bl	10b50 <dcgettext@plt>
   115ec:	movw	r3, #33068	; 0x812c
   115f0:	movt	r3, #2
   115f4:	ldr	r3, [r3]
   115f8:	mov	r1, r0
   115fc:	mov	r0, #1
   11600:	mov	r2, r3
   11604:	bl	10c4c <__printf_chk@plt>
   11608:	mov	r2, #5
   1160c:	mov	r0, r4
   11610:	movw	r1, #27060	; 0x69b4
   11614:	movt	r1, #1
   11618:	bl	10b50 <dcgettext@plt>
   1161c:	ldr	r1, [r6]
   11620:	bl	10ae4 <fputs_unlocked@plt>
   11624:	mov	r2, #5
   11628:	mov	r0, r4
   1162c:	movw	r1, #27156	; 0x6a14
   11630:	movt	r1, #1
   11634:	bl	10b50 <dcgettext@plt>
   11638:	ldr	r1, [r6]
   1163c:	bl	10ae4 <fputs_unlocked@plt>
   11640:	mov	r2, #5
   11644:	mov	r0, r4
   11648:	movw	r1, #27288	; 0x6a98
   1164c:	movt	r1, #1
   11650:	bl	10b50 <dcgettext@plt>
   11654:	ldr	r1, [r6]
   11658:	bl	10ae4 <fputs_unlocked@plt>
   1165c:	mov	r2, #5
   11660:	mov	r0, r4
   11664:	movw	r1, #27336	; 0x6ac8
   11668:	movt	r1, #1
   1166c:	bl	10b50 <dcgettext@plt>
   11670:	ldr	r1, [r6]
   11674:	bl	10ae4 <fputs_unlocked@plt>
   11678:	mov	r2, #5
   1167c:	mov	r0, r4
   11680:	movw	r1, #27392	; 0x6b00
   11684:	movt	r1, #1
   11688:	bl	10b50 <dcgettext@plt>
   1168c:	ldr	r1, [r6]
   11690:	bl	10ae4 <fputs_unlocked@plt>
   11694:	mov	r2, #5
   11698:	mov	r0, r4
   1169c:	movw	r1, #27456	; 0x6b40
   116a0:	movt	r1, #1
   116a4:	bl	10b50 <dcgettext@plt>
   116a8:	ldr	r1, [r6]
   116ac:	bl	10ae4 <fputs_unlocked@plt>
   116b0:	mov	r2, #5
   116b4:	mov	r0, r4
   116b8:	movw	r1, #27688	; 0x6c28
   116bc:	movt	r1, #1
   116c0:	bl	10b50 <dcgettext@plt>
   116c4:	ldr	r1, [r6]
   116c8:	bl	10ae4 <fputs_unlocked@plt>
   116cc:	mov	r2, #5
   116d0:	mov	r0, r4
   116d4:	movw	r1, #27800	; 0x6c98
   116d8:	movt	r1, #1
   116dc:	bl	10b50 <dcgettext@plt>
   116e0:	mov	r1, r0
   116e4:	movw	r2, #26952	; 0x6948
   116e8:	movt	r2, #1
   116ec:	mov	r0, #1
   116f0:	bl	10c4c <__printf_chk@plt>
   116f4:	mov	r2, #5
   116f8:	mov	r0, r4
   116fc:	movw	r1, #27992	; 0x6d58
   11700:	movt	r1, #1
   11704:	bl	10b50 <dcgettext@plt>
   11708:	ldr	r1, [r6]
   1170c:	bl	10ae4 <fputs_unlocked@plt>
   11710:	movw	r0, #26888	; 0x6908
   11714:	movt	r0, #1
   11718:	ldr	ip, [r0, #8]
   1171c:	ldrd	r2, [r0, #16]
   11720:	ldr	r4, [r0, #12]
   11724:	subs	r1, ip, #0
   11728:	str	ip, [sp]
   1172c:	ldrd	r8, [r0, #24]
   11730:	strd	r2, [sp, #8]
   11734:	ldrd	r2, [r0, #32]
   11738:	str	r4, [sp, #4]
   1173c:	ldrd	r4, [r0, #40]	; 0x28
   11740:	strd	r8, [sp, #16]
   11744:	ldrd	r8, [r0, #48]	; 0x30
   11748:	strd	r2, [sp, #24]
   1174c:	ldrd	r2, [r0, #56]	; 0x38
   11750:	strd	r4, [sp, #32]
   11754:	movwne	r5, #26952	; 0x6948
   11758:	mov	r4, sp
   1175c:	movtne	r5, #1
   11760:	strd	r8, [sp, #40]	; 0x28
   11764:	strd	r2, [sp, #48]	; 0x30
   11768:	bne	11864 <__assert_fail@plt+0xb88>
   1176c:	ldr	r4, [r4, #4]
   11770:	movw	r1, #28100	; 0x6dc4
   11774:	movt	r1, #1
   11778:	mov	r2, #5
   1177c:	cmp	r4, #0
   11780:	beq	11878 <__assert_fail@plt+0xb9c>
   11784:	mov	r0, #0
   11788:	bl	10b50 <dcgettext@plt>
   1178c:	mov	r1, r0
   11790:	movw	r3, #28124	; 0x6ddc
   11794:	movt	r3, #1
   11798:	movw	r2, #28164	; 0x6e04
   1179c:	movt	r2, #1
   117a0:	mov	r0, #1
   117a4:	bl	10c4c <__printf_chk@plt>
   117a8:	mov	r1, #0
   117ac:	mov	r0, #5
   117b0:	bl	10c94 <setlocale@plt>
   117b4:	cmp	r0, #0
   117b8:	movweq	r5, #26952	; 0x6948
   117bc:	movteq	r5, #1
   117c0:	beq	117e4 <__assert_fail@plt+0xb08>
   117c4:	movw	r1, #28180	; 0x6e14
   117c8:	movt	r1, #1
   117cc:	mov	r2, #3
   117d0:	movw	r5, #26952	; 0x6948
   117d4:	movt	r5, #1
   117d8:	bl	10cc4 <strncmp@plt>
   117dc:	cmp	r0, #0
   117e0:	bne	11930 <__assert_fail@plt+0xc54>
   117e4:	mov	r2, #5
   117e8:	movw	r1, #28256	; 0x6e60
   117ec:	movt	r1, #1
   117f0:	mov	r0, #0
   117f4:	bl	10b50 <dcgettext@plt>
   117f8:	mov	r1, r0
   117fc:	movw	r3, #26952	; 0x6948
   11800:	movt	r3, #1
   11804:	movw	r2, #28124	; 0x6ddc
   11808:	movt	r2, #1
   1180c:	mov	r0, #1
   11810:	bl	10c4c <__printf_chk@plt>
   11814:	mov	r2, #5
   11818:	movw	r1, #28284	; 0x6e7c
   1181c:	movt	r1, #1
   11820:	mov	r0, #0
   11824:	bl	10b50 <dcgettext@plt>
   11828:	movw	r2, #28432	; 0x6f10
   1182c:	movt	r2, #1
   11830:	cmp	r4, r5
   11834:	movw	r3, #28096	; 0x6dc0
   11838:	movt	r3, #1
   1183c:	mov	r1, r0
   11840:	moveq	r3, r2
   11844:	mov	r2, r4
   11848:	mov	r0, #1
   1184c:	bl	10c4c <__printf_chk@plt>
   11850:	mov	r0, #0
   11854:	bl	10c10 <exit@plt>
   11858:	ldr	r1, [r4, #8]!
   1185c:	cmp	r1, #0
   11860:	beq	1176c <__assert_fail@plt+0xa90>
   11864:	mov	r0, r5
   11868:	bl	10af0 <strcmp@plt>
   1186c:	cmp	r0, #0
   11870:	bne	11858 <__assert_fail@plt+0xb7c>
   11874:	b	1176c <__assert_fail@plt+0xa90>
   11878:	mov	r0, r4
   1187c:	bl	10b50 <dcgettext@plt>
   11880:	mov	r1, r0
   11884:	movw	r3, #28124	; 0x6ddc
   11888:	movt	r3, #1
   1188c:	movw	r2, #28164	; 0x6e04
   11890:	movt	r2, #1
   11894:	mov	r0, #1
   11898:	bl	10c4c <__printf_chk@plt>
   1189c:	mov	r1, r4
   118a0:	mov	r0, #5
   118a4:	bl	10c94 <setlocale@plt>
   118a8:	cmp	r0, #0
   118ac:	beq	118c8 <__assert_fail@plt+0xbec>
   118b0:	movw	r1, #28180	; 0x6e14
   118b4:	movt	r1, #1
   118b8:	mov	r2, #3
   118bc:	bl	10cc4 <strncmp@plt>
   118c0:	cmp	r0, #0
   118c4:	bne	11924 <__assert_fail@plt+0xc48>
   118c8:	mov	r2, #5
   118cc:	movw	r1, #28256	; 0x6e60
   118d0:	movt	r1, #1
   118d4:	mov	r0, #0
   118d8:	bl	10b50 <dcgettext@plt>
   118dc:	mov	r1, r0
   118e0:	movw	r3, #26952	; 0x6948
   118e4:	movt	r3, #1
   118e8:	movw	r2, #28124	; 0x6ddc
   118ec:	movt	r2, #1
   118f0:	mov	r0, #1
   118f4:	bl	10c4c <__printf_chk@plt>
   118f8:	movw	r1, #28284	; 0x6e7c
   118fc:	movt	r1, #1
   11900:	mov	r2, #5
   11904:	mov	r0, #0
   11908:	bl	10b50 <dcgettext@plt>
   1190c:	movw	r4, #26952	; 0x6948
   11910:	movt	r4, #1
   11914:	movw	r3, #28432	; 0x6f10
   11918:	movt	r3, #1
   1191c:	mov	r1, r0
   11920:	b	11844 <__assert_fail@plt+0xb68>
   11924:	movw	r5, #26952	; 0x6948
   11928:	movt	r5, #1
   1192c:	mov	r4, r5
   11930:	mov	r2, #5
   11934:	movw	r1, #28184	; 0x6e18
   11938:	movt	r1, #1
   1193c:	mov	r0, #0
   11940:	bl	10b50 <dcgettext@plt>
   11944:	ldr	r1, [r6]
   11948:	bl	10ae4 <fputs_unlocked@plt>
   1194c:	b	117e4 <__assert_fail@plt+0xb08>
   11950:	movw	r3, #33060	; 0x8124
   11954:	movt	r3, #2
   11958:	str	r0, [r3]
   1195c:	bx	lr
   11960:	movw	r3, #33060	; 0x8124
   11964:	movt	r3, #2
   11968:	strb	r0, [r3, #4]
   1196c:	bx	lr
   11970:	movw	r3, #33052	; 0x811c
   11974:	movt	r3, #2
   11978:	strd	r4, [sp, #-16]!
   1197c:	ldr	r0, [r3]
   11980:	str	r6, [sp, #8]
   11984:	str	lr, [sp, #12]
   11988:	sub	sp, sp, #8
   1198c:	bl	163a4 <__assert_fail@plt+0x56c8>
   11990:	cmp	r0, #0
   11994:	beq	119c0 <__assert_fail@plt+0xce4>
   11998:	movw	r4, #33060	; 0x8124
   1199c:	movt	r4, #2
   119a0:	ldrb	r6, [r4, #4]
   119a4:	bl	10c28 <__errno_location@plt>
   119a8:	mov	r5, r0
   119ac:	cmp	r6, #0
   119b0:	beq	119ec <__assert_fail@plt+0xd10>
   119b4:	ldr	r3, [r0]
   119b8:	cmp	r3, #32
   119bc:	bne	119ec <__assert_fail@plt+0xd10>
   119c0:	movw	r3, #33048	; 0x8118
   119c4:	movt	r3, #2
   119c8:	ldr	r0, [r3]
   119cc:	bl	163a4 <__assert_fail@plt+0x56c8>
   119d0:	cmp	r0, #0
   119d4:	bne	11a34 <__assert_fail@plt+0xd58>
   119d8:	add	sp, sp, #8
   119dc:	ldrd	r4, [sp]
   119e0:	ldr	r6, [sp, #8]
   119e4:	add	sp, sp, #12
   119e8:	pop	{pc}		; (ldr pc, [sp], #4)
   119ec:	movw	r1, #28548	; 0x6f84
   119f0:	movt	r1, #1
   119f4:	mov	r2, #5
   119f8:	mov	r0, #0
   119fc:	bl	10b50 <dcgettext@plt>
   11a00:	mov	r6, r0
   11a04:	ldr	r0, [r4]
   11a08:	cmp	r0, #0
   11a0c:	beq	11a44 <__assert_fail@plt+0xd68>
   11a10:	ldr	r4, [r5]
   11a14:	bl	14850 <__assert_fail@plt+0x3b74>
   11a18:	mov	r3, r0
   11a1c:	movw	r2, #28560	; 0x6f90
   11a20:	movt	r2, #1
   11a24:	mov	r0, #0
   11a28:	str	r6, [sp]
   11a2c:	mov	r1, r4
   11a30:	bl	10bbc <error@plt>
   11a34:	movw	r3, #32972	; 0x80cc
   11a38:	movt	r3, #2
   11a3c:	ldr	r0, [r3]
   11a40:	bl	10b14 <_exit@plt>
   11a44:	mov	r3, r6
   11a48:	movw	r2, #28564	; 0x6f94
   11a4c:	movt	r2, #1
   11a50:	ldr	r1, [r5]
   11a54:	bl	10bbc <error@plt>
   11a58:	b	11a34 <__assert_fail@plt+0xd58>
   11a5c:	strd	r4, [sp, #-16]!
   11a60:	subs	r4, r0, #0
   11a64:	str	r6, [sp, #8]
   11a68:	str	lr, [sp, #12]
   11a6c:	beq	11b04 <__assert_fail@plt+0xe28>
   11a70:	mov	r1, #47	; 0x2f
   11a74:	bl	10ca0 <strrchr@plt>
   11a78:	subs	r5, r0, #0
   11a7c:	beq	11adc <__assert_fail@plt+0xe00>
   11a80:	add	r6, r5, #1
   11a84:	sub	r3, r6, r4
   11a88:	cmp	r3, #6
   11a8c:	ble	11adc <__assert_fail@plt+0xe00>
   11a90:	movw	r1, #28624	; 0x6fd0
   11a94:	movt	r1, #1
   11a98:	mov	r2, #7
   11a9c:	sub	r0, r5, #6
   11aa0:	bl	10cc4 <strncmp@plt>
   11aa4:	cmp	r0, #0
   11aa8:	bne	11adc <__assert_fail@plt+0xe00>
   11aac:	movw	r1, #28632	; 0x6fd8
   11ab0:	movt	r1, #1
   11ab4:	mov	r2, #3
   11ab8:	mov	r0, r6
   11abc:	bl	10cc4 <strncmp@plt>
   11ac0:	cmp	r0, #0
   11ac4:	movne	r4, r6
   11ac8:	bne	11adc <__assert_fail@plt+0xe00>
   11acc:	add	r4, r5, #4
   11ad0:	movw	r3, #33040	; 0x8110
   11ad4:	movt	r3, #2
   11ad8:	str	r4, [r3]
   11adc:	movw	r2, #33068	; 0x812c
   11ae0:	movt	r2, #2
   11ae4:	ldr	r6, [sp, #8]
   11ae8:	movw	r3, #33044	; 0x8114
   11aec:	movt	r3, #2
   11af0:	str	r4, [r2]
   11af4:	str	r4, [r3]
   11af8:	ldrd	r4, [sp]
   11afc:	add	sp, sp, #12
   11b00:	pop	{pc}		; (ldr pc, [sp], #4)
   11b04:	movw	r3, #33048	; 0x8118
   11b08:	movt	r3, #2
   11b0c:	movw	r0, #28568	; 0x6f98
   11b10:	movt	r0, #1
   11b14:	ldr	r3, [r3]
   11b18:	mov	r2, #55	; 0x37
   11b1c:	mov	r1, #1
   11b20:	bl	10b80 <fwrite@plt>
   11b24:	bl	10cd0 <abort@plt>
   11b28:	mov	r2, #5
   11b2c:	strd	r4, [sp, #-16]!
   11b30:	mov	r5, r0
   11b34:	str	r6, [sp, #8]
   11b38:	mov	r6, r1
   11b3c:	mov	r1, r0
   11b40:	mov	r0, #0
   11b44:	str	lr, [sp, #12]
   11b48:	bl	10b50 <dcgettext@plt>
   11b4c:	cmp	r5, r0
   11b50:	mov	r4, r0
   11b54:	beq	11b6c <__assert_fail@plt+0xe90>
   11b58:	mov	r0, r4
   11b5c:	ldrd	r4, [sp]
   11b60:	ldr	r6, [sp, #8]
   11b64:	add	sp, sp, #12
   11b68:	pop	{pc}		; (ldr pc, [sp], #4)
   11b6c:	bl	16670 <__assert_fail@plt+0x5994>
   11b70:	ldrb	r3, [r0]
   11b74:	bic	r3, r3, #32
   11b78:	cmp	r3, #85	; 0x55
   11b7c:	bne	11be4 <__assert_fail@plt+0xf08>
   11b80:	ldrb	r3, [r0, #1]
   11b84:	bic	r3, r3, #32
   11b88:	cmp	r3, #84	; 0x54
   11b8c:	bne	11c64 <__assert_fail@plt+0xf88>
   11b90:	ldrb	r3, [r0, #2]
   11b94:	bic	r3, r3, #32
   11b98:	cmp	r3, #70	; 0x46
   11b9c:	bne	11c64 <__assert_fail@plt+0xf88>
   11ba0:	ldrb	r3, [r0, #3]
   11ba4:	cmp	r3, #45	; 0x2d
   11ba8:	bne	11c64 <__assert_fail@plt+0xf88>
   11bac:	ldrb	r3, [r0, #4]
   11bb0:	cmp	r3, #56	; 0x38
   11bb4:	bne	11c64 <__assert_fail@plt+0xf88>
   11bb8:	ldrb	r3, [r0, #5]
   11bbc:	cmp	r3, #0
   11bc0:	bne	11c64 <__assert_fail@plt+0xf88>
   11bc4:	ldrb	r2, [r4]
   11bc8:	movw	r3, #28724	; 0x7034
   11bcc:	movt	r3, #1
   11bd0:	movw	r4, #28736	; 0x7040
   11bd4:	movt	r4, #1
   11bd8:	cmp	r2, #96	; 0x60
   11bdc:	movne	r4, r3
   11be0:	b	11b58 <__assert_fail@plt+0xe7c>
   11be4:	cmp	r3, #71	; 0x47
   11be8:	bne	11c64 <__assert_fail@plt+0xf88>
   11bec:	ldrb	r3, [r0, #1]
   11bf0:	bic	r3, r3, #32
   11bf4:	cmp	r3, #66	; 0x42
   11bf8:	bne	11c64 <__assert_fail@plt+0xf88>
   11bfc:	ldrb	r3, [r0, #2]
   11c00:	cmp	r3, #49	; 0x31
   11c04:	bne	11c64 <__assert_fail@plt+0xf88>
   11c08:	ldrb	r3, [r0, #3]
   11c0c:	cmp	r3, #56	; 0x38
   11c10:	bne	11c64 <__assert_fail@plt+0xf88>
   11c14:	ldrb	r3, [r0, #4]
   11c18:	cmp	r3, #48	; 0x30
   11c1c:	bne	11c64 <__assert_fail@plt+0xf88>
   11c20:	ldrb	r3, [r0, #5]
   11c24:	cmp	r3, #51	; 0x33
   11c28:	bne	11c64 <__assert_fail@plt+0xf88>
   11c2c:	ldrb	r3, [r0, #6]
   11c30:	cmp	r3, #48	; 0x30
   11c34:	bne	11c64 <__assert_fail@plt+0xf88>
   11c38:	ldrb	r3, [r0, #7]
   11c3c:	cmp	r3, #0
   11c40:	bne	11c64 <__assert_fail@plt+0xf88>
   11c44:	ldrb	r2, [r4]
   11c48:	movw	r3, #28728	; 0x7038
   11c4c:	movt	r3, #1
   11c50:	movw	r4, #28732	; 0x703c
   11c54:	movt	r4, #1
   11c58:	cmp	r2, #96	; 0x60
   11c5c:	movne	r4, r3
   11c60:	b	11b58 <__assert_fail@plt+0xe7c>
   11c64:	movw	r3, #28740	; 0x7044
   11c68:	movt	r3, #1
   11c6c:	cmp	r6, #9
   11c70:	movw	r4, #28720	; 0x7030
   11c74:	movt	r4, #1
   11c78:	movne	r4, r3
   11c7c:	b	11b58 <__assert_fail@plt+0xe7c>
   11c80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11c84:	strd	r6, [sp, #8]
   11c88:	strd	r8, [sp, #16]
   11c8c:	mov	r8, r3
   11c90:	strd	sl, [sp, #24]
   11c94:	mov	fp, r0
   11c98:	mov	sl, r1
   11c9c:	str	lr, [sp, #32]
   11ca0:	sub	sp, sp, #140	; 0x8c
   11ca4:	ldr	r3, [sp, #180]	; 0xb4
   11ca8:	str	r2, [sp, #28]
   11cac:	and	r4, r3, #2
   11cb0:	ubfx	r3, r3, #1, #1
   11cb4:	str	r3, [sp, #44]	; 0x2c
   11cb8:	bl	10b98 <__ctype_get_mb_cur_max@plt>
   11cbc:	ldr	r3, [sp, #176]	; 0xb0
   11cc0:	str	r0, [sp, #76]	; 0x4c
   11cc4:	cmp	r3, #10
   11cc8:	ldrls	pc, [pc, r3, lsl #2]
   11ccc:	b	13668 <__assert_fail@plt+0x298c>
   11cd0:	andeq	r2, r1, r0, asr r1
   11cd4:	andeq	r2, r1, ip, ror #4
   11cd8:	andeq	r2, r1, r8, ror #15
   11cdc:	ldrdeq	r2, [r1], -r8
   11ce0:	andeq	r2, r1, r8, asr r0
   11ce4:	ldrdeq	r2, [r1], -r4
   11ce8:	andeq	r2, r1, ip, lsr #3
   11cec:	andeq	r2, r1, r4, lsl r2
   11cf0:	strdeq	r1, [r1], -ip
   11cf4:	strdeq	r1, [r1], -ip
   11cf8:	strdeq	r1, [r1], -ip
   11cfc:	ldr	r3, [sp, #176]	; 0xb0
   11d00:	cmp	r3, #10
   11d04:	beq	11d30 <__assert_fail@plt+0x1054>
   11d08:	mov	r1, r3
   11d0c:	movw	r0, #28744	; 0x7048
   11d10:	movt	r0, #1
   11d14:	bl	11b28 <__assert_fail@plt+0xe4c>
   11d18:	str	r0, [sp, #188]	; 0xbc
   11d1c:	movw	r0, #28740	; 0x7044
   11d20:	movt	r0, #1
   11d24:	ldr	r1, [sp, #176]	; 0xb0
   11d28:	bl	11b28 <__assert_fail@plt+0xe4c>
   11d2c:	str	r0, [sp, #192]	; 0xc0
   11d30:	cmp	r4, #0
   11d34:	movne	r4, #0
   11d38:	beq	133f4 <__assert_fail@plt+0x2718>
   11d3c:	mov	r5, #0
   11d40:	ldr	r0, [sp, #192]	; 0xc0
   11d44:	mov	r9, r5
   11d48:	str	r5, [sp, #64]	; 0x40
   11d4c:	bl	10c1c <strlen@plt>
   11d50:	mov	r3, #1
   11d54:	ldr	r2, [sp, #44]	; 0x2c
   11d58:	cmp	r0, r5
   11d5c:	moveq	r2, r5
   11d60:	str	r3, [sp, #32]
   11d64:	str	r3, [sp, #48]	; 0x30
   11d68:	str	r5, [sp, #52]	; 0x34
   11d6c:	str	r3, [sp, #60]	; 0x3c
   11d70:	ldr	r3, [sp, #180]	; 0xb4
   11d74:	str	r0, [sp, #56]	; 0x38
   11d78:	str	r5, [sp, #68]	; 0x44
   11d7c:	str	r5, [sp, #80]	; 0x50
   11d80:	str	r5, [sp, #84]	; 0x54
   11d84:	and	r3, r3, #1
   11d88:	str	r2, [sp, #88]	; 0x58
   11d8c:	str	r3, [sp, #92]	; 0x5c
   11d90:	ldr	r3, [sp, #180]	; 0xb4
   11d94:	and	r3, r3, #4
   11d98:	str	r3, [sp, #96]	; 0x60
   11d9c:	ldr	r3, [sp, #192]	; 0xc0
   11da0:	str	r3, [sp, #72]	; 0x48
   11da4:	mov	r3, fp
   11da8:	mov	r7, #0
   11dac:	mov	fp, r9
   11db0:	mov	r9, r3
   11db4:	cmn	r8, #1
   11db8:	beq	123bc <__assert_fail@plt+0x16e0>
   11dbc:	subs	r6, r8, r7
   11dc0:	movne	r6, #1
   11dc4:	cmp	r6, #0
   11dc8:	beq	123d4 <__assert_fail@plt+0x16f8>
   11dcc:	ldr	r0, [sp, #28]
   11dd0:	ldr	r3, [sp, #48]	; 0x30
   11dd4:	cmp	r3, #0
   11dd8:	add	r3, r0, r7
   11ddc:	str	r3, [sp, #36]	; 0x24
   11de0:	beq	12860 <__assert_fail@plt+0x1b84>
   11de4:	ldr	r2, [sp, #56]	; 0x38
   11de8:	cmp	r2, #0
   11dec:	beq	12d60 <__assert_fail@plt+0x2084>
   11df0:	cmp	r2, #1
   11df4:	mov	r3, r2
   11df8:	movls	r3, #0
   11dfc:	movhi	r3, #1
   11e00:	cmn	r8, #1
   11e04:	add	r5, r7, r2
   11e08:	movne	r3, #0
   11e0c:	cmp	r3, #0
   11e10:	beq	11e1c <__assert_fail@plt+0x1140>
   11e14:	bl	10c1c <strlen@plt>
   11e18:	mov	r8, r0
   11e1c:	cmp	r5, r8
   11e20:	bhi	12d60 <__assert_fail@plt+0x2084>
   11e24:	ldr	r0, [sp, #36]	; 0x24
   11e28:	ldr	r2, [sp, #56]	; 0x38
   11e2c:	ldr	r1, [sp, #72]	; 0x48
   11e30:	bl	10b38 <memcmp@plt>
   11e34:	cmp	r0, #0
   11e38:	bne	12d60 <__assert_fail@plt+0x2084>
   11e3c:	ldr	r3, [sp, #44]	; 0x2c
   11e40:	cmp	r3, #0
   11e44:	bne	1350c <__assert_fail@plt+0x2830>
   11e48:	ldr	r3, [sp, #36]	; 0x24
   11e4c:	ldrb	r5, [r3]
   11e50:	cmp	r5, #126	; 0x7e
   11e54:	ldrls	pc, [pc, r5, lsl #2]
   11e58:	b	132f4 <__assert_fail@plt+0x2618>
   11e5c:	andeq	r2, r1, r0, lsr r5
   11e60:	strdeq	r3, [r1], -r4
   11e64:	strdeq	r3, [r1], -r4
   11e68:	strdeq	r3, [r1], -r4
   11e6c:	strdeq	r3, [r1], -r4
   11e70:	strdeq	r3, [r1], -r4
   11e74:	strdeq	r3, [r1], -r4
   11e78:	andeq	r2, r1, r8, lsl #9
   11e7c:	andeq	r2, r1, r0, lsl #9
   11e80:	muleq	r1, r0, r4
   11e84:	andeq	r2, r1, r4, lsl r6
   11e88:	andeq	r2, r1, r4, lsl #12
   11e8c:	andeq	r2, r1, ip, lsr #6
   11e90:	andeq	r2, r1, r0, ror #11
   11e94:	strdeq	r3, [r1], -r4
   11e98:	strdeq	r3, [r1], -r4
   11e9c:	strdeq	r3, [r1], -r4
   11ea0:	strdeq	r3, [r1], -r4
   11ea4:	strdeq	r3, [r1], -r4
   11ea8:	strdeq	r3, [r1], -r4
   11eac:	strdeq	r3, [r1], -r4
   11eb0:	strdeq	r3, [r1], -r4
   11eb4:	strdeq	r3, [r1], -r4
   11eb8:	strdeq	r3, [r1], -r4
   11ebc:	strdeq	r3, [r1], -r4
   11ec0:	strdeq	r3, [r1], -r4
   11ec4:	strdeq	r3, [r1], -r4
   11ec8:	strdeq	r3, [r1], -r4
   11ecc:	strdeq	r3, [r1], -r4
   11ed0:	strdeq	r3, [r1], -r4
   11ed4:	strdeq	r3, [r1], -r4
   11ed8:	strdeq	r3, [r1], -r4
   11edc:	andeq	r2, r1, ip, lsl #13
   11ee0:	andeq	r2, r1, r0, lsl #13
   11ee4:	andeq	r2, r1, r0, lsl #13
   11ee8:	andeq	r2, r1, r4, ror r6
   11eec:	andeq	r2, r1, r0, lsl #13
   11ef0:	andeq	r2, r1, r8, asr r7
   11ef4:	andeq	r2, r1, r0, lsl #13
   11ef8:	andeq	r2, r1, r8, asr #15
   11efc:	andeq	r2, r1, r0, lsl #13
   11f00:	andeq	r2, r1, r0, lsl #13
   11f04:	andeq	r2, r1, r0, lsl #13
   11f08:	andeq	r2, r1, r8, asr r7
   11f0c:	andeq	r2, r1, r8, asr r7
   11f10:	andeq	r2, r1, r8, asr r7
   11f14:	andeq	r2, r1, r8, asr r7
   11f18:	andeq	r2, r1, r8, asr r7
   11f1c:	andeq	r2, r1, r8, asr r7
   11f20:	andeq	r2, r1, r8, asr r7
   11f24:	andeq	r2, r1, r8, asr r7
   11f28:	andeq	r2, r1, r8, asr r7
   11f2c:	andeq	r2, r1, r8, asr r7
   11f30:	andeq	r2, r1, r8, asr r7
   11f34:	andeq	r2, r1, r8, asr r7
   11f38:	andeq	r2, r1, r8, asr r7
   11f3c:	andeq	r2, r1, r8, asr r7
   11f40:	andeq	r2, r1, r8, asr r7
   11f44:	andeq	r2, r1, r8, asr r7
   11f48:	andeq	r2, r1, r0, lsl #13
   11f4c:	andeq	r2, r1, r0, lsl #13
   11f50:	andeq	r2, r1, r0, lsl #13
   11f54:	andeq	r2, r1, r0, lsl #13
   11f58:	andeq	r2, r1, r8, ror r7
   11f5c:	strdeq	r3, [r1], -r4
   11f60:	andeq	r2, r1, r8, asr r7
   11f64:	andeq	r2, r1, r8, asr r7
   11f68:	andeq	r2, r1, r8, asr r7
   11f6c:	andeq	r2, r1, r8, asr r7
   11f70:	andeq	r2, r1, r8, asr r7
   11f74:	andeq	r2, r1, r8, asr r7
   11f78:	andeq	r2, r1, r8, asr r7
   11f7c:	andeq	r2, r1, r8, asr r7
   11f80:	andeq	r2, r1, r8, asr r7
   11f84:	andeq	r2, r1, r8, asr r7
   11f88:	andeq	r2, r1, r8, asr r7
   11f8c:	andeq	r2, r1, r8, asr r7
   11f90:	andeq	r2, r1, r8, asr r7
   11f94:	andeq	r2, r1, r8, asr r7
   11f98:	andeq	r2, r1, r8, asr r7
   11f9c:	andeq	r2, r1, r8, asr r7
   11fa0:	andeq	r2, r1, r8, asr r7
   11fa4:	andeq	r2, r1, r8, asr r7
   11fa8:	andeq	r2, r1, r8, asr r7
   11fac:	andeq	r2, r1, r8, asr r7
   11fb0:	andeq	r2, r1, r8, asr r7
   11fb4:	andeq	r2, r1, r8, asr r7
   11fb8:	andeq	r2, r1, r8, asr r7
   11fbc:	andeq	r2, r1, r8, asr r7
   11fc0:	andeq	r2, r1, r8, asr r7
   11fc4:	andeq	r2, r1, r8, asr r7
   11fc8:	andeq	r2, r1, r0, lsl #13
   11fcc:	andeq	r2, r1, ip, lsl r7
   11fd0:	andeq	r2, r1, r8, asr r7
   11fd4:	andeq	r2, r1, r0, lsl #13
   11fd8:	andeq	r2, r1, r8, asr r7
   11fdc:	andeq	r2, r1, r0, lsl #13
   11fe0:	andeq	r2, r1, r8, asr r7
   11fe4:	andeq	r2, r1, r8, asr r7
   11fe8:	andeq	r2, r1, r8, asr r7
   11fec:	andeq	r2, r1, r8, asr r7
   11ff0:	andeq	r2, r1, r8, asr r7
   11ff4:	andeq	r2, r1, r8, asr r7
   11ff8:	andeq	r2, r1, r8, asr r7
   11ffc:	andeq	r2, r1, r8, asr r7
   12000:	andeq	r2, r1, r8, asr r7
   12004:	andeq	r2, r1, r8, asr r7
   12008:	andeq	r2, r1, r8, asr r7
   1200c:	andeq	r2, r1, r8, asr r7
   12010:	andeq	r2, r1, r8, asr r7
   12014:	andeq	r2, r1, r8, asr r7
   12018:	andeq	r2, r1, r8, asr r7
   1201c:	andeq	r2, r1, r8, asr r7
   12020:	andeq	r2, r1, r8, asr r7
   12024:	andeq	r2, r1, r8, asr r7
   12028:	andeq	r2, r1, r8, asr r7
   1202c:	andeq	r2, r1, r8, asr r7
   12030:	andeq	r2, r1, r8, asr r7
   12034:	andeq	r2, r1, r8, asr r7
   12038:	andeq	r2, r1, r8, asr r7
   1203c:	andeq	r2, r1, r8, asr r7
   12040:	andeq	r2, r1, r8, asr r7
   12044:	andeq	r2, r1, r8, asr r7
   12048:	andeq	r2, r1, r8, lsr #12
   1204c:	andeq	r2, r1, r0, lsl #13
   12050:	andeq	r2, r1, r8, lsr #12
   12054:	andeq	r2, r1, r4, ror r6
   12058:	ldr	r3, [sp, #180]	; 0xb4
   1205c:	cmp	r4, #0
   12060:	and	r3, r3, #1
   12064:	str	r3, [sp, #92]	; 0x5c
   12068:	ldr	r3, [sp, #180]	; 0xb4
   1206c:	and	r3, r3, #4
   12070:	str	r3, [sp, #96]	; 0x60
   12074:	moveq	r3, #1
   12078:	streq	r3, [sp, #60]	; 0x3c
   1207c:	beq	1280c <__assert_fail@plt+0x1b30>
   12080:	mov	r3, #0
   12084:	mov	r2, #1
   12088:	mov	r4, r3
   1208c:	mov	r9, r3
   12090:	str	r2, [sp, #32]
   12094:	str	r2, [sp, #44]	; 0x2c
   12098:	str	r3, [sp, #48]	; 0x30
   1209c:	str	r2, [sp, #52]	; 0x34
   120a0:	str	r2, [sp, #56]	; 0x38
   120a4:	str	r3, [sp, #60]	; 0x3c
   120a8:	str	r2, [sp, #64]	; 0x40
   120ac:	str	r2, [sp, #68]	; 0x44
   120b0:	str	r3, [sp, #80]	; 0x50
   120b4:	str	r3, [sp, #84]	; 0x54
   120b8:	str	r3, [sp, #88]	; 0x58
   120bc:	movw	r3, #28740	; 0x7044
   120c0:	movt	r3, #1
   120c4:	str	r3, [sp, #72]	; 0x48
   120c8:	mov	r3, #2
   120cc:	str	r3, [sp, #176]	; 0xb0
   120d0:	b	11da4 <__assert_fail@plt+0x10c8>
   120d4:	ldr	r3, [sp, #180]	; 0xb4
   120d8:	cmp	r4, #0
   120dc:	and	r3, r3, #1
   120e0:	str	r3, [sp, #92]	; 0x5c
   120e4:	ldr	r3, [sp, #180]	; 0xb4
   120e8:	and	r3, r3, #4
   120ec:	str	r3, [sp, #96]	; 0x60
   120f0:	bne	134c4 <__assert_fail@plt+0x27e8>
   120f4:	cmp	sl, #0
   120f8:	beq	13270 <__assert_fail@plt+0x2594>
   120fc:	mov	r3, #34	; 0x22
   12100:	mov	r2, r4
   12104:	mov	r1, #1
   12108:	mov	r9, r2
   1210c:	strb	r3, [fp]
   12110:	movw	r3, #28720	; 0x7030
   12114:	movt	r3, #1
   12118:	mov	r4, r1
   1211c:	str	r1, [sp, #32]
   12120:	str	r2, [sp, #44]	; 0x2c
   12124:	str	r1, [sp, #48]	; 0x30
   12128:	str	r2, [sp, #52]	; 0x34
   1212c:	str	r1, [sp, #56]	; 0x38
   12130:	str	r1, [sp, #60]	; 0x3c
   12134:	str	r2, [sp, #64]	; 0x40
   12138:	str	r2, [sp, #68]	; 0x44
   1213c:	str	r3, [sp, #72]	; 0x48
   12140:	str	r2, [sp, #80]	; 0x50
   12144:	str	r2, [sp, #84]	; 0x54
   12148:	str	r2, [sp, #88]	; 0x58
   1214c:	b	11da4 <__assert_fail@plt+0x10c8>
   12150:	mov	r3, #0
   12154:	mov	r2, #1
   12158:	mov	r9, r3
   1215c:	str	r2, [sp, #32]
   12160:	str	r3, [sp, #44]	; 0x2c
   12164:	str	r3, [sp, #48]	; 0x30
   12168:	str	r3, [sp, #52]	; 0x34
   1216c:	str	r3, [sp, #60]	; 0x3c
   12170:	strd	r2, [sp, #64]	; 0x40
   12174:	str	r3, [sp, #72]	; 0x48
   12178:	str	r3, [sp, #80]	; 0x50
   1217c:	str	r3, [sp, #88]	; 0x58
   12180:	ldr	r3, [sp, #180]	; 0xb4
   12184:	and	r3, r3, r2
   12188:	str	r3, [sp, #92]	; 0x5c
   1218c:	ldr	r3, [sp, #180]	; 0xb4
   12190:	and	r3, r3, #4
   12194:	str	r3, [sp, #96]	; 0x60
   12198:	ldr	r3, [sp, #176]	; 0xb0
   1219c:	mov	r4, r3
   121a0:	str	r3, [sp, #56]	; 0x38
   121a4:	str	r3, [sp, #84]	; 0x54
   121a8:	b	11da4 <__assert_fail@plt+0x10c8>
   121ac:	mov	r3, #1
   121b0:	mov	r4, #0
   121b4:	mov	r9, r4
   121b8:	str	r3, [sp, #32]
   121bc:	str	r3, [sp, #44]	; 0x2c
   121c0:	str	r3, [sp, #48]	; 0x30
   121c4:	str	r4, [sp, #52]	; 0x34
   121c8:	str	r3, [sp, #56]	; 0x38
   121cc:	str	r3, [sp, #60]	; 0x3c
   121d0:	str	r3, [sp, #88]	; 0x58
   121d4:	movw	r3, #28720	; 0x7030
   121d8:	movt	r3, #1
   121dc:	str	r4, [sp, #64]	; 0x40
   121e0:	str	r4, [sp, #68]	; 0x44
   121e4:	str	r3, [sp, #72]	; 0x48
   121e8:	ldr	r3, [sp, #180]	; 0xb4
   121ec:	str	r4, [sp, #80]	; 0x50
   121f0:	str	r4, [sp, #84]	; 0x54
   121f4:	and	r3, r3, #1
   121f8:	str	r3, [sp, #92]	; 0x5c
   121fc:	ldr	r3, [sp, #180]	; 0xb4
   12200:	and	r3, r3, #4
   12204:	str	r3, [sp, #96]	; 0x60
   12208:	mov	r3, #5
   1220c:	str	r3, [sp, #176]	; 0xb0
   12210:	b	11da4 <__assert_fail@plt+0x10c8>
   12214:	mov	r3, #1
   12218:	mov	r4, #0
   1221c:	mov	r9, r4
   12220:	str	r3, [sp, #32]
   12224:	str	r4, [sp, #44]	; 0x2c
   12228:	str	r3, [sp, #48]	; 0x30
   1222c:	str	r3, [sp, #60]	; 0x3c
   12230:	ldr	r3, [sp, #180]	; 0xb4
   12234:	str	r4, [sp, #52]	; 0x34
   12238:	str	r4, [sp, #56]	; 0x38
   1223c:	str	r4, [sp, #64]	; 0x40
   12240:	str	r4, [sp, #68]	; 0x44
   12244:	and	r3, r3, #1
   12248:	str	r4, [sp, #72]	; 0x48
   1224c:	str	r4, [sp, #80]	; 0x50
   12250:	str	r4, [sp, #84]	; 0x54
   12254:	str	r3, [sp, #92]	; 0x5c
   12258:	ldr	r3, [sp, #180]	; 0xb4
   1225c:	str	r4, [sp, #88]	; 0x58
   12260:	and	r3, r3, #4
   12264:	str	r3, [sp, #96]	; 0x60
   12268:	b	11da4 <__assert_fail@plt+0x10c8>
   1226c:	mov	r3, #0
   12270:	mov	r2, #1
   12274:	ldr	r1, [sp, #176]	; 0xb0
   12278:	mov	r4, r3
   1227c:	mov	r9, r3
   12280:	movw	r3, #28740	; 0x7044
   12284:	movt	r3, #1
   12288:	str	r2, [sp, #32]
   1228c:	str	r2, [sp, #44]	; 0x2c
   12290:	str	r4, [sp, #48]	; 0x30
   12294:	strd	r2, [sp, #68]	; 0x44
   12298:	ldr	r3, [sp, #180]	; 0xb4
   1229c:	str	r2, [sp, #52]	; 0x34
   122a0:	str	r1, [sp, #56]	; 0x38
   122a4:	str	r4, [sp, #60]	; 0x3c
   122a8:	str	r2, [sp, #64]	; 0x40
   122ac:	and	r3, r3, r2
   122b0:	str	r4, [sp, #80]	; 0x50
   122b4:	str	r4, [sp, #84]	; 0x54
   122b8:	str	r4, [sp, #88]	; 0x58
   122bc:	str	r3, [sp, #92]	; 0x5c
   122c0:	ldr	r3, [sp, #180]	; 0xb4
   122c4:	and	r3, r3, #4
   122c8:	str	r3, [sp, #96]	; 0x60
   122cc:	mov	r3, #2
   122d0:	str	r3, [sp, #176]	; 0xb0
   122d4:	b	11da4 <__assert_fail@plt+0x10c8>
   122d8:	mov	r3, #1
   122dc:	mov	r2, #0
   122e0:	mov	r4, r2
   122e4:	mov	r9, r2
   122e8:	str	r3, [sp, #32]
   122ec:	str	r3, [sp, #44]	; 0x2c
   122f0:	str	r2, [sp, #48]	; 0x30
   122f4:	str	r3, [sp, #52]	; 0x34
   122f8:	str	r3, [sp, #56]	; 0x38
   122fc:	str	r3, [sp, #60]	; 0x3c
   12300:	str	r3, [sp, #64]	; 0x40
   12304:	str	r3, [sp, #68]	; 0x44
   12308:	str	r3, [sp, #88]	; 0x58
   1230c:	movw	r3, #28740	; 0x7044
   12310:	movt	r3, #1
   12314:	str	r3, [sp, #72]	; 0x48
   12318:	ldr	r3, [sp, #180]	; 0xb4
   1231c:	str	r2, [sp, #80]	; 0x50
   12320:	str	r2, [sp, #84]	; 0x54
   12324:	and	r3, r3, #1
   12328:	b	122bc <__assert_fail@plt+0x15e0>
   1232c:	mov	r5, #102	; 0x66
   12330:	mov	r6, #0
   12334:	ldr	r3, [sp, #44]	; 0x2c
   12338:	cmp	r3, #0
   1233c:	bne	131ec <__assert_fail@plt+0x2510>
   12340:	ldr	r2, [sp, #52]	; 0x34
   12344:	eor	r3, fp, #1
   12348:	ands	r3, r2, r3
   1234c:	beq	12384 <__assert_fail@plt+0x16a8>
   12350:	cmp	sl, r4
   12354:	mov	fp, r3
   12358:	movhi	r2, #39	; 0x27
   1235c:	strbhi	r2, [r9, r4]
   12360:	add	r2, r4, #1
   12364:	cmp	sl, r2
   12368:	movhi	r1, #36	; 0x24
   1236c:	strbhi	r1, [r9, r2]
   12370:	add	r2, r4, #2
   12374:	add	r4, r4, #3
   12378:	cmp	sl, r2
   1237c:	movhi	r1, #39	; 0x27
   12380:	strbhi	r1, [r9, r2]
   12384:	cmp	sl, r4
   12388:	add	r7, r7, #1
   1238c:	movhi	r3, #92	; 0x5c
   12390:	strbhi	r3, [r9, r4]
   12394:	add	r4, r4, #1
   12398:	cmp	r4, sl
   1239c:	ldr	r3, [sp, #32]
   123a0:	strbcc	r5, [r9, r4]
   123a4:	cmp	r6, #0
   123a8:	add	r4, r4, #1
   123ac:	moveq	r3, #0
   123b0:	cmn	r8, #1
   123b4:	str	r3, [sp, #32]
   123b8:	bne	11dbc <__assert_fail@plt+0x10e0>
   123bc:	ldr	r3, [sp, #28]
   123c0:	ldrb	r6, [r3, r7]
   123c4:	adds	r6, r6, #0
   123c8:	movne	r6, #1
   123cc:	cmp	r6, #0
   123d0:	bne	11dcc <__assert_fail@plt+0x10f0>
   123d4:	mov	r3, r9
   123d8:	mov	r9, fp
   123dc:	mov	fp, r3
   123e0:	ldr	r3, [sp, #68]	; 0x44
   123e4:	cmp	r4, #0
   123e8:	movne	r3, #0
   123ec:	cmp	r3, #0
   123f0:	bne	135e4 <__assert_fail@plt+0x2908>
   123f4:	ldr	r3, [sp, #44]	; 0x2c
   123f8:	ldr	r2, [sp, #52]	; 0x34
   123fc:	eor	r3, r3, #1
   12400:	ands	r2, r3, r2
   12404:	beq	1351c <__assert_fail@plt+0x2840>
   12408:	ldr	r3, [sp, #80]	; 0x50
   1240c:	cmp	r3, #0
   12410:	beq	13520 <__assert_fail@plt+0x2844>
   12414:	ldr	r3, [sp, #32]
   12418:	cmp	r3, #0
   1241c:	bne	13594 <__assert_fail@plt+0x28b8>
   12420:	ldr	r3, [sp, #84]	; 0x54
   12424:	adds	r3, r3, #0
   12428:	movne	r3, #1
   1242c:	cmp	sl, #0
   12430:	movne	r3, #0
   12434:	cmp	r3, #0
   12438:	ldreq	r2, [sp, #80]	; 0x50
   1243c:	beq	13520 <__assert_fail@plt+0x2844>
   12440:	ldr	r2, [sp, #84]	; 0x54
   12444:	mov	sl, r2
   12448:	mov	r0, #0
   1244c:	mov	r4, #1
   12450:	mov	r1, #39	; 0x27
   12454:	str	r0, [sp, #44]	; 0x2c
   12458:	strb	r1, [fp]
   1245c:	str	r0, [sp, #48]	; 0x30
   12460:	str	r4, [sp, #52]	; 0x34
   12464:	str	r4, [sp, #56]	; 0x38
   12468:	str	r4, [sp, #64]	; 0x40
   1246c:	str	r0, [sp, #68]	; 0x44
   12470:	str	r3, [sp, #80]	; 0x50
   12474:	str	r2, [sp, #84]	; 0x54
   12478:	str	r0, [sp, #88]	; 0x58
   1247c:	b	120bc <__assert_fail@plt+0x13e0>
   12480:	mov	r5, #98	; 0x62
   12484:	b	12330 <__assert_fail@plt+0x1654>
   12488:	mov	r5, #97	; 0x61
   1248c:	b	12330 <__assert_fail@plt+0x1654>
   12490:	ldr	r3, [sp, #48]	; 0x30
   12494:	str	r3, [sp, #40]	; 0x28
   12498:	mov	r3, #116	; 0x74
   1249c:	ldr	r2, [sp, #68]	; 0x44
   124a0:	cmp	r2, #0
   124a4:	bne	126a0 <__assert_fail@plt+0x19c4>
   124a8:	ldr	r2, [sp, #60]	; 0x3c
   124ac:	cmp	r2, #0
   124b0:	bne	125fc <__assert_fail@plt+0x1920>
   124b4:	ldr	r3, [sp, #44]	; 0x2c
   124b8:	mov	r6, #0
   124bc:	cmp	r3, #0
   124c0:	beq	1266c <__assert_fail@plt+0x1990>
   124c4:	mov	r3, fp
   124c8:	ldr	r2, [sp, #184]	; 0xb8
   124cc:	cmp	r2, #0
   124d0:	beq	124f0 <__assert_fail@plt+0x1814>
   124d4:	ubfx	r1, r5, #5, #8
   124d8:	mov	r0, r2
   124dc:	and	r2, r5, #31
   124e0:	ldr	r1, [r0, r1, lsl #2]
   124e4:	lsr	r2, r1, r2
   124e8:	tst	r2, #1
   124ec:	bne	12334 <__assert_fail@plt+0x1658>
   124f0:	ldr	r2, [sp, #40]	; 0x28
   124f4:	cmp	r2, #0
   124f8:	addeq	r7, r7, #1
   124fc:	bne	12334 <__assert_fail@plt+0x1658>
   12500:	cmp	r3, #0
   12504:	beq	12398 <__assert_fail@plt+0x16bc>
   12508:	cmp	sl, r4
   1250c:	mov	fp, #0
   12510:	movhi	r3, #39	; 0x27
   12514:	strbhi	r3, [r9, r4]
   12518:	add	r3, r4, #1
   1251c:	add	r4, r4, #2
   12520:	cmp	sl, r3
   12524:	movhi	r2, #39	; 0x27
   12528:	strbhi	r2, [r9, r3]
   1252c:	b	12398 <__assert_fail@plt+0x16bc>
   12530:	ldr	r3, [sp, #48]	; 0x30
   12534:	str	r3, [sp, #40]	; 0x28
   12538:	eor	r3, fp, #1
   1253c:	ldr	r2, [sp, #52]	; 0x34
   12540:	ands	r2, r2, r3
   12544:	beq	13204 <__assert_fail@plt+0x2528>
   12548:	cmp	sl, r4
   1254c:	movhi	r3, #39	; 0x27
   12550:	strbhi	r3, [r9, r4]
   12554:	add	r3, r4, #1
   12558:	cmp	sl, r3
   1255c:	movhi	r1, #36	; 0x24
   12560:	strbhi	r1, [r9, r3]
   12564:	add	r3, r4, #2
   12568:	cmp	sl, r3
   1256c:	movhi	r1, #39	; 0x27
   12570:	strbhi	r1, [r9, r3]
   12574:	add	r3, r4, #3
   12578:	cmp	sl, r3
   1257c:	bls	13250 <__assert_fail@plt+0x2574>
   12580:	mov	r4, r3
   12584:	mov	r3, #92	; 0x5c
   12588:	mov	fp, r2
   1258c:	mov	r2, r4
   12590:	strb	r3, [r9, r4]
   12594:	ldr	r3, [sp, #176]	; 0xb0
   12598:	add	r4, r4, #1
   1259c:	cmp	r3, #2
   125a0:	beq	132b8 <__assert_fail@plt+0x25dc>
   125a4:	add	r3, r7, #1
   125a8:	cmp	r3, r8
   125ac:	bcs	125c4 <__assert_fail@plt+0x18e8>
   125b0:	ldr	r1, [sp, #28]
   125b4:	ldrb	r3, [r1, r3]
   125b8:	sub	r3, r3, #48	; 0x30
   125bc:	cmp	r3, #9
   125c0:	bls	132c8 <__assert_fail@plt+0x25ec>
   125c4:	mov	r3, #0
   125c8:	mov	r5, #48	; 0x30
   125cc:	ldr	r6, [sp, #64]	; 0x40
   125d0:	cmp	r6, #0
   125d4:	beq	124c8 <__assert_fail@plt+0x17ec>
   125d8:	mov	r6, #0
   125dc:	b	124f0 <__assert_fail@plt+0x1814>
   125e0:	ldr	r3, [sp, #48]	; 0x30
   125e4:	str	r3, [sp, #40]	; 0x28
   125e8:	ldr	r2, [sp, #60]	; 0x3c
   125ec:	mov	r5, #13
   125f0:	mov	r3, #114	; 0x72
   125f4:	cmp	r2, #0
   125f8:	beq	124b4 <__assert_fail@plt+0x17d8>
   125fc:	mov	r5, r3
   12600:	b	12330 <__assert_fail@plt+0x1654>
   12604:	ldr	r3, [sp, #48]	; 0x30
   12608:	str	r3, [sp, #40]	; 0x28
   1260c:	mov	r3, #118	; 0x76
   12610:	b	124a8 <__assert_fail@plt+0x17cc>
   12614:	ldr	r3, [sp, #48]	; 0x30
   12618:	str	r3, [sp, #40]	; 0x28
   1261c:	mov	r5, #10
   12620:	mov	r3, #110	; 0x6e
   12624:	b	124a8 <__assert_fail@plt+0x17cc>
   12628:	ldr	r3, [sp, #48]	; 0x30
   1262c:	cmn	r8, #1
   12630:	str	r3, [sp, #40]	; 0x28
   12634:	beq	12a7c <__assert_fail@plt+0x1da0>
   12638:	subs	r3, r8, #1
   1263c:	movne	r3, #1
   12640:	cmp	r3, #0
   12644:	bne	12650 <__assert_fail@plt+0x1974>
   12648:	cmp	r7, #0
   1264c:	beq	12694 <__assert_fail@plt+0x19b8>
   12650:	mov	r6, #0
   12654:	ldr	r3, [sp, #64]	; 0x40
   12658:	cmp	r3, #0
   1265c:	beq	124c4 <__assert_fail@plt+0x17e8>
   12660:	ldr	r3, [sp, #44]	; 0x2c
   12664:	cmp	r3, #0
   12668:	bne	124c4 <__assert_fail@plt+0x17e8>
   1266c:	mov	r3, fp
   12670:	b	124f0 <__assert_fail@plt+0x1814>
   12674:	ldr	r3, [sp, #48]	; 0x30
   12678:	str	r3, [sp, #40]	; 0x28
   1267c:	b	12648 <__assert_fail@plt+0x196c>
   12680:	ldr	r3, [sp, #48]	; 0x30
   12684:	str	r3, [sp, #40]	; 0x28
   12688:	b	12650 <__assert_fail@plt+0x1974>
   1268c:	ldr	r6, [sp, #48]	; 0x30
   12690:	str	r6, [sp, #40]	; 0x28
   12694:	ldr	r3, [sp, #68]	; 0x44
   12698:	cmp	r3, #0
   1269c:	beq	12654 <__assert_fail@plt+0x1978>
   126a0:	mov	r3, #2
   126a4:	mov	fp, r9
   126a8:	str	r3, [sp, #176]	; 0xb0
   126ac:	ldr	r3, [sp, #60]	; 0x3c
   126b0:	cmp	r3, #0
   126b4:	ldr	r3, [sp, #176]	; 0xb0
   126b8:	movne	r3, #4
   126bc:	str	r3, [sp, #176]	; 0xb0
   126c0:	mov	lr, #0
   126c4:	mov	r0, fp
   126c8:	ldr	r2, [sp, #28]
   126cc:	ldr	r3, [sp, #180]	; 0xb4
   126d0:	ldr	r1, [sp, #188]	; 0xbc
   126d4:	bic	ip, r3, #2
   126d8:	ldr	r3, [sp, #176]	; 0xb0
   126dc:	stm	sp, {r3, ip, lr}
   126e0:	mov	r3, r8
   126e4:	ldr	ip, [sp, #192]	; 0xc0
   126e8:	str	r1, [sp, #12]
   126ec:	mov	r1, sl
   126f0:	str	ip, [sp, #16]
   126f4:	bl	11c80 <__assert_fail@plt+0xfa4>
   126f8:	mov	r4, r0
   126fc:	mov	r0, r4
   12700:	add	sp, sp, #140	; 0x8c
   12704:	ldrd	r4, [sp]
   12708:	ldrd	r6, [sp, #8]
   1270c:	ldrd	r8, [sp, #16]
   12710:	ldrd	sl, [sp, #24]
   12714:	add	sp, sp, #32
   12718:	pop	{pc}		; (ldr pc, [sp], #4)
   1271c:	ldr	r3, [sp, #48]	; 0x30
   12720:	str	r3, [sp, #40]	; 0x28
   12724:	ldr	r3, [sp, #176]	; 0xb0
   12728:	cmp	r3, #2
   1272c:	beq	12aa4 <__assert_fail@plt+0x1dc8>
   12730:	ldr	r3, [sp, #88]	; 0x58
   12734:	cmp	r3, #0
   12738:	moveq	r5, #92	; 0x5c
   1273c:	moveq	r3, r5
   12740:	beq	124a8 <__assert_fail@plt+0x17cc>
   12744:	add	r7, r7, #1
   12748:	mov	r3, fp
   1274c:	mov	r6, #0
   12750:	mov	r5, #92	; 0x5c
   12754:	b	12500 <__assert_fail@plt+0x1824>
   12758:	ldr	r3, [sp, #64]	; 0x40
   1275c:	cmp	r3, #0
   12760:	bne	135d8 <__assert_fail@plt+0x28fc>
   12764:	ldr	r2, [sp, #48]	; 0x30
   12768:	mov	r3, fp
   1276c:	mov	r6, r2
   12770:	str	r2, [sp, #40]	; 0x28
   12774:	b	124c8 <__assert_fail@plt+0x17ec>
   12778:	ldr	r3, [sp, #176]	; 0xb0
   1277c:	cmp	r3, #2
   12780:	beq	13514 <__assert_fail@plt+0x2838>
   12784:	cmp	r3, #5
   12788:	ldr	r3, [sp, #48]	; 0x30
   1278c:	str	r3, [sp, #40]	; 0x28
   12790:	bne	127bc <__assert_fail@plt+0x1ae0>
   12794:	ldr	r3, [sp, #96]	; 0x60
   12798:	cmp	r3, #0
   1279c:	beq	13218 <__assert_fail@plt+0x253c>
   127a0:	add	r3, r7, #2
   127a4:	cmp	r3, r8
   127a8:	bcs	127bc <__assert_fail@plt+0x1ae0>
   127ac:	ldr	r2, [sp, #36]	; 0x24
   127b0:	ldrb	r5, [r2, #1]
   127b4:	cmp	r5, #63	; 0x3f
   127b8:	beq	13300 <__assert_fail@plt+0x2624>
   127bc:	mov	r6, #0
   127c0:	mov	r5, #63	; 0x3f
   127c4:	b	12654 <__assert_fail@plt+0x1978>
   127c8:	ldr	r3, [sp, #176]	; 0xb0
   127cc:	cmp	r3, #2
   127d0:	ldr	r3, [sp, #48]	; 0x30
   127d4:	beq	12fbc <__assert_fail@plt+0x22e0>
   127d8:	mov	r5, #39	; 0x27
   127dc:	str	r3, [sp, #40]	; 0x28
   127e0:	str	r6, [sp, #80]	; 0x50
   127e4:	b	12654 <__assert_fail@plt+0x1978>
   127e8:	ldr	r3, [sp, #180]	; 0xb4
   127ec:	cmp	r4, #0
   127f0:	and	r3, r3, #1
   127f4:	str	r3, [sp, #92]	; 0x5c
   127f8:	ldr	r3, [sp, #180]	; 0xb4
   127fc:	and	r3, r3, #4
   12800:	str	r3, [sp, #96]	; 0x60
   12804:	bne	13624 <__assert_fail@plt+0x2948>
   12808:	str	r4, [sp, #60]	; 0x3c
   1280c:	cmp	sl, #0
   12810:	bne	13608 <__assert_fail@plt+0x292c>
   12814:	mov	r3, #1
   12818:	movw	r2, #28740	; 0x7044
   1281c:	movt	r2, #1
   12820:	mov	r4, r3
   12824:	mov	r3, #2
   12828:	mov	r9, sl
   1282c:	str	r4, [sp, #32]
   12830:	str	sl, [sp, #44]	; 0x2c
   12834:	str	sl, [sp, #48]	; 0x30
   12838:	str	r4, [sp, #52]	; 0x34
   1283c:	str	r4, [sp, #56]	; 0x38
   12840:	str	r4, [sp, #64]	; 0x40
   12844:	str	sl, [sp, #68]	; 0x44
   12848:	str	r2, [sp, #72]	; 0x48
   1284c:	str	sl, [sp, #80]	; 0x50
   12850:	str	sl, [sp, #84]	; 0x54
   12854:	str	sl, [sp, #88]	; 0x58
   12858:	str	r3, [sp, #176]	; 0xb0
   1285c:	b	11da4 <__assert_fail@plt+0x10c8>
   12860:	ldrb	r5, [r0, r7]
   12864:	cmp	r5, #126	; 0x7e
   12868:	ldrls	pc, [pc, r5, lsl #2]
   1286c:	b	12bd0 <__assert_fail@plt+0x1ef4>
   12870:	muleq	r1, ip, fp
   12874:	ldrdeq	r2, [r1], -r0
   12878:	ldrdeq	r2, [r1], -r0
   1287c:	ldrdeq	r2, [r1], -r0
   12880:	ldrdeq	r2, [r1], -r0
   12884:	ldrdeq	r2, [r1], -r0
   12888:	ldrdeq	r2, [r1], -r0
   1288c:	andeq	r2, r1, ip, lsl #23
   12890:	andeq	r2, r1, ip, ror fp
   12894:	andeq	r2, r1, r0, lsl #22
   12898:	andeq	r2, r1, ip, ror #22
   1289c:	andeq	r2, r1, r0, ror #21
   128a0:	andeq	r2, r1, r0, asr #23
   128a4:	andeq	r2, r1, ip, asr #22
   128a8:	ldrdeq	r2, [r1], -r0
   128ac:	ldrdeq	r2, [r1], -r0
   128b0:	ldrdeq	r2, [r1], -r0
   128b4:	ldrdeq	r2, [r1], -r0
   128b8:	ldrdeq	r2, [r1], -r0
   128bc:	ldrdeq	r2, [r1], -r0
   128c0:	ldrdeq	r2, [r1], -r0
   128c4:	ldrdeq	r2, [r1], -r0
   128c8:	ldrdeq	r2, [r1], -r0
   128cc:	ldrdeq	r2, [r1], -r0
   128d0:	ldrdeq	r2, [r1], -r0
   128d4:	ldrdeq	r2, [r1], -r0
   128d8:	ldrdeq	r2, [r1], -r0
   128dc:	ldrdeq	r2, [r1], -r0
   128e0:	ldrdeq	r2, [r1], -r0
   128e4:	ldrdeq	r2, [r1], -r0
   128e8:	ldrdeq	r2, [r1], -r0
   128ec:	ldrdeq	r2, [r1], -r0
   128f0:	strdeq	r2, [r1], -r4
   128f4:	andeq	r2, r1, ip, asr fp
   128f8:	andeq	r2, r1, ip, asr fp
   128fc:	ldrdeq	r2, [r1], -r4
   12900:	andeq	r2, r1, ip, asr fp
   12904:	andeq	r2, r1, r8, asr #21
   12908:	andeq	r2, r1, ip, asr fp
   1290c:	andeq	r2, r1, r8, lsr fp
   12910:	andeq	r2, r1, ip, asr fp
   12914:	andeq	r2, r1, ip, asr fp
   12918:	andeq	r2, r1, ip, asr fp
   1291c:	andeq	r2, r1, r8, asr #21
   12920:	andeq	r2, r1, r8, asr #21
   12924:	andeq	r2, r1, r8, asr #21
   12928:	andeq	r2, r1, r8, asr #21
   1292c:	andeq	r2, r1, r8, asr #21
   12930:	andeq	r2, r1, r8, asr #21
   12934:	andeq	r2, r1, r8, asr #21
   12938:	andeq	r2, r1, r8, asr #21
   1293c:	andeq	r2, r1, r8, asr #21
   12940:	andeq	r2, r1, r8, asr #21
   12944:	andeq	r2, r1, r8, asr #21
   12948:	andeq	r2, r1, r8, asr #21
   1294c:	andeq	r2, r1, r8, asr #21
   12950:	andeq	r2, r1, r8, asr #21
   12954:	andeq	r2, r1, r8, asr #21
   12958:	andeq	r2, r1, r8, asr #21
   1295c:	andeq	r2, r1, ip, asr fp
   12960:	andeq	r2, r1, ip, asr fp
   12964:	andeq	r2, r1, ip, asr fp
   12968:	andeq	r2, r1, ip, asr fp
   1296c:	andeq	r2, r1, r0, lsl fp
   12970:	ldrdeq	r2, [r1], -r0
   12974:	andeq	r2, r1, r8, asr #21
   12978:	andeq	r2, r1, r8, asr #21
   1297c:	andeq	r2, r1, r8, asr #21
   12980:	andeq	r2, r1, r8, asr #21
   12984:	andeq	r2, r1, r8, asr #21
   12988:	andeq	r2, r1, r8, asr #21
   1298c:	andeq	r2, r1, r8, asr #21
   12990:	andeq	r2, r1, r8, asr #21
   12994:	andeq	r2, r1, r8, asr #21
   12998:	andeq	r2, r1, r8, asr #21
   1299c:	andeq	r2, r1, r8, asr #21
   129a0:	andeq	r2, r1, r8, asr #21
   129a4:	andeq	r2, r1, r8, asr #21
   129a8:	andeq	r2, r1, r8, asr #21
   129ac:	andeq	r2, r1, r8, asr #21
   129b0:	andeq	r2, r1, r8, asr #21
   129b4:	andeq	r2, r1, r8, asr #21
   129b8:	andeq	r2, r1, r8, asr #21
   129bc:	andeq	r2, r1, r8, asr #21
   129c0:	andeq	r2, r1, r8, asr #21
   129c4:	andeq	r2, r1, r8, asr #21
   129c8:	andeq	r2, r1, r8, asr #21
   129cc:	andeq	r2, r1, r8, asr #21
   129d0:	andeq	r2, r1, r8, asr #21
   129d4:	andeq	r2, r1, r8, asr #21
   129d8:	andeq	r2, r1, r8, asr #21
   129dc:	andeq	r2, r1, ip, asr fp
   129e0:	muleq	r1, r0, sl
   129e4:	andeq	r2, r1, r8, asr #21
   129e8:	andeq	r2, r1, ip, asr fp
   129ec:	andeq	r2, r1, r8, asr #21
   129f0:	andeq	r2, r1, ip, asr fp
   129f4:	andeq	r2, r1, r8, asr #21
   129f8:	andeq	r2, r1, r8, asr #21
   129fc:	andeq	r2, r1, r8, asr #21
   12a00:	andeq	r2, r1, r8, asr #21
   12a04:	andeq	r2, r1, r8, asr #21
   12a08:	andeq	r2, r1, r8, asr #21
   12a0c:	andeq	r2, r1, r8, asr #21
   12a10:	andeq	r2, r1, r8, asr #21
   12a14:	andeq	r2, r1, r8, asr #21
   12a18:	andeq	r2, r1, r8, asr #21
   12a1c:	andeq	r2, r1, r8, asr #21
   12a20:	andeq	r2, r1, r8, asr #21
   12a24:	andeq	r2, r1, r8, asr #21
   12a28:	andeq	r2, r1, r8, asr #21
   12a2c:	andeq	r2, r1, r8, asr #21
   12a30:	andeq	r2, r1, r8, asr #21
   12a34:	andeq	r2, r1, r8, asr #21
   12a38:	andeq	r2, r1, r8, asr #21
   12a3c:	andeq	r2, r1, r8, asr #21
   12a40:	andeq	r2, r1, r8, asr #21
   12a44:	andeq	r2, r1, r8, asr #21
   12a48:	andeq	r2, r1, r8, asr #21
   12a4c:	andeq	r2, r1, r8, asr #21
   12a50:	andeq	r2, r1, r8, asr #21
   12a54:	andeq	r2, r1, r8, asr #21
   12a58:	andeq	r2, r1, r8, asr #21
   12a5c:	andeq	r2, r1, ip, ror #20
   12a60:	andeq	r2, r1, ip, asr fp
   12a64:	andeq	r2, r1, ip, ror #20
   12a68:	ldrdeq	r2, [r1], -r4
   12a6c:	mov	r3, #0
   12a70:	cmn	r8, #1
   12a74:	str	r3, [sp, #40]	; 0x28
   12a78:	bne	12638 <__assert_fail@plt+0x195c>
   12a7c:	ldr	r3, [sp, #28]
   12a80:	ldrb	r3, [r3, #1]
   12a84:	adds	r3, r3, #0
   12a88:	movne	r3, #1
   12a8c:	b	12640 <__assert_fail@plt+0x1964>
   12a90:	mov	r3, #0
   12a94:	str	r3, [sp, #40]	; 0x28
   12a98:	ldr	r3, [sp, #176]	; 0xb0
   12a9c:	cmp	r3, #2
   12aa0:	bne	12730 <__assert_fail@plt+0x1a54>
   12aa4:	ldr	r3, [sp, #44]	; 0x2c
   12aa8:	cmp	r3, #0
   12aac:	bne	133ec <__assert_fail@plt+0x2710>
   12ab0:	mov	r6, r3
   12ab4:	add	r7, r7, #1
   12ab8:	mov	r3, fp
   12abc:	mov	r5, #92	; 0x5c
   12ac0:	b	12500 <__assert_fail@plt+0x1824>
   12ac4:	ldr	r6, [sp, #48]	; 0x30
   12ac8:	mov	r3, #0
   12acc:	str	r3, [sp, #40]	; 0x28
   12ad0:	b	12654 <__assert_fail@plt+0x1978>
   12ad4:	mov	r3, #0
   12ad8:	str	r3, [sp, #40]	; 0x28
   12adc:	b	12648 <__assert_fail@plt+0x196c>
   12ae0:	mov	r3, #0
   12ae4:	str	r3, [sp, #40]	; 0x28
   12ae8:	mov	r3, #118	; 0x76
   12aec:	b	124a8 <__assert_fail@plt+0x17cc>
   12af0:	ldr	r6, [sp, #48]	; 0x30
   12af4:	mov	r3, #0
   12af8:	str	r3, [sp, #40]	; 0x28
   12afc:	b	12694 <__assert_fail@plt+0x19b8>
   12b00:	mov	r3, #0
   12b04:	str	r3, [sp, #40]	; 0x28
   12b08:	mov	r3, #116	; 0x74
   12b0c:	b	1249c <__assert_fail@plt+0x17c0>
   12b10:	ldr	r3, [sp, #176]	; 0xb0
   12b14:	cmp	r3, #2
   12b18:	beq	13028 <__assert_fail@plt+0x234c>
   12b1c:	cmp	r3, #5
   12b20:	mov	r3, #0
   12b24:	str	r3, [sp, #40]	; 0x28
   12b28:	beq	12794 <__assert_fail@plt+0x1ab8>
   12b2c:	mov	r6, #0
   12b30:	mov	r5, #63	; 0x3f
   12b34:	b	12654 <__assert_fail@plt+0x1978>
   12b38:	ldr	r3, [sp, #176]	; 0xb0
   12b3c:	cmp	r3, #2
   12b40:	beq	12fb0 <__assert_fail@plt+0x22d4>
   12b44:	mov	r3, #0
   12b48:	b	127d8 <__assert_fail@plt+0x1afc>
   12b4c:	mov	r3, #0
   12b50:	str	r3, [sp, #40]	; 0x28
   12b54:	mov	r3, #114	; 0x72
   12b58:	b	1249c <__assert_fail@plt+0x17c0>
   12b5c:	mov	r3, #0
   12b60:	mov	r6, r3
   12b64:	str	r3, [sp, #40]	; 0x28
   12b68:	b	12694 <__assert_fail@plt+0x19b8>
   12b6c:	mov	r3, #0
   12b70:	str	r3, [sp, #40]	; 0x28
   12b74:	mov	r3, #110	; 0x6e
   12b78:	b	1249c <__assert_fail@plt+0x17c0>
   12b7c:	mov	r3, #0
   12b80:	str	r3, [sp, #40]	; 0x28
   12b84:	mov	r3, #98	; 0x62
   12b88:	b	124a8 <__assert_fail@plt+0x17cc>
   12b8c:	mov	r3, #0
   12b90:	str	r3, [sp, #40]	; 0x28
   12b94:	mov	r3, #97	; 0x61
   12b98:	b	124a8 <__assert_fail@plt+0x17cc>
   12b9c:	ldr	r3, [sp, #60]	; 0x3c
   12ba0:	cmp	r3, #0
   12ba4:	bne	12f94 <__assert_fail@plt+0x22b8>
   12ba8:	ldr	r3, [sp, #92]	; 0x5c
   12bac:	cmp	r3, #0
   12bb0:	addne	r7, r7, #1
   12bb4:	bne	11db4 <__assert_fail@plt+0x10d8>
   12bb8:	str	r3, [sp, #40]	; 0x28
   12bbc:	b	124b4 <__assert_fail@plt+0x17d8>
   12bc0:	mov	r3, #0
   12bc4:	str	r3, [sp, #40]	; 0x28
   12bc8:	mov	r3, #102	; 0x66
   12bcc:	b	124a8 <__assert_fail@plt+0x17cc>
   12bd0:	mov	r3, #0
   12bd4:	str	r3, [sp, #40]	; 0x28
   12bd8:	ldr	r3, [sp, #76]	; 0x4c
   12bdc:	cmp	r3, #1
   12be0:	bne	13048 <__assert_fail@plt+0x236c>
   12be4:	bl	10c04 <__ctype_b_loc@plt>
   12be8:	ldr	r2, [r0]
   12bec:	sxth	r3, r5
   12bf0:	lsl	r3, r3, #1
   12bf4:	ldr	r1, [sp, #76]	; 0x4c
   12bf8:	ldrh	r3, [r2, r3]
   12bfc:	mov	r0, r1
   12c00:	and	r3, r3, #16384	; 0x4000
   12c04:	cmp	r3, #0
   12c08:	ldr	r3, [sp, #60]	; 0x3c
   12c0c:	movne	r6, #1
   12c10:	moveq	r6, #0
   12c14:	movne	r2, #0
   12c18:	andeq	r2, r3, #1
   12c1c:	cmp	r2, #0
   12c20:	beq	12654 <__assert_fail@plt+0x1978>
   12c24:	ldr	r2, [sp, #60]	; 0x3c
   12c28:	mov	r6, #0
   12c2c:	add	r1, r0, r7
   12c30:	mov	ip, #39	; 0x27
   12c34:	str	r6, [sp, #100]	; 0x64
   12c38:	mov	r0, #0
   12c3c:	ldr	lr, [sp, #36]	; 0x24
   12c40:	str	r8, [sp, #36]	; 0x24
   12c44:	ldr	r6, [sp, #40]	; 0x28
   12c48:	ldr	r8, [sp, #44]	; 0x2c
   12c4c:	b	12cfc <__assert_fail@plt+0x2020>
   12c50:	cmp	r8, #0
   12c54:	bne	13230 <__assert_fail@plt+0x2554>
   12c58:	ldr	r0, [sp, #52]	; 0x34
   12c5c:	eor	r3, fp, #1
   12c60:	ands	r3, r0, r3
   12c64:	beq	12c94 <__assert_fail@plt+0x1fb8>
   12c68:	cmp	sl, r4
   12c6c:	add	r0, r4, #1
   12c70:	strbhi	ip, [r9, r4]
   12c74:	cmp	sl, r0
   12c78:	movhi	fp, #36	; 0x24
   12c7c:	strbhi	fp, [r9, r0]
   12c80:	add	r0, r4, #2
   12c84:	mov	fp, r3
   12c88:	cmp	sl, r0
   12c8c:	add	r4, r4, #3
   12c90:	strbhi	ip, [r9, r0]
   12c94:	cmp	sl, r4
   12c98:	movhi	r3, #92	; 0x5c
   12c9c:	strbhi	r3, [r9, r4]
   12ca0:	add	r3, r4, #1
   12ca4:	cmp	sl, r3
   12ca8:	bls	12cb8 <__assert_fail@plt+0x1fdc>
   12cac:	lsr	r0, r5, #6
   12cb0:	add	r0, r0, #48	; 0x30
   12cb4:	strb	r0, [r9, r3]
   12cb8:	add	r3, r4, #2
   12cbc:	cmp	sl, r3
   12cc0:	bls	12cd0 <__assert_fail@plt+0x1ff4>
   12cc4:	ubfx	r0, r5, #3, #3
   12cc8:	add	r0, r0, #48	; 0x30
   12ccc:	strb	r0, [r9, r3]
   12cd0:	add	r7, r7, #1
   12cd4:	and	r5, r5, #7
   12cd8:	cmp	r1, r7
   12cdc:	add	r5, r5, #48	; 0x30
   12ce0:	add	r4, r4, #3
   12ce4:	bls	13244 <__assert_fail@plt+0x2568>
   12ce8:	mov	r0, r2
   12cec:	cmp	sl, r4
   12cf0:	strbhi	r5, [r9, r4]
   12cf4:	add	r4, r4, #1
   12cf8:	ldrb	r5, [lr, #1]!
   12cfc:	cmp	r2, #0
   12d00:	bne	12c50 <__assert_fail@plt+0x1f74>
   12d04:	eor	r3, r0, #1
   12d08:	cmp	r6, #0
   12d0c:	and	r3, r3, fp
   12d10:	uxtb	r3, r3
   12d14:	beq	12d28 <__assert_fail@plt+0x204c>
   12d18:	cmp	sl, r4
   12d1c:	movhi	r6, #92	; 0x5c
   12d20:	strbhi	r6, [r9, r4]
   12d24:	add	r4, r4, #1
   12d28:	add	r7, r7, #1
   12d2c:	cmp	r7, r1
   12d30:	bcs	13224 <__assert_fail@plt+0x2548>
   12d34:	cmp	r3, #0
   12d38:	beq	13268 <__assert_fail@plt+0x258c>
   12d3c:	cmp	sl, r4
   12d40:	add	r3, r4, #1
   12d44:	mov	r6, #0
   12d48:	strbhi	ip, [r9, r4]
   12d4c:	cmp	sl, r3
   12d50:	add	r4, r4, #2
   12d54:	mov	fp, r6
   12d58:	strbhi	ip, [r9, r3]
   12d5c:	b	12cec <__assert_fail@plt+0x2010>
   12d60:	ldr	r3, [sp, #36]	; 0x24
   12d64:	ldrb	r5, [r3]
   12d68:	cmp	r5, #126	; 0x7e
   12d6c:	ldrls	pc, [pc, r5, lsl #2]
   12d70:	b	12bd0 <__assert_fail@plt+0x1ef4>
   12d74:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12d78:	ldrdeq	r2, [r1], -r0
   12d7c:	ldrdeq	r2, [r1], -r0
   12d80:	ldrdeq	r2, [r1], -r0
   12d84:	ldrdeq	r2, [r1], -r0
   12d88:	ldrdeq	r2, [r1], -r0
   12d8c:	ldrdeq	r2, [r1], -r0
   12d90:	andeq	r2, r1, r8, lsl #9
   12d94:	andeq	r2, r1, r0, lsl #9
   12d98:	andeq	r2, r1, r0, lsl #22
   12d9c:	andeq	r2, r1, r8, lsl #31
   12da0:	andeq	r2, r1, r0, ror #21
   12da4:	andeq	r2, r1, ip, lsr #6
   12da8:	andeq	r2, r1, ip, ror pc
   12dac:	ldrdeq	r2, [r1], -r0
   12db0:	ldrdeq	r2, [r1], -r0
   12db4:	ldrdeq	r2, [r1], -r0
   12db8:	ldrdeq	r2, [r1], -r0
   12dbc:	ldrdeq	r2, [r1], -r0
   12dc0:	ldrdeq	r2, [r1], -r0
   12dc4:	ldrdeq	r2, [r1], -r0
   12dc8:	ldrdeq	r2, [r1], -r0
   12dcc:	ldrdeq	r2, [r1], -r0
   12dd0:	ldrdeq	r2, [r1], -r0
   12dd4:	ldrdeq	r2, [r1], -r0
   12dd8:	ldrdeq	r2, [r1], -r0
   12ddc:	ldrdeq	r2, [r1], -r0
   12de0:	ldrdeq	r2, [r1], -r0
   12de4:	ldrdeq	r2, [r1], -r0
   12de8:	ldrdeq	r2, [r1], -r0
   12dec:	ldrdeq	r2, [r1], -r0
   12df0:	ldrdeq	r2, [r1], -r0
   12df4:	strdeq	r2, [r1], -r0
   12df8:	andeq	r2, r1, r0, ror pc
   12dfc:	andeq	r2, r1, r0, ror pc
   12e00:	ldrdeq	r2, [r1], -r4
   12e04:	andeq	r2, r1, r0, ror pc
   12e08:	andeq	r2, r1, r4, asr #21
   12e0c:	andeq	r2, r1, r0, ror pc
   12e10:	andeq	r2, r1, r8, lsr fp
   12e14:	andeq	r2, r1, r0, ror pc
   12e18:	andeq	r2, r1, r0, ror pc
   12e1c:	andeq	r2, r1, r0, ror pc
   12e20:	andeq	r2, r1, r4, asr #21
   12e24:	andeq	r2, r1, r4, asr #21
   12e28:	andeq	r2, r1, r4, asr #21
   12e2c:	andeq	r2, r1, r4, asr #21
   12e30:	andeq	r2, r1, r4, asr #21
   12e34:	andeq	r2, r1, r4, asr #21
   12e38:	andeq	r2, r1, r4, asr #21
   12e3c:	andeq	r2, r1, r4, asr #21
   12e40:	andeq	r2, r1, r4, asr #21
   12e44:	andeq	r2, r1, r4, asr #21
   12e48:	andeq	r2, r1, r4, asr #21
   12e4c:	andeq	r2, r1, r4, asr #21
   12e50:	andeq	r2, r1, r4, asr #21
   12e54:	andeq	r2, r1, r4, asr #21
   12e58:	andeq	r2, r1, r4, asr #21
   12e5c:	andeq	r2, r1, r4, asr #21
   12e60:	andeq	r2, r1, r0, ror pc
   12e64:	andeq	r2, r1, r0, ror pc
   12e68:	andeq	r2, r1, r0, ror pc
   12e6c:	andeq	r2, r1, r0, ror pc
   12e70:	andeq	r2, r1, r0, lsl fp
   12e74:	ldrdeq	r2, [r1], -r0
   12e78:	andeq	r2, r1, r4, asr #21
   12e7c:	andeq	r2, r1, r4, asr #21
   12e80:	andeq	r2, r1, r4, asr #21
   12e84:	andeq	r2, r1, r4, asr #21
   12e88:	andeq	r2, r1, r4, asr #21
   12e8c:	andeq	r2, r1, r4, asr #21
   12e90:	andeq	r2, r1, r4, asr #21
   12e94:	andeq	r2, r1, r4, asr #21
   12e98:	andeq	r2, r1, r4, asr #21
   12e9c:	andeq	r2, r1, r4, asr #21
   12ea0:	andeq	r2, r1, r4, asr #21
   12ea4:	andeq	r2, r1, r4, asr #21
   12ea8:	andeq	r2, r1, r4, asr #21
   12eac:	andeq	r2, r1, r4, asr #21
   12eb0:	andeq	r2, r1, r4, asr #21
   12eb4:	andeq	r2, r1, r4, asr #21
   12eb8:	andeq	r2, r1, r4, asr #21
   12ebc:	andeq	r2, r1, r4, asr #21
   12ec0:	andeq	r2, r1, r4, asr #21
   12ec4:	andeq	r2, r1, r4, asr #21
   12ec8:	andeq	r2, r1, r4, asr #21
   12ecc:	andeq	r2, r1, r4, asr #21
   12ed0:	andeq	r2, r1, r4, asr #21
   12ed4:	andeq	r2, r1, r4, asr #21
   12ed8:	andeq	r2, r1, r4, asr #21
   12edc:	andeq	r2, r1, r4, asr #21
   12ee0:	andeq	r2, r1, r0, ror pc
   12ee4:	muleq	r1, r0, sl
   12ee8:	andeq	r2, r1, r4, asr #21
   12eec:	andeq	r2, r1, r0, ror pc
   12ef0:	andeq	r2, r1, r4, asr #21
   12ef4:	andeq	r2, r1, r0, ror pc
   12ef8:	andeq	r2, r1, r4, asr #21
   12efc:	andeq	r2, r1, r4, asr #21
   12f00:	andeq	r2, r1, r4, asr #21
   12f04:	andeq	r2, r1, r4, asr #21
   12f08:	andeq	r2, r1, r4, asr #21
   12f0c:	andeq	r2, r1, r4, asr #21
   12f10:	andeq	r2, r1, r4, asr #21
   12f14:	andeq	r2, r1, r4, asr #21
   12f18:	andeq	r2, r1, r4, asr #21
   12f1c:	andeq	r2, r1, r4, asr #21
   12f20:	andeq	r2, r1, r4, asr #21
   12f24:	andeq	r2, r1, r4, asr #21
   12f28:	andeq	r2, r1, r4, asr #21
   12f2c:	andeq	r2, r1, r4, asr #21
   12f30:	andeq	r2, r1, r4, asr #21
   12f34:	andeq	r2, r1, r4, asr #21
   12f38:	andeq	r2, r1, r4, asr #21
   12f3c:	andeq	r2, r1, r4, asr #21
   12f40:	andeq	r2, r1, r4, asr #21
   12f44:	andeq	r2, r1, r4, asr #21
   12f48:	andeq	r2, r1, r4, asr #21
   12f4c:	andeq	r2, r1, r4, asr #21
   12f50:	andeq	r2, r1, r4, asr #21
   12f54:	andeq	r2, r1, r4, asr #21
   12f58:	andeq	r2, r1, r4, asr #21
   12f5c:	andeq	r2, r1, r4, asr #21
   12f60:	andeq	r2, r1, ip, ror #20
   12f64:	andeq	r2, r1, r0, ror pc
   12f68:	andeq	r2, r1, ip, ror #20
   12f6c:	ldrdeq	r2, [r1], -r4
   12f70:	mov	r3, #0
   12f74:	str	r3, [sp, #40]	; 0x28
   12f78:	b	12650 <__assert_fail@plt+0x1974>
   12f7c:	mov	r3, #0
   12f80:	str	r3, [sp, #40]	; 0x28
   12f84:	b	125e8 <__assert_fail@plt+0x190c>
   12f88:	mov	r3, #0
   12f8c:	str	r3, [sp, #40]	; 0x28
   12f90:	b	1261c <__assert_fail@plt+0x1940>
   12f94:	ldr	r3, [sp, #44]	; 0x2c
   12f98:	cmp	r3, #0
   12f9c:	beq	12534 <__assert_fail@plt+0x1858>
   12fa0:	ldr	r3, [sp, #52]	; 0x34
   12fa4:	mov	fp, r9
   12fa8:	str	r3, [sp, #60]	; 0x3c
   12fac:	b	126ac <__assert_fail@plt+0x19d0>
   12fb0:	ldr	r3, [sp, #44]	; 0x2c
   12fb4:	cmp	r3, #0
   12fb8:	bne	133ec <__assert_fail@plt+0x2710>
   12fbc:	str	r3, [sp, #40]	; 0x28
   12fc0:	cmp	sl, #0
   12fc4:	ldr	r3, [sp, #84]	; 0x54
   12fc8:	clz	r3, r3
   12fcc:	lsr	r3, r3, #5
   12fd0:	moveq	r3, #0
   12fd4:	cmp	r3, #0
   12fd8:	strne	sl, [sp, #84]	; 0x54
   12fdc:	movne	sl, #0
   12fe0:	bne	13010 <__assert_fail@plt+0x2334>
   12fe4:	cmp	sl, r4
   12fe8:	movhi	r3, #39	; 0x27
   12fec:	strbhi	r3, [r9, r4]
   12ff0:	add	r3, r4, #1
   12ff4:	cmp	sl, r3
   12ff8:	movhi	r2, #92	; 0x5c
   12ffc:	strbhi	r2, [r9, r3]
   13000:	add	r3, r4, #2
   13004:	cmp	sl, r3
   13008:	movhi	r2, #39	; 0x27
   1300c:	strbhi	r2, [r9, r3]
   13010:	mov	r3, #0
   13014:	add	r4, r4, #3
   13018:	str	r6, [sp, #80]	; 0x50
   1301c:	mov	fp, r3
   13020:	mov	r5, #39	; 0x27
   13024:	b	124f0 <__assert_fail@plt+0x1814>
   13028:	ldr	r3, [sp, #44]	; 0x2c
   1302c:	cmp	r3, #0
   13030:	bne	133ec <__assert_fail@plt+0x2710>
   13034:	mov	r6, #0
   13038:	mov	r5, #63	; 0x3f
   1303c:	str	r3, [sp, #40]	; 0x28
   13040:	mov	r3, fp
   13044:	b	124f0 <__assert_fail@plt+0x1814>
   13048:	mov	r2, #0
   1304c:	mov	r3, #0
   13050:	cmn	r8, #1
   13054:	strd	r2, [sp, #128]	; 0x80
   13058:	bne	13068 <__assert_fail@plt+0x238c>
   1305c:	ldr	r0, [sp, #28]
   13060:	bl	10c1c <strlen@plt>
   13064:	mov	r8, r0
   13068:	str	r9, [sp, #100]	; 0x64
   1306c:	mov	r3, #0
   13070:	strd	sl, [sp, #104]	; 0x68
   13074:	ldr	sl, [sp, #28]
   13078:	str	r5, [sp, #112]	; 0x70
   1307c:	mov	r5, r3
   13080:	ldr	r9, [sp, #68]	; 0x44
   13084:	str	r4, [sp, #116]	; 0x74
   13088:	add	r4, r7, r5
   1308c:	add	r3, sp, #128	; 0x80
   13090:	add	fp, sl, r4
   13094:	sub	r2, r8, r4
   13098:	mov	r1, fp
   1309c:	add	r0, sp, #124	; 0x7c
   130a0:	bl	166bc <__assert_fail@plt+0x59e0>
   130a4:	subs	r1, r0, #0
   130a8:	beq	130e8 <__assert_fail@plt+0x240c>
   130ac:	cmn	r1, #1
   130b0:	beq	13440 <__assert_fail@plt+0x2764>
   130b4:	cmn	r1, #2
   130b8:	beq	13460 <__assert_fail@plt+0x2784>
   130bc:	cmp	r9, #0
   130c0:	bne	13118 <__assert_fail@plt+0x243c>
   130c4:	ldr	r0, [sp, #124]	; 0x7c
   130c8:	add	r5, r5, r1
   130cc:	bl	10b74 <iswprint@plt>
   130d0:	cmp	r0, #0
   130d4:	add	r0, sp, #128	; 0x80
   130d8:	moveq	r6, #0
   130dc:	bl	10b2c <mbsinit@plt>
   130e0:	cmp	r0, #0
   130e4:	beq	13088 <__assert_fail@plt+0x23ac>
   130e8:	ldr	r3, [sp, #60]	; 0x3c
   130ec:	add	r9, sp, #100	; 0x64
   130f0:	mov	r0, r5
   130f4:	ldm	r9, {r9, sl, fp}
   130f8:	eor	r2, r6, #1
   130fc:	ldr	r5, [sp, #112]	; 0x70
   13100:	and	r2, r2, r3
   13104:	uxtb	r2, r2
   13108:	ldr	r4, [sp, #116]	; 0x74
   1310c:	cmp	r0, #1
   13110:	bhi	12c2c <__assert_fail@plt+0x1f50>
   13114:	b	12c1c <__assert_fail@plt+0x1f40>
   13118:	cmp	r1, #1
   1311c:	beq	130c4 <__assert_fail@plt+0x23e8>
   13120:	add	r2, r4, #1
   13124:	add	r3, sl, r1
   13128:	add	r2, sl, r2
   1312c:	add	r4, r3, r4
   13130:	ldrb	r3, [r2], #1
   13134:	sub	r3, r3, #91	; 0x5b
   13138:	cmp	r3, #33	; 0x21
   1313c:	ldrls	pc, [pc, r3, lsl #2]
   13140:	b	131cc <__assert_fail@plt+0x24f0>
   13144:	ldrdeq	r3, [r1], -r8
   13148:	ldrdeq	r3, [r1], -r8
   1314c:	andeq	r3, r1, ip, asr #3
   13150:	ldrdeq	r3, [r1], -r8
   13154:	andeq	r3, r1, ip, asr #3
   13158:	ldrdeq	r3, [r1], -r8
   1315c:	andeq	r3, r1, ip, asr #3
   13160:	andeq	r3, r1, ip, asr #3
   13164:	andeq	r3, r1, ip, asr #3
   13168:	andeq	r3, r1, ip, asr #3
   1316c:	andeq	r3, r1, ip, asr #3
   13170:	andeq	r3, r1, ip, asr #3
   13174:	andeq	r3, r1, ip, asr #3
   13178:	andeq	r3, r1, ip, asr #3
   1317c:	andeq	r3, r1, ip, asr #3
   13180:	andeq	r3, r1, ip, asr #3
   13184:	andeq	r3, r1, ip, asr #3
   13188:	andeq	r3, r1, ip, asr #3
   1318c:	andeq	r3, r1, ip, asr #3
   13190:	andeq	r3, r1, ip, asr #3
   13194:	andeq	r3, r1, ip, asr #3
   13198:	andeq	r3, r1, ip, asr #3
   1319c:	andeq	r3, r1, ip, asr #3
   131a0:	andeq	r3, r1, ip, asr #3
   131a4:	andeq	r3, r1, ip, asr #3
   131a8:	andeq	r3, r1, ip, asr #3
   131ac:	andeq	r3, r1, ip, asr #3
   131b0:	andeq	r3, r1, ip, asr #3
   131b4:	andeq	r3, r1, ip, asr #3
   131b8:	andeq	r3, r1, ip, asr #3
   131bc:	andeq	r3, r1, ip, asr #3
   131c0:	andeq	r3, r1, ip, asr #3
   131c4:	andeq	r3, r1, ip, asr #3
   131c8:	ldrdeq	r3, [r1], -r8
   131cc:	cmp	r4, r2
   131d0:	bne	13130 <__assert_fail@plt+0x2454>
   131d4:	b	130c4 <__assert_fail@plt+0x23e8>
   131d8:	mov	r3, #2
   131dc:	ldr	fp, [sp, #100]	; 0x64
   131e0:	str	r3, [sp, #176]	; 0xb0
   131e4:	ldr	sl, [sp, #104]	; 0x68
   131e8:	b	126ac <__assert_fail@plt+0x19d0>
   131ec:	ldr	r2, [sp, #52]	; 0x34
   131f0:	mov	fp, r9
   131f4:	ldr	r3, [sp, #60]	; 0x3c
   131f8:	and	r3, r3, r2
   131fc:	str	r3, [sp, #60]	; 0x3c
   13200:	b	126ac <__assert_fail@plt+0x19d0>
   13204:	cmp	sl, r4
   13208:	movhi	r2, fp
   1320c:	bhi	12584 <__assert_fail@plt+0x18a8>
   13210:	mov	r2, r4
   13214:	b	12594 <__assert_fail@plt+0x18b8>
   13218:	mov	r6, r3
   1321c:	mov	r5, #63	; 0x3f
   13220:	b	12654 <__assert_fail@plt+0x1978>
   13224:	ldr	r8, [sp, #36]	; 0x24
   13228:	ldr	r6, [sp, #100]	; 0x64
   1322c:	b	12500 <__assert_fail@plt+0x1824>
   13230:	mov	fp, r9
   13234:	ldr	r8, [sp, #36]	; 0x24
   13238:	ldr	r3, [sp, #52]	; 0x34
   1323c:	str	r3, [sp, #60]	; 0x3c
   13240:	b	126ac <__assert_fail@plt+0x19d0>
   13244:	ldr	r8, [sp, #36]	; 0x24
   13248:	ldr	r6, [sp, #100]	; 0x64
   1324c:	b	12398 <__assert_fail@plt+0x16bc>
   13250:	mov	r3, #0
   13254:	add	r4, r4, #4
   13258:	mov	fp, r2
   1325c:	mov	r6, r3
   13260:	mov	r5, #48	; 0x30
   13264:	b	124f0 <__assert_fail@plt+0x1814>
   13268:	mov	r6, r3
   1326c:	b	12cec <__assert_fail@plt+0x2010>
   13270:	mov	r3, #1
   13274:	movw	r2, #28720	; 0x7030
   13278:	movt	r2, #1
   1327c:	mov	r4, r3
   13280:	mov	r9, sl
   13284:	str	r3, [sp, #32]
   13288:	str	sl, [sp, #44]	; 0x2c
   1328c:	str	r3, [sp, #48]	; 0x30
   13290:	str	sl, [sp, #52]	; 0x34
   13294:	str	r3, [sp, #56]	; 0x38
   13298:	str	r3, [sp, #60]	; 0x3c
   1329c:	str	sl, [sp, #64]	; 0x40
   132a0:	str	sl, [sp, #68]	; 0x44
   132a4:	str	r2, [sp, #72]	; 0x48
   132a8:	str	sl, [sp, #80]	; 0x50
   132ac:	str	sl, [sp, #84]	; 0x54
   132b0:	str	sl, [sp, #88]	; 0x58
   132b4:	b	11da4 <__assert_fail@plt+0x10c8>
   132b8:	mov	r3, #0
   132bc:	mov	r5, #48	; 0x30
   132c0:	mov	r6, r3
   132c4:	b	124f0 <__assert_fail@plt+0x1814>
   132c8:	cmp	sl, r4
   132cc:	mov	r5, #48	; 0x30
   132d0:	movhi	r3, #48	; 0x30
   132d4:	strbhi	r3, [r9, r4]
   132d8:	add	r3, r2, #2
   132dc:	add	r4, r2, #3
   132e0:	cmp	sl, r3
   132e4:	movhi	r1, #48	; 0x30
   132e8:	strbhi	r1, [r9, r3]
   132ec:	mov	r3, #0
   132f0:	b	125cc <__assert_fail@plt+0x18f0>
   132f4:	ldr	r3, [sp, #48]	; 0x30
   132f8:	str	r3, [sp, #40]	; 0x28
   132fc:	b	12bd8 <__assert_fail@plt+0x1efc>
   13300:	ldr	r2, [sp, #28]
   13304:	ldrb	r2, [r2, r3]
   13308:	sub	r1, r2, #33	; 0x21
   1330c:	cmp	r1, #29
   13310:	ldrls	pc, [pc, r1, lsl #2]
   13314:	b	12650 <__assert_fail@plt+0x1974>
   13318:	muleq	r1, r0, r3
   1331c:	andeq	r2, r1, r0, asr r6
   13320:	andeq	r2, r1, r0, asr r6
   13324:	andeq	r2, r1, r0, asr r6
   13328:	andeq	r2, r1, r0, asr r6
   1332c:	andeq	r2, r1, r0, asr r6
   13330:	muleq	r1, r0, r3
   13334:	muleq	r1, r0, r3
   13338:	muleq	r1, r0, r3
   1333c:	andeq	r2, r1, r0, asr r6
   13340:	andeq	r2, r1, r0, asr r6
   13344:	andeq	r2, r1, r0, asr r6
   13348:	muleq	r1, r0, r3
   1334c:	andeq	r2, r1, r0, asr r6
   13350:	muleq	r1, r0, r3
   13354:	andeq	r2, r1, r0, asr r6
   13358:	andeq	r2, r1, r0, asr r6
   1335c:	andeq	r2, r1, r0, asr r6
   13360:	andeq	r2, r1, r0, asr r6
   13364:	andeq	r2, r1, r0, asr r6
   13368:	andeq	r2, r1, r0, asr r6
   1336c:	andeq	r2, r1, r0, asr r6
   13370:	andeq	r2, r1, r0, asr r6
   13374:	andeq	r2, r1, r0, asr r6
   13378:	andeq	r2, r1, r0, asr r6
   1337c:	andeq	r2, r1, r0, asr r6
   13380:	andeq	r2, r1, r0, asr r6
   13384:	muleq	r1, r0, r3
   13388:	muleq	r1, r0, r3
   1338c:	muleq	r1, r0, r3
   13390:	ldr	r1, [sp, #44]	; 0x2c
   13394:	cmp	r1, #0
   13398:	bne	135f8 <__assert_fail@plt+0x291c>
   1339c:	cmp	sl, r4
   133a0:	mov	r7, r3
   133a4:	movhi	r1, #63	; 0x3f
   133a8:	mov	r5, r2
   133ac:	mov	r3, fp
   133b0:	strbhi	r1, [r9, r4]
   133b4:	add	r1, r4, #1
   133b8:	cmp	sl, r1
   133bc:	movhi	r0, #34	; 0x22
   133c0:	strbhi	r0, [r9, r1]
   133c4:	add	r1, r4, #2
   133c8:	cmp	sl, r1
   133cc:	movhi	r0, #34	; 0x22
   133d0:	strbhi	r0, [r9, r1]
   133d4:	add	r1, r4, #3
   133d8:	add	r4, r4, #4
   133dc:	cmp	sl, r1
   133e0:	movhi	r0, #63	; 0x3f
   133e4:	strbhi	r0, [r9, r1]
   133e8:	b	125cc <__assert_fail@plt+0x18f0>
   133ec:	mov	fp, r9
   133f0:	b	126ac <__assert_fail@plt+0x19d0>
   133f4:	ldr	r3, [sp, #188]	; 0xbc
   133f8:	ldrb	r3, [r3]
   133fc:	cmp	r3, #0
   13400:	beq	11d3c <__assert_fail@plt+0x1060>
   13404:	ldr	r2, [sp, #188]	; 0xbc
   13408:	cmp	sl, r4
   1340c:	bls	1342c <__assert_fail@plt+0x2750>
   13410:	strb	r3, [fp, r4]
   13414:	add	r4, r4, #1
   13418:	ldrb	r3, [r2, #1]!
   1341c:	cmp	r3, #0
   13420:	beq	11d3c <__assert_fail@plt+0x1060>
   13424:	cmp	sl, r4
   13428:	bhi	13410 <__assert_fail@plt+0x2734>
   1342c:	ldrb	r3, [r2, #1]!
   13430:	add	r4, r4, #1
   13434:	cmp	r3, #0
   13438:	bne	13408 <__assert_fail@plt+0x272c>
   1343c:	b	11d3c <__assert_fail@plt+0x1060>
   13440:	add	r9, sp, #100	; 0x64
   13444:	mov	r0, r5
   13448:	ldr	r2, [sp, #60]	; 0x3c
   1344c:	mov	r6, #0
   13450:	ldm	r9, {r9, sl, fp}
   13454:	ldr	r5, [sp, #112]	; 0x70
   13458:	ldr	r4, [sp, #116]	; 0x74
   1345c:	b	1310c <__assert_fail@plt+0x2430>
   13460:	cmp	r4, r8
   13464:	add	r9, sp, #100	; 0x64
   13468:	mov	r1, r4
   1346c:	mov	r2, fp
   13470:	ldm	r9, {r9, sl, fp}
   13474:	mov	r3, r5
   13478:	mov	r0, r5
   1347c:	ldr	r5, [sp, #112]	; 0x70
   13480:	ldr	r4, [sp, #116]	; 0x74
   13484:	bcs	134b8 <__assert_fail@plt+0x27dc>
   13488:	ldrb	r6, [r2]
   1348c:	cmp	r6, #0
   13490:	bne	134a4 <__assert_fail@plt+0x27c8>
   13494:	b	135f0 <__assert_fail@plt+0x2914>
   13498:	ldrb	r6, [r2, #1]!
   1349c:	cmp	r6, #0
   134a0:	beq	13588 <__assert_fail@plt+0x28ac>
   134a4:	add	r3, r3, #1
   134a8:	add	r1, r7, r3
   134ac:	cmp	r8, r1
   134b0:	bhi	13498 <__assert_fail@plt+0x27bc>
   134b4:	mov	r0, r3
   134b8:	mov	r6, #0
   134bc:	ldr	r2, [sp, #60]	; 0x3c
   134c0:	b	1310c <__assert_fail@plt+0x2430>
   134c4:	mov	r3, #1
   134c8:	mov	r4, #0
   134cc:	mov	r9, r4
   134d0:	str	r3, [sp, #32]
   134d4:	str	r3, [sp, #44]	; 0x2c
   134d8:	str	r3, [sp, #48]	; 0x30
   134dc:	str	r4, [sp, #52]	; 0x34
   134e0:	str	r3, [sp, #56]	; 0x38
   134e4:	str	r3, [sp, #60]	; 0x3c
   134e8:	str	r3, [sp, #88]	; 0x58
   134ec:	movw	r3, #28720	; 0x7030
   134f0:	movt	r3, #1
   134f4:	str	r4, [sp, #64]	; 0x40
   134f8:	str	r4, [sp, #68]	; 0x44
   134fc:	str	r3, [sp, #72]	; 0x48
   13500:	str	r4, [sp, #80]	; 0x50
   13504:	str	r4, [sp, #84]	; 0x54
   13508:	b	11da4 <__assert_fail@plt+0x10c8>
   1350c:	mov	fp, r9
   13510:	b	126c0 <__assert_fail@plt+0x19e4>
   13514:	ldr	r3, [sp, #48]	; 0x30
   13518:	b	13034 <__assert_fail@plt+0x2358>
   1351c:	mov	r2, r3
   13520:	ldr	r3, [sp, #72]	; 0x48
   13524:	cmp	r3, #0
   13528:	moveq	r2, #0
   1352c:	andne	r2, r2, #1
   13530:	cmp	r2, #0
   13534:	beq	13564 <__assert_fail@plt+0x2888>
   13538:	mov	r2, r3
   1353c:	ldrb	r3, [r3]
   13540:	cmp	r3, #0
   13544:	beq	13564 <__assert_fail@plt+0x2888>
   13548:	cmp	sl, r4
   1354c:	bls	13574 <__assert_fail@plt+0x2898>
   13550:	strb	r3, [fp, r4]
   13554:	add	r4, r4, #1
   13558:	ldrb	r3, [r2, #1]!
   1355c:	cmp	r3, #0
   13560:	bne	13548 <__assert_fail@plt+0x286c>
   13564:	cmp	sl, r4
   13568:	movhi	r3, #0
   1356c:	strbhi	r3, [fp, r4]
   13570:	b	126fc <__assert_fail@plt+0x1a20>
   13574:	ldrb	r3, [r2, #1]!
   13578:	add	r4, r4, #1
   1357c:	cmp	r3, #0
   13580:	bne	13548 <__assert_fail@plt+0x286c>
   13584:	b	13564 <__assert_fail@plt+0x2888>
   13588:	mov	r0, r3
   1358c:	ldr	r2, [sp, #60]	; 0x3c
   13590:	b	1310c <__assert_fail@plt+0x2430>
   13594:	mov	ip, #5
   13598:	mov	r3, r8
   1359c:	ldr	r1, [sp, #84]	; 0x54
   135a0:	str	ip, [sp]
   135a4:	ldr	r2, [sp, #180]	; 0xb4
   135a8:	ldr	ip, [sp, #188]	; 0xbc
   135ac:	ldr	r0, [sp, #184]	; 0xb8
   135b0:	str	r2, [sp, #4]
   135b4:	ldr	r2, [sp, #28]
   135b8:	str	ip, [sp, #12]
   135bc:	ldr	ip, [sp, #192]	; 0xc0
   135c0:	str	r0, [sp, #8]
   135c4:	mov	r0, fp
   135c8:	str	ip, [sp, #16]
   135cc:	bl	11c80 <__assert_fail@plt+0xfa4>
   135d0:	mov	r4, r0
   135d4:	b	126fc <__assert_fail@plt+0x1a20>
   135d8:	mov	r6, r3
   135dc:	str	r3, [sp, #40]	; 0x28
   135e0:	b	1266c <__assert_fail@plt+0x1990>
   135e4:	mov	r3, #2
   135e8:	str	r3, [sp, #176]	; 0xb0
   135ec:	b	126ac <__assert_fail@plt+0x19d0>
   135f0:	ldr	r2, [sp, #60]	; 0x3c
   135f4:	b	1310c <__assert_fail@plt+0x2430>
   135f8:	mov	r3, #5
   135fc:	mov	fp, r9
   13600:	str	r3, [sp, #176]	; 0xb0
   13604:	b	126c0 <__assert_fail@plt+0x19e4>
   13608:	mov	r1, #1
   1360c:	mov	r9, #0
   13610:	mov	r3, r9
   13614:	mov	r2, r9
   13618:	str	r1, [sp, #32]
   1361c:	str	sl, [sp, #84]	; 0x54
   13620:	b	12448 <__assert_fail@plt+0x176c>
   13624:	mov	r3, #0
   13628:	mov	r2, #1
   1362c:	mov	r9, r3
   13630:	mov	r4, r3
   13634:	str	r2, [sp, #32]
   13638:	strd	r2, [sp, #44]	; 0x2c
   1363c:	strd	r2, [sp, #56]	; 0x38
   13640:	str	r3, [sp, #80]	; 0x50
   13644:	str	r3, [sp, #84]	; 0x54
   13648:	str	r3, [sp, #88]	; 0x58
   1364c:	movw	r3, #28740	; 0x7044
   13650:	movt	r3, #1
   13654:	str	r2, [sp, #52]	; 0x34
   13658:	str	r2, [sp, #64]	; 0x40
   1365c:	str	r2, [sp, #68]	; 0x44
   13660:	str	r3, [sp, #72]	; 0x48
   13664:	b	11da4 <__assert_fail@plt+0x10c8>
   13668:	bl	10cd0 <abort@plt>
   1366c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13670:	mov	r4, r0
   13674:	mov	r5, r3
   13678:	strd	r6, [sp, #8]
   1367c:	movw	r7, #32976	; 0x80d0
   13680:	movt	r7, #2
   13684:	strd	r8, [sp, #16]
   13688:	strd	sl, [sp, #24]
   1368c:	mov	sl, r1
   13690:	mov	fp, r2
   13694:	str	lr, [sp, #32]
   13698:	sub	sp, sp, #60	; 0x3c
   1369c:	bl	10c28 <__errno_location@plt>
   136a0:	mov	r8, r0
   136a4:	cmn	r4, #-2147483647	; 0x80000001
   136a8:	ldr	r6, [r7]
   136ac:	movne	r0, #0
   136b0:	moveq	r0, #1
   136b4:	ldr	r3, [r8]
   136b8:	orrs	r0, r0, r4, lsr #31
   136bc:	str	r3, [sp, #28]
   136c0:	bne	13850 <__assert_fail@plt+0x2b74>
   136c4:	ldr	r3, [r7, #4]
   136c8:	cmp	r3, r4
   136cc:	bgt	1372c <__assert_fail@plt+0x2a50>
   136d0:	add	r1, r7, #8
   136d4:	sub	r2, r4, r3
   136d8:	str	r3, [sp, #52]	; 0x34
   136dc:	cmp	r6, r1
   136e0:	add	r2, r2, #1
   136e4:	beq	13828 <__assert_fail@plt+0x2b4c>
   136e8:	mov	r1, #8
   136ec:	mov	r0, r6
   136f0:	mvn	r3, #-2147483648	; 0x80000000
   136f4:	str	r1, [sp]
   136f8:	add	r1, sp, #52	; 0x34
   136fc:	bl	15f8c <__assert_fail@plt+0x52b0>
   13700:	mov	r6, r0
   13704:	str	r0, [r7]
   13708:	ldr	r0, [r7, #4]
   1370c:	mov	r1, #0
   13710:	ldr	r2, [sp, #52]	; 0x34
   13714:	sub	r2, r2, r0
   13718:	add	r0, r6, r0, lsl #3
   1371c:	lsl	r2, r2, #3
   13720:	bl	10c40 <memset@plt>
   13724:	ldr	r3, [sp, #52]	; 0x34
   13728:	str	r3, [r7, #4]
   1372c:	ldr	r1, [r5, #4]
   13730:	add	r0, r6, r4, lsl #3
   13734:	add	ip, r5, #8
   13738:	mov	r3, fp
   1373c:	mov	r2, sl
   13740:	ldr	r7, [r0, #4]
   13744:	str	r0, [sp, #36]	; 0x24
   13748:	str	ip, [sp, #40]	; 0x28
   1374c:	orr	r0, r1, #1
   13750:	ldr	r9, [r6, r4, lsl #3]
   13754:	str	ip, [sp, #8]
   13758:	ldr	lr, [r5, #44]	; 0x2c
   1375c:	str	r0, [sp, #4]
   13760:	ldr	ip, [r5]
   13764:	mov	r1, r9
   13768:	str	ip, [sp, #32]
   1376c:	ldr	ip, [r5, #40]	; 0x28
   13770:	str	ip, [sp, #12]
   13774:	ldr	ip, [sp, #32]
   13778:	str	lr, [sp, #16]
   1377c:	str	r0, [sp, #44]	; 0x2c
   13780:	mov	r0, r7
   13784:	str	ip, [sp]
   13788:	bl	11c80 <__assert_fail@plt+0xfa4>
   1378c:	cmp	r9, r0
   13790:	bhi	13800 <__assert_fail@plt+0x2b24>
   13794:	add	r9, r0, #1
   13798:	movw	r3, #33072	; 0x8130
   1379c:	movt	r3, #2
   137a0:	cmp	r7, r3
   137a4:	str	r9, [r6, r4, lsl #3]
   137a8:	beq	137b4 <__assert_fail@plt+0x2ad8>
   137ac:	mov	r0, r7
   137b0:	bl	16540 <__assert_fail@plt+0x5864>
   137b4:	mov	r0, r9
   137b8:	bl	15ce8 <__assert_fail@plt+0x500c>
   137bc:	ldr	ip, [r5]
   137c0:	mov	r3, fp
   137c4:	mov	r2, sl
   137c8:	mov	r1, r9
   137cc:	mov	r7, r0
   137d0:	ldr	lr, [sp, #36]	; 0x24
   137d4:	ldr	r4, [r5, #40]	; 0x28
   137d8:	str	r0, [lr, #4]
   137dc:	ldr	lr, [r5, #44]	; 0x2c
   137e0:	str	ip, [sp]
   137e4:	ldr	ip, [sp, #44]	; 0x2c
   137e8:	str	ip, [sp, #4]
   137ec:	ldr	ip, [sp, #40]	; 0x28
   137f0:	str	r4, [sp, #12]
   137f4:	str	lr, [sp, #16]
   137f8:	str	ip, [sp, #8]
   137fc:	bl	11c80 <__assert_fail@plt+0xfa4>
   13800:	ldr	r3, [sp, #28]
   13804:	mov	r0, r7
   13808:	str	r3, [r8]
   1380c:	add	sp, sp, #60	; 0x3c
   13810:	ldrd	r4, [sp]
   13814:	ldrd	r6, [sp, #8]
   13818:	ldrd	r8, [sp, #16]
   1381c:	ldrd	sl, [sp, #24]
   13820:	add	sp, sp, #32
   13824:	pop	{pc}		; (ldr pc, [sp], #4)
   13828:	mov	r1, #8
   1382c:	mvn	r3, #-2147483648	; 0x80000000
   13830:	str	r1, [sp]
   13834:	add	r1, sp, #52	; 0x34
   13838:	bl	15f8c <__assert_fail@plt+0x52b0>
   1383c:	ldrd	r2, [r7, #8]
   13840:	mov	r6, r0
   13844:	str	r0, [r7]
   13848:	strd	r2, [r0]
   1384c:	b	13708 <__assert_fail@plt+0x2a2c>
   13850:	bl	10cd0 <abort@plt>
   13854:	strd	r4, [sp, #-16]!
   13858:	mov	r5, r0
   1385c:	str	r6, [sp, #8]
   13860:	str	lr, [sp, #12]
   13864:	bl	10c28 <__errno_location@plt>
   13868:	mov	r4, r0
   1386c:	cmp	r5, #0
   13870:	ldr	r0, [pc, #32]	; 13898 <__assert_fail@plt+0x2bbc>
   13874:	mov	r1, #48	; 0x30
   13878:	movne	r0, r5
   1387c:	ldr	r6, [r4]
   13880:	bl	1612c <__assert_fail@plt+0x5450>
   13884:	str	r6, [r4]
   13888:	ldrd	r4, [sp]
   1388c:	ldr	r6, [sp, #8]
   13890:	add	sp, sp, #12
   13894:	pop	{pc}		; (ldr pc, [sp], #4)
   13898:	andeq	r8, r2, r0, lsr r2
   1389c:	ldr	r3, [pc, #12]	; 138b0 <__assert_fail@plt+0x2bd4>
   138a0:	cmp	r0, #0
   138a4:	moveq	r0, r3
   138a8:	ldr	r0, [r0]
   138ac:	bx	lr
   138b0:	andeq	r8, r2, r0, lsr r2
   138b4:	ldr	r3, [pc, #12]	; 138c8 <__assert_fail@plt+0x2bec>
   138b8:	cmp	r0, #0
   138bc:	moveq	r0, r3
   138c0:	str	r1, [r0]
   138c4:	bx	lr
   138c8:	andeq	r8, r2, r0, lsr r2
   138cc:	ldr	r3, [pc, #52]	; 13908 <__assert_fail@plt+0x2c2c>
   138d0:	cmp	r0, #0
   138d4:	push	{lr}		; (str lr, [sp, #-4]!)
   138d8:	lsr	lr, r1, #5
   138dc:	and	r1, r1, #31
   138e0:	moveq	r0, r3
   138e4:	add	r3, r0, #8
   138e8:	ldr	ip, [r3, lr, lsl #2]
   138ec:	lsr	r0, ip, r1
   138f0:	eor	r2, r2, r0
   138f4:	and	r0, r0, #1
   138f8:	and	r2, r2, #1
   138fc:	eor	r1, ip, r2, lsl r1
   13900:	str	r1, [r3, lr, lsl #2]
   13904:	pop	{pc}		; (ldr pc, [sp], #4)
   13908:	andeq	r8, r2, r0, lsr r2
   1390c:	ldr	r3, [pc, #16]	; 13924 <__assert_fail@plt+0x2c48>
   13910:	cmp	r0, #0
   13914:	movne	r3, r0
   13918:	ldr	r0, [r3, #4]
   1391c:	str	r1, [r3, #4]
   13920:	bx	lr
   13924:	andeq	r8, r2, r0, lsr r2
   13928:	ldr	r3, [pc, #48]	; 13960 <__assert_fail@plt+0x2c84>
   1392c:	cmp	r0, #0
   13930:	mov	ip, #10
   13934:	moveq	r0, r3
   13938:	cmp	r2, #0
   1393c:	cmpne	r1, #0
   13940:	str	ip, [r0]
   13944:	beq	13954 <__assert_fail@plt+0x2c78>
   13948:	str	r1, [r0, #40]	; 0x28
   1394c:	str	r2, [r0, #44]	; 0x2c
   13950:	bx	lr
   13954:	str	r4, [sp, #-8]!
   13958:	str	lr, [sp, #4]
   1395c:	bl	10cd0 <abort@plt>
   13960:	andeq	r8, r2, r0, lsr r2
   13964:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13968:	strd	r6, [sp, #8]
   1396c:	mov	r7, r0
   13970:	mov	r6, r1
   13974:	strd	r8, [sp, #16]
   13978:	mov	r8, r2
   1397c:	mov	r9, r3
   13980:	str	lr, [sp, #24]
   13984:	sub	sp, sp, #28
   13988:	ldr	r4, [sp, #56]	; 0x38
   1398c:	ldr	ip, [pc, #104]	; 139fc <__assert_fail@plt+0x2d20>
   13990:	cmp	r4, #0
   13994:	moveq	r4, ip
   13998:	bl	10c28 <__errno_location@plt>
   1399c:	ldr	ip, [r4, #44]	; 0x2c
   139a0:	mov	r5, r0
   139a4:	mov	r1, r6
   139a8:	add	lr, r4, #8
   139ac:	mov	r3, r9
   139b0:	ldr	r6, [r5]
   139b4:	mov	r2, r8
   139b8:	mov	r0, r7
   139bc:	str	ip, [sp, #16]
   139c0:	ldr	ip, [r4, #40]	; 0x28
   139c4:	str	lr, [sp, #8]
   139c8:	str	ip, [sp, #12]
   139cc:	ldr	ip, [r4, #4]
   139d0:	str	ip, [sp, #4]
   139d4:	ldr	ip, [r4]
   139d8:	str	ip, [sp]
   139dc:	bl	11c80 <__assert_fail@plt+0xfa4>
   139e0:	str	r6, [r5]
   139e4:	add	sp, sp, #28
   139e8:	ldrd	r4, [sp]
   139ec:	ldrd	r6, [sp, #8]
   139f0:	ldrd	r8, [sp, #16]
   139f4:	add	sp, sp, #24
   139f8:	pop	{pc}		; (ldr pc, [sp], #4)
   139fc:	andeq	r8, r2, r0, lsr r2
   13a00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13a04:	cmp	r2, #0
   13a08:	ldr	r4, [pc, #192]	; 13ad0 <__assert_fail@plt+0x2df4>
   13a0c:	movne	r4, r2
   13a10:	strd	r6, [sp, #8]
   13a14:	strd	r8, [sp, #16]
   13a18:	mov	r9, r1
   13a1c:	mov	r8, r0
   13a20:	strd	sl, [sp, #24]
   13a24:	str	lr, [sp, #32]
   13a28:	sub	sp, sp, #36	; 0x24
   13a2c:	bl	10c28 <__errno_location@plt>
   13a30:	ldr	r5, [r4, #4]
   13a34:	mov	r6, r0
   13a38:	add	r7, r4, #8
   13a3c:	mov	r1, #0
   13a40:	mov	r3, r9
   13a44:	ldr	ip, [r4, #44]	; 0x2c
   13a48:	mov	r2, r8
   13a4c:	mov	r0, r1
   13a50:	ldr	sl, [r6]
   13a54:	orr	r5, r5, #1
   13a58:	str	ip, [sp, #16]
   13a5c:	ldr	ip, [r4, #40]	; 0x28
   13a60:	stmib	sp, {r5, r7, ip}
   13a64:	ldr	ip, [r4]
   13a68:	str	ip, [sp]
   13a6c:	bl	11c80 <__assert_fail@plt+0xfa4>
   13a70:	add	r1, r0, #1
   13a74:	mov	r0, r1
   13a78:	str	r1, [sp, #28]
   13a7c:	bl	15ce8 <__assert_fail@plt+0x500c>
   13a80:	ldr	ip, [r4, #44]	; 0x2c
   13a84:	mov	fp, r0
   13a88:	mov	r3, r9
   13a8c:	mov	r2, r8
   13a90:	ldr	r1, [sp, #28]
   13a94:	str	ip, [sp, #16]
   13a98:	ldr	ip, [r4, #40]	; 0x28
   13a9c:	stmib	sp, {r5, r7, ip}
   13aa0:	ldr	ip, [r4]
   13aa4:	str	ip, [sp]
   13aa8:	bl	11c80 <__assert_fail@plt+0xfa4>
   13aac:	mov	r0, fp
   13ab0:	str	sl, [r6]
   13ab4:	add	sp, sp, #36	; 0x24
   13ab8:	ldrd	r4, [sp]
   13abc:	ldrd	r6, [sp, #8]
   13ac0:	ldrd	r8, [sp, #16]
   13ac4:	ldrd	sl, [sp, #24]
   13ac8:	add	sp, sp, #32
   13acc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad0:	andeq	r8, r2, r0, lsr r2
   13ad4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ad8:	cmp	r3, #0
   13adc:	ldr	r4, [pc, #220]	; 13bc0 <__assert_fail@plt+0x2ee4>
   13ae0:	movne	r4, r3
   13ae4:	strd	r6, [sp, #8]
   13ae8:	mov	r6, r2
   13aec:	strd	r8, [sp, #16]
   13af0:	mov	r9, r0
   13af4:	strd	sl, [sp, #24]
   13af8:	mov	sl, r1
   13afc:	str	lr, [sp, #32]
   13b00:	sub	sp, sp, #44	; 0x2c
   13b04:	bl	10c28 <__errno_location@plt>
   13b08:	ldr	r5, [r4, #4]
   13b0c:	mov	r7, r0
   13b10:	mov	r1, #0
   13b14:	add	r8, r4, #8
   13b18:	mov	r3, sl
   13b1c:	ldr	ip, [r4, #44]	; 0x2c
   13b20:	mov	r2, r9
   13b24:	mov	r0, r1
   13b28:	ldr	lr, [r7]
   13b2c:	cmp	r6, r1
   13b30:	orreq	r5, r5, #1
   13b34:	str	ip, [sp, #16]
   13b38:	ldr	ip, [r4, #40]	; 0x28
   13b3c:	stmib	sp, {r5, r8, ip}
   13b40:	ldr	ip, [r4]
   13b44:	str	lr, [sp, #28]
   13b48:	str	ip, [sp]
   13b4c:	bl	11c80 <__assert_fail@plt+0xfa4>
   13b50:	add	r1, r0, #1
   13b54:	mov	fp, r0
   13b58:	mov	r0, r1
   13b5c:	str	r1, [sp, #36]	; 0x24
   13b60:	bl	15ce8 <__assert_fail@plt+0x500c>
   13b64:	ldr	ip, [r4, #44]	; 0x2c
   13b68:	mov	r3, sl
   13b6c:	mov	r2, r9
   13b70:	ldr	r1, [sp, #36]	; 0x24
   13b74:	str	ip, [sp, #16]
   13b78:	ldr	ip, [r4, #40]	; 0x28
   13b7c:	str	r0, [sp, #32]
   13b80:	stmib	sp, {r5, r8, ip}
   13b84:	ldr	ip, [r4]
   13b88:	str	ip, [sp]
   13b8c:	bl	11c80 <__assert_fail@plt+0xfa4>
   13b90:	ldr	lr, [sp, #28]
   13b94:	cmp	r6, #0
   13b98:	ldr	r0, [sp, #32]
   13b9c:	str	lr, [r7]
   13ba0:	strne	fp, [r6]
   13ba4:	add	sp, sp, #44	; 0x2c
   13ba8:	ldrd	r4, [sp]
   13bac:	ldrd	r6, [sp, #8]
   13bb0:	ldrd	r8, [sp, #16]
   13bb4:	ldrd	sl, [sp, #24]
   13bb8:	add	sp, sp, #32
   13bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   13bc0:	andeq	r8, r2, r0, lsr r2
   13bc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13bc8:	movw	r5, #32976	; 0x80d0
   13bcc:	movt	r5, #2
   13bd0:	ldr	r3, [r5, #4]
   13bd4:	strd	r6, [sp, #8]
   13bd8:	str	r8, [sp, #16]
   13bdc:	str	lr, [sp, #20]
   13be0:	ldr	r7, [r5]
   13be4:	cmp	r3, #1
   13be8:	ble	13c0c <__assert_fail@plt+0x2f30>
   13bec:	mov	r4, #1
   13bf0:	add	r6, r7, #4
   13bf4:	ldr	r0, [r6, r4, lsl #3]
   13bf8:	add	r4, r4, #1
   13bfc:	bl	16540 <__assert_fail@plt+0x5864>
   13c00:	ldr	r3, [r5, #4]
   13c04:	cmp	r3, r4
   13c08:	bgt	13bf4 <__assert_fail@plt+0x2f18>
   13c0c:	ldr	r0, [r7, #4]
   13c10:	movw	r4, #33072	; 0x8130
   13c14:	movt	r4, #2
   13c18:	cmp	r0, r4
   13c1c:	beq	13c30 <__assert_fail@plt+0x2f54>
   13c20:	bl	16540 <__assert_fail@plt+0x5864>
   13c24:	mov	r3, #256	; 0x100
   13c28:	str	r3, [r5, #8]
   13c2c:	str	r4, [r5, #12]
   13c30:	ldr	r4, [pc, #44]	; 13c64 <__assert_fail@plt+0x2f88>
   13c34:	cmp	r7, r4
   13c38:	beq	13c48 <__assert_fail@plt+0x2f6c>
   13c3c:	mov	r0, r7
   13c40:	bl	16540 <__assert_fail@plt+0x5864>
   13c44:	str	r4, [r5]
   13c48:	mov	r3, #1
   13c4c:	ldrd	r6, [sp, #8]
   13c50:	str	r3, [r5, #4]
   13c54:	ldrd	r4, [sp]
   13c58:	ldr	r8, [sp, #16]
   13c5c:	add	sp, sp, #20
   13c60:	pop	{pc}		; (ldr pc, [sp], #4)
   13c64:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13c68:	ldr	r3, [pc, #4]	; 13c74 <__assert_fail@plt+0x2f98>
   13c6c:	mvn	r2, #0
   13c70:	b	1366c <__assert_fail@plt+0x2990>
   13c74:	andeq	r8, r2, r0, lsr r2
   13c78:	ldr	r3, [pc]	; 13c80 <__assert_fail@plt+0x2fa4>
   13c7c:	b	1366c <__assert_fail@plt+0x2990>
   13c80:	andeq	r8, r2, r0, lsr r2
   13c84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13c88:	movw	r4, #32976	; 0x80d0
   13c8c:	movt	r4, #2
   13c90:	strd	r6, [sp, #8]
   13c94:	strd	r8, [sp, #16]
   13c98:	strd	sl, [sp, #24]
   13c9c:	mov	sl, r0
   13ca0:	str	lr, [sp, #32]
   13ca4:	sub	sp, sp, #44	; 0x2c
   13ca8:	bl	10c28 <__errno_location@plt>
   13cac:	ldr	r3, [r0]
   13cb0:	mov	r8, r0
   13cb4:	ldr	r2, [r4, #4]
   13cb8:	ldr	r5, [r4]
   13cbc:	str	r3, [sp, #28]
   13cc0:	cmp	r2, #0
   13cc4:	bgt	13d20 <__assert_fail@plt+0x3044>
   13cc8:	add	r3, r4, #8
   13ccc:	str	r2, [sp, #36]	; 0x24
   13cd0:	rsb	r2, r2, #1
   13cd4:	cmp	r5, r3
   13cd8:	beq	13dec <__assert_fail@plt+0x3110>
   13cdc:	mov	r1, #8
   13ce0:	mov	r0, r5
   13ce4:	mvn	r3, #-2147483648	; 0x80000000
   13ce8:	str	r1, [sp]
   13cec:	add	r1, sp, #36	; 0x24
   13cf0:	bl	15f8c <__assert_fail@plt+0x52b0>
   13cf4:	mov	r5, r0
   13cf8:	str	r0, [r4]
   13cfc:	ldr	r0, [r4, #4]
   13d00:	mov	r1, #0
   13d04:	ldr	r2, [sp, #36]	; 0x24
   13d08:	sub	r2, r2, r0
   13d0c:	add	r0, r5, r0, lsl #3
   13d10:	lsl	r2, r2, #3
   13d14:	bl	10c40 <memset@plt>
   13d18:	ldr	r3, [sp, #36]	; 0x24
   13d1c:	str	r3, [r4, #4]
   13d20:	movw	r4, #33072	; 0x8130
   13d24:	movt	r4, #2
   13d28:	ldr	r9, [r5]
   13d2c:	add	fp, r4, #264	; 0x108
   13d30:	mvn	r3, #0
   13d34:	ldr	r7, [r4, #260]	; 0x104
   13d38:	mov	r2, sl
   13d3c:	ldr	r6, [r5, #4]
   13d40:	str	fp, [sp, #8]
   13d44:	mov	r1, r9
   13d48:	ldr	ip, [r4, #256]	; 0x100
   13d4c:	orr	r7, r7, #1
   13d50:	ldr	lr, [r4, #300]	; 0x12c
   13d54:	mov	r0, r6
   13d58:	str	ip, [sp]
   13d5c:	str	r7, [sp, #4]
   13d60:	str	lr, [sp, #16]
   13d64:	ldr	ip, [r4, #296]	; 0x128
   13d68:	str	ip, [sp, #12]
   13d6c:	bl	11c80 <__assert_fail@plt+0xfa4>
   13d70:	cmp	r9, r0
   13d74:	bhi	13dc4 <__assert_fail@plt+0x30e8>
   13d78:	add	r9, r0, #1
   13d7c:	cmp	r6, r4
   13d80:	str	r9, [r5]
   13d84:	beq	13d90 <__assert_fail@plt+0x30b4>
   13d88:	mov	r0, r6
   13d8c:	bl	16540 <__assert_fail@plt+0x5864>
   13d90:	mov	r0, r9
   13d94:	bl	15ce8 <__assert_fail@plt+0x500c>
   13d98:	ldr	r3, [r4, #256]	; 0x100
   13d9c:	mov	r2, sl
   13da0:	mov	r1, r9
   13da4:	mov	r6, r0
   13da8:	ldr	lr, [r4, #296]	; 0x128
   13dac:	ldr	ip, [r4, #300]	; 0x12c
   13db0:	str	r0, [r5, #4]
   13db4:	stm	sp, {r3, r7, fp, lr}
   13db8:	mvn	r3, #0
   13dbc:	str	ip, [sp, #16]
   13dc0:	bl	11c80 <__assert_fail@plt+0xfa4>
   13dc4:	ldr	r3, [sp, #28]
   13dc8:	mov	r0, r6
   13dcc:	str	r3, [r8]
   13dd0:	add	sp, sp, #44	; 0x2c
   13dd4:	ldrd	r4, [sp]
   13dd8:	ldrd	r6, [sp, #8]
   13ddc:	ldrd	r8, [sp, #16]
   13de0:	ldrd	sl, [sp, #24]
   13de4:	add	sp, sp, #32
   13de8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dec:	mov	r0, #8
   13df0:	mvn	r3, #-2147483648	; 0x80000000
   13df4:	add	r1, sp, #36	; 0x24
   13df8:	str	r0, [sp]
   13dfc:	mov	r0, #0
   13e00:	bl	15f8c <__assert_fail@plt+0x52b0>
   13e04:	ldrd	r2, [r4, #8]
   13e08:	mov	r5, r0
   13e0c:	str	r0, [r4]
   13e10:	strd	r2, [r0]
   13e14:	b	13cfc <__assert_fail@plt+0x3020>
   13e18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e1c:	movw	r4, #32976	; 0x80d0
   13e20:	movt	r4, #2
   13e24:	strd	r6, [sp, #8]
   13e28:	strd	r8, [sp, #16]
   13e2c:	strd	sl, [sp, #24]
   13e30:	mov	sl, r0
   13e34:	mov	fp, r1
   13e38:	str	lr, [sp, #32]
   13e3c:	sub	sp, sp, #44	; 0x2c
   13e40:	bl	10c28 <__errno_location@plt>
   13e44:	ldr	r3, [r0]
   13e48:	mov	r8, r0
   13e4c:	ldr	r2, [r4, #4]
   13e50:	ldr	r5, [r4]
   13e54:	str	r3, [sp, #28]
   13e58:	cmp	r2, #0
   13e5c:	bgt	13eb8 <__assert_fail@plt+0x31dc>
   13e60:	add	r3, r4, #8
   13e64:	str	r2, [sp, #36]	; 0x24
   13e68:	rsb	r2, r2, #1
   13e6c:	cmp	r5, r3
   13e70:	beq	13f94 <__assert_fail@plt+0x32b8>
   13e74:	mov	r1, #8
   13e78:	mov	r0, r5
   13e7c:	mvn	r3, #-2147483648	; 0x80000000
   13e80:	str	r1, [sp]
   13e84:	add	r1, sp, #36	; 0x24
   13e88:	bl	15f8c <__assert_fail@plt+0x52b0>
   13e8c:	mov	r5, r0
   13e90:	str	r0, [r4]
   13e94:	ldr	r0, [r4, #4]
   13e98:	mov	r1, #0
   13e9c:	ldr	r2, [sp, #36]	; 0x24
   13ea0:	sub	r2, r2, r0
   13ea4:	add	r0, r5, r0, lsl #3
   13ea8:	lsl	r2, r2, #3
   13eac:	bl	10c40 <memset@plt>
   13eb0:	ldr	r3, [sp, #36]	; 0x24
   13eb4:	str	r3, [r4, #4]
   13eb8:	movw	r4, #33072	; 0x8130
   13ebc:	movt	r4, #2
   13ec0:	ldr	r9, [r5]
   13ec4:	add	r0, r4, #264	; 0x108
   13ec8:	mov	r3, fp
   13ecc:	ldr	r7, [r4, #260]	; 0x104
   13ed0:	mov	r2, sl
   13ed4:	ldr	r6, [r5, #4]
   13ed8:	str	r0, [sp, #8]
   13edc:	mov	r1, r9
   13ee0:	ldr	ip, [r4, #256]	; 0x100
   13ee4:	orr	r7, r7, #1
   13ee8:	ldr	lr, [r4, #300]	; 0x12c
   13eec:	mov	r0, r6
   13ef0:	str	ip, [sp]
   13ef4:	str	r7, [sp, #4]
   13ef8:	str	lr, [sp, #16]
   13efc:	ldr	ip, [r4, #296]	; 0x128
   13f00:	str	ip, [sp, #12]
   13f04:	bl	11c80 <__assert_fail@plt+0xfa4>
   13f08:	cmp	r9, r0
   13f0c:	bhi	13f6c <__assert_fail@plt+0x3290>
   13f10:	add	r9, r0, #1
   13f14:	cmp	r6, r4
   13f18:	str	r9, [r5]
   13f1c:	beq	13f28 <__assert_fail@plt+0x324c>
   13f20:	mov	r0, r6
   13f24:	bl	16540 <__assert_fail@plt+0x5864>
   13f28:	mov	r0, r9
   13f2c:	bl	15ce8 <__assert_fail@plt+0x500c>
   13f30:	ldr	ip, [r4, #256]	; 0x100
   13f34:	mov	r1, r9
   13f38:	mov	r3, fp
   13f3c:	mov	r2, sl
   13f40:	mov	r6, r0
   13f44:	ldr	r9, [r4, #296]	; 0x128
   13f48:	ldr	lr, [r4, #300]	; 0x12c
   13f4c:	str	r0, [r5, #4]
   13f50:	str	ip, [sp]
   13f54:	ldr	ip, [pc, #100]	; 13fc0 <__assert_fail@plt+0x32e4>
   13f58:	str	r7, [sp, #4]
   13f5c:	str	ip, [sp, #8]
   13f60:	str	r9, [sp, #12]
   13f64:	str	lr, [sp, #16]
   13f68:	bl	11c80 <__assert_fail@plt+0xfa4>
   13f6c:	ldr	r3, [sp, #28]
   13f70:	mov	r0, r6
   13f74:	str	r3, [r8]
   13f78:	add	sp, sp, #44	; 0x2c
   13f7c:	ldrd	r4, [sp]
   13f80:	ldrd	r6, [sp, #8]
   13f84:	ldrd	r8, [sp, #16]
   13f88:	ldrd	sl, [sp, #24]
   13f8c:	add	sp, sp, #32
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	mov	r0, #8
   13f98:	mvn	r3, #-2147483648	; 0x80000000
   13f9c:	add	r1, sp, #36	; 0x24
   13fa0:	str	r0, [sp]
   13fa4:	mov	r0, #0
   13fa8:	bl	15f8c <__assert_fail@plt+0x52b0>
   13fac:	ldrd	r2, [r4, #8]
   13fb0:	mov	r5, r0
   13fb4:	str	r0, [r4]
   13fb8:	strd	r2, [r0]
   13fbc:	b	13e94 <__assert_fail@plt+0x31b8>
   13fc0:	andeq	r8, r2, r8, lsr r2
   13fc4:	strd	r4, [sp, #-20]!	; 0xffffffec
   13fc8:	mov	r4, #0
   13fcc:	mov	r5, #0
   13fd0:	strd	r6, [sp, #8]
   13fd4:	cmp	r1, #10
   13fd8:	str	lr, [sp, #16]
   13fdc:	sub	sp, sp, #100	; 0x64
   13fe0:	strd	r4, [sp, #48]	; 0x30
   13fe4:	beq	1402c <__assert_fail@plt+0x3350>
   13fe8:	mov	r3, sp
   13fec:	strd	r4, [sp, #8]
   13ff0:	str	r1, [sp, #48]	; 0x30
   13ff4:	mov	r1, r2
   13ff8:	mvn	r2, #0
   13ffc:	ldrd	r6, [sp, #48]	; 0x30
   14000:	strd	r6, [sp]
   14004:	strd	r4, [sp, #16]
   14008:	strd	r4, [sp, #24]
   1400c:	strd	r4, [sp, #32]
   14010:	strd	r4, [sp, #40]	; 0x28
   14014:	bl	1366c <__assert_fail@plt+0x2990>
   14018:	add	sp, sp, #100	; 0x64
   1401c:	ldrd	r4, [sp]
   14020:	ldrd	r6, [sp, #8]
   14024:	add	sp, sp, #16
   14028:	pop	{pc}		; (ldr pc, [sp], #4)
   1402c:	bl	10cd0 <abort@plt>
   14030:	strd	r4, [sp, #-20]!	; 0xffffffec
   14034:	mov	r4, #0
   14038:	mov	r5, #0
   1403c:	strd	r6, [sp, #8]
   14040:	cmp	r1, #10
   14044:	str	lr, [sp, #16]
   14048:	sub	sp, sp, #100	; 0x64
   1404c:	strd	r4, [sp, #48]	; 0x30
   14050:	beq	1409c <__assert_fail@plt+0x33c0>
   14054:	mov	ip, r2
   14058:	mov	r2, r3
   1405c:	strd	r4, [sp, #8]
   14060:	str	r1, [sp, #48]	; 0x30
   14064:	mov	r3, sp
   14068:	mov	r1, ip
   1406c:	ldrd	r6, [sp, #48]	; 0x30
   14070:	strd	r6, [sp]
   14074:	strd	r4, [sp, #16]
   14078:	strd	r4, [sp, #24]
   1407c:	strd	r4, [sp, #32]
   14080:	strd	r4, [sp, #40]	; 0x28
   14084:	bl	1366c <__assert_fail@plt+0x2990>
   14088:	add	sp, sp, #100	; 0x64
   1408c:	ldrd	r4, [sp]
   14090:	ldrd	r6, [sp, #8]
   14094:	add	sp, sp, #16
   14098:	pop	{pc}		; (ldr pc, [sp], #4)
   1409c:	bl	10cd0 <abort@plt>
   140a0:	mov	r2, #0
   140a4:	mov	r3, #0
   140a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   140ac:	strd	r6, [sp, #8]
   140b0:	cmp	r0, #10
   140b4:	strd	r8, [sp, #16]
   140b8:	strd	sl, [sp, #24]
   140bc:	str	lr, [sp, #32]
   140c0:	sub	sp, sp, #124	; 0x7c
   140c4:	strd	r2, [sp, #72]	; 0x48
   140c8:	strd	r2, [sp, #80]	; 0x50
   140cc:	strd	r2, [sp, #88]	; 0x58
   140d0:	strd	r2, [sp, #96]	; 0x60
   140d4:	strd	r2, [sp, #104]	; 0x68
   140d8:	strd	r2, [sp, #112]	; 0x70
   140dc:	beq	14280 <__assert_fail@plt+0x35a4>
   140e0:	mov	r6, r1
   140e4:	movw	r4, #32976	; 0x80d0
   140e8:	movt	r4, #2
   140ec:	str	r0, [sp, #72]	; 0x48
   140f0:	ldrd	r0, [sp, #72]	; 0x48
   140f4:	strd	r0, [sp, #24]
   140f8:	strd	r2, [sp, #32]
   140fc:	strd	r2, [sp, #40]	; 0x28
   14100:	strd	r2, [sp, #48]	; 0x30
   14104:	strd	r2, [sp, #56]	; 0x38
   14108:	strd	r2, [sp, #64]	; 0x40
   1410c:	bl	10c28 <__errno_location@plt>
   14110:	mov	r8, r0
   14114:	ldr	r5, [r4]
   14118:	ldr	r2, [r4, #4]
   1411c:	ldr	r9, [r0]
   14120:	cmp	r2, #0
   14124:	bgt	14180 <__assert_fail@plt+0x34a4>
   14128:	add	r3, r4, #8
   1412c:	str	r2, [sp, #72]	; 0x48
   14130:	rsb	r2, r2, #1
   14134:	cmp	r5, r3
   14138:	beq	14254 <__assert_fail@plt+0x3578>
   1413c:	mov	r3, #8
   14140:	mov	r0, r5
   14144:	add	r1, sp, #72	; 0x48
   14148:	str	r3, [sp]
   1414c:	mvn	r3, #-2147483648	; 0x80000000
   14150:	bl	15f8c <__assert_fail@plt+0x52b0>
   14154:	mov	r5, r0
   14158:	str	r0, [r4]
   1415c:	ldr	r0, [r4, #4]
   14160:	mov	r1, #0
   14164:	ldr	r2, [sp, #72]	; 0x48
   14168:	sub	r2, r2, r0
   1416c:	add	r0, r5, r0, lsl #3
   14170:	lsl	r2, r2, #3
   14174:	bl	10c40 <memset@plt>
   14178:	ldr	r3, [sp, #72]	; 0x48
   1417c:	str	r3, [r4, #4]
   14180:	ldr	sl, [r5]
   14184:	add	r0, sp, #32
   14188:	mvn	r3, #0
   1418c:	mov	r2, r6
   14190:	ldr	r7, [sp, #28]
   14194:	ldr	r4, [r5, #4]
   14198:	mov	r1, sl
   1419c:	str	r0, [sp, #8]
   141a0:	ldr	lr, [sp, #24]
   141a4:	orr	r7, r7, #1
   141a8:	ldr	ip, [sp, #64]	; 0x40
   141ac:	mov	r0, r4
   141b0:	ldr	fp, [sp, #68]	; 0x44
   141b4:	str	lr, [sp]
   141b8:	str	r7, [sp, #4]
   141bc:	str	ip, [sp, #12]
   141c0:	str	fp, [sp, #16]
   141c4:	bl	11c80 <__assert_fail@plt+0xfa4>
   141c8:	cmp	sl, r0
   141cc:	bhi	14230 <__assert_fail@plt+0x3554>
   141d0:	add	sl, r0, #1
   141d4:	movw	r3, #33072	; 0x8130
   141d8:	movt	r3, #2
   141dc:	cmp	r4, r3
   141e0:	str	sl, [r5]
   141e4:	beq	141f0 <__assert_fail@plt+0x3514>
   141e8:	mov	r0, r4
   141ec:	bl	16540 <__assert_fail@plt+0x5864>
   141f0:	mov	r0, sl
   141f4:	bl	15ce8 <__assert_fail@plt+0x500c>
   141f8:	ldr	r3, [sp, #24]
   141fc:	mov	r2, r6
   14200:	mov	r1, sl
   14204:	mov	r4, r0
   14208:	ldr	lr, [sp, #64]	; 0x40
   1420c:	ldr	ip, [sp, #68]	; 0x44
   14210:	str	r0, [r5, #4]
   14214:	add	r5, sp, #32
   14218:	stm	sp, {r3, r7}
   1421c:	mvn	r3, #0
   14220:	str	r5, [sp, #8]
   14224:	str	lr, [sp, #12]
   14228:	str	ip, [sp, #16]
   1422c:	bl	11c80 <__assert_fail@plt+0xfa4>
   14230:	mov	r0, r4
   14234:	str	r9, [r8]
   14238:	add	sp, sp, #124	; 0x7c
   1423c:	ldrd	r4, [sp]
   14240:	ldrd	r6, [sp, #8]
   14244:	ldrd	r8, [sp, #16]
   14248:	ldrd	sl, [sp, #24]
   1424c:	add	sp, sp, #32
   14250:	pop	{pc}		; (ldr pc, [sp], #4)
   14254:	mov	r0, #8
   14258:	mvn	r3, #-2147483648	; 0x80000000
   1425c:	add	r1, sp, #72	; 0x48
   14260:	str	r0, [sp]
   14264:	mov	r0, #0
   14268:	bl	15f8c <__assert_fail@plt+0x52b0>
   1426c:	ldrd	r2, [r4, #8]
   14270:	mov	r5, r0
   14274:	str	r0, [r4]
   14278:	strd	r2, [r0]
   1427c:	b	1415c <__assert_fail@plt+0x3480>
   14280:	bl	10cd0 <abort@plt>
   14284:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14288:	cmp	r0, #10
   1428c:	strd	r6, [sp, #8]
   14290:	mov	r6, #0
   14294:	mov	r7, #0
   14298:	strd	r8, [sp, #16]
   1429c:	strd	sl, [sp, #24]
   142a0:	str	lr, [sp, #32]
   142a4:	sub	sp, sp, #124	; 0x7c
   142a8:	strd	r6, [sp, #72]	; 0x48
   142ac:	strd	r6, [sp, #80]	; 0x50
   142b0:	strd	r6, [sp, #88]	; 0x58
   142b4:	strd	r6, [sp, #96]	; 0x60
   142b8:	strd	r6, [sp, #104]	; 0x68
   142bc:	strd	r6, [sp, #112]	; 0x70
   142c0:	beq	1446c <__assert_fail@plt+0x3790>
   142c4:	mov	sl, r2
   142c8:	movw	r5, #32976	; 0x80d0
   142cc:	movt	r5, #2
   142d0:	str	r0, [sp, #72]	; 0x48
   142d4:	mov	r9, r1
   142d8:	ldrd	r2, [sp, #72]	; 0x48
   142dc:	strd	r2, [sp, #24]
   142e0:	strd	r6, [sp, #32]
   142e4:	strd	r6, [sp, #40]	; 0x28
   142e8:	strd	r6, [sp, #48]	; 0x30
   142ec:	strd	r6, [sp, #56]	; 0x38
   142f0:	strd	r6, [sp, #64]	; 0x40
   142f4:	bl	10c28 <__errno_location@plt>
   142f8:	mov	r7, r0
   142fc:	ldr	r4, [r5]
   14300:	ldr	r2, [r5, #4]
   14304:	ldr	fp, [r0]
   14308:	cmp	r2, #0
   1430c:	bgt	14368 <__assert_fail@plt+0x368c>
   14310:	add	r3, r5, #8
   14314:	str	r2, [sp, #72]	; 0x48
   14318:	rsb	r2, r2, #1
   1431c:	cmp	r4, r3
   14320:	beq	14440 <__assert_fail@plt+0x3764>
   14324:	mov	r3, #8
   14328:	mov	r0, r4
   1432c:	add	r1, sp, #72	; 0x48
   14330:	str	r3, [sp]
   14334:	mvn	r3, #-2147483648	; 0x80000000
   14338:	bl	15f8c <__assert_fail@plt+0x52b0>
   1433c:	mov	r4, r0
   14340:	str	r0, [r5]
   14344:	ldr	r0, [r5, #4]
   14348:	mov	r1, #0
   1434c:	ldr	r2, [sp, #72]	; 0x48
   14350:	sub	r2, r2, r0
   14354:	add	r0, r4, r0, lsl #3
   14358:	lsl	r2, r2, #3
   1435c:	bl	10c40 <memset@plt>
   14360:	ldr	r3, [sp, #72]	; 0x48
   14364:	str	r3, [r5, #4]
   14368:	ldr	ip, [sp, #24]
   1436c:	add	r0, sp, #32
   14370:	mov	r3, sl
   14374:	mov	r2, r9
   14378:	ldr	r6, [sp, #28]
   1437c:	ldr	r8, [r4]
   14380:	ldr	r5, [r4, #4]
   14384:	str	ip, [sp]
   14388:	orr	r6, r6, #1
   1438c:	ldr	ip, [sp, #64]	; 0x40
   14390:	mov	r1, r8
   14394:	str	r6, [sp, #4]
   14398:	ldr	lr, [sp, #68]	; 0x44
   1439c:	str	r0, [sp, #8]
   143a0:	mov	r0, r5
   143a4:	str	ip, [sp, #12]
   143a8:	str	lr, [sp, #16]
   143ac:	bl	11c80 <__assert_fail@plt+0xfa4>
   143b0:	cmp	r8, r0
   143b4:	bhi	1441c <__assert_fail@plt+0x3740>
   143b8:	add	r8, r0, #1
   143bc:	movw	r3, #33072	; 0x8130
   143c0:	movt	r3, #2
   143c4:	cmp	r5, r3
   143c8:	str	r8, [r4]
   143cc:	beq	143d8 <__assert_fail@plt+0x36fc>
   143d0:	mov	r0, r5
   143d4:	bl	16540 <__assert_fail@plt+0x5864>
   143d8:	mov	r0, r8
   143dc:	bl	15ce8 <__assert_fail@plt+0x500c>
   143e0:	ldr	lr, [sp, #24]
   143e4:	mov	r1, r8
   143e8:	mov	r3, sl
   143ec:	mov	r2, r9
   143f0:	mov	r5, r0
   143f4:	ldr	r8, [sp, #64]	; 0x40
   143f8:	ldr	ip, [sp, #68]	; 0x44
   143fc:	str	r0, [r4, #4]
   14400:	str	lr, [sp]
   14404:	add	lr, sp, #32
   14408:	str	r6, [sp, #4]
   1440c:	str	lr, [sp, #8]
   14410:	str	r8, [sp, #12]
   14414:	str	ip, [sp, #16]
   14418:	bl	11c80 <__assert_fail@plt+0xfa4>
   1441c:	mov	r0, r5
   14420:	str	fp, [r7]
   14424:	add	sp, sp, #124	; 0x7c
   14428:	ldrd	r4, [sp]
   1442c:	ldrd	r6, [sp, #8]
   14430:	ldrd	r8, [sp, #16]
   14434:	ldrd	sl, [sp, #24]
   14438:	add	sp, sp, #32
   1443c:	pop	{pc}		; (ldr pc, [sp], #4)
   14440:	mov	r0, #8
   14444:	mvn	r3, #-2147483648	; 0x80000000
   14448:	add	r1, sp, #72	; 0x48
   1444c:	str	r0, [sp]
   14450:	mov	r0, #0
   14454:	bl	15f8c <__assert_fail@plt+0x52b0>
   14458:	ldrd	r2, [r5, #8]
   1445c:	mov	r4, r0
   14460:	str	r0, [r5]
   14464:	strd	r2, [r0]
   14468:	b	14344 <__assert_fail@plt+0x3668>
   1446c:	bl	10cd0 <abort@plt>
   14470:	ldr	r3, [pc, #492]	; 14664 <__assert_fail@plt+0x3988>
   14474:	lsr	ip, r2, #5
   14478:	and	r2, r2, #31
   1447c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14480:	movw	r5, #32976	; 0x80d0
   14484:	movt	r5, #2
   14488:	strd	r6, [sp, #8]
   1448c:	strd	r8, [sp, #16]
   14490:	strd	sl, [sp, #24]
   14494:	mov	sl, r0
   14498:	mov	fp, r1
   1449c:	ldrd	r0, [r3]
   144a0:	str	lr, [sp, #32]
   144a4:	sub	sp, sp, #92	; 0x5c
   144a8:	ldrd	r8, [r3, #8]
   144ac:	add	r6, sp, #48	; 0x30
   144b0:	strd	r0, [sp, #40]	; 0x28
   144b4:	ldrd	r0, [r3, #16]
   144b8:	strd	r8, [sp, #48]	; 0x30
   144bc:	ldrd	r8, [r3, #24]
   144c0:	strd	r0, [sp, #56]	; 0x38
   144c4:	ldrd	r0, [r3, #32]
   144c8:	strd	r8, [sp, #64]	; 0x40
   144cc:	ldrd	r8, [r3, #40]	; 0x28
   144d0:	strd	r0, [sp, #72]	; 0x48
   144d4:	strd	r8, [sp, #80]	; 0x50
   144d8:	ldr	r3, [r6, ip, lsl #2]
   144dc:	mvn	r1, r3, lsr r2
   144e0:	and	r1, r1, #1
   144e4:	eor	r2, r3, r1, lsl r2
   144e8:	str	r2, [r6, ip, lsl #2]
   144ec:	bl	10c28 <__errno_location@plt>
   144f0:	ldr	r3, [r0]
   144f4:	mov	r8, r0
   144f8:	ldr	r2, [r5, #4]
   144fc:	ldr	r4, [r5]
   14500:	str	r3, [sp, #28]
   14504:	cmp	r2, #0
   14508:	bgt	14564 <__assert_fail@plt+0x3888>
   1450c:	add	r3, r5, #8
   14510:	str	r2, [sp, #36]	; 0x24
   14514:	rsb	r2, r2, #1
   14518:	cmp	r4, r3
   1451c:	beq	14638 <__assert_fail@plt+0x395c>
   14520:	mov	r1, #8
   14524:	mov	r0, r4
   14528:	mvn	r3, #-2147483648	; 0x80000000
   1452c:	str	r1, [sp]
   14530:	add	r1, sp, #36	; 0x24
   14534:	bl	15f8c <__assert_fail@plt+0x52b0>
   14538:	mov	r4, r0
   1453c:	str	r0, [r5]
   14540:	ldr	r0, [r5, #4]
   14544:	mov	r1, #0
   14548:	ldr	r2, [sp, #36]	; 0x24
   1454c:	sub	r2, r2, r0
   14550:	add	r0, r4, r0, lsl #3
   14554:	lsl	r2, r2, #3
   14558:	bl	10c40 <memset@plt>
   1455c:	ldr	r3, [sp, #36]	; 0x24
   14560:	str	r3, [r5, #4]
   14564:	ldr	ip, [sp, #40]	; 0x28
   14568:	mov	r3, fp
   1456c:	mov	r2, sl
   14570:	ldr	r7, [sp, #44]	; 0x2c
   14574:	ldr	r9, [r4]
   14578:	ldr	r5, [r4, #4]
   1457c:	str	ip, [sp]
   14580:	orr	r7, r7, #1
   14584:	ldr	ip, [sp, #80]	; 0x50
   14588:	mov	r1, r9
   1458c:	str	r7, [sp, #4]
   14590:	ldr	lr, [sp, #84]	; 0x54
   14594:	mov	r0, r5
   14598:	str	r6, [sp, #8]
   1459c:	str	ip, [sp, #12]
   145a0:	str	lr, [sp, #16]
   145a4:	bl	11c80 <__assert_fail@plt+0xfa4>
   145a8:	cmp	r9, r0
   145ac:	bhi	14610 <__assert_fail@plt+0x3934>
   145b0:	add	r9, r0, #1
   145b4:	movw	r3, #33072	; 0x8130
   145b8:	movt	r3, #2
   145bc:	cmp	r5, r3
   145c0:	str	r9, [r4]
   145c4:	beq	145d0 <__assert_fail@plt+0x38f4>
   145c8:	mov	r0, r5
   145cc:	bl	16540 <__assert_fail@plt+0x5864>
   145d0:	mov	r0, r9
   145d4:	bl	15ce8 <__assert_fail@plt+0x500c>
   145d8:	mov	r1, r9
   145dc:	ldr	ip, [sp, #40]	; 0x28
   145e0:	mov	r3, fp
   145e4:	mov	r2, sl
   145e8:	mov	r5, r0
   145ec:	ldr	r9, [sp, #80]	; 0x50
   145f0:	ldr	lr, [sp, #84]	; 0x54
   145f4:	str	r0, [r4, #4]
   145f8:	str	ip, [sp]
   145fc:	str	r7, [sp, #4]
   14600:	str	r6, [sp, #8]
   14604:	str	r9, [sp, #12]
   14608:	str	lr, [sp, #16]
   1460c:	bl	11c80 <__assert_fail@plt+0xfa4>
   14610:	ldr	r3, [sp, #28]
   14614:	mov	r0, r5
   14618:	str	r3, [r8]
   1461c:	add	sp, sp, #92	; 0x5c
   14620:	ldrd	r4, [sp]
   14624:	ldrd	r6, [sp, #8]
   14628:	ldrd	r8, [sp, #16]
   1462c:	ldrd	sl, [sp, #24]
   14630:	add	sp, sp, #32
   14634:	pop	{pc}		; (ldr pc, [sp], #4)
   14638:	mov	r0, #8
   1463c:	mvn	r3, #-2147483648	; 0x80000000
   14640:	add	r1, sp, #36	; 0x24
   14644:	str	r0, [sp]
   14648:	mov	r0, #0
   1464c:	bl	15f8c <__assert_fail@plt+0x52b0>
   14650:	ldrd	r2, [r5, #8]
   14654:	mov	r4, r0
   14658:	str	r0, [r5]
   1465c:	strd	r2, [r0]
   14660:	b	14540 <__assert_fail@plt+0x3864>
   14664:	andeq	r8, r2, r0, lsr r2
   14668:	ldr	ip, [pc, #476]	; 1484c <__assert_fail@plt+0x3b70>
   1466c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14670:	movw	r4, #32976	; 0x80d0
   14674:	movt	r4, #2
   14678:	ldrd	r2, [ip, #8]
   1467c:	strd	r6, [sp, #8]
   14680:	lsr	r7, r1, #5
   14684:	mov	r6, r0
   14688:	strd	r8, [sp, #16]
   1468c:	str	lr, [sp, #32]
   14690:	and	lr, r1, #31
   14694:	ldrd	r0, [ip]
   14698:	strd	sl, [sp, #24]
   1469c:	sub	sp, sp, #84	; 0x54
   146a0:	add	r5, sp, #40	; 0x28
   146a4:	strd	r0, [sp, #32]
   146a8:	strd	r2, [sp, #40]	; 0x28
   146ac:	ldrd	r0, [ip, #16]
   146b0:	ldrd	r2, [ip, #24]
   146b4:	strd	r0, [sp, #48]	; 0x30
   146b8:	ldrd	r0, [ip, #32]
   146bc:	strd	r2, [sp, #56]	; 0x38
   146c0:	ldrd	r2, [ip, #40]	; 0x28
   146c4:	strd	r0, [sp, #64]	; 0x40
   146c8:	strd	r2, [sp, #72]	; 0x48
   146cc:	ldr	r1, [r5, r7, lsl #2]
   146d0:	mvn	r3, r1, lsr lr
   146d4:	and	r3, r3, #1
   146d8:	eor	r1, r1, r3, lsl lr
   146dc:	str	r1, [r5, r7, lsl #2]
   146e0:	bl	10c28 <__errno_location@plt>
   146e4:	mov	r9, r0
   146e8:	ldr	sl, [r0]
   146ec:	ldr	r2, [r4, #4]
   146f0:	ldr	r7, [r4]
   146f4:	cmp	r2, #0
   146f8:	bgt	14754 <__assert_fail@plt+0x3a78>
   146fc:	add	r3, r4, #8
   14700:	str	r2, [sp, #28]
   14704:	rsb	r2, r2, #1
   14708:	cmp	r7, r3
   1470c:	beq	14820 <__assert_fail@plt+0x3b44>
   14710:	mov	r1, #8
   14714:	mov	r0, r7
   14718:	mvn	r3, #-2147483648	; 0x80000000
   1471c:	str	r1, [sp]
   14720:	add	r1, sp, #28
   14724:	bl	15f8c <__assert_fail@plt+0x52b0>
   14728:	mov	r7, r0
   1472c:	str	r0, [r4]
   14730:	ldr	r0, [r4, #4]
   14734:	mov	r1, #0
   14738:	ldr	r2, [sp, #28]
   1473c:	sub	r2, r2, r0
   14740:	add	r0, r7, r0, lsl #3
   14744:	lsl	r2, r2, #3
   14748:	bl	10c40 <memset@plt>
   1474c:	ldr	r3, [sp, #28]
   14750:	str	r3, [r4, #4]
   14754:	ldr	ip, [sp, #32]
   14758:	mvn	r3, #0
   1475c:	mov	r2, r6
   14760:	ldr	r8, [sp, #36]	; 0x24
   14764:	ldr	fp, [r7]
   14768:	ldr	r4, [r7, #4]
   1476c:	str	ip, [sp]
   14770:	orr	r8, r8, #1
   14774:	ldr	ip, [sp, #72]	; 0x48
   14778:	mov	r1, fp
   1477c:	str	r8, [sp, #4]
   14780:	ldr	lr, [sp, #76]	; 0x4c
   14784:	mov	r0, r4
   14788:	str	r5, [sp, #8]
   1478c:	str	ip, [sp, #12]
   14790:	str	lr, [sp, #16]
   14794:	bl	11c80 <__assert_fail@plt+0xfa4>
   14798:	cmp	fp, r0
   1479c:	bhi	147fc <__assert_fail@plt+0x3b20>
   147a0:	add	fp, r0, #1
   147a4:	movw	r3, #33072	; 0x8130
   147a8:	movt	r3, #2
   147ac:	cmp	r4, r3
   147b0:	str	fp, [r7]
   147b4:	beq	147c0 <__assert_fail@plt+0x3ae4>
   147b8:	mov	r0, r4
   147bc:	bl	16540 <__assert_fail@plt+0x5864>
   147c0:	mov	r0, fp
   147c4:	bl	15ce8 <__assert_fail@plt+0x500c>
   147c8:	ldr	r3, [sp, #32]
   147cc:	mov	r2, r6
   147d0:	mov	r1, fp
   147d4:	mov	r4, r0
   147d8:	ldr	lr, [sp, #72]	; 0x48
   147dc:	ldr	ip, [sp, #76]	; 0x4c
   147e0:	str	r0, [r7, #4]
   147e4:	stm	sp, {r3, r8}
   147e8:	mvn	r3, #0
   147ec:	str	r5, [sp, #8]
   147f0:	str	lr, [sp, #12]
   147f4:	str	ip, [sp, #16]
   147f8:	bl	11c80 <__assert_fail@plt+0xfa4>
   147fc:	mov	r0, r4
   14800:	str	sl, [r9]
   14804:	add	sp, sp, #84	; 0x54
   14808:	ldrd	r4, [sp]
   1480c:	ldrd	r6, [sp, #8]
   14810:	ldrd	r8, [sp, #16]
   14814:	ldrd	sl, [sp, #24]
   14818:	add	sp, sp, #32
   1481c:	pop	{pc}		; (ldr pc, [sp], #4)
   14820:	mov	r0, #8
   14824:	mvn	r3, #-2147483648	; 0x80000000
   14828:	add	r1, sp, #28
   1482c:	str	r0, [sp]
   14830:	mov	r0, #0
   14834:	bl	15f8c <__assert_fail@plt+0x52b0>
   14838:	ldrd	r2, [r4, #8]
   1483c:	mov	r7, r0
   14840:	str	r0, [r4]
   14844:	strd	r2, [r0]
   14848:	b	14730 <__assert_fail@plt+0x3a54>
   1484c:	andeq	r8, r2, r0, lsr r2
   14850:	ldr	ip, [pc, #472]	; 14a30 <__assert_fail@plt+0x3d54>
   14854:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14858:	mov	r5, r0
   1485c:	movw	r4, #32976	; 0x80d0
   14860:	movt	r4, #2
   14864:	ldrd	r2, [ip]
   14868:	ldrd	r0, [ip, #8]
   1486c:	strd	r6, [sp, #8]
   14870:	strd	r8, [sp, #16]
   14874:	strd	sl, [sp, #24]
   14878:	str	lr, [sp, #32]
   1487c:	sub	sp, sp, #84	; 0x54
   14880:	strd	r2, [sp, #32]
   14884:	strd	r0, [sp, #40]	; 0x28
   14888:	ldr	r6, [sp, #44]	; 0x2c
   1488c:	ldrd	r2, [ip, #16]
   14890:	ldrd	r0, [ip, #24]
   14894:	mvn	lr, r6
   14898:	and	lr, lr, #67108864	; 0x4000000
   1489c:	eor	lr, lr, r6
   148a0:	ldrd	r6, [ip, #40]	; 0x28
   148a4:	strd	r2, [sp, #48]	; 0x30
   148a8:	ldrd	r2, [ip, #32]
   148ac:	str	lr, [sp, #44]	; 0x2c
   148b0:	strd	r0, [sp, #56]	; 0x38
   148b4:	strd	r2, [sp, #64]	; 0x40
   148b8:	strd	r6, [sp, #72]	; 0x48
   148bc:	bl	10c28 <__errno_location@plt>
   148c0:	mov	r8, r0
   148c4:	ldr	r9, [r0]
   148c8:	ldr	r2, [r4, #4]
   148cc:	ldr	r6, [r4]
   148d0:	cmp	r2, #0
   148d4:	bgt	14930 <__assert_fail@plt+0x3c54>
   148d8:	add	r3, r4, #8
   148dc:	str	r2, [sp, #28]
   148e0:	rsb	r2, r2, #1
   148e4:	cmp	r6, r3
   148e8:	beq	14a04 <__assert_fail@plt+0x3d28>
   148ec:	mov	r1, #8
   148f0:	mov	r0, r6
   148f4:	mvn	r3, #-2147483648	; 0x80000000
   148f8:	str	r1, [sp]
   148fc:	add	r1, sp, #28
   14900:	bl	15f8c <__assert_fail@plt+0x52b0>
   14904:	mov	r6, r0
   14908:	str	r0, [r4]
   1490c:	ldr	r0, [r4, #4]
   14910:	mov	r1, #0
   14914:	ldr	r2, [sp, #28]
   14918:	sub	r2, r2, r0
   1491c:	add	r0, r6, r0, lsl #3
   14920:	lsl	r2, r2, #3
   14924:	bl	10c40 <memset@plt>
   14928:	ldr	r3, [sp, #28]
   1492c:	str	r3, [r4, #4]
   14930:	ldr	sl, [r6]
   14934:	add	r0, sp, #40	; 0x28
   14938:	mvn	r3, #0
   1493c:	mov	r2, r5
   14940:	ldr	r7, [sp, #36]	; 0x24
   14944:	ldr	r4, [r6, #4]
   14948:	mov	r1, sl
   1494c:	str	r0, [sp, #8]
   14950:	ldr	lr, [sp, #32]
   14954:	orr	r7, r7, #1
   14958:	ldr	ip, [sp, #72]	; 0x48
   1495c:	mov	r0, r4
   14960:	ldr	fp, [sp, #76]	; 0x4c
   14964:	str	lr, [sp]
   14968:	str	r7, [sp, #4]
   1496c:	str	ip, [sp, #12]
   14970:	str	fp, [sp, #16]
   14974:	bl	11c80 <__assert_fail@plt+0xfa4>
   14978:	cmp	sl, r0
   1497c:	bhi	149e0 <__assert_fail@plt+0x3d04>
   14980:	add	sl, r0, #1
   14984:	movw	r3, #33072	; 0x8130
   14988:	movt	r3, #2
   1498c:	cmp	r4, r3
   14990:	str	sl, [r6]
   14994:	beq	149a0 <__assert_fail@plt+0x3cc4>
   14998:	mov	r0, r4
   1499c:	bl	16540 <__assert_fail@plt+0x5864>
   149a0:	mov	r0, sl
   149a4:	bl	15ce8 <__assert_fail@plt+0x500c>
   149a8:	ldr	r3, [sp, #32]
   149ac:	mov	r2, r5
   149b0:	add	r5, sp, #40	; 0x28
   149b4:	mov	r1, sl
   149b8:	mov	r4, r0
   149bc:	ldr	lr, [sp, #72]	; 0x48
   149c0:	ldr	ip, [sp, #76]	; 0x4c
   149c4:	str	r0, [r6, #4]
   149c8:	stm	sp, {r3, r7}
   149cc:	mvn	r3, #0
   149d0:	str	r5, [sp, #8]
   149d4:	str	lr, [sp, #12]
   149d8:	str	ip, [sp, #16]
   149dc:	bl	11c80 <__assert_fail@plt+0xfa4>
   149e0:	mov	r0, r4
   149e4:	str	r9, [r8]
   149e8:	add	sp, sp, #84	; 0x54
   149ec:	ldrd	r4, [sp]
   149f0:	ldrd	r6, [sp, #8]
   149f4:	ldrd	r8, [sp, #16]
   149f8:	ldrd	sl, [sp, #24]
   149fc:	add	sp, sp, #32
   14a00:	pop	{pc}		; (ldr pc, [sp], #4)
   14a04:	mov	r0, #8
   14a08:	mvn	r3, #-2147483648	; 0x80000000
   14a0c:	add	r1, sp, #28
   14a10:	str	r0, [sp]
   14a14:	mov	r0, #0
   14a18:	bl	15f8c <__assert_fail@plt+0x52b0>
   14a1c:	ldrd	r2, [r4, #8]
   14a20:	mov	r6, r0
   14a24:	str	r0, [r4]
   14a28:	strd	r2, [r0]
   14a2c:	b	1490c <__assert_fail@plt+0x3c30>
   14a30:	andeq	r8, r2, r0, lsr r2
   14a34:	ldr	ip, [pc, #480]	; 14c1c <__assert_fail@plt+0x3f40>
   14a38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a3c:	mov	r5, r0
   14a40:	movw	r4, #32976	; 0x80d0
   14a44:	movt	r4, #2
   14a48:	ldrd	r2, [ip]
   14a4c:	strd	r6, [sp, #8]
   14a50:	mov	r6, r1
   14a54:	ldrd	r0, [ip, #8]
   14a58:	strd	r8, [sp, #16]
   14a5c:	strd	sl, [sp, #24]
   14a60:	str	lr, [sp, #32]
   14a64:	sub	sp, sp, #84	; 0x54
   14a68:	ldrd	r8, [ip, #40]	; 0x28
   14a6c:	strd	r2, [sp, #32]
   14a70:	strd	r0, [sp, #40]	; 0x28
   14a74:	ldrd	r2, [ip, #16]
   14a78:	ldr	r7, [sp, #44]	; 0x2c
   14a7c:	ldrd	r0, [ip, #24]
   14a80:	strd	r2, [sp, #48]	; 0x30
   14a84:	ldrd	r2, [ip, #32]
   14a88:	mvn	lr, r7
   14a8c:	and	lr, lr, #67108864	; 0x4000000
   14a90:	eor	lr, lr, r7
   14a94:	str	lr, [sp, #44]	; 0x2c
   14a98:	strd	r0, [sp, #56]	; 0x38
   14a9c:	strd	r2, [sp, #64]	; 0x40
   14aa0:	strd	r8, [sp, #72]	; 0x48
   14aa4:	bl	10c28 <__errno_location@plt>
   14aa8:	mov	r9, r0
   14aac:	ldr	sl, [r0]
   14ab0:	ldr	r2, [r4, #4]
   14ab4:	ldr	r7, [r4]
   14ab8:	cmp	r2, #0
   14abc:	bgt	14b18 <__assert_fail@plt+0x3e3c>
   14ac0:	add	r3, r4, #8
   14ac4:	str	r2, [sp, #28]
   14ac8:	rsb	r2, r2, #1
   14acc:	cmp	r7, r3
   14ad0:	beq	14bf0 <__assert_fail@plt+0x3f14>
   14ad4:	mov	r1, #8
   14ad8:	mov	r0, r7
   14adc:	mvn	r3, #-2147483648	; 0x80000000
   14ae0:	str	r1, [sp]
   14ae4:	add	r1, sp, #28
   14ae8:	bl	15f8c <__assert_fail@plt+0x52b0>
   14aec:	mov	r7, r0
   14af0:	str	r0, [r4]
   14af4:	ldr	r0, [r4, #4]
   14af8:	mov	r1, #0
   14afc:	ldr	r2, [sp, #28]
   14b00:	sub	r2, r2, r0
   14b04:	add	r0, r7, r0, lsl #3
   14b08:	lsl	r2, r2, #3
   14b0c:	bl	10c40 <memset@plt>
   14b10:	ldr	r3, [sp, #28]
   14b14:	str	r3, [r4, #4]
   14b18:	ldr	ip, [sp, #32]
   14b1c:	add	r0, sp, #40	; 0x28
   14b20:	mov	r3, r6
   14b24:	mov	r2, r5
   14b28:	ldr	r8, [sp, #36]	; 0x24
   14b2c:	ldr	fp, [r7]
   14b30:	ldr	r4, [r7, #4]
   14b34:	str	ip, [sp]
   14b38:	orr	r8, r8, #1
   14b3c:	ldr	ip, [sp, #72]	; 0x48
   14b40:	mov	r1, fp
   14b44:	str	r8, [sp, #4]
   14b48:	ldr	lr, [sp, #76]	; 0x4c
   14b4c:	str	r0, [sp, #8]
   14b50:	mov	r0, r4
   14b54:	str	ip, [sp, #12]
   14b58:	str	lr, [sp, #16]
   14b5c:	bl	11c80 <__assert_fail@plt+0xfa4>
   14b60:	cmp	fp, r0
   14b64:	bhi	14bcc <__assert_fail@plt+0x3ef0>
   14b68:	add	fp, r0, #1
   14b6c:	movw	r3, #33072	; 0x8130
   14b70:	movt	r3, #2
   14b74:	cmp	r4, r3
   14b78:	str	fp, [r7]
   14b7c:	beq	14b88 <__assert_fail@plt+0x3eac>
   14b80:	mov	r0, r4
   14b84:	bl	16540 <__assert_fail@plt+0x5864>
   14b88:	mov	r0, fp
   14b8c:	bl	15ce8 <__assert_fail@plt+0x500c>
   14b90:	ldr	lr, [sp, #32]
   14b94:	mov	r2, r5
   14b98:	mov	r3, r6
   14b9c:	mov	r1, fp
   14ba0:	mov	r4, r0
   14ba4:	ldr	r5, [sp, #72]	; 0x48
   14ba8:	ldr	ip, [sp, #76]	; 0x4c
   14bac:	str	r0, [r7, #4]
   14bb0:	str	lr, [sp]
   14bb4:	add	lr, sp, #40	; 0x28
   14bb8:	str	r8, [sp, #4]
   14bbc:	str	lr, [sp, #8]
   14bc0:	str	r5, [sp, #12]
   14bc4:	str	ip, [sp, #16]
   14bc8:	bl	11c80 <__assert_fail@plt+0xfa4>
   14bcc:	mov	r0, r4
   14bd0:	str	sl, [r9]
   14bd4:	add	sp, sp, #84	; 0x54
   14bd8:	ldrd	r4, [sp]
   14bdc:	ldrd	r6, [sp, #8]
   14be0:	ldrd	r8, [sp, #16]
   14be4:	ldrd	sl, [sp, #24]
   14be8:	add	sp, sp, #32
   14bec:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf0:	mov	r0, #8
   14bf4:	mvn	r3, #-2147483648	; 0x80000000
   14bf8:	add	r1, sp, #28
   14bfc:	str	r0, [sp]
   14c00:	mov	r0, #0
   14c04:	bl	15f8c <__assert_fail@plt+0x52b0>
   14c08:	ldrd	r2, [r4, #8]
   14c0c:	mov	r7, r0
   14c10:	str	r0, [r4]
   14c14:	strd	r2, [r0]
   14c18:	b	14af4 <__assert_fail@plt+0x3e18>
   14c1c:	andeq	r8, r2, r0, lsr r2
   14c20:	strd	r4, [sp, #-12]!
   14c24:	mov	r4, #0
   14c28:	mov	r5, #0
   14c2c:	str	lr, [sp, #8]
   14c30:	sub	sp, sp, #100	; 0x64
   14c34:	cmp	r1, #10
   14c38:	strd	r4, [sp]
   14c3c:	strd	r4, [sp, #8]
   14c40:	strd	r4, [sp, #16]
   14c44:	strd	r4, [sp, #24]
   14c48:	strd	r4, [sp, #32]
   14c4c:	strd	r4, [sp, #40]	; 0x28
   14c50:	beq	14c80 <__assert_fail@plt+0x3fa4>
   14c54:	mov	ip, #67108864	; 0x4000000
   14c58:	mov	r3, sp
   14c5c:	str	r1, [sp]
   14c60:	mov	r1, r2
   14c64:	mvn	r2, #0
   14c68:	str	ip, [sp, #12]
   14c6c:	bl	1366c <__assert_fail@plt+0x2990>
   14c70:	add	sp, sp, #100	; 0x64
   14c74:	ldrd	r4, [sp]
   14c78:	add	sp, sp, #8
   14c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c80:	bl	10cd0 <abort@plt>
   14c84:	ldr	ip, [pc, #156]	; 14d28 <__assert_fail@plt+0x404c>
   14c88:	cmp	r2, #0
   14c8c:	cmpne	r1, #0
   14c90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14c94:	strd	r6, [sp, #8]
   14c98:	mov	r6, r2
   14c9c:	str	r8, [sp, #16]
   14ca0:	mov	r8, r3
   14ca4:	strd	sl, [sp, #20]
   14ca8:	ldrd	r4, [ip]
   14cac:	str	lr, [sp, #28]
   14cb0:	sub	sp, sp, #48	; 0x30
   14cb4:	mov	lr, #10
   14cb8:	ldrd	r2, [ip, #8]
   14cbc:	ldrd	sl, [ip, #16]
   14cc0:	strd	r4, [sp]
   14cc4:	ldrd	r4, [ip, #32]
   14cc8:	str	lr, [sp]
   14ccc:	strd	r2, [sp, #8]
   14cd0:	strd	sl, [sp, #16]
   14cd4:	ldrd	r2, [ip, #24]
   14cd8:	ldrd	sl, [ip, #40]	; 0x28
   14cdc:	strd	r2, [sp, #24]
   14ce0:	strd	r4, [sp, #32]
   14ce4:	strd	sl, [sp, #40]	; 0x28
   14ce8:	beq	14d24 <__assert_fail@plt+0x4048>
   14cec:	mov	r7, r1
   14cf0:	mov	r3, sp
   14cf4:	mov	r1, r8
   14cf8:	mvn	r2, #0
   14cfc:	str	r7, [sp, #40]	; 0x28
   14d00:	str	r6, [sp, #44]	; 0x2c
   14d04:	bl	1366c <__assert_fail@plt+0x2990>
   14d08:	add	sp, sp, #48	; 0x30
   14d0c:	ldrd	r4, [sp]
   14d10:	ldrd	r6, [sp, #8]
   14d14:	ldr	r8, [sp, #16]
   14d18:	ldrd	sl, [sp, #20]
   14d1c:	add	sp, sp, #28
   14d20:	pop	{pc}		; (ldr pc, [sp], #4)
   14d24:	bl	10cd0 <abort@plt>
   14d28:	andeq	r8, r2, r0, lsr r2
   14d2c:	ldr	ip, [pc, #156]	; 14dd0 <__assert_fail@plt+0x40f4>
   14d30:	cmp	r2, #0
   14d34:	cmpne	r1, #0
   14d38:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14d3c:	strd	r6, [sp, #8]
   14d40:	mov	r6, r2
   14d44:	str	r8, [sp, #16]
   14d48:	mov	r8, r3
   14d4c:	strd	sl, [sp, #20]
   14d50:	ldrd	r4, [ip]
   14d54:	str	lr, [sp, #28]
   14d58:	sub	sp, sp, #48	; 0x30
   14d5c:	mov	lr, #10
   14d60:	ldrd	r2, [ip, #8]
   14d64:	ldrd	sl, [ip, #16]
   14d68:	strd	r4, [sp]
   14d6c:	ldrd	r4, [ip, #32]
   14d70:	str	lr, [sp]
   14d74:	strd	r2, [sp, #8]
   14d78:	strd	sl, [sp, #16]
   14d7c:	ldrd	r2, [ip, #24]
   14d80:	ldrd	sl, [ip, #40]	; 0x28
   14d84:	strd	r2, [sp, #24]
   14d88:	strd	r4, [sp, #32]
   14d8c:	strd	sl, [sp, #40]	; 0x28
   14d90:	beq	14dcc <__assert_fail@plt+0x40f0>
   14d94:	ldr	r2, [sp, #80]	; 0x50
   14d98:	mov	r7, r1
   14d9c:	mov	r3, sp
   14da0:	mov	r1, r8
   14da4:	str	r7, [sp, #40]	; 0x28
   14da8:	str	r6, [sp, #44]	; 0x2c
   14dac:	bl	1366c <__assert_fail@plt+0x2990>
   14db0:	add	sp, sp, #48	; 0x30
   14db4:	ldrd	r4, [sp]
   14db8:	ldrd	r6, [sp, #8]
   14dbc:	ldr	r8, [sp, #16]
   14dc0:	ldrd	sl, [sp, #20]
   14dc4:	add	sp, sp, #28
   14dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dcc:	bl	10cd0 <abort@plt>
   14dd0:	andeq	r8, r2, r0, lsr r2
   14dd4:	ldr	ip, [pc, #512]	; 14fdc <__assert_fail@plt+0x4300>
   14dd8:	cmp	r0, #0
   14ddc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14de0:	ldrd	r4, [ip, #16]
   14de4:	strd	r6, [sp, #8]
   14de8:	clz	r6, r1
   14dec:	mov	r7, r1
   14df0:	strd	r8, [sp, #16]
   14df4:	mov	r8, r0
   14df8:	lsr	r6, r6, #5
   14dfc:	strd	sl, [sp, #24]
   14e00:	mov	fp, r2
   14e04:	mov	sl, #10
   14e08:	ldrd	r2, [ip]
   14e0c:	moveq	r6, #1
   14e10:	str	lr, [sp, #32]
   14e14:	sub	sp, sp, #92	; 0x5c
   14e18:	cmp	r6, #0
   14e1c:	ldrd	r0, [ip, #8]
   14e20:	strd	r2, [sp, #40]	; 0x28
   14e24:	strd	r4, [sp, #56]	; 0x38
   14e28:	ldrd	r2, [ip, #24]
   14e2c:	strd	r0, [sp, #48]	; 0x30
   14e30:	ldrd	r0, [ip, #32]
   14e34:	str	sl, [sp, #40]	; 0x28
   14e38:	ldrd	r4, [ip, #40]	; 0x28
   14e3c:	strd	r2, [sp, #64]	; 0x40
   14e40:	strd	r0, [sp, #72]	; 0x48
   14e44:	strd	r4, [sp, #80]	; 0x50
   14e48:	bne	14fd8 <__assert_fail@plt+0x42fc>
   14e4c:	movw	r5, #32976	; 0x80d0
   14e50:	movt	r5, #2
   14e54:	str	r8, [sp, #80]	; 0x50
   14e58:	str	r7, [sp, #84]	; 0x54
   14e5c:	bl	10c28 <__errno_location@plt>
   14e60:	ldr	r3, [r0]
   14e64:	mov	r9, r0
   14e68:	ldr	r2, [r5, #4]
   14e6c:	ldr	r4, [r5]
   14e70:	str	r3, [sp, #28]
   14e74:	cmp	r2, #0
   14e78:	movgt	r1, sl
   14e7c:	bgt	14ee4 <__assert_fail@plt+0x4208>
   14e80:	add	r3, r5, #8
   14e84:	str	r2, [sp, #36]	; 0x24
   14e88:	rsb	r2, r2, #1
   14e8c:	cmp	r4, r3
   14e90:	beq	14fac <__assert_fail@plt+0x42d0>
   14e94:	mov	r1, #8
   14e98:	mov	r0, r4
   14e9c:	mvn	r3, #-2147483648	; 0x80000000
   14ea0:	str	r1, [sp]
   14ea4:	add	r1, sp, #36	; 0x24
   14ea8:	bl	15f8c <__assert_fail@plt+0x52b0>
   14eac:	mov	r4, r0
   14eb0:	str	r0, [r5]
   14eb4:	ldr	r0, [r5, #4]
   14eb8:	mov	r1, #0
   14ebc:	ldr	r2, [sp, #36]	; 0x24
   14ec0:	sub	r2, r2, r0
   14ec4:	add	r0, r4, r0, lsl #3
   14ec8:	lsl	r2, r2, #3
   14ecc:	bl	10c40 <memset@plt>
   14ed0:	ldr	r3, [sp, #36]	; 0x24
   14ed4:	ldr	r1, [sp, #40]	; 0x28
   14ed8:	ldr	r8, [sp, #80]	; 0x50
   14edc:	str	r3, [r5, #4]
   14ee0:	ldr	r7, [sp, #84]	; 0x54
   14ee4:	mvn	r3, #0
   14ee8:	mov	r2, fp
   14eec:	ldr	r6, [sp, #44]	; 0x2c
   14ef0:	ldr	sl, [r4]
   14ef4:	ldr	r5, [r4, #4]
   14ef8:	orr	r6, r6, #1
   14efc:	stm	sp, {r1, r6}
   14f00:	add	r1, sp, #48	; 0x30
   14f04:	str	r8, [sp, #12]
   14f08:	mov	r0, r5
   14f0c:	str	r1, [sp, #8]
   14f10:	mov	r1, sl
   14f14:	str	r7, [sp, #16]
   14f18:	bl	11c80 <__assert_fail@plt+0xfa4>
   14f1c:	cmp	sl, r0
   14f20:	bhi	14f84 <__assert_fail@plt+0x42a8>
   14f24:	add	r7, r0, #1
   14f28:	movw	r3, #33072	; 0x8130
   14f2c:	movt	r3, #2
   14f30:	cmp	r5, r3
   14f34:	str	r7, [r4]
   14f38:	beq	14f44 <__assert_fail@plt+0x4268>
   14f3c:	mov	r0, r5
   14f40:	bl	16540 <__assert_fail@plt+0x5864>
   14f44:	mov	r0, r7
   14f48:	bl	15ce8 <__assert_fail@plt+0x500c>
   14f4c:	ldr	r3, [sp, #40]	; 0x28
   14f50:	mov	r2, fp
   14f54:	mov	r1, r7
   14f58:	mov	r5, r0
   14f5c:	ldr	lr, [sp, #80]	; 0x50
   14f60:	ldr	ip, [sp, #84]	; 0x54
   14f64:	str	r0, [r4, #4]
   14f68:	add	r4, sp, #48	; 0x30
   14f6c:	stm	sp, {r3, r6}
   14f70:	mvn	r3, #0
   14f74:	str	r4, [sp, #8]
   14f78:	str	lr, [sp, #12]
   14f7c:	str	ip, [sp, #16]
   14f80:	bl	11c80 <__assert_fail@plt+0xfa4>
   14f84:	ldr	r3, [sp, #28]
   14f88:	mov	r0, r5
   14f8c:	str	r3, [r9]
   14f90:	add	sp, sp, #92	; 0x5c
   14f94:	ldrd	r4, [sp]
   14f98:	ldrd	r6, [sp, #8]
   14f9c:	ldrd	r8, [sp, #16]
   14fa0:	ldrd	sl, [sp, #24]
   14fa4:	add	sp, sp, #32
   14fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fac:	mov	r1, #8
   14fb0:	mvn	r3, #-2147483648	; 0x80000000
   14fb4:	mov	r0, r6
   14fb8:	str	r1, [sp]
   14fbc:	add	r1, sp, #36	; 0x24
   14fc0:	bl	15f8c <__assert_fail@plt+0x52b0>
   14fc4:	ldrd	r2, [r5, #8]
   14fc8:	mov	r4, r0
   14fcc:	str	r0, [r5]
   14fd0:	strd	r2, [r0]
   14fd4:	b	14eb4 <__assert_fail@plt+0x41d8>
   14fd8:	bl	10cd0 <abort@plt>
   14fdc:	andeq	r8, r2, r0, lsr r2
   14fe0:	ldr	ip, [pc, #536]	; 15200 <__assert_fail@plt+0x4524>
   14fe4:	cmp	r0, #0
   14fe8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14fec:	ldrd	r4, [ip, #16]
   14ff0:	strd	r6, [sp, #8]
   14ff4:	mov	r6, r1
   14ff8:	mov	r7, r0
   14ffc:	strd	r8, [sp, #16]
   15000:	mov	r9, #10
   15004:	strd	sl, [sp, #24]
   15008:	mov	sl, r2
   1500c:	mov	fp, r3
   15010:	str	lr, [sp, #32]
   15014:	clz	lr, r1
   15018:	sub	sp, sp, #92	; 0x5c
   1501c:	ldrd	r2, [ip]
   15020:	lsr	lr, lr, #5
   15024:	moveq	lr, #1
   15028:	ldrd	r0, [ip, #8]
   1502c:	cmp	lr, #0
   15030:	strd	r4, [sp, #56]	; 0x38
   15034:	ldrd	r4, [ip, #40]	; 0x28
   15038:	str	lr, [sp, #28]
   1503c:	strd	r2, [sp, #40]	; 0x28
   15040:	ldrd	r2, [ip, #24]
   15044:	strd	r0, [sp, #48]	; 0x30
   15048:	ldrd	r0, [ip, #32]
   1504c:	str	r9, [sp, #40]	; 0x28
   15050:	strd	r2, [sp, #64]	; 0x40
   15054:	strd	r4, [sp, #80]	; 0x50
   15058:	strd	r0, [sp, #72]	; 0x48
   1505c:	bne	151fc <__assert_fail@plt+0x4520>
   15060:	movw	r5, #32976	; 0x80d0
   15064:	movt	r5, #2
   15068:	str	r7, [sp, #80]	; 0x50
   1506c:	str	r6, [sp, #84]	; 0x54
   15070:	bl	10c28 <__errno_location@plt>
   15074:	ldr	r3, [r0]
   15078:	mov	r8, r0
   1507c:	ldr	r2, [r5, #4]
   15080:	ldr	r4, [r5]
   15084:	str	r3, [sp, #24]
   15088:	cmp	r2, #0
   1508c:	movgt	r1, r9
   15090:	bgt	150f8 <__assert_fail@plt+0x441c>
   15094:	add	r3, r5, #8
   15098:	str	r2, [sp, #36]	; 0x24
   1509c:	rsb	r2, r2, #1
   150a0:	cmp	r4, r3
   150a4:	beq	151d0 <__assert_fail@plt+0x44f4>
   150a8:	mov	r1, #8
   150ac:	mov	r0, r4
   150b0:	mvn	r3, #-2147483648	; 0x80000000
   150b4:	str	r1, [sp]
   150b8:	add	r1, sp, #36	; 0x24
   150bc:	bl	15f8c <__assert_fail@plt+0x52b0>
   150c0:	mov	r4, r0
   150c4:	str	r0, [r5]
   150c8:	ldr	r0, [r5, #4]
   150cc:	mov	r1, #0
   150d0:	ldr	r2, [sp, #36]	; 0x24
   150d4:	sub	r2, r2, r0
   150d8:	add	r0, r4, r0, lsl #3
   150dc:	lsl	r2, r2, #3
   150e0:	bl	10c40 <memset@plt>
   150e4:	ldr	r3, [sp, #36]	; 0x24
   150e8:	ldr	r1, [sp, #40]	; 0x28
   150ec:	ldr	r7, [sp, #80]	; 0x50
   150f0:	str	r3, [r5, #4]
   150f4:	ldr	r6, [sp, #84]	; 0x54
   150f8:	mov	r3, fp
   150fc:	mov	r2, sl
   15100:	ldr	r0, [sp, #44]	; 0x2c
   15104:	ldr	r9, [r4]
   15108:	ldr	r5, [r4, #4]
   1510c:	orr	r0, r0, #1
   15110:	str	r1, [sp]
   15114:	add	r1, sp, #48	; 0x30
   15118:	str	r0, [sp, #4]
   1511c:	str	r1, [sp, #8]
   15120:	mov	r1, r9
   15124:	str	r7, [sp, #12]
   15128:	str	r6, [sp, #16]
   1512c:	str	r0, [sp, #28]
   15130:	mov	r0, r5
   15134:	bl	11c80 <__assert_fail@plt+0xfa4>
   15138:	cmp	r9, r0
   1513c:	bhi	151a8 <__assert_fail@plt+0x44cc>
   15140:	add	r6, r0, #1
   15144:	movw	r3, #33072	; 0x8130
   15148:	movt	r3, #2
   1514c:	cmp	r5, r3
   15150:	str	r6, [r4]
   15154:	beq	15160 <__assert_fail@plt+0x4484>
   15158:	mov	r0, r5
   1515c:	bl	16540 <__assert_fail@plt+0x5864>
   15160:	mov	r0, r6
   15164:	bl	15ce8 <__assert_fail@plt+0x500c>
   15168:	ldr	lr, [sp, #40]	; 0x28
   1516c:	mov	r1, r6
   15170:	mov	r3, fp
   15174:	mov	r2, sl
   15178:	mov	r5, r0
   1517c:	ldr	r6, [sp, #80]	; 0x50
   15180:	ldr	ip, [sp, #84]	; 0x54
   15184:	str	r0, [r4, #4]
   15188:	str	lr, [sp]
   1518c:	ldr	lr, [sp, #28]
   15190:	str	lr, [sp, #4]
   15194:	add	lr, sp, #48	; 0x30
   15198:	str	r6, [sp, #12]
   1519c:	str	lr, [sp, #8]
   151a0:	str	ip, [sp, #16]
   151a4:	bl	11c80 <__assert_fail@plt+0xfa4>
   151a8:	ldr	r3, [sp, #24]
   151ac:	mov	r0, r5
   151b0:	str	r3, [r8]
   151b4:	add	sp, sp, #92	; 0x5c
   151b8:	ldrd	r4, [sp]
   151bc:	ldrd	r6, [sp, #8]
   151c0:	ldrd	r8, [sp, #16]
   151c4:	ldrd	sl, [sp, #24]
   151c8:	add	sp, sp, #32
   151cc:	pop	{pc}		; (ldr pc, [sp], #4)
   151d0:	mov	r1, #8
   151d4:	mvn	r3, #-2147483648	; 0x80000000
   151d8:	ldr	r0, [sp, #28]
   151dc:	str	r1, [sp]
   151e0:	add	r1, sp, #36	; 0x24
   151e4:	bl	15f8c <__assert_fail@plt+0x52b0>
   151e8:	ldrd	r2, [r5, #8]
   151ec:	mov	r4, r0
   151f0:	str	r0, [r5]
   151f4:	strd	r2, [r0]
   151f8:	b	150c8 <__assert_fail@plt+0x43ec>
   151fc:	bl	10cd0 <abort@plt>
   15200:	andeq	r8, r2, r0, lsr r2
   15204:	ldr	r3, [pc]	; 1520c <__assert_fail@plt+0x4530>
   15208:	b	1366c <__assert_fail@plt+0x2990>
   1520c:	andeq	r8, r2, r0, ror #1
   15210:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15214:	movw	r4, #32976	; 0x80d0
   15218:	movt	r4, #2
   1521c:	strd	r6, [sp, #8]
   15220:	strd	r8, [sp, #16]
   15224:	strd	sl, [sp, #24]
   15228:	mov	sl, r0
   1522c:	mov	fp, r1
   15230:	str	lr, [sp, #32]
   15234:	sub	sp, sp, #44	; 0x2c
   15238:	bl	10c28 <__errno_location@plt>
   1523c:	ldr	r3, [r0]
   15240:	mov	r8, r0
   15244:	ldr	r2, [r4, #4]
   15248:	ldr	r5, [r4]
   1524c:	str	r3, [sp, #28]
   15250:	cmp	r2, #0
   15254:	bgt	152b0 <__assert_fail@plt+0x45d4>
   15258:	add	r3, r4, #8
   1525c:	str	r2, [sp, #36]	; 0x24
   15260:	rsb	r2, r2, #1
   15264:	cmp	r5, r3
   15268:	beq	1538c <__assert_fail@plt+0x46b0>
   1526c:	mov	r1, #8
   15270:	mov	r0, r5
   15274:	mvn	r3, #-2147483648	; 0x80000000
   15278:	str	r1, [sp]
   1527c:	add	r1, sp, #36	; 0x24
   15280:	bl	15f8c <__assert_fail@plt+0x52b0>
   15284:	mov	r5, r0
   15288:	str	r0, [r4]
   1528c:	ldr	r0, [r4, #4]
   15290:	mov	r1, #0
   15294:	ldr	r2, [sp, #36]	; 0x24
   15298:	sub	r2, r2, r0
   1529c:	add	r0, r5, r0, lsl #3
   152a0:	lsl	r2, r2, #3
   152a4:	bl	10c40 <memset@plt>
   152a8:	ldr	r3, [sp, #36]	; 0x24
   152ac:	str	r3, [r4, #4]
   152b0:	ldr	ip, [r4, #16]
   152b4:	mov	r3, fp
   152b8:	mov	r2, sl
   152bc:	ldr	r7, [r4, #20]
   152c0:	ldr	r0, [pc, #240]	; 153b8 <__assert_fail@plt+0x46dc>
   152c4:	ldr	r9, [r5]
   152c8:	orr	r7, r7, #1
   152cc:	ldr	r6, [r5, #4]
   152d0:	str	ip, [sp]
   152d4:	ldr	ip, [r4, #56]	; 0x38
   152d8:	mov	r1, r9
   152dc:	str	r7, [sp, #4]
   152e0:	ldr	lr, [r4, #60]	; 0x3c
   152e4:	str	r0, [sp, #8]
   152e8:	mov	r0, r6
   152ec:	str	ip, [sp, #12]
   152f0:	str	lr, [sp, #16]
   152f4:	bl	11c80 <__assert_fail@plt+0xfa4>
   152f8:	cmp	r9, r0
   152fc:	bhi	15364 <__assert_fail@plt+0x4688>
   15300:	add	r9, r0, #1
   15304:	movw	r3, #33072	; 0x8130
   15308:	movt	r3, #2
   1530c:	cmp	r6, r3
   15310:	str	r9, [r5]
   15314:	beq	15320 <__assert_fail@plt+0x4644>
   15318:	mov	r0, r6
   1531c:	bl	16540 <__assert_fail@plt+0x5864>
   15320:	mov	r0, r9
   15324:	bl	15ce8 <__assert_fail@plt+0x500c>
   15328:	ldr	ip, [r4, #16]
   1532c:	mov	r1, r9
   15330:	mov	r3, fp
   15334:	mov	r2, sl
   15338:	mov	r6, r0
   1533c:	ldr	r9, [r4, #56]	; 0x38
   15340:	ldr	lr, [r4, #60]	; 0x3c
   15344:	str	r0, [r5, #4]
   15348:	str	ip, [sp]
   1534c:	ldr	ip, [pc, #100]	; 153b8 <__assert_fail@plt+0x46dc>
   15350:	str	r7, [sp, #4]
   15354:	str	ip, [sp, #8]
   15358:	str	r9, [sp, #12]
   1535c:	str	lr, [sp, #16]
   15360:	bl	11c80 <__assert_fail@plt+0xfa4>
   15364:	ldr	r3, [sp, #28]
   15368:	mov	r0, r6
   1536c:	str	r3, [r8]
   15370:	add	sp, sp, #44	; 0x2c
   15374:	ldrd	r4, [sp]
   15378:	ldrd	r6, [sp, #8]
   1537c:	ldrd	r8, [sp, #16]
   15380:	ldrd	sl, [sp, #24]
   15384:	add	sp, sp, #32
   15388:	pop	{pc}		; (ldr pc, [sp], #4)
   1538c:	mov	r0, #8
   15390:	mvn	r3, #-2147483648	; 0x80000000
   15394:	add	r1, sp, #36	; 0x24
   15398:	str	r0, [sp]
   1539c:	mov	r0, #0
   153a0:	bl	15f8c <__assert_fail@plt+0x52b0>
   153a4:	ldrd	r2, [r4, #8]
   153a8:	mov	r5, r0
   153ac:	str	r0, [r4]
   153b0:	strd	r2, [r0]
   153b4:	b	1528c <__assert_fail@plt+0x45b0>
   153b8:	andeq	r8, r2, r8, ror #1
   153bc:	ldr	r3, [pc, #4]	; 153c8 <__assert_fail@plt+0x46ec>
   153c0:	mvn	r2, #0
   153c4:	b	1366c <__assert_fail@plt+0x2990>
   153c8:	andeq	r8, r2, r0, ror #1
   153cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153d0:	movw	r4, #32976	; 0x80d0
   153d4:	movt	r4, #2
   153d8:	strd	r6, [sp, #8]
   153dc:	strd	r8, [sp, #16]
   153e0:	strd	sl, [sp, #24]
   153e4:	mov	sl, r0
   153e8:	str	lr, [sp, #32]
   153ec:	sub	sp, sp, #44	; 0x2c
   153f0:	bl	10c28 <__errno_location@plt>
   153f4:	ldr	r3, [r0]
   153f8:	mov	r8, r0
   153fc:	ldr	r2, [r4, #4]
   15400:	ldr	r5, [r4]
   15404:	str	r3, [sp, #28]
   15408:	cmp	r2, #0
   1540c:	bgt	15468 <__assert_fail@plt+0x478c>
   15410:	add	r3, r4, #8
   15414:	str	r2, [sp, #36]	; 0x24
   15418:	rsb	r2, r2, #1
   1541c:	cmp	r5, r3
   15420:	beq	15530 <__assert_fail@plt+0x4854>
   15424:	mov	r1, #8
   15428:	mov	r0, r5
   1542c:	mvn	r3, #-2147483648	; 0x80000000
   15430:	str	r1, [sp]
   15434:	add	r1, sp, #36	; 0x24
   15438:	bl	15f8c <__assert_fail@plt+0x52b0>
   1543c:	mov	r5, r0
   15440:	str	r0, [r4]
   15444:	ldr	r0, [r4, #4]
   15448:	mov	r1, #0
   1544c:	ldr	r2, [sp, #36]	; 0x24
   15450:	sub	r2, r2, r0
   15454:	add	r0, r5, r0, lsl #3
   15458:	lsl	r2, r2, #3
   1545c:	bl	10c40 <memset@plt>
   15460:	ldr	r3, [sp, #36]	; 0x24
   15464:	str	r3, [r4, #4]
   15468:	ldr	ip, [r4, #16]
   1546c:	mvn	r3, #0
   15470:	mov	r2, sl
   15474:	ldr	r7, [r4, #20]
   15478:	ldr	fp, [pc, #220]	; 1555c <__assert_fail@plt+0x4880>
   1547c:	ldr	r9, [r5]
   15480:	orr	r7, r7, #1
   15484:	ldr	r6, [r5, #4]
   15488:	str	ip, [sp]
   1548c:	ldr	ip, [r4, #56]	; 0x38
   15490:	mov	r1, r9
   15494:	stmib	sp, {r7, fp}
   15498:	ldr	lr, [r4, #60]	; 0x3c
   1549c:	mov	r0, r6
   154a0:	str	ip, [sp, #12]
   154a4:	str	lr, [sp, #16]
   154a8:	bl	11c80 <__assert_fail@plt+0xfa4>
   154ac:	cmp	r9, r0
   154b0:	bhi	15508 <__assert_fail@plt+0x482c>
   154b4:	add	r9, r0, #1
   154b8:	movw	r3, #33072	; 0x8130
   154bc:	movt	r3, #2
   154c0:	cmp	r6, r3
   154c4:	str	r9, [r5]
   154c8:	beq	154d4 <__assert_fail@plt+0x47f8>
   154cc:	mov	r0, r6
   154d0:	bl	16540 <__assert_fail@plt+0x5864>
   154d4:	mov	r0, r9
   154d8:	bl	15ce8 <__assert_fail@plt+0x500c>
   154dc:	ldr	r3, [r4, #16]
   154e0:	mov	r2, sl
   154e4:	mov	r1, r9
   154e8:	mov	r6, r0
   154ec:	ldr	lr, [r4, #56]	; 0x38
   154f0:	ldr	ip, [r4, #60]	; 0x3c
   154f4:	str	r0, [r5, #4]
   154f8:	stm	sp, {r3, r7, fp, lr}
   154fc:	mvn	r3, #0
   15500:	str	ip, [sp, #16]
   15504:	bl	11c80 <__assert_fail@plt+0xfa4>
   15508:	ldr	r3, [sp, #28]
   1550c:	mov	r0, r6
   15510:	str	r3, [r8]
   15514:	add	sp, sp, #44	; 0x2c
   15518:	ldrd	r4, [sp]
   1551c:	ldrd	r6, [sp, #8]
   15520:	ldrd	r8, [sp, #16]
   15524:	ldrd	sl, [sp, #24]
   15528:	add	sp, sp, #32
   1552c:	pop	{pc}		; (ldr pc, [sp], #4)
   15530:	mov	r0, #8
   15534:	mvn	r3, #-2147483648	; 0x80000000
   15538:	add	r1, sp, #36	; 0x24
   1553c:	str	r0, [sp]
   15540:	mov	r0, #0
   15544:	bl	15f8c <__assert_fail@plt+0x52b0>
   15548:	ldrd	r2, [r4, #8]
   1554c:	mov	r5, r0
   15550:	str	r0, [r4]
   15554:	strd	r2, [r0]
   15558:	b	15444 <__assert_fail@plt+0x4768>
   1555c:	andeq	r8, r2, r8, ror #1
   15560:	cmp	r1, #0
   15564:	strd	r4, [sp, #-16]!
   15568:	mov	ip, r3
   1556c:	str	r6, [sp, #8]
   15570:	mov	r4, r0
   15574:	str	lr, [sp, #12]
   15578:	sub	sp, sp, #32
   1557c:	ldr	r5, [sp, #48]	; 0x30
   15580:	ldr	r6, [sp, #52]	; 0x34
   15584:	beq	156c8 <__assert_fail@plt+0x49ec>
   15588:	mov	r3, r1
   1558c:	mov	r1, #1
   15590:	stm	sp, {r2, ip}
   15594:	movw	r2, #28852	; 0x70b4
   15598:	movt	r2, #1
   1559c:	bl	10c64 <__fprintf_chk@plt>
   155a0:	mov	r2, #5
   155a4:	movw	r1, #28872	; 0x70c8
   155a8:	movt	r1, #1
   155ac:	mov	r0, #0
   155b0:	bl	10b50 <dcgettext@plt>
   155b4:	movw	ip, #2022	; 0x7e6
   155b8:	mov	r3, r0
   155bc:	mov	r1, #1
   155c0:	movw	r2, #29600	; 0x73a0
   155c4:	movt	r2, #1
   155c8:	mov	r0, r4
   155cc:	str	ip, [sp]
   155d0:	bl	10c64 <__fprintf_chk@plt>
   155d4:	mov	r1, r4
   155d8:	mov	r0, #10
   155dc:	bl	10b44 <fputc_unlocked@plt>
   155e0:	mov	r2, #5
   155e4:	movw	r1, #28876	; 0x70cc
   155e8:	movt	r1, #1
   155ec:	mov	r0, #0
   155f0:	bl	10b50 <dcgettext@plt>
   155f4:	mov	r2, r0
   155f8:	mov	r1, #1
   155fc:	movw	r3, #29048	; 0x7178
   15600:	movt	r3, #1
   15604:	mov	r0, r4
   15608:	bl	10c64 <__fprintf_chk@plt>
   1560c:	mov	r1, r4
   15610:	mov	r0, #10
   15614:	bl	10b44 <fputc_unlocked@plt>
   15618:	cmp	r6, #9
   1561c:	ldrls	pc, [pc, r6, lsl #2]
   15620:	b	15934 <__assert_fail@plt+0x4c58>
   15624:			; <UNDEFINED> instruction: 0x000156b4
   15628:	andeq	r5, r1, r4, ror #13
   1562c:	andeq	r5, r1, r0, lsr #14
   15630:	andeq	r5, r1, r0, ror #14
   15634:	andeq	r5, r1, r8, lsr #15
   15638:	andeq	r5, r1, r0, ror #15
   1563c:	andeq	r5, r1, r8, lsr #16
   15640:	andeq	r5, r1, ip, ror r8
   15644:	ldrdeq	r5, [r1], -r4
   15648:	andeq	r5, r1, ip, asr #12
   1564c:	movw	r1, #29352	; 0x72a8
   15650:	movt	r1, #1
   15654:	mov	r2, #5
   15658:	mov	r0, #0
   1565c:	bl	10b50 <dcgettext@plt>
   15660:	ldr	lr, [r5, #4]
   15664:	mov	r2, r0
   15668:	mov	r1, #1
   1566c:	mov	r0, r4
   15670:	ldr	r3, [r5, #8]
   15674:	ldr	ip, [r5, #32]
   15678:	str	lr, [sp]
   1567c:	ldr	lr, [r5, #12]
   15680:	str	ip, [sp, #28]
   15684:	ldr	ip, [r5, #28]
   15688:	str	r3, [sp, #4]
   1568c:	ldr	r3, [r5, #16]
   15690:	str	lr, [sp, #8]
   15694:	ldr	lr, [r5, #20]
   15698:	str	ip, [sp, #24]
   1569c:	ldr	ip, [r5, #24]
   156a0:	str	r3, [sp, #12]
   156a4:	ldr	r3, [r5]
   156a8:	str	lr, [sp, #16]
   156ac:	str	ip, [sp, #20]
   156b0:	bl	10c64 <__fprintf_chk@plt>
   156b4:	add	sp, sp, #32
   156b8:	ldrd	r4, [sp]
   156bc:	ldr	r6, [sp, #8]
   156c0:	add	sp, sp, #12
   156c4:	pop	{pc}		; (ldr pc, [sp], #4)
   156c8:	mov	r3, r2
   156cc:	mov	r1, #1
   156d0:	str	ip, [sp]
   156d4:	movw	r2, #28864	; 0x70c0
   156d8:	movt	r2, #1
   156dc:	bl	10c64 <__fprintf_chk@plt>
   156e0:	b	155a0 <__assert_fail@plt+0x48c4>
   156e4:	mov	r2, #5
   156e8:	movw	r1, #29084	; 0x719c
   156ec:	movt	r1, #1
   156f0:	mov	r0, #0
   156f4:	bl	10b50 <dcgettext@plt>
   156f8:	ldr	r3, [r5]
   156fc:	mov	r2, r0
   15700:	mov	r1, #1
   15704:	mov	r0, r4
   15708:	add	sp, sp, #32
   1570c:	ldrd	r4, [sp]
   15710:	ldr	r6, [sp, #8]
   15714:	ldr	lr, [sp, #12]
   15718:	add	sp, sp, #16
   1571c:	b	10c64 <__fprintf_chk@plt>
   15720:	mov	r2, #5
   15724:	movw	r1, #29100	; 0x71ac
   15728:	movt	r1, #1
   1572c:	mov	r0, #0
   15730:	bl	10b50 <dcgettext@plt>
   15734:	ldm	r5, {r3, ip}
   15738:	mov	r2, r0
   1573c:	mov	r1, #1
   15740:	mov	r0, r4
   15744:	str	ip, [sp, #48]	; 0x30
   15748:	add	sp, sp, #32
   1574c:	ldrd	r4, [sp]
   15750:	ldr	r6, [sp, #8]
   15754:	ldr	lr, [sp, #12]
   15758:	add	sp, sp, #16
   1575c:	b	10c64 <__fprintf_chk@plt>
   15760:	mov	r2, #5
   15764:	movw	r1, #29124	; 0x71c4
   15768:	movt	r1, #1
   1576c:	mov	r0, #0
   15770:	bl	10b50 <dcgettext@plt>
   15774:	ldm	r5, {r3, lr}
   15778:	mov	r2, r0
   1577c:	mov	r1, #1
   15780:	mov	r0, r4
   15784:	ldr	ip, [r5, #8]
   15788:	str	lr, [sp, #48]	; 0x30
   1578c:	str	ip, [sp, #52]	; 0x34
   15790:	add	sp, sp, #32
   15794:	ldrd	r4, [sp]
   15798:	ldr	r6, [sp, #8]
   1579c:	ldr	lr, [sp, #12]
   157a0:	add	sp, sp, #16
   157a4:	b	10c64 <__fprintf_chk@plt>
   157a8:	mov	r2, #5
   157ac:	movw	r1, #29152	; 0x71e0
   157b0:	movt	r1, #1
   157b4:	mov	r0, #0
   157b8:	bl	10b50 <dcgettext@plt>
   157bc:	ldmib	r5, {r3, ip, lr}
   157c0:	mov	r2, r0
   157c4:	mov	r1, #1
   157c8:	mov	r0, r4
   157cc:	str	r3, [sp]
   157d0:	ldr	r3, [r5]
   157d4:	stmib	sp, {ip, lr}
   157d8:	bl	10c64 <__fprintf_chk@plt>
   157dc:	b	156b4 <__assert_fail@plt+0x49d8>
   157e0:	mov	r2, #5
   157e4:	movw	r1, #29184	; 0x7200
   157e8:	movt	r1, #1
   157ec:	mov	r0, #0
   157f0:	bl	10b50 <dcgettext@plt>
   157f4:	ldmib	r5, {ip, lr}
   157f8:	mov	r2, r0
   157fc:	mov	r1, #1
   15800:	mov	r0, r4
   15804:	ldr	r3, [r5, #16]
   15808:	str	ip, [sp]
   1580c:	ldr	ip, [r5, #12]
   15810:	str	r3, [sp, #12]
   15814:	ldr	r3, [r5]
   15818:	str	lr, [sp, #4]
   1581c:	str	ip, [sp, #8]
   15820:	bl	10c64 <__fprintf_chk@plt>
   15824:	b	156b4 <__assert_fail@plt+0x49d8>
   15828:	mov	r2, #5
   1582c:	movw	r1, #29220	; 0x7224
   15830:	movt	r1, #1
   15834:	mov	r0, #0
   15838:	bl	10b50 <dcgettext@plt>
   1583c:	ldr	lr, [r5, #4]
   15840:	mov	r2, r0
   15844:	mov	r1, #1
   15848:	mov	r0, r4
   1584c:	ldr	r3, [r5, #8]
   15850:	ldr	ip, [r5, #20]
   15854:	str	lr, [sp]
   15858:	ldr	lr, [r5, #12]
   1585c:	str	ip, [sp, #16]
   15860:	ldr	ip, [r5, #16]
   15864:	str	r3, [sp, #4]
   15868:	ldr	r3, [r5]
   1586c:	str	lr, [sp, #8]
   15870:	str	ip, [sp, #12]
   15874:	bl	10c64 <__fprintf_chk@plt>
   15878:	b	156b4 <__assert_fail@plt+0x49d8>
   1587c:	mov	r2, #5
   15880:	movw	r1, #29260	; 0x724c
   15884:	movt	r1, #1
   15888:	mov	r0, #0
   1588c:	bl	10b50 <dcgettext@plt>
   15890:	ldmib	r5, {r3, ip}
   15894:	mov	r2, r0
   15898:	mov	r1, #1
   1589c:	mov	r0, r4
   158a0:	ldr	lr, [r5, #24]
   158a4:	str	r3, [sp]
   158a8:	ldr	r3, [r5, #12]
   158ac:	str	lr, [sp, #20]
   158b0:	ldr	lr, [r5, #20]
   158b4:	str	ip, [sp, #4]
   158b8:	ldr	ip, [r5, #16]
   158bc:	str	r3, [sp, #8]
   158c0:	ldr	r3, [r5]
   158c4:	str	ip, [sp, #12]
   158c8:	str	lr, [sp, #16]
   158cc:	bl	10c64 <__fprintf_chk@plt>
   158d0:	b	156b4 <__assert_fail@plt+0x49d8>
   158d4:	mov	r2, #5
   158d8:	movw	r1, #29304	; 0x7278
   158dc:	movt	r1, #1
   158e0:	mov	r0, #0
   158e4:	bl	10b50 <dcgettext@plt>
   158e8:	ldmib	r5, {ip, lr}
   158ec:	mov	r2, r0
   158f0:	mov	r1, #1
   158f4:	mov	r0, r4
   158f8:	ldr	r3, [r5, #28]
   158fc:	str	ip, [sp]
   15900:	ldr	ip, [r5, #12]
   15904:	str	r3, [sp, #24]
   15908:	ldr	r3, [r5, #24]
   1590c:	str	lr, [sp, #4]
   15910:	ldr	lr, [r5, #16]
   15914:	str	ip, [sp, #8]
   15918:	ldr	ip, [r5, #20]
   1591c:	str	r3, [sp, #20]
   15920:	ldr	r3, [r5]
   15924:	str	lr, [sp, #12]
   15928:	str	ip, [sp, #16]
   1592c:	bl	10c64 <__fprintf_chk@plt>
   15930:	b	156b4 <__assert_fail@plt+0x49d8>
   15934:	movw	r1, #29404	; 0x72dc
   15938:	movt	r1, #1
   1593c:	b	15654 <__assert_fail@plt+0x4978>
   15940:	strd	r4, [sp, #-12]!
   15944:	str	lr, [sp, #8]
   15948:	sub	sp, sp, #12
   1594c:	ldr	r5, [sp, #24]
   15950:	ldr	ip, [r5]
   15954:	cmp	ip, #0
   15958:	beq	15974 <__assert_fail@plt+0x4c98>
   1595c:	mov	lr, r5
   15960:	mov	ip, #0
   15964:	ldr	r4, [lr, #4]!
   15968:	add	ip, ip, #1
   1596c:	cmp	r4, #0
   15970:	bne	15964 <__assert_fail@plt+0x4c88>
   15974:	stm	sp, {r5, ip}
   15978:	bl	15560 <__assert_fail@plt+0x4884>
   1597c:	add	sp, sp, #12
   15980:	ldrd	r4, [sp]
   15984:	add	sp, sp, #8
   15988:	pop	{pc}		; (ldr pc, [sp], #4)
   1598c:	push	{lr}		; (str lr, [sp, #-4]!)
   15990:	sub	sp, sp, #52	; 0x34
   15994:	ldr	ip, [sp, #56]	; 0x38
   15998:	ldr	lr, [ip]
   1599c:	cmp	lr, #0
   159a0:	str	lr, [sp, #8]
   159a4:	beq	15a3c <__assert_fail@plt+0x4d60>
   159a8:	ldr	lr, [ip, #4]
   159ac:	cmp	lr, #0
   159b0:	str	lr, [sp, #12]
   159b4:	beq	15a50 <__assert_fail@plt+0x4d74>
   159b8:	ldr	lr, [ip, #8]
   159bc:	cmp	lr, #0
   159c0:	str	lr, [sp, #16]
   159c4:	beq	15a58 <__assert_fail@plt+0x4d7c>
   159c8:	ldr	lr, [ip, #12]
   159cc:	cmp	lr, #0
   159d0:	str	lr, [sp, #20]
   159d4:	beq	15a60 <__assert_fail@plt+0x4d84>
   159d8:	ldr	lr, [ip, #16]
   159dc:	cmp	lr, #0
   159e0:	str	lr, [sp, #24]
   159e4:	beq	15a68 <__assert_fail@plt+0x4d8c>
   159e8:	ldr	lr, [ip, #20]
   159ec:	cmp	lr, #0
   159f0:	str	lr, [sp, #28]
   159f4:	beq	15a70 <__assert_fail@plt+0x4d94>
   159f8:	ldr	lr, [ip, #24]
   159fc:	cmp	lr, #0
   15a00:	str	lr, [sp, #32]
   15a04:	beq	15a78 <__assert_fail@plt+0x4d9c>
   15a08:	ldr	lr, [ip, #28]
   15a0c:	cmp	lr, #0
   15a10:	str	lr, [sp, #36]	; 0x24
   15a14:	beq	15a80 <__assert_fail@plt+0x4da4>
   15a18:	ldr	lr, [ip, #32]
   15a1c:	cmp	lr, #0
   15a20:	str	lr, [sp, #40]	; 0x28
   15a24:	beq	15a88 <__assert_fail@plt+0x4dac>
   15a28:	ldr	ip, [ip, #36]	; 0x24
   15a2c:	cmp	ip, #0
   15a30:	str	ip, [sp, #44]	; 0x2c
   15a34:	movne	lr, #10
   15a38:	moveq	lr, #9
   15a3c:	add	ip, sp, #8
   15a40:	stm	sp, {ip, lr}
   15a44:	bl	15560 <__assert_fail@plt+0x4884>
   15a48:	add	sp, sp, #52	; 0x34
   15a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a50:	mov	lr, #1
   15a54:	b	15a3c <__assert_fail@plt+0x4d60>
   15a58:	mov	lr, #2
   15a5c:	b	15a3c <__assert_fail@plt+0x4d60>
   15a60:	mov	lr, #3
   15a64:	b	15a3c <__assert_fail@plt+0x4d60>
   15a68:	mov	lr, #4
   15a6c:	b	15a3c <__assert_fail@plt+0x4d60>
   15a70:	mov	lr, #5
   15a74:	b	15a3c <__assert_fail@plt+0x4d60>
   15a78:	mov	lr, #6
   15a7c:	b	15a3c <__assert_fail@plt+0x4d60>
   15a80:	mov	lr, #7
   15a84:	b	15a3c <__assert_fail@plt+0x4d60>
   15a88:	mov	lr, #8
   15a8c:	b	15a3c <__assert_fail@plt+0x4d60>
   15a90:	push	{r3}		; (str r3, [sp, #-4]!)
   15a94:	push	{lr}		; (str lr, [sp, #-4]!)
   15a98:	sub	sp, sp, #56	; 0x38
   15a9c:	ldr	ip, [sp, #64]	; 0x40
   15aa0:	add	r3, sp, #64	; 0x40
   15aa4:	str	r3, [sp, #12]
   15aa8:	cmp	ip, #0
   15aac:	str	ip, [sp, #16]
   15ab0:	beq	15b48 <__assert_fail@plt+0x4e6c>
   15ab4:	ldr	ip, [sp, #68]	; 0x44
   15ab8:	cmp	ip, #0
   15abc:	str	ip, [sp, #20]
   15ac0:	beq	15b6c <__assert_fail@plt+0x4e90>
   15ac4:	ldr	ip, [sp, #72]	; 0x48
   15ac8:	cmp	ip, #0
   15acc:	str	ip, [sp, #24]
   15ad0:	beq	15b74 <__assert_fail@plt+0x4e98>
   15ad4:	ldr	ip, [sp, #76]	; 0x4c
   15ad8:	cmp	ip, #0
   15adc:	str	ip, [sp, #28]
   15ae0:	beq	15b7c <__assert_fail@plt+0x4ea0>
   15ae4:	ldr	ip, [sp, #80]	; 0x50
   15ae8:	cmp	ip, #0
   15aec:	str	ip, [sp, #32]
   15af0:	beq	15b84 <__assert_fail@plt+0x4ea8>
   15af4:	ldr	ip, [sp, #84]	; 0x54
   15af8:	cmp	ip, #0
   15afc:	str	ip, [sp, #36]	; 0x24
   15b00:	beq	15b8c <__assert_fail@plt+0x4eb0>
   15b04:	ldr	ip, [sp, #88]	; 0x58
   15b08:	cmp	ip, #0
   15b0c:	str	ip, [sp, #40]	; 0x28
   15b10:	beq	15b94 <__assert_fail@plt+0x4eb8>
   15b14:	ldr	ip, [sp, #92]	; 0x5c
   15b18:	cmp	ip, #0
   15b1c:	str	ip, [sp, #44]	; 0x2c
   15b20:	beq	15b9c <__assert_fail@plt+0x4ec0>
   15b24:	ldr	ip, [sp, #96]	; 0x60
   15b28:	cmp	ip, #0
   15b2c:	str	ip, [sp, #48]	; 0x30
   15b30:	beq	15ba4 <__assert_fail@plt+0x4ec8>
   15b34:	ldr	r3, [sp, #100]	; 0x64
   15b38:	cmp	r3, #0
   15b3c:	str	r3, [sp, #52]	; 0x34
   15b40:	movne	ip, #10
   15b44:	moveq	ip, #9
   15b48:	ldr	r3, [sp, #60]	; 0x3c
   15b4c:	add	lr, sp, #16
   15b50:	str	lr, [sp]
   15b54:	str	ip, [sp, #4]
   15b58:	bl	15560 <__assert_fail@plt+0x4884>
   15b5c:	add	sp, sp, #56	; 0x38
   15b60:	pop	{lr}		; (ldr lr, [sp], #4)
   15b64:	add	sp, sp, #4
   15b68:	bx	lr
   15b6c:	mov	ip, #1
   15b70:	b	15b48 <__assert_fail@plt+0x4e6c>
   15b74:	mov	ip, #2
   15b78:	b	15b48 <__assert_fail@plt+0x4e6c>
   15b7c:	mov	ip, #3
   15b80:	b	15b48 <__assert_fail@plt+0x4e6c>
   15b84:	mov	ip, #4
   15b88:	b	15b48 <__assert_fail@plt+0x4e6c>
   15b8c:	mov	ip, #5
   15b90:	b	15b48 <__assert_fail@plt+0x4e6c>
   15b94:	mov	ip, #6
   15b98:	b	15b48 <__assert_fail@plt+0x4e6c>
   15b9c:	mov	ip, #7
   15ba0:	b	15b48 <__assert_fail@plt+0x4e6c>
   15ba4:	mov	ip, #8
   15ba8:	b	15b48 <__assert_fail@plt+0x4e6c>
   15bac:	movw	r3, #33052	; 0x811c
   15bb0:	movt	r3, #2
   15bb4:	str	r4, [sp, #-8]!
   15bb8:	mov	r0, #10
   15bbc:	ldr	r1, [r3]
   15bc0:	str	lr, [sp, #4]
   15bc4:	bl	10b44 <fputc_unlocked@plt>
   15bc8:	mov	r2, #5
   15bcc:	movw	r1, #29464	; 0x7318
   15bd0:	movt	r1, #1
   15bd4:	mov	r0, #0
   15bd8:	bl	10b50 <dcgettext@plt>
   15bdc:	mov	r1, r0
   15be0:	movw	r2, #29484	; 0x732c
   15be4:	movt	r2, #1
   15be8:	mov	r0, #1
   15bec:	bl	10c4c <__printf_chk@plt>
   15bf0:	mov	r2, #5
   15bf4:	movw	r1, #29508	; 0x7344
   15bf8:	movt	r1, #1
   15bfc:	mov	r0, #0
   15c00:	bl	10b50 <dcgettext@plt>
   15c04:	mov	r1, r0
   15c08:	movw	r3, #28124	; 0x6ddc
   15c0c:	movt	r3, #1
   15c10:	movw	r2, #28164	; 0x6e04
   15c14:	movt	r2, #1
   15c18:	mov	r0, #1
   15c1c:	bl	10c4c <__printf_chk@plt>
   15c20:	mov	r2, #5
   15c24:	movw	r1, #29528	; 0x7358
   15c28:	movt	r1, #1
   15c2c:	mov	r0, #0
   15c30:	bl	10b50 <dcgettext@plt>
   15c34:	mov	r1, r0
   15c38:	movw	r2, #29568	; 0x7380
   15c3c:	movt	r2, #1
   15c40:	mov	r0, #1
   15c44:	ldr	r4, [sp]
   15c48:	ldr	lr, [sp, #4]
   15c4c:	add	sp, sp, #8
   15c50:	b	10c4c <__printf_chk@plt>
   15c54:	strd	r4, [sp, #-16]!
   15c58:	mov	r4, r0
   15c5c:	mov	r5, r2
   15c60:	str	r6, [sp, #8]
   15c64:	mov	r6, r1
   15c68:	str	lr, [sp, #12]
   15c6c:	bl	1672c <__assert_fail@plt+0x5a50>
   15c70:	cmp	r0, #0
   15c74:	beq	15c88 <__assert_fail@plt+0x4fac>
   15c78:	ldrd	r4, [sp]
   15c7c:	ldr	r6, [sp, #8]
   15c80:	add	sp, sp, #12
   15c84:	pop	{pc}		; (ldr pc, [sp], #4)
   15c88:	cmp	r4, #0
   15c8c:	beq	15c9c <__assert_fail@plt+0x4fc0>
   15c90:	cmp	r6, #0
   15c94:	cmpne	r5, #0
   15c98:	beq	15c78 <__assert_fail@plt+0x4f9c>
   15c9c:	bl	16258 <__assert_fail@plt+0x557c>
   15ca0:	str	r4, [sp, #-8]!
   15ca4:	str	lr, [sp, #4]
   15ca8:	bl	16310 <__assert_fail@plt+0x5634>
   15cac:	cmp	r0, #0
   15cb0:	beq	15cc0 <__assert_fail@plt+0x4fe4>
   15cb4:	ldr	r4, [sp]
   15cb8:	add	sp, sp, #4
   15cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15cc0:	bl	16258 <__assert_fail@plt+0x557c>
   15cc4:	str	r4, [sp, #-8]!
   15cc8:	str	lr, [sp, #4]
   15ccc:	bl	16310 <__assert_fail@plt+0x5634>
   15cd0:	cmp	r0, #0
   15cd4:	beq	15ce4 <__assert_fail@plt+0x5008>
   15cd8:	ldr	r4, [sp]
   15cdc:	add	sp, sp, #4
   15ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce4:	bl	16258 <__assert_fail@plt+0x557c>
   15ce8:	str	r4, [sp, #-8]!
   15cec:	str	lr, [sp, #4]
   15cf0:	bl	16310 <__assert_fail@plt+0x5634>
   15cf4:	cmp	r0, #0
   15cf8:	beq	15d08 <__assert_fail@plt+0x502c>
   15cfc:	ldr	r4, [sp]
   15d00:	add	sp, sp, #4
   15d04:	pop	{pc}		; (ldr pc, [sp], #4)
   15d08:	bl	16258 <__assert_fail@plt+0x557c>
   15d0c:	strd	r4, [sp, #-16]!
   15d10:	mov	r5, r0
   15d14:	mov	r4, r1
   15d18:	str	r6, [sp, #8]
   15d1c:	str	lr, [sp, #12]
   15d20:	bl	1634c <__assert_fail@plt+0x5670>
   15d24:	cmp	r0, #0
   15d28:	beq	15d3c <__assert_fail@plt+0x5060>
   15d2c:	ldrd	r4, [sp]
   15d30:	ldr	r6, [sp, #8]
   15d34:	add	sp, sp, #12
   15d38:	pop	{pc}		; (ldr pc, [sp], #4)
   15d3c:	adds	r4, r4, #0
   15d40:	movne	r4, #1
   15d44:	cmp	r5, #0
   15d48:	moveq	r4, #1
   15d4c:	cmp	r4, #0
   15d50:	beq	15d2c <__assert_fail@plt+0x5050>
   15d54:	bl	16258 <__assert_fail@plt+0x557c>
   15d58:	cmp	r1, #0
   15d5c:	orreq	r1, r1, #1
   15d60:	str	r4, [sp, #-8]!
   15d64:	str	lr, [sp, #4]
   15d68:	bl	1634c <__assert_fail@plt+0x5670>
   15d6c:	cmp	r0, #0
   15d70:	beq	15d80 <__assert_fail@plt+0x50a4>
   15d74:	ldr	r4, [sp]
   15d78:	add	sp, sp, #4
   15d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d80:	bl	16258 <__assert_fail@plt+0x557c>
   15d84:	strd	r4, [sp, #-16]!
   15d88:	mov	r4, r0
   15d8c:	mov	r5, r2
   15d90:	str	r6, [sp, #8]
   15d94:	mov	r6, r1
   15d98:	str	lr, [sp, #12]
   15d9c:	bl	1672c <__assert_fail@plt+0x5a50>
   15da0:	cmp	r0, #0
   15da4:	beq	15db8 <__assert_fail@plt+0x50dc>
   15da8:	ldrd	r4, [sp]
   15dac:	ldr	r6, [sp, #8]
   15db0:	add	sp, sp, #12
   15db4:	pop	{pc}		; (ldr pc, [sp], #4)
   15db8:	cmp	r4, #0
   15dbc:	beq	15dcc <__assert_fail@plt+0x50f0>
   15dc0:	cmp	r6, #0
   15dc4:	cmpne	r5, #0
   15dc8:	beq	15da8 <__assert_fail@plt+0x50cc>
   15dcc:	bl	16258 <__assert_fail@plt+0x557c>
   15dd0:	cmp	r2, #0
   15dd4:	cmpne	r1, #0
   15dd8:	str	r4, [sp, #-8]!
   15ddc:	moveq	r2, #1
   15de0:	str	lr, [sp, #4]
   15de4:	moveq	r1, r2
   15de8:	bl	1672c <__assert_fail@plt+0x5a50>
   15dec:	cmp	r0, #0
   15df0:	beq	15e00 <__assert_fail@plt+0x5124>
   15df4:	ldr	r4, [sp]
   15df8:	add	sp, sp, #4
   15dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15e00:	bl	16258 <__assert_fail@plt+0x557c>
   15e04:	mov	r2, r1
   15e08:	mov	r1, r0
   15e0c:	str	r4, [sp, #-8]!
   15e10:	mov	r0, #0
   15e14:	str	lr, [sp, #4]
   15e18:	bl	1672c <__assert_fail@plt+0x5a50>
   15e1c:	cmp	r0, #0
   15e20:	beq	15e30 <__assert_fail@plt+0x5154>
   15e24:	ldr	r4, [sp]
   15e28:	add	sp, sp, #4
   15e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e30:	bl	16258 <__assert_fail@plt+0x557c>
   15e34:	cmp	r1, #0
   15e38:	cmpne	r0, #0
   15e3c:	str	r4, [sp, #-8]!
   15e40:	moveq	r2, #1
   15e44:	movne	r2, r1
   15e48:	str	lr, [sp, #4]
   15e4c:	movne	r1, r0
   15e50:	moveq	r1, r2
   15e54:	mov	r0, #0
   15e58:	bl	1672c <__assert_fail@plt+0x5a50>
   15e5c:	cmp	r0, #0
   15e60:	beq	15e70 <__assert_fail@plt+0x5194>
   15e64:	ldr	r4, [sp]
   15e68:	add	sp, sp, #4
   15e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e70:	bl	16258 <__assert_fail@plt+0x557c>
   15e74:	cmp	r0, #0
   15e78:	strd	r4, [sp, #-16]!
   15e7c:	mov	r5, r1
   15e80:	ldr	r4, [r1]
   15e84:	str	r6, [sp, #8]
   15e88:	str	lr, [sp, #12]
   15e8c:	beq	15ed4 <__assert_fail@plt+0x51f8>
   15e90:	lsr	r3, r4, #1
   15e94:	add	r3, r3, #1
   15e98:	adds	r4, r4, r3
   15e9c:	bcs	15ed0 <__assert_fail@plt+0x51f4>
   15ea0:	mov	r2, #1
   15ea4:	mov	r1, r4
   15ea8:	bl	1672c <__assert_fail@plt+0x5a50>
   15eac:	cmp	r0, #0
   15eb0:	beq	15ec8 <__assert_fail@plt+0x51ec>
   15eb4:	ldr	r6, [sp, #8]
   15eb8:	str	r4, [r5]
   15ebc:	ldrd	r4, [sp]
   15ec0:	add	sp, sp, #12
   15ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec8:	cmp	r4, #0
   15ecc:	beq	15eb4 <__assert_fail@plt+0x51d8>
   15ed0:	bl	16258 <__assert_fail@plt+0x557c>
   15ed4:	cmp	r4, #0
   15ed8:	mov	r2, #1
   15edc:	moveq	r4, #64	; 0x40
   15ee0:	mov	r1, r4
   15ee4:	bl	1672c <__assert_fail@plt+0x5a50>
   15ee8:	cmp	r0, #0
   15eec:	bne	15eb4 <__assert_fail@plt+0x51d8>
   15ef0:	b	15ed0 <__assert_fail@plt+0x51f4>
   15ef4:	cmp	r0, #0
   15ef8:	strd	r4, [sp, #-16]!
   15efc:	mov	r5, r1
   15f00:	ldr	r4, [r1]
   15f04:	str	r6, [sp, #8]
   15f08:	mov	r6, r2
   15f0c:	str	lr, [sp, #12]
   15f10:	beq	15f58 <__assert_fail@plt+0x527c>
   15f14:	lsr	r3, r4, #1
   15f18:	add	r3, r3, #1
   15f1c:	adds	r4, r4, r3
   15f20:	bcs	15f54 <__assert_fail@plt+0x5278>
   15f24:	mov	r1, r4
   15f28:	bl	1672c <__assert_fail@plt+0x5a50>
   15f2c:	cmp	r0, #0
   15f30:	beq	15f48 <__assert_fail@plt+0x526c>
   15f34:	ldr	r6, [sp, #8]
   15f38:	str	r4, [r5]
   15f3c:	ldrd	r4, [sp]
   15f40:	add	sp, sp, #12
   15f44:	pop	{pc}		; (ldr pc, [sp], #4)
   15f48:	cmp	r4, #0
   15f4c:	cmpne	r6, #0
   15f50:	beq	15f34 <__assert_fail@plt+0x5258>
   15f54:	bl	16258 <__assert_fail@plt+0x557c>
   15f58:	cmp	r4, #0
   15f5c:	bne	15f70 <__assert_fail@plt+0x5294>
   15f60:	mov	r4, #64	; 0x40
   15f64:	udiv	r4, r4, r2
   15f68:	cmp	r2, #64	; 0x40
   15f6c:	addhi	r4, r4, #1
   15f70:	mov	r2, r6
   15f74:	mov	r1, r4
   15f78:	mov	r0, #0
   15f7c:	bl	1672c <__assert_fail@plt+0x5a50>
   15f80:	cmp	r0, #0
   15f84:	bne	15f34 <__assert_fail@plt+0x5258>
   15f88:	b	15f54 <__assert_fail@plt+0x5278>
   15f8c:	ldr	ip, [r1]
   15f90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f94:	strd	r6, [sp, #8]
   15f98:	mov	r7, r1
   15f9c:	mov	r6, r0
   15fa0:	str	r8, [sp, #16]
   15fa4:	mvn	r8, r3
   15fa8:	lsr	r8, r8, #31
   15fac:	str	lr, [sp, #20]
   15fb0:	asr	r1, ip, #1
   15fb4:	ldr	lr, [sp, #24]
   15fb8:	adds	r4, ip, r1
   15fbc:	mvnvs	r4, #-2147483648	; 0x80000000
   15fc0:	cmp	r3, r4
   15fc4:	movge	r1, #0
   15fc8:	andlt	r1, r8, #1
   15fcc:	cmp	r1, #0
   15fd0:	movne	r4, r3
   15fd4:	smull	r0, r1, r4, lr
   15fd8:	cmp	r1, r0, asr #31
   15fdc:	bne	1608c <__assert_fail@plt+0x53b0>
   15fe0:	cmp	r0, #63	; 0x3f
   15fe4:	mov	r5, r0
   15fe8:	ble	16058 <__assert_fail@plt+0x537c>
   15fec:	cmp	r6, #0
   15ff0:	sub	r1, r4, ip
   15ff4:	streq	r6, [r7]
   15ff8:	cmp	r1, r2
   15ffc:	bge	1602c <__assert_fail@plt+0x5350>
   16000:	adds	r4, ip, r2
   16004:	bvs	16088 <__assert_fail@plt+0x53ac>
   16008:	cmp	r4, r3
   1600c:	movle	r3, #0
   16010:	andgt	r3, r8, #1
   16014:	cmp	r3, #0
   16018:	bne	16088 <__assert_fail@plt+0x53ac>
   1601c:	smull	r0, r1, r4, lr
   16020:	cmp	r1, r0, asr #31
   16024:	mov	r5, r0
   16028:	bne	16088 <__assert_fail@plt+0x53ac>
   1602c:	mov	r1, r5
   16030:	mov	r0, r6
   16034:	bl	1634c <__assert_fail@plt+0x5670>
   16038:	cmp	r0, #0
   1603c:	beq	1606c <__assert_fail@plt+0x5390>
   16040:	ldr	r8, [sp, #16]
   16044:	str	r4, [r7]
   16048:	ldrd	r4, [sp]
   1604c:	ldrd	r6, [sp, #8]
   16050:	add	sp, sp, #20
   16054:	pop	{pc}		; (ldr pc, [sp], #4)
   16058:	mov	r0, #64	; 0x40
   1605c:	sdiv	r4, r0, lr
   16060:	mls	r5, lr, r4, r0
   16064:	sub	r5, r0, r5
   16068:	b	15fec <__assert_fail@plt+0x5310>
   1606c:	adds	r5, r5, #0
   16070:	movne	r5, #1
   16074:	cmp	r6, #0
   16078:	movne	r6, r5
   1607c:	moveq	r6, #1
   16080:	cmp	r6, #0
   16084:	beq	16040 <__assert_fail@plt+0x5364>
   16088:	bl	16258 <__assert_fail@plt+0x557c>
   1608c:	mvn	r0, #-2147483648	; 0x80000000
   16090:	b	1605c <__assert_fail@plt+0x5380>
   16094:	mov	r1, #1
   16098:	str	r4, [sp, #-8]!
   1609c:	str	lr, [sp, #4]
   160a0:	bl	1629c <__assert_fail@plt+0x55c0>
   160a4:	cmp	r0, #0
   160a8:	beq	160b8 <__assert_fail@plt+0x53dc>
   160ac:	ldr	r4, [sp]
   160b0:	add	sp, sp, #4
   160b4:	pop	{pc}		; (ldr pc, [sp], #4)
   160b8:	bl	16258 <__assert_fail@plt+0x557c>
   160bc:	mov	r1, #1
   160c0:	str	r4, [sp, #-8]!
   160c4:	str	lr, [sp, #4]
   160c8:	bl	1629c <__assert_fail@plt+0x55c0>
   160cc:	cmp	r0, #0
   160d0:	beq	160e0 <__assert_fail@plt+0x5404>
   160d4:	ldr	r4, [sp]
   160d8:	add	sp, sp, #4
   160dc:	pop	{pc}		; (ldr pc, [sp], #4)
   160e0:	bl	16258 <__assert_fail@plt+0x557c>
   160e4:	str	r4, [sp, #-8]!
   160e8:	str	lr, [sp, #4]
   160ec:	bl	1629c <__assert_fail@plt+0x55c0>
   160f0:	cmp	r0, #0
   160f4:	beq	16104 <__assert_fail@plt+0x5428>
   160f8:	ldr	r4, [sp]
   160fc:	add	sp, sp, #4
   16100:	pop	{pc}		; (ldr pc, [sp], #4)
   16104:	bl	16258 <__assert_fail@plt+0x557c>
   16108:	str	r4, [sp, #-8]!
   1610c:	str	lr, [sp, #4]
   16110:	bl	1629c <__assert_fail@plt+0x55c0>
   16114:	cmp	r0, #0
   16118:	beq	16128 <__assert_fail@plt+0x544c>
   1611c:	ldr	r4, [sp]
   16120:	add	sp, sp, #4
   16124:	pop	{pc}		; (ldr pc, [sp], #4)
   16128:	bl	16258 <__assert_fail@plt+0x557c>
   1612c:	strd	r4, [sp, #-16]!
   16130:	mov	r4, r1
   16134:	str	r6, [sp, #8]
   16138:	mov	r6, r0
   1613c:	mov	r0, r1
   16140:	str	lr, [sp, #12]
   16144:	bl	16310 <__assert_fail@plt+0x5634>
   16148:	subs	r5, r0, #0
   1614c:	beq	16170 <__assert_fail@plt+0x5494>
   16150:	mov	r2, r4
   16154:	mov	r1, r6
   16158:	bl	10b20 <memcpy@plt>
   1615c:	mov	r0, r5
   16160:	ldrd	r4, [sp]
   16164:	ldr	r6, [sp, #8]
   16168:	add	sp, sp, #12
   1616c:	pop	{pc}		; (ldr pc, [sp], #4)
   16170:	bl	16258 <__assert_fail@plt+0x557c>
   16174:	strd	r4, [sp, #-16]!
   16178:	mov	r4, r1
   1617c:	str	r6, [sp, #8]
   16180:	mov	r6, r0
   16184:	mov	r0, r1
   16188:	str	lr, [sp, #12]
   1618c:	bl	16310 <__assert_fail@plt+0x5634>
   16190:	subs	r5, r0, #0
   16194:	beq	161b8 <__assert_fail@plt+0x54dc>
   16198:	mov	r2, r4
   1619c:	mov	r1, r6
   161a0:	bl	10b20 <memcpy@plt>
   161a4:	mov	r0, r5
   161a8:	ldrd	r4, [sp]
   161ac:	ldr	r6, [sp, #8]
   161b0:	add	sp, sp, #12
   161b4:	pop	{pc}		; (ldr pc, [sp], #4)
   161b8:	bl	16258 <__assert_fail@plt+0x557c>
   161bc:	strd	r4, [sp, #-16]!
   161c0:	mov	r4, r1
   161c4:	str	r6, [sp, #8]
   161c8:	mov	r6, r0
   161cc:	add	r0, r1, #1
   161d0:	str	lr, [sp, #12]
   161d4:	bl	16310 <__assert_fail@plt+0x5634>
   161d8:	subs	r5, r0, #0
   161dc:	beq	16208 <__assert_fail@plt+0x552c>
   161e0:	mov	r3, #0
   161e4:	mov	r1, r6
   161e8:	mov	r2, r4
   161ec:	strb	r3, [r5, r4]
   161f0:	bl	10b20 <memcpy@plt>
   161f4:	mov	r0, r5
   161f8:	ldrd	r4, [sp]
   161fc:	ldr	r6, [sp, #8]
   16200:	add	sp, sp, #12
   16204:	pop	{pc}		; (ldr pc, [sp], #4)
   16208:	bl	16258 <__assert_fail@plt+0x557c>
   1620c:	strd	r4, [sp, #-16]!
   16210:	str	r6, [sp, #8]
   16214:	mov	r6, r0
   16218:	str	lr, [sp, #12]
   1621c:	bl	10c1c <strlen@plt>
   16220:	add	r4, r0, #1
   16224:	mov	r0, r4
   16228:	bl	16310 <__assert_fail@plt+0x5634>
   1622c:	subs	r5, r0, #0
   16230:	beq	16254 <__assert_fail@plt+0x5578>
   16234:	mov	r2, r4
   16238:	mov	r1, r6
   1623c:	bl	10b20 <memcpy@plt>
   16240:	mov	r0, r5
   16244:	ldrd	r4, [sp]
   16248:	ldr	r6, [sp, #8]
   1624c:	add	sp, sp, #12
   16250:	pop	{pc}		; (ldr pc, [sp], #4)
   16254:	bl	16258 <__assert_fail@plt+0x557c>
   16258:	movw	r3, #32972	; 0x80cc
   1625c:	movt	r3, #2
   16260:	str	r4, [sp, #-8]!
   16264:	ldr	r4, [r3]
   16268:	mov	r2, #5
   1626c:	movw	r1, #29648	; 0x73d0
   16270:	movt	r1, #1
   16274:	mov	r0, #0
   16278:	str	lr, [sp, #4]
   1627c:	bl	10b50 <dcgettext@plt>
   16280:	mov	r3, r0
   16284:	movw	r2, #28564	; 0x6f94
   16288:	movt	r2, #1
   1628c:	mov	r1, #0
   16290:	mov	r0, r4
   16294:	bl	10bbc <error@plt>
   16298:	bl	10cd0 <abort@plt>
   1629c:	cmp	r1, #0
   162a0:	cmpne	r0, #0
   162a4:	beq	162f0 <__assert_fail@plt+0x5614>
   162a8:	strd	r4, [sp, #-16]!
   162ac:	umull	r4, r5, r0, r1
   162b0:	str	r6, [sp, #8]
   162b4:	str	lr, [sp, #12]
   162b8:	adds	r3, r5, #0
   162bc:	movne	r3, #1
   162c0:	cmp	r4, #0
   162c4:	blt	162d0 <__assert_fail@plt+0x55f4>
   162c8:	cmp	r3, #0
   162cc:	beq	162fc <__assert_fail@plt+0x5620>
   162d0:	bl	10c28 <__errno_location@plt>
   162d4:	mov	r3, #12
   162d8:	ldrd	r4, [sp]
   162dc:	ldr	r6, [sp, #8]
   162e0:	add	sp, sp, #12
   162e4:	str	r3, [r0]
   162e8:	mov	r0, #0
   162ec:	pop	{pc}		; (ldr pc, [sp], #4)
   162f0:	mov	r1, #1
   162f4:	mov	r0, r1
   162f8:	b	10ad8 <calloc@plt>
   162fc:	ldrd	r4, [sp]
   16300:	ldr	r6, [sp, #8]
   16304:	ldr	lr, [sp, #12]
   16308:	add	sp, sp, #16
   1630c:	b	10ad8 <calloc@plt>
   16310:	cmp	r0, #0
   16314:	beq	16320 <__assert_fail@plt+0x5644>
   16318:	blt	16328 <__assert_fail@plt+0x564c>
   1631c:	b	10bd4 <malloc@plt>
   16320:	mov	r0, #1
   16324:	b	10bd4 <malloc@plt>
   16328:	str	r4, [sp, #-8]!
   1632c:	str	lr, [sp, #4]
   16330:	bl	10c28 <__errno_location@plt>
   16334:	mov	r3, #12
   16338:	ldr	r4, [sp]
   1633c:	add	sp, sp, #4
   16340:	str	r3, [r0]
   16344:	mov	r0, #0
   16348:	pop	{pc}		; (ldr pc, [sp], #4)
   1634c:	cmp	r0, #0
   16350:	beq	16378 <__assert_fail@plt+0x569c>
   16354:	cmp	r1, #0
   16358:	str	r4, [sp, #-8]!
   1635c:	str	lr, [sp, #4]
   16360:	beq	16380 <__assert_fail@plt+0x56a4>
   16364:	blt	16394 <__assert_fail@plt+0x56b8>
   16368:	ldr	r4, [sp]
   1636c:	ldr	lr, [sp, #4]
   16370:	add	sp, sp, #8
   16374:	b	10b5c <realloc@plt>
   16378:	mov	r0, r1
   1637c:	b	16310 <__assert_fail@plt+0x5634>
   16380:	bl	16540 <__assert_fail@plt+0x5864>
   16384:	ldr	r4, [sp]
   16388:	add	sp, sp, #4
   1638c:	mov	r0, #0
   16390:	pop	{pc}		; (ldr pc, [sp], #4)
   16394:	bl	10c28 <__errno_location@plt>
   16398:	mov	r3, #12
   1639c:	str	r3, [r0]
   163a0:	b	16384 <__assert_fail@plt+0x56a8>
   163a4:	strd	r4, [sp, #-16]!
   163a8:	mov	r4, r0
   163ac:	str	r6, [sp, #8]
   163b0:	str	lr, [sp, #12]
   163b4:	bl	10ba4 <__fpending@plt>
   163b8:	ldr	r5, [r4]
   163bc:	mov	r6, r0
   163c0:	mov	r0, r4
   163c4:	bl	1642c <__assert_fail@plt+0x5750>
   163c8:	mov	r4, r0
   163cc:	and	r5, r5, #32
   163d0:	cmp	r5, #0
   163d4:	bne	1640c <__assert_fail@plt+0x5730>
   163d8:	cmp	r0, #0
   163dc:	beq	163f8 <__assert_fail@plt+0x571c>
   163e0:	cmp	r6, #0
   163e4:	bne	16424 <__assert_fail@plt+0x5748>
   163e8:	bl	10c28 <__errno_location@plt>
   163ec:	ldr	r4, [r0]
   163f0:	subs	r4, r4, #9
   163f4:	mvnne	r4, #0
   163f8:	mov	r0, r4
   163fc:	ldrd	r4, [sp]
   16400:	ldr	r6, [sp, #8]
   16404:	add	sp, sp, #12
   16408:	pop	{pc}		; (ldr pc, [sp], #4)
   1640c:	cmp	r0, #0
   16410:	bne	16424 <__assert_fail@plt+0x5748>
   16414:	bl	10c28 <__errno_location@plt>
   16418:	str	r4, [r0]
   1641c:	mvn	r4, #0
   16420:	b	163f8 <__assert_fail@plt+0x571c>
   16424:	mvn	r4, #0
   16428:	b	163f8 <__assert_fail@plt+0x571c>
   1642c:	strd	r4, [sp, #-12]!
   16430:	mov	r4, r0
   16434:	str	lr, [sp, #8]
   16438:	sub	sp, sp, #12
   1643c:	bl	10c58 <fileno@plt>
   16440:	cmp	r0, #0
   16444:	mov	r0, r4
   16448:	blt	164cc <__assert_fail@plt+0x57f0>
   1644c:	bl	10bec <__freading@plt>
   16450:	cmp	r0, #0
   16454:	bne	16498 <__assert_fail@plt+0x57bc>
   16458:	mov	r0, r4
   1645c:	bl	164e0 <__assert_fail@plt+0x5804>
   16460:	cmp	r0, #0
   16464:	beq	164c8 <__assert_fail@plt+0x57ec>
   16468:	bl	10c28 <__errno_location@plt>
   1646c:	mov	r5, r0
   16470:	mov	r0, r4
   16474:	ldr	r4, [r5]
   16478:	bl	10c70 <fclose@plt>
   1647c:	cmp	r4, #0
   16480:	mvnne	r0, #0
   16484:	strne	r4, [r5]
   16488:	add	sp, sp, #12
   1648c:	ldrd	r4, [sp]
   16490:	add	sp, sp, #8
   16494:	pop	{pc}		; (ldr pc, [sp], #4)
   16498:	mov	r0, r4
   1649c:	bl	10c58 <fileno@plt>
   164a0:	mov	r1, #1
   164a4:	mov	r2, #0
   164a8:	mov	r3, #0
   164ac:	str	r1, [sp]
   164b0:	bl	10b8c <lseek64@plt>
   164b4:	mvn	r3, #0
   164b8:	mvn	r2, #0
   164bc:	cmp	r1, r3
   164c0:	cmpeq	r0, r2
   164c4:	bne	16458 <__assert_fail@plt+0x577c>
   164c8:	mov	r0, r4
   164cc:	add	sp, sp, #12
   164d0:	ldrd	r4, [sp]
   164d4:	ldr	lr, [sp, #8]
   164d8:	add	sp, sp, #12
   164dc:	b	10c70 <fclose@plt>
   164e0:	str	r4, [sp, #-8]!
   164e4:	subs	r4, r0, #0
   164e8:	str	lr, [sp, #4]
   164ec:	sub	sp, sp, #8
   164f0:	beq	1650c <__assert_fail@plt+0x5830>
   164f4:	bl	10bec <__freading@plt>
   164f8:	cmp	r0, #0
   164fc:	beq	1650c <__assert_fail@plt+0x5830>
   16500:	ldr	r3, [r4]
   16504:	tst	r3, #256	; 0x100
   16508:	bne	16524 <__assert_fail@plt+0x5848>
   1650c:	mov	r0, r4
   16510:	add	sp, sp, #8
   16514:	ldr	r4, [sp]
   16518:	ldr	lr, [sp, #4]
   1651c:	add	sp, sp, #8
   16520:	b	10afc <fflush@plt>
   16524:	mov	r1, #1
   16528:	mov	r2, #0
   1652c:	mov	r3, #0
   16530:	mov	r0, r4
   16534:	str	r1, [sp]
   16538:	bl	165a0 <__assert_fail@plt+0x58c4>
   1653c:	b	1650c <__assert_fail@plt+0x5830>
   16540:	strd	r4, [sp, #-12]!
   16544:	mov	r5, r0
   16548:	str	lr, [sp, #8]
   1654c:	sub	sp, sp, #12
   16550:	bl	10c28 <__errno_location@plt>
   16554:	mov	r4, r0
   16558:	mov	r2, #0
   1655c:	ldr	r3, [r4]
   16560:	mov	r0, r5
   16564:	str	r2, [r4]
   16568:	str	r3, [sp]
   1656c:	str	r3, [sp, #4]
   16570:	bl	10b08 <free@plt>
   16574:	ldr	r3, [r4]
   16578:	add	r2, sp, #8
   1657c:	clz	r3, r3
   16580:	lsr	r3, r3, #5
   16584:	add	r3, r2, r3, lsl #2
   16588:	ldr	r3, [r3, #-8]
   1658c:	str	r3, [r4]
   16590:	add	sp, sp, #12
   16594:	ldrd	r4, [sp]
   16598:	add	sp, sp, #8
   1659c:	pop	{pc}		; (ldr pc, [sp], #4)
   165a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   165a4:	mov	r4, r0
   165a8:	ldr	ip, [r0, #4]
   165ac:	strd	r6, [sp, #8]
   165b0:	str	lr, [sp, #20]
   165b4:	ldr	lr, [r0, #8]
   165b8:	str	r8, [sp, #16]
   165bc:	sub	sp, sp, #8
   165c0:	ldr	r5, [sp, #32]
   165c4:	cmp	lr, ip
   165c8:	beq	165f0 <__assert_fail@plt+0x5914>
   165cc:	mov	r0, r4
   165d0:	str	r5, [sp, #32]
   165d4:	add	sp, sp, #8
   165d8:	ldrd	r4, [sp]
   165dc:	ldrd	r6, [sp, #8]
   165e0:	ldr	r8, [sp, #16]
   165e4:	ldr	lr, [sp, #20]
   165e8:	add	sp, sp, #24
   165ec:	b	10c7c <fseeko64@plt>
   165f0:	ldr	ip, [r0, #16]
   165f4:	ldr	lr, [r0, #20]
   165f8:	cmp	lr, ip
   165fc:	bne	165cc <__assert_fail@plt+0x58f0>
   16600:	ldr	r8, [r0, #36]	; 0x24
   16604:	cmp	r8, #0
   16608:	bne	165cc <__assert_fail@plt+0x58f0>
   1660c:	mov	r6, r2
   16610:	mov	r7, r3
   16614:	bl	10c58 <fileno@plt>
   16618:	mov	r2, r6
   1661c:	mov	r3, r7
   16620:	str	r5, [sp]
   16624:	bl	10b8c <lseek64@plt>
   16628:	mvn	r3, #0
   1662c:	mvn	r2, #0
   16630:	cmp	r1, r3
   16634:	cmpeq	r0, r2
   16638:	beq	16668 <__assert_fail@plt+0x598c>
   1663c:	ldr	r3, [r4]
   16640:	strd	r0, [r4, #80]	; 0x50
   16644:	bic	r3, r3, #16
   16648:	str	r3, [r4]
   1664c:	mov	r0, r8
   16650:	add	sp, sp, #8
   16654:	ldrd	r4, [sp]
   16658:	ldrd	r6, [sp, #8]
   1665c:	ldr	r8, [sp, #16]
   16660:	add	sp, sp, #20
   16664:	pop	{pc}		; (ldr pc, [sp], #4)
   16668:	mvn	r8, #0
   1666c:	b	1664c <__assert_fail@plt+0x5970>
   16670:	mov	r0, #14
   16674:	str	r4, [sp, #-8]!
   16678:	str	lr, [sp, #4]
   1667c:	bl	10cac <nl_langinfo@plt>
   16680:	cmp	r0, #0
   16684:	beq	166a8 <__assert_fail@plt+0x59cc>
   16688:	ldrb	r2, [r0]
   1668c:	movw	r3, #29668	; 0x73e4
   16690:	movt	r3, #1
   16694:	ldr	r4, [sp]
   16698:	add	sp, sp, #4
   1669c:	cmp	r2, #0
   166a0:	moveq	r0, r3
   166a4:	pop	{pc}		; (ldr pc, [sp], #4)
   166a8:	ldr	r4, [sp]
   166ac:	add	sp, sp, #4
   166b0:	movw	r0, #29668	; 0x73e4
   166b4:	movt	r0, #1
   166b8:	pop	{pc}		; (ldr pc, [sp], #4)
   166bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   166c0:	mov	r5, r2
   166c4:	strd	r6, [sp, #8]
   166c8:	subs	r6, r0, #0
   166cc:	mov	r7, r1
   166d0:	str	lr, [sp, #16]
   166d4:	sub	sp, sp, #12
   166d8:	addeq	r6, sp, #4
   166dc:	mov	r0, r6
   166e0:	bl	10bb0 <mbrtowc@plt>
   166e4:	cmp	r5, #0
   166e8:	cmnne	r0, #3
   166ec:	mov	r4, r0
   166f0:	bhi	1670c <__assert_fail@plt+0x5a30>
   166f4:	mov	r0, r4
   166f8:	add	sp, sp, #12
   166fc:	ldrd	r4, [sp]
   16700:	ldrd	r6, [sp, #8]
   16704:	add	sp, sp, #16
   16708:	pop	{pc}		; (ldr pc, [sp], #4)
   1670c:	mov	r0, #0
   16710:	bl	16764 <__assert_fail@plt+0x5a88>
   16714:	cmp	r0, #0
   16718:	bne	166f4 <__assert_fail@plt+0x5a18>
   1671c:	ldrb	r3, [r7]
   16720:	mov	r4, #1
   16724:	str	r3, [r6]
   16728:	b	166f4 <__assert_fail@plt+0x5a18>
   1672c:	umull	r2, r3, r1, r2
   16730:	cmp	r3, #0
   16734:	bne	16740 <__assert_fail@plt+0x5a64>
   16738:	mov	r1, r2
   1673c:	b	1634c <__assert_fail@plt+0x5670>
   16740:	str	r4, [sp, #-8]!
   16744:	str	lr, [sp, #4]
   16748:	bl	10c28 <__errno_location@plt>
   1674c:	mov	r3, #12
   16750:	ldr	r4, [sp]
   16754:	add	sp, sp, #4
   16758:	str	r3, [r0]
   1675c:	mov	r0, #0
   16760:	pop	{pc}		; (ldr pc, [sp], #4)
   16764:	push	{lr}		; (str lr, [sp, #-4]!)
   16768:	sub	sp, sp, #268	; 0x10c
   1676c:	movw	r2, #257	; 0x101
   16770:	add	r1, sp, #4
   16774:	bl	167bc <__assert_fail@plt+0x5ae0>
   16778:	cmp	r0, #0
   1677c:	movne	r0, #0
   16780:	bne	167b4 <__assert_fail@plt+0x5ad8>
   16784:	movw	r1, #29676	; 0x73ec
   16788:	movt	r1, #1
   1678c:	add	r0, sp, #4
   16790:	bl	10af0 <strcmp@plt>
   16794:	cmp	r0, #0
   16798:	beq	167b4 <__assert_fail@plt+0x5ad8>
   1679c:	add	r0, sp, #4
   167a0:	movw	r1, #29680	; 0x73f0
   167a4:	movt	r1, #1
   167a8:	bl	10af0 <strcmp@plt>
   167ac:	adds	r0, r0, #0
   167b0:	movne	r0, #1
   167b4:	add	sp, sp, #268	; 0x10c
   167b8:	pop	{pc}		; (ldr pc, [sp], #4)
   167bc:	strd	r4, [sp, #-16]!
   167c0:	mov	r5, r1
   167c4:	mov	r1, #0
   167c8:	mov	r4, r2
   167cc:	str	r6, [sp, #8]
   167d0:	str	lr, [sp, #12]
   167d4:	bl	10c94 <setlocale@plt>
   167d8:	subs	r6, r0, #0
   167dc:	beq	1685c <__assert_fail@plt+0x5b80>
   167e0:	bl	10c1c <strlen@plt>
   167e4:	cmp	r4, r0
   167e8:	bhi	16808 <__assert_fail@plt+0x5b2c>
   167ec:	cmp	r4, #0
   167f0:	moveq	r0, #34	; 0x22
   167f4:	bne	1682c <__assert_fail@plt+0x5b50>
   167f8:	ldrd	r4, [sp]
   167fc:	ldr	r6, [sp, #8]
   16800:	add	sp, sp, #12
   16804:	pop	{pc}		; (ldr pc, [sp], #4)
   16808:	add	r2, r0, #1
   1680c:	mov	r1, r6
   16810:	mov	r0, r5
   16814:	bl	10b20 <memcpy@plt>
   16818:	ldrd	r4, [sp]
   1681c:	mov	r0, #0
   16820:	ldr	r6, [sp, #8]
   16824:	add	sp, sp, #12
   16828:	pop	{pc}		; (ldr pc, [sp], #4)
   1682c:	sub	r4, r4, #1
   16830:	mov	r1, r6
   16834:	mov	r2, r4
   16838:	mov	r0, r5
   1683c:	bl	10b20 <memcpy@plt>
   16840:	mov	r3, #0
   16844:	mov	r0, #34	; 0x22
   16848:	strb	r3, [r5, r4]
   1684c:	ldrd	r4, [sp]
   16850:	ldr	r6, [sp, #8]
   16854:	add	sp, sp, #12
   16858:	pop	{pc}		; (ldr pc, [sp], #4)
   1685c:	cmp	r4, #0
   16860:	mov	r0, #22
   16864:	strbne	r6, [r5]
   16868:	ldrd	r4, [sp]
   1686c:	ldr	r6, [sp, #8]
   16870:	add	sp, sp, #12
   16874:	pop	{pc}		; (ldr pc, [sp], #4)
   16878:	mov	r1, #0
   1687c:	b	10c94 <setlocale@plt>
   16880:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16884:	mov	r7, r0
   16888:	ldr	r6, [pc, #72]	; 168d8 <__assert_fail@plt+0x5bfc>
   1688c:	ldr	r5, [pc, #72]	; 168dc <__assert_fail@plt+0x5c00>
   16890:	add	r6, pc, r6
   16894:	add	r5, pc, r5
   16898:	sub	r6, r6, r5
   1689c:	mov	r8, r1
   168a0:	mov	r9, r2
   168a4:	bl	10ab8 <calloc@plt-0x20>
   168a8:	asrs	r6, r6, #2
   168ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   168b0:	mov	r4, #0
   168b4:	add	r4, r4, #1
   168b8:	ldr	r3, [r5], #4
   168bc:	mov	r2, r9
   168c0:	mov	r1, r8
   168c4:	mov	r0, r7
   168c8:	blx	r3
   168cc:	cmp	r6, r4
   168d0:	bne	168b4 <__assert_fail@plt+0x5bd8>
   168d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   168d8:	andeq	r1, r1, ip, ror r6
   168dc:	andeq	r1, r1, r4, ror r6
   168e0:	bx	lr
   168e4:	ldr	r3, [pc, #12]	; 168f8 <__assert_fail@plt+0x5c1c>
   168e8:	mov	r1, #0
   168ec:	add	r3, pc, r3
   168f0:	ldr	r2, [r3]
   168f4:	b	10c34 <__cxa_atexit@plt>
   168f8:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

000168fc <.fini>:
   168fc:	push	{r3, lr}
   16900:	pop	{r3, pc}
