
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

00010b44 <.init>:
   10b44:	push	{r3, lr}
   10b48:	bl	10d6c <__assert_fail@plt+0x4c>
   10b4c:	pop	{r3, pc}

Disassembly of section .plt:

00010b50 <calloc@plt-0x14>:
   10b50:	push	{lr}		; (str lr, [sp, #-4]!)
   10b54:	ldr	lr, [pc, #4]	; 10b60 <calloc@plt-0x4>
   10b58:	add	lr, pc, lr
   10b5c:	ldr	pc, [lr, #8]!
   10b60:	andeq	r6, r1, r0, lsr #9

00010b64 <calloc@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #90112	; 0x16000
   10b6c:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b70 <strcmp@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #90112	; 0x16000
   10b78:	ldr	pc, [ip, #1176]!	; 0x498

00010b7c <printf@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #90112	; 0x16000
   10b84:	ldr	pc, [ip, #1168]!	; 0x490

00010b88 <fopen@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #90112	; 0x16000
   10b90:	ldr	pc, [ip, #1160]!	; 0x488

00010b94 <free@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #90112	; 0x16000
   10b9c:	ldr	pc, [ip, #1152]!	; 0x480

00010ba0 <utf8proc_get_property@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #90112	; 0x16000
   10ba8:	ldr	pc, [ip, #1144]!	; 0x478

00010bac <fgets@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #90112	; 0x16000
   10bb4:	ldr	pc, [ip, #1136]!	; 0x470

00010bb8 <utf8proc_encode_char@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #90112	; 0x16000
   10bc0:	ldr	pc, [ip, #1128]!	; 0x468

00010bc4 <strdup@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #90112	; 0x16000
   10bcc:	ldr	pc, [ip, #1120]!	; 0x460

00010bd0 <rewind@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #90112	; 0x16000
   10bd8:	ldr	pc, [ip, #1112]!	; 0x458

00010bdc <unlink@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #90112	; 0x16000
   10be4:	ldr	pc, [ip, #1104]!	; 0x450

00010be8 <utf8proc_tolower@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #90112	; 0x16000
   10bf0:	ldr	pc, [ip, #1096]!	; 0x448

00010bf4 <__xstat@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #90112	; 0x16000
   10bfc:	ldr	pc, [ip, #1088]!	; 0x440

00010c00 <fwrite@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #90112	; 0x16000
   10c08:	ldr	pc, [ip, #1080]!	; 0x438

00010c0c <fread@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #90112	; 0x16000
   10c14:	ldr	pc, [ip, #1072]!	; 0x430

00010c18 <utf8proc_iterate@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #90112	; 0x16000
   10c20:	ldr	pc, [ip, #1064]!	; 0x428

00010c24 <malloc@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #90112	; 0x16000
   10c2c:	ldr	pc, [ip, #1056]!	; 0x420

00010c30 <__libc_start_main@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #90112	; 0x16000
   10c38:	ldr	pc, [ip, #1048]!	; 0x418

00010c3c <__sysv_signal@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #90112	; 0x16000
   10c44:	ldr	pc, [ip, #1040]!	; 0x410

00010c48 <__gmon_start__@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #90112	; 0x16000
   10c50:	ldr	pc, [ip, #1032]!	; 0x408

00010c54 <getpid@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #90112	; 0x16000
   10c5c:	ldr	pc, [ip, #1024]!	; 0x400

00010c60 <exit@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #90112	; 0x16000
   10c68:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c6c <bcmp@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c78 <utf8proc_category@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c84 <strlen@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #992]!	; 0x3e0

00010c90 <fprintf@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #984]!	; 0x3d8

00010c9c <__isoc99_sscanf@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #976]!	; 0x3d0

00010ca8 <fclose@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #968]!	; 0x3c8

00010cb4 <utf8proc_NFC@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #960]!	; 0x3c0

00010cc0 <fputc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #952]!	; 0x3b8

00010ccc <sprintf@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #944]!	; 0x3b0

00010cd8 <atoi@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #936]!	; 0x3a8

00010ce4 <utf8proc_errmsg@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #928]!	; 0x3a0

00010cf0 <fputs@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #920]!	; 0x398

00010cfc <strncmp@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #912]!	; 0x390

00010d08 <abort@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #904]!	; 0x388

00010d14 <getc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #896]!	; 0x380

00010d20 <__assert_fail@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #888]!	; 0x378

Disassembly of section .text:

00010d30 <error@@Base-0x16f8>:
   10d30:	mov	fp, #0
   10d34:	mov	lr, #0
   10d38:	pop	{r1}		; (ldr r1, [sp], #4)
   10d3c:	mov	r2, sp
   10d40:	push	{r2}		; (str r2, [sp, #-4]!)
   10d44:	push	{r0}		; (str r0, [sp, #-4]!)
   10d48:	ldr	ip, [pc, #16]	; 10d60 <__assert_fail@plt+0x40>
   10d4c:	push	{ip}		; (str ip, [sp, #-4]!)
   10d50:	ldr	r0, [pc, #12]	; 10d64 <__assert_fail@plt+0x44>
   10d54:	ldr	r3, [pc, #12]	; 10d68 <__assert_fail@plt+0x48>
   10d58:	bl	10c30 <__libc_start_main@plt>
   10d5c:	bl	10d08 <abort@plt>
   10d60:	andeq	r3, r1, r4, lsr #2
   10d64:	andeq	r0, r1, r0, ror #30
   10d68:	andeq	r3, r1, r4, asr #1
   10d6c:	ldr	r3, [pc, #20]	; 10d88 <__assert_fail@plt+0x68>
   10d70:	ldr	r2, [pc, #20]	; 10d8c <__assert_fail@plt+0x6c>
   10d74:	add	r3, pc, r3
   10d78:	ldr	r2, [r3, r2]
   10d7c:	cmp	r2, #0
   10d80:	bxeq	lr
   10d84:	b	10c48 <__gmon_start__@plt>
   10d88:	andeq	r6, r1, r4, lsl #5
   10d8c:	andeq	r0, r0, r4, lsr #1
   10d90:	ldr	r0, [pc, #24]	; 10db0 <__assert_fail@plt+0x90>
   10d94:	ldr	r3, [pc, #24]	; 10db4 <__assert_fail@plt+0x94>
   10d98:	cmp	r3, r0
   10d9c:	bxeq	lr
   10da0:	ldr	r3, [pc, #16]	; 10db8 <__assert_fail@plt+0x98>
   10da4:	cmp	r3, #0
   10da8:	bxeq	lr
   10dac:	bx	r3
   10db0:	andeq	r7, r2, r4, asr #1
   10db4:	andeq	r7, r2, r4, asr #1
   10db8:	andeq	r0, r0, r0
   10dbc:	ldr	r0, [pc, #36]	; 10de8 <__assert_fail@plt+0xc8>
   10dc0:	ldr	r1, [pc, #36]	; 10dec <__assert_fail@plt+0xcc>
   10dc4:	sub	r1, r1, r0
   10dc8:	asr	r1, r1, #2
   10dcc:	add	r1, r1, r1, lsr #31
   10dd0:	asrs	r1, r1, #1
   10dd4:	bxeq	lr
   10dd8:	ldr	r3, [pc, #16]	; 10df0 <__assert_fail@plt+0xd0>
   10ddc:	cmp	r3, #0
   10de0:	bxeq	lr
   10de4:	bx	r3
   10de8:	andeq	r7, r2, r4, asr #1
   10dec:	andeq	r7, r2, r4, asr #1
   10df0:	andeq	r0, r0, r0
   10df4:	push	{r4, lr}
   10df8:	ldr	r4, [pc, #24]	; 10e18 <__assert_fail@plt+0xf8>
   10dfc:	ldrb	r3, [r4]
   10e00:	cmp	r3, #0
   10e04:	popne	{r4, pc}
   10e08:	bl	10d90 <__assert_fail@plt+0x70>
   10e0c:	mov	r3, #1
   10e10:	strb	r3, [r4]
   10e14:	pop	{r4, pc}
   10e18:	ldrdeq	r7, [r2], -r8
   10e1c:	b	10dbc <__assert_fail@plt+0x9c>
   10e20:	push	{fp, lr}
   10e24:	mov	fp, sp
   10e28:	bl	1189c <__assert_fail@plt+0xb7c>
   10e2c:	cmp	r0, #0
   10e30:	popeq	{fp, pc}
   10e34:	ldr	r1, [r0, #12]
   10e38:	ldr	r0, [r0, #16]
   10e3c:	movw	r2, #29008	; 0x7150
   10e40:	movt	r2, #2
   10e44:	ldr	r3, [r2]
   10e48:	sub	r1, r3, r1
   10e4c:	str	r1, [r2]
   10e50:	movw	r1, #46148	; 0xb444
   10e54:	movt	r1, #2
   10e58:	ldr	r2, [r1]
   10e5c:	sub	r0, r2, r0
   10e60:	str	r0, [r1]
   10e64:	pop	{fp, pc}
   10e68:	movw	r0, #46148	; 0xb444
   10e6c:	movt	r0, #2
   10e70:	ldr	r0, [r0]
   10e74:	movw	r1, #29008	; 0x7150
   10e78:	movt	r1, #2
   10e7c:	ldr	r2, [r1]
   10e80:	sub	r0, r2, r0
   10e84:	movw	r3, #28892	; 0x70dc
   10e88:	movt	r3, #2
   10e8c:	vldr	d16, [pc, #52]	; 10ec8 <__assert_fail@plt+0x1a8>
   10e90:	ldr	r1, [r3]
   10e94:	vmov	s0, r0
   10e98:	vmov	s2, r2
   10e9c:	vcvt.f64.s32	d17, s0
   10ea0:	vcvt.f64.s32	d18, s2
   10ea4:	vmul.f64	d16, d17, d16
   10ea8:	add	r0, r1, #1
   10eac:	vdiv.f64	d16, d16, d18
   10eb0:	str	r0, [r3]
   10eb4:	vmov	r2, r3, d16
   10eb8:	movw	r0, #12612	; 0x3144
   10ebc:	movt	r0, #1
   10ec0:	b	10b7c <printf@plt>
   10ec4:	nop	{0}
   10ec8:	andeq	r0, r0, r0
   10ecc:	subsmi	r0, r9, r0
   10ed0:	push	{r4, r5, r6, r7, fp, lr}
   10ed4:	add	fp, sp, #16
   10ed8:	movw	r5, #29044	; 0x7174
   10edc:	movt	r5, #2
   10ee0:	ldm	r5, {r0, r1}
   10ee4:	movw	r6, #29008	; 0x7150
   10ee8:	movt	r6, #2
   10eec:	str	r0, [r6]
   10ef0:	movw	r2, #46148	; 0xb444
   10ef4:	movt	r2, #2
   10ef8:	str	r1, [r2]
   10efc:	cmp	r0, #0
   10f00:	beq	10f5c <__assert_fail@plt+0x23c>
   10f04:	bl	10e68 <__assert_fail@plt+0x148>
   10f08:	movw	r0, #29028	; 0x7164
   10f0c:	movt	r0, #2
   10f10:	ldr	r7, [r0]
   10f14:	cmp	r7, #0
   10f18:	beq	10f5c <__assert_fail@plt+0x23c>
   10f1c:	add	r4, r5, #992	; 0x3e0
   10f20:	movw	r0, #9048	; 0x2358
   10f24:	add	r5, r5, r0
   10f28:	ldr	r1, [r7, #8]
   10f2c:	mov	r0, r4
   10f30:	bl	10e20 <__assert_fail@plt+0x100>
   10f34:	ldr	r1, [r7, #8]
   10f38:	mov	r0, r5
   10f3c:	bl	10e20 <__assert_fail@plt+0x100>
   10f40:	ldr	r0, [r6]
   10f44:	cmp	r0, #0
   10f48:	beq	10f5c <__assert_fail@plt+0x23c>
   10f4c:	bl	10e68 <__assert_fail@plt+0x148>
   10f50:	ldr	r7, [r7, #4]
   10f54:	cmp	r7, #0
   10f58:	bne	10f28 <__assert_fail@plt+0x208>
   10f5c:	pop	{r4, r5, r6, r7, fp, pc}
   10f60:	push	{fp, lr}
   10f64:	mov	fp, sp
   10f68:	sub	sp, sp, #8
   10f6c:	mov	r4, r1
   10f70:	str	r0, [sp, #4]
   10f74:	add	r0, sp, #4
   10f78:	movw	r2, #12624	; 0x3150
   10f7c:	movt	r2, #1
   10f80:	mov	r3, #0
   10f84:	bl	122a4 <__assert_fail@plt+0x1584>
   10f88:	ldr	r0, [sp, #4]
   10f8c:	cmp	r0, #2
   10f90:	bne	10fd8 <__assert_fail@plt+0x2b8>
   10f94:	ldr	r1, [r4]
   10f98:	movw	r5, #29012	; 0x7154
   10f9c:	movt	r5, #2
   10fa0:	movw	r2, #28848	; 0x70b0
   10fa4:	movt	r2, #2
   10fa8:	mov	r0, r5
   10fac:	bl	12714 <error@@Base+0x2ec>
   10fb0:	movw	r0, #29028	; 0x7164
   10fb4:	movt	r0, #2
   10fb8:	mov	r1, r5
   10fbc:	bl	11ab8 <__assert_fail@plt+0xd98>
   10fc0:	ldr	r1, [r4, #4]
   10fc4:	movw	r0, #29044	; 0x7174
   10fc8:	movt	r0, #2
   10fcc:	bl	11060 <__assert_fail@plt+0x340>
   10fd0:	bl	10ed0 <__assert_fail@plt+0x1b0>
   10fd4:	bl	123e8 <__assert_fail@plt+0x16c8>
   10fd8:	movw	r0, #12660	; 0x3174
   10fdc:	movt	r0, #1
   10fe0:	bl	12428 <error@@Base>
   10fe4:	andeq	r0, r0, r0
   10fe8:	ldm	r0, {r3, ip}
   10fec:	add	r1, r3, r1
   10ff0:	add	r2, ip, r2
   10ff4:	stm	r0, {r1, r2}
   10ff8:	bx	lr
   10ffc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11000:	add	fp, sp, #24
   11004:	mov	r8, r3
   11008:	mov	r5, r2
   1100c:	mov	r7, r1
   11010:	mov	r6, r0
   11014:	bl	1189c <__assert_fail@plt+0xb7c>
   11018:	mov	r4, r0
   1101c:	cmp	r0, #0
   11020:	bne	1104c <__assert_fail@plt+0x32c>
   11024:	mov	r0, #1
   11028:	mov	r1, #20
   1102c:	bl	12074 <__assert_fail@plt+0x1354>
   11030:	mov	r4, r0
   11034:	mov	r0, r7
   11038:	bl	10bc4 <strdup@plt>
   1103c:	str	r0, [r4, #8]
   11040:	mov	r0, r6
   11044:	mov	r1, r4
   11048:	bl	11944 <__assert_fail@plt+0xc24>
   1104c:	add	r0, r4, #12
   11050:	mov	r1, r5
   11054:	mov	r2, r8
   11058:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1105c:	b	10fe8 <__assert_fail@plt+0x2c8>
   11060:	push	{r4, r5, r6, r7, fp, lr}
   11064:	add	fp, sp, #16
   11068:	sub	sp, sp, #8
   1106c:	mov	r6, r1
   11070:	mov	r5, r0
   11074:	movw	r1, #26545	; 0x67b1
   11078:	movt	r1, #1
   1107c:	mov	r0, r6
   11080:	bl	12118 <__assert_fail@plt+0x13f8>
   11084:	mov	r4, r0
   11088:	bl	111d0 <__assert_fail@plt+0x4b0>
   1108c:	cmp	r0, #0
   11090:	beq	111b4 <__assert_fail@plt+0x494>
   11094:	movw	r0, #28896	; 0x70e0
   11098:	movt	r0, #2
   1109c:	movw	r1, #12684	; 0x318c
   110a0:	movt	r1, #1
   110a4:	mov	r2, #45	; 0x2d
   110a8:	bl	10c6c <bcmp@plt>
   110ac:	cmp	r0, #0
   110b0:	bne	111b4 <__assert_fail@plt+0x494>
   110b4:	mov	r0, r4
   110b8:	bl	111d0 <__assert_fail@plt+0x4b0>
   110bc:	cmp	r0, #0
   110c0:	beq	111b4 <__assert_fail@plt+0x494>
   110c4:	movw	r0, #28896	; 0x70e0
   110c8:	movt	r0, #2
   110cc:	movw	r1, #26475	; 0x676b
   110d0:	movt	r1, #1
   110d4:	mov	r2, #48	; 0x30
   110d8:	bl	10c6c <bcmp@plt>
   110dc:	cmp	r0, #0
   110e0:	bne	111b4 <__assert_fail@plt+0x494>
   110e4:	add	r1, sp, #4
   110e8:	mov	r0, r4
   110ec:	bl	111f8 <__assert_fail@plt+0x4d8>
   110f0:	cmp	r0, #0
   110f4:	beq	111b4 <__assert_fail@plt+0x494>
   110f8:	mov	r1, sp
   110fc:	mov	r0, r4
   11100:	bl	111f8 <__assert_fail@plt+0x4d8>
   11104:	cmp	r0, #0
   11108:	beq	111b4 <__assert_fail@plt+0x494>
   1110c:	mov	r0, r4
   11110:	bl	111d0 <__assert_fail@plt+0x4b0>
   11114:	cmp	r0, #0
   11118:	beq	111b4 <__assert_fail@plt+0x494>
   1111c:	mov	r0, r4
   11120:	bl	111d0 <__assert_fail@plt+0x4b0>
   11124:	cmp	r0, #0
   11128:	beq	111b4 <__assert_fail@plt+0x494>
   1112c:	ldr	r2, [sp]
   11130:	ldr	r1, [sp, #4]
   11134:	mov	r0, r5
   11138:	bl	10fe8 <__assert_fail@plt+0x2c8>
   1113c:	add	r1, r5, #8
   11140:	mov	r0, r4
   11144:	bl	11240 <__assert_fail@plt+0x520>
   11148:	mov	r7, r0
   1114c:	add	r1, r5, #416	; 0x1a0
   11150:	mov	r0, r4
   11154:	bl	11240 <__assert_fail@plt+0x520>
   11158:	mov	r6, r0
   1115c:	add	r1, r5, #824	; 0x338
   11160:	mov	r0, r4
   11164:	bl	11240 <__assert_fail@plt+0x520>
   11168:	ldr	r0, [sp, #4]
   1116c:	cmp	r0, #1
   11170:	blt	111a4 <__assert_fail@plt+0x484>
   11174:	add	r1, r5, #920	; 0x398
   11178:	mov	r0, r4
   1117c:	bl	11240 <__assert_fail@plt+0x520>
   11180:	cmp	r7, #1
   11184:	addge	r1, r5, #992	; 0x3e0
   11188:	movge	r0, r4
   1118c:	blge	11318 <__assert_fail@plt+0x5f8>
   11190:	cmp	r6, #1
   11194:	movwge	r0, #9048	; 0x2358
   11198:	addge	r1, r5, r0
   1119c:	movge	r0, r4
   111a0:	blge	11318 <__assert_fail@plt+0x5f8>
   111a4:	mov	r0, r4
   111a8:	bl	12190 <__assert_fail@plt+0x1470>
   111ac:	sub	sp, fp, #16
   111b0:	pop	{r4, r5, r6, r7, fp, pc}
   111b4:	movw	r1, #12750	; 0x31ce
   111b8:	movt	r1, #1
   111bc:	cmp	r6, #0
   111c0:	movne	r1, r6
   111c4:	movw	r0, #12732	; 0x31bc
   111c8:	movt	r0, #1
   111cc:	bl	12468 <error@@Base+0x40>
   111d0:	push	{fp, lr}
   111d4:	mov	fp, sp
   111d8:	mov	r2, r0
   111dc:	movw	r0, #28896	; 0x70e0
   111e0:	movt	r0, #2
   111e4:	mov	r1, #99	; 0x63
   111e8:	bl	10bac <fgets@plt>
   111ec:	cmp	r0, #0
   111f0:	movwne	r0, #1
   111f4:	pop	{fp, pc}
   111f8:	push	{r4, sl, fp, lr}
   111fc:	add	fp, sp, #8
   11200:	mov	r4, r1
   11204:	bl	111d0 <__assert_fail@plt+0x4b0>
   11208:	cmp	r0, #0
   1120c:	beq	11238 <__assert_fail@plt+0x518>
   11210:	movw	r0, #28896	; 0x70e0
   11214:	movt	r0, #2
   11218:	movw	r1, #12865	; 0x3241
   1121c:	movt	r1, #1
   11220:	mov	r2, r4
   11224:	bl	10c9c <__isoc99_sscanf@plt>
   11228:	sub	r0, r0, #1
   1122c:	clz	r0, r0
   11230:	lsr	r0, r0, #5
   11234:	pop	{r4, sl, fp, pc}
   11238:	mov	r0, #0
   1123c:	pop	{r4, sl, fp, pc}
   11240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11244:	add	fp, sp, #28
   11248:	sub	sp, sp, #12
   1124c:	mov	r4, r1
   11250:	mov	r6, r0
   11254:	bl	111d0 <__assert_fail@plt+0x4b0>
   11258:	mov	r5, #0
   1125c:	cmp	r0, #0
   11260:	beq	1130c <__assert_fail@plt+0x5ec>
   11264:	mov	r0, r6
   11268:	bl	111d0 <__assert_fail@plt+0x4b0>
   1126c:	cmp	r0, #0
   11270:	beq	1130c <__assert_fail@plt+0x5ec>
   11274:	add	r1, sp, #8
   11278:	add	r2, sp, #4
   1127c:	mov	r0, r6
   11280:	bl	11794 <__assert_fail@plt+0xa74>
   11284:	cmp	r0, #0
   11288:	beq	1130c <__assert_fail@plt+0x5ec>
   1128c:	mov	r5, #0
   11290:	movw	r0, #28896	; 0x70e0
   11294:	movt	r0, #2
   11298:	add	r7, r0, #29
   1129c:	movw	r8, #12853	; 0x3235
   112a0:	movt	r8, #1
   112a4:	add	r9, sp, #8
   112a8:	add	sl, sp, #4
   112ac:	b	112d8 <__assert_fail@plt+0x5b8>
   112b0:	add	r0, r4, r0, lsl #3
   112b4:	ldr	r2, [sp, #4]
   112b8:	ldr	r1, [sp, #8]
   112bc:	bl	10fe8 <__assert_fail@plt+0x2c8>
   112c0:	mov	r0, r6
   112c4:	mov	r1, r9
   112c8:	mov	r2, sl
   112cc:	bl	11794 <__assert_fail@plt+0xa74>
   112d0:	cmp	r0, #0
   112d4:	beq	1130c <__assert_fail@plt+0x5ec>
   112d8:	mov	r0, r7
   112dc:	bl	10cd8 <atoi@plt>
   112e0:	cmp	r0, #0
   112e4:	bne	112b0 <__assert_fail@plt+0x590>
   112e8:	mov	r0, r7
   112ec:	mov	r1, r8
   112f0:	mov	r2, #8
   112f4:	bl	10c6c <bcmp@plt>
   112f8:	ldr	r1, [sp, #8]
   112fc:	cmp	r0, #0
   11300:	moveq	r5, r1
   11304:	movwne	r0, #11
   11308:	b	112b0 <__assert_fail@plt+0x590>
   1130c:	mov	r0, r5
   11310:	sub	sp, fp, #28
   11314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1131c:	add	fp, sp, #28
   11320:	sub	sp, sp, #12
   11324:	mov	r4, r1
   11328:	mov	r5, r0
   1132c:	bl	111d0 <__assert_fail@plt+0x4b0>
   11330:	cmp	r0, #0
   11334:	beq	113b4 <__assert_fail@plt+0x694>
   11338:	mov	r0, r5
   1133c:	bl	111d0 <__assert_fail@plt+0x4b0>
   11340:	cmp	r0, #0
   11344:	beq	113b4 <__assert_fail@plt+0x694>
   11348:	add	r1, sp, #8
   1134c:	add	r2, sp, #4
   11350:	mov	r0, r5
   11354:	bl	11794 <__assert_fail@plt+0xa74>
   11358:	cmp	r0, #0
   1135c:	beq	113b4 <__assert_fail@plt+0x694>
   11360:	movw	r6, #28896	; 0x70e0
   11364:	movt	r6, #2
   11368:	mov	sl, #0
   1136c:	add	r7, r6, #29
   11370:	add	r8, sp, #8
   11374:	add	r9, sp, #4
   11378:	mov	r0, r6
   1137c:	bl	10c84 <strlen@plt>
   11380:	add	r0, r0, r6
   11384:	strb	sl, [r0, #-1]
   11388:	ldr	r2, [sp, #8]
   1138c:	ldr	r3, [sp, #4]
   11390:	mov	r0, r4
   11394:	mov	r1, r7
   11398:	bl	10ffc <__assert_fail@plt+0x2dc>
   1139c:	mov	r0, r5
   113a0:	mov	r1, r8
   113a4:	mov	r2, r9
   113a8:	bl	11794 <__assert_fail@plt+0xa74>
   113ac:	cmp	r0, #0
   113b0:	bne	11378 <__assert_fail@plt+0x658>
   113b4:	sub	sp, fp, #28
   113b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   113c0:	add	fp, sp, #24
   113c4:	sub	sp, sp, #8
   113c8:	mov	r2, r1
   113cc:	mov	r5, r0
   113d0:	movw	r1, #12756	; 0x31d4
   113d4:	movt	r1, #1
   113d8:	mov	r0, r2
   113dc:	bl	12118 <__assert_fail@plt+0x13f8>
   113e0:	mov	r4, r0
   113e4:	movw	r1, #12758	; 0x31d6
   113e8:	movt	r1, #1
   113ec:	movw	r2, #12684	; 0x318c
   113f0:	movt	r2, #1
   113f4:	movw	r3, #26475	; 0x676b
   113f8:	movt	r3, #1
   113fc:	bl	10c90 <fprintf@plt>
   11400:	ldr	r2, [r5]
   11404:	movw	r1, #12763	; 0x31db
   11408:	movt	r1, #1
   1140c:	mov	r0, r4
   11410:	bl	10c90 <fprintf@plt>
   11414:	ldr	r2, [r5, #4]
   11418:	movw	r1, #12777	; 0x31e9
   1141c:	movt	r1, #1
   11420:	mov	r0, r4
   11424:	bl	10c90 <fprintf@plt>
   11428:	mov	r0, r4
   1142c:	mov	r1, r5
   11430:	bl	11538 <__assert_fail@plt+0x818>
   11434:	movw	r0, #12799	; 0x31ff
   11438:	movt	r0, #1
   1143c:	mov	r7, #1
   11440:	mov	r1, #12
   11444:	mov	r2, #1
   11448:	mov	r3, r4
   1144c:	bl	10c00 <fwrite@plt>
   11450:	mov	r8, #0
   11454:	str	r8, [sp]
   11458:	str	r7, [sp, #4]
   1145c:	add	r1, r5, #8
   11460:	movw	r3, #12812	; 0x320c
   11464:	movt	r3, #1
   11468:	mov	r0, r4
   1146c:	mov	r2, #50	; 0x32
   11470:	bl	115a0 <__assert_fail@plt+0x880>
   11474:	str	r8, [sp]
   11478:	str	r7, [sp, #4]
   1147c:	add	r6, r5, #416	; 0x1a0
   11480:	movw	r3, #12831	; 0x321f
   11484:	movt	r3, #1
   11488:	mov	r0, r4
   1148c:	mov	r1, r6
   11490:	mov	r2, #50	; 0x32
   11494:	bl	115a0 <__assert_fail@plt+0x880>
   11498:	str	r7, [sp]
   1149c:	str	r7, [sp, #4]
   114a0:	add	r1, r5, #824	; 0x338
   114a4:	movw	r3, #12822	; 0x3216
   114a8:	movt	r3, #1
   114ac:	mov	r0, r4
   114b0:	mov	r2, #10
   114b4:	bl	115a0 <__assert_fail@plt+0x880>
   114b8:	ldr	r0, [r5]
   114bc:	cmp	r0, #1
   114c0:	blt	11528 <__assert_fail@plt+0x808>
   114c4:	str	r8, [sp]
   114c8:	str	r8, [sp, #4]
   114cc:	add	r1, r5, #920	; 0x398
   114d0:	movw	r3, #12845	; 0x322d
   114d4:	movt	r3, #1
   114d8:	mov	r0, r4
   114dc:	mov	r2, #8
   114e0:	bl	115a0 <__assert_fail@plt+0x880>
   114e4:	ldr	r0, [r5, #8]
   114e8:	cmp	r0, #1
   114ec:	blt	11504 <__assert_fail@plt+0x7e4>
   114f0:	add	r1, r5, #992	; 0x3e0
   114f4:	movw	r2, #12812	; 0x320c
   114f8:	movt	r2, #1
   114fc:	mov	r0, r4
   11500:	bl	116dc <__assert_fail@plt+0x9bc>
   11504:	ldr	r0, [r6]
   11508:	cmp	r0, #1
   1150c:	blt	11528 <__assert_fail@plt+0x808>
   11510:	movw	r0, #9048	; 0x2358
   11514:	add	r1, r5, r0
   11518:	movw	r2, #12831	; 0x321f
   1151c:	movt	r2, #1
   11520:	mov	r0, r4
   11524:	bl	116dc <__assert_fail@plt+0x9bc>
   11528:	mov	r0, r4
   1152c:	sub	sp, fp, #24
   11530:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11534:	b	12190 <__assert_fail@plt+0x1470>
   11538:	mov	ip, r0
   1153c:	ldr	r0, [r1]
   11540:	cmp	r0, #0
   11544:	beq	11580 <__assert_fail@plt+0x860>
   11548:	ldr	r1, [r1, #4]
   1154c:	sub	r1, r0, r1
   11550:	vldr	d16, [pc, #64]	; 11598 <__assert_fail@plt+0x878>
   11554:	vmov	s0, r1
   11558:	vmov	s2, r0
   1155c:	vcvt.f64.s32	d17, s0
   11560:	vcvt.f64.s32	d18, s2
   11564:	vmul.f64	d16, d17, d16
   11568:	vdiv.f64	d16, d16, d18
   1156c:	vmov	r2, r3, d16
   11570:	movw	r1, #12878	; 0x324e
   11574:	movt	r1, #1
   11578:	mov	r0, ip
   1157c:	b	10c90 <fprintf@plt>
   11580:	movw	r0, #12869	; 0x3245
   11584:	movt	r0, #1
   11588:	mov	r1, #8
   1158c:	mov	r2, #1
   11590:	mov	r3, ip
   11594:	b	10c00 <fwrite@plt>
   11598:	andeq	r0, r0, r0
   1159c:	subsmi	r0, r9, r0
   115a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115a4:	add	fp, sp, #28
   115a8:	sub	sp, sp, #4
   115ac:	mov	r7, r2
   115b0:	mov	r5, r1
   115b4:	mov	r4, r0
   115b8:	movw	r1, #12884	; 0x3254
   115bc:	movt	r1, #1
   115c0:	mov	r2, r3
   115c4:	bl	10c90 <fprintf@plt>
   115c8:	mov	r0, r4
   115cc:	mov	r1, #0
   115d0:	bl	117e4 <__assert_fail@plt+0xac4>
   115d4:	ldrb	sl, [fp, #8]
   115d8:	movw	r0, #12889	; 0x3259
   115dc:	movt	r0, #1
   115e0:	movw	r2, #12896	; 0x3260
   115e4:	movt	r2, #1
   115e8:	cmp	sl, #0
   115ec:	movne	r2, r0
   115f0:	movw	r1, #12885	; 0x3255
   115f4:	movt	r1, #1
   115f8:	mov	r0, r4
   115fc:	bl	10c90 <fprintf@plt>
   11600:	sxth	r6, r7
   11604:	lsl	r0, r7, #16
   11608:	ldr	r1, [fp, #12]
   1160c:	str	r1, [sp]
   11610:	cmp	r0, #65536	; 0x10000
   11614:	blt	11668 <__assert_fail@plt+0x948>
   11618:	mov	r7, #1
   1161c:	movw	r8, #12903	; 0x3267
   11620:	movt	r8, #1
   11624:	mov	r9, #1
   11628:	b	1163c <__assert_fail@plt+0x91c>
   1162c:	add	r9, r9, #1
   11630:	sxth	r7, r9
   11634:	cmp	r6, r7
   11638:	blt	11668 <__assert_fail@plt+0x948>
   1163c:	mov	r1, r5
   11640:	ldr	r0, [r1, r7, lsl #3]!
   11644:	cmp	r0, #1
   11648:	blt	1162c <__assert_fail@plt+0x90c>
   1164c:	mov	r0, r4
   11650:	bl	117e4 <__assert_fail@plt+0xac4>
   11654:	mov	r0, r4
   11658:	mov	r1, r8
   1165c:	mov	r2, r7
   11660:	bl	10c90 <fprintf@plt>
   11664:	b	1162c <__assert_fail@plt+0x90c>
   11668:	cmp	sl, #0
   1166c:	beq	1169c <__assert_fail@plt+0x97c>
   11670:	add	r1, r5, r6, lsl #3
   11674:	ldr	r0, [r1, #8]!
   11678:	cmp	r0, #1
   1167c:	blt	1169c <__assert_fail@plt+0x97c>
   11680:	mov	r0, r4
   11684:	bl	117e4 <__assert_fail@plt+0xac4>
   11688:	movw	r1, #12912	; 0x3270
   1168c:	movt	r1, #1
   11690:	mov	r0, r4
   11694:	mov	r2, r6
   11698:	bl	10c90 <fprintf@plt>
   1169c:	ldr	r0, [sp]
   116a0:	tst	r0, #255	; 0xff
   116a4:	beq	116d4 <__assert_fail@plt+0x9b4>
   116a8:	mov	r0, r4
   116ac:	mov	r1, r5
   116b0:	bl	117e4 <__assert_fail@plt+0xac4>
   116b4:	movw	r0, #12853	; 0x3235
   116b8:	movt	r0, #1
   116bc:	mov	r1, #7
   116c0:	mov	r2, #1
   116c4:	mov	r3, r4
   116c8:	sub	sp, fp, #28
   116cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116d0:	b	10c00 <fwrite@plt>
   116d4:	sub	sp, fp, #28
   116d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116dc:	push	{r4, r5, r6, r7, fp, lr}
   116e0:	add	fp, sp, #16
   116e4:	mov	r6, r2
   116e8:	mov	r4, r1
   116ec:	mov	r5, r0
   116f0:	mov	r0, r1
   116f4:	bl	119f0 <__assert_fail@plt+0xcd0>
   116f8:	movw	r0, #8048	; 0x1f70
   116fc:	ldr	r1, [r4, r0]!
   11700:	ldr	r0, [r4, #4]
   11704:	movw	r2, #6228	; 0x1854
   11708:	movt	r2, #1
   1170c:	bl	12f7c <error@@Base+0xb54>
   11710:	movw	r1, #12884	; 0x3254
   11714:	movt	r1, #1
   11718:	mov	r0, r5
   1171c:	mov	r2, r6
   11720:	bl	10c90 <fprintf@plt>
   11724:	mov	r7, #0
   11728:	mov	r0, r5
   1172c:	mov	r1, #0
   11730:	bl	117e4 <__assert_fail@plt+0xac4>
   11734:	mov	r0, #10
   11738:	mov	r1, r5
   1173c:	bl	10cc0 <fputc@plt>
   11740:	ldr	r0, [r4, #4]
   11744:	cmp	r0, #1
   11748:	blt	11790 <__assert_fail@plt+0xa70>
   1174c:	movw	r6, #12885	; 0x3255
   11750:	movt	r6, #1
   11754:	ldr	r0, [r4]
   11758:	ldr	r0, [r0, r7, lsl #2]
   1175c:	add	r1, r0, #12
   11760:	mov	r0, r5
   11764:	bl	117e4 <__assert_fail@plt+0xac4>
   11768:	ldr	r0, [r4]
   1176c:	ldr	r0, [r0, r7, lsl #2]
   11770:	ldr	r2, [r0, #8]
   11774:	mov	r0, r5
   11778:	mov	r1, r6
   1177c:	bl	10c90 <fprintf@plt>
   11780:	add	r7, r7, #1
   11784:	ldr	r0, [r4, #4]
   11788:	cmp	r7, r0
   1178c:	blt	11754 <__assert_fail@plt+0xa34>
   11790:	pop	{r4, r5, r6, r7, fp, pc}
   11794:	push	{r4, r5, fp, lr}
   11798:	add	fp, sp, #8
   1179c:	mov	r4, r2
   117a0:	mov	r5, r1
   117a4:	bl	111d0 <__assert_fail@plt+0x4b0>
   117a8:	cmp	r0, #0
   117ac:	beq	117dc <__assert_fail@plt+0xabc>
   117b0:	movw	r0, #28896	; 0x70e0
   117b4:	movt	r0, #2
   117b8:	movw	r1, #12861	; 0x323d
   117bc:	movt	r1, #1
   117c0:	mov	r2, r5
   117c4:	mov	r3, r4
   117c8:	bl	10c9c <__isoc99_sscanf@plt>
   117cc:	sub	r0, r0, #2
   117d0:	clz	r0, r0
   117d4:	lsr	r0, r0, #5
   117d8:	pop	{r4, r5, fp, pc}
   117dc:	mov	r0, #0
   117e0:	pop	{r4, r5, fp, pc}
   117e4:	push	{r4, r5, fp, lr}
   117e8:	add	fp, sp, #8
   117ec:	mov	r4, r0
   117f0:	cmp	r1, #0
   117f4:	beq	11820 <__assert_fail@plt+0xb00>
   117f8:	mov	r5, r1
   117fc:	ldm	r1, {r2, r3}
   11800:	movw	r1, #12921	; 0x3279
   11804:	movt	r1, #1
   11808:	mov	r0, r4
   1180c:	bl	10c90 <fprintf@plt>
   11810:	mov	r0, r4
   11814:	mov	r1, r5
   11818:	bl	11538 <__assert_fail@plt+0x818>
   1181c:	b	11838 <__assert_fail@plt+0xb18>
   11820:	movw	r0, #12932	; 0x3284
   11824:	movt	r0, #1
   11828:	mov	r1, #26
   1182c:	mov	r2, #1
   11830:	mov	r3, r4
   11834:	bl	10c00 <fwrite@plt>
   11838:	movw	r0, #12959	; 0x329f
   1183c:	movt	r0, #1
   11840:	mov	r1, #3
   11844:	mov	r2, #1
   11848:	mov	r3, r4
   1184c:	pop	{r4, r5, fp, lr}
   11850:	b	10c00 <fwrite@plt>
   11854:	ldr	r1, [r1, #8]
   11858:	ldr	r0, [r0, #8]
   1185c:	b	12094 <__assert_fail@plt+0x1374>
   11860:	push	{r4, r5, r6, sl, fp, lr}
   11864:	add	fp, sp, #16
   11868:	mov	r4, r0
   1186c:	movw	r0, #8048	; 0x1f70
   11870:	add	r5, r4, r0
   11874:	movw	r6, #503	; 0x1f7
   11878:	mov	r0, r4
   1187c:	bl	12de0 <error@@Base+0x9b8>
   11880:	subs	r6, r6, #1
   11884:	add	r4, r4, #16
   11888:	bne	11878 <__assert_fail@plt+0xb58>
   1188c:	mov	r0, #0
   11890:	str	r0, [r5]
   11894:	str	r0, [r5, #4]
   11898:	pop	{r4, r5, r6, sl, fp, pc}
   1189c:	push	{r4, r5, r6, sl, fp, lr}
   118a0:	add	fp, sp, #16
   118a4:	mov	r5, r1
   118a8:	mov	r4, r0
   118ac:	mov	r0, r1
   118b0:	bl	118f8 <__assert_fail@plt+0xbd8>
   118b4:	ldr	r6, [r4, r0, lsl #4]
   118b8:	mov	r4, #0
   118bc:	cmp	r6, #0
   118c0:	beq	118e4 <__assert_fail@plt+0xbc4>
   118c4:	ldr	r1, [r6, #8]
   118c8:	mov	r0, r5
   118cc:	bl	10b70 <strcmp@plt>
   118d0:	cmp	r0, #0
   118d4:	beq	118ec <__assert_fail@plt+0xbcc>
   118d8:	ldr	r6, [r6, #4]
   118dc:	cmp	r6, #0
   118e0:	bne	118c4 <__assert_fail@plt+0xba4>
   118e4:	mov	r0, r4
   118e8:	pop	{r4, r5, r6, sl, fp, pc}
   118ec:	mov	r4, r6
   118f0:	mov	r0, r4
   118f4:	pop	{r4, r5, r6, sl, fp, pc}
   118f8:	ldrb	r1, [r0]
   118fc:	cmp	r1, #0
   11900:	moveq	r0, #0
   11904:	sxtheq	r0, r0
   11908:	bxeq	lr
   1190c:	add	r2, r0, #1
   11910:	mov	r0, #0
   11914:	uxtab	r0, r0, r1
   11918:	ldrb	r1, [r2], #1
   1191c:	cmp	r1, #0
   11920:	bne	11914 <__assert_fail@plt+0xbf4>
   11924:	movw	r1, #20065	; 0x4e61
   11928:	movt	r1, #33354	; 0x824a
   1192c:	umull	r1, r2, r0, r1
   11930:	lsr	r1, r2, #8
   11934:	movw	r2, #503	; 0x1f7
   11938:	mls	r0, r1, r2, r0
   1193c:	sxth	r0, r0
   11940:	bx	lr
   11944:	push	{r4, r5, fp, lr}
   11948:	add	fp, sp, #8
   1194c:	mov	r4, r1
   11950:	mov	r5, r0
   11954:	ldr	r0, [r1, #8]
   11958:	bl	118f8 <__assert_fail@plt+0xbd8>
   1195c:	add	r0, r5, r0, lsl #4
   11960:	mov	r1, r4
   11964:	bl	12dec <error@@Base+0x9c4>
   11968:	mov	r0, r5
   1196c:	bl	11984 <__assert_fail@plt+0xc64>
   11970:	movw	r0, #8052	; 0x1f74
   11974:	ldr	r0, [r5, r0]!
   11978:	add	r0, r0, #1
   1197c:	str	r0, [r5]
   11980:	pop	{r4, r5, fp, pc}
   11984:	push	{r4, sl, fp, lr}
   11988:	add	fp, sp, #8
   1198c:	mov	r4, r0
   11990:	movw	r0, #8048	; 0x1f70
   11994:	ldr	r0, [r4, r0]!
   11998:	cmp	r0, #0
   1199c:	popeq	{r4, sl, fp, pc}
   119a0:	bl	10b94 <free@plt>
   119a4:	mov	r0, #0
   119a8:	str	r0, [r4]
   119ac:	pop	{r4, sl, fp, pc}
   119b0:	push	{r4, r5, fp, lr}
   119b4:	add	fp, sp, #8
   119b8:	mov	r4, r1
   119bc:	mov	r5, r0
   119c0:	ldr	r0, [r1, #8]
   119c4:	bl	118f8 <__assert_fail@plt+0xbd8>
   119c8:	add	r0, r5, r0, lsl #4
   119cc:	mov	r1, r4
   119d0:	bl	12e64 <error@@Base+0xa3c>
   119d4:	mov	r0, r5
   119d8:	bl	11984 <__assert_fail@plt+0xc64>
   119dc:	movw	r0, #8052	; 0x1f74
   119e0:	ldr	r0, [r5, r0]!
   119e4:	sub	r0, r0, #1
   119e8:	str	r0, [r5]
   119ec:	pop	{r4, r5, fp, pc}
   119f0:	push	{r4, r5, fp, lr}
   119f4:	add	fp, sp, #8
   119f8:	mov	r4, r0
   119fc:	movw	r0, #8048	; 0x1f70
   11a00:	mov	r5, r4
   11a04:	ldr	r0, [r5, r0]!
   11a08:	cmp	r0, #0
   11a0c:	bne	11a6c <__assert_fail@plt+0xd4c>
   11a10:	ldr	r0, [r5, #4]
   11a14:	cmp	r0, #0
   11a18:	popeq	{r4, r5, fp, pc}
   11a1c:	mov	r1, #4
   11a20:	bl	12074 <__assert_fail@plt+0x1354>
   11a24:	str	r0, [r5]
   11a28:	mov	r0, #0
   11a2c:	movw	ip, #503	; 0x1f7
   11a30:	mov	r2, #0
   11a34:	b	11a44 <__assert_fail@plt+0xd24>
   11a38:	add	r2, r2, #1
   11a3c:	cmp	r2, ip
   11a40:	beq	11a6c <__assert_fail@plt+0xd4c>
   11a44:	ldr	r3, [r4, r2, lsl #4]
   11a48:	cmp	r3, #0
   11a4c:	beq	11a38 <__assert_fail@plt+0xd18>
   11a50:	ldr	r1, [r5]
   11a54:	str	r3, [r1, r0, lsl #2]
   11a58:	add	r0, r0, #1
   11a5c:	ldr	r3, [r3, #4]
   11a60:	cmp	r3, #0
   11a64:	bne	11a50 <__assert_fail@plt+0xd30>
   11a68:	b	11a38 <__assert_fail@plt+0xd18>
   11a6c:	pop	{r4, r5, fp, pc}
   11a70:	push	{r4, r5, r6, r7, fp, lr}
   11a74:	add	fp, sp, #16
   11a78:	mov	r5, r1
   11a7c:	mov	r4, r0
   11a80:	mov	r6, #0
   11a84:	movw	r7, #8048	; 0x1f70
   11a88:	add	r0, r4, r6
   11a8c:	mov	r1, r5
   11a90:	bl	12f3c <error@@Base+0xb14>
   11a94:	add	r6, r6, #16
   11a98:	cmp	r6, r7
   11a9c:	bne	11a88 <__assert_fail@plt+0xd68>
   11aa0:	mov	r0, r4
   11aa4:	bl	11984 <__assert_fail@plt+0xc64>
   11aa8:	movw	r0, #8052	; 0x1f74
   11aac:	mov	r1, #0
   11ab0:	str	r1, [r4, r0]
   11ab4:	pop	{r4, r5, r6, r7, fp, pc}
   11ab8:	push	{r4, r5, r6, sl, fp, lr}
   11abc:	add	fp, sp, #16
   11ac0:	mov	r4, r0
   11ac4:	ldr	r5, [r1]
   11ac8:	mov	r0, r5
   11acc:	bl	11b14 <__assert_fail@plt+0xdf4>
   11ad0:	cmp	r0, #0
   11ad4:	beq	11b10 <__assert_fail@plt+0xdf0>
   11ad8:	mov	r6, r0
   11adc:	ldr	r0, [r5, #12]
   11ae0:	bl	11d68 <__assert_fail@plt+0x1048>
   11ae4:	cmp	r0, #0
   11ae8:	movne	r0, r4
   11aec:	movne	r1, r5
   11af0:	movne	r2, r6
   11af4:	blne	11d94 <__assert_fail@plt+0x1074>
   11af8:	ldr	r5, [r6, #4]
   11afc:	mov	r0, r5
   11b00:	bl	11b14 <__assert_fail@plt+0xdf4>
   11b04:	mov	r6, r0
   11b08:	cmp	r0, #0
   11b0c:	bne	11adc <__assert_fail@plt+0xdbc>
   11b10:	pop	{r4, r5, r6, sl, fp, pc}
   11b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b18:	add	fp, sp, #28
   11b1c:	sub	sp, sp, #20
   11b20:	str	r0, [sp, #8]
   11b24:	cmp	r0, #0
   11b28:	beq	11b54 <__assert_fail@plt+0xe34>
   11b2c:	ldr	r0, [sp, #8]
   11b30:	cmp	r0, #0
   11b34:	beq	11b60 <__assert_fail@plt+0xe40>
   11b38:	mov	r5, #17
   11b3c:	add	r4, sp, #4
   11b40:	mov	sl, #1
   11b44:	mov	r8, #13312	; 0x3400
   11b48:	movw	r9, #33664	; 0x8380
   11b4c:	movt	r9, #1
   11b50:	b	11b7c <__assert_fail@plt+0xe5c>
   11b54:	mov	r0, #0
   11b58:	sub	sp, fp, #28
   11b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b60:	add	r4, sp, #4
   11b64:	b	11d58 <__assert_fail@plt+0x1038>
   11b68:	cmp	r0, #8
   11b6c:	bne	11c44 <__assert_fail@plt+0xf24>
   11b70:	ldr	r0, [r4, #4]
   11b74:	cmp	r0, #0
   11b78:	beq	11d58 <__assert_fail@plt+0x1038>
   11b7c:	mov	r7, r5
   11b80:	mov	r0, r4
   11b84:	bl	11e20 <__assert_fail@plt+0x1100>
   11b88:	mov	r4, r0
   11b8c:	bl	11e74 <__assert_fail@plt+0x1154>
   11b90:	mov	r5, r0
   11b94:	mov	r0, r4
   11b98:	bl	11e20 <__assert_fail@plt+0x1100>
   11b9c:	bl	11e74 <__assert_fail@plt+0x1154>
   11ba0:	mov	r6, r0
   11ba4:	mov	r0, r4
   11ba8:	bl	11e88 <__assert_fail@plt+0x1168>
   11bac:	bl	11e74 <__assert_fail@plt+0x1154>
   11bb0:	cmp	r5, #1
   11bb4:	cmpeq	r6, #2
   11bb8:	beq	11b70 <__assert_fail@plt+0xe50>
   11bbc:	sub	r1, r5, #1
   11bc0:	cmp	r1, #3
   11bc4:	subcs	r1, r6, #1
   11bc8:	cmpcs	r1, #3
   11bcc:	bcc	11d58 <__assert_fail@plt+0x1038>
   11bd0:	orr	r1, r6, #1
   11bd4:	orr	r2, r5, #1
   11bd8:	cmp	r2, #9
   11bdc:	cmpeq	r1, #9
   11be0:	beq	11b70 <__assert_fail@plt+0xe50>
   11be4:	cmp	r2, #9
   11be8:	bne	11c08 <__assert_fail@plt+0xee8>
   11bec:	cmp	r6, #13
   11bf0:	bhi	11c08 <__assert_fail@plt+0xee8>
   11bf4:	tst	r8, sl, lsl r6
   11bf8:	beq	11c08 <__assert_fail@plt+0xee8>
   11bfc:	orr	r3, r0, #1
   11c00:	cmp	r3, #9
   11c04:	beq	11b70 <__assert_fail@plt+0xe50>
   11c08:	orr	r3, r7, #1
   11c0c:	cmp	r3, #9
   11c10:	bne	11c2c <__assert_fail@plt+0xf0c>
   11c14:	cmp	r5, #13
   11c18:	bhi	11c2c <__assert_fail@plt+0xf0c>
   11c1c:	tst	r8, sl, lsl r5
   11c20:	beq	11c2c <__assert_fail@plt+0xf0c>
   11c24:	cmp	r1, #9
   11c28:	beq	11b70 <__assert_fail@plt+0xe50>
   11c2c:	cmp	r5, #8
   11c30:	cmpeq	r6, #10
   11c34:	beq	11b70 <__assert_fail@plt+0xe50>
   11c38:	cmp	r5, #8
   11c3c:	cmpeq	r6, #11
   11c40:	beq	11b68 <__assert_fail@plt+0xe48>
   11c44:	cmp	r7, #8
   11c48:	cmpeq	r5, #11
   11c4c:	beq	11ce8 <__assert_fail@plt+0xfc8>
   11c50:	sub	r3, r5, #15
   11c54:	clz	r3, r3
   11c58:	lsr	lr, r3, #5
   11c5c:	sub	r2, r2, #9
   11c60:	clz	r2, r2
   11c64:	lsr	ip, r2, #5
   11c68:	orr	r2, lr, ip
   11c6c:	sub	r3, r6, #15
   11c70:	clz	r3, r3
   11c74:	lsr	r3, r3, #5
   11c78:	tst	r2, r3
   11c7c:	subeq	r1, r1, #9
   11c80:	clzeq	r1, r1
   11c84:	lsreq	r1, r1, #5
   11c88:	andseq	r1, lr, r1
   11c8c:	bne	11b70 <__assert_fail@plt+0xe50>
   11c90:	cmp	r7, #15
   11c94:	bne	11cb8 <__assert_fail@plt+0xf98>
   11c98:	subs	r1, r5, #10
   11c9c:	movwne	r1, #1
   11ca0:	orr	r2, r5, #2
   11ca4:	subs	r2, r2, #14
   11ca8:	movwne	r2, #1
   11cac:	tst	r1, r2
   11cb0:	cmpeq	r6, #15
   11cb4:	beq	11b70 <__assert_fail@plt+0xe50>
   11cb8:	cmp	r5, #15
   11cbc:	bne	11cf4 <__assert_fail@plt+0xfd4>
   11cc0:	subs	r1, r6, #10
   11cc4:	movwne	r1, #1
   11cc8:	orr	r2, r6, #2
   11ccc:	subs	r2, r2, #14
   11cd0:	movwne	r2, #1
   11cd4:	tst	r1, r2
   11cd8:	bne	11d00 <__assert_fail@plt+0xfe0>
   11cdc:	cmp	r0, #15
   11ce0:	beq	11b70 <__assert_fail@plt+0xe50>
   11ce4:	b	11d00 <__assert_fail@plt+0xfe0>
   11ce8:	cmp	r6, #8
   11cec:	beq	11b70 <__assert_fail@plt+0xe50>
   11cf0:	b	11c50 <__assert_fail@plt+0xf30>
   11cf4:	cmp	r5, #7
   11cf8:	cmpeq	r6, #7
   11cfc:	beq	11b70 <__assert_fail@plt+0xe50>
   11d00:	cmp	r6, #16
   11d04:	bne	11d30 <__assert_fail@plt+0x1010>
   11d08:	orr	r0, r5, #8
   11d0c:	sub	r0, r0, #15
   11d10:	clz	r0, r0
   11d14:	lsr	r0, r0, #5
   11d18:	orr	r0, r0, ip
   11d1c:	sub	r1, r5, #16
   11d20:	clz	r1, r1
   11d24:	lsr	r1, r1, #5
   11d28:	orrs	r0, r1, r0
   11d2c:	bne	11b70 <__assert_fail@plt+0xe50>
   11d30:	cmp	r5, #16
   11d34:	bne	11d4c <__assert_fail@plt+0x102c>
   11d38:	cmp	r6, #16
   11d3c:	bhi	11d58 <__assert_fail@plt+0x1038>
   11d40:	tst	r9, sl, lsl r6
   11d44:	bne	11b70 <__assert_fail@plt+0xe50>
   11d48:	b	11d58 <__assert_fail@plt+0x1038>
   11d4c:	cmp	r5, #5
   11d50:	cmpeq	r6, #5
   11d54:	beq	11b70 <__assert_fail@plt+0xe50>
   11d58:	mov	r0, r4
   11d5c:	bl	11e9c <__assert_fail@plt+0x117c>
   11d60:	sub	sp, fp, #28
   11d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d68:	push	{fp, lr}
   11d6c:	mov	fp, sp
   11d70:	bl	10ba0 <utf8proc_get_property@plt>
   11d74:	ldrsh	r1, [r0]
   11d78:	sub	r2, r1, #1
   11d7c:	mov	r0, #1
   11d80:	cmp	r2, #12
   11d84:	popcc	{fp, pc}
   11d88:	cmp	r1, #29
   11d8c:	movne	r0, #0
   11d90:	pop	{fp, pc}
   11d94:	push	{r4, r5, r6, r7, fp, lr}
   11d98:	add	fp, sp, #16
   11d9c:	mov	r5, r1
   11da0:	mov	r4, r0
   11da4:	ldr	r6, [r2, #4]
   11da8:	mov	r0, r1
   11dac:	mov	r1, r6
   11db0:	bl	11f5c <__assert_fail@plt+0x123c>
   11db4:	add	r0, r0, #1
   11db8:	bl	10c24 <malloc@plt>
   11dbc:	mov	r7, r0
   11dc0:	mov	r1, r5
   11dc4:	mov	r2, r6
   11dc8:	bl	12000 <__assert_fail@plt+0x12e0>
   11dcc:	mov	r0, #1
   11dd0:	mov	r1, #12
   11dd4:	bl	12074 <__assert_fail@plt+0x1354>
   11dd8:	mov	r5, r0
   11ddc:	mov	r0, r7
   11de0:	bl	10cb4 <utf8proc_NFC@plt>
   11de4:	str	r0, [r5, #8]
   11de8:	mov	r0, r4
   11dec:	mov	r1, r5
   11df0:	bl	12e3c <error@@Base+0xa14>
   11df4:	mov	r0, r7
   11df8:	pop	{r4, r5, r6, r7, fp, lr}
   11dfc:	b	10b94 <free@plt>
   11e00:	push	{r4, sl, fp, lr}
   11e04:	add	fp, sp, #8
   11e08:	mov	r4, r0
   11e0c:	ldr	r0, [r0, #8]
   11e10:	bl	10b94 <free@plt>
   11e14:	mov	r0, r4
   11e18:	pop	{r4, sl, fp, lr}
   11e1c:	b	10b94 <free@plt>
   11e20:	push	{r4, r5, fp, lr}
   11e24:	add	fp, sp, #8
   11e28:	mov	r4, #0
   11e2c:	cmp	r0, #0
   11e30:	beq	11e60 <__assert_fail@plt+0x1140>
   11e34:	ldr	r5, [r0, #4]
   11e38:	cmp	r5, #0
   11e3c:	beq	11e60 <__assert_fail@plt+0x1140>
   11e40:	mov	r0, r5
   11e44:	bl	11e74 <__assert_fail@plt+0x1154>
   11e48:	orr	r0, r0, #2
   11e4c:	cmp	r0, #6
   11e50:	bne	11e68 <__assert_fail@plt+0x1148>
   11e54:	ldr	r5, [r5, #4]
   11e58:	cmp	r5, #0
   11e5c:	bne	11e40 <__assert_fail@plt+0x1120>
   11e60:	mov	r0, r4
   11e64:	pop	{r4, r5, fp, pc}
   11e68:	mov	r4, r5
   11e6c:	mov	r0, r4
   11e70:	pop	{r4, r5, fp, pc}
   11e74:	cmp	r0, #0
   11e78:	moveq	r0, #18
   11e7c:	bxeq	lr
   11e80:	ldr	r0, [r0, #12]
   11e84:	b	11ee8 <__assert_fail@plt+0x11c8>
   11e88:	push	{fp, lr}
   11e8c:	mov	fp, sp
   11e90:	bl	11e20 <__assert_fail@plt+0x1100>
   11e94:	pop	{fp, lr}
   11e98:	b	11e20 <__assert_fail@plt+0x1100>
   11e9c:	push	{r4, r5, fp, lr}
   11ea0:	add	fp, sp, #8
   11ea4:	cmp	r0, #0
   11ea8:	beq	11edc <__assert_fail@plt+0x11bc>
   11eac:	mov	r5, r0
   11eb0:	mov	r4, r5
   11eb4:	ldr	r5, [r5, #4]
   11eb8:	cmp	r5, #0
   11ebc:	beq	11ed4 <__assert_fail@plt+0x11b4>
   11ec0:	mov	r0, r5
   11ec4:	bl	11e74 <__assert_fail@plt+0x1154>
   11ec8:	orr	r0, r0, #2
   11ecc:	cmp	r0, #6
   11ed0:	beq	11eb0 <__assert_fail@plt+0x1190>
   11ed4:	mov	r0, r4
   11ed8:	pop	{r4, r5, fp, pc}
   11edc:	mov	r4, #0
   11ee0:	mov	r0, r4
   11ee4:	pop	{r4, r5, fp, pc}
   11ee8:	mov	r1, #0
   11eec:	movw	r2, #1092	; 0x444
   11ef0:	b	11ef4 <__assert_fail@plt+0x11d4>
   11ef4:	push	{r4, r5, fp, lr}
   11ef8:	add	fp, sp, #8
   11efc:	mov	lr, r0
   11f00:	mov	r0, #0
   11f04:	cmp	r2, r1
   11f08:	popcc	{r4, r5, fp, pc}
   11f0c:	movw	ip, #12964	; 0x32a4
   11f10:	movt	ip, #1
   11f14:	sub	r3, r2, r1
   11f18:	add	r3, r1, r3, lsr #1
   11f1c:	add	r4, r3, r3, lsl #1
   11f20:	ldr	r5, [ip, r4, lsl #2]
   11f24:	cmp	r5, lr
   11f28:	bls	11f3c <__assert_fail@plt+0x121c>
   11f2c:	sub	r2, r3, #1
   11f30:	cmp	r2, r1
   11f34:	bcs	11f14 <__assert_fail@plt+0x11f4>
   11f38:	b	11f58 <__assert_fail@plt+0x1238>
   11f3c:	add	r1, ip, r4, lsl #2
   11f40:	ldr	r4, [r1, #4]
   11f44:	cmp	r4, lr
   11f48:	bcs	11f54 <__assert_fail@plt+0x1234>
   11f4c:	add	r1, r3, #1
   11f50:	b	11f30 <__assert_fail@plt+0x1210>
   11f54:	ldr	r0, [r1, #8]
   11f58:	pop	{r4, r5, fp, pc}
   11f5c:	push	{r4, r5, r6, r7, fp, lr}
   11f60:	add	fp, sp, #16
   11f64:	sub	sp, sp, #8
   11f68:	cmp	r0, r1
   11f6c:	beq	11fb0 <__assert_fail@plt+0x1290>
   11f70:	mov	r5, r1
   11f74:	mov	r6, r0
   11f78:	mov	r4, #0
   11f7c:	add	r7, sp, #4
   11f80:	cmp	r6, #0
   11f84:	beq	11fc0 <__assert_fail@plt+0x12a0>
   11f88:	ldr	r0, [r6, #12]
   11f8c:	mov	r1, r7
   11f90:	bl	10bb8 <utf8proc_encode_char@plt>
   11f94:	cmp	r0, #0
   11f98:	beq	11fe0 <__assert_fail@plt+0x12c0>
   11f9c:	add	r4, r0, r4
   11fa0:	ldr	r6, [r6, #4]
   11fa4:	cmp	r6, r5
   11fa8:	bne	11f80 <__assert_fail@plt+0x1260>
   11fac:	b	11fb4 <__assert_fail@plt+0x1294>
   11fb0:	mov	r4, #0
   11fb4:	mov	r0, r4
   11fb8:	sub	sp, fp, #16
   11fbc:	pop	{r4, r5, r6, r7, fp, pc}
   11fc0:	movw	r0, #26087	; 0x65e7
   11fc4:	movt	r0, #1
   11fc8:	movw	r1, #26080	; 0x65e0
   11fcc:	movt	r1, #1
   11fd0:	movw	r3, #26103	; 0x65f7
   11fd4:	movt	r3, #1
   11fd8:	mov	r2, #249	; 0xf9
   11fdc:	bl	10d20 <__assert_fail@plt>
   11fe0:	movw	r0, #26129	; 0x6611
   11fe4:	movt	r0, #1
   11fe8:	movw	r1, #26080	; 0x65e0
   11fec:	movt	r1, #1
   11ff0:	movw	r3, #26103	; 0x65f7
   11ff4:	movt	r3, #1
   11ff8:	mov	r2, #253	; 0xfd
   11ffc:	bl	10d20 <__assert_fail@plt>
   12000:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12004:	add	fp, sp, #24
   12008:	mov	r4, r0
   1200c:	mov	r8, #0
   12010:	cmp	r1, r2
   12014:	mov	r7, #0
   12018:	beq	1204c <__assert_fail@plt+0x132c>
   1201c:	mov	r5, r2
   12020:	mov	r6, r1
   12024:	mov	r7, #0
   12028:	cmp	r6, #0
   1202c:	beq	12054 <__assert_fail@plt+0x1334>
   12030:	add	r1, r4, r7
   12034:	ldr	r0, [r6, #12]
   12038:	bl	10bb8 <utf8proc_encode_char@plt>
   1203c:	add	r7, r0, r7
   12040:	ldr	r6, [r6, #4]
   12044:	cmp	r6, r5
   12048:	bne	12028 <__assert_fail@plt+0x1308>
   1204c:	strb	r8, [r4, r7]
   12050:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12054:	movw	r0, #26087	; 0x65e7
   12058:	movt	r0, #1
   1205c:	movw	r1, #26080	; 0x65e0
   12060:	movt	r1, #1
   12064:	movw	r3, #26148	; 0x6624
   12068:	movt	r3, #1
   1206c:	movw	r2, #269	; 0x10d
   12070:	bl	10d20 <__assert_fail@plt>
   12074:	push	{fp, lr}
   12078:	mov	fp, sp
   1207c:	bl	10b64 <calloc@plt>
   12080:	cmp	r0, #0
   12084:	popne	{fp, pc}
   12088:	movw	r0, #26172	; 0x663c
   1208c:	movt	r0, #1
   12090:	bl	12428 <error@@Base>
   12094:	push	{r4, r5, r6, sl, fp, lr}
   12098:	add	fp, sp, #16
   1209c:	mov	r2, r0
   120a0:	ldrb	ip, [r1]
   120a4:	ldrb	r3, [r0]
   120a8:	mov	r0, #0
   120ac:	cmp	r3, #0
   120b0:	beq	120f0 <__assert_fail@plt+0x13d0>
   120b4:	add	lr, r1, #1
   120b8:	add	r6, r2, #1
   120bc:	mov	r2, #0
   120c0:	uxtb	r4, ip
   120c4:	uxtb	r5, r3
   120c8:	cmp	r5, r4
   120cc:	bne	12100 <__assert_fail@plt+0x13e0>
   120d0:	ldrb	ip, [lr, r2]
   120d4:	ldrb	r3, [r6, r2]
   120d8:	add	r2, r2, #1
   120dc:	cmp	r3, #0
   120e0:	bne	120c0 <__assert_fail@plt+0x13a0>
   120e4:	cmp	ip, #0
   120e8:	bne	120fc <__assert_fail@plt+0x13dc>
   120ec:	pop	{r4, r5, r6, sl, fp, pc}
   120f0:	mov	r2, #0
   120f4:	cmp	ip, #0
   120f8:	beq	120ec <__assert_fail@plt+0x13cc>
   120fc:	mov	r3, #0
   12100:	ldrb	r1, [r1, r2]
   12104:	uxtb	r2, r3
   12108:	mov	r0, #1
   1210c:	cmp	r2, r1
   12110:	mvncc	r0, #0
   12114:	pop	{r4, r5, r6, sl, fp, pc}
   12118:	push	{r4, r5, fp, lr}
   1211c:	add	fp, sp, #8
   12120:	mov	r5, r1
   12124:	cmp	r0, #0
   12128:	beq	1215c <__assert_fail@plt+0x143c>
   1212c:	mov	r4, r0
   12130:	mov	r1, r5
   12134:	bl	10b88 <fopen@plt>
   12138:	cmp	r0, #0
   1213c:	popne	{r4, r5, fp, pc}
   12140:	ldrb	r0, [r5]
   12144:	cmp	r0, #119	; 0x77
   12148:	bne	12180 <__assert_fail@plt+0x1460>
   1214c:	movw	r0, #26198	; 0x6656
   12150:	movt	r0, #1
   12154:	mov	r1, r4
   12158:	bl	12468 <error@@Base+0x40>
   1215c:	ldrb	r0, [r5]
   12160:	movw	r1, #28880	; 0x70d0
   12164:	movt	r1, #2
   12168:	movw	r2, #28884	; 0x70d4
   1216c:	movt	r2, #2
   12170:	cmp	r0, #114	; 0x72
   12174:	moveq	r2, r1
   12178:	ldr	r0, [r2]
   1217c:	pop	{r4, r5, fp, pc}
   12180:	movw	r0, #26220	; 0x666c
   12184:	movt	r0, #1
   12188:	mov	r1, r4
   1218c:	bl	12468 <error@@Base+0x40>
   12190:	movw	r1, #28880	; 0x70d0
   12194:	movt	r1, #2
   12198:	ldr	r1, [r1]
   1219c:	cmp	r1, r0
   121a0:	bxeq	lr
   121a4:	movw	r1, #28884	; 0x70d4
   121a8:	movt	r1, #2
   121ac:	ldr	r1, [r1]
   121b0:	cmp	r1, r0
   121b4:	beq	121bc <__assert_fail@plt+0x149c>
   121b8:	b	10ca8 <fclose@plt>
   121bc:	bx	lr
   121c0:	push	{fp, lr}
   121c4:	mov	fp, sp
   121c8:	sub	sp, sp, #88	; 0x58
   121cc:	mov	r1, sp
   121d0:	bl	13128 <error@@Base+0xd00>
   121d4:	clz	r0, r0
   121d8:	lsr	r0, r0, #5
   121dc:	mov	sp, fp
   121e0:	pop	{fp, pc}
   121e4:	push	{r4, sl, fp, lr}
   121e8:	add	fp, sp, #8
   121ec:	movw	r0, #28996	; 0x7144
   121f0:	movt	r0, #2
   121f4:	ldrh	r1, [r0]
   121f8:	add	r1, r1, #1
   121fc:	strh	r1, [r0]
   12200:	sxth	r0, r1
   12204:	bl	12218 <__assert_fail@plt+0x14f8>
   12208:	mov	r4, r0
   1220c:	bl	10bdc <unlink@plt>
   12210:	mov	r0, r4
   12214:	pop	{r4, sl, fp, pc}
   12218:	push	{r4, r5, fp, lr}
   1221c:	add	fp, sp, #8
   12220:	sub	sp, sp, #104	; 0x68
   12224:	mov	r4, r0
   12228:	movw	r0, #46156	; 0xb44c
   1222c:	movt	r0, #2
   12230:	ldr	r5, [r0]
   12234:	bl	10c54 <getpid@plt>
   12238:	mov	r3, r0
   1223c:	sxth	r0, r4
   12240:	str	r0, [sp]
   12244:	add	r4, sp, #4
   12248:	movw	r1, #26261	; 0x6695
   1224c:	movt	r1, #1
   12250:	mov	r0, r4
   12254:	mov	r2, r5
   12258:	bl	10ccc <sprintf@plt>
   1225c:	mov	r0, r4
   12260:	bl	10bc4 <strdup@plt>
   12264:	sub	sp, fp, #8
   12268:	pop	{r4, r5, fp, pc}
   1226c:	push	{r4, sl, fp, lr}
   12270:	add	fp, sp, #8
   12274:	mov	r4, r0
   12278:	bl	10c84 <strlen@plt>
   1227c:	sub	r0, r0, #1
   12280:	sxth	r0, r0
   12284:	cmp	r0, #0
   12288:	bmi	12298 <__assert_fail@plt+0x1578>
   1228c:	ldrb	r1, [r4, r0]
   12290:	cmp	r1, #47	; 0x2f
   12294:	bne	1227c <__assert_fail@plt+0x155c>
   12298:	add	r0, r0, r4
   1229c:	add	r0, r0, #1
   122a0:	pop	{r4, sl, fp, pc}
   122a4:	push	{r4, r5, r6, r7, fp, lr}
   122a8:	add	fp, sp, #16
   122ac:	mov	r4, r3
   122b0:	mov	r5, r2
   122b4:	mov	r6, r1
   122b8:	mov	r7, r0
   122bc:	ldr	r0, [r1]
   122c0:	bl	1226c <__assert_fail@plt+0x154c>
   122c4:	movw	r1, #46156	; 0xb44c
   122c8:	movt	r1, #2
   122cc:	str	r0, [r1]
   122d0:	bl	124f0 <error@@Base+0xc8>
   122d4:	mov	r0, r7
   122d8:	mov	r1, r6
   122dc:	mov	r2, r5
   122e0:	mov	r3, r4
   122e4:	pop	{r4, r5, r6, r7, fp, lr}
   122e8:	b	122ec <__assert_fail@plt+0x15cc>
   122ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f0:	add	fp, sp, #28
   122f4:	sub	sp, sp, #12
   122f8:	stmib	sp, {r2, r3}
   122fc:	mov	r7, r1
   12300:	mov	r5, r0
   12304:	ldr	r0, [r0]
   12308:	cmp	r0, #1
   1230c:	bne	12324 <__assert_fail@plt+0x1604>
   12310:	movw	r0, #28860	; 0x70bc
   12314:	movt	r0, #2
   12318:	ldrb	r0, [r0]
   1231c:	cmp	r0, #0
   12320:	bne	123e0 <__assert_fail@plt+0x16c0>
   12324:	ldr	r9, [r5]
   12328:	mov	r6, #0
   1232c:	cmp	r9, #2
   12330:	blt	123d0 <__assert_fail@plt+0x16b0>
   12334:	mov	sl, #1
   12338:	mov	r6, #0
   1233c:	mov	r8, #1
   12340:	b	12368 <__assert_fail@plt+0x1648>
   12344:	ldr	r0, [r7, sl, lsl #2]
   12348:	sxth	r1, r6
   1234c:	str	r0, [r7, r1, lsl #2]
   12350:	add	r6, r6, #1
   12354:	ldr	r9, [r5]
   12358:	add	r8, r8, #1
   1235c:	sxth	sl, r8
   12360:	cmp	r9, sl
   12364:	ble	123d0 <__assert_fail@plt+0x16b0>
   12368:	ldr	r4, [r7, sl, lsl #2]
   1236c:	ldrb	r0, [r4]
   12370:	cmp	r0, #45	; 0x2d
   12374:	bne	12344 <__assert_fail@plt+0x1624>
   12378:	ldrb	r0, [r4, #1]
   1237c:	cmp	r0, #0
   12380:	beq	12344 <__assert_fail@plt+0x1624>
   12384:	mov	r0, r4
   12388:	bl	10c84 <strlen@plt>
   1238c:	mov	r2, r0
   12390:	movw	r0, #26290	; 0x66b2
   12394:	movt	r0, #1
   12398:	mov	r1, r4
   1239c:	bl	10cfc <strncmp@plt>
   123a0:	cmp	r0, #0
   123a4:	beq	123e0 <__assert_fail@plt+0x16c0>
   123a8:	add	r0, sl, #1
   123ac:	mov	r1, #0
   123b0:	cmp	r0, r9
   123b4:	ldrlt	r1, [r7, r0, lsl #2]
   123b8:	mov	r0, r4
   123bc:	ldr	r2, [sp, #8]
   123c0:	bl	1259c <error@@Base+0x174>
   123c4:	cmp	r0, #0
   123c8:	addne	r8, r8, #1
   123cc:	b	12354 <__assert_fail@plt+0x1634>
   123d0:	sxth	r0, r6
   123d4:	str	r0, [r5]
   123d8:	sub	sp, fp, #28
   123dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e0:	ldr	r0, [sp, #4]
   123e4:	bl	1254c <error@@Base+0x124>
   123e8:	push	{fp, lr}
   123ec:	mov	fp, sp
   123f0:	mov	r0, #0
   123f4:	bl	123f8 <__assert_fail@plt+0x16d8>
   123f8:	push	{fp, lr}
   123fc:	mov	fp, sp
   12400:	mov	r4, r0
   12404:	movw	r0, #46160	; 0xb450
   12408:	movt	r0, #2
   1240c:	ldr	r0, [r0]
   12410:	cmp	r0, #0
   12414:	beq	1241c <__assert_fail@plt+0x16fc>
   12418:	blx	r0
   1241c:	bl	1268c <error@@Base+0x264>
   12420:	mov	r0, r4
   12424:	bl	10c60 <exit@plt>

00012428 <error@@Base>:
   12428:	push	{fp, lr}
   1242c:	mov	fp, sp
   12430:	mov	r3, r0
   12434:	movw	r0, #46156	; 0xb44c
   12438:	movt	r0, #2
   1243c:	ldr	r2, [r0]
   12440:	movw	r0, #28872	; 0x70c8
   12444:	movt	r0, #2
   12448:	ldr	r0, [r0]
   1244c:	movw	r1, #26240	; 0x6680
   12450:	movt	r1, #1
   12454:	bl	10c90 <fprintf@plt>
   12458:	movw	r0, #28864	; 0x70c0
   1245c:	movt	r0, #2
   12460:	ldr	r0, [r0]
   12464:	bl	123f8 <__assert_fail@plt+0x16d8>
   12468:	push	{fp, lr}
   1246c:	mov	fp, sp
   12470:	sub	sp, sp, #8
   12474:	mov	r3, r0
   12478:	movw	r0, #46156	; 0xb44c
   1247c:	movt	r0, #2
   12480:	ldr	r2, [r0]
   12484:	movw	r0, #28872	; 0x70c8
   12488:	movt	r0, #2
   1248c:	ldr	r0, [r0]
   12490:	str	r1, [sp]
   12494:	movw	r1, #26248	; 0x6688
   12498:	movt	r1, #1
   1249c:	bl	10c90 <fprintf@plt>
   124a0:	movw	r0, #28864	; 0x70c0
   124a4:	movt	r0, #2
   124a8:	ldr	r0, [r0]
   124ac:	bl	123f8 <__assert_fail@plt+0x16d8>
   124b0:	push	{fp, lr}
   124b4:	mov	fp, sp
   124b8:	sub	sp, sp, #8
   124bc:	mov	r3, r0
   124c0:	movw	r0, #46156	; 0xb44c
   124c4:	movt	r0, #2
   124c8:	ldr	r2, [r0]
   124cc:	movw	r0, #28872	; 0x70c8
   124d0:	movt	r0, #2
   124d4:	ldr	r0, [r0]
   124d8:	str	r1, [sp]
   124dc:	movw	r1, #26248	; 0x6688
   124e0:	movt	r1, #1
   124e4:	bl	10c90 <fprintf@plt>
   124e8:	mov	sp, fp
   124ec:	pop	{fp, pc}
   124f0:	push	{r4, sl, fp, lr}
   124f4:	add	fp, sp, #8
   124f8:	movw	r4, #9500	; 0x251c
   124fc:	movt	r4, #1
   12500:	mov	r0, #2
   12504:	mov	r1, r4
   12508:	bl	10c3c <__sysv_signal@plt>
   1250c:	mov	r0, #15
   12510:	mov	r1, r4
   12514:	pop	{r4, sl, fp, lr}
   12518:	b	10c3c <__sysv_signal@plt>
   1251c:	push	{fp, lr}
   12520:	mov	fp, sp
   12524:	movw	r0, #28998	; 0x7146
   12528:	movt	r0, #2
   1252c:	ldrb	r1, [r0]
   12530:	cmp	r1, #1
   12534:	popeq	{fp, pc}
   12538:	mov	r1, #1
   1253c:	strb	r1, [r0]
   12540:	movw	r0, #26275	; 0x66a3
   12544:	movt	r0, #1
   12548:	bl	12428 <error@@Base>
   1254c:	push	{fp, lr}
   12550:	mov	fp, sp
   12554:	mov	r3, r0
   12558:	movw	r0, #46152	; 0xb448
   1255c:	movt	r0, #2
   12560:	ldr	r0, [r0]
   12564:	cmp	r0, #0
   12568:	bne	12594 <error@@Base+0x16c>
   1256c:	movw	r0, #46156	; 0xb44c
   12570:	movt	r0, #2
   12574:	ldr	r2, [r0]
   12578:	movw	r0, #28872	; 0x70c8
   1257c:	movt	r0, #2
   12580:	ldr	r0, [r0]
   12584:	movw	r1, #26296	; 0x66b8
   12588:	movt	r1, #1
   1258c:	bl	10c90 <fprintf@plt>
   12590:	bl	123e8 <__assert_fail@plt+0x16c8>
   12594:	blx	r0
   12598:	bl	123e8 <__assert_fail@plt+0x16c8>
   1259c:	push	{r4, sl, fp, lr}
   125a0:	add	fp, sp, #8
   125a4:	mov	ip, r0
   125a8:	cmp	r2, #0
   125ac:	ldrbne	r0, [r2]
   125b0:	cmpne	r0, #0
   125b4:	bne	125c8 <error@@Base+0x1a0>
   125b8:	movw	r0, #26311	; 0x66c7
   125bc:	movt	r0, #1
   125c0:	mov	r1, ip
   125c4:	bl	12468 <error@@Base+0x40>
   125c8:	ldrb	lr, [ip, #1]
   125cc:	mov	r3, #0
   125d0:	cmp	lr, r0
   125d4:	beq	125fc <error@@Base+0x1d4>
   125d8:	mov	r0, #1
   125dc:	sxth	r3, r0
   125e0:	add	r4, r3, r3, lsl #1
   125e4:	ldrb	r4, [r2, r4, lsl #2]
   125e8:	cmp	r4, #0
   125ec:	beq	125b8 <error@@Base+0x190>
   125f0:	add	r0, r0, #1
   125f4:	cmp	lr, r4
   125f8:	bne	125dc <error@@Base+0x1b4>
   125fc:	add	r0, r3, r3, lsl #1
   12600:	add	r3, r2, r0, lsl #2
   12604:	ldr	r0, [r3, #4]
   12608:	cmp	r0, #0
   1260c:	beq	1264c <error@@Base+0x224>
   12610:	mov	r2, ip
   12614:	ldrb	lr, [r2, #2]!
   12618:	cmp	r1, #0
   1261c:	cmpeq	lr, #0
   12620:	beq	1264c <error@@Base+0x224>
   12624:	ldr	r3, [r0]
   12628:	cmp	r3, #0
   1262c:	bne	1267c <error@@Base+0x254>
   12630:	cmp	lr, #0
   12634:	movne	r1, r2
   12638:	str	r1, [r0]
   1263c:	ldrb	r0, [r2]
   12640:	clz	r0, r0
   12644:	lsr	r0, r0, #5
   12648:	pop	{r4, sl, fp, pc}
   1264c:	ldr	r0, [r3, #8]
   12650:	cmp	r0, #0
   12654:	beq	125b8 <error@@Base+0x190>
   12658:	ldrb	r1, [ip, #2]
   1265c:	cmp	r1, #0
   12660:	bne	125b8 <error@@Base+0x190>
   12664:	ldrb	r1, [r0]
   12668:	cmp	r1, #0
   1266c:	moveq	r1, #1
   12670:	strbeq	r1, [r0]
   12674:	moveq	r0, #0
   12678:	popeq	{r4, sl, fp, pc}
   1267c:	movw	r0, #26326	; 0x66d6
   12680:	movt	r0, #1
   12684:	mov	r1, ip
   12688:	bl	12468 <error@@Base+0x40>
   1268c:	push	{r4, r5, r6, sl, fp, lr}
   12690:	add	fp, sp, #16
   12694:	movw	r5, #28996	; 0x7144
   12698:	movt	r5, #2
   1269c:	ldrsh	r0, [r5]
   126a0:	cmp	r0, #1
   126a4:	blt	126d8 <error@@Base+0x2b0>
   126a8:	mov	r6, #1
   126ac:	sxth	r0, r6
   126b0:	bl	12218 <__assert_fail@plt+0x14f8>
   126b4:	mov	r4, r0
   126b8:	bl	10bdc <unlink@plt>
   126bc:	mov	r0, r4
   126c0:	bl	10b94 <free@plt>
   126c4:	add	r0, r6, #1
   126c8:	sxth	r6, r0
   126cc:	ldrsh	r0, [r5]
   126d0:	cmp	r6, r0
   126d4:	ble	126ac <error@@Base+0x284>
   126d8:	pop	{r4, r5, r6, sl, fp, pc}
   126dc:	push	{r4, r5, r6, sl, fp, lr}
   126e0:	add	fp, sp, #16
   126e4:	mov	r4, r2
   126e8:	mov	r5, r1
   126ec:	mov	r6, r0
   126f0:	mov	r0, #1
   126f4:	mov	r1, #16
   126f8:	bl	12074 <__assert_fail@plt+0x1354>
   126fc:	mov	r1, r0
   12700:	str	r4, [r0, #12]
   12704:	strb	r5, [r0, #8]
   12708:	mov	r0, r6
   1270c:	pop	{r4, r5, r6, sl, fp, lr}
   12710:	b	12e3c <error@@Base+0xa14>
   12714:	push	{r4, r5, r6, r7, fp, lr}
   12718:	add	fp, sp, #16
   1271c:	mov	r5, r2
   12720:	mov	r2, r1
   12724:	mov	r4, r0
   12728:	cmp	r1, #0
   1272c:	bne	1273c <error@@Base+0x314>
   12730:	ldrb	r0, [r5]
   12734:	cmp	r0, #0
   12738:	bne	127d8 <error@@Base+0x3b0>
   1273c:	ldr	r7, [r4, #4]
   12740:	movw	r1, #26545	; 0x67b1
   12744:	movt	r1, #1
   12748:	mov	r0, r2
   1274c:	bl	12118 <__assert_fail@plt+0x13f8>
   12750:	mov	r6, r0
   12754:	ldrb	r0, [r5]
   12758:	cmp	r0, #0
   1275c:	beq	1276c <error@@Base+0x344>
   12760:	mov	r0, r6
   12764:	bl	127ec <error@@Base+0x3c4>
   12768:	strb	r0, [r5, #11]
   1276c:	ldrb	r2, [r5, #1]
   12770:	ldr	r3, [r5, #4]
   12774:	cmp	r3, #0
   12778:	movweq	r3, #94	; 0x5e
   1277c:	mov	r0, r6
   12780:	mov	r1, r4
   12784:	bl	1289c <error@@Base+0x474>
   12788:	mov	r0, r6
   1278c:	bl	12190 <__assert_fail@plt+0x1470>
   12790:	ldrb	r0, [r5, #9]
   12794:	cmp	r0, #0
   12798:	beq	127b4 <error@@Base+0x38c>
   1279c:	cmp	r7, #0
   127a0:	mov	r0, r4
   127a4:	addne	r0, r7, #4
   127a8:	ldr	r1, [r0]
   127ac:	mov	r0, r4
   127b0:	bl	129ac <error@@Base+0x584>
   127b4:	ldrb	r0, [r5, #10]
   127b8:	cmp	r0, #0
   127bc:	beq	127d4 <error@@Base+0x3ac>
   127c0:	cmp	r7, #0
   127c4:	addne	r4, r7, #4
   127c8:	ldr	r0, [r4]
   127cc:	pop	{r4, r5, r6, r7, fp, lr}
   127d0:	b	12a90 <error@@Base+0x668>
   127d4:	pop	{r4, r5, r6, r7, fp, pc}
   127d8:	movw	r0, #26343	; 0x66e7
   127dc:	movt	r0, #1
   127e0:	movw	r1, #26359	; 0x66f7
   127e4:	movt	r1, #1
   127e8:	bl	12468 <error@@Base+0x40>
   127ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   127f0:	add	fp, sp, #24
   127f4:	sub	sp, sp, #104	; 0x68
   127f8:	mov	r4, r0
   127fc:	add	r0, sp, #4
   12800:	mov	r1, #99	; 0x63
   12804:	mov	r2, r4
   12808:	bl	10bac <fgets@plt>
   1280c:	cmp	r0, #0
   12810:	beq	12830 <error@@Base+0x408>
   12814:	add	r0, sp, #4
   12818:	movw	r1, #26411	; 0x672b
   1281c:	movt	r1, #1
   12820:	mov	r2, #51	; 0x33
   12824:	bl	10c6c <bcmp@plt>
   12828:	cmp	r0, #0
   1282c:	beq	12848 <error@@Base+0x420>
   12830:	mov	r0, r4
   12834:	bl	10bd0 <rewind@plt>
   12838:	mov	r7, #0
   1283c:	mov	r0, r7
   12840:	sub	sp, fp, #24
   12844:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12848:	mov	r6, #0
   1284c:	add	r5, sp, #4
   12850:	movw	r8, #26467	; 0x6763
   12854:	movt	r8, #1
   12858:	mov	r7, #1
   1285c:	mov	r0, r5
   12860:	mov	r1, #99	; 0x63
   12864:	mov	r2, r4
   12868:	bl	10bac <fgets@plt>
   1286c:	cmp	r0, #0
   12870:	beq	1283c <error@@Base+0x414>
   12874:	mov	r0, r5
   12878:	mov	r1, r8
   1287c:	mov	r2, #56	; 0x38
   12880:	bl	10c6c <bcmp@plt>
   12884:	cmp	r0, #0
   12888:	addeq	r6, r6, #1
   1288c:	uxth	r0, r6
   12890:	cmp	r0, #2
   12894:	bcc	1285c <error@@Base+0x434>
   12898:	b	1283c <error@@Base+0x414>
   1289c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128a0:	add	fp, sp, #28
   128a4:	sub	sp, sp, #20
   128a8:	str	r3, [sp, #8]
   128ac:	mov	r5, r2
   128b0:	str	r1, [sp, #4]
   128b4:	mov	r9, r0
   128b8:	bl	10d14 <getc@plt>
   128bc:	cmn	r0, #1
   128c0:	beq	12984 <error@@Base+0x55c>
   128c4:	uxtb	r8, r5
   128c8:	add	r4, sp, #16
   128cc:	add	r1, r4, #1
   128d0:	str	r1, [sp]
   128d4:	mov	r7, #0
   128d8:	movw	r6, #28160	; 0x6e00
   128dc:	movt	r6, #2
   128e0:	b	12908 <error@@Base+0x4e0>
   128e4:	ldr	r0, [sp, #4]
   128e8:	mov	r1, r7
   128ec:	bl	126dc <error@@Base+0x2b4>
   128f0:	mov	r5, #0
   128f4:	mov	r0, r9
   128f8:	bl	10d14 <getc@plt>
   128fc:	cmn	r0, #1
   12900:	mov	r7, r5
   12904:	beq	12984 <error@@Base+0x55c>
   12908:	add	r1, r6, r0
   1290c:	ldrsb	sl, [r1]
   12910:	cmp	sl, #0
   12914:	ble	1298c <error@@Base+0x564>
   12918:	strb	r0, [sp, #16]
   1291c:	cmp	sl, #1
   12920:	beq	1294c <error@@Base+0x524>
   12924:	mov	r5, r8
   12928:	sub	r8, sl, #1
   1292c:	ldr	r0, [sp]
   12930:	mov	r1, #1
   12934:	mov	r2, r8
   12938:	mov	r3, r9
   1293c:	bl	10c0c <fread@plt>
   12940:	cmp	r0, r8
   12944:	mov	r8, r5
   12948:	bne	129a0 <error@@Base+0x578>
   1294c:	mov	r0, r4
   12950:	mov	r1, #4
   12954:	add	r2, sp, #12
   12958:	bl	10c18 <utf8proc_iterate@plt>
   1295c:	cmp	r0, sl
   12960:	bne	12998 <error@@Base+0x570>
   12964:	ldr	r2, [sp, #12]
   12968:	cmp	r8, #0
   1296c:	beq	128e4 <error@@Base+0x4bc>
   12970:	mov	r5, #1
   12974:	ldr	r0, [sp, #8]
   12978:	cmp	r2, r0
   1297c:	beq	128f4 <error@@Base+0x4cc>
   12980:	b	128e4 <error@@Base+0x4bc>
   12984:	sub	sp, fp, #28
   12988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1298c:	movw	r0, #26523	; 0x679b
   12990:	movt	r0, #1
   12994:	bl	12428 <error@@Base>
   12998:	bl	10ce4 <utf8proc_errmsg@plt>
   1299c:	bl	12428 <error@@Base>
   129a0:	movw	r0, #26547	; 0x67b3
   129a4:	movt	r0, #1
   129a8:	bl	12428 <error@@Base>
   129ac:	push	{r4, r5, r6, r7, fp, lr}
   129b0:	add	fp, sp, #16
   129b4:	cmp	r1, #0
   129b8:	beq	12a8c <error@@Base+0x664>
   129bc:	mov	r5, r1
   129c0:	mov	r4, r0
   129c4:	mov	r6, #32
   129c8:	mov	r7, r1
   129cc:	ldr	r0, [r7, #12]
   129d0:	bl	12d6c <error@@Base+0x944>
   129d4:	cmp	r0, #0
   129d8:	strne	r6, [r7, #12]
   129dc:	ldr	r7, [r7, #4]
   129e0:	cmp	r7, #0
   129e4:	bne	129cc <error@@Base+0x5a4>
   129e8:	mov	r6, #0
   129ec:	b	12a10 <error@@Base+0x5e8>
   129f0:	mov	r0, r4
   129f4:	mov	r1, r5
   129f8:	bl	12e64 <error@@Base+0xa3c>
   129fc:	mov	r0, r5
   12a00:	bl	10b94 <free@plt>
   12a04:	cmp	r7, #0
   12a08:	mov	r5, r7
   12a0c:	beq	12a8c <error@@Base+0x664>
   12a10:	ldr	r7, [r5, #4]
   12a14:	ldr	r1, [r5, #12]
   12a18:	cmp	r1, #32
   12a1c:	bne	12a58 <error@@Base+0x630>
   12a20:	tst	r6, #255	; 0xff
   12a24:	cmpne	r7, #0
   12a28:	bne	12a74 <error@@Base+0x64c>
   12a2c:	tst	r6, #255	; 0xff
   12a30:	cmpne	r7, #0
   12a34:	beq	129f0 <error@@Base+0x5c8>
   12a38:	ldr	r0, [r7, #12]
   12a3c:	cmp	r0, #32
   12a40:	bne	129f0 <error@@Base+0x5c8>
   12a44:	ldrb	r0, [r5, #8]
   12a48:	ldrb	r1, [r7, #8]
   12a4c:	orr	r0, r1, r0
   12a50:	strb	r0, [r7, #8]
   12a54:	b	129f0 <error@@Base+0x5c8>
   12a58:	subs	r0, r1, #10
   12a5c:	movwne	r0, #1
   12a60:	tst	r6, #255	; 0xff
   12a64:	cmpeq	r1, #10
   12a68:	beq	129f0 <error@@Base+0x5c8>
   12a6c:	mov	r6, r0
   12a70:	b	12a04 <error@@Base+0x5dc>
   12a74:	ldr	r1, [r7, #12]
   12a78:	cmp	r1, #10
   12a7c:	movne	r0, #1
   12a80:	cmpne	r1, #32
   12a84:	beq	12a2c <error@@Base+0x604>
   12a88:	b	12a6c <error@@Base+0x644>
   12a8c:	pop	{r4, r5, r6, r7, fp, pc}
   12a90:	push	{r4, sl, fp, lr}
   12a94:	add	fp, sp, #8
   12a98:	cmp	r0, #0
   12a9c:	popeq	{r4, sl, fp, pc}
   12aa0:	mov	r4, r0
   12aa4:	ldr	r0, [r4, #12]
   12aa8:	bl	10be8 <utf8proc_tolower@plt>
   12aac:	str	r0, [r4, #12]
   12ab0:	ldr	r4, [r4, #4]
   12ab4:	cmp	r4, #0
   12ab8:	bne	12aa4 <error@@Base+0x67c>
   12abc:	pop	{r4, sl, fp, pc}
   12ac0:	push	{fp, lr}
   12ac4:	mov	fp, sp
   12ac8:	bl	10bb8 <utf8proc_encode_char@plt>
   12acc:	cmp	r0, #0
   12ad0:	sxtbgt	r0, r0
   12ad4:	popgt	{fp, pc}
   12ad8:	movw	r0, #26369	; 0x6701
   12adc:	movt	r0, #1
   12ae0:	bl	12428 <error@@Base>
   12ae4:	push	{r4, r5, r6, r7, fp, lr}
   12ae8:	add	fp, sp, #16
   12aec:	mov	r7, r3
   12af0:	mov	r4, r2
   12af4:	mov	r5, r1
   12af8:	tst	r0, #255	; 0xff
   12afc:	beq	12b3c <error@@Base+0x714>
   12b00:	mov	r0, #94	; 0x5e
   12b04:	mov	r1, r4
   12b08:	bl	12ac0 <error@@Base+0x698>
   12b0c:	mov	r6, r0
   12b10:	cmp	r5, #10
   12b14:	bne	12b48 <error@@Base+0x720>
   12b18:	movw	r0, #26259	; 0x6693
   12b1c:	movt	r0, #1
   12b20:	movw	r1, #26392	; 0x6718
   12b24:	movt	r1, #1
   12b28:	tst	r7, #255	; 0xff
   12b2c:	moveq	r1, r0
   12b30:	add	r0, r4, r6
   12b34:	pop	{r4, r5, r6, r7, fp, lr}
   12b38:	b	10ccc <sprintf@plt>
   12b3c:	mov	r6, #0
   12b40:	cmp	r5, #10
   12b44:	beq	12b18 <error@@Base+0x6f0>
   12b48:	mov	r0, r5
   12b4c:	bl	12bc0 <error@@Base+0x798>
   12b50:	cmp	r0, #0
   12b54:	beq	12b94 <error@@Base+0x76c>
   12b58:	mov	r0, r5
   12b5c:	bl	12c00 <error@@Base+0x7d8>
   12b60:	cmp	r0, #0
   12b64:	beq	12b78 <error@@Base+0x750>
   12b68:	add	r1, r4, r6
   12b6c:	movw	r0, #9676	; 0x25cc
   12b70:	bl	12ac0 <error@@Base+0x698>
   12b74:	add	r6, r6, r0
   12b78:	add	r1, r4, r6
   12b7c:	mov	r0, r5
   12b80:	bl	12ac0 <error@@Base+0x698>
   12b84:	add	r0, r6, r0
   12b88:	mov	r1, #0
   12b8c:	strb	r1, [r4, r0]
   12b90:	pop	{r4, r5, r6, r7, fp, pc}
   12b94:	add	r0, r4, r6
   12b98:	cmp	r5, #255	; 0xff
   12b9c:	bhi	12bac <error@@Base+0x784>
   12ba0:	movw	r1, #26397	; 0x671d
   12ba4:	movt	r1, #1
   12ba8:	b	12bb4 <error@@Base+0x78c>
   12bac:	movw	r1, #26404	; 0x6724
   12bb0:	movt	r1, #1
   12bb4:	mov	r2, r5
   12bb8:	pop	{r4, r5, r6, r7, fp, lr}
   12bbc:	b	10ccc <sprintf@plt>
   12bc0:	push	{r4, sl, fp, lr}
   12bc4:	add	fp, sp, #8
   12bc8:	mov	r4, r0
   12bcc:	bl	10ba0 <utf8proc_get_property@plt>
   12bd0:	mov	r1, r0
   12bd4:	mov	r0, #1
   12bd8:	cmp	r4, #32
   12bdc:	popeq	{r4, sl, fp, pc}
   12be0:	ldrsh	r1, [r1]
   12be4:	sub	r2, r1, #1
   12be8:	cmp	r2, #22
   12bec:	bcs	12bf4 <error@@Base+0x7cc>
   12bf0:	pop	{r4, sl, fp, pc}
   12bf4:	cmp	r1, #29
   12bf8:	movne	r0, #0
   12bfc:	pop	{r4, sl, fp, pc}
   12c00:	push	{fp, lr}
   12c04:	mov	fp, sp
   12c08:	bl	10c78 <utf8proc_category@plt>
   12c0c:	sub	r1, r0, #6
   12c10:	mov	r0, #0
   12c14:	cmp	r1, #3
   12c18:	movwcc	r0, #1
   12c1c:	pop	{fp, pc}
   12c20:	push	{r4, r5, r6, r7, fp, lr}
   12c24:	add	fp, sp, #16
   12c28:	sub	sp, sp, #16
   12c2c:	mov	r6, r2
   12c30:	mov	r2, r1
   12c34:	mov	r5, r0
   12c38:	movw	r1, #12756	; 0x31d4
   12c3c:	movt	r1, #1
   12c40:	mov	r0, r2
   12c44:	bl	12118 <__assert_fail@plt+0x13f8>
   12c48:	mov	r4, r0
   12c4c:	cmp	r6, #0
   12c50:	beq	12ca4 <error@@Base+0x87c>
   12c54:	movw	r0, #26411	; 0x672b
   12c58:	movt	r0, #1
   12c5c:	mov	r1, #55	; 0x37
   12c60:	mov	r2, #1
   12c64:	mov	r3, r4
   12c68:	bl	10c00 <fwrite@plt>
   12c6c:	movw	r7, #26467	; 0x6763
   12c70:	movt	r7, #1
   12c74:	mov	r0, r7
   12c78:	mov	r1, #55	; 0x37
   12c7c:	mov	r2, #1
   12c80:	mov	r3, r4
   12c84:	bl	10c00 <fwrite@plt>
   12c88:	mov	r0, r4
   12c8c:	blx	r6
   12c90:	mov	r0, r7
   12c94:	mov	r1, #55	; 0x37
   12c98:	mov	r2, #1
   12c9c:	mov	r3, r4
   12ca0:	bl	10c00 <fwrite@plt>
   12ca4:	ldr	r6, [r5]
   12ca8:	cmp	r6, #0
   12cac:	beq	12ce0 <error@@Base+0x8b8>
   12cb0:	add	r5, sp, #7
   12cb4:	ldr	r1, [r6, #12]
   12cb8:	ldrb	r0, [r6, #8]
   12cbc:	mov	r2, r5
   12cc0:	mov	r3, #0
   12cc4:	bl	12ae4 <error@@Base+0x6bc>
   12cc8:	mov	r0, r5
   12ccc:	mov	r1, r4
   12cd0:	bl	10cf0 <fputs@plt>
   12cd4:	ldr	r6, [r6, #4]
   12cd8:	cmp	r6, #0
   12cdc:	bne	12cb4 <error@@Base+0x88c>
   12ce0:	mov	r0, r4
   12ce4:	bl	12190 <__assert_fail@plt+0x1470>
   12ce8:	sub	sp, fp, #16
   12cec:	pop	{r4, r5, r6, r7, fp, pc}
   12cf0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12cf4:	add	fp, sp, #24
   12cf8:	sub	sp, sp, #8
   12cfc:	mov	r6, r0
   12d00:	mov	r0, #0
   12d04:	str	r0, [sp, #4]
   12d08:	ldrb	r0, [r1]
   12d0c:	mov	r8, #1
   12d10:	cmp	r0, #0
   12d14:	beq	12d60 <error@@Base+0x938>
   12d18:	mov	r5, r1
   12d1c:	add	r7, sp, #4
   12d20:	mov	r0, r5
   12d24:	mvn	r1, #0
   12d28:	mov	r2, r7
   12d2c:	bl	10c18 <utf8proc_iterate@plt>
   12d30:	cmp	r0, #1
   12d34:	blt	12d5c <error@@Base+0x934>
   12d38:	mov	r4, r0
   12d3c:	ldr	r2, [sp, #4]
   12d40:	mov	r0, r6
   12d44:	mov	r1, #0
   12d48:	bl	126dc <error@@Base+0x2b4>
   12d4c:	ldrb	r0, [r5, r4]!
   12d50:	cmp	r0, #0
   12d54:	bne	12d20 <error@@Base+0x8f8>
   12d58:	b	12d60 <error@@Base+0x938>
   12d5c:	mov	r8, #0
   12d60:	mov	r0, r8
   12d64:	sub	sp, fp, #24
   12d68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d6c:	push	{r4, sl, fp, lr}
   12d70:	add	fp, sp, #8
   12d74:	mov	r4, r0
   12d78:	bl	10ba0 <utf8proc_get_property@plt>
   12d7c:	cmp	r4, #10
   12d80:	ble	12d9c <error@@Base+0x974>
   12d84:	sub	r1, r4, #11
   12d88:	cmp	r1, #3
   12d8c:	bcc	12db8 <error@@Base+0x990>
   12d90:	cmp	r4, #160	; 0xa0
   12d94:	beq	12db8 <error@@Base+0x990>
   12d98:	b	12dc4 <error@@Base+0x99c>
   12d9c:	cmp	r4, #9
   12da0:	beq	12db8 <error@@Base+0x990>
   12da4:	mov	r1, #0
   12da8:	cmp	r4, #10
   12dac:	bne	12dc4 <error@@Base+0x99c>
   12db0:	mov	r0, r1
   12db4:	pop	{r4, sl, fp, pc}
   12db8:	mov	r1, #1
   12dbc:	mov	r0, r1
   12dc0:	pop	{r4, sl, fp, pc}
   12dc4:	ldrsh	r0, [r0]
   12dc8:	sub	r0, r0, #23
   12dcc:	mov	r1, #0
   12dd0:	cmp	r0, #3
   12dd4:	movwcc	r1, #1
   12dd8:	mov	r0, r1
   12ddc:	pop	{r4, sl, fp, pc}
   12de0:	vmov.i32	q8, #0	; 0x00000000
   12de4:	vst1.32	{d16-d17}, [r0]
   12de8:	bx	lr
   12dec:	mov	r2, r1
   12df0:	ldr	r3, [r0]
   12df4:	mov	r1, #0
   12df8:	b	12dfc <error@@Base+0x9d4>
   12dfc:	push	{r4, sl, fp, lr}
   12e00:	add	fp, sp, #8
   12e04:	mov	r4, r0
   12e08:	stm	r2, {r1, r3}
   12e0c:	cmp	r1, #0
   12e10:	addne	r0, r1, #4
   12e14:	str	r2, [r0]
   12e18:	cmp	r3, #0
   12e1c:	addeq	r3, r4, #4
   12e20:	str	r2, [r3]
   12e24:	mov	r0, r4
   12e28:	bl	12eb8 <error@@Base+0xa90>
   12e2c:	ldr	r0, [r4, #12]
   12e30:	add	r0, r0, #1
   12e34:	str	r0, [r4, #12]
   12e38:	pop	{r4, sl, fp, pc}
   12e3c:	mov	r2, r1
   12e40:	ldr	r1, [r0, #4]
   12e44:	mov	r3, #0
   12e48:	b	12dfc <error@@Base+0x9d4>
   12e4c:	mov	r3, r2
   12e50:	mov	r2, r1
   12e54:	ldr	r1, [r3]
   12e58:	b	12dfc <error@@Base+0x9d4>
   12e5c:	ldr	r3, [r1, #4]
   12e60:	b	12dfc <error@@Base+0x9d4>
   12e64:	push	{r4, sl, fp, lr}
   12e68:	add	fp, sp, #8
   12e6c:	mov	r4, r0
   12e70:	ldm	r1, {r0, r2}
   12e74:	cmp	r0, #0
   12e78:	mov	r3, r4
   12e7c:	addne	r3, r0, #4
   12e80:	str	r2, [r3]
   12e84:	ldm	r1, {r0, r2}
   12e88:	cmp	r2, #0
   12e8c:	addeq	r2, r4, #4
   12e90:	str	r0, [r2]
   12e94:	mov	r0, #0
   12e98:	str	r0, [r1]
   12e9c:	str	r0, [r1, #4]
   12ea0:	mov	r0, r4
   12ea4:	bl	12eb8 <error@@Base+0xa90>
   12ea8:	ldr	r0, [r4, #12]
   12eac:	sub	r0, r0, #1
   12eb0:	str	r0, [r4, #12]
   12eb4:	pop	{r4, sl, fp, pc}
   12eb8:	push	{r4, sl, fp, lr}
   12ebc:	add	fp, sp, #8
   12ec0:	mov	r4, r0
   12ec4:	ldr	r0, [r0, #8]
   12ec8:	cmp	r0, #0
   12ecc:	popeq	{r4, sl, fp, pc}
   12ed0:	bl	10b94 <free@plt>
   12ed4:	mov	r0, #0
   12ed8:	str	r0, [r4, #8]
   12edc:	pop	{r4, sl, fp, pc}
   12ee0:	push	{r4, sl, fp, lr}
   12ee4:	add	fp, sp, #8
   12ee8:	mov	r4, r0
   12eec:	ldr	r0, [r0, #8]
   12ef0:	cmp	r0, #0
   12ef4:	bne	12f38 <error@@Base+0xb10>
   12ef8:	ldr	r0, [r4, #12]
   12efc:	cmp	r0, #0
   12f00:	beq	12f38 <error@@Base+0xb10>
   12f04:	mov	r1, #4
   12f08:	bl	12074 <__assert_fail@plt+0x1354>
   12f0c:	str	r0, [r4, #8]
   12f10:	ldr	r0, [r4]
   12f14:	cmp	r0, #0
   12f18:	popeq	{r4, sl, fp, pc}
   12f1c:	mov	r1, #0
   12f20:	ldr	r2, [r4, #8]
   12f24:	str	r0, [r2, r1]
   12f28:	add	r1, r1, #4
   12f2c:	ldr	r0, [r0, #4]
   12f30:	cmp	r0, #0
   12f34:	bne	12f20 <error@@Base+0xaf8>
   12f38:	pop	{r4, sl, fp, pc}
   12f3c:	push	{r4, r5, r6, sl, fp, lr}
   12f40:	add	fp, sp, #16
   12f44:	ldr	r6, [r0]
   12f48:	cmp	r6, #0
   12f4c:	beq	12f78 <error@@Base+0xb50>
   12f50:	mov	r4, r1
   12f54:	mov	r5, r0
   12f58:	mov	r0, r5
   12f5c:	mov	r1, r6
   12f60:	bl	12e64 <error@@Base+0xa3c>
   12f64:	mov	r0, r6
   12f68:	blx	r4
   12f6c:	ldr	r6, [r5]
   12f70:	cmp	r6, #0
   12f74:	bne	12f58 <error@@Base+0xb30>
   12f78:	pop	{r4, r5, r6, sl, fp, pc}
   12f7c:	cmp	r0, #2
   12f80:	bxlt	lr
   12f84:	movw	r3, #29004	; 0x714c
   12f88:	movt	r3, #2
   12f8c:	str	r2, [r3]
   12f90:	movw	r2, #29000	; 0x7148
   12f94:	movt	r2, #2
   12f98:	str	r1, [r2]
   12f9c:	sub	r1, r0, #1
   12fa0:	mov	r0, #0
   12fa4:	b	12fa8 <error@@Base+0xb80>
   12fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fac:	add	fp, sp, #28
   12fb0:	sub	sp, sp, #4
   12fb4:	mov	r8, r1
   12fb8:	mov	r9, r0
   12fbc:	movw	r7, #29000	; 0x7148
   12fc0:	movt	r7, #2
   12fc4:	movw	sl, #29004	; 0x714c
   12fc8:	movt	sl, #2
   12fcc:	b	12ff4 <error@@Base+0xbcc>
   12fd0:	ldr	r0, [r7]
   12fd4:	str	r6, [r0, r4, lsl #2]
   12fd8:	sub	r1, r4, #1
   12fdc:	cmp	r1, r9
   12fe0:	movgt	r0, r9
   12fe4:	blgt	12fa8 <error@@Base+0xb80>
   12fe8:	add	r9, r5, #1
   12fec:	cmp	r9, r8
   12ff0:	bge	130bc <error@@Base+0xc94>
   12ff4:	ldr	r0, [r7]
   12ff8:	ldr	r6, [r0, r9, lsl #2]
   12ffc:	cmp	r9, r8
   13000:	mov	r4, r8
   13004:	mov	r5, r9
   13008:	bge	12fd0 <error@@Base+0xba8>
   1300c:	mov	r5, r9
   13010:	mov	r4, r8
   13014:	cmp	r5, r4
   13018:	blt	13030 <error@@Base+0xc08>
   1301c:	b	13058 <error@@Base+0xc30>
   13020:	cmp	r5, r4
   13024:	bge	12fd0 <error@@Base+0xba8>
   13028:	cmp	r5, r4
   1302c:	bge	13058 <error@@Base+0xc30>
   13030:	ldr	r0, [r7]
   13034:	ldr	r1, [r0, r4, lsl #2]
   13038:	ldr	r2, [sl]
   1303c:	mov	r0, r6
   13040:	blx	r2
   13044:	cmn	r0, #1
   13048:	bgt	13058 <error@@Base+0xc30>
   1304c:	sub	r4, r4, #1
   13050:	cmp	r5, r4
   13054:	blt	13030 <error@@Base+0xc08>
   13058:	cmp	r5, r4
   1305c:	beq	13070 <error@@Base+0xc48>
   13060:	ldr	r0, [r7]
   13064:	ldr	r1, [r0, r4, lsl #2]
   13068:	str	r1, [r0, r5, lsl #2]
   1306c:	add	r5, r5, #1
   13070:	cmp	r5, r4
   13074:	bge	130a0 <error@@Base+0xc78>
   13078:	ldr	r0, [r7]
   1307c:	ldr	r1, [r0, r5, lsl #2]
   13080:	ldr	r2, [sl]
   13084:	mov	r0, r6
   13088:	blx	r2
   1308c:	cmp	r0, #1
   13090:	blt	130a0 <error@@Base+0xc78>
   13094:	add	r5, r5, #1
   13098:	cmp	r4, r5
   1309c:	bne	13078 <error@@Base+0xc50>
   130a0:	cmp	r5, r4
   130a4:	beq	13020 <error@@Base+0xbf8>
   130a8:	ldr	r0, [r7]
   130ac:	ldr	r1, [r0, r5, lsl #2]
   130b0:	str	r1, [r0, r4, lsl #2]
   130b4:	sub	r4, r4, #1
   130b8:	b	13020 <error@@Base+0xbf8>
   130bc:	sub	sp, fp, #28
   130c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   130c8:	mov	r7, r0
   130cc:	ldr	r6, [pc, #72]	; 1311c <error@@Base+0xcf4>
   130d0:	ldr	r5, [pc, #72]	; 13120 <error@@Base+0xcf8>
   130d4:	add	r6, pc, r6
   130d8:	add	r5, pc, r5
   130dc:	sub	r6, r6, r5
   130e0:	mov	r8, r1
   130e4:	mov	r9, r2
   130e8:	bl	10b44 <calloc@plt-0x20>
   130ec:	asrs	r6, r6, #2
   130f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   130f4:	mov	r4, #0
   130f8:	add	r4, r4, #1
   130fc:	ldr	r3, [r5], #4
   13100:	mov	r2, r9
   13104:	mov	r1, r8
   13108:	mov	r0, r7
   1310c:	blx	r3
   13110:	cmp	r6, r4
   13114:	bne	130f8 <error@@Base+0xcd0>
   13118:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1311c:	andeq	r3, r1, r0, lsr #26
   13120:	andeq	r3, r1, r8, lsl sp
   13124:	bx	lr
   13128:	mov	r2, r1
   1312c:	mov	r1, r0
   13130:	mov	r0, #3
   13134:	b	10bf4 <__xstat@plt>

Disassembly of section .fini:

00013138 <.fini>:
   13138:	push	{r3, lr}
   1313c:	pop	{r3, pc}
