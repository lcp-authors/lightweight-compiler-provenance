
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011468 <.init>:
   11468:	push	{r3, lr}
   1146c:	bl	1189c <__assert_fail@plt+0x48>
   11470:	pop	{r3, pc}

Disassembly of section .plt:

00011474 <fstatfs64@plt-0x14>:
   11474:	push	{lr}		; (str lr, [sp, #-4]!)
   11478:	ldr	lr, [pc, #4]	; 11484 <fstatfs64@plt-0x4>
   1147c:	add	lr, pc, lr
   11480:	ldr	pc, [lr, #8]!
   11484:	andeq	fp, r1, ip, ror fp

00011488 <fstatfs64@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #110592	; 0x1b000
   11490:	ldr	pc, [ip, #2940]!	; 0xb7c

00011494 <calloc@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #110592	; 0x1b000
   1149c:	ldr	pc, [ip, #2932]!	; 0xb74

000114a0 <fputs_unlocked@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #110592	; 0x1b000
   114a8:	ldr	pc, [ip, #2924]!	; 0xb6c

000114ac <raise@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #110592	; 0x1b000
   114b4:	ldr	pc, [ip, #2916]!	; 0xb64

000114b8 <is_selinux_enabled@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #110592	; 0x1b000
   114c0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114c4 <strcmp@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #110592	; 0x1b000
   114cc:	ldr	pc, [ip, #2900]!	; 0xb54

000114d0 <fflush@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #110592	; 0x1b000
   114d8:	ldr	pc, [ip, #2892]!	; 0xb4c

000114dc <lsetfilecon@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #110592	; 0x1b000
   114e4:	ldr	pc, [ip, #2884]!	; 0xb44

000114e8 <memmove@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #110592	; 0x1b000
   114f0:	ldr	pc, [ip, #2876]!	; 0xb3c

000114f4 <free@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #110592	; 0x1b000
   114fc:	ldr	pc, [ip, #2868]!	; 0xb34

00011500 <_exit@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #110592	; 0x1b000
   11508:	ldr	pc, [ip, #2860]!	; 0xb2c

0001150c <memcpy@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #110592	; 0x1b000
   11514:	ldr	pc, [ip, #2852]!	; 0xb24

00011518 <mbsinit@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #110592	; 0x1b000
   11520:	ldr	pc, [ip, #2844]!	; 0xb1c

00011524 <context_new@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #110592	; 0x1b000
   1152c:	ldr	pc, [ip, #2836]!	; 0xb14

00011530 <memcmp@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #110592	; 0x1b000
   11538:	ldr	pc, [ip, #2828]!	; 0xb0c

0001153c <context_role_set@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #110592	; 0x1b000
   11544:	ldr	pc, [ip, #2820]!	; 0xb04

00011548 <dcgettext@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #110592	; 0x1b000
   11550:	ldr	pc, [ip, #2812]!	; 0xafc

00011554 <context_type_set@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #110592	; 0x1b000
   1155c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011560 <realloc@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #110592	; 0x1b000
   11568:	ldr	pc, [ip, #2796]!	; 0xaec

0001156c <fgetfilecon@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #110592	; 0x1b000
   11574:	ldr	pc, [ip, #2788]!	; 0xae4

00011578 <textdomain@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #110592	; 0x1b000
   11580:	ldr	pc, [ip, #2780]!	; 0xadc

00011584 <chdir@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #110592	; 0x1b000
   1158c:	ldr	pc, [ip, #2772]!	; 0xad4

00011590 <__fxstatat64@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #110592	; 0x1b000
   11598:	ldr	pc, [ip, #2764]!	; 0xacc

0001159c <iswprint@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #110592	; 0x1b000
   115a4:	ldr	pc, [ip, #2756]!	; 0xac4

000115a8 <__fxstat64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #110592	; 0x1b000
   115b0:	ldr	pc, [ip, #2748]!	; 0xabc

000115b4 <fwrite@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #110592	; 0x1b000
   115bc:	ldr	pc, [ip, #2740]!	; 0xab4

000115c0 <lseek64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #110592	; 0x1b000
   115c8:	ldr	pc, [ip, #2732]!	; 0xaac

000115cc <__ctype_get_mb_cur_max@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #110592	; 0x1b000
   115d4:	ldr	pc, [ip, #2724]!	; 0xaa4

000115d8 <strcpy@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #110592	; 0x1b000
   115e0:	ldr	pc, [ip, #2716]!	; 0xa9c

000115e4 <__fpending@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #110592	; 0x1b000
   115ec:	ldr	pc, [ip, #2708]!	; 0xa94

000115f0 <mbrtowc@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #110592	; 0x1b000
   115f8:	ldr	pc, [ip, #2700]!	; 0xa8c

000115fc <error@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #110592	; 0x1b000
   11604:	ldr	pc, [ip, #2692]!	; 0xa84

00011608 <security_check_context@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #110592	; 0x1b000
   11610:	ldr	pc, [ip, #2684]!	; 0xa7c

00011614 <open64@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #110592	; 0x1b000
   1161c:	ldr	pc, [ip, #2676]!	; 0xa74

00011620 <lgetfilecon@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #110592	; 0x1b000
   11628:	ldr	pc, [ip, #2668]!	; 0xa6c

0001162c <malloc@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #110592	; 0x1b000
   11634:	ldr	pc, [ip, #2660]!	; 0xa64

00011638 <__libc_start_main@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #110592	; 0x1b000
   11640:	ldr	pc, [ip, #2652]!	; 0xa5c

00011644 <__freading@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #110592	; 0x1b000
   1164c:	ldr	pc, [ip, #2644]!	; 0xa54

00011650 <__gmon_start__@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #110592	; 0x1b000
   11658:	ldr	pc, [ip, #2636]!	; 0xa4c

0001165c <context_free@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #110592	; 0x1b000
   11664:	ldr	pc, [ip, #2628]!	; 0xa44

00011668 <getopt_long@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #110592	; 0x1b000
   11670:	ldr	pc, [ip, #2620]!	; 0xa3c

00011674 <__ctype_b_loc@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #110592	; 0x1b000
   1167c:	ldr	pc, [ip, #2612]!	; 0xa34

00011680 <getcwd@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #110592	; 0x1b000
   11688:	ldr	pc, [ip, #2604]!	; 0xa2c

0001168c <exit@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #110592	; 0x1b000
   11694:	ldr	pc, [ip, #2596]!	; 0xa24

00011698 <context_user_set@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #110592	; 0x1b000
   116a0:	ldr	pc, [ip, #2588]!	; 0xa1c

000116a4 <getfilecon@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #110592	; 0x1b000
   116ac:	ldr	pc, [ip, #2580]!	; 0xa14

000116b0 <strlen@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #110592	; 0x1b000
   116b8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116bc <openat64@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #110592	; 0x1b000
   116c4:	ldr	pc, [ip, #2564]!	; 0xa04

000116c8 <memrchr@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #110592	; 0x1b000
   116d0:	ldr	pc, [ip, #2556]!	; 0x9fc

000116d4 <__errno_location@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #110592	; 0x1b000
   116dc:	ldr	pc, [ip, #2548]!	; 0x9f4

000116e0 <__sprintf_chk@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #110592	; 0x1b000
   116e8:	ldr	pc, [ip, #2540]!	; 0x9ec

000116ec <__cxa_atexit@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #110592	; 0x1b000
   116f4:	ldr	pc, [ip, #2532]!	; 0x9e4

000116f8 <memset@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #110592	; 0x1b000
   11700:	ldr	pc, [ip, #2524]!	; 0x9dc

00011704 <__printf_chk@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #110592	; 0x1b000
   1170c:	ldr	pc, [ip, #2516]!	; 0x9d4

00011710 <fileno@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #110592	; 0x1b000
   11718:	ldr	pc, [ip, #2508]!	; 0x9cc

0001171c <__fprintf_chk@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #110592	; 0x1b000
   11724:	ldr	pc, [ip, #2500]!	; 0x9c4

00011728 <memchr@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #110592	; 0x1b000
   11730:	ldr	pc, [ip, #2492]!	; 0x9bc

00011734 <setfilecon@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #110592	; 0x1b000
   1173c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011740 <access@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #110592	; 0x1b000
   11748:	ldr	pc, [ip, #2476]!	; 0x9ac

0001174c <fclose@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #110592	; 0x1b000
   11754:	ldr	pc, [ip, #2468]!	; 0x9a4

00011758 <fseeko64@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #110592	; 0x1b000
   11760:	ldr	pc, [ip, #2460]!	; 0x99c

00011764 <fcntl64@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #110592	; 0x1b000
   1176c:	ldr	pc, [ip, #2452]!	; 0x994

00011770 <setlocale@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #110592	; 0x1b000
   11778:	ldr	pc, [ip, #2444]!	; 0x98c

0001177c <strrchr@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #110592	; 0x1b000
   11784:	ldr	pc, [ip, #2436]!	; 0x984

00011788 <nl_langinfo@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #110592	; 0x1b000
   11790:	ldr	pc, [ip, #2428]!	; 0x97c

00011794 <readdir64@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #110592	; 0x1b000
   1179c:	ldr	pc, [ip, #2420]!	; 0x974

000117a0 <fdopendir@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #110592	; 0x1b000
   117a8:	ldr	pc, [ip, #2412]!	; 0x96c

000117ac <dirfd@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #110592	; 0x1b000
   117b4:	ldr	pc, [ip, #2404]!	; 0x964

000117b8 <fchdir@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #110592	; 0x1b000
   117c0:	ldr	pc, [ip, #2396]!	; 0x95c

000117c4 <qsort@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #110592	; 0x1b000
   117cc:	ldr	pc, [ip, #2388]!	; 0x954

000117d0 <freecon@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #110592	; 0x1b000
   117d8:	ldr	pc, [ip, #2380]!	; 0x94c

000117dc <bindtextdomain@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #110592	; 0x1b000
   117e4:	ldr	pc, [ip, #2372]!	; 0x944

000117e8 <context_range_set@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #110592	; 0x1b000
   117f0:	ldr	pc, [ip, #2364]!	; 0x93c

000117f4 <context_str@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #110592	; 0x1b000
   117fc:	ldr	pc, [ip, #2356]!	; 0x934

00011800 <__xstat64@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #110592	; 0x1b000
   11808:	ldr	pc, [ip, #2348]!	; 0x92c

0001180c <strncmp@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #110592	; 0x1b000
   11814:	ldr	pc, [ip, #2340]!	; 0x924

00011818 <abort@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #110592	; 0x1b000
   11820:	ldr	pc, [ip, #2332]!	; 0x91c

00011824 <close@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #110592	; 0x1b000
   1182c:	ldr	pc, [ip, #2324]!	; 0x914

00011830 <__lxstat64@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #110592	; 0x1b000
   11838:	ldr	pc, [ip, #2316]!	; 0x90c

0001183c <closedir@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #110592	; 0x1b000
   11844:	ldr	pc, [ip, #2308]!	; 0x904

00011848 <strspn@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #110592	; 0x1b000
   11850:	ldr	pc, [ip, #2300]!	; 0x8fc

00011854 <__assert_fail@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #110592	; 0x1b000
   1185c:	ldr	pc, [ip, #2292]!	; 0x8f4

Disassembly of section .text:

00011860 <.text>:
   11860:	mov	fp, #0
   11864:	mov	lr, #0
   11868:	pop	{r1}		; (ldr r1, [sp], #4)
   1186c:	mov	r2, sp
   11870:	push	{r2}		; (str r2, [sp, #-4]!)
   11874:	push	{r0}		; (str r0, [sp, #-4]!)
   11878:	ldr	ip, [pc, #16]	; 11890 <__assert_fail@plt+0x3c>
   1187c:	push	{ip}		; (str ip, [sp, #-4]!)
   11880:	ldr	r0, [pc, #12]	; 11894 <__assert_fail@plt+0x40>
   11884:	ldr	r3, [pc, #12]	; 11898 <__assert_fail@plt+0x44>
   11888:	bl	11638 <__libc_start_main@plt>
   1188c:	bl	11818 <abort@plt>
   11890:			; <UNDEFINED> instruction: 0x0001aabc
   11894:	andeq	r1, r1, ip, ror ip
   11898:	andeq	sl, r1, ip, asr sl
   1189c:	ldr	r3, [pc, #20]	; 118b8 <__assert_fail@plt+0x64>
   118a0:	ldr	r2, [pc, #20]	; 118bc <__assert_fail@plt+0x68>
   118a4:	add	r3, pc, r3
   118a8:	ldr	r2, [r3, r2]
   118ac:	cmp	r2, #0
   118b0:	bxeq	lr
   118b4:	b	11650 <__gmon_start__@plt>
   118b8:	andeq	fp, r1, r4, asr r7
   118bc:	andeq	r0, r0, r4, asr r1
   118c0:	ldr	r0, [pc, #24]	; 118e0 <__assert_fail@plt+0x8c>
   118c4:	ldr	r3, [pc, #24]	; 118e4 <__assert_fail@plt+0x90>
   118c8:	cmp	r3, r0
   118cc:	bxeq	lr
   118d0:	ldr	r3, [pc, #16]	; 118e8 <__assert_fail@plt+0x94>
   118d4:	cmp	r3, #0
   118d8:	bxeq	lr
   118dc:	bx	r3
   118e0:	andeq	sp, r2, r8, lsr #3
   118e4:	andeq	sp, r2, r8, lsr #3
   118e8:	andeq	r0, r0, r0
   118ec:	ldr	r0, [pc, #36]	; 11918 <__assert_fail@plt+0xc4>
   118f0:	ldr	r1, [pc, #36]	; 1191c <__assert_fail@plt+0xc8>
   118f4:	sub	r1, r1, r0
   118f8:	asr	r1, r1, #2
   118fc:	add	r1, r1, r1, lsr #31
   11900:	asrs	r1, r1, #1
   11904:	bxeq	lr
   11908:	ldr	r3, [pc, #16]	; 11920 <__assert_fail@plt+0xcc>
   1190c:	cmp	r3, #0
   11910:	bxeq	lr
   11914:	bx	r3
   11918:	andeq	sp, r2, r8, lsr #3
   1191c:	andeq	sp, r2, r8, lsr #3
   11920:	andeq	r0, r0, r0
   11924:	push	{r4, lr}
   11928:	ldr	r4, [pc, #24]	; 11948 <__assert_fail@plt+0xf4>
   1192c:	ldrb	r3, [r4]
   11930:	cmp	r3, #0
   11934:	popne	{r4, pc}
   11938:	bl	118c0 <__assert_fail@plt+0x6c>
   1193c:	mov	r3, #1
   11940:	strb	r3, [r4]
   11944:	pop	{r4, pc}
   11948:	andeq	sp, r2, r4, asr #3
   1194c:	b	118ec <__assert_fail@plt+0x98>
   11950:	push	{fp, lr}
   11954:	mov	fp, sp
   11958:	sub	sp, sp, #64	; 0x40
   1195c:	mov	r4, r0
   11960:	cmp	r0, #0
   11964:	bne	11c38 <__assert_fail@plt+0x3e4>
   11968:	movw	r1, #43787	; 0xab0b
   1196c:	mov	r0, #0
   11970:	mov	r2, #5
   11974:	movt	r1, #1
   11978:	bl	11548 <dcgettext@plt>
   1197c:	mov	r1, r0
   11980:	movw	r0, #53764	; 0xd204
   11984:	movt	r0, #2
   11988:	ldr	r2, [r0]
   1198c:	mov	r0, #1
   11990:	mov	r3, r2
   11994:	str	r2, [sp]
   11998:	bl	11704 <__printf_chk@plt>
   1199c:	movw	r1, #43945	; 0xaba9
   119a0:	mov	r0, #0
   119a4:	mov	r2, #5
   119a8:	movt	r1, #1
   119ac:	bl	11548 <dcgettext@plt>
   119b0:	movw	r7, #53692	; 0xd1bc
   119b4:	movt	r7, #2
   119b8:	ldr	r1, [r7]
   119bc:	bl	114a0 <fputs_unlocked@plt>
   119c0:	movw	r1, #45872	; 0xb330
   119c4:	mov	r0, #0
   119c8:	mov	r2, #5
   119cc:	movt	r1, #1
   119d0:	bl	11548 <dcgettext@plt>
   119d4:	ldr	r1, [r7]
   119d8:	bl	114a0 <fputs_unlocked@plt>
   119dc:	movw	r1, #44084	; 0xac34
   119e0:	mov	r0, #0
   119e4:	mov	r2, #5
   119e8:	movt	r1, #1
   119ec:	bl	11548 <dcgettext@plt>
   119f0:	ldr	r1, [r7]
   119f4:	bl	114a0 <fputs_unlocked@plt>
   119f8:	movw	r1, #44315	; 0xad1b
   119fc:	mov	r0, #0
   11a00:	mov	r2, #5
   11a04:	movt	r1, #1
   11a08:	bl	11548 <dcgettext@plt>
   11a0c:	ldr	r1, [r7]
   11a10:	bl	114a0 <fputs_unlocked@plt>
   11a14:	movw	r1, #44598	; 0xae36
   11a18:	mov	r0, #0
   11a1c:	mov	r2, #5
   11a20:	movt	r1, #1
   11a24:	bl	11548 <dcgettext@plt>
   11a28:	ldr	r1, [r7]
   11a2c:	bl	114a0 <fputs_unlocked@plt>
   11a30:	movw	r1, #44726	; 0xaeb6
   11a34:	mov	r0, #0
   11a38:	mov	r2, #5
   11a3c:	movt	r1, #1
   11a40:	bl	11548 <dcgettext@plt>
   11a44:	ldr	r1, [r7]
   11a48:	bl	114a0 <fputs_unlocked@plt>
   11a4c:	movw	r1, #44845	; 0xaf2d
   11a50:	mov	r0, #0
   11a54:	mov	r2, #5
   11a58:	movt	r1, #1
   11a5c:	bl	11548 <dcgettext@plt>
   11a60:	ldr	r1, [r7]
   11a64:	bl	114a0 <fputs_unlocked@plt>
   11a68:	movw	r1, #44916	; 0xaf74
   11a6c:	mov	r0, #0
   11a70:	mov	r2, #5
   11a74:	movt	r1, #1
   11a78:	bl	11548 <dcgettext@plt>
   11a7c:	ldr	r1, [r7]
   11a80:	bl	114a0 <fputs_unlocked@plt>
   11a84:	movw	r1, #44987	; 0xafbb
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	11548 <dcgettext@plt>
   11a98:	ldr	r1, [r7]
   11a9c:	bl	114a0 <fputs_unlocked@plt>
   11aa0:	movw	r1, #45452	; 0xb18c
   11aa4:	mov	r0, #0
   11aa8:	mov	r2, #5
   11aac:	movt	r1, #1
   11ab0:	bl	11548 <dcgettext@plt>
   11ab4:	ldr	r1, [r7]
   11ab8:	bl	114a0 <fputs_unlocked@plt>
   11abc:	movw	r1, #45497	; 0xb1b9
   11ac0:	mov	r0, #0
   11ac4:	mov	r2, #5
   11ac8:	movt	r1, #1
   11acc:	bl	11548 <dcgettext@plt>
   11ad0:	ldr	r1, [r7]
   11ad4:	bl	114a0 <fputs_unlocked@plt>
   11ad8:	movw	r0, #47192	; 0xb858
   11adc:	mov	r2, #48	; 0x30
   11ae0:	add	r6, sp, #8
   11ae4:	movw	r5, #45551	; 0xb1ef
   11ae8:	movt	r0, #1
   11aec:	movt	r5, #1
   11af0:	add	r1, r0, #32
   11af4:	add	r3, r0, #16
   11af8:	vld1.64	{d18-d19}, [r0], r2
   11afc:	vld1.64	{d16-d17}, [r1]
   11b00:	vld1.64	{d20-d21}, [r3]
   11b04:	add	r1, r6, #32
   11b08:	vldr	d22, [r0]
   11b0c:	add	r0, r6, #16
   11b10:	vst1.64	{d16-d17}, [r1]
   11b14:	movw	r1, #45947	; 0xb37b
   11b18:	vst1.64	{d20-d21}, [r0]
   11b1c:	mov	r0, r6
   11b20:	vst1.64	{d18-d19}, [r0], r2
   11b24:	movt	r1, #1
   11b28:	vstr	d22, [r0]
   11b2c:	mov	r0, r5
   11b30:	bl	114c4 <strcmp@plt>
   11b34:	cmp	r0, #0
   11b38:	ldrne	r1, [r6, #8]!
   11b3c:	cmpne	r1, #0
   11b40:	bne	11b2c <__assert_fail@plt+0x2d8>
   11b44:	ldr	r6, [r6, #4]
   11b48:	movw	r1, #46042	; 0xb3da
   11b4c:	mov	r0, #0
   11b50:	mov	r2, #5
   11b54:	movt	r1, #1
   11b58:	bl	11548 <dcgettext@plt>
   11b5c:	movw	r2, #45596	; 0xb21c
   11b60:	movw	r3, #46065	; 0xb3f1
   11b64:	mov	r1, r0
   11b68:	mov	r0, #1
   11b6c:	movt	r2, #1
   11b70:	movt	r3, #1
   11b74:	bl	11704 <__printf_chk@plt>
   11b78:	cmp	r6, #0
   11b7c:	mov	r0, #5
   11b80:	mov	r1, #0
   11b84:	moveq	r6, r5
   11b88:	bl	11770 <setlocale@plt>
   11b8c:	cmp	r0, #0
   11b90:	beq	11bc8 <__assert_fail@plt+0x374>
   11b94:	movw	r1, #46105	; 0xb419
   11b98:	mov	r2, #3
   11b9c:	movt	r1, #1
   11ba0:	bl	1180c <strncmp@plt>
   11ba4:	cmp	r0, #0
   11ba8:	beq	11bc8 <__assert_fail@plt+0x374>
   11bac:	movw	r1, #46109	; 0xb41d
   11bb0:	mov	r0, #0
   11bb4:	mov	r2, #5
   11bb8:	movt	r1, #1
   11bbc:	bl	11548 <dcgettext@plt>
   11bc0:	ldr	r1, [r7]
   11bc4:	bl	114a0 <fputs_unlocked@plt>
   11bc8:	movw	r1, #46180	; 0xb464
   11bcc:	mov	r0, #0
   11bd0:	mov	r2, #5
   11bd4:	movt	r1, #1
   11bd8:	bl	11548 <dcgettext@plt>
   11bdc:	movw	r2, #46065	; 0xb3f1
   11be0:	mov	r1, r0
   11be4:	mov	r0, #1
   11be8:	mov	r3, r5
   11bec:	movt	r2, #1
   11bf0:	bl	11704 <__printf_chk@plt>
   11bf4:	movw	r1, #46207	; 0xb47f
   11bf8:	mov	r0, #0
   11bfc:	mov	r2, #5
   11c00:	movt	r1, #1
   11c04:	bl	11548 <dcgettext@plt>
   11c08:	movw	r3, #45451	; 0xb18b
   11c0c:	mov	r1, r0
   11c10:	movw	r0, #45975	; 0xb397
   11c14:	cmp	r6, r5
   11c18:	mov	r2, r6
   11c1c:	movt	r0, #1
   11c20:	movt	r3, #1
   11c24:	moveq	r3, r0
   11c28:	mov	r0, #1
   11c2c:	bl	11704 <__printf_chk@plt>
   11c30:	mov	r0, r4
   11c34:	bl	1168c <exit@plt>
   11c38:	movw	r0, #53688	; 0xd1b8
   11c3c:	movw	r1, #43748	; 0xaae4
   11c40:	mov	r2, #5
   11c44:	movt	r0, #2
   11c48:	movt	r1, #1
   11c4c:	ldr	r5, [r0]
   11c50:	mov	r0, #0
   11c54:	bl	11548 <dcgettext@plt>
   11c58:	mov	r2, r0
   11c5c:	movw	r0, #53764	; 0xd204
   11c60:	mov	r1, #1
   11c64:	movt	r0, #2
   11c68:	ldr	r3, [r0]
   11c6c:	mov	r0, r5
   11c70:	bl	1171c <__fprintf_chk@plt>
   11c74:	mov	r0, r4
   11c78:	bl	1168c <exit@plt>
   11c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c80:	add	fp, sp, #28
   11c84:	sub	sp, sp, #36	; 0x24
   11c88:	mov	r5, r0
   11c8c:	ldr	r0, [r1]
   11c90:	mov	r4, r1
   11c94:	bl	165e8 <__assert_fail@plt+0x4d94>
   11c98:	movw	r1, #45451	; 0xb18b
   11c9c:	mov	r0, #6
   11ca0:	movt	r1, #1
   11ca4:	bl	11770 <setlocale@plt>
   11ca8:	movw	r6, #45600	; 0xb220
   11cac:	movw	r1, #45557	; 0xb1f5
   11cb0:	movt	r6, #1
   11cb4:	movt	r1, #1
   11cb8:	mov	r0, r6
   11cbc:	bl	117dc <bindtextdomain@plt>
   11cc0:	mov	r0, r6
   11cc4:	bl	11578 <textdomain@plt>
   11cc8:	movw	r0, #11572	; 0x2d34
   11ccc:	movt	r0, #1
   11cd0:	bl	1aac0 <__assert_fail@plt+0x926c>
   11cd4:	mov	r0, #16
   11cd8:	movw	r7, #45581	; 0xb20d
   11cdc:	movw	r6, #46968	; 0xb778
   11ce0:	mov	r9, #0
   11ce4:	mvn	r8, #0
   11ce8:	mov	sl, #0
   11cec:	str	r0, [sp, #24]
   11cf0:	mov	r0, #0
   11cf4:	movt	r7, #1
   11cf8:	movt	r6, #1
   11cfc:	str	r0, [sp, #20]
   11d00:	mov	r0, #0
   11d04:	b	11d14 <__assert_fail@plt+0x4c0>
   11d08:	movw	r0, #53696	; 0xd1c0
   11d0c:	movt	r0, #2
   11d10:	ldr	r0, [r0]
   11d14:	str	r0, [sp, #16]
   11d18:	b	11d40 <__assert_fail@plt+0x4ec>
   11d1c:	ldr	r0, [r0]
   11d20:	str	r0, [r1]
   11d24:	mov	sl, #1
   11d28:	b	11d40 <__assert_fail@plt+0x4ec>
   11d2c:	movw	r0, #53696	; 0xd1c0
   11d30:	movw	r1, #53720	; 0xd1d8
   11d34:	movt	r0, #2
   11d38:	movt	r1, #2
   11d3c:	b	11d1c <__assert_fail@plt+0x4c8>
   11d40:	mov	r0, r5
   11d44:	mov	r1, r4
   11d48:	mov	r2, r7
   11d4c:	mov	r3, r6
   11d50:	str	r9, [sp]
   11d54:	bl	11668 <getopt_long@plt>
   11d58:	add	r1, r0, #3
   11d5c:	cmp	r1, #121	; 0x79
   11d60:	bhi	11f60 <__assert_fail@plt+0x70c>
   11d64:	add	r0, pc, #0
   11d68:	ldr	pc, [r0, r1, lsl #2]
   11d6c:	muleq	r1, r8, fp
   11d70:	andeq	r2, r1, ip, ror #23
   11d74:	andeq	r2, r1, r0, lsr #32
   11d78:	andeq	r2, r1, r4, lsr ip
   11d7c:	andeq	r2, r1, r4, lsr ip
   11d80:	andeq	r2, r1, r4, lsr ip
   11d84:	andeq	r2, r1, r4, lsr ip
   11d88:	andeq	r2, r1, r4, lsr ip
   11d8c:	andeq	r2, r1, r4, lsr ip
   11d90:	andeq	r2, r1, r4, lsr ip
   11d94:	andeq	r2, r1, r4, lsr ip
   11d98:	andeq	r2, r1, r4, lsr ip
   11d9c:	andeq	r2, r1, r4, lsr ip
   11da0:	andeq	r2, r1, r4, lsr ip
   11da4:	andeq	r2, r1, r4, lsr ip
   11da8:	andeq	r2, r1, r4, lsr ip
   11dac:	andeq	r2, r1, r4, lsr ip
   11db0:	andeq	r2, r1, r4, lsr ip
   11db4:	andeq	r2, r1, r4, lsr ip
   11db8:	andeq	r2, r1, r4, lsr ip
   11dbc:	andeq	r2, r1, r4, lsr ip
   11dc0:	andeq	r2, r1, r4, lsr ip
   11dc4:	andeq	r2, r1, r4, lsr ip
   11dc8:	andeq	r2, r1, r4, lsr ip
   11dcc:	andeq	r2, r1, r4, lsr ip
   11dd0:	andeq	r2, r1, r4, lsr ip
   11dd4:	andeq	r2, r1, r4, lsr ip
   11dd8:	andeq	r2, r1, r4, lsr ip
   11ddc:	andeq	r2, r1, r4, lsr ip
   11de0:	andeq	r2, r1, r4, lsr ip
   11de4:	andeq	r2, r1, r4, lsr ip
   11de8:	andeq	r2, r1, r4, lsr ip
   11dec:	andeq	r2, r1, r4, lsr ip
   11df0:	andeq	r2, r1, r4, lsr ip
   11df4:	andeq	r2, r1, r4, lsr ip
   11df8:	andeq	r2, r1, r4, lsr ip
   11dfc:	andeq	r2, r1, r4, lsr ip
   11e00:	andeq	r2, r1, r4, lsr ip
   11e04:	andeq	r2, r1, r4, lsr ip
   11e08:	andeq	r2, r1, r4, lsr ip
   11e0c:	andeq	r2, r1, r4, lsr ip
   11e10:	andeq	r2, r1, r4, lsr ip
   11e14:	andeq	r2, r1, r4, lsr ip
   11e18:	andeq	r2, r1, r4, lsr ip
   11e1c:	andeq	r2, r1, r4, lsr ip
   11e20:	andeq	r2, r1, r4, lsr ip
   11e24:	andeq	r2, r1, r4, lsr ip
   11e28:	andeq	r2, r1, r4, lsr ip
   11e2c:	andeq	r2, r1, r4, lsr ip
   11e30:	andeq	r2, r1, r4, lsr ip
   11e34:	andeq	r2, r1, r4, lsr ip
   11e38:	andeq	r2, r1, r4, lsr ip
   11e3c:	andeq	r2, r1, r4, lsr ip
   11e40:	andeq	r2, r1, r4, lsr ip
   11e44:	andeq	r2, r1, r4, lsr ip
   11e48:	andeq	r2, r1, r4, lsr ip
   11e4c:	andeq	r2, r1, r4, lsr ip
   11e50:	andeq	r2, r1, r4, lsr ip
   11e54:	andeq	r2, r1, r4, lsr ip
   11e58:	andeq	r2, r1, r4, lsr ip
   11e5c:	andeq	r2, r1, r4, lsr ip
   11e60:	andeq	r2, r1, r4, lsr ip
   11e64:	andeq	r2, r1, r4, lsr ip
   11e68:	andeq	r2, r1, r4, lsr ip
   11e6c:	andeq	r2, r1, r4, lsr ip
   11e70:	andeq	r2, r1, r4, lsr ip
   11e74:	andeq	r2, r1, r4, lsr ip
   11e78:	andeq	r2, r1, r4, lsr ip
   11e7c:	andeq	r2, r1, r4, lsr ip
   11e80:	andeq	r2, r1, r4, lsr ip
   11e84:	andeq	r2, r1, r4, lsr ip
   11e88:	andeq	r2, r1, r4, lsr ip
   11e8c:	andeq	r2, r1, r4, lsr ip
   11e90:	andeq	r2, r1, r4, lsr ip
   11e94:	andeq	r2, r1, r4, lsr ip
   11e98:	andeq	r1, r1, r4, asr pc
   11e9c:	andeq	r2, r1, r4, lsr ip
   11ea0:	andeq	r2, r1, r4, lsr ip
   11ea4:	andeq	r2, r1, r4, lsr ip
   11ea8:	andeq	r1, r1, ip, lsr #31
   11eac:	andeq	r2, r1, r4, lsr ip
   11eb0:	andeq	r2, r1, r4, lsr ip
   11eb4:	andeq	r2, r1, r4, lsr ip
   11eb8:	andeq	r1, r1, r0, lsr #31
   11ebc:	andeq	r2, r1, r4, lsr ip
   11ec0:	andeq	r1, r1, r4, asr #31
   11ec4:	andeq	r2, r1, r4, lsr ip
   11ec8:	andeq	r2, r1, r4, lsr ip
   11ecc:	andeq	r2, r1, r4, lsr ip
   11ed0:	andeq	r2, r1, r4, lsr ip
   11ed4:	andeq	r2, r1, r4, lsr ip
   11ed8:	andeq	r2, r1, r4, lsr ip
   11edc:	andeq	r2, r1, r4, lsr ip
   11ee0:	andeq	r2, r1, r4, lsr ip
   11ee4:	andeq	r2, r1, r4, lsr ip
   11ee8:	andeq	r2, r1, r4, lsr ip
   11eec:	andeq	r2, r1, r4, lsr ip
   11ef0:	andeq	r2, r1, r4, lsr ip
   11ef4:	andeq	r2, r1, r4, lsr ip
   11ef8:	andeq	r2, r1, r4, lsr ip
   11efc:	andeq	r2, r1, r4, lsr ip
   11f00:	andeq	r2, r1, r4, lsr ip
   11f04:	andeq	r2, r1, r4, lsr ip
   11f08:	andeq	r2, r1, r4, lsr ip
   11f0c:	andeq	r2, r1, r4, lsr ip
   11f10:	andeq	r1, r1, r0, asr #26
   11f14:	andeq	r2, r1, r4, lsr ip
   11f18:	andeq	r1, r1, r4, ror #31
   11f1c:	andeq	r2, r1, r4, lsr ip
   11f20:	andeq	r2, r1, r4, lsr ip
   11f24:	andeq	r2, r1, r4, lsr ip
   11f28:	andeq	r1, r1, ip, lsr #26
   11f2c:	andeq	r2, r1, r4, lsr ip
   11f30:	andeq	r2, r1, r4, lsr ip
   11f34:	andeq	r2, r1, r4, lsr ip
   11f38:	andeq	r2, r1, r4, lsr ip
   11f3c:	andeq	r2, r1, r4, lsr ip
   11f40:	strdeq	r1, [r1], -r8
   11f44:	andeq	r2, r1, r4, lsr ip
   11f48:	andeq	r1, r1, ip, lsl #31
   11f4c:	andeq	r2, r1, ip
   11f50:			; <UNDEFINED> instruction: 0x00011fb8
   11f54:	mov	r0, #17
   11f58:	str	r0, [sp, #24]
   11f5c:	b	11d40 <__assert_fail@plt+0x4ec>
   11f60:	sub	r0, r0, #256	; 0x100
   11f64:	cmp	r0, #3
   11f68:	bhi	12c34 <__assert_fail@plt+0x13e0>
   11f6c:	add	r1, pc, #0
   11f70:	ldr	pc, [r1, r0, lsl #2]
   11f74:	andeq	r1, r1, r4, lsl #31
   11f78:	andeq	r1, r1, ip, ror #31
   11f7c:	ldrdeq	r1, [r1], -r8
   11f80:	andeq	r1, r1, r8, lsl #26
   11f84:	mov	r8, #1
   11f88:	b	11d40 <__assert_fail@plt+0x4ec>
   11f8c:	movw	r0, #53696	; 0xd1c0
   11f90:	movw	r1, #53716	; 0xd1d4
   11f94:	movt	r0, #2
   11f98:	movt	r1, #2
   11f9c:	b	11d1c <__assert_fail@plt+0x4c8>
   11fa0:	mov	r0, #16
   11fa4:	str	r0, [sp, #24]
   11fa8:	b	11d40 <__assert_fail@plt+0x4ec>
   11fac:	mov	r0, #2
   11fb0:	str	r0, [sp, #24]
   11fb4:	b	11d40 <__assert_fail@plt+0x4ec>
   11fb8:	movw	r0, #53705	; 0xd1c9
   11fbc:	movt	r0, #2
   11fc0:	b	11fcc <__assert_fail@plt+0x778>
   11fc4:	movw	r0, #53704	; 0xd1c8
   11fc8:	movt	r0, #2
   11fcc:	mov	r1, #1
   11fd0:	strb	r1, [r0]
   11fd4:	b	11d40 <__assert_fail@plt+0x4ec>
   11fd8:	mov	r0, #1
   11fdc:	str	r0, [sp, #20]
   11fe0:	b	11d40 <__assert_fail@plt+0x4ec>
   11fe4:	mov	r8, #0
   11fe8:	b	11d40 <__assert_fail@plt+0x4ec>
   11fec:	mov	r0, #0
   11ff0:	str	r0, [sp, #20]
   11ff4:	b	11d40 <__assert_fail@plt+0x4ec>
   11ff8:	movw	r0, #53696	; 0xd1c0
   11ffc:	movw	r1, #53712	; 0xd1d0
   12000:	movt	r0, #2
   12004:	movt	r1, #2
   12008:	b	11d1c <__assert_fail@plt+0x4c8>
   1200c:	movw	r0, #53696	; 0xd1c0
   12010:	movw	r1, #53708	; 0xd1cc
   12014:	movt	r0, #2
   12018:	movt	r1, #2
   1201c:	b	11d1c <__assert_fail@plt+0x4c8>
   12020:	movw	r0, #53704	; 0xd1c8
   12024:	movt	r0, #2
   12028:	ldrb	r0, [r0]
   1202c:	cmp	r0, #1
   12030:	bne	12054 <__assert_fail@plt+0x800>
   12034:	ldr	r7, [sp, #24]
   12038:	cmp	r7, #16
   1203c:	bne	1206c <__assert_fail@plt+0x818>
   12040:	cmp	r8, #1
   12044:	beq	12ca8 <__assert_fail@plt+0x1454>
   12048:	mov	r7, #16
   1204c:	mov	r0, #0
   12050:	b	12064 <__assert_fail@plt+0x810>
   12054:	cmp	r8, #0
   12058:	mov	r7, #16
   1205c:	movwne	r8, #1
   12060:	mov	r0, r8
   12064:	ldr	r6, [sp, #16]
   12068:	b	1207c <__assert_fail@plt+0x828>
   1206c:	ldr	r6, [sp, #16]
   12070:	mov	r0, #1
   12074:	cmp	r8, #0
   12078:	beq	12cb4 <__assert_fail@plt+0x1460>
   1207c:	movw	r1, #53724	; 0xd1dc
   12080:	movw	r8, #53680	; 0xd1b0
   12084:	cmp	r6, #0
   12088:	movt	r1, #2
   1208c:	movt	r8, #2
   12090:	strb	r0, [r1]
   12094:	ldr	r0, [r8]
   12098:	mov	r1, #2
   1209c:	movwne	r1, #1
   120a0:	tst	sl, #1
   120a4:	movwne	r1, #1
   120a8:	sub	r2, r5, r0
   120ac:	cmp	r2, r1
   120b0:	blt	12bf4 <__assert_fail@plt+0x13a0>
   120b4:	cmp	r6, #0
   120b8:	beq	120fc <__assert_fail@plt+0x8a8>
   120bc:	mov	r0, #0
   120c0:	add	r1, sp, #28
   120c4:	str	r0, [sp, #28]
   120c8:	mov	r0, r6
   120cc:	bl	18c8c <__assert_fail@plt+0x7438>
   120d0:	cmn	r0, #1
   120d4:	ble	12c3c <__assert_fail@plt+0x13e8>
   120d8:	ldr	r0, [sp, #28]
   120dc:	movw	r1, #53728	; 0xd1e0
   120e0:	tst	sl, #1
   120e4:	movt	r1, #2
   120e8:	str	r0, [r1]
   120ec:	beq	1214c <__assert_fail@plt+0x8f8>
   120f0:	movw	r1, #45795	; 0xb2e3
   120f4:	movt	r1, #1
   120f8:	b	12c84 <__assert_fail@plt+0x1430>
   120fc:	tst	sl, #1
   12100:	beq	12118 <__assert_fail@plt+0x8c4>
   12104:	movw	r0, #53728	; 0xd1e0
   12108:	mov	r1, #0
   1210c:	movt	r0, #2
   12110:	str	r1, [r0]
   12114:	b	1214c <__assert_fail@plt+0x8f8>
   12118:	add	r1, r0, #1
   1211c:	movw	r5, #53728	; 0xd1e0
   12120:	str	r1, [r8]
   12124:	movt	r5, #2
   12128:	ldr	r0, [r4, r0, lsl #2]
   1212c:	str	r0, [r5]
   12130:	bl	114b8 <is_selinux_enabled@plt>
   12134:	cmp	r0, #1
   12138:	blt	1214c <__assert_fail@plt+0x8f8>
   1213c:	ldr	r0, [r5]
   12140:	bl	11608 <security_check_context@plt>
   12144:	cmn	r0, #1
   12148:	ble	12cd8 <__assert_fail@plt+0x1484>
   1214c:	movw	r0, #53704	; 0xd1c8
   12150:	ldr	r1, [sp, #20]
   12154:	movt	r0, #2
   12158:	ldrb	r0, [r0]
   1215c:	and	r0, r1, r0
   12160:	tst	r0, #1
   12164:	beq	121b8 <__assert_fail@plt+0x964>
   12168:	movw	r0, #53736	; 0xd1e8
   1216c:	movt	r0, #2
   12170:	bl	18354 <__assert_fail@plt+0x6b00>
   12174:	movw	r1, #53752	; 0xd1f8
   12178:	cmp	r0, #0
   1217c:	movt	r1, #2
   12180:	str	r0, [r1]
   12184:	bne	121c8 <__assert_fail@plt+0x974>
   12188:	bl	116d4 <__errno_location@plt>
   1218c:	ldr	r4, [r0]
   12190:	movw	r1, #45841	; 0xb311
   12194:	mov	r0, #0
   12198:	mov	r2, #5
   1219c:	movt	r1, #1
   121a0:	bl	11548 <dcgettext@plt>
   121a4:	movw	r1, #48693	; 0xbe35
   121a8:	mov	r5, r0
   121ac:	mov	r0, #4
   121b0:	movt	r1, #1
   121b4:	b	12c64 <__assert_fail@plt+0x1410>
   121b8:	movw	r0, #53752	; 0xd1f8
   121bc:	mov	r1, #0
   121c0:	movt	r0, #2
   121c4:	str	r1, [r0]
   121c8:	ldr	r0, [r8]
   121cc:	orr	r1, r7, #8
   121d0:	mov	r2, #0
   121d4:	add	r0, r4, r0, lsl #2
   121d8:	bl	19a88 <__assert_fail@plt+0x8234>
   121dc:	str	r0, [sp, #24]
   121e0:	bl	13734 <__assert_fail@plt+0x1ee0>
   121e4:	cmp	r0, #0
   121e8:	beq	121f8 <__assert_fail@plt+0x9a4>
   121ec:	mov	r8, r0
   121f0:	mov	r6, #1
   121f4:	b	12280 <__assert_fail@plt+0xa2c>
   121f8:	mov	r6, #1
   121fc:	b	12b14 <__assert_fail@plt+0x12c0>
   12200:	movw	r1, #46375	; 0xb527
   12204:	mov	r0, #0
   12208:	mov	r2, #5
   1220c:	movt	r1, #1
   12210:	bl	11548 <dcgettext@plt>
   12214:	mov	r5, r0
   12218:	mov	r0, #4
   1221c:	mov	r1, r9
   12220:	bl	17cf4 <__assert_fail@plt+0x64a0>
   12224:	mov	r3, r0
   12228:	mov	r0, #0
   1222c:	mov	r1, #0
   12230:	mov	r2, r5
   12234:	bl	115fc <error@plt>
   12238:	movw	r1, #46478	; 0xb58e
   1223c:	mov	r0, #0
   12240:	mov	r2, #5
   12244:	mov	r7, #0
   12248:	movt	r1, #1
   1224c:	bl	11548 <dcgettext@plt>
   12250:	mov	r2, r0
   12254:	mov	r0, #0
   12258:	mov	r1, #0
   1225c:	bl	115fc <error@plt>
   12260:	ldr	r4, [sp, #24]
   12264:	mov	r1, r8
   12268:	mov	r2, #4
   1226c:	mov	r0, r4
   12270:	bl	14db4 <__assert_fail@plt+0x3560>
   12274:	mov	r0, r4
   12278:	bl	13734 <__assert_fail@plt+0x1ee0>
   1227c:	b	12afc <__assert_fail@plt+0x12a8>
   12280:	ldr	sl, [r8, #24]
   12284:	ldr	r9, [r8, #28]
   12288:	ldrh	r0, [r8, #56]	; 0x38
   1228c:	add	r4, r8, #64	; 0x40
   12290:	sub	r1, r0, #1
   12294:	cmp	r1, #9
   12298:	bhi	126d0 <__assert_fail@plt+0xe7c>
   1229c:	add	r2, pc, #4
   122a0:	mov	r7, #1
   122a4:	ldr	pc, [r2, r1, lsl #2]
   122a8:	ldrdeq	r2, [r1], -r0
   122ac:	andeq	r2, r1, r8, lsl #8
   122b0:			; <UNDEFINED> instruction: 0x000124b0
   122b4:	andeq	r2, r1, r0, lsr #7
   122b8:			; <UNDEFINED> instruction: 0x000124b0
   122bc:	andeq	r2, r1, r0, ror #8
   122c0:	andeq	r2, r1, ip, ror r4
   122c4:			; <UNDEFINED> instruction: 0x000124b0
   122c8:			; <UNDEFINED> instruction: 0x000124b0
   122cc:			; <UNDEFINED> instruction: 0x000123b4
   122d0:	movw	r0, #53704	; 0xd1c8
   122d4:	movt	r0, #2
   122d8:	ldrb	r0, [r0]
   122dc:	cmp	r0, #1
   122e0:	bne	124dc <__assert_fail@plt+0xc88>
   122e4:	movw	r0, #53752	; 0xd1f8
   122e8:	mov	r7, #1
   122ec:	movt	r0, #2
   122f0:	ldr	r0, [r0]
   122f4:	cmp	r0, #0
   122f8:	beq	12afc <__assert_fail@plt+0x12a8>
   122fc:	ldrd	r2, [r0]
   12300:	ldr	r1, [r8, #160]	; 0xa0
   12304:	ldr	r5, [r8, #164]	; 0xa4
   12308:	eor	r3, r5, r3
   1230c:	eor	r1, r1, r2
   12310:	orrs	r1, r1, r3
   12314:	bne	12afc <__assert_fail@plt+0x12a8>
   12318:	ldrd	r0, [r0, #8]
   1231c:	ldrd	r2, [r4]
   12320:	eor	r1, r3, r1
   12324:	eor	r0, r2, r0
   12328:	orrs	r0, r0, r1
   1232c:	bne	12afc <__assert_fail@plt+0x12a8>
   12330:	movw	r4, #48693	; 0xbe35
   12334:	mov	r0, r9
   12338:	movt	r4, #1
   1233c:	mov	r1, r4
   12340:	bl	114c4 <strcmp@plt>
   12344:	cmp	r0, #0
   12348:	beq	12200 <__assert_fail@plt+0x9ac>
   1234c:	movw	r1, #46420	; 0xb554
   12350:	mov	r0, #0
   12354:	mov	r2, #5
   12358:	movt	r1, #1
   1235c:	bl	11548 <dcgettext@plt>
   12360:	mov	r5, r0
   12364:	mov	r0, #0
   12368:	mov	r1, #4
   1236c:	mov	r2, r9
   12370:	bl	17c4c <__assert_fail@plt+0x63f8>
   12374:	mov	r7, r0
   12378:	mov	r0, #1
   1237c:	mov	r1, #4
   12380:	mov	r2, r4
   12384:	bl	17c4c <__assert_fail@plt+0x63f8>
   12388:	str	r0, [sp]
   1238c:	mov	r0, #0
   12390:	mov	r1, #0
   12394:	mov	r2, r5
   12398:	mov	r3, r7
   1239c:	b	12234 <__assert_fail@plt+0x9e0>
   123a0:	ldr	r5, [r8, #32]
   123a4:	movw	r1, #46544	; 0xb5d0
   123a8:	mov	r0, #0
   123ac:	movt	r1, #1
   123b0:	b	123dc <__assert_fail@plt+0xb88>
   123b4:	ldr	r0, [r8, #48]	; 0x30
   123b8:	cmp	r0, #0
   123bc:	bne	123cc <__assert_fail@plt+0xb78>
   123c0:	ldr	r0, [r8, #16]
   123c4:	cmp	r0, #0
   123c8:	beq	12a38 <__assert_fail@plt+0x11e4>
   123cc:	ldr	r5, [r8, #32]
   123d0:	movw	r1, #46527	; 0xb5bf
   123d4:	mov	r0, #0
   123d8:	movt	r1, #1
   123dc:	mov	r2, #5
   123e0:	bl	11548 <dcgettext@plt>
   123e4:	mov	r7, r0
   123e8:	mov	r0, #4
   123ec:	mov	r1, r9
   123f0:	bl	17cf4 <__assert_fail@plt+0x64a0>
   123f4:	mov	r3, r0
   123f8:	mov	r0, #0
   123fc:	mov	r1, r5
   12400:	mov	r2, r7
   12404:	b	124a4 <__assert_fail@plt+0xc50>
   12408:	ldr	r0, [sp, #24]
   1240c:	mov	r1, r8
   12410:	bl	19ad4 <__assert_fail@plt+0x8280>
   12414:	cmp	r0, #0
   12418:	beq	124dc <__assert_fail@plt+0xc88>
   1241c:	movw	r1, #46569	; 0xb5e9
   12420:	mov	r0, #0
   12424:	mov	r2, #5
   12428:	mov	r7, #0
   1242c:	movt	r1, #1
   12430:	bl	11548 <dcgettext@plt>
   12434:	mov	r5, r0
   12438:	mov	r0, #0
   1243c:	mov	r1, #3
   12440:	mov	r2, r9
   12444:	bl	17f70 <__assert_fail@plt+0x671c>
   12448:	mov	r3, r0
   1244c:	mov	r0, #0
   12450:	mov	r1, #0
   12454:	mov	r2, r5
   12458:	bl	115fc <error@plt>
   1245c:	b	12afc <__assert_fail@plt+0x12a8>
   12460:	movw	r0, #53704	; 0xd1c8
   12464:	mov	r7, #1
   12468:	movt	r0, #2
   1246c:	ldrb	r0, [r0]
   12470:	cmp	r0, #0
   12474:	bne	124b8 <__assert_fail@plt+0xc64>
   12478:	b	12afc <__assert_fail@plt+0x12a8>
   1247c:	ldr	r5, [r8, #32]
   12480:	mov	r0, #0
   12484:	mov	r1, #3
   12488:	mov	r2, r9
   1248c:	bl	17f70 <__assert_fail@plt+0x671c>
   12490:	movw	r2, #47279	; 0xb8af
   12494:	mov	r3, r0
   12498:	mov	r0, #0
   1249c:	mov	r1, r5
   124a0:	movt	r2, #1
   124a4:	bl	115fc <error@plt>
   124a8:	ldrh	r0, [r8, #56]	; 0x38
   124ac:	mov	r7, #0
   124b0:	cmp	r0, #6
   124b4:	bne	124d0 <__assert_fail@plt+0xc7c>
   124b8:	cmp	r7, #0
   124bc:	movwne	r0, #53752	; 0xd1f8
   124c0:	movtne	r0, #2
   124c4:	ldrne	r0, [r0]
   124c8:	cmpne	r0, #0
   124cc:	bne	1262c <__assert_fail@plt+0xdd8>
   124d0:	mov	r4, #0
   124d4:	cmp	r7, #0
   124d8:	beq	12ad4 <__assert_fail@plt+0x1280>
   124dc:	movw	r0, #53705	; 0xd1c9
   124e0:	movt	r0, #2
   124e4:	ldrb	r0, [r0]
   124e8:	cmp	r0, #1
   124ec:	bne	12524 <__assert_fail@plt+0xcd0>
   124f0:	movw	r1, #46755	; 0xb6a3
   124f4:	mov	r0, #0
   124f8:	mov	r2, #5
   124fc:	movt	r1, #1
   12500:	bl	11548 <dcgettext@plt>
   12504:	mov	r5, r0
   12508:	mov	r0, #4
   1250c:	mov	r1, r9
   12510:	bl	17cf4 <__assert_fail@plt+0x64a0>
   12514:	mov	r2, r0
   12518:	mov	r0, #1
   1251c:	mov	r1, r5
   12520:	bl	11704 <__printf_chk@plt>
   12524:	ldr	r0, [sp, #24]
   12528:	ldr	r5, [r0, #32]
   1252c:	mov	r0, #0
   12530:	str	r0, [sp, #32]
   12534:	movw	r0, #53728	; 0xd1e0
   12538:	movt	r0, #2
   1253c:	ldr	r7, [r0]
   12540:	cmp	r7, #0
   12544:	beq	12578 <__assert_fail@plt+0xd24>
   12548:	movw	r0, #53724	; 0xd1dc
   1254c:	movt	r0, #2
   12550:	ldrb	r0, [r0]
   12554:	cmp	r0, #0
   12558:	beq	125a8 <__assert_fail@plt+0xd54>
   1255c:	mov	r0, r5
   12560:	mov	r1, sl
   12564:	mov	r2, r7
   12568:	bl	1881c <__assert_fail@plt+0x6fc8>
   1256c:	cmp	r0, #0
   12570:	bne	125c0 <__assert_fail@plt+0xd6c>
   12574:	b	1298c <__assert_fail@plt+0x1138>
   12578:	movw	r0, #53724	; 0xd1dc
   1257c:	movt	r0, #2
   12580:	ldrb	r0, [r0]
   12584:	cmp	r0, #0
   12588:	beq	126e0 <__assert_fail@plt+0xe8c>
   1258c:	mov	r0, r5
   12590:	mov	r1, sl
   12594:	add	r2, sp, #32
   12598:	bl	183ac <__assert_fail@plt+0x6b58>
   1259c:	cmn	r0, #1
   125a0:	bgt	12708 <__assert_fail@plt+0xeb4>
   125a4:	b	126f8 <__assert_fail@plt+0xea4>
   125a8:	mov	r0, r5
   125ac:	mov	r1, sl
   125b0:	mov	r2, r7
   125b4:	bl	18a54 <__assert_fail@plt+0x7200>
   125b8:	cmp	r0, #0
   125bc:	beq	1298c <__assert_fail@plt+0x1138>
   125c0:	bl	116d4 <__errno_location@plt>
   125c4:	ldr	r0, [r0]
   125c8:	movw	r1, #46837	; 0xb6f5
   125cc:	mov	r2, #5
   125d0:	movt	r1, #1
   125d4:	str	r0, [sp, #20]
   125d8:	mov	r0, #0
   125dc:	bl	11548 <dcgettext@plt>
   125e0:	mov	r5, r6
   125e4:	mov	r6, r0
   125e8:	mov	r0, #0
   125ec:	mov	r1, #4
   125f0:	mov	r2, sl
   125f4:	bl	17c4c <__assert_fail@plt+0x63f8>
   125f8:	mov	sl, r0
   125fc:	mov	r0, #1
   12600:	mov	r1, r7
   12604:	mov	r4, #1
   12608:	bl	1820c <__assert_fail@plt+0x69b8>
   1260c:	ldr	r1, [sp, #20]
   12610:	str	r0, [sp]
   12614:	mov	r2, r6
   12618:	mov	r0, #0
   1261c:	mov	r3, sl
   12620:	mov	r6, r5
   12624:	bl	115fc <error@plt>
   12628:	b	12990 <__assert_fail@plt+0x113c>
   1262c:	ldrd	r2, [r0]
   12630:	ldr	r1, [r8, #160]	; 0xa0
   12634:	ldr	r5, [r8, #164]	; 0xa4
   12638:	eor	r3, r5, r3
   1263c:	eor	r1, r1, r2
   12640:	orrs	r1, r1, r3
   12644:	bne	124dc <__assert_fail@plt+0xc88>
   12648:	ldrd	r0, [r0, #8]
   1264c:	ldrd	r2, [r4]
   12650:	eor	r1, r3, r1
   12654:	eor	r0, r2, r0
   12658:	orrs	r0, r0, r1
   1265c:	bne	124dc <__assert_fail@plt+0xc88>
   12660:	movw	r4, #48693	; 0xbe35
   12664:	mov	r0, r9
   12668:	movt	r4, #1
   1266c:	mov	r1, r4
   12670:	bl	114c4 <strcmp@plt>
   12674:	cmp	r0, #0
   12678:	beq	12a74 <__assert_fail@plt+0x1220>
   1267c:	movw	r1, #46420	; 0xb554
   12680:	mov	r0, #0
   12684:	mov	r2, #5
   12688:	movt	r1, #1
   1268c:	bl	11548 <dcgettext@plt>
   12690:	mov	r5, r0
   12694:	mov	r0, #0
   12698:	mov	r1, #4
   1269c:	mov	r2, r9
   126a0:	bl	17c4c <__assert_fail@plt+0x63f8>
   126a4:	mov	r7, r0
   126a8:	mov	r0, #1
   126ac:	mov	r1, #4
   126b0:	mov	r2, r4
   126b4:	bl	17c4c <__assert_fail@plt+0x63f8>
   126b8:	str	r0, [sp]
   126bc:	mov	r0, #0
   126c0:	mov	r1, #0
   126c4:	mov	r2, r5
   126c8:	mov	r3, r7
   126cc:	b	12aa8 <__assert_fail@plt+0x1254>
   126d0:	mov	r7, #1
   126d4:	cmp	r0, #6
   126d8:	beq	124b8 <__assert_fail@plt+0xc64>
   126dc:	b	124d0 <__assert_fail@plt+0xc7c>
   126e0:	mov	r0, r5
   126e4:	mov	r1, sl
   126e8:	add	r2, sp, #32
   126ec:	bl	185e4 <__assert_fail@plt+0x6d90>
   126f0:	cmn	r0, #1
   126f4:	bgt	12708 <__assert_fail@plt+0xeb4>
   126f8:	bl	116d4 <__errno_location@plt>
   126fc:	ldr	r7, [r0]
   12700:	cmp	r7, #61	; 0x3d
   12704:	bne	129f8 <__assert_fail@plt+0x11a4>
   12708:	ldr	r7, [sp, #32]
   1270c:	cmp	r7, #0
   12710:	beq	12924 <__assert_fail@plt+0x10d0>
   12714:	mov	r0, r7
   12718:	bl	11524 <context_new@plt>
   1271c:	cmp	r0, #0
   12720:	beq	129bc <__assert_fail@plt+0x1168>
   12724:	mov	r9, r0
   12728:	movw	r0, #53708	; 0xd1cc
   1272c:	movt	r0, #2
   12730:	str	r9, [sp, #16]
   12734:	ldr	r1, [r0]
   12738:	mov	r0, #1
   1273c:	str	r0, [sp, #20]
   12740:	cmp	r1, #0
   12744:	beq	127b0 <__assert_fail@plt+0xf5c>
   12748:	mov	r0, r9
   1274c:	bl	11698 <context_user_set@plt>
   12750:	cmp	r0, #0
   12754:	beq	127b0 <__assert_fail@plt+0xf5c>
   12758:	bl	116d4 <__errno_location@plt>
   1275c:	ldr	r4, [r0]
   12760:	movw	r1, #46912	; 0xb740
   12764:	mov	r0, #0
   12768:	mov	r2, #5
   1276c:	str	r0, [sp, #20]
   12770:	mov	r0, #0
   12774:	movt	r1, #1
   12778:	bl	11548 <dcgettext@plt>
   1277c:	mov	r7, r0
   12780:	movw	r0, #53708	; 0xd1cc
   12784:	movt	r0, #2
   12788:	ldr	r0, [r0]
   1278c:	bl	1821c <__assert_fail@plt+0x69c8>
   12790:	ldr	r9, [sp, #16]
   12794:	movw	r3, #46300	; 0xb4dc
   12798:	str	r0, [sp]
   1279c:	mov	r0, #0
   127a0:	mov	r1, r4
   127a4:	mov	r2, r7
   127a8:	movt	r3, #1
   127ac:	bl	115fc <error@plt>
   127b0:	movw	r0, #53720	; 0xd1d8
   127b4:	movt	r0, #2
   127b8:	ldr	r1, [r0]
   127bc:	cmp	r1, #0
   127c0:	beq	1282c <__assert_fail@plt+0xfd8>
   127c4:	mov	r0, r9
   127c8:	bl	117e8 <context_range_set@plt>
   127cc:	cmp	r0, #0
   127d0:	beq	1282c <__assert_fail@plt+0xfd8>
   127d4:	bl	116d4 <__errno_location@plt>
   127d8:	ldr	r4, [r0]
   127dc:	movw	r1, #46912	; 0xb740
   127e0:	mov	r0, #0
   127e4:	mov	r2, #5
   127e8:	str	r0, [sp, #20]
   127ec:	mov	r0, #0
   127f0:	movt	r1, #1
   127f4:	bl	11548 <dcgettext@plt>
   127f8:	mov	r7, r0
   127fc:	movw	r0, #53720	; 0xd1d8
   12800:	movt	r0, #2
   12804:	ldr	r0, [r0]
   12808:	bl	1821c <__assert_fail@plt+0x69c8>
   1280c:	ldr	r9, [sp, #16]
   12810:	movw	r3, #46315	; 0xb4eb
   12814:	str	r0, [sp]
   12818:	mov	r0, #0
   1281c:	mov	r1, r4
   12820:	mov	r2, r7
   12824:	movt	r3, #1
   12828:	bl	115fc <error@plt>
   1282c:	movw	r0, #53712	; 0xd1d0
   12830:	movt	r0, #2
   12834:	ldr	r1, [r0]
   12838:	cmp	r1, #0
   1283c:	beq	128a8 <__assert_fail@plt+0x1054>
   12840:	mov	r0, r9
   12844:	bl	1153c <context_role_set@plt>
   12848:	cmp	r0, #0
   1284c:	beq	128a8 <__assert_fail@plt+0x1054>
   12850:	bl	116d4 <__errno_location@plt>
   12854:	ldr	r4, [r0]
   12858:	movw	r1, #46912	; 0xb740
   1285c:	mov	r0, #0
   12860:	mov	r2, #5
   12864:	str	r0, [sp, #20]
   12868:	mov	r0, #0
   1286c:	movt	r1, #1
   12870:	bl	11548 <dcgettext@plt>
   12874:	mov	r7, r0
   12878:	movw	r0, #53712	; 0xd1d0
   1287c:	movt	r0, #2
   12880:	ldr	r0, [r0]
   12884:	bl	1821c <__assert_fail@plt+0x69c8>
   12888:	ldr	r9, [sp, #16]
   1288c:	movw	r3, #46305	; 0xb4e1
   12890:	str	r0, [sp]
   12894:	mov	r0, #0
   12898:	mov	r1, r4
   1289c:	mov	r2, r7
   128a0:	movt	r3, #1
   128a4:	bl	115fc <error@plt>
   128a8:	movw	r0, #53716	; 0xd1d4
   128ac:	movt	r0, #2
   128b0:	ldr	r1, [r0]
   128b4:	cmp	r1, #0
   128b8:	beq	12958 <__assert_fail@plt+0x1104>
   128bc:	mov	r0, r9
   128c0:	bl	11554 <context_type_set@plt>
   128c4:	cmp	r0, #0
   128c8:	beq	12958 <__assert_fail@plt+0x1104>
   128cc:	bl	116d4 <__errno_location@plt>
   128d0:	ldr	r4, [r0]
   128d4:	movw	r1, #46912	; 0xb740
   128d8:	mov	r5, r0
   128dc:	mov	r0, #0
   128e0:	mov	r2, #5
   128e4:	movt	r1, #1
   128e8:	bl	11548 <dcgettext@plt>
   128ec:	mov	r7, r0
   128f0:	movw	r0, #53716	; 0xd1d4
   128f4:	movt	r0, #2
   128f8:	ldr	r0, [r0]
   128fc:	bl	1821c <__assert_fail@plt+0x69c8>
   12900:	ldr	r9, [sp, #16]
   12904:	movw	r3, #46310	; 0xb4e6
   12908:	str	r0, [sp]
   1290c:	mov	r0, #0
   12910:	mov	r1, r4
   12914:	mov	r2, r7
   12918:	movt	r3, #1
   1291c:	bl	115fc <error@plt>
   12920:	b	12a5c <__assert_fail@plt+0x1208>
   12924:	movw	r1, #46788	; 0xb6c4
   12928:	mov	r0, #0
   1292c:	mov	r2, #5
   12930:	movt	r1, #1
   12934:	bl	11548 <dcgettext@plt>
   12938:	mov	r5, r0
   1293c:	mov	r0, #4
   12940:	mov	r1, sl
   12944:	bl	17cf4 <__assert_fail@plt+0x64a0>
   12948:	mov	r3, r0
   1294c:	mov	r0, #0
   12950:	mov	r1, #0
   12954:	b	12a28 <__assert_fail@plt+0x11d4>
   12958:	ldr	r0, [sp, #20]
   1295c:	cmp	r0, #0
   12960:	beq	12a54 <__assert_fail@plt+0x1200>
   12964:	mov	r0, r9
   12968:	bl	117f4 <context_str@plt>
   1296c:	ldr	r1, [sp, #32]
   12970:	mov	r7, r0
   12974:	cmp	r1, #0
   12978:	beq	12548 <__assert_fail@plt+0xcf4>
   1297c:	mov	r0, r7
   12980:	bl	114c4 <strcmp@plt>
   12984:	cmp	r0, #0
   12988:	bne	12548 <__assert_fail@plt+0xcf4>
   1298c:	mov	r4, #0
   12990:	movw	r0, #53728	; 0xd1e0
   12994:	movt	r0, #2
   12998:	ldr	r0, [r0]
   1299c:	cmp	r0, #0
   129a0:	bne	129b4 <__assert_fail@plt+0x1160>
   129a4:	mov	r0, r9
   129a8:	bl	1165c <context_free@plt>
   129ac:	ldr	r0, [sp, #32]
   129b0:	bl	117d0 <freecon@plt>
   129b4:	eor	r4, r4, #1
   129b8:	b	12ad4 <__assert_fail@plt+0x1280>
   129bc:	bl	116d4 <__errno_location@plt>
   129c0:	ldr	r5, [r0]
   129c4:	movw	r1, #46874	; 0xb71a
   129c8:	mov	r0, #0
   129cc:	mov	r2, #5
   129d0:	movt	r1, #1
   129d4:	bl	11548 <dcgettext@plt>
   129d8:	mov	r4, r0
   129dc:	mov	r0, r7
   129e0:	bl	1821c <__assert_fail@plt+0x69c8>
   129e4:	mov	r3, r0
   129e8:	mov	r0, #0
   129ec:	mov	r1, r5
   129f0:	mov	r2, r4
   129f4:	b	12a2c <__assert_fail@plt+0x11d8>
   129f8:	movw	r1, #45738	; 0xb2aa
   129fc:	mov	r0, #0
   12a00:	mov	r2, #5
   12a04:	movt	r1, #1
   12a08:	bl	11548 <dcgettext@plt>
   12a0c:	mov	r5, r0
   12a10:	mov	r0, #4
   12a14:	mov	r1, sl
   12a18:	bl	17cf4 <__assert_fail@plt+0x64a0>
   12a1c:	mov	r3, r0
   12a20:	mov	r0, #0
   12a24:	mov	r1, r7
   12a28:	mov	r2, r5
   12a2c:	bl	115fc <error@plt>
   12a30:	mov	r4, #0
   12a34:	b	12ad4 <__assert_fail@plt+0x1280>
   12a38:	ldr	r0, [sp, #24]
   12a3c:	mov	r7, #1
   12a40:	mov	r1, r8
   12a44:	mov	r2, #1
   12a48:	str	r7, [r8, #16]
   12a4c:	bl	14db4 <__assert_fail@plt+0x3560>
   12a50:	b	12afc <__assert_fail@plt+0x12a8>
   12a54:	bl	116d4 <__errno_location@plt>
   12a58:	mov	r5, r0
   12a5c:	ldr	r4, [r5]
   12a60:	mov	r0, r9
   12a64:	bl	1165c <context_free@plt>
   12a68:	str	r4, [r5]
   12a6c:	mov	r4, #0
   12a70:	b	12ad4 <__assert_fail@plt+0x1280>
   12a74:	movw	r1, #46375	; 0xb527
   12a78:	mov	r0, #0
   12a7c:	mov	r2, #5
   12a80:	movt	r1, #1
   12a84:	bl	11548 <dcgettext@plt>
   12a88:	mov	r5, r0
   12a8c:	mov	r0, #4
   12a90:	mov	r1, r9
   12a94:	bl	17cf4 <__assert_fail@plt+0x64a0>
   12a98:	mov	r3, r0
   12a9c:	mov	r0, #0
   12aa0:	mov	r1, #0
   12aa4:	mov	r2, r5
   12aa8:	bl	115fc <error@plt>
   12aac:	movw	r1, #46478	; 0xb58e
   12ab0:	mov	r0, #0
   12ab4:	mov	r2, #5
   12ab8:	mov	r4, #0
   12abc:	movt	r1, #1
   12ac0:	bl	11548 <dcgettext@plt>
   12ac4:	mov	r2, r0
   12ac8:	mov	r0, #0
   12acc:	mov	r1, #0
   12ad0:	bl	115fc <error@plt>
   12ad4:	movw	r0, #53704	; 0xd1c8
   12ad8:	movt	r0, #2
   12adc:	ldrb	r0, [r0]
   12ae0:	cmp	r0, #0
   12ae4:	bne	12af8 <__assert_fail@plt+0x12a4>
   12ae8:	ldr	r0, [sp, #24]
   12aec:	mov	r1, r8
   12af0:	mov	r2, #4
   12af4:	bl	14db4 <__assert_fail@plt+0x3560>
   12af8:	mov	r7, r4
   12afc:	ldr	r0, [sp, #24]
   12b00:	and	r6, r6, r7
   12b04:	bl	13734 <__assert_fail@plt+0x1ee0>
   12b08:	mov	r8, r0
   12b0c:	cmp	r0, #0
   12b10:	bne	12280 <__assert_fail@plt+0xa2c>
   12b14:	bl	116d4 <__errno_location@plt>
   12b18:	ldr	r4, [r0]
   12b1c:	mov	r5, r0
   12b20:	cmp	r4, #0
   12b24:	beq	12b50 <__assert_fail@plt+0x12fc>
   12b28:	movw	r1, #46342	; 0xb506
   12b2c:	mov	r0, #0
   12b30:	mov	r2, #5
   12b34:	mov	r6, #0
   12b38:	movt	r1, #1
   12b3c:	bl	11548 <dcgettext@plt>
   12b40:	mov	r2, r0
   12b44:	mov	r0, #0
   12b48:	mov	r1, r4
   12b4c:	bl	115fc <error@plt>
   12b50:	ldr	r0, [sp, #24]
   12b54:	bl	13594 <__assert_fail@plt+0x1d40>
   12b58:	cmp	r0, #0
   12b5c:	beq	12b8c <__assert_fail@plt+0x1338>
   12b60:	ldr	r4, [r5]
   12b64:	movw	r1, #46358	; 0xb516
   12b68:	mov	r0, #0
   12b6c:	mov	r2, #5
   12b70:	mov	r6, #0
   12b74:	movt	r1, #1
   12b78:	bl	11548 <dcgettext@plt>
   12b7c:	mov	r2, r0
   12b80:	mov	r0, #0
   12b84:	mov	r1, r4
   12b88:	bl	115fc <error@plt>
   12b8c:	eor	r0, r6, #1
   12b90:	sub	sp, fp, #28
   12b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b98:	movw	r0, #53600	; 0xd160
   12b9c:	movw	r2, #45624	; 0xb238
   12ba0:	mov	r1, #0
   12ba4:	movw	r7, #45610	; 0xb22a
   12ba8:	movt	r0, #2
   12bac:	movt	r2, #1
   12bb0:	str	r1, [sp, #8]
   12bb4:	movw	r1, #45551	; 0xb1ef
   12bb8:	movt	r7, #1
   12bbc:	ldr	r3, [r0]
   12bc0:	movw	r0, #53692	; 0xd1bc
   12bc4:	str	r2, [sp, #4]
   12bc8:	movw	r2, #45596	; 0xb21c
   12bcc:	movt	r1, #1
   12bd0:	str	r7, [sp]
   12bd4:	movt	r0, #2
   12bd8:	movt	r2, #1
   12bdc:	ldr	r0, [r0]
   12be0:	bl	192b0 <__assert_fail@plt+0x7a5c>
   12be4:	mov	r0, #0
   12be8:	bl	1168c <exit@plt>
   12bec:	mov	r0, #0
   12bf0:	bl	11950 <__assert_fail@plt+0xfc>
   12bf4:	cmp	r0, r5
   12bf8:	bge	12c7c <__assert_fail@plt+0x1428>
   12bfc:	movw	r1, #45713	; 0xb291
   12c00:	mov	r0, #0
   12c04:	mov	r2, #5
   12c08:	movt	r1, #1
   12c0c:	bl	11548 <dcgettext@plt>
   12c10:	mov	r6, r0
   12c14:	add	r0, r4, r5, lsl #2
   12c18:	ldr	r0, [r0, #-4]
   12c1c:	bl	1821c <__assert_fail@plt+0x69c8>
   12c20:	mov	r3, r0
   12c24:	mov	r0, #0
   12c28:	mov	r1, #0
   12c2c:	mov	r2, r6
   12c30:	bl	115fc <error@plt>
   12c34:	mov	r0, #1
   12c38:	bl	11950 <__assert_fail@plt+0xfc>
   12c3c:	bl	116d4 <__errno_location@plt>
   12c40:	ldr	r4, [r0]
   12c44:	movw	r1, #45738	; 0xb2aa
   12c48:	mov	r0, #0
   12c4c:	mov	r2, #5
   12c50:	movt	r1, #1
   12c54:	bl	11548 <dcgettext@plt>
   12c58:	mov	r5, r0
   12c5c:	mov	r0, #4
   12c60:	mov	r1, r6
   12c64:	bl	17cf4 <__assert_fail@plt+0x64a0>
   12c68:	mov	r3, r0
   12c6c:	mov	r0, #1
   12c70:	mov	r1, r4
   12c74:	mov	r2, r5
   12c78:	bl	115fc <error@plt>
   12c7c:	movw	r1, #45697	; 0xb281
   12c80:	movt	r1, #1
   12c84:	mov	r0, #0
   12c88:	mov	r2, #5
   12c8c:	bl	11548 <dcgettext@plt>
   12c90:	mov	r2, r0
   12c94:	mov	r0, #0
   12c98:	mov	r1, #0
   12c9c:	bl	115fc <error@plt>
   12ca0:	mov	r0, #1
   12ca4:	bl	11950 <__assert_fail@plt+0xfc>
   12ca8:	movw	r1, #45637	; 0xb245
   12cac:	movt	r1, #1
   12cb0:	b	12cbc <__assert_fail@plt+0x1468>
   12cb4:	movw	r1, #45679	; 0xb26f
   12cb8:	movt	r1, #1
   12cbc:	mov	r0, #0
   12cc0:	mov	r2, #5
   12cc4:	bl	11548 <dcgettext@plt>
   12cc8:	mov	r2, r0
   12ccc:	mov	r0, #1
   12cd0:	mov	r1, #0
   12cd4:	bl	115fc <error@plt>
   12cd8:	bl	116d4 <__errno_location@plt>
   12cdc:	ldr	r4, [r0]
   12ce0:	movw	r1, #45775	; 0xb2cf
   12ce4:	mov	r0, #0
   12ce8:	mov	r2, #5
   12cec:	movt	r1, #1
   12cf0:	bl	11548 <dcgettext@plt>
   12cf4:	mov	r6, r0
   12cf8:	ldr	r0, [r5]
   12cfc:	bl	1821c <__assert_fail@plt+0x69c8>
   12d00:	mov	r3, r0
   12d04:	mov	r0, #1
   12d08:	mov	r1, r4
   12d0c:	mov	r2, r6
   12d10:	bl	115fc <error@plt>
   12d14:	movw	r1, #53756	; 0xd1fc
   12d18:	movt	r1, #2
   12d1c:	str	r0, [r1]
   12d20:	bx	lr
   12d24:	movw	r1, #53760	; 0xd200
   12d28:	movt	r1, #2
   12d2c:	strb	r0, [r1]
   12d30:	bx	lr
   12d34:	push	{r4, r5, r6, sl, fp, lr}
   12d38:	add	fp, sp, #16
   12d3c:	sub	sp, sp, #8
   12d40:	movw	r0, #53692	; 0xd1bc
   12d44:	movt	r0, #2
   12d48:	ldr	r0, [r0]
   12d4c:	bl	19d00 <__assert_fail@plt+0x84ac>
   12d50:	cmp	r0, #0
   12d54:	beq	12d7c <__assert_fail@plt+0x1528>
   12d58:	movw	r0, #53760	; 0xd200
   12d5c:	movt	r0, #2
   12d60:	ldrb	r0, [r0]
   12d64:	cmp	r0, #0
   12d68:	beq	12d9c <__assert_fail@plt+0x1548>
   12d6c:	bl	116d4 <__errno_location@plt>
   12d70:	ldr	r0, [r0]
   12d74:	cmp	r0, #32
   12d78:	bne	12d9c <__assert_fail@plt+0x1548>
   12d7c:	movw	r0, #53688	; 0xd1b8
   12d80:	movt	r0, #2
   12d84:	ldr	r0, [r0]
   12d88:	bl	19d00 <__assert_fail@plt+0x84ac>
   12d8c:	cmp	r0, #0
   12d90:	subeq	sp, fp, #16
   12d94:	popeq	{r4, r5, r6, sl, fp, pc}
   12d98:	b	12e0c <__assert_fail@plt+0x15b8>
   12d9c:	movw	r1, #47263	; 0xb89f
   12da0:	mov	r0, #0
   12da4:	mov	r2, #5
   12da8:	movt	r1, #1
   12dac:	bl	11548 <dcgettext@plt>
   12db0:	mov	r4, r0
   12db4:	movw	r0, #53756	; 0xd1fc
   12db8:	movt	r0, #2
   12dbc:	ldr	r6, [r0]
   12dc0:	bl	116d4 <__errno_location@plt>
   12dc4:	ldr	r5, [r0]
   12dc8:	cmp	r6, #0
   12dcc:	bne	12de8 <__assert_fail@plt+0x1594>
   12dd0:	movw	r2, #47279	; 0xb8af
   12dd4:	mov	r0, #0
   12dd8:	mov	r1, r5
   12ddc:	mov	r3, r4
   12de0:	movt	r2, #1
   12de4:	b	12e08 <__assert_fail@plt+0x15b4>
   12de8:	mov	r0, r6
   12dec:	bl	17e94 <__assert_fail@plt+0x6640>
   12df0:	movw	r2, #47275	; 0xb8ab
   12df4:	mov	r3, r0
   12df8:	str	r4, [sp]
   12dfc:	mov	r0, #0
   12e00:	mov	r1, r5
   12e04:	movt	r2, #1
   12e08:	bl	115fc <error@plt>
   12e0c:	movw	r0, #53604	; 0xd164
   12e10:	movt	r0, #2
   12e14:	ldr	r0, [r0]
   12e18:	bl	11500 <_exit@plt>
   12e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e20:	add	fp, sp, #28
   12e24:	sub	sp, sp, #28
   12e28:	cmp	r1, #4096	; 0x1000
   12e2c:	bcs	12e48 <__assert_fail@plt+0x15f4>
   12e30:	mov	r7, r0
   12e34:	and	r0, r1, #516	; 0x204
   12e38:	mov	r5, r1
   12e3c:	cmp	r0, #516	; 0x204
   12e40:	tstne	r5, #18
   12e44:	bne	12e64 <__assert_fail@plt+0x1610>
   12e48:	bl	116d4 <__errno_location@plt>
   12e4c:	mov	r1, #22
   12e50:	mov	r4, #0
   12e54:	str	r1, [r0]
   12e58:	mov	r0, r4
   12e5c:	sub	sp, fp, #28
   12e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e64:	mov	r0, #1
   12e68:	mov	r1, #96	; 0x60
   12e6c:	mov	sl, r2
   12e70:	bl	19b04 <__assert_fail@plt+0x82b0>
   12e74:	cmp	r0, #0
   12e78:	beq	13268 <__assert_fail@plt+0x1a14>
   12e7c:	mov	r4, r0
   12e80:	mvn	r0, #99	; 0x63
   12e84:	tst	r5, #2
   12e88:	mov	r1, r5
   12e8c:	str	r0, [r4, #32]
   12e90:	bic	r0, r5, #516	; 0x204
   12e94:	str	sl, [r4, #44]	; 0x2c
   12e98:	str	r4, [sp, #24]
   12e9c:	orrne	r1, r0, #4
   12ea0:	str	r1, [r4, #48]	; 0x30
   12ea4:	ldr	r0, [r7]
   12ea8:	cmp	r0, #0
   12eac:	beq	12ee4 <__assert_fail@plt+0x1690>
   12eb0:	add	r6, r7, #4
   12eb4:	mov	r4, #0
   12eb8:	bl	116b0 <strlen@plt>
   12ebc:	cmp	r0, r4
   12ec0:	movhi	r4, r0
   12ec4:	ldr	r0, [r6], #4
   12ec8:	cmp	r0, #0
   12ecc:	bne	12eb8 <__assert_fail@plt+0x1664>
   12ed0:	add	r0, r4, #1
   12ed4:	ldr	r4, [sp, #24]
   12ed8:	cmp	r0, #4096	; 0x1000
   12edc:	movls	r0, #4096	; 0x1000
   12ee0:	b	12ee8 <__assert_fail@plt+0x1694>
   12ee4:	mov	r0, #4096	; 0x1000
   12ee8:	ldr	r1, [r4, #36]	; 0x24
   12eec:	add	r0, r0, #256	; 0x100
   12ef0:	adds	r1, r0, r1
   12ef4:	bcc	12f18 <__assert_fail@plt+0x16c4>
   12ef8:	ldr	r0, [r4, #24]
   12efc:	bl	1a198 <__assert_fail@plt+0x8944>
   12f00:	mov	r0, #0
   12f04:	str	r0, [r4, #24]
   12f08:	bl	116d4 <__errno_location@plt>
   12f0c:	mov	r1, #36	; 0x24
   12f10:	str	r1, [r0]
   12f14:	b	13260 <__assert_fail@plt+0x1a0c>
   12f18:	str	r1, [r4, #36]	; 0x24
   12f1c:	ldr	r0, [r4, #24]
   12f20:	bl	19b88 <__assert_fail@plt+0x8334>
   12f24:	cmp	r0, #0
   12f28:	beq	12f8c <__assert_fail@plt+0x1738>
   12f2c:	str	r0, [r4, #24]
   12f30:	ldr	r0, [r7]
   12f34:	cmp	r0, #0
   12f38:	beq	12fa0 <__assert_fail@plt+0x174c>
   12f3c:	mov	r0, #176	; 0xb0
   12f40:	bl	19b58 <__assert_fail@plt+0x8304>
   12f44:	cmp	r0, #0
   12f48:	beq	13258 <__assert_fail@plt+0x1a04>
   12f4c:	ldr	r1, [r4, #24]
   12f50:	mov	r8, r0
   12f54:	mov	r0, #0
   12f58:	mov	r2, #196608	; 0x30000
   12f5c:	strb	r0, [r8, #168]	; 0xa8
   12f60:	str	r2, [r8, #58]	; 0x3a
   12f64:	mvn	r2, #0
   12f68:	str	r0, [r8, #12]
   12f6c:	str	r0, [r8, #16]
   12f70:	str	r0, [r8, #20]
   12f74:	str	r4, [r8, #44]	; 0x2c
   12f78:	str	r2, [r8, #48]	; 0x30
   12f7c:	str	r0, [r8, #52]	; 0x34
   12f80:	str	r1, [r8, #28]
   12f84:	str	r0, [r8, #32]
   12f88:	b	12fa4 <__assert_fail@plt+0x1750>
   12f8c:	ldr	r0, [r4, #24]
   12f90:	bl	1a198 <__assert_fail@plt+0x8944>
   12f94:	mov	r0, #0
   12f98:	str	r0, [r4, #24]
   12f9c:	b	13260 <__assert_fail@plt+0x1a0c>
   12fa0:	mov	r8, #0
   12fa4:	cmp	sl, #0
   12fa8:	ldrbne	r0, [r4, #49]	; 0x31
   12fac:	ubfxne	r0, r0, #2, #1
   12fb0:	ldr	r4, [r7]
   12fb4:	moveq	r0, #1
   12fb8:	cmp	r4, #0
   12fbc:	beq	13128 <__assert_fail@plt+0x18d4>
   12fc0:	eor	r0, r0, #1
   12fc4:	and	r1, r5, #2048	; 0x800
   12fc8:	mov	r9, #0
   12fcc:	mov	r6, #0
   12fd0:	str	r8, [sp, #16]
   12fd4:	str	sl, [sp, #8]
   12fd8:	str	r0, [sp, #12]
   12fdc:	mov	r0, #0
   12fe0:	str	r1, [sp, #20]
   12fe4:	str	r0, [sp, #4]
   12fe8:	mov	r0, r4
   12fec:	bl	116b0 <strlen@plt>
   12ff0:	mov	r8, r0
   12ff4:	ldr	r0, [sp, #20]
   12ff8:	cmp	r0, #0
   12ffc:	bne	13034 <__assert_fail@plt+0x17e0>
   13000:	cmp	r8, #3
   13004:	bcc	13034 <__assert_fail@plt+0x17e0>
   13008:	add	r0, r4, r8
   1300c:	ldrb	r0, [r0, #-1]
   13010:	cmp	r0, #47	; 0x2f
   13014:	bne	13034 <__assert_fail@plt+0x17e0>
   13018:	sub	r0, r4, #2
   1301c:	ldrb	r1, [r0, r8]
   13020:	cmp	r1, #47	; 0x2f
   13024:	bne	13034 <__assert_fail@plt+0x17e0>
   13028:	sub	r8, r8, #1
   1302c:	cmp	r8, #1
   13030:	bhi	1301c <__assert_fail@plt+0x17c8>
   13034:	add	r0, r8, #176	; 0xb0
   13038:	bic	r0, r0, #7
   1303c:	bl	19b58 <__assert_fail@plt+0x8304>
   13040:	cmp	r0, #0
   13044:	beq	13134 <__assert_fail@plt+0x18e0>
   13048:	add	sl, r0, #168	; 0xa8
   1304c:	mov	r5, r0
   13050:	mov	r1, r4
   13054:	mov	r2, r8
   13058:	mov	r0, sl
   1305c:	bl	1150c <memcpy@plt>
   13060:	ldr	r0, [sp, #24]
   13064:	mov	r4, #0
   13068:	mov	r2, #196608	; 0x30000
   1306c:	strb	r4, [sl, r8]
   13070:	str	r2, [r5, #58]	; 0x3a
   13074:	add	r2, r5, #44	; 0x2c
   13078:	ldr	r1, [r0, #24]
   1307c:	stm	r2, {r0, r4, r8}
   13080:	ldr	r8, [sp, #16]
   13084:	ldr	r2, [sp, #12]
   13088:	str	r8, [r5, #4]
   1308c:	str	r4, [r5, #12]
   13090:	str	r4, [r5, #16]
   13094:	str	r4, [r5, #20]
   13098:	str	sl, [r5, #24]
   1309c:	str	r1, [r5, #28]
   130a0:	clz	r1, r9
   130a4:	str	r4, [r5, #32]
   130a8:	lsr	r1, r1, #5
   130ac:	orrs	r1, r2, r1
   130b0:	bne	130c8 <__assert_fail@plt+0x1874>
   130b4:	mov	r0, #2
   130b8:	str	r0, [r5, #112]	; 0x70
   130bc:	str	r4, [r5, #116]	; 0x74
   130c0:	mov	r0, #11
   130c4:	b	130d4 <__assert_fail@plt+0x1880>
   130c8:	mov	r1, r5
   130cc:	mov	r2, #0
   130d0:	bl	132f8 <__assert_fail@plt+0x1aa4>
   130d4:	ldr	sl, [sp, #8]
   130d8:	strh	r0, [r5, #56]	; 0x38
   130dc:	cmp	sl, #0
   130e0:	beq	130f0 <__assert_fail@plt+0x189c>
   130e4:	str	r9, [r5, #8]
   130e8:	mov	r9, r5
   130ec:	b	13108 <__assert_fail@plt+0x18b4>
   130f0:	cmp	r9, #0
   130f4:	str	r4, [r5, #8]
   130f8:	beq	1311c <__assert_fail@plt+0x18c8>
   130fc:	ldr	r0, [sp, #4]
   13100:	str	r5, [sp, #4]
   13104:	str	r5, [r0, #8]
   13108:	ldr	r4, [r7, #4]!
   1310c:	add	r6, r6, #1
   13110:	cmp	r4, #0
   13114:	bne	12fe8 <__assert_fail@plt+0x1794>
   13118:	b	13144 <__assert_fail@plt+0x18f0>
   1311c:	mov	r0, r5
   13120:	str	r5, [sp, #4]
   13124:	b	130e8 <__assert_fail@plt+0x1894>
   13128:	ldr	r4, [sp, #24]
   1312c:	mov	r9, #0
   13130:	b	13174 <__assert_fail@plt+0x1920>
   13134:	ldr	r8, [sp, #16]
   13138:	cmp	r9, #0
   1313c:	bne	13224 <__assert_fail@plt+0x19d0>
   13140:	b	1324c <__assert_fail@plt+0x19f8>
   13144:	cmp	sl, #0
   13148:	beq	13170 <__assert_fail@plt+0x191c>
   1314c:	ldr	r4, [sp, #24]
   13150:	cmp	r6, #2
   13154:	bcc	13174 <__assert_fail@plt+0x1920>
   13158:	mov	r0, r4
   1315c:	mov	r1, r9
   13160:	mov	r2, r6
   13164:	bl	13490 <__assert_fail@plt+0x1c3c>
   13168:	mov	r9, r0
   1316c:	b	13174 <__assert_fail@plt+0x1920>
   13170:	ldr	r4, [sp, #24]
   13174:	mov	r0, #176	; 0xb0
   13178:	bl	19b58 <__assert_fail@plt+0x8304>
   1317c:	cmp	r0, #0
   13180:	beq	13214 <__assert_fail@plt+0x19c0>
   13184:	ldr	r2, [r4, #24]
   13188:	mov	r1, #0
   1318c:	mov	r3, #196608	; 0x30000
   13190:	str	r0, [r4]
   13194:	str	r1, [r0, #52]	; 0x34
   13198:	strb	r1, [r0, #168]	; 0xa8
   1319c:	str	r4, [r0, #44]	; 0x2c
   131a0:	str	r3, [r0, #58]	; 0x3a
   131a4:	str	r2, [r0, #28]
   131a8:	mov	r2, #9
   131ac:	str	r1, [r0, #32]
   131b0:	strh	r2, [r0, #56]	; 0x38
   131b4:	str	r9, [r0, #8]
   131b8:	str	r1, [r0, #12]
   131bc:	str	r1, [r0, #16]
   131c0:	str	r1, [r0, #20]
   131c4:	mov	r1, #1
   131c8:	str	r1, [r0, #48]	; 0x30
   131cc:	ldrh	r0, [r4, #48]	; 0x30
   131d0:	movw	r1, #258	; 0x102
   131d4:	tst	r0, r1
   131d8:	beq	13270 <__assert_fail@plt+0x1a1c>
   131dc:	movw	r0, #41368	; 0xa198
   131e0:	movw	r2, #20412	; 0x4fbc
   131e4:	movw	r3, #20444	; 0x4fdc
   131e8:	mov	r1, #0
   131ec:	movt	r0, #1
   131f0:	movt	r2, #1
   131f4:	movt	r3, #1
   131f8:	str	r0, [sp]
   131fc:	mov	r0, #31
   13200:	bl	15650 <__assert_fail@plt+0x3dfc>
   13204:	cmp	r0, #0
   13208:	str	r0, [r4, #56]	; 0x38
   1320c:	bne	13288 <__assert_fail@plt+0x1a34>
   13210:	b	1321c <__assert_fail@plt+0x19c8>
   13214:	mov	r0, #0
   13218:	str	r0, [r4]
   1321c:	cmp	r9, #0
   13220:	beq	1324c <__assert_fail@plt+0x19f8>
   13224:	ldrd	r4, [r9, #8]
   13228:	cmp	r5, #0
   1322c:	beq	13238 <__assert_fail@plt+0x19e4>
   13230:	mov	r0, r5
   13234:	bl	1183c <closedir@plt>
   13238:	mov	r0, r9
   1323c:	bl	1a198 <__assert_fail@plt+0x8944>
   13240:	cmp	r4, #0
   13244:	mov	r9, r4
   13248:	bne	13224 <__assert_fail@plt+0x19d0>
   1324c:	mov	r0, r8
   13250:	bl	1a198 <__assert_fail@plt+0x8944>
   13254:	ldr	r4, [sp, #24]
   13258:	ldr	r0, [r4, #24]
   1325c:	bl	1a198 <__assert_fail@plt+0x8944>
   13260:	mov	r0, r4
   13264:	bl	1a198 <__assert_fail@plt+0x8944>
   13268:	mov	r4, #0
   1326c:	b	12e58 <__assert_fail@plt+0x1604>
   13270:	mov	r0, #32
   13274:	bl	19b58 <__assert_fail@plt+0x8304>
   13278:	cmp	r0, #0
   1327c:	str	r0, [r4, #56]	; 0x38
   13280:	beq	1321c <__assert_fail@plt+0x19c8>
   13284:	bl	19d84 <__assert_fail@plt+0x8530>
   13288:	ldr	r4, [sp, #24]
   1328c:	ldr	r0, [r4, #48]	; 0x30
   13290:	tst	r0, #516	; 0x204
   13294:	bne	132e8 <__assert_fail@plt+0x1a94>
   13298:	mov	r1, #32768	; 0x8000
   1329c:	tst	r0, #512	; 0x200
   132a0:	and	r1, r1, r0, lsl #11
   132a4:	orr	r1, r1, #18688	; 0x4900
   132a8:	orr	r2, r1, #524288	; 0x80000
   132ac:	bne	132c4 <__assert_fail@plt+0x1a70>
   132b0:	movw	r0, #47283	; 0xb8b3
   132b4:	mov	r1, r2
   132b8:	movt	r0, #1
   132bc:	bl	1a0f4 <__assert_fail@plt+0x88a0>
   132c0:	b	132d4 <__assert_fail@plt+0x1a80>
   132c4:	ldr	r0, [r4, #32]
   132c8:	movw	r1, #47283	; 0xb8b3
   132cc:	movt	r1, #1
   132d0:	bl	16548 <__assert_fail@plt+0x4cf4>
   132d4:	str	r0, [r4, #28]
   132d8:	cmn	r0, #1
   132dc:	ldrle	r0, [r4, #48]	; 0x30
   132e0:	orrle	r0, r0, #4
   132e4:	strle	r0, [r4, #48]	; 0x30
   132e8:	add	r0, r4, #60	; 0x3c
   132ec:	mvn	r1, #0
   132f0:	bl	16478 <__assert_fail@plt+0x4c24>
   132f4:	b	12e58 <__assert_fail@plt+0x1604>
   132f8:	push	{r4, r5, r6, sl, fp, lr}
   132fc:	add	fp, sp, #16
   13300:	sub	sp, sp, #8
   13304:	mov	r4, r1
   13308:	ldr	r1, [r0, #48]	; 0x30
   1330c:	ldr	r3, [r4, #48]	; 0x30
   13310:	add	r5, r4, #64	; 0x40
   13314:	cmp	r3, #0
   13318:	andeq	r3, r1, #1
   1331c:	orreq	r2, r3, r2
   13320:	cmp	r2, #0
   13324:	andseq	r1, r1, #2
   13328:	beq	13384 <__assert_fail@plt+0x1b30>
   1332c:	ldr	r1, [r4, #24]
   13330:	mov	r0, #3
   13334:	mov	r2, r5
   13338:	bl	11800 <__xstat64@plt>
   1333c:	cmp	r0, #0
   13340:	beq	13404 <__assert_fail@plt+0x1bb0>
   13344:	bl	116d4 <__errno_location@plt>
   13348:	mov	r6, r0
   1334c:	ldr	r0, [r0]
   13350:	cmp	r0, #2
   13354:	bne	133b4 <__assert_fail@plt+0x1b60>
   13358:	ldr	r1, [r4, #24]
   1335c:	mov	r0, #3
   13360:	mov	r2, r5
   13364:	bl	11830 <__lxstat64@plt>
   13368:	cmp	r0, #0
   1336c:	bne	133b0 <__assert_fail@plt+0x1b5c>
   13370:	mov	r0, #0
   13374:	str	r0, [r6]
   13378:	mov	r0, #13
   1337c:	sub	sp, fp, #16
   13380:	pop	{r4, r5, r6, sl, fp, pc}
   13384:	ldr	r1, [r0, #32]
   13388:	ldr	r2, [r4, #24]
   1338c:	mov	r0, #256	; 0x100
   13390:	mov	r3, r5
   13394:	str	r0, [sp]
   13398:	mov	r0, #3
   1339c:	bl	11590 <__fxstatat64@plt>
   133a0:	cmp	r0, #0
   133a4:	beq	13404 <__assert_fail@plt+0x1bb0>
   133a8:	bl	116d4 <__errno_location@plt>
   133ac:	mov	r6, r0
   133b0:	ldr	r0, [r6]
   133b4:	vmov.i32	q8, #0	; 0x00000000
   133b8:	add	r1, r5, #80	; 0x50
   133bc:	str	r0, [r4, #32]
   133c0:	mov	r0, #0
   133c4:	vst1.64	{d16-d17}, [r1]
   133c8:	add	r1, r5, #64	; 0x40
   133cc:	str	r0, [r5, #96]	; 0x60
   133d0:	vst1.64	{d16-d17}, [r1]
   133d4:	add	r1, r5, #48	; 0x30
   133d8:	vst1.64	{d16-d17}, [r1]
   133dc:	add	r1, r5, #32
   133e0:	vst1.64	{d16-d17}, [r1]
   133e4:	add	r1, r5, #16
   133e8:	vst1.64	{d16-d17}, [r1]
   133ec:	mov	r1, #100	; 0x64
   133f0:	vst1.64	{d16-d17}, [r5], r1
   133f4:	str	r0, [r5]
   133f8:	mov	r0, #10
   133fc:	sub	sp, fp, #16
   13400:	pop	{r4, r5, r6, sl, fp, pc}
   13404:	ldr	r0, [r4, #80]	; 0x50
   13408:	and	r0, r0, #61440	; 0xf000
   1340c:	cmp	r0, #40960	; 0xa000
   13410:	beq	1346c <__assert_fail@plt+0x1c18>
   13414:	cmp	r0, #32768	; 0x8000
   13418:	moveq	r0, #8
   1341c:	subeq	sp, fp, #16
   13420:	popeq	{r4, r5, r6, sl, fp, pc}
   13424:	cmp	r0, #16384	; 0x4000
   13428:	bne	13460 <__assert_fail@plt+0x1c0c>
   1342c:	ldrb	r1, [r4, #168]	; 0xa8
   13430:	mov	r0, #1
   13434:	cmp	r1, #46	; 0x2e
   13438:	bne	13458 <__assert_fail@plt+0x1c04>
   1343c:	ldrb	r1, [r4, #169]	; 0xa9
   13440:	cmp	r1, #0
   13444:	beq	13478 <__assert_fail@plt+0x1c24>
   13448:	cmp	r1, #46	; 0x2e
   1344c:	ldrbeq	r1, [r4, #170]	; 0xaa
   13450:	cmpeq	r1, #0
   13454:	beq	13478 <__assert_fail@plt+0x1c24>
   13458:	sub	sp, fp, #16
   1345c:	pop	{r4, r5, r6, sl, fp, pc}
   13460:	mov	r0, #3
   13464:	sub	sp, fp, #16
   13468:	pop	{r4, r5, r6, sl, fp, pc}
   1346c:	mov	r0, #12
   13470:	sub	sp, fp, #16
   13474:	pop	{r4, r5, r6, sl, fp, pc}
   13478:	ldr	r1, [r4, #48]	; 0x30
   1347c:	mov	r0, #5
   13480:	cmp	r1, #0
   13484:	movweq	r0, #1
   13488:	sub	sp, fp, #16
   1348c:	pop	{r4, r5, r6, sl, fp, pc}
   13490:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13494:	add	fp, sp, #24
   13498:	ldrd	r8, [r0, #40]	; 0x28
   1349c:	mov	r5, r2
   134a0:	mov	r4, r1
   134a4:	mov	r6, r0
   134a8:	cmp	r8, r2
   134ac:	bcs	134ec <__assert_fail@plt+0x1c98>
   134b0:	add	r1, r5, #40	; 0x28
   134b4:	cmn	r1, #-1073741823	; 0xc0000001
   134b8:	str	r1, [r6, #40]	; 0x28
   134bc:	bhi	13578 <__assert_fail@plt+0x1d24>
   134c0:	add	r7, r6, #8
   134c4:	lsl	r1, r1, #2
   134c8:	ldr	r0, [r7]
   134cc:	bl	19b88 <__assert_fail@plt+0x8334>
   134d0:	cmp	r0, #0
   134d4:	beq	13578 <__assert_fail@plt+0x1d24>
   134d8:	mov	r6, r7
   134dc:	str	r0, [r7]
   134e0:	cmp	r4, #0
   134e4:	bne	134f8 <__assert_fail@plt+0x1ca4>
   134e8:	b	1350c <__assert_fail@plt+0x1cb8>
   134ec:	ldr	r0, [r6, #8]!
   134f0:	cmp	r4, #0
   134f4:	beq	1350c <__assert_fail@plt+0x1cb8>
   134f8:	str	r4, [r0], #4
   134fc:	ldr	r4, [r4, #8]
   13500:	cmp	r4, #0
   13504:	bne	134f8 <__assert_fail@plt+0x1ca4>
   13508:	ldr	r0, [r6]
   1350c:	mov	r1, r5
   13510:	mov	r2, #4
   13514:	mov	r3, r9
   13518:	bl	117c4 <qsort@plt>
   1351c:	ldr	r7, [r6]
   13520:	subs	r0, r5, #1
   13524:	ldr	r4, [r7]
   13528:	mov	r1, r4
   1352c:	beq	13568 <__assert_fail@plt+0x1d14>
   13530:	mov	r1, r7
   13534:	cmp	r5, #2
   13538:	ldr	r2, [r1, #4]!
   1353c:	str	r2, [r4, #8]
   13540:	beq	13564 <__assert_fail@plt+0x1d10>
   13544:	rsb	r3, r5, #2
   13548:	mov	r2, r1
   1354c:	ldr	r6, [r2, #4]!
   13550:	ldr	r1, [r1]
   13554:	adds	r3, r3, #1
   13558:	str	r6, [r1, #8]
   1355c:	mov	r1, r2
   13560:	bne	1354c <__assert_fail@plt+0x1cf8>
   13564:	ldr	r1, [r7, r0, lsl #2]
   13568:	mov	r0, #0
   1356c:	str	r0, [r1, #8]
   13570:	mov	r0, r4
   13574:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13578:	ldr	r0, [r6, #8]
   1357c:	bl	1a198 <__assert_fail@plt+0x8944>
   13580:	mov	r0, #0
   13584:	str	r0, [r6, #40]	; 0x28
   13588:	str	r0, [r6, #8]
   1358c:	mov	r0, r4
   13590:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13594:	push	{r4, r5, r6, r7, fp, lr}
   13598:	add	fp, sp, #16
   1359c:	mov	r4, r0
   135a0:	ldr	r0, [r0]
   135a4:	cmp	r0, #0
   135a8:	beq	135e8 <__assert_fail@plt+0x1d94>
   135ac:	ldr	r1, [r0, #48]	; 0x30
   135b0:	cmp	r1, #0
   135b4:	blt	135dc <__assert_fail@plt+0x1d88>
   135b8:	ldr	r5, [r0, #8]
   135bc:	cmp	r5, #0
   135c0:	ldreq	r5, [r0, #4]
   135c4:	bl	1a198 <__assert_fail@plt+0x8944>
   135c8:	ldr	r0, [r5, #48]	; 0x30
   135cc:	cmn	r0, #1
   135d0:	mov	r0, r5
   135d4:	bgt	135b8 <__assert_fail@plt+0x1d64>
   135d8:	b	135e0 <__assert_fail@plt+0x1d8c>
   135dc:	mov	r5, r0
   135e0:	mov	r0, r5
   135e4:	bl	1a198 <__assert_fail@plt+0x8944>
   135e8:	ldr	r5, [r4, #4]
   135ec:	cmp	r5, #0
   135f0:	beq	1361c <__assert_fail@plt+0x1dc8>
   135f4:	ldrd	r6, [r5, #8]
   135f8:	cmp	r7, #0
   135fc:	beq	13608 <__assert_fail@plt+0x1db4>
   13600:	mov	r0, r7
   13604:	bl	1183c <closedir@plt>
   13608:	mov	r0, r5
   1360c:	bl	1a198 <__assert_fail@plt+0x8944>
   13610:	cmp	r6, #0
   13614:	mov	r5, r6
   13618:	bne	135f4 <__assert_fail@plt+0x1da0>
   1361c:	ldr	r0, [r4, #8]
   13620:	bl	1a198 <__assert_fail@plt+0x8944>
   13624:	ldr	r0, [r4, #24]
   13628:	bl	1a198 <__assert_fail@plt+0x8944>
   1362c:	ldr	r0, [r4, #48]	; 0x30
   13630:	tst	r0, #512	; 0x200
   13634:	bne	13660 <__assert_fail@plt+0x1e0c>
   13638:	mov	r6, #0
   1363c:	tst	r0, #4
   13640:	bne	136a4 <__assert_fail@plt+0x1e50>
   13644:	ldr	r0, [r4, #28]
   13648:	bl	117b8 <fchdir@plt>
   1364c:	cmp	r0, #0
   13650:	beq	13680 <__assert_fail@plt+0x1e2c>
   13654:	bl	116d4 <__errno_location@plt>
   13658:	ldr	r6, [r0]
   1365c:	b	13684 <__assert_fail@plt+0x1e30>
   13660:	ldr	r0, [r4, #32]
   13664:	mov	r6, #0
   13668:	cmp	r0, #0
   1366c:	blt	136a4 <__assert_fail@plt+0x1e50>
   13670:	bl	11824 <close@plt>
   13674:	cmp	r0, #0
   13678:	bne	1369c <__assert_fail@plt+0x1e48>
   1367c:	b	136a4 <__assert_fail@plt+0x1e50>
   13680:	mov	r6, #0
   13684:	ldr	r0, [r4, #28]
   13688:	bl	11824 <close@plt>
   1368c:	cmp	r6, #0
   13690:	bne	136a4 <__assert_fail@plt+0x1e50>
   13694:	cmp	r0, #0
   13698:	beq	136a4 <__assert_fail@plt+0x1e50>
   1369c:	bl	116d4 <__errno_location@plt>
   136a0:	ldr	r6, [r0]
   136a4:	add	r5, r4, #60	; 0x3c
   136a8:	b	136b0 <__assert_fail@plt+0x1e5c>
   136ac:	bl	11824 <close@plt>
   136b0:	mov	r0, r5
   136b4:	bl	1649c <__assert_fail@plt+0x4c48>
   136b8:	cmp	r0, #0
   136bc:	bne	136d4 <__assert_fail@plt+0x1e80>
   136c0:	mov	r0, r5
   136c4:	bl	164f0 <__assert_fail@plt+0x4c9c>
   136c8:	cmp	r0, #0
   136cc:	bge	136ac <__assert_fail@plt+0x1e58>
   136d0:	b	136b0 <__assert_fail@plt+0x1e5c>
   136d4:	ldr	r0, [r4, #52]	; 0x34
   136d8:	cmp	r0, #0
   136dc:	beq	136e4 <__assert_fail@plt+0x1e90>
   136e0:	bl	15948 <__assert_fail@plt+0x40f4>
   136e4:	ldrh	r0, [r4, #48]	; 0x30
   136e8:	movw	r1, #258	; 0x102
   136ec:	tst	r0, r1
   136f0:	beq	13708 <__assert_fail@plt+0x1eb4>
   136f4:	ldr	r0, [r4, #56]	; 0x38
   136f8:	cmp	r0, #0
   136fc:	beq	13710 <__assert_fail@plt+0x1ebc>
   13700:	bl	15948 <__assert_fail@plt+0x40f4>
   13704:	b	13710 <__assert_fail@plt+0x1ebc>
   13708:	ldr	r0, [r4, #56]	; 0x38
   1370c:	bl	1a198 <__assert_fail@plt+0x8944>
   13710:	mov	r0, r4
   13714:	bl	1a198 <__assert_fail@plt+0x8944>
   13718:	cmp	r6, #0
   1371c:	moveq	r0, #0
   13720:	popeq	{r4, r5, r6, r7, fp, pc}
   13724:	bl	116d4 <__errno_location@plt>
   13728:	str	r6, [r0]
   1372c:	mvn	r0, #0
   13730:	pop	{r4, r5, r6, r7, fp, pc}
   13734:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13738:	add	fp, sp, #24
   1373c:	sub	sp, sp, #8
   13740:	ldr	r6, [r0]
   13744:	mov	r5, #0
   13748:	cmp	r6, #0
   1374c:	beq	13e80 <__assert_fail@plt+0x262c>
   13750:	mov	r4, r0
   13754:	ldr	r0, [r0, #48]	; 0x30
   13758:	tst	r0, #8192	; 0x2000
   1375c:	bne	13e80 <__assert_fail@plt+0x262c>
   13760:	ldrh	r1, [r6, #60]	; 0x3c
   13764:	mov	r2, #3
   13768:	strh	r2, [r6, #60]	; 0x3c
   1376c:	cmp	r1, #1
   13770:	beq	137e8 <__assert_fail@plt+0x1f94>
   13774:	mov	r7, r6
   13778:	cmp	r1, #2
   1377c:	bne	13804 <__assert_fail@plt+0x1fb0>
   13780:	ldrh	r2, [r7, #56]!	; 0x38
   13784:	movw	r3, #65534	; 0xfffe
   13788:	and	r3, r2, r3
   1378c:	cmp	r3, #12
   13790:	bne	13808 <__assert_fail@plt+0x1fb4>
   13794:	mov	r0, r4
   13798:	mov	r1, r6
   1379c:	mov	r2, #1
   137a0:	bl	132f8 <__assert_fail@plt+0x1aa4>
   137a4:	cmp	r0, #1
   137a8:	strh	r0, [r6, #56]	; 0x38
   137ac:	bne	138f0 <__assert_fail@plt+0x209c>
   137b0:	ldr	r0, [r4, #48]	; 0x30
   137b4:	tst	r0, #4
   137b8:	bne	138f0 <__assert_fail@plt+0x209c>
   137bc:	mov	r1, #32768	; 0x8000
   137c0:	tst	r0, #512	; 0x200
   137c4:	and	r1, r1, r0, lsl #11
   137c8:	orr	r1, r1, #18688	; 0x4900
   137cc:	orr	r2, r1, #524288	; 0x80000
   137d0:	bne	13b5c <__assert_fail@plt+0x2308>
   137d4:	movw	r0, #47283	; 0xb8b3
   137d8:	mov	r1, r2
   137dc:	movt	r0, #1
   137e0:	bl	1a0f4 <__assert_fail@plt+0x88a0>
   137e4:	b	13b6c <__assert_fail@plt+0x2318>
   137e8:	mov	r0, r4
   137ec:	mov	r1, r6
   137f0:	mov	r2, #0
   137f4:	bl	132f8 <__assert_fail@plt+0x1aa4>
   137f8:	strh	r0, [r6, #56]	; 0x38
   137fc:	mov	r5, r6
   13800:	b	13e80 <__assert_fail@plt+0x262c>
   13804:	ldrh	r2, [r7, #56]!	; 0x38
   13808:	cmp	r2, #1
   1380c:	bne	13884 <__assert_fail@plt+0x2030>
   13810:	cmp	r1, #4
   13814:	bne	138f8 <__assert_fail@plt+0x20a4>
   13818:	ldrb	r0, [r6, #58]	; 0x3a
   1381c:	tst	r0, #2
   13820:	beq	1382c <__assert_fail@plt+0x1fd8>
   13824:	ldr	r0, [r6, #36]	; 0x24
   13828:	bl	11824 <close@plt>
   1382c:	ldr	r5, [r4, #4]
   13830:	cmp	r5, #0
   13834:	beq	13868 <__assert_fail@plt+0x2014>
   13838:	ldrd	r8, [r5, #8]
   1383c:	cmp	r9, #0
   13840:	beq	1384c <__assert_fail@plt+0x1ff8>
   13844:	mov	r0, r9
   13848:	bl	1183c <closedir@plt>
   1384c:	mov	r0, r5
   13850:	bl	1a198 <__assert_fail@plt+0x8944>
   13854:	cmp	r8, #0
   13858:	mov	r5, r8
   1385c:	bne	13838 <__assert_fail@plt+0x1fe4>
   13860:	mov	r0, #0
   13864:	str	r0, [r4, #4]
   13868:	mov	r0, #6
   1386c:	strh	r0, [r6, #56]	; 0x38
   13870:	mov	r0, r4
   13874:	mov	r1, r6
   13878:	bl	13e90 <__assert_fail@plt+0x263c>
   1387c:	mov	r5, r6
   13880:	b	13e80 <__assert_fail@plt+0x262c>
   13884:	ldr	r5, [r6, #8]
   13888:	cmp	r5, #0
   1388c:	beq	13988 <__assert_fail@plt+0x2134>
   13890:	mov	r0, r6
   13894:	str	r5, [r4]
   13898:	bl	1a198 <__assert_fail@plt+0x8944>
   1389c:	ldr	r0, [r5, #48]	; 0x30
   138a0:	cmp	r0, #0
   138a4:	beq	139d4 <__assert_fail@plt+0x2180>
   138a8:	ldrh	r0, [r5, #60]	; 0x3c
   138ac:	mov	r6, r5
   138b0:	cmp	r0, #4
   138b4:	beq	13884 <__assert_fail@plt+0x2030>
   138b8:	cmp	r0, #2
   138bc:	bne	13a74 <__assert_fail@plt+0x2220>
   138c0:	mov	r0, r4
   138c4:	mov	r1, r5
   138c8:	mov	r2, #1
   138cc:	bl	132f8 <__assert_fail@plt+0x1aa4>
   138d0:	strh	r0, [r5, #56]	; 0x38
   138d4:	cmp	r0, #1
   138d8:	ldreq	r0, [r4, #48]	; 0x30
   138dc:	tsteq	r0, #4
   138e0:	beq	13d98 <__assert_fail@plt+0x2544>
   138e4:	mov	r0, #3
   138e8:	strh	r0, [r5, #60]	; 0x3c
   138ec:	b	13a74 <__assert_fail@plt+0x2220>
   138f0:	mov	r5, r6
   138f4:	b	13ab0 <__assert_fail@plt+0x225c>
   138f8:	tst	r0, #64	; 0x40
   138fc:	beq	13918 <__assert_fail@plt+0x20c4>
   13900:	ldrd	r2, [r4, #16]
   13904:	ldrd	r8, [r6, #64]	; 0x40
   13908:	eor	r1, r9, r3
   1390c:	eor	r2, r8, r2
   13910:	orrs	r1, r2, r1
   13914:	bne	13818 <__assert_fail@plt+0x1fc4>
   13918:	ldr	r5, [r4, #4]
   1391c:	cmp	r5, #0
   13920:	beq	13a50 <__assert_fail@plt+0x21fc>
   13924:	tst	r0, #4096	; 0x1000
   13928:	bne	13a18 <__assert_fail@plt+0x21c4>
   1392c:	ldr	r3, [r6, #24]
   13930:	mov	r0, r4
   13934:	mov	r1, r6
   13938:	mvn	r2, #0
   1393c:	bl	13f60 <__assert_fail@plt+0x270c>
   13940:	cmp	r0, #0
   13944:	beq	13a68 <__assert_fail@plt+0x2214>
   13948:	bl	116d4 <__errno_location@plt>
   1394c:	ldr	r0, [r0]
   13950:	str	r0, [r6, #32]
   13954:	ldrh	r0, [r6, #58]	; 0x3a
   13958:	orr	r0, r0, #1
   1395c:	strh	r0, [r6, #58]	; 0x3a
   13960:	ldr	r0, [r4, #4]
   13964:	cmp	r0, #0
   13968:	beq	13a68 <__assert_fail@plt+0x2214>
   1396c:	ldmib	r0, {r1, r2}
   13970:	ldr	r1, [r1, #24]
   13974:	cmp	r2, #0
   13978:	str	r1, [r0, #24]
   1397c:	mov	r0, r2
   13980:	bne	1396c <__assert_fail@plt+0x2118>
   13984:	b	13a68 <__assert_fail@plt+0x2214>
   13988:	ldr	r5, [r6, #4]
   1398c:	ldr	r0, [r5, #12]
   13990:	cmp	r0, #0
   13994:	beq	13b9c <__assert_fail@plt+0x2348>
   13998:	str	r5, [r4]
   1399c:	ldr	r1, [r5, #40]	; 0x28
   139a0:	ldr	r0, [r4, #24]
   139a4:	mov	r5, #0
   139a8:	strb	r5, [r0, r1]
   139ac:	mov	r0, r4
   139b0:	mov	r1, #3
   139b4:	bl	141b8 <__assert_fail@plt+0x2964>
   139b8:	cmp	r0, #0
   139bc:	beq	13b8c <__assert_fail@plt+0x2338>
   139c0:	mov	r7, r0
   139c4:	mov	r0, r6
   139c8:	bl	1a198 <__assert_fail@plt+0x8944>
   139cc:	mov	r5, r7
   139d0:	b	13a74 <__assert_fail@plt+0x2220>
   139d4:	mov	r0, r4
   139d8:	bl	14c6c <__assert_fail@plt+0x3418>
   139dc:	ldr	r1, [r4, #48]	; 0x30
   139e0:	cmp	r0, #0
   139e4:	beq	139f8 <__assert_fail@plt+0x21a4>
   139e8:	orr	r0, r1, #8192	; 0x2000
   139ec:	mov	r5, #0
   139f0:	str	r0, [r4, #48]	; 0x30
   139f4:	b	13e80 <__assert_fail@plt+0x262c>
   139f8:	movw	r0, #258	; 0x102
   139fc:	tst	r1, r0
   13a00:	beq	13c4c <__assert_fail@plt+0x23f8>
   13a04:	ldr	r0, [r4, #56]	; 0x38
   13a08:	cmp	r0, #0
   13a0c:	beq	13c54 <__assert_fail@plt+0x2400>
   13a10:	bl	15948 <__assert_fail@plt+0x40f4>
   13a14:	b	13c54 <__assert_fail@plt+0x2400>
   13a18:	bic	r0, r0, #4096	; 0x1000
   13a1c:	str	r0, [r4, #48]	; 0x30
   13a20:	ldrd	r8, [r5, #8]
   13a24:	cmp	r9, #0
   13a28:	beq	13a34 <__assert_fail@plt+0x21e0>
   13a2c:	mov	r0, r9
   13a30:	bl	1183c <closedir@plt>
   13a34:	mov	r0, r5
   13a38:	bl	1a198 <__assert_fail@plt+0x8944>
   13a3c:	cmp	r8, #0
   13a40:	mov	r5, r8
   13a44:	bne	13a20 <__assert_fail@plt+0x21cc>
   13a48:	mov	r0, #0
   13a4c:	str	r0, [r4, #4]
   13a50:	mov	r0, r4
   13a54:	mov	r1, #3
   13a58:	bl	141b8 <__assert_fail@plt+0x2964>
   13a5c:	cmp	r0, #0
   13a60:	str	r0, [r4, #4]
   13a64:	beq	13b30 <__assert_fail@plt+0x22dc>
   13a68:	ldr	r5, [r4, #4]
   13a6c:	mov	r0, #0
   13a70:	str	r0, [r4, #4]
   13a74:	ldr	r0, [r5, #4]
   13a78:	ldr	r1, [r0, #28]
   13a7c:	ldr	r0, [r0, #40]	; 0x28
   13a80:	sub	r2, r0, #1
   13a84:	ldrb	r1, [r1, r2]
   13a88:	cmp	r1, #47	; 0x2f
   13a8c:	ldr	r1, [r4, #24]
   13a90:	moveq	r0, r2
   13a94:	mov	r2, #47	; 0x2f
   13a98:	strb	r2, [r1, r0]!
   13a9c:	ldr	r2, [r5, #52]	; 0x34
   13aa0:	add	r0, r1, #1
   13aa4:	add	r1, r5, #168	; 0xa8
   13aa8:	add	r2, r2, #1
   13aac:	bl	114e8 <memmove@plt>
   13ab0:	str	r5, [r4]
   13ab4:	ldrh	r0, [r5, #56]	; 0x38
   13ab8:	cmp	r0, #11
   13abc:	bne	13af0 <__assert_fail@plt+0x229c>
   13ac0:	ldrd	r0, [r5, #112]	; 0x70
   13ac4:	eor	r2, r0, #1
   13ac8:	orrs	r2, r2, r1
   13acc:	beq	13e80 <__assert_fail@plt+0x262c>
   13ad0:	eor	r0, r0, #2
   13ad4:	orrs	r0, r0, r1
   13ad8:	bne	13e8c <__assert_fail@plt+0x2638>
   13adc:	mov	r0, r4
   13ae0:	mov	r1, r5
   13ae4:	mov	r2, #0
   13ae8:	bl	132f8 <__assert_fail@plt+0x1aa4>
   13aec:	strh	r0, [r5, #56]	; 0x38
   13af0:	cmp	r0, #1
   13af4:	bne	13e80 <__assert_fail@plt+0x262c>
   13af8:	ldr	r0, [r5, #48]	; 0x30
   13afc:	cmp	r0, #0
   13b00:	ldrdeq	r0, [r5, #64]	; 0x40
   13b04:	strdeq	r0, [r4, #16]
   13b08:	mov	r0, r4
   13b0c:	mov	r1, r5
   13b10:	bl	14cfc <__assert_fail@plt+0x34a8>
   13b14:	cmp	r0, #0
   13b18:	bne	13e80 <__assert_fail@plt+0x262c>
   13b1c:	bl	116d4 <__errno_location@plt>
   13b20:	mov	r1, #12
   13b24:	mov	r5, #0
   13b28:	str	r1, [r0]
   13b2c:	b	13e80 <__assert_fail@plt+0x262c>
   13b30:	ldrb	r0, [r4, #49]	; 0x31
   13b34:	mov	r5, #0
   13b38:	tst	r0, #32
   13b3c:	bne	13e80 <__assert_fail@plt+0x262c>
   13b40:	ldr	r0, [r6, #32]
   13b44:	cmp	r0, #0
   13b48:	ldrhne	r0, [r7]
   13b4c:	cmpne	r0, #4
   13b50:	movne	r0, #7
   13b54:	strhne	r0, [r7]
   13b58:	b	13870 <__assert_fail@plt+0x201c>
   13b5c:	ldr	r0, [r4, #32]
   13b60:	movw	r1, #47283	; 0xb8b3
   13b64:	movt	r1, #1
   13b68:	bl	16548 <__assert_fail@plt+0x4cf4>
   13b6c:	cmn	r0, #1
   13b70:	str	r0, [r6, #36]	; 0x24
   13b74:	ble	13c30 <__assert_fail@plt+0x23dc>
   13b78:	ldrh	r0, [r6, #58]	; 0x3a
   13b7c:	mov	r5, r6
   13b80:	orr	r0, r0, #2
   13b84:	strh	r0, [r6, #58]	; 0x3a
   13b88:	b	13ab0 <__assert_fail@plt+0x225c>
   13b8c:	ldrb	r0, [r4, #49]	; 0x31
   13b90:	tst	r0, #32
   13b94:	bne	13e80 <__assert_fail@plt+0x262c>
   13b98:	ldr	r5, [r6, #4]
   13b9c:	mov	r0, r6
   13ba0:	str	r5, [r4]
   13ba4:	bl	1a198 <__assert_fail@plt+0x8944>
   13ba8:	ldr	r0, [r5, #48]	; 0x30
   13bac:	cmn	r0, #1
   13bb0:	beq	13c14 <__assert_fail@plt+0x23c0>
   13bb4:	ldrh	r0, [r5, #56]	; 0x38
   13bb8:	cmp	r0, #11
   13bbc:	beq	13e8c <__assert_fail@plt+0x2638>
   13bc0:	ldr	r0, [r5, #40]	; 0x28
   13bc4:	ldr	r1, [r4, #24]
   13bc8:	mov	r2, #0
   13bcc:	strb	r2, [r1, r0]
   13bd0:	ldr	r0, [r5, #48]	; 0x30
   13bd4:	cmp	r0, #0
   13bd8:	beq	13d24 <__assert_fail@plt+0x24d0>
   13bdc:	ldrh	r0, [r5, #58]	; 0x3a
   13be0:	tst	r0, #2
   13be4:	bne	13d50 <__assert_fail@plt+0x24fc>
   13be8:	tst	r0, #1
   13bec:	bne	13e44 <__assert_fail@plt+0x25f0>
   13bf0:	ldr	r1, [r5, #4]
   13bf4:	movw	r3, #47282	; 0xb8b2
   13bf8:	mov	r0, r4
   13bfc:	mvn	r2, #0
   13c00:	movt	r3, #1
   13c04:	bl	13f60 <__assert_fail@plt+0x270c>
   13c08:	cmp	r0, #0
   13c0c:	bne	13d34 <__assert_fail@plt+0x24e0>
   13c10:	b	13e44 <__assert_fail@plt+0x25f0>
   13c14:	mov	r0, r5
   13c18:	bl	1a198 <__assert_fail@plt+0x8944>
   13c1c:	bl	116d4 <__errno_location@plt>
   13c20:	mov	r5, #0
   13c24:	str	r5, [r0]
   13c28:	str	r5, [r4]
   13c2c:	b	13e80 <__assert_fail@plt+0x262c>
   13c30:	bl	116d4 <__errno_location@plt>
   13c34:	ldr	r0, [r0]
   13c38:	mov	r1, #7
   13c3c:	mov	r5, r6
   13c40:	strh	r1, [r6, #56]	; 0x38
   13c44:	str	r0, [r6, #32]
   13c48:	b	13ab0 <__assert_fail@plt+0x225c>
   13c4c:	ldr	r0, [r4, #56]	; 0x38
   13c50:	bl	1a198 <__assert_fail@plt+0x8944>
   13c54:	ldr	r1, [r5, #52]	; 0x34
   13c58:	add	r6, r5, #168	; 0xa8
   13c5c:	str	r1, [r5, #40]	; 0x28
   13c60:	add	r2, r1, #1
   13c64:	mov	r1, r6
   13c68:	ldr	r0, [r4, #24]
   13c6c:	bl	114e8 <memmove@plt>
   13c70:	mov	r0, r6
   13c74:	mov	r1, #47	; 0x2f
   13c78:	bl	1177c <strrchr@plt>
   13c7c:	cmp	r0, #0
   13c80:	beq	13cbc <__assert_fail@plt+0x2468>
   13c84:	cmp	r0, r6
   13c88:	bne	13c98 <__assert_fail@plt+0x2444>
   13c8c:	ldrb	r1, [r5, #169]	; 0xa9
   13c90:	cmp	r1, #0
   13c94:	beq	13cbc <__assert_fail@plt+0x2468>
   13c98:	add	r7, r0, #1
   13c9c:	mov	r0, r7
   13ca0:	bl	116b0 <strlen@plt>
   13ca4:	mov	r8, r0
   13ca8:	add	r2, r0, #1
   13cac:	mov	r0, r6
   13cb0:	mov	r1, r7
   13cb4:	bl	114e8 <memmove@plt>
   13cb8:	str	r8, [r5, #52]	; 0x34
   13cbc:	ldr	r0, [r4, #24]
   13cc0:	movw	r1, #258	; 0x102
   13cc4:	str	r0, [r5, #24]
   13cc8:	str	r0, [r5, #28]
   13ccc:	ldrh	r0, [r4, #48]	; 0x30
   13cd0:	tst	r0, r1
   13cd4:	beq	13d08 <__assert_fail@plt+0x24b4>
   13cd8:	movw	r0, #41368	; 0xa198
   13cdc:	movw	r2, #20412	; 0x4fbc
   13ce0:	movw	r3, #20444	; 0x4fdc
   13ce4:	mov	r1, #0
   13ce8:	movt	r0, #1
   13cec:	movt	r2, #1
   13cf0:	movt	r3, #1
   13cf4:	str	r0, [sp]
   13cf8:	mov	r0, #31
   13cfc:	bl	15650 <__assert_fail@plt+0x3dfc>
   13d00:	str	r0, [r4, #56]	; 0x38
   13d04:	b	13ab0 <__assert_fail@plt+0x225c>
   13d08:	mov	r0, #32
   13d0c:	bl	19b58 <__assert_fail@plt+0x8304>
   13d10:	cmp	r0, #0
   13d14:	str	r0, [r4, #56]	; 0x38
   13d18:	beq	13ab0 <__assert_fail@plt+0x225c>
   13d1c:	bl	19d84 <__assert_fail@plt+0x8530>
   13d20:	b	13ab0 <__assert_fail@plt+0x225c>
   13d24:	mov	r0, r4
   13d28:	bl	14c6c <__assert_fail@plt+0x3418>
   13d2c:	cmp	r0, #0
   13d30:	beq	13e44 <__assert_fail@plt+0x25f0>
   13d34:	bl	116d4 <__errno_location@plt>
   13d38:	ldr	r0, [r0]
   13d3c:	str	r0, [r5, #32]
   13d40:	ldr	r0, [r4, #48]	; 0x30
   13d44:	orr	r0, r0, #8192	; 0x2000
   13d48:	str	r0, [r4, #48]	; 0x30
   13d4c:	b	13e44 <__assert_fail@plt+0x25f0>
   13d50:	ldr	r0, [r4, #48]	; 0x30
   13d54:	tst	r0, #4
   13d58:	bne	13dc4 <__assert_fail@plt+0x2570>
   13d5c:	mov	r7, r5
   13d60:	tst	r0, #512	; 0x200
   13d64:	ldr	r6, [r7, #36]!	; 0x24
   13d68:	bne	13e10 <__assert_fail@plt+0x25bc>
   13d6c:	mov	r0, r6
   13d70:	bl	117b8 <fchdir@plt>
   13d74:	cmp	r0, #0
   13d78:	beq	13e3c <__assert_fail@plt+0x25e8>
   13d7c:	bl	116d4 <__errno_location@plt>
   13d80:	ldr	r0, [r0]
   13d84:	str	r0, [r5, #32]
   13d88:	ldr	r0, [r4, #48]	; 0x30
   13d8c:	orr	r0, r0, #8192	; 0x2000
   13d90:	str	r0, [r4, #48]	; 0x30
   13d94:	b	13e3c <__assert_fail@plt+0x25e8>
   13d98:	mov	r1, #32768	; 0x8000
   13d9c:	tst	r0, #512	; 0x200
   13da0:	and	r1, r1, r0, lsl #11
   13da4:	orr	r1, r1, #18688	; 0x4900
   13da8:	orr	r2, r1, #524288	; 0x80000
   13dac:	bne	13dcc <__assert_fail@plt+0x2578>
   13db0:	movw	r0, #47283	; 0xb8b3
   13db4:	mov	r1, r2
   13db8:	movt	r0, #1
   13dbc:	bl	1a0f4 <__assert_fail@plt+0x88a0>
   13dc0:	b	13ddc <__assert_fail@plt+0x2588>
   13dc4:	add	r7, r5, #36	; 0x24
   13dc8:	b	13e3c <__assert_fail@plt+0x25e8>
   13dcc:	ldr	r0, [r4, #32]
   13dd0:	movw	r1, #47283	; 0xb8b3
   13dd4:	movt	r1, #1
   13dd8:	bl	16548 <__assert_fail@plt+0x4cf4>
   13ddc:	cmn	r0, #1
   13de0:	str	r0, [r5, #36]	; 0x24
   13de4:	ble	13df8 <__assert_fail@plt+0x25a4>
   13de8:	ldrh	r0, [r5, #58]	; 0x3a
   13dec:	orr	r0, r0, #2
   13df0:	strh	r0, [r5, #58]	; 0x3a
   13df4:	b	138e4 <__assert_fail@plt+0x2090>
   13df8:	bl	116d4 <__errno_location@plt>
   13dfc:	ldr	r0, [r0]
   13e00:	mov	r1, #7
   13e04:	strh	r1, [r5, #56]	; 0x38
   13e08:	str	r0, [r5, #32]
   13e0c:	b	138e4 <__assert_fail@plt+0x2090>
   13e10:	ldr	r1, [r4, #32]
   13e14:	cmp	r1, r6
   13e18:	bne	13e24 <__assert_fail@plt+0x25d0>
   13e1c:	cmn	r1, #100	; 0x64
   13e20:	bne	13e8c <__assert_fail@plt+0x2638>
   13e24:	add	r0, r4, #60	; 0x3c
   13e28:	bl	164a4 <__assert_fail@plt+0x4c50>
   13e2c:	cmp	r0, #0
   13e30:	blt	13e38 <__assert_fail@plt+0x25e4>
   13e34:	bl	11824 <close@plt>
   13e38:	str	r6, [r4, #32]
   13e3c:	ldr	r0, [r7]
   13e40:	bl	11824 <close@plt>
   13e44:	ldrh	r0, [r5, #56]	; 0x38
   13e48:	cmp	r0, #2
   13e4c:	beq	13e74 <__assert_fail@plt+0x2620>
   13e50:	ldr	r0, [r5, #32]
   13e54:	mov	r1, #7
   13e58:	cmp	r0, #0
   13e5c:	movweq	r1, #6
   13e60:	strh	r1, [r5, #56]	; 0x38
   13e64:	bne	13e74 <__assert_fail@plt+0x2620>
   13e68:	mov	r0, r4
   13e6c:	mov	r1, r5
   13e70:	bl	13e90 <__assert_fail@plt+0x263c>
   13e74:	ldrb	r0, [r4, #49]	; 0x31
   13e78:	tst	r0, #32
   13e7c:	movne	r5, #0
   13e80:	mov	r0, r5
   13e84:	sub	sp, fp, #24
   13e88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e8c:	bl	11818 <abort@plt>
   13e90:	push	{r4, r5, r6, r7, fp, lr}
   13e94:	add	fp, sp, #16
   13e98:	sub	sp, sp, #24
   13e9c:	ldrh	r2, [r0, #48]	; 0x30
   13ea0:	movw	r3, #258	; 0x102
   13ea4:	add	lr, r1, #64	; 0x40
   13ea8:	tst	r2, r3
   13eac:	beq	13ee4 <__assert_fail@plt+0x2690>
   13eb0:	ldrd	r2, [lr]
   13eb4:	stm	sp, {r2, r3}
   13eb8:	ldrd	r2, [r1, #160]	; 0xa0
   13ebc:	mov	r1, sp
   13ec0:	str	r3, [sp, #12]
   13ec4:	str	r2, [sp, #8]
   13ec8:	ldr	r0, [r0, #56]	; 0x38
   13ecc:	bl	161d4 <__assert_fail@plt+0x4980>
   13ed0:	cmp	r0, #0
   13ed4:	beq	13f5c <__assert_fail@plt+0x2708>
   13ed8:	bl	1a198 <__assert_fail@plt+0x8944>
   13edc:	sub	sp, fp, #16
   13ee0:	pop	{r4, r5, r6, r7, fp, pc}
   13ee4:	ldr	r2, [r1, #4]
   13ee8:	cmp	r2, #0
   13eec:	beq	13f54 <__assert_fail@plt+0x2700>
   13ef0:	ldr	r3, [r2, #48]	; 0x30
   13ef4:	cmp	r3, #0
   13ef8:	blt	13f54 <__assert_fail@plt+0x2700>
   13efc:	ldr	ip, [r0, #56]	; 0x38
   13f00:	ldrd	r4, [ip, #16]
   13f04:	orrs	r3, r4, r5
   13f08:	beq	13f5c <__assert_fail@plt+0x2708>
   13f0c:	ldrd	r4, [r1, #160]	; 0xa0
   13f10:	ldrd	r6, [ip]
   13f14:	eor	r1, r7, r5
   13f18:	eor	r3, r6, r4
   13f1c:	orrs	r1, r3, r1
   13f20:	bne	13f54 <__assert_fail@plt+0x2700>
   13f24:	ldr	r1, [ip, #8]!
   13f28:	ldrd	r4, [lr]
   13f2c:	ldr	r3, [ip, #4]
   13f30:	eor	r1, r1, r4
   13f34:	eor	r3, r3, r5
   13f38:	orrs	r1, r1, r3
   13f3c:	bne	13f54 <__assert_fail@plt+0x2700>
   13f40:	ldrd	r4, [r2, #64]	; 0x40
   13f44:	strd	r4, [ip]
   13f48:	ldr	r0, [r0, #56]	; 0x38
   13f4c:	ldrd	r2, [r2, #160]	; 0xa0
   13f50:	strd	r2, [r0]
   13f54:	sub	sp, fp, #16
   13f58:	pop	{r4, r5, r6, r7, fp, pc}
   13f5c:	bl	11818 <abort@plt>
   13f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f64:	add	fp, sp, #28
   13f68:	sub	sp, sp, #108	; 0x6c
   13f6c:	mov	r7, r3
   13f70:	mov	r4, r2
   13f74:	mov	r8, r1
   13f78:	mov	sl, r0
   13f7c:	cmp	r3, #0
   13f80:	beq	13fa4 <__assert_fail@plt+0x2750>
   13f84:	movw	r1, #47282	; 0xb8b2
   13f88:	mov	r0, r7
   13f8c:	movt	r1, #1
   13f90:	bl	114c4 <strcmp@plt>
   13f94:	mov	r6, r0
   13f98:	cmp	r0, #0
   13f9c:	movwne	r6, #1
   13fa0:	b	13fa8 <__assert_fail@plt+0x2754>
   13fa4:	mov	r6, #1
   13fa8:	ldr	r0, [sl, #48]	; 0x30
   13fac:	tst	r0, #4
   13fb0:	bne	14008 <__assert_fail@plt+0x27b4>
   13fb4:	cmn	r4, #1
   13fb8:	mov	r1, #0
   13fbc:	mov	r9, #0
   13fc0:	movwgt	r1, #1
   13fc4:	orrs	r1, r1, r6
   13fc8:	bne	14028 <__assert_fail@plt+0x27d4>
   13fcc:	ands	r0, r0, #512	; 0x200
   13fd0:	beq	14028 <__assert_fail@plt+0x27d4>
   13fd4:	add	r4, sl, #60	; 0x3c
   13fd8:	mov	r0, r4
   13fdc:	bl	1649c <__assert_fail@plt+0x4c48>
   13fe0:	cmp	r0, #0
   13fe4:	bne	14030 <__assert_fail@plt+0x27dc>
   13fe8:	mov	r0, r4
   13fec:	bl	164f0 <__assert_fail@plt+0x4c9c>
   13ff0:	cmn	r0, #1
   13ff4:	ble	14030 <__assert_fail@plt+0x27dc>
   13ff8:	mov	r4, r0
   13ffc:	mov	r9, #0
   14000:	mov	r7, #0
   14004:	b	14078 <__assert_fail@plt+0x2824>
   14008:	mov	r5, #0
   1400c:	cmp	r4, #0
   14010:	blt	141a8 <__assert_fail@plt+0x2954>
   14014:	ands	r0, r0, #512	; 0x200
   14018:	beq	141a8 <__assert_fail@plt+0x2954>
   1401c:	mov	r0, r4
   14020:	bl	11824 <close@plt>
   14024:	b	141a8 <__assert_fail@plt+0x2954>
   14028:	cmn	r4, #1
   1402c:	bgt	14078 <__assert_fail@plt+0x2824>
   14030:	ldr	r0, [sl, #48]	; 0x30
   14034:	mov	r1, #32768	; 0x8000
   14038:	and	r1, r1, r0, lsl #11
   1403c:	tst	r0, #512	; 0x200
   14040:	orr	r1, r1, #18688	; 0x4900
   14044:	orr	r2, r1, #524288	; 0x80000
   14048:	bne	1405c <__assert_fail@plt+0x2808>
   1404c:	mov	r0, r7
   14050:	mov	r1, r2
   14054:	bl	1a0f4 <__assert_fail@plt+0x88a0>
   14058:	b	14068 <__assert_fail@plt+0x2814>
   1405c:	ldr	r0, [sl, #32]
   14060:	mov	r1, r7
   14064:	bl	16548 <__assert_fail@plt+0x4cf4>
   14068:	mov	r4, r0
   1406c:	mov	r9, #1
   14070:	cmp	r0, #0
   14074:	blt	1414c <__assert_fail@plt+0x28f8>
   14078:	ldr	r5, [sl, #48]	; 0x30
   1407c:	tst	r5, #2
   14080:	bne	140c4 <__assert_fail@plt+0x2870>
   14084:	cmp	r7, #0
   14088:	beq	140a4 <__assert_fail@plt+0x2850>
   1408c:	movw	r1, #47282	; 0xb8b2
   14090:	mov	r0, r7
   14094:	movt	r1, #1
   14098:	bl	114c4 <strcmp@plt>
   1409c:	cmp	r0, #0
   140a0:	beq	140c4 <__assert_fail@plt+0x2870>
   140a4:	tst	r5, #512	; 0x200
   140a8:	bne	1411c <__assert_fail@plt+0x28c8>
   140ac:	mov	r0, r4
   140b0:	bl	117b8 <fchdir@plt>
   140b4:	mov	r5, r0
   140b8:	cmp	r9, #0
   140bc:	bne	1416c <__assert_fail@plt+0x2918>
   140c0:	b	141a8 <__assert_fail@plt+0x2954>
   140c4:	mov	r2, sp
   140c8:	mov	r0, #3
   140cc:	mov	r1, r4
   140d0:	bl	115a8 <__fxstat64@plt>
   140d4:	cmp	r0, #0
   140d8:	bne	14160 <__assert_fail@plt+0x290c>
   140dc:	ldrd	r0, [r8, #64]	; 0x40
   140e0:	ldm	sp, {r2, r3}
   140e4:	eor	r1, r1, r3
   140e8:	eor	r0, r0, r2
   140ec:	orrs	r0, r0, r1
   140f0:	bne	14154 <__assert_fail@plt+0x2900>
   140f4:	ldrd	r0, [r8, #160]	; 0xa0
   140f8:	ldr	r2, [sp, #96]	; 0x60
   140fc:	ldr	r3, [sp, #100]	; 0x64
   14100:	eor	r1, r1, r3
   14104:	eor	r0, r0, r2
   14108:	orrs	r0, r0, r1
   1410c:	bne	14154 <__assert_fail@plt+0x2900>
   14110:	ldr	r5, [sl, #48]	; 0x30
   14114:	tst	r5, #512	; 0x200
   14118:	beq	140ac <__assert_fail@plt+0x2858>
   1411c:	ldr	r1, [sl, #32]
   14120:	cmp	r1, r4
   14124:	bne	14130 <__assert_fail@plt+0x28dc>
   14128:	cmn	r1, #100	; 0x64
   1412c:	bne	141b4 <__assert_fail@plt+0x2960>
   14130:	cmp	r6, #0
   14134:	beq	14188 <__assert_fail@plt+0x2934>
   14138:	add	r0, sl, #60	; 0x3c
   1413c:	bl	164a4 <__assert_fail@plt+0x4c50>
   14140:	cmp	r0, #0
   14144:	bge	1419c <__assert_fail@plt+0x2948>
   14148:	b	141a0 <__assert_fail@plt+0x294c>
   1414c:	mvn	r5, #0
   14150:	b	141a8 <__assert_fail@plt+0x2954>
   14154:	bl	116d4 <__errno_location@plt>
   14158:	mov	r1, #2
   1415c:	str	r1, [r0]
   14160:	mvn	r5, #0
   14164:	cmp	r9, #0
   14168:	beq	141a8 <__assert_fail@plt+0x2954>
   1416c:	bl	116d4 <__errno_location@plt>
   14170:	ldr	r7, [r0]
   14174:	mov	r6, r0
   14178:	mov	r0, r4
   1417c:	bl	11824 <close@plt>
   14180:	str	r7, [r6]
   14184:	b	141a8 <__assert_fail@plt+0x2954>
   14188:	tst	r5, #4
   1418c:	bne	141a0 <__assert_fail@plt+0x294c>
   14190:	cmp	r1, #0
   14194:	blt	141a0 <__assert_fail@plt+0x294c>
   14198:	mov	r0, r1
   1419c:	bl	11824 <close@plt>
   141a0:	str	r4, [sl, #32]
   141a4:	mov	r5, #0
   141a8:	mov	r0, r5
   141ac:	sub	sp, fp, #28
   141b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141b4:	bl	11818 <abort@plt>
   141b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141bc:	add	fp, sp, #28
   141c0:	sub	sp, sp, #76	; 0x4c
   141c4:	ldr	sl, [r0]
   141c8:	mov	r8, r1
   141cc:	mov	r5, r0
   141d0:	str	r0, [sp, #44]	; 0x2c
   141d4:	ldr	r4, [sl, #12]
   141d8:	cmp	r4, #0
   141dc:	beq	14228 <__assert_fail@plt+0x29d4>
   141e0:	mov	r0, r4
   141e4:	bl	117ac <dirfd@plt>
   141e8:	cmn	r0, #1
   141ec:	str	r0, [fp, #-32]	; 0xffffffe0
   141f0:	ble	14260 <__assert_fail@plt+0x2a0c>
   141f4:	mov	r1, r5
   141f8:	mvn	r2, #0
   141fc:	str	r4, [sp, #16]
   14200:	str	r8, [sp, #8]
   14204:	mov	ip, #0
   14208:	ldr	r0, [r1, #44]!	; 0x2c
   1420c:	cmp	r0, #0
   14210:	str	r1, [sp, #52]	; 0x34
   14214:	add	r7, r1, #4
   14218:	movweq	r2, #34464	; 0x86a0
   1421c:	movteq	r2, #1
   14220:	str	r2, [sp, #32]
   14224:	b	14444 <__assert_fail@plt+0x2bf0>
   14228:	mov	r7, r5
   1422c:	mvn	r0, #99	; 0x63
   14230:	mov	r2, #0
   14234:	ldr	r3, [r7, #48]!	; 0x30
   14238:	and	r1, r3, #516	; 0x204
   1423c:	cmp	r1, #512	; 0x200
   14240:	ldr	r1, [sl, #24]
   14244:	ldreq	r0, [r5, #32]
   14248:	tst	r3, #16
   1424c:	beq	14288 <__assert_fail@plt+0x2a34>
   14250:	tst	r3, #1
   14254:	bne	1427c <__assert_fail@plt+0x2a28>
   14258:	mov	r2, #32768	; 0x8000
   1425c:	b	14288 <__assert_fail@plt+0x2a34>
   14260:	ldr	r0, [sl, #12]
   14264:	bl	1183c <closedir@plt>
   14268:	mov	r6, #0
   1426c:	str	r6, [sl, #12]
   14270:	cmp	r8, #3
   14274:	beq	142cc <__assert_fail@plt+0x2a78>
   14278:	b	14b60 <__assert_fail@plt+0x330c>
   1427c:	ldr	r3, [sl, #48]	; 0x30
   14280:	cmp	r3, #0
   14284:	movne	r2, #32768	; 0x8000
   14288:	sub	r3, fp, #32
   1428c:	bl	1658c <__assert_fail@plt+0x4d38>
   14290:	cmp	r0, #0
   14294:	str	r0, [sl, #12]
   14298:	beq	142c0 <__assert_fail@plt+0x2a6c>
   1429c:	ldrh	r0, [sl, #56]	; 0x38
   142a0:	cmp	r0, #11
   142a4:	bne	142e4 <__assert_fail@plt+0x2a90>
   142a8:	mov	r0, r5
   142ac:	mov	r1, sl
   142b0:	mov	r2, #0
   142b4:	bl	132f8 <__assert_fail@plt+0x1aa4>
   142b8:	strh	r0, [sl, #56]	; 0x38
   142bc:	b	14324 <__assert_fail@plt+0x2ad0>
   142c0:	mov	r6, #0
   142c4:	cmp	r8, #3
   142c8:	bne	14b60 <__assert_fail@plt+0x330c>
   142cc:	mov	r0, #4
   142d0:	strh	r0, [sl, #56]	; 0x38
   142d4:	bl	116d4 <__errno_location@plt>
   142d8:	ldr	r0, [r0]
   142dc:	str	r0, [sl, #32]
   142e0:	b	14b60 <__assert_fail@plt+0x330c>
   142e4:	ldrb	r0, [r7, #1]
   142e8:	tst	r0, #1
   142ec:	beq	14324 <__assert_fail@plt+0x2ad0>
   142f0:	mov	r0, r5
   142f4:	mov	r1, sl
   142f8:	bl	13e90 <__assert_fail@plt+0x263c>
   142fc:	mov	r0, r5
   14300:	mov	r1, sl
   14304:	mov	r2, #0
   14308:	mov	r6, #0
   1430c:	bl	132f8 <__assert_fail@plt+0x1aa4>
   14310:	mov	r0, r5
   14314:	mov	r1, sl
   14318:	bl	14cfc <__assert_fail@plt+0x34a8>
   1431c:	cmp	r0, #0
   14320:	beq	14acc <__assert_fail@plt+0x3278>
   14324:	mov	r1, r5
   14328:	str	r8, [sp, #8]
   1432c:	str	r4, [sp, #16]
   14330:	ldr	r0, [r1, #44]!	; 0x2c
   14334:	str	r1, [sp, #52]	; 0x34
   14338:	mvn	r1, #0
   1433c:	cmp	r0, #0
   14340:	movweq	r1, #34464	; 0x86a0
   14344:	movteq	r1, #1
   14348:	cmp	r8, #2
   1434c:	str	r1, [sp, #32]
   14350:	bne	1436c <__assert_fail@plt+0x2b18>
   14354:	mov	ip, #1
   14358:	cmp	r8, #3
   1435c:	bne	14444 <__assert_fail@plt+0x2bf0>
   14360:	sub	r0, r8, #3
   14364:	mov	r5, #0
   14368:	b	1438c <__assert_fail@plt+0x2b38>
   1436c:	ldr	r0, [r7]
   14370:	and	r0, r0, #56	; 0x38
   14374:	cmp	r0, #24
   14378:	ldreq	r0, [sl, #84]	; 0x54
   1437c:	cmpeq	r0, #2
   14380:	beq	14c14 <__assert_fail@plt+0x33c0>
   14384:	sub	r0, r8, #3
   14388:	mov	r5, #1
   1438c:	clz	r0, r0
   14390:	lsr	r6, r0, #5
   14394:	ldrb	r0, [r7, #1]
   14398:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1439c:	tst	r0, #2
   143a0:	beq	143bc <__assert_fail@plt+0x2b68>
   143a4:	mov	r0, r2
   143a8:	movw	r1, #1030	; 0x406
   143ac:	mov	r2, #3
   143b0:	bl	19f14 <__assert_fail@plt+0x86c0>
   143b4:	mov	r2, r0
   143b8:	str	r0, [fp, #-32]	; 0xffffffe0
   143bc:	cmp	r2, #0
   143c0:	blt	143dc <__assert_fail@plt+0x2b88>
   143c4:	ldr	r0, [sp, #44]	; 0x2c
   143c8:	mov	r1, sl
   143cc:	mov	r3, #0
   143d0:	bl	13f60 <__assert_fail@plt+0x270c>
   143d4:	cmp	r0, #0
   143d8:	beq	1443c <__assert_fail@plt+0x2be8>
   143dc:	and	r0, r6, r5
   143e0:	cmp	r0, #1
   143e4:	bne	143f4 <__assert_fail@plt+0x2ba0>
   143e8:	bl	116d4 <__errno_location@plt>
   143ec:	ldr	r0, [r0]
   143f0:	str	r0, [sl, #32]
   143f4:	ldrh	r0, [sl, #58]	; 0x3a
   143f8:	orr	r0, r0, #1
   143fc:	strh	r0, [sl, #58]	; 0x3a
   14400:	ldr	r0, [sl, #12]
   14404:	bl	1183c <closedir@plt>
   14408:	mov	r4, #0
   1440c:	ldr	r5, [sp, #44]	; 0x2c
   14410:	str	r4, [sl, #12]
   14414:	ldr	r0, [r7]
   14418:	tst	r0, #512	; 0x200
   1441c:	beq	14430 <__assert_fail@plt+0x2bdc>
   14420:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14424:	cmp	r0, #0
   14428:	blt	14430 <__assert_fail@plt+0x2bdc>
   1442c:	bl	11824 <close@plt>
   14430:	mov	ip, #1
   14434:	str	r4, [sl, #12]
   14438:	b	14444 <__assert_fail@plt+0x2bf0>
   1443c:	ldr	r5, [sp, #44]	; 0x2c
   14440:	mov	ip, #0
   14444:	ldr	r0, [sl, #40]	; 0x28
   14448:	ldr	r1, [sl, #28]
   1444c:	mov	r9, #0
   14450:	sub	r2, r0, #1
   14454:	ldrb	r1, [r1, r2]
   14458:	cmp	r1, #47	; 0x2f
   1445c:	ldrb	r1, [r7]
   14460:	moveq	r0, r2
   14464:	tst	r1, #4
   14468:	mov	r1, #0
   1446c:	str	r1, [sp, #40]	; 0x28
   14470:	beq	14488 <__assert_fail@plt+0x2c34>
   14474:	ldr	r1, [r5, #24]
   14478:	mov	r2, #47	; 0x2f
   1447c:	strb	r2, [r1, r0]!
   14480:	add	r1, r1, #1
   14484:	str	r1, [sp, #40]	; 0x28
   14488:	ldr	r6, [sl, #12]
   1448c:	add	r1, r0, #1
   14490:	str	r1, [fp, #-48]	; 0xffffffd0
   14494:	cmp	r6, #0
   14498:	beq	14810 <__assert_fail@plt+0x2fbc>
   1449c:	ldr	r0, [sl, #48]	; 0x30
   144a0:	str	r7, [fp, #-36]	; 0xffffffdc
   144a4:	str	ip, [sp, #4]
   144a8:	mov	r7, #0
   144ac:	add	r0, r0, #1
   144b0:	str	r0, [sp, #24]
   144b4:	ldr	r0, [r5, #36]	; 0x24
   144b8:	sub	r0, r0, r1
   144bc:	str	r0, [fp, #-44]	; 0xffffffd4
   144c0:	bl	116d4 <__errno_location@plt>
   144c4:	str	r0, [sp, #36]	; 0x24
   144c8:	mov	r0, #0
   144cc:	mov	r9, #0
   144d0:	mov	r4, #0
   144d4:	str	sl, [sp, #28]
   144d8:	str	r0, [sp, #48]	; 0x30
   144dc:	mov	r0, #0
   144e0:	str	r0, [sp, #12]
   144e4:	mov	r0, #0
   144e8:	str	r0, [sp, #20]
   144ec:	ldr	r0, [sp, #36]	; 0x24
   144f0:	str	r7, [r0]
   144f4:	mov	r0, r6
   144f8:	bl	11794 <readdir64@plt>
   144fc:	cmp	r0, #0
   14500:	beq	14964 <__assert_fail@plt+0x3110>
   14504:	mov	r8, r0
   14508:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1450c:	str	r4, [fp, #-40]	; 0xffffffd8
   14510:	add	r4, r8, #19
   14514:	ldrb	r0, [r0]
   14518:	tst	r0, #32
   1451c:	ldrbeq	r0, [r4]
   14520:	cmpeq	r0, #46	; 0x2e
   14524:	beq	14620 <__assert_fail@plt+0x2dcc>
   14528:	mov	r0, r4
   1452c:	bl	116b0 <strlen@plt>
   14530:	mov	r5, r0
   14534:	add	r0, r0, #176	; 0xb0
   14538:	bic	r0, r0, #7
   1453c:	bl	19b58 <__assert_fail@plt+0x8304>
   14540:	mov	r6, r0
   14544:	cmp	r0, #0
   14548:	beq	14af0 <__assert_fail@plt+0x329c>
   1454c:	add	sl, r6, #168	; 0xa8
   14550:	mov	r1, r4
   14554:	mov	r2, r5
   14558:	mov	r0, sl
   1455c:	bl	1150c <memcpy@plt>
   14560:	ldr	r2, [sp, #44]	; 0x2c
   14564:	mov	r0, #0
   14568:	mov	r1, #196608	; 0x30000
   1456c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14570:	strb	r0, [sl, r5]
   14574:	str	r5, [r6, #52]	; 0x34
   14578:	str	r2, [r6, #44]	; 0x2c
   1457c:	add	r7, r5, r3
   14580:	ldr	r4, [r2, #24]
   14584:	str	r1, [r6, #58]	; 0x3a
   14588:	str	r0, [r6, #12]
   1458c:	str	r0, [r6, #16]
   14590:	str	r0, [r6, #20]
   14594:	str	r4, [r6, #28]
   14598:	str	r0, [r6, #32]
   1459c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   145a0:	cmp	r5, r0
   145a4:	bcs	145bc <__assert_fail@plt+0x2d68>
   145a8:	ldr	r4, [fp, #-40]	; 0xffffffd8
   145ac:	mov	r5, r2
   145b0:	cmp	r7, r3
   145b4:	bcs	14660 <__assert_fail@plt+0x2e0c>
   145b8:	b	149c8 <__assert_fail@plt+0x3174>
   145bc:	ldr	r1, [r2, #36]	; 0x24
   145c0:	movw	r0, #257	; 0x101
   145c4:	mov	r5, r2
   145c8:	add	r0, r7, r0
   145cc:	adds	r1, r0, r1
   145d0:	bcs	14aac <__assert_fail@plt+0x3258>
   145d4:	mov	r0, r4
   145d8:	str	r1, [r5, #36]	; 0x24
   145dc:	bl	19b88 <__assert_fail@plt+0x8334>
   145e0:	cmp	r0, #0
   145e4:	beq	14adc <__assert_fail@plt+0x3288>
   145e8:	cmp	r0, r4
   145ec:	str	r0, [r5, #24]
   145f0:	beq	14648 <__assert_fail@plt+0x2df4>
   145f4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   145f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   145fc:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14600:	ldrb	r1, [r1]
   14604:	tst	r1, #4
   14608:	ldr	r1, [sp, #40]	; 0x28
   1460c:	addne	r1, r0, r3
   14610:	mov	r0, #1
   14614:	str	r1, [sp, #40]	; 0x28
   14618:	str	r0, [sp, #20]
   1461c:	b	14650 <__assert_fail@plt+0x2dfc>
   14620:	ldrb	r0, [r8, #20]
   14624:	cmp	r0, #0
   14628:	beq	1463c <__assert_fail@plt+0x2de8>
   1462c:	cmp	r0, #46	; 0x2e
   14630:	ldrbeq	r0, [r8, #21]
   14634:	cmpeq	r0, #0
   14638:	bne	14528 <__assert_fail@plt+0x2cd4>
   1463c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14640:	mov	r7, #0
   14644:	b	147f4 <__assert_fail@plt+0x2fa0>
   14648:	ldr	r4, [fp, #-40]	; 0xffffffd8
   1464c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14650:	ldr	r0, [r5, #36]	; 0x24
   14654:	sub	r0, r0, r3
   14658:	cmp	r7, r3
   1465c:	bcc	149c8 <__assert_fail@plt+0x3174>
   14660:	str	r0, [fp, #-44]	; 0xffffffd4
   14664:	ldr	r0, [sp, #24]
   14668:	str	r0, [r6, #48]	; 0x30
   1466c:	ldr	r0, [r5]
   14670:	str	r7, [r6, #40]	; 0x28
   14674:	str	r0, [r6, #4]
   14678:	ldrd	r0, [r8]
   1467c:	strd	r0, [r6, #160]	; 0xa0
   14680:	ldrb	r0, [r5, #48]	; 0x30
   14684:	tst	r0, #4
   14688:	bne	14694 <__assert_fail@plt+0x2e40>
   1468c:	str	sl, [r6, #24]
   14690:	b	146b0 <__assert_fail@plt+0x2e5c>
   14694:	ldr	r0, [r6, #28]
   14698:	ldr	r1, [r6, #52]	; 0x34
   1469c:	str	r0, [r6, #24]
   146a0:	ldr	r0, [sp, #40]	; 0x28
   146a4:	add	r2, r1, #1
   146a8:	mov	r1, sl
   146ac:	bl	114e8 <memmove@plt>
   146b0:	ldr	r0, [sp, #52]	; 0x34
   146b4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   146b8:	ldr	sl, [sp, #28]
   146bc:	ldr	r0, [r0]
   146c0:	ldr	r2, [r1]
   146c4:	cmp	r0, #0
   146c8:	beq	146f0 <__assert_fail@plt+0x2e9c>
   146cc:	ands	r0, r2, #1024	; 0x400
   146d0:	bne	146f0 <__assert_fail@plt+0x2e9c>
   146d4:	mov	r0, r5
   146d8:	mov	r1, r6
   146dc:	mov	r2, #0
   146e0:	bl	132f8 <__assert_fail@plt+0x1aa4>
   146e4:	mov	r7, #0
   146e8:	strh	r0, [r6, #56]	; 0x38
   146ec:	b	14764 <__assert_fail@plt+0x2f10>
   146f0:	ldrb	r3, [r8, #18]
   146f4:	mov	r0, #0
   146f8:	tst	r2, #8
   146fc:	mov	r1, #0
   14700:	beq	14724 <__assert_fail@plt+0x2ed0>
   14704:	orr	r1, r3, #4
   14708:	cmp	r1, #4
   1470c:	mov	r1, #0
   14710:	beq	14724 <__assert_fail@plt+0x2ed0>
   14714:	eor	r1, r3, #10
   14718:	and	r2, r2, #16
   1471c:	orrs	r1, r2, r1
   14720:	movwne	r1, #1
   14724:	mov	r2, #11
   14728:	mov	r7, #0
   1472c:	strh	r2, [r6, #56]	; 0x38
   14730:	sub	r2, r3, #1
   14734:	uxtb	r3, r2
   14738:	cmp	r3, #11
   1473c:	sxtbls	r0, r2
   14740:	movwls	r2, #47296	; 0xb8c0
   14744:	movtls	r2, #1
   14748:	ldrls	r0, [r2, r0, lsl #2]
   1474c:	cmp	r1, #0
   14750:	str	r0, [r6, #80]	; 0x50
   14754:	mov	r0, #2
   14758:	movwne	r0, #1
   1475c:	str	r0, [r6, #112]	; 0x70
   14760:	str	r7, [r6, #116]	; 0x74
   14764:	cmp	r9, #0
   14768:	str	r7, [r6, #8]
   1476c:	ldrne	r0, [sp, #48]	; 0x30
   14770:	moveq	r9, r6
   14774:	strne	r6, [r0, #8]
   14778:	movw	r0, #10000	; 0x2710
   1477c:	cmp	r4, r0
   14780:	bne	147d4 <__assert_fail@plt+0x2f80>
   14784:	ldr	r0, [sp, #52]	; 0x34
   14788:	ldr	r0, [r0]
   1478c:	cmp	r0, #0
   14790:	bne	147d4 <__assert_fail@plt+0x2f80>
   14794:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14798:	mov	r0, sl
   1479c:	bl	1505c <__assert_fail@plt+0x3808>
   147a0:	mov	r1, #0
   147a4:	str	r1, [sp, #12]
   147a8:	movw	r1, #19778	; 0x4d42
   147ac:	movt	r1, #65363	; 0xff53
   147b0:	cmp	r0, r1
   147b4:	movwne	r1, #26985	; 0x6969
   147b8:	cmpne	r0, r1
   147bc:	beq	147d4 <__assert_fail@plt+0x2f80>
   147c0:	movw	r1, #6548	; 0x1994
   147c4:	movt	r1, #258	; 0x102
   147c8:	cmp	r0, r1
   147cc:	movne	r0, #1
   147d0:	strne	r0, [sp, #12]
   147d4:	ldr	r0, [sp, #32]
   147d8:	add	r4, r4, #1
   147dc:	cmp	r0, r4
   147e0:	mov	r0, #0
   147e4:	movwls	r0, #15
   147e8:	cmp	r0, #0
   147ec:	bne	14a3c <__assert_fail@plt+0x31e8>
   147f0:	str	r6, [sp, #48]	; 0x30
   147f4:	ldr	r6, [sl, #12]
   147f8:	cmp	r6, #0
   147fc:	bne	144ec <__assert_fail@plt+0x2c98>
   14800:	ldr	r0, [sp, #20]
   14804:	ldr	ip, [sp, #4]
   14808:	ldr	r6, [sp, #12]
   1480c:	b	149b0 <__assert_fail@plt+0x315c>
   14810:	mov	r4, #0
   14814:	mov	r6, #0
   14818:	ldrb	r0, [r7]
   1481c:	tst	r0, #4
   14820:	beq	1484c <__assert_fail@plt+0x2ff8>
   14824:	ldr	r2, [sp, #40]	; 0x28
   14828:	ldr	r0, [r5, #36]	; 0x24
   1482c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14830:	cmp	r3, r0
   14834:	sub	r1, r2, #1
   14838:	mov	r0, #0
   1483c:	moveq	r2, r1
   14840:	cmp	r4, #0
   14844:	moveq	r2, r1
   14848:	strb	r0, [r2]
   1484c:	ldr	r0, [sp, #16]
   14850:	cmp	r0, #0
   14854:	movwne	r0, #1
   14858:	orrs	r0, r0, ip
   1485c:	beq	148c0 <__assert_fail@plt+0x306c>
   14860:	cmp	r4, #0
   14864:	bne	14900 <__assert_fail@plt+0x30ac>
   14868:	ldr	r0, [sp, #8]
   1486c:	cmp	r0, #3
   14870:	bne	14888 <__assert_fail@plt+0x3034>
   14874:	ldrh	r0, [sl, #56]	; 0x38
   14878:	cmp	r0, #4
   1487c:	cmpne	r0, #7
   14880:	movne	r0, #6
   14884:	strhne	r0, [sl, #56]	; 0x38
   14888:	mov	r6, #0
   1488c:	cmp	r9, #0
   14890:	beq	14b60 <__assert_fail@plt+0x330c>
   14894:	ldrd	r4, [r9, #8]
   14898:	cmp	r5, #0
   1489c:	beq	148a8 <__assert_fail@plt+0x3054>
   148a0:	mov	r0, r5
   148a4:	bl	1183c <closedir@plt>
   148a8:	mov	r0, r9
   148ac:	bl	1a198 <__assert_fail@plt+0x8944>
   148b0:	cmp	r4, #0
   148b4:	mov	r9, r4
   148b8:	bne	14894 <__assert_fail@plt+0x3040>
   148bc:	b	14b60 <__assert_fail@plt+0x330c>
   148c0:	ldr	r0, [sp, #8]
   148c4:	cmp	r0, #1
   148c8:	cmpne	r4, #0
   148cc:	bne	14900 <__assert_fail@plt+0x30ac>
   148d0:	ldr	r0, [sl, #48]	; 0x30
   148d4:	cmp	r0, #0
   148d8:	beq	14a50 <__assert_fail@plt+0x31fc>
   148dc:	ldr	r1, [sl, #4]
   148e0:	movw	r3, #47282	; 0xb8b2
   148e4:	mov	r0, r5
   148e8:	mvn	r2, #0
   148ec:	movt	r3, #1
   148f0:	bl	13f60 <__assert_fail@plt+0x270c>
   148f4:	cmp	r0, #0
   148f8:	bne	14a60 <__assert_fail@plt+0x320c>
   148fc:	b	14860 <__assert_fail@plt+0x300c>
   14900:	tst	r6, #1
   14904:	beq	14934 <__assert_fail@plt+0x30e0>
   14908:	movw	r0, #20516	; 0x5024
   1490c:	mov	r1, r9
   14910:	mov	r2, r4
   14914:	movt	r0, #1
   14918:	str	r0, [r5, #44]	; 0x2c
   1491c:	mov	r0, r5
   14920:	bl	13490 <__assert_fail@plt+0x1c3c>
   14924:	mov	r6, r0
   14928:	mov	r0, #0
   1492c:	str	r0, [r5, #44]	; 0x2c
   14930:	b	14b60 <__assert_fail@plt+0x330c>
   14934:	cmp	r4, #2
   14938:	bcc	149c0 <__assert_fail@plt+0x316c>
   1493c:	ldr	r0, [sp, #52]	; 0x34
   14940:	ldr	r0, [r0]
   14944:	cmp	r0, #0
   14948:	beq	149c0 <__assert_fail@plt+0x316c>
   1494c:	mov	r0, r5
   14950:	mov	r1, r9
   14954:	mov	r2, r4
   14958:	bl	13490 <__assert_fail@plt+0x1c3c>
   1495c:	mov	r6, r0
   14960:	b	14b60 <__assert_fail@plt+0x330c>
   14964:	ldr	r0, [sp, #36]	; 0x24
   14968:	ldr	r0, [r0]
   1496c:	cmp	r0, #0
   14970:	beq	1498c <__assert_fail@plt+0x3138>
   14974:	str	r0, [sl, #32]
   14978:	ldr	r0, [sp, #16]
   1497c:	orrs	r0, r0, r4
   14980:	mov	r0, #4
   14984:	movwne	r0, #7
   14988:	strh	r0, [sl, #56]	; 0x38
   1498c:	ldr	r0, [sl, #12]
   14990:	ldr	r6, [sp, #12]
   14994:	cmp	r0, #0
   14998:	beq	14b74 <__assert_fail@plt+0x3320>
   1499c:	bl	1183c <closedir@plt>
   149a0:	mov	r0, #0
   149a4:	ldr	ip, [sp, #4]
   149a8:	str	r0, [sl, #12]
   149ac:	ldr	r0, [sp, #20]
   149b0:	tst	r0, #1
   149b4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   149b8:	beq	14818 <__assert_fail@plt+0x2fc4>
   149bc:	b	14b88 <__assert_fail@plt+0x3334>
   149c0:	mov	r6, r9
   149c4:	b	14b60 <__assert_fail@plt+0x330c>
   149c8:	mov	r0, r6
   149cc:	bl	1a198 <__assert_fail@plt+0x8944>
   149d0:	ldr	r7, [sp, #28]
   149d4:	cmp	r9, #0
   149d8:	beq	14a04 <__assert_fail@plt+0x31b0>
   149dc:	ldrd	r4, [r9, #8]
   149e0:	cmp	r5, #0
   149e4:	beq	149f0 <__assert_fail@plt+0x319c>
   149e8:	mov	r0, r5
   149ec:	bl	1183c <closedir@plt>
   149f0:	mov	r0, r9
   149f4:	bl	1a198 <__assert_fail@plt+0x8944>
   149f8:	cmp	r4, #0
   149fc:	mov	r9, r4
   14a00:	bne	149dc <__assert_fail@plt+0x3188>
   14a04:	ldr	r0, [r7, #12]
   14a08:	bl	1183c <closedir@plt>
   14a0c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14a10:	mov	r6, #0
   14a14:	mov	r0, #7
   14a18:	str	r6, [r7, #12]
   14a1c:	strh	r0, [r7, #56]	; 0x38
   14a20:	ldr	r0, [r1]
   14a24:	orr	r0, r0, #8192	; 0x2000
   14a28:	str	r0, [r1]
   14a2c:	ldr	r1, [sp, #36]	; 0x24
   14a30:	mov	r0, #36	; 0x24
   14a34:	str	r0, [r1]
   14a38:	b	14b60 <__assert_fail@plt+0x330c>
   14a3c:	ldr	ip, [sp, #4]
   14a40:	cmp	r0, #15
   14a44:	bne	14b6c <__assert_fail@plt+0x3318>
   14a48:	ldr	r6, [sp, #12]
   14a4c:	b	14b78 <__assert_fail@plt+0x3324>
   14a50:	mov	r0, r5
   14a54:	bl	14c6c <__assert_fail@plt+0x3418>
   14a58:	cmp	r0, #0
   14a5c:	beq	14860 <__assert_fail@plt+0x300c>
   14a60:	mov	r0, #7
   14a64:	mov	r6, #0
   14a68:	cmp	r9, #0
   14a6c:	strh	r0, [sl, #56]	; 0x38
   14a70:	ldr	r0, [r7]
   14a74:	orr	r0, r0, #8192	; 0x2000
   14a78:	str	r0, [r7]
   14a7c:	beq	14b60 <__assert_fail@plt+0x330c>
   14a80:	ldrd	r4, [r9, #8]
   14a84:	cmp	r5, #0
   14a88:	beq	14a94 <__assert_fail@plt+0x3240>
   14a8c:	mov	r0, r5
   14a90:	bl	1183c <closedir@plt>
   14a94:	mov	r0, r9
   14a98:	bl	1a198 <__assert_fail@plt+0x8944>
   14a9c:	cmp	r4, #0
   14aa0:	mov	r9, r4
   14aa4:	bne	14a80 <__assert_fail@plt+0x322c>
   14aa8:	b	14b60 <__assert_fail@plt+0x330c>
   14aac:	mov	r0, r4
   14ab0:	bl	1a198 <__assert_fail@plt+0x8944>
   14ab4:	ldr	r1, [sp, #36]	; 0x24
   14ab8:	mov	r0, #0
   14abc:	str	r0, [r5, #24]
   14ac0:	mov	r0, #36	; 0x24
   14ac4:	str	r0, [r1]
   14ac8:	b	14aec <__assert_fail@plt+0x3298>
   14acc:	bl	116d4 <__errno_location@plt>
   14ad0:	mov	r1, #12
   14ad4:	str	r1, [r0]
   14ad8:	b	14b60 <__assert_fail@plt+0x330c>
   14adc:	ldr	r0, [r5, #24]
   14ae0:	bl	1a198 <__assert_fail@plt+0x8944>
   14ae4:	mov	r0, #0
   14ae8:	str	r0, [r5, #24]
   14aec:	ldr	sl, [sp, #28]
   14af0:	ldr	r0, [sp, #36]	; 0x24
   14af4:	ldr	r4, [r0]
   14af8:	mov	r0, r6
   14afc:	bl	1a198 <__assert_fail@plt+0x8944>
   14b00:	cmp	r9, #0
   14b04:	beq	14b30 <__assert_fail@plt+0x32dc>
   14b08:	ldrd	r6, [r9, #8]
   14b0c:	cmp	r7, #0
   14b10:	beq	14b1c <__assert_fail@plt+0x32c8>
   14b14:	mov	r0, r7
   14b18:	bl	1183c <closedir@plt>
   14b1c:	mov	r0, r9
   14b20:	bl	1a198 <__assert_fail@plt+0x8944>
   14b24:	cmp	r6, #0
   14b28:	mov	r9, r6
   14b2c:	bne	14b08 <__assert_fail@plt+0x32b4>
   14b30:	ldr	r0, [sl, #12]
   14b34:	bl	1183c <closedir@plt>
   14b38:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14b3c:	mov	r6, #0
   14b40:	mov	r0, #7
   14b44:	str	r6, [sl, #12]
   14b48:	strh	r0, [sl, #56]	; 0x38
   14b4c:	ldr	r0, [r1]
   14b50:	orr	r0, r0, #8192	; 0x2000
   14b54:	str	r0, [r1]
   14b58:	ldr	r0, [sp, #36]	; 0x24
   14b5c:	str	r4, [r0]
   14b60:	mov	r0, r6
   14b64:	sub	sp, fp, #28
   14b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b6c:	mov	r6, #0
   14b70:	b	14b60 <__assert_fail@plt+0x330c>
   14b74:	ldr	ip, [sp, #4]
   14b78:	ldr	r0, [sp, #20]
   14b7c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14b80:	tst	r0, #1
   14b84:	beq	14818 <__assert_fail@plt+0x2fc4>
   14b88:	ldr	r1, [r5, #4]
   14b8c:	ldr	r0, [r5, #24]
   14b90:	cmp	r1, #0
   14b94:	beq	14bc4 <__assert_fail@plt+0x3370>
   14b98:	ldr	r2, [r1, #24]
   14b9c:	add	r3, r1, #168	; 0xa8
   14ba0:	cmp	r2, r3
   14ba4:	ldrne	r3, [r1, #28]
   14ba8:	subne	r2, r2, r3
   14bac:	addne	r2, r0, r2
   14bb0:	strne	r2, [r1, #24]
   14bb4:	str	r0, [r1, #28]
   14bb8:	ldr	r1, [r1, #8]
   14bbc:	cmp	r1, #0
   14bc0:	bne	14b98 <__assert_fail@plt+0x3344>
   14bc4:	ldr	r1, [r9, #48]	; 0x30
   14bc8:	cmp	r1, #0
   14bcc:	blt	14818 <__assert_fail@plt+0x2fc4>
   14bd0:	mov	r1, r9
   14bd4:	ldr	r2, [r1, #24]
   14bd8:	add	r3, r1, #168	; 0xa8
   14bdc:	cmp	r2, r3
   14be0:	ldrne	r3, [r1, #28]
   14be4:	subne	r2, r2, r3
   14be8:	addne	r2, r0, r2
   14bec:	strne	r2, [r1, #24]
   14bf0:	str	r0, [r1, #28]
   14bf4:	ldr	r2, [r1, #8]
   14bf8:	cmp	r2, #0
   14bfc:	ldreq	r2, [r1, #4]
   14c00:	ldr	r1, [r2, #48]	; 0x30
   14c04:	cmn	r1, #1
   14c08:	mov	r1, r2
   14c0c:	bgt	14bd4 <__assert_fail@plt+0x3380>
   14c10:	b	14818 <__assert_fail@plt+0x2fc4>
   14c14:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14c18:	mov	r0, sl
   14c1c:	bl	1505c <__assert_fail@plt+0x3808>
   14c20:	movw	r1, #26984	; 0x6968
   14c24:	cmp	r0, r1
   14c28:	ble	14c54 <__assert_fail@plt+0x3400>
   14c2c:	movw	r1, #26985	; 0x6969
   14c30:	cmp	r0, r1
   14c34:	movwne	r1, #16719	; 0x414f
   14c38:	movtne	r1, #21318	; 0x5346
   14c3c:	cmpne	r0, r1
   14c40:	beq	14384 <__assert_fail@plt+0x2b30>
   14c44:	movw	r1, #40864	; 0x9fa0
   14c48:	cmp	r0, r1
   14c4c:	beq	14384 <__assert_fail@plt+0x2b30>
   14c50:	b	14354 <__assert_fail@plt+0x2b00>
   14c54:	movw	r1, #19778	; 0x4d42
   14c58:	movt	r1, #65363	; 0xff53
   14c5c:	cmp	r0, r1
   14c60:	cmpne	r0, #0
   14c64:	beq	14384 <__assert_fail@plt+0x2b30>
   14c68:	b	14354 <__assert_fail@plt+0x2b00>
   14c6c:	push	{r4, r5, fp, lr}
   14c70:	add	fp, sp, #8
   14c74:	mov	r5, r0
   14c78:	ldr	r0, [r0, #48]	; 0x30
   14c7c:	mov	r4, #0
   14c80:	tst	r0, #4
   14c84:	bne	14cc8 <__assert_fail@plt+0x3474>
   14c88:	tst	r0, #512	; 0x200
   14c8c:	bne	14ca8 <__assert_fail@plt+0x3454>
   14c90:	ldr	r0, [r5, #28]
   14c94:	bl	117b8 <fchdir@plt>
   14c98:	mov	r4, r0
   14c9c:	cmp	r0, #0
   14ca0:	movwne	r4, #1
   14ca4:	b	14cc8 <__assert_fail@plt+0x3474>
   14ca8:	ldr	r1, [r5, #32]
   14cac:	add	r0, r5, #60	; 0x3c
   14cb0:	bl	164a4 <__assert_fail@plt+0x4c50>
   14cb4:	cmp	r0, #0
   14cb8:	blt	14cc0 <__assert_fail@plt+0x346c>
   14cbc:	bl	11824 <close@plt>
   14cc0:	mvn	r0, #99	; 0x63
   14cc4:	str	r0, [r5, #32]
   14cc8:	add	r5, r5, #60	; 0x3c
   14ccc:	b	14cd4 <__assert_fail@plt+0x3480>
   14cd0:	bl	11824 <close@plt>
   14cd4:	mov	r0, r5
   14cd8:	bl	1649c <__assert_fail@plt+0x4c48>
   14cdc:	cmp	r0, #0
   14ce0:	movne	r0, r4
   14ce4:	popne	{r4, r5, fp, pc}
   14ce8:	mov	r0, r5
   14cec:	bl	164f0 <__assert_fail@plt+0x4c9c>
   14cf0:	cmp	r0, #0
   14cf4:	bge	14cd0 <__assert_fail@plt+0x347c>
   14cf8:	b	14cd4 <__assert_fail@plt+0x3480>
   14cfc:	push	{r4, r5, r6, r7, fp, lr}
   14d00:	add	fp, sp, #16
   14d04:	mov	r6, r0
   14d08:	ldrh	r0, [r0, #48]	; 0x30
   14d0c:	mov	r4, r1
   14d10:	movw	r1, #258	; 0x102
   14d14:	tst	r0, r1
   14d18:	beq	14d8c <__assert_fail@plt+0x3538>
   14d1c:	mov	r0, #24
   14d20:	bl	19b58 <__assert_fail@plt+0x8304>
   14d24:	mov	r5, #0
   14d28:	cmp	r0, #0
   14d2c:	beq	14dac <__assert_fail@plt+0x3558>
   14d30:	mov	r7, r0
   14d34:	ldrd	r0, [r4, #64]	; 0x40
   14d38:	add	r2, r7, #8
   14d3c:	stm	r7, {r0, r1}
   14d40:	ldrd	r0, [r4, #160]	; 0xa0
   14d44:	stm	r2, {r0, r1, r4}
   14d48:	mov	r1, r7
   14d4c:	ldr	r0, [r6, #56]	; 0x38
   14d50:	bl	16194 <__assert_fail@plt+0x4940>
   14d54:	cmp	r0, r7
   14d58:	beq	14d80 <__assert_fail@plt+0x352c>
   14d5c:	mov	r6, r0
   14d60:	mov	r0, r7
   14d64:	bl	1a198 <__assert_fail@plt+0x8944>
   14d68:	cmp	r6, #0
   14d6c:	beq	14dac <__assert_fail@plt+0x3558>
   14d70:	ldr	r0, [r6, #16]
   14d74:	mov	r1, #2
   14d78:	strh	r1, [r4, #56]	; 0x38
   14d7c:	str	r0, [r4]
   14d80:	mov	r5, #1
   14d84:	mov	r0, r5
   14d88:	pop	{r4, r5, r6, r7, fp, pc}
   14d8c:	ldr	r0, [r6, #56]	; 0x38
   14d90:	add	r1, r4, #64	; 0x40
   14d94:	bl	19da0 <__assert_fail@plt+0x854c>
   14d98:	cmp	r0, #0
   14d9c:	mov	r5, #1
   14da0:	movne	r0, #2
   14da4:	strhne	r0, [r4, #56]	; 0x38
   14da8:	strne	r4, [r4]
   14dac:	mov	r0, r5
   14db0:	pop	{r4, r5, r6, r7, fp, pc}
   14db4:	cmp	r2, #5
   14db8:	movcc	r0, #0
   14dbc:	strhcc	r2, [r1, #60]	; 0x3c
   14dc0:	bxcc	lr
   14dc4:	push	{fp, lr}
   14dc8:	mov	fp, sp
   14dcc:	bl	116d4 <__errno_location@plt>
   14dd0:	mov	r1, #22
   14dd4:	str	r1, [r0]
   14dd8:	mov	r0, #1
   14ddc:	pop	{fp, pc}
   14de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14de4:	add	fp, sp, #28
   14de8:	sub	sp, sp, #4
   14dec:	mov	r9, r0
   14df0:	orr	r0, r1, #4096	; 0x1000
   14df4:	cmp	r0, #4096	; 0x1000
   14df8:	bne	14e38 <__assert_fail@plt+0x35e4>
   14dfc:	ldr	r8, [r9]
   14e00:	mov	r7, r1
   14e04:	bl	116d4 <__errno_location@plt>
   14e08:	mov	r5, #0
   14e0c:	mov	sl, r0
   14e10:	str	r5, [r0]
   14e14:	ldrb	r0, [r9, #49]	; 0x31
   14e18:	tst	r0, #32
   14e1c:	bne	14e48 <__assert_fail@plt+0x35f4>
   14e20:	ldrh	r0, [r8, #56]	; 0x38
   14e24:	cmp	r0, #1
   14e28:	beq	14e54 <__assert_fail@plt+0x3600>
   14e2c:	cmp	r0, #9
   14e30:	ldreq	r5, [r8, #8]
   14e34:	b	14e48 <__assert_fail@plt+0x35f4>
   14e38:	bl	116d4 <__errno_location@plt>
   14e3c:	mov	r1, #22
   14e40:	mov	r5, #0
   14e44:	str	r1, [r0]
   14e48:	mov	r0, r5
   14e4c:	sub	sp, fp, #28
   14e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e54:	ldr	r6, [r9, #4]
   14e58:	cmp	r6, #0
   14e5c:	beq	14e8c <__assert_fail@plt+0x3638>
   14e60:	ldr	r4, [r6, #8]
   14e64:	ldr	r1, [r6, #12]
   14e68:	cmp	r1, #0
   14e6c:	beq	14e78 <__assert_fail@plt+0x3624>
   14e70:	mov	r0, r1
   14e74:	bl	1183c <closedir@plt>
   14e78:	mov	r0, r6
   14e7c:	bl	1a198 <__assert_fail@plt+0x8944>
   14e80:	cmp	r4, #0
   14e84:	mov	r6, r4
   14e88:	bne	14e60 <__assert_fail@plt+0x360c>
   14e8c:	cmp	r7, #4096	; 0x1000
   14e90:	mov	r4, #1
   14e94:	ldreq	r0, [r9, #48]	; 0x30
   14e98:	moveq	r4, #2
   14e9c:	orreq	r0, r0, #4096	; 0x1000
   14ea0:	streq	r0, [r9, #48]	; 0x30
   14ea4:	ldr	r0, [r8, #48]	; 0x30
   14ea8:	cmp	r0, #0
   14eac:	bne	14ef8 <__assert_fail@plt+0x36a4>
   14eb0:	ldr	r0, [r8, #24]
   14eb4:	ldrb	r0, [r0]
   14eb8:	cmp	r0, #47	; 0x2f
   14ebc:	beq	14ef8 <__assert_fail@plt+0x36a4>
   14ec0:	ldr	r0, [r9, #48]	; 0x30
   14ec4:	tst	r0, #4
   14ec8:	bne	14ef8 <__assert_fail@plt+0x36a4>
   14ecc:	mov	r1, #32768	; 0x8000
   14ed0:	tst	r0, #512	; 0x200
   14ed4:	and	r1, r1, r0, lsl #11
   14ed8:	orr	r1, r1, #18688	; 0x4900
   14edc:	orr	r2, r1, #524288	; 0x80000
   14ee0:	bne	14f10 <__assert_fail@plt+0x36bc>
   14ee4:	movw	r0, #47283	; 0xb8b3
   14ee8:	mov	r1, r2
   14eec:	movt	r0, #1
   14ef0:	bl	1a0f4 <__assert_fail@plt+0x88a0>
   14ef4:	b	14f20 <__assert_fail@plt+0x36cc>
   14ef8:	mov	r0, r9
   14efc:	mov	r1, r4
   14f00:	bl	141b8 <__assert_fail@plt+0x2964>
   14f04:	mov	r5, r0
   14f08:	str	r0, [r9, #4]
   14f0c:	b	14e48 <__assert_fail@plt+0x35f4>
   14f10:	ldr	r0, [r9, #32]
   14f14:	movw	r1, #47283	; 0xb8b3
   14f18:	movt	r1, #1
   14f1c:	bl	16548 <__assert_fail@plt+0x4cf4>
   14f20:	mov	r8, r0
   14f24:	cmn	r0, #1
   14f28:	ble	14f6c <__assert_fail@plt+0x3718>
   14f2c:	mov	r0, r9
   14f30:	mov	r1, r4
   14f34:	bl	141b8 <__assert_fail@plt+0x2964>
   14f38:	str	r0, [r9, #4]
   14f3c:	ldrb	r0, [r9, #49]	; 0x31
   14f40:	tst	r0, #2
   14f44:	bne	14f78 <__assert_fail@plt+0x3724>
   14f48:	mov	r0, r8
   14f4c:	bl	117b8 <fchdir@plt>
   14f50:	cmp	r0, #0
   14f54:	beq	14fa8 <__assert_fail@plt+0x3754>
   14f58:	ldr	r4, [sl]
   14f5c:	mov	r0, r8
   14f60:	bl	11824 <close@plt>
   14f64:	str	r4, [sl]
   14f68:	b	14e48 <__assert_fail@plt+0x35f4>
   14f6c:	mov	r5, #0
   14f70:	str	r5, [r9, #4]
   14f74:	b	14e48 <__assert_fail@plt+0x35f4>
   14f78:	ldr	r1, [r9, #32]
   14f7c:	cmp	r1, r8
   14f80:	bne	14f8c <__assert_fail@plt+0x3738>
   14f84:	cmn	r1, #100	; 0x64
   14f88:	bne	14fb8 <__assert_fail@plt+0x3764>
   14f8c:	add	r0, r9, #60	; 0x3c
   14f90:	bl	164a4 <__assert_fail@plt+0x4c50>
   14f94:	cmp	r0, #0
   14f98:	blt	14fa0 <__assert_fail@plt+0x374c>
   14f9c:	bl	11824 <close@plt>
   14fa0:	str	r8, [r9, #32]
   14fa4:	b	14fb0 <__assert_fail@plt+0x375c>
   14fa8:	mov	r0, r8
   14fac:	bl	11824 <close@plt>
   14fb0:	ldr	r5, [r9, #4]
   14fb4:	b	14e48 <__assert_fail@plt+0x35f4>
   14fb8:	bl	11818 <abort@plt>
   14fbc:	push	{fp, lr}
   14fc0:	mov	fp, sp
   14fc4:	mov	r2, r1
   14fc8:	ldrd	r0, [r0, #8]
   14fcc:	mov	r3, #0
   14fd0:	bl	1a8e8 <__assert_fail@plt+0x9094>
   14fd4:	mov	r0, r2
   14fd8:	pop	{fp, pc}
   14fdc:	push	{r4, r5, fp, lr}
   14fe0:	add	fp, sp, #8
   14fe4:	ldrd	r2, [r1, #8]
   14fe8:	ldrd	r4, [r0, #8]
   14fec:	eor	r3, r5, r3
   14ff0:	eor	r2, r4, r2
   14ff4:	orrs	r2, r2, r3
   14ff8:	mov	r2, #0
   14ffc:	bne	1501c <__assert_fail@plt+0x37c8>
   15000:	ldrd	r2, [r1]
   15004:	ldrd	r0, [r0]
   15008:	eor	r1, r1, r3
   1500c:	eor	r0, r0, r2
   15010:	orr	r0, r0, r1
   15014:	clz	r0, r0
   15018:	lsr	r2, r0, #5
   1501c:	mov	r0, r2
   15020:	pop	{r4, r5, fp, pc}
   15024:	push	{r4, r5, fp, lr}
   15028:	add	fp, sp, #8
   1502c:	ldr	r0, [r0]
   15030:	ldrd	r2, [r0, #160]	; 0xa0
   15034:	ldr	r0, [r1]
   15038:	ldrd	r4, [r0, #160]	; 0xa0
   1503c:	mov	r0, #0
   15040:	subs	r1, r4, r2
   15044:	sbcs	r1, r5, r3
   15048:	movwcc	r0, #1
   1504c:	subs	r1, r2, r4
   15050:	sbcs	r1, r3, r5
   15054:	subcc	r0, r0, #1
   15058:	pop	{r4, r5, fp, pc}
   1505c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15060:	add	fp, sp, #24
   15064:	sub	sp, sp, #96	; 0x60
   15068:	ldr	r7, [r0, #44]	; 0x2c
   1506c:	mov	r4, r0
   15070:	mov	r5, #0
   15074:	ldrb	r0, [r7, #49]	; 0x31
   15078:	tst	r0, #2
   1507c:	beq	15178 <__assert_fail@plt+0x3924>
   15080:	ldr	r6, [r7, #52]	; 0x34
   15084:	mov	r9, r1
   15088:	cmp	r6, #0
   1508c:	bne	150cc <__assert_fail@plt+0x3878>
   15090:	movw	r0, #41368	; 0xa198
   15094:	movw	r2, #20868	; 0x5184
   15098:	movw	r3, #20900	; 0x51a4
   1509c:	mov	r1, #0
   150a0:	mov	r8, #0
   150a4:	movt	r0, #1
   150a8:	movt	r2, #1
   150ac:	movt	r3, #1
   150b0:	str	r0, [sp]
   150b4:	mov	r0, #13
   150b8:	bl	15650 <__assert_fail@plt+0x3dfc>
   150bc:	mov	r6, r0
   150c0:	cmp	r0, #0
   150c4:	str	r0, [r7, #52]	; 0x34
   150c8:	beq	15104 <__assert_fail@plt+0x38b0>
   150cc:	ldrd	r0, [r4, #64]	; 0x40
   150d0:	str	r1, [sp, #12]
   150d4:	str	r0, [sp, #8]
   150d8:	add	r1, sp, #8
   150dc:	mov	r0, r6
   150e0:	bl	153a0 <__assert_fail@plt+0x3b4c>
   150e4:	cmp	r0, #0
   150e8:	beq	150f4 <__assert_fail@plt+0x38a0>
   150ec:	ldr	r5, [r0, #8]
   150f0:	b	15178 <__assert_fail@plt+0x3924>
   150f4:	mov	r8, #1
   150f8:	cmp	r9, #0
   150fc:	bge	15110 <__assert_fail@plt+0x38bc>
   15100:	b	15178 <__assert_fail@plt+0x3924>
   15104:	mov	r6, #0
   15108:	cmp	r9, #0
   1510c:	blt	15178 <__assert_fail@plt+0x3924>
   15110:	add	r1, sp, #8
   15114:	mov	r0, r9
   15118:	bl	11488 <fstatfs64@plt>
   1511c:	cmp	r0, #0
   15120:	bne	15178 <__assert_fail@plt+0x3924>
   15124:	cmp	r8, #0
   15128:	beq	15174 <__assert_fail@plt+0x3920>
   1512c:	mov	r0, #16
   15130:	bl	19b58 <__assert_fail@plt+0x8304>
   15134:	cmp	r0, #0
   15138:	beq	15174 <__assert_fail@plt+0x3920>
   1513c:	mov	r5, r0
   15140:	ldrd	r0, [r4, #64]	; 0x40
   15144:	ldr	r2, [sp, #8]
   15148:	stm	r5, {r0, r1, r2}
   1514c:	mov	r0, r6
   15150:	mov	r1, r5
   15154:	bl	16194 <__assert_fail@plt+0x4940>
   15158:	cmp	r0, #0
   1515c:	beq	1516c <__assert_fail@plt+0x3918>
   15160:	cmp	r0, r5
   15164:	beq	15174 <__assert_fail@plt+0x3920>
   15168:	bl	11818 <abort@plt>
   1516c:	mov	r0, r5
   15170:	bl	1a198 <__assert_fail@plt+0x8944>
   15174:	ldr	r5, [sp, #8]
   15178:	mov	r0, r5
   1517c:	sub	sp, fp, #24
   15180:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15184:	push	{fp, lr}
   15188:	mov	fp, sp
   1518c:	mov	r2, r1
   15190:	ldrd	r0, [r0]
   15194:	mov	r3, #0
   15198:	bl	1a8e8 <__assert_fail@plt+0x9094>
   1519c:	mov	r0, r2
   151a0:	pop	{fp, pc}
   151a4:	ldrd	r2, [r1]
   151a8:	ldrd	r0, [r0]
   151ac:	eor	r1, r1, r3
   151b0:	eor	r0, r0, r2
   151b4:	orr	r0, r0, r1
   151b8:	clz	r0, r0
   151bc:	lsr	r0, r0, #5
   151c0:	bx	lr
   151c4:	andeq	r0, r0, r0
   151c8:	ldr	r0, [r0, #8]
   151cc:	bx	lr
   151d0:	ldr	r0, [r0, #12]
   151d4:	bx	lr
   151d8:	ldr	r0, [r0, #16]
   151dc:	bx	lr
   151e0:	ldm	r0, {r2, ip}
   151e4:	mov	r0, #0
   151e8:	cmp	r2, ip
   151ec:	bxcs	lr
   151f0:	mov	r0, #0
   151f4:	ldr	r1, [r2]
   151f8:	cmp	r1, #0
   151fc:	beq	15220 <__assert_fail@plt+0x39cc>
   15200:	mov	r3, #0
   15204:	mov	r1, r2
   15208:	ldr	r1, [r1, #4]
   1520c:	add	r3, r3, #1
   15210:	cmp	r1, #0
   15214:	bne	15208 <__assert_fail@plt+0x39b4>
   15218:	cmp	r3, r0
   1521c:	movhi	r0, r3
   15220:	add	r2, r2, #8
   15224:	cmp	r2, ip
   15228:	bcc	151f4 <__assert_fail@plt+0x39a0>
   1522c:	bx	lr
   15230:	push	{fp, lr}
   15234:	mov	fp, sp
   15238:	ldm	r0, {r3, ip}
   1523c:	mov	lr, #0
   15240:	mov	r1, #0
   15244:	cmp	r3, ip
   15248:	bcs	15284 <__assert_fail@plt+0x3a30>
   1524c:	mov	r1, #0
   15250:	mov	lr, #0
   15254:	ldr	r2, [r3]
   15258:	cmp	r2, #0
   1525c:	beq	15278 <__assert_fail@plt+0x3a24>
   15260:	mov	r2, r3
   15264:	ldr	r2, [r2, #4]
   15268:	add	r1, r1, #1
   1526c:	cmp	r2, #0
   15270:	bne	15264 <__assert_fail@plt+0x3a10>
   15274:	add	lr, lr, #1
   15278:	add	r3, r3, #8
   1527c:	cmp	r3, ip
   15280:	bcc	15254 <__assert_fail@plt+0x3a00>
   15284:	ldr	r2, [r0, #12]
   15288:	cmp	lr, r2
   1528c:	bne	152a4 <__assert_fail@plt+0x3a50>
   15290:	ldr	r2, [r0, #16]
   15294:	mov	r0, #1
   15298:	cmp	r1, r2
   1529c:	movne	r0, #0
   152a0:	pop	{fp, pc}
   152a4:	mov	r0, #0
   152a8:	pop	{fp, pc}
   152ac:	nop	{0}
   152b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152b4:	add	fp, sp, #24
   152b8:	sub	sp, sp, #8
   152bc:	ldr	r6, [r0]
   152c0:	ldmib	r0, {r2, r7, r8}
   152c4:	ldr	r3, [r0, #16]
   152c8:	mov	r4, r1
   152cc:	mov	r5, #0
   152d0:	cmp	r6, r2
   152d4:	bcs	15314 <__assert_fail@plt+0x3ac0>
   152d8:	mov	r5, #0
   152dc:	ldr	r0, [r6]
   152e0:	cmp	r0, #0
   152e4:	beq	15308 <__assert_fail@plt+0x3ab4>
   152e8:	mov	r0, #0
   152ec:	mov	r1, r6
   152f0:	ldr	r1, [r1, #4]
   152f4:	add	r0, r0, #1
   152f8:	cmp	r1, #0
   152fc:	bne	152f0 <__assert_fail@plt+0x3a9c>
   15300:	cmp	r0, r5
   15304:	movhi	r5, r0
   15308:	add	r6, r6, #8
   1530c:	cmp	r6, r2
   15310:	bcc	152dc <__assert_fail@plt+0x3a88>
   15314:	movw	r2, #47344	; 0xb8f0
   15318:	mov	r0, r4
   1531c:	mov	r1, #1
   15320:	movt	r2, #1
   15324:	bl	1171c <__fprintf_chk@plt>
   15328:	movw	r2, #47368	; 0xb908
   1532c:	mov	r0, r4
   15330:	mov	r1, #1
   15334:	mov	r3, r7
   15338:	movt	r2, #1
   1533c:	bl	1171c <__fprintf_chk@plt>
   15340:	vldr	d16, [pc, #80]	; 15398 <__assert_fail@plt+0x3b44>
   15344:	vmov	s0, r8
   15348:	movw	r2, #47392	; 0xb920
   1534c:	mov	r0, r4
   15350:	mov	r1, #1
   15354:	mov	r3, r8
   15358:	vcvt.f64.u32	d17, s0
   1535c:	vmov	s0, r7
   15360:	movt	r2, #1
   15364:	vcvt.f64.u32	d18, s0
   15368:	vmul.f64	d16, d17, d16
   1536c:	vdiv.f64	d16, d16, d18
   15370:	vstr	d16, [sp]
   15374:	bl	1171c <__fprintf_chk@plt>
   15378:	movw	r2, #47425	; 0xb941
   1537c:	mov	r0, r4
   15380:	mov	r1, #1
   15384:	mov	r3, r5
   15388:	movt	r2, #1
   1538c:	sub	sp, fp, #24
   15390:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15394:	b	1171c <__fprintf_chk@plt>
   15398:	andeq	r0, r0, r0
   1539c:	subsmi	r0, r9, r0
   153a0:	push	{r4, r5, r6, r7, fp, lr}
   153a4:	add	fp, sp, #16
   153a8:	mov	r4, r1
   153ac:	ldr	r1, [r0, #8]
   153b0:	ldr	r2, [r0, #24]
   153b4:	mov	r5, r0
   153b8:	mov	r0, r4
   153bc:	blx	r2
   153c0:	ldr	r1, [r5, #8]
   153c4:	cmp	r0, r1
   153c8:	bcs	15434 <__assert_fail@plt+0x3be0>
   153cc:	ldr	r7, [r5]
   153d0:	mov	r6, #0
   153d4:	ldr	r1, [r7, r0, lsl #3]!
   153d8:	cmp	r1, #0
   153dc:	cmpne	r7, #0
   153e0:	bne	153f0 <__assert_fail@plt+0x3b9c>
   153e4:	mov	r0, r6
   153e8:	pop	{r4, r5, r6, r7, fp, pc}
   153ec:	ldr	r1, [r7]
   153f0:	cmp	r1, r4
   153f4:	beq	1541c <__assert_fail@plt+0x3bc8>
   153f8:	ldr	r2, [r5, #28]
   153fc:	mov	r0, r4
   15400:	blx	r2
   15404:	cmp	r0, #0
   15408:	bne	15428 <__assert_fail@plt+0x3bd4>
   1540c:	ldr	r7, [r7, #4]
   15410:	cmp	r7, #0
   15414:	bne	153ec <__assert_fail@plt+0x3b98>
   15418:	b	153e4 <__assert_fail@plt+0x3b90>
   1541c:	mov	r6, r4
   15420:	mov	r0, r6
   15424:	pop	{r4, r5, r6, r7, fp, pc}
   15428:	ldr	r6, [r7]
   1542c:	mov	r0, r6
   15430:	pop	{r4, r5, r6, r7, fp, pc}
   15434:	bl	11818 <abort@plt>
   15438:	ldr	r1, [r0, #16]
   1543c:	cmp	r1, #0
   15440:	moveq	r0, #0
   15444:	bxeq	lr
   15448:	ldm	r0, {r1, r2}
   1544c:	cmp	r1, r2
   15450:	bcs	15468 <__assert_fail@plt+0x3c14>
   15454:	ldr	r0, [r1], #8
   15458:	cmp	r0, #0
   1545c:	bxne	lr
   15460:	cmp	r1, r2
   15464:	bcc	15454 <__assert_fail@plt+0x3c00>
   15468:	push	{fp, lr}
   1546c:	mov	fp, sp
   15470:	bl	11818 <abort@plt>
   15474:	push	{r4, r5, fp, lr}
   15478:	add	fp, sp, #8
   1547c:	mov	r5, r1
   15480:	ldr	r1, [r0, #8]
   15484:	ldr	r2, [r0, #24]
   15488:	mov	r4, r0
   1548c:	mov	r0, r5
   15490:	blx	r2
   15494:	ldr	r1, [r4, #8]
   15498:	cmp	r0, r1
   1549c:	bcs	154f8 <__assert_fail@plt+0x3ca4>
   154a0:	ldr	r1, [r4]
   154a4:	add	r2, r1, r0, lsl #3
   154a8:	ldr	r3, [r2]
   154ac:	ldr	r2, [r2, #4]
   154b0:	cmp	r3, r5
   154b4:	beq	154c4 <__assert_fail@plt+0x3c70>
   154b8:	cmp	r2, #0
   154bc:	bne	154a8 <__assert_fail@plt+0x3c54>
   154c0:	b	154d0 <__assert_fail@plt+0x3c7c>
   154c4:	cmp	r2, #0
   154c8:	ldrne	r0, [r2]
   154cc:	popne	{r4, r5, fp, pc}
   154d0:	ldr	r2, [r4, #4]
   154d4:	add	r0, r1, r0, lsl #3
   154d8:	add	r1, r0, #8
   154dc:	cmp	r1, r2
   154e0:	movcs	r0, #0
   154e4:	popcs	{r4, r5, fp, pc}
   154e8:	ldr	r0, [r1], #8
   154ec:	cmp	r0, #0
   154f0:	popne	{r4, r5, fp, pc}
   154f4:	b	154dc <__assert_fail@plt+0x3c88>
   154f8:	bl	11818 <abort@plt>
   154fc:	push	{r4, r5, fp, lr}
   15500:	add	fp, sp, #8
   15504:	ldm	r0, {r5, lr}
   15508:	mov	ip, r0
   1550c:	mov	r0, #0
   15510:	cmp	r5, lr
   15514:	bcs	15560 <__assert_fail@plt+0x3d0c>
   15518:	mov	r0, #0
   1551c:	ldr	r3, [r5]
   15520:	cmp	r3, #0
   15524:	cmpne	r5, #0
   15528:	beq	15554 <__assert_fail@plt+0x3d00>
   1552c:	mov	r3, r5
   15530:	cmp	r0, r2
   15534:	popcs	{r4, r5, fp, pc}
   15538:	ldr	r4, [r3]
   1553c:	str	r4, [r1, r0, lsl #2]
   15540:	add	r0, r0, #1
   15544:	ldr	r3, [r3, #4]
   15548:	cmp	r3, #0
   1554c:	bne	15530 <__assert_fail@plt+0x3cdc>
   15550:	ldr	lr, [ip, #4]
   15554:	add	r5, r5, #8
   15558:	cmp	r5, lr
   1555c:	bcc	1551c <__assert_fail@plt+0x3cc8>
   15560:	pop	{r4, r5, fp, pc}
   15564:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15568:	add	fp, sp, #24
   1556c:	mov	r5, r1
   15570:	ldr	r4, [r0]
   15574:	ldr	r1, [r0, #4]
   15578:	mov	r6, #0
   1557c:	cmp	r4, r1
   15580:	bcs	155f4 <__assert_fail@plt+0x3da0>
   15584:	mov	r9, r2
   15588:	mov	r8, r0
   1558c:	mov	r6, #0
   15590:	b	155d8 <__assert_fail@plt+0x3d84>
   15594:	mov	r1, r9
   15598:	blx	r5
   1559c:	cmp	r0, #0
   155a0:	beq	155f4 <__assert_fail@plt+0x3da0>
   155a4:	mov	r7, r4
   155a8:	ldr	r7, [r7, #4]
   155ac:	add	r6, r6, #1
   155b0:	cmp	r7, #0
   155b4:	beq	155d0 <__assert_fail@plt+0x3d7c>
   155b8:	ldr	r0, [r7]
   155bc:	mov	r1, r9
   155c0:	blx	r5
   155c4:	cmp	r0, #0
   155c8:	bne	155a8 <__assert_fail@plt+0x3d54>
   155cc:	b	155f4 <__assert_fail@plt+0x3da0>
   155d0:	ldr	r1, [r8, #4]
   155d4:	b	155e8 <__assert_fail@plt+0x3d94>
   155d8:	ldr	r0, [r4]
   155dc:	cmp	r0, #0
   155e0:	cmpne	r4, #0
   155e4:	bne	15594 <__assert_fail@plt+0x3d40>
   155e8:	add	r4, r4, #8
   155ec:	cmp	r4, r1
   155f0:	bcc	155d8 <__assert_fail@plt+0x3d84>
   155f4:	mov	r0, r6
   155f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155fc:	ldrb	r2, [r0]
   15600:	cmp	r2, #0
   15604:	moveq	r0, #0
   15608:	bxeq	lr
   1560c:	add	r3, r0, #1
   15610:	mov	r0, #0
   15614:	rsb	r0, r0, r0, lsl #5
   15618:	uxtab	r0, r0, r2
   1561c:	udiv	r2, r0, r1
   15620:	mls	r0, r2, r1, r0
   15624:	ldrb	r2, [r3], #1
   15628:	cmp	r2, #0
   1562c:	bne	15614 <__assert_fail@plt+0x3dc0>
   15630:	bx	lr
   15634:	movw	r1, #47456	; 0xb960
   15638:	movt	r1, #1
   1563c:	vld1.32	{d16-d17}, [r1]!
   15640:	ldr	r1, [r1]
   15644:	vst1.32	{d16-d17}, [r0]!
   15648:	str	r1, [r0]
   1564c:	bx	lr
   15650:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15654:	add	fp, sp, #24
   15658:	movw	r9, #22648	; 0x5878
   1565c:	movw	r5, #22628	; 0x5864
   15660:	cmp	r3, #0
   15664:	mov	r6, r0
   15668:	mov	r0, #40	; 0x28
   1566c:	mov	r7, r1
   15670:	movt	r9, #1
   15674:	movt	r5, #1
   15678:	movne	r9, r3
   1567c:	cmp	r2, #0
   15680:	movne	r5, r2
   15684:	bl	19b58 <__assert_fail@plt+0x8304>
   15688:	mov	r8, #0
   1568c:	cmp	r0, #0
   15690:	beq	1584c <__assert_fail@plt+0x3ff8>
   15694:	mov	r4, r0
   15698:	movw	r0, #47456	; 0xb960
   1569c:	cmp	r7, #0
   156a0:	movt	r0, #1
   156a4:	moveq	r7, r0
   156a8:	cmp	r7, r0
   156ac:	str	r7, [r4, #20]
   156b0:	beq	1572c <__assert_fail@plt+0x3ed8>
   156b4:	vldr	s2, [pc, #408]	; 15854 <__assert_fail@plt+0x4000>
   156b8:	vldr	s0, [r7, #8]
   156bc:	vcmpe.f32	s0, s2
   156c0:	vmrs	APSR_nzcv, fpscr
   156c4:	ble	157d8 <__assert_fail@plt+0x3f84>
   156c8:	vldr	s4, [pc, #392]	; 15858 <__assert_fail@plt+0x4004>
   156cc:	vcmpe.f32	s0, s4
   156d0:	vmrs	APSR_nzcv, fpscr
   156d4:	bpl	157d8 <__assert_fail@plt+0x3f84>
   156d8:	vldr	s4, [pc, #380]	; 1585c <__assert_fail@plt+0x4008>
   156dc:	vldr	s6, [r7, #12]
   156e0:	vcmpe.f32	s6, s4
   156e4:	vmrs	APSR_nzcv, fpscr
   156e8:	ble	157d8 <__assert_fail@plt+0x3f84>
   156ec:	vldr	s4, [r7]
   156f0:	vcmpe.f32	s4, #0.0
   156f4:	vmrs	APSR_nzcv, fpscr
   156f8:	blt	157d8 <__assert_fail@plt+0x3f84>
   156fc:	vadd.f32	s2, s4, s2
   15700:	vcmpe.f32	s2, s0
   15704:	vmrs	APSR_nzcv, fpscr
   15708:	bpl	157d8 <__assert_fail@plt+0x3f84>
   1570c:	vldr	s0, [r7, #4]
   15710:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15714:	vcmpe.f32	s0, s4
   15718:	vmrs	APSR_nzcv, fpscr
   1571c:	bhi	157d8 <__assert_fail@plt+0x3f84>
   15720:	vcmpe.f32	s2, s0
   15724:	vmrs	APSR_nzcv, fpscr
   15728:	bpl	157d8 <__assert_fail@plt+0x3f84>
   1572c:	ldrb	r0, [r7, #16]
   15730:	cmp	r0, #0
   15734:	bne	15760 <__assert_fail@plt+0x3f0c>
   15738:	vldr	s0, [r7, #8]
   1573c:	vldr	s4, [pc, #284]	; 15860 <__assert_fail@plt+0x400c>
   15740:	vmov	s2, r6
   15744:	vcvt.f32.u32	s2, s2
   15748:	vdiv.f32	s2, s2, s0
   1574c:	vcmpe.f32	s2, s4
   15750:	vcvt.u32.f32	s0, s2
   15754:	vmrs	APSR_nzcv, fpscr
   15758:	bge	157e8 <__assert_fail@plt+0x3f94>
   1575c:	vmov	r6, s0
   15760:	cmp	r6, #10
   15764:	movls	r6, #10
   15768:	orr	r0, r6, #1
   1576c:	cmn	r0, #1
   15770:	beq	157e8 <__assert_fail@plt+0x3f94>
   15774:	ldr	r6, [fp, #8]
   15778:	mov	r1, #3
   1577c:	cmp	r0, #10
   15780:	bcc	157b8 <__assert_fail@plt+0x3f64>
   15784:	mov	r1, #3
   15788:	mov	r3, #9
   1578c:	mov	r2, #12
   15790:	udiv	r7, r0, r1
   15794:	mls	r7, r7, r1, r0
   15798:	cmp	r7, #0
   1579c:	beq	157b8 <__assert_fail@plt+0x3f64>
   157a0:	add	r3, r3, r2
   157a4:	add	r2, r2, #8
   157a8:	add	r1, r1, #2
   157ac:	add	r3, r3, #4
   157b0:	cmp	r3, r0
   157b4:	bcc	15790 <__assert_fail@plt+0x3f3c>
   157b8:	udiv	r2, r0, r1
   157bc:	mls	r1, r2, r1, r0
   157c0:	cmp	r1, #0
   157c4:	bne	157e0 <__assert_fail@plt+0x3f8c>
   157c8:	add	r0, r0, #2
   157cc:	cmn	r0, #1
   157d0:	bne	15778 <__assert_fail@plt+0x3f24>
   157d4:	b	157e8 <__assert_fail@plt+0x3f94>
   157d8:	str	r0, [r4, #20]
   157dc:	b	157f0 <__assert_fail@plt+0x3f9c>
   157e0:	cmp	r0, #536870912	; 0x20000000
   157e4:	bcc	15800 <__assert_fail@plt+0x3fac>
   157e8:	mov	r0, #0
   157ec:	str	r0, [r4, #8]
   157f0:	mov	r0, r4
   157f4:	bl	1a198 <__assert_fail@plt+0x8944>
   157f8:	mov	r0, r8
   157fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15800:	cmp	r0, #0
   15804:	str	r0, [r4, #8]
   15808:	beq	157f0 <__assert_fail@plt+0x3f9c>
   1580c:	mov	r1, #8
   15810:	bl	19b04 <__assert_fail@plt+0x82b0>
   15814:	cmp	r0, #0
   15818:	str	r0, [r4]
   1581c:	beq	157f0 <__assert_fail@plt+0x3f9c>
   15820:	mov	r1, #0
   15824:	mov	r8, r4
   15828:	str	r1, [r4, #12]
   1582c:	str	r1, [r4, #16]
   15830:	str	r5, [r4, #24]
   15834:	str	r9, [r4, #28]
   15838:	str	r6, [r4, #32]
   1583c:	str	r1, [r4, #36]	; 0x24
   15840:	ldr	r1, [r4, #8]
   15844:	add	r0, r0, r1, lsl #3
   15848:	str	r0, [r4, #4]
   1584c:	mov	r0, r8
   15850:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15854:	stclcc	12, cr12, [ip, #820]	; 0x334
   15858:	svccc	0x00666666
   1585c:	svccc	0x008ccccd
   15860:	svcmi	0x00800000
   15864:	ror	r2, r0, #3
   15868:	udiv	r2, r2, r1
   1586c:	mul	r1, r2, r1
   15870:	rsb	r0, r1, r0, ror #3
   15874:	bx	lr
   15878:	sub	r0, r0, r1
   1587c:	clz	r0, r0
   15880:	lsr	r0, r0, #5
   15884:	bx	lr
   15888:	push	{r4, r5, r6, r7, fp, lr}
   1588c:	add	fp, sp, #16
   15890:	mov	r4, r0
   15894:	ldr	r5, [r0]
   15898:	ldr	r0, [r0, #4]
   1589c:	cmp	r5, r0
   158a0:	bcs	15938 <__assert_fail@plt+0x40e4>
   158a4:	mov	r6, #0
   158a8:	ldr	r1, [r5]
   158ac:	cmp	r1, #0
   158b0:	beq	1592c <__assert_fail@plt+0x40d8>
   158b4:	ldr	r1, [r4, #32]
   158b8:	ldr	r7, [r5, #4]
   158bc:	cmp	r1, #0
   158c0:	mov	r0, r1
   158c4:	movwne	r0, #1
   158c8:	cmp	r7, #0
   158cc:	beq	15910 <__assert_fail@plt+0x40bc>
   158d0:	tst	r0, #1
   158d4:	beq	158e4 <__assert_fail@plt+0x4090>
   158d8:	ldr	r0, [r7]
   158dc:	blx	r1
   158e0:	ldr	r1, [r4, #32]
   158e4:	str	r6, [r7]
   158e8:	cmp	r1, #0
   158ec:	ldr	r0, [r4, #36]	; 0x24
   158f0:	ldr	r2, [r7, #4]
   158f4:	str	r0, [r7, #4]
   158f8:	mov	r0, r1
   158fc:	str	r7, [r4, #36]	; 0x24
   15900:	mov	r7, r2
   15904:	movwne	r0, #1
   15908:	cmp	r2, #0
   1590c:	bne	158d0 <__assert_fail@plt+0x407c>
   15910:	cmp	r0, #0
   15914:	beq	15920 <__assert_fail@plt+0x40cc>
   15918:	ldr	r0, [r5]
   1591c:	blx	r1
   15920:	str	r6, [r5]
   15924:	str	r6, [r5, #4]
   15928:	ldr	r0, [r4, #4]
   1592c:	add	r5, r5, #8
   15930:	cmp	r5, r0
   15934:	bcc	158a8 <__assert_fail@plt+0x4054>
   15938:	mov	r0, #0
   1593c:	str	r0, [r4, #12]
   15940:	str	r0, [r4, #16]
   15944:	pop	{r4, r5, r6, r7, fp, pc}
   15948:	push	{r4, r5, r6, sl, fp, lr}
   1594c:	add	fp, sp, #16
   15950:	mov	r4, r0
   15954:	ldr	r0, [r0, #32]
   15958:	cmp	r0, #0
   1595c:	ldrne	r0, [r4, #16]
   15960:	cmpne	r0, #0
   15964:	beq	159cc <__assert_fail@plt+0x4178>
   15968:	ldr	r5, [r4]
   1596c:	ldr	r1, [r4, #4]
   15970:	cmp	r5, r1
   15974:	bcc	15988 <__assert_fail@plt+0x4134>
   15978:	b	159cc <__assert_fail@plt+0x4178>
   1597c:	add	r5, r5, #8
   15980:	cmp	r5, r1
   15984:	bcs	159cc <__assert_fail@plt+0x4178>
   15988:	ldr	r0, [r5]
   1598c:	cmp	r0, #0
   15990:	cmpne	r5, #0
   15994:	beq	1597c <__assert_fail@plt+0x4128>
   15998:	ldr	r1, [r4, #32]
   1599c:	blx	r1
   159a0:	ldr	r6, [r5, #4]
   159a4:	cmp	r6, #0
   159a8:	beq	159c4 <__assert_fail@plt+0x4170>
   159ac:	ldr	r1, [r4, #32]
   159b0:	ldr	r0, [r6]
   159b4:	blx	r1
   159b8:	ldr	r6, [r6, #4]
   159bc:	cmp	r6, #0
   159c0:	bne	159ac <__assert_fail@plt+0x4158>
   159c4:	ldr	r1, [r4, #4]
   159c8:	b	1597c <__assert_fail@plt+0x4128>
   159cc:	ldr	r5, [r4]
   159d0:	ldr	r1, [r4, #4]
   159d4:	cmp	r5, r1
   159d8:	bcc	159ec <__assert_fail@plt+0x4198>
   159dc:	b	15a14 <__assert_fail@plt+0x41c0>
   159e0:	add	r5, r5, #8
   159e4:	cmp	r5, r1
   159e8:	bcs	15a14 <__assert_fail@plt+0x41c0>
   159ec:	ldr	r0, [r5, #4]
   159f0:	cmp	r0, #0
   159f4:	beq	159e0 <__assert_fail@plt+0x418c>
   159f8:	ldr	r6, [r0, #4]
   159fc:	bl	1a198 <__assert_fail@plt+0x8944>
   15a00:	cmp	r6, #0
   15a04:	mov	r0, r6
   15a08:	bne	159f8 <__assert_fail@plt+0x41a4>
   15a0c:	ldr	r1, [r4, #4]
   15a10:	b	159e0 <__assert_fail@plt+0x418c>
   15a14:	ldr	r0, [r4, #36]	; 0x24
   15a18:	cmp	r0, #0
   15a1c:	beq	15a34 <__assert_fail@plt+0x41e0>
   15a20:	ldr	r5, [r0, #4]
   15a24:	bl	1a198 <__assert_fail@plt+0x8944>
   15a28:	cmp	r5, #0
   15a2c:	mov	r0, r5
   15a30:	bne	15a20 <__assert_fail@plt+0x41cc>
   15a34:	ldr	r0, [r4]
   15a38:	bl	1a198 <__assert_fail@plt+0x8944>
   15a3c:	mov	r0, r4
   15a40:	pop	{r4, r5, r6, sl, fp, lr}
   15a44:	b	1a198 <__assert_fail@plt+0x8944>
   15a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a4c:	add	fp, sp, #28
   15a50:	sub	sp, sp, #44	; 0x2c
   15a54:	mov	r7, r0
   15a58:	mov	r4, r0
   15a5c:	ldr	r0, [r7, #20]!
   15a60:	ldrb	r2, [r0, #16]
   15a64:	cmp	r2, #0
   15a68:	bne	15a98 <__assert_fail@plt+0x4244>
   15a6c:	vldr	s0, [r0, #8]
   15a70:	vldr	s4, [pc, #560]	; 15ca8 <__assert_fail@plt+0x4454>
   15a74:	vmov	s2, r1
   15a78:	mov	r5, #0
   15a7c:	vcvt.f32.u32	s2, s2
   15a80:	vdiv.f32	s2, s2, s0
   15a84:	vcmpe.f32	s2, s4
   15a88:	vcvt.u32.f32	s0, s2
   15a8c:	vmrs	APSR_nzcv, fpscr
   15a90:	bge	15c98 <__assert_fail@plt+0x4444>
   15a94:	vmov	r1, s0
   15a98:	cmp	r1, #10
   15a9c:	mov	r5, #0
   15aa0:	movls	r1, #10
   15aa4:	orr	r6, r1, #1
   15aa8:	cmn	r6, #1
   15aac:	bne	15ac0 <__assert_fail@plt+0x426c>
   15ab0:	b	15c98 <__assert_fail@plt+0x4444>
   15ab4:	add	r6, r6, #2
   15ab8:	cmn	r6, #1
   15abc:	beq	15c98 <__assert_fail@plt+0x4444>
   15ac0:	mov	r0, #3
   15ac4:	cmp	r6, #10
   15ac8:	bcc	15b00 <__assert_fail@plt+0x42ac>
   15acc:	mov	r0, #3
   15ad0:	mov	r2, #9
   15ad4:	mov	r1, #12
   15ad8:	udiv	r3, r6, r0
   15adc:	mls	r3, r3, r0, r6
   15ae0:	cmp	r3, #0
   15ae4:	beq	15b00 <__assert_fail@plt+0x42ac>
   15ae8:	add	r2, r2, r1
   15aec:	add	r1, r1, #8
   15af0:	add	r0, r0, #2
   15af4:	add	r2, r2, #4
   15af8:	cmp	r2, r6
   15afc:	bcc	15ad8 <__assert_fail@plt+0x4284>
   15b00:	udiv	r1, r6, r0
   15b04:	mls	r0, r1, r0, r6
   15b08:	cmp	r0, #0
   15b0c:	beq	15ab4 <__assert_fail@plt+0x4260>
   15b10:	sub	r0, r6, #1
   15b14:	cmn	r0, #-536870910	; 0xe0000002
   15b18:	bhi	15c98 <__assert_fail@plt+0x4444>
   15b1c:	ldr	r0, [r4, #8]
   15b20:	cmp	r6, r0
   15b24:	bne	15b30 <__assert_fail@plt+0x42dc>
   15b28:	mov	r5, #1
   15b2c:	b	15c98 <__assert_fail@plt+0x4444>
   15b30:	mov	r0, r6
   15b34:	mov	r1, #8
   15b38:	bl	19b04 <__assert_fail@plt+0x82b0>
   15b3c:	cmp	r0, #0
   15b40:	str	r0, [sp, #4]
   15b44:	beq	15c98 <__assert_fail@plt+0x4444>
   15b48:	mov	r1, #0
   15b4c:	add	r0, r0, r6, lsl #3
   15b50:	str	r6, [sp, #12]
   15b54:	add	r5, sp, #4
   15b58:	mov	sl, r4
   15b5c:	mov	r2, #0
   15b60:	str	r1, [sp, #16]
   15b64:	str	r1, [sp, #20]
   15b68:	str	r0, [sp, #8]
   15b6c:	add	r0, r5, #20
   15b70:	mov	r1, r4
   15b74:	vld1.32	{d16-d17}, [r7]
   15b78:	vst1.32	{d16-d17}, [r0]
   15b7c:	ldr	r0, [sl, #36]!	; 0x24
   15b80:	str	r0, [sp, #40]	; 0x28
   15b84:	mov	r0, r5
   15b88:	bl	15cac <__assert_fail@plt+0x4458>
   15b8c:	cmp	r0, #0
   15b90:	beq	15bb8 <__assert_fail@plt+0x4364>
   15b94:	ldr	r0, [r4]
   15b98:	bl	1a198 <__assert_fail@plt+0x8944>
   15b9c:	mov	r0, #36	; 0x24
   15ba0:	vld1.32	{d16-d17}, [r5], r0
   15ba4:	vst1.32	{d16-d17}, [r4], r0
   15ba8:	ldr	r0, [r5]
   15bac:	mov	r5, #1
   15bb0:	str	r0, [r4]
   15bb4:	b	15c98 <__assert_fail@plt+0x4444>
   15bb8:	ldr	r0, [sp, #40]	; 0x28
   15bbc:	str	r0, [sl]
   15bc0:	ldr	r0, [sp, #8]
   15bc4:	ldr	r8, [sp, #4]
   15bc8:	cmp	r8, r0
   15bcc:	str	r0, [sp]
   15bd0:	bcs	15c74 <__assert_fail@plt+0x4420>
   15bd4:	mov	r9, #0
   15bd8:	ldr	r0, [r8]
   15bdc:	cmp	r0, #0
   15be0:	beq	15c64 <__assert_fail@plt+0x4410>
   15be4:	ldr	r6, [r8, #4]
   15be8:	cmp	r6, #0
   15bec:	beq	15c60 <__assert_fail@plt+0x440c>
   15bf0:	ldr	r1, [r4, #8]
   15bf4:	ldr	r5, [r6]
   15bf8:	ldr	r2, [r4, #24]
   15bfc:	mov	r0, r5
   15c00:	blx	r2
   15c04:	ldr	r1, [r4, #8]
   15c08:	cmp	r0, r1
   15c0c:	bcs	15ca4 <__assert_fail@plt+0x4450>
   15c10:	ldr	r3, [r4]
   15c14:	ldr	r2, [r6, #4]
   15c18:	ldr	r7, [r3, r0, lsl #3]
   15c1c:	cmp	r7, #0
   15c20:	beq	15c30 <__assert_fail@plt+0x43dc>
   15c24:	add	r0, r3, r0, lsl #3
   15c28:	add	r0, r0, #4
   15c2c:	b	15c48 <__assert_fail@plt+0x43f4>
   15c30:	str	r5, [r3, r0, lsl #3]
   15c34:	ldr	r0, [r4, #12]
   15c38:	add	r0, r0, #1
   15c3c:	str	r0, [r4, #12]
   15c40:	mov	r0, sl
   15c44:	str	r9, [r6]
   15c48:	ldr	r3, [r0]
   15c4c:	cmp	r2, #0
   15c50:	str	r3, [r6, #4]
   15c54:	str	r6, [r0]
   15c58:	mov	r6, r2
   15c5c:	bne	15bf4 <__assert_fail@plt+0x43a0>
   15c60:	str	r9, [r8, #4]
   15c64:	ldr	r0, [sp]
   15c68:	add	r8, r8, #8
   15c6c:	cmp	r8, r0
   15c70:	bcc	15bd8 <__assert_fail@plt+0x4384>
   15c74:	add	r1, sp, #4
   15c78:	mov	r0, r4
   15c7c:	mov	r2, #0
   15c80:	mov	r5, #0
   15c84:	bl	15cac <__assert_fail@plt+0x4458>
   15c88:	cmp	r0, #0
   15c8c:	beq	15ca4 <__assert_fail@plt+0x4450>
   15c90:	ldr	r0, [sp, #4]
   15c94:	bl	1a198 <__assert_fail@plt+0x8944>
   15c98:	mov	r0, r5
   15c9c:	sub	sp, fp, #28
   15ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ca4:	bl	11818 <abort@plt>
   15ca8:	svcmi	0x00800000
   15cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cb0:	add	fp, sp, #28
   15cb4:	sub	sp, sp, #12
   15cb8:	ldr	sl, [r1]
   15cbc:	str	r1, [sp, #8]
   15cc0:	ldr	r1, [r1, #4]
   15cc4:	mov	r7, r0
   15cc8:	mov	r0, #1
   15ccc:	str	r2, [sp, #4]
   15cd0:	cmp	sl, r1
   15cd4:	bcs	15e30 <__assert_fail@plt+0x45dc>
   15cd8:	add	r8, r7, #36	; 0x24
   15cdc:	mov	r9, #0
   15ce0:	ldr	r4, [sl]
   15ce4:	cmp	r4, #0
   15ce8:	beq	15e18 <__assert_fail@plt+0x45c4>
   15cec:	ldr	r5, [sl, #4]
   15cf0:	cmp	r5, #0
   15cf4:	beq	15d6c <__assert_fail@plt+0x4518>
   15cf8:	ldr	r1, [r7, #8]
   15cfc:	ldr	r4, [r5]
   15d00:	ldr	r2, [r7, #24]
   15d04:	mov	r0, r4
   15d08:	blx	r2
   15d0c:	ldr	r1, [r7, #8]
   15d10:	cmp	r0, r1
   15d14:	bcs	15e44 <__assert_fail@plt+0x45f0>
   15d18:	ldr	r3, [r7]
   15d1c:	ldr	r2, [r5, #4]
   15d20:	ldr	r6, [r3, r0, lsl #3]
   15d24:	cmp	r6, #0
   15d28:	beq	15d38 <__assert_fail@plt+0x44e4>
   15d2c:	add	r0, r3, r0, lsl #3
   15d30:	add	r0, r0, #4
   15d34:	b	15d50 <__assert_fail@plt+0x44fc>
   15d38:	str	r4, [r3, r0, lsl #3]
   15d3c:	ldr	r0, [r7, #12]
   15d40:	add	r0, r0, #1
   15d44:	str	r0, [r7, #12]
   15d48:	mov	r0, r8
   15d4c:	str	r9, [r5]
   15d50:	ldr	r3, [r0]
   15d54:	cmp	r2, #0
   15d58:	str	r3, [r5, #4]
   15d5c:	str	r5, [r0]
   15d60:	mov	r5, r2
   15d64:	bne	15cfc <__assert_fail@plt+0x44a8>
   15d68:	ldr	r4, [sl]
   15d6c:	ldr	r0, [sp, #4]
   15d70:	str	r9, [sl, #4]
   15d74:	cmp	r0, #0
   15d78:	bne	15e18 <__assert_fail@plt+0x45c4>
   15d7c:	ldr	r1, [r7, #8]
   15d80:	ldr	r2, [r7, #24]
   15d84:	mov	r0, r4
   15d88:	blx	r2
   15d8c:	mov	r5, r0
   15d90:	ldr	r0, [r7, #8]
   15d94:	cmp	r5, r0
   15d98:	bcs	15e44 <__assert_fail@plt+0x45f0>
   15d9c:	ldr	r6, [r7]
   15da0:	ldr	r0, [r6, r5, lsl #3]
   15da4:	cmp	r0, #0
   15da8:	beq	15dc8 <__assert_fail@plt+0x4574>
   15dac:	ldr	r0, [r8]
   15db0:	cmp	r0, #0
   15db4:	beq	15ddc <__assert_fail@plt+0x4588>
   15db8:	mov	r1, r0
   15dbc:	ldr	r2, [r1, #4]!
   15dc0:	str	r2, [r8]
   15dc4:	b	15df0 <__assert_fail@plt+0x459c>
   15dc8:	str	r4, [r6, r5, lsl #3]
   15dcc:	ldr	r0, [r7, #12]
   15dd0:	add	r0, r0, #1
   15dd4:	str	r0, [r7, #12]
   15dd8:	b	15e04 <__assert_fail@plt+0x45b0>
   15ddc:	mov	r0, #8
   15de0:	bl	19b58 <__assert_fail@plt+0x8304>
   15de4:	cmp	r0, #0
   15de8:	beq	15e38 <__assert_fail@plt+0x45e4>
   15dec:	add	r1, r0, #4
   15df0:	str	r4, [r0]
   15df4:	add	r2, r6, r5, lsl #3
   15df8:	ldr	r3, [r2, #4]
   15dfc:	str	r3, [r1]
   15e00:	str	r0, [r2, #4]
   15e04:	ldr	r1, [sp, #8]
   15e08:	str	r9, [sl]
   15e0c:	ldr	r0, [r1, #12]
   15e10:	sub	r0, r0, #1
   15e14:	str	r0, [r1, #12]
   15e18:	ldr	r0, [sp, #8]
   15e1c:	add	sl, sl, #8
   15e20:	ldr	r0, [r0, #4]
   15e24:	cmp	sl, r0
   15e28:	bcc	15ce0 <__assert_fail@plt+0x448c>
   15e2c:	mov	r0, #1
   15e30:	sub	sp, fp, #28
   15e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e38:	mov	r0, #0
   15e3c:	sub	sp, fp, #28
   15e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e44:	bl	11818 <abort@plt>
   15e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e4c:	add	fp, sp, #28
   15e50:	sub	sp, sp, #4
   15e54:	cmp	r1, #0
   15e58:	beq	1617c <__assert_fail@plt+0x4928>
   15e5c:	mov	r8, r2
   15e60:	mov	sl, r1
   15e64:	ldr	r1, [r0, #8]
   15e68:	ldr	r2, [r0, #24]
   15e6c:	mov	r4, r0
   15e70:	mov	r0, sl
   15e74:	blx	r2
   15e78:	mov	r7, r0
   15e7c:	ldr	r0, [r4, #8]
   15e80:	cmp	r7, r0
   15e84:	bcs	1617c <__assert_fail@plt+0x4928>
   15e88:	ldr	r5, [r4]
   15e8c:	mov	r9, r5
   15e90:	ldr	r1, [r9, r7, lsl #3]!
   15e94:	cmp	r1, #0
   15e98:	beq	15f24 <__assert_fail@plt+0x46d0>
   15e9c:	cmp	r1, sl
   15ea0:	beq	15ecc <__assert_fail@plt+0x4678>
   15ea4:	ldr	r2, [r4, #28]
   15ea8:	mov	r0, sl
   15eac:	blx	r2
   15eb0:	cmp	r0, #0
   15eb4:	mov	r6, r9
   15eb8:	beq	15ee0 <__assert_fail@plt+0x468c>
   15ebc:	ldr	r0, [r6]
   15ec0:	cmp	r0, #0
   15ec4:	bne	15ed0 <__assert_fail@plt+0x467c>
   15ec8:	b	15f24 <__assert_fail@plt+0x46d0>
   15ecc:	mov	r0, sl
   15ed0:	cmp	r8, #0
   15ed4:	mov	r7, #0
   15ed8:	strne	r0, [r8]
   15edc:	b	16118 <__assert_fail@plt+0x48c4>
   15ee0:	add	r6, r5, r7, lsl #3
   15ee4:	ldr	r0, [r6, #4]!
   15ee8:	cmp	r0, #0
   15eec:	beq	15f24 <__assert_fail@plt+0x46d0>
   15ef0:	ldr	r1, [r0]
   15ef4:	cmp	r1, sl
   15ef8:	beq	15f18 <__assert_fail@plt+0x46c4>
   15efc:	ldr	r2, [r4, #28]
   15f00:	mov	r0, sl
   15f04:	blx	r2
   15f08:	ldr	r6, [r6]
   15f0c:	cmp	r0, #0
   15f10:	beq	15ee4 <__assert_fail@plt+0x4690>
   15f14:	b	15ebc <__assert_fail@plt+0x4668>
   15f18:	mov	r0, sl
   15f1c:	cmp	r0, #0
   15f20:	bne	15ed0 <__assert_fail@plt+0x467c>
   15f24:	vldr	s0, [r4, #8]
   15f28:	vldr	s2, [r4, #12]
   15f2c:	ldr	r0, [r4, #20]
   15f30:	vcvt.f32.u32	s0, s0
   15f34:	vcvt.f32.u32	s4, s2
   15f38:	vldr	s2, [r0, #8]
   15f3c:	vmul.f32	s6, s2, s0
   15f40:	vcmpe.f32	s6, s4
   15f44:	vmrs	APSR_nzcv, fpscr
   15f48:	bpl	1609c <__assert_fail@plt+0x4848>
   15f4c:	movw	r1, #47456	; 0xb960
   15f50:	movt	r1, #1
   15f54:	cmp	r0, r1
   15f58:	beq	15fe4 <__assert_fail@plt+0x4790>
   15f5c:	vldr	s6, [pc, #540]	; 16180 <__assert_fail@plt+0x492c>
   15f60:	vcmpe.f32	s2, s6
   15f64:	vmrs	APSR_nzcv, fpscr
   15f68:	ble	15fd0 <__assert_fail@plt+0x477c>
   15f6c:	vldr	s8, [pc, #528]	; 16184 <__assert_fail@plt+0x4930>
   15f70:	vcmpe.f32	s2, s8
   15f74:	vmrs	APSR_nzcv, fpscr
   15f78:	bpl	15fd0 <__assert_fail@plt+0x477c>
   15f7c:	vldr	s8, [pc, #516]	; 16188 <__assert_fail@plt+0x4934>
   15f80:	vldr	s10, [r0, #12]
   15f84:	vcmpe.f32	s10, s8
   15f88:	vmrs	APSR_nzcv, fpscr
   15f8c:	ble	15fd0 <__assert_fail@plt+0x477c>
   15f90:	vldr	s8, [r0]
   15f94:	vcmpe.f32	s8, #0.0
   15f98:	vmrs	APSR_nzcv, fpscr
   15f9c:	blt	15fd0 <__assert_fail@plt+0x477c>
   15fa0:	vadd.f32	s6, s8, s6
   15fa4:	vcmpe.f32	s6, s2
   15fa8:	vmrs	APSR_nzcv, fpscr
   15fac:	bpl	15fd0 <__assert_fail@plt+0x477c>
   15fb0:	vldr	s8, [r0, #4]
   15fb4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   15fb8:	vcmpe.f32	s8, s10
   15fbc:	vmrs	APSR_nzcv, fpscr
   15fc0:	bhi	15fd0 <__assert_fail@plt+0x477c>
   15fc4:	vcmpe.f32	s6, s8
   15fc8:	vmrs	APSR_nzcv, fpscr
   15fcc:	bmi	15fe8 <__assert_fail@plt+0x4794>
   15fd0:	vldr	s2, [pc, #436]	; 1618c <__assert_fail@plt+0x4938>
   15fd4:	movw	r0, #47456	; 0xb960
   15fd8:	movt	r0, #1
   15fdc:	str	r0, [r4, #20]
   15fe0:	b	15fe8 <__assert_fail@plt+0x4794>
   15fe4:	mov	r0, r1
   15fe8:	vmul.f32	s6, s2, s0
   15fec:	vcmpe.f32	s6, s4
   15ff0:	vmrs	APSR_nzcv, fpscr
   15ff4:	bpl	1609c <__assert_fail@plt+0x4848>
   15ff8:	vldr	s4, [r0, #12]
   15ffc:	ldrb	r0, [r0, #16]
   16000:	mvn	r7, #0
   16004:	vmul.f32	s0, s4, s0
   16008:	vldr	s4, [pc, #384]	; 16190 <__assert_fail@plt+0x493c>
   1600c:	cmp	r0, #0
   16010:	vmul.f32	s2, s2, s0
   16014:	vseleq.f32	s0, s2, s0
   16018:	vcmpe.f32	s0, s4
   1601c:	vmrs	APSR_nzcv, fpscr
   16020:	bge	16118 <__assert_fail@plt+0x48c4>
   16024:	vcvt.u32.f32	s0, s0
   16028:	mov	r0, r4
   1602c:	vmov	r1, s0
   16030:	bl	15a48 <__assert_fail@plt+0x41f4>
   16034:	cmp	r0, #0
   16038:	beq	16118 <__assert_fail@plt+0x48c4>
   1603c:	ldr	r1, [r4, #8]
   16040:	ldr	r2, [r4, #24]
   16044:	mov	r0, sl
   16048:	blx	r2
   1604c:	mov	r7, r0
   16050:	ldr	r0, [r4, #8]
   16054:	cmp	r7, r0
   16058:	bcs	1617c <__assert_fail@plt+0x4928>
   1605c:	ldr	r5, [r4]
   16060:	mov	r9, r5
   16064:	ldr	r1, [r9, r7, lsl #3]!
   16068:	cmp	r1, #0
   1606c:	beq	160c4 <__assert_fail@plt+0x4870>
   16070:	cmp	r1, sl
   16074:	mov	r0, sl
   16078:	beq	16094 <__assert_fail@plt+0x4840>
   1607c:	ldr	r2, [r4, #28]
   16080:	mov	r0, sl
   16084:	blx	r2
   16088:	cmp	r0, #0
   1608c:	beq	1612c <__assert_fail@plt+0x48d8>
   16090:	ldr	r0, [r9]
   16094:	cmp	r0, #0
   16098:	bne	1617c <__assert_fail@plt+0x4928>
   1609c:	ldr	r0, [r9]
   160a0:	cmp	r0, #0
   160a4:	beq	160c4 <__assert_fail@plt+0x4870>
   160a8:	ldr	r0, [r4, #36]	; 0x24
   160ac:	cmp	r0, #0
   160b0:	beq	160e4 <__assert_fail@plt+0x4890>
   160b4:	mov	r1, r0
   160b8:	ldr	r2, [r1, #4]!
   160bc:	str	r2, [r4, #36]	; 0x24
   160c0:	b	160f8 <__assert_fail@plt+0x48a4>
   160c4:	str	sl, [r9]
   160c8:	ldr	r0, [r4, #12]
   160cc:	ldr	r1, [r4, #16]
   160d0:	add	r0, r0, #1
   160d4:	add	r1, r1, #1
   160d8:	str	r0, [r4, #12]
   160dc:	str	r1, [r4, #16]
   160e0:	b	16114 <__assert_fail@plt+0x48c0>
   160e4:	mov	r0, #8
   160e8:	bl	19b58 <__assert_fail@plt+0x8304>
   160ec:	cmp	r0, #0
   160f0:	beq	16124 <__assert_fail@plt+0x48d0>
   160f4:	add	r1, r0, #4
   160f8:	str	sl, [r0]
   160fc:	ldr	r2, [r9, #4]
   16100:	str	r2, [r1]
   16104:	str	r0, [r9, #4]
   16108:	ldr	r0, [r4, #16]
   1610c:	add	r0, r0, #1
   16110:	str	r0, [r4, #16]
   16114:	mov	r7, #1
   16118:	mov	r0, r7
   1611c:	sub	sp, fp, #28
   16120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16124:	mvn	r7, #0
   16128:	b	16118 <__assert_fail@plt+0x48c4>
   1612c:	add	r6, r5, r7, lsl #3
   16130:	ldr	r0, [r6, #4]!
   16134:	cmp	r0, #0
   16138:	beq	1609c <__assert_fail@plt+0x4848>
   1613c:	ldr	r1, [r0]
   16140:	cmp	r1, sl
   16144:	beq	16170 <__assert_fail@plt+0x491c>
   16148:	ldr	r2, [r4, #28]
   1614c:	mov	r0, sl
   16150:	blx	r2
   16154:	ldr	r6, [r6]
   16158:	cmp	r0, #0
   1615c:	beq	16130 <__assert_fail@plt+0x48dc>
   16160:	ldr	r0, [r6]
   16164:	cmp	r0, #0
   16168:	beq	1609c <__assert_fail@plt+0x4848>
   1616c:	b	1617c <__assert_fail@plt+0x4928>
   16170:	mov	r0, sl
   16174:	cmp	r0, #0
   16178:	beq	1609c <__assert_fail@plt+0x4848>
   1617c:	bl	11818 <abort@plt>
   16180:	stclcc	12, cr12, [ip, #820]	; 0x334
   16184:	svccc	0x00666666
   16188:	svccc	0x008ccccd
   1618c:	svccc	0x004ccccd
   16190:	svcmi	0x00800000
   16194:	push	{r4, sl, fp, lr}
   16198:	add	fp, sp, #8
   1619c:	sub	sp, sp, #8
   161a0:	add	r2, sp, #4
   161a4:	mov	r4, r1
   161a8:	bl	15e48 <__assert_fail@plt+0x45f4>
   161ac:	cmn	r0, #1
   161b0:	beq	161c4 <__assert_fail@plt+0x4970>
   161b4:	ldr	r1, [sp, #4]
   161b8:	cmp	r0, #0
   161bc:	moveq	r4, r1
   161c0:	b	161c8 <__assert_fail@plt+0x4974>
   161c4:	mov	r4, #0
   161c8:	mov	r0, r4
   161cc:	sub	sp, fp, #8
   161d0:	pop	{r4, sl, fp, pc}
   161d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   161d8:	add	fp, sp, #24
   161dc:	mov	r9, r1
   161e0:	ldr	r1, [r0, #8]
   161e4:	ldr	r2, [r0, #24]
   161e8:	mov	r5, r0
   161ec:	mov	r0, r9
   161f0:	blx	r2
   161f4:	mov	r7, r0
   161f8:	ldr	r0, [r5, #8]
   161fc:	cmp	r7, r0
   16200:	bcs	16460 <__assert_fail@plt+0x4c0c>
   16204:	ldr	r6, [r5]
   16208:	mov	r8, #0
   1620c:	mov	r4, r6
   16210:	ldr	r1, [r4, r7, lsl #3]!
   16214:	cmp	r1, #0
   16218:	beq	162cc <__assert_fail@plt+0x4a78>
   1621c:	cmp	r1, r9
   16220:	beq	1623c <__assert_fail@plt+0x49e8>
   16224:	ldr	r2, [r5, #28]
   16228:	mov	r0, r9
   1622c:	blx	r2
   16230:	cmp	r0, #0
   16234:	beq	16274 <__assert_fail@plt+0x4a20>
   16238:	ldr	r9, [r4]
   1623c:	add	r0, r6, r7, lsl #3
   16240:	ldr	r0, [r0, #4]
   16244:	cmp	r0, #0
   16248:	beq	162bc <__assert_fail@plt+0x4a68>
   1624c:	ldm	r0, {r1, r2}
   16250:	stm	r4, {r1, r2}
   16254:	mov	r1, #0
   16258:	str	r1, [r0]
   1625c:	ldr	r1, [r5, #36]	; 0x24
   16260:	str	r1, [r0, #4]
   16264:	str	r0, [r5, #36]	; 0x24
   16268:	cmp	r9, #0
   1626c:	bne	16304 <__assert_fail@plt+0x4ab0>
   16270:	b	162cc <__assert_fail@plt+0x4a78>
   16274:	add	r7, r6, r7, lsl #3
   16278:	ldr	r0, [r7, #4]!
   1627c:	cmp	r0, #0
   16280:	beq	162cc <__assert_fail@plt+0x4a78>
   16284:	ldr	r1, [r0]
   16288:	cmp	r1, r9
   1628c:	beq	162d4 <__assert_fail@plt+0x4a80>
   16290:	ldr	r2, [r5, #28]
   16294:	mov	r0, r9
   16298:	blx	r2
   1629c:	ldr	r1, [r7]
   162a0:	cmp	r0, #0
   162a4:	bne	162dc <__assert_fail@plt+0x4a88>
   162a8:	ldr	r0, [r1, #4]!
   162ac:	cmp	r0, #0
   162b0:	mov	r7, r1
   162b4:	bne	16284 <__assert_fail@plt+0x4a30>
   162b8:	b	162cc <__assert_fail@plt+0x4a78>
   162bc:	mov	r0, #0
   162c0:	str	r0, [r4]
   162c4:	cmp	r9, #0
   162c8:	bne	16304 <__assert_fail@plt+0x4ab0>
   162cc:	mov	r0, r8
   162d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   162d4:	mov	r1, r0
   162d8:	b	162e0 <__assert_fail@plt+0x4a8c>
   162dc:	ldr	r9, [r1]
   162e0:	ldr	r0, [r1, #4]
   162e4:	str	r0, [r7]
   162e8:	mov	r0, #0
   162ec:	str	r0, [r1]
   162f0:	ldr	r0, [r5, #36]	; 0x24
   162f4:	str	r0, [r1, #4]
   162f8:	str	r1, [r5, #36]	; 0x24
   162fc:	cmp	r9, #0
   16300:	beq	162cc <__assert_fail@plt+0x4a78>
   16304:	ldr	r0, [r5, #16]
   16308:	sub	r0, r0, #1
   1630c:	str	r0, [r5, #16]
   16310:	ldr	r0, [r4]
   16314:	cmp	r0, #0
   16318:	bne	16420 <__assert_fail@plt+0x4bcc>
   1631c:	ldr	r0, [r5, #12]
   16320:	vldr	s0, [r5, #8]
   16324:	sub	r1, r0, #1
   16328:	str	r1, [r5, #12]
   1632c:	vmov	s2, r1
   16330:	ldr	r0, [r5, #20]
   16334:	vcvt.f32.u32	s0, s0
   16338:	vcvt.f32.u32	s2, s2
   1633c:	vldr	s4, [r0]
   16340:	vmul.f32	s6, s4, s0
   16344:	vcmpe.f32	s6, s2
   16348:	vmrs	APSR_nzcv, fpscr
   1634c:	ble	16420 <__assert_fail@plt+0x4bcc>
   16350:	movw	r1, #47456	; 0xb960
   16354:	movt	r1, #1
   16358:	cmp	r0, r1
   1635c:	beq	163b4 <__assert_fail@plt+0x4b60>
   16360:	vldr	s8, [pc, #252]	; 16464 <__assert_fail@plt+0x4c10>
   16364:	vldr	s6, [r0, #8]
   16368:	vcmpe.f32	s6, s8
   1636c:	vmrs	APSR_nzcv, fpscr
   16370:	ble	163a0 <__assert_fail@plt+0x4b4c>
   16374:	vldr	s10, [pc, #236]	; 16468 <__assert_fail@plt+0x4c14>
   16378:	vcmpe.f32	s6, s10
   1637c:	vmrs	APSR_nzcv, fpscr
   16380:	bpl	163a0 <__assert_fail@plt+0x4b4c>
   16384:	vcmpe.f32	s4, #0.0
   16388:	vmrs	APSR_nzcv, fpscr
   1638c:	vldrge	s10, [r0, #12]
   16390:	vldrge	s12, [pc, #212]	; 1646c <__assert_fail@plt+0x4c18>
   16394:	vcmpege.f32	s10, s12
   16398:	vmrsge	APSR_nzcv, fpscr
   1639c:	bgt	1642c <__assert_fail@plt+0x4bd8>
   163a0:	vldr	s4, [pc, #200]	; 16470 <__assert_fail@plt+0x4c1c>
   163a4:	movw	r0, #47456	; 0xb960
   163a8:	movt	r0, #1
   163ac:	str	r0, [r5, #20]
   163b0:	b	163b8 <__assert_fail@plt+0x4b64>
   163b4:	mov	r0, r1
   163b8:	vmul.f32	s4, s4, s0
   163bc:	vcmpe.f32	s4, s2
   163c0:	vmrs	APSR_nzcv, fpscr
   163c4:	ble	16420 <__assert_fail@plt+0x4bcc>
   163c8:	ldrb	r1, [r0, #16]
   163cc:	vldr	s2, [r0, #4]
   163d0:	cmp	r1, #0
   163d4:	vmul.f32	s0, s2, s0
   163d8:	vldreq	s2, [r0, #8]
   163dc:	mov	r0, r5
   163e0:	vmuleq.f32	s0, s0, s2
   163e4:	vcvt.u32.f32	s0, s0
   163e8:	vmov	r1, s0
   163ec:	bl	15a48 <__assert_fail@plt+0x41f4>
   163f0:	cmp	r0, #0
   163f4:	bne	16420 <__assert_fail@plt+0x4bcc>
   163f8:	ldr	r0, [r5, #36]	; 0x24
   163fc:	cmp	r0, #0
   16400:	beq	16418 <__assert_fail@plt+0x4bc4>
   16404:	ldr	r4, [r0, #4]
   16408:	bl	1a198 <__assert_fail@plt+0x8944>
   1640c:	cmp	r4, #0
   16410:	mov	r0, r4
   16414:	bne	16404 <__assert_fail@plt+0x4bb0>
   16418:	mov	r0, #0
   1641c:	str	r0, [r5, #36]	; 0x24
   16420:	mov	r8, r9
   16424:	mov	r0, r8
   16428:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1642c:	vadd.f32	s8, s4, s8
   16430:	vcmpe.f32	s8, s6
   16434:	vmrs	APSR_nzcv, fpscr
   16438:	bpl	163a0 <__assert_fail@plt+0x4b4c>
   1643c:	vldr	s6, [r0, #4]
   16440:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16444:	vcmpe.f32	s6, s10
   16448:	vmrs	APSR_nzcv, fpscr
   1644c:	bhi	163a0 <__assert_fail@plt+0x4b4c>
   16450:	vcmpe.f32	s8, s6
   16454:	vmrs	APSR_nzcv, fpscr
   16458:	bmi	163b8 <__assert_fail@plt+0x4b64>
   1645c:	b	163a0 <__assert_fail@plt+0x4b4c>
   16460:	bl	11818 <abort@plt>
   16464:	stclcc	12, cr12, [ip, #820]	; 0x334
   16468:	svccc	0x00666666
   1646c:	svccc	0x008ccccd
   16470:	andeq	r0, r0, r0
   16474:	b	161d4 <__assert_fail@plt+0x4980>
   16478:	mov	r3, #1
   1647c:	mov	r2, #0
   16480:	vdup.32	q8, r1
   16484:	strb	r3, [r0, #28]
   16488:	str	r2, [r0, #20]
   1648c:	str	r2, [r0, #24]
   16490:	vst1.32	{d16-d17}, [r0]!
   16494:	str	r1, [r0]
   16498:	bx	lr
   1649c:	ldrb	r0, [r0, #28]
   164a0:	bx	lr
   164a4:	push	{fp, lr}
   164a8:	mov	fp, sp
   164ac:	ldrb	r3, [r0, #28]
   164b0:	ldr	r2, [r0, #20]
   164b4:	eor	lr, r3, #1
   164b8:	add	r2, r2, lr
   164bc:	and	r3, r2, #3
   164c0:	ldr	ip, [r0, r3, lsl #2]
   164c4:	str	r1, [r0, r3, lsl #2]
   164c8:	str	r3, [r0, #20]
   164cc:	ldr	r1, [r0, #24]
   164d0:	cmp	r3, r1
   164d4:	addeq	r1, r2, lr
   164d8:	andeq	r1, r1, #3
   164dc:	streq	r1, [r0, #24]
   164e0:	mov	r1, #0
   164e4:	strb	r1, [r0, #28]
   164e8:	mov	r0, ip
   164ec:	pop	{fp, pc}
   164f0:	ldrb	r1, [r0, #28]
   164f4:	cmp	r1, #0
   164f8:	bne	1653c <__assert_fail@plt+0x4ce8>
   164fc:	ldr	r3, [r0, #20]
   16500:	ldr	r2, [r0, #16]
   16504:	ldr	r1, [r0, r3, lsl #2]
   16508:	str	r2, [r0, r3, lsl #2]
   1650c:	ldr	r2, [r0, #20]
   16510:	ldr	r3, [r0, #24]
   16514:	cmp	r2, r3
   16518:	moveq	r2, #1
   1651c:	strbeq	r2, [r0, #28]
   16520:	moveq	r0, r1
   16524:	bxeq	lr
   16528:	sub	r2, r2, #1
   1652c:	and	r2, r2, #3
   16530:	str	r2, [r0, #20]
   16534:	mov	r0, r1
   16538:	bx	lr
   1653c:	push	{fp, lr}
   16540:	mov	fp, sp
   16544:	bl	11818 <abort@plt>
   16548:	sub	sp, sp, #4
   1654c:	push	{fp, lr}
   16550:	mov	fp, sp
   16554:	sub	sp, sp, #4
   16558:	str	r3, [fp, #8]
   1655c:	mov	r3, #0
   16560:	tst	r2, #64	; 0x40
   16564:	addne	r3, fp, #8
   16568:	addne	r3, r3, #4
   1656c:	strne	r3, [sp]
   16570:	ldrne	r3, [fp, #8]
   16574:	bl	116bc <openat64@plt>
   16578:	bl	18de8 <__assert_fail@plt+0x7594>
   1657c:	mov	sp, fp
   16580:	pop	{fp, lr}
   16584:	add	sp, sp, #4
   16588:	bx	lr
   1658c:	push	{r4, r5, r6, sl, fp, lr}
   16590:	add	fp, sp, #16
   16594:	orr	r2, r2, #18688	; 0x4900
   16598:	mov	r4, r3
   1659c:	orr	r2, r2, #524288	; 0x80000
   165a0:	bl	16548 <__assert_fail@plt+0x4cf4>
   165a4:	mov	r5, r0
   165a8:	mov	r0, #0
   165ac:	cmp	r5, #0
   165b0:	poplt	{r4, r5, r6, sl, fp, pc}
   165b4:	mov	r0, r5
   165b8:	bl	117a0 <fdopendir@plt>
   165bc:	cmp	r0, #0
   165c0:	strne	r5, [r4]
   165c4:	popne	{r4, r5, r6, sl, fp, pc}
   165c8:	bl	116d4 <__errno_location@plt>
   165cc:	ldr	r6, [r0]
   165d0:	mov	r4, r0
   165d4:	mov	r0, r5
   165d8:	bl	11824 <close@plt>
   165dc:	mov	r0, #0
   165e0:	str	r6, [r4]
   165e4:	pop	{r4, r5, r6, sl, fp, pc}
   165e8:	push	{r4, r5, fp, lr}
   165ec:	add	fp, sp, #8
   165f0:	cmp	r0, #0
   165f4:	beq	16688 <__assert_fail@plt+0x4e34>
   165f8:	mov	r1, #47	; 0x2f
   165fc:	mov	r4, r0
   16600:	bl	1177c <strrchr@plt>
   16604:	cmp	r0, #0
   16608:	mov	r5, r4
   1660c:	addne	r5, r0, #1
   16610:	sub	r0, r5, r4
   16614:	cmp	r0, #7
   16618:	blt	1666c <__assert_fail@plt+0x4e18>
   1661c:	movw	r1, #47532	; 0xb9ac
   16620:	sub	r0, r5, #7
   16624:	mov	r2, #7
   16628:	movt	r1, #1
   1662c:	bl	1180c <strncmp@plt>
   16630:	cmp	r0, #0
   16634:	bne	1666c <__assert_fail@plt+0x4e18>
   16638:	movw	r1, #47540	; 0xb9b4
   1663c:	mov	r0, r5
   16640:	mov	r2, #3
   16644:	movt	r1, #1
   16648:	bl	1180c <strncmp@plt>
   1664c:	cmp	r0, #0
   16650:	beq	1665c <__assert_fail@plt+0x4e08>
   16654:	mov	r4, r5
   16658:	b	1666c <__assert_fail@plt+0x4e18>
   1665c:	movw	r0, #53672	; 0xd1a8
   16660:	add	r4, r5, #3
   16664:	movt	r0, #2
   16668:	str	r4, [r0]
   1666c:	movw	r0, #53676	; 0xd1ac
   16670:	movt	r0, #2
   16674:	str	r4, [r0]
   16678:	movw	r0, #53764	; 0xd204
   1667c:	movt	r0, #2
   16680:	str	r4, [r0]
   16684:	pop	{r4, r5, fp, pc}
   16688:	movw	r0, #53688	; 0xd1b8
   1668c:	mov	r1, #55	; 0x37
   16690:	mov	r2, #1
   16694:	movt	r0, #2
   16698:	ldr	r3, [r0]
   1669c:	movw	r0, #47476	; 0xb974
   166a0:	movt	r0, #1
   166a4:	bl	115b4 <fwrite@plt>
   166a8:	bl	11818 <abort@plt>
   166ac:	push	{r4, r5, r6, sl, fp, lr}
   166b0:	add	fp, sp, #16
   166b4:	mov	r4, r0
   166b8:	movw	r0, #53768	; 0xd208
   166bc:	movt	r0, #2
   166c0:	cmp	r4, #0
   166c4:	moveq	r4, r0
   166c8:	bl	116d4 <__errno_location@plt>
   166cc:	ldr	r6, [r0]
   166d0:	mov	r5, r0
   166d4:	mov	r0, r4
   166d8:	mov	r1, #48	; 0x30
   166dc:	bl	19944 <__assert_fail@plt+0x80f0>
   166e0:	str	r6, [r5]
   166e4:	pop	{r4, r5, r6, sl, fp, pc}
   166e8:	movw	r1, #53768	; 0xd208
   166ec:	cmp	r0, #0
   166f0:	movt	r1, #2
   166f4:	movne	r1, r0
   166f8:	ldr	r0, [r1]
   166fc:	bx	lr
   16700:	movw	r2, #53768	; 0xd208
   16704:	cmp	r0, #0
   16708:	movt	r2, #2
   1670c:	movne	r2, r0
   16710:	str	r1, [r2]
   16714:	bx	lr
   16718:	movw	r3, #53768	; 0xd208
   1671c:	cmp	r0, #0
   16720:	movt	r3, #2
   16724:	movne	r3, r0
   16728:	ubfx	r0, r1, #5, #3
   1672c:	and	r1, r1, #31
   16730:	add	r0, r3, r0, lsl #2
   16734:	ldr	r3, [r0, #8]
   16738:	eor	r2, r2, r3, lsr r1
   1673c:	and	r2, r2, #1
   16740:	eor	r2, r3, r2, lsl r1
   16744:	str	r2, [r0, #8]
   16748:	mov	r0, #1
   1674c:	and	r0, r0, r3, lsr r1
   16750:	bx	lr
   16754:	movw	r2, #53768	; 0xd208
   16758:	cmp	r0, #0
   1675c:	movt	r2, #2
   16760:	movne	r2, r0
   16764:	ldr	r0, [r2, #4]
   16768:	str	r1, [r2, #4]
   1676c:	bx	lr
   16770:	movw	r3, #53768	; 0xd208
   16774:	cmp	r0, #0
   16778:	movt	r3, #2
   1677c:	movne	r3, r0
   16780:	cmp	r1, #0
   16784:	mov	r0, #10
   16788:	cmpne	r2, #0
   1678c:	str	r0, [r3]
   16790:	bne	167a0 <__assert_fail@plt+0x4f4c>
   16794:	push	{fp, lr}
   16798:	mov	fp, sp
   1679c:	bl	11818 <abort@plt>
   167a0:	str	r1, [r3, #40]	; 0x28
   167a4:	str	r2, [r3, #44]	; 0x2c
   167a8:	bx	lr
   167ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167b0:	add	fp, sp, #28
   167b4:	sub	sp, sp, #20
   167b8:	mov	r7, r0
   167bc:	ldr	r0, [fp, #8]
   167c0:	movw	r5, #53768	; 0xd208
   167c4:	mov	r8, r3
   167c8:	mov	r9, r2
   167cc:	mov	sl, r1
   167d0:	movt	r5, #2
   167d4:	cmp	r0, #0
   167d8:	movne	r5, r0
   167dc:	bl	116d4 <__errno_location@plt>
   167e0:	mov	r4, r0
   167e4:	ldm	r5, {r0, r1}
   167e8:	ldr	r2, [r5, #40]	; 0x28
   167ec:	ldr	r3, [r5, #44]	; 0x2c
   167f0:	add	r5, r5, #8
   167f4:	ldr	r6, [r4]
   167f8:	stm	sp, {r0, r1, r5}
   167fc:	str	r2, [sp, #12]
   16800:	str	r3, [sp, #16]
   16804:	mov	r0, r7
   16808:	mov	r1, sl
   1680c:	mov	r2, r9
   16810:	mov	r3, r8
   16814:	bl	16824 <__assert_fail@plt+0x4fd0>
   16818:	str	r6, [r4]
   1681c:	sub	sp, fp, #28
   16820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16828:	add	fp, sp, #28
   1682c:	sub	sp, sp, #156	; 0x9c
   16830:	str	r0, [sp, #80]	; 0x50
   16834:	ldr	r0, [fp, #12]
   16838:	mov	r6, r1
   1683c:	mov	r9, r3
   16840:	str	r2, [fp, #-84]	; 0xffffffac
   16844:	and	r1, r0, #4
   16848:	str	r1, [sp, #32]
   1684c:	and	r1, r0, #1
   16850:	str	r1, [sp, #36]	; 0x24
   16854:	ubfx	r4, r0, #1, #1
   16858:	bl	115cc <__ctype_get_mb_cur_max@plt>
   1685c:	str	r0, [sp, #40]	; 0x28
   16860:	ldr	r0, [fp, #24]
   16864:	ldr	r7, [fp, #8]
   16868:	mov	r1, #0
   1686c:	mov	r5, #1
   16870:	str	r1, [fp, #-56]	; 0xffffffc8
   16874:	mov	r1, #0
   16878:	str	r1, [sp, #60]	; 0x3c
   1687c:	str	r0, [sp, #76]	; 0x4c
   16880:	ldr	r0, [fp, #20]
   16884:	str	r0, [sp, #72]	; 0x48
   16888:	mov	r0, #0
   1688c:	str	r0, [sp, #56]	; 0x38
   16890:	mov	r0, #0
   16894:	str	r0, [sp, #92]	; 0x5c
   16898:	mov	r0, #0
   1689c:	str	r0, [fp, #-76]	; 0xffffffb4
   168a0:	mov	r0, #0
   168a4:	cmp	r7, #10
   168a8:	bhi	17828 <__assert_fail@plt+0x5fd4>
   168ac:	add	r1, pc, #28
   168b0:	mov	sl, r6
   168b4:	ldr	r6, [sp, #80]	; 0x50
   168b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   168bc:	mov	r8, #0
   168c0:	mov	r2, #1
   168c4:	mov	r3, #0
   168c8:	mov	lr, r9
   168cc:	ldr	pc, [r1, r7, lsl #2]
   168d0:			; <UNDEFINED> instruction: 0x000169b4
   168d4:	andeq	r6, r1, r0, ror #19
   168d8:	andeq	r6, r1, r4, lsr #19
   168dc:	muleq	r1, ip, r9
   168e0:	ldrdeq	r6, [r1], -r4
   168e4:	andeq	r6, r1, r8, lsr #20
   168e8:	andeq	r6, r1, r4, asr #19
   168ec:	andeq	r6, r1, r4, lsl #21
   168f0:	strdeq	r6, [r1], -ip
   168f4:	strdeq	r6, [r1], -ip
   168f8:	andeq	r6, r1, r4, lsr #18
   168fc:	movw	r0, #47622	; 0xba06
   16900:	mov	r1, r7
   16904:	movt	r0, #1
   16908:	bl	18234 <__assert_fail@plt+0x69e0>
   1690c:	str	r0, [sp, #72]	; 0x48
   16910:	movw	r0, #48969	; 0xbf49
   16914:	mov	r1, r7
   16918:	movt	r0, #1
   1691c:	bl	18234 <__assert_fail@plt+0x69e0>
   16920:	str	r0, [sp, #76]	; 0x4c
   16924:	str	r5, [fp, #-48]	; 0xffffffd0
   16928:	mov	r8, #0
   1692c:	mov	r5, r7
   16930:	tst	r4, #1
   16934:	bne	1696c <__assert_fail@plt+0x5118>
   16938:	ldr	r0, [sp, #72]	; 0x48
   1693c:	ldrb	r0, [r0]
   16940:	cmp	r0, #0
   16944:	beq	1696c <__assert_fail@plt+0x5118>
   16948:	ldr	r1, [sp, #72]	; 0x48
   1694c:	mov	r8, #0
   16950:	add	r1, r1, #1
   16954:	cmp	r8, sl
   16958:	strbcc	r0, [r6, r8]
   1695c:	ldrb	r0, [r1, r8]
   16960:	add	r8, r8, #1
   16964:	cmp	r0, #0
   16968:	bne	16954 <__assert_fail@plt+0x5100>
   1696c:	ldr	r7, [sp, #76]	; 0x4c
   16970:	mov	r0, r7
   16974:	bl	116b0 <strlen@plt>
   16978:	str	r7, [sp, #92]	; 0x5c
   1697c:	mov	r7, r5
   16980:	ldr	ip, [fp, #-84]	; 0xffffffac
   16984:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16988:	str	r0, [fp, #-76]	; 0xffffffb4
   1698c:	mov	r2, #1
   16990:	mov	r3, r4
   16994:	mov	lr, r9
   16998:	b	16a84 <__assert_fail@plt+0x5230>
   1699c:	mov	r0, #1
   169a0:	b	169e0 <__assert_fail@plt+0x518c>
   169a4:	tst	r4, #1
   169a8:	bne	169e0 <__assert_fail@plt+0x518c>
   169ac:	mov	r2, r0
   169b0:	b	16a08 <__assert_fail@plt+0x51b4>
   169b4:	mov	r7, #0
   169b8:	mov	r8, #0
   169bc:	mov	r2, r0
   169c0:	b	16a80 <__assert_fail@plt+0x522c>
   169c4:	mov	r0, #1
   169c8:	mov	r8, #0
   169cc:	mov	r7, #5
   169d0:	b	16a3c <__assert_fail@plt+0x51e8>
   169d4:	mov	r2, #1
   169d8:	tst	r4, #1
   169dc:	beq	16a08 <__assert_fail@plt+0x51b4>
   169e0:	mov	r1, #1
   169e4:	mov	r8, #0
   169e8:	mov	r7, #2
   169ec:	mov	r2, r0
   169f0:	mov	r3, #1
   169f4:	str	r1, [fp, #-76]	; 0xffffffb4
   169f8:	movw	r1, #48969	; 0xbf49
   169fc:	movt	r1, #1
   16a00:	str	r1, [sp, #92]	; 0x5c
   16a04:	b	16a84 <__assert_fail@plt+0x5230>
   16a08:	cmp	sl, #0
   16a0c:	mov	r8, #1
   16a10:	mov	r7, #2
   16a14:	movne	r0, #39	; 0x27
   16a18:	strbne	r0, [r6]
   16a1c:	movw	r0, #48969	; 0xbf49
   16a20:	movt	r0, #1
   16a24:	b	16a74 <__assert_fail@plt+0x5220>
   16a28:	mov	r7, #5
   16a2c:	tst	r4, #1
   16a30:	beq	16a58 <__assert_fail@plt+0x5204>
   16a34:	mov	r0, #1
   16a38:	mov	r8, #0
   16a3c:	str	r0, [fp, #-76]	; 0xffffffb4
   16a40:	movw	r0, #47620	; 0xba04
   16a44:	mov	r2, #1
   16a48:	mov	r3, #1
   16a4c:	movt	r0, #1
   16a50:	str	r0, [sp, #92]	; 0x5c
   16a54:	b	16a84 <__assert_fail@plt+0x5230>
   16a58:	cmp	sl, #0
   16a5c:	mov	r8, #1
   16a60:	mov	r2, #1
   16a64:	movne	r0, #34	; 0x22
   16a68:	strbne	r0, [r6]
   16a6c:	movw	r0, #47620	; 0xba04
   16a70:	movt	r0, #1
   16a74:	str	r0, [sp, #92]	; 0x5c
   16a78:	mov	r0, #1
   16a7c:	str	r0, [fp, #-76]	; 0xffffffb4
   16a80:	mov	r3, #0
   16a84:	ldr	r0, [fp, #16]
   16a88:	str	r3, [fp, #-72]	; 0xffffffb8
   16a8c:	str	r7, [fp, #-64]	; 0xffffffc0
   16a90:	str	r2, [sp, #84]	; 0x54
   16a94:	cmp	r0, #0
   16a98:	movwne	r0, #1
   16a9c:	and	r0, r0, r3
   16aa0:	str	r0, [fp, #-88]	; 0xffffffa8
   16aa4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16aa8:	cmp	r0, #0
   16aac:	movwne	r0, #1
   16ab0:	subs	r4, r7, #2
   16ab4:	mov	r7, #0
   16ab8:	and	r1, r0, r3
   16abc:	str	r4, [fp, #-80]	; 0xffffffb0
   16ac0:	and	r1, r2, r1
   16ac4:	str	r1, [sp, #48]	; 0x30
   16ac8:	clz	r1, r4
   16acc:	lsr	r1, r1, #5
   16ad0:	and	r1, r1, r3
   16ad4:	eor	r3, r3, #1
   16ad8:	str	r1, [sp, #64]	; 0x40
   16adc:	mov	r1, r4
   16ae0:	str	r3, [sp, #88]	; 0x58
   16ae4:	movwne	r1, #1
   16ae8:	orr	r3, r1, r3
   16aec:	and	r1, r1, r2
   16af0:	and	r0, r0, r1
   16af4:	str	r3, [sp, #68]	; 0x44
   16af8:	str	r1, [fp, #-68]	; 0xffffffbc
   16afc:	str	r0, [fp, #-60]	; 0xffffffc4
   16b00:	eor	r0, r2, #1
   16b04:	str	r0, [sp, #52]	; 0x34
   16b08:	cmn	lr, #1
   16b0c:	beq	16b1c <__assert_fail@plt+0x52c8>
   16b10:	cmp	r7, lr
   16b14:	bne	16b28 <__assert_fail@plt+0x52d4>
   16b18:	b	17650 <__assert_fail@plt+0x5dfc>
   16b1c:	ldrb	r0, [ip, r7]
   16b20:	cmp	r0, #0
   16b24:	beq	17658 <__assert_fail@plt+0x5e04>
   16b28:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16b2c:	mov	r9, #0
   16b30:	str	r5, [fp, #-48]	; 0xffffffd0
   16b34:	cmp	r0, #0
   16b38:	beq	16b6c <__assert_fail@plt+0x5318>
   16b3c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16b40:	add	r4, r7, r0
   16b44:	cmp	r0, #2
   16b48:	bcc	16b64 <__assert_fail@plt+0x5310>
   16b4c:	cmn	lr, #1
   16b50:	bne	16b64 <__assert_fail@plt+0x5310>
   16b54:	mov	r0, ip
   16b58:	bl	116b0 <strlen@plt>
   16b5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16b60:	mov	lr, r0
   16b64:	cmp	r4, lr
   16b68:	bls	16b74 <__assert_fail@plt+0x5320>
   16b6c:	mov	r0, #0
   16b70:	b	16bb4 <__assert_fail@plt+0x5360>
   16b74:	ldr	r1, [sp, #92]	; 0x5c
   16b78:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16b7c:	add	r0, ip, r7
   16b80:	mov	r4, lr
   16b84:	bl	11530 <memcmp@plt>
   16b88:	ldr	r2, [sp, #88]	; 0x58
   16b8c:	cmp	r0, #0
   16b90:	mov	r1, r0
   16b94:	movwne	r1, #1
   16b98:	orr	r1, r1, r2
   16b9c:	tst	r1, #1
   16ba0:	beq	176e8 <__assert_fail@plt+0x5e94>
   16ba4:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ba8:	clz	r0, r0
   16bac:	mov	lr, r4
   16bb0:	lsr	r0, r0, #5
   16bb4:	str	r0, [fp, #-52]	; 0xffffffcc
   16bb8:	ldrb	r5, [ip, r7]
   16bbc:	cmp	r5, #126	; 0x7e
   16bc0:	bhi	16f78 <__assert_fail@plt+0x5724>
   16bc4:	add	r3, pc, #16
   16bc8:	mov	r4, #1
   16bcc:	mov	r2, #110	; 0x6e
   16bd0:	mov	r0, #97	; 0x61
   16bd4:	mov	r1, #0
   16bd8:	ldr	pc, [r3, r5, lsl #2]
   16bdc:	andeq	r6, r1, r4, ror lr
   16be0:	andeq	r6, r1, r8, ror pc
   16be4:	andeq	r6, r1, r8, ror pc
   16be8:	andeq	r6, r1, r8, ror pc
   16bec:	andeq	r6, r1, r8, ror pc
   16bf0:	andeq	r6, r1, r8, ror pc
   16bf4:	andeq	r6, r1, r8, ror pc
   16bf8:	andeq	r7, r1, ip, lsr #32
   16bfc:	andeq	r6, r1, r4, asr lr
   16c00:	andeq	r6, r1, ip, asr #28
   16c04:	andeq	r6, r1, r0, ror #28
   16c08:	andeq	r6, r1, r0, ror #29
   16c0c:	andeq	r6, r1, r4, asr #28
   16c10:	andeq	r6, r1, ip, asr lr
   16c14:	andeq	r6, r1, r8, ror pc
   16c18:	andeq	r6, r1, r8, ror pc
   16c1c:	andeq	r6, r1, r8, ror pc
   16c20:	andeq	r6, r1, r8, ror pc
   16c24:	andeq	r6, r1, r8, ror pc
   16c28:	andeq	r6, r1, r8, ror pc
   16c2c:	andeq	r6, r1, r8, ror pc
   16c30:	andeq	r6, r1, r8, ror pc
   16c34:	andeq	r6, r1, r8, ror pc
   16c38:	andeq	r6, r1, r8, ror pc
   16c3c:	andeq	r6, r1, r8, ror pc
   16c40:	andeq	r6, r1, r8, ror pc
   16c44:	andeq	r6, r1, r8, ror pc
   16c48:	andeq	r6, r1, r8, ror pc
   16c4c:	andeq	r6, r1, r8, ror pc
   16c50:	andeq	r6, r1, r8, ror pc
   16c54:	andeq	r6, r1, r8, ror pc
   16c58:	andeq	r6, r1, r8, ror pc
   16c5c:	andeq	r6, r1, r4, ror #31
   16c60:	andeq	r6, r1, r8, ror #31
   16c64:	andeq	r6, r1, r8, ror #31
   16c68:	andeq	r6, r1, ip, ror #27
   16c6c:	andeq	r6, r1, r8, ror #31
   16c70:	ldrdeq	r6, [r1], -r8
   16c74:	andeq	r6, r1, r8, ror #31
   16c78:	andeq	r6, r1, r8, ror #29
   16c7c:	andeq	r6, r1, r8, ror #31
   16c80:	andeq	r6, r1, r8, ror #31
   16c84:	andeq	r6, r1, r8, ror #31
   16c88:	ldrdeq	r6, [r1], -r8
   16c8c:	ldrdeq	r6, [r1], -r8
   16c90:	ldrdeq	r6, [r1], -r8
   16c94:	ldrdeq	r6, [r1], -r8
   16c98:	ldrdeq	r6, [r1], -r8
   16c9c:	ldrdeq	r6, [r1], -r8
   16ca0:	ldrdeq	r6, [r1], -r8
   16ca4:	ldrdeq	r6, [r1], -r8
   16ca8:	ldrdeq	r6, [r1], -r8
   16cac:	ldrdeq	r6, [r1], -r8
   16cb0:	ldrdeq	r6, [r1], -r8
   16cb4:	ldrdeq	r6, [r1], -r8
   16cb8:	ldrdeq	r6, [r1], -r8
   16cbc:	ldrdeq	r6, [r1], -r8
   16cc0:	ldrdeq	r6, [r1], -r8
   16cc4:	ldrdeq	r6, [r1], -r8
   16cc8:	andeq	r6, r1, r8, ror #31
   16ccc:	andeq	r6, r1, r8, ror #31
   16cd0:	andeq	r6, r1, r8, ror #31
   16cd4:	andeq	r6, r1, r8, ror #31
   16cd8:			; <UNDEFINED> instruction: 0x00016eb4
   16cdc:	andeq	r6, r1, r8, ror pc
   16ce0:	ldrdeq	r6, [r1], -r8
   16ce4:	ldrdeq	r6, [r1], -r8
   16ce8:	ldrdeq	r6, [r1], -r8
   16cec:	ldrdeq	r6, [r1], -r8
   16cf0:	ldrdeq	r6, [r1], -r8
   16cf4:	ldrdeq	r6, [r1], -r8
   16cf8:	ldrdeq	r6, [r1], -r8
   16cfc:	ldrdeq	r6, [r1], -r8
   16d00:	ldrdeq	r6, [r1], -r8
   16d04:	ldrdeq	r6, [r1], -r8
   16d08:	ldrdeq	r6, [r1], -r8
   16d0c:	ldrdeq	r6, [r1], -r8
   16d10:	ldrdeq	r6, [r1], -r8
   16d14:	ldrdeq	r6, [r1], -r8
   16d18:	ldrdeq	r6, [r1], -r8
   16d1c:	ldrdeq	r6, [r1], -r8
   16d20:	ldrdeq	r6, [r1], -r8
   16d24:	ldrdeq	r6, [r1], -r8
   16d28:	ldrdeq	r6, [r1], -r8
   16d2c:	ldrdeq	r6, [r1], -r8
   16d30:	ldrdeq	r6, [r1], -r8
   16d34:	ldrdeq	r6, [r1], -r8
   16d38:	ldrdeq	r6, [r1], -r8
   16d3c:	ldrdeq	r6, [r1], -r8
   16d40:	ldrdeq	r6, [r1], -r8
   16d44:	ldrdeq	r6, [r1], -r8
   16d48:	andeq	r6, r1, r8, ror #31
   16d4c:	andeq	r6, r1, r0, lsr #28
   16d50:	ldrdeq	r6, [r1], -r8
   16d54:	andeq	r6, r1, r8, ror #31
   16d58:	ldrdeq	r6, [r1], -r8
   16d5c:	andeq	r6, r1, r8, ror #31
   16d60:	ldrdeq	r6, [r1], -r8
   16d64:	ldrdeq	r6, [r1], -r8
   16d68:	ldrdeq	r6, [r1], -r8
   16d6c:	ldrdeq	r6, [r1], -r8
   16d70:	ldrdeq	r6, [r1], -r8
   16d74:	ldrdeq	r6, [r1], -r8
   16d78:	ldrdeq	r6, [r1], -r8
   16d7c:	ldrdeq	r6, [r1], -r8
   16d80:	ldrdeq	r6, [r1], -r8
   16d84:	ldrdeq	r6, [r1], -r8
   16d88:	ldrdeq	r6, [r1], -r8
   16d8c:	ldrdeq	r6, [r1], -r8
   16d90:	ldrdeq	r6, [r1], -r8
   16d94:	ldrdeq	r6, [r1], -r8
   16d98:	ldrdeq	r6, [r1], -r8
   16d9c:	ldrdeq	r6, [r1], -r8
   16da0:	ldrdeq	r6, [r1], -r8
   16da4:	ldrdeq	r6, [r1], -r8
   16da8:	ldrdeq	r6, [r1], -r8
   16dac:	ldrdeq	r6, [r1], -r8
   16db0:	ldrdeq	r6, [r1], -r8
   16db4:	ldrdeq	r6, [r1], -r8
   16db8:	ldrdeq	r6, [r1], -r8
   16dbc:	ldrdeq	r6, [r1], -r8
   16dc0:	ldrdeq	r6, [r1], -r8
   16dc4:	ldrdeq	r6, [r1], -r8
   16dc8:	andeq	r6, r1, r0, lsl #28
   16dcc:	andeq	r6, r1, r8, ror #31
   16dd0:	andeq	r6, r1, r0, lsl #28
   16dd4:	andeq	r6, r1, ip, ror #27
   16dd8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16ddc:	cmp	r0, #0
   16de0:	beq	17040 <__assert_fail@plt+0x57ec>
   16de4:	ldr	r0, [fp, #16]
   16de8:	b	17044 <__assert_fail@plt+0x57f0>
   16dec:	mov	r4, #0
   16df0:	cmp	r7, #0
   16df4:	beq	16fe4 <__assert_fail@plt+0x5790>
   16df8:	mov	r9, #0
   16dfc:	b	16dd8 <__assert_fail@plt+0x5584>
   16e00:	mov	r4, #0
   16e04:	cmn	lr, #1
   16e08:	beq	16fc8 <__assert_fail@plt+0x5774>
   16e0c:	cmp	r7, #0
   16e10:	bne	16df8 <__assert_fail@plt+0x55a4>
   16e14:	cmp	lr, #1
   16e18:	beq	16fe4 <__assert_fail@plt+0x5790>
   16e1c:	b	16df8 <__assert_fail@plt+0x55a4>
   16e20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16e24:	cmp	r0, #2
   16e28:	bne	17008 <__assert_fail@plt+0x57b4>
   16e2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e30:	tst	r0, #1
   16e34:	bne	17704 <__assert_fail@plt+0x5eb0>
   16e38:	mov	r9, #0
   16e3c:	mov	r0, #92	; 0x5c
   16e40:	b	1701c <__assert_fail@plt+0x57c8>
   16e44:	mov	r0, #102	; 0x66
   16e48:	b	1702c <__assert_fail@plt+0x57d8>
   16e4c:	mov	r2, #116	; 0x74
   16e50:	b	16e60 <__assert_fail@plt+0x560c>
   16e54:	mov	r0, #98	; 0x62
   16e58:	b	1702c <__assert_fail@plt+0x57d8>
   16e5c:	mov	r2, #114	; 0x72
   16e60:	ldr	r0, [sp, #68]	; 0x44
   16e64:	tst	r0, #1
   16e68:	mov	r0, r2
   16e6c:	bne	1702c <__assert_fail@plt+0x57d8>
   16e70:	b	17704 <__assert_fail@plt+0x5eb0>
   16e74:	ldr	r0, [sp, #84]	; 0x54
   16e78:	tst	r0, #1
   16e7c:	beq	1711c <__assert_fail@plt+0x58c8>
   16e80:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e84:	tst	r0, #1
   16e88:	bne	17814 <__assert_fail@plt+0x5fc0>
   16e8c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16e90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16e94:	cmp	r0, #2
   16e98:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16e9c:	movwne	r0, #1
   16ea0:	orr	r0, r0, r2
   16ea4:	tst	r0, #1
   16ea8:	beq	174ec <__assert_fail@plt+0x5c98>
   16eac:	mov	r0, r8
   16eb0:	b	17520 <__assert_fail@plt+0x5ccc>
   16eb4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16eb8:	mov	r9, #0
   16ebc:	mov	r5, #63	; 0x3f
   16ec0:	cmp	r0, #5
   16ec4:	beq	172d0 <__assert_fail@plt+0x5a7c>
   16ec8:	cmp	r0, #2
   16ecc:	bne	17374 <__assert_fail@plt+0x5b20>
   16ed0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16ed4:	tst	r0, #1
   16ed8:	beq	17378 <__assert_fail@plt+0x5b24>
   16edc:	b	17704 <__assert_fail@plt+0x5eb0>
   16ee0:	mov	r0, #118	; 0x76
   16ee4:	b	1702c <__assert_fail@plt+0x57d8>
   16ee8:	mov	r0, #1
   16eec:	mov	r5, #39	; 0x27
   16ef0:	str	r0, [sp, #60]	; 0x3c
   16ef4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16ef8:	cmp	r0, #2
   16efc:	bne	16f70 <__assert_fail@plt+0x571c>
   16f00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16f04:	tst	r0, #1
   16f08:	bne	17704 <__assert_fail@plt+0x5eb0>
   16f0c:	ldr	r2, [sp, #56]	; 0x38
   16f10:	clz	r1, sl
   16f14:	mov	r9, #0
   16f18:	lsr	r1, r1, #5
   16f1c:	cmp	r2, #0
   16f20:	mov	r0, r2
   16f24:	movwne	r0, #1
   16f28:	orrs	r0, r0, r1
   16f2c:	moveq	r2, sl
   16f30:	moveq	sl, r0
   16f34:	cmp	r8, sl
   16f38:	str	r2, [sp, #56]	; 0x38
   16f3c:	movcc	r0, #39	; 0x27
   16f40:	strbcc	r0, [r6, r8]
   16f44:	add	r0, r8, #1
   16f48:	cmp	r0, sl
   16f4c:	movcc	r1, #92	; 0x5c
   16f50:	strbcc	r1, [r6, r0]
   16f54:	add	r0, r8, #2
   16f58:	add	r8, r8, #3
   16f5c:	cmp	r0, sl
   16f60:	movcc	r1, #39	; 0x27
   16f64:	strbcc	r1, [r6, r0]
   16f68:	mov	r0, #0
   16f6c:	str	r0, [fp, #-56]	; 0xffffffc8
   16f70:	mov	r4, #1
   16f74:	b	16dd8 <__assert_fail@plt+0x5584>
   16f78:	ldr	r0, [sp, #40]	; 0x28
   16f7c:	cmp	r0, #1
   16f80:	bne	17148 <__assert_fail@plt+0x58f4>
   16f84:	str	lr, [sp, #28]
   16f88:	bl	11674 <__ctype_b_loc@plt>
   16f8c:	ldr	r0, [r0]
   16f90:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f94:	mov	r1, #1
   16f98:	add	r0, r0, r5, lsl #1
   16f9c:	ldrb	r0, [r0, #1]
   16fa0:	ubfx	r4, r0, #6, #1
   16fa4:	ldr	r0, [sp, #52]	; 0x34
   16fa8:	mov	r2, r1
   16fac:	cmp	r1, #1
   16fb0:	orr	r0, r4, r0
   16fb4:	bhi	17380 <__assert_fail@plt+0x5b2c>
   16fb8:	tst	r0, #1
   16fbc:	beq	17380 <__assert_fail@plt+0x5b2c>
   16fc0:	ldr	lr, [sp, #28]
   16fc4:	b	16dd8 <__assert_fail@plt+0x5584>
   16fc8:	cmp	r7, #0
   16fcc:	ldrbeq	r0, [ip, #1]
   16fd0:	cmpeq	r0, #0
   16fd4:	beq	16fe4 <__assert_fail@plt+0x5790>
   16fd8:	mvn	lr, #0
   16fdc:	mov	r9, #0
   16fe0:	b	16dd8 <__assert_fail@plt+0x5584>
   16fe4:	mov	r1, #1
   16fe8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16fec:	cmp	r0, #2
   16ff0:	bne	17000 <__assert_fail@plt+0x57ac>
   16ff4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16ff8:	tst	r0, #1
   16ffc:	bne	17704 <__assert_fail@plt+0x5eb0>
   17000:	mov	r4, r1
   17004:	b	16dd8 <__assert_fail@plt+0x5584>
   17008:	ldr	r1, [sp, #48]	; 0x30
   1700c:	mov	r9, #0
   17010:	mov	r0, #92	; 0x5c
   17014:	cmp	r1, #0
   17018:	beq	1702c <__assert_fail@plt+0x57d8>
   1701c:	mov	r4, #0
   17020:	cmp	r9, #0
   17024:	beq	175b8 <__assert_fail@plt+0x5d64>
   17028:	b	175f4 <__assert_fail@plt+0x5da0>
   1702c:	ldr	r1, [sp, #84]	; 0x54
   17030:	mov	r4, #0
   17034:	mov	r9, #0
   17038:	tst	r1, #1
   1703c:	bne	1707c <__assert_fail@plt+0x5828>
   17040:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17044:	cmp	r0, #0
   17048:	mov	r0, r5
   1704c:	beq	17070 <__assert_fail@plt+0x581c>
   17050:	ldr	r1, [fp, #16]
   17054:	ubfx	r0, r5, #5, #3
   17058:	mov	r2, #1
   1705c:	ldr	r0, [r1, r0, lsl #2]
   17060:	and	r1, r5, #31
   17064:	tst	r0, r2, lsl r1
   17068:	mov	r0, r5
   1706c:	bne	1707c <__assert_fail@plt+0x5828>
   17070:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17074:	cmp	r1, #0
   17078:	beq	175b0 <__assert_fail@plt+0x5d5c>
   1707c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17080:	tst	r1, #1
   17084:	bne	176dc <__assert_fail@plt+0x5e88>
   17088:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1708c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17090:	cmp	r1, #2
   17094:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17098:	movwne	r1, #1
   1709c:	orr	r1, r1, r2
   170a0:	tst	r1, #1
   170a4:	beq	170b0 <__assert_fail@plt+0x585c>
   170a8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   170ac:	b	170ec <__assert_fail@plt+0x5898>
   170b0:	cmp	r8, sl
   170b4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   170b8:	movcc	r1, #39	; 0x27
   170bc:	strbcc	r1, [r6, r8]
   170c0:	add	r1, r8, #1
   170c4:	cmp	r1, sl
   170c8:	movcc	r2, #36	; 0x24
   170cc:	strbcc	r2, [r6, r1]
   170d0:	add	r1, r8, #2
   170d4:	add	r8, r8, #3
   170d8:	cmp	r1, sl
   170dc:	movcc	r2, #39	; 0x27
   170e0:	strbcc	r2, [r6, r1]
   170e4:	mov	r1, #1
   170e8:	str	r1, [fp, #-56]	; 0xffffffc8
   170ec:	cmp	r8, sl
   170f0:	movcc	r1, #92	; 0x5c
   170f4:	strbcc	r1, [r6, r8]
   170f8:	add	r8, r8, #1
   170fc:	cmp	r8, sl
   17100:	and	r5, r5, r4
   17104:	add	r7, r7, #1
   17108:	strbcc	r0, [r6, r8]
   1710c:	add	r8, r8, #1
   17110:	cmn	lr, #1
   17114:	bne	16b10 <__assert_fail@plt+0x52bc>
   17118:	b	16b1c <__assert_fail@plt+0x52c8>
   1711c:	ldr	r0, [sp, #36]	; 0x24
   17120:	mov	r4, #0
   17124:	mov	r9, #0
   17128:	mov	r5, #0
   1712c:	cmp	r0, #0
   17130:	beq	17040 <__assert_fail@plt+0x57ec>
   17134:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17138:	add	r7, r7, #1
   1713c:	cmn	lr, #1
   17140:	bne	16b10 <__assert_fail@plt+0x52bc>
   17144:	b	16b1c <__assert_fail@plt+0x52c8>
   17148:	mov	r0, #0
   1714c:	cmn	lr, #1
   17150:	str	r0, [fp, #-36]	; 0xffffffdc
   17154:	str	r0, [fp, #-40]	; 0xffffffd8
   17158:	bne	1716c <__assert_fail@plt+0x5918>
   1715c:	mov	r0, ip
   17160:	bl	116b0 <strlen@plt>
   17164:	ldr	ip, [fp, #-84]	; 0xffffffac
   17168:	mov	lr, r0
   1716c:	add	r0, ip, r7
   17170:	mov	r4, #1
   17174:	mov	r6, #0
   17178:	str	lr, [sp, #28]
   1717c:	str	r0, [sp, #24]
   17180:	sub	r0, fp, #40	; 0x28
   17184:	mov	r3, r0
   17188:	str	r6, [sp, #44]	; 0x2c
   1718c:	add	r6, r6, r7
   17190:	sub	r0, fp, #44	; 0x2c
   17194:	add	r1, ip, r6
   17198:	sub	r2, lr, r6
   1719c:	bl	1a29c <__assert_fail@plt+0x8a48>
   171a0:	cmp	r0, #0
   171a4:	beq	1763c <__assert_fail@plt+0x5de8>
   171a8:	cmn	r0, #1
   171ac:	beq	175fc <__assert_fail@plt+0x5da8>
   171b0:	ldr	lr, [sp, #28]
   171b4:	cmn	r0, #2
   171b8:	beq	17604 <__assert_fail@plt+0x5db0>
   171bc:	ldr	r2, [sp, #64]	; 0x40
   171c0:	cmp	r0, #2
   171c4:	mov	r1, #0
   171c8:	movwcc	r1, #1
   171cc:	eor	r2, r2, #1
   171d0:	orrs	r1, r2, r1
   171d4:	bne	17294 <__assert_fail@plt+0x5a40>
   171d8:	ldr	r1, [sp, #44]	; 0x2c
   171dc:	ldr	r2, [sp, #24]
   171e0:	add	r1, r2, r1
   171e4:	mov	r2, #1
   171e8:	ldrb	r3, [r1, r2]
   171ec:	sub	r3, r3, #91	; 0x5b
   171f0:	cmp	r3, #33	; 0x21
   171f4:	bhi	17288 <__assert_fail@plt+0x5a34>
   171f8:	add	r6, pc, #0
   171fc:	ldr	pc, [r6, r3, lsl #2]
   17200:	strdeq	r7, [r1], -ip
   17204:	strdeq	r7, [r1], -ip
   17208:	andeq	r7, r1, r8, lsl #5
   1720c:	strdeq	r7, [r1], -ip
   17210:	andeq	r7, r1, r8, lsl #5
   17214:	strdeq	r7, [r1], -ip
   17218:	andeq	r7, r1, r8, lsl #5
   1721c:	andeq	r7, r1, r8, lsl #5
   17220:	andeq	r7, r1, r8, lsl #5
   17224:	andeq	r7, r1, r8, lsl #5
   17228:	andeq	r7, r1, r8, lsl #5
   1722c:	andeq	r7, r1, r8, lsl #5
   17230:	andeq	r7, r1, r8, lsl #5
   17234:	andeq	r7, r1, r8, lsl #5
   17238:	andeq	r7, r1, r8, lsl #5
   1723c:	andeq	r7, r1, r8, lsl #5
   17240:	andeq	r7, r1, r8, lsl #5
   17244:	andeq	r7, r1, r8, lsl #5
   17248:	andeq	r7, r1, r8, lsl #5
   1724c:	andeq	r7, r1, r8, lsl #5
   17250:	andeq	r7, r1, r8, lsl #5
   17254:	andeq	r7, r1, r8, lsl #5
   17258:	andeq	r7, r1, r8, lsl #5
   1725c:	andeq	r7, r1, r8, lsl #5
   17260:	andeq	r7, r1, r8, lsl #5
   17264:	andeq	r7, r1, r8, lsl #5
   17268:	andeq	r7, r1, r8, lsl #5
   1726c:	andeq	r7, r1, r8, lsl #5
   17270:	andeq	r7, r1, r8, lsl #5
   17274:	andeq	r7, r1, r8, lsl #5
   17278:	andeq	r7, r1, r8, lsl #5
   1727c:	andeq	r7, r1, r8, lsl #5
   17280:	andeq	r7, r1, r8, lsl #5
   17284:	strdeq	r7, [r1], -ip
   17288:	add	r2, r2, #1
   1728c:	cmp	r2, r0
   17290:	bcc	171e8 <__assert_fail@plt+0x5994>
   17294:	ldr	r6, [sp, #44]	; 0x2c
   17298:	add	r6, r0, r6
   1729c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   172a0:	bl	1159c <iswprint@plt>
   172a4:	cmp	r0, #0
   172a8:	movwne	r0, #1
   172ac:	and	r4, r4, r0
   172b0:	sub	r0, fp, #40	; 0x28
   172b4:	bl	11518 <mbsinit@plt>
   172b8:	ldr	lr, [sp, #28]
   172bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   172c0:	sub	r3, fp, #40	; 0x28
   172c4:	cmp	r0, #0
   172c8:	beq	17188 <__assert_fail@plt+0x5934>
   172cc:	b	17644 <__assert_fail@plt+0x5df0>
   172d0:	ldr	r0, [sp, #32]
   172d4:	cmp	r0, #0
   172d8:	beq	17374 <__assert_fail@plt+0x5b20>
   172dc:	add	r0, r7, #2
   172e0:	cmp	r0, lr
   172e4:	bcs	17374 <__assert_fail@plt+0x5b20>
   172e8:	add	r1, ip, r7
   172ec:	ldrb	r1, [r1, #1]
   172f0:	cmp	r1, #63	; 0x3f
   172f4:	bne	17374 <__assert_fail@plt+0x5b20>
   172f8:	ldrb	r5, [ip, r0]
   172fc:	sub	r1, r5, #33	; 0x21
   17300:	cmp	r1, #29
   17304:	bhi	17374 <__assert_fail@plt+0x5b20>
   17308:	movw	r3, #20929	; 0x51c1
   1730c:	mov	r2, #1
   17310:	movt	r3, #14336	; 0x3800
   17314:	tst	r3, r2, lsl r1
   17318:	beq	17374 <__assert_fail@plt+0x5b20>
   1731c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17320:	tst	r1, #1
   17324:	bne	1781c <__assert_fail@plt+0x5fc8>
   17328:	cmp	r8, sl
   1732c:	mov	r7, r0
   17330:	mov	r4, #0
   17334:	movcc	r1, #63	; 0x3f
   17338:	strbcc	r1, [r6, r8]
   1733c:	add	r1, r8, #1
   17340:	cmp	r1, sl
   17344:	movcc	r2, #34	; 0x22
   17348:	strbcc	r2, [r6, r1]
   1734c:	add	r1, r8, #2
   17350:	cmp	r1, sl
   17354:	movcc	r2, #34	; 0x22
   17358:	strbcc	r2, [r6, r1]
   1735c:	add	r1, r8, #3
   17360:	add	r8, r8, #4
   17364:	cmp	r1, sl
   17368:	movcc	r2, #63	; 0x3f
   1736c:	strbcc	r2, [r6, r1]
   17370:	b	16dd8 <__assert_fail@plt+0x5584>
   17374:	mov	r5, #63	; 0x3f
   17378:	mov	r4, #0
   1737c:	b	16dd8 <__assert_fail@plt+0x5584>
   17380:	add	r1, r2, r7
   17384:	ldr	lr, [sp, #28]
   17388:	mov	r3, #0
   1738c:	str	r1, [sp, #44]	; 0x2c
   17390:	add	r1, r7, #1
   17394:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17398:	tst	r0, #1
   1739c:	bne	17470 <__assert_fail@plt+0x5c1c>
   173a0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   173a4:	tst	r2, #1
   173a8:	bne	17764 <__assert_fail@plt+0x5f10>
   173ac:	ldr	r3, [fp, #-80]	; 0xffffffb0
   173b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   173b4:	cmp	r7, #2
   173b8:	movwne	r3, #1
   173bc:	orr	r3, r3, r2
   173c0:	tst	r3, #1
   173c4:	bne	17400 <__assert_fail@plt+0x5bac>
   173c8:	cmp	r8, sl
   173cc:	add	r3, r8, #1
   173d0:	movcc	r2, #39	; 0x27
   173d4:	strbcc	r2, [r6, r8]
   173d8:	cmp	r3, sl
   173dc:	movcc	r2, #36	; 0x24
   173e0:	strbcc	r2, [r6, r3]
   173e4:	add	r3, r8, #2
   173e8:	add	r8, r8, #3
   173ec:	cmp	r3, sl
   173f0:	movcc	r2, #39	; 0x27
   173f4:	strbcc	r2, [r6, r3]
   173f8:	mov	r2, #1
   173fc:	str	r2, [fp, #-56]	; 0xffffffc8
   17400:	cmp	r8, sl
   17404:	movcc	r3, #92	; 0x5c
   17408:	strbcc	r3, [r6, r8]
   1740c:	add	r3, r8, #1
   17410:	cmp	r3, sl
   17414:	andcc	r7, r5, #192	; 0xc0
   17418:	movcc	r2, #48	; 0x30
   1741c:	orrcc	r7, r2, r7, lsr #6
   17420:	strbcc	r7, [r6, r3]
   17424:	add	r3, r8, #2
   17428:	add	r8, r8, #3
   1742c:	cmp	r3, sl
   17430:	lsrcc	r7, r5, #3
   17434:	movcc	r2, #6
   17438:	bficc	r7, r2, #3, #29
   1743c:	mov	r2, #6
   17440:	strbcc	r7, [r6, r3]
   17444:	bfi	r5, r2, #3, #29
   17448:	mov	r3, #1
   1744c:	b	17494 <__assert_fail@plt+0x5c40>
   17450:	cmp	r8, sl
   17454:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17458:	strbcc	r5, [r6, r8]
   1745c:	add	r8, r8, #1
   17460:	ldrb	r5, [ip, r1]
   17464:	add	r1, r1, #1
   17468:	tst	r0, #1
   1746c:	beq	173a0 <__assert_fail@plt+0x5b4c>
   17470:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17474:	tst	r2, #1
   17478:	beq	1748c <__assert_fail@plt+0x5c38>
   1747c:	cmp	r8, sl
   17480:	movcc	r7, #92	; 0x5c
   17484:	strbcc	r7, [r6, r8]
   17488:	add	r8, r8, #1
   1748c:	mov	r2, #0
   17490:	str	r2, [fp, #-52]	; 0xffffffcc
   17494:	ldr	r2, [sp, #44]	; 0x2c
   17498:	and	r9, r3, #1
   1749c:	cmp	r2, r1
   174a0:	bls	175a0 <__assert_fail@plt+0x5d4c>
   174a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   174a8:	cmp	r9, #0
   174ac:	movwne	r9, #1
   174b0:	mvn	r7, r2
   174b4:	orr	r7, r7, r9
   174b8:	tst	r7, #1
   174bc:	bne	17450 <__assert_fail@plt+0x5bfc>
   174c0:	cmp	r8, sl
   174c4:	movcc	r7, #39	; 0x27
   174c8:	strbcc	r7, [r6, r8]
   174cc:	add	r7, r8, #1
   174d0:	add	r8, r8, #2
   174d4:	cmp	r7, sl
   174d8:	movcc	r2, #39	; 0x27
   174dc:	strbcc	r2, [r6, r7]
   174e0:	mov	r2, #0
   174e4:	str	r2, [fp, #-56]	; 0xffffffc8
   174e8:	b	17450 <__assert_fail@plt+0x5bfc>
   174ec:	cmp	r8, sl
   174f0:	mov	r2, #1
   174f4:	movcc	r0, #39	; 0x27
   174f8:	strbcc	r0, [r6, r8]
   174fc:	add	r0, r8, #1
   17500:	cmp	r0, sl
   17504:	movcc	r1, #36	; 0x24
   17508:	strbcc	r1, [r6, r0]
   1750c:	add	r0, r8, #2
   17510:	cmp	r0, sl
   17514:	movcc	r1, #39	; 0x27
   17518:	strbcc	r1, [r6, r0]
   1751c:	add	r0, r8, #3
   17520:	cmp	r0, sl
   17524:	add	r8, r0, #1
   17528:	str	r2, [fp, #-56]	; 0xffffffc8
   1752c:	movcc	r1, #92	; 0x5c
   17530:	strbcc	r1, [r6, r0]
   17534:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17538:	cmp	r1, #2
   1753c:	beq	17590 <__assert_fail@plt+0x5d3c>
   17540:	add	r1, r7, #1
   17544:	mov	r4, #0
   17548:	mov	r9, #1
   1754c:	mov	r5, #48	; 0x30
   17550:	cmp	r1, lr
   17554:	bcs	16dd8 <__assert_fail@plt+0x5584>
   17558:	ldrb	r1, [ip, r1]
   1755c:	sub	r1, r1, #48	; 0x30
   17560:	uxtb	r1, r1
   17564:	cmp	r1, #9
   17568:	bhi	16dd8 <__assert_fail@plt+0x5584>
   1756c:	cmp	r8, sl
   17570:	movcc	r1, #48	; 0x30
   17574:	strbcc	r1, [r6, r8]
   17578:	add	r1, r0, #2
   1757c:	add	r8, r0, #3
   17580:	cmp	r1, sl
   17584:	movcc	r2, #48	; 0x30
   17588:	strbcc	r2, [r6, r1]
   1758c:	b	16dd8 <__assert_fail@plt+0x5584>
   17590:	mov	r0, #48	; 0x30
   17594:	mov	r9, #1
   17598:	mov	r4, #0
   1759c:	b	17070 <__assert_fail@plt+0x581c>
   175a0:	cmp	r9, #0
   175a4:	sub	r7, r1, #1
   175a8:	mov	r0, r5
   175ac:	movwne	r9, #1
   175b0:	cmp	r9, #0
   175b4:	bne	175f4 <__assert_fail@plt+0x5da0>
   175b8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   175bc:	tst	r1, #1
   175c0:	beq	175f4 <__assert_fail@plt+0x5da0>
   175c4:	cmp	r8, sl
   175c8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   175cc:	movcc	r1, #39	; 0x27
   175d0:	strbcc	r1, [r6, r8]
   175d4:	add	r1, r8, #1
   175d8:	add	r8, r8, #2
   175dc:	cmp	r1, sl
   175e0:	movcc	r2, #39	; 0x27
   175e4:	strbcc	r2, [r6, r1]
   175e8:	mov	r1, #0
   175ec:	str	r1, [fp, #-56]	; 0xffffffc8
   175f0:	b	170fc <__assert_fail@plt+0x58a8>
   175f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   175f8:	b	170fc <__assert_fail@plt+0x58a8>
   175fc:	mov	r4, #0
   17600:	b	1763c <__assert_fail@plt+0x5de8>
   17604:	mov	r4, #0
   17608:	cmp	lr, r6
   1760c:	bls	1763c <__assert_fail@plt+0x5de8>
   17610:	ldr	ip, [fp, #-84]	; 0xffffffac
   17614:	ldr	r6, [sp, #44]	; 0x2c
   17618:	ldr	r0, [sp, #24]
   1761c:	ldrb	r0, [r0, r6]
   17620:	cmp	r0, #0
   17624:	beq	17644 <__assert_fail@plt+0x5df0>
   17628:	add	r6, r6, #1
   1762c:	add	r0, r7, r6
   17630:	cmp	r0, lr
   17634:	bcc	17618 <__assert_fail@plt+0x5dc4>
   17638:	b	17644 <__assert_fail@plt+0x5df0>
   1763c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17640:	ldr	r6, [sp, #44]	; 0x2c
   17644:	mov	r1, r6
   17648:	ldr	r6, [sp, #80]	; 0x50
   1764c:	b	16fa4 <__assert_fail@plt+0x5750>
   17650:	mov	lr, r7
   17654:	b	1765c <__assert_fail@plt+0x5e08>
   17658:	mvn	lr, #0
   1765c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17660:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17664:	eor	r0, r7, #2
   17668:	orr	r0, r0, r8
   1766c:	clz	r0, r0
   17670:	lsr	r0, r0, #5
   17674:	tst	r1, r0
   17678:	bne	17704 <__assert_fail@plt+0x5eb0>
   1767c:	mov	r0, r1
   17680:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17684:	cmp	r7, #2
   17688:	movwne	r1, #1
   1768c:	orr	r0, r0, r1
   17690:	tst	r0, #1
   17694:	ldreq	r0, [sp, #60]	; 0x3c
   17698:	eoreq	r0, r0, #1
   1769c:	tsteq	r0, #1
   176a0:	bne	177b0 <__assert_fail@plt+0x5f5c>
   176a4:	mov	r9, lr
   176a8:	tst	r5, #1
   176ac:	bne	1776c <__assert_fail@plt+0x5f18>
   176b0:	ldr	r6, [sp, #56]	; 0x38
   176b4:	mov	r4, #0
   176b8:	cmp	r6, #0
   176bc:	beq	177a8 <__assert_fail@plt+0x5f54>
   176c0:	ldr	r0, [sp, #84]	; 0x54
   176c4:	mov	r1, #0
   176c8:	cmp	sl, #0
   176cc:	mov	r5, #0
   176d0:	str	r1, [fp, #-72]	; 0xffffffb8
   176d4:	beq	168a4 <__assert_fail@plt+0x5050>
   176d8:	b	177b0 <__assert_fail@plt+0x5f5c>
   176dc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   176e0:	ldr	r2, [sp, #84]	; 0x54
   176e4:	b	1770c <__assert_fail@plt+0x5eb8>
   176e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   176ec:	mov	r2, #1
   176f0:	mov	lr, r4
   176f4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   176f8:	b	1770c <__assert_fail@plt+0x5eb8>
   176fc:	ldr	r6, [sp, #80]	; 0x50
   17700:	ldr	ip, [fp, #-84]	; 0xffffffac
   17704:	ldr	r2, [sp, #84]	; 0x54
   17708:	mov	r7, #2
   1770c:	mov	r0, #0
   17710:	ldr	r1, [fp, #12]
   17714:	tst	r2, #1
   17718:	mov	r2, r7
   1771c:	mov	r3, lr
   17720:	str	r0, [sp, #8]
   17724:	ldr	r0, [sp, #72]	; 0x48
   17728:	movwne	r2, #4
   1772c:	cmp	r7, #2
   17730:	movne	r2, r7
   17734:	str	r2, [sp]
   17738:	mov	r2, ip
   1773c:	bic	r1, r1, #2
   17740:	str	r0, [sp, #12]
   17744:	ldr	r0, [sp, #76]	; 0x4c
   17748:	str	r1, [sp, #4]
   1774c:	mov	r1, sl
   17750:	str	r0, [sp, #16]
   17754:	mov	r0, r6
   17758:	bl	16824 <__assert_fail@plt+0x4fd0>
   1775c:	mov	r8, r0
   17760:	b	17808 <__assert_fail@plt+0x5fb4>
   17764:	ldr	r2, [sp, #84]	; 0x54
   17768:	b	1770c <__assert_fail@plt+0x5eb8>
   1776c:	mov	r0, #5
   17770:	ldr	r1, [sp, #56]	; 0x38
   17774:	ldr	r2, [fp, #-84]	; 0xffffffac
   17778:	mov	r3, r9
   1777c:	str	r0, [sp]
   17780:	ldr	r0, [fp, #12]
   17784:	str	r0, [sp, #4]
   17788:	ldr	r0, [fp, #16]
   1778c:	str	r0, [sp, #8]
   17790:	ldr	r0, [sp, #72]	; 0x48
   17794:	str	r0, [sp, #12]
   17798:	ldr	r0, [sp, #76]	; 0x4c
   1779c:	str	r0, [sp, #16]
   177a0:	ldr	r0, [sp, #80]	; 0x50
   177a4:	b	17758 <__assert_fail@plt+0x5f04>
   177a8:	mov	r0, #0
   177ac:	str	r0, [fp, #-72]	; 0xffffffb8
   177b0:	ldr	r1, [sp, #92]	; 0x5c
   177b4:	cmp	r1, #0
   177b8:	beq	177f8 <__assert_fail@plt+0x5fa4>
   177bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   177c0:	ldr	r2, [sp, #80]	; 0x50
   177c4:	tst	r0, #1
   177c8:	bne	177fc <__assert_fail@plt+0x5fa8>
   177cc:	ldrb	r0, [r1]
   177d0:	cmp	r0, #0
   177d4:	beq	177fc <__assert_fail@plt+0x5fa8>
   177d8:	add	r1, r1, #1
   177dc:	cmp	r8, sl
   177e0:	strbcc	r0, [r2, r8]
   177e4:	add	r8, r8, #1
   177e8:	ldrb	r0, [r1], #1
   177ec:	cmp	r0, #0
   177f0:	bne	177dc <__assert_fail@plt+0x5f88>
   177f4:	b	177fc <__assert_fail@plt+0x5fa8>
   177f8:	ldr	r2, [sp, #80]	; 0x50
   177fc:	cmp	r8, sl
   17800:	movcc	r0, #0
   17804:	strbcc	r0, [r2, r8]
   17808:	mov	r0, r8
   1780c:	sub	sp, fp, #28
   17810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17814:	mov	r2, #1
   17818:	b	176f4 <__assert_fail@plt+0x5ea0>
   1781c:	ldr	r2, [sp, #84]	; 0x54
   17820:	mov	r7, #5
   17824:	b	1770c <__assert_fail@plt+0x5eb8>
   17828:	bl	11818 <abort@plt>
   1782c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17830:	add	fp, sp, #28
   17834:	sub	sp, sp, #28
   17838:	movw	r5, #53768	; 0xd208
   1783c:	cmp	r2, #0
   17840:	mov	r4, r1
   17844:	mov	r7, r0
   17848:	str	r0, [sp, #20]
   1784c:	movt	r5, #2
   17850:	movne	r5, r2
   17854:	bl	116d4 <__errno_location@plt>
   17858:	mov	sl, r0
   1785c:	ldm	r5, {r0, r1}
   17860:	ldr	r2, [r5, #40]	; 0x28
   17864:	ldr	r3, [r5, #44]	; 0x2c
   17868:	add	r9, r5, #8
   1786c:	ldr	r6, [sl]
   17870:	orr	r8, r1, #1
   17874:	mov	r1, #0
   17878:	str	r6, [sp, #24]
   1787c:	stm	sp, {r0, r8, r9}
   17880:	str	r2, [sp, #12]
   17884:	str	r3, [sp, #16]
   17888:	mov	r0, #0
   1788c:	mov	r2, r7
   17890:	mov	r3, r4
   17894:	mov	r6, r4
   17898:	bl	16824 <__assert_fail@plt+0x4fd0>
   1789c:	add	r7, r0, #1
   178a0:	mov	r0, r7
   178a4:	bl	19514 <__assert_fail@plt+0x7cc0>
   178a8:	mov	r4, r0
   178ac:	ldr	r0, [r5]
   178b0:	ldr	r2, [r5, #44]	; 0x2c
   178b4:	ldr	r1, [r5, #40]	; 0x28
   178b8:	mov	r3, r6
   178bc:	stm	sp, {r0, r8, r9}
   178c0:	str	r2, [sp, #16]
   178c4:	str	r1, [sp, #12]
   178c8:	mov	r0, r4
   178cc:	mov	r1, r7
   178d0:	ldr	r2, [sp, #20]
   178d4:	bl	16824 <__assert_fail@plt+0x4fd0>
   178d8:	ldr	r0, [sp, #24]
   178dc:	str	r0, [sl]
   178e0:	mov	r0, r4
   178e4:	sub	sp, fp, #28
   178e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178f0:	add	fp, sp, #28
   178f4:	sub	sp, sp, #36	; 0x24
   178f8:	movw	r8, #53768	; 0xd208
   178fc:	cmp	r3, #0
   17900:	mov	r4, r2
   17904:	str	r2, [sp, #24]
   17908:	mov	r5, r1
   1790c:	mov	r6, r0
   17910:	str	r0, [sp, #20]
   17914:	movt	r8, #2
   17918:	movne	r8, r3
   1791c:	bl	116d4 <__errno_location@plt>
   17920:	str	r0, [sp, #28]
   17924:	cmp	r4, #0
   17928:	add	sl, r8, #8
   1792c:	ldm	r8, {r3, r9}
   17930:	ldr	r7, [r0]
   17934:	ldr	r1, [r8, #40]	; 0x28
   17938:	ldr	r2, [r8, #44]	; 0x2c
   1793c:	mov	r0, #0
   17940:	orreq	r9, r9, #1
   17944:	str	r7, [sp, #32]
   17948:	mov	r7, r5
   1794c:	stm	sp, {r3, r9, sl}
   17950:	str	r1, [sp, #12]
   17954:	str	r2, [sp, #16]
   17958:	mov	r1, #0
   1795c:	mov	r2, r6
   17960:	mov	r3, r5
   17964:	bl	16824 <__assert_fail@plt+0x4fd0>
   17968:	add	r4, r0, #1
   1796c:	mov	r5, r0
   17970:	mov	r0, r4
   17974:	bl	19514 <__assert_fail@plt+0x7cc0>
   17978:	mov	r6, r0
   1797c:	ldr	r0, [r8]
   17980:	ldr	r2, [r8, #44]	; 0x2c
   17984:	ldr	r1, [r8, #40]	; 0x28
   17988:	mov	r3, r7
   1798c:	stm	sp, {r0, r9, sl}
   17990:	str	r2, [sp, #16]
   17994:	str	r1, [sp, #12]
   17998:	mov	r0, r6
   1799c:	mov	r1, r4
   179a0:	ldr	r2, [sp, #20]
   179a4:	bl	16824 <__assert_fail@plt+0x4fd0>
   179a8:	ldr	r0, [sp, #24]
   179ac:	ldr	r1, [sp, #32]
   179b0:	ldr	r2, [sp, #28]
   179b4:	cmp	r0, #0
   179b8:	str	r1, [r2]
   179bc:	strne	r5, [r0]
   179c0:	mov	r0, r6
   179c4:	sub	sp, fp, #28
   179c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   179d0:	add	fp, sp, #24
   179d4:	movw	r5, #53612	; 0xd16c
   179d8:	movw	r8, #53608	; 0xd168
   179dc:	movt	r5, #2
   179e0:	movt	r8, #2
   179e4:	ldr	r0, [r5]
   179e8:	ldr	r4, [r8]
   179ec:	cmp	r0, #2
   179f0:	blt	17a1c <__assert_fail@plt+0x61c8>
   179f4:	add	r7, r4, #12
   179f8:	mov	r6, #0
   179fc:	ldr	r0, [r7, r6, lsl #3]
   17a00:	bl	1a198 <__assert_fail@plt+0x8944>
   17a04:	ldr	r1, [r5]
   17a08:	add	r2, r6, #2
   17a0c:	add	r0, r6, #1
   17a10:	mov	r6, r0
   17a14:	cmp	r2, r1
   17a18:	blt	179fc <__assert_fail@plt+0x61a8>
   17a1c:	ldr	r0, [r4, #4]
   17a20:	movw	r7, #53816	; 0xd238
   17a24:	movt	r7, #2
   17a28:	cmp	r0, r7
   17a2c:	beq	17a44 <__assert_fail@plt+0x61f0>
   17a30:	bl	1a198 <__assert_fail@plt+0x8944>
   17a34:	movw	r0, #53616	; 0xd170
   17a38:	mov	r6, #256	; 0x100
   17a3c:	movt	r0, #2
   17a40:	strd	r6, [r0]
   17a44:	movw	r6, #53616	; 0xd170
   17a48:	movt	r6, #2
   17a4c:	cmp	r4, r6
   17a50:	beq	17a60 <__assert_fail@plt+0x620c>
   17a54:	mov	r0, r4
   17a58:	bl	1a198 <__assert_fail@plt+0x8944>
   17a5c:	str	r6, [r8]
   17a60:	mov	r0, #1
   17a64:	str	r0, [r5]
   17a68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a6c:	movw	r3, #53768	; 0xd208
   17a70:	mvn	r2, #0
   17a74:	movt	r3, #2
   17a78:	b	17a7c <__assert_fail@plt+0x6228>
   17a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a80:	add	fp, sp, #28
   17a84:	sub	sp, sp, #44	; 0x2c
   17a88:	mov	r7, r3
   17a8c:	str	r2, [sp, #36]	; 0x24
   17a90:	str	r1, [sp, #32]
   17a94:	mov	r5, r0
   17a98:	bl	116d4 <__errno_location@plt>
   17a9c:	cmp	r5, #0
   17aa0:	blt	17c0c <__assert_fail@plt+0x63b8>
   17aa4:	cmn	r5, #-2147483647	; 0x80000001
   17aa8:	beq	17c0c <__assert_fail@plt+0x63b8>
   17aac:	movw	r8, #53612	; 0xd16c
   17ab0:	movw	r4, #53608	; 0xd168
   17ab4:	str	r0, [sp, #28]
   17ab8:	ldr	r0, [r0]
   17abc:	movt	r8, #2
   17ac0:	movt	r4, #2
   17ac4:	ldr	r1, [r8]
   17ac8:	ldr	r6, [r4]
   17acc:	str	r0, [sp, #24]
   17ad0:	cmp	r1, r5
   17ad4:	ble	17ae0 <__assert_fail@plt+0x628c>
   17ad8:	mov	sl, r6
   17adc:	b	17b48 <__assert_fail@plt+0x62f4>
   17ae0:	movw	r9, #53616	; 0xd170
   17ae4:	mov	r0, #8
   17ae8:	add	r2, r5, #1
   17aec:	str	r1, [fp, #-32]	; 0xffffffe0
   17af0:	mvn	r3, #-2147483648	; 0x80000000
   17af4:	movt	r9, #2
   17af8:	str	r0, [sp]
   17afc:	sub	r2, r2, r1
   17b00:	sub	r1, fp, #32
   17b04:	subs	r0, r6, r9
   17b08:	movne	r0, r6
   17b0c:	bl	19714 <__assert_fail@plt+0x7ec0>
   17b10:	cmp	r6, r9
   17b14:	mov	sl, r0
   17b18:	str	r0, [r4]
   17b1c:	ldrdeq	r0, [r9]
   17b20:	stmeq	sl, {r0, r1}
   17b24:	ldr	r1, [r8]
   17b28:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17b2c:	add	r0, sl, r1, lsl #3
   17b30:	sub	r1, r2, r1
   17b34:	lsl	r2, r1, #3
   17b38:	mov	r1, #0
   17b3c:	bl	116f8 <memset@plt>
   17b40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17b44:	str	r0, [r8]
   17b48:	mov	r9, sl
   17b4c:	ldr	r6, [r9, r5, lsl #3]!
   17b50:	ldr	r4, [r9, #4]!
   17b54:	ldm	r7, {r0, r1}
   17b58:	ldr	r2, [r7, #40]	; 0x28
   17b5c:	ldr	r3, [r7, #44]	; 0x2c
   17b60:	orr	r8, r1, #1
   17b64:	add	r1, r7, #8
   17b68:	stm	sp, {r0, r8}
   17b6c:	add	r0, sp, #8
   17b70:	str	r1, [sp, #20]
   17b74:	stm	r0, {r1, r2, r3}
   17b78:	mov	r0, r4
   17b7c:	mov	r1, r6
   17b80:	ldr	r2, [sp, #32]
   17b84:	ldr	r3, [sp, #36]	; 0x24
   17b88:	bl	16824 <__assert_fail@plt+0x4fd0>
   17b8c:	cmp	r6, r0
   17b90:	bhi	17bf4 <__assert_fail@plt+0x63a0>
   17b94:	add	r6, r0, #1
   17b98:	movw	r0, #53816	; 0xd238
   17b9c:	movt	r0, #2
   17ba0:	str	r6, [sl, r5, lsl #3]
   17ba4:	cmp	r4, r0
   17ba8:	beq	17bb4 <__assert_fail@plt+0x6360>
   17bac:	mov	r0, r4
   17bb0:	bl	1a198 <__assert_fail@plt+0x8944>
   17bb4:	mov	r0, r6
   17bb8:	bl	19514 <__assert_fail@plt+0x7cc0>
   17bbc:	str	r0, [r9]
   17bc0:	mov	r4, r0
   17bc4:	add	r3, sp, #8
   17bc8:	ldr	r0, [r7]
   17bcc:	ldr	r1, [r7, #40]	; 0x28
   17bd0:	ldr	r2, [r7, #44]	; 0x2c
   17bd4:	stm	sp, {r0, r8}
   17bd8:	ldr	r0, [sp, #20]
   17bdc:	stm	r3, {r0, r1, r2}
   17be0:	mov	r0, r4
   17be4:	mov	r1, r6
   17be8:	ldr	r2, [sp, #32]
   17bec:	ldr	r3, [sp, #36]	; 0x24
   17bf0:	bl	16824 <__assert_fail@plt+0x4fd0>
   17bf4:	ldr	r0, [sp, #28]
   17bf8:	ldr	r1, [sp, #24]
   17bfc:	str	r1, [r0]
   17c00:	mov	r0, r4
   17c04:	sub	sp, fp, #28
   17c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c0c:	bl	11818 <abort@plt>
   17c10:	movw	r3, #53768	; 0xd208
   17c14:	movt	r3, #2
   17c18:	b	17a7c <__assert_fail@plt+0x6228>
   17c1c:	movw	r3, #53768	; 0xd208
   17c20:	mov	r1, r0
   17c24:	mov	r0, #0
   17c28:	mvn	r2, #0
   17c2c:	movt	r3, #2
   17c30:	b	17a7c <__assert_fail@plt+0x6228>
   17c34:	movw	r3, #53768	; 0xd208
   17c38:	mov	r2, r1
   17c3c:	mov	r1, r0
   17c40:	mov	r0, #0
   17c44:	movt	r3, #2
   17c48:	b	17a7c <__assert_fail@plt+0x6228>
   17c4c:	push	{fp, lr}
   17c50:	mov	fp, sp
   17c54:	sub	sp, sp, #48	; 0x30
   17c58:	vmov.i32	q8, #0	; 0x00000000
   17c5c:	mov	ip, #32
   17c60:	mov	r3, sp
   17c64:	mov	lr, r2
   17c68:	cmp	r1, #10
   17c6c:	add	r2, r3, #16
   17c70:	vst1.64	{d16-d17}, [r3], ip
   17c74:	vst1.64	{d16-d17}, [r3]
   17c78:	vst1.64	{d16-d17}, [r2]
   17c7c:	beq	17c9c <__assert_fail@plt+0x6448>
   17c80:	str	r1, [sp]
   17c84:	mov	r3, sp
   17c88:	mov	r1, lr
   17c8c:	mvn	r2, #0
   17c90:	bl	17a7c <__assert_fail@plt+0x6228>
   17c94:	mov	sp, fp
   17c98:	pop	{fp, pc}
   17c9c:	bl	11818 <abort@plt>
   17ca0:	push	{r4, sl, fp, lr}
   17ca4:	add	fp, sp, #8
   17ca8:	sub	sp, sp, #48	; 0x30
   17cac:	mov	ip, r3
   17cb0:	mov	r3, sp
   17cb4:	vmov.i32	q8, #0	; 0x00000000
   17cb8:	mov	lr, #32
   17cbc:	cmp	r1, #10
   17cc0:	add	r4, r3, #16
   17cc4:	vst1.64	{d16-d17}, [r3], lr
   17cc8:	vst1.64	{d16-d17}, [r3]
   17ccc:	vst1.64	{d16-d17}, [r4]
   17cd0:	beq	17cf0 <__assert_fail@plt+0x649c>
   17cd4:	str	r1, [sp]
   17cd8:	mov	r1, r2
   17cdc:	mov	r3, sp
   17ce0:	mov	r2, ip
   17ce4:	bl	17a7c <__assert_fail@plt+0x6228>
   17ce8:	sub	sp, fp, #8
   17cec:	pop	{r4, sl, fp, pc}
   17cf0:	bl	11818 <abort@plt>
   17cf4:	push	{fp, lr}
   17cf8:	mov	fp, sp
   17cfc:	sub	sp, sp, #48	; 0x30
   17d00:	mov	r3, sp
   17d04:	vmov.i32	q8, #0	; 0x00000000
   17d08:	mov	ip, #32
   17d0c:	cmp	r0, #10
   17d10:	add	r2, r3, #16
   17d14:	vst1.64	{d16-d17}, [r3], ip
   17d18:	vst1.64	{d16-d17}, [r3]
   17d1c:	vst1.64	{d16-d17}, [r2]
   17d20:	beq	17d40 <__assert_fail@plt+0x64ec>
   17d24:	str	r0, [sp]
   17d28:	mov	r3, sp
   17d2c:	mov	r0, #0
   17d30:	mvn	r2, #0
   17d34:	bl	17a7c <__assert_fail@plt+0x6228>
   17d38:	mov	sp, fp
   17d3c:	pop	{fp, pc}
   17d40:	bl	11818 <abort@plt>
   17d44:	push	{fp, lr}
   17d48:	mov	fp, sp
   17d4c:	sub	sp, sp, #48	; 0x30
   17d50:	mov	r3, sp
   17d54:	vmov.i32	q8, #0	; 0x00000000
   17d58:	mov	ip, #32
   17d5c:	cmp	r0, #10
   17d60:	add	lr, r3, #16
   17d64:	vst1.64	{d16-d17}, [r3], ip
   17d68:	vst1.64	{d16-d17}, [r3]
   17d6c:	vst1.64	{d16-d17}, [lr]
   17d70:	beq	17d8c <__assert_fail@plt+0x6538>
   17d74:	str	r0, [sp]
   17d78:	mov	r3, sp
   17d7c:	mov	r0, #0
   17d80:	bl	17a7c <__assert_fail@plt+0x6228>
   17d84:	mov	sp, fp
   17d88:	pop	{fp, pc}
   17d8c:	bl	11818 <abort@plt>
   17d90:	push	{r4, sl, fp, lr}
   17d94:	add	fp, sp, #8
   17d98:	sub	sp, sp, #48	; 0x30
   17d9c:	mov	lr, r0
   17da0:	movw	r0, #53768	; 0xd208
   17da4:	mov	r3, #32
   17da8:	mov	ip, r1
   17dac:	mov	r4, #1
   17db0:	movt	r0, #2
   17db4:	add	r1, r0, #16
   17db8:	vld1.64	{d16-d17}, [r0], r3
   17dbc:	mov	r3, sp
   17dc0:	vld1.64	{d18-d19}, [r1]
   17dc4:	add	r1, r3, #16
   17dc8:	vld1.64	{d20-d21}, [r0]
   17dcc:	add	r0, r3, #32
   17dd0:	vst1.64	{d18-d19}, [r1]
   17dd4:	mov	r1, r3
   17dd8:	vst1.64	{d20-d21}, [r0]
   17ddc:	mov	r0, #28
   17de0:	and	r0, r0, r2, lsr #3
   17de4:	and	r2, r2, #31
   17de8:	vst1.64	{d16-d17}, [r1], r0
   17dec:	ldr	r0, [r1, #8]
   17df0:	bic	r4, r4, r0, lsr r2
   17df4:	eor	r0, r0, r4, lsl r2
   17df8:	mov	r2, ip
   17dfc:	str	r0, [r1, #8]
   17e00:	mov	r0, #0
   17e04:	mov	r1, lr
   17e08:	bl	17a7c <__assert_fail@plt+0x6228>
   17e0c:	sub	sp, fp, #8
   17e10:	pop	{r4, sl, fp, pc}
   17e14:	push	{fp, lr}
   17e18:	mov	fp, sp
   17e1c:	sub	sp, sp, #48	; 0x30
   17e20:	mov	ip, r0
   17e24:	movw	r0, #53768	; 0xd208
   17e28:	mov	r3, #32
   17e2c:	movt	r0, #2
   17e30:	add	r2, r0, #16
   17e34:	vld1.64	{d16-d17}, [r0], r3
   17e38:	mov	r3, sp
   17e3c:	vld1.64	{d18-d19}, [r2]
   17e40:	add	r2, r3, #16
   17e44:	vld1.64	{d20-d21}, [r0]
   17e48:	add	r0, r3, #32
   17e4c:	vst1.64	{d18-d19}, [r2]
   17e50:	mov	r2, r3
   17e54:	vst1.64	{d20-d21}, [r0]
   17e58:	mov	r0, #28
   17e5c:	and	r0, r0, r1, lsr #3
   17e60:	and	r1, r1, #31
   17e64:	vst1.64	{d16-d17}, [r2], r0
   17e68:	mov	r0, #1
   17e6c:	ldr	lr, [r2, #8]
   17e70:	bic	r0, r0, lr, lsr r1
   17e74:	eor	r0, lr, r0, lsl r1
   17e78:	mov	r1, ip
   17e7c:	str	r0, [r2, #8]
   17e80:	mov	r0, #0
   17e84:	mvn	r2, #0
   17e88:	bl	17a7c <__assert_fail@plt+0x6228>
   17e8c:	mov	sp, fp
   17e90:	pop	{fp, pc}
   17e94:	push	{fp, lr}
   17e98:	mov	fp, sp
   17e9c:	sub	sp, sp, #48	; 0x30
   17ea0:	movw	r2, #53768	; 0xd208
   17ea4:	mov	r3, #32
   17ea8:	mov	r1, r0
   17eac:	movt	r2, #2
   17eb0:	add	r0, r2, #16
   17eb4:	vld1.64	{d16-d17}, [r2], r3
   17eb8:	mov	r3, sp
   17ebc:	vld1.64	{d18-d19}, [r0]
   17ec0:	add	r0, r3, #16
   17ec4:	vld1.64	{d20-d21}, [r2]
   17ec8:	mov	r2, r3
   17ecc:	vst1.64	{d18-d19}, [r0]
   17ed0:	add	r0, r3, #32
   17ed4:	vst1.64	{d20-d21}, [r0]
   17ed8:	mov	r0, #12
   17edc:	vst1.64	{d16-d17}, [r2], r0
   17ee0:	ldr	r0, [r2]
   17ee4:	orr	r0, r0, #67108864	; 0x4000000
   17ee8:	str	r0, [r2]
   17eec:	mov	r0, #0
   17ef0:	mvn	r2, #0
   17ef4:	bl	17a7c <__assert_fail@plt+0x6228>
   17ef8:	mov	sp, fp
   17efc:	pop	{fp, pc}
   17f00:	push	{fp, lr}
   17f04:	mov	fp, sp
   17f08:	sub	sp, sp, #48	; 0x30
   17f0c:	mov	ip, r1
   17f10:	mov	r1, r0
   17f14:	movw	r0, #53768	; 0xd208
   17f18:	mov	r3, #32
   17f1c:	movt	r0, #2
   17f20:	add	r2, r0, #16
   17f24:	vld1.64	{d16-d17}, [r0], r3
   17f28:	mov	r3, sp
   17f2c:	vld1.64	{d18-d19}, [r2]
   17f30:	add	r2, r3, #16
   17f34:	vld1.64	{d20-d21}, [r0]
   17f38:	add	r0, r3, #32
   17f3c:	vst1.64	{d18-d19}, [r2]
   17f40:	mov	r2, r3
   17f44:	vst1.64	{d20-d21}, [r0]
   17f48:	mov	r0, #12
   17f4c:	vst1.64	{d16-d17}, [r2], r0
   17f50:	ldr	r0, [r2]
   17f54:	orr	r0, r0, #67108864	; 0x4000000
   17f58:	str	r0, [r2]
   17f5c:	mov	r0, #0
   17f60:	mov	r2, ip
   17f64:	bl	17a7c <__assert_fail@plt+0x6228>
   17f68:	mov	sp, fp
   17f6c:	pop	{fp, pc}
   17f70:	push	{r4, sl, fp, lr}
   17f74:	add	fp, sp, #8
   17f78:	sub	sp, sp, #96	; 0x60
   17f7c:	mov	ip, r2
   17f80:	mov	r2, sp
   17f84:	vmov.i32	q8, #0	; 0x00000000
   17f88:	mov	r4, #28
   17f8c:	cmp	r1, #10
   17f90:	mov	r3, r2
   17f94:	add	lr, r2, #16
   17f98:	vst1.64	{d16-d17}, [r3], r4
   17f9c:	vst1.64	{d16-d17}, [lr]
   17fa0:	vst1.32	{d16-d17}, [r3]
   17fa4:	beq	17ff4 <__assert_fail@plt+0x67a0>
   17fa8:	vld1.64	{d16-d17}, [r2], r4
   17fac:	vld1.64	{d18-d19}, [lr]
   17fb0:	add	r3, sp, #48	; 0x30
   17fb4:	add	r4, r3, #4
   17fb8:	vld1.32	{d20-d21}, [r2]
   17fbc:	add	r2, r3, #20
   17fc0:	vst1.32	{d16-d17}, [r4]
   17fc4:	vst1.32	{d18-d19}, [r2]
   17fc8:	add	r2, r3, #32
   17fcc:	vst1.32	{d20-d21}, [r2]
   17fd0:	str	r1, [sp, #48]	; 0x30
   17fd4:	mvn	r2, #0
   17fd8:	ldr	r1, [sp, #60]	; 0x3c
   17fdc:	orr	r1, r1, #67108864	; 0x4000000
   17fe0:	str	r1, [sp, #60]	; 0x3c
   17fe4:	mov	r1, ip
   17fe8:	bl	17a7c <__assert_fail@plt+0x6228>
   17fec:	sub	sp, fp, #8
   17ff0:	pop	{r4, sl, fp, pc}
   17ff4:	bl	11818 <abort@plt>
   17ff8:	push	{r4, r5, fp, lr}
   17ffc:	add	fp, sp, #8
   18000:	sub	sp, sp, #48	; 0x30
   18004:	mov	ip, r3
   18008:	movw	r3, #53768	; 0xd208
   1800c:	mov	lr, #32
   18010:	cmp	r1, #0
   18014:	mov	r5, sp
   18018:	movt	r3, #2
   1801c:	cmpne	r2, #0
   18020:	add	r4, r3, #16
   18024:	vld1.64	{d16-d17}, [r3], lr
   18028:	vld1.64	{d18-d19}, [r4]
   1802c:	add	r4, r5, #16
   18030:	vld1.64	{d20-d21}, [r3]
   18034:	vst1.64	{d16-d17}, [r5], lr
   18038:	mov	r3, #10
   1803c:	vst1.64	{d18-d19}, [r4]
   18040:	vst1.64	{d20-d21}, [r5]
   18044:	str	r3, [sp]
   18048:	bne	18050 <__assert_fail@plt+0x67fc>
   1804c:	bl	11818 <abort@plt>
   18050:	str	r2, [sp, #44]	; 0x2c
   18054:	str	r1, [sp, #40]	; 0x28
   18058:	mov	r3, sp
   1805c:	mov	r1, ip
   18060:	mvn	r2, #0
   18064:	bl	17a7c <__assert_fail@plt+0x6228>
   18068:	sub	sp, fp, #8
   1806c:	pop	{r4, r5, fp, pc}
   18070:	push	{r4, r5, fp, lr}
   18074:	add	fp, sp, #8
   18078:	sub	sp, sp, #48	; 0x30
   1807c:	mov	lr, r3
   18080:	movw	r3, #53768	; 0xd208
   18084:	mov	ip, #32
   18088:	cmp	r1, #0
   1808c:	mov	r5, sp
   18090:	movt	r3, #2
   18094:	cmpne	r2, #0
   18098:	add	r4, r3, #16
   1809c:	vld1.64	{d16-d17}, [r3], ip
   180a0:	vld1.64	{d18-d19}, [r4]
   180a4:	add	r4, r5, #16
   180a8:	vld1.64	{d20-d21}, [r3]
   180ac:	vst1.64	{d16-d17}, [r5], ip
   180b0:	mov	r3, #10
   180b4:	vst1.64	{d18-d19}, [r4]
   180b8:	vst1.64	{d20-d21}, [r5]
   180bc:	str	r3, [sp]
   180c0:	bne	180c8 <__assert_fail@plt+0x6874>
   180c4:	bl	11818 <abort@plt>
   180c8:	ldr	ip, [fp, #8]
   180cc:	str	r2, [sp, #44]	; 0x2c
   180d0:	str	r1, [sp, #40]	; 0x28
   180d4:	mov	r3, sp
   180d8:	mov	r1, lr
   180dc:	mov	r2, ip
   180e0:	bl	17a7c <__assert_fail@plt+0x6228>
   180e4:	sub	sp, fp, #8
   180e8:	pop	{r4, r5, fp, pc}
   180ec:	push	{r4, sl, fp, lr}
   180f0:	add	fp, sp, #8
   180f4:	sub	sp, sp, #48	; 0x30
   180f8:	mov	ip, r2
   180fc:	movw	r2, #53768	; 0xd208
   18100:	mov	lr, #32
   18104:	cmp	r0, #0
   18108:	mov	r4, sp
   1810c:	movt	r2, #2
   18110:	cmpne	r1, #0
   18114:	add	r3, r2, #16
   18118:	vld1.64	{d16-d17}, [r2], lr
   1811c:	vld1.64	{d18-d19}, [r3]
   18120:	add	r3, r4, #16
   18124:	vld1.64	{d20-d21}, [r2]
   18128:	vst1.64	{d16-d17}, [r4], lr
   1812c:	mov	r2, #10
   18130:	vst1.64	{d18-d19}, [r3]
   18134:	vst1.64	{d20-d21}, [r4]
   18138:	str	r2, [sp]
   1813c:	bne	18144 <__assert_fail@plt+0x68f0>
   18140:	bl	11818 <abort@plt>
   18144:	str	r1, [sp, #44]	; 0x2c
   18148:	str	r0, [sp, #40]	; 0x28
   1814c:	mov	r3, sp
   18150:	mov	r0, #0
   18154:	mov	r1, ip
   18158:	mvn	r2, #0
   1815c:	bl	17a7c <__assert_fail@plt+0x6228>
   18160:	sub	sp, fp, #8
   18164:	pop	{r4, sl, fp, pc}
   18168:	push	{r4, r5, fp, lr}
   1816c:	add	fp, sp, #8
   18170:	sub	sp, sp, #48	; 0x30
   18174:	mov	lr, r2
   18178:	movw	r2, #53768	; 0xd208
   1817c:	mov	ip, r3
   18180:	mov	r3, #32
   18184:	cmp	r0, #0
   18188:	mov	r5, sp
   1818c:	movt	r2, #2
   18190:	cmpne	r1, #0
   18194:	add	r4, r2, #16
   18198:	vld1.64	{d16-d17}, [r2], r3
   1819c:	vld1.64	{d18-d19}, [r4]
   181a0:	add	r4, r5, #16
   181a4:	vld1.64	{d20-d21}, [r2]
   181a8:	vst1.64	{d16-d17}, [r5], r3
   181ac:	mov	r2, #10
   181b0:	vst1.64	{d18-d19}, [r4]
   181b4:	vst1.64	{d20-d21}, [r5]
   181b8:	str	r2, [sp]
   181bc:	bne	181c4 <__assert_fail@plt+0x6970>
   181c0:	bl	11818 <abort@plt>
   181c4:	str	r1, [sp, #44]	; 0x2c
   181c8:	str	r0, [sp, #40]	; 0x28
   181cc:	mov	r3, sp
   181d0:	mov	r0, #0
   181d4:	mov	r1, lr
   181d8:	mov	r2, ip
   181dc:	bl	17a7c <__assert_fail@plt+0x6228>
   181e0:	sub	sp, fp, #8
   181e4:	pop	{r4, r5, fp, pc}
   181e8:	movw	r3, #53624	; 0xd178
   181ec:	movt	r3, #2
   181f0:	b	17a7c <__assert_fail@plt+0x6228>
   181f4:	movw	r3, #53624	; 0xd178
   181f8:	mov	r2, r1
   181fc:	mov	r1, r0
   18200:	mov	r0, #0
   18204:	movt	r3, #2
   18208:	b	17a7c <__assert_fail@plt+0x6228>
   1820c:	movw	r3, #53624	; 0xd178
   18210:	mvn	r2, #0
   18214:	movt	r3, #2
   18218:	b	17a7c <__assert_fail@plt+0x6228>
   1821c:	movw	r3, #53624	; 0xd178
   18220:	mov	r1, r0
   18224:	mov	r0, #0
   18228:	mvn	r2, #0
   1822c:	movt	r3, #2
   18230:	b	17a7c <__assert_fail@plt+0x6228>
   18234:	push	{r4, r5, fp, lr}
   18238:	add	fp, sp, #8
   1823c:	mov	r5, r0
   18240:	mov	r4, r1
   18244:	mov	r0, #0
   18248:	mov	r2, #5
   1824c:	mov	r1, r5
   18250:	bl	11548 <dcgettext@plt>
   18254:	cmp	r0, r5
   18258:	popne	{r4, r5, fp, pc}
   1825c:	bl	1a264 <__assert_fail@plt+0x8a10>
   18260:	ldrb	r1, [r0]
   18264:	and	r1, r1, #223	; 0xdf
   18268:	cmp	r1, #71	; 0x47
   1826c:	beq	182d4 <__assert_fail@plt+0x6a80>
   18270:	cmp	r1, #85	; 0x55
   18274:	bne	182f8 <__assert_fail@plt+0x6aa4>
   18278:	ldrb	r1, [r0, #1]
   1827c:	and	r1, r1, #223	; 0xdf
   18280:	cmp	r1, #84	; 0x54
   18284:	bne	182f8 <__assert_fail@plt+0x6aa4>
   18288:	ldrb	r1, [r0, #2]
   1828c:	and	r1, r1, #223	; 0xdf
   18290:	cmp	r1, #70	; 0x46
   18294:	ldrbeq	r1, [r0, #3]
   18298:	cmpeq	r1, #45	; 0x2d
   1829c:	bne	182f8 <__assert_fail@plt+0x6aa4>
   182a0:	ldrb	r1, [r0, #4]
   182a4:	cmp	r1, #56	; 0x38
   182a8:	ldrbeq	r0, [r0, #5]
   182ac:	cmpeq	r0, #0
   182b0:	bne	182f8 <__assert_fail@plt+0x6aa4>
   182b4:	ldrb	r1, [r5]
   182b8:	movw	r2, #47624	; 0xba08
   182bc:	movw	r0, #47628	; 0xba0c
   182c0:	movt	r2, #1
   182c4:	movt	r0, #1
   182c8:	cmp	r1, #96	; 0x60
   182cc:	moveq	r0, r2
   182d0:	pop	{r4, r5, fp, pc}
   182d4:	ldrb	r1, [r0, #1]
   182d8:	and	r1, r1, #223	; 0xdf
   182dc:	cmp	r1, #66	; 0x42
   182e0:	bne	182f8 <__assert_fail@plt+0x6aa4>
   182e4:	ldrb	r1, [r0, #2]
   182e8:	cmp	r1, #49	; 0x31
   182ec:	ldrbeq	r1, [r0, #3]
   182f0:	cmpeq	r1, #56	; 0x38
   182f4:	beq	18314 <__assert_fail@plt+0x6ac0>
   182f8:	movw	r1, #47620	; 0xba04
   182fc:	movw	r0, #48969	; 0xbf49
   18300:	cmp	r4, #9
   18304:	movt	r1, #1
   18308:	movt	r0, #1
   1830c:	moveq	r0, r1
   18310:	pop	{r4, r5, fp, pc}
   18314:	ldrb	r1, [r0, #4]
   18318:	cmp	r1, #48	; 0x30
   1831c:	ldrbeq	r1, [r0, #5]
   18320:	cmpeq	r1, #51	; 0x33
   18324:	bne	182f8 <__assert_fail@plt+0x6aa4>
   18328:	ldrb	r1, [r0, #6]
   1832c:	cmp	r1, #48	; 0x30
   18330:	ldrbeq	r0, [r0, #7]
   18334:	cmpeq	r0, #0
   18338:	bne	182f8 <__assert_fail@plt+0x6aa4>
   1833c:	ldrb	r1, [r5]
   18340:	movw	r2, #47632	; 0xba10
   18344:	movw	r0, #47636	; 0xba14
   18348:	movt	r2, #1
   1834c:	movt	r0, #1
   18350:	b	182c8 <__assert_fail@plt+0x6a74>
   18354:	push	{r4, sl, fp, lr}
   18358:	add	fp, sp, #8
   1835c:	sub	sp, sp, #104	; 0x68
   18360:	movw	r1, #48693	; 0xbe35
   18364:	mov	r4, r0
   18368:	mov	r2, sp
   1836c:	mov	r0, #3
   18370:	movt	r1, #1
   18374:	bl	11830 <__lxstat64@plt>
   18378:	mov	r1, r0
   1837c:	mov	r0, #0
   18380:	cmp	r1, #0
   18384:	beq	18390 <__assert_fail@plt+0x6b3c>
   18388:	sub	sp, fp, #8
   1838c:	pop	{r4, sl, fp, pc}
   18390:	ldr	r0, [sp, #96]	; 0x60
   18394:	ldr	r1, [sp, #100]	; 0x64
   18398:	ldm	sp, {r2, r3}
   1839c:	stm	r4, {r0, r1, r2, r3}
   183a0:	mov	r0, r4
   183a4:	sub	sp, fp, #8
   183a8:	pop	{r4, sl, fp, pc}
   183ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183b0:	add	fp, sp, #28
   183b4:	sub	sp, sp, #964	; 0x3c4
   183b8:	sub	sp, sp, #3072	; 0xc00
   183bc:	mov	r4, r2
   183c0:	mov	r5, r1
   183c4:	cmn	r0, #100	; 0x64
   183c8:	beq	183dc <__assert_fail@plt+0x6b88>
   183cc:	mov	r7, r0
   183d0:	ldrb	r0, [r5]
   183d4:	cmp	r0, #47	; 0x2f
   183d8:	bne	183f0 <__assert_fail@plt+0x6b9c>
   183dc:	mov	r0, r5
   183e0:	mov	r1, r4
   183e4:	sub	sp, fp, #28
   183e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183ec:	b	18c8c <__assert_fail@plt+0x7438>
   183f0:	mov	sl, sp
   183f4:	mov	r1, r7
   183f8:	mov	r2, r5
   183fc:	mov	r0, sl
   18400:	bl	19bdc <__assert_fail@plt+0x8388>
   18404:	cmp	r0, #0
   18408:	beq	184f4 <__assert_fail@plt+0x6ca0>
   1840c:	mov	r1, r4
   18410:	mov	r6, r0
   18414:	bl	18c8c <__assert_fail@plt+0x7438>
   18418:	mov	r9, r0
   1841c:	bl	116d4 <__errno_location@plt>
   18420:	ldr	r2, [r0]
   18424:	mov	r8, r0
   18428:	cmp	r6, sl
   1842c:	beq	18440 <__assert_fail@plt+0x6bec>
   18430:	mov	r0, r6
   18434:	mov	r6, r2
   18438:	bl	1a198 <__assert_fail@plt+0x8944>
   1843c:	mov	r2, r6
   18440:	cmn	r9, #1
   18444:	bne	185c0 <__assert_fail@plt+0x6d6c>
   18448:	sub	r0, r2, #1
   1844c:	cmp	r0, #37	; 0x25
   18450:	bhi	185b4 <__assert_fail@plt+0x6d60>
   18454:	add	r1, pc, #0
   18458:	ldr	pc, [r1, r0, lsl #2]
   1845c:	strdeq	r8, [r1], -r4
   18460:	strdeq	r8, [r1], -r4
   18464:			; <UNDEFINED> instruction: 0x000185bc
   18468:			; <UNDEFINED> instruction: 0x000185bc
   1846c:			; <UNDEFINED> instruction: 0x000185bc
   18470:			; <UNDEFINED> instruction: 0x000185bc
   18474:			; <UNDEFINED> instruction: 0x000185bc
   18478:			; <UNDEFINED> instruction: 0x000185bc
   1847c:			; <UNDEFINED> instruction: 0x000185bc
   18480:			; <UNDEFINED> instruction: 0x000185bc
   18484:			; <UNDEFINED> instruction: 0x000185bc
   18488:			; <UNDEFINED> instruction: 0x000185bc
   1848c:	strdeq	r8, [r1], -r4
   18490:			; <UNDEFINED> instruction: 0x000185bc
   18494:			; <UNDEFINED> instruction: 0x000185bc
   18498:			; <UNDEFINED> instruction: 0x000185bc
   1849c:			; <UNDEFINED> instruction: 0x000185bc
   184a0:			; <UNDEFINED> instruction: 0x000185bc
   184a4:			; <UNDEFINED> instruction: 0x000185bc
   184a8:	strdeq	r8, [r1], -r4
   184ac:			; <UNDEFINED> instruction: 0x000185bc
   184b0:			; <UNDEFINED> instruction: 0x000185bc
   184b4:			; <UNDEFINED> instruction: 0x000185bc
   184b8:			; <UNDEFINED> instruction: 0x000185bc
   184bc:			; <UNDEFINED> instruction: 0x000185bc
   184c0:			; <UNDEFINED> instruction: 0x000185bc
   184c4:			; <UNDEFINED> instruction: 0x000185bc
   184c8:			; <UNDEFINED> instruction: 0x000185bc
   184cc:			; <UNDEFINED> instruction: 0x000185bc
   184d0:			; <UNDEFINED> instruction: 0x000185bc
   184d4:			; <UNDEFINED> instruction: 0x000185bc
   184d8:			; <UNDEFINED> instruction: 0x000185bc
   184dc:			; <UNDEFINED> instruction: 0x000185bc
   184e0:			; <UNDEFINED> instruction: 0x000185bc
   184e4:			; <UNDEFINED> instruction: 0x000185bc
   184e8:			; <UNDEFINED> instruction: 0x000185bc
   184ec:			; <UNDEFINED> instruction: 0x000185bc
   184f0:	strdeq	r8, [r1], -r4
   184f4:	mov	r0, sp
   184f8:	bl	1a3b8 <__assert_fail@plt+0x8b64>
   184fc:	cmp	r0, #0
   18500:	bne	185cc <__assert_fail@plt+0x6d78>
   18504:	cmp	r7, #0
   18508:	blt	18534 <__assert_fail@plt+0x6ce0>
   1850c:	ldr	r0, [sp]
   18510:	cmp	r0, r7
   18514:	bne	18534 <__assert_fail@plt+0x6ce0>
   18518:	mov	r0, sp
   1851c:	bl	1a430 <__assert_fail@plt+0x8bdc>
   18520:	bl	116d4 <__errno_location@plt>
   18524:	mov	r1, #9
   18528:	mvn	r9, #0
   1852c:	str	r1, [r0]
   18530:	b	185c0 <__assert_fail@plt+0x6d6c>
   18534:	mov	r0, r7
   18538:	bl	117b8 <fchdir@plt>
   1853c:	cmp	r0, #0
   18540:	beq	18564 <__assert_fail@plt+0x6d10>
   18544:	bl	116d4 <__errno_location@plt>
   18548:	ldr	r5, [r0]
   1854c:	mov	r4, r0
   18550:	mov	r0, sp
   18554:	bl	1a430 <__assert_fail@plt+0x8bdc>
   18558:	str	r5, [r4]
   1855c:	mvn	r9, #0
   18560:	b	185c0 <__assert_fail@plt+0x6d6c>
   18564:	mov	r0, r5
   18568:	mov	r1, r4
   1856c:	bl	18c8c <__assert_fail@plt+0x7438>
   18570:	mov	r9, r0
   18574:	mov	r4, #0
   18578:	cmn	r0, #1
   1857c:	bne	18588 <__assert_fail@plt+0x6d34>
   18580:	bl	116d4 <__errno_location@plt>
   18584:	ldr	r4, [r0]
   18588:	mov	r0, sp
   1858c:	bl	1a414 <__assert_fail@plt+0x8bc0>
   18590:	cmp	r0, #0
   18594:	bne	185d8 <__assert_fail@plt+0x6d84>
   18598:	mov	r0, sp
   1859c:	bl	1a430 <__assert_fail@plt+0x8bdc>
   185a0:	cmp	r4, #0
   185a4:	beq	185c0 <__assert_fail@plt+0x6d6c>
   185a8:	bl	116d4 <__errno_location@plt>
   185ac:	str	r4, [r0]
   185b0:	b	185c0 <__assert_fail@plt+0x6d6c>
   185b4:	cmp	r2, #95	; 0x5f
   185b8:	beq	184f4 <__assert_fail@plt+0x6ca0>
   185bc:	str	r2, [r8]
   185c0:	mov	r0, r9
   185c4:	sub	sp, fp, #28
   185c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185cc:	bl	116d4 <__errno_location@plt>
   185d0:	ldr	r0, [r0]
   185d4:	bl	1a2fc <__assert_fail@plt+0x8aa8>
   185d8:	bl	116d4 <__errno_location@plt>
   185dc:	ldr	r0, [r0]
   185e0:	bl	1a33c <__assert_fail@plt+0x8ae8>
   185e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e8:	add	fp, sp, #28
   185ec:	sub	sp, sp, #964	; 0x3c4
   185f0:	sub	sp, sp, #3072	; 0xc00
   185f4:	mov	r4, r2
   185f8:	mov	r5, r1
   185fc:	cmn	r0, #100	; 0x64
   18600:	beq	18614 <__assert_fail@plt+0x6dc0>
   18604:	mov	r7, r0
   18608:	ldrb	r0, [r5]
   1860c:	cmp	r0, #47	; 0x2f
   18610:	bne	18628 <__assert_fail@plt+0x6dd4>
   18614:	mov	r0, r5
   18618:	mov	r1, r4
   1861c:	sub	sp, fp, #28
   18620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18624:	b	18d00 <__assert_fail@plt+0x74ac>
   18628:	mov	sl, sp
   1862c:	mov	r1, r7
   18630:	mov	r2, r5
   18634:	mov	r0, sl
   18638:	bl	19bdc <__assert_fail@plt+0x8388>
   1863c:	cmp	r0, #0
   18640:	beq	1872c <__assert_fail@plt+0x6ed8>
   18644:	mov	r1, r4
   18648:	mov	r6, r0
   1864c:	bl	18d00 <__assert_fail@plt+0x74ac>
   18650:	mov	r9, r0
   18654:	bl	116d4 <__errno_location@plt>
   18658:	ldr	r2, [r0]
   1865c:	mov	r8, r0
   18660:	cmp	r6, sl
   18664:	beq	18678 <__assert_fail@plt+0x6e24>
   18668:	mov	r0, r6
   1866c:	mov	r6, r2
   18670:	bl	1a198 <__assert_fail@plt+0x8944>
   18674:	mov	r2, r6
   18678:	cmn	r9, #1
   1867c:	bne	187f8 <__assert_fail@plt+0x6fa4>
   18680:	sub	r0, r2, #1
   18684:	cmp	r0, #37	; 0x25
   18688:	bhi	187ec <__assert_fail@plt+0x6f98>
   1868c:	add	r1, pc, #0
   18690:	ldr	pc, [r1, r0, lsl #2]
   18694:	andeq	r8, r1, ip, lsr #14
   18698:	andeq	r8, r1, ip, lsr #14
   1869c:	strdeq	r8, [r1], -r4
   186a0:	strdeq	r8, [r1], -r4
   186a4:	strdeq	r8, [r1], -r4
   186a8:	strdeq	r8, [r1], -r4
   186ac:	strdeq	r8, [r1], -r4
   186b0:	strdeq	r8, [r1], -r4
   186b4:	strdeq	r8, [r1], -r4
   186b8:	strdeq	r8, [r1], -r4
   186bc:	strdeq	r8, [r1], -r4
   186c0:	strdeq	r8, [r1], -r4
   186c4:	andeq	r8, r1, ip, lsr #14
   186c8:	strdeq	r8, [r1], -r4
   186cc:	strdeq	r8, [r1], -r4
   186d0:	strdeq	r8, [r1], -r4
   186d4:	strdeq	r8, [r1], -r4
   186d8:	strdeq	r8, [r1], -r4
   186dc:	strdeq	r8, [r1], -r4
   186e0:	andeq	r8, r1, ip, lsr #14
   186e4:	strdeq	r8, [r1], -r4
   186e8:	strdeq	r8, [r1], -r4
   186ec:	strdeq	r8, [r1], -r4
   186f0:	strdeq	r8, [r1], -r4
   186f4:	strdeq	r8, [r1], -r4
   186f8:	strdeq	r8, [r1], -r4
   186fc:	strdeq	r8, [r1], -r4
   18700:	strdeq	r8, [r1], -r4
   18704:	strdeq	r8, [r1], -r4
   18708:	strdeq	r8, [r1], -r4
   1870c:	strdeq	r8, [r1], -r4
   18710:	strdeq	r8, [r1], -r4
   18714:	strdeq	r8, [r1], -r4
   18718:	strdeq	r8, [r1], -r4
   1871c:	strdeq	r8, [r1], -r4
   18720:	strdeq	r8, [r1], -r4
   18724:	strdeq	r8, [r1], -r4
   18728:	andeq	r8, r1, ip, lsr #14
   1872c:	mov	r0, sp
   18730:	bl	1a3b8 <__assert_fail@plt+0x8b64>
   18734:	cmp	r0, #0
   18738:	bne	18804 <__assert_fail@plt+0x6fb0>
   1873c:	cmp	r7, #0
   18740:	blt	1876c <__assert_fail@plt+0x6f18>
   18744:	ldr	r0, [sp]
   18748:	cmp	r0, r7
   1874c:	bne	1876c <__assert_fail@plt+0x6f18>
   18750:	mov	r0, sp
   18754:	bl	1a430 <__assert_fail@plt+0x8bdc>
   18758:	bl	116d4 <__errno_location@plt>
   1875c:	mov	r1, #9
   18760:	mvn	r9, #0
   18764:	str	r1, [r0]
   18768:	b	187f8 <__assert_fail@plt+0x6fa4>
   1876c:	mov	r0, r7
   18770:	bl	117b8 <fchdir@plt>
   18774:	cmp	r0, #0
   18778:	beq	1879c <__assert_fail@plt+0x6f48>
   1877c:	bl	116d4 <__errno_location@plt>
   18780:	ldr	r5, [r0]
   18784:	mov	r4, r0
   18788:	mov	r0, sp
   1878c:	bl	1a430 <__assert_fail@plt+0x8bdc>
   18790:	str	r5, [r4]
   18794:	mvn	r9, #0
   18798:	b	187f8 <__assert_fail@plt+0x6fa4>
   1879c:	mov	r0, r5
   187a0:	mov	r1, r4
   187a4:	bl	18d00 <__assert_fail@plt+0x74ac>
   187a8:	mov	r9, r0
   187ac:	mov	r4, #0
   187b0:	cmn	r0, #1
   187b4:	bne	187c0 <__assert_fail@plt+0x6f6c>
   187b8:	bl	116d4 <__errno_location@plt>
   187bc:	ldr	r4, [r0]
   187c0:	mov	r0, sp
   187c4:	bl	1a414 <__assert_fail@plt+0x8bc0>
   187c8:	cmp	r0, #0
   187cc:	bne	18810 <__assert_fail@plt+0x6fbc>
   187d0:	mov	r0, sp
   187d4:	bl	1a430 <__assert_fail@plt+0x8bdc>
   187d8:	cmp	r4, #0
   187dc:	beq	187f8 <__assert_fail@plt+0x6fa4>
   187e0:	bl	116d4 <__errno_location@plt>
   187e4:	str	r4, [r0]
   187e8:	b	187f8 <__assert_fail@plt+0x6fa4>
   187ec:	cmp	r2, #95	; 0x5f
   187f0:	beq	1872c <__assert_fail@plt+0x6ed8>
   187f4:	str	r2, [r8]
   187f8:	mov	r0, r9
   187fc:	sub	sp, fp, #28
   18800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18804:	bl	116d4 <__errno_location@plt>
   18808:	ldr	r0, [r0]
   1880c:	bl	1a2fc <__assert_fail@plt+0x8aa8>
   18810:	bl	116d4 <__errno_location@plt>
   18814:	ldr	r0, [r0]
   18818:	bl	1a33c <__assert_fail@plt+0x8ae8>
   1881c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18820:	add	fp, sp, #28
   18824:	sub	sp, sp, #964	; 0x3c4
   18828:	sub	sp, sp, #3072	; 0xc00
   1882c:	mov	r4, r2
   18830:	mov	r5, r1
   18834:	cmn	r0, #100	; 0x64
   18838:	beq	1884c <__assert_fail@plt+0x6ff8>
   1883c:	mov	r7, r0
   18840:	ldrb	r0, [r5]
   18844:	cmp	r0, #47	; 0x2f
   18848:	bne	18860 <__assert_fail@plt+0x700c>
   1884c:	mov	r0, r5
   18850:	mov	r1, r4
   18854:	sub	sp, fp, #28
   18858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1885c:	b	11734 <setfilecon@plt>
   18860:	mov	sl, sp
   18864:	mov	r1, r7
   18868:	mov	r2, r5
   1886c:	mov	r0, sl
   18870:	bl	19bdc <__assert_fail@plt+0x8388>
   18874:	cmp	r0, #0
   18878:	beq	18964 <__assert_fail@plt+0x7110>
   1887c:	mov	r1, r4
   18880:	mov	r6, r0
   18884:	bl	11734 <setfilecon@plt>
   18888:	mov	r9, r0
   1888c:	bl	116d4 <__errno_location@plt>
   18890:	ldr	r2, [r0]
   18894:	mov	r8, r0
   18898:	cmp	r6, sl
   1889c:	beq	188b0 <__assert_fail@plt+0x705c>
   188a0:	mov	r0, r6
   188a4:	mov	r6, r2
   188a8:	bl	1a198 <__assert_fail@plt+0x8944>
   188ac:	mov	r2, r6
   188b0:	cmn	r9, #1
   188b4:	bne	18a30 <__assert_fail@plt+0x71dc>
   188b8:	sub	r0, r2, #1
   188bc:	cmp	r0, #37	; 0x25
   188c0:	bhi	18a24 <__assert_fail@plt+0x71d0>
   188c4:	add	r1, pc, #0
   188c8:	ldr	pc, [r1, r0, lsl #2]
   188cc:	andeq	r8, r1, r4, ror #18
   188d0:	andeq	r8, r1, r4, ror #18
   188d4:	andeq	r8, r1, ip, lsr #20
   188d8:	andeq	r8, r1, ip, lsr #20
   188dc:	andeq	r8, r1, ip, lsr #20
   188e0:	andeq	r8, r1, ip, lsr #20
   188e4:	andeq	r8, r1, ip, lsr #20
   188e8:	andeq	r8, r1, ip, lsr #20
   188ec:	andeq	r8, r1, ip, lsr #20
   188f0:	andeq	r8, r1, ip, lsr #20
   188f4:	andeq	r8, r1, ip, lsr #20
   188f8:	andeq	r8, r1, ip, lsr #20
   188fc:	andeq	r8, r1, r4, ror #18
   18900:	andeq	r8, r1, ip, lsr #20
   18904:	andeq	r8, r1, ip, lsr #20
   18908:	andeq	r8, r1, ip, lsr #20
   1890c:	andeq	r8, r1, ip, lsr #20
   18910:	andeq	r8, r1, ip, lsr #20
   18914:	andeq	r8, r1, ip, lsr #20
   18918:	andeq	r8, r1, r4, ror #18
   1891c:	andeq	r8, r1, ip, lsr #20
   18920:	andeq	r8, r1, ip, lsr #20
   18924:	andeq	r8, r1, ip, lsr #20
   18928:	andeq	r8, r1, ip, lsr #20
   1892c:	andeq	r8, r1, ip, lsr #20
   18930:	andeq	r8, r1, ip, lsr #20
   18934:	andeq	r8, r1, ip, lsr #20
   18938:	andeq	r8, r1, ip, lsr #20
   1893c:	andeq	r8, r1, ip, lsr #20
   18940:	andeq	r8, r1, ip, lsr #20
   18944:	andeq	r8, r1, ip, lsr #20
   18948:	andeq	r8, r1, ip, lsr #20
   1894c:	andeq	r8, r1, ip, lsr #20
   18950:	andeq	r8, r1, ip, lsr #20
   18954:	andeq	r8, r1, ip, lsr #20
   18958:	andeq	r8, r1, ip, lsr #20
   1895c:	andeq	r8, r1, ip, lsr #20
   18960:	andeq	r8, r1, r4, ror #18
   18964:	mov	r0, sp
   18968:	bl	1a3b8 <__assert_fail@plt+0x8b64>
   1896c:	cmp	r0, #0
   18970:	bne	18a3c <__assert_fail@plt+0x71e8>
   18974:	cmp	r7, #0
   18978:	blt	189a4 <__assert_fail@plt+0x7150>
   1897c:	ldr	r0, [sp]
   18980:	cmp	r0, r7
   18984:	bne	189a4 <__assert_fail@plt+0x7150>
   18988:	mov	r0, sp
   1898c:	bl	1a430 <__assert_fail@plt+0x8bdc>
   18990:	bl	116d4 <__errno_location@plt>
   18994:	mov	r1, #9
   18998:	mvn	r9, #0
   1899c:	str	r1, [r0]
   189a0:	b	18a30 <__assert_fail@plt+0x71dc>
   189a4:	mov	r0, r7
   189a8:	bl	117b8 <fchdir@plt>
   189ac:	cmp	r0, #0
   189b0:	beq	189d4 <__assert_fail@plt+0x7180>
   189b4:	bl	116d4 <__errno_location@plt>
   189b8:	ldr	r5, [r0]
   189bc:	mov	r4, r0
   189c0:	mov	r0, sp
   189c4:	bl	1a430 <__assert_fail@plt+0x8bdc>
   189c8:	str	r5, [r4]
   189cc:	mvn	r9, #0
   189d0:	b	18a30 <__assert_fail@plt+0x71dc>
   189d4:	mov	r0, r5
   189d8:	mov	r1, r4
   189dc:	bl	11734 <setfilecon@plt>
   189e0:	mov	r9, r0
   189e4:	mov	r4, #0
   189e8:	cmn	r0, #1
   189ec:	bne	189f8 <__assert_fail@plt+0x71a4>
   189f0:	bl	116d4 <__errno_location@plt>
   189f4:	ldr	r4, [r0]
   189f8:	mov	r0, sp
   189fc:	bl	1a414 <__assert_fail@plt+0x8bc0>
   18a00:	cmp	r0, #0
   18a04:	bne	18a48 <__assert_fail@plt+0x71f4>
   18a08:	mov	r0, sp
   18a0c:	bl	1a430 <__assert_fail@plt+0x8bdc>
   18a10:	cmp	r4, #0
   18a14:	beq	18a30 <__assert_fail@plt+0x71dc>
   18a18:	bl	116d4 <__errno_location@plt>
   18a1c:	str	r4, [r0]
   18a20:	b	18a30 <__assert_fail@plt+0x71dc>
   18a24:	cmp	r2, #95	; 0x5f
   18a28:	beq	18964 <__assert_fail@plt+0x7110>
   18a2c:	str	r2, [r8]
   18a30:	mov	r0, r9
   18a34:	sub	sp, fp, #28
   18a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a3c:	bl	116d4 <__errno_location@plt>
   18a40:	ldr	r0, [r0]
   18a44:	bl	1a2fc <__assert_fail@plt+0x8aa8>
   18a48:	bl	116d4 <__errno_location@plt>
   18a4c:	ldr	r0, [r0]
   18a50:	bl	1a33c <__assert_fail@plt+0x8ae8>
   18a54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a58:	add	fp, sp, #28
   18a5c:	sub	sp, sp, #964	; 0x3c4
   18a60:	sub	sp, sp, #3072	; 0xc00
   18a64:	mov	r4, r2
   18a68:	mov	r5, r1
   18a6c:	cmn	r0, #100	; 0x64
   18a70:	beq	18a84 <__assert_fail@plt+0x7230>
   18a74:	mov	r7, r0
   18a78:	ldrb	r0, [r5]
   18a7c:	cmp	r0, #47	; 0x2f
   18a80:	bne	18a98 <__assert_fail@plt+0x7244>
   18a84:	mov	r0, r5
   18a88:	mov	r1, r4
   18a8c:	sub	sp, fp, #28
   18a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a94:	b	114dc <lsetfilecon@plt>
   18a98:	mov	sl, sp
   18a9c:	mov	r1, r7
   18aa0:	mov	r2, r5
   18aa4:	mov	r0, sl
   18aa8:	bl	19bdc <__assert_fail@plt+0x8388>
   18aac:	cmp	r0, #0
   18ab0:	beq	18b9c <__assert_fail@plt+0x7348>
   18ab4:	mov	r1, r4
   18ab8:	mov	r6, r0
   18abc:	bl	114dc <lsetfilecon@plt>
   18ac0:	mov	r9, r0
   18ac4:	bl	116d4 <__errno_location@plt>
   18ac8:	ldr	r2, [r0]
   18acc:	mov	r8, r0
   18ad0:	cmp	r6, sl
   18ad4:	beq	18ae8 <__assert_fail@plt+0x7294>
   18ad8:	mov	r0, r6
   18adc:	mov	r6, r2
   18ae0:	bl	1a198 <__assert_fail@plt+0x8944>
   18ae4:	mov	r2, r6
   18ae8:	cmn	r9, #1
   18aec:	bne	18c68 <__assert_fail@plt+0x7414>
   18af0:	sub	r0, r2, #1
   18af4:	cmp	r0, #37	; 0x25
   18af8:	bhi	18c5c <__assert_fail@plt+0x7408>
   18afc:	add	r1, pc, #0
   18b00:	ldr	pc, [r1, r0, lsl #2]
   18b04:	muleq	r1, ip, fp
   18b08:	muleq	r1, ip, fp
   18b0c:	andeq	r8, r1, r4, ror #24
   18b10:	andeq	r8, r1, r4, ror #24
   18b14:	andeq	r8, r1, r4, ror #24
   18b18:	andeq	r8, r1, r4, ror #24
   18b1c:	andeq	r8, r1, r4, ror #24
   18b20:	andeq	r8, r1, r4, ror #24
   18b24:	andeq	r8, r1, r4, ror #24
   18b28:	andeq	r8, r1, r4, ror #24
   18b2c:	andeq	r8, r1, r4, ror #24
   18b30:	andeq	r8, r1, r4, ror #24
   18b34:	muleq	r1, ip, fp
   18b38:	andeq	r8, r1, r4, ror #24
   18b3c:	andeq	r8, r1, r4, ror #24
   18b40:	andeq	r8, r1, r4, ror #24
   18b44:	andeq	r8, r1, r4, ror #24
   18b48:	andeq	r8, r1, r4, ror #24
   18b4c:	andeq	r8, r1, r4, ror #24
   18b50:	muleq	r1, ip, fp
   18b54:	andeq	r8, r1, r4, ror #24
   18b58:	andeq	r8, r1, r4, ror #24
   18b5c:	andeq	r8, r1, r4, ror #24
   18b60:	andeq	r8, r1, r4, ror #24
   18b64:	andeq	r8, r1, r4, ror #24
   18b68:	andeq	r8, r1, r4, ror #24
   18b6c:	andeq	r8, r1, r4, ror #24
   18b70:	andeq	r8, r1, r4, ror #24
   18b74:	andeq	r8, r1, r4, ror #24
   18b78:	andeq	r8, r1, r4, ror #24
   18b7c:	andeq	r8, r1, r4, ror #24
   18b80:	andeq	r8, r1, r4, ror #24
   18b84:	andeq	r8, r1, r4, ror #24
   18b88:	andeq	r8, r1, r4, ror #24
   18b8c:	andeq	r8, r1, r4, ror #24
   18b90:	andeq	r8, r1, r4, ror #24
   18b94:	andeq	r8, r1, r4, ror #24
   18b98:	muleq	r1, ip, fp
   18b9c:	mov	r0, sp
   18ba0:	bl	1a3b8 <__assert_fail@plt+0x8b64>
   18ba4:	cmp	r0, #0
   18ba8:	bne	18c74 <__assert_fail@plt+0x7420>
   18bac:	cmp	r7, #0
   18bb0:	blt	18bdc <__assert_fail@plt+0x7388>
   18bb4:	ldr	r0, [sp]
   18bb8:	cmp	r0, r7
   18bbc:	bne	18bdc <__assert_fail@plt+0x7388>
   18bc0:	mov	r0, sp
   18bc4:	bl	1a430 <__assert_fail@plt+0x8bdc>
   18bc8:	bl	116d4 <__errno_location@plt>
   18bcc:	mov	r1, #9
   18bd0:	mvn	r9, #0
   18bd4:	str	r1, [r0]
   18bd8:	b	18c68 <__assert_fail@plt+0x7414>
   18bdc:	mov	r0, r7
   18be0:	bl	117b8 <fchdir@plt>
   18be4:	cmp	r0, #0
   18be8:	beq	18c0c <__assert_fail@plt+0x73b8>
   18bec:	bl	116d4 <__errno_location@plt>
   18bf0:	ldr	r5, [r0]
   18bf4:	mov	r4, r0
   18bf8:	mov	r0, sp
   18bfc:	bl	1a430 <__assert_fail@plt+0x8bdc>
   18c00:	str	r5, [r4]
   18c04:	mvn	r9, #0
   18c08:	b	18c68 <__assert_fail@plt+0x7414>
   18c0c:	mov	r0, r5
   18c10:	mov	r1, r4
   18c14:	bl	114dc <lsetfilecon@plt>
   18c18:	mov	r9, r0
   18c1c:	mov	r4, #0
   18c20:	cmn	r0, #1
   18c24:	bne	18c30 <__assert_fail@plt+0x73dc>
   18c28:	bl	116d4 <__errno_location@plt>
   18c2c:	ldr	r4, [r0]
   18c30:	mov	r0, sp
   18c34:	bl	1a414 <__assert_fail@plt+0x8bc0>
   18c38:	cmp	r0, #0
   18c3c:	bne	18c80 <__assert_fail@plt+0x742c>
   18c40:	mov	r0, sp
   18c44:	bl	1a430 <__assert_fail@plt+0x8bdc>
   18c48:	cmp	r4, #0
   18c4c:	beq	18c68 <__assert_fail@plt+0x7414>
   18c50:	bl	116d4 <__errno_location@plt>
   18c54:	str	r4, [r0]
   18c58:	b	18c68 <__assert_fail@plt+0x7414>
   18c5c:	cmp	r2, #95	; 0x5f
   18c60:	beq	18b9c <__assert_fail@plt+0x7348>
   18c64:	str	r2, [r8]
   18c68:	mov	r0, r9
   18c6c:	sub	sp, fp, #28
   18c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c74:	bl	116d4 <__errno_location@plt>
   18c78:	ldr	r0, [r0]
   18c7c:	bl	1a2fc <__assert_fail@plt+0x8aa8>
   18c80:	bl	116d4 <__errno_location@plt>
   18c84:	ldr	r0, [r0]
   18c88:	bl	1a33c <__assert_fail@plt+0x8ae8>
   18c8c:	push	{r4, r5, fp, lr}
   18c90:	add	fp, sp, #8
   18c94:	mov	r4, r1
   18c98:	bl	116a4 <getfilecon@plt>
   18c9c:	cmp	r0, #10
   18ca0:	beq	18cb8 <__assert_fail@plt+0x7464>
   18ca4:	cmp	r0, #0
   18ca8:	bne	18cfc <__assert_fail@plt+0x74a8>
   18cac:	bl	116d4 <__errno_location@plt>
   18cb0:	mov	r1, #95	; 0x5f
   18cb4:	b	18cf4 <__assert_fail@plt+0x74a0>
   18cb8:	ldr	r5, [r4]
   18cbc:	movw	r1, #47724	; 0xba6c
   18cc0:	movt	r1, #1
   18cc4:	mov	r0, r5
   18cc8:	bl	114c4 <strcmp@plt>
   18ccc:	mov	r1, r0
   18cd0:	mov	r0, #10
   18cd4:	cmp	r1, #0
   18cd8:	popne	{r4, r5, fp, pc}
   18cdc:	mov	r0, r5
   18ce0:	bl	117d0 <freecon@plt>
   18ce4:	mov	r0, #0
   18ce8:	str	r0, [r4]
   18cec:	bl	116d4 <__errno_location@plt>
   18cf0:	mov	r1, #61	; 0x3d
   18cf4:	str	r1, [r0]
   18cf8:	mvn	r0, #0
   18cfc:	pop	{r4, r5, fp, pc}
   18d00:	push	{r4, r5, fp, lr}
   18d04:	add	fp, sp, #8
   18d08:	mov	r4, r1
   18d0c:	bl	11620 <lgetfilecon@plt>
   18d10:	cmp	r0, #10
   18d14:	beq	18d2c <__assert_fail@plt+0x74d8>
   18d18:	cmp	r0, #0
   18d1c:	bne	18d70 <__assert_fail@plt+0x751c>
   18d20:	bl	116d4 <__errno_location@plt>
   18d24:	mov	r1, #95	; 0x5f
   18d28:	b	18d68 <__assert_fail@plt+0x7514>
   18d2c:	ldr	r5, [r4]
   18d30:	movw	r1, #47724	; 0xba6c
   18d34:	movt	r1, #1
   18d38:	mov	r0, r5
   18d3c:	bl	114c4 <strcmp@plt>
   18d40:	mov	r1, r0
   18d44:	mov	r0, #10
   18d48:	cmp	r1, #0
   18d4c:	popne	{r4, r5, fp, pc}
   18d50:	mov	r0, r5
   18d54:	bl	117d0 <freecon@plt>
   18d58:	mov	r0, #0
   18d5c:	str	r0, [r4]
   18d60:	bl	116d4 <__errno_location@plt>
   18d64:	mov	r1, #61	; 0x3d
   18d68:	str	r1, [r0]
   18d6c:	mvn	r0, #0
   18d70:	pop	{r4, r5, fp, pc}
   18d74:	push	{r4, r5, fp, lr}
   18d78:	add	fp, sp, #8
   18d7c:	mov	r4, r1
   18d80:	bl	1156c <fgetfilecon@plt>
   18d84:	cmp	r0, #10
   18d88:	beq	18da0 <__assert_fail@plt+0x754c>
   18d8c:	cmp	r0, #0
   18d90:	bne	18de4 <__assert_fail@plt+0x7590>
   18d94:	bl	116d4 <__errno_location@plt>
   18d98:	mov	r1, #95	; 0x5f
   18d9c:	b	18ddc <__assert_fail@plt+0x7588>
   18da0:	ldr	r5, [r4]
   18da4:	movw	r1, #47724	; 0xba6c
   18da8:	movt	r1, #1
   18dac:	mov	r0, r5
   18db0:	bl	114c4 <strcmp@plt>
   18db4:	mov	r1, r0
   18db8:	mov	r0, #10
   18dbc:	cmp	r1, #0
   18dc0:	popne	{r4, r5, fp, pc}
   18dc4:	mov	r0, r5
   18dc8:	bl	117d0 <freecon@plt>
   18dcc:	mov	r0, #0
   18dd0:	str	r0, [r4]
   18dd4:	bl	116d4 <__errno_location@plt>
   18dd8:	mov	r1, #61	; 0x3d
   18ddc:	str	r1, [r0]
   18de0:	mvn	r0, #0
   18de4:	pop	{r4, r5, fp, pc}
   18de8:	push	{r4, r5, r6, r7, fp, lr}
   18dec:	add	fp, sp, #16
   18df0:	mov	r4, r0
   18df4:	cmp	r0, #2
   18df8:	movhi	r0, r4
   18dfc:	pophi	{r4, r5, r6, r7, fp, pc}
   18e00:	mov	r0, r4
   18e04:	bl	1a458 <__assert_fail@plt+0x8c04>
   18e08:	mov	r5, r0
   18e0c:	bl	116d4 <__errno_location@plt>
   18e10:	ldr	r7, [r0]
   18e14:	mov	r6, r0
   18e18:	mov	r0, r4
   18e1c:	bl	11824 <close@plt>
   18e20:	mov	r0, r5
   18e24:	str	r7, [r6]
   18e28:	pop	{r4, r5, r6, r7, fp, pc}
   18e2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18e30:	add	fp, sp, #24
   18e34:	sub	sp, sp, #32
   18e38:	ldr	r6, [fp, #12]
   18e3c:	ldr	r7, [fp, #8]
   18e40:	mov	r4, r2
   18e44:	mov	r8, r0
   18e48:	cmp	r1, #0
   18e4c:	beq	18e74 <__assert_fail@plt+0x7620>
   18e50:	movw	r2, #47734	; 0xba76
   18e54:	mov	r5, r1
   18e58:	str	r3, [sp, #4]
   18e5c:	str	r4, [sp]
   18e60:	mov	r0, r8
   18e64:	mov	r1, #1
   18e68:	movt	r2, #1
   18e6c:	mov	r3, r5
   18e70:	b	18e8c <__assert_fail@plt+0x7638>
   18e74:	movw	r2, #47746	; 0xba82
   18e78:	str	r3, [sp]
   18e7c:	mov	r0, r8
   18e80:	mov	r1, #1
   18e84:	mov	r3, r4
   18e88:	movt	r2, #1
   18e8c:	bl	1171c <__fprintf_chk@plt>
   18e90:	movw	r1, #47753	; 0xba89
   18e94:	mov	r0, #0
   18e98:	mov	r2, #5
   18e9c:	movt	r1, #1
   18ea0:	bl	11548 <dcgettext@plt>
   18ea4:	movw	r2, #48471	; 0xbd57
   18ea8:	mov	r3, r0
   18eac:	movw	r0, #2022	; 0x7e6
   18eb0:	mov	r1, #1
   18eb4:	str	r0, [sp]
   18eb8:	movt	r2, #1
   18ebc:	mov	r0, r8
   18ec0:	bl	1171c <__fprintf_chk@plt>
   18ec4:	movw	r4, #45450	; 0xb18a
   18ec8:	mov	r1, r8
   18ecc:	movt	r4, #1
   18ed0:	mov	r0, r4
   18ed4:	bl	114a0 <fputs_unlocked@plt>
   18ed8:	movw	r1, #47757	; 0xba8d
   18edc:	mov	r0, #0
   18ee0:	mov	r2, #5
   18ee4:	movt	r1, #1
   18ee8:	bl	11548 <dcgettext@plt>
   18eec:	movw	r3, #47928	; 0xbb38
   18ef0:	mov	r2, r0
   18ef4:	mov	r0, r8
   18ef8:	mov	r1, #1
   18efc:	movt	r3, #1
   18f00:	bl	1171c <__fprintf_chk@plt>
   18f04:	mov	r0, r4
   18f08:	mov	r1, r8
   18f0c:	bl	114a0 <fputs_unlocked@plt>
   18f10:	cmp	r6, #9
   18f14:	bhi	18f50 <__assert_fail@plt+0x76fc>
   18f18:	add	r0, pc, #0
   18f1c:	ldr	pc, [r0, r6, lsl #2]
   18f20:	andeq	r8, r1, r8, asr #30
   18f24:	andeq	r8, r1, ip, asr pc
   18f28:	andeq	r8, r1, ip, lsl #31
   18f2c:			; <UNDEFINED> instruction: 0x00018fb4
   18f30:	ldrdeq	r8, [r1], -ip
   18f34:	andeq	r9, r1, r4
   18f38:	andeq	r9, r1, ip, lsr #32
   18f3c:	andeq	r9, r1, r4, rrx
   18f40:	andeq	r9, r1, r4, lsl #2
   18f44:	andeq	r9, r1, ip, lsr #1
   18f48:	sub	sp, fp, #24
   18f4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f50:	movw	r1, #48281	; 0xbc99
   18f54:	movt	r1, #1
   18f58:	b	190b4 <__assert_fail@plt+0x7860>
   18f5c:	movw	r1, #47962	; 0xbb5a
   18f60:	mov	r0, #0
   18f64:	mov	r2, #5
   18f68:	movt	r1, #1
   18f6c:	bl	11548 <dcgettext@plt>
   18f70:	ldr	r3, [r7]
   18f74:	mov	r2, r0
   18f78:	mov	r0, r8
   18f7c:	mov	r1, #1
   18f80:	sub	sp, fp, #24
   18f84:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f88:	b	1171c <__fprintf_chk@plt>
   18f8c:	movw	r1, #47978	; 0xbb6a
   18f90:	mov	r0, #0
   18f94:	mov	r2, #5
   18f98:	movt	r1, #1
   18f9c:	bl	11548 <dcgettext@plt>
   18fa0:	mov	r2, r0
   18fa4:	ldr	r3, [r7]
   18fa8:	ldr	r0, [r7, #4]
   18fac:	str	r0, [sp]
   18fb0:	b	190a0 <__assert_fail@plt+0x784c>
   18fb4:	movw	r1, #48001	; 0xbb81
   18fb8:	mov	r0, #0
   18fbc:	mov	r2, #5
   18fc0:	movt	r1, #1
   18fc4:	bl	11548 <dcgettext@plt>
   18fc8:	ldr	r3, [r7]
   18fcc:	mov	r2, r0
   18fd0:	ldmib	r7, {r0, r1}
   18fd4:	stm	sp, {r0, r1}
   18fd8:	b	190a0 <__assert_fail@plt+0x784c>
   18fdc:	movw	r1, #48029	; 0xbb9d
   18fe0:	mov	r0, #0
   18fe4:	mov	r2, #5
   18fe8:	movt	r1, #1
   18fec:	bl	11548 <dcgettext@plt>
   18ff0:	ldr	r3, [r7]
   18ff4:	mov	r2, r0
   18ff8:	ldmib	r7, {r0, r1, r7}
   18ffc:	stm	sp, {r0, r1, r7}
   19000:	b	190a0 <__assert_fail@plt+0x784c>
   19004:	movw	r1, #48061	; 0xbbbd
   19008:	mov	r0, #0
   1900c:	mov	r2, #5
   19010:	movt	r1, #1
   19014:	bl	11548 <dcgettext@plt>
   19018:	ldr	r3, [r7]
   1901c:	mov	r2, r0
   19020:	ldmib	r7, {r0, r1, r6, r7}
   19024:	stm	sp, {r0, r1, r6, r7}
   19028:	b	190a0 <__assert_fail@plt+0x784c>
   1902c:	movw	r1, #48097	; 0xbbe1
   19030:	mov	r0, #0
   19034:	mov	r2, #5
   19038:	movt	r1, #1
   1903c:	bl	11548 <dcgettext@plt>
   19040:	ldr	r3, [r7]
   19044:	mov	r2, r0
   19048:	ldmib	r7, {r0, r1, r6}
   1904c:	ldr	r5, [r7, #16]
   19050:	ldr	r7, [r7, #20]
   19054:	stm	sp, {r0, r1, r6}
   19058:	str	r5, [sp, #12]
   1905c:	str	r7, [sp, #16]
   19060:	b	190a0 <__assert_fail@plt+0x784c>
   19064:	movw	r1, #48137	; 0xbc09
   19068:	mov	r0, #0
   1906c:	mov	r2, #5
   19070:	movt	r1, #1
   19074:	bl	11548 <dcgettext@plt>
   19078:	ldr	r3, [r7]
   1907c:	mov	r2, r0
   19080:	ldmib	r7, {r0, r1, r6}
   19084:	ldr	r5, [r7, #16]
   19088:	ldr	r4, [r7, #20]
   1908c:	ldr	r7, [r7, #24]
   19090:	stm	sp, {r0, r1, r6}
   19094:	str	r5, [sp, #12]
   19098:	str	r4, [sp, #16]
   1909c:	str	r7, [sp, #20]
   190a0:	mov	r0, r8
   190a4:	mov	r1, #1
   190a8:	b	19154 <__assert_fail@plt+0x7900>
   190ac:	movw	r1, #48229	; 0xbc65
   190b0:	movt	r1, #1
   190b4:	mov	r0, #0
   190b8:	mov	r2, #5
   190bc:	bl	11548 <dcgettext@plt>
   190c0:	mov	ip, r0
   190c4:	ldr	r3, [r7]
   190c8:	ldr	r0, [r7, #4]
   190cc:	ldr	r1, [r7, #8]
   190d0:	ldr	r6, [r7, #12]
   190d4:	ldr	r5, [r7, #16]
   190d8:	ldr	r4, [r7, #20]
   190dc:	ldr	r2, [r7, #24]
   190e0:	ldr	lr, [r7, #28]
   190e4:	ldr	r7, [r7, #32]
   190e8:	stm	sp, {r0, r1, r6}
   190ec:	str	r5, [sp, #12]
   190f0:	str	r4, [sp, #16]
   190f4:	str	r2, [sp, #20]
   190f8:	str	lr, [sp, #24]
   190fc:	str	r7, [sp, #28]
   19100:	b	19148 <__assert_fail@plt+0x78f4>
   19104:	movw	r1, #48181	; 0xbc35
   19108:	mov	r0, #0
   1910c:	mov	r2, #5
   19110:	movt	r1, #1
   19114:	bl	11548 <dcgettext@plt>
   19118:	mov	ip, r0
   1911c:	ldr	r3, [r7]
   19120:	ldmib	r7, {r0, r1, r6}
   19124:	ldr	r5, [r7, #16]
   19128:	ldr	r4, [r7, #20]
   1912c:	ldr	r2, [r7, #24]
   19130:	ldr	r7, [r7, #28]
   19134:	stm	sp, {r0, r1, r6}
   19138:	str	r5, [sp, #12]
   1913c:	str	r4, [sp, #16]
   19140:	str	r2, [sp, #20]
   19144:	str	r7, [sp, #24]
   19148:	mov	r0, r8
   1914c:	mov	r1, #1
   19150:	mov	r2, ip
   19154:	bl	1171c <__fprintf_chk@plt>
   19158:	sub	sp, fp, #24
   1915c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19160:	push	{r4, sl, fp, lr}
   19164:	add	fp, sp, #8
   19168:	sub	sp, sp, #8
   1916c:	ldr	ip, [fp, #8]
   19170:	mov	lr, #0
   19174:	ldr	r4, [ip, lr, lsl #2]
   19178:	add	lr, lr, #1
   1917c:	cmp	r4, #0
   19180:	bne	19174 <__assert_fail@plt+0x7920>
   19184:	sub	r4, lr, #1
   19188:	str	ip, [sp]
   1918c:	str	r4, [sp, #4]
   19190:	bl	18e2c <__assert_fail@plt+0x75d8>
   19194:	sub	sp, fp, #8
   19198:	pop	{r4, sl, fp, pc}
   1919c:	push	{fp, lr}
   191a0:	mov	fp, sp
   191a4:	sub	sp, sp, #48	; 0x30
   191a8:	ldr	ip, [fp, #8]
   191ac:	ldr	lr, [ip]
   191b0:	cmp	lr, #0
   191b4:	str	lr, [sp, #8]
   191b8:	beq	19254 <__assert_fail@plt+0x7a00>
   191bc:	ldr	lr, [ip, #4]
   191c0:	cmp	lr, #0
   191c4:	str	lr, [sp, #12]
   191c8:	beq	1925c <__assert_fail@plt+0x7a08>
   191cc:	ldr	lr, [ip, #8]
   191d0:	cmp	lr, #0
   191d4:	str	lr, [sp, #16]
   191d8:	beq	19264 <__assert_fail@plt+0x7a10>
   191dc:	ldr	lr, [ip, #12]
   191e0:	cmp	lr, #0
   191e4:	str	lr, [sp, #20]
   191e8:	beq	1926c <__assert_fail@plt+0x7a18>
   191ec:	ldr	lr, [ip, #16]
   191f0:	cmp	lr, #0
   191f4:	str	lr, [sp, #24]
   191f8:	beq	19274 <__assert_fail@plt+0x7a20>
   191fc:	ldr	lr, [ip, #20]
   19200:	cmp	lr, #0
   19204:	str	lr, [sp, #28]
   19208:	beq	1927c <__assert_fail@plt+0x7a28>
   1920c:	ldr	lr, [ip, #24]
   19210:	cmp	lr, #0
   19214:	str	lr, [sp, #32]
   19218:	beq	19284 <__assert_fail@plt+0x7a30>
   1921c:	ldr	lr, [ip, #28]
   19220:	cmp	lr, #0
   19224:	str	lr, [sp, #36]	; 0x24
   19228:	beq	1928c <__assert_fail@plt+0x7a38>
   1922c:	ldr	lr, [ip, #32]
   19230:	cmp	lr, #0
   19234:	str	lr, [sp, #40]	; 0x28
   19238:	beq	19294 <__assert_fail@plt+0x7a40>
   1923c:	ldr	lr, [ip, #36]	; 0x24
   19240:	mov	ip, #10
   19244:	cmp	lr, #0
   19248:	str	lr, [sp, #44]	; 0x2c
   1924c:	movweq	ip, #9
   19250:	b	19298 <__assert_fail@plt+0x7a44>
   19254:	mov	ip, #0
   19258:	b	19298 <__assert_fail@plt+0x7a44>
   1925c:	mov	ip, #1
   19260:	b	19298 <__assert_fail@plt+0x7a44>
   19264:	mov	ip, #2
   19268:	b	19298 <__assert_fail@plt+0x7a44>
   1926c:	mov	ip, #3
   19270:	b	19298 <__assert_fail@plt+0x7a44>
   19274:	mov	ip, #4
   19278:	b	19298 <__assert_fail@plt+0x7a44>
   1927c:	mov	ip, #5
   19280:	b	19298 <__assert_fail@plt+0x7a44>
   19284:	mov	ip, #6
   19288:	b	19298 <__assert_fail@plt+0x7a44>
   1928c:	mov	ip, #7
   19290:	b	19298 <__assert_fail@plt+0x7a44>
   19294:	mov	ip, #8
   19298:	add	lr, sp, #8
   1929c:	str	ip, [sp, #4]
   192a0:	str	lr, [sp]
   192a4:	bl	18e2c <__assert_fail@plt+0x75d8>
   192a8:	mov	sp, fp
   192ac:	pop	{fp, pc}
   192b0:	push	{fp, lr}
   192b4:	mov	fp, sp
   192b8:	sub	sp, sp, #56	; 0x38
   192bc:	add	ip, fp, #8
   192c0:	str	ip, [sp, #12]
   192c4:	ldr	lr, [fp, #8]
   192c8:	cmp	lr, #0
   192cc:	str	lr, [sp, #16]
   192d0:	beq	1936c <__assert_fail@plt+0x7b18>
   192d4:	ldr	lr, [ip, #4]
   192d8:	cmp	lr, #0
   192dc:	str	lr, [sp, #20]
   192e0:	beq	19374 <__assert_fail@plt+0x7b20>
   192e4:	ldr	lr, [ip, #8]
   192e8:	cmp	lr, #0
   192ec:	str	lr, [sp, #24]
   192f0:	beq	1937c <__assert_fail@plt+0x7b28>
   192f4:	ldr	lr, [ip, #12]
   192f8:	cmp	lr, #0
   192fc:	str	lr, [sp, #28]
   19300:	beq	19384 <__assert_fail@plt+0x7b30>
   19304:	ldr	lr, [ip, #16]
   19308:	cmp	lr, #0
   1930c:	str	lr, [sp, #32]
   19310:	beq	1938c <__assert_fail@plt+0x7b38>
   19314:	ldr	lr, [ip, #20]
   19318:	cmp	lr, #0
   1931c:	str	lr, [sp, #36]	; 0x24
   19320:	beq	19394 <__assert_fail@plt+0x7b40>
   19324:	ldr	lr, [ip, #24]
   19328:	cmp	lr, #0
   1932c:	str	lr, [sp, #40]	; 0x28
   19330:	beq	1939c <__assert_fail@plt+0x7b48>
   19334:	ldr	lr, [ip, #28]
   19338:	cmp	lr, #0
   1933c:	str	lr, [sp, #44]	; 0x2c
   19340:	beq	193a4 <__assert_fail@plt+0x7b50>
   19344:	ldr	lr, [ip, #32]
   19348:	cmp	lr, #0
   1934c:	str	lr, [sp, #48]	; 0x30
   19350:	beq	193ac <__assert_fail@plt+0x7b58>
   19354:	ldr	lr, [ip, #36]	; 0x24
   19358:	mov	ip, #10
   1935c:	cmp	lr, #0
   19360:	str	lr, [sp, #52]	; 0x34
   19364:	movweq	ip, #9
   19368:	b	193b0 <__assert_fail@plt+0x7b5c>
   1936c:	mov	ip, #0
   19370:	b	193b0 <__assert_fail@plt+0x7b5c>
   19374:	mov	ip, #1
   19378:	b	193b0 <__assert_fail@plt+0x7b5c>
   1937c:	mov	ip, #2
   19380:	b	193b0 <__assert_fail@plt+0x7b5c>
   19384:	mov	ip, #3
   19388:	b	193b0 <__assert_fail@plt+0x7b5c>
   1938c:	mov	ip, #4
   19390:	b	193b0 <__assert_fail@plt+0x7b5c>
   19394:	mov	ip, #5
   19398:	b	193b0 <__assert_fail@plt+0x7b5c>
   1939c:	mov	ip, #6
   193a0:	b	193b0 <__assert_fail@plt+0x7b5c>
   193a4:	mov	ip, #7
   193a8:	b	193b0 <__assert_fail@plt+0x7b5c>
   193ac:	mov	ip, #8
   193b0:	add	lr, sp, #16
   193b4:	str	ip, [sp, #4]
   193b8:	str	lr, [sp]
   193bc:	bl	18e2c <__assert_fail@plt+0x75d8>
   193c0:	mov	sp, fp
   193c4:	pop	{fp, pc}
   193c8:	push	{fp, lr}
   193cc:	mov	fp, sp
   193d0:	movw	r0, #53692	; 0xd1bc
   193d4:	movt	r0, #2
   193d8:	ldr	r1, [r0]
   193dc:	movw	r0, #45450	; 0xb18a
   193e0:	movt	r0, #1
   193e4:	bl	114a0 <fputs_unlocked@plt>
   193e8:	movw	r1, #48341	; 0xbcd5
   193ec:	mov	r0, #0
   193f0:	mov	r2, #5
   193f4:	movt	r1, #1
   193f8:	bl	11548 <dcgettext@plt>
   193fc:	movw	r2, #48361	; 0xbce9
   19400:	mov	r1, r0
   19404:	mov	r0, #1
   19408:	movt	r2, #1
   1940c:	bl	11704 <__printf_chk@plt>
   19410:	movw	r1, #48383	; 0xbcff
   19414:	mov	r0, #0
   19418:	mov	r2, #5
   1941c:	movt	r1, #1
   19420:	bl	11548 <dcgettext@plt>
   19424:	movw	r2, #45596	; 0xb21c
   19428:	movw	r3, #46065	; 0xb3f1
   1942c:	mov	r1, r0
   19430:	mov	r0, #1
   19434:	movt	r2, #1
   19438:	movt	r3, #1
   1943c:	bl	11704 <__printf_chk@plt>
   19440:	movw	r1, #48403	; 0xbd13
   19444:	mov	r0, #0
   19448:	mov	r2, #5
   1944c:	movt	r1, #1
   19450:	bl	11548 <dcgettext@plt>
   19454:	movw	r2, #48442	; 0xbd3a
   19458:	mov	r1, r0
   1945c:	mov	r0, #1
   19460:	movt	r2, #1
   19464:	pop	{fp, lr}
   19468:	b	11704 <__printf_chk@plt>
   1946c:	push	{r4, r5, r6, sl, fp, lr}
   19470:	add	fp, sp, #16
   19474:	mov	r4, r2
   19478:	mov	r5, r1
   1947c:	mov	r6, r0
   19480:	bl	1a37c <__assert_fail@plt+0x8b28>
   19484:	cmp	r0, #0
   19488:	popne	{r4, r5, r6, sl, fp, pc}
   1948c:	cmp	r6, #0
   19490:	beq	194a4 <__assert_fail@plt+0x7c50>
   19494:	cmp	r5, #0
   19498:	cmpne	r4, #0
   1949c:	bne	194a4 <__assert_fail@plt+0x7c50>
   194a0:	pop	{r4, r5, r6, sl, fp, pc}
   194a4:	bl	19a44 <__assert_fail@plt+0x81f0>
   194a8:	push	{r4, r5, r6, sl, fp, lr}
   194ac:	add	fp, sp, #16
   194b0:	mov	r4, r2
   194b4:	mov	r5, r1
   194b8:	mov	r6, r0
   194bc:	bl	1a37c <__assert_fail@plt+0x8b28>
   194c0:	cmp	r0, #0
   194c4:	popne	{r4, r5, r6, sl, fp, pc}
   194c8:	cmp	r6, #0
   194cc:	beq	194e0 <__assert_fail@plt+0x7c8c>
   194d0:	cmp	r5, #0
   194d4:	cmpne	r4, #0
   194d8:	bne	194e0 <__assert_fail@plt+0x7c8c>
   194dc:	pop	{r4, r5, r6, sl, fp, pc}
   194e0:	bl	19a44 <__assert_fail@plt+0x81f0>
   194e4:	push	{fp, lr}
   194e8:	mov	fp, sp
   194ec:	bl	19b58 <__assert_fail@plt+0x8304>
   194f0:	cmp	r0, #0
   194f4:	popne	{fp, pc}
   194f8:	bl	19a44 <__assert_fail@plt+0x81f0>
   194fc:	push	{fp, lr}
   19500:	mov	fp, sp
   19504:	bl	19b58 <__assert_fail@plt+0x8304>
   19508:	cmp	r0, #0
   1950c:	popne	{fp, pc}
   19510:	bl	19a44 <__assert_fail@plt+0x81f0>
   19514:	push	{fp, lr}
   19518:	mov	fp, sp
   1951c:	bl	19b58 <__assert_fail@plt+0x8304>
   19520:	cmp	r0, #0
   19524:	popne	{fp, pc}
   19528:	bl	19a44 <__assert_fail@plt+0x81f0>
   1952c:	push	{r4, r5, fp, lr}
   19530:	add	fp, sp, #8
   19534:	mov	r4, r1
   19538:	mov	r5, r0
   1953c:	bl	19b88 <__assert_fail@plt+0x8334>
   19540:	cmp	r0, #0
   19544:	popne	{r4, r5, fp, pc}
   19548:	cmp	r5, #0
   1954c:	beq	1955c <__assert_fail@plt+0x7d08>
   19550:	cmp	r4, #0
   19554:	bne	1955c <__assert_fail@plt+0x7d08>
   19558:	pop	{r4, r5, fp, pc}
   1955c:	bl	19a44 <__assert_fail@plt+0x81f0>
   19560:	push	{fp, lr}
   19564:	mov	fp, sp
   19568:	cmp	r1, #0
   1956c:	orreq	r1, r1, #1
   19570:	bl	19b88 <__assert_fail@plt+0x8334>
   19574:	cmp	r0, #0
   19578:	popne	{fp, pc}
   1957c:	bl	19a44 <__assert_fail@plt+0x81f0>
   19580:	push	{fp, lr}
   19584:	mov	fp, sp
   19588:	clz	r3, r2
   1958c:	lsr	ip, r3, #5
   19590:	clz	r3, r1
   19594:	lsr	r3, r3, #5
   19598:	orrs	r3, r3, ip
   1959c:	movwne	r1, #1
   195a0:	movwne	r2, #1
   195a4:	bl	1a37c <__assert_fail@plt+0x8b28>
   195a8:	cmp	r0, #0
   195ac:	popne	{fp, pc}
   195b0:	bl	19a44 <__assert_fail@plt+0x81f0>
   195b4:	push	{fp, lr}
   195b8:	mov	fp, sp
   195bc:	mov	r2, r1
   195c0:	mov	r1, r0
   195c4:	mov	r0, #0
   195c8:	bl	1a37c <__assert_fail@plt+0x8b28>
   195cc:	cmp	r0, #0
   195d0:	popne	{fp, pc}
   195d4:	bl	19a44 <__assert_fail@plt+0x81f0>
   195d8:	push	{fp, lr}
   195dc:	mov	fp, sp
   195e0:	mov	r2, r1
   195e4:	mov	r1, r0
   195e8:	clz	r0, r2
   195ec:	clz	r3, r1
   195f0:	lsr	r0, r0, #5
   195f4:	lsr	r3, r3, #5
   195f8:	orrs	r0, r3, r0
   195fc:	movwne	r1, #1
   19600:	movwne	r2, #1
   19604:	mov	r0, #0
   19608:	bl	1a37c <__assert_fail@plt+0x8b28>
   1960c:	cmp	r0, #0
   19610:	popne	{fp, pc}
   19614:	bl	19a44 <__assert_fail@plt+0x81f0>
   19618:	push	{r4, r5, r6, sl, fp, lr}
   1961c:	add	fp, sp, #16
   19620:	ldr	r5, [r1]
   19624:	mov	r4, r1
   19628:	mov	r6, r0
   1962c:	cmp	r0, #0
   19630:	beq	19648 <__assert_fail@plt+0x7df4>
   19634:	mov	r0, #1
   19638:	add	r0, r0, r5, lsr #1
   1963c:	adds	r5, r5, r0
   19640:	bcc	19650 <__assert_fail@plt+0x7dfc>
   19644:	b	1968c <__assert_fail@plt+0x7e38>
   19648:	cmp	r5, #0
   1964c:	movweq	r5, #64	; 0x40
   19650:	mov	r0, r6
   19654:	mov	r1, r5
   19658:	mov	r2, #1
   1965c:	bl	1a37c <__assert_fail@plt+0x8b28>
   19660:	cmp	r5, #0
   19664:	mov	r1, r5
   19668:	movwne	r1, #1
   1966c:	cmp	r0, #0
   19670:	bne	19684 <__assert_fail@plt+0x7e30>
   19674:	clz	r2, r6
   19678:	lsr	r2, r2, #5
   1967c:	orrs	r1, r2, r1
   19680:	bne	1968c <__assert_fail@plt+0x7e38>
   19684:	str	r5, [r4]
   19688:	pop	{r4, r5, r6, sl, fp, pc}
   1968c:	bl	19a44 <__assert_fail@plt+0x81f0>
   19690:	push	{r4, r5, r6, r7, fp, lr}
   19694:	add	fp, sp, #16
   19698:	ldr	r5, [r1]
   1969c:	mov	r6, r2
   196a0:	mov	r4, r1
   196a4:	mov	r7, r0
   196a8:	cmp	r0, #0
   196ac:	beq	196c4 <__assert_fail@plt+0x7e70>
   196b0:	mov	r0, #1
   196b4:	add	r0, r0, r5, lsr #1
   196b8:	adds	r5, r5, r0
   196bc:	bcc	196dc <__assert_fail@plt+0x7e88>
   196c0:	b	19710 <__assert_fail@plt+0x7ebc>
   196c4:	cmp	r5, #0
   196c8:	bne	196dc <__assert_fail@plt+0x7e88>
   196cc:	mov	r0, #64	; 0x40
   196d0:	cmp	r6, #64	; 0x40
   196d4:	udiv	r5, r0, r6
   196d8:	addhi	r5, r5, #1
   196dc:	mov	r0, r7
   196e0:	mov	r1, r5
   196e4:	mov	r2, r6
   196e8:	bl	1a37c <__assert_fail@plt+0x8b28>
   196ec:	cmp	r0, #0
   196f0:	bne	19708 <__assert_fail@plt+0x7eb4>
   196f4:	cmp	r7, #0
   196f8:	beq	19710 <__assert_fail@plt+0x7ebc>
   196fc:	cmp	r6, #0
   19700:	cmpne	r5, #0
   19704:	bne	19710 <__assert_fail@plt+0x7ebc>
   19708:	str	r5, [r4]
   1970c:	pop	{r4, r5, r6, r7, fp, pc}
   19710:	bl	19a44 <__assert_fail@plt+0x81f0>
   19714:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19718:	add	fp, sp, #24
   1971c:	mov	r8, r1
   19720:	ldr	r1, [r1]
   19724:	mov	r5, r0
   19728:	add	r0, r1, r1, asr #1
   1972c:	cmp	r0, r1
   19730:	mvnvs	r0, #-2147483648	; 0x80000000
   19734:	cmp	r0, r3
   19738:	mov	r7, r0
   1973c:	movgt	r7, r3
   19740:	cmn	r3, #1
   19744:	movle	r7, r0
   19748:	ldr	r0, [fp, #8]
   1974c:	cmn	r0, #1
   19750:	ble	19778 <__assert_fail@plt+0x7f24>
   19754:	cmp	r0, #0
   19758:	beq	197cc <__assert_fail@plt+0x7f78>
   1975c:	cmn	r7, #1
   19760:	ble	197a0 <__assert_fail@plt+0x7f4c>
   19764:	mvn	r4, #-2147483648	; 0x80000000
   19768:	udiv	r6, r4, r0
   1976c:	cmp	r6, r7
   19770:	bge	197cc <__assert_fail@plt+0x7f78>
   19774:	b	197dc <__assert_fail@plt+0x7f88>
   19778:	cmn	r7, #1
   1977c:	ble	197bc <__assert_fail@plt+0x7f68>
   19780:	cmn	r0, #1
   19784:	beq	197cc <__assert_fail@plt+0x7f78>
   19788:	mov	r6, #-2147483648	; 0x80000000
   1978c:	mvn	r4, #-2147483648	; 0x80000000
   19790:	sdiv	r6, r6, r0
   19794:	cmp	r6, r7
   19798:	bge	197cc <__assert_fail@plt+0x7f78>
   1979c:	b	197dc <__assert_fail@plt+0x7f88>
   197a0:	beq	197cc <__assert_fail@plt+0x7f78>
   197a4:	mov	r6, #-2147483648	; 0x80000000
   197a8:	mvn	r4, #-2147483648	; 0x80000000
   197ac:	sdiv	r6, r6, r7
   197b0:	cmp	r6, r0
   197b4:	bge	197cc <__assert_fail@plt+0x7f78>
   197b8:	b	197dc <__assert_fail@plt+0x7f88>
   197bc:	mvn	r4, #-2147483648	; 0x80000000
   197c0:	sdiv	r6, r4, r0
   197c4:	cmp	r7, r6
   197c8:	blt	197dc <__assert_fail@plt+0x7f88>
   197cc:	mul	r6, r7, r0
   197d0:	mov	r4, #64	; 0x40
   197d4:	cmp	r6, #63	; 0x3f
   197d8:	bgt	197e4 <__assert_fail@plt+0x7f90>
   197dc:	sdiv	r7, r4, r0
   197e0:	mul	r6, r7, r0
   197e4:	cmp	r5, #0
   197e8:	moveq	r4, #0
   197ec:	streq	r4, [r8]
   197f0:	sub	r4, r7, r1
   197f4:	cmp	r4, r2
   197f8:	bge	198a4 <__assert_fail@plt+0x8050>
   197fc:	add	r7, r1, r2
   19800:	mov	r6, #0
   19804:	mov	r2, #0
   19808:	cmp	r7, r3
   1980c:	movwgt	r6, #1
   19810:	cmn	r3, #1
   19814:	movwgt	r2, #1
   19818:	cmp	r7, r1
   1981c:	bvs	198d8 <__assert_fail@plt+0x8084>
   19820:	ands	r1, r2, r6
   19824:	bne	198d8 <__assert_fail@plt+0x8084>
   19828:	cmn	r0, #1
   1982c:	ble	19854 <__assert_fail@plt+0x8000>
   19830:	cmp	r0, #0
   19834:	beq	198a0 <__assert_fail@plt+0x804c>
   19838:	cmn	r7, #1
   1983c:	ble	19878 <__assert_fail@plt+0x8024>
   19840:	mvn	r1, #-2147483648	; 0x80000000
   19844:	udiv	r1, r1, r0
   19848:	cmp	r1, r7
   1984c:	bge	198a0 <__assert_fail@plt+0x804c>
   19850:	b	198d8 <__assert_fail@plt+0x8084>
   19854:	cmn	r7, #1
   19858:	ble	19890 <__assert_fail@plt+0x803c>
   1985c:	cmn	r0, #1
   19860:	beq	198a0 <__assert_fail@plt+0x804c>
   19864:	mov	r1, #-2147483648	; 0x80000000
   19868:	sdiv	r1, r1, r0
   1986c:	cmp	r1, r7
   19870:	bge	198a0 <__assert_fail@plt+0x804c>
   19874:	b	198d8 <__assert_fail@plt+0x8084>
   19878:	beq	198a0 <__assert_fail@plt+0x804c>
   1987c:	mov	r1, #-2147483648	; 0x80000000
   19880:	sdiv	r1, r1, r7
   19884:	cmp	r1, r0
   19888:	bge	198a0 <__assert_fail@plt+0x804c>
   1988c:	b	198d8 <__assert_fail@plt+0x8084>
   19890:	mvn	r1, #-2147483648	; 0x80000000
   19894:	sdiv	r1, r1, r0
   19898:	cmp	r7, r1
   1989c:	blt	198d8 <__assert_fail@plt+0x8084>
   198a0:	mul	r6, r7, r0
   198a4:	mov	r0, r5
   198a8:	mov	r1, r6
   198ac:	bl	19b88 <__assert_fail@plt+0x8334>
   198b0:	cmp	r6, #0
   198b4:	movwne	r6, #1
   198b8:	cmp	r0, #0
   198bc:	bne	198d0 <__assert_fail@plt+0x807c>
   198c0:	clz	r1, r5
   198c4:	lsr	r1, r1, #5
   198c8:	orrs	r1, r1, r6
   198cc:	bne	198d8 <__assert_fail@plt+0x8084>
   198d0:	str	r7, [r8]
   198d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   198d8:	bl	19a44 <__assert_fail@plt+0x81f0>
   198dc:	push	{fp, lr}
   198e0:	mov	fp, sp
   198e4:	mov	r1, #1
   198e8:	bl	19b04 <__assert_fail@plt+0x82b0>
   198ec:	cmp	r0, #0
   198f0:	popne	{fp, pc}
   198f4:	bl	19a44 <__assert_fail@plt+0x81f0>
   198f8:	push	{fp, lr}
   198fc:	mov	fp, sp
   19900:	bl	19b04 <__assert_fail@plt+0x82b0>
   19904:	cmp	r0, #0
   19908:	popne	{fp, pc}
   1990c:	bl	19a44 <__assert_fail@plt+0x81f0>
   19910:	push	{fp, lr}
   19914:	mov	fp, sp
   19918:	mov	r1, #1
   1991c:	bl	19b04 <__assert_fail@plt+0x82b0>
   19920:	cmp	r0, #0
   19924:	popne	{fp, pc}
   19928:	bl	19a44 <__assert_fail@plt+0x81f0>
   1992c:	push	{fp, lr}
   19930:	mov	fp, sp
   19934:	bl	19b04 <__assert_fail@plt+0x82b0>
   19938:	cmp	r0, #0
   1993c:	popne	{fp, pc}
   19940:	bl	19a44 <__assert_fail@plt+0x81f0>
   19944:	push	{r4, r5, r6, sl, fp, lr}
   19948:	add	fp, sp, #16
   1994c:	mov	r5, r0
   19950:	mov	r0, r1
   19954:	mov	r4, r1
   19958:	bl	19b58 <__assert_fail@plt+0x8304>
   1995c:	cmp	r0, #0
   19960:	beq	1997c <__assert_fail@plt+0x8128>
   19964:	mov	r1, r5
   19968:	mov	r2, r4
   1996c:	mov	r6, r0
   19970:	bl	1150c <memcpy@plt>
   19974:	mov	r0, r6
   19978:	pop	{r4, r5, r6, sl, fp, pc}
   1997c:	bl	19a44 <__assert_fail@plt+0x81f0>
   19980:	push	{r4, r5, r6, sl, fp, lr}
   19984:	add	fp, sp, #16
   19988:	mov	r5, r0
   1998c:	mov	r0, r1
   19990:	mov	r4, r1
   19994:	bl	19b58 <__assert_fail@plt+0x8304>
   19998:	cmp	r0, #0
   1999c:	beq	199b8 <__assert_fail@plt+0x8164>
   199a0:	mov	r1, r5
   199a4:	mov	r2, r4
   199a8:	mov	r6, r0
   199ac:	bl	1150c <memcpy@plt>
   199b0:	mov	r0, r6
   199b4:	pop	{r4, r5, r6, sl, fp, pc}
   199b8:	bl	19a44 <__assert_fail@plt+0x81f0>
   199bc:	push	{r4, r5, r6, sl, fp, lr}
   199c0:	add	fp, sp, #16
   199c4:	mov	r5, r0
   199c8:	add	r0, r1, #1
   199cc:	mov	r4, r1
   199d0:	bl	19b58 <__assert_fail@plt+0x8304>
   199d4:	cmp	r0, #0
   199d8:	beq	19a00 <__assert_fail@plt+0x81ac>
   199dc:	mov	r6, r0
   199e0:	mov	r0, #0
   199e4:	mov	r1, r5
   199e8:	mov	r2, r4
   199ec:	strb	r0, [r6, r4]
   199f0:	mov	r0, r6
   199f4:	bl	1150c <memcpy@plt>
   199f8:	mov	r0, r6
   199fc:	pop	{r4, r5, r6, sl, fp, pc}
   19a00:	bl	19a44 <__assert_fail@plt+0x81f0>
   19a04:	push	{r4, r5, r6, sl, fp, lr}
   19a08:	add	fp, sp, #16
   19a0c:	mov	r4, r0
   19a10:	bl	116b0 <strlen@plt>
   19a14:	add	r5, r0, #1
   19a18:	mov	r0, r5
   19a1c:	bl	19b58 <__assert_fail@plt+0x8304>
   19a20:	cmp	r0, #0
   19a24:	beq	19a40 <__assert_fail@plt+0x81ec>
   19a28:	mov	r1, r4
   19a2c:	mov	r2, r5
   19a30:	mov	r6, r0
   19a34:	bl	1150c <memcpy@plt>
   19a38:	mov	r0, r6
   19a3c:	pop	{r4, r5, r6, sl, fp, pc}
   19a40:	bl	19a44 <__assert_fail@plt+0x81f0>
   19a44:	push	{fp, lr}
   19a48:	mov	fp, sp
   19a4c:	movw	r0, #53604	; 0xd164
   19a50:	movw	r1, #48518	; 0xbd86
   19a54:	mov	r2, #5
   19a58:	movt	r0, #2
   19a5c:	movt	r1, #1
   19a60:	ldr	r4, [r0]
   19a64:	mov	r0, #0
   19a68:	bl	11548 <dcgettext@plt>
   19a6c:	movw	r2, #47279	; 0xb8af
   19a70:	mov	r3, r0
   19a74:	mov	r0, r4
   19a78:	mov	r1, #0
   19a7c:	movt	r2, #1
   19a80:	bl	115fc <error@plt>
   19a84:	bl	11818 <abort@plt>
   19a88:	push	{fp, lr}
   19a8c:	mov	fp, sp
   19a90:	orr	r1, r1, #512	; 0x200
   19a94:	bl	12e1c <__assert_fail@plt+0x15c8>
   19a98:	cmp	r0, #0
   19a9c:	popne	{fp, pc}
   19aa0:	bl	116d4 <__errno_location@plt>
   19aa4:	ldr	r0, [r0]
   19aa8:	cmp	r0, #22
   19aac:	bne	19ad0 <__assert_fail@plt+0x827c>
   19ab0:	movw	r0, #48535	; 0xbd97
   19ab4:	movw	r1, #48551	; 0xbda7
   19ab8:	movw	r3, #48562	; 0xbdb2
   19abc:	mov	r2, #41	; 0x29
   19ac0:	movt	r0, #1
   19ac4:	movt	r1, #1
   19ac8:	movt	r3, #1
   19acc:	bl	11854 <__assert_fail@plt>
   19ad0:	bl	19a44 <__assert_fail@plt+0x81f0>
   19ad4:	ldr	r0, [r0, #48]	; 0x30
   19ad8:	and	r0, r0, #17
   19adc:	cmp	r0, #16
   19ae0:	moveq	r0, #1
   19ae4:	bxeq	lr
   19ae8:	cmp	r0, #17
   19aec:	movne	r0, #0
   19af0:	bxne	lr
   19af4:	ldr	r0, [r1, #48]	; 0x30
   19af8:	cmp	r0, #0
   19afc:	movwne	r0, #1
   19b00:	bx	lr
   19b04:	clz	r2, r1
   19b08:	clz	r3, r0
   19b0c:	lsr	r2, r2, #5
   19b10:	lsr	r3, r3, #5
   19b14:	orrs	r2, r3, r2
   19b18:	movwne	r1, #1
   19b1c:	movwne	r0, #1
   19b20:	cmp	r1, #0
   19b24:	beq	19b54 <__assert_fail@plt+0x8300>
   19b28:	mvn	r2, #-2147483648	; 0x80000000
   19b2c:	udiv	r2, r2, r1
   19b30:	cmp	r2, r0
   19b34:	bcs	19b54 <__assert_fail@plt+0x8300>
   19b38:	push	{fp, lr}
   19b3c:	mov	fp, sp
   19b40:	bl	116d4 <__errno_location@plt>
   19b44:	mov	r1, #12
   19b48:	str	r1, [r0]
   19b4c:	mov	r0, #0
   19b50:	pop	{fp, pc}
   19b54:	b	11494 <calloc@plt>
   19b58:	cmp	r0, #0
   19b5c:	movweq	r0, #1
   19b60:	cmn	r0, #1
   19b64:	ble	19b6c <__assert_fail@plt+0x8318>
   19b68:	b	1162c <malloc@plt>
   19b6c:	push	{fp, lr}
   19b70:	mov	fp, sp
   19b74:	bl	116d4 <__errno_location@plt>
   19b78:	mov	r1, #12
   19b7c:	str	r1, [r0]
   19b80:	mov	r0, #0
   19b84:	pop	{fp, pc}
   19b88:	push	{fp, lr}
   19b8c:	mov	fp, sp
   19b90:	cmp	r0, #0
   19b94:	beq	19bb0 <__assert_fail@plt+0x835c>
   19b98:	cmp	r1, #0
   19b9c:	beq	19bbc <__assert_fail@plt+0x8368>
   19ba0:	cmn	r1, #1
   19ba4:	ble	19bc8 <__assert_fail@plt+0x8374>
   19ba8:	pop	{fp, lr}
   19bac:	b	11560 <realloc@plt>
   19bb0:	mov	r0, r1
   19bb4:	pop	{fp, lr}
   19bb8:	b	19b58 <__assert_fail@plt+0x8304>
   19bbc:	bl	1a198 <__assert_fail@plt+0x8944>
   19bc0:	mov	r0, #0
   19bc4:	pop	{fp, pc}
   19bc8:	bl	116d4 <__errno_location@plt>
   19bcc:	mov	r1, #12
   19bd0:	str	r1, [r0]
   19bd4:	mov	r0, #0
   19bd8:	pop	{fp, pc}
   19bdc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19be0:	add	fp, sp, #24
   19be4:	sub	sp, sp, #40	; 0x28
   19be8:	mov	r5, r0
   19bec:	ldrb	r0, [r2]
   19bf0:	cmp	r0, #0
   19bf4:	beq	19cd8 <__assert_fail@plt+0x8484>
   19bf8:	movw	r9, #54072	; 0xd338
   19bfc:	mov	r4, r2
   19c00:	mov	r6, r1
   19c04:	movt	r9, #2
   19c08:	ldr	r0, [r9]
   19c0c:	cmp	r0, #0
   19c10:	bne	19c7c <__assert_fail@plt+0x8428>
   19c14:	movw	r0, #48640	; 0xbe00
   19c18:	movw	r1, #18688	; 0x4900
   19c1c:	movt	r0, #1
   19c20:	movt	r1, #8
   19c24:	bl	11614 <open64@plt>
   19c28:	cmn	r0, #1
   19c2c:	ble	19cf0 <__assert_fail@plt+0x849c>
   19c30:	movw	r3, #48654	; 0xbe0e
   19c34:	add	r8, sp, #8
   19c38:	mov	r7, r0
   19c3c:	str	r0, [sp]
   19c40:	mov	r1, #1
   19c44:	mov	r2, #32
   19c48:	movt	r3, #1
   19c4c:	mov	r0, r8
   19c50:	bl	116e0 <__sprintf_chk@plt>
   19c54:	mov	r0, r8
   19c58:	mov	r1, #0
   19c5c:	bl	11740 <access@plt>
   19c60:	cmp	r0, #0
   19c64:	mvn	r1, #0
   19c68:	mov	r0, r7
   19c6c:	movweq	r1, #1
   19c70:	str	r1, [r9]
   19c74:	bl	11824 <close@plt>
   19c78:	ldr	r0, [r9]
   19c7c:	mov	r7, #0
   19c80:	cmp	r0, #0
   19c84:	blt	19ce4 <__assert_fail@plt+0x8490>
   19c88:	mov	r0, r4
   19c8c:	bl	116b0 <strlen@plt>
   19c90:	add	r0, r0, #27
   19c94:	cmp	r0, #4032	; 0xfc0
   19c98:	bls	19cac <__assert_fail@plt+0x8458>
   19c9c:	bl	19b58 <__assert_fail@plt+0x8304>
   19ca0:	mov	r5, r0
   19ca4:	cmp	r0, #0
   19ca8:	beq	19ce4 <__assert_fail@plt+0x8490>
   19cac:	movw	r3, #48677	; 0xbe25
   19cb0:	mov	r0, r5
   19cb4:	mov	r1, #1
   19cb8:	mvn	r2, #0
   19cbc:	str	r6, [sp]
   19cc0:	movt	r3, #1
   19cc4:	bl	116e0 <__sprintf_chk@plt>
   19cc8:	add	r0, r5, r0
   19ccc:	mov	r1, r4
   19cd0:	bl	115d8 <strcpy@plt>
   19cd4:	b	19ce0 <__assert_fail@plt+0x848c>
   19cd8:	mov	r0, #0
   19cdc:	strb	r0, [r5]
   19ce0:	mov	r7, r5
   19ce4:	mov	r0, r7
   19ce8:	sub	sp, fp, #24
   19cec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19cf0:	mvn	r0, #0
   19cf4:	mov	r7, #0
   19cf8:	str	r0, [r9]
   19cfc:	b	19ce4 <__assert_fail@plt+0x8490>
   19d00:	push	{r4, r5, r6, sl, fp, lr}
   19d04:	add	fp, sp, #16
   19d08:	mov	r4, r0
   19d0c:	bl	115e4 <__fpending@plt>
   19d10:	ldr	r6, [r4]
   19d14:	mov	r5, r0
   19d18:	mov	r0, r4
   19d1c:	bl	19e78 <__assert_fail@plt+0x8624>
   19d20:	tst	r6, #32
   19d24:	bne	19d5c <__assert_fail@plt+0x8508>
   19d28:	cmp	r0, #0
   19d2c:	mov	r4, r0
   19d30:	mvnne	r4, #0
   19d34:	cmp	r5, #0
   19d38:	bne	19d68 <__assert_fail@plt+0x8514>
   19d3c:	cmp	r0, #0
   19d40:	beq	19d68 <__assert_fail@plt+0x8514>
   19d44:	bl	116d4 <__errno_location@plt>
   19d48:	ldr	r0, [r0]
   19d4c:	subs	r4, r0, #9
   19d50:	mvnne	r4, #0
   19d54:	mov	r0, r4
   19d58:	pop	{r4, r5, r6, sl, fp, pc}
   19d5c:	mvn	r4, #0
   19d60:	cmp	r0, #0
   19d64:	beq	19d70 <__assert_fail@plt+0x851c>
   19d68:	mov	r0, r4
   19d6c:	pop	{r4, r5, r6, sl, fp, pc}
   19d70:	bl	116d4 <__errno_location@plt>
   19d74:	mov	r1, #0
   19d78:	str	r1, [r0]
   19d7c:	mov	r0, r4
   19d80:	pop	{r4, r5, r6, sl, fp, pc}
   19d84:	movw	r2, #62998	; 0xf616
   19d88:	mov	r1, #0
   19d8c:	movt	r2, #149	; 0x95
   19d90:	str	r1, [r0, #16]
   19d94:	str	r1, [r0, #20]
   19d98:	str	r2, [r0, #24]
   19d9c:	bx	lr
   19da0:	push	{r4, r5, r6, r7, fp, lr}
   19da4:	add	fp, sp, #16
   19da8:	ldr	r2, [r0, #24]
   19dac:	movw	r3, #62998	; 0xf616
   19db0:	movt	r3, #149	; 0x95
   19db4:	cmp	r2, r3
   19db8:	bne	19e58 <__assert_fail@plt+0x8604>
   19dbc:	mov	r3, r0
   19dc0:	ldr	r2, [r3, #16]!
   19dc4:	ldr	lr, [r3, #4]
   19dc8:	orrs	r5, r2, lr
   19dcc:	beq	19e04 <__assert_fail@plt+0x85b0>
   19dd0:	ldrd	r4, [r0]
   19dd4:	ldrd	r6, [r1, #96]	; 0x60
   19dd8:	eor	r7, r7, r5
   19ddc:	eor	r6, r6, r4
   19de0:	orrs	r7, r6, r7
   19de4:	bne	19e04 <__assert_fail@plt+0x85b0>
   19de8:	ldrd	r4, [r0, #8]
   19dec:	ldrd	r6, [r1]
   19df0:	mov	ip, #1
   19df4:	eor	r7, r7, r5
   19df8:	eor	r6, r6, r4
   19dfc:	orrs	r7, r6, r7
   19e00:	beq	19e24 <__assert_fail@plt+0x85d0>
   19e04:	adds	r4, r2, #1
   19e08:	mov	ip, #0
   19e0c:	adc	r5, lr, #0
   19e10:	and	r2, r4, r2
   19e14:	strd	r4, [r3]
   19e18:	and	r3, r5, lr
   19e1c:	orrs	r2, r2, r3
   19e20:	beq	19e2c <__assert_fail@plt+0x85d8>
   19e24:	mov	r0, ip
   19e28:	pop	{r4, r5, r6, r7, fp, pc}
   19e2c:	orrs	r2, r4, r5
   19e30:	moveq	ip, #1
   19e34:	moveq	r0, ip
   19e38:	popeq	{r4, r5, r6, r7, fp, pc}
   19e3c:	ldrd	r2, [r1]
   19e40:	str	r3, [r0, #12]
   19e44:	str	r2, [r0, #8]
   19e48:	ldrd	r2, [r1, #96]	; 0x60
   19e4c:	stm	r0, {r2, r3}
   19e50:	mov	r0, ip
   19e54:	pop	{r4, r5, r6, r7, fp, pc}
   19e58:	movw	r0, #48695	; 0xbe37
   19e5c:	movw	r1, #48719	; 0xbe4f
   19e60:	movw	r3, #48737	; 0xbe61
   19e64:	mov	r2, #60	; 0x3c
   19e68:	movt	r0, #1
   19e6c:	movt	r1, #1
   19e70:	movt	r3, #1
   19e74:	bl	11854 <__assert_fail@plt>
   19e78:	push	{r4, r5, r6, sl, fp, lr}
   19e7c:	add	fp, sp, #16
   19e80:	sub	sp, sp, #8
   19e84:	mov	r4, r0
   19e88:	bl	11710 <fileno@plt>
   19e8c:	cmn	r0, #1
   19e90:	ble	19f04 <__assert_fail@plt+0x86b0>
   19e94:	mov	r0, r4
   19e98:	bl	11644 <__freading@plt>
   19e9c:	cmp	r0, #0
   19ea0:	beq	19ecc <__assert_fail@plt+0x8678>
   19ea4:	mov	r0, r4
   19ea8:	bl	11710 <fileno@plt>
   19eac:	mov	r1, #1
   19eb0:	mov	r2, #0
   19eb4:	mov	r3, #0
   19eb8:	str	r1, [sp]
   19ebc:	bl	115c0 <lseek64@plt>
   19ec0:	and	r0, r0, r1
   19ec4:	cmn	r0, #1
   19ec8:	beq	19f04 <__assert_fail@plt+0x86b0>
   19ecc:	mov	r0, r4
   19ed0:	bl	1a13c <__assert_fail@plt+0x88e8>
   19ed4:	cmp	r0, #0
   19ed8:	beq	19f04 <__assert_fail@plt+0x86b0>
   19edc:	bl	116d4 <__errno_location@plt>
   19ee0:	ldr	r6, [r0]
   19ee4:	mov	r5, r0
   19ee8:	mov	r0, r4
   19eec:	bl	1174c <fclose@plt>
   19ef0:	cmp	r6, #0
   19ef4:	strne	r6, [r5]
   19ef8:	mvnne	r0, #0
   19efc:	sub	sp, fp, #16
   19f00:	pop	{r4, r5, r6, sl, fp, pc}
   19f04:	mov	r0, r4
   19f08:	sub	sp, fp, #16
   19f0c:	pop	{r4, r5, r6, sl, fp, lr}
   19f10:	b	1174c <fclose@plt>
   19f14:	sub	sp, sp, #8
   19f18:	push	{r4, r5, r6, r7, fp, lr}
   19f1c:	add	fp, sp, #16
   19f20:	sub	sp, sp, #8
   19f24:	mov	r5, r0
   19f28:	add	r0, fp, #8
   19f2c:	cmp	r1, #11
   19f30:	str	r3, [fp, #12]
   19f34:	str	r2, [fp, #8]
   19f38:	str	r0, [sp, #4]
   19f3c:	bhi	19f78 <__assert_fail@plt+0x8724>
   19f40:	mov	r0, #1
   19f44:	movw	r2, #1300	; 0x514
   19f48:	tst	r2, r0, lsl r1
   19f4c:	bne	1a038 <__assert_fail@plt+0x87e4>
   19f50:	movw	r2, #2570	; 0xa0a
   19f54:	tst	r2, r0, lsl r1
   19f58:	bne	19fa0 <__assert_fail@plt+0x874c>
   19f5c:	cmp	r1, #0
   19f60:	bne	19f78 <__assert_fail@plt+0x8724>
   19f64:	ldr	r0, [sp, #4]
   19f68:	add	r1, r0, #4
   19f6c:	str	r1, [sp, #4]
   19f70:	mov	r1, #0
   19f74:	b	1a044 <__assert_fail@plt+0x87f0>
   19f78:	sub	r0, r1, #1024	; 0x400
   19f7c:	cmp	r0, #10
   19f80:	bhi	1a038 <__assert_fail@plt+0x87e4>
   19f84:	mov	r2, #1
   19f88:	movw	r3, #645	; 0x285
   19f8c:	tst	r3, r2, lsl r0
   19f90:	bne	1a038 <__assert_fail@plt+0x87e4>
   19f94:	movw	r3, #1282	; 0x502
   19f98:	tst	r3, r2, lsl r0
   19f9c:	beq	19fac <__assert_fail@plt+0x8758>
   19fa0:	mov	r0, r5
   19fa4:	bl	11764 <fcntl64@plt>
   19fa8:	b	1a050 <__assert_fail@plt+0x87fc>
   19fac:	cmp	r0, #6
   19fb0:	bne	1a038 <__assert_fail@plt+0x87e4>
   19fb4:	ldr	r0, [sp, #4]
   19fb8:	movw	r7, #54076	; 0xd33c
   19fbc:	movt	r7, #2
   19fc0:	add	r1, r0, #4
   19fc4:	str	r1, [sp, #4]
   19fc8:	ldr	r6, [r0]
   19fcc:	ldr	r0, [r7]
   19fd0:	cmp	r0, #0
   19fd4:	blt	1a074 <__assert_fail@plt+0x8820>
   19fd8:	mov	r0, r5
   19fdc:	movw	r1, #1030	; 0x406
   19fe0:	mov	r2, r6
   19fe4:	bl	11764 <fcntl64@plt>
   19fe8:	mov	r4, r0
   19fec:	cmn	r0, #1
   19ff0:	bgt	1a068 <__assert_fail@plt+0x8814>
   19ff4:	bl	116d4 <__errno_location@plt>
   19ff8:	ldr	r0, [r0]
   19ffc:	cmp	r0, #22
   1a000:	bne	1a068 <__assert_fail@plt+0x8814>
   1a004:	mov	r0, r5
   1a008:	mov	r1, #0
   1a00c:	mov	r2, r6
   1a010:	bl	11764 <fcntl64@plt>
   1a014:	mov	r4, r0
   1a018:	cmp	r0, #0
   1a01c:	blt	1a054 <__assert_fail@plt+0x8800>
   1a020:	mvn	r0, #0
   1a024:	str	r0, [r7]
   1a028:	mov	r0, #1
   1a02c:	cmp	r0, #0
   1a030:	bne	1a0a0 <__assert_fail@plt+0x884c>
   1a034:	b	1a054 <__assert_fail@plt+0x8800>
   1a038:	ldr	r0, [sp, #4]
   1a03c:	add	r2, r0, #4
   1a040:	str	r2, [sp, #4]
   1a044:	ldr	r2, [r0]
   1a048:	mov	r0, r5
   1a04c:	bl	11764 <fcntl64@plt>
   1a050:	mov	r4, r0
   1a054:	mov	r0, r4
   1a058:	sub	sp, fp, #16
   1a05c:	pop	{r4, r5, r6, r7, fp, lr}
   1a060:	add	sp, sp, #8
   1a064:	bx	lr
   1a068:	mov	r0, #1
   1a06c:	str	r0, [r7]
   1a070:	b	1a054 <__assert_fail@plt+0x8800>
   1a074:	mov	r0, r5
   1a078:	mov	r1, #0
   1a07c:	mov	r2, r6
   1a080:	bl	11764 <fcntl64@plt>
   1a084:	mov	r4, r0
   1a088:	ldr	r0, [r7]
   1a08c:	add	r0, r0, #1
   1a090:	clz	r0, r0
   1a094:	lsr	r0, r0, #5
   1a098:	cmp	r0, #0
   1a09c:	beq	1a054 <__assert_fail@plt+0x8800>
   1a0a0:	cmp	r4, #0
   1a0a4:	blt	1a054 <__assert_fail@plt+0x8800>
   1a0a8:	mov	r0, r4
   1a0ac:	mov	r1, #1
   1a0b0:	bl	11764 <fcntl64@plt>
   1a0b4:	cmp	r0, #0
   1a0b8:	blt	1a0d4 <__assert_fail@plt+0x8880>
   1a0bc:	orr	r2, r0, #1
   1a0c0:	mov	r0, r4
   1a0c4:	mov	r1, #2
   1a0c8:	bl	11764 <fcntl64@plt>
   1a0cc:	cmn	r0, #1
   1a0d0:	bne	1a054 <__assert_fail@plt+0x8800>
   1a0d4:	bl	116d4 <__errno_location@plt>
   1a0d8:	ldr	r6, [r0]
   1a0dc:	mov	r5, r0
   1a0e0:	mov	r0, r4
   1a0e4:	bl	11824 <close@plt>
   1a0e8:	str	r6, [r5]
   1a0ec:	mvn	r4, #0
   1a0f0:	b	1a054 <__assert_fail@plt+0x8800>
   1a0f4:	sub	sp, sp, #8
   1a0f8:	push	{fp, lr}
   1a0fc:	mov	fp, sp
   1a100:	sub	sp, sp, #8
   1a104:	str	r2, [fp, #8]
   1a108:	mov	r2, #0
   1a10c:	tst	r1, #64	; 0x40
   1a110:	str	r3, [fp, #12]
   1a114:	addne	r2, fp, #8
   1a118:	orrne	r2, r2, #4
   1a11c:	strne	r2, [sp, #4]
   1a120:	ldrne	r2, [fp, #8]
   1a124:	bl	11614 <open64@plt>
   1a128:	bl	18de8 <__assert_fail@plt+0x7594>
   1a12c:	mov	sp, fp
   1a130:	pop	{fp, lr}
   1a134:	add	sp, sp, #8
   1a138:	bx	lr
   1a13c:	push	{r4, sl, fp, lr}
   1a140:	add	fp, sp, #8
   1a144:	sub	sp, sp, #8
   1a148:	mov	r4, r0
   1a14c:	cmp	r0, #0
   1a150:	beq	1a16c <__assert_fail@plt+0x8918>
   1a154:	mov	r0, r4
   1a158:	bl	11644 <__freading@plt>
   1a15c:	cmp	r0, #0
   1a160:	ldrbne	r0, [r4, #1]
   1a164:	tstne	r0, #1
   1a168:	bne	1a17c <__assert_fail@plt+0x8928>
   1a16c:	mov	r0, r4
   1a170:	sub	sp, fp, #8
   1a174:	pop	{r4, sl, fp, lr}
   1a178:	b	114d0 <fflush@plt>
   1a17c:	mov	r0, #1
   1a180:	mov	r2, #0
   1a184:	mov	r3, #0
   1a188:	str	r0, [sp]
   1a18c:	mov	r0, r4
   1a190:	bl	1a1c0 <__assert_fail@plt+0x896c>
   1a194:	b	1a16c <__assert_fail@plt+0x8918>
   1a198:	push	{r4, r5, r6, sl, fp, lr}
   1a19c:	add	fp, sp, #16
   1a1a0:	mov	r4, r0
   1a1a4:	bl	116d4 <__errno_location@plt>
   1a1a8:	ldr	r6, [r0]
   1a1ac:	mov	r5, r0
   1a1b0:	mov	r0, r4
   1a1b4:	bl	114f4 <free@plt>
   1a1b8:	str	r6, [r5]
   1a1bc:	pop	{r4, r5, r6, sl, fp, pc}
   1a1c0:	push	{r4, r5, r6, r7, fp, lr}
   1a1c4:	add	fp, sp, #16
   1a1c8:	sub	sp, sp, #8
   1a1cc:	mov	r4, r0
   1a1d0:	ldr	r0, [r0, #4]
   1a1d4:	mov	r5, r3
   1a1d8:	mov	r6, r2
   1a1dc:	ldr	r1, [r4, #8]
   1a1e0:	cmp	r1, r0
   1a1e4:	bne	1a200 <__assert_fail@plt+0x89ac>
   1a1e8:	ldrd	r0, [r4, #16]
   1a1ec:	cmp	r1, r0
   1a1f0:	bne	1a200 <__assert_fail@plt+0x89ac>
   1a1f4:	ldr	r0, [r4, #36]	; 0x24
   1a1f8:	cmp	r0, #0
   1a1fc:	beq	1a218 <__assert_fail@plt+0x89c4>
   1a200:	mov	r0, r4
   1a204:	mov	r2, r6
   1a208:	mov	r3, r5
   1a20c:	sub	sp, fp, #16
   1a210:	pop	{r4, r5, r6, r7, fp, lr}
   1a214:	b	11758 <fseeko64@plt>
   1a218:	ldr	r7, [fp, #8]
   1a21c:	mov	r0, r4
   1a220:	bl	11710 <fileno@plt>
   1a224:	mov	r2, r6
   1a228:	mov	r3, r5
   1a22c:	str	r7, [sp]
   1a230:	bl	115c0 <lseek64@plt>
   1a234:	and	r2, r0, r1
   1a238:	cmn	r2, #1
   1a23c:	mvneq	r0, #0
   1a240:	subeq	sp, fp, #16
   1a244:	popeq	{r4, r5, r6, r7, fp, pc}
   1a248:	strd	r0, [r4, #80]	; 0x50
   1a24c:	ldr	r0, [r4]
   1a250:	bic	r0, r0, #16
   1a254:	str	r0, [r4]
   1a258:	mov	r0, #0
   1a25c:	sub	sp, fp, #16
   1a260:	pop	{r4, r5, r6, r7, fp, pc}
   1a264:	push	{fp, lr}
   1a268:	mov	fp, sp
   1a26c:	mov	r0, #14
   1a270:	bl	11788 <nl_langinfo@plt>
   1a274:	movw	r1, #45451	; 0xb18b
   1a278:	cmp	r0, #0
   1a27c:	movt	r1, #1
   1a280:	movne	r1, r0
   1a284:	movw	r0, #48804	; 0xbea4
   1a288:	ldrb	r2, [r1]
   1a28c:	movt	r0, #1
   1a290:	cmp	r2, #0
   1a294:	movne	r0, r1
   1a298:	pop	{fp, pc}
   1a29c:	push	{r4, r5, r6, r7, fp, lr}
   1a2a0:	add	fp, sp, #16
   1a2a4:	sub	sp, sp, #8
   1a2a8:	add	r5, sp, #4
   1a2ac:	cmp	r0, #0
   1a2b0:	mov	r7, r2
   1a2b4:	mov	r4, r1
   1a2b8:	movne	r5, r0
   1a2bc:	mov	r0, r5
   1a2c0:	bl	115f0 <mbrtowc@plt>
   1a2c4:	mov	r6, r0
   1a2c8:	cmp	r7, #0
   1a2cc:	beq	1a2f0 <__assert_fail@plt+0x8a9c>
   1a2d0:	cmn	r6, #2
   1a2d4:	bcc	1a2f0 <__assert_fail@plt+0x8a9c>
   1a2d8:	mov	r0, #0
   1a2dc:	bl	1a7e0 <__assert_fail@plt+0x8f8c>
   1a2e0:	cmp	r0, #0
   1a2e4:	ldrbeq	r0, [r4]
   1a2e8:	moveq	r6, #1
   1a2ec:	streq	r0, [r5]
   1a2f0:	mov	r0, r6
   1a2f4:	sub	sp, fp, #16
   1a2f8:	pop	{r4, r5, r6, r7, fp, pc}
   1a2fc:	push	{fp, lr}
   1a300:	mov	fp, sp
   1a304:	mov	r4, r0
   1a308:	movw	r0, #53604	; 0xd164
   1a30c:	movw	r1, #48810	; 0xbeaa
   1a310:	mov	r2, #5
   1a314:	movt	r0, #2
   1a318:	movt	r1, #1
   1a31c:	ldr	r5, [r0]
   1a320:	mov	r0, #0
   1a324:	bl	11548 <dcgettext@plt>
   1a328:	mov	r2, r0
   1a32c:	mov	r0, r5
   1a330:	mov	r1, r4
   1a334:	bl	115fc <error@plt>
   1a338:	bl	11818 <abort@plt>
   1a33c:	push	{fp, lr}
   1a340:	mov	fp, sp
   1a344:	mov	r4, r0
   1a348:	movw	r0, #53604	; 0xd164
   1a34c:	movw	r1, #48853	; 0xbed5
   1a350:	mov	r2, #5
   1a354:	movt	r0, #2
   1a358:	movt	r1, #1
   1a35c:	ldr	r5, [r0]
   1a360:	mov	r0, #0
   1a364:	bl	11548 <dcgettext@plt>
   1a368:	mov	r2, r0
   1a36c:	mov	r0, r5
   1a370:	mov	r1, r4
   1a374:	bl	115fc <error@plt>
   1a378:	bl	11818 <abort@plt>
   1a37c:	cmp	r2, #0
   1a380:	beq	1a3b0 <__assert_fail@plt+0x8b5c>
   1a384:	mvn	r3, #0
   1a388:	udiv	r3, r3, r2
   1a38c:	cmp	r3, r1
   1a390:	bcs	1a3b0 <__assert_fail@plt+0x8b5c>
   1a394:	push	{fp, lr}
   1a398:	mov	fp, sp
   1a39c:	bl	116d4 <__errno_location@plt>
   1a3a0:	mov	r1, #12
   1a3a4:	str	r1, [r0]
   1a3a8:	mov	r0, #0
   1a3ac:	pop	{fp, pc}
   1a3b0:	mul	r1, r2, r1
   1a3b4:	b	19b88 <__assert_fail@plt+0x8334>
   1a3b8:	push	{r4, r5, fp, lr}
   1a3bc:	add	fp, sp, #8
   1a3c0:	mov	r4, #0
   1a3c4:	mov	r5, r0
   1a3c8:	mov	r1, #524288	; 0x80000
   1a3cc:	str	r4, [r0, #4]
   1a3d0:	movw	r0, #47283	; 0xb8b3
   1a3d4:	movt	r0, #1
   1a3d8:	bl	1a0f4 <__assert_fail@plt+0x88a0>
   1a3dc:	cmn	r0, #1
   1a3e0:	str	r0, [r5]
   1a3e4:	ble	1a3f0 <__assert_fail@plt+0x8b9c>
   1a3e8:	mov	r0, r4
   1a3ec:	pop	{r4, r5, fp, pc}
   1a3f0:	mov	r0, #0
   1a3f4:	mov	r1, #0
   1a3f8:	mov	r4, #0
   1a3fc:	bl	11680 <getcwd@plt>
   1a400:	cmp	r0, #0
   1a404:	str	r0, [r5, #4]
   1a408:	mvneq	r4, #0
   1a40c:	mov	r0, r4
   1a410:	pop	{r4, r5, fp, pc}
   1a414:	ldr	r1, [r0]
   1a418:	cmp	r1, #0
   1a41c:	blt	1a428 <__assert_fail@plt+0x8bd4>
   1a420:	mov	r0, r1
   1a424:	b	117b8 <fchdir@plt>
   1a428:	ldr	r0, [r0, #4]
   1a42c:	b	1a464 <__assert_fail@plt+0x8c10>
   1a430:	push	{r4, sl, fp, lr}
   1a434:	add	fp, sp, #8
   1a438:	mov	r4, r0
   1a43c:	ldr	r0, [r0]
   1a440:	cmp	r0, #0
   1a444:	blt	1a44c <__assert_fail@plt+0x8bf8>
   1a448:	bl	11824 <close@plt>
   1a44c:	ldr	r0, [r4, #4]
   1a450:	pop	{r4, sl, fp, lr}
   1a454:	b	1a198 <__assert_fail@plt+0x8944>
   1a458:	mov	r1, #0
   1a45c:	mov	r2, #3
   1a460:	b	19f14 <__assert_fail@plt+0x86c0>
   1a464:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a468:	add	fp, sp, #28
   1a46c:	sub	sp, sp, #4
   1a470:	mov	r4, r0
   1a474:	bl	11584 <chdir@plt>
   1a478:	cmp	r0, #0
   1a47c:	beq	1a540 <__assert_fail@plt+0x8cec>
   1a480:	mov	r6, r0
   1a484:	bl	116d4 <__errno_location@plt>
   1a488:	mov	r9, r0
   1a48c:	ldr	r0, [r0]
   1a490:	cmp	r0, #36	; 0x24
   1a494:	bne	1a714 <__assert_fail@plt+0x8ec0>
   1a498:	mov	r0, r4
   1a49c:	bl	116b0 <strlen@plt>
   1a4a0:	cmp	r0, #0
   1a4a4:	beq	1a760 <__assert_fail@plt+0x8f0c>
   1a4a8:	mov	r7, r0
   1a4ac:	mov	r0, #0
   1a4b0:	cmp	r0, r7, lsr #12
   1a4b4:	beq	1a780 <__assert_fail@plt+0x8f2c>
   1a4b8:	movw	r1, #48693	; 0xbe35
   1a4bc:	mov	r0, r4
   1a4c0:	movt	r1, #1
   1a4c4:	bl	11848 <strspn@plt>
   1a4c8:	cmp	r0, #0
   1a4cc:	beq	1a548 <__assert_fail@plt+0x8cf4>
   1a4d0:	mov	r6, r0
   1a4d4:	cmp	r0, #2
   1a4d8:	bne	1a554 <__assert_fail@plt+0x8d00>
   1a4dc:	add	r0, r4, #3
   1a4e0:	sub	r2, r7, #3
   1a4e4:	mov	r1, #47	; 0x2f
   1a4e8:	mov	r8, #47	; 0x2f
   1a4ec:	bl	11728 <memchr@plt>
   1a4f0:	cmp	r0, #0
   1a4f4:	beq	1a6c0 <__assert_fail@plt+0x8e6c>
   1a4f8:	mov	r6, r0
   1a4fc:	mov	r0, #0
   1a500:	mov	r1, r4
   1a504:	mov	r2, #18688	; 0x4900
   1a508:	strb	r0, [r6]
   1a50c:	mvn	r0, #99	; 0x63
   1a510:	bl	116bc <openat64@plt>
   1a514:	cmp	r0, #0
   1a518:	strb	r8, [r6]
   1a51c:	blt	1a6b8 <__assert_fail@plt+0x8e64>
   1a520:	movw	r1, #48693	; 0xbe35
   1a524:	add	r6, r6, #1
   1a528:	mov	r5, r0
   1a52c:	movt	r1, #1
   1a530:	mov	r0, r6
   1a534:	bl	11848 <strspn@plt>
   1a538:	add	r6, r6, r0
   1a53c:	b	1a578 <__assert_fail@plt+0x8d24>
   1a540:	mov	r6, #0
   1a544:	b	1a714 <__assert_fail@plt+0x8ec0>
   1a548:	mvn	r5, #99	; 0x63
   1a54c:	mov	r6, r4
   1a550:	b	1a578 <__assert_fail@plt+0x8d24>
   1a554:	movw	r1, #48693	; 0xbe35
   1a558:	mvn	r0, #99	; 0x63
   1a55c:	mov	r2, #18688	; 0x4900
   1a560:	movt	r1, #1
   1a564:	bl	116bc <openat64@plt>
   1a568:	cmp	r0, #0
   1a56c:	blt	1a6b8 <__assert_fail@plt+0x8e64>
   1a570:	mov	r5, r0
   1a574:	add	r6, r4, r6
   1a578:	ldrb	r0, [r6]
   1a57c:	cmp	r0, #47	; 0x2f
   1a580:	beq	1a7a0 <__assert_fail@plt+0x8f4c>
   1a584:	add	sl, r4, r7
   1a588:	cmp	r6, sl
   1a58c:	bhi	1a7c0 <__assert_fail@plt+0x8f6c>
   1a590:	sub	r0, sl, r6
   1a594:	str	r9, [sp]
   1a598:	cmp	r0, #4096	; 0x1000
   1a59c:	blt	1a674 <__assert_fail@plt+0x8e20>
   1a5a0:	movw	r9, #48693	; 0xbe35
   1a5a4:	mov	r8, #0
   1a5a8:	movt	r9, #1
   1a5ac:	mov	r0, r6
   1a5b0:	mov	r1, #47	; 0x2f
   1a5b4:	mov	r2, #4096	; 0x1000
   1a5b8:	bl	116c8 <memrchr@plt>
   1a5bc:	cmp	r0, #0
   1a5c0:	beq	1a6cc <__assert_fail@plt+0x8e78>
   1a5c4:	mov	r4, r0
   1a5c8:	strb	r8, [r0], -r6
   1a5cc:	cmp	r0, #4096	; 0x1000
   1a5d0:	bge	1a720 <__assert_fail@plt+0x8ecc>
   1a5d4:	mov	r0, r5
   1a5d8:	mov	r1, r6
   1a5dc:	mov	r2, #18688	; 0x4900
   1a5e0:	bl	116bc <openat64@plt>
   1a5e4:	cmp	r0, #0
   1a5e8:	blt	1a6dc <__assert_fail@plt+0x8e88>
   1a5ec:	mov	r7, r0
   1a5f0:	cmp	r5, #0
   1a5f4:	blt	1a608 <__assert_fail@plt+0x8db4>
   1a5f8:	mov	r0, r5
   1a5fc:	bl	11824 <close@plt>
   1a600:	cmp	r0, #0
   1a604:	bne	1a740 <__assert_fail@plt+0x8eec>
   1a608:	mov	r0, #47	; 0x2f
   1a60c:	mov	r1, r9
   1a610:	strb	r0, [r4], #1
   1a614:	mov	r0, r4
   1a618:	bl	11848 <strspn@plt>
   1a61c:	add	r6, r4, r0
   1a620:	mov	r5, r7
   1a624:	sub	r0, sl, r6
   1a628:	cmp	r0, #4096	; 0x1000
   1a62c:	bge	1a5ac <__assert_fail@plt+0x8d58>
   1a630:	cmp	r6, sl
   1a634:	bcs	1a680 <__assert_fail@plt+0x8e2c>
   1a638:	mov	r0, r7
   1a63c:	mov	r1, r6
   1a640:	mov	r2, #18688	; 0x4900
   1a644:	bl	116bc <openat64@plt>
   1a648:	ldr	r9, [sp]
   1a64c:	cmp	r0, #0
   1a650:	blt	1a6ec <__assert_fail@plt+0x8e98>
   1a654:	mov	r5, r0
   1a658:	cmp	r7, #0
   1a65c:	blt	1a688 <__assert_fail@plt+0x8e34>
   1a660:	mov	r0, r7
   1a664:	bl	11824 <close@plt>
   1a668:	cmp	r0, #0
   1a66c:	beq	1a688 <__assert_fail@plt+0x8e34>
   1a670:	b	1a740 <__assert_fail@plt+0x8eec>
   1a674:	mov	r7, r5
   1a678:	cmp	r6, sl
   1a67c:	bcc	1a638 <__assert_fail@plt+0x8de4>
   1a680:	ldr	r9, [sp]
   1a684:	mov	r5, r7
   1a688:	mov	r0, r5
   1a68c:	bl	117b8 <fchdir@plt>
   1a690:	cmp	r0, #0
   1a694:	bne	1a6f0 <__assert_fail@plt+0x8e9c>
   1a698:	mov	r6, #0
   1a69c:	cmp	r5, #0
   1a6a0:	blt	1a714 <__assert_fail@plt+0x8ec0>
   1a6a4:	mov	r0, r5
   1a6a8:	bl	11824 <close@plt>
   1a6ac:	cmp	r0, #0
   1a6b0:	beq	1a714 <__assert_fail@plt+0x8ec0>
   1a6b4:	b	1a740 <__assert_fail@plt+0x8eec>
   1a6b8:	ldr	r4, [r9]
   1a6bc:	b	1a70c <__assert_fail@plt+0x8eb8>
   1a6c0:	mov	r0, #36	; 0x24
   1a6c4:	str	r0, [r9]
   1a6c8:	b	1a710 <__assert_fail@plt+0x8ebc>
   1a6cc:	ldr	r1, [sp]
   1a6d0:	mov	r0, #36	; 0x24
   1a6d4:	str	r0, [r1]
   1a6d8:	b	1a710 <__assert_fail@plt+0x8ebc>
   1a6dc:	ldr	r9, [sp]
   1a6e0:	mov	r0, #47	; 0x2f
   1a6e4:	strb	r0, [r4]
   1a6e8:	b	1a6f0 <__assert_fail@plt+0x8e9c>
   1a6ec:	mov	r5, r7
   1a6f0:	ldr	r4, [r9]
   1a6f4:	cmp	r5, #0
   1a6f8:	blt	1a70c <__assert_fail@plt+0x8eb8>
   1a6fc:	mov	r0, r5
   1a700:	bl	11824 <close@plt>
   1a704:	cmp	r0, #0
   1a708:	bne	1a740 <__assert_fail@plt+0x8eec>
   1a70c:	str	r4, [r9]
   1a710:	mvn	r6, #0
   1a714:	mov	r0, r6
   1a718:	sub	sp, fp, #28
   1a71c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a720:	movw	r0, #48986	; 0xbf5a
   1a724:	movw	r1, #48907	; 0xbf0b
   1a728:	movw	r3, #48924	; 0xbf1c
   1a72c:	mov	r2, #179	; 0xb3
   1a730:	movt	r0, #1
   1a734:	movt	r1, #1
   1a738:	movt	r3, #1
   1a73c:	bl	11854 <__assert_fail@plt>
   1a740:	movw	r0, #49005	; 0xbf6d
   1a744:	movw	r1, #48907	; 0xbf0b
   1a748:	movw	r3, #49018	; 0xbf7a
   1a74c:	mov	r2, #64	; 0x40
   1a750:	movt	r0, #1
   1a754:	movt	r1, #1
   1a758:	movt	r3, #1
   1a75c:	bl	11854 <__assert_fail@plt>
   1a760:	movw	r0, #48899	; 0xbf03
   1a764:	movw	r1, #48907	; 0xbf0b
   1a768:	movw	r3, #48924	; 0xbf1c
   1a76c:	mov	r2, #126	; 0x7e
   1a770:	movt	r0, #1
   1a774:	movt	r1, #1
   1a778:	movt	r3, #1
   1a77c:	bl	11854 <__assert_fail@plt>
   1a780:	movw	r0, #48947	; 0xbf33
   1a784:	movw	r1, #48907	; 0xbf0b
   1a788:	movw	r3, #48924	; 0xbf1c
   1a78c:	mov	r2, #127	; 0x7f
   1a790:	movt	r0, #1
   1a794:	movt	r1, #1
   1a798:	movt	r3, #1
   1a79c:	bl	11854 <__assert_fail@plt>
   1a7a0:	movw	r0, #48959	; 0xbf3f
   1a7a4:	movw	r1, #48907	; 0xbf0b
   1a7a8:	movw	r3, #48924	; 0xbf1c
   1a7ac:	mov	r2, #162	; 0xa2
   1a7b0:	movt	r0, #1
   1a7b4:	movt	r1, #1
   1a7b8:	movt	r3, #1
   1a7bc:	bl	11854 <__assert_fail@plt>
   1a7c0:	movw	r0, #48971	; 0xbf4b
   1a7c4:	movw	r1, #48907	; 0xbf0b
   1a7c8:	movw	r3, #48924	; 0xbf1c
   1a7cc:	mov	r2, #163	; 0xa3
   1a7d0:	movt	r0, #1
   1a7d4:	movt	r1, #1
   1a7d8:	movt	r3, #1
   1a7dc:	bl	11854 <__assert_fail@plt>
   1a7e0:	push	{r4, sl, fp, lr}
   1a7e4:	add	fp, sp, #8
   1a7e8:	sub	sp, sp, #264	; 0x108
   1a7ec:	add	r1, sp, #7
   1a7f0:	movw	r2, #257	; 0x101
   1a7f4:	bl	1a844 <__assert_fail@plt+0x8ff0>
   1a7f8:	mov	r4, #0
   1a7fc:	cmp	r0, #0
   1a800:	bne	1a838 <__assert_fail@plt+0x8fe4>
   1a804:	movw	r1, #49055	; 0xbf9f
   1a808:	add	r0, sp, #7
   1a80c:	movt	r1, #1
   1a810:	bl	114c4 <strcmp@plt>
   1a814:	cmp	r0, #0
   1a818:	beq	1a838 <__assert_fail@plt+0x8fe4>
   1a81c:	movw	r1, #49057	; 0xbfa1
   1a820:	add	r0, sp, #7
   1a824:	movt	r1, #1
   1a828:	bl	114c4 <strcmp@plt>
   1a82c:	mov	r4, r0
   1a830:	cmp	r0, #0
   1a834:	movwne	r4, #1
   1a838:	mov	r0, r4
   1a83c:	sub	sp, fp, #8
   1a840:	pop	{r4, sl, fp, pc}
   1a844:	push	{r4, r5, r6, r7, fp, lr}
   1a848:	add	fp, sp, #16
   1a84c:	mov	r4, r1
   1a850:	mov	r1, #0
   1a854:	mov	r6, r2
   1a858:	bl	11770 <setlocale@plt>
   1a85c:	cmp	r0, #0
   1a860:	beq	1a890 <__assert_fail@plt+0x903c>
   1a864:	mov	r7, r0
   1a868:	bl	116b0 <strlen@plt>
   1a86c:	cmp	r0, r6
   1a870:	bcs	1a8b0 <__assert_fail@plt+0x905c>
   1a874:	add	r2, r0, #1
   1a878:	mov	r0, r4
   1a87c:	mov	r1, r7
   1a880:	bl	1150c <memcpy@plt>
   1a884:	mov	r5, #0
   1a888:	mov	r0, r5
   1a88c:	pop	{r4, r5, r6, r7, fp, pc}
   1a890:	cmp	r6, #0
   1a894:	mov	r5, #22
   1a898:	movne	r0, #0
   1a89c:	strbne	r0, [r4]
   1a8a0:	movne	r0, r5
   1a8a4:	popne	{r4, r5, r6, r7, fp, pc}
   1a8a8:	mov	r0, r5
   1a8ac:	pop	{r4, r5, r6, r7, fp, pc}
   1a8b0:	mov	r5, #34	; 0x22
   1a8b4:	cmp	r6, #0
   1a8b8:	beq	1a8d8 <__assert_fail@plt+0x9084>
   1a8bc:	sub	r6, r6, #1
   1a8c0:	mov	r0, r4
   1a8c4:	mov	r1, r7
   1a8c8:	mov	r2, r6
   1a8cc:	bl	1150c <memcpy@plt>
   1a8d0:	mov	r0, #0
   1a8d4:	strb	r0, [r4, r6]
   1a8d8:	mov	r0, r5
   1a8dc:	pop	{r4, r5, r6, r7, fp, pc}
   1a8e0:	mov	r1, #0
   1a8e4:	b	11770 <setlocale@plt>
   1a8e8:	cmp	r3, #0
   1a8ec:	cmpeq	r2, #0
   1a8f0:	bne	1a908 <__assert_fail@plt+0x90b4>
   1a8f4:	cmp	r1, #0
   1a8f8:	cmpeq	r0, #0
   1a8fc:	mvnne	r1, #0
   1a900:	mvnne	r0, #0
   1a904:	b	1a924 <__assert_fail@plt+0x90d0>
   1a908:	sub	sp, sp, #8
   1a90c:	push	{sp, lr}
   1a910:	bl	1a934 <__assert_fail@plt+0x90e0>
   1a914:	ldr	lr, [sp, #4]
   1a918:	add	sp, sp, #8
   1a91c:	pop	{r2, r3}
   1a920:	bx	lr
   1a924:	push	{r1, lr}
   1a928:	mov	r0, #8
   1a92c:	bl	114ac <raise@plt>
   1a930:	pop	{r1, pc}
   1a934:	cmp	r1, r3
   1a938:	cmpeq	r0, r2
   1a93c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a940:	mov	r4, r0
   1a944:	movcc	r0, #0
   1a948:	mov	r5, r1
   1a94c:	ldr	lr, [sp, #36]	; 0x24
   1a950:	movcc	r1, r0
   1a954:	bcc	1aa50 <__assert_fail@plt+0x91fc>
   1a958:	cmp	r3, #0
   1a95c:	clzeq	ip, r2
   1a960:	clzne	ip, r3
   1a964:	addeq	ip, ip, #32
   1a968:	cmp	r5, #0
   1a96c:	clzeq	r1, r4
   1a970:	addeq	r1, r1, #32
   1a974:	clzne	r1, r5
   1a978:	sub	ip, ip, r1
   1a97c:	sub	sl, ip, #32
   1a980:	lsl	r9, r3, ip
   1a984:	rsb	fp, ip, #32
   1a988:	orr	r9, r9, r2, lsl sl
   1a98c:	orr	r9, r9, r2, lsr fp
   1a990:	lsl	r8, r2, ip
   1a994:	cmp	r5, r9
   1a998:	cmpeq	r4, r8
   1a99c:	movcc	r0, #0
   1a9a0:	movcc	r1, r0
   1a9a4:	bcc	1a9c0 <__assert_fail@plt+0x916c>
   1a9a8:	mov	r0, #1
   1a9ac:	subs	r4, r4, r8
   1a9b0:	lsl	r1, r0, sl
   1a9b4:	orr	r1, r1, r0, lsr fp
   1a9b8:	lsl	r0, r0, ip
   1a9bc:	sbc	r5, r5, r9
   1a9c0:	cmp	ip, #0
   1a9c4:	beq	1aa50 <__assert_fail@plt+0x91fc>
   1a9c8:	lsr	r6, r8, #1
   1a9cc:	orr	r6, r6, r9, lsl #31
   1a9d0:	lsr	r7, r9, #1
   1a9d4:	mov	r2, ip
   1a9d8:	b	1a9fc <__assert_fail@plt+0x91a8>
   1a9dc:	subs	r3, r4, r6
   1a9e0:	sbc	r8, r5, r7
   1a9e4:	adds	r3, r3, r3
   1a9e8:	adc	r8, r8, r8
   1a9ec:	adds	r4, r3, #1
   1a9f0:	adc	r5, r8, #0
   1a9f4:	subs	r2, r2, #1
   1a9f8:	beq	1aa18 <__assert_fail@plt+0x91c4>
   1a9fc:	cmp	r5, r7
   1aa00:	cmpeq	r4, r6
   1aa04:	bcs	1a9dc <__assert_fail@plt+0x9188>
   1aa08:	adds	r4, r4, r4
   1aa0c:	adc	r5, r5, r5
   1aa10:	subs	r2, r2, #1
   1aa14:	bne	1a9fc <__assert_fail@plt+0x91a8>
   1aa18:	lsr	r3, r4, ip
   1aa1c:	orr	r3, r3, r5, lsl fp
   1aa20:	lsr	r2, r5, ip
   1aa24:	orr	r3, r3, r5, lsr sl
   1aa28:	adds	r0, r0, r4
   1aa2c:	mov	r4, r3
   1aa30:	lsl	r3, r2, ip
   1aa34:	orr	r3, r3, r4, lsl sl
   1aa38:	lsl	ip, r4, ip
   1aa3c:	orr	r3, r3, r4, lsr fp
   1aa40:	adc	r1, r1, r5
   1aa44:	subs	r0, r0, ip
   1aa48:	mov	r5, r2
   1aa4c:	sbc	r1, r1, r3
   1aa50:	cmp	lr, #0
   1aa54:	strdne	r4, [lr]
   1aa58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aa60:	mov	r7, r0
   1aa64:	ldr	r6, [pc, #72]	; 1aab4 <__assert_fail@plt+0x9260>
   1aa68:	ldr	r5, [pc, #72]	; 1aab8 <__assert_fail@plt+0x9264>
   1aa6c:	add	r6, pc, r6
   1aa70:	add	r5, pc, r5
   1aa74:	sub	r6, r6, r5
   1aa78:	mov	r8, r1
   1aa7c:	mov	r9, r2
   1aa80:	bl	11468 <fstatfs64@plt-0x20>
   1aa84:	asrs	r6, r6, #2
   1aa88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa8c:	mov	r4, #0
   1aa90:	add	r4, r4, #1
   1aa94:	ldr	r3, [r5], #4
   1aa98:	mov	r2, r9
   1aa9c:	mov	r1, r8
   1aaa0:	mov	r0, r7
   1aaa4:	blx	r3
   1aaa8:	cmp	r6, r4
   1aaac:	bne	1aa90 <__assert_fail@plt+0x923c>
   1aab0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aab4:	muleq	r1, r0, r4
   1aab8:	andeq	r2, r1, r8, lsl #9
   1aabc:	bx	lr
   1aac0:	ldr	r3, [pc, #12]	; 1aad4 <__assert_fail@plt+0x9280>
   1aac4:	mov	r1, #0
   1aac8:	add	r3, pc, r3
   1aacc:	ldr	r2, [r3]
   1aad0:	b	116ec <__cxa_atexit@plt>
   1aad4:	andeq	r2, r1, ip, lsl #13

Disassembly of section .fini:

0001aad8 <.fini>:
   1aad8:	push	{r3, lr}
   1aadc:	pop	{r3, pc}
