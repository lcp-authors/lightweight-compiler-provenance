
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010e94 <.init>:
   10e94:	push	{r3, lr}
   10e98:	bl	111f0 <__assert_fail@plt+0x48>
   10e9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ea0 <calloc@plt-0x14>:
   10ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea4:	ldr	lr, [pc, #4]	; 10eb0 <calloc@plt-0x4>
   10ea8:	add	lr, pc, lr
   10eac:	ldr	pc, [lr, #8]!
   10eb0:	andeq	r7, r1, r0, asr r1

00010eb4 <calloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #336]!	; 0x150

00010ec0 <endgrent@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #328]!	; 0x148

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #320]!	; 0x140

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #312]!	; 0x138

00010ee4 <getpwnam@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #304]!	; 0x130

00010ef0 <strcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #296]!	; 0x128

00010efc <getpwuid@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #288]!	; 0x120

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #280]!	; 0x118

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #272]!	; 0x110

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #264]!	; 0x108

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #256]!	; 0x100

00010f38 <execvp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #248]!	; 0xf8

00010f44 <__strtoull_internal@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #240]!	; 0xf0

00010f50 <mbsinit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #232]!	; 0xe8

00010f5c <memcmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #224]!	; 0xe0

00010f68 <fputc_unlocked@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #216]!	; 0xd8

00010f74 <dcgettext@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #208]!	; 0xd0

00010f80 <realloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #200]!	; 0xc8

00010f8c <textdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #192]!	; 0xc0

00010f98 <chdir@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #184]!	; 0xb8

00010fa4 <iswprint@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #176]!	; 0xb0

00010fb0 <setgroups@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #168]!	; 0xa8

00010fbc <fwrite@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #160]!	; 0xa0

00010fc8 <lseek64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #152]!	; 0x98

00010fd4 <__ctype_get_mb_cur_max@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #144]!	; 0x90

00010fe0 <chroot@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #136]!	; 0x88

00010fec <__fpending@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #128]!	; 0x80

00010ff8 <mbrtowc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #120]!	; 0x78

00011004 <error@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #112]!	; 0x70

00011010 <getenv@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #104]!	; 0x68

0001101c <setgid@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #96]!	; 0x60

00011028 <malloc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #88]!	; 0x58

00011034 <__libc_start_main@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #80]!	; 0x50

00011040 <__freading@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #72]!	; 0x48

0001104c <__gmon_start__@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #64]!	; 0x40

00011058 <getopt_long@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #56]!	; 0x38

00011064 <__ctype_b_loc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #48]!	; 0x30

00011070 <exit@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #40]!	; 0x28

0001107c <strtoul@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #32]!

00011088 <strlen@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #24]!

00011094 <strchr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #16]!

000110a0 <__errno_location@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #8]!

000110ac <__cxa_atexit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #0]!

000110b8 <getgrouplist@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #4088]!	; 0xff8

000110c4 <memset@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #4080]!	; 0xff0

000110d0 <__printf_chk@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110dc <fileno@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110e8 <__fprintf_chk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f4 <fclose@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #4048]!	; 0xfd0

00011100 <fseeko64@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #4040]!	; 0xfc8

0001110c <strtok@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #4032]!	; 0xfc0

00011118 <setlocale@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #4024]!	; 0xfb8

00011124 <endpwent@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011130 <strrchr@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #4008]!	; 0xfa8

0001113c <nl_langinfo@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #4000]!	; 0xfa0

00011148 <setuid@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3992]!	; 0xf98

00011154 <getgroups@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3984]!	; 0xf90

00011160 <canonicalize_file_name@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3976]!	; 0xf88

0001116c <bindtextdomain@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3968]!	; 0xf80

00011178 <strncmp@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3960]!	; 0xf78

00011184 <abort@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3952]!	; 0xf70

00011190 <getgrgid@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3944]!	; 0xf68

0001119c <getgrnam@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3936]!	; 0xf60

000111a8 <__assert_fail@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3928]!	; 0xf58

Disassembly of section .text:

000111b4 <.text>:
   111b4:	mov	fp, #0
   111b8:	mov	lr, #0
   111bc:	pop	{r1}		; (ldr r1, [sp], #4)
   111c0:	mov	r2, sp
   111c4:	push	{r2}		; (str r2, [sp, #-4]!)
   111c8:	push	{r0}		; (str r0, [sp, #-4]!)
   111cc:	ldr	ip, [pc, #16]	; 111e4 <__assert_fail@plt+0x3c>
   111d0:	push	{ip}		; (str ip, [sp, #-4]!)
   111d4:	ldr	r0, [pc, #12]	; 111e8 <__assert_fail@plt+0x40>
   111d8:	ldr	r3, [pc, #12]	; 111ec <__assert_fail@plt+0x44>
   111dc:	bl	11034 <__libc_start_main@plt>
   111e0:	bl	11184 <abort@plt>
   111e4:	andeq	r6, r1, r8, asr #19
   111e8:	andeq	r1, r1, r0, ror #17
   111ec:	andeq	r6, r1, r8, ror #18
   111f0:	ldr	r3, [pc, #20]	; 1120c <__assert_fail@plt+0x64>
   111f4:	ldr	r2, [pc, #20]	; 11210 <__assert_fail@plt+0x68>
   111f8:	add	r3, pc, r3
   111fc:	ldr	r2, [r3, r2]
   11200:	cmp	r2, #0
   11204:	bxeq	lr
   11208:	b	1104c <__gmon_start__@plt>
   1120c:	andeq	r6, r1, r0, lsl #28
   11210:	andeq	r0, r0, ip, lsl #2
   11214:	ldr	r0, [pc, #24]	; 11234 <__assert_fail@plt+0x8c>
   11218:	ldr	r3, [pc, #24]	; 11238 <__assert_fail@plt+0x90>
   1121c:	cmp	r3, r0
   11220:	bxeq	lr
   11224:	ldr	r3, [pc, #16]	; 1123c <__assert_fail@plt+0x94>
   11228:	cmp	r3, #0
   1122c:	bxeq	lr
   11230:	bx	r3
   11234:	andeq	r8, r2, r0, ror #2
   11238:	andeq	r8, r2, r0, ror #2
   1123c:	andeq	r0, r0, r0
   11240:	ldr	r0, [pc, #36]	; 1126c <__assert_fail@plt+0xc4>
   11244:	ldr	r1, [pc, #36]	; 11270 <__assert_fail@plt+0xc8>
   11248:	sub	r1, r1, r0
   1124c:	asr	r1, r1, #2
   11250:	add	r1, r1, r1, lsr #31
   11254:	asrs	r1, r1, #1
   11258:	bxeq	lr
   1125c:	ldr	r3, [pc, #16]	; 11274 <__assert_fail@plt+0xcc>
   11260:	cmp	r3, #0
   11264:	bxeq	lr
   11268:	bx	r3
   1126c:	andeq	r8, r2, r0, ror #2
   11270:	andeq	r8, r2, r0, ror #2
   11274:	andeq	r0, r0, r0
   11278:	push	{r4, lr}
   1127c:	ldr	r4, [pc, #24]	; 1129c <__assert_fail@plt+0xf4>
   11280:	ldrb	r3, [r4]
   11284:	cmp	r3, #0
   11288:	popne	{r4, pc}
   1128c:	bl	11214 <__assert_fail@plt+0x6c>
   11290:	mov	r3, #1
   11294:	strb	r3, [r4]
   11298:	pop	{r4, pc}
   1129c:	andeq	r8, r2, ip, ror r1
   112a0:	b	11240 <__assert_fail@plt+0x98>
   112a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112a8:	strd	r6, [sp, #8]
   112ac:	strd	r8, [sp, #16]
   112b0:	strd	sl, [sp, #24]
   112b4:	str	lr, [sp, #32]
   112b8:	sub	sp, sp, #44	; 0x2c
   112bc:	str	r0, [sp, #16]
   112c0:	mov	r9, r1
   112c4:	str	r2, [sp, #12]
   112c8:	mov	fp, r3
   112cc:	mov	r3, #0
   112d0:	str	r3, [sp, #36]	; 0x24
   112d4:	bl	152d4 <__assert_fail@plt+0x412c>
   112d8:	str	r0, [sp, #8]
   112dc:	movw	r1, #27272	; 0x6a88
   112e0:	movt	r1, #1
   112e4:	bl	1110c <strtok@plt>
   112e8:	subs	r4, r0, #0
   112ec:	beq	1145c <__assert_fail@plt+0x2b4>
   112f0:	mov	sl, #0
   112f4:	mov	r5, sl
   112f8:	mov	r7, sl
   112fc:	movw	r6, #27880	; 0x6ce8
   11300:	movt	r6, #1
   11304:	movw	r8, #27276	; 0x6a8c
   11308:	movt	r8, #1
   1130c:	b	11360 <__assert_fail@plt+0x1b8>
   11310:	mov	r0, r4
   11314:	bl	1119c <getgrnam@plt>
   11318:	cmp	r0, #0
   1131c:	beq	114a8 <__assert_fail@plt+0x300>
   11320:	ldr	r3, [r0, #8]
   11324:	str	r3, [sp, #24]
   11328:	mov	r3, #0
   1132c:	str	r3, [sp, #28]
   11330:	ldr	r3, [sp, #36]	; 0x24
   11334:	cmp	r3, r5
   11338:	beq	11420 <__assert_fail@plt+0x278>
   1133c:	ldr	r3, [sp, #24]
   11340:	str	r3, [r7, r5, lsl #2]
   11344:	add	r5, r5, #1
   11348:	movw	r1, #27272	; 0x6a88
   1134c:	movt	r1, #1
   11350:	mov	r0, #0
   11354:	bl	1110c <strtok@plt>
   11358:	subs	r4, r0, #0
   1135c:	beq	11438 <__assert_fail@plt+0x290>
   11360:	str	r6, [sp]
   11364:	add	r3, sp, #24
   11368:	mov	r2, #10
   1136c:	mov	r1, #0
   11370:	mov	r0, r4
   11374:	bl	15a0c <__assert_fail@plt+0x4864>
   11378:	cmp	r0, #0
   1137c:	bne	11310 <__assert_fail@plt+0x168>
   11380:	ldrd	r2, [sp, #24]
   11384:	mvn	r0, #0
   11388:	mov	r1, #0
   1138c:	cmp	r3, r1
   11390:	cmpeq	r2, r0
   11394:	bhi	11310 <__assert_fail@plt+0x168>
   11398:	bl	11064 <__ctype_b_loc@plt>
   1139c:	ldr	r1, [r0]
   113a0:	mov	r0, r4
   113a4:	ldrb	r3, [r4], #1
   113a8:	lsl	r2, r3, #1
   113ac:	ldrh	r2, [r1, r2]
   113b0:	tst	r2, #8192	; 0x2000
   113b4:	bne	113a0 <__assert_fail@plt+0x1f8>
   113b8:	cmp	r3, #43	; 0x2b
   113bc:	beq	11330 <__assert_fail@plt+0x188>
   113c0:	bl	1119c <getgrnam@plt>
   113c4:	cmp	r0, #0
   113c8:	beq	11330 <__assert_fail@plt+0x188>
   113cc:	ldr	r3, [r0, #8]
   113d0:	str	r3, [sp, #24]
   113d4:	mov	r3, #0
   113d8:	str	r3, [sp, #28]
   113dc:	b	11330 <__assert_fail@plt+0x188>
   113e0:	bl	110a0 <__errno_location@plt>
   113e4:	ldr	sl, [r0]
   113e8:	mov	r2, #5
   113ec:	mov	r1, r8
   113f0:	mov	r0, #0
   113f4:	bl	10f74 <dcgettext@plt>
   113f8:	str	r0, [sp, #20]
   113fc:	mov	r0, r4
   11400:	bl	144ac <__assert_fail@plt+0x3304>
   11404:	mov	r3, r0
   11408:	ldr	r2, [sp, #20]
   1140c:	mov	r1, sl
   11410:	mov	r0, #0
   11414:	bl	11004 <error@plt>
   11418:	mvn	sl, #0
   1141c:	b	11348 <__assert_fail@plt+0x1a0>
   11420:	mov	r2, #4
   11424:	add	r1, sp, #36	; 0x24
   11428:	mov	r0, r7
   1142c:	bl	15030 <__assert_fail@plt+0x3e88>
   11430:	mov	r7, r0
   11434:	b	1133c <__assert_fail@plt+0x194>
   11438:	orrs	r3, r5, sl
   1143c:	beq	11458 <__assert_fail@plt+0x2b0>
   11440:	str	r7, [r9]
   11444:	cmp	sl, #0
   11448:	bne	114b8 <__assert_fail@plt+0x310>
   1144c:	ldr	r3, [sp, #12]
   11450:	str	r5, [r3]
   11454:	b	114b8 <__assert_fail@plt+0x310>
   11458:	mov	r4, r7
   1145c:	cmp	fp, #0
   11460:	bne	11470 <__assert_fail@plt+0x2c8>
   11464:	str	r4, [r9]
   11468:	mvn	sl, #0
   1146c:	b	114b8 <__assert_fail@plt+0x310>
   11470:	mov	r2, #5
   11474:	movw	r1, #27296	; 0x6aa0
   11478:	movt	r1, #1
   1147c:	mov	r0, #0
   11480:	bl	10f74 <dcgettext@plt>
   11484:	mov	r5, r0
   11488:	ldr	r0, [sp, #16]
   1148c:	bl	144ac <__assert_fail@plt+0x3304>
   11490:	mov	r3, r0
   11494:	mov	r2, r5
   11498:	mov	r1, #0
   1149c:	mov	r0, r1
   114a0:	bl	11004 <error@plt>
   114a4:	b	11464 <__assert_fail@plt+0x2bc>
   114a8:	cmp	fp, #0
   114ac:	bne	113e0 <__assert_fail@plt+0x238>
   114b0:	str	r7, [r9]
   114b4:	mvn	sl, #0
   114b8:	ldr	r0, [sp, #8]
   114bc:	bl	12150 <__assert_fail@plt+0xfa8>
   114c0:	mov	r0, sl
   114c4:	add	sp, sp, #44	; 0x2c
   114c8:	ldrd	r4, [sp]
   114cc:	ldrd	r6, [sp, #8]
   114d0:	ldrd	r8, [sp, #16]
   114d4:	ldrd	sl, [sp, #24]
   114d8:	add	sp, sp, #32
   114dc:	pop	{pc}		; (ldr pc, [sp], #4)
   114e0:	push	{lr}		; (str lr, [sp, #-4]!)
   114e4:	sub	sp, sp, #60	; 0x3c
   114e8:	subs	r4, r0, #0
   114ec:	beq	11534 <__assert_fail@plt+0x38c>
   114f0:	movw	r3, #33136	; 0x8170
   114f4:	movt	r3, #2
   114f8:	ldr	r5, [r3]
   114fc:	mov	r2, #5
   11500:	movw	r1, #27328	; 0x6ac0
   11504:	movt	r1, #1
   11508:	mov	r0, #0
   1150c:	bl	10f74 <dcgettext@plt>
   11510:	movw	r3, #33160	; 0x8188
   11514:	movt	r3, #2
   11518:	ldr	r3, [r3]
   1151c:	mov	r2, r0
   11520:	mov	r1, #1
   11524:	mov	r0, r5
   11528:	bl	110e8 <__fprintf_chk@plt>
   1152c:	mov	r0, r4
   11530:	bl	11070 <exit@plt>
   11534:	mov	r2, #5
   11538:	movw	r1, #27368	; 0x6ae8
   1153c:	movt	r1, #1
   11540:	mov	r0, #0
   11544:	bl	10f74 <dcgettext@plt>
   11548:	movw	r3, #33160	; 0x8188
   1154c:	movt	r3, #2
   11550:	ldr	r2, [r3]
   11554:	mov	r3, r2
   11558:	mov	r1, r0
   1155c:	mov	r0, #1
   11560:	bl	110d0 <__printf_chk@plt>
   11564:	mov	r2, #5
   11568:	movw	r1, #27432	; 0x6b28
   1156c:	movt	r1, #1
   11570:	mov	r0, #0
   11574:	bl	10f74 <dcgettext@plt>
   11578:	movw	r5, #33140	; 0x8174
   1157c:	movt	r5, #2
   11580:	ldr	r1, [r5]
   11584:	bl	10ecc <fputs_unlocked@plt>
   11588:	mov	r2, #5
   1158c:	movw	r1, #27484	; 0x6b5c
   11590:	movt	r1, #1
   11594:	mov	r0, #0
   11598:	bl	10f74 <dcgettext@plt>
   1159c:	ldr	r1, [r5]
   115a0:	bl	10ecc <fputs_unlocked@plt>
   115a4:	mov	r2, #5
   115a8:	movw	r1, #27560	; 0x6ba8
   115ac:	movt	r1, #1
   115b0:	mov	r0, #0
   115b4:	bl	10f74 <dcgettext@plt>
   115b8:	ldr	r1, [r5]
   115bc:	bl	10ecc <fputs_unlocked@plt>
   115c0:	mov	r2, #5
   115c4:	movw	r1, #27636	; 0x6bf4
   115c8:	movt	r1, #1
   115cc:	mov	r0, #0
   115d0:	bl	10f74 <dcgettext@plt>
   115d4:	mov	r6, r0
   115d8:	movw	r1, #27704	; 0x6c38
   115dc:	movt	r1, #1
   115e0:	mov	r0, #4
   115e4:	bl	141bc <__assert_fail@plt+0x3014>
   115e8:	mov	r2, r0
   115ec:	mov	r1, r6
   115f0:	mov	r0, #1
   115f4:	bl	110d0 <__printf_chk@plt>
   115f8:	mov	r2, #5
   115fc:	movw	r1, #27708	; 0x6c3c
   11600:	movt	r1, #1
   11604:	mov	r0, #0
   11608:	bl	10f74 <dcgettext@plt>
   1160c:	ldr	r1, [r5]
   11610:	bl	10ecc <fputs_unlocked@plt>
   11614:	mov	r2, #5
   11618:	movw	r1, #27756	; 0x6c6c
   1161c:	movt	r1, #1
   11620:	mov	r0, #0
   11624:	bl	10f74 <dcgettext@plt>
   11628:	ldr	r1, [r5]
   1162c:	bl	10ecc <fputs_unlocked@plt>
   11630:	mov	r2, #5
   11634:	movw	r1, #27812	; 0x6ca4
   11638:	movt	r1, #1
   1163c:	mov	r0, #0
   11640:	bl	10f74 <dcgettext@plt>
   11644:	ldr	r1, [r5]
   11648:	bl	10ecc <fputs_unlocked@plt>
   1164c:	movw	r0, #27120	; 0x69f0
   11650:	movt	r0, #1
   11654:	ldr	r1, [r0]
   11658:	ldr	r3, [r0, #4]
   1165c:	str	r1, [sp]
   11660:	str	r3, [sp, #4]
   11664:	ldrd	r2, [r0, #8]
   11668:	strd	r2, [sp, #8]
   1166c:	ldrd	r2, [r0, #16]
   11670:	strd	r2, [sp, #16]
   11674:	ldrd	r2, [r0, #24]
   11678:	strd	r2, [sp, #24]
   1167c:	ldrd	r2, [r0, #32]
   11680:	strd	r2, [sp, #32]
   11684:	ldrd	r2, [r0, #40]	; 0x28
   11688:	strd	r2, [sp, #40]	; 0x28
   1168c:	ldrd	r2, [r0, #48]	; 0x30
   11690:	strd	r2, [sp, #48]	; 0x30
   11694:	cmp	r1, #0
   11698:	moveq	r5, sp
   1169c:	beq	116c8 <__assert_fail@plt+0x520>
   116a0:	mov	r5, sp
   116a4:	movw	r6, #27320	; 0x6ab8
   116a8:	movt	r6, #1
   116ac:	mov	r0, r6
   116b0:	bl	10ef0 <strcmp@plt>
   116b4:	cmp	r0, #0
   116b8:	beq	116c8 <__assert_fail@plt+0x520>
   116bc:	ldr	r1, [r5, #8]!
   116c0:	cmp	r1, #0
   116c4:	bne	116ac <__assert_fail@plt+0x504>
   116c8:	ldr	r5, [r5, #4]
   116cc:	cmp	r5, #0
   116d0:	beq	1182c <__assert_fail@plt+0x684>
   116d4:	mov	r2, #5
   116d8:	movw	r1, #27884	; 0x6cec
   116dc:	movt	r1, #1
   116e0:	mov	r0, #0
   116e4:	bl	10f74 <dcgettext@plt>
   116e8:	movw	r3, #27908	; 0x6d04
   116ec:	movt	r3, #1
   116f0:	movw	r2, #27948	; 0x6d2c
   116f4:	movt	r2, #1
   116f8:	mov	r1, r0
   116fc:	mov	r0, #1
   11700:	bl	110d0 <__printf_chk@plt>
   11704:	mov	r1, #0
   11708:	mov	r0, #5
   1170c:	bl	11118 <setlocale@plt>
   11710:	cmp	r0, #0
   11714:	beq	11730 <__assert_fail@plt+0x588>
   11718:	mov	r2, #3
   1171c:	movw	r1, #27964	; 0x6d3c
   11720:	movt	r1, #1
   11724:	bl	11178 <strncmp@plt>
   11728:	cmp	r0, #0
   1172c:	bne	117ac <__assert_fail@plt+0x604>
   11730:	mov	r2, #5
   11734:	movw	r1, #28040	; 0x6d88
   11738:	movt	r1, #1
   1173c:	mov	r0, #0
   11740:	bl	10f74 <dcgettext@plt>
   11744:	movw	r6, #27320	; 0x6ab8
   11748:	movt	r6, #1
   1174c:	mov	r3, r6
   11750:	movw	r2, #27908	; 0x6d04
   11754:	movt	r2, #1
   11758:	mov	r1, r0
   1175c:	mov	r0, #1
   11760:	bl	110d0 <__printf_chk@plt>
   11764:	mov	r2, #5
   11768:	movw	r1, #28068	; 0x6da4
   1176c:	movt	r1, #1
   11770:	mov	r0, #0
   11774:	bl	10f74 <dcgettext@plt>
   11778:	mov	r1, r0
   1177c:	movw	r2, #28520	; 0x6f68
   11780:	movt	r2, #1
   11784:	movw	r3, #27880	; 0x6ce8
   11788:	movt	r3, #1
   1178c:	cmp	r5, r6
   11790:	moveq	r3, r2
   11794:	mov	r2, r5
   11798:	mov	r0, #1
   1179c:	bl	110d0 <__printf_chk@plt>
   117a0:	b	1152c <__assert_fail@plt+0x384>
   117a4:	movw	r5, #27320	; 0x6ab8
   117a8:	movt	r5, #1
   117ac:	mov	r2, #5
   117b0:	movw	r1, #27968	; 0x6d40
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	bl	10f74 <dcgettext@plt>
   117c0:	movw	r3, #33140	; 0x8174
   117c4:	movt	r3, #2
   117c8:	ldr	r1, [r3]
   117cc:	bl	10ecc <fputs_unlocked@plt>
   117d0:	b	11730 <__assert_fail@plt+0x588>
   117d4:	mov	r2, #5
   117d8:	movw	r1, #28040	; 0x6d88
   117dc:	movt	r1, #1
   117e0:	mov	r0, #0
   117e4:	bl	10f74 <dcgettext@plt>
   117e8:	movw	r5, #27320	; 0x6ab8
   117ec:	movt	r5, #1
   117f0:	mov	r3, r5
   117f4:	movw	r2, #27908	; 0x6d04
   117f8:	movt	r2, #1
   117fc:	mov	r1, r0
   11800:	mov	r0, #1
   11804:	bl	110d0 <__printf_chk@plt>
   11808:	mov	r2, #5
   1180c:	movw	r1, #28068	; 0x6da4
   11810:	movt	r1, #1
   11814:	mov	r0, #0
   11818:	bl	10f74 <dcgettext@plt>
   1181c:	mov	r1, r0
   11820:	movw	r3, #28520	; 0x6f68
   11824:	movt	r3, #1
   11828:	b	11794 <__assert_fail@plt+0x5ec>
   1182c:	mov	r2, #5
   11830:	movw	r1, #27884	; 0x6cec
   11834:	movt	r1, #1
   11838:	mov	r0, #0
   1183c:	bl	10f74 <dcgettext@plt>
   11840:	movw	r3, #27908	; 0x6d04
   11844:	movt	r3, #1
   11848:	movw	r2, #27948	; 0x6d2c
   1184c:	movt	r2, #1
   11850:	mov	r1, r0
   11854:	mov	r0, #1
   11858:	bl	110d0 <__printf_chk@plt>
   1185c:	mov	r1, #0
   11860:	mov	r0, #5
   11864:	bl	11118 <setlocale@plt>
   11868:	cmp	r0, #0
   1186c:	beq	117d4 <__assert_fail@plt+0x62c>
   11870:	mov	r2, #3
   11874:	movw	r1, #27964	; 0x6d3c
   11878:	movt	r1, #1
   1187c:	bl	11178 <strncmp@plt>
   11880:	cmp	r0, #0
   11884:	bne	117a4 <__assert_fail@plt+0x5fc>
   11888:	mov	r2, #5
   1188c:	movw	r1, #28040	; 0x6d88
   11890:	movt	r1, #1
   11894:	mov	r0, #0
   11898:	bl	10f74 <dcgettext@plt>
   1189c:	movw	r5, #27320	; 0x6ab8
   118a0:	movt	r5, #1
   118a4:	mov	r3, r5
   118a8:	movw	r2, #27908	; 0x6d04
   118ac:	movt	r2, #1
   118b0:	mov	r1, r0
   118b4:	mov	r0, #1
   118b8:	bl	110d0 <__printf_chk@plt>
   118bc:	mov	r2, #5
   118c0:	movw	r1, #28068	; 0x6da4
   118c4:	movt	r1, #1
   118c8:	mov	r0, #0
   118cc:	bl	10f74 <dcgettext@plt>
   118d0:	mov	r1, r0
   118d4:	movw	r3, #28520	; 0x6f68
   118d8:	movt	r3, #1
   118dc:	b	11794 <__assert_fail@plt+0x5ec>
   118e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   118e4:	strd	r6, [sp, #8]
   118e8:	strd	r8, [sp, #16]
   118ec:	strd	sl, [sp, #24]
   118f0:	str	lr, [sp, #32]
   118f4:	sub	sp, sp, #36	; 0x24
   118f8:	mov	r7, r0
   118fc:	mov	r6, r1
   11900:	mvn	r3, #0
   11904:	str	r3, [sp, #28]
   11908:	str	r3, [sp, #24]
   1190c:	mov	r4, #0
   11910:	str	r4, [sp, #20]
   11914:	str	r4, [sp, #16]
   11918:	ldr	r0, [r1]
   1191c:	bl	121b0 <__assert_fail@plt+0x1008>
   11920:	movw	r1, #27880	; 0x6ce8
   11924:	movt	r1, #1
   11928:	mov	r0, #6
   1192c:	bl	11118 <setlocale@plt>
   11930:	movw	r5, #27952	; 0x6d30
   11934:	movt	r5, #1
   11938:	movw	r1, #28128	; 0x6de0
   1193c:	movt	r1, #1
   11940:	mov	r0, r5
   11944:	bl	1116c <bindtextdomain@plt>
   11948:	mov	r0, r5
   1194c:	bl	10f8c <textdomain@plt>
   11950:	movw	r3, #33052	; 0x811c
   11954:	movt	r3, #2
   11958:	mov	r2, #125	; 0x7d
   1195c:	str	r2, [r3]
   11960:	movw	r0, #8256	; 0x2040
   11964:	movt	r0, #1
   11968:	bl	169cc <__assert_fail@plt+0x5824>
   1196c:	mov	r9, r4
   11970:	mov	fp, r4
   11974:	ldr	sl, [pc, #1696]	; 1201c <__assert_fail@plt+0xe74>
   11978:	movw	r5, #28168	; 0x6e08
   1197c:	movt	r5, #1
   11980:	movw	r8, #33144	; 0x8178
   11984:	movt	r8, #2
   11988:	b	119fc <__assert_fail@plt+0x854>
   1198c:	cmn	r0, #3
   11990:	bne	119dc <__assert_fail@plt+0x834>
   11994:	movw	r3, #33048	; 0x8118
   11998:	movt	r3, #2
   1199c:	movw	r0, #33140	; 0x8174
   119a0:	movt	r0, #2
   119a4:	mov	r4, #0
   119a8:	str	r4, [sp, #4]
   119ac:	movw	r2, #28152	; 0x6df8
   119b0:	movt	r2, #1
   119b4:	str	r2, [sp]
   119b8:	ldr	r3, [r3]
   119bc:	movw	r2, #27948	; 0x6d2c
   119c0:	movt	r2, #1
   119c4:	movw	r1, #27320	; 0x6ab8
   119c8:	movt	r1, #1
   119cc:	ldr	r0, [r0]
   119d0:	bl	14d90 <__assert_fail@plt+0x3be8>
   119d4:	mov	r0, r4
   119d8:	bl	11070 <exit@plt>
   119dc:	cmn	r0, #2
   119e0:	bne	11a6c <__assert_fail@plt+0x8c4>
   119e4:	mov	r0, #0
   119e8:	bl	114e0 <__assert_fail@plt+0x338>
   119ec:	movw	r3, #258	; 0x102
   119f0:	cmp	r0, r3
   119f4:	bne	11a6c <__assert_fail@plt+0x8c4>
   119f8:	mov	r9, #1
   119fc:	mov	r3, #0
   11a00:	str	r3, [sp]
   11a04:	mov	r3, sl
   11a08:	mov	r2, r5
   11a0c:	mov	r1, r6
   11a10:	mov	r0, r7
   11a14:	bl	11058 <getopt_long@plt>
   11a18:	cmn	r0, #1
   11a1c:	beq	11a74 <__assert_fail@plt+0x8cc>
   11a20:	cmp	r0, #256	; 0x100
   11a24:	beq	11a64 <__assert_fail@plt+0x8bc>
   11a28:	ble	1198c <__assert_fail@plt+0x7e4>
   11a2c:	movw	r3, #257	; 0x101
   11a30:	cmp	r0, r3
   11a34:	bne	119ec <__assert_fail@plt+0x844>
   11a38:	ldr	r4, [r8]
   11a3c:	mov	r0, r4
   11a40:	bl	11088 <strlen@plt>
   11a44:	cmp	r0, #0
   11a48:	beq	119fc <__assert_fail@plt+0x854>
   11a4c:	sub	r0, r0, #1
   11a50:	ldrb	r3, [r4, r0]
   11a54:	cmp	r3, #58	; 0x3a
   11a58:	moveq	r3, #0
   11a5c:	strbeq	r3, [r4, r0]
   11a60:	b	119fc <__assert_fail@plt+0x854>
   11a64:	ldr	fp, [r8]
   11a68:	b	119fc <__assert_fail@plt+0x854>
   11a6c:	mov	r0, #125	; 0x7d
   11a70:	bl	114e0 <__assert_fail@plt+0x338>
   11a74:	movw	r3, #33128	; 0x8168
   11a78:	movt	r3, #2
   11a7c:	ldr	r3, [r3]
   11a80:	cmp	r3, r7
   11a84:	bge	11b64 <__assert_fail@plt+0x9bc>
   11a88:	ldr	r8, [r6, r3, lsl #2]
   11a8c:	mov	r0, r8
   11a90:	bl	11160 <canonicalize_file_name@plt>
   11a94:	subs	r5, r0, #0
   11a98:	beq	11ab4 <__assert_fail@plt+0x90c>
   11a9c:	mov	r1, r5
   11aa0:	movw	r0, #27704	; 0x6c38
   11aa4:	movt	r0, #1
   11aa8:	bl	10ef0 <strcmp@plt>
   11aac:	cmp	r0, #0
   11ab0:	beq	11f6c <__assert_fail@plt+0xdc4>
   11ab4:	mov	r0, r5
   11ab8:	bl	12150 <__assert_fail@plt+0xfa8>
   11abc:	cmp	r9, #0
   11ac0:	bne	11b90 <__assert_fail@plt+0x9e8>
   11ac4:	cmp	r4, #0
   11ac8:	beq	11ae4 <__assert_fail@plt+0x93c>
   11acc:	mov	r3, #0
   11ad0:	str	r3, [sp]
   11ad4:	add	r2, sp, #24
   11ad8:	add	r1, sp, #28
   11adc:	mov	r0, r4
   11ae0:	bl	147cc <__assert_fail@plt+0x3624>
   11ae4:	ldr	r0, [sp, #28]
   11ae8:	cmn	r0, #1
   11aec:	beq	11bf8 <__assert_fail@plt+0xa50>
   11af0:	cmp	fp, #0
   11af4:	beq	1200c <__assert_fail@plt+0xe64>
   11af8:	ldr	r3, [sp, #24]
   11afc:	cmn	r3, #1
   11b00:	movne	r5, #0
   11b04:	beq	11bd4 <__assert_fail@plt+0xa2c>
   11b08:	ldrb	r3, [fp]
   11b0c:	cmp	r3, #0
   11b10:	bne	11c2c <__assert_fail@plt+0xa84>
   11b14:	mov	r0, r8
   11b18:	bl	10fe0 <chroot@plt>
   11b1c:	cmp	r0, #0
   11b20:	bne	11c44 <__assert_fail@plt+0xa9c>
   11b24:	movw	r0, #27704	; 0x6c38
   11b28:	movt	r0, #1
   11b2c:	bl	10f98 <chdir@plt>
   11b30:	cmp	r0, #0
   11b34:	beq	11f90 <__assert_fail@plt+0xde8>
   11b38:	bl	110a0 <__errno_location@plt>
   11b3c:	ldr	r4, [r0]
   11b40:	mov	r2, #5
   11b44:	movw	r1, #28280	; 0x6e78
   11b48:	movt	r1, #1
   11b4c:	mov	r0, #0
   11b50:	bl	10f74 <dcgettext@plt>
   11b54:	mov	r2, r0
   11b58:	mov	r1, r4
   11b5c:	mov	r0, #125	; 0x7d
   11b60:	bl	11004 <error@plt>
   11b64:	mov	r2, #5
   11b68:	movw	r1, #28172	; 0x6e0c
   11b6c:	movt	r1, #1
   11b70:	mov	r0, #0
   11b74:	bl	10f74 <dcgettext@plt>
   11b78:	mov	r2, r0
   11b7c:	mov	r1, #0
   11b80:	mov	r0, r1
   11b84:	bl	11004 <error@plt>
   11b88:	mov	r0, #125	; 0x7d
   11b8c:	bl	114e0 <__assert_fail@plt+0x338>
   11b90:	mov	r2, #5
   11b94:	movw	r1, #28188	; 0x6e1c
   11b98:	movt	r1, #1
   11b9c:	mov	r0, #0
   11ba0:	bl	10f74 <dcgettext@plt>
   11ba4:	mov	r4, r0
   11ba8:	movw	r1, #27704	; 0x6c38
   11bac:	movt	r1, #1
   11bb0:	mov	r0, #4
   11bb4:	bl	141bc <__assert_fail@plt+0x3014>
   11bb8:	mov	r3, r0
   11bbc:	mov	r2, r4
   11bc0:	mov	r1, #0
   11bc4:	mov	r0, r1
   11bc8:	bl	11004 <error@plt>
   11bcc:	mov	r0, #125	; 0x7d
   11bd0:	bl	114e0 <__assert_fail@plt+0x338>
   11bd4:	bl	10efc <getpwuid@plt>
   11bd8:	subs	r5, r0, #0
   11bdc:	beq	11bfc <__assert_fail@plt+0xa54>
   11be0:	ldr	r3, [sp, #24]
   11be4:	cmn	r3, #1
   11be8:	ldreq	r3, [r5, #12]
   11bec:	streq	r3, [sp, #24]
   11bf0:	ldr	r5, [r5]
   11bf4:	b	11bfc <__assert_fail@plt+0xa54>
   11bf8:	mov	r5, #0
   11bfc:	cmp	fp, #0
   11c00:	bne	11b08 <__assert_fail@plt+0x960>
   11c04:	ldr	r1, [sp, #24]
   11c08:	cmp	r5, #0
   11c0c:	cmnne	r1, #1
   11c10:	beq	11b14 <__assert_fail@plt+0x96c>
   11c14:	add	r2, sp, #20
   11c18:	mov	r0, r5
   11c1c:	bl	15340 <__assert_fail@plt+0x4198>
   11c20:	cmp	r0, #0
   11c24:	strgt	r0, [sp, #16]
   11c28:	b	11b14 <__assert_fail@plt+0x96c>
   11c2c:	mov	r3, #0
   11c30:	add	r2, sp, #16
   11c34:	add	r1, sp, #20
   11c38:	mov	r0, fp
   11c3c:	bl	112a4 <__assert_fail@plt+0xfc>
   11c40:	b	11b14 <__assert_fail@plt+0x96c>
   11c44:	bl	110a0 <__errno_location@plt>
   11c48:	ldr	r4, [r0]
   11c4c:	mov	r2, #5
   11c50:	movw	r1, #28244	; 0x6e54
   11c54:	movt	r1, #1
   11c58:	mov	r0, #0
   11c5c:	bl	10f74 <dcgettext@plt>
   11c60:	mov	r5, r0
   11c64:	mov	r1, r8
   11c68:	mov	r0, #4
   11c6c:	bl	141bc <__assert_fail@plt+0x3014>
   11c70:	mov	r3, r0
   11c74:	mov	r2, r5
   11c78:	mov	r1, r4
   11c7c:	mov	r0, #125	; 0x7d
   11c80:	bl	11004 <error@plt>
   11c84:	mov	r5, #0
   11c88:	b	11b24 <__assert_fail@plt+0x97c>
   11c8c:	movw	r0, #28312	; 0x6e98
   11c90:	movt	r0, #1
   11c94:	bl	11010 <getenv@plt>
   11c98:	movw	r3, #28120	; 0x6dd8
   11c9c:	movt	r3, #1
   11ca0:	cmp	r0, #0
   11ca4:	moveq	r0, r3
   11ca8:	str	r0, [r6]
   11cac:	movw	r3, #28320	; 0x6ea0
   11cb0:	movt	r3, #1
   11cb4:	str	r3, [r6, #4]
   11cb8:	mov	r3, #0
   11cbc:	str	r3, [r6, #8]
   11cc0:	b	11fb0 <__assert_fail@plt+0xe08>
   11cc4:	ldr	r0, [sp, #28]
   11cc8:	cmn	r0, #1
   11ccc:	beq	11dd8 <__assert_fail@plt+0xc30>
   11cd0:	cmp	fp, #0
   11cd4:	beq	11db8 <__assert_fail@plt+0xc10>
   11cd8:	ldr	r3, [sp, #24]
   11cdc:	cmn	r3, #1
   11ce0:	ldrne	r4, [sp, #20]
   11ce4:	movne	r3, #0
   11ce8:	strne	r3, [sp, #12]
   11cec:	beq	11db8 <__assert_fail@plt+0xc10>
   11cf0:	ldrb	r3, [fp]
   11cf4:	cmp	r3, #0
   11cf8:	bne	11e48 <__assert_fail@plt+0xca0>
   11cfc:	mov	r1, r4
   11d00:	ldr	r0, [sp, #16]
   11d04:	bl	10fb0 <setgroups@plt>
   11d08:	cmp	r0, #0
   11d0c:	bne	11edc <__assert_fail@plt+0xd34>
   11d10:	ldr	r0, [sp, #12]
   11d14:	bl	12150 <__assert_fail@plt+0xfa8>
   11d18:	ldr	r0, [sp, #20]
   11d1c:	bl	12150 <__assert_fail@plt+0xfa8>
   11d20:	ldr	r0, [sp, #24]
   11d24:	cmn	r0, #1
   11d28:	bne	11f08 <__assert_fail@plt+0xd60>
   11d2c:	ldr	r0, [sp, #28]
   11d30:	cmn	r0, #1
   11d34:	beq	11d44 <__assert_fail@plt+0xb9c>
   11d38:	bl	11148 <setuid@plt>
   11d3c:	cmp	r0, #0
   11d40:	bne	11f40 <__assert_fail@plt+0xd98>
   11d44:	mov	r1, r6
   11d48:	ldr	r0, [r6]
   11d4c:	bl	10f38 <execvp@plt>
   11d50:	bl	110a0 <__errno_location@plt>
   11d54:	ldr	r4, [r0]
   11d58:	cmp	r4, #2
   11d5c:	moveq	r5, #127	; 0x7f
   11d60:	movne	r5, #126	; 0x7e
   11d64:	mov	r2, #5
   11d68:	movw	r1, #28484	; 0x6f44
   11d6c:	movt	r1, #1
   11d70:	mov	r0, #0
   11d74:	bl	10f74 <dcgettext@plt>
   11d78:	mov	r7, r0
   11d7c:	ldr	r0, [r6]
   11d80:	bl	144ac <__assert_fail@plt+0x3304>
   11d84:	mov	r3, r0
   11d88:	mov	r2, r7
   11d8c:	mov	r1, r4
   11d90:	mov	r0, #0
   11d94:	bl	11004 <error@plt>
   11d98:	mov	r0, r5
   11d9c:	add	sp, sp, #36	; 0x24
   11da0:	ldrd	r4, [sp]
   11da4:	ldrd	r6, [sp, #8]
   11da8:	ldrd	r8, [sp, #16]
   11dac:	ldrd	sl, [sp, #24]
   11db0:	add	sp, sp, #32
   11db4:	pop	{pc}		; (ldr pc, [sp], #4)
   11db8:	bl	10efc <getpwuid@plt>
   11dbc:	cmp	r0, #0
   11dc0:	beq	11e0c <__assert_fail@plt+0xc64>
   11dc4:	ldr	r3, [sp, #24]
   11dc8:	cmn	r3, #1
   11dcc:	ldreq	r3, [r0, #12]
   11dd0:	streq	r3, [sp, #24]
   11dd4:	ldr	r5, [r0]
   11dd8:	ldr	r4, [sp, #20]
   11ddc:	mov	r3, #0
   11de0:	str	r3, [sp, #12]
   11de4:	cmp	fp, r3
   11de8:	bne	11cf0 <__assert_fail@plt+0xb48>
   11dec:	ldr	r1, [sp, #24]
   11df0:	cmp	r5, #0
   11df4:	cmnne	r1, #1
   11df8:	bne	11e88 <__assert_fail@plt+0xce0>
   11dfc:	ldr	r3, [sp, #28]
   11e00:	cmn	r3, #1
   11e04:	beq	11d10 <__assert_fail@plt+0xb68>
   11e08:	b	11cfc <__assert_fail@plt+0xb54>
   11e0c:	ldr	r3, [sp, #24]
   11e10:	cmn	r3, #1
   11e14:	bne	11dd8 <__assert_fail@plt+0xc30>
   11e18:	bl	110a0 <__errno_location@plt>
   11e1c:	ldr	r4, [r0]
   11e20:	mov	r2, #5
   11e24:	movw	r1, #28324	; 0x6ea4
   11e28:	movt	r1, #1
   11e2c:	mov	r0, #0
   11e30:	bl	10f74 <dcgettext@plt>
   11e34:	ldr	r3, [sp, #28]
   11e38:	mov	r2, r0
   11e3c:	mov	r1, r4
   11e40:	mov	r0, #125	; 0x7d
   11e44:	bl	11004 <error@plt>
   11e48:	ldr	r3, [sp, #16]
   11e4c:	clz	r3, r3
   11e50:	lsr	r3, r3, #5
   11e54:	add	r2, sp, #16
   11e58:	add	r1, sp, #12
   11e5c:	mov	r0, fp
   11e60:	bl	112a4 <__assert_fail@plt+0xfc>
   11e64:	cmp	r0, #0
   11e68:	beq	11e80 <__assert_fail@plt+0xcd8>
   11e6c:	ldr	r3, [sp, #16]
   11e70:	cmp	r3, #0
   11e74:	bne	11cfc <__assert_fail@plt+0xb54>
   11e78:	mov	r5, #125	; 0x7d
   11e7c:	b	11d98 <__assert_fail@plt+0xbf0>
   11e80:	ldr	r4, [sp, #12]
   11e84:	b	11cfc <__assert_fail@plt+0xb54>
   11e88:	add	r2, sp, #12
   11e8c:	mov	r0, r5
   11e90:	bl	15340 <__assert_fail@plt+0x4198>
   11e94:	cmp	r0, #0
   11e98:	strgt	r0, [sp, #16]
   11e9c:	ldrgt	r4, [sp, #12]
   11ea0:	bgt	11dfc <__assert_fail@plt+0xc54>
   11ea4:	ldr	r3, [sp, #16]
   11ea8:	cmp	r3, #0
   11eac:	bne	11dfc <__assert_fail@plt+0xc54>
   11eb0:	bl	110a0 <__errno_location@plt>
   11eb4:	ldr	r4, [r0]
   11eb8:	mov	r2, #5
   11ebc:	movw	r1, #28364	; 0x6ecc
   11ec0:	movt	r1, #1
   11ec4:	mov	r0, #0
   11ec8:	bl	10f74 <dcgettext@plt>
   11ecc:	mov	r2, r0
   11ed0:	mov	r1, r4
   11ed4:	mov	r0, #125	; 0x7d
   11ed8:	bl	11004 <error@plt>
   11edc:	bl	110a0 <__errno_location@plt>
   11ee0:	ldr	r4, [r0]
   11ee4:	mov	r2, #5
   11ee8:	movw	r1, #28400	; 0x6ef0
   11eec:	movt	r1, #1
   11ef0:	mov	r0, #0
   11ef4:	bl	10f74 <dcgettext@plt>
   11ef8:	mov	r2, r0
   11efc:	mov	r1, r4
   11f00:	mov	r0, #125	; 0x7d
   11f04:	bl	11004 <error@plt>
   11f08:	bl	1101c <setgid@plt>
   11f0c:	cmp	r0, #0
   11f10:	beq	11d2c <__assert_fail@plt+0xb84>
   11f14:	bl	110a0 <__errno_location@plt>
   11f18:	ldr	r4, [r0]
   11f1c:	mov	r2, #5
   11f20:	movw	r1, #28436	; 0x6f14
   11f24:	movt	r1, #1
   11f28:	mov	r0, #0
   11f2c:	bl	10f74 <dcgettext@plt>
   11f30:	mov	r2, r0
   11f34:	mov	r1, r4
   11f38:	mov	r0, #125	; 0x7d
   11f3c:	bl	11004 <error@plt>
   11f40:	bl	110a0 <__errno_location@plt>
   11f44:	ldr	r4, [r0]
   11f48:	mov	r2, #5
   11f4c:	movw	r1, #28460	; 0x6f2c
   11f50:	movt	r1, #1
   11f54:	mov	r0, #0
   11f58:	bl	10f74 <dcgettext@plt>
   11f5c:	mov	r2, r0
   11f60:	mov	r1, r4
   11f64:	mov	r0, #125	; 0x7d
   11f68:	bl	11004 <error@plt>
   11f6c:	mov	r0, r5
   11f70:	bl	12150 <__assert_fail@plt+0xfa8>
   11f74:	mov	r0, r8
   11f78:	bl	10fe0 <chroot@plt>
   11f7c:	cmp	r0, #0
   11f80:	bne	11c44 <__assert_fail@plt+0xa9c>
   11f84:	cmp	r9, #0
   11f88:	movne	r5, #0
   11f8c:	beq	11c84 <__assert_fail@plt+0xadc>
   11f90:	movw	r3, #33128	; 0x8168
   11f94:	movt	r3, #2
   11f98:	ldr	r3, [r3]
   11f9c:	add	r2, r3, #1
   11fa0:	cmp	r2, r7
   11fa4:	addne	r3, r3, #1
   11fa8:	addne	r6, r6, r3, lsl #2
   11fac:	beq	11c8c <__assert_fail@plt+0xae4>
   11fb0:	cmp	r4, #0
   11fb4:	beq	11cc4 <__assert_fail@plt+0xb1c>
   11fb8:	mov	r3, #0
   11fbc:	str	r3, [sp]
   11fc0:	add	r2, sp, #24
   11fc4:	add	r1, sp, #28
   11fc8:	mov	r0, r4
   11fcc:	bl	147cc <__assert_fail@plt+0x3624>
   11fd0:	subs	r4, r0, #0
   11fd4:	beq	11cc4 <__assert_fail@plt+0xb1c>
   11fd8:	ldr	r0, [sp, #28]
   11fdc:	cmn	r0, #1
   11fe0:	bne	11cd0 <__assert_fail@plt+0xb28>
   11fe4:	ldr	r3, [sp, #24]
   11fe8:	cmn	r3, #1
   11fec:	bne	11dd8 <__assert_fail@plt+0xc30>
   11ff0:	bl	110a0 <__errno_location@plt>
   11ff4:	mov	r3, r4
   11ff8:	movw	r2, #28700	; 0x701c
   11ffc:	movt	r2, #1
   12000:	ldr	r1, [r0]
   12004:	mov	r0, #125	; 0x7d
   12008:	bl	11004 <error@plt>
   1200c:	bl	10efc <getpwuid@plt>
   12010:	subs	r5, r0, #0
   12014:	bne	11be0 <__assert_fail@plt+0xa38>
   12018:	b	11c04 <__assert_fail@plt+0xa5c>
   1201c:	andeq	r6, r1, r8, lsr #20
   12020:	movw	r3, #33152	; 0x8180
   12024:	movt	r3, #2
   12028:	str	r0, [r3]
   1202c:	bx	lr
   12030:	movw	r3, #33152	; 0x8180
   12034:	movt	r3, #2
   12038:	strb	r0, [r3, #4]
   1203c:	bx	lr
   12040:	strd	r4, [sp, #-16]!
   12044:	str	r6, [sp, #8]
   12048:	str	lr, [sp, #12]
   1204c:	sub	sp, sp, #8
   12050:	movw	r3, #33140	; 0x8174
   12054:	movt	r3, #2
   12058:	ldr	r0, [r3]
   1205c:	bl	16068 <__assert_fail@plt+0x4ec0>
   12060:	cmp	r0, #0
   12064:	beq	1208c <__assert_fail@plt+0xee4>
   12068:	movw	r3, #33152	; 0x8180
   1206c:	movt	r3, #2
   12070:	ldrb	r3, [r3, #4]
   12074:	cmp	r3, #0
   12078:	beq	120b8 <__assert_fail@plt+0xf10>
   1207c:	bl	110a0 <__errno_location@plt>
   12080:	ldr	r3, [r0]
   12084:	cmp	r3, #32
   12088:	bne	120b8 <__assert_fail@plt+0xf10>
   1208c:	movw	r3, #33136	; 0x8170
   12090:	movt	r3, #2
   12094:	ldr	r0, [r3]
   12098:	bl	16068 <__assert_fail@plt+0x4ec0>
   1209c:	cmp	r0, #0
   120a0:	bne	12140 <__assert_fail@plt+0xf98>
   120a4:	add	sp, sp, #8
   120a8:	ldrd	r4, [sp]
   120ac:	ldr	r6, [sp, #8]
   120b0:	add	sp, sp, #12
   120b4:	pop	{pc}		; (ldr pc, [sp], #4)
   120b8:	mov	r2, #5
   120bc:	movw	r1, #28684	; 0x700c
   120c0:	movt	r1, #1
   120c4:	mov	r0, #0
   120c8:	bl	10f74 <dcgettext@plt>
   120cc:	mov	r4, r0
   120d0:	movw	r3, #33152	; 0x8180
   120d4:	movt	r3, #2
   120d8:	ldr	r5, [r3]
   120dc:	cmp	r5, #0
   120e0:	beq	12120 <__assert_fail@plt+0xf78>
   120e4:	bl	110a0 <__errno_location@plt>
   120e8:	ldr	r6, [r0]
   120ec:	mov	r0, r5
   120f0:	bl	142a8 <__assert_fail@plt+0x3100>
   120f4:	str	r4, [sp]
   120f8:	mov	r3, r0
   120fc:	movw	r2, #28696	; 0x7018
   12100:	movt	r2, #1
   12104:	mov	r1, r6
   12108:	mov	r0, #0
   1210c:	bl	11004 <error@plt>
   12110:	movw	r3, #33052	; 0x811c
   12114:	movt	r3, #2
   12118:	ldr	r0, [r3]
   1211c:	bl	10f20 <_exit@plt>
   12120:	bl	110a0 <__errno_location@plt>
   12124:	mov	r3, r4
   12128:	movw	r2, #28700	; 0x701c
   1212c:	movt	r2, #1
   12130:	ldr	r1, [r0]
   12134:	mov	r0, #0
   12138:	bl	11004 <error@plt>
   1213c:	b	12110 <__assert_fail@plt+0xf68>
   12140:	movw	r3, #33052	; 0x811c
   12144:	movt	r3, #2
   12148:	ldr	r0, [r3]
   1214c:	bl	10f20 <_exit@plt>
   12150:	strd	r4, [sp, #-12]!
   12154:	str	lr, [sp, #8]
   12158:	sub	sp, sp, #12
   1215c:	mov	r5, r0
   12160:	bl	110a0 <__errno_location@plt>
   12164:	mov	r4, r0
   12168:	ldr	r3, [r0]
   1216c:	str	r3, [sp]
   12170:	str	r3, [sp, #4]
   12174:	mov	r3, #0
   12178:	str	r3, [r0]
   1217c:	mov	r0, r5
   12180:	bl	10f14 <free@plt>
   12184:	ldr	r3, [r4]
   12188:	clz	r3, r3
   1218c:	lsr	r3, r3, #5
   12190:	add	r2, sp, #8
   12194:	add	r3, r2, r3, lsl #2
   12198:	ldr	r3, [r3, #-8]
   1219c:	str	r3, [r4]
   121a0:	add	sp, sp, #12
   121a4:	ldrd	r4, [sp]
   121a8:	add	sp, sp, #8
   121ac:	pop	{pc}		; (ldr pc, [sp], #4)
   121b0:	strd	r4, [sp, #-16]!
   121b4:	str	r6, [sp, #8]
   121b8:	str	lr, [sp, #12]
   121bc:	subs	r4, r0, #0
   121c0:	beq	1225c <__assert_fail@plt+0x10b4>
   121c4:	mov	r1, #47	; 0x2f
   121c8:	mov	r0, r4
   121cc:	bl	11130 <strrchr@plt>
   121d0:	subs	r5, r0, #0
   121d4:	beq	12234 <__assert_fail@plt+0x108c>
   121d8:	add	r6, r5, #1
   121dc:	sub	r3, r6, r4
   121e0:	cmp	r3, #6
   121e4:	ble	12234 <__assert_fail@plt+0x108c>
   121e8:	mov	r2, #7
   121ec:	movw	r1, #28760	; 0x7058
   121f0:	movt	r1, #1
   121f4:	sub	r0, r5, #6
   121f8:	bl	11178 <strncmp@plt>
   121fc:	cmp	r0, #0
   12200:	bne	12234 <__assert_fail@plt+0x108c>
   12204:	mov	r2, #3
   12208:	movw	r1, #28768	; 0x7060
   1220c:	movt	r1, #1
   12210:	mov	r0, r6
   12214:	bl	11178 <strncmp@plt>
   12218:	cmp	r0, #0
   1221c:	movne	r4, r6
   12220:	bne	12234 <__assert_fail@plt+0x108c>
   12224:	add	r4, r5, #4
   12228:	movw	r3, #33120	; 0x8160
   1222c:	movt	r3, #2
   12230:	str	r4, [r3]
   12234:	movw	r3, #33160	; 0x8188
   12238:	movt	r3, #2
   1223c:	str	r4, [r3]
   12240:	movw	r3, #33124	; 0x8164
   12244:	movt	r3, #2
   12248:	str	r4, [r3]
   1224c:	ldrd	r4, [sp]
   12250:	ldr	r6, [sp, #8]
   12254:	add	sp, sp, #12
   12258:	pop	{pc}		; (ldr pc, [sp], #4)
   1225c:	movw	r3, #33136	; 0x8170
   12260:	movt	r3, #2
   12264:	ldr	r3, [r3]
   12268:	mov	r2, #55	; 0x37
   1226c:	mov	r1, #1
   12270:	movw	r0, #28704	; 0x7020
   12274:	movt	r0, #1
   12278:	bl	10fbc <fwrite@plt>
   1227c:	bl	11184 <abort@plt>
   12280:	mov	r2, #0
   12284:	mov	r3, #0
   12288:	strd	r2, [r0]
   1228c:	strd	r2, [r0, #8]
   12290:	strd	r2, [r0, #16]
   12294:	strd	r2, [r0, #24]
   12298:	strd	r2, [r0, #32]
   1229c:	strd	r2, [r0, #40]	; 0x28
   122a0:	cmp	r1, #10
   122a4:	beq	122b0 <__assert_fail@plt+0x1108>
   122a8:	str	r1, [r0]
   122ac:	bx	lr
   122b0:	str	r4, [sp, #-8]!
   122b4:	str	lr, [sp, #4]
   122b8:	bl	11184 <abort@plt>
   122bc:	strd	r4, [sp, #-16]!
   122c0:	str	r6, [sp, #8]
   122c4:	str	lr, [sp, #12]
   122c8:	mov	r5, r0
   122cc:	mov	r6, r1
   122d0:	mov	r2, #5
   122d4:	mov	r1, r0
   122d8:	mov	r0, #0
   122dc:	bl	10f74 <dcgettext@plt>
   122e0:	mov	r4, r0
   122e4:	cmp	r5, r0
   122e8:	beq	12300 <__assert_fail@plt+0x1158>
   122ec:	mov	r0, r4
   122f0:	ldrd	r4, [sp]
   122f4:	ldr	r6, [sp, #8]
   122f8:	add	sp, sp, #12
   122fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12300:	bl	1636c <__assert_fail@plt+0x51c4>
   12304:	ldrb	r3, [r0]
   12308:	bic	r3, r3, #32
   1230c:	cmp	r3, #85	; 0x55
   12310:	bne	12394 <__assert_fail@plt+0x11ec>
   12314:	ldrb	r3, [r0, #1]
   12318:	bic	r3, r3, #32
   1231c:	cmp	r3, #84	; 0x54
   12320:	bne	12358 <__assert_fail@plt+0x11b0>
   12324:	ldrb	r3, [r0, #2]
   12328:	bic	r3, r3, #32
   1232c:	cmp	r3, #70	; 0x46
   12330:	bne	12358 <__assert_fail@plt+0x11b0>
   12334:	ldrb	r3, [r0, #3]
   12338:	cmp	r3, #45	; 0x2d
   1233c:	bne	12358 <__assert_fail@plt+0x11b0>
   12340:	ldrb	r3, [r0, #4]
   12344:	cmp	r3, #56	; 0x38
   12348:	bne	12358 <__assert_fail@plt+0x11b0>
   1234c:	ldrb	r3, [r0, #5]
   12350:	cmp	r3, #0
   12354:	beq	12374 <__assert_fail@plt+0x11cc>
   12358:	movw	r4, #28856	; 0x70b8
   1235c:	movt	r4, #1
   12360:	movw	r3, #28876	; 0x70cc
   12364:	movt	r3, #1
   12368:	cmp	r6, #9
   1236c:	movne	r4, r3
   12370:	b	122ec <__assert_fail@plt+0x1144>
   12374:	ldrb	r2, [r4]
   12378:	movw	r4, #28872	; 0x70c8
   1237c:	movt	r4, #1
   12380:	movw	r3, #28860	; 0x70bc
   12384:	movt	r3, #1
   12388:	cmp	r2, #96	; 0x60
   1238c:	movne	r4, r3
   12390:	b	122ec <__assert_fail@plt+0x1144>
   12394:	cmp	r3, #71	; 0x47
   12398:	bne	12358 <__assert_fail@plt+0x11b0>
   1239c:	ldrb	r3, [r0, #1]
   123a0:	bic	r3, r3, #32
   123a4:	cmp	r3, #66	; 0x42
   123a8:	bne	12358 <__assert_fail@plt+0x11b0>
   123ac:	ldrb	r3, [r0, #2]
   123b0:	cmp	r3, #49	; 0x31
   123b4:	bne	12358 <__assert_fail@plt+0x11b0>
   123b8:	ldrb	r3, [r0, #3]
   123bc:	cmp	r3, #56	; 0x38
   123c0:	bne	12358 <__assert_fail@plt+0x11b0>
   123c4:	ldrb	r3, [r0, #4]
   123c8:	cmp	r3, #48	; 0x30
   123cc:	bne	12358 <__assert_fail@plt+0x11b0>
   123d0:	ldrb	r3, [r0, #5]
   123d4:	cmp	r3, #51	; 0x33
   123d8:	bne	12358 <__assert_fail@plt+0x11b0>
   123dc:	ldrb	r3, [r0, #6]
   123e0:	cmp	r3, #48	; 0x30
   123e4:	bne	12358 <__assert_fail@plt+0x11b0>
   123e8:	ldrb	r3, [r0, #7]
   123ec:	cmp	r3, #0
   123f0:	bne	12358 <__assert_fail@plt+0x11b0>
   123f4:	ldrb	r2, [r4]
   123f8:	movw	r4, #28868	; 0x70c4
   123fc:	movt	r4, #1
   12400:	movw	r3, #28864	; 0x70c0
   12404:	movt	r3, #1
   12408:	cmp	r2, #96	; 0x60
   1240c:	movne	r4, r3
   12410:	b	122ec <__assert_fail@plt+0x1144>
   12414:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12418:	strd	r6, [sp, #8]
   1241c:	strd	r8, [sp, #16]
   12420:	strd	sl, [sp, #24]
   12424:	str	lr, [sp, #32]
   12428:	sub	sp, sp, #116	; 0x74
   1242c:	str	r0, [sp, #64]	; 0x40
   12430:	mov	r8, r1
   12434:	str	r2, [sp, #48]	; 0x30
   12438:	str	r3, [sp, #24]
   1243c:	ldr	r7, [sp, #152]	; 0x98
   12440:	bl	10fd4 <__ctype_get_mb_cur_max@plt>
   12444:	str	r0, [sp, #76]	; 0x4c
   12448:	ldr	r3, [sp, #156]	; 0x9c
   1244c:	ubfx	r3, r3, #1, #1
   12450:	str	r3, [sp, #32]
   12454:	mov	r3, #1
   12458:	str	r3, [sp, #40]	; 0x28
   1245c:	mov	r3, #0
   12460:	str	r3, [sp, #68]	; 0x44
   12464:	str	r3, [sp, #36]	; 0x24
   12468:	str	r3, [sp, #28]
   1246c:	str	r3, [sp, #52]	; 0x34
   12470:	str	r3, [sp, #60]	; 0x3c
   12474:	str	r3, [sp, #72]	; 0x48
   12478:	movw	r3, #28880	; 0x70d0
   1247c:	movt	r3, #1
   12480:	str	r3, [sp, #80]	; 0x50
   12484:	mov	r9, r8
   12488:	mov	sl, r7
   1248c:	cmp	sl, #10
   12490:	ldrls	pc, [pc, sl, lsl #2]
   12494:	b	12658 <__assert_fail@plt+0x14b0>
   12498:	strdeq	r2, [r1], -r8
   1249c:	andeq	r2, r1, ip, asr #9
   124a0:	andeq	r2, r1, r0, lsr r6
   124a4:	andeq	r2, r1, r4, asr #9
   124a8:	andeq	r2, r1, r4, ror #11
   124ac:	andeq	r2, r1, r8, lsl #10
   124b0:	ldrdeq	r3, [r1], -r4
   124b4:	andeq	r2, r1, ip, asr r6
   124b8:	andeq	r2, r1, r4, asr #10
   124bc:	andeq	r2, r1, r4, asr #10
   124c0:	andeq	r2, r1, r4, asr #10
   124c4:	mov	r3, #1
   124c8:	str	r3, [sp, #28]
   124cc:	mov	r3, #1
   124d0:	str	r3, [sp, #32]
   124d4:	str	r3, [sp, #52]	; 0x34
   124d8:	movw	r3, #28876	; 0x70cc
   124dc:	movt	r3, #1
   124e0:	str	r3, [sp, #60]	; 0x3c
   124e4:	mov	fp, #0
   124e8:	mov	sl, #2
   124ec:	mov	r6, #0
   124f0:	ldr	r8, [sp, #64]	; 0x40
   124f4:	b	12d6c <__assert_fail@plt+0x1bc4>
   124f8:	mov	fp, sl
   124fc:	mov	r3, #0
   12500:	str	r3, [sp, #32]
   12504:	b	124ec <__assert_fail@plt+0x1344>
   12508:	ldr	r3, [sp, #32]
   1250c:	cmp	r3, #0
   12510:	bne	12670 <__assert_fail@plt+0x14c8>
   12514:	cmp	r9, #0
   12518:	beq	12694 <__assert_fail@plt+0x14ec>
   1251c:	mov	r3, #34	; 0x22
   12520:	ldr	r2, [sp, #64]	; 0x40
   12524:	strb	r3, [r2]
   12528:	mov	fp, #1
   1252c:	str	fp, [sp, #28]
   12530:	str	fp, [sp, #52]	; 0x34
   12534:	movw	r3, #28856	; 0x70b8
   12538:	movt	r3, #1
   1253c:	str	r3, [sp, #60]	; 0x3c
   12540:	b	124ec <__assert_fail@plt+0x1344>
   12544:	cmp	sl, #10
   12548:	bne	1257c <__assert_fail@plt+0x13d4>
   1254c:	ldr	r3, [sp, #32]
   12550:	cmp	r3, #0
   12554:	movne	fp, #0
   12558:	beq	125a4 <__assert_fail@plt+0x13fc>
   1255c:	ldr	r0, [sp, #168]	; 0xa8
   12560:	bl	11088 <strlen@plt>
   12564:	str	r0, [sp, #52]	; 0x34
   12568:	ldr	r3, [sp, #168]	; 0xa8
   1256c:	str	r3, [sp, #60]	; 0x3c
   12570:	mov	r3, #1
   12574:	str	r3, [sp, #28]
   12578:	b	124ec <__assert_fail@plt+0x1344>
   1257c:	mov	r1, sl
   12580:	ldr	r0, [sp, #80]	; 0x50
   12584:	bl	122bc <__assert_fail@plt+0x1114>
   12588:	str	r0, [sp, #164]	; 0xa4
   1258c:	mov	r1, sl
   12590:	movw	r0, #28876	; 0x70cc
   12594:	movt	r0, #1
   12598:	bl	122bc <__assert_fail@plt+0x1114>
   1259c:	str	r0, [sp, #168]	; 0xa8
   125a0:	b	1254c <__assert_fail@plt+0x13a4>
   125a4:	ldr	r3, [sp, #164]	; 0xa4
   125a8:	ldrb	r3, [r3]
   125ac:	cmp	r3, #0
   125b0:	beq	125dc <__assert_fail@plt+0x1434>
   125b4:	ldr	r2, [sp, #164]	; 0xa4
   125b8:	mov	fp, #0
   125bc:	ldr	r1, [sp, #64]	; 0x40
   125c0:	cmp	r9, fp
   125c4:	strbhi	r3, [r1, fp]
   125c8:	add	fp, fp, #1
   125cc:	ldrb	r3, [r2, #1]!
   125d0:	cmp	r3, #0
   125d4:	bne	125c0 <__assert_fail@plt+0x1418>
   125d8:	b	1255c <__assert_fail@plt+0x13b4>
   125dc:	mov	fp, #0
   125e0:	b	1255c <__assert_fail@plt+0x13b4>
   125e4:	ldr	r3, [sp, #32]
   125e8:	cmp	r3, #0
   125ec:	bne	124cc <__assert_fail@plt+0x1324>
   125f0:	mov	r3, #1
   125f4:	str	r3, [sp, #28]
   125f8:	cmp	r9, #0
   125fc:	beq	126b0 <__assert_fail@plt+0x1508>
   12600:	mov	r3, #39	; 0x27
   12604:	ldr	r2, [sp, #64]	; 0x40
   12608:	strb	r3, [r2]
   1260c:	mov	r3, #0
   12610:	str	r3, [sp, #32]
   12614:	mov	fp, #1
   12618:	str	fp, [sp, #52]	; 0x34
   1261c:	movw	r3, #28876	; 0x70cc
   12620:	movt	r3, #1
   12624:	str	r3, [sp, #60]	; 0x3c
   12628:	mov	sl, #2
   1262c:	b	124ec <__assert_fail@plt+0x1344>
   12630:	ldr	r3, [sp, #32]
   12634:	cmp	r3, #0
   12638:	beq	125f8 <__assert_fail@plt+0x1450>
   1263c:	mov	r3, #1
   12640:	str	r3, [sp, #52]	; 0x34
   12644:	movw	r3, #28876	; 0x70cc
   12648:	movt	r3, #1
   1264c:	str	r3, [sp, #60]	; 0x3c
   12650:	mov	fp, #0
   12654:	b	124ec <__assert_fail@plt+0x1344>
   12658:	bl	11184 <abort@plt>
   1265c:	mov	fp, #0
   12660:	str	fp, [sp, #32]
   12664:	mov	r3, #1
   12668:	str	r3, [sp, #28]
   1266c:	b	124ec <__assert_fail@plt+0x1344>
   12670:	ldr	r3, [sp, #32]
   12674:	str	r3, [sp, #28]
   12678:	mov	r3, #1
   1267c:	str	r3, [sp, #52]	; 0x34
   12680:	movw	r3, #28856	; 0x70b8
   12684:	movt	r3, #1
   12688:	str	r3, [sp, #60]	; 0x3c
   1268c:	mov	fp, #0
   12690:	b	124ec <__assert_fail@plt+0x1344>
   12694:	mov	fp, #1
   12698:	str	fp, [sp, #28]
   1269c:	str	fp, [sp, #52]	; 0x34
   126a0:	movw	r3, #28856	; 0x70b8
   126a4:	movt	r3, #1
   126a8:	str	r3, [sp, #60]	; 0x3c
   126ac:	b	124ec <__assert_fail@plt+0x1344>
   126b0:	mov	r3, #0
   126b4:	str	r3, [sp, #32]
   126b8:	mov	fp, #1
   126bc:	str	fp, [sp, #52]	; 0x34
   126c0:	movw	r3, #28876	; 0x70cc
   126c4:	movt	r3, #1
   126c8:	str	r3, [sp, #60]	; 0x3c
   126cc:	mov	sl, #2
   126d0:	b	124ec <__assert_fail@plt+0x1344>
   126d4:	mov	r3, r2
   126d8:	add	r4, r6, r2
   126dc:	ldr	r2, [sp, #24]
   126e0:	cmp	r3, #1
   126e4:	movls	r3, #0
   126e8:	movhi	r3, #1
   126ec:	cmn	r2, #1
   126f0:	movne	r3, #0
   126f4:	cmp	r3, #0
   126f8:	beq	12708 <__assert_fail@plt+0x1560>
   126fc:	ldr	r0, [sp, #48]	; 0x30
   12700:	bl	11088 <strlen@plt>
   12704:	str	r0, [sp, #24]
   12708:	ldr	r3, [sp, #24]
   1270c:	cmp	r4, r3
   12710:	bhi	138fc <__assert_fail@plt+0x2754>
   12714:	ldr	r3, [sp, #48]	; 0x30
   12718:	add	r4, r3, r6
   1271c:	ldr	r2, [sp, #52]	; 0x34
   12720:	ldr	r1, [sp, #60]	; 0x3c
   12724:	mov	r0, r4
   12728:	bl	10f5c <memcmp@plt>
   1272c:	cmp	r0, #0
   12730:	bne	138fc <__assert_fail@plt+0x2754>
   12734:	ldr	r3, [sp, #32]
   12738:	cmp	r3, #0
   1273c:	bne	1294c <__assert_fail@plt+0x17a4>
   12740:	ldrb	r4, [r4]
   12744:	cmp	r4, #126	; 0x7e
   12748:	ldrls	pc, [pc, r4, lsl #2]
   1274c:	b	13200 <__assert_fail@plt+0x2058>
   12750:	muleq	r1, r0, r9
   12754:	andeq	r3, r1, r0, lsl #4
   12758:	andeq	r3, r1, r0, lsl #4
   1275c:	andeq	r3, r1, r0, lsl #4
   12760:	andeq	r3, r1, r0, lsl #4
   12764:	andeq	r3, r1, r0, lsl #4
   12768:	andeq	r3, r1, r0, lsl #4
   1276c:	andeq	r3, r1, r8, lsr #1
   12770:	andeq	r2, r1, ip, lsr #24
   12774:	ldrdeq	r2, [r1], -r0
   12778:	andeq	r3, r1, ip, ror r0
   1277c:	andeq	r2, r1, r4, ror #31
   12780:	andeq	r2, r1, r0, asr #24
   12784:	andeq	r2, r1, r4, asr ip
   12788:	andeq	r3, r1, r0, lsl #4
   1278c:	andeq	r3, r1, r0, lsl #4
   12790:	andeq	r3, r1, r0, lsl #4
   12794:	andeq	r3, r1, r0, lsl #4
   12798:	andeq	r3, r1, r0, lsl #4
   1279c:	andeq	r3, r1, r0, lsl #4
   127a0:	andeq	r3, r1, r0, lsl #4
   127a4:	andeq	r3, r1, r0, lsl #4
   127a8:	andeq	r3, r1, r0, lsl #4
   127ac:	andeq	r3, r1, r0, lsl #4
   127b0:	andeq	r3, r1, r0, lsl #4
   127b4:	andeq	r3, r1, r0, lsl #4
   127b8:	andeq	r3, r1, r0, lsl #4
   127bc:	andeq	r3, r1, r0, lsl #4
   127c0:	andeq	r3, r1, r0, lsl #4
   127c4:	andeq	r3, r1, r0, lsl #4
   127c8:	andeq	r3, r1, r0, lsl #4
   127cc:	andeq	r3, r1, r0, lsl #4
   127d0:	andeq	r3, r1, ip, lsl r1
   127d4:	andeq	r3, r1, r0, asr #2
   127d8:	andeq	r3, r1, r0, asr #2
   127dc:	ldrdeq	r3, [r1], -r8
   127e0:	andeq	r3, r1, r0, asr #2
   127e4:	andeq	r3, r1, r0, ror #12
   127e8:	andeq	r3, r1, r0, asr #2
   127ec:	andeq	r3, r1, r0, ror #2
   127f0:	andeq	r3, r1, r0, asr #2
   127f4:	andeq	r3, r1, r0, asr #2
   127f8:	andeq	r3, r1, r0, asr #2
   127fc:	andeq	r3, r1, r0, ror #12
   12800:	andeq	r3, r1, r0, ror #12
   12804:	andeq	r3, r1, r0, ror #12
   12808:	andeq	r3, r1, r0, ror #12
   1280c:	andeq	r3, r1, r0, ror #12
   12810:	andeq	r3, r1, r0, ror #12
   12814:	andeq	r3, r1, r0, ror #12
   12818:	andeq	r3, r1, r0, ror #12
   1281c:	andeq	r3, r1, r0, ror #12
   12820:	andeq	r3, r1, r0, ror #12
   12824:	andeq	r3, r1, r0, ror #12
   12828:	andeq	r3, r1, r0, ror #12
   1282c:	andeq	r3, r1, r0, ror #12
   12830:	andeq	r3, r1, r0, ror #12
   12834:	andeq	r3, r1, r0, ror #12
   12838:	andeq	r3, r1, r0, ror #12
   1283c:	andeq	r3, r1, r0, asr #2
   12840:	andeq	r3, r1, r0, asr #2
   12844:	andeq	r3, r1, r0, asr #2
   12848:	andeq	r3, r1, r0, asr #2
   1284c:	andeq	r2, r1, r0, asr #21
   12850:	andeq	r3, r1, r0, lsl #4
   12854:	andeq	r3, r1, r0, ror #12
   12858:	andeq	r3, r1, r0, ror #12
   1285c:	andeq	r3, r1, r0, ror #12
   12860:	andeq	r3, r1, r0, ror #12
   12864:	andeq	r3, r1, r0, ror #12
   12868:	andeq	r3, r1, r0, ror #12
   1286c:	andeq	r3, r1, r0, ror #12
   12870:	andeq	r3, r1, r0, ror #12
   12874:	andeq	r3, r1, r0, ror #12
   12878:	andeq	r3, r1, r0, ror #12
   1287c:	andeq	r3, r1, r0, ror #12
   12880:	andeq	r3, r1, r0, ror #12
   12884:	andeq	r3, r1, r0, ror #12
   12888:	andeq	r3, r1, r0, ror #12
   1288c:	andeq	r3, r1, r0, ror #12
   12890:	andeq	r3, r1, r0, ror #12
   12894:	andeq	r3, r1, r0, ror #12
   12898:	andeq	r3, r1, r0, ror #12
   1289c:	andeq	r3, r1, r0, ror #12
   128a0:	andeq	r3, r1, r0, ror #12
   128a4:	andeq	r3, r1, r0, ror #12
   128a8:	andeq	r3, r1, r0, ror #12
   128ac:	andeq	r3, r1, r0, ror #12
   128b0:	andeq	r3, r1, r0, ror #12
   128b4:	andeq	r3, r1, r0, ror #12
   128b8:	andeq	r3, r1, r0, ror #12
   128bc:	andeq	r3, r1, r0, asr #2
   128c0:	strdeq	r2, [r1], -r8
   128c4:	andeq	r3, r1, r0, ror #12
   128c8:	andeq	r3, r1, r0, asr #2
   128cc:	andeq	r3, r1, r0, ror #12
   128d0:	andeq	r3, r1, r0, asr #2
   128d4:	andeq	r3, r1, r0, ror #12
   128d8:	andeq	r3, r1, r0, ror #12
   128dc:	andeq	r3, r1, r0, ror #12
   128e0:	andeq	r3, r1, r0, ror #12
   128e4:	andeq	r3, r1, r0, ror #12
   128e8:	andeq	r3, r1, r0, ror #12
   128ec:	andeq	r3, r1, r0, ror #12
   128f0:	andeq	r3, r1, r0, ror #12
   128f4:	andeq	r3, r1, r0, ror #12
   128f8:	andeq	r3, r1, r0, ror #12
   128fc:	andeq	r3, r1, r0, ror #12
   12900:	andeq	r3, r1, r0, ror #12
   12904:	andeq	r3, r1, r0, ror #12
   12908:	andeq	r3, r1, r0, ror #12
   1290c:	andeq	r3, r1, r0, ror #12
   12910:	andeq	r3, r1, r0, ror #12
   12914:	andeq	r3, r1, r0, ror #12
   12918:	andeq	r3, r1, r0, ror #12
   1291c:	andeq	r3, r1, r0, ror #12
   12920:	andeq	r3, r1, r0, ror #12
   12924:	andeq	r3, r1, r0, ror #12
   12928:	andeq	r3, r1, r0, ror #12
   1292c:	andeq	r3, r1, r0, ror #12
   12930:	andeq	r3, r1, r0, ror #12
   12934:	andeq	r3, r1, r0, ror #12
   12938:	andeq	r3, r1, r0, ror #12
   1293c:	strheq	r3, [r1], -r8
   12940:	andeq	r3, r1, r0, asr #2
   12944:	strheq	r3, [r1], -r8
   12948:	ldrdeq	r3, [r1], -r8
   1294c:	mov	r8, r9
   12950:	mov	r7, sl
   12954:	b	13854 <__assert_fail@plt+0x26ac>
   12958:	ldr	r3, [sp, #28]
   1295c:	cmp	r3, #0
   12960:	bne	12980 <__assert_fail@plt+0x17d8>
   12964:	ldr	r3, [sp, #156]	; 0x9c
   12968:	tst	r3, #1
   1296c:	bne	12d68 <__assert_fail@plt+0x1bc0>
   12970:	ldr	r3, [sp, #28]
   12974:	str	r3, [sp, #44]	; 0x2c
   12978:	mov	r5, r3
   1297c:	b	12c88 <__assert_fail@plt+0x1ae0>
   12980:	ldr	r3, [sp, #32]
   12984:	cmp	r3, #0
   12988:	bne	13804 <__assert_fail@plt+0x265c>
   1298c:	str	r3, [sp, #44]	; 0x2c
   12990:	ldr	r3, [sp, #36]	; 0x24
   12994:	eor	r3, r3, #1
   12998:	cmp	sl, #2
   1299c:	movne	r3, #0
   129a0:	andeq	r3, r3, #1
   129a4:	cmp	r3, #0
   129a8:	beq	12a00 <__assert_fail@plt+0x1858>
   129ac:	cmp	r9, fp
   129b0:	movhi	r2, #39	; 0x27
   129b4:	strbhi	r2, [r8, fp]
   129b8:	add	r2, fp, #1
   129bc:	cmp	r9, r2
   129c0:	movhi	r1, #36	; 0x24
   129c4:	strbhi	r1, [r8, r2]
   129c8:	add	r2, fp, #2
   129cc:	cmp	r9, r2
   129d0:	movhi	r1, #39	; 0x27
   129d4:	strbhi	r1, [r8, r2]
   129d8:	add	r2, fp, #3
   129dc:	cmp	r9, r2
   129e0:	bls	138c0 <__assert_fail@plt+0x2718>
   129e4:	mov	r1, #92	; 0x5c
   129e8:	strb	r1, [r8, r2]
   129ec:	add	fp, fp, #4
   129f0:	str	r3, [sp, #36]	; 0x24
   129f4:	mov	r5, #0
   129f8:	mov	r4, #48	; 0x30
   129fc:	b	12cd4 <__assert_fail@plt+0x1b2c>
   12a00:	cmp	r9, fp
   12a04:	bhi	12a2c <__assert_fail@plt+0x1884>
   12a08:	add	r1, fp, #1
   12a0c:	ldr	r2, [sp, #56]	; 0x38
   12a10:	cmp	r2, #0
   12a14:	bne	12a54 <__assert_fail@plt+0x18ac>
   12a18:	mov	r3, r5
   12a1c:	ldr	r5, [sp, #56]	; 0x38
   12a20:	mov	fp, r1
   12a24:	mov	r4, #48	; 0x30
   12a28:	b	12c88 <__assert_fail@plt+0x1ae0>
   12a2c:	mov	r2, #92	; 0x5c
   12a30:	strb	r2, [r8, fp]
   12a34:	add	r1, fp, #1
   12a38:	ldr	r2, [sp, #56]	; 0x38
   12a3c:	cmp	r2, #0
   12a40:	moveq	r3, r5
   12a44:	moveq	r5, r2
   12a48:	moveq	fp, r1
   12a4c:	moveq	r4, #48	; 0x30
   12a50:	beq	12cd4 <__assert_fail@plt+0x1b2c>
   12a54:	add	r2, r6, #1
   12a58:	ldr	r0, [sp, #24]
   12a5c:	cmp	r2, r0
   12a60:	bcs	12a7c <__assert_fail@plt+0x18d4>
   12a64:	ldr	r0, [sp, #48]	; 0x30
   12a68:	ldrb	r2, [r0, r2]
   12a6c:	sub	r2, r2, #48	; 0x30
   12a70:	uxtb	r2, r2
   12a74:	cmp	r2, #9
   12a78:	bls	12a94 <__assert_fail@plt+0x18ec>
   12a7c:	mov	r2, r3
   12a80:	mov	r3, r5
   12a84:	mov	r5, r2
   12a88:	mov	fp, r1
   12a8c:	mov	r4, #48	; 0x30
   12a90:	b	12cac <__assert_fail@plt+0x1b04>
   12a94:	cmp	r9, r1
   12a98:	movhi	r2, #48	; 0x30
   12a9c:	strbhi	r2, [r8, r1]
   12aa0:	add	r2, fp, #2
   12aa4:	cmp	r9, r2
   12aa8:	movhi	r1, #48	; 0x30
   12aac:	strbhi	r1, [r8, r2]
   12ab0:	add	r1, fp, #3
   12ab4:	b	12a7c <__assert_fail@plt+0x18d4>
   12ab8:	mov	r3, #0
   12abc:	str	r3, [sp, #44]	; 0x2c
   12ac0:	cmp	sl, #2
   12ac4:	beq	12ae0 <__assert_fail@plt+0x1938>
   12ac8:	cmp	sl, #5
   12acc:	beq	12af8 <__assert_fail@plt+0x1950>
   12ad0:	mov	r5, #0
   12ad4:	mov	r3, r5
   12ad8:	mov	r4, #63	; 0x3f
   12adc:	b	12c88 <__assert_fail@plt+0x1ae0>
   12ae0:	ldr	r3, [sp, #32]
   12ae4:	cmp	r3, #0
   12ae8:	bne	13810 <__assert_fail@plt+0x2668>
   12aec:	mov	r5, r3
   12af0:	mov	r4, #63	; 0x3f
   12af4:	b	131f0 <__assert_fail@plt+0x2048>
   12af8:	ldr	r3, [sp, #156]	; 0x9c
   12afc:	tst	r3, #4
   12b00:	beq	13628 <__assert_fail@plt+0x2480>
   12b04:	add	r2, r6, #2
   12b08:	ldr	r3, [sp, #24]
   12b0c:	cmp	r2, r3
   12b10:	bcs	13638 <__assert_fail@plt+0x2490>
   12b14:	ldr	r3, [sp, #48]	; 0x30
   12b18:	add	r3, r3, r6
   12b1c:	ldrb	r4, [r3, #1]
   12b20:	cmp	r4, #63	; 0x3f
   12b24:	movne	r5, #0
   12b28:	movne	r3, r5
   12b2c:	movne	r4, #63	; 0x3f
   12b30:	bne	12c88 <__assert_fail@plt+0x1ae0>
   12b34:	ldr	r3, [sp, #48]	; 0x30
   12b38:	ldrb	r1, [r3, r2]
   12b3c:	sub	r3, r1, #33	; 0x21
   12b40:	cmp	r3, #29
   12b44:	ldrls	pc, [pc, r3, lsl #2]
   12b48:	b	13648 <__assert_fail@plt+0x24a0>
   12b4c:	andeq	r2, r1, r4, asr #23
   12b50:	andeq	r3, r1, r8, asr #12
   12b54:	andeq	r3, r1, r8, asr #12
   12b58:	andeq	r3, r1, r8, asr #12
   12b5c:	andeq	r3, r1, r8, asr #12
   12b60:	andeq	r3, r1, r8, asr #12
   12b64:	andeq	r2, r1, r4, asr #23
   12b68:	andeq	r2, r1, r4, asr #23
   12b6c:	andeq	r2, r1, r4, asr #23
   12b70:	andeq	r3, r1, r8, asr #12
   12b74:	andeq	r3, r1, r8, asr #12
   12b78:	andeq	r3, r1, r8, asr #12
   12b7c:	andeq	r2, r1, r4, asr #23
   12b80:	andeq	r3, r1, r8, asr #12
   12b84:	andeq	r2, r1, r4, asr #23
   12b88:	andeq	r3, r1, r8, asr #12
   12b8c:	andeq	r3, r1, r8, asr #12
   12b90:	andeq	r3, r1, r8, asr #12
   12b94:	andeq	r3, r1, r8, asr #12
   12b98:	andeq	r3, r1, r8, asr #12
   12b9c:	andeq	r3, r1, r8, asr #12
   12ba0:	andeq	r3, r1, r8, asr #12
   12ba4:	andeq	r3, r1, r8, asr #12
   12ba8:	andeq	r3, r1, r8, asr #12
   12bac:	andeq	r3, r1, r8, asr #12
   12bb0:	andeq	r3, r1, r8, asr #12
   12bb4:	andeq	r3, r1, r8, asr #12
   12bb8:	andeq	r2, r1, r4, asr #23
   12bbc:	andeq	r2, r1, r4, asr #23
   12bc0:	andeq	r2, r1, r4, asr #23
   12bc4:	ldr	r3, [sp, #32]
   12bc8:	cmp	r3, #0
   12bcc:	bne	138b4 <__assert_fail@plt+0x270c>
   12bd0:	cmp	r9, fp
   12bd4:	movhi	r3, #63	; 0x3f
   12bd8:	strbhi	r3, [r8, fp]
   12bdc:	add	r3, fp, #1
   12be0:	cmp	r9, r3
   12be4:	movhi	r0, #34	; 0x22
   12be8:	strbhi	r0, [r8, r3]
   12bec:	add	r3, fp, #2
   12bf0:	cmp	r9, r3
   12bf4:	movhi	r0, #34	; 0x22
   12bf8:	strbhi	r0, [r8, r3]
   12bfc:	add	r3, fp, #3
   12c00:	cmp	r9, r3
   12c04:	movhi	r0, #63	; 0x3f
   12c08:	strbhi	r0, [r8, r3]
   12c0c:	add	fp, fp, #4
   12c10:	ldr	r3, [sp, #32]
   12c14:	mov	r5, r3
   12c18:	mov	r4, r1
   12c1c:	mov	r6, r2
   12c20:	b	12c88 <__assert_fail@plt+0x1ae0>
   12c24:	mov	r3, #0
   12c28:	str	r3, [sp, #44]	; 0x2c
   12c2c:	mov	r4, #8
   12c30:	mov	r3, #98	; 0x62
   12c34:	b	12c74 <__assert_fail@plt+0x1acc>
   12c38:	mov	r3, #0
   12c3c:	str	r3, [sp, #44]	; 0x2c
   12c40:	mov	r4, #12
   12c44:	mov	r3, #102	; 0x66
   12c48:	b	12c74 <__assert_fail@plt+0x1acc>
   12c4c:	mov	r3, #0
   12c50:	str	r3, [sp, #44]	; 0x2c
   12c54:	mov	r4, #13
   12c58:	mov	r3, #114	; 0x72
   12c5c:	ldr	r2, [sp, #32]
   12c60:	cmp	sl, #2
   12c64:	movne	r2, #0
   12c68:	andeq	r2, r2, #1
   12c6c:	cmp	r2, #0
   12c70:	bne	13094 <__assert_fail@plt+0x1eec>
   12c74:	ldr	r2, [sp, #28]
   12c78:	cmp	r2, #0
   12c7c:	bne	1367c <__assert_fail@plt+0x24d4>
   12c80:	mov	r5, r2
   12c84:	mov	r3, r2
   12c88:	ldr	r2, [sp, #28]
   12c8c:	eor	r2, r2, #1
   12c90:	cmp	sl, #2
   12c94:	orreq	r2, r2, #1
   12c98:	eor	r2, r2, #1
   12c9c:	ldr	r1, [sp, #32]
   12ca0:	orr	r2, r1, r2
   12ca4:	tst	r2, #255	; 0xff
   12ca8:	beq	12cd4 <__assert_fail@plt+0x1b2c>
   12cac:	ldr	r2, [sp, #160]	; 0xa0
   12cb0:	cmp	r2, #0
   12cb4:	beq	12cd4 <__assert_fail@plt+0x1b2c>
   12cb8:	ubfx	r1, r4, #5, #8
   12cbc:	and	r2, r4, #31
   12cc0:	ldr	r0, [sp, #160]	; 0xa0
   12cc4:	ldr	r1, [r0, r1, lsl #2]
   12cc8:	lsr	r2, r1, r2
   12ccc:	tst	r2, #1
   12cd0:	bne	12ce0 <__assert_fail@plt+0x1b38>
   12cd4:	ldr	r2, [sp, #44]	; 0x2c
   12cd8:	cmp	r2, #0
   12cdc:	beq	13034 <__assert_fail@plt+0x1e8c>
   12ce0:	ldr	r3, [sp, #32]
   12ce4:	cmp	r3, #0
   12ce8:	bne	13834 <__assert_fail@plt+0x268c>
   12cec:	ldr	r3, [sp, #36]	; 0x24
   12cf0:	eor	r3, r3, #1
   12cf4:	cmp	sl, #2
   12cf8:	movne	r3, #0
   12cfc:	andeq	r3, r3, #1
   12d00:	cmp	r3, #0
   12d04:	beq	12d3c <__assert_fail@plt+0x1b94>
   12d08:	cmp	r9, fp
   12d0c:	movhi	r2, #39	; 0x27
   12d10:	strbhi	r2, [r8, fp]
   12d14:	add	r2, fp, #1
   12d18:	cmp	r9, r2
   12d1c:	movhi	r1, #36	; 0x24
   12d20:	strbhi	r1, [r8, r2]
   12d24:	add	r2, fp, #2
   12d28:	cmp	r9, r2
   12d2c:	movhi	r1, #39	; 0x27
   12d30:	strbhi	r1, [r8, r2]
   12d34:	add	fp, fp, #3
   12d38:	str	r3, [sp, #36]	; 0x24
   12d3c:	cmp	r9, fp
   12d40:	movhi	r3, #92	; 0x5c
   12d44:	strbhi	r3, [r8, fp]
   12d48:	add	fp, fp, #1
   12d4c:	cmp	fp, r9
   12d50:	strbcc	r4, [r8, fp]
   12d54:	add	fp, fp, #1
   12d58:	cmp	r5, #0
   12d5c:	ldr	r3, [sp, #40]	; 0x28
   12d60:	moveq	r3, r5
   12d64:	str	r3, [sp, #40]	; 0x28
   12d68:	add	r6, r6, #1
   12d6c:	ldr	r3, [sp, #24]
   12d70:	cmn	r3, #1
   12d74:	beq	136a4 <__assert_fail@plt+0x24fc>
   12d78:	ldr	r3, [sp, #24]
   12d7c:	subs	r5, r3, r6
   12d80:	movne	r5, #1
   12d84:	cmp	r5, #0
   12d88:	beq	136b8 <__assert_fail@plt+0x2510>
   12d8c:	ldr	r3, [sp, #28]
   12d90:	cmp	sl, #2
   12d94:	moveq	r3, #0
   12d98:	andne	r3, r3, #1
   12d9c:	str	r3, [sp, #56]	; 0x38
   12da0:	ldr	r2, [sp, #52]	; 0x34
   12da4:	adds	r7, r2, #0
   12da8:	movne	r7, #1
   12dac:	ands	r3, r3, r7
   12db0:	str	r3, [sp, #44]	; 0x2c
   12db4:	bne	126d4 <__assert_fail@plt+0x152c>
   12db8:	ldr	r3, [sp, #48]	; 0x30
   12dbc:	ldrb	r4, [r3, r6]
   12dc0:	cmp	r4, #126	; 0x7e
   12dc4:	ldrls	pc, [pc, r4, lsl #2]
   12dc8:	b	13200 <__assert_fail@plt+0x2058>
   12dcc:	andeq	r2, r1, r8, asr r9
   12dd0:	andeq	r3, r1, r0, lsl #4
   12dd4:	andeq	r3, r1, r0, lsl #4
   12dd8:	andeq	r3, r1, r0, lsl #4
   12ddc:	andeq	r3, r1, r0, lsl #4
   12de0:	andeq	r3, r1, r0, lsl #4
   12de4:	andeq	r3, r1, r0, lsl #4
   12de8:	andeq	r3, r1, r0, lsr #1
   12dec:	andeq	r2, r1, ip, lsr #24
   12df0:	ldrdeq	r2, [r1], -r0
   12df4:	andeq	r3, r1, r4, ror r0
   12df8:	andeq	r2, r1, r4, ror #31
   12dfc:	andeq	r2, r1, r0, asr #24
   12e00:	andeq	r2, r1, r4, asr ip
   12e04:	andeq	r3, r1, r0, lsl #4
   12e08:	andeq	r3, r1, r0, lsl #4
   12e0c:	andeq	r3, r1, r0, lsl #4
   12e10:	andeq	r3, r1, r0, lsl #4
   12e14:	andeq	r3, r1, r0, lsl #4
   12e18:	andeq	r3, r1, r0, lsl #4
   12e1c:	andeq	r3, r1, r0, lsl #4
   12e20:	andeq	r3, r1, r0, lsl #4
   12e24:	andeq	r3, r1, r0, lsl #4
   12e28:	andeq	r3, r1, r0, lsl #4
   12e2c:	andeq	r3, r1, r0, lsl #4
   12e30:	andeq	r3, r1, r0, lsl #4
   12e34:	andeq	r3, r1, r0, lsl #4
   12e38:	andeq	r3, r1, r0, lsl #4
   12e3c:	andeq	r3, r1, r0, lsl #4
   12e40:	andeq	r3, r1, r0, lsl #4
   12e44:	andeq	r3, r1, r0, lsl #4
   12e48:	andeq	r3, r1, r0, lsl #4
   12e4c:	andeq	r3, r1, ip, lsl r1
   12e50:	andeq	r3, r1, r8, lsl r1
   12e54:	andeq	r3, r1, r8, lsl r1
   12e58:	ldrdeq	r3, [r1], -r8
   12e5c:	andeq	r3, r1, r8, lsl r1
   12e60:	andeq	r3, r1, r0, lsr #12
   12e64:	andeq	r3, r1, r8, lsl r1
   12e68:	andeq	r3, r1, r0, ror #2
   12e6c:	andeq	r3, r1, r8, lsl r1
   12e70:	andeq	r3, r1, r8, lsl r1
   12e74:	andeq	r3, r1, r8, lsl r1
   12e78:	andeq	r3, r1, r0, lsr #12
   12e7c:	andeq	r3, r1, r0, lsr #12
   12e80:	andeq	r3, r1, r0, lsr #12
   12e84:	andeq	r3, r1, r0, lsr #12
   12e88:	andeq	r3, r1, r0, lsr #12
   12e8c:	andeq	r3, r1, r0, lsr #12
   12e90:	andeq	r3, r1, r0, lsr #12
   12e94:	andeq	r3, r1, r0, lsr #12
   12e98:	andeq	r3, r1, r0, lsr #12
   12e9c:	andeq	r3, r1, r0, lsr #12
   12ea0:	andeq	r3, r1, r0, lsr #12
   12ea4:	andeq	r3, r1, r0, lsr #12
   12ea8:	andeq	r3, r1, r0, lsr #12
   12eac:	andeq	r3, r1, r0, lsr #12
   12eb0:	andeq	r3, r1, r0, lsr #12
   12eb4:	andeq	r3, r1, r0, lsr #12
   12eb8:	andeq	r3, r1, r8, lsl r1
   12ebc:	andeq	r3, r1, r8, lsl r1
   12ec0:	andeq	r3, r1, r8, lsl r1
   12ec4:	andeq	r3, r1, r8, lsl r1
   12ec8:	andeq	r2, r1, r0, asr #21
   12ecc:	andeq	r3, r1, r0, lsl #4
   12ed0:	andeq	r3, r1, r0, lsr #12
   12ed4:	andeq	r3, r1, r0, lsr #12
   12ed8:	andeq	r3, r1, r0, lsr #12
   12edc:	andeq	r3, r1, r0, lsr #12
   12ee0:	andeq	r3, r1, r0, lsr #12
   12ee4:	andeq	r3, r1, r0, lsr #12
   12ee8:	andeq	r3, r1, r0, lsr #12
   12eec:	andeq	r3, r1, r0, lsr #12
   12ef0:	andeq	r3, r1, r0, lsr #12
   12ef4:	andeq	r3, r1, r0, lsr #12
   12ef8:	andeq	r3, r1, r0, lsr #12
   12efc:	andeq	r3, r1, r0, lsr #12
   12f00:	andeq	r3, r1, r0, lsr #12
   12f04:	andeq	r3, r1, r0, lsr #12
   12f08:	andeq	r3, r1, r0, lsr #12
   12f0c:	andeq	r3, r1, r0, lsr #12
   12f10:	andeq	r3, r1, r0, lsr #12
   12f14:	andeq	r3, r1, r0, lsr #12
   12f18:	andeq	r3, r1, r0, lsr #12
   12f1c:	andeq	r3, r1, r0, lsr #12
   12f20:	andeq	r3, r1, r0, lsr #12
   12f24:	andeq	r3, r1, r0, lsr #12
   12f28:	andeq	r3, r1, r0, lsr #12
   12f2c:	andeq	r3, r1, r0, lsr #12
   12f30:	andeq	r3, r1, r0, lsr #12
   12f34:	andeq	r3, r1, r0, lsr #12
   12f38:	andeq	r3, r1, r8, lsl r1
   12f3c:	strdeq	r2, [r1], -r8
   12f40:	andeq	r3, r1, r0, lsr #12
   12f44:	andeq	r3, r1, r8, lsl r1
   12f48:	andeq	r3, r1, r0, lsr #12
   12f4c:	andeq	r3, r1, r8, lsl r1
   12f50:	andeq	r3, r1, r0, lsr #12
   12f54:	andeq	r3, r1, r0, lsr #12
   12f58:	andeq	r3, r1, r0, lsr #12
   12f5c:	andeq	r3, r1, r0, lsr #12
   12f60:	andeq	r3, r1, r0, lsr #12
   12f64:	andeq	r3, r1, r0, lsr #12
   12f68:	andeq	r3, r1, r0, lsr #12
   12f6c:	andeq	r3, r1, r0, lsr #12
   12f70:	andeq	r3, r1, r0, lsr #12
   12f74:	andeq	r3, r1, r0, lsr #12
   12f78:	andeq	r3, r1, r0, lsr #12
   12f7c:	andeq	r3, r1, r0, lsr #12
   12f80:	andeq	r3, r1, r0, lsr #12
   12f84:	andeq	r3, r1, r0, lsr #12
   12f88:	andeq	r3, r1, r0, lsr #12
   12f8c:	andeq	r3, r1, r0, lsr #12
   12f90:	andeq	r3, r1, r0, lsr #12
   12f94:	andeq	r3, r1, r0, lsr #12
   12f98:	andeq	r3, r1, r0, lsr #12
   12f9c:	andeq	r3, r1, r0, lsr #12
   12fa0:	andeq	r3, r1, r0, lsr #12
   12fa4:	andeq	r3, r1, r0, lsr #12
   12fa8:	andeq	r3, r1, r0, lsr #12
   12fac:	andeq	r3, r1, r0, lsr #12
   12fb0:	andeq	r3, r1, r0, lsr #12
   12fb4:	andeq	r3, r1, r0, lsr #12
   12fb8:	strheq	r3, [r1], -r8
   12fbc:	andeq	r3, r1, r8, lsl r1
   12fc0:	strheq	r3, [r1], -r8
   12fc4:	ldrdeq	r3, [r1], -r8
   12fc8:	mov	r3, #0
   12fcc:	str	r3, [sp, #44]	; 0x2c
   12fd0:	mov	r4, #9
   12fd4:	mov	r3, #116	; 0x74
   12fd8:	b	12c5c <__assert_fail@plt+0x1ab4>
   12fdc:	mov	r3, #0
   12fe0:	str	r3, [sp, #44]	; 0x2c
   12fe4:	mov	r4, #11
   12fe8:	mov	r3, #118	; 0x76
   12fec:	b	12c74 <__assert_fail@plt+0x1acc>
   12ff0:	mov	r3, #0
   12ff4:	str	r3, [sp, #44]	; 0x2c
   12ff8:	cmp	sl, #2
   12ffc:	beq	13020 <__assert_fail@plt+0x1e78>
   13000:	ldr	r3, [sp, #28]
   13004:	ldr	r2, [sp, #32]
   13008:	and	r3, r3, r2
   1300c:	tst	r7, r3
   13010:	bne	13694 <__assert_fail@plt+0x24ec>
   13014:	mov	r4, #92	; 0x5c
   13018:	mov	r3, r4
   1301c:	b	12c74 <__assert_fail@plt+0x1acc>
   13020:	ldr	r3, [sp, #32]
   13024:	cmp	r3, #0
   13028:	bne	1381c <__assert_fail@plt+0x2674>
   1302c:	mov	r5, r3
   13030:	mov	r4, #92	; 0x5c
   13034:	eor	r3, r3, #1
   13038:	ldr	r2, [sp, #36]	; 0x24
   1303c:	and	r3, r3, r2
   13040:	tst	r3, #255	; 0xff
   13044:	beq	12d4c <__assert_fail@plt+0x1ba4>
   13048:	cmp	r9, fp
   1304c:	movhi	r3, #39	; 0x27
   13050:	strbhi	r3, [r8, fp]
   13054:	add	r3, fp, #1
   13058:	cmp	r9, r3
   1305c:	movhi	r2, #39	; 0x27
   13060:	strbhi	r2, [r8, r3]
   13064:	add	fp, fp, #2
   13068:	mov	r3, #0
   1306c:	str	r3, [sp, #36]	; 0x24
   13070:	b	12d4c <__assert_fail@plt+0x1ba4>
   13074:	mov	r3, #110	; 0x6e
   13078:	b	12c5c <__assert_fail@plt+0x1ab4>
   1307c:	mov	r3, #110	; 0x6e
   13080:	b	12c5c <__assert_fail@plt+0x1ab4>
   13084:	mov	r3, #0
   13088:	str	r3, [sp, #44]	; 0x2c
   1308c:	mov	r3, #110	; 0x6e
   13090:	b	12c5c <__assert_fail@plt+0x1ab4>
   13094:	mov	r8, r9
   13098:	mov	r7, #2
   1309c:	b	1383c <__assert_fail@plt+0x2694>
   130a0:	mov	r3, #97	; 0x61
   130a4:	b	12c74 <__assert_fail@plt+0x1acc>
   130a8:	mov	r3, #97	; 0x61
   130ac:	b	12c74 <__assert_fail@plt+0x1acc>
   130b0:	mov	r3, #0
   130b4:	str	r3, [sp, #44]	; 0x2c
   130b8:	ldr	r3, [sp, #24]
   130bc:	cmn	r3, #1
   130c0:	beq	130ec <__assert_fail@plt+0x1f44>
   130c4:	ldr	r3, [sp, #24]
   130c8:	subs	r3, r3, #1
   130cc:	movne	r3, #1
   130d0:	cmp	r3, #0
   130d4:	bne	13654 <__assert_fail@plt+0x24ac>
   130d8:	cmp	r6, #0
   130dc:	beq	1311c <__assert_fail@plt+0x1f74>
   130e0:	mov	r5, #0
   130e4:	mov	r3, r5
   130e8:	b	12c88 <__assert_fail@plt+0x1ae0>
   130ec:	ldr	r3, [sp, #48]	; 0x30
   130f0:	ldrb	r3, [r3, #1]
   130f4:	adds	r3, r3, #0
   130f8:	movne	r3, #1
   130fc:	b	130d0 <__assert_fail@plt+0x1f28>
   13100:	mov	r3, #0
   13104:	str	r3, [sp, #44]	; 0x2c
   13108:	b	130d8 <__assert_fail@plt+0x1f30>
   1310c:	mov	r3, #0
   13110:	str	r3, [sp, #44]	; 0x2c
   13114:	b	1311c <__assert_fail@plt+0x1f74>
   13118:	ldr	r5, [sp, #44]	; 0x2c
   1311c:	ldr	r3, [sp, #32]
   13120:	cmp	sl, #2
   13124:	movne	r3, #0
   13128:	andeq	r3, r3, #1
   1312c:	cmp	r3, #0
   13130:	beq	12c88 <__assert_fail@plt+0x1ae0>
   13134:	mov	r8, r9
   13138:	mov	r7, #2
   1313c:	b	1383c <__assert_fail@plt+0x2694>
   13140:	ldr	r5, [sp, #32]
   13144:	b	1311c <__assert_fail@plt+0x1f74>
   13148:	mov	r3, #0
   1314c:	str	r3, [sp, #44]	; 0x2c
   13150:	mov	r5, r3
   13154:	b	1311c <__assert_fail@plt+0x1f74>
   13158:	mov	r3, #0
   1315c:	str	r3, [sp, #44]	; 0x2c
   13160:	cmp	sl, #2
   13164:	strne	r5, [sp, #68]	; 0x44
   13168:	movne	r3, #0
   1316c:	movne	r4, #39	; 0x27
   13170:	bne	12c88 <__assert_fail@plt+0x1ae0>
   13174:	ldr	r3, [sp, #32]
   13178:	cmp	r3, #0
   1317c:	bne	13828 <__assert_fail@plt+0x2680>
   13180:	ldr	r3, [sp, #72]	; 0x48
   13184:	clz	r3, r3
   13188:	lsr	r3, r3, #5
   1318c:	cmp	r9, #0
   13190:	moveq	r3, #0
   13194:	cmp	r3, #0
   13198:	movne	r3, #0
   1319c:	bne	131c4 <__assert_fail@plt+0x201c>
   131a0:	cmp	r9, fp
   131a4:	movhi	r3, #39	; 0x27
   131a8:	strbhi	r3, [r8, fp]
   131ac:	add	r3, fp, #1
   131b0:	cmp	r9, r3
   131b4:	movhi	r2, #92	; 0x5c
   131b8:	strbhi	r2, [r8, r3]
   131bc:	mov	r3, r9
   131c0:	ldr	r9, [sp, #72]	; 0x48
   131c4:	add	r2, fp, #2
   131c8:	cmp	r2, r3
   131cc:	movcc	r1, #39	; 0x27
   131d0:	strbcc	r1, [r8, r2]
   131d4:	add	fp, fp, #3
   131d8:	str	r5, [sp, #68]	; 0x44
   131dc:	ldr	r2, [sp, #32]
   131e0:	str	r2, [sp, #36]	; 0x24
   131e4:	str	r9, [sp, #72]	; 0x48
   131e8:	mov	r9, r3
   131ec:	mov	r4, #39	; 0x27
   131f0:	mov	r3, #0
   131f4:	b	12cd4 <__assert_fail@plt+0x1b2c>
   131f8:	mov	r3, #0
   131fc:	str	r3, [sp, #44]	; 0x2c
   13200:	ldr	r7, [sp, #76]	; 0x4c
   13204:	cmp	r7, #1
   13208:	bne	13240 <__assert_fail@plt+0x2098>
   1320c:	bl	11064 <__ctype_b_loc@plt>
   13210:	ldr	r2, [r0]
   13214:	lsl	r3, r4, #1
   13218:	ldrh	r5, [r2, r3]
   1321c:	ubfx	r5, r5, #14, #1
   13220:	mov	ip, r7
   13224:	eor	r3, r5, #1
   13228:	ldr	r2, [sp, #28]
   1322c:	and	r3, r3, r2
   13230:	ands	r3, r3, #255	; 0xff
   13234:	beq	12c88 <__assert_fail@plt+0x1ae0>
   13238:	mov	r5, #0
   1323c:	b	1349c <__assert_fail@plt+0x22f4>
   13240:	mov	r2, #0
   13244:	mov	r3, #0
   13248:	strd	r2, [sp, #104]	; 0x68
   1324c:	ldr	r3, [sp, #24]
   13250:	cmn	r3, #1
   13254:	beq	13278 <__assert_fail@plt+0x20d0>
   13258:	mov	r3, #0
   1325c:	str	r4, [sp, #88]	; 0x58
   13260:	str	fp, [sp, #92]	; 0x5c
   13264:	str	r8, [sp, #56]	; 0x38
   13268:	mov	r8, r3
   1326c:	str	r9, [sp, #84]	; 0x54
   13270:	ldr	r9, [sp, #48]	; 0x30
   13274:	b	133c4 <__assert_fail@plt+0x221c>
   13278:	ldr	r0, [sp, #48]	; 0x30
   1327c:	bl	11088 <strlen@plt>
   13280:	str	r0, [sp, #24]
   13284:	b	13258 <__assert_fail@plt+0x20b0>
   13288:	mov	r1, fp
   1328c:	ldr	r4, [sp, #88]	; 0x58
   13290:	mov	r2, r8
   13294:	mov	ip, r8
   13298:	ldr	fp, [sp, #92]	; 0x5c
   1329c:	ldr	r8, [sp, #56]	; 0x38
   132a0:	ldr	r9, [sp, #84]	; 0x54
   132a4:	ldr	r0, [sp, #24]
   132a8:	cmp	r7, r0
   132ac:	bcs	13464 <__assert_fail@plt+0x22bc>
   132b0:	ldrb	r3, [r1]
   132b4:	cmp	r3, #0
   132b8:	beq	1346c <__assert_fail@plt+0x22c4>
   132bc:	mov	r3, r1
   132c0:	add	r2, r2, #1
   132c4:	add	r1, r6, r2
   132c8:	cmp	r0, r1
   132cc:	bls	13474 <__assert_fail@plt+0x22cc>
   132d0:	ldrb	r1, [r3, #1]!
   132d4:	cmp	r1, #0
   132d8:	bne	132c0 <__assert_fail@plt+0x2118>
   132dc:	mov	ip, r2
   132e0:	mov	r5, #0
   132e4:	b	13494 <__assert_fail@plt+0x22ec>
   132e8:	ldr	r3, [sp, #56]	; 0x38
   132ec:	str	r3, [sp, #64]	; 0x40
   132f0:	ldr	r8, [sp, #84]	; 0x54
   132f4:	mov	r7, #2
   132f8:	b	1383c <__assert_fail@plt+0x2694>
   132fc:	cmp	r2, r7
   13300:	beq	133a0 <__assert_fail@plt+0x21f8>
   13304:	ldrb	r3, [r2], #1
   13308:	sub	r3, r3, #91	; 0x5b
   1330c:	cmp	r3, #33	; 0x21
   13310:	ldrls	pc, [pc, r3, lsl #2]
   13314:	b	132fc <__assert_fail@plt+0x2154>
   13318:	andeq	r3, r1, r8, ror #5
   1331c:	andeq	r3, r1, r8, ror #5
   13320:	strdeq	r3, [r1], -ip
   13324:	andeq	r3, r1, r8, ror #5
   13328:	strdeq	r3, [r1], -ip
   1332c:	andeq	r3, r1, r8, ror #5
   13330:	strdeq	r3, [r1], -ip
   13334:	strdeq	r3, [r1], -ip
   13338:	strdeq	r3, [r1], -ip
   1333c:	strdeq	r3, [r1], -ip
   13340:	strdeq	r3, [r1], -ip
   13344:	strdeq	r3, [r1], -ip
   13348:	strdeq	r3, [r1], -ip
   1334c:	strdeq	r3, [r1], -ip
   13350:	strdeq	r3, [r1], -ip
   13354:	strdeq	r3, [r1], -ip
   13358:	strdeq	r3, [r1], -ip
   1335c:	strdeq	r3, [r1], -ip
   13360:	strdeq	r3, [r1], -ip
   13364:	strdeq	r3, [r1], -ip
   13368:	strdeq	r3, [r1], -ip
   1336c:	strdeq	r3, [r1], -ip
   13370:	strdeq	r3, [r1], -ip
   13374:	strdeq	r3, [r1], -ip
   13378:	strdeq	r3, [r1], -ip
   1337c:	strdeq	r3, [r1], -ip
   13380:	strdeq	r3, [r1], -ip
   13384:	strdeq	r3, [r1], -ip
   13388:	strdeq	r3, [r1], -ip
   1338c:	strdeq	r3, [r1], -ip
   13390:	strdeq	r3, [r1], -ip
   13394:	strdeq	r3, [r1], -ip
   13398:	strdeq	r3, [r1], -ip
   1339c:	andeq	r3, r1, r8, ror #5
   133a0:	ldr	r0, [sp, #100]	; 0x64
   133a4:	bl	10fa4 <iswprint@plt>
   133a8:	cmp	r0, #0
   133ac:	moveq	r5, #0
   133b0:	add	r8, r8, r4
   133b4:	add	r0, sp, #104	; 0x68
   133b8:	bl	10f50 <mbsinit@plt>
   133bc:	cmp	r0, #0
   133c0:	bne	13430 <__assert_fail@plt+0x2288>
   133c4:	add	r7, r6, r8
   133c8:	add	fp, r9, r7
   133cc:	add	r3, sp, #104	; 0x68
   133d0:	ldr	r2, [sp, #24]
   133d4:	sub	r2, r2, r7
   133d8:	mov	r1, fp
   133dc:	add	r0, sp, #100	; 0x64
   133e0:	bl	163b0 <__assert_fail@plt+0x5208>
   133e4:	subs	r4, r0, #0
   133e8:	beq	13480 <__assert_fail@plt+0x22d8>
   133ec:	cmn	r4, #1
   133f0:	beq	13448 <__assert_fail@plt+0x22a0>
   133f4:	cmn	r4, #2
   133f8:	beq	13288 <__assert_fail@plt+0x20e0>
   133fc:	ldr	r3, [sp, #32]
   13400:	cmp	sl, #2
   13404:	movne	r3, #0
   13408:	andeq	r3, r3, #1
   1340c:	cmp	r3, #0
   13410:	beq	133a0 <__assert_fail@plt+0x21f8>
   13414:	cmp	r4, #1
   13418:	bls	133a0 <__assert_fail@plt+0x21f8>
   1341c:	add	r2, r7, #1
   13420:	add	r2, r9, r2
   13424:	add	r3, r9, r4
   13428:	add	r7, r3, r7
   1342c:	b	13304 <__assert_fail@plt+0x215c>
   13430:	ldr	r4, [sp, #88]	; 0x58
   13434:	mov	ip, r8
   13438:	ldr	fp, [sp, #92]	; 0x5c
   1343c:	ldr	r8, [sp, #56]	; 0x38
   13440:	ldr	r9, [sp, #84]	; 0x54
   13444:	b	13494 <__assert_fail@plt+0x22ec>
   13448:	ldr	r4, [sp, #88]	; 0x58
   1344c:	mov	ip, r8
   13450:	ldr	fp, [sp, #92]	; 0x5c
   13454:	ldr	r8, [sp, #56]	; 0x38
   13458:	ldr	r9, [sp, #84]	; 0x54
   1345c:	mov	r5, #0
   13460:	b	13494 <__assert_fail@plt+0x22ec>
   13464:	mov	r5, #0
   13468:	b	13494 <__assert_fail@plt+0x22ec>
   1346c:	mov	r5, #0
   13470:	b	13494 <__assert_fail@plt+0x22ec>
   13474:	mov	ip, r2
   13478:	mov	r5, #0
   1347c:	b	13494 <__assert_fail@plt+0x22ec>
   13480:	ldr	r4, [sp, #88]	; 0x58
   13484:	mov	ip, r8
   13488:	ldr	fp, [sp, #92]	; 0x5c
   1348c:	ldr	r8, [sp, #56]	; 0x38
   13490:	ldr	r9, [sp, #84]	; 0x54
   13494:	cmp	ip, #1
   13498:	bls	13224 <__assert_fail@plt+0x207c>
   1349c:	add	lr, r6, ip
   134a0:	ldr	r3, [sp, #48]	; 0x30
   134a4:	add	r1, r3, r6
   134a8:	mov	r3, #0
   134ac:	eor	r0, r5, #1
   134b0:	ldr	r2, [sp, #28]
   134b4:	and	r0, r0, r2
   134b8:	uxtb	r0, r0
   134bc:	str	r0, [sp, #56]	; 0x38
   134c0:	mov	r7, #92	; 0x5c
   134c4:	ldr	ip, [sp, #36]	; 0x24
   134c8:	str	r5, [sp, #84]	; 0x54
   134cc:	ldr	r2, [sp, #44]	; 0x2c
   134d0:	b	13540 <__assert_fail@plt+0x2398>
   134d4:	cmp	r2, #0
   134d8:	beq	134e8 <__assert_fail@plt+0x2340>
   134dc:	cmp	r9, fp
   134e0:	strbhi	r7, [r8, fp]
   134e4:	add	fp, fp, #1
   134e8:	add	r5, r6, #1
   134ec:	cmp	r5, lr
   134f0:	bcs	135fc <__assert_fail@plt+0x2454>
   134f4:	eor	r2, r3, #1
   134f8:	and	r2, r2, ip
   134fc:	ands	r2, r2, #255	; 0xff
   13500:	beq	13618 <__assert_fail@plt+0x2470>
   13504:	cmp	r9, fp
   13508:	movhi	r2, #39	; 0x27
   1350c:	strbhi	r2, [r8, fp]
   13510:	add	r2, fp, #1
   13514:	cmp	r9, r2
   13518:	movhi	ip, #39	; 0x27
   1351c:	strbhi	ip, [r8, r2]
   13520:	add	fp, fp, #2
   13524:	ldr	ip, [sp, #56]	; 0x38
   13528:	mov	r2, ip
   1352c:	mov	r6, r5
   13530:	cmp	r9, fp
   13534:	strbhi	r4, [r8, fp]
   13538:	add	fp, fp, #1
   1353c:	ldrb	r4, [r1, #1]!
   13540:	cmp	r0, #0
   13544:	beq	134d4 <__assert_fail@plt+0x232c>
   13548:	ldr	r3, [sp, #32]
   1354c:	cmp	r3, #0
   13550:	bne	137e4 <__assert_fail@plt+0x263c>
   13554:	eor	r3, ip, #1
   13558:	cmp	sl, #2
   1355c:	movne	r3, #0
   13560:	andeq	r3, r3, #1
   13564:	cmp	r3, #0
   13568:	beq	135a0 <__assert_fail@plt+0x23f8>
   1356c:	cmp	r9, fp
   13570:	movhi	ip, #39	; 0x27
   13574:	strbhi	ip, [r8, fp]
   13578:	add	ip, fp, #1
   1357c:	cmp	r9, ip
   13580:	movhi	r5, #36	; 0x24
   13584:	strbhi	r5, [r8, ip]
   13588:	add	ip, fp, #2
   1358c:	cmp	r9, ip
   13590:	movhi	r5, #39	; 0x27
   13594:	strbhi	r5, [r8, ip]
   13598:	add	fp, fp, #3
   1359c:	mov	ip, r3
   135a0:	cmp	r9, fp
   135a4:	strbhi	r7, [r8, fp]
   135a8:	add	r3, fp, #1
   135ac:	cmp	r9, r3
   135b0:	bls	135c0 <__assert_fail@plt+0x2418>
   135b4:	lsr	r5, r4, #6
   135b8:	add	r5, r5, #48	; 0x30
   135bc:	strb	r5, [r8, r3]
   135c0:	add	r3, fp, #2
   135c4:	cmp	r9, r3
   135c8:	bls	135d8 <__assert_fail@plt+0x2430>
   135cc:	ubfx	r5, r4, #3, #3
   135d0:	add	r5, r5, #48	; 0x30
   135d4:	strb	r5, [r8, r3]
   135d8:	add	fp, fp, #3
   135dc:	and	r4, r4, #7
   135e0:	add	r4, r4, #48	; 0x30
   135e4:	add	r5, r6, #1
   135e8:	cmp	r5, lr
   135ec:	bcs	13608 <__assert_fail@plt+0x2460>
   135f0:	ldr	r3, [sp, #56]	; 0x38
   135f4:	mov	r6, r5
   135f8:	b	13530 <__assert_fail@plt+0x2388>
   135fc:	str	ip, [sp, #36]	; 0x24
   13600:	ldr	r5, [sp, #84]	; 0x54
   13604:	b	13034 <__assert_fail@plt+0x1e8c>
   13608:	str	ip, [sp, #36]	; 0x24
   1360c:	ldr	r5, [sp, #84]	; 0x54
   13610:	mov	r3, r0
   13614:	b	13034 <__assert_fail@plt+0x1e8c>
   13618:	mov	r6, r5
   1361c:	b	13530 <__assert_fail@plt+0x2388>
   13620:	ldr	r3, [sp, #44]	; 0x2c
   13624:	b	12c88 <__assert_fail@plt+0x1ae0>
   13628:	mov	r5, #0
   1362c:	mov	r3, r5
   13630:	mov	r4, #63	; 0x3f
   13634:	b	12c88 <__assert_fail@plt+0x1ae0>
   13638:	mov	r5, #0
   1363c:	mov	r3, r5
   13640:	mov	r4, #63	; 0x3f
   13644:	b	12c88 <__assert_fail@plt+0x1ae0>
   13648:	mov	r5, #0
   1364c:	mov	r3, r5
   13650:	b	12c88 <__assert_fail@plt+0x1ae0>
   13654:	mov	r5, #0
   13658:	mov	r3, r5
   1365c:	b	12c88 <__assert_fail@plt+0x1ae0>
   13660:	ldr	r5, [sp, #44]	; 0x2c
   13664:	ldr	r3, [sp, #32]
   13668:	b	12c88 <__assert_fail@plt+0x1ae0>
   1366c:	ldr	r5, [sp, #44]	; 0x2c
   13670:	mov	r3, #0
   13674:	str	r3, [sp, #44]	; 0x2c
   13678:	b	12c88 <__assert_fail@plt+0x1ae0>
   1367c:	mov	r4, r3
   13680:	mov	r5, #0
   13684:	b	12ce0 <__assert_fail@plt+0x1b38>
   13688:	mov	r5, #0
   1368c:	mov	r4, #97	; 0x61
   13690:	b	12ce0 <__assert_fail@plt+0x1b38>
   13694:	mov	r5, #0
   13698:	mov	r3, r5
   1369c:	mov	r4, #92	; 0x5c
   136a0:	b	13034 <__assert_fail@plt+0x1e8c>
   136a4:	ldr	r3, [sp, #48]	; 0x30
   136a8:	ldrb	r5, [r3, r6]
   136ac:	adds	r5, r5, #0
   136b0:	movne	r5, #1
   136b4:	b	12d84 <__assert_fail@plt+0x1bdc>
   136b8:	cmp	sl, #2
   136bc:	movne	r3, #0
   136c0:	moveq	r3, #1
   136c4:	ldr	r1, [sp, #32]
   136c8:	cmp	fp, #0
   136cc:	andeq	r2, r3, r1
   136d0:	movne	r2, #0
   136d4:	cmp	r2, #0
   136d8:	bne	137f8 <__assert_fail@plt+0x2650>
   136dc:	eor	r2, r1, #1
   136e0:	uxtb	r2, r2
   136e4:	and	r3, r3, r2
   136e8:	ldr	r1, [sp, #68]	; 0x44
   136ec:	ands	r3, r1, r3
   136f0:	beq	13784 <__assert_fail@plt+0x25dc>
   136f4:	ldr	r2, [sp, #40]	; 0x28
   136f8:	cmp	r2, #0
   136fc:	bne	13734 <__assert_fail@plt+0x258c>
   13700:	ldr	r2, [sp, #72]	; 0x48
   13704:	adds	r2, r2, #0
   13708:	movne	r2, #1
   1370c:	cmp	r9, #0
   13710:	movne	r2, #0
   13714:	str	r2, [sp, #68]	; 0x44
   13718:	mov	sl, #2
   1371c:	ldr	r1, [sp, #40]	; 0x28
   13720:	str	r1, [sp, #32]
   13724:	cmp	r2, #0
   13728:	beq	13778 <__assert_fail@plt+0x25d0>
   1372c:	ldr	r9, [sp, #72]	; 0x48
   13730:	b	1248c <__assert_fail@plt+0x12e4>
   13734:	ldr	r3, [sp, #168]	; 0xa8
   13738:	str	r3, [sp, #16]
   1373c:	ldr	r3, [sp, #164]	; 0xa4
   13740:	str	r3, [sp, #12]
   13744:	ldr	r3, [sp, #160]	; 0xa0
   13748:	str	r3, [sp, #8]
   1374c:	ldr	r3, [sp, #156]	; 0x9c
   13750:	str	r3, [sp, #4]
   13754:	mov	r3, #5
   13758:	str	r3, [sp]
   1375c:	ldr	r3, [sp, #24]
   13760:	ldr	r2, [sp, #48]	; 0x30
   13764:	ldr	r1, [sp, #72]	; 0x48
   13768:	ldr	r0, [sp, #64]	; 0x40
   1376c:	bl	12414 <__assert_fail@plt+0x126c>
   13770:	mov	fp, r0
   13774:	b	13894 <__assert_fail@plt+0x26ec>
   13778:	mov	r8, r9
   1377c:	mov	r2, r3
   13780:	b	13788 <__assert_fail@plt+0x25e0>
   13784:	mov	r8, r9
   13788:	ldr	r3, [sp, #60]	; 0x3c
   1378c:	cmp	r3, #0
   13790:	moveq	r2, #0
   13794:	andne	r2, r2, #1
   13798:	cmp	r2, #0
   1379c:	beq	137cc <__assert_fail@plt+0x2624>
   137a0:	mov	r2, r3
   137a4:	ldrb	r3, [r3]
   137a8:	cmp	r3, #0
   137ac:	beq	137cc <__assert_fail@plt+0x2624>
   137b0:	ldr	r1, [sp, #64]	; 0x40
   137b4:	cmp	r8, fp
   137b8:	strbhi	r3, [r1, fp]
   137bc:	add	fp, fp, #1
   137c0:	ldrb	r3, [r2, #1]!
   137c4:	cmp	r3, #0
   137c8:	bne	137b4 <__assert_fail@plt+0x260c>
   137cc:	cmp	r8, fp
   137d0:	bls	13894 <__assert_fail@plt+0x26ec>
   137d4:	mov	r3, #0
   137d8:	ldr	r2, [sp, #64]	; 0x40
   137dc:	strb	r3, [r2, fp]
   137e0:	b	13894 <__assert_fail@plt+0x26ec>
   137e4:	mov	r8, r9
   137e8:	mov	r7, sl
   137ec:	ldr	r3, [sp, #32]
   137f0:	str	r3, [sp, #28]
   137f4:	b	1383c <__assert_fail@plt+0x2694>
   137f8:	mov	r8, r9
   137fc:	mov	r7, #2
   13800:	b	1383c <__assert_fail@plt+0x2694>
   13804:	mov	r8, r9
   13808:	mov	r7, sl
   1380c:	b	1383c <__assert_fail@plt+0x2694>
   13810:	mov	r8, r9
   13814:	mov	r7, sl
   13818:	b	1383c <__assert_fail@plt+0x2694>
   1381c:	mov	r8, r9
   13820:	mov	r7, sl
   13824:	b	1383c <__assert_fail@plt+0x2694>
   13828:	mov	r8, r9
   1382c:	mov	r7, sl
   13830:	b	1383c <__assert_fail@plt+0x2694>
   13834:	mov	r8, r9
   13838:	mov	r7, sl
   1383c:	ldr	r3, [sp, #28]
   13840:	cmp	r7, #2
   13844:	movne	r3, #0
   13848:	andeq	r3, r3, #1
   1384c:	cmp	r3, #0
   13850:	movne	r7, #4
   13854:	ldr	r3, [sp, #168]	; 0xa8
   13858:	str	r3, [sp, #16]
   1385c:	ldr	r3, [sp, #164]	; 0xa4
   13860:	str	r3, [sp, #12]
   13864:	mov	r3, #0
   13868:	str	r3, [sp, #8]
   1386c:	ldr	r3, [sp, #156]	; 0x9c
   13870:	bic	r3, r3, #2
   13874:	str	r3, [sp, #4]
   13878:	str	r7, [sp]
   1387c:	ldr	r3, [sp, #24]
   13880:	ldr	r2, [sp, #48]	; 0x30
   13884:	mov	r1, r8
   13888:	ldr	r0, [sp, #64]	; 0x40
   1388c:	bl	12414 <__assert_fail@plt+0x126c>
   13890:	mov	fp, r0
   13894:	mov	r0, fp
   13898:	add	sp, sp, #116	; 0x74
   1389c:	ldrd	r4, [sp]
   138a0:	ldrd	r6, [sp, #8]
   138a4:	ldrd	r8, [sp, #16]
   138a8:	ldrd	sl, [sp, #24]
   138ac:	add	sp, sp, #32
   138b0:	pop	{pc}		; (ldr pc, [sp], #4)
   138b4:	mov	r8, r9
   138b8:	mov	r7, sl
   138bc:	b	13854 <__assert_fail@plt+0x26ac>
   138c0:	add	fp, fp, #4
   138c4:	str	r3, [sp, #36]	; 0x24
   138c8:	mov	r5, #0
   138cc:	mov	r4, #48	; 0x30
   138d0:	b	12c88 <__assert_fail@plt+0x1ae0>
   138d4:	mov	r3, #1
   138d8:	str	r3, [sp, #32]
   138dc:	str	r3, [sp, #28]
   138e0:	str	r3, [sp, #52]	; 0x34
   138e4:	movw	r3, #28856	; 0x70b8
   138e8:	movt	r3, #1
   138ec:	str	r3, [sp, #60]	; 0x3c
   138f0:	mov	fp, #0
   138f4:	mov	sl, #5
   138f8:	b	124ec <__assert_fail@plt+0x1344>
   138fc:	ldr	r3, [sp, #48]	; 0x30
   13900:	ldrb	r4, [r3, r6]
   13904:	cmp	r4, #126	; 0x7e
   13908:	ldrls	pc, [pc, r4, lsl #2]
   1390c:	b	131f8 <__assert_fail@plt+0x2050>
   13910:	andeq	r2, r1, r0, lsl #19
   13914:	strdeq	r3, [r1], -r8
   13918:	strdeq	r3, [r1], -r8
   1391c:	strdeq	r3, [r1], -r8
   13920:	strdeq	r3, [r1], -r8
   13924:	strdeq	r3, [r1], -r8
   13928:	strdeq	r3, [r1], -r8
   1392c:	andeq	r3, r1, r8, lsl #13
   13930:	andeq	r2, r1, r4, lsr #24
   13934:	andeq	r2, r1, r8, asr #31
   13938:	andeq	r3, r1, r4, lsl #1
   1393c:	ldrdeq	r2, [r1], -ip
   13940:	andeq	r2, r1, r8, lsr ip
   13944:	andeq	r2, r1, ip, asr #24
   13948:	strdeq	r3, [r1], -r8
   1394c:	strdeq	r3, [r1], -r8
   13950:	strdeq	r3, [r1], -r8
   13954:	strdeq	r3, [r1], -r8
   13958:	strdeq	r3, [r1], -r8
   1395c:	strdeq	r3, [r1], -r8
   13960:	strdeq	r3, [r1], -r8
   13964:	strdeq	r3, [r1], -r8
   13968:	strdeq	r3, [r1], -r8
   1396c:	strdeq	r3, [r1], -r8
   13970:	strdeq	r3, [r1], -r8
   13974:	strdeq	r3, [r1], -r8
   13978:	strdeq	r3, [r1], -r8
   1397c:	strdeq	r3, [r1], -r8
   13980:	strdeq	r3, [r1], -r8
   13984:	strdeq	r3, [r1], -r8
   13988:	strdeq	r3, [r1], -r8
   1398c:	strdeq	r3, [r1], -r8
   13990:	andeq	r3, r1, ip, lsl #2
   13994:	andeq	r3, r1, r8, asr #2
   13998:	andeq	r3, r1, r8, asr #2
   1399c:	andeq	r3, r1, r0, lsl #2
   139a0:	andeq	r3, r1, r8, asr #2
   139a4:	andeq	r3, r1, ip, ror #12
   139a8:	andeq	r3, r1, r8, asr #2
   139ac:	andeq	r3, r1, r8, asr r1
   139b0:	andeq	r3, r1, r8, asr #2
   139b4:	andeq	r3, r1, r8, asr #2
   139b8:	andeq	r3, r1, r8, asr #2
   139bc:	andeq	r3, r1, ip, ror #12
   139c0:	andeq	r3, r1, ip, ror #12
   139c4:	andeq	r3, r1, ip, ror #12
   139c8:	andeq	r3, r1, ip, ror #12
   139cc:	andeq	r3, r1, ip, ror #12
   139d0:	andeq	r3, r1, ip, ror #12
   139d4:	andeq	r3, r1, ip, ror #12
   139d8:	andeq	r3, r1, ip, ror #12
   139dc:	andeq	r3, r1, ip, ror #12
   139e0:	andeq	r3, r1, ip, ror #12
   139e4:	andeq	r3, r1, ip, ror #12
   139e8:	andeq	r3, r1, ip, ror #12
   139ec:	andeq	r3, r1, ip, ror #12
   139f0:	andeq	r3, r1, ip, ror #12
   139f4:	andeq	r3, r1, ip, ror #12
   139f8:	andeq	r3, r1, ip, ror #12
   139fc:	andeq	r3, r1, r8, asr #2
   13a00:	andeq	r3, r1, r8, asr #2
   13a04:	andeq	r3, r1, r8, asr #2
   13a08:	andeq	r3, r1, r8, asr #2
   13a0c:			; <UNDEFINED> instruction: 0x00012ab8
   13a10:	strdeq	r3, [r1], -r8
   13a14:	andeq	r3, r1, ip, ror #12
   13a18:	andeq	r3, r1, ip, ror #12
   13a1c:	andeq	r3, r1, ip, ror #12
   13a20:	andeq	r3, r1, ip, ror #12
   13a24:	andeq	r3, r1, ip, ror #12
   13a28:	andeq	r3, r1, ip, ror #12
   13a2c:	andeq	r3, r1, ip, ror #12
   13a30:	andeq	r3, r1, ip, ror #12
   13a34:	andeq	r3, r1, ip, ror #12
   13a38:	andeq	r3, r1, ip, ror #12
   13a3c:	andeq	r3, r1, ip, ror #12
   13a40:	andeq	r3, r1, ip, ror #12
   13a44:	andeq	r3, r1, ip, ror #12
   13a48:	andeq	r3, r1, ip, ror #12
   13a4c:	andeq	r3, r1, ip, ror #12
   13a50:	andeq	r3, r1, ip, ror #12
   13a54:	andeq	r3, r1, ip, ror #12
   13a58:	andeq	r3, r1, ip, ror #12
   13a5c:	andeq	r3, r1, ip, ror #12
   13a60:	andeq	r3, r1, ip, ror #12
   13a64:	andeq	r3, r1, ip, ror #12
   13a68:	andeq	r3, r1, ip, ror #12
   13a6c:	andeq	r3, r1, ip, ror #12
   13a70:	andeq	r3, r1, ip, ror #12
   13a74:	andeq	r3, r1, ip, ror #12
   13a78:	andeq	r3, r1, ip, ror #12
   13a7c:	andeq	r3, r1, r8, asr #2
   13a80:	strdeq	r2, [r1], -r0
   13a84:	andeq	r3, r1, ip, ror #12
   13a88:	andeq	r3, r1, r8, asr #2
   13a8c:	andeq	r3, r1, ip, ror #12
   13a90:	andeq	r3, r1, r8, asr #2
   13a94:	andeq	r3, r1, ip, ror #12
   13a98:	andeq	r3, r1, ip, ror #12
   13a9c:	andeq	r3, r1, ip, ror #12
   13aa0:	andeq	r3, r1, ip, ror #12
   13aa4:	andeq	r3, r1, ip, ror #12
   13aa8:	andeq	r3, r1, ip, ror #12
   13aac:	andeq	r3, r1, ip, ror #12
   13ab0:	andeq	r3, r1, ip, ror #12
   13ab4:	andeq	r3, r1, ip, ror #12
   13ab8:	andeq	r3, r1, ip, ror #12
   13abc:	andeq	r3, r1, ip, ror #12
   13ac0:	andeq	r3, r1, ip, ror #12
   13ac4:	andeq	r3, r1, ip, ror #12
   13ac8:	andeq	r3, r1, ip, ror #12
   13acc:	andeq	r3, r1, ip, ror #12
   13ad0:	andeq	r3, r1, ip, ror #12
   13ad4:	andeq	r3, r1, ip, ror #12
   13ad8:	andeq	r3, r1, ip, ror #12
   13adc:	andeq	r3, r1, ip, ror #12
   13ae0:	andeq	r3, r1, ip, ror #12
   13ae4:	andeq	r3, r1, ip, ror #12
   13ae8:	andeq	r3, r1, ip, ror #12
   13aec:	andeq	r3, r1, ip, ror #12
   13af0:	andeq	r3, r1, ip, ror #12
   13af4:	andeq	r3, r1, ip, ror #12
   13af8:	andeq	r3, r1, ip, ror #12
   13afc:	strheq	r3, [r1], -r0
   13b00:	andeq	r3, r1, r8, asr #2
   13b04:	strheq	r3, [r1], -r0
   13b08:	andeq	r3, r1, r0, lsl #2
   13b0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13b10:	strd	r6, [sp, #8]
   13b14:	strd	r8, [sp, #16]
   13b18:	strd	sl, [sp, #24]
   13b1c:	str	lr, [sp, #32]
   13b20:	sub	sp, sp, #52	; 0x34
   13b24:	mov	r5, r0
   13b28:	str	r1, [sp, #24]
   13b2c:	str	r2, [sp, #28]
   13b30:	mov	r4, r3
   13b34:	bl	110a0 <__errno_location@plt>
   13b38:	str	r0, [sp, #32]
   13b3c:	ldr	r3, [r0]
   13b40:	str	r3, [sp, #36]	; 0x24
   13b44:	movw	r3, #33056	; 0x8120
   13b48:	movt	r3, #2
   13b4c:	ldr	r6, [r3]
   13b50:	cmn	r5, #-2147483647	; 0x80000001
   13b54:	movne	r3, #0
   13b58:	moveq	r3, #1
   13b5c:	orrs	r3, r3, r5, lsr #31
   13b60:	bne	13cc4 <__assert_fail@plt+0x2b1c>
   13b64:	movw	r3, #33056	; 0x8120
   13b68:	movt	r3, #2
   13b6c:	ldr	r2, [r3, #4]
   13b70:	cmp	r2, r5
   13b74:	bgt	13be4 <__assert_fail@plt+0x2a3c>
   13b78:	str	r2, [sp, #44]	; 0x2c
   13b7c:	add	r3, r3, #8
   13b80:	cmp	r6, r3
   13b84:	beq	13cc8 <__assert_fail@plt+0x2b20>
   13b88:	sub	r2, r5, r2
   13b8c:	mov	r3, #8
   13b90:	str	r3, [sp]
   13b94:	mvn	r3, #-2147483648	; 0x80000000
   13b98:	add	r2, r2, #1
   13b9c:	add	r1, sp, #44	; 0x2c
   13ba0:	mov	r0, r6
   13ba4:	bl	150b4 <__assert_fail@plt+0x3f0c>
   13ba8:	mov	r6, r0
   13bac:	movw	r3, #33056	; 0x8120
   13bb0:	movt	r3, #2
   13bb4:	str	r0, [r3]
   13bb8:	movw	r7, #33056	; 0x8120
   13bbc:	movt	r7, #2
   13bc0:	ldr	r0, [r7, #4]
   13bc4:	ldr	r2, [sp, #44]	; 0x2c
   13bc8:	sub	r2, r2, r0
   13bcc:	lsl	r2, r2, #3
   13bd0:	mov	r1, #0
   13bd4:	add	r0, r6, r0, lsl #3
   13bd8:	bl	110c4 <memset@plt>
   13bdc:	ldr	r3, [sp, #44]	; 0x2c
   13be0:	str	r3, [r7, #4]
   13be4:	add	fp, r6, r5, lsl #3
   13be8:	ldr	r8, [r6, r5, lsl #3]
   13bec:	ldr	r7, [fp, #4]
   13bf0:	ldr	r3, [r4, #4]
   13bf4:	orr	r9, r3, #1
   13bf8:	add	sl, r4, #8
   13bfc:	ldr	r3, [r4, #44]	; 0x2c
   13c00:	str	r3, [sp, #16]
   13c04:	ldr	r3, [r4, #40]	; 0x28
   13c08:	str	r3, [sp, #12]
   13c0c:	str	sl, [sp, #8]
   13c10:	str	r9, [sp, #4]
   13c14:	ldr	r3, [r4]
   13c18:	str	r3, [sp]
   13c1c:	ldr	r3, [sp, #28]
   13c20:	ldr	r2, [sp, #24]
   13c24:	mov	r1, r8
   13c28:	mov	r0, r7
   13c2c:	bl	12414 <__assert_fail@plt+0x126c>
   13c30:	cmp	r8, r0
   13c34:	bhi	13c98 <__assert_fail@plt+0x2af0>
   13c38:	add	r8, r0, #1
   13c3c:	str	r8, [r6, r5, lsl #3]
   13c40:	movw	r3, #33164	; 0x818c
   13c44:	movt	r3, #2
   13c48:	cmp	r7, r3
   13c4c:	beq	13c58 <__assert_fail@plt+0x2ab0>
   13c50:	mov	r0, r7
   13c54:	bl	12150 <__assert_fail@plt+0xfa8>
   13c58:	mov	r0, r8
   13c5c:	bl	14eb0 <__assert_fail@plt+0x3d08>
   13c60:	mov	r7, r0
   13c64:	str	r0, [fp, #4]
   13c68:	ldr	r3, [r4, #44]	; 0x2c
   13c6c:	str	r3, [sp, #16]
   13c70:	ldr	r3, [r4, #40]	; 0x28
   13c74:	str	r3, [sp, #12]
   13c78:	str	sl, [sp, #8]
   13c7c:	str	r9, [sp, #4]
   13c80:	ldr	r3, [r4]
   13c84:	str	r3, [sp]
   13c88:	ldr	r3, [sp, #28]
   13c8c:	ldr	r2, [sp, #24]
   13c90:	mov	r1, r8
   13c94:	bl	12414 <__assert_fail@plt+0x126c>
   13c98:	ldr	r3, [sp, #32]
   13c9c:	ldr	r2, [sp, #36]	; 0x24
   13ca0:	str	r2, [r3]
   13ca4:	mov	r0, r7
   13ca8:	add	sp, sp, #52	; 0x34
   13cac:	ldrd	r4, [sp]
   13cb0:	ldrd	r6, [sp, #8]
   13cb4:	ldrd	r8, [sp, #16]
   13cb8:	ldrd	sl, [sp, #24]
   13cbc:	add	sp, sp, #32
   13cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cc4:	bl	11184 <abort@plt>
   13cc8:	sub	r2, r5, r2
   13ccc:	mov	r3, #8
   13cd0:	str	r3, [sp]
   13cd4:	mvn	r3, #-2147483648	; 0x80000000
   13cd8:	add	r2, r2, #1
   13cdc:	add	r1, sp, #44	; 0x2c
   13ce0:	mov	r0, #0
   13ce4:	bl	150b4 <__assert_fail@plt+0x3f0c>
   13ce8:	mov	r6, r0
   13cec:	movw	r3, #33056	; 0x8120
   13cf0:	movt	r3, #2
   13cf4:	str	r0, [r3]
   13cf8:	ldrd	r2, [r3, #8]
   13cfc:	strd	r2, [r0]
   13d00:	b	13bb8 <__assert_fail@plt+0x2a10>
   13d04:	strd	r4, [sp, #-16]!
   13d08:	str	r6, [sp, #8]
   13d0c:	str	lr, [sp, #12]
   13d10:	mov	r4, r0
   13d14:	bl	110a0 <__errno_location@plt>
   13d18:	mov	r5, r0
   13d1c:	ldr	r6, [r0]
   13d20:	cmp	r4, #0
   13d24:	ldr	r3, [pc, #32]	; 13d4c <__assert_fail@plt+0x2ba4>
   13d28:	moveq	r4, r3
   13d2c:	mov	r1, #48	; 0x30
   13d30:	mov	r0, r4
   13d34:	bl	15224 <__assert_fail@plt+0x407c>
   13d38:	str	r6, [r5]
   13d3c:	ldrd	r4, [sp]
   13d40:	ldr	r6, [sp, #8]
   13d44:	add	sp, sp, #12
   13d48:	pop	{pc}		; (ldr pc, [sp], #4)
   13d4c:	andeq	r8, r2, ip, lsl #5
   13d50:	subs	r3, r0, #0
   13d54:	ldr	r2, [pc, #8]	; 13d64 <__assert_fail@plt+0x2bbc>
   13d58:	moveq	r3, r2
   13d5c:	ldr	r0, [r3]
   13d60:	bx	lr
   13d64:	andeq	r8, r2, ip, lsl #5
   13d68:	subs	r3, r0, #0
   13d6c:	ldr	r2, [pc, #8]	; 13d7c <__assert_fail@plt+0x2bd4>
   13d70:	moveq	r3, r2
   13d74:	str	r1, [r3]
   13d78:	bx	lr
   13d7c:	andeq	r8, r2, ip, lsl #5
   13d80:	push	{lr}		; (str lr, [sp, #-4]!)
   13d84:	subs	r3, r0, #0
   13d88:	ldr	r0, [pc, #44]	; 13dbc <__assert_fail@plt+0x2c14>
   13d8c:	moveq	r3, r0
   13d90:	add	r3, r3, #8
   13d94:	lsr	lr, r1, #5
   13d98:	and	r1, r1, #31
   13d9c:	ldr	ip, [r3, lr, lsl #2]
   13da0:	lsr	r0, ip, r1
   13da4:	eor	r2, r2, r0
   13da8:	and	r2, r2, #1
   13dac:	eor	r1, ip, r2, lsl r1
   13db0:	str	r1, [r3, lr, lsl #2]
   13db4:	and	r0, r0, #1
   13db8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dbc:	andeq	r8, r2, ip, lsl #5
   13dc0:	subs	r3, r0, #0
   13dc4:	ldr	r2, [pc, #12]	; 13dd8 <__assert_fail@plt+0x2c30>
   13dc8:	moveq	r3, r2
   13dcc:	ldr	r0, [r3, #4]
   13dd0:	str	r1, [r3, #4]
   13dd4:	bx	lr
   13dd8:	andeq	r8, r2, ip, lsl #5
   13ddc:	subs	r3, r0, #0
   13de0:	ldr	r0, [pc, #44]	; 13e14 <__assert_fail@plt+0x2c6c>
   13de4:	moveq	r3, r0
   13de8:	mov	r0, #10
   13dec:	str	r0, [r3]
   13df0:	cmp	r2, #0
   13df4:	cmpne	r1, #0
   13df8:	beq	13e08 <__assert_fail@plt+0x2c60>
   13dfc:	str	r1, [r3, #40]	; 0x28
   13e00:	str	r2, [r3, #44]	; 0x2c
   13e04:	bx	lr
   13e08:	str	r4, [sp, #-8]!
   13e0c:	str	lr, [sp, #4]
   13e10:	bl	11184 <abort@plt>
   13e14:	andeq	r8, r2, ip, lsl #5
   13e18:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13e1c:	strd	r6, [sp, #8]
   13e20:	strd	r8, [sp, #16]
   13e24:	str	sl, [sp, #24]
   13e28:	str	lr, [sp, #28]
   13e2c:	sub	sp, sp, #24
   13e30:	mov	r7, r0
   13e34:	mov	r8, r1
   13e38:	mov	r9, r2
   13e3c:	mov	sl, r3
   13e40:	ldr	r4, [sp, #56]	; 0x38
   13e44:	cmp	r4, #0
   13e48:	ldr	r3, [pc, #104]	; 13eb8 <__assert_fail@plt+0x2d10>
   13e4c:	moveq	r4, r3
   13e50:	bl	110a0 <__errno_location@plt>
   13e54:	mov	r5, r0
   13e58:	ldr	r6, [r0]
   13e5c:	ldr	r3, [r4, #44]	; 0x2c
   13e60:	str	r3, [sp, #16]
   13e64:	ldr	r3, [r4, #40]	; 0x28
   13e68:	str	r3, [sp, #12]
   13e6c:	add	r3, r4, #8
   13e70:	str	r3, [sp, #8]
   13e74:	ldr	r3, [r4, #4]
   13e78:	str	r3, [sp, #4]
   13e7c:	ldr	r3, [r4]
   13e80:	str	r3, [sp]
   13e84:	mov	r3, sl
   13e88:	mov	r2, r9
   13e8c:	mov	r1, r8
   13e90:	mov	r0, r7
   13e94:	bl	12414 <__assert_fail@plt+0x126c>
   13e98:	str	r6, [r5]
   13e9c:	add	sp, sp, #24
   13ea0:	ldrd	r4, [sp]
   13ea4:	ldrd	r6, [sp, #8]
   13ea8:	ldrd	r8, [sp, #16]
   13eac:	ldr	sl, [sp, #24]
   13eb0:	add	sp, sp, #28
   13eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb8:	andeq	r8, r2, ip, lsl #5
   13ebc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ec0:	strd	r6, [sp, #8]
   13ec4:	strd	r8, [sp, #16]
   13ec8:	strd	sl, [sp, #24]
   13ecc:	str	lr, [sp, #32]
   13ed0:	sub	sp, sp, #44	; 0x2c
   13ed4:	mov	r8, r0
   13ed8:	mov	sl, r1
   13edc:	mov	r6, r2
   13ee0:	subs	r4, r3, #0
   13ee4:	ldr	r3, [pc, #200]	; 13fb4 <__assert_fail@plt+0x2e0c>
   13ee8:	moveq	r4, r3
   13eec:	bl	110a0 <__errno_location@plt>
   13ef0:	mov	r7, r0
   13ef4:	ldr	fp, [r0]
   13ef8:	ldr	r5, [r4, #4]
   13efc:	cmp	r6, #0
   13f00:	orreq	r5, r5, #1
   13f04:	add	r9, r4, #8
   13f08:	ldr	r3, [r4, #44]	; 0x2c
   13f0c:	str	r3, [sp, #16]
   13f10:	ldr	r3, [r4, #40]	; 0x28
   13f14:	str	r3, [sp, #12]
   13f18:	str	r9, [sp, #8]
   13f1c:	str	r5, [sp, #4]
   13f20:	ldr	r3, [r4]
   13f24:	str	r3, [sp]
   13f28:	str	sl, [sp, #36]	; 0x24
   13f2c:	mov	r3, sl
   13f30:	str	r8, [sp, #32]
   13f34:	mov	r2, r8
   13f38:	mov	r1, #0
   13f3c:	mov	r0, r1
   13f40:	bl	12414 <__assert_fail@plt+0x126c>
   13f44:	mov	sl, r0
   13f48:	add	r8, r0, #1
   13f4c:	mov	r0, r8
   13f50:	bl	14eb0 <__assert_fail@plt+0x3d08>
   13f54:	str	r0, [sp, #28]
   13f58:	ldr	r3, [r4, #44]	; 0x2c
   13f5c:	str	r3, [sp, #16]
   13f60:	ldr	r3, [r4, #40]	; 0x28
   13f64:	str	r3, [sp, #12]
   13f68:	str	r9, [sp, #8]
   13f6c:	str	r5, [sp, #4]
   13f70:	ldr	r3, [r4]
   13f74:	str	r3, [sp]
   13f78:	ldr	r3, [sp, #36]	; 0x24
   13f7c:	ldr	r2, [sp, #32]
   13f80:	mov	r1, r8
   13f84:	bl	12414 <__assert_fail@plt+0x126c>
   13f88:	str	fp, [r7]
   13f8c:	cmp	r6, #0
   13f90:	strne	sl, [r6]
   13f94:	ldr	r0, [sp, #28]
   13f98:	add	sp, sp, #44	; 0x2c
   13f9c:	ldrd	r4, [sp]
   13fa0:	ldrd	r6, [sp, #8]
   13fa4:	ldrd	r8, [sp, #16]
   13fa8:	ldrd	sl, [sp, #24]
   13fac:	add	sp, sp, #32
   13fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb4:	andeq	r8, r2, ip, lsl #5
   13fb8:	str	r4, [sp, #-8]!
   13fbc:	str	lr, [sp, #4]
   13fc0:	mov	r3, r2
   13fc4:	mov	r2, #0
   13fc8:	bl	13ebc <__assert_fail@plt+0x2d14>
   13fcc:	ldr	r4, [sp]
   13fd0:	add	sp, sp, #4
   13fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fd8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13fdc:	strd	r6, [sp, #8]
   13fe0:	str	r8, [sp, #16]
   13fe4:	str	lr, [sp, #20]
   13fe8:	movw	r3, #33056	; 0x8120
   13fec:	movt	r3, #2
   13ff0:	ldr	r7, [r3]
   13ff4:	ldr	r3, [r3, #4]
   13ff8:	cmp	r3, #1
   13ffc:	ble	14028 <__assert_fail@plt+0x2e80>
   14000:	mov	r4, #1
   14004:	add	r6, r7, #4
   14008:	movw	r5, #33056	; 0x8120
   1400c:	movt	r5, #2
   14010:	ldr	r0, [r6, r4, lsl #3]
   14014:	bl	12150 <__assert_fail@plt+0xfa8>
   14018:	add	r4, r4, #1
   1401c:	ldr	r3, [r5, #4]
   14020:	cmp	r3, r4
   14024:	bgt	14010 <__assert_fail@plt+0x2e68>
   14028:	ldr	r0, [r7, #4]
   1402c:	movw	r3, #33164	; 0x818c
   14030:	movt	r3, #2
   14034:	cmp	r0, r3
   14038:	beq	1405c <__assert_fail@plt+0x2eb4>
   1403c:	bl	12150 <__assert_fail@plt+0xfa8>
   14040:	movw	r3, #33056	; 0x8120
   14044:	movt	r3, #2
   14048:	mov	r2, #256	; 0x100
   1404c:	str	r2, [r3, #8]
   14050:	movw	r2, #33164	; 0x818c
   14054:	movt	r2, #2
   14058:	str	r2, [r3, #12]
   1405c:	ldr	r3, [pc, #64]	; 140a4 <__assert_fail@plt+0x2efc>
   14060:	cmp	r7, r3
   14064:	beq	14080 <__assert_fail@plt+0x2ed8>
   14068:	mov	r0, r7
   1406c:	bl	12150 <__assert_fail@plt+0xfa8>
   14070:	movw	r3, #33056	; 0x8120
   14074:	movt	r3, #2
   14078:	add	r2, r3, #8
   1407c:	str	r2, [r3]
   14080:	movw	r3, #33056	; 0x8120
   14084:	movt	r3, #2
   14088:	mov	r2, #1
   1408c:	str	r2, [r3, #4]
   14090:	ldrd	r4, [sp]
   14094:	ldrd	r6, [sp, #8]
   14098:	ldr	r8, [sp, #16]
   1409c:	add	sp, sp, #20
   140a0:	pop	{pc}		; (ldr pc, [sp], #4)
   140a4:	andeq	r8, r2, r8, lsr #2
   140a8:	str	r4, [sp, #-8]!
   140ac:	str	lr, [sp, #4]
   140b0:	ldr	r3, [pc, #16]	; 140c8 <__assert_fail@plt+0x2f20>
   140b4:	mvn	r2, #0
   140b8:	bl	13b0c <__assert_fail@plt+0x2964>
   140bc:	ldr	r4, [sp]
   140c0:	add	sp, sp, #4
   140c4:	pop	{pc}		; (ldr pc, [sp], #4)
   140c8:	andeq	r8, r2, ip, lsl #5
   140cc:	str	r4, [sp, #-8]!
   140d0:	str	lr, [sp, #4]
   140d4:	ldr	r3, [pc, #12]	; 140e8 <__assert_fail@plt+0x2f40>
   140d8:	bl	13b0c <__assert_fail@plt+0x2964>
   140dc:	ldr	r4, [sp]
   140e0:	add	sp, sp, #4
   140e4:	pop	{pc}		; (ldr pc, [sp], #4)
   140e8:	andeq	r8, r2, ip, lsl #5
   140ec:	str	r4, [sp, #-8]!
   140f0:	str	lr, [sp, #4]
   140f4:	mov	r1, r0
   140f8:	mov	r0, #0
   140fc:	bl	140a8 <__assert_fail@plt+0x2f00>
   14100:	ldr	r4, [sp]
   14104:	add	sp, sp, #4
   14108:	pop	{pc}		; (ldr pc, [sp], #4)
   1410c:	str	r4, [sp, #-8]!
   14110:	str	lr, [sp, #4]
   14114:	mov	r2, r1
   14118:	mov	r1, r0
   1411c:	mov	r0, #0
   14120:	bl	140cc <__assert_fail@plt+0x2f24>
   14124:	ldr	r4, [sp]
   14128:	add	sp, sp, #4
   1412c:	pop	{pc}		; (ldr pc, [sp], #4)
   14130:	strd	r4, [sp, #-12]!
   14134:	str	lr, [sp, #8]
   14138:	sub	sp, sp, #52	; 0x34
   1413c:	mov	r4, r0
   14140:	mov	r5, r2
   14144:	mov	r0, sp
   14148:	bl	12280 <__assert_fail@plt+0x10d8>
   1414c:	mov	r3, sp
   14150:	mvn	r2, #0
   14154:	mov	r1, r5
   14158:	mov	r0, r4
   1415c:	bl	13b0c <__assert_fail@plt+0x2964>
   14160:	add	sp, sp, #52	; 0x34
   14164:	ldrd	r4, [sp]
   14168:	add	sp, sp, #8
   1416c:	pop	{pc}		; (ldr pc, [sp], #4)
   14170:	strd	r4, [sp, #-16]!
   14174:	str	r6, [sp, #8]
   14178:	str	lr, [sp, #12]
   1417c:	sub	sp, sp, #48	; 0x30
   14180:	mov	r4, r0
   14184:	mov	r5, r2
   14188:	mov	r6, r3
   1418c:	mov	r0, sp
   14190:	bl	12280 <__assert_fail@plt+0x10d8>
   14194:	mov	r3, sp
   14198:	mov	r2, r6
   1419c:	mov	r1, r5
   141a0:	mov	r0, r4
   141a4:	bl	13b0c <__assert_fail@plt+0x2964>
   141a8:	add	sp, sp, #48	; 0x30
   141ac:	ldrd	r4, [sp]
   141b0:	ldr	r6, [sp, #8]
   141b4:	add	sp, sp, #12
   141b8:	pop	{pc}		; (ldr pc, [sp], #4)
   141bc:	str	r4, [sp, #-8]!
   141c0:	str	lr, [sp, #4]
   141c4:	mov	r2, r1
   141c8:	mov	r1, r0
   141cc:	mov	r0, #0
   141d0:	bl	14130 <__assert_fail@plt+0x2f88>
   141d4:	ldr	r4, [sp]
   141d8:	add	sp, sp, #4
   141dc:	pop	{pc}		; (ldr pc, [sp], #4)
   141e0:	str	r4, [sp, #-8]!
   141e4:	str	lr, [sp, #4]
   141e8:	mov	r3, r2
   141ec:	mov	r2, r1
   141f0:	mov	r1, r0
   141f4:	mov	r0, #0
   141f8:	bl	14170 <__assert_fail@plt+0x2fc8>
   141fc:	ldr	r4, [sp]
   14200:	add	sp, sp, #4
   14204:	pop	{pc}		; (ldr pc, [sp], #4)
   14208:	strd	r4, [sp, #-12]!
   1420c:	str	lr, [sp, #8]
   14210:	sub	sp, sp, #52	; 0x34
   14214:	mov	r4, r0
   14218:	mov	r5, r1
   1421c:	mov	r1, r2
   14220:	ldr	r0, [pc, #92]	; 14284 <__assert_fail@plt+0x30dc>
   14224:	ldrd	r2, [r0]
   14228:	strd	r2, [sp]
   1422c:	ldrd	r2, [r0, #8]
   14230:	strd	r2, [sp, #8]
   14234:	ldrd	r2, [r0, #16]
   14238:	strd	r2, [sp, #16]
   1423c:	ldrd	r2, [r0, #24]
   14240:	strd	r2, [sp, #24]
   14244:	ldrd	r2, [r0, #32]
   14248:	strd	r2, [sp, #32]
   1424c:	ldrd	r2, [r0, #40]	; 0x28
   14250:	strd	r2, [sp, #40]	; 0x28
   14254:	mov	r2, #1
   14258:	mov	r0, sp
   1425c:	bl	13d80 <__assert_fail@plt+0x2bd8>
   14260:	mov	r3, sp
   14264:	mov	r2, r5
   14268:	mov	r1, r4
   1426c:	mov	r0, #0
   14270:	bl	13b0c <__assert_fail@plt+0x2964>
   14274:	add	sp, sp, #52	; 0x34
   14278:	ldrd	r4, [sp]
   1427c:	add	sp, sp, #8
   14280:	pop	{pc}		; (ldr pc, [sp], #4)
   14284:	andeq	r8, r2, ip, lsl #5
   14288:	str	r4, [sp, #-8]!
   1428c:	str	lr, [sp, #4]
   14290:	mov	r2, r1
   14294:	mvn	r1, #0
   14298:	bl	14208 <__assert_fail@plt+0x3060>
   1429c:	ldr	r4, [sp]
   142a0:	add	sp, sp, #4
   142a4:	pop	{pc}		; (ldr pc, [sp], #4)
   142a8:	str	r4, [sp, #-8]!
   142ac:	str	lr, [sp, #4]
   142b0:	mov	r1, #58	; 0x3a
   142b4:	bl	14288 <__assert_fail@plt+0x30e0>
   142b8:	ldr	r4, [sp]
   142bc:	add	sp, sp, #4
   142c0:	pop	{pc}		; (ldr pc, [sp], #4)
   142c4:	str	r4, [sp, #-8]!
   142c8:	str	lr, [sp, #4]
   142cc:	mov	r2, #58	; 0x3a
   142d0:	bl	14208 <__assert_fail@plt+0x3060>
   142d4:	ldr	r4, [sp]
   142d8:	add	sp, sp, #4
   142dc:	pop	{pc}		; (ldr pc, [sp], #4)
   142e0:	strd	r4, [sp, #-12]!
   142e4:	str	lr, [sp, #8]
   142e8:	sub	sp, sp, #100	; 0x64
   142ec:	mov	r4, r0
   142f0:	mov	r5, r2
   142f4:	mov	r0, sp
   142f8:	bl	12280 <__assert_fail@plt+0x10d8>
   142fc:	ldrd	r2, [sp]
   14300:	strd	r2, [sp, #48]	; 0x30
   14304:	ldrd	r2, [sp, #8]
   14308:	strd	r2, [sp, #56]	; 0x38
   1430c:	ldrd	r2, [sp, #16]
   14310:	strd	r2, [sp, #64]	; 0x40
   14314:	ldrd	r2, [sp, #24]
   14318:	strd	r2, [sp, #72]	; 0x48
   1431c:	ldrd	r2, [sp, #32]
   14320:	strd	r2, [sp, #80]	; 0x50
   14324:	ldrd	r2, [sp, #40]	; 0x28
   14328:	strd	r2, [sp, #88]	; 0x58
   1432c:	mov	r2, #1
   14330:	mov	r1, #58	; 0x3a
   14334:	add	r0, sp, #48	; 0x30
   14338:	bl	13d80 <__assert_fail@plt+0x2bd8>
   1433c:	add	r3, sp, #48	; 0x30
   14340:	mvn	r2, #0
   14344:	mov	r1, r5
   14348:	mov	r0, r4
   1434c:	bl	13b0c <__assert_fail@plt+0x2964>
   14350:	add	sp, sp, #100	; 0x64
   14354:	ldrd	r4, [sp]
   14358:	add	sp, sp, #8
   1435c:	pop	{pc}		; (ldr pc, [sp], #4)
   14360:	strd	r4, [sp, #-20]!	; 0xffffffec
   14364:	strd	r6, [sp, #8]
   14368:	str	lr, [sp, #16]
   1436c:	sub	sp, sp, #52	; 0x34
   14370:	mov	r4, r0
   14374:	mov	r5, r3
   14378:	ldr	r3, [pc, #92]	; 143dc <__assert_fail@plt+0x3234>
   1437c:	ldrd	r6, [r3]
   14380:	strd	r6, [sp]
   14384:	ldrd	r6, [r3, #8]
   14388:	strd	r6, [sp, #8]
   1438c:	ldrd	r6, [r3, #16]
   14390:	strd	r6, [sp, #16]
   14394:	ldrd	r6, [r3, #24]
   14398:	strd	r6, [sp, #24]
   1439c:	ldrd	r6, [r3, #32]
   143a0:	strd	r6, [sp, #32]
   143a4:	ldrd	r6, [r3, #40]	; 0x28
   143a8:	strd	r6, [sp, #40]	; 0x28
   143ac:	mov	r0, sp
   143b0:	bl	13ddc <__assert_fail@plt+0x2c34>
   143b4:	mov	r3, sp
   143b8:	ldr	r2, [sp, #72]	; 0x48
   143bc:	mov	r1, r5
   143c0:	mov	r0, r4
   143c4:	bl	13b0c <__assert_fail@plt+0x2964>
   143c8:	add	sp, sp, #52	; 0x34
   143cc:	ldrd	r4, [sp]
   143d0:	ldrd	r6, [sp, #8]
   143d4:	add	sp, sp, #16
   143d8:	pop	{pc}		; (ldr pc, [sp], #4)
   143dc:	andeq	r8, r2, ip, lsl #5
   143e0:	push	{lr}		; (str lr, [sp, #-4]!)
   143e4:	sub	sp, sp, #12
   143e8:	mvn	ip, #0
   143ec:	str	ip, [sp]
   143f0:	bl	14360 <__assert_fail@plt+0x31b8>
   143f4:	add	sp, sp, #12
   143f8:	pop	{pc}		; (ldr pc, [sp], #4)
   143fc:	str	r4, [sp, #-8]!
   14400:	str	lr, [sp, #4]
   14404:	mov	r3, r2
   14408:	mov	r2, r1
   1440c:	mov	r1, r0
   14410:	mov	r0, #0
   14414:	bl	143e0 <__assert_fail@plt+0x3238>
   14418:	ldr	r4, [sp]
   1441c:	add	sp, sp, #4
   14420:	pop	{pc}		; (ldr pc, [sp], #4)
   14424:	push	{lr}		; (str lr, [sp, #-4]!)
   14428:	sub	sp, sp, #12
   1442c:	str	r3, [sp]
   14430:	mov	r3, r2
   14434:	mov	r2, r1
   14438:	mov	r1, r0
   1443c:	mov	r0, #0
   14440:	bl	14360 <__assert_fail@plt+0x31b8>
   14444:	add	sp, sp, #12
   14448:	pop	{pc}		; (ldr pc, [sp], #4)
   1444c:	str	r4, [sp, #-8]!
   14450:	str	lr, [sp, #4]
   14454:	ldr	r3, [pc, #12]	; 14468 <__assert_fail@plt+0x32c0>
   14458:	bl	13b0c <__assert_fail@plt+0x2964>
   1445c:	ldr	r4, [sp]
   14460:	add	sp, sp, #4
   14464:	pop	{pc}		; (ldr pc, [sp], #4)
   14468:	andeq	r8, r2, r0, lsr r1
   1446c:	str	r4, [sp, #-8]!
   14470:	str	lr, [sp, #4]
   14474:	mov	r2, r1
   14478:	mov	r1, r0
   1447c:	mov	r0, #0
   14480:	bl	1444c <__assert_fail@plt+0x32a4>
   14484:	ldr	r4, [sp]
   14488:	add	sp, sp, #4
   1448c:	pop	{pc}		; (ldr pc, [sp], #4)
   14490:	str	r4, [sp, #-8]!
   14494:	str	lr, [sp, #4]
   14498:	mvn	r2, #0
   1449c:	bl	1444c <__assert_fail@plt+0x32a4>
   144a0:	ldr	r4, [sp]
   144a4:	add	sp, sp, #4
   144a8:	pop	{pc}		; (ldr pc, [sp], #4)
   144ac:	str	r4, [sp, #-8]!
   144b0:	str	lr, [sp, #4]
   144b4:	mov	r1, r0
   144b8:	mov	r0, #0
   144bc:	bl	14490 <__assert_fail@plt+0x32e8>
   144c0:	ldr	r4, [sp]
   144c4:	add	sp, sp, #4
   144c8:	pop	{pc}		; (ldr pc, [sp], #4)
   144cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   144d0:	strd	r6, [sp, #8]
   144d4:	strd	r8, [sp, #16]
   144d8:	strd	sl, [sp, #24]
   144dc:	str	lr, [sp, #32]
   144e0:	sub	sp, sp, #36	; 0x24
   144e4:	mov	r4, r1
   144e8:	mov	r8, r2
   144ec:	ldr	r7, [sp, #76]	; 0x4c
   144f0:	ldr	fp, [r2]
   144f4:	subs	r9, r3, #0
   144f8:	ldrne	sl, [r9]
   144fc:	mvneq	sl, #0
   14500:	ldr	r3, [sp, #72]	; 0x48
   14504:	cmp	r3, #0
   14508:	beq	14518 <__assert_fail@plt+0x3370>
   1450c:	mov	r3, #0
   14510:	ldr	r2, [sp, #72]	; 0x48
   14514:	str	r3, [r2]
   14518:	cmp	r7, #0
   1451c:	movne	r3, #0
   14520:	strne	r3, [r7]
   14524:	cmp	r4, #0
   14528:	beq	14590 <__assert_fail@plt+0x33e8>
   1452c:	subs	r5, r4, r0
   14530:	moveq	r6, #0
   14534:	bne	145ac <__assert_fail@plt+0x3404>
   14538:	ldrb	r3, [r4, #1]
   1453c:	cmp	r3, #0
   14540:	bne	145c4 <__assert_fail@plt+0x341c>
   14544:	cmp	r6, #0
   14548:	moveq	r5, r6
   1454c:	beq	145d8 <__assert_fail@plt+0x3430>
   14550:	mov	r5, #0
   14554:	ldrb	r3, [r6]
   14558:	cmp	r3, #43	; 0x2b
   1455c:	bne	1461c <__assert_fail@plt+0x3474>
   14560:	clz	r3, r5
   14564:	lsr	r3, r3, #5
   14568:	cmp	r4, #0
   1456c:	movne	r4, r3
   14570:	moveq	r4, #0
   14574:	cmp	r4, #0
   14578:	movne	r5, #0
   1457c:	movwne	r4, #29016	; 0x7158
   14580:	movtne	r4, #1
   14584:	beq	14658 <__assert_fail@plt+0x34b0>
   14588:	bl	11124 <endpwent@plt>
   1458c:	b	146f8 <__assert_fail@plt+0x3550>
   14590:	ldrb	r3, [r0]
   14594:	cmp	r3, #0
   14598:	moveq	r6, r4
   1459c:	beq	14544 <__assert_fail@plt+0x339c>
   145a0:	bl	152d4 <__assert_fail@plt+0x412c>
   145a4:	mov	r6, r0
   145a8:	b	14544 <__assert_fail@plt+0x339c>
   145ac:	add	r1, r5, #1
   145b0:	bl	1525c <__assert_fail@plt+0x40b4>
   145b4:	mov	r6, r0
   145b8:	mov	r3, #0
   145bc:	strb	r3, [r0, r5]
   145c0:	b	14538 <__assert_fail@plt+0x3390>
   145c4:	add	r5, r4, #1
   145c8:	cmp	r6, #0
   145cc:	bne	14554 <__assert_fail@plt+0x33ac>
   145d0:	cmp	r5, #0
   145d4:	bne	146c4 <__assert_fail@plt+0x351c>
   145d8:	str	fp, [r8]
   145dc:	cmp	r9, #0
   145e0:	strne	sl, [r9]
   145e4:	ldr	r3, [sp, #72]	; 0x48
   145e8:	cmp	r3, #0
   145ec:	strne	r6, [r3]
   145f0:	movne	r6, #0
   145f4:	cmp	r7, #0
   145f8:	beq	14604 <__assert_fail@plt+0x345c>
   145fc:	str	r5, [r7]
   14600:	mov	r5, #0
   14604:	mov	r0, r6
   14608:	bl	12150 <__assert_fail@plt+0xfa8>
   1460c:	mov	r0, r5
   14610:	bl	12150 <__assert_fail@plt+0xfa8>
   14614:	mov	r0, #0
   14618:	b	14720 <__assert_fail@plt+0x3578>
   1461c:	mov	r0, r6
   14620:	bl	10ee4 <getpwnam@plt>
   14624:	cmp	r0, #0
   14628:	beq	14560 <__assert_fail@plt+0x33b8>
   1462c:	ldr	fp, [r0, #8]
   14630:	adds	r4, r4, #0
   14634:	movne	r4, #1
   14638:	cmp	r5, #0
   1463c:	movne	r4, #0
   14640:	cmp	r4, #0
   14644:	bne	1473c <__assert_fail@plt+0x3594>
   14648:	bl	11124 <endpwent@plt>
   1464c:	cmp	r5, #0
   14650:	bne	146c4 <__assert_fail@plt+0x351c>
   14654:	b	145d8 <__assert_fail@plt+0x3430>
   14658:	movw	r3, #27880	; 0x6ce8
   1465c:	movt	r3, #1
   14660:	str	r3, [sp]
   14664:	add	r3, sp, #8
   14668:	mov	r2, #10
   1466c:	mov	r1, #0
   14670:	mov	r0, r6
   14674:	bl	153f4 <__assert_fail@plt+0x424c>
   14678:	cmp	r0, #0
   1467c:	movwne	r4, #28984	; 0x7138
   14680:	movtne	r4, #1
   14684:	bne	146a4 <__assert_fail@plt+0x34fc>
   14688:	ldr	r3, [sp, #8]
   1468c:	cmn	r3, #1
   14690:	movne	fp, r3
   14694:	movw	r4, #28984	; 0x7138
   14698:	movt	r4, #1
   1469c:	cmn	r3, #1
   146a0:	movne	r4, #0
   146a4:	bl	11124 <endpwent@plt>
   146a8:	clz	r3, r4
   146ac:	lsr	r3, r3, #5
   146b0:	cmp	r5, #0
   146b4:	moveq	r3, #0
   146b8:	cmp	r3, #0
   146bc:	moveq	r5, #0
   146c0:	beq	146f8 <__assert_fail@plt+0x3550>
   146c4:	ldrb	r3, [r5]
   146c8:	cmp	r3, #43	; 0x2b
   146cc:	beq	1477c <__assert_fail@plt+0x35d4>
   146d0:	mov	r0, r5
   146d4:	bl	1119c <getgrnam@plt>
   146d8:	cmp	r0, #0
   146dc:	beq	1477c <__assert_fail@plt+0x35d4>
   146e0:	ldr	sl, [r0, #8]
   146e4:	mov	r4, #0
   146e8:	bl	10ec0 <endgrent@plt>
   146ec:	mov	r0, r5
   146f0:	bl	152d4 <__assert_fail@plt+0x412c>
   146f4:	mov	r5, r0
   146f8:	cmp	r4, #0
   146fc:	beq	145d8 <__assert_fail@plt+0x3430>
   14700:	mov	r0, r6
   14704:	bl	12150 <__assert_fail@plt+0xfa8>
   14708:	mov	r0, r5
   1470c:	bl	12150 <__assert_fail@plt+0xfa8>
   14710:	mov	r2, #5
   14714:	mov	r1, r4
   14718:	mov	r0, #0
   1471c:	bl	10f74 <dcgettext@plt>
   14720:	add	sp, sp, #36	; 0x24
   14724:	ldrd	r4, [sp]
   14728:	ldrd	r6, [sp, #8]
   1472c:	ldrd	r8, [sp, #16]
   14730:	ldrd	sl, [sp, #24]
   14734:	add	sp, sp, #32
   14738:	pop	{pc}		; (ldr pc, [sp], #4)
   1473c:	ldr	sl, [r0, #12]
   14740:	mov	r0, sl
   14744:	bl	11190 <getgrgid@plt>
   14748:	cmp	r0, #0
   1474c:	beq	14768 <__assert_fail@plt+0x35c0>
   14750:	ldr	r0, [r0]
   14754:	bl	152d4 <__assert_fail@plt+0x412c>
   14758:	mov	r5, r0
   1475c:	bl	10ec0 <endgrent@plt>
   14760:	mov	r4, #0
   14764:	b	14588 <__assert_fail@plt+0x33e0>
   14768:	add	r2, sp, #8
   1476c:	mov	r0, sl
   14770:	mov	r1, #0
   14774:	bl	162e0 <__assert_fail@plt+0x5138>
   14778:	b	14754 <__assert_fail@plt+0x35ac>
   1477c:	movw	r3, #27880	; 0x6ce8
   14780:	movt	r3, #1
   14784:	str	r3, [sp]
   14788:	add	r3, sp, #8
   1478c:	mov	r2, #10
   14790:	mov	r1, #0
   14794:	mov	r0, r5
   14798:	bl	153f4 <__assert_fail@plt+0x424c>
   1479c:	cmp	r0, #0
   147a0:	movwne	r4, #29000	; 0x7148
   147a4:	movtne	r4, #1
   147a8:	bne	146e8 <__assert_fail@plt+0x3540>
   147ac:	ldr	r3, [sp, #8]
   147b0:	cmn	r3, #1
   147b4:	movne	sl, r3
   147b8:	movw	r4, #29000	; 0x7148
   147bc:	movt	r4, #1
   147c0:	cmn	r3, #1
   147c4:	movne	r4, #0
   147c8:	b	146e8 <__assert_fail@plt+0x3540>
   147cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   147d0:	strd	r6, [sp, #8]
   147d4:	strd	r8, [sp, #16]
   147d8:	str	sl, [sp, #24]
   147dc:	str	lr, [sp, #28]
   147e0:	sub	sp, sp, #8
   147e4:	mov	r4, r0
   147e8:	mov	r6, r1
   147ec:	mov	r7, r3
   147f0:	ldr	r8, [sp, #40]	; 0x28
   147f4:	subs	r9, r2, #0
   147f8:	beq	14878 <__assert_fail@plt+0x36d0>
   147fc:	mov	r1, #58	; 0x3a
   14800:	bl	11094 <strchr@plt>
   14804:	mov	sl, r0
   14808:	str	r8, [sp, #4]
   1480c:	str	r7, [sp]
   14810:	mov	r3, r9
   14814:	mov	r2, r6
   14818:	mov	r1, r0
   1481c:	mov	r0, r4
   14820:	bl	144cc <__assert_fail@plt+0x3324>
   14824:	mov	r5, r0
   14828:	adds	r0, r0, #0
   1482c:	movne	r0, #1
   14830:	cmp	sl, #0
   14834:	movne	r0, #0
   14838:	cmp	r0, #0
   1483c:	beq	14894 <__assert_fail@plt+0x36ec>
   14840:	mov	r1, #46	; 0x2e
   14844:	mov	r0, r4
   14848:	bl	11094 <strchr@plt>
   1484c:	subs	r1, r0, #0
   14850:	beq	14894 <__assert_fail@plt+0x36ec>
   14854:	str	r8, [sp, #4]
   14858:	str	r7, [sp]
   1485c:	mov	r3, r9
   14860:	mov	r2, r6
   14864:	mov	r0, r4
   14868:	bl	144cc <__assert_fail@plt+0x3324>
   1486c:	cmp	r0, #0
   14870:	moveq	r5, r0
   14874:	b	14894 <__assert_fail@plt+0x36ec>
   14878:	str	r8, [sp, #4]
   1487c:	str	r3, [sp]
   14880:	mov	r3, #0
   14884:	mov	r2, r1
   14888:	mov	r1, r3
   1488c:	bl	144cc <__assert_fail@plt+0x3324>
   14890:	mov	r5, r0
   14894:	mov	r0, r5
   14898:	add	sp, sp, #8
   1489c:	ldrd	r4, [sp]
   148a0:	ldrd	r6, [sp, #8]
   148a4:	ldrd	r8, [sp, #16]
   148a8:	ldr	sl, [sp, #24]
   148ac:	add	sp, sp, #28
   148b0:	pop	{pc}		; (ldr pc, [sp], #4)
   148b4:	strd	r4, [sp, #-16]!
   148b8:	str	r6, [sp, #8]
   148bc:	str	lr, [sp, #12]
   148c0:	sub	sp, sp, #32
   148c4:	mov	r4, r0
   148c8:	ldr	r5, [sp, #48]	; 0x30
   148cc:	ldr	r6, [sp, #52]	; 0x34
   148d0:	cmp	r1, #0
   148d4:	beq	149a0 <__assert_fail@plt+0x37f8>
   148d8:	str	r3, [sp, #4]
   148dc:	str	r2, [sp]
   148e0:	mov	r3, r1
   148e4:	movw	r2, #29032	; 0x7168
   148e8:	movt	r2, #1
   148ec:	mov	r1, #1
   148f0:	bl	110e8 <__fprintf_chk@plt>
   148f4:	mov	r2, #5
   148f8:	movw	r1, #29052	; 0x717c
   148fc:	movt	r1, #1
   14900:	mov	r0, #0
   14904:	bl	10f74 <dcgettext@plt>
   14908:	movw	r3, #2022	; 0x7e6
   1490c:	str	r3, [sp]
   14910:	mov	r3, r0
   14914:	movw	r2, #29780	; 0x7454
   14918:	movt	r2, #1
   1491c:	mov	r1, #1
   14920:	mov	r0, r4
   14924:	bl	110e8 <__fprintf_chk@plt>
   14928:	mov	r1, r4
   1492c:	mov	r0, #10
   14930:	bl	10f68 <fputc_unlocked@plt>
   14934:	mov	r2, #5
   14938:	movw	r1, #29056	; 0x7180
   1493c:	movt	r1, #1
   14940:	mov	r0, #0
   14944:	bl	10f74 <dcgettext@plt>
   14948:	movw	r3, #29228	; 0x722c
   1494c:	movt	r3, #1
   14950:	mov	r2, r0
   14954:	mov	r1, #1
   14958:	mov	r0, r4
   1495c:	bl	110e8 <__fprintf_chk@plt>
   14960:	mov	r1, r4
   14964:	mov	r0, #10
   14968:	bl	10f68 <fputc_unlocked@plt>
   1496c:	cmp	r6, #9
   14970:	ldrls	pc, [pc, r6, lsl #2]
   14974:	b	14c78 <__assert_fail@plt+0x3ad0>
   14978:	andeq	r4, r1, r4, ror #19
   1497c:			; <UNDEFINED> instruction: 0x000149bc
   14980:	strdeq	r4, [r1], -r8
   14984:	andeq	r4, r1, ip, lsr #20
   14988:	andeq	r4, r1, r8, ror #20
   1498c:	andeq	r4, r1, ip, lsr #21
   14990:	strdeq	r4, [r1], -r8
   14994:	andeq	r4, r1, ip, asr #22
   14998:	andeq	r4, r1, r8, lsr #23
   1499c:	andeq	r4, r1, ip, lsl #24
   149a0:	str	r3, [sp]
   149a4:	mov	r3, r2
   149a8:	movw	r2, #29044	; 0x7174
   149ac:	movt	r2, #1
   149b0:	mov	r1, #1
   149b4:	bl	110e8 <__fprintf_chk@plt>
   149b8:	b	148f4 <__assert_fail@plt+0x374c>
   149bc:	mov	r2, #5
   149c0:	movw	r1, #29264	; 0x7250
   149c4:	movt	r1, #1
   149c8:	mov	r0, #0
   149cc:	bl	10f74 <dcgettext@plt>
   149d0:	ldr	r3, [r5]
   149d4:	mov	r2, r0
   149d8:	mov	r1, #1
   149dc:	mov	r0, r4
   149e0:	bl	110e8 <__fprintf_chk@plt>
   149e4:	add	sp, sp, #32
   149e8:	ldrd	r4, [sp]
   149ec:	ldr	r6, [sp, #8]
   149f0:	add	sp, sp, #12
   149f4:	pop	{pc}		; (ldr pc, [sp], #4)
   149f8:	mov	r2, #5
   149fc:	movw	r1, #29280	; 0x7260
   14a00:	movt	r1, #1
   14a04:	mov	r0, #0
   14a08:	bl	10f74 <dcgettext@plt>
   14a0c:	ldr	r3, [r5, #4]
   14a10:	str	r3, [sp]
   14a14:	ldr	r3, [r5]
   14a18:	mov	r2, r0
   14a1c:	mov	r1, #1
   14a20:	mov	r0, r4
   14a24:	bl	110e8 <__fprintf_chk@plt>
   14a28:	b	149e4 <__assert_fail@plt+0x383c>
   14a2c:	mov	r2, #5
   14a30:	movw	r1, #29304	; 0x7278
   14a34:	movt	r1, #1
   14a38:	mov	r0, #0
   14a3c:	bl	10f74 <dcgettext@plt>
   14a40:	ldr	r3, [r5, #8]
   14a44:	str	r3, [sp, #4]
   14a48:	ldr	r3, [r5, #4]
   14a4c:	str	r3, [sp]
   14a50:	ldr	r3, [r5]
   14a54:	mov	r2, r0
   14a58:	mov	r1, #1
   14a5c:	mov	r0, r4
   14a60:	bl	110e8 <__fprintf_chk@plt>
   14a64:	b	149e4 <__assert_fail@plt+0x383c>
   14a68:	mov	r2, #5
   14a6c:	movw	r1, #29332	; 0x7294
   14a70:	movt	r1, #1
   14a74:	mov	r0, #0
   14a78:	bl	10f74 <dcgettext@plt>
   14a7c:	ldr	r3, [r5, #12]
   14a80:	str	r3, [sp, #8]
   14a84:	ldr	r3, [r5, #8]
   14a88:	str	r3, [sp, #4]
   14a8c:	ldr	r3, [r5, #4]
   14a90:	str	r3, [sp]
   14a94:	ldr	r3, [r5]
   14a98:	mov	r2, r0
   14a9c:	mov	r1, #1
   14aa0:	mov	r0, r4
   14aa4:	bl	110e8 <__fprintf_chk@plt>
   14aa8:	b	149e4 <__assert_fail@plt+0x383c>
   14aac:	mov	r2, #5
   14ab0:	movw	r1, #29364	; 0x72b4
   14ab4:	movt	r1, #1
   14ab8:	mov	r0, #0
   14abc:	bl	10f74 <dcgettext@plt>
   14ac0:	ldr	r3, [r5, #16]
   14ac4:	str	r3, [sp, #12]
   14ac8:	ldr	r3, [r5, #12]
   14acc:	str	r3, [sp, #8]
   14ad0:	ldr	r3, [r5, #8]
   14ad4:	str	r3, [sp, #4]
   14ad8:	ldr	r3, [r5, #4]
   14adc:	str	r3, [sp]
   14ae0:	ldr	r3, [r5]
   14ae4:	mov	r2, r0
   14ae8:	mov	r1, #1
   14aec:	mov	r0, r4
   14af0:	bl	110e8 <__fprintf_chk@plt>
   14af4:	b	149e4 <__assert_fail@plt+0x383c>
   14af8:	mov	r2, #5
   14afc:	movw	r1, #29400	; 0x72d8
   14b00:	movt	r1, #1
   14b04:	mov	r0, #0
   14b08:	bl	10f74 <dcgettext@plt>
   14b0c:	ldr	r3, [r5, #20]
   14b10:	str	r3, [sp, #16]
   14b14:	ldr	r3, [r5, #16]
   14b18:	str	r3, [sp, #12]
   14b1c:	ldr	r3, [r5, #12]
   14b20:	str	r3, [sp, #8]
   14b24:	ldr	r3, [r5, #8]
   14b28:	str	r3, [sp, #4]
   14b2c:	ldr	r3, [r5, #4]
   14b30:	str	r3, [sp]
   14b34:	ldr	r3, [r5]
   14b38:	mov	r2, r0
   14b3c:	mov	r1, #1
   14b40:	mov	r0, r4
   14b44:	bl	110e8 <__fprintf_chk@plt>
   14b48:	b	149e4 <__assert_fail@plt+0x383c>
   14b4c:	mov	r2, #5
   14b50:	movw	r1, #29440	; 0x7300
   14b54:	movt	r1, #1
   14b58:	mov	r0, #0
   14b5c:	bl	10f74 <dcgettext@plt>
   14b60:	ldr	r3, [r5, #24]
   14b64:	str	r3, [sp, #20]
   14b68:	ldr	r3, [r5, #20]
   14b6c:	str	r3, [sp, #16]
   14b70:	ldr	r3, [r5, #16]
   14b74:	str	r3, [sp, #12]
   14b78:	ldr	r3, [r5, #12]
   14b7c:	str	r3, [sp, #8]
   14b80:	ldr	r3, [r5, #8]
   14b84:	str	r3, [sp, #4]
   14b88:	ldr	r3, [r5, #4]
   14b8c:	str	r3, [sp]
   14b90:	ldr	r3, [r5]
   14b94:	mov	r2, r0
   14b98:	mov	r1, #1
   14b9c:	mov	r0, r4
   14ba0:	bl	110e8 <__fprintf_chk@plt>
   14ba4:	b	149e4 <__assert_fail@plt+0x383c>
   14ba8:	mov	r2, #5
   14bac:	movw	r1, #29484	; 0x732c
   14bb0:	movt	r1, #1
   14bb4:	mov	r0, #0
   14bb8:	bl	10f74 <dcgettext@plt>
   14bbc:	ldr	r3, [r5, #28]
   14bc0:	str	r3, [sp, #24]
   14bc4:	ldr	r3, [r5, #24]
   14bc8:	str	r3, [sp, #20]
   14bcc:	ldr	r3, [r5, #20]
   14bd0:	str	r3, [sp, #16]
   14bd4:	ldr	r3, [r5, #16]
   14bd8:	str	r3, [sp, #12]
   14bdc:	ldr	r3, [r5, #12]
   14be0:	str	r3, [sp, #8]
   14be4:	ldr	r3, [r5, #8]
   14be8:	str	r3, [sp, #4]
   14bec:	ldr	r3, [r5, #4]
   14bf0:	str	r3, [sp]
   14bf4:	ldr	r3, [r5]
   14bf8:	mov	r2, r0
   14bfc:	mov	r1, #1
   14c00:	mov	r0, r4
   14c04:	bl	110e8 <__fprintf_chk@plt>
   14c08:	b	149e4 <__assert_fail@plt+0x383c>
   14c0c:	mov	r2, #5
   14c10:	movw	r1, #29532	; 0x735c
   14c14:	movt	r1, #1
   14c18:	mov	r0, #0
   14c1c:	bl	10f74 <dcgettext@plt>
   14c20:	ldr	r3, [r5, #32]
   14c24:	str	r3, [sp, #28]
   14c28:	ldr	r3, [r5, #28]
   14c2c:	str	r3, [sp, #24]
   14c30:	ldr	r3, [r5, #24]
   14c34:	str	r3, [sp, #20]
   14c38:	ldr	r3, [r5, #20]
   14c3c:	str	r3, [sp, #16]
   14c40:	ldr	r3, [r5, #16]
   14c44:	str	r3, [sp, #12]
   14c48:	ldr	r3, [r5, #12]
   14c4c:	str	r3, [sp, #8]
   14c50:	ldr	r3, [r5, #8]
   14c54:	str	r3, [sp, #4]
   14c58:	ldr	r3, [r5, #4]
   14c5c:	str	r3, [sp]
   14c60:	ldr	r3, [r5]
   14c64:	mov	r2, r0
   14c68:	mov	r1, #1
   14c6c:	mov	r0, r4
   14c70:	bl	110e8 <__fprintf_chk@plt>
   14c74:	b	149e4 <__assert_fail@plt+0x383c>
   14c78:	mov	r2, #5
   14c7c:	movw	r1, #29584	; 0x7390
   14c80:	movt	r1, #1
   14c84:	mov	r0, #0
   14c88:	bl	10f74 <dcgettext@plt>
   14c8c:	ldr	r3, [r5, #32]
   14c90:	str	r3, [sp, #28]
   14c94:	ldr	r3, [r5, #28]
   14c98:	str	r3, [sp, #24]
   14c9c:	ldr	r3, [r5, #24]
   14ca0:	str	r3, [sp, #20]
   14ca4:	ldr	r3, [r5, #20]
   14ca8:	str	r3, [sp, #16]
   14cac:	ldr	r3, [r5, #16]
   14cb0:	str	r3, [sp, #12]
   14cb4:	ldr	r3, [r5, #12]
   14cb8:	str	r3, [sp, #8]
   14cbc:	ldr	r3, [r5, #8]
   14cc0:	str	r3, [sp, #4]
   14cc4:	ldr	r3, [r5, #4]
   14cc8:	str	r3, [sp]
   14ccc:	ldr	r3, [r5]
   14cd0:	mov	r2, r0
   14cd4:	mov	r1, #1
   14cd8:	mov	r0, r4
   14cdc:	bl	110e8 <__fprintf_chk@plt>
   14ce0:	b	149e4 <__assert_fail@plt+0x383c>
   14ce4:	strd	r4, [sp, #-12]!
   14ce8:	str	lr, [sp, #8]
   14cec:	sub	sp, sp, #12
   14cf0:	ldr	r5, [sp, #24]
   14cf4:	ldr	ip, [r5]
   14cf8:	cmp	ip, #0
   14cfc:	beq	14d34 <__assert_fail@plt+0x3b8c>
   14d00:	mov	lr, r5
   14d04:	mov	ip, #0
   14d08:	add	ip, ip, #1
   14d0c:	ldr	r4, [lr, #4]!
   14d10:	cmp	r4, #0
   14d14:	bne	14d08 <__assert_fail@plt+0x3b60>
   14d18:	str	ip, [sp, #4]
   14d1c:	str	r5, [sp]
   14d20:	bl	148b4 <__assert_fail@plt+0x370c>
   14d24:	add	sp, sp, #12
   14d28:	ldrd	r4, [sp]
   14d2c:	add	sp, sp, #8
   14d30:	pop	{pc}		; (ldr pc, [sp], #4)
   14d34:	mov	ip, #0
   14d38:	b	14d18 <__assert_fail@plt+0x3b70>
   14d3c:	strd	r4, [sp, #-12]!
   14d40:	str	lr, [sp, #8]
   14d44:	sub	sp, sp, #52	; 0x34
   14d48:	ldr	r5, [sp, #64]	; 0x40
   14d4c:	add	r4, sp, #8
   14d50:	mov	ip, #0
   14d54:	ldr	lr, [r5], #4
   14d58:	str	lr, [r4], #4
   14d5c:	cmp	lr, #0
   14d60:	beq	14d70 <__assert_fail@plt+0x3bc8>
   14d64:	add	ip, ip, #1
   14d68:	cmp	ip, #10
   14d6c:	bne	14d54 <__assert_fail@plt+0x3bac>
   14d70:	str	ip, [sp, #4]
   14d74:	add	ip, sp, #8
   14d78:	str	ip, [sp]
   14d7c:	bl	148b4 <__assert_fail@plt+0x370c>
   14d80:	add	sp, sp, #52	; 0x34
   14d84:	ldrd	r4, [sp]
   14d88:	add	sp, sp, #8
   14d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d90:	push	{r3}		; (str r3, [sp, #-4]!)
   14d94:	push	{lr}		; (str lr, [sp, #-4]!)
   14d98:	sub	sp, sp, #16
   14d9c:	add	r3, sp, #24
   14da0:	str	r3, [sp, #12]
   14da4:	str	r3, [sp]
   14da8:	ldr	r3, [sp, #20]
   14dac:	bl	14d3c <__assert_fail@plt+0x3b94>
   14db0:	add	sp, sp, #16
   14db4:	pop	{lr}		; (ldr lr, [sp], #4)
   14db8:	add	sp, sp, #4
   14dbc:	bx	lr
   14dc0:	str	r4, [sp, #-8]!
   14dc4:	str	lr, [sp, #4]
   14dc8:	movw	r3, #33140	; 0x8174
   14dcc:	movt	r3, #2
   14dd0:	ldr	r1, [r3]
   14dd4:	mov	r0, #10
   14dd8:	bl	10f68 <fputc_unlocked@plt>
   14ddc:	mov	r2, #5
   14de0:	movw	r1, #29644	; 0x73cc
   14de4:	movt	r1, #1
   14de8:	mov	r0, #0
   14dec:	bl	10f74 <dcgettext@plt>
   14df0:	movw	r2, #29664	; 0x73e0
   14df4:	movt	r2, #1
   14df8:	mov	r1, r0
   14dfc:	mov	r0, #1
   14e00:	bl	110d0 <__printf_chk@plt>
   14e04:	mov	r2, #5
   14e08:	movw	r1, #29688	; 0x73f8
   14e0c:	movt	r1, #1
   14e10:	mov	r0, #0
   14e14:	bl	10f74 <dcgettext@plt>
   14e18:	movw	r3, #27908	; 0x6d04
   14e1c:	movt	r3, #1
   14e20:	movw	r2, #27948	; 0x6d2c
   14e24:	movt	r2, #1
   14e28:	mov	r1, r0
   14e2c:	mov	r0, #1
   14e30:	bl	110d0 <__printf_chk@plt>
   14e34:	mov	r2, #5
   14e38:	movw	r1, #29708	; 0x740c
   14e3c:	movt	r1, #1
   14e40:	mov	r0, #0
   14e44:	bl	10f74 <dcgettext@plt>
   14e48:	movw	r2, #29748	; 0x7434
   14e4c:	movt	r2, #1
   14e50:	mov	r1, r0
   14e54:	mov	r0, #1
   14e58:	bl	110d0 <__printf_chk@plt>
   14e5c:	ldr	r4, [sp]
   14e60:	add	sp, sp, #4
   14e64:	pop	{pc}		; (ldr pc, [sp], #4)
   14e68:	str	r4, [sp, #-8]!
   14e6c:	str	lr, [sp, #4]
   14e70:	bl	15fd0 <__assert_fail@plt+0x4e28>
   14e74:	cmp	r0, #0
   14e78:	beq	14e88 <__assert_fail@plt+0x3ce0>
   14e7c:	ldr	r4, [sp]
   14e80:	add	sp, sp, #4
   14e84:	pop	{pc}		; (ldr pc, [sp], #4)
   14e88:	bl	152fc <__assert_fail@plt+0x4154>
   14e8c:	str	r4, [sp, #-8]!
   14e90:	str	lr, [sp, #4]
   14e94:	bl	15fd0 <__assert_fail@plt+0x4e28>
   14e98:	cmp	r0, #0
   14e9c:	beq	14eac <__assert_fail@plt+0x3d04>
   14ea0:	ldr	r4, [sp]
   14ea4:	add	sp, sp, #4
   14ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   14eac:	bl	152fc <__assert_fail@plt+0x4154>
   14eb0:	str	r4, [sp, #-8]!
   14eb4:	str	lr, [sp, #4]
   14eb8:	bl	14e68 <__assert_fail@plt+0x3cc0>
   14ebc:	ldr	r4, [sp]
   14ec0:	add	sp, sp, #4
   14ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec8:	strd	r4, [sp, #-16]!
   14ecc:	str	r6, [sp, #8]
   14ed0:	str	lr, [sp, #12]
   14ed4:	mov	r5, r0
   14ed8:	mov	r4, r1
   14edc:	bl	1600c <__assert_fail@plt+0x4e64>
   14ee0:	cmp	r0, #0
   14ee4:	beq	14ef8 <__assert_fail@plt+0x3d50>
   14ee8:	ldrd	r4, [sp]
   14eec:	ldr	r6, [sp, #8]
   14ef0:	add	sp, sp, #12
   14ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef8:	adds	r4, r4, #0
   14efc:	movne	r4, #1
   14f00:	cmp	r5, #0
   14f04:	moveq	r4, #1
   14f08:	cmp	r4, #0
   14f0c:	beq	14ee8 <__assert_fail@plt+0x3d40>
   14f10:	bl	152fc <__assert_fail@plt+0x4154>
   14f14:	str	r4, [sp, #-8]!
   14f18:	str	lr, [sp, #4]
   14f1c:	cmp	r1, #0
   14f20:	orreq	r1, r1, #1
   14f24:	bl	1600c <__assert_fail@plt+0x4e64>
   14f28:	cmp	r0, #0
   14f2c:	beq	14f3c <__assert_fail@plt+0x3d94>
   14f30:	ldr	r4, [sp]
   14f34:	add	sp, sp, #4
   14f38:	pop	{pc}		; (ldr pc, [sp], #4)
   14f3c:	bl	152fc <__assert_fail@plt+0x4154>
   14f40:	strd	r4, [sp, #-16]!
   14f44:	str	r6, [sp, #8]
   14f48:	str	lr, [sp, #12]
   14f4c:	mov	r4, r0
   14f50:	mov	r6, r1
   14f54:	mov	r5, r2
   14f58:	bl	1669c <__assert_fail@plt+0x54f4>
   14f5c:	cmp	r0, #0
   14f60:	beq	14f74 <__assert_fail@plt+0x3dcc>
   14f64:	ldrd	r4, [sp]
   14f68:	ldr	r6, [sp, #8]
   14f6c:	add	sp, sp, #12
   14f70:	pop	{pc}		; (ldr pc, [sp], #4)
   14f74:	cmp	r4, #0
   14f78:	beq	14f88 <__assert_fail@plt+0x3de0>
   14f7c:	cmp	r6, #0
   14f80:	cmpne	r5, #0
   14f84:	beq	14f64 <__assert_fail@plt+0x3dbc>
   14f88:	bl	152fc <__assert_fail@plt+0x4154>
   14f8c:	str	r4, [sp, #-8]!
   14f90:	str	lr, [sp, #4]
   14f94:	bl	14f40 <__assert_fail@plt+0x3d98>
   14f98:	ldr	r4, [sp]
   14f9c:	add	sp, sp, #4
   14fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa4:	str	r4, [sp, #-8]!
   14fa8:	str	lr, [sp, #4]
   14fac:	mov	ip, r1
   14fb0:	mov	r3, r2
   14fb4:	cmp	r2, #0
   14fb8:	cmpne	r1, #0
   14fbc:	moveq	r3, #1
   14fc0:	moveq	ip, r3
   14fc4:	mov	r2, r3
   14fc8:	mov	r1, ip
   14fcc:	bl	1669c <__assert_fail@plt+0x54f4>
   14fd0:	cmp	r0, #0
   14fd4:	beq	14fe4 <__assert_fail@plt+0x3e3c>
   14fd8:	ldr	r4, [sp]
   14fdc:	add	sp, sp, #4
   14fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fe4:	bl	152fc <__assert_fail@plt+0x4154>
   14fe8:	str	r4, [sp, #-8]!
   14fec:	str	lr, [sp, #4]
   14ff0:	mov	r2, r1
   14ff4:	mov	r1, r0
   14ff8:	mov	r0, #0
   14ffc:	bl	14f40 <__assert_fail@plt+0x3d98>
   15000:	ldr	r4, [sp]
   15004:	add	sp, sp, #4
   15008:	pop	{pc}		; (ldr pc, [sp], #4)
   1500c:	str	r4, [sp, #-8]!
   15010:	str	lr, [sp, #4]
   15014:	mov	r2, r1
   15018:	mov	r1, r0
   1501c:	mov	r0, #0
   15020:	bl	14fa4 <__assert_fail@plt+0x3dfc>
   15024:	ldr	r4, [sp]
   15028:	add	sp, sp, #4
   1502c:	pop	{pc}		; (ldr pc, [sp], #4)
   15030:	strd	r4, [sp, #-16]!
   15034:	str	r6, [sp, #8]
   15038:	str	lr, [sp, #12]
   1503c:	mov	r5, r1
   15040:	ldr	r4, [r1]
   15044:	cmp	r0, #0
   15048:	beq	15078 <__assert_fail@plt+0x3ed0>
   1504c:	lsr	r3, r4, #1
   15050:	add	r3, r3, #1
   15054:	adds	r4, r4, r3
   15058:	bcs	15094 <__assert_fail@plt+0x3eec>
   1505c:	mov	r1, r4
   15060:	bl	14f40 <__assert_fail@plt+0x3d98>
   15064:	str	r4, [r5]
   15068:	ldrd	r4, [sp]
   1506c:	ldr	r6, [sp, #8]
   15070:	add	sp, sp, #12
   15074:	pop	{pc}		; (ldr pc, [sp], #4)
   15078:	cmp	r4, #0
   1507c:	bne	1505c <__assert_fail@plt+0x3eb4>
   15080:	mov	r4, #64	; 0x40
   15084:	udiv	r4, r4, r2
   15088:	cmp	r2, #64	; 0x40
   1508c:	addhi	r4, r4, #1
   15090:	b	1505c <__assert_fail@plt+0x3eb4>
   15094:	bl	152fc <__assert_fail@plt+0x4154>
   15098:	str	r4, [sp, #-8]!
   1509c:	str	lr, [sp, #4]
   150a0:	mov	r2, #1
   150a4:	bl	15030 <__assert_fail@plt+0x3e88>
   150a8:	ldr	r4, [sp]
   150ac:	add	sp, sp, #4
   150b0:	pop	{pc}		; (ldr pc, [sp], #4)
   150b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   150b8:	strd	r6, [sp, #8]
   150bc:	str	r8, [sp, #16]
   150c0:	str	lr, [sp, #20]
   150c4:	mov	r5, r1
   150c8:	ldr	lr, [sp, #24]
   150cc:	ldr	ip, [r1]
   150d0:	asr	r4, ip, #1
   150d4:	adds	r4, ip, r4
   150d8:	movvs	r1, #1
   150dc:	movvc	r1, #0
   150e0:	cmp	r1, #0
   150e4:	mvnne	r4, #-2147483648	; 0x80000000
   150e8:	mvn	r8, r3
   150ec:	lsr	r8, r8, #31
   150f0:	cmp	r3, r4
   150f4:	movge	r1, #0
   150f8:	andlt	r1, r8, #1
   150fc:	cmp	r1, #0
   15100:	movne	r4, r3
   15104:	smull	r6, r7, r4, lr
   15108:	asr	r1, r6, #31
   1510c:	cmp	r1, r7
   15110:	bne	15128 <__assert_fail@plt+0x3f80>
   15114:	mov	r1, r6
   15118:	cmp	r6, #63	; 0x3f
   1511c:	movle	r1, #64	; 0x40
   15120:	ble	1512c <__assert_fail@plt+0x3f84>
   15124:	b	15138 <__assert_fail@plt+0x3f90>
   15128:	mvn	r1, #-2147483648	; 0x80000000
   1512c:	sdiv	r4, r1, lr
   15130:	mls	r6, lr, r4, r1
   15134:	sub	r1, r1, r6
   15138:	cmp	r0, #0
   1513c:	moveq	r6, #0
   15140:	streq	r6, [r5]
   15144:	sub	r6, r4, ip
   15148:	cmp	r6, r2
   1514c:	bge	15184 <__assert_fail@plt+0x3fdc>
   15150:	adds	r2, ip, r2
   15154:	mov	r4, r2
   15158:	bvs	151a0 <__assert_fail@plt+0x3ff8>
   1515c:	cmp	r2, r3
   15160:	movle	r3, #0
   15164:	andgt	r3, r8, #1
   15168:	cmp	r3, #0
   1516c:	bne	151a0 <__assert_fail@plt+0x3ff8>
   15170:	smull	r2, r3, r2, lr
   15174:	asr	ip, r2, #31
   15178:	mov	r1, r2
   1517c:	cmp	ip, r3
   15180:	bne	151a0 <__assert_fail@plt+0x3ff8>
   15184:	bl	14ec8 <__assert_fail@plt+0x3d20>
   15188:	str	r4, [r5]
   1518c:	ldrd	r4, [sp]
   15190:	ldrd	r6, [sp, #8]
   15194:	ldr	r8, [sp, #16]
   15198:	add	sp, sp, #20
   1519c:	pop	{pc}		; (ldr pc, [sp], #4)
   151a0:	bl	152fc <__assert_fail@plt+0x4154>
   151a4:	str	r4, [sp, #-8]!
   151a8:	str	lr, [sp, #4]
   151ac:	bl	15f5c <__assert_fail@plt+0x4db4>
   151b0:	cmp	r0, #0
   151b4:	beq	151c4 <__assert_fail@plt+0x401c>
   151b8:	ldr	r4, [sp]
   151bc:	add	sp, sp, #4
   151c0:	pop	{pc}		; (ldr pc, [sp], #4)
   151c4:	bl	152fc <__assert_fail@plt+0x4154>
   151c8:	str	r4, [sp, #-8]!
   151cc:	str	lr, [sp, #4]
   151d0:	mov	r1, #1
   151d4:	bl	151a4 <__assert_fail@plt+0x3ffc>
   151d8:	ldr	r4, [sp]
   151dc:	add	sp, sp, #4
   151e0:	pop	{pc}		; (ldr pc, [sp], #4)
   151e4:	str	r4, [sp, #-8]!
   151e8:	str	lr, [sp, #4]
   151ec:	bl	15f5c <__assert_fail@plt+0x4db4>
   151f0:	cmp	r0, #0
   151f4:	beq	15204 <__assert_fail@plt+0x405c>
   151f8:	ldr	r4, [sp]
   151fc:	add	sp, sp, #4
   15200:	pop	{pc}		; (ldr pc, [sp], #4)
   15204:	bl	152fc <__assert_fail@plt+0x4154>
   15208:	str	r4, [sp, #-8]!
   1520c:	str	lr, [sp, #4]
   15210:	mov	r1, #1
   15214:	bl	151e4 <__assert_fail@plt+0x403c>
   15218:	ldr	r4, [sp]
   1521c:	add	sp, sp, #4
   15220:	pop	{pc}		; (ldr pc, [sp], #4)
   15224:	strd	r4, [sp, #-16]!
   15228:	str	r6, [sp, #8]
   1522c:	str	lr, [sp, #12]
   15230:	mov	r5, r0
   15234:	mov	r4, r1
   15238:	mov	r0, r1
   1523c:	bl	14e68 <__assert_fail@plt+0x3cc0>
   15240:	mov	r2, r4
   15244:	mov	r1, r5
   15248:	bl	10f2c <memcpy@plt>
   1524c:	ldrd	r4, [sp]
   15250:	ldr	r6, [sp, #8]
   15254:	add	sp, sp, #12
   15258:	pop	{pc}		; (ldr pc, [sp], #4)
   1525c:	strd	r4, [sp, #-16]!
   15260:	str	r6, [sp, #8]
   15264:	str	lr, [sp, #12]
   15268:	mov	r5, r0
   1526c:	mov	r4, r1
   15270:	mov	r0, r1
   15274:	bl	14e8c <__assert_fail@plt+0x3ce4>
   15278:	mov	r2, r4
   1527c:	mov	r1, r5
   15280:	bl	10f2c <memcpy@plt>
   15284:	ldrd	r4, [sp]
   15288:	ldr	r6, [sp, #8]
   1528c:	add	sp, sp, #12
   15290:	pop	{pc}		; (ldr pc, [sp], #4)
   15294:	strd	r4, [sp, #-16]!
   15298:	str	r6, [sp, #8]
   1529c:	str	lr, [sp, #12]
   152a0:	mov	r5, r0
   152a4:	mov	r4, r1
   152a8:	add	r0, r1, #1
   152ac:	bl	14e8c <__assert_fail@plt+0x3ce4>
   152b0:	mov	r2, #0
   152b4:	strb	r2, [r0, r4]
   152b8:	mov	r2, r4
   152bc:	mov	r1, r5
   152c0:	bl	10f2c <memcpy@plt>
   152c4:	ldrd	r4, [sp]
   152c8:	ldr	r6, [sp, #8]
   152cc:	add	sp, sp, #12
   152d0:	pop	{pc}		; (ldr pc, [sp], #4)
   152d4:	str	r4, [sp, #-8]!
   152d8:	str	lr, [sp, #4]
   152dc:	mov	r4, r0
   152e0:	bl	11088 <strlen@plt>
   152e4:	add	r1, r0, #1
   152e8:	mov	r0, r4
   152ec:	bl	15224 <__assert_fail@plt+0x407c>
   152f0:	ldr	r4, [sp]
   152f4:	add	sp, sp, #4
   152f8:	pop	{pc}		; (ldr pc, [sp], #4)
   152fc:	str	r4, [sp, #-8]!
   15300:	str	lr, [sp, #4]
   15304:	movw	r3, #33052	; 0x811c
   15308:	movt	r3, #2
   1530c:	ldr	r4, [r3]
   15310:	mov	r2, #5
   15314:	movw	r1, #29828	; 0x7484
   15318:	movt	r1, #1
   1531c:	mov	r0, #0
   15320:	bl	10f74 <dcgettext@plt>
   15324:	mov	r3, r0
   15328:	movw	r2, #28700	; 0x701c
   1532c:	movt	r2, #1
   15330:	mov	r1, #0
   15334:	mov	r0, r4
   15338:	bl	11004 <error@plt>
   1533c:	bl	11184 <abort@plt>
   15340:	str	r4, [sp, #-8]!
   15344:	str	lr, [sp, #4]
   15348:	bl	16470 <__assert_fail@plt+0x52c8>
   1534c:	mov	r4, r0
   15350:	cmn	r0, #1
   15354:	beq	15368 <__assert_fail@plt+0x41c0>
   15358:	mov	r0, r4
   1535c:	ldr	r4, [sp]
   15360:	add	sp, sp, #4
   15364:	pop	{pc}		; (ldr pc, [sp], #4)
   15368:	bl	110a0 <__errno_location@plt>
   1536c:	ldr	r3, [r0]
   15370:	cmp	r3, #12
   15374:	bne	15358 <__assert_fail@plt+0x41b0>
   15378:	bl	152fc <__assert_fail@plt+0x4154>
   1537c:	cmp	r2, #0
   15380:	beq	153e8 <__assert_fail@plt+0x4240>
   15384:	strd	r4, [sp, #-8]!
   15388:	sub	ip, r2, #1
   1538c:	ldr	r4, [r0]
   15390:	mov	r2, #0
   15394:	mov	r3, #0
   15398:	cmp	r1, r3
   1539c:	blt	153dc <__assert_fail@plt+0x4234>
   153a0:	umull	r4, r5, r1, r4
   153a4:	cmp	r5, #0
   153a8:	movne	r3, #1
   153ac:	and	r3, r3, #1
   153b0:	cmp	r3, #0
   153b4:	mvnne	r4, #0
   153b8:	orr	r2, r2, r3
   153bc:	sub	ip, ip, #1
   153c0:	cmn	ip, #1
   153c4:	bne	15394 <__assert_fail@plt+0x41ec>
   153c8:	str	r4, [r0]
   153cc:	mov	r0, r2
   153d0:	ldrd	r4, [sp]
   153d4:	add	sp, sp, #8
   153d8:	bx	lr
   153dc:	subs	r3, r4, r3
   153e0:	movne	r3, #1
   153e4:	b	153a0 <__assert_fail@plt+0x41f8>
   153e8:	mov	r2, #0
   153ec:	mov	r0, r2
   153f0:	bx	lr
   153f4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   153f8:	strd	r6, [sp, #8]
   153fc:	strd	r8, [sp, #16]
   15400:	str	lr, [sp, #24]
   15404:	sub	sp, sp, #12
   15408:	cmp	r2, #36	; 0x24
   1540c:	bhi	15460 <__assert_fail@plt+0x42b8>
   15410:	mov	r5, r0
   15414:	mov	r6, r1
   15418:	mov	r7, r2
   1541c:	mov	r9, r3
   15420:	cmp	r1, #0
   15424:	addeq	r6, sp, #4
   15428:	bl	110a0 <__errno_location@plt>
   1542c:	mov	r8, r0
   15430:	mov	r3, #0
   15434:	str	r3, [r0]
   15438:	ldrb	r4, [r5]
   1543c:	bl	11064 <__ctype_b_loc@plt>
   15440:	ldr	r1, [r0]
   15444:	mov	r2, r5
   15448:	lsl	r3, r4, #1
   1544c:	ldrh	r3, [r1, r3]
   15450:	tst	r3, #8192	; 0x2000
   15454:	beq	15480 <__assert_fail@plt+0x42d8>
   15458:	ldrb	r4, [r2, #1]!
   1545c:	b	15448 <__assert_fail@plt+0x42a0>
   15460:	movw	r3, #29848	; 0x7498
   15464:	movt	r3, #1
   15468:	mov	r2, #85	; 0x55
   1546c:	movw	r1, #29860	; 0x74a4
   15470:	movt	r1, #1
   15474:	movw	r0, #29876	; 0x74b4
   15478:	movt	r0, #1
   1547c:	bl	111a8 <__assert_fail@plt>
   15480:	cmp	r4, #45	; 0x2d
   15484:	moveq	r4, #4
   15488:	beq	15614 <__assert_fail@plt+0x446c>
   1548c:	mov	r2, r7
   15490:	mov	r1, r6
   15494:	mov	r0, r5
   15498:	bl	1107c <strtoul@plt>
   1549c:	str	r0, [sp]
   154a0:	ldr	r7, [r6]
   154a4:	cmp	r7, r5
   154a8:	beq	154cc <__assert_fail@plt+0x4324>
   154ac:	ldr	r3, [r8]
   154b0:	cmp	r3, #0
   154b4:	beq	155ec <__assert_fail@plt+0x4444>
   154b8:	cmp	r3, #34	; 0x22
   154bc:	moveq	r4, #1
   154c0:	beq	155f0 <__assert_fail@plt+0x4448>
   154c4:	mov	r4, #4
   154c8:	b	15614 <__assert_fail@plt+0x446c>
   154cc:	ldr	r3, [sp, #40]	; 0x28
   154d0:	cmp	r3, #0
   154d4:	beq	158d8 <__assert_fail@plt+0x4730>
   154d8:	ldrb	r1, [r5]
   154dc:	cmp	r1, #0
   154e0:	moveq	r4, #4
   154e4:	beq	15614 <__assert_fail@plt+0x446c>
   154e8:	mov	r0, r3
   154ec:	bl	11094 <strchr@plt>
   154f0:	cmp	r0, #0
   154f4:	beq	158e0 <__assert_fail@plt+0x4738>
   154f8:	mov	r3, #1
   154fc:	str	r3, [sp]
   15500:	ldrb	r5, [r7]
   15504:	mov	r4, #0
   15508:	mov	r1, r5
   1550c:	ldr	r0, [sp, #40]	; 0x28
   15510:	bl	11094 <strchr@plt>
   15514:	cmp	r0, #0
   15518:	beq	15630 <__assert_fail@plt+0x4488>
   1551c:	sub	r3, r5, #69	; 0x45
   15520:	cmp	r3, #47	; 0x2f
   15524:	ldrls	pc, [pc, r3, lsl #2]
   15528:	b	1577c <__assert_fail@plt+0x45d4>
   1552c:	andeq	r5, r1, r0, asr #12
   15530:	andeq	r5, r1, ip, ror r7
   15534:	andeq	r5, r1, r0, asr #12
   15538:	andeq	r5, r1, ip, ror r7
   1553c:	andeq	r5, r1, ip, ror r7
   15540:	andeq	r5, r1, ip, ror r7
   15544:	andeq	r5, r1, r0, asr #12
   15548:	andeq	r5, r1, ip, ror r7
   1554c:	andeq	r5, r1, r0, asr #12
   15550:	andeq	r5, r1, ip, ror r7
   15554:	andeq	r5, r1, ip, ror r7
   15558:	andeq	r5, r1, r0, asr #12
   1555c:	andeq	r5, r1, ip, ror r7
   15560:	andeq	r5, r1, ip, ror r7
   15564:	andeq	r5, r1, ip, ror r7
   15568:	andeq	r5, r1, r0, asr #12
   1556c:	andeq	r5, r1, ip, ror r7
   15570:	andeq	r5, r1, ip, ror r7
   15574:	andeq	r5, r1, ip, ror r7
   15578:	andeq	r5, r1, ip, ror r7
   1557c:	andeq	r5, r1, r0, asr #12
   15580:	andeq	r5, r1, r0, asr #12
   15584:	andeq	r5, r1, ip, ror r7
   15588:	andeq	r5, r1, ip, ror r7
   1558c:	andeq	r5, r1, ip, ror r7
   15590:	andeq	r5, r1, ip, ror r7
   15594:	andeq	r5, r1, ip, ror r7
   15598:	andeq	r5, r1, ip, ror r7
   1559c:	andeq	r5, r1, ip, ror r7
   155a0:	andeq	r5, r1, ip, ror r7
   155a4:	andeq	r5, r1, ip, ror r7
   155a8:	andeq	r5, r1, ip, ror r7
   155ac:	andeq	r5, r1, ip, ror r7
   155b0:	andeq	r5, r1, ip, ror r7
   155b4:	andeq	r5, r1, r0, asr #12
   155b8:	andeq	r5, r1, ip, ror r7
   155bc:	andeq	r5, r1, ip, ror r7
   155c0:	andeq	r5, r1, ip, ror r7
   155c4:	andeq	r5, r1, r0, asr #12
   155c8:	andeq	r5, r1, ip, ror r7
   155cc:	andeq	r5, r1, r0, asr #12
   155d0:	andeq	r5, r1, ip, ror r7
   155d4:	andeq	r5, r1, ip, ror r7
   155d8:	andeq	r5, r1, ip, ror r7
   155dc:	andeq	r5, r1, ip, ror r7
   155e0:	andeq	r5, r1, ip, ror r7
   155e4:	andeq	r5, r1, ip, ror r7
   155e8:	andeq	r5, r1, r0, asr #12
   155ec:	mov	r4, #0
   155f0:	ldr	r3, [sp, #40]	; 0x28
   155f4:	cmp	r3, #0
   155f8:	streq	r0, [r9]
   155fc:	beq	15614 <__assert_fail@plt+0x446c>
   15600:	ldrb	r5, [r7]
   15604:	cmp	r5, #0
   15608:	bne	15508 <__assert_fail@plt+0x4360>
   1560c:	ldr	r3, [sp]
   15610:	str	r3, [r9]
   15614:	mov	r0, r4
   15618:	add	sp, sp, #12
   1561c:	ldrd	r4, [sp]
   15620:	ldrd	r6, [sp, #8]
   15624:	ldrd	r8, [sp, #16]
   15628:	add	sp, sp, #24
   1562c:	pop	{pc}		; (ldr pc, [sp], #4)
   15630:	ldr	r3, [sp]
   15634:	str	r3, [r9]
   15638:	orr	r4, r4, #2
   1563c:	b	15614 <__assert_fail@plt+0x446c>
   15640:	mov	r1, #48	; 0x30
   15644:	ldr	r0, [sp, #40]	; 0x28
   15648:	bl	11094 <strchr@plt>
   1564c:	cmp	r0, #0
   15650:	beq	15788 <__assert_fail@plt+0x45e0>
   15654:	ldrb	r3, [r7, #1]
   15658:	cmp	r3, #68	; 0x44
   1565c:	beq	15794 <__assert_fail@plt+0x45ec>
   15660:	cmp	r3, #105	; 0x69
   15664:	beq	15764 <__assert_fail@plt+0x45bc>
   15668:	cmp	r3, #66	; 0x42
   1566c:	moveq	r7, #2
   15670:	movne	r7, #1
   15674:	moveq	r1, #1000	; 0x3e8
   15678:	movne	r1, #1024	; 0x400
   1567c:	sub	r5, r5, #66	; 0x42
   15680:	cmp	r5, #53	; 0x35
   15684:	ldrls	pc, [pc, r5, lsl #2]
   15688:	b	158a4 <__assert_fail@plt+0x46fc>
   1568c:	andeq	r5, r1, ip, asr #15
   15690:	andeq	r5, r1, r4, lsr #17
   15694:	andeq	r5, r1, r4, lsr #17
   15698:	strdeq	r5, [r1], -r8
   1569c:	andeq	r5, r1, r4, lsr #17
   156a0:	andeq	r5, r1, r8, lsl #16
   156a4:	andeq	r5, r1, r4, lsr #17
   156a8:	andeq	r5, r1, r4, lsr #17
   156ac:	andeq	r5, r1, r4, lsr #17
   156b0:	andeq	r5, r1, r8, lsl r8
   156b4:	andeq	r5, r1, r4, lsr #17
   156b8:	andeq	r5, r1, r8, lsr #16
   156bc:	andeq	r5, r1, r4, lsr #17
   156c0:	andeq	r5, r1, r4, lsr #17
   156c4:	andeq	r5, r1, r8, lsr r8
   156c8:	andeq	r5, r1, r4, lsr #17
   156cc:	andeq	r5, r1, r4, lsr #17
   156d0:	andeq	r5, r1, r4, lsr #17
   156d4:	andeq	r5, r1, r8, asr #16
   156d8:	andeq	r5, r1, r4, lsr #17
   156dc:	andeq	r5, r1, r4, lsr #17
   156e0:	andeq	r5, r1, r4, lsr #17
   156e4:	andeq	r5, r1, r4, lsr #17
   156e8:	andeq	r5, r1, r4, lsl #17
   156ec:	muleq	r1, r4, r8
   156f0:	andeq	r5, r1, r4, lsr #17
   156f4:	andeq	r5, r1, r4, lsr #17
   156f8:	andeq	r5, r1, r4, lsr #17
   156fc:	andeq	r5, r1, r4, lsr #17
   15700:	andeq	r5, r1, r4, lsr #17
   15704:	andeq	r5, r1, r4, lsr #17
   15708:	andeq	r5, r1, r4, lsr #17
   1570c:	andeq	r5, r1, r0, lsr #15
   15710:			; <UNDEFINED> instruction: 0x000158b4
   15714:	andeq	r5, r1, r4, lsr #17
   15718:	andeq	r5, r1, r4, lsr #17
   1571c:	andeq	r5, r1, r4, lsr #17
   15720:	andeq	r5, r1, r8, lsl #16
   15724:	andeq	r5, r1, r4, lsr #17
   15728:	andeq	r5, r1, r4, lsr #17
   1572c:	andeq	r5, r1, r4, lsr #17
   15730:	andeq	r5, r1, r8, lsl r8
   15734:	andeq	r5, r1, r4, lsr #17
   15738:	andeq	r5, r1, r8, lsr #16
   1573c:	andeq	r5, r1, r4, lsr #17
   15740:	andeq	r5, r1, r4, lsr #17
   15744:	andeq	r5, r1, r4, lsr #17
   15748:	andeq	r5, r1, r4, lsr #17
   1574c:	andeq	r5, r1, r4, lsr #17
   15750:	andeq	r5, r1, r4, lsr #17
   15754:	andeq	r5, r1, r8, asr #16
   15758:	andeq	r5, r1, r4, lsr #17
   1575c:	andeq	r5, r1, r4, lsr #17
   15760:	andeq	r5, r1, r8, asr r8
   15764:	ldrb	r3, [r7, #2]
   15768:	cmp	r3, #66	; 0x42
   1576c:	movne	r7, #1
   15770:	moveq	r7, #3
   15774:	mov	r1, #1024	; 0x400
   15778:	b	1567c <__assert_fail@plt+0x44d4>
   1577c:	mov	r7, #1
   15780:	mov	r1, #1024	; 0x400
   15784:	b	1567c <__assert_fail@plt+0x44d4>
   15788:	mov	r7, #1
   1578c:	mov	r1, #1024	; 0x400
   15790:	b	1567c <__assert_fail@plt+0x44d4>
   15794:	mov	r7, #2
   15798:	mov	r1, #1000	; 0x3e8
   1579c:	b	1567c <__assert_fail@plt+0x44d4>
   157a0:	ldr	r3, [sp]
   157a4:	lsl	r2, r3, #9
   157a8:	lsr	r3, r3, #23
   157ac:	cmp	r3, #0
   157b0:	mvnne	r3, #0
   157b4:	strne	r3, [sp]
   157b8:	movne	r0, #1
   157bc:	bne	158b8 <__assert_fail@plt+0x4710>
   157c0:	str	r2, [sp]
   157c4:	mov	r0, #0
   157c8:	b	158b8 <__assert_fail@plt+0x4710>
   157cc:	ldr	r3, [sp]
   157d0:	lsl	r2, r3, #10
   157d4:	lsr	r3, r3, #22
   157d8:	cmp	r3, #0
   157dc:	mvnne	r3, #0
   157e0:	strne	r3, [sp]
   157e4:	movne	r0, #1
   157e8:	bne	158b8 <__assert_fail@plt+0x4710>
   157ec:	str	r2, [sp]
   157f0:	mov	r0, #0
   157f4:	b	158b8 <__assert_fail@plt+0x4710>
   157f8:	mov	r2, #6
   157fc:	mov	r0, sp
   15800:	bl	1537c <__assert_fail@plt+0x41d4>
   15804:	b	158b8 <__assert_fail@plt+0x4710>
   15808:	mov	r2, #3
   1580c:	mov	r0, sp
   15810:	bl	1537c <__assert_fail@plt+0x41d4>
   15814:	b	158b8 <__assert_fail@plt+0x4710>
   15818:	mov	r2, #1
   1581c:	mov	r0, sp
   15820:	bl	1537c <__assert_fail@plt+0x41d4>
   15824:	b	158b8 <__assert_fail@plt+0x4710>
   15828:	mov	r2, #2
   1582c:	mov	r0, sp
   15830:	bl	1537c <__assert_fail@plt+0x41d4>
   15834:	b	158b8 <__assert_fail@plt+0x4710>
   15838:	mov	r2, #5
   1583c:	mov	r0, sp
   15840:	bl	1537c <__assert_fail@plt+0x41d4>
   15844:	b	158b8 <__assert_fail@plt+0x4710>
   15848:	mov	r2, #4
   1584c:	mov	r0, sp
   15850:	bl	1537c <__assert_fail@plt+0x41d4>
   15854:	b	158b8 <__assert_fail@plt+0x4710>
   15858:	ldr	r3, [sp]
   1585c:	lsl	r2, r3, #1
   15860:	lsr	r3, r3, #31
   15864:	cmp	r3, #0
   15868:	mvnne	r3, #0
   1586c:	strne	r3, [sp]
   15870:	movne	r0, #1
   15874:	bne	158b8 <__assert_fail@plt+0x4710>
   15878:	str	r2, [sp]
   1587c:	mov	r0, #0
   15880:	b	158b8 <__assert_fail@plt+0x4710>
   15884:	mov	r2, #8
   15888:	mov	r0, sp
   1588c:	bl	1537c <__assert_fail@plt+0x41d4>
   15890:	b	158b8 <__assert_fail@plt+0x4710>
   15894:	mov	r2, #7
   15898:	mov	r0, sp
   1589c:	bl	1537c <__assert_fail@plt+0x41d4>
   158a0:	b	158b8 <__assert_fail@plt+0x4710>
   158a4:	ldr	r3, [sp]
   158a8:	str	r3, [r9]
   158ac:	orr	r4, r4, #2
   158b0:	b	15614 <__assert_fail@plt+0x446c>
   158b4:	mov	r0, #0
   158b8:	orr	r4, r4, r0
   158bc:	ldr	r3, [r6]
   158c0:	add	r2, r3, r7
   158c4:	str	r2, [r6]
   158c8:	ldrb	r3, [r3, r7]
   158cc:	cmp	r3, #0
   158d0:	orrne	r4, r4, #2
   158d4:	b	1560c <__assert_fail@plt+0x4464>
   158d8:	mov	r4, #4
   158dc:	b	15614 <__assert_fail@plt+0x446c>
   158e0:	mov	r4, #4
   158e4:	b	15614 <__assert_fail@plt+0x446c>
   158e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158ec:	strd	r6, [sp, #8]
   158f0:	strd	r8, [sp, #16]
   158f4:	strd	sl, [sp, #24]
   158f8:	str	lr, [sp, #32]
   158fc:	sub	sp, sp, #12
   15900:	str	r0, [sp, #4]
   15904:	cmp	r2, #0
   15908:	beq	15a04 <__assert_fail@plt+0x485c>
   1590c:	sub	ip, r2, #1
   15910:	ldrd	r2, [r0]
   15914:	mov	r0, #0
   15918:	mov	r8, r1
   1591c:	asr	r9, r1, #31
   15920:	str	r1, [sp]
   15924:	b	15974 <__assert_fail@plt+0x47cc>
   15928:	orrs	r4, r2, r3
   1592c:	movne	lr, #1
   15930:	b	15984 <__assert_fail@plt+0x47dc>
   15934:	mov	sl, r3
   15938:	ldr	fp, [sp]
   1593c:	umull	r6, r7, r1, r2
   15940:	mov	r4, r7
   15944:	mov	r5, #0
   15948:	umlal	r4, r5, sl, fp
   1594c:	cmp	r5, #0
   15950:	bne	159b8 <__assert_fail@plt+0x4810>
   15954:	cmp	lr, #0
   15958:	bne	159d0 <__assert_fail@plt+0x4828>
   1595c:	mov	r2, r6
   15960:	mov	r3, r4
   15964:	orr	r0, r0, lr
   15968:	sub	ip, ip, #1
   1596c:	cmn	ip, #1
   15970:	beq	159e0 <__assert_fail@plt+0x4838>
   15974:	mov	lr, #0
   15978:	cmp	r8, #0
   1597c:	sbcs	r4, r9, #0
   15980:	blt	15928 <__assert_fail@plt+0x4780>
   15984:	cmp	r9, #0
   15988:	bne	159a4 <__assert_fail@plt+0x47fc>
   1598c:	cmp	r3, #0
   15990:	bne	15934 <__assert_fail@plt+0x478c>
   15994:	umull	r2, r3, r1, r2
   15998:	mov	r6, r2
   1599c:	mov	r4, r3
   159a0:	b	15954 <__assert_fail@plt+0x47ac>
   159a4:	cmp	r3, #0
   159a8:	bne	159b8 <__assert_fail@plt+0x4810>
   159ac:	mov	sl, r9
   159b0:	mov	fp, r2
   159b4:	b	1593c <__assert_fail@plt+0x4794>
   159b8:	mul	r4, r1, r3
   159bc:	mla	r4, r2, r9, r4
   159c0:	umull	r6, r7, r1, r2
   159c4:	add	r4, r4, r7
   159c8:	mov	lr, #1
   159cc:	b	15954 <__assert_fail@plt+0x47ac>
   159d0:	mvn	r2, #0
   159d4:	mvn	r3, #0
   159d8:	mov	lr, #1
   159dc:	b	15964 <__assert_fail@plt+0x47bc>
   159e0:	ldr	r1, [sp, #4]
   159e4:	strd	r2, [r1]
   159e8:	add	sp, sp, #12
   159ec:	ldrd	r4, [sp]
   159f0:	ldrd	r6, [sp, #8]
   159f4:	ldrd	r8, [sp, #16]
   159f8:	ldrd	sl, [sp, #24]
   159fc:	add	sp, sp, #32
   15a00:	pop	{pc}		; (ldr pc, [sp], #4)
   15a04:	mov	r0, #0
   15a08:	b	159e8 <__assert_fail@plt+0x4840>
   15a0c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15a10:	strd	r6, [sp, #8]
   15a14:	strd	r8, [sp, #16]
   15a18:	str	lr, [sp, #24]
   15a1c:	sub	sp, sp, #20
   15a20:	cmp	r2, #36	; 0x24
   15a24:	bhi	15a78 <__assert_fail@plt+0x48d0>
   15a28:	mov	r5, r0
   15a2c:	mov	r6, r1
   15a30:	mov	r7, r2
   15a34:	mov	r9, r3
   15a38:	cmp	r1, #0
   15a3c:	addeq	r6, sp, #12
   15a40:	bl	110a0 <__errno_location@plt>
   15a44:	mov	r8, r0
   15a48:	mov	r3, #0
   15a4c:	str	r3, [r0]
   15a50:	ldrb	r4, [r5]
   15a54:	bl	11064 <__ctype_b_loc@plt>
   15a58:	ldr	r1, [r0]
   15a5c:	mov	r2, r5
   15a60:	lsl	r3, r4, #1
   15a64:	ldrh	r3, [r1, r3]
   15a68:	tst	r3, #8192	; 0x2000
   15a6c:	beq	15a98 <__assert_fail@plt+0x48f0>
   15a70:	ldrb	r4, [r2, #1]!
   15a74:	b	15a60 <__assert_fail@plt+0x48b8>
   15a78:	movw	r3, #29916	; 0x74dc
   15a7c:	movt	r3, #1
   15a80:	mov	r2, #85	; 0x55
   15a84:	movw	r1, #29860	; 0x74a4
   15a88:	movt	r1, #1
   15a8c:	movw	r0, #29876	; 0x74b4
   15a90:	movt	r0, #1
   15a94:	bl	111a8 <__assert_fail@plt>
   15a98:	cmp	r4, #45	; 0x2d
   15a9c:	moveq	r4, #4
   15aa0:	beq	15c34 <__assert_fail@plt+0x4a8c>
   15aa4:	mov	r3, #0
   15aa8:	mov	r2, r7
   15aac:	mov	r1, r6
   15ab0:	mov	r0, r5
   15ab4:	bl	10f44 <__strtoull_internal@plt>
   15ab8:	strd	r0, [sp]
   15abc:	ldr	r7, [r6]
   15ac0:	cmp	r7, r5
   15ac4:	beq	15ae8 <__assert_fail@plt+0x4940>
   15ac8:	ldr	r3, [r8]
   15acc:	cmp	r3, #0
   15ad0:	beq	15c0c <__assert_fail@plt+0x4a64>
   15ad4:	cmp	r3, #34	; 0x22
   15ad8:	moveq	r4, #1
   15adc:	beq	15c10 <__assert_fail@plt+0x4a68>
   15ae0:	mov	r4, #4
   15ae4:	b	15c34 <__assert_fail@plt+0x4a8c>
   15ae8:	ldr	r3, [sp, #48]	; 0x30
   15aec:	cmp	r3, #0
   15af0:	beq	15f4c <__assert_fail@plt+0x4da4>
   15af4:	ldrb	r1, [r5]
   15af8:	cmp	r1, #0
   15afc:	moveq	r4, #4
   15b00:	beq	15c34 <__assert_fail@plt+0x4a8c>
   15b04:	mov	r0, r3
   15b08:	bl	11094 <strchr@plt>
   15b0c:	cmp	r0, #0
   15b10:	beq	15f54 <__assert_fail@plt+0x4dac>
   15b14:	mov	r2, #1
   15b18:	mov	r3, #0
   15b1c:	strd	r2, [sp]
   15b20:	ldrb	r5, [r7]
   15b24:	mov	r4, #0
   15b28:	mov	r1, r5
   15b2c:	ldr	r0, [sp, #48]	; 0x30
   15b30:	bl	11094 <strchr@plt>
   15b34:	cmp	r0, #0
   15b38:	beq	15c50 <__assert_fail@plt+0x4aa8>
   15b3c:	sub	r3, r5, #69	; 0x45
   15b40:	cmp	r3, #47	; 0x2f
   15b44:	ldrls	pc, [pc, r3, lsl #2]
   15b48:	b	15d9c <__assert_fail@plt+0x4bf4>
   15b4c:	andeq	r5, r1, r0, ror #24
   15b50:	muleq	r1, ip, sp
   15b54:	andeq	r5, r1, r0, ror #24
   15b58:	muleq	r1, ip, sp
   15b5c:	muleq	r1, ip, sp
   15b60:	muleq	r1, ip, sp
   15b64:	andeq	r5, r1, r0, ror #24
   15b68:	muleq	r1, ip, sp
   15b6c:	andeq	r5, r1, r0, ror #24
   15b70:	muleq	r1, ip, sp
   15b74:	muleq	r1, ip, sp
   15b78:	andeq	r5, r1, r0, ror #24
   15b7c:	muleq	r1, ip, sp
   15b80:	muleq	r1, ip, sp
   15b84:	muleq	r1, ip, sp
   15b88:	andeq	r5, r1, r0, ror #24
   15b8c:	muleq	r1, ip, sp
   15b90:	muleq	r1, ip, sp
   15b94:	muleq	r1, ip, sp
   15b98:	muleq	r1, ip, sp
   15b9c:	andeq	r5, r1, r0, ror #24
   15ba0:	andeq	r5, r1, r0, ror #24
   15ba4:	muleq	r1, ip, sp
   15ba8:	muleq	r1, ip, sp
   15bac:	muleq	r1, ip, sp
   15bb0:	muleq	r1, ip, sp
   15bb4:	muleq	r1, ip, sp
   15bb8:	muleq	r1, ip, sp
   15bbc:	muleq	r1, ip, sp
   15bc0:	muleq	r1, ip, sp
   15bc4:	muleq	r1, ip, sp
   15bc8:	muleq	r1, ip, sp
   15bcc:	muleq	r1, ip, sp
   15bd0:	muleq	r1, ip, sp
   15bd4:	andeq	r5, r1, r0, ror #24
   15bd8:	muleq	r1, ip, sp
   15bdc:	muleq	r1, ip, sp
   15be0:	muleq	r1, ip, sp
   15be4:	andeq	r5, r1, r0, ror #24
   15be8:	muleq	r1, ip, sp
   15bec:	andeq	r5, r1, r0, ror #24
   15bf0:	muleq	r1, ip, sp
   15bf4:	muleq	r1, ip, sp
   15bf8:	muleq	r1, ip, sp
   15bfc:	muleq	r1, ip, sp
   15c00:	muleq	r1, ip, sp
   15c04:	muleq	r1, ip, sp
   15c08:	andeq	r5, r1, r0, ror #24
   15c0c:	mov	r4, #0
   15c10:	ldr	r3, [sp, #48]	; 0x30
   15c14:	cmp	r3, #0
   15c18:	strdeq	r0, [r9]
   15c1c:	beq	15c34 <__assert_fail@plt+0x4a8c>
   15c20:	ldrb	r5, [r7]
   15c24:	cmp	r5, #0
   15c28:	bne	15b28 <__assert_fail@plt+0x4980>
   15c2c:	ldrd	r2, [sp]
   15c30:	strd	r2, [r9]
   15c34:	mov	r0, r4
   15c38:	add	sp, sp, #20
   15c3c:	ldrd	r4, [sp]
   15c40:	ldrd	r6, [sp, #8]
   15c44:	ldrd	r8, [sp, #16]
   15c48:	add	sp, sp, #24
   15c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c50:	ldrd	r2, [sp]
   15c54:	strd	r2, [r9]
   15c58:	orr	r4, r4, #2
   15c5c:	b	15c34 <__assert_fail@plt+0x4a8c>
   15c60:	mov	r1, #48	; 0x30
   15c64:	ldr	r0, [sp, #48]	; 0x30
   15c68:	bl	11094 <strchr@plt>
   15c6c:	cmp	r0, #0
   15c70:	beq	15da8 <__assert_fail@plt+0x4c00>
   15c74:	ldrb	r3, [r7, #1]
   15c78:	cmp	r3, #68	; 0x44
   15c7c:	beq	15db4 <__assert_fail@plt+0x4c0c>
   15c80:	cmp	r3, #105	; 0x69
   15c84:	beq	15d84 <__assert_fail@plt+0x4bdc>
   15c88:	cmp	r3, #66	; 0x42
   15c8c:	moveq	r7, #2
   15c90:	movne	r7, #1
   15c94:	moveq	r1, #1000	; 0x3e8
   15c98:	movne	r1, #1024	; 0x400
   15c9c:	sub	r5, r5, #66	; 0x42
   15ca0:	cmp	r5, #53	; 0x35
   15ca4:	ldrls	pc, [pc, r5, lsl #2]
   15ca8:	b	15f18 <__assert_fail@plt+0x4d70>
   15cac:	andeq	r5, r1, r8, lsl #28
   15cb0:	andeq	r5, r1, r8, lsl pc
   15cb4:	andeq	r5, r1, r8, lsl pc
   15cb8:	andeq	r5, r1, r0, asr lr
   15cbc:	andeq	r5, r1, r8, lsl pc
   15cc0:	andeq	r5, r1, r0, ror #28
   15cc4:	andeq	r5, r1, r8, lsl pc
   15cc8:	andeq	r5, r1, r8, lsl pc
   15ccc:	andeq	r5, r1, r8, lsl pc
   15cd0:	andeq	r5, r1, r0, ror lr
   15cd4:	andeq	r5, r1, r8, lsl pc
   15cd8:	andeq	r5, r1, r0, lsl #29
   15cdc:	andeq	r5, r1, r8, lsl pc
   15ce0:	andeq	r5, r1, r8, lsl pc
   15ce4:	muleq	r1, r0, lr
   15ce8:	andeq	r5, r1, r8, lsl pc
   15cec:	andeq	r5, r1, r8, lsl pc
   15cf0:	andeq	r5, r1, r8, lsl pc
   15cf4:	andeq	r5, r1, r0, lsr #29
   15cf8:	andeq	r5, r1, r8, lsl pc
   15cfc:	andeq	r5, r1, r8, lsl pc
   15d00:	andeq	r5, r1, r8, lsl pc
   15d04:	andeq	r5, r1, r8, lsl pc
   15d08:	strdeq	r5, [r1], -r8
   15d0c:	andeq	r5, r1, r8, lsl #30
   15d10:	andeq	r5, r1, r8, lsl pc
   15d14:	andeq	r5, r1, r8, lsl pc
   15d18:	andeq	r5, r1, r8, lsl pc
   15d1c:	andeq	r5, r1, r8, lsl pc
   15d20:	andeq	r5, r1, r8, lsl pc
   15d24:	andeq	r5, r1, r8, lsl pc
   15d28:	andeq	r5, r1, r8, lsl pc
   15d2c:	andeq	r5, r1, r0, asr #27
   15d30:	andeq	r5, r1, r8, lsr #30
   15d34:	andeq	r5, r1, r8, lsl pc
   15d38:	andeq	r5, r1, r8, lsl pc
   15d3c:	andeq	r5, r1, r8, lsl pc
   15d40:	andeq	r5, r1, r0, ror #28
   15d44:	andeq	r5, r1, r8, lsl pc
   15d48:	andeq	r5, r1, r8, lsl pc
   15d4c:	andeq	r5, r1, r8, lsl pc
   15d50:	andeq	r5, r1, r0, ror lr
   15d54:	andeq	r5, r1, r8, lsl pc
   15d58:	andeq	r5, r1, r0, lsl #29
   15d5c:	andeq	r5, r1, r8, lsl pc
   15d60:	andeq	r5, r1, r8, lsl pc
   15d64:	andeq	r5, r1, r8, lsl pc
   15d68:	andeq	r5, r1, r8, lsl pc
   15d6c:	andeq	r5, r1, r8, lsl pc
   15d70:	andeq	r5, r1, r8, lsl pc
   15d74:	andeq	r5, r1, r0, lsr #29
   15d78:	andeq	r5, r1, r8, lsl pc
   15d7c:	andeq	r5, r1, r8, lsl pc
   15d80:			; <UNDEFINED> instruction: 0x00015eb0
   15d84:	ldrb	r3, [r7, #2]
   15d88:	cmp	r3, #66	; 0x42
   15d8c:	movne	r7, #1
   15d90:	moveq	r7, #3
   15d94:	mov	r1, #1024	; 0x400
   15d98:	b	15c9c <__assert_fail@plt+0x4af4>
   15d9c:	mov	r7, #1
   15da0:	mov	r1, #1024	; 0x400
   15da4:	b	15c9c <__assert_fail@plt+0x4af4>
   15da8:	mov	r7, #1
   15dac:	mov	r1, #1024	; 0x400
   15db0:	b	15c9c <__assert_fail@plt+0x4af4>
   15db4:	mov	r7, #2
   15db8:	mov	r1, #1000	; 0x3e8
   15dbc:	b	15c9c <__assert_fail@plt+0x4af4>
   15dc0:	ldr	r3, [sp]
   15dc4:	ldr	ip, [sp, #4]
   15dc8:	lsl	r2, ip, #9
   15dcc:	orr	r2, r2, r3, lsr #23
   15dd0:	lsl	r3, r3, #9
   15dd4:	mov	r0, #0
   15dd8:	mov	r1, r0
   15ddc:	lsr	r0, ip, #23
   15de0:	orrs	r1, r0, r1
   15de4:	streq	r3, [sp]
   15de8:	streq	r2, [sp, #4]
   15dec:	moveq	r0, #0
   15df0:	beq	15f2c <__assert_fail@plt+0x4d84>
   15df4:	mvn	r2, #0
   15df8:	mvn	r3, #0
   15dfc:	strd	r2, [sp]
   15e00:	mov	r0, #1
   15e04:	b	15f2c <__assert_fail@plt+0x4d84>
   15e08:	ldr	r3, [sp]
   15e0c:	ldr	ip, [sp, #4]
   15e10:	lsl	r2, ip, #10
   15e14:	orr	r2, r2, r3, lsr #22
   15e18:	lsl	r3, r3, #10
   15e1c:	mov	r0, #0
   15e20:	mov	r1, r0
   15e24:	lsr	r0, ip, #22
   15e28:	orrs	r1, r0, r1
   15e2c:	streq	r3, [sp]
   15e30:	streq	r2, [sp, #4]
   15e34:	moveq	r0, #0
   15e38:	beq	15f2c <__assert_fail@plt+0x4d84>
   15e3c:	mvn	r2, #0
   15e40:	mvn	r3, #0
   15e44:	strd	r2, [sp]
   15e48:	mov	r0, #1
   15e4c:	b	15f2c <__assert_fail@plt+0x4d84>
   15e50:	mov	r2, #6
   15e54:	mov	r0, sp
   15e58:	bl	158e8 <__assert_fail@plt+0x4740>
   15e5c:	b	15f2c <__assert_fail@plt+0x4d84>
   15e60:	mov	r2, #3
   15e64:	mov	r0, sp
   15e68:	bl	158e8 <__assert_fail@plt+0x4740>
   15e6c:	b	15f2c <__assert_fail@plt+0x4d84>
   15e70:	mov	r2, #1
   15e74:	mov	r0, sp
   15e78:	bl	158e8 <__assert_fail@plt+0x4740>
   15e7c:	b	15f2c <__assert_fail@plt+0x4d84>
   15e80:	mov	r2, #2
   15e84:	mov	r0, sp
   15e88:	bl	158e8 <__assert_fail@plt+0x4740>
   15e8c:	b	15f2c <__assert_fail@plt+0x4d84>
   15e90:	mov	r2, #5
   15e94:	mov	r0, sp
   15e98:	bl	158e8 <__assert_fail@plt+0x4740>
   15e9c:	b	15f2c <__assert_fail@plt+0x4d84>
   15ea0:	mov	r2, #4
   15ea4:	mov	r0, sp
   15ea8:	bl	158e8 <__assert_fail@plt+0x4740>
   15eac:	b	15f2c <__assert_fail@plt+0x4d84>
   15eb0:	ldr	r3, [sp]
   15eb4:	ldr	r2, [sp, #4]
   15eb8:	adds	r3, r3, r3
   15ebc:	adc	r2, r2, r2
   15ec0:	mov	r1, #0
   15ec4:	mov	r0, r1
   15ec8:	ldr	r1, [sp, #4]
   15ecc:	lsr	r1, r1, #31
   15ed0:	orrs	r1, r1, r0
   15ed4:	streq	r3, [sp]
   15ed8:	streq	r2, [sp, #4]
   15edc:	moveq	r0, #0
   15ee0:	beq	15f2c <__assert_fail@plt+0x4d84>
   15ee4:	mvn	r2, #0
   15ee8:	mvn	r3, #0
   15eec:	strd	r2, [sp]
   15ef0:	mov	r0, #1
   15ef4:	b	15f2c <__assert_fail@plt+0x4d84>
   15ef8:	mov	r2, #8
   15efc:	mov	r0, sp
   15f00:	bl	158e8 <__assert_fail@plt+0x4740>
   15f04:	b	15f2c <__assert_fail@plt+0x4d84>
   15f08:	mov	r2, #7
   15f0c:	mov	r0, sp
   15f10:	bl	158e8 <__assert_fail@plt+0x4740>
   15f14:	b	15f2c <__assert_fail@plt+0x4d84>
   15f18:	ldrd	r2, [sp]
   15f1c:	strd	r2, [r9]
   15f20:	orr	r4, r4, #2
   15f24:	b	15c34 <__assert_fail@plt+0x4a8c>
   15f28:	mov	r0, #0
   15f2c:	orr	r4, r4, r0
   15f30:	ldr	r3, [r6]
   15f34:	add	r2, r3, r7
   15f38:	str	r2, [r6]
   15f3c:	ldrb	r3, [r3, r7]
   15f40:	cmp	r3, #0
   15f44:	orrne	r4, r4, #2
   15f48:	b	15c2c <__assert_fail@plt+0x4a84>
   15f4c:	mov	r4, #4
   15f50:	b	15c34 <__assert_fail@plt+0x4a8c>
   15f54:	mov	r4, #4
   15f58:	b	15c34 <__assert_fail@plt+0x4a8c>
   15f5c:	strd	r4, [sp, #-16]!
   15f60:	str	r6, [sp, #8]
   15f64:	str	lr, [sp, #12]
   15f68:	cmp	r1, #0
   15f6c:	cmpne	r0, #0
   15f70:	beq	15fac <__assert_fail@plt+0x4e04>
   15f74:	mov	r2, r0
   15f78:	mov	r3, r1
   15f7c:	umull	r4, r5, r0, r1
   15f80:	adds	r1, r5, #0
   15f84:	movne	r1, #1
   15f88:	cmp	r4, #0
   15f8c:	movlt	r1, #1
   15f90:	cmp	r1, #0
   15f94:	beq	15fb4 <__assert_fail@plt+0x4e0c>
   15f98:	bl	110a0 <__errno_location@plt>
   15f9c:	mov	r3, #12
   15fa0:	str	r3, [r0]
   15fa4:	mov	r0, #0
   15fa8:	b	15fc0 <__assert_fail@plt+0x4e18>
   15fac:	mov	r3, #1
   15fb0:	mov	r2, r3
   15fb4:	mov	r1, r3
   15fb8:	mov	r0, r2
   15fbc:	bl	10eb4 <calloc@plt>
   15fc0:	ldrd	r4, [sp]
   15fc4:	ldr	r6, [sp, #8]
   15fc8:	add	sp, sp, #12
   15fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   15fd0:	str	r4, [sp, #-8]!
   15fd4:	str	lr, [sp, #4]
   15fd8:	cmp	r0, #0
   15fdc:	beq	15ff8 <__assert_fail@plt+0x4e50>
   15fe0:	bge	15ffc <__assert_fail@plt+0x4e54>
   15fe4:	bl	110a0 <__errno_location@plt>
   15fe8:	mov	r3, #12
   15fec:	str	r3, [r0]
   15ff0:	mov	r0, #0
   15ff4:	b	16000 <__assert_fail@plt+0x4e58>
   15ff8:	mov	r0, #1
   15ffc:	bl	11028 <malloc@plt>
   16000:	ldr	r4, [sp]
   16004:	add	sp, sp, #4
   16008:	pop	{pc}		; (ldr pc, [sp], #4)
   1600c:	str	r4, [sp, #-8]!
   16010:	str	lr, [sp, #4]
   16014:	cmp	r0, #0
   16018:	beq	1603c <__assert_fail@plt+0x4e94>
   1601c:	cmp	r1, #0
   16020:	beq	16048 <__assert_fail@plt+0x4ea0>
   16024:	cmp	r1, #0
   16028:	blt	16054 <__assert_fail@plt+0x4eac>
   1602c:	bl	10f80 <realloc@plt>
   16030:	ldr	r4, [sp]
   16034:	add	sp, sp, #4
   16038:	pop	{pc}		; (ldr pc, [sp], #4)
   1603c:	mov	r0, r1
   16040:	bl	15fd0 <__assert_fail@plt+0x4e28>
   16044:	b	16030 <__assert_fail@plt+0x4e88>
   16048:	bl	12150 <__assert_fail@plt+0xfa8>
   1604c:	mov	r0, #0
   16050:	b	16030 <__assert_fail@plt+0x4e88>
   16054:	bl	110a0 <__errno_location@plt>
   16058:	mov	r3, #12
   1605c:	str	r3, [r0]
   16060:	mov	r0, #0
   16064:	b	16030 <__assert_fail@plt+0x4e88>
   16068:	strd	r4, [sp, #-16]!
   1606c:	str	r6, [sp, #8]
   16070:	str	lr, [sp, #12]
   16074:	mov	r5, r0
   16078:	bl	10fec <__fpending@plt>
   1607c:	mov	r6, r0
   16080:	ldr	r4, [r5]
   16084:	and	r4, r4, #32
   16088:	mov	r0, r5
   1608c:	bl	160f4 <__assert_fail@plt+0x4f4c>
   16090:	cmp	r4, #0
   16094:	bne	160c8 <__assert_fail@plt+0x4f20>
   16098:	cmp	r0, #0
   1609c:	beq	160b8 <__assert_fail@plt+0x4f10>
   160a0:	cmp	r6, #0
   160a4:	bne	160e4 <__assert_fail@plt+0x4f3c>
   160a8:	bl	110a0 <__errno_location@plt>
   160ac:	ldr	r0, [r0]
   160b0:	subs	r0, r0, #9
   160b4:	mvnne	r0, #0
   160b8:	ldrd	r4, [sp]
   160bc:	ldr	r6, [sp, #8]
   160c0:	add	sp, sp, #12
   160c4:	pop	{pc}		; (ldr pc, [sp], #4)
   160c8:	cmp	r0, #0
   160cc:	bne	160ec <__assert_fail@plt+0x4f44>
   160d0:	bl	110a0 <__errno_location@plt>
   160d4:	mov	r3, #0
   160d8:	str	r3, [r0]
   160dc:	mvn	r0, #0
   160e0:	b	160b8 <__assert_fail@plt+0x4f10>
   160e4:	mvn	r0, #0
   160e8:	b	160b8 <__assert_fail@plt+0x4f10>
   160ec:	mvn	r0, #0
   160f0:	b	160b8 <__assert_fail@plt+0x4f10>
   160f4:	strd	r4, [sp, #-16]!
   160f8:	str	r6, [sp, #8]
   160fc:	str	lr, [sp, #12]
   16100:	sub	sp, sp, #8
   16104:	mov	r4, r0
   16108:	bl	110dc <fileno@plt>
   1610c:	cmp	r0, #0
   16110:	blt	16188 <__assert_fail@plt+0x4fe0>
   16114:	mov	r0, r4
   16118:	bl	11040 <__freading@plt>
   1611c:	cmp	r0, #0
   16120:	beq	16154 <__assert_fail@plt+0x4fac>
   16124:	mov	r0, r4
   16128:	bl	110dc <fileno@plt>
   1612c:	mov	r3, #1
   16130:	str	r3, [sp]
   16134:	mov	r2, #0
   16138:	mov	r3, #0
   1613c:	bl	10fc8 <lseek64@plt>
   16140:	mvn	r2, #0
   16144:	mvn	r3, #0
   16148:	cmp	r1, r3
   1614c:	cmpeq	r0, r2
   16150:	beq	16194 <__assert_fail@plt+0x4fec>
   16154:	mov	r0, r4
   16158:	bl	161b0 <__assert_fail@plt+0x5008>
   1615c:	cmp	r0, #0
   16160:	beq	16194 <__assert_fail@plt+0x4fec>
   16164:	bl	110a0 <__errno_location@plt>
   16168:	mov	r5, r0
   1616c:	ldr	r6, [r0]
   16170:	mov	r0, r4
   16174:	bl	110f4 <fclose@plt>
   16178:	cmp	r6, #0
   1617c:	strne	r6, [r5]
   16180:	mvnne	r0, #0
   16184:	b	1619c <__assert_fail@plt+0x4ff4>
   16188:	mov	r0, r4
   1618c:	bl	110f4 <fclose@plt>
   16190:	b	1619c <__assert_fail@plt+0x4ff4>
   16194:	mov	r0, r4
   16198:	bl	110f4 <fclose@plt>
   1619c:	add	sp, sp, #8
   161a0:	ldrd	r4, [sp]
   161a4:	ldr	r6, [sp, #8]
   161a8:	add	sp, sp, #12
   161ac:	pop	{pc}		; (ldr pc, [sp], #4)
   161b0:	str	r4, [sp, #-8]!
   161b4:	str	lr, [sp, #4]
   161b8:	sub	sp, sp, #8
   161bc:	subs	r4, r0, #0
   161c0:	beq	161d4 <__assert_fail@plt+0x502c>
   161c4:	mov	r0, r4
   161c8:	bl	11040 <__freading@plt>
   161cc:	cmp	r0, #0
   161d0:	bne	161ec <__assert_fail@plt+0x5044>
   161d4:	mov	r0, r4
   161d8:	bl	10f08 <fflush@plt>
   161dc:	add	sp, sp, #8
   161e0:	ldr	r4, [sp]
   161e4:	add	sp, sp, #4
   161e8:	pop	{pc}		; (ldr pc, [sp], #4)
   161ec:	ldr	r3, [r4]
   161f0:	tst	r3, #256	; 0x100
   161f4:	bne	16204 <__assert_fail@plt+0x505c>
   161f8:	mov	r0, r4
   161fc:	bl	10f08 <fflush@plt>
   16200:	b	161dc <__assert_fail@plt+0x5034>
   16204:	mov	r3, #1
   16208:	str	r3, [sp]
   1620c:	mov	r2, #0
   16210:	mov	r3, #0
   16214:	mov	r0, r4
   16218:	bl	16220 <__assert_fail@plt+0x5078>
   1621c:	b	161f8 <__assert_fail@plt+0x5050>
   16220:	str	r4, [sp, #-16]!
   16224:	strd	r6, [sp, #4]
   16228:	str	lr, [sp, #12]
   1622c:	sub	sp, sp, #8
   16230:	mov	r4, r0
   16234:	mov	r6, r2
   16238:	mov	r7, r3
   1623c:	ldr	r2, [r0, #8]
   16240:	ldr	r3, [r0, #4]
   16244:	cmp	r2, r3
   16248:	beq	16278 <__assert_fail@plt+0x50d0>
   1624c:	ldr	r3, [sp, #24]
   16250:	str	r3, [sp]
   16254:	mov	r2, r6
   16258:	mov	r3, r7
   1625c:	mov	r0, r4
   16260:	bl	11100 <fseeko64@plt>
   16264:	add	sp, sp, #8
   16268:	ldr	r4, [sp]
   1626c:	ldrd	r6, [sp, #4]
   16270:	add	sp, sp, #12
   16274:	pop	{pc}		; (ldr pc, [sp], #4)
   16278:	ldr	r2, [r0, #20]
   1627c:	ldr	r3, [r0, #16]
   16280:	cmp	r2, r3
   16284:	bne	1624c <__assert_fail@plt+0x50a4>
   16288:	ldr	r3, [r0, #36]	; 0x24
   1628c:	cmp	r3, #0
   16290:	bne	1624c <__assert_fail@plt+0x50a4>
   16294:	bl	110dc <fileno@plt>
   16298:	ldr	r3, [sp, #24]
   1629c:	str	r3, [sp]
   162a0:	mov	r2, r6
   162a4:	mov	r3, r7
   162a8:	bl	10fc8 <lseek64@plt>
   162ac:	mvn	r2, #0
   162b0:	mvn	r3, #0
   162b4:	cmp	r1, r3
   162b8:	cmpeq	r0, r2
   162bc:	beq	162d8 <__assert_fail@plt+0x5130>
   162c0:	ldr	r3, [r4]
   162c4:	bic	r3, r3, #16
   162c8:	str	r3, [r4]
   162cc:	strd	r0, [r4, #80]	; 0x50
   162d0:	mov	r0, #0
   162d4:	b	16264 <__assert_fail@plt+0x50bc>
   162d8:	mvn	r0, #0
   162dc:	b	16264 <__assert_fail@plt+0x50bc>
   162e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   162e4:	str	r6, [sp, #8]
   162e8:	strd	r8, [sp, #12]
   162ec:	str	lr, [sp, #20]
   162f0:	mov	r4, r0
   162f4:	mov	r5, r1
   162f8:	add	r6, r2, #20
   162fc:	mov	r3, #0
   16300:	strb	r3, [r2, #20]
   16304:	mov	r8, #10
   16308:	mov	r9, #0
   1630c:	b	16318 <__assert_fail@plt+0x5170>
   16310:	mov	r4, r0
   16314:	mov	r5, r1
   16318:	mov	r2, r8
   1631c:	mov	r3, r9
   16320:	mov	r0, r4
   16324:	mov	r1, r5
   16328:	bl	167f4 <__assert_fail@plt+0x564c>
   1632c:	add	r2, r2, #48	; 0x30
   16330:	strb	r2, [r6, #-1]!
   16334:	mov	r2, r8
   16338:	mov	r3, r9
   1633c:	mov	r0, r4
   16340:	mov	r1, r5
   16344:	bl	167f4 <__assert_fail@plt+0x564c>
   16348:	cmp	r5, #0
   1634c:	cmpeq	r4, #9
   16350:	bhi	16310 <__assert_fail@plt+0x5168>
   16354:	mov	r0, r6
   16358:	ldrd	r4, [sp]
   1635c:	ldr	r6, [sp, #8]
   16360:	ldrd	r8, [sp, #12]
   16364:	add	sp, sp, #20
   16368:	pop	{pc}		; (ldr pc, [sp], #4)
   1636c:	str	r4, [sp, #-8]!
   16370:	str	lr, [sp, #4]
   16374:	mov	r0, #14
   16378:	bl	1113c <nl_langinfo@plt>
   1637c:	cmp	r0, #0
   16380:	beq	163a4 <__assert_fail@plt+0x51fc>
   16384:	ldrb	r2, [r0]
   16388:	movw	r3, #29928	; 0x74e8
   1638c:	movt	r3, #1
   16390:	cmp	r2, #0
   16394:	moveq	r0, r3
   16398:	ldr	r4, [sp]
   1639c:	add	sp, sp, #4
   163a0:	pop	{pc}		; (ldr pc, [sp], #4)
   163a4:	movw	r0, #29928	; 0x74e8
   163a8:	movt	r0, #1
   163ac:	b	16398 <__assert_fail@plt+0x51f0>
   163b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   163b4:	strd	r6, [sp, #8]
   163b8:	str	lr, [sp, #16]
   163bc:	sub	sp, sp, #12
   163c0:	mov	r7, r1
   163c4:	mov	r5, r2
   163c8:	subs	r6, r0, #0
   163cc:	addeq	r6, sp, #4
   163d0:	mov	r0, r6
   163d4:	bl	10ff8 <mbrtowc@plt>
   163d8:	mov	r4, r0
   163dc:	cmp	r5, #0
   163e0:	cmnne	r0, #3
   163e4:	bhi	16400 <__assert_fail@plt+0x5258>
   163e8:	mov	r0, r4
   163ec:	add	sp, sp, #12
   163f0:	ldrd	r4, [sp]
   163f4:	ldrd	r6, [sp, #8]
   163f8:	add	sp, sp, #16
   163fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16400:	mov	r0, #0
   16404:	bl	166d8 <__assert_fail@plt+0x5530>
   16408:	cmp	r0, #0
   1640c:	bne	163e8 <__assert_fail@plt+0x5240>
   16410:	ldrb	r3, [r7]
   16414:	str	r3, [r6]
   16418:	mov	r4, #1
   1641c:	b	163e8 <__assert_fail@plt+0x5240>
   16420:	str	r4, [sp, #-8]!
   16424:	str	lr, [sp, #4]
   16428:	lsl	r2, r1, #2
   1642c:	lsr	r3, r1, #30
   16430:	adds	r3, r3, #0
   16434:	movne	r3, #1
   16438:	cmp	r2, #0
   1643c:	movlt	r3, #1
   16440:	cmp	r3, #0
   16444:	bne	1645c <__assert_fail@plt+0x52b4>
   16448:	lsl	r1, r1, #2
   1644c:	bl	1600c <__assert_fail@plt+0x4e64>
   16450:	ldr	r4, [sp]
   16454:	add	sp, sp, #4
   16458:	pop	{pc}		; (ldr pc, [sp], #4)
   1645c:	bl	110a0 <__errno_location@plt>
   16460:	mov	r3, #12
   16464:	str	r3, [r0]
   16468:	mov	r0, #0
   1646c:	b	16450 <__assert_fail@plt+0x52a8>
   16470:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16474:	strd	r6, [sp, #8]
   16478:	str	r8, [sp, #16]
   1647c:	str	lr, [sp, #20]
   16480:	sub	sp, sp, #8
   16484:	mov	r5, r1
   16488:	mov	r8, r2
   1648c:	subs	r7, r0, #0
   16490:	beq	16540 <__assert_fail@plt+0x5398>
   16494:	mov	r1, #10
   16498:	str	r1, [sp, #4]
   1649c:	mov	r0, #0
   164a0:	bl	16420 <__assert_fail@plt+0x5278>
   164a4:	subs	r4, r0, #0
   164a8:	bne	164dc <__assert_fail@plt+0x5334>
   164ac:	mvn	r0, #0
   164b0:	b	1651c <__assert_fail@plt+0x5374>
   164b4:	ldr	r3, [sp, #4]
   164b8:	cmp	r3, r6
   164bc:	lsleq	r3, r3, #1
   164c0:	streq	r3, [sp, #4]
   164c4:	ldr	r1, [sp, #4]
   164c8:	mov	r0, r4
   164cc:	bl	16420 <__assert_fail@plt+0x5278>
   164d0:	cmp	r0, #0
   164d4:	beq	16510 <__assert_fail@plt+0x5368>
   164d8:	mov	r4, r0
   164dc:	ldr	r6, [sp, #4]
   164e0:	add	r3, sp, #4
   164e4:	mov	r2, r4
   164e8:	mov	r1, r5
   164ec:	mov	r0, r7
   164f0:	bl	110b8 <getgrouplist@plt>
   164f4:	cmp	r0, #0
   164f8:	blt	164b4 <__assert_fail@plt+0x530c>
   164fc:	ldr	r1, [sp, #4]
   16500:	mov	r0, r4
   16504:	bl	16420 <__assert_fail@plt+0x5278>
   16508:	cmp	r0, #0
   1650c:	bne	16534 <__assert_fail@plt+0x538c>
   16510:	mov	r0, r4
   16514:	bl	12150 <__assert_fail@plt+0xfa8>
   16518:	mvn	r0, #0
   1651c:	add	sp, sp, #8
   16520:	ldrd	r4, [sp]
   16524:	ldrd	r6, [sp, #8]
   16528:	ldr	r8, [sp, #16]
   1652c:	add	sp, sp, #20
   16530:	pop	{pc}		; (ldr pc, [sp], #4)
   16534:	str	r0, [r8]
   16538:	ldr	r0, [sp, #4]
   1653c:	b	1651c <__assert_fail@plt+0x5374>
   16540:	mov	r1, #0
   16544:	mov	r0, r1
   16548:	bl	11154 <getgroups@plt>
   1654c:	str	r0, [sp, #4]
   16550:	cmp	r0, #0
   16554:	blt	165d8 <__assert_fail@plt+0x5430>
   16558:	adds	r6, r5, #1
   1655c:	movne	r6, #1
   16560:	cmp	r0, #0
   16564:	movne	r3, r6
   16568:	moveq	r3, #1
   1656c:	cmp	r3, #0
   16570:	beq	16660 <__assert_fail@plt+0x54b8>
   16574:	add	r1, r0, #1
   16578:	str	r1, [sp, #4]
   1657c:	mov	r0, #0
   16580:	bl	16420 <__assert_fail@plt+0x5278>
   16584:	subs	r4, r0, #0
   16588:	beq	16650 <__assert_fail@plt+0x54a8>
   1658c:	ldr	r0, [sp, #4]
   16590:	sub	r0, r0, r6
   16594:	cmn	r5, #1
   16598:	beq	1667c <__assert_fail@plt+0x54d4>
   1659c:	add	r1, r4, #4
   165a0:	bl	11154 <getgroups@plt>
   165a4:	cmp	r0, #0
   165a8:	strge	r5, [r4]
   165ac:	addge	r0, r0, #1
   165b0:	blt	1668c <__assert_fail@plt+0x54e4>
   165b4:	str	r4, [r8]
   165b8:	cmp	r0, #1
   165bc:	ble	1651c <__assert_fail@plt+0x5374>
   165c0:	ldr	lr, [r4]
   165c4:	add	ip, r4, r0, lsl #2
   165c8:	add	r3, r4, #4
   165cc:	cmp	ip, r3
   165d0:	bhi	1661c <__assert_fail@plt+0x5474>
   165d4:	b	1651c <__assert_fail@plt+0x5374>
   165d8:	bl	110a0 <__errno_location@plt>
   165dc:	ldr	r3, [r0]
   165e0:	cmp	r3, #38	; 0x26
   165e4:	bne	16640 <__assert_fail@plt+0x5498>
   165e8:	mov	r1, #1
   165ec:	mov	r0, #0
   165f0:	bl	16420 <__assert_fail@plt+0x5278>
   165f4:	cmp	r0, #0
   165f8:	beq	16648 <__assert_fail@plt+0x54a0>
   165fc:	str	r0, [r8]
   16600:	str	r5, [r0]
   16604:	adds	r0, r5, #1
   16608:	movne	r0, #1
   1660c:	b	1651c <__assert_fail@plt+0x5374>
   16610:	sub	r0, r0, #1
   16614:	cmp	ip, r3
   16618:	bls	1651c <__assert_fail@plt+0x5374>
   1661c:	ldr	r2, [r3], #4
   16620:	cmp	r2, lr
   16624:	beq	16610 <__assert_fail@plt+0x5468>
   16628:	ldr	r1, [r4]
   1662c:	cmp	r2, r1
   16630:	strne	r2, [r4, #4]
   16634:	addne	r4, r4, #4
   16638:	bne	16614 <__assert_fail@plt+0x546c>
   1663c:	b	16610 <__assert_fail@plt+0x5468>
   16640:	mvn	r0, #0
   16644:	b	1651c <__assert_fail@plt+0x5374>
   16648:	mvn	r0, #0
   1664c:	b	1651c <__assert_fail@plt+0x5374>
   16650:	mvn	r0, #0
   16654:	b	1651c <__assert_fail@plt+0x5374>
   16658:	mvn	r0, #0
   1665c:	b	1651c <__assert_fail@plt+0x5374>
   16660:	ldr	r1, [sp, #4]
   16664:	mov	r0, #0
   16668:	bl	16420 <__assert_fail@plt+0x5278>
   1666c:	subs	r4, r0, #0
   16670:	beq	16658 <__assert_fail@plt+0x54b0>
   16674:	ldr	r0, [sp, #4]
   16678:	sub	r0, r0, r6
   1667c:	mov	r1, r4
   16680:	bl	11154 <getgroups@plt>
   16684:	cmp	r0, #0
   16688:	bge	165b4 <__assert_fail@plt+0x540c>
   1668c:	mov	r0, r4
   16690:	bl	12150 <__assert_fail@plt+0xfa8>
   16694:	mvn	r0, #0
   16698:	b	1651c <__assert_fail@plt+0x5374>
   1669c:	str	r4, [sp, #-8]!
   166a0:	str	lr, [sp, #4]
   166a4:	umull	r2, r3, r1, r2
   166a8:	cmp	r3, #0
   166ac:	bne	166c4 <__assert_fail@plt+0x551c>
   166b0:	mov	r1, r2
   166b4:	bl	1600c <__assert_fail@plt+0x4e64>
   166b8:	ldr	r4, [sp]
   166bc:	add	sp, sp, #4
   166c0:	pop	{pc}		; (ldr pc, [sp], #4)
   166c4:	bl	110a0 <__errno_location@plt>
   166c8:	mov	r3, #12
   166cc:	str	r3, [r0]
   166d0:	mov	r0, #0
   166d4:	b	166b8 <__assert_fail@plt+0x5510>
   166d8:	push	{lr}		; (str lr, [sp, #-4]!)
   166dc:	sub	sp, sp, #268	; 0x10c
   166e0:	movw	r2, #257	; 0x101
   166e4:	add	r1, sp, #4
   166e8:	bl	16734 <__assert_fail@plt+0x558c>
   166ec:	cmp	r0, #0
   166f0:	movne	r0, #0
   166f4:	bne	1672c <__assert_fail@plt+0x5584>
   166f8:	movw	r1, #29936	; 0x74f0
   166fc:	movt	r1, #1
   16700:	add	r0, sp, #4
   16704:	bl	10ef0 <strcmp@plt>
   16708:	cmp	r0, #0
   1670c:	beq	16728 <__assert_fail@plt+0x5580>
   16710:	movw	r1, #29940	; 0x74f4
   16714:	movt	r1, #1
   16718:	add	r0, sp, #4
   1671c:	bl	10ef0 <strcmp@plt>
   16720:	adds	r0, r0, #0
   16724:	movne	r0, #1
   16728:	and	r0, r0, #1
   1672c:	add	sp, sp, #268	; 0x10c
   16730:	pop	{pc}		; (ldr pc, [sp], #4)
   16734:	strd	r4, [sp, #-16]!
   16738:	str	r6, [sp, #8]
   1673c:	str	lr, [sp, #12]
   16740:	mov	r6, r1
   16744:	mov	r4, r2
   16748:	mov	r1, #0
   1674c:	bl	11118 <setlocale@plt>
   16750:	subs	r5, r0, #0
   16754:	beq	16798 <__assert_fail@plt+0x55f0>
   16758:	mov	r0, r5
   1675c:	bl	11088 <strlen@plt>
   16760:	cmp	r4, r0
   16764:	bhi	167b4 <__assert_fail@plt+0x560c>
   16768:	cmp	r4, #0
   1676c:	moveq	r0, #34	; 0x22
   16770:	beq	167c8 <__assert_fail@plt+0x5620>
   16774:	sub	r4, r4, #1
   16778:	mov	r2, r4
   1677c:	mov	r1, r5
   16780:	mov	r0, r6
   16784:	bl	10f2c <memcpy@plt>
   16788:	mov	r3, #0
   1678c:	strb	r3, [r6, r4]
   16790:	mov	r0, #34	; 0x22
   16794:	b	167c8 <__assert_fail@plt+0x5620>
   16798:	cmp	r4, #0
   1679c:	moveq	r0, #22
   167a0:	beq	167c8 <__assert_fail@plt+0x5620>
   167a4:	mov	r3, #0
   167a8:	strb	r3, [r6]
   167ac:	mov	r0, #22
   167b0:	b	167c8 <__assert_fail@plt+0x5620>
   167b4:	add	r2, r0, #1
   167b8:	mov	r1, r5
   167bc:	mov	r0, r6
   167c0:	bl	10f2c <memcpy@plt>
   167c4:	mov	r0, #0
   167c8:	ldrd	r4, [sp]
   167cc:	ldr	r6, [sp, #8]
   167d0:	add	sp, sp, #12
   167d4:	pop	{pc}		; (ldr pc, [sp], #4)
   167d8:	str	r4, [sp, #-8]!
   167dc:	str	lr, [sp, #4]
   167e0:	mov	r1, #0
   167e4:	bl	11118 <setlocale@plt>
   167e8:	ldr	r4, [sp]
   167ec:	add	sp, sp, #4
   167f0:	pop	{pc}		; (ldr pc, [sp], #4)
   167f4:	cmp	r3, #0
   167f8:	cmpeq	r2, #0
   167fc:	bne	16814 <__assert_fail@plt+0x566c>
   16800:	cmp	r1, #0
   16804:	cmpeq	r0, #0
   16808:	mvnne	r1, #0
   1680c:	mvnne	r0, #0
   16810:	b	16830 <__assert_fail@plt+0x5688>
   16814:	sub	sp, sp, #8
   16818:	push	{sp, lr}
   1681c:	bl	16840 <__assert_fail@plt+0x5698>
   16820:	ldr	lr, [sp, #4]
   16824:	add	sp, sp, #8
   16828:	pop	{r2, r3}
   1682c:	bx	lr
   16830:	push	{r1, lr}
   16834:	mov	r0, #8
   16838:	bl	10ed8 <raise@plt>
   1683c:	pop	{r1, pc}
   16840:	cmp	r1, r3
   16844:	cmpeq	r0, r2
   16848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1684c:	mov	r4, r0
   16850:	movcc	r0, #0
   16854:	mov	r5, r1
   16858:	ldr	lr, [sp, #36]	; 0x24
   1685c:	movcc	r1, r0
   16860:	bcc	1695c <__assert_fail@plt+0x57b4>
   16864:	cmp	r3, #0
   16868:	clzeq	ip, r2
   1686c:	clzne	ip, r3
   16870:	addeq	ip, ip, #32
   16874:	cmp	r5, #0
   16878:	clzeq	r1, r4
   1687c:	addeq	r1, r1, #32
   16880:	clzne	r1, r5
   16884:	sub	ip, ip, r1
   16888:	sub	sl, ip, #32
   1688c:	lsl	r9, r3, ip
   16890:	rsb	fp, ip, #32
   16894:	orr	r9, r9, r2, lsl sl
   16898:	orr	r9, r9, r2, lsr fp
   1689c:	lsl	r8, r2, ip
   168a0:	cmp	r5, r9
   168a4:	cmpeq	r4, r8
   168a8:	movcc	r0, #0
   168ac:	movcc	r1, r0
   168b0:	bcc	168cc <__assert_fail@plt+0x5724>
   168b4:	mov	r0, #1
   168b8:	subs	r4, r4, r8
   168bc:	lsl	r1, r0, sl
   168c0:	orr	r1, r1, r0, lsr fp
   168c4:	lsl	r0, r0, ip
   168c8:	sbc	r5, r5, r9
   168cc:	cmp	ip, #0
   168d0:	beq	1695c <__assert_fail@plt+0x57b4>
   168d4:	lsr	r6, r8, #1
   168d8:	orr	r6, r6, r9, lsl #31
   168dc:	lsr	r7, r9, #1
   168e0:	mov	r2, ip
   168e4:	b	16908 <__assert_fail@plt+0x5760>
   168e8:	subs	r3, r4, r6
   168ec:	sbc	r8, r5, r7
   168f0:	adds	r3, r3, r3
   168f4:	adc	r8, r8, r8
   168f8:	adds	r4, r3, #1
   168fc:	adc	r5, r8, #0
   16900:	subs	r2, r2, #1
   16904:	beq	16924 <__assert_fail@plt+0x577c>
   16908:	cmp	r5, r7
   1690c:	cmpeq	r4, r6
   16910:	bcs	168e8 <__assert_fail@plt+0x5740>
   16914:	adds	r4, r4, r4
   16918:	adc	r5, r5, r5
   1691c:	subs	r2, r2, #1
   16920:	bne	16908 <__assert_fail@plt+0x5760>
   16924:	lsr	r3, r4, ip
   16928:	orr	r3, r3, r5, lsl fp
   1692c:	lsr	r2, r5, ip
   16930:	orr	r3, r3, r5, lsr sl
   16934:	adds	r0, r0, r4
   16938:	mov	r4, r3
   1693c:	lsl	r3, r2, ip
   16940:	orr	r3, r3, r4, lsl sl
   16944:	lsl	ip, r4, ip
   16948:	orr	r3, r3, r4, lsr fp
   1694c:	adc	r1, r1, r5
   16950:	subs	r0, r0, ip
   16954:	mov	r5, r2
   16958:	sbc	r1, r1, r3
   1695c:	cmp	lr, #0
   16960:	strdne	r4, [lr]
   16964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16968:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1696c:	mov	r7, r0
   16970:	ldr	r6, [pc, #72]	; 169c0 <__assert_fail@plt+0x5818>
   16974:	ldr	r5, [pc, #72]	; 169c4 <__assert_fail@plt+0x581c>
   16978:	add	r6, pc, r6
   1697c:	add	r5, pc, r5
   16980:	sub	r6, r6, r5
   16984:	mov	r8, r1
   16988:	mov	r9, r2
   1698c:	bl	10e94 <calloc@plt-0x20>
   16990:	asrs	r6, r6, #2
   16994:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16998:	mov	r4, #0
   1699c:	add	r4, r4, #1
   169a0:	ldr	r3, [r5], #4
   169a4:	mov	r2, r9
   169a8:	mov	r1, r8
   169ac:	mov	r0, r7
   169b0:	blx	r3
   169b4:	cmp	r6, r4
   169b8:	bne	1699c <__assert_fail@plt+0x57f4>
   169bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   169c0:	muleq	r1, r4, r5
   169c4:	andeq	r1, r1, ip, lsl #11
   169c8:	bx	lr
   169cc:	ldr	r3, [pc, #12]	; 169e0 <__assert_fail@plt+0x5838>
   169d0:	mov	r1, #0
   169d4:	add	r3, pc, r3
   169d8:	ldr	r2, [r3]
   169dc:	b	110ac <__cxa_atexit@plt>
   169e0:	andeq	r1, r1, r8, lsr r7

Disassembly of section .fini:

000169e4 <.fini>:
   169e4:	push	{r3, lr}
   169e8:	pop	{r3, pc}
