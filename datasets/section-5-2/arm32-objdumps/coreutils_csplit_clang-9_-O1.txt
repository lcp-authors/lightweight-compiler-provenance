
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

000113a0 <.init>:
   113a0:	push	{r3, lr}
   113a4:	bl	117bc <__assert_fail@plt+0x48>
   113a8:	pop	{r3, pc}

Disassembly of section .plt:

000113ac <pthread_mutex_unlock@plt-0x14>:
   113ac:	push	{lr}		; (str lr, [sp, #-4]!)
   113b0:	ldr	lr, [pc, #4]	; 113bc <pthread_mutex_unlock@plt-0x4>
   113b4:	add	lr, pc, lr
   113b8:	ldr	pc, [lr, #8]!
   113bc:	andeq	r4, r2, r4, asr #24

000113c0 <pthread_mutex_unlock@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #36, 20	; 0x24000
   113c8:	ldr	pc, [ip, #3140]!	; 0xc44

000113cc <fdopen@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #36, 20	; 0x24000
   113d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113d8 <calloc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #36, 20	; 0x24000
   113e0:	ldr	pc, [ip, #3124]!	; 0xc34

000113e4 <fputs_unlocked@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #36, 20	; 0x24000
   113ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f0 <wctype@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #36, 20	; 0x24000
   113f8:	ldr	pc, [ip, #3108]!	; 0xc24

000113fc <raise@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #36, 20	; 0x24000
   11404:	ldr	pc, [ip, #3100]!	; 0xc1c

00011408 <wcrtomb@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #36, 20	; 0x24000
   11410:	ldr	pc, [ip, #3092]!	; 0xc14

00011414 <iswctype@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #36, 20	; 0x24000
   1141c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011420 <strcmp@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #36, 20	; 0x24000
   11428:	ldr	pc, [ip, #3076]!	; 0xc04

0001142c <read@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #36, 20	; 0x24000
   11434:	ldr	pc, [ip, #3068]!	; 0xbfc

00011438 <pthread_mutex_destroy@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #36, 20	; 0x24000
   11440:	ldr	pc, [ip, #3060]!	; 0xbf4

00011444 <fflush@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #36, 20	; 0x24000
   1144c:	ldr	pc, [ip, #3052]!	; 0xbec

00011450 <sigprocmask@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #36, 20	; 0x24000
   11458:	ldr	pc, [ip, #3044]!	; 0xbe4

0001145c <memmove@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #36, 20	; 0x24000
   11464:	ldr	pc, [ip, #3036]!	; 0xbdc

00011468 <free@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #36, 20	; 0x24000
   11470:	ldr	pc, [ip, #3028]!	; 0xbd4

00011474 <pthread_mutex_lock@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #36, 20	; 0x24000
   1147c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011480 <_exit@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #36, 20	; 0x24000
   11488:	ldr	pc, [ip, #3012]!	; 0xbc4

0001148c <memcpy@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #36, 20	; 0x24000
   11494:	ldr	pc, [ip, #3004]!	; 0xbbc

00011498 <tolower@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #36, 20	; 0x24000
   114a0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114a4 <pthread_mutex_init@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #36, 20	; 0x24000
   114ac:	ldr	pc, [ip, #2988]!	; 0xbac

000114b0 <towlower@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #36, 20	; 0x24000
   114b8:	ldr	pc, [ip, #2980]!	; 0xba4

000114bc <mbsinit@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #36, 20	; 0x24000
   114c4:	ldr	pc, [ip, #2972]!	; 0xb9c

000114c8 <signal@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #36, 20	; 0x24000
   114d0:	ldr	pc, [ip, #2964]!	; 0xb94

000114d4 <fwrite_unlocked@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #36, 20	; 0x24000
   114dc:	ldr	pc, [ip, #2956]!	; 0xb8c

000114e0 <dcgettext@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #36, 20	; 0x24000
   114e8:	ldr	pc, [ip, #2948]!	; 0xb84

000114ec <unlink@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #36, 20	; 0x24000
   114f4:	ldr	pc, [ip, #2940]!	; 0xb7c

000114f8 <dup2@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #36, 20	; 0x24000
   11500:	ldr	pc, [ip, #2932]!	; 0xb74

00011504 <realloc@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #36, 20	; 0x24000
   1150c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011510 <sigismember@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #36, 20	; 0x24000
   11518:	ldr	pc, [ip, #2916]!	; 0xb64

0001151c <textdomain@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #36, 20	; 0x24000
   11524:	ldr	pc, [ip, #2908]!	; 0xb5c

00011528 <rawmemchr@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #36, 20	; 0x24000
   11530:	ldr	pc, [ip, #2900]!	; 0xb54

00011534 <iswprint@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #36, 20	; 0x24000
   1153c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011540 <sigaction@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #36, 20	; 0x24000
   11548:	ldr	pc, [ip, #2884]!	; 0xb44

0001154c <fwrite@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #36, 20	; 0x24000
   11554:	ldr	pc, [ip, #2876]!	; 0xb3c

00011558 <lseek64@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #36, 20	; 0x24000
   11560:	ldr	pc, [ip, #2868]!	; 0xb34

00011564 <__ctype_get_mb_cur_max@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #36, 20	; 0x24000
   1156c:	ldr	pc, [ip, #2860]!	; 0xb2c

00011570 <strcpy@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #36, 20	; 0x24000
   11578:	ldr	pc, [ip, #2852]!	; 0xb24

0001157c <__fpending@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #36, 20	; 0x24000
   11584:	ldr	pc, [ip, #2844]!	; 0xb1c

00011588 <ferror_unlocked@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #36, 20	; 0x24000
   11590:	ldr	pc, [ip, #2836]!	; 0xb14

00011594 <mbrtowc@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #36, 20	; 0x24000
   1159c:	ldr	pc, [ip, #2828]!	; 0xb0c

000115a0 <error@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #36, 20	; 0x24000
   115a8:	ldr	pc, [ip, #2820]!	; 0xb04

000115ac <open64@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #36, 20	; 0x24000
   115b4:	ldr	pc, [ip, #2812]!	; 0xafc

000115b8 <malloc@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #36, 20	; 0x24000
   115c0:	ldr	pc, [ip, #2804]!	; 0xaf4

000115c4 <sigaddset@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #36, 20	; 0x24000
   115cc:	ldr	pc, [ip, #2796]!	; 0xaec

000115d0 <__libc_start_main@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #36, 20	; 0x24000
   115d8:	ldr	pc, [ip, #2788]!	; 0xae4

000115dc <__freading@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #36, 20	; 0x24000
   115e4:	ldr	pc, [ip, #2780]!	; 0xadc

000115e8 <__gmon_start__@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #36, 20	; 0x24000
   115f0:	ldr	pc, [ip, #2772]!	; 0xad4

000115f4 <getopt_long@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #36, 20	; 0x24000
   115fc:	ldr	pc, [ip, #2764]!	; 0xacc

00011600 <__ctype_b_loc@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #36, 20	; 0x24000
   11608:	ldr	pc, [ip, #2756]!	; 0xac4

0001160c <exit@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #36, 20	; 0x24000
   11614:	ldr	pc, [ip, #2748]!	; 0xabc

00011618 <bcmp@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #36, 20	; 0x24000
   11620:	ldr	pc, [ip, #2740]!	; 0xab4

00011624 <strlen@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #36, 20	; 0x24000
   1162c:	ldr	pc, [ip, #2732]!	; 0xaac

00011630 <strchr@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #36, 20	; 0x24000
   11638:	ldr	pc, [ip, #2724]!	; 0xaa4

0001163c <__errno_location@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #36, 20	; 0x24000
   11644:	ldr	pc, [ip, #2716]!	; 0xa9c

00011648 <iswalnum@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #36, 20	; 0x24000
   11650:	ldr	pc, [ip, #2708]!	; 0xa94

00011654 <__sprintf_chk@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #36, 20	; 0x24000
   1165c:	ldr	pc, [ip, #2700]!	; 0xa8c

00011660 <__cxa_atexit@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #36, 20	; 0x24000
   11668:	ldr	pc, [ip, #2692]!	; 0xa84

0001166c <memset@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #36, 20	; 0x24000
   11674:	ldr	pc, [ip, #2684]!	; 0xa7c

00011678 <btowc@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #36, 20	; 0x24000
   11680:	ldr	pc, [ip, #2676]!	; 0xa74

00011684 <__printf_chk@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #36, 20	; 0x24000
   1168c:	ldr	pc, [ip, #2668]!	; 0xa6c

00011690 <fileno@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #36, 20	; 0x24000
   11698:	ldr	pc, [ip, #2660]!	; 0xa64

0001169c <strtoumax@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #36, 20	; 0x24000
   116a4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116a8 <__fprintf_chk@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #36, 20	; 0x24000
   116b0:	ldr	pc, [ip, #2644]!	; 0xa54

000116b4 <strtoimax@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #36, 20	; 0x24000
   116bc:	ldr	pc, [ip, #2636]!	; 0xa4c

000116c0 <fclose@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #36, 20	; 0x24000
   116c8:	ldr	pc, [ip, #2628]!	; 0xa44

000116cc <fseeko64@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #36, 20	; 0x24000
   116d4:	ldr	pc, [ip, #2620]!	; 0xa3c

000116d8 <fcntl64@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #36, 20	; 0x24000
   116e0:	ldr	pc, [ip, #2612]!	; 0xa34

000116e4 <setlocale@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #36, 20	; 0x24000
   116ec:	ldr	pc, [ip, #2604]!	; 0xa2c

000116f0 <sigemptyset@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #36, 20	; 0x24000
   116f8:	ldr	pc, [ip, #2596]!	; 0xa24

000116fc <toupper@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #36, 20	; 0x24000
   11704:	ldr	pc, [ip, #2588]!	; 0xa1c

00011708 <strrchr@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #36, 20	; 0x24000
   11710:	ldr	pc, [ip, #2580]!	; 0xa14

00011714 <nl_langinfo@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #36, 20	; 0x24000
   1171c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011720 <fopen64@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #36, 20	; 0x24000
   11728:	ldr	pc, [ip, #2564]!	; 0xa04

0001172c <bindtextdomain@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #36, 20	; 0x24000
   11734:	ldr	pc, [ip, #2556]!	; 0x9fc

00011738 <towupper@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #36, 20	; 0x24000
   11740:	ldr	pc, [ip, #2548]!	; 0x9f4

00011744 <strncmp@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #36, 20	; 0x24000
   1174c:	ldr	pc, [ip, #2540]!	; 0x9ec

00011750 <abort@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #36, 20	; 0x24000
   11758:	ldr	pc, [ip, #2532]!	; 0x9e4

0001175c <close@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #36, 20	; 0x24000
   11764:	ldr	pc, [ip, #2524]!	; 0x9dc

00011768 <__snprintf_chk@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #36, 20	; 0x24000
   11770:	ldr	pc, [ip, #2516]!	; 0x9d4

00011774 <__assert_fail@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #36, 20	; 0x24000
   1177c:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

00011780 <.text>:
   11780:	mov	fp, #0
   11784:	mov	lr, #0
   11788:	pop	{r1}		; (ldr r1, [sp], #4)
   1178c:	mov	r2, sp
   11790:	push	{r2}		; (str r2, [sp, #-4]!)
   11794:	push	{r0}		; (str r0, [sp, #-4]!)
   11798:	ldr	ip, [pc, #16]	; 117b0 <__assert_fail@plt+0x3c>
   1179c:	push	{ip}		; (str ip, [sp, #-4]!)
   117a0:	ldr	r0, [pc, #12]	; 117b4 <__assert_fail@plt+0x40>
   117a4:	ldr	r3, [pc, #12]	; 117b8 <__assert_fail@plt+0x44>
   117a8:	bl	115d0 <__libc_start_main@plt>
   117ac:	bl	11750 <abort@plt>
   117b0:	andeq	r4, r2, r4, lsl #21
   117b4:			; <UNDEFINED> instruction: 0x000118bc
   117b8:	andeq	r4, r2, r4, lsr #20
   117bc:	ldr	r3, [pc, #20]	; 117d8 <__assert_fail@plt+0x64>
   117c0:	ldr	r2, [pc, #20]	; 117dc <__assert_fail@plt+0x68>
   117c4:	add	r3, pc, r3
   117c8:	ldr	r2, [r3, r2]
   117cc:	cmp	r2, #0
   117d0:	bxeq	lr
   117d4:	b	115e8 <__gmon_start__@plt>
   117d8:	andeq	r4, r2, r4, lsr r8
   117dc:	andeq	r0, r0, ip, asr #2
   117e0:	ldr	r0, [pc, #24]	; 11800 <__assert_fail@plt+0x8c>
   117e4:	ldr	r3, [pc, #24]	; 11804 <__assert_fail@plt+0x90>
   117e8:	cmp	r3, r0
   117ec:	bxeq	lr
   117f0:	ldr	r3, [pc, #16]	; 11808 <__assert_fail@plt+0x94>
   117f4:	cmp	r3, #0
   117f8:	bxeq	lr
   117fc:	bx	r3
   11800:	andeq	r6, r3, r8, lsr #3
   11804:	andeq	r6, r3, r8, lsr #3
   11808:	andeq	r0, r0, r0
   1180c:	ldr	r0, [pc, #36]	; 11838 <__assert_fail@plt+0xc4>
   11810:	ldr	r1, [pc, #36]	; 1183c <__assert_fail@plt+0xc8>
   11814:	sub	r1, r1, r0
   11818:	asr	r1, r1, #2
   1181c:	add	r1, r1, r1, lsr #31
   11820:	asrs	r1, r1, #1
   11824:	bxeq	lr
   11828:	ldr	r3, [pc, #16]	; 11840 <__assert_fail@plt+0xcc>
   1182c:	cmp	r3, #0
   11830:	bxeq	lr
   11834:	bx	r3
   11838:	andeq	r6, r3, r8, lsr #3
   1183c:	andeq	r6, r3, r8, lsr #3
   11840:	andeq	r0, r0, r0
   11844:	push	{r4, lr}
   11848:	ldr	r4, [pc, #24]	; 11868 <__assert_fail@plt+0xf4>
   1184c:	ldrb	r3, [r4]
   11850:	cmp	r3, #0
   11854:	popne	{r4, pc}
   11858:	bl	117e0 <__assert_fail@plt+0x6c>
   1185c:	mov	r3, #1
   11860:	strb	r3, [r4]
   11864:	pop	{r4, pc}
   11868:	andeq	r6, r3, r4, asr #3
   1186c:	b	1180c <__assert_fail@plt+0x98>
   11870:	push	{fp, lr}
   11874:	mov	fp, sp
   11878:	movw	r1, #19116	; 0x4aac
   1187c:	movt	r1, #2
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	bl	114e0 <dcgettext@plt>
   1188c:	mov	r3, r0
   11890:	movw	r2, #21063	; 0x5247
   11894:	movt	r2, #2
   11898:	mov	r0, #0
   1189c:	mov	r1, #0
   118a0:	bl	115a0 <error@plt>
   118a4:	bl	118a8 <__assert_fail@plt+0x134>
   118a8:	push	{fp, lr}
   118ac:	mov	fp, sp
   118b0:	bl	1256c <__assert_fail@plt+0xdf8>
   118b4:	mov	r0, #1
   118b8:	bl	1160c <exit@plt>
   118bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c0:	add	fp, sp, #28
   118c4:	sub	sp, sp, #164	; 0xa4
   118c8:	mov	r4, r1
   118cc:	mov	r5, r0
   118d0:	ldr	r0, [r1]
   118d4:	bl	140ac <__assert_fail@plt+0x2938>
   118d8:	movw	r1, #20523	; 0x502b
   118dc:	movt	r1, #2
   118e0:	mov	r0, #6
   118e4:	bl	116e4 <setlocale@plt>
   118e8:	movw	r6, #19197	; 0x4afd
   118ec:	movt	r6, #2
   118f0:	movw	r1, #19133	; 0x4abd
   118f4:	movt	r1, #2
   118f8:	mov	r0, r6
   118fc:	bl	1172c <bindtextdomain@plt>
   11900:	mov	r0, r6
   11904:	bl	1151c <textdomain@plt>
   11908:	movw	r0, #15380	; 0x3c14
   1190c:	movt	r0, #1
   11910:	bl	24a88 <__assert_fail@plt+0x13314>
   11914:	movw	r8, #25045	; 0x61d5
   11918:	movt	r8, #3
   1191c:	mov	r7, #1
   11920:	strb	r7, [r8]
   11924:	movw	r0, #25032	; 0x61c8
   11928:	movt	r0, #3
   1192c:	str	r4, [r0]
   11930:	movw	r0, #25036	; 0x61cc
   11934:	movt	r0, #3
   11938:	mov	r9, #0
   1193c:	str	r9, [r0]
   11940:	movw	r0, #25040	; 0x61d0
   11944:	movt	r0, #3
   11948:	str	r9, [r0]
   1194c:	movw	r0, #25044	; 0x61d4
   11950:	movt	r0, #3
   11954:	strb	r9, [r0]
   11958:	movw	r0, #25046	; 0x61d6
   1195c:	movt	r0, #3
   11960:	strb	r9, [r0]
   11964:	movw	r1, #25048	; 0x61d8
   11968:	movt	r1, #3
   1196c:	movw	r0, #19157	; 0x4ad5
   11970:	movt	r0, #2
   11974:	str	r0, [r1]
   11978:	movw	sl, #19160	; 0x4ad8
   1197c:	movt	sl, #2
   11980:	movw	r6, #21880	; 0x5578
   11984:	movt	r6, #2
   11988:	str	r9, [sp]
   1198c:	mov	r0, r5
   11990:	mov	r1, r4
   11994:	mov	r2, sl
   11998:	mov	r3, r6
   1199c:	bl	115f4 <getopt_long@plt>
   119a0:	cmp	r0, #97	; 0x61
   119a4:	ble	11af8 <__assert_fail@plt+0x384>
   119a8:	sub	r1, r0, #98	; 0x62
   119ac:	cmp	r1, #24
   119b0:	bhi	11a30 <__assert_fail@plt+0x2bc>
   119b4:	add	r0, pc, #0
   119b8:	ldr	pc, [r0, r1, lsl #2]
   119bc:			; <UNDEFINED> instruction: 0x00011ab8
   119c0:	andeq	r1, r1, r8, ror #26
   119c4:	andeq	r1, r1, r8, ror #26
   119c8:	andeq	r1, r1, r8, ror #26
   119cc:	ldrdeq	r1, [r1], -ip
   119d0:	andeq	r1, r1, r8, ror #26
   119d4:	andeq	r1, r1, r8, ror #26
   119d8:	andeq	r1, r1, r8, ror #26
   119dc:	andeq	r1, r1, r8, ror #26
   119e0:	ldrdeq	r1, [r1], -r4
   119e4:	andeq	r1, r1, r8, ror #26
   119e8:	andeq	r1, r1, r8, ror #26
   119ec:	andeq	r1, r1, r8, asr #20
   119f0:	andeq	r1, r1, r8, ror #26
   119f4:	andeq	r1, r1, r8, ror #26
   119f8:	andeq	r1, r1, r0, lsr #20
   119fc:	andeq	r1, r1, r8, ror #26
   11a00:	andeq	r1, r1, r0, lsr #20
   11a04:	andeq	r1, r1, r8, ror #26
   11a08:	andeq	r1, r1, r8, ror #26
   11a0c:	andeq	r1, r1, r8, ror #26
   11a10:	andeq	r1, r1, r8, ror #26
   11a14:	andeq	r1, r1, r8, ror #26
   11a18:	andeq	r1, r1, r8, ror #26
   11a1c:	andeq	r1, r1, r8, lsr #21
   11a20:	movw	r0, #25044	; 0x61d4
   11a24:	movt	r0, #3
   11a28:	strb	r7, [r0]
   11a2c:	b	11988 <__assert_fail@plt+0x214>
   11a30:	cmp	r0, #256	; 0x100
   11a34:	bne	11d68 <__assert_fail@plt+0x5f4>
   11a38:	movw	r0, #25046	; 0x61d6
   11a3c:	movt	r0, #3
   11a40:	strb	r7, [r0]
   11a44:	b	11988 <__assert_fail@plt+0x214>
   11a48:	movw	r0, #25024	; 0x61c0
   11a4c:	movt	r0, #3
   11a50:	ldr	r7, [r0]
   11a54:	mov	r0, #0
   11a58:	movw	r1, #19171	; 0x4ae3
   11a5c:	movt	r1, #2
   11a60:	mov	r2, #5
   11a64:	bl	114e0 <dcgettext@plt>
   11a68:	mvn	r1, #-2147483648	; 0x80000000
   11a6c:	stm	sp, {r1, r9}
   11a70:	movw	r1, #20523	; 0x502b
   11a74:	movt	r1, #2
   11a78:	str	r1, [sp, #8]
   11a7c:	str	r0, [sp, #12]
   11a80:	str	r9, [sp, #16]
   11a84:	mov	r0, r7
   11a88:	mov	r7, #1
   11a8c:	mov	r2, #0
   11a90:	mov	r3, #0
   11a94:	bl	233a0 <__assert_fail@plt+0x11c2c>
   11a98:	movw	r1, #24920	; 0x6158
   11a9c:	movt	r1, #3
   11aa0:	str	r0, [r1]
   11aa4:	b	11988 <__assert_fail@plt+0x214>
   11aa8:	movw	r0, #25056	; 0x61e0
   11aac:	movt	r0, #3
   11ab0:	strb	r7, [r0]
   11ab4:	b	11988 <__assert_fail@plt+0x214>
   11ab8:	movw	r0, #25024	; 0x61c0
   11abc:	movt	r0, #3
   11ac0:	ldr	r0, [r0]
   11ac4:	movw	r1, #25052	; 0x61dc
   11ac8:	movt	r1, #3
   11acc:	str	r0, [r1]
   11ad0:	b	11988 <__assert_fail@plt+0x214>
   11ad4:	strb	r9, [r8]
   11ad8:	b	11988 <__assert_fail@plt+0x214>
   11adc:	movw	r0, #25024	; 0x61c0
   11ae0:	movt	r0, #3
   11ae4:	ldr	r0, [r0]
   11ae8:	movw	r1, #25048	; 0x61d8
   11aec:	movt	r1, #3
   11af0:	str	r0, [r1]
   11af4:	b	11988 <__assert_fail@plt+0x214>
   11af8:	cmn	r0, #1
   11afc:	bne	11cbc <__assert_fail@plt+0x548>
   11b00:	movw	r7, #25008	; 0x61b0
   11b04:	movt	r7, #3
   11b08:	ldr	r0, [r7]
   11b0c:	sub	r1, r5, r0
   11b10:	cmp	r1, #1
   11b14:	ble	11d28 <__assert_fail@plt+0x5b4>
   11b18:	movw	r0, #25048	; 0x61d8
   11b1c:	movt	r0, #3
   11b20:	ldr	r0, [r0]
   11b24:	bl	11624 <strlen@plt>
   11b28:	mov	r6, r0
   11b2c:	movw	r1, #25052	; 0x61dc
   11b30:	movt	r1, #3
   11b34:	ldr	r0, [r1]
   11b38:	cmp	r0, #0
   11b3c:	beq	11b4c <__assert_fail@plt+0x3d8>
   11b40:	ldr	r0, [r1]
   11b44:	bl	11f1c <__assert_fail@plt+0x7a8>
   11b48:	b	11b64 <__assert_fail@plt+0x3f0>
   11b4c:	movw	r2, #24920	; 0x6158
   11b50:	movt	r2, #3
   11b54:	ldr	r1, [r2]
   11b58:	mov	r0, #11
   11b5c:	cmp	r1, #11
   11b60:	ldrcs	r0, [r2]
   11b64:	add	r0, r0, r6
   11b68:	add	r0, r0, #1
   11b6c:	cmp	r0, r6
   11b70:	bvs	11d70 <__assert_fail@plt+0x5fc>
   11b74:	bl	22f3c <__assert_fail@plt+0x117c8>
   11b78:	movw	r1, #25060	; 0x61e4
   11b7c:	movt	r1, #3
   11b80:	str	r0, [r1]
   11b84:	ldr	r0, [r7]
   11b88:	add	r1, r0, #1
   11b8c:	str	r1, [r7]
   11b90:	ldr	r0, [r4, r0, lsl #2]
   11b94:	bl	1202c <__assert_fail@plt+0x8b8>
   11b98:	ldr	r1, [r7]
   11b9c:	mov	r0, r5
   11ba0:	mov	r2, r4
   11ba4:	bl	120ac <__assert_fail@plt+0x938>
   11ba8:	movw	r8, #25064	; 0x61e8
   11bac:	movt	r8, #3
   11bb0:	mov	r0, r8
   11bb4:	bl	116f0 <sigemptyset@plt>
   11bb8:	mov	r5, #0
   11bbc:	movw	r7, #22056	; 0x5628
   11bc0:	movt	r7, #2
   11bc4:	add	r4, sp, #24
   11bc8:	b	11bd8 <__assert_fail@plt+0x464>
   11bcc:	sub	r5, r5, #1
   11bd0:	cmn	r5, #11
   11bd4:	beq	11c08 <__assert_fail@plt+0x494>
   11bd8:	ldr	r6, [r7, -r5, lsl #2]
   11bdc:	mov	r0, r6
   11be0:	mov	r1, #0
   11be4:	mov	r2, r4
   11be8:	bl	11540 <sigaction@plt>
   11bec:	ldr	r0, [sp, #24]
   11bf0:	cmp	r0, #1
   11bf4:	beq	11bcc <__assert_fail@plt+0x458>
   11bf8:	mov	r0, r8
   11bfc:	mov	r1, r6
   11c00:	bl	115c4 <sigaddset@plt>
   11c04:	b	11bcc <__assert_fail@plt+0x458>
   11c08:	movw	r0, #8868	; 0x22a4
   11c0c:	movt	r0, #1
   11c10:	str	r0, [sp, #24]
   11c14:	add	r0, r4, #4
   11c18:	movw	r8, #25064	; 0x61e8
   11c1c:	movt	r8, #3
   11c20:	mov	r1, r8
   11c24:	mov	r2, #128	; 0x80
   11c28:	bl	1148c <memcpy@plt>
   11c2c:	mov	r5, #0
   11c30:	str	r5, [sp, #156]	; 0x9c
   11c34:	b	11c44 <__assert_fail@plt+0x4d0>
   11c38:	sub	r5, r5, #1
   11c3c:	cmn	r5, #11
   11c40:	beq	11c70 <__assert_fail@plt+0x4fc>
   11c44:	ldr	r6, [r7, -r5, lsl #2]
   11c48:	mov	r0, r8
   11c4c:	mov	r1, r6
   11c50:	bl	11510 <sigismember@plt>
   11c54:	cmp	r0, #0
   11c58:	beq	11c38 <__assert_fail@plt+0x4c4>
   11c5c:	mov	r0, r6
   11c60:	mov	r1, r4
   11c64:	mov	r2, #0
   11c68:	bl	11540 <sigaction@plt>
   11c6c:	b	11c38 <__assert_fail@plt+0x4c4>
   11c70:	bl	122d0 <__assert_fail@plt+0xb5c>
   11c74:	mov	r0, #0
   11c78:	bl	1175c <close@plt>
   11c7c:	cmp	r0, #0
   11c80:	moveq	r0, #0
   11c84:	subeq	sp, fp, #28
   11c88:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c8c:	bl	1163c <__errno_location@plt>
   11c90:	ldr	r4, [r0]
   11c94:	movw	r1, #19276	; 0x4b4c
   11c98:	movt	r1, #2
   11c9c:	mov	r0, #0
   11ca0:	mov	r2, #5
   11ca4:	bl	114e0 <dcgettext@plt>
   11ca8:	mov	r2, r0
   11cac:	mov	r0, #0
   11cb0:	mov	r1, r4
   11cb4:	bl	115a0 <error@plt>
   11cb8:	bl	118a8 <__assert_fail@plt+0x134>
   11cbc:	cmn	r0, #3
   11cc0:	bne	11d18 <__assert_fail@plt+0x5a4>
   11cc4:	movw	r0, #24924	; 0x615c
   11cc8:	movt	r0, #3
   11ccc:	ldr	r3, [r0]
   11cd0:	movw	r0, #25020	; 0x61bc
   11cd4:	movt	r0, #3
   11cd8:	ldr	r0, [r0]
   11cdc:	mov	r1, #0
   11ce0:	movw	r2, #19219	; 0x4b13
   11ce4:	movt	r2, #2
   11ce8:	movw	r7, #19207	; 0x4b07
   11cec:	movt	r7, #2
   11cf0:	str	r7, [sp]
   11cf4:	str	r2, [sp, #4]
   11cf8:	str	r1, [sp, #8]
   11cfc:	movw	r1, #19186	; 0x4af2
   11d00:	movt	r1, #2
   11d04:	movw	r2, #19193	; 0x4af9
   11d08:	movt	r2, #2
   11d0c:	bl	22e0c <__assert_fail@plt+0x11698>
   11d10:	mov	r0, #0
   11d14:	bl	1160c <exit@plt>
   11d18:	cmn	r0, #2
   11d1c:	bne	11d68 <__assert_fail@plt+0x5f4>
   11d20:	mov	r0, #0
   11d24:	bl	11da0 <__assert_fail@plt+0x62c>
   11d28:	cmp	r0, r5
   11d2c:	bge	11d74 <__assert_fail@plt+0x600>
   11d30:	movw	r1, #19251	; 0x4b33
   11d34:	movt	r1, #2
   11d38:	mov	r0, #0
   11d3c:	mov	r2, #5
   11d40:	bl	114e0 <dcgettext@plt>
   11d44:	mov	r6, r0
   11d48:	add	r0, r4, r5, lsl #2
   11d4c:	ldr	r0, [r0, #-4]
   11d50:	bl	158a0 <__assert_fail@plt+0x412c>
   11d54:	mov	r3, r0
   11d58:	mov	r0, #0
   11d5c:	mov	r1, #0
   11d60:	mov	r2, r6
   11d64:	bl	115a0 <error@plt>
   11d68:	mov	r0, #1
   11d6c:	bl	11da0 <__assert_fail@plt+0x62c>
   11d70:	bl	11870 <__assert_fail@plt+0xfc>
   11d74:	movw	r1, #19235	; 0x4b23
   11d78:	movt	r1, #2
   11d7c:	mov	r0, #0
   11d80:	mov	r2, #5
   11d84:	bl	114e0 <dcgettext@plt>
   11d88:	mov	r2, r0
   11d8c:	mov	r0, #0
   11d90:	mov	r1, #0
   11d94:	bl	115a0 <error@plt>
   11d98:	mov	r0, #1
   11d9c:	bl	11da0 <__assert_fail@plt+0x62c>
   11da0:	push	{fp, lr}
   11da4:	mov	fp, sp
   11da8:	mov	r4, r0
   11dac:	cmp	r0, #0
   11db0:	bne	11ed8 <__assert_fail@plt+0x764>
   11db4:	movw	r1, #19326	; 0x4b7e
   11db8:	movt	r1, #2
   11dbc:	mov	r0, #0
   11dc0:	mov	r2, #5
   11dc4:	bl	114e0 <dcgettext@plt>
   11dc8:	mov	r1, r0
   11dcc:	movw	r0, #25276	; 0x62bc
   11dd0:	movt	r0, #3
   11dd4:	ldr	r2, [r0]
   11dd8:	mov	r0, #1
   11ddc:	bl	11684 <__printf_chk@plt>
   11de0:	movw	r1, #19365	; 0x4ba5
   11de4:	movt	r1, #2
   11de8:	mov	r0, #0
   11dec:	mov	r2, #5
   11df0:	bl	114e0 <dcgettext@plt>
   11df4:	movw	r5, #25020	; 0x61bc
   11df8:	movt	r5, #3
   11dfc:	ldr	r1, [r5]
   11e00:	bl	113e4 <fputs_unlocked@plt>
   11e04:	movw	r1, #19499	; 0x4c2b
   11e08:	movt	r1, #2
   11e0c:	mov	r0, #0
   11e10:	mov	r2, #5
   11e14:	bl	114e0 <dcgettext@plt>
   11e18:	ldr	r1, [r5]
   11e1c:	bl	113e4 <fputs_unlocked@plt>
   11e20:	bl	123b4 <__assert_fail@plt+0xc40>
   11e24:	movw	r1, #19534	; 0x4c4e
   11e28:	movt	r1, #2
   11e2c:	mov	r0, #0
   11e30:	mov	r2, #5
   11e34:	bl	114e0 <dcgettext@plt>
   11e38:	ldr	r1, [r5]
   11e3c:	bl	113e4 <fputs_unlocked@plt>
   11e40:	movw	r1, #19722	; 0x4d0a
   11e44:	movt	r1, #2
   11e48:	mov	r0, #0
   11e4c:	mov	r2, #5
   11e50:	bl	114e0 <dcgettext@plt>
   11e54:	ldr	r1, [r5]
   11e58:	bl	113e4 <fputs_unlocked@plt>
   11e5c:	movw	r1, #19788	; 0x4d4c
   11e60:	movt	r1, #2
   11e64:	mov	r0, #0
   11e68:	mov	r2, #5
   11e6c:	bl	114e0 <dcgettext@plt>
   11e70:	ldr	r1, [r5]
   11e74:	bl	113e4 <fputs_unlocked@plt>
   11e78:	movw	r1, #19987	; 0x4e13
   11e7c:	movt	r1, #2
   11e80:	mov	r0, #0
   11e84:	mov	r2, #5
   11e88:	bl	114e0 <dcgettext@plt>
   11e8c:	ldr	r1, [r5]
   11e90:	bl	113e4 <fputs_unlocked@plt>
   11e94:	movw	r1, #20032	; 0x4e40
   11e98:	movt	r1, #2
   11e9c:	mov	r0, #0
   11ea0:	mov	r2, #5
   11ea4:	bl	114e0 <dcgettext@plt>
   11ea8:	ldr	r1, [r5]
   11eac:	bl	113e4 <fputs_unlocked@plt>
   11eb0:	movw	r1, #20086	; 0x4e76
   11eb4:	movt	r1, #2
   11eb8:	mov	r0, #0
   11ebc:	mov	r2, #5
   11ec0:	bl	114e0 <dcgettext@plt>
   11ec4:	ldr	r1, [r5]
   11ec8:	bl	113e4 <fputs_unlocked@plt>
   11ecc:	bl	123e4 <__assert_fail@plt+0xc70>
   11ed0:	mov	r0, r4
   11ed4:	bl	1160c <exit@plt>
   11ed8:	movw	r0, #25016	; 0x61b8
   11edc:	movt	r0, #3
   11ee0:	ldr	r5, [r0]
   11ee4:	movw	r1, #19287	; 0x4b57
   11ee8:	movt	r1, #2
   11eec:	mov	r0, #0
   11ef0:	mov	r2, #5
   11ef4:	bl	114e0 <dcgettext@plt>
   11ef8:	mov	r2, r0
   11efc:	movw	r0, #25276	; 0x62bc
   11f00:	movt	r0, #3
   11f04:	ldr	r3, [r0]
   11f08:	mov	r0, r5
   11f0c:	mov	r1, #1
   11f10:	bl	116a8 <__fprintf_chk@plt>
   11f14:	mov	r0, r4
   11f18:	bl	1160c <exit@plt>
   11f1c:	push	{r4, r5, r6, r7, fp, lr}
   11f20:	add	fp, sp, #16
   11f24:	sub	sp, sp, #16
   11f28:	mov	r4, r0
   11f2c:	mov	r0, #0
   11f30:	add	r5, sp, #12
   11f34:	mov	r7, r4
   11f38:	b	11f50 <__assert_fail@plt+0x7dc>
   11f3c:	ldr	r1, [sp, #12]
   11f40:	mov	r0, r6
   11f44:	bl	12940 <__assert_fail@plt+0x11cc>
   11f48:	mov	r0, #1
   11f4c:	add	r7, r6, #1
   11f50:	ldrb	r1, [r7]
   11f54:	cmp	r1, #37	; 0x25
   11f58:	beq	11f70 <__assert_fail@plt+0x7fc>
   11f5c:	cmp	r1, #0
   11f60:	beq	11fc4 <__assert_fail@plt+0x850>
   11f64:	mov	r6, r7
   11f68:	add	r7, r7, #1
   11f6c:	b	11f50 <__assert_fail@plt+0x7dc>
   11f70:	mov	r6, r7
   11f74:	ldrb	r1, [r6, #1]!
   11f78:	cmp	r1, #37	; 0x25
   11f7c:	beq	11f4c <__assert_fail@plt+0x7d8>
   11f80:	tst	r0, #1
   11f84:	bne	11ffc <__assert_fail@plt+0x888>
   11f88:	mov	r0, r6
   11f8c:	mov	r1, r5
   11f90:	bl	128bc <__assert_fail@plt+0x1148>
   11f94:	add	r6, r7, r0
   11f98:	ldrb	r0, [r6, #1]!
   11f9c:	sub	r1, r0, #48	; 0x30
   11fa0:	cmp	r1, #10
   11fa4:	bcc	11f98 <__assert_fail@plt+0x824>
   11fa8:	cmp	r0, #46	; 0x2e
   11fac:	bne	11f3c <__assert_fail@plt+0x7c8>
   11fb0:	ldrb	r0, [r6, #1]!
   11fb4:	sub	r0, r0, #48	; 0x30
   11fb8:	cmp	r0, #10
   11fbc:	bcc	11fb0 <__assert_fail@plt+0x83c>
   11fc0:	b	11f3c <__assert_fail@plt+0x7c8>
   11fc4:	tst	r0, #1
   11fc8:	beq	12020 <__assert_fail@plt+0x8ac>
   11fcc:	mvn	r0, #-2147483648	; 0x80000000
   11fd0:	str	r4, [sp]
   11fd4:	str	r0, [sp, #4]
   11fd8:	mov	r0, #0
   11fdc:	mov	r1, #0
   11fe0:	mov	r2, #1
   11fe4:	mvn	r3, #0
   11fe8:	bl	11768 <__snprintf_chk@plt>
   11fec:	cmn	r0, #1
   11ff0:	subgt	sp, fp, #16
   11ff4:	popgt	{r4, r5, r6, r7, fp, pc}
   11ff8:	bl	11870 <__assert_fail@plt+0xfc>
   11ffc:	movw	r1, #20648	; 0x50a8
   12000:	movt	r1, #2
   12004:	mov	r0, #0
   12008:	mov	r2, #5
   1200c:	bl	114e0 <dcgettext@plt>
   12010:	mov	r2, r0
   12014:	mov	r0, #1
   12018:	mov	r1, #0
   1201c:	bl	115a0 <error@plt>
   12020:	movw	r1, #20696	; 0x50d8
   12024:	movt	r1, #2
   12028:	b	12004 <__assert_fail@plt+0x890>
   1202c:	push	{r4, r5, r6, sl, fp, lr}
   12030:	add	fp, sp, #16
   12034:	mov	r4, r0
   12038:	movw	r1, #22260	; 0x56f4
   1203c:	movt	r1, #2
   12040:	bl	11420 <strcmp@plt>
   12044:	cmp	r0, #0
   12048:	beq	120a8 <__assert_fail@plt+0x934>
   1204c:	mov	r0, #0
   12050:	mov	r1, r4
   12054:	mov	r2, #0
   12058:	mov	r3, #0
   1205c:	bl	13d9c <__assert_fail@plt+0x2628>
   12060:	cmn	r0, #1
   12064:	popgt	{r4, r5, r6, sl, fp, pc}
   12068:	bl	1163c <__errno_location@plt>
   1206c:	ldr	r5, [r0]
   12070:	movw	r1, #20920	; 0x51b8
   12074:	movt	r1, #2
   12078:	mov	r0, #0
   1207c:	mov	r2, #5
   12080:	bl	114e0 <dcgettext@plt>
   12084:	mov	r6, r0
   12088:	mov	r0, #4
   1208c:	mov	r1, r4
   12090:	bl	156ac <__assert_fail@plt+0x3f38>
   12094:	mov	r3, r0
   12098:	mov	r0, #1
   1209c:	mov	r1, r5
   120a0:	mov	r2, r6
   120a4:	bl	115a0 <error@plt>
   120a8:	pop	{r4, r5, r6, sl, fp, pc}
   120ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120b0:	add	fp, sp, #28
   120b4:	sub	sp, sp, #44	; 0x2c
   120b8:	cmp	r1, r0
   120bc:	bge	121f8 <__assert_fail@plt+0xa84>
   120c0:	mov	sl, r2
   120c4:	mov	r4, r1
   120c8:	mov	r6, r0
   120cc:	add	r9, sp, #32
   120d0:	movw	r8, #25216	; 0x6280
   120d4:	movt	r8, #3
   120d8:	b	120e8 <__assert_fail@plt+0x974>
   120dc:	add	r4, r4, #1
   120e0:	cmp	r4, r6
   120e4:	bge	121f8 <__assert_fail@plt+0xa84>
   120e8:	ldr	r2, [sl, r4, lsl #2]
   120ec:	ldrb	r0, [r2]
   120f0:	cmp	r0, #47	; 0x2f
   120f4:	cmpne	r0, #37	; 0x25
   120f8:	bne	12118 <__assert_fail@plt+0x9a4>
   120fc:	sub	r0, r0, #37	; 0x25
   12100:	clz	r0, r0
   12104:	lsr	r1, r0, #5
   12108:	mov	r0, r4
   1210c:	bl	12ab4 <__assert_fail@plt+0x1340>
   12110:	mov	r7, r0
   12114:	b	121c8 <__assert_fail@plt+0xa54>
   12118:	bl	12be0 <__assert_fail@plt+0x146c>
   1211c:	mov	r7, r0
   12120:	str	r4, [r0, #24]
   12124:	ldr	r0, [sl, r4, lsl #2]
   12128:	movw	r1, #20523	; 0x502b
   1212c:	movt	r1, #2
   12130:	str	r1, [sp]
   12134:	mov	r1, #0
   12138:	mov	r2, #10
   1213c:	mov	r3, r9
   12140:	bl	23940 <__assert_fail@plt+0x121cc>
   12144:	cmp	r0, #0
   12148:	bne	12200 <__assert_fail@plt+0xa8c>
   1214c:	ldr	r0, [sp, #36]	; 0x24
   12150:	cmn	r0, #1
   12154:	ble	12200 <__assert_fail@plt+0xa8c>
   12158:	ldr	r1, [sp, #32]
   1215c:	orrs	r2, r1, r0
   12160:	beq	12234 <__assert_fail@plt+0xac0>
   12164:	ldrd	r2, [r8]
   12168:	subs	r5, r1, r2
   1216c:	sbcs	r5, r0, r3
   12170:	bcc	1225c <__assert_fail@plt+0xae8>
   12174:	eor	r1, r1, r2
   12178:	eor	r0, r0, r3
   1217c:	orrs	r0, r1, r0
   12180:	bne	121b8 <__assert_fail@plt+0xa44>
   12184:	mov	r0, #0
   12188:	movw	r1, #21066	; 0x524a
   1218c:	movt	r1, #2
   12190:	mov	r2, #5
   12194:	bl	114e0 <dcgettext@plt>
   12198:	mov	r5, r0
   1219c:	ldr	r0, [sl, r4, lsl #2]
   121a0:	bl	158a0 <__assert_fail@plt+0x412c>
   121a4:	mov	r3, r0
   121a8:	mov	r0, #0
   121ac:	mov	r1, #0
   121b0:	mov	r2, r5
   121b4:	bl	115a0 <error@plt>
   121b8:	ldr	r0, [sp, #32]
   121bc:	ldr	r1, [sp, #36]	; 0x24
   121c0:	strd	r0, [r8]
   121c4:	strd	r0, [r7, #8]
   121c8:	add	r5, r4, #1
   121cc:	cmp	r5, r6
   121d0:	bge	120dc <__assert_fail@plt+0x968>
   121d4:	ldr	r2, [sl, r5, lsl #2]
   121d8:	ldrb	r0, [r2]
   121dc:	cmp	r0, #123	; 0x7b
   121e0:	bne	120dc <__assert_fail@plt+0x968>
   121e4:	mov	r0, r5
   121e8:	mov	r1, r7
   121ec:	bl	12c78 <__assert_fail@plt+0x1504>
   121f0:	mov	r4, r5
   121f4:	b	120dc <__assert_fail@plt+0x968>
   121f8:	sub	sp, fp, #28
   121fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12200:	movw	r1, #20947	; 0x51d3
   12204:	movt	r1, #2
   12208:	mov	r0, #0
   1220c:	mov	r2, #5
   12210:	bl	114e0 <dcgettext@plt>
   12214:	mov	r5, r0
   12218:	ldr	r0, [sl, r4, lsl #2]
   1221c:	bl	158a0 <__assert_fail@plt+0x412c>
   12220:	mov	r3, r0
   12224:	mov	r0, #1
   12228:	mov	r1, #0
   1222c:	mov	r2, r5
   12230:	bl	115a0 <error@plt>
   12234:	movw	r1, #20967	; 0x51e7
   12238:	movt	r1, #2
   1223c:	mov	r0, #0
   12240:	mov	r2, #5
   12244:	bl	114e0 <dcgettext@plt>
   12248:	mov	r2, r0
   1224c:	ldr	r3, [sl, r4, lsl #2]
   12250:	mov	r0, #1
   12254:	mov	r1, #0
   12258:	bl	115a0 <error@plt>
   1225c:	movw	r1, #21009	; 0x5211
   12260:	movt	r1, #2
   12264:	mov	r0, #0
   12268:	mov	r2, #5
   1226c:	bl	114e0 <dcgettext@plt>
   12270:	mov	r5, r0
   12274:	ldr	r0, [sl, r4, lsl #2]
   12278:	bl	158a0 <__assert_fail@plt+0x412c>
   1227c:	mov	r4, r0
   12280:	ldrd	r0, [r8]
   12284:	add	r2, sp, #11
   12288:	bl	13fec <__assert_fail@plt+0x2878>
   1228c:	str	r0, [sp]
   12290:	mov	r0, #1
   12294:	mov	r1, #0
   12298:	mov	r2, r5
   1229c:	mov	r3, r4
   122a0:	bl	115a0 <error@plt>
   122a4:	push	{r4, sl, fp, lr}
   122a8:	add	fp, sp, #8
   122ac:	mov	r4, r0
   122b0:	mov	r0, #1
   122b4:	bl	12780 <__assert_fail@plt+0x100c>
   122b8:	mov	r0, r4
   122bc:	mov	r1, #0
   122c0:	bl	114c8 <signal@plt>
   122c4:	mov	r0, r4
   122c8:	pop	{r4, sl, fp, lr}
   122cc:	b	113fc <raise@plt>
   122d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   122d4:	add	fp, sp, #24
   122d8:	movw	r8, #25040	; 0x61d0
   122dc:	movt	r8, #3
   122e0:	ldr	r0, [r8]
   122e4:	cmp	r0, #1
   122e8:	blt	123a4 <__assert_fail@plt+0xc30>
   122ec:	mov	r7, #0
   122f0:	movw	r6, #25036	; 0x61cc
   122f4:	movt	r6, #3
   122f8:	b	1230c <__assert_fail@plt+0xb98>
   122fc:	ldr	r0, [r8]
   12300:	add	r7, r7, #1
   12304:	cmp	r7, r0
   12308:	bge	123a4 <__assert_fail@plt+0xc30>
   1230c:	ldr	r0, [r6]
   12310:	add	r0, r0, r7, lsl #6
   12314:	ldrb	r0, [r0, #30]
   12318:	mov	r4, #0
   1231c:	mov	r5, #0
   12320:	cmp	r0, #0
   12324:	bne	12340 <__assert_fail@plt+0xbcc>
   12328:	b	1237c <__assert_fail@plt+0xc08>
   1232c:	mov	r2, r4
   12330:	mov	r3, r5
   12334:	bl	12e04 <__assert_fail@plt+0x1690>
   12338:	adds	r4, r4, #1
   1233c:	adc	r5, r5, #0
   12340:	ldr	r0, [r6]
   12344:	add	r0, r0, r7, lsl #6
   12348:	ldrb	r1, [r0, #28]
   1234c:	cmp	r1, #0
   12350:	bne	1232c <__assert_fail@plt+0xbb8>
   12354:	ldrd	r2, [r0, #16]
   12358:	subs	r1, r2, r4
   1235c:	sbcs	r1, r3, r5
   12360:	bge	1232c <__assert_fail@plt+0xbb8>
   12364:	b	122fc <__assert_fail@plt+0xb88>
   12368:	mov	r2, r4
   1236c:	mov	r3, r5
   12370:	bl	12fe8 <__assert_fail@plt+0x1874>
   12374:	adds	r4, r4, #1
   12378:	adc	r5, r5, #0
   1237c:	ldr	r0, [r6]
   12380:	add	r0, r0, r7, lsl #6
   12384:	ldrb	r1, [r0, #28]
   12388:	cmp	r1, #0
   1238c:	bne	12368 <__assert_fail@plt+0xbf4>
   12390:	ldrd	r2, [r0, #16]
   12394:	subs	r1, r2, r4
   12398:	sbcs	r1, r3, r5
   1239c:	bge	12368 <__assert_fail@plt+0xbf4>
   123a0:	b	122fc <__assert_fail@plt+0xb88>
   123a4:	bl	130c0 <__assert_fail@plt+0x194c>
   123a8:	bl	131a4 <__assert_fail@plt+0x1a30>
   123ac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   123b0:	b	125b4 <__assert_fail@plt+0xe40>
   123b4:	push	{fp, lr}
   123b8:	mov	fp, sp
   123bc:	movw	r1, #21494	; 0x53f6
   123c0:	movt	r1, #2
   123c4:	mov	r0, #0
   123c8:	mov	r2, #5
   123cc:	bl	114e0 <dcgettext@plt>
   123d0:	movw	r1, #25020	; 0x61bc
   123d4:	movt	r1, #3
   123d8:	ldr	r1, [r1]
   123dc:	pop	{fp, lr}
   123e0:	b	113e4 <fputs_unlocked@plt>
   123e4:	push	{r4, r5, r6, sl, fp, lr}
   123e8:	add	fp, sp, #16
   123ec:	sub	sp, sp, #56	; 0x38
   123f0:	movw	r0, #22104	; 0x5658
   123f4:	movt	r0, #2
   123f8:	add	r1, r0, #32
   123fc:	mov	r2, #48	; 0x30
   12400:	vld1.64	{d16-d17}, [r1]
   12404:	mov	r6, sp
   12408:	add	r1, r6, #32
   1240c:	add	r3, r0, #16
   12410:	vld1.64	{d18-d19}, [r0], r2
   12414:	vld1.64	{d20-d21}, [r3]
   12418:	vldr	d22, [r0]
   1241c:	vst1.64	{d16-d17}, [r1]
   12420:	add	r0, r6, #16
   12424:	vst1.64	{d20-d21}, [r0]
   12428:	mov	r0, r6
   1242c:	vst1.64	{d18-d19}, [r0], r2
   12430:	vstr	d22, [r0]
   12434:	ldr	r1, [sp]
   12438:	cmp	r1, #0
   1243c:	movw	r4, #19186	; 0x4af2
   12440:	movt	r4, #2
   12444:	beq	1246c <__assert_fail@plt+0xcf8>
   12448:	mov	r6, sp
   1244c:	movw	r5, #19186	; 0x4af2
   12450:	movt	r5, #2
   12454:	mov	r0, r5
   12458:	bl	11420 <strcmp@plt>
   1245c:	cmp	r0, #0
   12460:	ldrne	r1, [r6, #8]!
   12464:	cmpne	r1, #0
   12468:	bne	12454 <__assert_fail@plt+0xce0>
   1246c:	ldr	r5, [r6, #4]
   12470:	movw	r1, #21664	; 0x54a0
   12474:	movt	r1, #2
   12478:	mov	r0, #0
   1247c:	mov	r2, #5
   12480:	bl	114e0 <dcgettext@plt>
   12484:	mov	r1, r0
   12488:	movw	r2, #19193	; 0x4af9
   1248c:	movt	r2, #2
   12490:	movw	r3, #21687	; 0x54b7
   12494:	movt	r3, #2
   12498:	mov	r0, #1
   1249c:	bl	11684 <__printf_chk@plt>
   124a0:	cmp	r5, #0
   124a4:	moveq	r5, r4
   124a8:	mov	r0, #5
   124ac:	mov	r1, #0
   124b0:	bl	116e4 <setlocale@plt>
   124b4:	cmp	r0, #0
   124b8:	beq	124f8 <__assert_fail@plt+0xd84>
   124bc:	movw	r1, #21727	; 0x54df
   124c0:	movt	r1, #2
   124c4:	mov	r2, #3
   124c8:	bl	11744 <strncmp@plt>
   124cc:	cmp	r0, #0
   124d0:	beq	124f8 <__assert_fail@plt+0xd84>
   124d4:	movw	r1, #21731	; 0x54e3
   124d8:	movt	r1, #2
   124dc:	mov	r0, #0
   124e0:	mov	r2, #5
   124e4:	bl	114e0 <dcgettext@plt>
   124e8:	movw	r1, #25020	; 0x61bc
   124ec:	movt	r1, #3
   124f0:	ldr	r1, [r1]
   124f4:	bl	113e4 <fputs_unlocked@plt>
   124f8:	movw	r1, #21802	; 0x552a
   124fc:	movt	r1, #2
   12500:	mov	r0, #0
   12504:	mov	r2, #5
   12508:	bl	114e0 <dcgettext@plt>
   1250c:	mov	r1, r0
   12510:	movw	r2, #21687	; 0x54b7
   12514:	movt	r2, #2
   12518:	mov	r0, #1
   1251c:	mov	r3, r4
   12520:	bl	11684 <__printf_chk@plt>
   12524:	movw	r0, #21597	; 0x545d
   12528:	movt	r0, #2
   1252c:	movw	r6, #20523	; 0x502b
   12530:	movt	r6, #2
   12534:	cmp	r5, r4
   12538:	moveq	r6, r0
   1253c:	movw	r1, #21829	; 0x5545
   12540:	movt	r1, #2
   12544:	mov	r0, #0
   12548:	mov	r2, #5
   1254c:	bl	114e0 <dcgettext@plt>
   12550:	mov	r1, r0
   12554:	mov	r0, #1
   12558:	mov	r2, r5
   1255c:	mov	r3, r6
   12560:	sub	sp, fp, #16
   12564:	pop	{r4, r5, r6, sl, fp, lr}
   12568:	b	11684 <__printf_chk@plt>
   1256c:	push	{r4, sl, fp, lr}
   12570:	add	fp, sp, #8
   12574:	sub	sp, sp, #128	; 0x80
   12578:	bl	125b4 <__assert_fail@plt+0xe40>
   1257c:	movw	r1, #25064	; 0x61e8
   12580:	movt	r1, #3
   12584:	mov	r4, sp
   12588:	mov	r0, #0
   1258c:	mov	r2, r4
   12590:	bl	11450 <sigprocmask@plt>
   12594:	mov	r0, #0
   12598:	bl	12780 <__assert_fail@plt+0x100c>
   1259c:	mov	r0, #2
   125a0:	mov	r1, r4
   125a4:	mov	r2, #0
   125a8:	bl	11450 <sigprocmask@plt>
   125ac:	sub	sp, fp, #8
   125b0:	pop	{r4, sl, fp, pc}
   125b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   125b8:	add	fp, sp, #24
   125bc:	sub	sp, sp, #128	; 0x80
   125c0:	movw	r7, #25192	; 0x6268
   125c4:	movt	r7, #3
   125c8:	ldr	r0, [r7]
   125cc:	cmp	r0, #0
   125d0:	beq	126f0 <__assert_fail@plt+0xf7c>
   125d4:	bl	11588 <ferror_unlocked@plt>
   125d8:	cmp	r0, #0
   125dc:	bne	126f8 <__assert_fail@plt+0xf84>
   125e0:	ldr	r0, [r7]
   125e4:	bl	13cfc <__assert_fail@plt+0x2588>
   125e8:	cmp	r0, #0
   125ec:	bne	1273c <__assert_fail@plt+0xfc8>
   125f0:	movw	r0, #25200	; 0x6270
   125f4:	movt	r0, #3
   125f8:	ldrd	r0, [r0]
   125fc:	orrs	r2, r0, r1
   12600:	bne	126a8 <__assert_fail@plt+0xf34>
   12604:	movw	r2, #25056	; 0x61e0
   12608:	movt	r2, #3
   1260c:	ldrb	r2, [r2]
   12610:	cmp	r2, #1
   12614:	bne	126a8 <__assert_fail@plt+0xf34>
   12618:	movw	r1, #25064	; 0x61e8
   1261c:	movt	r1, #3
   12620:	mov	r5, sp
   12624:	mov	r0, #0
   12628:	mov	r2, r5
   1262c:	bl	11450 <sigprocmask@plt>
   12630:	movw	r8, #25196	; 0x626c
   12634:	movt	r8, #3
   12638:	ldr	r0, [r8]
   1263c:	bl	114ec <unlink@plt>
   12640:	mov	r6, r0
   12644:	bl	1163c <__errno_location@plt>
   12648:	ldr	r4, [r0]
   1264c:	movw	r0, #25208	; 0x6278
   12650:	movt	r0, #3
   12654:	ldr	r1, [r0]
   12658:	sub	r1, r1, #1
   1265c:	str	r1, [r0]
   12660:	mov	r0, #2
   12664:	mov	r1, r5
   12668:	mov	r2, #0
   1266c:	bl	11450 <sigprocmask@plt>
   12670:	cmp	r6, #0
   12674:	cmpne	r4, #2
   12678:	beq	126e8 <__assert_fail@plt+0xf74>
   1267c:	ldr	r2, [r8]
   12680:	mov	r0, #0
   12684:	mov	r1, #3
   12688:	bl	15760 <__assert_fail@plt+0x3fec>
   1268c:	mov	r3, r0
   12690:	movw	r2, #21063	; 0x5247
   12694:	movt	r2, #2
   12698:	mov	r0, #0
   1269c:	mov	r1, r4
   126a0:	bl	115a0 <error@plt>
   126a4:	b	126e8 <__assert_fail@plt+0xf74>
   126a8:	movw	r2, #25044	; 0x61d4
   126ac:	movt	r2, #3
   126b0:	ldrb	r2, [r2]
   126b4:	cmp	r2, #0
   126b8:	bne	126e8 <__assert_fail@plt+0xf74>
   126bc:	movw	r2, #25020	; 0x61bc
   126c0:	movt	r2, #3
   126c4:	ldr	r4, [r2]
   126c8:	mov	r2, sp
   126cc:	bl	13fec <__assert_fail@plt+0x2878>
   126d0:	mov	r3, r0
   126d4:	movw	r2, #23025	; 0x59f1
   126d8:	movt	r2, #2
   126dc:	mov	r0, r4
   126e0:	mov	r1, #1
   126e4:	bl	116a8 <__fprintf_chk@plt>
   126e8:	mov	r0, #0
   126ec:	str	r0, [r7]
   126f0:	sub	sp, fp, #24
   126f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   126f8:	mov	r5, #0
   126fc:	movw	r1, #20524	; 0x502c
   12700:	movt	r1, #2
   12704:	mov	r0, #0
   12708:	mov	r2, #5
   1270c:	bl	114e0 <dcgettext@plt>
   12710:	mov	r4, r0
   12714:	movw	r0, #25196	; 0x626c
   12718:	movt	r0, #3
   1271c:	ldr	r1, [r0]
   12720:	mov	r0, #4
   12724:	bl	156ac <__assert_fail@plt+0x3f38>
   12728:	mov	r3, r0
   1272c:	mov	r0, #0
   12730:	mov	r1, #0
   12734:	mov	r2, r4
   12738:	b	12774 <__assert_fail@plt+0x1000>
   1273c:	bl	1163c <__errno_location@plt>
   12740:	ldr	r4, [r0]
   12744:	movw	r0, #25196	; 0x626c
   12748:	movt	r0, #3
   1274c:	ldr	r2, [r0]
   12750:	mov	r5, #0
   12754:	mov	r0, #0
   12758:	mov	r1, #3
   1275c:	bl	15760 <__assert_fail@plt+0x3fec>
   12760:	mov	r3, r0
   12764:	movw	r2, #21063	; 0x5247
   12768:	movt	r2, #2
   1276c:	mov	r0, #0
   12770:	mov	r1, r4
   12774:	bl	115a0 <error@plt>
   12778:	str	r5, [r7]
   1277c:	bl	118a8 <__assert_fail@plt+0x134>
   12780:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12784:	add	fp, sp, #24
   12788:	mov	r4, r0
   1278c:	movw	r0, #25045	; 0x61d5
   12790:	movt	r0, #3
   12794:	ldrb	r0, [r0]
   12798:	cmp	r0, #0
   1279c:	beq	1282c <__assert_fail@plt+0x10b8>
   127a0:	movw	r9, #25208	; 0x6278
   127a4:	movt	r9, #3
   127a8:	ldr	r5, [r9]
   127ac:	cmp	r5, #1
   127b0:	blt	12824 <__assert_fail@plt+0x10b0>
   127b4:	movw	r8, #21063	; 0x5247
   127b8:	movt	r8, #2
   127bc:	b	127c8 <__assert_fail@plt+0x1054>
   127c0:	cmp	r5, #0
   127c4:	ble	12824 <__assert_fail@plt+0x10b0>
   127c8:	sub	r5, r5, #1
   127cc:	mov	r0, r5
   127d0:	bl	12830 <__assert_fail@plt+0x10bc>
   127d4:	mov	r7, r0
   127d8:	bl	114ec <unlink@plt>
   127dc:	cmp	r0, #0
   127e0:	beq	127c0 <__assert_fail@plt+0x104c>
   127e4:	bl	1163c <__errno_location@plt>
   127e8:	ldr	r6, [r0]
   127ec:	cmp	r6, #2
   127f0:	beq	127c0 <__assert_fail@plt+0x104c>
   127f4:	cmp	r4, #0
   127f8:	bne	127c0 <__assert_fail@plt+0x104c>
   127fc:	mov	r0, #0
   12800:	mov	r1, #3
   12804:	mov	r2, r7
   12808:	bl	15760 <__assert_fail@plt+0x3fec>
   1280c:	mov	r3, r0
   12810:	mov	r0, #0
   12814:	mov	r1, r6
   12818:	mov	r2, r8
   1281c:	bl	115a0 <error@plt>
   12820:	b	127c0 <__assert_fail@plt+0x104c>
   12824:	mov	r0, #0
   12828:	str	r0, [r9]
   1282c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12830:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12834:	add	fp, sp, #24
   12838:	sub	sp, sp, #8
   1283c:	mov	r4, r0
   12840:	movw	r8, #25060	; 0x61e4
   12844:	movt	r8, #3
   12848:	ldr	r0, [r8]
   1284c:	movw	r7, #25048	; 0x61d8
   12850:	movt	r7, #3
   12854:	ldr	r1, [r7]
   12858:	bl	11570 <strcpy@plt>
   1285c:	movw	r9, #25052	; 0x61dc
   12860:	movt	r9, #3
   12864:	ldr	r5, [r9]
   12868:	ldr	r6, [r8]
   1286c:	ldr	r0, [r7]
   12870:	bl	11624 <strlen@plt>
   12874:	add	r0, r6, r0
   12878:	cmp	r5, #0
   1287c:	beq	1288c <__assert_fail@plt+0x1118>
   12880:	ldr	r3, [r9]
   12884:	str	r4, [sp]
   12888:	b	128a4 <__assert_fail@plt+0x1130>
   1288c:	movw	r1, #24920	; 0x6158
   12890:	movt	r1, #3
   12894:	ldr	r1, [r1]
   12898:	stm	sp, {r1, r4}
   1289c:	movw	r3, #20543	; 0x503f
   128a0:	movt	r3, #2
   128a4:	mov	r1, #1
   128a8:	mvn	r2, #0
   128ac:	bl	11654 <__sprintf_chk@plt>
   128b0:	ldr	r0, [r8]
   128b4:	sub	sp, fp, #24
   128b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128bc:	push	{fp, lr}
   128c0:	mov	fp, sp
   128c4:	mov	ip, #0
   128c8:	mov	lr, #0
   128cc:	b	128d8 <__assert_fail@plt+0x1164>
   128d0:	orr	ip, ip, #1
   128d4:	add	lr, lr, #1
   128d8:	ldrb	r3, [r0, lr]
   128dc:	sub	r3, r3, #35	; 0x23
   128e0:	cmp	r3, #13
   128e4:	bhi	12934 <__assert_fail@plt+0x11c0>
   128e8:	add	r2, pc, #0
   128ec:	ldr	pc, [r2, r3, lsl #2]
   128f0:	andeq	r2, r1, r8, lsr #18
   128f4:	andeq	r2, r1, r4, lsr r9
   128f8:	andeq	r2, r1, r4, lsr r9
   128fc:	andeq	r2, r1, r4, lsr r9
   12900:	ldrdeq	r2, [r1], -r0
   12904:	andeq	r2, r1, r4, lsr r9
   12908:	andeq	r2, r1, r4, lsr r9
   1290c:	andeq	r2, r1, r4, lsr r9
   12910:	andeq	r2, r1, r4, lsr r9
   12914:	andeq	r2, r1, r4, lsr r9
   12918:	ldrdeq	r2, [r1], -r4
   1291c:	andeq	r2, r1, r4, lsr r9
   12920:	andeq	r2, r1, r4, lsr r9
   12924:	ldrdeq	r2, [r1], -r4
   12928:	orr	ip, ip, #2
   1292c:	add	lr, lr, #1
   12930:	b	128d8 <__assert_fail@plt+0x1164>
   12934:	str	ip, [r1]
   12938:	mov	r0, lr
   1293c:	pop	{fp, pc}
   12940:	push	{r4, r5, fp, lr}
   12944:	add	fp, sp, #8
   12948:	sub	sp, sp, #8
   1294c:	ldrb	r4, [r0]
   12950:	sub	r3, r4, #88	; 0x58
   12954:	cmp	r3, #32
   12958:	bhi	12a3c <__assert_fail@plt+0x12c8>
   1295c:	mvn	r2, #1
   12960:	add	r5, pc, #0
   12964:	ldr	pc, [r5, r3, lsl #2]
   12968:	andeq	r2, r1, ip, ror #19
   1296c:	andeq	r2, r1, r8, ror #20
   12970:	andeq	r2, r1, r8, ror #20
   12974:	andeq	r2, r1, r8, ror #20
   12978:	andeq	r2, r1, r8, ror #20
   1297c:	andeq	r2, r1, r8, ror #20
   12980:	andeq	r2, r1, r8, ror #20
   12984:	andeq	r2, r1, r8, ror #20
   12988:	andeq	r2, r1, r8, ror #20
   1298c:	andeq	r2, r1, r8, ror #20
   12990:	andeq	r2, r1, r8, ror #20
   12994:	andeq	r2, r1, r8, ror #20
   12998:	strdeq	r2, [r1], -ip
   1299c:	andeq	r2, r1, r8, ror #20
   129a0:	andeq	r2, r1, r8, ror #20
   129a4:	andeq	r2, r1, r8, ror #20
   129a8:	andeq	r2, r1, r8, ror #20
   129ac:	strdeq	r2, [r1], -ip
   129b0:	andeq	r2, r1, r8, ror #20
   129b4:	andeq	r2, r1, r8, ror #20
   129b8:	andeq	r2, r1, r8, ror #20
   129bc:	andeq	r2, r1, r8, ror #20
   129c0:	andeq	r2, r1, r8, ror #20
   129c4:	andeq	r2, r1, ip, ror #19
   129c8:	andeq	r2, r1, r8, ror #20
   129cc:	andeq	r2, r1, r8, ror #20
   129d0:	andeq	r2, r1, r8, ror #20
   129d4:	andeq	r2, r1, r8, ror #20
   129d8:	andeq	r2, r1, r8, ror #20
   129dc:	strdeq	r2, [r1], -r4
   129e0:	andeq	r2, r1, r8, ror #20
   129e4:	andeq	r2, r1, r8, ror #20
   129e8:	andeq	r2, r1, ip, ror #19
   129ec:	mvn	r2, #2
   129f0:	b	129fc <__assert_fail@plt+0x1288>
   129f4:	mov	r3, #100	; 0x64
   129f8:	strb	r3, [r0]
   129fc:	ands	r5, r2, r1
   12a00:	subeq	sp, fp, #8
   12a04:	popeq	{r4, r5, fp, pc}
   12a08:	movw	r1, #20870	; 0x5186
   12a0c:	movt	r1, #2
   12a10:	mov	r0, #0
   12a14:	mov	r2, #5
   12a18:	bl	114e0 <dcgettext@plt>
   12a1c:	mov	r2, r0
   12a20:	str	r4, [sp]
   12a24:	mov	r3, #35	; 0x23
   12a28:	tst	r5, #2
   12a2c:	movweq	r3, #39	; 0x27
   12a30:	mov	r0, #1
   12a34:	mov	r1, #0
   12a38:	bl	115a0 <error@plt>
   12a3c:	cmp	r4, #0
   12a40:	bne	12a68 <__assert_fail@plt+0x12f4>
   12a44:	movw	r1, #20742	; 0x5106
   12a48:	movt	r1, #2
   12a4c:	mov	r0, #0
   12a50:	mov	r2, #5
   12a54:	bl	114e0 <dcgettext@plt>
   12a58:	mov	r2, r0
   12a5c:	mov	r0, #1
   12a60:	mov	r1, #0
   12a64:	bl	115a0 <error@plt>
   12a68:	bl	11600 <__ctype_b_loc@plt>
   12a6c:	ldr	r0, [r0]
   12a70:	add	r0, r0, r4, lsl #1
   12a74:	ldrb	r0, [r0, #1]
   12a78:	tst	r0, #64	; 0x40
   12a7c:	bne	12a8c <__assert_fail@plt+0x1318>
   12a80:	movw	r1, #20824	; 0x5158
   12a84:	movt	r1, #2
   12a88:	b	12a94 <__assert_fail@plt+0x1320>
   12a8c:	movw	r1, #20781	; 0x512d
   12a90:	movt	r1, #2
   12a94:	mov	r0, #0
   12a98:	mov	r2, #5
   12a9c:	bl	114e0 <dcgettext@plt>
   12aa0:	mov	r2, r0
   12aa4:	mov	r0, #1
   12aa8:	mov	r1, #0
   12aac:	mov	r3, r4
   12ab0:	bl	115a0 <error@plt>
   12ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab8:	add	fp, sp, #28
   12abc:	sub	sp, sp, #4
   12ac0:	mov	r8, r2
   12ac4:	mov	r9, r1
   12ac8:	mov	r4, r0
   12acc:	mov	r7, r2
   12ad0:	ldrb	r6, [r7], #1
   12ad4:	mov	r0, r7
   12ad8:	mov	r1, r6
   12adc:	bl	11708 <strrchr@plt>
   12ae0:	cmp	r0, #0
   12ae4:	beq	12b74 <__assert_fail@plt+0x1400>
   12ae8:	mov	r5, r0
   12aec:	bl	12be0 <__assert_fail@plt+0x146c>
   12af0:	mov	r6, r0
   12af4:	mov	sl, #0
   12af8:	str	sl, [r0, #36]	; 0x24
   12afc:	mov	r0, #1
   12b00:	strb	r0, [r6, #30]
   12b04:	strb	r9, [r6, #29]
   12b08:	str	r4, [r6, #24]
   12b0c:	mov	r4, r6
   12b10:	str	sl, [r4, #32]!
   12b14:	mov	r0, #256	; 0x100
   12b18:	bl	22f14 <__assert_fail@plt+0x117a0>
   12b1c:	str	r0, [r6, #48]	; 0x30
   12b20:	str	sl, [r6, #52]	; 0x34
   12b24:	movw	r0, #25588	; 0x63f4
   12b28:	movt	r0, #3
   12b2c:	movw	r1, #710	; 0x2c6
   12b30:	str	r1, [r0]
   12b34:	mvn	r0, r8
   12b38:	add	r1, r5, r0
   12b3c:	mov	r0, r7
   12b40:	mov	r2, r4
   12b44:	bl	15cb8 <__assert_fail@plt+0x4544>
   12b48:	cmp	r0, #0
   12b4c:	bne	12ba0 <__assert_fail@plt+0x142c>
   12b50:	ldrb	r0, [r5, #1]!
   12b54:	cmp	r0, #0
   12b58:	movne	r0, r6
   12b5c:	movne	r1, r8
   12b60:	movne	r2, r5
   12b64:	blne	12d94 <__assert_fail@plt+0x1620>
   12b68:	mov	r0, r6
   12b6c:	sub	sp, fp, #28
   12b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b74:	movw	r1, #21127	; 0x5287
   12b78:	movt	r1, #2
   12b7c:	mov	r0, #0
   12b80:	mov	r2, #5
   12b84:	bl	114e0 <dcgettext@plt>
   12b88:	mov	r2, r0
   12b8c:	str	r6, [sp]
   12b90:	mov	r0, #1
   12b94:	mov	r1, #0
   12b98:	mov	r3, r8
   12b9c:	bl	115a0 <error@plt>
   12ba0:	mov	r7, r0
   12ba4:	movw	r1, #21162	; 0x52aa
   12ba8:	movt	r1, #2
   12bac:	mov	r0, #0
   12bb0:	mov	r2, #5
   12bb4:	bl	114e0 <dcgettext@plt>
   12bb8:	mov	r4, r0
   12bbc:	mov	r0, r8
   12bc0:	bl	158a0 <__assert_fail@plt+0x412c>
   12bc4:	mov	r3, r0
   12bc8:	str	r7, [sp]
   12bcc:	mov	r0, #0
   12bd0:	mov	r1, #0
   12bd4:	mov	r2, r4
   12bd8:	bl	115a0 <error@plt>
   12bdc:	bl	118a8 <__assert_fail@plt+0x134>
   12be0:	push	{r4, r5, fp, lr}
   12be4:	add	fp, sp, #8
   12be8:	sub	sp, sp, #8
   12bec:	movw	r0, #25224	; 0x6288
   12bf0:	movt	r0, #3
   12bf4:	ldr	r0, [r0]
   12bf8:	movw	r4, #25040	; 0x61d0
   12bfc:	movt	r4, #3
   12c00:	ldr	r1, [r4]
   12c04:	cmp	r1, r0
   12c08:	movw	r5, #25036	; 0x61cc
   12c0c:	movt	r5, #3
   12c10:	bne	12c38 <__assert_fail@plt+0x14c4>
   12c14:	ldr	r0, [r5]
   12c18:	mov	r1, #64	; 0x40
   12c1c:	str	r1, [sp]
   12c20:	movw	r1, #25224	; 0x6288
   12c24:	movt	r1, #3
   12c28:	mov	r2, #1
   12c2c:	mvn	r3, #0
   12c30:	bl	2302c <__assert_fail@plt+0x118b8>
   12c34:	str	r0, [r5]
   12c38:	ldr	r0, [r4]
   12c3c:	add	r1, r0, #1
   12c40:	str	r1, [r4]
   12c44:	ldr	r1, [r5]
   12c48:	add	r0, r1, r0, lsl #6
   12c4c:	mov	r1, #0
   12c50:	vmov.i32	q8, #0	; 0x00000000
   12c54:	strb	r1, [r0, #28]
   12c58:	strb	r1, [r0, #30]
   12c5c:	str	r1, [r0, #16]
   12c60:	mov	r2, #20
   12c64:	mov	r3, r0
   12c68:	vst1.64	{d16-d17}, [r3], r2
   12c6c:	str	r1, [r3]
   12c70:	sub	sp, fp, #8
   12c74:	pop	{r4, r5, fp, pc}
   12c78:	push	{r4, r5, r6, r7, fp, lr}
   12c7c:	add	fp, sp, #16
   12c80:	sub	sp, sp, #16
   12c84:	mov	r4, r2
   12c88:	mov	r6, r1
   12c8c:	mov	r5, r0
   12c90:	mov	r0, r2
   12c94:	bl	11624 <strlen@plt>
   12c98:	mov	r1, r0
   12c9c:	sub	r7, r0, #1
   12ca0:	ldrb	r0, [r4, r7]
   12ca4:	cmp	r0, #125	; 0x7d
   12ca8:	bne	12d60 <__assert_fail@plt+0x15ec>
   12cac:	mov	r0, #0
   12cb0:	strb	r0, [r4, r7]
   12cb4:	add	r0, r4, #1
   12cb8:	cmp	r1, #3
   12cbc:	bne	12cd8 <__assert_fail@plt+0x1564>
   12cc0:	ldrb	r1, [r0]
   12cc4:	cmp	r1, #42	; 0x2a
   12cc8:	bne	12cd8 <__assert_fail@plt+0x1564>
   12ccc:	mov	r0, #1
   12cd0:	strb	r0, [r6, #28]
   12cd4:	b	12d10 <__assert_fail@plt+0x159c>
   12cd8:	movw	r1, #20523	; 0x502b
   12cdc:	movt	r1, #2
   12ce0:	str	r1, [sp]
   12ce4:	add	r3, sp, #8
   12ce8:	mov	r1, #0
   12cec:	mov	r2, #10
   12cf0:	bl	23940 <__assert_fail@plt+0x121cc>
   12cf4:	cmp	r0, #0
   12cf8:	bne	12d20 <__assert_fail@plt+0x15ac>
   12cfc:	ldr	r1, [sp, #12]
   12d00:	cmn	r1, #1
   12d04:	ble	12d20 <__assert_fail@plt+0x15ac>
   12d08:	ldr	r0, [sp, #8]
   12d0c:	strd	r0, [r6, #16]
   12d10:	mov	r0, #125	; 0x7d
   12d14:	strb	r0, [r4, r7]
   12d18:	sub	sp, fp, #16
   12d1c:	pop	{r4, r5, r6, r7, fp, pc}
   12d20:	movw	r1, #21270	; 0x5316
   12d24:	movt	r1, #2
   12d28:	mov	r0, #0
   12d2c:	mov	r2, #5
   12d30:	bl	114e0 <dcgettext@plt>
   12d34:	mov	r4, r0
   12d38:	movw	r0, #25032	; 0x61c8
   12d3c:	movt	r0, #3
   12d40:	ldr	r0, [r0]
   12d44:	ldr	r0, [r0, r5, lsl #2]
   12d48:	bl	158a0 <__assert_fail@plt+0x412c>
   12d4c:	mov	r3, r0
   12d50:	mov	r0, #1
   12d54:	mov	r1, #0
   12d58:	mov	r2, r4
   12d5c:	bl	115a0 <error@plt>
   12d60:	movw	r1, #21234	; 0x52f2
   12d64:	movt	r1, #2
   12d68:	mov	r0, #0
   12d6c:	mov	r2, #5
   12d70:	bl	114e0 <dcgettext@plt>
   12d74:	mov	r5, r0
   12d78:	mov	r0, r4
   12d7c:	bl	158a0 <__assert_fail@plt+0x412c>
   12d80:	mov	r3, r0
   12d84:	mov	r0, #1
   12d88:	mov	r1, #0
   12d8c:	mov	r2, r5
   12d90:	bl	115a0 <error@plt>
   12d94:	push	{r4, r5, fp, lr}
   12d98:	add	fp, sp, #8
   12d9c:	sub	sp, sp, #8
   12da0:	mov	r4, r1
   12da4:	mov	r3, r0
   12da8:	movw	r0, #20523	; 0x502b
   12dac:	movt	r0, #2
   12db0:	str	r0, [sp]
   12db4:	mov	r0, r2
   12db8:	mov	r1, #0
   12dbc:	mov	r2, #10
   12dc0:	bl	233a8 <__assert_fail@plt+0x11c34>
   12dc4:	cmp	r0, #0
   12dc8:	subeq	sp, fp, #8
   12dcc:	popeq	{r4, r5, fp, pc}
   12dd0:	movw	r1, #21197	; 0x52cd
   12dd4:	movt	r1, #2
   12dd8:	mov	r0, #0
   12ddc:	mov	r2, #5
   12de0:	bl	114e0 <dcgettext@plt>
   12de4:	mov	r5, r0
   12de8:	mov	r0, r4
   12dec:	bl	158a0 <__assert_fail@plt+0x412c>
   12df0:	mov	r3, r0
   12df4:	mov	r0, #1
   12df8:	mov	r1, #0
   12dfc:	mov	r2, r5
   12e00:	bl	115a0 <error@plt>
   12e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e08:	add	fp, sp, #28
   12e0c:	sub	sp, sp, #12
   12e10:	mov	r8, r3
   12e14:	mov	r9, r2
   12e18:	mov	r4, r0
   12e1c:	ldrb	r5, [r0, #29]
   12e20:	cmp	r5, #0
   12e24:	bleq	130c0 <__assert_fail@plt+0x194c>
   12e28:	ldr	r0, [r4, #4]
   12e2c:	cmn	r0, #1
   12e30:	movw	r6, #25232	; 0x6290
   12e34:	movt	r6, #3
   12e38:	ble	12ebc <__assert_fail@plt+0x1748>
   12e3c:	ldrd	r0, [r6]
   12e40:	adds	r0, r0, #1
   12e44:	adc	r1, r1, #0
   12e48:	strd	r0, [r6]
   12e4c:	bl	131c4 <__assert_fail@plt+0x1a50>
   12e50:	cmp	r0, #0
   12e54:	beq	12f80 <__assert_fail@plt+0x180c>
   12e58:	add	r7, r4, #32
   12e5c:	mov	sl, #0
   12e60:	ldr	r2, [r0]
   12e64:	ldr	r1, [r0, #4]
   12e68:	sub	r0, r2, #1
   12e6c:	ldrb	r3, [r1, r0]
   12e70:	cmp	r3, #10
   12e74:	moveq	r2, r0
   12e78:	stm	sp, {r2, sl}
   12e7c:	mov	r0, r7
   12e80:	mov	r3, #0
   12e84:	bl	17170 <__assert_fail@plt+0x59fc>
   12e88:	cmn	r0, #1
   12e8c:	bne	12f10 <__assert_fail@plt+0x179c>
   12e90:	bl	133ac <__assert_fail@plt+0x1c38>
   12e94:	cmp	r5, #0
   12e98:	bleq	1348c <__assert_fail@plt+0x1d18>
   12e9c:	ldrd	r0, [r6]
   12ea0:	adds	r0, r0, #1
   12ea4:	adc	r1, r1, #0
   12ea8:	strd	r0, [r6]
   12eac:	bl	131c4 <__assert_fail@plt+0x1a50>
   12eb0:	cmp	r0, #0
   12eb4:	bne	12e60 <__assert_fail@plt+0x16ec>
   12eb8:	b	12f80 <__assert_fail@plt+0x180c>
   12ebc:	add	r7, r4, #32
   12ec0:	mov	sl, #0
   12ec4:	ldrd	r0, [r6]
   12ec8:	adds	r0, r0, #1
   12ecc:	adc	r1, r1, #0
   12ed0:	strd	r0, [r6]
   12ed4:	bl	131c4 <__assert_fail@plt+0x1a50>
   12ed8:	cmp	r0, #0
   12edc:	beq	12f80 <__assert_fail@plt+0x180c>
   12ee0:	ldr	r2, [r0]
   12ee4:	ldr	r1, [r0, #4]
   12ee8:	sub	r0, r2, #1
   12eec:	ldrb	r3, [r1, r0]
   12ef0:	cmp	r3, #10
   12ef4:	moveq	r2, r0
   12ef8:	stm	sp, {r2, sl}
   12efc:	mov	r0, r7
   12f00:	mov	r3, #0
   12f04:	bl	17170 <__assert_fail@plt+0x59fc>
   12f08:	cmn	r0, #1
   12f0c:	beq	12ec4 <__assert_fail@plt+0x1750>
   12f10:	cmn	r0, #2
   12f14:	beq	12fa8 <__assert_fail@plt+0x1834>
   12f18:	ldrd	r0, [r6]
   12f1c:	ldm	r4, {r2, r7}
   12f20:	ldr	r3, [r4, #24]
   12f24:	adds	r8, r2, r0
   12f28:	adc	r9, r7, r1
   12f2c:	cmp	r5, #0
   12f30:	mov	r2, r5
   12f34:	movwne	r2, #1
   12f38:	mov	r0, r8
   12f3c:	mov	r1, r9
   12f40:	bl	13530 <__assert_fail@plt+0x1dbc>
   12f44:	cmp	r5, #0
   12f48:	bleq	125b4 <__assert_fail@plt+0xe40>
   12f4c:	ldrd	r0, [r4]
   12f50:	subs	r0, r0, #1
   12f54:	sbcs	r0, r1, #0
   12f58:	strdge	r8, [r6]
   12f5c:	movw	r0, #25046	; 0x61d6
   12f60:	movt	r0, #3
   12f64:	ldrb	r0, [r0]
   12f68:	sub	sp, fp, #28
   12f6c:	cmp	r0, #1
   12f70:	bne	12f7c <__assert_fail@plt+0x1808>
   12f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f78:	b	133ac <__assert_fail@plt+0x1c38>
   12f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f80:	ldrb	r0, [r4, #28]
   12f84:	cmp	r0, #0
   12f88:	bne	12fd0 <__assert_fail@plt+0x185c>
   12f8c:	cmp	r5, #0
   12f90:	movwne	r5, #1
   12f94:	str	r5, [sp]
   12f98:	mov	r0, r4
   12f9c:	mov	r2, r9
   12fa0:	mov	r3, r8
   12fa4:	bl	132b4 <__assert_fail@plt+0x1b40>
   12fa8:	movw	r1, #21312	; 0x5340
   12fac:	movt	r1, #2
   12fb0:	mov	r0, #0
   12fb4:	mov	r2, #5
   12fb8:	bl	114e0 <dcgettext@plt>
   12fbc:	mov	r2, r0
   12fc0:	mov	r0, #0
   12fc4:	mov	r1, #0
   12fc8:	bl	115a0 <error@plt>
   12fcc:	bl	118a8 <__assert_fail@plt+0x134>
   12fd0:	cmp	r5, #0
   12fd4:	bne	12fe0 <__assert_fail@plt+0x186c>
   12fd8:	bl	131a4 <__assert_fail@plt+0x1a30>
   12fdc:	bl	125b4 <__assert_fail@plt+0xe40>
   12fe0:	mov	r0, #0
   12fe4:	bl	1160c <exit@plt>
   12fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fec:	add	fp, sp, #28
   12ff0:	sub	sp, sp, #4
   12ff4:	mov	sl, r2
   12ff8:	mov	r6, r0
   12ffc:	adds	r4, r2, #1
   13000:	str	r3, [sp]
   13004:	adc	r7, r3, #0
   13008:	ldrd	r8, [r0, #8]
   1300c:	bl	130c0 <__assert_fail@plt+0x194c>
   13010:	bl	13af4 <__assert_fail@plt+0x2380>
   13014:	cmp	r0, #0
   13018:	movw	r0, #25046	; 0x61d6
   1301c:	movt	r0, #3
   13020:	beq	13030 <__assert_fail@plt+0x18bc>
   13024:	ldrb	r0, [r0]
   13028:	cmp	r0, #1
   1302c:	beq	130b0 <__assert_fail@plt+0x193c>
   13030:	umull	r5, r0, r8, r4
   13034:	mla	r0, r8, r7, r0
   13038:	mla	r9, r9, r4, r0
   1303c:	bl	13a94 <__assert_fail@plt+0x2320>
   13040:	mov	r7, r0
   13044:	subs	r0, r0, r5
   13048:	sbcs	r0, r1, r9
   1304c:	bge	13078 <__assert_fail@plt+0x1904>
   13050:	mov	r4, r1
   13054:	adds	r7, r7, #1
   13058:	adc	r4, r4, #0
   1305c:	bl	133ac <__assert_fail@plt+0x1c38>
   13060:	cmp	r0, #0
   13064:	beq	130b0 <__assert_fail@plt+0x193c>
   13068:	bl	1348c <__assert_fail@plt+0x1d18>
   1306c:	subs	r0, r7, r5
   13070:	sbcs	r0, r4, r9
   13074:	blt	13054 <__assert_fail@plt+0x18e0>
   13078:	bl	125b4 <__assert_fail@plt+0xe40>
   1307c:	movw	r4, #25046	; 0x61d6
   13080:	movt	r4, #3
   13084:	ldrb	r0, [r4]
   13088:	cmp	r0, #1
   1308c:	bleq	133ac <__assert_fail@plt+0x1c38>
   13090:	bl	13af4 <__assert_fail@plt+0x2380>
   13094:	cmp	r0, #0
   13098:	beq	130a8 <__assert_fail@plt+0x1934>
   1309c:	ldrb	r0, [r4]
   130a0:	cmp	r0, #0
   130a4:	beq	130b0 <__assert_fail@plt+0x193c>
   130a8:	sub	sp, fp, #28
   130ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130b0:	mov	r0, r6
   130b4:	mov	r2, sl
   130b8:	ldr	r3, [sp]
   130bc:	bl	13b20 <__assert_fail@plt+0x23ac>
   130c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130c4:	add	fp, sp, #28
   130c8:	sub	sp, sp, #132	; 0x84
   130cc:	movw	r5, #25208	; 0x6278
   130d0:	movt	r5, #3
   130d4:	ldr	r4, [r5]
   130d8:	mov	r0, r4
   130dc:	bl	12830 <__assert_fail@plt+0x10bc>
   130e0:	movw	r9, #25196	; 0x626c
   130e4:	movt	r9, #3
   130e8:	str	r0, [r9]
   130ec:	cmn	r4, #-2147483647	; 0x80000001
   130f0:	beq	13174 <__assert_fail@plt+0x1a00>
   130f4:	mov	sl, #0
   130f8:	movw	r1, #25064	; 0x61e8
   130fc:	movt	r1, #3
   13100:	add	r6, sp, #4
   13104:	mov	r0, #0
   13108:	mov	r2, r6
   1310c:	bl	11450 <sigprocmask@plt>
   13110:	ldr	r0, [r9]
   13114:	movw	r1, #21492	; 0x53f4
   13118:	movt	r1, #2
   1311c:	bl	13e6c <__assert_fail@plt+0x26f8>
   13120:	mov	r7, r0
   13124:	movw	r0, #25192	; 0x6268
   13128:	movt	r0, #3
   1312c:	str	r7, [r0]
   13130:	cmp	r7, #0
   13134:	addne	r4, r4, #1
   13138:	bl	1163c <__errno_location@plt>
   1313c:	ldr	r8, [r0]
   13140:	str	r4, [r5]
   13144:	mov	r0, #2
   13148:	mov	r1, r6
   1314c:	mov	r2, #0
   13150:	bl	11450 <sigprocmask@plt>
   13154:	cmp	r7, #0
   13158:	movwne	r0, #25200	; 0x6270
   1315c:	movtne	r0, #3
   13160:	strne	sl, [r0]
   13164:	strne	sl, [r0, #4]
   13168:	subne	sp, fp, #28
   1316c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13170:	b	13178 <__assert_fail@plt+0x1a04>
   13174:	mov	r8, #75	; 0x4b
   13178:	ldr	r2, [r9]
   1317c:	mov	r0, #0
   13180:	mov	r1, #3
   13184:	bl	15760 <__assert_fail@plt+0x3fec>
   13188:	mov	r3, r0
   1318c:	movw	r2, #21063	; 0x5247
   13190:	movt	r2, #2
   13194:	mov	r0, #0
   13198:	mov	r1, r8
   1319c:	bl	115a0 <error@plt>
   131a0:	bl	118a8 <__assert_fail@plt+0x134>
   131a4:	push	{fp, lr}
   131a8:	mov	fp, sp
   131ac:	bl	133ac <__assert_fail@plt+0x1c38>
   131b0:	cmp	r0, #0
   131b4:	beq	131c0 <__assert_fail@plt+0x1a4c>
   131b8:	bl	1348c <__assert_fail@plt+0x1d18>
   131bc:	b	131ac <__assert_fail@plt+0x1a38>
   131c0:	pop	{fp, pc}
   131c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   131c8:	add	fp, sp, #24
   131cc:	mov	r5, r1
   131d0:	mov	r4, r0
   131d4:	movw	r8, #25240	; 0x6298
   131d8:	movt	r8, #3
   131dc:	ldr	r7, [r8]
   131e0:	cmp	r7, #0
   131e4:	bne	131fc <__assert_fail@plt+0x1a88>
   131e8:	mov	r6, #0
   131ec:	bl	135e4 <__assert_fail@plt+0x1e70>
   131f0:	cmp	r0, #0
   131f4:	beq	1328c <__assert_fail@plt+0x1b18>
   131f8:	ldr	r7, [r8]
   131fc:	ldrd	r0, [r7, #8]
   13200:	mov	r6, #0
   13204:	subs	r0, r4, r0
   13208:	sbcs	r0, r5, r1
   1320c:	blt	1328c <__assert_fail@plt+0x1b18>
   13210:	cmp	r7, #0
   13214:	bne	13228 <__assert_fail@plt+0x1ab4>
   13218:	b	13294 <__assert_fail@plt+0x1b20>
   1321c:	cmp	r0, #0
   13220:	mov	r7, r0
   13224:	beq	13294 <__assert_fail@plt+0x1b20>
   13228:	ldrd	r0, [r7, #8]
   1322c:	ldr	r2, [r7, #24]
   13230:	adds	r3, r0, r2
   13234:	adc	r1, r1, r2, asr #31
   13238:	subs	r2, r4, r3
   1323c:	sbcs	r1, r5, r1
   13240:	blt	13264 <__assert_fail@plt+0x1af0>
   13244:	ldr	r0, [r7, #40]	; 0x28
   13248:	cmp	r0, #0
   1324c:	bne	1321c <__assert_fail@plt+0x1aa8>
   13250:	bl	135e4 <__assert_fail@plt+0x1e70>
   13254:	cmp	r0, #0
   13258:	beq	1328c <__assert_fail@plt+0x1b18>
   1325c:	ldr	r0, [r7, #40]	; 0x28
   13260:	b	1321c <__assert_fail@plt+0x1aa8>
   13264:	sub	r0, r4, r0
   13268:	ldr	r1, [r7, #32]
   1326c:	cmp	r0, #80	; 0x50
   13270:	blt	13284 <__assert_fail@plt+0x1b10>
   13274:	sub	r0, r0, #80	; 0x50
   13278:	ldr	r1, [r1, #652]	; 0x28c
   1327c:	cmp	r0, #79	; 0x4f
   13280:	bgt	13274 <__assert_fail@plt+0x1b00>
   13284:	add	r0, r1, r0, lsl #3
   13288:	add	r6, r0, #12
   1328c:	mov	r0, r6
   13290:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13294:	movw	r0, #21347	; 0x5363
   13298:	movt	r0, #2
   1329c:	movw	r1, #21349	; 0x5365
   132a0:	movt	r1, #2
   132a4:	movw	r3, #21362	; 0x5372
   132a8:	movt	r3, #2
   132ac:	movw	r2, #583	; 0x247
   132b0:	bl	11774 <__assert_fail@plt>
   132b4:	push	{fp, lr}
   132b8:	mov	fp, sp
   132bc:	sub	sp, sp, #32
   132c0:	mov	r8, r3
   132c4:	mov	r5, r2
   132c8:	mov	r6, r0
   132cc:	movw	r9, #25016	; 0x61b8
   132d0:	movt	r9, #3
   132d4:	ldr	r7, [r9]
   132d8:	movw	r1, #21398	; 0x5396
   132dc:	movt	r1, #2
   132e0:	mov	r0, #0
   132e4:	mov	r2, #5
   132e8:	bl	114e0 <dcgettext@plt>
   132ec:	mov	r4, r0
   132f0:	ldr	r0, [r6, #24]
   132f4:	movw	r1, #25032	; 0x61c8
   132f8:	movt	r1, #3
   132fc:	ldr	r1, [r1]
   13300:	ldr	r0, [r1, r0, lsl #2]
   13304:	movw	r1, #25276	; 0x62bc
   13308:	movt	r1, #3
   1330c:	ldr	r6, [r1]
   13310:	bl	158a0 <__assert_fail@plt+0x412c>
   13314:	str	r0, [sp]
   13318:	mov	r0, r7
   1331c:	mov	r1, #1
   13320:	mov	r2, r4
   13324:	mov	r3, r6
   13328:	bl	116a8 <__fprintf_chk@plt>
   1332c:	orrs	r0, r5, r8
   13330:	ldr	r7, [fp, #8]
   13334:	bne	13358 <__assert_fail@plt+0x1be4>
   13338:	ldr	r0, [r9]
   1333c:	movw	r2, #20522	; 0x502a
   13340:	movt	r2, #2
   13344:	mov	r1, #1
   13348:	bl	116a8 <__fprintf_chk@plt>
   1334c:	cmp	r7, #0
   13350:	beq	133a0 <__assert_fail@plt+0x1c2c>
   13354:	b	133a8 <__assert_fail@plt+0x1c34>
   13358:	ldr	r4, [r9]
   1335c:	movw	r1, #21422	; 0x53ae
   13360:	movt	r1, #2
   13364:	mov	r0, #0
   13368:	mov	r2, #5
   1336c:	bl	114e0 <dcgettext@plt>
   13370:	mov	r6, r0
   13374:	add	r2, sp, #11
   13378:	mov	r0, r5
   1337c:	mov	r1, r8
   13380:	bl	13fec <__assert_fail@plt+0x2878>
   13384:	mov	r3, r0
   13388:	mov	r0, r4
   1338c:	mov	r1, #1
   13390:	mov	r2, r6
   13394:	bl	116a8 <__fprintf_chk@plt>
   13398:	cmp	r7, #0
   1339c:	bne	133a8 <__assert_fail@plt+0x1c34>
   133a0:	bl	131a4 <__assert_fail@plt+0x1a30>
   133a4:	bl	125b4 <__assert_fail@plt+0xe40>
   133a8:	bl	118a8 <__assert_fail@plt+0x134>
   133ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   133b0:	add	fp, sp, #24
   133b4:	movw	r7, #25264	; 0x62b0
   133b8:	movt	r7, #3
   133bc:	ldr	r0, [r7]
   133c0:	cmp	r0, #0
   133c4:	beq	133d4 <__assert_fail@plt+0x1c60>
   133c8:	bl	13928 <__assert_fail@plt+0x21b4>
   133cc:	mov	r0, #0
   133d0:	str	r0, [r7]
   133d4:	movw	r6, #25240	; 0x6298
   133d8:	movt	r6, #3
   133dc:	ldr	r0, [r6]
   133e0:	cmp	r0, #0
   133e4:	bne	133f8 <__assert_fail@plt+0x1c84>
   133e8:	mov	r4, #0
   133ec:	bl	135e4 <__assert_fail@plt+0x1e70>
   133f0:	cmp	r0, #0
   133f4:	beq	1346c <__assert_fail@plt+0x1cf8>
   133f8:	ldr	r0, [r6]
   133fc:	ldr	r3, [r0, #20]
   13400:	mov	r1, r0
   13404:	ldr	r2, [r1, #16]!
   13408:	movw	r4, #25232	; 0x6290
   1340c:	movt	r4, #3
   13410:	ldrd	r8, [r4]
   13414:	subs	r5, r8, r2
   13418:	sbcs	r5, r9, r3
   1341c:	strdlt	r2, [r4]
   13420:	adds	r2, r2, #1
   13424:	adc	r3, r3, #0
   13428:	strd	r2, [r1]
   1342c:	ldr	r1, [r0, #36]	; 0x24
   13430:	ldr	r2, [r1]
   13434:	ldr	r3, [r1, #8]
   13438:	add	r5, r3, #1
   1343c:	str	r5, [r1, #8]
   13440:	add	r3, r1, r3, lsl #3
   13444:	add	r4, r3, #12
   13448:	cmp	r5, r2
   1344c:	bne	1346c <__assert_fail@plt+0x1cf8>
   13450:	ldr	r1, [r1, #652]	; 0x28c
   13454:	str	r1, [r0, #36]	; 0x24
   13458:	cmp	r1, #0
   1345c:	beq	13474 <__assert_fail@plt+0x1d00>
   13460:	ldr	r0, [r1]
   13464:	cmp	r0, #0
   13468:	beq	13474 <__assert_fail@plt+0x1d00>
   1346c:	mov	r0, r4
   13470:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13474:	ldr	r0, [r6]
   13478:	str	r0, [r7]
   1347c:	ldr	r0, [r0, #40]	; 0x28
   13480:	str	r0, [r6]
   13484:	mov	r0, r4
   13488:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1348c:	push	{r4, r5, r6, r7, fp, lr}
   13490:	add	fp, sp, #16
   13494:	mov	r4, r0
   13498:	movw	r6, #25192	; 0x6268
   1349c:	movt	r6, #3
   134a0:	ldr	r3, [r6]
   134a4:	ldr	r2, [r0]
   134a8:	ldr	r0, [r0, #4]
   134ac:	mov	r1, #1
   134b0:	bl	114d4 <fwrite_unlocked@plt>
   134b4:	ldr	r1, [r4]
   134b8:	cmp	r0, r1
   134bc:	bne	134dc <__assert_fail@plt+0x1d68>
   134c0:	movw	r0, #25200	; 0x6270
   134c4:	movt	r0, #3
   134c8:	ldrd	r2, [r0]
   134cc:	adds	r2, r2, r1
   134d0:	adc	r3, r3, r1, asr #31
   134d4:	strd	r2, [r0]
   134d8:	pop	{r4, r5, r6, r7, fp, pc}
   134dc:	bl	1163c <__errno_location@plt>
   134e0:	ldr	r4, [r0]
   134e4:	mov	r7, #0
   134e8:	movw	r1, #20524	; 0x502c
   134ec:	movt	r1, #2
   134f0:	mov	r0, #0
   134f4:	mov	r2, #5
   134f8:	bl	114e0 <dcgettext@plt>
   134fc:	mov	r5, r0
   13500:	movw	r0, #25196	; 0x626c
   13504:	movt	r0, #3
   13508:	ldr	r1, [r0]
   1350c:	mov	r0, #4
   13510:	bl	156ac <__assert_fail@plt+0x3f38>
   13514:	mov	r3, r0
   13518:	mov	r0, #0
   1351c:	mov	r1, r4
   13520:	mov	r2, r5
   13524:	bl	115a0 <error@plt>
   13528:	str	r7, [r6]
   1352c:	bl	118a8 <__assert_fail@plt+0x134>
   13530:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13534:	add	fp, sp, #24
   13538:	mov	r8, r3
   1353c:	mov	r9, r2
   13540:	mov	r6, r1
   13544:	mov	r7, r0
   13548:	bl	13a94 <__assert_fail@plt+0x2320>
   1354c:	subs	r2, r7, r0
   13550:	sbcs	r2, r6, r1
   13554:	blt	135a0 <__assert_fail@plt+0x1e2c>
   13558:	subs	r7, r7, r0
   1355c:	sbc	r6, r6, r1
   13560:	subs	r0, r7, #1
   13564:	sbcs	r0, r6, #0
   13568:	blt	1359c <__assert_fail@plt+0x1e28>
   1356c:	mov	r4, #0
   13570:	mov	r5, #0
   13574:	bl	133ac <__assert_fail@plt+0x1c38>
   13578:	cmp	r0, #0
   1357c:	beq	135a0 <__assert_fail@plt+0x1e2c>
   13580:	cmp	r9, #0
   13584:	bleq	1348c <__assert_fail@plt+0x1d18>
   13588:	adds	r4, r4, #1
   1358c:	adc	r5, r5, #0
   13590:	subs	r0, r4, r7
   13594:	sbcs	r0, r5, r6
   13598:	blt	13574 <__assert_fail@plt+0x1e00>
   1359c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135a0:	movw	r1, #21463	; 0x53d7
   135a4:	movt	r1, #2
   135a8:	mov	r0, #0
   135ac:	mov	r2, #5
   135b0:	bl	114e0 <dcgettext@plt>
   135b4:	mov	r5, r0
   135b8:	movw	r0, #25032	; 0x61c8
   135bc:	movt	r0, #3
   135c0:	ldr	r0, [r0]
   135c4:	ldr	r0, [r0, r8, lsl #2]
   135c8:	bl	158a0 <__assert_fail@plt+0x412c>
   135cc:	mov	r3, r0
   135d0:	mov	r0, #0
   135d4:	mov	r1, #0
   135d8:	mov	r2, r5
   135dc:	bl	115a0 <error@plt>
   135e0:	bl	118a8 <__assert_fail@plt+0x134>
   135e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e8:	add	fp, sp, #28
   135ec:	sub	sp, sp, #4
   135f0:	movw	r8, #25244	; 0x629c
   135f4:	movt	r8, #3
   135f8:	ldrb	r1, [r8]
   135fc:	mov	r0, #0
   13600:	cmp	r1, #0
   13604:	bne	13704 <__assert_fail@plt+0x1f90>
   13608:	movw	r7, #25248	; 0x62a0
   1360c:	movt	r7, #3
   13610:	ldr	r1, [r7]
   13614:	movw	r2, #8190	; 0x1ffe
   13618:	movw	r0, #8191	; 0x1fff
   1361c:	cmp	r1, r2
   13620:	addgt	r0, r1, #1
   13624:	mov	r9, #0
   13628:	b	13640 <__assert_fail@plt+0x1ecc>
   1362c:	cmp	r5, #1073741824	; 0x40000000
   13630:	bge	136e0 <__assert_fail@plt+0x1f6c>
   13634:	mov	r0, r4
   13638:	bl	13928 <__assert_fail@plt+0x21b4>
   1363c:	lsl	r0, r5, #1
   13640:	bl	1370c <__assert_fail@plt+0x1f98>
   13644:	mov	r4, r0
   13648:	ldr	r6, [r7]
   1364c:	ldr	sl, [r0]
   13650:	ldr	r5, [r0, #28]
   13654:	cmp	r6, #0
   13658:	beq	1368c <__assert_fail@plt+0x1f18>
   1365c:	movw	r0, #25252	; 0x62a4
   13660:	movt	r0, #3
   13664:	ldr	r1, [r0]
   13668:	mov	r0, r5
   1366c:	mov	r2, r6
   13670:	bl	1148c <memcpy@plt>
   13674:	ldr	r0, [r4, #4]
   13678:	add	r0, r0, r6
   1367c:	str	r0, [r4, #4]
   13680:	str	r9, [r7]
   13684:	sub	sl, sl, r6
   13688:	add	r5, r5, r6
   1368c:	sub	r1, sl, #1
   13690:	mov	r0, r5
   13694:	bl	13794 <__assert_fail@plt+0x2020>
   13698:	ldr	r1, [r4, #4]
   1369c:	add	r0, r1, r0
   136a0:	str	r0, [r4, #4]
   136a4:	mov	r0, r4
   136a8:	bl	1380c <__assert_fail@plt+0x2098>
   136ac:	cmp	r0, #0
   136b0:	bne	136e4 <__assert_fail@plt+0x1f70>
   136b4:	ldrb	r0, [r8]
   136b8:	cmp	r0, #0
   136bc:	bne	136f8 <__assert_fail@plt+0x1f84>
   136c0:	ldr	r5, [r4]
   136c4:	cmn	r5, #1
   136c8:	bgt	1362c <__assert_fail@plt+0x1eb8>
   136cc:	beq	13634 <__assert_fail@plt+0x1ec0>
   136d0:	mov	r0, #-2147483648	; 0x80000000
   136d4:	sdiv	r0, r0, r5
   136d8:	cmp	r0, #2
   136dc:	bge	13634 <__assert_fail@plt+0x1ec0>
   136e0:	bl	11870 <__assert_fail@plt+0xfc>
   136e4:	mov	r0, r4
   136e8:	bl	13968 <__assert_fail@plt+0x21f4>
   136ec:	mov	r0, #1
   136f0:	sub	sp, fp, #28
   136f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136f8:	mov	r0, r4
   136fc:	bl	13928 <__assert_fail@plt+0x21b4>
   13700:	mov	r0, #0
   13704:	sub	sp, fp, #28
   13708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1370c:	push	{r4, r5, r6, sl, fp, lr}
   13710:	add	fp, sp, #16
   13714:	sub	sp, sp, #8
   13718:	mov	r4, r0
   1371c:	mov	r0, #48	; 0x30
   13720:	bl	22f14 <__assert_fail@plt+0x117a0>
   13724:	mov	r5, r0
   13728:	mov	r6, #0
   1372c:	str	r6, [r0]
   13730:	mov	r0, #1
   13734:	str	r0, [sp]
   13738:	mov	r0, #0
   1373c:	mov	r1, r5
   13740:	mov	r2, r4
   13744:	mvn	r3, #0
   13748:	bl	2302c <__assert_fail@plt+0x118b8>
   1374c:	str	r0, [r5, #28]
   13750:	str	r6, [r5, #4]
   13754:	movw	r0, #25256	; 0x62a8
   13758:	movt	r0, #3
   1375c:	ldrd	r0, [r0]
   13760:	str	r6, [r5, #24]
   13764:	str	r6, [r5, #32]
   13768:	str	r6, [r5, #36]	; 0x24
   1376c:	str	r6, [r5, #40]	; 0x28
   13770:	adds	r0, r0, #1
   13774:	str	r0, [r5, #16]
   13778:	str	r0, [r5, #8]
   1377c:	adc	r0, r1, #0
   13780:	str	r0, [r5, #20]
   13784:	str	r0, [r5, #12]
   13788:	mov	r0, r5
   1378c:	sub	sp, fp, #16
   13790:	pop	{r4, r5, r6, sl, fp, pc}
   13794:	push	{r4, sl, fp, lr}
   13798:	add	fp, sp, #8
   1379c:	mov	r2, r1
   137a0:	cmp	r1, #0
   137a4:	beq	13804 <__assert_fail@plt+0x2090>
   137a8:	mov	r1, r0
   137ac:	mov	r0, #0
   137b0:	bl	229a8 <__assert_fail@plt+0x11234>
   137b4:	cmp	r0, #0
   137b8:	beq	137f4 <__assert_fail@plt+0x2080>
   137bc:	cmn	r0, #1
   137c0:	popne	{r4, sl, fp, pc}
   137c4:	bl	1163c <__errno_location@plt>
   137c8:	ldr	r4, [r0]
   137cc:	movw	r1, #19276	; 0x4b4c
   137d0:	movt	r1, #2
   137d4:	mov	r0, #0
   137d8:	mov	r2, #5
   137dc:	bl	114e0 <dcgettext@plt>
   137e0:	mov	r2, r0
   137e4:	mov	r0, #0
   137e8:	mov	r1, r4
   137ec:	bl	115a0 <error@plt>
   137f0:	bl	118a8 <__assert_fail@plt+0x134>
   137f4:	movw	r0, #25244	; 0x629c
   137f8:	movt	r0, #3
   137fc:	mov	r1, #1
   13800:	strb	r1, [r0]
   13804:	mov	r0, #0
   13808:	pop	{r4, sl, fp, pc}
   1380c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13810:	add	fp, sp, #28
   13814:	sub	sp, sp, #4
   13818:	mov	r8, r0
   1381c:	ldr	r0, [r0, #4]
   13820:	cmp	r0, #0
   13824:	beq	1388c <__assert_fail@plt+0x2118>
   13828:	ldr	r6, [r8, #28]
   1382c:	mov	r1, #10
   13830:	mov	r4, r6
   13834:	strb	r1, [r4, r0]!
   13838:	mov	r0, r6
   1383c:	mov	r1, #10
   13840:	bl	11528 <rawmemchr@plt>
   13844:	cmp	r0, r4
   13848:	beq	13894 <__assert_fail@plt+0x2120>
   1384c:	mov	r7, r0
   13850:	mov	r5, #0
   13854:	sub	r0, r7, r6
   13858:	add	r2, r0, #1
   1385c:	mov	r0, r8
   13860:	mov	r1, r6
   13864:	bl	139a8 <__assert_fail@plt+0x2234>
   13868:	add	r6, r7, #1
   1386c:	mov	r0, r6
   13870:	mov	r1, #10
   13874:	bl	11528 <rawmemchr@plt>
   13878:	mov	r7, r0
   1387c:	add	r5, r5, #1
   13880:	cmp	r0, r4
   13884:	bne	13854 <__assert_fail@plt+0x20e0>
   13888:	b	13898 <__assert_fail@plt+0x2124>
   1388c:	mov	r5, #0
   13890:	b	1391c <__assert_fail@plt+0x21a8>
   13894:	mov	r5, #0
   13898:	add	sl, r8, #8
   1389c:	add	r9, r8, #16
   138a0:	subs	r7, r4, r6
   138a4:	beq	138e8 <__assert_fail@plt+0x2174>
   138a8:	movw	r0, #25244	; 0x629c
   138ac:	movt	r0, #3
   138b0:	ldrb	r0, [r0]
   138b4:	cmp	r0, #1
   138b8:	bne	138d4 <__assert_fail@plt+0x2160>
   138bc:	mov	r0, r8
   138c0:	mov	r1, r6
   138c4:	mov	r2, r7
   138c8:	bl	139a8 <__assert_fail@plt+0x2234>
   138cc:	add	r5, r5, #1
   138d0:	b	138e8 <__assert_fail@plt+0x2174>
   138d4:	mov	r0, r6
   138d8:	mov	r1, r7
   138dc:	bl	23224 <__assert_fail@plt+0x11ab0>
   138e0:	mov	r1, r7
   138e4:	bl	13a20 <__assert_fail@plt+0x22ac>
   138e8:	str	r5, [r8, #24]
   138ec:	movw	r0, #25256	; 0x62a8
   138f0:	movt	r0, #3
   138f4:	ldrd	r2, [r0]
   138f8:	adds	r4, r2, #1
   138fc:	adc	r1, r3, #0
   13900:	str	r4, [sl]
   13904:	str	r1, [sl, #4]
   13908:	str	r4, [r9]
   1390c:	str	r1, [r9, #4]
   13910:	adds	r2, r2, r5
   13914:	adc	r3, r3, r5, asr #31
   13918:	strd	r2, [r0]
   1391c:	mov	r0, r5
   13920:	sub	sp, fp, #28
   13924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13928:	push	{r4, r5, fp, lr}
   1392c:	add	fp, sp, #8
   13930:	mov	r4, r0
   13934:	ldr	r0, [r0, #32]
   13938:	cmp	r0, #0
   1393c:	beq	13954 <__assert_fail@plt+0x21e0>
   13940:	ldr	r5, [r0, #652]	; 0x28c
   13944:	bl	13f1c <__assert_fail@plt+0x27a8>
   13948:	cmp	r5, #0
   1394c:	mov	r0, r5
   13950:	bne	13940 <__assert_fail@plt+0x21cc>
   13954:	ldr	r0, [r4, #28]
   13958:	bl	13f1c <__assert_fail@plt+0x27a8>
   1395c:	mov	r0, r4
   13960:	pop	{r4, r5, fp, lr}
   13964:	b	13f1c <__assert_fail@plt+0x27a8>
   13968:	mov	r1, #0
   1396c:	ldr	r2, [r0, #32]
   13970:	str	r2, [r0, #36]	; 0x24
   13974:	str	r1, [r0, #40]	; 0x28
   13978:	movw	r2, #25240	; 0x6298
   1397c:	movt	r2, #3
   13980:	ldr	r1, [r2]
   13984:	cmp	r1, #0
   13988:	streq	r0, [r2]
   1398c:	bxeq	lr
   13990:	mov	r2, r1
   13994:	ldr	r1, [r1, #40]	; 0x28
   13998:	cmp	r1, #0
   1399c:	bne	13990 <__assert_fail@plt+0x221c>
   139a0:	str	r0, [r2, #40]	; 0x28
   139a4:	bx	lr
   139a8:	push	{r4, r5, r6, sl, fp, lr}
   139ac:	add	fp, sp, #16
   139b0:	mov	r5, r2
   139b4:	mov	r4, r1
   139b8:	mov	r6, r0
   139bc:	ldr	r0, [r0, #32]
   139c0:	cmp	r0, #0
   139c4:	bne	139d4 <__assert_fail@plt+0x2260>
   139c8:	bl	13a54 <__assert_fail@plt+0x22e0>
   139cc:	str	r0, [r6, #32]
   139d0:	str	r0, [r6, #36]	; 0x24
   139d4:	ldr	r0, [r6, #36]	; 0x24
   139d8:	ldr	r0, [r0]
   139dc:	cmp	r0, #80	; 0x50
   139e0:	bne	139f4 <__assert_fail@plt+0x2280>
   139e4:	bl	13a54 <__assert_fail@plt+0x22e0>
   139e8:	ldr	r1, [r6, #36]	; 0x24
   139ec:	str	r0, [r1, #652]	; 0x28c
   139f0:	str	r0, [r6, #36]	; 0x24
   139f4:	ldr	r0, [r6, #36]	; 0x24
   139f8:	ldr	r1, [r0, #4]
   139fc:	add	r2, r0, r1, lsl #3
   13a00:	str	r5, [r2, #12]
   13a04:	str	r4, [r2, #16]
   13a08:	add	r1, r1, #1
   13a0c:	str	r1, [r0, #4]
   13a10:	ldr	r1, [r0]
   13a14:	add	r1, r1, #1
   13a18:	str	r1, [r0]
   13a1c:	pop	{r4, r5, r6, sl, fp, pc}
   13a20:	push	{r4, r5, r6, sl, fp, lr}
   13a24:	add	fp, sp, #16
   13a28:	mov	r4, r1
   13a2c:	mov	r5, r0
   13a30:	movw	r6, #25252	; 0x62a4
   13a34:	movt	r6, #3
   13a38:	ldr	r0, [r6]
   13a3c:	bl	13f1c <__assert_fail@plt+0x27a8>
   13a40:	movw	r0, #25248	; 0x62a0
   13a44:	movt	r0, #3
   13a48:	str	r4, [r0]
   13a4c:	str	r5, [r6]
   13a50:	pop	{r4, r5, r6, sl, fp, pc}
   13a54:	push	{r4, sl, fp, lr}
   13a58:	add	fp, sp, #8
   13a5c:	mov	r0, #656	; 0x290
   13a60:	bl	22f14 <__assert_fail@plt+0x117a0>
   13a64:	mov	r4, r0
   13a68:	mov	r0, #0
   13a6c:	str	r0, [r4, #652]	; 0x28c
   13a70:	mov	r0, r4
   13a74:	bl	13a80 <__assert_fail@plt+0x230c>
   13a78:	mov	r0, r4
   13a7c:	pop	{r4, sl, fp, pc}
   13a80:	mov	r1, #0
   13a84:	str	r1, [r0]
   13a88:	str	r1, [r0, #4]
   13a8c:	str	r1, [r0, #8]
   13a90:	bx	lr
   13a94:	push	{r4, sl, fp, lr}
   13a98:	add	fp, sp, #8
   13a9c:	movw	r4, #25240	; 0x6298
   13aa0:	movt	r4, #3
   13aa4:	ldr	r0, [r4]
   13aa8:	cmp	r0, #0
   13aac:	bne	13abc <__assert_fail@plt+0x2348>
   13ab0:	bl	135e4 <__assert_fail@plt+0x1e70>
   13ab4:	cmp	r0, #0
   13ab8:	beq	13ac8 <__assert_fail@plt+0x2354>
   13abc:	ldr	r0, [r4]
   13ac0:	ldrd	r0, [r0, #16]
   13ac4:	pop	{r4, sl, fp, pc}
   13ac8:	bl	1163c <__errno_location@plt>
   13acc:	ldr	r4, [r0]
   13ad0:	movw	r1, #21441	; 0x53c1
   13ad4:	movt	r1, #2
   13ad8:	mov	r0, #0
   13adc:	mov	r2, #5
   13ae0:	bl	114e0 <dcgettext@plt>
   13ae4:	mov	r2, r0
   13ae8:	mov	r0, #1
   13aec:	mov	r1, r4
   13af0:	bl	115a0 <error@plt>
   13af4:	push	{fp, lr}
   13af8:	mov	fp, sp
   13afc:	movw	r0, #25232	; 0x6290
   13b00:	movt	r0, #3
   13b04:	ldrd	r0, [r0]
   13b08:	adds	r0, r0, #1
   13b0c:	adc	r1, r1, #0
   13b10:	bl	131c4 <__assert_fail@plt+0x1a50>
   13b14:	clz	r0, r0
   13b18:	lsr	r0, r0, #5
   13b1c:	pop	{fp, pc}
   13b20:	push	{fp, lr}
   13b24:	mov	fp, sp
   13b28:	sub	sp, sp, #32
   13b2c:	mov	r8, r3
   13b30:	mov	r9, r2
   13b34:	mov	r6, r0
   13b38:	movw	sl, #25016	; 0x61b8
   13b3c:	movt	sl, #3
   13b40:	ldr	r7, [sl]
   13b44:	movw	r1, #21459	; 0x53d3
   13b48:	movt	r1, #2
   13b4c:	mov	r0, #0
   13b50:	mov	r2, #5
   13b54:	bl	114e0 <dcgettext@plt>
   13b58:	mov	r4, r0
   13b5c:	movw	r0, #25276	; 0x62bc
   13b60:	movt	r0, #3
   13b64:	ldr	r5, [r0]
   13b68:	ldrd	r0, [r6, #8]
   13b6c:	add	r2, sp, #11
   13b70:	bl	13fec <__assert_fail@plt+0x2878>
   13b74:	bl	158a0 <__assert_fail@plt+0x412c>
   13b78:	str	r0, [sp]
   13b7c:	mov	r0, r7
   13b80:	mov	r1, #1
   13b84:	mov	r2, r4
   13b88:	mov	r3, r5
   13b8c:	bl	116a8 <__fprintf_chk@plt>
   13b90:	orrs	r0, r9, r8
   13b94:	ldr	r6, [sl]
   13b98:	bne	13bb4 <__assert_fail@plt+0x2440>
   13b9c:	movw	r2, #20522	; 0x502a
   13ba0:	movt	r2, #2
   13ba4:	mov	r0, r6
   13ba8:	mov	r1, #1
   13bac:	bl	116a8 <__fprintf_chk@plt>
   13bb0:	bl	118a8 <__assert_fail@plt+0x134>
   13bb4:	movw	r1, #21422	; 0x53ae
   13bb8:	movt	r1, #2
   13bbc:	mov	r0, #0
   13bc0:	mov	r2, #5
   13bc4:	bl	114e0 <dcgettext@plt>
   13bc8:	mov	r4, r0
   13bcc:	add	r2, sp, #11
   13bd0:	mov	r0, r9
   13bd4:	mov	r1, r8
   13bd8:	bl	13fec <__assert_fail@plt+0x2878>
   13bdc:	mov	r3, r0
   13be0:	mov	r0, r6
   13be4:	mov	r1, #1
   13be8:	mov	r2, r4
   13bec:	bl	116a8 <__fprintf_chk@plt>
   13bf0:	bl	118a8 <__assert_fail@plt+0x134>
   13bf4:	movw	r1, #25268	; 0x62b4
   13bf8:	movt	r1, #3
   13bfc:	str	r0, [r1]
   13c00:	bx	lr
   13c04:	movw	r1, #25272	; 0x62b8
   13c08:	movt	r1, #3
   13c0c:	strb	r0, [r1]
   13c10:	bx	lr
   13c14:	push	{r4, r5, r6, sl, fp, lr}
   13c18:	add	fp, sp, #16
   13c1c:	sub	sp, sp, #8
   13c20:	movw	r0, #25020	; 0x61bc
   13c24:	movt	r0, #3
   13c28:	ldr	r0, [r0]
   13c2c:	bl	24278 <__assert_fail@plt+0x12b04>
   13c30:	cmp	r0, #0
   13c34:	beq	13c5c <__assert_fail@plt+0x24e8>
   13c38:	movw	r0, #25272	; 0x62b8
   13c3c:	movt	r0, #3
   13c40:	ldrb	r0, [r0]
   13c44:	cmp	r0, #0
   13c48:	beq	13c7c <__assert_fail@plt+0x2508>
   13c4c:	bl	1163c <__errno_location@plt>
   13c50:	ldr	r0, [r0]
   13c54:	cmp	r0, #32
   13c58:	bne	13c7c <__assert_fail@plt+0x2508>
   13c5c:	movw	r0, #25016	; 0x61b8
   13c60:	movt	r0, #3
   13c64:	ldr	r0, [r0]
   13c68:	bl	24278 <__assert_fail@plt+0x12b04>
   13c6c:	cmp	r0, #0
   13c70:	subeq	sp, fp, #16
   13c74:	popeq	{r4, r5, r6, sl, fp, pc}
   13c78:	b	13cec <__assert_fail@plt+0x2578>
   13c7c:	movw	r1, #22175	; 0x569f
   13c80:	movt	r1, #2
   13c84:	mov	r0, #0
   13c88:	mov	r2, #5
   13c8c:	bl	114e0 <dcgettext@plt>
   13c90:	mov	r4, r0
   13c94:	movw	r0, #25268	; 0x62b4
   13c98:	movt	r0, #3
   13c9c:	ldr	r6, [r0]
   13ca0:	bl	1163c <__errno_location@plt>
   13ca4:	ldr	r5, [r0]
   13ca8:	cmp	r6, #0
   13cac:	bne	13cc8 <__assert_fail@plt+0x2554>
   13cb0:	movw	r2, #21063	; 0x5247
   13cb4:	movt	r2, #2
   13cb8:	mov	r0, #0
   13cbc:	mov	r1, r5
   13cc0:	mov	r3, r4
   13cc4:	b	13ce8 <__assert_fail@plt+0x2574>
   13cc8:	mov	r0, r6
   13ccc:	bl	15750 <__assert_fail@plt+0x3fdc>
   13cd0:	mov	r3, r0
   13cd4:	str	r4, [sp]
   13cd8:	movw	r2, #22187	; 0x56ab
   13cdc:	movt	r2, #2
   13ce0:	mov	r0, #0
   13ce4:	mov	r1, r5
   13ce8:	bl	115a0 <error@plt>
   13cec:	movw	r0, #24928	; 0x6160
   13cf0:	movt	r0, #3
   13cf4:	ldr	r0, [r0]
   13cf8:	bl	11480 <_exit@plt>
   13cfc:	push	{r4, r5, fp, lr}
   13d00:	add	fp, sp, #8
   13d04:	sub	sp, sp, #8
   13d08:	mov	r4, r0
   13d0c:	bl	11690 <fileno@plt>
   13d10:	cmn	r0, #1
   13d14:	ble	13d8c <__assert_fail@plt+0x2618>
   13d18:	mov	r0, r4
   13d1c:	bl	115dc <__freading@plt>
   13d20:	cmp	r0, #0
   13d24:	beq	13d50 <__assert_fail@plt+0x25dc>
   13d28:	mov	r0, r4
   13d2c:	bl	11690 <fileno@plt>
   13d30:	mov	r1, #1
   13d34:	str	r1, [sp]
   13d38:	mov	r2, #0
   13d3c:	mov	r3, #0
   13d40:	bl	11558 <lseek64@plt>
   13d44:	and	r0, r0, r1
   13d48:	cmn	r0, #1
   13d4c:	beq	13d8c <__assert_fail@plt+0x2618>
   13d50:	mov	r0, r4
   13d54:	bl	13e04 <__assert_fail@plt+0x2690>
   13d58:	cmp	r0, #0
   13d5c:	beq	13d8c <__assert_fail@plt+0x2618>
   13d60:	bl	1163c <__errno_location@plt>
   13d64:	ldr	r5, [r0]
   13d68:	mov	r0, r4
   13d6c:	bl	116c0 <fclose@plt>
   13d70:	cmp	r5, #0
   13d74:	beq	13d84 <__assert_fail@plt+0x2610>
   13d78:	bl	1163c <__errno_location@plt>
   13d7c:	str	r5, [r0]
   13d80:	mvn	r0, #0
   13d84:	sub	sp, fp, #8
   13d88:	pop	{r4, r5, fp, pc}
   13d8c:	mov	r0, r4
   13d90:	sub	sp, fp, #8
   13d94:	pop	{r4, r5, fp, lr}
   13d98:	b	116c0 <fclose@plt>
   13d9c:	push	{r4, r5, r6, r7, fp, lr}
   13da0:	add	fp, sp, #16
   13da4:	mov	r5, r0
   13da8:	mov	r0, r1
   13dac:	mov	r1, r2
   13db0:	mov	r2, r3
   13db4:	bl	115ac <open64@plt>
   13db8:	mov	r4, r0
   13dbc:	cmp	r0, r5
   13dc0:	beq	13dfc <__assert_fail@plt+0x2688>
   13dc4:	cmp	r4, #0
   13dc8:	bmi	13dfc <__assert_fail@plt+0x2688>
   13dcc:	mov	r0, r4
   13dd0:	mov	r1, r5
   13dd4:	bl	114f8 <dup2@plt>
   13dd8:	mov	r5, r0
   13ddc:	bl	1163c <__errno_location@plt>
   13de0:	mov	r6, r0
   13de4:	ldr	r7, [r0]
   13de8:	mov	r0, r4
   13dec:	bl	1175c <close@plt>
   13df0:	str	r7, [r6]
   13df4:	mov	r0, r5
   13df8:	pop	{r4, r5, r6, r7, fp, pc}
   13dfc:	mov	r0, r4
   13e00:	pop	{r4, r5, r6, r7, fp, pc}
   13e04:	push	{r4, sl, fp, lr}
   13e08:	add	fp, sp, #8
   13e0c:	mov	r4, r0
   13e10:	cmp	r0, #0
   13e14:	beq	13e2c <__assert_fail@plt+0x26b8>
   13e18:	mov	r0, r4
   13e1c:	bl	115dc <__freading@plt>
   13e20:	cmp	r0, #0
   13e24:	movne	r0, r4
   13e28:	blne	13e38 <__assert_fail@plt+0x26c4>
   13e2c:	mov	r0, r4
   13e30:	pop	{r4, sl, fp, lr}
   13e34:	b	11444 <fflush@plt>
   13e38:	push	{fp, lr}
   13e3c:	mov	fp, sp
   13e40:	sub	sp, sp, #8
   13e44:	ldrb	r1, [r0, #1]
   13e48:	tst	r1, #1
   13e4c:	beq	13e64 <__assert_fail@plt+0x26f0>
   13e50:	mov	r1, #1
   13e54:	str	r1, [sp]
   13e58:	mov	r2, #0
   13e5c:	mov	r3, #0
   13e60:	bl	13f44 <__assert_fail@plt+0x27d0>
   13e64:	mov	sp, fp
   13e68:	pop	{fp, pc}
   13e6c:	push	{r4, r5, r6, r7, fp, lr}
   13e70:	add	fp, sp, #16
   13e74:	mov	r5, r1
   13e78:	bl	11720 <fopen64@plt>
   13e7c:	mov	r4, #0
   13e80:	cmp	r0, #0
   13e84:	beq	13eec <__assert_fail@plt+0x2778>
   13e88:	mov	r6, r0
   13e8c:	bl	11690 <fileno@plt>
   13e90:	cmp	r0, #2
   13e94:	bhi	13ef4 <__assert_fail@plt+0x2780>
   13e98:	bl	22a40 <__assert_fail@plt+0x112cc>
   13e9c:	cmn	r0, #1
   13ea0:	ble	13efc <__assert_fail@plt+0x2788>
   13ea4:	mov	r7, r0
   13ea8:	mov	r0, r6
   13eac:	bl	13cfc <__assert_fail@plt+0x2588>
   13eb0:	cmp	r0, #0
   13eb4:	bne	13ed0 <__assert_fail@plt+0x275c>
   13eb8:	mov	r0, r7
   13ebc:	mov	r1, r5
   13ec0:	bl	113cc <fdopen@plt>
   13ec4:	mov	r4, r0
   13ec8:	cmp	r0, #0
   13ecc:	bne	13eec <__assert_fail@plt+0x2778>
   13ed0:	bl	1163c <__errno_location@plt>
   13ed4:	mov	r4, r0
   13ed8:	ldr	r5, [r0]
   13edc:	mov	r0, r7
   13ee0:	bl	1175c <close@plt>
   13ee4:	str	r5, [r4]
   13ee8:	mov	r4, #0
   13eec:	mov	r0, r4
   13ef0:	pop	{r4, r5, r6, r7, fp, pc}
   13ef4:	mov	r0, r6
   13ef8:	pop	{r4, r5, r6, r7, fp, pc}
   13efc:	bl	1163c <__errno_location@plt>
   13f00:	mov	r5, r0
   13f04:	ldr	r7, [r0]
   13f08:	mov	r0, r6
   13f0c:	bl	13cfc <__assert_fail@plt+0x2588>
   13f10:	str	r7, [r5]
   13f14:	mov	r0, r4
   13f18:	pop	{r4, r5, r6, r7, fp, pc}
   13f1c:	push	{r4, r5, r6, sl, fp, lr}
   13f20:	add	fp, sp, #16
   13f24:	mov	r4, r0
   13f28:	bl	1163c <__errno_location@plt>
   13f2c:	mov	r5, r0
   13f30:	ldr	r6, [r0]
   13f34:	mov	r0, r4
   13f38:	bl	11468 <free@plt>
   13f3c:	str	r6, [r5]
   13f40:	pop	{r4, r5, r6, sl, fp, pc}
   13f44:	push	{r4, r5, r6, r7, fp, lr}
   13f48:	add	fp, sp, #16
   13f4c:	sub	sp, sp, #8
   13f50:	mov	r5, r3
   13f54:	mov	r6, r2
   13f58:	mov	r4, r0
   13f5c:	ldr	r0, [r0, #4]
   13f60:	ldr	r1, [r4, #8]
   13f64:	cmp	r1, r0
   13f68:	bne	13f84 <__assert_fail@plt+0x2810>
   13f6c:	ldrd	r0, [r4, #16]
   13f70:	cmp	r1, r0
   13f74:	bne	13f84 <__assert_fail@plt+0x2810>
   13f78:	ldr	r0, [r4, #36]	; 0x24
   13f7c:	cmp	r0, #0
   13f80:	beq	13f9c <__assert_fail@plt+0x2828>
   13f84:	mov	r0, r4
   13f88:	mov	r2, r6
   13f8c:	mov	r3, r5
   13f90:	sub	sp, fp, #16
   13f94:	pop	{r4, r5, r6, r7, fp, lr}
   13f98:	b	116cc <fseeko64@plt>
   13f9c:	ldr	r7, [fp, #8]
   13fa0:	mov	r0, r4
   13fa4:	bl	11690 <fileno@plt>
   13fa8:	str	r7, [sp]
   13fac:	mov	r2, r6
   13fb0:	mov	r3, r5
   13fb4:	bl	11558 <lseek64@plt>
   13fb8:	and	r2, r0, r1
   13fbc:	cmn	r2, #1
   13fc0:	beq	13fe0 <__assert_fail@plt+0x286c>
   13fc4:	strd	r0, [r4, #80]	; 0x50
   13fc8:	ldr	r0, [r4]
   13fcc:	bic	r0, r0, #16
   13fd0:	str	r0, [r4]
   13fd4:	mov	r0, #0
   13fd8:	sub	sp, fp, #16
   13fdc:	pop	{r4, r5, r6, r7, fp, pc}
   13fe0:	mvn	r0, #0
   13fe4:	sub	sp, fp, #16
   13fe8:	pop	{r4, r5, r6, r7, fp, pc}
   13fec:	push	{r4, r5, r6, sl, fp, lr}
   13ff0:	add	fp, sp, #16
   13ff4:	mov	r4, r1
   13ff8:	mov	r5, r0
   13ffc:	mov	r0, #0
   14000:	strb	r0, [r2, #20]
   14004:	add	r6, r2, #19
   14008:	cmp	r1, #0
   1400c:	bmi	1405c <__assert_fail@plt+0x28e8>
   14010:	mov	r0, r5
   14014:	mov	r1, r4
   14018:	mov	r2, #10
   1401c:	mov	r3, #0
   14020:	bl	247dc <__assert_fail@plt+0x13068>
   14024:	add	r2, r0, r0, lsl #2
   14028:	sub	r2, r5, r2, lsl #1
   1402c:	add	r2, r2, #48	; 0x30
   14030:	strb	r2, [r6], #-1
   14034:	adds	r2, r5, #9
   14038:	adc	r3, r4, #0
   1403c:	rsbs	r2, r2, #18
   14040:	rscs	r2, r3, #0
   14044:	mov	r5, r0
   14048:	mov	r4, r1
   1404c:	bcc	14010 <__assert_fail@plt+0x289c>
   14050:	add	r6, r6, #1
   14054:	mov	r0, r6
   14058:	pop	{r4, r5, r6, sl, fp, pc}
   1405c:	mov	r0, r5
   14060:	mov	r1, r4
   14064:	mov	r2, #10
   14068:	mov	r3, #0
   1406c:	bl	247dc <__assert_fail@plt+0x13068>
   14070:	add	r2, r0, r0, lsl #2
   14074:	rsb	r2, r5, r2, lsl #1
   14078:	add	r2, r2, #48	; 0x30
   1407c:	strb	r2, [r6], #-1
   14080:	adds	r2, r5, #9
   14084:	adc	r3, r4, #0
   14088:	rsbs	r2, r2, #18
   1408c:	rscs	r2, r3, #0
   14090:	mov	r5, r0
   14094:	mov	r4, r1
   14098:	bcc	1405c <__assert_fail@plt+0x28e8>
   1409c:	mov	r0, #45	; 0x2d
   140a0:	strb	r0, [r6]
   140a4:	mov	r0, r6
   140a8:	pop	{r4, r5, r6, sl, fp, pc}
   140ac:	push	{r4, r5, fp, lr}
   140b0:	add	fp, sp, #8
   140b4:	cmp	r0, #0
   140b8:	beq	1414c <__assert_fail@plt+0x29d8>
   140bc:	mov	r4, r0
   140c0:	mov	r1, #47	; 0x2f
   140c4:	bl	11708 <strrchr@plt>
   140c8:	cmp	r0, #0
   140cc:	mov	r5, r4
   140d0:	addne	r5, r0, #1
   140d4:	sub	r0, r5, r4
   140d8:	cmp	r0, #7
   140dc:	blt	14130 <__assert_fail@plt+0x29bc>
   140e0:	sub	r0, r5, #7
   140e4:	movw	r1, #22250	; 0x56ea
   140e8:	movt	r1, #2
   140ec:	mov	r2, #7
   140f0:	bl	11744 <strncmp@plt>
   140f4:	cmp	r0, #0
   140f8:	bne	14130 <__assert_fail@plt+0x29bc>
   140fc:	movw	r1, #22258	; 0x56f2
   14100:	movt	r1, #2
   14104:	mov	r0, r5
   14108:	mov	r2, #3
   1410c:	bl	11744 <strncmp@plt>
   14110:	cmp	r0, #0
   14114:	beq	14120 <__assert_fail@plt+0x29ac>
   14118:	mov	r4, r5
   1411c:	b	14130 <__assert_fail@plt+0x29bc>
   14120:	add	r4, r5, #3
   14124:	movw	r0, #25000	; 0x61a8
   14128:	movt	r0, #3
   1412c:	str	r4, [r0]
   14130:	movw	r0, #25004	; 0x61ac
   14134:	movt	r0, #3
   14138:	str	r4, [r0]
   1413c:	movw	r0, #25276	; 0x62bc
   14140:	movt	r0, #3
   14144:	str	r4, [r0]
   14148:	pop	{r4, r5, fp, pc}
   1414c:	movw	r0, #25016	; 0x61b8
   14150:	movt	r0, #3
   14154:	ldr	r3, [r0]
   14158:	movw	r0, #22194	; 0x56b2
   1415c:	movt	r0, #2
   14160:	mov	r1, #55	; 0x37
   14164:	mov	r2, #1
   14168:	bl	1154c <fwrite@plt>
   1416c:	bl	11750 <abort@plt>
   14170:	push	{r4, r5, r6, sl, fp, lr}
   14174:	add	fp, sp, #16
   14178:	mov	r4, r0
   1417c:	movw	r0, #25280	; 0x62c0
   14180:	movt	r0, #3
   14184:	cmp	r4, #0
   14188:	moveq	r4, r0
   1418c:	bl	1163c <__errno_location@plt>
   14190:	mov	r5, r0
   14194:	ldr	r6, [r0]
   14198:	mov	r0, r4
   1419c:	mov	r1, #48	; 0x30
   141a0:	bl	231fc <__assert_fail@plt+0x11a88>
   141a4:	str	r6, [r5]
   141a8:	pop	{r4, r5, r6, sl, fp, pc}
   141ac:	movw	r1, #25280	; 0x62c0
   141b0:	movt	r1, #3
   141b4:	cmp	r0, #0
   141b8:	movne	r1, r0
   141bc:	ldr	r0, [r1]
   141c0:	bx	lr
   141c4:	movw	r2, #25280	; 0x62c0
   141c8:	movt	r2, #3
   141cc:	cmp	r0, #0
   141d0:	movne	r2, r0
   141d4:	str	r1, [r2]
   141d8:	bx	lr
   141dc:	movw	r3, #25280	; 0x62c0
   141e0:	movt	r3, #3
   141e4:	cmp	r0, #0
   141e8:	movne	r3, r0
   141ec:	ubfx	r0, r1, #5, #3
   141f0:	add	ip, r3, r0, lsl #2
   141f4:	ldr	r3, [ip, #8]
   141f8:	and	r1, r1, #31
   141fc:	mov	r0, #1
   14200:	and	r0, r0, r3, lsr r1
   14204:	and	r2, r2, #1
   14208:	eor	r2, r0, r2
   1420c:	eor	r1, r3, r2, lsl r1
   14210:	str	r1, [ip, #8]
   14214:	bx	lr
   14218:	movw	r2, #25280	; 0x62c0
   1421c:	movt	r2, #3
   14220:	cmp	r0, #0
   14224:	movne	r2, r0
   14228:	ldr	r0, [r2, #4]
   1422c:	str	r1, [r2, #4]
   14230:	bx	lr
   14234:	push	{fp, lr}
   14238:	mov	fp, sp
   1423c:	movw	r3, #25280	; 0x62c0
   14240:	movt	r3, #3
   14244:	cmp	r0, #0
   14248:	movne	r3, r0
   1424c:	mov	r0, #10
   14250:	str	r0, [r3]
   14254:	cmp	r1, #0
   14258:	cmpne	r2, #0
   1425c:	bne	14264 <__assert_fail@plt+0x2af0>
   14260:	bl	11750 <abort@plt>
   14264:	str	r1, [r3, #40]	; 0x28
   14268:	str	r2, [r3, #44]	; 0x2c
   1426c:	pop	{fp, pc}
   14270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14274:	add	fp, sp, #28
   14278:	sub	sp, sp, #20
   1427c:	mov	r8, r3
   14280:	mov	r9, r2
   14284:	mov	sl, r1
   14288:	mov	r7, r0
   1428c:	ldr	r0, [fp, #8]
   14290:	movw	r5, #25280	; 0x62c0
   14294:	movt	r5, #3
   14298:	cmp	r0, #0
   1429c:	movne	r5, r0
   142a0:	bl	1163c <__errno_location@plt>
   142a4:	mov	r4, r0
   142a8:	ldm	r5, {r0, r1}
   142ac:	ldr	r2, [r5, #40]	; 0x28
   142b0:	ldr	r3, [r5, #44]	; 0x2c
   142b4:	ldr	r6, [r4]
   142b8:	add	r5, r5, #8
   142bc:	stm	sp, {r0, r1, r5}
   142c0:	str	r2, [sp, #12]
   142c4:	str	r3, [sp, #16]
   142c8:	mov	r0, r7
   142cc:	mov	r1, sl
   142d0:	mov	r2, r9
   142d4:	mov	r3, r8
   142d8:	bl	142e8 <__assert_fail@plt+0x2b74>
   142dc:	str	r6, [r4]
   142e0:	sub	sp, fp, #28
   142e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142ec:	add	fp, sp, #28
   142f0:	sub	sp, sp, #156	; 0x9c
   142f4:	mov	r9, r3
   142f8:	mov	r7, r1
   142fc:	mov	r6, r0
   14300:	str	r2, [fp, #-80]	; 0xffffffb0
   14304:	add	r0, r2, #1
   14308:	str	r0, [sp, #76]	; 0x4c
   1430c:	ldr	r0, [fp, #12]
   14310:	and	r1, r0, #1
   14314:	str	r1, [sp, #40]	; 0x28
   14318:	and	r1, r0, #4
   1431c:	str	r1, [sp, #36]	; 0x24
   14320:	ubfx	r4, r0, #1, #1
   14324:	bl	11564 <__ctype_get_mb_cur_max@plt>
   14328:	str	r0, [sp, #44]	; 0x2c
   1432c:	ldr	r0, [fp, #24]
   14330:	str	r0, [sp, #88]	; 0x58
   14334:	ldr	r0, [fp, #20]
   14338:	str	r0, [sp, #80]	; 0x50
   1433c:	ldr	r1, [fp, #8]
   14340:	mov	r0, #0
   14344:	str	r0, [sp, #84]	; 0x54
   14348:	mov	r0, #0
   1434c:	str	r0, [fp, #-84]	; 0xffffffac
   14350:	mov	r0, #0
   14354:	str	r0, [fp, #-72]	; 0xffffffb8
   14358:	mov	r0, #0
   1435c:	mov	r2, #0
   14360:	str	r2, [fp, #-56]	; 0xffffffc8
   14364:	mov	r2, #0
   14368:	str	r2, [sp, #64]	; 0x40
   1436c:	mov	r2, #1
   14370:	str	r2, [fp, #-48]	; 0xffffffd0
   14374:	cmp	r1, #10
   14378:	bhi	152a4 <__assert_fail@plt+0x3b30>
   1437c:	mov	sl, r7
   14380:	mov	r7, r1
   14384:	add	r1, pc, #24
   14388:	mov	r8, #0
   1438c:	mov	r2, #1
   14390:	mov	r3, #0
   14394:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14398:	mov	lr, r9
   1439c:	mov	r5, r6
   143a0:	ldr	pc, [r1, r7, lsl #2]
   143a4:	andeq	r4, r1, r8, ror r4
   143a8:			; <UNDEFINED> instruction: 0x000144b8
   143ac:	andeq	r4, r1, r8, lsl #9
   143b0:	andeq	r4, r1, r0, ror r4
   143b4:	andeq	r4, r1, ip, lsr #9
   143b8:	andeq	r4, r1, ip, lsl #10
   143bc:	muleq	r1, r8, r4
   143c0:	andeq	r4, r1, r8, ror #10
   143c4:	ldrdeq	r4, [r1], -r0
   143c8:	ldrdeq	r4, [r1], -r0
   143cc:	strdeq	r4, [r1], -ip
   143d0:	movw	r0, #22340	; 0x5744
   143d4:	movt	r0, #2
   143d8:	mov	r1, r7
   143dc:	bl	158ac <__assert_fail@plt+0x4138>
   143e0:	str	r0, [sp, #80]	; 0x50
   143e4:	movw	r0, #21310	; 0x533e
   143e8:	movt	r0, #2
   143ec:	mov	r1, r7
   143f0:	bl	158ac <__assert_fail@plt+0x4138>
   143f4:	mov	r5, r6
   143f8:	str	r0, [sp, #88]	; 0x58
   143fc:	mov	r8, #0
   14400:	tst	r4, #1
   14404:	str	r7, [fp, #-64]	; 0xffffffc0
   14408:	bne	14440 <__assert_fail@plt+0x2ccc>
   1440c:	ldr	r0, [sp, #80]	; 0x50
   14410:	ldrb	r0, [r0]
   14414:	cmp	r0, #0
   14418:	beq	14440 <__assert_fail@plt+0x2ccc>
   1441c:	ldr	r1, [sp, #80]	; 0x50
   14420:	add	r1, r1, #1
   14424:	mov	r8, #0
   14428:	cmp	r8, sl
   1442c:	strbcc	r0, [r5, r8]
   14430:	ldrb	r0, [r1, r8]
   14434:	add	r8, r8, #1
   14438:	cmp	r0, #0
   1443c:	bne	14428 <__assert_fail@plt+0x2cb4>
   14440:	ldr	r7, [sp, #88]	; 0x58
   14444:	mov	r0, r7
   14448:	bl	11624 <strlen@plt>
   1444c:	mov	r5, r6
   14450:	str	r0, [fp, #-72]	; 0xffffffb8
   14454:	str	r7, [fp, #-84]	; 0xffffffac
   14458:	mov	r2, #1
   1445c:	mov	r3, r4
   14460:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14464:	mov	lr, r9
   14468:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1446c:	b	14568 <__assert_fail@plt+0x2df4>
   14470:	mov	r0, #1
   14474:	b	144b8 <__assert_fail@plt+0x2d44>
   14478:	mov	r7, #0
   1447c:	mov	r8, #0
   14480:	mov	r2, r0
   14484:	b	14564 <__assert_fail@plt+0x2df0>
   14488:	tst	r4, #1
   1448c:	bne	144b8 <__assert_fail@plt+0x2d44>
   14490:	mov	r2, r0
   14494:	b	144e0 <__assert_fail@plt+0x2d6c>
   14498:	mov	r0, #1
   1449c:	str	r0, [fp, #-72]	; 0xffffffb8
   144a0:	mov	r8, #0
   144a4:	mov	r7, #5
   144a8:	b	14524 <__assert_fail@plt+0x2db0>
   144ac:	mov	r2, #1
   144b0:	tst	r4, #1
   144b4:	beq	144e0 <__assert_fail@plt+0x2d6c>
   144b8:	mov	r1, #1
   144bc:	str	r1, [fp, #-72]	; 0xffffffb8
   144c0:	mov	r8, #0
   144c4:	mov	r7, #2
   144c8:	movw	r1, #21310	; 0x533e
   144cc:	movt	r1, #2
   144d0:	str	r1, [fp, #-84]	; 0xffffffac
   144d4:	mov	r2, r0
   144d8:	mov	r3, #1
   144dc:	b	14568 <__assert_fail@plt+0x2df4>
   144e0:	mov	r8, #1
   144e4:	mov	r7, #2
   144e8:	cmp	sl, #0
   144ec:	movne	r0, #39	; 0x27
   144f0:	strbne	r0, [r5]
   144f4:	movw	r0, #21310	; 0x533e
   144f8:	movt	r0, #2
   144fc:	str	r0, [fp, #-84]	; 0xffffffac
   14500:	mov	r0, #1
   14504:	str	r0, [fp, #-72]	; 0xffffffb8
   14508:	b	14564 <__assert_fail@plt+0x2df0>
   1450c:	mov	r7, #5
   14510:	tst	r4, #1
   14514:	beq	1453c <__assert_fail@plt+0x2dc8>
   14518:	mov	r0, #1
   1451c:	str	r0, [fp, #-72]	; 0xffffffb8
   14520:	mov	r8, #0
   14524:	movw	r0, #22338	; 0x5742
   14528:	movt	r0, #2
   1452c:	str	r0, [fp, #-84]	; 0xffffffac
   14530:	mov	r2, #1
   14534:	mov	r3, #1
   14538:	b	14568 <__assert_fail@plt+0x2df4>
   1453c:	cmp	sl, #0
   14540:	movne	r0, #34	; 0x22
   14544:	strbne	r0, [r5]
   14548:	mov	r8, #1
   1454c:	movw	r0, #22338	; 0x5742
   14550:	movt	r0, #2
   14554:	str	r0, [fp, #-84]	; 0xffffffac
   14558:	mov	r0, #1
   1455c:	str	r0, [fp, #-72]	; 0xffffffb8
   14560:	mov	r2, #1
   14564:	mov	r3, #0
   14568:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1456c:	cmp	r0, #0
   14570:	movwne	r0, #1
   14574:	and	r1, r0, r3
   14578:	and	r1, r2, r1
   1457c:	str	r1, [sp, #56]	; 0x38
   14580:	sub	r1, r7, #2
   14584:	clz	r1, r1
   14588:	lsr	r1, r1, #5
   1458c:	and	r1, r1, r3
   14590:	str	r1, [sp, #68]	; 0x44
   14594:	str	r7, [fp, #-64]	; 0xffffffc0
   14598:	subs	r1, r7, #2
   1459c:	movwne	r1, #1
   145a0:	eor	r4, r3, #1
   145a4:	str	r4, [fp, #-88]	; 0xffffffa8
   145a8:	orr	r4, r1, r4
   145ac:	str	r4, [sp, #72]	; 0x48
   145b0:	and	r1, r1, r2
   145b4:	and	r0, r0, r1
   145b8:	str	r0, [fp, #-60]	; 0xffffffc4
   145bc:	str	r3, [fp, #-76]	; 0xffffffb4
   145c0:	orr	r0, r1, r3
   145c4:	eor	r0, r0, #1
   145c8:	ldr	r1, [fp, #16]
   145cc:	clz	r1, r1
   145d0:	lsr	r1, r1, #5
   145d4:	orr	r0, r1, r0
   145d8:	str	r0, [fp, #-68]	; 0xffffffbc
   145dc:	str	r2, [sp, #92]	; 0x5c
   145e0:	eor	r0, r2, #1
   145e4:	str	r0, [sp, #60]	; 0x3c
   145e8:	mov	r7, #0
   145ec:	cmn	lr, #1
   145f0:	beq	14600 <__assert_fail@plt+0x2e8c>
   145f4:	cmp	r7, lr
   145f8:	bne	1460c <__assert_fail@plt+0x2e98>
   145fc:	b	15118 <__assert_fail@plt+0x39a4>
   14600:	ldrb	r0, [ip, r7]
   14604:	cmp	r0, #0
   14608:	beq	15118 <__assert_fail@plt+0x39a4>
   1460c:	mov	r9, #0
   14610:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14614:	cmp	r0, #0
   14618:	beq	1464c <__assert_fail@plt+0x2ed8>
   1461c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14620:	add	r4, r7, r0
   14624:	cmp	r0, #2
   14628:	bcc	14644 <__assert_fail@plt+0x2ed0>
   1462c:	cmn	lr, #1
   14630:	bne	14644 <__assert_fail@plt+0x2ed0>
   14634:	mov	r0, ip
   14638:	bl	11624 <strlen@plt>
   1463c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14640:	mov	lr, r0
   14644:	cmp	r4, lr
   14648:	bls	14658 <__assert_fail@plt+0x2ee4>
   1464c:	mov	r0, #0
   14650:	str	r0, [fp, #-52]	; 0xffffffcc
   14654:	b	1469c <__assert_fail@plt+0x2f28>
   14658:	mov	r4, lr
   1465c:	add	r0, ip, r7
   14660:	ldr	r1, [fp, #-84]	; 0xffffffac
   14664:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14668:	bl	11618 <bcmp@plt>
   1466c:	cmp	r0, #0
   14670:	mov	r1, r0
   14674:	movwne	r1, #1
   14678:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1467c:	orr	r1, r1, r2
   14680:	tst	r1, #1
   14684:	beq	151ec <__assert_fail@plt+0x3a78>
   14688:	clz	r0, r0
   1468c:	lsr	r0, r0, #5
   14690:	str	r0, [fp, #-52]	; 0xffffffcc
   14694:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14698:	mov	lr, r4
   1469c:	ldrb	r4, [ip, r7]
   146a0:	cmp	r4, #126	; 0x7e
   146a4:	bhi	14bd4 <__assert_fail@plt+0x3460>
   146a8:	mov	r6, #1
   146ac:	mov	r2, #110	; 0x6e
   146b0:	mov	r0, #97	; 0x61
   146b4:	add	r3, pc, #4
   146b8:	mov	r1, #0
   146bc:	ldr	pc, [r3, r4, lsl #2]
   146c0:	andeq	r4, r1, r4, lsr sl
   146c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146cc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146d4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146d8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146dc:	andeq	r4, r1, r8, lsr #25
   146e0:	andeq	r4, r1, r4, lsl sl
   146e4:	andeq	r4, r1, ip, lsl #20
   146e8:	andeq	r4, r1, r0, lsr #20
   146ec:	andeq	r4, r1, ip, lsr fp
   146f0:	andeq	r4, r1, r4, lsl #20
   146f4:	andeq	r4, r1, ip, lsl sl
   146f8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146fc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14700:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14704:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14708:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1470c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14710:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14714:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14718:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1471c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14720:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14724:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14728:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1472c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14730:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14734:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14738:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1473c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14740:			; <UNDEFINED> instruction: 0x000149b8
   14744:			; <UNDEFINED> instruction: 0x000149bc
   14748:			; <UNDEFINED> instruction: 0x000149bc
   1474c:	andeq	r4, r1, r4, lsr #19
   14750:			; <UNDEFINED> instruction: 0x000149bc
   14754:			; <UNDEFINED> instruction: 0x000148bc
   14758:			; <UNDEFINED> instruction: 0x000149bc
   1475c:	andeq	r4, r1, r4, asr #22
   14760:			; <UNDEFINED> instruction: 0x000149bc
   14764:			; <UNDEFINED> instruction: 0x000149bc
   14768:			; <UNDEFINED> instruction: 0x000149bc
   1476c:			; <UNDEFINED> instruction: 0x000148bc
   14770:			; <UNDEFINED> instruction: 0x000148bc
   14774:			; <UNDEFINED> instruction: 0x000148bc
   14778:			; <UNDEFINED> instruction: 0x000148bc
   1477c:			; <UNDEFINED> instruction: 0x000148bc
   14780:			; <UNDEFINED> instruction: 0x000148bc
   14784:			; <UNDEFINED> instruction: 0x000148bc
   14788:			; <UNDEFINED> instruction: 0x000148bc
   1478c:			; <UNDEFINED> instruction: 0x000148bc
   14790:			; <UNDEFINED> instruction: 0x000148bc
   14794:			; <UNDEFINED> instruction: 0x000148bc
   14798:			; <UNDEFINED> instruction: 0x000148bc
   1479c:			; <UNDEFINED> instruction: 0x000148bc
   147a0:			; <UNDEFINED> instruction: 0x000148bc
   147a4:			; <UNDEFINED> instruction: 0x000148bc
   147a8:			; <UNDEFINED> instruction: 0x000148bc
   147ac:			; <UNDEFINED> instruction: 0x000149bc
   147b0:			; <UNDEFINED> instruction: 0x000149bc
   147b4:			; <UNDEFINED> instruction: 0x000149bc
   147b8:			; <UNDEFINED> instruction: 0x000149bc
   147bc:	andeq	r4, r1, ip, lsl #22
   147c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147c4:			; <UNDEFINED> instruction: 0x000148bc
   147c8:			; <UNDEFINED> instruction: 0x000148bc
   147cc:			; <UNDEFINED> instruction: 0x000148bc
   147d0:			; <UNDEFINED> instruction: 0x000148bc
   147d4:			; <UNDEFINED> instruction: 0x000148bc
   147d8:			; <UNDEFINED> instruction: 0x000148bc
   147dc:			; <UNDEFINED> instruction: 0x000148bc
   147e0:			; <UNDEFINED> instruction: 0x000148bc
   147e4:			; <UNDEFINED> instruction: 0x000148bc
   147e8:			; <UNDEFINED> instruction: 0x000148bc
   147ec:			; <UNDEFINED> instruction: 0x000148bc
   147f0:			; <UNDEFINED> instruction: 0x000148bc
   147f4:			; <UNDEFINED> instruction: 0x000148bc
   147f8:			; <UNDEFINED> instruction: 0x000148bc
   147fc:			; <UNDEFINED> instruction: 0x000148bc
   14800:			; <UNDEFINED> instruction: 0x000148bc
   14804:			; <UNDEFINED> instruction: 0x000148bc
   14808:			; <UNDEFINED> instruction: 0x000148bc
   1480c:			; <UNDEFINED> instruction: 0x000148bc
   14810:			; <UNDEFINED> instruction: 0x000148bc
   14814:			; <UNDEFINED> instruction: 0x000148bc
   14818:			; <UNDEFINED> instruction: 0x000148bc
   1481c:			; <UNDEFINED> instruction: 0x000148bc
   14820:			; <UNDEFINED> instruction: 0x000148bc
   14824:			; <UNDEFINED> instruction: 0x000148bc
   14828:			; <UNDEFINED> instruction: 0x000148bc
   1482c:			; <UNDEFINED> instruction: 0x000149bc
   14830:	andeq	r4, r1, r4, ror #19
   14834:			; <UNDEFINED> instruction: 0x000148bc
   14838:			; <UNDEFINED> instruction: 0x000149bc
   1483c:			; <UNDEFINED> instruction: 0x000148bc
   14840:			; <UNDEFINED> instruction: 0x000149bc
   14844:			; <UNDEFINED> instruction: 0x000148bc
   14848:			; <UNDEFINED> instruction: 0x000148bc
   1484c:			; <UNDEFINED> instruction: 0x000148bc
   14850:			; <UNDEFINED> instruction: 0x000148bc
   14854:			; <UNDEFINED> instruction: 0x000148bc
   14858:			; <UNDEFINED> instruction: 0x000148bc
   1485c:			; <UNDEFINED> instruction: 0x000148bc
   14860:			; <UNDEFINED> instruction: 0x000148bc
   14864:			; <UNDEFINED> instruction: 0x000148bc
   14868:			; <UNDEFINED> instruction: 0x000148bc
   1486c:			; <UNDEFINED> instruction: 0x000148bc
   14870:			; <UNDEFINED> instruction: 0x000148bc
   14874:			; <UNDEFINED> instruction: 0x000148bc
   14878:			; <UNDEFINED> instruction: 0x000148bc
   1487c:			; <UNDEFINED> instruction: 0x000148bc
   14880:			; <UNDEFINED> instruction: 0x000148bc
   14884:			; <UNDEFINED> instruction: 0x000148bc
   14888:			; <UNDEFINED> instruction: 0x000148bc
   1488c:			; <UNDEFINED> instruction: 0x000148bc
   14890:			; <UNDEFINED> instruction: 0x000148bc
   14894:			; <UNDEFINED> instruction: 0x000148bc
   14898:			; <UNDEFINED> instruction: 0x000148bc
   1489c:			; <UNDEFINED> instruction: 0x000148bc
   148a0:			; <UNDEFINED> instruction: 0x000148bc
   148a4:			; <UNDEFINED> instruction: 0x000148bc
   148a8:			; <UNDEFINED> instruction: 0x000148bc
   148ac:	andeq	r4, r1, r8, ror r9
   148b0:			; <UNDEFINED> instruction: 0x000149bc
   148b4:	andeq	r4, r1, r8, ror r9
   148b8:	andeq	r4, r1, r4, lsr #19
   148bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   148c0:	tst	r0, #1
   148c4:	bne	148f0 <__assert_fail@plt+0x317c>
   148c8:	ubfx	r0, r4, #5, #3
   148cc:	ldr	r1, [fp, #16]
   148d0:	ldr	r0, [r1, r0, lsl #2]
   148d4:	and	r1, r4, #31
   148d8:	mov	r2, #1
   148dc:	tst	r0, r2, lsl r1
   148e0:	beq	148f0 <__assert_fail@plt+0x317c>
   148e4:	mov	r0, r4
   148e8:	mov	r1, r6
   148ec:	b	14904 <__assert_fail@plt+0x3190>
   148f0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   148f4:	cmp	r0, #0
   148f8:	mov	r0, r4
   148fc:	mov	r1, r6
   14900:	beq	14c3c <__assert_fail@plt+0x34c8>
   14904:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14908:	tst	r2, #1
   1490c:	bne	15200 <__assert_fail@plt+0x3a8c>
   14910:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14914:	subs	r2, r2, #2
   14918:	movwne	r2, #1
   1491c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14920:	orr	r2, r2, r3
   14924:	tst	r2, #1
   14928:	bne	14964 <__assert_fail@plt+0x31f0>
   1492c:	cmp	r8, sl
   14930:	movcc	r2, #39	; 0x27
   14934:	strbcc	r2, [r5, r8]
   14938:	add	r2, r8, #1
   1493c:	cmp	r2, sl
   14940:	movcc	r3, #36	; 0x24
   14944:	strbcc	r3, [r5, r2]
   14948:	add	r2, r8, #2
   1494c:	cmp	r2, sl
   14950:	movcc	r3, #39	; 0x27
   14954:	strbcc	r3, [r5, r2]
   14958:	add	r8, r8, #3
   1495c:	mov	r2, #1
   14960:	str	r2, [fp, #-56]	; 0xffffffc8
   14964:	cmp	r8, sl
   14968:	movcc	r2, #92	; 0x5c
   1496c:	strbcc	r2, [r5, r8]
   14970:	add	r8, r8, #1
   14974:	b	14c80 <__assert_fail@plt+0x350c>
   14978:	cmp	lr, #1
   1497c:	beq	149a4 <__assert_fail@plt+0x3230>
   14980:	mov	r6, #0
   14984:	cmn	lr, #1
   14988:	bne	149b0 <__assert_fail@plt+0x323c>
   1498c:	ldrb	r0, [ip, #1]
   14990:	cmp	r0, #0
   14994:	beq	149a4 <__assert_fail@plt+0x3230>
   14998:	mvn	lr, #0
   1499c:	mov	r9, #0
   149a0:	b	148bc <__assert_fail@plt+0x3148>
   149a4:	mov	r6, #0
   149a8:	cmp	r7, #0
   149ac:	beq	149b8 <__assert_fail@plt+0x3244>
   149b0:	mov	r9, #0
   149b4:	b	148bc <__assert_fail@plt+0x3148>
   149b8:	mov	r1, #1
   149bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   149c0:	cmp	r0, #2
   149c4:	bne	149dc <__assert_fail@plt+0x3268>
   149c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   149cc:	tst	r0, #1
   149d0:	mov	r6, r1
   149d4:	beq	148bc <__assert_fail@plt+0x3148>
   149d8:	b	15200 <__assert_fail@plt+0x3a8c>
   149dc:	mov	r6, r1
   149e0:	b	148bc <__assert_fail@plt+0x3148>
   149e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   149e8:	cmp	r0, #2
   149ec:	bne	14c20 <__assert_fail@plt+0x34ac>
   149f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   149f4:	tst	r0, #1
   149f8:	bne	15200 <__assert_fail@plt+0x3a8c>
   149fc:	mov	r9, #0
   14a00:	b	14c34 <__assert_fail@plt+0x34c0>
   14a04:	mov	r0, #102	; 0x66
   14a08:	b	14ca8 <__assert_fail@plt+0x3534>
   14a0c:	mov	r2, #116	; 0x74
   14a10:	b	14a20 <__assert_fail@plt+0x32ac>
   14a14:	mov	r0, #98	; 0x62
   14a18:	b	14ca8 <__assert_fail@plt+0x3534>
   14a1c:	mov	r2, #114	; 0x72
   14a20:	ldr	r0, [sp, #72]	; 0x48
   14a24:	tst	r0, #1
   14a28:	mov	r0, r2
   14a2c:	bne	14ca8 <__assert_fail@plt+0x3534>
   14a30:	b	15200 <__assert_fail@plt+0x3a8c>
   14a34:	ldr	r0, [sp, #92]	; 0x5c
   14a38:	tst	r0, #1
   14a3c:	beq	14cc4 <__assert_fail@plt+0x3550>
   14a40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14a44:	tst	r0, #1
   14a48:	bne	15200 <__assert_fail@plt+0x3a8c>
   14a4c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14a50:	subs	r0, r0, #2
   14a54:	movwne	r0, #1
   14a58:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14a5c:	orr	r0, r0, r1
   14a60:	tst	r0, #1
   14a64:	bne	14aa0 <__assert_fail@plt+0x332c>
   14a68:	cmp	r8, sl
   14a6c:	movcc	r0, #39	; 0x27
   14a70:	strbcc	r0, [r5, r8]
   14a74:	add	r0, r8, #1
   14a78:	cmp	r0, sl
   14a7c:	movcc	r1, #36	; 0x24
   14a80:	strbcc	r1, [r5, r0]
   14a84:	add	r0, r8, #2
   14a88:	cmp	r0, sl
   14a8c:	movcc	r1, #39	; 0x27
   14a90:	strbcc	r1, [r5, r0]
   14a94:	add	r8, r8, #3
   14a98:	mov	r0, #1
   14a9c:	str	r0, [fp, #-56]	; 0xffffffc8
   14aa0:	cmp	r8, sl
   14aa4:	movcc	r0, #92	; 0x5c
   14aa8:	strbcc	r0, [r5, r8]
   14aac:	add	r0, r8, #1
   14ab0:	mov	r6, #0
   14ab4:	mov	r9, #1
   14ab8:	mov	r4, #48	; 0x30
   14abc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14ac0:	cmp	r1, #2
   14ac4:	beq	14e88 <__assert_fail@plt+0x3714>
   14ac8:	add	r1, r7, #1
   14acc:	cmp	r1, lr
   14ad0:	bcs	14e88 <__assert_fail@plt+0x3714>
   14ad4:	ldrb	r1, [ip, r1]
   14ad8:	sub	r1, r1, #48	; 0x30
   14adc:	uxtb	r1, r1
   14ae0:	cmp	r1, #9
   14ae4:	bhi	14e88 <__assert_fail@plt+0x3714>
   14ae8:	cmp	r0, sl
   14aec:	movcc	r1, #48	; 0x30
   14af0:	strbcc	r1, [r5, r0]
   14af4:	add	r0, r8, #2
   14af8:	cmp	r0, sl
   14afc:	movcc	r1, #48	; 0x30
   14b00:	strbcc	r1, [r5, r0]
   14b04:	add	r8, r8, #3
   14b08:	b	148bc <__assert_fail@plt+0x3148>
   14b0c:	mov	r9, #0
   14b10:	mov	r4, #63	; 0x3f
   14b14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14b18:	cmp	r0, #5
   14b1c:	beq	14e90 <__assert_fail@plt+0x371c>
   14b20:	cmp	r0, #2
   14b24:	bne	14f38 <__assert_fail@plt+0x37c4>
   14b28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14b2c:	tst	r0, #1
   14b30:	mov	r6, #0
   14b34:	beq	148bc <__assert_fail@plt+0x3148>
   14b38:	b	15200 <__assert_fail@plt+0x3a8c>
   14b3c:	mov	r0, #118	; 0x76
   14b40:	b	14ca8 <__assert_fail@plt+0x3534>
   14b44:	mov	r4, #39	; 0x27
   14b48:	mov	r0, #1
   14b4c:	str	r0, [sp, #64]	; 0x40
   14b50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14b54:	cmp	r0, #2
   14b58:	bne	14ce0 <__assert_fail@plt+0x356c>
   14b5c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14b60:	tst	r0, #1
   14b64:	bne	15200 <__assert_fail@plt+0x3a8c>
   14b68:	ldr	r2, [sp, #84]	; 0x54
   14b6c:	cmp	r2, #0
   14b70:	mov	r0, r2
   14b74:	movwne	r0, #1
   14b78:	clz	r1, sl
   14b7c:	lsr	r1, r1, #5
   14b80:	orrs	r0, r0, r1
   14b84:	moveq	r2, sl
   14b88:	str	r2, [sp, #84]	; 0x54
   14b8c:	moveq	sl, r0
   14b90:	cmp	r8, sl
   14b94:	movcc	r0, #39	; 0x27
   14b98:	strbcc	r0, [r5, r8]
   14b9c:	add	r0, r8, #1
   14ba0:	cmp	r0, sl
   14ba4:	movcc	r1, #92	; 0x5c
   14ba8:	strbcc	r1, [r5, r0]
   14bac:	add	r0, r8, #2
   14bb0:	cmp	r0, sl
   14bb4:	movcc	r1, #39	; 0x27
   14bb8:	strbcc	r1, [r5, r0]
   14bbc:	add	r8, r8, #3
   14bc0:	mov	r0, #0
   14bc4:	str	r0, [fp, #-56]	; 0xffffffc8
   14bc8:	mov	r9, #0
   14bcc:	mov	r6, #1
   14bd0:	b	148bc <__assert_fail@plt+0x3148>
   14bd4:	ldr	r0, [sp, #44]	; 0x2c
   14bd8:	cmp	r0, #1
   14bdc:	bne	14ce8 <__assert_fail@plt+0x3574>
   14be0:	str	lr, [sp, #32]
   14be4:	bl	11600 <__ctype_b_loc@plt>
   14be8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14bec:	ldr	r0, [r0]
   14bf0:	add	r0, r0, r4, lsl #1
   14bf4:	ldrb	r0, [r0, #1]
   14bf8:	ubfx	r6, r0, #6, #1
   14bfc:	mov	r2, #1
   14c00:	ldr	r0, [sp, #60]	; 0x3c
   14c04:	orr	r1, r6, r0
   14c08:	cmp	r2, #1
   14c0c:	bhi	14f40 <__assert_fail@plt+0x37cc>
   14c10:	tst	r1, #1
   14c14:	beq	14f40 <__assert_fail@plt+0x37cc>
   14c18:	ldr	lr, [sp, #32]
   14c1c:	b	148bc <__assert_fail@plt+0x3148>
   14c20:	mov	r9, #0
   14c24:	mov	r0, #92	; 0x5c
   14c28:	ldr	r1, [sp, #56]	; 0x38
   14c2c:	cmp	r1, #0
   14c30:	beq	14ca8 <__assert_fail@plt+0x3534>
   14c34:	mov	r4, #92	; 0x5c
   14c38:	mov	r6, #0
   14c3c:	cmp	r9, #0
   14c40:	bne	14c78 <__assert_fail@plt+0x3504>
   14c44:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14c48:	tst	r0, #1
   14c4c:	beq	14c78 <__assert_fail@plt+0x3504>
   14c50:	cmp	r8, sl
   14c54:	movcc	r0, #39	; 0x27
   14c58:	strbcc	r0, [r5, r8]
   14c5c:	add	r0, r8, #1
   14c60:	cmp	r0, sl
   14c64:	movcc	r1, #39	; 0x27
   14c68:	strbcc	r1, [r5, r0]
   14c6c:	add	r8, r8, #2
   14c70:	mov	r0, #0
   14c74:	str	r0, [fp, #-56]	; 0xffffffc8
   14c78:	mov	r1, r6
   14c7c:	mov	r0, r4
   14c80:	cmp	r8, sl
   14c84:	strbcc	r0, [r5, r8]
   14c88:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14c8c:	and	r0, r0, r1
   14c90:	str	r0, [fp, #-48]	; 0xffffffd0
   14c94:	add	r8, r8, #1
   14c98:	add	r7, r7, #1
   14c9c:	cmn	lr, #1
   14ca0:	bne	145f4 <__assert_fail@plt+0x2e80>
   14ca4:	b	14600 <__assert_fail@plt+0x2e8c>
   14ca8:	mov	r9, #0
   14cac:	ldr	r1, [sp, #92]	; 0x5c
   14cb0:	tst	r1, #1
   14cb4:	mov	r6, #0
   14cb8:	mov	r1, #0
   14cbc:	beq	148bc <__assert_fail@plt+0x3148>
   14cc0:	b	14904 <__assert_fail@plt+0x3190>
   14cc4:	mov	r4, #0
   14cc8:	ldr	r0, [sp, #40]	; 0x28
   14ccc:	cmp	r0, #0
   14cd0:	mov	r9, #0
   14cd4:	mov	r6, #0
   14cd8:	beq	148bc <__assert_fail@plt+0x3148>
   14cdc:	b	14c98 <__assert_fail@plt+0x3524>
   14ce0:	mov	r6, #1
   14ce4:	b	148bc <__assert_fail@plt+0x3148>
   14ce8:	mov	r0, #0
   14cec:	str	r0, [fp, #-36]	; 0xffffffdc
   14cf0:	str	r0, [fp, #-40]	; 0xffffffd8
   14cf4:	cmn	lr, #1
   14cf8:	bne	14d0c <__assert_fail@plt+0x3598>
   14cfc:	mov	r0, ip
   14d00:	bl	11624 <strlen@plt>
   14d04:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14d08:	mov	lr, r0
   14d0c:	ldr	r0, [sp, #76]	; 0x4c
   14d10:	add	r0, r0, r7
   14d14:	str	r0, [sp, #24]
   14d18:	mov	r6, #1
   14d1c:	mov	r2, #0
   14d20:	sub	r0, fp, #40	; 0x28
   14d24:	mov	r3, r0
   14d28:	str	r5, [sp, #28]
   14d2c:	str	lr, [sp, #32]
   14d30:	b	14d74 <__assert_fail@plt+0x3600>
   14d34:	ldr	r5, [sp, #52]	; 0x34
   14d38:	add	r5, r0, r5
   14d3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14d40:	bl	11534 <iswprint@plt>
   14d44:	cmp	r0, #0
   14d48:	movwne	r0, #1
   14d4c:	and	r6, r6, r0
   14d50:	sub	r0, fp, #40	; 0x28
   14d54:	bl	114bc <mbsinit@plt>
   14d58:	sub	r3, fp, #40	; 0x28
   14d5c:	mov	r2, r5
   14d60:	ldr	lr, [sp, #32]
   14d64:	cmp	r0, #0
   14d68:	ldr	r5, [sp, #28]
   14d6c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14d70:	bne	14c00 <__assert_fail@plt+0x348c>
   14d74:	str	r2, [sp, #52]	; 0x34
   14d78:	add	r0, r2, r7
   14d7c:	add	r1, ip, r0
   14d80:	str	r0, [sp, #48]	; 0x30
   14d84:	sub	r2, lr, r0
   14d88:	sub	r0, fp, #44	; 0x2c
   14d8c:	bl	2462c <__assert_fail@plt+0x12eb8>
   14d90:	cmp	r0, #0
   14d94:	beq	1510c <__assert_fail@plt+0x3998>
   14d98:	cmn	r0, #1
   14d9c:	beq	150c8 <__assert_fail@plt+0x3954>
   14da0:	cmn	r0, #2
   14da4:	ldr	lr, [sp, #32]
   14da8:	beq	150d0 <__assert_fail@plt+0x395c>
   14dac:	cmp	r0, #2
   14db0:	mov	r1, #0
   14db4:	movwcc	r1, #1
   14db8:	ldr	r2, [sp, #68]	; 0x44
   14dbc:	eor	r2, r2, #1
   14dc0:	orrs	r1, r2, r1
   14dc4:	bne	14d34 <__assert_fail@plt+0x35c0>
   14dc8:	ldr	r1, [sp, #52]	; 0x34
   14dcc:	ldr	r2, [sp, #24]
   14dd0:	add	r1, r2, r1
   14dd4:	sub	r2, r0, #1
   14dd8:	b	14de8 <__assert_fail@plt+0x3674>
   14ddc:	add	r1, r1, #1
   14de0:	subs	r2, r2, #1
   14de4:	beq	14d34 <__assert_fail@plt+0x35c0>
   14de8:	ldrb	r3, [r1]
   14dec:	sub	r3, r3, #91	; 0x5b
   14df0:	cmp	r3, #33	; 0x21
   14df4:	bhi	14ddc <__assert_fail@plt+0x3668>
   14df8:	add	r5, pc, #0
   14dfc:	ldr	pc, [r5, r3, lsl #2]
   14e00:	strdeq	r5, [r1], -r8
   14e04:	strdeq	r5, [r1], -r8
   14e08:	ldrdeq	r4, [r1], -ip
   14e0c:	strdeq	r5, [r1], -r8
   14e10:	ldrdeq	r4, [r1], -ip
   14e14:	strdeq	r5, [r1], -r8
   14e18:	ldrdeq	r4, [r1], -ip
   14e1c:	ldrdeq	r4, [r1], -ip
   14e20:	ldrdeq	r4, [r1], -ip
   14e24:	ldrdeq	r4, [r1], -ip
   14e28:	ldrdeq	r4, [r1], -ip
   14e2c:	ldrdeq	r4, [r1], -ip
   14e30:	ldrdeq	r4, [r1], -ip
   14e34:	ldrdeq	r4, [r1], -ip
   14e38:	ldrdeq	r4, [r1], -ip
   14e3c:	ldrdeq	r4, [r1], -ip
   14e40:	ldrdeq	r4, [r1], -ip
   14e44:	ldrdeq	r4, [r1], -ip
   14e48:	ldrdeq	r4, [r1], -ip
   14e4c:	ldrdeq	r4, [r1], -ip
   14e50:	ldrdeq	r4, [r1], -ip
   14e54:	ldrdeq	r4, [r1], -ip
   14e58:	ldrdeq	r4, [r1], -ip
   14e5c:	ldrdeq	r4, [r1], -ip
   14e60:	ldrdeq	r4, [r1], -ip
   14e64:	ldrdeq	r4, [r1], -ip
   14e68:	ldrdeq	r4, [r1], -ip
   14e6c:	ldrdeq	r4, [r1], -ip
   14e70:	ldrdeq	r4, [r1], -ip
   14e74:	ldrdeq	r4, [r1], -ip
   14e78:	ldrdeq	r4, [r1], -ip
   14e7c:	ldrdeq	r4, [r1], -ip
   14e80:	ldrdeq	r4, [r1], -ip
   14e84:	strdeq	r5, [r1], -r8
   14e88:	mov	r8, r0
   14e8c:	b	148bc <__assert_fail@plt+0x3148>
   14e90:	ldr	r0, [sp, #36]	; 0x24
   14e94:	cmp	r0, #0
   14e98:	beq	14f38 <__assert_fail@plt+0x37c4>
   14e9c:	add	r0, r7, #2
   14ea0:	cmp	r0, lr
   14ea4:	bcs	14f38 <__assert_fail@plt+0x37c4>
   14ea8:	add	r1, r7, ip
   14eac:	ldrb	r1, [r1, #1]
   14eb0:	cmp	r1, #63	; 0x3f
   14eb4:	bne	14f38 <__assert_fail@plt+0x37c4>
   14eb8:	ldrb	r1, [ip, r0]
   14ebc:	sub	r2, r1, #33	; 0x21
   14ec0:	cmp	r2, #29
   14ec4:	bhi	14f38 <__assert_fail@plt+0x37c4>
   14ec8:	mov	r3, #1
   14ecc:	movw	r6, #20929	; 0x51c1
   14ed0:	movt	r6, #14336	; 0x3800
   14ed4:	tst	r6, r3, lsl r2
   14ed8:	beq	14f38 <__assert_fail@plt+0x37c4>
   14edc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ee0:	tst	r2, #1
   14ee4:	bne	15200 <__assert_fail@plt+0x3a8c>
   14ee8:	cmp	r8, sl
   14eec:	movcc	r2, #63	; 0x3f
   14ef0:	strbcc	r2, [r5, r8]
   14ef4:	add	r2, r8, #1
   14ef8:	cmp	r2, sl
   14efc:	movcc	r3, #34	; 0x22
   14f00:	strbcc	r3, [r5, r2]
   14f04:	add	r2, r8, #2
   14f08:	cmp	r2, sl
   14f0c:	movcc	r3, #34	; 0x22
   14f10:	strbcc	r3, [r5, r2]
   14f14:	add	r2, r8, #3
   14f18:	cmp	r2, sl
   14f1c:	movcc	r3, #63	; 0x3f
   14f20:	strbcc	r3, [r5, r2]
   14f24:	add	r8, r8, #4
   14f28:	mov	r7, r0
   14f2c:	mov	r4, r1
   14f30:	mov	r6, #0
   14f34:	b	148bc <__assert_fail@plt+0x3148>
   14f38:	mov	r6, #0
   14f3c:	b	148bc <__assert_fail@plt+0x3148>
   14f40:	add	r0, r2, r7
   14f44:	str	r0, [sp, #52]	; 0x34
   14f48:	mov	r2, #0
   14f4c:	ldr	lr, [sp, #32]
   14f50:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14f54:	str	r1, [sp, #48]	; 0x30
   14f58:	tst	r1, #1
   14f5c:	bne	15038 <__assert_fail@plt+0x38c4>
   14f60:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14f64:	tst	r1, #1
   14f68:	bne	15200 <__assert_fail@plt+0x3a8c>
   14f6c:	mov	r3, r0
   14f70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14f74:	subs	r1, r0, #2
   14f78:	movwne	r1, #1
   14f7c:	orr	r1, r1, r3
   14f80:	tst	r1, #1
   14f84:	bne	14fbc <__assert_fail@plt+0x3848>
   14f88:	cmp	r8, sl
   14f8c:	movcc	r0, #39	; 0x27
   14f90:	strbcc	r0, [r5, r8]
   14f94:	add	r2, r8, #1
   14f98:	cmp	r2, sl
   14f9c:	movcc	r0, #36	; 0x24
   14fa0:	strbcc	r0, [r5, r2]
   14fa4:	add	r2, r8, #2
   14fa8:	cmp	r2, sl
   14fac:	movcc	r0, #39	; 0x27
   14fb0:	strbcc	r0, [r5, r2]
   14fb4:	add	r8, r8, #3
   14fb8:	mov	r3, #1
   14fbc:	cmp	r8, sl
   14fc0:	movcc	r1, #92	; 0x5c
   14fc4:	strbcc	r1, [r5, r8]
   14fc8:	add	r2, r8, #1
   14fcc:	cmp	r2, sl
   14fd0:	bcs	14fe4 <__assert_fail@plt+0x3870>
   14fd4:	uxtb	r1, r4
   14fd8:	mov	r0, #48	; 0x30
   14fdc:	orr	r1, r0, r1, lsr #6
   14fe0:	strb	r1, [r5, r2]
   14fe4:	add	r2, r8, #2
   14fe8:	cmp	r2, sl
   14fec:	lsrcc	r1, r4, #3
   14ff0:	movcc	r0, #6
   14ff4:	bficc	r1, r0, #3, #29
   14ff8:	strbcc	r1, [r5, r2]
   14ffc:	mov	r0, #6
   15000:	bfi	r4, r0, #3, #29
   15004:	add	r8, r8, #3
   15008:	mov	r2, #1
   1500c:	mov	r0, r3
   15010:	b	1505c <__assert_fail@plt+0x38e8>
   15014:	cmp	r8, sl
   15018:	strbcc	r4, [r5, r8]
   1501c:	ldr	r1, [sp, #76]	; 0x4c
   15020:	ldrb	r4, [r1, r7]
   15024:	add	r8, r8, #1
   15028:	mov	r7, r3
   1502c:	ldr	r1, [sp, #48]	; 0x30
   15030:	tst	r1, #1
   15034:	beq	14f60 <__assert_fail@plt+0x37ec>
   15038:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1503c:	tst	r1, #1
   15040:	beq	15054 <__assert_fail@plt+0x38e0>
   15044:	cmp	r8, sl
   15048:	movcc	r1, #92	; 0x5c
   1504c:	strbcc	r1, [r5, r8]
   15050:	add	r8, r8, #1
   15054:	mov	r1, #0
   15058:	str	r1, [fp, #-52]	; 0xffffffcc
   1505c:	and	r9, r2, #1
   15060:	add	r3, r7, #1
   15064:	ldr	r1, [sp, #52]	; 0x34
   15068:	cmp	r1, r3
   1506c:	bls	150b0 <__assert_fail@plt+0x393c>
   15070:	cmp	r9, #0
   15074:	movwne	r9, #1
   15078:	mvn	r1, r0
   1507c:	orr	r1, r1, r9
   15080:	tst	r1, #1
   15084:	bne	15014 <__assert_fail@plt+0x38a0>
   15088:	cmp	r8, sl
   1508c:	movcc	r1, #39	; 0x27
   15090:	strbcc	r1, [r5, r8]
   15094:	add	r1, r8, #1
   15098:	cmp	r1, sl
   1509c:	movcc	r0, #39	; 0x27
   150a0:	strbcc	r0, [r5, r1]
   150a4:	add	r8, r8, #2
   150a8:	mov	r0, #0
   150ac:	b	15014 <__assert_fail@plt+0x38a0>
   150b0:	str	r0, [fp, #-56]	; 0xffffffc8
   150b4:	cmp	r9, #0
   150b8:	movwne	r9, #1
   150bc:	cmp	r9, #0
   150c0:	beq	14c44 <__assert_fail@plt+0x34d0>
   150c4:	b	14c78 <__assert_fail@plt+0x3504>
   150c8:	mov	r6, #0
   150cc:	b	1510c <__assert_fail@plt+0x3998>
   150d0:	mov	r6, #0
   150d4:	ldr	r0, [sp, #48]	; 0x30
   150d8:	cmp	r0, lr
   150dc:	bcs	1510c <__assert_fail@plt+0x3998>
   150e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   150e4:	add	r0, ip, r7
   150e8:	ldr	r2, [sp, #52]	; 0x34
   150ec:	ldrb	r1, [r0, r2]
   150f0:	cmp	r1, #0
   150f4:	beq	14c00 <__assert_fail@plt+0x348c>
   150f8:	add	r2, r2, #1
   150fc:	add	r1, r7, r2
   15100:	cmp	r1, lr
   15104:	bcc	150ec <__assert_fail@plt+0x3978>
   15108:	b	14c00 <__assert_fail@plt+0x348c>
   1510c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15110:	ldr	r2, [sp, #52]	; 0x34
   15114:	b	14c00 <__assert_fail@plt+0x348c>
   15118:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1511c:	eor	r0, r1, #2
   15120:	orr	r0, r0, r8
   15124:	clz	r0, r0
   15128:	lsr	r0, r0, #5
   1512c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15130:	tst	r3, r0
   15134:	bne	15200 <__assert_fail@plt+0x3a8c>
   15138:	mov	r6, r5
   1513c:	subs	r0, r1, #2
   15140:	movwne	r0, #1
   15144:	orr	r0, r3, r0
   15148:	tst	r0, #1
   1514c:	ldr	r2, [sp, #92]	; 0x5c
   15150:	ldreq	r0, [sp, #64]	; 0x40
   15154:	eoreq	r0, r0, #1
   15158:	tsteq	r0, #1
   1515c:	bne	1519c <__assert_fail@plt+0x3a28>
   15160:	mov	r9, lr
   15164:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15168:	tst	r0, #1
   1516c:	bne	15268 <__assert_fail@plt+0x3af4>
   15170:	ldr	r0, [sp, #84]	; 0x54
   15174:	cmp	r0, #0
   15178:	beq	1519c <__assert_fail@plt+0x3a28>
   1517c:	mov	r0, #0
   15180:	str	r0, [fp, #-48]	; 0xffffffd0
   15184:	mov	r1, #2
   15188:	cmp	sl, #0
   1518c:	mov	r0, r2
   15190:	mov	r4, r3
   15194:	ldr	r7, [sp, #84]	; 0x54
   15198:	beq	14374 <__assert_fail@plt+0x2c00>
   1519c:	ldr	r1, [fp, #-84]	; 0xffffffac
   151a0:	clz	r0, r1
   151a4:	lsr	r0, r0, #5
   151a8:	orr	r0, r0, r3
   151ac:	tst	r0, #1
   151b0:	bne	151dc <__assert_fail@plt+0x3a68>
   151b4:	ldrb	r0, [r1]
   151b8:	cmp	r0, #0
   151bc:	beq	151dc <__assert_fail@plt+0x3a68>
   151c0:	add	r1, r1, #1
   151c4:	cmp	r8, sl
   151c8:	strbcc	r0, [r6, r8]
   151cc:	add	r8, r8, #1
   151d0:	ldrb	r0, [r1], #1
   151d4:	cmp	r0, #0
   151d8:	bne	151c4 <__assert_fail@plt+0x3a50>
   151dc:	cmp	r8, sl
   151e0:	movcc	r0, #0
   151e4:	strbcc	r0, [r6, r8]
   151e8:	b	1525c <__assert_fail@plt+0x3ae8>
   151ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   151f0:	mov	lr, r4
   151f4:	b	15200 <__assert_fail@plt+0x3a8c>
   151f8:	ldr	r5, [sp, #28]
   151fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15200:	mov	r0, #0
   15204:	ldr	r1, [fp, #12]
   15208:	bic	r1, r1, #2
   1520c:	mov	r2, #2
   15210:	ldr	r3, [sp, #92]	; 0x5c
   15214:	tst	r3, #1
   15218:	movwne	r2, #4
   1521c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15220:	cmp	r3, #2
   15224:	movne	r2, r3
   15228:	str	r2, [sp]
   1522c:	str	r1, [sp, #4]
   15230:	str	r0, [sp, #8]
   15234:	ldr	r0, [sp, #80]	; 0x50
   15238:	str	r0, [sp, #12]
   1523c:	ldr	r0, [sp, #88]	; 0x58
   15240:	str	r0, [sp, #16]
   15244:	mov	r0, r5
   15248:	mov	r1, sl
   1524c:	mov	r2, ip
   15250:	mov	r3, lr
   15254:	bl	142e8 <__assert_fail@plt+0x2b74>
   15258:	mov	r8, r0
   1525c:	mov	r0, r8
   15260:	sub	sp, fp, #28
   15264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15268:	mov	r0, #5
   1526c:	str	r0, [sp]
   15270:	ldr	r0, [fp, #12]
   15274:	str	r0, [sp, #4]
   15278:	ldr	r0, [fp, #16]
   1527c:	str	r0, [sp, #8]
   15280:	ldr	r0, [sp, #80]	; 0x50
   15284:	str	r0, [sp, #12]
   15288:	ldr	r0, [sp, #88]	; 0x58
   1528c:	str	r0, [sp, #16]
   15290:	mov	r0, r6
   15294:	ldr	r1, [sp, #84]	; 0x54
   15298:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1529c:	mov	r3, r9
   152a0:	b	15254 <__assert_fail@plt+0x3ae0>
   152a4:	bl	11750 <abort@plt>
   152a8:	mov	r3, r2
   152ac:	mov	r2, #0
   152b0:	b	152b4 <__assert_fail@plt+0x3b40>
   152b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152b8:	add	fp, sp, #28
   152bc:	sub	sp, sp, #36	; 0x24
   152c0:	mov	r4, r2
   152c4:	str	r2, [sp, #24]
   152c8:	mov	r5, r1
   152cc:	mov	r6, r0
   152d0:	str	r0, [sp, #20]
   152d4:	movw	r8, #25280	; 0x62c0
   152d8:	movt	r8, #3
   152dc:	cmp	r3, #0
   152e0:	movne	r8, r3
   152e4:	bl	1163c <__errno_location@plt>
   152e8:	str	r0, [sp, #28]
   152ec:	ldm	r8, {r3, r9}
   152f0:	ldr	r1, [r8, #40]	; 0x28
   152f4:	ldr	r2, [r8, #44]	; 0x2c
   152f8:	ldr	r7, [r0]
   152fc:	str	r7, [sp, #32]
   15300:	add	sl, r8, #8
   15304:	cmp	r4, #0
   15308:	orreq	r9, r9, #1
   1530c:	stm	sp, {r3, r9, sl}
   15310:	str	r1, [sp, #12]
   15314:	str	r2, [sp, #16]
   15318:	mov	r0, #0
   1531c:	mov	r1, #0
   15320:	mov	r2, r6
   15324:	mov	r3, r5
   15328:	mov	r7, r5
   1532c:	bl	142e8 <__assert_fail@plt+0x2b74>
   15330:	mov	r5, r0
   15334:	add	r4, r0, #1
   15338:	mov	r0, r4
   1533c:	bl	22f50 <__assert_fail@plt+0x117dc>
   15340:	mov	r6, r0
   15344:	ldr	r0, [r8]
   15348:	ldr	r1, [r8, #40]	; 0x28
   1534c:	ldr	r2, [r8, #44]	; 0x2c
   15350:	stm	sp, {r0, r9, sl}
   15354:	str	r1, [sp, #12]
   15358:	str	r2, [sp, #16]
   1535c:	mov	r0, r6
   15360:	mov	r1, r4
   15364:	ldr	r2, [sp, #20]
   15368:	mov	r3, r7
   1536c:	bl	142e8 <__assert_fail@plt+0x2b74>
   15370:	ldr	r0, [sp, #24]
   15374:	ldr	r1, [sp, #32]
   15378:	ldr	r2, [sp, #28]
   1537c:	str	r1, [r2]
   15380:	cmp	r0, #0
   15384:	strne	r5, [r0]
   15388:	mov	r0, r6
   1538c:	sub	sp, fp, #28
   15390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15394:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15398:	add	fp, sp, #24
   1539c:	movw	r8, #24936	; 0x6168
   153a0:	movt	r8, #3
   153a4:	ldr	r4, [r8]
   153a8:	movw	r5, #24940	; 0x616c
   153ac:	movt	r5, #3
   153b0:	ldr	r0, [r5]
   153b4:	cmp	r0, #2
   153b8:	blt	153e4 <__assert_fail@plt+0x3c70>
   153bc:	add	r7, r4, #12
   153c0:	mov	r6, #0
   153c4:	ldr	r0, [r7, r6, lsl #3]
   153c8:	bl	13f1c <__assert_fail@plt+0x27a8>
   153cc:	add	r0, r6, #1
   153d0:	ldr	r1, [r5]
   153d4:	add	r2, r6, #2
   153d8:	cmp	r2, r1
   153dc:	mov	r6, r0
   153e0:	blt	153c4 <__assert_fail@plt+0x3c50>
   153e4:	ldr	r0, [r4, #4]
   153e8:	movw	r9, #25328	; 0x62f0
   153ec:	movt	r9, #3
   153f0:	cmp	r0, r9
   153f4:	movw	r7, #24944	; 0x6170
   153f8:	movt	r7, #3
   153fc:	beq	1540c <__assert_fail@plt+0x3c98>
   15400:	bl	13f1c <__assert_fail@plt+0x27a8>
   15404:	mov	r0, #256	; 0x100
   15408:	stm	r7, {r0, r9}
   1540c:	cmp	r4, r7
   15410:	beq	15420 <__assert_fail@plt+0x3cac>
   15414:	mov	r0, r4
   15418:	bl	13f1c <__assert_fail@plt+0x27a8>
   1541c:	str	r7, [r8]
   15420:	mov	r0, #1
   15424:	str	r0, [r5]
   15428:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1542c:	movw	r3, #25280	; 0x62c0
   15430:	movt	r3, #3
   15434:	mvn	r2, #0
   15438:	b	1543c <__assert_fail@plt+0x3cc8>
   1543c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15440:	add	fp, sp, #28
   15444:	sub	sp, sp, #44	; 0x2c
   15448:	mov	r7, r3
   1544c:	str	r2, [sp, #36]	; 0x24
   15450:	str	r1, [sp, #32]
   15454:	mov	r5, r0
   15458:	bl	1163c <__errno_location@plt>
   1545c:	cmp	r5, #0
   15460:	bmi	155d0 <__assert_fail@plt+0x3e5c>
   15464:	cmn	r5, #-2147483647	; 0x80000001
   15468:	beq	155d0 <__assert_fail@plt+0x3e5c>
   1546c:	movw	r4, #24936	; 0x6168
   15470:	movt	r4, #3
   15474:	ldr	r6, [r4]
   15478:	str	r0, [sp, #28]
   1547c:	ldr	r0, [r0]
   15480:	str	r0, [sp, #24]
   15484:	movw	r8, #24940	; 0x616c
   15488:	movt	r8, #3
   1548c:	ldr	r1, [r8]
   15490:	cmp	r1, r5
   15494:	ble	154a0 <__assert_fail@plt+0x3d2c>
   15498:	mov	sl, r6
   1549c:	b	1550c <__assert_fail@plt+0x3d98>
   154a0:	str	r1, [fp, #-32]	; 0xffffffe0
   154a4:	mov	r0, #8
   154a8:	str	r0, [sp]
   154ac:	movw	r9, #24944	; 0x6170
   154b0:	movt	r9, #3
   154b4:	subs	r0, r6, r9
   154b8:	movne	r0, r6
   154bc:	sub	r1, r5, r1
   154c0:	add	r2, r1, #1
   154c4:	sub	r1, fp, #32
   154c8:	mvn	r3, #-2147483648	; 0x80000000
   154cc:	bl	2302c <__assert_fail@plt+0x118b8>
   154d0:	mov	sl, r0
   154d4:	str	r0, [r4]
   154d8:	cmp	r6, r9
   154dc:	bne	154e8 <__assert_fail@plt+0x3d74>
   154e0:	ldrd	r0, [r9]
   154e4:	stm	sl, {r0, r1}
   154e8:	ldr	r1, [r8]
   154ec:	add	r0, sl, r1, lsl #3
   154f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   154f4:	sub	r1, r2, r1
   154f8:	lsl	r2, r1, #3
   154fc:	mov	r1, #0
   15500:	bl	1166c <memset@plt>
   15504:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15508:	str	r0, [r8]
   1550c:	mov	r9, sl
   15510:	ldr	r6, [r9, r5, lsl #3]!
   15514:	ldr	r4, [r9, #4]!
   15518:	ldm	r7, {r0, r1}
   1551c:	ldr	r2, [r7, #40]	; 0x28
   15520:	ldr	r3, [r7, #44]	; 0x2c
   15524:	orr	r8, r1, #1
   15528:	add	r1, r7, #8
   1552c:	stm	sp, {r0, r8}
   15530:	str	r1, [sp, #20]
   15534:	add	r0, sp, #8
   15538:	stm	r0, {r1, r2, r3}
   1553c:	mov	r0, r4
   15540:	mov	r1, r6
   15544:	ldr	r2, [sp, #32]
   15548:	ldr	r3, [sp, #36]	; 0x24
   1554c:	bl	142e8 <__assert_fail@plt+0x2b74>
   15550:	cmp	r6, r0
   15554:	bhi	155b8 <__assert_fail@plt+0x3e44>
   15558:	add	r6, r0, #1
   1555c:	str	r6, [sl, r5, lsl #3]
   15560:	movw	r0, #25328	; 0x62f0
   15564:	movt	r0, #3
   15568:	cmp	r4, r0
   1556c:	beq	15578 <__assert_fail@plt+0x3e04>
   15570:	mov	r0, r4
   15574:	bl	13f1c <__assert_fail@plt+0x27a8>
   15578:	mov	r0, r6
   1557c:	bl	22f50 <__assert_fail@plt+0x117dc>
   15580:	mov	r4, r0
   15584:	str	r0, [r9]
   15588:	ldr	r0, [r7]
   1558c:	ldr	r1, [r7, #40]	; 0x28
   15590:	ldr	r2, [r7, #44]	; 0x2c
   15594:	stm	sp, {r0, r8}
   15598:	ldr	r0, [sp, #20]
   1559c:	add	r3, sp, #8
   155a0:	stm	r3, {r0, r1, r2}
   155a4:	mov	r0, r4
   155a8:	mov	r1, r6
   155ac:	ldr	r2, [sp, #32]
   155b0:	ldr	r3, [sp, #36]	; 0x24
   155b4:	bl	142e8 <__assert_fail@plt+0x2b74>
   155b8:	ldr	r0, [sp, #28]
   155bc:	ldr	r1, [sp, #24]
   155c0:	str	r1, [r0]
   155c4:	mov	r0, r4
   155c8:	sub	sp, fp, #28
   155cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155d0:	bl	11750 <abort@plt>
   155d4:	movw	r3, #25280	; 0x62c0
   155d8:	movt	r3, #3
   155dc:	b	1543c <__assert_fail@plt+0x3cc8>
   155e0:	mov	r1, r0
   155e4:	mov	r0, #0
   155e8:	b	1542c <__assert_fail@plt+0x3cb8>
   155ec:	mov	r2, r1
   155f0:	mov	r1, r0
   155f4:	mov	r0, #0
   155f8:	b	155d4 <__assert_fail@plt+0x3e60>
   155fc:	push	{r4, r5, r6, sl, fp, lr}
   15600:	add	fp, sp, #16
   15604:	sub	sp, sp, #48	; 0x30
   15608:	mov	r4, r2
   1560c:	mov	r5, r0
   15610:	mov	r6, sp
   15614:	mov	r0, r6
   15618:	bl	15638 <__assert_fail@plt+0x3ec4>
   1561c:	mov	r0, r5
   15620:	mov	r1, r4
   15624:	mvn	r2, #0
   15628:	mov	r3, r6
   1562c:	bl	1543c <__assert_fail@plt+0x3cc8>
   15630:	sub	sp, fp, #16
   15634:	pop	{r4, r5, r6, sl, fp, pc}
   15638:	push	{fp, lr}
   1563c:	mov	fp, sp
   15640:	vmov.i32	q8, #0	; 0x00000000
   15644:	mov	r2, #32
   15648:	mov	r3, r0
   1564c:	vst1.32	{d16-d17}, [r3], r2
   15650:	vst1.32	{d16-d17}, [r3]
   15654:	add	r2, r0, #16
   15658:	vst1.32	{d16-d17}, [r2]
   1565c:	cmp	r1, #10
   15660:	strne	r1, [r0]
   15664:	popne	{fp, pc}
   15668:	bl	11750 <abort@plt>
   1566c:	push	{r4, r5, r6, r7, fp, lr}
   15670:	add	fp, sp, #16
   15674:	sub	sp, sp, #48	; 0x30
   15678:	mov	r4, r3
   1567c:	mov	r5, r2
   15680:	mov	r6, r0
   15684:	mov	r7, sp
   15688:	mov	r0, r7
   1568c:	bl	15638 <__assert_fail@plt+0x3ec4>
   15690:	mov	r0, r6
   15694:	mov	r1, r5
   15698:	mov	r2, r4
   1569c:	mov	r3, r7
   156a0:	bl	1543c <__assert_fail@plt+0x3cc8>
   156a4:	sub	sp, fp, #16
   156a8:	pop	{r4, r5, r6, r7, fp, pc}
   156ac:	mov	r2, r1
   156b0:	mov	r1, r0
   156b4:	mov	r0, #0
   156b8:	b	155fc <__assert_fail@plt+0x3e88>
   156bc:	mov	r3, r2
   156c0:	mov	r2, r1
   156c4:	mov	r1, r0
   156c8:	mov	r0, #0
   156cc:	b	1566c <__assert_fail@plt+0x3ef8>
   156d0:	push	{r4, r5, r6, sl, fp, lr}
   156d4:	add	fp, sp, #16
   156d8:	sub	sp, sp, #48	; 0x30
   156dc:	mov	r4, r1
   156e0:	mov	r5, r0
   156e4:	movw	r0, #25280	; 0x62c0
   156e8:	movt	r0, #3
   156ec:	add	r1, r0, #16
   156f0:	mov	r3, #32
   156f4:	vld1.64	{d16-d17}, [r0], r3
   156f8:	vld1.64	{d18-d19}, [r1]
   156fc:	mov	r6, sp
   15700:	add	r1, r6, #16
   15704:	vld1.64	{d20-d21}, [r0]
   15708:	vst1.64	{d18-d19}, [r1]
   1570c:	mov	r0, r6
   15710:	vst1.64	{d16-d17}, [r0], r3
   15714:	vst1.64	{d20-d21}, [r0]
   15718:	mov	r0, r6
   1571c:	mov	r1, r2
   15720:	mov	r2, #1
   15724:	bl	141dc <__assert_fail@plt+0x2a68>
   15728:	mov	r0, #0
   1572c:	mov	r1, r5
   15730:	mov	r2, r4
   15734:	mov	r3, r6
   15738:	bl	1543c <__assert_fail@plt+0x3cc8>
   1573c:	sub	sp, fp, #16
   15740:	pop	{r4, r5, r6, sl, fp, pc}
   15744:	mov	r2, r1
   15748:	mvn	r1, #0
   1574c:	b	156d0 <__assert_fail@plt+0x3f5c>
   15750:	mov	r1, #58	; 0x3a
   15754:	b	15744 <__assert_fail@plt+0x3fd0>
   15758:	mov	r2, #58	; 0x3a
   1575c:	b	156d0 <__assert_fail@plt+0x3f5c>
   15760:	push	{r4, r5, r6, sl, fp, lr}
   15764:	add	fp, sp, #16
   15768:	sub	sp, sp, #48	; 0x30
   1576c:	mov	r4, r2
   15770:	mov	r5, r0
   15774:	mov	r6, sp
   15778:	mov	r0, r6
   1577c:	bl	15638 <__assert_fail@plt+0x3ec4>
   15780:	mov	r0, r6
   15784:	mov	r1, #58	; 0x3a
   15788:	mov	r2, #1
   1578c:	bl	141dc <__assert_fail@plt+0x2a68>
   15790:	mov	r0, r5
   15794:	mov	r1, r4
   15798:	mvn	r2, #0
   1579c:	mov	r3, r6
   157a0:	bl	1543c <__assert_fail@plt+0x3cc8>
   157a4:	sub	sp, fp, #16
   157a8:	pop	{r4, r5, r6, sl, fp, pc}
   157ac:	push	{fp, lr}
   157b0:	mov	fp, sp
   157b4:	sub	sp, sp, #8
   157b8:	mvn	ip, #0
   157bc:	str	ip, [sp]
   157c0:	bl	157cc <__assert_fail@plt+0x4058>
   157c4:	mov	sp, fp
   157c8:	pop	{fp, pc}
   157cc:	push	{r4, r5, r6, r7, fp, lr}
   157d0:	add	fp, sp, #16
   157d4:	sub	sp, sp, #48	; 0x30
   157d8:	mov	r7, r3
   157dc:	mov	r5, r0
   157e0:	movw	r0, #25280	; 0x62c0
   157e4:	movt	r0, #3
   157e8:	add	r3, r0, #16
   157ec:	mov	r4, #32
   157f0:	vld1.64	{d16-d17}, [r0], r4
   157f4:	vld1.64	{d18-d19}, [r3]
   157f8:	mov	r6, sp
   157fc:	add	r3, r6, #16
   15800:	vld1.64	{d20-d21}, [r0]
   15804:	vst1.64	{d18-d19}, [r3]
   15808:	mov	r0, r6
   1580c:	vst1.64	{d16-d17}, [r0], r4
   15810:	vst1.64	{d20-d21}, [r0]
   15814:	mov	r0, r6
   15818:	bl	14234 <__assert_fail@plt+0x2ac0>
   1581c:	ldr	r2, [fp, #8]
   15820:	mov	r0, r5
   15824:	mov	r1, r7
   15828:	mov	r3, r6
   1582c:	bl	1543c <__assert_fail@plt+0x3cc8>
   15830:	sub	sp, fp, #16
   15834:	pop	{r4, r5, r6, r7, fp, pc}
   15838:	mov	r3, r2
   1583c:	mov	r2, r1
   15840:	mov	r1, r0
   15844:	mov	r0, #0
   15848:	b	157ac <__assert_fail@plt+0x4038>
   1584c:	push	{fp, lr}
   15850:	mov	fp, sp
   15854:	sub	sp, sp, #8
   15858:	mov	ip, r2
   1585c:	mov	r2, r1
   15860:	mov	r1, r0
   15864:	str	r3, [sp]
   15868:	mov	r0, #0
   1586c:	mov	r3, ip
   15870:	bl	157cc <__assert_fail@plt+0x4058>
   15874:	mov	sp, fp
   15878:	pop	{fp, pc}
   1587c:	movw	r3, #24952	; 0x6178
   15880:	movt	r3, #3
   15884:	b	1543c <__assert_fail@plt+0x3cc8>
   15888:	mov	r2, r1
   1588c:	mov	r1, r0
   15890:	mov	r0, #0
   15894:	b	1587c <__assert_fail@plt+0x4108>
   15898:	mvn	r2, #0
   1589c:	b	1587c <__assert_fail@plt+0x4108>
   158a0:	mov	r1, r0
   158a4:	mov	r0, #0
   158a8:	b	15898 <__assert_fail@plt+0x4124>
   158ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   158b0:	add	fp, sp, #24
   158b4:	sub	sp, sp, #16
   158b8:	mov	r4, r1
   158bc:	mov	r5, r0
   158c0:	mov	r7, #0
   158c4:	mov	r0, #0
   158c8:	mov	r1, r5
   158cc:	mov	r2, #5
   158d0:	bl	114e0 <dcgettext@plt>
   158d4:	cmp	r0, r5
   158d8:	beq	158e4 <__assert_fail@plt+0x4170>
   158dc:	sub	sp, fp, #24
   158e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   158e4:	bl	245f4 <__assert_fail@plt+0x12e80>
   158e8:	mov	r6, r0
   158ec:	mov	r8, #56	; 0x38
   158f0:	mov	r0, #45	; 0x2d
   158f4:	stm	sp, {r0, r8}
   158f8:	str	r7, [sp, #8]
   158fc:	str	r7, [sp, #12]
   15900:	mov	r0, r6
   15904:	mov	r1, #85	; 0x55
   15908:	mov	r2, #84	; 0x54
   1590c:	mov	r3, #70	; 0x46
   15910:	bl	159a8 <__assert_fail@plt+0x4234>
   15914:	cmp	r0, #0
   15918:	beq	15934 <__assert_fail@plt+0x41c0>
   1591c:	ldrb	r1, [r5]
   15920:	movw	r2, #22342	; 0x5746
   15924:	movt	r2, #2
   15928:	movw	r0, #22346	; 0x574a
   1592c:	movt	r0, #2
   15930:	b	15978 <__assert_fail@plt+0x4204>
   15934:	mov	r0, #48	; 0x30
   15938:	mov	r1, #51	; 0x33
   1593c:	str	r8, [sp]
   15940:	stmib	sp, {r0, r1}
   15944:	str	r0, [sp, #12]
   15948:	mov	r0, r6
   1594c:	mov	r1, #71	; 0x47
   15950:	mov	r2, #66	; 0x42
   15954:	mov	r3, #49	; 0x31
   15958:	bl	159a8 <__assert_fail@plt+0x4234>
   1595c:	cmp	r0, #0
   15960:	beq	15988 <__assert_fail@plt+0x4214>
   15964:	ldrb	r1, [r5]
   15968:	movw	r2, #22350	; 0x574e
   1596c:	movt	r2, #2
   15970:	movw	r0, #22354	; 0x5752
   15974:	movt	r0, #2
   15978:	cmp	r1, #96	; 0x60
   1597c:	moveq	r0, r2
   15980:	sub	sp, fp, #24
   15984:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15988:	movw	r1, #22338	; 0x5742
   1598c:	movt	r1, #2
   15990:	movw	r0, #21310	; 0x533e
   15994:	movt	r0, #2
   15998:	cmp	r4, #9
   1599c:	moveq	r0, r1
   159a0:	sub	sp, fp, #24
   159a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159a8:	push	{r4, r5, r6, r7, fp, lr}
   159ac:	add	fp, sp, #16
   159b0:	sub	sp, sp, #16
   159b4:	mov	r4, r3
   159b8:	mov	r5, r2
   159bc:	mov	r7, r1
   159c0:	mov	r6, r0
   159c4:	mov	r0, r1
   159c8:	bl	24208 <__assert_fail@plt+0x12a94>
   159cc:	ldrb	r1, [r6]
   159d0:	cmp	r0, #0
   159d4:	andne	r1, r1, #223	; 0xdf
   159d8:	mov	r0, #0
   159dc:	cmp	r1, r7
   159e0:	bne	15a18 <__assert_fail@plt+0x42a4>
   159e4:	cmp	r7, #0
   159e8:	beq	15a20 <__assert_fail@plt+0x42ac>
   159ec:	ldr	r0, [fp, #20]
   159f0:	ldr	r1, [fp, #16]
   159f4:	ldr	r2, [fp, #12]
   159f8:	ldr	r3, [fp, #8]
   159fc:	str	r2, [sp]
   15a00:	str	r1, [sp, #4]
   15a04:	str	r0, [sp, #8]
   15a08:	mov	r0, r6
   15a0c:	mov	r1, r5
   15a10:	mov	r2, r4
   15a14:	bl	15a2c <__assert_fail@plt+0x42b8>
   15a18:	sub	sp, fp, #16
   15a1c:	pop	{r4, r5, r6, r7, fp, pc}
   15a20:	mov	r0, #1
   15a24:	sub	sp, fp, #16
   15a28:	pop	{r4, r5, r6, r7, fp, pc}
   15a2c:	push	{r4, r5, r6, r7, fp, lr}
   15a30:	add	fp, sp, #16
   15a34:	sub	sp, sp, #8
   15a38:	mov	r4, r3
   15a3c:	mov	r5, r2
   15a40:	mov	r7, r1
   15a44:	mov	r6, r0
   15a48:	mov	r0, r1
   15a4c:	bl	24208 <__assert_fail@plt+0x12a94>
   15a50:	ldrb	r1, [r6, #1]
   15a54:	cmp	r0, #0
   15a58:	andne	r1, r1, #223	; 0xdf
   15a5c:	mov	r0, #0
   15a60:	cmp	r1, r7
   15a64:	bne	15a94 <__assert_fail@plt+0x4320>
   15a68:	cmp	r7, #0
   15a6c:	beq	15a9c <__assert_fail@plt+0x4328>
   15a70:	ldr	r0, [fp, #16]
   15a74:	ldr	r1, [fp, #12]
   15a78:	ldr	r3, [fp, #8]
   15a7c:	str	r1, [sp]
   15a80:	str	r0, [sp, #4]
   15a84:	mov	r0, r6
   15a88:	mov	r1, r5
   15a8c:	mov	r2, r4
   15a90:	bl	15aa8 <__assert_fail@plt+0x4334>
   15a94:	sub	sp, fp, #16
   15a98:	pop	{r4, r5, r6, r7, fp, pc}
   15a9c:	mov	r0, #1
   15aa0:	sub	sp, fp, #16
   15aa4:	pop	{r4, r5, r6, r7, fp, pc}
   15aa8:	push	{r4, r5, r6, r7, fp, lr}
   15aac:	add	fp, sp, #16
   15ab0:	sub	sp, sp, #8
   15ab4:	mov	r4, r3
   15ab8:	mov	r5, r2
   15abc:	mov	r7, r1
   15ac0:	mov	r6, r0
   15ac4:	mov	r0, r1
   15ac8:	bl	24208 <__assert_fail@plt+0x12a94>
   15acc:	ldrb	r1, [r6, #2]
   15ad0:	cmp	r0, #0
   15ad4:	andne	r1, r1, #223	; 0xdf
   15ad8:	mov	r0, #0
   15adc:	cmp	r1, r7
   15ae0:	bne	15b08 <__assert_fail@plt+0x4394>
   15ae4:	cmp	r7, #0
   15ae8:	beq	15b10 <__assert_fail@plt+0x439c>
   15aec:	ldr	r0, [fp, #12]
   15af0:	ldr	r3, [fp, #8]
   15af4:	str	r0, [sp]
   15af8:	mov	r0, r6
   15afc:	mov	r1, r5
   15b00:	mov	r2, r4
   15b04:	bl	15b1c <__assert_fail@plt+0x43a8>
   15b08:	sub	sp, fp, #16
   15b0c:	pop	{r4, r5, r6, r7, fp, pc}
   15b10:	mov	r0, #1
   15b14:	sub	sp, fp, #16
   15b18:	pop	{r4, r5, r6, r7, fp, pc}
   15b1c:	push	{r4, r5, r6, r7, fp, lr}
   15b20:	add	fp, sp, #16
   15b24:	mov	r4, r3
   15b28:	mov	r5, r2
   15b2c:	mov	r7, r1
   15b30:	mov	r6, r0
   15b34:	mov	r0, r1
   15b38:	bl	24208 <__assert_fail@plt+0x12a94>
   15b3c:	ldrb	r1, [r6, #3]
   15b40:	ldr	r3, [fp, #8]
   15b44:	cmp	r0, #0
   15b48:	andne	r1, r1, #223	; 0xdf
   15b4c:	mov	r0, #0
   15b50:	cmp	r1, r7
   15b54:	bne	15b78 <__assert_fail@plt+0x4404>
   15b58:	cmp	r7, #0
   15b5c:	beq	15b74 <__assert_fail@plt+0x4400>
   15b60:	mov	r0, r6
   15b64:	mov	r1, r5
   15b68:	mov	r2, r4
   15b6c:	pop	{r4, r5, r6, r7, fp, lr}
   15b70:	b	15b7c <__assert_fail@plt+0x4408>
   15b74:	mov	r0, #1
   15b78:	pop	{r4, r5, r6, r7, fp, pc}
   15b7c:	push	{r4, r5, r6, r7, fp, lr}
   15b80:	add	fp, sp, #16
   15b84:	mov	r4, r3
   15b88:	mov	r5, r2
   15b8c:	mov	r7, r1
   15b90:	mov	r6, r0
   15b94:	mov	r0, r1
   15b98:	bl	24208 <__assert_fail@plt+0x12a94>
   15b9c:	ldrb	r1, [r6, #4]
   15ba0:	cmp	r0, #0
   15ba4:	andne	r1, r1, #223	; 0xdf
   15ba8:	mov	r0, #0
   15bac:	cmp	r1, r7
   15bb0:	bne	15bd4 <__assert_fail@plt+0x4460>
   15bb4:	cmp	r7, #0
   15bb8:	beq	15bd0 <__assert_fail@plt+0x445c>
   15bbc:	mov	r0, r6
   15bc0:	mov	r1, r5
   15bc4:	mov	r2, r4
   15bc8:	pop	{r4, r5, r6, r7, fp, lr}
   15bcc:	b	15bd8 <__assert_fail@plt+0x4464>
   15bd0:	mov	r0, #1
   15bd4:	pop	{r4, r5, r6, r7, fp, pc}
   15bd8:	push	{r4, r5, r6, sl, fp, lr}
   15bdc:	add	fp, sp, #16
   15be0:	mov	r4, r2
   15be4:	mov	r6, r1
   15be8:	mov	r5, r0
   15bec:	mov	r0, r1
   15bf0:	bl	24208 <__assert_fail@plt+0x12a94>
   15bf4:	ldrb	r1, [r5, #5]
   15bf8:	cmp	r0, #0
   15bfc:	andne	r1, r1, #223	; 0xdf
   15c00:	mov	r0, #0
   15c04:	cmp	r1, r6
   15c08:	bne	15c28 <__assert_fail@plt+0x44b4>
   15c0c:	cmp	r6, #0
   15c10:	beq	15c24 <__assert_fail@plt+0x44b0>
   15c14:	mov	r0, r5
   15c18:	mov	r1, r4
   15c1c:	pop	{r4, r5, r6, sl, fp, lr}
   15c20:	b	15c2c <__assert_fail@plt+0x44b8>
   15c24:	mov	r0, #1
   15c28:	pop	{r4, r5, r6, sl, fp, pc}
   15c2c:	push	{r4, r5, fp, lr}
   15c30:	add	fp, sp, #8
   15c34:	mov	r5, r1
   15c38:	mov	r4, r0
   15c3c:	mov	r0, r1
   15c40:	bl	24208 <__assert_fail@plt+0x12a94>
   15c44:	ldrb	r1, [r4, #6]
   15c48:	cmp	r0, #0
   15c4c:	andne	r1, r1, #223	; 0xdf
   15c50:	mov	r0, #0
   15c54:	cmp	r1, r5
   15c58:	popne	{r4, r5, fp, pc}
   15c5c:	cmp	r5, #0
   15c60:	beq	15c70 <__assert_fail@plt+0x44fc>
   15c64:	mov	r0, r4
   15c68:	pop	{r4, r5, fp, lr}
   15c6c:	b	15c78 <__assert_fail@plt+0x4504>
   15c70:	mov	r0, #1
   15c74:	pop	{r4, r5, fp, pc}
   15c78:	push	{r4, sl, fp, lr}
   15c7c:	add	fp, sp, #8
   15c80:	mov	r4, r0
   15c84:	mov	r0, #0
   15c88:	bl	24208 <__assert_fail@plt+0x12a94>
   15c8c:	ldrb	r1, [r4, #7]
   15c90:	cmp	r0, #0
   15c94:	beq	15ca8 <__assert_fail@plt+0x4534>
   15c98:	tst	r1, #223	; 0xdf
   15c9c:	bne	15cb0 <__assert_fail@plt+0x453c>
   15ca0:	mov	r0, #1
   15ca4:	pop	{r4, sl, fp, pc}
   15ca8:	cmp	r1, #0
   15cac:	beq	15ca0 <__assert_fail@plt+0x452c>
   15cb0:	mov	r0, #0
   15cb4:	pop	{r4, sl, fp, pc}
   15cb8:	push	{fp, lr}
   15cbc:	mov	fp, sp
   15cc0:	mov	ip, r1
   15cc4:	mov	lr, r0
   15cc8:	movw	r0, #25588	; 0x63f4
   15ccc:	movt	r0, #3
   15cd0:	ldr	r3, [r0]
   15cd4:	mov	r0, #16
   15cd8:	and	r0, r0, r3, lsr #21
   15cdc:	ldrb	r1, [r2, #28]
   15ce0:	and	r1, r1, #111	; 0x6f
   15ce4:	orr	r0, r1, r0
   15ce8:	orr	r0, r0, #128	; 0x80
   15cec:	strb	r0, [r2, #28]
   15cf0:	mov	r0, r2
   15cf4:	mov	r1, lr
   15cf8:	mov	r2, ip
   15cfc:	bl	15d38 <__assert_fail@plt+0x45c4>
   15d00:	cmp	r0, #0
   15d04:	beq	15d30 <__assert_fail@plt+0x45bc>
   15d08:	movw	r1, #22832	; 0x5930
   15d0c:	movt	r1, #2
   15d10:	ldr	r0, [r1, r0, lsl #2]
   15d14:	movw	r1, #22448	; 0x57b0
   15d18:	movt	r1, #2
   15d1c:	add	r1, r1, r0
   15d20:	mov	r0, #0
   15d24:	mov	r2, #5
   15d28:	pop	{fp, lr}
   15d2c:	b	114e0 <dcgettext@plt>
   15d30:	mov	r0, #0
   15d34:	pop	{fp, pc}
   15d38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15d3c:	add	fp, sp, #24
   15d40:	sub	sp, sp, #96	; 0x60
   15d44:	mov	r6, r3
   15d48:	mov	r7, r2
   15d4c:	mov	r8, r1
   15d50:	mov	r4, r0
   15d54:	mov	r0, #0
   15d58:	str	r0, [fp, #-28]	; 0xffffffe4
   15d5c:	str	r0, [r4, #24]
   15d60:	str	r0, [r4, #8]
   15d64:	str	r3, [r4, #12]
   15d68:	ldrb	r0, [r4, #28]
   15d6c:	and	r0, r0, #144	; 0x90
   15d70:	strb	r0, [r4, #28]
   15d74:	ldr	r5, [r4]
   15d78:	ldr	r0, [r4, #4]
   15d7c:	cmp	r0, #159	; 0x9f
   15d80:	bls	15ee4 <__assert_fail@plt+0x4770>
   15d84:	mov	r0, #160	; 0xa0
   15d88:	str	r0, [r4, #8]
   15d8c:	mov	r0, r5
   15d90:	mov	r1, r7
   15d94:	bl	17428 <__assert_fail@plt+0x5cb4>
   15d98:	str	r0, [fp, #-28]	; 0xffffffe4
   15d9c:	cmp	r0, #0
   15da0:	bne	15dd4 <__assert_fail@plt+0x4660>
   15da4:	movw	r1, #0
   15da8:	movt	r1, #0
   15dac:	movw	r2, #0
   15db0:	movt	r2, #0
   15db4:	orrs	r1, r2, r1
   15db8:	beq	15dd4 <__assert_fail@plt+0x4660>
   15dbc:	add	r0, r5, #136	; 0x88
   15dc0:	mov	r1, #0
   15dc4:	bl	114a4 <pthread_mutex_init@plt>
   15dc8:	cmp	r0, #0
   15dcc:	bne	15f08 <__assert_fail@plt+0x4794>
   15dd0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15dd4:	cmp	r0, #0
   15dd8:	bne	15ecc <__assert_fail@plt+0x4758>
   15ddc:	ldr	r3, [r4, #20]
   15de0:	str	r5, [sp, #4]
   15de4:	ubfx	r0, r6, #22, #1
   15de8:	str	r0, [sp]
   15dec:	add	r0, sp, #8
   15df0:	mov	r1, r8
   15df4:	mov	r2, r7
   15df8:	bl	175e4 <__assert_fail@plt+0x5e70>
   15dfc:	str	r0, [fp, #-28]	; 0xffffffe4
   15e00:	cmp	r0, #0
   15e04:	bne	15e9c <__assert_fail@plt+0x4728>
   15e08:	mov	r0, #0
   15e0c:	str	r0, [r4, #24]
   15e10:	add	r0, sp, #8
   15e14:	sub	r3, fp, #28
   15e18:	mov	r1, r4
   15e1c:	mov	r2, r6
   15e20:	bl	177b8 <__assert_fail@plt+0x6044>
   15e24:	str	r0, [r5, #52]	; 0x34
   15e28:	cmp	r0, #0
   15e2c:	beq	15e9c <__assert_fail@plt+0x4728>
   15e30:	mov	r0, r4
   15e34:	bl	1788c <__assert_fail@plt+0x6118>
   15e38:	str	r0, [fp, #-28]	; 0xffffffe4
   15e3c:	cmp	r0, #0
   15e40:	bne	15e9c <__assert_fail@plt+0x4728>
   15e44:	ands	r0, r6, #4194304	; 0x400000
   15e48:	bne	15e68 <__assert_fail@plt+0x46f4>
   15e4c:	ldrb	r0, [r5, #88]	; 0x58
   15e50:	ands	r0, r0, #4
   15e54:	beq	15e68 <__assert_fail@plt+0x46f4>
   15e58:	ldr	r0, [r4, #20]
   15e5c:	cmp	r0, #0
   15e60:	moveq	r0, r5
   15e64:	bleq	17aa8 <__assert_fail@plt+0x6334>
   15e68:	mov	r0, r5
   15e6c:	bl	17c4c <__assert_fail@plt+0x64d8>
   15e70:	str	r0, [fp, #-28]	; 0xffffffe4
   15e74:	mov	r0, r4
   15e78:	bl	17734 <__assert_fail@plt+0x5fc0>
   15e7c:	add	r0, sp, #8
   15e80:	bl	17784 <__assert_fail@plt+0x6010>
   15e84:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15e88:	cmp	r0, #0
   15e8c:	bne	15eac <__assert_fail@plt+0x4738>
   15e90:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15e94:	sub	sp, fp, #24
   15e98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e9c:	mov	r0, r4
   15ea0:	bl	17734 <__assert_fail@plt+0x5fc0>
   15ea4:	add	r0, sp, #8
   15ea8:	bl	17784 <__assert_fail@plt+0x6010>
   15eac:	movw	r0, #0
   15eb0:	movt	r0, #0
   15eb4:	movw	r1, #0
   15eb8:	movt	r1, #0
   15ebc:	orrs	r0, r1, r0
   15ec0:	beq	15ecc <__assert_fail@plt+0x4758>
   15ec4:	add	r0, r5, #136	; 0x88
   15ec8:	bl	11438 <pthread_mutex_destroy@plt>
   15ecc:	mov	r0, r5
   15ed0:	bl	1653c <__assert_fail@plt+0x4dc8>
   15ed4:	mov	r0, #0
   15ed8:	str	r0, [r4]
   15edc:	str	r0, [r4, #4]
   15ee0:	b	15e90 <__assert_fail@plt+0x471c>
   15ee4:	mov	r9, #160	; 0xa0
   15ee8:	mov	r0, r5
   15eec:	mov	r1, #160	; 0xa0
   15ef0:	bl	23f00 <__assert_fail@plt+0x1278c>
   15ef4:	cmp	r0, #0
   15ef8:	beq	15f14 <__assert_fail@plt+0x47a0>
   15efc:	mov	r5, r0
   15f00:	stm	r4, {r0, r9}
   15f04:	b	15d84 <__assert_fail@plt+0x4610>
   15f08:	mov	r0, #12
   15f0c:	str	r0, [fp, #-28]	; 0xffffffe4
   15f10:	b	15ecc <__assert_fail@plt+0x4758>
   15f14:	mov	r0, #12
   15f18:	sub	sp, fp, #24
   15f1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15f20:	movw	r2, #25588	; 0x63f4
   15f24:	movt	r2, #3
   15f28:	ldr	r1, [r2]
   15f2c:	str	r0, [r2]
   15f30:	mov	r0, r1
   15f34:	bx	lr
   15f38:	push	{r4, r5, r6, sl, fp, lr}
   15f3c:	add	fp, sp, #16
   15f40:	mov	r4, r0
   15f44:	ldr	r6, [r0]
   15f48:	ldr	r5, [r0, #16]
   15f4c:	mov	r0, r5
   15f50:	mov	r1, #0
   15f54:	mov	r2, #256	; 0x100
   15f58:	bl	1166c <memset@plt>
   15f5c:	ldr	r1, [r6, #36]	; 0x24
   15f60:	mov	r0, r4
   15f64:	mov	r2, r5
   15f68:	bl	15fc8 <__assert_fail@plt+0x4854>
   15f6c:	ldr	r0, [r6, #36]	; 0x24
   15f70:	ldr	r1, [r6, #40]	; 0x28
   15f74:	cmp	r0, r1
   15f78:	movne	r0, r4
   15f7c:	movne	r2, r5
   15f80:	blne	15fc8 <__assert_fail@plt+0x4854>
   15f84:	ldr	r0, [r6, #36]	; 0x24
   15f88:	ldr	r1, [r6, #44]	; 0x2c
   15f8c:	cmp	r0, r1
   15f90:	movne	r0, r4
   15f94:	movne	r2, r5
   15f98:	blne	15fc8 <__assert_fail@plt+0x4854>
   15f9c:	ldr	r0, [r6, #36]	; 0x24
   15fa0:	ldr	r1, [r6, #48]	; 0x30
   15fa4:	cmp	r0, r1
   15fa8:	movne	r0, r4
   15fac:	movne	r2, r5
   15fb0:	blne	15fc8 <__assert_fail@plt+0x4854>
   15fb4:	ldrb	r0, [r4, #28]
   15fb8:	orr	r0, r0, #8
   15fbc:	strb	r0, [r4, #28]
   15fc0:	mov	r0, #0
   15fc4:	pop	{r4, r5, r6, sl, fp, pc}
   15fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fcc:	add	fp, sp, #28
   15fd0:	sub	sp, sp, #308	; 0x134
   15fd4:	mov	r5, r2
   15fd8:	str	r0, [sp, #20]
   15fdc:	ldr	r8, [r0]
   15fe0:	ldr	r0, [r8, #92]	; 0x5c
   15fe4:	mov	r9, #0
   15fe8:	cmp	r0, #1
   15fec:	bne	15ffc <__assert_fail@plt+0x4888>
   15ff0:	ldr	r0, [sp, #20]
   15ff4:	ldrb	r0, [r0, #14]
   15ff8:	ubfx	r9, r0, #6, #1
   15ffc:	ldr	r0, [r1, #8]
   16000:	cmp	r0, #1
   16004:	blt	16344 <__assert_fail@plt+0x4bd0>
   16008:	add	r0, sp, #32
   1600c:	add	r0, r0, #1
   16010:	str	r0, [sp, #4]
   16014:	mov	r7, #1
   16018:	movw	r0, #1
   1601c:	movt	r0, #32
   16020:	add	r0, r0, #254	; 0xfe
   16024:	str	r0, [sp, #8]
   16028:	mov	r2, #0
   1602c:	str	r1, [sp, #12]
   16030:	str	r8, [sp, #24]
   16034:	b	16050 <__assert_fail@plt+0x48dc>
   16038:	ldr	r1, [sp, #12]
   1603c:	ldr	r0, [r1, #8]
   16040:	ldr	r2, [sp, #16]
   16044:	add	r2, r2, #1
   16048:	cmp	r2, r0
   1604c:	bge	16344 <__assert_fail@plt+0x4bd0>
   16050:	ldr	r0, [r1, #12]
   16054:	str	r2, [sp, #16]
   16058:	ldr	sl, [r0, r2, lsl #2]
   1605c:	ldr	r0, [r8]
   16060:	add	r1, r0, sl, lsl #3
   16064:	ldrb	r4, [r1, #4]
   16068:	cmp	r4, #1
   1606c:	beq	160e8 <__assert_fail@plt+0x4974>
   16070:	cmp	r4, #6
   16074:	beq	161d8 <__assert_fail@plt+0x4a64>
   16078:	cmp	r4, #3
   1607c:	bne	16258 <__assert_fail@plt+0x4ae4>
   16080:	mov	r4, #0
   16084:	mov	r6, #0
   16088:	str	sl, [sp, #28]
   1608c:	b	160a4 <__assert_fail@plt+0x4930>
   16090:	add	r6, r6, #1
   16094:	cmp	r6, #8
   16098:	ldr	r8, [sp, #24]
   1609c:	ldr	sl, [sp, #28]
   160a0:	beq	16038 <__assert_fail@plt+0x48c4>
   160a4:	ldr	r0, [r8]
   160a8:	ldr	r0, [r0, sl, lsl #3]
   160ac:	ldr	r8, [r0, r6, lsl #2]
   160b0:	mov	sl, #0
   160b4:	b	160c8 <__assert_fail@plt+0x4954>
   160b8:	add	r4, r4, #1
   160bc:	add	sl, sl, #1
   160c0:	cmp	sl, #32
   160c4:	beq	16090 <__assert_fail@plt+0x491c>
   160c8:	tst	r8, r7, lsl sl
   160cc:	strbne	r7, [r5, r4]
   160d0:	cmpne	r9, #0
   160d4:	beq	160b8 <__assert_fail@plt+0x4944>
   160d8:	mov	r0, r4
   160dc:	bl	11498 <tolower@plt>
   160e0:	strb	r7, [r5, r0]
   160e4:	b	160b8 <__assert_fail@plt+0x4944>
   160e8:	ldrb	r0, [r0, sl, lsl #3]
   160ec:	strb	r7, [r5, r0]
   160f0:	cmp	r9, #0
   160f4:	beq	16100 <__assert_fail@plt+0x498c>
   160f8:	bl	11498 <tolower@plt>
   160fc:	strb	r7, [r5, r0]
   16100:	ldr	r0, [sp, #20]
   16104:	ldrb	r0, [r0, #14]
   16108:	tst	r0, #64	; 0x40
   1610c:	beq	16038 <__assert_fail@plt+0x48c4>
   16110:	ldr	r0, [r8, #92]	; 0x5c
   16114:	cmp	r0, #2
   16118:	blt	16038 <__assert_fail@plt+0x48c4>
   1611c:	ldr	r0, [r8]
   16120:	ldrb	r0, [r0, sl, lsl #3]
   16124:	strb	r0, [sp, #32]
   16128:	ldr	r0, [r8, #8]
   1612c:	add	r1, sl, #1
   16130:	cmp	r1, r0
   16134:	ldr	r0, [sp, #4]
   16138:	mov	r6, #0
   1613c:	movw	r4, #1
   16140:	movt	r4, #32
   16144:	bcs	16188 <__assert_fail@plt+0x4a14>
   16148:	ldr	r0, [sp, #4]
   1614c:	ldr	r1, [r8]
   16150:	add	r1, r1, sl, lsl #3
   16154:	ldr	r2, [r1, #12]
   16158:	ldr	r3, [sp, #8]
   1615c:	and	r2, r2, r3
   16160:	cmp	r2, r4
   16164:	bne	16188 <__assert_fail@plt+0x4a14>
   16168:	ldrb	r1, [r1, #8]
   1616c:	strb	r1, [r0], #1
   16170:	add	r1, sl, #1
   16174:	ldr	r2, [r8, #8]
   16178:	add	r3, sl, #2
   1617c:	cmp	r3, r2
   16180:	mov	sl, r1
   16184:	bcc	1614c <__assert_fail@plt+0x49d8>
   16188:	str	r6, [fp, #-44]	; 0xffffffd4
   1618c:	str	r6, [fp, #-48]	; 0xffffffd0
   16190:	add	r1, sp, #32
   16194:	sub	r4, r0, r1
   16198:	sub	r0, fp, #36	; 0x24
   1619c:	mov	r2, r4
   161a0:	sub	r3, fp, #48	; 0x30
   161a4:	bl	2462c <__assert_fail@plt+0x12eb8>
   161a8:	cmp	r0, r4
   161ac:	bne	16038 <__assert_fail@plt+0x48c4>
   161b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   161b4:	bl	114b0 <towlower@plt>
   161b8:	mov	r1, r0
   161bc:	add	r0, sp, #32
   161c0:	sub	r2, fp, #48	; 0x30
   161c4:	bl	11408 <wcrtomb@plt>
   161c8:	cmn	r0, #1
   161cc:	ldrbne	r0, [sp, #32]
   161d0:	strbne	r7, [r5, r0]
   161d4:	b	16038 <__assert_fail@plt+0x48c4>
   161d8:	ldr	r4, [r0, sl, lsl #3]
   161dc:	ldr	r0, [r8, #92]	; 0x5c
   161e0:	cmp	r0, #2
   161e4:	blt	16270 <__assert_fail@plt+0x4afc>
   161e8:	ldr	r0, [r4, #36]	; 0x24
   161ec:	cmp	r0, #0
   161f0:	bne	1620c <__assert_fail@plt+0x4a98>
   161f4:	ldrb	r0, [r4, #16]
   161f8:	tst	r0, #1
   161fc:	bne	1620c <__assert_fail@plt+0x4a98>
   16200:	ldr	r0, [r4, #32]
   16204:	cmp	r0, #0
   16208:	beq	16270 <__assert_fail@plt+0x4afc>
   1620c:	mov	r4, #0
   16210:	strb	r4, [fp, #-48]	; 0xffffffd0
   16214:	str	r4, [sp, #36]	; 0x24
   16218:	str	r4, [sp, #32]
   1621c:	mov	r0, #0
   16220:	sub	r1, fp, #48	; 0x30
   16224:	mov	r2, #1
   16228:	add	r3, sp, #32
   1622c:	bl	2462c <__assert_fail@plt+0x12eb8>
   16230:	cmn	r0, #2
   16234:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   16238:	strbeq	r7, [r5, r0]
   1623c:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   16240:	add	r0, r0, #1
   16244:	strb	r0, [fp, #-48]	; 0xffffffd0
   16248:	uxtb	r1, r0
   1624c:	cmp	r1, r0
   16250:	beq	16214 <__assert_fail@plt+0x4aa0>
   16254:	b	16038 <__assert_fail@plt+0x48c4>
   16258:	cmp	r4, #7
   1625c:	bhi	16038 <__assert_fail@plt+0x48c4>
   16260:	mov	r0, #164	; 0xa4
   16264:	tst	r0, r7, lsl r4
   16268:	beq	16038 <__assert_fail@plt+0x48c4>
   1626c:	b	1631c <__assert_fail@plt+0x4ba8>
   16270:	ldr	r0, [r4, #20]
   16274:	cmp	r0, #1
   16278:	blt	16038 <__assert_fail@plt+0x48c4>
   1627c:	mov	r6, #0
   16280:	b	16294 <__assert_fail@plt+0x4b20>
   16284:	add	r6, r6, #1
   16288:	ldr	r0, [r4, #20]
   1628c:	cmp	r6, r0
   16290:	bge	16038 <__assert_fail@plt+0x48c4>
   16294:	mov	r0, #0
   16298:	str	r0, [fp, #-44]	; 0xffffffd4
   1629c:	str	r0, [fp, #-48]	; 0xffffffd0
   162a0:	ldr	r0, [r4]
   162a4:	ldr	r1, [r0, r6, lsl #2]
   162a8:	add	r0, sp, #32
   162ac:	sub	r2, fp, #48	; 0x30
   162b0:	bl	11408 <wcrtomb@plt>
   162b4:	cmn	r0, #1
   162b8:	beq	162d4 <__assert_fail@plt+0x4b60>
   162bc:	ldrb	r0, [sp, #32]
   162c0:	strb	r7, [r5, r0]
   162c4:	cmp	r9, #0
   162c8:	beq	162d4 <__assert_fail@plt+0x4b60>
   162cc:	bl	11498 <tolower@plt>
   162d0:	strb	r7, [r5, r0]
   162d4:	ldr	r0, [sp, #20]
   162d8:	ldrb	r0, [r0, #14]
   162dc:	tst	r0, #64	; 0x40
   162e0:	beq	16284 <__assert_fail@plt+0x4b10>
   162e4:	ldr	r0, [r8, #92]	; 0x5c
   162e8:	cmp	r0, #2
   162ec:	blt	16284 <__assert_fail@plt+0x4b10>
   162f0:	ldr	r0, [r4]
   162f4:	ldr	r0, [r0, r6, lsl #2]
   162f8:	bl	114b0 <towlower@plt>
   162fc:	mov	r1, r0
   16300:	add	r0, sp, #32
   16304:	sub	r2, fp, #48	; 0x30
   16308:	bl	11408 <wcrtomb@plt>
   1630c:	cmn	r0, #1
   16310:	ldrbne	r0, [sp, #32]
   16314:	strbne	r7, [r5, r0]
   16318:	b	16284 <__assert_fail@plt+0x4b10>
   1631c:	mov	r0, r5
   16320:	mov	r1, #1
   16324:	mov	r2, #256	; 0x100
   16328:	bl	1166c <memset@plt>
   1632c:	cmp	r4, #2
   16330:	bne	16344 <__assert_fail@plt+0x4bd0>
   16334:	ldr	r1, [sp, #20]
   16338:	ldrb	r0, [r1, #28]
   1633c:	orr	r0, r0, #1
   16340:	strb	r0, [r1, #28]
   16344:	sub	sp, fp, #28
   16348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1634c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16350:	add	fp, sp, #24
   16354:	mov	r7, r2
   16358:	mov	r8, r1
   1635c:	mov	r4, r0
   16360:	mov	r0, #0
   16364:	str	r0, [r4]
   16368:	str	r0, [r4, #4]
   1636c:	str	r0, [r4, #8]
   16370:	mov	r0, #256	; 0x100
   16374:	bl	23ed0 <__assert_fail@plt+0x1275c>
   16378:	str	r0, [r4, #16]
   1637c:	cmp	r0, #0
   16380:	beq	16430 <__assert_fail@plt+0x4cbc>
   16384:	movw	r0, #45820	; 0xb2fc
   16388:	movt	r0, #3
   1638c:	tst	r7, #1
   16390:	movweq	r0, #710	; 0x2c6
   16394:	movteq	r0, #257	; 0x101
   16398:	and	r1, r7, #2
   1639c:	orr	r5, r0, r1, lsl #21
   163a0:	tst	r7, #4
   163a4:	bne	163b8 <__assert_fail@plt+0x4c44>
   163a8:	ldrb	r0, [r4, #28]
   163ac:	and	r0, r0, #127	; 0x7f
   163b0:	strb	r0, [r4, #28]
   163b4:	b	163d4 <__assert_fail@plt+0x4c60>
   163b8:	ldrb	r0, [r4, #28]
   163bc:	orr	r0, r0, #128	; 0x80
   163c0:	strb	r0, [r4, #28]
   163c4:	movw	r0, #45758	; 0xb2be
   163c8:	movt	r0, #323	; 0x143
   163cc:	and	r0, r5, r0
   163d0:	orr	r5, r0, #256	; 0x100
   163d4:	mov	r6, #0
   163d8:	str	r6, [r4, #20]
   163dc:	and	r0, r7, #8
   163e0:	ldrb	r1, [r4, #28]
   163e4:	and	r1, r1, #239	; 0xef
   163e8:	orr	r0, r1, r0, lsl #1
   163ec:	strb	r0, [r4, #28]
   163f0:	mov	r0, r8
   163f4:	bl	11624 <strlen@plt>
   163f8:	mov	r2, r0
   163fc:	mov	r0, r4
   16400:	mov	r1, r8
   16404:	mov	r3, r5
   16408:	bl	15d38 <__assert_fail@plt+0x45c4>
   1640c:	mov	r5, r0
   16410:	cmp	r0, #16
   16414:	movweq	r5, #8
   16418:	cmp	r5, #0
   1641c:	bne	1643c <__assert_fail@plt+0x4cc8>
   16420:	mov	r0, r4
   16424:	bl	15f38 <__assert_fail@plt+0x47c4>
   16428:	mov	r0, r6
   1642c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16430:	mov	r6, #12
   16434:	mov	r0, r6
   16438:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1643c:	ldr	r0, [r4, #16]
   16440:	bl	13f1c <__assert_fail@plt+0x27a8>
   16444:	str	r6, [r4, #16]
   16448:	mov	r0, r5
   1644c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16450:	push	{r4, r5, r6, r7, fp, lr}
   16454:	add	fp, sp, #16
   16458:	cmp	r0, #17
   1645c:	bcs	164d0 <__assert_fail@plt+0x4d5c>
   16460:	mov	r5, r3
   16464:	mov	r4, r2
   16468:	movw	r1, #22832	; 0x5930
   1646c:	movt	r1, #2
   16470:	ldr	r0, [r1, r0, lsl #2]
   16474:	movw	r1, #22448	; 0x57b0
   16478:	movt	r1, #2
   1647c:	add	r1, r1, r0
   16480:	mov	r0, #0
   16484:	mov	r2, #5
   16488:	bl	114e0 <dcgettext@plt>
   1648c:	mov	r6, r0
   16490:	bl	11624 <strlen@plt>
   16494:	add	r7, r0, #1
   16498:	cmp	r5, #0
   1649c:	beq	164b8 <__assert_fail@plt+0x4d44>
   164a0:	cmp	r7, r5
   164a4:	mov	r2, r7
   164a8:	bhi	164c0 <__assert_fail@plt+0x4d4c>
   164ac:	mov	r0, r4
   164b0:	mov	r1, r6
   164b4:	bl	1148c <memcpy@plt>
   164b8:	mov	r0, r7
   164bc:	pop	{r4, r5, r6, r7, fp, pc}
   164c0:	sub	r2, r5, #1
   164c4:	mov	r0, #0
   164c8:	strb	r0, [r4, r2]
   164cc:	b	164ac <__assert_fail@plt+0x4d38>
   164d0:	bl	11750 <abort@plt>
   164d4:	push	{r4, r5, fp, lr}
   164d8:	add	fp, sp, #8
   164dc:	mov	r4, r0
   164e0:	ldr	r5, [r0]
   164e4:	cmp	r5, #0
   164e8:	beq	16514 <__assert_fail@plt+0x4da0>
   164ec:	movw	r0, #0
   164f0:	movt	r0, #0
   164f4:	movw	r1, #0
   164f8:	movt	r1, #0
   164fc:	orrs	r0, r1, r0
   16500:	beq	1650c <__assert_fail@plt+0x4d98>
   16504:	add	r0, r5, #136	; 0x88
   16508:	bl	11438 <pthread_mutex_destroy@plt>
   1650c:	mov	r0, r5
   16510:	bl	1653c <__assert_fail@plt+0x4dc8>
   16514:	mov	r5, #0
   16518:	str	r5, [r4]
   1651c:	str	r5, [r4, #4]
   16520:	ldr	r0, [r4, #16]
   16524:	bl	13f1c <__assert_fail@plt+0x27a8>
   16528:	str	r5, [r4, #16]
   1652c:	ldr	r0, [r4, #20]
   16530:	bl	13f1c <__assert_fail@plt+0x27a8>
   16534:	str	r5, [r4, #20]
   16538:	pop	{r4, r5, fp, pc}
   1653c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16540:	add	fp, sp, #24
   16544:	mov	r8, r0
   16548:	ldr	r0, [r0]
   1654c:	cmp	r0, #0
   16550:	beq	16588 <__assert_fail@plt+0x4e14>
   16554:	ldr	r0, [r8, #8]
   16558:	cmp	r0, #0
   1655c:	beq	16588 <__assert_fail@plt+0x4e14>
   16560:	mov	r5, #0
   16564:	mov	r6, #0
   16568:	ldr	r0, [r8]
   1656c:	add	r0, r0, r5
   16570:	bl	17360 <__assert_fail@plt+0x5bec>
   16574:	add	r5, r5, #8
   16578:	add	r6, r6, #1
   1657c:	ldr	r0, [r8, #8]
   16580:	cmp	r6, r0
   16584:	bcc	16568 <__assert_fail@plt+0x4df4>
   16588:	ldr	r0, [r8, #12]
   1658c:	bl	13f1c <__assert_fail@plt+0x27a8>
   16590:	ldr	r0, [r8, #8]
   16594:	cmp	r0, #0
   16598:	beq	165fc <__assert_fail@plt+0x4e88>
   1659c:	mov	r5, #0
   165a0:	mov	r6, #8
   165a4:	b	165bc <__assert_fail@plt+0x4e48>
   165a8:	add	r6, r6, #12
   165ac:	add	r5, r5, #1
   165b0:	ldr	r0, [r8, #8]
   165b4:	cmp	r5, r0
   165b8:	bcs	165fc <__assert_fail@plt+0x4e88>
   165bc:	ldr	r0, [r8, #24]
   165c0:	cmp	r0, #0
   165c4:	beq	165d0 <__assert_fail@plt+0x4e5c>
   165c8:	ldr	r0, [r0, r6]
   165cc:	bl	13f1c <__assert_fail@plt+0x27a8>
   165d0:	ldr	r0, [r8, #28]
   165d4:	cmp	r0, #0
   165d8:	beq	165e4 <__assert_fail@plt+0x4e70>
   165dc:	ldr	r0, [r0, r6]
   165e0:	bl	13f1c <__assert_fail@plt+0x27a8>
   165e4:	ldr	r0, [r8, #20]
   165e8:	cmp	r0, #0
   165ec:	beq	165a8 <__assert_fail@plt+0x4e34>
   165f0:	ldr	r0, [r0, r6]
   165f4:	bl	13f1c <__assert_fail@plt+0x27a8>
   165f8:	b	165a8 <__assert_fail@plt+0x4e34>
   165fc:	ldr	r0, [r8, #20]
   16600:	bl	13f1c <__assert_fail@plt+0x27a8>
   16604:	ldr	r0, [r8, #24]
   16608:	bl	13f1c <__assert_fail@plt+0x27a8>
   1660c:	ldr	r0, [r8, #28]
   16610:	bl	13f1c <__assert_fail@plt+0x27a8>
   16614:	ldr	r0, [r8]
   16618:	bl	13f1c <__assert_fail@plt+0x27a8>
   1661c:	ldr	r0, [r8, #32]
   16620:	cmp	r0, #0
   16624:	beq	16688 <__assert_fail@plt+0x4f14>
   16628:	mov	r5, #0
   1662c:	b	1664c <__assert_fail@plt+0x4ed8>
   16630:	ldr	r0, [r7]
   16634:	bl	13f1c <__assert_fail@plt+0x27a8>
   16638:	add	r0, r5, #1
   1663c:	ldr	r1, [r8, #68]	; 0x44
   16640:	cmp	r5, r1
   16644:	mov	r5, r0
   16648:	bcs	16688 <__assert_fail@plt+0x4f14>
   1664c:	ldr	r6, [r8, #32]
   16650:	add	r0, r5, r5, lsl #1
   16654:	ldr	r0, [r6, r0, lsl #2]!
   16658:	add	r7, r6, #8
   1665c:	cmp	r0, #1
   16660:	blt	16630 <__assert_fail@plt+0x4ebc>
   16664:	mov	r4, #0
   16668:	ldr	r0, [r7]
   1666c:	ldr	r0, [r0, r4, lsl #2]
   16670:	bl	17390 <__assert_fail@plt+0x5c1c>
   16674:	add	r4, r4, #1
   16678:	ldr	r0, [r6]
   1667c:	cmp	r4, r0
   16680:	blt	16668 <__assert_fail@plt+0x4ef4>
   16684:	b	16630 <__assert_fail@plt+0x4ebc>
   16688:	ldr	r0, [r8, #32]
   1668c:	bl	13f1c <__assert_fail@plt+0x27a8>
   16690:	ldr	r0, [r8, #60]	; 0x3c
   16694:	movw	r1, #22900	; 0x5974
   16698:	movt	r1, #2
   1669c:	cmp	r0, r1
   166a0:	beq	166a8 <__assert_fail@plt+0x4f34>
   166a4:	bl	13f1c <__assert_fail@plt+0x27a8>
   166a8:	ldr	r0, [r8, #132]	; 0x84
   166ac:	bl	13f1c <__assert_fail@plt+0x27a8>
   166b0:	mov	r0, r8
   166b4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   166b8:	b	13f1c <__assert_fail@plt+0x27a8>
   166bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166c0:	add	fp, sp, #28
   166c4:	sub	sp, sp, #28
   166c8:	mov	r7, #2
   166cc:	ldr	sl, [fp, #8]
   166d0:	cmp	sl, #7
   166d4:	bhi	167a8 <__assert_fail@plt+0x5034>
   166d8:	mov	r6, r3
   166dc:	mov	r9, r2
   166e0:	mov	r4, r1
   166e4:	mov	r5, r0
   166e8:	ldr	r0, [r0]
   166ec:	str	r0, [sp, #24]
   166f0:	tst	sl, #4
   166f4:	bne	1670c <__assert_fail@plt+0x4f98>
   166f8:	mov	r0, r4
   166fc:	bl	11624 <strlen@plt>
   16700:	mov	r7, r0
   16704:	mov	r8, #0
   16708:	b	16714 <__assert_fail@plt+0x4fa0>
   1670c:	ldr	r8, [r6]
   16710:	ldr	r7, [r6, #4]
   16714:	movw	r0, #0
   16718:	movt	r0, #0
   1671c:	movw	r1, #0
   16720:	movt	r1, #0
   16724:	orrs	r0, r1, r0
   16728:	str	r0, [sp, #20]
   1672c:	beq	1673c <__assert_fail@plt+0x4fc8>
   16730:	ldr	r0, [sp, #24]
   16734:	add	r0, r0, #136	; 0x88
   16738:	bl	11474 <pthread_mutex_lock@plt>
   1673c:	ldrb	r0, [r5, #28]
   16740:	tst	r0, #16
   16744:	bne	16758 <__assert_fail@plt+0x4fe4>
   16748:	str	r7, [sp]
   1674c:	stmib	sp, {r7, r9}
   16750:	str	r6, [sp, #12]
   16754:	b	1676c <__assert_fail@plt+0x4ff8>
   16758:	mov	r0, #0
   1675c:	str	r7, [sp]
   16760:	str	r7, [sp, #4]
   16764:	str	r0, [sp, #8]
   16768:	str	r0, [sp, #12]
   1676c:	str	sl, [sp, #16]
   16770:	mov	r0, r5
   16774:	mov	r1, r4
   16778:	mov	r2, r7
   1677c:	mov	r3, r8
   16780:	bl	167b4 <__assert_fail@plt+0x5040>
   16784:	mov	r7, r0
   16788:	ldr	r0, [sp, #20]
   1678c:	cmp	r0, #0
   16790:	beq	167a0 <__assert_fail@plt+0x502c>
   16794:	ldr	r0, [sp, #24]
   16798:	add	r0, r0, #136	; 0x88
   1679c:	bl	113c0 <pthread_mutex_unlock@plt>
   167a0:	cmp	r7, #0
   167a4:	movwne	r7, #1
   167a8:	mov	r0, r7
   167ac:	sub	sp, fp, #28
   167b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167b8:	add	fp, sp, #28
   167bc:	sub	sp, sp, #196	; 0xc4
   167c0:	mov	r6, r3
   167c4:	str	r2, [sp, #52]	; 0x34
   167c8:	str	r1, [sp, #40]	; 0x28
   167cc:	mov	r4, r0
   167d0:	ldr	sl, [r0]
   167d4:	add	r0, sp, #56	; 0x38
   167d8:	mov	r7, #0
   167dc:	mov	r1, #0
   167e0:	mov	r2, #136	; 0x88
   167e4:	bl	1166c <memset@plt>
   167e8:	str	sl, [sp, #140]	; 0x8c
   167ec:	ldr	r1, [r4, #16]
   167f0:	ldr	r0, [fp, #16]
   167f4:	ldr	ip, [fp, #8]
   167f8:	cmp	r1, #0
   167fc:	mov	r5, #0
   16800:	beq	1681c <__assert_fail@plt+0x50a8>
   16804:	ldrb	r2, [r4, #28]
   16808:	and	r2, r2, #9
   1680c:	cmp	r2, #8
   16810:	movne	r1, #0
   16814:	subs	r5, r6, ip
   16818:	movne	r5, r1
   1681c:	str	r6, [sp, #36]	; 0x24
   16820:	ldr	r1, [r4, #8]
   16824:	ldr	r2, [r4, #24]
   16828:	mvn	r3, r2
   1682c:	cmp	r2, r0
   16830:	addcc	r7, r3, r0
   16834:	mov	r8, #1
   16838:	cmp	r1, #0
   1683c:	beq	16d24 <__assert_fail@plt+0x55b0>
   16840:	ldr	r1, [sl, #36]	; 0x24
   16844:	cmp	r1, #0
   16848:	ldrne	r2, [sl, #40]	; 0x28
   1684c:	cmpne	r2, #0
   16850:	beq	16d24 <__assert_fail@plt+0x55b0>
   16854:	ldr	r3, [sl, #44]	; 0x2c
   16858:	cmp	r3, #0
   1685c:	ldrne	r6, [sl, #48]	; 0x30
   16860:	cmpne	r6, #0
   16864:	beq	16d24 <__assert_fail@plt+0x55b0>
   16868:	ldr	r6, [r4, #20]
   1686c:	ldr	r1, [r1, #8]
   16870:	cmp	r1, #0
   16874:	bne	16884 <__assert_fail@plt+0x5110>
   16878:	ldr	r1, [r2, #8]
   1687c:	cmp	r1, #0
   16880:	beq	16e60 <__assert_fail@plt+0x56ec>
   16884:	mov	r9, ip
   16888:	ldr	r0, [fp, #16]
   1688c:	subs	r0, r0, r7
   16890:	str	r0, [sp, #48]	; 0x30
   16894:	mov	r0, #1
   16898:	str	r0, [sp, #32]
   1689c:	bne	168b0 <__assert_fail@plt+0x513c>
   168a0:	ldr	r0, [sl, #76]	; 0x4c
   168a4:	cmp	r0, #0
   168a8:	movwne	r0, #1
   168ac:	str	r0, [sp, #32]
   168b0:	ldr	r0, [sl, #8]
   168b4:	ldr	r1, [r4, #12]
   168b8:	str	sl, [sp, #8]
   168bc:	str	r6, [sp]
   168c0:	ubfx	r1, r1, #22, #1
   168c4:	str	r1, [sp, #4]
   168c8:	add	r3, r0, #1
   168cc:	add	r0, sp, #56	; 0x38
   168d0:	ldr	r1, [sp, #40]	; 0x28
   168d4:	ldr	r2, [sp, #52]	; 0x34
   168d8:	bl	1d0dc <__assert_fail@plt+0xb968>
   168dc:	cmp	r0, #0
   168e0:	bne	16f44 <__assert_fail@plt+0x57d0>
   168e4:	ldr	r1, [fp, #24]
   168e8:	ldr	r0, [fp, #12]
   168ec:	str	r0, [sp, #108]	; 0x6c
   168f0:	str	r0, [sp, #112]	; 0x70
   168f4:	str	r4, [sp, #28]
   168f8:	ldrb	r0, [r4, #28]
   168fc:	lsr	r0, r0, #7
   16900:	strb	r0, [sp, #133]	; 0x85
   16904:	ldr	r0, [sl, #76]	; 0x4c
   16908:	lsl	r2, r0, #1
   1690c:	add	r0, sp, #56	; 0x38
   16910:	bl	1d18c <__assert_fail@plt+0xba18>
   16914:	cmp	r0, #0
   16918:	bne	16f44 <__assert_fail@plt+0x57d0>
   1691c:	ldr	r0, [sp, #48]	; 0x30
   16920:	cmp	r0, #1
   16924:	bhi	16934 <__assert_fail@plt+0x51c0>
   16928:	ldrb	r0, [sl, #88]	; 0x58
   1692c:	tst	r0, #2
   16930:	beq	1695c <__assert_fail@plt+0x51e8>
   16934:	mov	r8, #12
   16938:	ldr	r0, [sp, #92]	; 0x5c
   1693c:	cmn	r0, #-1073741822	; 0xc0000002
   16940:	bhi	16d04 <__assert_fail@plt+0x5590>
   16944:	mov	r1, #4
   16948:	add	r0, r1, r0, lsl #2
   1694c:	bl	23ed0 <__assert_fail@plt+0x1275c>
   16950:	str	r0, [sp, #156]	; 0x9c
   16954:	cmp	r0, #0
   16958:	beq	16d04 <__assert_fail@plt+0x5590>
   1695c:	str	r7, [sp, #12]
   16960:	ldr	r7, [sp, #36]	; 0x24
   16964:	str	r7, [fp, #-32]	; 0xffffffe0
   16968:	mov	r0, #4
   1696c:	ldr	r1, [fp, #24]
   16970:	tst	r1, #1
   16974:	mov	r1, #4
   16978:	movweq	r1, #6
   1697c:	str	r1, [sp, #116]	; 0x74
   16980:	cmp	r9, r7
   16984:	mov	r3, #1
   16988:	mvnlt	r3, #0
   1698c:	mov	r4, r9
   16990:	movlt	r4, r7
   16994:	mov	r1, sl
   16998:	mov	sl, r7
   1699c:	movlt	sl, r9
   169a0:	str	r1, [sp, #44]	; 0x2c
   169a4:	ldr	ip, [r1, #92]	; 0x5c
   169a8:	cmp	r5, #0
   169ac:	beq	169f4 <__assert_fail@plt+0x5280>
   169b0:	cmp	ip, #1
   169b4:	ldr	r2, [sp, #52]	; 0x34
   169b8:	beq	169d8 <__assert_fail@plt+0x5264>
   169bc:	ldr	r0, [sp, #28]
   169c0:	ldr	r0, [r0, #12]
   169c4:	and	r0, r0, #4194304	; 0x400000
   169c8:	orr	r0, r6, r0
   169cc:	clz	r0, r0
   169d0:	lsr	r0, r0, #5
   169d4:	lsl	r0, r0, #2
   169d8:	cmp	r6, #0
   169dc:	mov	r1, r6
   169e0:	movwne	r1, #1
   169e4:	cmp	r9, r7
   169e8:	orrge	r1, r1, #2
   169ec:	orr	r0, r1, r0
   169f0:	b	169fc <__assert_fail@plt+0x5288>
   169f4:	mov	r0, #8
   169f8:	ldr	r2, [sp, #52]	; 0x34
   169fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16a00:	cmp	r1, sl
   16a04:	cmpge	r4, r1
   16a08:	blt	16cfc <__assert_fail@plt+0x5588>
   16a0c:	sub	r1, fp, #32
   16a10:	cmp	r9, r7
   16a14:	movwlt	r1, #0
   16a18:	str	r1, [sp, #24]
   16a1c:	sub	lr, r0, #4
   16a20:	add	r9, sp, #56	; 0x38
   16a24:	str	ip, [sp, #36]	; 0x24
   16a28:	ldr	r7, [sp, #40]	; 0x28
   16a2c:	str	r3, [sp, #20]
   16a30:	str	lr, [sp, #16]
   16a34:	cmp	lr, #4
   16a38:	bhi	16ae8 <__assert_fail@plt+0x5374>
   16a3c:	add	r0, pc, #0
   16a40:	ldr	pc, [r0, lr, lsl #2]
   16a44:	andeq	r6, r1, r8, asr sl
   16a48:	andeq	r6, r1, r8, asr sl
   16a4c:	andeq	r6, r1, r8, lsr #22
   16a50:	andeq	r6, r1, r8, asr fp
   16a54:	muleq	r1, r4, fp
   16a58:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16a5c:	cmp	r0, sl
   16a60:	blt	16cfc <__assert_fail@plt+0x5588>
   16a64:	mov	r1, #0
   16a68:	cmp	r0, r2
   16a6c:	ldrblt	r1, [r7, r0]
   16a70:	cmp	r6, #0
   16a74:	ldrbne	r1, [r6, r1]
   16a78:	ldrb	r1, [r5, r1]
   16a7c:	cmp	r1, #0
   16a80:	bne	16b94 <__assert_fail@plt+0x5420>
   16a84:	sub	r1, r0, #1
   16a88:	str	r1, [fp, #-32]	; 0xffffffe0
   16a8c:	cmp	r0, sl
   16a90:	mov	r0, r1
   16a94:	bgt	16a64 <__assert_fail@plt+0x52f0>
   16a98:	b	16cfc <__assert_fail@plt+0x5588>
   16a9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16aa0:	add	r0, r0, r3
   16aa4:	str	r0, [fp, #-32]	; 0xffffffe0
   16aa8:	cmp	r0, sl
   16aac:	blt	16cfc <__assert_fail@plt+0x5588>
   16ab0:	cmp	r0, r4
   16ab4:	ble	16ae8 <__assert_fail@plt+0x5374>
   16ab8:	b	16cfc <__assert_fail@plt+0x5588>
   16abc:	mov	r0, r9
   16ac0:	ldr	r2, [fp, #24]
   16ac4:	bl	1d214 <__assert_fail@plt+0xbaa0>
   16ac8:	cmp	r0, #0
   16acc:	bne	16f4c <__assert_fail@plt+0x57d8>
   16ad0:	ldr	r0, [sp, #80]	; 0x50
   16ad4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16ad8:	sub	r0, r1, r0
   16adc:	add	r9, sp, #56	; 0x38
   16ae0:	ldr	r3, [sp, #20]
   16ae4:	b	16b00 <__assert_fail@plt+0x538c>
   16ae8:	ldr	r0, [sp, #80]	; 0x50
   16aec:	ldr	r2, [sp, #88]	; 0x58
   16af0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16af4:	sub	r0, r1, r0
   16af8:	cmp	r0, r2
   16afc:	bcs	16abc <__assert_fail@plt+0x5348>
   16b00:	mov	r1, #0
   16b04:	ldr	r2, [sp, #84]	; 0x54
   16b08:	cmp	r0, r2
   16b0c:	bcs	16b18 <__assert_fail@plt+0x53a4>
   16b10:	ldr	r1, [sp, #60]	; 0x3c
   16b14:	ldrb	r1, [r1, r0]
   16b18:	ldrb	r0, [r5, r1]
   16b1c:	cmp	r0, #0
   16b20:	beq	16a9c <__assert_fail@plt+0x5328>
   16b24:	b	16b94 <__assert_fail@plt+0x5420>
   16b28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16b2c:	cmp	r0, r4
   16b30:	bge	16b88 <__assert_fail@plt+0x5414>
   16b34:	ldrb	r1, [r7, r0]
   16b38:	ldrb	r1, [r5, r1]
   16b3c:	cmp	r1, #0
   16b40:	bne	16b88 <__assert_fail@plt+0x5414>
   16b44:	add	r0, r0, #1
   16b48:	str	r0, [fp, #-32]	; 0xffffffe0
   16b4c:	cmp	r0, r4
   16b50:	blt	16b34 <__assert_fail@plt+0x53c0>
   16b54:	b	16b88 <__assert_fail@plt+0x5414>
   16b58:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16b5c:	cmp	r0, r4
   16b60:	bge	16b88 <__assert_fail@plt+0x5414>
   16b64:	ldrb	r1, [r7, r0]
   16b68:	ldrb	r1, [r6, r1]
   16b6c:	ldrb	r1, [r5, r1]
   16b70:	cmp	r1, #0
   16b74:	bne	16b88 <__assert_fail@plt+0x5414>
   16b78:	add	r0, r0, #1
   16b7c:	str	r0, [fp, #-32]	; 0xffffffe0
   16b80:	cmp	r0, r4
   16b84:	blt	16b64 <__assert_fail@plt+0x53f0>
   16b88:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16b8c:	cmp	r1, r4
   16b90:	beq	16cdc <__assert_fail@plt+0x5568>
   16b94:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16b98:	mov	r0, r9
   16b9c:	ldr	r2, [fp, #24]
   16ba0:	bl	1d214 <__assert_fail@plt+0xbaa0>
   16ba4:	cmp	r0, #0
   16ba8:	bne	16f4c <__assert_fail@plt+0x57d8>
   16bac:	ldr	r0, [sp, #36]	; 0x24
   16bb0:	cmp	r0, #1
   16bb4:	add	r9, sp, #56	; 0x38
   16bb8:	ldrne	r0, [sp, #84]	; 0x54
   16bbc:	cmpne	r0, #0
   16bc0:	bne	16cc8 <__assert_fail@plt+0x5554>
   16bc4:	mov	r0, #0
   16bc8:	str	r0, [sp, #164]	; 0xa4
   16bcc:	str	r0, [sp, #176]	; 0xb0
   16bd0:	str	r0, [sp, #160]	; 0xa0
   16bd4:	mov	r0, r9
   16bd8:	ldr	r1, [sp, #32]
   16bdc:	ldr	r2, [sp, #24]
   16be0:	bl	1d84c <__assert_fail@plt+0xc0d8>
   16be4:	cmn	r0, #1
   16be8:	beq	16c94 <__assert_fail@plt+0x5520>
   16bec:	mov	r2, r0
   16bf0:	cmn	r0, #2
   16bf4:	beq	16f54 <__assert_fail@plt+0x57e0>
   16bf8:	str	r2, [sp, #148]	; 0x94
   16bfc:	ldr	r9, [sp, #48]	; 0x30
   16c00:	cmp	r9, #2
   16c04:	bcc	16c18 <__assert_fail@plt+0x54a4>
   16c08:	ldr	r0, [sp, #28]
   16c0c:	ldrb	r0, [r0, #28]
   16c10:	ands	r0, r0, #16
   16c14:	beq	16c28 <__assert_fail@plt+0x54b4>
   16c18:	ldr	r0, [sp, #44]	; 0x2c
   16c1c:	ldr	r0, [r0, #76]	; 0x4c
   16c20:	cmp	r0, #0
   16c24:	beq	16c3c <__assert_fail@plt+0x54c8>
   16c28:	ldr	r0, [sp, #156]	; 0x9c
   16c2c:	ldr	r1, [r0, r2, lsl #2]
   16c30:	add	r0, sp, #56	; 0x38
   16c34:	bl	1dbe8 <__assert_fail@plt+0xc474>
   16c38:	str	r0, [sp, #152]	; 0x98
   16c3c:	cmp	r9, #2
   16c40:	bcc	16c64 <__assert_fail@plt+0x54f0>
   16c44:	ldr	r0, [sp, #28]
   16c48:	ldrb	r0, [r0, #28]
   16c4c:	ands	r0, r0, #16
   16c50:	bne	16c64 <__assert_fail@plt+0x54f0>
   16c54:	ldr	r0, [sp, #44]	; 0x2c
   16c58:	ldrb	r0, [r0, #88]	; 0x58
   16c5c:	tst	r0, #1
   16c60:	bne	16c74 <__assert_fail@plt+0x5500>
   16c64:	ldr	r0, [sp, #44]	; 0x2c
   16c68:	ldr	r0, [r0, #76]	; 0x4c
   16c6c:	cmp	r0, #0
   16c70:	beq	16d30 <__assert_fail@plt+0x55bc>
   16c74:	add	r0, sp, #56	; 0x38
   16c78:	bl	1dc5c <__assert_fail@plt+0xc4e8>
   16c7c:	cmp	r0, #0
   16c80:	beq	16d30 <__assert_fail@plt+0x55bc>
   16c84:	mov	r8, r0
   16c88:	cmp	r0, #1
   16c8c:	add	r9, sp, #56	; 0x38
   16c90:	bne	16d00 <__assert_fail@plt+0x558c>
   16c94:	mov	r0, r9
   16c98:	bl	1de80 <__assert_fail@plt+0xc70c>
   16c9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16ca0:	ldr	r3, [sp, #20]
   16ca4:	add	r0, r0, r3
   16ca8:	str	r0, [fp, #-32]	; 0xffffffe0
   16cac:	cmp	r0, sl
   16cb0:	blt	16cfc <__assert_fail@plt+0x5588>
   16cb4:	cmp	r4, r0
   16cb8:	ldr	r2, [sp, #52]	; 0x34
   16cbc:	ldr	lr, [sp, #16]
   16cc0:	bge	16a34 <__assert_fail@plt+0x52c0>
   16cc4:	b	16cfc <__assert_fail@plt+0x5588>
   16cc8:	ldr	r0, [sp, #64]	; 0x40
   16ccc:	ldr	r0, [r0]
   16cd0:	cmn	r0, #1
   16cd4:	bne	16bc4 <__assert_fail@plt+0x5450>
   16cd8:	b	16c9c <__assert_fail@plt+0x5528>
   16cdc:	mov	r0, #0
   16ce0:	cmp	r1, r2
   16ce4:	ldrblt	r0, [r7, r1]
   16ce8:	cmp	r6, #0
   16cec:	ldrbne	r0, [r6, r0]
   16cf0:	ldrb	r0, [r5, r0]
   16cf4:	cmp	r0, #0
   16cf8:	bne	16b94 <__assert_fail@plt+0x5420>
   16cfc:	mov	r8, #1
   16d00:	ldr	sl, [sp, #44]	; 0x2c
   16d04:	ldr	r0, [sp, #156]	; 0x9c
   16d08:	bl	13f1c <__assert_fail@plt+0x27a8>
   16d0c:	ldr	r0, [sl, #76]	; 0x4c
   16d10:	cmp	r0, #0
   16d14:	addne	r0, sp, #56	; 0x38
   16d18:	blne	1e174 <__assert_fail@plt+0xca00>
   16d1c:	add	r0, sp, #56	; 0x38
   16d20:	bl	17784 <__assert_fail@plt+0x6010>
   16d24:	mov	r0, r8
   16d28:	sub	sp, fp, #28
   16d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d30:	ldr	r5, [sp, #48]	; 0x30
   16d34:	cmp	r5, #0
   16d38:	beq	16f28 <__assert_fail@plt+0x57b4>
   16d3c:	cmp	r5, #1
   16d40:	ldr	sl, [sp, #44]	; 0x2c
   16d44:	ldr	r4, [sp, #12]
   16d48:	ldr	r6, [fp, #16]
   16d4c:	mov	r9, r6
   16d50:	ldr	r6, [fp, #20]
   16d54:	beq	16d70 <__assert_fail@plt+0x55fc>
   16d58:	mvn	r0, r4
   16d5c:	add	r0, r0, r9
   16d60:	lsl	r2, r0, #3
   16d64:	add	r0, r6, #8
   16d68:	mov	r1, #255	; 0xff
   16d6c:	bl	1166c <memset@plt>
   16d70:	mov	r0, #0
   16d74:	ldr	r1, [sp, #148]	; 0x94
   16d78:	stm	r6, {r0, r1}
   16d7c:	cmp	r5, #2
   16d80:	ldr	r0, [sp, #28]
   16d84:	bcc	16dd0 <__assert_fail@plt+0x565c>
   16d88:	ldrb	r1, [r0, #28]
   16d8c:	ands	r1, r1, #16
   16d90:	bne	16dd0 <__assert_fail@plt+0x565c>
   16d94:	ldrb	r1, [sl, #88]	; 0x58
   16d98:	mov	r2, #0
   16d9c:	tst	r1, #1
   16da0:	beq	16db4 <__assert_fail@plt+0x5640>
   16da4:	ldr	r1, [sl, #76]	; 0x4c
   16da8:	mov	r2, #0
   16dac:	cmp	r1, #0
   16db0:	movwgt	r2, #1
   16db4:	str	r2, [sp]
   16db8:	add	r1, sp, #56	; 0x38
   16dbc:	ldr	r2, [sp, #48]	; 0x30
   16dc0:	mov	r3, r6
   16dc4:	bl	1df30 <__assert_fail@plt+0xc7bc>
   16dc8:	cmp	r0, #0
   16dcc:	bne	16f44 <__assert_fail@plt+0x57d0>
   16dd0:	add	r0, r6, #4
   16dd4:	add	r1, sp, #56	; 0x38
   16dd8:	add	lr, r1, #32
   16ddc:	ldrb	r2, [sp, #132]	; 0x84
   16de0:	mov	r3, r9
   16de4:	ldr	r6, [sp, #48]	; 0x30
   16de8:	b	16e10 <__assert_fail@plt+0x569c>
   16dec:	ldmda	r0, {r1, r7}
   16df0:	ldr	r5, [fp, #-32]	; 0xffffffe0
   16df4:	add	r1, r1, r5
   16df8:	add	r7, r7, r5
   16dfc:	stmda	r0, {r1, r7}
   16e00:	add	r0, r0, #8
   16e04:	sub	r3, r3, #1
   16e08:	cmp	r4, r3
   16e0c:	beq	16e9c <__assert_fail@plt+0x5728>
   16e10:	ldr	r7, [r0, #-4]
   16e14:	cmn	r7, #1
   16e18:	beq	16e00 <__assert_fail@plt+0x568c>
   16e1c:	cmp	r2, #0
   16e20:	beq	16dec <__assert_fail@plt+0x5678>
   16e24:	ldr	ip, [sp, #68]	; 0x44
   16e28:	ldr	r5, [sp, #84]	; 0x54
   16e2c:	cmp	r7, r5
   16e30:	mov	r1, lr
   16e34:	addne	r1, ip, r7, lsl #2
   16e38:	ldr	r1, [r1]
   16e3c:	str	r1, [r0, #-4]
   16e40:	ldr	r1, [r0]
   16e44:	cmp	r1, r5
   16e48:	mov	r4, lr
   16e4c:	addne	r4, ip, r1, lsl #2
   16e50:	ldr	r1, [r4]
   16e54:	ldr	r4, [sp, #12]
   16e58:	str	r1, [r0]
   16e5c:	b	16dec <__assert_fail@plt+0x5678>
   16e60:	ldr	r1, [r3, #8]
   16e64:	cmp	r1, #0
   16e68:	beq	16e78 <__assert_fail@plt+0x5704>
   16e6c:	ldrsb	r1, [r4, #28]
   16e70:	cmp	r1, #0
   16e74:	bmi	16884 <__assert_fail@plt+0x5110>
   16e78:	mov	r9, #0
   16e7c:	ldr	r0, [sp, #36]	; 0x24
   16e80:	cmp	r0, #0
   16e84:	beq	16f38 <__assert_fail@plt+0x57c4>
   16e88:	cmp	ip, #0
   16e8c:	mov	r0, #0
   16e90:	str	r0, [sp, #36]	; 0x24
   16e94:	bne	16d24 <__assert_fail@plt+0x55b0>
   16e98:	b	16888 <__assert_fail@plt+0x5114>
   16e9c:	cmp	r4, #0
   16ea0:	ble	16eb8 <__assert_fail@plt+0x5744>
   16ea4:	ldr	r0, [fp, #20]
   16ea8:	add	r0, r0, r6, lsl #3
   16eac:	lsl	r2, r4, #3
   16eb0:	mov	r1, #255	; 0xff
   16eb4:	bl	1166c <memset@plt>
   16eb8:	ldr	r0, [sl, #132]	; 0x84
   16ebc:	mov	r8, #0
   16ec0:	cmp	r0, #0
   16ec4:	beq	16d04 <__assert_fail@plt+0x5590>
   16ec8:	ldr	r1, [sp, #48]	; 0x30
   16ecc:	cmp	r1, #2
   16ed0:	bcc	16d04 <__assert_fail@plt+0x5590>
   16ed4:	mov	r6, r9
   16ed8:	mvn	r1, r4
   16edc:	add	r1, r1, r9
   16ee0:	mov	r2, #0
   16ee4:	ldr	r6, [fp, #20]
   16ee8:	b	16ef8 <__assert_fail@plt+0x5784>
   16eec:	add	r2, r2, #1
   16ef0:	cmp	r1, r2
   16ef4:	beq	16f30 <__assert_fail@plt+0x57bc>
   16ef8:	ldr	r3, [r0, r2, lsl #2]
   16efc:	cmp	r2, r3
   16f00:	beq	16eec <__assert_fail@plt+0x5778>
   16f04:	add	r7, r6, r2, lsl #3
   16f08:	add	r3, r6, r3, lsl #3
   16f0c:	ldr	r3, [r3, #8]
   16f10:	str	r3, [r7, #8]
   16f14:	ldr	r3, [r0, r2, lsl #2]
   16f18:	add	r3, r6, r3, lsl #3
   16f1c:	ldr	r3, [r3, #12]
   16f20:	str	r3, [r7, #12]
   16f24:	b	16eec <__assert_fail@plt+0x5778>
   16f28:	mov	r8, #0
   16f2c:	b	16d00 <__assert_fail@plt+0x558c>
   16f30:	mov	r8, #0
   16f34:	b	16d04 <__assert_fail@plt+0x5590>
   16f38:	mov	r0, #0
   16f3c:	str	r0, [sp, #36]	; 0x24
   16f40:	b	16888 <__assert_fail@plt+0x5114>
   16f44:	mov	r8, r0
   16f48:	b	16d04 <__assert_fail@plt+0x5590>
   16f4c:	mov	r8, r0
   16f50:	b	16d00 <__assert_fail@plt+0x558c>
   16f54:	mov	r8, #12
   16f58:	b	16d00 <__assert_fail@plt+0x558c>
   16f5c:	push	{fp, lr}
   16f60:	mov	fp, sp
   16f64:	sub	sp, sp, #16
   16f68:	mov	ip, #1
   16f6c:	str	ip, [sp, #12]
   16f70:	str	r2, [sp, #4]
   16f74:	mov	ip, #0
   16f78:	str	ip, [sp]
   16f7c:	ldr	ip, [fp, #8]
   16f80:	str	ip, [sp, #8]
   16f84:	bl	16f90 <__assert_fail@plt+0x581c>
   16f88:	mov	sp, fp
   16f8c:	pop	{fp, pc}
   16f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f94:	add	fp, sp, #28
   16f98:	sub	sp, sp, #36	; 0x24
   16f9c:	mvn	r7, #0
   16fa0:	cmp	r3, #0
   16fa4:	bmi	170e8 <__assert_fail@plt+0x5974>
   16fa8:	mov	r9, r3
   16fac:	mov	r6, r2
   16fb0:	cmp	r3, r2
   16fb4:	bgt	170e8 <__assert_fail@plt+0x5974>
   16fb8:	mov	r5, r0
   16fbc:	str	r1, [sp, #28]
   16fc0:	ldr	r0, [fp, #8]
   16fc4:	add	r0, r0, r9
   16fc8:	ldr	r4, [r5]
   16fcc:	cmp	r0, r6
   16fd0:	mov	r8, r6
   16fd4:	bicle	r8, r0, r0, asr #31
   16fd8:	movw	r0, #0
   16fdc:	movt	r0, #0
   16fe0:	movw	r1, #0
   16fe4:	movt	r1, #0
   16fe8:	orrs	r0, r1, r0
   16fec:	str	r0, [sp, #32]
   16ff0:	beq	16ffc <__assert_fail@plt+0x5888>
   16ff4:	add	r0, r4, #136	; 0x88
   16ff8:	bl	11474 <pthread_mutex_lock@plt>
   16ffc:	str	r4, [sp, #20]
   17000:	ldr	r4, [fp, #16]
   17004:	ldrb	r0, [r5, #28]
   17008:	ubfx	r1, r0, #5, #2
   1700c:	str	r1, [sp, #24]
   17010:	cmp	r8, r9
   17014:	ble	17030 <__assert_fail@plt+0x58bc>
   17018:	tst	r0, #8
   1701c:	bne	17030 <__assert_fail@plt+0x58bc>
   17020:	ldr	r0, [r5, #16]
   17024:	cmp	r0, #0
   17028:	movne	r0, r5
   1702c:	blne	15f38 <__assert_fail@plt+0x47c4>
   17030:	mov	r7, #1
   17034:	mov	sl, #0
   17038:	cmp	r4, #0
   1703c:	beq	17074 <__assert_fail@plt+0x5900>
   17040:	ldrb	r0, [r5, #28]
   17044:	ands	r1, r0, #16
   17048:	bne	17074 <__assert_fail@plt+0x5900>
   1704c:	and	r0, r0, #6
   17050:	cmp	r0, #4
   17054:	bne	17068 <__assert_fail@plt+0x58f4>
   17058:	ldr	r7, [r4]
   1705c:	ldr	r0, [r5, #24]
   17060:	cmp	r7, r0
   17064:	bls	1715c <__assert_fail@plt+0x59e8>
   17068:	ldr	r0, [r5, #24]
   1706c:	add	r7, r0, #1
   17070:	mov	sl, r4
   17074:	lsl	r0, r7, #3
   17078:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1707c:	cmp	r0, #0
   17080:	beq	17154 <__assert_fail@plt+0x59e0>
   17084:	mov	r4, r0
   17088:	ldr	r0, [fp, #12]
   1708c:	str	r8, [sp]
   17090:	stmib	sp, {r0, r7}
   17094:	str	r4, [sp, #12]
   17098:	ldr	r0, [sp, #24]
   1709c:	str	r0, [sp, #16]
   170a0:	mov	r0, r5
   170a4:	ldr	r1, [sp, #28]
   170a8:	mov	r2, r6
   170ac:	mov	r3, r9
   170b0:	bl	167b4 <__assert_fail@plt+0x5040>
   170b4:	cmp	r0, #0
   170b8:	beq	170f4 <__assert_fail@plt+0x5980>
   170bc:	mvn	r7, #1
   170c0:	cmp	r0, #1
   170c4:	mvneq	r7, #0
   170c8:	mov	r0, r4
   170cc:	bl	13f1c <__assert_fail@plt+0x27a8>
   170d0:	ldr	r0, [sp, #32]
   170d4:	cmp	r0, #0
   170d8:	beq	170e8 <__assert_fail@plt+0x5974>
   170dc:	ldr	r0, [sp, #20]
   170e0:	add	r0, r0, #136	; 0x88
   170e4:	bl	113c0 <pthread_mutex_unlock@plt>
   170e8:	mov	r0, r7
   170ec:	sub	sp, fp, #28
   170f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170f4:	cmp	sl, #0
   170f8:	beq	1712c <__assert_fail@plt+0x59b8>
   170fc:	ldrb	r0, [r5, #28]
   17100:	ubfx	r3, r0, #1, #2
   17104:	mov	r0, sl
   17108:	mov	r1, r4
   1710c:	mov	r2, r7
   17110:	bl	1cf78 <__assert_fail@plt+0xb804>
   17114:	ldrb	r1, [r5, #28]
   17118:	and	r1, r1, #249	; 0xf9
   1711c:	bfi	r1, r0, #1, #2
   17120:	strb	r1, [r5, #28]
   17124:	tst	r0, #3
   17128:	beq	1714c <__assert_fail@plt+0x59d8>
   1712c:	ldr	r0, [fp, #20]
   17130:	cmp	r0, #0
   17134:	beq	17144 <__assert_fail@plt+0x59d0>
   17138:	ldr	r0, [r4, #4]
   1713c:	sub	r7, r0, r9
   17140:	b	170c8 <__assert_fail@plt+0x5954>
   17144:	ldr	r7, [r4]
   17148:	b	170c8 <__assert_fail@plt+0x5954>
   1714c:	mvn	r7, #1
   17150:	b	170c8 <__assert_fail@plt+0x5954>
   17154:	mvn	r7, #1
   17158:	b	170d0 <__assert_fail@plt+0x595c>
   1715c:	cmp	r7, #1
   17160:	bge	17070 <__assert_fail@plt+0x58fc>
   17164:	mov	r7, #1
   17168:	mov	sl, #0
   1716c:	b	17074 <__assert_fail@plt+0x5900>
   17170:	push	{fp, lr}
   17174:	mov	fp, sp
   17178:	sub	sp, sp, #16
   1717c:	mov	ip, #0
   17180:	str	ip, [sp, #12]
   17184:	str	r2, [sp, #4]
   17188:	ldr	ip, [fp, #12]
   1718c:	str	ip, [sp, #8]
   17190:	ldr	ip, [fp, #8]
   17194:	str	ip, [sp]
   17198:	bl	16f90 <__assert_fail@plt+0x581c>
   1719c:	mov	sp, fp
   171a0:	pop	{fp, pc}
   171a4:	push	{fp, lr}
   171a8:	mov	fp, sp
   171ac:	sub	sp, sp, #24
   171b0:	mov	ip, #1
   171b4:	str	ip, [sp, #20]
   171b8:	mov	ip, #0
   171bc:	str	ip, [sp, #8]
   171c0:	ldr	ip, [fp, #20]
   171c4:	str	ip, [sp, #16]
   171c8:	ldr	ip, [fp, #16]
   171cc:	str	ip, [sp, #12]
   171d0:	ldr	ip, [fp, #12]
   171d4:	str	ip, [sp, #4]
   171d8:	ldr	ip, [fp, #8]
   171dc:	str	ip, [sp]
   171e0:	bl	171ec <__assert_fail@plt+0x5a78>
   171e4:	mov	sp, fp
   171e8:	pop	{fp, pc}
   171ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171f0:	add	fp, sp, #28
   171f4:	sub	sp, sp, #20
   171f8:	mov	r6, r2
   171fc:	mov	r8, r1
   17200:	mov	r1, r0
   17204:	ldr	r4, [fp, #8]
   17208:	orr	r0, r4, r2
   1720c:	ldr	r2, [fp, #24]
   17210:	orrs	r0, r0, r2
   17214:	bmi	172c8 <__assert_fail@plt+0x5b54>
   17218:	adds	sl, r6, r4
   1721c:	bvs	172c8 <__assert_fail@plt+0x5b54>
   17220:	mov	r5, #0
   17224:	cmp	r4, #1
   17228:	blt	1727c <__assert_fail@plt+0x5b08>
   1722c:	mov	r9, r3
   17230:	cmp	r6, #1
   17234:	blt	17284 <__assert_fail@plt+0x5b10>
   17238:	mov	r0, sl
   1723c:	mov	r5, r1
   17240:	bl	23ed0 <__assert_fail@plt+0x1275c>
   17244:	cmp	r0, #0
   17248:	beq	172c8 <__assert_fail@plt+0x5b54>
   1724c:	mov	r7, r0
   17250:	mov	r1, r8
   17254:	mov	r2, r6
   17258:	bl	1148c <memcpy@plt>
   1725c:	add	r0, r7, r6
   17260:	mov	r1, r9
   17264:	mov	r2, r4
   17268:	bl	1148c <memcpy@plt>
   1726c:	ldr	r2, [fp, #24]
   17270:	mov	r1, r5
   17274:	mov	r5, r7
   17278:	b	17288 <__assert_fail@plt+0x5b14>
   1727c:	mov	r7, r8
   17280:	b	17288 <__assert_fail@plt+0x5b14>
   17284:	mov	r7, r9
   17288:	ldr	r0, [fp, #28]
   1728c:	add	r6, fp, #12
   17290:	ldm	r6, {r3, r4, r6}
   17294:	str	r4, [sp]
   17298:	stmib	sp, {r2, r6}
   1729c:	str	r0, [sp, #12]
   172a0:	mov	r0, r1
   172a4:	mov	r1, r7
   172a8:	mov	r2, sl
   172ac:	bl	16f90 <__assert_fail@plt+0x581c>
   172b0:	mov	r4, r0
   172b4:	mov	r0, r5
   172b8:	bl	13f1c <__assert_fail@plt+0x27a8>
   172bc:	mov	r0, r4
   172c0:	sub	sp, fp, #28
   172c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172c8:	mvn	r0, #1
   172cc:	sub	sp, fp, #28
   172d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172d4:	push	{fp, lr}
   172d8:	mov	fp, sp
   172dc:	sub	sp, sp, #24
   172e0:	mov	ip, #0
   172e4:	str	ip, [sp, #20]
   172e8:	ldr	ip, [fp, #24]
   172ec:	str	ip, [sp, #16]
   172f0:	ldr	ip, [fp, #20]
   172f4:	str	ip, [sp, #12]
   172f8:	ldr	ip, [fp, #16]
   172fc:	str	ip, [sp, #8]
   17300:	ldr	ip, [fp, #12]
   17304:	str	ip, [sp, #4]
   17308:	ldr	ip, [fp, #8]
   1730c:	str	ip, [sp]
   17310:	bl	171ec <__assert_fail@plt+0x5a78>
   17314:	mov	sp, fp
   17318:	pop	{fp, pc}
   1731c:	push	{fp, lr}
   17320:	mov	fp, sp
   17324:	ldrb	ip, [r0, #28]
   17328:	bic	ip, ip, #6
   1732c:	cmp	r2, #0
   17330:	beq	17348 <__assert_fail@plt+0x5bd4>
   17334:	ldr	lr, [fp, #8]
   17338:	orr	ip, ip, #2
   1733c:	strb	ip, [r0, #28]
   17340:	stm	r1, {r2, r3, lr}
   17344:	pop	{fp, pc}
   17348:	strb	ip, [r0, #28]
   1734c:	mov	r0, #0
   17350:	str	r0, [r1]
   17354:	str	r0, [r1, #4]
   17358:	str	r0, [r1, #8]
   1735c:	pop	{fp, pc}
   17360:	ldr	r1, [r0, #4]
   17364:	movw	r2, #255	; 0xff
   17368:	movt	r2, #4
   1736c:	and	r1, r1, r2
   17370:	cmp	r1, #6
   17374:	bne	17380 <__assert_fail@plt+0x5c0c>
   17378:	ldr	r0, [r0]
   1737c:	b	173f0 <__assert_fail@plt+0x5c7c>
   17380:	cmp	r1, #3
   17384:	bxne	lr
   17388:	ldr	r0, [r0]
   1738c:	b	13f1c <__assert_fail@plt+0x27a8>
   17390:	push	{r4, sl, fp, lr}
   17394:	add	fp, sp, #8
   17398:	mov	r4, r0
   1739c:	ldr	r0, [r0, #24]
   173a0:	bl	13f1c <__assert_fail@plt+0x27a8>
   173a4:	ldr	r0, [r4, #36]	; 0x24
   173a8:	bl	13f1c <__assert_fail@plt+0x27a8>
   173ac:	ldr	r0, [r4, #40]	; 0x28
   173b0:	add	r1, r4, #4
   173b4:	cmp	r0, r1
   173b8:	beq	173cc <__assert_fail@plt+0x5c58>
   173bc:	ldr	r0, [r0, #8]
   173c0:	bl	13f1c <__assert_fail@plt+0x27a8>
   173c4:	ldr	r0, [r4, #40]	; 0x28
   173c8:	bl	13f1c <__assert_fail@plt+0x27a8>
   173cc:	ldr	r0, [r4, #12]
   173d0:	bl	13f1c <__assert_fail@plt+0x27a8>
   173d4:	ldr	r0, [r4, #48]	; 0x30
   173d8:	bl	13f1c <__assert_fail@plt+0x27a8>
   173dc:	ldr	r0, [r4, #44]	; 0x2c
   173e0:	bl	13f1c <__assert_fail@plt+0x27a8>
   173e4:	mov	r0, r4
   173e8:	pop	{r4, sl, fp, lr}
   173ec:	b	13f1c <__assert_fail@plt+0x27a8>
   173f0:	push	{r4, sl, fp, lr}
   173f4:	add	fp, sp, #8
   173f8:	mov	r4, r0
   173fc:	ldr	r0, [r0]
   17400:	bl	13f1c <__assert_fail@plt+0x27a8>
   17404:	ldr	r0, [r4, #4]
   17408:	bl	13f1c <__assert_fail@plt+0x27a8>
   1740c:	ldr	r0, [r4, #8]
   17410:	bl	13f1c <__assert_fail@plt+0x27a8>
   17414:	ldr	r0, [r4, #12]
   17418:	bl	13f1c <__assert_fail@plt+0x27a8>
   1741c:	mov	r0, r4
   17420:	pop	{r4, sl, fp, lr}
   17424:	b	13f1c <__assert_fail@plt+0x27a8>
   17428:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1742c:	add	fp, sp, #24
   17430:	mov	r5, r1
   17434:	mov	r9, r0
   17438:	mov	r1, #0
   1743c:	mov	r2, #160	; 0xa0
   17440:	bl	1166c <memset@plt>
   17444:	mov	r0, #31
   17448:	str	r0, [r9, #64]	; 0x40
   1744c:	movw	r0, #43689	; 0xaaa9
   17450:	movt	r0, #2730	; 0xaaa
   17454:	cmp	r5, r0
   17458:	bhi	175dc <__assert_fail@plt+0x5e68>
   1745c:	add	r0, r5, #1
   17460:	str	r0, [r9, #4]
   17464:	lsl	r0, r0, #3
   17468:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1746c:	str	r0, [r9]
   17470:	mov	r0, #1
   17474:	mov	r6, r0
   17478:	lsl	r0, r0, #1
   1747c:	cmp	r6, r5
   17480:	bls	17474 <__assert_fail@plt+0x5d00>
   17484:	mov	r0, #12
   17488:	mov	r1, r6
   1748c:	bl	23e7c <__assert_fail@plt+0x12708>
   17490:	sub	r1, r6, #1
   17494:	str	r1, [r9, #68]	; 0x44
   17498:	str	r0, [r9, #32]
   1749c:	bl	11564 <__ctype_get_mb_cur_max@plt>
   174a0:	str	r0, [r9, #92]	; 0x5c
   174a4:	mov	r0, #14
   174a8:	bl	11714 <nl_langinfo@plt>
   174ac:	ldrb	r1, [r0]
   174b0:	orr	r1, r1, #32
   174b4:	cmp	r1, #117	; 0x75
   174b8:	bne	17508 <__assert_fail@plt+0x5d94>
   174bc:	ldrb	r1, [r0, #1]
   174c0:	orr	r1, r1, #32
   174c4:	cmp	r1, #116	; 0x74
   174c8:	bne	17508 <__assert_fail@plt+0x5d94>
   174cc:	ldrb	r1, [r0, #2]
   174d0:	orr	r1, r1, #32
   174d4:	cmp	r1, #102	; 0x66
   174d8:	bne	17508 <__assert_fail@plt+0x5d94>
   174dc:	ldrb	r1, [r0, #3]!
   174e0:	cmp	r1, #45	; 0x2d
   174e4:	addeq	r0, r0, #1
   174e8:	movw	r1, #22948	; 0x59a4
   174ec:	movt	r1, #2
   174f0:	bl	11420 <strcmp@plt>
   174f4:	cmp	r0, #0
   174f8:	bne	17508 <__assert_fail@plt+0x5d94>
   174fc:	ldrb	r0, [r9, #88]	; 0x58
   17500:	orr	r0, r0, #4
   17504:	strb	r0, [r9, #88]	; 0x58
   17508:	ldrb	r0, [r9, #88]	; 0x58
   1750c:	and	r1, r0, #247	; 0xf7
   17510:	strb	r1, [r9, #88]	; 0x58
   17514:	ldr	r1, [r9, #92]	; 0x5c
   17518:	cmp	r1, #2
   1751c:	blt	175c0 <__assert_fail@plt+0x5e4c>
   17520:	tst	r0, #4
   17524:	bne	175b4 <__assert_fail@plt+0x5e40>
   17528:	mov	r8, #1
   1752c:	mov	r0, #32
   17530:	mov	r1, #1
   17534:	bl	23e7c <__assert_fail@plt+0x12708>
   17538:	str	r0, [r9, #60]	; 0x3c
   1753c:	cmp	r0, #0
   17540:	beq	175dc <__assert_fail@plt+0x5e68>
   17544:	mov	r7, #0
   17548:	mov	r6, #0
   1754c:	b	17560 <__assert_fail@plt+0x5dec>
   17550:	add	r7, r7, r4
   17554:	add	r6, r6, #1
   17558:	cmp	r6, #8
   1755c:	beq	175c0 <__assert_fail@plt+0x5e4c>
   17560:	mov	r4, #0
   17564:	b	17574 <__assert_fail@plt+0x5e00>
   17568:	add	r4, r4, #1
   1756c:	cmp	r4, #32
   17570:	beq	17550 <__assert_fail@plt+0x5ddc>
   17574:	add	r5, r7, r4
   17578:	mov	r0, r5
   1757c:	bl	11678 <btowc@plt>
   17580:	cmn	r0, #1
   17584:	beq	17598 <__assert_fail@plt+0x5e24>
   17588:	ldr	r1, [r9, #60]	; 0x3c
   1758c:	ldr	r2, [r1, r6, lsl #2]
   17590:	orr	r2, r2, r8, lsl r4
   17594:	str	r2, [r1, r6, lsl #2]
   17598:	cmp	r5, #127	; 0x7f
   1759c:	bhi	17568 <__assert_fail@plt+0x5df4>
   175a0:	cmp	r5, r0
   175a4:	ldrbne	r0, [r9, #88]	; 0x58
   175a8:	orrne	r0, r0, #8
   175ac:	strbne	r0, [r9, #88]	; 0x58
   175b0:	b	17568 <__assert_fail@plt+0x5df4>
   175b4:	movw	r0, #22900	; 0x5974
   175b8:	movt	r0, #2
   175bc:	str	r0, [r9, #60]	; 0x3c
   175c0:	ldr	r0, [r9]
   175c4:	cmp	r0, #0
   175c8:	ldrne	r1, [r9, #32]
   175cc:	movne	r0, #0
   175d0:	cmpne	r1, #0
   175d4:	moveq	r0, #12
   175d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   175dc:	mov	r0, #12
   175e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   175e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   175e8:	add	fp, sp, #24
   175ec:	sub	sp, sp, #8
   175f0:	mov	r8, r3
   175f4:	mov	r5, r2
   175f8:	mov	r7, r1
   175fc:	mov	r4, r0
   17600:	vmov.i32	q8, #0	; 0x00000000
   17604:	mov	r0, #80	; 0x50
   17608:	mov	r1, r4
   1760c:	vst1.32	{d16-d17}, [r1], r0
   17610:	mov	r0, #0
   17614:	str	r0, [r1]
   17618:	add	r0, r4, #64	; 0x40
   1761c:	vst1.32	{d16-d17}, [r0]
   17620:	add	r0, r4, #48	; 0x30
   17624:	vst1.32	{d16-d17}, [r0]
   17628:	add	r0, r4, #32
   1762c:	vst1.32	{d16-d17}, [r0]
   17630:	add	r0, r4, #16
   17634:	vst1.32	{d16-d17}, [r0]
   17638:	ldr	r6, [fp, #12]
   1763c:	str	r6, [sp, #4]
   17640:	ldr	r9, [fp, #8]
   17644:	str	r9, [sp]
   17648:	mov	r0, r7
   1764c:	mov	r1, r2
   17650:	mov	r2, r4
   17654:	bl	17e3c <__assert_fail@plt+0x66c8>
   17658:	cmp	r5, #1
   1765c:	blt	17674 <__assert_fail@plt+0x5f00>
   17660:	add	r1, r5, #1
   17664:	mov	r0, r4
   17668:	bl	17e94 <__assert_fail@plt+0x6720>
   1766c:	cmp	r0, #0
   17670:	bne	1772c <__assert_fail@plt+0x5fb8>
   17674:	ldrb	r0, [r4, #75]	; 0x4b
   17678:	cmp	r0, #0
   1767c:	ldrne	r7, [r4, #4]
   17680:	str	r7, [r4, #4]
   17684:	ldr	r0, [r6, #92]	; 0x5c
   17688:	cmp	r9, #0
   1768c:	beq	176e8 <__assert_fail@plt+0x5f74>
   17690:	cmp	r0, #2
   17694:	blt	176fc <__assert_fail@plt+0x5f88>
   17698:	mov	r0, r4
   1769c:	bl	17f38 <__assert_fail@plt+0x67c4>
   176a0:	cmp	r0, #0
   176a4:	bne	1772c <__assert_fail@plt+0x5fb8>
   176a8:	ldr	r1, [r4, #32]
   176ac:	mov	r0, #0
   176b0:	cmp	r1, r5
   176b4:	bge	1772c <__assert_fail@plt+0x5fb8>
   176b8:	ldr	r2, [r4, #28]
   176bc:	ldr	r1, [r4, #36]	; 0x24
   176c0:	ldr	r3, [r6, #92]	; 0x5c
   176c4:	add	r2, r3, r2
   176c8:	cmp	r1, r2
   176cc:	bgt	1772c <__assert_fail@plt+0x5fb8>
   176d0:	lsl	r1, r1, #1
   176d4:	mov	r0, r4
   176d8:	bl	17e94 <__assert_fail@plt+0x6720>
   176dc:	cmp	r0, #0
   176e0:	beq	17698 <__assert_fail@plt+0x5f24>
   176e4:	b	1772c <__assert_fail@plt+0x5fb8>
   176e8:	cmp	r0, #2
   176ec:	blt	17708 <__assert_fail@plt+0x5f94>
   176f0:	mov	r0, r4
   176f4:	bl	18548 <__assert_fail@plt+0x6dd4>
   176f8:	b	17728 <__assert_fail@plt+0x5fb4>
   176fc:	mov	r0, r4
   17700:	bl	184d4 <__assert_fail@plt+0x6d60>
   17704:	b	17728 <__assert_fail@plt+0x5fb4>
   17708:	cmp	r8, #0
   1770c:	beq	1771c <__assert_fail@plt+0x5fa8>
   17710:	mov	r0, r4
   17714:	bl	18704 <__assert_fail@plt+0x6f90>
   17718:	b	17728 <__assert_fail@plt+0x5fb4>
   1771c:	ldr	r0, [r4, #36]	; 0x24
   17720:	str	r0, [r4, #28]
   17724:	str	r0, [r4, #32]
   17728:	mov	r0, #0
   1772c:	sub	sp, fp, #24
   17730:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17734:	push	{r4, r5, fp, lr}
   17738:	add	fp, sp, #8
   1773c:	ldr	r4, [r0]
   17740:	ldr	r0, [r4, #56]	; 0x38
   17744:	cmp	r0, #0
   17748:	beq	17760 <__assert_fail@plt+0x5fec>
   1774c:	ldr	r5, [r0]
   17750:	bl	13f1c <__assert_fail@plt+0x27a8>
   17754:	cmp	r5, #0
   17758:	mov	r0, r5
   1775c:	bne	1774c <__assert_fail@plt+0x5fd8>
   17760:	mov	r0, #31
   17764:	str	r0, [r4, #64]	; 0x40
   17768:	mov	r5, #0
   1776c:	str	r5, [r4, #52]	; 0x34
   17770:	str	r5, [r4, #56]	; 0x38
   17774:	ldr	r0, [r4, #16]
   17778:	bl	13f1c <__assert_fail@plt+0x27a8>
   1777c:	str	r5, [r4, #16]
   17780:	pop	{r4, r5, fp, pc}
   17784:	push	{r4, sl, fp, lr}
   17788:	add	fp, sp, #8
   1778c:	mov	r4, r0
   17790:	ldr	r0, [r0, #8]
   17794:	bl	13f1c <__assert_fail@plt+0x27a8>
   17798:	ldr	r0, [r4, #12]
   1779c:	bl	13f1c <__assert_fail@plt+0x27a8>
   177a0:	ldrb	r0, [r4, #75]	; 0x4b
   177a4:	cmp	r0, #0
   177a8:	popeq	{r4, sl, fp, pc}
   177ac:	ldr	r0, [r4, #4]
   177b0:	pop	{r4, sl, fp, lr}
   177b4:	b	13f1c <__assert_fail@plt+0x27a8>
   177b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177bc:	add	fp, sp, #28
   177c0:	sub	sp, sp, #20
   177c4:	mov	r8, r3
   177c8:	mov	r4, r2
   177cc:	mov	r7, r1
   177d0:	mov	r5, r0
   177d4:	ldr	r9, [r1]
   177d8:	str	r2, [r9, #128]	; 0x80
   177dc:	orr	r2, r2, #8388608	; 0x800000
   177e0:	add	sl, sp, #12
   177e4:	mov	r0, sl
   177e8:	mov	r1, r5
   177ec:	bl	1875c <__assert_fail@plt+0x6fe8>
   177f0:	mov	r6, #0
   177f4:	stm	sp, {r6, r8}
   177f8:	mov	r0, r5
   177fc:	mov	r1, r7
   17800:	mov	r2, sl
   17804:	mov	r3, r4
   17808:	bl	1877c <__assert_fail@plt+0x7008>
   1780c:	mov	r7, r0
   17810:	cmp	r0, #0
   17814:	bne	17824 <__assert_fail@plt+0x60b0>
   17818:	ldr	r0, [r8]
   1781c:	cmp	r0, #0
   17820:	bne	17870 <__assert_fail@plt+0x60fc>
   17824:	mov	r0, r9
   17828:	mov	r1, #0
   1782c:	mov	r2, #0
   17830:	mov	r3, #2
   17834:	bl	188e4 <__assert_fail@plt+0x7170>
   17838:	mov	r4, r0
   1783c:	cmp	r7, #0
   17840:	beq	17860 <__assert_fail@plt+0x60ec>
   17844:	mov	r0, r9
   17848:	mov	r1, r7
   1784c:	mov	r2, r4
   17850:	mov	r3, #16
   17854:	bl	188e4 <__assert_fail@plt+0x7170>
   17858:	mov	r6, r0
   1785c:	b	17864 <__assert_fail@plt+0x60f0>
   17860:	mov	r6, r4
   17864:	cmp	r4, #0
   17868:	cmpne	r6, #0
   1786c:	beq	1787c <__assert_fail@plt+0x6108>
   17870:	mov	r0, r6
   17874:	sub	sp, fp, #28
   17878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1787c:	mov	r0, #12
   17880:	str	r0, [r8]
   17884:	mov	r6, #0
   17888:	b	17870 <__assert_fail@plt+0x60fc>
   1788c:	push	{r4, r5, r6, r7, fp, lr}
   17890:	add	fp, sp, #16
   17894:	mov	r6, r0
   17898:	ldr	r4, [r0]
   1789c:	ldr	r0, [r4, #4]
   178a0:	lsl	r0, r0, #2
   178a4:	bl	23ed0 <__assert_fail@plt+0x1275c>
   178a8:	str	r0, [r4, #12]
   178ac:	ldr	r0, [r4, #4]
   178b0:	lsl	r0, r0, #2
   178b4:	bl	23ed0 <__assert_fail@plt+0x1275c>
   178b8:	str	r0, [r4, #16]
   178bc:	ldr	r0, [r4, #4]
   178c0:	add	r0, r0, r0, lsl #1
   178c4:	lsl	r0, r0, #2
   178c8:	bl	23ed0 <__assert_fail@plt+0x1275c>
   178cc:	str	r0, [r4, #20]
   178d0:	ldr	r0, [r4, #4]
   178d4:	add	r0, r0, r0, lsl #1
   178d8:	lsl	r0, r0, #2
   178dc:	bl	23ed0 <__assert_fail@plt+0x1275c>
   178e0:	str	r0, [r4, #24]
   178e4:	ldr	r1, [r4, #12]
   178e8:	mov	r7, #12
   178ec:	cmp	r1, #0
   178f0:	ldrne	r1, [r4, #16]
   178f4:	cmpne	r1, #0
   178f8:	beq	1790c <__assert_fail@plt+0x6198>
   178fc:	cmp	r0, #0
   17900:	ldrne	r0, [r4, #20]
   17904:	cmpne	r0, #0
   17908:	bne	17914 <__assert_fail@plt+0x61a0>
   1790c:	mov	r0, r7
   17910:	pop	{r4, r5, r6, r7, fp, pc}
   17914:	ldr	r0, [r6, #24]
   17918:	lsl	r0, r0, #2
   1791c:	bl	23ed0 <__assert_fail@plt+0x1275c>
   17920:	str	r0, [r4, #132]	; 0x84
   17924:	cmp	r0, #0
   17928:	beq	179cc <__assert_fail@plt+0x6258>
   1792c:	ldr	r0, [r6, #24]
   17930:	cmp	r0, #0
   17934:	beq	17954 <__assert_fail@plt+0x61e0>
   17938:	ldr	r0, [r4, #132]	; 0x84
   1793c:	mov	r1, #0
   17940:	str	r1, [r0, r1, lsl #2]
   17944:	add	r1, r1, #1
   17948:	ldr	r2, [r6, #24]
   1794c:	cmp	r1, r2
   17950:	bcc	17940 <__assert_fail@plt+0x61cc>
   17954:	ldr	r0, [r4, #52]	; 0x34
   17958:	movw	r1, #47228	; 0xb87c
   1795c:	movt	r1, #1
   17960:	mov	r2, r4
   17964:	bl	1b7fc <__assert_fail@plt+0xa088>
   17968:	ldr	r1, [r6, #24]
   1796c:	mov	r0, #0
   17970:	cmp	r1, #0
   17974:	beq	179b0 <__assert_fail@plt+0x623c>
   17978:	ldr	r2, [r4, #132]	; 0x84
   1797c:	ldr	r3, [r2]
   17980:	cmp	r3, #0
   17984:	bne	179b4 <__assert_fail@plt+0x6240>
   17988:	mov	r3, #1
   1798c:	mov	r0, r3
   17990:	ldr	r1, [r6, #24]
   17994:	cmp	r3, r1
   17998:	bcs	179b4 <__assert_fail@plt+0x6240>
   1799c:	ldr	r5, [r2, r0, lsl #2]
   179a0:	add	r3, r0, #1
   179a4:	cmp	r0, r5
   179a8:	beq	1798c <__assert_fail@plt+0x6218>
   179ac:	b	179b4 <__assert_fail@plt+0x6240>
   179b0:	mov	r1, #0
   179b4:	cmp	r0, r1
   179b8:	bne	179cc <__assert_fail@plt+0x6258>
   179bc:	ldr	r0, [r4, #132]	; 0x84
   179c0:	bl	13f1c <__assert_fail@plt+0x27a8>
   179c4:	mov	r0, #0
   179c8:	str	r0, [r4, #132]	; 0x84
   179cc:	ldr	r0, [r4, #52]	; 0x34
   179d0:	movw	r1, #47380	; 0xb914
   179d4:	movt	r1, #1
   179d8:	mov	r2, r6
   179dc:	bl	19328 <__assert_fail@plt+0x7bb4>
   179e0:	cmp	r0, #0
   179e4:	bne	17aa4 <__assert_fail@plt+0x6330>
   179e8:	ldr	r0, [r4, #52]	; 0x34
   179ec:	movw	r1, #47516	; 0xb99c
   179f0:	movt	r1, #1
   179f4:	mov	r2, r4
   179f8:	bl	19328 <__assert_fail@plt+0x7bb4>
   179fc:	cmp	r0, #0
   17a00:	bne	17aa4 <__assert_fail@plt+0x6330>
   17a04:	ldr	r0, [r4, #52]	; 0x34
   17a08:	movw	r1, #47660	; 0xba2c
   17a0c:	movt	r1, #1
   17a10:	mov	r2, r4
   17a14:	bl	1b7fc <__assert_fail@plt+0xa088>
   17a18:	ldr	r0, [r4, #52]	; 0x34
   17a1c:	movw	r1, #47760	; 0xba90
   17a20:	movt	r1, #1
   17a24:	mov	r2, r4
   17a28:	bl	1b7fc <__assert_fail@plt+0xa088>
   17a2c:	cmp	r0, #0
   17a30:	bne	17aa4 <__assert_fail@plt+0x6330>
   17a34:	mov	r0, r4
   17a38:	bl	1bbb0 <__assert_fail@plt+0xa43c>
   17a3c:	cmp	r0, #0
   17a40:	bne	17aa4 <__assert_fail@plt+0x6330>
   17a44:	ldrb	r0, [r6, #28]
   17a48:	tst	r0, #16
   17a4c:	bne	17a68 <__assert_fail@plt+0x62f4>
   17a50:	ldr	r0, [r6, #24]
   17a54:	cmp	r0, #0
   17a58:	beq	17a68 <__assert_fail@plt+0x62f4>
   17a5c:	ldrb	r0, [r4, #88]	; 0x58
   17a60:	tst	r0, #1
   17a64:	bne	17a74 <__assert_fail@plt+0x6300>
   17a68:	ldr	r0, [r4, #76]	; 0x4c
   17a6c:	cmp	r0, #0
   17a70:	beq	17a9c <__assert_fail@plt+0x6328>
   17a74:	ldr	r0, [r4, #8]
   17a78:	add	r0, r0, r0, lsl #1
   17a7c:	lsl	r0, r0, #2
   17a80:	bl	23ed0 <__assert_fail@plt+0x1275c>
   17a84:	str	r0, [r4, #28]
   17a88:	cmp	r0, #0
   17a8c:	beq	1790c <__assert_fail@plt+0x6198>
   17a90:	mov	r0, r4
   17a94:	pop	{r4, r5, r6, r7, fp, lr}
   17a98:	b	1bc64 <__assert_fail@plt+0xa4f0>
   17a9c:	mov	r7, #0
   17aa0:	mov	r0, r7
   17aa4:	pop	{r4, r5, r6, r7, fp, pc}
   17aa8:	push	{r4, r5, r6, r7, fp, lr}
   17aac:	add	fp, sp, #16
   17ab0:	ldr	r1, [r0, #8]
   17ab4:	cmp	r1, #0
   17ab8:	beq	17ad8 <__assert_fail@plt+0x6364>
   17abc:	ldr	r3, [r0]
   17ac0:	mov	r5, #0
   17ac4:	mov	ip, #1
   17ac8:	mov	lr, #139	; 0x8b
   17acc:	mov	r2, #0
   17ad0:	mov	r4, #0
   17ad4:	b	17b08 <__assert_fail@plt+0x6394>
   17ad8:	mov	r2, #0
   17adc:	mov	r5, #0
   17ae0:	b	17ba4 <__assert_fail@plt+0x6430>
   17ae4:	ldrsb	r1, [r1]
   17ae8:	cmp	r1, #0
   17aec:	mov	r1, #0
   17af0:	movwmi	r1, #1
   17af4:	orr	r2, r2, r1
   17af8:	ldr	r1, [r0, #8]
   17afc:	add	r4, r4, #1
   17b00:	cmp	r4, r1
   17b04:	bcs	17ba4 <__assert_fail@plt+0x6430>
   17b08:	add	r1, r3, r4, lsl #3
   17b0c:	ldrb	r6, [r1, #4]
   17b10:	sub	r6, r6, #1
   17b14:	cmp	r6, #11
   17b18:	bhi	17c48 <__assert_fail@plt+0x64d4>
   17b1c:	add	r7, pc, #0
   17b20:	ldr	pc, [r7, r6, lsl #2]
   17b24:	andeq	r7, r1, r4, ror #21
   17b28:	strdeq	r7, [r1], -r8
   17b2c:	andeq	r7, r1, r4, asr fp
   17b30:	strdeq	r7, [r1], -r8
   17b34:	muleq	r1, ip, fp
   17b38:	andeq	r7, r1, r4, asr #24
   17b3c:	andeq	r7, r1, r8, asr #24
   17b40:	strdeq	r7, [r1], -r8
   17b44:	strdeq	r7, [r1], -r8
   17b48:	strdeq	r7, [r1], -r8
   17b4c:	strdeq	r7, [r1], -r8
   17b50:	andeq	r7, r1, ip, ror fp
   17b54:	ldr	r1, [r3, r4, lsl #3]
   17b58:	add	r1, r1, #16
   17b5c:	mov	r6, #0
   17b60:	ldr	r7, [r1, r6, lsl #2]
   17b64:	cmp	r7, #0
   17b68:	bne	17c44 <__assert_fail@plt+0x64d0>
   17b6c:	add	r6, r6, #1
   17b70:	cmp	r6, #4
   17b74:	bne	17b60 <__assert_fail@plt+0x63ec>
   17b78:	b	17af8 <__assert_fail@plt+0x6384>
   17b7c:	ldr	r1, [r3, r4, lsl #3]
   17b80:	sub	r1, r1, #16
   17b84:	ror	r1, r1, #4
   17b88:	cmp	r1, #7
   17b8c:	bhi	17c44 <__assert_fail@plt+0x64d0>
   17b90:	tst	lr, ip, lsl r1
   17b94:	bne	17af8 <__assert_fail@plt+0x6384>
   17b98:	b	17c44 <__assert_fail@plt+0x64d0>
   17b9c:	mov	r5, #1
   17ba0:	b	17af8 <__assert_fail@plt+0x6384>
   17ba4:	tst	r2, #1
   17ba8:	tsteq	r5, #1
   17bac:	beq	17c14 <__assert_fail@plt+0x64a0>
   17bb0:	ldr	r1, [r0, #8]
   17bb4:	cmp	r1, #0
   17bb8:	beq	17c14 <__assert_fail@plt+0x64a0>
   17bbc:	mov	r2, #0
   17bc0:	mov	r3, #7
   17bc4:	b	17be0 <__assert_fail@plt+0x646c>
   17bc8:	bfi	r1, r3, #0, #8
   17bcc:	str	r1, [r4, #4]
   17bd0:	ldr	r1, [r0, #8]
   17bd4:	add	r2, r2, #1
   17bd8:	cmp	r2, r1
   17bdc:	bcs	17c14 <__assert_fail@plt+0x64a0>
   17be0:	ldr	r1, [r0]
   17be4:	add	r4, r1, r2, lsl #3
   17be8:	ldr	r1, [r4, #4]
   17bec:	uxtb	r6, r1
   17bf0:	cmp	r6, #5
   17bf4:	beq	17bc8 <__assert_fail@plt+0x6454>
   17bf8:	cmp	r6, #1
   17bfc:	bne	17bd0 <__assert_fail@plt+0x645c>
   17c00:	ldrsb	r7, [r4]
   17c04:	cmn	r7, #1
   17c08:	bgt	17bd0 <__assert_fail@plt+0x645c>
   17c0c:	bic	r1, r1, #2097152	; 0x200000
   17c10:	b	17bcc <__assert_fail@plt+0x6458>
   17c14:	mov	r1, #1
   17c18:	str	r1, [r0, #92]	; 0x5c
   17c1c:	ldr	r1, [r0, #76]	; 0x4c
   17c20:	mov	r2, #0
   17c24:	cmp	r1, #0
   17c28:	movwgt	r2, #1
   17c2c:	orr	r1, r5, r2
   17c30:	and	r1, r1, #1
   17c34:	ldrb	r2, [r0, #88]	; 0x58
   17c38:	and	r2, r2, #249	; 0xf9
   17c3c:	orr	r1, r2, r1, lsl #1
   17c40:	strb	r1, [r0, #88]	; 0x58
   17c44:	pop	{r4, r5, r6, r7, fp, pc}
   17c48:	bl	11750 <abort@plt>
   17c4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17c50:	add	fp, sp, #24
   17c54:	sub	sp, sp, #16
   17c58:	mov	r9, r0
   17c5c:	ldr	r0, [r0, #24]
   17c60:	ldr	r1, [r9, #52]	; 0x34
   17c64:	ldr	r1, [r1, #12]
   17c68:	ldr	r1, [r1, #28]
   17c6c:	str	r1, [r9, #72]	; 0x48
   17c70:	add	r1, r1, r1, lsl #1
   17c74:	add	r1, r0, r1, lsl #2
   17c78:	mov	r0, sp
   17c7c:	bl	1c990 <__assert_fail@plt+0xb21c>
   17c80:	str	r0, [sp, #12]
   17c84:	cmp	r0, #0
   17c88:	bne	17d6c <__assert_fail@plt+0x65f8>
   17c8c:	ldr	r0, [r9, #76]	; 0x4c
   17c90:	cmp	r0, #1
   17c94:	blt	17d74 <__assert_fail@plt+0x6600>
   17c98:	ldr	r0, [sp, #4]
   17c9c:	cmp	r0, #1
   17ca0:	blt	17d74 <__assert_fail@plt+0x6600>
   17ca4:	mov	r7, #0
   17ca8:	mov	r8, sp
   17cac:	b	17cc0 <__assert_fail@plt+0x654c>
   17cb0:	add	r7, r7, #1
   17cb4:	ldr	r0, [sp, #4]
   17cb8:	cmp	r7, r0
   17cbc:	bge	17d74 <__assert_fail@plt+0x6600>
   17cc0:	ldr	r2, [sp, #8]
   17cc4:	ldr	r1, [r2, r7, lsl #2]
   17cc8:	ldr	r3, [r9]
   17ccc:	add	r6, r3, r1, lsl #3
   17cd0:	ldrb	r6, [r6, #4]
   17cd4:	cmp	r6, #4
   17cd8:	bne	17cb0 <__assert_fail@plt+0x653c>
   17cdc:	mov	r6, #0
   17ce0:	cmp	r0, #1
   17ce4:	bge	17cf8 <__assert_fail@plt+0x6584>
   17ce8:	b	17d1c <__assert_fail@plt+0x65a8>
   17cec:	add	r6, r6, #1
   17cf0:	cmp	r0, r6
   17cf4:	beq	17d1c <__assert_fail@plt+0x65a8>
   17cf8:	ldr	r5, [r2, r6, lsl #2]
   17cfc:	add	r4, r3, r5, lsl #3
   17d00:	ldrb	r4, [r4, #4]
   17d04:	cmp	r4, #9
   17d08:	bne	17cec <__assert_fail@plt+0x6578>
   17d0c:	ldr	r4, [r3, r1, lsl #3]
   17d10:	ldr	r5, [r3, r5, lsl #3]
   17d14:	cmp	r5, r4
   17d18:	bne	17cec <__assert_fail@plt+0x6578>
   17d1c:	cmp	r6, r0
   17d20:	beq	17cb0 <__assert_fail@plt+0x653c>
   17d24:	ldr	r0, [r9, #20]
   17d28:	add	r1, r1, r1, lsl #1
   17d2c:	add	r0, r0, r1, lsl #2
   17d30:	ldr	r0, [r0, #8]
   17d34:	ldr	r6, [r0]
   17d38:	mov	r0, r8
   17d3c:	mov	r1, r6
   17d40:	bl	1ca0c <__assert_fail@plt+0xb298>
   17d44:	cmp	r0, #0
   17d48:	bne	17cb0 <__assert_fail@plt+0x653c>
   17d4c:	ldr	r0, [r9, #24]
   17d50:	add	r1, r6, r6, lsl #1
   17d54:	add	r1, r0, r1, lsl #2
   17d58:	mov	r0, r8
   17d5c:	bl	1c58c <__assert_fail@plt+0xae18>
   17d60:	mov	r7, #0
   17d64:	cmp	r0, #0
   17d68:	beq	17cb0 <__assert_fail@plt+0x653c>
   17d6c:	sub	sp, fp, #24
   17d70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17d74:	add	r0, sp, #12
   17d78:	mov	r2, sp
   17d7c:	mov	r1, r9
   17d80:	mov	r3, #0
   17d84:	bl	1ca7c <__assert_fail@plt+0xb308>
   17d88:	str	r0, [r9, #36]	; 0x24
   17d8c:	cmp	r0, #0
   17d90:	beq	17e10 <__assert_fail@plt+0x669c>
   17d94:	ldrsb	r1, [r0, #52]	; 0x34
   17d98:	cmn	r1, #1
   17d9c:	ble	17db0 <__assert_fail@plt+0x663c>
   17da0:	str	r0, [r9, #40]	; 0x28
   17da4:	str	r0, [r9, #44]	; 0x2c
   17da8:	str	r0, [r9, #48]	; 0x30
   17dac:	b	17e28 <__assert_fail@plt+0x66b4>
   17db0:	add	r5, sp, #12
   17db4:	mov	r6, sp
   17db8:	mov	r0, r5
   17dbc:	mov	r1, r9
   17dc0:	mov	r2, r6
   17dc4:	mov	r3, #1
   17dc8:	bl	1ca7c <__assert_fail@plt+0xb308>
   17dcc:	str	r0, [r9, #40]	; 0x28
   17dd0:	mov	r0, r5
   17dd4:	mov	r1, r9
   17dd8:	mov	r2, r6
   17ddc:	mov	r3, #2
   17de0:	bl	1ca7c <__assert_fail@plt+0xb308>
   17de4:	str	r0, [r9, #44]	; 0x2c
   17de8:	mov	r0, r5
   17dec:	mov	r1, r9
   17df0:	mov	r2, r6
   17df4:	mov	r3, #6
   17df8:	bl	1ca7c <__assert_fail@plt+0xb308>
   17dfc:	str	r0, [r9, #48]	; 0x30
   17e00:	ldr	r1, [r9, #40]	; 0x28
   17e04:	cmp	r1, #0
   17e08:	cmpne	r0, #0
   17e0c:	bne	17e1c <__assert_fail@plt+0x66a8>
   17e10:	ldr	r0, [sp, #12]
   17e14:	sub	sp, fp, #24
   17e18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17e1c:	ldr	r0, [r9, #44]	; 0x2c
   17e20:	cmp	r0, #0
   17e24:	beq	17e10 <__assert_fail@plt+0x669c>
   17e28:	ldr	r0, [sp, #8]
   17e2c:	bl	13f1c <__assert_fail@plt+0x27a8>
   17e30:	mov	r0, #0
   17e34:	sub	sp, fp, #24
   17e38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17e3c:	str	r1, [r2, #48]	; 0x30
   17e40:	str	r0, [r2]
   17e44:	str	r3, [r2, #64]	; 0x40
   17e48:	str	r1, [r2, #44]	; 0x2c
   17e4c:	ldr	r0, [sp]
   17e50:	strb	r0, [r2, #72]	; 0x48
   17e54:	cmp	r3, #0
   17e58:	movwne	r3, #1
   17e5c:	orr	r0, r3, r0
   17e60:	strb	r0, [r2, #75]	; 0x4b
   17e64:	ldr	r0, [sp, #4]
   17e68:	ldr	r3, [r0, #92]	; 0x5c
   17e6c:	str	r3, [r2, #80]	; 0x50
   17e70:	ldrb	r3, [r0, #88]	; 0x58
   17e74:	ubfx	r3, r3, #2, #1
   17e78:	strb	r3, [r2, #73]	; 0x49
   17e7c:	ldrb	r0, [r0, #88]	; 0x58
   17e80:	str	r1, [r2, #56]	; 0x38
   17e84:	str	r1, [r2, #52]	; 0x34
   17e88:	ubfx	r0, r0, #3, #1
   17e8c:	strb	r0, [r2, #74]	; 0x4a
   17e90:	bx	lr
   17e94:	push	{r4, r5, r6, r7, fp, lr}
   17e98:	add	fp, sp, #16
   17e9c:	mov	r4, r1
   17ea0:	mov	r5, r0
   17ea4:	ldr	r0, [r0, #80]	; 0x50
   17ea8:	cmp	r0, #2
   17eac:	blt	17ef8 <__assert_fail@plt+0x6784>
   17eb0:	mov	r6, #12
   17eb4:	cmn	r4, #-1073741823	; 0xc0000001
   17eb8:	bhi	17f24 <__assert_fail@plt+0x67b0>
   17ebc:	ldr	r0, [r5, #8]
   17ec0:	lsl	r7, r4, #2
   17ec4:	mov	r1, r7
   17ec8:	bl	23f00 <__assert_fail@plt+0x1278c>
   17ecc:	cmp	r0, #0
   17ed0:	beq	17f24 <__assert_fail@plt+0x67b0>
   17ed4:	str	r0, [r5, #8]
   17ed8:	ldr	r0, [r5, #12]
   17edc:	cmp	r0, #0
   17ee0:	beq	17ef8 <__assert_fail@plt+0x6784>
   17ee4:	mov	r1, r7
   17ee8:	bl	23f00 <__assert_fail@plt+0x1278c>
   17eec:	cmp	r0, #0
   17ef0:	beq	17f24 <__assert_fail@plt+0x67b0>
   17ef4:	str	r0, [r5, #12]
   17ef8:	ldrb	r0, [r5, #75]	; 0x4b
   17efc:	cmp	r0, #0
   17f00:	beq	17f1c <__assert_fail@plt+0x67a8>
   17f04:	ldr	r0, [r5, #4]
   17f08:	mov	r1, r4
   17f0c:	bl	23f00 <__assert_fail@plt+0x1278c>
   17f10:	cmp	r0, #0
   17f14:	beq	17f2c <__assert_fail@plt+0x67b8>
   17f18:	str	r0, [r5, #4]
   17f1c:	str	r4, [r5, #36]	; 0x24
   17f20:	mov	r6, #0
   17f24:	mov	r0, r6
   17f28:	pop	{r4, r5, r6, r7, fp, pc}
   17f2c:	mov	r6, #12
   17f30:	mov	r0, r6
   17f34:	pop	{r4, r5, r6, r7, fp, pc}
   17f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f3c:	add	fp, sp, #28
   17f40:	sub	sp, sp, #92	; 0x5c
   17f44:	mov	r9, r0
   17f48:	ldrb	r0, [r0, #74]	; 0x4a
   17f4c:	ldr	sl, [r9, #28]
   17f50:	ldr	r4, [r9, #36]	; 0x24
   17f54:	ldr	r1, [r9, #48]	; 0x30
   17f58:	cmp	r4, r1
   17f5c:	movgt	r4, r1
   17f60:	cmp	r0, #0
   17f64:	bne	17f80 <__assert_fail@plt+0x680c>
   17f68:	ldr	r0, [r9, #64]	; 0x40
   17f6c:	cmp	r0, #0
   17f70:	bne	17f80 <__assert_fail@plt+0x680c>
   17f74:	ldrb	r0, [r9, #76]	; 0x4c
   17f78:	cmp	r0, #0
   17f7c:	beq	17f88 <__assert_fail@plt+0x6814>
   17f80:	ldr	r7, [r9, #32]
   17f84:	b	1815c <__assert_fail@plt+0x69e8>
   17f88:	cmp	r4, sl
   17f8c:	ble	18130 <__assert_fail@plt+0x69bc>
   17f90:	add	r5, r9, #16
   17f94:	str	r4, [sp, #4]
   17f98:	b	17fbc <__assert_fail@plt+0x6848>
   17f9c:	ldr	r1, [r9, #4]
   17fa0:	strb	r0, [r1, sl]
   17fa4:	ldr	r1, [r9, #8]
   17fa8:	str	r0, [r1, sl, lsl #2]
   17fac:	add	sl, sl, #1
   17fb0:	cmp	r4, sl
   17fb4:	mov	r7, sl
   17fb8:	ble	184a0 <__assert_fail@plt+0x6d2c>
   17fbc:	ldr	r0, [r9]
   17fc0:	ldr	r1, [r9, #24]
   17fc4:	add	r1, r1, sl
   17fc8:	ldrb	r6, [r0, r1]
   17fcc:	tst	r6, #128	; 0x80
   17fd0:	bne	17ff4 <__assert_fail@plt+0x6880>
   17fd4:	mov	r0, r5
   17fd8:	bl	114bc <mbsinit@plt>
   17fdc:	cmp	r0, #0
   17fe0:	beq	17ff4 <__assert_fail@plt+0x6880>
   17fe4:	mov	r0, r6
   17fe8:	bl	11738 <towupper@plt>
   17fec:	cmp	r0, #127	; 0x7f
   17ff0:	bls	17f9c <__assert_fail@plt+0x6828>
   17ff4:	ldm	r5, {r0, r1}
   17ff8:	str	r1, [fp, #-36]	; 0xffffffdc
   17ffc:	str	r0, [fp, #-40]	; 0xffffffd8
   18000:	sub	r2, r4, sl
   18004:	ldr	r0, [r9]
   18008:	ldr	r1, [r9, #24]
   1800c:	add	r0, r0, r1
   18010:	add	r1, r0, sl
   18014:	add	r0, sp, #12
   18018:	mov	r3, r5
   1801c:	bl	2462c <__assert_fail@plt+0x12eb8>
   18020:	mov	r4, r0
   18024:	sub	r8, r0, #1
   18028:	cmn	r8, #4
   1802c:	bhi	180e8 <__assert_fail@plt+0x6974>
   18030:	ldr	r0, [sp, #12]
   18034:	bl	11738 <towupper@plt>
   18038:	mov	r6, r0
   1803c:	ldr	r0, [sp, #12]
   18040:	cmp	r6, r0
   18044:	bne	18064 <__assert_fail@plt+0x68f0>
   18048:	ldr	r1, [r9]
   1804c:	ldr	r0, [r9, #4]
   18050:	ldr	r2, [r9, #24]
   18054:	add	r0, r0, sl
   18058:	add	r1, r1, r2
   1805c:	add	r1, r1, sl
   18060:	b	1808c <__assert_fail@plt+0x6918>
   18064:	add	r7, sp, #16
   18068:	mov	r0, r7
   1806c:	mov	r1, r6
   18070:	sub	r2, fp, #40	; 0x28
   18074:	bl	11408 <wcrtomb@plt>
   18078:	cmp	r4, r0
   1807c:	bne	18138 <__assert_fail@plt+0x69c4>
   18080:	ldr	r0, [r9, #4]
   18084:	add	r0, r0, sl
   18088:	mov	r1, r7
   1808c:	mov	r2, r4
   18090:	bl	1148c <memcpy@plt>
   18094:	ldr	r0, [r9, #8]
   18098:	str	r6, [r0, sl, lsl #2]
   1809c:	add	r1, r4, sl
   180a0:	add	r6, sl, #1
   180a4:	cmp	r6, r1
   180a8:	bge	180dc <__assert_fail@plt+0x6968>
   180ac:	mvn	r1, #3
   180b0:	add	r2, r1, r4, lsl #2
   180b4:	add	r0, r0, sl, lsl #2
   180b8:	add	r0, r0, #4
   180bc:	mov	r1, #255	; 0xff
   180c0:	bl	1166c <memset@plt>
   180c4:	mov	sl, r6
   180c8:	ldr	r4, [sp, #4]
   180cc:	subs	r8, r8, #1
   180d0:	add	sl, sl, #1
   180d4:	bne	180cc <__assert_fail@plt+0x6958>
   180d8:	b	17fb0 <__assert_fail@plt+0x683c>
   180dc:	mov	sl, r6
   180e0:	ldr	r4, [sp, #4]
   180e4:	b	17fb0 <__assert_fail@plt+0x683c>
   180e8:	add	r0, r4, #1
   180ec:	cmp	r0, #2
   180f0:	bcc	18104 <__assert_fail@plt+0x6990>
   180f4:	ldr	r0, [r9, #36]	; 0x24
   180f8:	ldr	r1, [r9, #48]	; 0x30
   180fc:	cmp	r0, r1
   18100:	blt	18148 <__assert_fail@plt+0x69d4>
   18104:	ldr	r0, [r9, #4]
   18108:	strb	r6, [r0, sl]
   1810c:	ldr	r0, [r9, #8]
   18110:	str	r6, [r0, sl, lsl #2]
   18114:	add	sl, sl, #1
   18118:	cmn	r4, #1
   1811c:	bne	180e0 <__assert_fail@plt+0x696c>
   18120:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18124:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18128:	stm	r5, {r0, r1}
   1812c:	b	180e0 <__assert_fail@plt+0x696c>
   18130:	mov	r7, sl
   18134:	b	184a0 <__assert_fail@plt+0x6d2c>
   18138:	mov	r0, sl
   1813c:	ldr	r4, [sp, #4]
   18140:	mov	r7, sl
   18144:	b	18164 <__assert_fail@plt+0x69f0>
   18148:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1814c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18150:	stm	r5, {r0, r1}
   18154:	mov	r7, sl
   18158:	b	184a0 <__assert_fail@plt+0x6d2c>
   1815c:	cmp	sl, r4
   18160:	bge	184a0 <__assert_fail@plt+0x6d2c>
   18164:	mov	r6, r9
   18168:	ldr	r0, [r6, #16]!
   1816c:	ldr	r1, [r6, #4]
   18170:	str	r0, [fp, #-40]	; 0xffffffd8
   18174:	str	r1, [fp, #-36]	; 0xffffffdc
   18178:	str	r4, [sp, #4]
   1817c:	sub	r2, r4, sl
   18180:	ldr	r0, [r6, #48]	; 0x30
   18184:	cmp	r0, #0
   18188:	str	r7, [sp]
   1818c:	bne	18270 <__assert_fail@plt+0x6afc>
   18190:	ldr	r0, [r9]
   18194:	ldr	r1, [r9, #24]
   18198:	add	r0, r0, r1
   1819c:	add	r4, r0, r7
   181a0:	add	r0, sp, #8
   181a4:	mov	r1, r4
   181a8:	mov	r3, r6
   181ac:	bl	2462c <__assert_fail@plt+0x12eb8>
   181b0:	mov	r5, r0
   181b4:	sub	r8, r0, #1
   181b8:	cmn	r8, #4
   181bc:	bhi	182c8 <__assert_fail@plt+0x6b54>
   181c0:	ldr	r0, [sp, #8]
   181c4:	bl	11738 <towupper@plt>
   181c8:	mov	r7, r0
   181cc:	ldr	r0, [sp, #8]
   181d0:	cmp	r7, r0
   181d4:	bne	181e8 <__assert_fail@plt+0x6a74>
   181d8:	ldr	r0, [r9, #4]
   181dc:	add	r0, r0, sl
   181e0:	mov	r1, r4
   181e4:	b	1820c <__assert_fail@plt+0x6a98>
   181e8:	add	r0, sp, #16
   181ec:	sub	r2, fp, #40	; 0x28
   181f0:	mov	r1, r7
   181f4:	bl	11408 <wcrtomb@plt>
   181f8:	cmp	r0, r5
   181fc:	bne	18344 <__assert_fail@plt+0x6bd0>
   18200:	ldr	r0, [r9, #4]
   18204:	add	r0, r0, sl
   18208:	add	r1, sp, #16
   1820c:	mov	r2, r5
   18210:	bl	1148c <memcpy@plt>
   18214:	ldrb	r0, [r9, #76]	; 0x4c
   18218:	cmp	r0, #0
   1821c:	bne	1846c <__assert_fail@plt+0x6cf8>
   18220:	ldr	r0, [r9, #8]
   18224:	str	r7, [r0, sl, lsl #2]
   18228:	ldr	r7, [sp]
   1822c:	add	r7, r5, r7
   18230:	add	r1, r5, sl
   18234:	add	r4, sl, #1
   18238:	cmp	r4, r1
   1823c:	bge	18264 <__assert_fail@plt+0x6af0>
   18240:	mvn	r1, #3
   18244:	add	r2, r1, r5, lsl #2
   18248:	add	r0, r0, sl, lsl #2
   1824c:	add	r0, r0, #4
   18250:	mov	r1, #255	; 0xff
   18254:	bl	1166c <memset@plt>
   18258:	subs	r8, r8, #1
   1825c:	add	r4, r4, #1
   18260:	bne	18258 <__assert_fail@plt+0x6ae4>
   18264:	mov	sl, r4
   18268:	ldr	r4, [sp, #4]
   1826c:	b	1815c <__assert_fail@plt+0x69e8>
   18270:	add	r4, sp, #16
   18274:	cmp	r2, #1
   18278:	ldrge	r1, [r9, #80]	; 0x50
   1827c:	cmpge	r1, #1
   18280:	blt	181a0 <__assert_fail@plt+0x6a2c>
   18284:	mov	r1, #0
   18288:	add	r4, sp, #16
   1828c:	ldr	r3, [r9]
   18290:	ldr	r7, [r9, #24]
   18294:	add	r3, r3, r7
   18298:	ldr	r7, [sp]
   1829c:	add	r3, r3, r7
   182a0:	ldrb	r3, [r3, r1]
   182a4:	ldrb	r3, [r0, r3]
   182a8:	strb	r3, [r4, r1]
   182ac:	add	r1, r1, #1
   182b0:	cmp	r1, r2
   182b4:	bge	181a0 <__assert_fail@plt+0x6a2c>
   182b8:	ldr	r3, [r9, #80]	; 0x50
   182bc:	cmp	r1, r3
   182c0:	blt	1828c <__assert_fail@plt+0x6b18>
   182c4:	b	181a0 <__assert_fail@plt+0x6a2c>
   182c8:	add	r0, r5, #1
   182cc:	cmp	r0, #2
   182d0:	bcc	182e4 <__assert_fail@plt+0x6b70>
   182d4:	ldr	r0, [r9, #36]	; 0x24
   182d8:	ldr	r1, [r9, #48]	; 0x30
   182dc:	cmp	r0, r1
   182e0:	blt	18490 <__assert_fail@plt+0x6d1c>
   182e4:	ldr	r0, [r9]
   182e8:	ldr	r2, [r9, #24]
   182ec:	ldr	r1, [r9, #64]	; 0x40
   182f0:	ldr	r7, [sp]
   182f4:	add	r2, r2, r7
   182f8:	ldrb	r0, [r0, r2]
   182fc:	cmp	r1, #0
   18300:	bne	184c0 <__assert_fail@plt+0x6d4c>
   18304:	ldr	r4, [sp, #4]
   18308:	ldr	r1, [r9, #4]
   1830c:	strb	r0, [r1, sl]
   18310:	ldrb	r1, [r9, #76]	; 0x4c
   18314:	cmp	r1, #0
   18318:	bne	184c8 <__assert_fail@plt+0x6d54>
   1831c:	ldr	r1, [r9, #8]
   18320:	str	r0, [r1, sl, lsl #2]
   18324:	add	sl, sl, #1
   18328:	add	r7, r7, #1
   1832c:	cmn	r5, #1
   18330:	bne	1815c <__assert_fail@plt+0x69e8>
   18334:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18338:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1833c:	stm	r6, {r0, r1}
   18340:	b	1815c <__assert_fail@plt+0x69e8>
   18344:	mov	r2, r0
   18348:	cmn	r0, #1
   1834c:	beq	181d8 <__assert_fail@plt+0x6a64>
   18350:	add	r1, r2, sl
   18354:	ldr	r0, [r9, #36]	; 0x24
   18358:	cmp	r1, r0
   1835c:	bhi	18490 <__assert_fail@plt+0x6d1c>
   18360:	str	r1, [sp, #4]
   18364:	ldr	r1, [r9, #12]
   18368:	cmp	r1, #0
   1836c:	bne	1838c <__assert_fail@plt+0x6c18>
   18370:	lsl	r0, r0, #2
   18374:	mov	r4, r2
   18378:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1837c:	mov	r2, r4
   18380:	str	r0, [r9, #12]
   18384:	cmp	r0, #0
   18388:	beq	184b4 <__assert_fail@plt+0x6d40>
   1838c:	ldrb	r0, [r9, #76]	; 0x4c
   18390:	cmp	r0, #0
   18394:	bne	183c0 <__assert_fail@plt+0x6c4c>
   18398:	cmp	sl, #0
   1839c:	beq	183b8 <__assert_fail@plt+0x6c44>
   183a0:	ldr	r0, [r9, #12]
   183a4:	mov	r1, #0
   183a8:	str	r1, [r0, r1, lsl #2]
   183ac:	add	r1, r1, #1
   183b0:	cmp	sl, r1
   183b4:	bne	183a8 <__assert_fail@plt+0x6c34>
   183b8:	mov	r0, #1
   183bc:	strb	r0, [r9, #76]	; 0x4c
   183c0:	ldr	r0, [r9, #4]
   183c4:	add	r0, r0, sl
   183c8:	add	r1, sp, #16
   183cc:	mov	r4, r2
   183d0:	bl	1148c <memcpy@plt>
   183d4:	ldr	r1, [r9, #8]
   183d8:	str	r7, [r1, sl, lsl #2]
   183dc:	ldr	r0, [r9, #12]
   183e0:	ldr	r6, [sp]
   183e4:	str	r6, [r0, sl, lsl #2]
   183e8:	cmp	r4, #2
   183ec:	bcc	18424 <__assert_fail@plt+0x6cb0>
   183f0:	add	r0, r0, sl, lsl #2
   183f4:	add	r1, r1, sl, lsl #2
   183f8:	mov	r2, #1
   183fc:	mvn	r3, #0
   18400:	cmp	r2, r5
   18404:	mov	r7, r8
   18408:	movcc	r7, r2
   1840c:	add	r7, r7, r6
   18410:	str	r7, [r0, r2, lsl #2]
   18414:	str	r3, [r1, r2, lsl #2]
   18418:	add	r2, r2, #1
   1841c:	cmp	r4, r2
   18420:	bne	18400 <__assert_fail@plt+0x6c8c>
   18424:	sub	r1, r4, r5
   18428:	ldr	r0, [r9, #48]	; 0x30
   1842c:	ldr	r2, [r9, #52]	; 0x34
   18430:	add	r0, r0, r1
   18434:	str	r0, [r9, #48]	; 0x30
   18438:	cmp	r2, r6
   1843c:	mov	r7, r6
   18440:	ble	18450 <__assert_fail@plt+0x6cdc>
   18444:	ldr	r2, [r9, #56]	; 0x38
   18448:	add	r1, r2, r1
   1844c:	str	r1, [r9, #56]	; 0x38
   18450:	add	r7, r5, r7
   18454:	ldr	r1, [r9, #36]	; 0x24
   18458:	cmp	r1, r0
   1845c:	movgt	r1, r0
   18460:	ldr	sl, [sp, #4]
   18464:	mov	r4, r1
   18468:	b	1815c <__assert_fail@plt+0x69e8>
   1846c:	ldr	r0, [r9, #12]
   18470:	add	r0, r0, sl, lsl #2
   18474:	ldr	r1, [sp]
   18478:	mov	r2, r5
   1847c:	str	r1, [r0], #4
   18480:	add	r1, r1, #1
   18484:	subs	r2, r2, #1
   18488:	bne	1847c <__assert_fail@plt+0x6d08>
   1848c:	b	18220 <__assert_fail@plt+0x6aac>
   18490:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18494:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18498:	stm	r6, {r0, r1}
   1849c:	ldr	r7, [sp]
   184a0:	str	sl, [r9, #28]
   184a4:	str	r7, [r9, #32]
   184a8:	mov	r0, #0
   184ac:	sub	sp, fp, #28
   184b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184b4:	mov	r0, #12
   184b8:	sub	sp, fp, #28
   184bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184c0:	ldrb	r0, [r1, r0]
   184c4:	b	18304 <__assert_fail@plt+0x6b90>
   184c8:	ldr	r1, [r9, #12]
   184cc:	str	r7, [r1, sl, lsl #2]
   184d0:	b	1831c <__assert_fail@plt+0x6ba8>
   184d4:	push	{r4, r5, r6, sl, fp, lr}
   184d8:	add	fp, sp, #16
   184dc:	mov	r4, r0
   184e0:	ldr	r5, [r0, #28]
   184e4:	ldr	r6, [r0, #36]	; 0x24
   184e8:	ldr	r0, [r0, #48]	; 0x30
   184ec:	cmp	r6, r0
   184f0:	movgt	r6, r0
   184f4:	cmp	r5, r6
   184f8:	bge	1853c <__assert_fail@plt+0x6dc8>
   184fc:	ldr	r0, [r4]
   18500:	ldr	r2, [r4, #24]
   18504:	ldr	r1, [r4, #64]	; 0x40
   18508:	add	r0, r0, r2
   1850c:	ldrb	r0, [r0, r5]
   18510:	cmp	r1, #0
   18514:	bne	18534 <__assert_fail@plt+0x6dc0>
   18518:	bl	116fc <toupper@plt>
   1851c:	ldr	r1, [r4, #4]
   18520:	strb	r0, [r1, r5]
   18524:	add	r5, r5, #1
   18528:	cmp	r5, r6
   1852c:	blt	184fc <__assert_fail@plt+0x6d88>
   18530:	b	1853c <__assert_fail@plt+0x6dc8>
   18534:	ldrb	r0, [r1, r0]
   18538:	b	18518 <__assert_fail@plt+0x6da4>
   1853c:	str	r5, [r4, #28]
   18540:	str	r5, [r4, #32]
   18544:	pop	{r4, r5, r6, sl, fp, pc}
   18548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1854c:	add	fp, sp, #28
   18550:	sub	sp, sp, #76	; 0x4c
   18554:	mov	r4, r0
   18558:	ldr	r6, [r0, #28]
   1855c:	ldr	sl, [r0, #36]	; 0x24
   18560:	ldr	r0, [r0, #48]	; 0x30
   18564:	cmp	sl, r0
   18568:	movgt	sl, r0
   1856c:	cmp	sl, r6
   18570:	ble	186f4 <__assert_fail@plt+0x6f80>
   18574:	add	r9, r4, #16
   18578:	add	r0, sp, #8
   1857c:	sub	r2, sl, r6
   18580:	ldm	r9, {r3, r5}
   18584:	ldr	r1, [r4, #64]	; 0x40
   18588:	cmp	r1, #0
   1858c:	str	r3, [sp, #4]
   18590:	bne	18670 <__assert_fail@plt+0x6efc>
   18594:	ldr	r3, [r4]
   18598:	ldr	r1, [r4, #24]
   1859c:	add	r1, r3, r1
   185a0:	add	r1, r1, r6
   185a4:	mov	r8, r0
   185a8:	mov	r3, r9
   185ac:	bl	2462c <__assert_fail@plt+0x12eb8>
   185b0:	mov	r7, r0
   185b4:	add	r0, r0, #1
   185b8:	cmp	r0, #2
   185bc:	bcc	185d8 <__assert_fail@plt+0x6e64>
   185c0:	cmn	r7, #2
   185c4:	bne	18604 <__assert_fail@plt+0x6e90>
   185c8:	ldr	r0, [r4, #36]	; 0x24
   185cc:	ldr	r1, [r4, #48]	; 0x30
   185d0:	cmp	r0, r1
   185d4:	blt	186ec <__assert_fail@plt+0x6f78>
   185d8:	ldr	r0, [r4]
   185dc:	ldr	r1, [r4, #24]
   185e0:	add	r1, r1, r6
   185e4:	ldrb	r0, [r0, r1]
   185e8:	str	r0, [sp, #8]
   185ec:	ldr	r1, [r4, #64]	; 0x40
   185f0:	cmp	r1, #0
   185f4:	bne	186e0 <__assert_fail@plt+0x6f6c>
   185f8:	ldr	r0, [sp, #4]
   185fc:	stm	r9, {r0, r5}
   18600:	mov	r7, #1
   18604:	ldr	r0, [r4, #8]
   18608:	ldr	r1, [sp, #8]
   1860c:	str	r1, [r0, r6, lsl #2]
   18610:	add	r1, r7, r6
   18614:	add	r5, r6, #1
   18618:	cmp	r5, r1
   1861c:	bge	1865c <__assert_fail@plt+0x6ee8>
   18620:	mvn	r1, #3
   18624:	add	r2, r1, r7, lsl #2
   18628:	add	r0, r0, r6, lsl #2
   1862c:	add	r0, r0, #4
   18630:	mov	r1, #255	; 0xff
   18634:	bl	1166c <memset@plt>
   18638:	sub	r1, r7, #1
   1863c:	mov	r6, r5
   18640:	mov	r0, r8
   18644:	subs	r1, r1, #1
   18648:	add	r6, r6, #1
   1864c:	bne	18644 <__assert_fail@plt+0x6ed0>
   18650:	cmp	sl, r6
   18654:	bgt	1857c <__assert_fail@plt+0x6e08>
   18658:	b	186f4 <__assert_fail@plt+0x6f80>
   1865c:	mov	r6, r5
   18660:	mov	r0, r8
   18664:	cmp	sl, r6
   18668:	bgt	1857c <__assert_fail@plt+0x6e08>
   1866c:	b	186f4 <__assert_fail@plt+0x6f80>
   18670:	cmp	r2, #1
   18674:	add	r1, sp, #12
   18678:	blt	185a4 <__assert_fail@plt+0x6e30>
   1867c:	ldr	r1, [r4, #80]	; 0x50
   18680:	cmp	r1, #1
   18684:	add	r1, sp, #12
   18688:	blt	185a4 <__assert_fail@plt+0x6e30>
   1868c:	mov	r7, #0
   18690:	ldr	lr, [r4]
   18694:	ldr	ip, [r4, #4]
   18698:	ldr	r1, [r4, #24]
   1869c:	ldr	r3, [r4, #64]	; 0x40
   186a0:	add	r1, lr, r1
   186a4:	add	r1, r1, r6
   186a8:	ldrb	r1, [r1, r7]
   186ac:	ldrb	r1, [r3, r1]
   186b0:	add	r3, ip, r6
   186b4:	strb	r1, [r3, r7]
   186b8:	add	r3, sp, #12
   186bc:	strb	r1, [r3, r7]
   186c0:	add	r7, r7, #1
   186c4:	cmp	r7, r2
   186c8:	bge	186d8 <__assert_fail@plt+0x6f64>
   186cc:	ldr	r1, [r4, #80]	; 0x50
   186d0:	cmp	r7, r1
   186d4:	blt	18690 <__assert_fail@plt+0x6f1c>
   186d8:	add	r1, sp, #12
   186dc:	b	185a4 <__assert_fail@plt+0x6e30>
   186e0:	ldrb	r0, [r1, r0]
   186e4:	str	r0, [sp, #8]
   186e8:	b	185f8 <__assert_fail@plt+0x6e84>
   186ec:	ldr	r0, [sp, #4]
   186f0:	stm	r9, {r0, r5}
   186f4:	str	r6, [r4, #28]
   186f8:	str	r6, [r4, #32]
   186fc:	sub	sp, fp, #28
   18700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18704:	push	{r4, sl, fp, lr}
   18708:	add	fp, sp, #8
   1870c:	ldr	r1, [r0, #28]
   18710:	ldr	ip, [r0, #36]	; 0x24
   18714:	ldr	r3, [r0, #48]	; 0x30
   18718:	cmp	ip, r3
   1871c:	movgt	ip, r3
   18720:	cmp	r1, ip
   18724:	bge	18750 <__assert_fail@plt+0x6fdc>
   18728:	ldm	r0, {r3, lr}
   1872c:	ldr	r2, [r0, #24]
   18730:	ldr	r4, [r0, #64]	; 0x40
   18734:	add	r2, r3, r2
   18738:	ldrb	r2, [r2, r1]
   1873c:	ldrb	r2, [r4, r2]
   18740:	strb	r2, [lr, r1]
   18744:	add	r1, r1, #1
   18748:	cmp	r1, ip
   1874c:	blt	18728 <__assert_fail@plt+0x6fb4>
   18750:	str	r1, [r0, #28]
   18754:	str	r1, [r0, #32]
   18758:	pop	{r4, sl, fp, pc}
   1875c:	push	{r4, sl, fp, lr}
   18760:	add	fp, sp, #8
   18764:	mov	r4, r1
   18768:	bl	1891c <__assert_fail@plt+0x71a8>
   1876c:	ldr	r1, [r4, #40]	; 0x28
   18770:	add	r0, r1, r0
   18774:	str	r0, [r4, #40]	; 0x28
   18778:	pop	{r4, sl, fp, pc}
   1877c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18780:	add	fp, sp, #28
   18784:	sub	sp, sp, #28
   18788:	mov	r5, r2
   1878c:	mov	sl, r0
   18790:	ldr	r4, [r1]
   18794:	ldr	r0, [r4, #84]	; 0x54
   18798:	str	r0, [sp, #12]
   1879c:	ldr	r7, [fp, #12]
   187a0:	str	r7, [sp, #4]
   187a4:	ldr	r8, [fp, #8]
   187a8:	str	r8, [sp]
   187ac:	mov	r0, sl
   187b0:	str	r1, [sp, #16]
   187b4:	str	r3, [sp, #20]
   187b8:	bl	191b4 <__assert_fail@plt+0x7a40>
   187bc:	mov	r6, r0
   187c0:	cmp	r0, #0
   187c4:	bne	187d4 <__assert_fail@plt+0x7060>
   187c8:	ldr	r0, [r7]
   187cc:	cmp	r0, #0
   187d0:	bne	188dc <__assert_fail@plt+0x7168>
   187d4:	ldr	r0, [sp, #20]
   187d8:	orr	r7, r0, #8388608	; 0x800000
   187dc:	b	18810 <__assert_fail@plt+0x709c>
   187e0:	ldr	r0, [r4, #84]	; 0x54
   187e4:	ldr	r1, [sp, #24]
   187e8:	orr	r0, r0, r1
   187ec:	str	r0, [r4, #84]	; 0x54
   187f0:	mov	r8, r9
   187f4:	mov	r0, r4
   187f8:	mov	r1, r6
   187fc:	mov	r3, #10
   18800:	bl	188e4 <__assert_fail@plt+0x7170>
   18804:	mov	r6, r0
   18808:	cmp	r0, #0
   1880c:	beq	188d0 <__assert_fail@plt+0x715c>
   18810:	ldrb	r0, [r5, #4]
   18814:	cmp	r0, #10
   18818:	bne	188c0 <__assert_fail@plt+0x714c>
   1881c:	mov	r0, r5
   18820:	mov	r1, sl
   18824:	mov	r2, r7
   18828:	bl	1875c <__assert_fail@plt+0x6fe8>
   1882c:	ldrb	r0, [r5, #4]
   18830:	orr	r1, r0, #8
   18834:	mov	r2, #0
   18838:	cmp	r1, #10
   1883c:	beq	187f4 <__assert_fail@plt+0x7080>
   18840:	cmp	r8, #0
   18844:	beq	18850 <__assert_fail@plt+0x70dc>
   18848:	cmp	r0, #9
   1884c:	beq	187f4 <__assert_fail@plt+0x7080>
   18850:	ldr	r0, [r4, #84]	; 0x54
   18854:	str	r0, [sp, #24]
   18858:	ldr	r0, [sp, #12]
   1885c:	str	r0, [r4, #84]	; 0x54
   18860:	mov	r9, r8
   18864:	str	r8, [sp]
   18868:	ldr	r8, [fp, #12]
   1886c:	str	r8, [sp, #4]
   18870:	mov	r0, sl
   18874:	ldr	r1, [sp, #16]
   18878:	mov	r2, r5
   1887c:	ldr	r3, [sp, #20]
   18880:	bl	191b4 <__assert_fail@plt+0x7a40>
   18884:	mov	r2, r0
   18888:	cmp	r0, #0
   1888c:	bne	187e0 <__assert_fail@plt+0x706c>
   18890:	ldr	r0, [r8]
   18894:	cmp	r0, #0
   18898:	beq	187e0 <__assert_fail@plt+0x706c>
   1889c:	cmp	r6, #0
   188a0:	beq	188dc <__assert_fail@plt+0x7168>
   188a4:	movw	r1, #37792	; 0x93a0
   188a8:	movt	r1, #1
   188ac:	mov	r4, #0
   188b0:	mov	r0, r6
   188b4:	mov	r2, #0
   188b8:	bl	19328 <__assert_fail@plt+0x7bb4>
   188bc:	b	188c4 <__assert_fail@plt+0x7150>
   188c0:	mov	r4, r6
   188c4:	mov	r0, r4
   188c8:	sub	sp, fp, #28
   188cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188d0:	mov	r0, #12
   188d4:	ldr	r1, [fp, #12]
   188d8:	str	r0, [r1]
   188dc:	mov	r4, #0
   188e0:	b	188c4 <__assert_fail@plt+0x7150>
   188e4:	push	{fp, lr}
   188e8:	mov	fp, sp
   188ec:	sub	sp, sp, #8
   188f0:	mov	ip, #0
   188f4:	str	ip, [sp]
   188f8:	uxtb	ip, r3
   188fc:	ldr	r3, [sp, #4]
   18900:	bfc	r3, #0, #23
   18904:	orr	r3, r3, ip
   18908:	str	r3, [sp, #4]
   1890c:	mov	r3, sp
   18910:	bl	19960 <__assert_fail@plt+0x81ec>
   18914:	mov	sp, fp
   18918:	pop	{fp, pc}
   1891c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18920:	add	fp, sp, #28
   18924:	sub	sp, sp, #12
   18928:	mov	r7, r1
   1892c:	mov	sl, r0
   18930:	ldr	r0, [r1, #40]	; 0x28
   18934:	ldr	r1, [r1, #56]	; 0x38
   18938:	cmp	r1, r0
   1893c:	ble	18a18 <__assert_fail@plt+0x72a4>
   18940:	mov	r9, r2
   18944:	ldr	r1, [r7, #4]
   18948:	ldrb	r6, [r1, r0]
   1894c:	mov	r5, sl
   18950:	strb	r6, [r5], #4
   18954:	ldr	r4, [r5]
   18958:	bic	r0, r4, #6291456	; 0x600000
   1895c:	str	r0, [r5]
   18960:	ldr	r0, [r7, #80]	; 0x50
   18964:	movw	r8, #65280	; 0xff00
   18968:	movt	r8, #65439	; 0xff9f
   1896c:	cmp	r0, #2
   18970:	blt	18994 <__assert_fail@plt+0x7220>
   18974:	ldr	r1, [r7, #28]
   18978:	ldr	r0, [r7, #40]	; 0x28
   1897c:	cmp	r0, r1
   18980:	beq	18994 <__assert_fail@plt+0x7220>
   18984:	ldr	r1, [r7, #8]
   18988:	ldr	r0, [r1, r0, lsl #2]
   1898c:	cmn	r0, #1
   18990:	beq	18e4c <__assert_fail@plt+0x76d8>
   18994:	cmp	r6, #92	; 0x5c
   18998:	bne	18a28 <__assert_fail@plt+0x72b4>
   1899c:	ldr	r0, [r7, #40]	; 0x28
   189a0:	ldr	r1, [r7, #48]	; 0x30
   189a4:	add	r0, r0, #1
   189a8:	cmp	r0, r1
   189ac:	bge	18a7c <__assert_fail@plt+0x7308>
   189b0:	mov	r0, r7
   189b4:	bl	190d0 <__assert_fail@plt+0x795c>
   189b8:	mov	r6, r0
   189bc:	strb	r0, [sl]
   189c0:	and	r0, r4, r8
   189c4:	orr	r4, r0, #1
   189c8:	str	r4, [sl, #4]
   189cc:	ldr	r0, [r7, #80]	; 0x50
   189d0:	cmp	r0, #2
   189d4:	blt	18ca0 <__assert_fail@plt+0x752c>
   189d8:	ldr	r0, [r7, #40]	; 0x28
   189dc:	add	r1, r0, #1
   189e0:	mov	r0, r7
   189e4:	bl	19190 <__assert_fail@plt+0x7a1c>
   189e8:	mov	r7, r0
   189ec:	bl	11648 <iswalnum@plt>
   189f0:	cmp	r0, #0
   189f4:	movwne	r0, #1
   189f8:	sub	r1, r7, #95	; 0x5f
   189fc:	clz	r1, r1
   18a00:	lsr	r1, r1, #5
   18a04:	orr	r0, r1, r0
   18a08:	ldr	r1, [r5]
   18a0c:	bic	r1, r1, #4194304	; 0x400000
   18a10:	orr	r0, r1, r0, lsl #22
   18a14:	b	18cc0 <__assert_fail@plt+0x754c>
   18a18:	mov	r0, #2
   18a1c:	strb	r0, [sl, #4]
   18a20:	mov	r8, #0
   18a24:	b	190c4 <__assert_fail@plt+0x7950>
   18a28:	and	r0, r4, r8
   18a2c:	orr	r4, r0, #1
   18a30:	str	r4, [r5]
   18a34:	ldr	r0, [r7, #80]	; 0x50
   18a38:	cmp	r0, #2
   18a3c:	blt	18a88 <__assert_fail@plt+0x7314>
   18a40:	ldr	r1, [r7, #40]	; 0x28
   18a44:	mov	r0, r7
   18a48:	bl	19190 <__assert_fail@plt+0x7a1c>
   18a4c:	mov	r4, r0
   18a50:	bl	11648 <iswalnum@plt>
   18a54:	cmp	r0, #0
   18a58:	movwne	r0, #1
   18a5c:	sub	r1, r4, #95	; 0x5f
   18a60:	clz	r1, r1
   18a64:	lsr	r1, r1, #5
   18a68:	orr	r0, r1, r0
   18a6c:	ldr	r1, [r5]
   18a70:	bic	r1, r1, #4194304	; 0x400000
   18a74:	orr	r0, r1, r0, lsl #22
   18a78:	b	18aa8 <__assert_fail@plt+0x7334>
   18a7c:	and	r0, r4, r8
   18a80:	orr	r0, r0, #36	; 0x24
   18a84:	b	18e58 <__assert_fail@plt+0x76e4>
   18a88:	bl	11600 <__ctype_b_loc@plt>
   18a8c:	ldr	r0, [r0]
   18a90:	add	r0, r0, r6, lsl #1
   18a94:	ldrh	r0, [r0]
   18a98:	ubfx	r0, r0, #3, #1
   18a9c:	cmp	r6, #95	; 0x5f
   18aa0:	movweq	r0, #1
   18aa4:	orr	r0, r4, r0, lsl #22
   18aa8:	str	r0, [r5]
   18aac:	sub	r1, r6, #10
   18ab0:	mov	r8, #1
   18ab4:	cmp	r1, #115	; 0x73
   18ab8:	bhi	190c4 <__assert_fail@plt+0x7950>
   18abc:	add	r2, pc, #0
   18ac0:	ldr	pc, [r2, r1, lsl #2]
   18ac4:	muleq	r1, r4, ip
   18ac8:	andeq	r9, r1, r4, asr #1
   18acc:	andeq	r9, r1, r4, asr #1
   18ad0:	andeq	r9, r1, r4, asr #1
   18ad4:	andeq	r9, r1, r4, asr #1
   18ad8:	andeq	r9, r1, r4, asr #1
   18adc:	andeq	r9, r1, r4, asr #1
   18ae0:	andeq	r9, r1, r4, asr #1
   18ae4:	andeq	r9, r1, r4, asr #1
   18ae8:	andeq	r9, r1, r4, asr #1
   18aec:	andeq	r9, r1, r4, asr #1
   18af0:	andeq	r9, r1, r4, asr #1
   18af4:	andeq	r9, r1, r4, asr #1
   18af8:	andeq	r9, r1, r4, asr #1
   18afc:	andeq	r9, r1, r4, asr #1
   18b00:	andeq	r9, r1, r4, asr #1
   18b04:	andeq	r9, r1, r4, asr #1
   18b08:	andeq	r9, r1, r4, asr #1
   18b0c:	andeq	r9, r1, r4, asr #1
   18b10:	andeq	r9, r1, r4, asr #1
   18b14:	andeq	r9, r1, r4, asr #1
   18b18:	andeq	r9, r1, r4, asr #1
   18b1c:	andeq	r9, r1, r4, asr #1
   18b20:	andeq	r9, r1, r4, asr #1
   18b24:	andeq	r9, r1, r4, asr #1
   18b28:	andeq	r9, r1, r4, asr #1
   18b2c:	andeq	r8, r1, r4, ror #28
   18b30:	andeq	r9, r1, r4, asr #1
   18b34:	andeq	r9, r1, r4, asr #1
   18b38:	andeq	r9, r1, r4, asr #1
   18b3c:	andeq	r8, r1, r4, asr #29
   18b40:	ldrdeq	r8, [r1], -r0
   18b44:	ldrdeq	r8, [r1], -ip
   18b48:	andeq	r8, r1, r4, ror #29
   18b4c:	andeq	r9, r1, r4, asr #1
   18b50:	andeq	r9, r1, r4, asr #1
   18b54:	strdeq	r8, [r1], -r4
   18b58:	andeq	r9, r1, r4, asr #1
   18b5c:	andeq	r9, r1, r4, asr #1
   18b60:	andeq	r9, r1, r4, asr #1
   18b64:	andeq	r9, r1, r4, asr #1
   18b68:	andeq	r9, r1, r4, asr #1
   18b6c:	andeq	r9, r1, r4, asr #1
   18b70:	andeq	r9, r1, r4, asr #1
   18b74:	andeq	r9, r1, r4, asr #1
   18b78:	andeq	r9, r1, r4, asr #1
   18b7c:	andeq	r9, r1, r4, asr #1
   18b80:	andeq	r9, r1, r4, asr #1
   18b84:	andeq	r9, r1, r4, asr #1
   18b88:	andeq	r9, r1, r4, asr #1
   18b8c:	andeq	r9, r1, r4, asr #1
   18b90:	andeq	r9, r1, r4, asr #1
   18b94:	andeq	r9, r1, r4, asr #1
   18b98:	strdeq	r8, [r1], -ip
   18b9c:	andeq	r9, r1, r4, asr #1
   18ba0:	andeq	r9, r1, r4, asr #1
   18ba4:	andeq	r9, r1, r4, asr #1
   18ba8:	andeq	r9, r1, r4, asr #1
   18bac:	andeq	r9, r1, r4, asr #1
   18bb0:	andeq	r9, r1, r4, asr #1
   18bb4:	andeq	r9, r1, r4, asr #1
   18bb8:	andeq	r9, r1, r4, asr #1
   18bbc:	andeq	r9, r1, r4, asr #1
   18bc0:	andeq	r9, r1, r4, asr #1
   18bc4:	andeq	r9, r1, r4, asr #1
   18bc8:	andeq	r9, r1, r4, asr #1
   18bcc:	andeq	r9, r1, r4, asr #1
   18bd0:	andeq	r9, r1, r4, asr #1
   18bd4:	andeq	r9, r1, r4, asr #1
   18bd8:	andeq	r9, r1, r4, asr #1
   18bdc:	andeq	r9, r1, r4, asr #1
   18be0:	andeq	r9, r1, r4, asr #1
   18be4:	andeq	r9, r1, r4, asr #1
   18be8:	andeq	r9, r1, r4, asr #1
   18bec:	andeq	r9, r1, r4, asr #1
   18bf0:	andeq	r9, r1, r4, asr #1
   18bf4:	andeq	r9, r1, r4, asr #1
   18bf8:	andeq	r9, r1, r4, asr #1
   18bfc:	andeq	r9, r1, r4, asr #1
   18c00:	andeq	r9, r1, r4, asr #1
   18c04:	andeq	r9, r1, r4, asr #1
   18c08:	andeq	r8, r1, ip, lsl #30
   18c0c:	andeq	r9, r1, r4, asr #1
   18c10:	andeq	r9, r1, r4, asr #1
   18c14:	andeq	r8, r1, r4, lsl pc
   18c18:	andeq	r9, r1, r4, asr #1
   18c1c:	andeq	r9, r1, r4, asr #1
   18c20:	andeq	r9, r1, r4, asr #1
   18c24:	andeq	r9, r1, r4, asr #1
   18c28:	andeq	r9, r1, r4, asr #1
   18c2c:	andeq	r9, r1, r4, asr #1
   18c30:	andeq	r9, r1, r4, asr #1
   18c34:	andeq	r9, r1, r4, asr #1
   18c38:	andeq	r9, r1, r4, asr #1
   18c3c:	andeq	r9, r1, r4, asr #1
   18c40:	andeq	r9, r1, r4, asr #1
   18c44:	andeq	r9, r1, r4, asr #1
   18c48:	andeq	r9, r1, r4, asr #1
   18c4c:	andeq	r9, r1, r4, asr #1
   18c50:	andeq	r9, r1, r4, asr #1
   18c54:	andeq	r9, r1, r4, asr #1
   18c58:	andeq	r9, r1, r4, asr #1
   18c5c:	andeq	r9, r1, r4, asr #1
   18c60:	andeq	r9, r1, r4, asr #1
   18c64:	andeq	r9, r1, r4, asr #1
   18c68:	andeq	r9, r1, r4, asr #1
   18c6c:	andeq	r9, r1, r4, asr #1
   18c70:	andeq	r9, r1, r4, asr #1
   18c74:	andeq	r9, r1, r4, asr #1
   18c78:	andeq	r9, r1, r4, asr #1
   18c7c:	andeq	r9, r1, r4, asr #1
   18c80:	andeq	r9, r1, r4, asr #1
   18c84:	andeq	r9, r1, r4, asr #1
   18c88:	andeq	r8, r1, ip, lsr pc
   18c8c:	andeq	r8, r1, ip, asr #30
   18c90:	andeq	r8, r1, r0, ror #30
   18c94:	tst	r9, #2048	; 0x800
   18c98:	bne	18f58 <__assert_fail@plt+0x77e4>
   18c9c:	b	190c4 <__assert_fail@plt+0x7950>
   18ca0:	bl	11600 <__ctype_b_loc@plt>
   18ca4:	ldr	r0, [r0]
   18ca8:	add	r0, r0, r6, lsl #1
   18cac:	ldrh	r0, [r0]
   18cb0:	ubfx	r0, r0, #3, #1
   18cb4:	cmp	r6, #95	; 0x5f
   18cb8:	movweq	r0, #1
   18cbc:	orr	r0, r4, r0, lsl #22
   18cc0:	str	r0, [r5]
   18cc4:	sub	r1, r6, #39	; 0x27
   18cc8:	mov	r8, #2
   18ccc:	cmp	r1, #86	; 0x56
   18cd0:	bhi	190c4 <__assert_fail@plt+0x7950>
   18cd4:	add	r2, pc, #0
   18cd8:	ldr	pc, [r2, r1, lsl #2]
   18cdc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18ce0:	andeq	r8, r1, ip, lsr #31
   18ce4:			; <UNDEFINED> instruction: 0x00018fbc
   18ce8:	andeq	r9, r1, r4, asr #1
   18cec:	andeq	r8, r1, ip, asr #31
   18cf0:	andeq	r9, r1, r4, asr #1
   18cf4:	andeq	r9, r1, r4, asr #1
   18cf8:	andeq	r9, r1, r4, asr #1
   18cfc:	andeq	r9, r1, r4, asr #1
   18d00:	andeq	r9, r1, r4, asr #1
   18d04:	andeq	r8, r1, r8, lsr lr
   18d08:	andeq	r8, r1, r8, lsr lr
   18d0c:	andeq	r8, r1, r8, lsr lr
   18d10:	andeq	r8, r1, r8, lsr lr
   18d14:	andeq	r8, r1, r8, lsr lr
   18d18:	andeq	r8, r1, r8, lsr lr
   18d1c:	andeq	r8, r1, r8, lsr lr
   18d20:	andeq	r8, r1, r8, lsr lr
   18d24:	andeq	r8, r1, r8, lsr lr
   18d28:	andeq	r9, r1, r4, asr #1
   18d2c:	andeq	r9, r1, r4, asr #1
   18d30:	andeq	r8, r1, r4, ror #31
   18d34:	andeq	r9, r1, r4, asr #1
   18d38:	strdeq	r8, [r1], -r4
   18d3c:	andeq	r9, r1, r4
   18d40:	andeq	r9, r1, r4, asr #1
   18d44:	andeq	r9, r1, r4, asr #1
   18d48:	andeq	r9, r1, ip, lsl r0
   18d4c:	andeq	r9, r1, r4, asr #1
   18d50:	andeq	r9, r1, r4, asr #1
   18d54:	andeq	r9, r1, r4, asr #1
   18d58:	andeq	r9, r1, r4, asr #1
   18d5c:	andeq	r9, r1, r4, asr #1
   18d60:	andeq	r9, r1, r4, asr #1
   18d64:	andeq	r9, r1, r4, asr #1
   18d68:	andeq	r9, r1, r4, asr #1
   18d6c:	andeq	r9, r1, r4, asr #1
   18d70:	andeq	r9, r1, r4, asr #1
   18d74:	andeq	r9, r1, r4, asr #1
   18d78:	andeq	r9, r1, r4, asr #1
   18d7c:	andeq	r9, r1, r4, asr #1
   18d80:	andeq	r9, r1, r4, asr #1
   18d84:	andeq	r9, r1, r4, asr #1
   18d88:	andeq	r9, r1, r4, asr #1
   18d8c:	andeq	r9, r1, ip, lsr #32
   18d90:	andeq	r9, r1, r4, asr #1
   18d94:	andeq	r9, r1, r4, asr #1
   18d98:	andeq	r9, r1, r4, asr #1
   18d9c:	andeq	r9, r1, ip, lsr r0
   18da0:	andeq	r9, r1, r4, asr #1
   18da4:	andeq	r9, r1, r4, asr #1
   18da8:	andeq	r9, r1, r4, asr #1
   18dac:	andeq	r9, r1, r4, asr #1
   18db0:	andeq	r9, r1, r4, asr #1
   18db4:	andeq	r9, r1, r4, asr #1
   18db8:	andeq	r9, r1, r4, asr #1
   18dbc:	andeq	r9, r1, r4, asr #1
   18dc0:	andeq	r9, r1, ip, asr #32
   18dc4:	andeq	r9, r1, r4, asr #1
   18dc8:	andeq	r9, r1, ip, asr r0
   18dcc:	andeq	r9, r1, r4, asr #1
   18dd0:	andeq	r9, r1, r4, asr #1
   18dd4:	andeq	r9, r1, r4, asr #1
   18dd8:	andeq	r9, r1, r4, asr #1
   18ddc:	andeq	r9, r1, r4, asr #1
   18de0:	andeq	r9, r1, r4, asr #1
   18de4:	andeq	r9, r1, r4, asr #1
   18de8:	andeq	r9, r1, r4, asr #1
   18dec:	andeq	r9, r1, r4, asr #1
   18df0:	andeq	r9, r1, r4, asr #1
   18df4:	andeq	r9, r1, r4, asr #1
   18df8:	andeq	r9, r1, r4, asr #1
   18dfc:	andeq	r9, r1, r4, asr #1
   18e00:	andeq	r9, r1, r4, asr #1
   18e04:	andeq	r9, r1, r4, asr #1
   18e08:	andeq	r9, r1, r4, asr #1
   18e0c:	andeq	r9, r1, ip, rrx
   18e10:	andeq	r9, r1, r4, asr #1
   18e14:	andeq	r9, r1, r4, asr #1
   18e18:	andeq	r9, r1, r4, asr #1
   18e1c:	andeq	r9, r1, ip, ror r0
   18e20:	andeq	r9, r1, r4, asr #1
   18e24:	andeq	r9, r1, r4, asr #1
   18e28:	andeq	r9, r1, r4, asr #1
   18e2c:	andeq	r9, r1, ip, lsl #1
   18e30:	andeq	r9, r1, r0, lsr #1
   18e34:	andeq	r9, r1, ip, lsr #1
   18e38:	tst	r9, #16384	; 0x4000
   18e3c:	bne	190c4 <__assert_fail@plt+0x7950>
   18e40:	sub	r1, r6, #49	; 0x31
   18e44:	mov	r2, #4
   18e48:	b	18f2c <__assert_fail@plt+0x77b8>
   18e4c:	and	r0, r4, r8
   18e50:	orr	r0, r0, #1
   18e54:	orr	r0, r0, #2097152	; 0x200000
   18e58:	str	r0, [r5]
   18e5c:	mov	r8, #1
   18e60:	b	190c4 <__assert_fail@plt+0x7950>
   18e64:	tst	r9, #8
   18e68:	bne	18eb0 <__assert_fail@plt+0x773c>
   18e6c:	ldr	r0, [r7, #40]	; 0x28
   18e70:	ldr	r1, [r7, #48]	; 0x30
   18e74:	add	r0, r0, #1
   18e78:	cmp	r0, r1
   18e7c:	beq	18eb0 <__assert_fail@plt+0x773c>
   18e80:	str	r0, [r7, #40]	; 0x28
   18e84:	add	r0, sp, #4
   18e88:	mov	r1, r7
   18e8c:	mov	r2, r9
   18e90:	bl	1891c <__assert_fail@plt+0x71a8>
   18e94:	ldr	r0, [r7, #40]	; 0x28
   18e98:	sub	r0, r0, #1
   18e9c:	str	r0, [r7, #40]	; 0x28
   18ea0:	ldrb	r0, [sp, #8]
   18ea4:	sub	r0, r0, #9
   18ea8:	cmp	r0, #1
   18eac:	bhi	190c4 <__assert_fail@plt+0x7950>
   18eb0:	mov	r0, #32
   18eb4:	str	r0, [sl]
   18eb8:	mov	r0, #12
   18ebc:	strb	r0, [sl, #4]
   18ec0:	b	190c4 <__assert_fail@plt+0x7950>
   18ec4:	tst	r9, #8192	; 0x2000
   18ec8:	bne	18fb4 <__assert_fail@plt+0x7840>
   18ecc:	b	190c4 <__assert_fail@plt+0x7950>
   18ed0:	tst	r9, #8192	; 0x2000
   18ed4:	bne	18fc4 <__assert_fail@plt+0x7850>
   18ed8:	b	190c4 <__assert_fail@plt+0x7950>
   18edc:	mov	r1, #11
   18ee0:	b	190bc <__assert_fail@plt+0x7948>
   18ee4:	movw	r1, #1026	; 0x402
   18ee8:	tst	r9, r1
   18eec:	bne	190c4 <__assert_fail@plt+0x7950>
   18ef0:	b	18fdc <__assert_fail@plt+0x7868>
   18ef4:	mov	r1, #5
   18ef8:	b	190bc <__assert_fail@plt+0x7948>
   18efc:	movw	r1, #1026	; 0x402
   18f00:	tst	r9, r1
   18f04:	bne	190c4 <__assert_fail@plt+0x7950>
   18f08:	b	19014 <__assert_fail@plt+0x78a0>
   18f0c:	mov	r1, #20
   18f10:	b	190bc <__assert_fail@plt+0x7948>
   18f14:	movw	r1, #8
   18f18:	movt	r1, #128	; 0x80
   18f1c:	tst	r9, r1
   18f20:	beq	18f70 <__assert_fail@plt+0x77fc>
   18f24:	mov	r1, #16
   18f28:	mov	r2, #12
   18f2c:	bfi	r0, r2, #0, #8
   18f30:	str	r1, [sl]
   18f34:	str	r0, [sl, #4]
   18f38:	b	190c4 <__assert_fail@plt+0x7950>
   18f3c:	and	r1, r9, #4608	; 0x1200
   18f40:	cmp	r1, #4608	; 0x1200
   18f44:	beq	19098 <__assert_fail@plt+0x7924>
   18f48:	b	190c4 <__assert_fail@plt+0x7950>
   18f4c:	and	r1, r9, #33792	; 0x8400
   18f50:	cmp	r1, #32768	; 0x8000
   18f54:	bne	190c4 <__assert_fail@plt+0x7950>
   18f58:	mov	r1, #10
   18f5c:	b	190bc <__assert_fail@plt+0x7948>
   18f60:	and	r1, r9, #4608	; 0x1200
   18f64:	cmp	r1, #4608	; 0x1200
   18f68:	beq	190b8 <__assert_fail@plt+0x7944>
   18f6c:	b	190c4 <__assert_fail@plt+0x7950>
   18f70:	ldr	r1, [r7, #40]	; 0x28
   18f74:	cmp	r1, #0
   18f78:	beq	18f24 <__assert_fail@plt+0x77b0>
   18f7c:	tst	r9, #2048	; 0x800
   18f80:	beq	190c4 <__assert_fail@plt+0x7950>
   18f84:	ldr	r2, [r7, #4]
   18f88:	add	r1, r1, r2
   18f8c:	ldrb	r1, [r1, #-1]
   18f90:	cmp	r1, #10
   18f94:	beq	18f24 <__assert_fail@plt+0x77b0>
   18f98:	b	190c4 <__assert_fail@plt+0x7950>
   18f9c:	tst	r9, #524288	; 0x80000
   18fa0:	bne	190c4 <__assert_fail@plt+0x7950>
   18fa4:	mov	r1, #128	; 0x80
   18fa8:	b	18f28 <__assert_fail@plt+0x77b4>
   18fac:	tst	r9, #8192	; 0x2000
   18fb0:	bne	190c4 <__assert_fail@plt+0x7950>
   18fb4:	mov	r1, #8
   18fb8:	b	190bc <__assert_fail@plt+0x7948>
   18fbc:	tst	r9, #8192	; 0x2000
   18fc0:	bne	190c4 <__assert_fail@plt+0x7950>
   18fc4:	mov	r1, #9
   18fc8:	b	190bc <__assert_fail@plt+0x7948>
   18fcc:	movw	r1, #1026	; 0x402
   18fd0:	and	r1, r9, r1
   18fd4:	cmp	r1, #2
   18fd8:	bne	190c4 <__assert_fail@plt+0x7950>
   18fdc:	mov	r1, #18
   18fe0:	b	190bc <__assert_fail@plt+0x7948>
   18fe4:	tst	r9, #524288	; 0x80000
   18fe8:	bne	190c4 <__assert_fail@plt+0x7950>
   18fec:	mov	r1, #6
   18ff0:	b	18f28 <__assert_fail@plt+0x77b4>
   18ff4:	tst	r9, #524288	; 0x80000
   18ff8:	bne	190c4 <__assert_fail@plt+0x7950>
   18ffc:	mov	r1, #9
   19000:	b	18f28 <__assert_fail@plt+0x77b4>
   19004:	movw	r1, #1026	; 0x402
   19008:	and	r1, r9, r1
   1900c:	cmp	r1, #2
   19010:	bne	190c4 <__assert_fail@plt+0x7950>
   19014:	mov	r1, #19
   19018:	b	190bc <__assert_fail@plt+0x7948>
   1901c:	tst	r9, #524288	; 0x80000
   19020:	bne	190c4 <__assert_fail@plt+0x7950>
   19024:	mov	r1, #512	; 0x200
   19028:	b	18f28 <__assert_fail@plt+0x77b4>
   1902c:	tst	r9, #524288	; 0x80000
   19030:	bne	190c4 <__assert_fail@plt+0x7950>
   19034:	mov	r1, #35	; 0x23
   19038:	b	190bc <__assert_fail@plt+0x7948>
   1903c:	tst	r9, #524288	; 0x80000
   19040:	bne	190c4 <__assert_fail@plt+0x7950>
   19044:	mov	r1, #33	; 0x21
   19048:	b	190bc <__assert_fail@plt+0x7948>
   1904c:	tst	r9, #524288	; 0x80000
   19050:	bne	190c4 <__assert_fail@plt+0x7950>
   19054:	mov	r1, #64	; 0x40
   19058:	b	18f28 <__assert_fail@plt+0x77b4>
   1905c:	tst	r9, #524288	; 0x80000
   19060:	bne	190c4 <__assert_fail@plt+0x7950>
   19064:	mov	r1, #256	; 0x100
   19068:	b	18f28 <__assert_fail@plt+0x77b4>
   1906c:	tst	r9, #524288	; 0x80000
   19070:	bne	190c4 <__assert_fail@plt+0x7950>
   19074:	mov	r1, #34	; 0x22
   19078:	b	190bc <__assert_fail@plt+0x7948>
   1907c:	tst	r9, #524288	; 0x80000
   19080:	bne	190c4 <__assert_fail@plt+0x7950>
   19084:	mov	r1, #32
   19088:	b	190bc <__assert_fail@plt+0x7948>
   1908c:	and	r1, r9, #4608	; 0x1200
   19090:	cmp	r1, #512	; 0x200
   19094:	bne	190c4 <__assert_fail@plt+0x7950>
   19098:	mov	r1, #23
   1909c:	b	190bc <__assert_fail@plt+0x7948>
   190a0:	tst	r9, #33792	; 0x8400
   190a4:	bne	190c4 <__assert_fail@plt+0x7950>
   190a8:	b	18f58 <__assert_fail@plt+0x77e4>
   190ac:	and	r1, r9, #4608	; 0x1200
   190b0:	cmp	r1, #512	; 0x200
   190b4:	bne	190c4 <__assert_fail@plt+0x7950>
   190b8:	mov	r1, #24
   190bc:	bfi	r0, r1, #0, #8
   190c0:	str	r0, [r5]
   190c4:	mov	r0, r8
   190c8:	sub	sp, fp, #28
   190cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190d0:	push	{fp, lr}
   190d4:	mov	fp, sp
   190d8:	ldrb	r1, [r0, #75]	; 0x4b
   190dc:	cmp	r1, #0
   190e0:	bne	19100 <__assert_fail@plt+0x798c>
   190e4:	ldr	r1, [r0, #4]
   190e8:	ldr	r0, [r0, #40]	; 0x28
   190ec:	add	r0, r0, r1
   190f0:	add	r0, r0, #1
   190f4:	ldrb	r3, [r0]
   190f8:	uxtb	r0, r3
   190fc:	pop	{fp, pc}
   19100:	ldr	r1, [r0, #80]	; 0x50
   19104:	cmp	r1, #2
   19108:	blt	19140 <__assert_fail@plt+0x79cc>
   1910c:	ldr	r2, [r0, #8]
   19110:	ldr	r3, [r0, #40]	; 0x28
   19114:	add	ip, r3, #1
   19118:	ldr	r1, [r2, ip, lsl #2]
   1911c:	cmn	r1, #1
   19120:	beq	19184 <__assert_fail@plt+0x7a10>
   19124:	ldr	r1, [r0, #28]
   19128:	add	r3, r3, #2
   1912c:	cmp	r1, r3
   19130:	beq	19140 <__assert_fail@plt+0x79cc>
   19134:	ldr	r1, [r2, r3, lsl #2]
   19138:	cmn	r1, #1
   1913c:	beq	19184 <__assert_fail@plt+0x7a10>
   19140:	ldrb	lr, [r0, #76]	; 0x4c
   19144:	ldr	r1, [r0, #40]	; 0x28
   19148:	add	ip, r1, #1
   1914c:	cmp	lr, #0
   19150:	mov	r3, ip
   19154:	beq	19160 <__assert_fail@plt+0x79ec>
   19158:	ldr	r3, [r0, #12]
   1915c:	ldr	r3, [r3, ip, lsl #2]
   19160:	ldr	r1, [r0]
   19164:	ldr	r2, [r0, #24]
   19168:	add	r2, r2, r3
   1916c:	add	r1, r1, r2
   19170:	ldrsb	r3, [r1]
   19174:	cmp	lr, #0
   19178:	beq	190f8 <__assert_fail@plt+0x7984>
   1917c:	cmn	r3, #1
   19180:	bgt	190f8 <__assert_fail@plt+0x7984>
   19184:	ldr	r0, [r0, #4]
   19188:	add	r0, r0, ip
   1918c:	b	190f4 <__assert_fail@plt+0x7980>
   19190:	ldr	r2, [r0, #80]	; 0x50
   19194:	cmp	r2, #1
   19198:	bne	191a8 <__assert_fail@plt+0x7a34>
   1919c:	ldr	r0, [r0, #4]
   191a0:	ldrb	r0, [r0, r1]
   191a4:	bx	lr
   191a8:	ldr	r0, [r0, #8]
   191ac:	ldr	r0, [r0, r1, lsl #2]
   191b0:	bx	lr
   191b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191b8:	add	fp, sp, #28
   191bc:	sub	sp, sp, #20
   191c0:	mov	r6, r2
   191c4:	mov	r7, r1
   191c8:	mov	r1, r0
   191cc:	ldr	r0, [r7]
   191d0:	str	r0, [sp, #8]
   191d4:	ldr	r5, [fp, #12]
   191d8:	str	r5, [sp, #4]
   191dc:	ldr	r4, [fp, #8]
   191e0:	str	r4, [sp]
   191e4:	str	r1, [sp, #12]
   191e8:	mov	r0, r1
   191ec:	mov	r1, r7
   191f0:	str	r3, [sp, #16]
   191f4:	bl	193b8 <__assert_fail@plt+0x7c44>
   191f8:	cmp	r0, #0
   191fc:	bne	19234 <__assert_fail@plt+0x7ac0>
   19200:	ldr	r1, [r5]
   19204:	cmp	r1, #0
   19208:	beq	19234 <__assert_fail@plt+0x7ac0>
   1920c:	mov	r6, #0
   19210:	b	192b8 <__assert_fail@plt+0x7b44>
   19214:	ldr	r0, [sp, #8]
   19218:	mov	r1, r5
   1921c:	mov	r2, r8
   19220:	mov	r3, #16
   19224:	bl	188e4 <__assert_fail@plt+0x7170>
   19228:	cmp	r0, #0
   1922c:	mov	r4, r9
   19230:	beq	192c4 <__assert_fail@plt+0x7b50>
   19234:	mov	r5, r0
   19238:	ldrb	r0, [r6, #4]
   1923c:	orr	r1, r0, #8
   19240:	cmp	r1, #10
   19244:	beq	192b4 <__assert_fail@plt+0x7b40>
   19248:	cmp	r4, #0
   1924c:	beq	19258 <__assert_fail@plt+0x7ae4>
   19250:	cmp	r0, #9
   19254:	beq	192b4 <__assert_fail@plt+0x7b40>
   19258:	mov	r9, r4
   1925c:	str	r4, [sp]
   19260:	ldr	sl, [fp, #12]
   19264:	str	sl, [sp, #4]
   19268:	ldr	r0, [sp, #12]
   1926c:	mov	r1, r7
   19270:	mov	r2, r6
   19274:	ldr	r3, [sp, #16]
   19278:	bl	193b8 <__assert_fail@plt+0x7c44>
   1927c:	mov	r8, r0
   19280:	cmp	r0, #0
   19284:	bne	19294 <__assert_fail@plt+0x7b20>
   19288:	ldr	r0, [sl]
   1928c:	cmp	r0, #0
   19290:	bne	19300 <__assert_fail@plt+0x7b8c>
   19294:	cmp	r5, #0
   19298:	cmpne	r8, #0
   1929c:	bne	19214 <__assert_fail@plt+0x7aa0>
   192a0:	cmp	r5, #0
   192a4:	movne	r8, r5
   192a8:	mov	r0, r8
   192ac:	mov	r4, r9
   192b0:	b	19234 <__assert_fail@plt+0x7ac0>
   192b4:	mov	r6, r5
   192b8:	mov	r0, r6
   192bc:	sub	sp, fp, #28
   192c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192c4:	movw	r4, #37792	; 0x93a0
   192c8:	movt	r4, #1
   192cc:	mov	r6, #0
   192d0:	mov	r0, r8
   192d4:	mov	r1, r4
   192d8:	mov	r2, #0
   192dc:	bl	19328 <__assert_fail@plt+0x7bb4>
   192e0:	mov	r0, r5
   192e4:	mov	r1, r4
   192e8:	mov	r2, #0
   192ec:	bl	19328 <__assert_fail@plt+0x7bb4>
   192f0:	mov	r0, #12
   192f4:	ldr	r1, [fp, #12]
   192f8:	str	r0, [r1]
   192fc:	b	192b8 <__assert_fail@plt+0x7b44>
   19300:	cmp	r5, #0
   19304:	mov	r6, #0
   19308:	beq	192b8 <__assert_fail@plt+0x7b44>
   1930c:	movw	r1, #37792	; 0x93a0
   19310:	movt	r1, #1
   19314:	mov	r6, #0
   19318:	mov	r0, r5
   1931c:	mov	r2, #0
   19320:	bl	19328 <__assert_fail@plt+0x7bb4>
   19324:	b	192b8 <__assert_fail@plt+0x7b44>
   19328:	push	{r4, r5, r6, sl, fp, lr}
   1932c:	add	fp, sp, #16
   19330:	mov	r4, r2
   19334:	mov	r5, r1
   19338:	b	19340 <__assert_fail@plt+0x7bcc>
   1933c:	ldr	r0, [r6, #8]
   19340:	mov	r6, r0
   19344:	ldr	r0, [r0, #4]
   19348:	cmp	r0, #0
   1934c:	bne	19340 <__assert_fail@plt+0x7bcc>
   19350:	ldr	r0, [r6, #8]
   19354:	cmp	r0, #0
   19358:	bne	1933c <__assert_fail@plt+0x7bc8>
   1935c:	mov	r0, r4
   19360:	mov	r1, r6
   19364:	blx	r5
   19368:	cmp	r0, #0
   1936c:	bne	1939c <__assert_fail@plt+0x7c28>
   19370:	ldr	r1, [r6]
   19374:	cmp	r1, #0
   19378:	beq	1939c <__assert_fail@plt+0x7c28>
   1937c:	ldr	r0, [r1, #8]
   19380:	cmp	r0, r6
   19384:	mov	r6, r1
   19388:	beq	1935c <__assert_fail@plt+0x7be8>
   1938c:	cmp	r0, #0
   19390:	mov	r6, r1
   19394:	beq	1935c <__assert_fail@plt+0x7be8>
   19398:	b	19340 <__assert_fail@plt+0x7bcc>
   1939c:	pop	{r4, r5, r6, sl, fp, pc}
   193a0:	push	{fp, lr}
   193a4:	mov	fp, sp
   193a8:	add	r0, r1, #20
   193ac:	bl	17360 <__assert_fail@plt+0x5bec>
   193b0:	mov	r0, #0
   193b4:	pop	{fp, pc}
   193b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193bc:	add	fp, sp, #28
   193c0:	sub	sp, sp, #12
   193c4:	mov	r9, r3
   193c8:	mov	r5, r2
   193cc:	mov	r6, r1
   193d0:	mov	sl, r0
   193d4:	and	ip, r3, #16
   193d8:	and	r8, r3, #32
   193dc:	and	r0, r3, #16777216	; 0x1000000
   193e0:	str	r0, [sp, #8]
   193e4:	ldr	r3, [fp, #12]
   193e8:	ldr	r4, [fp, #8]
   193ec:	mvn	r1, #0
   193f0:	ldr	r0, [r5, #4]
   193f4:	uxtab	r1, r1, r0
   193f8:	ldr	r7, [r6]
   193fc:	add	r2, pc, #0
   19400:	ldr	pc, [r2, r1, lsl #2]
   19404:	andeq	r9, r1, ip, lsl #11
   19408:	andeq	r9, r1, r4, asr #18
   1940c:	andeq	r9, r1, r0, ror #18
   19410:	andeq	r9, r1, r8, asr #12
   19414:	andeq	r9, r1, r4, lsr #13
   19418:	andeq	r9, r1, r0, ror #18
   1941c:	andeq	r9, r1, r0, ror #18
   19420:	andeq	r9, r1, r8, ror #13
   19424:	andeq	r9, r1, r4, asr #10
   19428:	andeq	r9, r1, r4, asr #18
   1942c:	andeq	r9, r1, r0, lsr #9
   19430:	andeq	r9, r1, r0, lsl r7
   19434:	andeq	r9, r1, r0, ror #18
   19438:	andeq	r9, r1, r0, ror #18
   1943c:	andeq	r9, r1, r0, ror #18
   19440:	andeq	r9, r1, r0, ror #18
   19444:	andeq	r9, r1, r0, ror #18
   19448:	andeq	r9, r1, r0, lsr #9
   1944c:	andeq	r9, r1, r0, lsr #9
   19450:	andeq	r9, r1, r0, asr r7
   19454:	andeq	r9, r1, r0, ror #18
   19458:	andeq	r9, r1, r0, ror #18
   1945c:	muleq	r1, r4, r4
   19460:	andeq	r9, r1, r4, asr r5
   19464:	andeq	r9, r1, r0, ror #18
   19468:	andeq	r9, r1, r0, ror #18
   1946c:	andeq	r9, r1, r0, ror #18
   19470:	andeq	r9, r1, r0, ror #18
   19474:	andeq	r9, r1, r0, ror #18
   19478:	andeq	r9, r1, r0, ror #18
   1947c:	andeq	r9, r1, r0, ror #18
   19480:	ldrdeq	r9, [r1], -r4
   19484:	ldrdeq	r9, [r1], -r4
   19488:	andeq	r9, r1, r8, lsl #10
   1948c:	andeq	r9, r1, r8, lsl #10
   19490:	andeq	r9, r1, r8, asr #16
   19494:	ldr	r1, [sp, #8]
   19498:	cmp	r1, #0
   1949c:	bne	19914 <__assert_fail@plt+0x81a0>
   194a0:	cmp	r8, #0
   194a4:	bne	19914 <__assert_fail@plt+0x81a0>
   194a8:	cmp	ip, #0
   194ac:	beq	19544 <__assert_fail@plt+0x7dd0>
   194b0:	mov	r0, r5
   194b4:	mov	r1, sl
   194b8:	mov	r2, r9
   194bc:	mov	r7, ip
   194c0:	bl	1875c <__assert_fail@plt+0x6fe8>
   194c4:	mvn	r1, #0
   194c8:	mov	ip, r7
   194cc:	ldr	r3, [fp, #12]
   194d0:	b	193f0 <__assert_fail@plt+0x7c7c>
   194d4:	mov	r8, sl
   194d8:	ldr	r1, [sl, #64]	; 0x40
   194dc:	mvn	r2, #32
   194e0:	uxtab	r0, r2, r0
   194e4:	clz	r0, r0
   194e8:	lsr	r0, r0, #5
   194ec:	stm	sp, {r0, r3}
   194f0:	movw	r2, #22950	; 0x59a6
   194f4:	movt	r2, #2
   194f8:	mov	r4, r3
   194fc:	movw	r3, #21729	; 0x54e1
   19500:	movt	r3, #2
   19504:	b	19538 <__assert_fail@plt+0x7dc4>
   19508:	mov	r8, sl
   1950c:	ldr	r1, [sl, #64]	; 0x40
   19510:	mvn	r2, #34	; 0x22
   19514:	uxtab	r0, r2, r0
   19518:	clz	r0, r0
   1951c:	lsr	r0, r0, #5
   19520:	stm	sp, {r0, r3}
   19524:	movw	r2, #22956	; 0x59ac
   19528:	movt	r2, #2
   1952c:	mov	r4, r3
   19530:	movw	r3, #20523	; 0x502b
   19534:	movt	r3, #2
   19538:	mov	r0, r7
   1953c:	bl	1a128 <__assert_fail@plt+0x89b4>
   19540:	b	19770 <__assert_fail@plt+0x7ffc>
   19544:	tst	r9, #131072	; 0x20000
   19548:	uxtbeq	r1, r0
   1954c:	cmpeq	r1, #9
   19550:	beq	19854 <__assert_fail@plt+0x80e0>
   19554:	mov	r1, #1
   19558:	bfi	r0, r1, #0, #8
   1955c:	str	r0, [r5, #4]
   19560:	mov	r4, #0
   19564:	mov	r0, r7
   19568:	mov	r1, #0
   1956c:	mov	r2, #0
   19570:	mov	r3, r5
   19574:	bl	19960 <__assert_fail@plt+0x81ec>
   19578:	mov	r6, r0
   1957c:	cmp	r0, #0
   19580:	mov	r8, sl
   19584:	bne	19788 <__assert_fail@plt+0x8014>
   19588:	b	198c8 <__assert_fail@plt+0x8154>
   1958c:	mov	r4, #0
   19590:	mov	r0, r7
   19594:	mov	r1, #0
   19598:	mov	r2, #0
   1959c:	mov	r3, r5
   195a0:	bl	19960 <__assert_fail@plt+0x81ec>
   195a4:	cmp	r0, #0
   195a8:	beq	198c8 <__assert_fail@plt+0x8154>
   195ac:	mov	r6, r0
   195b0:	ldr	r0, [r7, #92]	; 0x5c
   195b4:	cmp	r0, #2
   195b8:	mov	r8, sl
   195bc:	blt	19788 <__assert_fail@plt+0x8014>
   195c0:	ldr	r0, [r8, #40]	; 0x28
   195c4:	ldr	r1, [r8, #56]	; 0x38
   195c8:	cmp	r1, r0
   195cc:	ble	19788 <__assert_fail@plt+0x8014>
   195d0:	ldr	r1, [r8, #28]
   195d4:	cmp	r0, r1
   195d8:	beq	19788 <__assert_fail@plt+0x8014>
   195dc:	ldr	r1, [r8, #8]
   195e0:	ldr	r0, [r1, r0, lsl #2]
   195e4:	cmn	r0, #1
   195e8:	bne	19788 <__assert_fail@plt+0x8014>
   195ec:	mov	r0, r5
   195f0:	mov	r1, r8
   195f4:	mov	r2, r9
   195f8:	bl	1875c <__assert_fail@plt+0x6fe8>
   195fc:	mov	r0, r7
   19600:	mov	r1, #0
   19604:	mov	r2, #0
   19608:	mov	r3, r5
   1960c:	bl	19960 <__assert_fail@plt+0x81ec>
   19610:	mov	r4, r0
   19614:	mov	r0, r7
   19618:	mov	r1, r6
   1961c:	mov	r2, r4
   19620:	mov	r3, #16
   19624:	bl	188e4 <__assert_fail@plt+0x7170>
   19628:	cmp	r4, #0
   1962c:	ldr	r1, [fp, #12]
   19630:	movne	r6, r0
   19634:	cmpne	r0, #0
   19638:	bne	195c0 <__assert_fail@plt+0x7e4c>
   1963c:	mov	r0, #12
   19640:	str	r0, [r1]
   19644:	b	19944 <__assert_fail@plt+0x81d0>
   19648:	ldr	r0, [r5]
   1964c:	mov	r1, #1
   19650:	ldr	r2, [r7, #84]	; 0x54
   19654:	tst	r2, r1, lsl r0
   19658:	beq	19954 <__assert_fail@plt+0x81e0>
   1965c:	lsl	r0, r1, r0
   19660:	ldr	r1, [r7, #80]	; 0x50
   19664:	orr	r0, r1, r0
   19668:	str	r0, [r7, #80]	; 0x50
   1966c:	mov	r4, #0
   19670:	mov	r0, r7
   19674:	mov	r1, #0
   19678:	mov	r2, #0
   1967c:	mov	r3, r5
   19680:	bl	19960 <__assert_fail@plt+0x81ec>
   19684:	cmp	r0, #0
   19688:	beq	198c8 <__assert_fail@plt+0x8154>
   1968c:	mov	r6, r0
   19690:	mov	r8, sl
   19694:	ldr	r0, [r7, #76]	; 0x4c
   19698:	add	r0, r0, #1
   1969c:	str	r0, [r7, #76]	; 0x4c
   196a0:	b	196d8 <__assert_fail@plt+0x7f64>
   196a4:	mov	r4, #0
   196a8:	mov	r0, r7
   196ac:	mov	r1, #0
   196b0:	mov	r2, #0
   196b4:	mov	r3, r5
   196b8:	bl	19960 <__assert_fail@plt+0x81ec>
   196bc:	cmp	r0, #0
   196c0:	beq	198c8 <__assert_fail@plt+0x8154>
   196c4:	mov	r6, r0
   196c8:	ldr	r0, [r7, #92]	; 0x5c
   196cc:	cmp	r0, #2
   196d0:	mov	r8, sl
   196d4:	blt	19788 <__assert_fail@plt+0x8014>
   196d8:	ldrb	r0, [r7, #88]	; 0x58
   196dc:	orr	r0, r0, #2
   196e0:	strb	r0, [r7, #88]	; 0x58
   196e4:	b	19788 <__assert_fail@plt+0x8014>
   196e8:	add	r0, r4, #1
   196ec:	stm	sp, {r0, r3}
   196f0:	mov	r8, sl
   196f4:	mov	r0, sl
   196f8:	mov	r1, r6
   196fc:	mov	r2, r5
   19700:	mov	r4, r3
   19704:	mov	r3, r9
   19708:	bl	19a0c <__assert_fail@plt+0x8298>
   1970c:	b	19770 <__assert_fail@plt+0x7ffc>
   19710:	ldr	r0, [r5]
   19714:	movw	r1, #783	; 0x30f
   19718:	tst	r0, r1
   1971c:	beq	19734 <__assert_fail@plt+0x7fc0>
   19720:	ldrb	r0, [r7, #88]	; 0x58
   19724:	tst	r0, #16
   19728:	moveq	r0, r7
   1972c:	bleq	1a040 <__assert_fail@plt+0x88cc>
   19730:	ldr	r0, [r5]
   19734:	cmp	r0, #256	; 0x100
   19738:	beq	19860 <__assert_fail@plt+0x80ec>
   1973c:	cmp	r0, #512	; 0x200
   19740:	bne	198d8 <__assert_fail@plt+0x8164>
   19744:	mov	r6, #10
   19748:	mov	r0, #5
   1974c:	b	19868 <__assert_fail@plt+0x80f4>
   19750:	str	r3, [sp]
   19754:	mov	r8, sl
   19758:	mov	r0, sl
   1975c:	mov	r1, r7
   19760:	mov	r2, r5
   19764:	mov	r4, r3
   19768:	mov	r3, r9
   1976c:	bl	19b24 <__assert_fail@plt+0x83b0>
   19770:	mov	r6, r0
   19774:	cmp	r0, #0
   19778:	bne	19788 <__assert_fail@plt+0x8014>
   1977c:	ldr	r0, [r4]
   19780:	cmp	r0, #0
   19784:	bne	19944 <__assert_fail@plt+0x81d0>
   19788:	mov	r0, r5
   1978c:	mov	r1, r8
   19790:	mov	r2, r9
   19794:	bl	1875c <__assert_fail@plt+0x6fe8>
   19798:	mov	r4, #1
   1979c:	movw	r8, #2048	; 0x800
   197a0:	movt	r8, #140	; 0x8c
   197a4:	ldr	r2, [fp, #12]
   197a8:	ldrb	r0, [r5, #4]
   197ac:	cmp	r0, #23
   197b0:	bhi	19840 <__assert_fail@plt+0x80cc>
   197b4:	tst	r8, r4, lsl r0
   197b8:	beq	19840 <__assert_fail@plt+0x80cc>
   197bc:	str	r9, [sp]
   197c0:	str	r2, [sp, #4]
   197c4:	mov	r0, r6
   197c8:	mov	r1, sl
   197cc:	mov	r2, r7
   197d0:	mov	r3, r5
   197d4:	bl	1a318 <__assert_fail@plt+0x8ba4>
   197d8:	ldr	r2, [fp, #12]
   197dc:	cmp	r0, #0
   197e0:	bne	197f0 <__assert_fail@plt+0x807c>
   197e4:	ldr	r1, [r2]
   197e8:	cmp	r1, #0
   197ec:	bne	19920 <__assert_fail@plt+0x81ac>
   197f0:	ldr	r1, [sp, #8]
   197f4:	cmp	r1, #0
   197f8:	mov	r6, r0
   197fc:	beq	197a8 <__assert_fail@plt+0x8034>
   19800:	ldrb	r1, [r5, #4]
   19804:	cmp	r1, #23
   19808:	beq	19818 <__assert_fail@plt+0x80a4>
   1980c:	cmp	r1, #11
   19810:	mov	r6, r0
   19814:	bne	197a8 <__assert_fail@plt+0x8034>
   19818:	cmp	r0, #0
   1981c:	beq	19834 <__assert_fail@plt+0x80c0>
   19820:	movw	r1, #37792	; 0x93a0
   19824:	movt	r1, #1
   19828:	mov	r2, #0
   1982c:	bl	19328 <__assert_fail@plt+0x7bb4>
   19830:	ldr	r2, [fp, #12]
   19834:	mov	r0, #13
   19838:	str	r0, [r2]
   1983c:	b	19944 <__assert_fail@plt+0x81d0>
   19840:	mov	r4, r6
   19844:	b	19948 <__assert_fail@plt+0x81d4>
   19848:	mov	r0, #5
   1984c:	str	r0, [r3]
   19850:	b	19944 <__assert_fail@plt+0x81d0>
   19854:	mov	r0, #16
   19858:	str	r0, [r3]
   1985c:	b	19944 <__assert_fail@plt+0x81d0>
   19860:	mov	r6, #9
   19864:	mov	r0, #6
   19868:	str	r0, [r5]
   1986c:	mov	r4, #0
   19870:	mov	r0, r7
   19874:	mov	r1, #0
   19878:	mov	r2, #0
   1987c:	mov	r3, r5
   19880:	bl	19960 <__assert_fail@plt+0x81ec>
   19884:	mov	r8, r0
   19888:	str	r6, [r5]
   1988c:	mov	r0, r7
   19890:	mov	r1, #0
   19894:	mov	r2, #0
   19898:	mov	r3, r5
   1989c:	bl	19960 <__assert_fail@plt+0x81ec>
   198a0:	mov	r1, r0
   198a4:	mov	r0, r7
   198a8:	mov	r7, r1
   198ac:	mov	r1, r8
   198b0:	mov	r2, r7
   198b4:	mov	r3, #10
   198b8:	bl	188e4 <__assert_fail@plt+0x7170>
   198bc:	cmp	r8, #0
   198c0:	cmpne	r7, #0
   198c4:	bne	198f0 <__assert_fail@plt+0x817c>
   198c8:	mov	r0, #12
   198cc:	ldr	r1, [fp, #12]
   198d0:	str	r0, [r1]
   198d4:	b	19948 <__assert_fail@plt+0x81d4>
   198d8:	mov	r4, #0
   198dc:	mov	r0, r7
   198e0:	mov	r1, #0
   198e4:	mov	r2, #0
   198e8:	mov	r3, r5
   198ec:	bl	19960 <__assert_fail@plt+0x81ec>
   198f0:	mov	r6, r0
   198f4:	cmp	r0, #0
   198f8:	beq	198c8 <__assert_fail@plt+0x8154>
   198fc:	mov	r0, r5
   19900:	mov	r1, sl
   19904:	mov	r2, r9
   19908:	bl	1875c <__assert_fail@plt+0x6fe8>
   1990c:	mov	r4, r6
   19910:	b	19948 <__assert_fail@plt+0x81d4>
   19914:	mov	r0, #13
   19918:	str	r0, [r3]
   1991c:	b	19944 <__assert_fail@plt+0x81d0>
   19920:	cmp	r6, #0
   19924:	beq	19944 <__assert_fail@plt+0x81d0>
   19928:	movw	r1, #37792	; 0x93a0
   1992c:	movt	r1, #1
   19930:	mov	r4, #0
   19934:	mov	r0, r6
   19938:	mov	r2, #0
   1993c:	bl	19328 <__assert_fail@plt+0x7bb4>
   19940:	b	19948 <__assert_fail@plt+0x81d4>
   19944:	mov	r4, #0
   19948:	mov	r0, r4
   1994c:	sub	sp, fp, #28
   19950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19954:	mov	r0, #6
   19958:	ldr	r1, [fp, #12]
   1995c:	b	19640 <__assert_fail@plt+0x7ecc>
   19960:	push	{r4, r5, r6, r7, fp, lr}
   19964:	add	fp, sp, #16
   19968:	mov	r6, r3
   1996c:	mov	r4, r2
   19970:	mov	r5, r1
   19974:	mov	r7, r0
   19978:	ldr	r0, [r0, #64]	; 0x40
   1997c:	cmp	r0, #31
   19980:	beq	199dc <__assert_fail@plt+0x8268>
   19984:	ldr	r0, [r7, #56]	; 0x38
   19988:	ldr	r1, [r7, #64]	; 0x40
   1998c:	add	r2, r1, #1
   19990:	str	r2, [r7, #64]	; 0x40
   19994:	add	r0, r0, r1, lsl #5
   19998:	mov	r1, #0
   1999c:	str	r1, [r0, #4]!
   199a0:	str	r4, [r0, #8]
   199a4:	str	r5, [r0, #4]
   199a8:	ldm	r6, {r2, r3}
   199ac:	mvn	r7, #0
   199b0:	str	r7, [r0, #28]
   199b4:	str	r1, [r0, #16]
   199b8:	str	r1, [r0, #12]
   199bc:	str	r2, [r0, #20]
   199c0:	bic	r1, r3, #786432	; 0xc0000
   199c4:	str	r1, [r0, #24]
   199c8:	cmp	r5, #0
   199cc:	strne	r0, [r5]
   199d0:	cmp	r4, #0
   199d4:	strne	r0, [r4]
   199d8:	pop	{r4, r5, r6, r7, fp, pc}
   199dc:	mov	r0, #996	; 0x3e4
   199e0:	bl	23ed0 <__assert_fail@plt+0x1275c>
   199e4:	cmp	r0, #0
   199e8:	beq	19a04 <__assert_fail@plt+0x8290>
   199ec:	ldr	r1, [r7, #56]	; 0x38
   199f0:	str	r1, [r0]
   199f4:	mov	r1, #0
   199f8:	str	r1, [r7, #64]	; 0x40
   199fc:	str	r0, [r7, #56]	; 0x38
   19a00:	b	19984 <__assert_fail@plt+0x8210>
   19a04:	mov	r0, #0
   19a08:	pop	{r4, r5, r6, r7, fp, pc}
   19a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a10:	add	fp, sp, #28
   19a14:	sub	sp, sp, #12
   19a18:	mov	r5, r3
   19a1c:	mov	r6, r2
   19a20:	mov	r7, r1
   19a24:	mov	r4, r0
   19a28:	ldr	r8, [r1]
   19a2c:	ldr	sl, [r1, #24]
   19a30:	add	r0, sl, #1
   19a34:	str	r0, [r1, #24]
   19a38:	orr	r2, r3, #8388608	; 0x800000
   19a3c:	mov	r0, r6
   19a40:	mov	r1, r4
   19a44:	bl	1875c <__assert_fail@plt+0x6fe8>
   19a48:	ldrb	r0, [r6, #4]
   19a4c:	mov	r1, #0
   19a50:	ldr	r9, [fp, #12]
   19a54:	cmp	r0, #9
   19a58:	beq	19aa4 <__assert_fail@plt+0x8330>
   19a5c:	ldr	r0, [fp, #8]
   19a60:	stm	sp, {r0, r9}
   19a64:	mov	r0, r4
   19a68:	mov	r1, r7
   19a6c:	mov	r2, r6
   19a70:	mov	r3, r5
   19a74:	bl	1877c <__assert_fail@plt+0x7008>
   19a78:	mov	r1, r0
   19a7c:	ldr	r0, [r9]
   19a80:	mov	r5, #0
   19a84:	cmp	r0, #0
   19a88:	bne	19ae0 <__assert_fail@plt+0x836c>
   19a8c:	ldrb	r0, [r6, #4]
   19a90:	cmp	r0, #9
   19a94:	bne	19af8 <__assert_fail@plt+0x8384>
   19a98:	ldr	r0, [r9]
   19a9c:	cmp	r0, #0
   19aa0:	bne	19ae0 <__assert_fail@plt+0x836c>
   19aa4:	cmp	sl, #8
   19aa8:	bhi	19abc <__assert_fail@plt+0x8348>
   19aac:	ldr	r0, [r8, #84]	; 0x54
   19ab0:	mov	r2, #1
   19ab4:	orr	r0, r0, r2, lsl sl
   19ab8:	str	r0, [r8, #84]	; 0x54
   19abc:	mov	r5, #0
   19ac0:	mov	r0, r8
   19ac4:	mov	r2, #0
   19ac8:	mov	r3, #17
   19acc:	bl	188e4 <__assert_fail@plt+0x7170>
   19ad0:	cmp	r0, #0
   19ad4:	beq	19aec <__assert_fail@plt+0x8378>
   19ad8:	str	sl, [r0, #20]
   19adc:	mov	r5, r0
   19ae0:	mov	r0, r5
   19ae4:	sub	sp, fp, #28
   19ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19aec:	mov	r0, #12
   19af0:	str	r0, [r9]
   19af4:	b	19ae0 <__assert_fail@plt+0x836c>
   19af8:	cmp	r1, #0
   19afc:	beq	19b18 <__assert_fail@plt+0x83a4>
   19b00:	movw	r2, #37792	; 0x93a0
   19b04:	movt	r2, #1
   19b08:	mov	r0, r1
   19b0c:	mov	r1, r2
   19b10:	mov	r2, #0
   19b14:	bl	19328 <__assert_fail@plt+0x7bb4>
   19b18:	mov	r0, #8
   19b1c:	str	r0, [r9]
   19b20:	b	19ae0 <__assert_fail@plt+0x836c>
   19b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b28:	add	fp, sp, #28
   19b2c:	sub	sp, sp, #124	; 0x7c
   19b30:	mov	r8, r3
   19b34:	mov	r6, r2
   19b38:	mov	r9, r1
   19b3c:	mov	r7, r0
   19b40:	mov	r5, #0
   19b44:	str	r5, [fp, #-32]	; 0xffffffe0
   19b48:	str	r5, [fp, #-36]	; 0xffffffdc
   19b4c:	mov	r0, #32
   19b50:	mov	r1, #1
   19b54:	bl	23e7c <__assert_fail@plt+0x12708>
   19b58:	mov	r4, r0
   19b5c:	mov	r0, #40	; 0x28
   19b60:	mov	r1, #1
   19b64:	bl	23e7c <__assert_fail@plt+0x12708>
   19b68:	mov	sl, r0
   19b6c:	cmp	r4, #0
   19b70:	cmpne	sl, #0
   19b74:	beq	19ff8 <__assert_fail@plt+0x8884>
   19b78:	mov	r0, r6
   19b7c:	mov	r1, r7
   19b80:	mov	r2, r8
   19b84:	bl	1a64c <__assert_fail@plt+0x8ed8>
   19b88:	mov	r5, r0
   19b8c:	ldrb	r0, [r6, #4]
   19b90:	cmp	r0, #25
   19b94:	beq	19ba8 <__assert_fail@plt+0x8434>
   19b98:	cmp	r0, #2
   19b9c:	beq	19ff0 <__assert_fail@plt+0x887c>
   19ba0:	mov	r0, #0
   19ba4:	b	19bf4 <__assert_fail@plt+0x8480>
   19ba8:	ldrb	r0, [sl, #16]
   19bac:	orr	r0, r0, #1
   19bb0:	strb	r0, [sl, #16]
   19bb4:	tst	r8, #256	; 0x100
   19bb8:	movne	r0, r4
   19bbc:	movne	r1, #10
   19bc0:	blne	1a7c0 <__assert_fail@plt+0x904c>
   19bc4:	ldr	r0, [r7, #40]	; 0x28
   19bc8:	add	r0, r0, r5
   19bcc:	str	r0, [r7, #40]	; 0x28
   19bd0:	mov	r0, r6
   19bd4:	mov	r1, r7
   19bd8:	mov	r2, r8
   19bdc:	bl	1a64c <__assert_fail@plt+0x8ed8>
   19be0:	mov	r5, r0
   19be4:	ldrb	r0, [r6, #4]
   19be8:	cmp	r0, #2
   19bec:	beq	19ff0 <__assert_fail@plt+0x887c>
   19bf0:	mov	r0, #1
   19bf4:	str	r0, [sp, #20]
   19bf8:	ldr	r0, [r6, #4]
   19bfc:	uxtb	r1, r0
   19c00:	cmp	r1, #21
   19c04:	moveq	r1, #1
   19c08:	bfieq	r0, r1, #0, #8
   19c0c:	streq	r0, [r6, #4]
   19c10:	str	sl, [sp, #24]
   19c14:	add	r0, sp, #68	; 0x44
   19c18:	str	r0, [fp, #-40]	; 0xffffffd8
   19c1c:	mov	r0, #3
   19c20:	str	r0, [fp, #-44]	; 0xffffffd4
   19c24:	mov	r0, #1
   19c28:	str	r8, [sp]
   19c2c:	str	r0, [sp, #4]
   19c30:	sub	r0, fp, #44	; 0x2c
   19c34:	mov	r1, r7
   19c38:	mov	r2, r6
   19c3c:	mov	r3, r5
   19c40:	bl	1a7e4 <__assert_fail@plt+0x9070>
   19c44:	cmp	r0, #0
   19c48:	bne	19fe0 <__assert_fail@plt+0x886c>
   19c4c:	mov	r0, #0
   19c50:	str	r0, [sp, #16]
   19c54:	mov	r0, r6
   19c58:	mov	r1, r7
   19c5c:	mov	r2, r8
   19c60:	bl	1a64c <__assert_fail@plt+0x8ed8>
   19c64:	mov	sl, r0
   19c68:	ldr	r5, [fp, #-44]	; 0xffffffd4
   19c6c:	cmp	r5, #2
   19c70:	beq	19d94 <__assert_fail@plt+0x8620>
   19c74:	cmp	r5, #4
   19c78:	bne	19c9c <__assert_fail@plt+0x8528>
   19c7c:	ldr	r0, [r7, #64]	; 0x40
   19c80:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19c84:	stm	sp, {r1, r8}
   19c88:	mov	r1, r4
   19c8c:	ldr	r2, [sp, #24]
   19c90:	sub	r3, fp, #36	; 0x24
   19c94:	bl	1ab84 <__assert_fail@plt+0x9410>
   19c98:	b	19da0 <__assert_fail@plt+0x862c>
   19c9c:	ldrb	r0, [r6, #4]
   19ca0:	cmp	r0, #22
   19ca4:	beq	19cb4 <__assert_fail@plt+0x8540>
   19ca8:	cmp	r0, #2
   19cac:	bne	19d6c <__assert_fail@plt+0x85f8>
   19cb0:	b	19fdc <__assert_fail@plt+0x8868>
   19cb4:	ldr	r0, [r7, #40]	; 0x28
   19cb8:	add	r0, r0, sl
   19cbc:	str	r0, [r7, #40]	; 0x28
   19cc0:	add	r0, sp, #28
   19cc4:	mov	r1, r7
   19cc8:	mov	r2, r8
   19ccc:	bl	1a64c <__assert_fail@plt+0x8ed8>
   19cd0:	mov	r3, r0
   19cd4:	ldrb	r0, [sp, #32]
   19cd8:	cmp	r0, #21
   19cdc:	beq	19d58 <__assert_fail@plt+0x85e4>
   19ce0:	cmp	r0, #2
   19ce4:	sub	r1, fp, #52	; 0x34
   19ce8:	beq	19fdc <__assert_fail@plt+0x8868>
   19cec:	mov	r0, #3
   19cf0:	str	r0, [fp, #-52]	; 0xffffffcc
   19cf4:	add	r0, sp, #36	; 0x24
   19cf8:	str	r0, [fp, #-48]	; 0xffffffd0
   19cfc:	str	r8, [sp]
   19d00:	mov	r0, #1
   19d04:	str	r0, [sp, #4]
   19d08:	mov	r0, r1
   19d0c:	mov	r5, r1
   19d10:	mov	r1, r7
   19d14:	add	r2, sp, #28
   19d18:	bl	1a7e4 <__assert_fail@plt+0x9070>
   19d1c:	cmp	r0, #0
   19d20:	bne	19fe0 <__assert_fail@plt+0x886c>
   19d24:	mov	r0, r6
   19d28:	mov	r1, r7
   19d2c:	mov	r2, r8
   19d30:	bl	1a64c <__assert_fail@plt+0x8ed8>
   19d34:	mov	sl, r0
   19d38:	stm	sp, {r5, r9}
   19d3c:	str	r8, [sp, #8]
   19d40:	mov	r0, r4
   19d44:	ldr	r1, [sp, #24]
   19d48:	sub	r2, fp, #32
   19d4c:	sub	r3, fp, #44	; 0x2c
   19d50:	bl	1a8ec <__assert_fail@plt+0x9178>
   19d54:	b	19da0 <__assert_fail@plt+0x862c>
   19d58:	ldr	r0, [r7, #40]	; 0x28
   19d5c:	sub	r0, r0, sl
   19d60:	str	r0, [r7, #40]	; 0x28
   19d64:	mov	r0, #1
   19d68:	strb	r0, [r6, #4]
   19d6c:	add	r0, pc, #0
   19d70:	ldr	pc, [r0, r5, lsl #2]
   19d74:	andeq	r9, r1, r4, lsl #27
   19d78:	andeq	r9, r1, r0, lsl #28
   19d7c:	muleq	r1, r4, sp
   19d80:	andeq	r9, r1, r0, lsr lr
   19d84:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   19d88:	mov	r0, r4
   19d8c:	bl	1a7c0 <__assert_fail@plt+0x904c>
   19d90:	b	19db0 <__assert_fail@plt+0x863c>
   19d94:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19d98:	mov	r0, r4
   19d9c:	bl	1ab0c <__assert_fail@plt+0x9398>
   19da0:	ldr	r1, [fp, #8]
   19da4:	str	r0, [r1]
   19da8:	cmp	r0, #0
   19dac:	bne	19fe8 <__assert_fail@plt+0x8874>
   19db0:	ldrb	r0, [r6, #4]
   19db4:	cmp	r0, #21
   19db8:	beq	19e68 <__assert_fail@plt+0x86f4>
   19dbc:	cmp	r0, #2
   19dc0:	beq	19fdc <__assert_fail@plt+0x8868>
   19dc4:	add	r0, sp, #68	; 0x44
   19dc8:	str	r0, [fp, #-40]	; 0xffffffd8
   19dcc:	mov	r0, #3
   19dd0:	str	r0, [fp, #-44]	; 0xffffffd4
   19dd4:	str	r8, [sp]
   19dd8:	mov	r0, #0
   19ddc:	str	r0, [sp, #4]
   19de0:	sub	r0, fp, #44	; 0x2c
   19de4:	mov	r1, r7
   19de8:	mov	r2, r6
   19dec:	mov	r3, sl
   19df0:	bl	1a7e4 <__assert_fail@plt+0x9070>
   19df4:	cmp	r0, #0
   19df8:	beq	19c54 <__assert_fail@plt+0x84e0>
   19dfc:	b	19fe0 <__assert_fail@plt+0x886c>
   19e00:	ldr	r5, [sp, #24]
   19e04:	ldr	r0, [r5, #20]
   19e08:	ldr	r1, [sp, #16]
   19e0c:	cmp	r1, r0
   19e10:	beq	19e40 <__assert_fail@plt+0x86cc>
   19e14:	ldr	r0, [r5]
   19e18:	ldr	r1, [r5, #20]
   19e1c:	add	r2, r1, #1
   19e20:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19e24:	str	r2, [r5, #20]
   19e28:	str	r3, [r0, r1, lsl #2]
   19e2c:	b	19db0 <__assert_fail@plt+0x863c>
   19e30:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19e34:	mov	r0, r4
   19e38:	bl	1ab48 <__assert_fail@plt+0x93d4>
   19e3c:	b	19da0 <__assert_fail@plt+0x862c>
   19e40:	mov	r1, #1
   19e44:	orr	r0, r1, r0, lsl #1
   19e48:	str	r0, [sp, #16]
   19e4c:	lsl	r1, r0, #2
   19e50:	ldr	r0, [r5]
   19e54:	bl	23f00 <__assert_fail@plt+0x1278c>
   19e58:	cmp	r0, #0
   19e5c:	beq	1a018 <__assert_fail@plt+0x88a4>
   19e60:	str	r0, [r5]
   19e64:	b	19e14 <__assert_fail@plt+0x86a0>
   19e68:	ldr	r0, [r7, #40]	; 0x28
   19e6c:	add	r0, r0, sl
   19e70:	str	r0, [r7, #40]	; 0x28
   19e74:	ldr	r0, [sp, #20]
   19e78:	cmp	r0, #0
   19e7c:	movne	r0, r4
   19e80:	blne	1b3e0 <__assert_fail@plt+0x9c6c>
   19e84:	ldr	r0, [r9, #92]	; 0x5c
   19e88:	cmp	r0, #2
   19e8c:	ldr	sl, [sp, #24]
   19e90:	blt	19ea0 <__assert_fail@plt+0x872c>
   19e94:	ldr	r1, [r9, #60]	; 0x3c
   19e98:	mov	r0, r4
   19e9c:	bl	1b400 <__assert_fail@plt+0x9c8c>
   19ea0:	ldr	r0, [sl, #20]
   19ea4:	cmp	r0, #0
   19ea8:	bne	19ed0 <__assert_fail@plt+0x875c>
   19eac:	ldr	r0, [sl, #24]
   19eb0:	cmp	r0, #0
   19eb4:	bne	19ed0 <__assert_fail@plt+0x875c>
   19eb8:	ldr	r0, [sl, #28]
   19ebc:	cmp	r0, #0
   19ec0:	bne	19ed0 <__assert_fail@plt+0x875c>
   19ec4:	ldr	r0, [sl, #32]
   19ec8:	cmp	r0, #0
   19ecc:	beq	19f8c <__assert_fail@plt+0x8818>
   19ed0:	ldrb	r0, [r9, #88]	; 0x58
   19ed4:	orr	r0, r0, #2
   19ed8:	strb	r0, [r9, #88]	; 0x58
   19edc:	str	sl, [sp, #68]	; 0x44
   19ee0:	ldr	r7, [sp, #72]	; 0x48
   19ee4:	mov	r0, #6
   19ee8:	strb	r0, [sp, #72]	; 0x48
   19eec:	mov	r6, #0
   19ef0:	add	r3, sp, #68	; 0x44
   19ef4:	mov	r0, r9
   19ef8:	mov	r1, #0
   19efc:	mov	r2, #0
   19f00:	bl	19960 <__assert_fail@plt+0x81ec>
   19f04:	cmp	r0, #0
   19f08:	beq	1a01c <__assert_fail@plt+0x88a8>
   19f0c:	mov	r5, r0
   19f10:	bic	r0, r7, #255	; 0xff
   19f14:	ldr	r1, [r4, r6, lsl #2]
   19f18:	cmp	r1, #0
   19f1c:	bne	19f38 <__assert_fail@plt+0x87c4>
   19f20:	add	r6, r6, #1
   19f24:	cmp	r6, #8
   19f28:	bne	19f14 <__assert_fail@plt+0x87a0>
   19f2c:	mov	r0, r4
   19f30:	bl	13f1c <__assert_fail@plt+0x27a8>
   19f34:	b	19f80 <__assert_fail@plt+0x880c>
   19f38:	str	r4, [sp, #68]	; 0x44
   19f3c:	orr	r0, r0, #3
   19f40:	str	r0, [sp, #72]	; 0x48
   19f44:	add	r3, sp, #68	; 0x44
   19f48:	mov	r0, r9
   19f4c:	mov	r1, #0
   19f50:	mov	r2, #0
   19f54:	bl	19960 <__assert_fail@plt+0x81ec>
   19f58:	cmp	r0, #0
   19f5c:	beq	1a01c <__assert_fail@plt+0x88a8>
   19f60:	mov	r1, r0
   19f64:	mov	r0, r9
   19f68:	mov	r2, r5
   19f6c:	mov	r3, #10
   19f70:	bl	188e4 <__assert_fail@plt+0x7170>
   19f74:	mov	r5, r0
   19f78:	cmp	r0, #0
   19f7c:	beq	1a01c <__assert_fail@plt+0x88a8>
   19f80:	mov	r0, r5
   19f84:	sub	sp, fp, #28
   19f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f8c:	ldr	r0, [r9, #92]	; 0x5c
   19f90:	cmp	r0, #2
   19f94:	blt	19fb0 <__assert_fail@plt+0x883c>
   19f98:	ldr	r0, [sl, #36]	; 0x24
   19f9c:	cmp	r0, #0
   19fa0:	bne	19ed0 <__assert_fail@plt+0x875c>
   19fa4:	ldrb	r0, [sl, #16]
   19fa8:	tst	r0, #1
   19fac:	bne	19ed0 <__assert_fail@plt+0x875c>
   19fb0:	mov	r0, sl
   19fb4:	bl	173f0 <__assert_fail@plt+0x5c7c>
   19fb8:	str	r4, [sp, #68]	; 0x44
   19fbc:	mov	r0, #3
   19fc0:	strb	r0, [sp, #72]	; 0x48
   19fc4:	add	r3, sp, #68	; 0x44
   19fc8:	mov	r0, r9
   19fcc:	mov	r1, #0
   19fd0:	mov	r2, #0
   19fd4:	bl	19960 <__assert_fail@plt+0x81ec>
   19fd8:	b	19f74 <__assert_fail@plt+0x8800>
   19fdc:	mov	r0, #7
   19fe0:	ldr	r1, [fp, #8]
   19fe4:	str	r0, [r1]
   19fe8:	ldr	sl, [sp, #24]
   19fec:	b	1a028 <__assert_fail@plt+0x88b4>
   19ff0:	mov	r0, #2
   19ff4:	b	1a020 <__assert_fail@plt+0x88ac>
   19ff8:	mov	r0, r4
   19ffc:	bl	13f1c <__assert_fail@plt+0x27a8>
   1a000:	mov	r0, sl
   1a004:	bl	13f1c <__assert_fail@plt+0x27a8>
   1a008:	mov	r0, #12
   1a00c:	ldr	r1, [fp, #8]
   1a010:	str	r0, [r1]
   1a014:	b	19f80 <__assert_fail@plt+0x880c>
   1a018:	mov	sl, r5
   1a01c:	mov	r0, #12
   1a020:	ldr	r1, [fp, #8]
   1a024:	str	r0, [r1]
   1a028:	mov	r0, r4
   1a02c:	bl	13f1c <__assert_fail@plt+0x27a8>
   1a030:	mov	r0, sl
   1a034:	bl	173f0 <__assert_fail@plt+0x5c7c>
   1a038:	mov	r5, #0
   1a03c:	b	19f80 <__assert_fail@plt+0x880c>
   1a040:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a044:	add	fp, sp, #24
   1a048:	mov	r4, r0
   1a04c:	ldrb	r0, [r0, #88]	; 0x58
   1a050:	orr	r1, r0, #16
   1a054:	strb	r1, [r4, #88]	; 0x58
   1a058:	tst	r0, #8
   1a05c:	bne	1a09c <__assert_fail@plt+0x8928>
   1a060:	mvn	r1, #-134217727	; 0xf8000001
   1a064:	mvn	r2, #2013265921	; 0x78000001
   1a068:	movw	r3, #0
   1a06c:	movt	r3, #1023	; 0x3ff
   1a070:	mov	r7, #0
   1a074:	str	r7, [r4, #96]	; 0x60
   1a078:	str	r3, [r4, #100]	; 0x64
   1a07c:	str	r2, [r4, #104]	; 0x68
   1a080:	str	r1, [r4, #108]	; 0x6c
   1a084:	tst	r0, #4
   1a088:	beq	1a0a8 <__assert_fail@plt+0x8934>
   1a08c:	vmov.i32	q8, #0	; 0x00000000
   1a090:	add	r0, r4, #112	; 0x70
   1a094:	vst1.32	{d16-d17}, [r0]
   1a098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a09c:	mov	r5, #0
   1a0a0:	mov	r8, #0
   1a0a4:	b	1a0b0 <__assert_fail@plt+0x893c>
   1a0a8:	mov	r8, #4
   1a0ac:	mov	r5, #128	; 0x80
   1a0b0:	bl	11600 <__ctype_b_loc@plt>
   1a0b4:	ldr	r0, [r0]
   1a0b8:	add	r6, r0, r5, lsl #1
   1a0bc:	mov	r1, #1
   1a0c0:	b	1a0d8 <__assert_fail@plt+0x8964>
   1a0c4:	add	r6, r6, #64	; 0x40
   1a0c8:	add	r8, r8, #1
   1a0cc:	add	r5, r5, #32
   1a0d0:	cmp	r8, #8
   1a0d4:	beq	1a124 <__assert_fail@plt+0x89b0>
   1a0d8:	add	r0, r4, r8, lsl #2
   1a0dc:	add	r2, r0, #96	; 0x60
   1a0e0:	mov	r3, #0
   1a0e4:	mov	r0, r6
   1a0e8:	b	1a108 <__assert_fail@plt+0x8994>
   1a0ec:	ldr	r7, [r2]
   1a0f0:	orr	r7, r7, r1, lsl r3
   1a0f4:	str	r7, [r2]
   1a0f8:	add	r0, r0, #2
   1a0fc:	add	r3, r3, #1
   1a100:	cmp	r3, #32
   1a104:	beq	1a0c4 <__assert_fail@plt+0x8950>
   1a108:	add	r7, r5, r3
   1a10c:	cmp	r7, #95	; 0x5f
   1a110:	beq	1a0ec <__assert_fail@plt+0x8978>
   1a114:	ldrh	r7, [r0]
   1a118:	ands	r7, r7, #8
   1a11c:	beq	1a0f8 <__assert_fail@plt+0x8984>
   1a120:	b	1a0ec <__assert_fail@plt+0x8978>
   1a124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a12c:	add	fp, sp, #28
   1a130:	sub	sp, sp, #20
   1a134:	mov	r8, r3
   1a138:	mov	r6, r2
   1a13c:	mov	r4, r1
   1a140:	mov	r9, r0
   1a144:	mov	r7, #0
   1a148:	str	r7, [sp, #16]
   1a14c:	mov	r0, #32
   1a150:	mov	r1, #1
   1a154:	bl	23e7c <__assert_fail@plt+0x12708>
   1a158:	ldr	r1, [fp, #12]
   1a15c:	cmp	r0, #0
   1a160:	beq	1a2d0 <__assert_fail@plt+0x8b5c>
   1a164:	mov	r5, r0
   1a168:	mov	r0, #40	; 0x28
   1a16c:	mov	r1, #1
   1a170:	bl	23e7c <__assert_fail@plt+0x12708>
   1a174:	cmp	r0, #0
   1a178:	beq	1a2dc <__assert_fail@plt+0x8b68>
   1a17c:	mov	sl, r0
   1a180:	ldr	r1, [fp, #8]
   1a184:	ldrb	r0, [r0, #16]
   1a188:	and	r0, r0, #254	; 0xfe
   1a18c:	orr	r0, r0, r1
   1a190:	strb	r0, [sl, #16]
   1a194:	mov	r7, #0
   1a198:	stm	sp, {r6, r7}
   1a19c:	add	r3, sp, #16
   1a1a0:	mov	r0, r4
   1a1a4:	mov	r1, r5
   1a1a8:	mov	r2, sl
   1a1ac:	bl	1ab84 <__assert_fail@plt+0x9410>
   1a1b0:	cmp	r0, #0
   1a1b4:	bne	1a2f8 <__assert_fail@plt+0x8b84>
   1a1b8:	ldrb	r0, [r8]
   1a1bc:	cmp	r0, #0
   1a1c0:	beq	1a1e0 <__assert_fail@plt+0x8a6c>
   1a1c4:	add	r4, r8, #1
   1a1c8:	uxtb	r1, r0
   1a1cc:	mov	r0, r5
   1a1d0:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1a1d4:	ldrb	r0, [r4], #1
   1a1d8:	cmp	r0, #0
   1a1dc:	bne	1a1c8 <__assert_fail@plt+0x8a54>
   1a1e0:	ldr	r0, [fp, #8]
   1a1e4:	cmp	r0, #0
   1a1e8:	movne	r0, r5
   1a1ec:	blne	1b3e0 <__assert_fail@plt+0x9c6c>
   1a1f0:	ldr	r0, [r9, #92]	; 0x5c
   1a1f4:	cmp	r0, #2
   1a1f8:	blt	1a208 <__assert_fail@plt+0x8a94>
   1a1fc:	ldr	r1, [r9, #60]	; 0x3c
   1a200:	mov	r0, r5
   1a204:	bl	1b400 <__assert_fail@plt+0x9c8c>
   1a208:	str	r5, [sp, #8]
   1a20c:	ldr	r4, [sp, #12]
   1a210:	bfc	r4, #0, #23
   1a214:	orr	r0, r4, #3
   1a218:	str	r0, [sp, #12]
   1a21c:	mov	r7, #0
   1a220:	add	r3, sp, #8
   1a224:	mov	r0, r9
   1a228:	mov	r1, #0
   1a22c:	mov	r2, #0
   1a230:	bl	19960 <__assert_fail@plt+0x81ec>
   1a234:	cmp	r0, #0
   1a238:	beq	1a2b4 <__assert_fail@plt+0x8b40>
   1a23c:	mov	r6, r0
   1a240:	ldr	r0, [r9, #92]	; 0x5c
   1a244:	cmp	r0, #2
   1a248:	blt	1a29c <__assert_fail@plt+0x8b28>
   1a24c:	str	sl, [sp, #8]
   1a250:	orr	r0, r4, #6
   1a254:	str	r0, [sp, #12]
   1a258:	ldrb	r0, [r9, #88]	; 0x58
   1a25c:	orr	r0, r0, #2
   1a260:	strb	r0, [r9, #88]	; 0x58
   1a264:	add	r3, sp, #8
   1a268:	mov	r0, r9
   1a26c:	mov	r1, #0
   1a270:	mov	r2, #0
   1a274:	bl	19960 <__assert_fail@plt+0x81ec>
   1a278:	cmp	r0, #0
   1a27c:	beq	1a2b4 <__assert_fail@plt+0x8b40>
   1a280:	mov	r2, r0
   1a284:	mov	r0, r9
   1a288:	mov	r1, r6
   1a28c:	mov	r3, #10
   1a290:	bl	188e4 <__assert_fail@plt+0x7170>
   1a294:	mov	r7, r0
   1a298:	b	1a2a8 <__assert_fail@plt+0x8b34>
   1a29c:	mov	r0, sl
   1a2a0:	bl	173f0 <__assert_fail@plt+0x5c7c>
   1a2a4:	mov	r7, r6
   1a2a8:	mov	r0, r7
   1a2ac:	sub	sp, fp, #28
   1a2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2b4:	mov	r0, r5
   1a2b8:	bl	13f1c <__assert_fail@plt+0x27a8>
   1a2bc:	mov	r0, sl
   1a2c0:	bl	173f0 <__assert_fail@plt+0x5c7c>
   1a2c4:	mov	r0, #12
   1a2c8:	ldr	r1, [fp, #12]
   1a2cc:	b	1a2d4 <__assert_fail@plt+0x8b60>
   1a2d0:	mov	r0, #12
   1a2d4:	str	r0, [r1]
   1a2d8:	b	1a2a8 <__assert_fail@plt+0x8b34>
   1a2dc:	mov	r0, r5
   1a2e0:	bl	13f1c <__assert_fail@plt+0x27a8>
   1a2e4:	mov	r0, #12
   1a2e8:	ldr	r1, [fp, #12]
   1a2ec:	str	r0, [r1]
   1a2f0:	mov	r7, #0
   1a2f4:	b	1a2a8 <__assert_fail@plt+0x8b34>
   1a2f8:	mov	r6, r0
   1a2fc:	mov	r0, r5
   1a300:	bl	13f1c <__assert_fail@plt+0x27a8>
   1a304:	mov	r0, sl
   1a308:	bl	173f0 <__assert_fail@plt+0x5c7c>
   1a30c:	ldr	r0, [fp, #12]
   1a310:	str	r6, [r0]
   1a314:	b	1a2a8 <__assert_fail@plt+0x8b34>
   1a318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a31c:	add	fp, sp, #28
   1a320:	sub	sp, sp, #20
   1a324:	mov	r7, r3
   1a328:	mov	r5, r2
   1a32c:	mov	r8, r1
   1a330:	mov	r4, r0
   1a334:	ldrb	r0, [r3, #4]
   1a338:	ldr	r1, [fp, #12]
   1a33c:	str	r1, [sp, #16]
   1a340:	ldr	sl, [fp, #8]
   1a344:	cmp	r0, #23
   1a348:	bne	1a3a0 <__assert_fail@plt+0x8c2c>
   1a34c:	ldr	r0, [r7]
   1a350:	str	r0, [sp, #12]
   1a354:	ldr	r0, [r7, #4]
   1a358:	str	r0, [sp, #8]
   1a35c:	ldr	r0, [r8, #40]	; 0x28
   1a360:	str	r0, [sp, #4]
   1a364:	mov	r0, r8
   1a368:	mov	r1, r7
   1a36c:	mov	r2, sl
   1a370:	bl	1b650 <__assert_fail@plt+0x9edc>
   1a374:	cmn	r0, #1
   1a378:	bne	1a3bc <__assert_fail@plt+0x8c48>
   1a37c:	ldrb	r0, [r7, #4]
   1a380:	cmp	r0, #1
   1a384:	bne	1a398 <__assert_fail@plt+0x8c24>
   1a388:	ldrb	r0, [r7]
   1a38c:	mov	r6, #0
   1a390:	cmp	r0, #44	; 0x2c
   1a394:	beq	1a3c8 <__assert_fail@plt+0x8c54>
   1a398:	mov	r0, #10
   1a39c:	b	1a610 <__assert_fail@plt+0x8e9c>
   1a3a0:	mvn	r9, #0
   1a3a4:	cmp	r0, #19
   1a3a8:	movweq	r9, #1
   1a3ac:	sub	r0, r0, #18
   1a3b0:	clz	r0, r0
   1a3b4:	lsr	r6, r0, #5
   1a3b8:	b	1a438 <__assert_fail@plt+0x8cc4>
   1a3bc:	mov	r6, r0
   1a3c0:	cmn	r0, #2
   1a3c4:	beq	1a540 <__assert_fail@plt+0x8dcc>
   1a3c8:	ldrb	r0, [r7, #4]
   1a3cc:	cmp	r0, #24
   1a3d0:	mov	r9, r6
   1a3d4:	beq	1a408 <__assert_fail@plt+0x8c94>
   1a3d8:	cmp	r0, #1
   1a3dc:	bne	1a540 <__assert_fail@plt+0x8dcc>
   1a3e0:	ldrb	r0, [r7]
   1a3e4:	cmp	r0, #44	; 0x2c
   1a3e8:	bne	1a540 <__assert_fail@plt+0x8dcc>
   1a3ec:	mov	r0, r8
   1a3f0:	mov	r1, r7
   1a3f4:	mov	r2, sl
   1a3f8:	bl	1b650 <__assert_fail@plt+0x9edc>
   1a3fc:	mov	r9, r0
   1a400:	cmn	r0, #2
   1a404:	beq	1a540 <__assert_fail@plt+0x8dcc>
   1a408:	cmn	r9, #1
   1a40c:	beq	1a418 <__assert_fail@plt+0x8ca4>
   1a410:	cmp	r6, r9
   1a414:	bgt	1a398 <__assert_fail@plt+0x8c24>
   1a418:	ldrb	r0, [r7, #4]
   1a41c:	cmp	r0, #24
   1a420:	bne	1a398 <__assert_fail@plt+0x8c24>
   1a424:	cmn	r9, #1
   1a428:	mov	r0, r9
   1a42c:	moveq	r0, r6
   1a430:	cmp	r0, #32768	; 0x8000
   1a434:	bge	1a628 <__assert_fail@plt+0x8eb4>
   1a438:	mov	r0, r7
   1a43c:	mov	r1, r8
   1a440:	mov	r2, sl
   1a444:	bl	1875c <__assert_fail@plt+0x6fe8>
   1a448:	cmp	r4, #0
   1a44c:	beq	1a618 <__assert_fail@plt+0x8ea4>
   1a450:	orrs	r0, r9, r6
   1a454:	beq	1a574 <__assert_fail@plt+0x8e00>
   1a458:	mov	r8, #0
   1a45c:	cmp	r6, #1
   1a460:	bge	1a58c <__assert_fail@plt+0x8e18>
   1a464:	ldrb	r0, [r4, #24]
   1a468:	cmp	r0, #17
   1a46c:	bne	1a484 <__assert_fail@plt+0x8d10>
   1a470:	ldr	r2, [r4, #20]
   1a474:	movw	r1, #47060	; 0xb7d4
   1a478:	movt	r1, #1
   1a47c:	mov	r0, r4
   1a480:	bl	19328 <__assert_fail@plt+0x7bb4>
   1a484:	mov	r3, #10
   1a488:	cmn	r9, #1
   1a48c:	movweq	r3, #11
   1a490:	mov	r0, r5
   1a494:	mov	r1, r4
   1a498:	mov	r2, #0
   1a49c:	bl	188e4 <__assert_fail@plt+0x7170>
   1a4a0:	cmp	r0, #0
   1a4a4:	beq	1a60c <__assert_fail@plt+0x8e98>
   1a4a8:	mov	r7, r0
   1a4ac:	add	r0, r6, #2
   1a4b0:	cmp	r0, r9
   1a4b4:	ble	1a4dc <__assert_fail@plt+0x8d68>
   1a4b8:	cmp	r8, #0
   1a4bc:	beq	1a56c <__assert_fail@plt+0x8df8>
   1a4c0:	mov	r0, r5
   1a4c4:	mov	r1, r8
   1a4c8:	mov	r2, r7
   1a4cc:	mov	r3, #16
   1a4d0:	sub	sp, fp, #28
   1a4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4d8:	b	188e4 <__assert_fail@plt+0x7170>
   1a4dc:	add	r6, r6, #1
   1a4e0:	mov	r0, r4
   1a4e4:	mov	r1, r5
   1a4e8:	bl	1b6f8 <__assert_fail@plt+0x9f84>
   1a4ec:	mov	r4, r0
   1a4f0:	mov	r0, r5
   1a4f4:	mov	r1, r7
   1a4f8:	mov	r2, r4
   1a4fc:	mov	r3, #16
   1a500:	bl	188e4 <__assert_fail@plt+0x7170>
   1a504:	cmp	r4, #0
   1a508:	movne	r1, r0
   1a50c:	cmpne	r0, #0
   1a510:	beq	1a60c <__assert_fail@plt+0x8e98>
   1a514:	mov	r0, r5
   1a518:	mov	r2, #0
   1a51c:	mov	r3, #10
   1a520:	bl	188e4 <__assert_fail@plt+0x7170>
   1a524:	cmp	r0, #0
   1a528:	beq	1a60c <__assert_fail@plt+0x8e98>
   1a52c:	mov	r7, r0
   1a530:	add	r6, r6, #1
   1a534:	cmp	r6, r9
   1a538:	blt	1a4e0 <__assert_fail@plt+0x8d6c>
   1a53c:	b	1a4b8 <__assert_fail@plt+0x8d44>
   1a540:	tst	sl, #2097152	; 0x200000
   1a544:	beq	1a630 <__assert_fail@plt+0x8ebc>
   1a548:	ldr	r0, [sp, #4]
   1a54c:	str	r0, [r8, #40]	; 0x28
   1a550:	ldr	r0, [sp, #12]
   1a554:	str	r0, [r7]
   1a558:	ldr	r0, [sp, #8]
   1a55c:	str	r0, [r7, #4]
   1a560:	mov	r0, #1
   1a564:	strb	r0, [r7, #4]
   1a568:	b	1a61c <__assert_fail@plt+0x8ea8>
   1a56c:	mov	r4, r7
   1a570:	b	1a61c <__assert_fail@plt+0x8ea8>
   1a574:	movw	r1, #37792	; 0x93a0
   1a578:	movt	r1, #1
   1a57c:	mov	r0, r4
   1a580:	mov	r2, #0
   1a584:	bl	19328 <__assert_fail@plt+0x7bb4>
   1a588:	b	1a618 <__assert_fail@plt+0x8ea4>
   1a58c:	bne	1a5b8 <__assert_fail@plt+0x8e44>
   1a590:	mov	r8, r4
   1a594:	cmp	r6, r9
   1a598:	beq	1a604 <__assert_fail@plt+0x8e90>
   1a59c:	mov	r0, r4
   1a5a0:	mov	r1, r5
   1a5a4:	bl	1b6f8 <__assert_fail@plt+0x9f84>
   1a5a8:	mov	r4, r0
   1a5ac:	cmp	r0, #0
   1a5b0:	bne	1a464 <__assert_fail@plt+0x8cf0>
   1a5b4:	b	1a60c <__assert_fail@plt+0x8e98>
   1a5b8:	sub	r7, r6, #1
   1a5bc:	mov	r8, r4
   1a5c0:	mov	r0, r4
   1a5c4:	mov	r1, r5
   1a5c8:	bl	1b6f8 <__assert_fail@plt+0x9f84>
   1a5cc:	mov	r4, r0
   1a5d0:	mov	r0, r5
   1a5d4:	mov	r1, r8
   1a5d8:	mov	r2, r4
   1a5dc:	mov	r3, #16
   1a5e0:	bl	188e4 <__assert_fail@plt+0x7170>
   1a5e4:	cmp	r4, #0
   1a5e8:	movne	r8, r0
   1a5ec:	cmpne	r0, #0
   1a5f0:	beq	1a60c <__assert_fail@plt+0x8e98>
   1a5f4:	subs	r7, r7, #1
   1a5f8:	bne	1a5c0 <__assert_fail@plt+0x8e4c>
   1a5fc:	cmp	r6, r9
   1a600:	bne	1a59c <__assert_fail@plt+0x8e28>
   1a604:	mov	r4, r8
   1a608:	b	1a61c <__assert_fail@plt+0x8ea8>
   1a60c:	mov	r0, #12
   1a610:	ldr	r1, [sp, #16]
   1a614:	str	r0, [r1]
   1a618:	mov	r4, #0
   1a61c:	mov	r0, r4
   1a620:	sub	sp, fp, #28
   1a624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a628:	mov	r0, #15
   1a62c:	b	1a610 <__assert_fail@plt+0x8e9c>
   1a630:	ldrb	r0, [r7, #4]
   1a634:	mov	r1, #10
   1a638:	cmp	r0, #2
   1a63c:	movweq	r1, #9
   1a640:	ldr	r0, [sp, #16]
   1a644:	str	r1, [r0]
   1a648:	b	1a618 <__assert_fail@plt+0x8ea4>
   1a64c:	push	{r4, sl, fp, lr}
   1a650:	add	fp, sp, #8
   1a654:	ldr	ip, [r1, #40]	; 0x28
   1a658:	ldr	r3, [r1, #56]	; 0x38
   1a65c:	cmp	r3, ip
   1a660:	ble	1a6e0 <__assert_fail@plt+0x8f6c>
   1a664:	ldr	r3, [r1, #4]
   1a668:	ldrb	ip, [r3, ip]
   1a66c:	strb	ip, [r0]
   1a670:	ldr	r3, [r1, #80]	; 0x50
   1a674:	cmp	r3, #2
   1a678:	blt	1a69c <__assert_fail@plt+0x8f28>
   1a67c:	ldr	lr, [r1, #28]
   1a680:	ldr	r4, [r1, #40]	; 0x28
   1a684:	cmp	r4, lr
   1a688:	beq	1a69c <__assert_fail@plt+0x8f28>
   1a68c:	ldr	r3, [r1, #8]
   1a690:	ldr	r3, [r3, r4, lsl #2]
   1a694:	cmn	r3, #1
   1a698:	beq	1a78c <__assert_fail@plt+0x9018>
   1a69c:	tst	r2, #1
   1a6a0:	beq	1a6f4 <__assert_fail@plt+0x8f80>
   1a6a4:	cmp	ip, #92	; 0x5c
   1a6a8:	bne	1a6f4 <__assert_fail@plt+0x8f80>
   1a6ac:	ldr	r2, [r1, #40]	; 0x28
   1a6b0:	ldr	r3, [r1, #48]	; 0x30
   1a6b4:	add	r2, r2, #1
   1a6b8:	cmp	r2, r3
   1a6bc:	bge	1a78c <__assert_fail@plt+0x9018>
   1a6c0:	str	r2, [r1, #40]	; 0x28
   1a6c4:	ldr	r1, [r1, #4]
   1a6c8:	ldrb	r2, [r1, r2]
   1a6cc:	mov	r1, #1
   1a6d0:	strb	r1, [r0, #4]
   1a6d4:	strb	r2, [r0]
   1a6d8:	mov	r0, r1
   1a6dc:	pop	{r4, sl, fp, pc}
   1a6e0:	mov	r1, #2
   1a6e4:	strb	r1, [r0, #4]
   1a6e8:	mov	r1, #0
   1a6ec:	mov	r0, r1
   1a6f0:	pop	{r4, sl, fp, pc}
   1a6f4:	cmp	ip, #92	; 0x5c
   1a6f8:	bgt	1a74c <__assert_fail@plt+0x8fd8>
   1a6fc:	cmp	ip, #45	; 0x2d
   1a700:	beq	1a764 <__assert_fail@plt+0x8ff0>
   1a704:	cmp	ip, #91	; 0x5b
   1a708:	bne	1a78c <__assert_fail@plt+0x9018>
   1a70c:	ldr	r3, [r1, #40]	; 0x28
   1a710:	ldr	r4, [r1, #48]	; 0x30
   1a714:	add	r3, r3, #1
   1a718:	cmp	r3, r4
   1a71c:	bge	1a780 <__assert_fail@plt+0x900c>
   1a720:	ldr	r1, [r1, #4]
   1a724:	ldrb	r1, [r1, r3]
   1a728:	strb	r1, [r0]
   1a72c:	cmp	r1, #61	; 0x3d
   1a730:	beq	1a79c <__assert_fail@plt+0x9028>
   1a734:	cmp	r1, #58	; 0x3a
   1a738:	beq	1a7a4 <__assert_fail@plt+0x9030>
   1a73c:	cmp	r1, #46	; 0x2e
   1a740:	bne	1a788 <__assert_fail@plt+0x9014>
   1a744:	mov	r1, #26
   1a748:	b	1a7b0 <__assert_fail@plt+0x903c>
   1a74c:	cmp	ip, #93	; 0x5d
   1a750:	beq	1a76c <__assert_fail@plt+0x8ff8>
   1a754:	cmp	ip, #94	; 0x5e
   1a758:	bne	1a78c <__assert_fail@plt+0x9018>
   1a75c:	mov	r1, #25
   1a760:	b	1a770 <__assert_fail@plt+0x8ffc>
   1a764:	mov	r1, #22
   1a768:	b	1a770 <__assert_fail@plt+0x8ffc>
   1a76c:	mov	r1, #21
   1a770:	strb	r1, [r0, #4]
   1a774:	mov	r1, #1
   1a778:	mov	r0, r1
   1a77c:	pop	{r4, sl, fp, pc}
   1a780:	mov	r1, #0
   1a784:	strb	r1, [r0]
   1a788:	strb	ip, [r0]
   1a78c:	mov	r1, #1
   1a790:	strb	r1, [r0, #4]
   1a794:	mov	r0, r1
   1a798:	pop	{r4, sl, fp, pc}
   1a79c:	mov	r1, #28
   1a7a0:	b	1a7b0 <__assert_fail@plt+0x903c>
   1a7a4:	tst	r2, #4
   1a7a8:	beq	1a788 <__assert_fail@plt+0x9014>
   1a7ac:	mov	r1, #30
   1a7b0:	strb	r1, [r0, #4]
   1a7b4:	mov	r1, #2
   1a7b8:	mov	r0, r1
   1a7bc:	pop	{r4, sl, fp, pc}
   1a7c0:	asr	r2, r1, #31
   1a7c4:	add	r2, r1, r2, lsr #27
   1a7c8:	asr	r2, r2, #5
   1a7cc:	ldr	ip, [r0, r2, lsl #2]
   1a7d0:	and	r1, r1, #31
   1a7d4:	mov	r3, #1
   1a7d8:	orr	r1, ip, r3, lsl r1
   1a7dc:	str	r1, [r0, r2, lsl #2]
   1a7e0:	bx	lr
   1a7e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a7e8:	add	fp, sp, #24
   1a7ec:	sub	sp, sp, #8
   1a7f0:	mov	r5, r3
   1a7f4:	mov	r8, r2
   1a7f8:	mov	r6, r1
   1a7fc:	mov	r9, r0
   1a800:	ldr	r7, [r1, #40]	; 0x28
   1a804:	mov	r0, r1
   1a808:	mov	r1, r7
   1a80c:	bl	1b424 <__assert_fail@plt+0x9cb0>
   1a810:	cmp	r0, #2
   1a814:	blt	1a84c <__assert_fail@plt+0x90d8>
   1a818:	mov	r4, r0
   1a81c:	mov	r0, #1
   1a820:	str	r0, [r9]
   1a824:	mov	r0, r6
   1a828:	mov	r1, r7
   1a82c:	bl	19190 <__assert_fail@plt+0x7a1c>
   1a830:	str	r0, [r9, #4]
   1a834:	ldr	r0, [r6, #40]	; 0x28
   1a838:	add	r0, r0, r4
   1a83c:	str	r0, [r6, #40]	; 0x28
   1a840:	mov	r0, #0
   1a844:	sub	sp, fp, #24
   1a848:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a84c:	ldr	r0, [fp, #12]
   1a850:	ldr	r2, [fp, #8]
   1a854:	add	r1, r7, r5
   1a858:	str	r1, [r6, #40]	; 0x28
   1a85c:	ldrb	r1, [r8, #4]
   1a860:	sub	r1, r1, #22
   1a864:	cmp	r1, #8
   1a868:	bhi	1a8d4 <__assert_fail@plt+0x9160>
   1a86c:	add	r3, pc, #0
   1a870:	ldr	pc, [r3, r1, lsl #2]
   1a874:			; <UNDEFINED> instruction: 0x0001a8b0
   1a878:	ldrdeq	sl, [r1], -r4
   1a87c:	ldrdeq	sl, [r1], -r4
   1a880:	ldrdeq	sl, [r1], -r4
   1a884:	muleq	r1, r8, r8
   1a888:	ldrdeq	sl, [r1], -r4
   1a88c:	muleq	r1, r8, r8
   1a890:	ldrdeq	sl, [r1], -r4
   1a894:	muleq	r1, r8, r8
   1a898:	mov	r0, r9
   1a89c:	mov	r1, r6
   1a8a0:	mov	r2, r8
   1a8a4:	sub	sp, fp, #24
   1a8a8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a8ac:	b	1b480 <__assert_fail@plt+0x9d0c>
   1a8b0:	cmp	r0, #0
   1a8b4:	bne	1a8d4 <__assert_fail@plt+0x9160>
   1a8b8:	mov	r0, sp
   1a8bc:	mov	r1, r6
   1a8c0:	bl	1a64c <__assert_fail@plt+0x8ed8>
   1a8c4:	ldrb	r1, [sp, #4]
   1a8c8:	mov	r0, #11
   1a8cc:	cmp	r1, #21
   1a8d0:	bne	1a8e4 <__assert_fail@plt+0x9170>
   1a8d4:	mov	r0, #0
   1a8d8:	str	r0, [r9]
   1a8dc:	ldrb	r1, [r8]
   1a8e0:	strb	r1, [r9, #4]
   1a8e4:	sub	sp, fp, #24
   1a8e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a8ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8f0:	add	fp, sp, #28
   1a8f4:	sub	sp, sp, #12
   1a8f8:	mov	sl, r0
   1a8fc:	ldr	r7, [r3]
   1a900:	mov	r0, #11
   1a904:	cmp	r7, #2
   1a908:	cmpne	r7, #4
   1a90c:	beq	1a924 <__assert_fail@plt+0x91b0>
   1a910:	ldr	r8, [fp, #8]
   1a914:	ldr	r5, [r8]
   1a918:	cmp	r5, #2
   1a91c:	cmpne	r5, #4
   1a920:	bne	1a92c <__assert_fail@plt+0x91b8>
   1a924:	sub	sp, fp, #28
   1a928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a92c:	mov	r6, r3
   1a930:	mov	r9, r2
   1a934:	mov	r4, r1
   1a938:	cmp	r7, #3
   1a93c:	bne	1a950 <__assert_fail@plt+0x91dc>
   1a940:	ldr	r0, [r6, #4]
   1a944:	bl	11624 <strlen@plt>
   1a948:	cmp	r0, #1
   1a94c:	bhi	1aa94 <__assert_fail@plt+0x9320>
   1a950:	cmp	r5, #3
   1a954:	bne	1a968 <__assert_fail@plt+0x91f4>
   1a958:	ldr	r0, [r8, #4]
   1a95c:	bl	11624 <strlen@plt>
   1a960:	cmp	r0, #1
   1a964:	bhi	1aa94 <__assert_fail@plt+0x9320>
   1a968:	cmp	r7, #3
   1a96c:	beq	1a980 <__assert_fail@plt+0x920c>
   1a970:	mov	r0, #0
   1a974:	cmp	r7, #0
   1a978:	ldrbeq	r0, [r6, #4]
   1a97c:	b	1a988 <__assert_fail@plt+0x9214>
   1a980:	ldr	r0, [r6, #4]
   1a984:	ldrb	r0, [r0]
   1a988:	stmib	sp, {r4, r9}
   1a98c:	cmp	r5, #3
   1a990:	beq	1a9a4 <__assert_fail@plt+0x9230>
   1a994:	mov	r9, #0
   1a998:	cmp	r5, #0
   1a99c:	ldrbeq	r9, [r8, #4]
   1a9a0:	b	1a9ac <__assert_fail@plt+0x9238>
   1a9a4:	ldr	r1, [r8, #4]
   1a9a8:	ldrb	r9, [r1]
   1a9ac:	ldr	r4, [fp, #12]
   1a9b0:	cmp	r7, #3
   1a9b4:	cmpne	r7, #0
   1a9b8:	bne	1a9cc <__assert_fail@plt+0x9258>
   1a9bc:	mov	r1, r4
   1a9c0:	bl	1b640 <__assert_fail@plt+0x9ecc>
   1a9c4:	mov	r7, r0
   1a9c8:	b	1a9d0 <__assert_fail@plt+0x925c>
   1a9cc:	ldr	r7, [r6, #4]
   1a9d0:	ldr	r0, [r8]
   1a9d4:	cmp	r0, #3
   1a9d8:	cmpne	r0, #0
   1a9dc:	bne	1a9f4 <__assert_fail@plt+0x9280>
   1a9e0:	mov	r0, r9
   1a9e4:	mov	r1, r4
   1a9e8:	bl	1b640 <__assert_fail@plt+0x9ecc>
   1a9ec:	mov	r6, r0
   1a9f0:	b	1a9f8 <__assert_fail@plt+0x9284>
   1a9f4:	ldr	r6, [r8, #4]
   1a9f8:	ldr	r1, [sp, #8]
   1a9fc:	ldr	r5, [sp, #4]
   1aa00:	mov	r0, #3
   1aa04:	cmn	r7, #1
   1aa08:	cmnne	r6, #1
   1aa0c:	beq	1a924 <__assert_fail@plt+0x91b0>
   1aa10:	ldr	r0, [fp, #16]
   1aa14:	tst	r0, #65536	; 0x10000
   1aa18:	beq	1aa28 <__assert_fail@plt+0x92b4>
   1aa1c:	cmp	r7, r6
   1aa20:	mov	r0, #11
   1aa24:	bhi	1a924 <__assert_fail@plt+0x91b0>
   1aa28:	ldr	r0, [r4, #92]	; 0x5c
   1aa2c:	cmp	r0, #2
   1aa30:	blt	1aa64 <__assert_fail@plt+0x92f0>
   1aa34:	ldr	r0, [r5, #32]
   1aa38:	ldr	r1, [r1]
   1aa3c:	cmp	r1, r0
   1aa40:	beq	1aaa0 <__assert_fail@plt+0x932c>
   1aa44:	ldr	r0, [r5, #4]
   1aa48:	ldr	r1, [r5, #32]
   1aa4c:	str	r7, [r0, r1, lsl #2]
   1aa50:	ldr	r0, [r5, #8]
   1aa54:	ldr	r1, [r5, #32]
   1aa58:	add	r2, r1, #1
   1aa5c:	str	r2, [r5, #32]
   1aa60:	str	r6, [r0, r1, lsl #2]
   1aa64:	mov	r5, #0
   1aa68:	cmp	r7, r5
   1aa6c:	cmpls	r5, r6
   1aa70:	movls	r0, sl
   1aa74:	movls	r1, r5
   1aa78:	blls	1a7c0 <__assert_fail@plt+0x904c>
   1aa7c:	add	r5, r5, #1
   1aa80:	cmp	r5, #256	; 0x100
   1aa84:	bne	1aa68 <__assert_fail@plt+0x92f4>
   1aa88:	mov	r0, #0
   1aa8c:	sub	sp, fp, #28
   1aa90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa94:	mov	r0, #3
   1aa98:	sub	sp, fp, #28
   1aa9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aaa0:	mov	r1, #1
   1aaa4:	orr	r8, r1, r0, lsl #1
   1aaa8:	lsl	r4, r8, #2
   1aaac:	ldr	r0, [r5, #4]
   1aab0:	mov	r1, r4
   1aab4:	bl	23f00 <__assert_fail@plt+0x1278c>
   1aab8:	mov	r9, r0
   1aabc:	ldr	r0, [r5, #8]
   1aac0:	mov	r1, r4
   1aac4:	bl	23f00 <__assert_fail@plt+0x1278c>
   1aac8:	mov	r4, r0
   1aacc:	cmp	r9, #0
   1aad0:	cmpne	r4, #0
   1aad4:	bne	1aaf4 <__assert_fail@plt+0x9380>
   1aad8:	mov	r0, r9
   1aadc:	bl	13f1c <__assert_fail@plt+0x27a8>
   1aae0:	mov	r0, r4
   1aae4:	bl	13f1c <__assert_fail@plt+0x27a8>
   1aae8:	mov	r0, #12
   1aaec:	sub	sp, fp, #28
   1aaf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aaf4:	ldr	r5, [sp, #4]
   1aaf8:	str	r9, [r5, #4]
   1aafc:	str	r4, [r5, #8]
   1ab00:	ldr	r0, [sp, #8]
   1ab04:	str	r8, [r0]
   1ab08:	b	1aa44 <__assert_fail@plt+0x92d0>
   1ab0c:	push	{r4, r5, fp, lr}
   1ab10:	add	fp, sp, #8
   1ab14:	mov	r5, r1
   1ab18:	mov	r4, r0
   1ab1c:	mov	r0, r1
   1ab20:	bl	11624 <strlen@plt>
   1ab24:	cmp	r0, #1
   1ab28:	bne	1ab40 <__assert_fail@plt+0x93cc>
   1ab2c:	ldrb	r1, [r5]
   1ab30:	mov	r0, r4
   1ab34:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1ab38:	mov	r0, #0
   1ab3c:	pop	{r4, r5, fp, pc}
   1ab40:	mov	r0, #3
   1ab44:	pop	{r4, r5, fp, pc}
   1ab48:	push	{r4, r5, fp, lr}
   1ab4c:	add	fp, sp, #8
   1ab50:	mov	r5, r1
   1ab54:	mov	r4, r0
   1ab58:	mov	r0, r1
   1ab5c:	bl	11624 <strlen@plt>
   1ab60:	cmp	r0, #1
   1ab64:	bne	1ab7c <__assert_fail@plt+0x9408>
   1ab68:	ldrb	r1, [r5]
   1ab6c:	mov	r0, r4
   1ab70:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1ab74:	mov	r0, #0
   1ab78:	pop	{r4, r5, fp, pc}
   1ab7c:	mov	r0, #3
   1ab80:	pop	{r4, r5, fp, pc}
   1ab84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ab88:	add	fp, sp, #24
   1ab8c:	mov	r5, r3
   1ab90:	mov	r7, r2
   1ab94:	mov	r4, r1
   1ab98:	mov	r8, r0
   1ab9c:	ldr	r6, [fp, #8]
   1aba0:	ldrb	r0, [fp, #14]
   1aba4:	tst	r0, #64	; 0x40
   1aba8:	beq	1abe4 <__assert_fail@plt+0x9470>
   1abac:	movw	r1, #22962	; 0x59b2
   1abb0:	movt	r1, #2
   1abb4:	mov	r0, r6
   1abb8:	bl	11420 <strcmp@plt>
   1abbc:	cmp	r0, #0
   1abc0:	beq	1abdc <__assert_fail@plt+0x9468>
   1abc4:	movw	r1, #22968	; 0x59b8
   1abc8:	movt	r1, #2
   1abcc:	mov	r0, r6
   1abd0:	bl	11420 <strcmp@plt>
   1abd4:	cmp	r0, #0
   1abd8:	bne	1abe4 <__assert_fail@plt+0x9470>
   1abdc:	movw	r6, #22974	; 0x59be
   1abe0:	movt	r6, #2
   1abe4:	ldr	r0, [r7, #36]	; 0x24
   1abe8:	ldr	r1, [r5]
   1abec:	cmp	r1, r0
   1abf0:	beq	1b0c0 <__assert_fail@plt+0x994c>
   1abf4:	mov	r0, r6
   1abf8:	bl	113f0 <wctype@plt>
   1abfc:	ldr	r1, [r7, #12]
   1ac00:	ldr	r2, [r7, #36]	; 0x24
   1ac04:	add	r3, r2, #1
   1ac08:	str	r3, [r7, #36]	; 0x24
   1ac0c:	str	r0, [r1, r2, lsl #2]
   1ac10:	movw	r1, #22950	; 0x59a6
   1ac14:	movt	r1, #2
   1ac18:	mov	r0, r6
   1ac1c:	bl	11420 <strcmp@plt>
   1ac20:	cmp	r0, #0
   1ac24:	beq	1ad84 <__assert_fail@plt+0x9610>
   1ac28:	movw	r1, #22980	; 0x59c4
   1ac2c:	movt	r1, #2
   1ac30:	mov	r0, r6
   1ac34:	bl	11420 <strcmp@plt>
   1ac38:	cmp	r0, #0
   1ac3c:	beq	1adcc <__assert_fail@plt+0x9658>
   1ac40:	movw	r1, #22968	; 0x59b8
   1ac44:	movt	r1, #2
   1ac48:	mov	r0, r6
   1ac4c:	bl	11420 <strcmp@plt>
   1ac50:	cmp	r0, #0
   1ac54:	beq	1ae14 <__assert_fail@plt+0x96a0>
   1ac58:	movw	r1, #22956	; 0x59ac
   1ac5c:	movt	r1, #2
   1ac60:	mov	r0, r6
   1ac64:	bl	11420 <strcmp@plt>
   1ac68:	cmp	r0, #0
   1ac6c:	beq	1ae60 <__assert_fail@plt+0x96ec>
   1ac70:	movw	r1, #22974	; 0x59be
   1ac74:	movt	r1, #2
   1ac78:	mov	r0, r6
   1ac7c:	bl	11420 <strcmp@plt>
   1ac80:	cmp	r0, #0
   1ac84:	beq	1aeac <__assert_fail@plt+0x9738>
   1ac88:	movw	r1, #23011	; 0x59e3
   1ac8c:	movt	r1, #2
   1ac90:	mov	r0, r6
   1ac94:	bl	11420 <strcmp@plt>
   1ac98:	cmp	r0, #0
   1ac9c:	beq	1aef8 <__assert_fail@plt+0x9784>
   1aca0:	movw	r1, #22986	; 0x59ca
   1aca4:	movt	r1, #2
   1aca8:	mov	r0, r6
   1acac:	bl	11420 <strcmp@plt>
   1acb0:	cmp	r0, #0
   1acb4:	beq	1af44 <__assert_fail@plt+0x97d0>
   1acb8:	movw	r1, #22962	; 0x59b2
   1acbc:	movt	r1, #2
   1acc0:	mov	r0, r6
   1acc4:	bl	11420 <strcmp@plt>
   1acc8:	cmp	r0, #0
   1accc:	beq	1af90 <__assert_fail@plt+0x981c>
   1acd0:	movw	r1, #22992	; 0x59d0
   1acd4:	movt	r1, #2
   1acd8:	mov	r0, r6
   1acdc:	bl	11420 <strcmp@plt>
   1ace0:	cmp	r0, #0
   1ace4:	beq	1afdc <__assert_fail@plt+0x9868>
   1ace8:	movw	r1, #22998	; 0x59d6
   1acec:	movt	r1, #2
   1acf0:	mov	r0, r6
   1acf4:	bl	11420 <strcmp@plt>
   1acf8:	cmp	r0, #0
   1acfc:	beq	1b024 <__assert_fail@plt+0x98b0>
   1ad00:	movw	r1, #23004	; 0x59dc
   1ad04:	movt	r1, #2
   1ad08:	mov	r0, r6
   1ad0c:	bl	11420 <strcmp@plt>
   1ad10:	cmp	r0, #0
   1ad14:	beq	1b078 <__assert_fail@plt+0x9904>
   1ad18:	movw	r1, #23010	; 0x59e2
   1ad1c:	movt	r1, #2
   1ad20:	mov	r0, r6
   1ad24:	bl	11420 <strcmp@plt>
   1ad28:	mov	r1, r0
   1ad2c:	mov	r0, #4
   1ad30:	cmp	r1, #0
   1ad34:	bne	1b0bc <__assert_fail@plt+0x9948>
   1ad38:	bl	11600 <__ctype_b_loc@plt>
   1ad3c:	mov	r6, r0
   1ad40:	cmp	r8, #0
   1ad44:	bne	1b398 <__assert_fail@plt+0x9c24>
   1ad48:	mov	r7, #0
   1ad4c:	mov	r5, #0
   1ad50:	ldr	r0, [r6]
   1ad54:	add	r0, r0, r7
   1ad58:	ldrb	r0, [r0, #1]
   1ad5c:	tst	r0, #16
   1ad60:	movne	r0, r4
   1ad64:	movne	r1, r5
   1ad68:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1ad6c:	add	r7, r7, #2
   1ad70:	add	r5, r5, #1
   1ad74:	mov	r0, #0
   1ad78:	cmp	r5, #256	; 0x100
   1ad7c:	bne	1ad50 <__assert_fail@plt+0x95dc>
   1ad80:	b	1b0bc <__assert_fail@plt+0x9948>
   1ad84:	bl	11600 <__ctype_b_loc@plt>
   1ad88:	mov	r6, r0
   1ad8c:	cmp	r8, #0
   1ad90:	bne	1b0e8 <__assert_fail@plt+0x9974>
   1ad94:	mov	r7, #0
   1ad98:	mov	r5, #0
   1ad9c:	ldr	r0, [r6]
   1ada0:	ldrb	r0, [r0, r7]
   1ada4:	tst	r0, #8
   1ada8:	movne	r0, r4
   1adac:	movne	r1, r5
   1adb0:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1adb4:	add	r7, r7, #2
   1adb8:	add	r5, r5, #1
   1adbc:	cmp	r5, #256	; 0x100
   1adc0:	bne	1ad9c <__assert_fail@plt+0x9628>
   1adc4:	mov	r0, #0
   1adc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1adcc:	bl	11600 <__ctype_b_loc@plt>
   1add0:	mov	r6, r0
   1add4:	cmp	r8, #0
   1add8:	bne	1b124 <__assert_fail@plt+0x99b0>
   1addc:	mov	r7, #0
   1ade0:	mov	r5, #0
   1ade4:	ldr	r0, [r6]
   1ade8:	ldrb	r0, [r0, r7]
   1adec:	tst	r0, #2
   1adf0:	movne	r0, r4
   1adf4:	movne	r1, r5
   1adf8:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1adfc:	add	r7, r7, #2
   1ae00:	add	r5, r5, #1
   1ae04:	cmp	r5, #256	; 0x100
   1ae08:	bne	1ade4 <__assert_fail@plt+0x9670>
   1ae0c:	mov	r0, #0
   1ae10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ae14:	bl	11600 <__ctype_b_loc@plt>
   1ae18:	mov	r6, r0
   1ae1c:	cmp	r8, #0
   1ae20:	bne	1b160 <__assert_fail@plt+0x99ec>
   1ae24:	mov	r7, #0
   1ae28:	mov	r5, #0
   1ae2c:	ldr	r0, [r6]
   1ae30:	add	r0, r0, r7
   1ae34:	ldrb	r0, [r0, #1]
   1ae38:	tst	r0, #2
   1ae3c:	movne	r0, r4
   1ae40:	movne	r1, r5
   1ae44:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1ae48:	add	r7, r7, #2
   1ae4c:	add	r5, r5, #1
   1ae50:	cmp	r5, #256	; 0x100
   1ae54:	bne	1ae2c <__assert_fail@plt+0x96b8>
   1ae58:	mov	r0, #0
   1ae5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ae60:	bl	11600 <__ctype_b_loc@plt>
   1ae64:	mov	r6, r0
   1ae68:	cmp	r8, #0
   1ae6c:	bne	1b1a0 <__assert_fail@plt+0x9a2c>
   1ae70:	mov	r7, #0
   1ae74:	mov	r5, #0
   1ae78:	ldr	r0, [r6]
   1ae7c:	add	r0, r0, r7
   1ae80:	ldrb	r0, [r0, #1]
   1ae84:	tst	r0, #32
   1ae88:	movne	r0, r4
   1ae8c:	movne	r1, r5
   1ae90:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1ae94:	add	r7, r7, #2
   1ae98:	add	r5, r5, #1
   1ae9c:	cmp	r5, #256	; 0x100
   1aea0:	bne	1ae78 <__assert_fail@plt+0x9704>
   1aea4:	mov	r0, #0
   1aea8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aeac:	bl	11600 <__ctype_b_loc@plt>
   1aeb0:	mov	r6, r0
   1aeb4:	cmp	r8, #0
   1aeb8:	bne	1b1e0 <__assert_fail@plt+0x9a6c>
   1aebc:	mov	r7, #0
   1aec0:	mov	r5, #0
   1aec4:	ldr	r0, [r6]
   1aec8:	add	r0, r0, r7
   1aecc:	ldrb	r0, [r0, #1]
   1aed0:	tst	r0, #4
   1aed4:	movne	r0, r4
   1aed8:	movne	r1, r5
   1aedc:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1aee0:	add	r7, r7, #2
   1aee4:	add	r5, r5, #1
   1aee8:	cmp	r5, #256	; 0x100
   1aeec:	bne	1aec4 <__assert_fail@plt+0x9750>
   1aef0:	mov	r0, #0
   1aef4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aef8:	bl	11600 <__ctype_b_loc@plt>
   1aefc:	mov	r6, r0
   1af00:	cmp	r8, #0
   1af04:	bne	1b220 <__assert_fail@plt+0x9aac>
   1af08:	mov	r7, #0
   1af0c:	mov	r5, #0
   1af10:	ldr	r0, [r6]
   1af14:	add	r0, r0, r7
   1af18:	ldrb	r0, [r0, #1]
   1af1c:	tst	r0, #8
   1af20:	movne	r0, r4
   1af24:	movne	r1, r5
   1af28:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1af2c:	add	r7, r7, #2
   1af30:	add	r5, r5, #1
   1af34:	cmp	r5, #256	; 0x100
   1af38:	bne	1af10 <__assert_fail@plt+0x979c>
   1af3c:	mov	r0, #0
   1af40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1af44:	bl	11600 <__ctype_b_loc@plt>
   1af48:	mov	r6, r0
   1af4c:	cmp	r8, #0
   1af50:	bne	1b260 <__assert_fail@plt+0x9aec>
   1af54:	mov	r7, #0
   1af58:	mov	r5, #0
   1af5c:	ldr	r0, [r6]
   1af60:	add	r0, r0, r7
   1af64:	ldrb	r0, [r0, #1]
   1af68:	tst	r0, #64	; 0x40
   1af6c:	movne	r0, r4
   1af70:	movne	r1, r5
   1af74:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1af78:	add	r7, r7, #2
   1af7c:	add	r5, r5, #1
   1af80:	mov	r0, #0
   1af84:	cmp	r5, #256	; 0x100
   1af88:	bne	1af5c <__assert_fail@plt+0x97e8>
   1af8c:	b	1b0bc <__assert_fail@plt+0x9948>
   1af90:	bl	11600 <__ctype_b_loc@plt>
   1af94:	mov	r6, r0
   1af98:	cmp	r8, #0
   1af9c:	bne	1b2a0 <__assert_fail@plt+0x9b2c>
   1afa0:	mov	r7, #0
   1afa4:	mov	r5, #0
   1afa8:	ldr	r0, [r6]
   1afac:	add	r0, r0, r7
   1afb0:	ldrb	r0, [r0, #1]
   1afb4:	tst	r0, #1
   1afb8:	movne	r0, r4
   1afbc:	movne	r1, r5
   1afc0:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1afc4:	add	r7, r7, #2
   1afc8:	add	r5, r5, #1
   1afcc:	mov	r0, #0
   1afd0:	cmp	r5, #256	; 0x100
   1afd4:	bne	1afa8 <__assert_fail@plt+0x9834>
   1afd8:	b	1b0bc <__assert_fail@plt+0x9948>
   1afdc:	bl	11600 <__ctype_b_loc@plt>
   1afe0:	mov	r6, r0
   1afe4:	cmp	r8, #0
   1afe8:	bne	1b2e0 <__assert_fail@plt+0x9b6c>
   1afec:	mov	r7, #0
   1aff0:	mov	r5, #0
   1aff4:	ldr	r0, [r6]
   1aff8:	ldrb	r0, [r0, r7]
   1affc:	tst	r0, #1
   1b000:	movne	r0, r4
   1b004:	movne	r1, r5
   1b008:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1b00c:	add	r7, r7, #2
   1b010:	add	r5, r5, #1
   1b014:	mov	r0, #0
   1b018:	cmp	r5, #256	; 0x100
   1b01c:	bne	1aff4 <__assert_fail@plt+0x9880>
   1b020:	b	1b0bc <__assert_fail@plt+0x9948>
   1b024:	bl	11600 <__ctype_b_loc@plt>
   1b028:	mov	r6, r0
   1b02c:	cmp	r8, #0
   1b030:	bne	1b31c <__assert_fail@plt+0x9ba8>
   1b034:	mov	r7, #0
   1b038:	mov	r5, #0
   1b03c:	b	1b054 <__assert_fail@plt+0x98e0>
   1b040:	add	r7, r7, #2
   1b044:	add	r5, r5, #1
   1b048:	mov	r0, #0
   1b04c:	cmp	r5, #256	; 0x100
   1b050:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b054:	ldr	r0, [r6]
   1b058:	add	r0, r0, r7
   1b05c:	ldrsh	r0, [r0]
   1b060:	cmn	r0, #1
   1b064:	bgt	1b040 <__assert_fail@plt+0x98cc>
   1b068:	mov	r0, r4
   1b06c:	mov	r1, r5
   1b070:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b074:	b	1b040 <__assert_fail@plt+0x98cc>
   1b078:	bl	11600 <__ctype_b_loc@plt>
   1b07c:	mov	r6, r0
   1b080:	cmp	r8, #0
   1b084:	bne	1b35c <__assert_fail@plt+0x9be8>
   1b088:	mov	r7, #0
   1b08c:	mov	r5, #0
   1b090:	ldr	r0, [r6]
   1b094:	ldrb	r0, [r0, r7]
   1b098:	tst	r0, #4
   1b09c:	movne	r0, r4
   1b0a0:	movne	r1, r5
   1b0a4:	blne	1a7c0 <__assert_fail@plt+0x904c>
   1b0a8:	add	r7, r7, #2
   1b0ac:	add	r5, r5, #1
   1b0b0:	mov	r0, #0
   1b0b4:	cmp	r5, #256	; 0x100
   1b0b8:	bne	1b090 <__assert_fail@plt+0x991c>
   1b0bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b0c0:	mov	r1, #1
   1b0c4:	orr	r9, r1, r0, lsl #1
   1b0c8:	lsl	r1, r9, #2
   1b0cc:	ldr	r0, [r7, #12]
   1b0d0:	bl	23f00 <__assert_fail@plt+0x1278c>
   1b0d4:	cmp	r0, #0
   1b0d8:	beq	1b3d8 <__assert_fail@plt+0x9c64>
   1b0dc:	str	r0, [r7, #12]
   1b0e0:	str	r9, [r5]
   1b0e4:	b	1abf4 <__assert_fail@plt+0x9480>
   1b0e8:	mov	r5, #0
   1b0ec:	b	1b104 <__assert_fail@plt+0x9990>
   1b0f0:	add	r8, r8, #1
   1b0f4:	add	r5, r5, #2
   1b0f8:	mov	r0, #0
   1b0fc:	cmp	r5, #512	; 0x200
   1b100:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b104:	ldr	r0, [r6]
   1b108:	ldrb	r0, [r0, r5]
   1b10c:	tst	r0, #8
   1b110:	beq	1b0f0 <__assert_fail@plt+0x997c>
   1b114:	ldrb	r1, [r8]
   1b118:	mov	r0, r4
   1b11c:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b120:	b	1b0f0 <__assert_fail@plt+0x997c>
   1b124:	mov	r5, #0
   1b128:	b	1b140 <__assert_fail@plt+0x99cc>
   1b12c:	add	r8, r8, #1
   1b130:	add	r5, r5, #2
   1b134:	mov	r0, #0
   1b138:	cmp	r5, #512	; 0x200
   1b13c:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b140:	ldr	r0, [r6]
   1b144:	ldrb	r0, [r0, r5]
   1b148:	tst	r0, #2
   1b14c:	beq	1b12c <__assert_fail@plt+0x99b8>
   1b150:	ldrb	r1, [r8]
   1b154:	mov	r0, r4
   1b158:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b15c:	b	1b12c <__assert_fail@plt+0x99b8>
   1b160:	mov	r5, #0
   1b164:	b	1b17c <__assert_fail@plt+0x9a08>
   1b168:	add	r8, r8, #1
   1b16c:	add	r5, r5, #2
   1b170:	mov	r0, #0
   1b174:	cmp	r5, #512	; 0x200
   1b178:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b17c:	ldr	r0, [r6]
   1b180:	add	r0, r0, r5
   1b184:	ldrb	r0, [r0, #1]
   1b188:	tst	r0, #2
   1b18c:	beq	1b168 <__assert_fail@plt+0x99f4>
   1b190:	ldrb	r1, [r8]
   1b194:	mov	r0, r4
   1b198:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b19c:	b	1b168 <__assert_fail@plt+0x99f4>
   1b1a0:	mov	r5, #0
   1b1a4:	b	1b1bc <__assert_fail@plt+0x9a48>
   1b1a8:	add	r8, r8, #1
   1b1ac:	add	r5, r5, #2
   1b1b0:	mov	r0, #0
   1b1b4:	cmp	r5, #512	; 0x200
   1b1b8:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b1bc:	ldr	r0, [r6]
   1b1c0:	add	r0, r0, r5
   1b1c4:	ldrb	r0, [r0, #1]
   1b1c8:	tst	r0, #32
   1b1cc:	beq	1b1a8 <__assert_fail@plt+0x9a34>
   1b1d0:	ldrb	r1, [r8]
   1b1d4:	mov	r0, r4
   1b1d8:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b1dc:	b	1b1a8 <__assert_fail@plt+0x9a34>
   1b1e0:	mov	r5, #0
   1b1e4:	b	1b1fc <__assert_fail@plt+0x9a88>
   1b1e8:	add	r8, r8, #1
   1b1ec:	add	r5, r5, #2
   1b1f0:	mov	r0, #0
   1b1f4:	cmp	r5, #512	; 0x200
   1b1f8:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b1fc:	ldr	r0, [r6]
   1b200:	add	r0, r0, r5
   1b204:	ldrb	r0, [r0, #1]
   1b208:	tst	r0, #4
   1b20c:	beq	1b1e8 <__assert_fail@plt+0x9a74>
   1b210:	ldrb	r1, [r8]
   1b214:	mov	r0, r4
   1b218:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b21c:	b	1b1e8 <__assert_fail@plt+0x9a74>
   1b220:	mov	r5, #0
   1b224:	b	1b23c <__assert_fail@plt+0x9ac8>
   1b228:	add	r8, r8, #1
   1b22c:	add	r5, r5, #2
   1b230:	mov	r0, #0
   1b234:	cmp	r5, #512	; 0x200
   1b238:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b23c:	ldr	r0, [r6]
   1b240:	add	r0, r0, r5
   1b244:	ldrb	r0, [r0, #1]
   1b248:	tst	r0, #8
   1b24c:	beq	1b228 <__assert_fail@plt+0x9ab4>
   1b250:	ldrb	r1, [r8]
   1b254:	mov	r0, r4
   1b258:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b25c:	b	1b228 <__assert_fail@plt+0x9ab4>
   1b260:	mov	r5, #0
   1b264:	b	1b27c <__assert_fail@plt+0x9b08>
   1b268:	add	r8, r8, #1
   1b26c:	add	r5, r5, #2
   1b270:	mov	r0, #0
   1b274:	cmp	r5, #512	; 0x200
   1b278:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b27c:	ldr	r0, [r6]
   1b280:	add	r0, r0, r5
   1b284:	ldrb	r0, [r0, #1]
   1b288:	tst	r0, #64	; 0x40
   1b28c:	beq	1b268 <__assert_fail@plt+0x9af4>
   1b290:	ldrb	r1, [r8]
   1b294:	mov	r0, r4
   1b298:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b29c:	b	1b268 <__assert_fail@plt+0x9af4>
   1b2a0:	mov	r5, #0
   1b2a4:	b	1b2bc <__assert_fail@plt+0x9b48>
   1b2a8:	add	r8, r8, #1
   1b2ac:	add	r5, r5, #2
   1b2b0:	mov	r0, #0
   1b2b4:	cmp	r5, #512	; 0x200
   1b2b8:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b2bc:	ldr	r0, [r6]
   1b2c0:	add	r0, r0, r5
   1b2c4:	ldrb	r0, [r0, #1]
   1b2c8:	tst	r0, #1
   1b2cc:	beq	1b2a8 <__assert_fail@plt+0x9b34>
   1b2d0:	ldrb	r1, [r8]
   1b2d4:	mov	r0, r4
   1b2d8:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b2dc:	b	1b2a8 <__assert_fail@plt+0x9b34>
   1b2e0:	mov	r5, #0
   1b2e4:	b	1b2fc <__assert_fail@plt+0x9b88>
   1b2e8:	add	r8, r8, #1
   1b2ec:	add	r5, r5, #2
   1b2f0:	mov	r0, #0
   1b2f4:	cmp	r5, #512	; 0x200
   1b2f8:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b2fc:	ldr	r0, [r6]
   1b300:	ldrb	r0, [r0, r5]
   1b304:	tst	r0, #1
   1b308:	beq	1b2e8 <__assert_fail@plt+0x9b74>
   1b30c:	ldrb	r1, [r8]
   1b310:	mov	r0, r4
   1b314:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b318:	b	1b2e8 <__assert_fail@plt+0x9b74>
   1b31c:	mov	r5, #0
   1b320:	b	1b338 <__assert_fail@plt+0x9bc4>
   1b324:	add	r8, r8, #1
   1b328:	add	r5, r5, #2
   1b32c:	mov	r0, #0
   1b330:	cmp	r5, #512	; 0x200
   1b334:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b338:	ldr	r0, [r6]
   1b33c:	add	r0, r0, r5
   1b340:	ldrsh	r0, [r0]
   1b344:	cmn	r0, #1
   1b348:	bgt	1b324 <__assert_fail@plt+0x9bb0>
   1b34c:	ldrb	r1, [r8]
   1b350:	mov	r0, r4
   1b354:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b358:	b	1b324 <__assert_fail@plt+0x9bb0>
   1b35c:	mov	r5, #0
   1b360:	b	1b378 <__assert_fail@plt+0x9c04>
   1b364:	add	r8, r8, #1
   1b368:	add	r5, r5, #2
   1b36c:	mov	r0, #0
   1b370:	cmp	r5, #512	; 0x200
   1b374:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b378:	ldr	r0, [r6]
   1b37c:	ldrb	r0, [r0, r5]
   1b380:	tst	r0, #4
   1b384:	beq	1b364 <__assert_fail@plt+0x9bf0>
   1b388:	ldrb	r1, [r8]
   1b38c:	mov	r0, r4
   1b390:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b394:	b	1b364 <__assert_fail@plt+0x9bf0>
   1b398:	mov	r5, #0
   1b39c:	b	1b3b4 <__assert_fail@plt+0x9c40>
   1b3a0:	add	r8, r8, #1
   1b3a4:	add	r5, r5, #2
   1b3a8:	mov	r0, #0
   1b3ac:	cmp	r5, #512	; 0x200
   1b3b0:	beq	1b0bc <__assert_fail@plt+0x9948>
   1b3b4:	ldr	r0, [r6]
   1b3b8:	add	r0, r0, r5
   1b3bc:	ldrb	r0, [r0, #1]
   1b3c0:	tst	r0, #16
   1b3c4:	beq	1b3a0 <__assert_fail@plt+0x9c2c>
   1b3c8:	ldrb	r1, [r8]
   1b3cc:	mov	r0, r4
   1b3d0:	bl	1a7c0 <__assert_fail@plt+0x904c>
   1b3d4:	b	1b3a0 <__assert_fail@plt+0x9c2c>
   1b3d8:	mov	r0, #12
   1b3dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b3e0:	mov	r1, #0
   1b3e4:	ldr	r2, [r0, r1, lsl #2]
   1b3e8:	mvn	r2, r2
   1b3ec:	str	r2, [r0, r1, lsl #2]
   1b3f0:	add	r1, r1, #1
   1b3f4:	cmp	r1, #8
   1b3f8:	bne	1b3e4 <__assert_fail@plt+0x9c70>
   1b3fc:	bx	lr
   1b400:	mov	r2, #0
   1b404:	ldr	ip, [r1, r2, lsl #2]
   1b408:	ldr	r3, [r0, r2, lsl #2]
   1b40c:	and	r3, r3, ip
   1b410:	str	r3, [r0, r2, lsl #2]
   1b414:	add	r2, r2, #1
   1b418:	cmp	r2, #8
   1b41c:	bne	1b404 <__assert_fail@plt+0x9c90>
   1b420:	bx	lr
   1b424:	push	{fp, lr}
   1b428:	mov	fp, sp
   1b42c:	mov	lr, r0
   1b430:	ldr	r3, [r0, #80]	; 0x50
   1b434:	mov	r0, #1
   1b438:	cmp	r3, #1
   1b43c:	beq	1b47c <__assert_fail@plt+0x9d08>
   1b440:	ldr	ip, [lr, #28]
   1b444:	add	r3, r1, #1
   1b448:	cmp	r3, ip
   1b44c:	popge	{fp, pc}
   1b450:	ldr	r0, [lr, #8]
   1b454:	add	ip, r0, r1, lsl #2
   1b458:	mov	r0, #1
   1b45c:	ldr	r3, [ip, r0, lsl #2]
   1b460:	cmn	r3, #1
   1b464:	bne	1b47c <__assert_fail@plt+0x9d08>
   1b468:	add	r0, r0, #1
   1b46c:	add	r3, r1, r0
   1b470:	ldr	r2, [lr, #28]
   1b474:	cmp	r3, r2
   1b478:	blt	1b45c <__assert_fail@plt+0x9ce8>
   1b47c:	pop	{fp, pc}
   1b480:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b484:	add	fp, sp, #24
   1b488:	mov	r7, r1
   1b48c:	mov	r9, r0
   1b490:	ldr	r0, [r1, #40]	; 0x28
   1b494:	ldr	r1, [r1, #56]	; 0x38
   1b498:	mov	r8, #7
   1b49c:	cmp	r1, r0
   1b4a0:	ble	1b564 <__assert_fail@plt+0x9df0>
   1b4a4:	mov	r6, r2
   1b4a8:	ldrb	r5, [r2]
   1b4ac:	mov	r4, #0
   1b4b0:	b	1b4c8 <__assert_fail@plt+0x9d54>
   1b4b4:	ldr	r1, [r9, #4]
   1b4b8:	strb	r0, [r1, r4]
   1b4bc:	add	r4, r4, #1
   1b4c0:	cmp	r4, #32
   1b4c4:	beq	1b564 <__assert_fail@plt+0x9df0>
   1b4c8:	ldrb	r0, [r6, #4]
   1b4cc:	cmp	r0, #30
   1b4d0:	bne	1b4e0 <__assert_fail@plt+0x9d6c>
   1b4d4:	mov	r0, r7
   1b4d8:	bl	1b56c <__assert_fail@plt+0x9df8>
   1b4dc:	b	1b4f4 <__assert_fail@plt+0x9d80>
   1b4e0:	ldr	r0, [r7, #4]
   1b4e4:	ldr	r1, [r7, #40]	; 0x28
   1b4e8:	add	r2, r1, #1
   1b4ec:	str	r2, [r7, #40]	; 0x28
   1b4f0:	ldrb	r0, [r0, r1]
   1b4f4:	ldr	r1, [r7, #40]	; 0x28
   1b4f8:	ldr	r2, [r7, #56]	; 0x38
   1b4fc:	cmp	r2, r1
   1b500:	ble	1b564 <__assert_fail@plt+0x9df0>
   1b504:	cmp	r0, r5
   1b508:	bne	1b4b4 <__assert_fail@plt+0x9d40>
   1b50c:	ldr	r2, [r7, #4]
   1b510:	ldrb	r2, [r2, r1]
   1b514:	cmp	r2, #93	; 0x5d
   1b518:	bne	1b4b4 <__assert_fail@plt+0x9d40>
   1b51c:	add	r0, r1, #1
   1b520:	str	r0, [r7, #40]	; 0x28
   1b524:	ldr	r0, [r9, #4]
   1b528:	mov	r8, #0
   1b52c:	strb	r8, [r0, r4]
   1b530:	ldrb	r0, [r6, #4]
   1b534:	cmp	r0, #30
   1b538:	beq	1b554 <__assert_fail@plt+0x9de0>
   1b53c:	cmp	r0, #28
   1b540:	beq	1b55c <__assert_fail@plt+0x9de8>
   1b544:	cmp	r0, #26
   1b548:	bne	1b564 <__assert_fail@plt+0x9df0>
   1b54c:	mov	r0, #3
   1b550:	b	1b560 <__assert_fail@plt+0x9dec>
   1b554:	mov	r0, #4
   1b558:	b	1b560 <__assert_fail@plt+0x9dec>
   1b55c:	mov	r0, #2
   1b560:	str	r0, [r9]
   1b564:	mov	r0, r8
   1b568:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b56c:	push	{r4, r5, r6, sl, fp, lr}
   1b570:	add	fp, sp, #16
   1b574:	mov	r4, r0
   1b578:	ldrb	r0, [r0, #75]	; 0x4b
   1b57c:	cmp	r0, #0
   1b580:	bne	1b5a0 <__assert_fail@plt+0x9e2c>
   1b584:	ldr	r0, [r4, #4]
   1b588:	ldr	r1, [r4, #40]	; 0x28
   1b58c:	add	r2, r1, #1
   1b590:	str	r2, [r4, #40]	; 0x28
   1b594:	ldrb	r6, [r0, r1]
   1b598:	uxtb	r0, r6
   1b59c:	pop	{r4, r5, r6, sl, fp, pc}
   1b5a0:	ldrb	r0, [r4, #76]	; 0x4c
   1b5a4:	cmp	r0, #0
   1b5a8:	beq	1b60c <__assert_fail@plt+0x9e98>
   1b5ac:	ldr	r0, [r4, #28]
   1b5b0:	ldr	r5, [r4, #40]	; 0x28
   1b5b4:	cmp	r5, r0
   1b5b8:	beq	1b5cc <__assert_fail@plt+0x9e58>
   1b5bc:	ldr	r0, [r4, #8]
   1b5c0:	ldr	r0, [r0, r5, lsl #2]
   1b5c4:	cmn	r0, #1
   1b5c8:	beq	1b628 <__assert_fail@plt+0x9eb4>
   1b5cc:	ldr	r0, [r4]
   1b5d0:	ldr	r1, [r4, #12]
   1b5d4:	ldr	r2, [r4, #24]
   1b5d8:	ldr	r1, [r1, r5, lsl #2]
   1b5dc:	add	r1, r2, r1
   1b5e0:	add	r0, r0, r1
   1b5e4:	ldrsb	r6, [r0]
   1b5e8:	cmn	r6, #1
   1b5ec:	ble	1b628 <__assert_fail@plt+0x9eb4>
   1b5f0:	mov	r0, r4
   1b5f4:	mov	r1, r5
   1b5f8:	bl	1b424 <__assert_fail@plt+0x9cb0>
   1b5fc:	add	r0, r0, r5
   1b600:	str	r0, [r4, #40]	; 0x28
   1b604:	uxtb	r0, r6
   1b608:	pop	{r4, r5, r6, sl, fp, pc}
   1b60c:	ldr	r0, [r4]
   1b610:	ldr	r1, [r4, #24]
   1b614:	ldr	r2, [r4, #40]	; 0x28
   1b618:	add	r3, r2, #1
   1b61c:	str	r3, [r4, #40]	; 0x28
   1b620:	add	r1, r2, r1
   1b624:	b	1b594 <__assert_fail@plt+0x9e20>
   1b628:	add	r0, r5, #1
   1b62c:	str	r0, [r4, #40]	; 0x28
   1b630:	ldr	r0, [r4, #4]
   1b634:	ldrb	r6, [r0, r5]
   1b638:	uxtb	r0, r6
   1b63c:	pop	{r4, r5, r6, sl, fp, pc}
   1b640:	ldr	r1, [r1, #92]	; 0x5c
   1b644:	cmp	r1, #2
   1b648:	bxlt	lr
   1b64c:	b	11678 <btowc@plt>
   1b650:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b654:	add	fp, sp, #24
   1b658:	mov	r4, r2
   1b65c:	mov	r5, r1
   1b660:	mov	r6, r0
   1b664:	mvn	r1, #0
   1b668:	movw	r8, #32816	; 0x8030
   1b66c:	mov	r7, r1
   1b670:	mov	r0, r5
   1b674:	mov	r1, r6
   1b678:	mov	r2, r4
   1b67c:	bl	1875c <__assert_fail@plt+0x6fe8>
   1b680:	ldrb	r2, [r5, #4]
   1b684:	cmp	r2, #24
   1b688:	beq	1b6f0 <__assert_fail@plt+0x9f7c>
   1b68c:	cmp	r2, #2
   1b690:	beq	1b6ec <__assert_fail@plt+0x9f78>
   1b694:	ldrb	r0, [r5]
   1b698:	cmp	r0, #44	; 0x2c
   1b69c:	beq	1b6f0 <__assert_fail@plt+0x9f7c>
   1b6a0:	mvn	r1, #1
   1b6a4:	cmp	r0, #48	; 0x30
   1b6a8:	bcc	1b66c <__assert_fail@plt+0x9ef8>
   1b6ac:	cmp	r2, #1
   1b6b0:	bne	1b66c <__assert_fail@plt+0x9ef8>
   1b6b4:	cmn	r7, #2
   1b6b8:	beq	1b66c <__assert_fail@plt+0x9ef8>
   1b6bc:	cmp	r0, #57	; 0x39
   1b6c0:	bhi	1b66c <__assert_fail@plt+0x9ef8>
   1b6c4:	cmn	r7, #1
   1b6c8:	beq	1b6e4 <__assert_fail@plt+0x9f70>
   1b6cc:	add	r1, r7, r7, lsl #2
   1b6d0:	add	r0, r0, r1, lsl #1
   1b6d4:	cmp	r0, r8
   1b6d8:	movge	r0, r8
   1b6dc:	sub	r1, r0, #48	; 0x30
   1b6e0:	b	1b66c <__assert_fail@plt+0x9ef8>
   1b6e4:	sub	r1, r0, #48	; 0x30
   1b6e8:	b	1b66c <__assert_fail@plt+0x9ef8>
   1b6ec:	mvn	r7, #1
   1b6f0:	mov	r0, r7
   1b6f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b6f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b6fc:	add	fp, sp, #24
   1b700:	sub	sp, sp, #8
   1b704:	mov	r8, r1
   1b708:	mov	r5, r0
   1b70c:	mov	r3, r0
   1b710:	ldr	r7, [r3], #20
   1b714:	mov	r6, #0
   1b718:	mov	r0, r1
   1b71c:	mov	r1, #0
   1b720:	mov	r2, #0
   1b724:	bl	19960 <__assert_fail@plt+0x81ec>
   1b728:	str	r0, [sp, #4]
   1b72c:	cmp	r0, #0
   1b730:	beq	1b7c8 <__assert_fail@plt+0xa054>
   1b734:	add	r4, sp, #4
   1b738:	mov	r6, #0
   1b73c:	str	r7, [r0]
   1b740:	ldr	r0, [r4]
   1b744:	ldr	r1, [r0, #24]
   1b748:	orr	r1, r1, #262144	; 0x40000
   1b74c:	str	r1, [r0, #24]
   1b750:	ldr	r0, [r5, #4]
   1b754:	ldr	r7, [r4]
   1b758:	cmp	r0, #0
   1b75c:	beq	1b76c <__assert_fail@plt+0x9ff8>
   1b760:	add	r4, r7, #4
   1b764:	mov	r5, r0
   1b768:	b	1b7a0 <__assert_fail@plt+0xa02c>
   1b76c:	mov	r1, #0
   1b770:	mov	r0, r5
   1b774:	ldr	r5, [r5, #8]
   1b778:	cmp	r5, r1
   1b77c:	cmpne	r5, #0
   1b780:	bne	1b79c <__assert_fail@plt+0xa028>
   1b784:	ldr	r7, [r7]
   1b788:	ldr	r5, [r0]
   1b78c:	cmp	r5, #0
   1b790:	mov	r1, r0
   1b794:	bne	1b770 <__assert_fail@plt+0x9ffc>
   1b798:	b	1b7c4 <__assert_fail@plt+0xa050>
   1b79c:	add	r4, r7, #8
   1b7a0:	add	r3, r5, #20
   1b7a4:	mov	r0, r8
   1b7a8:	mov	r1, #0
   1b7ac:	mov	r2, #0
   1b7b0:	bl	19960 <__assert_fail@plt+0x81ec>
   1b7b4:	str	r0, [r4]
   1b7b8:	cmp	r0, #0
   1b7bc:	bne	1b73c <__assert_fail@plt+0x9fc8>
   1b7c0:	b	1b7c8 <__assert_fail@plt+0xa054>
   1b7c4:	ldr	r6, [sp, #4]
   1b7c8:	mov	r0, r6
   1b7cc:	sub	sp, fp, #24
   1b7d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b7d4:	ldr	r2, [r1, #24]
   1b7d8:	uxtb	r3, r2
   1b7dc:	cmp	r3, #17
   1b7e0:	bne	1b7f4 <__assert_fail@plt+0xa080>
   1b7e4:	ldr	r3, [r1, #20]
   1b7e8:	cmp	r3, r0
   1b7ec:	orreq	r0, r2, #524288	; 0x80000
   1b7f0:	streq	r0, [r1, #24]
   1b7f4:	mov	r0, #0
   1b7f8:	bx	lr
   1b7fc:	push	{r4, r5, r6, r7, fp, lr}
   1b800:	add	fp, sp, #16
   1b804:	mov	r4, r2
   1b808:	mov	r5, r1
   1b80c:	mov	r6, r0
   1b810:	mov	r0, r2
   1b814:	mov	r1, r6
   1b818:	blx	r5
   1b81c:	cmp	r0, #0
   1b820:	beq	1b840 <__assert_fail@plt+0xa0cc>
   1b824:	b	1b878 <__assert_fail@plt+0xa104>
   1b828:	mov	r0, r4
   1b82c:	mov	r1, r7
   1b830:	blx	r5
   1b834:	cmp	r0, #0
   1b838:	mov	r6, r7
   1b83c:	bne	1b878 <__assert_fail@plt+0xa104>
   1b840:	ldr	r7, [r6, #4]
   1b844:	cmp	r7, #0
   1b848:	bne	1b828 <__assert_fail@plt+0xa0b4>
   1b84c:	mov	r1, #0
   1b850:	mov	r0, r6
   1b854:	ldr	r7, [r6, #8]
   1b858:	cmp	r7, r1
   1b85c:	cmpne	r7, #0
   1b860:	bne	1b828 <__assert_fail@plt+0xa0b4>
   1b864:	ldr	r6, [r0]
   1b868:	cmp	r6, #0
   1b86c:	mov	r1, r0
   1b870:	bne	1b850 <__assert_fail@plt+0xa0dc>
   1b874:	mov	r0, #0
   1b878:	pop	{r4, r5, r6, r7, fp, pc}
   1b87c:	ldrb	r2, [r1, #24]
   1b880:	cmp	r2, #17
   1b884:	beq	1b8b8 <__assert_fail@plt+0xa144>
   1b888:	cmp	r2, #4
   1b88c:	bne	1b90c <__assert_fail@plt+0xa198>
   1b890:	ldr	r2, [r0, #132]	; 0x84
   1b894:	cmp	r2, #0
   1b898:	beq	1b90c <__assert_fail@plt+0xa198>
   1b89c:	ldr	r3, [r1, #20]
   1b8a0:	ldr	r2, [r2, r3, lsl #2]
   1b8a4:	str	r2, [r1, #20]
   1b8a8:	ldr	r1, [r0, #80]	; 0x50
   1b8ac:	mov	r3, #1
   1b8b0:	orr	r1, r1, r3, lsl r2
   1b8b4:	b	1b908 <__assert_fail@plt+0xa194>
   1b8b8:	ldr	r2, [r1, #4]
   1b8bc:	cmp	r2, #0
   1b8c0:	beq	1b90c <__assert_fail@plt+0xa198>
   1b8c4:	ldrb	r3, [r2, #24]
   1b8c8:	cmp	r3, #17
   1b8cc:	bne	1b90c <__assert_fail@plt+0xa198>
   1b8d0:	ldr	r3, [r2, #4]
   1b8d4:	ldr	r2, [r2, #20]
   1b8d8:	str	r3, [r1, #4]
   1b8dc:	cmp	r3, #0
   1b8e0:	strne	r1, [r3]
   1b8e4:	ldr	r1, [r1, #20]
   1b8e8:	ldr	r3, [r0, #132]	; 0x84
   1b8ec:	ldr	r1, [r3, r1, lsl #2]
   1b8f0:	str	r1, [r3, r2, lsl #2]
   1b8f4:	cmp	r2, #31
   1b8f8:	bgt	1b90c <__assert_fail@plt+0xa198>
   1b8fc:	ldr	r1, [r0, #80]	; 0x50
   1b900:	mov	r3, #1
   1b904:	bic	r1, r1, r3, lsl r2
   1b908:	str	r1, [r0, #80]	; 0x50
   1b90c:	mov	r0, #0
   1b910:	bx	lr
   1b914:	push	{r4, r5, fp, lr}
   1b918:	add	fp, sp, #8
   1b91c:	sub	sp, sp, #8
   1b920:	mov	r4, r1
   1b924:	mov	r5, r0
   1b928:	mov	r0, #0
   1b92c:	str	r0, [sp, #4]
   1b930:	ldr	r2, [r1, #4]
   1b934:	cmp	r2, #0
   1b938:	beq	1b960 <__assert_fail@plt+0xa1ec>
   1b93c:	ldrb	r0, [r2, #24]
   1b940:	cmp	r0, #17
   1b944:	bne	1b960 <__assert_fail@plt+0xa1ec>
   1b948:	add	r0, sp, #4
   1b94c:	mov	r1, r5
   1b950:	bl	1bd38 <__assert_fail@plt+0xa5c4>
   1b954:	str	r0, [r4, #4]
   1b958:	cmp	r0, #0
   1b95c:	strne	r4, [r0]
   1b960:	ldr	r2, [r4, #8]
   1b964:	cmp	r2, #0
   1b968:	beq	1b990 <__assert_fail@plt+0xa21c>
   1b96c:	ldrb	r0, [r2, #24]
   1b970:	cmp	r0, #17
   1b974:	bne	1b990 <__assert_fail@plt+0xa21c>
   1b978:	add	r0, sp, #4
   1b97c:	mov	r1, r5
   1b980:	bl	1bd38 <__assert_fail@plt+0xa5c4>
   1b984:	str	r0, [r4, #8]
   1b988:	cmp	r0, #0
   1b98c:	strne	r4, [r0]
   1b990:	ldr	r0, [sp, #4]
   1b994:	sub	sp, fp, #8
   1b998:	pop	{r4, r5, fp, pc}
   1b99c:	push	{r4, r5, fp, lr}
   1b9a0:	add	fp, sp, #8
   1b9a4:	mov	r4, r1
   1b9a8:	mov	r5, r0
   1b9ac:	ldr	r2, [r1, #24]
   1b9b0:	uxtb	r0, r2
   1b9b4:	cmp	r0, #16
   1b9b8:	bne	1b9d8 <__assert_fail@plt+0xa264>
   1b9bc:	ldr	r0, [r4, #4]
   1b9c0:	ldr	r1, [r0, #12]
   1b9c4:	str	r1, [r4, #12]
   1b9c8:	ldr	r0, [r0, #28]
   1b9cc:	str	r0, [r4, #28]
   1b9d0:	mov	r0, #0
   1b9d4:	pop	{r4, r5, fp, pc}
   1b9d8:	str	r4, [r4, #12]
   1b9dc:	ldr	r1, [r4, #20]
   1b9e0:	mov	r0, r5
   1b9e4:	bl	1be54 <__assert_fail@plt+0xa6e0>
   1b9e8:	str	r0, [r4, #28]
   1b9ec:	cmn	r0, #1
   1b9f0:	beq	1ba24 <__assert_fail@plt+0xa2b0>
   1b9f4:	mov	r1, r0
   1b9f8:	ldrb	r2, [r4, #24]
   1b9fc:	mov	r0, #0
   1ba00:	cmp	r2, #12
   1ba04:	popne	{r4, r5, fp, pc}
   1ba08:	ldr	r2, [r5]
   1ba0c:	add	r1, r2, r1, lsl #3
   1ba10:	ldr	r2, [r1, #4]
   1ba14:	ldr	r3, [r4, #20]
   1ba18:	bfi	r2, r3, #8, #10
   1ba1c:	str	r2, [r1, #4]
   1ba20:	pop	{r4, r5, fp, pc}
   1ba24:	mov	r0, #12
   1ba28:	pop	{r4, r5, fp, pc}
   1ba2c:	ldrb	r0, [r1, #24]
   1ba30:	cmp	r0, #16
   1ba34:	beq	1ba48 <__assert_fail@plt+0xa2d4>
   1ba38:	cmp	r0, #11
   1ba3c:	bne	1ba64 <__assert_fail@plt+0xa2f0>
   1ba40:	ldr	r0, [r1, #4]
   1ba44:	b	1ba84 <__assert_fail@plt+0xa310>
   1ba48:	ldmib	r1, {r0, r2}
   1ba4c:	ldr	r3, [r2, #12]
   1ba50:	str	r3, [r0, #16]
   1ba54:	ldr	r0, [r1, #16]
   1ba58:	str	r0, [r2, #16]
   1ba5c:	mov	r0, #0
   1ba60:	bx	lr
   1ba64:	ldr	r0, [r1, #4]
   1ba68:	cmp	r0, #0
   1ba6c:	ldrne	r2, [r1, #16]
   1ba70:	strne	r2, [r0, #16]
   1ba74:	ldr	r0, [r1, #8]
   1ba78:	cmp	r0, #0
   1ba7c:	beq	1ba88 <__assert_fail@plt+0xa314>
   1ba80:	ldr	r1, [r1, #16]
   1ba84:	str	r1, [r0, #16]
   1ba88:	mov	r0, #0
   1ba8c:	bx	lr
   1ba90:	push	{fp, lr}
   1ba94:	mov	fp, sp
   1ba98:	ldr	r2, [r1, #24]
   1ba9c:	ldr	ip, [r1, #28]
   1baa0:	mvn	r3, #1
   1baa4:	uxtab	r2, r3, r2
   1baa8:	cmp	r2, #14
   1baac:	bhi	1bb60 <__assert_fail@plt+0xa3ec>
   1bab0:	add	r3, pc, #0
   1bab4:	ldr	pc, [r3, r2, lsl #2]
   1bab8:	andeq	fp, r1, r8, lsr #23
   1babc:	andeq	fp, r1, r0, ror #22
   1bac0:	andeq	fp, r1, r4, ror fp
   1bac4:	andeq	fp, r1, r0, ror #22
   1bac8:	andeq	fp, r1, r0, ror #22
   1bacc:	andeq	fp, r1, r0, ror #22
   1bad0:	strdeq	fp, [r1], -r4
   1bad4:	strdeq	fp, [r1], -r4
   1bad8:	andeq	fp, r1, r0, lsl fp
   1badc:	andeq	fp, r1, r0, lsl fp
   1bae0:	strdeq	fp, [r1], -r4
   1bae4:	andeq	fp, r1, r0, ror #22
   1bae8:	andeq	fp, r1, r0, ror #22
   1baec:	andeq	fp, r1, r0, ror #22
   1baf0:	andeq	fp, r1, r8, lsr #23
   1baf4:	ldr	r0, [r0, #20]
   1baf8:	add	r2, ip, ip, lsl #1
   1bafc:	add	r0, r0, r2, lsl #2
   1bb00:	ldr	r1, [r1, #16]
   1bb04:	ldr	r1, [r1, #28]
   1bb08:	pop	{fp, lr}
   1bb0c:	b	1c0a0 <__assert_fail@plt+0xa92c>
   1bb10:	ldrb	r2, [r0, #88]	; 0x58
   1bb14:	orr	r2, r2, #1
   1bb18:	strb	r2, [r0, #88]	; 0x58
   1bb1c:	add	r3, r1, #16
   1bb20:	ldr	lr, [r1, #4]
   1bb24:	ldr	r1, [r1, #8]
   1bb28:	cmp	r1, #0
   1bb2c:	mov	r2, r3
   1bb30:	addne	r2, r1, #12
   1bb34:	ldr	r1, [r2]
   1bb38:	ldr	r2, [r1, #28]
   1bb3c:	cmp	lr, #0
   1bb40:	addne	r3, lr, #12
   1bb44:	ldr	r1, [r3]
   1bb48:	ldr	r1, [r1, #28]
   1bb4c:	ldr	r0, [r0, #20]
   1bb50:	add	r3, ip, ip, lsl #1
   1bb54:	add	r0, r0, r3, lsl #2
   1bb58:	pop	{fp, lr}
   1bb5c:	b	1c024 <__assert_fail@plt+0xa8b0>
   1bb60:	ldr	r0, [r0, #12]
   1bb64:	ldr	r1, [r1, #16]
   1bb68:	ldr	r1, [r1, #28]
   1bb6c:	str	r1, [r0, ip, lsl #2]
   1bb70:	b	1bba8 <__assert_fail@plt+0xa434>
   1bb74:	ldr	r3, [r0, #12]
   1bb78:	ldr	r2, [r1, #16]
   1bb7c:	ldr	r2, [r2, #28]
   1bb80:	str	r2, [r3, ip, lsl #2]
   1bb84:	ldrb	r1, [r1, #24]
   1bb88:	cmp	r1, #4
   1bb8c:	bne	1bba8 <__assert_fail@plt+0xa434>
   1bb90:	ldr	r0, [r0, #20]
   1bb94:	add	r1, ip, ip, lsl #1
   1bb98:	add	r0, r0, r1, lsl #2
   1bb9c:	mov	r1, r2
   1bba0:	pop	{fp, lr}
   1bba4:	b	1c0a0 <__assert_fail@plt+0xa92c>
   1bba8:	mov	r0, #0
   1bbac:	pop	{fp, pc}
   1bbb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bbb4:	add	fp, sp, #24
   1bbb8:	sub	sp, sp, #16
   1bbbc:	mov	r4, r0
   1bbc0:	mov	r7, #0
   1bbc4:	add	r8, sp, #4
   1bbc8:	mov	r6, #0
   1bbcc:	b	1bbfc <__assert_fail@plt+0xa488>
   1bbd0:	mov	r0, r7
   1bbd4:	ldr	r1, [r4, #8]
   1bbd8:	add	r2, r6, #1
   1bbdc:	subs	r3, r2, r1
   1bbe0:	mov	r6, r3
   1bbe4:	movne	r6, r2
   1bbe8:	movwne	r3, #1
   1bbec:	and	r7, r0, r3
   1bbf0:	tst	r0, #1
   1bbf4:	cmpeq	r2, r1
   1bbf8:	beq	1bc58 <__assert_fail@plt+0xa4e4>
   1bbfc:	ldr	r0, [r4, #24]
   1bc00:	add	r5, r6, r6, lsl #1
   1bc04:	add	r0, r0, r5, lsl #2
   1bc08:	ldr	r0, [r0, #4]
   1bc0c:	cmp	r0, #0
   1bc10:	bne	1bbd0 <__assert_fail@plt+0xa45c>
   1bc14:	mov	r0, r8
   1bc18:	mov	r1, r4
   1bc1c:	mov	r2, r6
   1bc20:	mov	r3, #1
   1bc24:	bl	1c0ec <__assert_fail@plt+0xa978>
   1bc28:	cmp	r0, #0
   1bc2c:	bne	1bc5c <__assert_fail@plt+0xa4e8>
   1bc30:	ldr	r0, [r4, #24]
   1bc34:	add	r0, r0, r5, lsl #2
   1bc38:	ldr	r0, [r0, #4]
   1bc3c:	cmp	r0, #0
   1bc40:	mov	r0, r7
   1bc44:	bne	1bbd4 <__assert_fail@plt+0xa460>
   1bc48:	ldr	r0, [sp, #12]
   1bc4c:	bl	13f1c <__assert_fail@plt+0x27a8>
   1bc50:	mov	r0, #1
   1bc54:	b	1bbd4 <__assert_fail@plt+0xa460>
   1bc58:	mov	r0, #0
   1bc5c:	sub	sp, fp, #24
   1bc60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bc68:	add	fp, sp, #24
   1bc6c:	mov	r4, r0
   1bc70:	ldr	r0, [r0, #8]
   1bc74:	cmp	r0, #0
   1bc78:	beq	1bd28 <__assert_fail@plt+0xa5b4>
   1bc7c:	mov	r0, #0
   1bc80:	mov	r1, #0
   1bc84:	mov	r2, #0
   1bc88:	ldr	r3, [r4, #28]
   1bc8c:	str	r0, [r3, r1]!
   1bc90:	str	r0, [r3, #4]
   1bc94:	str	r0, [r3, #8]
   1bc98:	add	r1, r1, #12
   1bc9c:	add	r2, r2, #1
   1bca0:	ldr	r3, [r4, #8]
   1bca4:	cmp	r2, r3
   1bca8:	bcc	1bc88 <__assert_fail@plt+0xa514>
   1bcac:	cmp	r3, #0
   1bcb0:	beq	1bd28 <__assert_fail@plt+0xa5b4>
   1bcb4:	mov	r5, #0
   1bcb8:	b	1bccc <__assert_fail@plt+0xa558>
   1bcbc:	add	r5, r5, #1
   1bcc0:	ldr	r0, [r4, #8]
   1bcc4:	cmp	r5, r0
   1bcc8:	bcs	1bd28 <__assert_fail@plt+0xa5b4>
   1bccc:	ldr	r0, [r4, #24]
   1bcd0:	add	r8, r5, r5, lsl #1
   1bcd4:	add	r0, r0, r8, lsl #2
   1bcd8:	ldr	r1, [r0, #4]
   1bcdc:	cmp	r1, #1
   1bce0:	blt	1bcbc <__assert_fail@plt+0xa548>
   1bce4:	ldr	r7, [r0, #8]
   1bce8:	mov	r6, #0
   1bcec:	ldr	r0, [r7, r6, lsl #2]
   1bcf0:	add	r0, r0, r0, lsl #1
   1bcf4:	ldr	r1, [r4, #28]
   1bcf8:	add	r0, r1, r0, lsl #2
   1bcfc:	mov	r1, r5
   1bd00:	bl	1c92c <__assert_fail@plt+0xb1b8>
   1bd04:	cmp	r0, #0
   1bd08:	beq	1bd30 <__assert_fail@plt+0xa5bc>
   1bd0c:	add	r6, r6, #1
   1bd10:	ldr	r0, [r4, #24]
   1bd14:	add	r0, r0, r8, lsl #2
   1bd18:	ldr	r0, [r0, #4]
   1bd1c:	cmp	r6, r0
   1bd20:	blt	1bcec <__assert_fail@plt+0xa578>
   1bd24:	b	1bcbc <__assert_fail@plt+0xa548>
   1bd28:	mov	r0, #0
   1bd2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bd30:	mov	r0, #12
   1bd34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bd38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd3c:	add	fp, sp, #28
   1bd40:	sub	sp, sp, #4
   1bd44:	mov	r9, r2
   1bd48:	mov	r8, r0
   1bd4c:	ldr	r5, [r2, #4]
   1bd50:	ldr	r6, [r1]
   1bd54:	cmp	r5, #0
   1bd58:	ldrbne	r0, [r1, #28]
   1bd5c:	andsne	r0, r0, #16
   1bd60:	bne	1be2c <__assert_fail@plt+0xa6b8>
   1bd64:	mov	r0, r6
   1bd68:	mov	r1, #0
   1bd6c:	mov	r2, #0
   1bd70:	mov	r3, #8
   1bd74:	bl	188e4 <__assert_fail@plt+0x7170>
   1bd78:	mov	sl, r0
   1bd7c:	mov	r0, r6
   1bd80:	mov	r1, #0
   1bd84:	mov	r2, #0
   1bd88:	mov	r3, #9
   1bd8c:	bl	188e4 <__assert_fail@plt+0x7170>
   1bd90:	mov	r4, r0
   1bd94:	cmp	r5, #0
   1bd98:	mov	r7, r0
   1bd9c:	beq	1bdb8 <__assert_fail@plt+0xa644>
   1bda0:	mov	r0, r6
   1bda4:	mov	r1, r5
   1bda8:	mov	r2, r4
   1bdac:	mov	r3, #16
   1bdb0:	bl	188e4 <__assert_fail@plt+0x7170>
   1bdb4:	mov	r7, r0
   1bdb8:	mov	r0, r6
   1bdbc:	mov	r1, sl
   1bdc0:	mov	r2, r7
   1bdc4:	mov	r3, #16
   1bdc8:	bl	188e4 <__assert_fail@plt+0x7170>
   1bdcc:	cmp	r4, #0
   1bdd0:	beq	1bde0 <__assert_fail@plt+0xa66c>
   1bdd4:	cmp	sl, #0
   1bdd8:	cmpne	r7, #0
   1bddc:	bne	1bdf0 <__assert_fail@plt+0xa67c>
   1bde0:	mov	r0, #12
   1bde4:	str	r0, [r8]
   1bde8:	mov	r5, #0
   1bdec:	b	1be48 <__assert_fail@plt+0xa6d4>
   1bdf0:	mov	r5, r0
   1bdf4:	cmp	r0, #0
   1bdf8:	beq	1bde0 <__assert_fail@plt+0xa66c>
   1bdfc:	ldr	r0, [r9, #20]
   1be00:	str	r0, [r4, #20]
   1be04:	str	r0, [sl, #20]
   1be08:	ldr	r0, [r4, #24]
   1be0c:	ldr	r1, [r9, #24]
   1be10:	lsr	r1, r1, #19
   1be14:	bfi	r0, r1, #19, #1
   1be18:	str	r0, [r4, #24]
   1be1c:	ldr	r0, [sl, #24]
   1be20:	bfi	r0, r1, #19, #1
   1be24:	str	r0, [sl, #24]
   1be28:	b	1be48 <__assert_fail@plt+0xa6d4>
   1be2c:	ldr	r0, [r9, #20]
   1be30:	cmp	r0, #31
   1be34:	bgt	1be48 <__assert_fail@plt+0xa6d4>
   1be38:	ldr	r1, [r6, #80]	; 0x50
   1be3c:	mov	r2, #1
   1be40:	tst	r1, r2, lsl r0
   1be44:	bne	1bd64 <__assert_fail@plt+0xa5f0>
   1be48:	mov	r0, r5
   1be4c:	sub	sp, fp, #28
   1be50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be58:	add	fp, sp, #28
   1be5c:	sub	sp, sp, #12
   1be60:	mov	r5, r2
   1be64:	mov	r9, r1
   1be68:	mov	r4, r0
   1be6c:	ldr	r7, [r0, #4]
   1be70:	ldr	r0, [r0, #8]
   1be74:	cmp	r0, r7
   1be78:	bcs	1bf48 <__assert_fail@plt+0xa7d4>
   1be7c:	ldr	r0, [r4]
   1be80:	ldr	r1, [r4, #8]
   1be84:	str	r9, [r0, r1, lsl #3]!
   1be88:	str	r5, [r0, #4]
   1be8c:	ldr	r0, [r4]
   1be90:	ldr	r1, [r4, #8]
   1be94:	add	r0, r0, r1, lsl #3
   1be98:	ldr	r1, [r0, #4]
   1be9c:	bfc	r1, #8, #10
   1bea0:	str	r1, [r0, #4]
   1bea4:	uxtb	r1, r5
   1bea8:	cmp	r1, #5
   1beac:	bne	1bec0 <__assert_fail@plt+0xa74c>
   1beb0:	ldr	r2, [r4, #92]	; 0x5c
   1beb4:	mov	r0, #1048576	; 0x100000
   1beb8:	cmp	r2, #1
   1bebc:	bgt	1bed0 <__assert_fail@plt+0xa75c>
   1bec0:	sub	r0, r1, #6
   1bec4:	clz	r0, r0
   1bec8:	lsr	r0, r0, #5
   1becc:	lsl	r0, r0, #20
   1bed0:	ldr	r1, [r4]
   1bed4:	ldr	r2, [r4, #8]
   1bed8:	add	r1, r1, r2, lsl #3
   1bedc:	ldr	r2, [r1, #4]
   1bee0:	bic	r2, r2, #1048576	; 0x100000
   1bee4:	orr	r0, r2, r0
   1bee8:	str	r0, [r1, #4]
   1beec:	ldr	r0, [r4, #8]
   1bef0:	ldr	r1, [r4, #12]
   1bef4:	mvn	r2, #0
   1bef8:	str	r2, [r1, r0, lsl #2]
   1befc:	ldr	r0, [r4, #8]
   1bf00:	ldr	r1, [r4, #20]
   1bf04:	add	r0, r0, r0, lsl #1
   1bf08:	mov	r2, #0
   1bf0c:	str	r2, [r1, r0, lsl #2]!
   1bf10:	str	r2, [r1, #4]
   1bf14:	str	r2, [r1, #8]
   1bf18:	ldr	r0, [r4, #8]
   1bf1c:	ldr	r1, [r4, #24]
   1bf20:	add	r0, r0, r0, lsl #1
   1bf24:	str	r2, [r1, r0, lsl #2]!
   1bf28:	str	r2, [r1, #4]
   1bf2c:	str	r2, [r1, #8]
   1bf30:	ldr	r6, [r4, #8]
   1bf34:	add	r0, r6, #1
   1bf38:	str	r0, [r4, #8]
   1bf3c:	mov	r0, r6
   1bf40:	sub	sp, fp, #28
   1bf44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf48:	lsl	r1, r7, #1
   1bf4c:	mvn	r6, #0
   1bf50:	movw	r0, #21845	; 0x5555
   1bf54:	movt	r0, #5461	; 0x1555
   1bf58:	cmp	r1, r0
   1bf5c:	bhi	1bf3c <__assert_fail@plt+0xa7c8>
   1bf60:	str	r1, [sp, #8]
   1bf64:	ldr	r0, [r4]
   1bf68:	lsl	r1, r7, #4
   1bf6c:	bl	23f00 <__assert_fail@plt+0x1278c>
   1bf70:	cmp	r0, #0
   1bf74:	beq	1bf3c <__assert_fail@plt+0xa7c8>
   1bf78:	str	r0, [r4]
   1bf7c:	ldr	r0, [r4, #12]
   1bf80:	lsl	r8, r7, #3
   1bf84:	mov	r1, r8
   1bf88:	bl	23f00 <__assert_fail@plt+0x1278c>
   1bf8c:	str	r0, [sp, #4]
   1bf90:	ldr	r0, [r4, #16]
   1bf94:	mov	r1, r8
   1bf98:	bl	23f00 <__assert_fail@plt+0x1278c>
   1bf9c:	mov	r2, r0
   1bfa0:	ldr	r0, [r4, #20]
   1bfa4:	add	r1, r7, r7, lsl #1
   1bfa8:	mov	r7, r2
   1bfac:	lsl	r8, r1, #3
   1bfb0:	mov	r1, r8
   1bfb4:	bl	23f00 <__assert_fail@plt+0x1278c>
   1bfb8:	mov	sl, r0
   1bfbc:	ldr	r0, [r4, #24]
   1bfc0:	mov	r1, r8
   1bfc4:	bl	23f00 <__assert_fail@plt+0x1278c>
   1bfc8:	mov	r8, r0
   1bfcc:	ldr	r0, [sp, #4]
   1bfd0:	cmp	r0, #0
   1bfd4:	beq	1bfe4 <__assert_fail@plt+0xa870>
   1bfd8:	cmp	r7, #0
   1bfdc:	cmpne	sl, #0
   1bfe0:	bne	1c004 <__assert_fail@plt+0xa890>
   1bfe4:	bl	13f1c <__assert_fail@plt+0x27a8>
   1bfe8:	mov	r0, r7
   1bfec:	bl	13f1c <__assert_fail@plt+0x27a8>
   1bff0:	mov	r0, sl
   1bff4:	bl	13f1c <__assert_fail@plt+0x27a8>
   1bff8:	mov	r0, r8
   1bffc:	bl	13f1c <__assert_fail@plt+0x27a8>
   1c000:	b	1bf3c <__assert_fail@plt+0xa7c8>
   1c004:	cmp	r8, #0
   1c008:	beq	1bfe4 <__assert_fail@plt+0xa870>
   1c00c:	add	r1, r4, #12
   1c010:	stm	r1, {r0, r7, sl}
   1c014:	str	r8, [r4, #24]
   1c018:	ldr	r0, [sp, #8]
   1c01c:	str	r0, [r4, #4]
   1c020:	b	1be7c <__assert_fail@plt+0xa708>
   1c024:	push	{r4, r5, r6, sl, fp, lr}
   1c028:	add	fp, sp, #16
   1c02c:	mov	r5, r2
   1c030:	mov	r4, r1
   1c034:	mov	r6, r0
   1c038:	mov	r0, #2
   1c03c:	str	r0, [r6]
   1c040:	mov	r0, #8
   1c044:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1c048:	str	r0, [r6, #8]
   1c04c:	cmp	r0, #0
   1c050:	beq	1c098 <__assert_fail@plt+0xa924>
   1c054:	cmp	r4, r5
   1c058:	bne	1c074 <__assert_fail@plt+0xa900>
   1c05c:	mov	r0, #1
   1c060:	str	r0, [r6, #4]
   1c064:	ldr	r0, [r6, #8]
   1c068:	str	r4, [r0]
   1c06c:	mov	r0, #0
   1c070:	pop	{r4, r5, r6, sl, fp, pc}
   1c074:	mov	r0, #2
   1c078:	str	r0, [r6, #4]
   1c07c:	ldr	r0, [r6, #8]
   1c080:	cmp	r4, r5
   1c084:	stmlt	r0, {r4, r5}
   1c088:	strge	r5, [r0]
   1c08c:	strge	r4, [r0, #4]
   1c090:	mov	r0, #0
   1c094:	pop	{r4, r5, r6, sl, fp, pc}
   1c098:	mov	r0, #12
   1c09c:	pop	{r4, r5, r6, sl, fp, pc}
   1c0a0:	push	{r4, r5, fp, lr}
   1c0a4:	add	fp, sp, #8
   1c0a8:	mov	r5, r1
   1c0ac:	mov	r4, r0
   1c0b0:	mov	r0, #1
   1c0b4:	str	r0, [r4]
   1c0b8:	str	r0, [r4, #4]
   1c0bc:	mov	r0, #4
   1c0c0:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1c0c4:	str	r0, [r4, #8]
   1c0c8:	cmp	r0, #0
   1c0cc:	strne	r5, [r0]
   1c0d0:	movne	r0, #0
   1c0d4:	popne	{r4, r5, fp, pc}
   1c0d8:	mov	r0, #0
   1c0dc:	str	r0, [r4]
   1c0e0:	str	r0, [r4, #4]
   1c0e4:	mov	r0, #12
   1c0e8:	pop	{r4, r5, fp, pc}
   1c0ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0f0:	add	fp, sp, #28
   1c0f4:	sub	sp, sp, #44	; 0x2c
   1c0f8:	mov	r8, r3
   1c0fc:	mov	r6, r2
   1c100:	mov	r5, r1
   1c104:	mov	r7, r0
   1c108:	ldr	r0, [r1, #20]
   1c10c:	add	r4, r2, r2, lsl #1
   1c110:	add	r0, r0, r4, lsl #2
   1c114:	ldr	r0, [r0, #4]
   1c118:	add	r1, r0, #1
   1c11c:	add	r0, sp, #32
   1c120:	bl	1c300 <__assert_fail@plt+0xab8c>
   1c124:	cmp	r0, #0
   1c128:	bne	1c2f8 <__assert_fail@plt+0xab84>
   1c12c:	ldr	r0, [sp, #36]	; 0x24
   1c130:	ldr	r1, [sp, #40]	; 0x28
   1c134:	add	r2, r0, #1
   1c138:	str	r2, [sp, #36]	; 0x24
   1c13c:	str	r6, [r1, r0, lsl #2]
   1c140:	ldr	r0, [r5, #24]
   1c144:	add	r0, r0, r4, lsl #2
   1c148:	mvn	r1, #0
   1c14c:	str	r1, [r0, #4]
   1c150:	ldr	r1, [r5]
   1c154:	add	r0, r1, r6, lsl #3
   1c158:	ldr	r0, [r0, #4]
   1c15c:	ubfx	r0, r0, #8, #10
   1c160:	cmp	r0, #0
   1c164:	beq	1c1b4 <__assert_fail@plt+0xaa40>
   1c168:	ldr	r2, [r5, #20]
   1c16c:	add	r2, r2, r4, lsl #2
   1c170:	ldr	r3, [r2, #4]
   1c174:	cmp	r3, #0
   1c178:	beq	1c1b4 <__assert_fail@plt+0xaa40>
   1c17c:	ldr	r2, [r2, #8]
   1c180:	ldr	r2, [r2]
   1c184:	add	r1, r1, r2, lsl #3
   1c188:	ldrb	r1, [r1, #6]
   1c18c:	tst	r1, #4
   1c190:	bne	1c1b4 <__assert_fail@plt+0xaa40>
   1c194:	str	r0, [sp]
   1c198:	mov	r0, r5
   1c19c:	mov	r1, r6
   1c1a0:	mov	r2, r6
   1c1a4:	mov	r3, r6
   1c1a8:	bl	1c330 <__assert_fail@plt+0xabbc>
   1c1ac:	cmp	r0, #0
   1c1b0:	bne	1c2f8 <__assert_fail@plt+0xab84>
   1c1b4:	ldr	r0, [r5]
   1c1b8:	add	r0, r0, r6, lsl #3
   1c1bc:	ldrb	r0, [r0, #4]
   1c1c0:	tst	r0, #8
   1c1c4:	beq	1c2cc <__assert_fail@plt+0xab58>
   1c1c8:	ldr	r0, [r5, #20]
   1c1cc:	add	r1, r0, r4, lsl #2
   1c1d0:	ldr	r1, [r1, #4]
   1c1d4:	cmp	r1, #1
   1c1d8:	blt	1c2cc <__assert_fail@plt+0xab58>
   1c1dc:	str	r8, [sp, #8]
   1c1e0:	str	r7, [sp, #12]
   1c1e4:	mov	r8, #0
   1c1e8:	add	r7, sp, #16
   1c1ec:	add	sl, sp, #32
   1c1f0:	mov	r6, #0
   1c1f4:	b	1c214 <__assert_fail@plt+0xaaa0>
   1c1f8:	mov	r8, #1
   1c1fc:	ldr	r0, [r5, #20]
   1c200:	add	r1, r0, r4, lsl #2
   1c204:	ldr	r1, [r1, #4]
   1c208:	add	r6, r6, #1
   1c20c:	cmp	r6, r1
   1c210:	bge	1c2a0 <__assert_fail@plt+0xab2c>
   1c214:	add	r0, r0, r4, lsl #2
   1c218:	ldr	r0, [r0, #8]
   1c21c:	ldr	r2, [r0, r6, lsl #2]
   1c220:	add	r9, r2, r2, lsl #1
   1c224:	ldr	r0, [r5, #24]
   1c228:	add	r0, r0, r9, lsl #2
   1c22c:	ldr	r1, [r0, #4]
   1c230:	cmn	r1, #1
   1c234:	beq	1c1f8 <__assert_fail@plt+0xaa84>
   1c238:	cmp	r1, #0
   1c23c:	bne	1c25c <__assert_fail@plt+0xaae8>
   1c240:	mov	r0, r7
   1c244:	mov	r1, r5
   1c248:	mov	r3, #0
   1c24c:	bl	1c0ec <__assert_fail@plt+0xa978>
   1c250:	cmp	r0, #0
   1c254:	beq	1c26c <__assert_fail@plt+0xaaf8>
   1c258:	b	1c2f8 <__assert_fail@plt+0xab84>
   1c25c:	vldr	d16, [r0]
   1c260:	ldr	r0, [r0, #8]
   1c264:	str	r0, [sp, #24]
   1c268:	vstr	d16, [sp, #16]
   1c26c:	mov	r0, sl
   1c270:	mov	r1, r7
   1c274:	bl	1c58c <__assert_fail@plt+0xae18>
   1c278:	cmp	r0, #0
   1c27c:	bne	1c2f8 <__assert_fail@plt+0xab84>
   1c280:	ldr	r0, [r5, #24]
   1c284:	add	r0, r0, r9, lsl #2
   1c288:	ldr	r0, [r0, #4]
   1c28c:	cmp	r0, #0
   1c290:	bne	1c1fc <__assert_fail@plt+0xaa88>
   1c294:	ldr	r0, [sp, #24]
   1c298:	bl	13f1c <__assert_fail@plt+0x27a8>
   1c29c:	b	1c1f8 <__assert_fail@plt+0xaa84>
   1c2a0:	tst	r8, #1
   1c2a4:	ldr	r7, [sp, #12]
   1c2a8:	ldr	r0, [sp, #8]
   1c2ac:	beq	1c2cc <__assert_fail@plt+0xab58>
   1c2b0:	cmp	r0, #0
   1c2b4:	bne	1c2cc <__assert_fail@plt+0xab58>
   1c2b8:	ldr	r0, [r5, #24]
   1c2bc:	add	r0, r0, r4, lsl #2
   1c2c0:	mov	r1, #0
   1c2c4:	str	r1, [r0, #4]
   1c2c8:	b	1c2e4 <__assert_fail@plt+0xab70>
   1c2cc:	ldr	r0, [r5, #24]
   1c2d0:	vldr	d16, [sp, #32]
   1c2d4:	add	r0, r0, r4, lsl #2
   1c2d8:	ldr	r1, [sp, #40]	; 0x28
   1c2dc:	str	r1, [r0, #8]
   1c2e0:	vstr	d16, [r0]
   1c2e4:	ldr	r0, [sp, #40]	; 0x28
   1c2e8:	vldr	d16, [sp, #32]
   1c2ec:	str	r0, [r7, #8]
   1c2f0:	vstr	d16, [r7]
   1c2f4:	mov	r0, #0
   1c2f8:	sub	sp, fp, #28
   1c2fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c300:	push	{r4, r5, fp, lr}
   1c304:	add	fp, sp, #8
   1c308:	mov	r5, r0
   1c30c:	mov	r4, #0
   1c310:	stm	r0, {r1, r4}
   1c314:	lsl	r0, r1, #2
   1c318:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1c31c:	str	r0, [r5, #8]
   1c320:	cmp	r0, #0
   1c324:	moveq	r4, #12
   1c328:	mov	r0, r4
   1c32c:	pop	{r4, r5, fp, pc}
   1c330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c334:	add	fp, sp, #28
   1c338:	sub	sp, sp, #20
   1c33c:	str	r3, [sp, #8]
   1c340:	mov	r8, r2
   1c344:	mov	r9, r1
   1c348:	mov	r5, r0
   1c34c:	ldr	r0, [fp, #8]
   1c350:	str	r0, [sp, #16]
   1c354:	ldr	r0, [r5]
   1c358:	add	r0, r0, r9, lsl #3
   1c35c:	ldrb	r1, [r0, #4]!
   1c360:	cmp	r1, #4
   1c364:	bne	1c3d4 <__assert_fail@plt+0xac60>
   1c368:	ldr	r0, [r5, #12]
   1c36c:	ldr	r1, [r5, #20]
   1c370:	ldr	r6, [r0, r9, lsl #2]
   1c374:	add	r4, r8, r8, lsl #1
   1c378:	add	r0, r1, r4, lsl #2
   1c37c:	mov	r1, #0
   1c380:	str	r1, [r0, #4]
   1c384:	mov	r0, r5
   1c388:	mov	r1, r6
   1c38c:	ldr	r2, [sp, #16]
   1c390:	bl	1c71c <__assert_fail@plt+0xafa8>
   1c394:	mov	sl, #12
   1c398:	cmn	r0, #1
   1c39c:	beq	1c550 <__assert_fail@plt+0xaddc>
   1c3a0:	mov	r7, r0
   1c3a4:	ldr	r0, [r5, #12]
   1c3a8:	ldr	r1, [r0, r9, lsl #2]
   1c3ac:	str	r1, [r0, r8, lsl #2]
   1c3b0:	ldr	r0, [r5, #20]
   1c3b4:	add	r0, r0, r4, lsl #2
   1c3b8:	mov	r1, r7
   1c3bc:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1c3c0:	cmp	r0, #0
   1c3c4:	mov	r9, r6
   1c3c8:	mov	r8, r7
   1c3cc:	bne	1c354 <__assert_fail@plt+0xabe0>
   1c3d0:	b	1c550 <__assert_fail@plt+0xaddc>
   1c3d4:	ldr	r1, [r5, #20]
   1c3d8:	add	r6, r9, r9, lsl #1
   1c3dc:	add	r3, r1, r6, lsl #2
   1c3e0:	ldr	r2, [r3, #4]
   1c3e4:	cmp	r2, #0
   1c3e8:	beq	1c534 <__assert_fail@plt+0xadc0>
   1c3ec:	ldr	r3, [r3, #8]
   1c3f0:	ldr	sl, [r3]
   1c3f4:	add	r7, r8, r8, lsl #1
   1c3f8:	add	r4, r1, r7, lsl #2
   1c3fc:	mov	r1, #0
   1c400:	str	r1, [r4, #4]
   1c404:	cmp	r2, #1
   1c408:	beq	1c4fc <__assert_fail@plt+0xad88>
   1c40c:	str	r6, [sp, #12]
   1c410:	mov	r0, r5
   1c414:	mov	r1, sl
   1c418:	ldr	r6, [sp, #16]
   1c41c:	mov	r2, r6
   1c420:	bl	1c8ac <__assert_fail@plt+0xb138>
   1c424:	cmn	r0, #1
   1c428:	beq	1c444 <__assert_fail@plt+0xacd0>
   1c42c:	mov	r1, r0
   1c430:	mov	r0, r4
   1c434:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1c438:	cmp	r0, #0
   1c43c:	bne	1c4ac <__assert_fail@plt+0xad38>
   1c440:	b	1c584 <__assert_fail@plt+0xae10>
   1c444:	mov	r9, sl
   1c448:	mov	r8, r7
   1c44c:	mov	r0, r5
   1c450:	mov	r1, sl
   1c454:	mov	r2, r6
   1c458:	bl	1c71c <__assert_fail@plt+0xafa8>
   1c45c:	mov	sl, #12
   1c460:	cmn	r0, #1
   1c464:	beq	1c550 <__assert_fail@plt+0xaddc>
   1c468:	mov	r7, r0
   1c46c:	ldr	r0, [r5, #20]
   1c470:	add	r0, r0, r8, lsl #2
   1c474:	mov	r1, r7
   1c478:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1c47c:	cmp	r0, #0
   1c480:	beq	1c550 <__assert_fail@plt+0xaddc>
   1c484:	ldr	r6, [sp, #16]
   1c488:	str	r6, [sp]
   1c48c:	mov	r0, r5
   1c490:	mov	r1, r9
   1c494:	mov	r2, r7
   1c498:	ldr	r3, [sp, #8]
   1c49c:	bl	1c330 <__assert_fail@plt+0xabbc>
   1c4a0:	cmp	r0, #0
   1c4a4:	mov	r7, r8
   1c4a8:	bne	1c54c <__assert_fail@plt+0xadd8>
   1c4ac:	ldr	r0, [r5, #20]
   1c4b0:	ldr	r1, [sp, #12]
   1c4b4:	add	r0, r0, r1, lsl #2
   1c4b8:	ldr	r0, [r0, #8]
   1c4bc:	ldr	r9, [r0, #4]
   1c4c0:	mov	r0, r5
   1c4c4:	mov	r1, r9
   1c4c8:	mov	r2, r6
   1c4cc:	bl	1c71c <__assert_fail@plt+0xafa8>
   1c4d0:	mov	sl, #12
   1c4d4:	cmn	r0, #1
   1c4d8:	beq	1c550 <__assert_fail@plt+0xaddc>
   1c4dc:	mov	r8, r0
   1c4e0:	ldr	r0, [r5, #20]
   1c4e4:	add	r0, r0, r7, lsl #2
   1c4e8:	mov	r1, r8
   1c4ec:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1c4f0:	cmp	r0, #0
   1c4f4:	bne	1c354 <__assert_fail@plt+0xabe0>
   1c4f8:	b	1c550 <__assert_fail@plt+0xaddc>
   1c4fc:	ldr	r1, [sp, #8]
   1c500:	cmp	r9, r1
   1c504:	bne	1c510 <__assert_fail@plt+0xad9c>
   1c508:	cmp	r8, r9
   1c50c:	bne	1c55c <__assert_fail@plt+0xade8>
   1c510:	ldr	r0, [r0]
   1c514:	ubfx	r0, r0, #8, #10
   1c518:	ldr	r2, [sp, #16]
   1c51c:	orr	r2, r0, r2
   1c520:	mov	r0, r5
   1c524:	mov	r9, sl
   1c528:	mov	r1, sl
   1c52c:	str	r2, [sp, #16]
   1c530:	b	1c4cc <__assert_fail@plt+0xad58>
   1c534:	ldr	r0, [r5, #12]
   1c538:	ldr	r1, [r0, r9, lsl #2]
   1c53c:	str	r1, [r0, r8, lsl #2]
   1c540:	mov	r0, #0
   1c544:	sub	sp, fp, #28
   1c548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c54c:	mov	sl, r0
   1c550:	mov	r0, sl
   1c554:	sub	sp, fp, #28
   1c558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c55c:	mov	r0, r4
   1c560:	mov	r1, sl
   1c564:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1c568:	mov	r1, r0
   1c56c:	mov	sl, #12
   1c570:	mov	r0, #0
   1c574:	cmp	r1, #0
   1c578:	moveq	r0, sl
   1c57c:	sub	sp, fp, #28
   1c580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c584:	mov	sl, #12
   1c588:	b	1c550 <__assert_fail@plt+0xaddc>
   1c58c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c590:	add	fp, sp, #24
   1c594:	mov	r8, #0
   1c598:	cmp	r1, #0
   1c59c:	beq	1c6f0 <__assert_fail@plt+0xaf7c>
   1c5a0:	mov	r6, r1
   1c5a4:	ldr	r1, [r1, #4]
   1c5a8:	cmp	r1, #0
   1c5ac:	beq	1c6f0 <__assert_fail@plt+0xaf7c>
   1c5b0:	mov	r9, r0
   1c5b4:	ldr	r2, [r0]
   1c5b8:	ldr	r0, [r0, #4]
   1c5bc:	add	r3, r0, r1, lsl #1
   1c5c0:	cmp	r2, r3
   1c5c4:	bge	1c5f0 <__assert_fail@plt+0xae7c>
   1c5c8:	add	r7, r2, r1
   1c5cc:	lsl	r1, r7, #3
   1c5d0:	ldr	r0, [r9, #8]
   1c5d4:	bl	23f00 <__assert_fail@plt+0x1278c>
   1c5d8:	cmp	r0, #0
   1c5dc:	beq	1c710 <__assert_fail@plt+0xaf9c>
   1c5e0:	str	r0, [r9, #8]
   1c5e4:	lsl	r0, r7, #1
   1c5e8:	str	r0, [r9]
   1c5ec:	ldr	r0, [r9, #4]
   1c5f0:	cmp	r0, #0
   1c5f4:	beq	1c6f8 <__assert_fail@plt+0xaf84>
   1c5f8:	ldr	r2, [r6, #4]
   1c5fc:	add	r7, r0, r2, lsl #1
   1c600:	sub	r1, r0, #1
   1c604:	sub	r0, r2, #1
   1c608:	orrs	r2, r0, r1
   1c60c:	bmi	1c654 <__assert_fail@plt+0xaee0>
   1c610:	ldr	r2, [r6, #8]
   1c614:	ldr	r3, [r9, #8]
   1c618:	b	1c638 <__assert_fail@plt+0xaec4>
   1c61c:	subge	r1, r1, #1
   1c620:	sublt	r7, r7, #1
   1c624:	strlt	r4, [r3, r7, lsl #2]
   1c628:	sublt	r0, r0, #1
   1c62c:	orr	r5, r0, r1
   1c630:	cmn	r5, #1
   1c634:	ble	1c654 <__assert_fail@plt+0xaee0>
   1c638:	ldr	r4, [r2, r0, lsl #2]
   1c63c:	ldr	r5, [r3, r1, lsl #2]
   1c640:	cmp	r5, r4
   1c644:	bne	1c61c <__assert_fail@plt+0xaea8>
   1c648:	sub	r1, r1, #1
   1c64c:	sub	r0, r0, #1
   1c650:	b	1c62c <__assert_fail@plt+0xaeb8>
   1c654:	cmp	r0, #0
   1c658:	bmi	1c678 <__assert_fail@plt+0xaf04>
   1c65c:	add	r2, r0, #1
   1c660:	sub	r7, r7, r2
   1c664:	ldr	r0, [r9, #8]
   1c668:	add	r0, r0, r7, lsl #2
   1c66c:	ldr	r1, [r6, #8]
   1c670:	lsl	r2, r2, #2
   1c674:	bl	1148c <memcpy@plt>
   1c678:	ldr	r1, [r6, #4]
   1c67c:	ldr	r0, [r9, #4]
   1c680:	add	r1, r0, r1, lsl #1
   1c684:	sub	r1, r1, #1
   1c688:	sub	r2, r1, r7
   1c68c:	adds	r2, r2, #1
   1c690:	bcs	1c6f0 <__assert_fail@plt+0xaf7c>
   1c694:	add	r3, r2, r0
   1c698:	str	r3, [r9, #4]
   1c69c:	sub	r3, r0, #1
   1c6a0:	ldr	r0, [r9, #8]
   1c6a4:	ldr	r6, [r0, r3, lsl #2]
   1c6a8:	ldr	r5, [r0, r1, lsl #2]
   1c6ac:	cmp	r5, r6
   1c6b0:	ble	1c6cc <__assert_fail@plt+0xaf58>
   1c6b4:	add	r6, r2, r3
   1c6b8:	str	r5, [r0, r6, lsl #2]
   1c6bc:	subs	r2, r2, #1
   1c6c0:	sub	r1, r1, #1
   1c6c4:	bne	1c6a4 <__assert_fail@plt+0xaf30>
   1c6c8:	b	1c6f0 <__assert_fail@plt+0xaf7c>
   1c6cc:	add	r5, r2, r3
   1c6d0:	str	r6, [r0, r5, lsl #2]
   1c6d4:	sub	r6, r3, #1
   1c6d8:	cmp	r3, #0
   1c6dc:	mov	r3, r6
   1c6e0:	bgt	1c6a4 <__assert_fail@plt+0xaf30>
   1c6e4:	add	r1, r0, r7, lsl #2
   1c6e8:	lsl	r2, r2, #2
   1c6ec:	bl	1148c <memcpy@plt>
   1c6f0:	mov	r0, r8
   1c6f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c6f8:	ldr	r0, [r6, #4]
   1c6fc:	str	r0, [r9, #4]
   1c700:	ldr	r0, [r9, #8]
   1c704:	ldr	r2, [r6, #4]
   1c708:	ldr	r1, [r6, #8]
   1c70c:	b	1c6e8 <__assert_fail@plt+0xaf74>
   1c710:	mov	r8, #12
   1c714:	mov	r0, r8
   1c718:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c71c:	push	{r4, r5, r6, sl, fp, lr}
   1c720:	add	fp, sp, #16
   1c724:	mov	r6, r2
   1c728:	mov	r4, r1
   1c72c:	mov	r5, r0
   1c730:	ldr	r0, [r0]
   1c734:	ldr	r1, [r0, r1, lsl #3]!
   1c738:	ldr	r2, [r0, #4]
   1c73c:	mov	r0, r5
   1c740:	bl	1be54 <__assert_fail@plt+0xa6e0>
   1c744:	cmn	r0, #1
   1c748:	ldrne	r1, [r5]
   1c74c:	addne	r1, r1, r0, lsl #3
   1c750:	ldrne	r2, [r1, #4]
   1c754:	bfine	r2, r6, #8, #10
   1c758:	strne	r2, [r1, #4]
   1c75c:	ldrne	r1, [r5]
   1c760:	addne	r2, r1, r4, lsl #3
   1c764:	ldrne	r2, [r2, #4]
   1c768:	movwne	r3, #65280	; 0xff00
   1c76c:	movtne	r3, #3
   1c770:	andne	r2, r2, r3
   1c774:	addne	r1, r1, r0, lsl #3
   1c778:	ldrne	r3, [r1, #4]
   1c77c:	orrne	r2, r2, r3
   1c780:	strne	r2, [r1, #4]
   1c784:	ldrne	r1, [r5]
   1c788:	addne	r1, r1, r0, lsl #3
   1c78c:	ldrne	r2, [r1, #4]
   1c790:	orrne	r2, r2, #262144	; 0x40000
   1c794:	strne	r2, [r1, #4]
   1c798:	ldrne	r1, [r5, #16]
   1c79c:	strne	r4, [r1, r0, lsl #2]
   1c7a0:	pop	{r4, r5, r6, sl, fp, pc}
   1c7a4:	push	{r4, r5, fp, lr}
   1c7a8:	add	fp, sp, #8
   1c7ac:	mov	r5, r1
   1c7b0:	mov	r4, r0
   1c7b4:	ldr	r2, [r0]
   1c7b8:	cmp	r2, #0
   1c7bc:	beq	1c7e8 <__assert_fail@plt+0xb074>
   1c7c0:	ldr	r1, [r4, #4]
   1c7c4:	cmp	r1, #0
   1c7c8:	bne	1c800 <__assert_fail@plt+0xb08c>
   1c7cc:	ldr	r0, [r4, #8]
   1c7d0:	str	r5, [r0]
   1c7d4:	ldr	r0, [r4, #4]
   1c7d8:	add	r0, r0, #1
   1c7dc:	str	r0, [r4, #4]
   1c7e0:	mov	r0, #1
   1c7e4:	pop	{r4, r5, fp, pc}
   1c7e8:	mov	r0, r4
   1c7ec:	mov	r1, r5
   1c7f0:	bl	1c0a0 <__assert_fail@plt+0xa92c>
   1c7f4:	clz	r0, r0
   1c7f8:	lsr	r0, r0, #5
   1c7fc:	pop	{r4, r5, fp, pc}
   1c800:	cmp	r2, r1
   1c804:	bne	1c82c <__assert_fail@plt+0xb0b8>
   1c808:	lsl	r0, r2, #1
   1c80c:	str	r0, [r4]
   1c810:	ldr	r0, [r4, #8]
   1c814:	lsl	r1, r2, #3
   1c818:	bl	23f00 <__assert_fail@plt+0x1278c>
   1c81c:	cmp	r0, #0
   1c820:	beq	1c8a4 <__assert_fail@plt+0xb130>
   1c824:	str	r0, [r4, #8]
   1c828:	ldr	r1, [r4, #4]
   1c82c:	ldr	ip, [r4, #8]
   1c830:	ldr	r2, [ip]
   1c834:	cmp	r2, r5
   1c838:	ble	1c86c <__assert_fail@plt+0xb0f8>
   1c83c:	cmp	r1, #1
   1c840:	blt	1c89c <__assert_fail@plt+0xb128>
   1c844:	add	r3, ip, r1, lsl #2
   1c848:	mov	r2, r3
   1c84c:	ldr	r0, [r2, #-4]!
   1c850:	str	r0, [r3]
   1c854:	sub	r1, r1, #1
   1c858:	cmp	r1, #0
   1c85c:	mov	r3, r2
   1c860:	bgt	1c84c <__assert_fail@plt+0xb0d8>
   1c864:	mov	r1, #0
   1c868:	b	1c89c <__assert_fail@plt+0xb128>
   1c86c:	add	r2, ip, r1, lsl #2
   1c870:	ldr	r3, [r2, #-4]
   1c874:	cmp	r3, r5
   1c878:	ble	1c89c <__assert_fail@plt+0xb128>
   1c87c:	sub	r1, r1, #2
   1c880:	str	r3, [r2]
   1c884:	ldr	r3, [r2, #-8]
   1c888:	sub	r2, r2, #4
   1c88c:	sub	r1, r1, #1
   1c890:	cmp	r3, r5
   1c894:	bgt	1c880 <__assert_fail@plt+0xb10c>
   1c898:	add	r1, r1, #2
   1c89c:	str	r5, [ip, r1, lsl #2]
   1c8a0:	b	1c7d4 <__assert_fail@plt+0xb060>
   1c8a4:	mov	r0, #0
   1c8a8:	pop	{r4, r5, fp, pc}
   1c8ac:	push	{r4, r5, fp, lr}
   1c8b0:	add	fp, sp, #8
   1c8b4:	mov	ip, r0
   1c8b8:	ldr	r3, [r0, #8]
   1c8bc:	sub	lr, r3, #1
   1c8c0:	mvn	r0, #0
   1c8c4:	cmp	lr, #1
   1c8c8:	blt	1c920 <__assert_fail@plt+0xb1ac>
   1c8cc:	ldr	r4, [ip]
   1c8d0:	add	r4, r4, lr, lsl #3
   1c8d4:	ldr	r5, [r4, #4]
   1c8d8:	ands	r4, r5, #262144	; 0x40000
   1c8dc:	beq	1c920 <__assert_fail@plt+0xb1ac>
   1c8e0:	ldr	r4, [ip, #16]
   1c8e4:	sub	lr, r4, #4
   1c8e8:	ldr	r4, [lr, r3, lsl #2]
   1c8ec:	cmp	r4, r1
   1c8f0:	ubfxeq	r4, r5, #8, #10
   1c8f4:	cmpeq	r4, r2
   1c8f8:	beq	1c924 <__assert_fail@plt+0xb1b0>
   1c8fc:	sub	r4, r3, #2
   1c900:	cmp	r4, #1
   1c904:	blt	1c920 <__assert_fail@plt+0xb1ac>
   1c908:	ldr	r4, [ip]
   1c90c:	add	r4, r4, r3, lsl #3
   1c910:	ldr	r5, [r4, #-12]
   1c914:	ands	r4, r5, #262144	; 0x40000
   1c918:	sub	r3, r3, #1
   1c91c:	bne	1c8e8 <__assert_fail@plt+0xb174>
   1c920:	pop	{r4, r5, fp, pc}
   1c924:	sub	r0, r3, #1
   1c928:	pop	{r4, r5, fp, pc}
   1c92c:	push	{r4, r5, fp, lr}
   1c930:	add	fp, sp, #8
   1c934:	mov	r4, r1
   1c938:	mov	r5, r0
   1c93c:	ldr	r0, [r0]
   1c940:	ldr	r1, [r5, #4]
   1c944:	cmp	r0, r1
   1c948:	bne	1c970 <__assert_fail@plt+0xb1fc>
   1c94c:	mov	r1, #2
   1c950:	add	r0, r1, r0, lsl #1
   1c954:	str	r0, [r5]
   1c958:	lsl	r1, r0, #2
   1c95c:	ldr	r0, [r5, #8]
   1c960:	bl	23f00 <__assert_fail@plt+0x1278c>
   1c964:	cmp	r0, #0
   1c968:	beq	1c988 <__assert_fail@plt+0xb214>
   1c96c:	str	r0, [r5, #8]
   1c970:	ldmib	r5, {r0, r1}
   1c974:	add	r2, r0, #1
   1c978:	str	r2, [r5, #4]
   1c97c:	str	r4, [r1, r0, lsl #2]
   1c980:	mov	r0, #1
   1c984:	pop	{r4, r5, fp, pc}
   1c988:	mov	r0, #0
   1c98c:	pop	{r4, r5, fp, pc}
   1c990:	push	{r4, r5, fp, lr}
   1c994:	add	fp, sp, #8
   1c998:	mov	r5, r1
   1c99c:	mov	r4, r0
   1c9a0:	ldr	r0, [r1, #4]
   1c9a4:	str	r0, [r4, #4]
   1c9a8:	ldr	r1, [r1, #4]
   1c9ac:	cmp	r1, #1
   1c9b0:	blt	1c9e4 <__assert_fail@plt+0xb270>
   1c9b4:	str	r0, [r4]
   1c9b8:	lsl	r0, r0, #2
   1c9bc:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1c9c0:	str	r0, [r4, #8]
   1c9c4:	cmp	r0, #0
   1c9c8:	beq	1c9f8 <__assert_fail@plt+0xb284>
   1c9cc:	ldr	r2, [r5, #4]
   1c9d0:	ldr	r1, [r5, #8]
   1c9d4:	lsl	r2, r2, #2
   1c9d8:	bl	1148c <memcpy@plt>
   1c9dc:	mov	r0, #0
   1c9e0:	pop	{r4, r5, fp, pc}
   1c9e4:	mov	r0, #0
   1c9e8:	str	r0, [r4]
   1c9ec:	str	r0, [r4, #4]
   1c9f0:	str	r0, [r4, #8]
   1c9f4:	pop	{r4, r5, fp, pc}
   1c9f8:	mov	r0, #0
   1c9fc:	str	r0, [r4]
   1ca00:	str	r0, [r4, #4]
   1ca04:	mov	r0, #12
   1ca08:	pop	{r4, r5, fp, pc}
   1ca0c:	push	{r4, r5, r6, r7, fp, lr}
   1ca10:	add	fp, sp, #16
   1ca14:	mov	ip, r0
   1ca18:	ldr	r0, [r0, #4]
   1ca1c:	cmp	r0, #1
   1ca20:	blt	1ca74 <__assert_fail@plt+0xb300>
   1ca24:	subs	r2, r0, #1
   1ca28:	mov	r0, #0
   1ca2c:	mov	r3, #0
   1ca30:	beq	1ca60 <__assert_fail@plt+0xb2ec>
   1ca34:	ldr	lr, [ip, #8]
   1ca38:	mov	r3, #0
   1ca3c:	mov	r4, #1
   1ca40:	add	r5, r2, r3
   1ca44:	lsr	r6, r5, #1
   1ca48:	ldr	r7, [lr, r6, lsl #2]
   1ca4c:	cmp	r7, r1
   1ca50:	movge	r2, r6
   1ca54:	addlt	r3, r4, r5, lsr #1
   1ca58:	cmp	r3, r2
   1ca5c:	bcc	1ca40 <__assert_fail@plt+0xb2cc>
   1ca60:	ldr	r2, [ip, #8]
   1ca64:	ldr	r2, [r2, r3, lsl #2]
   1ca68:	cmp	r2, r1
   1ca6c:	addeq	r0, r3, #1
   1ca70:	pop	{r4, r5, r6, r7, fp, pc}
   1ca74:	mov	r0, #0
   1ca78:	pop	{r4, r5, r6, r7, fp, pc}
   1ca7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca80:	add	fp, sp, #28
   1ca84:	sub	sp, sp, #12
   1ca88:	mov	r6, r1
   1ca8c:	ldr	r1, [r2, #4]
   1ca90:	cmp	r1, #0
   1ca94:	beq	1cb64 <__assert_fail@plt+0xb3f0>
   1ca98:	mov	r5, r3
   1ca9c:	mov	sl, r2
   1caa0:	str	r0, [sp, #4]
   1caa4:	mov	r0, r2
   1caa8:	mov	r1, r3
   1caac:	bl	1cb78 <__assert_fail@plt+0xb404>
   1cab0:	mov	r4, r0
   1cab4:	ldr	r0, [r6, #32]
   1cab8:	str	r6, [sp, #8]
   1cabc:	ldr	r1, [r6, #68]	; 0x44
   1cac0:	and	r1, r1, r4
   1cac4:	add	r1, r1, r1, lsl #1
   1cac8:	mov	r6, r0
   1cacc:	ldr	r2, [r6, r1, lsl #2]!
   1cad0:	cmp	r2, #1
   1cad4:	blt	1cb30 <__assert_fail@plt+0xb3bc>
   1cad8:	add	r0, r0, r1, lsl #2
   1cadc:	ldr	r8, [r0, #8]
   1cae0:	mov	r9, #0
   1cae4:	b	1caf8 <__assert_fail@plt+0xb384>
   1cae8:	ldr	r0, [r6]
   1caec:	add	r9, r9, #1
   1caf0:	cmp	r9, r0
   1caf4:	bge	1cb30 <__assert_fail@plt+0xb3bc>
   1caf8:	ldr	r7, [r8, r9, lsl #2]
   1cafc:	ldr	r0, [r7]
   1cb00:	cmp	r0, r4
   1cb04:	bne	1cae8 <__assert_fail@plt+0xb374>
   1cb08:	ldrb	r0, [r7, #52]	; 0x34
   1cb0c:	and	r0, r0, #15
   1cb10:	cmp	r0, r5
   1cb14:	bne	1cae8 <__assert_fail@plt+0xb374>
   1cb18:	ldr	r0, [r7, #40]	; 0x28
   1cb1c:	mov	r1, sl
   1cb20:	bl	1cba4 <__assert_fail@plt+0xb430>
   1cb24:	cmp	r0, #0
   1cb28:	beq	1cae8 <__assert_fail@plt+0xb374>
   1cb2c:	b	1cb6c <__assert_fail@plt+0xb3f8>
   1cb30:	ldr	r0, [sp, #8]
   1cb34:	mov	r1, sl
   1cb38:	mov	r2, r5
   1cb3c:	mov	r3, r4
   1cb40:	bl	1cc0c <__assert_fail@plt+0xb498>
   1cb44:	mov	r7, r0
   1cb48:	cmp	r0, #0
   1cb4c:	bne	1cb6c <__assert_fail@plt+0xb3f8>
   1cb50:	mov	r0, #12
   1cb54:	ldr	r1, [sp, #4]
   1cb58:	str	r0, [r1]
   1cb5c:	mov	r7, #0
   1cb60:	b	1cb6c <__assert_fail@plt+0xb3f8>
   1cb64:	mov	r7, #0
   1cb68:	str	r7, [r0]
   1cb6c:	mov	r0, r7
   1cb70:	sub	sp, fp, #28
   1cb74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb78:	mov	r2, r0
   1cb7c:	ldr	r3, [r0, #4]
   1cb80:	add	r0, r3, r1
   1cb84:	cmp	r3, #1
   1cb88:	bxlt	lr
   1cb8c:	ldr	r1, [r2, #8]
   1cb90:	ldr	r2, [r1], #4
   1cb94:	add	r0, r2, r0
   1cb98:	subs	r3, r3, #1
   1cb9c:	bne	1cb90 <__assert_fail@plt+0xb41c>
   1cba0:	bx	lr
   1cba4:	push	{fp, lr}
   1cba8:	mov	fp, sp
   1cbac:	mov	lr, r0
   1cbb0:	mov	r0, #0
   1cbb4:	cmp	lr, #0
   1cbb8:	cmpne	r1, #0
   1cbbc:	bne	1cbc4 <__assert_fail@plt+0xb450>
   1cbc0:	pop	{fp, pc}
   1cbc4:	ldr	ip, [lr, #4]
   1cbc8:	ldr	r3, [r1, #4]
   1cbcc:	cmp	ip, r3
   1cbd0:	popne	{fp, pc}
   1cbd4:	sub	r3, ip, #1
   1cbd8:	add	r2, r3, #1
   1cbdc:	cmp	r2, #1
   1cbe0:	blt	1cc04 <__assert_fail@plt+0xb490>
   1cbe4:	ldr	r2, [r1, #8]
   1cbe8:	ldr	ip, [r2, r3, lsl #2]
   1cbec:	ldr	r2, [lr, #8]
   1cbf0:	ldr	r2, [r2, r3, lsl #2]
   1cbf4:	sub	r3, r3, #1
   1cbf8:	cmp	r2, ip
   1cbfc:	beq	1cbd8 <__assert_fail@plt+0xb464>
   1cc00:	b	1cbc0 <__assert_fail@plt+0xb44c>
   1cc04:	mov	r0, #1
   1cc08:	pop	{fp, pc}
   1cc0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc10:	add	fp, sp, #28
   1cc14:	sub	sp, sp, #20
   1cc18:	mov	r8, r3
   1cc1c:	mov	r9, r2
   1cc20:	mov	r7, r1
   1cc24:	mov	r6, r0
   1cc28:	mov	r0, #56	; 0x38
   1cc2c:	mov	r1, #1
   1cc30:	bl	23e7c <__assert_fail@plt+0x12708>
   1cc34:	cmp	r0, #0
   1cc38:	beq	1ce0c <__assert_fail@plt+0xb698>
   1cc3c:	mov	r4, r0
   1cc40:	add	r5, r0, #4
   1cc44:	mov	r0, r5
   1cc48:	mov	r1, r7
   1cc4c:	bl	1c990 <__assert_fail@plt+0xb21c>
   1cc50:	cmp	r0, #0
   1cc54:	bne	1ce14 <__assert_fail@plt+0xb6a0>
   1cc58:	str	r8, [sp, #4]
   1cc5c:	str	r5, [r4, #40]	; 0x28
   1cc60:	and	r0, r9, #15
   1cc64:	ldrb	r1, [r4, #52]	; 0x34
   1cc68:	and	r1, r1, #240	; 0xf0
   1cc6c:	orr	r0, r1, r0
   1cc70:	strb	r0, [r4, #52]	; 0x34
   1cc74:	ldr	r0, [r7, #4]
   1cc78:	cmp	r0, #1
   1cc7c:	blt	1cde0 <__assert_fail@plt+0xb66c>
   1cc80:	mov	r3, r5
   1cc84:	and	r0, r9, #4
   1cc88:	str	r0, [sp]
   1cc8c:	and	r0, r9, #2
   1cc90:	str	r0, [sp, #8]
   1cc94:	and	r0, r9, #1
   1cc98:	str	r0, [sp, #16]
   1cc9c:	mov	r8, #0
   1cca0:	movw	r0, #65280	; 0xff00
   1cca4:	movt	r0, #3
   1cca8:	add	sl, r0, #255	; 0xff
   1ccac:	mov	r9, #0
   1ccb0:	str	r5, [sp, #12]
   1ccb4:	b	1ccdc <__assert_fail@plt+0xb568>
   1ccb8:	sub	r1, r8, r9
   1ccbc:	mov	r0, r3
   1ccc0:	bl	1ce20 <__assert_fail@plt+0xb6ac>
   1ccc4:	ldr	r3, [sp, #12]
   1ccc8:	add	r9, r9, #1
   1cccc:	ldr	r0, [r7, #4]
   1ccd0:	add	r8, r8, #1
   1ccd4:	cmp	r8, r0
   1ccd8:	bge	1cde0 <__assert_fail@plt+0xb66c>
   1ccdc:	ldr	r0, [r7, #8]
   1cce0:	ldr	r0, [r0, r8, lsl #2]
   1cce4:	ldr	r1, [r6]
   1cce8:	add	r0, r1, r0, lsl #3
   1ccec:	ldr	r5, [r0, #4]
   1ccf0:	and	r0, r5, sl
   1ccf4:	cmp	r0, #1
   1ccf8:	beq	1cccc <__assert_fail@plt+0xb558>
   1ccfc:	movw	r0, #65280	; 0xff00
   1cd00:	movt	r0, #3
   1cd04:	and	r0, r5, r0
   1cd08:	mov	r1, #32
   1cd0c:	and	r1, r1, r5, lsr #15
   1cd10:	ldrb	r2, [r4, #52]	; 0x34
   1cd14:	orr	r1, r2, r1
   1cd18:	strb	r1, [r4, #52]	; 0x34
   1cd1c:	uxtb	r2, r5
   1cd20:	cmp	r2, #2
   1cd24:	beq	1cd38 <__assert_fail@plt+0xb5c4>
   1cd28:	cmp	r2, #4
   1cd2c:	bne	1cd44 <__assert_fail@plt+0xb5d0>
   1cd30:	mov	r2, #64	; 0x40
   1cd34:	b	1cd3c <__assert_fail@plt+0xb5c8>
   1cd38:	mov	r2, #16
   1cd3c:	orr	r1, r1, r2
   1cd40:	strb	r1, [r4, #52]	; 0x34
   1cd44:	cmp	r0, #0
   1cd48:	beq	1cccc <__assert_fail@plt+0xb558>
   1cd4c:	ldr	r0, [r4, #40]	; 0x28
   1cd50:	cmp	r0, r3
   1cd54:	bne	1cd90 <__assert_fail@plt+0xb61c>
   1cd58:	mov	r0, #12
   1cd5c:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1cd60:	cmp	r0, #0
   1cd64:	beq	1ce04 <__assert_fail@plt+0xb690>
   1cd68:	str	r0, [r4, #40]	; 0x28
   1cd6c:	mov	r1, r7
   1cd70:	bl	1c990 <__assert_fail@plt+0xb21c>
   1cd74:	cmp	r0, #0
   1cd78:	bne	1ce04 <__assert_fail@plt+0xb690>
   1cd7c:	ldrb	r0, [r4, #52]	; 0x34
   1cd80:	orr	r0, r0, #128	; 0x80
   1cd84:	strb	r0, [r4, #52]	; 0x34
   1cd88:	mov	r9, #0
   1cd8c:	ldr	r3, [sp, #12]
   1cd90:	ldr	r0, [sp, #16]
   1cd94:	cmp	r0, #0
   1cd98:	bne	1cda4 <__assert_fail@plt+0xb630>
   1cd9c:	ands	r0, r5, #256	; 0x100
   1cda0:	bne	1ccb8 <__assert_fail@plt+0xb544>
   1cda4:	ldr	r0, [sp, #16]
   1cda8:	cmp	r0, #0
   1cdac:	andsne	r0, r5, #512	; 0x200
   1cdb0:	bne	1ccb8 <__assert_fail@plt+0xb544>
   1cdb4:	ldr	r0, [sp, #8]
   1cdb8:	cmp	r0, #0
   1cdbc:	bne	1cdc8 <__assert_fail@plt+0xb654>
   1cdc0:	ands	r0, r5, #4096	; 0x1000
   1cdc4:	bne	1ccb8 <__assert_fail@plt+0xb544>
   1cdc8:	ldr	r0, [sp]
   1cdcc:	cmp	r0, #0
   1cdd0:	bne	1cccc <__assert_fail@plt+0xb558>
   1cdd4:	ands	r0, r5, #16384	; 0x4000
   1cdd8:	bne	1ccb8 <__assert_fail@plt+0xb544>
   1cddc:	b	1cccc <__assert_fail@plt+0xb558>
   1cde0:	mov	r0, r6
   1cde4:	mov	r1, r4
   1cde8:	ldr	r2, [sp, #4]
   1cdec:	bl	1ce68 <__assert_fail@plt+0xb6f4>
   1cdf0:	cmp	r0, #0
   1cdf4:	bne	1ce04 <__assert_fail@plt+0xb690>
   1cdf8:	mov	r0, r4
   1cdfc:	sub	sp, fp, #28
   1ce00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce04:	mov	r0, r4
   1ce08:	bl	17390 <__assert_fail@plt+0x5c1c>
   1ce0c:	mov	r4, #0
   1ce10:	b	1cdf8 <__assert_fail@plt+0xb684>
   1ce14:	mov	r0, r4
   1ce18:	bl	13f1c <__assert_fail@plt+0x27a8>
   1ce1c:	b	1ce0c <__assert_fail@plt+0xb698>
   1ce20:	cmp	r1, #0
   1ce24:	bxmi	lr
   1ce28:	ldr	r2, [r0, #4]
   1ce2c:	cmp	r2, r1
   1ce30:	subgt	r2, r2, #1
   1ce34:	strgt	r2, [r0, #4]
   1ce38:	cmpgt	r2, r1
   1ce3c:	bgt	1ce44 <__assert_fail@plt+0xb6d0>
   1ce40:	bx	lr
   1ce44:	ldr	r2, [r0, #8]
   1ce48:	add	r3, r2, r1, lsl #2
   1ce4c:	ldr	r3, [r3, #4]
   1ce50:	str	r3, [r2, r1, lsl #2]
   1ce54:	add	r1, r1, #1
   1ce58:	ldr	r3, [r0, #4]
   1ce5c:	cmp	r1, r3
   1ce60:	blt	1ce48 <__assert_fail@plt+0xb6d4>
   1ce64:	b	1ce40 <__assert_fail@plt+0xb6cc>
   1ce68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce6c:	add	fp, sp, #28
   1ce70:	sub	sp, sp, #4
   1ce74:	mov	r9, r2
   1ce78:	mov	r4, r1
   1ce7c:	mov	r7, r0
   1ce80:	str	r2, [r1]
   1ce84:	ldr	r1, [r1, #8]
   1ce88:	add	r5, r4, #16
   1ce8c:	mov	r0, r5
   1ce90:	bl	1c300 <__assert_fail@plt+0xab8c>
   1ce94:	mov	r8, #12
   1ce98:	cmp	r0, #0
   1ce9c:	bne	1cf38 <__assert_fail@plt+0xb7c4>
   1cea0:	ldr	r0, [r4, #8]
   1cea4:	cmp	r0, #1
   1cea8:	blt	1cef4 <__assert_fail@plt+0xb780>
   1ceac:	mov	r6, #0
   1ceb0:	b	1cec4 <__assert_fail@plt+0xb750>
   1ceb4:	ldr	r0, [r4, #8]
   1ceb8:	add	r6, r6, #1
   1cebc:	cmp	r6, r0
   1cec0:	bge	1cef4 <__assert_fail@plt+0xb780>
   1cec4:	ldr	r0, [r4, #12]
   1cec8:	ldr	r1, [r0, r6, lsl #2]
   1cecc:	ldr	r0, [r7]
   1ced0:	add	r0, r0, r1, lsl #3
   1ced4:	ldrb	r0, [r0, #4]
   1ced8:	tst	r0, #8
   1cedc:	bne	1ceb4 <__assert_fail@plt+0xb740>
   1cee0:	mov	r0, r5
   1cee4:	bl	1c92c <__assert_fail@plt+0xb1b8>
   1cee8:	cmp	r0, #0
   1ceec:	bne	1ceb4 <__assert_fail@plt+0xb740>
   1cef0:	b	1cf38 <__assert_fail@plt+0xb7c4>
   1cef4:	ldr	sl, [r7, #32]
   1cef8:	ldr	r0, [r7, #68]	; 0x44
   1cefc:	and	r0, r0, r9
   1cf00:	add	r7, r0, r0, lsl #1
   1cf04:	mov	r6, sl
   1cf08:	ldr	r1, [r6, r7, lsl #2]!
   1cf0c:	mov	r5, r6
   1cf10:	ldr	r0, [r5, #4]!
   1cf14:	cmp	r0, r1
   1cf18:	ble	1cf44 <__assert_fail@plt+0xb7d0>
   1cf1c:	add	r0, sl, r7, lsl #2
   1cf20:	ldr	r0, [r0, #8]
   1cf24:	ldr	r1, [r6]
   1cf28:	add	r2, r1, #1
   1cf2c:	str	r2, [r6]
   1cf30:	str	r4, [r0, r1, lsl #2]
   1cf34:	mov	r8, #0
   1cf38:	mov	r0, r8
   1cf3c:	sub	sp, fp, #28
   1cf40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf44:	add	r9, sl, r7, lsl #2
   1cf48:	ldr	r0, [r9, #8]!
   1cf4c:	mov	r2, #2
   1cf50:	add	r1, r2, r1, lsl #1
   1cf54:	str	r1, [sp]
   1cf58:	lsl	r1, r1, #2
   1cf5c:	bl	23f00 <__assert_fail@plt+0x1278c>
   1cf60:	cmp	r0, #0
   1cf64:	beq	1cf38 <__assert_fail@plt+0xb7c4>
   1cf68:	str	r0, [r9]
   1cf6c:	ldr	r0, [sp]
   1cf70:	str	r0, [r5]
   1cf74:	b	1cf1c <__assert_fail@plt+0xb7a8>
   1cf78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf7c:	add	fp, sp, #28
   1cf80:	sub	sp, sp, #4
   1cf84:	mov	r5, r2
   1cf88:	mov	sl, r1
   1cf8c:	mov	r4, r0
   1cf90:	add	r8, r2, #1
   1cf94:	cmp	r3, #1
   1cf98:	beq	1cfe8 <__assert_fail@plt+0xb874>
   1cf9c:	cmp	r3, #0
   1cfa0:	bne	1d02c <__assert_fail@plt+0xb8b8>
   1cfa4:	lsl	r6, r8, #2
   1cfa8:	mov	r0, r6
   1cfac:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1cfb0:	str	r0, [r4, #4]
   1cfb4:	mov	r7, #0
   1cfb8:	cmp	r0, #0
   1cfbc:	beq	1d06c <__assert_fail@plt+0xb8f8>
   1cfc0:	mov	r0, r6
   1cfc4:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1cfc8:	str	r0, [r4, #8]
   1cfcc:	cmp	r0, #0
   1cfd0:	beq	1d0c8 <__assert_fail@plt+0xb954>
   1cfd4:	str	r8, [r4]
   1cfd8:	mov	r6, #1
   1cfdc:	cmp	r5, #1
   1cfe0:	bge	1d000 <__assert_fail@plt+0xb88c>
   1cfe4:	b	1d038 <__assert_fail@plt+0xb8c4>
   1cfe8:	ldr	r0, [r4]
   1cfec:	mov	r6, #1
   1cff0:	cmp	r8, r0
   1cff4:	bhi	1d078 <__assert_fail@plt+0xb904>
   1cff8:	cmp	r5, #1
   1cffc:	blt	1d038 <__assert_fail@plt+0xb8c4>
   1d000:	add	r0, sl, #4
   1d004:	ldmib	r4, {r1, r2}
   1d008:	mov	r3, r5
   1d00c:	ldr	r7, [r0, #-4]
   1d010:	str	r7, [r1], #4
   1d014:	ldr	r7, [r0]
   1d018:	str	r7, [r2], #4
   1d01c:	add	r0, r0, #8
   1d020:	subs	r3, r3, #1
   1d024:	bne	1d00c <__assert_fail@plt+0xb898>
   1d028:	b	1d03c <__assert_fail@plt+0xb8c8>
   1d02c:	mov	r6, #2
   1d030:	cmp	r5, #1
   1d034:	bge	1d000 <__assert_fail@plt+0xb88c>
   1d038:	mov	r5, #0
   1d03c:	ldr	r0, [r4]
   1d040:	cmp	r5, r0
   1d044:	bcs	1d068 <__assert_fail@plt+0xb8f4>
   1d048:	ldmib	r4, {r0, r1}
   1d04c:	mvn	r2, #0
   1d050:	str	r2, [r1, r5, lsl #2]
   1d054:	str	r2, [r0, r5, lsl #2]
   1d058:	add	r5, r5, #1
   1d05c:	ldr	r3, [r4]
   1d060:	cmp	r5, r3
   1d064:	bcc	1d050 <__assert_fail@plt+0xb8dc>
   1d068:	mov	r7, r6
   1d06c:	mov	r0, r7
   1d070:	sub	sp, fp, #28
   1d074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d078:	ldr	r0, [r4, #4]
   1d07c:	lsl	r9, r8, #2
   1d080:	mov	r1, r9
   1d084:	bl	23f00 <__assert_fail@plt+0x1278c>
   1d088:	mov	r7, #0
   1d08c:	str	r0, [sp]
   1d090:	cmp	r0, #0
   1d094:	beq	1d06c <__assert_fail@plt+0xb8f8>
   1d098:	ldr	r0, [r4, #8]
   1d09c:	mov	r1, r9
   1d0a0:	bl	23f00 <__assert_fail@plt+0x1278c>
   1d0a4:	cmp	r0, #0
   1d0a8:	beq	1d0d4 <__assert_fail@plt+0xb960>
   1d0ac:	str	r8, [r4]
   1d0b0:	ldr	r1, [sp]
   1d0b4:	str	r1, [r4, #4]
   1d0b8:	str	r0, [r4, #8]
   1d0bc:	cmp	r5, #1
   1d0c0:	bge	1d000 <__assert_fail@plt+0xb88c>
   1d0c4:	b	1d038 <__assert_fail@plt+0xb8c4>
   1d0c8:	ldr	r0, [r4, #4]
   1d0cc:	bl	13f1c <__assert_fail@plt+0x27a8>
   1d0d0:	b	1d06c <__assert_fail@plt+0xb8f8>
   1d0d4:	ldr	r0, [sp]
   1d0d8:	b	1d0cc <__assert_fail@plt+0xb958>
   1d0dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d0e0:	add	fp, sp, #24
   1d0e4:	sub	sp, sp, #8
   1d0e8:	mov	r7, r3
   1d0ec:	mov	r4, r2
   1d0f0:	mov	r8, r1
   1d0f4:	mov	r5, r0
   1d0f8:	ldr	r9, [fp, #16]
   1d0fc:	ldr	r6, [r9, #92]	; 0x5c
   1d100:	str	r9, [sp, #4]
   1d104:	ldr	r0, [fp, #12]
   1d108:	str	r0, [sp]
   1d10c:	ldr	r3, [fp, #8]
   1d110:	mov	r0, r1
   1d114:	mov	r1, r2
   1d118:	mov	r2, r5
   1d11c:	bl	17e3c <__assert_fail@plt+0x66c8>
   1d120:	cmp	r6, r7
   1d124:	movgt	r7, r6
   1d128:	add	r1, r4, #1
   1d12c:	cmp	r1, r7
   1d130:	movge	r1, r7
   1d134:	mov	r0, r5
   1d138:	bl	17e94 <__assert_fail@plt+0x6720>
   1d13c:	cmp	r0, #0
   1d140:	bne	1d184 <__assert_fail@plt+0xba10>
   1d144:	add	r1, r9, #96	; 0x60
   1d148:	str	r1, [r5, #68]	; 0x44
   1d14c:	ldrb	r1, [r9, #88]	; 0x58
   1d150:	ubfx	r1, r1, #4, #1
   1d154:	strb	r1, [r5, #78]	; 0x4e
   1d158:	ldrb	r1, [r5, #75]	; 0x4b
   1d15c:	cmp	r1, #0
   1d160:	beq	1d16c <__assert_fail@plt+0xb9f8>
   1d164:	mov	r4, #0
   1d168:	b	1d17c <__assert_fail@plt+0xba08>
   1d16c:	str	r8, [r5, #4]
   1d170:	ldr	r1, [r9, #92]	; 0x5c
   1d174:	cmp	r1, #1
   1d178:	movwgt	r4, #0
   1d17c:	str	r4, [r5, #28]
   1d180:	str	r4, [r5, #32]
   1d184:	sub	sp, fp, #24
   1d188:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d18c:	push	{r4, r5, r6, sl, fp, lr}
   1d190:	add	fp, sp, #16
   1d194:	mov	r4, r2
   1d198:	mov	r5, r0
   1d19c:	mvn	r0, #0
   1d1a0:	str	r1, [r5, #88]	; 0x58
   1d1a4:	str	r0, [r5, #92]	; 0x5c
   1d1a8:	cmp	r2, #1
   1d1ac:	blt	1d1f8 <__assert_fail@plt+0xba84>
   1d1b0:	mov	r6, #12
   1d1b4:	movw	r0, #43690	; 0xaaaa
   1d1b8:	movt	r0, #2730	; 0xaaa
   1d1bc:	cmp	r4, r0
   1d1c0:	bhi	1d1f0 <__assert_fail@plt+0xba7c>
   1d1c4:	add	r0, r4, r4, lsl #1
   1d1c8:	lsl	r0, r0, #3
   1d1cc:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1d1d0:	str	r0, [r5, #116]	; 0x74
   1d1d4:	lsl	r0, r4, #2
   1d1d8:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1d1dc:	str	r0, [r5, #132]	; 0x84
   1d1e0:	cmp	r0, #0
   1d1e4:	ldrne	r0, [r5, #116]	; 0x74
   1d1e8:	cmpne	r0, #0
   1d1ec:	bne	1d1f8 <__assert_fail@plt+0xba84>
   1d1f0:	mov	r0, r6
   1d1f4:	pop	{r4, r5, r6, sl, fp, pc}
   1d1f8:	str	r4, [r5, #128]	; 0x80
   1d1fc:	mov	r0, #1
   1d200:	str	r0, [r5, #120]	; 0x78
   1d204:	str	r4, [r5, #112]	; 0x70
   1d208:	mov	r6, #0
   1d20c:	mov	r0, r6
   1d210:	pop	{r4, r5, r6, sl, fp, pc}
   1d214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d218:	add	fp, sp, #28
   1d21c:	sub	sp, sp, #28
   1d220:	mov	r6, r2
   1d224:	mov	r7, r1
   1d228:	mov	r4, r0
   1d22c:	ldr	r0, [r0, #24]
   1d230:	cmp	r0, r1
   1d234:	ble	1d3a4 <__assert_fail@plt+0xbc30>
   1d238:	ldr	r0, [r4, #80]	; 0x50
   1d23c:	cmp	r0, #2
   1d240:	movge	r0, #0
   1d244:	strge	r0, [r4, #16]
   1d248:	strge	r0, [r4, #20]
   1d24c:	mov	r0, #0
   1d250:	strb	r0, [r4, #76]	; 0x4c
   1d254:	str	r0, [r4, #24]
   1d258:	str	r0, [r4, #28]
   1d25c:	str	r0, [r4, #32]
   1d260:	mov	r0, #4
   1d264:	tst	r6, #1
   1d268:	movweq	r0, #6
   1d26c:	ldr	r1, [r4, #44]	; 0x2c
   1d270:	ldr	r2, [r4, #52]	; 0x34
   1d274:	str	r1, [r4, #48]	; 0x30
   1d278:	str	r2, [r4, #56]	; 0x38
   1d27c:	str	r0, [r4, #60]	; 0x3c
   1d280:	ldrb	r0, [r4, #75]	; 0x4b
   1d284:	cmp	r0, #0
   1d288:	mov	r5, r7
   1d28c:	bne	1d29c <__assert_fail@plt+0xbb28>
   1d290:	ldr	r0, [r4]
   1d294:	str	r0, [r4, #4]
   1d298:	mov	r5, r7
   1d29c:	cmp	r5, #0
   1d2a0:	beq	1d32c <__assert_fail@plt+0xbbb8>
   1d2a4:	ldr	r0, [r4, #32]
   1d2a8:	cmp	r5, r0
   1d2ac:	bge	1d3b4 <__assert_fail@plt+0xbc40>
   1d2b0:	ldrb	r0, [r4, #76]	; 0x4c
   1d2b4:	cmp	r0, #0
   1d2b8:	bne	1d4ec <__assert_fail@plt+0xbd78>
   1d2bc:	sub	r1, r5, #1
   1d2c0:	mov	r0, r4
   1d2c4:	mov	r2, r6
   1d2c8:	bl	1e198 <__assert_fail@plt+0xca24>
   1d2cc:	str	r0, [r4, #60]	; 0x3c
   1d2d0:	ldr	r0, [r4, #80]	; 0x50
   1d2d4:	cmp	r0, #2
   1d2d8:	blt	1d2f4 <__assert_fail@plt+0xbb80>
   1d2dc:	ldr	r0, [r4, #8]
   1d2e0:	ldr	r2, [r4, #28]
   1d2e4:	add	r1, r0, r5, lsl #2
   1d2e8:	sub	r2, r2, r5
   1d2ec:	lsl	r2, r2, #2
   1d2f0:	bl	1145c <memmove@plt>
   1d2f4:	ldrb	r0, [r4, #75]	; 0x4b
   1d2f8:	cmp	r0, #0
   1d2fc:	bne	1d5e4 <__assert_fail@plt+0xbe70>
   1d300:	ldr	r0, [r4, #28]
   1d304:	ldr	r1, [r4, #32]
   1d308:	sub	r0, r0, r5
   1d30c:	sub	r1, r1, r5
   1d310:	str	r0, [r4, #28]
   1d314:	str	r1, [r4, #32]
   1d318:	ldrb	r0, [r4, #75]	; 0x4b
   1d31c:	cmp	r0, #0
   1d320:	ldreq	r0, [r4, #4]
   1d324:	addeq	r0, r0, r5
   1d328:	streq	r0, [r4, #4]
   1d32c:	str	r7, [r4, #24]
   1d330:	ldr	r0, [r4, #48]	; 0x30
   1d334:	ldr	r1, [r4, #56]	; 0x38
   1d338:	ldr	r2, [r4, #80]	; 0x50
   1d33c:	sub	r0, r0, r5
   1d340:	str	r0, [r4, #48]	; 0x30
   1d344:	sub	r1, r1, r5
   1d348:	str	r1, [r4, #56]	; 0x38
   1d34c:	cmp	r2, #2
   1d350:	blt	1d378 <__assert_fail@plt+0xbc04>
   1d354:	ldrb	r0, [r4, #72]	; 0x48
   1d358:	cmp	r0, #0
   1d35c:	beq	1d38c <__assert_fail@plt+0xbc18>
   1d360:	mov	r0, r4
   1d364:	bl	17f38 <__assert_fail@plt+0x67c4>
   1d368:	cmp	r0, #0
   1d36c:	beq	1d394 <__assert_fail@plt+0xbc20>
   1d370:	sub	sp, fp, #28
   1d374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d378:	ldrb	r1, [r4, #75]	; 0x4b
   1d37c:	cmp	r1, #0
   1d380:	bne	1d678 <__assert_fail@plt+0xbf04>
   1d384:	str	r0, [r4, #28]
   1d388:	b	1d394 <__assert_fail@plt+0xbc20>
   1d38c:	mov	r0, r4
   1d390:	bl	18548 <__assert_fail@plt+0x6dd4>
   1d394:	mov	r0, #0
   1d398:	str	r0, [r4, #40]	; 0x28
   1d39c:	sub	sp, fp, #28
   1d3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3a4:	sub	r5, r7, r0
   1d3a8:	cmp	r5, #0
   1d3ac:	bne	1d2a4 <__assert_fail@plt+0xbb30>
   1d3b0:	b	1d32c <__assert_fail@plt+0xbbb8>
   1d3b4:	ldr	r9, [r4, #28]
   1d3b8:	ldrb	r0, [r4, #76]	; 0x4c
   1d3bc:	cmp	r0, #0
   1d3c0:	bne	1d780 <__assert_fail@plt+0xc00c>
   1d3c4:	mov	r0, #0
   1d3c8:	str	r0, [r4, #28]
   1d3cc:	ldr	r1, [r4, #80]	; 0x50
   1d3d0:	cmp	r1, #2
   1d3d4:	blt	1d690 <__assert_fail@plt+0xbf1c>
   1d3d8:	mvn	r0, #0
   1d3dc:	str	r0, [sp, #24]
   1d3e0:	ldrb	r0, [r4, #73]	; 0x49
   1d3e4:	cmp	r0, #0
   1d3e8:	beq	1d49c <__assert_fail@plt+0xbd28>
   1d3ec:	ldr	r2, [r4]
   1d3f0:	ldr	r0, [r4, #24]
   1d3f4:	add	r0, r2, r0
   1d3f8:	add	r8, r0, r5
   1d3fc:	sub	r1, r5, r1
   1d400:	add	r1, r0, r1
   1d404:	cmp	r1, r2
   1d408:	movcc	r1, r2
   1d40c:	mov	sl, r8
   1d410:	sub	sl, sl, #1
   1d414:	cmp	sl, r1
   1d418:	bcc	1d490 <__assert_fail@plt+0xbd1c>
   1d41c:	ldrb	r2, [sl]
   1d420:	and	r2, r2, #192	; 0xc0
   1d424:	cmp	r2, #128	; 0x80
   1d428:	beq	1d410 <__assert_fail@plt+0xbc9c>
   1d42c:	ldr	r1, [r4, #48]	; 0x30
   1d430:	add	r0, r0, r1
   1d434:	sub	r2, r0, sl
   1d438:	ldr	r0, [r4, #64]	; 0x40
   1d43c:	cmp	r0, #0
   1d440:	mov	r1, sl
   1d444:	bne	1d808 <__assert_fail@plt+0xc094>
   1d448:	mov	r0, #0
   1d44c:	str	r0, [sp, #20]
   1d450:	str	r0, [sp, #16]
   1d454:	add	r0, sp, #12
   1d458:	add	r3, sp, #16
   1d45c:	bl	2462c <__assert_fail@plt+0x12eb8>
   1d460:	sub	r1, r8, sl
   1d464:	cmp	r0, r1
   1d468:	bcc	1d490 <__assert_fail@plt+0xbd1c>
   1d46c:	cmn	r0, #3
   1d470:	bhi	1d490 <__assert_fail@plt+0xbd1c>
   1d474:	mov	r2, #0
   1d478:	str	r2, [r4, #16]
   1d47c:	str	r2, [r4, #20]
   1d480:	sub	r0, r0, r1
   1d484:	str	r0, [r4, #28]
   1d488:	ldr	r0, [sp, #12]
   1d48c:	str	r0, [sp, #24]
   1d490:	ldr	r8, [sp, #24]
   1d494:	cmn	r8, #1
   1d498:	bne	1d4c0 <__assert_fail@plt+0xbd4c>
   1d49c:	add	r2, sp, #24
   1d4a0:	mov	r0, r4
   1d4a4:	mov	r1, r7
   1d4a8:	bl	1e264 <__assert_fail@plt+0xcaf0>
   1d4ac:	sub	r0, r0, r7
   1d4b0:	str	r0, [r4, #28]
   1d4b4:	ldr	r8, [sp, #24]
   1d4b8:	cmn	r8, #1
   1d4bc:	beq	1d740 <__assert_fail@plt+0xbfcc>
   1d4c0:	ldrb	r0, [r4, #78]	; 0x4e
   1d4c4:	cmp	r0, #0
   1d4c8:	bne	1d7e4 <__assert_fail@plt+0xc070>
   1d4cc:	mov	r0, #0
   1d4d0:	cmp	r8, #10
   1d4d4:	bne	1d750 <__assert_fail@plt+0xbfdc>
   1d4d8:	ldrb	r0, [r4, #77]	; 0x4d
   1d4dc:	cmp	r0, #0
   1d4e0:	movwne	r0, #1
   1d4e4:	lsl	r0, r0, #1
   1d4e8:	b	1d750 <__assert_fail@plt+0xbfdc>
   1d4ec:	ldr	r8, [r4, #12]
   1d4f0:	ldr	r9, [r4, #28]
   1d4f4:	mov	r0, #0
   1d4f8:	mov	r1, r9
   1d4fc:	b	1d50c <__assert_fail@plt+0xbd98>
   1d500:	cmp	r0, r3
   1d504:	mov	r1, r3
   1d508:	bge	1d538 <__assert_fail@plt+0xbdc4>
   1d50c:	add	r2, r0, r1
   1d510:	add	r2, r2, r2, lsr #31
   1d514:	asr	sl, r2, #1
   1d518:	ldr	r2, [r8, sl, lsl #2]
   1d51c:	cmp	r2, r5
   1d520:	mov	r3, sl
   1d524:	bgt	1d500 <__assert_fail@plt+0xbd8c>
   1d528:	bge	1d538 <__assert_fail@plt+0xbdc4>
   1d52c:	add	r0, sl, #1
   1d530:	mov	r3, r1
   1d534:	b	1d500 <__assert_fail@plt+0xbd8c>
   1d538:	cmp	r2, r5
   1d53c:	addlt	sl, sl, #1
   1d540:	sub	r1, sl, #1
   1d544:	mov	r0, r4
   1d548:	mov	r2, r6
   1d54c:	bl	1e198 <__assert_fail@plt+0xca24>
   1d550:	str	r0, [r4, #60]	; 0x3c
   1d554:	cmp	r9, r5
   1d558:	ble	1d5fc <__assert_fail@plt+0xbe88>
   1d55c:	cmp	sl, r5
   1d560:	bne	1d5fc <__assert_fail@plt+0xbe88>
   1d564:	ldr	r0, [r8, sl, lsl #2]
   1d568:	cmp	r0, r5
   1d56c:	bne	1d5fc <__assert_fail@plt+0xbe88>
   1d570:	ldr	r0, [r4, #8]
   1d574:	add	r1, r0, r5, lsl #2
   1d578:	sub	r2, r9, r5
   1d57c:	lsl	r2, r2, #2
   1d580:	bl	1145c <memmove@plt>
   1d584:	ldr	r0, [r4, #4]
   1d588:	ldr	r2, [r4, #28]
   1d58c:	add	r1, r0, r5
   1d590:	sub	r2, r2, r5
   1d594:	bl	1145c <memmove@plt>
   1d598:	ldr	r0, [r4, #28]
   1d59c:	ldr	r1, [r4, #32]
   1d5a0:	sub	r0, r0, r5
   1d5a4:	sub	r1, r1, r5
   1d5a8:	str	r0, [r4, #28]
   1d5ac:	str	r1, [r4, #32]
   1d5b0:	cmp	r0, #1
   1d5b4:	blt	1d318 <__assert_fail@plt+0xbba4>
   1d5b8:	ldr	r0, [r4, #12]
   1d5bc:	add	r1, r0, r5, lsl #2
   1d5c0:	mov	r2, #0
   1d5c4:	ldr	r3, [r1, r2, lsl #2]
   1d5c8:	sub	r3, r3, r5
   1d5cc:	str	r3, [r0, r2, lsl #2]
   1d5d0:	add	r2, r2, #1
   1d5d4:	ldr	r3, [r4, #28]
   1d5d8:	cmp	r2, r3
   1d5dc:	blt	1d5c4 <__assert_fail@plt+0xbe50>
   1d5e0:	b	1d318 <__assert_fail@plt+0xbba4>
   1d5e4:	ldr	r0, [r4, #4]
   1d5e8:	ldr	r2, [r4, #28]
   1d5ec:	add	r1, r0, r5
   1d5f0:	sub	r2, r2, r5
   1d5f4:	bl	1145c <memmove@plt>
   1d5f8:	b	1d300 <__assert_fail@plt+0xbb8c>
   1d5fc:	mov	r0, #0
   1d600:	strb	r0, [r4, #76]	; 0x4c
   1d604:	sub	r0, r5, r7
   1d608:	ldr	r1, [r4, #44]	; 0x2c
   1d60c:	ldr	r2, [r4, #52]	; 0x34
   1d610:	add	r1, r0, r1
   1d614:	str	r1, [r4, #48]	; 0x30
   1d618:	add	r0, r0, r2
   1d61c:	str	r0, [r4, #56]	; 0x38
   1d620:	sub	r1, r8, #4
   1d624:	mov	r0, sl
   1d628:	cmp	sl, #1
   1d62c:	blt	1d640 <__assert_fail@plt+0xbecc>
   1d630:	ldr	r2, [r1, r0, lsl #2]
   1d634:	sub	sl, r0, #1
   1d638:	cmp	r2, r5
   1d63c:	beq	1d624 <__assert_fail@plt+0xbeb0>
   1d640:	cmp	r0, r9
   1d644:	bge	1d664 <__assert_fail@plt+0xbef0>
   1d648:	ldr	r1, [r4, #8]
   1d64c:	ldr	r2, [r1, r0, lsl #2]
   1d650:	cmn	r2, #1
   1d654:	bne	1d664 <__assert_fail@plt+0xbef0>
   1d658:	add	r0, r0, #1
   1d65c:	cmp	r9, r0
   1d660:	bne	1d64c <__assert_fail@plt+0xbed8>
   1d664:	cmp	r0, r9
   1d668:	bne	1d6dc <__assert_fail@plt+0xbf68>
   1d66c:	mov	r0, #0
   1d670:	str	r0, [r4, #28]
   1d674:	b	1d760 <__assert_fail@plt+0xbfec>
   1d678:	ldrb	r0, [r4, #72]	; 0x48
   1d67c:	cmp	r0, #0
   1d680:	beq	1d728 <__assert_fail@plt+0xbfb4>
   1d684:	mov	r0, r4
   1d688:	bl	184d4 <__assert_fail@plt+0x6d60>
   1d68c:	b	1d394 <__assert_fail@plt+0xbc20>
   1d690:	ldr	r2, [r4]
   1d694:	ldr	r3, [r4, #24]
   1d698:	ldr	r1, [r4, #64]	; 0x40
   1d69c:	add	r3, r5, r3
   1d6a0:	add	r2, r3, r2
   1d6a4:	ldrb	r6, [r2, #-1]
   1d6a8:	str	r0, [r4, #32]
   1d6ac:	cmp	r1, #0
   1d6b0:	ldrbne	r6, [r1, r6]
   1d6b4:	ldr	r0, [r4, #68]	; 0x44
   1d6b8:	mov	r1, r6
   1d6bc:	bl	1e314 <__assert_fail@plt+0xcba0>
   1d6c0:	mov	r1, #1
   1d6c4:	cmp	r0, #0
   1d6c8:	moveq	r1, #0
   1d6cc:	cmpeq	r6, #10
   1d6d0:	beq	1d76c <__assert_fail@plt+0xbff8>
   1d6d4:	str	r1, [r4, #60]	; 0x3c
   1d6d8:	b	1d318 <__assert_fail@plt+0xbba4>
   1d6dc:	ldr	r0, [r8, r0, lsl #2]
   1d6e0:	subs	r0, r0, r5
   1d6e4:	str	r0, [r4, #28]
   1d6e8:	beq	1d760 <__assert_fail@plt+0xbfec>
   1d6ec:	ldr	r2, [r4, #28]
   1d6f0:	cmp	r2, #1
   1d6f4:	blt	1d718 <__assert_fail@plt+0xbfa4>
   1d6f8:	ldr	r0, [r4, #8]
   1d6fc:	mov	r1, #0
   1d700:	mvn	r3, #0
   1d704:	str	r3, [r0, r1, lsl #2]
   1d708:	add	r1, r1, #1
   1d70c:	ldr	r2, [r4, #28]
   1d710:	cmp	r1, r2
   1d714:	blt	1d704 <__assert_fail@plt+0xbf90>
   1d718:	ldr	r0, [r4, #4]
   1d71c:	mov	r1, #255	; 0xff
   1d720:	bl	1166c <memset@plt>
   1d724:	b	1d760 <__assert_fail@plt+0xbfec>
   1d728:	ldr	r0, [r4, #64]	; 0x40
   1d72c:	cmp	r0, #0
   1d730:	beq	1d394 <__assert_fail@plt+0xbc20>
   1d734:	mov	r0, r4
   1d738:	bl	18704 <__assert_fail@plt+0x6f90>
   1d73c:	b	1d394 <__assert_fail@plt+0xbc20>
   1d740:	sub	r1, r9, #1
   1d744:	mov	r0, r4
   1d748:	mov	r2, r6
   1d74c:	bl	1e198 <__assert_fail@plt+0xca24>
   1d750:	str	r0, [r4, #60]	; 0x3c
   1d754:	ldr	r0, [r4, #28]
   1d758:	cmp	r0, #0
   1d75c:	bne	1d7a8 <__assert_fail@plt+0xc034>
   1d760:	ldr	r0, [r4, #28]
   1d764:	str	r0, [r4, #32]
   1d768:	b	1d318 <__assert_fail@plt+0xbba4>
   1d76c:	ldrb	r0, [r4, #77]	; 0x4d
   1d770:	cmp	r0, #0
   1d774:	movwne	r0, #1
   1d778:	lsl	r1, r0, #1
   1d77c:	b	1d6d4 <__assert_fail@plt+0xbf60>
   1d780:	mov	r0, #0
   1d784:	strb	r0, [r4, #76]	; 0x4c
   1d788:	sub	r0, r5, r7
   1d78c:	ldr	r1, [r4, #44]	; 0x2c
   1d790:	ldr	r2, [r4, #52]	; 0x34
   1d794:	add	r1, r0, r1
   1d798:	str	r1, [r4, #48]	; 0x30
   1d79c:	add	r0, r0, r2
   1d7a0:	str	r0, [r4, #56]	; 0x38
   1d7a4:	b	1d3c4 <__assert_fail@plt+0xbc50>
   1d7a8:	ldr	r2, [r4, #28]
   1d7ac:	cmp	r2, #1
   1d7b0:	blt	1d7d4 <__assert_fail@plt+0xc060>
   1d7b4:	ldr	r0, [r4, #8]
   1d7b8:	mov	r1, #0
   1d7bc:	mvn	r3, #0
   1d7c0:	str	r3, [r0, r1, lsl #2]
   1d7c4:	add	r1, r1, #1
   1d7c8:	ldr	r2, [r4, #28]
   1d7cc:	cmp	r1, r2
   1d7d0:	blt	1d7c0 <__assert_fail@plt+0xc04c>
   1d7d4:	ldrb	r0, [r4, #75]	; 0x4b
   1d7d8:	cmp	r0, #0
   1d7dc:	bne	1d718 <__assert_fail@plt+0xbfa4>
   1d7e0:	b	1d760 <__assert_fail@plt+0xbfec>
   1d7e4:	mov	r0, r8
   1d7e8:	bl	11648 <iswalnum@plt>
   1d7ec:	mov	r1, r0
   1d7f0:	mov	r0, #1
   1d7f4:	cmp	r8, #95	; 0x5f
   1d7f8:	beq	1d750 <__assert_fail@plt+0xbfdc>
   1d7fc:	cmp	r1, #0
   1d800:	beq	1d4cc <__assert_fail@plt+0xbd58>
   1d804:	b	1d750 <__assert_fail@plt+0xbfdc>
   1d808:	cmp	r2, #1
   1d80c:	blt	1d844 <__assert_fail@plt+0xc0d0>
   1d810:	cmp	r2, #6
   1d814:	mov	r1, r2
   1d818:	movge	r1, #6
   1d81c:	sub	ip, r1, #1
   1d820:	add	r1, sp, #6
   1d824:	ldrb	r3, [sl, ip]
   1d828:	ldrb	r3, [r0, r3]
   1d82c:	strb	r3, [r1, ip]
   1d830:	sub	r3, ip, #1
   1d834:	cmp	ip, #0
   1d838:	mov	ip, r3
   1d83c:	bgt	1d824 <__assert_fail@plt+0xc0b0>
   1d840:	b	1d448 <__assert_fail@plt+0xbcd4>
   1d844:	add	r1, sp, #6
   1d848:	b	1d448 <__assert_fail@plt+0xbcd4>
   1d84c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d850:	add	fp, sp, #28
   1d854:	sub	sp, sp, #20
   1d858:	mov	sl, r2
   1d85c:	str	r1, [sp, #12]
   1d860:	mov	r7, r0
   1d864:	ldr	r4, [r0, #84]	; 0x54
   1d868:	ldr	r5, [r0, #40]	; 0x28
   1d86c:	mov	r0, #0
   1d870:	str	r0, [sp, #16]
   1d874:	cmp	r2, #0
   1d878:	str	r2, [sp, #8]
   1d87c:	movwne	sl, #1
   1d880:	ldr	r6, [r4, #36]	; 0x24
   1d884:	ldrsb	r0, [r6, #52]	; 0x34
   1d888:	cmn	r0, #1
   1d88c:	bgt	1d8f8 <__assert_fail@plt+0xc184>
   1d890:	ldr	r2, [r7, #88]	; 0x58
   1d894:	sub	r1, r5, #1
   1d898:	mov	r0, r7
   1d89c:	bl	1e198 <__assert_fail@plt+0xca24>
   1d8a0:	tst	r0, #1
   1d8a4:	bne	1d8f4 <__assert_fail@plt+0xc180>
   1d8a8:	mov	r3, r0
   1d8ac:	cmp	r0, #0
   1d8b0:	beq	1d8f8 <__assert_fail@plt+0xc184>
   1d8b4:	ands	r1, r3, #2
   1d8b8:	and	r0, r3, #4
   1d8bc:	cmpne	r0, #0
   1d8c0:	bne	1db00 <__assert_fail@plt+0xc38c>
   1d8c4:	cmp	r1, #0
   1d8c8:	bne	1db10 <__assert_fail@plt+0xc39c>
   1d8cc:	cmp	r0, #0
   1d8d0:	beq	1d8f8 <__assert_fail@plt+0xc184>
   1d8d4:	ldr	r2, [r6, #40]	; 0x28
   1d8d8:	add	r0, sp, #16
   1d8dc:	mov	r1, r4
   1d8e0:	bl	1ca7c <__assert_fail@plt+0xb308>
   1d8e4:	mov	r6, r0
   1d8e8:	cmp	r6, #0
   1d8ec:	bne	1d900 <__assert_fail@plt+0xc18c>
   1d8f0:	b	1db1c <__assert_fail@plt+0xc3a8>
   1d8f4:	ldr	r6, [r4, #40]	; 0x28
   1d8f8:	cmp	r6, #0
   1d8fc:	beq	1db1c <__assert_fail@plt+0xc3a8>
   1d900:	ldr	r0, [r7, #100]	; 0x64
   1d904:	cmp	r0, #0
   1d908:	str	r5, [sp]
   1d90c:	beq	1d920 <__assert_fail@plt+0xc1ac>
   1d910:	str	r6, [r0, r5, lsl #2]
   1d914:	ldr	r0, [r4, #76]	; 0x4c
   1d918:	cmp	r0, #0
   1d91c:	bne	1db4c <__assert_fail@plt+0xc3d8>
   1d920:	ldrb	r0, [r6, #52]	; 0x34
   1d924:	tst	r0, #16
   1d928:	bne	1db24 <__assert_fail@plt+0xc3b0>
   1d92c:	mov	r5, #0
   1d930:	mvn	r0, #0
   1d934:	str	r0, [sp, #4]
   1d938:	ldr	r0, [r7, #40]	; 0x28
   1d93c:	ldr	r1, [r7, #56]	; 0x38
   1d940:	cmp	r1, r0
   1d944:	ble	1dad4 <__assert_fail@plt+0xc360>
   1d948:	add	r3, sp, #16
   1d94c:	b	1d980 <__assert_fail@plt+0xc20c>
   1d950:	ldr	r1, [r7, #40]	; 0x28
   1d954:	ldr	r0, [sp, #12]
   1d958:	cmp	r0, #0
   1d95c:	beq	1daf4 <__assert_fail@plt+0xc380>
   1d960:	str	r1, [sp, #4]
   1d964:	mov	r0, #0
   1d968:	str	r0, [sp, #8]
   1d96c:	mov	r5, #1
   1d970:	ldr	r0, [r7, #40]	; 0x28
   1d974:	ldr	r1, [r7, #56]	; 0x38
   1d978:	cmp	r1, r0
   1d97c:	ble	1dad4 <__assert_fail@plt+0xc360>
   1d980:	mov	r9, r6
   1d984:	add	r8, r0, #1
   1d988:	ldr	r1, [r7, #36]	; 0x24
   1d98c:	cmp	r8, r1
   1d990:	bge	1da74 <__assert_fail@plt+0xc300>
   1d994:	ldr	r1, [r7, #28]
   1d998:	cmp	r8, r1
   1d99c:	bge	1da84 <__assert_fail@plt+0xc310>
   1d9a0:	mov	r0, r3
   1d9a4:	mov	r1, r7
   1d9a8:	mov	r2, r9
   1d9ac:	mov	r4, r3
   1d9b0:	bl	1e7b0 <__assert_fail@plt+0xd03c>
   1d9b4:	mov	r6, r0
   1d9b8:	ldr	r0, [r7, #100]	; 0x64
   1d9bc:	cmp	r0, #0
   1d9c0:	beq	1d9d8 <__assert_fail@plt+0xc264>
   1d9c4:	mov	r0, r4
   1d9c8:	mov	r1, r7
   1d9cc:	mov	r2, r6
   1d9d0:	bl	1e860 <__assert_fail@plt+0xd0ec>
   1d9d4:	mov	r6, r0
   1d9d8:	cmp	r6, #0
   1d9dc:	bne	1da2c <__assert_fail@plt+0xc2b8>
   1d9e0:	ldr	r0, [sp, #16]
   1d9e4:	cmp	r0, #0
   1d9e8:	bne	1db1c <__assert_fail@plt+0xc3a8>
   1d9ec:	ldr	r0, [sp, #12]
   1d9f0:	eor	r0, r0, #1
   1d9f4:	cmp	r5, #0
   1d9f8:	mov	r1, r5
   1d9fc:	movwne	r1, #1
   1da00:	tst	r1, r0
   1da04:	bne	1dad4 <__assert_fail@plt+0xc360>
   1da08:	ldr	r0, [r7, #100]	; 0x64
   1da0c:	cmp	r0, #0
   1da10:	beq	1dad4 <__assert_fail@plt+0xc360>
   1da14:	add	r0, sp, #16
   1da18:	mov	r1, r7
   1da1c:	bl	1e9ac <__assert_fail@plt+0xd238>
   1da20:	mov	r6, r0
   1da24:	cmp	r0, #0
   1da28:	beq	1dad4 <__assert_fail@plt+0xc360>
   1da2c:	tst	sl, #1
   1da30:	bne	1dab0 <__assert_fail@plt+0xc33c>
   1da34:	mov	sl, #0
   1da38:	add	r3, sp, #16
   1da3c:	ldrb	r0, [r6, #52]	; 0x34
   1da40:	tst	r0, #16
   1da44:	beq	1d970 <__assert_fail@plt+0xc1fc>
   1da48:	sxtb	r0, r0
   1da4c:	cmn	r0, #1
   1da50:	bgt	1d950 <__assert_fail@plt+0xc1dc>
   1da54:	ldr	r2, [r7, #40]	; 0x28
   1da58:	mov	r0, r7
   1da5c:	mov	r1, r6
   1da60:	bl	1dbe8 <__assert_fail@plt+0xc474>
   1da64:	add	r3, sp, #16
   1da68:	cmp	r0, #0
   1da6c:	bne	1d950 <__assert_fail@plt+0xc1dc>
   1da70:	b	1d970 <__assert_fail@plt+0xc1fc>
   1da74:	ldr	r2, [r7, #48]	; 0x30
   1da78:	cmp	r1, r2
   1da7c:	bge	1d994 <__assert_fail@plt+0xc220>
   1da80:	b	1da90 <__assert_fail@plt+0xc31c>
   1da84:	ldr	r2, [r7, #48]	; 0x30
   1da88:	cmp	r1, r2
   1da8c:	bge	1d9a0 <__assert_fail@plt+0xc22c>
   1da90:	add	r1, r0, #2
   1da94:	mov	r0, r7
   1da98:	bl	1e6dc <__assert_fail@plt+0xcf68>
   1da9c:	add	r3, sp, #16
   1daa0:	str	r0, [sp, #16]
   1daa4:	cmp	r0, #0
   1daa8:	beq	1d9a0 <__assert_fail@plt+0xc22c>
   1daac:	b	1db1c <__assert_fail@plt+0xc3a8>
   1dab0:	cmp	r9, r6
   1dab4:	ldr	r0, [sp]
   1dab8:	moveq	r0, r8
   1dabc:	str	r0, [sp]
   1dac0:	sub	r0, r9, r6
   1dac4:	clz	r0, r0
   1dac8:	lsr	r0, r0, #5
   1dacc:	and	sl, sl, r0
   1dad0:	b	1da38 <__assert_fail@plt+0xc2c4>
   1dad4:	ldr	r2, [sp, #8]
   1dad8:	cmp	r2, #0
   1dadc:	beq	1daf0 <__assert_fail@plt+0xc37c>
   1dae0:	ldr	r0, [r2]
   1dae4:	ldr	r1, [sp]
   1dae8:	add	r0, r0, r1
   1daec:	str	r0, [r2]
   1daf0:	ldr	r1, [sp, #4]
   1daf4:	mov	r0, r1
   1daf8:	sub	sp, fp, #28
   1dafc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db00:	ldr	r6, [r4, #48]	; 0x30
   1db04:	cmp	r6, #0
   1db08:	bne	1d900 <__assert_fail@plt+0xc18c>
   1db0c:	b	1db1c <__assert_fail@plt+0xc3a8>
   1db10:	ldr	r6, [r4, #44]	; 0x2c
   1db14:	cmp	r6, #0
   1db18:	bne	1d900 <__assert_fail@plt+0xc18c>
   1db1c:	mvn	r1, #1
   1db20:	b	1daf4 <__assert_fail@plt+0xc380>
   1db24:	sxtb	r0, r0
   1db28:	cmn	r0, #1
   1db2c:	ble	1db84 <__assert_fail@plt+0xc410>
   1db30:	mov	r4, r5
   1db34:	mov	r5, #1
   1db38:	ldr	r0, [sp, #12]
   1db3c:	cmp	r0, #0
   1db40:	str	r4, [sp, #4]
   1db44:	bne	1d938 <__assert_fail@plt+0xc1c4>
   1db48:	b	1dbbc <__assert_fail@plt+0xc448>
   1db4c:	add	r5, r6, #4
   1db50:	mov	sl, #0
   1db54:	mov	r0, r7
   1db58:	mov	r1, r5
   1db5c:	mov	r2, #0
   1db60:	bl	1e33c <__assert_fail@plt+0xcbc8>
   1db64:	str	r0, [sp, #16]
   1db68:	cmp	r0, #0
   1db6c:	bne	1dbe0 <__assert_fail@plt+0xc46c>
   1db70:	ldrb	r0, [r6, #52]	; 0x34
   1db74:	tst	r0, #64	; 0x40
   1db78:	bne	1dbc4 <__assert_fail@plt+0xc450>
   1db7c:	ldr	r5, [sp]
   1db80:	b	1d920 <__assert_fail@plt+0xc1ac>
   1db84:	mov	r0, r7
   1db88:	mov	r1, r6
   1db8c:	mov	r2, r5
   1db90:	bl	1dbe8 <__assert_fail@plt+0xc474>
   1db94:	mov	r4, r5
   1db98:	mov	r5, r0
   1db9c:	cmp	r0, #0
   1dba0:	mvneq	r4, #0
   1dba4:	str	r4, [sp, #4]
   1dba8:	movwne	r5, #1
   1dbac:	beq	1d938 <__assert_fail@plt+0xc1c4>
   1dbb0:	ldr	r0, [sp, #12]
   1dbb4:	cmp	r0, #0
   1dbb8:	bne	1d938 <__assert_fail@plt+0xc1c4>
   1dbbc:	ldr	r1, [sp]
   1dbc0:	b	1daf4 <__assert_fail@plt+0xc380>
   1dbc4:	mov	r0, r7
   1dbc8:	mov	r1, r5
   1dbcc:	bl	1e3d0 <__assert_fail@plt+0xcc5c>
   1dbd0:	str	r0, [sp, #16]
   1dbd4:	cmp	r0, #0
   1dbd8:	ldr	r5, [sp]
   1dbdc:	beq	1d920 <__assert_fail@plt+0xc1ac>
   1dbe0:	mov	r1, r0
   1dbe4:	b	1daf4 <__assert_fail@plt+0xc380>
   1dbe8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dbec:	add	fp, sp, #24
   1dbf0:	mov	r3, r2
   1dbf4:	mov	r8, r1
   1dbf8:	mov	r6, r0
   1dbfc:	ldr	r2, [r0, #88]	; 0x58
   1dc00:	mov	r1, r3
   1dc04:	bl	1e198 <__assert_fail@plt+0xca24>
   1dc08:	mov	r9, r0
   1dc0c:	ldr	r0, [r8, #8]
   1dc10:	cmp	r0, #1
   1dc14:	blt	1dc50 <__assert_fail@plt+0xc4dc>
   1dc18:	ldr	r4, [r8, #12]
   1dc1c:	ldr	r6, [r6, #84]	; 0x54
   1dc20:	mov	r5, #0
   1dc24:	ldr	r7, [r4, r5, lsl #2]
   1dc28:	mov	r0, r6
   1dc2c:	mov	r1, r7
   1dc30:	mov	r2, r9
   1dc34:	bl	21098 <__assert_fail@plt+0xf924>
   1dc38:	cmp	r0, #0
   1dc3c:	bne	1dc54 <__assert_fail@plt+0xc4e0>
   1dc40:	add	r5, r5, #1
   1dc44:	ldr	r0, [r8, #8]
   1dc48:	cmp	r5, r0
   1dc4c:	blt	1dc24 <__assert_fail@plt+0xc4b0>
   1dc50:	mov	r7, #0
   1dc54:	mov	r0, r7
   1dc58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dc5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc60:	add	fp, sp, #28
   1dc64:	sub	sp, sp, #44	; 0x2c
   1dc68:	ldr	r7, [r0, #92]	; 0x5c
   1dc6c:	cmn	r7, #-1073741822	; 0xc0000002
   1dc70:	bhi	1de70 <__assert_fail@plt+0xc6fc>
   1dc74:	ldr	r5, [r0, #84]	; 0x54
   1dc78:	str	r0, [sp, #12]
   1dc7c:	ldr	sl, [r0, #96]	; 0x60
   1dc80:	mov	r0, #4
   1dc84:	add	r6, r0, r7, lsl #2
   1dc88:	mov	r0, r6
   1dc8c:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1dc90:	mov	r4, #12
   1dc94:	cmp	r0, #0
   1dc98:	beq	1de40 <__assert_fail@plt+0xc6cc>
   1dc9c:	mov	r9, r0
   1dca0:	ldr	r0, [r5, #76]	; 0x4c
   1dca4:	cmp	r0, #0
   1dca8:	beq	1dcd0 <__assert_fail@plt+0xc55c>
   1dcac:	mov	r0, r6
   1dcb0:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1dcb4:	cmp	r0, #0
   1dcb8:	beq	1de44 <__assert_fail@plt+0xc6d0>
   1dcbc:	mov	r8, r0
   1dcc0:	str	r5, [sp, #8]
   1dcc4:	add	r4, sp, #16
   1dcc8:	mov	r5, sl
   1dccc:	b	1dd88 <__assert_fail@plt+0xc614>
   1dcd0:	str	r7, [sp]
   1dcd4:	add	r4, sp, #16
   1dcd8:	mov	r8, #0
   1dcdc:	mov	r0, r4
   1dce0:	mov	r1, r9
   1dce4:	mov	r2, #0
   1dce8:	mov	r3, sl
   1dcec:	bl	2110c <__assert_fail@plt+0xf998>
   1dcf0:	ldr	r0, [sp, #12]
   1dcf4:	mov	r1, r4
   1dcf8:	bl	2112c <__assert_fail@plt+0xf9b8>
   1dcfc:	mov	r4, r0
   1dd00:	ldr	r0, [sp, #40]	; 0x28
   1dd04:	bl	13f1c <__assert_fail@plt+0x27a8>
   1dd08:	cmp	r4, #0
   1dd0c:	bne	1de48 <__assert_fail@plt+0xc6d4>
   1dd10:	ldr	r0, [r9]
   1dd14:	cmp	r0, #0
   1dd18:	bne	1de24 <__assert_fail@plt+0xc6b0>
   1dd1c:	mov	r4, #1
   1dd20:	b	1de48 <__assert_fail@plt+0xc6d4>
   1dd24:	mov	r4, #1
   1dd28:	cmp	r7, #1
   1dd2c:	blt	1de64 <__assert_fail@plt+0xc6f0>
   1dd30:	sub	r7, r7, #1
   1dd34:	ldr	sl, [sp, #12]
   1dd38:	ldr	r0, [sl, #100]	; 0x64
   1dd3c:	mov	r9, r1
   1dd40:	mov	r8, r6
   1dd44:	b	1dd5c <__assert_fail@plt+0xc5e8>
   1dd48:	sub	r1, r7, #1
   1dd4c:	add	r2, r7, #1
   1dd50:	cmp	r2, #2
   1dd54:	mov	r7, r1
   1dd58:	blt	1de48 <__assert_fail@plt+0xc6d4>
   1dd5c:	ldr	r1, [r0, r7, lsl #2]
   1dd60:	cmp	r1, #0
   1dd64:	beq	1dd48 <__assert_fail@plt+0xc5d4>
   1dd68:	ldrb	r2, [r1, #52]	; 0x34
   1dd6c:	tst	r2, #16
   1dd70:	beq	1dd48 <__assert_fail@plt+0xc5d4>
   1dd74:	mov	r0, sl
   1dd78:	mov	r2, r7
   1dd7c:	bl	1dbe8 <__assert_fail@plt+0xc474>
   1dd80:	mov	r4, r5
   1dd84:	mov	r5, r0
   1dd88:	add	sl, r7, #1
   1dd8c:	lsl	r2, sl, #2
   1dd90:	mov	r0, r8
   1dd94:	mov	r1, #0
   1dd98:	bl	1166c <memset@plt>
   1dd9c:	str	r7, [sp]
   1dda0:	mov	r0, r4
   1dda4:	mov	r1, r9
   1dda8:	mov	r6, r8
   1ddac:	mov	r2, r8
   1ddb0:	mov	r8, r5
   1ddb4:	mov	r3, r5
   1ddb8:	bl	2110c <__assert_fail@plt+0xf998>
   1ddbc:	ldr	r0, [sp, #12]
   1ddc0:	mov	r5, r4
   1ddc4:	mov	r1, r4
   1ddc8:	bl	2112c <__assert_fail@plt+0xf9b8>
   1ddcc:	mov	r4, r0
   1ddd0:	ldr	r0, [sp, #40]	; 0x28
   1ddd4:	bl	13f1c <__assert_fail@plt+0x27a8>
   1ddd8:	cmp	r4, #0
   1dddc:	bne	1de78 <__assert_fail@plt+0xc704>
   1dde0:	mov	r1, r9
   1dde4:	ldr	r0, [r9]
   1dde8:	cmp	r0, #0
   1ddec:	ldreq	r0, [r6]
   1ddf0:	cmpeq	r0, #0
   1ddf4:	beq	1dd24 <__assert_fail@plt+0xc5b0>
   1ddf8:	ldr	r0, [sp, #8]
   1ddfc:	mov	r9, r1
   1de00:	mov	r2, r6
   1de04:	mov	r3, sl
   1de08:	bl	21244 <__assert_fail@plt+0xfad0>
   1de0c:	mov	r4, r0
   1de10:	mov	r0, r6
   1de14:	bl	13f1c <__assert_fail@plt+0x27a8>
   1de18:	cmp	r4, #0
   1de1c:	mov	sl, r8
   1de20:	bne	1de44 <__assert_fail@plt+0xc6d0>
   1de24:	ldr	r4, [sp, #12]
   1de28:	ldr	r0, [r4, #100]	; 0x64
   1de2c:	bl	13f1c <__assert_fail@plt+0x27a8>
   1de30:	str	r7, [r4, #92]	; 0x5c
   1de34:	str	sl, [r4, #96]	; 0x60
   1de38:	str	r9, [r4, #100]	; 0x64
   1de3c:	mov	r4, #0
   1de40:	mov	r9, #0
   1de44:	mov	r8, #0
   1de48:	mov	r0, r9
   1de4c:	bl	13f1c <__assert_fail@plt+0x27a8>
   1de50:	mov	r0, r8
   1de54:	bl	13f1c <__assert_fail@plt+0x27a8>
   1de58:	mov	r0, r4
   1de5c:	sub	sp, fp, #28
   1de60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de64:	mov	r9, r1
   1de68:	mov	r8, r6
   1de6c:	b	1de48 <__assert_fail@plt+0xc6d4>
   1de70:	mov	r4, #12
   1de74:	b	1de58 <__assert_fail@plt+0xc6e4>
   1de78:	mov	r8, r6
   1de7c:	b	1de48 <__assert_fail@plt+0xc6d4>
   1de80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1de84:	add	fp, sp, #24
   1de88:	mov	r8, r0
   1de8c:	ldr	r0, [r0, #124]	; 0x7c
   1de90:	cmp	r0, #1
   1de94:	blt	1df20 <__assert_fail@plt+0xc7ac>
   1de98:	mov	r7, #0
   1de9c:	b	1deb8 <__assert_fail@plt+0xc744>
   1dea0:	mov	r0, r5
   1dea4:	bl	13f1c <__assert_fail@plt+0x27a8>
   1dea8:	add	r7, r7, #1
   1deac:	ldr	r0, [r8, #124]	; 0x7c
   1deb0:	cmp	r7, r0
   1deb4:	bge	1df20 <__assert_fail@plt+0xc7ac>
   1deb8:	ldr	r0, [r8, #132]	; 0x84
   1debc:	ldr	r5, [r0, r7, lsl #2]
   1dec0:	ldr	r0, [r5, #16]
   1dec4:	cmp	r0, #1
   1dec8:	blt	1def8 <__assert_fail@plt+0xc784>
   1decc:	mov	r4, #0
   1ded0:	ldr	r0, [r5, #20]
   1ded4:	ldr	r6, [r0, r4, lsl #2]
   1ded8:	ldr	r0, [r6, #16]
   1dedc:	bl	13f1c <__assert_fail@plt+0x27a8>
   1dee0:	mov	r0, r6
   1dee4:	bl	13f1c <__assert_fail@plt+0x27a8>
   1dee8:	add	r4, r4, #1
   1deec:	ldr	r0, [r5, #16]
   1def0:	cmp	r4, r0
   1def4:	blt	1ded0 <__assert_fail@plt+0xc75c>
   1def8:	ldr	r0, [r5, #20]
   1defc:	bl	13f1c <__assert_fail@plt+0x27a8>
   1df00:	ldr	r0, [r5, #8]
   1df04:	cmp	r0, #0
   1df08:	beq	1dea0 <__assert_fail@plt+0xc72c>
   1df0c:	ldr	r0, [r0, #8]
   1df10:	bl	13f1c <__assert_fail@plt+0x27a8>
   1df14:	ldr	r0, [r5, #8]
   1df18:	bl	13f1c <__assert_fail@plt+0x27a8>
   1df1c:	b	1dea0 <__assert_fail@plt+0xc72c>
   1df20:	mov	r0, #0
   1df24:	str	r0, [r8, #108]	; 0x6c
   1df28:	str	r0, [r8, #124]	; 0x7c
   1df2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1df30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df34:	add	fp, sp, #28
   1df38:	sub	sp, sp, #204	; 0xcc
   1df3c:	mov	r5, r3
   1df40:	mov	r6, r2
   1df44:	mov	r9, r1
   1df48:	ldr	r4, [r0]
   1df4c:	movw	r0, #22936	; 0x5998
   1df50:	movt	r0, #2
   1df54:	vldr	d16, [r0]
   1df58:	ldr	r0, [r0, #8]
   1df5c:	str	r0, [fp, #-56]	; 0xffffffc8
   1df60:	vstr	d16, [fp, #-64]	; 0xffffffc0
   1df64:	add	r0, sp, #28
   1df68:	bl	22308 <__assert_fail@plt+0x10b94>
   1df6c:	mov	r7, #0
   1df70:	ldr	r0, [fp, #8]
   1df74:	cmp	r0, #0
   1df78:	mov	sl, #0
   1df7c:	beq	1dfa0 <__assert_fail@plt+0xc82c>
   1df80:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1df84:	add	r0, r0, r0, lsl #1
   1df88:	lsl	r0, r0, #3
   1df8c:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1df90:	str	r0, [fp, #-56]	; 0xffffffc8
   1df94:	cmp	r0, #0
   1df98:	beq	1e13c <__assert_fail@plt+0xc9c8>
   1df9c:	sub	sl, fp, #64	; 0x40
   1dfa0:	ldr	r8, [r4, #72]	; 0x48
   1dfa4:	str	r7, [fp, #-44]	; 0xffffffd4
   1dfa8:	str	r7, [fp, #-48]	; 0xffffffd0
   1dfac:	str	r7, [fp, #-40]	; 0xffffffd8
   1dfb0:	add	r0, sp, #28
   1dfb4:	mov	r1, r6
   1dfb8:	bl	22320 <__assert_fail@plt+0x10bac>
   1dfbc:	mov	r7, #12
   1dfc0:	cmp	r0, #0
   1dfc4:	beq	1e150 <__assert_fail@plt+0xc9dc>
   1dfc8:	str	r4, [sp, #20]
   1dfcc:	str	r9, [sp, #24]
   1dfd0:	add	r0, sp, #28
   1dfd4:	bl	223f8 <__assert_fail@plt+0x10c84>
   1dfd8:	mov	r4, r0
   1dfdc:	lsl	r2, r6, #3
   1dfe0:	mov	r1, r5
   1dfe4:	bl	1148c <memcpy@plt>
   1dfe8:	ldr	r9, [r5]
   1dfec:	ldr	r0, [r5, #4]
   1dff0:	str	r9, [fp, #-32]	; 0xffffffe0
   1dff4:	mov	r7, #0
   1dff8:	cmp	r9, r0
   1dffc:	bgt	1e148 <__assert_fail@plt+0xc9d4>
   1e000:	str	r9, [sp]
   1e004:	str	r6, [sp, #4]
   1e008:	ldr	r0, [sp, #20]
   1e00c:	mov	r1, r5
   1e010:	mov	r2, r4
   1e014:	mov	r3, r8
   1e018:	bl	22400 <__assert_fail@plt+0x10c8c>
   1e01c:	ldr	r0, [r5, #4]
   1e020:	cmp	r9, r0
   1e024:	ldr	r9, [sp, #24]
   1e028:	bne	1e038 <__assert_fail@plt+0xc8c4>
   1e02c:	ldr	r0, [r9, #96]	; 0x60
   1e030:	cmp	r8, r0
   1e034:	beq	1e054 <__assert_fail@plt+0xc8e0>
   1e038:	cmp	sl, #0
   1e03c:	beq	1e0b8 <__assert_fail@plt+0xc944>
   1e040:	sub	r0, fp, #48	; 0x30
   1e044:	mov	r1, r8
   1e048:	bl	1ca0c <__assert_fail@plt+0xb298>
   1e04c:	cmp	r0, #0
   1e050:	beq	1e0b8 <__assert_fail@plt+0xc944>
   1e054:	cmp	sl, #0
   1e058:	beq	1e148 <__assert_fail@plt+0xc9d4>
   1e05c:	mov	r0, #0
   1e060:	b	1e070 <__assert_fail@plt+0xc8fc>
   1e064:	add	r0, r0, #1
   1e068:	cmp	r6, r0
   1e06c:	beq	1e144 <__assert_fail@plt+0xc9d0>
   1e070:	ldr	r1, [r5, r0, lsl #3]
   1e074:	cmp	r1, #0
   1e078:	bmi	1e064 <__assert_fail@plt+0xc8f0>
   1e07c:	add	r1, r5, r0, lsl #3
   1e080:	ldr	r1, [r1, #4]
   1e084:	cmn	r1, #1
   1e088:	bne	1e064 <__assert_fail@plt+0xc8f0>
   1e08c:	str	r4, [sp]
   1e090:	sub	r0, fp, #48	; 0x30
   1e094:	str	r0, [sp, #4]
   1e098:	mov	r0, sl
   1e09c:	sub	r1, fp, #32
   1e0a0:	mov	r2, r6
   1e0a4:	mov	r3, r5
   1e0a8:	bl	224b8 <__assert_fail@plt+0x10d44>
   1e0ac:	mov	r8, r0
   1e0b0:	cmp	r0, #0
   1e0b4:	bmi	1e144 <__assert_fail@plt+0xc9d0>
   1e0b8:	sub	r0, fp, #32
   1e0bc:	stm	sp, {r0, r8}
   1e0c0:	sub	r0, fp, #48	; 0x30
   1e0c4:	str	r0, [sp, #8]
   1e0c8:	str	sl, [sp, #12]
   1e0cc:	mov	r0, r9
   1e0d0:	mov	r1, r6
   1e0d4:	mov	r2, r5
   1e0d8:	mov	r3, r4
   1e0dc:	bl	22570 <__assert_fail@plt+0x10dfc>
   1e0e0:	mov	r8, r0
   1e0e4:	cmn	r0, #1
   1e0e8:	ble	1e100 <__assert_fail@plt+0xc98c>
   1e0ec:	ldr	r0, [r5, #4]
   1e0f0:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1e0f4:	cmp	r9, r0
   1e0f8:	ble	1e000 <__assert_fail@plt+0xc88c>
   1e0fc:	b	1e148 <__assert_fail@plt+0xc9d4>
   1e100:	cmn	r8, #2
   1e104:	beq	1e16c <__assert_fail@plt+0xc9f8>
   1e108:	str	r4, [sp]
   1e10c:	sub	r0, fp, #48	; 0x30
   1e110:	str	r0, [sp, #4]
   1e114:	mov	r0, sl
   1e118:	sub	r1, fp, #32
   1e11c:	mov	r2, r6
   1e120:	mov	r3, r5
   1e124:	bl	224b8 <__assert_fail@plt+0x10d44>
   1e128:	mov	r8, r0
   1e12c:	cmp	r0, #0
   1e130:	bpl	1e0ec <__assert_fail@plt+0xc978>
   1e134:	mov	r7, #1
   1e138:	b	1e148 <__assert_fail@plt+0xc9d4>
   1e13c:	mov	r7, #12
   1e140:	b	1e160 <__assert_fail@plt+0xc9ec>
   1e144:	mov	r7, #0
   1e148:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e14c:	bl	13f1c <__assert_fail@plt+0x27a8>
   1e150:	add	r0, sp, #28
   1e154:	bl	22374 <__assert_fail@plt+0x10c00>
   1e158:	mov	r0, sl
   1e15c:	bl	22390 <__assert_fail@plt+0x10c1c>
   1e160:	mov	r0, r7
   1e164:	sub	sp, fp, #28
   1e168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e16c:	mov	r7, #12
   1e170:	b	1e148 <__assert_fail@plt+0xc9d4>
   1e174:	push	{r4, sl, fp, lr}
   1e178:	add	fp, sp, #8
   1e17c:	mov	r4, r0
   1e180:	bl	1de80 <__assert_fail@plt+0xc70c>
   1e184:	ldr	r0, [r4, #132]	; 0x84
   1e188:	bl	13f1c <__assert_fail@plt+0x27a8>
   1e18c:	ldr	r0, [r4, #116]	; 0x74
   1e190:	pop	{r4, sl, fp, lr}
   1e194:	b	13f1c <__assert_fail@plt+0x27a8>
   1e198:	push	{r4, r5, fp, lr}
   1e19c:	add	fp, sp, #8
   1e1a0:	mov	r4, r0
   1e1a4:	cmn	r1, #1
   1e1a8:	ble	1e1e0 <__assert_fail@plt+0xca6c>
   1e1ac:	ldr	r0, [r4, #48]	; 0x30
   1e1b0:	cmp	r0, r1
   1e1b4:	beq	1e23c <__assert_fail@plt+0xcac8>
   1e1b8:	ldr	r0, [r4, #80]	; 0x50
   1e1bc:	cmp	r0, #2
   1e1c0:	blt	1e1e8 <__assert_fail@plt+0xca74>
   1e1c4:	ldr	r0, [r4, #8]
   1e1c8:	ldr	r5, [r0, r1, lsl #2]
   1e1cc:	cmn	r5, #1
   1e1d0:	bne	1e210 <__assert_fail@plt+0xca9c>
   1e1d4:	sub	r1, r1, #1
   1e1d8:	cmn	r1, #1
   1e1dc:	bne	1e1c8 <__assert_fail@plt+0xca54>
   1e1e0:	ldr	r0, [r4, #60]	; 0x3c
   1e1e4:	pop	{r4, r5, fp, pc}
   1e1e8:	ldr	r2, [r4, #4]
   1e1ec:	ldr	r0, [r4, #68]	; 0x44
   1e1f0:	ldrb	r5, [r2, r1]
   1e1f4:	mov	r1, r5
   1e1f8:	bl	1e314 <__assert_fail@plt+0xcba0>
   1e1fc:	mov	r1, r0
   1e200:	mov	r0, #1
   1e204:	cmp	r1, #0
   1e208:	beq	1e21c <__assert_fail@plt+0xcaa8>
   1e20c:	b	1e238 <__assert_fail@plt+0xcac4>
   1e210:	ldrb	r0, [r4, #78]	; 0x4e
   1e214:	cmp	r0, #0
   1e218:	bne	1e248 <__assert_fail@plt+0xcad4>
   1e21c:	mov	r0, #0
   1e220:	cmp	r5, #10
   1e224:	popne	{r4, r5, fp, pc}
   1e228:	ldrb	r0, [r4, #77]	; 0x4d
   1e22c:	cmp	r0, #0
   1e230:	movwne	r0, #1
   1e234:	lsl	r0, r0, #1
   1e238:	pop	{r4, r5, fp, pc}
   1e23c:	and	r0, r2, #2
   1e240:	eor	r0, r0, #10
   1e244:	pop	{r4, r5, fp, pc}
   1e248:	mov	r0, r5
   1e24c:	bl	11648 <iswalnum@plt>
   1e250:	mov	r1, r0
   1e254:	mov	r0, #1
   1e258:	cmp	r5, #95	; 0x5f
   1e25c:	bne	1e204 <__assert_fail@plt+0xca90>
   1e260:	b	1e238 <__assert_fail@plt+0xcac4>
   1e264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e268:	add	fp, sp, #28
   1e26c:	sub	sp, sp, #12
   1e270:	str	r2, [sp, #4]
   1e274:	mov	sl, r1
   1e278:	mov	r7, r0
   1e27c:	ldr	r0, [r0, #24]
   1e280:	ldr	r1, [r7, #32]
   1e284:	add	r5, r1, r0
   1e288:	mvn	r1, #0
   1e28c:	cmp	r5, sl
   1e290:	bge	1e300 <__assert_fail@plt+0xcb8c>
   1e294:	add	r4, r7, #16
   1e298:	ldr	r0, [r7]
   1e29c:	ldr	r2, [r7, #44]	; 0x2c
   1e2a0:	add	r1, r0, r5
   1e2a4:	sub	r6, r2, r5
   1e2a8:	ldm	r4, {r8, r9}
   1e2ac:	add	r0, sp, #8
   1e2b0:	mov	r2, r6
   1e2b4:	mov	r3, r4
   1e2b8:	bl	2462c <__assert_fail@plt+0x12eb8>
   1e2bc:	sub	r1, r0, #1
   1e2c0:	cmn	r1, #3
   1e2c4:	bcs	1e2dc <__assert_fail@plt+0xcb68>
   1e2c8:	ldr	r1, [sp, #8]
   1e2cc:	add	r5, r0, r5
   1e2d0:	cmp	r5, sl
   1e2d4:	blt	1e298 <__assert_fail@plt+0xcb24>
   1e2d8:	b	1e300 <__assert_fail@plt+0xcb8c>
   1e2dc:	mov	r1, #0
   1e2e0:	cmp	r6, #0
   1e2e4:	cmpne	r0, #0
   1e2e8:	beq	1e2f4 <__assert_fail@plt+0xcb80>
   1e2ec:	ldr	r0, [r7]
   1e2f0:	ldrb	r1, [r0, r5]
   1e2f4:	stm	r4, {r8, r9}
   1e2f8:	mov	r0, #1
   1e2fc:	b	1e2cc <__assert_fail@plt+0xcb58>
   1e300:	ldr	r0, [sp, #4]
   1e304:	str	r1, [r0]
   1e308:	mov	r0, r5
   1e30c:	sub	sp, fp, #28
   1e310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e314:	asr	r2, r1, #31
   1e318:	add	r2, r1, r2, lsr #27
   1e31c:	asr	r2, r2, #5
   1e320:	ldr	r0, [r0, r2, lsl #2]
   1e324:	and	r1, r1, #31
   1e328:	mov	r2, #1
   1e32c:	and	r0, r0, r2, lsl r1
   1e330:	cmp	r0, #0
   1e334:	movwne	r0, #1
   1e338:	bx	lr
   1e33c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e340:	add	fp, sp, #24
   1e344:	mov	r6, r0
   1e348:	ldr	r0, [r1, #4]
   1e34c:	cmp	r0, #1
   1e350:	blt	1e3c8 <__assert_fail@plt+0xcc54>
   1e354:	mov	r8, r2
   1e358:	mov	r5, r1
   1e35c:	ldr	r7, [r6, #84]	; 0x54
   1e360:	mov	r4, #0
   1e364:	mov	r9, #1
   1e368:	b	1e37c <__assert_fail@plt+0xcc08>
   1e36c:	add	r4, r4, #1
   1e370:	ldr	r0, [r5, #4]
   1e374:	cmp	r4, r0
   1e378:	bge	1e3c8 <__assert_fail@plt+0xcc54>
   1e37c:	ldr	r0, [r5, #8]
   1e380:	ldr	r1, [r0, r4, lsl #2]
   1e384:	ldr	r0, [r7]
   1e388:	add	r2, r0, r1, lsl #3
   1e38c:	ldrb	r2, [r2, #4]
   1e390:	cmp	r2, #8
   1e394:	bne	1e36c <__assert_fail@plt+0xcbf8>
   1e398:	ldr	r0, [r0, r1, lsl #3]
   1e39c:	cmp	r0, #31
   1e3a0:	bgt	1e36c <__assert_fail@plt+0xcbf8>
   1e3a4:	ldr	r2, [r7, #80]	; 0x50
   1e3a8:	tst	r2, r9, lsl r0
   1e3ac:	beq	1e36c <__assert_fail@plt+0xcbf8>
   1e3b0:	mov	r0, r6
   1e3b4:	mov	r2, r8
   1e3b8:	bl	1ea20 <__assert_fail@plt+0xd2ac>
   1e3bc:	cmp	r0, #0
   1e3c0:	beq	1e36c <__assert_fail@plt+0xcbf8>
   1e3c4:	b	1e3cc <__assert_fail@plt+0xcc58>
   1e3c8:	mov	r0, #0
   1e3cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3d4:	add	fp, sp, #28
   1e3d8:	sub	sp, sp, #52	; 0x34
   1e3dc:	mov	r5, r0
   1e3e0:	ldr	r0, [r1, #4]
   1e3e4:	cmp	r0, #1
   1e3e8:	blt	1e6bc <__assert_fail@plt+0xcf48>
   1e3ec:	mov	r8, r1
   1e3f0:	ldr	r9, [r5, #84]	; 0x54
   1e3f4:	ldr	r0, [r5, #40]	; 0x28
   1e3f8:	str	r0, [sp, #32]
   1e3fc:	mov	sl, #0
   1e400:	str	r1, [sp, #4]
   1e404:	str	r9, [sp, #16]
   1e408:	b	1e41c <__assert_fail@plt+0xcca8>
   1e40c:	ldr	r0, [r8, #4]
   1e410:	add	sl, sl, #1
   1e414:	cmp	sl, r0
   1e418:	bge	1e6bc <__assert_fail@plt+0xcf48>
   1e41c:	ldr	r0, [r8, #8]
   1e420:	ldr	r4, [r0, sl, lsl #2]
   1e424:	ldr	r0, [r9]
   1e428:	add	r0, r0, r4, lsl #3
   1e42c:	ldr	r6, [r0, #4]
   1e430:	uxtb	r0, r6
   1e434:	cmp	r0, #4
   1e438:	bne	1e40c <__assert_fail@plt+0xcc98>
   1e43c:	movw	r0, #65280	; 0xff00
   1e440:	movt	r0, #3
   1e444:	tst	r6, r0
   1e448:	beq	1e49c <__assert_fail@plt+0xcd28>
   1e44c:	ldr	r2, [r5, #88]	; 0x58
   1e450:	mov	r0, r5
   1e454:	ldr	r1, [sp, #32]
   1e458:	bl	1e198 <__assert_fail@plt+0xca24>
   1e45c:	and	r1, r0, #1
   1e460:	tst	r6, #1024	; 0x400
   1e464:	beq	1e470 <__assert_fail@plt+0xccfc>
   1e468:	cmp	r1, #0
   1e46c:	beq	1e40c <__assert_fail@plt+0xcc98>
   1e470:	tst	r6, #2048	; 0x800
   1e474:	cmpne	r1, #0
   1e478:	bne	1e40c <__assert_fail@plt+0xcc98>
   1e47c:	tst	r6, #8192	; 0x2000
   1e480:	beq	1e48c <__assert_fail@plt+0xcd18>
   1e484:	ands	r1, r0, #2
   1e488:	beq	1e40c <__assert_fail@plt+0xcc98>
   1e48c:	tst	r6, #32768	; 0x8000
   1e490:	beq	1e49c <__assert_fail@plt+0xcd28>
   1e494:	ands	r0, r0, #8
   1e498:	beq	1e40c <__assert_fail@plt+0xcc98>
   1e49c:	ldr	r6, [r5, #108]	; 0x6c
   1e4a0:	mov	r0, r5
   1e4a4:	mov	r1, r4
   1e4a8:	ldr	r2, [sp, #32]
   1e4ac:	bl	1eaac <__assert_fail@plt+0xd338>
   1e4b0:	str	r0, [fp, #-32]	; 0xffffffe0
   1e4b4:	cmp	r0, #0
   1e4b8:	bne	1e6c4 <__assert_fail@plt+0xcf50>
   1e4bc:	ldr	r0, [r5, #108]	; 0x6c
   1e4c0:	cmp	r6, r0
   1e4c4:	bge	1e40c <__assert_fail@plt+0xcc98>
   1e4c8:	add	r0, r6, r6, lsl #1
   1e4cc:	lsl	r7, r0, #3
   1e4d0:	str	r4, [sp, #8]
   1e4d4:	b	1e4ec <__assert_fail@plt+0xcd78>
   1e4d8:	add	r7, r7, #24
   1e4dc:	add	r6, r6, #1
   1e4e0:	ldr	r0, [r5, #108]	; 0x6c
   1e4e4:	cmp	r6, r0
   1e4e8:	bge	1e40c <__assert_fail@plt+0xcc98>
   1e4ec:	ldr	r0, [r5, #116]	; 0x74
   1e4f0:	ldr	r1, [r0, r7]
   1e4f4:	cmp	r1, r4
   1e4f8:	bne	1e4d8 <__assert_fail@plt+0xcd64>
   1e4fc:	add	r0, r0, r7
   1e500:	ldr	r1, [r0, #4]
   1e504:	ldr	r2, [sp, #32]
   1e508:	cmp	r1, r2
   1e50c:	bne	1e4d8 <__assert_fail@plt+0xcd64>
   1e510:	ldr	r2, [r0, #8]
   1e514:	ldr	r3, [r0, #12]
   1e518:	ldr	r0, [r9, #24]
   1e51c:	str	r0, [sp, #28]
   1e520:	cmp	r3, r2
   1e524:	bne	1e53c <__assert_fail@plt+0xcdc8>
   1e528:	ldr	r0, [r9, #20]
   1e52c:	add	r1, r4, r4, lsl #1
   1e530:	add	r0, r0, r1, lsl #2
   1e534:	ldr	r0, [r0, #8]
   1e538:	b	1e544 <__assert_fail@plt+0xcdd0>
   1e53c:	ldr	r0, [r9, #12]
   1e540:	add	r0, r0, r4, lsl #2
   1e544:	ldr	r0, [r0]
   1e548:	add	r9, r0, r0, lsl #1
   1e54c:	ldr	r4, [sp, #32]
   1e550:	str	r3, [sp, #20]
   1e554:	add	r0, r3, r4
   1e558:	str	r2, [sp, #24]
   1e55c:	sub	r8, r0, r2
   1e560:	sub	r1, r8, #1
   1e564:	ldr	r2, [r5, #88]	; 0x58
   1e568:	mov	r0, r5
   1e56c:	bl	1e198 <__assert_fail@plt+0xca24>
   1e570:	mov	r3, r0
   1e574:	ldr	r0, [r5, #100]	; 0x64
   1e578:	ldr	r1, [r0, r4, lsl #2]
   1e57c:	ldr	r0, [r0, r8, lsl #2]
   1e580:	cmp	r1, #0
   1e584:	beq	1e590 <__assert_fail@plt+0xce1c>
   1e588:	ldr	r1, [r1, #8]
   1e58c:	b	1e594 <__assert_fail@plt+0xce20>
   1e590:	mov	r1, #0
   1e594:	str	r1, [sp, #12]
   1e598:	add	r4, sp, #36	; 0x24
   1e59c:	ldr	r1, [sp, #28]
   1e5a0:	add	r2, r1, r9, lsl #2
   1e5a4:	cmp	r0, #0
   1e5a8:	str	r2, [sp, #28]
   1e5ac:	beq	1e61c <__assert_fail@plt+0xcea8>
   1e5b0:	mov	r9, r3
   1e5b4:	ldr	r1, [r0, #40]	; 0x28
   1e5b8:	mov	r0, r4
   1e5bc:	bl	1ee54 <__assert_fail@plt+0xd6e0>
   1e5c0:	str	r0, [fp, #-32]	; 0xffffffe0
   1e5c4:	cmp	r0, #0
   1e5c8:	ldr	r1, [sp, #16]
   1e5cc:	bne	1e6d0 <__assert_fail@plt+0xcf5c>
   1e5d0:	sub	r0, fp, #32
   1e5d4:	mov	r2, r4
   1e5d8:	mov	r3, r9
   1e5dc:	bl	1ca7c <__assert_fail@plt+0xb308>
   1e5e0:	ldr	r1, [r5, #100]	; 0x64
   1e5e4:	str	r0, [r1, r8, lsl #2]
   1e5e8:	ldr	r0, [sp, #44]	; 0x2c
   1e5ec:	bl	13f1c <__assert_fail@plt+0x27a8>
   1e5f0:	ldr	r0, [r5, #100]	; 0x64
   1e5f4:	ldr	r0, [r0, r8, lsl #2]
   1e5f8:	cmp	r0, #0
   1e5fc:	bne	1e60c <__assert_fail@plt+0xce98>
   1e600:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e604:	cmp	r0, #0
   1e608:	bne	1e6c4 <__assert_fail@plt+0xcf50>
   1e60c:	ldr	r8, [sp, #4]
   1e610:	ldr	r4, [sp, #8]
   1e614:	ldr	r9, [sp, #16]
   1e618:	b	1e658 <__assert_fail@plt+0xcee4>
   1e61c:	sub	r0, fp, #32
   1e620:	ldr	r9, [sp, #16]
   1e624:	mov	r1, r9
   1e628:	bl	1ca7c <__assert_fail@plt+0xb308>
   1e62c:	ldr	r1, [r5, #100]	; 0x64
   1e630:	str	r0, [r1, r8, lsl #2]
   1e634:	ldr	r0, [r5, #100]	; 0x64
   1e638:	ldr	r0, [r0, r8, lsl #2]
   1e63c:	cmp	r0, #0
   1e640:	ldr	r8, [sp, #4]
   1e644:	ldr	r4, [sp, #8]
   1e648:	bne	1e658 <__assert_fail@plt+0xcee4>
   1e64c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e650:	cmp	r0, #0
   1e654:	bne	1e6c4 <__assert_fail@plt+0xcf50>
   1e658:	ldr	r0, [sp, #24]
   1e65c:	ldr	r1, [sp, #20]
   1e660:	cmp	r1, r0
   1e664:	bne	1e4d8 <__assert_fail@plt+0xcd64>
   1e668:	ldr	r0, [r5, #100]	; 0x64
   1e66c:	ldr	r1, [sp, #32]
   1e670:	ldr	r0, [r0, r1, lsl #2]
   1e674:	ldr	r0, [r0, #8]
   1e678:	ldr	r1, [sp, #12]
   1e67c:	cmp	r0, r1
   1e680:	ble	1e4d8 <__assert_fail@plt+0xcd64>
   1e684:	mov	r0, r5
   1e688:	ldr	r1, [sp, #28]
   1e68c:	ldr	r2, [sp, #32]
   1e690:	bl	1e33c <__assert_fail@plt+0xcbc8>
   1e694:	str	r0, [fp, #-32]	; 0xffffffe0
   1e698:	cmp	r0, #0
   1e69c:	bne	1e6c4 <__assert_fail@plt+0xcf50>
   1e6a0:	mov	r0, r5
   1e6a4:	ldr	r1, [sp, #28]
   1e6a8:	bl	1e3d0 <__assert_fail@plt+0xcc5c>
   1e6ac:	str	r0, [fp, #-32]	; 0xffffffe0
   1e6b0:	cmp	r0, #0
   1e6b4:	beq	1e4d8 <__assert_fail@plt+0xcd64>
   1e6b8:	b	1e6c4 <__assert_fail@plt+0xcf50>
   1e6bc:	mov	r0, #0
   1e6c0:	str	r0, [fp, #-32]	; 0xffffffe0
   1e6c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e6c8:	sub	sp, fp, #28
   1e6cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6d0:	ldr	r0, [sp, #44]	; 0x2c
   1e6d4:	bl	13f1c <__assert_fail@plt+0x27a8>
   1e6d8:	b	1e6c4 <__assert_fail@plt+0xcf50>
   1e6dc:	push	{r4, r5, fp, lr}
   1e6e0:	add	fp, sp, #8
   1e6e4:	mov	r4, r0
   1e6e8:	ldr	r0, [r0, #36]	; 0x24
   1e6ec:	mov	r5, #12
   1e6f0:	cmn	r0, #-536870910	; 0xe0000002
   1e6f4:	bhi	1e7a8 <__assert_fail@plt+0xd034>
   1e6f8:	ldr	r2, [r4, #48]	; 0x30
   1e6fc:	cmp	r2, r0, lsl #1
   1e700:	lslge	r2, r0, #1
   1e704:	cmp	r2, r1
   1e708:	movle	r2, r1
   1e70c:	mov	r0, r4
   1e710:	mov	r1, r2
   1e714:	bl	17e94 <__assert_fail@plt+0x6720>
   1e718:	cmp	r0, #0
   1e71c:	bne	1e7ac <__assert_fail@plt+0xd038>
   1e720:	ldr	r0, [r4, #100]	; 0x64
   1e724:	cmp	r0, #0
   1e728:	beq	1e748 <__assert_fail@plt+0xcfd4>
   1e72c:	ldr	r1, [r4, #36]	; 0x24
   1e730:	mov	r2, #4
   1e734:	add	r1, r2, r1, lsl #2
   1e738:	bl	23f00 <__assert_fail@plt+0x1278c>
   1e73c:	cmp	r0, #0
   1e740:	beq	1e7a8 <__assert_fail@plt+0xd034>
   1e744:	str	r0, [r4, #100]	; 0x64
   1e748:	ldr	r0, [r4, #80]	; 0x50
   1e74c:	ldrb	r1, [r4, #72]	; 0x48
   1e750:	cmp	r1, #0
   1e754:	beq	1e774 <__assert_fail@plt+0xd000>
   1e758:	cmp	r0, #2
   1e75c:	blt	1e788 <__assert_fail@plt+0xd014>
   1e760:	mov	r0, r4
   1e764:	bl	17f38 <__assert_fail@plt+0x67c4>
   1e768:	cmp	r0, #0
   1e76c:	beq	1e7a4 <__assert_fail@plt+0xd030>
   1e770:	pop	{r4, r5, fp, pc}
   1e774:	cmp	r0, #2
   1e778:	blt	1e794 <__assert_fail@plt+0xd020>
   1e77c:	mov	r0, r4
   1e780:	bl	18548 <__assert_fail@plt+0x6dd4>
   1e784:	b	1e7a4 <__assert_fail@plt+0xd030>
   1e788:	mov	r0, r4
   1e78c:	bl	184d4 <__assert_fail@plt+0x6d60>
   1e790:	b	1e7a4 <__assert_fail@plt+0xd030>
   1e794:	ldr	r0, [r4, #64]	; 0x40
   1e798:	cmp	r0, #0
   1e79c:	movne	r0, r4
   1e7a0:	blne	18704 <__assert_fail@plt+0x6f90>
   1e7a4:	mov	r5, #0
   1e7a8:	mov	r0, r5
   1e7ac:	pop	{r4, r5, fp, pc}
   1e7b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e7b4:	add	fp, sp, #24
   1e7b8:	mov	r6, r2
   1e7bc:	mov	r4, r1
   1e7c0:	mov	r5, r0
   1e7c4:	ldrb	r0, [r2, #52]	; 0x34
   1e7c8:	tst	r0, #32
   1e7cc:	bne	1e844 <__assert_fail@plt+0xd0d0>
   1e7d0:	ldr	r0, [r4, #4]
   1e7d4:	ldr	r1, [r4, #40]	; 0x28
   1e7d8:	add	r2, r1, #1
   1e7dc:	str	r2, [r4, #40]	; 0x28
   1e7e0:	ldrb	r7, [r0, r1]
   1e7e4:	ldr	r0, [r6, #44]	; 0x2c
   1e7e8:	cmp	r0, #0
   1e7ec:	ldrne	r0, [r0, r7, lsl #2]
   1e7f0:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e7f4:	ldr	r8, [r6, #48]	; 0x30
   1e7f8:	cmp	r8, #0
   1e7fc:	bne	1e824 <__assert_fail@plt+0xd0b0>
   1e800:	ldr	r0, [r4, #84]	; 0x54
   1e804:	mov	r1, r6
   1e808:	bl	20648 <__assert_fail@plt+0xeed4>
   1e80c:	cmp	r0, #0
   1e810:	bne	1e7e4 <__assert_fail@plt+0xd070>
   1e814:	mov	r0, #12
   1e818:	str	r0, [r5]
   1e81c:	mov	r0, #0
   1e820:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e824:	ldr	r0, [r4, #40]	; 0x28
   1e828:	ldr	r2, [r4, #88]	; 0x58
   1e82c:	sub	r1, r0, #1
   1e830:	mov	r0, r4
   1e834:	bl	1e198 <__assert_fail@plt+0xca24>
   1e838:	bfi	r7, r0, #8, #1
   1e83c:	ldr	r0, [r8, r7, lsl #2]
   1e840:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e844:	mov	r0, r4
   1e848:	mov	r1, r6
   1e84c:	bl	20478 <__assert_fail@plt+0xed04>
   1e850:	str	r0, [r5]
   1e854:	cmp	r0, #0
   1e858:	beq	1e7d0 <__assert_fail@plt+0xd05c>
   1e85c:	b	1e81c <__assert_fail@plt+0xd0a8>
   1e860:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e864:	add	fp, sp, #24
   1e868:	sub	sp, sp, #16
   1e86c:	mov	r7, r2
   1e870:	mov	r4, r1
   1e874:	mov	r8, r0
   1e878:	ldr	r5, [r1, #40]	; 0x28
   1e87c:	ldr	r6, [r1, #84]	; 0x54
   1e880:	ldr	r0, [r1, #100]	; 0x64
   1e884:	ldr	r1, [r1, #104]	; 0x68
   1e888:	cmp	r5, r1
   1e88c:	ble	1e89c <__assert_fail@plt+0xd128>
   1e890:	str	r7, [r0, r5, lsl #2]
   1e894:	str	r5, [r4, #104]	; 0x68
   1e898:	b	1e938 <__assert_fail@plt+0xd1c4>
   1e89c:	ldr	r1, [r0, r5, lsl #2]
   1e8a0:	cmp	r1, #0
   1e8a4:	beq	1e8d8 <__assert_fail@plt+0xd164>
   1e8a8:	ldr	r0, [r0, r5, lsl #2]
   1e8ac:	ldr	r2, [r0, #40]	; 0x28
   1e8b0:	cmp	r7, #0
   1e8b4:	beq	1e8e0 <__assert_fail@plt+0xd16c>
   1e8b8:	ldr	r9, [r7, #40]	; 0x28
   1e8bc:	mov	r0, sp
   1e8c0:	mov	r1, r9
   1e8c4:	bl	1ee54 <__assert_fail@plt+0xd6e0>
   1e8c8:	str	r0, [r8]
   1e8cc:	cmp	r0, #0
   1e8d0:	beq	1e8f4 <__assert_fail@plt+0xd180>
   1e8d4:	b	1e9a4 <__assert_fail@plt+0xd230>
   1e8d8:	str	r7, [r0, r5, lsl #2]
   1e8dc:	b	1e938 <__assert_fail@plt+0xd1c4>
   1e8e0:	vldr	d16, [r2]
   1e8e4:	ldr	r0, [r2, #8]
   1e8e8:	str	r0, [sp, #8]
   1e8ec:	vstr	d16, [sp]
   1e8f0:	mov	r9, #0
   1e8f4:	ldr	r0, [r4, #40]	; 0x28
   1e8f8:	ldr	r2, [r4, #88]	; 0x58
   1e8fc:	sub	r1, r0, #1
   1e900:	mov	r0, r4
   1e904:	bl	1e198 <__assert_fail@plt+0xca24>
   1e908:	mov	r3, r0
   1e90c:	mov	r2, sp
   1e910:	mov	r0, r8
   1e914:	mov	r1, r6
   1e918:	bl	1ca7c <__assert_fail@plt+0xb308>
   1e91c:	mov	r7, r0
   1e920:	ldr	r0, [r4, #100]	; 0x64
   1e924:	str	r7, [r0, r5, lsl #2]
   1e928:	cmp	r9, #0
   1e92c:	beq	1e938 <__assert_fail@plt+0xd1c4>
   1e930:	ldr	r0, [sp, #8]
   1e934:	bl	13f1c <__assert_fail@plt+0x27a8>
   1e938:	cmp	r7, #0
   1e93c:	ldrne	r0, [r6, #76]	; 0x4c
   1e940:	cmpne	r0, #0
   1e944:	bne	1e954 <__assert_fail@plt+0xd1e0>
   1e948:	mov	r0, r7
   1e94c:	sub	sp, fp, #24
   1e950:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e954:	add	r6, r7, #4
   1e958:	mov	r0, r4
   1e95c:	mov	r1, r6
   1e960:	mov	r2, r5
   1e964:	bl	1e33c <__assert_fail@plt+0xcbc8>
   1e968:	str	r0, [r8]
   1e96c:	cmp	r0, #0
   1e970:	bne	1e9a4 <__assert_fail@plt+0xd230>
   1e974:	ldrb	r0, [r7, #52]	; 0x34
   1e978:	tst	r0, #64	; 0x40
   1e97c:	beq	1e948 <__assert_fail@plt+0xd1d4>
   1e980:	mov	r0, r4
   1e984:	mov	r1, r6
   1e988:	bl	1e3d0 <__assert_fail@plt+0xcc5c>
   1e98c:	str	r0, [r8]
   1e990:	cmp	r0, #0
   1e994:	mov	r7, #0
   1e998:	ldreq	r0, [r4, #100]	; 0x64
   1e99c:	ldreq	r7, [r0, r5, lsl #2]
   1e9a0:	b	1e948 <__assert_fail@plt+0xd1d4>
   1e9a4:	mov	r7, #0
   1e9a8:	b	1e948 <__assert_fail@plt+0xd1d4>
   1e9ac:	push	{r4, r5, r6, sl, fp, lr}
   1e9b0:	add	fp, sp, #16
   1e9b4:	mov	r4, r1
   1e9b8:	mov	r6, r0
   1e9bc:	ldr	r1, [r4, #40]	; 0x28
   1e9c0:	ldr	r0, [r4, #104]	; 0x68
   1e9c4:	cmp	r1, r0
   1e9c8:	bge	1ea18 <__assert_fail@plt+0xd2a4>
   1e9cc:	add	r2, r1, #1
   1e9d0:	ldr	r3, [r4, #40]	; 0x28
   1e9d4:	ldr	r5, [r4, #100]	; 0x64
   1e9d8:	add	r3, r3, #1
   1e9dc:	str	r3, [r4, #40]	; 0x28
   1e9e0:	add	r1, r5, r1, lsl #2
   1e9e4:	ldr	r1, [r1, #4]
   1e9e8:	cmp	r1, #0
   1e9ec:	mov	r1, r2
   1e9f0:	beq	1e9c4 <__assert_fail@plt+0xd250>
   1e9f4:	mov	r0, r6
   1e9f8:	mov	r1, r4
   1e9fc:	mov	r2, #0
   1ea00:	bl	1e860 <__assert_fail@plt+0xd0ec>
   1ea04:	cmp	r0, #0
   1ea08:	ldreq	r1, [r6]
   1ea0c:	cmpeq	r1, #0
   1ea10:	beq	1e9bc <__assert_fail@plt+0xd248>
   1ea14:	pop	{r4, r5, r6, sl, fp, pc}
   1ea18:	mov	r0, #0
   1ea1c:	pop	{r4, r5, r6, sl, fp, pc}
   1ea20:	push	{r4, r5, r6, r7, fp, lr}
   1ea24:	add	fp, sp, #16
   1ea28:	mov	r4, r2
   1ea2c:	mov	r6, r1
   1ea30:	mov	r5, r0
   1ea34:	ldr	r0, [r0, #124]	; 0x7c
   1ea38:	ldr	r7, [r5, #128]	; 0x80
   1ea3c:	cmp	r0, r7
   1ea40:	beq	1ea88 <__assert_fail@plt+0xd314>
   1ea44:	mov	r0, #1
   1ea48:	mov	r1, #24
   1ea4c:	bl	23e7c <__assert_fail@plt+0x12708>
   1ea50:	ldr	r1, [r5, #124]	; 0x7c
   1ea54:	ldr	r2, [r5, #132]	; 0x84
   1ea58:	str	r0, [r2, r1, lsl #2]
   1ea5c:	ldr	r0, [r5, #132]	; 0x84
   1ea60:	ldr	r0, [r0, r1, lsl #2]
   1ea64:	cmp	r0, #0
   1ea68:	strne	r6, [r0, #4]
   1ea6c:	addne	r1, r1, #1
   1ea70:	strne	r1, [r5, #124]	; 0x7c
   1ea74:	strne	r4, [r0]
   1ea78:	movne	r0, #0
   1ea7c:	popne	{r4, r5, r6, r7, fp, pc}
   1ea80:	mov	r0, #12
   1ea84:	pop	{r4, r5, r6, r7, fp, pc}
   1ea88:	ldr	r0, [r5, #132]	; 0x84
   1ea8c:	lsl	r1, r7, #3
   1ea90:	bl	23f00 <__assert_fail@plt+0x1278c>
   1ea94:	cmp	r0, #0
   1ea98:	beq	1ea80 <__assert_fail@plt+0xd30c>
   1ea9c:	lsl	r1, r7, #1
   1eaa0:	str	r1, [r5, #128]	; 0x80
   1eaa4:	str	r0, [r5, #132]	; 0x84
   1eaa8:	b	1ea44 <__assert_fail@plt+0xd2d0>
   1eaac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eab0:	add	fp, sp, #28
   1eab4:	sub	sp, sp, #52	; 0x34
   1eab8:	str	r1, [sp, #36]	; 0x24
   1eabc:	mov	r4, r0
   1eac0:	ldr	r5, [r0, #4]
   1eac4:	ldr	r6, [r0, #84]	; 0x54
   1eac8:	str	r2, [fp, #-36]	; 0xffffffdc
   1eacc:	mov	r1, r2
   1ead0:	bl	1f088 <__assert_fail@plt+0xd914>
   1ead4:	cmn	r0, #1
   1ead8:	beq	1eb08 <__assert_fail@plt+0xd394>
   1eadc:	ldr	r1, [r4, #116]	; 0x74
   1eae0:	add	r0, r0, r0, lsl #1
   1eae4:	add	r0, r1, r0, lsl #3
   1eae8:	ldr	r2, [sp, #36]	; 0x24
   1eaec:	ldr	r1, [r0]
   1eaf0:	cmp	r1, r2
   1eaf4:	beq	1ee34 <__assert_fail@plt+0xd6c0>
   1eaf8:	ldrb	r1, [r0, #20]
   1eafc:	add	r0, r0, #24
   1eb00:	cmp	r1, #0
   1eb04:	bne	1eaec <__assert_fail@plt+0xd378>
   1eb08:	ldr	r0, [r4, #124]	; 0x7c
   1eb0c:	cmp	r0, #1
   1eb10:	blt	1ee34 <__assert_fail@plt+0xd6c0>
   1eb14:	mov	ip, r6
   1eb18:	ldr	r0, [r6]
   1eb1c:	ldr	r1, [sp, #36]	; 0x24
   1eb20:	ldr	r2, [r0, r1, lsl #3]
   1eb24:	mov	r6, #0
   1eb28:	str	r4, [sp, #28]
   1eb2c:	mov	r3, r5
   1eb30:	str	ip, [sp, #24]
   1eb34:	str	r2, [sp, #20]
   1eb38:	b	1eb58 <__assert_fail@plt+0xd3e4>
   1eb3c:	ldr	ip, [sp, #24]
   1eb40:	ldr	r2, [sp, #20]
   1eb44:	ldr	r6, [sp, #16]
   1eb48:	add	r6, r6, #1
   1eb4c:	ldr	r0, [r4, #124]	; 0x7c
   1eb50:	cmp	r6, r0
   1eb54:	bge	1ee34 <__assert_fail@plt+0xd6c0>
   1eb58:	ldr	r0, [r4, #132]	; 0x84
   1eb5c:	ldr	r7, [r0, r6, lsl #2]
   1eb60:	ldr	r0, [r7, #4]
   1eb64:	ldr	r1, [ip]
   1eb68:	ldr	r0, [r1, r0, lsl #3]
   1eb6c:	cmp	r0, r2
   1eb70:	str	r6, [sp, #16]
   1eb74:	bne	1eb44 <__assert_fail@plt+0xd3d0>
   1eb78:	ldr	r5, [r7]
   1eb7c:	ldr	r0, [r7, #16]
   1eb80:	cmp	r0, #1
   1eb84:	str	r7, [sp, #32]
   1eb88:	mov	sl, #0
   1eb8c:	blt	1ec64 <__assert_fail@plt+0xd4f0>
   1eb90:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1eb94:	mov	r9, r5
   1eb98:	ldr	r0, [r7, #20]
   1eb9c:	ldr	r2, [r0, sl, lsl #2]
   1eba0:	ldr	r0, [r2, #4]
   1eba4:	str	r0, [fp, #-32]	; 0xffffffe0
   1eba8:	sub	r5, r0, r9
   1ebac:	cmp	r5, #1
   1ebb0:	blt	1ebf4 <__assert_fail@plt+0xd480>
   1ebb4:	add	r1, r5, r6
   1ebb8:	ldr	r0, [r4, #28]
   1ebbc:	cmp	r1, r0
   1ebc0:	str	r2, [sp, #40]	; 0x28
   1ebc4:	bgt	1ec38 <__assert_fail@plt+0xd4c4>
   1ebc8:	add	r0, r3, r6
   1ebcc:	add	r1, r3, r9
   1ebd0:	mov	r8, r6
   1ebd4:	mov	r2, r5
   1ebd8:	mov	r7, r3
   1ebdc:	bl	11618 <bcmp@plt>
   1ebe0:	mov	r3, r7
   1ebe4:	cmp	r0, #0
   1ebe8:	ldr	r7, [sp, #32]
   1ebec:	ldr	r2, [sp, #40]	; 0x28
   1ebf0:	bne	1ec6c <__assert_fail@plt+0xd4f8>
   1ebf4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ebf8:	str	r0, [sp]
   1ebfc:	mov	r0, r4
   1ec00:	mov	r1, r7
   1ec04:	ldr	r3, [sp, #36]	; 0x24
   1ec08:	bl	1f1a8 <__assert_fail@plt+0xda34>
   1ec0c:	cmp	r0, #1
   1ec10:	bhi	1ee44 <__assert_fail@plt+0xd6d0>
   1ec14:	add	r6, r5, r6
   1ec18:	add	sl, sl, #1
   1ec1c:	ldr	r3, [r4, #4]
   1ec20:	ldr	r0, [r7, #16]
   1ec24:	cmp	sl, r0
   1ec28:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1ec2c:	mov	r9, r5
   1ec30:	blt	1eb98 <__assert_fail@plt+0xd424>
   1ec34:	b	1ec70 <__assert_fail@plt+0xd4fc>
   1ec38:	ldr	r0, [r4, #48]	; 0x30
   1ec3c:	cmp	r1, r0
   1ec40:	bgt	1ec6c <__assert_fail@plt+0xd4f8>
   1ec44:	mov	r7, r6
   1ec48:	mov	r0, r4
   1ec4c:	bl	1f114 <__assert_fail@plt+0xd9a0>
   1ec50:	cmp	r0, #0
   1ec54:	bne	1ee44 <__assert_fail@plt+0xd6d0>
   1ec58:	ldr	r3, [r4, #4]
   1ec5c:	mov	r6, r7
   1ec60:	b	1ebc8 <__assert_fail@plt+0xd454>
   1ec64:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1ec68:	b	1ec70 <__assert_fail@plt+0xd4fc>
   1ec6c:	mov	r5, r9
   1ec70:	ldr	r0, [r7, #16]
   1ec74:	cmp	sl, r0
   1ec78:	blt	1eb3c <__assert_fail@plt+0xd3c8>
   1ec7c:	cmp	sl, #0
   1ec80:	addne	r5, r5, #1
   1ec84:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ec88:	cmp	r5, r0
   1ec8c:	bgt	1eb3c <__assert_fail@plt+0xd3c8>
   1ec90:	ldr	ip, [sp, #24]
   1ec94:	ldr	r2, [sp, #20]
   1ec98:	b	1ecc8 <__assert_fail@plt+0xd554>
   1ec9c:	ldr	r7, [sp, #32]
   1eca0:	mov	r3, sl
   1eca4:	mov	r6, r9
   1eca8:	ldr	ip, [sp, #24]
   1ecac:	ldr	r2, [sp, #20]
   1ecb0:	add	r1, r5, #1
   1ecb4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ecb8:	cmp	r5, r0
   1ecbc:	mov	r5, r1
   1ecc0:	ldr	r4, [sp, #28]
   1ecc4:	bge	1eb44 <__assert_fail@plt+0xd3d0>
   1ecc8:	ldr	r0, [r7]
   1eccc:	cmp	r5, r0
   1ecd0:	ble	1ecf8 <__assert_fail@plt+0xd584>
   1ecd4:	ldr	r0, [r4, #28]
   1ecd8:	cmp	r6, r0
   1ecdc:	bge	1edf8 <__assert_fail@plt+0xd684>
   1ece0:	ldrb	r0, [r3, r6]
   1ece4:	add	r1, r3, r5
   1ece8:	ldrb	r1, [r1, #-1]
   1ecec:	cmp	r0, r1
   1ecf0:	bne	1eb44 <__assert_fail@plt+0xd3d0>
   1ecf4:	add	r6, r6, #1
   1ecf8:	ldr	r0, [r4, #100]	; 0x64
   1ecfc:	ldr	r0, [r0, r5, lsl #2]
   1ed00:	cmp	r0, #0
   1ed04:	beq	1ecb0 <__assert_fail@plt+0xd53c>
   1ed08:	mov	r9, r6
   1ed0c:	mov	sl, r3
   1ed10:	add	r1, r0, #4
   1ed14:	mov	r0, ip
   1ed18:	mov	r3, #9
   1ed1c:	bl	1f240 <__assert_fail@plt+0xdacc>
   1ed20:	cmn	r0, #1
   1ed24:	beq	1ec9c <__assert_fail@plt+0xd528>
   1ed28:	mov	r4, r0
   1ed2c:	ldr	r1, [sp, #32]
   1ed30:	ldr	r0, [r1, #8]
   1ed34:	cmp	r0, #0
   1ed38:	bne	1ed64 <__assert_fail@plt+0xd5f0>
   1ed3c:	ldr	r0, [r1]
   1ed40:	sub	r0, r5, r0
   1ed44:	add	r1, r0, #1
   1ed48:	mov	r8, #12
   1ed4c:	mov	r0, #12
   1ed50:	bl	23e7c <__assert_fail@plt+0x12708>
   1ed54:	ldr	r1, [sp, #32]
   1ed58:	str	r0, [r1, #8]
   1ed5c:	cmp	r0, #0
   1ed60:	beq	1ee38 <__assert_fail@plt+0xd6c4>
   1ed64:	ldr	r3, [r1]
   1ed68:	ldr	r2, [r1, #4]
   1ed6c:	ldr	r1, [r1, #8]
   1ed70:	stm	sp, {r4, r5}
   1ed74:	mov	r0, #9
   1ed78:	str	r0, [sp, #8]
   1ed7c:	ldr	r0, [sp, #28]
   1ed80:	bl	1f2a0 <__assert_fail@plt+0xdb2c>
   1ed84:	ldr	r7, [sp, #32]
   1ed88:	cmp	r0, #1
   1ed8c:	mov	r3, sl
   1ed90:	mov	r6, r9
   1ed94:	ldr	ip, [sp, #24]
   1ed98:	ldr	r2, [sp, #20]
   1ed9c:	beq	1ecb0 <__assert_fail@plt+0xd53c>
   1eda0:	mov	r8, r0
   1eda4:	cmp	r0, #0
   1eda8:	bne	1ee38 <__assert_fail@plt+0xd6c4>
   1edac:	mov	r0, r7
   1edb0:	mov	r1, r4
   1edb4:	mov	r2, r5
   1edb8:	bl	1f684 <__assert_fail@plt+0xdf10>
   1edbc:	cmp	r0, #0
   1edc0:	beq	1ee4c <__assert_fail@plt+0xd6d8>
   1edc4:	mov	r2, r0
   1edc8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1edcc:	str	r0, [sp]
   1edd0:	ldr	r4, [sp, #28]
   1edd4:	mov	r0, r4
   1edd8:	mov	r1, r7
   1eddc:	ldr	r3, [sp, #36]	; 0x24
   1ede0:	bl	1f1a8 <__assert_fail@plt+0xda34>
   1ede4:	cmp	r0, #1
   1ede8:	bhi	1ee44 <__assert_fail@plt+0xd6d0>
   1edec:	ldr	r3, [r4, #4]
   1edf0:	ldr	r7, [sp, #32]
   1edf4:	b	1eca4 <__assert_fail@plt+0xd530>
   1edf8:	ldr	r0, [r4, #48]	; 0x30
   1edfc:	cmp	r6, r0
   1ee00:	bge	1eb44 <__assert_fail@plt+0xd3d0>
   1ee04:	mov	r9, r6
   1ee08:	add	r1, r6, #1
   1ee0c:	mov	r0, r4
   1ee10:	bl	1e6dc <__assert_fail@plt+0xcf68>
   1ee14:	cmp	r0, #0
   1ee18:	bne	1ee44 <__assert_fail@plt+0xd6d0>
   1ee1c:	ldr	r3, [r4, #4]
   1ee20:	ldr	r7, [sp, #32]
   1ee24:	mov	r6, r9
   1ee28:	ldr	ip, [sp, #24]
   1ee2c:	ldr	r2, [sp, #20]
   1ee30:	b	1ece0 <__assert_fail@plt+0xd56c>
   1ee34:	mov	r8, #0
   1ee38:	mov	r0, r8
   1ee3c:	sub	sp, fp, #28
   1ee40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee44:	mov	r8, r0
   1ee48:	b	1ee38 <__assert_fail@plt+0xd6c4>
   1ee4c:	mov	r8, #12
   1ee50:	b	1ee38 <__assert_fail@plt+0xd6c4>
   1ee54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee58:	add	fp, sp, #28
   1ee5c:	sub	sp, sp, #4
   1ee60:	mov	sl, r2
   1ee64:	mov	r8, r0
   1ee68:	cmp	r1, #0
   1ee6c:	beq	1efa0 <__assert_fail@plt+0xd82c>
   1ee70:	mov	r6, r1
   1ee74:	ldr	r0, [r1, #4]
   1ee78:	cmp	sl, #0
   1ee7c:	beq	1ef8c <__assert_fail@plt+0xd818>
   1ee80:	cmp	r0, #1
   1ee84:	blt	1ef8c <__assert_fail@plt+0xd818>
   1ee88:	ldr	r1, [sl, #4]
   1ee8c:	cmp	r1, #1
   1ee90:	blt	1ef8c <__assert_fail@plt+0xd818>
   1ee94:	add	r0, r1, r0
   1ee98:	str	r0, [r8]
   1ee9c:	lsl	r0, r0, #2
   1eea0:	bl	23ed0 <__assert_fail@plt+0x1275c>
   1eea4:	str	r0, [r8, #8]
   1eea8:	cmp	r0, #0
   1eeac:	beq	1f07c <__assert_fail@plt+0xd908>
   1eeb0:	ldr	r2, [sl, #4]
   1eeb4:	mov	r4, #0
   1eeb8:	cmp	r2, #0
   1eebc:	mov	r0, #0
   1eec0:	movwgt	r0, #1
   1eec4:	ldr	r3, [r6, #4]
   1eec8:	cmp	r3, #1
   1eecc:	blt	1efe0 <__assert_fail@plt+0xd86c>
   1eed0:	mov	r9, #0
   1eed4:	cmp	r2, #1
   1eed8:	blt	1eff0 <__assert_fail@plt+0xd87c>
   1eedc:	mov	ip, #0
   1eee0:	mov	r0, #0
   1eee4:	mov	r4, ip
   1eee8:	mov	r7, r0
   1eeec:	ldr	r0, [sl, #8]
   1eef0:	ldr	r1, [r0, r4, lsl #2]
   1eef4:	ldr	r0, [r6, #8]
   1eef8:	ldr	r5, [r0, r9, lsl #2]
   1eefc:	cmp	r5, r1
   1ef00:	ble	1ef40 <__assert_fail@plt+0xd7cc>
   1ef04:	ldr	r0, [r8, #8]
   1ef08:	str	r1, [r0, r7, lsl #2]
   1ef0c:	ldr	r2, [sl, #4]
   1ef10:	add	r1, r4, #1
   1ef14:	cmp	r2, r1
   1ef18:	mov	r0, #0
   1ef1c:	movwgt	r0, #1
   1ef20:	ldr	r3, [r6, #4]
   1ef24:	cmp	r3, r9
   1ef28:	ble	1f01c <__assert_fail@plt+0xd8a8>
   1ef2c:	add	r7, r7, #1
   1ef30:	cmp	r2, r1
   1ef34:	mov	r4, r1
   1ef38:	bgt	1eeec <__assert_fail@plt+0xd778>
   1ef3c:	b	1eff4 <__assert_fail@plt+0xd880>
   1ef40:	ldr	r0, [r8, #8]
   1ef44:	str	r5, [r0, r7, lsl #2]
   1ef48:	add	lr, r4, #1
   1ef4c:	cmp	r5, r1
   1ef50:	mov	ip, r4
   1ef54:	moveq	ip, lr
   1ef58:	ldr	r2, [sl, #4]
   1ef5c:	cmp	r2, ip
   1ef60:	mov	r0, #0
   1ef64:	movwgt	r0, #1
   1ef68:	add	r9, r9, #1
   1ef6c:	ldr	r3, [r6, #4]
   1ef70:	cmp	r3, r9
   1ef74:	ble	1f064 <__assert_fail@plt+0xd8f0>
   1ef78:	add	r0, r7, #1
   1ef7c:	cmp	r2, ip
   1ef80:	bgt	1eee4 <__assert_fail@plt+0xd770>
   1ef84:	add	r7, r7, #1
   1ef88:	b	1eff4 <__assert_fail@plt+0xd880>
   1ef8c:	cmp	r0, #1
   1ef90:	blt	1efa0 <__assert_fail@plt+0xd82c>
   1ef94:	mov	r0, r8
   1ef98:	mov	r1, r6
   1ef9c:	b	1efbc <__assert_fail@plt+0xd848>
   1efa0:	cmp	sl, #0
   1efa4:	beq	1efc8 <__assert_fail@plt+0xd854>
   1efa8:	ldr	r0, [sl, #4]
   1efac:	cmp	r0, #1
   1efb0:	blt	1efc8 <__assert_fail@plt+0xd854>
   1efb4:	mov	r0, r8
   1efb8:	mov	r1, sl
   1efbc:	sub	sp, fp, #28
   1efc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efc4:	b	1c990 <__assert_fail@plt+0xb21c>
   1efc8:	mov	r0, #0
   1efcc:	str	r0, [r8]
   1efd0:	str	r0, [r8, #4]
   1efd4:	str	r0, [r8, #8]
   1efd8:	sub	sp, fp, #28
   1efdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efe0:	mov	r6, #0
   1efe4:	cmp	r0, #0
   1efe8:	bne	1f02c <__assert_fail@plt+0xd8b8>
   1efec:	b	1f054 <__assert_fail@plt+0xd8e0>
   1eff0:	mov	r7, #0
   1eff4:	ldr	r0, [r8, #8]
   1eff8:	add	r0, r0, r7, lsl #2
   1effc:	ldr	r1, [r6, #8]
   1f000:	add	r1, r1, r9, lsl #2
   1f004:	sub	r2, r3, r9
   1f008:	lsl	r2, r2, #2
   1f00c:	bl	1148c <memcpy@plt>
   1f010:	sub	r0, r7, r9
   1f014:	ldr	r1, [r6, #4]
   1f018:	b	1f050 <__assert_fail@plt+0xd8dc>
   1f01c:	add	r6, r7, #1
   1f020:	add	r4, r4, #1
   1f024:	cmp	r0, #0
   1f028:	beq	1f054 <__assert_fail@plt+0xd8e0>
   1f02c:	ldr	r0, [r8, #8]
   1f030:	add	r0, r0, r6, lsl #2
   1f034:	ldr	r1, [sl, #8]
   1f038:	add	r1, r1, r4, lsl #2
   1f03c:	sub	r2, r2, r4
   1f040:	lsl	r2, r2, #2
   1f044:	bl	1148c <memcpy@plt>
   1f048:	sub	r0, r6, r4
   1f04c:	ldr	r1, [sl, #4]
   1f050:	add	r6, r0, r1
   1f054:	str	r6, [r8, #4]
   1f058:	mov	r0, #0
   1f05c:	sub	sp, fp, #28
   1f060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f064:	cmp	r5, r1
   1f068:	moveq	r4, lr
   1f06c:	add	r6, r7, #1
   1f070:	cmp	r0, #0
   1f074:	bne	1f02c <__assert_fail@plt+0xd8b8>
   1f078:	b	1f054 <__assert_fail@plt+0xd8e0>
   1f07c:	mov	r0, #12
   1f080:	sub	sp, fp, #28
   1f084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f088:	push	{r4, r5, r6, r7, fp, lr}
   1f08c:	add	fp, sp, #16
   1f090:	mov	ip, r0
   1f094:	ldr	lr, [r0, #108]	; 0x6c
   1f098:	cmp	lr, #1
   1f09c:	blt	1f100 <__assert_fail@plt+0xd98c>
   1f0a0:	ldr	r2, [ip, #116]	; 0x74
   1f0a4:	mov	r0, #0
   1f0a8:	mov	r3, #1
   1f0ac:	mov	r4, lr
   1f0b0:	add	r5, r0, r4
   1f0b4:	add	r5, r5, r5, lsr #31
   1f0b8:	asr	r6, r5, #1
   1f0bc:	add	r7, r6, r6, lsl #1
   1f0c0:	add	r7, r2, r7, lsl #3
   1f0c4:	ldr	r7, [r7, #4]
   1f0c8:	cmp	r7, r1
   1f0cc:	addlt	r0, r3, r5, asr #1
   1f0d0:	movge	r4, r6
   1f0d4:	cmp	r0, r4
   1f0d8:	blt	1f0b0 <__assert_fail@plt+0xd93c>
   1f0dc:	cmp	r0, lr
   1f0e0:	bge	1f10c <__assert_fail@plt+0xd998>
   1f0e4:	ldr	r2, [ip, #116]	; 0x74
   1f0e8:	add	r3, r0, r0, lsl #1
   1f0ec:	add	r2, r2, r3, lsl #3
   1f0f0:	ldr	r2, [r2, #4]
   1f0f4:	cmp	r2, r1
   1f0f8:	mvnne	r0, #0
   1f0fc:	pop	{r4, r5, r6, r7, fp, pc}
   1f100:	mov	r0, #0
   1f104:	cmp	r0, lr
   1f108:	blt	1f0e4 <__assert_fail@plt+0xd970>
   1f10c:	mvn	r0, #0
   1f110:	pop	{r4, r5, r6, r7, fp, pc}
   1f114:	push	{r4, r5, r6, r7, fp, lr}
   1f118:	add	fp, sp, #16
   1f11c:	mov	r4, r1
   1f120:	mov	r5, r0
   1f124:	ldr	r0, [r0, #36]	; 0x24
   1f128:	ldr	r7, [r5, #104]	; 0x68
   1f12c:	cmp	r0, r1
   1f130:	bgt	1f140 <__assert_fail@plt+0xd9cc>
   1f134:	ldr	r1, [r5, #48]	; 0x30
   1f138:	cmp	r0, r1
   1f13c:	blt	1f158 <__assert_fail@plt+0xd9e4>
   1f140:	ldr	r0, [r5, #28]
   1f144:	cmp	r0, r4
   1f148:	bgt	1f170 <__assert_fail@plt+0xd9fc>
   1f14c:	ldr	r1, [r5, #48]	; 0x30
   1f150:	cmp	r0, r1
   1f154:	bge	1f170 <__assert_fail@plt+0xd9fc>
   1f158:	add	r1, r4, #1
   1f15c:	mov	r0, r5
   1f160:	bl	1e6dc <__assert_fail@plt+0xcf68>
   1f164:	mov	r6, r0
   1f168:	cmp	r0, #0
   1f16c:	bne	1f1a0 <__assert_fail@plt+0xda2c>
   1f170:	mov	r6, #0
   1f174:	cmp	r7, r4
   1f178:	bge	1f1a0 <__assert_fail@plt+0xda2c>
   1f17c:	sub	r0, r4, r7
   1f180:	lsl	r2, r0, #2
   1f184:	ldr	r0, [r5, #100]	; 0x64
   1f188:	add	r0, r0, r7, lsl #2
   1f18c:	add	r0, r0, #4
   1f190:	mov	r6, #0
   1f194:	mov	r1, #0
   1f198:	bl	1166c <memset@plt>
   1f19c:	str	r4, [r5, #104]	; 0x68
   1f1a0:	mov	r0, r6
   1f1a4:	pop	{r4, r5, r6, r7, fp, pc}
   1f1a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f1ac:	add	fp, sp, #24
   1f1b0:	sub	sp, sp, #16
   1f1b4:	mov	r7, r3
   1f1b8:	mov	r6, r2
   1f1bc:	mov	r8, r1
   1f1c0:	mov	r4, r0
   1f1c4:	ldr	r2, [r2]
   1f1c8:	ldr	r3, [r6, #4]
   1f1cc:	mov	r0, #8
   1f1d0:	str	r0, [sp, #8]
   1f1d4:	ldr	r5, [fp, #8]
   1f1d8:	str	r5, [sp, #4]
   1f1dc:	str	r7, [sp]
   1f1e0:	add	r1, r6, #8
   1f1e4:	mov	r0, r4
   1f1e8:	bl	1f2a0 <__assert_fail@plt+0xdb2c>
   1f1ec:	cmp	r0, #0
   1f1f0:	beq	1f1fc <__assert_fail@plt+0xda88>
   1f1f4:	sub	sp, fp, #24
   1f1f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f1fc:	ldr	r3, [r8]
   1f200:	ldr	r0, [r6, #4]
   1f204:	str	r0, [sp]
   1f208:	mov	r0, r4
   1f20c:	mov	r1, r7
   1f210:	mov	r2, r5
   1f214:	bl	1f708 <__assert_fail@plt+0xdf94>
   1f218:	cmp	r0, #0
   1f21c:	bne	1f1f4 <__assert_fail@plt+0xda80>
   1f220:	ldr	r0, [r6, #4]
   1f224:	add	r0, r0, r5
   1f228:	ldr	r1, [r8]
   1f22c:	sub	r1, r0, r1
   1f230:	mov	r0, r4
   1f234:	sub	sp, fp, #24
   1f238:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f23c:	b	1f114 <__assert_fail@plt+0xd9a0>
   1f240:	push	{r4, r5, fp, lr}
   1f244:	add	fp, sp, #8
   1f248:	ldr	r4, [r1, #4]
   1f24c:	cmp	r4, #1
   1f250:	blt	1f298 <__assert_fail@plt+0xdb24>
   1f254:	ldr	ip, [r0]
   1f258:	ldr	lr, [r1, #8]
   1f25c:	mov	r4, #0
   1f260:	b	1f274 <__assert_fail@plt+0xdb00>
   1f264:	add	r4, r4, #1
   1f268:	ldr	r0, [r1, #4]
   1f26c:	cmp	r4, r0
   1f270:	bge	1f298 <__assert_fail@plt+0xdb24>
   1f274:	ldr	r0, [lr, r4, lsl #2]
   1f278:	add	r5, ip, r0, lsl #3
   1f27c:	ldrb	r5, [r5, #4]
   1f280:	cmp	r5, r3
   1f284:	bne	1f264 <__assert_fail@plt+0xdaf0>
   1f288:	ldr	r5, [ip, r0, lsl #3]
   1f28c:	cmp	r5, r2
   1f290:	bne	1f264 <__assert_fail@plt+0xdaf0>
   1f294:	pop	{r4, r5, fp, pc}
   1f298:	mvn	r0, #0
   1f29c:	pop	{r4, r5, fp, pc}
   1f2a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2a4:	add	fp, sp, #28
   1f2a8:	sub	sp, sp, #52	; 0x34
   1f2ac:	mov	r7, r3
   1f2b0:	mov	r8, r2
   1f2b4:	mov	r6, r1
   1f2b8:	mov	r4, r0
   1f2bc:	ldr	r1, [r0, #84]	; 0x54
   1f2c0:	mov	r0, #0
   1f2c4:	str	r0, [fp, #-32]	; 0xffffffe0
   1f2c8:	str	r1, [sp, #28]
   1f2cc:	ldr	r0, [r1]
   1f2d0:	ldr	r0, [r0, r2, lsl #3]
   1f2d4:	str	r0, [sp, #20]
   1f2d8:	ldr	r0, [r4, #120]	; 0x78
   1f2dc:	ldr	sl, [fp, #12]
   1f2e0:	add	r0, r0, sl
   1f2e4:	ldr	r5, [r6, #4]
   1f2e8:	cmp	r5, r0
   1f2ec:	ble	1f618 <__assert_fail@plt+0xdea4>
   1f2f0:	ldr	r0, [r4, #40]	; 0x28
   1f2f4:	str	r0, [sp, #16]
   1f2f8:	ldr	r2, [r4, #88]	; 0x58
   1f2fc:	ldr	r0, [r4, #100]	; 0x64
   1f300:	str	r0, [sp, #12]
   1f304:	ldr	r9, [r6]
   1f308:	ldr	r0, [r6, #8]
   1f30c:	str	r0, [r4, #100]	; 0x64
   1f310:	cmp	r9, #0
   1f314:	moveq	r9, r7
   1f318:	str	r9, [r4, #40]	; 0x28
   1f31c:	sub	r1, r9, #1
   1f320:	mov	r0, r4
   1f324:	bl	1e198 <__assert_fail@plt+0xca24>
   1f328:	cmp	r9, r7
   1f32c:	mov	r5, r4
   1f330:	bne	1f374 <__assert_fail@plt+0xdc00>
   1f334:	mov	r7, r0
   1f338:	add	r0, sp, #32
   1f33c:	mov	r1, r8
   1f340:	bl	1c0a0 <__assert_fail@plt+0xa92c>
   1f344:	str	r0, [fp, #-32]	; 0xffffffe0
   1f348:	cmp	r0, #0
   1f34c:	bne	1f67c <__assert_fail@plt+0xdf08>
   1f350:	add	r1, sp, #32
   1f354:	ldr	r0, [sp, #28]
   1f358:	ldr	r2, [sp, #20]
   1f35c:	ldr	r3, [fp, #16]
   1f360:	bl	1f804 <__assert_fail@plt+0xe090>
   1f364:	str	r0, [fp, #-32]	; 0xffffffe0
   1f368:	cmp	r0, #0
   1f36c:	beq	1f3e8 <__assert_fail@plt+0xdc74>
   1f370:	b	1f5a4 <__assert_fail@plt+0xde30>
   1f374:	ldr	r1, [r5, #100]	; 0x64
   1f378:	ldr	r8, [r1, r9, lsl #2]
   1f37c:	cmp	r8, #0
   1f380:	beq	1f3a8 <__assert_fail@plt+0xdc34>
   1f384:	ldrb	r1, [r8, #52]	; 0x34
   1f388:	mov	r7, r0
   1f38c:	tst	r1, #64	; 0x40
   1f390:	bne	1f3c4 <__assert_fail@plt+0xdc50>
   1f394:	mov	r0, #0
   1f398:	str	r0, [sp, #36]	; 0x24
   1f39c:	str	r0, [sp, #32]
   1f3a0:	str	r0, [sp, #40]	; 0x28
   1f3a4:	b	1f3dc <__assert_fail@plt+0xdc68>
   1f3a8:	mov	r8, #0
   1f3ac:	str	r8, [sp, #36]	; 0x24
   1f3b0:	str	r8, [sp, #32]
   1f3b4:	str	r8, [sp, #40]	; 0x28
   1f3b8:	cmp	r9, sl
   1f3bc:	blt	1f458 <__assert_fail@plt+0xdce4>
   1f3c0:	b	1f5c0 <__assert_fail@plt+0xde4c>
   1f3c4:	add	r1, r8, #4
   1f3c8:	add	r0, sp, #32
   1f3cc:	bl	1c990 <__assert_fail@plt+0xb21c>
   1f3d0:	str	r0, [fp, #-32]	; 0xffffffe0
   1f3d4:	cmp	r0, #0
   1f3d8:	bne	1f67c <__assert_fail@plt+0xdf08>
   1f3dc:	ldrb	r0, [r8, #52]	; 0x34
   1f3e0:	tst	r0, #64	; 0x40
   1f3e4:	beq	1f450 <__assert_fail@plt+0xdcdc>
   1f3e8:	ldr	r0, [sp, #36]	; 0x24
   1f3ec:	cmp	r0, #0
   1f3f0:	beq	1f41c <__assert_fail@plt+0xdca8>
   1f3f4:	ldr	r0, [fp, #16]
   1f3f8:	str	r0, [sp]
   1f3fc:	add	r1, sp, #32
   1f400:	mov	r0, r5
   1f404:	mov	r2, r9
   1f408:	ldr	r3, [sp, #20]
   1f40c:	bl	1f8fc <__assert_fail@plt+0xe188>
   1f410:	str	r0, [fp, #-32]	; 0xffffffe0
   1f414:	cmp	r0, #0
   1f418:	bne	1f5a4 <__assert_fail@plt+0xde30>
   1f41c:	sub	r0, fp, #32
   1f420:	add	r2, sp, #32
   1f424:	ldr	r1, [sp, #28]
   1f428:	mov	r3, r7
   1f42c:	bl	1ca7c <__assert_fail@plt+0xb308>
   1f430:	mov	r8, r0
   1f434:	cmp	r0, #0
   1f438:	bne	1f448 <__assert_fail@plt+0xdcd4>
   1f43c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f440:	cmp	r0, #0
   1f444:	bne	1f5a4 <__assert_fail@plt+0xde30>
   1f448:	ldr	r0, [r5, #100]	; 0x64
   1f44c:	str	r8, [r0, r9, lsl #2]
   1f450:	cmp	r9, sl
   1f454:	bge	1f5c0 <__assert_fail@plt+0xde4c>
   1f458:	str	r6, [sp, #8]
   1f45c:	rsb	r0, sl, #0
   1f460:	str	r0, [sp, #24]
   1f464:	add	r7, r9, #1
   1f468:	add	r6, sp, #32
   1f46c:	mov	sl, #0
   1f470:	ldr	r4, [sp, #20]
   1f474:	b	1f4a4 <__assert_fail@plt+0xdd30>
   1f478:	ldr	r0, [r5, #100]	; 0x64
   1f47c:	str	r8, [r0, r7, lsl #2]
   1f480:	cmp	r8, #0
   1f484:	mov	r0, #0
   1f488:	addeq	r0, sl, #1
   1f48c:	add	r7, r7, #1
   1f490:	ldr	r1, [sp, #24]
   1f494:	add	r1, r1, r7
   1f498:	cmp	r1, #1
   1f49c:	mov	sl, r0
   1f4a0:	beq	1f5b4 <__assert_fail@plt+0xde40>
   1f4a4:	sub	r9, r7, #1
   1f4a8:	ldr	r0, [r5, #120]	; 0x78
   1f4ac:	cmp	sl, r0
   1f4b0:	bgt	1f5b8 <__assert_fail@plt+0xde44>
   1f4b4:	mov	r0, #0
   1f4b8:	str	r0, [sp, #36]	; 0x24
   1f4bc:	ldr	r0, [r5, #100]	; 0x64
   1f4c0:	ldr	r0, [r0, r7, lsl #2]
   1f4c4:	cmp	r0, #0
   1f4c8:	beq	1f4e4 <__assert_fail@plt+0xdd70>
   1f4cc:	add	r1, r0, #4
   1f4d0:	mov	r0, r6
   1f4d4:	bl	1c58c <__assert_fail@plt+0xae18>
   1f4d8:	str	r0, [fp, #-32]	; 0xffffffe0
   1f4dc:	cmp	r0, #0
   1f4e0:	bne	1f5a4 <__assert_fail@plt+0xde30>
   1f4e4:	cmp	r8, #0
   1f4e8:	beq	1f50c <__assert_fail@plt+0xdd98>
   1f4ec:	add	r2, r8, #16
   1f4f0:	mov	r0, r5
   1f4f4:	mov	r1, r9
   1f4f8:	mov	r3, r6
   1f4fc:	bl	1fb94 <__assert_fail@plt+0xe420>
   1f500:	str	r0, [fp, #-32]	; 0xffffffe0
   1f504:	cmp	r0, #0
   1f508:	bne	1f5a4 <__assert_fail@plt+0xde30>
   1f50c:	ldr	r0, [sp, #36]	; 0x24
   1f510:	cmp	r0, #0
   1f514:	beq	1f568 <__assert_fail@plt+0xddf4>
   1f518:	mov	r8, r5
   1f51c:	ldr	r0, [sp, #28]
   1f520:	mov	r1, r6
   1f524:	mov	r2, r4
   1f528:	ldr	r5, [fp, #16]
   1f52c:	mov	r3, r5
   1f530:	bl	1f804 <__assert_fail@plt+0xe090>
   1f534:	str	r0, [fp, #-32]	; 0xffffffe0
   1f538:	cmp	r0, #0
   1f53c:	bne	1f5a4 <__assert_fail@plt+0xde30>
   1f540:	str	r5, [sp]
   1f544:	mov	r5, r8
   1f548:	mov	r0, r8
   1f54c:	mov	r1, r6
   1f550:	mov	r2, r7
   1f554:	mov	r3, r4
   1f558:	bl	1f8fc <__assert_fail@plt+0xe188>
   1f55c:	str	r0, [fp, #-32]	; 0xffffffe0
   1f560:	cmp	r0, #0
   1f564:	bne	1f5a4 <__assert_fail@plt+0xde30>
   1f568:	ldr	r2, [r5, #88]	; 0x58
   1f56c:	mov	r0, r5
   1f570:	mov	r1, r9
   1f574:	bl	1e198 <__assert_fail@plt+0xca24>
   1f578:	mov	r3, r0
   1f57c:	sub	r0, fp, #32
   1f580:	ldr	r1, [sp, #28]
   1f584:	mov	r2, r6
   1f588:	bl	1ca7c <__assert_fail@plt+0xb308>
   1f58c:	mov	r8, r0
   1f590:	cmp	r0, #0
   1f594:	bne	1f478 <__assert_fail@plt+0xdd04>
   1f598:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f59c:	cmp	r0, #0
   1f5a0:	beq	1f478 <__assert_fail@plt+0xdd04>
   1f5a4:	ldr	r0, [sp, #40]	; 0x28
   1f5a8:	bl	13f1c <__assert_fail@plt+0x27a8>
   1f5ac:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1f5b0:	b	1f60c <__assert_fail@plt+0xde98>
   1f5b4:	sub	r9, r7, #1
   1f5b8:	ldr	r6, [sp, #8]
   1f5bc:	ldr	sl, [fp, #12]
   1f5c0:	ldr	r0, [sp, #40]	; 0x28
   1f5c4:	bl	13f1c <__assert_fail@plt+0x27a8>
   1f5c8:	ldr	r0, [r5, #100]	; 0x64
   1f5cc:	ldr	r0, [r0, sl, lsl #2]
   1f5d0:	str	r9, [r6]
   1f5d4:	ldr	r1, [sp, #16]
   1f5d8:	str	r1, [r5, #40]	; 0x28
   1f5dc:	ldr	r1, [sp, #12]
   1f5e0:	str	r1, [r5, #100]	; 0x64
   1f5e4:	cmp	r0, #0
   1f5e8:	beq	1f608 <__assert_fail@plt+0xde94>
   1f5ec:	ldr	r1, [fp, #8]
   1f5f0:	add	r0, r0, #4
   1f5f4:	bl	1ca0c <__assert_fail@plt+0xb298>
   1f5f8:	mov	r4, #0
   1f5fc:	cmp	r0, #0
   1f600:	moveq	r4, #1
   1f604:	b	1f60c <__assert_fail@plt+0xde98>
   1f608:	mov	r4, #1
   1f60c:	mov	r0, r4
   1f610:	sub	sp, fp, #28
   1f614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f618:	str	r4, [sp, #24]
   1f61c:	mvn	r1, #-2147483648	; 0x80000000
   1f620:	sub	r1, r1, r5
   1f624:	mov	r4, #12
   1f628:	cmp	r1, r0
   1f62c:	ble	1f60c <__assert_fail@plt+0xde98>
   1f630:	add	r0, r0, #1
   1f634:	add	sl, r0, r5
   1f638:	cmn	sl, #-1073741823	; 0xc0000001
   1f63c:	bhi	1f60c <__assert_fail@plt+0xde98>
   1f640:	mov	r9, r0
   1f644:	ldr	r0, [r6, #8]
   1f648:	lsl	r1, sl, #2
   1f64c:	bl	23f00 <__assert_fail@plt+0x1278c>
   1f650:	cmp	r0, #0
   1f654:	beq	1f60c <__assert_fail@plt+0xde98>
   1f658:	str	sl, [r6, #4]
   1f65c:	str	r0, [r6, #8]
   1f660:	add	r0, r0, r5, lsl #2
   1f664:	lsl	r2, r9, #2
   1f668:	mov	r1, #0
   1f66c:	bl	1166c <memset@plt>
   1f670:	ldr	sl, [fp, #12]
   1f674:	ldr	r4, [sp, #24]
   1f678:	b	1f2f0 <__assert_fail@plt+0xdb7c>
   1f67c:	mov	r4, r0
   1f680:	b	1f60c <__assert_fail@plt+0xde98>
   1f684:	push	{r4, r5, r6, r7, fp, lr}
   1f688:	add	fp, sp, #16
   1f68c:	mov	r5, r2
   1f690:	mov	r6, r1
   1f694:	mov	r4, r0
   1f698:	ldr	r0, [r0, #12]
   1f69c:	ldr	r1, [r4, #16]
   1f6a0:	cmp	r1, r0
   1f6a4:	beq	1f6d8 <__assert_fail@plt+0xdf64>
   1f6a8:	mov	r0, #1
   1f6ac:	mov	r1, #20
   1f6b0:	bl	23e7c <__assert_fail@plt+0x12708>
   1f6b4:	cmp	r0, #0
   1f6b8:	ldrne	r1, [r4, #16]
   1f6bc:	ldrne	r2, [r4, #20]
   1f6c0:	strne	r0, [r2, r1, lsl #2]
   1f6c4:	strne	r6, [r0]
   1f6c8:	strne	r5, [r0, #4]
   1f6cc:	addne	r1, r1, #1
   1f6d0:	strne	r1, [r4, #16]
   1f6d4:	pop	{r4, r5, r6, r7, fp, pc}
   1f6d8:	mov	r1, #1
   1f6dc:	orr	r7, r1, r0, lsl #1
   1f6e0:	lsl	r1, r7, #2
   1f6e4:	ldr	r0, [r4, #20]
   1f6e8:	bl	23f00 <__assert_fail@plt+0x1278c>
   1f6ec:	cmp	r0, #0
   1f6f0:	beq	1f700 <__assert_fail@plt+0xdf8c>
   1f6f4:	str	r7, [r4, #12]
   1f6f8:	str	r0, [r4, #20]
   1f6fc:	b	1f6a8 <__assert_fail@plt+0xdf34>
   1f700:	mov	r0, #0
   1f704:	pop	{r4, r5, r6, r7, fp, pc}
   1f708:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f70c:	add	fp, sp, #24
   1f710:	mov	r5, r3
   1f714:	mov	r9, r2
   1f718:	mov	r8, r1
   1f71c:	mov	r4, r0
   1f720:	ldr	r1, [r0, #108]	; 0x6c
   1f724:	ldr	r2, [r0, #112]	; 0x70
   1f728:	cmp	r1, r2
   1f72c:	blt	1f77c <__assert_fail@plt+0xe008>
   1f730:	ldr	r0, [r4, #116]	; 0x74
   1f734:	add	r1, r2, r2, lsl #1
   1f738:	lsl	r1, r1, #4
   1f73c:	bl	23f00 <__assert_fail@plt+0x1278c>
   1f740:	cmp	r0, #0
   1f744:	beq	1f7f4 <__assert_fail@plt+0xe080>
   1f748:	str	r0, [r4, #116]	; 0x74
   1f74c:	ldr	r1, [r4, #108]	; 0x6c
   1f750:	ldr	r2, [r4, #112]	; 0x70
   1f754:	add	r1, r1, r1, lsl #1
   1f758:	add	r0, r0, r1, lsl #3
   1f75c:	add	r1, r2, r2, lsl #1
   1f760:	lsl	r2, r1, #3
   1f764:	mov	r1, #0
   1f768:	bl	1166c <memset@plt>
   1f76c:	ldr	r1, [r4, #108]	; 0x6c
   1f770:	ldr	r0, [r4, #112]	; 0x70
   1f774:	lsl	r0, r0, #1
   1f778:	str	r0, [r4, #112]	; 0x70
   1f77c:	ldr	r2, [fp, #8]
   1f780:	cmp	r1, #1
   1f784:	blt	1f7a8 <__assert_fail@plt+0xe034>
   1f788:	ldr	r0, [r4, #116]	; 0x74
   1f78c:	sub	r3, r1, #1
   1f790:	add	r3, r3, r3, lsl #1
   1f794:	add	r0, r0, r3, lsl #3
   1f798:	ldr	r3, [r0, #4]
   1f79c:	cmp	r3, r9
   1f7a0:	moveq	r3, #1
   1f7a4:	strbeq	r3, [r0, #20]
   1f7a8:	mov	r0, #0
   1f7ac:	cmp	r2, r5
   1f7b0:	mov	r3, #0
   1f7b4:	mvneq	r3, #0
   1f7b8:	ldr	r7, [r4, #116]	; 0x74
   1f7bc:	add	r6, r1, r1, lsl #1
   1f7c0:	str	r8, [r7, r6, lsl #3]!
   1f7c4:	str	r9, [r7, #4]
   1f7c8:	str	r5, [r7, #8]
   1f7cc:	str	r2, [r7, #12]
   1f7d0:	str	r3, [r7, #16]
   1f7d4:	add	r1, r1, #1
   1f7d8:	str	r1, [r4, #108]	; 0x6c
   1f7dc:	strb	r0, [r7, #20]
   1f7e0:	sub	r1, r2, r5
   1f7e4:	ldr	r2, [r4, #120]	; 0x78
   1f7e8:	cmp	r2, r1
   1f7ec:	strlt	r1, [r4, #120]	; 0x78
   1f7f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f7f4:	ldr	r0, [r4, #116]	; 0x74
   1f7f8:	bl	13f1c <__assert_fail@plt+0x27a8>
   1f7fc:	mov	r0, #12
   1f800:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f808:	add	fp, sp, #28
   1f80c:	sub	sp, sp, #20
   1f810:	mov	r9, r3
   1f814:	mov	sl, r2
   1f818:	mov	r4, r1
   1f81c:	mov	r7, r0
   1f820:	ldr	r1, [r1, #4]
   1f824:	add	r0, sp, #8
   1f828:	bl	1c300 <__assert_fail@plt+0xab8c>
   1f82c:	cmp	r0, #0
   1f830:	bne	1f8f4 <__assert_fail@plt+0xe180>
   1f834:	ldr	r0, [r4, #4]
   1f838:	cmp	r0, #1
   1f83c:	blt	1f8bc <__assert_fail@plt+0xe148>
   1f840:	mov	r8, #0
   1f844:	ldr	r0, [r4, #8]
   1f848:	ldr	r5, [r0, r8, lsl #2]
   1f84c:	add	r0, r5, r5, lsl #1
   1f850:	ldr	r1, [r7, #24]
   1f854:	add	r6, r1, r0, lsl #2
   1f858:	mov	r0, r7
   1f85c:	mov	r1, r6
   1f860:	mov	r2, sl
   1f864:	mov	r3, r9
   1f868:	bl	1f240 <__assert_fail@plt+0xdacc>
   1f86c:	cmn	r0, #1
   1f870:	beq	1f898 <__assert_fail@plt+0xe124>
   1f874:	str	r9, [sp]
   1f878:	mov	r0, r7
   1f87c:	add	r1, sp, #8
   1f880:	mov	r2, r5
   1f884:	mov	r3, sl
   1f888:	bl	1fd4c <__assert_fail@plt+0xe5d8>
   1f88c:	cmp	r0, #0
   1f890:	beq	1f8ac <__assert_fail@plt+0xe138>
   1f894:	b	1f8e4 <__assert_fail@plt+0xe170>
   1f898:	add	r0, sp, #8
   1f89c:	mov	r1, r6
   1f8a0:	bl	1c58c <__assert_fail@plt+0xae18>
   1f8a4:	cmp	r0, #0
   1f8a8:	bne	1f8e4 <__assert_fail@plt+0xe170>
   1f8ac:	ldr	r0, [r4, #4]
   1f8b0:	add	r8, r8, #1
   1f8b4:	cmp	r8, r0
   1f8b8:	blt	1f844 <__assert_fail@plt+0xe0d0>
   1f8bc:	ldr	r0, [r4, #8]
   1f8c0:	bl	13f1c <__assert_fail@plt+0x27a8>
   1f8c4:	vldr	d16, [sp, #8]
   1f8c8:	ldr	r0, [sp, #16]
   1f8cc:	str	r0, [r4, #8]
   1f8d0:	vstr	d16, [r4]
   1f8d4:	mov	r5, #0
   1f8d8:	mov	r0, r5
   1f8dc:	sub	sp, fp, #28
   1f8e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8e4:	mov	r5, r0
   1f8e8:	ldr	r0, [sp, #16]
   1f8ec:	bl	13f1c <__assert_fail@plt+0x27a8>
   1f8f0:	b	1f8d8 <__assert_fail@plt+0xe164>
   1f8f4:	mov	r5, r0
   1f8f8:	b	1f8d8 <__assert_fail@plt+0xe164>
   1f8fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f900:	add	fp, sp, #28
   1f904:	sub	sp, sp, #44	; 0x2c
   1f908:	str	r3, [sp, #8]
   1f90c:	mov	sl, r1
   1f910:	ldr	r6, [r0, #84]	; 0x54
   1f914:	str	r0, [sp, #16]
   1f918:	str	r2, [sp, #24]
   1f91c:	mov	r1, r2
   1f920:	bl	1f088 <__assert_fail@plt+0xd914>
   1f924:	mov	r1, #0
   1f928:	cmn	r0, #1
   1f92c:	beq	1fb88 <__assert_fail@plt+0xe414>
   1f930:	add	r1, r0, r0, lsl #1
   1f934:	add	r7, sp, #28
   1f938:	str	r6, [sp, #20]
   1f93c:	str	r1, [sp, #4]
   1f940:	ldr	r0, [sp, #16]
   1f944:	ldr	r0, [r0, #116]	; 0x74
   1f948:	add	r0, r0, r1, lsl #3
   1f94c:	add	r0, r0, #12
   1f950:	b	1f96c <__assert_fail@plt+0xe1f8>
   1f954:	ldr	r6, [sp, #20]
   1f958:	add	r7, sp, #28
   1f95c:	add	r0, r9, #24
   1f960:	ldrb	r1, [r9, #8]
   1f964:	cmp	r1, #0
   1f968:	beq	1fb7c <__assert_fail@plt+0xe408>
   1f96c:	mov	r9, r0
   1f970:	ldr	r1, [r0, #-12]
   1f974:	mov	r0, sl
   1f978:	bl	1ca0c <__assert_fail@plt+0xb298>
   1f97c:	cmp	r0, #0
   1f980:	beq	1f95c <__assert_fail@plt+0xe1e8>
   1f984:	ldmda	r9, {r0, r1}
   1f988:	ldr	r2, [sp, #24]
   1f98c:	add	r1, r1, r2
   1f990:	sub	r5, r1, r0
   1f994:	cmp	r5, r2
   1f998:	bne	1fa4c <__assert_fail@plt+0xe2d8>
   1f99c:	ldr	r0, [r6, #20]
   1f9a0:	ldr	r1, [r9, #-12]
   1f9a4:	add	r1, r1, r1, lsl #1
   1f9a8:	add	r0, r0, r1, lsl #2
   1f9ac:	ldr	r0, [r0, #8]
   1f9b0:	ldr	r4, [r0]
   1f9b4:	mov	r0, sl
   1f9b8:	mov	r1, r4
   1f9bc:	bl	1ca0c <__assert_fail@plt+0xb298>
   1f9c0:	mov	r1, #4
   1f9c4:	cmp	r0, #0
   1f9c8:	bne	1fb48 <__assert_fail@plt+0xe3d4>
   1f9cc:	mov	r0, r7
   1f9d0:	mov	r1, r4
   1f9d4:	bl	1c0a0 <__assert_fail@plt+0xa92c>
   1f9d8:	mov	r4, r7
   1f9dc:	mov	r8, r0
   1f9e0:	str	r0, [fp, #-32]	; 0xffffffe0
   1f9e4:	mov	r0, r6
   1f9e8:	mov	r1, r7
   1f9ec:	ldr	r2, [sp, #8]
   1f9f0:	ldr	r3, [fp, #8]
   1f9f4:	bl	1f804 <__assert_fail@plt+0xe090>
   1f9f8:	mov	r7, r0
   1f9fc:	mov	r0, sl
   1fa00:	mov	r1, r4
   1fa04:	bl	1c58c <__assert_fail@plt+0xae18>
   1fa08:	mov	r4, r0
   1fa0c:	ldr	r0, [sp, #36]	; 0x24
   1fa10:	bl	13f1c <__assert_fail@plt+0x27a8>
   1fa14:	orr	r0, r7, r8
   1fa18:	orrs	r0, r0, r4
   1fa1c:	mov	r1, #2
   1fa20:	beq	1fb48 <__assert_fail@plt+0xe3d4>
   1fa24:	cmp	r7, #0
   1fa28:	movne	r4, r7
   1fa2c:	cmp	r8, #0
   1fa30:	movne	r4, r8
   1fa34:	str	r4, [fp, #-32]	; 0xffffffe0
   1fa38:	mov	r1, #1
   1fa3c:	str	r4, [sp, #12]
   1fa40:	cmp	r1, #0
   1fa44:	bne	1fb50 <__assert_fail@plt+0xe3dc>
   1fa48:	b	1f954 <__assert_fail@plt+0xe1e0>
   1fa4c:	ldr	r0, [sp, #16]
   1fa50:	ldr	r0, [r0, #100]	; 0x64
   1fa54:	ldr	r0, [r0, r5, lsl #2]
   1fa58:	ldr	r1, [r9, #-12]
   1fa5c:	ldr	r2, [r6, #12]
   1fa60:	ldr	r4, [r2, r1, lsl #2]
   1fa64:	cmp	r0, #0
   1fa68:	beq	1fae0 <__assert_fail@plt+0xe36c>
   1fa6c:	add	r8, r0, #4
   1fa70:	mov	r0, r8
   1fa74:	mov	r1, r4
   1fa78:	bl	1ca0c <__assert_fail@plt+0xb298>
   1fa7c:	mov	r1, #4
   1fa80:	cmp	r0, #0
   1fa84:	bne	1fb48 <__assert_fail@plt+0xe3d4>
   1fa88:	mov	r0, r7
   1fa8c:	mov	r1, r8
   1fa90:	bl	1c990 <__assert_fail@plt+0xb21c>
   1fa94:	mov	r8, r0
   1fa98:	str	r0, [fp, #-32]	; 0xffffffe0
   1fa9c:	mov	r0, r7
   1faa0:	mov	r1, r4
   1faa4:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1faa8:	cmp	r8, #0
   1faac:	bne	1fab8 <__assert_fail@plt+0xe344>
   1fab0:	cmp	r0, #0
   1fab4:	bne	1faf8 <__assert_fail@plt+0xe384>
   1fab8:	ldr	r0, [sp, #36]	; 0x24
   1fabc:	bl	13f1c <__assert_fail@plt+0x27a8>
   1fac0:	cmp	r8, #0
   1fac4:	movweq	r8, #12
   1fac8:	str	r8, [fp, #-32]	; 0xffffffe0
   1facc:	mov	r1, #1
   1fad0:	str	r8, [sp, #12]
   1fad4:	cmp	r1, #0
   1fad8:	bne	1fb50 <__assert_fail@plt+0xe3dc>
   1fadc:	b	1f954 <__assert_fail@plt+0xe1e0>
   1fae0:	mov	r0, r7
   1fae4:	mov	r1, r4
   1fae8:	bl	1c0a0 <__assert_fail@plt+0xa92c>
   1faec:	str	r0, [fp, #-32]	; 0xffffffe0
   1faf0:	cmp	r0, #0
   1faf4:	bne	1fb64 <__assert_fail@plt+0xe3f0>
   1faf8:	sub	r0, fp, #32
   1fafc:	mov	r1, r6
   1fb00:	mov	r2, r7
   1fb04:	bl	1fe58 <__assert_fail@plt+0xe6e4>
   1fb08:	ldr	r4, [sp, #16]
   1fb0c:	ldr	r1, [r4, #100]	; 0x64
   1fb10:	str	r0, [r1, r5, lsl #2]
   1fb14:	ldr	r0, [sp, #36]	; 0x24
   1fb18:	bl	13f1c <__assert_fail@plt+0x27a8>
   1fb1c:	ldr	r0, [r4, #100]	; 0x64
   1fb20:	ldr	r0, [r0, r5, lsl #2]
   1fb24:	clz	r0, r0
   1fb28:	lsr	r1, r0, #5
   1fb2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1fb30:	cmp	r0, #0
   1fb34:	mov	r2, r0
   1fb38:	movwne	r2, #1
   1fb3c:	ands	r1, r1, r2
   1fb40:	ldreq	r0, [sp, #12]
   1fb44:	str	r0, [sp, #12]
   1fb48:	cmp	r1, #0
   1fb4c:	beq	1f954 <__assert_fail@plt+0xe1e0>
   1fb50:	cmp	r1, #4
   1fb54:	ldr	r6, [sp, #20]
   1fb58:	add	r7, sp, #28
   1fb5c:	beq	1f95c <__assert_fail@plt+0xe1e8>
   1fb60:	b	1fb6c <__assert_fail@plt+0xe3f8>
   1fb64:	mov	r1, #1
   1fb68:	b	1fb44 <__assert_fail@plt+0xe3d0>
   1fb6c:	cmp	r1, #2
   1fb70:	bne	1fb84 <__assert_fail@plt+0xe410>
   1fb74:	ldr	r1, [sp, #4]
   1fb78:	b	1f940 <__assert_fail@plt+0xe1cc>
   1fb7c:	mov	r1, #0
   1fb80:	b	1fb88 <__assert_fail@plt+0xe414>
   1fb84:	ldr	r1, [sp, #12]
   1fb88:	mov	r0, r1
   1fb8c:	sub	sp, fp, #28
   1fb90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb98:	add	fp, sp, #28
   1fb9c:	sub	sp, sp, #36	; 0x24
   1fba0:	str	r1, [sp, #12]
   1fba4:	mov	r7, r0
   1fba8:	ldr	r4, [r0, #84]	; 0x54
   1fbac:	mov	r9, #0
   1fbb0:	str	r9, [sp, #32]
   1fbb4:	str	r9, [sp, #20]
   1fbb8:	str	r9, [sp, #16]
   1fbbc:	str	r9, [sp, #24]
   1fbc0:	ldr	r0, [r2, #4]
   1fbc4:	cmp	r0, #1
   1fbc8:	blt	1fd28 <__assert_fail@plt+0xe5b4>
   1fbcc:	mov	r8, r3
   1fbd0:	mov	r5, r2
   1fbd4:	mov	r6, #0
   1fbd8:	str	r3, [sp, #4]
   1fbdc:	str	r2, [sp, #8]
   1fbe0:	b	1fc1c <__assert_fail@plt+0xe4a8>
   1fbe4:	cmp	r0, #0
   1fbe8:	mov	r7, r5
   1fbec:	ldr	r5, [sp, #8]
   1fbf0:	beq	1fc38 <__assert_fail@plt+0xe4c4>
   1fbf4:	ldr	r0, [r4, #12]
   1fbf8:	ldr	r1, [r0, sl, lsl #2]
   1fbfc:	mov	r0, r8
   1fc00:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1fc04:	cmp	r0, #0
   1fc08:	beq	1fd3c <__assert_fail@plt+0xe5c8>
   1fc0c:	add	r6, r6, #1
   1fc10:	ldr	r0, [r5, #4]
   1fc14:	cmp	r6, r0
   1fc18:	bge	1fd24 <__assert_fail@plt+0xe5b0>
   1fc1c:	ldr	r0, [r5, #8]
   1fc20:	ldr	sl, [r0, r6, lsl #2]
   1fc24:	ldr	r0, [r4]
   1fc28:	add	r0, r0, sl, lsl #3
   1fc2c:	ldrb	r0, [r0, #6]
   1fc30:	tst	r0, #16
   1fc34:	bne	1fc58 <__assert_fail@plt+0xe4e4>
   1fc38:	ldr	r0, [r4]
   1fc3c:	add	r1, r0, sl, lsl #3
   1fc40:	mov	r0, r7
   1fc44:	ldr	r2, [sp, #12]
   1fc48:	bl	20344 <__assert_fail@plt+0xebd0>
   1fc4c:	cmp	r0, #0
   1fc50:	bne	1fbf4 <__assert_fail@plt+0xe480>
   1fc54:	b	1fc0c <__assert_fail@plt+0xe498>
   1fc58:	mov	r0, r4
   1fc5c:	mov	r1, sl
   1fc60:	mov	r2, r7
   1fc64:	mov	r5, r7
   1fc68:	ldr	r7, [sp, #12]
   1fc6c:	mov	r3, r7
   1fc70:	bl	20068 <__assert_fail@plt+0xe8f4>
   1fc74:	cmp	r0, #2
   1fc78:	blt	1fbe4 <__assert_fail@plt+0xe470>
   1fc7c:	add	r8, r0, r7
   1fc80:	ldr	r0, [r5, #100]	; 0x64
   1fc84:	ldr	r0, [r0, r8, lsl #2]
   1fc88:	ldr	r1, [r4, #12]
   1fc8c:	ldr	r2, [r1, sl, lsl #2]
   1fc90:	mov	r1, #0
   1fc94:	str	r1, [sp, #20]
   1fc98:	cmp	r0, #0
   1fc9c:	mov	r7, r5
   1fca0:	add	r5, sp, #16
   1fca4:	beq	1fcd0 <__assert_fail@plt+0xe55c>
   1fca8:	add	r1, r0, #4
   1fcac:	mov	r0, r5
   1fcb0:	mov	r9, r5
   1fcb4:	mov	r5, r2
   1fcb8:	bl	1c58c <__assert_fail@plt+0xae18>
   1fcbc:	mov	r2, r5
   1fcc0:	mov	r5, r9
   1fcc4:	str	r0, [sp, #32]
   1fcc8:	cmp	r0, #0
   1fccc:	bne	1fd44 <__assert_fail@plt+0xe5d0>
   1fcd0:	mov	r0, r5
   1fcd4:	mov	r1, r2
   1fcd8:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1fcdc:	cmp	r0, #0
   1fce0:	beq	1fd3c <__assert_fail@plt+0xe5c8>
   1fce4:	add	r0, sp, #32
   1fce8:	mov	r1, r4
   1fcec:	mov	r2, r5
   1fcf0:	bl	1fe58 <__assert_fail@plt+0xe6e4>
   1fcf4:	ldr	r1, [r7, #100]	; 0x64
   1fcf8:	str	r0, [r1, r8, lsl #2]
   1fcfc:	ldr	r0, [r7, #100]	; 0x64
   1fd00:	ldr	r0, [r0, r8, lsl #2]
   1fd04:	cmp	r0, #0
   1fd08:	ldr	r8, [sp, #4]
   1fd0c:	ldr	r5, [sp, #8]
   1fd10:	bne	1fbf4 <__assert_fail@plt+0xe480>
   1fd14:	ldr	r9, [sp, #32]
   1fd18:	cmp	r9, #0
   1fd1c:	beq	1fbf4 <__assert_fail@plt+0xe480>
   1fd20:	b	1fd28 <__assert_fail@plt+0xe5b4>
   1fd24:	mov	r9, #0
   1fd28:	ldr	r0, [sp, #24]
   1fd2c:	bl	13f1c <__assert_fail@plt+0x27a8>
   1fd30:	mov	r0, r9
   1fd34:	sub	sp, fp, #28
   1fd38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd3c:	mov	r9, #12
   1fd40:	b	1fd28 <__assert_fail@plt+0xe5b4>
   1fd44:	mov	r9, r0
   1fd48:	b	1fd28 <__assert_fail@plt+0xe5b4>
   1fd4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fd50:	add	fp, sp, #24
   1fd54:	sub	sp, sp, #8
   1fd58:	mov	r5, r3
   1fd5c:	mov	r7, r2
   1fd60:	mov	r4, r1
   1fd64:	mov	r6, r0
   1fd68:	mov	r0, r1
   1fd6c:	mov	r1, r2
   1fd70:	bl	1ca0c <__assert_fail@plt+0xb298>
   1fd74:	cmp	r0, #0
   1fd78:	beq	1fd88 <__assert_fail@plt+0xe614>
   1fd7c:	mov	r0, #0
   1fd80:	sub	sp, fp, #24
   1fd84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fd88:	ldr	r8, [fp, #8]
   1fd8c:	b	1fdd8 <__assert_fail@plt+0xe664>
   1fd90:	ldr	r0, [r0, #8]
   1fd94:	ldr	r2, [r0, #4]
   1fd98:	str	r8, [sp]
   1fd9c:	mov	r0, r6
   1fda0:	mov	r1, r4
   1fda4:	mov	r3, r5
   1fda8:	bl	1fd4c <__assert_fail@plt+0xe5d8>
   1fdac:	cmp	r0, #0
   1fdb0:	bne	1fd80 <__assert_fail@plt+0xe60c>
   1fdb4:	ldr	r0, [r6, #20]
   1fdb8:	add	r0, r0, r7, lsl #2
   1fdbc:	ldr	r0, [r0, #8]
   1fdc0:	ldr	r7, [r0]
   1fdc4:	mov	r0, r4
   1fdc8:	mov	r1, r7
   1fdcc:	bl	1ca0c <__assert_fail@plt+0xb298>
   1fdd0:	cmp	r0, #0
   1fdd4:	bne	1fd7c <__assert_fail@plt+0xe608>
   1fdd8:	ldr	r0, [r6]
   1fddc:	add	r1, r0, r7, lsl #3
   1fde0:	ldrb	r1, [r1, #4]
   1fde4:	cmp	r1, r8
   1fde8:	bne	1fdf8 <__assert_fail@plt+0xe684>
   1fdec:	ldr	r0, [r0, r7, lsl #3]
   1fdf0:	cmp	r0, r5
   1fdf4:	beq	1fe30 <__assert_fail@plt+0xe6bc>
   1fdf8:	mov	r0, r4
   1fdfc:	mov	r1, r7
   1fe00:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1fe04:	cmp	r0, #0
   1fe08:	beq	1fe4c <__assert_fail@plt+0xe6d8>
   1fe0c:	ldr	r0, [r6, #20]
   1fe10:	add	r7, r7, r7, lsl #1
   1fe14:	add	r0, r0, r7, lsl #2
   1fe18:	ldr	r1, [r0, #4]
   1fe1c:	cmp	r1, #2
   1fe20:	beq	1fd90 <__assert_fail@plt+0xe61c>
   1fe24:	cmp	r1, #0
   1fe28:	bne	1fdb4 <__assert_fail@plt+0xe640>
   1fe2c:	b	1fd7c <__assert_fail@plt+0xe608>
   1fe30:	cmp	r8, #9
   1fe34:	bne	1fd7c <__assert_fail@plt+0xe608>
   1fe38:	mov	r0, r4
   1fe3c:	mov	r1, r7
   1fe40:	bl	1c7a4 <__assert_fail@plt+0xb030>
   1fe44:	cmp	r0, #0
   1fe48:	bne	1fd7c <__assert_fail@plt+0xe608>
   1fe4c:	mov	r0, #12
   1fe50:	sub	sp, fp, #24
   1fe54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fe58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe5c:	add	fp, sp, #28
   1fe60:	sub	sp, sp, #4
   1fe64:	mov	r9, r1
   1fe68:	ldr	r1, [r2, #4]
   1fe6c:	cmp	r1, #0
   1fe70:	beq	1ff1c <__assert_fail@plt+0xe7a8>
   1fe74:	mov	sl, r2
   1fe78:	str	r0, [sp]
   1fe7c:	mov	r6, #0
   1fe80:	mov	r0, r2
   1fe84:	mov	r1, #0
   1fe88:	bl	1cb78 <__assert_fail@plt+0xb404>
   1fe8c:	mov	r7, r0
   1fe90:	ldr	r0, [r9, #32]
   1fe94:	ldr	r1, [r9, #68]	; 0x44
   1fe98:	and	r1, r1, r7
   1fe9c:	add	r1, r1, r1, lsl #1
   1fea0:	mov	r5, r0
   1fea4:	ldr	r2, [r5, r1, lsl #2]!
   1fea8:	cmp	r2, #1
   1feac:	blt	1fef4 <__assert_fail@plt+0xe780>
   1feb0:	add	r0, r0, r1, lsl #2
   1feb4:	ldr	r8, [r0, #8]
   1feb8:	b	1fecc <__assert_fail@plt+0xe758>
   1febc:	ldr	r0, [r5]
   1fec0:	add	r6, r6, #1
   1fec4:	cmp	r6, r0
   1fec8:	bge	1fef4 <__assert_fail@plt+0xe780>
   1fecc:	ldr	r4, [r8, r6, lsl #2]
   1fed0:	ldr	r0, [r4]
   1fed4:	cmp	r7, r0
   1fed8:	bne	1febc <__assert_fail@plt+0xe748>
   1fedc:	add	r0, r4, #4
   1fee0:	mov	r1, sl
   1fee4:	bl	1cba4 <__assert_fail@plt+0xb430>
   1fee8:	cmp	r0, #0
   1feec:	beq	1febc <__assert_fail@plt+0xe748>
   1fef0:	b	1ff10 <__assert_fail@plt+0xe79c>
   1fef4:	mov	r0, r9
   1fef8:	mov	r1, sl
   1fefc:	mov	r2, r7
   1ff00:	bl	1ff3c <__assert_fail@plt+0xe7c8>
   1ff04:	mov	r4, r0
   1ff08:	cmp	r0, #0
   1ff0c:	beq	1ff28 <__assert_fail@plt+0xe7b4>
   1ff10:	mov	r0, r4
   1ff14:	sub	sp, fp, #28
   1ff18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff1c:	mov	r4, #0
   1ff20:	str	r4, [r0]
   1ff24:	b	1ff10 <__assert_fail@plt+0xe79c>
   1ff28:	mov	r0, #12
   1ff2c:	ldr	r1, [sp]
   1ff30:	str	r0, [r1]
   1ff34:	mov	r4, #0
   1ff38:	b	1ff10 <__assert_fail@plt+0xe79c>
   1ff3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ff40:	add	fp, sp, #24
   1ff44:	mov	r8, r2
   1ff48:	mov	r7, r1
   1ff4c:	mov	r9, r0
   1ff50:	mov	r0, #56	; 0x38
   1ff54:	mov	r1, #1
   1ff58:	bl	23e7c <__assert_fail@plt+0x12708>
   1ff5c:	cmp	r0, #0
   1ff60:	beq	2005c <__assert_fail@plt+0xe8e8>
   1ff64:	mov	r4, r0
   1ff68:	add	r5, r0, #4
   1ff6c:	mov	r0, r5
   1ff70:	mov	r1, r7
   1ff74:	bl	1c990 <__assert_fail@plt+0xb21c>
   1ff78:	cmp	r0, #0
   1ff7c:	bne	20048 <__assert_fail@plt+0xe8d4>
   1ff80:	str	r5, [r4, #40]	; 0x28
   1ff84:	ldr	r0, [r7, #4]
   1ff88:	cmp	r0, #1
   1ff8c:	blt	20028 <__assert_fail@plt+0xe8b4>
   1ff90:	mov	r0, #0
   1ff94:	movw	ip, #65280	; 0xff00
   1ff98:	movt	ip, #3
   1ff9c:	add	r2, ip, #255	; 0xff
   1ffa0:	mov	lr, #32
   1ffa4:	b	1ffcc <__assert_fail@plt+0xe858>
   1ffa8:	ldr	r3, [r5]
   1ffac:	tst	r3, ip
   1ffb0:	beq	1ffbc <__assert_fail@plt+0xe848>
   1ffb4:	orr	r1, r1, #128	; 0x80
   1ffb8:	strb	r1, [r4, #52]	; 0x34
   1ffbc:	ldr	r1, [r7, #4]
   1ffc0:	add	r0, r0, #1
   1ffc4:	cmp	r0, r1
   1ffc8:	bge	20028 <__assert_fail@plt+0xe8b4>
   1ffcc:	ldr	r1, [r7, #8]
   1ffd0:	ldr	r1, [r1, r0, lsl #2]
   1ffd4:	ldr	r3, [r9]
   1ffd8:	add	r5, r3, r1, lsl #3
   1ffdc:	ldr	r3, [r5, #4]!
   1ffe0:	and	r1, r3, r2
   1ffe4:	cmp	r1, #1
   1ffe8:	beq	1ffbc <__assert_fail@plt+0xe848>
   1ffec:	and	r1, lr, r3, lsr #15
   1fff0:	ldrb	r6, [r4, #52]	; 0x34
   1fff4:	orr	r1, r6, r1
   1fff8:	strb	r1, [r4, #52]	; 0x34
   1fffc:	uxtb	r3, r3
   20000:	cmp	r3, #12
   20004:	beq	1ffb4 <__assert_fail@plt+0xe840>
   20008:	cmp	r3, #4
   2000c:	beq	20020 <__assert_fail@plt+0xe8ac>
   20010:	cmp	r3, #2
   20014:	bne	1ffa8 <__assert_fail@plt+0xe834>
   20018:	orr	r1, r1, #16
   2001c:	b	1ffb8 <__assert_fail@plt+0xe844>
   20020:	orr	r1, r1, #64	; 0x40
   20024:	b	1ffb8 <__assert_fail@plt+0xe844>
   20028:	mov	r0, r9
   2002c:	mov	r1, r4
   20030:	mov	r2, r8
   20034:	bl	1ce68 <__assert_fail@plt+0xb6f4>
   20038:	cmp	r0, #0
   2003c:	bne	20054 <__assert_fail@plt+0xe8e0>
   20040:	mov	r0, r4
   20044:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20048:	mov	r0, r4
   2004c:	bl	13f1c <__assert_fail@plt+0x27a8>
   20050:	b	2005c <__assert_fail@plt+0xe8e8>
   20054:	mov	r0, r4
   20058:	bl	17390 <__assert_fail@plt+0x5c1c>
   2005c:	mov	r4, #0
   20060:	mov	r0, r4
   20064:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2006c:	add	fp, sp, #28
   20070:	sub	sp, sp, #4
   20074:	mov	sl, r3
   20078:	mov	r7, r2
   2007c:	mov	r5, r0
   20080:	ldr	r6, [r0]
   20084:	add	r0, r6, r1, lsl #3
   20088:	ldrb	r8, [r0, #4]
   2008c:	cmp	r8, #7
   20090:	beq	20234 <__assert_fail@plt+0xeac0>
   20094:	mov	r4, r1
   20098:	mov	r0, r7
   2009c:	mov	r1, sl
   200a0:	bl	1b424 <__assert_fail@plt+0x9cb0>
   200a4:	mov	r9, r0
   200a8:	mov	r2, #0
   200ac:	cmp	r8, #5
   200b0:	bne	200f4 <__assert_fail@plt+0xe980>
   200b4:	cmp	r9, #2
   200b8:	blt	20220 <__assert_fail@plt+0xeaac>
   200bc:	ldr	r0, [r5, #128]	; 0x80
   200c0:	tst	r0, #64	; 0x40
   200c4:	bne	200d8 <__assert_fail@plt+0xe964>
   200c8:	ldr	r1, [r7, #4]
   200cc:	ldrb	r1, [r1, sl]
   200d0:	cmp	r1, #10
   200d4:	beq	20220 <__assert_fail@plt+0xeaac>
   200d8:	tst	r0, #128	; 0x80
   200dc:	beq	2021c <__assert_fail@plt+0xeaa8>
   200e0:	ldr	r0, [r7, #4]
   200e4:	ldrb	r0, [r0, sl]
   200e8:	cmp	r0, #0
   200ec:	movne	r2, r9
   200f0:	b	20220 <__assert_fail@plt+0xeaac>
   200f4:	cmp	r8, #6
   200f8:	bne	20220 <__assert_fail@plt+0xeaac>
   200fc:	cmp	r9, #2
   20100:	blt	20220 <__assert_fail@plt+0xeaac>
   20104:	ldr	r4, [r6, r4, lsl #3]
   20108:	ldr	r0, [r4, #32]
   2010c:	cmp	r0, #0
   20110:	bne	2012c <__assert_fail@plt+0xe9b8>
   20114:	ldr	r0, [r4, #36]	; 0x24
   20118:	cmp	r0, #0
   2011c:	bne	2012c <__assert_fail@plt+0xe9b8>
   20120:	ldr	r0, [r4, #20]
   20124:	cmp	r0, #0
   20128:	beq	2022c <__assert_fail@plt+0xeab8>
   2012c:	mov	r0, r7
   20130:	mov	r1, sl
   20134:	bl	19190 <__assert_fail@plt+0x7a1c>
   20138:	mov	r6, r0
   2013c:	ldr	r0, [r4, #20]
   20140:	cmp	r0, #1
   20144:	blt	2016c <__assert_fail@plt+0xe9f8>
   20148:	ldr	r0, [r4]
   2014c:	mov	r1, #0
   20150:	ldr	r2, [r0, r1, lsl #2]
   20154:	cmp	r6, r2
   20158:	beq	201e8 <__assert_fail@plt+0xea74>
   2015c:	add	r1, r1, #1
   20160:	ldr	r2, [r4, #20]
   20164:	cmp	r1, r2
   20168:	blt	20150 <__assert_fail@plt+0xe9dc>
   2016c:	ldr	r0, [r4, #36]	; 0x24
   20170:	cmp	r0, #1
   20174:	blt	201a4 <__assert_fail@plt+0xea30>
   20178:	mov	r5, #0
   2017c:	ldr	r0, [r4, #12]
   20180:	ldr	r1, [r0, r5, lsl #2]
   20184:	mov	r0, r6
   20188:	bl	11414 <iswctype@plt>
   2018c:	cmp	r0, #0
   20190:	bne	201e8 <__assert_fail@plt+0xea74>
   20194:	add	r5, r5, #1
   20198:	ldr	r0, [r4, #36]	; 0x24
   2019c:	cmp	r5, r0
   201a0:	blt	2017c <__assert_fail@plt+0xea08>
   201a4:	ldr	r0, [r4, #32]
   201a8:	cmp	r0, #1
   201ac:	blt	201f0 <__assert_fail@plt+0xea7c>
   201b0:	ldr	r0, [r4, #4]
   201b4:	mov	r1, #0
   201b8:	b	201cc <__assert_fail@plt+0xea58>
   201bc:	add	r1, r1, #1
   201c0:	ldr	r2, [r4, #32]
   201c4:	cmp	r1, r2
   201c8:	bge	201f0 <__assert_fail@plt+0xea7c>
   201cc:	ldr	r2, [r0, r1, lsl #2]
   201d0:	cmp	r2, r6
   201d4:	bhi	201bc <__assert_fail@plt+0xea48>
   201d8:	ldr	r2, [r4, #8]
   201dc:	ldr	r2, [r2, r1, lsl #2]
   201e0:	cmp	r6, r2
   201e4:	bhi	201bc <__assert_fail@plt+0xea48>
   201e8:	mov	r0, r9
   201ec:	b	201f4 <__assert_fail@plt+0xea80>
   201f0:	mov	r0, #0
   201f4:	ldrb	r1, [r4, #16]
   201f8:	tst	r1, #1
   201fc:	mov	r2, #0
   20200:	bne	2020c <__assert_fail@plt+0xea98>
   20204:	mov	r2, r0
   20208:	b	20220 <__assert_fail@plt+0xeaac>
   2020c:	cmp	r0, #0
   20210:	bgt	20220 <__assert_fail@plt+0xeaac>
   20214:	cmp	r9, #1
   20218:	movle	r9, #1
   2021c:	mov	r2, r9
   20220:	mov	r0, r2
   20224:	sub	sp, fp, #28
   20228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2022c:	mov	r6, #0
   20230:	b	2013c <__assert_fail@plt+0xe9c8>
   20234:	ldr	r0, [r7, #4]
   20238:	ldrb	r5, [r0, sl]
   2023c:	mov	r2, #0
   20240:	cmp	r5, #194	; 0xc2
   20244:	bcc	20220 <__assert_fail@plt+0xeaac>
   20248:	ldr	r1, [r7, #48]	; 0x30
   2024c:	add	r2, sl, #2
   20250:	cmp	r2, r1
   20254:	ble	20260 <__assert_fail@plt+0xeaec>
   20258:	mov	r2, #0
   2025c:	b	20220 <__assert_fail@plt+0xeaac>
   20260:	add	r0, sl, r0
   20264:	ldrb	r3, [r0, #1]
   20268:	cmp	r5, #223	; 0xdf
   2026c:	bhi	20290 <__assert_fail@plt+0xeb1c>
   20270:	mov	r0, #0
   20274:	cmp	r3, #192	; 0xc0
   20278:	movwcc	r0, #1
   2027c:	lsl	r2, r0, #1
   20280:	sxtb	r0, r3
   20284:	cmn	r0, #1
   20288:	movwgt	r2, #0
   2028c:	b	20220 <__assert_fail@plt+0xeaac>
   20290:	cmp	r5, #239	; 0xef
   20294:	bhi	202b0 <__assert_fail@plt+0xeb3c>
   20298:	mov	r2, #3
   2029c:	cmp	r5, #224	; 0xe0
   202a0:	bne	2030c <__assert_fail@plt+0xeb98>
   202a4:	cmp	r3, #160	; 0xa0
   202a8:	bcc	20258 <__assert_fail@plt+0xeae4>
   202ac:	b	2030c <__assert_fail@plt+0xeb98>
   202b0:	cmp	r5, #247	; 0xf7
   202b4:	bhi	202d0 <__assert_fail@plt+0xeb5c>
   202b8:	mov	r2, #4
   202bc:	cmp	r5, #240	; 0xf0
   202c0:	bne	2030c <__assert_fail@plt+0xeb98>
   202c4:	cmp	r3, #144	; 0x90
   202c8:	bcc	20258 <__assert_fail@plt+0xeae4>
   202cc:	b	2030c <__assert_fail@plt+0xeb98>
   202d0:	cmp	r5, #251	; 0xfb
   202d4:	bhi	202f0 <__assert_fail@plt+0xeb7c>
   202d8:	mov	r2, #5
   202dc:	cmp	r5, #248	; 0xf8
   202e0:	bne	2030c <__assert_fail@plt+0xeb98>
   202e4:	cmp	r3, #136	; 0x88
   202e8:	bcc	20258 <__assert_fail@plt+0xeae4>
   202ec:	b	2030c <__assert_fail@plt+0xeb98>
   202f0:	cmp	r5, #253	; 0xfd
   202f4:	bhi	20258 <__assert_fail@plt+0xeae4>
   202f8:	mov	r2, #6
   202fc:	cmp	r5, #252	; 0xfc
   20300:	bne	2030c <__assert_fail@plt+0xeb98>
   20304:	cmp	r3, #132	; 0x84
   20308:	bcc	20258 <__assert_fail@plt+0xeae4>
   2030c:	add	r3, r2, sl
   20310:	cmp	r3, r1
   20314:	bgt	20258 <__assert_fail@plt+0xeae4>
   20318:	mov	r1, #1
   2031c:	ldrb	r3, [r0, r1]
   20320:	sxtb	r7, r3
   20324:	cmn	r7, #1
   20328:	bgt	20258 <__assert_fail@plt+0xeae4>
   2032c:	cmp	r3, #191	; 0xbf
   20330:	bhi	20258 <__assert_fail@plt+0xeae4>
   20334:	add	r1, r1, #1
   20338:	cmp	r2, r1
   2033c:	bne	2031c <__assert_fail@plt+0xeba8>
   20340:	b	20220 <__assert_fail@plt+0xeaac>
   20344:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20348:	add	fp, sp, #24
   2034c:	mov	r6, r0
   20350:	ldr	r7, [r1, #4]
   20354:	mvn	r0, #0
   20358:	uxtab	r0, r0, r7
   2035c:	mov	r8, #0
   20360:	cmp	r0, #6
   20364:	bhi	20470 <__assert_fail@plt+0xecfc>
   20368:	mov	r5, r2
   2036c:	ldr	r2, [r6, #4]
   20370:	ldrb	r2, [r2, r5]
   20374:	sxtb	r3, r2
   20378:	add	r4, pc, #0
   2037c:	ldr	pc, [r4, r0, lsl #2]
   20380:	muleq	r2, ip, r3
   20384:	andeq	r0, r2, r0, ror r4
   20388:			; <UNDEFINED> instruction: 0x000203b0
   2038c:	andeq	r0, r2, r0, ror r4
   20390:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20394:	andeq	r0, r2, r0, ror r4
   20398:	andeq	r0, r2, r8, asr #7
   2039c:	ldrb	r0, [r1]
   203a0:	uxtb	r1, r3
   203a4:	cmp	r0, r1
   203a8:	beq	20404 <__assert_fail@plt+0xec90>
   203ac:	b	20470 <__assert_fail@plt+0xecfc>
   203b0:	ldr	r0, [r1]
   203b4:	mov	r1, r2
   203b8:	bl	1e314 <__assert_fail@plt+0xcba0>
   203bc:	cmp	r0, #0
   203c0:	bne	20404 <__assert_fail@plt+0xec90>
   203c4:	b	20470 <__assert_fail@plt+0xecfc>
   203c8:	cmp	r3, #0
   203cc:	bmi	20470 <__assert_fail@plt+0xecfc>
   203d0:	cmp	r2, #0
   203d4:	beq	203f4 <__assert_fail@plt+0xec80>
   203d8:	cmp	r2, #10
   203dc:	bne	20404 <__assert_fail@plt+0xec90>
   203e0:	ldr	r0, [r6, #84]	; 0x54
   203e4:	ldrb	r0, [r0, #128]	; 0x80
   203e8:	tst	r0, #64	; 0x40
   203ec:	bne	20404 <__assert_fail@plt+0xec90>
   203f0:	b	20470 <__assert_fail@plt+0xecfc>
   203f4:	ldr	r0, [r6, #84]	; 0x54
   203f8:	ldrb	r0, [r0, #128]	; 0x80
   203fc:	tst	r0, #128	; 0x80
   20400:	bne	20470 <__assert_fail@plt+0xecfc>
   20404:	movw	r0, #65280	; 0xff00
   20408:	movt	r0, #3
   2040c:	tst	r7, r0
   20410:	beq	2046c <__assert_fail@plt+0xecf8>
   20414:	ldr	r2, [r6, #88]	; 0x58
   20418:	mov	r0, r6
   2041c:	mov	r1, r5
   20420:	bl	1e198 <__assert_fail@plt+0xca24>
   20424:	and	r1, r0, #1
   20428:	tst	r7, #1024	; 0x400
   2042c:	beq	20438 <__assert_fail@plt+0xecc4>
   20430:	cmp	r1, #0
   20434:	beq	20470 <__assert_fail@plt+0xecfc>
   20438:	tst	r7, #2048	; 0x800
   2043c:	cmpne	r1, #0
   20440:	bne	20470 <__assert_fail@plt+0xecfc>
   20444:	tst	r7, #8192	; 0x2000
   20448:	beq	20454 <__assert_fail@plt+0xece0>
   2044c:	ands	r1, r0, #2
   20450:	beq	20470 <__assert_fail@plt+0xecfc>
   20454:	uxth	r1, r7
   20458:	mov	r2, #1
   2045c:	eor	r1, r2, r1, lsr #15
   20460:	and	r0, r0, #8
   20464:	orr	r0, r1, r0, lsr #3
   20468:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2046c:	mov	r8, #1
   20470:	mov	r0, r8
   20474:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2047c:	add	fp, sp, #28
   20480:	sub	sp, sp, #20
   20484:	mov	r5, r0
   20488:	ldr	r0, [r1, #8]
   2048c:	cmp	r0, #1
   20490:	blt	2063c <__assert_fail@plt+0xeec8>
   20494:	mov	r4, r1
   20498:	ldr	sl, [r5, #84]	; 0x54
   2049c:	mov	r8, #0
   204a0:	movw	r9, #65280	; 0xff00
   204a4:	movt	r9, #3
   204a8:	b	204bc <__assert_fail@plt+0xed48>
   204ac:	add	r8, r8, #1
   204b0:	ldr	r0, [r4, #8]
   204b4:	cmp	r8, r0
   204b8:	bge	2063c <__assert_fail@plt+0xeec8>
   204bc:	ldr	r0, [r4, #12]
   204c0:	ldr	r7, [r0, r8, lsl #2]
   204c4:	ldr	r0, [sl]
   204c8:	add	r0, r0, r7, lsl #3
   204cc:	ldr	r6, [r0, #4]
   204d0:	tst	r6, #1048576	; 0x100000
   204d4:	beq	204ac <__assert_fail@plt+0xed38>
   204d8:	tst	r6, r9
   204dc:	beq	20530 <__assert_fail@plt+0xedbc>
   204e0:	ldr	r1, [r5, #40]	; 0x28
   204e4:	ldr	r2, [r5, #88]	; 0x58
   204e8:	mov	r0, r5
   204ec:	bl	1e198 <__assert_fail@plt+0xca24>
   204f0:	and	r1, r0, #1
   204f4:	tst	r6, #1024	; 0x400
   204f8:	beq	20504 <__assert_fail@plt+0xed90>
   204fc:	cmp	r1, #0
   20500:	beq	204ac <__assert_fail@plt+0xed38>
   20504:	tst	r6, #2048	; 0x800
   20508:	cmpne	r1, #0
   2050c:	bne	204ac <__assert_fail@plt+0xed38>
   20510:	tst	r6, #8192	; 0x2000
   20514:	beq	20520 <__assert_fail@plt+0xedac>
   20518:	ands	r1, r0, #2
   2051c:	beq	204ac <__assert_fail@plt+0xed38>
   20520:	tst	r6, #32768	; 0x8000
   20524:	beq	20530 <__assert_fail@plt+0xedbc>
   20528:	ands	r0, r0, #8
   2052c:	beq	204ac <__assert_fail@plt+0xed38>
   20530:	ldr	r3, [r5, #40]	; 0x28
   20534:	mov	r0, sl
   20538:	mov	r1, r7
   2053c:	mov	r2, r5
   20540:	bl	20068 <__assert_fail@plt+0xe8f4>
   20544:	cmp	r0, #0
   20548:	beq	204ac <__assert_fail@plt+0xed38>
   2054c:	ldr	r1, [r5, #40]	; 0x28
   20550:	ldr	r2, [r5, #120]	; 0x78
   20554:	cmp	r2, r0
   20558:	movlt	r2, r0
   2055c:	str	r2, [r5, #120]	; 0x78
   20560:	add	r6, r1, r0
   20564:	mov	r0, r5
   20568:	mov	r1, r6
   2056c:	bl	1f114 <__assert_fail@plt+0xd9a0>
   20570:	str	r0, [sp, #16]
   20574:	cmp	r0, #0
   20578:	bne	20634 <__assert_fail@plt+0xeec0>
   2057c:	ldr	r0, [r5, #100]	; 0x64
   20580:	ldr	r9, [r0, r6, lsl #2]
   20584:	ldr	r0, [sl, #12]
   20588:	ldr	r1, [sl, #24]
   2058c:	ldr	r0, [r0, r7, lsl #2]
   20590:	add	r0, r0, r0, lsl #1
   20594:	add	r2, r1, r0, lsl #2
   20598:	cmp	r9, #0
   2059c:	beq	205c0 <__assert_fail@plt+0xee4c>
   205a0:	ldr	r1, [r9, #40]	; 0x28
   205a4:	mov	r7, sp
   205a8:	mov	r0, r7
   205ac:	bl	1ee54 <__assert_fail@plt+0xd6e0>
   205b0:	str	r0, [sp, #16]
   205b4:	cmp	r0, #0
   205b8:	beq	205d4 <__assert_fail@plt+0xee60>
   205bc:	b	20634 <__assert_fail@plt+0xeec0>
   205c0:	vldr	d16, [r2]
   205c4:	ldr	r0, [r2, #8]
   205c8:	str	r0, [sp, #8]
   205cc:	vstr	d16, [sp]
   205d0:	mov	r7, sp
   205d4:	ldr	r2, [r5, #88]	; 0x58
   205d8:	sub	r1, r6, #1
   205dc:	mov	r0, r5
   205e0:	bl	1e198 <__assert_fail@plt+0xca24>
   205e4:	mov	r3, r0
   205e8:	add	r0, sp, #16
   205ec:	mov	r1, sl
   205f0:	mov	r2, r7
   205f4:	bl	1ca7c <__assert_fail@plt+0xb308>
   205f8:	ldr	r1, [r5, #100]	; 0x64
   205fc:	str	r0, [r1, r6, lsl #2]
   20600:	cmp	r9, #0
   20604:	beq	20610 <__assert_fail@plt+0xee9c>
   20608:	ldr	r0, [sp, #8]
   2060c:	bl	13f1c <__assert_fail@plt+0x27a8>
   20610:	ldr	r0, [r5, #100]	; 0x64
   20614:	ldr	r0, [r0, r6, lsl #2]
   20618:	cmp	r0, #0
   2061c:	movw	r9, #65280	; 0xff00
   20620:	movt	r9, #3
   20624:	bne	204ac <__assert_fail@plt+0xed38>
   20628:	ldr	r0, [sp, #16]
   2062c:	cmp	r0, #0
   20630:	beq	204ac <__assert_fail@plt+0xed38>
   20634:	sub	sp, fp, #28
   20638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2063c:	mov	r0, #0
   20640:	sub	sp, fp, #28
   20644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2064c:	add	fp, sp, #28
   20650:	sub	sp, sp, #68	; 0x44
   20654:	sub	sp, sp, #14336	; 0x3800
   20658:	mov	r4, r1
   2065c:	mov	r7, r0
   20660:	mov	r6, #0
   20664:	str	r6, [r1, #44]	; 0x2c
   20668:	str	r6, [r1, #48]	; 0x30
   2066c:	sub	lr, fp, #4096	; 0x1000
   20670:	sub	r2, lr, #2128	; 0x850
   20674:	add	r3, sp, #16
   20678:	bl	20b18 <__assert_fail@plt+0xf3a4>
   2067c:	cmp	r0, #0
   20680:	ble	20a20 <__assert_fail@plt+0xf2ac>
   20684:	mov	r5, r0
   20688:	str	r4, [sp, #4]
   2068c:	add	r1, r0, #1
   20690:	sub	r0, fp, #3120	; 0xc30
   20694:	bl	1c300 <__assert_fail@plt+0xab8c>
   20698:	str	r0, [fp, #-36]	; 0xffffffdc
   2069c:	cmp	r0, #0
   206a0:	bne	209ec <__assert_fail@plt+0xf278>
   206a4:	sub	r0, fp, #3152	; 0xc50
   206a8:	bl	21004 <__assert_fail@plt+0xf890>
   206ac:	sub	sl, fp, #3120	; 0xc30
   206b0:	sub	lr, fp, #3072	; 0xc00
   206b4:	sub	r6, lr, #36	; 0x24
   206b8:	mov	r9, #0
   206bc:	mov	r0, #0
   206c0:	str	r0, [sp, #8]
   206c4:	str	r5, [sp, #12]
   206c8:	b	20710 <__assert_fail@plt+0xef9c>
   206cc:	ldrsb	r0, [r8, #52]	; 0x34
   206d0:	cmn	r0, #1
   206d4:	ble	207dc <__assert_fail@plt+0xf068>
   206d8:	sub	lr, fp, #2048	; 0x800
   206dc:	sub	r0, lr, #36	; 0x24
   206e0:	str	r8, [r0, r9, lsl #2]
   206e4:	sub	lr, fp, #1024	; 0x400
   206e8:	sub	r0, lr, #36	; 0x24
   206ec:	ldr	r0, [r0, r9, lsl #2]
   206f0:	str	r0, [r6, r9, lsl #2]
   206f4:	add	r0, sp, #16
   206f8:	add	r1, r0, r9, lsl #5
   206fc:	sub	r0, fp, #3152	; 0xc50
   20700:	bl	21014 <__assert_fail@plt+0xf8a0>
   20704:	add	r9, r9, #1
   20708:	cmp	r9, r5
   2070c:	beq	20864 <__assert_fail@plt+0xf0f0>
   20710:	mov	r0, #0
   20714:	str	r0, [fp, #-3116]	; 0xfffff3d4
   20718:	add	r0, r9, r9, lsl #1
   2071c:	sub	lr, fp, #4096	; 0x1000
   20720:	sub	r1, lr, #2128	; 0x850
   20724:	add	r0, r1, r0, lsl #2
   20728:	mov	r4, r0
   2072c:	ldr	r1, [r4, #4]!
   20730:	cmp	r1, #1
   20734:	blt	207a0 <__assert_fail@plt+0xf02c>
   20738:	ldr	r5, [r0, #8]
   2073c:	mov	r6, #0
   20740:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20744:	b	20758 <__assert_fail@plt+0xefe4>
   20748:	ldr	r0, [r4]
   2074c:	add	r6, r6, #1
   20750:	cmp	r6, r0
   20754:	bge	20790 <__assert_fail@plt+0xf01c>
   20758:	ldr	r0, [r5, r6, lsl #2]
   2075c:	ldr	r2, [r7, #12]
   20760:	ldr	r0, [r2, r0, lsl #2]
   20764:	cmn	r0, #1
   20768:	beq	20748 <__assert_fail@plt+0xefd4>
   2076c:	ldr	r1, [r7, #24]
   20770:	add	r0, r0, r0, lsl #1
   20774:	add	r1, r1, r0, lsl #2
   20778:	mov	r0, sl
   2077c:	bl	1c58c <__assert_fail@plt+0xae18>
   20780:	mov	r1, #0
   20784:	cmp	r0, #0
   20788:	beq	20748 <__assert_fail@plt+0xefd4>
   2078c:	b	209e4 <__assert_fail@plt+0xf270>
   20790:	str	r1, [fp, #-36]	; 0xffffffdc
   20794:	ldr	r5, [sp, #12]
   20798:	sub	lr, fp, #3072	; 0xc00
   2079c:	sub	r6, lr, #36	; 0x24
   207a0:	sub	r0, fp, #36	; 0x24
   207a4:	mov	r1, r7
   207a8:	mov	r2, sl
   207ac:	mov	r3, #0
   207b0:	bl	1ca7c <__assert_fail@plt+0xb308>
   207b4:	mov	r8, r0
   207b8:	sub	lr, fp, #1024	; 0x400
   207bc:	sub	r0, lr, #36	; 0x24
   207c0:	str	r8, [r0, r9, lsl #2]
   207c4:	cmp	r8, #0
   207c8:	bne	206cc <__assert_fail@plt+0xef58>
   207cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   207d0:	cmp	r0, #0
   207d4:	beq	206cc <__assert_fail@plt+0xef58>
   207d8:	b	209ec <__assert_fail@plt+0xf278>
   207dc:	sub	r0, fp, #36	; 0x24
   207e0:	mov	r1, r7
   207e4:	mov	r2, sl
   207e8:	mov	r3, #1
   207ec:	bl	1ca7c <__assert_fail@plt+0xb308>
   207f0:	sub	lr, fp, #2048	; 0x800
   207f4:	sub	r1, lr, #36	; 0x24
   207f8:	str	r0, [r1, r9, lsl #2]
   207fc:	cmp	r0, #0
   20800:	bne	20810 <__assert_fail@plt+0xf09c>
   20804:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20808:	cmp	r1, #0
   2080c:	bne	209ec <__assert_fail@plt+0xf278>
   20810:	cmp	r8, r0
   20814:	beq	20834 <__assert_fail@plt+0xf0c0>
   20818:	ldr	r0, [r7, #92]	; 0x5c
   2081c:	cmp	r0, #1
   20820:	mov	r0, #0
   20824:	movwgt	r0, #1
   20828:	ldr	r1, [sp, #8]
   2082c:	orr	r1, r1, r0
   20830:	str	r1, [sp, #8]
   20834:	sub	r0, fp, #36	; 0x24
   20838:	mov	r1, r7
   2083c:	mov	r2, sl
   20840:	mov	r3, #2
   20844:	bl	1ca7c <__assert_fail@plt+0xb308>
   20848:	str	r0, [r6, r9, lsl #2]
   2084c:	cmp	r0, #0
   20850:	bne	206f4 <__assert_fail@plt+0xef80>
   20854:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20858:	cmp	r0, #0
   2085c:	beq	206f4 <__assert_fail@plt+0xef80>
   20860:	b	209ec <__assert_fail@plt+0xf278>
   20864:	ldr	r0, [sp, #8]
   20868:	tst	r0, #1
   2086c:	bne	20a44 <__assert_fail@plt+0xf2d0>
   20870:	mov	r0, #4
   20874:	mov	r1, #256	; 0x100
   20878:	bl	23e7c <__assert_fail@plt+0x12708>
   2087c:	mov	r8, r0
   20880:	ldr	r0, [sp, #4]
   20884:	str	r8, [r0, #44]	; 0x2c
   20888:	cmp	r8, #0
   2088c:	beq	209ec <__assert_fail@plt+0xf278>
   20890:	mov	r0, #0
   20894:	mov	r1, #0
   20898:	add	r5, sp, #16
   2089c:	mov	r9, r5
   208a0:	b	208b4 <__assert_fail@plt+0xf140>
   208a4:	add	r9, r9, #4
   208a8:	add	r1, r1, #1
   208ac:	cmp	r1, #8
   208b0:	beq	20938 <__assert_fail@plt+0xf1c4>
   208b4:	sub	r2, fp, #3152	; 0xc50
   208b8:	ldr	r2, [r2, r1, lsl #2]
   208bc:	cmp	r2, #0
   208c0:	beq	208a4 <__assert_fail@plt+0xf130>
   208c4:	add	r3, r7, r1, lsl #2
   208c8:	add	ip, r3, #96	; 0x60
   208cc:	lsl	r4, r1, #5
   208d0:	mov	r6, #1
   208d4:	tst	r2, #1
   208d8:	bne	208f8 <__assert_fail@plt+0xf184>
   208dc:	add	r4, r4, #1
   208e0:	lsr	r3, r2, #1
   208e4:	lsl	r6, r6, #1
   208e8:	cmp	r0, r2, lsr #1
   208ec:	mov	r2, r3
   208f0:	bne	208d4 <__assert_fail@plt+0xf160>
   208f4:	b	208a4 <__assert_fail@plt+0xf130>
   208f8:	mov	lr, #0
   208fc:	ldr	r3, [r9, lr, lsl #3]
   20900:	add	lr, lr, #4
   20904:	tst	r3, r6
   20908:	beq	208fc <__assert_fail@plt+0xf188>
   2090c:	ldr	r3, [ip]
   20910:	tst	r3, r6
   20914:	sub	r3, fp, #2048	; 0x800
   20918:	sub	r3, r3, #36	; 0x24
   2091c:	sub	r5, fp, #1024	; 0x400
   20920:	sub	r5, r5, #36	; 0x24
   20924:	moveq	r3, r5
   20928:	add	r3, r3, lr
   2092c:	ldr	r3, [r3, #-4]
   20930:	str	r3, [r8, r4, lsl #2]
   20934:	b	208dc <__assert_fail@plt+0xf168>
   20938:	sub	lr, fp, #3072	; 0xc00
   2093c:	sub	r6, lr, #36	; 0x24
   20940:	sub	r0, fp, #3152	; 0xc50
   20944:	mov	r1, #10
   20948:	bl	1e314 <__assert_fail@plt+0xcba0>
   2094c:	cmp	r0, #0
   20950:	beq	209a4 <__assert_fail@plt+0xf230>
   20954:	ldr	r0, [sp, #12]
   20958:	cmp	r0, #1
   2095c:	blt	209a4 <__assert_fail@plt+0xf230>
   20960:	add	r5, sp, #16
   20964:	ldr	r4, [sp, #12]
   20968:	mov	r0, r5
   2096c:	mov	r1, #10
   20970:	bl	1e314 <__assert_fail@plt+0xcba0>
   20974:	cmp	r0, #0
   20978:	bne	20990 <__assert_fail@plt+0xf21c>
   2097c:	add	r5, r5, #32
   20980:	subs	r4, r4, #1
   20984:	add	r6, r6, #4
   20988:	bne	20968 <__assert_fail@plt+0xf1f4>
   2098c:	b	209a4 <__assert_fail@plt+0xf230>
   20990:	ldr	r0, [r6]
   20994:	str	r0, [r8, #40]	; 0x28
   20998:	ldr	r1, [sp, #8]
   2099c:	tst	r1, #1
   209a0:	strne	r0, [r8, #1064]	; 0x428
   209a4:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   209a8:	bl	13f1c <__assert_fail@plt+0x27a8>
   209ac:	mov	r6, #1
   209b0:	ldr	r5, [sp, #12]
   209b4:	cmp	r5, #1
   209b8:	blt	209d8 <__assert_fail@plt+0xf264>
   209bc:	sub	lr, fp, #4096	; 0x1000
   209c0:	sub	r0, lr, #2128	; 0x850
   209c4:	add	r4, r0, #8
   209c8:	ldr	r0, [r4], #12
   209cc:	bl	13f1c <__assert_fail@plt+0x27a8>
   209d0:	subs	r5, r5, #1
   209d4:	bne	209c8 <__assert_fail@plt+0xf254>
   209d8:	mov	r0, r6
   209dc:	sub	sp, fp, #28
   209e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209e4:	str	r0, [fp, #-36]	; 0xffffffdc
   209e8:	ldr	r5, [sp, #12]
   209ec:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   209f0:	bl	13f1c <__assert_fail@plt+0x27a8>
   209f4:	mov	r6, #0
   209f8:	cmp	r5, #1
   209fc:	blt	209d8 <__assert_fail@plt+0xf264>
   20a00:	sub	lr, fp, #4096	; 0x1000
   20a04:	sub	r0, lr, #2128	; 0x850
   20a08:	add	r4, r0, #8
   20a0c:	ldr	r0, [r4], #12
   20a10:	bl	13f1c <__assert_fail@plt+0x27a8>
   20a14:	subs	r5, r5, #1
   20a18:	bne	20a0c <__assert_fail@plt+0xf298>
   20a1c:	b	209d8 <__assert_fail@plt+0xf264>
   20a20:	bne	209d8 <__assert_fail@plt+0xf264>
   20a24:	mov	r0, #4
   20a28:	mov	r1, #256	; 0x100
   20a2c:	bl	23e7c <__assert_fail@plt+0x12708>
   20a30:	mov	r6, r0
   20a34:	str	r0, [r4, #44]	; 0x2c
   20a38:	cmp	r0, #0
   20a3c:	movwne	r6, #1
   20a40:	b	209d8 <__assert_fail@plt+0xf264>
   20a44:	mov	r0, #4
   20a48:	mov	r1, #512	; 0x200
   20a4c:	bl	23e7c <__assert_fail@plt+0x12708>
   20a50:	mov	r8, r0
   20a54:	ldr	r0, [sp, #4]
   20a58:	str	r8, [r0, #48]	; 0x30
   20a5c:	cmp	r8, #0
   20a60:	beq	209ec <__assert_fail@plt+0xf278>
   20a64:	sub	lr, fp, #1024	; 0x400
   20a68:	sub	r0, lr, #36	; 0x24
   20a6c:	sub	ip, r0, #4
   20a70:	sub	lr, fp, #2048	; 0x800
   20a74:	sub	r0, lr, #36	; 0x24
   20a78:	sub	lr, r0, #4
   20a7c:	mov	r2, #0
   20a80:	add	r3, sp, #16
   20a84:	mov	r7, #0
   20a88:	b	20a9c <__assert_fail@plt+0xf328>
   20a8c:	add	r3, r3, #4
   20a90:	add	r7, r7, #1
   20a94:	cmp	r7, #8
   20a98:	beq	20940 <__assert_fail@plt+0xf1cc>
   20a9c:	sub	r0, fp, #3152	; 0xc50
   20aa0:	ldr	r5, [r0, r7, lsl #2]
   20aa4:	cmp	r5, #0
   20aa8:	beq	20a8c <__assert_fail@plt+0xf318>
   20aac:	lsl	r0, r7, #5
   20ab0:	mov	r1, #1
   20ab4:	tst	r5, #1
   20ab8:	bne	20ad8 <__assert_fail@plt+0xf364>
   20abc:	add	r0, r0, #1
   20ac0:	lsr	r4, r5, #1
   20ac4:	lsl	r1, r1, #1
   20ac8:	cmp	r2, r5, lsr #1
   20acc:	mov	r5, r4
   20ad0:	bne	20ab4 <__assert_fail@plt+0xf340>
   20ad4:	b	20a8c <__assert_fail@plt+0xf318>
   20ad8:	mov	r4, r3
   20adc:	mov	sl, ip
   20ae0:	mov	r9, lr
   20ae4:	add	sl, sl, #4
   20ae8:	add	r9, r9, #4
   20aec:	ldr	r6, [r4], #32
   20af0:	tst	r6, r1
   20af4:	beq	20ae4 <__assert_fail@plt+0xf370>
   20af8:	ldr	r4, [sl]
   20afc:	mov	r6, r8
   20b00:	str	r4, [r6, r0, lsl #2]!
   20b04:	ldr	r4, [r9]
   20b08:	str	r4, [r6, #1024]	; 0x400
   20b0c:	sub	r4, fp, #3072	; 0xc00
   20b10:	sub	r6, r4, #36	; 0x24
   20b14:	b	20abc <__assert_fail@plt+0xf348>
   20b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b1c:	add	fp, sp, #28
   20b20:	sub	sp, sp, #140	; 0x8c
   20b24:	str	r3, [sp, #32]
   20b28:	str	r2, [sp, #28]
   20b2c:	mov	r9, r1
   20b30:	mov	sl, r0
   20b34:	sub	r7, fp, #64	; 0x40
   20b38:	mov	r0, r7
   20b3c:	bl	21004 <__assert_fail@plt+0xf890>
   20b40:	ldr	r0, [r9, #8]
   20b44:	cmp	r0, #1
   20b48:	blt	20fcc <__assert_fail@plt+0xf858>
   20b4c:	add	r6, sl, #96	; 0x60
   20b50:	mov	r0, #0
   20b54:	add	r5, sp, #72	; 0x48
   20b58:	mov	r4, #0
   20b5c:	str	sl, [sp]
   20b60:	str	r6, [sp, #8]
   20b64:	str	r9, [sp, #16]
   20b68:	b	20b90 <__assert_fail@plt+0xf41c>
   20b6c:	mov	r0, r7
   20b70:	bl	21004 <__assert_fail@plt+0xf890>
   20b74:	ldr	r9, [sp, #16]
   20b78:	ldr	r0, [r9, #8]
   20b7c:	ldr	r1, [sp, #36]	; 0x24
   20b80:	add	r1, r1, #1
   20b84:	cmp	r1, r0
   20b88:	mov	r0, r1
   20b8c:	bge	20fd0 <__assert_fail@plt+0xf85c>
   20b90:	str	r0, [sp, #36]	; 0x24
   20b94:	ldr	r0, [r9, #12]
   20b98:	ldr	r1, [sp, #36]	; 0x24
   20b9c:	ldr	r8, [r0, r1, lsl #2]
   20ba0:	ldr	r1, [sl]
   20ba4:	add	r0, r1, r8, lsl #3
   20ba8:	ldr	r9, [r0, #4]!
   20bac:	str	r0, [sp, #12]
   20bb0:	uxtb	r0, r9
   20bb4:	cmp	r0, #1
   20bb8:	str	r0, [sp, #24]
   20bbc:	bne	20bd4 <__assert_fail@plt+0xf460>
   20bc0:	str	r1, [sp, #20]
   20bc4:	ldrb	r1, [r1, r8, lsl #3]
   20bc8:	mov	r0, r7
   20bcc:	bl	1a7c0 <__assert_fail@plt+0x904c>
   20bd0:	b	20c6c <__assert_fail@plt+0xf4f8>
   20bd4:	cmp	r0, #7
   20bd8:	beq	20c00 <__assert_fail@plt+0xf48c>
   20bdc:	cmp	r0, #5
   20be0:	beq	20c1c <__assert_fail@plt+0xf4a8>
   20be4:	cmp	r0, #3
   20be8:	bne	20b74 <__assert_fail@plt+0xf400>
   20bec:	str	r1, [sp, #20]
   20bf0:	ldr	r1, [r1, r8, lsl #3]
   20bf4:	mov	r0, r7
   20bf8:	bl	21014 <__assert_fail@plt+0xf8a0>
   20bfc:	b	20c6c <__assert_fail@plt+0xf4f8>
   20c00:	str	r1, [sp, #20]
   20c04:	mvn	r0, #0
   20c08:	str	r0, [fp, #-52]	; 0xffffffcc
   20c0c:	str	r0, [fp, #-56]	; 0xffffffc8
   20c10:	str	r0, [fp, #-60]	; 0xffffffc4
   20c14:	str	r0, [fp, #-64]	; 0xffffffc0
   20c18:	b	20c44 <__assert_fail@plt+0xf4d0>
   20c1c:	ldr	r0, [sl, #92]	; 0x5c
   20c20:	cmp	r0, #2
   20c24:	str	r1, [sp, #20]
   20c28:	blt	20c3c <__assert_fail@plt+0xf4c8>
   20c2c:	ldr	r1, [sl, #60]	; 0x3c
   20c30:	mov	r0, r7
   20c34:	bl	21014 <__assert_fail@plt+0xf8a0>
   20c38:	b	20c44 <__assert_fail@plt+0xf4d0>
   20c3c:	mov	r0, r7
   20c40:	bl	21038 <__assert_fail@plt+0xf8c4>
   20c44:	ldrb	r0, [sl, #128]	; 0x80
   20c48:	tst	r0, #64	; 0x40
   20c4c:	moveq	r0, r7
   20c50:	moveq	r1, #10
   20c54:	bleq	21060 <__assert_fail@plt+0xf8ec>
   20c58:	ldrb	r0, [sl, #128]	; 0x80
   20c5c:	tst	r0, #128	; 0x80
   20c60:	movne	r0, r7
   20c64:	movne	r1, #0
   20c68:	blne	21060 <__assert_fail@plt+0xf8ec>
   20c6c:	movw	r0, #65280	; 0xff00
   20c70:	movt	r0, #3
   20c74:	ands	r0, r9, r0
   20c78:	beq	20df8 <__assert_fail@plt+0xf684>
   20c7c:	tst	r9, #8192	; 0x2000
   20c80:	beq	20cb4 <__assert_fail@plt+0xf540>
   20c84:	mov	r0, r7
   20c88:	mov	r1, #10
   20c8c:	bl	1e314 <__assert_fail@plt+0xcba0>
   20c90:	str	r0, [sp, #4]
   20c94:	mov	r0, r7
   20c98:	bl	21004 <__assert_fail@plt+0xf890>
   20c9c:	ldr	r0, [sp, #4]
   20ca0:	cmp	r0, #0
   20ca4:	beq	20b74 <__assert_fail@plt+0xf400>
   20ca8:	mov	r0, r7
   20cac:	mov	r1, #10
   20cb0:	bl	1a7c0 <__assert_fail@plt+0x904c>
   20cb4:	tst	r9, #32768	; 0x8000
   20cb8:	bne	20b6c <__assert_fail@plt+0xf3f8>
   20cbc:	tst	r9, #1024	; 0x400
   20cc0:	beq	20d5c <__assert_fail@plt+0xf5e8>
   20cc4:	ldr	r0, [sp, #24]
   20cc8:	cmp	r0, #1
   20ccc:	bne	20ce0 <__assert_fail@plt+0xf56c>
   20cd0:	ldr	r0, [sp, #12]
   20cd4:	ldrb	r0, [r0, #2]
   20cd8:	tst	r0, #64	; 0x40
   20cdc:	beq	20b6c <__assert_fail@plt+0xf3f8>
   20ce0:	ldr	r0, [sl, #92]	; 0x5c
   20ce4:	cmp	r0, #1
   20ce8:	ble	20d2c <__assert_fail@plt+0xf5b8>
   20cec:	ldr	r1, [sl, #60]	; 0x3c
   20cf0:	mov	r0, #0
   20cf4:	mov	r2, #0
   20cf8:	ldr	r3, [r6, r2, lsl #2]
   20cfc:	ldr	r6, [r1, r2, lsl #2]
   20d00:	mvn	r6, r6
   20d04:	orr	r3, r3, r6
   20d08:	ldr	r6, [r7, r2, lsl #2]
   20d0c:	and	r3, r6, r3
   20d10:	ldr	r6, [sp, #8]
   20d14:	str	r3, [r7, r2, lsl #2]
   20d18:	orr	r0, r3, r0
   20d1c:	add	r2, r2, #1
   20d20:	cmp	r2, #8
   20d24:	bne	20cf8 <__assert_fail@plt+0xf584>
   20d28:	b	20d54 <__assert_fail@plt+0xf5e0>
   20d2c:	mov	r0, #0
   20d30:	mov	r1, #0
   20d34:	ldr	r2, [r6, r1, lsl #2]
   20d38:	ldr	r3, [r7, r1, lsl #2]
   20d3c:	and	r2, r3, r2
   20d40:	str	r2, [r7, r1, lsl #2]
   20d44:	orr	r0, r2, r0
   20d48:	add	r1, r1, #1
   20d4c:	cmp	r1, #8
   20d50:	bne	20d34 <__assert_fail@plt+0xf5c0>
   20d54:	cmp	r0, #0
   20d58:	beq	20b74 <__assert_fail@plt+0xf400>
   20d5c:	tst	r9, #2048	; 0x800
   20d60:	beq	20df8 <__assert_fail@plt+0xf684>
   20d64:	ldr	r0, [sp, #24]
   20d68:	cmp	r0, #1
   20d6c:	bne	20d80 <__assert_fail@plt+0xf60c>
   20d70:	ldr	r0, [sp, #12]
   20d74:	ldrb	r0, [r0, #2]
   20d78:	tst	r0, #64	; 0x40
   20d7c:	bne	20b6c <__assert_fail@plt+0xf3f8>
   20d80:	ldr	r0, [sl, #92]	; 0x5c
   20d84:	cmp	r0, #1
   20d88:	ble	20dc8 <__assert_fail@plt+0xf654>
   20d8c:	ldr	r1, [sl, #60]	; 0x3c
   20d90:	mov	r0, #0
   20d94:	mov	r2, #0
   20d98:	ldr	r3, [r6, r2, lsl #2]
   20d9c:	ldr	r6, [r1, r2, lsl #2]
   20da0:	and	r3, r6, r3
   20da4:	ldr	r6, [r7, r2, lsl #2]
   20da8:	bic	r3, r6, r3
   20dac:	ldr	r6, [sp, #8]
   20db0:	str	r3, [r7, r2, lsl #2]
   20db4:	orr	r0, r3, r0
   20db8:	add	r2, r2, #1
   20dbc:	cmp	r2, #8
   20dc0:	bne	20d98 <__assert_fail@plt+0xf624>
   20dc4:	b	20df0 <__assert_fail@plt+0xf67c>
   20dc8:	mov	r0, #0
   20dcc:	mov	r1, #0
   20dd0:	ldr	r2, [r6, r1, lsl #2]
   20dd4:	ldr	r3, [r7, r1, lsl #2]
   20dd8:	bic	r2, r3, r2
   20ddc:	str	r2, [r7, r1, lsl #2]
   20de0:	orr	r0, r2, r0
   20de4:	add	r1, r1, #1
   20de8:	cmp	r1, #8
   20dec:	bne	20dd0 <__assert_fail@plt+0xf65c>
   20df0:	cmp	r0, #0
   20df4:	beq	20b74 <__assert_fail@plt+0xf400>
   20df8:	cmp	r4, #1
   20dfc:	blt	20f60 <__assert_fail@plt+0xf7ec>
   20e00:	str	r8, [sp, #12]
   20e04:	mov	r8, #0
   20e08:	ldr	sl, [sp, #32]
   20e0c:	ldr	r9, [sp, #16]
   20e10:	ldr	r6, [sp, #24]
   20e14:	cmp	r6, #1
   20e18:	bne	20e5c <__assert_fail@plt+0xf6e8>
   20e1c:	b	20e3c <__assert_fail@plt+0xf6c8>
   20e20:	mov	r4, ip
   20e24:	add	sl, sl, #32
   20e28:	add	r8, r8, #1
   20e2c:	cmp	r8, r4
   20e30:	bge	20f70 <__assert_fail@plt+0xf7fc>
   20e34:	cmp	r6, #1
   20e38:	bne	20e5c <__assert_fail@plt+0xf6e8>
   20e3c:	ldr	r0, [sp, #12]
   20e40:	ldr	r1, [sp, #20]
   20e44:	ldrb	r1, [r1, r0, lsl #3]
   20e48:	ldr	r0, [sp, #32]
   20e4c:	add	r0, r0, r8, lsl #5
   20e50:	bl	1e314 <__assert_fail@plt+0xcba0>
   20e54:	cmp	r0, #0
   20e58:	beq	20e24 <__assert_fail@plt+0xf6b0>
   20e5c:	mov	ip, r4
   20e60:	mov	r0, #0
   20e64:	mov	r1, #0
   20e68:	ldr	r2, [r7, r1, lsl #2]
   20e6c:	ldr	r3, [sl, r1, lsl #2]
   20e70:	and	r2, r3, r2
   20e74:	str	r2, [r5, r1, lsl #2]
   20e78:	orr	r0, r2, r0
   20e7c:	add	r1, r1, #1
   20e80:	cmp	r1, #8
   20e84:	bne	20e68 <__assert_fail@plt+0xf6f4>
   20e88:	cmp	r0, #0
   20e8c:	beq	20e20 <__assert_fail@plt+0xf6ac>
   20e90:	mov	r9, #0
   20e94:	mov	r0, #0
   20e98:	mov	r1, #0
   20e9c:	ldr	r2, [r7, r1, lsl #2]
   20ea0:	ldr	r3, [sl, r1, lsl #2]
   20ea4:	bic	r4, r3, r2
   20ea8:	add	r6, sp, #40	; 0x28
   20eac:	str	r4, [r6, r1, lsl #2]
   20eb0:	bic	r2, r2, r3
   20eb4:	str	r2, [r7, r1, lsl #2]
   20eb8:	orr	r9, r2, r9
   20ebc:	orr	r0, r4, r0
   20ec0:	add	r1, r1, #1
   20ec4:	cmp	r1, #8
   20ec8:	bne	20e9c <__assert_fail@plt+0xf728>
   20ecc:	cmp	r0, #0
   20ed0:	beq	20f1c <__assert_fail@plt+0xf7a8>
   20ed4:	mov	r4, ip
   20ed8:	ldr	r6, [sp, #32]
   20edc:	add	r0, r6, ip, lsl #5
   20ee0:	add	r1, sp, #40	; 0x28
   20ee4:	bl	21084 <__assert_fail@plt+0xf910>
   20ee8:	add	r0, r6, r8, lsl #5
   20eec:	mov	r1, r5
   20ef0:	bl	21084 <__assert_fail@plt+0xf910>
   20ef4:	add	r0, r4, r4, lsl #1
   20ef8:	ldr	r2, [sp, #28]
   20efc:	add	r0, r2, r0, lsl #2
   20f00:	add	r1, r8, r8, lsl #1
   20f04:	add	r1, r2, r1, lsl #2
   20f08:	bl	1c990 <__assert_fail@plt+0xb21c>
   20f0c:	cmp	r0, #0
   20f10:	bne	20fdc <__assert_fail@plt+0xf868>
   20f14:	add	r4, r4, #1
   20f18:	b	20f20 <__assert_fail@plt+0xf7ac>
   20f1c:	mov	r4, ip
   20f20:	ldr	r0, [sp, #16]
   20f24:	mov	r6, r0
   20f28:	ldr	r0, [r0, #12]
   20f2c:	ldr	r1, [sp, #36]	; 0x24
   20f30:	ldr	r1, [r0, r1, lsl #2]
   20f34:	add	r0, r8, r8, lsl #1
   20f38:	ldr	r2, [sp, #28]
   20f3c:	add	r0, r2, r0, lsl #2
   20f40:	bl	1c7a4 <__assert_fail@plt+0xb030>
   20f44:	cmp	r0, #0
   20f48:	beq	20fdc <__assert_fail@plt+0xf868>
   20f4c:	cmp	r9, #0
   20f50:	beq	20f6c <__assert_fail@plt+0xf7f8>
   20f54:	mov	r9, r6
   20f58:	ldr	r6, [sp, #24]
   20f5c:	b	20e24 <__assert_fail@plt+0xf6b0>
   20f60:	mov	r8, #0
   20f64:	ldr	r9, [sp, #16]
   20f68:	b	20f70 <__assert_fail@plt+0xf7fc>
   20f6c:	mov	r9, r6
   20f70:	cmp	r8, r4
   20f74:	ldr	sl, [sp]
   20f78:	bne	20fc4 <__assert_fail@plt+0xf850>
   20f7c:	ldr	r0, [sp, #32]
   20f80:	add	r0, r0, r4, lsl #5
   20f84:	mov	r1, r7
   20f88:	bl	21084 <__assert_fail@plt+0xf910>
   20f8c:	ldr	r0, [r9, #12]
   20f90:	ldr	r1, [sp, #36]	; 0x24
   20f94:	ldr	r1, [r0, r1, lsl #2]
   20f98:	add	r0, r4, r4, lsl #1
   20f9c:	ldr	r2, [sp, #28]
   20fa0:	add	r0, r2, r0, lsl #2
   20fa4:	bl	1c0a0 <__assert_fail@plt+0xa92c>
   20fa8:	cmp	r0, #0
   20fac:	ldr	r6, [sp, #8]
   20fb0:	bne	20fdc <__assert_fail@plt+0xf868>
   20fb4:	mov	r0, r7
   20fb8:	bl	21004 <__assert_fail@plt+0xf890>
   20fbc:	add	r4, r4, #1
   20fc0:	b	20b78 <__assert_fail@plt+0xf404>
   20fc4:	ldr	r6, [sp, #8]
   20fc8:	b	20b78 <__assert_fail@plt+0xf404>
   20fcc:	mov	r4, #0
   20fd0:	mov	r0, r4
   20fd4:	sub	sp, fp, #28
   20fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fdc:	cmp	r4, #1
   20fe0:	blt	20ffc <__assert_fail@plt+0xf888>
   20fe4:	ldr	r0, [sp, #28]
   20fe8:	add	r5, r0, #8
   20fec:	ldr	r0, [r5], #12
   20ff0:	bl	13f1c <__assert_fail@plt+0x27a8>
   20ff4:	subs	r4, r4, #1
   20ff8:	bne	20fec <__assert_fail@plt+0xf878>
   20ffc:	mvn	r4, #0
   21000:	b	20fd0 <__assert_fail@plt+0xf85c>
   21004:	vmov.i32	q8, #0	; 0x00000000
   21008:	vst1.32	{d16-d17}, [r0]!
   2100c:	vst1.32	{d16-d17}, [r0]
   21010:	bx	lr
   21014:	mov	r2, #0
   21018:	ldr	ip, [r1, r2, lsl #2]
   2101c:	ldr	r3, [r0, r2, lsl #2]
   21020:	orr	r3, r3, ip
   21024:	str	r3, [r0, r2, lsl #2]
   21028:	add	r2, r2, #1
   2102c:	cmp	r2, #8
   21030:	bne	21018 <__assert_fail@plt+0xf8a4>
   21034:	bx	lr
   21038:	mvn	r1, #0
   2103c:	str	r1, [r0]
   21040:	str	r1, [r0, #4]
   21044:	str	r1, [r0, #8]
   21048:	str	r1, [r0, #12]
   2104c:	str	r1, [r0, #16]
   21050:	str	r1, [r0, #20]
   21054:	str	r1, [r0, #24]
   21058:	str	r1, [r0, #28]
   2105c:	bx	lr
   21060:	asr	r2, r1, #31
   21064:	add	r2, r1, r2, lsr #27
   21068:	asr	r2, r2, #5
   2106c:	ldr	ip, [r0, r2, lsl #2]
   21070:	and	r1, r1, #31
   21074:	mov	r3, #1
   21078:	bic	r1, ip, r3, lsl r1
   2107c:	str	r1, [r0, r2, lsl #2]
   21080:	bx	lr
   21084:	vld1.32	{d16-d17}, [r1]!
   21088:	vld1.32	{d18-d19}, [r1]
   2108c:	vst1.32	{d16-d17}, [r0]!
   21090:	vst1.32	{d18-d19}, [r0]
   21094:	bx	lr
   21098:	ldr	r0, [r0]
   2109c:	add	r0, r0, r1, lsl #3
   210a0:	ldr	r1, [r0, #4]
   210a4:	uxtb	r3, r1
   210a8:	mov	r0, #0
   210ac:	cmp	r3, #2
   210b0:	bne	21108 <__assert_fail@plt+0xf994>
   210b4:	movw	r3, #65280	; 0xff00
   210b8:	movt	r3, #3
   210bc:	tst	r1, r3
   210c0:	moveq	r0, #1
   210c4:	bxeq	lr
   210c8:	ands	ip, r2, #1
   210cc:	bne	210d8 <__assert_fail@plt+0xf964>
   210d0:	ands	r3, r1, #1024	; 0x400
   210d4:	bne	21108 <__assert_fail@plt+0xf994>
   210d8:	cmp	ip, #0
   210dc:	andsne	r3, r1, #2048	; 0x800
   210e0:	bne	21108 <__assert_fail@plt+0xf994>
   210e4:	tst	r2, #2
   210e8:	bne	210f4 <__assert_fail@plt+0xf980>
   210ec:	ands	r3, r1, #8192	; 0x2000
   210f0:	bxne	lr
   210f4:	uxth	r0, r1
   210f8:	mov	r1, #1
   210fc:	eor	r0, r1, r0, lsr #15
   21100:	and	r1, r2, #8
   21104:	orr	r0, r0, r1, lsr #3
   21108:	bx	lr
   2110c:	mov	ip, #0
   21110:	str	ip, [r0, #20]
   21114:	str	ip, [r0, #16]
   21118:	stm	r0, {r1, r2, r3}
   2111c:	str	ip, [r0, #24]
   21120:	ldr	r1, [sp]
   21124:	str	r1, [r0, #12]
   21128:	bx	lr
   2112c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21130:	add	fp, sp, #28
   21134:	sub	sp, sp, #12
   21138:	mov	sl, r1
   2113c:	mov	r6, r0
   21140:	ldr	r1, [r1, #8]
   21144:	ldr	r5, [sl, #12]
   21148:	mov	r0, sp
   2114c:	bl	1c0a0 <__assert_fail@plt+0xa92c>
   21150:	cmp	r0, #0
   21154:	bne	2123c <__assert_fail@plt+0xfac8>
   21158:	mov	r3, sp
   2115c:	mov	r0, r6
   21160:	mov	r1, sl
   21164:	mov	r2, r5
   21168:	bl	212f8 <__assert_fail@plt+0xfb84>
   2116c:	cmp	r0, #0
   21170:	bne	21208 <__assert_fail@plt+0xfa94>
   21174:	mov	r9, #0
   21178:	mov	r8, sp
   2117c:	mov	r1, #0
   21180:	cmp	r5, #1
   21184:	bge	211b4 <__assert_fail@plt+0xfa40>
   21188:	b	21210 <__assert_fail@plt+0xfa9c>
   2118c:	mov	r0, r6
   21190:	mov	r1, sl
   21194:	mov	r2, r5
   21198:	mov	r3, r8
   2119c:	bl	212f8 <__assert_fail@plt+0xfb84>
   211a0:	cmp	r0, #0
   211a4:	mov	r1, r4
   211a8:	bne	21208 <__assert_fail@plt+0xfa94>
   211ac:	cmp	r5, #1
   211b0:	blt	21210 <__assert_fail@plt+0xfa9c>
   211b4:	ldr	r0, [sl]
   211b8:	ldr	r2, [r0, r5, lsl #2]
   211bc:	cmp	r2, #0
   211c0:	mov	r4, #0
   211c4:	addeq	r4, r1, #1
   211c8:	ldr	r1, [r6, #120]	; 0x78
   211cc:	cmp	r4, r1
   211d0:	bgt	21218 <__assert_fail@plt+0xfaa4>
   211d4:	str	r9, [sp, #4]
   211d8:	ldr	r0, [r6, #100]	; 0x64
   211dc:	sub	r5, r5, #1
   211e0:	ldr	r0, [r0, r5, lsl #2]
   211e4:	cmp	r0, #0
   211e8:	beq	2118c <__assert_fail@plt+0xfa18>
   211ec:	mov	r0, r6
   211f0:	mov	r1, sl
   211f4:	mov	r2, r5
   211f8:	mov	r3, r8
   211fc:	bl	21420 <__assert_fail@plt+0xfcac>
   21200:	cmp	r0, #0
   21204:	beq	2118c <__assert_fail@plt+0xfa18>
   21208:	mov	r7, r0
   2120c:	b	21228 <__assert_fail@plt+0xfab4>
   21210:	mov	r7, #0
   21214:	b	21228 <__assert_fail@plt+0xfab4>
   21218:	lsl	r2, r5, #2
   2121c:	mov	r7, #0
   21220:	mov	r1, #0
   21224:	bl	1166c <memset@plt>
   21228:	ldr	r0, [sp, #8]
   2122c:	bl	13f1c <__assert_fail@plt+0x27a8>
   21230:	mov	r0, r7
   21234:	sub	sp, fp, #28
   21238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2123c:	mov	r7, r0
   21240:	b	21230 <__assert_fail@plt+0xfabc>
   21244:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21248:	add	fp, sp, #24
   2124c:	sub	sp, sp, #16
   21250:	cmp	r3, #1
   21254:	blt	212ec <__assert_fail@plt+0xfb78>
   21258:	mov	r4, r3
   2125c:	mov	r5, r2
   21260:	mov	r6, r1
   21264:	mov	r7, r0
   21268:	mov	r8, sp
   2126c:	add	r9, sp, #12
   21270:	b	21288 <__assert_fail@plt+0xfb14>
   21274:	str	r0, [r6]
   21278:	add	r6, r6, #4
   2127c:	add	r5, r5, #4
   21280:	subs	r4, r4, #1
   21284:	beq	212ec <__assert_fail@plt+0xfb78>
   21288:	ldr	r0, [r5]
   2128c:	ldr	r1, [r6]
   21290:	cmp	r1, #0
   21294:	beq	21274 <__assert_fail@plt+0xfb00>
   21298:	cmp	r0, #0
   2129c:	beq	21278 <__assert_fail@plt+0xfb04>
   212a0:	add	r1, r1, #4
   212a4:	add	r2, r0, #4
   212a8:	mov	r0, r8
   212ac:	bl	1ee54 <__assert_fail@plt+0xd6e0>
   212b0:	str	r0, [sp, #12]
   212b4:	cmp	r0, #0
   212b8:	bne	212e4 <__assert_fail@plt+0xfb70>
   212bc:	mov	r0, r9
   212c0:	mov	r1, r7
   212c4:	mov	r2, r8
   212c8:	bl	1fe58 <__assert_fail@plt+0xe6e4>
   212cc:	str	r0, [r6]
   212d0:	ldr	r0, [sp, #8]
   212d4:	bl	13f1c <__assert_fail@plt+0x27a8>
   212d8:	ldr	r0, [sp, #12]
   212dc:	cmp	r0, #0
   212e0:	beq	21278 <__assert_fail@plt+0xfb04>
   212e4:	sub	sp, fp, #24
   212e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   212ec:	mov	r0, #0
   212f0:	sub	sp, fp, #24
   212f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   212f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212fc:	add	fp, sp, #28
   21300:	sub	sp, sp, #12
   21304:	mov	sl, r2
   21308:	mov	r8, r1
   2130c:	mov	r6, r0
   21310:	ldr	r9, [r0, #84]	; 0x54
   21314:	mov	r0, #0
   21318:	str	r0, [sp, #8]
   2131c:	ldr	r1, [r6, #100]	; 0x64
   21320:	ldr	r7, [r1, r2, lsl #2]
   21324:	cmp	r7, #0
   21328:	mov	r4, r7
   2132c:	addne	r4, r4, #4
   21330:	ldr	r1, [r3, #4]
   21334:	cmp	r1, #0
   21338:	beq	213c8 <__assert_fail@plt+0xfc54>
   2133c:	mov	r5, r3
   21340:	cmp	r7, #0
   21344:	beq	21398 <__assert_fail@plt+0xfc24>
   21348:	mov	r0, r9
   2134c:	mov	r1, r5
   21350:	mov	r2, r4
   21354:	bl	2156c <__assert_fail@plt+0xfdf8>
   21358:	str	r0, [sp, #8]
   2135c:	cmp	r0, #0
   21360:	bne	213f0 <__assert_fail@plt+0xfc7c>
   21364:	ldr	r0, [r8, #20]
   21368:	cmp	r0, #0
   2136c:	beq	21398 <__assert_fail@plt+0xfc24>
   21370:	ldr	r0, [r6, #116]	; 0x74
   21374:	stm	sp, {r0, sl}
   21378:	add	r3, r8, #16
   2137c:	mov	r0, r9
   21380:	mov	r1, r5
   21384:	mov	r2, r4
   21388:	bl	21644 <__assert_fail@plt+0xfed0>
   2138c:	str	r0, [sp, #8]
   21390:	cmp	r0, #0
   21394:	bne	213f0 <__assert_fail@plt+0xfc7c>
   21398:	add	r0, sp, #8
   2139c:	mov	r1, r9
   213a0:	mov	r2, r5
   213a4:	bl	1fe58 <__assert_fail@plt+0xe6e4>
   213a8:	ldr	r1, [r8]
   213ac:	str	r0, [r1, sl, lsl #2]
   213b0:	ldr	r0, [sp, #8]
   213b4:	cmp	r0, #0
   213b8:	bne	213f0 <__assert_fail@plt+0xfc7c>
   213bc:	cmp	r7, #0
   213c0:	bne	213d8 <__assert_fail@plt+0xfc64>
   213c4:	b	213ec <__assert_fail@plt+0xfc78>
   213c8:	ldr	r1, [r8]
   213cc:	str	r0, [r1, sl, lsl #2]
   213d0:	cmp	r7, #0
   213d4:	beq	213ec <__assert_fail@plt+0xfc78>
   213d8:	ldr	r0, [r6, #100]	; 0x64
   213dc:	ldr	r0, [r0, sl, lsl #2]
   213e0:	ldrb	r0, [r0, #52]	; 0x34
   213e4:	tst	r0, #64	; 0x40
   213e8:	bne	213f8 <__assert_fail@plt+0xfc84>
   213ec:	mov	r0, #0
   213f0:	sub	sp, fp, #28
   213f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213f8:	mov	r0, r6
   213fc:	mov	r1, r8
   21400:	mov	r2, sl
   21404:	mov	r3, r4
   21408:	bl	21888 <__assert_fail@plt+0x10114>
   2140c:	str	r0, [sp, #8]
   21410:	cmp	r0, #0
   21414:	moveq	r0, #0
   21418:	sub	sp, fp, #28
   2141c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21424:	add	fp, sp, #28
   21428:	sub	sp, sp, #20
   2142c:	str	r3, [sp, #12]
   21430:	mov	sl, r0
   21434:	ldr	r0, [r0, #100]	; 0x64
   21438:	ldr	r7, [r0, r2, lsl #2]
   2143c:	ldr	r0, [r7, #20]
   21440:	cmp	r0, #1
   21444:	blt	21554 <__assert_fail@plt+0xfde0>
   21448:	mov	r5, r2
   2144c:	mov	r6, r1
   21450:	ldr	r8, [sl, #84]	; 0x54
   21454:	add	r0, r1, #16
   21458:	str	r0, [sp, #8]
   2145c:	add	r0, r2, #1
   21460:	str	r0, [sp, #16]
   21464:	mov	r9, #0
   21468:	b	21490 <__assert_fail@plt+0xfd1c>
   2146c:	ldr	r0, [sp, #12]
   21470:	mov	r1, r4
   21474:	bl	1c7a4 <__assert_fail@plt+0xb030>
   21478:	cmp	r0, #0
   2147c:	beq	21560 <__assert_fail@plt+0xfdec>
   21480:	add	r9, r9, #1
   21484:	ldr	r0, [r7, #20]
   21488:	cmp	r9, r0
   2148c:	bge	21554 <__assert_fail@plt+0xfde0>
   21490:	ldr	r0, [r7, #24]
   21494:	ldr	r4, [r0, r9, lsl #2]
   21498:	ldr	r0, [r8]
   2149c:	add	r0, r0, r4, lsl #3
   214a0:	ldrb	r0, [r0, #6]
   214a4:	tst	r0, #16
   214a8:	beq	214d0 <__assert_fail@plt+0xfd5c>
   214ac:	ldr	r0, [r6, #12]
   214b0:	str	r0, [sp]
   214b4:	mov	r0, sl
   214b8:	mov	r1, r6
   214bc:	mov	r2, r4
   214c0:	mov	r3, r5
   214c4:	bl	22288 <__assert_fail@plt+0x10b14>
   214c8:	cmp	r0, #0
   214cc:	bne	21520 <__assert_fail@plt+0xfdac>
   214d0:	ldr	r0, [r8]
   214d4:	add	r1, r0, r4, lsl #3
   214d8:	mov	r0, sl
   214dc:	mov	r2, r5
   214e0:	bl	20344 <__assert_fail@plt+0xebd0>
   214e4:	cmp	r0, #0
   214e8:	beq	21480 <__assert_fail@plt+0xfd0c>
   214ec:	ldr	r0, [r6]
   214f0:	ldr	r1, [sp, #16]
   214f4:	ldr	r0, [r0, r1, lsl #2]
   214f8:	cmp	r0, #0
   214fc:	beq	21480 <__assert_fail@plt+0xfd0c>
   21500:	ldr	r1, [r8, #12]
   21504:	ldr	r1, [r1, r4, lsl #2]
   21508:	add	r0, r0, #4
   2150c:	bl	1ca0c <__assert_fail@plt+0xb298>
   21510:	mov	r1, r0
   21514:	mov	r0, #1
   21518:	cmp	r1, #0
   2151c:	beq	21480 <__assert_fail@plt+0xfd0c>
   21520:	ldr	r1, [r6, #20]
   21524:	cmp	r1, #0
   21528:	beq	2146c <__assert_fail@plt+0xfcf8>
   2152c:	ldr	r1, [r8, #12]
   21530:	ldr	r2, [r1, r4, lsl #2]
   21534:	stm	sp, {r4, r5}
   21538:	add	r3, r0, r5
   2153c:	mov	r0, sl
   21540:	ldr	r1, [sp, #8]
   21544:	bl	21f1c <__assert_fail@plt+0x107a8>
   21548:	cmp	r0, #0
   2154c:	beq	2146c <__assert_fail@plt+0xfcf8>
   21550:	b	21480 <__assert_fail@plt+0xfd0c>
   21554:	mov	r0, #0
   21558:	sub	sp, fp, #28
   2155c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21560:	mov	r0, #12
   21564:	sub	sp, fp, #28
   21568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2156c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21570:	add	fp, sp, #24
   21574:	sub	sp, sp, #8
   21578:	mov	r8, r2
   2157c:	mov	r5, r1
   21580:	mov	r6, r0
   21584:	mov	r0, #0
   21588:	str	r0, [sp, #4]
   2158c:	add	r0, sp, #4
   21590:	mov	r1, r6
   21594:	mov	r2, r5
   21598:	bl	1fe58 <__assert_fail@plt+0xe6e4>
   2159c:	ldr	r9, [sp, #4]
   215a0:	cmp	r9, #0
   215a4:	bne	21630 <__assert_fail@plt+0xfebc>
   215a8:	mov	r7, r0
   215ac:	ldr	r0, [r7, #28]!
   215b0:	cmp	r0, #0
   215b4:	bne	2161c <__assert_fail@plt+0xfea8>
   215b8:	ldr	r1, [r5, #4]
   215bc:	mov	r0, r7
   215c0:	bl	1c300 <__assert_fail@plt+0xab8c>
   215c4:	str	r0, [sp, #4]
   215c8:	mov	r9, #12
   215cc:	cmp	r0, #0
   215d0:	bne	21630 <__assert_fail@plt+0xfebc>
   215d4:	ldr	r0, [r5, #4]
   215d8:	cmp	r0, #1
   215dc:	blt	2161c <__assert_fail@plt+0xfea8>
   215e0:	mov	r4, #0
   215e4:	ldr	r0, [r5, #8]
   215e8:	ldr	r0, [r0, r4, lsl #2]
   215ec:	add	r0, r0, r0, lsl #1
   215f0:	ldr	r1, [r6, #28]
   215f4:	add	r1, r1, r0, lsl #2
   215f8:	mov	r0, r7
   215fc:	bl	1c58c <__assert_fail@plt+0xae18>
   21600:	cmp	r0, #0
   21604:	bne	2163c <__assert_fail@plt+0xfec8>
   21608:	add	r4, r4, #1
   2160c:	ldr	r1, [r5, #4]
   21610:	cmp	r4, r1
   21614:	blt	215e4 <__assert_fail@plt+0xfe70>
   21618:	str	r0, [sp, #4]
   2161c:	mov	r0, r5
   21620:	mov	r1, r8
   21624:	mov	r2, r7
   21628:	bl	21b78 <__assert_fail@plt+0x10404>
   2162c:	mov	r9, r0
   21630:	mov	r0, r9
   21634:	sub	sp, fp, #24
   21638:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2163c:	str	r0, [sp, #4]
   21640:	b	21630 <__assert_fail@plt+0xfebc>
   21644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21648:	add	fp, sp, #28
   2164c:	sub	sp, sp, #12
   21650:	str	r2, [sp, #4]
   21654:	mov	ip, r0
   21658:	ldr	r0, [r3, #4]
   2165c:	cmp	r0, #1
   21660:	blt	2187c <__assert_fail@plt+0x10108>
   21664:	mov	r9, r1
   21668:	mov	r8, #0
   2166c:	str	ip, [sp]
   21670:	str	r3, [sp, #8]
   21674:	b	2168c <__assert_fail@plt+0xff18>
   21678:	add	r8, r8, #1
   2167c:	ldr	r3, [sp, #8]
   21680:	ldr	r0, [r3, #4]
   21684:	cmp	r8, r0
   21688:	bge	2187c <__assert_fail@plt+0x10108>
   2168c:	ldr	r0, [r3, #8]
   21690:	ldr	r0, [r0, r8, lsl #2]
   21694:	add	r0, r0, r0, lsl #1
   21698:	ldr	r1, [fp, #8]
   2169c:	add	r1, r1, r0, lsl #3
   216a0:	ldr	r2, [r1, #8]
   216a4:	ldr	r3, [fp, #12]
   216a8:	cmp	r2, r3
   216ac:	bge	21678 <__assert_fail@plt+0xff04>
   216b0:	ldr	r1, [r1, #4]
   216b4:	ldr	r2, [fp, #12]
   216b8:	cmp	r1, r2
   216bc:	blt	21678 <__assert_fail@plt+0xff04>
   216c0:	ldr	r1, [fp, #8]
   216c4:	ldr	r2, [r1, r0, lsl #3]!
   216c8:	ldr	r0, [ip]
   216cc:	ldr	sl, [r0, r2, lsl #3]
   216d0:	ldr	r1, [r1, #12]
   216d4:	ldr	r2, [fp, #12]
   216d8:	cmp	r1, r2
   216dc:	bne	21744 <__assert_fail@plt+0xffd0>
   216e0:	ldr	r1, [r9, #4]
   216e4:	cmp	r1, #1
   216e8:	blt	21678 <__assert_fail@plt+0xff04>
   216ec:	ldmib	r9, {r2, r3}
   216f0:	mvn	r6, #0
   216f4:	mov	r5, #0
   216f8:	mvn	r1, #0
   216fc:	b	21718 <__assert_fail@plt+0xffa4>
   21700:	ldr	r4, [r0, r7, lsl #3]
   21704:	cmp	sl, r4
   21708:	moveq	r6, r7
   2170c:	add	r5, r5, #1
   21710:	cmp	r5, r2
   21714:	bge	217b4 <__assert_fail@plt+0x10040>
   21718:	ldr	r7, [r3, r5, lsl #2]
   2171c:	add	r4, r0, r7, lsl #3
   21720:	ldrb	r4, [r4, #4]
   21724:	cmp	r4, #9
   21728:	beq	21700 <__assert_fail@plt+0xff8c>
   2172c:	cmp	r4, #8
   21730:	bne	2170c <__assert_fail@plt+0xff98>
   21734:	ldr	r4, [r0, r7, lsl #3]
   21738:	cmp	sl, r4
   2173c:	moveq	r1, r7
   21740:	b	2170c <__assert_fail@plt+0xff98>
   21744:	ldr	r0, [r9, #4]
   21748:	cmp	r0, #1
   2174c:	blt	21678 <__assert_fail@plt+0xff04>
   21750:	mov	r5, #0
   21754:	b	21768 <__assert_fail@plt+0xfff4>
   21758:	ldr	r0, [r9, #4]
   2175c:	add	r5, r5, #1
   21760:	cmp	r5, r0
   21764:	bge	21678 <__assert_fail@plt+0xff04>
   21768:	ldr	r0, [r9, #8]
   2176c:	ldr	r1, [r0, r5, lsl #2]
   21770:	ldr	r0, [ip]
   21774:	add	r2, r0, r1, lsl #3
   21778:	ldrb	r2, [r2, #4]
   2177c:	orr	r2, r2, #1
   21780:	cmp	r2, #9
   21784:	bne	21758 <__assert_fail@plt+0xffe4>
   21788:	ldr	r0, [r0, r1, lsl #3]
   2178c:	cmp	sl, r0
   21790:	bne	21758 <__assert_fail@plt+0xffe4>
   21794:	mov	r0, ip
   21798:	mov	r2, r9
   2179c:	ldr	r3, [sp, #4]
   217a0:	bl	21d68 <__assert_fail@plt+0x105f4>
   217a4:	ldr	ip, [sp]
   217a8:	cmp	r0, #0
   217ac:	beq	21758 <__assert_fail@plt+0xffe4>
   217b0:	b	21880 <__assert_fail@plt+0x1010c>
   217b4:	cmp	r1, #0
   217b8:	bmi	217d8 <__assert_fail@plt+0x10064>
   217bc:	mov	r0, ip
   217c0:	mov	r2, r9
   217c4:	ldr	r3, [sp, #4]
   217c8:	bl	21d68 <__assert_fail@plt+0x105f4>
   217cc:	ldr	ip, [sp]
   217d0:	cmp	r0, #0
   217d4:	bne	21880 <__assert_fail@plt+0x1010c>
   217d8:	cmp	r6, #0
   217dc:	bmi	21678 <__assert_fail@plt+0xff04>
   217e0:	ldr	r0, [r9, #4]
   217e4:	cmp	r0, #1
   217e8:	blt	21678 <__assert_fail@plt+0xff04>
   217ec:	mov	sl, #0
   217f0:	b	2180c <__assert_fail@plt+0x10098>
   217f4:	mov	r6, r5
   217f8:	mov	ip, r7
   217fc:	ldr	r0, [r9, #4]
   21800:	add	sl, sl, #1
   21804:	cmp	sl, r0
   21808:	bge	21678 <__assert_fail@plt+0xff04>
   2180c:	ldr	r0, [r9, #8]
   21810:	ldr	r4, [r0, sl, lsl #2]
   21814:	add	r5, r4, r4, lsl #1
   21818:	ldr	r0, [ip, #28]
   2181c:	add	r0, r0, r5, lsl #2
   21820:	mov	r1, r6
   21824:	mov	r7, ip
   21828:	bl	1ca0c <__assert_fail@plt+0xb298>
   2182c:	cmp	r0, #0
   21830:	bne	217f8 <__assert_fail@plt+0x10084>
   21834:	ldr	r0, [r7, #24]
   21838:	add	r0, r0, r5, lsl #2
   2183c:	mov	r5, r6
   21840:	mov	r1, r6
   21844:	bl	1ca0c <__assert_fail@plt+0xb298>
   21848:	cmp	r0, #0
   2184c:	bne	217f4 <__assert_fail@plt+0x10080>
   21850:	mov	r0, r7
   21854:	mov	r1, r4
   21858:	mov	r2, r9
   2185c:	ldr	r3, [sp, #4]
   21860:	bl	21d68 <__assert_fail@plt+0x105f4>
   21864:	cmp	r0, #0
   21868:	bne	21880 <__assert_fail@plt+0x1010c>
   2186c:	sub	sl, sl, #1
   21870:	mov	r6, r5
   21874:	ldr	ip, [sp]
   21878:	b	217fc <__assert_fail@plt+0x10088>
   2187c:	mov	r0, #0
   21880:	sub	sp, fp, #28
   21884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2188c:	add	fp, sp, #28
   21890:	sub	sp, sp, #84	; 0x54
   21894:	mov	r4, r3
   21898:	mov	r7, r2
   2189c:	str	r1, [sp, #52]	; 0x34
   218a0:	ldr	r1, [r0, #84]	; 0x54
   218a4:	str	r1, [sp, #48]	; 0x30
   218a8:	str	r0, [sp, #44]	; 0x2c
   218ac:	mov	r1, r2
   218b0:	bl	1f088 <__assert_fail@plt+0xd914>
   218b4:	str	r0, [sp, #20]
   218b8:	mov	sl, #0
   218bc:	cmn	r0, #1
   218c0:	beq	21b5c <__assert_fail@plt+0x103e8>
   218c4:	str	sl, [sp, #56]	; 0x38
   218c8:	str	r4, [sp, #24]
   218cc:	ldr	r0, [r4, #4]
   218d0:	cmp	r0, #1
   218d4:	blt	21b5c <__assert_fail@plt+0x103e8>
   218d8:	add	r0, r7, #1
   218dc:	str	r0, [sp, #8]
   218e0:	add	r0, sp, #56	; 0x38
   218e4:	add	r0, r0, #16
   218e8:	str	r0, [sp, #28]
   218ec:	ldr	r2, [sp, #52]	; 0x34
   218f0:	add	r0, r2, #16
   218f4:	str	r0, [sp, #32]
   218f8:	ldr	r0, [sp, #20]
   218fc:	add	r0, r0, r0, lsl #1
   21900:	str	r0, [sp, #16]
   21904:	lsl	r0, r0, #3
   21908:	str	r0, [sp, #12]
   2190c:	mov	r1, #0
   21910:	ldr	sl, [sp, #24]
   21914:	ldr	r3, [sp, #48]	; 0x30
   21918:	str	r7, [sp, #40]	; 0x28
   2191c:	b	21934 <__assert_fail@plt+0x101c0>
   21920:	ldr	r1, [sp, #36]	; 0x24
   21924:	add	r1, r1, #1
   21928:	ldr	r0, [sl, #4]
   2192c:	cmp	r1, r0
   21930:	bge	21b44 <__assert_fail@plt+0x103d0>
   21934:	ldr	r0, [sl, #8]
   21938:	str	r1, [sp, #36]	; 0x24
   2193c:	ldr	r9, [r0, r1, lsl #2]
   21940:	ldr	r0, [r3]
   21944:	add	r0, r0, r9, lsl #3
   21948:	ldrb	r0, [r0, #4]
   2194c:	ldr	r1, [r2, #8]
   21950:	cmp	r9, r1
   21954:	bne	21970 <__assert_fail@plt+0x101fc>
   21958:	cmp	r0, #4
   2195c:	bne	21920 <__assert_fail@plt+0x101ac>
   21960:	ldr	r0, [r2, #12]
   21964:	cmp	r0, r7
   21968:	bne	21978 <__assert_fail@plt+0x10204>
   2196c:	b	21920 <__assert_fail@plt+0x101ac>
   21970:	cmp	r0, #4
   21974:	bne	21920 <__assert_fail@plt+0x101ac>
   21978:	ldr	r0, [sp, #44]	; 0x2c
   2197c:	ldr	r0, [r0, #116]	; 0x74
   21980:	ldr	r1, [sp, #16]
   21984:	add	r5, r0, r1, lsl #3
   21988:	ldr	r4, [sp, #12]
   2198c:	ldr	r8, [sp, #20]
   21990:	b	219b0 <__assert_fail@plt+0x1023c>
   21994:	mov	r0, r5
   21998:	add	r4, r4, #24
   2199c:	add	r5, r0, #24
   219a0:	add	r8, r8, #1
   219a4:	ldrb	r0, [r0, #20]
   219a8:	cmp	r0, #0
   219ac:	beq	21920 <__assert_fail@plt+0x101ac>
   219b0:	ldr	r0, [r5]
   219b4:	cmp	r0, r9
   219b8:	bne	21994 <__assert_fail@plt+0x10220>
   219bc:	ldr	r0, [r5, #8]
   219c0:	ldr	r1, [r5, #12]
   219c4:	subs	r0, r1, r0
   219c8:	add	r6, r0, r7
   219cc:	beq	219dc <__assert_fail@plt+0x10268>
   219d0:	ldr	r0, [r3, #12]
   219d4:	add	r0, r0, r9, lsl #2
   219d8:	b	219ec <__assert_fail@plt+0x10278>
   219dc:	ldr	r0, [r3, #20]
   219e0:	add	r1, r9, r9, lsl #1
   219e4:	add	r0, r0, r1, lsl #2
   219e8:	ldr	r0, [r0, #8]
   219ec:	ldr	r1, [r2, #12]
   219f0:	cmp	r6, r1
   219f4:	bgt	21994 <__assert_fail@plt+0x10220>
   219f8:	ldr	r1, [r2]
   219fc:	ldr	r1, [r1, r6, lsl #2]
   21a00:	cmp	r1, #0
   21a04:	beq	21994 <__assert_fail@plt+0x10220>
   21a08:	ldr	r7, [r0]
   21a0c:	add	r0, r1, #4
   21a10:	mov	r1, r7
   21a14:	bl	1ca0c <__assert_fail@plt+0xb298>
   21a18:	cmp	r0, #0
   21a1c:	beq	21b30 <__assert_fail@plt+0x103bc>
   21a20:	str	r7, [sp]
   21a24:	str	r6, [sp, #4]
   21a28:	ldr	r0, [sp, #44]	; 0x2c
   21a2c:	ldr	r1, [sp, #32]
   21a30:	mov	r2, r9
   21a34:	ldr	r7, [sp, #40]	; 0x28
   21a38:	mov	r3, r7
   21a3c:	bl	21f1c <__assert_fail@plt+0x107a8>
   21a40:	cmp	r0, #0
   21a44:	mov	r0, r5
   21a48:	ldr	r2, [sp, #52]	; 0x34
   21a4c:	ldr	r3, [sp, #48]	; 0x30
   21a50:	bne	21998 <__assert_fail@plt+0x10224>
   21a54:	ldr	r0, [sp, #56]	; 0x38
   21a58:	cmp	r0, #0
   21a5c:	bne	21a90 <__assert_fail@plt+0x1031c>
   21a60:	mov	r0, r2
   21a64:	mov	r1, #12
   21a68:	vld1.32	{d16-d17}, [r0], r1
   21a6c:	vld1.32	{d18-d19}, [r0]
   21a70:	add	r0, sp, #56	; 0x38
   21a74:	vst1.64	{d16-d17}, [r0], r1
   21a78:	vst1.32	{d18-d19}, [r0]
   21a7c:	ldr	r0, [sp, #28]
   21a80:	ldr	r1, [sp, #32]
   21a84:	bl	1c990 <__assert_fail@plt+0xb21c>
   21a88:	cmp	r0, #0
   21a8c:	bne	21b68 <__assert_fail@plt+0x103f4>
   21a90:	str	r7, [sp, #68]	; 0x44
   21a94:	str	r9, [sp, #64]	; 0x40
   21a98:	ldr	r0, [sp, #28]
   21a9c:	mov	r1, r8
   21aa0:	bl	1c7a4 <__assert_fail@plt+0xb030>
   21aa4:	cmp	r0, #0
   21aa8:	beq	21b70 <__assert_fail@plt+0x103fc>
   21aac:	mov	r0, r7
   21ab0:	ldr	r7, [sp, #56]	; 0x38
   21ab4:	ldr	r5, [r7, r0, lsl #2]
   21ab8:	ldr	r0, [sp, #44]	; 0x2c
   21abc:	add	r1, sp, #56	; 0x38
   21ac0:	bl	2112c <__assert_fail@plt+0xf9b8>
   21ac4:	cmp	r0, #0
   21ac8:	bne	21b68 <__assert_fail@plt+0x103f4>
   21acc:	ldr	r0, [sp, #52]	; 0x34
   21ad0:	ldr	r1, [r0, #4]
   21ad4:	cmp	r1, #0
   21ad8:	beq	21af4 <__assert_fail@plt+0x10380>
   21adc:	ldr	r0, [sp, #48]	; 0x30
   21ae0:	mov	r2, r7
   21ae4:	ldr	r3, [sp, #8]
   21ae8:	bl	21244 <__assert_fail@plt+0xfad0>
   21aec:	cmp	r0, #0
   21af0:	bne	21b68 <__assert_fail@plt+0x103f4>
   21af4:	ldr	r0, [sp, #40]	; 0x28
   21af8:	str	r5, [r7, r0, lsl #2]
   21afc:	mov	r7, r0
   21b00:	ldr	r5, [sp, #28]
   21b04:	mov	r0, r5
   21b08:	mov	r1, r8
   21b0c:	bl	1ca0c <__assert_fail@plt+0xb298>
   21b10:	sub	r1, r0, #1
   21b14:	mov	r0, r5
   21b18:	bl	1ce20 <__assert_fail@plt+0xb6ac>
   21b1c:	ldr	r0, [sp, #44]	; 0x2c
   21b20:	ldr	r0, [r0, #116]	; 0x74
   21b24:	add	r0, r0, r4
   21b28:	ldr	sl, [sp, #24]
   21b2c:	b	21b38 <__assert_fail@plt+0x103c4>
   21b30:	mov	r0, r5
   21b34:	ldr	r7, [sp, #40]	; 0x28
   21b38:	ldr	r2, [sp, #52]	; 0x34
   21b3c:	ldr	r3, [sp, #48]	; 0x30
   21b40:	b	21998 <__assert_fail@plt+0x10224>
   21b44:	mov	sl, #0
   21b48:	ldr	r0, [sp, #56]	; 0x38
   21b4c:	cmp	r0, #0
   21b50:	beq	21b5c <__assert_fail@plt+0x103e8>
   21b54:	ldr	r0, [sp, #80]	; 0x50
   21b58:	bl	13f1c <__assert_fail@plt+0x27a8>
   21b5c:	mov	r0, sl
   21b60:	sub	sp, fp, #28
   21b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b68:	mov	sl, r0
   21b6c:	b	21b48 <__assert_fail@plt+0x103d4>
   21b70:	mov	sl, #12
   21b74:	b	21b48 <__assert_fail@plt+0x103d4>
   21b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b7c:	add	fp, sp, #28
   21b80:	sub	sp, sp, #4
   21b84:	mov	r9, r2
   21b88:	mov	r8, r0
   21b8c:	ldr	r2, [r1, #4]
   21b90:	mov	r0, #0
   21b94:	cmp	r2, #0
   21b98:	beq	21d54 <__assert_fail@plt+0x105e0>
   21b9c:	mov	sl, r1
   21ba0:	ldr	r1, [r9, #4]
   21ba4:	cmp	r1, #0
   21ba8:	beq	21d54 <__assert_fail@plt+0x105e0>
   21bac:	add	r0, r1, r2
   21bb0:	ldm	r8, {r1, r2}
   21bb4:	add	r2, r2, r0
   21bb8:	cmp	r2, r1
   21bbc:	ble	21be0 <__assert_fail@plt+0x1046c>
   21bc0:	add	r4, r1, r0
   21bc4:	lsl	r1, r4, #2
   21bc8:	ldr	r0, [r8, #8]
   21bcc:	bl	23f00 <__assert_fail@plt+0x1278c>
   21bd0:	cmp	r0, #0
   21bd4:	beq	21d5c <__assert_fail@plt+0x105e8>
   21bd8:	str	r4, [r8]
   21bdc:	str	r0, [r8, #8]
   21be0:	ldr	r1, [r8, #4]
   21be4:	ldr	r6, [sl, #4]
   21be8:	ldr	r0, [sl, #8]
   21bec:	add	r3, r6, r1
   21bf0:	ldr	r5, [r9, #4]
   21bf4:	ldr	r2, [r9, #8]
   21bf8:	add	ip, r3, r5
   21bfc:	sub	r7, r1, #1
   21c00:	sub	r3, r5, #1
   21c04:	sub	r4, r6, #1
   21c08:	ldr	r1, [r2, r3, lsl #2]
   21c0c:	ldr	r6, [r0, r4, lsl #2]
   21c10:	cmp	r6, r1
   21c14:	beq	21c30 <__assert_fail@plt+0x104bc>
   21c18:	blt	21c60 <__assert_fail@plt+0x104ec>
   21c1c:	sub	r1, r4, #1
   21c20:	cmp	r4, #0
   21c24:	mov	r4, r1
   21c28:	bgt	21c08 <__assert_fail@plt+0x10494>
   21c2c:	b	21cb0 <__assert_fail@plt+0x1053c>
   21c30:	cmp	r7, #0
   21c34:	bmi	21c90 <__assert_fail@plt+0x1051c>
   21c38:	ldr	r5, [r8, #8]
   21c3c:	mov	r1, r7
   21c40:	ldr	r7, [r5, r1, lsl #2]
   21c44:	cmp	r7, r6
   21c48:	ble	21c6c <__assert_fail@plt+0x104f8>
   21c4c:	sub	r7, r1, #1
   21c50:	cmp	r1, #0
   21c54:	mov	r1, r7
   21c58:	bgt	21c40 <__assert_fail@plt+0x104cc>
   21c5c:	b	21c90 <__assert_fail@plt+0x1051c>
   21c60:	subs	r3, r3, #1
   21c64:	bge	21c08 <__assert_fail@plt+0x10494>
   21c68:	b	21cb0 <__assert_fail@plt+0x1053c>
   21c6c:	ldr	r7, [r8, #8]
   21c70:	ldr	r7, [r7, r1, lsl #2]
   21c74:	cmp	r7, r6
   21c78:	mov	r7, r1
   21c7c:	bne	21c90 <__assert_fail@plt+0x1051c>
   21c80:	mov	r7, r1
   21c84:	cmp	r4, #1
   21c88:	bge	21ca4 <__assert_fail@plt+0x10530>
   21c8c:	b	21cb0 <__assert_fail@plt+0x1053c>
   21c90:	ldr	r1, [r8, #8]
   21c94:	sub	ip, ip, #1
   21c98:	str	r6, [r1, ip, lsl #2]
   21c9c:	cmp	r4, #1
   21ca0:	blt	21cb0 <__assert_fail@plt+0x1053c>
   21ca4:	subs	r3, r3, #1
   21ca8:	sub	r4, r4, #1
   21cac:	bge	21c08 <__assert_fail@plt+0x10494>
   21cb0:	ldr	r1, [sl, #4]
   21cb4:	ldr	r7, [r8, #4]
   21cb8:	add	r0, r7, r1
   21cbc:	ldr	r3, [r9, #4]
   21cc0:	add	r0, r0, r3
   21cc4:	sub	r0, r0, #1
   21cc8:	sub	r6, r0, ip
   21ccc:	add	r2, r6, #1
   21cd0:	add	r5, r2, r7
   21cd4:	str	r5, [r8, #4]
   21cd8:	cmp	r7, #1
   21cdc:	blt	21d40 <__assert_fail@plt+0x105cc>
   21ce0:	cmp	r6, #0
   21ce4:	bmi	21d40 <__assert_fail@plt+0x105cc>
   21ce8:	add	r3, r7, r3
   21cec:	add	r1, r3, r1
   21cf0:	sub	r3, r1, ip
   21cf4:	ldr	r1, [r8, #8]
   21cf8:	add	r3, r1, r3, lsl #2
   21cfc:	sub	r7, r7, #1
   21d00:	ldr	r6, [r1, r7, lsl #2]
   21d04:	ldr	r5, [r1, r0, lsl #2]
   21d08:	cmp	r5, r6
   21d0c:	bgt	21d28 <__assert_fail@plt+0x105b4>
   21d10:	str	r6, [r3, r7, lsl #2]
   21d14:	sub	r6, r7, #1
   21d18:	cmp	r7, #0
   21d1c:	mov	r7, r6
   21d20:	bgt	21d00 <__assert_fail@plt+0x1058c>
   21d24:	b	21d40 <__assert_fail@plt+0x105cc>
   21d28:	str	r5, [r3, r7, lsl #2]
   21d2c:	sub	r3, r3, #4
   21d30:	subs	r2, r2, #1
   21d34:	sub	r0, r0, #1
   21d38:	bne	21d00 <__assert_fail@plt+0x1058c>
   21d3c:	mov	r2, #0
   21d40:	ldr	r0, [r8, #8]
   21d44:	add	r1, r0, ip, lsl #2
   21d48:	lsl	r2, r2, #2
   21d4c:	bl	1148c <memcpy@plt>
   21d50:	mov	r0, #0
   21d54:	sub	sp, fp, #28
   21d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d5c:	mov	r0, #12
   21d60:	sub	sp, fp, #28
   21d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d6c:	add	fp, sp, #28
   21d70:	sub	sp, sp, #28
   21d74:	str	r3, [sp]
   21d78:	mov	r6, r1
   21d7c:	str	r0, [sp, #12]
   21d80:	ldr	r0, [r0, #28]
   21d84:	mov	r4, #0
   21d88:	str	r4, [sp, #20]
   21d8c:	str	r4, [sp, #16]
   21d90:	str	r4, [sp, #24]
   21d94:	add	r1, r1, r1, lsl #1
   21d98:	add	r1, r0, r1, lsl #2
   21d9c:	mov	r8, r1
   21da0:	ldr	r0, [r8, #4]!
   21da4:	cmp	r0, #1
   21da8:	blt	21f00 <__assert_fail@plt+0x1078c>
   21dac:	str	r2, [sp, #4]
   21db0:	str	r1, [sp, #8]
   21db4:	add	sl, r1, #8
   21db8:	mov	r5, #0
   21dbc:	b	21e04 <__assert_fail@plt+0x10690>
   21dc0:	ldr	r0, [sp, #4]
   21dc4:	mov	r1, r9
   21dc8:	bl	1ca0c <__assert_fail@plt+0xb298>
   21dcc:	cmp	r0, #0
   21dd0:	beq	21e68 <__assert_fail@plt+0x106f4>
   21dd4:	ldr	r0, [sp, #12]
   21dd8:	ldr	r0, [r0, #28]
   21ddc:	add	r2, r0, r7, lsl #2
   21de0:	add	r0, sp, #16
   21de4:	ldr	r1, [sp]
   21de8:	bl	21b78 <__assert_fail@plt+0x10404>
   21dec:	cmp	r0, #0
   21df0:	bne	21f14 <__assert_fail@plt+0x107a0>
   21df4:	add	r5, r5, #1
   21df8:	ldr	r0, [r8]
   21dfc:	cmp	r5, r0
   21e00:	bge	21e9c <__assert_fail@plt+0x10728>
   21e04:	ldr	r0, [sl]
   21e08:	ldr	r0, [r0, r5, lsl #2]
   21e0c:	cmp	r0, r6
   21e10:	beq	21df4 <__assert_fail@plt+0x10680>
   21e14:	ldr	r1, [sp, #12]
   21e18:	ldr	r1, [r1]
   21e1c:	add	r1, r1, r0, lsl #3
   21e20:	ldrb	r1, [r1, #4]
   21e24:	tst	r1, #8
   21e28:	beq	21df4 <__assert_fail@plt+0x10680>
   21e2c:	ldr	r1, [sp, #12]
   21e30:	ldr	r1, [r1, #20]
   21e34:	add	r7, r0, r0, lsl #1
   21e38:	add	r0, r1, r7, lsl #2
   21e3c:	ldr	r1, [r0, #4]
   21e40:	ldr	r0, [r0, #8]
   21e44:	ldr	r9, [r0]
   21e48:	mvn	r4, #0
   21e4c:	cmp	r1, #2
   21e50:	ldrge	r4, [r0, #4]
   21e54:	ldr	r0, [sp, #8]
   21e58:	mov	r1, r9
   21e5c:	bl	1ca0c <__assert_fail@plt+0xb298>
   21e60:	cmp	r0, #0
   21e64:	beq	21dc0 <__assert_fail@plt+0x1064c>
   21e68:	cmp	r4, #1
   21e6c:	blt	21df4 <__assert_fail@plt+0x10680>
   21e70:	ldr	r0, [sp, #8]
   21e74:	mov	r1, r4
   21e78:	bl	1ca0c <__assert_fail@plt+0xb298>
   21e7c:	cmp	r0, #0
   21e80:	bne	21df4 <__assert_fail@plt+0x10680>
   21e84:	ldr	r0, [sp, #4]
   21e88:	mov	r1, r4
   21e8c:	bl	1ca0c <__assert_fail@plt+0xb298>
   21e90:	cmp	r0, #0
   21e94:	bne	21dd4 <__assert_fail@plt+0x10660>
   21e98:	b	21df4 <__assert_fail@plt+0x10680>
   21e9c:	cmp	r0, #1
   21ea0:	blt	21efc <__assert_fail@plt+0x10788>
   21ea4:	mov	r6, #0
   21ea8:	add	r4, sp, #16
   21eac:	ldr	r7, [sp, #4]
   21eb0:	b	21ec4 <__assert_fail@plt+0x10750>
   21eb4:	add	r6, r6, #1
   21eb8:	ldr	r0, [r8]
   21ebc:	cmp	r6, r0
   21ec0:	bge	21efc <__assert_fail@plt+0x10788>
   21ec4:	ldr	r0, [sl]
   21ec8:	ldr	r5, [r0, r6, lsl #2]
   21ecc:	mov	r0, r4
   21ed0:	mov	r1, r5
   21ed4:	bl	1ca0c <__assert_fail@plt+0xb298>
   21ed8:	cmp	r0, #0
   21edc:	bne	21eb4 <__assert_fail@plt+0x10740>
   21ee0:	mov	r0, r7
   21ee4:	mov	r1, r5
   21ee8:	bl	1ca0c <__assert_fail@plt+0xb298>
   21eec:	sub	r1, r0, #1
   21ef0:	mov	r0, r7
   21ef4:	bl	1ce20 <__assert_fail@plt+0xb6ac>
   21ef8:	b	21eb4 <__assert_fail@plt+0x10740>
   21efc:	mov	r4, #0
   21f00:	ldr	r0, [sp, #24]
   21f04:	bl	13f1c <__assert_fail@plt+0x27a8>
   21f08:	mov	r0, r4
   21f0c:	sub	sp, fp, #28
   21f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f14:	mov	r4, r0
   21f18:	b	21f00 <__assert_fail@plt+0x1078c>
   21f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f20:	add	fp, sp, #28
   21f24:	sub	sp, sp, #20
   21f28:	str	r2, [sp, #12]
   21f2c:	mov	r6, r1
   21f30:	mov	r7, r0
   21f34:	str	r3, [sp, #16]
   21f38:	mov	r1, r3
   21f3c:	bl	1f088 <__assert_fail@plt+0xd914>
   21f40:	str	r0, [sp, #8]
   21f44:	ldr	r1, [fp, #12]
   21f48:	mov	r0, r7
   21f4c:	bl	1f088 <__assert_fail@plt+0xd914>
   21f50:	mov	r4, r0
   21f54:	ldr	r0, [r6, #4]
   21f58:	cmp	r0, #1
   21f5c:	blt	21fe0 <__assert_fail@plt+0x1086c>
   21f60:	ldr	sl, [r7, #84]	; 0x54
   21f64:	mov	r5, #0
   21f68:	ldr	r0, [r6, #8]
   21f6c:	ldr	r1, [r0, r5, lsl #2]
   21f70:	add	r0, r1, r1, lsl #1
   21f74:	ldr	r2, [r7, #116]	; 0x74
   21f78:	ldr	r0, [r2, r0, lsl #3]
   21f7c:	ldr	r2, [sl]
   21f80:	ldr	r9, [r2, r0, lsl #3]
   21f84:	ldr	r0, [sp, #16]
   21f88:	str	r0, [sp]
   21f8c:	ldr	r0, [sp, #8]
   21f90:	str	r0, [sp, #4]
   21f94:	mov	r0, r7
   21f98:	mov	r2, r9
   21f9c:	ldr	r3, [sp, #12]
   21fa0:	bl	21ff8 <__assert_fail@plt+0x10884>
   21fa4:	mov	r8, r0
   21fa8:	ldr	r0, [r6, #8]
   21fac:	ldr	r1, [r0, r5, lsl #2]
   21fb0:	ldr	r0, [fp, #12]
   21fb4:	stm	sp, {r0, r4}
   21fb8:	mov	r0, r7
   21fbc:	mov	r2, r9
   21fc0:	ldr	r3, [fp, #8]
   21fc4:	bl	21ff8 <__assert_fail@plt+0x10884>
   21fc8:	cmp	r0, r8
   21fcc:	bne	21fec <__assert_fail@plt+0x10878>
   21fd0:	add	r5, r5, #1
   21fd4:	ldr	r0, [r6, #4]
   21fd8:	cmp	r5, r0
   21fdc:	blt	21f68 <__assert_fail@plt+0x107f4>
   21fe0:	mov	r0, #0
   21fe4:	sub	sp, fp, #28
   21fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21fec:	mov	r0, #1
   21ff0:	sub	sp, fp, #28
   21ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ff8:	push	{r4, r5, fp, lr}
   21ffc:	add	fp, sp, #8
   22000:	sub	sp, sp, #8
   22004:	ldr	r4, [r0, #116]	; 0x74
   22008:	add	r1, r1, r1, lsl #1
   2200c:	add	r4, r4, r1, lsl #3
   22010:	ldr	ip, [r4, #8]
   22014:	mvn	r1, #0
   22018:	ldr	lr, [fp, #8]
   2201c:	cmp	ip, lr
   22020:	bgt	22070 <__assert_fail@plt+0x108fc>
   22024:	ldr	r4, [r4, #12]
   22028:	mov	r1, #1
   2202c:	cmp	r4, lr
   22030:	blt	22070 <__assert_fail@plt+0x108fc>
   22034:	sub	r1, r4, lr
   22038:	clz	r1, r1
   2203c:	lsr	r4, r1, #5
   22040:	mov	r5, #1
   22044:	lsl	r1, r4, #1
   22048:	cmp	ip, lr
   2204c:	orreq	r1, r5, r4, lsl #1
   22050:	cmp	r1, #0
   22054:	beq	2206c <__assert_fail@plt+0x108f8>
   22058:	ldr	r5, [fp, #12]
   2205c:	str	r5, [sp]
   22060:	bl	2207c <__assert_fail@plt+0x10908>
   22064:	sub	sp, fp, #8
   22068:	pop	{r4, r5, fp, pc}
   2206c:	mov	r1, #0
   22070:	mov	r0, r1
   22074:	sub	sp, fp, #8
   22078:	pop	{r4, r5, fp, pc}
   2207c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22080:	add	fp, sp, #28
   22084:	sub	sp, sp, #36	; 0x24
   22088:	mov	r6, r2
   2208c:	mov	r5, r1
   22090:	mov	r7, r0
   22094:	ldr	r4, [r0, #84]	; 0x54
   22098:	ldr	r0, [r4, #24]
   2209c:	str	r3, [sp, #32]
   220a0:	add	r1, r3, r3, lsl #1
   220a4:	add	r0, r0, r1, lsl #2
   220a8:	mov	r2, r0
   220ac:	ldr	r1, [r2, #4]!
   220b0:	str	r2, [sp, #24]
   220b4:	cmp	r1, #1
   220b8:	blt	22260 <__assert_fail@plt+0x10aec>
   220bc:	mov	r1, #1
   220c0:	mvn	r2, r1, lsl r6
   220c4:	str	r2, [sp, #16]
   220c8:	lsl	r1, r1, r6
   220cc:	str	r1, [sp, #20]
   220d0:	mov	sl, #0
   220d4:	cmp	r6, #31
   220d8:	mov	r1, #0
   220dc:	movwgt	r1, #1
   220e0:	and	r2, r5, #2
   220e4:	str	r2, [sp, #8]
   220e8:	orr	r1, r1, r2, lsr #1
   220ec:	str	r1, [sp, #12]
   220f0:	add	r0, r0, #8
   220f4:	str	r0, [sp, #28]
   220f8:	and	r0, r5, #1
   220fc:	str	r0, [sp, #4]
   22100:	b	22118 <__assert_fail@plt+0x109a4>
   22104:	ldr	r0, [sp, #24]
   22108:	ldr	r0, [r0]
   2210c:	add	sl, sl, #1
   22110:	cmp	sl, r0
   22114:	bge	22260 <__assert_fail@plt+0x10aec>
   22118:	ldr	r0, [sp, #28]
   2211c:	ldr	r0, [r0]
   22120:	ldr	r8, [r0, sl, lsl #2]
   22124:	ldr	r0, [r4]
   22128:	add	r1, r0, r8, lsl #3
   2212c:	ldrb	r1, [r1, #4]
   22130:	cmp	r1, #9
   22134:	beq	22220 <__assert_fail@plt+0x10aac>
   22138:	cmp	r1, #8
   2213c:	beq	2223c <__assert_fail@plt+0x10ac8>
   22140:	cmp	r1, #4
   22144:	bne	22104 <__assert_fail@plt+0x10990>
   22148:	ldr	r0, [fp, #8]
   2214c:	cmn	r0, #1
   22150:	beq	22104 <__assert_fail@plt+0x10990>
   22154:	ldr	r0, [r7, #116]	; 0x74
   22158:	ldr	r1, [fp, #8]
   2215c:	add	r1, r1, r1, lsl #1
   22160:	add	r0, r0, r1, lsl #3
   22164:	add	r9, r0, #16
   22168:	b	2218c <__assert_fail@plt+0x10a18>
   2216c:	ldr	r0, [r9]
   22170:	ldr	r1, [sp, #16]
   22174:	and	r0, r0, r1
   22178:	str	r0, [r9]
   2217c:	ldrb	r0, [r9, #4]
   22180:	add	r9, r9, #24
   22184:	cmp	r0, #0
   22188:	beq	22104 <__assert_fail@plt+0x10990>
   2218c:	ldr	r0, [r9, #-16]
   22190:	cmp	r0, r8
   22194:	bne	2217c <__assert_fail@plt+0x10a08>
   22198:	cmp	r6, #31
   2219c:	bgt	221b0 <__assert_fail@plt+0x10a3c>
   221a0:	ldr	r0, [r9]
   221a4:	ldr	r1, [sp, #20]
   221a8:	tst	r0, r1
   221ac:	beq	2217c <__assert_fail@plt+0x10a08>
   221b0:	ldr	r0, [r4, #20]
   221b4:	add	r1, r8, r8, lsl #1
   221b8:	add	r0, r0, r1, lsl #2
   221bc:	ldr	r0, [r0, #8]
   221c0:	ldr	r3, [r0]
   221c4:	ldr	r0, [sp, #32]
   221c8:	cmp	r3, r0
   221cc:	beq	2226c <__assert_fail@plt+0x10af8>
   221d0:	ldr	r0, [fp, #8]
   221d4:	str	r0, [sp]
   221d8:	mov	r0, r7
   221dc:	mov	r1, r5
   221e0:	mov	r2, r6
   221e4:	bl	2207c <__assert_fail@plt+0x10908>
   221e8:	cmp	r0, #0
   221ec:	beq	22204 <__assert_fail@plt+0x10a90>
   221f0:	cmn	r0, #1
   221f4:	beq	22280 <__assert_fail@plt+0x10b0c>
   221f8:	cmp	r6, #31
   221fc:	ble	2216c <__assert_fail@plt+0x109f8>
   22200:	b	2217c <__assert_fail@plt+0x10a08>
   22204:	ldr	r0, [sp, #12]
   22208:	cmp	r0, #0
   2220c:	beq	2216c <__assert_fail@plt+0x109f8>
   22210:	ldr	r0, [sp, #8]
   22214:	cmp	r0, #0
   22218:	beq	2217c <__assert_fail@plt+0x10a08>
   2221c:	b	2227c <__assert_fail@plt+0x10b08>
   22220:	ldr	r1, [sp, #8]
   22224:	cmp	r1, #0
   22228:	beq	22104 <__assert_fail@plt+0x10990>
   2222c:	ldr	r0, [r0, r8, lsl #3]
   22230:	cmp	r0, r6
   22234:	bne	22104 <__assert_fail@plt+0x10990>
   22238:	b	2227c <__assert_fail@plt+0x10b08>
   2223c:	ldr	r1, [sp, #4]
   22240:	cmp	r1, #0
   22244:	beq	22104 <__assert_fail@plt+0x10990>
   22248:	ldr	r0, [r0, r8, lsl #3]
   2224c:	cmp	r0, r6
   22250:	bne	22104 <__assert_fail@plt+0x10990>
   22254:	mvn	r0, #0
   22258:	sub	sp, fp, #28
   2225c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22260:	ubfx	r0, r5, #1, #1
   22264:	sub	sp, fp, #28
   22268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2226c:	ldr	r0, [sp, #4]
   22270:	rsb	r0, r0, #0
   22274:	sub	sp, fp, #28
   22278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2227c:	mov	r0, #0
   22280:	sub	sp, fp, #28
   22284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22288:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2228c:	add	fp, sp, #24
   22290:	mov	r7, r3
   22294:	mov	r5, r2
   22298:	mov	r8, r1
   2229c:	mov	r2, r0
   222a0:	ldr	r6, [r0, #84]	; 0x54
   222a4:	mov	r0, r6
   222a8:	mov	r1, r5
   222ac:	bl	20068 <__assert_fail@plt+0xe8f4>
   222b0:	mov	r4, r0
   222b4:	cmp	r0, #1
   222b8:	blt	222f4 <__assert_fail@plt+0x10b80>
   222bc:	ldr	r1, [fp, #8]
   222c0:	add	r0, r4, r7
   222c4:	cmp	r0, r1
   222c8:	bgt	222f4 <__assert_fail@plt+0x10b80>
   222cc:	ldr	r1, [r8]
   222d0:	ldr	r0, [r1, r0, lsl #2]
   222d4:	cmp	r0, #0
   222d8:	beq	222fc <__assert_fail@plt+0x10b88>
   222dc:	ldr	r1, [r6, #12]
   222e0:	ldr	r1, [r1, r5, lsl #2]
   222e4:	add	r0, r0, #4
   222e8:	bl	1ca0c <__assert_fail@plt+0xb298>
   222ec:	cmp	r0, #0
   222f0:	moveq	r4, #0
   222f4:	mov	r0, r4
   222f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   222fc:	mov	r4, #0
   22300:	mov	r0, r4
   22304:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22308:	mov	r1, #16
   2230c:	mov	r2, #0
   22310:	add	r3, r0, #12
   22314:	str	r2, [r0]
   22318:	stmib	r0, {r1, r3}
   2231c:	bx	lr
   22320:	push	{r4, sl, fp, lr}
   22324:	add	fp, sp, #8
   22328:	mov	r4, r0
   2232c:	ldr	r0, [r0]
   22330:	cmp	r0, r1
   22334:	bcs	22368 <__assert_fail@plt+0x10bf4>
   22338:	add	r2, r4, #12
   2233c:	mov	r0, r4
   22340:	mov	r3, #8
   22344:	bl	242fc <__assert_fail@plt+0x12b88>
   22348:	mov	r1, r0
   2234c:	mov	r0, #1
   22350:	cmp	r1, #0
   22354:	popne	{r4, sl, fp, pc}
   22358:	mov	r0, r4
   2235c:	bl	22878 <__assert_fail@plt+0x11104>
   22360:	mov	r0, #0
   22364:	pop	{r4, sl, fp, pc}
   22368:	str	r1, [r4]
   2236c:	mov	r0, #1
   22370:	pop	{r4, sl, fp, pc}
   22374:	push	{r4, sl, fp, lr}
   22378:	add	fp, sp, #8
   2237c:	mov	r4, r0
   22380:	bl	228a0 <__assert_fail@plt+0x1112c>
   22384:	mov	r0, r4
   22388:	pop	{r4, sl, fp, lr}
   2238c:	b	22308 <__assert_fail@plt+0x10b94>
   22390:	cmp	r0, #0
   22394:	bxeq	lr
   22398:	push	{r4, r5, r6, sl, fp, lr}
   2239c:	add	fp, sp, #16
   223a0:	mov	r4, r0
   223a4:	ldr	r1, [r0]
   223a8:	ldr	r0, [r0, #8]
   223ac:	cmp	r1, #1
   223b0:	blt	223f0 <__assert_fail@plt+0x10c7c>
   223b4:	mov	r5, #0
   223b8:	mov	r6, #0
   223bc:	add	r0, r0, r5
   223c0:	ldr	r0, [r0, #20]
   223c4:	bl	13f1c <__assert_fail@plt+0x27a8>
   223c8:	ldr	r0, [r4, #8]
   223cc:	add	r0, r0, r5
   223d0:	ldr	r0, [r0, #8]
   223d4:	bl	13f1c <__assert_fail@plt+0x27a8>
   223d8:	add	r5, r5, #24
   223dc:	add	r6, r6, #1
   223e0:	ldr	r1, [r4]
   223e4:	ldr	r0, [r4, #8]
   223e8:	cmp	r6, r1
   223ec:	blt	223bc <__assert_fail@plt+0x10c48>
   223f0:	pop	{r4, r5, r6, sl, fp, lr}
   223f4:	b	13f1c <__assert_fail@plt+0x27a8>
   223f8:	ldr	r0, [r0, #8]
   223fc:	bx	lr
   22400:	push	{r4, r5, fp, lr}
   22404:	add	fp, sp, #8
   22408:	ldr	r4, [r0]
   2240c:	add	r0, r4, r3, lsl #3
   22410:	ldr	r0, [r0, #4]
   22414:	uxtb	r5, r0
   22418:	ldr	lr, [fp, #12]
   2241c:	ldr	ip, [fp, #8]
   22420:	cmp	r5, #9
   22424:	beq	22450 <__assert_fail@plt+0x10cdc>
   22428:	cmp	r5, #8
   2242c:	bne	224b4 <__assert_fail@plt+0x10d40>
   22430:	ldr	r0, [r4, r3, lsl #3]
   22434:	add	r0, r0, #1
   22438:	cmp	r0, lr
   2243c:	bge	224b4 <__assert_fail@plt+0x10d40>
   22440:	str	ip, [r1, r0, lsl #3]!
   22444:	mvn	r0, #0
   22448:	str	r0, [r1, #4]
   2244c:	pop	{r4, r5, fp, pc}
   22450:	ldr	r3, [r4, r3, lsl #3]
   22454:	add	r3, r3, #1
   22458:	cmp	r3, lr
   2245c:	popge	{r4, r5, fp, pc}
   22460:	ldr	r4, [r1, r3, lsl #3]
   22464:	cmp	r4, ip
   22468:	bge	22480 <__assert_fail@plt+0x10d0c>
   2246c:	add	r0, r1, r3, lsl #3
   22470:	str	ip, [r0, #4]
   22474:	lsl	r3, lr, #3
   22478:	mov	r0, r2
   2247c:	b	224a0 <__assert_fail@plt+0x10d2c>
   22480:	tst	r0, #524288	; 0x80000
   22484:	beq	224ac <__assert_fail@plt+0x10d38>
   22488:	ldr	r0, [r2, r3, lsl #3]
   2248c:	cmn	r0, #1
   22490:	beq	224ac <__assert_fail@plt+0x10d38>
   22494:	lsl	r3, lr, #3
   22498:	mov	r0, r1
   2249c:	mov	r1, r2
   224a0:	mov	r2, r3
   224a4:	pop	{r4, r5, fp, lr}
   224a8:	b	1148c <memcpy@plt>
   224ac:	add	r0, r1, r3, lsl #3
   224b0:	str	ip, [r0, #4]
   224b4:	pop	{r4, r5, fp, pc}
   224b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   224bc:	add	fp, sp, #24
   224c0:	mov	r4, r0
   224c4:	mvn	r0, #0
   224c8:	cmp	r4, #0
   224cc:	beq	2256c <__assert_fail@plt+0x10df8>
   224d0:	mov	r5, r2
   224d4:	ldr	r2, [r4]
   224d8:	cmp	r2, #0
   224dc:	beq	2256c <__assert_fail@plt+0x10df8>
   224e0:	ldr	r9, [fp, #12]
   224e4:	ldr	r8, [fp, #8]
   224e8:	sub	r0, r2, #1
   224ec:	str	r0, [r4]
   224f0:	ldr	r2, [r4, #8]
   224f4:	add	r6, r0, r0, lsl #1
   224f8:	ldr	r0, [r2, r6, lsl #3]!
   224fc:	str	r0, [r1]
   22500:	ldr	r1, [r2, #8]
   22504:	lsl	r7, r5, #3
   22508:	mov	r0, r3
   2250c:	mov	r2, r7
   22510:	bl	1148c <memcpy@plt>
   22514:	ldr	r0, [r4, #8]
   22518:	add	r0, r0, r6, lsl #3
   2251c:	ldr	r0, [r0, #8]
   22520:	add	r1, r0, r5, lsl #3
   22524:	mov	r0, r8
   22528:	mov	r2, r7
   2252c:	bl	1148c <memcpy@plt>
   22530:	ldr	r0, [r9, #8]
   22534:	bl	13f1c <__assert_fail@plt+0x27a8>
   22538:	ldr	r0, [r4, #8]
   2253c:	add	r0, r0, r6, lsl #3
   22540:	ldr	r0, [r0, #8]
   22544:	bl	13f1c <__assert_fail@plt+0x27a8>
   22548:	ldr	r0, [r4, #8]
   2254c:	add	r0, r0, r6, lsl #3
   22550:	vldr	d16, [r0, #12]
   22554:	ldr	r0, [r0, #20]
   22558:	str	r0, [r9, #8]
   2255c:	vstr	d16, [r9]
   22560:	ldr	r0, [r4, #8]
   22564:	add	r0, r0, r6, lsl #3
   22568:	ldr	r0, [r0, #4]
   2256c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22574:	add	fp, sp, #28
   22578:	sub	sp, sp, #20
   2257c:	mov	r9, r3
   22580:	mov	r5, r0
   22584:	ldr	r4, [r0, #84]	; 0x54
   22588:	ldr	r3, [r4]
   2258c:	ldr	sl, [fp, #12]
   22590:	add	r0, r3, sl, lsl #3
   22594:	ldr	r7, [r0, #4]
   22598:	ldr	r0, [fp, #16]
   2259c:	ldr	r6, [fp, #8]
   225a0:	tst	r7, #8
   225a4:	bne	22664 <__assert_fail@plt+0x10ef0>
   225a8:	tst	r7, #1048576	; 0x100000
   225ac:	bne	22758 <__assert_fail@plt+0x10fe4>
   225b0:	mov	ip, r1
   225b4:	mov	r9, r6
   225b8:	uxtb	r1, r7
   225bc:	cmp	r1, #4
   225c0:	bne	2277c <__assert_fail@plt+0x11008>
   225c4:	ldr	r0, [r3, sl, lsl #3]
   225c8:	add	r0, r0, #1
   225cc:	mov	r7, #0
   225d0:	mov	r6, ip
   225d4:	cmp	r0, ip
   225d8:	mov	r3, r2
   225dc:	bge	225f0 <__assert_fail@plt+0x10e7c>
   225e0:	mov	r1, r3
   225e4:	ldr	r2, [r1, r0, lsl #3]!
   225e8:	ldr	r1, [r1, #4]
   225ec:	sub	r7, r1, r2
   225f0:	ldr	r1, [fp, #20]
   225f4:	cmp	r1, #0
   225f8:	beq	227ac <__assert_fail@plt+0x11038>
   225fc:	mvn	r8, #0
   22600:	cmp	r0, r6
   22604:	bge	22818 <__assert_fail@plt+0x110a4>
   22608:	ldr	r1, [r3, r0, lsl #3]
   2260c:	cmn	r1, #1
   22610:	beq	22818 <__assert_fail@plt+0x110a4>
   22614:	add	r0, r3, r0, lsl #3
   22618:	ldr	r0, [r0, #4]
   2261c:	cmn	r0, #1
   22620:	beq	22818 <__assert_fail@plt+0x110a4>
   22624:	cmp	r7, #0
   22628:	beq	22824 <__assert_fail@plt+0x110b0>
   2262c:	mov	r0, r9
   22630:	ldr	r2, [r9]
   22634:	ldr	r0, [r5, #28]
   22638:	sub	r0, r0, r2
   2263c:	cmp	r0, r7
   22640:	blt	22818 <__assert_fail@plt+0x110a4>
   22644:	ldr	r3, [r5, #4]
   22648:	add	r0, r3, r1
   2264c:	add	r1, r3, r2
   22650:	mov	r2, r7
   22654:	bl	11618 <bcmp@plt>
   22658:	cmp	r0, #0
   2265c:	bne	22818 <__assert_fail@plt+0x110a4>
   22660:	b	227b4 <__assert_fail@plt+0x11040>
   22664:	str	r1, [sp, #12]
   22668:	str	r2, [sp, #16]
   2266c:	ldr	r2, [r6]
   22670:	ldr	r1, [r5, #100]	; 0x64
   22674:	ldr	r5, [r1, r2, lsl #2]
   22678:	ldr	r4, [r4, #20]
   2267c:	mov	r1, sl
   22680:	bl	1ca0c <__assert_fail@plt+0xb298>
   22684:	cmp	r0, #0
   22688:	bne	226a4 <__assert_fail@plt+0x10f30>
   2268c:	ldr	r0, [fp, #16]
   22690:	mov	r1, sl
   22694:	bl	1c7a4 <__assert_fail@plt+0xb030>
   22698:	mvn	r8, #1
   2269c:	cmp	r0, #0
   226a0:	beq	22818 <__assert_fail@plt+0x110a4>
   226a4:	add	r0, sl, sl, lsl #1
   226a8:	add	r1, r4, r0, lsl #2
   226ac:	mov	r0, r1
   226b0:	ldr	r2, [r0, #4]!
   226b4:	cmp	r2, #1
   226b8:	blt	227a4 <__assert_fail@plt+0x11030>
   226bc:	add	sl, r5, #4
   226c0:	ldr	r7, [r1, #8]
   226c4:	ldr	r6, [r0]
   226c8:	mov	r5, #0
   226cc:	mvn	r8, #0
   226d0:	b	226e4 <__assert_fail@plt+0x10f70>
   226d4:	mov	r8, r4
   226d8:	add	r5, r5, #1
   226dc:	cmp	r5, r6
   226e0:	bge	22818 <__assert_fail@plt+0x110a4>
   226e4:	ldr	r4, [r7, r5, lsl #2]
   226e8:	mov	r0, sl
   226ec:	mov	r1, r4
   226f0:	bl	1ca0c <__assert_fail@plt+0xb298>
   226f4:	cmp	r0, #0
   226f8:	beq	226d8 <__assert_fail@plt+0x10f64>
   226fc:	cmn	r8, #1
   22700:	beq	226d4 <__assert_fail@plt+0x10f60>
   22704:	ldr	r5, [fp, #16]
   22708:	mov	r0, r5
   2270c:	mov	r1, r8
   22710:	bl	1ca0c <__assert_fail@plt+0xb298>
   22714:	cmp	r0, #0
   22718:	bne	22814 <__assert_fail@plt+0x110a0>
   2271c:	ldr	r0, [fp, #20]
   22720:	cmp	r0, #0
   22724:	beq	22818 <__assert_fail@plt+0x110a4>
   22728:	ldr	r1, [fp, #8]
   2272c:	ldr	r1, [r1]
   22730:	ldr	r2, [sp, #16]
   22734:	stm	sp, {r2, r9}
   22738:	str	r5, [sp, #8]
   2273c:	mov	r2, r4
   22740:	ldr	r3, [sp, #12]
   22744:	bl	228b8 <__assert_fail@plt+0x11144>
   22748:	mvn	r4, #1
   2274c:	cmp	r0, #0
   22750:	movne	r8, r4
   22754:	b	22818 <__assert_fail@plt+0x110a4>
   22758:	mov	r9, r6
   2275c:	ldr	r3, [r6]
   22760:	mov	r0, r4
   22764:	mov	r1, sl
   22768:	mov	r2, r5
   2276c:	bl	20068 <__assert_fail@plt+0xe8f4>
   22770:	mov	r7, r0
   22774:	cmp	r0, #0
   22778:	bne	227b4 <__assert_fail@plt+0x11040>
   2277c:	ldr	r0, [r4]
   22780:	add	r1, r0, sl, lsl #3
   22784:	ldr	r2, [r9]
   22788:	mov	r0, r5
   2278c:	bl	20344 <__assert_fail@plt+0xebd0>
   22790:	mvn	r8, #0
   22794:	mov	r7, #1
   22798:	cmp	r0, #0
   2279c:	bne	227b4 <__assert_fail@plt+0x11040>
   227a0:	b	22818 <__assert_fail@plt+0x110a4>
   227a4:	mvn	r8, #0
   227a8:	b	22818 <__assert_fail@plt+0x110a4>
   227ac:	cmp	r7, #0
   227b0:	beq	22824 <__assert_fail@plt+0x110b0>
   227b4:	ldr	r0, [r4, #12]
   227b8:	ldr	r4, [r0, sl, lsl #2]
   227bc:	ldr	r0, [r9]
   227c0:	add	r0, r0, r7
   227c4:	str	r0, [r9]
   227c8:	ldr	r1, [fp, #20]
   227cc:	cmp	r1, #0
   227d0:	beq	22808 <__assert_fail@plt+0x11094>
   227d4:	ldr	r1, [r5, #92]	; 0x5c
   227d8:	mvn	r8, #0
   227dc:	cmp	r0, r1
   227e0:	bgt	22818 <__assert_fail@plt+0x110a4>
   227e4:	ldr	r1, [r5, #100]	; 0x64
   227e8:	ldr	r0, [r1, r0, lsl #2]
   227ec:	cmp	r0, #0
   227f0:	beq	22818 <__assert_fail@plt+0x110a4>
   227f4:	add	r0, r0, #4
   227f8:	mov	r1, r4
   227fc:	bl	1ca0c <__assert_fail@plt+0xb298>
   22800:	cmp	r0, #0
   22804:	beq	22818 <__assert_fail@plt+0x110a4>
   22808:	mov	r0, #0
   2280c:	ldr	r1, [fp, #16]
   22810:	str	r0, [r1, #4]
   22814:	mov	r8, r4
   22818:	mov	r0, r8
   2281c:	sub	sp, fp, #28
   22820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22824:	ldr	r0, [fp, #16]
   22828:	mov	r1, sl
   2282c:	bl	1c7a4 <__assert_fail@plt+0xb030>
   22830:	cmp	r0, #0
   22834:	beq	22870 <__assert_fail@plt+0x110fc>
   22838:	ldr	r0, [r4, #20]
   2283c:	add	r1, sl, sl, lsl #1
   22840:	add	r0, r0, r1, lsl #2
   22844:	ldr	r0, [r0, #8]
   22848:	ldr	r8, [r0]
   2284c:	ldr	r0, [r9]
   22850:	ldr	r1, [r5, #100]	; 0x64
   22854:	ldr	r0, [r1, r0, lsl #2]
   22858:	add	r0, r0, #4
   2285c:	mov	r1, r8
   22860:	bl	1ca0c <__assert_fail@plt+0xb298>
   22864:	cmp	r0, #0
   22868:	bne	22818 <__assert_fail@plt+0x110a4>
   2286c:	b	2277c <__assert_fail@plt+0x11008>
   22870:	mvn	r8, #1
   22874:	b	22818 <__assert_fail@plt+0x110a4>
   22878:	push	{r4, sl, fp, lr}
   2287c:	add	fp, sp, #8
   22880:	mov	r4, r0
   22884:	bl	228a0 <__assert_fail@plt+0x1112c>
   22888:	mvn	r0, #0
   2288c:	mov	r1, #0
   22890:	add	r2, r4, #12
   22894:	str	r1, [r4]
   22898:	stmib	r4, {r0, r2}
   2289c:	pop	{r4, sl, fp, pc}
   228a0:	mov	r1, r0
   228a4:	ldr	r0, [r0, #8]
   228a8:	add	r1, r1, #12
   228ac:	cmp	r0, r1
   228b0:	bxeq	lr
   228b4:	b	13f1c <__assert_fail@plt+0x27a8>
   228b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228bc:	add	fp, sp, #28
   228c0:	sub	sp, sp, #12
   228c4:	mov	r6, r3
   228c8:	mov	r9, r2
   228cc:	mov	r5, r1
   228d0:	mov	r4, r0
   228d4:	ldr	r7, [r0]
   228d8:	ldr	r1, [r0, #4]
   228dc:	add	r0, r7, #1
   228e0:	str	r0, [r4]
   228e4:	ldr	r2, [fp, #16]
   228e8:	str	r2, [sp, #8]
   228ec:	ldr	r2, [fp, #12]
   228f0:	str	r2, [sp, #4]
   228f4:	ldr	sl, [fp, #8]
   228f8:	cmp	r0, r1
   228fc:	bne	22928 <__assert_fail@plt+0x111b4>
   22900:	ldr	r0, [r4, #8]
   22904:	add	r1, r1, r1, lsl #1
   22908:	lsl	r1, r1, #4
   2290c:	bl	23f00 <__assert_fail@plt+0x1278c>
   22910:	cmp	r0, #0
   22914:	beq	2299c <__assert_fail@plt+0x11228>
   22918:	str	r0, [r4, #8]
   2291c:	ldr	r0, [r4, #4]
   22920:	lsl	r0, r0, #1
   22924:	str	r0, [r4, #4]
   22928:	ldr	r0, [r4, #8]
   2292c:	add	r8, r7, r7, lsl #1
   22930:	str	r5, [r0, r8, lsl #3]!
   22934:	str	r9, [r0, #4]
   22938:	lsl	r0, r6, #4
   2293c:	bl	23ed0 <__assert_fail@plt+0x1275c>
   22940:	ldr	r1, [r4, #8]
   22944:	add	r1, r1, r8, lsl #3
   22948:	str	r0, [r1, #8]
   2294c:	cmp	r0, #0
   22950:	beq	2299c <__assert_fail@plt+0x11228>
   22954:	lsl	r5, r6, #3
   22958:	mov	r1, sl
   2295c:	mov	r2, r5
   22960:	bl	1148c <memcpy@plt>
   22964:	ldr	r0, [r4, #8]
   22968:	add	r0, r0, r8, lsl #3
   2296c:	ldr	r0, [r0, #8]
   22970:	add	r0, r0, r6, lsl #3
   22974:	ldr	r1, [sp, #4]
   22978:	mov	r2, r5
   2297c:	bl	1148c <memcpy@plt>
   22980:	ldr	r0, [r4, #8]
   22984:	add	r0, r0, r8, lsl #3
   22988:	add	r0, r0, #12
   2298c:	ldr	r1, [sp, #8]
   22990:	sub	sp, fp, #28
   22994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22998:	b	1c990 <__assert_fail@plt+0xb21c>
   2299c:	mov	r0, #12
   229a0:	sub	sp, fp, #28
   229a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   229ac:	add	fp, sp, #24
   229b0:	mov	r7, r2
   229b4:	mov	r5, r1
   229b8:	mov	r6, r0
   229bc:	movw	r9, #0
   229c0:	movt	r9, #32752	; 0x7ff0
   229c4:	mov	r0, r6
   229c8:	mov	r1, r5
   229cc:	mov	r2, r7
   229d0:	bl	1142c <read@plt>
   229d4:	mov	r4, r0
   229d8:	cmn	r0, #1
   229dc:	bgt	22a38 <__assert_fail@plt+0x112c4>
   229e0:	bl	1163c <__errno_location@plt>
   229e4:	ldr	r0, [r0]
   229e8:	cmp	r0, #4
   229ec:	beq	229c4 <__assert_fail@plt+0x11250>
   229f0:	cmp	r7, r9
   229f4:	mov	r1, #0
   229f8:	movwhi	r1, #1
   229fc:	sub	r2, r0, #22
   22a00:	clz	r2, r2
   22a04:	lsr	r2, r2, #5
   22a08:	ands	r1, r1, r2
   22a0c:	moveq	r8, r4
   22a10:	mov	r1, r7
   22a14:	movwne	r1, #0
   22a18:	movtne	r1, #32752	; 0x7ff0
   22a1c:	cmp	r7, r9
   22a20:	bls	22a30 <__assert_fail@plt+0x112bc>
   22a24:	cmp	r0, #22
   22a28:	mov	r7, r1
   22a2c:	beq	229c4 <__assert_fail@plt+0x11250>
   22a30:	mov	r0, r8
   22a34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22a38:	mov	r0, r4
   22a3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22a40:	mov	r1, #0
   22a44:	mov	r2, #3
   22a48:	b	243c0 <__assert_fail@plt+0x12c4c>
   22a4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22a50:	add	fp, sp, #24
   22a54:	sub	sp, sp, #32
   22a58:	mov	r4, r2
   22a5c:	mov	r8, r0
   22a60:	ldr	r6, [fp, #12]
   22a64:	ldr	r7, [fp, #8]
   22a68:	cmp	r1, #0
   22a6c:	beq	22a94 <__assert_fail@plt+0x11320>
   22a70:	mov	r5, r1
   22a74:	str	r4, [sp]
   22a78:	str	r3, [sp, #4]
   22a7c:	movw	r2, #23017	; 0x59e9
   22a80:	movt	r2, #2
   22a84:	mov	r0, r8
   22a88:	mov	r1, #1
   22a8c:	mov	r3, r5
   22a90:	b	22aac <__assert_fail@plt+0x11338>
   22a94:	str	r3, [sp]
   22a98:	movw	r2, #23029	; 0x59f5
   22a9c:	movt	r2, #2
   22aa0:	mov	r0, r8
   22aa4:	mov	r1, #1
   22aa8:	mov	r3, r4
   22aac:	bl	116a8 <__fprintf_chk@plt>
   22ab0:	movw	r1, #23036	; 0x59fc
   22ab4:	movt	r1, #2
   22ab8:	mov	r0, #0
   22abc:	mov	r2, #5
   22ac0:	bl	114e0 <dcgettext@plt>
   22ac4:	mov	r3, r0
   22ac8:	movw	r0, #2022	; 0x7e6
   22acc:	str	r0, [sp]
   22ad0:	movw	r2, #23754	; 0x5cca
   22ad4:	movt	r2, #2
   22ad8:	mov	r0, r8
   22adc:	mov	r1, #1
   22ae0:	bl	116a8 <__fprintf_chk@plt>
   22ae4:	movw	r4, #20522	; 0x502a
   22ae8:	movt	r4, #2
   22aec:	mov	r0, r4
   22af0:	mov	r1, r8
   22af4:	bl	113e4 <fputs_unlocked@plt>
   22af8:	movw	r1, #23040	; 0x5a00
   22afc:	movt	r1, #2
   22b00:	mov	r0, #0
   22b04:	mov	r2, #5
   22b08:	bl	114e0 <dcgettext@plt>
   22b0c:	mov	r2, r0
   22b10:	movw	r3, #23211	; 0x5aab
   22b14:	movt	r3, #2
   22b18:	mov	r0, r8
   22b1c:	mov	r1, #1
   22b20:	bl	116a8 <__fprintf_chk@plt>
   22b24:	mov	r0, r4
   22b28:	mov	r1, r8
   22b2c:	bl	113e4 <fputs_unlocked@plt>
   22b30:	cmp	r6, #9
   22b34:	bhi	22b70 <__assert_fail@plt+0x113fc>
   22b38:	add	r0, pc, #0
   22b3c:	ldr	pc, [r0, r6, lsl #2]
   22b40:	andeq	r2, r2, r8, ror #22
   22b44:	andeq	r2, r2, ip, ror fp
   22b48:	andeq	r2, r2, ip, lsr #23
   22b4c:	ldrdeq	r2, [r2], -r4
   22b50:	strdeq	r2, [r2], -ip
   22b54:	andeq	r2, r2, r4, lsr #24
   22b58:	andeq	r2, r2, ip, asr #24
   22b5c:	andeq	r2, r2, r4, lsl #25
   22b60:	andeq	r2, r2, r4, lsr #26
   22b64:	andeq	r2, r2, ip, asr #25
   22b68:	sub	sp, fp, #24
   22b6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22b70:	movw	r1, #23564	; 0x5c0c
   22b74:	movt	r1, #2
   22b78:	b	22cd4 <__assert_fail@plt+0x11560>
   22b7c:	movw	r1, #23245	; 0x5acd
   22b80:	movt	r1, #2
   22b84:	mov	r0, #0
   22b88:	mov	r2, #5
   22b8c:	bl	114e0 <dcgettext@plt>
   22b90:	mov	r2, r0
   22b94:	ldr	r3, [r7]
   22b98:	mov	r0, r8
   22b9c:	mov	r1, #1
   22ba0:	sub	sp, fp, #24
   22ba4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   22ba8:	b	116a8 <__fprintf_chk@plt>
   22bac:	movw	r1, #23261	; 0x5add
   22bb0:	movt	r1, #2
   22bb4:	mov	r0, #0
   22bb8:	mov	r2, #5
   22bbc:	bl	114e0 <dcgettext@plt>
   22bc0:	mov	r2, r0
   22bc4:	ldr	r3, [r7]
   22bc8:	ldr	r0, [r7, #4]
   22bcc:	str	r0, [sp]
   22bd0:	b	22cc0 <__assert_fail@plt+0x1154c>
   22bd4:	movw	r1, #23284	; 0x5af4
   22bd8:	movt	r1, #2
   22bdc:	mov	r0, #0
   22be0:	mov	r2, #5
   22be4:	bl	114e0 <dcgettext@plt>
   22be8:	mov	r2, r0
   22bec:	ldr	r3, [r7]
   22bf0:	ldmib	r7, {r0, r1}
   22bf4:	stm	sp, {r0, r1}
   22bf8:	b	22cc0 <__assert_fail@plt+0x1154c>
   22bfc:	movw	r1, #23312	; 0x5b10
   22c00:	movt	r1, #2
   22c04:	mov	r0, #0
   22c08:	mov	r2, #5
   22c0c:	bl	114e0 <dcgettext@plt>
   22c10:	mov	r2, r0
   22c14:	ldr	r3, [r7]
   22c18:	ldmib	r7, {r0, r1, r7}
   22c1c:	stm	sp, {r0, r1, r7}
   22c20:	b	22cc0 <__assert_fail@plt+0x1154c>
   22c24:	movw	r1, #23344	; 0x5b30
   22c28:	movt	r1, #2
   22c2c:	mov	r0, #0
   22c30:	mov	r2, #5
   22c34:	bl	114e0 <dcgettext@plt>
   22c38:	mov	r2, r0
   22c3c:	ldr	r3, [r7]
   22c40:	ldmib	r7, {r0, r1, r6, r7}
   22c44:	stm	sp, {r0, r1, r6, r7}
   22c48:	b	22cc0 <__assert_fail@plt+0x1154c>
   22c4c:	movw	r1, #23380	; 0x5b54
   22c50:	movt	r1, #2
   22c54:	mov	r0, #0
   22c58:	mov	r2, #5
   22c5c:	bl	114e0 <dcgettext@plt>
   22c60:	mov	r2, r0
   22c64:	ldr	r3, [r7]
   22c68:	ldmib	r7, {r0, r1, r6}
   22c6c:	ldr	r5, [r7, #16]
   22c70:	ldr	r7, [r7, #20]
   22c74:	stm	sp, {r0, r1, r6}
   22c78:	str	r5, [sp, #12]
   22c7c:	str	r7, [sp, #16]
   22c80:	b	22cc0 <__assert_fail@plt+0x1154c>
   22c84:	movw	r1, #23420	; 0x5b7c
   22c88:	movt	r1, #2
   22c8c:	mov	r0, #0
   22c90:	mov	r2, #5
   22c94:	bl	114e0 <dcgettext@plt>
   22c98:	mov	r2, r0
   22c9c:	ldr	r3, [r7]
   22ca0:	ldmib	r7, {r0, r1, r6}
   22ca4:	ldr	r5, [r7, #16]
   22ca8:	ldr	r4, [r7, #20]
   22cac:	ldr	r7, [r7, #24]
   22cb0:	stm	sp, {r0, r1, r6}
   22cb4:	str	r5, [sp, #12]
   22cb8:	str	r4, [sp, #16]
   22cbc:	str	r7, [sp, #20]
   22cc0:	mov	r0, r8
   22cc4:	mov	r1, #1
   22cc8:	b	22d74 <__assert_fail@plt+0x11600>
   22ccc:	movw	r1, #23512	; 0x5bd8
   22cd0:	movt	r1, #2
   22cd4:	mov	r0, #0
   22cd8:	mov	r2, #5
   22cdc:	bl	114e0 <dcgettext@plt>
   22ce0:	mov	ip, r0
   22ce4:	ldr	r3, [r7]
   22ce8:	ldr	r0, [r7, #4]
   22cec:	ldr	r1, [r7, #8]
   22cf0:	ldr	r6, [r7, #12]
   22cf4:	ldr	r5, [r7, #16]
   22cf8:	ldr	r4, [r7, #20]
   22cfc:	ldr	r2, [r7, #24]
   22d00:	ldr	lr, [r7, #28]
   22d04:	ldr	r7, [r7, #32]
   22d08:	stm	sp, {r0, r1, r6}
   22d0c:	str	r5, [sp, #12]
   22d10:	str	r4, [sp, #16]
   22d14:	str	r2, [sp, #20]
   22d18:	str	lr, [sp, #24]
   22d1c:	str	r7, [sp, #28]
   22d20:	b	22d68 <__assert_fail@plt+0x115f4>
   22d24:	movw	r1, #23464	; 0x5ba8
   22d28:	movt	r1, #2
   22d2c:	mov	r0, #0
   22d30:	mov	r2, #5
   22d34:	bl	114e0 <dcgettext@plt>
   22d38:	mov	ip, r0
   22d3c:	ldr	r3, [r7]
   22d40:	ldmib	r7, {r0, r1, r6}
   22d44:	ldr	r5, [r7, #16]
   22d48:	ldr	r4, [r7, #20]
   22d4c:	ldr	r2, [r7, #24]
   22d50:	ldr	r7, [r7, #28]
   22d54:	stm	sp, {r0, r1, r6}
   22d58:	str	r5, [sp, #12]
   22d5c:	str	r4, [sp, #16]
   22d60:	str	r2, [sp, #20]
   22d64:	str	r7, [sp, #24]
   22d68:	mov	r0, r8
   22d6c:	mov	r1, #1
   22d70:	mov	r2, ip
   22d74:	bl	116a8 <__fprintf_chk@plt>
   22d78:	sub	sp, fp, #24
   22d7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22d80:	push	{r4, sl, fp, lr}
   22d84:	add	fp, sp, #8
   22d88:	sub	sp, sp, #8
   22d8c:	mov	lr, #0
   22d90:	ldr	ip, [fp, #8]
   22d94:	ldr	r4, [ip, lr, lsl #2]
   22d98:	add	lr, lr, #1
   22d9c:	cmp	r4, #0
   22da0:	bne	22d94 <__assert_fail@plt+0x11620>
   22da4:	sub	r4, lr, #1
   22da8:	str	ip, [sp]
   22dac:	str	r4, [sp, #4]
   22db0:	bl	22a4c <__assert_fail@plt+0x112d8>
   22db4:	sub	sp, fp, #8
   22db8:	pop	{r4, sl, fp, pc}
   22dbc:	push	{r4, r5, fp, lr}
   22dc0:	add	fp, sp, #8
   22dc4:	sub	sp, sp, #48	; 0x30
   22dc8:	mov	ip, #0
   22dcc:	ldr	r4, [fp, #8]
   22dd0:	add	lr, sp, #8
   22dd4:	ldr	r5, [r4]
   22dd8:	str	r5, [lr, ip, lsl #2]
   22ddc:	cmp	r5, #0
   22de0:	beq	22df8 <__assert_fail@plt+0x11684>
   22de4:	add	ip, ip, #1
   22de8:	add	r4, r4, #4
   22dec:	cmp	ip, #10
   22df0:	bne	22dd4 <__assert_fail@plt+0x11660>
   22df4:	mov	ip, #10
   22df8:	str	lr, [sp]
   22dfc:	str	ip, [sp, #4]
   22e00:	bl	22a4c <__assert_fail@plt+0x112d8>
   22e04:	sub	sp, fp, #8
   22e08:	pop	{r4, r5, fp, pc}
   22e0c:	push	{fp, lr}
   22e10:	mov	fp, sp
   22e14:	sub	sp, sp, #8
   22e18:	add	ip, fp, #8
   22e1c:	str	ip, [sp, #4]
   22e20:	str	ip, [sp]
   22e24:	bl	22dbc <__assert_fail@plt+0x11648>
   22e28:	mov	sp, fp
   22e2c:	pop	{fp, pc}
   22e30:	push	{fp, lr}
   22e34:	mov	fp, sp
   22e38:	movw	r0, #25020	; 0x61bc
   22e3c:	movt	r0, #3
   22e40:	ldr	r1, [r0]
   22e44:	movw	r0, #20522	; 0x502a
   22e48:	movt	r0, #2
   22e4c:	bl	113e4 <fputs_unlocked@plt>
   22e50:	movw	r1, #23624	; 0x5c48
   22e54:	movt	r1, #2
   22e58:	mov	r0, #0
   22e5c:	mov	r2, #5
   22e60:	bl	114e0 <dcgettext@plt>
   22e64:	mov	r1, r0
   22e68:	movw	r2, #23644	; 0x5c5c
   22e6c:	movt	r2, #2
   22e70:	mov	r0, #1
   22e74:	bl	11684 <__printf_chk@plt>
   22e78:	movw	r1, #23666	; 0x5c72
   22e7c:	movt	r1, #2
   22e80:	mov	r0, #0
   22e84:	mov	r2, #5
   22e88:	bl	114e0 <dcgettext@plt>
   22e8c:	mov	r1, r0
   22e90:	movw	r2, #19193	; 0x4af9
   22e94:	movt	r2, #2
   22e98:	movw	r3, #21687	; 0x54b7
   22e9c:	movt	r3, #2
   22ea0:	mov	r0, #1
   22ea4:	bl	11684 <__printf_chk@plt>
   22ea8:	movw	r1, #23686	; 0x5c86
   22eac:	movt	r1, #2
   22eb0:	mov	r0, #0
   22eb4:	mov	r2, #5
   22eb8:	bl	114e0 <dcgettext@plt>
   22ebc:	mov	r1, r0
   22ec0:	movw	r2, #23725	; 0x5cad
   22ec4:	movt	r2, #2
   22ec8:	mov	r0, #1
   22ecc:	pop	{fp, lr}
   22ed0:	b	11684 <__printf_chk@plt>
   22ed4:	b	22ed8 <__assert_fail@plt+0x11764>
   22ed8:	push	{r4, r5, r6, sl, fp, lr}
   22edc:	add	fp, sp, #16
   22ee0:	mov	r4, r2
   22ee4:	mov	r5, r1
   22ee8:	mov	r6, r0
   22eec:	bl	24690 <__assert_fail@plt+0x12f1c>
   22ef0:	cmp	r0, #0
   22ef4:	popne	{r4, r5, r6, sl, fp, pc}
   22ef8:	cmp	r6, #0
   22efc:	beq	22f10 <__assert_fail@plt+0x1179c>
   22f00:	cmp	r5, #0
   22f04:	cmpne	r4, #0
   22f08:	bne	22f10 <__assert_fail@plt+0x1179c>
   22f0c:	pop	{r4, r5, r6, sl, fp, pc}
   22f10:	bl	11870 <__assert_fail@plt+0xfc>
   22f14:	push	{fp, lr}
   22f18:	mov	fp, sp
   22f1c:	bl	23ed0 <__assert_fail@plt+0x1275c>
   22f20:	pop	{fp, lr}
   22f24:	b	22f28 <__assert_fail@plt+0x117b4>
   22f28:	cmp	r0, #0
   22f2c:	bxne	lr
   22f30:	push	{fp, lr}
   22f34:	mov	fp, sp
   22f38:	bl	11870 <__assert_fail@plt+0xfc>
   22f3c:	push	{fp, lr}
   22f40:	mov	fp, sp
   22f44:	bl	245c0 <__assert_fail@plt+0x12e4c>
   22f48:	pop	{fp, lr}
   22f4c:	b	22f28 <__assert_fail@plt+0x117b4>
   22f50:	b	22f14 <__assert_fail@plt+0x117a0>
   22f54:	push	{r4, r5, fp, lr}
   22f58:	add	fp, sp, #8
   22f5c:	mov	r4, r1
   22f60:	mov	r5, r0
   22f64:	bl	23f00 <__assert_fail@plt+0x1278c>
   22f68:	cmp	r0, #0
   22f6c:	popne	{r4, r5, fp, pc}
   22f70:	cmp	r5, #0
   22f74:	beq	22f84 <__assert_fail@plt+0x11810>
   22f78:	cmp	r4, #0
   22f7c:	bne	22f84 <__assert_fail@plt+0x11810>
   22f80:	pop	{r4, r5, fp, pc}
   22f84:	bl	11870 <__assert_fail@plt+0xfc>
   22f88:	push	{fp, lr}
   22f8c:	mov	fp, sp
   22f90:	bl	245c4 <__assert_fail@plt+0x12e50>
   22f94:	pop	{fp, lr}
   22f98:	b	22f28 <__assert_fail@plt+0x117b4>
   22f9c:	push	{fp, lr}
   22fa0:	mov	fp, sp
   22fa4:	bl	245d4 <__assert_fail@plt+0x12e60>
   22fa8:	pop	{fp, lr}
   22fac:	b	22f28 <__assert_fail@plt+0x117b4>
   22fb0:	mov	r2, r1
   22fb4:	mov	r1, r0
   22fb8:	mov	r0, #0
   22fbc:	b	22ed8 <__assert_fail@plt+0x11764>
   22fc0:	mov	r2, r1
   22fc4:	mov	r1, r0
   22fc8:	mov	r0, #0
   22fcc:	b	22f9c <__assert_fail@plt+0x11828>
   22fd0:	mov	r2, #1
   22fd4:	b	22fd8 <__assert_fail@plt+0x11864>
   22fd8:	push	{r4, r5, fp, lr}
   22fdc:	add	fp, sp, #8
   22fe0:	mov	r4, r1
   22fe4:	ldr	r5, [r1]
   22fe8:	cmp	r0, #0
   22fec:	beq	23004 <__assert_fail@plt+0x11890>
   22ff0:	mov	r1, #1
   22ff4:	add	r1, r1, r5, lsr #1
   22ff8:	adds	r5, r5, r1
   22ffc:	bcc	2301c <__assert_fail@plt+0x118a8>
   23000:	bl	11870 <__assert_fail@plt+0xfc>
   23004:	cmp	r5, #0
   23008:	bne	2301c <__assert_fail@plt+0x118a8>
   2300c:	mov	r1, #64	; 0x40
   23010:	udiv	r5, r1, r2
   23014:	cmp	r2, #64	; 0x40
   23018:	addhi	r5, r5, #1
   2301c:	mov	r1, r5
   23020:	bl	22ed8 <__assert_fail@plt+0x11764>
   23024:	str	r5, [r4]
   23028:	pop	{r4, r5, fp, pc}
   2302c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23030:	add	fp, sp, #24
   23034:	mov	r8, r1
   23038:	ldr	r6, [r1]
   2303c:	add	r1, r6, r6, asr #1
   23040:	cmp	r1, r6
   23044:	mvnvs	r1, #-2147483648	; 0x80000000
   23048:	cmp	r1, r3
   2304c:	mov	r5, r1
   23050:	movgt	r5, r3
   23054:	cmn	r3, #1
   23058:	movle	r5, r1
   2305c:	ldr	r4, [fp, #8]
   23060:	cmn	r4, #1
   23064:	ble	2308c <__assert_fail@plt+0x11918>
   23068:	cmp	r4, #0
   2306c:	beq	230e0 <__assert_fail@plt+0x1196c>
   23070:	cmn	r5, #1
   23074:	ble	230b4 <__assert_fail@plt+0x11940>
   23078:	mvn	r7, #-2147483648	; 0x80000000
   2307c:	udiv	r1, r7, r4
   23080:	cmp	r1, r5
   23084:	bge	230e0 <__assert_fail@plt+0x1196c>
   23088:	b	230f0 <__assert_fail@plt+0x1197c>
   2308c:	cmn	r5, #1
   23090:	ble	230d0 <__assert_fail@plt+0x1195c>
   23094:	cmn	r4, #1
   23098:	beq	230e0 <__assert_fail@plt+0x1196c>
   2309c:	mov	r1, #-2147483648	; 0x80000000
   230a0:	sdiv	r1, r1, r4
   230a4:	mvn	r7, #-2147483648	; 0x80000000
   230a8:	cmp	r1, r5
   230ac:	bge	230e0 <__assert_fail@plt+0x1196c>
   230b0:	b	230f0 <__assert_fail@plt+0x1197c>
   230b4:	beq	230e0 <__assert_fail@plt+0x1196c>
   230b8:	mov	r1, #-2147483648	; 0x80000000
   230bc:	sdiv	r1, r1, r5
   230c0:	mvn	r7, #-2147483648	; 0x80000000
   230c4:	cmp	r1, r4
   230c8:	bge	230e0 <__assert_fail@plt+0x1196c>
   230cc:	b	230f0 <__assert_fail@plt+0x1197c>
   230d0:	mvn	r7, #-2147483648	; 0x80000000
   230d4:	sdiv	r1, r7, r4
   230d8:	cmp	r5, r1
   230dc:	blt	230f0 <__assert_fail@plt+0x1197c>
   230e0:	mul	r1, r5, r4
   230e4:	mov	r7, #64	; 0x40
   230e8:	cmp	r1, #63	; 0x3f
   230ec:	bgt	230f8 <__assert_fail@plt+0x11984>
   230f0:	sdiv	r5, r7, r4
   230f4:	mul	r1, r5, r4
   230f8:	cmp	r0, #0
   230fc:	moveq	r7, #0
   23100:	streq	r7, [r8]
   23104:	sub	r7, r5, r6
   23108:	cmp	r7, r2
   2310c:	bge	231b8 <__assert_fail@plt+0x11a44>
   23110:	add	r5, r6, r2
   23114:	mov	r1, #0
   23118:	cmp	r5, r3
   2311c:	mov	r2, #0
   23120:	movwgt	r2, #1
   23124:	cmn	r3, #1
   23128:	movwgt	r1, #1
   2312c:	cmp	r5, r6
   23130:	bvs	231a0 <__assert_fail@plt+0x11a2c>
   23134:	ands	r1, r1, r2
   23138:	bne	231a0 <__assert_fail@plt+0x11a2c>
   2313c:	cmn	r4, #1
   23140:	ble	23168 <__assert_fail@plt+0x119f4>
   23144:	cmp	r4, #0
   23148:	beq	231b4 <__assert_fail@plt+0x11a40>
   2314c:	cmn	r5, #1
   23150:	ble	2318c <__assert_fail@plt+0x11a18>
   23154:	mvn	r1, #-2147483648	; 0x80000000
   23158:	udiv	r1, r1, r4
   2315c:	cmp	r1, r5
   23160:	bge	231b4 <__assert_fail@plt+0x11a40>
   23164:	b	231a0 <__assert_fail@plt+0x11a2c>
   23168:	cmn	r5, #1
   2316c:	ble	231a4 <__assert_fail@plt+0x11a30>
   23170:	cmn	r4, #1
   23174:	beq	231b4 <__assert_fail@plt+0x11a40>
   23178:	mov	r1, #-2147483648	; 0x80000000
   2317c:	sdiv	r1, r1, r4
   23180:	cmp	r1, r5
   23184:	bge	231b4 <__assert_fail@plt+0x11a40>
   23188:	b	231a0 <__assert_fail@plt+0x11a2c>
   2318c:	beq	231b4 <__assert_fail@plt+0x11a40>
   23190:	mov	r1, #-2147483648	; 0x80000000
   23194:	sdiv	r1, r1, r5
   23198:	cmp	r1, r4
   2319c:	bge	231b4 <__assert_fail@plt+0x11a40>
   231a0:	bl	11870 <__assert_fail@plt+0xfc>
   231a4:	mvn	r1, #-2147483648	; 0x80000000
   231a8:	sdiv	r1, r1, r4
   231ac:	cmp	r5, r1
   231b0:	blt	231a0 <__assert_fail@plt+0x11a2c>
   231b4:	mul	r1, r5, r4
   231b8:	bl	22f54 <__assert_fail@plt+0x117e0>
   231bc:	str	r5, [r8]
   231c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   231c4:	mov	r1, #1
   231c8:	b	231cc <__assert_fail@plt+0x11a58>
   231cc:	push	{fp, lr}
   231d0:	mov	fp, sp
   231d4:	bl	23e7c <__assert_fail@plt+0x12708>
   231d8:	pop	{fp, lr}
   231dc:	b	22f28 <__assert_fail@plt+0x117b4>
   231e0:	mov	r1, #1
   231e4:	b	231e8 <__assert_fail@plt+0x11a74>
   231e8:	push	{fp, lr}
   231ec:	mov	fp, sp
   231f0:	bl	245d0 <__assert_fail@plt+0x12e5c>
   231f4:	pop	{fp, lr}
   231f8:	b	22f28 <__assert_fail@plt+0x117b4>
   231fc:	push	{r4, r5, fp, lr}
   23200:	add	fp, sp, #8
   23204:	mov	r4, r1
   23208:	mov	r5, r0
   2320c:	mov	r0, r1
   23210:	bl	22f14 <__assert_fail@plt+0x117a0>
   23214:	mov	r1, r5
   23218:	mov	r2, r4
   2321c:	pop	{r4, r5, fp, lr}
   23220:	b	1148c <memcpy@plt>
   23224:	push	{r4, r5, fp, lr}
   23228:	add	fp, sp, #8
   2322c:	mov	r4, r1
   23230:	mov	r5, r0
   23234:	mov	r0, r1
   23238:	bl	22f3c <__assert_fail@plt+0x117c8>
   2323c:	mov	r1, r5
   23240:	mov	r2, r4
   23244:	pop	{r4, r5, fp, lr}
   23248:	b	1148c <memcpy@plt>
   2324c:	push	{r4, r5, fp, lr}
   23250:	add	fp, sp, #8
   23254:	mov	r4, r1
   23258:	mov	r5, r0
   2325c:	add	r0, r1, #1
   23260:	bl	22f3c <__assert_fail@plt+0x117c8>
   23264:	mov	r1, #0
   23268:	strb	r1, [r0, r4]
   2326c:	mov	r1, r5
   23270:	mov	r2, r4
   23274:	pop	{r4, r5, fp, lr}
   23278:	b	1148c <memcpy@plt>
   2327c:	push	{r4, sl, fp, lr}
   23280:	add	fp, sp, #8
   23284:	mov	r4, r0
   23288:	bl	11624 <strlen@plt>
   2328c:	add	r1, r0, #1
   23290:	mov	r0, r4
   23294:	pop	{r4, sl, fp, lr}
   23298:	b	231fc <__assert_fail@plt+0x11a88>
   2329c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   232a0:	add	fp, sp, #24
   232a4:	sub	sp, sp, #16
   232a8:	mov	r5, r3
   232ac:	mov	r6, r2
   232b0:	mov	r2, r1
   232b4:	mov	r8, r0
   232b8:	ldr	r0, [fp, #16]
   232bc:	str	r0, [sp]
   232c0:	add	r3, sp, #8
   232c4:	mov	r0, r8
   232c8:	mov	r1, #0
   232cc:	bl	233a8 <__assert_fail@plt+0x11c34>
   232d0:	cmp	r0, #0
   232d4:	bne	23384 <__assert_fail@plt+0x11c10>
   232d8:	ldr	r7, [sp, #8]
   232dc:	ldr	r4, [sp, #12]
   232e0:	subs	r0, r7, r6
   232e4:	sbcs	r0, r4, r5
   232e8:	blt	2330c <__assert_fail@plt+0x11b98>
   232ec:	ldr	r0, [fp, #12]
   232f0:	ldr	r1, [fp, #8]
   232f4:	subs	r1, r1, r7
   232f8:	sbcs	r0, r0, r4
   232fc:	ldrge	r0, [sp, #8]
   23300:	ldrge	r1, [sp, #12]
   23304:	subge	sp, fp, #24
   23308:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   2330c:	subs	r0, r7, #1073741824	; 0x40000000
   23310:	sbcs	r0, r4, #0
   23314:	blt	23324 <__assert_fail@plt+0x11bb0>
   23318:	bl	1163c <__errno_location@plt>
   2331c:	mov	r1, #75	; 0x4b
   23320:	b	23340 <__assert_fail@plt+0x11bcc>
   23324:	bl	1163c <__errno_location@plt>
   23328:	mvn	r1, #0
   2332c:	mvn	r2, #1073741824	; 0x40000000
   23330:	subs	r2, r2, r7
   23334:	sbcs	r1, r1, r4
   23338:	movlt	r1, #34	; 0x22
   2333c:	movge	r1, #75	; 0x4b
   23340:	str	r1, [r0]
   23344:	ldr	r5, [fp, #24]
   23348:	ldr	r6, [fp, #20]
   2334c:	bl	1163c <__errno_location@plt>
   23350:	ldr	r4, [r0]
   23354:	mov	r0, r8
   23358:	bl	158a0 <__assert_fail@plt+0x412c>
   2335c:	str	r0, [sp]
   23360:	subs	r1, r4, #22
   23364:	movne	r1, r4
   23368:	cmp	r5, #0
   2336c:	movweq	r5, #1
   23370:	movw	r2, #22187	; 0x56ab
   23374:	movt	r2, #2
   23378:	mov	r0, r5
   2337c:	mov	r3, r6
   23380:	bl	115a0 <error@plt>
   23384:	cmp	r0, #1
   23388:	beq	23318 <__assert_fail@plt+0x11ba4>
   2338c:	cmp	r0, #3
   23390:	bne	23344 <__assert_fail@plt+0x11bd0>
   23394:	bl	1163c <__errno_location@plt>
   23398:	mov	r1, #0
   2339c:	b	23340 <__assert_fail@plt+0x11bcc>
   233a0:	mov	r1, #10
   233a4:	b	2329c <__assert_fail@plt+0x11b28>
   233a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233ac:	add	fp, sp, #28
   233b0:	sub	sp, sp, #20
   233b4:	cmp	r2, #37	; 0x25
   233b8:	bcs	237d0 <__assert_fail@plt+0x1205c>
   233bc:	mov	r9, r3
   233c0:	mov	r7, r2
   233c4:	mov	r6, r1
   233c8:	mov	r4, r0
   233cc:	ldr	sl, [fp, #8]
   233d0:	bl	1163c <__errno_location@plt>
   233d4:	mov	r5, r0
   233d8:	mov	r0, #0
   233dc:	str	r0, [r5]
   233e0:	add	r8, sp, #16
   233e4:	cmp	r6, #0
   233e8:	movne	r8, r6
   233ec:	mov	r0, r4
   233f0:	mov	r1, r8
   233f4:	mov	r2, r7
   233f8:	bl	116b4 <strtoimax@plt>
   233fc:	str	r1, [sp, #12]
   23400:	str	r0, [sp, #8]
   23404:	ldr	r7, [r8]
   23408:	cmp	r7, r4
   2340c:	beq	23438 <__assert_fail@plt+0x11cc4>
   23410:	ldr	r0, [r5]
   23414:	cmp	r0, #0
   23418:	beq	23474 <__assert_fail@plt+0x11d00>
   2341c:	mov	r5, #4
   23420:	cmp	r0, #34	; 0x22
   23424:	bne	237c4 <__assert_fail@plt+0x12050>
   23428:	mov	r5, #1
   2342c:	cmp	sl, #0
   23430:	bne	23480 <__assert_fail@plt+0x11d0c>
   23434:	b	237b8 <__assert_fail@plt+0x12044>
   23438:	mov	r5, #4
   2343c:	cmp	sl, #0
   23440:	beq	237c4 <__assert_fail@plt+0x12050>
   23444:	ldrb	r1, [r7]
   23448:	cmp	r1, #0
   2344c:	beq	237c4 <__assert_fail@plt+0x12050>
   23450:	mov	r0, sl
   23454:	bl	11630 <strchr@plt>
   23458:	cmp	r0, #0
   2345c:	beq	237c4 <__assert_fail@plt+0x12050>
   23460:	mov	r5, #0
   23464:	str	r5, [sp, #12]
   23468:	mov	r0, #1
   2346c:	str	r0, [sp, #8]
   23470:	b	23480 <__assert_fail@plt+0x11d0c>
   23474:	mov	r5, r0
   23478:	cmp	sl, #0
   2347c:	beq	237b8 <__assert_fail@plt+0x12044>
   23480:	ldrb	r4, [r7]
   23484:	cmp	r4, #0
   23488:	beq	237b8 <__assert_fail@plt+0x12044>
   2348c:	mov	r0, sl
   23490:	mov	r1, r4
   23494:	bl	11630 <strchr@plt>
   23498:	cmp	r0, #0
   2349c:	beq	236d4 <__assert_fail@plt+0x11f60>
   234a0:	sub	r0, r4, #69	; 0x45
   234a4:	mov	r1, #1
   234a8:	str	r1, [sp, #4]
   234ac:	mov	r6, #1024	; 0x400
   234b0:	cmp	r0, #47	; 0x2f
   234b4:	bhi	235d0 <__assert_fail@plt+0x11e5c>
   234b8:	add	r1, pc, #0
   234bc:	ldr	pc, [r1, r0, lsl #2]
   234c0:	andeq	r3, r2, r0, lsl #11
   234c4:	ldrdeq	r3, [r2], -r0
   234c8:	andeq	r3, r2, r0, lsl #11
   234cc:	ldrdeq	r3, [r2], -r0
   234d0:	ldrdeq	r3, [r2], -r0
   234d4:	ldrdeq	r3, [r2], -r0
   234d8:	andeq	r3, r2, r0, lsl #11
   234dc:	ldrdeq	r3, [r2], -r0
   234e0:	andeq	r3, r2, r0, lsl #11
   234e4:	ldrdeq	r3, [r2], -r0
   234e8:	ldrdeq	r3, [r2], -r0
   234ec:	andeq	r3, r2, r0, lsl #11
   234f0:	ldrdeq	r3, [r2], -r0
   234f4:	ldrdeq	r3, [r2], -r0
   234f8:	ldrdeq	r3, [r2], -r0
   234fc:	andeq	r3, r2, r0, lsl #11
   23500:	ldrdeq	r3, [r2], -r0
   23504:	ldrdeq	r3, [r2], -r0
   23508:	ldrdeq	r3, [r2], -r0
   2350c:	ldrdeq	r3, [r2], -r0
   23510:	andeq	r3, r2, r0, lsl #11
   23514:	andeq	r3, r2, r0, lsl #11
   23518:	ldrdeq	r3, [r2], -r0
   2351c:	ldrdeq	r3, [r2], -r0
   23520:	ldrdeq	r3, [r2], -r0
   23524:	ldrdeq	r3, [r2], -r0
   23528:	ldrdeq	r3, [r2], -r0
   2352c:	ldrdeq	r3, [r2], -r0
   23530:	ldrdeq	r3, [r2], -r0
   23534:	ldrdeq	r3, [r2], -r0
   23538:	ldrdeq	r3, [r2], -r0
   2353c:	ldrdeq	r3, [r2], -r0
   23540:	ldrdeq	r3, [r2], -r0
   23544:	ldrdeq	r3, [r2], -r0
   23548:	andeq	r3, r2, r0, lsl #11
   2354c:	ldrdeq	r3, [r2], -r0
   23550:	ldrdeq	r3, [r2], -r0
   23554:	ldrdeq	r3, [r2], -r0
   23558:	andeq	r3, r2, r0, lsl #11
   2355c:	ldrdeq	r3, [r2], -r0
   23560:	andeq	r3, r2, r0, lsl #11
   23564:	ldrdeq	r3, [r2], -r0
   23568:	ldrdeq	r3, [r2], -r0
   2356c:	ldrdeq	r3, [r2], -r0
   23570:	ldrdeq	r3, [r2], -r0
   23574:	ldrdeq	r3, [r2], -r0
   23578:	ldrdeq	r3, [r2], -r0
   2357c:	andeq	r3, r2, r0, lsl #11
   23580:	mov	r0, sl
   23584:	mov	r1, #48	; 0x30
   23588:	bl	11630 <strchr@plt>
   2358c:	cmp	r0, #0
   23590:	beq	235d0 <__assert_fail@plt+0x11e5c>
   23594:	ldrb	r0, [r7, #1]
   23598:	cmp	r0, #66	; 0x42
   2359c:	cmpne	r0, #68	; 0x44
   235a0:	bne	235b4 <__assert_fail@plt+0x11e40>
   235a4:	mov	r0, #2
   235a8:	str	r0, [sp, #4]
   235ac:	mov	r6, #1000	; 0x3e8
   235b0:	b	235d0 <__assert_fail@plt+0x11e5c>
   235b4:	cmp	r0, #105	; 0x69
   235b8:	bne	235d0 <__assert_fail@plt+0x11e5c>
   235bc:	ldrb	r0, [r7, #2]
   235c0:	mov	r1, #1
   235c4:	cmp	r0, #66	; 0x42
   235c8:	movweq	r1, #3
   235cc:	str	r1, [sp, #4]
   235d0:	sub	r1, r4, #66	; 0x42
   235d4:	cmp	r1, #53	; 0x35
   235d8:	bhi	236d4 <__assert_fail@plt+0x11f60>
   235dc:	mov	r0, #0
   235e0:	add	r2, pc, #0
   235e4:	ldr	pc, [r2, r1, lsl #2]
   235e8:	andeq	r3, r2, r8, lsr r7
   235ec:	ldrdeq	r3, [r2], -r4
   235f0:	ldrdeq	r3, [r2], -r4
   235f4:	andeq	r3, r2, r4, asr #14
   235f8:	ldrdeq	r3, [r2], -r4
   235fc:	andeq	r3, r2, r0, asr #13
   23600:	ldrdeq	r3, [r2], -r4
   23604:	ldrdeq	r3, [r2], -r4
   23608:	ldrdeq	r3, [r2], -r4
   2360c:	andeq	r3, r2, r8, ror #13
   23610:	ldrdeq	r3, [r2], -r4
   23614:	strdeq	r3, [r2], -ip
   23618:	ldrdeq	r3, [r2], -r4
   2361c:	ldrdeq	r3, [r2], -r4
   23620:	andeq	r3, r2, r8, asr r7
   23624:	ldrdeq	r3, [r2], -r4
   23628:	ldrdeq	r3, [r2], -r4
   2362c:	ldrdeq	r3, [r2], -r4
   23630:	andeq	r3, r2, r0, lsl r7
   23634:	ldrdeq	r3, [r2], -r4
   23638:	ldrdeq	r3, [r2], -r4
   2363c:	ldrdeq	r3, [r2], -r4
   23640:	ldrdeq	r3, [r2], -r4
   23644:	andeq	r3, r2, ip, ror #14
   23648:	andeq	r3, r2, r4, lsr #14
   2364c:	ldrdeq	r3, [r2], -r4
   23650:	ldrdeq	r3, [r2], -r4
   23654:	ldrdeq	r3, [r2], -r4
   23658:	ldrdeq	r3, [r2], -r4
   2365c:	ldrdeq	r3, [r2], -r4
   23660:	ldrdeq	r3, [r2], -r4
   23664:	ldrdeq	r3, [r2], -r4
   23668:	andeq	r3, r2, r0, lsl #15
   2366c:	muleq	r2, r8, r7
   23670:	ldrdeq	r3, [r2], -r4
   23674:	ldrdeq	r3, [r2], -r4
   23678:	ldrdeq	r3, [r2], -r4
   2367c:	andeq	r3, r2, r0, asr #13
   23680:	ldrdeq	r3, [r2], -r4
   23684:	ldrdeq	r3, [r2], -r4
   23688:	ldrdeq	r3, [r2], -r4
   2368c:	andeq	r3, r2, r8, ror #13
   23690:	ldrdeq	r3, [r2], -r4
   23694:	strdeq	r3, [r2], -ip
   23698:	ldrdeq	r3, [r2], -r4
   2369c:	ldrdeq	r3, [r2], -r4
   236a0:	ldrdeq	r3, [r2], -r4
   236a4:	ldrdeq	r3, [r2], -r4
   236a8:	ldrdeq	r3, [r2], -r4
   236ac:	ldrdeq	r3, [r2], -r4
   236b0:	andeq	r3, r2, r0, lsl r7
   236b4:	ldrdeq	r3, [r2], -r4
   236b8:	ldrdeq	r3, [r2], -r4
   236bc:	andeq	r3, r2, ip, lsl #15
   236c0:	add	r0, sp, #8
   236c4:	mov	r1, r6
   236c8:	mov	r2, #3
   236cc:	bl	238f4 <__assert_fail@plt+0x12180>
   236d0:	b	23798 <__assert_fail@plt+0x12024>
   236d4:	ldr	r0, [sp, #8]
   236d8:	ldr	r1, [sp, #12]
   236dc:	strd	r0, [r9]
   236e0:	orr	r5, r5, #2
   236e4:	b	237c4 <__assert_fail@plt+0x12050>
   236e8:	add	r0, sp, #8
   236ec:	mov	r1, r6
   236f0:	mov	r2, #1
   236f4:	bl	238f4 <__assert_fail@plt+0x12180>
   236f8:	b	23798 <__assert_fail@plt+0x12024>
   236fc:	add	r0, sp, #8
   23700:	mov	r1, r6
   23704:	mov	r2, #2
   23708:	bl	238f4 <__assert_fail@plt+0x12180>
   2370c:	b	23798 <__assert_fail@plt+0x12024>
   23710:	add	r0, sp, #8
   23714:	mov	r1, r6
   23718:	mov	r2, #4
   2371c:	bl	238f4 <__assert_fail@plt+0x12180>
   23720:	b	23798 <__assert_fail@plt+0x12024>
   23724:	add	r0, sp, #8
   23728:	mov	r1, r6
   2372c:	mov	r2, #7
   23730:	bl	238f4 <__assert_fail@plt+0x12180>
   23734:	b	23798 <__assert_fail@plt+0x12024>
   23738:	add	r0, sp, #8
   2373c:	mov	r1, #1024	; 0x400
   23740:	b	23794 <__assert_fail@plt+0x12020>
   23744:	add	r0, sp, #8
   23748:	mov	r1, r6
   2374c:	mov	r2, #6
   23750:	bl	238f4 <__assert_fail@plt+0x12180>
   23754:	b	23798 <__assert_fail@plt+0x12024>
   23758:	add	r0, sp, #8
   2375c:	mov	r1, r6
   23760:	mov	r2, #5
   23764:	bl	238f4 <__assert_fail@plt+0x12180>
   23768:	b	23798 <__assert_fail@plt+0x12024>
   2376c:	add	r0, sp, #8
   23770:	mov	r1, r6
   23774:	mov	r2, #8
   23778:	bl	238f4 <__assert_fail@plt+0x12180>
   2377c:	b	23798 <__assert_fail@plt+0x12024>
   23780:	add	r0, sp, #8
   23784:	mov	r1, #512	; 0x200
   23788:	b	23794 <__assert_fail@plt+0x12020>
   2378c:	add	r0, sp, #8
   23790:	mov	r1, #2
   23794:	bl	237f0 <__assert_fail@plt+0x1207c>
   23798:	ldr	r1, [r8]
   2379c:	ldr	r3, [sp, #4]
   237a0:	add	r2, r1, r3
   237a4:	str	r2, [r8]
   237a8:	ldrb	r1, [r1, r3]
   237ac:	orr	r5, r0, r5
   237b0:	cmp	r1, #0
   237b4:	orrne	r5, r5, #2
   237b8:	ldr	r0, [sp, #8]
   237bc:	ldr	r1, [sp, #12]
   237c0:	strd	r0, [r9]
   237c4:	mov	r0, r5
   237c8:	sub	sp, fp, #28
   237cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237d0:	movw	r0, #23801	; 0x5cf9
   237d4:	movt	r0, #2
   237d8:	movw	r1, #23839	; 0x5d1f
   237dc:	movt	r1, #2
   237e0:	movw	r3, #23855	; 0x5d2f
   237e4:	movt	r3, #2
   237e8:	mov	r2, #85	; 0x55
   237ec:	bl	11774 <__assert_fail@plt>
   237f0:	push	{r4, r5, r6, r7, fp, lr}
   237f4:	add	fp, sp, #16
   237f8:	mov	r5, r1
   237fc:	mov	r4, r0
   23800:	cmn	r1, #1
   23804:	ble	2382c <__assert_fail@plt+0x120b8>
   23808:	cmp	r5, #0
   2380c:	beq	23890 <__assert_fail@plt+0x1211c>
   23810:	ldrd	r6, [r4]
   23814:	cmn	r7, #1
   23818:	ble	23864 <__assert_fail@plt+0x120f0>
   2381c:	asr	r3, r5, #31
   23820:	mvn	r0, #0
   23824:	mvn	r1, #-2147483648	; 0x80000000
   23828:	b	2384c <__assert_fail@plt+0x120d8>
   2382c:	ldrd	r6, [r4]
   23830:	cmn	r7, #1
   23834:	ble	238ac <__assert_fail@plt+0x12138>
   23838:	cmn	r5, #1
   2383c:	beq	23890 <__assert_fail@plt+0x1211c>
   23840:	asr	r3, r5, #31
   23844:	mov	r0, #0
   23848:	mov	r1, #-2147483648	; 0x80000000
   2384c:	mov	r2, r5
   23850:	bl	247dc <__assert_fail@plt+0x13068>
   23854:	subs	r0, r0, r6
   23858:	sbcs	r0, r1, r7
   2385c:	bge	23890 <__assert_fail@plt+0x1211c>
   23860:	b	238cc <__assert_fail@plt+0x12158>
   23864:	and	r0, r6, r7
   23868:	cmn	r0, #1
   2386c:	beq	23890 <__assert_fail@plt+0x1211c>
   23870:	mov	r0, #0
   23874:	mov	r1, #-2147483648	; 0x80000000
   23878:	mov	r2, r6
   2387c:	mov	r3, r7
   23880:	bl	247dc <__assert_fail@plt+0x13068>
   23884:	subs	r0, r0, r5
   23888:	sbcs	r0, r1, r5, asr #31
   2388c:	blt	238cc <__assert_fail@plt+0x12158>
   23890:	ldrd	r0, [r4]
   23894:	umull	r2, r3, r0, r5
   23898:	asr	r7, r5, #31
   2389c:	mla	r0, r0, r7, r3
   238a0:	mla	r1, r1, r5, r0
   238a4:	mov	r0, #0
   238a8:	b	238e8 <__assert_fail@plt+0x12174>
   238ac:	asr	r3, r5, #31
   238b0:	mvn	r0, #0
   238b4:	mvn	r1, #-2147483648	; 0x80000000
   238b8:	mov	r2, r5
   238bc:	bl	247dc <__assert_fail@plt+0x13068>
   238c0:	subs	r0, r6, r0
   238c4:	sbcs	r0, r7, r1
   238c8:	bge	23890 <__assert_fail@plt+0x1211c>
   238cc:	ldr	r0, [r4, #4]
   238d0:	mvn	r1, #-2147483648	; 0x80000000
   238d4:	cmp	r0, #0
   238d8:	movmi	r1, #-2147483648	; 0x80000000
   238dc:	mvn	r2, #0
   238e0:	movwmi	r2, #0
   238e4:	mov	r0, #1
   238e8:	str	r2, [r4]
   238ec:	str	r1, [r4, #4]
   238f0:	pop	{r4, r5, r6, r7, fp, pc}
   238f4:	push	{r4, r5, r6, r7, fp, lr}
   238f8:	add	fp, sp, #16
   238fc:	cmp	r2, #0
   23900:	beq	23934 <__assert_fail@plt+0x121c0>
   23904:	mov	r4, r2
   23908:	mov	r5, r1
   2390c:	mov	r7, r0
   23910:	mov	r6, #0
   23914:	mov	r0, r7
   23918:	mov	r1, r5
   2391c:	bl	237f0 <__assert_fail@plt+0x1207c>
   23920:	orr	r6, r0, r6
   23924:	subs	r4, r4, #1
   23928:	bne	23914 <__assert_fail@plt+0x121a0>
   2392c:	mov	r0, r6
   23930:	pop	{r4, r5, r6, r7, fp, pc}
   23934:	mov	r6, #0
   23938:	mov	r0, r6
   2393c:	pop	{r4, r5, r6, r7, fp, pc}
   23940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23944:	add	fp, sp, #28
   23948:	sub	sp, sp, #20
   2394c:	cmp	r2, #37	; 0x25
   23950:	bcs	23d84 <__assert_fail@plt+0x12610>
   23954:	mov	r5, r2
   23958:	mov	r6, r1
   2395c:	mov	r4, r0
   23960:	str	r3, [sp, #4]
   23964:	ldr	sl, [fp, #8]
   23968:	bl	1163c <__errno_location@plt>
   2396c:	mov	r7, r0
   23970:	mov	r0, #0
   23974:	str	r0, [r7]
   23978:	bl	11600 <__ctype_b_loc@plt>
   2397c:	ldr	r1, [r0]
   23980:	mov	r2, r4
   23984:	ldrb	r0, [r2], #1
   23988:	add	r3, r1, r0, lsl #1
   2398c:	ldrb	r3, [r3, #1]
   23990:	tst	r3, #32
   23994:	bne	23984 <__assert_fail@plt+0x12210>
   23998:	add	r9, sp, #16
   2399c:	cmp	r6, #0
   239a0:	movne	r9, r6
   239a4:	mov	r8, #4
   239a8:	cmp	r0, #45	; 0x2d
   239ac:	beq	23d78 <__assert_fail@plt+0x12604>
   239b0:	mov	r0, r4
   239b4:	mov	r1, r9
   239b8:	mov	r2, r5
   239bc:	bl	1169c <strtoumax@plt>
   239c0:	str	r1, [sp, #12]
   239c4:	str	r0, [sp, #8]
   239c8:	ldr	r6, [r9]
   239cc:	cmp	r6, r4
   239d0:	beq	239f8 <__assert_fail@plt+0x12284>
   239d4:	ldr	r0, [r7]
   239d8:	cmp	r0, #0
   239dc:	beq	23a30 <__assert_fail@plt+0x122bc>
   239e0:	cmp	r0, #34	; 0x22
   239e4:	bne	23d78 <__assert_fail@plt+0x12604>
   239e8:	mov	r8, #1
   239ec:	cmp	sl, #0
   239f0:	bne	23a3c <__assert_fail@plt+0x122c8>
   239f4:	b	23d68 <__assert_fail@plt+0x125f4>
   239f8:	cmp	sl, #0
   239fc:	beq	23d78 <__assert_fail@plt+0x12604>
   23a00:	ldrb	r1, [r6]
   23a04:	cmp	r1, #0
   23a08:	beq	23d78 <__assert_fail@plt+0x12604>
   23a0c:	mov	r0, sl
   23a10:	bl	11630 <strchr@plt>
   23a14:	cmp	r0, #0
   23a18:	beq	23d78 <__assert_fail@plt+0x12604>
   23a1c:	mov	r8, #0
   23a20:	str	r8, [sp, #12]
   23a24:	mov	r0, #1
   23a28:	str	r0, [sp, #8]
   23a2c:	b	23a3c <__assert_fail@plt+0x122c8>
   23a30:	mov	r8, r0
   23a34:	cmp	sl, #0
   23a38:	beq	23d68 <__assert_fail@plt+0x125f4>
   23a3c:	ldrb	r4, [r6]
   23a40:	cmp	r4, #0
   23a44:	beq	23d68 <__assert_fail@plt+0x125f4>
   23a48:	mov	r0, sl
   23a4c:	mov	r1, r4
   23a50:	bl	11630 <strchr@plt>
   23a54:	cmp	r0, #0
   23a58:	beq	23c84 <__assert_fail@plt+0x12510>
   23a5c:	sub	r0, r4, #69	; 0x45
   23a60:	mov	r7, #1
   23a64:	mov	r5, #1024	; 0x400
   23a68:	cmp	r0, #47	; 0x2f
   23a6c:	bhi	23b80 <__assert_fail@plt+0x1240c>
   23a70:	add	r1, pc, #0
   23a74:	ldr	pc, [r1, r0, lsl #2]
   23a78:	andeq	r3, r2, r8, lsr fp
   23a7c:	andeq	r3, r2, r0, lsl #23
   23a80:	andeq	r3, r2, r8, lsr fp
   23a84:	andeq	r3, r2, r0, lsl #23
   23a88:	andeq	r3, r2, r0, lsl #23
   23a8c:	andeq	r3, r2, r0, lsl #23
   23a90:	andeq	r3, r2, r8, lsr fp
   23a94:	andeq	r3, r2, r0, lsl #23
   23a98:	andeq	r3, r2, r8, lsr fp
   23a9c:	andeq	r3, r2, r0, lsl #23
   23aa0:	andeq	r3, r2, r0, lsl #23
   23aa4:	andeq	r3, r2, r8, lsr fp
   23aa8:	andeq	r3, r2, r0, lsl #23
   23aac:	andeq	r3, r2, r0, lsl #23
   23ab0:	andeq	r3, r2, r0, lsl #23
   23ab4:	andeq	r3, r2, r8, lsr fp
   23ab8:	andeq	r3, r2, r0, lsl #23
   23abc:	andeq	r3, r2, r0, lsl #23
   23ac0:	andeq	r3, r2, r0, lsl #23
   23ac4:	andeq	r3, r2, r0, lsl #23
   23ac8:	andeq	r3, r2, r8, lsr fp
   23acc:	andeq	r3, r2, r8, lsr fp
   23ad0:	andeq	r3, r2, r0, lsl #23
   23ad4:	andeq	r3, r2, r0, lsl #23
   23ad8:	andeq	r3, r2, r0, lsl #23
   23adc:	andeq	r3, r2, r0, lsl #23
   23ae0:	andeq	r3, r2, r0, lsl #23
   23ae4:	andeq	r3, r2, r0, lsl #23
   23ae8:	andeq	r3, r2, r0, lsl #23
   23aec:	andeq	r3, r2, r0, lsl #23
   23af0:	andeq	r3, r2, r0, lsl #23
   23af4:	andeq	r3, r2, r0, lsl #23
   23af8:	andeq	r3, r2, r0, lsl #23
   23afc:	andeq	r3, r2, r0, lsl #23
   23b00:	andeq	r3, r2, r8, lsr fp
   23b04:	andeq	r3, r2, r0, lsl #23
   23b08:	andeq	r3, r2, r0, lsl #23
   23b0c:	andeq	r3, r2, r0, lsl #23
   23b10:	andeq	r3, r2, r8, lsr fp
   23b14:	andeq	r3, r2, r0, lsl #23
   23b18:	andeq	r3, r2, r8, lsr fp
   23b1c:	andeq	r3, r2, r0, lsl #23
   23b20:	andeq	r3, r2, r0, lsl #23
   23b24:	andeq	r3, r2, r0, lsl #23
   23b28:	andeq	r3, r2, r0, lsl #23
   23b2c:	andeq	r3, r2, r0, lsl #23
   23b30:	andeq	r3, r2, r0, lsl #23
   23b34:	andeq	r3, r2, r8, lsr fp
   23b38:	mov	r0, sl
   23b3c:	mov	r1, #48	; 0x30
   23b40:	bl	11630 <strchr@plt>
   23b44:	cmp	r0, #0
   23b48:	beq	23b80 <__assert_fail@plt+0x1240c>
   23b4c:	ldrb	r0, [r6, #1]
   23b50:	cmp	r0, #66	; 0x42
   23b54:	cmpne	r0, #68	; 0x44
   23b58:	bne	23b68 <__assert_fail@plt+0x123f4>
   23b5c:	mov	r7, #2
   23b60:	mov	r5, #1000	; 0x3e8
   23b64:	b	23b80 <__assert_fail@plt+0x1240c>
   23b68:	cmp	r0, #105	; 0x69
   23b6c:	bne	23b80 <__assert_fail@plt+0x1240c>
   23b70:	ldrb	r0, [r6, #2]
   23b74:	mov	r7, #1
   23b78:	cmp	r0, #66	; 0x42
   23b7c:	movweq	r7, #3
   23b80:	sub	r1, r4, #66	; 0x42
   23b84:	cmp	r1, #53	; 0x35
   23b88:	bhi	23c84 <__assert_fail@plt+0x12510>
   23b8c:	mov	r0, #0
   23b90:	add	r2, pc, #0
   23b94:	ldr	pc, [r2, r1, lsl #2]
   23b98:	andeq	r3, r2, ip, ror #25
   23b9c:	andeq	r3, r2, r4, lsl #25
   23ba0:	andeq	r3, r2, r4, lsl #25
   23ba4:	strdeq	r3, [r2], -r8
   23ba8:	andeq	r3, r2, r4, lsl #25
   23bac:	andeq	r3, r2, r0, ror ip
   23bb0:	andeq	r3, r2, r4, lsl #25
   23bb4:	andeq	r3, r2, r4, lsl #25
   23bb8:	andeq	r3, r2, r4, lsl #25
   23bbc:	muleq	r2, ip, ip
   23bc0:	andeq	r3, r2, r4, lsl #25
   23bc4:			; <UNDEFINED> instruction: 0x00023cb0
   23bc8:	andeq	r3, r2, r4, lsl #25
   23bcc:	andeq	r3, r2, r4, lsl #25
   23bd0:	andeq	r3, r2, ip, lsl #26
   23bd4:	andeq	r3, r2, r4, lsl #25
   23bd8:	andeq	r3, r2, r4, lsl #25
   23bdc:	andeq	r3, r2, r4, lsl #25
   23be0:	andeq	r3, r2, r4, asr #25
   23be4:	andeq	r3, r2, r4, lsl #25
   23be8:	andeq	r3, r2, r4, lsl #25
   23bec:	andeq	r3, r2, r4, lsl #25
   23bf0:	andeq	r3, r2, r4, lsl #25
   23bf4:	andeq	r3, r2, r0, lsr #26
   23bf8:	ldrdeq	r3, [r2], -r8
   23bfc:	andeq	r3, r2, r4, lsl #25
   23c00:	andeq	r3, r2, r4, lsl #25
   23c04:	andeq	r3, r2, r4, lsl #25
   23c08:	andeq	r3, r2, r4, lsl #25
   23c0c:	andeq	r3, r2, r4, lsl #25
   23c10:	andeq	r3, r2, r4, lsl #25
   23c14:	andeq	r3, r2, r4, lsl #25
   23c18:	andeq	r3, r2, r4, lsr sp
   23c1c:	andeq	r3, r2, ip, asr #26
   23c20:	andeq	r3, r2, r4, lsl #25
   23c24:	andeq	r3, r2, r4, lsl #25
   23c28:	andeq	r3, r2, r4, lsl #25
   23c2c:	andeq	r3, r2, r0, ror ip
   23c30:	andeq	r3, r2, r4, lsl #25
   23c34:	andeq	r3, r2, r4, lsl #25
   23c38:	andeq	r3, r2, r4, lsl #25
   23c3c:	muleq	r2, ip, ip
   23c40:	andeq	r3, r2, r4, lsl #25
   23c44:			; <UNDEFINED> instruction: 0x00023cb0
   23c48:	andeq	r3, r2, r4, lsl #25
   23c4c:	andeq	r3, r2, r4, lsl #25
   23c50:	andeq	r3, r2, r4, lsl #25
   23c54:	andeq	r3, r2, r4, lsl #25
   23c58:	andeq	r3, r2, r4, lsl #25
   23c5c:	andeq	r3, r2, r4, lsl #25
   23c60:	andeq	r3, r2, r4, asr #25
   23c64:	andeq	r3, r2, r4, lsl #25
   23c68:	andeq	r3, r2, r4, lsl #25
   23c6c:	andeq	r3, r2, r0, asr #26
   23c70:	add	r0, sp, #8
   23c74:	mov	r1, r5
   23c78:	mov	r2, #3
   23c7c:	bl	23e30 <__assert_fail@plt+0x126bc>
   23c80:	b	23d4c <__assert_fail@plt+0x125d8>
   23c84:	ldr	r0, [sp, #8]
   23c88:	ldr	r1, [sp, #12]
   23c8c:	ldr	r2, [sp, #4]
   23c90:	strd	r0, [r2]
   23c94:	orr	r8, r8, #2
   23c98:	b	23d78 <__assert_fail@plt+0x12604>
   23c9c:	add	r0, sp, #8
   23ca0:	mov	r1, r5
   23ca4:	mov	r2, #1
   23ca8:	bl	23e30 <__assert_fail@plt+0x126bc>
   23cac:	b	23d4c <__assert_fail@plt+0x125d8>
   23cb0:	add	r0, sp, #8
   23cb4:	mov	r1, r5
   23cb8:	mov	r2, #2
   23cbc:	bl	23e30 <__assert_fail@plt+0x126bc>
   23cc0:	b	23d4c <__assert_fail@plt+0x125d8>
   23cc4:	add	r0, sp, #8
   23cc8:	mov	r1, r5
   23ccc:	mov	r2, #4
   23cd0:	bl	23e30 <__assert_fail@plt+0x126bc>
   23cd4:	b	23d4c <__assert_fail@plt+0x125d8>
   23cd8:	add	r0, sp, #8
   23cdc:	mov	r1, r5
   23ce0:	mov	r2, #7
   23ce4:	bl	23e30 <__assert_fail@plt+0x126bc>
   23ce8:	b	23d4c <__assert_fail@plt+0x125d8>
   23cec:	add	r0, sp, #8
   23cf0:	mov	r1, #1024	; 0x400
   23cf4:	b	23d48 <__assert_fail@plt+0x125d4>
   23cf8:	add	r0, sp, #8
   23cfc:	mov	r1, r5
   23d00:	mov	r2, #6
   23d04:	bl	23e30 <__assert_fail@plt+0x126bc>
   23d08:	b	23d4c <__assert_fail@plt+0x125d8>
   23d0c:	add	r0, sp, #8
   23d10:	mov	r1, r5
   23d14:	mov	r2, #5
   23d18:	bl	23e30 <__assert_fail@plt+0x126bc>
   23d1c:	b	23d4c <__assert_fail@plt+0x125d8>
   23d20:	add	r0, sp, #8
   23d24:	mov	r1, r5
   23d28:	mov	r2, #8
   23d2c:	bl	23e30 <__assert_fail@plt+0x126bc>
   23d30:	b	23d4c <__assert_fail@plt+0x125d8>
   23d34:	add	r0, sp, #8
   23d38:	mov	r1, #512	; 0x200
   23d3c:	b	23d48 <__assert_fail@plt+0x125d4>
   23d40:	add	r0, sp, #8
   23d44:	mov	r1, #2
   23d48:	bl	23da4 <__assert_fail@plt+0x12630>
   23d4c:	ldr	r1, [r9]
   23d50:	add	r2, r1, r7
   23d54:	str	r2, [r9]
   23d58:	ldrb	r1, [r1, r7]
   23d5c:	orr	r8, r0, r8
   23d60:	cmp	r1, #0
   23d64:	orrne	r8, r8, #2
   23d68:	ldr	r0, [sp, #8]
   23d6c:	ldr	r1, [sp, #12]
   23d70:	ldr	r2, [sp, #4]
   23d74:	strd	r0, [r2]
   23d78:	mov	r0, r8
   23d7c:	sub	sp, fp, #28
   23d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d84:	movw	r0, #23801	; 0x5cf9
   23d88:	movt	r0, #2
   23d8c:	movw	r1, #23839	; 0x5d1f
   23d90:	movt	r1, #2
   23d94:	movw	r3, #23933	; 0x5d7d
   23d98:	movt	r3, #2
   23d9c:	mov	r2, #85	; 0x55
   23da0:	bl	11774 <__assert_fail@plt>
   23da4:	push	{r4, r5, r6, r7, fp, lr}
   23da8:	add	fp, sp, #16
   23dac:	mov	r5, r1
   23db0:	mov	r4, r0
   23db4:	cmn	r1, #1
   23db8:	ble	23df0 <__assert_fail@plt+0x1267c>
   23dbc:	cmp	r5, #0
   23dc0:	beq	23e10 <__assert_fail@plt+0x1269c>
   23dc4:	asr	r3, r5, #31
   23dc8:	mvn	r6, #0
   23dcc:	mvn	r0, #0
   23dd0:	mvn	r1, #0
   23dd4:	mov	r2, r5
   23dd8:	bl	248b0 <__assert_fail@plt+0x1313c>
   23ddc:	ldrd	r2, [r4]
   23de0:	subs	r0, r0, r2
   23de4:	sbcs	r0, r1, r3
   23de8:	bcc	23e00 <__assert_fail@plt+0x1268c>
   23dec:	b	23e10 <__assert_fail@plt+0x1269c>
   23df0:	ldrd	r0, [r4]
   23df4:	orrs	r0, r0, r1
   23df8:	beq	23e10 <__assert_fail@plt+0x1269c>
   23dfc:	mvn	r6, #0
   23e00:	mov	r0, #1
   23e04:	mvn	r7, #0
   23e08:	strd	r6, [r4]
   23e0c:	pop	{r4, r5, r6, r7, fp, pc}
   23e10:	ldrd	r0, [r4]
   23e14:	umull	r6, r2, r0, r5
   23e18:	asr	r3, r5, #31
   23e1c:	mla	r0, r0, r3, r2
   23e20:	mla	r7, r1, r5, r0
   23e24:	mov	r0, #0
   23e28:	strd	r6, [r4]
   23e2c:	pop	{r4, r5, r6, r7, fp, pc}
   23e30:	push	{r4, r5, r6, r7, fp, lr}
   23e34:	add	fp, sp, #16
   23e38:	cmp	r2, #0
   23e3c:	beq	23e70 <__assert_fail@plt+0x126fc>
   23e40:	mov	r4, r2
   23e44:	mov	r5, r1
   23e48:	mov	r7, r0
   23e4c:	mov	r6, #0
   23e50:	mov	r0, r7
   23e54:	mov	r1, r5
   23e58:	bl	23da4 <__assert_fail@plt+0x12630>
   23e5c:	orr	r6, r0, r6
   23e60:	subs	r4, r4, #1
   23e64:	bne	23e50 <__assert_fail@plt+0x126dc>
   23e68:	mov	r0, r6
   23e6c:	pop	{r4, r5, r6, r7, fp, pc}
   23e70:	mov	r6, #0
   23e74:	mov	r0, r6
   23e78:	pop	{r4, r5, r6, r7, fp, pc}
   23e7c:	clz	r2, r1
   23e80:	lsr	r2, r2, #5
   23e84:	clz	r3, r0
   23e88:	lsr	r3, r3, #5
   23e8c:	orrs	r2, r3, r2
   23e90:	movwne	r1, #1
   23e94:	movwne	r0, #1
   23e98:	cmp	r1, #0
   23e9c:	beq	23ecc <__assert_fail@plt+0x12758>
   23ea0:	mvn	r2, #-2147483648	; 0x80000000
   23ea4:	udiv	r2, r2, r1
   23ea8:	cmp	r2, r0
   23eac:	bcs	23ecc <__assert_fail@plt+0x12758>
   23eb0:	push	{fp, lr}
   23eb4:	mov	fp, sp
   23eb8:	bl	1163c <__errno_location@plt>
   23ebc:	mov	r1, #12
   23ec0:	str	r1, [r0]
   23ec4:	mov	r0, #0
   23ec8:	pop	{fp, pc}
   23ecc:	b	113d8 <calloc@plt>
   23ed0:	cmp	r0, #0
   23ed4:	movweq	r0, #1
   23ed8:	cmn	r0, #1
   23edc:	ble	23ee4 <__assert_fail@plt+0x12770>
   23ee0:	b	115b8 <malloc@plt>
   23ee4:	push	{fp, lr}
   23ee8:	mov	fp, sp
   23eec:	bl	1163c <__errno_location@plt>
   23ef0:	mov	r1, #12
   23ef4:	str	r1, [r0]
   23ef8:	mov	r0, #0
   23efc:	pop	{fp, pc}
   23f00:	push	{fp, lr}
   23f04:	mov	fp, sp
   23f08:	cmp	r0, #0
   23f0c:	beq	23f28 <__assert_fail@plt+0x127b4>
   23f10:	cmp	r1, #0
   23f14:	beq	23f34 <__assert_fail@plt+0x127c0>
   23f18:	cmn	r1, #1
   23f1c:	ble	23f40 <__assert_fail@plt+0x127cc>
   23f20:	pop	{fp, lr}
   23f24:	b	11504 <realloc@plt>
   23f28:	mov	r0, r1
   23f2c:	pop	{fp, lr}
   23f30:	b	23ed0 <__assert_fail@plt+0x1275c>
   23f34:	bl	13f1c <__assert_fail@plt+0x27a8>
   23f38:	mov	r0, #0
   23f3c:	pop	{fp, pc}
   23f40:	bl	1163c <__errno_location@plt>
   23f44:	mov	r1, #12
   23f48:	str	r1, [r0]
   23f4c:	mov	r0, #0
   23f50:	pop	{fp, pc}
   23f54:	mov	r1, r0
   23f58:	sub	r2, r0, #65	; 0x41
   23f5c:	mov	r0, #1
   23f60:	cmp	r2, #26
   23f64:	subcs	r2, r1, #97	; 0x61
   23f68:	cmpcs	r2, #26
   23f6c:	bcs	23f74 <__assert_fail@plt+0x12800>
   23f70:	bx	lr
   23f74:	sub	r1, r1, #48	; 0x30
   23f78:	cmp	r1, #10
   23f7c:	movcs	r0, #0
   23f80:	bx	lr
   23f84:	mov	r1, r0
   23f88:	sub	r2, r0, #65	; 0x41
   23f8c:	mov	r0, #1
   23f90:	cmp	r2, #26
   23f94:	subcs	r1, r1, #97	; 0x61
   23f98:	cmpcs	r1, #26
   23f9c:	movcs	r0, #0
   23fa0:	bx	lr
   23fa4:	mov	r1, #0
   23fa8:	cmp	r0, #128	; 0x80
   23fac:	movwcc	r1, #1
   23fb0:	mov	r0, r1
   23fb4:	bx	lr
   23fb8:	sub	r1, r0, #9
   23fbc:	clz	r1, r1
   23fc0:	lsr	r1, r1, #5
   23fc4:	sub	r0, r0, #32
   23fc8:	clz	r0, r0
   23fcc:	lsr	r0, r0, #5
   23fd0:	orr	r0, r0, r1
   23fd4:	bx	lr
   23fd8:	mov	r1, r0
   23fdc:	mov	r0, #1
   23fe0:	cmp	r1, #32
   23fe4:	bxcc	lr
   23fe8:	cmp	r1, #127	; 0x7f
   23fec:	movne	r0, #0
   23ff0:	bx	lr
   23ff4:	sub	r1, r0, #48	; 0x30
   23ff8:	mov	r0, #0
   23ffc:	cmp	r1, #10
   24000:	movwcc	r0, #1
   24004:	bx	lr
   24008:	sub	r1, r0, #33	; 0x21
   2400c:	mov	r0, #0
   24010:	cmp	r1, #94	; 0x5e
   24014:	movwcc	r0, #1
   24018:	bx	lr
   2401c:	sub	r1, r0, #97	; 0x61
   24020:	mov	r0, #0
   24024:	cmp	r1, #26
   24028:	movwcc	r0, #1
   2402c:	bx	lr
   24030:	sub	r1, r0, #32
   24034:	mov	r0, #0
   24038:	cmp	r1, #95	; 0x5f
   2403c:	movwcc	r0, #1
   24040:	bx	lr
   24044:	sub	r1, r0, #33	; 0x21
   24048:	cmp	r1, #93	; 0x5d
   2404c:	bhi	241d8 <__assert_fail@plt+0x12a64>
   24050:	mov	r0, #1
   24054:	add	r2, pc, #0
   24058:	ldr	pc, [r2, r1, lsl #2]
   2405c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24060:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24064:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24068:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2406c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24070:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24074:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24078:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2407c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24080:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24084:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24088:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2408c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24090:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24094:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24098:	ldrdeq	r4, [r2], -r8
   2409c:	ldrdeq	r4, [r2], -r8
   240a0:	ldrdeq	r4, [r2], -r8
   240a4:	ldrdeq	r4, [r2], -r8
   240a8:	ldrdeq	r4, [r2], -r8
   240ac:	ldrdeq	r4, [r2], -r8
   240b0:	ldrdeq	r4, [r2], -r8
   240b4:	ldrdeq	r4, [r2], -r8
   240b8:	ldrdeq	r4, [r2], -r8
   240bc:	ldrdeq	r4, [r2], -r8
   240c0:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   240c4:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   240c8:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   240cc:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   240d0:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   240d4:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   240d8:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   240dc:	ldrdeq	r4, [r2], -r8
   240e0:	ldrdeq	r4, [r2], -r8
   240e4:	ldrdeq	r4, [r2], -r8
   240e8:	ldrdeq	r4, [r2], -r8
   240ec:	ldrdeq	r4, [r2], -r8
   240f0:	ldrdeq	r4, [r2], -r8
   240f4:	ldrdeq	r4, [r2], -r8
   240f8:	ldrdeq	r4, [r2], -r8
   240fc:	ldrdeq	r4, [r2], -r8
   24100:	ldrdeq	r4, [r2], -r8
   24104:	ldrdeq	r4, [r2], -r8
   24108:	ldrdeq	r4, [r2], -r8
   2410c:	ldrdeq	r4, [r2], -r8
   24110:	ldrdeq	r4, [r2], -r8
   24114:	ldrdeq	r4, [r2], -r8
   24118:	ldrdeq	r4, [r2], -r8
   2411c:	ldrdeq	r4, [r2], -r8
   24120:	ldrdeq	r4, [r2], -r8
   24124:	ldrdeq	r4, [r2], -r8
   24128:	ldrdeq	r4, [r2], -r8
   2412c:	ldrdeq	r4, [r2], -r8
   24130:	ldrdeq	r4, [r2], -r8
   24134:	ldrdeq	r4, [r2], -r8
   24138:	ldrdeq	r4, [r2], -r8
   2413c:	ldrdeq	r4, [r2], -r8
   24140:	ldrdeq	r4, [r2], -r8
   24144:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24148:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2414c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24150:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24154:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24158:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2415c:	ldrdeq	r4, [r2], -r8
   24160:	ldrdeq	r4, [r2], -r8
   24164:	ldrdeq	r4, [r2], -r8
   24168:	ldrdeq	r4, [r2], -r8
   2416c:	ldrdeq	r4, [r2], -r8
   24170:	ldrdeq	r4, [r2], -r8
   24174:	ldrdeq	r4, [r2], -r8
   24178:	ldrdeq	r4, [r2], -r8
   2417c:	ldrdeq	r4, [r2], -r8
   24180:	ldrdeq	r4, [r2], -r8
   24184:	ldrdeq	r4, [r2], -r8
   24188:	ldrdeq	r4, [r2], -r8
   2418c:	ldrdeq	r4, [r2], -r8
   24190:	ldrdeq	r4, [r2], -r8
   24194:	ldrdeq	r4, [r2], -r8
   24198:	ldrdeq	r4, [r2], -r8
   2419c:	ldrdeq	r4, [r2], -r8
   241a0:	ldrdeq	r4, [r2], -r8
   241a4:	ldrdeq	r4, [r2], -r8
   241a8:	ldrdeq	r4, [r2], -r8
   241ac:	ldrdeq	r4, [r2], -r8
   241b0:	ldrdeq	r4, [r2], -r8
   241b4:	ldrdeq	r4, [r2], -r8
   241b8:	ldrdeq	r4, [r2], -r8
   241bc:	ldrdeq	r4, [r2], -r8
   241c0:	ldrdeq	r4, [r2], -r8
   241c4:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   241c8:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   241cc:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   241d0:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   241d4:	bx	lr
   241d8:	mov	r0, #0
   241dc:	bx	lr
   241e0:	sub	r0, r0, #9
   241e4:	cmp	r0, #23
   241e8:	movhi	r0, #0
   241ec:	bxhi	lr
   241f0:	bic	r0, r0, #-16777216	; 0xff000000
   241f4:	movw	r1, #31
   241f8:	movt	r1, #128	; 0x80
   241fc:	mov	r2, #1
   24200:	and	r0, r2, r1, lsr r0
   24204:	bx	lr
   24208:	sub	r1, r0, #65	; 0x41
   2420c:	mov	r0, #0
   24210:	cmp	r1, #26
   24214:	movwcc	r0, #1
   24218:	bx	lr
   2421c:	mov	r1, r0
   24220:	sub	r2, r0, #48	; 0x30
   24224:	mov	r0, #1
   24228:	cmp	r2, #22
   2422c:	bhi	24244 <__assert_fail@plt+0x12ad0>
   24230:	mov	ip, #1
   24234:	movw	r3, #1023	; 0x3ff
   24238:	movt	r3, #126	; 0x7e
   2423c:	tst	r3, ip, lsl r2
   24240:	bxne	lr
   24244:	sub	r1, r1, #97	; 0x61
   24248:	cmp	r1, #6
   2424c:	movcs	r0, #0
   24250:	bxcs	lr
   24254:	bx	lr
   24258:	sub	r1, r0, #65	; 0x41
   2425c:	cmp	r1, #26
   24260:	addcc	r0, r0, #32
   24264:	bx	lr
   24268:	sub	r1, r0, #97	; 0x61
   2426c:	cmp	r1, #26
   24270:	subcc	r0, r0, #32
   24274:	bx	lr
   24278:	push	{r4, r5, r6, sl, fp, lr}
   2427c:	add	fp, sp, #16
   24280:	mov	r4, r0
   24284:	bl	1157c <__fpending@plt>
   24288:	mov	r5, r0
   2428c:	mov	r0, r4
   24290:	bl	11588 <ferror_unlocked@plt>
   24294:	mov	r6, r0
   24298:	mov	r0, r4
   2429c:	bl	13cfc <__assert_fail@plt+0x2588>
   242a0:	cmp	r6, #0
   242a4:	beq	242c8 <__assert_fail@plt+0x12b54>
   242a8:	mvn	r4, #0
   242ac:	cmp	r0, #0
   242b0:	bne	242f4 <__assert_fail@plt+0x12b80>
   242b4:	bl	1163c <__errno_location@plt>
   242b8:	mov	r1, #0
   242bc:	str	r1, [r0]
   242c0:	mov	r0, r4
   242c4:	pop	{r4, r5, r6, sl, fp, pc}
   242c8:	cmp	r0, #0
   242cc:	mov	r4, r0
   242d0:	mvnne	r4, #0
   242d4:	cmp	r5, #0
   242d8:	bne	242f4 <__assert_fail@plt+0x12b80>
   242dc:	cmp	r0, #0
   242e0:	beq	242f4 <__assert_fail@plt+0x12b80>
   242e4:	bl	1163c <__errno_location@plt>
   242e8:	ldr	r0, [r0]
   242ec:	subs	r4, r0, #9
   242f0:	mvnne	r4, #0
   242f4:	mov	r0, r4
   242f8:	pop	{r4, r5, r6, sl, fp, pc}
   242fc:	push	{r4, r5, r6, r7, fp, lr}
   24300:	add	fp, sp, #16
   24304:	mov	r5, r1
   24308:	mov	r4, r0
   2430c:	ldr	r0, [r0, #4]
   24310:	cmp	r0, r1
   24314:	bcs	24348 <__assert_fail@plt+0x12bd4>
   24318:	mov	r6, r3
   2431c:	cmp	r3, #0
   24320:	beq	24354 <__assert_fail@plt+0x12be0>
   24324:	mvn	r0, #0
   24328:	udiv	r0, r0, r6
   2432c:	cmp	r0, r5
   24330:	bcs	24354 <__assert_fail@plt+0x12be0>
   24334:	bl	1163c <__errno_location@plt>
   24338:	mov	r1, #12
   2433c:	str	r1, [r0]
   24340:	mov	r0, #0
   24344:	pop	{r4, r5, r6, r7, fp, pc}
   24348:	str	r5, [r4]
   2434c:	mov	r0, #1
   24350:	pop	{r4, r5, r6, r7, fp, pc}
   24354:	mul	r1, r6, r5
   24358:	ldr	r0, [r4, #8]
   2435c:	cmp	r0, r2
   24360:	beq	24378 <__assert_fail@plt+0x12c04>
   24364:	bl	23f00 <__assert_fail@plt+0x1278c>
   24368:	mov	r7, r0
   2436c:	cmp	r0, #0
   24370:	bne	243a8 <__assert_fail@plt+0x12c34>
   24374:	b	243b8 <__assert_fail@plt+0x12c44>
   24378:	mov	r0, r1
   2437c:	bl	23ed0 <__assert_fail@plt+0x1275c>
   24380:	cmp	r0, #0
   24384:	beq	243b8 <__assert_fail@plt+0x12c44>
   24388:	mov	r7, r0
   2438c:	ldr	r1, [r4, #8]
   24390:	cmp	r1, #0
   24394:	beq	243a8 <__assert_fail@plt+0x12c34>
   24398:	ldr	r0, [r4]
   2439c:	mul	r2, r0, r6
   243a0:	mov	r0, r7
   243a4:	bl	1148c <memcpy@plt>
   243a8:	str	r5, [r4]
   243ac:	stmib	r4, {r5, r7}
   243b0:	mov	r0, #1
   243b4:	pop	{r4, r5, r6, r7, fp, pc}
   243b8:	mov	r0, #0
   243bc:	pop	{r4, r5, r6, r7, fp, pc}
   243c0:	sub	sp, sp, #8
   243c4:	push	{fp, lr}
   243c8:	mov	fp, sp
   243cc:	sub	sp, sp, #8
   243d0:	str	r2, [fp, #8]
   243d4:	str	r3, [fp, #12]
   243d8:	add	r2, fp, #8
   243dc:	str	r2, [sp, #4]
   243e0:	cmp	r1, #11
   243e4:	bhi	24424 <__assert_fail@plt+0x12cb0>
   243e8:	mov	r2, #1
   243ec:	movw	r3, #1300	; 0x514
   243f0:	tst	r3, r2, lsl r1
   243f4:	bne	24474 <__assert_fail@plt+0x12d00>
   243f8:	movw	r3, #2570	; 0xa0a
   243fc:	tst	r3, r2, lsl r1
   24400:	bne	2444c <__assert_fail@plt+0x12cd8>
   24404:	cmp	r1, #0
   24408:	bne	24424 <__assert_fail@plt+0x12cb0>
   2440c:	ldr	r1, [sp, #4]
   24410:	add	r2, r1, #4
   24414:	str	r2, [sp, #4]
   24418:	ldr	r1, [r1]
   2441c:	bl	24498 <__assert_fail@plt+0x12d24>
   24420:	b	24488 <__assert_fail@plt+0x12d14>
   24424:	sub	r2, r1, #1024	; 0x400
   24428:	cmp	r2, #10
   2442c:	bhi	24474 <__assert_fail@plt+0x12d00>
   24430:	mov	ip, #1
   24434:	movw	r3, #645	; 0x285
   24438:	tst	r3, ip, lsl r2
   2443c:	bne	24474 <__assert_fail@plt+0x12d00>
   24440:	movw	r3, #1282	; 0x502
   24444:	tst	r3, ip, lsl r2
   24448:	beq	24454 <__assert_fail@plt+0x12ce0>
   2444c:	bl	116d8 <fcntl64@plt>
   24450:	b	24488 <__assert_fail@plt+0x12d14>
   24454:	cmp	r2, #6
   24458:	bne	24474 <__assert_fail@plt+0x12d00>
   2445c:	ldr	r1, [sp, #4]
   24460:	add	r2, r1, #4
   24464:	str	r2, [sp, #4]
   24468:	ldr	r1, [r1]
   2446c:	bl	244a4 <__assert_fail@plt+0x12d30>
   24470:	b	24488 <__assert_fail@plt+0x12d14>
   24474:	ldr	r2, [sp, #4]
   24478:	add	r3, r2, #4
   2447c:	str	r3, [sp, #4]
   24480:	ldr	r2, [r2]
   24484:	bl	116d8 <fcntl64@plt>
   24488:	mov	sp, fp
   2448c:	pop	{fp, lr}
   24490:	add	sp, sp, #8
   24494:	bx	lr
   24498:	mov	r2, r1
   2449c:	mov	r1, #0
   244a0:	b	116d8 <fcntl64@plt>
   244a4:	push	{r4, r5, r6, r7, fp, lr}
   244a8:	add	fp, sp, #16
   244ac:	mov	r5, r1
   244b0:	mov	r6, r0
   244b4:	movw	r7, #25584	; 0x63f0
   244b8:	movt	r7, #3
   244bc:	ldr	r0, [r7]
   244c0:	cmp	r0, #0
   244c4:	bmi	24528 <__assert_fail@plt+0x12db4>
   244c8:	mov	r0, r6
   244cc:	movw	r1, #1030	; 0x406
   244d0:	mov	r2, r5
   244d4:	bl	116d8 <fcntl64@plt>
   244d8:	mov	r4, r0
   244dc:	cmn	r0, #1
   244e0:	bgt	24514 <__assert_fail@plt+0x12da0>
   244e4:	bl	1163c <__errno_location@plt>
   244e8:	ldr	r0, [r0]
   244ec:	cmp	r0, #22
   244f0:	bne	24514 <__assert_fail@plt+0x12da0>
   244f4:	mov	r0, r6
   244f8:	mov	r1, r5
   244fc:	bl	24498 <__assert_fail@plt+0x12d24>
   24500:	mov	r4, r0
   24504:	cmp	r0, #0
   24508:	bmi	24578 <__assert_fail@plt+0x12e04>
   2450c:	mvn	r0, #0
   24510:	b	24518 <__assert_fail@plt+0x12da4>
   24514:	mov	r0, #1
   24518:	str	r0, [r7]
   2451c:	cmp	r4, #0
   24520:	bpl	24540 <__assert_fail@plt+0x12dcc>
   24524:	b	24578 <__assert_fail@plt+0x12e04>
   24528:	mov	r0, r6
   2452c:	mov	r1, r5
   24530:	bl	24498 <__assert_fail@plt+0x12d24>
   24534:	mov	r4, r0
   24538:	cmp	r4, #0
   2453c:	bmi	24578 <__assert_fail@plt+0x12e04>
   24540:	ldr	r0, [r7]
   24544:	cmn	r0, #1
   24548:	bne	24578 <__assert_fail@plt+0x12e04>
   2454c:	mov	r0, r4
   24550:	mov	r1, #1
   24554:	bl	116d8 <fcntl64@plt>
   24558:	cmp	r0, #0
   2455c:	bmi	24580 <__assert_fail@plt+0x12e0c>
   24560:	orr	r2, r0, #1
   24564:	mov	r0, r4
   24568:	mov	r1, #2
   2456c:	bl	116d8 <fcntl64@plt>
   24570:	cmn	r0, #1
   24574:	beq	24580 <__assert_fail@plt+0x12e0c>
   24578:	mov	r0, r4
   2457c:	pop	{r4, r5, r6, r7, fp, pc}
   24580:	bl	1163c <__errno_location@plt>
   24584:	mov	r5, r0
   24588:	ldr	r6, [r0]
   2458c:	mov	r0, r4
   24590:	bl	1175c <close@plt>
   24594:	str	r6, [r5]
   24598:	mvn	r4, #0
   2459c:	mov	r0, r4
   245a0:	pop	{r4, r5, r6, r7, fp, pc}
   245a4:	push	{fp, lr}
   245a8:	mov	fp, sp
   245ac:	bl	1163c <__errno_location@plt>
   245b0:	mov	r1, #12
   245b4:	str	r1, [r0]
   245b8:	mov	r0, #0
   245bc:	pop	{fp, pc}
   245c0:	b	23ed0 <__assert_fail@plt+0x1275c>
   245c4:	cmp	r1, #0
   245c8:	orreq	r1, r1, #1
   245cc:	b	23f00 <__assert_fail@plt+0x1278c>
   245d0:	b	23e7c <__assert_fail@plt+0x12708>
   245d4:	clz	r3, r2
   245d8:	lsr	ip, r3, #5
   245dc:	clz	r3, r1
   245e0:	lsr	r3, r3, #5
   245e4:	orrs	r3, r3, ip
   245e8:	movwne	r1, #1
   245ec:	movwne	r2, #1
   245f0:	b	24690 <__assert_fail@plt+0x12f1c>
   245f4:	push	{fp, lr}
   245f8:	mov	fp, sp
   245fc:	mov	r0, #14
   24600:	bl	11714 <nl_langinfo@plt>
   24604:	movw	r1, #20523	; 0x502b
   24608:	movt	r1, #2
   2460c:	cmp	r0, #0
   24610:	movne	r1, r0
   24614:	ldrb	r2, [r1]
   24618:	movw	r0, #24012	; 0x5dcc
   2461c:	movt	r0, #2
   24620:	cmp	r2, #0
   24624:	movne	r0, r1
   24628:	pop	{fp, pc}
   2462c:	push	{r4, r5, r6, r7, fp, lr}
   24630:	add	fp, sp, #16
   24634:	sub	sp, sp, #8
   24638:	mov	r7, r2
   2463c:	mov	r4, r1
   24640:	add	r5, sp, #4
   24644:	cmp	r0, #0
   24648:	movne	r5, r0
   2464c:	mov	r0, r5
   24650:	bl	11594 <mbrtowc@plt>
   24654:	mov	r6, r0
   24658:	cmp	r7, #0
   2465c:	beq	24684 <__assert_fail@plt+0x12f10>
   24660:	cmn	r6, #2
   24664:	bcc	24684 <__assert_fail@plt+0x12f10>
   24668:	mov	r0, #0
   2466c:	bl	246cc <__assert_fail@plt+0x12f58>
   24670:	cmp	r0, #0
   24674:	bne	24684 <__assert_fail@plt+0x12f10>
   24678:	ldrb	r0, [r4]
   2467c:	str	r0, [r5]
   24680:	mov	r6, #1
   24684:	mov	r0, r6
   24688:	sub	sp, fp, #16
   2468c:	pop	{r4, r5, r6, r7, fp, pc}
   24690:	cmp	r2, #0
   24694:	beq	246c4 <__assert_fail@plt+0x12f50>
   24698:	mvn	r3, #0
   2469c:	udiv	r3, r3, r2
   246a0:	cmp	r3, r1
   246a4:	bcs	246c4 <__assert_fail@plt+0x12f50>
   246a8:	push	{fp, lr}
   246ac:	mov	fp, sp
   246b0:	bl	1163c <__errno_location@plt>
   246b4:	mov	r1, #12
   246b8:	str	r1, [r0]
   246bc:	mov	r0, #0
   246c0:	pop	{fp, pc}
   246c4:	mul	r1, r2, r1
   246c8:	b	23f00 <__assert_fail@plt+0x1278c>
   246cc:	push	{r4, sl, fp, lr}
   246d0:	add	fp, sp, #8
   246d4:	sub	sp, sp, #264	; 0x108
   246d8:	add	r1, sp, #7
   246dc:	movw	r2, #257	; 0x101
   246e0:	bl	24738 <__assert_fail@plt+0x12fc4>
   246e4:	mov	r4, #0
   246e8:	cmp	r0, #0
   246ec:	bne	2472c <__assert_fail@plt+0x12fb8>
   246f0:	add	r0, sp, #7
   246f4:	movw	r1, #24018	; 0x5dd2
   246f8:	movt	r1, #2
   246fc:	mov	r2, #2
   24700:	bl	11618 <bcmp@plt>
   24704:	cmp	r0, #0
   24708:	beq	2472c <__assert_fail@plt+0x12fb8>
   2470c:	add	r0, sp, #7
   24710:	movw	r1, #24020	; 0x5dd4
   24714:	movt	r1, #2
   24718:	mov	r2, #6
   2471c:	bl	11618 <bcmp@plt>
   24720:	mov	r4, r0
   24724:	cmp	r0, #0
   24728:	movwne	r4, #1
   2472c:	mov	r0, r4
   24730:	sub	sp, fp, #8
   24734:	pop	{r4, sl, fp, pc}
   24738:	b	2473c <__assert_fail@plt+0x12fc8>
   2473c:	push	{r4, r5, r6, r7, fp, lr}
   24740:	add	fp, sp, #16
   24744:	mov	r6, r2
   24748:	mov	r4, r1
   2474c:	bl	247d4 <__assert_fail@plt+0x13060>
   24750:	cmp	r0, #0
   24754:	beq	24784 <__assert_fail@plt+0x13010>
   24758:	mov	r7, r0
   2475c:	bl	11624 <strlen@plt>
   24760:	cmp	r0, r6
   24764:	bcs	247a0 <__assert_fail@plt+0x1302c>
   24768:	add	r2, r0, #1
   2476c:	mov	r0, r4
   24770:	mov	r1, r7
   24774:	bl	1148c <memcpy@plt>
   24778:	mov	r5, #0
   2477c:	mov	r0, r5
   24780:	pop	{r4, r5, r6, r7, fp, pc}
   24784:	mov	r5, #22
   24788:	cmp	r6, #0
   2478c:	beq	247c8 <__assert_fail@plt+0x13054>
   24790:	mov	r0, #0
   24794:	strb	r0, [r4]
   24798:	mov	r0, r5
   2479c:	pop	{r4, r5, r6, r7, fp, pc}
   247a0:	mov	r5, #34	; 0x22
   247a4:	cmp	r6, #0
   247a8:	beq	247c8 <__assert_fail@plt+0x13054>
   247ac:	sub	r6, r6, #1
   247b0:	mov	r0, r4
   247b4:	mov	r1, r7
   247b8:	mov	r2, r6
   247bc:	bl	1148c <memcpy@plt>
   247c0:	mov	r0, #0
   247c4:	strb	r0, [r4, r6]
   247c8:	mov	r0, r5
   247cc:	pop	{r4, r5, r6, r7, fp, pc}
   247d0:	b	247d4 <__assert_fail@plt+0x13060>
   247d4:	mov	r1, #0
   247d8:	b	116e4 <setlocale@plt>
   247dc:	cmp	r3, #0
   247e0:	cmpeq	r2, #0
   247e4:	bne	24808 <__assert_fail@plt+0x13094>
   247e8:	cmp	r1, #0
   247ec:	movlt	r1, #-2147483648	; 0x80000000
   247f0:	movlt	r0, #0
   247f4:	blt	24804 <__assert_fail@plt+0x13090>
   247f8:	cmpeq	r0, #0
   247fc:	mvnne	r1, #-2147483648	; 0x80000000
   24800:	mvnne	r0, #0
   24804:	b	248ec <__assert_fail@plt+0x13178>
   24808:	sub	sp, sp, #8
   2480c:	push	{sp, lr}
   24810:	cmp	r1, #0
   24814:	blt	24834 <__assert_fail@plt+0x130c0>
   24818:	cmp	r3, #0
   2481c:	blt	24868 <__assert_fail@plt+0x130f4>
   24820:	bl	248fc <__assert_fail@plt+0x13188>
   24824:	ldr	lr, [sp, #4]
   24828:	add	sp, sp, #8
   2482c:	pop	{r2, r3}
   24830:	bx	lr
   24834:	rsbs	r0, r0, #0
   24838:	sbc	r1, r1, r1, lsl #1
   2483c:	cmp	r3, #0
   24840:	blt	2488c <__assert_fail@plt+0x13118>
   24844:	bl	248fc <__assert_fail@plt+0x13188>
   24848:	ldr	lr, [sp, #4]
   2484c:	add	sp, sp, #8
   24850:	pop	{r2, r3}
   24854:	rsbs	r0, r0, #0
   24858:	sbc	r1, r1, r1, lsl #1
   2485c:	rsbs	r2, r2, #0
   24860:	sbc	r3, r3, r3, lsl #1
   24864:	bx	lr
   24868:	rsbs	r2, r2, #0
   2486c:	sbc	r3, r3, r3, lsl #1
   24870:	bl	248fc <__assert_fail@plt+0x13188>
   24874:	ldr	lr, [sp, #4]
   24878:	add	sp, sp, #8
   2487c:	pop	{r2, r3}
   24880:	rsbs	r0, r0, #0
   24884:	sbc	r1, r1, r1, lsl #1
   24888:	bx	lr
   2488c:	rsbs	r2, r2, #0
   24890:	sbc	r3, r3, r3, lsl #1
   24894:	bl	248fc <__assert_fail@plt+0x13188>
   24898:	ldr	lr, [sp, #4]
   2489c:	add	sp, sp, #8
   248a0:	pop	{r2, r3}
   248a4:	rsbs	r2, r2, #0
   248a8:	sbc	r3, r3, r3, lsl #1
   248ac:	bx	lr
   248b0:	cmp	r3, #0
   248b4:	cmpeq	r2, #0
   248b8:	bne	248d0 <__assert_fail@plt+0x1315c>
   248bc:	cmp	r1, #0
   248c0:	cmpeq	r0, #0
   248c4:	mvnne	r1, #0
   248c8:	mvnne	r0, #0
   248cc:	b	248ec <__assert_fail@plt+0x13178>
   248d0:	sub	sp, sp, #8
   248d4:	push	{sp, lr}
   248d8:	bl	248fc <__assert_fail@plt+0x13188>
   248dc:	ldr	lr, [sp, #4]
   248e0:	add	sp, sp, #8
   248e4:	pop	{r2, r3}
   248e8:	bx	lr
   248ec:	push	{r1, lr}
   248f0:	mov	r0, #8
   248f4:	bl	113fc <raise@plt>
   248f8:	pop	{r1, pc}
   248fc:	cmp	r1, r3
   24900:	cmpeq	r0, r2
   24904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24908:	mov	r4, r0
   2490c:	movcc	r0, #0
   24910:	mov	r5, r1
   24914:	ldr	lr, [sp, #36]	; 0x24
   24918:	movcc	r1, r0
   2491c:	bcc	24a18 <__assert_fail@plt+0x132a4>
   24920:	cmp	r3, #0
   24924:	clzeq	ip, r2
   24928:	clzne	ip, r3
   2492c:	addeq	ip, ip, #32
   24930:	cmp	r5, #0
   24934:	clzeq	r1, r4
   24938:	addeq	r1, r1, #32
   2493c:	clzne	r1, r5
   24940:	sub	ip, ip, r1
   24944:	sub	sl, ip, #32
   24948:	lsl	r9, r3, ip
   2494c:	rsb	fp, ip, #32
   24950:	orr	r9, r9, r2, lsl sl
   24954:	orr	r9, r9, r2, lsr fp
   24958:	lsl	r8, r2, ip
   2495c:	cmp	r5, r9
   24960:	cmpeq	r4, r8
   24964:	movcc	r0, #0
   24968:	movcc	r1, r0
   2496c:	bcc	24988 <__assert_fail@plt+0x13214>
   24970:	mov	r0, #1
   24974:	subs	r4, r4, r8
   24978:	lsl	r1, r0, sl
   2497c:	orr	r1, r1, r0, lsr fp
   24980:	lsl	r0, r0, ip
   24984:	sbc	r5, r5, r9
   24988:	cmp	ip, #0
   2498c:	beq	24a18 <__assert_fail@plt+0x132a4>
   24990:	lsr	r6, r8, #1
   24994:	orr	r6, r6, r9, lsl #31
   24998:	lsr	r7, r9, #1
   2499c:	mov	r2, ip
   249a0:	b	249c4 <__assert_fail@plt+0x13250>
   249a4:	subs	r3, r4, r6
   249a8:	sbc	r8, r5, r7
   249ac:	adds	r3, r3, r3
   249b0:	adc	r8, r8, r8
   249b4:	adds	r4, r3, #1
   249b8:	adc	r5, r8, #0
   249bc:	subs	r2, r2, #1
   249c0:	beq	249e0 <__assert_fail@plt+0x1326c>
   249c4:	cmp	r5, r7
   249c8:	cmpeq	r4, r6
   249cc:	bcs	249a4 <__assert_fail@plt+0x13230>
   249d0:	adds	r4, r4, r4
   249d4:	adc	r5, r5, r5
   249d8:	subs	r2, r2, #1
   249dc:	bne	249c4 <__assert_fail@plt+0x13250>
   249e0:	lsr	r3, r4, ip
   249e4:	orr	r3, r3, r5, lsl fp
   249e8:	lsr	r2, r5, ip
   249ec:	orr	r3, r3, r5, lsr sl
   249f0:	adds	r0, r0, r4
   249f4:	mov	r4, r3
   249f8:	lsl	r3, r2, ip
   249fc:	orr	r3, r3, r4, lsl sl
   24a00:	lsl	ip, r4, ip
   24a04:	orr	r3, r3, r4, lsr fp
   24a08:	adc	r1, r1, r5
   24a0c:	subs	r0, r0, ip
   24a10:	mov	r5, r2
   24a14:	sbc	r1, r1, r3
   24a18:	cmp	lr, #0
   24a1c:	strdne	r4, [lr]
   24a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24a28:	mov	r7, r0
   24a2c:	ldr	r6, [pc, #72]	; 24a7c <__assert_fail@plt+0x13308>
   24a30:	ldr	r5, [pc, #72]	; 24a80 <__assert_fail@plt+0x1330c>
   24a34:	add	r6, pc, r6
   24a38:	add	r5, pc, r5
   24a3c:	sub	r6, r6, r5
   24a40:	mov	r8, r1
   24a44:	mov	r9, r2
   24a48:	bl	113a0 <pthread_mutex_unlock@plt-0x20>
   24a4c:	asrs	r6, r6, #2
   24a50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24a54:	mov	r4, #0
   24a58:	add	r4, r4, #1
   24a5c:	ldr	r3, [r5], #4
   24a60:	mov	r2, r9
   24a64:	mov	r1, r8
   24a68:	mov	r0, r7
   24a6c:	blx	r3
   24a70:	cmp	r6, r4
   24a74:	bne	24a58 <__assert_fail@plt+0x132e4>
   24a78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24a7c:	ldrdeq	r1, [r1], -r0
   24a80:	andeq	r1, r1, r8, asr #9
   24a84:	bx	lr
   24a88:	ldr	r3, [pc, #12]	; 24a9c <__assert_fail@plt+0x13328>
   24a8c:	mov	r1, #0
   24a90:	add	r3, pc, r3
   24a94:	ldr	r2, [r3]
   24a98:	b	11660 <__cxa_atexit@plt>
   24a9c:			; <UNDEFINED> instruction: 0x000116bc

Disassembly of section .fini:

00024aa0 <.fini>:
   24aa0:	push	{r3, lr}
   24aa4:	pop	{r3, pc}
