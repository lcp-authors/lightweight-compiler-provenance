
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

0001100c <.init>:
   1100c:	push	{r3, lr}
   11010:	bl	113d4 <__assert_fail@plt+0x48>
   11014:	pop	{r3, pc}

Disassembly of section .plt:

00011018 <fstatfs64@plt-0x14>:
   11018:	push	{lr}		; (str lr, [sp, #-4]!)
   1101c:	ldr	lr, [pc, #4]	; 11028 <fstatfs64@plt-0x4>
   11020:	add	lr, pc, lr
   11024:	ldr	pc, [lr, #8]!
   11028:	ldrdeq	fp, [r1], -r8

0001102c <fstatfs64@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #110592	; 0x1b000
   11034:	ldr	pc, [ip, #4056]!	; 0xfd8

00011038 <calloc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #110592	; 0x1b000
   11040:	ldr	pc, [ip, #4048]!	; 0xfd0

00011044 <endgrent@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #110592	; 0x1b000
   1104c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011050 <fputs_unlocked@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #110592	; 0x1b000
   11058:	ldr	pc, [ip, #4032]!	; 0xfc0

0001105c <raise@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #110592	; 0x1b000
   11064:	ldr	pc, [ip, #4024]!	; 0xfb8

00011068 <getpwnam@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #110592	; 0x1b000
   11070:	ldr	pc, [ip, #4016]!	; 0xfb0

00011074 <strcmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #110592	; 0x1b000
   1107c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011080 <getpwuid@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #110592	; 0x1b000
   11088:	ldr	pc, [ip, #4000]!	; 0xfa0

0001108c <fflush@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #110592	; 0x1b000
   11094:	ldr	pc, [ip, #3992]!	; 0xf98

00011098 <memmove@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #110592	; 0x1b000
   110a0:	ldr	pc, [ip, #3984]!	; 0xf90

000110a4 <free@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #110592	; 0x1b000
   110ac:	ldr	pc, [ip, #3976]!	; 0xf88

000110b0 <__openat64_2@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #110592	; 0x1b000
   110b8:	ldr	pc, [ip, #3968]!	; 0xf80

000110bc <_exit@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #110592	; 0x1b000
   110c4:	ldr	pc, [ip, #3960]!	; 0xf78

000110c8 <memcpy@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #110592	; 0x1b000
   110d0:	ldr	pc, [ip, #3952]!	; 0xf70

000110d4 <mbsinit@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #110592	; 0x1b000
   110dc:	ldr	pc, [ip, #3944]!	; 0xf68

000110e0 <memcmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #110592	; 0x1b000
   110e8:	ldr	pc, [ip, #3936]!	; 0xf60

000110ec <stpcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #110592	; 0x1b000
   110f4:	ldr	pc, [ip, #3928]!	; 0xf58

000110f8 <fputc_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #110592	; 0x1b000
   11100:	ldr	pc, [ip, #3920]!	; 0xf50

00011104 <dcgettext@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #110592	; 0x1b000
   1110c:	ldr	pc, [ip, #3912]!	; 0xf48

00011110 <realloc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #110592	; 0x1b000
   11118:	ldr	pc, [ip, #3904]!	; 0xf40

0001111c <textdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #110592	; 0x1b000
   11124:	ldr	pc, [ip, #3896]!	; 0xf38

00011128 <__fxstatat64@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #110592	; 0x1b000
   11130:	ldr	pc, [ip, #3888]!	; 0xf30

00011134 <iswprint@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #110592	; 0x1b000
   1113c:	ldr	pc, [ip, #3880]!	; 0xf28

00011140 <__fxstat64@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #110592	; 0x1b000
   11148:	ldr	pc, [ip, #3872]!	; 0xf20

0001114c <fwrite@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #110592	; 0x1b000
   11154:	ldr	pc, [ip, #3864]!	; 0xf18

00011158 <lseek64@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #110592	; 0x1b000
   11160:	ldr	pc, [ip, #3856]!	; 0xf10

00011164 <__ctype_get_mb_cur_max@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #110592	; 0x1b000
   1116c:	ldr	pc, [ip, #3848]!	; 0xf08

00011170 <strcpy@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #110592	; 0x1b000
   11178:	ldr	pc, [ip, #3840]!	; 0xf00

0001117c <__fpending@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #110592	; 0x1b000
   11184:	ldr	pc, [ip, #3832]!	; 0xef8

00011188 <mbrtowc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #110592	; 0x1b000
   11190:	ldr	pc, [ip, #3824]!	; 0xef0

00011194 <error@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #110592	; 0x1b000
   1119c:	ldr	pc, [ip, #3816]!	; 0xee8

000111a0 <open64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #110592	; 0x1b000
   111a8:	ldr	pc, [ip, #3808]!	; 0xee0

000111ac <malloc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #110592	; 0x1b000
   111b4:	ldr	pc, [ip, #3800]!	; 0xed8

000111b8 <__libc_start_main@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #110592	; 0x1b000
   111c0:	ldr	pc, [ip, #3792]!	; 0xed0

000111c4 <__freading@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #110592	; 0x1b000
   111cc:	ldr	pc, [ip, #3784]!	; 0xec8

000111d0 <__gmon_start__@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #110592	; 0x1b000
   111d8:	ldr	pc, [ip, #3776]!	; 0xec0

000111dc <getopt_long@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #110592	; 0x1b000
   111e4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111e8 <__ctype_b_loc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #110592	; 0x1b000
   111f0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111f4 <exit@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #110592	; 0x1b000
   111fc:	ldr	pc, [ip, #3752]!	; 0xea8

00011200 <strtoul@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #110592	; 0x1b000
   11208:	ldr	pc, [ip, #3744]!	; 0xea0

0001120c <strlen@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #110592	; 0x1b000
   11214:	ldr	pc, [ip, #3736]!	; 0xe98

00011218 <strchr@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #110592	; 0x1b000
   11220:	ldr	pc, [ip, #3728]!	; 0xe90

00011224 <openat64@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #110592	; 0x1b000
   1122c:	ldr	pc, [ip, #3720]!	; 0xe88

00011230 <fchown@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #110592	; 0x1b000
   11238:	ldr	pc, [ip, #3712]!	; 0xe80

0001123c <__errno_location@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #110592	; 0x1b000
   11244:	ldr	pc, [ip, #3704]!	; 0xe78

00011248 <__cxa_atexit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #110592	; 0x1b000
   11250:	ldr	pc, [ip, #3696]!	; 0xe70

00011254 <memset@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #110592	; 0x1b000
   1125c:	ldr	pc, [ip, #3688]!	; 0xe68

00011260 <__printf_chk@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #110592	; 0x1b000
   11268:	ldr	pc, [ip, #3680]!	; 0xe60

0001126c <fileno@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #110592	; 0x1b000
   11274:	ldr	pc, [ip, #3672]!	; 0xe58

00011278 <__fprintf_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #110592	; 0x1b000
   11280:	ldr	pc, [ip, #3664]!	; 0xe50

00011284 <fclose@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #110592	; 0x1b000
   1128c:	ldr	pc, [ip, #3656]!	; 0xe48

00011290 <fseeko64@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #110592	; 0x1b000
   11298:	ldr	pc, [ip, #3648]!	; 0xe40

0001129c <fcntl64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #110592	; 0x1b000
   112a4:	ldr	pc, [ip, #3640]!	; 0xe38

000112a8 <setlocale@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #110592	; 0x1b000
   112b0:	ldr	pc, [ip, #3632]!	; 0xe30

000112b4 <endpwent@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #110592	; 0x1b000
   112bc:	ldr	pc, [ip, #3624]!	; 0xe28

000112c0 <strrchr@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #110592	; 0x1b000
   112c8:	ldr	pc, [ip, #3616]!	; 0xe20

000112cc <nl_langinfo@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #110592	; 0x1b000
   112d4:	ldr	pc, [ip, #3608]!	; 0xe18

000112d8 <readdir64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #110592	; 0x1b000
   112e0:	ldr	pc, [ip, #3600]!	; 0xe10

000112e4 <fdopendir@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #110592	; 0x1b000
   112ec:	ldr	pc, [ip, #3592]!	; 0xe08

000112f0 <dirfd@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #110592	; 0x1b000
   112f8:	ldr	pc, [ip, #3584]!	; 0xe00

000112fc <fchdir@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #110592	; 0x1b000
   11304:	ldr	pc, [ip, #3576]!	; 0xdf8

00011308 <qsort@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #110592	; 0x1b000
   11310:	ldr	pc, [ip, #3568]!	; 0xdf0

00011314 <fchownat@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #110592	; 0x1b000
   1131c:	ldr	pc, [ip, #3560]!	; 0xde8

00011320 <bindtextdomain@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #110592	; 0x1b000
   11328:	ldr	pc, [ip, #3552]!	; 0xde0

0001132c <__xstat64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #110592	; 0x1b000
   11334:	ldr	pc, [ip, #3544]!	; 0xdd8

00011338 <strncmp@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #110592	; 0x1b000
   11340:	ldr	pc, [ip, #3536]!	; 0xdd0

00011344 <abort@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #110592	; 0x1b000
   1134c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011350 <close@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #110592	; 0x1b000
   11358:	ldr	pc, [ip, #3520]!	; 0xdc0

0001135c <__lxstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #110592	; 0x1b000
   11364:	ldr	pc, [ip, #3512]!	; 0xdb8

00011368 <closedir@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #110592	; 0x1b000
   11370:	ldr	pc, [ip, #3504]!	; 0xdb0

00011374 <getgrgid@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #110592	; 0x1b000
   1137c:	ldr	pc, [ip, #3496]!	; 0xda8

00011380 <getgrnam@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #110592	; 0x1b000
   11388:	ldr	pc, [ip, #3488]!	; 0xda0

0001138c <__assert_fail@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #110592	; 0x1b000
   11394:	ldr	pc, [ip, #3480]!	; 0xd98

Disassembly of section .text:

00011398 <.text>:
   11398:	mov	fp, #0
   1139c:	mov	lr, #0
   113a0:	pop	{r1}		; (ldr r1, [sp], #4)
   113a4:	mov	r2, sp
   113a8:	push	{r2}		; (str r2, [sp, #-4]!)
   113ac:	push	{r0}		; (str r0, [sp, #-4]!)
   113b0:	ldr	ip, [pc, #16]	; 113c8 <__assert_fail@plt+0x3c>
   113b4:	push	{ip}		; (str ip, [sp, #-4]!)
   113b8:	ldr	r0, [pc, #12]	; 113cc <__assert_fail@plt+0x40>
   113bc:	ldr	r3, [pc, #12]	; 113d0 <__assert_fail@plt+0x44>
   113c0:	bl	111b8 <__libc_start_main@plt>
   113c4:	bl	11344 <abort@plt>
   113c8:	andeq	sl, r1, ip, lsr #16
   113cc:	andeq	r1, r1, r4, lsr #18
   113d0:	andeq	sl, r1, ip, asr #15
   113d4:	ldr	r3, [pc, #20]	; 113f0 <__assert_fail@plt+0x64>
   113d8:	ldr	r2, [pc, #20]	; 113f4 <__assert_fail@plt+0x68>
   113dc:	add	r3, pc, r3
   113e0:	ldr	r2, [r3, r2]
   113e4:	cmp	r2, #0
   113e8:	bxeq	lr
   113ec:	b	111d0 <__gmon_start__@plt>
   113f0:	andeq	fp, r1, ip, lsl ip
   113f4:	andeq	r0, r0, r0, lsr r1
   113f8:	ldr	r0, [pc, #24]	; 11418 <__assert_fail@plt+0x8c>
   113fc:	ldr	r3, [pc, #24]	; 1141c <__assert_fail@plt+0x90>
   11400:	cmp	r3, r0
   11404:	bxeq	lr
   11408:	ldr	r3, [pc, #16]	; 11420 <__assert_fail@plt+0x94>
   1140c:	cmp	r3, #0
   11410:	bxeq	lr
   11414:	bx	r3
   11418:	andeq	sp, r2, r4, lsl #3
   1141c:	andeq	sp, r2, r4, lsl #3
   11420:	andeq	r0, r0, r0
   11424:	ldr	r0, [pc, #36]	; 11450 <__assert_fail@plt+0xc4>
   11428:	ldr	r1, [pc, #36]	; 11454 <__assert_fail@plt+0xc8>
   1142c:	sub	r1, r1, r0
   11430:	asr	r1, r1, #2
   11434:	add	r1, r1, r1, lsr #31
   11438:	asrs	r1, r1, #1
   1143c:	bxeq	lr
   11440:	ldr	r3, [pc, #16]	; 11458 <__assert_fail@plt+0xcc>
   11444:	cmp	r3, #0
   11448:	bxeq	lr
   1144c:	bx	r3
   11450:	andeq	sp, r2, r4, lsl #3
   11454:	andeq	sp, r2, r4, lsl #3
   11458:	andeq	r0, r0, r0
   1145c:	push	{r4, lr}
   11460:	ldr	r4, [pc, #24]	; 11480 <__assert_fail@plt+0xf4>
   11464:	ldrb	r3, [r4]
   11468:	cmp	r3, #0
   1146c:	popne	{r4, pc}
   11470:	bl	113f8 <__assert_fail@plt+0x6c>
   11474:	mov	r3, #1
   11478:	strb	r3, [r4]
   1147c:	pop	{r4, pc}
   11480:	andeq	sp, r2, r4, lsr #3
   11484:	b	11424 <__assert_fail@plt+0x98>
   11488:	push	{lr}		; (str lr, [sp, #-4]!)
   1148c:	sub	sp, sp, #68	; 0x44
   11490:	subs	r5, r0, #0
   11494:	beq	114dc <__assert_fail@plt+0x150>
   11498:	movw	r3, #53656	; 0xd198
   1149c:	movt	r3, #2
   114a0:	ldr	r4, [r3]
   114a4:	mov	r2, #5
   114a8:	movw	r1, #43380	; 0xa974
   114ac:	movt	r1, #1
   114b0:	mov	r0, #0
   114b4:	bl	11104 <dcgettext@plt>
   114b8:	movw	r3, #53704	; 0xd1c8
   114bc:	movt	r3, #2
   114c0:	ldr	r3, [r3]
   114c4:	mov	r2, r0
   114c8:	mov	r1, #1
   114cc:	mov	r0, r4
   114d0:	bl	11278 <__fprintf_chk@plt>
   114d4:	mov	r0, r5
   114d8:	bl	111f4 <exit@plt>
   114dc:	mov	r2, #5
   114e0:	movw	r1, #43420	; 0xa99c
   114e4:	movt	r1, #1
   114e8:	mov	r0, #0
   114ec:	bl	11104 <dcgettext@plt>
   114f0:	movw	r6, #53704	; 0xd1c8
   114f4:	movt	r6, #2
   114f8:	ldr	r3, [r6]
   114fc:	mov	r2, r3
   11500:	mov	r1, r0
   11504:	mov	r0, #1
   11508:	bl	11260 <__printf_chk@plt>
   1150c:	mov	r2, #5
   11510:	movw	r1, #43520	; 0xaa00
   11514:	movt	r1, #1
   11518:	mov	r0, #0
   1151c:	bl	11104 <dcgettext@plt>
   11520:	movw	r4, #53660	; 0xd19c
   11524:	movt	r4, #2
   11528:	ldr	r1, [r4]
   1152c:	bl	11050 <fputs_unlocked@plt>
   11530:	mov	r2, #5
   11534:	movw	r1, #43668	; 0xaa94
   11538:	movt	r1, #1
   1153c:	mov	r0, #0
   11540:	bl	11104 <dcgettext@plt>
   11544:	ldr	r1, [r4]
   11548:	bl	11050 <fputs_unlocked@plt>
   1154c:	mov	r2, #5
   11550:	movw	r1, #43872	; 0xab60
   11554:	movt	r1, #1
   11558:	mov	r0, #0
   1155c:	bl	11104 <dcgettext@plt>
   11560:	ldr	r1, [r4]
   11564:	bl	11050 <fputs_unlocked@plt>
   11568:	mov	r2, #5
   1156c:	movw	r1, #44104	; 0xac48
   11570:	movt	r1, #1
   11574:	mov	r0, #0
   11578:	bl	11104 <dcgettext@plt>
   1157c:	ldr	r1, [r4]
   11580:	bl	11050 <fputs_unlocked@plt>
   11584:	mov	r2, #5
   11588:	movw	r1, #44224	; 0xacc0
   1158c:	movt	r1, #1
   11590:	mov	r0, #0
   11594:	bl	11104 <dcgettext@plt>
   11598:	ldr	r1, [r4]
   1159c:	bl	11050 <fputs_unlocked@plt>
   115a0:	mov	r2, #5
   115a4:	movw	r1, #44564	; 0xae14
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	bl	11104 <dcgettext@plt>
   115b4:	ldr	r1, [r4]
   115b8:	bl	11050 <fputs_unlocked@plt>
   115bc:	mov	r2, #5
   115c0:	movw	r1, #44692	; 0xae94
   115c4:	movt	r1, #1
   115c8:	mov	r0, #0
   115cc:	bl	11104 <dcgettext@plt>
   115d0:	ldr	r1, [r4]
   115d4:	bl	11050 <fputs_unlocked@plt>
   115d8:	mov	r2, #5
   115dc:	movw	r1, #44816	; 0xaf10
   115e0:	movt	r1, #1
   115e4:	mov	r0, #0
   115e8:	bl	11104 <dcgettext@plt>
   115ec:	ldr	r1, [r4]
   115f0:	bl	11050 <fputs_unlocked@plt>
   115f4:	mov	r2, #5
   115f8:	movw	r1, #44888	; 0xaf58
   115fc:	movt	r1, #1
   11600:	mov	r0, #0
   11604:	bl	11104 <dcgettext@plt>
   11608:	ldr	r1, [r4]
   1160c:	bl	11050 <fputs_unlocked@plt>
   11610:	mov	r2, #5
   11614:	movw	r1, #45356	; 0xb12c
   11618:	movt	r1, #1
   1161c:	mov	r0, #0
   11620:	bl	11104 <dcgettext@plt>
   11624:	ldr	r1, [r4]
   11628:	bl	11050 <fputs_unlocked@plt>
   1162c:	mov	r2, #5
   11630:	movw	r1, #45404	; 0xb15c
   11634:	movt	r1, #1
   11638:	mov	r0, #0
   1163c:	bl	11104 <dcgettext@plt>
   11640:	ldr	r1, [r4]
   11644:	bl	11050 <fputs_unlocked@plt>
   11648:	mov	r2, #5
   1164c:	movw	r1, #45460	; 0xb194
   11650:	movt	r1, #1
   11654:	mov	r0, #0
   11658:	bl	11104 <dcgettext@plt>
   1165c:	ldr	r1, [r4]
   11660:	bl	11050 <fputs_unlocked@plt>
   11664:	mov	r2, #5
   11668:	movw	r1, #45652	; 0xb254
   1166c:	movt	r1, #1
   11670:	mov	r0, #0
   11674:	bl	11104 <dcgettext@plt>
   11678:	ldr	r2, [r6]
   1167c:	str	r2, [sp]
   11680:	mov	r3, r2
   11684:	mov	r1, r0
   11688:	mov	r0, #1
   1168c:	bl	11260 <__printf_chk@plt>
   11690:	movw	r0, #43092	; 0xa854
   11694:	movt	r0, #1
   11698:	ldr	r1, [r0]
   1169c:	ldr	r3, [r0, #4]
   116a0:	str	r1, [sp, #8]
   116a4:	str	r3, [sp, #12]
   116a8:	ldrd	r2, [r0, #8]
   116ac:	strd	r2, [sp, #16]
   116b0:	ldrd	r2, [r0, #16]
   116b4:	strd	r2, [sp, #24]
   116b8:	ldrd	r2, [r0, #24]
   116bc:	strd	r2, [sp, #32]
   116c0:	ldrd	r2, [r0, #32]
   116c4:	strd	r2, [sp, #40]	; 0x28
   116c8:	ldrd	r2, [r0, #40]	; 0x28
   116cc:	strd	r2, [sp, #48]	; 0x30
   116d0:	ldrd	r2, [r0, #48]	; 0x30
   116d4:	strd	r2, [sp, #56]	; 0x38
   116d8:	cmp	r1, #0
   116dc:	addeq	r4, sp, #8
   116e0:	beq	1170c <__assert_fail@plt+0x380>
   116e4:	add	r4, sp, #8
   116e8:	movw	r6, #43372	; 0xa96c
   116ec:	movt	r6, #1
   116f0:	mov	r0, r6
   116f4:	bl	11074 <strcmp@plt>
   116f8:	cmp	r0, #0
   116fc:	beq	1170c <__assert_fail@plt+0x380>
   11700:	ldr	r1, [r4, #8]!
   11704:	cmp	r1, #0
   11708:	bne	116f0 <__assert_fail@plt+0x364>
   1170c:	ldr	r4, [r4, #4]
   11710:	cmp	r4, #0
   11714:	beq	11870 <__assert_fail@plt+0x4e4>
   11718:	mov	r2, #5
   1171c:	movw	r1, #45856	; 0xb320
   11720:	movt	r1, #1
   11724:	mov	r0, #0
   11728:	bl	11104 <dcgettext@plt>
   1172c:	movw	r3, #45880	; 0xb338
   11730:	movt	r3, #1
   11734:	movw	r2, #45920	; 0xb360
   11738:	movt	r2, #1
   1173c:	mov	r1, r0
   11740:	mov	r0, #1
   11744:	bl	11260 <__printf_chk@plt>
   11748:	mov	r1, #0
   1174c:	mov	r0, #5
   11750:	bl	112a8 <setlocale@plt>
   11754:	cmp	r0, #0
   11758:	beq	11774 <__assert_fail@plt+0x3e8>
   1175c:	mov	r2, #3
   11760:	movw	r1, #45936	; 0xb370
   11764:	movt	r1, #1
   11768:	bl	11338 <strncmp@plt>
   1176c:	cmp	r0, #0
   11770:	bne	117f0 <__assert_fail@plt+0x464>
   11774:	mov	r2, #5
   11778:	movw	r1, #46012	; 0xb3bc
   1177c:	movt	r1, #1
   11780:	mov	r0, #0
   11784:	bl	11104 <dcgettext@plt>
   11788:	movw	r6, #43372	; 0xa96c
   1178c:	movt	r6, #1
   11790:	mov	r3, r6
   11794:	movw	r2, #45880	; 0xb338
   11798:	movt	r2, #1
   1179c:	mov	r1, r0
   117a0:	mov	r0, #1
   117a4:	bl	11260 <__printf_chk@plt>
   117a8:	mov	r2, #5
   117ac:	movw	r1, #46040	; 0xb3d8
   117b0:	movt	r1, #1
   117b4:	mov	r0, #0
   117b8:	bl	11104 <dcgettext@plt>
   117bc:	mov	r1, r0
   117c0:	movw	r2, #46300	; 0xb4dc
   117c4:	movt	r2, #1
   117c8:	movw	r3, #45352	; 0xb128
   117cc:	movt	r3, #1
   117d0:	cmp	r4, r6
   117d4:	moveq	r3, r2
   117d8:	mov	r2, r4
   117dc:	mov	r0, #1
   117e0:	bl	11260 <__printf_chk@plt>
   117e4:	b	114d4 <__assert_fail@plt+0x148>
   117e8:	movw	r4, #43372	; 0xa96c
   117ec:	movt	r4, #1
   117f0:	mov	r2, #5
   117f4:	movw	r1, #45940	; 0xb374
   117f8:	movt	r1, #1
   117fc:	mov	r0, #0
   11800:	bl	11104 <dcgettext@plt>
   11804:	movw	r3, #53660	; 0xd19c
   11808:	movt	r3, #2
   1180c:	ldr	r1, [r3]
   11810:	bl	11050 <fputs_unlocked@plt>
   11814:	b	11774 <__assert_fail@plt+0x3e8>
   11818:	mov	r2, #5
   1181c:	movw	r1, #46012	; 0xb3bc
   11820:	movt	r1, #1
   11824:	mov	r0, #0
   11828:	bl	11104 <dcgettext@plt>
   1182c:	movw	r4, #43372	; 0xa96c
   11830:	movt	r4, #1
   11834:	mov	r3, r4
   11838:	movw	r2, #45880	; 0xb338
   1183c:	movt	r2, #1
   11840:	mov	r1, r0
   11844:	mov	r0, #1
   11848:	bl	11260 <__printf_chk@plt>
   1184c:	mov	r2, #5
   11850:	movw	r1, #46040	; 0xb3d8
   11854:	movt	r1, #1
   11858:	mov	r0, #0
   1185c:	bl	11104 <dcgettext@plt>
   11860:	mov	r1, r0
   11864:	movw	r3, #46300	; 0xb4dc
   11868:	movt	r3, #1
   1186c:	b	117d8 <__assert_fail@plt+0x44c>
   11870:	mov	r2, #5
   11874:	movw	r1, #45856	; 0xb320
   11878:	movt	r1, #1
   1187c:	mov	r0, #0
   11880:	bl	11104 <dcgettext@plt>
   11884:	movw	r3, #45880	; 0xb338
   11888:	movt	r3, #1
   1188c:	movw	r2, #45920	; 0xb360
   11890:	movt	r2, #1
   11894:	mov	r1, r0
   11898:	mov	r0, #1
   1189c:	bl	11260 <__printf_chk@plt>
   118a0:	mov	r1, #0
   118a4:	mov	r0, #5
   118a8:	bl	112a8 <setlocale@plt>
   118ac:	cmp	r0, #0
   118b0:	beq	11818 <__assert_fail@plt+0x48c>
   118b4:	mov	r2, #3
   118b8:	movw	r1, #45936	; 0xb370
   118bc:	movt	r1, #1
   118c0:	bl	11338 <strncmp@plt>
   118c4:	cmp	r0, #0
   118c8:	bne	117e8 <__assert_fail@plt+0x45c>
   118cc:	mov	r2, #5
   118d0:	movw	r1, #46012	; 0xb3bc
   118d4:	movt	r1, #1
   118d8:	mov	r0, #0
   118dc:	bl	11104 <dcgettext@plt>
   118e0:	movw	r4, #43372	; 0xa96c
   118e4:	movt	r4, #1
   118e8:	mov	r3, r4
   118ec:	movw	r2, #45880	; 0xb338
   118f0:	movt	r2, #1
   118f4:	mov	r1, r0
   118f8:	mov	r0, #1
   118fc:	bl	11260 <__printf_chk@plt>
   11900:	mov	r2, #5
   11904:	movw	r1, #46040	; 0xb3d8
   11908:	movt	r1, #1
   1190c:	mov	r0, #0
   11910:	bl	11104 <dcgettext@plt>
   11914:	mov	r1, r0
   11918:	movw	r3, #46300	; 0xb4dc
   1191c:	movt	r3, #1
   11920:	b	117d8 <__assert_fail@plt+0x44c>
   11924:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11928:	strd	r6, [sp, #8]
   1192c:	strd	r8, [sp, #16]
   11930:	strd	sl, [sp, #24]
   11934:	str	lr, [sp, #32]
   11938:	sub	sp, sp, #172	; 0xac
   1193c:	mov	r7, r0
   11940:	mov	r6, r1
   11944:	mvn	r4, #0
   11948:	str	r4, [sp, #164]	; 0xa4
   1194c:	str	r4, [sp, #160]	; 0xa0
   11950:	str	r4, [sp, #156]	; 0x9c
   11954:	str	r4, [sp, #152]	; 0x98
   11958:	ldr	r0, [r1]
   1195c:	bl	164b8 <__assert_fail@plt+0x512c>
   11960:	movw	r1, #45352	; 0xb128
   11964:	movt	r1, #1
   11968:	mov	r0, #6
   1196c:	bl	112a8 <setlocale@plt>
   11970:	movw	r5, #45924	; 0xb364
   11974:	movt	r5, #1
   11978:	movw	r1, #46092	; 0xb40c
   1197c:	movt	r1, #1
   11980:	mov	r0, r5
   11984:	bl	11320 <bindtextdomain@plt>
   11988:	mov	r0, r5
   1198c:	bl	1111c <textdomain@plt>
   11990:	movw	r0, #11436	; 0x2cac
   11994:	movt	r0, #1
   11998:	bl	1a830 <__assert_fail@plt+0x94a4>
   1199c:	add	r0, sp, #128	; 0x80
   119a0:	bl	11efc <__assert_fail@plt+0xb70>
   119a4:	mov	r8, #16
   119a8:	mov	sl, #0
   119ac:	ldr	r9, [pc, #1180]	; 11e50 <__assert_fail@plt+0xac4>
   119b0:	movw	r5, #46156	; 0xb44c
   119b4:	movt	r5, #1
   119b8:	movw	fp, #53664	; 0xd1a0
   119bc:	movt	fp, #2
   119c0:	b	11b28 <__assert_fail@plt+0x79c>
   119c4:	cmp	r0, #82	; 0x52
   119c8:	beq	11a90 <__assert_fail@plt+0x704>
   119cc:	cmp	r0, #99	; 0x63
   119d0:	beq	11a9c <__assert_fail@plt+0x710>
   119d4:	cmp	r0, #80	; 0x50
   119d8:	bne	11b7c <__assert_fail@plt+0x7f0>
   119dc:	mov	r8, #16
   119e0:	b	11b28 <__assert_fail@plt+0x79c>
   119e4:	movw	r3, #257	; 0x101
   119e8:	cmp	r0, r3
   119ec:	beq	11a40 <__assert_fail@plt+0x6b4>
   119f0:	bgt	11a14 <__assert_fail@plt+0x688>
   119f4:	cmp	r0, #118	; 0x76
   119f8:	beq	11ab4 <__assert_fail@plt+0x728>
   119fc:	cmp	r0, #256	; 0x100
   11a00:	beq	11b84 <__assert_fail@plt+0x7f8>
   11a04:	cmp	r0, #104	; 0x68
   11a08:	bne	11b7c <__assert_fail@plt+0x7f0>
   11a0c:	mov	r4, #0
   11a10:	b	11b28 <__assert_fail@plt+0x79c>
   11a14:	movw	r3, #259	; 0x103
   11a18:	cmp	r0, r3
   11a1c:	beq	11b8c <__assert_fail@plt+0x800>
   11a20:	blt	11b94 <__assert_fail@plt+0x808>
   11a24:	cmp	r0, #260	; 0x104
   11a28:	bne	11b7c <__assert_fail@plt+0x7f0>
   11a2c:	movw	r3, #53672	; 0xd1a8
   11a30:	movt	r3, #2
   11a34:	ldr	r2, [fp]
   11a38:	str	r2, [r3]
   11a3c:	b	11b28 <__assert_fail@plt+0x79c>
   11a40:	mov	r3, #0
   11a44:	str	r3, [sp]
   11a48:	add	r2, sp, #152	; 0x98
   11a4c:	add	r1, sp, #156	; 0x9c
   11a50:	ldr	r0, [fp]
   11a54:	bl	18b84 <__assert_fail@plt+0x77f8>
   11a58:	subs	r3, r0, #0
   11a5c:	str	r3, [sp, #20]
   11a60:	beq	11b28 <__assert_fail@plt+0x79c>
   11a64:	movw	r3, #53664	; 0xd1a0
   11a68:	movt	r3, #2
   11a6c:	ldr	r0, [r3]
   11a70:	bl	187b4 <__assert_fail@plt+0x7428>
   11a74:	str	r0, [sp]
   11a78:	ldr	r3, [sp, #20]
   11a7c:	movw	r2, #46116	; 0xb424
   11a80:	movt	r2, #1
   11a84:	mov	r1, #0
   11a88:	mov	r0, #1
   11a8c:	bl	11194 <error@plt>
   11a90:	mov	r3, #1
   11a94:	strb	r3, [sp, #132]	; 0x84
   11a98:	b	11b28 <__assert_fail@plt+0x79c>
   11a9c:	mov	r3, #1
   11aa0:	str	r3, [sp, #128]	; 0x80
   11aa4:	b	11b28 <__assert_fail@plt+0x79c>
   11aa8:	mov	r3, #1
   11aac:	strb	r3, [sp, #141]	; 0x8d
   11ab0:	b	11b28 <__assert_fail@plt+0x79c>
   11ab4:	mov	r3, #0
   11ab8:	str	r3, [sp, #128]	; 0x80
   11abc:	b	11b28 <__assert_fail@plt+0x79c>
   11ac0:	mov	r0, #0
   11ac4:	bl	11488 <__assert_fail@plt+0xfc>
   11ac8:	movw	r3, #53564	; 0xd13c
   11acc:	movt	r3, #2
   11ad0:	movw	r0, #53660	; 0xd19c
   11ad4:	movt	r0, #2
   11ad8:	mov	r4, #0
   11adc:	str	r4, [sp, #8]
   11ae0:	movw	r2, #46124	; 0xb42c
   11ae4:	movt	r2, #1
   11ae8:	str	r2, [sp, #4]
   11aec:	movw	r2, #46140	; 0xb43c
   11af0:	movt	r2, #1
   11af4:	str	r2, [sp]
   11af8:	ldr	r3, [r3]
   11afc:	movw	r2, #45920	; 0xb360
   11b00:	movt	r2, #1
   11b04:	movw	r1, #43372	; 0xa96c
   11b08:	movt	r1, #1
   11b0c:	ldr	r0, [r0]
   11b10:	bl	19148 <__assert_fail@plt+0x7dbc>
   11b14:	mov	r0, r4
   11b18:	bl	111f4 <exit@plt>
   11b1c:	mov	r8, #2
   11b20:	b	11b28 <__assert_fail@plt+0x79c>
   11b24:	mov	r8, #17
   11b28:	mov	r3, #0
   11b2c:	str	r3, [sp]
   11b30:	mov	r3, r9
   11b34:	mov	r2, r5
   11b38:	mov	r1, r6
   11b3c:	mov	r0, r7
   11b40:	bl	111dc <getopt_long@plt>
   11b44:	cmn	r0, #1
   11b48:	beq	11b9c <__assert_fail@plt+0x810>
   11b4c:	cmp	r0, #102	; 0x66
   11b50:	beq	11aa8 <__assert_fail@plt+0x71c>
   11b54:	bgt	119e4 <__assert_fail@plt+0x658>
   11b58:	cmp	r0, #76	; 0x4c
   11b5c:	beq	11b1c <__assert_fail@plt+0x790>
   11b60:	bgt	119c4 <__assert_fail@plt+0x638>
   11b64:	cmn	r0, #2
   11b68:	beq	11ac0 <__assert_fail@plt+0x734>
   11b6c:	cmp	r0, #72	; 0x48
   11b70:	beq	11b24 <__assert_fail@plt+0x798>
   11b74:	cmn	r0, #3
   11b78:	beq	11ac8 <__assert_fail@plt+0x73c>
   11b7c:	mov	r0, #1
   11b80:	bl	11488 <__assert_fail@plt+0xfc>
   11b84:	mov	r4, #1
   11b88:	b	11b28 <__assert_fail@plt+0x79c>
   11b8c:	mov	sl, #1
   11b90:	b	11b28 <__assert_fail@plt+0x79c>
   11b94:	mov	sl, #0
   11b98:	b	11b28 <__assert_fail@plt+0x79c>
   11b9c:	ldrb	r3, [sp, #132]	; 0x84
   11ba0:	cmp	r3, #0
   11ba4:	beq	11be0 <__assert_fail@plt+0x854>
   11ba8:	cmp	r8, #16
   11bac:	bne	11be4 <__assert_fail@plt+0x858>
   11bb0:	cmp	r4, #1
   11bb4:	movne	r4, #0
   11bb8:	bne	11be4 <__assert_fail@plt+0x858>
   11bbc:	mov	r2, #5
   11bc0:	movw	r1, #46168	; 0xb458
   11bc4:	movt	r1, #1
   11bc8:	mov	r0, #0
   11bcc:	bl	11104 <dcgettext@plt>
   11bd0:	mov	r2, r0
   11bd4:	mov	r1, #0
   11bd8:	mov	r0, #1
   11bdc:	bl	11194 <error@plt>
   11be0:	mov	r8, #16
   11be4:	adds	r4, r4, #0
   11be8:	movne	r4, #1
   11bec:	strb	r4, [sp, #140]	; 0x8c
   11bf0:	movw	r3, #53648	; 0xd190
   11bf4:	movt	r3, #2
   11bf8:	ldr	r0, [r3]
   11bfc:	sub	r2, r7, r0
   11c00:	movw	r3, #53672	; 0xd1a8
   11c04:	movt	r3, #2
   11c08:	ldr	r4, [r3]
   11c0c:	cmp	r4, #0
   11c10:	beq	11e00 <__assert_fail@plt+0xa74>
   11c14:	cmp	r2, #0
   11c18:	ble	11ca8 <__assert_fail@plt+0x91c>
   11c1c:	add	r2, sp, #24
   11c20:	mov	r1, r4
   11c24:	mov	r0, #3
   11c28:	bl	1132c <__xstat64@plt>
   11c2c:	cmp	r0, #0
   11c30:	bne	11d18 <__assert_fail@plt+0x98c>
   11c34:	ldr	r0, [sp, #48]	; 0x30
   11c38:	str	r0, [sp, #164]	; 0xa4
   11c3c:	ldr	r3, [sp, #52]	; 0x34
   11c40:	str	r3, [sp, #160]	; 0xa0
   11c44:	bl	11f98 <__assert_fail@plt+0xc0c>
   11c48:	str	r0, [sp, #144]	; 0x90
   11c4c:	ldr	r0, [sp, #52]	; 0x34
   11c50:	bl	11f50 <__assert_fail@plt+0xbc4>
   11c54:	str	r0, [sp, #148]	; 0x94
   11c58:	ldrb	r3, [sp, #132]	; 0x84
   11c5c:	tst	sl, r3
   11c60:	bne	11da8 <__assert_fail@plt+0xa1c>
   11c64:	movw	r3, #53648	; 0xd190
   11c68:	movt	r3, #2
   11c6c:	ldr	r0, [r3]
   11c70:	add	r3, sp, #128	; 0x80
   11c74:	str	r3, [sp, #8]
   11c78:	ldr	r3, [sp, #152]	; 0x98
   11c7c:	str	r3, [sp, #4]
   11c80:	ldr	r3, [sp, #156]	; 0x9c
   11c84:	str	r3, [sp]
   11c88:	ldr	r3, [sp, #160]	; 0xa0
   11c8c:	ldr	r2, [sp, #164]	; 0xa4
   11c90:	orr	r1, r8, #1024	; 0x400
   11c94:	add	r0, r6, r0, lsl #2
   11c98:	bl	11fe0 <__assert_fail@plt+0xc54>
   11c9c:	eor	r0, r0, #1
   11ca0:	uxtb	r0, r0
   11ca4:	bl	111f4 <exit@plt>
   11ca8:	cmp	r0, r7
   11cac:	blt	11cdc <__assert_fail@plt+0x950>
   11cb0:	mov	r2, #5
   11cb4:	movw	r1, #46212	; 0xb484
   11cb8:	movt	r1, #1
   11cbc:	mov	r0, #0
   11cc0:	bl	11104 <dcgettext@plt>
   11cc4:	mov	r2, r0
   11cc8:	mov	r1, #0
   11ccc:	mov	r0, r1
   11cd0:	bl	11194 <error@plt>
   11cd4:	mov	r0, #1
   11cd8:	bl	11488 <__assert_fail@plt+0xfc>
   11cdc:	mov	r2, #5
   11ce0:	movw	r1, #46228	; 0xb494
   11ce4:	movt	r1, #1
   11ce8:	mov	r0, #0
   11cec:	bl	11104 <dcgettext@plt>
   11cf0:	mov	r4, r0
   11cf4:	sub	r7, r7, #-1073741823	; 0xc0000001
   11cf8:	ldr	r0, [r6, r7, lsl #2]
   11cfc:	bl	187b4 <__assert_fail@plt+0x7428>
   11d00:	mov	r3, r0
   11d04:	mov	r2, r4
   11d08:	mov	r1, #0
   11d0c:	mov	r0, r1
   11d10:	bl	11194 <error@plt>
   11d14:	b	11cd4 <__assert_fail@plt+0x948>
   11d18:	bl	1123c <__errno_location@plt>
   11d1c:	ldr	r5, [r0]
   11d20:	mov	r2, #5
   11d24:	movw	r1, #46256	; 0xb4b0
   11d28:	movt	r1, #1
   11d2c:	mov	r0, #0
   11d30:	bl	11104 <dcgettext@plt>
   11d34:	mov	r6, r0
   11d38:	mov	r1, r4
   11d3c:	mov	r0, #4
   11d40:	bl	184c4 <__assert_fail@plt+0x7138>
   11d44:	mov	r3, r0
   11d48:	mov	r2, r6
   11d4c:	mov	r1, r5
   11d50:	mov	r0, #1
   11d54:	bl	11194 <error@plt>
   11d58:	movw	r3, #53648	; 0xd190
   11d5c:	movt	r3, #2
   11d60:	ldr	r3, [r3]
   11d64:	ldr	r0, [r6, r3, lsl #2]
   11d68:	bl	187b4 <__assert_fail@plt+0x7428>
   11d6c:	str	r0, [sp]
   11d70:	mov	r3, r4
   11d74:	movw	r2, #46116	; 0xb424
   11d78:	movt	r2, #1
   11d7c:	mov	r1, #0
   11d80:	mov	r0, #1
   11d84:	bl	11194 <error@plt>
   11d88:	ldr	r3, [sp, #148]	; 0x94
   11d8c:	cmp	r3, #0
   11d90:	beq	11e38 <__assert_fail@plt+0xaac>
   11d94:	movw	r0, #45352	; 0xb128
   11d98:	movt	r0, #1
   11d9c:	bl	1968c <__assert_fail@plt+0x8300>
   11da0:	str	r0, [sp, #144]	; 0x90
   11da4:	b	11e38 <__assert_fail@plt+0xaac>
   11da8:	ldr	r0, [pc, #164]	; 11e54 <__assert_fail@plt+0xac8>
   11dac:	bl	187d4 <__assert_fail@plt+0x7448>
   11db0:	str	r0, [sp, #136]	; 0x88
   11db4:	cmp	r0, #0
   11db8:	bne	11c64 <__assert_fail@plt+0x8d8>
   11dbc:	bl	1123c <__errno_location@plt>
   11dc0:	ldr	r4, [r0]
   11dc4:	mov	r2, #5
   11dc8:	movw	r1, #46256	; 0xb4b0
   11dcc:	movt	r1, #1
   11dd0:	mov	r0, #0
   11dd4:	bl	11104 <dcgettext@plt>
   11dd8:	mov	r5, r0
   11ddc:	movw	r1, #46288	; 0xb4d0
   11de0:	movt	r1, #1
   11de4:	mov	r0, #4
   11de8:	bl	184c4 <__assert_fail@plt+0x7138>
   11dec:	mov	r3, r0
   11df0:	mov	r2, r5
   11df4:	mov	r1, r4
   11df8:	mov	r0, #1
   11dfc:	bl	11194 <error@plt>
   11e00:	cmp	r2, #1
   11e04:	ble	11ca8 <__assert_fail@plt+0x91c>
   11e08:	add	r3, sp, #148	; 0x94
   11e0c:	str	r3, [sp]
   11e10:	add	r3, sp, #144	; 0x90
   11e14:	add	r2, sp, #160	; 0xa0
   11e18:	add	r1, sp, #164	; 0xa4
   11e1c:	ldr	r0, [r6, r0, lsl #2]
   11e20:	bl	18b84 <__assert_fail@plt+0x77f8>
   11e24:	subs	r4, r0, #0
   11e28:	bne	11d58 <__assert_fail@plt+0x9cc>
   11e2c:	ldr	r3, [sp, #144]	; 0x90
   11e30:	cmp	r3, #0
   11e34:	beq	11d88 <__assert_fail@plt+0x9fc>
   11e38:	movw	r3, #53648	; 0xd190
   11e3c:	movt	r3, #2
   11e40:	ldr	r2, [r3]
   11e44:	add	r2, r2, #1
   11e48:	str	r2, [r3]
   11e4c:	b	11c58 <__assert_fail@plt+0x8cc>
   11e50:	andeq	sl, r1, ip, lsl #17
   11e54:			; <UNDEFINED> instruction: 0x0002d1b0
   11e58:	strd	r4, [sp, #-16]!
   11e5c:	str	r6, [sp, #8]
   11e60:	str	lr, [sp, #12]
   11e64:	mov	r4, r1
   11e68:	subs	r5, r0, #0
   11e6c:	beq	11ee0 <__assert_fail@plt+0xb54>
   11e70:	cmp	r1, #0
   11e74:	beq	11ed0 <__assert_fail@plt+0xb44>
   11e78:	mov	r0, r5
   11e7c:	bl	1120c <strlen@plt>
   11e80:	mov	r6, r0
   11e84:	mov	r0, r4
   11e88:	bl	1120c <strlen@plt>
   11e8c:	add	r0, r6, r0
   11e90:	add	r0, r0, #2
   11e94:	bl	19220 <__assert_fail@plt+0x7e94>
   11e98:	mov	r6, r0
   11e9c:	mov	r1, r5
   11ea0:	bl	110ec <stpcpy@plt>
   11ea4:	movw	r3, #46544	; 0xb5d0
   11ea8:	movt	r3, #1
   11eac:	ldrh	r3, [r3]
   11eb0:	strh	r3, [r0], #1
   11eb4:	mov	r1, r4
   11eb8:	bl	11170 <strcpy@plt>
   11ebc:	mov	r0, r6
   11ec0:	ldrd	r4, [sp]
   11ec4:	ldr	r6, [sp, #8]
   11ec8:	add	sp, sp, #12
   11ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ed0:	mov	r0, r5
   11ed4:	bl	1968c <__assert_fail@plt+0x8300>
   11ed8:	mov	r6, r0
   11edc:	b	11ebc <__assert_fail@plt+0xb30>
   11ee0:	cmp	r1, #0
   11ee4:	moveq	r6, r1
   11ee8:	beq	11ebc <__assert_fail@plt+0xb30>
   11eec:	mov	r0, r1
   11ef0:	bl	1968c <__assert_fail@plt+0x8300>
   11ef4:	mov	r6, r0
   11ef8:	b	11ebc <__assert_fail@plt+0xb30>
   11efc:	mov	r3, #2
   11f00:	str	r3, [r0]
   11f04:	mov	r3, #0
   11f08:	str	r3, [r0, #8]
   11f0c:	mov	r2, #1
   11f10:	strb	r2, [r0, #12]
   11f14:	strb	r3, [r0, #4]
   11f18:	strb	r3, [r0, #13]
   11f1c:	str	r3, [r0, #16]
   11f20:	str	r3, [r0, #20]
   11f24:	bx	lr
   11f28:	str	r4, [sp, #-8]!
   11f2c:	str	lr, [sp, #4]
   11f30:	mov	r4, r0
   11f34:	ldr	r0, [r0, #16]
   11f38:	bl	12dbc <__assert_fail@plt+0x1a30>
   11f3c:	ldr	r0, [r4, #20]
   11f40:	bl	12dbc <__assert_fail@plt+0x1a30>
   11f44:	ldr	r4, [sp]
   11f48:	add	sp, sp, #4
   11f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f50:	str	r4, [sp, #-8]!
   11f54:	str	lr, [sp, #4]
   11f58:	sub	sp, sp, #24
   11f5c:	mov	r4, r0
   11f60:	bl	11374 <getgrgid@plt>
   11f64:	cmp	r0, #0
   11f68:	beq	11f84 <__assert_fail@plt+0xbf8>
   11f6c:	ldr	r0, [r0]
   11f70:	bl	1968c <__assert_fail@plt+0x8300>
   11f74:	add	sp, sp, #24
   11f78:	ldr	r4, [sp]
   11f7c:	add	sp, sp, #4
   11f80:	pop	{pc}		; (ldr pc, [sp], #4)
   11f84:	mov	r2, sp
   11f88:	mov	r0, r4
   11f8c:	mov	r1, #0
   11f90:	bl	1637c <__assert_fail@plt+0x4ff0>
   11f94:	b	11f70 <__assert_fail@plt+0xbe4>
   11f98:	str	r4, [sp, #-8]!
   11f9c:	str	lr, [sp, #4]
   11fa0:	sub	sp, sp, #24
   11fa4:	mov	r4, r0
   11fa8:	bl	11080 <getpwuid@plt>
   11fac:	cmp	r0, #0
   11fb0:	beq	11fcc <__assert_fail@plt+0xc40>
   11fb4:	ldr	r0, [r0]
   11fb8:	bl	1968c <__assert_fail@plt+0x8300>
   11fbc:	add	sp, sp, #24
   11fc0:	ldr	r4, [sp]
   11fc4:	add	sp, sp, #4
   11fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   11fcc:	mov	r2, sp
   11fd0:	mov	r0, r4
   11fd4:	mov	r1, #0
   11fd8:	bl	1637c <__assert_fail@plt+0x4ff0>
   11fdc:	b	11fb8 <__assert_fail@plt+0xc2c>
   11fe0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11fe4:	strd	r6, [sp, #8]
   11fe8:	strd	r8, [sp, #16]
   11fec:	strd	sl, [sp, #24]
   11ff0:	str	lr, [sp, #32]
   11ff4:	sub	sp, sp, #268	; 0x10c
   11ff8:	str	r2, [sp, #40]	; 0x28
   11ffc:	str	r3, [sp, #44]	; 0x2c
   12000:	ldr	r7, [sp, #312]	; 0x138
   12004:	ldr	r3, [sp, #304]	; 0x130
   12008:	ldr	r2, [sp, #308]	; 0x134
   1200c:	and	r3, r3, r2
   12010:	str	r3, [sp, #28]
   12014:	cmn	r3, #1
   12018:	movne	r3, #0
   1201c:	beq	12050 <__assert_fail@plt+0xcc4>
   12020:	mov	r2, #0
   12024:	orr	r1, r3, r1
   12028:	bl	196f8 <__assert_fail@plt+0x836c>
   1202c:	str	r0, [sp, #12]
   12030:	mov	fp, #1
   12034:	mov	r3, #0
   12038:	str	r3, [sp, #36]	; 0x24
   1203c:	movw	r3, #47292	; 0xb8bc
   12040:	movt	r3, #1
   12044:	str	r3, [sp, #48]	; 0x30
   12048:	mov	sl, fp
   1204c:	b	123f0 <__assert_fail@plt+0x1064>
   12050:	ldrb	r3, [r7, #12]
   12054:	cmp	r3, #0
   12058:	movne	r3, #0
   1205c:	bne	12020 <__assert_fail@plt+0xc94>
   12060:	ldr	r3, [r7]
   12064:	cmp	r3, #2
   12068:	movne	r3, #0
   1206c:	moveq	r3, #8
   12070:	b	12020 <__assert_fail@plt+0xc94>
   12074:	mov	fp, sl
   12078:	bl	1123c <__errno_location@plt>
   1207c:	mov	r4, r0
   12080:	ldr	r5, [r0]
   12084:	cmp	r5, #0
   12088:	beq	1209c <__assert_fail@plt+0xd10>
   1208c:	ldrb	fp, [r7, #13]
   12090:	cmp	fp, #0
   12094:	movne	fp, #0
   12098:	beq	120cc <__assert_fail@plt+0xd40>
   1209c:	ldr	r0, [sp, #12]
   120a0:	bl	147e8 <__assert_fail@plt+0x345c>
   120a4:	cmp	r0, #0
   120a8:	bne	12b98 <__assert_fail@plt+0x180c>
   120ac:	mov	r0, fp
   120b0:	add	sp, sp, #268	; 0x10c
   120b4:	ldrd	r4, [sp]
   120b8:	ldrd	r6, [sp, #8]
   120bc:	ldrd	r8, [sp, #16]
   120c0:	ldrd	sl, [sp, #24]
   120c4:	add	sp, sp, #32
   120c8:	pop	{pc}		; (ldr pc, [sp], #4)
   120cc:	mov	r2, #5
   120d0:	movw	r1, #46548	; 0xb5d4
   120d4:	movt	r1, #1
   120d8:	mov	r0, #0
   120dc:	bl	11104 <dcgettext@plt>
   120e0:	mov	r2, r0
   120e4:	mov	r1, r5
   120e8:	mov	r0, #0
   120ec:	bl	11194 <error@plt>
   120f0:	b	1209c <__assert_fail@plt+0xd10>
   120f4:	ldrb	fp, [r7, #4]
   120f8:	cmp	fp, #0
   120fc:	beq	124d4 <__assert_fail@plt+0x1148>
   12100:	ldr	ip, [r7, #8]
   12104:	cmp	ip, #0
   12108:	beq	123ec <__assert_fail@plt+0x1060>
   1210c:	ldrd	r0, [r5, #160]	; 0xa0
   12110:	ldrd	r2, [ip]
   12114:	cmp	r1, r3
   12118:	cmpeq	r0, r2
   1211c:	bne	123ec <__assert_fail@plt+0x1060>
   12120:	ldrd	r2, [r5, #64]	; 0x40
   12124:	ldrd	r0, [ip, #8]
   12128:	cmp	r3, r1
   1212c:	cmpeq	r2, r0
   12130:	bne	123ec <__assert_fail@plt+0x1060>
   12134:	movw	r1, #46288	; 0xb4d0
   12138:	movt	r1, #1
   1213c:	ldr	r6, [sp, #16]
   12140:	mov	r0, r6
   12144:	bl	11074 <strcmp@plt>
   12148:	cmp	r0, #0
   1214c:	bne	121cc <__assert_fail@plt+0xe40>
   12150:	mov	r2, #5
   12154:	movw	r1, #46564	; 0xb5e4
   12158:	movt	r1, #1
   1215c:	bl	11104 <dcgettext@plt>
   12160:	mov	r4, r0
   12164:	mov	r1, r6
   12168:	mov	r0, #4
   1216c:	bl	184c4 <__assert_fail@plt+0x7138>
   12170:	mov	r3, r0
   12174:	mov	r2, r4
   12178:	mov	r1, #0
   1217c:	mov	r0, r1
   12180:	bl	11194 <error@plt>
   12184:	mov	r2, #5
   12188:	movw	r1, #46672	; 0xb650
   1218c:	movt	r1, #1
   12190:	mov	r0, #0
   12194:	bl	11104 <dcgettext@plt>
   12198:	mov	r2, r0
   1219c:	mov	r1, #0
   121a0:	mov	r0, r1
   121a4:	bl	11194 <error@plt>
   121a8:	mov	r2, #4
   121ac:	mov	r1, r5
   121b0:	ldr	r4, [sp, #12]
   121b4:	mov	r0, r4
   121b8:	bl	14ff4 <__assert_fail@plt+0x3c68>
   121bc:	mov	r0, r4
   121c0:	bl	14964 <__assert_fail@plt+0x35d8>
   121c4:	mov	fp, #0
   121c8:	b	123ec <__assert_fail@plt+0x1060>
   121cc:	mov	r2, #5
   121d0:	movw	r1, #46612	; 0xb614
   121d4:	movt	r1, #1
   121d8:	mov	r0, #0
   121dc:	bl	11104 <dcgettext@plt>
   121e0:	mov	r4, r0
   121e4:	ldr	r2, [sp, #16]
   121e8:	mov	r1, #4
   121ec:	mov	r0, #0
   121f0:	bl	18438 <__assert_fail@plt+0x70ac>
   121f4:	mov	r6, r0
   121f8:	movw	r2, #46288	; 0xb4d0
   121fc:	movt	r2, #1
   12200:	mov	r1, #4
   12204:	mov	r0, #1
   12208:	bl	18438 <__assert_fail@plt+0x70ac>
   1220c:	str	r0, [sp]
   12210:	mov	r3, r6
   12214:	mov	r2, r4
   12218:	mov	r1, #0
   1221c:	mov	r0, r1
   12220:	bl	11194 <error@plt>
   12224:	b	12184 <__assert_fail@plt+0xdf8>
   12228:	ldrb	r3, [r7, #4]
   1222c:	cmp	r3, #0
   12230:	moveq	fp, #1
   12234:	bne	124d4 <__assert_fail@plt+0x1148>
   12238:	b	123ec <__assert_fail@plt+0x1060>
   1223c:	ldr	r3, [r5, #48]	; 0x30
   12240:	cmp	r3, #0
   12244:	bne	12254 <__assert_fail@plt+0xec8>
   12248:	ldr	r3, [r5, #16]
   1224c:	cmp	r3, #0
   12250:	beq	122a0 <__assert_fail@plt+0xf14>
   12254:	ldrb	r3, [r7, #13]
   12258:	cmp	r3, #0
   1225c:	bne	122c8 <__assert_fail@plt+0xf3c>
   12260:	ldr	r4, [r5, #32]
   12264:	mov	r2, #5
   12268:	movw	r1, #46724	; 0xb684
   1226c:	movt	r1, #1
   12270:	mov	r0, #0
   12274:	bl	11104 <dcgettext@plt>
   12278:	mov	r6, r0
   1227c:	ldr	r1, [sp, #16]
   12280:	mov	r0, #4
   12284:	bl	184c4 <__assert_fail@plt+0x7138>
   12288:	mov	r3, r0
   1228c:	mov	r2, r6
   12290:	mov	r1, r4
   12294:	mov	r0, #0
   12298:	bl	11194 <error@plt>
   1229c:	b	122c8 <__assert_fail@plt+0xf3c>
   122a0:	mov	fp, #1
   122a4:	str	fp, [r5, #16]
   122a8:	mov	r2, fp
   122ac:	mov	r1, r5
   122b0:	ldr	r0, [sp, #12]
   122b4:	bl	14ff4 <__assert_fail@plt+0x3c68>
   122b8:	b	123ec <__assert_fail@plt+0x1060>
   122bc:	ldrb	r3, [r7, #13]
   122c0:	cmp	r3, #0
   122c4:	beq	12444 <__assert_fail@plt+0x10b8>
   122c8:	mov	r8, #0
   122cc:	ldr	fp, [sp, #36]	; 0x24
   122d0:	ldr	r3, [r7]
   122d4:	cmp	r3, #2
   122d8:	movne	r4, #1
   122dc:	beq	123e0 <__assert_fail@plt+0x1054>
   122e0:	cmp	r3, #0
   122e4:	bne	123e0 <__assert_fail@plt+0x1054>
   122e8:	cmp	fp, #0
   122ec:	moveq	r6, #3
   122f0:	bne	12a04 <__assert_fail@plt+0x1678>
   122f4:	cmp	r8, #0
   122f8:	streq	r8, [sp, #20]
   122fc:	beq	12320 <__assert_fail@plt+0xf94>
   12300:	ldr	r0, [r8, #24]
   12304:	bl	11f98 <__assert_fail@plt+0xc0c>
   12308:	str	r0, [sp, #20]
   1230c:	ldr	r0, [r8, #28]
   12310:	bl	11f50 <__assert_fail@plt+0xbc4>
   12314:	mov	r8, r0
   12318:	cmp	r6, #1
   1231c:	beq	12a18 <__assert_fail@plt+0x168c>
   12320:	ldr	r4, [r7, #16]
   12324:	ldr	r9, [r7, #20]
   12328:	mov	r1, r9
   1232c:	mov	r0, r4
   12330:	bl	11e58 <__assert_fail@plt+0xacc>
   12334:	str	r0, [sp, #32]
   12338:	cmp	r4, #0
   1233c:	ldr	r3, [sp, #20]
   12340:	movne	r0, r3
   12344:	moveq	r0, r4
   12348:	cmp	r9, #0
   1234c:	movne	r1, r8
   12350:	moveq	r1, r9
   12354:	bl	11e58 <__assert_fail@plt+0xacc>
   12358:	str	r0, [sp, #24]
   1235c:	cmp	r6, #3
   12360:	beq	12a80 <__assert_fail@plt+0x16f4>
   12364:	cmp	r6, #4
   12368:	beq	12b34 <__assert_fail@plt+0x17a8>
   1236c:	cmp	r6, #2
   12370:	bne	12b80 <__assert_fail@plt+0x17f4>
   12374:	cmp	r4, #0
   12378:	beq	12a58 <__assert_fail@plt+0x16cc>
   1237c:	mov	r2, #5
   12380:	movw	r1, #47092	; 0xb7f4
   12384:	movt	r1, #1
   12388:	mov	r0, #0
   1238c:	bl	11104 <dcgettext@plt>
   12390:	mov	r4, r0
   12394:	ldr	r1, [sp, #16]
   12398:	mov	r0, #4
   1239c:	bl	184c4 <__assert_fail@plt+0x7138>
   123a0:	ldr	r6, [sp, #32]
   123a4:	str	r6, [sp]
   123a8:	ldr	r9, [sp, #24]
   123ac:	mov	r3, r9
   123b0:	mov	r2, r0
   123b4:	mov	r1, r4
   123b8:	mov	r0, #1
   123bc:	bl	11260 <__printf_chk@plt>
   123c0:	mov	r0, r9
   123c4:	bl	12dbc <__assert_fail@plt+0x1a30>
   123c8:	mov	r0, r6
   123cc:	bl	12dbc <__assert_fail@plt+0x1a30>
   123d0:	ldr	r0, [sp, #20]
   123d4:	bl	12dbc <__assert_fail@plt+0x1a30>
   123d8:	mov	r0, r8
   123dc:	bl	12dbc <__assert_fail@plt+0x1a30>
   123e0:	ldrb	r3, [r7, #4]
   123e4:	cmp	r3, #0
   123e8:	beq	12b84 <__assert_fail@plt+0x17f8>
   123ec:	and	sl, sl, fp
   123f0:	ldr	r0, [sp, #12]
   123f4:	bl	14964 <__assert_fail@plt+0x35d8>
   123f8:	subs	r5, r0, #0
   123fc:	beq	12074 <__assert_fail@plt+0xce8>
   12400:	ldr	r3, [r5, #28]
   12404:	str	r3, [sp, #16]
   12408:	ldrh	r3, [r5, #56]	; 0x38
   1240c:	sub	r3, r3, #1
   12410:	cmp	r3, #9
   12414:	ldrls	pc, [pc, r3, lsl #2]
   12418:	b	124d4 <__assert_fail@plt+0x1148>
   1241c:	strdeq	r2, [r1], -r4
   12420:	andeq	r2, r1, r0, asr #9
   12424:	ldrdeq	r2, [r1], -r4
   12428:	andeq	r2, r1, r4, ror r4
   1242c:	ldrdeq	r2, [r1], -r4
   12430:	andeq	r2, r1, r8, lsr #4
   12434:			; <UNDEFINED> instruction: 0x000122bc
   12438:	ldrdeq	r2, [r1], -r4
   1243c:	ldrdeq	r2, [r1], -r4
   12440:	andeq	r2, r1, ip, lsr r2
   12444:	ldr	r4, [r5, #32]
   12448:	ldr	r2, [sp, #16]
   1244c:	mov	r1, #3
   12450:	mov	r0, #0
   12454:	bl	185e8 <__assert_fail@plt+0x725c>
   12458:	mov	r3, r0
   1245c:	movw	r2, #46120	; 0xb428
   12460:	movt	r2, #1
   12464:	mov	r1, r4
   12468:	mov	r0, #0
   1246c:	bl	11194 <error@plt>
   12470:	b	122c8 <__assert_fail@plt+0xf3c>
   12474:	ldrb	r3, [r7, #13]
   12478:	cmp	r3, #0
   1247c:	bne	122c8 <__assert_fail@plt+0xf3c>
   12480:	ldr	r4, [r5, #32]
   12484:	mov	r2, #5
   12488:	movw	r1, #46744	; 0xb698
   1248c:	movt	r1, #1
   12490:	mov	r0, #0
   12494:	bl	11104 <dcgettext@plt>
   12498:	mov	r6, r0
   1249c:	ldr	r1, [sp, #16]
   124a0:	mov	r0, #4
   124a4:	bl	184c4 <__assert_fail@plt+0x7138>
   124a8:	mov	r3, r0
   124ac:	mov	r2, r6
   124b0:	mov	r1, r4
   124b4:	mov	r0, #0
   124b8:	bl	11194 <error@plt>
   124bc:	b	122c8 <__assert_fail@plt+0xf3c>
   124c0:	mov	r1, r5
   124c4:	ldr	r0, [sp, #12]
   124c8:	bl	19750 <__assert_fail@plt+0x83c4>
   124cc:	cmp	r0, #0
   124d0:	bne	12624 <__assert_fail@plt+0x1298>
   124d4:	ldr	r9, [r5, #24]
   124d8:	ldr	r3, [sp, #28]
   124dc:	cmn	r3, #1
   124e0:	beq	12668 <__assert_fail@plt+0x12dc>
   124e4:	add	r8, r5, #64	; 0x40
   124e8:	ldrb	r3, [r7, #12]
   124ec:	cmp	r3, #0
   124f0:	bne	12bdc <__assert_fail@plt+0x1850>
   124f4:	ldr	r3, [sp, #304]	; 0x130
   124f8:	cmn	r3, #1
   124fc:	beq	126e8 <__assert_fail@plt+0x135c>
   12500:	ldr	r3, [r8, #24]
   12504:	ldr	r2, [sp, #304]	; 0x130
   12508:	cmp	r2, r3
   1250c:	movne	r3, #0
   12510:	beq	126e8 <__assert_fail@plt+0x135c>
   12514:	mov	fp, r3
   12518:	ldrh	r6, [r5, #56]	; 0x38
   1251c:	sub	r3, r6, #1
   12520:	uxth	r3, r3
   12524:	bic	r6, r6, #2
   12528:	uxth	r6, r6
   1252c:	cmp	r6, #4
   12530:	cmpne	r3, #1
   12534:	movls	r6, #1
   12538:	movhi	r6, #0
   1253c:	movhi	r6, #1
   12540:	bhi	12564 <__assert_fail@plt+0x11d8>
   12544:	ldr	ip, [r7, #8]
   12548:	cmp	ip, #0
   1254c:	beq	12564 <__assert_fail@plt+0x11d8>
   12550:	ldrd	r0, [r8, #96]	; 0x60
   12554:	ldrd	r2, [ip]
   12558:	cmp	r1, r3
   1255c:	cmpeq	r0, r2
   12560:	beq	12710 <__assert_fail@plt+0x1384>
   12564:	cmp	fp, #0
   12568:	beq	12bc8 <__assert_fail@plt+0x183c>
   1256c:	ldrb	r4, [r7, #12]
   12570:	cmp	r4, #0
   12574:	bne	127fc <__assert_fail@plt+0x1470>
   12578:	mov	r3, #256	; 0x100
   1257c:	str	r3, [sp]
   12580:	ldr	r3, [sp, #44]	; 0x2c
   12584:	ldr	r2, [sp, #40]	; 0x28
   12588:	mov	r1, r9
   1258c:	ldr	r0, [sp, #12]
   12590:	ldr	r0, [r0, #32]
   12594:	bl	11314 <fchownat@plt>
   12598:	cmp	r0, #0
   1259c:	moveq	r6, #1
   125a0:	movne	r6, #0
   125a4:	beq	125b8 <__assert_fail@plt+0x122c>
   125a8:	bl	1123c <__errno_location@plt>
   125ac:	ldr	r3, [r0]
   125b0:	cmp	r3, #95	; 0x5f
   125b4:	beq	12bd0 <__assert_fail@plt+0x1844>
   125b8:	cmp	r6, #0
   125bc:	bne	12c3c <__assert_fail@plt+0x18b0>
   125c0:	ldrb	fp, [r7, #13]
   125c4:	cmp	fp, #0
   125c8:	movne	fp, #0
   125cc:	bne	122d0 <__assert_fail@plt+0xf44>
   125d0:	bl	1123c <__errno_location@plt>
   125d4:	ldr	r4, [r0]
   125d8:	ldr	r3, [sp, #40]	; 0x28
   125dc:	cmn	r3, #1
   125e0:	mov	r2, #5
   125e4:	movwne	r1, #46984	; 0xb788
   125e8:	movtne	r1, #1
   125ec:	movweq	r1, #47012	; 0xb7a4
   125f0:	movteq	r1, #1
   125f4:	mov	r0, #0
   125f8:	bl	11104 <dcgettext@plt>
   125fc:	mov	r6, r0
   12600:	ldr	r1, [sp, #16]
   12604:	mov	r0, #4
   12608:	bl	184c4 <__assert_fail@plt+0x7138>
   1260c:	mov	r3, r0
   12610:	mov	r2, r6
   12614:	mov	r1, r4
   12618:	mov	r0, #0
   1261c:	bl	11194 <error@plt>
   12620:	b	122d0 <__assert_fail@plt+0xf44>
   12624:	mov	r2, #5
   12628:	movw	r1, #46772	; 0xb6b4
   1262c:	movt	r1, #1
   12630:	mov	r0, #0
   12634:	bl	11104 <dcgettext@plt>
   12638:	mov	r4, r0
   1263c:	ldr	r2, [sp, #16]
   12640:	mov	r1, #3
   12644:	mov	r0, #0
   12648:	bl	185e8 <__assert_fail@plt+0x725c>
   1264c:	mov	r3, r0
   12650:	mov	r2, r4
   12654:	mov	r1, #0
   12658:	mov	r0, r1
   1265c:	bl	11194 <error@plt>
   12660:	mov	fp, #0
   12664:	b	123ec <__assert_fail@plt+0x1060>
   12668:	ldr	r3, [r7]
   1266c:	cmp	r3, #2
   12670:	bne	124e4 <__assert_fail@plt+0x1158>
   12674:	ldr	r3, [r7, #8]
   12678:	cmp	r3, #0
   1267c:	bne	124e4 <__assert_fail@plt+0x1158>
   12680:	ldrb	r3, [r7, #12]
   12684:	cmp	r3, #0
   12688:	bne	12bd8 <__assert_fail@plt+0x184c>
   1268c:	add	r8, r5, #64	; 0x40
   12690:	mov	fp, #1
   12694:	mov	r6, fp
   12698:	b	12564 <__assert_fail@plt+0x11d8>
   1269c:	bl	1123c <__errno_location@plt>
   126a0:	ldr	r4, [r0]
   126a4:	mov	r2, #5
   126a8:	movw	r1, #46960	; 0xb770
   126ac:	movt	r1, #1
   126b0:	mov	r0, #0
   126b4:	bl	11104 <dcgettext@plt>
   126b8:	mov	r6, r0
   126bc:	ldr	r1, [sp, #16]
   126c0:	mov	r0, #4
   126c4:	bl	184c4 <__assert_fail@plt+0x7138>
   126c8:	mov	r3, r0
   126cc:	mov	r2, r6
   126d0:	mov	r1, r4
   126d4:	mov	r0, #0
   126d8:	bl	11194 <error@plt>
   126dc:	b	12c20 <__assert_fail@plt+0x1894>
   126e0:	add	r8, sp, #56	; 0x38
   126e4:	b	124f4 <__assert_fail@plt+0x1168>
   126e8:	ldr	r3, [sp, #308]	; 0x134
   126ec:	cmn	r3, #1
   126f0:	moveq	r3, #1
   126f4:	beq	12514 <__assert_fail@plt+0x1188>
   126f8:	ldr	r3, [r8, #28]
   126fc:	ldr	r2, [sp, #308]	; 0x134
   12700:	cmp	r3, r2
   12704:	movne	r3, #0
   12708:	moveq	r3, #1
   1270c:	b	12514 <__assert_fail@plt+0x1188>
   12710:	ldrd	r2, [r8]
   12714:	ldrd	r0, [ip, #8]
   12718:	cmp	r3, r1
   1271c:	cmpeq	r2, r0
   12720:	bne	12564 <__assert_fail@plt+0x11d8>
   12724:	movw	r1, #46288	; 0xb4d0
   12728:	movt	r1, #1
   1272c:	ldr	r5, [sp, #16]
   12730:	mov	r0, r5
   12734:	bl	11074 <strcmp@plt>
   12738:	cmp	r0, #0
   1273c:	bne	127a0 <__assert_fail@plt+0x1414>
   12740:	mov	r2, #5
   12744:	movw	r1, #46564	; 0xb5e4
   12748:	movt	r1, #1
   1274c:	bl	11104 <dcgettext@plt>
   12750:	mov	r4, r0
   12754:	mov	r1, r5
   12758:	mov	r0, #4
   1275c:	bl	184c4 <__assert_fail@plt+0x7138>
   12760:	mov	r3, r0
   12764:	mov	r2, r4
   12768:	mov	r1, #0
   1276c:	mov	r0, r1
   12770:	bl	11194 <error@plt>
   12774:	mov	r2, #5
   12778:	movw	r1, #46672	; 0xb650
   1277c:	movt	r1, #1
   12780:	mov	r0, #0
   12784:	bl	11104 <dcgettext@plt>
   12788:	mov	r2, r0
   1278c:	mov	r1, #0
   12790:	mov	r0, r1
   12794:	bl	11194 <error@plt>
   12798:	mov	fp, #0
   1279c:	b	123ec <__assert_fail@plt+0x1060>
   127a0:	mov	r2, #5
   127a4:	movw	r1, #46612	; 0xb614
   127a8:	movt	r1, #1
   127ac:	mov	r0, #0
   127b0:	bl	11104 <dcgettext@plt>
   127b4:	mov	r4, r0
   127b8:	ldr	r2, [sp, #16]
   127bc:	mov	r1, #4
   127c0:	mov	r0, #0
   127c4:	bl	18438 <__assert_fail@plt+0x70ac>
   127c8:	mov	r5, r0
   127cc:	movw	r2, #46288	; 0xb4d0
   127d0:	movt	r2, #1
   127d4:	mov	r1, #4
   127d8:	mov	r0, #1
   127dc:	bl	18438 <__assert_fail@plt+0x70ac>
   127e0:	str	r0, [sp]
   127e4:	mov	r3, r5
   127e8:	mov	r2, r4
   127ec:	mov	r1, #0
   127f0:	mov	r0, r1
   127f4:	bl	11194 <error@plt>
   127f8:	b	12774 <__assert_fail@plt+0x13e8>
   127fc:	ldr	r3, [sp, #28]
   12800:	cmn	r3, #1
   12804:	beq	12920 <__assert_fail@plt+0x1594>
   12808:	ldr	r3, [r8, #16]
   1280c:	and	r3, r3, #61440	; 0xf000
   12810:	cmp	r3, #32768	; 0x8000
   12814:	beq	12904 <__assert_fail@plt+0x1578>
   12818:	cmp	r3, #16384	; 0x4000
   1281c:	bne	12920 <__assert_fail@plt+0x1594>
   12820:	mov	r3, #18688	; 0x4900
   12824:	str	r3, [sp, #20]
   12828:	ldr	r3, [sp, #12]
   1282c:	ldr	r3, [r3, #32]
   12830:	ldr	r2, [sp, #20]
   12834:	mov	r1, r9
   12838:	str	r3, [sp, #32]
   1283c:	mov	r0, r3
   12840:	bl	110b0 <__openat64_2@plt>
   12844:	subs	r1, r0, #0
   12848:	str	r1, [sp, #24]
   1284c:	bge	12894 <__assert_fail@plt+0x1508>
   12850:	bl	1123c <__errno_location@plt>
   12854:	str	r0, [sp, #52]	; 0x34
   12858:	ldr	r3, [r0]
   1285c:	cmp	r3, #13
   12860:	bne	125c0 <__assert_fail@plt+0x1234>
   12864:	ldr	r3, [r8, #16]
   12868:	and	r3, r3, #61440	; 0xf000
   1286c:	cmp	r3, #32768	; 0x8000
   12870:	bne	12920 <__assert_fail@plt+0x1594>
   12874:	ldr	r2, [sp, #20]
   12878:	orr	r2, r2, #1
   1287c:	mov	r1, r9
   12880:	ldr	r0, [sp, #32]
   12884:	bl	110b0 <__openat64_2@plt>
   12888:	subs	r3, r0, #0
   1288c:	str	r3, [sp, #24]
   12890:	blt	12910 <__assert_fail@plt+0x1584>
   12894:	add	r2, sp, #160	; 0xa0
   12898:	ldr	r1, [sp, #24]
   1289c:	mov	r0, #3
   128a0:	bl	11140 <__fxstat64@plt>
   128a4:	cmp	r0, #0
   128a8:	bne	129cc <__assert_fail@plt+0x1640>
   128ac:	ldrd	r0, [r8, #96]	; 0x60
   128b0:	add	r3, sp, #256	; 0x100
   128b4:	ldrd	r2, [r3]
   128b8:	cmp	r1, r3
   128bc:	cmpeq	r0, r2
   128c0:	beq	1294c <__assert_fail@plt+0x15c0>
   128c4:	bl	1123c <__errno_location@plt>
   128c8:	mov	r6, r0
   128cc:	ldr	r9, [r0]
   128d0:	ldr	r0, [sp, #24]
   128d4:	bl	11350 <close@plt>
   128d8:	str	r9, [r6]
   128dc:	mov	r2, #0
   128e0:	ldr	r3, [r7]
   128e4:	cmp	r3, #2
   128e8:	moveq	fp, r2
   128ec:	beq	123e0 <__assert_fail@plt+0x1054>
   128f0:	and	r1, r2, r4
   128f4:	tst	r1, #255	; 0xff
   128f8:	bne	12c4c <__assert_fail@plt+0x18c0>
   128fc:	mov	fp, r2
   12900:	b	122e0 <__assert_fail@plt+0xf54>
   12904:	mov	r3, #2304	; 0x900
   12908:	str	r3, [sp, #20]
   1290c:	b	12828 <__assert_fail@plt+0x149c>
   12910:	ldr	r3, [sp, #52]	; 0x34
   12914:	ldr	r3, [r3]
   12918:	cmp	r3, #13
   1291c:	bne	125c0 <__assert_fail@plt+0x1234>
   12920:	ldr	r3, [sp, #36]	; 0x24
   12924:	str	r3, [sp]
   12928:	ldr	r3, [sp, #44]	; 0x2c
   1292c:	ldr	r2, [sp, #40]	; 0x28
   12930:	mov	r1, r9
   12934:	ldr	r0, [sp, #12]
   12938:	ldr	r0, [r0, #32]
   1293c:	bl	11314 <fchownat@plt>
   12940:	clz	r6, r0
   12944:	lsr	r6, r6, #5
   12948:	b	125b8 <__assert_fail@plt+0x122c>
   1294c:	ldrd	r0, [r8]
   12950:	ldrd	r2, [sp, #160]	; 0xa0
   12954:	cmp	r1, r3
   12958:	cmpeq	r0, r2
   1295c:	bne	128c4 <__assert_fail@plt+0x1538>
   12960:	ldr	r3, [sp, #304]	; 0x130
   12964:	cmn	r3, #1
   12968:	beq	12998 <__assert_fail@plt+0x160c>
   1296c:	ldr	r3, [sp, #184]	; 0xb8
   12970:	ldr	r2, [sp, #304]	; 0x130
   12974:	cmp	r2, r3
   12978:	beq	12998 <__assert_fail@plt+0x160c>
   1297c:	bl	1123c <__errno_location@plt>
   12980:	mov	r4, r0
   12984:	ldr	r9, [r0]
   12988:	ldr	r0, [sp, #24]
   1298c:	bl	11350 <close@plt>
   12990:	str	r9, [r4]
   12994:	b	125b8 <__assert_fail@plt+0x122c>
   12998:	ldr	r3, [sp, #308]	; 0x134
   1299c:	cmn	r3, #1
   129a0:	beq	129b4 <__assert_fail@plt+0x1628>
   129a4:	ldr	r3, [sp, #188]	; 0xbc
   129a8:	ldr	r2, [sp, #308]	; 0x134
   129ac:	cmp	r2, r3
   129b0:	bne	1297c <__assert_fail@plt+0x15f0>
   129b4:	ldr	r2, [sp, #44]	; 0x2c
   129b8:	ldr	r1, [sp, #40]	; 0x28
   129bc:	ldr	r0, [sp, #24]
   129c0:	bl	11230 <fchown@plt>
   129c4:	cmp	r0, #0
   129c8:	beq	129e8 <__assert_fail@plt+0x165c>
   129cc:	bl	1123c <__errno_location@plt>
   129d0:	mov	r4, r0
   129d4:	ldr	r6, [r0]
   129d8:	ldr	r0, [sp, #24]
   129dc:	bl	11350 <close@plt>
   129e0:	str	r6, [r4]
   129e4:	b	125c0 <__assert_fail@plt+0x1234>
   129e8:	ldr	r0, [sp, #24]
   129ec:	bl	11350 <close@plt>
   129f0:	cmp	r0, #0
   129f4:	bne	125c0 <__assert_fail@plt+0x1234>
   129f8:	b	125b8 <__assert_fail@plt+0x122c>
   129fc:	mov	r4, fp
   12a00:	b	122e0 <__assert_fail@plt+0xf54>
   12a04:	cmp	r4, #0
   12a08:	bne	12c30 <__assert_fail@plt+0x18a4>
   12a0c:	cmp	r8, #0
   12a10:	streq	r8, [sp, #20]
   12a14:	bne	12a50 <__assert_fail@plt+0x16c4>
   12a18:	mov	r2, #5
   12a1c:	movw	r1, #47036	; 0xb7bc
   12a20:	movt	r1, #1
   12a24:	mov	r0, #0
   12a28:	bl	11104 <dcgettext@plt>
   12a2c:	mov	r4, r0
   12a30:	ldr	r1, [sp, #16]
   12a34:	mov	r0, #4
   12a38:	bl	184c4 <__assert_fail@plt+0x7138>
   12a3c:	mov	r2, r0
   12a40:	mov	r1, r4
   12a44:	mov	r0, #1
   12a48:	bl	11260 <__printf_chk@plt>
   12a4c:	b	123d0 <__assert_fail@plt+0x1044>
   12a50:	mov	r6, #1
   12a54:	b	12300 <__assert_fail@plt+0xf74>
   12a58:	cmp	r9, #0
   12a5c:	mov	r2, #5
   12a60:	movwne	r1, #47132	; 0xb81c
   12a64:	movtne	r1, #1
   12a68:	movweq	r1, #47168	; 0xb840
   12a6c:	movteq	r1, #1
   12a70:	mov	r0, #0
   12a74:	bl	11104 <dcgettext@plt>
   12a78:	mov	r4, r0
   12a7c:	b	12394 <__assert_fail@plt+0x1008>
   12a80:	ldr	r3, [sp, #24]
   12a84:	cmp	r3, #0
   12a88:	beq	12ad4 <__assert_fail@plt+0x1748>
   12a8c:	cmp	r4, #0
   12a90:	beq	12ab0 <__assert_fail@plt+0x1724>
   12a94:	mov	r2, #5
   12a98:	movw	r1, #47200	; 0xb860
   12a9c:	movt	r1, #1
   12aa0:	mov	r0, #0
   12aa4:	bl	11104 <dcgettext@plt>
   12aa8:	mov	r4, r0
   12aac:	b	12394 <__assert_fail@plt+0x1008>
   12ab0:	cmp	r9, #0
   12ab4:	mov	r2, #5
   12ab8:	movwne	r1, #47248	; 0xb890
   12abc:	movtne	r1, #1
   12ac0:	ldreq	r1, [sp, #48]	; 0x30
   12ac4:	mov	r0, #0
   12ac8:	bl	11104 <dcgettext@plt>
   12acc:	mov	r4, r0
   12ad0:	b	12394 <__assert_fail@plt+0x1008>
   12ad4:	cmp	r4, #0
   12ad8:	beq	12b10 <__assert_fail@plt+0x1784>
   12adc:	mov	r2, #5
   12ae0:	movw	r1, #47328	; 0xb8e0
   12ae4:	movt	r1, #1
   12ae8:	mov	r0, #0
   12aec:	bl	11104 <dcgettext@plt>
   12af0:	mov	r4, r0
   12af4:	mov	r0, #0
   12af8:	bl	12dbc <__assert_fail@plt+0x1a30>
   12afc:	ldr	r3, [sp, #24]
   12b00:	ldr	r2, [sp, #32]
   12b04:	str	r2, [sp, #24]
   12b08:	str	r3, [sp, #32]
   12b0c:	b	12394 <__assert_fail@plt+0x1008>
   12b10:	cmp	r9, #0
   12b14:	mov	r2, #5
   12b18:	movwne	r1, #47368	; 0xb908
   12b1c:	movtne	r1, #1
   12b20:	ldreq	r1, [sp, #48]	; 0x30
   12b24:	mov	r0, #0
   12b28:	bl	11104 <dcgettext@plt>
   12b2c:	mov	r4, r0
   12b30:	b	12af4 <__assert_fail@plt+0x1768>
   12b34:	cmp	r4, #0
   12b38:	beq	12b58 <__assert_fail@plt+0x17cc>
   12b3c:	mov	r2, #5
   12b40:	movw	r1, #47404	; 0xb92c
   12b44:	movt	r1, #1
   12b48:	mov	r0, #0
   12b4c:	bl	11104 <dcgettext@plt>
   12b50:	mov	r4, r0
   12b54:	b	12394 <__assert_fail@plt+0x1008>
   12b58:	cmp	r9, #0
   12b5c:	mov	r2, #5
   12b60:	movwne	r1, #47436	; 0xb94c
   12b64:	movtne	r1, #1
   12b68:	movweq	r1, #47464	; 0xb968
   12b6c:	movteq	r1, #1
   12b70:	mov	r0, #0
   12b74:	bl	11104 <dcgettext@plt>
   12b78:	mov	r4, r0
   12b7c:	b	12394 <__assert_fail@plt+0x1008>
   12b80:	bl	11344 <abort@plt>
   12b84:	mov	r2, #4
   12b88:	mov	r1, r5
   12b8c:	ldr	r0, [sp, #12]
   12b90:	bl	14ff4 <__assert_fail@plt+0x3c68>
   12b94:	b	123ec <__assert_fail@plt+0x1060>
   12b98:	ldr	r4, [r4]
   12b9c:	mov	r2, #5
   12ba0:	movw	r1, #47492	; 0xb984
   12ba4:	movt	r1, #1
   12ba8:	mov	r0, #0
   12bac:	bl	11104 <dcgettext@plt>
   12bb0:	mov	r2, r0
   12bb4:	mov	r1, r4
   12bb8:	mov	r0, #0
   12bbc:	bl	11194 <error@plt>
   12bc0:	mov	fp, #0
   12bc4:	b	120ac <__assert_fail@plt+0xd20>
   12bc8:	mov	fp, r6
   12bcc:	b	122d0 <__assert_fail@plt+0xf44>
   12bd0:	mov	r2, fp
   12bd4:	b	128e0 <__assert_fail@plt+0x1554>
   12bd8:	add	r8, r5, #64	; 0x40
   12bdc:	ldr	r3, [r5, #80]	; 0x50
   12be0:	and	r3, r3, #61440	; 0xf000
   12be4:	cmp	r3, #40960	; 0xa000
   12be8:	bne	124f4 <__assert_fail@plt+0x1168>
   12bec:	ldr	r3, [sp, #36]	; 0x24
   12bf0:	str	r3, [sp]
   12bf4:	add	r3, sp, #56	; 0x38
   12bf8:	mov	r2, r9
   12bfc:	ldr	r1, [sp, #12]
   12c00:	ldr	r1, [r1, #32]
   12c04:	mov	r0, #3
   12c08:	bl	11128 <__fxstatat64@plt>
   12c0c:	cmp	r0, #0
   12c10:	beq	126e0 <__assert_fail@plt+0x1354>
   12c14:	ldrb	r3, [r7, #13]
   12c18:	cmp	r3, #0
   12c1c:	beq	1269c <__assert_fail@plt+0x1310>
   12c20:	mov	fp, #0
   12c24:	add	r8, sp, #56	; 0x38
   12c28:	ldr	r6, [sp, #36]	; 0x24
   12c2c:	b	12564 <__assert_fail@plt+0x11d8>
   12c30:	mov	fp, r4
   12c34:	mov	r6, #4
   12c38:	b	122f4 <__assert_fail@plt+0xf68>
   12c3c:	ldr	r3, [r7]
   12c40:	cmp	r3, #2
   12c44:	moveq	fp, r6
   12c48:	beq	123e0 <__assert_fail@plt+0x1054>
   12c4c:	ldr	r1, [sp, #40]	; 0x28
   12c50:	cmn	r1, #1
   12c54:	beq	12c68 <__assert_fail@plt+0x18dc>
   12c58:	ldr	r2, [r8, #24]
   12c5c:	cmp	r1, r2
   12c60:	movne	r6, #2
   12c64:	bne	12300 <__assert_fail@plt+0xf74>
   12c68:	ldr	r1, [sp, #44]	; 0x2c
   12c6c:	cmn	r1, #1
   12c70:	beq	129fc <__assert_fail@plt+0x1670>
   12c74:	ldr	r2, [r8, #28]
   12c78:	cmp	r1, r2
   12c7c:	moveq	r4, fp
   12c80:	beq	122e0 <__assert_fail@plt+0xf54>
   12c84:	mov	r6, #2
   12c88:	b	12300 <__assert_fail@plt+0xf74>
   12c8c:	movw	r3, #53696	; 0xd1c0
   12c90:	movt	r3, #2
   12c94:	str	r0, [r3]
   12c98:	bx	lr
   12c9c:	movw	r3, #53696	; 0xd1c0
   12ca0:	movt	r3, #2
   12ca4:	strb	r0, [r3, #4]
   12ca8:	bx	lr
   12cac:	strd	r4, [sp, #-16]!
   12cb0:	str	r6, [sp, #8]
   12cb4:	str	lr, [sp, #12]
   12cb8:	sub	sp, sp, #8
   12cbc:	movw	r3, #53660	; 0xd19c
   12cc0:	movt	r3, #2
   12cc4:	ldr	r0, [r3]
   12cc8:	bl	19e00 <__assert_fail@plt+0x8a74>
   12ccc:	cmp	r0, #0
   12cd0:	beq	12cf8 <__assert_fail@plt+0x196c>
   12cd4:	movw	r3, #53696	; 0xd1c0
   12cd8:	movt	r3, #2
   12cdc:	ldrb	r3, [r3, #4]
   12ce0:	cmp	r3, #0
   12ce4:	beq	12d24 <__assert_fail@plt+0x1998>
   12ce8:	bl	1123c <__errno_location@plt>
   12cec:	ldr	r3, [r0]
   12cf0:	cmp	r3, #32
   12cf4:	bne	12d24 <__assert_fail@plt+0x1998>
   12cf8:	movw	r3, #53656	; 0xd198
   12cfc:	movt	r3, #2
   12d00:	ldr	r0, [r3]
   12d04:	bl	19e00 <__assert_fail@plt+0x8a74>
   12d08:	cmp	r0, #0
   12d0c:	bne	12dac <__assert_fail@plt+0x1a20>
   12d10:	add	sp, sp, #8
   12d14:	ldrd	r4, [sp]
   12d18:	ldr	r6, [sp, #8]
   12d1c:	add	sp, sp, #12
   12d20:	pop	{pc}		; (ldr pc, [sp], #4)
   12d24:	mov	r2, #5
   12d28:	movw	r1, #47528	; 0xb9a8
   12d2c:	movt	r1, #1
   12d30:	mov	r0, #0
   12d34:	bl	11104 <dcgettext@plt>
   12d38:	mov	r4, r0
   12d3c:	movw	r3, #53696	; 0xd1c0
   12d40:	movt	r3, #2
   12d44:	ldr	r5, [r3]
   12d48:	cmp	r5, #0
   12d4c:	beq	12d8c <__assert_fail@plt+0x1a00>
   12d50:	bl	1123c <__errno_location@plt>
   12d54:	ldr	r6, [r0]
   12d58:	mov	r0, r5
   12d5c:	bl	185b0 <__assert_fail@plt+0x7224>
   12d60:	str	r4, [sp]
   12d64:	mov	r3, r0
   12d68:	movw	r2, #46116	; 0xb424
   12d6c:	movt	r2, #1
   12d70:	mov	r1, r6
   12d74:	mov	r0, #0
   12d78:	bl	11194 <error@plt>
   12d7c:	movw	r3, #53568	; 0xd140
   12d80:	movt	r3, #2
   12d84:	ldr	r0, [r3]
   12d88:	bl	110bc <_exit@plt>
   12d8c:	bl	1123c <__errno_location@plt>
   12d90:	mov	r3, r4
   12d94:	movw	r2, #46120	; 0xb428
   12d98:	movt	r2, #1
   12d9c:	ldr	r1, [r0]
   12da0:	mov	r0, #0
   12da4:	bl	11194 <error@plt>
   12da8:	b	12d7c <__assert_fail@plt+0x19f0>
   12dac:	movw	r3, #53568	; 0xd140
   12db0:	movt	r3, #2
   12db4:	ldr	r0, [r3]
   12db8:	bl	110bc <_exit@plt>
   12dbc:	strd	r4, [sp, #-12]!
   12dc0:	str	lr, [sp, #8]
   12dc4:	sub	sp, sp, #12
   12dc8:	mov	r5, r0
   12dcc:	bl	1123c <__errno_location@plt>
   12dd0:	mov	r4, r0
   12dd4:	ldr	r3, [r0]
   12dd8:	str	r3, [sp]
   12ddc:	str	r3, [sp, #4]
   12de0:	mov	r3, #0
   12de4:	str	r3, [r0]
   12de8:	mov	r0, r5
   12dec:	bl	110a4 <free@plt>
   12df0:	ldr	r3, [r4]
   12df4:	clz	r3, r3
   12df8:	lsr	r3, r3, #5
   12dfc:	add	r2, sp, #8
   12e00:	add	r3, r2, r3, lsl #2
   12e04:	ldr	r3, [r3, #-8]
   12e08:	str	r3, [r4]
   12e0c:	add	sp, sp, #12
   12e10:	ldrd	r4, [sp]
   12e14:	add	sp, sp, #8
   12e18:	pop	{pc}		; (ldr pc, [sp], #4)
   12e1c:	strd	r4, [sp, #-8]!
   12e20:	ldrd	r4, [r0, #8]
   12e24:	ldrd	r2, [r1, #8]
   12e28:	cmp	r5, r3
   12e2c:	cmpeq	r4, r2
   12e30:	movne	r0, #0
   12e34:	beq	12e44 <__assert_fail@plt+0x1ab8>
   12e38:	ldrd	r4, [sp]
   12e3c:	add	sp, sp, #8
   12e40:	bx	lr
   12e44:	ldrd	r4, [r0]
   12e48:	ldrd	r2, [r1]
   12e4c:	cmp	r5, r3
   12e50:	cmpeq	r4, r2
   12e54:	moveq	r0, #1
   12e58:	movne	r0, #0
   12e5c:	b	12e38 <__assert_fail@plt+0x1aac>
   12e60:	str	r4, [sp, #-8]!
   12e64:	str	lr, [sp, #4]
   12e68:	mov	r2, r1
   12e6c:	mov	r3, #0
   12e70:	ldrd	r0, [r0, #8]
   12e74:	bl	1a658 <__assert_fail@plt+0x92cc>
   12e78:	mov	r0, r2
   12e7c:	ldr	r4, [sp]
   12e80:	add	sp, sp, #4
   12e84:	pop	{pc}		; (ldr pc, [sp], #4)
   12e88:	str	r4, [sp, #-8]!
   12e8c:	str	lr, [sp, #4]
   12e90:	mov	r2, r1
   12e94:	mov	r3, #0
   12e98:	ldrd	r0, [r0]
   12e9c:	bl	1a658 <__assert_fail@plt+0x92cc>
   12ea0:	mov	r0, r2
   12ea4:	ldr	r4, [sp]
   12ea8:	add	sp, sp, #4
   12eac:	pop	{pc}		; (ldr pc, [sp], #4)
   12eb0:	strd	r4, [sp, #-8]!
   12eb4:	ldrd	r4, [r0]
   12eb8:	ldrd	r2, [r1]
   12ebc:	cmp	r5, r3
   12ec0:	cmpeq	r4, r2
   12ec4:	moveq	r0, #1
   12ec8:	movne	r0, #0
   12ecc:	ldrd	r4, [sp]
   12ed0:	add	sp, sp, #8
   12ed4:	bx	lr
   12ed8:	strd	r4, [sp, #-8]!
   12edc:	ldr	r3, [r0]
   12ee0:	ldrd	r4, [r3, #160]	; 0xa0
   12ee4:	ldr	r3, [r1]
   12ee8:	ldrd	r2, [r3, #160]	; 0xa0
   12eec:	cmp	r5, r3
   12ef0:	cmpeq	r4, r2
   12ef4:	movhi	r0, #1
   12ef8:	movls	r0, #0
   12efc:	movcc	r3, #1
   12f00:	movcs	r3, #0
   12f04:	sub	r0, r0, r3
   12f08:	ldrd	r4, [sp]
   12f0c:	add	sp, sp, #8
   12f10:	bx	lr
   12f14:	strd	r4, [sp, #-16]!
   12f18:	str	r6, [sp, #8]
   12f1c:	str	lr, [sp, #12]
   12f20:	mov	r4, r0
   12f24:	ldr	r3, [r0, #36]	; 0x24
   12f28:	add	r1, r1, #256	; 0x100
   12f2c:	adds	r1, r1, r3
   12f30:	bcs	12f60 <__assert_fail@plt+0x1bd4>
   12f34:	str	r1, [r0, #36]	; 0x24
   12f38:	ldr	r0, [r0, #24]
   12f3c:	bl	19da4 <__assert_fail@plt+0x8a18>
   12f40:	cmp	r0, #0
   12f44:	strne	r0, [r4, #24]
   12f48:	movne	r0, #1
   12f4c:	beq	12f84 <__assert_fail@plt+0x1bf8>
   12f50:	ldrd	r4, [sp]
   12f54:	ldr	r6, [sp, #8]
   12f58:	add	sp, sp, #12
   12f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f60:	ldr	r0, [r0, #24]
   12f64:	bl	12dbc <__assert_fail@plt+0x1a30>
   12f68:	mov	r5, #0
   12f6c:	str	r5, [r4, #24]
   12f70:	bl	1123c <__errno_location@plt>
   12f74:	mov	r3, #36	; 0x24
   12f78:	str	r3, [r0]
   12f7c:	mov	r0, r5
   12f80:	b	12f50 <__assert_fail@plt+0x1bc4>
   12f84:	ldr	r0, [r4, #24]
   12f88:	bl	12dbc <__assert_fail@plt+0x1a30>
   12f8c:	mov	r0, #0
   12f90:	str	r0, [r4, #24]
   12f94:	b	12f50 <__assert_fail@plt+0x1bc4>
   12f98:	strd	r4, [sp, #-16]!
   12f9c:	str	r6, [sp, #8]
   12fa0:	str	lr, [sp, #12]
   12fa4:	sub	sp, sp, #8
   12fa8:	mov	r4, r1
   12fac:	add	r5, r1, #64	; 0x40
   12fb0:	ldr	r3, [r1, #48]	; 0x30
   12fb4:	cmp	r3, #0
   12fb8:	bne	12fc8 <__assert_fail@plt+0x1c3c>
   12fbc:	ldr	r3, [r0, #48]	; 0x30
   12fc0:	tst	r3, #1
   12fc4:	bne	12fd8 <__assert_fail@plt+0x1c4c>
   12fc8:	ldr	r3, [r0, #48]	; 0x30
   12fcc:	ubfx	r3, r3, #1, #1
   12fd0:	orrs	r3, r2, r3
   12fd4:	beq	1304c <__assert_fail@plt+0x1cc0>
   12fd8:	mov	r2, r5
   12fdc:	ldr	r1, [r4, #24]
   12fe0:	mov	r0, #3
   12fe4:	bl	1132c <__xstat64@plt>
   12fe8:	cmp	r0, #0
   12fec:	beq	13070 <__assert_fail@plt+0x1ce4>
   12ff0:	bl	1123c <__errno_location@plt>
   12ff4:	mov	r6, r0
   12ff8:	ldr	r3, [r0]
   12ffc:	cmp	r3, #2
   13000:	bne	1302c <__assert_fail@plt+0x1ca0>
   13004:	mov	r2, r5
   13008:	ldr	r1, [r4, #24]
   1300c:	mov	r0, #3
   13010:	bl	1135c <__lxstat64@plt>
   13014:	cmp	r0, #0
   13018:	bne	1302c <__assert_fail@plt+0x1ca0>
   1301c:	mov	r3, #0
   13020:	str	r3, [r6]
   13024:	mov	r0, #13
   13028:	b	13094 <__assert_fail@plt+0x1d08>
   1302c:	ldr	r3, [r6]
   13030:	str	r3, [r4, #32]
   13034:	mov	r2, #104	; 0x68
   13038:	mov	r1, #0
   1303c:	mov	r0, r5
   13040:	bl	11254 <memset@plt>
   13044:	mov	r0, #10
   13048:	b	13094 <__assert_fail@plt+0x1d08>
   1304c:	mov	r3, #256	; 0x100
   13050:	str	r3, [sp]
   13054:	mov	r3, r5
   13058:	ldr	r2, [r4, #24]
   1305c:	ldr	r1, [r0, #32]
   13060:	mov	r0, #3
   13064:	bl	11128 <__fxstatat64@plt>
   13068:	cmp	r0, #0
   1306c:	bne	130a8 <__assert_fail@plt+0x1d1c>
   13070:	ldr	r3, [r4, #80]	; 0x50
   13074:	and	r3, r3, #61440	; 0xf000
   13078:	cmp	r3, #16384	; 0x4000
   1307c:	beq	130b8 <__assert_fail@plt+0x1d2c>
   13080:	cmp	r3, #40960	; 0xa000
   13084:	beq	13100 <__assert_fail@plt+0x1d74>
   13088:	cmp	r3, #32768	; 0x8000
   1308c:	movne	r0, #3
   13090:	moveq	r0, #8
   13094:	add	sp, sp, #8
   13098:	ldrd	r4, [sp]
   1309c:	ldr	r6, [sp, #8]
   130a0:	add	sp, sp, #12
   130a4:	pop	{pc}		; (ldr pc, [sp], #4)
   130a8:	bl	1123c <__errno_location@plt>
   130ac:	ldr	r3, [r0]
   130b0:	str	r3, [r4, #32]
   130b4:	b	13034 <__assert_fail@plt+0x1ca8>
   130b8:	ldrb	r3, [r4, #168]	; 0xa8
   130bc:	cmp	r3, #46	; 0x2e
   130c0:	movne	r0, #1
   130c4:	bne	13094 <__assert_fail@plt+0x1d08>
   130c8:	ldrb	r3, [r4, #169]	; 0xa9
   130cc:	cmp	r3, #0
   130d0:	beq	130ec <__assert_fail@plt+0x1d60>
   130d4:	ldr	r3, [r4, #168]	; 0xa8
   130d8:	bic	r3, r3, #-16777216	; 0xff000000
   130dc:	bic	r3, r3, #255	; 0xff
   130e0:	cmp	r3, #11776	; 0x2e00
   130e4:	movne	r0, #1
   130e8:	bne	13094 <__assert_fail@plt+0x1d08>
   130ec:	ldr	r3, [r4, #48]	; 0x30
   130f0:	cmp	r3, #0
   130f4:	moveq	r0, #1
   130f8:	movne	r0, #5
   130fc:	b	13094 <__assert_fail@plt+0x1d08>
   13100:	mov	r0, #12
   13104:	b	13094 <__assert_fail@plt+0x1d08>
   13108:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1310c:	strd	r6, [sp, #8]
   13110:	str	r8, [sp, #16]
   13114:	str	lr, [sp, #20]
   13118:	mov	r6, r0
   1311c:	mov	r4, r1
   13120:	mov	r5, r2
   13124:	ldr	r7, [r0, #44]	; 0x2c
   13128:	ldr	r3, [r0, #40]	; 0x28
   1312c:	cmp	r3, r2
   13130:	bcs	1315c <__assert_fail@plt+0x1dd0>
   13134:	add	r1, r2, #40	; 0x28
   13138:	str	r1, [r0, #40]	; 0x28
   1313c:	cmn	r1, #-1073741823	; 0xc0000001
   13140:	bhi	131dc <__assert_fail@plt+0x1e50>
   13144:	lsl	r1, r1, #2
   13148:	ldr	r0, [r0, #8]
   1314c:	bl	19da4 <__assert_fail@plt+0x8a18>
   13150:	cmp	r0, #0
   13154:	strne	r0, [r6, #8]
   13158:	beq	131dc <__assert_fail@plt+0x1e50>
   1315c:	ldr	r3, [r6, #8]
   13160:	cmp	r4, #0
   13164:	beq	13178 <__assert_fail@plt+0x1dec>
   13168:	str	r4, [r3], #4
   1316c:	ldr	r4, [r4, #8]
   13170:	cmp	r4, #0
   13174:	bne	13168 <__assert_fail@plt+0x1ddc>
   13178:	mov	r3, r7
   1317c:	mov	r2, #4
   13180:	mov	r1, r5
   13184:	ldr	r0, [r6, #8]
   13188:	bl	11308 <qsort@plt>
   1318c:	ldr	lr, [r6, #8]
   13190:	ldr	r0, [lr]
   13194:	subs	r3, r5, #1
   13198:	beq	131bc <__assert_fail@plt+0x1e30>
   1319c:	mov	r2, lr
   131a0:	ldr	r1, [r2]
   131a4:	ldr	ip, [r2, #4]!
   131a8:	str	ip, [r1, #8]
   131ac:	subs	r3, r3, #1
   131b0:	bne	131a0 <__assert_fail@plt+0x1e14>
   131b4:	sub	r5, r5, #-1073741823	; 0xc0000001
   131b8:	add	lr, lr, r5, lsl #2
   131bc:	ldr	r3, [lr]
   131c0:	mov	r2, #0
   131c4:	str	r2, [r3, #8]
   131c8:	ldrd	r4, [sp]
   131cc:	ldrd	r6, [sp, #8]
   131d0:	ldr	r8, [sp, #16]
   131d4:	add	sp, sp, #20
   131d8:	pop	{pc}		; (ldr pc, [sp], #4)
   131dc:	ldr	r0, [r6, #8]
   131e0:	bl	12dbc <__assert_fail@plt+0x1a30>
   131e4:	mov	r3, #0
   131e8:	str	r3, [r6, #8]
   131ec:	str	r3, [r6, #40]	; 0x28
   131f0:	mov	r0, r4
   131f4:	b	131c8 <__assert_fail@plt+0x1e3c>
   131f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   131fc:	strd	r6, [sp, #8]
   13200:	str	r8, [sp, #16]
   13204:	str	lr, [sp, #20]
   13208:	mov	r6, r0
   1320c:	mov	r7, r1
   13210:	mov	r5, r2
   13214:	add	r0, r2, #176	; 0xb0
   13218:	bic	r0, r0, #7
   1321c:	bl	19d68 <__assert_fail@plt+0x89dc>
   13220:	subs	r4, r0, #0
   13224:	beq	13270 <__assert_fail@plt+0x1ee4>
   13228:	mov	r2, r5
   1322c:	mov	r1, r7
   13230:	add	r0, r4, #168	; 0xa8
   13234:	bl	110c8 <memcpy@plt>
   13238:	add	r2, r4, r5
   1323c:	mov	r3, #0
   13240:	strb	r3, [r2, #168]	; 0xa8
   13244:	str	r5, [r4, #52]	; 0x34
   13248:	str	r6, [r4, #44]	; 0x2c
   1324c:	ldr	r2, [r6, #24]
   13250:	str	r2, [r4, #28]
   13254:	str	r3, [r4, #32]
   13258:	str	r3, [r4, #12]
   1325c:	strh	r3, [r4, #58]	; 0x3a
   13260:	mov	r2, #3
   13264:	strh	r2, [r4, #60]	; 0x3c
   13268:	str	r3, [r4, #16]
   1326c:	str	r3, [r4, #20]
   13270:	mov	r0, r4
   13274:	ldrd	r4, [sp]
   13278:	ldrd	r6, [sp, #8]
   1327c:	ldr	r8, [sp, #16]
   13280:	add	sp, sp, #20
   13284:	pop	{pc}		; (ldr pc, [sp], #4)
   13288:	str	r4, [sp, #-8]!
   1328c:	str	lr, [sp, #4]
   13290:	sub	sp, sp, #8
   13294:	mov	r4, r0
   13298:	ldr	r3, [r0, #48]	; 0x30
   1329c:	movw	r2, #258	; 0x102
   132a0:	tst	r2, r3
   132a4:	beq	132ec <__assert_fail@plt+0x1f60>
   132a8:	movw	r3, #11708	; 0x2dbc
   132ac:	movt	r3, #1
   132b0:	str	r3, [sp]
   132b4:	movw	r3, #11804	; 0x2e1c
   132b8:	movt	r3, #1
   132bc:	movw	r2, #11872	; 0x2e60
   132c0:	movt	r2, #1
   132c4:	mov	r1, #0
   132c8:	mov	r0, #31
   132cc:	bl	15b84 <__assert_fail@plt+0x47f8>
   132d0:	str	r0, [r4, #56]	; 0x38
   132d4:	adds	r0, r0, #0
   132d8:	movne	r0, #1
   132dc:	add	sp, sp, #8
   132e0:	ldr	r4, [sp]
   132e4:	add	sp, sp, #4
   132e8:	pop	{pc}		; (ldr pc, [sp], #4)
   132ec:	mov	r0, #32
   132f0:	bl	19d68 <__assert_fail@plt+0x89dc>
   132f4:	str	r0, [r4, #56]	; 0x38
   132f8:	cmp	r0, #0
   132fc:	moveq	r0, #0
   13300:	beq	132dc <__assert_fail@plt+0x1f50>
   13304:	bl	19e8c <__assert_fail@plt+0x8b00>
   13308:	mov	r0, #1
   1330c:	b	132dc <__assert_fail@plt+0x1f50>
   13310:	str	r4, [sp, #-8]!
   13314:	str	lr, [sp, #4]
   13318:	mov	ip, r1
   1331c:	ldr	r3, [r0, #48]	; 0x30
   13320:	lsl	r2, r3, #11
   13324:	and	r2, r2, #32768	; 0x8000
   13328:	orr	r2, r2, #540672	; 0x84000
   1332c:	orr	r2, r2, #2304	; 0x900
   13330:	tst	r3, #512	; 0x200
   13334:	beq	1334c <__assert_fail@plt+0x1fc0>
   13338:	ldr	r0, [r0, #32]
   1333c:	bl	16408 <__assert_fail@plt+0x507c>
   13340:	ldr	r4, [sp]
   13344:	add	sp, sp, #4
   13348:	pop	{pc}		; (ldr pc, [sp], #4)
   1334c:	mov	r1, r2
   13350:	mov	r0, ip
   13354:	bl	1a2c0 <__assert_fail@plt+0x8f34>
   13358:	b	13340 <__assert_fail@plt+0x1fb4>
   1335c:	strd	r4, [sp, #-16]!
   13360:	str	r6, [sp, #8]
   13364:	str	lr, [sp, #12]
   13368:	subs	r4, r0, #0
   1336c:	bne	13398 <__assert_fail@plt+0x200c>
   13370:	ldrd	r4, [sp]
   13374:	ldr	r6, [sp, #8]
   13378:	add	sp, sp, #12
   1337c:	pop	{pc}		; (ldr pc, [sp], #4)
   13380:	bl	11368 <closedir@plt>
   13384:	mov	r0, r4
   13388:	bl	12dbc <__assert_fail@plt+0x1a30>
   1338c:	mov	r4, r5
   13390:	cmp	r5, #0
   13394:	beq	13370 <__assert_fail@plt+0x1fe4>
   13398:	ldr	r5, [r4, #8]
   1339c:	ldr	r0, [r4, #12]
   133a0:	cmp	r0, #0
   133a4:	bne	13380 <__assert_fail@plt+0x1ff4>
   133a8:	b	13384 <__assert_fail@plt+0x1ff8>
   133ac:	str	r4, [sp, #-8]!
   133b0:	str	lr, [sp, #4]
   133b4:	ldr	r3, [r0, #48]	; 0x30
   133b8:	movw	r2, #258	; 0x102
   133bc:	tst	r2, r3
   133c0:	beq	133e0 <__assert_fail@plt+0x2054>
   133c4:	ldr	r0, [r0, #56]	; 0x38
   133c8:	cmp	r0, #0
   133cc:	beq	133d4 <__assert_fail@plt+0x2048>
   133d0:	bl	15d50 <__assert_fail@plt+0x49c4>
   133d4:	ldr	r4, [sp]
   133d8:	add	sp, sp, #4
   133dc:	pop	{pc}		; (ldr pc, [sp], #4)
   133e0:	ldr	r0, [r0, #56]	; 0x38
   133e4:	bl	12dbc <__assert_fail@plt+0x1a30>
   133e8:	b	133d4 <__assert_fail@plt+0x2048>
   133ec:	str	r4, [sp, #-8]!
   133f0:	str	lr, [sp, #4]
   133f4:	mov	r4, r0
   133f8:	mov	r0, r4
   133fc:	bl	162d8 <__assert_fail@plt+0x4f4c>
   13400:	cmp	r0, #0
   13404:	bne	13420 <__assert_fail@plt+0x2094>
   13408:	mov	r0, r4
   1340c:	bl	1632c <__assert_fail@plt+0x4fa0>
   13410:	cmp	r0, #0
   13414:	blt	133f8 <__assert_fail@plt+0x206c>
   13418:	bl	11350 <close@plt>
   1341c:	b	133f8 <__assert_fail@plt+0x206c>
   13420:	ldr	r4, [sp]
   13424:	add	sp, sp, #4
   13428:	pop	{pc}		; (ldr pc, [sp], #4)
   1342c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13430:	strd	r6, [sp, #8]
   13434:	str	lr, [sp, #16]
   13438:	sub	sp, sp, #116	; 0x74
   1343c:	ldr	r7, [r0, #44]	; 0x2c
   13440:	ldr	r3, [r7, #48]	; 0x30
   13444:	ands	r3, r3, #512	; 0x200
   13448:	beq	13538 <__assert_fail@plt+0x21ac>
   1344c:	mov	r6, r1
   13450:	mov	r5, r0
   13454:	ldr	r4, [r7, #52]	; 0x34
   13458:	cmp	r4, #0
   1345c:	beq	13484 <__assert_fail@plt+0x20f8>
   13460:	ldrd	r2, [r5, #64]	; 0x40
   13464:	strd	r2, [sp, #8]
   13468:	add	r1, sp, #8
   1346c:	mov	r0, r4
   13470:	bl	15890 <__assert_fail@plt+0x4504>
   13474:	cmp	r0, #0
   13478:	beq	134bc <__assert_fail@plt+0x2130>
   1347c:	ldr	r3, [r0, #8]
   13480:	b	13538 <__assert_fail@plt+0x21ac>
   13484:	movw	r3, #11708	; 0x2dbc
   13488:	movt	r3, #1
   1348c:	str	r3, [sp]
   13490:	movw	r3, #11952	; 0x2eb0
   13494:	movt	r3, #1
   13498:	movw	r2, #11912	; 0x2e88
   1349c:	movt	r2, #1
   134a0:	mov	r1, #0
   134a4:	mov	r0, #13
   134a8:	bl	15b84 <__assert_fail@plt+0x47f8>
   134ac:	mov	r4, r0
   134b0:	str	r0, [r7, #52]	; 0x34
   134b4:	cmp	r0, #0
   134b8:	bne	13460 <__assert_fail@plt+0x20d4>
   134bc:	cmp	r6, #0
   134c0:	blt	13534 <__assert_fail@plt+0x21a8>
   134c4:	add	r1, sp, #24
   134c8:	mov	r0, r6
   134cc:	bl	1102c <fstatfs64@plt>
   134d0:	cmp	r0, #0
   134d4:	bne	13550 <__assert_fail@plt+0x21c4>
   134d8:	cmp	r4, #0
   134dc:	beq	1351c <__assert_fail@plt+0x2190>
   134e0:	mov	r0, #16
   134e4:	bl	19d68 <__assert_fail@plt+0x89dc>
   134e8:	subs	r6, r0, #0
   134ec:	beq	1351c <__assert_fail@plt+0x2190>
   134f0:	ldrd	r2, [r5, #64]	; 0x40
   134f4:	strd	r2, [r6]
   134f8:	ldr	r3, [sp, #24]
   134fc:	str	r3, [r6, #8]
   13500:	mov	r1, r6
   13504:	mov	r0, r4
   13508:	bl	16138 <__assert_fail@plt+0x4dac>
   1350c:	cmp	r0, #0
   13510:	beq	13528 <__assert_fail@plt+0x219c>
   13514:	cmp	r6, r0
   13518:	bne	13524 <__assert_fail@plt+0x2198>
   1351c:	ldr	r3, [sp, #24]
   13520:	b	13538 <__assert_fail@plt+0x21ac>
   13524:	bl	11344 <abort@plt>
   13528:	mov	r0, r6
   1352c:	bl	12dbc <__assert_fail@plt+0x1a30>
   13530:	b	1351c <__assert_fail@plt+0x2190>
   13534:	mov	r3, #0
   13538:	mov	r0, r3
   1353c:	add	sp, sp, #116	; 0x74
   13540:	ldrd	r4, [sp]
   13544:	ldrd	r6, [sp, #8]
   13548:	add	sp, sp, #16
   1354c:	pop	{pc}		; (ldr pc, [sp], #4)
   13550:	mov	r3, #0
   13554:	b	13538 <__assert_fail@plt+0x21ac>
   13558:	strd	r4, [sp, #-16]!
   1355c:	str	r6, [sp, #8]
   13560:	str	lr, [sp, #12]
   13564:	mov	r5, r0
   13568:	mov	r4, r1
   1356c:	ldr	r3, [r0, #48]	; 0x30
   13570:	movw	r2, #258	; 0x102
   13574:	tst	r2, r3
   13578:	beq	135ec <__assert_fail@plt+0x2260>
   1357c:	mov	r0, #24
   13580:	bl	19d68 <__assert_fail@plt+0x89dc>
   13584:	subs	r6, r0, #0
   13588:	moveq	r0, #0
   1358c:	beq	13610 <__assert_fail@plt+0x2284>
   13590:	ldrd	r2, [r4, #64]	; 0x40
   13594:	strd	r2, [r6]
   13598:	ldrd	r2, [r4, #160]	; 0xa0
   1359c:	strd	r2, [r6, #8]
   135a0:	str	r4, [r6, #16]
   135a4:	mov	r1, r6
   135a8:	ldr	r0, [r5, #56]	; 0x38
   135ac:	bl	16138 <__assert_fail@plt+0x4dac>
   135b0:	mov	r5, r0
   135b4:	cmp	r6, r0
   135b8:	moveq	r0, #1
   135bc:	beq	13610 <__assert_fail@plt+0x2284>
   135c0:	mov	r0, r6
   135c4:	bl	12dbc <__assert_fail@plt+0x1a30>
   135c8:	cmp	r5, #0
   135cc:	moveq	r0, #0
   135d0:	beq	13610 <__assert_fail@plt+0x2284>
   135d4:	ldr	r3, [r5, #16]
   135d8:	str	r3, [r4]
   135dc:	mov	r3, #2
   135e0:	strh	r3, [r4, #56]	; 0x38
   135e4:	mov	r0, #1
   135e8:	b	13610 <__assert_fail@plt+0x2284>
   135ec:	add	r1, r1, #64	; 0x40
   135f0:	ldr	r0, [r0, #56]	; 0x38
   135f4:	bl	19ea8 <__assert_fail@plt+0x8b1c>
   135f8:	cmp	r0, #0
   135fc:	moveq	r0, #1
   13600:	beq	13610 <__assert_fail@plt+0x2284>
   13604:	str	r4, [r4]
   13608:	mov	r3, #2
   1360c:	strh	r3, [r4, #56]	; 0x38
   13610:	ldrd	r4, [sp]
   13614:	ldr	r6, [sp, #8]
   13618:	add	sp, sp, #12
   1361c:	pop	{pc}		; (ldr pc, [sp], #4)
   13620:	strd	r4, [sp, #-16]!
   13624:	str	r6, [sp, #8]
   13628:	str	lr, [sp, #12]
   1362c:	mov	r5, r1
   13630:	ldr	r1, [r0, #32]
   13634:	cmp	r1, r5
   13638:	movne	r3, #0
   1363c:	moveq	r3, #1
   13640:	cmn	r1, #100	; 0x64
   13644:	moveq	r3, #0
   13648:	cmp	r3, #0
   1364c:	bne	13690 <__assert_fail@plt+0x2304>
   13650:	mov	r4, r0
   13654:	cmp	r2, #0
   13658:	bne	13694 <__assert_fail@plt+0x2308>
   1365c:	ldr	r3, [r0, #48]	; 0x30
   13660:	eor	r3, r3, #4
   13664:	ubfx	r3, r3, #2, #1
   13668:	cmp	r1, #0
   1366c:	movlt	r3, #0
   13670:	andge	r3, r3, #1
   13674:	cmp	r3, #0
   13678:	bne	136ac <__assert_fail@plt+0x2320>
   1367c:	str	r5, [r4, #32]
   13680:	ldrd	r4, [sp]
   13684:	ldr	r6, [sp, #8]
   13688:	add	sp, sp, #12
   1368c:	pop	{pc}		; (ldr pc, [sp], #4)
   13690:	bl	11344 <abort@plt>
   13694:	add	r0, r0, #60	; 0x3c
   13698:	bl	162e0 <__assert_fail@plt+0x4f54>
   1369c:	cmp	r0, #0
   136a0:	blt	1367c <__assert_fail@plt+0x22f0>
   136a4:	bl	11350 <close@plt>
   136a8:	b	1367c <__assert_fail@plt+0x22f0>
   136ac:	mov	r0, r1
   136b0:	bl	11350 <close@plt>
   136b4:	b	1367c <__assert_fail@plt+0x22f0>
   136b8:	strd	r4, [sp, #-16]!
   136bc:	str	r6, [sp, #8]
   136c0:	str	lr, [sp, #12]
   136c4:	mov	r4, r0
   136c8:	ldr	r3, [r0, #48]	; 0x30
   136cc:	ands	r5, r3, #4
   136d0:	movne	r5, #0
   136d4:	bne	136ec <__assert_fail@plt+0x2360>
   136d8:	tst	r3, #512	; 0x200
   136dc:	beq	13708 <__assert_fail@plt+0x237c>
   136e0:	mov	r2, #1
   136e4:	mvn	r1, #99	; 0x63
   136e8:	bl	13620 <__assert_fail@plt+0x2294>
   136ec:	add	r0, r4, #60	; 0x3c
   136f0:	bl	133ec <__assert_fail@plt+0x2060>
   136f4:	mov	r0, r5
   136f8:	ldrd	r4, [sp]
   136fc:	ldr	r6, [sp, #8]
   13700:	add	sp, sp, #12
   13704:	pop	{pc}		; (ldr pc, [sp], #4)
   13708:	ldr	r0, [r0, #28]
   1370c:	bl	112fc <fchdir@plt>
   13710:	adds	r5, r0, #0
   13714:	movne	r5, #1
   13718:	b	136ec <__assert_fail@plt+0x2360>
   1371c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13720:	strd	r6, [sp, #8]
   13724:	strd	r8, [sp, #16]
   13728:	str	lr, [sp, #24]
   1372c:	sub	sp, sp, #108	; 0x6c
   13730:	mov	r4, r0
   13734:	mov	r7, r1
   13738:	mov	r5, r2
   1373c:	subs	r9, r3, #0
   13740:	beq	1386c <__assert_fail@plt+0x24e0>
   13744:	movw	r1, #47540	; 0xb9b4
   13748:	movt	r1, #1
   1374c:	mov	r0, r9
   13750:	bl	11074 <strcmp@plt>
   13754:	cmp	r0, #0
   13758:	bne	1386c <__assert_fail@plt+0x24e0>
   1375c:	ldr	r3, [r4, #48]	; 0x30
   13760:	tst	r3, #4
   13764:	bne	137ac <__assert_fail@plt+0x2420>
   13768:	cmp	r5, #0
   1376c:	bge	13820 <__assert_fail@plt+0x2494>
   13770:	tst	r3, #512	; 0x200
   13774:	beq	1378c <__assert_fail@plt+0x2400>
   13778:	add	r6, r4, #60	; 0x3c
   1377c:	mov	r0, r6
   13780:	bl	162d8 <__assert_fail@plt+0x4f4c>
   13784:	cmp	r0, #0
   13788:	beq	137d8 <__assert_fail@plt+0x244c>
   1378c:	mov	r8, #1
   13790:	mov	r1, r9
   13794:	mov	r0, r4
   13798:	bl	13310 <__assert_fail@plt+0x1f84>
   1379c:	subs	r6, r0, #0
   137a0:	bge	13888 <__assert_fail@plt+0x24fc>
   137a4:	mvn	r4, #0
   137a8:	b	1390c <__assert_fail@plt+0x2580>
   137ac:	ubfx	r3, r3, #9, #1
   137b0:	cmp	r5, #0
   137b4:	movlt	r3, #0
   137b8:	andge	r3, r3, #1
   137bc:	cmp	r3, #0
   137c0:	moveq	r4, #0
   137c4:	beq	1390c <__assert_fail@plt+0x2580>
   137c8:	mov	r0, r5
   137cc:	bl	11350 <close@plt>
   137d0:	mov	r4, #0
   137d4:	b	1390c <__assert_fail@plt+0x2580>
   137d8:	mov	r0, r6
   137dc:	bl	1632c <__assert_fail@plt+0x4fa0>
   137e0:	subs	r6, r0, #0
   137e4:	blt	1378c <__assert_fail@plt+0x2400>
   137e8:	ldr	r3, [r4, #48]	; 0x30
   137ec:	tst	r3, #2
   137f0:	bne	1382c <__assert_fail@plt+0x24a0>
   137f4:	mov	r5, r6
   137f8:	mov	r8, #1
   137fc:	ldr	r3, [r4, #48]	; 0x30
   13800:	tst	r3, #512	; 0x200
   13804:	bne	13838 <__assert_fail@plt+0x24ac>
   13808:	mov	r0, r6
   1380c:	bl	112fc <fchdir@plt>
   13810:	mov	r4, r0
   13814:	b	13904 <__assert_fail@plt+0x2578>
   13818:	mov	r8, #0
   1381c:	b	13790 <__assert_fail@plt+0x2404>
   13820:	mov	r6, r5
   13824:	mov	r8, #1
   13828:	b	13888 <__assert_fail@plt+0x24fc>
   1382c:	mov	r5, r6
   13830:	mov	r8, #1
   13834:	b	138b4 <__assert_fail@plt+0x2528>
   13838:	eor	r2, r8, #1
   1383c:	mov	r1, r6
   13840:	mov	r0, r4
   13844:	bl	13620 <__assert_fail@plt+0x2294>
   13848:	mov	r4, #0
   1384c:	b	1390c <__assert_fail@plt+0x2580>
   13850:	bl	1123c <__errno_location@plt>
   13854:	mov	r5, r0
   13858:	ldr	r7, [r0]
   1385c:	mov	r0, r6
   13860:	bl	11350 <close@plt>
   13864:	str	r7, [r5]
   13868:	b	1390c <__assert_fail@plt+0x2580>
   1386c:	ldr	r3, [r4, #48]	; 0x30
   13870:	tst	r3, #4
   13874:	bne	137ac <__assert_fail@plt+0x2420>
   13878:	cmp	r5, #0
   1387c:	movge	r6, r5
   13880:	movge	r8, #0
   13884:	blt	13818 <__assert_fail@plt+0x248c>
   13888:	ldr	r3, [r4, #48]	; 0x30
   1388c:	tst	r3, #2
   13890:	bne	138b4 <__assert_fail@plt+0x2528>
   13894:	cmp	r9, #0
   13898:	beq	137fc <__assert_fail@plt+0x2470>
   1389c:	movw	r1, #47540	; 0xb9b4
   138a0:	movt	r1, #1
   138a4:	mov	r0, r9
   138a8:	bl	11074 <strcmp@plt>
   138ac:	cmp	r0, #0
   138b0:	bne	137fc <__assert_fail@plt+0x2470>
   138b4:	mov	r2, sp
   138b8:	mov	r1, r6
   138bc:	mov	r0, #3
   138c0:	bl	11140 <__fxstat64@plt>
   138c4:	cmp	r0, #0
   138c8:	bne	13900 <__assert_fail@plt+0x2574>
   138cc:	ldrd	r0, [r7, #64]	; 0x40
   138d0:	ldrd	r2, [sp]
   138d4:	cmp	r1, r3
   138d8:	cmpeq	r0, r2
   138dc:	bne	138f4 <__assert_fail@plt+0x2568>
   138e0:	ldrd	r0, [r7, #160]	; 0xa0
   138e4:	ldrd	r2, [sp, #96]	; 0x60
   138e8:	cmp	r1, r3
   138ec:	cmpeq	r0, r2
   138f0:	beq	137fc <__assert_fail@plt+0x2470>
   138f4:	bl	1123c <__errno_location@plt>
   138f8:	mov	r3, #2
   138fc:	str	r3, [r0]
   13900:	mvn	r4, #0
   13904:	cmp	r5, #0
   13908:	blt	13850 <__assert_fail@plt+0x24c4>
   1390c:	mov	r0, r4
   13910:	add	sp, sp, #108	; 0x6c
   13914:	ldrd	r4, [sp]
   13918:	ldrd	r6, [sp, #8]
   1391c:	ldrd	r8, [sp, #16]
   13920:	add	sp, sp, #24
   13924:	pop	{pc}		; (ldr pc, [sp], #4)
   13928:	strd	r4, [sp, #-12]!
   1392c:	str	lr, [sp, #8]
   13930:	sub	sp, sp, #28
   13934:	ldr	r3, [r0, #48]	; 0x30
   13938:	movw	r2, #258	; 0x102
   1393c:	tst	r2, r3
   13940:	bne	139ac <__assert_fail@plt+0x2620>
   13944:	ldr	ip, [r1, #4]
   13948:	cmp	ip, #0
   1394c:	beq	139d4 <__assert_fail@plt+0x2648>
   13950:	ldr	r3, [ip, #48]	; 0x30
   13954:	cmp	r3, #0
   13958:	blt	139d4 <__assert_fail@plt+0x2648>
   1395c:	ldr	lr, [r0, #56]	; 0x38
   13960:	ldrd	r2, [lr, #16]
   13964:	orrs	r3, r2, r3
   13968:	beq	139e8 <__assert_fail@plt+0x265c>
   1396c:	ldrd	r4, [lr]
   13970:	ldrd	r2, [r1, #160]	; 0xa0
   13974:	cmp	r5, r3
   13978:	cmpeq	r4, r2
   1397c:	bne	139d4 <__assert_fail@plt+0x2648>
   13980:	ldrd	r2, [lr, #8]
   13984:	ldrd	r4, [r1, #64]	; 0x40
   13988:	cmp	r3, r5
   1398c:	cmpeq	r2, r4
   13990:	bne	139d4 <__assert_fail@plt+0x2648>
   13994:	ldrd	r2, [ip, #64]	; 0x40
   13998:	strd	r2, [lr, #8]
   1399c:	ldr	r3, [r0, #56]	; 0x38
   139a0:	ldrd	r0, [ip, #160]	; 0xa0
   139a4:	strd	r0, [r3]
   139a8:	b	139d4 <__assert_fail@plt+0x2648>
   139ac:	ldrd	r2, [r1, #64]	; 0x40
   139b0:	strd	r2, [sp]
   139b4:	ldrd	r2, [r1, #160]	; 0xa0
   139b8:	strd	r2, [sp, #8]
   139bc:	mov	r1, sp
   139c0:	ldr	r0, [r0, #56]	; 0x38
   139c4:	bl	16178 <__assert_fail@plt+0x4dec>
   139c8:	cmp	r0, #0
   139cc:	beq	139e4 <__assert_fail@plt+0x2658>
   139d0:	bl	12dbc <__assert_fail@plt+0x1a30>
   139d4:	add	sp, sp, #28
   139d8:	ldrd	r4, [sp]
   139dc:	add	sp, sp, #8
   139e0:	pop	{pc}		; (ldr pc, [sp], #4)
   139e4:	bl	11344 <abort@plt>
   139e8:	bl	11344 <abort@plt>
   139ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   139f0:	strd	r6, [sp, #8]
   139f4:	strd	r8, [sp, #16]
   139f8:	strd	sl, [sp, #24]
   139fc:	str	lr, [sp, #32]
   13a00:	sub	sp, sp, #68	; 0x44
   13a04:	mov	r5, r0
   13a08:	str	r1, [sp, #32]
   13a0c:	ldr	r9, [r0]
   13a10:	ldr	r0, [r9, #12]
   13a14:	str	r0, [sp, #40]	; 0x28
   13a18:	cmp	r0, #0
   13a1c:	beq	13b2c <__assert_fail@plt+0x27a0>
   13a20:	bl	112f0 <dirfd@plt>
   13a24:	str	r0, [sp, #60]	; 0x3c
   13a28:	cmp	r0, #0
   13a2c:	blt	13ae8 <__assert_fail@plt+0x275c>
   13a30:	ldr	r2, [r5, #44]	; 0x2c
   13a34:	movw	r3, #34464	; 0x86a0
   13a38:	movt	r3, #1
   13a3c:	cmp	r2, #0
   13a40:	mvnne	r3, #0
   13a44:	str	r3, [sp, #16]
   13a48:	mov	r3, #1
   13a4c:	str	r3, [sp, #52]	; 0x34
   13a50:	ldr	r3, [r9, #40]	; 0x28
   13a54:	sub	r1, r3, #1
   13a58:	ldr	r2, [r9, #28]
   13a5c:	ldrb	r2, [r2, r1]
   13a60:	cmp	r2, #47	; 0x2f
   13a64:	movne	r1, r3
   13a68:	str	r1, [sp, #28]
   13a6c:	ldr	r3, [r5, #48]	; 0x30
   13a70:	tst	r3, #4
   13a74:	moveq	r3, #0
   13a78:	streq	r3, [sp, #20]
   13a7c:	beq	13a98 <__assert_fail@plt+0x270c>
   13a80:	ldr	r3, [r5, #24]
   13a84:	add	r2, r3, r1
   13a88:	add	r2, r2, #1
   13a8c:	str	r2, [sp, #20]
   13a90:	mov	r2, #47	; 0x2f
   13a94:	strb	r2, [r3, r1]
   13a98:	ldr	r3, [sp, #28]
   13a9c:	add	sl, r3, #1
   13aa0:	ldr	fp, [r5, #36]	; 0x24
   13aa4:	sub	fp, fp, sl
   13aa8:	ldr	r3, [r9, #48]	; 0x30
   13aac:	add	r3, r3, #1
   13ab0:	str	r3, [sp, #12]
   13ab4:	mov	r3, #0
   13ab8:	str	r3, [sp, #36]	; 0x24
   13abc:	str	r3, [sp, #24]
   13ac0:	str	r3, [sp]
   13ac4:	mov	r8, r3
   13ac8:	str	r3, [sp, #4]
   13acc:	movw	r3, #6548	; 0x1994
   13ad0:	movt	r3, #258	; 0x102
   13ad4:	str	r3, [sp, #44]	; 0x2c
   13ad8:	movw	r3, #19778	; 0x4d42
   13adc:	movt	r3, #65363	; 0xff53
   13ae0:	str	r3, [sp, #48]	; 0x30
   13ae4:	b	140c4 <__assert_fail@plt+0x2d38>
   13ae8:	ldr	r0, [r9, #12]
   13aec:	bl	11368 <closedir@plt>
   13af0:	mov	r3, #0
   13af4:	str	r3, [r9, #12]
   13af8:	ldr	r3, [sp, #32]
   13afc:	cmp	r3, #3
   13b00:	movne	r3, #0
   13b04:	strne	r3, [sp, #4]
   13b08:	bne	13f74 <__assert_fail@plt+0x2be8>
   13b0c:	mov	r3, #4
   13b10:	strh	r3, [r9, #56]	; 0x38
   13b14:	bl	1123c <__errno_location@plt>
   13b18:	ldr	r3, [r0]
   13b1c:	str	r3, [r9, #32]
   13b20:	mov	r3, #0
   13b24:	str	r3, [sp, #4]
   13b28:	b	13f74 <__assert_fail@plt+0x2be8>
   13b2c:	ldr	r3, [r5, #48]	; 0x30
   13b30:	and	r2, r3, #516	; 0x204
   13b34:	cmp	r2, #512	; 0x200
   13b38:	ldreq	r0, [r5, #32]
   13b3c:	mvnne	r0, #99	; 0x63
   13b40:	ldr	r1, [r9, #24]
   13b44:	ands	r2, r3, #16
   13b48:	beq	13b64 <__assert_fail@plt+0x27d8>
   13b4c:	tst	r3, #1
   13b50:	moveq	r2, #32768	; 0x8000
   13b54:	beq	13b64 <__assert_fail@plt+0x27d8>
   13b58:	ldr	r2, [r9, #48]	; 0x30
   13b5c:	cmp	r2, #0
   13b60:	movne	r2, #32768	; 0x8000
   13b64:	add	r3, sp, #60	; 0x3c
   13b68:	bl	16444 <__assert_fail@plt+0x50b8>
   13b6c:	str	r0, [sp, #4]
   13b70:	str	r0, [r9, #12]
   13b74:	cmp	r0, #0
   13b78:	beq	13c4c <__assert_fail@plt+0x28c0>
   13b7c:	ldrh	r3, [r9, #56]	; 0x38
   13b80:	cmp	r3, #11
   13b84:	beq	13c70 <__assert_fail@plt+0x28e4>
   13b88:	ldr	r3, [r5, #48]	; 0x30
   13b8c:	tst	r3, #256	; 0x100
   13b90:	bne	13c88 <__assert_fail@plt+0x28fc>
   13b94:	ldr	r2, [r5, #44]	; 0x2c
   13b98:	movw	r3, #34464	; 0x86a0
   13b9c:	movt	r3, #1
   13ba0:	cmp	r2, #0
   13ba4:	mvnne	r3, #0
   13ba8:	str	r3, [sp, #16]
   13bac:	ldr	r3, [sp, #32]
   13bb0:	cmp	r3, #2
   13bb4:	beq	13dac <__assert_fail@plt+0x2a20>
   13bb8:	ldr	r3, [r5, #48]	; 0x30
   13bbc:	and	r3, r3, #56	; 0x38
   13bc0:	cmp	r3, #24
   13bc4:	beq	13cd0 <__assert_fail@plt+0x2944>
   13bc8:	ldr	r3, [sp, #32]
   13bcc:	cmp	r3, #3
   13bd0:	movne	r4, #0
   13bd4:	moveq	r4, #1
   13bd8:	mov	r6, #1
   13bdc:	ldr	r3, [r5, #48]	; 0x30
   13be0:	tst	r3, #512	; 0x200
   13be4:	bne	13d68 <__assert_fail@plt+0x29dc>
   13be8:	ldr	r2, [sp, #60]	; 0x3c
   13bec:	cmp	r2, #0
   13bf0:	bge	13d80 <__assert_fail@plt+0x29f4>
   13bf4:	tst	r4, r6
   13bf8:	beq	13c08 <__assert_fail@plt+0x287c>
   13bfc:	bl	1123c <__errno_location@plt>
   13c00:	ldr	r3, [r0]
   13c04:	str	r3, [r9, #32]
   13c08:	ldrh	r3, [r9, #58]	; 0x3a
   13c0c:	orr	r3, r3, #1
   13c10:	strh	r3, [r9, #58]	; 0x3a
   13c14:	ldr	r0, [r9, #12]
   13c18:	bl	11368 <closedir@plt>
   13c1c:	mov	r3, #0
   13c20:	str	r3, [r9, #12]
   13c24:	ldr	r3, [r5, #48]	; 0x30
   13c28:	tst	r3, #512	; 0x200
   13c2c:	beq	13c3c <__assert_fail@plt+0x28b0>
   13c30:	ldr	r0, [sp, #60]	; 0x3c
   13c34:	cmp	r0, #0
   13c38:	bge	13da4 <__assert_fail@plt+0x2a18>
   13c3c:	mov	r3, #0
   13c40:	str	r3, [r9, #12]
   13c44:	str	r3, [sp, #52]	; 0x34
   13c48:	b	13a50 <__assert_fail@plt+0x26c4>
   13c4c:	ldr	r3, [sp, #32]
   13c50:	cmp	r3, #3
   13c54:	bne	13f74 <__assert_fail@plt+0x2be8>
   13c58:	mov	r3, #4
   13c5c:	strh	r3, [r9, #56]	; 0x38
   13c60:	bl	1123c <__errno_location@plt>
   13c64:	ldr	r3, [r0]
   13c68:	str	r3, [r9, #32]
   13c6c:	b	13f74 <__assert_fail@plt+0x2be8>
   13c70:	mov	r2, #0
   13c74:	mov	r1, r9
   13c78:	mov	r0, r5
   13c7c:	bl	12f98 <__assert_fail@plt+0x1c0c>
   13c80:	strh	r0, [r9, #56]	; 0x38
   13c84:	b	13b94 <__assert_fail@plt+0x2808>
   13c88:	mov	r1, r9
   13c8c:	mov	r0, r5
   13c90:	bl	13928 <__assert_fail@plt+0x259c>
   13c94:	mov	r2, #0
   13c98:	mov	r1, r9
   13c9c:	mov	r0, r5
   13ca0:	bl	12f98 <__assert_fail@plt+0x1c0c>
   13ca4:	mov	r1, r9
   13ca8:	mov	r0, r5
   13cac:	bl	13558 <__assert_fail@plt+0x21cc>
   13cb0:	cmp	r0, #0
   13cb4:	bne	13b94 <__assert_fail@plt+0x2808>
   13cb8:	bl	1123c <__errno_location@plt>
   13cbc:	mov	r3, #12
   13cc0:	str	r3, [r0]
   13cc4:	ldr	r3, [sp, #40]	; 0x28
   13cc8:	str	r3, [sp, #4]
   13ccc:	b	13f74 <__assert_fail@plt+0x2be8>
   13cd0:	ldr	r3, [r9, #84]	; 0x54
   13cd4:	cmp	r3, #2
   13cd8:	bne	13bc8 <__assert_fail@plt+0x283c>
   13cdc:	ldr	r1, [sp, #60]	; 0x3c
   13ce0:	mov	r0, r9
   13ce4:	bl	1342c <__assert_fail@plt+0x20a0>
   13ce8:	movw	r3, #26985	; 0x6969
   13cec:	cmp	r0, r3
   13cf0:	beq	13d50 <__assert_fail@plt+0x29c4>
   13cf4:	bgt	13d34 <__assert_fail@plt+0x29a8>
   13cf8:	movw	r3, #19778	; 0x4d42
   13cfc:	movt	r3, #65363	; 0xff53
   13d00:	cmp	r0, r3
   13d04:	beq	13d50 <__assert_fail@plt+0x29c4>
   13d08:	cmp	r0, #0
   13d0c:	beq	13d50 <__assert_fail@plt+0x29c4>
   13d10:	ldr	r3, [sp, #32]
   13d14:	cmp	r3, #3
   13d18:	moveq	r4, #1
   13d1c:	movne	r4, #0
   13d20:	movne	r3, #0
   13d24:	strne	r3, [sp, #52]	; 0x34
   13d28:	bne	13a50 <__assert_fail@plt+0x26c4>
   13d2c:	mov	r6, #0
   13d30:	b	13bdc <__assert_fail@plt+0x2850>
   13d34:	movw	r3, #40864	; 0x9fa0
   13d38:	cmp	r0, r3
   13d3c:	beq	13d50 <__assert_fail@plt+0x29c4>
   13d40:	movw	r3, #16719	; 0x414f
   13d44:	movt	r3, #21318	; 0x5346
   13d48:	cmp	r0, r3
   13d4c:	bne	13d10 <__assert_fail@plt+0x2984>
   13d50:	ldr	r3, [sp, #32]
   13d54:	cmp	r3, #3
   13d58:	movne	r4, #0
   13d5c:	moveq	r4, #1
   13d60:	mov	r6, #1
   13d64:	b	13bdc <__assert_fail@plt+0x2850>
   13d68:	mov	r2, #3
   13d6c:	movw	r1, #1030	; 0x406
   13d70:	ldr	r0, [sp, #60]	; 0x3c
   13d74:	bl	1a054 <__assert_fail@plt+0x8cc8>
   13d78:	str	r0, [sp, #60]	; 0x3c
   13d7c:	b	13be8 <__assert_fail@plt+0x285c>
   13d80:	mov	r3, #0
   13d84:	mov	r1, r9
   13d88:	mov	r0, r5
   13d8c:	bl	1371c <__assert_fail@plt+0x2390>
   13d90:	cmp	r0, #0
   13d94:	moveq	r3, #1
   13d98:	streq	r3, [sp, #52]	; 0x34
   13d9c:	beq	13a50 <__assert_fail@plt+0x26c4>
   13da0:	b	13bf4 <__assert_fail@plt+0x2868>
   13da4:	bl	11350 <close@plt>
   13da8:	b	13c3c <__assert_fail@plt+0x28b0>
   13dac:	mov	r3, #0
   13db0:	str	r3, [sp, #52]	; 0x34
   13db4:	b	13a50 <__assert_fail@plt+0x26c4>
   13db8:	ldr	r3, [sp, #8]
   13dbc:	ldr	r3, [r3]
   13dc0:	cmp	r3, #0
   13dc4:	beq	13de4 <__assert_fail@plt+0x2a58>
   13dc8:	str	r3, [r9, #32]
   13dcc:	ldr	r3, [sp, #40]	; 0x28
   13dd0:	orr	r3, r3, r8
   13dd4:	cmp	r3, #0
   13dd8:	movne	r3, #7
   13ddc:	moveq	r3, #4
   13de0:	strh	r3, [r9, #56]	; 0x38
   13de4:	ldr	r0, [r9, #12]
   13de8:	cmp	r0, #0
   13dec:	beq	13dfc <__assert_fail@plt+0x2a70>
   13df0:	bl	11368 <closedir@plt>
   13df4:	mov	r3, #0
   13df8:	str	r3, [r9, #12]
   13dfc:	ldr	r3, [sp, #24]
   13e00:	cmp	r3, #0
   13e04:	bne	142c4 <__assert_fail@plt+0x2f38>
   13e08:	ldr	r3, [r5, #48]	; 0x30
   13e0c:	tst	r3, #4
   13e10:	beq	13e3c <__assert_fail@plt+0x2ab0>
   13e14:	ldr	r3, [r5, #36]	; 0x24
   13e18:	cmp	r8, #0
   13e1c:	cmpne	r3, sl
   13e20:	bne	13e30 <__assert_fail@plt+0x2aa4>
   13e24:	ldr	r3, [sp, #20]
   13e28:	sub	r3, r3, #1
   13e2c:	str	r3, [sp, #20]
   13e30:	mov	r3, #0
   13e34:	ldr	r2, [sp, #20]
   13e38:	strb	r3, [r2]
   13e3c:	ldr	r3, [sp, #52]	; 0x34
   13e40:	ldr	r2, [sp, #40]	; 0x28
   13e44:	cmp	r2, #0
   13e48:	movne	r3, #0
   13e4c:	cmp	r3, #0
   13e50:	beq	13e88 <__assert_fail@plt+0x2afc>
   13e54:	ldr	r3, [sp, #32]
   13e58:	cmp	r8, #0
   13e5c:	cmpne	r3, #1
   13e60:	bne	13e90 <__assert_fail@plt+0x2b04>
   13e64:	ldr	r3, [r9, #48]	; 0x30
   13e68:	cmp	r3, #0
   13e6c:	bne	14354 <__assert_fail@plt+0x2fc8>
   13e70:	mov	r0, r5
   13e74:	bl	136b8 <__assert_fail@plt+0x232c>
   13e78:	adds	r0, r0, #0
   13e7c:	movne	r0, #1
   13e80:	cmp	r0, #0
   13e84:	bne	14378 <__assert_fail@plt+0x2fec>
   13e88:	cmp	r8, #0
   13e8c:	beq	143a0 <__assert_fail@plt+0x3014>
   13e90:	ldr	r3, [sp, #36]	; 0x24
   13e94:	cmp	r3, #0
   13e98:	bne	143d8 <__assert_fail@plt+0x304c>
   13e9c:	ldr	r3, [r5, #44]	; 0x2c
   13ea0:	cmp	r3, #0
   13ea4:	cmpne	r8, #1
   13ea8:	bls	13f74 <__assert_fail@plt+0x2be8>
   13eac:	mov	r2, r8
   13eb0:	ldr	r1, [sp, #4]
   13eb4:	mov	r0, r5
   13eb8:	bl	13108 <__assert_fail@plt+0x1d7c>
   13ebc:	str	r0, [sp, #4]
   13ec0:	b	13f74 <__assert_fail@plt+0x2be8>
   13ec4:	ldrb	r3, [r7, #20]
   13ec8:	cmp	r3, #0
   13ecc:	beq	142bc <__assert_fail@plt+0x2f30>
   13ed0:	ldrh	r3, [r7, #20]
   13ed4:	cmp	r3, #46	; 0x2e
   13ed8:	bne	14108 <__assert_fail@plt+0x2d7c>
   13edc:	ldr	r4, [sp]
   13ee0:	b	140c0 <__assert_fail@plt+0x2d34>
   13ee4:	ldr	fp, [r5, #24]
   13ee8:	ldr	r3, [sp, #28]
   13eec:	add	r1, r3, #2
   13ef0:	add	r1, r1, r6
   13ef4:	mov	r0, r5
   13ef8:	bl	12f14 <__assert_fail@plt+0x1b88>
   13efc:	cmp	r0, #0
   13f00:	beq	13f30 <__assert_fail@plt+0x2ba4>
   13f04:	ldr	r3, [r5, #24]
   13f08:	cmp	r3, fp
   13f0c:	beq	13f94 <__assert_fail@plt+0x2c08>
   13f10:	ldr	r2, [r5, #48]	; 0x30
   13f14:	tst	r2, #4
   13f18:	addne	r3, r3, sl
   13f1c:	strne	r3, [sp, #20]
   13f20:	ldr	fp, [r5, #36]	; 0x24
   13f24:	sub	fp, fp, sl
   13f28:	str	r0, [sp, #24]
   13f2c:	b	14138 <__assert_fail@plt+0x2dac>
   13f30:	ldr	r7, [sp, #8]
   13f34:	ldr	r6, [r7]
   13f38:	mov	r0, r4
   13f3c:	bl	12dbc <__assert_fail@plt+0x1a30>
   13f40:	ldr	r0, [sp, #4]
   13f44:	bl	1335c <__assert_fail@plt+0x1fd0>
   13f48:	ldr	r0, [r9, #12]
   13f4c:	bl	11368 <closedir@plt>
   13f50:	mov	r2, #0
   13f54:	str	r2, [r9, #12]
   13f58:	mov	r3, #7
   13f5c:	strh	r3, [r9, #56]	; 0x38
   13f60:	ldr	r3, [r5, #48]	; 0x30
   13f64:	orr	r3, r3, #8192	; 0x2000
   13f68:	str	r3, [r5, #48]	; 0x30
   13f6c:	str	r6, [r7]
   13f70:	str	r2, [sp, #4]
   13f74:	ldr	r0, [sp, #4]
   13f78:	add	sp, sp, #68	; 0x44
   13f7c:	ldrd	r4, [sp]
   13f80:	ldrd	r6, [sp, #8]
   13f84:	ldrd	r8, [sp, #16]
   13f88:	ldrd	sl, [sp, #24]
   13f8c:	add	sp, sp, #32
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	ldr	r0, [sp, #24]
   13f98:	b	13f20 <__assert_fail@plt+0x2b94>
   13f9c:	mov	r0, r4
   13fa0:	bl	12dbc <__assert_fail@plt+0x1a30>
   13fa4:	ldr	r0, [sp, #4]
   13fa8:	bl	1335c <__assert_fail@plt+0x1fd0>
   13fac:	ldr	r0, [r9, #12]
   13fb0:	bl	11368 <closedir@plt>
   13fb4:	mov	r2, #0
   13fb8:	str	r2, [r9, #12]
   13fbc:	mov	r3, #7
   13fc0:	strh	r3, [r9, #56]	; 0x38
   13fc4:	ldr	r3, [r5, #48]	; 0x30
   13fc8:	orr	r3, r3, #8192	; 0x2000
   13fcc:	str	r3, [r5, #48]	; 0x30
   13fd0:	mov	r3, #36	; 0x24
   13fd4:	ldr	r1, [sp, #8]
   13fd8:	str	r3, [r1]
   13fdc:	str	r2, [sp, #4]
   13fe0:	b	13f74 <__assert_fail@plt+0x2be8>
   13fe4:	ldr	r3, [r4, #28]
   13fe8:	str	r3, [r4, #24]
   13fec:	ldr	r2, [r4, #52]	; 0x34
   13ff0:	add	r2, r2, #1
   13ff4:	add	r1, r4, #168	; 0xa8
   13ff8:	ldr	r0, [sp, #20]
   13ffc:	bl	11098 <memmove@plt>
   14000:	b	14170 <__assert_fail@plt+0x2de4>
   14004:	ubfx	r3, r3, #4, #1
   14008:	cmp	r2, #10
   1400c:	orrne	r3, r3, #1
   14010:	cmp	r3, #0
   14014:	beq	141a0 <__assert_fail@plt+0x2e14>
   14018:	mov	r2, #11
   1401c:	strh	r2, [r4, #56]	; 0x38
   14020:	ldrb	r2, [r7, #18]
   14024:	sub	r2, r2, #1
   14028:	cmp	r2, #11
   1402c:	ldrls	pc, [pc, r2, lsl #2]
   14030:	b	1422c <__assert_fail@plt+0x2ea0>
   14034:	strdeq	r4, [r1], -ip
   14038:	andeq	r4, r1, r8, rrx
   1403c:	andeq	r4, r1, ip, lsr #4
   14040:	strdeq	r4, [r1], -r0
   14044:	andeq	r4, r1, ip, lsr #4
   14048:	andeq	r4, r1, r4, lsl #8
   1404c:	andeq	r4, r1, ip, lsr #4
   14050:	andeq	r4, r1, r4, lsl r2
   14054:	andeq	r4, r1, ip, lsr #4
   14058:	andeq	r4, r1, r8, lsl #4
   1405c:	andeq	r4, r1, ip, lsr #4
   14060:	andeq	r4, r1, r0, lsr #4
   14064:	mov	r3, #0
   14068:	mov	r2, #8192	; 0x2000
   1406c:	str	r2, [r4, #80]	; 0x50
   14070:	cmp	r3, #0
   14074:	movne	r2, #1
   14078:	moveq	r2, #2
   1407c:	mov	r3, #0
   14080:	str	r2, [r4, #112]	; 0x70
   14084:	str	r3, [r4, #116]	; 0x74
   14088:	mov	r3, #0
   1408c:	str	r3, [r4, #8]
   14090:	ldr	r3, [sp, #4]
   14094:	cmp	r3, #0
   14098:	ldrne	r3, [sp]
   1409c:	strne	r4, [r3, #8]
   140a0:	streq	r4, [sp, #4]
   140a4:	movw	r3, #10000	; 0x2710
   140a8:	cmp	r8, r3
   140ac:	beq	1424c <__assert_fail@plt+0x2ec0>
   140b0:	add	r8, r8, #1
   140b4:	ldr	r3, [sp, #16]
   140b8:	cmp	r8, r3
   140bc:	bcs	13dfc <__assert_fail@plt+0x2a70>
   140c0:	str	r4, [sp]
   140c4:	ldr	r3, [r9, #12]
   140c8:	cmp	r3, #0
   140cc:	beq	13dfc <__assert_fail@plt+0x2a70>
   140d0:	bl	1123c <__errno_location@plt>
   140d4:	str	r0, [sp, #8]
   140d8:	mov	r3, #0
   140dc:	str	r3, [r0]
   140e0:	ldr	r0, [r9, #12]
   140e4:	bl	112d8 <readdir64@plt>
   140e8:	subs	r7, r0, #0
   140ec:	beq	13db8 <__assert_fail@plt+0x2a2c>
   140f0:	ldr	r3, [r5, #48]	; 0x30
   140f4:	tst	r3, #32
   140f8:	bne	14108 <__assert_fail@plt+0x2d7c>
   140fc:	ldrb	r3, [r7, #19]
   14100:	cmp	r3, #46	; 0x2e
   14104:	beq	13ec4 <__assert_fail@plt+0x2b38>
   14108:	add	r4, r7, #19
   1410c:	mov	r0, r4
   14110:	bl	1120c <strlen@plt>
   14114:	mov	r6, r0
   14118:	mov	r2, r0
   1411c:	mov	r1, r4
   14120:	mov	r0, r5
   14124:	bl	131f8 <__assert_fail@plt+0x1e6c>
   14128:	subs	r4, r0, #0
   1412c:	beq	13f30 <__assert_fail@plt+0x2ba4>
   14130:	cmp	fp, r6
   14134:	bls	13ee4 <__assert_fail@plt+0x2b58>
   14138:	adds	r6, sl, r6
   1413c:	bcs	13f9c <__assert_fail@plt+0x2c10>
   14140:	ldr	r3, [sp, #12]
   14144:	str	r3, [r4, #48]	; 0x30
   14148:	ldr	r3, [r5]
   1414c:	str	r3, [r4, #4]
   14150:	str	r6, [r4, #40]	; 0x28
   14154:	ldrd	r2, [r7]
   14158:	strd	r2, [r4, #160]	; 0xa0
   1415c:	ldr	r3, [r5, #48]	; 0x30
   14160:	tst	r3, #4
   14164:	addeq	r3, r4, #168	; 0xa8
   14168:	streq	r3, [r4, #24]
   1416c:	bne	13fe4 <__assert_fail@plt+0x2c58>
   14170:	ldr	r3, [r5, #44]	; 0x2c
   14174:	cmp	r3, #0
   14178:	beq	14188 <__assert_fail@plt+0x2dfc>
   1417c:	ldr	r3, [r5, #48]	; 0x30
   14180:	tst	r3, #1024	; 0x400
   14184:	beq	14234 <__assert_fail@plt+0x2ea8>
   14188:	ldr	r3, [r5, #48]	; 0x30
   1418c:	tst	r3, #8
   14190:	beq	141a0 <__assert_fail@plt+0x2e14>
   14194:	ldrb	r2, [r7, #18]
   14198:	tst	r2, #251	; 0xfb
   1419c:	bne	14004 <__assert_fail@plt+0x2c78>
   141a0:	mov	r3, #11
   141a4:	strh	r3, [r4, #56]	; 0x38
   141a8:	ldrb	r3, [r7, #18]
   141ac:	sub	r3, r3, #1
   141b0:	cmp	r3, #11
   141b4:	ldrls	pc, [pc, r3, lsl #2]
   141b8:	b	14228 <__assert_fail@plt+0x2e9c>
   141bc:	strdeq	r4, [r1], -r8
   141c0:	andeq	r4, r1, r4, rrx
   141c4:	andeq	r4, r1, r8, lsr #4
   141c8:	andeq	r4, r1, ip, ror #3
   141cc:	andeq	r4, r1, r8, lsr #4
   141d0:	andeq	r4, r1, r8, lsl r4
   141d4:	andeq	r4, r1, r8, lsr #4
   141d8:	andeq	r4, r1, r0, lsl r2
   141dc:	andeq	r4, r1, r8, lsr #4
   141e0:	andeq	r4, r1, r4, lsl #4
   141e4:	andeq	r4, r1, r8, lsr #4
   141e8:	andeq	r4, r1, ip, lsl r2
   141ec:	mov	r3, #0
   141f0:	mov	r2, #16384	; 0x4000
   141f4:	b	1406c <__assert_fail@plt+0x2ce0>
   141f8:	mov	r3, #0
   141fc:	mov	r2, #4096	; 0x1000
   14200:	b	1406c <__assert_fail@plt+0x2ce0>
   14204:	mov	r3, #0
   14208:	mov	r2, #40960	; 0xa000
   1420c:	b	1406c <__assert_fail@plt+0x2ce0>
   14210:	mov	r3, #0
   14214:	mov	r2, #32768	; 0x8000
   14218:	b	1406c <__assert_fail@plt+0x2ce0>
   1421c:	mov	r3, #0
   14220:	mov	r2, #49152	; 0xc000
   14224:	b	1406c <__assert_fail@plt+0x2ce0>
   14228:	mov	r3, #0
   1422c:	mov	r2, #0
   14230:	b	1406c <__assert_fail@plt+0x2ce0>
   14234:	mov	r2, #0
   14238:	mov	r1, r4
   1423c:	mov	r0, r5
   14240:	bl	12f98 <__assert_fail@plt+0x1c0c>
   14244:	strh	r0, [r4, #56]	; 0x38
   14248:	b	14088 <__assert_fail@plt+0x2cfc>
   1424c:	ldr	r3, [r5, #44]	; 0x2c
   14250:	cmp	r3, #0
   14254:	beq	14260 <__assert_fail@plt+0x2ed4>
   14258:	movw	r8, #10001	; 0x2711
   1425c:	b	140c0 <__assert_fail@plt+0x2d34>
   14260:	ldr	r1, [sp, #60]	; 0x3c
   14264:	mov	r0, r9
   14268:	bl	1342c <__assert_fail@plt+0x20a0>
   1426c:	movw	r3, #26985	; 0x6969
   14270:	cmp	r0, r3
   14274:	beq	142a4 <__assert_fail@plt+0x2f18>
   14278:	ldr	r3, [sp, #44]	; 0x2c
   1427c:	cmp	r0, r3
   14280:	beq	142b0 <__assert_fail@plt+0x2f24>
   14284:	ldr	r3, [sp, #48]	; 0x30
   14288:	cmp	r0, r3
   1428c:	moveq	r3, #0
   14290:	streq	r3, [sp, #36]	; 0x24
   14294:	beq	140b0 <__assert_fail@plt+0x2d24>
   14298:	mov	r3, #1
   1429c:	str	r3, [sp, #36]	; 0x24
   142a0:	b	14258 <__assert_fail@plt+0x2ecc>
   142a4:	mov	r3, #0
   142a8:	str	r3, [sp, #36]	; 0x24
   142ac:	b	140b0 <__assert_fail@plt+0x2d24>
   142b0:	mov	r3, #0
   142b4:	str	r3, [sp, #36]	; 0x24
   142b8:	b	140b0 <__assert_fail@plt+0x2d24>
   142bc:	ldr	r4, [sp]
   142c0:	b	140c0 <__assert_fail@plt+0x2d34>
   142c4:	ldr	r1, [r5, #24]
   142c8:	ldr	r3, [r5, #4]
   142cc:	cmp	r3, #0
   142d0:	bne	142ec <__assert_fail@plt+0x2f60>
   142d4:	ldr	r3, [sp, #4]
   142d8:	b	14324 <__assert_fail@plt+0x2f98>
   142dc:	str	r1, [r3, #28]
   142e0:	ldr	r3, [r3, #8]
   142e4:	cmp	r3, #0
   142e8:	beq	142d4 <__assert_fail@plt+0x2f48>
   142ec:	ldr	r2, [r3, #24]
   142f0:	add	r0, r3, #168	; 0xa8
   142f4:	cmp	r2, r0
   142f8:	beq	142dc <__assert_fail@plt+0x2f50>
   142fc:	ldr	r0, [r3, #28]
   14300:	sub	r2, r2, r0
   14304:	add	r2, r1, r2
   14308:	str	r2, [r3, #24]
   1430c:	b	142dc <__assert_fail@plt+0x2f50>
   14310:	str	r1, [r3, #28]
   14314:	ldr	r2, [r3, #8]
   14318:	cmp	r2, #0
   1431c:	ldreq	r2, [r3, #4]
   14320:	mov	r3, r2
   14324:	ldr	r2, [r3, #48]	; 0x30
   14328:	cmp	r2, #0
   1432c:	blt	13e08 <__assert_fail@plt+0x2a7c>
   14330:	ldr	r2, [r3, #24]
   14334:	add	r0, r3, #168	; 0xa8
   14338:	cmp	r2, r0
   1433c:	beq	14310 <__assert_fail@plt+0x2f84>
   14340:	ldr	r0, [r3, #28]
   14344:	sub	r2, r2, r0
   14348:	add	r2, r1, r2
   1434c:	str	r2, [r3, #24]
   14350:	b	14310 <__assert_fail@plt+0x2f84>
   14354:	movw	r3, #47540	; 0xb9b4
   14358:	movt	r3, #1
   1435c:	mvn	r2, #0
   14360:	ldr	r1, [r9, #4]
   14364:	mov	r0, r5
   14368:	bl	1371c <__assert_fail@plt+0x2390>
   1436c:	adds	r0, r0, #0
   14370:	movne	r0, #1
   14374:	b	13e80 <__assert_fail@plt+0x2af4>
   14378:	mov	r3, #7
   1437c:	strh	r3, [r9, #56]	; 0x38
   14380:	ldr	r3, [r5, #48]	; 0x30
   14384:	orr	r3, r3, #8192	; 0x2000
   14388:	str	r3, [r5, #48]	; 0x30
   1438c:	ldr	r0, [sp, #4]
   14390:	bl	1335c <__assert_fail@plt+0x1fd0>
   14394:	mov	r3, #0
   14398:	str	r3, [sp, #4]
   1439c:	b	13f74 <__assert_fail@plt+0x2be8>
   143a0:	ldr	r3, [sp, #32]
   143a4:	cmp	r3, #3
   143a8:	beq	143c0 <__assert_fail@plt+0x3034>
   143ac:	ldr	r0, [sp, #4]
   143b0:	bl	1335c <__assert_fail@plt+0x1fd0>
   143b4:	mov	r3, #0
   143b8:	str	r3, [sp, #4]
   143bc:	b	13f74 <__assert_fail@plt+0x2be8>
   143c0:	ldrh	r3, [r9, #56]	; 0x38
   143c4:	cmp	r3, #7
   143c8:	cmpne	r3, #4
   143cc:	movne	r3, #6
   143d0:	strhne	r3, [r9, #56]	; 0x38
   143d4:	b	143ac <__assert_fail@plt+0x3020>
   143d8:	movw	r3, #11992	; 0x2ed8
   143dc:	movt	r3, #1
   143e0:	str	r3, [r5, #44]	; 0x2c
   143e4:	mov	r2, r8
   143e8:	ldr	r1, [sp, #4]
   143ec:	mov	r0, r5
   143f0:	bl	13108 <__assert_fail@plt+0x1d7c>
   143f4:	str	r0, [sp, #4]
   143f8:	mov	r3, #0
   143fc:	str	r3, [r5, #44]	; 0x2c
   14400:	b	13f74 <__assert_fail@plt+0x2be8>
   14404:	mov	r3, #24576	; 0x6000
   14408:	str	r3, [r4, #80]	; 0x50
   1440c:	mov	r2, #1
   14410:	mov	r3, #0
   14414:	b	14080 <__assert_fail@plt+0x2cf4>
   14418:	mov	r3, #24576	; 0x6000
   1441c:	str	r3, [r4, #80]	; 0x50
   14420:	mov	r2, #2
   14424:	mov	r3, #0
   14428:	b	14080 <__assert_fail@plt+0x2cf4>
   1442c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14430:	strd	r6, [sp, #8]
   14434:	strd	r8, [sp, #16]
   14438:	strd	sl, [sp, #24]
   1443c:	str	lr, [sp, #32]
   14440:	sub	sp, sp, #20
   14444:	bic	r3, r1, #4080	; 0xff0
   14448:	bic	r3, r3, #15
   1444c:	cmp	r3, #0
   14450:	bne	14530 <__assert_fail@plt+0x31a4>
   14454:	mov	r6, r0
   14458:	mov	r9, r1
   1445c:	mov	sl, r2
   14460:	and	r3, r1, #516	; 0x204
   14464:	cmp	r3, #516	; 0x204
   14468:	beq	14544 <__assert_fail@plt+0x31b8>
   1446c:	tst	r1, #18
   14470:	beq	14558 <__assert_fail@plt+0x31cc>
   14474:	mov	r1, #96	; 0x60
   14478:	mov	r0, #1
   1447c:	bl	19cf4 <__assert_fail@plt+0x8968>
   14480:	subs	r5, r0, #0
   14484:	beq	14780 <__assert_fail@plt+0x33f4>
   14488:	str	sl, [r5, #44]	; 0x2c
   1448c:	tst	r9, #2
   14490:	streq	r9, [r5, #48]	; 0x30
   14494:	bicne	r3, r9, #512	; 0x200
   14498:	orrne	r3, r3, #4
   1449c:	strne	r3, [r5, #48]	; 0x30
   144a0:	mvn	r3, #99	; 0x63
   144a4:	str	r3, [r5, #32]
   144a8:	ldr	r0, [r6]
   144ac:	cmp	r0, #0
   144b0:	beq	1456c <__assert_fail@plt+0x31e0>
   144b4:	mov	r7, r6
   144b8:	mov	r4, #0
   144bc:	bl	1120c <strlen@plt>
   144c0:	cmp	r4, r0
   144c4:	movcc	r4, r0
   144c8:	ldr	r0, [r7, #4]!
   144cc:	cmp	r0, #0
   144d0:	bne	144bc <__assert_fail@plt+0x3130>
   144d4:	add	r1, r4, #1
   144d8:	cmp	r1, #4096	; 0x1000
   144dc:	movcc	r1, #4096	; 0x1000
   144e0:	mov	r0, r5
   144e4:	bl	12f14 <__assert_fail@plt+0x1b88>
   144e8:	cmp	r0, #0
   144ec:	beq	14774 <__assert_fail@plt+0x33e8>
   144f0:	ldr	fp, [r6]
   144f4:	cmp	fp, #0
   144f8:	beq	147a0 <__assert_fail@plt+0x3414>
   144fc:	mov	r2, #0
   14500:	movw	r1, #45352	; 0xb128
   14504:	movt	r1, #1
   14508:	mov	r0, r5
   1450c:	bl	131f8 <__assert_fail@plt+0x1e6c>
   14510:	subs	fp, r0, #0
   14514:	beq	1476c <__assert_fail@plt+0x33e0>
   14518:	mvn	r3, #0
   1451c:	str	r3, [fp, #48]	; 0x30
   14520:	cmp	sl, #0
   14524:	moveq	r3, #1
   14528:	bne	147a8 <__assert_fail@plt+0x341c>
   1452c:	b	147b0 <__assert_fail@plt+0x3424>
   14530:	bl	1123c <__errno_location@plt>
   14534:	mov	r3, #22
   14538:	str	r3, [r0]
   1453c:	mov	r5, #0
   14540:	b	14780 <__assert_fail@plt+0x33f4>
   14544:	bl	1123c <__errno_location@plt>
   14548:	mov	r3, #22
   1454c:	str	r3, [r0]
   14550:	mov	r5, #0
   14554:	b	14780 <__assert_fail@plt+0x33f4>
   14558:	bl	1123c <__errno_location@plt>
   1455c:	mov	r3, #22
   14560:	str	r3, [r0]
   14564:	mov	r5, #0
   14568:	b	14780 <__assert_fail@plt+0x33f4>
   1456c:	mov	r4, #0
   14570:	b	144d4 <__assert_fail@plt+0x3148>
   14574:	sub	r1, r0, #1
   14578:	ldrb	r3, [r4, r1]
   1457c:	cmp	r3, #47	; 0x2f
   14580:	bne	1460c <__assert_fail@plt+0x3280>
   14584:	sub	r0, r0, #2
   14588:	add	r3, r4, r0
   1458c:	ldrb	r0, [r4, r0]
   14590:	cmp	r0, #47	; 0x2f
   14594:	moveq	r2, r1
   14598:	bne	1460c <__assert_fail@plt+0x3280>
   1459c:	ldrb	r1, [r3, #-1]!
   145a0:	cmp	r1, #47	; 0x2f
   145a4:	bne	1460c <__assert_fail@plt+0x3280>
   145a8:	sub	r2, r2, #1
   145ac:	cmp	r2, #1
   145b0:	bhi	1459c <__assert_fail@plt+0x3210>
   145b4:	b	1460c <__assert_fail@plt+0x3280>
   145b8:	mov	r2, r9
   145bc:	mov	r1, r4
   145c0:	ldr	r0, [sp, #4]
   145c4:	bl	12f98 <__assert_fail@plt+0x1c0c>
   145c8:	strh	r0, [r4, #56]	; 0x38
   145cc:	cmp	sl, #0
   145d0:	beq	14674 <__assert_fail@plt+0x32e8>
   145d4:	str	r7, [r4, #8]
   145d8:	mov	r7, r4
   145dc:	add	r8, r8, #1
   145e0:	ldr	r4, [r6, #4]!
   145e4:	cmp	r4, #0
   145e8:	beq	1468c <__assert_fail@plt+0x3300>
   145ec:	mov	r0, r4
   145f0:	bl	1120c <strlen@plt>
   145f4:	mov	r2, r0
   145f8:	cmp	r0, #2
   145fc:	movls	r3, #0
   14600:	andhi	r3, r5, #1
   14604:	cmp	r3, #0
   14608:	bne	14574 <__assert_fail@plt+0x31e8>
   1460c:	mov	r1, r4
   14610:	ldr	r0, [sp, #4]
   14614:	bl	131f8 <__assert_fail@plt+0x1e6c>
   14618:	subs	r4, r0, #0
   1461c:	beq	14758 <__assert_fail@plt+0x33cc>
   14620:	str	r9, [r4, #48]	; 0x30
   14624:	str	fp, [r4, #4]
   14628:	add	r3, r4, #168	; 0xa8
   1462c:	str	r3, [r4, #24]
   14630:	ldr	r3, [sp, #8]
   14634:	cmp	r7, #0
   14638:	moveq	r3, #0
   1463c:	cmp	r3, #0
   14640:	beq	145b8 <__assert_fail@plt+0x322c>
   14644:	mov	r3, #11
   14648:	strh	r3, [r4, #56]	; 0x38
   1464c:	mov	r2, #2
   14650:	mov	r3, #0
   14654:	strd	r2, [r4, #112]	; 0x70
   14658:	cmp	sl, #0
   1465c:	bne	145d4 <__assert_fail@plt+0x3248>
   14660:	str	r9, [r4, #8]
   14664:	ldr	r3, [sp, #12]
   14668:	str	r4, [r3, #8]
   1466c:	str	r4, [sp, #12]
   14670:	b	145dc <__assert_fail@plt+0x3250>
   14674:	str	r9, [r4, #8]
   14678:	cmp	r7, #0
   1467c:	streq	r4, [sp, #12]
   14680:	moveq	r7, r4
   14684:	beq	145dc <__assert_fail@plt+0x3250>
   14688:	b	14664 <__assert_fail@plt+0x32d8>
   1468c:	ldr	r5, [sp, #4]
   14690:	cmp	sl, #0
   14694:	cmpne	r8, #1
   14698:	bhi	14704 <__assert_fail@plt+0x3378>
   1469c:	mov	r2, #0
   146a0:	movw	r1, #45352	; 0xb128
   146a4:	movt	r1, #1
   146a8:	mov	r0, r5
   146ac:	bl	131f8 <__assert_fail@plt+0x1e6c>
   146b0:	str	r0, [r5]
   146b4:	cmp	r0, #0
   146b8:	beq	1475c <__assert_fail@plt+0x33d0>
   146bc:	str	r7, [r0, #8]
   146c0:	ldr	r3, [r5]
   146c4:	mov	r2, #9
   146c8:	strh	r2, [r3, #56]	; 0x38
   146cc:	ldr	r3, [r5]
   146d0:	mov	r2, #1
   146d4:	str	r2, [r3, #48]	; 0x30
   146d8:	mov	r0, r5
   146dc:	bl	13288 <__assert_fail@plt+0x1efc>
   146e0:	cmp	r0, #0
   146e4:	beq	1475c <__assert_fail@plt+0x33d0>
   146e8:	ldr	r3, [r5, #48]	; 0x30
   146ec:	tst	r3, #516	; 0x204
   146f0:	beq	1472c <__assert_fail@plt+0x33a0>
   146f4:	mvn	r1, #0
   146f8:	add	r0, r5, #60	; 0x3c
   146fc:	bl	162ac <__assert_fail@plt+0x4f20>
   14700:	b	14780 <__assert_fail@plt+0x33f4>
   14704:	mov	r2, r8
   14708:	mov	r1, r7
   1470c:	mov	r0, r5
   14710:	bl	13108 <__assert_fail@plt+0x1d7c>
   14714:	mov	r7, r0
   14718:	b	1469c <__assert_fail@plt+0x3310>
   1471c:	mov	r7, r4
   14720:	b	1469c <__assert_fail@plt+0x3310>
   14724:	mov	r7, fp
   14728:	b	1469c <__assert_fail@plt+0x3310>
   1472c:	movw	r1, #47544	; 0xb9b8
   14730:	movt	r1, #1
   14734:	mov	r0, r5
   14738:	bl	13310 <__assert_fail@plt+0x1f84>
   1473c:	str	r0, [r5, #28]
   14740:	cmp	r0, #0
   14744:	bge	146f4 <__assert_fail@plt+0x3368>
   14748:	ldr	r3, [r5, #48]	; 0x30
   1474c:	orr	r3, r3, #4
   14750:	str	r3, [r5, #48]	; 0x30
   14754:	b	146f4 <__assert_fail@plt+0x3368>
   14758:	ldr	r5, [sp, #4]
   1475c:	mov	r0, r7
   14760:	bl	1335c <__assert_fail@plt+0x1fd0>
   14764:	mov	r0, fp
   14768:	bl	12dbc <__assert_fail@plt+0x1a30>
   1476c:	ldr	r0, [r5, #24]
   14770:	bl	12dbc <__assert_fail@plt+0x1a30>
   14774:	mov	r0, r5
   14778:	bl	12dbc <__assert_fail@plt+0x1a30>
   1477c:	mov	r5, #0
   14780:	mov	r0, r5
   14784:	add	sp, sp, #20
   14788:	ldrd	r4, [sp]
   1478c:	ldrd	r6, [sp, #8]
   14790:	ldrd	r8, [sp, #16]
   14794:	ldrd	sl, [sp, #24]
   14798:	add	sp, sp, #32
   1479c:	pop	{pc}		; (ldr pc, [sp], #4)
   147a0:	cmp	sl, #0
   147a4:	beq	14724 <__assert_fail@plt+0x3398>
   147a8:	ldr	r3, [r5, #48]	; 0x30
   147ac:	ubfx	r3, r3, #10, #1
   147b0:	str	r3, [sp, #8]
   147b4:	ldr	r4, [r6]
   147b8:	cmp	r4, #0
   147bc:	beq	1471c <__assert_fail@plt+0x3390>
   147c0:	mov	r3, #0
   147c4:	mov	r7, r3
   147c8:	str	r3, [sp, #12]
   147cc:	mov	r8, r3
   147d0:	eor	r9, r9, #2048	; 0x800
   147d4:	ubfx	r3, r9, #11, #1
   147d8:	mov	r9, r7
   147dc:	str	r5, [sp, #4]
   147e0:	mov	r5, r3
   147e4:	b	145ec <__assert_fail@plt+0x3260>
   147e8:	strd	r4, [sp, #-16]!
   147ec:	str	r6, [sp, #8]
   147f0:	str	lr, [sp, #12]
   147f4:	mov	r5, r0
   147f8:	ldr	r0, [r0]
   147fc:	cmp	r0, #0
   14800:	beq	14838 <__assert_fail@plt+0x34ac>
   14804:	ldr	r3, [r0, #48]	; 0x30
   14808:	cmp	r3, #0
   1480c:	blt	14888 <__assert_fail@plt+0x34fc>
   14810:	ldr	r4, [r0, #8]
   14814:	cmp	r4, #0
   14818:	ldreq	r4, [r0, #4]
   1481c:	bl	12dbc <__assert_fail@plt+0x1a30>
   14820:	mov	r0, r4
   14824:	ldr	r3, [r4, #48]	; 0x30
   14828:	cmp	r3, #0
   1482c:	bge	14810 <__assert_fail@plt+0x3484>
   14830:	mov	r0, r4
   14834:	bl	12dbc <__assert_fail@plt+0x1a30>
   14838:	ldr	r0, [r5, #4]
   1483c:	cmp	r0, #0
   14840:	beq	14848 <__assert_fail@plt+0x34bc>
   14844:	bl	1335c <__assert_fail@plt+0x1fd0>
   14848:	ldr	r0, [r5, #8]
   1484c:	bl	12dbc <__assert_fail@plt+0x1a30>
   14850:	ldr	r0, [r5, #24]
   14854:	bl	12dbc <__assert_fail@plt+0x1a30>
   14858:	ldr	r3, [r5, #48]	; 0x30
   1485c:	tst	r3, #512	; 0x200
   14860:	beq	14890 <__assert_fail@plt+0x3504>
   14864:	ldr	r0, [r5, #32]
   14868:	cmp	r0, #0
   1486c:	blt	14898 <__assert_fail@plt+0x350c>
   14870:	bl	11350 <close@plt>
   14874:	cmp	r0, #0
   14878:	beq	14898 <__assert_fail@plt+0x350c>
   1487c:	bl	1123c <__errno_location@plt>
   14880:	ldr	r4, [r0]
   14884:	b	14918 <__assert_fail@plt+0x358c>
   14888:	mov	r4, r0
   1488c:	b	14830 <__assert_fail@plt+0x34a4>
   14890:	tst	r3, #4
   14894:	beq	148e0 <__assert_fail@plt+0x3554>
   14898:	add	r0, r5, #60	; 0x3c
   1489c:	bl	133ec <__assert_fail@plt+0x2060>
   148a0:	ldr	r0, [r5, #52]	; 0x34
   148a4:	cmp	r0, #0
   148a8:	movne	r4, #0
   148ac:	beq	1494c <__assert_fail@plt+0x35c0>
   148b0:	bl	15d50 <__assert_fail@plt+0x49c4>
   148b4:	mov	r0, r5
   148b8:	bl	133ac <__assert_fail@plt+0x2020>
   148bc:	mov	r0, r5
   148c0:	bl	12dbc <__assert_fail@plt+0x1a30>
   148c4:	cmp	r4, #0
   148c8:	bne	1493c <__assert_fail@plt+0x35b0>
   148cc:	mov	r0, r4
   148d0:	ldrd	r4, [sp]
   148d4:	ldr	r6, [sp, #8]
   148d8:	add	sp, sp, #12
   148dc:	pop	{pc}		; (ldr pc, [sp], #4)
   148e0:	ldr	r0, [r5, #28]
   148e4:	bl	112fc <fchdir@plt>
   148e8:	subs	r4, r0, #0
   148ec:	beq	148f8 <__assert_fail@plt+0x356c>
   148f0:	bl	1123c <__errno_location@plt>
   148f4:	ldr	r4, [r0]
   148f8:	ldr	r0, [r5, #28]
   148fc:	bl	11350 <close@plt>
   14900:	adds	r0, r0, #0
   14904:	movne	r0, #1
   14908:	cmp	r4, #0
   1490c:	movne	r0, #0
   14910:	cmp	r0, #0
   14914:	bne	14930 <__assert_fail@plt+0x35a4>
   14918:	add	r0, r5, #60	; 0x3c
   1491c:	bl	133ec <__assert_fail@plt+0x2060>
   14920:	ldr	r0, [r5, #52]	; 0x34
   14924:	cmp	r0, #0
   14928:	bne	148b0 <__assert_fail@plt+0x3524>
   1492c:	b	148b4 <__assert_fail@plt+0x3528>
   14930:	bl	1123c <__errno_location@plt>
   14934:	ldr	r4, [r0]
   14938:	b	14918 <__assert_fail@plt+0x358c>
   1493c:	bl	1123c <__errno_location@plt>
   14940:	str	r4, [r0]
   14944:	mvn	r4, #0
   14948:	b	148cc <__assert_fail@plt+0x3540>
   1494c:	mov	r0, r5
   14950:	bl	133ac <__assert_fail@plt+0x2020>
   14954:	mov	r0, r5
   14958:	bl	12dbc <__assert_fail@plt+0x1a30>
   1495c:	mov	r4, #0
   14960:	b	148cc <__assert_fail@plt+0x3540>
   14964:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14968:	strd	r6, [sp, #8]
   1496c:	str	r8, [sp, #16]
   14970:	str	lr, [sp, #20]
   14974:	ldr	r5, [r0]
   14978:	cmp	r5, #0
   1497c:	beq	14fdc <__assert_fail@plt+0x3c50>
   14980:	ldr	r3, [r0, #48]	; 0x30
   14984:	tst	r3, #8192	; 0x2000
   14988:	bne	14fd8 <__assert_fail@plt+0x3c4c>
   1498c:	mov	r8, r0
   14990:	ldrh	r3, [r5, #60]	; 0x3c
   14994:	mov	r2, #3
   14998:	strh	r2, [r5, #60]	; 0x3c
   1499c:	cmp	r3, #1
   149a0:	beq	14a1c <__assert_fail@plt+0x3690>
   149a4:	cmp	r3, #2
   149a8:	beq	14a30 <__assert_fail@plt+0x36a4>
   149ac:	ldrh	r2, [r5, #56]	; 0x38
   149b0:	cmp	r2, #1
   149b4:	bne	14cb0 <__assert_fail@plt+0x3924>
   149b8:	cmp	r3, #4
   149bc:	beq	149e0 <__assert_fail@plt+0x3654>
   149c0:	ldr	r1, [r8, #48]	; 0x30
   149c4:	tst	r1, #64	; 0x40
   149c8:	beq	14ac4 <__assert_fail@plt+0x3738>
   149cc:	ldrd	r6, [r5, #64]	; 0x40
   149d0:	ldrd	r2, [r8, #16]
   149d4:	cmp	r7, r3
   149d8:	cmpeq	r6, r2
   149dc:	beq	14ac4 <__assert_fail@plt+0x3738>
   149e0:	ldrh	r3, [r5, #58]	; 0x3a
   149e4:	tst	r3, #2
   149e8:	bne	14ab8 <__assert_fail@plt+0x372c>
   149ec:	ldr	r0, [r8, #4]
   149f0:	cmp	r0, #0
   149f4:	beq	14a04 <__assert_fail@plt+0x3678>
   149f8:	bl	1335c <__assert_fail@plt+0x1fd0>
   149fc:	mov	r3, #0
   14a00:	str	r3, [r8, #4]
   14a04:	mov	r3, #6
   14a08:	strh	r3, [r5, #56]	; 0x38
   14a0c:	mov	r1, r5
   14a10:	mov	r0, r8
   14a14:	bl	13928 <__assert_fail@plt+0x259c>
   14a18:	b	14fdc <__assert_fail@plt+0x3c50>
   14a1c:	mov	r2, #0
   14a20:	mov	r1, r5
   14a24:	bl	12f98 <__assert_fail@plt+0x1c0c>
   14a28:	strh	r0, [r5, #56]	; 0x38
   14a2c:	b	14fdc <__assert_fail@plt+0x3c50>
   14a30:	ldrh	r2, [r5, #56]	; 0x38
   14a34:	sub	r3, r2, #12
   14a38:	uxth	r3, r3
   14a3c:	cmp	r3, #1
   14a40:	bls	14a50 <__assert_fail@plt+0x36c4>
   14a44:	cmp	r2, #1
   14a48:	bne	14cb0 <__assert_fail@plt+0x3924>
   14a4c:	b	149c0 <__assert_fail@plt+0x3634>
   14a50:	mov	r2, #1
   14a54:	mov	r1, r5
   14a58:	bl	12f98 <__assert_fail@plt+0x1c0c>
   14a5c:	strh	r0, [r5, #56]	; 0x38
   14a60:	cmp	r0, #1
   14a64:	bne	14b40 <__assert_fail@plt+0x37b4>
   14a68:	ldr	r3, [r8, #48]	; 0x30
   14a6c:	tst	r3, #4
   14a70:	bne	14b40 <__assert_fail@plt+0x37b4>
   14a74:	movw	r1, #47544	; 0xb9b8
   14a78:	movt	r1, #1
   14a7c:	mov	r0, r8
   14a80:	bl	13310 <__assert_fail@plt+0x1f84>
   14a84:	str	r0, [r5, #36]	; 0x24
   14a88:	cmp	r0, #0
   14a8c:	blt	14aa0 <__assert_fail@plt+0x3714>
   14a90:	ldrh	r3, [r5, #58]	; 0x3a
   14a94:	orr	r3, r3, #2
   14a98:	strh	r3, [r5, #58]	; 0x3a
   14a9c:	b	14b40 <__assert_fail@plt+0x37b4>
   14aa0:	bl	1123c <__errno_location@plt>
   14aa4:	ldr	r3, [r0]
   14aa8:	str	r3, [r5, #32]
   14aac:	mov	r3, #7
   14ab0:	strh	r3, [r5, #56]	; 0x38
   14ab4:	b	14b40 <__assert_fail@plt+0x37b4>
   14ab8:	ldr	r0, [r5, #36]	; 0x24
   14abc:	bl	11350 <close@plt>
   14ac0:	b	149ec <__assert_fail@plt+0x3660>
   14ac4:	ldr	r0, [r8, #4]
   14ac8:	cmp	r0, #0
   14acc:	beq	14ba8 <__assert_fail@plt+0x381c>
   14ad0:	tst	r1, #4096	; 0x1000
   14ad4:	bne	14b94 <__assert_fail@plt+0x3808>
   14ad8:	ldr	r3, [r5, #24]
   14adc:	mvn	r2, #0
   14ae0:	mov	r1, r5
   14ae4:	mov	r0, r8
   14ae8:	bl	1371c <__assert_fail@plt+0x2390>
   14aec:	cmp	r0, #0
   14af0:	bne	14bfc <__assert_fail@plt+0x3870>
   14af4:	ldr	r5, [r8, #4]
   14af8:	mov	r3, #0
   14afc:	str	r3, [r8, #4]
   14b00:	ldr	r2, [r8, #24]
   14b04:	ldr	r0, [r5, #4]
   14b08:	ldr	r1, [r0, #40]	; 0x28
   14b0c:	sub	r3, r1, #1
   14b10:	ldr	r0, [r0, #28]
   14b14:	ldrb	r0, [r0, r3]
   14b18:	cmp	r0, #47	; 0x2f
   14b1c:	movne	r3, r1
   14b20:	add	r0, r2, r3
   14b24:	mov	r1, #47	; 0x2f
   14b28:	strb	r1, [r2, r3]
   14b2c:	ldr	r2, [r5, #52]	; 0x34
   14b30:	add	r2, r2, #1
   14b34:	add	r1, r5, #168	; 0xa8
   14b38:	add	r0, r0, #1
   14b3c:	bl	11098 <memmove@plt>
   14b40:	str	r5, [r8]
   14b44:	ldrh	r3, [r5, #56]	; 0x38
   14b48:	cmp	r3, #11
   14b4c:	beq	14ed0 <__assert_fail@plt+0x3b44>
   14b50:	ldrh	r3, [r5, #56]	; 0x38
   14b54:	cmp	r3, #1
   14b58:	bne	14fdc <__assert_fail@plt+0x3c50>
   14b5c:	ldr	r3, [r5, #48]	; 0x30
   14b60:	cmp	r3, #0
   14b64:	ldrdeq	r2, [r5, #64]	; 0x40
   14b68:	strdeq	r2, [r8, #16]
   14b6c:	mov	r1, r5
   14b70:	mov	r0, r8
   14b74:	bl	13558 <__assert_fail@plt+0x21cc>
   14b78:	cmp	r0, #0
   14b7c:	bne	14fdc <__assert_fail@plt+0x3c50>
   14b80:	bl	1123c <__errno_location@plt>
   14b84:	mov	r3, #12
   14b88:	str	r3, [r0]
   14b8c:	mov	r5, #0
   14b90:	b	14fdc <__assert_fail@plt+0x3c50>
   14b94:	bic	r1, r1, #4096	; 0x1000
   14b98:	str	r1, [r8, #48]	; 0x30
   14b9c:	bl	1335c <__assert_fail@plt+0x1fd0>
   14ba0:	mov	r3, #0
   14ba4:	str	r3, [r8, #4]
   14ba8:	mov	r1, #3
   14bac:	mov	r0, r8
   14bb0:	bl	139ec <__assert_fail@plt+0x2660>
   14bb4:	str	r0, [r8, #4]
   14bb8:	cmp	r0, #0
   14bbc:	bne	14af4 <__assert_fail@plt+0x3768>
   14bc0:	ldr	r3, [r8, #48]	; 0x30
   14bc4:	tst	r3, #8192	; 0x2000
   14bc8:	movne	r5, r0
   14bcc:	bne	14fdc <__assert_fail@plt+0x3c50>
   14bd0:	ldr	r3, [r5, #32]
   14bd4:	cmp	r3, #0
   14bd8:	beq	14bec <__assert_fail@plt+0x3860>
   14bdc:	ldrh	r3, [r5, #56]	; 0x38
   14be0:	cmp	r3, #4
   14be4:	movne	r3, #7
   14be8:	strhne	r3, [r5, #56]	; 0x38
   14bec:	mov	r1, r5
   14bf0:	mov	r0, r8
   14bf4:	bl	13928 <__assert_fail@plt+0x259c>
   14bf8:	b	14fdc <__assert_fail@plt+0x3c50>
   14bfc:	bl	1123c <__errno_location@plt>
   14c00:	ldr	r3, [r0]
   14c04:	str	r3, [r5, #32]
   14c08:	ldrh	r3, [r5, #58]	; 0x3a
   14c0c:	orr	r3, r3, #1
   14c10:	strh	r3, [r5, #58]	; 0x3a
   14c14:	ldr	r3, [r8, #4]
   14c18:	cmp	r3, #0
   14c1c:	beq	14af4 <__assert_fail@plt+0x3768>
   14c20:	ldr	r2, [r3, #4]
   14c24:	ldr	r2, [r2, #24]
   14c28:	str	r2, [r3, #24]
   14c2c:	ldr	r3, [r3, #8]
   14c30:	cmp	r3, #0
   14c34:	bne	14c20 <__assert_fail@plt+0x3894>
   14c38:	b	14af4 <__assert_fail@plt+0x3768>
   14c3c:	str	r3, [r8]
   14c40:	ldr	r2, [r8, #24]
   14c44:	ldr	r3, [r3, #40]	; 0x28
   14c48:	mov	r1, #0
   14c4c:	strb	r1, [r2, r3]
   14c50:	mov	r1, #3
   14c54:	mov	r0, r8
   14c58:	bl	139ec <__assert_fail@plt+0x2660>
   14c5c:	subs	r6, r0, #0
   14c60:	bne	14c78 <__assert_fail@plt+0x38ec>
   14c64:	ldr	r3, [r8, #48]	; 0x30
   14c68:	tst	r3, #8192	; 0x2000
   14c6c:	beq	14ccc <__assert_fail@plt+0x3940>
   14c70:	mov	r5, r6
   14c74:	b	14fdc <__assert_fail@plt+0x3c50>
   14c78:	mov	r0, r5
   14c7c:	bl	12dbc <__assert_fail@plt+0x1a30>
   14c80:	mov	r5, r6
   14c84:	b	14b00 <__assert_fail@plt+0x3774>
   14c88:	str	r4, [r8]
   14c8c:	mov	r0, r5
   14c90:	bl	12dbc <__assert_fail@plt+0x1a30>
   14c94:	ldr	r3, [r4, #48]	; 0x30
   14c98:	cmp	r3, #0
   14c9c:	beq	14d94 <__assert_fail@plt+0x3a08>
   14ca0:	ldrh	r3, [r4, #60]	; 0x3c
   14ca4:	mov	r5, r4
   14ca8:	cmp	r3, #4
   14cac:	bne	14e48 <__assert_fail@plt+0x3abc>
   14cb0:	ldr	r4, [r5, #8]
   14cb4:	cmp	r4, #0
   14cb8:	bne	14c88 <__assert_fail@plt+0x38fc>
   14cbc:	ldr	r3, [r5, #4]
   14cc0:	ldr	r2, [r3, #12]
   14cc4:	cmp	r2, #0
   14cc8:	bne	14c3c <__assert_fail@plt+0x38b0>
   14ccc:	ldr	r6, [r5, #4]
   14cd0:	str	r6, [r8]
   14cd4:	mov	r0, r5
   14cd8:	bl	12dbc <__assert_fail@plt+0x1a30>
   14cdc:	ldr	r3, [r6, #48]	; 0x30
   14ce0:	cmn	r3, #1
   14ce4:	beq	14f08 <__assert_fail@plt+0x3b7c>
   14ce8:	ldrh	r3, [r6, #56]	; 0x38
   14cec:	cmp	r3, #11
   14cf0:	beq	14f28 <__assert_fail@plt+0x3b9c>
   14cf4:	ldr	r2, [r8, #24]
   14cf8:	ldr	r3, [r6, #40]	; 0x28
   14cfc:	mov	r1, #0
   14d00:	strb	r1, [r2, r3]
   14d04:	ldr	r3, [r6, #48]	; 0x30
   14d08:	cmp	r3, r1
   14d0c:	beq	14f2c <__assert_fail@plt+0x3ba0>
   14d10:	ldrh	r3, [r6, #58]	; 0x3a
   14d14:	tst	r3, #2
   14d18:	beq	14f94 <__assert_fail@plt+0x3c08>
   14d1c:	ldr	r3, [r8, #48]	; 0x30
   14d20:	tst	r3, #4
   14d24:	bne	14d40 <__assert_fail@plt+0x39b4>
   14d28:	tst	r3, #512	; 0x200
   14d2c:	beq	14f68 <__assert_fail@plt+0x3bdc>
   14d30:	mov	r2, #1
   14d34:	ldr	r1, [r6, #36]	; 0x24
   14d38:	mov	r0, r8
   14d3c:	bl	13620 <__assert_fail@plt+0x2294>
   14d40:	ldr	r0, [r6, #36]	; 0x24
   14d44:	bl	11350 <close@plt>
   14d48:	ldrh	r3, [r6, #56]	; 0x38
   14d4c:	cmp	r3, #2
   14d50:	beq	14d7c <__assert_fail@plt+0x39f0>
   14d54:	ldr	r3, [r6, #32]
   14d58:	cmp	r3, #0
   14d5c:	movne	r3, #7
   14d60:	strhne	r3, [r6, #56]	; 0x38
   14d64:	bne	14d7c <__assert_fail@plt+0x39f0>
   14d68:	mov	r3, #6
   14d6c:	strh	r3, [r6, #56]	; 0x38
   14d70:	mov	r1, r6
   14d74:	mov	r0, r8
   14d78:	bl	13928 <__assert_fail@plt+0x259c>
   14d7c:	ldr	r5, [r8, #48]	; 0x30
   14d80:	and	r5, r5, #8192	; 0x2000
   14d84:	cmp	r5, #0
   14d88:	moveq	r5, r6
   14d8c:	movne	r5, r4
   14d90:	b	14fdc <__assert_fail@plt+0x3c50>
   14d94:	mov	r0, r8
   14d98:	bl	136b8 <__assert_fail@plt+0x232c>
   14d9c:	cmp	r0, #0
   14da0:	bne	14e24 <__assert_fail@plt+0x3a98>
   14da4:	mov	r0, r8
   14da8:	bl	133ac <__assert_fail@plt+0x2020>
   14dac:	ldr	r2, [r4, #52]	; 0x34
   14db0:	str	r2, [r4, #40]	; 0x28
   14db4:	add	r5, r4, #168	; 0xa8
   14db8:	add	r2, r2, #1
   14dbc:	mov	r1, r5
   14dc0:	ldr	r0, [r8, #24]
   14dc4:	bl	11098 <memmove@plt>
   14dc8:	mov	r1, #47	; 0x2f
   14dcc:	mov	r0, r5
   14dd0:	bl	112c0 <strrchr@plt>
   14dd4:	cmp	r0, #0
   14dd8:	beq	14e08 <__assert_fail@plt+0x3a7c>
   14ddc:	cmp	r5, r0
   14de0:	beq	14e38 <__assert_fail@plt+0x3aac>
   14de4:	add	r6, r0, #1
   14de8:	mov	r0, r6
   14dec:	bl	1120c <strlen@plt>
   14df0:	mov	r7, r0
   14df4:	add	r2, r0, #1
   14df8:	mov	r1, r6
   14dfc:	mov	r0, r5
   14e00:	bl	11098 <memmove@plt>
   14e04:	str	r7, [r4, #52]	; 0x34
   14e08:	ldr	r3, [r8, #24]
   14e0c:	str	r3, [r4, #28]
   14e10:	str	r3, [r4, #24]
   14e14:	mov	r0, r8
   14e18:	bl	13288 <__assert_fail@plt+0x1efc>
   14e1c:	mov	r5, r4
   14e20:	b	14b40 <__assert_fail@plt+0x37b4>
   14e24:	ldr	r3, [r8, #48]	; 0x30
   14e28:	orr	r3, r3, #8192	; 0x2000
   14e2c:	str	r3, [r8, #48]	; 0x30
   14e30:	mov	r5, #0
   14e34:	b	14fdc <__assert_fail@plt+0x3c50>
   14e38:	ldrb	r3, [r0, #1]
   14e3c:	cmp	r3, #0
   14e40:	beq	14e08 <__assert_fail@plt+0x3a7c>
   14e44:	b	14de4 <__assert_fail@plt+0x3a58>
   14e48:	cmp	r3, #2
   14e4c:	movne	r5, r4
   14e50:	bne	14b00 <__assert_fail@plt+0x3774>
   14e54:	mov	r2, #1
   14e58:	mov	r1, r4
   14e5c:	mov	r0, r8
   14e60:	bl	12f98 <__assert_fail@plt+0x1c0c>
   14e64:	strh	r0, [r4, #56]	; 0x38
   14e68:	cmp	r0, #1
   14e6c:	beq	14e80 <__assert_fail@plt+0x3af4>
   14e70:	mov	r3, #3
   14e74:	strh	r3, [r4, #60]	; 0x3c
   14e78:	mov	r5, r4
   14e7c:	b	14b00 <__assert_fail@plt+0x3774>
   14e80:	ldr	r3, [r8, #48]	; 0x30
   14e84:	tst	r3, #4
   14e88:	bne	14e70 <__assert_fail@plt+0x3ae4>
   14e8c:	movw	r1, #47544	; 0xb9b8
   14e90:	movt	r1, #1
   14e94:	mov	r0, r8
   14e98:	bl	13310 <__assert_fail@plt+0x1f84>
   14e9c:	str	r0, [r4, #36]	; 0x24
   14ea0:	cmp	r0, #0
   14ea4:	blt	14eb8 <__assert_fail@plt+0x3b2c>
   14ea8:	ldrh	r3, [r4, #58]	; 0x3a
   14eac:	orr	r3, r3, #2
   14eb0:	strh	r3, [r4, #58]	; 0x3a
   14eb4:	b	14e70 <__assert_fail@plt+0x3ae4>
   14eb8:	bl	1123c <__errno_location@plt>
   14ebc:	ldr	r3, [r0]
   14ec0:	str	r3, [r4, #32]
   14ec4:	mov	r3, #7
   14ec8:	strh	r3, [r4, #56]	; 0x38
   14ecc:	b	14e70 <__assert_fail@plt+0x3ae4>
   14ed0:	ldrd	r2, [r5, #112]	; 0x70
   14ed4:	cmp	r3, #0
   14ed8:	cmpeq	r2, #2
   14edc:	beq	14ef0 <__assert_fail@plt+0x3b64>
   14ee0:	cmp	r3, #0
   14ee4:	cmpeq	r2, #1
   14ee8:	beq	14fdc <__assert_fail@plt+0x3c50>
   14eec:	bl	11344 <abort@plt>
   14ef0:	mov	r2, #0
   14ef4:	mov	r1, r5
   14ef8:	mov	r0, r8
   14efc:	bl	12f98 <__assert_fail@plt+0x1c0c>
   14f00:	strh	r0, [r5, #56]	; 0x38
   14f04:	b	14b50 <__assert_fail@plt+0x37c4>
   14f08:	mov	r0, r6
   14f0c:	bl	12dbc <__assert_fail@plt+0x1a30>
   14f10:	bl	1123c <__errno_location@plt>
   14f14:	mov	r3, #0
   14f18:	str	r3, [r0]
   14f1c:	str	r3, [r8]
   14f20:	mov	r5, r4
   14f24:	b	14fdc <__assert_fail@plt+0x3c50>
   14f28:	bl	11344 <abort@plt>
   14f2c:	mov	r0, r8
   14f30:	bl	136b8 <__assert_fail@plt+0x232c>
   14f34:	cmp	r0, #0
   14f38:	beq	14d48 <__assert_fail@plt+0x39bc>
   14f3c:	bl	1123c <__errno_location@plt>
   14f40:	ldr	r3, [r0]
   14f44:	str	r3, [r6, #32]
   14f48:	ldr	r3, [r8, #48]	; 0x30
   14f4c:	orr	r3, r3, #8192	; 0x2000
   14f50:	str	r3, [r8, #48]	; 0x30
   14f54:	ldrh	r3, [r6, #56]	; 0x38
   14f58:	cmp	r3, #2
   14f5c:	moveq	r5, r4
   14f60:	bne	14d54 <__assert_fail@plt+0x39c8>
   14f64:	b	14fdc <__assert_fail@plt+0x3c50>
   14f68:	ldr	r0, [r6, #36]	; 0x24
   14f6c:	bl	112fc <fchdir@plt>
   14f70:	cmp	r0, #0
   14f74:	beq	14d40 <__assert_fail@plt+0x39b4>
   14f78:	bl	1123c <__errno_location@plt>
   14f7c:	ldr	r3, [r0]
   14f80:	str	r3, [r6, #32]
   14f84:	ldr	r3, [r8, #48]	; 0x30
   14f88:	orr	r3, r3, #8192	; 0x2000
   14f8c:	str	r3, [r8, #48]	; 0x30
   14f90:	b	14d40 <__assert_fail@plt+0x39b4>
   14f94:	tst	r3, #1
   14f98:	bne	14d48 <__assert_fail@plt+0x39bc>
   14f9c:	movw	r3, #47540	; 0xb9b4
   14fa0:	movt	r3, #1
   14fa4:	mvn	r2, #0
   14fa8:	ldr	r1, [r6, #4]
   14fac:	mov	r0, r8
   14fb0:	bl	1371c <__assert_fail@plt+0x2390>
   14fb4:	cmp	r0, #0
   14fb8:	beq	14d48 <__assert_fail@plt+0x39bc>
   14fbc:	bl	1123c <__errno_location@plt>
   14fc0:	ldr	r3, [r0]
   14fc4:	str	r3, [r6, #32]
   14fc8:	ldr	r3, [r8, #48]	; 0x30
   14fcc:	orr	r3, r3, #8192	; 0x2000
   14fd0:	str	r3, [r8, #48]	; 0x30
   14fd4:	b	14f54 <__assert_fail@plt+0x3bc8>
   14fd8:	mov	r5, #0
   14fdc:	mov	r0, r5
   14fe0:	ldrd	r4, [sp]
   14fe4:	ldrd	r6, [sp, #8]
   14fe8:	ldr	r8, [sp, #16]
   14fec:	add	sp, sp, #20
   14ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff4:	cmp	r2, #4
   14ff8:	bhi	15008 <__assert_fail@plt+0x3c7c>
   14ffc:	strh	r2, [r1, #60]	; 0x3c
   15000:	mov	r0, #0
   15004:	bx	lr
   15008:	str	r4, [sp, #-8]!
   1500c:	str	lr, [sp, #4]
   15010:	bl	1123c <__errno_location@plt>
   15014:	mov	r3, #22
   15018:	str	r3, [r0]
   1501c:	mov	r0, #1
   15020:	ldr	r4, [sp]
   15024:	add	sp, sp, #4
   15028:	pop	{pc}		; (ldr pc, [sp], #4)
   1502c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15030:	strd	r6, [sp, #8]
   15034:	str	r8, [sp, #16]
   15038:	str	lr, [sp, #20]
   1503c:	bics	r3, r1, #4096	; 0x1000
   15040:	bne	150f0 <__assert_fail@plt+0x3d64>
   15044:	mov	r4, r0
   15048:	mov	r5, r1
   1504c:	ldr	r6, [r0]
   15050:	bl	1123c <__errno_location@plt>
   15054:	mov	r7, r0
   15058:	mov	r3, #0
   1505c:	str	r3, [r0]
   15060:	ldr	r3, [r4, #48]	; 0x30
   15064:	tst	r3, #8192	; 0x2000
   15068:	movne	r0, #0
   1506c:	bne	150dc <__assert_fail@plt+0x3d50>
   15070:	ldrh	r3, [r6, #56]	; 0x38
   15074:	cmp	r3, #9
   15078:	beq	15104 <__assert_fail@plt+0x3d78>
   1507c:	cmp	r3, #1
   15080:	movne	r0, #0
   15084:	bne	150dc <__assert_fail@plt+0x3d50>
   15088:	ldr	r0, [r4, #4]
   1508c:	cmp	r0, #0
   15090:	beq	15098 <__assert_fail@plt+0x3d0c>
   15094:	bl	1335c <__assert_fail@plt+0x1fd0>
   15098:	cmp	r5, #4096	; 0x1000
   1509c:	movne	r5, #1
   150a0:	beq	1510c <__assert_fail@plt+0x3d80>
   150a4:	ldr	r3, [r6, #48]	; 0x30
   150a8:	cmp	r3, #0
   150ac:	bne	150cc <__assert_fail@plt+0x3d40>
   150b0:	ldr	r3, [r6, #24]
   150b4:	ldrb	r3, [r3]
   150b8:	cmp	r3, #47	; 0x2f
   150bc:	beq	150cc <__assert_fail@plt+0x3d40>
   150c0:	ldr	r3, [r4, #48]	; 0x30
   150c4:	tst	r3, #4
   150c8:	beq	15120 <__assert_fail@plt+0x3d94>
   150cc:	mov	r1, r5
   150d0:	mov	r0, r4
   150d4:	bl	139ec <__assert_fail@plt+0x2660>
   150d8:	str	r0, [r4, #4]
   150dc:	ldrd	r4, [sp]
   150e0:	ldrd	r6, [sp, #8]
   150e4:	ldr	r8, [sp, #16]
   150e8:	add	sp, sp, #20
   150ec:	pop	{pc}		; (ldr pc, [sp], #4)
   150f0:	bl	1123c <__errno_location@plt>
   150f4:	mov	r3, #22
   150f8:	str	r3, [r0]
   150fc:	mov	r0, #0
   15100:	b	150dc <__assert_fail@plt+0x3d50>
   15104:	ldr	r0, [r6, #8]
   15108:	b	150dc <__assert_fail@plt+0x3d50>
   1510c:	ldr	r3, [r4, #48]	; 0x30
   15110:	orr	r3, r3, #4096	; 0x1000
   15114:	str	r3, [r4, #48]	; 0x30
   15118:	mov	r5, #2
   1511c:	b	150a4 <__assert_fail@plt+0x3d18>
   15120:	movw	r1, #47544	; 0xb9b8
   15124:	movt	r1, #1
   15128:	mov	r0, r4
   1512c:	bl	13310 <__assert_fail@plt+0x1f84>
   15130:	subs	r6, r0, #0
   15134:	movlt	r0, #0
   15138:	strlt	r0, [r4, #4]
   1513c:	blt	150dc <__assert_fail@plt+0x3d50>
   15140:	mov	r1, r5
   15144:	mov	r0, r4
   15148:	bl	139ec <__assert_fail@plt+0x2660>
   1514c:	str	r0, [r4, #4]
   15150:	ldr	r3, [r4, #48]	; 0x30
   15154:	tst	r3, #512	; 0x200
   15158:	beq	15174 <__assert_fail@plt+0x3de8>
   1515c:	mov	r2, #1
   15160:	mov	r1, r6
   15164:	mov	r0, r4
   15168:	bl	13620 <__assert_fail@plt+0x2294>
   1516c:	ldr	r0, [r4, #4]
   15170:	b	150dc <__assert_fail@plt+0x3d50>
   15174:	mov	r0, r6
   15178:	bl	112fc <fchdir@plt>
   1517c:	cmp	r0, #0
   15180:	bne	15190 <__assert_fail@plt+0x3e04>
   15184:	mov	r0, r6
   15188:	bl	11350 <close@plt>
   1518c:	b	1516c <__assert_fail@plt+0x3de0>
   15190:	ldr	r4, [r7]
   15194:	mov	r0, r6
   15198:	bl	11350 <close@plt>
   1519c:	str	r4, [r7]
   151a0:	mov	r0, #0
   151a4:	b	150dc <__assert_fail@plt+0x3d50>
   151a8:	ror	r0, r0, #3
   151ac:	udiv	r3, r0, r1
   151b0:	mls	r0, r3, r1, r0
   151b4:	bx	lr
   151b8:	cmp	r1, r0
   151bc:	movne	r0, #0
   151c0:	moveq	r0, #1
   151c4:	bx	lr
   151c8:	ldr	r2, [r0, #20]
   151cc:	movw	r3, #47548	; 0xb9bc
   151d0:	movt	r3, #1
   151d4:	cmp	r2, r3
   151d8:	beq	15274 <__assert_fail@plt+0x3ee8>
   151dc:	vldr	s15, [r2, #8]
   151e0:	vldr	s14, [pc, #148]	; 1527c <__assert_fail@plt+0x3ef0>
   151e4:	vcmpe.f32	s15, s14
   151e8:	vmrs	APSR_nzcv, fpscr
   151ec:	ble	1524c <__assert_fail@plt+0x3ec0>
   151f0:	vldr	s14, [pc, #136]	; 15280 <__assert_fail@plt+0x3ef4>
   151f4:	vcmpe.f32	s15, s14
   151f8:	vmrs	APSR_nzcv, fpscr
   151fc:	bpl	1524c <__assert_fail@plt+0x3ec0>
   15200:	vldr	s13, [r2, #12]
   15204:	vldr	s14, [pc, #120]	; 15284 <__assert_fail@plt+0x3ef8>
   15208:	vcmpe.f32	s13, s14
   1520c:	vmrs	APSR_nzcv, fpscr
   15210:	ble	1524c <__assert_fail@plt+0x3ec0>
   15214:	vldr	s14, [r2]
   15218:	vcmpe.f32	s14, #0.0
   1521c:	vmrs	APSR_nzcv, fpscr
   15220:	blt	1524c <__assert_fail@plt+0x3ec0>
   15224:	vldr	s13, [pc, #80]	; 1527c <__assert_fail@plt+0x3ef0>
   15228:	vadd.f32	s14, s14, s13
   1522c:	vldr	s13, [r2, #4]
   15230:	vcmpe.f32	s14, s13
   15234:	vmrs	APSR_nzcv, fpscr
   15238:	bpl	1524c <__assert_fail@plt+0x3ec0>
   1523c:	vldr	s12, [pc, #68]	; 15288 <__assert_fail@plt+0x3efc>
   15240:	vcmpe.f32	s13, s12
   15244:	vmrs	APSR_nzcv, fpscr
   15248:	bls	15260 <__assert_fail@plt+0x3ed4>
   1524c:	movw	r3, #47548	; 0xb9bc
   15250:	movt	r3, #1
   15254:	str	r3, [r0, #20]
   15258:	mov	r0, #0
   1525c:	bx	lr
   15260:	vcmpe.f32	s15, s14
   15264:	vmrs	APSR_nzcv, fpscr
   15268:	ble	1524c <__assert_fail@plt+0x3ec0>
   1526c:	mov	r0, #1
   15270:	bx	lr
   15274:	mov	r0, #1
   15278:	bx	lr
   1527c:	stclcc	12, cr12, [ip, #820]	; 0x334
   15280:	svccc	0x00666666
   15284:	svccc	0x008ccccd
   15288:	svccc	0x00800000
   1528c:	ldrb	r3, [r1, #16]
   15290:	cmp	r3, #0
   15294:	bne	152c0 <__assert_fail@plt+0x3f34>
   15298:	vmov	s15, r0
   1529c:	vcvt.f32.u32	s15, s15
   152a0:	vldr	s13, [r1, #8]
   152a4:	vdiv.f32	s14, s15, s13
   152a8:	vldr	s15, [pc, #224]	; 15390 <__assert_fail@plt+0x4004>
   152ac:	vcmpe.f32	s14, s15
   152b0:	vmrs	APSR_nzcv, fpscr
   152b4:	bge	15380 <__assert_fail@plt+0x3ff4>
   152b8:	vcvt.u32.f32	s15, s14
   152bc:	vmov	r0, s15
   152c0:	cmp	r0, #10
   152c4:	movcc	r0, #10
   152c8:	orr	r0, r0, #1
   152cc:	cmn	r0, #1
   152d0:	beq	152e4 <__assert_fail@plt+0x3f58>
   152d4:	push	{lr}		; (str lr, [sp, #-4]!)
   152d8:	movw	lr, #43691	; 0xaaab
   152dc:	movt	lr, #43690	; 0xaaaa
   152e0:	b	1530c <__assert_fail@plt+0x3f80>
   152e4:	mov	r0, #0
   152e8:	bx	lr
   152ec:	mov	r3, #3
   152f0:	udiv	r2, r0, r3
   152f4:	mls	r3, r3, r2, r0
   152f8:	cmp	r3, #0
   152fc:	bne	1535c <__assert_fail@plt+0x3fd0>
   15300:	add	r0, r0, #2
   15304:	cmn	r0, #1
   15308:	beq	15388 <__assert_fail@plt+0x3ffc>
   1530c:	cmp	r0, #9
   15310:	bls	152ec <__assert_fail@plt+0x3f60>
   15314:	umull	r2, r3, lr, r0
   15318:	lsr	r3, r3, #1
   1531c:	add	r3, r3, r3, lsl #1
   15320:	cmp	r0, r3
   15324:	beq	15300 <__assert_fail@plt+0x3f74>
   15328:	mov	r1, #16
   1532c:	mov	r2, #9
   15330:	mov	r3, #3
   15334:	add	r2, r2, r1
   15338:	add	r3, r3, #2
   1533c:	cmp	r2, r0
   15340:	bcs	152f0 <__assert_fail@plt+0x3f64>
   15344:	add	r1, r1, #8
   15348:	udiv	ip, r0, r3
   1534c:	mls	ip, r3, ip, r0
   15350:	cmp	ip, #0
   15354:	bne	15334 <__assert_fail@plt+0x3fa8>
   15358:	b	15300 <__assert_fail@plt+0x3f74>
   1535c:	lsl	r2, r0, #2
   15360:	lsr	r3, r0, #30
   15364:	adds	r3, r3, #0
   15368:	movne	r3, #1
   1536c:	cmp	r2, #0
   15370:	movlt	r3, #1
   15374:	cmp	r3, #0
   15378:	movne	r0, #0
   1537c:	pop	{pc}		; (ldr pc, [sp], #4)
   15380:	mov	r0, #0
   15384:	bx	lr
   15388:	mov	r0, #0
   1538c:	b	1537c <__assert_fail@plt+0x3ff0>
   15390:	svcmi	0x00800000
   15394:	str	r4, [sp, #-8]!
   15398:	str	lr, [sp, #4]
   1539c:	mov	r4, r0
   153a0:	mov	r0, r1
   153a4:	ldr	r3, [r4, #24]
   153a8:	ldr	r1, [r4, #8]
   153ac:	blx	r3
   153b0:	ldr	r3, [r4, #8]
   153b4:	cmp	r3, r0
   153b8:	bls	153d0 <__assert_fail@plt+0x4044>
   153bc:	ldr	r3, [r4]
   153c0:	add	r0, r3, r0, lsl #3
   153c4:	ldr	r4, [sp]
   153c8:	add	sp, sp, #4
   153cc:	pop	{pc}		; (ldr pc, [sp], #4)
   153d0:	bl	11344 <abort@plt>
   153d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153d8:	strd	r6, [sp, #8]
   153dc:	strd	r8, [sp, #16]
   153e0:	strd	sl, [sp, #24]
   153e4:	str	lr, [sp, #32]
   153e8:	sub	sp, sp, #4
   153ec:	ldr	r7, [r1]
   153f0:	ldr	r3, [r1, #4]
   153f4:	cmp	r7, r3
   153f8:	bcs	15550 <__assert_fail@plt+0x41c4>
   153fc:	mov	fp, r2
   15400:	mov	r9, r1
   15404:	mov	r6, r0
   15408:	add	r7, r7, #8
   1540c:	mov	sl, #0
   15410:	b	154e4 <__assert_fail@plt+0x4158>
   15414:	str	r5, [r0]
   15418:	ldr	r2, [r6, #12]
   1541c:	add	r2, r2, #1
   15420:	str	r2, [r6, #12]
   15424:	str	sl, [r4]
   15428:	ldr	r2, [r6, #36]	; 0x24
   1542c:	str	r2, [r4, #4]
   15430:	str	r4, [r6, #36]	; 0x24
   15434:	mov	r4, r3
   15438:	cmp	r3, #0
   1543c:	beq	15470 <__assert_fail@plt+0x40e4>
   15440:	ldr	r5, [r4]
   15444:	mov	r1, r5
   15448:	mov	r0, r6
   1544c:	bl	15394 <__assert_fail@plt+0x4008>
   15450:	ldr	r3, [r4, #4]
   15454:	ldr	r2, [r0]
   15458:	cmp	r2, #0
   1545c:	beq	15414 <__assert_fail@plt+0x4088>
   15460:	ldr	r2, [r0, #4]
   15464:	str	r2, [r4, #4]
   15468:	str	r4, [r0, #4]
   1546c:	b	15434 <__assert_fail@plt+0x40a8>
   15470:	ldr	r4, [r8, #-8]
   15474:	str	sl, [r8, #-4]
   15478:	cmp	fp, #0
   1547c:	bne	154d0 <__assert_fail@plt+0x4144>
   15480:	mov	r1, r4
   15484:	mov	r0, r6
   15488:	bl	15394 <__assert_fail@plt+0x4008>
   1548c:	mov	r5, r0
   15490:	ldr	r3, [r0]
   15494:	cmp	r3, #0
   15498:	beq	1551c <__assert_fail@plt+0x4190>
   1549c:	ldr	r0, [r6, #36]	; 0x24
   154a0:	cmp	r0, #0
   154a4:	beq	15504 <__assert_fail@plt+0x4178>
   154a8:	ldr	r3, [r0, #4]
   154ac:	str	r3, [r6, #36]	; 0x24
   154b0:	str	r4, [r0]
   154b4:	ldr	r3, [r5, #4]
   154b8:	str	r3, [r0, #4]
   154bc:	str	r0, [r5, #4]
   154c0:	str	sl, [r8, #-8]
   154c4:	ldr	r3, [r9, #12]
   154c8:	sub	r3, r3, #1
   154cc:	str	r3, [r9, #12]
   154d0:	add	r2, r7, #8
   154d4:	ldr	r3, [r9, #4]
   154d8:	cmp	r3, r7
   154dc:	bls	15530 <__assert_fail@plt+0x41a4>
   154e0:	mov	r7, r2
   154e4:	mov	r8, r7
   154e8:	ldr	r3, [r7, #-8]
   154ec:	cmp	r3, #0
   154f0:	beq	154d0 <__assert_fail@plt+0x4144>
   154f4:	ldr	r4, [r7, #-4]
   154f8:	cmp	r4, #0
   154fc:	bne	15440 <__assert_fail@plt+0x40b4>
   15500:	b	15470 <__assert_fail@plt+0x40e4>
   15504:	mov	r0, #8
   15508:	bl	19d68 <__assert_fail@plt+0x89dc>
   1550c:	cmp	r0, #0
   15510:	bne	154b0 <__assert_fail@plt+0x4124>
   15514:	mov	r0, fp
   15518:	b	15534 <__assert_fail@plt+0x41a8>
   1551c:	str	r4, [r0]
   15520:	ldr	r3, [r6, #12]
   15524:	add	r3, r3, #1
   15528:	str	r3, [r6, #12]
   1552c:	b	154c0 <__assert_fail@plt+0x4134>
   15530:	mov	r0, #1
   15534:	add	sp, sp, #4
   15538:	ldrd	r4, [sp]
   1553c:	ldrd	r6, [sp, #8]
   15540:	ldrd	r8, [sp, #16]
   15544:	ldrd	sl, [sp, #24]
   15548:	add	sp, sp, #32
   1554c:	pop	{pc}		; (ldr pc, [sp], #4)
   15550:	mov	r0, #1
   15554:	b	15534 <__assert_fail@plt+0x41a8>
   15558:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1555c:	strd	r6, [sp, #8]
   15560:	str	r8, [sp, #16]
   15564:	str	lr, [sp, #20]
   15568:	mov	r6, r0
   1556c:	mov	r5, r1
   15570:	mov	r7, r2
   15574:	mov	r8, r3
   15578:	bl	15394 <__assert_fail@plt+0x4008>
   1557c:	mov	r4, r0
   15580:	str	r0, [r7]
   15584:	ldr	r0, [r0]
   15588:	cmp	r0, #0
   1558c:	beq	15608 <__assert_fail@plt+0x427c>
   15590:	cmp	r0, r5
   15594:	beq	1561c <__assert_fail@plt+0x4290>
   15598:	ldr	r3, [r6, #28]
   1559c:	mov	r1, r0
   155a0:	mov	r0, r5
   155a4:	blx	r3
   155a8:	cmp	r0, #0
   155ac:	bne	1561c <__assert_fail@plt+0x4290>
   155b0:	ldr	r0, [r4, #4]
   155b4:	cmp	r0, #0
   155b8:	beq	15608 <__assert_fail@plt+0x427c>
   155bc:	ldr	r1, [r0]
   155c0:	cmp	r5, r1
   155c4:	beq	155f8 <__assert_fail@plt+0x426c>
   155c8:	ldr	r3, [r6, #28]
   155cc:	mov	r0, r5
   155d0:	blx	r3
   155d4:	cmp	r0, #0
   155d8:	bne	155f8 <__assert_fail@plt+0x426c>
   155dc:	ldr	r4, [r4, #4]
   155e0:	ldr	r0, [r4, #4]
   155e4:	cmp	r0, #0
   155e8:	beq	15608 <__assert_fail@plt+0x427c>
   155ec:	ldr	r1, [r0]
   155f0:	cmp	r1, r5
   155f4:	bne	155c8 <__assert_fail@plt+0x423c>
   155f8:	ldr	r3, [r4, #4]
   155fc:	ldr	r0, [r3]
   15600:	cmp	r8, #0
   15604:	bne	1565c <__assert_fail@plt+0x42d0>
   15608:	ldrd	r4, [sp]
   1560c:	ldrd	r6, [sp, #8]
   15610:	ldr	r8, [sp, #16]
   15614:	add	sp, sp, #20
   15618:	pop	{pc}		; (ldr pc, [sp], #4)
   1561c:	ldr	r0, [r4]
   15620:	cmp	r8, #0
   15624:	beq	15608 <__assert_fail@plt+0x427c>
   15628:	ldr	r1, [r4, #4]
   1562c:	cmp	r1, #0
   15630:	moveq	r3, #0
   15634:	streq	r3, [r4]
   15638:	beq	15608 <__assert_fail@plt+0x427c>
   1563c:	ldrd	r2, [r1]
   15640:	strd	r2, [r4]
   15644:	mov	r3, #0
   15648:	str	r3, [r1]
   1564c:	ldr	r3, [r6, #36]	; 0x24
   15650:	str	r3, [r1, #4]
   15654:	str	r1, [r6, #36]	; 0x24
   15658:	b	15608 <__assert_fail@plt+0x427c>
   1565c:	ldr	r2, [r3, #4]
   15660:	str	r2, [r4, #4]
   15664:	mov	r2, #0
   15668:	str	r2, [r3]
   1566c:	ldr	r2, [r6, #36]	; 0x24
   15670:	str	r2, [r3, #4]
   15674:	str	r3, [r6, #36]	; 0x24
   15678:	b	15608 <__assert_fail@plt+0x427c>
   1567c:	ldr	r0, [r0, #8]
   15680:	bx	lr
   15684:	ldr	r0, [r0, #12]
   15688:	bx	lr
   1568c:	ldr	r0, [r0, #16]
   15690:	bx	lr
   15694:	ldr	r2, [r0]
   15698:	ldr	r3, [r0, #4]
   1569c:	cmp	r2, r3
   156a0:	bcs	15710 <__assert_fail@plt+0x4384>
   156a4:	add	r1, r2, #8
   156a8:	sub	ip, r3, #1
   156ac:	sub	ip, ip, r2
   156b0:	bic	ip, ip, #7
   156b4:	add	r2, r2, #16
   156b8:	add	ip, ip, r2
   156bc:	mov	r0, #0
   156c0:	b	156dc <__assert_fail@plt+0x4350>
   156c4:	mov	r2, #1
   156c8:	cmp	r0, r2
   156cc:	movcc	r0, r2
   156d0:	add	r1, r1, #8
   156d4:	cmp	r1, ip
   156d8:	beq	1570c <__assert_fail@plt+0x4380>
   156dc:	ldr	r3, [r1, #-8]
   156e0:	cmp	r3, #0
   156e4:	beq	156d0 <__assert_fail@plt+0x4344>
   156e8:	ldr	r3, [r1, #-4]
   156ec:	cmp	r3, #0
   156f0:	beq	156c4 <__assert_fail@plt+0x4338>
   156f4:	mov	r2, #1
   156f8:	add	r2, r2, #1
   156fc:	ldr	r3, [r3, #4]
   15700:	cmp	r3, #0
   15704:	bne	156f8 <__assert_fail@plt+0x436c>
   15708:	b	156c8 <__assert_fail@plt+0x433c>
   1570c:	bx	lr
   15710:	mov	r0, #0
   15714:	bx	lr
   15718:	push	{lr}		; (str lr, [sp, #-4]!)
   1571c:	ldr	r2, [r0]
   15720:	ldr	r3, [r0, #4]
   15724:	cmp	r2, r3
   15728:	bcs	15790 <__assert_fail@plt+0x4404>
   1572c:	add	r1, r2, #8
   15730:	sub	ip, r3, #1
   15734:	sub	ip, ip, r2
   15738:	bic	ip, ip, #7
   1573c:	add	r2, r2, #16
   15740:	add	ip, ip, r2
   15744:	mov	r2, #0
   15748:	mov	lr, r2
   1574c:	b	1575c <__assert_fail@plt+0x43d0>
   15750:	add	r1, r1, #8
   15754:	cmp	r1, ip
   15758:	beq	15798 <__assert_fail@plt+0x440c>
   1575c:	ldr	r3, [r1, #-8]
   15760:	cmp	r3, #0
   15764:	beq	15750 <__assert_fail@plt+0x43c4>
   15768:	add	lr, lr, #1
   1576c:	add	r2, r2, #1
   15770:	ldr	r3, [r1, #-4]
   15774:	cmp	r3, #0
   15778:	beq	15750 <__assert_fail@plt+0x43c4>
   1577c:	add	r2, r2, #1
   15780:	ldr	r3, [r3, #4]
   15784:	cmp	r3, #0
   15788:	bne	1577c <__assert_fail@plt+0x43f0>
   1578c:	b	15750 <__assert_fail@plt+0x43c4>
   15790:	mov	r2, #0
   15794:	mov	lr, r2
   15798:	ldr	r3, [r0, #12]
   1579c:	cmp	r3, lr
   157a0:	movne	r0, #0
   157a4:	beq	157ac <__assert_fail@plt+0x4420>
   157a8:	pop	{pc}		; (ldr pc, [sp], #4)
   157ac:	ldr	r0, [r0, #16]
   157b0:	cmp	r0, r2
   157b4:	movne	r0, #0
   157b8:	moveq	r0, #1
   157bc:	b	157a8 <__assert_fail@plt+0x441c>
   157c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   157c4:	strd	r6, [sp, #8]
   157c8:	str	r8, [sp, #16]
   157cc:	str	lr, [sp, #20]
   157d0:	sub	sp, sp, #8
   157d4:	mov	r6, r0
   157d8:	mov	r4, r1
   157dc:	ldr	r5, [r0, #8]
   157e0:	ldr	r7, [r0, #12]
   157e4:	bl	15694 <__assert_fail@plt+0x4308>
   157e8:	mov	r8, r0
   157ec:	ldr	r3, [r6, #16]
   157f0:	movw	r2, #47568	; 0xb9d0
   157f4:	movt	r2, #1
   157f8:	mov	r1, #1
   157fc:	mov	r0, r4
   15800:	bl	11278 <__fprintf_chk@plt>
   15804:	mov	r3, r5
   15808:	movw	r2, #47592	; 0xb9e8
   1580c:	movt	r2, #1
   15810:	mov	r1, #1
   15814:	mov	r0, r4
   15818:	bl	11278 <__fprintf_chk@plt>
   1581c:	vmov	s15, r7
   15820:	vcvt.f64.u32	d6, s15
   15824:	vldr	d7, [pc, #92]	; 15888 <__assert_fail@plt+0x44fc>
   15828:	vmul.f64	d6, d6, d7
   1582c:	vmov	s15, r5
   15830:	vcvt.f64.u32	d7, s15
   15834:	vdiv.f64	d5, d6, d7
   15838:	vstr	d5, [sp]
   1583c:	mov	r3, r7
   15840:	movw	r2, #47616	; 0xba00
   15844:	movt	r2, #1
   15848:	mov	r1, #1
   1584c:	mov	r0, r4
   15850:	bl	11278 <__fprintf_chk@plt>
   15854:	mov	r3, r8
   15858:	movw	r2, #47652	; 0xba24
   1585c:	movt	r2, #1
   15860:	mov	r1, #1
   15864:	mov	r0, r4
   15868:	bl	11278 <__fprintf_chk@plt>
   1586c:	add	sp, sp, #8
   15870:	ldrd	r4, [sp]
   15874:	ldrd	r6, [sp, #8]
   15878:	ldr	r8, [sp, #16]
   1587c:	add	sp, sp, #20
   15880:	pop	{pc}		; (ldr pc, [sp], #4)
   15884:	nop	{0}
   15888:	andeq	r0, r0, r0
   1588c:	subsmi	r0, r9, r0
   15890:	strd	r4, [sp, #-16]!
   15894:	str	r6, [sp, #8]
   15898:	str	lr, [sp, #12]
   1589c:	mov	r6, r0
   158a0:	mov	r5, r1
   158a4:	bl	15394 <__assert_fail@plt+0x4008>
   158a8:	ldr	r1, [r0]
   158ac:	cmp	r1, #0
   158b0:	beq	15904 <__assert_fail@plt+0x4578>
   158b4:	mov	r4, r0
   158b8:	cmp	r1, r5
   158bc:	beq	158ec <__assert_fail@plt+0x4560>
   158c0:	ldr	r3, [r6, #28]
   158c4:	mov	r0, r5
   158c8:	blx	r3
   158cc:	cmp	r0, #0
   158d0:	bne	158ec <__assert_fail@plt+0x4560>
   158d4:	ldr	r4, [r4, #4]
   158d8:	cmp	r4, #0
   158dc:	beq	158f0 <__assert_fail@plt+0x4564>
   158e0:	ldr	r1, [r4]
   158e4:	cmp	r1, r5
   158e8:	bne	158c0 <__assert_fail@plt+0x4534>
   158ec:	ldr	r4, [r4]
   158f0:	mov	r0, r4
   158f4:	ldrd	r4, [sp]
   158f8:	ldr	r6, [sp, #8]
   158fc:	add	sp, sp, #12
   15900:	pop	{pc}		; (ldr pc, [sp], #4)
   15904:	mov	r4, r1
   15908:	b	158f0 <__assert_fail@plt+0x4564>
   1590c:	ldr	r3, [r0, #16]
   15910:	cmp	r3, #0
   15914:	beq	1596c <__assert_fail@plt+0x45e0>
   15918:	ldr	r2, [r0]
   1591c:	ldr	r1, [r0, #4]
   15920:	cmp	r2, r1
   15924:	bcs	15960 <__assert_fail@plt+0x45d4>
   15928:	ldr	r0, [r2]
   1592c:	cmp	r0, #0
   15930:	bxne	lr
   15934:	mov	r3, r2
   15938:	sub	r1, r1, #1
   1593c:	sub	r1, r1, r2
   15940:	bic	r1, r1, #7
   15944:	add	r2, r2, r1
   15948:	cmp	r3, r2
   1594c:	beq	15960 <__assert_fail@plt+0x45d4>
   15950:	ldr	r0, [r3, #8]!
   15954:	cmp	r0, #0
   15958:	beq	15948 <__assert_fail@plt+0x45bc>
   1595c:	bx	lr
   15960:	str	r4, [sp, #-8]!
   15964:	str	lr, [sp, #4]
   15968:	bl	11344 <abort@plt>
   1596c:	mov	r0, #0
   15970:	bx	lr
   15974:	strd	r4, [sp, #-16]!
   15978:	str	r6, [sp, #8]
   1597c:	str	lr, [sp, #12]
   15980:	mov	r5, r0
   15984:	mov	r4, r1
   15988:	bl	15394 <__assert_fail@plt+0x4008>
   1598c:	mov	r2, r0
   15990:	mov	r3, r0
   15994:	b	159a4 <__assert_fail@plt+0x4618>
   15998:	ldr	r3, [r3, #4]
   1599c:	cmp	r3, #0
   159a0:	beq	159c0 <__assert_fail@plt+0x4634>
   159a4:	ldr	r1, [r3]
   159a8:	cmp	r1, r4
   159ac:	bne	15998 <__assert_fail@plt+0x460c>
   159b0:	ldr	r3, [r3, #4]
   159b4:	cmp	r3, #0
   159b8:	ldrne	r0, [r3]
   159bc:	bne	159e4 <__assert_fail@plt+0x4658>
   159c0:	ldr	r3, [r5, #4]
   159c4:	add	r2, r2, #8
   159c8:	cmp	r3, r2
   159cc:	bls	159e0 <__assert_fail@plt+0x4654>
   159d0:	ldr	r0, [r2]
   159d4:	cmp	r0, #0
   159d8:	beq	159c4 <__assert_fail@plt+0x4638>
   159dc:	b	159e4 <__assert_fail@plt+0x4658>
   159e0:	mov	r0, #0
   159e4:	ldrd	r4, [sp]
   159e8:	ldr	r6, [sp, #8]
   159ec:	add	sp, sp, #12
   159f0:	pop	{pc}		; (ldr pc, [sp], #4)
   159f4:	strd	r4, [sp, #-12]!
   159f8:	str	lr, [sp, #8]
   159fc:	ldr	r4, [r0]
   15a00:	ldr	r3, [r0, #4]
   15a04:	cmp	r4, r3
   15a08:	bcs	15a70 <__assert_fail@plt+0x46e4>
   15a0c:	mov	r5, r0
   15a10:	mov	r0, #0
   15a14:	b	15a28 <__assert_fail@plt+0x469c>
   15a18:	add	r4, r4, #8
   15a1c:	ldr	r3, [r5, #4]
   15a20:	cmp	r3, r4
   15a24:	bls	15a64 <__assert_fail@plt+0x46d8>
   15a28:	ldr	r3, [r4]
   15a2c:	cmp	r3, #0
   15a30:	beq	15a18 <__assert_fail@plt+0x468c>
   15a34:	cmp	r2, r0
   15a38:	bls	15a64 <__assert_fail@plt+0x46d8>
   15a3c:	add	ip, r1, r0, lsl #2
   15a40:	mov	r3, r4
   15a44:	add	r0, r0, #1
   15a48:	ldr	lr, [r3]
   15a4c:	str	lr, [ip], #4
   15a50:	ldr	r3, [r3, #4]
   15a54:	cmp	r3, #0
   15a58:	beq	15a18 <__assert_fail@plt+0x468c>
   15a5c:	cmp	r2, r0
   15a60:	bne	15a44 <__assert_fail@plt+0x46b8>
   15a64:	ldrd	r4, [sp]
   15a68:	add	sp, sp, #8
   15a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a70:	mov	r0, #0
   15a74:	b	15a64 <__assert_fail@plt+0x46d8>
   15a78:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15a7c:	strd	r6, [sp, #8]
   15a80:	strd	r8, [sp, #16]
   15a84:	str	sl, [sp, #24]
   15a88:	str	lr, [sp, #28]
   15a8c:	ldr	r8, [r0]
   15a90:	ldr	r3, [r0, #4]
   15a94:	cmp	r8, r3
   15a98:	bcs	15af8 <__assert_fail@plt+0x476c>
   15a9c:	mov	r7, r2
   15aa0:	mov	r6, r1
   15aa4:	mov	r9, r0
   15aa8:	mov	r5, #0
   15aac:	b	15ac0 <__assert_fail@plt+0x4734>
   15ab0:	add	r8, r8, #8
   15ab4:	ldr	r3, [r9, #4]
   15ab8:	cmp	r3, r8
   15abc:	bls	15afc <__assert_fail@plt+0x4770>
   15ac0:	ldr	r3, [r8]
   15ac4:	cmp	r3, #0
   15ac8:	beq	15ab0 <__assert_fail@plt+0x4724>
   15acc:	mov	r4, r8
   15ad0:	mov	r1, r7
   15ad4:	ldr	r0, [r4]
   15ad8:	blx	r6
   15adc:	cmp	r0, #0
   15ae0:	beq	15afc <__assert_fail@plt+0x4770>
   15ae4:	add	r5, r5, #1
   15ae8:	ldr	r4, [r4, #4]
   15aec:	cmp	r4, #0
   15af0:	bne	15ad0 <__assert_fail@plt+0x4744>
   15af4:	b	15ab0 <__assert_fail@plt+0x4724>
   15af8:	mov	r5, #0
   15afc:	mov	r0, r5
   15b00:	ldrd	r4, [sp]
   15b04:	ldrd	r6, [sp, #8]
   15b08:	ldrd	r8, [sp, #16]
   15b0c:	ldr	sl, [sp, #24]
   15b10:	add	sp, sp, #28
   15b14:	pop	{pc}		; (ldr pc, [sp], #4)
   15b18:	ldrb	r2, [r0]
   15b1c:	cmp	r2, #0
   15b20:	beq	15b4c <__assert_fail@plt+0x47c0>
   15b24:	mov	r3, #0
   15b28:	rsb	r3, r3, r3, lsl #5
   15b2c:	add	r3, r3, r2
   15b30:	udiv	r2, r3, r1
   15b34:	mls	r3, r1, r2, r3
   15b38:	ldrb	r2, [r0, #1]!
   15b3c:	cmp	r2, #0
   15b40:	bne	15b28 <__assert_fail@plt+0x479c>
   15b44:	mov	r0, r3
   15b48:	bx	lr
   15b4c:	mov	r3, #0
   15b50:	b	15b44 <__assert_fail@plt+0x47b8>
   15b54:	strd	r4, [sp, #-8]!
   15b58:	movw	r3, #47548	; 0xb9bc
   15b5c:	movt	r3, #1
   15b60:	ldrd	r4, [r3]
   15b64:	strd	r4, [r0]
   15b68:	ldrd	r4, [r3, #8]
   15b6c:	strd	r4, [r0, #8]
   15b70:	ldr	r3, [r3, #16]
   15b74:	str	r3, [r0, #16]
   15b78:	ldrd	r4, [sp]
   15b7c:	add	sp, sp, #8
   15b80:	bx	lr
   15b84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b88:	strd	r6, [sp, #8]
   15b8c:	str	r8, [sp, #16]
   15b90:	str	lr, [sp, #20]
   15b94:	mov	r8, r0
   15b98:	mov	r5, r1
   15b9c:	subs	r7, r2, #0
   15ba0:	movw	r2, #20904	; 0x51a8
   15ba4:	movt	r2, #1
   15ba8:	cmp	r7, #0
   15bac:	moveq	r7, r2
   15bb0:	subs	r6, r3, #0
   15bb4:	movw	r3, #20920	; 0x51b8
   15bb8:	movt	r3, #1
   15bbc:	cmp	r6, #0
   15bc0:	moveq	r6, r3
   15bc4:	mov	r0, #40	; 0x28
   15bc8:	bl	19d68 <__assert_fail@plt+0x89dc>
   15bcc:	subs	r4, r0, #0
   15bd0:	beq	15c50 <__assert_fail@plt+0x48c4>
   15bd4:	movw	r3, #47548	; 0xb9bc
   15bd8:	movt	r3, #1
   15bdc:	cmp	r5, #0
   15be0:	moveq	r5, r3
   15be4:	str	r5, [r4, #20]
   15be8:	mov	r0, r4
   15bec:	bl	151c8 <__assert_fail@plt+0x3e3c>
   15bf0:	cmp	r0, #0
   15bf4:	beq	15c68 <__assert_fail@plt+0x48dc>
   15bf8:	mov	r1, r5
   15bfc:	mov	r0, r8
   15c00:	bl	1528c <__assert_fail@plt+0x3f00>
   15c04:	str	r0, [r4, #8]
   15c08:	cmp	r0, #0
   15c0c:	beq	15c68 <__assert_fail@plt+0x48dc>
   15c10:	mov	r1, #8
   15c14:	bl	19cf4 <__assert_fail@plt+0x8968>
   15c18:	str	r0, [r4]
   15c1c:	cmp	r0, #0
   15c20:	beq	15c68 <__assert_fail@plt+0x48dc>
   15c24:	ldr	r3, [r4, #8]
   15c28:	add	r0, r0, r3, lsl #3
   15c2c:	str	r0, [r4, #4]
   15c30:	mov	r3, #0
   15c34:	str	r3, [r4, #12]
   15c38:	str	r3, [r4, #16]
   15c3c:	str	r7, [r4, #24]
   15c40:	str	r6, [r4, #28]
   15c44:	ldr	r2, [sp, #24]
   15c48:	str	r2, [r4, #32]
   15c4c:	str	r3, [r4, #36]	; 0x24
   15c50:	mov	r0, r4
   15c54:	ldrd	r4, [sp]
   15c58:	ldrd	r6, [sp, #8]
   15c5c:	ldr	r8, [sp, #16]
   15c60:	add	sp, sp, #20
   15c64:	pop	{pc}		; (ldr pc, [sp], #4)
   15c68:	mov	r0, r4
   15c6c:	bl	12dbc <__assert_fail@plt+0x1a30>
   15c70:	mov	r4, #0
   15c74:	b	15c50 <__assert_fail@plt+0x48c4>
   15c78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c7c:	strd	r6, [sp, #8]
   15c80:	str	r8, [sp, #16]
   15c84:	str	lr, [sp, #20]
   15c88:	mov	r5, r0
   15c8c:	ldr	r6, [r0]
   15c90:	ldr	r3, [r0, #4]
   15c94:	cmp	r6, r3
   15c98:	bcs	15d30 <__assert_fail@plt+0x49a4>
   15c9c:	add	r6, r6, #8
   15ca0:	mov	r7, #0
   15ca4:	b	15d10 <__assert_fail@plt+0x4984>
   15ca8:	str	r7, [r4]
   15cac:	ldr	r3, [r4, #4]
   15cb0:	ldr	r2, [r5, #36]	; 0x24
   15cb4:	str	r2, [r4, #4]
   15cb8:	str	r4, [r5, #36]	; 0x24
   15cbc:	mov	r4, r3
   15cc0:	cmp	r3, #0
   15cc4:	beq	15ce0 <__assert_fail@plt+0x4954>
   15cc8:	ldr	r3, [r5, #32]
   15ccc:	cmp	r3, #0
   15cd0:	beq	15ca8 <__assert_fail@plt+0x491c>
   15cd4:	ldr	r0, [r4]
   15cd8:	blx	r3
   15cdc:	b	15ca8 <__assert_fail@plt+0x491c>
   15ce0:	ldr	r3, [r5, #32]
   15ce4:	cmp	r3, #0
   15ce8:	beq	15cf4 <__assert_fail@plt+0x4968>
   15cec:	ldr	r0, [r8, #-8]
   15cf0:	blx	r3
   15cf4:	str	r7, [r8, #-8]
   15cf8:	str	r7, [r8, #-4]
   15cfc:	add	r2, r6, #8
   15d00:	ldr	r3, [r5, #4]
   15d04:	cmp	r3, r6
   15d08:	bls	15d30 <__assert_fail@plt+0x49a4>
   15d0c:	mov	r6, r2
   15d10:	mov	r8, r6
   15d14:	ldr	r3, [r6, #-8]
   15d18:	cmp	r3, #0
   15d1c:	beq	15cfc <__assert_fail@plt+0x4970>
   15d20:	ldr	r4, [r6, #-4]
   15d24:	cmp	r4, #0
   15d28:	bne	15cc8 <__assert_fail@plt+0x493c>
   15d2c:	b	15ce0 <__assert_fail@plt+0x4954>
   15d30:	mov	r3, #0
   15d34:	str	r3, [r5, #12]
   15d38:	str	r3, [r5, #16]
   15d3c:	ldrd	r4, [sp]
   15d40:	ldrd	r6, [sp, #8]
   15d44:	ldr	r8, [sp, #16]
   15d48:	add	sp, sp, #20
   15d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d50:	strd	r4, [sp, #-16]!
   15d54:	str	r6, [sp, #8]
   15d58:	str	lr, [sp, #12]
   15d5c:	mov	r6, r0
   15d60:	ldr	r3, [r0, #32]
   15d64:	cmp	r3, #0
   15d68:	beq	15dc8 <__assert_fail@plt+0x4a3c>
   15d6c:	ldr	r3, [r0, #16]
   15d70:	cmp	r3, #0
   15d74:	beq	15dc8 <__assert_fail@plt+0x4a3c>
   15d78:	ldr	r5, [r0]
   15d7c:	ldr	r3, [r0, #4]
   15d80:	cmp	r5, r3
   15d84:	bcc	15d9c <__assert_fail@plt+0x4a10>
   15d88:	b	15dd8 <__assert_fail@plt+0x4a4c>
   15d8c:	add	r5, r5, #8
   15d90:	ldr	r3, [r6, #4]
   15d94:	cmp	r3, r5
   15d98:	bls	15dc8 <__assert_fail@plt+0x4a3c>
   15d9c:	ldr	r3, [r5]
   15da0:	cmp	r3, #0
   15da4:	beq	15d8c <__assert_fail@plt+0x4a00>
   15da8:	mov	r4, r5
   15dac:	ldr	r3, [r6, #32]
   15db0:	ldr	r0, [r4]
   15db4:	blx	r3
   15db8:	ldr	r4, [r4, #4]
   15dbc:	cmp	r4, #0
   15dc0:	bne	15dac <__assert_fail@plt+0x4a20>
   15dc4:	b	15d8c <__assert_fail@plt+0x4a00>
   15dc8:	ldr	r5, [r6]
   15dcc:	ldr	r3, [r6, #4]
   15dd0:	cmp	r5, r3
   15dd4:	bcc	15e28 <__assert_fail@plt+0x4a9c>
   15dd8:	ldr	r0, [r6, #36]	; 0x24
   15ddc:	cmp	r0, #0
   15de0:	beq	15df8 <__assert_fail@plt+0x4a6c>
   15de4:	ldr	r4, [r0, #4]
   15de8:	bl	12dbc <__assert_fail@plt+0x1a30>
   15dec:	mov	r0, r4
   15df0:	cmp	r4, #0
   15df4:	bne	15de4 <__assert_fail@plt+0x4a58>
   15df8:	ldr	r0, [r6]
   15dfc:	bl	12dbc <__assert_fail@plt+0x1a30>
   15e00:	mov	r0, r6
   15e04:	bl	12dbc <__assert_fail@plt+0x1a30>
   15e08:	ldrd	r4, [sp]
   15e0c:	ldr	r6, [sp, #8]
   15e10:	add	sp, sp, #12
   15e14:	pop	{pc}		; (ldr pc, [sp], #4)
   15e18:	add	r5, r5, #8
   15e1c:	ldr	r3, [r6, #4]
   15e20:	cmp	r3, r5
   15e24:	bls	15dd8 <__assert_fail@plt+0x4a4c>
   15e28:	ldr	r0, [r5, #4]
   15e2c:	cmp	r0, #0
   15e30:	beq	15e18 <__assert_fail@plt+0x4a8c>
   15e34:	ldr	r4, [r0, #4]
   15e38:	bl	12dbc <__assert_fail@plt+0x1a30>
   15e3c:	mov	r0, r4
   15e40:	cmp	r4, #0
   15e44:	bne	15e34 <__assert_fail@plt+0x4aa8>
   15e48:	b	15e18 <__assert_fail@plt+0x4a8c>
   15e4c:	strd	r4, [sp, #-12]!
   15e50:	str	lr, [sp, #8]
   15e54:	sub	sp, sp, #44	; 0x2c
   15e58:	mov	r4, r0
   15e5c:	mov	r0, r1
   15e60:	ldr	r1, [r4, #20]
   15e64:	bl	1528c <__assert_fail@plt+0x3f00>
   15e68:	subs	r5, r0, #0
   15e6c:	beq	15f64 <__assert_fail@plt+0x4bd8>
   15e70:	ldr	r3, [r4, #8]
   15e74:	cmp	r3, r5
   15e78:	beq	15f7c <__assert_fail@plt+0x4bf0>
   15e7c:	mov	r1, #8
   15e80:	mov	r0, r5
   15e84:	bl	19cf4 <__assert_fail@plt+0x8968>
   15e88:	str	r0, [sp]
   15e8c:	cmp	r0, #0
   15e90:	beq	15f84 <__assert_fail@plt+0x4bf8>
   15e94:	str	r5, [sp, #8]
   15e98:	add	r0, r0, r5, lsl #3
   15e9c:	str	r0, [sp, #4]
   15ea0:	mov	r2, #0
   15ea4:	str	r2, [sp, #12]
   15ea8:	str	r2, [sp, #16]
   15eac:	ldr	r3, [r4, #20]
   15eb0:	str	r3, [sp, #20]
   15eb4:	ldr	r3, [r4, #24]
   15eb8:	str	r3, [sp, #24]
   15ebc:	ldr	r3, [r4, #28]
   15ec0:	str	r3, [sp, #28]
   15ec4:	ldr	r3, [r4, #32]
   15ec8:	str	r3, [sp, #32]
   15ecc:	ldr	r3, [r4, #36]	; 0x24
   15ed0:	str	r3, [sp, #36]	; 0x24
   15ed4:	mov	r1, r4
   15ed8:	mov	r0, sp
   15edc:	bl	153d4 <__assert_fail@plt+0x4048>
   15ee0:	subs	r5, r0, #0
   15ee4:	bne	15f2c <__assert_fail@plt+0x4ba0>
   15ee8:	ldr	r3, [sp, #36]	; 0x24
   15eec:	str	r3, [r4, #36]	; 0x24
   15ef0:	mov	r2, #1
   15ef4:	mov	r1, sp
   15ef8:	mov	r0, r4
   15efc:	bl	153d4 <__assert_fail@plt+0x4048>
   15f00:	cmp	r0, #0
   15f04:	beq	15f60 <__assert_fail@plt+0x4bd4>
   15f08:	mov	r2, #0
   15f0c:	mov	r1, sp
   15f10:	mov	r0, r4
   15f14:	bl	153d4 <__assert_fail@plt+0x4048>
   15f18:	cmp	r0, #0
   15f1c:	beq	15f60 <__assert_fail@plt+0x4bd4>
   15f20:	ldr	r0, [sp]
   15f24:	bl	12dbc <__assert_fail@plt+0x1a30>
   15f28:	b	15f68 <__assert_fail@plt+0x4bdc>
   15f2c:	ldr	r0, [r4]
   15f30:	bl	12dbc <__assert_fail@plt+0x1a30>
   15f34:	ldr	r3, [sp]
   15f38:	str	r3, [r4]
   15f3c:	ldr	r3, [sp, #4]
   15f40:	str	r3, [r4, #4]
   15f44:	ldr	r3, [sp, #8]
   15f48:	str	r3, [r4, #8]
   15f4c:	ldr	r3, [sp, #12]
   15f50:	str	r3, [r4, #12]
   15f54:	ldr	r3, [sp, #36]	; 0x24
   15f58:	str	r3, [r4, #36]	; 0x24
   15f5c:	b	15f68 <__assert_fail@plt+0x4bdc>
   15f60:	bl	11344 <abort@plt>
   15f64:	mov	r5, #0
   15f68:	mov	r0, r5
   15f6c:	add	sp, sp, #44	; 0x2c
   15f70:	ldrd	r4, [sp]
   15f74:	add	sp, sp, #8
   15f78:	pop	{pc}		; (ldr pc, [sp], #4)
   15f7c:	mov	r5, #1
   15f80:	b	15f68 <__assert_fail@plt+0x4bdc>
   15f84:	mov	r5, #0
   15f88:	b	15f68 <__assert_fail@plt+0x4bdc>
   15f8c:	strd	r4, [sp, #-16]!
   15f90:	str	r6, [sp, #8]
   15f94:	str	lr, [sp, #12]
   15f98:	sub	sp, sp, #8
   15f9c:	subs	r5, r1, #0
   15fa0:	beq	15fec <__assert_fail@plt+0x4c60>
   15fa4:	mov	r4, r0
   15fa8:	mov	r6, r2
   15fac:	mov	r3, #0
   15fb0:	add	r2, sp, #4
   15fb4:	mov	r1, r5
   15fb8:	bl	15558 <__assert_fail@plt+0x41cc>
   15fbc:	cmp	r0, #0
   15fc0:	beq	15ff0 <__assert_fail@plt+0x4c64>
   15fc4:	cmp	r6, #0
   15fc8:	moveq	r0, #0
   15fcc:	beq	15fd8 <__assert_fail@plt+0x4c4c>
   15fd0:	str	r0, [r6]
   15fd4:	mov	r0, #0
   15fd8:	add	sp, sp, #8
   15fdc:	ldrd	r4, [sp]
   15fe0:	ldr	r6, [sp, #8]
   15fe4:	add	sp, sp, #12
   15fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fec:	bl	11344 <abort@plt>
   15ff0:	vldr	s15, [r4, #12]
   15ff4:	vcvt.f32.u32	s14, s15
   15ff8:	ldr	r3, [r4, #20]
   15ffc:	vldr	s15, [r4, #8]
   16000:	vcvt.f32.u32	s15, s15
   16004:	vldr	s13, [r3, #8]
   16008:	vmul.f32	s15, s15, s13
   1600c:	vcmpe.f32	s14, s15
   16010:	vmrs	APSR_nzcv, fpscr
   16014:	bgt	16064 <__assert_fail@plt+0x4cd8>
   16018:	ldr	r3, [sp, #4]
   1601c:	ldr	r2, [r3]
   16020:	cmp	r2, #0
   16024:	beq	16110 <__assert_fail@plt+0x4d84>
   16028:	ldr	r0, [r4, #36]	; 0x24
   1602c:	cmp	r0, #0
   16030:	beq	160f8 <__assert_fail@plt+0x4d6c>
   16034:	ldr	r3, [r0, #4]
   16038:	str	r3, [r4, #36]	; 0x24
   1603c:	str	r5, [r0]
   16040:	ldr	r3, [sp, #4]
   16044:	ldr	r2, [r3, #4]
   16048:	str	r2, [r0, #4]
   1604c:	str	r0, [r3, #4]
   16050:	ldr	r3, [r4, #16]
   16054:	add	r3, r3, #1
   16058:	str	r3, [r4, #16]
   1605c:	mov	r0, #1
   16060:	b	15fd8 <__assert_fail@plt+0x4c4c>
   16064:	mov	r0, r4
   16068:	bl	151c8 <__assert_fail@plt+0x3e3c>
   1606c:	ldr	r3, [r4, #20]
   16070:	vldr	s13, [r3, #8]
   16074:	vldr	s15, [r4, #8]
   16078:	vcvt.f32.u32	s15, s15
   1607c:	vldr	s14, [r4, #12]
   16080:	vcvt.f32.u32	s14, s14
   16084:	vmul.f32	s12, s13, s15
   16088:	vcmpe.f32	s14, s12
   1608c:	vmrs	APSR_nzcv, fpscr
   16090:	ble	16018 <__assert_fail@plt+0x4c8c>
   16094:	ldrb	r2, [r3, #16]
   16098:	cmp	r2, #0
   1609c:	vldr	s14, [r3, #12]
   160a0:	vmul.f32	s15, s15, s14
   160a4:	vmuleq.f32	s15, s15, s13
   160a8:	vldr	s14, [pc, #132]	; 16134 <__assert_fail@plt+0x4da8>
   160ac:	vcmpe.f32	s15, s14
   160b0:	vmrs	APSR_nzcv, fpscr
   160b4:	mvnge	r0, #0
   160b8:	bge	15fd8 <__assert_fail@plt+0x4c4c>
   160bc:	vcvt.u32.f32	s15, s15
   160c0:	vmov	r1, s15
   160c4:	mov	r0, r4
   160c8:	bl	15e4c <__assert_fail@plt+0x4ac0>
   160cc:	cmp	r0, #0
   160d0:	mvneq	r0, #0
   160d4:	beq	15fd8 <__assert_fail@plt+0x4c4c>
   160d8:	mov	r3, #0
   160dc:	add	r2, sp, #4
   160e0:	mov	r1, r5
   160e4:	mov	r0, r4
   160e8:	bl	15558 <__assert_fail@plt+0x41cc>
   160ec:	cmp	r0, #0
   160f0:	beq	16018 <__assert_fail@plt+0x4c8c>
   160f4:	bl	11344 <abort@plt>
   160f8:	mov	r0, #8
   160fc:	bl	19d68 <__assert_fail@plt+0x89dc>
   16100:	cmp	r0, #0
   16104:	mvneq	r0, #0
   16108:	beq	15fd8 <__assert_fail@plt+0x4c4c>
   1610c:	b	1603c <__assert_fail@plt+0x4cb0>
   16110:	str	r5, [r3]
   16114:	ldr	r3, [r4, #16]
   16118:	add	r3, r3, #1
   1611c:	str	r3, [r4, #16]
   16120:	ldr	r3, [r4, #12]
   16124:	add	r3, r3, #1
   16128:	str	r3, [r4, #12]
   1612c:	mov	r0, #1
   16130:	b	15fd8 <__assert_fail@plt+0x4c4c>
   16134:	svcmi	0x00800000
   16138:	str	r4, [sp, #-8]!
   1613c:	str	lr, [sp, #4]
   16140:	sub	sp, sp, #8
   16144:	mov	r4, r1
   16148:	add	r2, sp, #4
   1614c:	bl	15f8c <__assert_fail@plt+0x4c00>
   16150:	cmn	r0, #1
   16154:	moveq	r0, #0
   16158:	beq	16168 <__assert_fail@plt+0x4ddc>
   1615c:	cmp	r0, #0
   16160:	ldreq	r0, [sp, #4]
   16164:	movne	r0, r4
   16168:	add	sp, sp, #8
   1616c:	ldr	r4, [sp]
   16170:	add	sp, sp, #4
   16174:	pop	{pc}		; (ldr pc, [sp], #4)
   16178:	strd	r4, [sp, #-16]!
   1617c:	str	r6, [sp, #8]
   16180:	str	lr, [sp, #12]
   16184:	sub	sp, sp, #8
   16188:	mov	r4, r0
   1618c:	mov	r3, #1
   16190:	add	r2, sp, #4
   16194:	bl	15558 <__assert_fail@plt+0x41cc>
   16198:	subs	r5, r0, #0
   1619c:	beq	161bc <__assert_fail@plt+0x4e30>
   161a0:	ldr	r3, [r4, #16]
   161a4:	sub	r3, r3, #1
   161a8:	str	r3, [r4, #16]
   161ac:	ldr	r3, [sp, #4]
   161b0:	ldr	r3, [r3]
   161b4:	cmp	r3, #0
   161b8:	beq	161d4 <__assert_fail@plt+0x4e48>
   161bc:	mov	r0, r5
   161c0:	add	sp, sp, #8
   161c4:	ldrd	r4, [sp]
   161c8:	ldr	r6, [sp, #8]
   161cc:	add	sp, sp, #12
   161d0:	pop	{pc}		; (ldr pc, [sp], #4)
   161d4:	ldr	r3, [r4, #12]
   161d8:	sub	r3, r3, #1
   161dc:	str	r3, [r4, #12]
   161e0:	vmov	s15, r3
   161e4:	vcvt.f32.u32	s15, s15
   161e8:	ldr	r3, [r4, #20]
   161ec:	vldr	s14, [r4, #8]
   161f0:	vcvt.f32.u32	s14, s14
   161f4:	vldr	s13, [r3]
   161f8:	vmul.f32	s14, s14, s13
   161fc:	vcmpe.f32	s15, s14
   16200:	vmrs	APSR_nzcv, fpscr
   16204:	bpl	161bc <__assert_fail@plt+0x4e30>
   16208:	mov	r0, r4
   1620c:	bl	151c8 <__assert_fail@plt+0x3e3c>
   16210:	ldr	r3, [r4, #20]
   16214:	vldr	s15, [r4, #8]
   16218:	vcvt.f32.u32	s15, s15
   1621c:	vldr	s14, [r4, #12]
   16220:	vcvt.f32.u32	s13, s14
   16224:	vldr	s14, [r3]
   16228:	vmul.f32	s14, s15, s14
   1622c:	vcmpe.f32	s13, s14
   16230:	vmrs	APSR_nzcv, fpscr
   16234:	bpl	161bc <__assert_fail@plt+0x4e30>
   16238:	ldrb	r2, [r3, #16]
   1623c:	cmp	r2, #0
   16240:	vldr	s14, [r3, #4]
   16244:	vmuleq.f32	s15, s15, s14
   16248:	vldreq	s14, [r3, #8]
   1624c:	vmul.f32	s15, s15, s14
   16250:	vcvt.u32.f32	s15, s15
   16254:	vmov	r1, s15
   16258:	mov	r0, r4
   1625c:	bl	15e4c <__assert_fail@plt+0x4ac0>
   16260:	cmp	r0, #0
   16264:	bne	161bc <__assert_fail@plt+0x4e30>
   16268:	ldr	r0, [r4, #36]	; 0x24
   1626c:	cmp	r0, #0
   16270:	beq	16288 <__assert_fail@plt+0x4efc>
   16274:	ldr	r6, [r0, #4]
   16278:	bl	12dbc <__assert_fail@plt+0x1a30>
   1627c:	mov	r0, r6
   16280:	cmp	r6, #0
   16284:	bne	16274 <__assert_fail@plt+0x4ee8>
   16288:	mov	r3, #0
   1628c:	str	r3, [r4, #36]	; 0x24
   16290:	b	161bc <__assert_fail@plt+0x4e30>
   16294:	str	r4, [sp, #-8]!
   16298:	str	lr, [sp, #4]
   1629c:	bl	16178 <__assert_fail@plt+0x4dec>
   162a0:	ldr	r4, [sp]
   162a4:	add	sp, sp, #4
   162a8:	pop	{pc}		; (ldr pc, [sp], #4)
   162ac:	mov	r3, #1
   162b0:	strb	r3, [r0, #28]
   162b4:	mov	r3, #0
   162b8:	str	r3, [r0, #20]
   162bc:	str	r3, [r0, #24]
   162c0:	str	r1, [r0]
   162c4:	str	r1, [r0, #4]
   162c8:	str	r1, [r0, #8]
   162cc:	str	r1, [r0, #12]
   162d0:	str	r1, [r0, #16]
   162d4:	bx	lr
   162d8:	ldrb	r0, [r0, #28]
   162dc:	bx	lr
   162e0:	mov	r2, r0
   162e4:	ldrb	ip, [r0, #28]
   162e8:	eor	ip, ip, #1
   162ec:	ldr	r3, [r0, #20]
   162f0:	add	r3, ip, r3
   162f4:	and	r3, r3, #3
   162f8:	ldr	r0, [r0, r3, lsl #2]
   162fc:	str	r1, [r2, r3, lsl #2]
   16300:	str	r3, [r2, #20]
   16304:	ldr	r1, [r2, #24]
   16308:	cmp	r1, r3
   1630c:	beq	1631c <__assert_fail@plt+0x4f90>
   16310:	mov	r3, #0
   16314:	strb	r3, [r2, #28]
   16318:	bx	lr
   1631c:	add	ip, ip, r1
   16320:	and	ip, ip, #3
   16324:	str	ip, [r2, #24]
   16328:	b	16310 <__assert_fail@plt+0x4f84>
   1632c:	ldrb	r3, [r0, #28]
   16330:	cmp	r3, #0
   16334:	bne	16370 <__assert_fail@plt+0x4fe4>
   16338:	ldr	r3, [r0, #20]
   1633c:	ldr	r2, [r0, r3, lsl #2]
   16340:	ldr	r1, [r0, #16]
   16344:	str	r1, [r0, r3, lsl #2]
   16348:	ldr	r1, [r0, #24]
   1634c:	cmp	r3, r1
   16350:	moveq	r3, #1
   16354:	strbeq	r3, [r0, #28]
   16358:	beq	16368 <__assert_fail@plt+0x4fdc>
   1635c:	add	r3, r3, #3
   16360:	and	r3, r3, #3
   16364:	str	r3, [r0, #20]
   16368:	mov	r0, r2
   1636c:	bx	lr
   16370:	str	r4, [sp, #-8]!
   16374:	str	lr, [sp, #4]
   16378:	bl	11344 <abort@plt>
   1637c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16380:	str	r6, [sp, #8]
   16384:	strd	r8, [sp, #12]
   16388:	str	lr, [sp, #20]
   1638c:	mov	r4, r0
   16390:	mov	r5, r1
   16394:	add	r6, r2, #20
   16398:	mov	r3, #0
   1639c:	strb	r3, [r2, #20]
   163a0:	mov	r8, #10
   163a4:	mov	r9, #0
   163a8:	b	163b4 <__assert_fail@plt+0x5028>
   163ac:	mov	r4, r0
   163b0:	mov	r5, r1
   163b4:	mov	r2, r8
   163b8:	mov	r3, r9
   163bc:	mov	r0, r4
   163c0:	mov	r1, r5
   163c4:	bl	1a658 <__assert_fail@plt+0x92cc>
   163c8:	add	r2, r2, #48	; 0x30
   163cc:	strb	r2, [r6, #-1]!
   163d0:	mov	r2, r8
   163d4:	mov	r3, r9
   163d8:	mov	r0, r4
   163dc:	mov	r1, r5
   163e0:	bl	1a658 <__assert_fail@plt+0x92cc>
   163e4:	cmp	r5, #0
   163e8:	cmpeq	r4, #9
   163ec:	bhi	163ac <__assert_fail@plt+0x5020>
   163f0:	mov	r0, r6
   163f4:	ldrd	r4, [sp]
   163f8:	ldr	r6, [sp, #8]
   163fc:	ldrd	r8, [sp, #12]
   16400:	add	sp, sp, #20
   16404:	pop	{pc}		; (ldr pc, [sp], #4)
   16408:	push	{r2, r3}
   1640c:	push	{lr}		; (str lr, [sp, #-4]!)
   16410:	sub	sp, sp, #12
   16414:	ldr	r2, [sp, #16]
   16418:	tst	r2, #64	; 0x40
   1641c:	addne	r3, sp, #24
   16420:	strne	r3, [sp, #4]
   16424:	ldrne	r3, [sp, #20]
   16428:	moveq	r3, #0
   1642c:	bl	11224 <openat64@plt>
   16430:	bl	18828 <__assert_fail@plt+0x749c>
   16434:	add	sp, sp, #12
   16438:	pop	{lr}		; (ldr lr, [sp], #4)
   1643c:	add	sp, sp, #8
   16440:	bx	lr
   16444:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16448:	strd	r6, [sp, #8]
   1644c:	str	r8, [sp, #16]
   16450:	str	lr, [sp, #20]
   16454:	mov	r6, r3
   16458:	orr	r2, r2, #540672	; 0x84000
   1645c:	orr	r2, r2, #2304	; 0x900
   16460:	bl	16408 <__assert_fail@plt+0x507c>
   16464:	subs	r4, r0, #0
   16468:	movlt	r5, #0
   1646c:	blt	16484 <__assert_fail@plt+0x50f8>
   16470:	mov	r0, r4
   16474:	bl	112e4 <fdopendir@plt>
   16478:	subs	r5, r0, #0
   1647c:	strne	r4, [r6]
   16480:	beq	1649c <__assert_fail@plt+0x5110>
   16484:	mov	r0, r5
   16488:	ldrd	r4, [sp]
   1648c:	ldrd	r6, [sp, #8]
   16490:	ldr	r8, [sp, #16]
   16494:	add	sp, sp, #20
   16498:	pop	{pc}		; (ldr pc, [sp], #4)
   1649c:	bl	1123c <__errno_location@plt>
   164a0:	mov	r6, r0
   164a4:	ldr	r7, [r0]
   164a8:	mov	r0, r4
   164ac:	bl	11350 <close@plt>
   164b0:	str	r7, [r6]
   164b4:	b	16484 <__assert_fail@plt+0x50f8>
   164b8:	strd	r4, [sp, #-16]!
   164bc:	str	r6, [sp, #8]
   164c0:	str	lr, [sp, #12]
   164c4:	subs	r4, r0, #0
   164c8:	beq	16564 <__assert_fail@plt+0x51d8>
   164cc:	mov	r1, #47	; 0x2f
   164d0:	mov	r0, r4
   164d4:	bl	112c0 <strrchr@plt>
   164d8:	subs	r5, r0, #0
   164dc:	beq	1653c <__assert_fail@plt+0x51b0>
   164e0:	add	r6, r5, #1
   164e4:	sub	r3, r6, r4
   164e8:	cmp	r3, #6
   164ec:	ble	1653c <__assert_fail@plt+0x51b0>
   164f0:	mov	r2, #7
   164f4:	movw	r1, #47732	; 0xba74
   164f8:	movt	r1, #1
   164fc:	sub	r0, r5, #6
   16500:	bl	11338 <strncmp@plt>
   16504:	cmp	r0, #0
   16508:	bne	1653c <__assert_fail@plt+0x51b0>
   1650c:	mov	r2, #3
   16510:	movw	r1, #47740	; 0xba7c
   16514:	movt	r1, #1
   16518:	mov	r0, r6
   1651c:	bl	11338 <strncmp@plt>
   16520:	cmp	r0, #0
   16524:	movne	r4, r6
   16528:	bne	1653c <__assert_fail@plt+0x51b0>
   1652c:	add	r4, r5, #4
   16530:	movw	r3, #53640	; 0xd188
   16534:	movt	r3, #2
   16538:	str	r4, [r3]
   1653c:	movw	r3, #53704	; 0xd1c8
   16540:	movt	r3, #2
   16544:	str	r4, [r3]
   16548:	movw	r3, #53644	; 0xd18c
   1654c:	movt	r3, #2
   16550:	str	r4, [r3]
   16554:	ldrd	r4, [sp]
   16558:	ldr	r6, [sp, #8]
   1655c:	add	sp, sp, #12
   16560:	pop	{pc}		; (ldr pc, [sp], #4)
   16564:	movw	r3, #53656	; 0xd198
   16568:	movt	r3, #2
   1656c:	ldr	r3, [r3]
   16570:	mov	r2, #55	; 0x37
   16574:	mov	r1, #1
   16578:	movw	r0, #47676	; 0xba3c
   1657c:	movt	r0, #1
   16580:	bl	1114c <fwrite@plt>
   16584:	bl	11344 <abort@plt>
   16588:	mov	r2, #0
   1658c:	mov	r3, #0
   16590:	strd	r2, [r0]
   16594:	strd	r2, [r0, #8]
   16598:	strd	r2, [r0, #16]
   1659c:	strd	r2, [r0, #24]
   165a0:	strd	r2, [r0, #32]
   165a4:	strd	r2, [r0, #40]	; 0x28
   165a8:	cmp	r1, #10
   165ac:	beq	165b8 <__assert_fail@plt+0x522c>
   165b0:	str	r1, [r0]
   165b4:	bx	lr
   165b8:	str	r4, [sp, #-8]!
   165bc:	str	lr, [sp, #4]
   165c0:	bl	11344 <abort@plt>
   165c4:	strd	r4, [sp, #-16]!
   165c8:	str	r6, [sp, #8]
   165cc:	str	lr, [sp, #12]
   165d0:	mov	r5, r0
   165d4:	mov	r6, r1
   165d8:	mov	r2, #5
   165dc:	mov	r1, r0
   165e0:	mov	r0, #0
   165e4:	bl	11104 <dcgettext@plt>
   165e8:	mov	r4, r0
   165ec:	cmp	r5, r0
   165f0:	beq	16608 <__assert_fail@plt+0x527c>
   165f4:	mov	r0, r4
   165f8:	ldrd	r4, [sp]
   165fc:	ldr	r6, [sp, #8]
   16600:	add	sp, sp, #12
   16604:	pop	{pc}		; (ldr pc, [sp], #4)
   16608:	bl	1a42c <__assert_fail@plt+0x90a0>
   1660c:	ldrb	r3, [r0]
   16610:	bic	r3, r3, #32
   16614:	cmp	r3, #85	; 0x55
   16618:	bne	1669c <__assert_fail@plt+0x5310>
   1661c:	ldrb	r3, [r0, #1]
   16620:	bic	r3, r3, #32
   16624:	cmp	r3, #84	; 0x54
   16628:	bne	16660 <__assert_fail@plt+0x52d4>
   1662c:	ldrb	r3, [r0, #2]
   16630:	bic	r3, r3, #32
   16634:	cmp	r3, #70	; 0x46
   16638:	bne	16660 <__assert_fail@plt+0x52d4>
   1663c:	ldrb	r3, [r0, #3]
   16640:	cmp	r3, #45	; 0x2d
   16644:	bne	16660 <__assert_fail@plt+0x52d4>
   16648:	ldrb	r3, [r0, #4]
   1664c:	cmp	r3, #56	; 0x38
   16650:	bne	16660 <__assert_fail@plt+0x52d4>
   16654:	ldrb	r3, [r0, #5]
   16658:	cmp	r3, #0
   1665c:	beq	1667c <__assert_fail@plt+0x52f0>
   16660:	movw	r4, #47828	; 0xbad4
   16664:	movt	r4, #1
   16668:	movw	r3, #47848	; 0xbae8
   1666c:	movt	r3, #1
   16670:	cmp	r6, #9
   16674:	movne	r4, r3
   16678:	b	165f4 <__assert_fail@plt+0x5268>
   1667c:	ldrb	r2, [r4]
   16680:	movw	r4, #47844	; 0xbae4
   16684:	movt	r4, #1
   16688:	movw	r3, #47832	; 0xbad8
   1668c:	movt	r3, #1
   16690:	cmp	r2, #96	; 0x60
   16694:	movne	r4, r3
   16698:	b	165f4 <__assert_fail@plt+0x5268>
   1669c:	cmp	r3, #71	; 0x47
   166a0:	bne	16660 <__assert_fail@plt+0x52d4>
   166a4:	ldrb	r3, [r0, #1]
   166a8:	bic	r3, r3, #32
   166ac:	cmp	r3, #66	; 0x42
   166b0:	bne	16660 <__assert_fail@plt+0x52d4>
   166b4:	ldrb	r3, [r0, #2]
   166b8:	cmp	r3, #49	; 0x31
   166bc:	bne	16660 <__assert_fail@plt+0x52d4>
   166c0:	ldrb	r3, [r0, #3]
   166c4:	cmp	r3, #56	; 0x38
   166c8:	bne	16660 <__assert_fail@plt+0x52d4>
   166cc:	ldrb	r3, [r0, #4]
   166d0:	cmp	r3, #48	; 0x30
   166d4:	bne	16660 <__assert_fail@plt+0x52d4>
   166d8:	ldrb	r3, [r0, #5]
   166dc:	cmp	r3, #51	; 0x33
   166e0:	bne	16660 <__assert_fail@plt+0x52d4>
   166e4:	ldrb	r3, [r0, #6]
   166e8:	cmp	r3, #48	; 0x30
   166ec:	bne	16660 <__assert_fail@plt+0x52d4>
   166f0:	ldrb	r3, [r0, #7]
   166f4:	cmp	r3, #0
   166f8:	bne	16660 <__assert_fail@plt+0x52d4>
   166fc:	ldrb	r2, [r4]
   16700:	movw	r4, #47840	; 0xbae0
   16704:	movt	r4, #1
   16708:	movw	r3, #47836	; 0xbadc
   1670c:	movt	r3, #1
   16710:	cmp	r2, #96	; 0x60
   16714:	movne	r4, r3
   16718:	b	165f4 <__assert_fail@plt+0x5268>
   1671c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16720:	strd	r6, [sp, #8]
   16724:	strd	r8, [sp, #16]
   16728:	strd	sl, [sp, #24]
   1672c:	str	lr, [sp, #32]
   16730:	sub	sp, sp, #116	; 0x74
   16734:	str	r0, [sp, #64]	; 0x40
   16738:	mov	r8, r1
   1673c:	str	r2, [sp, #48]	; 0x30
   16740:	str	r3, [sp, #24]
   16744:	ldr	r7, [sp, #152]	; 0x98
   16748:	bl	11164 <__ctype_get_mb_cur_max@plt>
   1674c:	str	r0, [sp, #76]	; 0x4c
   16750:	ldr	r3, [sp, #156]	; 0x9c
   16754:	ubfx	r3, r3, #1, #1
   16758:	str	r3, [sp, #32]
   1675c:	mov	r3, #1
   16760:	str	r3, [sp, #40]	; 0x28
   16764:	mov	r3, #0
   16768:	str	r3, [sp, #68]	; 0x44
   1676c:	str	r3, [sp, #36]	; 0x24
   16770:	str	r3, [sp, #28]
   16774:	str	r3, [sp, #52]	; 0x34
   16778:	str	r3, [sp, #60]	; 0x3c
   1677c:	str	r3, [sp, #72]	; 0x48
   16780:	movw	r3, #47852	; 0xbaec
   16784:	movt	r3, #1
   16788:	str	r3, [sp, #80]	; 0x50
   1678c:	mov	r9, r8
   16790:	mov	sl, r7
   16794:	cmp	sl, #10
   16798:	ldrls	pc, [pc, sl, lsl #2]
   1679c:	b	16960 <__assert_fail@plt+0x55d4>
   167a0:	andeq	r6, r1, r0, lsl #16
   167a4:	ldrdeq	r6, [r1], -r4
   167a8:	andeq	r6, r1, r8, lsr r9
   167ac:	andeq	r6, r1, ip, asr #15
   167b0:	andeq	r6, r1, ip, ror #17
   167b4:	andeq	r6, r1, r0, lsl r8
   167b8:	ldrdeq	r7, [r1], -ip
   167bc:	andeq	r6, r1, r4, ror #18
   167c0:	andeq	r6, r1, ip, asr #16
   167c4:	andeq	r6, r1, ip, asr #16
   167c8:	andeq	r6, r1, ip, asr #16
   167cc:	mov	r3, #1
   167d0:	str	r3, [sp, #28]
   167d4:	mov	r3, #1
   167d8:	str	r3, [sp, #32]
   167dc:	str	r3, [sp, #52]	; 0x34
   167e0:	movw	r3, #47848	; 0xbae8
   167e4:	movt	r3, #1
   167e8:	str	r3, [sp, #60]	; 0x3c
   167ec:	mov	fp, #0
   167f0:	mov	sl, #2
   167f4:	mov	r6, #0
   167f8:	ldr	r8, [sp, #64]	; 0x40
   167fc:	b	17074 <__assert_fail@plt+0x5ce8>
   16800:	mov	fp, sl
   16804:	mov	r3, #0
   16808:	str	r3, [sp, #32]
   1680c:	b	167f4 <__assert_fail@plt+0x5468>
   16810:	ldr	r3, [sp, #32]
   16814:	cmp	r3, #0
   16818:	bne	16978 <__assert_fail@plt+0x55ec>
   1681c:	cmp	r9, #0
   16820:	beq	1699c <__assert_fail@plt+0x5610>
   16824:	mov	r3, #34	; 0x22
   16828:	ldr	r2, [sp, #64]	; 0x40
   1682c:	strb	r3, [r2]
   16830:	mov	fp, #1
   16834:	str	fp, [sp, #28]
   16838:	str	fp, [sp, #52]	; 0x34
   1683c:	movw	r3, #47828	; 0xbad4
   16840:	movt	r3, #1
   16844:	str	r3, [sp, #60]	; 0x3c
   16848:	b	167f4 <__assert_fail@plt+0x5468>
   1684c:	cmp	sl, #10
   16850:	bne	16884 <__assert_fail@plt+0x54f8>
   16854:	ldr	r3, [sp, #32]
   16858:	cmp	r3, #0
   1685c:	movne	fp, #0
   16860:	beq	168ac <__assert_fail@plt+0x5520>
   16864:	ldr	r0, [sp, #168]	; 0xa8
   16868:	bl	1120c <strlen@plt>
   1686c:	str	r0, [sp, #52]	; 0x34
   16870:	ldr	r3, [sp, #168]	; 0xa8
   16874:	str	r3, [sp, #60]	; 0x3c
   16878:	mov	r3, #1
   1687c:	str	r3, [sp, #28]
   16880:	b	167f4 <__assert_fail@plt+0x5468>
   16884:	mov	r1, sl
   16888:	ldr	r0, [sp, #80]	; 0x50
   1688c:	bl	165c4 <__assert_fail@plt+0x5238>
   16890:	str	r0, [sp, #164]	; 0xa4
   16894:	mov	r1, sl
   16898:	movw	r0, #47848	; 0xbae8
   1689c:	movt	r0, #1
   168a0:	bl	165c4 <__assert_fail@plt+0x5238>
   168a4:	str	r0, [sp, #168]	; 0xa8
   168a8:	b	16854 <__assert_fail@plt+0x54c8>
   168ac:	ldr	r3, [sp, #164]	; 0xa4
   168b0:	ldrb	r3, [r3]
   168b4:	cmp	r3, #0
   168b8:	beq	168e4 <__assert_fail@plt+0x5558>
   168bc:	ldr	r2, [sp, #164]	; 0xa4
   168c0:	mov	fp, #0
   168c4:	ldr	r1, [sp, #64]	; 0x40
   168c8:	cmp	r9, fp
   168cc:	strbhi	r3, [r1, fp]
   168d0:	add	fp, fp, #1
   168d4:	ldrb	r3, [r2, #1]!
   168d8:	cmp	r3, #0
   168dc:	bne	168c8 <__assert_fail@plt+0x553c>
   168e0:	b	16864 <__assert_fail@plt+0x54d8>
   168e4:	mov	fp, #0
   168e8:	b	16864 <__assert_fail@plt+0x54d8>
   168ec:	ldr	r3, [sp, #32]
   168f0:	cmp	r3, #0
   168f4:	bne	167d4 <__assert_fail@plt+0x5448>
   168f8:	mov	r3, #1
   168fc:	str	r3, [sp, #28]
   16900:	cmp	r9, #0
   16904:	beq	169b8 <__assert_fail@plt+0x562c>
   16908:	mov	r3, #39	; 0x27
   1690c:	ldr	r2, [sp, #64]	; 0x40
   16910:	strb	r3, [r2]
   16914:	mov	r3, #0
   16918:	str	r3, [sp, #32]
   1691c:	mov	fp, #1
   16920:	str	fp, [sp, #52]	; 0x34
   16924:	movw	r3, #47848	; 0xbae8
   16928:	movt	r3, #1
   1692c:	str	r3, [sp, #60]	; 0x3c
   16930:	mov	sl, #2
   16934:	b	167f4 <__assert_fail@plt+0x5468>
   16938:	ldr	r3, [sp, #32]
   1693c:	cmp	r3, #0
   16940:	beq	16900 <__assert_fail@plt+0x5574>
   16944:	mov	r3, #1
   16948:	str	r3, [sp, #52]	; 0x34
   1694c:	movw	r3, #47848	; 0xbae8
   16950:	movt	r3, #1
   16954:	str	r3, [sp, #60]	; 0x3c
   16958:	mov	fp, #0
   1695c:	b	167f4 <__assert_fail@plt+0x5468>
   16960:	bl	11344 <abort@plt>
   16964:	mov	fp, #0
   16968:	str	fp, [sp, #32]
   1696c:	mov	r3, #1
   16970:	str	r3, [sp, #28]
   16974:	b	167f4 <__assert_fail@plt+0x5468>
   16978:	ldr	r3, [sp, #32]
   1697c:	str	r3, [sp, #28]
   16980:	mov	r3, #1
   16984:	str	r3, [sp, #52]	; 0x34
   16988:	movw	r3, #47828	; 0xbad4
   1698c:	movt	r3, #1
   16990:	str	r3, [sp, #60]	; 0x3c
   16994:	mov	fp, #0
   16998:	b	167f4 <__assert_fail@plt+0x5468>
   1699c:	mov	fp, #1
   169a0:	str	fp, [sp, #28]
   169a4:	str	fp, [sp, #52]	; 0x34
   169a8:	movw	r3, #47828	; 0xbad4
   169ac:	movt	r3, #1
   169b0:	str	r3, [sp, #60]	; 0x3c
   169b4:	b	167f4 <__assert_fail@plt+0x5468>
   169b8:	mov	r3, #0
   169bc:	str	r3, [sp, #32]
   169c0:	mov	fp, #1
   169c4:	str	fp, [sp, #52]	; 0x34
   169c8:	movw	r3, #47848	; 0xbae8
   169cc:	movt	r3, #1
   169d0:	str	r3, [sp, #60]	; 0x3c
   169d4:	mov	sl, #2
   169d8:	b	167f4 <__assert_fail@plt+0x5468>
   169dc:	mov	r3, r2
   169e0:	add	r4, r6, r2
   169e4:	ldr	r2, [sp, #24]
   169e8:	cmp	r3, #1
   169ec:	movls	r3, #0
   169f0:	movhi	r3, #1
   169f4:	cmn	r2, #1
   169f8:	movne	r3, #0
   169fc:	cmp	r3, #0
   16a00:	beq	16a10 <__assert_fail@plt+0x5684>
   16a04:	ldr	r0, [sp, #48]	; 0x30
   16a08:	bl	1120c <strlen@plt>
   16a0c:	str	r0, [sp, #24]
   16a10:	ldr	r3, [sp, #24]
   16a14:	cmp	r4, r3
   16a18:	bhi	17c04 <__assert_fail@plt+0x6878>
   16a1c:	ldr	r3, [sp, #48]	; 0x30
   16a20:	add	r4, r3, r6
   16a24:	ldr	r2, [sp, #52]	; 0x34
   16a28:	ldr	r1, [sp, #60]	; 0x3c
   16a2c:	mov	r0, r4
   16a30:	bl	110e0 <memcmp@plt>
   16a34:	cmp	r0, #0
   16a38:	bne	17c04 <__assert_fail@plt+0x6878>
   16a3c:	ldr	r3, [sp, #32]
   16a40:	cmp	r3, #0
   16a44:	bne	16c54 <__assert_fail@plt+0x58c8>
   16a48:	ldrb	r4, [r4]
   16a4c:	cmp	r4, #126	; 0x7e
   16a50:	ldrls	pc, [pc, r4, lsl #2]
   16a54:	b	17508 <__assert_fail@plt+0x617c>
   16a58:	muleq	r1, r8, ip
   16a5c:	andeq	r7, r1, r8, lsl #10
   16a60:	andeq	r7, r1, r8, lsl #10
   16a64:	andeq	r7, r1, r8, lsl #10
   16a68:	andeq	r7, r1, r8, lsl #10
   16a6c:	andeq	r7, r1, r8, lsl #10
   16a70:	andeq	r7, r1, r8, lsl #10
   16a74:			; <UNDEFINED> instruction: 0x000173b0
   16a78:	andeq	r6, r1, r4, lsr pc
   16a7c:	ldrdeq	r7, [r1], -r8
   16a80:	andeq	r7, r1, r4, lsl #7
   16a84:	andeq	r7, r1, ip, ror #5
   16a88:	andeq	r6, r1, r8, asr #30
   16a8c:	andeq	r6, r1, ip, asr pc
   16a90:	andeq	r7, r1, r8, lsl #10
   16a94:	andeq	r7, r1, r8, lsl #10
   16a98:	andeq	r7, r1, r8, lsl #10
   16a9c:	andeq	r7, r1, r8, lsl #10
   16aa0:	andeq	r7, r1, r8, lsl #10
   16aa4:	andeq	r7, r1, r8, lsl #10
   16aa8:	andeq	r7, r1, r8, lsl #10
   16aac:	andeq	r7, r1, r8, lsl #10
   16ab0:	andeq	r7, r1, r8, lsl #10
   16ab4:	andeq	r7, r1, r8, lsl #10
   16ab8:	andeq	r7, r1, r8, lsl #10
   16abc:	andeq	r7, r1, r8, lsl #10
   16ac0:	andeq	r7, r1, r8, lsl #10
   16ac4:	andeq	r7, r1, r8, lsl #10
   16ac8:	andeq	r7, r1, r8, lsl #10
   16acc:	andeq	r7, r1, r8, lsl #10
   16ad0:	andeq	r7, r1, r8, lsl #10
   16ad4:	andeq	r7, r1, r8, lsl #10
   16ad8:	andeq	r7, r1, r4, lsr #8
   16adc:	andeq	r7, r1, r8, asr #8
   16ae0:	andeq	r7, r1, r8, asr #8
   16ae4:	andeq	r7, r1, r0, ror #7
   16ae8:	andeq	r7, r1, r8, asr #8
   16aec:	andeq	r7, r1, r8, ror #18
   16af0:	andeq	r7, r1, r8, asr #8
   16af4:	andeq	r7, r1, r8, ror #8
   16af8:	andeq	r7, r1, r8, asr #8
   16afc:	andeq	r7, r1, r8, asr #8
   16b00:	andeq	r7, r1, r8, asr #8
   16b04:	andeq	r7, r1, r8, ror #18
   16b08:	andeq	r7, r1, r8, ror #18
   16b0c:	andeq	r7, r1, r8, ror #18
   16b10:	andeq	r7, r1, r8, ror #18
   16b14:	andeq	r7, r1, r8, ror #18
   16b18:	andeq	r7, r1, r8, ror #18
   16b1c:	andeq	r7, r1, r8, ror #18
   16b20:	andeq	r7, r1, r8, ror #18
   16b24:	andeq	r7, r1, r8, ror #18
   16b28:	andeq	r7, r1, r8, ror #18
   16b2c:	andeq	r7, r1, r8, ror #18
   16b30:	andeq	r7, r1, r8, ror #18
   16b34:	andeq	r7, r1, r8, ror #18
   16b38:	andeq	r7, r1, r8, ror #18
   16b3c:	andeq	r7, r1, r8, ror #18
   16b40:	andeq	r7, r1, r8, ror #18
   16b44:	andeq	r7, r1, r8, asr #8
   16b48:	andeq	r7, r1, r8, asr #8
   16b4c:	andeq	r7, r1, r8, asr #8
   16b50:	andeq	r7, r1, r8, asr #8
   16b54:	andeq	r6, r1, r8, asr #27
   16b58:	andeq	r7, r1, r8, lsl #10
   16b5c:	andeq	r7, r1, r8, ror #18
   16b60:	andeq	r7, r1, r8, ror #18
   16b64:	andeq	r7, r1, r8, ror #18
   16b68:	andeq	r7, r1, r8, ror #18
   16b6c:	andeq	r7, r1, r8, ror #18
   16b70:	andeq	r7, r1, r8, ror #18
   16b74:	andeq	r7, r1, r8, ror #18
   16b78:	andeq	r7, r1, r8, ror #18
   16b7c:	andeq	r7, r1, r8, ror #18
   16b80:	andeq	r7, r1, r8, ror #18
   16b84:	andeq	r7, r1, r8, ror #18
   16b88:	andeq	r7, r1, r8, ror #18
   16b8c:	andeq	r7, r1, r8, ror #18
   16b90:	andeq	r7, r1, r8, ror #18
   16b94:	andeq	r7, r1, r8, ror #18
   16b98:	andeq	r7, r1, r8, ror #18
   16b9c:	andeq	r7, r1, r8, ror #18
   16ba0:	andeq	r7, r1, r8, ror #18
   16ba4:	andeq	r7, r1, r8, ror #18
   16ba8:	andeq	r7, r1, r8, ror #18
   16bac:	andeq	r7, r1, r8, ror #18
   16bb0:	andeq	r7, r1, r8, ror #18
   16bb4:	andeq	r7, r1, r8, ror #18
   16bb8:	andeq	r7, r1, r8, ror #18
   16bbc:	andeq	r7, r1, r8, ror #18
   16bc0:	andeq	r7, r1, r8, ror #18
   16bc4:	andeq	r7, r1, r8, asr #8
   16bc8:	andeq	r7, r1, r0, lsl #6
   16bcc:	andeq	r7, r1, r8, ror #18
   16bd0:	andeq	r7, r1, r8, asr #8
   16bd4:	andeq	r7, r1, r8, ror #18
   16bd8:	andeq	r7, r1, r8, asr #8
   16bdc:	andeq	r7, r1, r8, ror #18
   16be0:	andeq	r7, r1, r8, ror #18
   16be4:	andeq	r7, r1, r8, ror #18
   16be8:	andeq	r7, r1, r8, ror #18
   16bec:	andeq	r7, r1, r8, ror #18
   16bf0:	andeq	r7, r1, r8, ror #18
   16bf4:	andeq	r7, r1, r8, ror #18
   16bf8:	andeq	r7, r1, r8, ror #18
   16bfc:	andeq	r7, r1, r8, ror #18
   16c00:	andeq	r7, r1, r8, ror #18
   16c04:	andeq	r7, r1, r8, ror #18
   16c08:	andeq	r7, r1, r8, ror #18
   16c0c:	andeq	r7, r1, r8, ror #18
   16c10:	andeq	r7, r1, r8, ror #18
   16c14:	andeq	r7, r1, r8, ror #18
   16c18:	andeq	r7, r1, r8, ror #18
   16c1c:	andeq	r7, r1, r8, ror #18
   16c20:	andeq	r7, r1, r8, ror #18
   16c24:	andeq	r7, r1, r8, ror #18
   16c28:	andeq	r7, r1, r8, ror #18
   16c2c:	andeq	r7, r1, r8, ror #18
   16c30:	andeq	r7, r1, r8, ror #18
   16c34:	andeq	r7, r1, r8, ror #18
   16c38:	andeq	r7, r1, r8, ror #18
   16c3c:	andeq	r7, r1, r8, ror #18
   16c40:	andeq	r7, r1, r8, ror #18
   16c44:	andeq	r7, r1, r0, asr #7
   16c48:	andeq	r7, r1, r8, asr #8
   16c4c:	andeq	r7, r1, r0, asr #7
   16c50:	andeq	r7, r1, r0, ror #7
   16c54:	mov	r8, r9
   16c58:	mov	r7, sl
   16c5c:	b	17b5c <__assert_fail@plt+0x67d0>
   16c60:	ldr	r3, [sp, #28]
   16c64:	cmp	r3, #0
   16c68:	bne	16c88 <__assert_fail@plt+0x58fc>
   16c6c:	ldr	r3, [sp, #156]	; 0x9c
   16c70:	tst	r3, #1
   16c74:	bne	17070 <__assert_fail@plt+0x5ce4>
   16c78:	ldr	r3, [sp, #28]
   16c7c:	str	r3, [sp, #44]	; 0x2c
   16c80:	mov	r5, r3
   16c84:	b	16f90 <__assert_fail@plt+0x5c04>
   16c88:	ldr	r3, [sp, #32]
   16c8c:	cmp	r3, #0
   16c90:	bne	17b0c <__assert_fail@plt+0x6780>
   16c94:	str	r3, [sp, #44]	; 0x2c
   16c98:	ldr	r3, [sp, #36]	; 0x24
   16c9c:	eor	r3, r3, #1
   16ca0:	cmp	sl, #2
   16ca4:	movne	r3, #0
   16ca8:	andeq	r3, r3, #1
   16cac:	cmp	r3, #0
   16cb0:	beq	16d08 <__assert_fail@plt+0x597c>
   16cb4:	cmp	r9, fp
   16cb8:	movhi	r2, #39	; 0x27
   16cbc:	strbhi	r2, [r8, fp]
   16cc0:	add	r2, fp, #1
   16cc4:	cmp	r9, r2
   16cc8:	movhi	r1, #36	; 0x24
   16ccc:	strbhi	r1, [r8, r2]
   16cd0:	add	r2, fp, #2
   16cd4:	cmp	r9, r2
   16cd8:	movhi	r1, #39	; 0x27
   16cdc:	strbhi	r1, [r8, r2]
   16ce0:	add	r2, fp, #3
   16ce4:	cmp	r9, r2
   16ce8:	bls	17bc8 <__assert_fail@plt+0x683c>
   16cec:	mov	r1, #92	; 0x5c
   16cf0:	strb	r1, [r8, r2]
   16cf4:	add	fp, fp, #4
   16cf8:	str	r3, [sp, #36]	; 0x24
   16cfc:	mov	r5, #0
   16d00:	mov	r4, #48	; 0x30
   16d04:	b	16fdc <__assert_fail@plt+0x5c50>
   16d08:	cmp	r9, fp
   16d0c:	bhi	16d34 <__assert_fail@plt+0x59a8>
   16d10:	add	r1, fp, #1
   16d14:	ldr	r2, [sp, #56]	; 0x38
   16d18:	cmp	r2, #0
   16d1c:	bne	16d5c <__assert_fail@plt+0x59d0>
   16d20:	mov	r3, r5
   16d24:	ldr	r5, [sp, #56]	; 0x38
   16d28:	mov	fp, r1
   16d2c:	mov	r4, #48	; 0x30
   16d30:	b	16f90 <__assert_fail@plt+0x5c04>
   16d34:	mov	r2, #92	; 0x5c
   16d38:	strb	r2, [r8, fp]
   16d3c:	add	r1, fp, #1
   16d40:	ldr	r2, [sp, #56]	; 0x38
   16d44:	cmp	r2, #0
   16d48:	moveq	r3, r5
   16d4c:	moveq	r5, r2
   16d50:	moveq	fp, r1
   16d54:	moveq	r4, #48	; 0x30
   16d58:	beq	16fdc <__assert_fail@plt+0x5c50>
   16d5c:	add	r2, r6, #1
   16d60:	ldr	r0, [sp, #24]
   16d64:	cmp	r2, r0
   16d68:	bcs	16d84 <__assert_fail@plt+0x59f8>
   16d6c:	ldr	r0, [sp, #48]	; 0x30
   16d70:	ldrb	r2, [r0, r2]
   16d74:	sub	r2, r2, #48	; 0x30
   16d78:	uxtb	r2, r2
   16d7c:	cmp	r2, #9
   16d80:	bls	16d9c <__assert_fail@plt+0x5a10>
   16d84:	mov	r2, r3
   16d88:	mov	r3, r5
   16d8c:	mov	r5, r2
   16d90:	mov	fp, r1
   16d94:	mov	r4, #48	; 0x30
   16d98:	b	16fb4 <__assert_fail@plt+0x5c28>
   16d9c:	cmp	r9, r1
   16da0:	movhi	r2, #48	; 0x30
   16da4:	strbhi	r2, [r8, r1]
   16da8:	add	r2, fp, #2
   16dac:	cmp	r9, r2
   16db0:	movhi	r1, #48	; 0x30
   16db4:	strbhi	r1, [r8, r2]
   16db8:	add	r1, fp, #3
   16dbc:	b	16d84 <__assert_fail@plt+0x59f8>
   16dc0:	mov	r3, #0
   16dc4:	str	r3, [sp, #44]	; 0x2c
   16dc8:	cmp	sl, #2
   16dcc:	beq	16de8 <__assert_fail@plt+0x5a5c>
   16dd0:	cmp	sl, #5
   16dd4:	beq	16e00 <__assert_fail@plt+0x5a74>
   16dd8:	mov	r5, #0
   16ddc:	mov	r3, r5
   16de0:	mov	r4, #63	; 0x3f
   16de4:	b	16f90 <__assert_fail@plt+0x5c04>
   16de8:	ldr	r3, [sp, #32]
   16dec:	cmp	r3, #0
   16df0:	bne	17b18 <__assert_fail@plt+0x678c>
   16df4:	mov	r5, r3
   16df8:	mov	r4, #63	; 0x3f
   16dfc:	b	174f8 <__assert_fail@plt+0x616c>
   16e00:	ldr	r3, [sp, #156]	; 0x9c
   16e04:	tst	r3, #4
   16e08:	beq	17930 <__assert_fail@plt+0x65a4>
   16e0c:	add	r2, r6, #2
   16e10:	ldr	r3, [sp, #24]
   16e14:	cmp	r2, r3
   16e18:	bcs	17940 <__assert_fail@plt+0x65b4>
   16e1c:	ldr	r3, [sp, #48]	; 0x30
   16e20:	add	r3, r3, r6
   16e24:	ldrb	r4, [r3, #1]
   16e28:	cmp	r4, #63	; 0x3f
   16e2c:	movne	r5, #0
   16e30:	movne	r3, r5
   16e34:	movne	r4, #63	; 0x3f
   16e38:	bne	16f90 <__assert_fail@plt+0x5c04>
   16e3c:	ldr	r3, [sp, #48]	; 0x30
   16e40:	ldrb	r1, [r3, r2]
   16e44:	sub	r3, r1, #33	; 0x21
   16e48:	cmp	r3, #29
   16e4c:	ldrls	pc, [pc, r3, lsl #2]
   16e50:	b	17950 <__assert_fail@plt+0x65c4>
   16e54:	andeq	r6, r1, ip, asr #29
   16e58:	andeq	r7, r1, r0, asr r9
   16e5c:	andeq	r7, r1, r0, asr r9
   16e60:	andeq	r7, r1, r0, asr r9
   16e64:	andeq	r7, r1, r0, asr r9
   16e68:	andeq	r7, r1, r0, asr r9
   16e6c:	andeq	r6, r1, ip, asr #29
   16e70:	andeq	r6, r1, ip, asr #29
   16e74:	andeq	r6, r1, ip, asr #29
   16e78:	andeq	r7, r1, r0, asr r9
   16e7c:	andeq	r7, r1, r0, asr r9
   16e80:	andeq	r7, r1, r0, asr r9
   16e84:	andeq	r6, r1, ip, asr #29
   16e88:	andeq	r7, r1, r0, asr r9
   16e8c:	andeq	r6, r1, ip, asr #29
   16e90:	andeq	r7, r1, r0, asr r9
   16e94:	andeq	r7, r1, r0, asr r9
   16e98:	andeq	r7, r1, r0, asr r9
   16e9c:	andeq	r7, r1, r0, asr r9
   16ea0:	andeq	r7, r1, r0, asr r9
   16ea4:	andeq	r7, r1, r0, asr r9
   16ea8:	andeq	r7, r1, r0, asr r9
   16eac:	andeq	r7, r1, r0, asr r9
   16eb0:	andeq	r7, r1, r0, asr r9
   16eb4:	andeq	r7, r1, r0, asr r9
   16eb8:	andeq	r7, r1, r0, asr r9
   16ebc:	andeq	r7, r1, r0, asr r9
   16ec0:	andeq	r6, r1, ip, asr #29
   16ec4:	andeq	r6, r1, ip, asr #29
   16ec8:	andeq	r6, r1, ip, asr #29
   16ecc:	ldr	r3, [sp, #32]
   16ed0:	cmp	r3, #0
   16ed4:	bne	17bbc <__assert_fail@plt+0x6830>
   16ed8:	cmp	r9, fp
   16edc:	movhi	r3, #63	; 0x3f
   16ee0:	strbhi	r3, [r8, fp]
   16ee4:	add	r3, fp, #1
   16ee8:	cmp	r9, r3
   16eec:	movhi	r0, #34	; 0x22
   16ef0:	strbhi	r0, [r8, r3]
   16ef4:	add	r3, fp, #2
   16ef8:	cmp	r9, r3
   16efc:	movhi	r0, #34	; 0x22
   16f00:	strbhi	r0, [r8, r3]
   16f04:	add	r3, fp, #3
   16f08:	cmp	r9, r3
   16f0c:	movhi	r0, #63	; 0x3f
   16f10:	strbhi	r0, [r8, r3]
   16f14:	add	fp, fp, #4
   16f18:	ldr	r3, [sp, #32]
   16f1c:	mov	r5, r3
   16f20:	mov	r4, r1
   16f24:	mov	r6, r2
   16f28:	b	16f90 <__assert_fail@plt+0x5c04>
   16f2c:	mov	r3, #0
   16f30:	str	r3, [sp, #44]	; 0x2c
   16f34:	mov	r4, #8
   16f38:	mov	r3, #98	; 0x62
   16f3c:	b	16f7c <__assert_fail@plt+0x5bf0>
   16f40:	mov	r3, #0
   16f44:	str	r3, [sp, #44]	; 0x2c
   16f48:	mov	r4, #12
   16f4c:	mov	r3, #102	; 0x66
   16f50:	b	16f7c <__assert_fail@plt+0x5bf0>
   16f54:	mov	r3, #0
   16f58:	str	r3, [sp, #44]	; 0x2c
   16f5c:	mov	r4, #13
   16f60:	mov	r3, #114	; 0x72
   16f64:	ldr	r2, [sp, #32]
   16f68:	cmp	sl, #2
   16f6c:	movne	r2, #0
   16f70:	andeq	r2, r2, #1
   16f74:	cmp	r2, #0
   16f78:	bne	1739c <__assert_fail@plt+0x6010>
   16f7c:	ldr	r2, [sp, #28]
   16f80:	cmp	r2, #0
   16f84:	bne	17984 <__assert_fail@plt+0x65f8>
   16f88:	mov	r5, r2
   16f8c:	mov	r3, r2
   16f90:	ldr	r2, [sp, #28]
   16f94:	eor	r2, r2, #1
   16f98:	cmp	sl, #2
   16f9c:	orreq	r2, r2, #1
   16fa0:	eor	r2, r2, #1
   16fa4:	ldr	r1, [sp, #32]
   16fa8:	orr	r2, r1, r2
   16fac:	tst	r2, #255	; 0xff
   16fb0:	beq	16fdc <__assert_fail@plt+0x5c50>
   16fb4:	ldr	r2, [sp, #160]	; 0xa0
   16fb8:	cmp	r2, #0
   16fbc:	beq	16fdc <__assert_fail@plt+0x5c50>
   16fc0:	ubfx	r1, r4, #5, #8
   16fc4:	and	r2, r4, #31
   16fc8:	ldr	r0, [sp, #160]	; 0xa0
   16fcc:	ldr	r1, [r0, r1, lsl #2]
   16fd0:	lsr	r2, r1, r2
   16fd4:	tst	r2, #1
   16fd8:	bne	16fe8 <__assert_fail@plt+0x5c5c>
   16fdc:	ldr	r2, [sp, #44]	; 0x2c
   16fe0:	cmp	r2, #0
   16fe4:	beq	1733c <__assert_fail@plt+0x5fb0>
   16fe8:	ldr	r3, [sp, #32]
   16fec:	cmp	r3, #0
   16ff0:	bne	17b3c <__assert_fail@plt+0x67b0>
   16ff4:	ldr	r3, [sp, #36]	; 0x24
   16ff8:	eor	r3, r3, #1
   16ffc:	cmp	sl, #2
   17000:	movne	r3, #0
   17004:	andeq	r3, r3, #1
   17008:	cmp	r3, #0
   1700c:	beq	17044 <__assert_fail@plt+0x5cb8>
   17010:	cmp	r9, fp
   17014:	movhi	r2, #39	; 0x27
   17018:	strbhi	r2, [r8, fp]
   1701c:	add	r2, fp, #1
   17020:	cmp	r9, r2
   17024:	movhi	r1, #36	; 0x24
   17028:	strbhi	r1, [r8, r2]
   1702c:	add	r2, fp, #2
   17030:	cmp	r9, r2
   17034:	movhi	r1, #39	; 0x27
   17038:	strbhi	r1, [r8, r2]
   1703c:	add	fp, fp, #3
   17040:	str	r3, [sp, #36]	; 0x24
   17044:	cmp	r9, fp
   17048:	movhi	r3, #92	; 0x5c
   1704c:	strbhi	r3, [r8, fp]
   17050:	add	fp, fp, #1
   17054:	cmp	fp, r9
   17058:	strbcc	r4, [r8, fp]
   1705c:	add	fp, fp, #1
   17060:	cmp	r5, #0
   17064:	ldr	r3, [sp, #40]	; 0x28
   17068:	moveq	r3, r5
   1706c:	str	r3, [sp, #40]	; 0x28
   17070:	add	r6, r6, #1
   17074:	ldr	r3, [sp, #24]
   17078:	cmn	r3, #1
   1707c:	beq	179ac <__assert_fail@plt+0x6620>
   17080:	ldr	r3, [sp, #24]
   17084:	subs	r5, r3, r6
   17088:	movne	r5, #1
   1708c:	cmp	r5, #0
   17090:	beq	179c0 <__assert_fail@plt+0x6634>
   17094:	ldr	r3, [sp, #28]
   17098:	cmp	sl, #2
   1709c:	moveq	r3, #0
   170a0:	andne	r3, r3, #1
   170a4:	str	r3, [sp, #56]	; 0x38
   170a8:	ldr	r2, [sp, #52]	; 0x34
   170ac:	adds	r7, r2, #0
   170b0:	movne	r7, #1
   170b4:	ands	r3, r3, r7
   170b8:	str	r3, [sp, #44]	; 0x2c
   170bc:	bne	169dc <__assert_fail@plt+0x5650>
   170c0:	ldr	r3, [sp, #48]	; 0x30
   170c4:	ldrb	r4, [r3, r6]
   170c8:	cmp	r4, #126	; 0x7e
   170cc:	ldrls	pc, [pc, r4, lsl #2]
   170d0:	b	17508 <__assert_fail@plt+0x617c>
   170d4:	andeq	r6, r1, r0, ror #24
   170d8:	andeq	r7, r1, r8, lsl #10
   170dc:	andeq	r7, r1, r8, lsl #10
   170e0:	andeq	r7, r1, r8, lsl #10
   170e4:	andeq	r7, r1, r8, lsl #10
   170e8:	andeq	r7, r1, r8, lsl #10
   170ec:	andeq	r7, r1, r8, lsl #10
   170f0:	andeq	r7, r1, r8, lsr #7
   170f4:	andeq	r6, r1, r4, lsr pc
   170f8:	ldrdeq	r7, [r1], -r8
   170fc:	andeq	r7, r1, ip, ror r3
   17100:	andeq	r7, r1, ip, ror #5
   17104:	andeq	r6, r1, r8, asr #30
   17108:	andeq	r6, r1, ip, asr pc
   1710c:	andeq	r7, r1, r8, lsl #10
   17110:	andeq	r7, r1, r8, lsl #10
   17114:	andeq	r7, r1, r8, lsl #10
   17118:	andeq	r7, r1, r8, lsl #10
   1711c:	andeq	r7, r1, r8, lsl #10
   17120:	andeq	r7, r1, r8, lsl #10
   17124:	andeq	r7, r1, r8, lsl #10
   17128:	andeq	r7, r1, r8, lsl #10
   1712c:	andeq	r7, r1, r8, lsl #10
   17130:	andeq	r7, r1, r8, lsl #10
   17134:	andeq	r7, r1, r8, lsl #10
   17138:	andeq	r7, r1, r8, lsl #10
   1713c:	andeq	r7, r1, r8, lsl #10
   17140:	andeq	r7, r1, r8, lsl #10
   17144:	andeq	r7, r1, r8, lsl #10
   17148:	andeq	r7, r1, r8, lsl #10
   1714c:	andeq	r7, r1, r8, lsl #10
   17150:	andeq	r7, r1, r8, lsl #10
   17154:	andeq	r7, r1, r4, lsr #8
   17158:	andeq	r7, r1, r0, lsr #8
   1715c:	andeq	r7, r1, r0, lsr #8
   17160:	andeq	r7, r1, r0, ror #7
   17164:	andeq	r7, r1, r0, lsr #8
   17168:	andeq	r7, r1, r8, lsr #18
   1716c:	andeq	r7, r1, r0, lsr #8
   17170:	andeq	r7, r1, r8, ror #8
   17174:	andeq	r7, r1, r0, lsr #8
   17178:	andeq	r7, r1, r0, lsr #8
   1717c:	andeq	r7, r1, r0, lsr #8
   17180:	andeq	r7, r1, r8, lsr #18
   17184:	andeq	r7, r1, r8, lsr #18
   17188:	andeq	r7, r1, r8, lsr #18
   1718c:	andeq	r7, r1, r8, lsr #18
   17190:	andeq	r7, r1, r8, lsr #18
   17194:	andeq	r7, r1, r8, lsr #18
   17198:	andeq	r7, r1, r8, lsr #18
   1719c:	andeq	r7, r1, r8, lsr #18
   171a0:	andeq	r7, r1, r8, lsr #18
   171a4:	andeq	r7, r1, r8, lsr #18
   171a8:	andeq	r7, r1, r8, lsr #18
   171ac:	andeq	r7, r1, r8, lsr #18
   171b0:	andeq	r7, r1, r8, lsr #18
   171b4:	andeq	r7, r1, r8, lsr #18
   171b8:	andeq	r7, r1, r8, lsr #18
   171bc:	andeq	r7, r1, r8, lsr #18
   171c0:	andeq	r7, r1, r0, lsr #8
   171c4:	andeq	r7, r1, r0, lsr #8
   171c8:	andeq	r7, r1, r0, lsr #8
   171cc:	andeq	r7, r1, r0, lsr #8
   171d0:	andeq	r6, r1, r8, asr #27
   171d4:	andeq	r7, r1, r8, lsl #10
   171d8:	andeq	r7, r1, r8, lsr #18
   171dc:	andeq	r7, r1, r8, lsr #18
   171e0:	andeq	r7, r1, r8, lsr #18
   171e4:	andeq	r7, r1, r8, lsr #18
   171e8:	andeq	r7, r1, r8, lsr #18
   171ec:	andeq	r7, r1, r8, lsr #18
   171f0:	andeq	r7, r1, r8, lsr #18
   171f4:	andeq	r7, r1, r8, lsr #18
   171f8:	andeq	r7, r1, r8, lsr #18
   171fc:	andeq	r7, r1, r8, lsr #18
   17200:	andeq	r7, r1, r8, lsr #18
   17204:	andeq	r7, r1, r8, lsr #18
   17208:	andeq	r7, r1, r8, lsr #18
   1720c:	andeq	r7, r1, r8, lsr #18
   17210:	andeq	r7, r1, r8, lsr #18
   17214:	andeq	r7, r1, r8, lsr #18
   17218:	andeq	r7, r1, r8, lsr #18
   1721c:	andeq	r7, r1, r8, lsr #18
   17220:	andeq	r7, r1, r8, lsr #18
   17224:	andeq	r7, r1, r8, lsr #18
   17228:	andeq	r7, r1, r8, lsr #18
   1722c:	andeq	r7, r1, r8, lsr #18
   17230:	andeq	r7, r1, r8, lsr #18
   17234:	andeq	r7, r1, r8, lsr #18
   17238:	andeq	r7, r1, r8, lsr #18
   1723c:	andeq	r7, r1, r8, lsr #18
   17240:	andeq	r7, r1, r0, lsr #8
   17244:	andeq	r7, r1, r0, lsl #6
   17248:	andeq	r7, r1, r8, lsr #18
   1724c:	andeq	r7, r1, r0, lsr #8
   17250:	andeq	r7, r1, r8, lsr #18
   17254:	andeq	r7, r1, r0, lsr #8
   17258:	andeq	r7, r1, r8, lsr #18
   1725c:	andeq	r7, r1, r8, lsr #18
   17260:	andeq	r7, r1, r8, lsr #18
   17264:	andeq	r7, r1, r8, lsr #18
   17268:	andeq	r7, r1, r8, lsr #18
   1726c:	andeq	r7, r1, r8, lsr #18
   17270:	andeq	r7, r1, r8, lsr #18
   17274:	andeq	r7, r1, r8, lsr #18
   17278:	andeq	r7, r1, r8, lsr #18
   1727c:	andeq	r7, r1, r8, lsr #18
   17280:	andeq	r7, r1, r8, lsr #18
   17284:	andeq	r7, r1, r8, lsr #18
   17288:	andeq	r7, r1, r8, lsr #18
   1728c:	andeq	r7, r1, r8, lsr #18
   17290:	andeq	r7, r1, r8, lsr #18
   17294:	andeq	r7, r1, r8, lsr #18
   17298:	andeq	r7, r1, r8, lsr #18
   1729c:	andeq	r7, r1, r8, lsr #18
   172a0:	andeq	r7, r1, r8, lsr #18
   172a4:	andeq	r7, r1, r8, lsr #18
   172a8:	andeq	r7, r1, r8, lsr #18
   172ac:	andeq	r7, r1, r8, lsr #18
   172b0:	andeq	r7, r1, r8, lsr #18
   172b4:	andeq	r7, r1, r8, lsr #18
   172b8:	andeq	r7, r1, r8, lsr #18
   172bc:	andeq	r7, r1, r8, lsr #18
   172c0:	andeq	r7, r1, r0, asr #7
   172c4:	andeq	r7, r1, r0, lsr #8
   172c8:	andeq	r7, r1, r0, asr #7
   172cc:	andeq	r7, r1, r0, ror #7
   172d0:	mov	r3, #0
   172d4:	str	r3, [sp, #44]	; 0x2c
   172d8:	mov	r4, #9
   172dc:	mov	r3, #116	; 0x74
   172e0:	b	16f64 <__assert_fail@plt+0x5bd8>
   172e4:	mov	r3, #0
   172e8:	str	r3, [sp, #44]	; 0x2c
   172ec:	mov	r4, #11
   172f0:	mov	r3, #118	; 0x76
   172f4:	b	16f7c <__assert_fail@plt+0x5bf0>
   172f8:	mov	r3, #0
   172fc:	str	r3, [sp, #44]	; 0x2c
   17300:	cmp	sl, #2
   17304:	beq	17328 <__assert_fail@plt+0x5f9c>
   17308:	ldr	r3, [sp, #28]
   1730c:	ldr	r2, [sp, #32]
   17310:	and	r3, r3, r2
   17314:	tst	r7, r3
   17318:	bne	1799c <__assert_fail@plt+0x6610>
   1731c:	mov	r4, #92	; 0x5c
   17320:	mov	r3, r4
   17324:	b	16f7c <__assert_fail@plt+0x5bf0>
   17328:	ldr	r3, [sp, #32]
   1732c:	cmp	r3, #0
   17330:	bne	17b24 <__assert_fail@plt+0x6798>
   17334:	mov	r5, r3
   17338:	mov	r4, #92	; 0x5c
   1733c:	eor	r3, r3, #1
   17340:	ldr	r2, [sp, #36]	; 0x24
   17344:	and	r3, r3, r2
   17348:	tst	r3, #255	; 0xff
   1734c:	beq	17054 <__assert_fail@plt+0x5cc8>
   17350:	cmp	r9, fp
   17354:	movhi	r3, #39	; 0x27
   17358:	strbhi	r3, [r8, fp]
   1735c:	add	r3, fp, #1
   17360:	cmp	r9, r3
   17364:	movhi	r2, #39	; 0x27
   17368:	strbhi	r2, [r8, r3]
   1736c:	add	fp, fp, #2
   17370:	mov	r3, #0
   17374:	str	r3, [sp, #36]	; 0x24
   17378:	b	17054 <__assert_fail@plt+0x5cc8>
   1737c:	mov	r3, #110	; 0x6e
   17380:	b	16f64 <__assert_fail@plt+0x5bd8>
   17384:	mov	r3, #110	; 0x6e
   17388:	b	16f64 <__assert_fail@plt+0x5bd8>
   1738c:	mov	r3, #0
   17390:	str	r3, [sp, #44]	; 0x2c
   17394:	mov	r3, #110	; 0x6e
   17398:	b	16f64 <__assert_fail@plt+0x5bd8>
   1739c:	mov	r8, r9
   173a0:	mov	r7, #2
   173a4:	b	17b44 <__assert_fail@plt+0x67b8>
   173a8:	mov	r3, #97	; 0x61
   173ac:	b	16f7c <__assert_fail@plt+0x5bf0>
   173b0:	mov	r3, #97	; 0x61
   173b4:	b	16f7c <__assert_fail@plt+0x5bf0>
   173b8:	mov	r3, #0
   173bc:	str	r3, [sp, #44]	; 0x2c
   173c0:	ldr	r3, [sp, #24]
   173c4:	cmn	r3, #1
   173c8:	beq	173f4 <__assert_fail@plt+0x6068>
   173cc:	ldr	r3, [sp, #24]
   173d0:	subs	r3, r3, #1
   173d4:	movne	r3, #1
   173d8:	cmp	r3, #0
   173dc:	bne	1795c <__assert_fail@plt+0x65d0>
   173e0:	cmp	r6, #0
   173e4:	beq	17424 <__assert_fail@plt+0x6098>
   173e8:	mov	r5, #0
   173ec:	mov	r3, r5
   173f0:	b	16f90 <__assert_fail@plt+0x5c04>
   173f4:	ldr	r3, [sp, #48]	; 0x30
   173f8:	ldrb	r3, [r3, #1]
   173fc:	adds	r3, r3, #0
   17400:	movne	r3, #1
   17404:	b	173d8 <__assert_fail@plt+0x604c>
   17408:	mov	r3, #0
   1740c:	str	r3, [sp, #44]	; 0x2c
   17410:	b	173e0 <__assert_fail@plt+0x6054>
   17414:	mov	r3, #0
   17418:	str	r3, [sp, #44]	; 0x2c
   1741c:	b	17424 <__assert_fail@plt+0x6098>
   17420:	ldr	r5, [sp, #44]	; 0x2c
   17424:	ldr	r3, [sp, #32]
   17428:	cmp	sl, #2
   1742c:	movne	r3, #0
   17430:	andeq	r3, r3, #1
   17434:	cmp	r3, #0
   17438:	beq	16f90 <__assert_fail@plt+0x5c04>
   1743c:	mov	r8, r9
   17440:	mov	r7, #2
   17444:	b	17b44 <__assert_fail@plt+0x67b8>
   17448:	ldr	r5, [sp, #32]
   1744c:	b	17424 <__assert_fail@plt+0x6098>
   17450:	mov	r3, #0
   17454:	str	r3, [sp, #44]	; 0x2c
   17458:	mov	r5, r3
   1745c:	b	17424 <__assert_fail@plt+0x6098>
   17460:	mov	r3, #0
   17464:	str	r3, [sp, #44]	; 0x2c
   17468:	cmp	sl, #2
   1746c:	strne	r5, [sp, #68]	; 0x44
   17470:	movne	r3, #0
   17474:	movne	r4, #39	; 0x27
   17478:	bne	16f90 <__assert_fail@plt+0x5c04>
   1747c:	ldr	r3, [sp, #32]
   17480:	cmp	r3, #0
   17484:	bne	17b30 <__assert_fail@plt+0x67a4>
   17488:	ldr	r3, [sp, #72]	; 0x48
   1748c:	clz	r3, r3
   17490:	lsr	r3, r3, #5
   17494:	cmp	r9, #0
   17498:	moveq	r3, #0
   1749c:	cmp	r3, #0
   174a0:	movne	r3, #0
   174a4:	bne	174cc <__assert_fail@plt+0x6140>
   174a8:	cmp	r9, fp
   174ac:	movhi	r3, #39	; 0x27
   174b0:	strbhi	r3, [r8, fp]
   174b4:	add	r3, fp, #1
   174b8:	cmp	r9, r3
   174bc:	movhi	r2, #92	; 0x5c
   174c0:	strbhi	r2, [r8, r3]
   174c4:	mov	r3, r9
   174c8:	ldr	r9, [sp, #72]	; 0x48
   174cc:	add	r2, fp, #2
   174d0:	cmp	r2, r3
   174d4:	movcc	r1, #39	; 0x27
   174d8:	strbcc	r1, [r8, r2]
   174dc:	add	fp, fp, #3
   174e0:	str	r5, [sp, #68]	; 0x44
   174e4:	ldr	r2, [sp, #32]
   174e8:	str	r2, [sp, #36]	; 0x24
   174ec:	str	r9, [sp, #72]	; 0x48
   174f0:	mov	r9, r3
   174f4:	mov	r4, #39	; 0x27
   174f8:	mov	r3, #0
   174fc:	b	16fdc <__assert_fail@plt+0x5c50>
   17500:	mov	r3, #0
   17504:	str	r3, [sp, #44]	; 0x2c
   17508:	ldr	r7, [sp, #76]	; 0x4c
   1750c:	cmp	r7, #1
   17510:	bne	17548 <__assert_fail@plt+0x61bc>
   17514:	bl	111e8 <__ctype_b_loc@plt>
   17518:	ldr	r2, [r0]
   1751c:	lsl	r3, r4, #1
   17520:	ldrh	r5, [r2, r3]
   17524:	ubfx	r5, r5, #14, #1
   17528:	mov	ip, r7
   1752c:	eor	r3, r5, #1
   17530:	ldr	r2, [sp, #28]
   17534:	and	r3, r3, r2
   17538:	ands	r3, r3, #255	; 0xff
   1753c:	beq	16f90 <__assert_fail@plt+0x5c04>
   17540:	mov	r5, #0
   17544:	b	177a4 <__assert_fail@plt+0x6418>
   17548:	mov	r2, #0
   1754c:	mov	r3, #0
   17550:	strd	r2, [sp, #104]	; 0x68
   17554:	ldr	r3, [sp, #24]
   17558:	cmn	r3, #1
   1755c:	beq	17580 <__assert_fail@plt+0x61f4>
   17560:	mov	r3, #0
   17564:	str	r4, [sp, #88]	; 0x58
   17568:	str	fp, [sp, #92]	; 0x5c
   1756c:	str	r8, [sp, #56]	; 0x38
   17570:	mov	r8, r3
   17574:	str	r9, [sp, #84]	; 0x54
   17578:	ldr	r9, [sp, #48]	; 0x30
   1757c:	b	176cc <__assert_fail@plt+0x6340>
   17580:	ldr	r0, [sp, #48]	; 0x30
   17584:	bl	1120c <strlen@plt>
   17588:	str	r0, [sp, #24]
   1758c:	b	17560 <__assert_fail@plt+0x61d4>
   17590:	mov	r1, fp
   17594:	ldr	r4, [sp, #88]	; 0x58
   17598:	mov	r2, r8
   1759c:	mov	ip, r8
   175a0:	ldr	fp, [sp, #92]	; 0x5c
   175a4:	ldr	r8, [sp, #56]	; 0x38
   175a8:	ldr	r9, [sp, #84]	; 0x54
   175ac:	ldr	r0, [sp, #24]
   175b0:	cmp	r7, r0
   175b4:	bcs	1776c <__assert_fail@plt+0x63e0>
   175b8:	ldrb	r3, [r1]
   175bc:	cmp	r3, #0
   175c0:	beq	17774 <__assert_fail@plt+0x63e8>
   175c4:	mov	r3, r1
   175c8:	add	r2, r2, #1
   175cc:	add	r1, r6, r2
   175d0:	cmp	r0, r1
   175d4:	bls	1777c <__assert_fail@plt+0x63f0>
   175d8:	ldrb	r1, [r3, #1]!
   175dc:	cmp	r1, #0
   175e0:	bne	175c8 <__assert_fail@plt+0x623c>
   175e4:	mov	ip, r2
   175e8:	mov	r5, #0
   175ec:	b	1779c <__assert_fail@plt+0x6410>
   175f0:	ldr	r3, [sp, #56]	; 0x38
   175f4:	str	r3, [sp, #64]	; 0x40
   175f8:	ldr	r8, [sp, #84]	; 0x54
   175fc:	mov	r7, #2
   17600:	b	17b44 <__assert_fail@plt+0x67b8>
   17604:	cmp	r2, r7
   17608:	beq	176a8 <__assert_fail@plt+0x631c>
   1760c:	ldrb	r3, [r2], #1
   17610:	sub	r3, r3, #91	; 0x5b
   17614:	cmp	r3, #33	; 0x21
   17618:	ldrls	pc, [pc, r3, lsl #2]
   1761c:	b	17604 <__assert_fail@plt+0x6278>
   17620:	strdeq	r7, [r1], -r0
   17624:	strdeq	r7, [r1], -r0
   17628:	andeq	r7, r1, r4, lsl #12
   1762c:	strdeq	r7, [r1], -r0
   17630:	andeq	r7, r1, r4, lsl #12
   17634:	strdeq	r7, [r1], -r0
   17638:	andeq	r7, r1, r4, lsl #12
   1763c:	andeq	r7, r1, r4, lsl #12
   17640:	andeq	r7, r1, r4, lsl #12
   17644:	andeq	r7, r1, r4, lsl #12
   17648:	andeq	r7, r1, r4, lsl #12
   1764c:	andeq	r7, r1, r4, lsl #12
   17650:	andeq	r7, r1, r4, lsl #12
   17654:	andeq	r7, r1, r4, lsl #12
   17658:	andeq	r7, r1, r4, lsl #12
   1765c:	andeq	r7, r1, r4, lsl #12
   17660:	andeq	r7, r1, r4, lsl #12
   17664:	andeq	r7, r1, r4, lsl #12
   17668:	andeq	r7, r1, r4, lsl #12
   1766c:	andeq	r7, r1, r4, lsl #12
   17670:	andeq	r7, r1, r4, lsl #12
   17674:	andeq	r7, r1, r4, lsl #12
   17678:	andeq	r7, r1, r4, lsl #12
   1767c:	andeq	r7, r1, r4, lsl #12
   17680:	andeq	r7, r1, r4, lsl #12
   17684:	andeq	r7, r1, r4, lsl #12
   17688:	andeq	r7, r1, r4, lsl #12
   1768c:	andeq	r7, r1, r4, lsl #12
   17690:	andeq	r7, r1, r4, lsl #12
   17694:	andeq	r7, r1, r4, lsl #12
   17698:	andeq	r7, r1, r4, lsl #12
   1769c:	andeq	r7, r1, r4, lsl #12
   176a0:	andeq	r7, r1, r4, lsl #12
   176a4:	strdeq	r7, [r1], -r0
   176a8:	ldr	r0, [sp, #100]	; 0x64
   176ac:	bl	11134 <iswprint@plt>
   176b0:	cmp	r0, #0
   176b4:	moveq	r5, #0
   176b8:	add	r8, r8, r4
   176bc:	add	r0, sp, #104	; 0x68
   176c0:	bl	110d4 <mbsinit@plt>
   176c4:	cmp	r0, #0
   176c8:	bne	17738 <__assert_fail@plt+0x63ac>
   176cc:	add	r7, r6, r8
   176d0:	add	fp, r9, r7
   176d4:	add	r3, sp, #104	; 0x68
   176d8:	ldr	r2, [sp, #24]
   176dc:	sub	r2, r2, r7
   176e0:	mov	r1, fp
   176e4:	add	r0, sp, #100	; 0x64
   176e8:	bl	1a470 <__assert_fail@plt+0x90e4>
   176ec:	subs	r4, r0, #0
   176f0:	beq	17788 <__assert_fail@plt+0x63fc>
   176f4:	cmn	r4, #1
   176f8:	beq	17750 <__assert_fail@plt+0x63c4>
   176fc:	cmn	r4, #2
   17700:	beq	17590 <__assert_fail@plt+0x6204>
   17704:	ldr	r3, [sp, #32]
   17708:	cmp	sl, #2
   1770c:	movne	r3, #0
   17710:	andeq	r3, r3, #1
   17714:	cmp	r3, #0
   17718:	beq	176a8 <__assert_fail@plt+0x631c>
   1771c:	cmp	r4, #1
   17720:	bls	176a8 <__assert_fail@plt+0x631c>
   17724:	add	r2, r7, #1
   17728:	add	r2, r9, r2
   1772c:	add	r3, r9, r4
   17730:	add	r7, r3, r7
   17734:	b	1760c <__assert_fail@plt+0x6280>
   17738:	ldr	r4, [sp, #88]	; 0x58
   1773c:	mov	ip, r8
   17740:	ldr	fp, [sp, #92]	; 0x5c
   17744:	ldr	r8, [sp, #56]	; 0x38
   17748:	ldr	r9, [sp, #84]	; 0x54
   1774c:	b	1779c <__assert_fail@plt+0x6410>
   17750:	ldr	r4, [sp, #88]	; 0x58
   17754:	mov	ip, r8
   17758:	ldr	fp, [sp, #92]	; 0x5c
   1775c:	ldr	r8, [sp, #56]	; 0x38
   17760:	ldr	r9, [sp, #84]	; 0x54
   17764:	mov	r5, #0
   17768:	b	1779c <__assert_fail@plt+0x6410>
   1776c:	mov	r5, #0
   17770:	b	1779c <__assert_fail@plt+0x6410>
   17774:	mov	r5, #0
   17778:	b	1779c <__assert_fail@plt+0x6410>
   1777c:	mov	ip, r2
   17780:	mov	r5, #0
   17784:	b	1779c <__assert_fail@plt+0x6410>
   17788:	ldr	r4, [sp, #88]	; 0x58
   1778c:	mov	ip, r8
   17790:	ldr	fp, [sp, #92]	; 0x5c
   17794:	ldr	r8, [sp, #56]	; 0x38
   17798:	ldr	r9, [sp, #84]	; 0x54
   1779c:	cmp	ip, #1
   177a0:	bls	1752c <__assert_fail@plt+0x61a0>
   177a4:	add	lr, r6, ip
   177a8:	ldr	r3, [sp, #48]	; 0x30
   177ac:	add	r1, r3, r6
   177b0:	mov	r3, #0
   177b4:	eor	r0, r5, #1
   177b8:	ldr	r2, [sp, #28]
   177bc:	and	r0, r0, r2
   177c0:	uxtb	r0, r0
   177c4:	str	r0, [sp, #56]	; 0x38
   177c8:	mov	r7, #92	; 0x5c
   177cc:	ldr	ip, [sp, #36]	; 0x24
   177d0:	str	r5, [sp, #84]	; 0x54
   177d4:	ldr	r2, [sp, #44]	; 0x2c
   177d8:	b	17848 <__assert_fail@plt+0x64bc>
   177dc:	cmp	r2, #0
   177e0:	beq	177f0 <__assert_fail@plt+0x6464>
   177e4:	cmp	r9, fp
   177e8:	strbhi	r7, [r8, fp]
   177ec:	add	fp, fp, #1
   177f0:	add	r5, r6, #1
   177f4:	cmp	r5, lr
   177f8:	bcs	17904 <__assert_fail@plt+0x6578>
   177fc:	eor	r2, r3, #1
   17800:	and	r2, r2, ip
   17804:	ands	r2, r2, #255	; 0xff
   17808:	beq	17920 <__assert_fail@plt+0x6594>
   1780c:	cmp	r9, fp
   17810:	movhi	r2, #39	; 0x27
   17814:	strbhi	r2, [r8, fp]
   17818:	add	r2, fp, #1
   1781c:	cmp	r9, r2
   17820:	movhi	ip, #39	; 0x27
   17824:	strbhi	ip, [r8, r2]
   17828:	add	fp, fp, #2
   1782c:	ldr	ip, [sp, #56]	; 0x38
   17830:	mov	r2, ip
   17834:	mov	r6, r5
   17838:	cmp	r9, fp
   1783c:	strbhi	r4, [r8, fp]
   17840:	add	fp, fp, #1
   17844:	ldrb	r4, [r1, #1]!
   17848:	cmp	r0, #0
   1784c:	beq	177dc <__assert_fail@plt+0x6450>
   17850:	ldr	r3, [sp, #32]
   17854:	cmp	r3, #0
   17858:	bne	17aec <__assert_fail@plt+0x6760>
   1785c:	eor	r3, ip, #1
   17860:	cmp	sl, #2
   17864:	movne	r3, #0
   17868:	andeq	r3, r3, #1
   1786c:	cmp	r3, #0
   17870:	beq	178a8 <__assert_fail@plt+0x651c>
   17874:	cmp	r9, fp
   17878:	movhi	ip, #39	; 0x27
   1787c:	strbhi	ip, [r8, fp]
   17880:	add	ip, fp, #1
   17884:	cmp	r9, ip
   17888:	movhi	r5, #36	; 0x24
   1788c:	strbhi	r5, [r8, ip]
   17890:	add	ip, fp, #2
   17894:	cmp	r9, ip
   17898:	movhi	r5, #39	; 0x27
   1789c:	strbhi	r5, [r8, ip]
   178a0:	add	fp, fp, #3
   178a4:	mov	ip, r3
   178a8:	cmp	r9, fp
   178ac:	strbhi	r7, [r8, fp]
   178b0:	add	r3, fp, #1
   178b4:	cmp	r9, r3
   178b8:	bls	178c8 <__assert_fail@plt+0x653c>
   178bc:	lsr	r5, r4, #6
   178c0:	add	r5, r5, #48	; 0x30
   178c4:	strb	r5, [r8, r3]
   178c8:	add	r3, fp, #2
   178cc:	cmp	r9, r3
   178d0:	bls	178e0 <__assert_fail@plt+0x6554>
   178d4:	ubfx	r5, r4, #3, #3
   178d8:	add	r5, r5, #48	; 0x30
   178dc:	strb	r5, [r8, r3]
   178e0:	add	fp, fp, #3
   178e4:	and	r4, r4, #7
   178e8:	add	r4, r4, #48	; 0x30
   178ec:	add	r5, r6, #1
   178f0:	cmp	r5, lr
   178f4:	bcs	17910 <__assert_fail@plt+0x6584>
   178f8:	ldr	r3, [sp, #56]	; 0x38
   178fc:	mov	r6, r5
   17900:	b	17838 <__assert_fail@plt+0x64ac>
   17904:	str	ip, [sp, #36]	; 0x24
   17908:	ldr	r5, [sp, #84]	; 0x54
   1790c:	b	1733c <__assert_fail@plt+0x5fb0>
   17910:	str	ip, [sp, #36]	; 0x24
   17914:	ldr	r5, [sp, #84]	; 0x54
   17918:	mov	r3, r0
   1791c:	b	1733c <__assert_fail@plt+0x5fb0>
   17920:	mov	r6, r5
   17924:	b	17838 <__assert_fail@plt+0x64ac>
   17928:	ldr	r3, [sp, #44]	; 0x2c
   1792c:	b	16f90 <__assert_fail@plt+0x5c04>
   17930:	mov	r5, #0
   17934:	mov	r3, r5
   17938:	mov	r4, #63	; 0x3f
   1793c:	b	16f90 <__assert_fail@plt+0x5c04>
   17940:	mov	r5, #0
   17944:	mov	r3, r5
   17948:	mov	r4, #63	; 0x3f
   1794c:	b	16f90 <__assert_fail@plt+0x5c04>
   17950:	mov	r5, #0
   17954:	mov	r3, r5
   17958:	b	16f90 <__assert_fail@plt+0x5c04>
   1795c:	mov	r5, #0
   17960:	mov	r3, r5
   17964:	b	16f90 <__assert_fail@plt+0x5c04>
   17968:	ldr	r5, [sp, #44]	; 0x2c
   1796c:	ldr	r3, [sp, #32]
   17970:	b	16f90 <__assert_fail@plt+0x5c04>
   17974:	ldr	r5, [sp, #44]	; 0x2c
   17978:	mov	r3, #0
   1797c:	str	r3, [sp, #44]	; 0x2c
   17980:	b	16f90 <__assert_fail@plt+0x5c04>
   17984:	mov	r4, r3
   17988:	mov	r5, #0
   1798c:	b	16fe8 <__assert_fail@plt+0x5c5c>
   17990:	mov	r5, #0
   17994:	mov	r4, #97	; 0x61
   17998:	b	16fe8 <__assert_fail@plt+0x5c5c>
   1799c:	mov	r5, #0
   179a0:	mov	r3, r5
   179a4:	mov	r4, #92	; 0x5c
   179a8:	b	1733c <__assert_fail@plt+0x5fb0>
   179ac:	ldr	r3, [sp, #48]	; 0x30
   179b0:	ldrb	r5, [r3, r6]
   179b4:	adds	r5, r5, #0
   179b8:	movne	r5, #1
   179bc:	b	1708c <__assert_fail@plt+0x5d00>
   179c0:	cmp	sl, #2
   179c4:	movne	r3, #0
   179c8:	moveq	r3, #1
   179cc:	ldr	r1, [sp, #32]
   179d0:	cmp	fp, #0
   179d4:	andeq	r2, r3, r1
   179d8:	movne	r2, #0
   179dc:	cmp	r2, #0
   179e0:	bne	17b00 <__assert_fail@plt+0x6774>
   179e4:	eor	r2, r1, #1
   179e8:	uxtb	r2, r2
   179ec:	and	r3, r3, r2
   179f0:	ldr	r1, [sp, #68]	; 0x44
   179f4:	ands	r3, r1, r3
   179f8:	beq	17a8c <__assert_fail@plt+0x6700>
   179fc:	ldr	r2, [sp, #40]	; 0x28
   17a00:	cmp	r2, #0
   17a04:	bne	17a3c <__assert_fail@plt+0x66b0>
   17a08:	ldr	r2, [sp, #72]	; 0x48
   17a0c:	adds	r2, r2, #0
   17a10:	movne	r2, #1
   17a14:	cmp	r9, #0
   17a18:	movne	r2, #0
   17a1c:	str	r2, [sp, #68]	; 0x44
   17a20:	mov	sl, #2
   17a24:	ldr	r1, [sp, #40]	; 0x28
   17a28:	str	r1, [sp, #32]
   17a2c:	cmp	r2, #0
   17a30:	beq	17a80 <__assert_fail@plt+0x66f4>
   17a34:	ldr	r9, [sp, #72]	; 0x48
   17a38:	b	16794 <__assert_fail@plt+0x5408>
   17a3c:	ldr	r3, [sp, #168]	; 0xa8
   17a40:	str	r3, [sp, #16]
   17a44:	ldr	r3, [sp, #164]	; 0xa4
   17a48:	str	r3, [sp, #12]
   17a4c:	ldr	r3, [sp, #160]	; 0xa0
   17a50:	str	r3, [sp, #8]
   17a54:	ldr	r3, [sp, #156]	; 0x9c
   17a58:	str	r3, [sp, #4]
   17a5c:	mov	r3, #5
   17a60:	str	r3, [sp]
   17a64:	ldr	r3, [sp, #24]
   17a68:	ldr	r2, [sp, #48]	; 0x30
   17a6c:	ldr	r1, [sp, #72]	; 0x48
   17a70:	ldr	r0, [sp, #64]	; 0x40
   17a74:	bl	1671c <__assert_fail@plt+0x5390>
   17a78:	mov	fp, r0
   17a7c:	b	17b9c <__assert_fail@plt+0x6810>
   17a80:	mov	r8, r9
   17a84:	mov	r2, r3
   17a88:	b	17a90 <__assert_fail@plt+0x6704>
   17a8c:	mov	r8, r9
   17a90:	ldr	r3, [sp, #60]	; 0x3c
   17a94:	cmp	r3, #0
   17a98:	moveq	r2, #0
   17a9c:	andne	r2, r2, #1
   17aa0:	cmp	r2, #0
   17aa4:	beq	17ad4 <__assert_fail@plt+0x6748>
   17aa8:	mov	r2, r3
   17aac:	ldrb	r3, [r3]
   17ab0:	cmp	r3, #0
   17ab4:	beq	17ad4 <__assert_fail@plt+0x6748>
   17ab8:	ldr	r1, [sp, #64]	; 0x40
   17abc:	cmp	r8, fp
   17ac0:	strbhi	r3, [r1, fp]
   17ac4:	add	fp, fp, #1
   17ac8:	ldrb	r3, [r2, #1]!
   17acc:	cmp	r3, #0
   17ad0:	bne	17abc <__assert_fail@plt+0x6730>
   17ad4:	cmp	r8, fp
   17ad8:	bls	17b9c <__assert_fail@plt+0x6810>
   17adc:	mov	r3, #0
   17ae0:	ldr	r2, [sp, #64]	; 0x40
   17ae4:	strb	r3, [r2, fp]
   17ae8:	b	17b9c <__assert_fail@plt+0x6810>
   17aec:	mov	r8, r9
   17af0:	mov	r7, sl
   17af4:	ldr	r3, [sp, #32]
   17af8:	str	r3, [sp, #28]
   17afc:	b	17b44 <__assert_fail@plt+0x67b8>
   17b00:	mov	r8, r9
   17b04:	mov	r7, #2
   17b08:	b	17b44 <__assert_fail@plt+0x67b8>
   17b0c:	mov	r8, r9
   17b10:	mov	r7, sl
   17b14:	b	17b44 <__assert_fail@plt+0x67b8>
   17b18:	mov	r8, r9
   17b1c:	mov	r7, sl
   17b20:	b	17b44 <__assert_fail@plt+0x67b8>
   17b24:	mov	r8, r9
   17b28:	mov	r7, sl
   17b2c:	b	17b44 <__assert_fail@plt+0x67b8>
   17b30:	mov	r8, r9
   17b34:	mov	r7, sl
   17b38:	b	17b44 <__assert_fail@plt+0x67b8>
   17b3c:	mov	r8, r9
   17b40:	mov	r7, sl
   17b44:	ldr	r3, [sp, #28]
   17b48:	cmp	r7, #2
   17b4c:	movne	r3, #0
   17b50:	andeq	r3, r3, #1
   17b54:	cmp	r3, #0
   17b58:	movne	r7, #4
   17b5c:	ldr	r3, [sp, #168]	; 0xa8
   17b60:	str	r3, [sp, #16]
   17b64:	ldr	r3, [sp, #164]	; 0xa4
   17b68:	str	r3, [sp, #12]
   17b6c:	mov	r3, #0
   17b70:	str	r3, [sp, #8]
   17b74:	ldr	r3, [sp, #156]	; 0x9c
   17b78:	bic	r3, r3, #2
   17b7c:	str	r3, [sp, #4]
   17b80:	str	r7, [sp]
   17b84:	ldr	r3, [sp, #24]
   17b88:	ldr	r2, [sp, #48]	; 0x30
   17b8c:	mov	r1, r8
   17b90:	ldr	r0, [sp, #64]	; 0x40
   17b94:	bl	1671c <__assert_fail@plt+0x5390>
   17b98:	mov	fp, r0
   17b9c:	mov	r0, fp
   17ba0:	add	sp, sp, #116	; 0x74
   17ba4:	ldrd	r4, [sp]
   17ba8:	ldrd	r6, [sp, #8]
   17bac:	ldrd	r8, [sp, #16]
   17bb0:	ldrd	sl, [sp, #24]
   17bb4:	add	sp, sp, #32
   17bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bbc:	mov	r8, r9
   17bc0:	mov	r7, sl
   17bc4:	b	17b5c <__assert_fail@plt+0x67d0>
   17bc8:	add	fp, fp, #4
   17bcc:	str	r3, [sp, #36]	; 0x24
   17bd0:	mov	r5, #0
   17bd4:	mov	r4, #48	; 0x30
   17bd8:	b	16f90 <__assert_fail@plt+0x5c04>
   17bdc:	mov	r3, #1
   17be0:	str	r3, [sp, #32]
   17be4:	str	r3, [sp, #28]
   17be8:	str	r3, [sp, #52]	; 0x34
   17bec:	movw	r3, #47828	; 0xbad4
   17bf0:	movt	r3, #1
   17bf4:	str	r3, [sp, #60]	; 0x3c
   17bf8:	mov	fp, #0
   17bfc:	mov	sl, #5
   17c00:	b	167f4 <__assert_fail@plt+0x5468>
   17c04:	ldr	r3, [sp, #48]	; 0x30
   17c08:	ldrb	r4, [r3, r6]
   17c0c:	cmp	r4, #126	; 0x7e
   17c10:	ldrls	pc, [pc, r4, lsl #2]
   17c14:	b	17500 <__assert_fail@plt+0x6174>
   17c18:	andeq	r6, r1, r8, lsl #25
   17c1c:	andeq	r7, r1, r0, lsl #10
   17c20:	andeq	r7, r1, r0, lsl #10
   17c24:	andeq	r7, r1, r0, lsl #10
   17c28:	andeq	r7, r1, r0, lsl #10
   17c2c:	andeq	r7, r1, r0, lsl #10
   17c30:	andeq	r7, r1, r0, lsl #10
   17c34:	muleq	r1, r0, r9
   17c38:	andeq	r6, r1, ip, lsr #30
   17c3c:	ldrdeq	r7, [r1], -r0
   17c40:	andeq	r7, r1, ip, lsl #7
   17c44:	andeq	r7, r1, r4, ror #5
   17c48:	andeq	r6, r1, r0, asr #30
   17c4c:	andeq	r6, r1, r4, asr pc
   17c50:	andeq	r7, r1, r0, lsl #10
   17c54:	andeq	r7, r1, r0, lsl #10
   17c58:	andeq	r7, r1, r0, lsl #10
   17c5c:	andeq	r7, r1, r0, lsl #10
   17c60:	andeq	r7, r1, r0, lsl #10
   17c64:	andeq	r7, r1, r0, lsl #10
   17c68:	andeq	r7, r1, r0, lsl #10
   17c6c:	andeq	r7, r1, r0, lsl #10
   17c70:	andeq	r7, r1, r0, lsl #10
   17c74:	andeq	r7, r1, r0, lsl #10
   17c78:	andeq	r7, r1, r0, lsl #10
   17c7c:	andeq	r7, r1, r0, lsl #10
   17c80:	andeq	r7, r1, r0, lsl #10
   17c84:	andeq	r7, r1, r0, lsl #10
   17c88:	andeq	r7, r1, r0, lsl #10
   17c8c:	andeq	r7, r1, r0, lsl #10
   17c90:	andeq	r7, r1, r0, lsl #10
   17c94:	andeq	r7, r1, r0, lsl #10
   17c98:	andeq	r7, r1, r4, lsl r4
   17c9c:	andeq	r7, r1, r0, asr r4
   17ca0:	andeq	r7, r1, r0, asr r4
   17ca4:	andeq	r7, r1, r8, lsl #8
   17ca8:	andeq	r7, r1, r0, asr r4
   17cac:	andeq	r7, r1, r4, ror r9
   17cb0:	andeq	r7, r1, r0, asr r4
   17cb4:	andeq	r7, r1, r0, ror #8
   17cb8:	andeq	r7, r1, r0, asr r4
   17cbc:	andeq	r7, r1, r0, asr r4
   17cc0:	andeq	r7, r1, r0, asr r4
   17cc4:	andeq	r7, r1, r4, ror r9
   17cc8:	andeq	r7, r1, r4, ror r9
   17ccc:	andeq	r7, r1, r4, ror r9
   17cd0:	andeq	r7, r1, r4, ror r9
   17cd4:	andeq	r7, r1, r4, ror r9
   17cd8:	andeq	r7, r1, r4, ror r9
   17cdc:	andeq	r7, r1, r4, ror r9
   17ce0:	andeq	r7, r1, r4, ror r9
   17ce4:	andeq	r7, r1, r4, ror r9
   17ce8:	andeq	r7, r1, r4, ror r9
   17cec:	andeq	r7, r1, r4, ror r9
   17cf0:	andeq	r7, r1, r4, ror r9
   17cf4:	andeq	r7, r1, r4, ror r9
   17cf8:	andeq	r7, r1, r4, ror r9
   17cfc:	andeq	r7, r1, r4, ror r9
   17d00:	andeq	r7, r1, r4, ror r9
   17d04:	andeq	r7, r1, r0, asr r4
   17d08:	andeq	r7, r1, r0, asr r4
   17d0c:	andeq	r7, r1, r0, asr r4
   17d10:	andeq	r7, r1, r0, asr r4
   17d14:	andeq	r6, r1, r0, asr #27
   17d18:	andeq	r7, r1, r0, lsl #10
   17d1c:	andeq	r7, r1, r4, ror r9
   17d20:	andeq	r7, r1, r4, ror r9
   17d24:	andeq	r7, r1, r4, ror r9
   17d28:	andeq	r7, r1, r4, ror r9
   17d2c:	andeq	r7, r1, r4, ror r9
   17d30:	andeq	r7, r1, r4, ror r9
   17d34:	andeq	r7, r1, r4, ror r9
   17d38:	andeq	r7, r1, r4, ror r9
   17d3c:	andeq	r7, r1, r4, ror r9
   17d40:	andeq	r7, r1, r4, ror r9
   17d44:	andeq	r7, r1, r4, ror r9
   17d48:	andeq	r7, r1, r4, ror r9
   17d4c:	andeq	r7, r1, r4, ror r9
   17d50:	andeq	r7, r1, r4, ror r9
   17d54:	andeq	r7, r1, r4, ror r9
   17d58:	andeq	r7, r1, r4, ror r9
   17d5c:	andeq	r7, r1, r4, ror r9
   17d60:	andeq	r7, r1, r4, ror r9
   17d64:	andeq	r7, r1, r4, ror r9
   17d68:	andeq	r7, r1, r4, ror r9
   17d6c:	andeq	r7, r1, r4, ror r9
   17d70:	andeq	r7, r1, r4, ror r9
   17d74:	andeq	r7, r1, r4, ror r9
   17d78:	andeq	r7, r1, r4, ror r9
   17d7c:	andeq	r7, r1, r4, ror r9
   17d80:	andeq	r7, r1, r4, ror r9
   17d84:	andeq	r7, r1, r0, asr r4
   17d88:	strdeq	r7, [r1], -r8
   17d8c:	andeq	r7, r1, r4, ror r9
   17d90:	andeq	r7, r1, r0, asr r4
   17d94:	andeq	r7, r1, r4, ror r9
   17d98:	andeq	r7, r1, r0, asr r4
   17d9c:	andeq	r7, r1, r4, ror r9
   17da0:	andeq	r7, r1, r4, ror r9
   17da4:	andeq	r7, r1, r4, ror r9
   17da8:	andeq	r7, r1, r4, ror r9
   17dac:	andeq	r7, r1, r4, ror r9
   17db0:	andeq	r7, r1, r4, ror r9
   17db4:	andeq	r7, r1, r4, ror r9
   17db8:	andeq	r7, r1, r4, ror r9
   17dbc:	andeq	r7, r1, r4, ror r9
   17dc0:	andeq	r7, r1, r4, ror r9
   17dc4:	andeq	r7, r1, r4, ror r9
   17dc8:	andeq	r7, r1, r4, ror r9
   17dcc:	andeq	r7, r1, r4, ror r9
   17dd0:	andeq	r7, r1, r4, ror r9
   17dd4:	andeq	r7, r1, r4, ror r9
   17dd8:	andeq	r7, r1, r4, ror r9
   17ddc:	andeq	r7, r1, r4, ror r9
   17de0:	andeq	r7, r1, r4, ror r9
   17de4:	andeq	r7, r1, r4, ror r9
   17de8:	andeq	r7, r1, r4, ror r9
   17dec:	andeq	r7, r1, r4, ror r9
   17df0:	andeq	r7, r1, r4, ror r9
   17df4:	andeq	r7, r1, r4, ror r9
   17df8:	andeq	r7, r1, r4, ror r9
   17dfc:	andeq	r7, r1, r4, ror r9
   17e00:	andeq	r7, r1, r4, ror r9
   17e04:			; <UNDEFINED> instruction: 0x000173b8
   17e08:	andeq	r7, r1, r0, asr r4
   17e0c:			; <UNDEFINED> instruction: 0x000173b8
   17e10:	andeq	r7, r1, r8, lsl #8
   17e14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e18:	strd	r6, [sp, #8]
   17e1c:	strd	r8, [sp, #16]
   17e20:	strd	sl, [sp, #24]
   17e24:	str	lr, [sp, #32]
   17e28:	sub	sp, sp, #52	; 0x34
   17e2c:	mov	r5, r0
   17e30:	str	r1, [sp, #24]
   17e34:	str	r2, [sp, #28]
   17e38:	mov	r4, r3
   17e3c:	bl	1123c <__errno_location@plt>
   17e40:	str	r0, [sp, #32]
   17e44:	ldr	r3, [r0]
   17e48:	str	r3, [sp, #36]	; 0x24
   17e4c:	movw	r3, #53572	; 0xd144
   17e50:	movt	r3, #2
   17e54:	ldr	r6, [r3]
   17e58:	cmn	r5, #-2147483647	; 0x80000001
   17e5c:	movne	r3, #0
   17e60:	moveq	r3, #1
   17e64:	orrs	r3, r3, r5, lsr #31
   17e68:	bne	17fcc <__assert_fail@plt+0x6c40>
   17e6c:	movw	r3, #53572	; 0xd144
   17e70:	movt	r3, #2
   17e74:	ldr	r2, [r3, #4]
   17e78:	cmp	r2, r5
   17e7c:	bgt	17eec <__assert_fail@plt+0x6b60>
   17e80:	str	r2, [sp, #44]	; 0x2c
   17e84:	add	r3, r3, #8
   17e88:	cmp	r6, r3
   17e8c:	beq	17fd0 <__assert_fail@plt+0x6c44>
   17e90:	sub	r2, r5, r2
   17e94:	mov	r3, #8
   17e98:	str	r3, [sp]
   17e9c:	mvn	r3, #-2147483648	; 0x80000000
   17ea0:	add	r2, r2, #1
   17ea4:	add	r1, sp, #44	; 0x2c
   17ea8:	mov	r0, r6
   17eac:	bl	1946c <__assert_fail@plt+0x80e0>
   17eb0:	mov	r6, r0
   17eb4:	movw	r3, #53572	; 0xd144
   17eb8:	movt	r3, #2
   17ebc:	str	r0, [r3]
   17ec0:	movw	r7, #53572	; 0xd144
   17ec4:	movt	r7, #2
   17ec8:	ldr	r0, [r7, #4]
   17ecc:	ldr	r2, [sp, #44]	; 0x2c
   17ed0:	sub	r2, r2, r0
   17ed4:	lsl	r2, r2, #3
   17ed8:	mov	r1, #0
   17edc:	add	r0, r6, r0, lsl #3
   17ee0:	bl	11254 <memset@plt>
   17ee4:	ldr	r3, [sp, #44]	; 0x2c
   17ee8:	str	r3, [r7, #4]
   17eec:	add	fp, r6, r5, lsl #3
   17ef0:	ldr	r8, [r6, r5, lsl #3]
   17ef4:	ldr	r7, [fp, #4]
   17ef8:	ldr	r3, [r4, #4]
   17efc:	orr	r9, r3, #1
   17f00:	add	sl, r4, #8
   17f04:	ldr	r3, [r4, #44]	; 0x2c
   17f08:	str	r3, [sp, #16]
   17f0c:	ldr	r3, [r4, #40]	; 0x28
   17f10:	str	r3, [sp, #12]
   17f14:	str	sl, [sp, #8]
   17f18:	str	r9, [sp, #4]
   17f1c:	ldr	r3, [r4]
   17f20:	str	r3, [sp]
   17f24:	ldr	r3, [sp, #28]
   17f28:	ldr	r2, [sp, #24]
   17f2c:	mov	r1, r8
   17f30:	mov	r0, r7
   17f34:	bl	1671c <__assert_fail@plt+0x5390>
   17f38:	cmp	r8, r0
   17f3c:	bhi	17fa0 <__assert_fail@plt+0x6c14>
   17f40:	add	r8, r0, #1
   17f44:	str	r8, [r6, r5, lsl #3]
   17f48:	movw	r3, #53708	; 0xd1cc
   17f4c:	movt	r3, #2
   17f50:	cmp	r7, r3
   17f54:	beq	17f60 <__assert_fail@plt+0x6bd4>
   17f58:	mov	r0, r7
   17f5c:	bl	12dbc <__assert_fail@plt+0x1a30>
   17f60:	mov	r0, r8
   17f64:	bl	19268 <__assert_fail@plt+0x7edc>
   17f68:	mov	r7, r0
   17f6c:	str	r0, [fp, #4]
   17f70:	ldr	r3, [r4, #44]	; 0x2c
   17f74:	str	r3, [sp, #16]
   17f78:	ldr	r3, [r4, #40]	; 0x28
   17f7c:	str	r3, [sp, #12]
   17f80:	str	sl, [sp, #8]
   17f84:	str	r9, [sp, #4]
   17f88:	ldr	r3, [r4]
   17f8c:	str	r3, [sp]
   17f90:	ldr	r3, [sp, #28]
   17f94:	ldr	r2, [sp, #24]
   17f98:	mov	r1, r8
   17f9c:	bl	1671c <__assert_fail@plt+0x5390>
   17fa0:	ldr	r3, [sp, #32]
   17fa4:	ldr	r2, [sp, #36]	; 0x24
   17fa8:	str	r2, [r3]
   17fac:	mov	r0, r7
   17fb0:	add	sp, sp, #52	; 0x34
   17fb4:	ldrd	r4, [sp]
   17fb8:	ldrd	r6, [sp, #8]
   17fbc:	ldrd	r8, [sp, #16]
   17fc0:	ldrd	sl, [sp, #24]
   17fc4:	add	sp, sp, #32
   17fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fcc:	bl	11344 <abort@plt>
   17fd0:	sub	r2, r5, r2
   17fd4:	mov	r3, #8
   17fd8:	str	r3, [sp]
   17fdc:	mvn	r3, #-2147483648	; 0x80000000
   17fe0:	add	r2, r2, #1
   17fe4:	add	r1, sp, #44	; 0x2c
   17fe8:	mov	r0, #0
   17fec:	bl	1946c <__assert_fail@plt+0x80e0>
   17ff0:	mov	r6, r0
   17ff4:	movw	r3, #53572	; 0xd144
   17ff8:	movt	r3, #2
   17ffc:	str	r0, [r3]
   18000:	ldrd	r2, [r3, #8]
   18004:	strd	r2, [r0]
   18008:	b	17ec0 <__assert_fail@plt+0x6b34>
   1800c:	strd	r4, [sp, #-16]!
   18010:	str	r6, [sp, #8]
   18014:	str	lr, [sp, #12]
   18018:	mov	r4, r0
   1801c:	bl	1123c <__errno_location@plt>
   18020:	mov	r5, r0
   18024:	ldr	r6, [r0]
   18028:	cmp	r4, #0
   1802c:	ldr	r3, [pc, #32]	; 18054 <__assert_fail@plt+0x6cc8>
   18030:	moveq	r4, r3
   18034:	mov	r1, #48	; 0x30
   18038:	mov	r0, r4
   1803c:	bl	195dc <__assert_fail@plt+0x8250>
   18040:	str	r6, [r5]
   18044:	ldrd	r4, [sp]
   18048:	ldr	r6, [sp, #8]
   1804c:	add	sp, sp, #12
   18050:	pop	{pc}		; (ldr pc, [sp], #4)
   18054:	andeq	sp, r2, ip, asr #5
   18058:	subs	r3, r0, #0
   1805c:	ldr	r2, [pc, #8]	; 1806c <__assert_fail@plt+0x6ce0>
   18060:	moveq	r3, r2
   18064:	ldr	r0, [r3]
   18068:	bx	lr
   1806c:	andeq	sp, r2, ip, asr #5
   18070:	subs	r3, r0, #0
   18074:	ldr	r2, [pc, #8]	; 18084 <__assert_fail@plt+0x6cf8>
   18078:	moveq	r3, r2
   1807c:	str	r1, [r3]
   18080:	bx	lr
   18084:	andeq	sp, r2, ip, asr #5
   18088:	push	{lr}		; (str lr, [sp, #-4]!)
   1808c:	subs	r3, r0, #0
   18090:	ldr	r0, [pc, #44]	; 180c4 <__assert_fail@plt+0x6d38>
   18094:	moveq	r3, r0
   18098:	add	r3, r3, #8
   1809c:	lsr	lr, r1, #5
   180a0:	and	r1, r1, #31
   180a4:	ldr	ip, [r3, lr, lsl #2]
   180a8:	lsr	r0, ip, r1
   180ac:	eor	r2, r2, r0
   180b0:	and	r2, r2, #1
   180b4:	eor	r1, ip, r2, lsl r1
   180b8:	str	r1, [r3, lr, lsl #2]
   180bc:	and	r0, r0, #1
   180c0:	pop	{pc}		; (ldr pc, [sp], #4)
   180c4:	andeq	sp, r2, ip, asr #5
   180c8:	subs	r3, r0, #0
   180cc:	ldr	r2, [pc, #12]	; 180e0 <__assert_fail@plt+0x6d54>
   180d0:	moveq	r3, r2
   180d4:	ldr	r0, [r3, #4]
   180d8:	str	r1, [r3, #4]
   180dc:	bx	lr
   180e0:	andeq	sp, r2, ip, asr #5
   180e4:	subs	r3, r0, #0
   180e8:	ldr	r0, [pc, #44]	; 1811c <__assert_fail@plt+0x6d90>
   180ec:	moveq	r3, r0
   180f0:	mov	r0, #10
   180f4:	str	r0, [r3]
   180f8:	cmp	r2, #0
   180fc:	cmpne	r1, #0
   18100:	beq	18110 <__assert_fail@plt+0x6d84>
   18104:	str	r1, [r3, #40]	; 0x28
   18108:	str	r2, [r3, #44]	; 0x2c
   1810c:	bx	lr
   18110:	str	r4, [sp, #-8]!
   18114:	str	lr, [sp, #4]
   18118:	bl	11344 <abort@plt>
   1811c:	andeq	sp, r2, ip, asr #5
   18120:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18124:	strd	r6, [sp, #8]
   18128:	strd	r8, [sp, #16]
   1812c:	str	sl, [sp, #24]
   18130:	str	lr, [sp, #28]
   18134:	sub	sp, sp, #24
   18138:	mov	r7, r0
   1813c:	mov	r8, r1
   18140:	mov	r9, r2
   18144:	mov	sl, r3
   18148:	ldr	r4, [sp, #56]	; 0x38
   1814c:	cmp	r4, #0
   18150:	ldr	r3, [pc, #104]	; 181c0 <__assert_fail@plt+0x6e34>
   18154:	moveq	r4, r3
   18158:	bl	1123c <__errno_location@plt>
   1815c:	mov	r5, r0
   18160:	ldr	r6, [r0]
   18164:	ldr	r3, [r4, #44]	; 0x2c
   18168:	str	r3, [sp, #16]
   1816c:	ldr	r3, [r4, #40]	; 0x28
   18170:	str	r3, [sp, #12]
   18174:	add	r3, r4, #8
   18178:	str	r3, [sp, #8]
   1817c:	ldr	r3, [r4, #4]
   18180:	str	r3, [sp, #4]
   18184:	ldr	r3, [r4]
   18188:	str	r3, [sp]
   1818c:	mov	r3, sl
   18190:	mov	r2, r9
   18194:	mov	r1, r8
   18198:	mov	r0, r7
   1819c:	bl	1671c <__assert_fail@plt+0x5390>
   181a0:	str	r6, [r5]
   181a4:	add	sp, sp, #24
   181a8:	ldrd	r4, [sp]
   181ac:	ldrd	r6, [sp, #8]
   181b0:	ldrd	r8, [sp, #16]
   181b4:	ldr	sl, [sp, #24]
   181b8:	add	sp, sp, #28
   181bc:	pop	{pc}		; (ldr pc, [sp], #4)
   181c0:	andeq	sp, r2, ip, asr #5
   181c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   181c8:	strd	r6, [sp, #8]
   181cc:	strd	r8, [sp, #16]
   181d0:	strd	sl, [sp, #24]
   181d4:	str	lr, [sp, #32]
   181d8:	sub	sp, sp, #44	; 0x2c
   181dc:	mov	r8, r0
   181e0:	mov	sl, r1
   181e4:	mov	r6, r2
   181e8:	subs	r4, r3, #0
   181ec:	ldr	r3, [pc, #200]	; 182bc <__assert_fail@plt+0x6f30>
   181f0:	moveq	r4, r3
   181f4:	bl	1123c <__errno_location@plt>
   181f8:	mov	r7, r0
   181fc:	ldr	fp, [r0]
   18200:	ldr	r5, [r4, #4]
   18204:	cmp	r6, #0
   18208:	orreq	r5, r5, #1
   1820c:	add	r9, r4, #8
   18210:	ldr	r3, [r4, #44]	; 0x2c
   18214:	str	r3, [sp, #16]
   18218:	ldr	r3, [r4, #40]	; 0x28
   1821c:	str	r3, [sp, #12]
   18220:	str	r9, [sp, #8]
   18224:	str	r5, [sp, #4]
   18228:	ldr	r3, [r4]
   1822c:	str	r3, [sp]
   18230:	str	sl, [sp, #36]	; 0x24
   18234:	mov	r3, sl
   18238:	str	r8, [sp, #32]
   1823c:	mov	r2, r8
   18240:	mov	r1, #0
   18244:	mov	r0, r1
   18248:	bl	1671c <__assert_fail@plt+0x5390>
   1824c:	mov	sl, r0
   18250:	add	r8, r0, #1
   18254:	mov	r0, r8
   18258:	bl	19268 <__assert_fail@plt+0x7edc>
   1825c:	str	r0, [sp, #28]
   18260:	ldr	r3, [r4, #44]	; 0x2c
   18264:	str	r3, [sp, #16]
   18268:	ldr	r3, [r4, #40]	; 0x28
   1826c:	str	r3, [sp, #12]
   18270:	str	r9, [sp, #8]
   18274:	str	r5, [sp, #4]
   18278:	ldr	r3, [r4]
   1827c:	str	r3, [sp]
   18280:	ldr	r3, [sp, #36]	; 0x24
   18284:	ldr	r2, [sp, #32]
   18288:	mov	r1, r8
   1828c:	bl	1671c <__assert_fail@plt+0x5390>
   18290:	str	fp, [r7]
   18294:	cmp	r6, #0
   18298:	strne	sl, [r6]
   1829c:	ldr	r0, [sp, #28]
   182a0:	add	sp, sp, #44	; 0x2c
   182a4:	ldrd	r4, [sp]
   182a8:	ldrd	r6, [sp, #8]
   182ac:	ldrd	r8, [sp, #16]
   182b0:	ldrd	sl, [sp, #24]
   182b4:	add	sp, sp, #32
   182b8:	pop	{pc}		; (ldr pc, [sp], #4)
   182bc:	andeq	sp, r2, ip, asr #5
   182c0:	str	r4, [sp, #-8]!
   182c4:	str	lr, [sp, #4]
   182c8:	mov	r3, r2
   182cc:	mov	r2, #0
   182d0:	bl	181c4 <__assert_fail@plt+0x6e38>
   182d4:	ldr	r4, [sp]
   182d8:	add	sp, sp, #4
   182dc:	pop	{pc}		; (ldr pc, [sp], #4)
   182e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   182e4:	strd	r6, [sp, #8]
   182e8:	str	r8, [sp, #16]
   182ec:	str	lr, [sp, #20]
   182f0:	movw	r3, #53572	; 0xd144
   182f4:	movt	r3, #2
   182f8:	ldr	r7, [r3]
   182fc:	ldr	r3, [r3, #4]
   18300:	cmp	r3, #1
   18304:	ble	18330 <__assert_fail@plt+0x6fa4>
   18308:	mov	r4, #1
   1830c:	add	r6, r7, #4
   18310:	movw	r5, #53572	; 0xd144
   18314:	movt	r5, #2
   18318:	ldr	r0, [r6, r4, lsl #3]
   1831c:	bl	12dbc <__assert_fail@plt+0x1a30>
   18320:	add	r4, r4, #1
   18324:	ldr	r3, [r5, #4]
   18328:	cmp	r3, r4
   1832c:	bgt	18318 <__assert_fail@plt+0x6f8c>
   18330:	ldr	r0, [r7, #4]
   18334:	movw	r3, #53708	; 0xd1cc
   18338:	movt	r3, #2
   1833c:	cmp	r0, r3
   18340:	beq	18364 <__assert_fail@plt+0x6fd8>
   18344:	bl	12dbc <__assert_fail@plt+0x1a30>
   18348:	movw	r3, #53572	; 0xd144
   1834c:	movt	r3, #2
   18350:	mov	r2, #256	; 0x100
   18354:	str	r2, [r3, #8]
   18358:	movw	r2, #53708	; 0xd1cc
   1835c:	movt	r2, #2
   18360:	str	r2, [r3, #12]
   18364:	ldr	r3, [pc, #64]	; 183ac <__assert_fail@plt+0x7020>
   18368:	cmp	r7, r3
   1836c:	beq	18388 <__assert_fail@plt+0x6ffc>
   18370:	mov	r0, r7
   18374:	bl	12dbc <__assert_fail@plt+0x1a30>
   18378:	movw	r3, #53572	; 0xd144
   1837c:	movt	r3, #2
   18380:	add	r2, r3, #8
   18384:	str	r2, [r3]
   18388:	movw	r3, #53572	; 0xd144
   1838c:	movt	r3, #2
   18390:	mov	r2, #1
   18394:	str	r2, [r3, #4]
   18398:	ldrd	r4, [sp]
   1839c:	ldrd	r6, [sp, #8]
   183a0:	ldr	r8, [sp, #16]
   183a4:	add	sp, sp, #20
   183a8:	pop	{pc}		; (ldr pc, [sp], #4)
   183ac:	andeq	sp, r2, ip, asr #2
   183b0:	str	r4, [sp, #-8]!
   183b4:	str	lr, [sp, #4]
   183b8:	ldr	r3, [pc, #16]	; 183d0 <__assert_fail@plt+0x7044>
   183bc:	mvn	r2, #0
   183c0:	bl	17e14 <__assert_fail@plt+0x6a88>
   183c4:	ldr	r4, [sp]
   183c8:	add	sp, sp, #4
   183cc:	pop	{pc}		; (ldr pc, [sp], #4)
   183d0:	andeq	sp, r2, ip, asr #5
   183d4:	str	r4, [sp, #-8]!
   183d8:	str	lr, [sp, #4]
   183dc:	ldr	r3, [pc, #12]	; 183f0 <__assert_fail@plt+0x7064>
   183e0:	bl	17e14 <__assert_fail@plt+0x6a88>
   183e4:	ldr	r4, [sp]
   183e8:	add	sp, sp, #4
   183ec:	pop	{pc}		; (ldr pc, [sp], #4)
   183f0:	andeq	sp, r2, ip, asr #5
   183f4:	str	r4, [sp, #-8]!
   183f8:	str	lr, [sp, #4]
   183fc:	mov	r1, r0
   18400:	mov	r0, #0
   18404:	bl	183b0 <__assert_fail@plt+0x7024>
   18408:	ldr	r4, [sp]
   1840c:	add	sp, sp, #4
   18410:	pop	{pc}		; (ldr pc, [sp], #4)
   18414:	str	r4, [sp, #-8]!
   18418:	str	lr, [sp, #4]
   1841c:	mov	r2, r1
   18420:	mov	r1, r0
   18424:	mov	r0, #0
   18428:	bl	183d4 <__assert_fail@plt+0x7048>
   1842c:	ldr	r4, [sp]
   18430:	add	sp, sp, #4
   18434:	pop	{pc}		; (ldr pc, [sp], #4)
   18438:	strd	r4, [sp, #-12]!
   1843c:	str	lr, [sp, #8]
   18440:	sub	sp, sp, #52	; 0x34
   18444:	mov	r4, r0
   18448:	mov	r5, r2
   1844c:	mov	r0, sp
   18450:	bl	16588 <__assert_fail@plt+0x51fc>
   18454:	mov	r3, sp
   18458:	mvn	r2, #0
   1845c:	mov	r1, r5
   18460:	mov	r0, r4
   18464:	bl	17e14 <__assert_fail@plt+0x6a88>
   18468:	add	sp, sp, #52	; 0x34
   1846c:	ldrd	r4, [sp]
   18470:	add	sp, sp, #8
   18474:	pop	{pc}		; (ldr pc, [sp], #4)
   18478:	strd	r4, [sp, #-16]!
   1847c:	str	r6, [sp, #8]
   18480:	str	lr, [sp, #12]
   18484:	sub	sp, sp, #48	; 0x30
   18488:	mov	r4, r0
   1848c:	mov	r5, r2
   18490:	mov	r6, r3
   18494:	mov	r0, sp
   18498:	bl	16588 <__assert_fail@plt+0x51fc>
   1849c:	mov	r3, sp
   184a0:	mov	r2, r6
   184a4:	mov	r1, r5
   184a8:	mov	r0, r4
   184ac:	bl	17e14 <__assert_fail@plt+0x6a88>
   184b0:	add	sp, sp, #48	; 0x30
   184b4:	ldrd	r4, [sp]
   184b8:	ldr	r6, [sp, #8]
   184bc:	add	sp, sp, #12
   184c0:	pop	{pc}		; (ldr pc, [sp], #4)
   184c4:	str	r4, [sp, #-8]!
   184c8:	str	lr, [sp, #4]
   184cc:	mov	r2, r1
   184d0:	mov	r1, r0
   184d4:	mov	r0, #0
   184d8:	bl	18438 <__assert_fail@plt+0x70ac>
   184dc:	ldr	r4, [sp]
   184e0:	add	sp, sp, #4
   184e4:	pop	{pc}		; (ldr pc, [sp], #4)
   184e8:	str	r4, [sp, #-8]!
   184ec:	str	lr, [sp, #4]
   184f0:	mov	r3, r2
   184f4:	mov	r2, r1
   184f8:	mov	r1, r0
   184fc:	mov	r0, #0
   18500:	bl	18478 <__assert_fail@plt+0x70ec>
   18504:	ldr	r4, [sp]
   18508:	add	sp, sp, #4
   1850c:	pop	{pc}		; (ldr pc, [sp], #4)
   18510:	strd	r4, [sp, #-12]!
   18514:	str	lr, [sp, #8]
   18518:	sub	sp, sp, #52	; 0x34
   1851c:	mov	r4, r0
   18520:	mov	r5, r1
   18524:	mov	r1, r2
   18528:	ldr	r0, [pc, #92]	; 1858c <__assert_fail@plt+0x7200>
   1852c:	ldrd	r2, [r0]
   18530:	strd	r2, [sp]
   18534:	ldrd	r2, [r0, #8]
   18538:	strd	r2, [sp, #8]
   1853c:	ldrd	r2, [r0, #16]
   18540:	strd	r2, [sp, #16]
   18544:	ldrd	r2, [r0, #24]
   18548:	strd	r2, [sp, #24]
   1854c:	ldrd	r2, [r0, #32]
   18550:	strd	r2, [sp, #32]
   18554:	ldrd	r2, [r0, #40]	; 0x28
   18558:	strd	r2, [sp, #40]	; 0x28
   1855c:	mov	r2, #1
   18560:	mov	r0, sp
   18564:	bl	18088 <__assert_fail@plt+0x6cfc>
   18568:	mov	r3, sp
   1856c:	mov	r2, r5
   18570:	mov	r1, r4
   18574:	mov	r0, #0
   18578:	bl	17e14 <__assert_fail@plt+0x6a88>
   1857c:	add	sp, sp, #52	; 0x34
   18580:	ldrd	r4, [sp]
   18584:	add	sp, sp, #8
   18588:	pop	{pc}		; (ldr pc, [sp], #4)
   1858c:	andeq	sp, r2, ip, asr #5
   18590:	str	r4, [sp, #-8]!
   18594:	str	lr, [sp, #4]
   18598:	mov	r2, r1
   1859c:	mvn	r1, #0
   185a0:	bl	18510 <__assert_fail@plt+0x7184>
   185a4:	ldr	r4, [sp]
   185a8:	add	sp, sp, #4
   185ac:	pop	{pc}		; (ldr pc, [sp], #4)
   185b0:	str	r4, [sp, #-8]!
   185b4:	str	lr, [sp, #4]
   185b8:	mov	r1, #58	; 0x3a
   185bc:	bl	18590 <__assert_fail@plt+0x7204>
   185c0:	ldr	r4, [sp]
   185c4:	add	sp, sp, #4
   185c8:	pop	{pc}		; (ldr pc, [sp], #4)
   185cc:	str	r4, [sp, #-8]!
   185d0:	str	lr, [sp, #4]
   185d4:	mov	r2, #58	; 0x3a
   185d8:	bl	18510 <__assert_fail@plt+0x7184>
   185dc:	ldr	r4, [sp]
   185e0:	add	sp, sp, #4
   185e4:	pop	{pc}		; (ldr pc, [sp], #4)
   185e8:	strd	r4, [sp, #-12]!
   185ec:	str	lr, [sp, #8]
   185f0:	sub	sp, sp, #100	; 0x64
   185f4:	mov	r4, r0
   185f8:	mov	r5, r2
   185fc:	mov	r0, sp
   18600:	bl	16588 <__assert_fail@plt+0x51fc>
   18604:	ldrd	r2, [sp]
   18608:	strd	r2, [sp, #48]	; 0x30
   1860c:	ldrd	r2, [sp, #8]
   18610:	strd	r2, [sp, #56]	; 0x38
   18614:	ldrd	r2, [sp, #16]
   18618:	strd	r2, [sp, #64]	; 0x40
   1861c:	ldrd	r2, [sp, #24]
   18620:	strd	r2, [sp, #72]	; 0x48
   18624:	ldrd	r2, [sp, #32]
   18628:	strd	r2, [sp, #80]	; 0x50
   1862c:	ldrd	r2, [sp, #40]	; 0x28
   18630:	strd	r2, [sp, #88]	; 0x58
   18634:	mov	r2, #1
   18638:	mov	r1, #58	; 0x3a
   1863c:	add	r0, sp, #48	; 0x30
   18640:	bl	18088 <__assert_fail@plt+0x6cfc>
   18644:	add	r3, sp, #48	; 0x30
   18648:	mvn	r2, #0
   1864c:	mov	r1, r5
   18650:	mov	r0, r4
   18654:	bl	17e14 <__assert_fail@plt+0x6a88>
   18658:	add	sp, sp, #100	; 0x64
   1865c:	ldrd	r4, [sp]
   18660:	add	sp, sp, #8
   18664:	pop	{pc}		; (ldr pc, [sp], #4)
   18668:	strd	r4, [sp, #-20]!	; 0xffffffec
   1866c:	strd	r6, [sp, #8]
   18670:	str	lr, [sp, #16]
   18674:	sub	sp, sp, #52	; 0x34
   18678:	mov	r4, r0
   1867c:	mov	r5, r3
   18680:	ldr	r3, [pc, #92]	; 186e4 <__assert_fail@plt+0x7358>
   18684:	ldrd	r6, [r3]
   18688:	strd	r6, [sp]
   1868c:	ldrd	r6, [r3, #8]
   18690:	strd	r6, [sp, #8]
   18694:	ldrd	r6, [r3, #16]
   18698:	strd	r6, [sp, #16]
   1869c:	ldrd	r6, [r3, #24]
   186a0:	strd	r6, [sp, #24]
   186a4:	ldrd	r6, [r3, #32]
   186a8:	strd	r6, [sp, #32]
   186ac:	ldrd	r6, [r3, #40]	; 0x28
   186b0:	strd	r6, [sp, #40]	; 0x28
   186b4:	mov	r0, sp
   186b8:	bl	180e4 <__assert_fail@plt+0x6d58>
   186bc:	mov	r3, sp
   186c0:	ldr	r2, [sp, #72]	; 0x48
   186c4:	mov	r1, r5
   186c8:	mov	r0, r4
   186cc:	bl	17e14 <__assert_fail@plt+0x6a88>
   186d0:	add	sp, sp, #52	; 0x34
   186d4:	ldrd	r4, [sp]
   186d8:	ldrd	r6, [sp, #8]
   186dc:	add	sp, sp, #16
   186e0:	pop	{pc}		; (ldr pc, [sp], #4)
   186e4:	andeq	sp, r2, ip, asr #5
   186e8:	push	{lr}		; (str lr, [sp, #-4]!)
   186ec:	sub	sp, sp, #12
   186f0:	mvn	ip, #0
   186f4:	str	ip, [sp]
   186f8:	bl	18668 <__assert_fail@plt+0x72dc>
   186fc:	add	sp, sp, #12
   18700:	pop	{pc}		; (ldr pc, [sp], #4)
   18704:	str	r4, [sp, #-8]!
   18708:	str	lr, [sp, #4]
   1870c:	mov	r3, r2
   18710:	mov	r2, r1
   18714:	mov	r1, r0
   18718:	mov	r0, #0
   1871c:	bl	186e8 <__assert_fail@plt+0x735c>
   18720:	ldr	r4, [sp]
   18724:	add	sp, sp, #4
   18728:	pop	{pc}		; (ldr pc, [sp], #4)
   1872c:	push	{lr}		; (str lr, [sp, #-4]!)
   18730:	sub	sp, sp, #12
   18734:	str	r3, [sp]
   18738:	mov	r3, r2
   1873c:	mov	r2, r1
   18740:	mov	r1, r0
   18744:	mov	r0, #0
   18748:	bl	18668 <__assert_fail@plt+0x72dc>
   1874c:	add	sp, sp, #12
   18750:	pop	{pc}		; (ldr pc, [sp], #4)
   18754:	str	r4, [sp, #-8]!
   18758:	str	lr, [sp, #4]
   1875c:	ldr	r3, [pc, #12]	; 18770 <__assert_fail@plt+0x73e4>
   18760:	bl	17e14 <__assert_fail@plt+0x6a88>
   18764:	ldr	r4, [sp]
   18768:	add	sp, sp, #4
   1876c:	pop	{pc}		; (ldr pc, [sp], #4)
   18770:	andeq	sp, r2, r4, asr r1
   18774:	str	r4, [sp, #-8]!
   18778:	str	lr, [sp, #4]
   1877c:	mov	r2, r1
   18780:	mov	r1, r0
   18784:	mov	r0, #0
   18788:	bl	18754 <__assert_fail@plt+0x73c8>
   1878c:	ldr	r4, [sp]
   18790:	add	sp, sp, #4
   18794:	pop	{pc}		; (ldr pc, [sp], #4)
   18798:	str	r4, [sp, #-8]!
   1879c:	str	lr, [sp, #4]
   187a0:	mvn	r2, #0
   187a4:	bl	18754 <__assert_fail@plt+0x73c8>
   187a8:	ldr	r4, [sp]
   187ac:	add	sp, sp, #4
   187b0:	pop	{pc}		; (ldr pc, [sp], #4)
   187b4:	str	r4, [sp, #-8]!
   187b8:	str	lr, [sp, #4]
   187bc:	mov	r1, r0
   187c0:	mov	r0, #0
   187c4:	bl	18798 <__assert_fail@plt+0x740c>
   187c8:	ldr	r4, [sp]
   187cc:	add	sp, sp, #4
   187d0:	pop	{pc}		; (ldr pc, [sp], #4)
   187d4:	str	r4, [sp, #-8]!
   187d8:	str	lr, [sp, #4]
   187dc:	sub	sp, sp, #104	; 0x68
   187e0:	mov	r4, r0
   187e4:	mov	r2, sp
   187e8:	movw	r1, #46288	; 0xb4d0
   187ec:	movt	r1, #1
   187f0:	mov	r0, #3
   187f4:	bl	1135c <__lxstat64@plt>
   187f8:	cmp	r0, #0
   187fc:	movne	r0, #0
   18800:	bne	18818 <__assert_fail@plt+0x748c>
   18804:	ldrd	r2, [sp, #96]	; 0x60
   18808:	strd	r2, [r4]
   1880c:	ldrd	r2, [sp]
   18810:	strd	r2, [r4, #8]
   18814:	mov	r0, r4
   18818:	add	sp, sp, #104	; 0x68
   1881c:	ldr	r4, [sp]
   18820:	add	sp, sp, #4
   18824:	pop	{pc}		; (ldr pc, [sp], #4)
   18828:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1882c:	strd	r6, [sp, #8]
   18830:	str	r8, [sp, #16]
   18834:	str	lr, [sp, #20]
   18838:	mov	r4, r0
   1883c:	cmp	r0, #2
   18840:	bls	1885c <__assert_fail@plt+0x74d0>
   18844:	mov	r0, r4
   18848:	ldrd	r4, [sp]
   1884c:	ldrd	r6, [sp, #8]
   18850:	ldr	r8, [sp, #16]
   18854:	add	sp, sp, #20
   18858:	pop	{pc}		; (ldr pc, [sp], #4)
   1885c:	bl	1a51c <__assert_fail@plt+0x9190>
   18860:	mov	r6, r0
   18864:	bl	1123c <__errno_location@plt>
   18868:	mov	r5, r0
   1886c:	ldr	r7, [r0]
   18870:	mov	r0, r4
   18874:	bl	11350 <close@plt>
   18878:	str	r7, [r5]
   1887c:	mov	r4, r6
   18880:	b	18844 <__assert_fail@plt+0x74b8>
   18884:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18888:	strd	r6, [sp, #8]
   1888c:	strd	r8, [sp, #16]
   18890:	strd	sl, [sp, #24]
   18894:	str	lr, [sp, #32]
   18898:	sub	sp, sp, #36	; 0x24
   1889c:	mov	r4, r1
   188a0:	mov	r8, r2
   188a4:	ldr	r7, [sp, #76]	; 0x4c
   188a8:	ldr	fp, [r2]
   188ac:	subs	r9, r3, #0
   188b0:	ldrne	sl, [r9]
   188b4:	mvneq	sl, #0
   188b8:	ldr	r3, [sp, #72]	; 0x48
   188bc:	cmp	r3, #0
   188c0:	beq	188d0 <__assert_fail@plt+0x7544>
   188c4:	mov	r3, #0
   188c8:	ldr	r2, [sp, #72]	; 0x48
   188cc:	str	r3, [r2]
   188d0:	cmp	r7, #0
   188d4:	movne	r3, #0
   188d8:	strne	r3, [r7]
   188dc:	cmp	r4, #0
   188e0:	beq	18948 <__assert_fail@plt+0x75bc>
   188e4:	subs	r5, r4, r0
   188e8:	moveq	r6, #0
   188ec:	bne	18964 <__assert_fail@plt+0x75d8>
   188f0:	ldrb	r3, [r4, #1]
   188f4:	cmp	r3, #0
   188f8:	bne	1897c <__assert_fail@plt+0x75f0>
   188fc:	cmp	r6, #0
   18900:	moveq	r5, r6
   18904:	beq	18990 <__assert_fail@plt+0x7604>
   18908:	mov	r5, #0
   1890c:	ldrb	r3, [r6]
   18910:	cmp	r3, #43	; 0x2b
   18914:	bne	189d4 <__assert_fail@plt+0x7648>
   18918:	clz	r3, r5
   1891c:	lsr	r3, r3, #5
   18920:	cmp	r4, #0
   18924:	movne	r4, r3
   18928:	moveq	r4, #0
   1892c:	cmp	r4, #0
   18930:	movne	r5, #0
   18934:	movwne	r4, #47988	; 0xbb74
   18938:	movtne	r4, #1
   1893c:	beq	18a10 <__assert_fail@plt+0x7684>
   18940:	bl	112b4 <endpwent@plt>
   18944:	b	18ab0 <__assert_fail@plt+0x7724>
   18948:	ldrb	r3, [r0]
   1894c:	cmp	r3, #0
   18950:	moveq	r6, r4
   18954:	beq	188fc <__assert_fail@plt+0x7570>
   18958:	bl	1968c <__assert_fail@plt+0x8300>
   1895c:	mov	r6, r0
   18960:	b	188fc <__assert_fail@plt+0x7570>
   18964:	add	r1, r5, #1
   18968:	bl	19614 <__assert_fail@plt+0x8288>
   1896c:	mov	r6, r0
   18970:	mov	r3, #0
   18974:	strb	r3, [r0, r5]
   18978:	b	188f0 <__assert_fail@plt+0x7564>
   1897c:	add	r5, r4, #1
   18980:	cmp	r6, #0
   18984:	bne	1890c <__assert_fail@plt+0x7580>
   18988:	cmp	r5, #0
   1898c:	bne	18a7c <__assert_fail@plt+0x76f0>
   18990:	str	fp, [r8]
   18994:	cmp	r9, #0
   18998:	strne	sl, [r9]
   1899c:	ldr	r3, [sp, #72]	; 0x48
   189a0:	cmp	r3, #0
   189a4:	strne	r6, [r3]
   189a8:	movne	r6, #0
   189ac:	cmp	r7, #0
   189b0:	beq	189bc <__assert_fail@plt+0x7630>
   189b4:	str	r5, [r7]
   189b8:	mov	r5, #0
   189bc:	mov	r0, r6
   189c0:	bl	12dbc <__assert_fail@plt+0x1a30>
   189c4:	mov	r0, r5
   189c8:	bl	12dbc <__assert_fail@plt+0x1a30>
   189cc:	mov	r0, #0
   189d0:	b	18ad8 <__assert_fail@plt+0x774c>
   189d4:	mov	r0, r6
   189d8:	bl	11068 <getpwnam@plt>
   189dc:	cmp	r0, #0
   189e0:	beq	18918 <__assert_fail@plt+0x758c>
   189e4:	ldr	fp, [r0, #8]
   189e8:	adds	r4, r4, #0
   189ec:	movne	r4, #1
   189f0:	cmp	r5, #0
   189f4:	movne	r4, #0
   189f8:	cmp	r4, #0
   189fc:	bne	18af4 <__assert_fail@plt+0x7768>
   18a00:	bl	112b4 <endpwent@plt>
   18a04:	cmp	r5, #0
   18a08:	bne	18a7c <__assert_fail@plt+0x76f0>
   18a0c:	b	18990 <__assert_fail@plt+0x7604>
   18a10:	movw	r3, #45352	; 0xb128
   18a14:	movt	r3, #1
   18a18:	str	r3, [sp]
   18a1c:	add	r3, sp, #8
   18a20:	mov	r2, #10
   18a24:	mov	r1, #0
   18a28:	mov	r0, r6
   18a2c:	bl	19800 <__assert_fail@plt+0x8474>
   18a30:	cmp	r0, #0
   18a34:	movwne	r4, #47956	; 0xbb54
   18a38:	movtne	r4, #1
   18a3c:	bne	18a5c <__assert_fail@plt+0x76d0>
   18a40:	ldr	r3, [sp, #8]
   18a44:	cmn	r3, #1
   18a48:	movne	fp, r3
   18a4c:	movw	r4, #47956	; 0xbb54
   18a50:	movt	r4, #1
   18a54:	cmn	r3, #1
   18a58:	movne	r4, #0
   18a5c:	bl	112b4 <endpwent@plt>
   18a60:	clz	r3, r4
   18a64:	lsr	r3, r3, #5
   18a68:	cmp	r5, #0
   18a6c:	moveq	r3, #0
   18a70:	cmp	r3, #0
   18a74:	moveq	r5, #0
   18a78:	beq	18ab0 <__assert_fail@plt+0x7724>
   18a7c:	ldrb	r3, [r5]
   18a80:	cmp	r3, #43	; 0x2b
   18a84:	beq	18b34 <__assert_fail@plt+0x77a8>
   18a88:	mov	r0, r5
   18a8c:	bl	11380 <getgrnam@plt>
   18a90:	cmp	r0, #0
   18a94:	beq	18b34 <__assert_fail@plt+0x77a8>
   18a98:	ldr	sl, [r0, #8]
   18a9c:	mov	r4, #0
   18aa0:	bl	11044 <endgrent@plt>
   18aa4:	mov	r0, r5
   18aa8:	bl	1968c <__assert_fail@plt+0x8300>
   18aac:	mov	r5, r0
   18ab0:	cmp	r4, #0
   18ab4:	beq	18990 <__assert_fail@plt+0x7604>
   18ab8:	mov	r0, r6
   18abc:	bl	12dbc <__assert_fail@plt+0x1a30>
   18ac0:	mov	r0, r5
   18ac4:	bl	12dbc <__assert_fail@plt+0x1a30>
   18ac8:	mov	r2, #5
   18acc:	mov	r1, r4
   18ad0:	mov	r0, #0
   18ad4:	bl	11104 <dcgettext@plt>
   18ad8:	add	sp, sp, #36	; 0x24
   18adc:	ldrd	r4, [sp]
   18ae0:	ldrd	r6, [sp, #8]
   18ae4:	ldrd	r8, [sp, #16]
   18ae8:	ldrd	sl, [sp, #24]
   18aec:	add	sp, sp, #32
   18af0:	pop	{pc}		; (ldr pc, [sp], #4)
   18af4:	ldr	sl, [r0, #12]
   18af8:	mov	r0, sl
   18afc:	bl	11374 <getgrgid@plt>
   18b00:	cmp	r0, #0
   18b04:	beq	18b20 <__assert_fail@plt+0x7794>
   18b08:	ldr	r0, [r0]
   18b0c:	bl	1968c <__assert_fail@plt+0x8300>
   18b10:	mov	r5, r0
   18b14:	bl	11044 <endgrent@plt>
   18b18:	mov	r4, #0
   18b1c:	b	18940 <__assert_fail@plt+0x75b4>
   18b20:	add	r2, sp, #8
   18b24:	mov	r0, sl
   18b28:	mov	r1, #0
   18b2c:	bl	1637c <__assert_fail@plt+0x4ff0>
   18b30:	b	18b0c <__assert_fail@plt+0x7780>
   18b34:	movw	r3, #45352	; 0xb128
   18b38:	movt	r3, #1
   18b3c:	str	r3, [sp]
   18b40:	add	r3, sp, #8
   18b44:	mov	r2, #10
   18b48:	mov	r1, #0
   18b4c:	mov	r0, r5
   18b50:	bl	19800 <__assert_fail@plt+0x8474>
   18b54:	cmp	r0, #0
   18b58:	movwne	r4, #47972	; 0xbb64
   18b5c:	movtne	r4, #1
   18b60:	bne	18aa0 <__assert_fail@plt+0x7714>
   18b64:	ldr	r3, [sp, #8]
   18b68:	cmn	r3, #1
   18b6c:	movne	sl, r3
   18b70:	movw	r4, #47972	; 0xbb64
   18b74:	movt	r4, #1
   18b78:	cmn	r3, #1
   18b7c:	movne	r4, #0
   18b80:	b	18aa0 <__assert_fail@plt+0x7714>
   18b84:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18b88:	strd	r6, [sp, #8]
   18b8c:	strd	r8, [sp, #16]
   18b90:	str	sl, [sp, #24]
   18b94:	str	lr, [sp, #28]
   18b98:	sub	sp, sp, #8
   18b9c:	mov	r4, r0
   18ba0:	mov	r6, r1
   18ba4:	mov	r7, r3
   18ba8:	ldr	r8, [sp, #40]	; 0x28
   18bac:	subs	r9, r2, #0
   18bb0:	beq	18c30 <__assert_fail@plt+0x78a4>
   18bb4:	mov	r1, #58	; 0x3a
   18bb8:	bl	11218 <strchr@plt>
   18bbc:	mov	sl, r0
   18bc0:	str	r8, [sp, #4]
   18bc4:	str	r7, [sp]
   18bc8:	mov	r3, r9
   18bcc:	mov	r2, r6
   18bd0:	mov	r1, r0
   18bd4:	mov	r0, r4
   18bd8:	bl	18884 <__assert_fail@plt+0x74f8>
   18bdc:	mov	r5, r0
   18be0:	adds	r0, r0, #0
   18be4:	movne	r0, #1
   18be8:	cmp	sl, #0
   18bec:	movne	r0, #0
   18bf0:	cmp	r0, #0
   18bf4:	beq	18c4c <__assert_fail@plt+0x78c0>
   18bf8:	mov	r1, #46	; 0x2e
   18bfc:	mov	r0, r4
   18c00:	bl	11218 <strchr@plt>
   18c04:	subs	r1, r0, #0
   18c08:	beq	18c4c <__assert_fail@plt+0x78c0>
   18c0c:	str	r8, [sp, #4]
   18c10:	str	r7, [sp]
   18c14:	mov	r3, r9
   18c18:	mov	r2, r6
   18c1c:	mov	r0, r4
   18c20:	bl	18884 <__assert_fail@plt+0x74f8>
   18c24:	cmp	r0, #0
   18c28:	moveq	r5, r0
   18c2c:	b	18c4c <__assert_fail@plt+0x78c0>
   18c30:	str	r8, [sp, #4]
   18c34:	str	r3, [sp]
   18c38:	mov	r3, #0
   18c3c:	mov	r2, r1
   18c40:	mov	r1, r3
   18c44:	bl	18884 <__assert_fail@plt+0x74f8>
   18c48:	mov	r5, r0
   18c4c:	mov	r0, r5
   18c50:	add	sp, sp, #8
   18c54:	ldrd	r4, [sp]
   18c58:	ldrd	r6, [sp, #8]
   18c5c:	ldrd	r8, [sp, #16]
   18c60:	ldr	sl, [sp, #24]
   18c64:	add	sp, sp, #28
   18c68:	pop	{pc}		; (ldr pc, [sp], #4)
   18c6c:	strd	r4, [sp, #-16]!
   18c70:	str	r6, [sp, #8]
   18c74:	str	lr, [sp, #12]
   18c78:	sub	sp, sp, #32
   18c7c:	mov	r4, r0
   18c80:	ldr	r5, [sp, #48]	; 0x30
   18c84:	ldr	r6, [sp, #52]	; 0x34
   18c88:	cmp	r1, #0
   18c8c:	beq	18d58 <__assert_fail@plt+0x79cc>
   18c90:	str	r3, [sp, #4]
   18c94:	str	r2, [sp]
   18c98:	mov	r3, r1
   18c9c:	movw	r2, #48004	; 0xbb84
   18ca0:	movt	r2, #1
   18ca4:	mov	r1, #1
   18ca8:	bl	11278 <__fprintf_chk@plt>
   18cac:	mov	r2, #5
   18cb0:	movw	r1, #48024	; 0xbb98
   18cb4:	movt	r1, #1
   18cb8:	mov	r0, #0
   18cbc:	bl	11104 <dcgettext@plt>
   18cc0:	movw	r3, #2022	; 0x7e6
   18cc4:	str	r3, [sp]
   18cc8:	mov	r3, r0
   18ccc:	movw	r2, #48752	; 0xbe70
   18cd0:	movt	r2, #1
   18cd4:	mov	r1, #1
   18cd8:	mov	r0, r4
   18cdc:	bl	11278 <__fprintf_chk@plt>
   18ce0:	mov	r1, r4
   18ce4:	mov	r0, #10
   18ce8:	bl	110f8 <fputc_unlocked@plt>
   18cec:	mov	r2, #5
   18cf0:	movw	r1, #48028	; 0xbb9c
   18cf4:	movt	r1, #1
   18cf8:	mov	r0, #0
   18cfc:	bl	11104 <dcgettext@plt>
   18d00:	movw	r3, #48200	; 0xbc48
   18d04:	movt	r3, #1
   18d08:	mov	r2, r0
   18d0c:	mov	r1, #1
   18d10:	mov	r0, r4
   18d14:	bl	11278 <__fprintf_chk@plt>
   18d18:	mov	r1, r4
   18d1c:	mov	r0, #10
   18d20:	bl	110f8 <fputc_unlocked@plt>
   18d24:	cmp	r6, #9
   18d28:	ldrls	pc, [pc, r6, lsl #2]
   18d2c:	b	19030 <__assert_fail@plt+0x7ca4>
   18d30:	muleq	r1, ip, sp
   18d34:	andeq	r8, r1, r4, ror sp
   18d38:			; <UNDEFINED> instruction: 0x00018db0
   18d3c:	andeq	r8, r1, r4, ror #27
   18d40:	andeq	r8, r1, r0, lsr #28
   18d44:	andeq	r8, r1, r4, ror #28
   18d48:			; <UNDEFINED> instruction: 0x00018eb0
   18d4c:	andeq	r8, r1, r4, lsl #30
   18d50:	andeq	r8, r1, r0, ror #30
   18d54:	andeq	r8, r1, r4, asr #31
   18d58:	str	r3, [sp]
   18d5c:	mov	r3, r2
   18d60:	movw	r2, #48016	; 0xbb90
   18d64:	movt	r2, #1
   18d68:	mov	r1, #1
   18d6c:	bl	11278 <__fprintf_chk@plt>
   18d70:	b	18cac <__assert_fail@plt+0x7920>
   18d74:	mov	r2, #5
   18d78:	movw	r1, #48236	; 0xbc6c
   18d7c:	movt	r1, #1
   18d80:	mov	r0, #0
   18d84:	bl	11104 <dcgettext@plt>
   18d88:	ldr	r3, [r5]
   18d8c:	mov	r2, r0
   18d90:	mov	r1, #1
   18d94:	mov	r0, r4
   18d98:	bl	11278 <__fprintf_chk@plt>
   18d9c:	add	sp, sp, #32
   18da0:	ldrd	r4, [sp]
   18da4:	ldr	r6, [sp, #8]
   18da8:	add	sp, sp, #12
   18dac:	pop	{pc}		; (ldr pc, [sp], #4)
   18db0:	mov	r2, #5
   18db4:	movw	r1, #48252	; 0xbc7c
   18db8:	movt	r1, #1
   18dbc:	mov	r0, #0
   18dc0:	bl	11104 <dcgettext@plt>
   18dc4:	ldr	r3, [r5, #4]
   18dc8:	str	r3, [sp]
   18dcc:	ldr	r3, [r5]
   18dd0:	mov	r2, r0
   18dd4:	mov	r1, #1
   18dd8:	mov	r0, r4
   18ddc:	bl	11278 <__fprintf_chk@plt>
   18de0:	b	18d9c <__assert_fail@plt+0x7a10>
   18de4:	mov	r2, #5
   18de8:	movw	r1, #48276	; 0xbc94
   18dec:	movt	r1, #1
   18df0:	mov	r0, #0
   18df4:	bl	11104 <dcgettext@plt>
   18df8:	ldr	r3, [r5, #8]
   18dfc:	str	r3, [sp, #4]
   18e00:	ldr	r3, [r5, #4]
   18e04:	str	r3, [sp]
   18e08:	ldr	r3, [r5]
   18e0c:	mov	r2, r0
   18e10:	mov	r1, #1
   18e14:	mov	r0, r4
   18e18:	bl	11278 <__fprintf_chk@plt>
   18e1c:	b	18d9c <__assert_fail@plt+0x7a10>
   18e20:	mov	r2, #5
   18e24:	movw	r1, #48304	; 0xbcb0
   18e28:	movt	r1, #1
   18e2c:	mov	r0, #0
   18e30:	bl	11104 <dcgettext@plt>
   18e34:	ldr	r3, [r5, #12]
   18e38:	str	r3, [sp, #8]
   18e3c:	ldr	r3, [r5, #8]
   18e40:	str	r3, [sp, #4]
   18e44:	ldr	r3, [r5, #4]
   18e48:	str	r3, [sp]
   18e4c:	ldr	r3, [r5]
   18e50:	mov	r2, r0
   18e54:	mov	r1, #1
   18e58:	mov	r0, r4
   18e5c:	bl	11278 <__fprintf_chk@plt>
   18e60:	b	18d9c <__assert_fail@plt+0x7a10>
   18e64:	mov	r2, #5
   18e68:	movw	r1, #48336	; 0xbcd0
   18e6c:	movt	r1, #1
   18e70:	mov	r0, #0
   18e74:	bl	11104 <dcgettext@plt>
   18e78:	ldr	r3, [r5, #16]
   18e7c:	str	r3, [sp, #12]
   18e80:	ldr	r3, [r5, #12]
   18e84:	str	r3, [sp, #8]
   18e88:	ldr	r3, [r5, #8]
   18e8c:	str	r3, [sp, #4]
   18e90:	ldr	r3, [r5, #4]
   18e94:	str	r3, [sp]
   18e98:	ldr	r3, [r5]
   18e9c:	mov	r2, r0
   18ea0:	mov	r1, #1
   18ea4:	mov	r0, r4
   18ea8:	bl	11278 <__fprintf_chk@plt>
   18eac:	b	18d9c <__assert_fail@plt+0x7a10>
   18eb0:	mov	r2, #5
   18eb4:	movw	r1, #48372	; 0xbcf4
   18eb8:	movt	r1, #1
   18ebc:	mov	r0, #0
   18ec0:	bl	11104 <dcgettext@plt>
   18ec4:	ldr	r3, [r5, #20]
   18ec8:	str	r3, [sp, #16]
   18ecc:	ldr	r3, [r5, #16]
   18ed0:	str	r3, [sp, #12]
   18ed4:	ldr	r3, [r5, #12]
   18ed8:	str	r3, [sp, #8]
   18edc:	ldr	r3, [r5, #8]
   18ee0:	str	r3, [sp, #4]
   18ee4:	ldr	r3, [r5, #4]
   18ee8:	str	r3, [sp]
   18eec:	ldr	r3, [r5]
   18ef0:	mov	r2, r0
   18ef4:	mov	r1, #1
   18ef8:	mov	r0, r4
   18efc:	bl	11278 <__fprintf_chk@plt>
   18f00:	b	18d9c <__assert_fail@plt+0x7a10>
   18f04:	mov	r2, #5
   18f08:	movw	r1, #48412	; 0xbd1c
   18f0c:	movt	r1, #1
   18f10:	mov	r0, #0
   18f14:	bl	11104 <dcgettext@plt>
   18f18:	ldr	r3, [r5, #24]
   18f1c:	str	r3, [sp, #20]
   18f20:	ldr	r3, [r5, #20]
   18f24:	str	r3, [sp, #16]
   18f28:	ldr	r3, [r5, #16]
   18f2c:	str	r3, [sp, #12]
   18f30:	ldr	r3, [r5, #12]
   18f34:	str	r3, [sp, #8]
   18f38:	ldr	r3, [r5, #8]
   18f3c:	str	r3, [sp, #4]
   18f40:	ldr	r3, [r5, #4]
   18f44:	str	r3, [sp]
   18f48:	ldr	r3, [r5]
   18f4c:	mov	r2, r0
   18f50:	mov	r1, #1
   18f54:	mov	r0, r4
   18f58:	bl	11278 <__fprintf_chk@plt>
   18f5c:	b	18d9c <__assert_fail@plt+0x7a10>
   18f60:	mov	r2, #5
   18f64:	movw	r1, #48456	; 0xbd48
   18f68:	movt	r1, #1
   18f6c:	mov	r0, #0
   18f70:	bl	11104 <dcgettext@plt>
   18f74:	ldr	r3, [r5, #28]
   18f78:	str	r3, [sp, #24]
   18f7c:	ldr	r3, [r5, #24]
   18f80:	str	r3, [sp, #20]
   18f84:	ldr	r3, [r5, #20]
   18f88:	str	r3, [sp, #16]
   18f8c:	ldr	r3, [r5, #16]
   18f90:	str	r3, [sp, #12]
   18f94:	ldr	r3, [r5, #12]
   18f98:	str	r3, [sp, #8]
   18f9c:	ldr	r3, [r5, #8]
   18fa0:	str	r3, [sp, #4]
   18fa4:	ldr	r3, [r5, #4]
   18fa8:	str	r3, [sp]
   18fac:	ldr	r3, [r5]
   18fb0:	mov	r2, r0
   18fb4:	mov	r1, #1
   18fb8:	mov	r0, r4
   18fbc:	bl	11278 <__fprintf_chk@plt>
   18fc0:	b	18d9c <__assert_fail@plt+0x7a10>
   18fc4:	mov	r2, #5
   18fc8:	movw	r1, #48504	; 0xbd78
   18fcc:	movt	r1, #1
   18fd0:	mov	r0, #0
   18fd4:	bl	11104 <dcgettext@plt>
   18fd8:	ldr	r3, [r5, #32]
   18fdc:	str	r3, [sp, #28]
   18fe0:	ldr	r3, [r5, #28]
   18fe4:	str	r3, [sp, #24]
   18fe8:	ldr	r3, [r5, #24]
   18fec:	str	r3, [sp, #20]
   18ff0:	ldr	r3, [r5, #20]
   18ff4:	str	r3, [sp, #16]
   18ff8:	ldr	r3, [r5, #16]
   18ffc:	str	r3, [sp, #12]
   19000:	ldr	r3, [r5, #12]
   19004:	str	r3, [sp, #8]
   19008:	ldr	r3, [r5, #8]
   1900c:	str	r3, [sp, #4]
   19010:	ldr	r3, [r5, #4]
   19014:	str	r3, [sp]
   19018:	ldr	r3, [r5]
   1901c:	mov	r2, r0
   19020:	mov	r1, #1
   19024:	mov	r0, r4
   19028:	bl	11278 <__fprintf_chk@plt>
   1902c:	b	18d9c <__assert_fail@plt+0x7a10>
   19030:	mov	r2, #5
   19034:	movw	r1, #48556	; 0xbdac
   19038:	movt	r1, #1
   1903c:	mov	r0, #0
   19040:	bl	11104 <dcgettext@plt>
   19044:	ldr	r3, [r5, #32]
   19048:	str	r3, [sp, #28]
   1904c:	ldr	r3, [r5, #28]
   19050:	str	r3, [sp, #24]
   19054:	ldr	r3, [r5, #24]
   19058:	str	r3, [sp, #20]
   1905c:	ldr	r3, [r5, #20]
   19060:	str	r3, [sp, #16]
   19064:	ldr	r3, [r5, #16]
   19068:	str	r3, [sp, #12]
   1906c:	ldr	r3, [r5, #12]
   19070:	str	r3, [sp, #8]
   19074:	ldr	r3, [r5, #8]
   19078:	str	r3, [sp, #4]
   1907c:	ldr	r3, [r5, #4]
   19080:	str	r3, [sp]
   19084:	ldr	r3, [r5]
   19088:	mov	r2, r0
   1908c:	mov	r1, #1
   19090:	mov	r0, r4
   19094:	bl	11278 <__fprintf_chk@plt>
   19098:	b	18d9c <__assert_fail@plt+0x7a10>
   1909c:	strd	r4, [sp, #-12]!
   190a0:	str	lr, [sp, #8]
   190a4:	sub	sp, sp, #12
   190a8:	ldr	r5, [sp, #24]
   190ac:	ldr	ip, [r5]
   190b0:	cmp	ip, #0
   190b4:	beq	190ec <__assert_fail@plt+0x7d60>
   190b8:	mov	lr, r5
   190bc:	mov	ip, #0
   190c0:	add	ip, ip, #1
   190c4:	ldr	r4, [lr, #4]!
   190c8:	cmp	r4, #0
   190cc:	bne	190c0 <__assert_fail@plt+0x7d34>
   190d0:	str	ip, [sp, #4]
   190d4:	str	r5, [sp]
   190d8:	bl	18c6c <__assert_fail@plt+0x78e0>
   190dc:	add	sp, sp, #12
   190e0:	ldrd	r4, [sp]
   190e4:	add	sp, sp, #8
   190e8:	pop	{pc}		; (ldr pc, [sp], #4)
   190ec:	mov	ip, #0
   190f0:	b	190d0 <__assert_fail@plt+0x7d44>
   190f4:	strd	r4, [sp, #-12]!
   190f8:	str	lr, [sp, #8]
   190fc:	sub	sp, sp, #52	; 0x34
   19100:	ldr	r5, [sp, #64]	; 0x40
   19104:	add	r4, sp, #8
   19108:	mov	ip, #0
   1910c:	ldr	lr, [r5], #4
   19110:	str	lr, [r4], #4
   19114:	cmp	lr, #0
   19118:	beq	19128 <__assert_fail@plt+0x7d9c>
   1911c:	add	ip, ip, #1
   19120:	cmp	ip, #10
   19124:	bne	1910c <__assert_fail@plt+0x7d80>
   19128:	str	ip, [sp, #4]
   1912c:	add	ip, sp, #8
   19130:	str	ip, [sp]
   19134:	bl	18c6c <__assert_fail@plt+0x78e0>
   19138:	add	sp, sp, #52	; 0x34
   1913c:	ldrd	r4, [sp]
   19140:	add	sp, sp, #8
   19144:	pop	{pc}		; (ldr pc, [sp], #4)
   19148:	push	{r3}		; (str r3, [sp, #-4]!)
   1914c:	push	{lr}		; (str lr, [sp, #-4]!)
   19150:	sub	sp, sp, #16
   19154:	add	r3, sp, #24
   19158:	str	r3, [sp, #12]
   1915c:	str	r3, [sp]
   19160:	ldr	r3, [sp, #20]
   19164:	bl	190f4 <__assert_fail@plt+0x7d68>
   19168:	add	sp, sp, #16
   1916c:	pop	{lr}		; (ldr lr, [sp], #4)
   19170:	add	sp, sp, #4
   19174:	bx	lr
   19178:	str	r4, [sp, #-8]!
   1917c:	str	lr, [sp, #4]
   19180:	movw	r3, #53660	; 0xd19c
   19184:	movt	r3, #2
   19188:	ldr	r1, [r3]
   1918c:	mov	r0, #10
   19190:	bl	110f8 <fputc_unlocked@plt>
   19194:	mov	r2, #5
   19198:	movw	r1, #48616	; 0xbde8
   1919c:	movt	r1, #1
   191a0:	mov	r0, #0
   191a4:	bl	11104 <dcgettext@plt>
   191a8:	movw	r2, #48636	; 0xbdfc
   191ac:	movt	r2, #1
   191b0:	mov	r1, r0
   191b4:	mov	r0, #1
   191b8:	bl	11260 <__printf_chk@plt>
   191bc:	mov	r2, #5
   191c0:	movw	r1, #48660	; 0xbe14
   191c4:	movt	r1, #1
   191c8:	mov	r0, #0
   191cc:	bl	11104 <dcgettext@plt>
   191d0:	movw	r3, #45880	; 0xb338
   191d4:	movt	r3, #1
   191d8:	movw	r2, #45920	; 0xb360
   191dc:	movt	r2, #1
   191e0:	mov	r1, r0
   191e4:	mov	r0, #1
   191e8:	bl	11260 <__printf_chk@plt>
   191ec:	mov	r2, #5
   191f0:	movw	r1, #48680	; 0xbe28
   191f4:	movt	r1, #1
   191f8:	mov	r0, #0
   191fc:	bl	11104 <dcgettext@plt>
   19200:	movw	r2, #48720	; 0xbe50
   19204:	movt	r2, #1
   19208:	mov	r1, r0
   1920c:	mov	r0, #1
   19210:	bl	11260 <__printf_chk@plt>
   19214:	ldr	r4, [sp]
   19218:	add	sp, sp, #4
   1921c:	pop	{pc}		; (ldr pc, [sp], #4)
   19220:	str	r4, [sp, #-8]!
   19224:	str	lr, [sp, #4]
   19228:	bl	19d68 <__assert_fail@plt+0x89dc>
   1922c:	cmp	r0, #0
   19230:	beq	19240 <__assert_fail@plt+0x7eb4>
   19234:	ldr	r4, [sp]
   19238:	add	sp, sp, #4
   1923c:	pop	{pc}		; (ldr pc, [sp], #4)
   19240:	bl	196b4 <__assert_fail@plt+0x8328>
   19244:	str	r4, [sp, #-8]!
   19248:	str	lr, [sp, #4]
   1924c:	bl	19d68 <__assert_fail@plt+0x89dc>
   19250:	cmp	r0, #0
   19254:	beq	19264 <__assert_fail@plt+0x7ed8>
   19258:	ldr	r4, [sp]
   1925c:	add	sp, sp, #4
   19260:	pop	{pc}		; (ldr pc, [sp], #4)
   19264:	bl	196b4 <__assert_fail@plt+0x8328>
   19268:	str	r4, [sp, #-8]!
   1926c:	str	lr, [sp, #4]
   19270:	bl	19220 <__assert_fail@plt+0x7e94>
   19274:	ldr	r4, [sp]
   19278:	add	sp, sp, #4
   1927c:	pop	{pc}		; (ldr pc, [sp], #4)
   19280:	strd	r4, [sp, #-16]!
   19284:	str	r6, [sp, #8]
   19288:	str	lr, [sp, #12]
   1928c:	mov	r5, r0
   19290:	mov	r4, r1
   19294:	bl	19da4 <__assert_fail@plt+0x8a18>
   19298:	cmp	r0, #0
   1929c:	beq	192b0 <__assert_fail@plt+0x7f24>
   192a0:	ldrd	r4, [sp]
   192a4:	ldr	r6, [sp, #8]
   192a8:	add	sp, sp, #12
   192ac:	pop	{pc}		; (ldr pc, [sp], #4)
   192b0:	adds	r4, r4, #0
   192b4:	movne	r4, #1
   192b8:	cmp	r5, #0
   192bc:	moveq	r4, #1
   192c0:	cmp	r4, #0
   192c4:	beq	192a0 <__assert_fail@plt+0x7f14>
   192c8:	bl	196b4 <__assert_fail@plt+0x8328>
   192cc:	str	r4, [sp, #-8]!
   192d0:	str	lr, [sp, #4]
   192d4:	cmp	r1, #0
   192d8:	orreq	r1, r1, #1
   192dc:	bl	19da4 <__assert_fail@plt+0x8a18>
   192e0:	cmp	r0, #0
   192e4:	beq	192f4 <__assert_fail@plt+0x7f68>
   192e8:	ldr	r4, [sp]
   192ec:	add	sp, sp, #4
   192f0:	pop	{pc}		; (ldr pc, [sp], #4)
   192f4:	bl	196b4 <__assert_fail@plt+0x8328>
   192f8:	strd	r4, [sp, #-16]!
   192fc:	str	r6, [sp, #8]
   19300:	str	lr, [sp, #12]
   19304:	mov	r4, r0
   19308:	mov	r6, r1
   1930c:	mov	r5, r2
   19310:	bl	1a4e0 <__assert_fail@plt+0x9154>
   19314:	cmp	r0, #0
   19318:	beq	1932c <__assert_fail@plt+0x7fa0>
   1931c:	ldrd	r4, [sp]
   19320:	ldr	r6, [sp, #8]
   19324:	add	sp, sp, #12
   19328:	pop	{pc}		; (ldr pc, [sp], #4)
   1932c:	cmp	r4, #0
   19330:	beq	19340 <__assert_fail@plt+0x7fb4>
   19334:	cmp	r6, #0
   19338:	cmpne	r5, #0
   1933c:	beq	1931c <__assert_fail@plt+0x7f90>
   19340:	bl	196b4 <__assert_fail@plt+0x8328>
   19344:	str	r4, [sp, #-8]!
   19348:	str	lr, [sp, #4]
   1934c:	bl	192f8 <__assert_fail@plt+0x7f6c>
   19350:	ldr	r4, [sp]
   19354:	add	sp, sp, #4
   19358:	pop	{pc}		; (ldr pc, [sp], #4)
   1935c:	str	r4, [sp, #-8]!
   19360:	str	lr, [sp, #4]
   19364:	mov	ip, r1
   19368:	mov	r3, r2
   1936c:	cmp	r2, #0
   19370:	cmpne	r1, #0
   19374:	moveq	r3, #1
   19378:	moveq	ip, r3
   1937c:	mov	r2, r3
   19380:	mov	r1, ip
   19384:	bl	1a4e0 <__assert_fail@plt+0x9154>
   19388:	cmp	r0, #0
   1938c:	beq	1939c <__assert_fail@plt+0x8010>
   19390:	ldr	r4, [sp]
   19394:	add	sp, sp, #4
   19398:	pop	{pc}		; (ldr pc, [sp], #4)
   1939c:	bl	196b4 <__assert_fail@plt+0x8328>
   193a0:	str	r4, [sp, #-8]!
   193a4:	str	lr, [sp, #4]
   193a8:	mov	r2, r1
   193ac:	mov	r1, r0
   193b0:	mov	r0, #0
   193b4:	bl	192f8 <__assert_fail@plt+0x7f6c>
   193b8:	ldr	r4, [sp]
   193bc:	add	sp, sp, #4
   193c0:	pop	{pc}		; (ldr pc, [sp], #4)
   193c4:	str	r4, [sp, #-8]!
   193c8:	str	lr, [sp, #4]
   193cc:	mov	r2, r1
   193d0:	mov	r1, r0
   193d4:	mov	r0, #0
   193d8:	bl	1935c <__assert_fail@plt+0x7fd0>
   193dc:	ldr	r4, [sp]
   193e0:	add	sp, sp, #4
   193e4:	pop	{pc}		; (ldr pc, [sp], #4)
   193e8:	strd	r4, [sp, #-16]!
   193ec:	str	r6, [sp, #8]
   193f0:	str	lr, [sp, #12]
   193f4:	mov	r5, r1
   193f8:	ldr	r4, [r1]
   193fc:	cmp	r0, #0
   19400:	beq	19430 <__assert_fail@plt+0x80a4>
   19404:	lsr	r3, r4, #1
   19408:	add	r3, r3, #1
   1940c:	adds	r4, r4, r3
   19410:	bcs	1944c <__assert_fail@plt+0x80c0>
   19414:	mov	r1, r4
   19418:	bl	192f8 <__assert_fail@plt+0x7f6c>
   1941c:	str	r4, [r5]
   19420:	ldrd	r4, [sp]
   19424:	ldr	r6, [sp, #8]
   19428:	add	sp, sp, #12
   1942c:	pop	{pc}		; (ldr pc, [sp], #4)
   19430:	cmp	r4, #0
   19434:	bne	19414 <__assert_fail@plt+0x8088>
   19438:	mov	r4, #64	; 0x40
   1943c:	udiv	r4, r4, r2
   19440:	cmp	r2, #64	; 0x40
   19444:	addhi	r4, r4, #1
   19448:	b	19414 <__assert_fail@plt+0x8088>
   1944c:	bl	196b4 <__assert_fail@plt+0x8328>
   19450:	str	r4, [sp, #-8]!
   19454:	str	lr, [sp, #4]
   19458:	mov	r2, #1
   1945c:	bl	193e8 <__assert_fail@plt+0x805c>
   19460:	ldr	r4, [sp]
   19464:	add	sp, sp, #4
   19468:	pop	{pc}		; (ldr pc, [sp], #4)
   1946c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19470:	strd	r6, [sp, #8]
   19474:	str	r8, [sp, #16]
   19478:	str	lr, [sp, #20]
   1947c:	mov	r5, r1
   19480:	ldr	lr, [sp, #24]
   19484:	ldr	ip, [r1]
   19488:	asr	r4, ip, #1
   1948c:	adds	r4, ip, r4
   19490:	movvs	r1, #1
   19494:	movvc	r1, #0
   19498:	cmp	r1, #0
   1949c:	mvnne	r4, #-2147483648	; 0x80000000
   194a0:	mvn	r8, r3
   194a4:	lsr	r8, r8, #31
   194a8:	cmp	r3, r4
   194ac:	movge	r1, #0
   194b0:	andlt	r1, r8, #1
   194b4:	cmp	r1, #0
   194b8:	movne	r4, r3
   194bc:	smull	r6, r7, r4, lr
   194c0:	asr	r1, r6, #31
   194c4:	cmp	r1, r7
   194c8:	bne	194e0 <__assert_fail@plt+0x8154>
   194cc:	mov	r1, r6
   194d0:	cmp	r6, #63	; 0x3f
   194d4:	movle	r1, #64	; 0x40
   194d8:	ble	194e4 <__assert_fail@plt+0x8158>
   194dc:	b	194f0 <__assert_fail@plt+0x8164>
   194e0:	mvn	r1, #-2147483648	; 0x80000000
   194e4:	sdiv	r4, r1, lr
   194e8:	mls	r6, lr, r4, r1
   194ec:	sub	r1, r1, r6
   194f0:	cmp	r0, #0
   194f4:	moveq	r6, #0
   194f8:	streq	r6, [r5]
   194fc:	sub	r6, r4, ip
   19500:	cmp	r6, r2
   19504:	bge	1953c <__assert_fail@plt+0x81b0>
   19508:	adds	r2, ip, r2
   1950c:	mov	r4, r2
   19510:	bvs	19558 <__assert_fail@plt+0x81cc>
   19514:	cmp	r2, r3
   19518:	movle	r3, #0
   1951c:	andgt	r3, r8, #1
   19520:	cmp	r3, #0
   19524:	bne	19558 <__assert_fail@plt+0x81cc>
   19528:	smull	r2, r3, r2, lr
   1952c:	asr	ip, r2, #31
   19530:	mov	r1, r2
   19534:	cmp	ip, r3
   19538:	bne	19558 <__assert_fail@plt+0x81cc>
   1953c:	bl	19280 <__assert_fail@plt+0x7ef4>
   19540:	str	r4, [r5]
   19544:	ldrd	r4, [sp]
   19548:	ldrd	r6, [sp, #8]
   1954c:	ldr	r8, [sp, #16]
   19550:	add	sp, sp, #20
   19554:	pop	{pc}		; (ldr pc, [sp], #4)
   19558:	bl	196b4 <__assert_fail@plt+0x8328>
   1955c:	str	r4, [sp, #-8]!
   19560:	str	lr, [sp, #4]
   19564:	bl	19cf4 <__assert_fail@plt+0x8968>
   19568:	cmp	r0, #0
   1956c:	beq	1957c <__assert_fail@plt+0x81f0>
   19570:	ldr	r4, [sp]
   19574:	add	sp, sp, #4
   19578:	pop	{pc}		; (ldr pc, [sp], #4)
   1957c:	bl	196b4 <__assert_fail@plt+0x8328>
   19580:	str	r4, [sp, #-8]!
   19584:	str	lr, [sp, #4]
   19588:	mov	r1, #1
   1958c:	bl	1955c <__assert_fail@plt+0x81d0>
   19590:	ldr	r4, [sp]
   19594:	add	sp, sp, #4
   19598:	pop	{pc}		; (ldr pc, [sp], #4)
   1959c:	str	r4, [sp, #-8]!
   195a0:	str	lr, [sp, #4]
   195a4:	bl	19cf4 <__assert_fail@plt+0x8968>
   195a8:	cmp	r0, #0
   195ac:	beq	195bc <__assert_fail@plt+0x8230>
   195b0:	ldr	r4, [sp]
   195b4:	add	sp, sp, #4
   195b8:	pop	{pc}		; (ldr pc, [sp], #4)
   195bc:	bl	196b4 <__assert_fail@plt+0x8328>
   195c0:	str	r4, [sp, #-8]!
   195c4:	str	lr, [sp, #4]
   195c8:	mov	r1, #1
   195cc:	bl	1959c <__assert_fail@plt+0x8210>
   195d0:	ldr	r4, [sp]
   195d4:	add	sp, sp, #4
   195d8:	pop	{pc}		; (ldr pc, [sp], #4)
   195dc:	strd	r4, [sp, #-16]!
   195e0:	str	r6, [sp, #8]
   195e4:	str	lr, [sp, #12]
   195e8:	mov	r5, r0
   195ec:	mov	r4, r1
   195f0:	mov	r0, r1
   195f4:	bl	19220 <__assert_fail@plt+0x7e94>
   195f8:	mov	r2, r4
   195fc:	mov	r1, r5
   19600:	bl	110c8 <memcpy@plt>
   19604:	ldrd	r4, [sp]
   19608:	ldr	r6, [sp, #8]
   1960c:	add	sp, sp, #12
   19610:	pop	{pc}		; (ldr pc, [sp], #4)
   19614:	strd	r4, [sp, #-16]!
   19618:	str	r6, [sp, #8]
   1961c:	str	lr, [sp, #12]
   19620:	mov	r5, r0
   19624:	mov	r4, r1
   19628:	mov	r0, r1
   1962c:	bl	19244 <__assert_fail@plt+0x7eb8>
   19630:	mov	r2, r4
   19634:	mov	r1, r5
   19638:	bl	110c8 <memcpy@plt>
   1963c:	ldrd	r4, [sp]
   19640:	ldr	r6, [sp, #8]
   19644:	add	sp, sp, #12
   19648:	pop	{pc}		; (ldr pc, [sp], #4)
   1964c:	strd	r4, [sp, #-16]!
   19650:	str	r6, [sp, #8]
   19654:	str	lr, [sp, #12]
   19658:	mov	r5, r0
   1965c:	mov	r4, r1
   19660:	add	r0, r1, #1
   19664:	bl	19244 <__assert_fail@plt+0x7eb8>
   19668:	mov	r2, #0
   1966c:	strb	r2, [r0, r4]
   19670:	mov	r2, r4
   19674:	mov	r1, r5
   19678:	bl	110c8 <memcpy@plt>
   1967c:	ldrd	r4, [sp]
   19680:	ldr	r6, [sp, #8]
   19684:	add	sp, sp, #12
   19688:	pop	{pc}		; (ldr pc, [sp], #4)
   1968c:	str	r4, [sp, #-8]!
   19690:	str	lr, [sp, #4]
   19694:	mov	r4, r0
   19698:	bl	1120c <strlen@plt>
   1969c:	add	r1, r0, #1
   196a0:	mov	r0, r4
   196a4:	bl	195dc <__assert_fail@plt+0x8250>
   196a8:	ldr	r4, [sp]
   196ac:	add	sp, sp, #4
   196b0:	pop	{pc}		; (ldr pc, [sp], #4)
   196b4:	str	r4, [sp, #-8]!
   196b8:	str	lr, [sp, #4]
   196bc:	movw	r3, #53568	; 0xd140
   196c0:	movt	r3, #2
   196c4:	ldr	r4, [r3]
   196c8:	mov	r2, #5
   196cc:	movw	r1, #48800	; 0xbea0
   196d0:	movt	r1, #1
   196d4:	mov	r0, #0
   196d8:	bl	11104 <dcgettext@plt>
   196dc:	mov	r3, r0
   196e0:	movw	r2, #46120	; 0xb428
   196e4:	movt	r2, #1
   196e8:	mov	r1, #0
   196ec:	mov	r0, r4
   196f0:	bl	11194 <error@plt>
   196f4:	bl	11344 <abort@plt>
   196f8:	str	r4, [sp, #-8]!
   196fc:	str	lr, [sp, #4]
   19700:	orr	r1, r1, #512	; 0x200
   19704:	bl	1442c <__assert_fail@plt+0x30a0>
   19708:	cmp	r0, #0
   1970c:	beq	1971c <__assert_fail@plt+0x8390>
   19710:	ldr	r4, [sp]
   19714:	add	sp, sp, #4
   19718:	pop	{pc}		; (ldr pc, [sp], #4)
   1971c:	bl	1123c <__errno_location@plt>
   19720:	ldr	r3, [r0]
   19724:	cmp	r3, #22
   19728:	beq	19730 <__assert_fail@plt+0x83a4>
   1972c:	bl	196b4 <__assert_fail@plt+0x8328>
   19730:	movw	r3, #48820	; 0xbeb4
   19734:	movt	r3, #1
   19738:	mov	r2, #41	; 0x29
   1973c:	movw	r1, #48832	; 0xbec0
   19740:	movt	r1, #1
   19744:	movw	r0, #48844	; 0xbecc
   19748:	movt	r0, #1
   1974c:	bl	1138c <__assert_fail@plt>
   19750:	ldr	r3, [r0, #48]	; 0x30
   19754:	and	r3, r3, #17
   19758:	cmp	r3, #16
   1975c:	beq	19780 <__assert_fail@plt+0x83f4>
   19760:	cmp	r3, #17
   19764:	beq	19770 <__assert_fail@plt+0x83e4>
   19768:	mov	r0, #0
   1976c:	bx	lr
   19770:	ldr	r0, [r1, #48]	; 0x30
   19774:	adds	r0, r0, #0
   19778:	movne	r0, #1
   1977c:	bx	lr
   19780:	mov	r0, #1
   19784:	bx	lr
   19788:	cmp	r2, #0
   1978c:	beq	197f4 <__assert_fail@plt+0x8468>
   19790:	strd	r4, [sp, #-8]!
   19794:	sub	ip, r2, #1
   19798:	ldr	r4, [r0]
   1979c:	mov	r2, #0
   197a0:	mov	r3, #0
   197a4:	cmp	r1, r3
   197a8:	blt	197e8 <__assert_fail@plt+0x845c>
   197ac:	umull	r4, r5, r1, r4
   197b0:	cmp	r5, #0
   197b4:	movne	r3, #1
   197b8:	and	r3, r3, #1
   197bc:	cmp	r3, #0
   197c0:	mvnne	r4, #0
   197c4:	orr	r2, r2, r3
   197c8:	sub	ip, ip, #1
   197cc:	cmn	ip, #1
   197d0:	bne	197a0 <__assert_fail@plt+0x8414>
   197d4:	str	r4, [r0]
   197d8:	mov	r0, r2
   197dc:	ldrd	r4, [sp]
   197e0:	add	sp, sp, #8
   197e4:	bx	lr
   197e8:	subs	r3, r4, r3
   197ec:	movne	r3, #1
   197f0:	b	197ac <__assert_fail@plt+0x8420>
   197f4:	mov	r2, #0
   197f8:	mov	r0, r2
   197fc:	bx	lr
   19800:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19804:	strd	r6, [sp, #8]
   19808:	strd	r8, [sp, #16]
   1980c:	str	lr, [sp, #24]
   19810:	sub	sp, sp, #12
   19814:	cmp	r2, #36	; 0x24
   19818:	bhi	1986c <__assert_fail@plt+0x84e0>
   1981c:	mov	r5, r0
   19820:	mov	r6, r1
   19824:	mov	r7, r2
   19828:	mov	r9, r3
   1982c:	cmp	r1, #0
   19830:	addeq	r6, sp, #4
   19834:	bl	1123c <__errno_location@plt>
   19838:	mov	r8, r0
   1983c:	mov	r3, #0
   19840:	str	r3, [r0]
   19844:	ldrb	r4, [r5]
   19848:	bl	111e8 <__ctype_b_loc@plt>
   1984c:	ldr	r1, [r0]
   19850:	mov	r2, r5
   19854:	lsl	r3, r4, #1
   19858:	ldrh	r3, [r1, r3]
   1985c:	tst	r3, #8192	; 0x2000
   19860:	beq	1988c <__assert_fail@plt+0x8500>
   19864:	ldrb	r4, [r2, #1]!
   19868:	b	19854 <__assert_fail@plt+0x84c8>
   1986c:	movw	r3, #48860	; 0xbedc
   19870:	movt	r3, #1
   19874:	mov	r2, #85	; 0x55
   19878:	movw	r1, #48872	; 0xbee8
   1987c:	movt	r1, #1
   19880:	movw	r0, #48888	; 0xbef8
   19884:	movt	r0, #1
   19888:	bl	1138c <__assert_fail@plt>
   1988c:	cmp	r4, #45	; 0x2d
   19890:	moveq	r4, #4
   19894:	beq	19a20 <__assert_fail@plt+0x8694>
   19898:	mov	r2, r7
   1989c:	mov	r1, r6
   198a0:	mov	r0, r5
   198a4:	bl	11200 <strtoul@plt>
   198a8:	str	r0, [sp]
   198ac:	ldr	r7, [r6]
   198b0:	cmp	r7, r5
   198b4:	beq	198d8 <__assert_fail@plt+0x854c>
   198b8:	ldr	r3, [r8]
   198bc:	cmp	r3, #0
   198c0:	beq	199f8 <__assert_fail@plt+0x866c>
   198c4:	cmp	r3, #34	; 0x22
   198c8:	moveq	r4, #1
   198cc:	beq	199fc <__assert_fail@plt+0x8670>
   198d0:	mov	r4, #4
   198d4:	b	19a20 <__assert_fail@plt+0x8694>
   198d8:	ldr	r3, [sp, #40]	; 0x28
   198dc:	cmp	r3, #0
   198e0:	beq	19ce4 <__assert_fail@plt+0x8958>
   198e4:	ldrb	r1, [r5]
   198e8:	cmp	r1, #0
   198ec:	moveq	r4, #4
   198f0:	beq	19a20 <__assert_fail@plt+0x8694>
   198f4:	mov	r0, r3
   198f8:	bl	11218 <strchr@plt>
   198fc:	cmp	r0, #0
   19900:	beq	19cec <__assert_fail@plt+0x8960>
   19904:	mov	r3, #1
   19908:	str	r3, [sp]
   1990c:	ldrb	r5, [r7]
   19910:	mov	r4, #0
   19914:	mov	r1, r5
   19918:	ldr	r0, [sp, #40]	; 0x28
   1991c:	bl	11218 <strchr@plt>
   19920:	cmp	r0, #0
   19924:	beq	19a3c <__assert_fail@plt+0x86b0>
   19928:	sub	r3, r5, #69	; 0x45
   1992c:	cmp	r3, #47	; 0x2f
   19930:	ldrls	pc, [pc, r3, lsl #2]
   19934:	b	19b88 <__assert_fail@plt+0x87fc>
   19938:	andeq	r9, r1, ip, asr #20
   1993c:	andeq	r9, r1, r8, lsl #23
   19940:	andeq	r9, r1, ip, asr #20
   19944:	andeq	r9, r1, r8, lsl #23
   19948:	andeq	r9, r1, r8, lsl #23
   1994c:	andeq	r9, r1, r8, lsl #23
   19950:	andeq	r9, r1, ip, asr #20
   19954:	andeq	r9, r1, r8, lsl #23
   19958:	andeq	r9, r1, ip, asr #20
   1995c:	andeq	r9, r1, r8, lsl #23
   19960:	andeq	r9, r1, r8, lsl #23
   19964:	andeq	r9, r1, ip, asr #20
   19968:	andeq	r9, r1, r8, lsl #23
   1996c:	andeq	r9, r1, r8, lsl #23
   19970:	andeq	r9, r1, r8, lsl #23
   19974:	andeq	r9, r1, ip, asr #20
   19978:	andeq	r9, r1, r8, lsl #23
   1997c:	andeq	r9, r1, r8, lsl #23
   19980:	andeq	r9, r1, r8, lsl #23
   19984:	andeq	r9, r1, r8, lsl #23
   19988:	andeq	r9, r1, ip, asr #20
   1998c:	andeq	r9, r1, ip, asr #20
   19990:	andeq	r9, r1, r8, lsl #23
   19994:	andeq	r9, r1, r8, lsl #23
   19998:	andeq	r9, r1, r8, lsl #23
   1999c:	andeq	r9, r1, r8, lsl #23
   199a0:	andeq	r9, r1, r8, lsl #23
   199a4:	andeq	r9, r1, r8, lsl #23
   199a8:	andeq	r9, r1, r8, lsl #23
   199ac:	andeq	r9, r1, r8, lsl #23
   199b0:	andeq	r9, r1, r8, lsl #23
   199b4:	andeq	r9, r1, r8, lsl #23
   199b8:	andeq	r9, r1, r8, lsl #23
   199bc:	andeq	r9, r1, r8, lsl #23
   199c0:	andeq	r9, r1, ip, asr #20
   199c4:	andeq	r9, r1, r8, lsl #23
   199c8:	andeq	r9, r1, r8, lsl #23
   199cc:	andeq	r9, r1, r8, lsl #23
   199d0:	andeq	r9, r1, ip, asr #20
   199d4:	andeq	r9, r1, r8, lsl #23
   199d8:	andeq	r9, r1, ip, asr #20
   199dc:	andeq	r9, r1, r8, lsl #23
   199e0:	andeq	r9, r1, r8, lsl #23
   199e4:	andeq	r9, r1, r8, lsl #23
   199e8:	andeq	r9, r1, r8, lsl #23
   199ec:	andeq	r9, r1, r8, lsl #23
   199f0:	andeq	r9, r1, r8, lsl #23
   199f4:	andeq	r9, r1, ip, asr #20
   199f8:	mov	r4, #0
   199fc:	ldr	r3, [sp, #40]	; 0x28
   19a00:	cmp	r3, #0
   19a04:	streq	r0, [r9]
   19a08:	beq	19a20 <__assert_fail@plt+0x8694>
   19a0c:	ldrb	r5, [r7]
   19a10:	cmp	r5, #0
   19a14:	bne	19914 <__assert_fail@plt+0x8588>
   19a18:	ldr	r3, [sp]
   19a1c:	str	r3, [r9]
   19a20:	mov	r0, r4
   19a24:	add	sp, sp, #12
   19a28:	ldrd	r4, [sp]
   19a2c:	ldrd	r6, [sp, #8]
   19a30:	ldrd	r8, [sp, #16]
   19a34:	add	sp, sp, #24
   19a38:	pop	{pc}		; (ldr pc, [sp], #4)
   19a3c:	ldr	r3, [sp]
   19a40:	str	r3, [r9]
   19a44:	orr	r4, r4, #2
   19a48:	b	19a20 <__assert_fail@plt+0x8694>
   19a4c:	mov	r1, #48	; 0x30
   19a50:	ldr	r0, [sp, #40]	; 0x28
   19a54:	bl	11218 <strchr@plt>
   19a58:	cmp	r0, #0
   19a5c:	beq	19b94 <__assert_fail@plt+0x8808>
   19a60:	ldrb	r3, [r7, #1]
   19a64:	cmp	r3, #68	; 0x44
   19a68:	beq	19ba0 <__assert_fail@plt+0x8814>
   19a6c:	cmp	r3, #105	; 0x69
   19a70:	beq	19b70 <__assert_fail@plt+0x87e4>
   19a74:	cmp	r3, #66	; 0x42
   19a78:	moveq	r7, #2
   19a7c:	movne	r7, #1
   19a80:	moveq	r1, #1000	; 0x3e8
   19a84:	movne	r1, #1024	; 0x400
   19a88:	sub	r5, r5, #66	; 0x42
   19a8c:	cmp	r5, #53	; 0x35
   19a90:	ldrls	pc, [pc, r5, lsl #2]
   19a94:	b	19cb0 <__assert_fail@plt+0x8924>
   19a98:	ldrdeq	r9, [r1], -r8
   19a9c:			; <UNDEFINED> instruction: 0x00019cb0
   19aa0:			; <UNDEFINED> instruction: 0x00019cb0
   19aa4:	andeq	r9, r1, r4, lsl #24
   19aa8:			; <UNDEFINED> instruction: 0x00019cb0
   19aac:	andeq	r9, r1, r4, lsl ip
   19ab0:			; <UNDEFINED> instruction: 0x00019cb0
   19ab4:			; <UNDEFINED> instruction: 0x00019cb0
   19ab8:			; <UNDEFINED> instruction: 0x00019cb0
   19abc:	andeq	r9, r1, r4, lsr #24
   19ac0:			; <UNDEFINED> instruction: 0x00019cb0
   19ac4:	andeq	r9, r1, r4, lsr ip
   19ac8:			; <UNDEFINED> instruction: 0x00019cb0
   19acc:			; <UNDEFINED> instruction: 0x00019cb0
   19ad0:	andeq	r9, r1, r4, asr #24
   19ad4:			; <UNDEFINED> instruction: 0x00019cb0
   19ad8:			; <UNDEFINED> instruction: 0x00019cb0
   19adc:			; <UNDEFINED> instruction: 0x00019cb0
   19ae0:	andeq	r9, r1, r4, asr ip
   19ae4:			; <UNDEFINED> instruction: 0x00019cb0
   19ae8:			; <UNDEFINED> instruction: 0x00019cb0
   19aec:			; <UNDEFINED> instruction: 0x00019cb0
   19af0:			; <UNDEFINED> instruction: 0x00019cb0
   19af4:	muleq	r1, r0, ip
   19af8:	andeq	r9, r1, r0, lsr #25
   19afc:			; <UNDEFINED> instruction: 0x00019cb0
   19b00:			; <UNDEFINED> instruction: 0x00019cb0
   19b04:			; <UNDEFINED> instruction: 0x00019cb0
   19b08:			; <UNDEFINED> instruction: 0x00019cb0
   19b0c:			; <UNDEFINED> instruction: 0x00019cb0
   19b10:			; <UNDEFINED> instruction: 0x00019cb0
   19b14:			; <UNDEFINED> instruction: 0x00019cb0
   19b18:	andeq	r9, r1, ip, lsr #23
   19b1c:	andeq	r9, r1, r0, asr #25
   19b20:			; <UNDEFINED> instruction: 0x00019cb0
   19b24:			; <UNDEFINED> instruction: 0x00019cb0
   19b28:			; <UNDEFINED> instruction: 0x00019cb0
   19b2c:	andeq	r9, r1, r4, lsl ip
   19b30:			; <UNDEFINED> instruction: 0x00019cb0
   19b34:			; <UNDEFINED> instruction: 0x00019cb0
   19b38:			; <UNDEFINED> instruction: 0x00019cb0
   19b3c:	andeq	r9, r1, r4, lsr #24
   19b40:			; <UNDEFINED> instruction: 0x00019cb0
   19b44:	andeq	r9, r1, r4, lsr ip
   19b48:			; <UNDEFINED> instruction: 0x00019cb0
   19b4c:			; <UNDEFINED> instruction: 0x00019cb0
   19b50:			; <UNDEFINED> instruction: 0x00019cb0
   19b54:			; <UNDEFINED> instruction: 0x00019cb0
   19b58:			; <UNDEFINED> instruction: 0x00019cb0
   19b5c:			; <UNDEFINED> instruction: 0x00019cb0
   19b60:	andeq	r9, r1, r4, asr ip
   19b64:			; <UNDEFINED> instruction: 0x00019cb0
   19b68:			; <UNDEFINED> instruction: 0x00019cb0
   19b6c:	andeq	r9, r1, r4, ror #24
   19b70:	ldrb	r3, [r7, #2]
   19b74:	cmp	r3, #66	; 0x42
   19b78:	movne	r7, #1
   19b7c:	moveq	r7, #3
   19b80:	mov	r1, #1024	; 0x400
   19b84:	b	19a88 <__assert_fail@plt+0x86fc>
   19b88:	mov	r7, #1
   19b8c:	mov	r1, #1024	; 0x400
   19b90:	b	19a88 <__assert_fail@plt+0x86fc>
   19b94:	mov	r7, #1
   19b98:	mov	r1, #1024	; 0x400
   19b9c:	b	19a88 <__assert_fail@plt+0x86fc>
   19ba0:	mov	r7, #2
   19ba4:	mov	r1, #1000	; 0x3e8
   19ba8:	b	19a88 <__assert_fail@plt+0x86fc>
   19bac:	ldr	r3, [sp]
   19bb0:	lsl	r2, r3, #9
   19bb4:	lsr	r3, r3, #23
   19bb8:	cmp	r3, #0
   19bbc:	mvnne	r3, #0
   19bc0:	strne	r3, [sp]
   19bc4:	movne	r0, #1
   19bc8:	bne	19cc4 <__assert_fail@plt+0x8938>
   19bcc:	str	r2, [sp]
   19bd0:	mov	r0, #0
   19bd4:	b	19cc4 <__assert_fail@plt+0x8938>
   19bd8:	ldr	r3, [sp]
   19bdc:	lsl	r2, r3, #10
   19be0:	lsr	r3, r3, #22
   19be4:	cmp	r3, #0
   19be8:	mvnne	r3, #0
   19bec:	strne	r3, [sp]
   19bf0:	movne	r0, #1
   19bf4:	bne	19cc4 <__assert_fail@plt+0x8938>
   19bf8:	str	r2, [sp]
   19bfc:	mov	r0, #0
   19c00:	b	19cc4 <__assert_fail@plt+0x8938>
   19c04:	mov	r2, #6
   19c08:	mov	r0, sp
   19c0c:	bl	19788 <__assert_fail@plt+0x83fc>
   19c10:	b	19cc4 <__assert_fail@plt+0x8938>
   19c14:	mov	r2, #3
   19c18:	mov	r0, sp
   19c1c:	bl	19788 <__assert_fail@plt+0x83fc>
   19c20:	b	19cc4 <__assert_fail@plt+0x8938>
   19c24:	mov	r2, #1
   19c28:	mov	r0, sp
   19c2c:	bl	19788 <__assert_fail@plt+0x83fc>
   19c30:	b	19cc4 <__assert_fail@plt+0x8938>
   19c34:	mov	r2, #2
   19c38:	mov	r0, sp
   19c3c:	bl	19788 <__assert_fail@plt+0x83fc>
   19c40:	b	19cc4 <__assert_fail@plt+0x8938>
   19c44:	mov	r2, #5
   19c48:	mov	r0, sp
   19c4c:	bl	19788 <__assert_fail@plt+0x83fc>
   19c50:	b	19cc4 <__assert_fail@plt+0x8938>
   19c54:	mov	r2, #4
   19c58:	mov	r0, sp
   19c5c:	bl	19788 <__assert_fail@plt+0x83fc>
   19c60:	b	19cc4 <__assert_fail@plt+0x8938>
   19c64:	ldr	r3, [sp]
   19c68:	lsl	r2, r3, #1
   19c6c:	lsr	r3, r3, #31
   19c70:	cmp	r3, #0
   19c74:	mvnne	r3, #0
   19c78:	strne	r3, [sp]
   19c7c:	movne	r0, #1
   19c80:	bne	19cc4 <__assert_fail@plt+0x8938>
   19c84:	str	r2, [sp]
   19c88:	mov	r0, #0
   19c8c:	b	19cc4 <__assert_fail@plt+0x8938>
   19c90:	mov	r2, #8
   19c94:	mov	r0, sp
   19c98:	bl	19788 <__assert_fail@plt+0x83fc>
   19c9c:	b	19cc4 <__assert_fail@plt+0x8938>
   19ca0:	mov	r2, #7
   19ca4:	mov	r0, sp
   19ca8:	bl	19788 <__assert_fail@plt+0x83fc>
   19cac:	b	19cc4 <__assert_fail@plt+0x8938>
   19cb0:	ldr	r3, [sp]
   19cb4:	str	r3, [r9]
   19cb8:	orr	r4, r4, #2
   19cbc:	b	19a20 <__assert_fail@plt+0x8694>
   19cc0:	mov	r0, #0
   19cc4:	orr	r4, r4, r0
   19cc8:	ldr	r3, [r6]
   19ccc:	add	r2, r3, r7
   19cd0:	str	r2, [r6]
   19cd4:	ldrb	r3, [r3, r7]
   19cd8:	cmp	r3, #0
   19cdc:	orrne	r4, r4, #2
   19ce0:	b	19a18 <__assert_fail@plt+0x868c>
   19ce4:	mov	r4, #4
   19ce8:	b	19a20 <__assert_fail@plt+0x8694>
   19cec:	mov	r4, #4
   19cf0:	b	19a20 <__assert_fail@plt+0x8694>
   19cf4:	strd	r4, [sp, #-16]!
   19cf8:	str	r6, [sp, #8]
   19cfc:	str	lr, [sp, #12]
   19d00:	cmp	r1, #0
   19d04:	cmpne	r0, #0
   19d08:	beq	19d44 <__assert_fail@plt+0x89b8>
   19d0c:	mov	r2, r0
   19d10:	mov	r3, r1
   19d14:	umull	r4, r5, r0, r1
   19d18:	adds	r1, r5, #0
   19d1c:	movne	r1, #1
   19d20:	cmp	r4, #0
   19d24:	movlt	r1, #1
   19d28:	cmp	r1, #0
   19d2c:	beq	19d4c <__assert_fail@plt+0x89c0>
   19d30:	bl	1123c <__errno_location@plt>
   19d34:	mov	r3, #12
   19d38:	str	r3, [r0]
   19d3c:	mov	r0, #0
   19d40:	b	19d58 <__assert_fail@plt+0x89cc>
   19d44:	mov	r3, #1
   19d48:	mov	r2, r3
   19d4c:	mov	r1, r3
   19d50:	mov	r0, r2
   19d54:	bl	11038 <calloc@plt>
   19d58:	ldrd	r4, [sp]
   19d5c:	ldr	r6, [sp, #8]
   19d60:	add	sp, sp, #12
   19d64:	pop	{pc}		; (ldr pc, [sp], #4)
   19d68:	str	r4, [sp, #-8]!
   19d6c:	str	lr, [sp, #4]
   19d70:	cmp	r0, #0
   19d74:	beq	19d90 <__assert_fail@plt+0x8a04>
   19d78:	bge	19d94 <__assert_fail@plt+0x8a08>
   19d7c:	bl	1123c <__errno_location@plt>
   19d80:	mov	r3, #12
   19d84:	str	r3, [r0]
   19d88:	mov	r0, #0
   19d8c:	b	19d98 <__assert_fail@plt+0x8a0c>
   19d90:	mov	r0, #1
   19d94:	bl	111ac <malloc@plt>
   19d98:	ldr	r4, [sp]
   19d9c:	add	sp, sp, #4
   19da0:	pop	{pc}		; (ldr pc, [sp], #4)
   19da4:	str	r4, [sp, #-8]!
   19da8:	str	lr, [sp, #4]
   19dac:	cmp	r0, #0
   19db0:	beq	19dd4 <__assert_fail@plt+0x8a48>
   19db4:	cmp	r1, #0
   19db8:	beq	19de0 <__assert_fail@plt+0x8a54>
   19dbc:	cmp	r1, #0
   19dc0:	blt	19dec <__assert_fail@plt+0x8a60>
   19dc4:	bl	11110 <realloc@plt>
   19dc8:	ldr	r4, [sp]
   19dcc:	add	sp, sp, #4
   19dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   19dd4:	mov	r0, r1
   19dd8:	bl	19d68 <__assert_fail@plt+0x89dc>
   19ddc:	b	19dc8 <__assert_fail@plt+0x8a3c>
   19de0:	bl	12dbc <__assert_fail@plt+0x1a30>
   19de4:	mov	r0, #0
   19de8:	b	19dc8 <__assert_fail@plt+0x8a3c>
   19dec:	bl	1123c <__errno_location@plt>
   19df0:	mov	r3, #12
   19df4:	str	r3, [r0]
   19df8:	mov	r0, #0
   19dfc:	b	19dc8 <__assert_fail@plt+0x8a3c>
   19e00:	strd	r4, [sp, #-16]!
   19e04:	str	r6, [sp, #8]
   19e08:	str	lr, [sp, #12]
   19e0c:	mov	r5, r0
   19e10:	bl	1117c <__fpending@plt>
   19e14:	mov	r6, r0
   19e18:	ldr	r4, [r5]
   19e1c:	and	r4, r4, #32
   19e20:	mov	r0, r5
   19e24:	bl	19f98 <__assert_fail@plt+0x8c0c>
   19e28:	cmp	r4, #0
   19e2c:	bne	19e60 <__assert_fail@plt+0x8ad4>
   19e30:	cmp	r0, #0
   19e34:	beq	19e50 <__assert_fail@plt+0x8ac4>
   19e38:	cmp	r6, #0
   19e3c:	bne	19e7c <__assert_fail@plt+0x8af0>
   19e40:	bl	1123c <__errno_location@plt>
   19e44:	ldr	r0, [r0]
   19e48:	subs	r0, r0, #9
   19e4c:	mvnne	r0, #0
   19e50:	ldrd	r4, [sp]
   19e54:	ldr	r6, [sp, #8]
   19e58:	add	sp, sp, #12
   19e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e60:	cmp	r0, #0
   19e64:	bne	19e84 <__assert_fail@plt+0x8af8>
   19e68:	bl	1123c <__errno_location@plt>
   19e6c:	mov	r3, #0
   19e70:	str	r3, [r0]
   19e74:	mvn	r0, #0
   19e78:	b	19e50 <__assert_fail@plt+0x8ac4>
   19e7c:	mvn	r0, #0
   19e80:	b	19e50 <__assert_fail@plt+0x8ac4>
   19e84:	mvn	r0, #0
   19e88:	b	19e50 <__assert_fail@plt+0x8ac4>
   19e8c:	mov	r2, #0
   19e90:	mov	r3, #0
   19e94:	strd	r2, [r0, #16]
   19e98:	movw	r3, #62998	; 0xf616
   19e9c:	movt	r3, #149	; 0x95
   19ea0:	str	r3, [r0, #24]
   19ea4:	bx	lr
   19ea8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19eac:	strd	r6, [sp, #8]
   19eb0:	strd	r8, [sp, #16]
   19eb4:	str	sl, [sp, #24]
   19eb8:	str	lr, [sp, #28]
   19ebc:	movw	r3, #62998	; 0xf616
   19ec0:	movt	r3, #149	; 0x95
   19ec4:	ldr	r2, [r0, #24]
   19ec8:	cmp	r2, r3
   19ecc:	bne	19f28 <__assert_fail@plt+0x8b9c>
   19ed0:	ldrd	r6, [r0, #16]
   19ed4:	orrs	r3, r6, r7
   19ed8:	beq	19f74 <__assert_fail@plt+0x8be8>
   19edc:	ldrd	r4, [r1, #96]	; 0x60
   19ee0:	ldrd	r2, [r0]
   19ee4:	cmp	r5, r3
   19ee8:	cmpeq	r4, r2
   19eec:	beq	19f48 <__assert_fail@plt+0x8bbc>
   19ef0:	adds	r8, r6, #1
   19ef4:	adc	r9, r7, #0
   19ef8:	strd	r8, [r0, #16]
   19efc:	and	r2, r6, r8
   19f00:	and	r3, r7, r9
   19f04:	orrs	r3, r2, r3
   19f08:	movne	r0, #0
   19f0c:	beq	19f64 <__assert_fail@plt+0x8bd8>
   19f10:	ldrd	r4, [sp]
   19f14:	ldrd	r6, [sp, #8]
   19f18:	ldrd	r8, [sp, #16]
   19f1c:	ldr	sl, [sp, #24]
   19f20:	add	sp, sp, #28
   19f24:	pop	{pc}		; (ldr pc, [sp], #4)
   19f28:	movw	r3, #48928	; 0xbf20
   19f2c:	movt	r3, #1
   19f30:	mov	r2, #60	; 0x3c
   19f34:	movw	r1, #48940	; 0xbf2c
   19f38:	movt	r1, #1
   19f3c:	movw	r0, #48960	; 0xbf40
   19f40:	movt	r0, #1
   19f44:	bl	1138c <__assert_fail@plt>
   19f48:	ldrd	r4, [r1]
   19f4c:	ldrd	r2, [r0, #8]
   19f50:	cmp	r5, r3
   19f54:	cmpeq	r4, r2
   19f58:	moveq	r0, #1
   19f5c:	bne	19ef0 <__assert_fail@plt+0x8b64>
   19f60:	b	19f10 <__assert_fail@plt+0x8b84>
   19f64:	orrs	r3, r8, r9
   19f68:	moveq	r0, #1
   19f6c:	beq	19f10 <__assert_fail@plt+0x8b84>
   19f70:	b	19f80 <__assert_fail@plt+0x8bf4>
   19f74:	mov	r2, #1
   19f78:	mov	r3, #0
   19f7c:	strd	r2, [r0, #16]
   19f80:	ldrd	r2, [r1]
   19f84:	strd	r2, [r0, #8]
   19f88:	ldrd	r2, [r1, #96]	; 0x60
   19f8c:	strd	r2, [r0]
   19f90:	mov	r0, #0
   19f94:	b	19f10 <__assert_fail@plt+0x8b84>
   19f98:	strd	r4, [sp, #-16]!
   19f9c:	str	r6, [sp, #8]
   19fa0:	str	lr, [sp, #12]
   19fa4:	sub	sp, sp, #8
   19fa8:	mov	r4, r0
   19fac:	bl	1126c <fileno@plt>
   19fb0:	cmp	r0, #0
   19fb4:	blt	1a02c <__assert_fail@plt+0x8ca0>
   19fb8:	mov	r0, r4
   19fbc:	bl	111c4 <__freading@plt>
   19fc0:	cmp	r0, #0
   19fc4:	beq	19ff8 <__assert_fail@plt+0x8c6c>
   19fc8:	mov	r0, r4
   19fcc:	bl	1126c <fileno@plt>
   19fd0:	mov	r3, #1
   19fd4:	str	r3, [sp]
   19fd8:	mov	r2, #0
   19fdc:	mov	r3, #0
   19fe0:	bl	11158 <lseek64@plt>
   19fe4:	mvn	r2, #0
   19fe8:	mvn	r3, #0
   19fec:	cmp	r1, r3
   19ff0:	cmpeq	r0, r2
   19ff4:	beq	1a038 <__assert_fail@plt+0x8cac>
   19ff8:	mov	r0, r4
   19ffc:	bl	1a2fc <__assert_fail@plt+0x8f70>
   1a000:	cmp	r0, #0
   1a004:	beq	1a038 <__assert_fail@plt+0x8cac>
   1a008:	bl	1123c <__errno_location@plt>
   1a00c:	mov	r5, r0
   1a010:	ldr	r6, [r0]
   1a014:	mov	r0, r4
   1a018:	bl	11284 <fclose@plt>
   1a01c:	cmp	r6, #0
   1a020:	strne	r6, [r5]
   1a024:	mvnne	r0, #0
   1a028:	b	1a040 <__assert_fail@plt+0x8cb4>
   1a02c:	mov	r0, r4
   1a030:	bl	11284 <fclose@plt>
   1a034:	b	1a040 <__assert_fail@plt+0x8cb4>
   1a038:	mov	r0, r4
   1a03c:	bl	11284 <fclose@plt>
   1a040:	add	sp, sp, #8
   1a044:	ldrd	r4, [sp]
   1a048:	ldr	r6, [sp, #8]
   1a04c:	add	sp, sp, #12
   1a050:	pop	{pc}		; (ldr pc, [sp], #4)
   1a054:	push	{r1, r2, r3}
   1a058:	strd	r4, [sp, #-16]!
   1a05c:	str	r6, [sp, #8]
   1a060:	str	lr, [sp, #12]
   1a064:	sub	sp, sp, #12
   1a068:	mov	r5, r0
   1a06c:	ldr	r1, [sp, #28]
   1a070:	add	r3, sp, #32
   1a074:	str	r3, [sp, #4]
   1a078:	cmp	r1, #0
   1a07c:	beq	1a0c4 <__assert_fail@plt+0x8d38>
   1a080:	movw	r3, #1030	; 0x406
   1a084:	cmp	r1, r3
   1a088:	beq	1a100 <__assert_fail@plt+0x8d74>
   1a08c:	cmp	r1, #11
   1a090:	beq	1a2b0 <__assert_fail@plt+0x8f24>
   1a094:	bgt	1a23c <__assert_fail@plt+0x8eb0>
   1a098:	cmp	r1, #3
   1a09c:	beq	1a2b0 <__assert_fail@plt+0x8f24>
   1a0a0:	ble	1a1fc <__assert_fail@plt+0x8e70>
   1a0a4:	cmp	r1, #8
   1a0a8:	beq	1a21c <__assert_fail@plt+0x8e90>
   1a0ac:	ble	1a214 <__assert_fail@plt+0x8e88>
   1a0b0:	cmp	r1, #9
   1a0b4:	beq	1a2b0 <__assert_fail@plt+0x8f24>
   1a0b8:	cmp	r1, #10
   1a0bc:	bne	1a274 <__assert_fail@plt+0x8ee8>
   1a0c0:	b	1a21c <__assert_fail@plt+0x8e90>
   1a0c4:	ldr	r3, [sp, #4]
   1a0c8:	add	r2, r3, #4
   1a0cc:	str	r2, [sp, #4]
   1a0d0:	ldr	r2, [r3]
   1a0d4:	mov	r1, #0
   1a0d8:	bl	1129c <fcntl64@plt>
   1a0dc:	mov	r4, r0
   1a0e0:	mov	r0, r4
   1a0e4:	add	sp, sp, #12
   1a0e8:	ldrd	r4, [sp]
   1a0ec:	ldr	r6, [sp, #8]
   1a0f0:	ldr	lr, [sp, #12]
   1a0f4:	add	sp, sp, #16
   1a0f8:	add	sp, sp, #12
   1a0fc:	bx	lr
   1a100:	ldr	r3, [sp, #4]
   1a104:	add	r2, r3, #4
   1a108:	str	r2, [sp, #4]
   1a10c:	ldr	r6, [r3]
   1a110:	movw	r3, #54012	; 0xd2fc
   1a114:	movt	r3, #2
   1a118:	ldr	r3, [r3]
   1a11c:	cmp	r3, #0
   1a120:	blt	1a188 <__assert_fail@plt+0x8dfc>
   1a124:	mov	r2, r6
   1a128:	movw	r1, #1030	; 0x406
   1a12c:	bl	1129c <fcntl64@plt>
   1a130:	subs	r4, r0, #0
   1a134:	blt	1a14c <__assert_fail@plt+0x8dc0>
   1a138:	movw	r3, #54012	; 0xd2fc
   1a13c:	movt	r3, #2
   1a140:	mov	r2, #1
   1a144:	str	r2, [r3]
   1a148:	b	1a0e0 <__assert_fail@plt+0x8d54>
   1a14c:	bl	1123c <__errno_location@plt>
   1a150:	ldr	r3, [r0]
   1a154:	cmp	r3, #22
   1a158:	bne	1a138 <__assert_fail@plt+0x8dac>
   1a15c:	mov	r2, r6
   1a160:	mov	r1, #0
   1a164:	mov	r0, r5
   1a168:	bl	1129c <fcntl64@plt>
   1a16c:	subs	r4, r0, #0
   1a170:	blt	1a0e0 <__assert_fail@plt+0x8d54>
   1a174:	movw	r3, #54012	; 0xd2fc
   1a178:	movt	r3, #2
   1a17c:	mvn	r2, #0
   1a180:	str	r2, [r3]
   1a184:	b	1a1b0 <__assert_fail@plt+0x8e24>
   1a188:	mov	r2, r6
   1a18c:	mov	r1, #0
   1a190:	bl	1129c <fcntl64@plt>
   1a194:	subs	r4, r0, #0
   1a198:	blt	1a0e0 <__assert_fail@plt+0x8d54>
   1a19c:	movw	r3, #54012	; 0xd2fc
   1a1a0:	movt	r3, #2
   1a1a4:	ldr	r3, [r3]
   1a1a8:	cmn	r3, #1
   1a1ac:	bne	1a0e0 <__assert_fail@plt+0x8d54>
   1a1b0:	mov	r1, #1
   1a1b4:	mov	r0, r4
   1a1b8:	bl	1129c <fcntl64@plt>
   1a1bc:	subs	r2, r0, #0
   1a1c0:	blt	1a1dc <__assert_fail@plt+0x8e50>
   1a1c4:	orr	r2, r2, #1
   1a1c8:	mov	r1, #2
   1a1cc:	mov	r0, r4
   1a1d0:	bl	1129c <fcntl64@plt>
   1a1d4:	cmn	r0, #1
   1a1d8:	bne	1a0e0 <__assert_fail@plt+0x8d54>
   1a1dc:	bl	1123c <__errno_location@plt>
   1a1e0:	mov	r5, r0
   1a1e4:	ldr	r6, [r0]
   1a1e8:	mov	r0, r4
   1a1ec:	bl	11350 <close@plt>
   1a1f0:	str	r6, [r5]
   1a1f4:	mvn	r4, #0
   1a1f8:	b	1a0e0 <__assert_fail@plt+0x8d54>
   1a1fc:	cmp	r1, #1
   1a200:	beq	1a2b0 <__assert_fail@plt+0x8f24>
   1a204:	bgt	1a21c <__assert_fail@plt+0x8e90>
   1a208:	cmp	r1, #0
   1a20c:	bne	1a274 <__assert_fail@plt+0x8ee8>
   1a210:	b	1a21c <__assert_fail@plt+0x8e90>
   1a214:	cmp	r1, #4
   1a218:	bne	1a274 <__assert_fail@plt+0x8ee8>
   1a21c:	ldr	r3, [sp, #4]
   1a220:	add	r2, r3, #4
   1a224:	str	r2, [sp, #4]
   1a228:	ldr	r2, [r3]
   1a22c:	mov	r0, r5
   1a230:	bl	1129c <fcntl64@plt>
   1a234:	mov	r4, r0
   1a238:	b	1a0e0 <__assert_fail@plt+0x8d54>
   1a23c:	movw	r3, #1031	; 0x407
   1a240:	cmp	r1, r3
   1a244:	bgt	1a294 <__assert_fail@plt+0x8f08>
   1a248:	movw	r3, #1030	; 0x406
   1a24c:	cmp	r1, r3
   1a250:	bge	1a21c <__assert_fail@plt+0x8e90>
   1a254:	movw	r3, #1025	; 0x401
   1a258:	cmp	r1, r3
   1a25c:	beq	1a2b0 <__assert_fail@plt+0x8f24>
   1a260:	movw	r3, #1026	; 0x402
   1a264:	cmp	r1, r3
   1a268:	beq	1a21c <__assert_fail@plt+0x8e90>
   1a26c:	cmp	r1, #1024	; 0x400
   1a270:	beq	1a21c <__assert_fail@plt+0x8e90>
   1a274:	ldr	r3, [sp, #4]
   1a278:	add	r2, r3, #4
   1a27c:	str	r2, [sp, #4]
   1a280:	ldr	r2, [r3]
   1a284:	mov	r0, r5
   1a288:	bl	1129c <fcntl64@plt>
   1a28c:	mov	r4, r0
   1a290:	b	1a0e0 <__assert_fail@plt+0x8d54>
   1a294:	movw	r3, #1033	; 0x409
   1a298:	cmp	r1, r3
   1a29c:	beq	1a21c <__assert_fail@plt+0x8e90>
   1a2a0:	blt	1a2b0 <__assert_fail@plt+0x8f24>
   1a2a4:	movw	r3, #1034	; 0x40a
   1a2a8:	cmp	r1, r3
   1a2ac:	bne	1a274 <__assert_fail@plt+0x8ee8>
   1a2b0:	mov	r0, r5
   1a2b4:	bl	1129c <fcntl64@plt>
   1a2b8:	mov	r4, r0
   1a2bc:	b	1a0e0 <__assert_fail@plt+0x8d54>
   1a2c0:	push	{r1, r2, r3}
   1a2c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a2c8:	sub	sp, sp, #8
   1a2cc:	ldr	r1, [sp, #12]
   1a2d0:	tst	r1, #64	; 0x40
   1a2d4:	addne	r3, sp, #20
   1a2d8:	strne	r3, [sp, #4]
   1a2dc:	ldrne	r2, [sp, #16]
   1a2e0:	moveq	r2, #0
   1a2e4:	bl	111a0 <open64@plt>
   1a2e8:	bl	18828 <__assert_fail@plt+0x749c>
   1a2ec:	add	sp, sp, #8
   1a2f0:	pop	{lr}		; (ldr lr, [sp], #4)
   1a2f4:	add	sp, sp, #12
   1a2f8:	bx	lr
   1a2fc:	str	r4, [sp, #-8]!
   1a300:	str	lr, [sp, #4]
   1a304:	sub	sp, sp, #8
   1a308:	subs	r4, r0, #0
   1a30c:	beq	1a320 <__assert_fail@plt+0x8f94>
   1a310:	mov	r0, r4
   1a314:	bl	111c4 <__freading@plt>
   1a318:	cmp	r0, #0
   1a31c:	bne	1a338 <__assert_fail@plt+0x8fac>
   1a320:	mov	r0, r4
   1a324:	bl	1108c <fflush@plt>
   1a328:	add	sp, sp, #8
   1a32c:	ldr	r4, [sp]
   1a330:	add	sp, sp, #4
   1a334:	pop	{pc}		; (ldr pc, [sp], #4)
   1a338:	ldr	r3, [r4]
   1a33c:	tst	r3, #256	; 0x100
   1a340:	bne	1a350 <__assert_fail@plt+0x8fc4>
   1a344:	mov	r0, r4
   1a348:	bl	1108c <fflush@plt>
   1a34c:	b	1a328 <__assert_fail@plt+0x8f9c>
   1a350:	mov	r3, #1
   1a354:	str	r3, [sp]
   1a358:	mov	r2, #0
   1a35c:	mov	r3, #0
   1a360:	mov	r0, r4
   1a364:	bl	1a36c <__assert_fail@plt+0x8fe0>
   1a368:	b	1a344 <__assert_fail@plt+0x8fb8>
   1a36c:	str	r4, [sp, #-16]!
   1a370:	strd	r6, [sp, #4]
   1a374:	str	lr, [sp, #12]
   1a378:	sub	sp, sp, #8
   1a37c:	mov	r4, r0
   1a380:	mov	r6, r2
   1a384:	mov	r7, r3
   1a388:	ldr	r2, [r0, #8]
   1a38c:	ldr	r3, [r0, #4]
   1a390:	cmp	r2, r3
   1a394:	beq	1a3c4 <__assert_fail@plt+0x9038>
   1a398:	ldr	r3, [sp, #24]
   1a39c:	str	r3, [sp]
   1a3a0:	mov	r2, r6
   1a3a4:	mov	r3, r7
   1a3a8:	mov	r0, r4
   1a3ac:	bl	11290 <fseeko64@plt>
   1a3b0:	add	sp, sp, #8
   1a3b4:	ldr	r4, [sp]
   1a3b8:	ldrd	r6, [sp, #4]
   1a3bc:	add	sp, sp, #12
   1a3c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3c4:	ldr	r2, [r0, #20]
   1a3c8:	ldr	r3, [r0, #16]
   1a3cc:	cmp	r2, r3
   1a3d0:	bne	1a398 <__assert_fail@plt+0x900c>
   1a3d4:	ldr	r3, [r0, #36]	; 0x24
   1a3d8:	cmp	r3, #0
   1a3dc:	bne	1a398 <__assert_fail@plt+0x900c>
   1a3e0:	bl	1126c <fileno@plt>
   1a3e4:	ldr	r3, [sp, #24]
   1a3e8:	str	r3, [sp]
   1a3ec:	mov	r2, r6
   1a3f0:	mov	r3, r7
   1a3f4:	bl	11158 <lseek64@plt>
   1a3f8:	mvn	r2, #0
   1a3fc:	mvn	r3, #0
   1a400:	cmp	r1, r3
   1a404:	cmpeq	r0, r2
   1a408:	beq	1a424 <__assert_fail@plt+0x9098>
   1a40c:	ldr	r3, [r4]
   1a410:	bic	r3, r3, #16
   1a414:	str	r3, [r4]
   1a418:	strd	r0, [r4, #80]	; 0x50
   1a41c:	mov	r0, #0
   1a420:	b	1a3b0 <__assert_fail@plt+0x9024>
   1a424:	mvn	r0, #0
   1a428:	b	1a3b0 <__assert_fail@plt+0x9024>
   1a42c:	str	r4, [sp, #-8]!
   1a430:	str	lr, [sp, #4]
   1a434:	mov	r0, #14
   1a438:	bl	112cc <nl_langinfo@plt>
   1a43c:	cmp	r0, #0
   1a440:	beq	1a464 <__assert_fail@plt+0x90d8>
   1a444:	ldrb	r2, [r0]
   1a448:	movw	r3, #48984	; 0xbf58
   1a44c:	movt	r3, #1
   1a450:	cmp	r2, #0
   1a454:	moveq	r0, r3
   1a458:	ldr	r4, [sp]
   1a45c:	add	sp, sp, #4
   1a460:	pop	{pc}		; (ldr pc, [sp], #4)
   1a464:	movw	r0, #48984	; 0xbf58
   1a468:	movt	r0, #1
   1a46c:	b	1a458 <__assert_fail@plt+0x90cc>
   1a470:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a474:	strd	r6, [sp, #8]
   1a478:	str	lr, [sp, #16]
   1a47c:	sub	sp, sp, #12
   1a480:	mov	r7, r1
   1a484:	mov	r5, r2
   1a488:	subs	r6, r0, #0
   1a48c:	addeq	r6, sp, #4
   1a490:	mov	r0, r6
   1a494:	bl	11188 <mbrtowc@plt>
   1a498:	mov	r4, r0
   1a49c:	cmp	r5, #0
   1a4a0:	cmnne	r0, #3
   1a4a4:	bhi	1a4c0 <__assert_fail@plt+0x9134>
   1a4a8:	mov	r0, r4
   1a4ac:	add	sp, sp, #12
   1a4b0:	ldrd	r4, [sp]
   1a4b4:	ldrd	r6, [sp, #8]
   1a4b8:	add	sp, sp, #16
   1a4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4c0:	mov	r0, #0
   1a4c4:	bl	1a53c <__assert_fail@plt+0x91b0>
   1a4c8:	cmp	r0, #0
   1a4cc:	bne	1a4a8 <__assert_fail@plt+0x911c>
   1a4d0:	ldrb	r3, [r7]
   1a4d4:	str	r3, [r6]
   1a4d8:	mov	r4, #1
   1a4dc:	b	1a4a8 <__assert_fail@plt+0x911c>
   1a4e0:	str	r4, [sp, #-8]!
   1a4e4:	str	lr, [sp, #4]
   1a4e8:	umull	r2, r3, r1, r2
   1a4ec:	cmp	r3, #0
   1a4f0:	bne	1a508 <__assert_fail@plt+0x917c>
   1a4f4:	mov	r1, r2
   1a4f8:	bl	19da4 <__assert_fail@plt+0x8a18>
   1a4fc:	ldr	r4, [sp]
   1a500:	add	sp, sp, #4
   1a504:	pop	{pc}		; (ldr pc, [sp], #4)
   1a508:	bl	1123c <__errno_location@plt>
   1a50c:	mov	r3, #12
   1a510:	str	r3, [r0]
   1a514:	mov	r0, #0
   1a518:	b	1a4fc <__assert_fail@plt+0x9170>
   1a51c:	str	r4, [sp, #-8]!
   1a520:	str	lr, [sp, #4]
   1a524:	mov	r2, #3
   1a528:	mov	r1, #0
   1a52c:	bl	1a054 <__assert_fail@plt+0x8cc8>
   1a530:	ldr	r4, [sp]
   1a534:	add	sp, sp, #4
   1a538:	pop	{pc}		; (ldr pc, [sp], #4)
   1a53c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a540:	sub	sp, sp, #268	; 0x10c
   1a544:	movw	r2, #257	; 0x101
   1a548:	add	r1, sp, #4
   1a54c:	bl	1a598 <__assert_fail@plt+0x920c>
   1a550:	cmp	r0, #0
   1a554:	movne	r0, #0
   1a558:	bne	1a590 <__assert_fail@plt+0x9204>
   1a55c:	movw	r1, #48992	; 0xbf60
   1a560:	movt	r1, #1
   1a564:	add	r0, sp, #4
   1a568:	bl	11074 <strcmp@plt>
   1a56c:	cmp	r0, #0
   1a570:	beq	1a58c <__assert_fail@plt+0x9200>
   1a574:	movw	r1, #48996	; 0xbf64
   1a578:	movt	r1, #1
   1a57c:	add	r0, sp, #4
   1a580:	bl	11074 <strcmp@plt>
   1a584:	adds	r0, r0, #0
   1a588:	movne	r0, #1
   1a58c:	and	r0, r0, #1
   1a590:	add	sp, sp, #268	; 0x10c
   1a594:	pop	{pc}		; (ldr pc, [sp], #4)
   1a598:	strd	r4, [sp, #-16]!
   1a59c:	str	r6, [sp, #8]
   1a5a0:	str	lr, [sp, #12]
   1a5a4:	mov	r6, r1
   1a5a8:	mov	r4, r2
   1a5ac:	mov	r1, #0
   1a5b0:	bl	112a8 <setlocale@plt>
   1a5b4:	subs	r5, r0, #0
   1a5b8:	beq	1a5fc <__assert_fail@plt+0x9270>
   1a5bc:	mov	r0, r5
   1a5c0:	bl	1120c <strlen@plt>
   1a5c4:	cmp	r4, r0
   1a5c8:	bhi	1a618 <__assert_fail@plt+0x928c>
   1a5cc:	cmp	r4, #0
   1a5d0:	moveq	r0, #34	; 0x22
   1a5d4:	beq	1a62c <__assert_fail@plt+0x92a0>
   1a5d8:	sub	r4, r4, #1
   1a5dc:	mov	r2, r4
   1a5e0:	mov	r1, r5
   1a5e4:	mov	r0, r6
   1a5e8:	bl	110c8 <memcpy@plt>
   1a5ec:	mov	r3, #0
   1a5f0:	strb	r3, [r6, r4]
   1a5f4:	mov	r0, #34	; 0x22
   1a5f8:	b	1a62c <__assert_fail@plt+0x92a0>
   1a5fc:	cmp	r4, #0
   1a600:	moveq	r0, #22
   1a604:	beq	1a62c <__assert_fail@plt+0x92a0>
   1a608:	mov	r3, #0
   1a60c:	strb	r3, [r6]
   1a610:	mov	r0, #22
   1a614:	b	1a62c <__assert_fail@plt+0x92a0>
   1a618:	add	r2, r0, #1
   1a61c:	mov	r1, r5
   1a620:	mov	r0, r6
   1a624:	bl	110c8 <memcpy@plt>
   1a628:	mov	r0, #0
   1a62c:	ldrd	r4, [sp]
   1a630:	ldr	r6, [sp, #8]
   1a634:	add	sp, sp, #12
   1a638:	pop	{pc}		; (ldr pc, [sp], #4)
   1a63c:	str	r4, [sp, #-8]!
   1a640:	str	lr, [sp, #4]
   1a644:	mov	r1, #0
   1a648:	bl	112a8 <setlocale@plt>
   1a64c:	ldr	r4, [sp]
   1a650:	add	sp, sp, #4
   1a654:	pop	{pc}		; (ldr pc, [sp], #4)
   1a658:	cmp	r3, #0
   1a65c:	cmpeq	r2, #0
   1a660:	bne	1a678 <__assert_fail@plt+0x92ec>
   1a664:	cmp	r1, #0
   1a668:	cmpeq	r0, #0
   1a66c:	mvnne	r1, #0
   1a670:	mvnne	r0, #0
   1a674:	b	1a694 <__assert_fail@plt+0x9308>
   1a678:	sub	sp, sp, #8
   1a67c:	push	{sp, lr}
   1a680:	bl	1a6a4 <__assert_fail@plt+0x9318>
   1a684:	ldr	lr, [sp, #4]
   1a688:	add	sp, sp, #8
   1a68c:	pop	{r2, r3}
   1a690:	bx	lr
   1a694:	push	{r1, lr}
   1a698:	mov	r0, #8
   1a69c:	bl	1105c <raise@plt>
   1a6a0:	pop	{r1, pc}
   1a6a4:	cmp	r1, r3
   1a6a8:	cmpeq	r0, r2
   1a6ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6b0:	mov	r4, r0
   1a6b4:	movcc	r0, #0
   1a6b8:	mov	r5, r1
   1a6bc:	ldr	lr, [sp, #36]	; 0x24
   1a6c0:	movcc	r1, r0
   1a6c4:	bcc	1a7c0 <__assert_fail@plt+0x9434>
   1a6c8:	cmp	r3, #0
   1a6cc:	clzeq	ip, r2
   1a6d0:	clzne	ip, r3
   1a6d4:	addeq	ip, ip, #32
   1a6d8:	cmp	r5, #0
   1a6dc:	clzeq	r1, r4
   1a6e0:	addeq	r1, r1, #32
   1a6e4:	clzne	r1, r5
   1a6e8:	sub	ip, ip, r1
   1a6ec:	sub	sl, ip, #32
   1a6f0:	lsl	r9, r3, ip
   1a6f4:	rsb	fp, ip, #32
   1a6f8:	orr	r9, r9, r2, lsl sl
   1a6fc:	orr	r9, r9, r2, lsr fp
   1a700:	lsl	r8, r2, ip
   1a704:	cmp	r5, r9
   1a708:	cmpeq	r4, r8
   1a70c:	movcc	r0, #0
   1a710:	movcc	r1, r0
   1a714:	bcc	1a730 <__assert_fail@plt+0x93a4>
   1a718:	mov	r0, #1
   1a71c:	subs	r4, r4, r8
   1a720:	lsl	r1, r0, sl
   1a724:	orr	r1, r1, r0, lsr fp
   1a728:	lsl	r0, r0, ip
   1a72c:	sbc	r5, r5, r9
   1a730:	cmp	ip, #0
   1a734:	beq	1a7c0 <__assert_fail@plt+0x9434>
   1a738:	lsr	r6, r8, #1
   1a73c:	orr	r6, r6, r9, lsl #31
   1a740:	lsr	r7, r9, #1
   1a744:	mov	r2, ip
   1a748:	b	1a76c <__assert_fail@plt+0x93e0>
   1a74c:	subs	r3, r4, r6
   1a750:	sbc	r8, r5, r7
   1a754:	adds	r3, r3, r3
   1a758:	adc	r8, r8, r8
   1a75c:	adds	r4, r3, #1
   1a760:	adc	r5, r8, #0
   1a764:	subs	r2, r2, #1
   1a768:	beq	1a788 <__assert_fail@plt+0x93fc>
   1a76c:	cmp	r5, r7
   1a770:	cmpeq	r4, r6
   1a774:	bcs	1a74c <__assert_fail@plt+0x93c0>
   1a778:	adds	r4, r4, r4
   1a77c:	adc	r5, r5, r5
   1a780:	subs	r2, r2, #1
   1a784:	bne	1a76c <__assert_fail@plt+0x93e0>
   1a788:	lsr	r3, r4, ip
   1a78c:	orr	r3, r3, r5, lsl fp
   1a790:	lsr	r2, r5, ip
   1a794:	orr	r3, r3, r5, lsr sl
   1a798:	adds	r0, r0, r4
   1a79c:	mov	r4, r3
   1a7a0:	lsl	r3, r2, ip
   1a7a4:	orr	r3, r3, r4, lsl sl
   1a7a8:	lsl	ip, r4, ip
   1a7ac:	orr	r3, r3, r4, lsr fp
   1a7b0:	adc	r1, r1, r5
   1a7b4:	subs	r0, r0, ip
   1a7b8:	mov	r5, r2
   1a7bc:	sbc	r1, r1, r3
   1a7c0:	cmp	lr, #0
   1a7c4:	strdne	r4, [lr]
   1a7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7d0:	mov	r7, r0
   1a7d4:	ldr	r6, [pc, #72]	; 1a824 <__assert_fail@plt+0x9498>
   1a7d8:	ldr	r5, [pc, #72]	; 1a828 <__assert_fail@plt+0x949c>
   1a7dc:	add	r6, pc, r6
   1a7e0:	add	r5, pc, r5
   1a7e4:	sub	r6, r6, r5
   1a7e8:	mov	r8, r1
   1a7ec:	mov	r9, r2
   1a7f0:	bl	1100c <fstatfs64@plt-0x20>
   1a7f4:	asrs	r6, r6, #2
   1a7f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7fc:	mov	r4, #0
   1a800:	add	r4, r4, #1
   1a804:	ldr	r3, [r5], #4
   1a808:	mov	r2, r9
   1a80c:	mov	r1, r8
   1a810:	mov	r0, r7
   1a814:	blx	r3
   1a818:	cmp	r6, r4
   1a81c:	bne	1a800 <__assert_fail@plt+0x9474>
   1a820:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a824:	andeq	r2, r1, r0, lsr r7
   1a828:	andeq	r2, r1, r8, lsr #14
   1a82c:	bx	lr
   1a830:	ldr	r3, [pc, #12]	; 1a844 <__assert_fail@plt+0x94b8>
   1a834:	mov	r1, #0
   1a838:	add	r3, pc, r3
   1a83c:	ldr	r2, [r3]
   1a840:	b	11248 <__cxa_atexit@plt>
   1a844:	strdeq	r2, [r1], -r8

Disassembly of section .fini:

0001a848 <.fini>:
   1a848:	push	{r3, lr}
   1a84c:	pop	{r3, pc}
