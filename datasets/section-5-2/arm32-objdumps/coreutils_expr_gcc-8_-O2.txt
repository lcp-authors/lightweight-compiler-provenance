
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00010f00 <.init>:
   10f00:	push	{r3, lr}
   10f04:	bl	11470 <__assert_fail@plt+0x244>
   10f08:	pop	{r3, pc}

Disassembly of section .plt:

00010f0c <pthread_mutex_unlock@plt-0x14>:
   10f0c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f10:	ldr	lr, [pc, #4]	; 10f1c <pthread_mutex_unlock@plt-0x4>
   10f14:	add	lr, pc, lr
   10f18:	ldr	pc, [lr, #8]!
   10f1c:	andeq	pc, r2, r4, ror #1

00010f20 <pthread_mutex_unlock@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #192512	; 0x2f000
   10f28:	ldr	pc, [ip, #228]!	; 0xe4

00010f2c <calloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #192512	; 0x2f000
   10f34:	ldr	pc, [ip, #220]!	; 0xdc

00010f38 <fputs_unlocked@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #192512	; 0x2f000
   10f40:	ldr	pc, [ip, #212]!	; 0xd4

00010f44 <wctype@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #192512	; 0x2f000
   10f4c:	ldr	pc, [ip, #204]!	; 0xcc

00010f50 <wcrtomb@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #192512	; 0x2f000
   10f58:	ldr	pc, [ip, #196]!	; 0xc4

00010f5c <iswctype@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #192512	; 0x2f000
   10f64:	ldr	pc, [ip, #188]!	; 0xbc

00010f68 <strcmp@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #192512	; 0x2f000
   10f70:	ldr	pc, [ip, #180]!	; 0xb4

00010f74 <strcspn@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #192512	; 0x2f000
   10f7c:	ldr	pc, [ip, #172]!	; 0xac

00010f80 <pthread_mutex_destroy@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #192512	; 0x2f000
   10f88:	ldr	pc, [ip, #164]!	; 0xa4

00010f8c <fflush@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #192512	; 0x2f000
   10f94:	ldr	pc, [ip, #156]!	; 0x9c

00010f98 <wcwidth@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #192512	; 0x2f000
   10fa0:	ldr	pc, [ip, #148]!	; 0x94

00010fa4 <memmove@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #192512	; 0x2f000
   10fac:	ldr	pc, [ip, #140]!	; 0x8c

00010fb0 <free@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #192512	; 0x2f000
   10fb8:	ldr	pc, [ip, #132]!	; 0x84

00010fbc <pthread_mutex_lock@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #192512	; 0x2f000
   10fc4:	ldr	pc, [ip, #124]!	; 0x7c

00010fc8 <_exit@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #192512	; 0x2f000
   10fd0:	ldr	pc, [ip, #116]!	; 0x74

00010fd4 <memcpy@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #192512	; 0x2f000
   10fdc:	ldr	pc, [ip, #108]!	; 0x6c

00010fe0 <pthread_mutex_init@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #192512	; 0x2f000
   10fe8:	ldr	pc, [ip, #100]!	; 0x64

00010fec <towlower@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #192512	; 0x2f000
   10ff4:	ldr	pc, [ip, #92]!	; 0x5c

00010ff8 <mbsinit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #192512	; 0x2f000
   11000:	ldr	pc, [ip, #84]!	; 0x54

00011004 <memcmp@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #192512	; 0x2f000
   1100c:	ldr	pc, [ip, #76]!	; 0x4c

00011010 <fputc_unlocked@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #192512	; 0x2f000
   11018:	ldr	pc, [ip, #68]!	; 0x44

0001101c <dcgettext@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #192512	; 0x2f000
   11024:	ldr	pc, [ip, #60]!	; 0x3c

00011028 <realloc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #192512	; 0x2f000
   11030:	ldr	pc, [ip, #52]!	; 0x34

00011034 <textdomain@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #192512	; 0x2f000
   1103c:	ldr	pc, [ip, #44]!	; 0x2c

00011040 <iswcntrl@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #192512	; 0x2f000
   11048:	ldr	pc, [ip, #36]!	; 0x24

0001104c <iswprint@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #192512	; 0x2f000
   11054:	ldr	pc, [ip, #28]!

00011058 <fwrite@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #192512	; 0x2f000
   11060:	ldr	pc, [ip, #20]!

00011064 <lseek64@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #192512	; 0x2f000
   1106c:	ldr	pc, [ip, #12]!

00011070 <__ctype_get_mb_cur_max@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #192512	; 0x2f000
   11078:	ldr	pc, [ip, #4]!

0001107c <__fpending@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #188416	; 0x2e000
   11084:	ldr	pc, [ip, #4092]!	; 0xffc

00011088 <mbrtowc@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #188416	; 0x2e000
   11090:	ldr	pc, [ip, #4084]!	; 0xff4

00011094 <error@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #188416	; 0x2e000
   1109c:	ldr	pc, [ip, #4076]!	; 0xfec

000110a0 <strcoll@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #188416	; 0x2e000
   110a8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110ac <puts@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #188416	; 0x2e000
   110b4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110b8 <malloc@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #188416	; 0x2e000
   110c0:	ldr	pc, [ip, #4052]!	; 0xfd4

000110c4 <__libc_start_main@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #188416	; 0x2e000
   110cc:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d0 <__freading@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #188416	; 0x2e000
   110d8:	ldr	pc, [ip, #4036]!	; 0xfc4

000110dc <__ctype_tolower_loc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #188416	; 0x2e000
   110e4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110e8 <__ctype_toupper_loc@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #188416	; 0x2e000
   110f0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110f4 <__gmon_start__@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #188416	; 0x2e000
   110fc:	ldr	pc, [ip, #4012]!	; 0xfac

00011100 <mempcpy@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #188416	; 0x2e000
   11108:	ldr	pc, [ip, #4004]!	; 0xfa4

0001110c <getopt_long@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #188416	; 0x2e000
   11114:	ldr	pc, [ip, #3996]!	; 0xf9c

00011118 <__ctype_b_loc@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #188416	; 0x2e000
   11120:	ldr	pc, [ip, #3988]!	; 0xf94

00011124 <exit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #188416	; 0x2e000
   1112c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011130 <strlen@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #188416	; 0x2e000
   11138:	ldr	pc, [ip, #3972]!	; 0xf84

0001113c <strchr@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #188416	; 0x2e000
   11144:	ldr	pc, [ip, #3964]!	; 0xf7c

00011148 <__errno_location@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #188416	; 0x2e000
   11150:	ldr	pc, [ip, #3956]!	; 0xf74

00011154 <iswalnum@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #188416	; 0x2e000
   1115c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011160 <__cxa_atexit@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #188416	; 0x2e000
   11168:	ldr	pc, [ip, #3940]!	; 0xf64

0001116c <memset@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #188416	; 0x2e000
   11174:	ldr	pc, [ip, #3932]!	; 0xf5c

00011178 <btowc@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #188416	; 0x2e000
   11180:	ldr	pc, [ip, #3924]!	; 0xf54

00011184 <__printf_chk@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #188416	; 0x2e000
   1118c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011190 <fileno@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #188416	; 0x2e000
   11198:	ldr	pc, [ip, #3908]!	; 0xf44

0001119c <__fprintf_chk@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #188416	; 0x2e000
   111a4:	ldr	pc, [ip, #3900]!	; 0xf3c

000111a8 <memchr@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #188416	; 0x2e000
   111b0:	ldr	pc, [ip, #3892]!	; 0xf34

000111b4 <fclose@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #188416	; 0x2e000
   111bc:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c0 <fseeko64@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #188416	; 0x2e000
   111c8:	ldr	pc, [ip, #3876]!	; 0xf24

000111cc <__overflow@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #188416	; 0x2e000
   111d4:	ldr	pc, [ip, #3868]!	; 0xf1c

000111d8 <setlocale@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #188416	; 0x2e000
   111e0:	ldr	pc, [ip, #3860]!	; 0xf14

000111e4 <strrchr@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #188416	; 0x2e000
   111ec:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f0 <nl_langinfo@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #188416	; 0x2e000
   111f8:	ldr	pc, [ip, #3844]!	; 0xf04

000111fc <bindtextdomain@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #188416	; 0x2e000
   11204:	ldr	pc, [ip, #3836]!	; 0xefc

00011208 <towupper@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #188416	; 0x2e000
   11210:	ldr	pc, [ip, #3828]!	; 0xef4

00011214 <strncmp@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #188416	; 0x2e000
   1121c:	ldr	pc, [ip, #3820]!	; 0xeec

00011220 <abort@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #188416	; 0x2e000
   11228:	ldr	pc, [ip, #3812]!	; 0xee4

0001122c <__assert_fail@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #188416	; 0x2e000
   11234:	ldr	pc, [ip, #3804]!	; 0xedc

Disassembly of section .text:

00011238 <.text>:
   11238:	strd	r4, [sp, #-12]!
   1123c:	mov	r5, r0
   11240:	mov	r4, r1
   11244:	ldr	r0, [r1]
   11248:	str	lr, [sp, #8]
   1124c:	sub	sp, sp, #28
   11250:	bl	1c5bc <__assert_fail@plt+0xb390>
   11254:	movw	r1, #56684	; 0xdd6c
   11258:	movt	r1, #2
   1125c:	mov	r0, #6
   11260:	bl	111d8 <setlocale@plt>
   11264:	movw	r1, #58416	; 0xe430
   11268:	movt	r1, #2
   1126c:	movw	r0, #57908	; 0xe234
   11270:	movt	r0, #2
   11274:	bl	111fc <bindtextdomain@plt>
   11278:	movw	r0, #57908	; 0xe234
   1127c:	movt	r0, #2
   11280:	bl	11034 <textdomain@plt>
   11284:	mov	r2, #3
   11288:	movw	r3, #288	; 0x120
   1128c:	movt	r3, #4
   11290:	movw	r0, #12648	; 0x3168
   11294:	movt	r0, #1
   11298:	str	r2, [r3]
   1129c:	bl	2d948 <__assert_fail@plt+0x1c71c>
   112a0:	movw	r2, #58440	; 0xe448
   112a4:	movt	r2, #2
   112a8:	movw	r3, #58452	; 0xe454
   112ac:	movt	r3, #2
   112b0:	mov	ip, #0
   112b4:	movw	r1, #58468	; 0xe464
   112b8:	movt	r1, #2
   112bc:	mov	r0, r5
   112c0:	str	r3, [sp, #12]
   112c4:	movw	r3, #58480	; 0xe470
   112c8:	movt	r3, #2
   112cc:	str	r2, [sp, #16]
   112d0:	movw	r2, #6292	; 0x1894
   112d4:	movt	r2, #1
   112d8:	str	r3, [sp]
   112dc:	movw	r3, #57904	; 0xe230
   112e0:	movt	r3, #2
   112e4:	str	r2, [sp, #4]
   112e8:	movw	r2, #55812	; 0xda04
   112ec:	movt	r2, #2
   112f0:	str	r1, [sp, #8]
   112f4:	mov	r1, r4
   112f8:	str	ip, [sp, #20]
   112fc:	bl	1be54 <__assert_fail@plt+0xac28>
   11300:	cmp	r5, #1
   11304:	bls	113c8 <__assert_fail@plt+0x19c>
   11308:	movw	r1, #58496	; 0xe480
   1130c:	movt	r1, #2
   11310:	ldr	r0, [r4, #4]
   11314:	bl	10f68 <strcmp@plt>
   11318:	cmp	r0, #0
   1131c:	bne	1132c <__assert_fail@plt+0x100>
   11320:	cmp	r5, #2
   11324:	beq	113c8 <__assert_fail@plt+0x19c>
   11328:	add	r4, r4, #4
   1132c:	add	r4, r4, #4
   11330:	movw	r5, #400	; 0x190
   11334:	movt	r5, #4
   11338:	mov	r0, #1
   1133c:	str	r4, [r5]
   11340:	bl	1307c <__assert_fail@plt+0x1e50>
   11344:	ldr	r5, [r5]
   11348:	mov	r4, r0
   1134c:	ldr	r3, [r5]
   11350:	cmp	r3, #0
   11354:	bne	113f4 <__assert_fail@plt+0x1c8>
   11358:	ldr	r3, [r0]
   1135c:	cmp	r3, #0
   11360:	beq	11380 <__assert_fail@plt+0x154>
   11364:	cmp	r3, #1
   11368:	bne	11430 <__assert_fail@plt+0x204>
   1136c:	ldr	r0, [r0, #4]
   11370:	bl	110ac <puts@plt>
   11374:	mov	r0, r4
   11378:	bl	1164c <__assert_fail@plt+0x420>
   1137c:	bl	11124 <exit@plt>
   11380:	movw	r5, #388	; 0x184
   11384:	movt	r5, #4
   11388:	add	r2, r0, #4
   1138c:	mov	r1, #10
   11390:	ldr	r0, [r5]
   11394:	bl	1b950 <__assert_fail@plt+0xa724>
   11398:	ldr	r0, [r5]
   1139c:	ldr	r3, [r0, #20]
   113a0:	ldr	r2, [r0, #24]
   113a4:	cmp	r3, r2
   113a8:	addcc	r1, r3, #1
   113ac:	movcc	r2, #10
   113b0:	strcc	r1, [r0, #20]
   113b4:	strbcc	r2, [r3]
   113b8:	bcc	11374 <__assert_fail@plt+0x148>
   113bc:	mov	r1, #10
   113c0:	bl	111cc <__overflow@plt>
   113c4:	b	11374 <__assert_fail@plt+0x148>
   113c8:	mov	r2, #5
   113cc:	movw	r1, #58500	; 0xe484
   113d0:	movt	r1, #2
   113d4:	mov	r0, #0
   113d8:	bl	1101c <dcgettext@plt>
   113dc:	mov	r1, #0
   113e0:	mov	r2, r0
   113e4:	mov	r0, r1
   113e8:	bl	11094 <error@plt>
   113ec:	mov	r0, #2
   113f0:	bl	11894 <__assert_fail@plt+0x668>
   113f4:	mov	r2, #5
   113f8:	movw	r1, #58516	; 0xe494
   113fc:	movt	r1, #2
   11400:	mov	r0, #0
   11404:	bl	1101c <dcgettext@plt>
   11408:	mov	r4, r0
   1140c:	mov	r1, #8
   11410:	ldr	r2, [r5]
   11414:	mov	r0, #0
   11418:	bl	1e56c <__assert_fail@plt+0xd340>
   1141c:	mov	r3, r0
   11420:	mov	r2, r4
   11424:	mov	r1, #0
   11428:	mov	r0, #2
   1142c:	bl	11094 <error@plt>
   11430:	bl	11220 <abort@plt>
   11434:	mov	fp, #0
   11438:	mov	lr, #0
   1143c:	pop	{r1}		; (ldr r1, [sp], #4)
   11440:	mov	r2, sp
   11444:	push	{r2}		; (str r2, [sp, #-4]!)
   11448:	push	{r0}		; (str r0, [sp, #-4]!)
   1144c:	ldr	ip, [pc, #16]	; 11464 <__assert_fail@plt+0x238>
   11450:	push	{ip}		; (str ip, [sp, #-4]!)
   11454:	ldr	r0, [pc, #12]	; 11468 <__assert_fail@plt+0x23c>
   11458:	ldr	r3, [pc, #12]	; 1146c <__assert_fail@plt+0x240>
   1145c:	bl	110c4 <__libc_start_main@plt>
   11460:	bl	11220 <abort@plt>
   11464:	andeq	sp, r2, r4, asr #18
   11468:	andeq	r1, r1, r8, lsr r2
   1146c:	andeq	sp, r2, r4, ror #17
   11470:	ldr	r3, [pc, #20]	; 1148c <__assert_fail@plt+0x260>
   11474:	ldr	r2, [pc, #20]	; 11490 <__assert_fail@plt+0x264>
   11478:	add	r3, pc, r3
   1147c:	ldr	r2, [r3, r2]
   11480:	cmp	r2, #0
   11484:	bxeq	lr
   11488:	b	110f4 <__gmon_start__@plt>
   1148c:	andeq	lr, r2, r0, lsl #23
   11490:	andeq	r0, r0, r4, lsl r1
   11494:	ldr	r0, [pc, #24]	; 114b4 <__assert_fail@plt+0x288>
   11498:	ldr	r3, [pc, #24]	; 114b8 <__assert_fail@plt+0x28c>
   1149c:	cmp	r3, r0
   114a0:	bxeq	lr
   114a4:	ldr	r3, [pc, #16]	; 114bc <__assert_fail@plt+0x290>
   114a8:	cmp	r3, #0
   114ac:	bxeq	lr
   114b0:	bx	r3
   114b4:	andeq	r0, r4, r0, ror r1
   114b8:	andeq	r0, r4, r0, ror r1
   114bc:	andeq	r0, r0, r0
   114c0:	ldr	r0, [pc, #36]	; 114ec <__assert_fail@plt+0x2c0>
   114c4:	ldr	r1, [pc, #36]	; 114f0 <__assert_fail@plt+0x2c4>
   114c8:	sub	r1, r1, r0
   114cc:	asr	r1, r1, #2
   114d0:	add	r1, r1, r1, lsr #31
   114d4:	asrs	r1, r1, #1
   114d8:	bxeq	lr
   114dc:	ldr	r3, [pc, #16]	; 114f4 <__assert_fail@plt+0x2c8>
   114e0:	cmp	r3, #0
   114e4:	bxeq	lr
   114e8:	bx	r3
   114ec:	andeq	r0, r4, r0, ror r1
   114f0:	andeq	r0, r4, r0, ror r1
   114f4:	andeq	r0, r0, r0
   114f8:	push	{r4, lr}
   114fc:	ldr	r4, [pc, #24]	; 1151c <__assert_fail@plt+0x2f0>
   11500:	ldrb	r3, [r4]
   11504:	cmp	r3, #0
   11508:	popne	{r4, pc}
   1150c:	bl	11494 <__assert_fail@plt+0x268>
   11510:	mov	r3, #1
   11514:	strb	r3, [r4]
   11518:	pop	{r4, pc}
   1151c:	andeq	r0, r4, ip, lsl #3
   11520:	b	114c0 <__assert_fail@plt+0x294>
   11524:	strd	r4, [sp, #-16]!
   11528:	movw	r4, #400	; 0x190
   1152c:	movt	r4, #4
   11530:	ldr	r5, [r4]
   11534:	ldr	r3, [r5]
   11538:	str	r6, [sp, #8]
   1153c:	str	lr, [sp, #12]
   11540:	cmp	r3, #0
   11544:	moveq	r0, r3
   11548:	beq	11568 <__assert_fail@plt+0x33c>
   1154c:	mov	r1, r0
   11550:	mov	r0, r3
   11554:	bl	10f68 <strcmp@plt>
   11558:	clz	r0, r0
   1155c:	lsr	r0, r0, #5
   11560:	add	r5, r5, r0, lsl #2
   11564:	str	r5, [r4]
   11568:	ldrd	r4, [sp]
   1156c:	ldr	r6, [sp, #8]
   11570:	add	sp, sp, #12
   11574:	pop	{pc}		; (ldr pc, [sp], #4)
   11578:	strd	r4, [sp, #-16]!
   1157c:	mov	r5, r0
   11580:	mov	r0, #16
   11584:	str	r6, [sp, #8]
   11588:	str	lr, [sp, #12]
   1158c:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   11590:	mov	r4, r0
   11594:	mov	r3, #1
   11598:	mov	r0, r5
   1159c:	str	r3, [r4]
   115a0:	bl	2d298 <__assert_fail@plt+0x1c06c>
   115a4:	str	r0, [r4, #4]
   115a8:	mov	r0, r4
   115ac:	ldrd	r4, [sp]
   115b0:	ldr	r6, [sp, #8]
   115b4:	add	sp, sp, #12
   115b8:	pop	{pc}		; (ldr pc, [sp], #4)
   115bc:	ldr	r3, [r0]
   115c0:	str	r4, [sp, #-8]!
   115c4:	mov	r4, r0
   115c8:	str	lr, [sp, #4]
   115cc:	cmp	r3, #1
   115d0:	beq	115f0 <__assert_fail@plt+0x3c4>
   115d4:	add	r0, r0, #4
   115d8:	bl	15d24 <__assert_fail@plt+0x4af8>
   115dc:	mov	r0, r4
   115e0:	ldr	r4, [sp]
   115e4:	ldr	lr, [sp, #4]
   115e8:	add	sp, sp, #8
   115ec:	b	13254 <__assert_fail@plt+0x2028>
   115f0:	ldr	r0, [r0, #4]
   115f4:	bl	13254 <__assert_fail@plt+0x2028>
   115f8:	b	115dc <__assert_fail@plt+0x3b0>
   115fc:	mov	r2, #5
   11600:	movw	r1, #55736	; 0xd9b8
   11604:	movt	r1, #2
   11608:	mov	r0, #0
   1160c:	str	r4, [sp, #-8]!
   11610:	str	lr, [sp, #4]
   11614:	bl	1101c <dcgettext@plt>
   11618:	movw	r3, #400	; 0x190
   1161c:	movt	r3, #4
   11620:	ldr	r3, [r3]
   11624:	mov	r4, r0
   11628:	mov	r1, #8
   1162c:	mov	r0, #0
   11630:	ldr	r2, [r3, #-4]
   11634:	bl	1e56c <__assert_fail@plt+0xd340>
   11638:	mov	r3, r0
   1163c:	mov	r2, r4
   11640:	mov	r1, #0
   11644:	mov	r0, #2
   11648:	bl	11094 <error@plt>
   1164c:	ldr	r3, [r0]
   11650:	str	r4, [sp, #-8]!
   11654:	str	lr, [sp, #4]
   11658:	cmp	r3, #0
   1165c:	bne	1167c <__assert_fail@plt+0x450>
   11660:	add	r0, r0, #4
   11664:	bl	16488 <__assert_fail@plt+0x525c>
   11668:	clz	r0, r0
   1166c:	ldr	r4, [sp]
   11670:	add	sp, sp, #4
   11674:	lsr	r0, r0, #5
   11678:	pop	{pc}		; (ldr pc, [sp], #4)
   1167c:	cmp	r3, #1
   11680:	bne	116e0 <__assert_fail@plt+0x4b4>
   11684:	ldr	r2, [r0, #4]
   11688:	ldrb	r1, [r2]
   1168c:	cmp	r1, #0
   11690:	beq	116d0 <__assert_fail@plt+0x4a4>
   11694:	sub	r1, r1, #45	; 0x2d
   11698:	clz	r1, r1
   1169c:	lsr	r1, r1, #5
   116a0:	ldrb	r3, [r2, r1]
   116a4:	add	r2, r2, r1
   116a8:	b	116b8 <__assert_fail@plt+0x48c>
   116ac:	ldrb	r3, [r2, #1]!
   116b0:	cmp	r3, #0
   116b4:	beq	116d0 <__assert_fail@plt+0x4a4>
   116b8:	cmp	r3, #48	; 0x30
   116bc:	beq	116ac <__assert_fail@plt+0x480>
   116c0:	ldr	r4, [sp]
   116c4:	add	sp, sp, #4
   116c8:	mov	r0, #0
   116cc:	pop	{pc}		; (ldr pc, [sp], #4)
   116d0:	ldr	r4, [sp]
   116d4:	add	sp, sp, #4
   116d8:	mov	r0, #1
   116dc:	pop	{pc}		; (ldr pc, [sp], #4)
   116e0:	bl	11220 <abort@plt>
   116e4:	movw	r3, #55660	; 0xd96c
   116e8:	movt	r3, #2
   116ec:	str	r4, [sp, #-8]!
   116f0:	movw	r1, #55776	; 0xd9e0
   116f4:	movt	r1, #2
   116f8:	str	lr, [sp, #4]
   116fc:	movw	r0, #55792	; 0xd9f0
   11700:	movt	r0, #2
   11704:	mov	r2, #172	; 0xac
   11708:	bl	1122c <__assert_fail@plt>
   1170c:	str	r4, [sp, #-8]!
   11710:	mov	r4, r0
   11714:	str	lr, [sp, #4]
   11718:	bl	16488 <__assert_fail@plt+0x525c>
   1171c:	cmp	r0, #0
   11720:	mvnlt	r0, #0
   11724:	blt	1173c <__assert_fail@plt+0x510>
   11728:	mov	r0, r4
   1172c:	bl	15f18 <__assert_fail@plt+0x4cec>
   11730:	cmp	r0, #0
   11734:	bne	11748 <__assert_fail@plt+0x51c>
   11738:	mvn	r0, #1
   1173c:	ldr	r4, [sp]
   11740:	add	sp, sp, #4
   11744:	pop	{pc}		; (ldr pc, [sp], #4)
   11748:	mov	r0, r4
   1174c:	bl	1604c <__assert_fail@plt+0x4e20>
   11750:	cmn	r0, #1
   11754:	beq	11738 <__assert_fail@plt+0x50c>
   11758:	ldr	r4, [sp]
   1175c:	add	sp, sp, #4
   11760:	pop	{pc}		; (ldr pc, [sp], #4)
   11764:	ldr	r3, [r0]
   11768:	cmp	r3, #0
   1176c:	bne	11778 <__assert_fail@plt+0x54c>
   11770:	mov	r0, #1
   11774:	bx	lr
   11778:	cmp	r3, #1
   1177c:	strd	r4, [sp, #-16]!
   11780:	mov	r5, r0
   11784:	str	r6, [sp, #8]
   11788:	str	lr, [sp, #12]
   1178c:	bne	11834 <__assert_fail@plt+0x608>
   11790:	ldr	r6, [r0, #4]
   11794:	ldrb	r2, [r6]
   11798:	sub	r2, r2, #45	; 0x2d
   1179c:	clz	r2, r2
   117a0:	lsr	r2, r2, #5
   117a4:	ldrb	r4, [r6, r2]
   117a8:	add	r2, r6, r2
   117ac:	sub	r4, r4, #48	; 0x30
   117b0:	cmp	r4, #9
   117b4:	bhi	117d0 <__assert_fail@plt+0x5a4>
   117b8:	ldrb	r4, [r2, #1]!
   117bc:	cmp	r4, #0
   117c0:	beq	117e4 <__assert_fail@plt+0x5b8>
   117c4:	sub	r4, r4, #48	; 0x30
   117c8:	cmp	r4, #9
   117cc:	bls	117b8 <__assert_fail@plt+0x58c>
   117d0:	ldrd	r4, [sp]
   117d4:	mov	r0, #0
   117d8:	ldr	r6, [sp, #8]
   117dc:	add	sp, sp, #12
   117e0:	pop	{pc}		; (ldr pc, [sp], #4)
   117e4:	mov	r2, #10
   117e8:	mov	r1, r6
   117ec:	add	r0, r5, #4
   117f0:	bl	1b930 <__assert_fail@plt+0xa704>
   117f4:	cmp	r0, #0
   117f8:	bne	1181c <__assert_fail@plt+0x5f0>
   117fc:	mov	r0, r6
   11800:	bl	13254 <__assert_fail@plt+0x2028>
   11804:	str	r4, [r5]
   11808:	mov	r0, #1
   1180c:	ldrd	r4, [sp]
   11810:	ldr	r6, [sp, #8]
   11814:	add	sp, sp, #12
   11818:	pop	{pc}		; (ldr pc, [sp], #4)
   1181c:	movw	r2, #58680	; 0xe538
   11820:	movt	r2, #2
   11824:	mov	r3, r6
   11828:	mov	r1, #34	; 0x22
   1182c:	mov	r0, #3
   11830:	bl	11094 <error@plt>
   11834:	bl	11220 <abort@plt>
   11838:	strd	r4, [sp, #-16]!
   1183c:	mov	r4, r0
   11840:	ldr	r0, [r0]
   11844:	str	r6, [sp, #8]
   11848:	str	lr, [sp, #12]
   1184c:	cmp	r0, #0
   11850:	bne	11888 <__assert_fail@plt+0x65c>
   11854:	add	r5, r4, #4
   11858:	mov	r1, #10
   1185c:	mov	r2, r5
   11860:	bl	1b374 <__assert_fail@plt+0xa148>
   11864:	mov	r6, r0
   11868:	mov	r0, r5
   1186c:	bl	15d24 <__assert_fail@plt+0x4af8>
   11870:	mov	r3, #1
   11874:	stm	r4, {r3, r6}
   11878:	ldrd	r4, [sp]
   1187c:	ldr	r6, [sp, #8]
   11880:	add	sp, sp, #12
   11884:	pop	{pc}		; (ldr pc, [sp], #4)
   11888:	cmp	r0, #1
   1188c:	beq	11878 <__assert_fail@plt+0x64c>
   11890:	bl	11220 <abort@plt>
   11894:	subs	r5, r0, #0
   11898:	str	r7, [sp, #-8]!
   1189c:	str	lr, [sp, #4]
   118a0:	sub	sp, sp, #56	; 0x38
   118a4:	beq	118ec <__assert_fail@plt+0x6c0>
   118a8:	movw	r3, #384	; 0x180
   118ac:	movt	r3, #4
   118b0:	ldr	r4, [r3]
   118b4:	mov	r2, #5
   118b8:	movw	r1, #55820	; 0xda0c
   118bc:	movt	r1, #2
   118c0:	mov	r0, #0
   118c4:	bl	1101c <dcgettext@plt>
   118c8:	movw	r3, #412	; 0x19c
   118cc:	movt	r3, #4
   118d0:	mov	r2, r0
   118d4:	mov	r1, #1
   118d8:	ldr	r3, [r3]
   118dc:	mov	r0, r4
   118e0:	bl	1119c <__fprintf_chk@plt>
   118e4:	mov	r0, r5
   118e8:	bl	11124 <exit@plt>
   118ec:	mov	r2, #5
   118f0:	movw	r1, #55860	; 0xda34
   118f4:	movt	r1, #2
   118f8:	movw	r4, #388	; 0x184
   118fc:	movt	r4, #4
   11900:	bl	1101c <dcgettext@plt>
   11904:	movw	r3, #412	; 0x19c
   11908:	movt	r3, #4
   1190c:	ldr	r3, [r3]
   11910:	mov	r1, r0
   11914:	mov	r0, #1
   11918:	mov	r2, r3
   1191c:	bl	11184 <__printf_chk@plt>
   11920:	ldr	r0, [r4]
   11924:	ldr	r3, [r0, #20]
   11928:	ldr	r2, [r0, #24]
   1192c:	cmp	r3, r2
   11930:	addcc	r1, r3, #1
   11934:	movcc	r2, #10
   11938:	strcc	r1, [r0, #20]
   1193c:	strbcc	r2, [r3]
   11940:	bcs	11c98 <__assert_fail@plt+0xa6c>
   11944:	mov	r2, #5
   11948:	movw	r1, #55900	; 0xda5c
   1194c:	movt	r1, #2
   11950:	mov	r0, #0
   11954:	bl	1101c <dcgettext@plt>
   11958:	ldr	r1, [r4]
   1195c:	bl	10f38 <fputs_unlocked@plt>
   11960:	mov	r2, #5
   11964:	movw	r1, #55948	; 0xda8c
   11968:	movt	r1, #2
   1196c:	mov	r0, #0
   11970:	bl	1101c <dcgettext@plt>
   11974:	ldr	r1, [r4]
   11978:	bl	10f38 <fputs_unlocked@plt>
   1197c:	mov	r2, #5
   11980:	movw	r1, #56004	; 0xdac4
   11984:	movt	r1, #2
   11988:	mov	r0, #0
   1198c:	bl	1101c <dcgettext@plt>
   11990:	ldr	r1, [r4]
   11994:	bl	10f38 <fputs_unlocked@plt>
   11998:	mov	r2, #5
   1199c:	movw	r1, #56280	; 0xdbd8
   119a0:	movt	r1, #2
   119a4:	mov	r0, #0
   119a8:	bl	1101c <dcgettext@plt>
   119ac:	ldr	r1, [r4]
   119b0:	bl	10f38 <fputs_unlocked@plt>
   119b4:	mov	r2, #5
   119b8:	movw	r1, #56572	; 0xdcfc
   119bc:	movt	r1, #2
   119c0:	mov	r0, #0
   119c4:	bl	1101c <dcgettext@plt>
   119c8:	ldr	r1, [r4]
   119cc:	bl	10f38 <fputs_unlocked@plt>
   119d0:	mov	r2, #5
   119d4:	movw	r1, #56688	; 0xdd70
   119d8:	movt	r1, #2
   119dc:	mov	r0, #0
   119e0:	bl	1101c <dcgettext@plt>
   119e4:	ldr	r1, [r4]
   119e8:	bl	10f38 <fputs_unlocked@plt>
   119ec:	mov	r2, #5
   119f0:	movw	r1, #56876	; 0xde2c
   119f4:	movt	r1, #2
   119f8:	mov	r0, #0
   119fc:	bl	1101c <dcgettext@plt>
   11a00:	ldr	r1, [r4]
   11a04:	bl	10f38 <fputs_unlocked@plt>
   11a08:	mov	r2, #5
   11a0c:	movw	r1, #57188	; 0xdf64
   11a10:	movt	r1, #2
   11a14:	mov	r0, #0
   11a18:	bl	1101c <dcgettext@plt>
   11a1c:	ldr	r1, [r4]
   11a20:	bl	10f38 <fputs_unlocked@plt>
   11a24:	mov	r2, #5
   11a28:	movw	r1, #57392	; 0xe030
   11a2c:	movt	r1, #2
   11a30:	mov	r0, #0
   11a34:	bl	1101c <dcgettext@plt>
   11a38:	ldr	r1, [r4]
   11a3c:	bl	10f38 <fputs_unlocked@plt>
   11a40:	mov	r2, #5
   11a44:	movw	r1, #57684	; 0xe154
   11a48:	movt	r1, #2
   11a4c:	mov	r0, #0
   11a50:	bl	1101c <dcgettext@plt>
   11a54:	ldr	r1, [r4]
   11a58:	bl	10f38 <fputs_unlocked@plt>
   11a5c:	movw	r0, #55660	; 0xd96c
   11a60:	movt	r0, #2
   11a64:	ldr	ip, [r0, #20]
   11a68:	ldrd	r2, [r0, #28]
   11a6c:	ldr	r6, [r0, #24]
   11a70:	subs	r1, ip, #0
   11a74:	str	ip, [sp]
   11a78:	ldrd	r8, [r0, #36]	; 0x24
   11a7c:	strd	r2, [sp, #8]
   11a80:	ldrd	r2, [r0, #44]	; 0x2c
   11a84:	str	r6, [sp, #4]
   11a88:	ldrd	r6, [r0, #52]	; 0x34
   11a8c:	strd	r8, [sp, #16]
   11a90:	ldrd	r8, [r0, #60]	; 0x3c
   11a94:	strd	r2, [sp, #24]
   11a98:	ldrd	r2, [r0, #68]	; 0x44
   11a9c:	strd	r6, [sp, #32]
   11aa0:	movwne	r7, #55812	; 0xda04
   11aa4:	mov	r6, sp
   11aa8:	movtne	r7, #2
   11aac:	strd	r8, [sp, #40]	; 0x28
   11ab0:	strd	r2, [sp, #48]	; 0x30
   11ab4:	bne	11bac <__assert_fail@plt+0x980>
   11ab8:	ldr	r6, [r6, #4]
   11abc:	movw	r1, #57840	; 0xe1f0
   11ac0:	movt	r1, #2
   11ac4:	mov	r2, #5
   11ac8:	cmp	r6, #0
   11acc:	beq	11bc0 <__assert_fail@plt+0x994>
   11ad0:	mov	r0, #0
   11ad4:	bl	1101c <dcgettext@plt>
   11ad8:	mov	r1, r0
   11adc:	movw	r3, #57864	; 0xe208
   11ae0:	movt	r3, #2
   11ae4:	movw	r2, #57904	; 0xe230
   11ae8:	movt	r2, #2
   11aec:	mov	r0, #1
   11af0:	bl	11184 <__printf_chk@plt>
   11af4:	mov	r1, #0
   11af8:	mov	r0, #5
   11afc:	bl	111d8 <setlocale@plt>
   11b00:	cmp	r0, #0
   11b04:	movweq	r7, #55812	; 0xda04
   11b08:	movteq	r7, #2
   11b0c:	beq	11b30 <__assert_fail@plt+0x904>
   11b10:	movw	r1, #57920	; 0xe240
   11b14:	movt	r1, #2
   11b18:	mov	r2, #3
   11b1c:	movw	r7, #55812	; 0xda04
   11b20:	movt	r7, #2
   11b24:	bl	11214 <strncmp@plt>
   11b28:	cmp	r0, #0
   11b2c:	bne	11c78 <__assert_fail@plt+0xa4c>
   11b30:	mov	r2, #5
   11b34:	movw	r1, #57996	; 0xe28c
   11b38:	movt	r1, #2
   11b3c:	mov	r0, #0
   11b40:	bl	1101c <dcgettext@plt>
   11b44:	mov	r1, r0
   11b48:	movw	r3, #55812	; 0xda04
   11b4c:	movt	r3, #2
   11b50:	movw	r2, #57864	; 0xe208
   11b54:	movt	r2, #2
   11b58:	mov	r0, #1
   11b5c:	bl	11184 <__printf_chk@plt>
   11b60:	mov	r2, #5
   11b64:	movw	r1, #58024	; 0xe2a8
   11b68:	movt	r1, #2
   11b6c:	mov	r0, #0
   11b70:	bl	1101c <dcgettext@plt>
   11b74:	movw	r2, #58564	; 0xe4c4
   11b78:	movt	r2, #2
   11b7c:	cmp	r6, r7
   11b80:	movw	r3, #56684	; 0xdd6c
   11b84:	movt	r3, #2
   11b88:	mov	r1, r0
   11b8c:	moveq	r3, r2
   11b90:	mov	r2, r6
   11b94:	mov	r0, #1
   11b98:	bl	11184 <__printf_chk@plt>
   11b9c:	b	118e4 <__assert_fail@plt+0x6b8>
   11ba0:	ldr	r1, [r6, #8]!
   11ba4:	cmp	r1, #0
   11ba8:	beq	11ab8 <__assert_fail@plt+0x88c>
   11bac:	mov	r0, r7
   11bb0:	bl	10f68 <strcmp@plt>
   11bb4:	cmp	r0, #0
   11bb8:	bne	11ba0 <__assert_fail@plt+0x974>
   11bbc:	b	11ab8 <__assert_fail@plt+0x88c>
   11bc0:	mov	r0, r6
   11bc4:	bl	1101c <dcgettext@plt>
   11bc8:	mov	r1, r0
   11bcc:	movw	r3, #57864	; 0xe208
   11bd0:	movt	r3, #2
   11bd4:	movw	r2, #57904	; 0xe230
   11bd8:	movt	r2, #2
   11bdc:	mov	r0, #1
   11be0:	bl	11184 <__printf_chk@plt>
   11be4:	mov	r1, r6
   11be8:	mov	r0, #5
   11bec:	bl	111d8 <setlocale@plt>
   11bf0:	cmp	r0, #0
   11bf4:	beq	11c10 <__assert_fail@plt+0x9e4>
   11bf8:	movw	r1, #57920	; 0xe240
   11bfc:	movt	r1, #2
   11c00:	mov	r2, #3
   11c04:	bl	11214 <strncmp@plt>
   11c08:	cmp	r0, #0
   11c0c:	bne	11c6c <__assert_fail@plt+0xa40>
   11c10:	mov	r2, #5
   11c14:	movw	r1, #57996	; 0xe28c
   11c18:	movt	r1, #2
   11c1c:	mov	r0, #0
   11c20:	bl	1101c <dcgettext@plt>
   11c24:	mov	r1, r0
   11c28:	movw	r3, #55812	; 0xda04
   11c2c:	movt	r3, #2
   11c30:	movw	r2, #57864	; 0xe208
   11c34:	movt	r2, #2
   11c38:	mov	r0, #1
   11c3c:	bl	11184 <__printf_chk@plt>
   11c40:	movw	r1, #58024	; 0xe2a8
   11c44:	movt	r1, #2
   11c48:	mov	r2, #5
   11c4c:	mov	r0, #0
   11c50:	bl	1101c <dcgettext@plt>
   11c54:	movw	r6, #55812	; 0xda04
   11c58:	movt	r6, #2
   11c5c:	movw	r3, #58564	; 0xe4c4
   11c60:	movt	r3, #2
   11c64:	mov	r1, r0
   11c68:	b	11b90 <__assert_fail@plt+0x964>
   11c6c:	movw	r7, #55812	; 0xda04
   11c70:	movt	r7, #2
   11c74:	mov	r6, r7
   11c78:	mov	r2, #5
   11c7c:	movw	r1, #57924	; 0xe244
   11c80:	movt	r1, #2
   11c84:	mov	r0, #0
   11c88:	bl	1101c <dcgettext@plt>
   11c8c:	ldr	r1, [r4]
   11c90:	bl	10f38 <fputs_unlocked@plt>
   11c94:	b	11b30 <__assert_fail@plt+0x904>
   11c98:	mov	r1, #10
   11c9c:	bl	111cc <__overflow@plt>
   11ca0:	b	11944 <__assert_fail@plt+0x718>
   11ca4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11ca8:	mov	r5, r1
   11cac:	mov	r4, #0
   11cb0:	strd	r6, [sp, #8]
   11cb4:	mov	r7, r0
   11cb8:	strd	r8, [sp, #16]
   11cbc:	str	lr, [sp, #24]
   11cc0:	sub	sp, sp, #372	; 0x174
   11cc4:	bl	11838 <__assert_fail@plt+0x60c>
   11cc8:	mov	r0, r5
   11ccc:	bl	11838 <__assert_fail@plt+0x60c>
   11cd0:	ldr	r5, [r5, #4]
   11cd4:	movw	r2, #710	; 0x2c6
   11cd8:	add	r1, sp, #112	; 0x70
   11cdc:	movw	r3, #720	; 0x2d0
   11ce0:	movt	r3, #4
   11ce4:	str	r4, [sp, #12]
   11ce8:	str	r4, [sp, #16]
   11cec:	str	r2, [r3]
   11cf0:	str	r4, [sp, #20]
   11cf4:	mov	r0, r5
   11cf8:	str	r4, [sp, #24]
   11cfc:	str	r4, [sp, #28]
   11d00:	str	r1, [sp, #40]	; 0x28
   11d04:	str	r4, [sp, #44]	; 0x2c
   11d08:	bl	11130 <strlen@plt>
   11d0c:	mov	r1, r0
   11d10:	add	r2, sp, #24
   11d14:	mov	r0, r5
   11d18:	bl	2bb44 <__assert_fail@plt+0x1a918>
   11d1c:	subs	r6, r0, #0
   11d20:	bne	11fdc <__assert_fail@plt+0xdb0>
   11d24:	ldrb	r3, [sp, #52]	; 0x34
   11d28:	ldr	r4, [r7, #4]
   11d2c:	bfi	r3, r6, #7, #1
   11d30:	mov	r0, r4
   11d34:	strb	r3, [sp, #52]	; 0x34
   11d38:	bl	11130 <strlen@plt>
   11d3c:	add	ip, sp, #12
   11d40:	mov	r2, r0
   11d44:	mov	r1, r4
   11d48:	mov	r3, r6
   11d4c:	add	r0, sp, #24
   11d50:	str	ip, [sp]
   11d54:	bl	2c4ec <__assert_fail@plt+0x1b2c0>
   11d58:	subs	r8, r0, #0
   11d5c:	blt	11dd4 <__assert_fail@plt+0xba8>
   11d60:	ldr	r5, [sp, #48]	; 0x30
   11d64:	cmp	r5, #0
   11d68:	beq	11e34 <__assert_fail@plt+0xc08>
   11d6c:	ldr	r3, [sp, #20]
   11d70:	ldr	r3, [r3, #4]
   11d74:	cmp	r3, #0
   11d78:	blt	11e20 <__assert_fail@plt+0xbf4>
   11d7c:	ldr	r2, [r7, #4]
   11d80:	strb	r6, [r2, r3]
   11d84:	ldr	r3, [sp, #16]
   11d88:	ldr	r0, [r7, #4]
   11d8c:	ldr	r3, [r3, #4]
   11d90:	add	r0, r0, r3
   11d94:	bl	11578 <__assert_fail@plt+0x34c>
   11d98:	mov	r4, r0
   11d9c:	ldr	r3, [sp, #12]
   11da0:	cmp	r3, #0
   11da4:	bne	11e0c <__assert_fail@plt+0xbe0>
   11da8:	mov	r3, #0
   11dac:	add	r0, sp, #24
   11db0:	str	r3, [sp, #40]	; 0x28
   11db4:	bl	2c324 <__assert_fail@plt+0x1b0f8>
   11db8:	mov	r0, r4
   11dbc:	add	sp, sp, #372	; 0x174
   11dc0:	ldrd	r4, [sp]
   11dc4:	ldrd	r6, [sp, #8]
   11dc8:	ldrd	r8, [sp, #16]
   11dcc:	add	sp, sp, #24
   11dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   11dd4:	cmn	r8, #1
   11dd8:	bne	11ff4 <__assert_fail@plt+0xdc8>
   11ddc:	ldr	r5, [sp, #48]	; 0x30
   11de0:	cmp	r5, #0
   11de4:	bne	11e20 <__assert_fail@plt+0xbf4>
   11de8:	mov	r0, #16
   11dec:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   11df0:	mov	r4, r0
   11df4:	mov	r1, r5
   11df8:	str	r5, [r0], #4
   11dfc:	bl	15e60 <__assert_fail@plt+0x4c34>
   11e00:	ldr	r3, [sp, #12]
   11e04:	cmp	r3, #0
   11e08:	beq	11da8 <__assert_fail@plt+0xb7c>
   11e0c:	ldr	r0, [sp, #16]
   11e10:	bl	13254 <__assert_fail@plt+0x2028>
   11e14:	ldr	r0, [sp, #20]
   11e18:	bl	13254 <__assert_fail@plt+0x2028>
   11e1c:	b	11da8 <__assert_fail@plt+0xb7c>
   11e20:	movw	r0, #56684	; 0xdd6c
   11e24:	movt	r0, #2
   11e28:	bl	11578 <__assert_fail@plt+0x34c>
   11e2c:	mov	r4, r0
   11e30:	b	11d9c <__assert_fail@plt+0xb70>
   11e34:	bl	11070 <__ctype_get_mb_cur_max@plt>
   11e38:	cmp	r0, #1
   11e3c:	mov	r6, r8
   11e40:	beq	11f60 <__assert_fail@plt+0xd34>
   11e44:	ldr	r7, [r7, #4]
   11e48:	mov	r2, #0
   11e4c:	mov	r3, #0
   11e50:	movw	r9, #60928	; 0xee00
   11e54:	movt	r9, #2
   11e58:	strb	r5, [sp, #56]	; 0x38
   11e5c:	mov	r6, #1
   11e60:	strd	r2, [sp, #60]	; 0x3c
   11e64:	strb	r5, [sp, #68]	; 0x44
   11e68:	str	r7, [sp, #72]	; 0x48
   11e6c:	b	11ed0 <__assert_fail@plt+0xca4>
   11e70:	ldrb	r3, [r4]
   11e74:	lsr	r2, r3, #5
   11e78:	and	r3, r3, #31
   11e7c:	ldr	r2, [r9, r2, lsl #2]
   11e80:	lsr	r3, r2, r3
   11e84:	tst	r3, #1
   11e88:	beq	11f44 <__assert_fail@plt+0xd18>
   11e8c:	str	r6, [sp, #76]	; 0x4c
   11e90:	ldrb	r4, [r4]
   11e94:	strb	r6, [sp, #68]	; 0x44
   11e98:	strb	r6, [sp, #80]	; 0x50
   11e9c:	str	r4, [sp, #84]	; 0x54
   11ea0:	cmp	r4, #0
   11ea4:	beq	11f5c <__assert_fail@plt+0xd30>
   11ea8:	ldr	r4, [sp, #72]	; 0x48
   11eac:	sub	r3, r4, r7
   11eb0:	cmp	r3, r8
   11eb4:	bcs	11f5c <__assert_fail@plt+0xd30>
   11eb8:	ldr	r3, [sp, #76]	; 0x4c
   11ebc:	mov	r2, #0
   11ec0:	add	r5, r5, #1
   11ec4:	strb	r2, [sp, #68]	; 0x44
   11ec8:	add	r4, r4, r3
   11ecc:	str	r4, [sp, #72]	; 0x48
   11ed0:	ldrb	r3, [sp, #56]	; 0x38
   11ed4:	ldr	r4, [sp, #72]	; 0x48
   11ed8:	cmp	r3, #0
   11edc:	beq	11e70 <__assert_fail@plt+0xc44>
   11ee0:	bl	11070 <__ctype_get_mb_cur_max@plt>
   11ee4:	mov	r1, r0
   11ee8:	mov	r0, r4
   11eec:	bl	2c63c <__assert_fail@plt+0x1b410>
   11ef0:	mov	r2, r0
   11ef4:	add	r3, sp, #60	; 0x3c
   11ef8:	mov	r1, r4
   11efc:	add	r0, sp, #84	; 0x54
   11f00:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   11f04:	cmn	r0, #1
   11f08:	str	r0, [sp, #76]	; 0x4c
   11f0c:	beq	11f80 <__assert_fail@plt+0xd54>
   11f10:	cmn	r0, #2
   11f14:	beq	11f98 <__assert_fail@plt+0xd6c>
   11f18:	cmp	r0, #0
   11f1c:	beq	11fb8 <__assert_fail@plt+0xd8c>
   11f20:	ldr	r4, [sp, #84]	; 0x54
   11f24:	add	r0, sp, #60	; 0x3c
   11f28:	strb	r6, [sp, #80]	; 0x50
   11f2c:	bl	10ff8 <mbsinit@plt>
   11f30:	cmp	r0, #0
   11f34:	strb	r6, [sp, #68]	; 0x44
   11f38:	movne	r3, #0
   11f3c:	strbne	r3, [sp, #56]	; 0x38
   11f40:	b	11ea0 <__assert_fail@plt+0xc74>
   11f44:	add	r0, sp, #60	; 0x3c
   11f48:	bl	10ff8 <mbsinit@plt>
   11f4c:	cmp	r0, #0
   11f50:	beq	1202c <__assert_fail@plt+0xe00>
   11f54:	strb	r6, [sp, #56]	; 0x38
   11f58:	b	11ee0 <__assert_fail@plt+0xcb4>
   11f5c:	mov	r6, r5
   11f60:	mov	r0, #16
   11f64:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   11f68:	mov	r3, #0
   11f6c:	mov	r4, r0
   11f70:	mov	r1, r6
   11f74:	str	r3, [r0], #4
   11f78:	bl	15e60 <__assert_fail@plt+0x4c34>
   11f7c:	b	11d9c <__assert_fail@plt+0xb70>
   11f80:	mov	r3, #0
   11f84:	strb	r6, [sp, #68]	; 0x44
   11f88:	str	r6, [sp, #76]	; 0x4c
   11f8c:	strb	r3, [sp, #80]	; 0x50
   11f90:	ldr	r4, [sp, #72]	; 0x48
   11f94:	b	11eac <__assert_fail@plt+0xc80>
   11f98:	ldr	r4, [sp, #72]	; 0x48
   11f9c:	mov	r0, r4
   11fa0:	bl	11130 <strlen@plt>
   11fa4:	mov	r3, #0
   11fa8:	strb	r6, [sp, #68]	; 0x44
   11fac:	str	r0, [sp, #76]	; 0x4c
   11fb0:	strb	r3, [sp, #80]	; 0x50
   11fb4:	b	11eac <__assert_fail@plt+0xc80>
   11fb8:	ldr	r4, [sp, #72]	; 0x48
   11fbc:	str	r6, [sp, #76]	; 0x4c
   11fc0:	ldrb	r3, [r4]
   11fc4:	cmp	r3, #0
   11fc8:	bne	1204c <__assert_fail@plt+0xe20>
   11fcc:	ldr	r4, [sp, #84]	; 0x54
   11fd0:	cmp	r4, #0
   11fd4:	beq	11f24 <__assert_fail@plt+0xcf8>
   11fd8:	bl	116e4 <__assert_fail@plt+0x4b8>
   11fdc:	movw	r2, #58680	; 0xe538
   11fe0:	movt	r2, #2
   11fe4:	mov	r3, r6
   11fe8:	mov	r1, r4
   11fec:	mov	r0, #2
   11ff0:	bl	11094 <error@plt>
   11ff4:	cmn	r8, #2
   11ff8:	movne	r4, #75	; 0x4b
   11ffc:	bne	12008 <__assert_fail@plt+0xddc>
   12000:	bl	11148 <__errno_location@plt>
   12004:	ldr	r4, [r0]
   12008:	mov	r2, #5
   1200c:	movw	r1, #58124	; 0xe30c
   12010:	movt	r1, #2
   12014:	mov	r0, #0
   12018:	bl	1101c <dcgettext@plt>
   1201c:	mov	r2, r0
   12020:	mov	r1, r4
   12024:	mov	r0, #3
   12028:	bl	11094 <error@plt>
   1202c:	movw	r3, #55660	; 0xd96c
   12030:	movt	r3, #2
   12034:	movw	r1, #55776	; 0xd9e0
   12038:	movt	r1, #2
   1203c:	movw	r0, #58076	; 0xe2dc
   12040:	movt	r0, #2
   12044:	mov	r2, #143	; 0x8f
   12048:	bl	1122c <__assert_fail@plt>
   1204c:	movw	r3, #55660	; 0xd96c
   12050:	movt	r3, #2
   12054:	movw	r1, #55776	; 0xd9e0
   12058:	movt	r1, #2
   1205c:	movw	r0, #58100	; 0xe2f4
   12060:	movt	r0, #2
   12064:	mov	r2, #171	; 0xab
   12068:	bl	1122c <__assert_fail@plt>
   1206c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12070:	strd	r6, [sp, #8]
   12074:	mov	r6, r0
   12078:	movw	r0, #58160	; 0xe330
   1207c:	movt	r0, #2
   12080:	strd	r8, [sp, #16]
   12084:	strd	sl, [sp, #24]
   12088:	str	lr, [sp, #32]
   1208c:	sub	sp, sp, #188	; 0xbc
   12090:	bl	11524 <__assert_fail@plt+0x2f8>
   12094:	subs	r4, r0, #0
   12098:	beq	120e4 <__assert_fail@plt+0xeb8>
   1209c:	movw	r3, #400	; 0x190
   120a0:	movt	r3, #4
   120a4:	ldr	r2, [r3]
   120a8:	ldr	r0, [r2]
   120ac:	cmp	r0, #0
   120b0:	beq	129ac <__assert_fail@plt+0x1780>
   120b4:	add	r2, r2, #4
   120b8:	str	r2, [r3]
   120bc:	bl	11578 <__assert_fail@plt+0x34c>
   120c0:	mov	r7, r0
   120c4:	mov	r0, r7
   120c8:	add	sp, sp, #188	; 0xbc
   120cc:	ldrd	r4, [sp]
   120d0:	ldrd	r6, [sp, #8]
   120d4:	ldrd	r8, [sp, #16]
   120d8:	ldrd	sl, [sp, #24]
   120dc:	add	sp, sp, #32
   120e0:	pop	{pc}		; (ldr pc, [sp], #4)
   120e4:	movw	r0, #58164	; 0xe334
   120e8:	movt	r0, #2
   120ec:	bl	11524 <__assert_fail@plt+0x2f8>
   120f0:	cmp	r0, #0
   120f4:	bne	121f8 <__assert_fail@plt+0xfcc>
   120f8:	movw	r0, #58172	; 0xe33c
   120fc:	movt	r0, #2
   12100:	bl	11524 <__assert_fail@plt+0x2f8>
   12104:	subs	r5, r0, #0
   12108:	bne	121cc <__assert_fail@plt+0xfa0>
   1210c:	movw	r0, #58180	; 0xe344
   12110:	movt	r0, #2
   12114:	bl	11524 <__assert_fail@plt+0x2f8>
   12118:	cmp	r0, #0
   1211c:	bne	122d0 <__assert_fail@plt+0x10a4>
   12120:	movw	r0, #58188	; 0xe34c
   12124:	movt	r0, #2
   12128:	bl	11524 <__assert_fail@plt+0x2f8>
   1212c:	cmp	r0, #0
   12130:	bne	12238 <__assert_fail@plt+0x100c>
   12134:	movw	r4, #400	; 0x190
   12138:	movt	r4, #4
   1213c:	ldr	r3, [r4]
   12140:	ldr	r3, [r3]
   12144:	cmp	r3, #0
   12148:	beq	129ac <__assert_fail@plt+0x1780>
   1214c:	movw	r0, #58196	; 0xe354
   12150:	movt	r0, #2
   12154:	bl	11524 <__assert_fail@plt+0x2f8>
   12158:	subs	r5, r0, #0
   1215c:	beq	124b0 <__assert_fail@plt+0x1284>
   12160:	mov	r0, r6
   12164:	bl	1307c <__assert_fail@plt+0x1e50>
   12168:	ldr	r6, [r4]
   1216c:	mov	r7, r0
   12170:	ldr	r5, [r6]
   12174:	cmp	r5, #0
   12178:	beq	129f4 <__assert_fail@plt+0x17c8>
   1217c:	movw	r0, #60440	; 0xec18
   12180:	movt	r0, #2
   12184:	bl	11524 <__assert_fail@plt+0x2f8>
   12188:	subs	r5, r0, #0
   1218c:	bne	120c4 <__assert_fail@plt+0xe98>
   12190:	mov	r2, #5
   12194:	movw	r1, #58240	; 0xe380
   12198:	movt	r1, #2
   1219c:	bl	1101c <dcgettext@plt>
   121a0:	ldr	r3, [r4]
   121a4:	mov	r6, r0
   121a8:	mov	r1, #8
   121ac:	mov	r0, r5
   121b0:	ldr	r2, [r3]
   121b4:	bl	1e56c <__assert_fail@plt+0xd340>
   121b8:	mov	r3, r0
   121bc:	mov	r2, r6
   121c0:	mov	r1, r5
   121c4:	mov	r0, #2
   121c8:	bl	11094 <error@plt>
   121cc:	mov	r0, r6
   121d0:	bl	1206c <__assert_fail@plt+0xe40>
   121d4:	mov	r7, r0
   121d8:	mov	r0, r6
   121dc:	bl	1206c <__assert_fail@plt+0xe40>
   121e0:	cmp	r6, #0
   121e4:	mov	r4, r0
   121e8:	bne	122b0 <__assert_fail@plt+0x1084>
   121ec:	mov	r0, r4
   121f0:	bl	115bc <__assert_fail@plt+0x390>
   121f4:	b	120c4 <__assert_fail@plt+0xe98>
   121f8:	mov	r0, r6
   121fc:	bl	1206c <__assert_fail@plt+0xe40>
   12200:	mov	r5, r0
   12204:	bl	11838 <__assert_fail@plt+0x60c>
   12208:	ldr	r0, [r5, #4]
   1220c:	bl	1c3b0 <__assert_fail@plt+0xb184>
   12210:	mov	r6, r0
   12214:	mov	r0, #16
   12218:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   1221c:	mov	r7, r0
   12220:	mov	r1, r6
   12224:	str	r4, [r0], #4
   12228:	bl	15e60 <__assert_fail@plt+0x4c34>
   1222c:	mov	r0, r5
   12230:	bl	115bc <__assert_fail@plt+0x390>
   12234:	b	120c4 <__assert_fail@plt+0xe98>
   12238:	mov	r0, r6
   1223c:	bl	1206c <__assert_fail@plt+0xe40>
   12240:	mov	r5, r0
   12244:	mov	r0, r6
   12248:	bl	1206c <__assert_fail@plt+0xe40>
   1224c:	mov	r4, r0
   12250:	mov	r0, r6
   12254:	bl	1206c <__assert_fail@plt+0xe40>
   12258:	mov	r6, r0
   1225c:	mov	r0, r5
   12260:	bl	11838 <__assert_fail@plt+0x60c>
   12264:	mov	r0, r4
   12268:	bl	11764 <__assert_fail@plt+0x538>
   1226c:	cmp	r0, #0
   12270:	beq	12284 <__assert_fail@plt+0x1058>
   12274:	mov	r0, r6
   12278:	bl	11764 <__assert_fail@plt+0x538>
   1227c:	cmp	r0, #0
   12280:	bne	126a0 <__assert_fail@plt+0x1474>
   12284:	movw	r0, #56684	; 0xdd6c
   12288:	movt	r0, #2
   1228c:	bl	11578 <__assert_fail@plt+0x34c>
   12290:	mov	r7, r0
   12294:	mov	r0, r5
   12298:	bl	115bc <__assert_fail@plt+0x390>
   1229c:	mov	r0, r4
   122a0:	bl	115bc <__assert_fail@plt+0x390>
   122a4:	mov	r0, r6
   122a8:	bl	115bc <__assert_fail@plt+0x390>
   122ac:	b	120c4 <__assert_fail@plt+0xe98>
   122b0:	mov	r1, r0
   122b4:	mov	r0, r7
   122b8:	bl	11ca4 <__assert_fail@plt+0xa78>
   122bc:	mov	r3, r0
   122c0:	mov	r0, r7
   122c4:	mov	r7, r3
   122c8:	bl	115bc <__assert_fail@plt+0x390>
   122cc:	b	121ec <__assert_fail@plt+0xfc0>
   122d0:	mov	r0, r6
   122d4:	bl	1206c <__assert_fail@plt+0xe40>
   122d8:	mov	r8, r0
   122dc:	mov	r0, r6
   122e0:	bl	1206c <__assert_fail@plt+0xe40>
   122e4:	mov	r6, r0
   122e8:	mov	r0, r8
   122ec:	bl	11838 <__assert_fail@plt+0x60c>
   122f0:	mov	r0, r6
   122f4:	bl	11838 <__assert_fail@plt+0x60c>
   122f8:	ldr	r7, [r6, #4]
   122fc:	ldrb	r3, [r7]
   12300:	cmp	r3, #0
   12304:	beq	12408 <__assert_fail@plt+0x11dc>
   12308:	ldr	r4, [r8, #4]
   1230c:	bl	11070 <__ctype_get_mb_cur_max@plt>
   12310:	cmp	r0, #1
   12314:	bls	123bc <__assert_fail@plt+0x1190>
   12318:	mov	r2, #0
   1231c:	movw	r9, #60928	; 0xee00
   12320:	movt	r9, #2
   12324:	mov	r3, r2
   12328:	strd	r2, [sp, #4]
   1232c:	strb	r5, [sp, #16]
   12330:	strd	r2, [sp, #20]
   12334:	strb	r5, [sp, #28]
   12338:	str	r4, [sp, #32]
   1233c:	ldrb	r3, [sp, #16]
   12340:	ldr	r4, [sp, #32]
   12344:	cmp	r3, #0
   12348:	addne	fp, sp, #20
   1234c:	bne	1242c <__assert_fail@plt+0x1200>
   12350:	ldrb	r3, [r4]
   12354:	lsr	r2, r3, #5
   12358:	and	r3, r3, #31
   1235c:	ldr	r2, [r9, r2, lsl #2]
   12360:	lsr	r3, r2, r3
   12364:	tst	r3, #1
   12368:	beq	12410 <__assert_fail@plt+0x11e4>
   1236c:	mov	r3, #1
   12370:	str	r3, [sp, #36]	; 0x24
   12374:	ldrb	r2, [r4]
   12378:	strb	r3, [sp, #28]
   1237c:	strb	r3, [sp, #40]	; 0x28
   12380:	cmp	r2, #0
   12384:	str	r2, [sp, #44]	; 0x2c
   12388:	beq	12408 <__assert_fail@plt+0x11dc>
   1238c:	add	r5, r5, #1
   12390:	mov	r0, r7
   12394:	ldrb	r1, [r4]
   12398:	bl	1c140 <__assert_fail@plt+0xaf14>
   1239c:	cmp	r0, #0
   123a0:	bne	123d8 <__assert_fail@plt+0x11ac>
   123a4:	mov	r3, #1
   123a8:	add	r4, r4, r3
   123ac:	mov	r3, #0
   123b0:	strb	r3, [sp, #28]
   123b4:	str	r4, [sp, #32]
   123b8:	b	1233c <__assert_fail@plt+0x1110>
   123bc:	mov	r1, r7
   123c0:	mov	r0, r4
   123c4:	bl	10f74 <strcspn@plt>
   123c8:	ldrb	r3, [r4, r0]
   123cc:	cmp	r3, #0
   123d0:	beq	12408 <__assert_fail@plt+0x11dc>
   123d4:	add	r5, r0, #1
   123d8:	mov	r0, #16
   123dc:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   123e0:	mov	r3, #0
   123e4:	mov	r7, r0
   123e8:	mov	r1, r5
   123ec:	str	r3, [r0], #4
   123f0:	bl	15e60 <__assert_fail@plt+0x4c34>
   123f4:	mov	r0, r8
   123f8:	bl	115bc <__assert_fail@plt+0x390>
   123fc:	mov	r0, r6
   12400:	bl	115bc <__assert_fail@plt+0x390>
   12404:	b	120c4 <__assert_fail@plt+0xe98>
   12408:	mov	r5, #0
   1240c:	b	123d8 <__assert_fail@plt+0x11ac>
   12410:	add	fp, sp, #20
   12414:	mov	r0, fp
   12418:	bl	10ff8 <mbsinit@plt>
   1241c:	cmp	r0, #0
   12420:	beq	129d4 <__assert_fail@plt+0x17a8>
   12424:	mov	r3, #1
   12428:	strb	r3, [sp, #16]
   1242c:	bl	11070 <__ctype_get_mb_cur_max@plt>
   12430:	mov	r1, r0
   12434:	mov	r0, r4
   12438:	bl	2c63c <__assert_fail@plt+0x1b410>
   1243c:	mov	r2, r0
   12440:	mov	r3, fp
   12444:	mov	r1, r4
   12448:	add	r0, sp, #44	; 0x2c
   1244c:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   12450:	cmn	r0, #1
   12454:	str	r0, [sp, #36]	; 0x24
   12458:	beq	12680 <__assert_fail@plt+0x1454>
   1245c:	cmn	r0, #2
   12460:	beq	1286c <__assert_fail@plt+0x1640>
   12464:	cmp	r0, #0
   12468:	beq	1288c <__assert_fail@plt+0x1660>
   1246c:	ldr	r4, [sp, #44]	; 0x2c
   12470:	mov	sl, #1
   12474:	mov	r0, fp
   12478:	strb	sl, [sp, #40]	; 0x28
   1247c:	bl	10ff8 <mbsinit@plt>
   12480:	cmp	r0, #0
   12484:	strb	sl, [sp, #28]
   12488:	movne	r2, #0
   1248c:	strbne	r2, [sp, #16]
   12490:	cmp	r4, #0
   12494:	beq	12408 <__assert_fail@plt+0x11dc>
   12498:	ldr	r3, [sp, #36]	; 0x24
   1249c:	add	r5, r5, #1
   124a0:	cmp	r3, #1
   124a4:	bne	124e0 <__assert_fail@plt+0x12b4>
   124a8:	ldr	r4, [sp, #32]
   124ac:	b	12390 <__assert_fail@plt+0x1164>
   124b0:	movw	r0, #60440	; 0xec18
   124b4:	movt	r0, #2
   124b8:	bl	11524 <__assert_fail@plt+0x2f8>
   124bc:	cmp	r0, #0
   124c0:	bne	129b0 <__assert_fail@plt+0x1784>
   124c4:	ldr	r3, [r4]
   124c8:	add	r2, r3, #4
   124cc:	ldr	r0, [r3]
   124d0:	str	r2, [r4]
   124d4:	bl	11578 <__assert_fail@plt+0x34c>
   124d8:	mov	r7, r0
   124dc:	b	120c4 <__assert_fail@plt+0xe98>
   124e0:	ldr	r2, [sp, #4]
   124e4:	mov	r3, #0
   124e8:	mov	r4, r7
   124ec:	mov	fp, #1
   124f0:	strb	r3, [sp, #72]	; 0x48
   124f4:	str	r2, [sp, #76]	; 0x4c
   124f8:	ldr	r2, [sp, #8]
   124fc:	strb	r3, [sp, #84]	; 0x54
   12500:	str	r7, [sp, #88]	; 0x58
   12504:	str	r2, [sp, #80]	; 0x50
   12508:	b	12574 <__assert_fail@plt+0x1348>
   1250c:	ldrb	r3, [r4]
   12510:	lsr	r2, r3, #5
   12514:	and	r3, r3, #31
   12518:	ldr	r2, [r9, r2, lsl #2]
   1251c:	lsr	r3, r2, r3
   12520:	tst	r3, #1
   12524:	beq	12624 <__assert_fail@plt+0x13f8>
   12528:	str	fp, [sp, #92]	; 0x5c
   1252c:	ldrb	r4, [r4]
   12530:	strb	fp, [sp, #84]	; 0x54
   12534:	strb	fp, [sp, #96]	; 0x60
   12538:	str	r4, [sp, #100]	; 0x64
   1253c:	cmp	r4, #0
   12540:	beq	128b4 <__assert_fail@plt+0x1688>
   12544:	ldrb	r3, [sp, #40]	; 0x28
   12548:	cmp	r3, #0
   1254c:	beq	125f4 <__assert_fail@plt+0x13c8>
   12550:	ldr	r3, [sp, #44]	; 0x2c
   12554:	cmp	r3, r4
   12558:	beq	123d8 <__assert_fail@plt+0x11ac>
   1255c:	ldr	r4, [sp, #88]	; 0x58
   12560:	ldr	sl, [sp, #92]	; 0x5c
   12564:	add	r4, r4, sl
   12568:	mov	r3, #0
   1256c:	strb	r3, [sp, #84]	; 0x54
   12570:	str	r4, [sp, #88]	; 0x58
   12574:	ldrb	r3, [sp, #72]	; 0x48
   12578:	cmp	r3, #0
   1257c:	beq	1250c <__assert_fail@plt+0x12e0>
   12580:	bl	11070 <__ctype_get_mb_cur_max@plt>
   12584:	mov	r1, r0
   12588:	mov	r0, r4
   1258c:	bl	2c63c <__assert_fail@plt+0x1b410>
   12590:	mov	r2, r0
   12594:	add	r3, sp, #76	; 0x4c
   12598:	mov	r1, r4
   1259c:	add	r0, sp, #100	; 0x64
   125a0:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   125a4:	cmn	r0, #1
   125a8:	str	r0, [sp, #92]	; 0x5c
   125ac:	beq	125e4 <__assert_fail@plt+0x13b8>
   125b0:	cmn	r0, #2
   125b4:	beq	1263c <__assert_fail@plt+0x1410>
   125b8:	cmp	r0, #0
   125bc:	beq	1265c <__assert_fail@plt+0x1430>
   125c0:	ldr	r4, [sp, #100]	; 0x64
   125c4:	add	r0, sp, #76	; 0x4c
   125c8:	strb	fp, [sp, #96]	; 0x60
   125cc:	bl	10ff8 <mbsinit@plt>
   125d0:	cmp	r0, #0
   125d4:	strb	fp, [sp, #84]	; 0x54
   125d8:	movne	r3, #0
   125dc:	strbne	r3, [sp, #72]	; 0x48
   125e0:	b	1253c <__assert_fail@plt+0x1310>
   125e4:	mov	r3, #0
   125e8:	strb	fp, [sp, #84]	; 0x54
   125ec:	str	fp, [sp, #92]	; 0x5c
   125f0:	strb	r3, [sp, #96]	; 0x60
   125f4:	ldr	r4, [sp, #88]	; 0x58
   125f8:	ldr	r3, [sp, #36]	; 0x24
   125fc:	ldr	sl, [sp, #92]	; 0x5c
   12600:	cmp	sl, r3
   12604:	bne	12564 <__assert_fail@plt+0x1338>
   12608:	mov	r2, sl
   1260c:	mov	r0, r4
   12610:	ldr	r1, [sp, #32]
   12614:	bl	11004 <memcmp@plt>
   12618:	cmp	r0, #0
   1261c:	beq	123d8 <__assert_fail@plt+0x11ac>
   12620:	b	12564 <__assert_fail@plt+0x1338>
   12624:	add	r0, sp, #76	; 0x4c
   12628:	bl	10ff8 <mbsinit@plt>
   1262c:	cmp	r0, #0
   12630:	beq	129d4 <__assert_fail@plt+0x17a8>
   12634:	strb	fp, [sp, #72]	; 0x48
   12638:	b	12580 <__assert_fail@plt+0x1354>
   1263c:	ldr	r4, [sp, #88]	; 0x58
   12640:	mov	r0, r4
   12644:	bl	11130 <strlen@plt>
   12648:	mov	r3, #0
   1264c:	strb	fp, [sp, #84]	; 0x54
   12650:	str	r0, [sp, #92]	; 0x5c
   12654:	strb	r3, [sp, #96]	; 0x60
   12658:	b	125f8 <__assert_fail@plt+0x13cc>
   1265c:	ldr	r4, [sp, #88]	; 0x58
   12660:	str	fp, [sp, #92]	; 0x5c
   12664:	ldrb	r3, [r4]
   12668:	cmp	r3, #0
   1266c:	bne	12a30 <__assert_fail@plt+0x1804>
   12670:	ldr	r4, [sp, #100]	; 0x64
   12674:	cmp	r4, #0
   12678:	beq	125c4 <__assert_fail@plt+0x1398>
   1267c:	bl	116e4 <__assert_fail@plt+0x4b8>
   12680:	mov	r3, #1
   12684:	mov	r2, #0
   12688:	ldr	r4, [sp, #32]
   1268c:	add	r5, r5, r3
   12690:	strb	r3, [sp, #28]
   12694:	str	r3, [sp, #36]	; 0x24
   12698:	strb	r2, [sp, #40]	; 0x28
   1269c:	b	12390 <__assert_fail@plt+0x1164>
   126a0:	add	r0, r4, #4
   126a4:	bl	1170c <__assert_fail@plt+0x4e0>
   126a8:	mov	sl, r0
   126ac:	add	r0, r6, #4
   126b0:	bl	1170c <__assert_fail@plt+0x4e0>
   126b4:	ldr	r9, [r5, #4]
   126b8:	mov	r8, r0
   126bc:	mov	r0, r9
   126c0:	bl	11130 <strlen@plt>
   126c4:	mov	r7, r0
   126c8:	bl	11070 <__ctype_get_mb_cur_max@plt>
   126cc:	cmp	r0, #1
   126d0:	movls	r0, r7
   126d4:	bls	126e0 <__assert_fail@plt+0x14b4>
   126d8:	mov	r0, r9
   126dc:	bl	1c3b0 <__assert_fail@plt+0xb184>
   126e0:	clz	r3, sl
   126e4:	lsr	r3, r3, #5
   126e8:	cmp	sl, r0
   126ec:	movls	fp, r3
   126f0:	orrhi	fp, r3, #1
   126f4:	cmp	fp, #0
   126f8:	bne	128e0 <__assert_fail@plt+0x16b4>
   126fc:	sub	r3, r8, #1
   12700:	cmn	r3, #3
   12704:	bhi	128e0 <__assert_fail@plt+0x16b4>
   12708:	rsb	r3, sl, #1
   1270c:	add	r0, r3, r0
   12710:	cmp	r0, r8
   12714:	movcc	r8, r0
   12718:	bl	11070 <__ctype_get_mb_cur_max@plt>
   1271c:	cmp	r0, #1
   12720:	beq	12988 <__assert_fail@plt+0x175c>
   12724:	add	r0, r7, #1
   12728:	mov	r7, #1
   1272c:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   12730:	mov	r3, #0
   12734:	mov	r2, #0
   12738:	stmib	sp, {r0, r5}
   1273c:	str	r4, [sp, #12]
   12740:	strb	fp, [sp, #128]	; 0x80
   12744:	strd	r2, [sp, #132]	; 0x84
   12748:	movw	r3, #60928	; 0xee00
   1274c:	movt	r3, #2
   12750:	mov	r4, r3
   12754:	strb	fp, [sp, #140]	; 0x8c
   12758:	mov	fp, r0
   1275c:	str	r9, [sp, #144]	; 0x90
   12760:	b	127e4 <__assert_fail@plt+0x15b8>
   12764:	ldrb	r3, [r5]
   12768:	lsr	r2, r3, #5
   1276c:	and	r3, r3, #31
   12770:	ldr	r2, [r4, r2, lsl #2]
   12774:	lsr	r3, r2, r3
   12778:	tst	r3, #1
   1277c:	beq	128c0 <__assert_fail@plt+0x1694>
   12780:	mov	r3, #1
   12784:	str	r3, [sp, #148]	; 0x94
   12788:	ldrb	r5, [r5]
   1278c:	strb	r3, [sp, #140]	; 0x8c
   12790:	strb	r3, [sp, #152]	; 0x98
   12794:	str	r5, [sp, #156]	; 0x9c
   12798:	cmp	r5, #0
   1279c:	beq	12970 <__assert_fail@plt+0x1744>
   127a0:	cmp	r8, #0
   127a4:	beq	12970 <__assert_fail@plt+0x1744>
   127a8:	cmp	sl, r7
   127ac:	ldr	r5, [sp, #144]	; 0x90
   127b0:	ldr	r9, [sp, #148]	; 0x94
   127b4:	bhi	127d0 <__assert_fail@plt+0x15a4>
   127b8:	mov	r0, fp
   127bc:	mov	r2, r9
   127c0:	mov	r1, r5
   127c4:	sub	r8, r8, #1
   127c8:	bl	11100 <mempcpy@plt>
   127cc:	mov	fp, r0
   127d0:	add	r5, r5, r9
   127d4:	mov	r3, #0
   127d8:	add	r7, r7, #1
   127dc:	strb	r3, [sp, #140]	; 0x8c
   127e0:	str	r5, [sp, #144]	; 0x90
   127e4:	ldrb	r3, [sp, #128]	; 0x80
   127e8:	ldr	r5, [sp, #144]	; 0x90
   127ec:	cmp	r3, #0
   127f0:	addne	r9, sp, #132	; 0x84
   127f4:	beq	12764 <__assert_fail@plt+0x1538>
   127f8:	bl	11070 <__ctype_get_mb_cur_max@plt>
   127fc:	mov	r1, r0
   12800:	mov	r0, r5
   12804:	bl	2c63c <__assert_fail@plt+0x1b410>
   12808:	mov	r2, r0
   1280c:	mov	r3, r9
   12810:	mov	r1, r5
   12814:	add	r0, sp, #156	; 0x9c
   12818:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   1281c:	cmn	r0, #1
   12820:	str	r0, [sp, #148]	; 0x94
   12824:	beq	1290c <__assert_fail@plt+0x16e0>
   12828:	cmn	r0, #2
   1282c:	beq	12928 <__assert_fail@plt+0x16fc>
   12830:	cmp	r0, #0
   12834:	beq	12948 <__assert_fail@plt+0x171c>
   12838:	ldr	r5, [sp, #156]	; 0x9c
   1283c:	mov	r0, r9
   12840:	mov	r9, #1
   12844:	strb	r9, [sp, #152]	; 0x98
   12848:	bl	10ff8 <mbsinit@plt>
   1284c:	cmp	r0, #0
   12850:	strbeq	r9, [sp, #140]	; 0x8c
   12854:	beq	12798 <__assert_fail@plt+0x156c>
   12858:	mov	r3, #0
   1285c:	mov	r2, #1
   12860:	strb	r3, [sp, #128]	; 0x80
   12864:	strb	r2, [sp, #140]	; 0x8c
   12868:	b	12798 <__assert_fail@plt+0x156c>
   1286c:	ldr	r0, [sp, #32]
   12870:	bl	11130 <strlen@plt>
   12874:	mov	r3, #0
   12878:	mov	r2, #1
   1287c:	strb	r2, [sp, #28]
   12880:	str	r0, [sp, #36]	; 0x24
   12884:	strb	r3, [sp, #40]	; 0x28
   12888:	b	12498 <__assert_fail@plt+0x126c>
   1288c:	ldr	r4, [sp, #32]
   12890:	mov	r3, #1
   12894:	str	r3, [sp, #36]	; 0x24
   12898:	ldrb	r3, [r4]
   1289c:	cmp	r3, #0
   128a0:	bne	12a30 <__assert_fail@plt+0x1804>
   128a4:	ldr	r4, [sp, #44]	; 0x2c
   128a8:	cmp	r4, #0
   128ac:	beq	12470 <__assert_fail@plt+0x1244>
   128b0:	b	1267c <__assert_fail@plt+0x1450>
   128b4:	ldr	r4, [sp, #32]
   128b8:	ldr	r3, [sp, #36]	; 0x24
   128bc:	b	123a8 <__assert_fail@plt+0x117c>
   128c0:	add	r9, sp, #132	; 0x84
   128c4:	mov	r0, r9
   128c8:	bl	10ff8 <mbsinit@plt>
   128cc:	cmp	r0, #0
   128d0:	beq	129d4 <__assert_fail@plt+0x17a8>
   128d4:	mov	r3, #1
   128d8:	strb	r3, [sp, #128]	; 0x80
   128dc:	b	127f8 <__assert_fail@plt+0x15cc>
   128e0:	movw	r0, #56684	; 0xdd6c
   128e4:	movt	r0, #2
   128e8:	bl	2d298 <__assert_fail@plt+0x1c06c>
   128ec:	str	r0, [sp, #4]
   128f0:	ldr	r8, [sp, #4]
   128f4:	mov	r0, r8
   128f8:	bl	11578 <__assert_fail@plt+0x34c>
   128fc:	mov	r7, r0
   12900:	mov	r0, r8
   12904:	bl	13254 <__assert_fail@plt+0x2028>
   12908:	b	12294 <__assert_fail@plt+0x1068>
   1290c:	mov	r2, #1
   12910:	mov	r3, #0
   12914:	strb	r2, [sp, #140]	; 0x8c
   12918:	mov	r2, #1
   1291c:	str	r2, [sp, #148]	; 0x94
   12920:	strb	r3, [sp, #152]	; 0x98
   12924:	b	127a0 <__assert_fail@plt+0x1574>
   12928:	ldr	r0, [sp, #144]	; 0x90
   1292c:	bl	11130 <strlen@plt>
   12930:	mov	r3, #0
   12934:	mov	r2, #1
   12938:	strb	r2, [sp, #140]	; 0x8c
   1293c:	str	r0, [sp, #148]	; 0x94
   12940:	strb	r3, [sp, #152]	; 0x98
   12944:	b	127a0 <__assert_fail@plt+0x1574>
   12948:	ldr	r3, [sp, #144]	; 0x90
   1294c:	mov	r2, #1
   12950:	str	r2, [sp, #148]	; 0x94
   12954:	ldrb	r3, [r3]
   12958:	cmp	r3, #0
   1295c:	bne	12a30 <__assert_fail@plt+0x1804>
   12960:	ldr	r5, [sp, #156]	; 0x9c
   12964:	cmp	r5, #0
   12968:	beq	1283c <__assert_fail@plt+0x1610>
   1296c:	b	1267c <__assert_fail@plt+0x1450>
   12970:	ldr	r5, [sp, #8]
   12974:	mov	r2, fp
   12978:	ldr	r4, [sp, #12]
   1297c:	mov	r3, #0
   12980:	strb	r3, [r2]
   12984:	b	128f0 <__assert_fail@plt+0x16c4>
   12988:	add	r0, r8, #1
   1298c:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   12990:	sub	r1, sl, #1
   12994:	mov	r2, r8
   12998:	str	r0, [sp, #4]
   1299c:	add	r1, r9, r1
   129a0:	bl	11100 <mempcpy@plt>
   129a4:	mov	r2, r0
   129a8:	b	1297c <__assert_fail@plt+0x1750>
   129ac:	bl	115fc <__assert_fail@plt+0x3d0>
   129b0:	mov	r2, #5
   129b4:	movw	r1, #58284	; 0xe3ac
   129b8:	movt	r1, #2
   129bc:	mov	r0, r5
   129c0:	bl	1101c <dcgettext@plt>
   129c4:	mov	r2, r0
   129c8:	mov	r1, r5
   129cc:	mov	r0, #2
   129d0:	bl	11094 <error@plt>
   129d4:	movw	r3, #55660	; 0xd96c
   129d8:	movt	r3, #2
   129dc:	movw	r1, #55776	; 0xd9e0
   129e0:	movt	r1, #2
   129e4:	movw	r0, #58076	; 0xe2dc
   129e8:	movt	r0, #2
   129ec:	mov	r2, #143	; 0x8f
   129f0:	bl	1122c <__assert_fail@plt>
   129f4:	mov	r2, #5
   129f8:	movw	r1, #58200	; 0xe358
   129fc:	movt	r1, #2
   12a00:	mov	r0, r5
   12a04:	bl	1101c <dcgettext@plt>
   12a08:	mov	r4, r0
   12a0c:	mov	r1, #8
   12a10:	ldr	r2, [r6, #-4]
   12a14:	mov	r0, r5
   12a18:	bl	1e56c <__assert_fail@plt+0xd340>
   12a1c:	mov	r3, r0
   12a20:	mov	r2, r4
   12a24:	mov	r1, r5
   12a28:	mov	r0, #2
   12a2c:	bl	11094 <error@plt>
   12a30:	movw	r3, #55660	; 0xd96c
   12a34:	movt	r3, #2
   12a38:	movw	r1, #55776	; 0xd9e0
   12a3c:	movt	r1, #2
   12a40:	movw	r0, #58100	; 0xe2f4
   12a44:	movt	r0, #2
   12a48:	mov	r2, #171	; 0xab
   12a4c:	bl	1122c <__assert_fail@plt>
   12a50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12a54:	mov	r5, r0
   12a58:	strd	r6, [sp, #8]
   12a5c:	movw	r6, #58316	; 0xe3cc
   12a60:	movt	r6, #2
   12a64:	str	r8, [sp, #16]
   12a68:	str	lr, [sp, #20]
   12a6c:	bl	1206c <__assert_fail@plt+0xe40>
   12a70:	mov	r7, r0
   12a74:	b	12a80 <__assert_fail@plt+0x1854>
   12a78:	mov	r0, r4
   12a7c:	bl	115bc <__assert_fail@plt+0x390>
   12a80:	mov	r0, r6
   12a84:	bl	11524 <__assert_fail@plt+0x2f8>
   12a88:	cmp	r0, #0
   12a8c:	mov	r0, r5
   12a90:	beq	12ac4 <__assert_fail@plt+0x1898>
   12a94:	bl	1206c <__assert_fail@plt+0xe40>
   12a98:	cmp	r5, #0
   12a9c:	mov	r4, r0
   12aa0:	beq	12a78 <__assert_fail@plt+0x184c>
   12aa4:	mov	r1, r0
   12aa8:	mov	r0, r7
   12aac:	bl	11ca4 <__assert_fail@plt+0xa78>
   12ab0:	mov	r3, r0
   12ab4:	mov	r0, r7
   12ab8:	mov	r7, r3
   12abc:	bl	115bc <__assert_fail@plt+0x390>
   12ac0:	b	12a78 <__assert_fail@plt+0x184c>
   12ac4:	mov	r0, r7
   12ac8:	ldrd	r4, [sp]
   12acc:	ldrd	r6, [sp, #8]
   12ad0:	ldr	r8, [sp, #16]
   12ad4:	add	sp, sp, #20
   12ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   12adc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ae0:	mov	r5, r0
   12ae4:	strd	r6, [sp, #8]
   12ae8:	movw	r6, #58320	; 0xe3d0
   12aec:	movt	r6, #2
   12af0:	strd	r8, [sp, #16]
   12af4:	movw	r8, #58324	; 0xe3d4
   12af8:	movt	r8, #2
   12afc:	strd	sl, [sp, #24]
   12b00:	movw	r9, #58328	; 0xe3d8
   12b04:	movt	r9, #2
   12b08:	str	lr, [sp, #32]
   12b0c:	sub	sp, sp, #12
   12b10:	bl	12a50 <__assert_fail@plt+0x1824>
   12b14:	mov	r7, r0
   12b18:	b	12b90 <__assert_fail@plt+0x1964>
   12b1c:	mov	r0, r8
   12b20:	bl	11524 <__assert_fail@plt+0x2f8>
   12b24:	cmp	r0, #0
   12b28:	movne	sl, #1
   12b2c:	beq	12ba8 <__assert_fail@plt+0x197c>
   12b30:	mov	r0, r5
   12b34:	bl	12a50 <__assert_fail@plt+0x1824>
   12b38:	cmp	r5, #0
   12b3c:	mov	r4, r0
   12b40:	beq	12b88 <__assert_fail@plt+0x195c>
   12b44:	mov	r0, r7
   12b48:	bl	11764 <__assert_fail@plt+0x538>
   12b4c:	cmp	r0, #0
   12b50:	beq	12c0c <__assert_fail@plt+0x19e0>
   12b54:	mov	r0, r4
   12b58:	bl	11764 <__assert_fail@plt+0x538>
   12b5c:	cmp	r0, #0
   12b60:	beq	12c0c <__assert_fail@plt+0x19e0>
   12b64:	cmp	sl, #0
   12b68:	add	fp, r4, #4
   12b6c:	movweq	r3, #29120	; 0x71c0
   12b70:	movteq	r3, #1
   12b74:	bne	12bc0 <__assert_fail@plt+0x1994>
   12b78:	add	r1, r7, #4
   12b7c:	mov	r2, fp
   12b80:	mov	r0, r1
   12b84:	blx	r3
   12b88:	mov	r0, r4
   12b8c:	bl	115bc <__assert_fail@plt+0x390>
   12b90:	mov	r0, r6
   12b94:	bl	11524 <__assert_fail@plt+0x2f8>
   12b98:	cmp	r0, #0
   12b9c:	beq	12b1c <__assert_fail@plt+0x18f0>
   12ba0:	mov	sl, #0
   12ba4:	b	12b30 <__assert_fail@plt+0x1904>
   12ba8:	mov	r0, r9
   12bac:	bl	11524 <__assert_fail@plt+0x2f8>
   12bb0:	cmp	r0, #0
   12bb4:	beq	12bec <__assert_fail@plt+0x19c0>
   12bb8:	mov	sl, #2
   12bbc:	b	12b30 <__assert_fail@plt+0x1904>
   12bc0:	mov	r0, fp
   12bc4:	bl	16488 <__assert_fail@plt+0x525c>
   12bc8:	subs	r3, r0, #0
   12bcc:	beq	12c30 <__assert_fail@plt+0x1a04>
   12bd0:	movw	r2, #30808	; 0x7858
   12bd4:	movt	r2, #1
   12bd8:	cmp	sl, #1
   12bdc:	movw	r3, #30936	; 0x78d8
   12be0:	movt	r3, #1
   12be4:	moveq	r3, r2
   12be8:	b	12b78 <__assert_fail@plt+0x194c>
   12bec:	mov	r0, r7
   12bf0:	add	sp, sp, #12
   12bf4:	ldrd	r4, [sp]
   12bf8:	ldrd	r6, [sp, #8]
   12bfc:	ldrd	r8, [sp, #16]
   12c00:	ldrd	sl, [sp, #24]
   12c04:	add	sp, sp, #32
   12c08:	pop	{pc}		; (ldr pc, [sp], #4)
   12c0c:	mov	r2, #5
   12c10:	movw	r1, #58332	; 0xe3dc
   12c14:	movt	r1, #2
   12c18:	mov	r0, #0
   12c1c:	bl	1101c <dcgettext@plt>
   12c20:	mov	r2, r0
   12c24:	mov	r1, #0
   12c28:	mov	r0, #2
   12c2c:	bl	11094 <error@plt>
   12c30:	mov	r2, #5
   12c34:	movw	r1, #58356	; 0xe3f4
   12c38:	movt	r1, #2
   12c3c:	str	r3, [sp, #4]
   12c40:	bl	1101c <dcgettext@plt>
   12c44:	ldr	r3, [sp, #4]
   12c48:	mov	r2, r0
   12c4c:	mov	r0, #2
   12c50:	mov	r1, r3
   12c54:	bl	11094 <error@plt>
   12c58:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12c5c:	mov	r5, r0
   12c60:	strd	r6, [sp, #8]
   12c64:	movw	r6, #58160	; 0xe330
   12c68:	movt	r6, #2
   12c6c:	strd	r8, [sp, #16]
   12c70:	movw	r8, #58376	; 0xe408
   12c74:	movt	r8, #2
   12c78:	str	sl, [sp, #24]
   12c7c:	movw	r9, #26488	; 0x6778
   12c80:	movt	r9, #1
   12c84:	str	lr, [sp, #28]
   12c88:	bl	12adc <__assert_fail@plt+0x18b0>
   12c8c:	mov	r7, r0
   12c90:	b	12d04 <__assert_fail@plt+0x1ad8>
   12c94:	mov	r0, r8
   12c98:	bl	11524 <__assert_fail@plt+0x2f8>
   12c9c:	cmp	r0, #0
   12ca0:	beq	12d1c <__assert_fail@plt+0x1af0>
   12ca4:	mov	sl, #1
   12ca8:	mov	r0, r5
   12cac:	bl	12adc <__assert_fail@plt+0x18b0>
   12cb0:	cmp	r5, #0
   12cb4:	mov	r4, r0
   12cb8:	beq	12cfc <__assert_fail@plt+0x1ad0>
   12cbc:	mov	r0, r7
   12cc0:	bl	11764 <__assert_fail@plt+0x538>
   12cc4:	cmp	r0, #0
   12cc8:	beq	12d38 <__assert_fail@plt+0x1b0c>
   12ccc:	mov	r0, r4
   12cd0:	bl	11764 <__assert_fail@plt+0x538>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12d38 <__assert_fail@plt+0x1b0c>
   12cdc:	add	r1, r7, #4
   12ce0:	cmp	sl, #0
   12ce4:	movw	r3, #27472	; 0x6b50
   12ce8:	movt	r3, #1
   12cec:	mov	r0, r1
   12cf0:	moveq	r3, r9
   12cf4:	add	r2, r4, #4
   12cf8:	blx	r3
   12cfc:	mov	r0, r4
   12d00:	bl	115bc <__assert_fail@plt+0x390>
   12d04:	mov	r0, r6
   12d08:	bl	11524 <__assert_fail@plt+0x2f8>
   12d0c:	cmp	r0, #0
   12d10:	beq	12c94 <__assert_fail@plt+0x1a68>
   12d14:	mov	sl, #0
   12d18:	b	12ca8 <__assert_fail@plt+0x1a7c>
   12d1c:	mov	r0, r7
   12d20:	ldrd	r4, [sp]
   12d24:	ldrd	r6, [sp, #8]
   12d28:	ldrd	r8, [sp, #16]
   12d2c:	ldr	sl, [sp, #24]
   12d30:	add	sp, sp, #28
   12d34:	pop	{pc}		; (ldr pc, [sp], #4)
   12d38:	mov	r2, #5
   12d3c:	movw	r1, #58332	; 0xe3dc
   12d40:	movt	r1, #2
   12d44:	mov	r0, #0
   12d48:	bl	1101c <dcgettext@plt>
   12d4c:	mov	r2, r0
   12d50:	mov	r1, #0
   12d54:	mov	r0, #2
   12d58:	bl	11094 <error@plt>
   12d5c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12d60:	mov	r5, r0
   12d64:	strd	r6, [sp, #8]
   12d68:	strd	r8, [sp, #16]
   12d6c:	movw	r8, #58380	; 0xe40c
   12d70:	movt	r8, #2
   12d74:	str	sl, [sp, #24]
   12d78:	movw	r9, #58384	; 0xe410
   12d7c:	movt	r9, #2
   12d80:	str	lr, [sp, #28]
   12d84:	movw	sl, #58388	; 0xe414
   12d88:	movt	sl, #2
   12d8c:	bl	12c58 <__assert_fail@plt+0x1a2c>
   12d90:	mov	r4, r0
   12d94:	b	12df0 <__assert_fail@plt+0x1bc4>
   12d98:	mov	r0, r9
   12d9c:	bl	11524 <__assert_fail@plt+0x2f8>
   12da0:	cmp	r0, #0
   12da4:	movne	r7, #1
   12da8:	beq	12ed0 <__assert_fail@plt+0x1ca4>
   12dac:	mov	r0, r5
   12db0:	bl	12c58 <__assert_fail@plt+0x1a2c>
   12db4:	cmp	r5, #0
   12db8:	mov	r6, r0
   12dbc:	moveq	r7, r5
   12dc0:	bne	12e08 <__assert_fail@plt+0x1bdc>
   12dc4:	mov	r0, r4
   12dc8:	bl	115bc <__assert_fail@plt+0x390>
   12dcc:	mov	r0, r6
   12dd0:	bl	115bc <__assert_fail@plt+0x390>
   12dd4:	mov	r0, #16
   12dd8:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   12ddc:	mov	r3, #0
   12de0:	mov	r4, r0
   12de4:	mov	r1, r7
   12de8:	str	r3, [r0], #4
   12dec:	bl	15e60 <__assert_fail@plt+0x4c34>
   12df0:	mov	r0, r8
   12df4:	bl	11524 <__assert_fail@plt+0x2f8>
   12df8:	cmp	r0, #0
   12dfc:	beq	12d98 <__assert_fail@plt+0x1b6c>
   12e00:	mov	r7, #0
   12e04:	b	12dac <__assert_fail@plt+0x1b80>
   12e08:	mov	r0, r4
   12e0c:	bl	11838 <__assert_fail@plt+0x60c>
   12e10:	mov	r0, r6
   12e14:	bl	11838 <__assert_fail@plt+0x60c>
   12e18:	ldr	r0, [r4, #4]
   12e1c:	ldrb	r2, [r0]
   12e20:	sub	r2, r2, #45	; 0x2d
   12e24:	clz	r2, r2
   12e28:	lsr	r2, r2, #5
   12e2c:	ldrb	r3, [r0, r2]
   12e30:	add	r2, r0, r2
   12e34:	b	12e44 <__assert_fail@plt+0x1c18>
   12e38:	ldrb	r3, [r2, #1]!
   12e3c:	cmp	r3, #0
   12e40:	beq	12ee8 <__assert_fail@plt+0x1cbc>
   12e44:	sub	r3, r3, #48	; 0x30
   12e48:	cmp	r3, #9
   12e4c:	bls	12e38 <__assert_fail@plt+0x1c0c>
   12e50:	bl	11148 <__errno_location@plt>
   12e54:	mov	r3, #0
   12e58:	str	r3, [r0]
   12e5c:	ldr	r0, [r4, #4]
   12e60:	ldr	r1, [r6, #4]
   12e64:	bl	110a0 <strcoll@plt>
   12e68:	sub	r7, r7, #1
   12e6c:	cmp	r7, #4
   12e70:	ldrls	pc, [pc, r7, lsl #2]
   12e74:	b	12fa8 <__assert_fail@plt+0x1d7c>
   12e78:			; <UNDEFINED> instruction: 0x00012eb0
   12e7c:	andeq	r2, r1, r4, lsr #29
   12e80:	muleq	r1, r8, lr
   12e84:	andeq	r2, r1, ip, lsl #29
   12e88:	andeq	r2, r1, r0, asr #29
   12e8c:	mvn	r7, r0
   12e90:	lsr	r7, r7, #31
   12e94:	b	12dc4 <__assert_fail@plt+0x1b98>
   12e98:	adds	r7, r0, #0
   12e9c:	movne	r7, #1
   12ea0:	b	12dc4 <__assert_fail@plt+0x1b98>
   12ea4:	clz	r7, r0
   12ea8:	lsr	r7, r7, #5
   12eac:	b	12dc4 <__assert_fail@plt+0x1b98>
   12eb0:	cmp	r0, #0
   12eb4:	movgt	r7, #0
   12eb8:	movle	r7, #1
   12ebc:	b	12dc4 <__assert_fail@plt+0x1b98>
   12ec0:	cmp	r0, #0
   12ec4:	movle	r7, #0
   12ec8:	movgt	r7, #1
   12ecc:	b	12dc4 <__assert_fail@plt+0x1b98>
   12ed0:	mov	r0, sl
   12ed4:	bl	11524 <__assert_fail@plt+0x2f8>
   12ed8:	cmp	r0, #0
   12edc:	beq	12f24 <__assert_fail@plt+0x1cf8>
   12ee0:	mov	r7, #2
   12ee4:	b	12dac <__assert_fail@plt+0x1b80>
   12ee8:	ldr	r1, [r6, #4]
   12eec:	ldrb	r3, [r1]
   12ef0:	sub	r3, r3, #45	; 0x2d
   12ef4:	clz	r3, r3
   12ef8:	lsr	r3, r3, #5
   12efc:	add	r2, r1, r3
   12f00:	ldrb	r3, [r1, r3]
   12f04:	b	12f14 <__assert_fail@plt+0x1ce8>
   12f08:	ldrb	r3, [r2, #1]!
   12f0c:	cmp	r3, #0
   12f10:	beq	12f84 <__assert_fail@plt+0x1d58>
   12f14:	sub	r3, r3, #48	; 0x30
   12f18:	cmp	r3, #9
   12f1c:	bls	12f08 <__assert_fail@plt+0x1cdc>
   12f20:	b	12e50 <__assert_fail@plt+0x1c24>
   12f24:	movw	r0, #58392	; 0xe418
   12f28:	movt	r0, #2
   12f2c:	bl	11524 <__assert_fail@plt+0x2f8>
   12f30:	cmp	r0, #0
   12f34:	bne	12ee0 <__assert_fail@plt+0x1cb4>
   12f38:	movw	r0, #58396	; 0xe41c
   12f3c:	movt	r0, #2
   12f40:	bl	11524 <__assert_fail@plt+0x2f8>
   12f44:	cmp	r0, #0
   12f48:	movne	r7, #3
   12f4c:	bne	12dac <__assert_fail@plt+0x1b80>
   12f50:	movw	r0, #58400	; 0xe420
   12f54:	movt	r0, #2
   12f58:	bl	11524 <__assert_fail@plt+0x2f8>
   12f5c:	cmp	r0, #0
   12f60:	movne	r7, #4
   12f64:	bne	12dac <__assert_fail@plt+0x1b80>
   12f68:	movw	r0, #58404	; 0xe424
   12f6c:	movt	r0, #2
   12f70:	bl	11524 <__assert_fail@plt+0x2f8>
   12f74:	cmp	r0, #0
   12f78:	beq	12f8c <__assert_fail@plt+0x1d60>
   12f7c:	mov	r7, #5
   12f80:	b	12dac <__assert_fail@plt+0x1b80>
   12f84:	bl	2c67c <__assert_fail@plt+0x1b450>
   12f88:	b	12e68 <__assert_fail@plt+0x1c3c>
   12f8c:	mov	r0, r4
   12f90:	ldrd	r4, [sp]
   12f94:	ldrd	r6, [sp, #8]
   12f98:	ldrd	r8, [sp, #16]
   12f9c:	ldr	sl, [sp, #24]
   12fa0:	add	sp, sp, #28
   12fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fa8:	lsr	r7, r0, #31
   12fac:	b	12dc4 <__assert_fail@plt+0x1b98>
   12fb0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12fb4:	strd	r6, [sp, #8]
   12fb8:	mov	r6, r0
   12fbc:	movw	r7, #58408	; 0xe428
   12fc0:	movt	r7, #2
   12fc4:	str	r8, [sp, #16]
   12fc8:	mov	r8, #0
   12fcc:	str	lr, [sp, #20]
   12fd0:	bl	12d5c <__assert_fail@plt+0x1b30>
   12fd4:	mov	r4, r0
   12fd8:	mov	r0, r7
   12fdc:	bl	11524 <__assert_fail@plt+0x2f8>
   12fe0:	cmp	r0, #0
   12fe4:	mov	r3, r6
   12fe8:	mov	r0, r4
   12fec:	beq	13068 <__assert_fail@plt+0x1e3c>
   12ff0:	cmp	r6, #0
   12ff4:	beq	13004 <__assert_fail@plt+0x1dd8>
   12ff8:	bl	1164c <__assert_fail@plt+0x420>
   12ffc:	eor	r0, r0, #1
   13000:	uxtb	r3, r0
   13004:	mov	r0, r3
   13008:	bl	12d5c <__assert_fail@plt+0x1b30>
   1300c:	mov	r5, r0
   13010:	mov	r0, r4
   13014:	bl	1164c <__assert_fail@plt+0x420>
   13018:	cmp	r0, #0
   1301c:	mov	r0, r5
   13020:	bne	13030 <__assert_fail@plt+0x1e04>
   13024:	bl	1164c <__assert_fail@plt+0x420>
   13028:	cmp	r0, #0
   1302c:	beq	1305c <__assert_fail@plt+0x1e30>
   13030:	mov	r0, r4
   13034:	bl	115bc <__assert_fail@plt+0x390>
   13038:	mov	r0, r5
   1303c:	bl	115bc <__assert_fail@plt+0x390>
   13040:	mov	r0, #16
   13044:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   13048:	mov	r4, r0
   1304c:	mov	r1, #0
   13050:	str	r8, [r0], #4
   13054:	bl	15e60 <__assert_fail@plt+0x4c34>
   13058:	b	12fd8 <__assert_fail@plt+0x1dac>
   1305c:	mov	r0, r5
   13060:	bl	115bc <__assert_fail@plt+0x390>
   13064:	b	12fd8 <__assert_fail@plt+0x1dac>
   13068:	ldrd	r4, [sp]
   1306c:	ldrd	r6, [sp, #8]
   13070:	ldr	r8, [sp, #16]
   13074:	add	sp, sp, #20
   13078:	pop	{pc}		; (ldr pc, [sp], #4)
   1307c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13080:	mov	r5, r0
   13084:	strd	r6, [sp, #8]
   13088:	movw	r7, #58412	; 0xe42c
   1308c:	movt	r7, #2
   13090:	str	r8, [sp, #16]
   13094:	mov	r8, #0
   13098:	str	lr, [sp, #20]
   1309c:	bl	12fb0 <__assert_fail@plt+0x1d84>
   130a0:	mov	r4, r0
   130a4:	mov	r0, r7
   130a8:	bl	11524 <__assert_fail@plt+0x2f8>
   130ac:	cmp	r0, #0
   130b0:	mov	r3, r5
   130b4:	mov	r0, r4
   130b8:	beq	13134 <__assert_fail@plt+0x1f08>
   130bc:	cmp	r5, #0
   130c0:	beq	130cc <__assert_fail@plt+0x1ea0>
   130c4:	bl	1164c <__assert_fail@plt+0x420>
   130c8:	mov	r3, r0
   130cc:	mov	r0, r3
   130d0:	bl	12fb0 <__assert_fail@plt+0x1d84>
   130d4:	mov	r6, r0
   130d8:	mov	r0, r4
   130dc:	bl	1164c <__assert_fail@plt+0x420>
   130e0:	cmp	r0, #0
   130e4:	mov	r0, r4
   130e8:	beq	13128 <__assert_fail@plt+0x1efc>
   130ec:	bl	115bc <__assert_fail@plt+0x390>
   130f0:	mov	r0, r6
   130f4:	mov	r4, r6
   130f8:	bl	1164c <__assert_fail@plt+0x420>
   130fc:	cmp	r0, #0
   13100:	beq	130a4 <__assert_fail@plt+0x1e78>
   13104:	mov	r0, r6
   13108:	bl	115bc <__assert_fail@plt+0x390>
   1310c:	mov	r0, #16
   13110:	bl	2ce48 <__assert_fail@plt+0x1bc1c>
   13114:	mov	r4, r0
   13118:	mov	r1, #0
   1311c:	str	r8, [r0], #4
   13120:	bl	15e60 <__assert_fail@plt+0x4c34>
   13124:	b	130a4 <__assert_fail@plt+0x1e78>
   13128:	mov	r0, r6
   1312c:	bl	115bc <__assert_fail@plt+0x390>
   13130:	b	130a4 <__assert_fail@plt+0x1e78>
   13134:	ldrd	r4, [sp]
   13138:	ldrd	r6, [sp, #8]
   1313c:	ldr	r8, [sp, #16]
   13140:	add	sp, sp, #20
   13144:	pop	{pc}		; (ldr pc, [sp], #4)
   13148:	movw	r3, #404	; 0x194
   1314c:	movt	r3, #4
   13150:	str	r0, [r3]
   13154:	bx	lr
   13158:	movw	r3, #404	; 0x194
   1315c:	movt	r3, #4
   13160:	strb	r0, [r3, #4]
   13164:	bx	lr
   13168:	movw	r3, #388	; 0x184
   1316c:	movt	r3, #4
   13170:	strd	r4, [sp, #-16]!
   13174:	ldr	r0, [r3]
   13178:	str	r6, [sp, #8]
   1317c:	str	lr, [sp, #12]
   13180:	sub	sp, sp, #8
   13184:	bl	2d40c <__assert_fail@plt+0x1c1e0>
   13188:	cmp	r0, #0
   1318c:	beq	131b8 <__assert_fail@plt+0x1f8c>
   13190:	movw	r4, #404	; 0x194
   13194:	movt	r4, #4
   13198:	ldrb	r6, [r4, #4]
   1319c:	bl	11148 <__errno_location@plt>
   131a0:	mov	r5, r0
   131a4:	cmp	r6, #0
   131a8:	beq	131e4 <__assert_fail@plt+0x1fb8>
   131ac:	ldr	r3, [r0]
   131b0:	cmp	r3, #32
   131b4:	bne	131e4 <__assert_fail@plt+0x1fb8>
   131b8:	movw	r3, #384	; 0x180
   131bc:	movt	r3, #4
   131c0:	ldr	r0, [r3]
   131c4:	bl	2d40c <__assert_fail@plt+0x1c1e0>
   131c8:	cmp	r0, #0
   131cc:	bne	1322c <__assert_fail@plt+0x2000>
   131d0:	add	sp, sp, #8
   131d4:	ldrd	r4, [sp]
   131d8:	ldr	r6, [sp, #8]
   131dc:	add	sp, sp, #12
   131e0:	pop	{pc}		; (ldr pc, [sp], #4)
   131e4:	movw	r1, #58664	; 0xe528
   131e8:	movt	r1, #2
   131ec:	mov	r2, #5
   131f0:	mov	r0, #0
   131f4:	bl	1101c <dcgettext@plt>
   131f8:	mov	r6, r0
   131fc:	ldr	r0, [r4]
   13200:	cmp	r0, #0
   13204:	beq	1323c <__assert_fail@plt+0x2010>
   13208:	ldr	r4, [r5]
   1320c:	bl	1e6c0 <__assert_fail@plt+0xd494>
   13210:	mov	r3, r0
   13214:	movw	r2, #58676	; 0xe534
   13218:	movt	r2, #2
   1321c:	mov	r0, #0
   13220:	str	r6, [sp]
   13224:	mov	r1, r4
   13228:	bl	11094 <error@plt>
   1322c:	movw	r3, #288	; 0x120
   13230:	movt	r3, #4
   13234:	ldr	r0, [r3]
   13238:	bl	10fc8 <_exit@plt>
   1323c:	mov	r3, r6
   13240:	movw	r2, #58680	; 0xe538
   13244:	movt	r2, #2
   13248:	ldr	r1, [r5]
   1324c:	bl	11094 <error@plt>
   13250:	b	1322c <__assert_fail@plt+0x2000>
   13254:	strd	r4, [sp, #-12]!
   13258:	mov	r5, r0
   1325c:	str	lr, [sp, #8]
   13260:	sub	sp, sp, #12
   13264:	bl	11148 <__errno_location@plt>
   13268:	mov	r4, r0
   1326c:	mov	r2, #0
   13270:	ldr	r3, [r4]
   13274:	mov	r0, r5
   13278:	str	r2, [r4]
   1327c:	str	r3, [sp]
   13280:	str	r3, [sp, #4]
   13284:	bl	10fb0 <free@plt>
   13288:	ldr	r3, [r4]
   1328c:	add	r2, sp, #8
   13290:	clz	r3, r3
   13294:	lsr	r3, r3, #5
   13298:	add	r3, r2, r3, lsl #2
   1329c:	ldr	r3, [r3, #-8]
   132a0:	str	r3, [r4]
   132a4:	add	sp, sp, #12
   132a8:	ldrd	r4, [sp]
   132ac:	add	sp, sp, #8
   132b0:	pop	{pc}		; (ldr pc, [sp], #4)
   132b4:	andeq	r0, r0, r0
   132b8:	cmp	r0, #16
   132bc:	beq	13338 <__assert_fail@plt+0x210c>
   132c0:	bls	132e8 <__assert_fail@plt+0x20bc>
   132c4:	cmp	r0, #64	; 0x40
   132c8:	beq	13330 <__assert_fail@plt+0x2104>
   132cc:	bls	13308 <__assert_fail@plt+0x20dc>
   132d0:	cmp	r0, #128	; 0x80
   132d4:	beq	13318 <__assert_fail@plt+0x20ec>
   132d8:	cmp	r0, #256	; 0x100
   132dc:	moveq	r0, #8
   132e0:	movne	r0, #0
   132e4:	bx	lr
   132e8:	cmp	r0, #4
   132ec:	beq	13328 <__assert_fail@plt+0x20fc>
   132f0:	cmp	r0, #8
   132f4:	beq	13320 <__assert_fail@plt+0x20f4>
   132f8:	sub	r0, r0, #2
   132fc:	clz	r0, r0
   13300:	lsr	r0, r0, #5
   13304:	bx	lr
   13308:	cmp	r0, #32
   1330c:	moveq	r0, #5
   13310:	movne	r0, #0
   13314:	bx	lr
   13318:	mov	r0, #7
   1331c:	bx	lr
   13320:	mov	r0, #3
   13324:	bx	lr
   13328:	mov	r0, #2
   1332c:	bx	lr
   13330:	mov	r0, #6
   13334:	bx	lr
   13338:	mov	r0, #4
   1333c:	bx	lr
   13340:	mov	ip, #0
   13344:	sub	r2, r2, #1
   13348:	strd	r4, [sp, #-12]!
   1334c:	add	r2, r1, r2
   13350:	mov	r5, ip
   13354:	str	lr, [sp, #8]
   13358:	sub	r1, r1, #1
   1335c:	mov	lr, ip
   13360:	b	13394 <__assert_fail@plt+0x2168>
   13364:	ldrb	r4, [r2]
   13368:	orr	lr, lr, r4, lsl ip
   1336c:	add	ip, ip, r3
   13370:	cmp	ip, #31
   13374:	bls	13390 <__assert_fail@plt+0x2164>
   13378:	str	lr, [r0, r5, lsl #2]
   1337c:	sub	ip, ip, #32
   13380:	add	r5, r5, #1
   13384:	ldrb	lr, [r2]
   13388:	sub	r4, r3, ip
   1338c:	lsr	lr, lr, r4
   13390:	sub	r2, r2, #1
   13394:	cmp	r2, r1
   13398:	bne	13364 <__assert_fail@plt+0x2138>
   1339c:	cmp	lr, #0
   133a0:	addne	r2, r5, #1
   133a4:	strne	lr, [r0, r5, lsl #2]
   133a8:	bne	133e4 <__assert_fail@plt+0x21b8>
   133ac:	cmp	r5, #0
   133b0:	beq	133f4 <__assert_fail@plt+0x21c8>
   133b4:	sub	r3, r5, #-1073741823	; 0xc0000001
   133b8:	ldr	r2, [r0, r3, lsl #2]
   133bc:	add	r3, r0, r3, lsl #2
   133c0:	cmp	r2, #0
   133c4:	mov	r2, r5
   133c8:	beq	133dc <__assert_fail@plt+0x21b0>
   133cc:	b	133e4 <__assert_fail@plt+0x21b8>
   133d0:	ldr	r1, [r3, #-4]!
   133d4:	cmp	r1, #0
   133d8:	bne	133e4 <__assert_fail@plt+0x21b8>
   133dc:	subs	r2, r2, #1
   133e0:	bne	133d0 <__assert_fail@plt+0x21a4>
   133e4:	ldrd	r4, [sp]
   133e8:	add	sp, sp, #8
   133ec:	mov	r0, r2
   133f0:	pop	{pc}		; (ldr pc, [sp], #4)
   133f4:	mov	r2, r5
   133f8:	b	133e4 <__assert_fail@plt+0x21b8>
   133fc:	b	13254 <__assert_fail@plt+0x2028>
   13400:	movw	ip, #384	; 0x180
   13404:	movt	ip, #4
   13408:	str	r4, [sp, #-8]!
   1340c:	mov	r3, r0
   13410:	movw	r2, #61896	; 0xf1c8
   13414:	movt	r2, #2
   13418:	mov	r1, #1
   1341c:	ldr	r0, [ip]
   13420:	str	lr, [sp, #4]
   13424:	bl	1119c <__fprintf_chk@plt>
   13428:	bl	11220 <abort@plt>
   1342c:	mov	r1, r2
   13430:	str	r4, [sp, #-8]!
   13434:	str	lr, [sp, #4]
   13438:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1343c:	cmp	r0, #0
   13440:	beq	13450 <__assert_fail@plt+0x2224>
   13444:	ldr	r4, [sp]
   13448:	add	sp, sp, #4
   1344c:	pop	{pc}		; (ldr pc, [sp], #4)
   13450:	movw	r0, #59420	; 0xe81c
   13454:	movt	r0, #2
   13458:	bl	13400 <__assert_fail@plt+0x21d4>
   1345c:	cmp	r1, #0
   13460:	beq	1355c <__assert_fail@plt+0x2330>
   13464:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13468:	sub	r4, r0, #1
   1346c:	strd	r6, [sp, #8]
   13470:	mov	r6, r0
   13474:	mvn	r7, #0
   13478:	strd	r8, [sp, #16]
   1347c:	str	sl, [sp, #24]
   13480:	str	lr, [sp, #28]
   13484:	b	1348c <__assert_fail@plt+0x2260>
   13488:	mov	r4, ip
   1348c:	ldr	lr, [r2]
   13490:	ldr	r9, [r2, #12]
   13494:	rsb	r5, lr, #32
   13498:	lsl	r3, r1, lr
   1349c:	lsr	r1, r1, r5
   134a0:	uxth	ip, r9
   134a4:	lsr	r9, r9, #16
   134a8:	lsr	r8, r1, #16
   134ac:	uxth	sl, r1
   134b0:	add	r1, r1, #1
   134b4:	mul	r0, ip, sl
   134b8:	mul	ip, ip, r8
   134bc:	mul	r8, r9, r8
   134c0:	mla	r9, r9, sl, ip
   134c4:	add	r9, r9, r0, lsr #16
   134c8:	uxth	r0, r0
   134cc:	add	r0, r0, r9, lsl #16
   134d0:	cmp	ip, r9
   134d4:	ldr	ip, [r2, #4]
   134d8:	addhi	r8, r8, #65536	; 0x10000
   134dc:	add	r1, r1, r9, lsr #16
   134e0:	adds	r0, r3, r0
   134e4:	movcs	r9, #1
   134e8:	movcc	r9, #0
   134ec:	add	r1, r1, r9
   134f0:	add	r1, r1, r8
   134f4:	mls	r8, r1, ip, r3
   134f8:	cmp	r0, r8
   134fc:	movcs	r0, #0
   13500:	movcc	r0, #1
   13504:	rsb	r3, r0, #0
   13508:	sub	r1, r1, r0
   1350c:	and	r3, r3, ip
   13510:	add	r3, r3, r8
   13514:	cmp	ip, r3
   13518:	subls	r3, r3, ip
   1351c:	addls	r1, r1, #1
   13520:	ands	r0, r3, r7, lsr r5
   13524:	bne	13564 <__assert_fail@plt+0x2338>
   13528:	lsr	r3, r3, lr
   1352c:	add	r0, r4, #2
   13530:	cmp	r1, #0
   13534:	sub	r0, r0, r6
   13538:	add	ip, r4, #1
   1353c:	strb	r3, [r4, #1]
   13540:	bne	13488 <__assert_fail@plt+0x225c>
   13544:	ldrd	r4, [sp]
   13548:	ldrd	r6, [sp, #8]
   1354c:	ldrd	r8, [sp, #16]
   13550:	ldr	sl, [sp, #24]
   13554:	add	sp, sp, #28
   13558:	pop	{pc}		; (ldr pc, [sp], #4)
   1355c:	mov	r0, r1
   13560:	bx	lr
   13564:	movw	r3, #58684	; 0xe53c
   13568:	movt	r3, #2
   1356c:	movw	r1, #59468	; 0xe84c
   13570:	movt	r1, #2
   13574:	movw	r0, #59484	; 0xe85c
   13578:	movt	r0, #2
   1357c:	movw	r2, #1259	; 0x4eb
   13580:	bl	1122c <__assert_fail@plt>
   13584:	ldr	r3, [r0]
   13588:	cmp	r1, #1
   1358c:	strd	r4, [sp, #-16]!
   13590:	movge	r5, r1
   13594:	movlt	r5, #1
   13598:	mov	r4, r0
   1359c:	lsl	r0, r5, #2
   135a0:	str	r6, [sp, #8]
   135a4:	str	lr, [sp, #12]
   135a8:	cmp	r3, #0
   135ac:	bne	135f0 <__assert_fail@plt+0x23c4>
   135b0:	movw	r3, #292	; 0x124
   135b4:	movt	r3, #4
   135b8:	ldr	r3, [r3, #4]
   135bc:	blx	r3
   135c0:	str	r0, [r4, #8]
   135c4:	ldr	r3, [r4, #4]
   135c8:	str	r5, [r4]
   135cc:	ldr	r6, [sp, #8]
   135d0:	cmp	r3, #0
   135d4:	rsblt	r3, r3, #0
   135d8:	cmp	r3, r5
   135dc:	movgt	r3, #0
   135e0:	strgt	r3, [r4, #4]
   135e4:	ldrd	r4, [sp]
   135e8:	add	sp, sp, #12
   135ec:	pop	{pc}		; (ldr pc, [sp], #4)
   135f0:	movw	ip, #292	; 0x124
   135f4:	movt	ip, #4
   135f8:	lsl	r1, r3, #2
   135fc:	mov	r2, r0
   13600:	ldr	r3, [ip]
   13604:	ldr	r0, [r4, #8]
   13608:	blx	r3
   1360c:	str	r0, [r4, #8]
   13610:	b	135c4 <__assert_fail@plt+0x2398>
   13614:	cmp	r0, #0
   13618:	str	r4, [sp, #-8]!
   1361c:	str	lr, [sp, #4]
   13620:	beq	1363c <__assert_fail@plt+0x2410>
   13624:	bl	2d378 <__assert_fail@plt+0x1c14c>
   13628:	cmp	r0, #0
   1362c:	beq	13658 <__assert_fail@plt+0x242c>
   13630:	ldr	r4, [sp]
   13634:	add	sp, sp, #4
   13638:	pop	{pc}		; (ldr pc, [sp], #4)
   1363c:	movw	r1, #59468	; 0xe84c
   13640:	movt	r1, #2
   13644:	ldr	r3, [pc, #24]	; 13664 <__assert_fail@plt+0x2438>
   13648:	movw	r0, #59544	; 0xe898
   1364c:	movt	r0, #2
   13650:	movw	r2, #291	; 0x123
   13654:	bl	1122c <__assert_fail@plt>
   13658:	movw	r0, #59556	; 0xe8a4
   1365c:	movt	r0, #2
   13660:	bl	13400 <__assert_fail@plt+0x21d4>
   13664:	andeq	lr, r2, r0, asr r5
   13668:	cmp	r1, r3
   1366c:	str	r4, [sp, #-8]!
   13670:	str	lr, [sp, #4]
   13674:	ldr	lr, [sp, #8]
   13678:	bgt	13724 <__assert_fail@plt+0x24f8>
   1367c:	cmp	r0, #0
   13680:	bne	136b8 <__assert_fail@plt+0x248c>
   13684:	add	ip, r1, #1
   13688:	cmp	r3, ip
   1368c:	addne	r2, r2, r1, lsl #2
   13690:	bne	136a4 <__assert_fail@plt+0x2478>
   13694:	b	13700 <__assert_fail@plt+0x24d4>
   13698:	add	ip, ip, #1
   1369c:	cmp	r3, ip
   136a0:	beq	13700 <__assert_fail@plt+0x24d4>
   136a4:	ldr	r0, [r2, #4]!
   136a8:	mov	r1, ip
   136ac:	cmp	lr, r0
   136b0:	beq	13698 <__assert_fail@plt+0x246c>
   136b4:	eor	r0, r0, lr
   136b8:	rsb	r2, r0, #0
   136bc:	and	r0, r0, r2
   136c0:	ands	r3, r0, #-16777216	; 0xff000000
   136c4:	bne	1371c <__assert_fail@plt+0x24f0>
   136c8:	lsl	r0, r0, #8
   136cc:	add	r3, r3, #8
   136d0:	tst	r0, #-16777216	; 0xff000000
   136d4:	beq	136c8 <__assert_fail@plt+0x249c>
   136d8:	cmp	r0, #0
   136dc:	blt	136ec <__assert_fail@plt+0x24c0>
   136e0:	lsls	r0, r0, #1
   136e4:	add	r3, r3, #1
   136e8:	bpl	136e0 <__assert_fail@plt+0x24b4>
   136ec:	rsb	r3, r3, r1, lsl #5
   136f0:	add	r0, r3, #31
   136f4:	ldr	r4, [sp]
   136f8:	add	sp, sp, #4
   136fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13700:	cmp	lr, #0
   13704:	lslne	r0, r3, #5
   13708:	bne	136f4 <__assert_fail@plt+0x24c8>
   1370c:	ldr	r4, [sp]
   13710:	add	sp, sp, #4
   13714:	mvn	r0, #0
   13718:	pop	{pc}		; (ldr pc, [sp], #4)
   1371c:	mov	r3, #0
   13720:	b	136d8 <__assert_fail@plt+0x24ac>
   13724:	movw	r1, #59468	; 0xe84c
   13728:	movt	r1, #2
   1372c:	ldr	r3, [pc, #12]	; 13740 <__assert_fail@plt+0x2514>
   13730:	movw	r0, #59604	; 0xe8d4
   13734:	movt	r0, #2
   13738:	mov	r2, #716	; 0x2cc
   1373c:	bl	1122c <__assert_fail@plt>
   13740:	andeq	lr, r2, r4, ror #10
   13744:	subs	r3, r0, #0
   13748:	beq	13784 <__assert_fail@plt+0x2558>
   1374c:	ands	r0, r3, #-16777216	; 0xff000000
   13750:	movne	r0, #0
   13754:	bne	13768 <__assert_fail@plt+0x253c>
   13758:	lsl	r3, r3, #8
   1375c:	add	r0, r0, #8
   13760:	tst	r3, #-16777216	; 0xff000000
   13764:	beq	13758 <__assert_fail@plt+0x252c>
   13768:	cmp	r3, #0
   1376c:	blt	1377c <__assert_fail@plt+0x2550>
   13770:	lsls	r3, r3, #1
   13774:	add	r0, r0, #1
   13778:	bpl	13770 <__assert_fail@plt+0x2544>
   1377c:	rsb	r0, r0, #32
   13780:	bx	lr
   13784:	movw	r1, #59468	; 0xe84c
   13788:	movt	r1, #2
   1378c:	ldr	r3, [pc, #20]	; 137a8 <__assert_fail@plt+0x257c>
   13790:	movw	r0, #59624	; 0xe8e8
   13794:	movt	r0, #2
   13798:	str	r4, [sp, #-8]!
   1379c:	movw	r2, #1210	; 0x4ba
   137a0:	str	lr, [sp, #4]
   137a4:	bl	1122c <__assert_fail@plt>
   137a8:	andeq	lr, r2, r4, ror r5
   137ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   137b0:	mov	r5, r2
   137b4:	strd	r6, [sp, #8]
   137b8:	mov	r6, r3
   137bc:	sub	r3, r3, #-1073741823	; 0xc0000001
   137c0:	mov	r7, r0
   137c4:	strd	r8, [sp, #16]
   137c8:	mov	r8, r1
   137cc:	ldr	r0, [r2, r3, lsl #2]
   137d0:	str	sl, [sp, #24]
   137d4:	str	lr, [sp, #28]
   137d8:	bl	13744 <__assert_fail@plt+0x2518>
   137dc:	add	r3, r8, r6, lsl #5
   137e0:	mvn	r2, #0
   137e4:	mvn	r2, r2, lsl r8
   137e8:	sub	r3, r3, #33	; 0x21
   137ec:	add	r0, r3, r0
   137f0:	cmp	r0, r8
   137f4:	udiv	r0, r0, r8
   137f8:	bcc	1385c <__assert_fail@plt+0x2630>
   137fc:	mov	lr, #0
   13800:	uxtb	r2, r2
   13804:	add	r3, r7, r0
   13808:	mov	r4, lr
   1380c:	ldr	ip, [r5, r4, lsl #2]
   13810:	lsl	r1, r4, #2
   13814:	lsr	ip, ip, lr
   13818:	add	lr, lr, r8
   1381c:	cmp	lr, #31
   13820:	uxtb	ip, ip
   13824:	bls	1384c <__assert_fail@plt+0x2620>
   13828:	add	r4, r4, #1
   1382c:	add	r1, r5, r1
   13830:	cmp	r6, r4
   13834:	ble	1384c <__assert_fail@plt+0x2620>
   13838:	ldr	r9, [r1, #4]
   1383c:	sub	lr, lr, #32
   13840:	sub	r1, r8, lr
   13844:	orr	ip, ip, r9, lsl r1
   13848:	uxtb	ip, ip
   1384c:	and	ip, ip, r2
   13850:	strb	ip, [r3, #-1]!
   13854:	cmp	r7, r3
   13858:	bne	1380c <__assert_fail@plt+0x25e0>
   1385c:	ldrd	r4, [sp]
   13860:	ldrd	r6, [sp, #8]
   13864:	ldrd	r8, [sp, #16]
   13868:	ldr	sl, [sp, #24]
   1386c:	add	sp, sp, #28
   13870:	pop	{pc}		; (ldr pc, [sp], #4)
   13874:	movw	r1, #59468	; 0xe84c
   13878:	movt	r1, #2
   1387c:	ldr	r3, [pc, #20]	; 13898 <__assert_fail@plt+0x266c>
   13880:	movw	r0, #59632	; 0xe8f0
   13884:	movt	r0, #2
   13888:	str	r4, [sp, #-8]!
   1388c:	movw	r2, #442	; 0x1ba
   13890:	str	lr, [sp, #4]
   13894:	bl	1122c <__assert_fail@plt>
   13898:	andeq	lr, r2, ip, lsl #11
   1389c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   138a0:	lsr	r4, r1, #5
   138a4:	mov	r3, #1
   138a8:	strd	r6, [sp, #8]
   138ac:	and	r1, r1, #31
   138b0:	mov	r7, r0
   138b4:	str	lr, [sp, #20]
   138b8:	lsl	r5, r3, r1
   138bc:	ldr	lr, [r0, #4]
   138c0:	str	r8, [sp, #16]
   138c4:	eor	r6, lr, lr, asr #31
   138c8:	sub	r6, r6, lr, asr #31
   138cc:	cmp	r6, r4
   138d0:	bgt	13930 <__assert_fail@plt+0x2704>
   138d4:	ldr	r3, [r0]
   138d8:	add	r8, r4, #1
   138dc:	cmp	r3, r4
   138e0:	ble	13994 <__assert_fail@plt+0x2768>
   138e4:	ldr	r0, [r0, #8]
   138e8:	cmp	r6, r4
   138ec:	lsl	r2, r4, #2
   138f0:	str	r5, [r0, r4, lsl #2]
   138f4:	bge	13910 <__assert_fail@plt+0x26e4>
   138f8:	add	r3, r0, r6, lsl #2
   138fc:	add	r2, r0, r2
   13900:	mov	r1, #0
   13904:	str	r1, [r3], #4
   13908:	cmp	r2, r3
   1390c:	bne	13904 <__assert_fail@plt+0x26d8>
   13910:	cmp	lr, #0
   13914:	ldrd	r4, [sp]
   13918:	rsblt	r8, r8, #0
   1391c:	str	r8, [r7, #4]
   13920:	ldrd	r6, [sp, #8]
   13924:	ldr	r8, [sp, #16]
   13928:	add	sp, sp, #20
   1392c:	pop	{pc}		; (ldr pc, [sp], #4)
   13930:	sub	ip, r6, r4
   13934:	ldr	r0, [r0, #8]
   13938:	cmp	ip, #0
   1393c:	ble	139b8 <__assert_fail@plt+0x278c>
   13940:	add	ip, ip, r4
   13944:	add	r2, r0, r4, lsl #2
   13948:	add	ip, r0, ip, lsl #2
   1394c:	ldr	r3, [r2]
   13950:	adds	r3, r3, r5
   13954:	movcs	r1, #1
   13958:	movcc	r1, #0
   1395c:	str	r3, [r2], #4
   13960:	cmp	ip, r2
   13964:	mov	r5, r1
   13968:	bne	1394c <__assert_fail@plt+0x2720>
   1396c:	cmp	r1, #0
   13970:	moveq	r8, r6
   13974:	beq	13910 <__assert_fail@plt+0x26e4>
   13978:	ldr	r3, [r7]
   1397c:	add	r8, r6, #1
   13980:	cmp	r3, r6
   13984:	ble	139a4 <__assert_fail@plt+0x2778>
   13988:	mov	r3, #1
   1398c:	str	r3, [r0, r6, lsl #2]
   13990:	b	13910 <__assert_fail@plt+0x26e4>
   13994:	mov	r1, r8
   13998:	bl	13584 <__assert_fail@plt+0x2358>
   1399c:	ldr	lr, [r7, #4]
   139a0:	b	138e8 <__assert_fail@plt+0x26bc>
   139a4:	mov	r1, r8
   139a8:	mov	r0, r7
   139ac:	bl	13584 <__assert_fail@plt+0x2358>
   139b0:	ldr	lr, [r7, #4]
   139b4:	b	13988 <__assert_fail@plt+0x275c>
   139b8:	bl	13874 <__assert_fail@plt+0x2648>
   139bc:	movw	r1, #59468	; 0xe84c
   139c0:	movt	r1, #2
   139c4:	ldr	r3, [pc, #20]	; 139e0 <__assert_fail@plt+0x27b4>
   139c8:	movw	r0, #59632	; 0xe8f0
   139cc:	movt	r0, #2
   139d0:	str	r4, [sp, #-8]!
   139d4:	movw	r2, #493	; 0x1ed
   139d8:	str	lr, [sp, #4]
   139dc:	bl	1122c <__assert_fail@plt>
   139e0:	muleq	r2, r8, r5
   139e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   139e8:	lsr	r3, r2, #5
   139ec:	mov	ip, #1
   139f0:	strd	r6, [sp, #8]
   139f4:	and	r2, r2, #31
   139f8:	ldr	r6, [r0]
   139fc:	lsl	ip, ip, r2
   13a00:	str	r8, [sp, #16]
   13a04:	str	lr, [sp, #20]
   13a08:	eor	r2, r6, r6, asr #31
   13a0c:	sub	r2, r2, r6, asr #31
   13a10:	cmp	r2, r3
   13a14:	ble	13a98 <__assert_fail@plt+0x286c>
   13a18:	sub	r7, r2, r3
   13a1c:	cmp	r7, #0
   13a20:	ble	13ad0 <__assert_fail@plt+0x28a4>
   13a24:	add	r7, r7, r3
   13a28:	add	r3, r1, r3, lsl #2
   13a2c:	add	r7, r1, r7, lsl #2
   13a30:	b	13a38 <__assert_fail@plt+0x280c>
   13a34:	mov	ip, r5
   13a38:	ldr	lr, [r3]
   13a3c:	sub	r4, lr, ip
   13a40:	cmp	lr, ip
   13a44:	movcs	r5, #0
   13a48:	movcc	r5, #1
   13a4c:	str	r4, [r3], #4
   13a50:	cmp	r3, r7
   13a54:	bne	13a34 <__assert_fail@plt+0x2808>
   13a58:	cmp	lr, ip
   13a5c:	bcc	13ab4 <__assert_fail@plt+0x2888>
   13a60:	add	r1, r1, r2, lsl #2
   13a64:	ldr	r3, [r1, #-4]!
   13a68:	cmp	r3, #0
   13a6c:	bne	13a78 <__assert_fail@plt+0x284c>
   13a70:	subs	r2, r2, #1
   13a74:	bne	13a64 <__assert_fail@plt+0x2838>
   13a78:	cmp	r6, #0
   13a7c:	ldrd	r4, [sp]
   13a80:	rsblt	r2, r2, #0
   13a84:	ldrd	r6, [sp, #8]
   13a88:	ldr	r8, [sp, #16]
   13a8c:	add	sp, sp, #20
   13a90:	str	r2, [r0]
   13a94:	pop	{pc}		; (ldr pc, [sp], #4)
   13a98:	movw	r1, #59468	; 0xe84c
   13a9c:	movt	r1, #2
   13aa0:	ldr	r3, [pc, #44]	; 13ad4 <__assert_fail@plt+0x28a8>
   13aa4:	movw	r0, #59640	; 0xe8f8
   13aa8:	movt	r0, #2
   13aac:	movw	r2, #3753	; 0xea9
   13ab0:	bl	1122c <__assert_fail@plt>
   13ab4:	movw	r1, #59468	; 0xe84c
   13ab8:	movt	r1, #2
   13abc:	ldr	r3, [pc, #16]	; 13ad4 <__assert_fail@plt+0x28a8>
   13ac0:	movw	r0, #59656	; 0xe908
   13ac4:	movt	r0, #2
   13ac8:	movw	r2, #3756	; 0xeac
   13acc:	bl	1122c <__assert_fail@plt>
   13ad0:	bl	139bc <__assert_fail@plt+0x2790>
   13ad4:	andeq	lr, r2, r4, lsr #11
   13ad8:	ldr	ip, [r0]
   13adc:	mov	r2, #1
   13ae0:	str	r4, [sp, #-8]!
   13ae4:	mov	r4, r1
   13ae8:	str	lr, [sp, #4]
   13aec:	str	r2, [r0, #4]
   13af0:	cmp	ip, #0
   13af4:	ble	13b0c <__assert_fail@plt+0x28e0>
   13af8:	ldr	r0, [r0, #8]
   13afc:	str	r4, [r0]
   13b00:	ldr	r4, [sp]
   13b04:	add	sp, sp, #4
   13b08:	pop	{pc}		; (ldr pc, [sp], #4)
   13b0c:	mov	r1, r2
   13b10:	bl	13584 <__assert_fail@plt+0x2358>
   13b14:	str	r4, [r0]
   13b18:	ldr	r4, [sp]
   13b1c:	add	sp, sp, #4
   13b20:	pop	{pc}		; (ldr pc, [sp], #4)
   13b24:	vcmpe.f64	d0, #0.0
   13b28:	vldr	d7, [pc, #360]	; 13c98 <__assert_fail@plt+0x2a6c>
   13b2c:	strd	r4, [sp, #-16]!
   13b30:	str	r6, [sp, #8]
   13b34:	str	lr, [sp, #12]
   13b38:	vpush	{d8-d9}
   13b3c:	vmrs	APSR_nzcv, fpscr
   13b40:	vnegmi.f64	d8, d0
   13b44:	vmovpl.f64	d8, d0
   13b48:	vcmpe.f64	d8, d7
   13b4c:	vmrs	APSR_nzcv, fpscr
   13b50:	bmi	13c54 <__assert_fail@plt+0x2a28>
   13b54:	vldr	d7, [pc, #324]	; 13ca0 <__assert_fail@plt+0x2a74>
   13b58:	mov	r4, #1
   13b5c:	vcmpe.f64	d8, d7
   13b60:	vmrs	APSR_nzcv, fpscr
   13b64:	blt	13b80 <__assert_fail@plt+0x2954>
   13b68:	vldr	d6, [pc, #312]	; 13ca8 <__assert_fail@plt+0x2a7c>
   13b6c:	vmul.f64	d8, d8, d6
   13b70:	add	r4, r4, #1
   13b74:	vcmpe.f64	d8, d7
   13b78:	vmrs	APSR_nzcv, fpscr
   13b7c:	bge	13b6c <__assert_fail@plt+0x2940>
   13b80:	ldr	r3, [r0]
   13b84:	mov	r5, r0
   13b88:	vmov.f64	d9, d0
   13b8c:	cmp	r3, r4
   13b90:	blt	13c48 <__assert_fail@plt+0x2a1c>
   13b94:	ldr	r0, [r0, #8]
   13b98:	vcvt.u32.f64	s15, d8
   13b9c:	vldr	d4, [pc, #244]	; 13c98 <__assert_fail@plt+0x2a6c>
   13ba0:	vcvt.f64.u32	d6, s15
   13ba4:	vsub.f64	d8, d8, d6
   13ba8:	vcmpe.f64	d8, d4
   13bac:	vmrs	APSR_nzcv, fpscr
   13bb0:	bpl	13c7c <__assert_fail@plt+0x2a50>
   13bb4:	vmov	r1, s15
   13bb8:	sub	r2, r4, #1
   13bbc:	sub	r3, r4, #2
   13bc0:	cmn	r3, #1
   13bc4:	str	r1, [r0, r2, lsl #2]
   13bc8:	beq	13c24 <__assert_fail@plt+0x29f8>
   13bcc:	vldr	d3, [pc, #204]	; 13ca0 <__assert_fail@plt+0x2a74>
   13bd0:	vmul.f64	d8, d8, d3
   13bd4:	vcvt.u32.f64	s13, d8
   13bd8:	vcvt.f64.u32	d7, s13
   13bdc:	vsub.f64	d7, d8, d7
   13be0:	vcmpe.f64	d7, d4
   13be4:	vmrs	APSR_nzcv, fpscr
   13be8:	submi	r2, r4, #-1073741823	; 0xc0000001
   13bec:	addmi	r2, r0, r2, lsl #2
   13bf0:	bmi	13c14 <__assert_fail@plt+0x29e8>
   13bf4:	b	13c60 <__assert_fail@plt+0x2a34>
   13bf8:	vmul.f64	d7, d7, d3
   13bfc:	vcvt.u32.f64	s13, d7
   13c00:	vcvt.f64.u32	d5, s13
   13c04:	vsub.f64	d7, d7, d5
   13c08:	vcmpe.f64	d7, d4
   13c0c:	vmrs	APSR_nzcv, fpscr
   13c10:	bpl	13c60 <__assert_fail@plt+0x2a34>
   13c14:	sub	r3, r3, #1
   13c18:	vstmdb	r2!, {s13}
   13c1c:	cmn	r3, #1
   13c20:	bne	13bf8 <__assert_fail@plt+0x29cc>
   13c24:	vcmpe.f64	d9, #0.0
   13c28:	vmrs	APSR_nzcv, fpscr
   13c2c:	rsbmi	r4, r4, #0
   13c30:	str	r4, [r5, #4]
   13c34:	vpop	{d8-d9}
   13c38:	ldrd	r4, [sp]
   13c3c:	ldr	r6, [sp, #8]
   13c40:	add	sp, sp, #12
   13c44:	pop	{pc}		; (ldr pc, [sp], #4)
   13c48:	mov	r1, r4
   13c4c:	bl	13584 <__assert_fail@plt+0x2358>
   13c50:	b	13b98 <__assert_fail@plt+0x296c>
   13c54:	mov	r3, #0
   13c58:	str	r3, [r0, #4]
   13c5c:	b	13c34 <__assert_fail@plt+0x2a08>
   13c60:	movw	r1, #59468	; 0xe84c
   13c64:	movt	r1, #2
   13c68:	ldr	r3, [pc, #64]	; 13cb0 <__assert_fail@plt+0x2a84>
   13c6c:	movw	r0, #59668	; 0xe914
   13c70:	movt	r0, #2
   13c74:	mov	r2, #1744	; 0x6d0
   13c78:	bl	1122c <__assert_fail@plt>
   13c7c:	movw	r1, #59468	; 0xe84c
   13c80:	movt	r1, #2
   13c84:	ldr	r3, [pc, #36]	; 13cb0 <__assert_fail@plt+0x2a84>
   13c88:	movw	r0, #59668	; 0xe914
   13c8c:	movt	r0, #2
   13c90:	movw	r2, #1736	; 0x6c8
   13c94:	bl	1122c <__assert_fail@plt>
   13c98:	andeq	r0, r0, r0
   13c9c:	svccc	0x00f00000	; IMB
   13ca0:	andeq	r0, r0, r0
   13ca4:	mvnsmi	r0, r0
   13ca8:	andeq	r0, r0, r0
   13cac:	ldclcc	0, cr0, [r0]
   13cb0:			; <UNDEFINED> instruction: 0x0002e5b4
   13cb4:	cmp	r0, #0
   13cb8:	beq	13ccc <__assert_fail@plt+0x2aa0>
   13cbc:	movw	r3, #292	; 0x124
   13cc0:	movt	r3, #4
   13cc4:	ldr	r3, [r3, #4]
   13cc8:	str	r3, [r0]
   13ccc:	cmp	r1, #0
   13cd0:	beq	13ce4 <__assert_fail@plt+0x2ab8>
   13cd4:	movw	r3, #292	; 0x124
   13cd8:	movt	r3, #4
   13cdc:	ldr	r3, [r3]
   13ce0:	str	r3, [r1]
   13ce4:	cmp	r2, #0
   13ce8:	beq	13cfc <__assert_fail@plt+0x2ad0>
   13cec:	movw	r3, #292	; 0x124
   13cf0:	movt	r3, #4
   13cf4:	ldr	r3, [r3, #8]
   13cf8:	str	r3, [r2]
   13cfc:	bx	lr
   13d00:	cmp	r0, #0
   13d04:	movw	r3, #13844	; 0x3614
   13d08:	movt	r3, #1
   13d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   13d10:	movw	lr, #13356	; 0x342c
   13d14:	movt	lr, #1
   13d18:	moveq	r0, r3
   13d1c:	cmp	r1, #0
   13d20:	movw	ip, #13308	; 0x33fc
   13d24:	movt	ip, #1
   13d28:	moveq	r1, lr
   13d2c:	cmp	r2, #0
   13d30:	movw	r3, #292	; 0x124
   13d34:	movt	r3, #4
   13d38:	moveq	r2, ip
   13d3c:	str	r1, [r3]
   13d40:	stmib	r3, {r0, r2}
   13d44:	pop	{pc}		; (ldr pc, [sp], #4)
   13d48:	cmp	r2, #0
   13d4c:	ble	13d68 <__assert_fail@plt+0x2b3c>
   13d50:	add	r2, r1, r2, lsl #2
   13d54:	sub	r0, r0, #4
   13d58:	ldr	r3, [r1], #4
   13d5c:	cmp	r1, r2
   13d60:	str	r3, [r0, #4]!
   13d64:	bne	13d58 <__assert_fail@plt+0x2b2c>
   13d68:	bx	lr
   13d6c:	cmp	r2, #0
   13d70:	ble	13d90 <__assert_fail@plt+0x2b64>
   13d74:	lsl	r2, r2, #2
   13d78:	add	r0, r0, r2
   13d7c:	add	r2, r1, r2
   13d80:	ldr	r3, [r2, #-4]!
   13d84:	cmp	r2, r1
   13d88:	str	r3, [r0, #-4]!
   13d8c:	bne	13d80 <__assert_fail@plt+0x2b54>
   13d90:	bx	lr
   13d94:	lsl	r3, r2, #2
   13d98:	add	r0, r0, r3
   13d9c:	add	r1, r1, r3
   13da0:	b	13db4 <__assert_fail@plt+0x2b88>
   13da4:	ldr	ip, [r0, #-4]!
   13da8:	ldr	r3, [r1, #-4]!
   13dac:	cmp	ip, r3
   13db0:	bne	13dc4 <__assert_fail@plt+0x2b98>
   13db4:	subs	r2, r2, #1
   13db8:	bpl	13da4 <__assert_fail@plt+0x2b78>
   13dbc:	mov	r0, #0
   13dc0:	bx	lr
   13dc4:	bhi	13dd0 <__assert_fail@plt+0x2ba4>
   13dc8:	mvn	r0, #0
   13dcc:	bx	lr
   13dd0:	mov	r0, #1
   13dd4:	bx	lr
   13dd8:	cmp	r1, #0
   13ddc:	ble	13e0c <__assert_fail@plt+0x2be0>
   13de0:	sub	r3, r1, #-1073741823	; 0xc0000001
   13de4:	ldr	r2, [r0, r3, lsl #2]
   13de8:	add	r0, r0, r3, lsl #2
   13dec:	cmp	r2, #0
   13df0:	beq	13e04 <__assert_fail@plt+0x2bd8>
   13df4:	b	13e0c <__assert_fail@plt+0x2be0>
   13df8:	ldr	r3, [r0, #-4]!
   13dfc:	cmp	r3, #0
   13e00:	bne	13e0c <__assert_fail@plt+0x2be0>
   13e04:	subs	r1, r1, #1
   13e08:	bne	13df8 <__assert_fail@plt+0x2bcc>
   13e0c:	clz	r0, r1
   13e10:	lsr	r0, r0, #5
   13e14:	bx	lr
   13e18:	cmp	r1, #0
   13e1c:	ble	13e34 <__assert_fail@plt+0x2c08>
   13e20:	add	r1, r0, r1, lsl #2
   13e24:	mov	r3, #0
   13e28:	str	r3, [r1, #-4]!
   13e2c:	cmp	r1, r0
   13e30:	bne	13e28 <__assert_fail@plt+0x2bfc>
   13e34:	bx	lr
   13e38:	cmp	r2, #0
   13e3c:	subgt	r0, r0, #4
   13e40:	addgt	r2, r1, r2, lsl #2
   13e44:	ble	13e6c <__assert_fail@plt+0x2c40>
   13e48:	ldr	ip, [r1], #4
   13e4c:	adds	ip, ip, r3
   13e50:	movcs	r3, #1
   13e54:	movcc	r3, #0
   13e58:	cmp	r1, r2
   13e5c:	str	ip, [r0, #4]!
   13e60:	bne	13e48 <__assert_fail@plt+0x2c1c>
   13e64:	mov	r0, r3
   13e68:	bx	lr
   13e6c:	str	r4, [sp, #-8]!
   13e70:	str	lr, [sp, #4]
   13e74:	bl	13874 <__assert_fail@plt+0x2648>
   13e78:	cmp	r3, #0
   13e7c:	ble	13ed4 <__assert_fail@plt+0x2ca8>
   13e80:	add	r3, r1, r3, lsl #2
   13e84:	sub	r2, r2, #4
   13e88:	strd	r4, [sp, #-12]!
   13e8c:	sub	r4, r0, #4
   13e90:	mov	r0, #0
   13e94:	str	lr, [sp, #8]
   13e98:	ldr	ip, [r1], #4
   13e9c:	ldr	lr, [r2, #4]!
   13ea0:	adds	ip, ip, r0
   13ea4:	movcs	r5, #1
   13ea8:	movcc	r5, #0
   13eac:	adds	ip, lr, ip
   13eb0:	movcs	r0, #1
   13eb4:	movcc	r0, #0
   13eb8:	cmp	r1, r3
   13ebc:	add	r0, r0, r5
   13ec0:	str	ip, [r4, #4]!
   13ec4:	bne	13e98 <__assert_fail@plt+0x2c6c>
   13ec8:	ldrd	r4, [sp]
   13ecc:	add	sp, sp, #8
   13ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ed4:	mov	r0, #0
   13ed8:	bx	lr
   13edc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13ee0:	strd	r6, [sp, #8]
   13ee4:	ldr	r7, [sp, #24]
   13ee8:	str	r8, [sp, #16]
   13eec:	str	lr, [sp, #20]
   13ef0:	cmp	r2, r7
   13ef4:	blt	13f94 <__assert_fail@plt+0x2d68>
   13ef8:	cmp	r7, #0
   13efc:	movle	ip, #0
   13f00:	ble	13f48 <__assert_fail@plt+0x2d1c>
   13f04:	add	r8, r1, r7, lsl #2
   13f08:	sub	r3, r3, #4
   13f0c:	mov	r5, r1
   13f10:	sub	r6, r0, #4
   13f14:	mov	ip, #0
   13f18:	ldr	lr, [r5], #4
   13f1c:	ldr	r4, [r3, #4]!
   13f20:	adds	lr, lr, ip
   13f24:	movcs	ip, #1
   13f28:	movcc	ip, #0
   13f2c:	adds	lr, r4, lr
   13f30:	movcs	r4, #1
   13f34:	movcc	r4, #0
   13f38:	cmp	r5, r8
   13f3c:	add	ip, r4, ip
   13f40:	str	lr, [r6, #4]!
   13f44:	bne	13f18 <__assert_fail@plt+0x2cec>
   13f48:	cmp	r2, r7
   13f4c:	ble	13f7c <__assert_fail@plt+0x2d50>
   13f50:	lsl	r7, r7, #2
   13f54:	add	r2, r1, r2, lsl #2
   13f58:	add	r0, r0, r7
   13f5c:	add	r1, r1, r7
   13f60:	ldr	r3, [r1], #4
   13f64:	adds	r3, r3, ip
   13f68:	movcs	ip, #1
   13f6c:	movcc	ip, #0
   13f70:	cmp	r2, r1
   13f74:	str	r3, [r0], #4
   13f78:	bne	13f60 <__assert_fail@plt+0x2d34>
   13f7c:	ldrd	r4, [sp]
   13f80:	mov	r0, ip
   13f84:	ldrd	r6, [sp, #8]
   13f88:	ldr	r8, [sp, #16]
   13f8c:	add	sp, sp, #20
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	movw	r1, #59468	; 0xe84c
   13f98:	movt	r1, #2
   13f9c:	ldr	r3, [pc, #12]	; 13fb0 <__assert_fail@plt+0x2d84>
   13fa0:	movw	r0, #59676	; 0xe91c
   13fa4:	movt	r0, #2
   13fa8:	mov	r2, #480	; 0x1e0
   13fac:	bl	1122c <__assert_fail@plt>
   13fb0:	andeq	lr, r2, r0, asr #11
   13fb4:	ldr	r3, [r1, #4]
   13fb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13fbc:	ldr	ip, [r2, #4]
   13fc0:	strd	r6, [sp, #8]
   13fc4:	ldr	r7, [r0]
   13fc8:	cmp	r3, #0
   13fcc:	str	r8, [sp, #16]
   13fd0:	rsblt	r3, r3, #0
   13fd4:	str	lr, [sp, #20]
   13fd8:	sub	sp, sp, #8
   13fdc:	cmp	ip, #0
   13fe0:	rsblt	ip, ip, #0
   13fe4:	cmp	r3, ip
   13fe8:	movge	r6, r3
   13fec:	movlt	r6, ip
   13ff0:	movge	r5, ip
   13ff4:	movlt	r5, r3
   13ff8:	movge	r4, r2
   13ffc:	movlt	r4, r1
   14000:	movge	r8, r1
   14004:	movlt	r8, r2
   14008:	cmp	r7, r6
   1400c:	ble	14050 <__assert_fail@plt+0x2e24>
   14010:	ldr	r7, [r0, #8]
   14014:	mov	r2, r6
   14018:	mov	r0, r7
   1401c:	ldr	r1, [r8, #8]
   14020:	ldr	r3, [r4, #8]
   14024:	str	r5, [sp]
   14028:	bl	13edc <__assert_fail@plt+0x2cb0>
   1402c:	mov	r3, r0
   14030:	add	r0, r6, r0
   14034:	str	r3, [r7, r6, lsl #2]
   14038:	add	sp, sp, #8
   1403c:	ldrd	r4, [sp]
   14040:	ldrd	r6, [sp, #8]
   14044:	ldr	r8, [sp, #16]
   14048:	add	sp, sp, #20
   1404c:	pop	{pc}		; (ldr pc, [sp], #4)
   14050:	add	r1, r6, #1
   14054:	bl	13584 <__assert_fail@plt+0x2358>
   14058:	mov	r7, r0
   1405c:	b	14014 <__assert_fail@plt+0x2de8>
   14060:	cmp	r2, #0
   14064:	str	r4, [sp, #-8]!
   14068:	subgt	r0, r0, #4
   1406c:	addgt	r2, r1, r2, lsl #2
   14070:	str	lr, [sp, #4]
   14074:	ble	140a8 <__assert_fail@plt+0x2e7c>
   14078:	ldr	ip, [r1], #4
   1407c:	sub	lr, ip, r3
   14080:	cmp	r3, ip
   14084:	movls	r3, #0
   14088:	movhi	r3, #1
   1408c:	cmp	r1, r2
   14090:	str	lr, [r0, #4]!
   14094:	bne	14078 <__assert_fail@plt+0x2e4c>
   14098:	ldr	r4, [sp]
   1409c:	add	sp, sp, #4
   140a0:	mov	r0, r3
   140a4:	pop	{pc}		; (ldr pc, [sp], #4)
   140a8:	bl	139bc <__assert_fail@plt+0x2790>
   140ac:	cmp	r3, #0
   140b0:	ble	14108 <__assert_fail@plt+0x2edc>
   140b4:	add	r3, r1, r3, lsl #2
   140b8:	sub	r2, r2, #4
   140bc:	strd	r4, [sp, #-12]!
   140c0:	sub	r4, r0, #4
   140c4:	mov	r0, #0
   140c8:	str	lr, [sp, #8]
   140cc:	ldr	ip, [r2, #4]!
   140d0:	ldr	lr, [r1], #4
   140d4:	adds	r0, ip, r0
   140d8:	movcs	r5, #1
   140dc:	movcc	r5, #0
   140e0:	sub	ip, lr, r0
   140e4:	cmp	lr, r0
   140e8:	movcs	r0, r5
   140ec:	addcc	r0, r5, #1
   140f0:	cmp	r1, r3
   140f4:	str	ip, [r4, #4]!
   140f8:	bne	140cc <__assert_fail@plt+0x2ea0>
   140fc:	ldrd	r4, [sp]
   14100:	add	sp, sp, #8
   14104:	pop	{pc}		; (ldr pc, [sp], #4)
   14108:	mov	r0, #0
   1410c:	bx	lr
   14110:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14114:	strd	r6, [sp, #8]
   14118:	ldr	r7, [sp, #32]
   1411c:	strd	r8, [sp, #16]
   14120:	str	sl, [sp, #24]
   14124:	str	lr, [sp, #28]
   14128:	cmp	r2, r7
   1412c:	blt	141dc <__assert_fail@plt+0x2fb0>
   14130:	cmp	r7, #0
   14134:	movle	ip, #0
   14138:	ble	14180 <__assert_fail@plt+0x2f54>
   1413c:	add	r8, r1, r7, lsl #2
   14140:	sub	r3, r3, #4
   14144:	mov	r4, r1
   14148:	sub	r6, r0, #4
   1414c:	mov	ip, #0
   14150:	ldr	lr, [r3, #4]!
   14154:	ldr	r5, [r4], #4
   14158:	adds	ip, lr, ip
   1415c:	movcs	r9, #1
   14160:	movcc	r9, #0
   14164:	sub	lr, r5, ip
   14168:	cmp	r5, ip
   1416c:	movcs	ip, r9
   14170:	addcc	ip, r9, #1
   14174:	cmp	r4, r8
   14178:	str	lr, [r6, #4]!
   1417c:	bne	14150 <__assert_fail@plt+0x2f24>
   14180:	cmp	r2, r7
   14184:	ble	141c0 <__assert_fail@plt+0x2f94>
   14188:	lsl	r7, r7, #2
   1418c:	mov	lr, ip
   14190:	add	r2, r1, r2, lsl #2
   14194:	add	r0, r0, r7
   14198:	add	r1, r1, r7
   1419c:	ldr	r3, [r1], #4
   141a0:	cmp	r3, ip
   141a4:	sub	r4, r3, lr
   141a8:	movcs	ip, #0
   141ac:	movcc	ip, #1
   141b0:	cmp	r2, r1
   141b4:	mov	lr, ip
   141b8:	str	r4, [r0], #4
   141bc:	bne	1419c <__assert_fail@plt+0x2f70>
   141c0:	ldrd	r4, [sp]
   141c4:	mov	r0, ip
   141c8:	ldrd	r6, [sp, #8]
   141cc:	ldrd	r8, [sp, #16]
   141d0:	ldr	sl, [sp, #24]
   141d4:	add	sp, sp, #28
   141d8:	pop	{pc}		; (ldr pc, [sp], #4)
   141dc:	movw	r1, #59468	; 0xe84c
   141e0:	movt	r1, #2
   141e4:	ldr	r3, [pc, #12]	; 141f8 <__assert_fail@plt+0x2fcc>
   141e8:	movw	r0, #59676	; 0xe91c
   141ec:	movt	r0, #2
   141f0:	mov	r2, #532	; 0x214
   141f4:	bl	1122c <__assert_fail@plt>
   141f8:	andeq	lr, r2, r8, asr #11
   141fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14200:	eor	r4, r1, r1, asr #31
   14204:	mov	r5, r3
   14208:	strd	r6, [sp, #8]
   1420c:	eor	r6, r3, r3, asr #31
   14210:	mov	r7, r1
   14214:	strd	r8, [sp, #16]
   14218:	sub	r4, r4, r1, asr #31
   1421c:	mov	r9, r2
   14220:	strd	sl, [sp, #24]
   14224:	sub	r6, r6, r3, asr #31
   14228:	str	lr, [sp, #32]
   1422c:	sub	sp, sp, #12
   14230:	ldr	r8, [sp, #48]	; 0x30
   14234:	cmp	r4, r6
   14238:	ldr	r1, [r2]
   1423c:	ldr	r2, [r8]
   14240:	beq	14344 <__assert_fail@plt+0x3118>
   14244:	bge	142c0 <__assert_fail@plt+0x3094>
   14248:	ldr	r3, [r0]
   1424c:	cmp	r6, r3
   14250:	bgt	1438c <__assert_fail@plt+0x3160>
   14254:	ldr	r7, [r0, #8]
   14258:	mov	r3, r1
   1425c:	mov	r0, r7
   14260:	str	r4, [sp]
   14264:	mov	r1, r2
   14268:	mov	r2, r6
   1426c:	bl	14110 <__assert_fail@plt+0x2ee4>
   14270:	cmp	r0, #0
   14274:	bne	143ac <__assert_fail@plt+0x3180>
   14278:	cmp	r5, #0
   1427c:	beq	143a4 <__assert_fail@plt+0x3178>
   14280:	sub	r3, r6, #-1073741823	; 0xc0000001
   14284:	ldr	r2, [r7, r3, lsl #2]
   14288:	add	r3, r7, r3, lsl #2
   1428c:	cmp	r2, #0
   14290:	rsbne	r4, r6, #0
   14294:	beq	142a0 <__assert_fail@plt+0x3074>
   14298:	b	14324 <__assert_fail@plt+0x30f8>
   1429c:	mov	r6, r4
   142a0:	subs	r4, r6, #1
   142a4:	beq	14324 <__assert_fail@plt+0x30f8>
   142a8:	ldr	r2, [r3, #-4]!
   142ac:	cmp	r2, #0
   142b0:	beq	1429c <__assert_fail@plt+0x3070>
   142b4:	rsb	r4, r6, #1
   142b8:	b	14324 <__assert_fail@plt+0x30f8>
   142bc:	bls	14248 <__assert_fail@plt+0x301c>
   142c0:	ldr	r3, [r0]
   142c4:	cmp	r4, r3
   142c8:	bgt	14374 <__assert_fail@plt+0x3148>
   142cc:	ldr	r5, [r0, #8]
   142d0:	mov	r3, r2
   142d4:	mov	r0, r5
   142d8:	str	r6, [sp]
   142dc:	mov	r2, r4
   142e0:	bl	14110 <__assert_fail@plt+0x2ee4>
   142e4:	cmp	r0, #0
   142e8:	bne	143c8 <__assert_fail@plt+0x319c>
   142ec:	cmp	r7, #0
   142f0:	beq	14320 <__assert_fail@plt+0x30f4>
   142f4:	sub	r3, r4, #-1073741823	; 0xc0000001
   142f8:	ldr	r2, [r5, r3, lsl #2]
   142fc:	add	r3, r5, r3, lsl #2
   14300:	cmp	r2, #0
   14304:	beq	14318 <__assert_fail@plt+0x30ec>
   14308:	b	14324 <__assert_fail@plt+0x30f8>
   1430c:	ldr	r2, [r3, #-4]!
   14310:	cmp	r2, #0
   14314:	bne	14324 <__assert_fail@plt+0x30f8>
   14318:	subs	r4, r4, #1
   1431c:	bne	1430c <__assert_fail@plt+0x30e0>
   14320:	mov	r4, #0
   14324:	mov	r0, r4
   14328:	add	sp, sp, #12
   1432c:	ldrd	r4, [sp]
   14330:	ldrd	r6, [sp, #8]
   14334:	ldrd	r8, [sp, #16]
   14338:	ldrd	sl, [sp, #24]
   1433c:	add	sp, sp, #32
   14340:	pop	{pc}		; (ldr pc, [sp], #4)
   14344:	lsl	ip, r4, #2
   14348:	mov	r3, r4
   1434c:	add	lr, r1, ip
   14350:	add	ip, r2, ip
   14354:	b	14368 <__assert_fail@plt+0x313c>
   14358:	ldr	fp, [lr, #-4]!
   1435c:	ldr	sl, [ip, #-4]!
   14360:	cmp	fp, sl
   14364:	bne	142bc <__assert_fail@plt+0x3090>
   14368:	subs	r3, r3, #1
   1436c:	bcs	14358 <__assert_fail@plt+0x312c>
   14370:	b	14320 <__assert_fail@plt+0x30f4>
   14374:	mov	r1, r4
   14378:	bl	13584 <__assert_fail@plt+0x2358>
   1437c:	mov	r5, r0
   14380:	ldr	r2, [r8]
   14384:	ldr	r1, [r9]
   14388:	b	142d0 <__assert_fail@plt+0x30a4>
   1438c:	mov	r1, r6
   14390:	bl	13584 <__assert_fail@plt+0x2358>
   14394:	mov	r7, r0
   14398:	ldr	r2, [r8]
   1439c:	ldr	r1, [r9]
   143a0:	b	14258 <__assert_fail@plt+0x302c>
   143a4:	mov	r4, r5
   143a8:	b	14324 <__assert_fail@plt+0x30f8>
   143ac:	movw	r1, #59468	; 0xe84c
   143b0:	movt	r1, #2
   143b4:	ldr	r3, [pc, #40]	; 143e4 <__assert_fail@plt+0x31b8>
   143b8:	movw	r0, #59656	; 0xe908
   143bc:	movt	r0, #2
   143c0:	movw	r2, #2012	; 0x7dc
   143c4:	bl	1122c <__assert_fail@plt>
   143c8:	movw	r1, #59468	; 0xe84c
   143cc:	movt	r1, #2
   143d0:	ldr	r3, [pc, #12]	; 143e4 <__assert_fail@plt+0x31b8>
   143d4:	movw	r0, #59656	; 0xe908
   143d8:	movt	r0, #2
   143dc:	movw	r2, #2006	; 0x7d6
   143e0:	bl	1122c <__assert_fail@plt>
   143e4:	ldrdeq	lr, [r2], -r0
   143e8:	cmp	r2, #0
   143ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143f0:	movgt	r4, r0
   143f4:	lsrgt	r5, r3, #16
   143f8:	movgt	r0, #0
   143fc:	uxthgt	r3, r3
   14400:	strd	r6, [sp, #8]
   14404:	str	r8, [sp, #16]
   14408:	str	lr, [sp, #20]
   1440c:	ble	14474 <__assert_fail@plt+0x3248>
   14410:	ldr	ip, [r1], #4
   14414:	lsr	r6, ip, #16
   14418:	uxth	ip, ip
   1441c:	mul	lr, r3, ip
   14420:	mul	r7, r3, r6
   14424:	mul	r6, r5, r6
   14428:	mla	ip, r5, ip, r7
   1442c:	add	ip, ip, lr, lsr #16
   14430:	uxth	lr, lr
   14434:	add	lr, lr, ip, lsl #16
   14438:	cmp	r7, ip
   1443c:	addhi	r6, r6, #65536	; 0x10000
   14440:	adds	lr, r0, lr
   14444:	movcs	r0, #1
   14448:	movcc	r0, #0
   1444c:	add	r0, r0, ip, lsr #16
   14450:	subs	r2, r2, #1
   14454:	str	lr, [r4], #4
   14458:	add	r0, r0, r6
   1445c:	bne	14410 <__assert_fail@plt+0x31e4>
   14460:	ldrd	r4, [sp]
   14464:	ldrd	r6, [sp, #8]
   14468:	ldr	r8, [sp, #16]
   1446c:	add	sp, sp, #20
   14470:	pop	{pc}		; (ldr pc, [sp], #4)
   14474:	movw	r1, #59468	; 0xe84c
   14478:	movt	r1, #2
   1447c:	ldr	r3, [pc, #12]	; 14490 <__assert_fail@plt+0x3264>
   14480:	movw	r0, #59688	; 0xe928
   14484:	movt	r0, #2
   14488:	movw	r2, #545	; 0x221
   1448c:	bl	1122c <__assert_fail@plt>
   14490:	ldrdeq	lr, [r2], -ip
   14494:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14498:	strd	r6, [sp, #8]
   1449c:	strd	r8, [sp, #16]
   144a0:	strd	sl, [sp, #24]
   144a4:	subs	sl, r2, #0
   144a8:	str	lr, [sp, #32]
   144ac:	sub	sp, sp, #4
   144b0:	ldr	fp, [sp, #44]	; 0x2c
   144b4:	beq	14604 <__assert_fail@plt+0x33d8>
   144b8:	mov	r6, r3
   144bc:	mov	r7, r0
   144c0:	ldr	r3, [sp, #40]	; 0x28
   144c4:	sub	r5, sl, #1
   144c8:	mov	r9, r1
   144cc:	ldrb	r2, [r1]
   144d0:	ldr	r0, [r3]
   144d4:	mov	r3, r5
   144d8:	udiv	r5, r5, r0
   144dc:	mls	r5, r0, r5, r3
   144e0:	cmp	r5, #0
   144e4:	beq	145e0 <__assert_fail@plt+0x33b4>
   144e8:	mov	r3, r1
   144ec:	add	ip, r5, r1
   144f0:	ldrb	r1, [r3, #1]!
   144f4:	cmp	r3, ip
   144f8:	mla	r2, r2, r6, r1
   144fc:	bne	144f0 <__assert_fail@plt+0x32c4>
   14500:	add	r5, r5, #1
   14504:	cmp	sl, r5
   14508:	mov	r8, #1
   1450c:	str	r2, [r7]
   14510:	bls	145b8 <__assert_fail@plt+0x338c>
   14514:	cmp	r0, #1
   14518:	add	ip, r5, #1
   1451c:	ldrb	r4, [r9, r5]
   14520:	bls	145b0 <__assert_fail@plt+0x3384>
   14524:	add	r1, r5, r0
   14528:	add	r3, r9, ip
   1452c:	add	r1, r9, r1
   14530:	ldrb	r2, [r3], #1
   14534:	cmp	r1, r3
   14538:	mla	r4, r4, r6, r2
   1453c:	bne	14530 <__assert_fail@plt+0x3304>
   14540:	sub	r5, r0, #1
   14544:	add	r5, r5, ip
   14548:	mov	r2, r8
   1454c:	mov	r1, r7
   14550:	ldr	r3, [fp]
   14554:	mov	r0, r7
   14558:	bl	143e8 <__assert_fail@plt+0x31bc>
   1455c:	lsl	ip, r8, #2
   14560:	mov	r2, r7
   14564:	add	r1, ip, r7
   14568:	ldr	r3, [r2]
   1456c:	adds	r3, r3, r4
   14570:	movcs	r4, #1
   14574:	movcc	r4, #0
   14578:	str	r3, [r2], #4
   1457c:	cmp	r1, r2
   14580:	bne	14568 <__assert_fail@plt+0x333c>
   14584:	adds	r0, r0, r4
   14588:	addne	r8, r8, #1
   1458c:	strne	r0, [r7, ip]
   14590:	cmp	sl, r5
   14594:	bls	145b8 <__assert_fail@plt+0x338c>
   14598:	ldr	r3, [sp, #40]	; 0x28
   1459c:	add	ip, r5, #1
   145a0:	ldrb	r4, [r9, r5]
   145a4:	ldr	r0, [r3]
   145a8:	cmp	r0, #1
   145ac:	bhi	14524 <__assert_fail@plt+0x32f8>
   145b0:	mov	r5, ip
   145b4:	b	14548 <__assert_fail@plt+0x331c>
   145b8:	cmp	sl, r5
   145bc:	bne	145e8 <__assert_fail@plt+0x33bc>
   145c0:	mov	r0, r8
   145c4:	add	sp, sp, #4
   145c8:	ldrd	r4, [sp]
   145cc:	ldrd	r6, [sp, #8]
   145d0:	ldrd	r8, [sp, #16]
   145d4:	ldrd	sl, [sp, #24]
   145d8:	add	sp, sp, #32
   145dc:	pop	{pc}		; (ldr pc, [sp], #4)
   145e0:	mov	r5, #1
   145e4:	b	14504 <__assert_fail@plt+0x32d8>
   145e8:	movw	r1, #59468	; 0xe84c
   145ec:	movt	r1, #2
   145f0:	ldr	r3, [pc, #40]	; 14620 <__assert_fail@plt+0x33f4>
   145f4:	movw	r0, #59704	; 0xe938
   145f8:	movt	r0, #2
   145fc:	movw	r2, #1394	; 0x572
   14600:	bl	1122c <__assert_fail@plt>
   14604:	movw	r1, #59468	; 0xe84c
   14608:	movt	r1, #2
   1460c:	ldr	r3, [pc, #12]	; 14620 <__assert_fail@plt+0x33f4>
   14610:	movw	r0, #59696	; 0xe930
   14614:	movt	r0, #2
   14618:	movw	r2, #1370	; 0x55a
   1461c:	bl	1122c <__assert_fail@plt>
   14620:	andeq	lr, r2, r8, ror #11
   14624:	cmp	r2, #0
   14628:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1462c:	movgt	r5, r0
   14630:	movgt	r0, #0
   14634:	strd	r6, [sp, #8]
   14638:	lsrgt	r6, r3, #16
   1463c:	uxthgt	r3, r3
   14640:	str	r8, [sp, #16]
   14644:	str	lr, [sp, #20]
   14648:	ble	146c4 <__assert_fail@plt+0x3498>
   1464c:	ldr	r4, [r1], #4
   14650:	ldr	r8, [r5]
   14654:	lsr	r7, r4, #16
   14658:	uxth	r4, r4
   1465c:	mul	lr, r3, r4
   14660:	mul	ip, r3, r7
   14664:	mul	r7, r6, r7
   14668:	mla	r4, r6, r4, ip
   1466c:	add	r4, r4, lr, lsr #16
   14670:	uxth	lr, lr
   14674:	cmp	ip, r4
   14678:	add	ip, lr, r4, lsl #16
   1467c:	addhi	r7, r7, #65536	; 0x10000
   14680:	adds	ip, r0, ip
   14684:	movcs	r0, #1
   14688:	movcc	r0, #0
   1468c:	add	r4, r0, r4, lsr #16
   14690:	adds	ip, ip, r8
   14694:	movcs	r0, #1
   14698:	movcc	r0, #0
   1469c:	add	r0, r0, r4
   146a0:	subs	r2, r2, #1
   146a4:	str	ip, [r5], #4
   146a8:	add	r0, r0, r7
   146ac:	bne	1464c <__assert_fail@plt+0x3420>
   146b0:	ldrd	r4, [sp]
   146b4:	ldrd	r6, [sp, #8]
   146b8:	ldr	r8, [sp, #16]
   146bc:	add	sp, sp, #20
   146c0:	pop	{pc}		; (ldr pc, [sp], #4)
   146c4:	movw	r1, #59468	; 0xe84c
   146c8:	movt	r1, #2
   146cc:	ldr	r3, [pc, #12]	; 146e0 <__assert_fail@plt+0x34b4>
   146d0:	movw	r0, #59688	; 0xe928
   146d4:	movt	r0, #2
   146d8:	mov	r2, #568	; 0x238
   146dc:	bl	1122c <__assert_fail@plt>
   146e0:	strdeq	lr, [r2], -ip
   146e4:	cmp	r2, #0
   146e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   146ec:	movgt	r4, r0
   146f0:	lsrgt	r5, r3, #16
   146f4:	movgt	r0, #0
   146f8:	uxthgt	r3, r3
   146fc:	strd	r6, [sp, #8]
   14700:	str	r8, [sp, #16]
   14704:	str	lr, [sp, #20]
   14708:	ble	14784 <__assert_fail@plt+0x3558>
   1470c:	ldr	lr, [r1], #4
   14710:	lsr	r6, lr, #16
   14714:	uxth	lr, lr
   14718:	mul	ip, r3, lr
   1471c:	mul	r7, r3, r6
   14720:	mul	r6, r5, r6
   14724:	mla	lr, r5, lr, r7
   14728:	add	lr, lr, ip, lsr #16
   1472c:	uxth	ip, ip
   14730:	cmp	r7, lr
   14734:	ldr	r7, [r4]
   14738:	add	ip, ip, lr, lsl #16
   1473c:	addhi	r6, r6, #65536	; 0x10000
   14740:	adds	ip, r0, ip
   14744:	movcs	r0, #1
   14748:	movcc	r0, #0
   1474c:	add	lr, r0, lr, lsr #16
   14750:	subs	r7, r7, ip
   14754:	movcc	r0, #1
   14758:	movcs	r0, #0
   1475c:	add	ip, r0, lr
   14760:	subs	r2, r2, #1
   14764:	str	r7, [r4], #4
   14768:	add	r0, ip, r6
   1476c:	bne	1470c <__assert_fail@plt+0x34e0>
   14770:	ldrd	r4, [sp]
   14774:	ldrd	r6, [sp, #8]
   14778:	ldr	r8, [sp, #16]
   1477c:	add	sp, sp, #20
   14780:	pop	{pc}		; (ldr pc, [sp], #4)
   14784:	movw	r1, #59468	; 0xe84c
   14788:	movt	r1, #2
   1478c:	ldr	r3, [pc, #12]	; 147a0 <__assert_fail@plt+0x3574>
   14790:	movw	r0, #59688	; 0xe928
   14794:	movt	r0, #2
   14798:	movw	r2, #594	; 0x252
   1479c:	bl	1122c <__assert_fail@plt>
   147a0:	andeq	lr, r2, ip, lsl #12
   147a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   147a8:	ldr	r4, [sp, #32]
   147ac:	strd	r6, [sp, #8]
   147b0:	strd	r8, [sp, #16]
   147b4:	str	sl, [sp, #24]
   147b8:	str	lr, [sp, #28]
   147bc:	cmp	r2, r4
   147c0:	blt	148a8 <__assert_fail@plt+0x367c>
   147c4:	cmp	r4, #0
   147c8:	ble	1488c <__assert_fail@plt+0x3660>
   147cc:	mov	r6, r3
   147d0:	add	r3, r2, r4
   147d4:	add	r3, r0, r3, lsl #2
   147d8:	mov	r7, r2
   147dc:	mov	sl, r0
   147e0:	mov	r9, r1
   147e4:	cmp	r3, r1
   147e8:	bhi	14864 <__assert_fail@plt+0x3638>
   147ec:	cmp	r3, r6
   147f0:	bls	14800 <__assert_fail@plt+0x35d4>
   147f4:	add	r3, r6, r4, lsl #2
   147f8:	cmp	sl, r3
   147fc:	bcc	148c4 <__assert_fail@plt+0x3698>
   14800:	mov	r2, r7
   14804:	mov	r1, r9
   14808:	lsl	r8, r7, #2
   1480c:	mov	r0, sl
   14810:	ldr	r3, [r6]
   14814:	bl	143e8 <__assert_fail@plt+0x31bc>
   14818:	subs	r4, r4, #1
   1481c:	add	r5, sl, r8
   14820:	str	r0, [sl, r7, lsl #2]
   14824:	beq	1484c <__assert_fail@plt+0x3620>
   14828:	rsb	r8, r8, #4
   1482c:	add	r0, r8, r5
   14830:	mov	r2, r7
   14834:	ldr	r3, [r6, #4]!
   14838:	mov	r1, r9
   1483c:	bl	14624 <__assert_fail@plt+0x33f8>
   14840:	subs	r4, r4, #1
   14844:	str	r0, [r5, #4]!
   14848:	bne	1482c <__assert_fail@plt+0x3600>
   1484c:	ldrd	r4, [sp]
   14850:	ldrd	r6, [sp, #8]
   14854:	ldrd	r8, [sp, #16]
   14858:	ldr	sl, [sp, #24]
   1485c:	add	sp, sp, #28
   14860:	pop	{pc}		; (ldr pc, [sp], #4)
   14864:	add	r2, r1, r2, lsl #2
   14868:	cmp	r0, r2
   1486c:	bcs	147ec <__assert_fail@plt+0x35c0>
   14870:	movw	r1, #59468	; 0xe84c
   14874:	movt	r1, #2
   14878:	ldr	r3, [pc, #96]	; 148e0 <__assert_fail@plt+0x36b4>
   1487c:	movw	r0, #59732	; 0xe954
   14880:	movt	r0, #2
   14884:	mov	r2, #620	; 0x26c
   14888:	bl	1122c <__assert_fail@plt>
   1488c:	movw	r1, #59468	; 0xe84c
   14890:	movt	r1, #2
   14894:	ldr	r3, [pc, #68]	; 148e0 <__assert_fail@plt+0x36b4>
   14898:	movw	r0, #59724	; 0xe94c
   1489c:	movt	r0, #2
   148a0:	movw	r2, #619	; 0x26b
   148a4:	bl	1122c <__assert_fail@plt>
   148a8:	movw	r1, #59468	; 0xe84c
   148ac:	movt	r1, #2
   148b0:	ldr	r3, [pc, #40]	; 148e0 <__assert_fail@plt+0x36b4>
   148b4:	movw	r0, #59712	; 0xe940
   148b8:	movt	r0, #2
   148bc:	movw	r2, #618	; 0x26a
   148c0:	bl	1122c <__assert_fail@plt>
   148c4:	movw	r1, #59468	; 0xe84c
   148c8:	movt	r1, #2
   148cc:	ldr	r3, [pc, #12]	; 148e0 <__assert_fail@plt+0x36b4>
   148d0:	movw	r0, #59772	; 0xe97c
   148d4:	movt	r0, #2
   148d8:	movw	r2, #621	; 0x26d
   148dc:	bl	1122c <__assert_fail@plt>
   148e0:	andeq	lr, r2, ip, lsl r6
   148e4:	mov	ip, r3
   148e8:	push	{lr}		; (str lr, [sp, #-4]!)
   148ec:	sub	sp, sp, #12
   148f0:	mov	r3, r2
   148f4:	mov	r2, ip
   148f8:	str	ip, [sp]
   148fc:	bl	147a4 <__assert_fail@plt+0x3578>
   14900:	add	sp, sp, #12
   14904:	pop	{pc}		; (ldr pc, [sp], #4)
   14908:	push	{lr}		; (str lr, [sp, #-4]!)
   1490c:	sub	sp, sp, #12
   14910:	mov	r3, r1
   14914:	str	r2, [sp]
   14918:	bl	147a4 <__assert_fail@plt+0x3578>
   1491c:	add	sp, sp, #12
   14920:	pop	{pc}		; (ldr pc, [sp], #4)
   14924:	cmp	r2, #0
   14928:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1492c:	strd	r6, [sp, #8]
   14930:	str	r8, [sp, #16]
   14934:	str	lr, [sp, #20]
   14938:	ble	149b0 <__assert_fail@plt+0x3784>
   1493c:	cmp	r3, #0
   14940:	beq	149e8 <__assert_fail@plt+0x37bc>
   14944:	cmp	r3, #31
   14948:	bhi	149cc <__assert_fail@plt+0x37a0>
   1494c:	lsl	r8, r2, #2
   14950:	rsb	r6, r3, #32
   14954:	subs	r2, r2, #1
   14958:	add	ip, r1, r8
   1495c:	add	r7, r0, r8
   14960:	ldr	lr, [ip, #-4]
   14964:	sub	ip, ip, #4
   14968:	lsr	r0, lr, r6
   1496c:	lsl	lr, lr, r3
   14970:	beq	14998 <__assert_fail@plt+0x376c>
   14974:	mov	r4, r7
   14978:	ldr	r1, [ip, #-4]!
   1497c:	subs	r2, r2, #1
   14980:	orr	r5, lr, r1, lsr r6
   14984:	lsl	lr, r1, r3
   14988:	str	r5, [r4, #-4]!
   1498c:	bne	14978 <__assert_fail@plt+0x374c>
   14990:	rsb	r3, r8, #4
   14994:	add	r7, r7, r3
   14998:	ldrd	r4, [sp]
   1499c:	ldr	r8, [sp, #16]
   149a0:	str	lr, [r7, #-4]
   149a4:	ldrd	r6, [sp, #8]
   149a8:	add	sp, sp, #20
   149ac:	pop	{pc}		; (ldr pc, [sp], #4)
   149b0:	movw	r1, #59468	; 0xe84c
   149b4:	movt	r1, #2
   149b8:	ldr	r3, [pc, #68]	; 14a04 <__assert_fail@plt+0x37d8>
   149bc:	movw	r0, #59688	; 0xe928
   149c0:	movt	r0, #2
   149c4:	movw	r2, #659	; 0x293
   149c8:	bl	1122c <__assert_fail@plt>
   149cc:	movw	r1, #59468	; 0xe84c
   149d0:	movt	r1, #2
   149d4:	ldr	r3, [pc, #40]	; 14a04 <__assert_fail@plt+0x37d8>
   149d8:	movw	r0, #59824	; 0xe9b0
   149dc:	movt	r0, #2
   149e0:	movw	r2, #661	; 0x295
   149e4:	bl	1122c <__assert_fail@plt>
   149e8:	movw	r1, #59468	; 0xe84c
   149ec:	movt	r1, #2
   149f0:	ldr	r3, [pc, #12]	; 14a04 <__assert_fail@plt+0x37d8>
   149f4:	movw	r0, #59812	; 0xe9a4
   149f8:	movt	r0, #2
   149fc:	mov	r2, #660	; 0x294
   14a00:	bl	1122c <__assert_fail@plt>
   14a04:	andeq	lr, r2, r4, lsr #12
   14a08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a0c:	mov	r5, r2
   14a10:	ldr	r4, [r3]
   14a14:	strd	r6, [sp, #8]
   14a18:	mov	r7, r3
   14a1c:	mov	r6, r0
   14a20:	strd	r8, [sp, #16]
   14a24:	strd	sl, [sp, #24]
   14a28:	str	lr, [sp, #32]
   14a2c:	sub	sp, sp, #12
   14a30:	cmp	r4, #0
   14a34:	beq	14a6c <__assert_fail@plt+0x3840>
   14a38:	cmp	r0, #0
   14a3c:	beq	14b60 <__assert_fail@plt+0x3934>
   14a40:	lsl	sl, r2, #2
   14a44:	mov	r3, #0
   14a48:	mov	r8, r0
   14a4c:	str	r3, [sp]
   14a50:	mov	r3, r4
   14a54:	mov	r2, r5
   14a58:	mov	r0, r8
   14a5c:	bl	14924 <__assert_fail@plt+0x36f8>
   14a60:	mov	r4, r0
   14a64:	mov	r1, r8
   14a68:	b	14a78 <__assert_fail@plt+0x384c>
   14a6c:	lsl	sl, r2, #2
   14a70:	mov	r8, r4
   14a74:	str	r4, [sp]
   14a78:	add	r1, r1, sl
   14a7c:	ldr	ip, [r7, #4]
   14a80:	ldr	r9, [r7, #12]
   14a84:	lsr	sl, r9, #16
   14a88:	uxth	r9, r9
   14a8c:	b	14b00 <__assert_fail@plt+0x38d4>
   14a90:	mul	r4, r9, lr
   14a94:	uxth	r0, r3
   14a98:	mul	lr, sl, lr
   14a9c:	mla	r2, sl, r2, r4
   14aa0:	add	r3, r2, r3, lsr #16
   14aa4:	cmp	r4, r3
   14aa8:	ldr	r4, [r1, #-4]!
   14aac:	add	r0, r0, r3, lsl #16
   14ab0:	addhi	lr, lr, #65536	; 0x10000
   14ab4:	add	r3, fp, r3, lsr #16
   14ab8:	adds	r0, r4, r0
   14abc:	movcs	r2, #1
   14ac0:	movcc	r2, #0
   14ac4:	add	r3, r3, r2
   14ac8:	add	r3, r3, lr
   14acc:	mls	r2, r3, ip, r4
   14ad0:	cmp	r0, r2
   14ad4:	movcs	r0, #0
   14ad8:	movcc	r0, #1
   14adc:	rsb	r4, r0, #0
   14ae0:	sub	r3, r3, r0
   14ae4:	and	r4, r4, ip
   14ae8:	add	r4, r4, r2
   14aec:	cmp	ip, r4
   14af0:	addls	r3, r3, #1
   14af4:	subls	r4, r4, ip
   14af8:	cmp	r6, #0
   14afc:	strne	r3, [r6, r5, lsl #2]
   14b00:	uxth	r2, r4
   14b04:	subs	r5, r5, #1
   14b08:	lsr	lr, r4, #16
   14b0c:	add	fp, r4, #1
   14b10:	mul	r3, r9, r2
   14b14:	bpl	14a90 <__assert_fail@plt+0x3864>
   14b18:	ldr	r2, [sp]
   14b1c:	cmp	r2, #0
   14b20:	beq	14b3c <__assert_fail@plt+0x3910>
   14b24:	movw	r3, #292	; 0x124
   14b28:	movt	r3, #4
   14b2c:	lsl	r1, r2, #2
   14b30:	mov	r0, r8
   14b34:	ldr	r3, [r3, #8]
   14b38:	blx	r3
   14b3c:	ldr	r0, [r7]
   14b40:	lsr	r0, r4, r0
   14b44:	add	sp, sp, #12
   14b48:	ldrd	r4, [sp]
   14b4c:	ldrd	r6, [sp, #8]
   14b50:	ldrd	r8, [sp, #16]
   14b54:	ldrd	sl, [sp, #24]
   14b58:	add	sp, sp, #32
   14b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b60:	lsl	sl, r2, #2
   14b64:	movw	r3, #292	; 0x124
   14b68:	movt	r3, #4
   14b6c:	ldr	r3, [r3, #4]
   14b70:	mov	r0, sl
   14b74:	str	r2, [sp]
   14b78:	str	r1, [sp, #4]
   14b7c:	blx	r3
   14b80:	mov	r8, r0
   14b84:	ldr	r4, [r7]
   14b88:	ldr	r1, [sp, #4]
   14b8c:	b	14a50 <__assert_fail@plt+0x3824>
   14b90:	cmp	r2, #0
   14b94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b98:	strd	r6, [sp, #8]
   14b9c:	str	r8, [sp, #16]
   14ba0:	str	lr, [sp, #20]
   14ba4:	ble	14c10 <__assert_fail@plt+0x39e4>
   14ba8:	cmp	r3, #0
   14bac:	beq	14c48 <__assert_fail@plt+0x3a1c>
   14bb0:	cmp	r3, #31
   14bb4:	bhi	14c2c <__assert_fail@plt+0x3a00>
   14bb8:	ldr	r4, [r1], #4
   14bbc:	rsb	r8, r3, #32
   14bc0:	subs	ip, r2, #1
   14bc4:	mov	r7, r0
   14bc8:	lsl	r0, r4, r8
   14bcc:	lsr	r4, r4, r3
   14bd0:	beq	14bf8 <__assert_fail@plt+0x39cc>
   14bd4:	mov	r5, r7
   14bd8:	ldr	lr, [r1], #4
   14bdc:	subs	ip, ip, #1
   14be0:	orr	r6, r4, lr, lsl r8
   14be4:	lsr	r4, lr, r3
   14be8:	str	r6, [r5], #4
   14bec:	bne	14bd8 <__assert_fail@plt+0x39ac>
   14bf0:	sub	r2, r2, #-1073741823	; 0xc0000001
   14bf4:	add	r7, r7, r2, lsl #2
   14bf8:	ldr	r8, [sp, #16]
   14bfc:	str	r4, [r7]
   14c00:	ldrd	r4, [sp]
   14c04:	ldrd	r6, [sp, #8]
   14c08:	add	sp, sp, #20
   14c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c10:	movw	r1, #59468	; 0xe84c
   14c14:	movt	r1, #2
   14c18:	ldr	r3, [pc, #68]	; 14c64 <__assert_fail@plt+0x3a38>
   14c1c:	movw	r0, #59688	; 0xe928
   14c20:	movt	r0, #2
   14c24:	movw	r2, #689	; 0x2b1
   14c28:	bl	1122c <__assert_fail@plt>
   14c2c:	movw	r1, #59468	; 0xe84c
   14c30:	movt	r1, #2
   14c34:	ldr	r3, [pc, #40]	; 14c64 <__assert_fail@plt+0x3a38>
   14c38:	movw	r0, #59824	; 0xe9b0
   14c3c:	movt	r0, #2
   14c40:	movw	r2, #691	; 0x2b3
   14c44:	bl	1122c <__assert_fail@plt>
   14c48:	movw	r1, #59468	; 0xe84c
   14c4c:	movt	r1, #2
   14c50:	ldr	r3, [pc, #12]	; 14c64 <__assert_fail@plt+0x3a38>
   14c54:	movw	r0, #59812	; 0xe9a4
   14c58:	movt	r0, #2
   14c5c:	movw	r2, #690	; 0x2b2
   14c60:	bl	1122c <__assert_fail@plt>
   14c64:	andeq	lr, r2, r0, lsr r6
   14c68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c6c:	strd	r6, [sp, #8]
   14c70:	strd	r8, [sp, #16]
   14c74:	strd	sl, [sp, #24]
   14c78:	mov	fp, r3
   14c7c:	str	lr, [sp, #32]
   14c80:	sub	sp, sp, #44	; 0x2c
   14c84:	ldr	r3, [sp, #80]	; 0x50
   14c88:	str	r0, [sp, #8]
   14c8c:	str	r1, [sp, #16]
   14c90:	ldr	r4, [sp, #84]	; 0x54
   14c94:	cmp	r3, #0
   14c98:	beq	15204 <__assert_fail@plt+0x3fd8>
   14c9c:	ldr	r3, [sp, #80]	; 0x50
   14ca0:	mov	r5, r2
   14ca4:	cmp	r3, r2
   14ca8:	bgt	15220 <__assert_fail@plt+0x3ff4>
   14cac:	ldr	r3, [sp, #80]	; 0x50
   14cb0:	cmp	r3, #1
   14cb4:	beq	15014 <__assert_fail@plt+0x3de8>
   14cb8:	ldr	r3, [sp, #80]	; 0x50
   14cbc:	cmp	r3, #2
   14cc0:	beq	15028 <__assert_fail@plt+0x3dfc>
   14cc4:	ldr	r3, [sp, #80]	; 0x50
   14cc8:	sub	r0, r3, #-1073741823	; 0xc0000001
   14ccc:	ldr	r3, [r4, #4]
   14cd0:	lsl	r6, r0, #2
   14cd4:	str	r0, [sp, #24]
   14cd8:	ldr	r0, [fp, r0, lsl #2]
   14cdc:	cmp	r3, r0
   14ce0:	bne	15258 <__assert_fail@plt+0x402c>
   14ce4:	sub	r6, r6, #4
   14ce8:	ldr	ip, [r4, #8]
   14cec:	ldr	r0, [fp, r6]
   14cf0:	cmp	ip, r0
   14cf4:	bne	1523c <__assert_fail@plt+0x4010>
   14cf8:	cmp	r3, #0
   14cfc:	bge	152ac <__assert_fail@plt+0x4080>
   14d00:	ldr	r3, [r4]
   14d04:	cmp	r3, #0
   14d08:	str	r3, [sp, #20]
   14d0c:	bne	14f20 <__assert_fail@plt+0x3cf4>
   14d10:	ldr	r0, [sp, #20]
   14d14:	ldr	r3, [sp, #80]	; 0x50
   14d18:	cmp	r3, #2
   14d1c:	ldr	r3, [r4, #12]
   14d20:	ble	15274 <__assert_fail@plt+0x4048>
   14d24:	ldr	r2, [sp, #24]
   14d28:	ldr	r9, [fp, r6]
   14d2c:	ldr	r2, [fp, r2, lsl #2]
   14d30:	subs	ip, r2, #0
   14d34:	bge	15290 <__assert_fail@plt+0x4064>
   14d38:	lsr	r1, r3, #16
   14d3c:	ldr	r2, [sp, #80]	; 0x50
   14d40:	uxth	r3, r3
   14d44:	str	fp, [sp, #4]
   14d48:	mov	fp, ip
   14d4c:	str	r1, [sp, #28]
   14d50:	ldr	r1, [sp, #16]
   14d54:	str	r3, [sp, #36]	; 0x24
   14d58:	lsr	r3, r9, #16
   14d5c:	sub	r2, r5, r2
   14d60:	sub	r5, r5, #1
   14d64:	str	r2, [sp, #12]
   14d68:	str	r3, [sp, #32]
   14d6c:	add	r5, r1, r5, lsl #2
   14d70:	add	r7, r1, r2, lsl #2
   14d74:	b	14eec <__assert_fail@plt+0x3cc0>
   14d78:	lsr	r4, r0, #16
   14d7c:	ldr	r6, [sp, #28]
   14d80:	uxth	r2, r0
   14d84:	ldr	r3, [sp, #36]	; 0x24
   14d88:	ldr	sl, [r5]
   14d8c:	mul	r1, r3, r4
   14d90:	mul	ip, r3, r2
   14d94:	mul	r3, r6, r4
   14d98:	mla	r2, r6, r2, r1
   14d9c:	add	r2, r2, ip, lsr #16
   14da0:	uxth	ip, ip
   14da4:	add	ip, ip, r2, lsl #16
   14da8:	cmp	r1, r2
   14dac:	sub	r1, lr, fp
   14db0:	add	r6, r0, r2, lsr #16
   14db4:	addhi	r3, r3, #65536	; 0x10000
   14db8:	uxth	r0, r9
   14dbc:	adds	ip, lr, ip
   14dc0:	ldr	r2, [sp, #80]	; 0x50
   14dc4:	movcs	r4, #1
   14dc8:	movcc	r4, #0
   14dcc:	add	r4, r4, r6
   14dd0:	ldr	r6, [sp, #32]
   14dd4:	cmp	r9, sl
   14dd8:	subhi	r1, r1, #1
   14ddc:	add	r4, r4, r3
   14de0:	sub	sl, sl, r9
   14de4:	uxth	r3, r4
   14de8:	lsr	lr, r4, #16
   14dec:	mls	r1, r4, fp, r1
   14df0:	add	r4, r4, #1
   14df4:	sub	r2, r2, #2
   14df8:	mul	r8, r3, r6
   14dfc:	mul	r3, r3, r0
   14e00:	mla	r0, lr, r0, r8
   14e04:	mul	lr, lr, r6
   14e08:	add	r0, r0, r3, lsr #16
   14e0c:	uxth	r3, r3
   14e10:	add	r3, r3, r0, lsl #16
   14e14:	cmp	r8, r0
   14e18:	sub	r1, r1, r0, lsr #16
   14e1c:	addhi	lr, lr, #65536	; 0x10000
   14e20:	cmp	sl, r3
   14e24:	subcc	r1, r1, #1
   14e28:	sub	r3, sl, r3
   14e2c:	sub	r1, r1, lr
   14e30:	cmp	ip, r1
   14e34:	movhi	ip, #0
   14e38:	movls	ip, #1
   14e3c:	rsb	sl, ip, #0
   14e40:	sub	r4, r4, ip
   14e44:	and	r6, r9, sl
   14e48:	and	r8, fp, sl
   14e4c:	adds	r6, r3, r6
   14e50:	add	r1, r8, r1
   14e54:	movcs	r8, #1
   14e58:	movcc	r8, #0
   14e5c:	add	r8, r8, r1
   14e60:	mov	sl, r6
   14e64:	cmp	fp, r8
   14e68:	bhi	14e98 <__assert_fail@plt+0x3c6c>
   14e6c:	movcc	r3, #1
   14e70:	movcs	r3, #0
   14e74:	cmp	r9, r6
   14e78:	orrls	r3, r3, #1
   14e7c:	cmp	r3, #0
   14e80:	beq	14f7c <__assert_fail@plt+0x3d50>
   14e84:	cmp	r9, r6
   14e88:	subhi	r8, r8, #1
   14e8c:	add	r4, r4, #1
   14e90:	sub	r8, r8, fp
   14e94:	sub	sl, r6, r9
   14e98:	mov	r0, r7
   14e9c:	mov	r3, r4
   14ea0:	ldr	r1, [sp, #4]
   14ea4:	bl	146e4 <__assert_fail@plt+0x34b8>
   14ea8:	cmp	r0, sl
   14eac:	sub	sl, sl, r0
   14eb0:	movls	r6, #0
   14eb4:	movhi	r6, #1
   14eb8:	cmp	r6, r8
   14ebc:	sub	r7, r7, #4
   14ec0:	str	sl, [r5]
   14ec4:	sub	r0, r8, r6
   14ec8:	bhi	14f2c <__assert_fail@plt+0x3d00>
   14ecc:	ldr	r3, [sp, #8]
   14ed0:	cmp	r3, #0
   14ed4:	ldrne	r2, [sp, #12]
   14ed8:	strne	r4, [r3, r2, lsl #2]
   14edc:	ldr	r3, [sp, #12]
   14ee0:	subs	r3, r3, #1
   14ee4:	str	r3, [sp, #12]
   14ee8:	bmi	14fa8 <__assert_fail@plt+0x3d7c>
   14eec:	ldr	lr, [r5], #-4
   14ef0:	cmp	fp, r0
   14ef4:	cmpeq	r9, lr
   14ef8:	bne	14d78 <__assert_fail@plt+0x3b4c>
   14efc:	mov	r0, r7
   14f00:	mvn	r3, #0
   14f04:	ldr	r1, [sp, #4]
   14f08:	mvn	r4, #0
   14f0c:	sub	r7, r7, #4
   14f10:	ldr	r2, [sp, #80]	; 0x50
   14f14:	bl	146e4 <__assert_fail@plt+0x34b8>
   14f18:	ldr	r0, [r5, #4]
   14f1c:	b	14ecc <__assert_fail@plt+0x3ca0>
   14f20:	ldr	r0, [sp, #16]
   14f24:	bl	14924 <__assert_fail@plt+0x36f8>
   14f28:	b	14d14 <__assert_fail@plt+0x3ae8>
   14f2c:	ldr	r3, [sp, #4]
   14f30:	mov	r2, r7
   14f34:	sub	ip, r3, #4
   14f38:	mov	r3, #0
   14f3c:	ldr	r1, [r2, #4]!
   14f40:	ldr	lr, [ip, #4]!
   14f44:	adds	r3, r1, r3
   14f48:	movcs	r1, #1
   14f4c:	movcc	r1, #0
   14f50:	adds	lr, lr, r3
   14f54:	movcs	r3, #1
   14f58:	movcc	r3, #0
   14f5c:	cmp	r5, r2
   14f60:	add	r3, r3, r1
   14f64:	str	lr, [r2]
   14f68:	bne	14f3c <__assert_fail@plt+0x3d10>
   14f6c:	add	r6, fp, r0
   14f70:	sub	r4, r4, #1
   14f74:	add	r0, r3, r6
   14f78:	b	14ecc <__assert_fail@plt+0x3ca0>
   14f7c:	mov	r3, r4
   14f80:	mov	r0, r7
   14f84:	ldr	r1, [sp, #4]
   14f88:	bl	146e4 <__assert_fail@plt+0x34b8>
   14f8c:	sub	r3, r6, r0
   14f90:	sub	r7, r7, #4
   14f94:	cmp	r6, r0
   14f98:	movcs	r0, r8
   14f9c:	subcc	r0, r8, #1
   14fa0:	str	r3, [r5]
   14fa4:	b	14ecc <__assert_fail@plt+0x3ca0>
   14fa8:	ldr	r3, [sp, #20]
   14fac:	ldr	r2, [sp, #24]
   14fb0:	cmp	r3, #0
   14fb4:	ldr	r3, [sp, #16]
   14fb8:	str	r0, [r3, r2, lsl #2]
   14fbc:	bne	14fdc <__assert_fail@plt+0x3db0>
   14fc0:	add	sp, sp, #44	; 0x2c
   14fc4:	ldrd	r4, [sp]
   14fc8:	ldrd	r6, [sp, #8]
   14fcc:	ldrd	r8, [sp, #16]
   14fd0:	ldrd	sl, [sp, #24]
   14fd4:	add	sp, sp, #32
   14fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fdc:	ldr	r1, [sp, #16]
   14fe0:	ldr	r3, [sp, #20]
   14fe4:	ldr	r2, [sp, #80]	; 0x50
   14fe8:	mov	r0, r1
   14fec:	bl	14b90 <__assert_fail@plt+0x3964>
   14ff0:	cmp	r0, #0
   14ff4:	beq	14fc0 <__assert_fail@plt+0x3d94>
   14ff8:	movw	r1, #59468	; 0xe84c
   14ffc:	movt	r1, #2
   15000:	ldr	r3, [pc, #760]	; 15300 <__assert_fail@plt+0x40d4>
   15004:	movw	r0, #59656	; 0xe908
   15008:	movt	r0, #2
   1500c:	movw	r2, #1138	; 0x472
   15010:	bl	1122c <__assert_fail@plt>
   15014:	mov	r3, r4
   15018:	bl	14a08 <__assert_fail@plt+0x37dc>
   1501c:	ldr	r3, [sp, #16]
   15020:	str	r0, [r3]
   15024:	b	14fc0 <__assert_fail@plt+0x3d94>
   15028:	cmp	r2, #1
   1502c:	ble	152c8 <__assert_fail@plt+0x409c>
   15030:	ldm	r4, {r3, r6}
   15034:	ldr	r7, [r4, #12]
   15038:	ldr	r4, [r4, #8]
   1503c:	cmp	r3, #0
   15040:	str	r3, [sp, #24]
   15044:	uxth	r8, r7
   15048:	lsr	r7, r7, #16
   1504c:	bne	151f4 <__assert_fail@plt+0x3fc8>
   15050:	ldr	lr, [sp, #24]
   15054:	sub	r3, r5, #-1073741823	; 0xc0000001
   15058:	sub	r5, r5, #2
   1505c:	lsr	fp, r4, #16
   15060:	ldr	r2, [sp, #8]
   15064:	add	r5, r2, r5, lsl #2
   15068:	uxth	r2, r4
   1506c:	str	r2, [sp, #20]
   15070:	ldr	r2, [sp, #16]
   15074:	ldr	ip, [r2, r3, lsl #2]
   15078:	add	r3, r2, r3, lsl #2
   1507c:	str	r3, [sp, #4]
   15080:	ldr	r3, [sp, #4]
   15084:	lsr	r0, lr, #16
   15088:	uxth	r1, lr
   1508c:	mul	r9, r8, r0
   15090:	mul	sl, r7, r0
   15094:	ldr	r2, [r3, #-4]!
   15098:	str	r3, [sp, #4]
   1509c:	mul	r3, r8, r1
   150a0:	mla	r1, r7, r1, r9
   150a4:	add	r1, r1, r3, lsr #16
   150a8:	uxth	r3, r3
   150ac:	add	r3, r3, r1, lsl #16
   150b0:	cmp	r9, r1
   150b4:	sub	r9, r2, r4
   150b8:	addhi	sl, sl, #65536	; 0x10000
   150bc:	add	lr, lr, r1, lsr #16
   150c0:	adds	r3, r3, ip
   150c4:	movcs	r0, #1
   150c8:	movcc	r0, #0
   150cc:	add	r0, r0, lr
   150d0:	ldr	lr, [sp, #20]
   150d4:	cmp	r4, r2
   150d8:	movls	r2, r6
   150dc:	addhi	r2, r6, #1
   150e0:	add	r0, r0, sl
   150e4:	sub	r2, ip, r2
   150e8:	str	r3, [sp, #12]
   150ec:	uxth	r1, r0
   150f0:	lsr	ip, r0, #16
   150f4:	mls	r2, r0, r6, r2
   150f8:	add	r0, r0, #1
   150fc:	mul	sl, r1, fp
   15100:	mul	r3, ip, fp
   15104:	mul	r1, lr, r1
   15108:	mla	ip, lr, ip, sl
   1510c:	add	ip, ip, r1, lsr #16
   15110:	uxth	r1, r1
   15114:	cmp	sl, ip
   15118:	add	r1, r1, ip, lsl #16
   1511c:	sub	r2, r2, ip, lsr #16
   15120:	movhi	lr, r3
   15124:	addhi	r3, lr, #65536	; 0x10000
   15128:	cmp	r9, r1
   1512c:	subcc	r2, r2, #1
   15130:	sub	r1, r9, r1
   15134:	sub	lr, r2, r3
   15138:	ldr	r3, [sp, #12]
   1513c:	cmp	r3, lr
   15140:	movhi	r3, #0
   15144:	movls	r3, #1
   15148:	rsb	r2, r3, #0
   1514c:	sub	r0, r0, r3
   15150:	and	ip, r4, r2
   15154:	and	r3, r6, r2
   15158:	adds	ip, r1, ip
   1515c:	add	lr, r3, lr
   15160:	movcs	r3, #1
   15164:	movcc	r3, #0
   15168:	add	lr, r3, lr
   1516c:	cmp	r6, lr
   15170:	bhi	151a0 <__assert_fail@plt+0x3f74>
   15174:	movcc	r3, #1
   15178:	movcs	r3, #0
   1517c:	cmp	r4, ip
   15180:	orrls	r3, r3, #1
   15184:	cmp	r3, #0
   15188:	beq	151a0 <__assert_fail@plt+0x3f74>
   1518c:	cmp	r4, ip
   15190:	subhi	lr, lr, #1
   15194:	add	r0, r0, #1
   15198:	sub	lr, lr, r6
   1519c:	sub	ip, ip, r4
   151a0:	ldr	r3, [sp, #8]
   151a4:	cmp	r3, #0
   151a8:	ldr	r3, [sp, #8]
   151ac:	strne	r0, [r5]
   151b0:	cmp	r3, r5
   151b4:	sub	r5, r5, #4
   151b8:	bne	15080 <__assert_fail@plt+0x3e54>
   151bc:	ldr	r3, [sp, #24]
   151c0:	cmp	r3, #0
   151c4:	beq	151e8 <__assert_fail@plt+0x3fbc>
   151c8:	rsb	r3, r3, #32
   151cc:	mvn	r2, #0
   151d0:	ands	r2, ip, r2, lsr r3
   151d4:	bne	152e4 <__assert_fail@plt+0x40b8>
   151d8:	ldr	r2, [sp, #24]
   151dc:	lsl	r3, lr, r3
   151e0:	lsr	lr, lr, r2
   151e4:	orr	ip, r3, ip, lsr r2
   151e8:	ldr	r3, [sp, #16]
   151ec:	stm	r3, {ip, lr}
   151f0:	b	14fc0 <__assert_fail@plt+0x3d94>
   151f4:	ldr	r0, [sp, #16]
   151f8:	bl	14924 <__assert_fail@plt+0x36f8>
   151fc:	mov	lr, r0
   15200:	b	15054 <__assert_fail@plt+0x3e28>
   15204:	movw	r1, #59468	; 0xe84c
   15208:	movt	r1, #2
   1520c:	ldr	r3, [pc, #236]	; 15300 <__assert_fail@plt+0x40d4>
   15210:	movw	r0, #59844	; 0xe9c4
   15214:	movt	r0, #2
   15218:	movw	r2, #1113	; 0x459
   1521c:	bl	1122c <__assert_fail@plt>
   15220:	movw	r1, #59468	; 0xe84c
   15224:	movt	r1, #2
   15228:	ldr	r3, [pc, #208]	; 15300 <__assert_fail@plt+0x40d4>
   1522c:	movw	r0, #59852	; 0xe9cc
   15230:	movt	r0, #2
   15234:	movw	r2, #1114	; 0x45a
   15238:	bl	1122c <__assert_fail@plt>
   1523c:	movw	r1, #59468	; 0xe84c
   15240:	movt	r1, #2
   15244:	ldr	r3, [pc, #180]	; 15300 <__assert_fail@plt+0x40d4>
   15248:	movw	r0, #59948	; 0xea2c
   1524c:	movt	r0, #2
   15250:	movw	r2, #1126	; 0x466
   15254:	bl	1122c <__assert_fail@plt>
   15258:	movw	r1, #59468	; 0xe84c
   1525c:	movt	r1, #2
   15260:	ldr	r3, [pc, #152]	; 15300 <__assert_fail@plt+0x40d4>
   15264:	movw	r0, #59928	; 0xea18
   15268:	movt	r0, #2
   1526c:	movw	r2, #1125	; 0x465
   15270:	bl	1122c <__assert_fail@plt>
   15274:	movw	r1, #59468	; 0xe84c
   15278:	movt	r1, #2
   1527c:	ldr	r3, [pc, #128]	; 15304 <__assert_fail@plt+0x40d8>
   15280:	movw	r0, #60004	; 0xea64
   15284:	movt	r0, #2
   15288:	movw	r2, #1057	; 0x421
   1528c:	bl	1122c <__assert_fail@plt>
   15290:	movw	r1, #59468	; 0xe84c
   15294:	movt	r1, #2
   15298:	ldr	r3, [pc, #100]	; 15304 <__assert_fail@plt+0x40d8>
   1529c:	movw	r0, #60012	; 0xea6c
   152a0:	movt	r0, #2
   152a4:	movw	r2, #1063	; 0x427
   152a8:	bl	1122c <__assert_fail@plt>
   152ac:	movw	r1, #59468	; 0xe84c
   152b0:	movt	r1, #2
   152b4:	ldr	r3, [pc, #68]	; 15300 <__assert_fail@plt+0x40d4>
   152b8:	movw	r0, #59968	; 0xea40
   152bc:	movt	r0, #2
   152c0:	movw	r2, #1127	; 0x467
   152c4:	bl	1122c <__assert_fail@plt>
   152c8:	movw	r1, #59468	; 0xe84c
   152cc:	movt	r1, #2
   152d0:	ldr	r3, [pc, #48]	; 15308 <__assert_fail@plt+0x40dc>
   152d4:	movw	r0, #59864	; 0xe9d8
   152d8:	movt	r0, #2
   152dc:	movw	r2, #1009	; 0x3f1
   152e0:	bl	1122c <__assert_fail@plt>
   152e4:	movw	r1, #59468	; 0xe84c
   152e8:	movt	r1, #2
   152ec:	ldr	r3, [pc, #20]	; 15308 <__assert_fail@plt+0x40dc>
   152f0:	movw	r0, #59872	; 0xe9e0
   152f4:	movt	r0, #2
   152f8:	movw	r2, #1036	; 0x40c
   152fc:	bl	1122c <__assert_fail@plt>
   15300:	andeq	lr, r2, ip, lsr r6
   15304:	andeq	lr, r2, r4, ror #12
   15308:	andeq	lr, r2, r0, asr r6
   1530c:	lsr	r3, r1, #5
   15310:	mov	r2, r0
   15314:	and	ip, r1, #31
   15318:	mov	r1, #0
   1531c:	push	{lr}		; (str lr, [sp, #-4]!)
   15320:	sub	sp, sp, #12
   15324:	ldr	r0, [r0, r3, lsl #2]
   15328:	mvn	lr, #0
   1532c:	str	r1, [sp]
   15330:	mov	r1, r3
   15334:	and	r0, r0, lr, lsl ip
   15338:	bl	13668 <__assert_fail@plt+0x243c>
   1533c:	add	sp, sp, #12
   15340:	pop	{pc}		; (ldr pc, [sp], #4)
   15344:	lsr	r3, r1, #5
   15348:	mov	r2, r0
   1534c:	and	r1, r1, #31
   15350:	push	{lr}		; (str lr, [sp, #-4]!)
   15354:	mvn	lr, #0
   15358:	sub	sp, sp, #12
   1535c:	ldr	r0, [r0, r3, lsl #2]
   15360:	lsl	ip, lr, r1
   15364:	mov	r1, r3
   15368:	str	lr, [sp]
   1536c:	bic	r0, ip, r0
   15370:	bl	13668 <__assert_fail@plt+0x243c>
   15374:	add	sp, sp, #12
   15378:	pop	{pc}		; (ldr pc, [sp], #4)
   1537c:	subs	r2, r2, #1
   15380:	bmi	1539c <__assert_fail@plt+0x4170>
   15384:	ldr	r3, [r1], #4
   15388:	sub	r2, r2, #1
   1538c:	cmn	r2, #1
   15390:	mvn	r3, r3
   15394:	str	r3, [r0], #4
   15398:	bne	15384 <__assert_fail@plt+0x4158>
   1539c:	bx	lr
   153a0:	strd	r4, [sp, #-12]!
   153a4:	ldr	r5, [r1]
   153a8:	str	lr, [sp, #8]
   153ac:	cmp	r5, #0
   153b0:	bne	15434 <__assert_fail@plt+0x4208>
   153b4:	sub	r3, r2, #1
   153b8:	str	r5, [r0]
   153bc:	cmp	r3, #0
   153c0:	beq	15424 <__assert_fail@plt+0x41f8>
   153c4:	add	ip, r1, #4
   153c8:	add	lr, r0, #4
   153cc:	b	153dc <__assert_fail@plt+0x41b0>
   153d0:	subs	r3, r4, #0
   153d4:	str	r2, [lr], #4
   153d8:	beq	15424 <__assert_fail@plt+0x41f8>
   153dc:	mov	r1, ip
   153e0:	ldr	r2, [ip], #4
   153e4:	mov	r0, lr
   153e8:	sub	r4, r3, #1
   153ec:	cmp	r2, #0
   153f0:	beq	153d0 <__assert_fail@plt+0x41a4>
   153f4:	rsb	r2, r2, #0
   153f8:	subs	r3, r3, #2
   153fc:	add	r1, r1, #4
   15400:	str	r2, [r0], #4
   15404:	bmi	15420 <__assert_fail@plt+0x41f4>
   15408:	ldr	r2, [r1], #4
   1540c:	sub	r3, r3, #1
   15410:	cmn	r3, #1
   15414:	mvn	r2, r2
   15418:	str	r2, [r0], #4
   1541c:	bne	15408 <__assert_fail@plt+0x41dc>
   15420:	mov	r5, #1
   15424:	mov	r0, r5
   15428:	ldrd	r4, [sp]
   1542c:	add	sp, sp, #8
   15430:	pop	{pc}		; (ldr pc, [sp], #4)
   15434:	mov	r3, r2
   15438:	mov	r2, r5
   1543c:	b	153f4 <__assert_fail@plt+0x41c8>
   15440:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15444:	strd	r6, [sp, #8]
   15448:	mov	r7, r0
   1544c:	strd	r8, [sp, #16]
   15450:	ldr	r8, [r1, #4]
   15454:	strd	sl, [sp, #24]
   15458:	str	lr, [sp, #32]
   1545c:	sub	sp, sp, #12
   15460:	cmp	r2, #0
   15464:	cmpne	r8, #0
   15468:	moveq	r3, #0
   1546c:	streq	r3, [r0, #4]
   15470:	beq	15590 <__assert_fail@plt+0x4364>
   15474:	mov	r6, r2
   15478:	mov	r9, r1
   1547c:	add	fp, r6, #31
   15480:	mov	r2, r3
   15484:	lsr	sl, fp, #5
   15488:	cmp	sl, #0
   1548c:	mov	r4, sl
   15490:	beq	15664 <__assert_fail@plt+0x4438>
   15494:	ldr	r3, [r0]
   15498:	cmp	r3, sl
   1549c:	blt	155ac <__assert_fail@plt+0x4380>
   154a0:	ldr	r5, [r0, #8]
   154a4:	bic	r3, fp, #31
   154a8:	eor	fp, r8, r8, asr #31
   154ac:	cmp	r8, #0
   154b0:	sub	r6, r3, r6
   154b4:	movle	r0, #0
   154b8:	sub	fp, fp, r8, asr #31
   154bc:	mvn	r3, #0
   154c0:	movgt	r0, #1
   154c4:	lsr	r6, r3, r6
   154c8:	cmp	sl, fp
   154cc:	ble	15518 <__assert_fail@plt+0x42ec>
   154d0:	cmp	r2, r0
   154d4:	beq	155f4 <__assert_fail@plt+0x43c8>
   154d8:	sub	r3, fp, #-1073741823	; 0xc0000001
   154dc:	cmp	r9, r7
   154e0:	lsl	r0, r3, #2
   154e4:	add	ip, r5, r0
   154e8:	beq	155c4 <__assert_fail@plt+0x4398>
   154ec:	ldr	r3, [r9, #8]
   154f0:	add	r0, r0, #4
   154f4:	sub	r2, r5, #4
   154f8:	add	r0, r0, r3
   154fc:	ldr	r1, [r3], #4
   15500:	cmp	r3, r0
   15504:	str	r1, [r2, #4]!
   15508:	bne	154fc <__assert_fail@plt+0x42d0>
   1550c:	mov	r4, fp
   15510:	ldr	r2, [ip]
   15514:	b	15564 <__assert_fail@plt+0x4338>
   15518:	cmp	r9, r7
   1551c:	ldr	fp, [r9, #8]
   15520:	beq	1554c <__assert_fail@plt+0x4320>
   15524:	cmp	sl, #1
   15528:	beq	1554c <__assert_fail@plt+0x4320>
   1552c:	add	lr, fp, sl, lsl #2
   15530:	sub	r3, fp, #4
   15534:	sub	r1, r5, #4
   15538:	sub	lr, lr, #8
   1553c:	ldr	ip, [r3, #4]!
   15540:	cmp	lr, r3
   15544:	str	ip, [r1, #4]!
   15548:	bne	1553c <__assert_fail@plt+0x4310>
   1554c:	sub	r9, sl, #-1073741823	; 0xc0000001
   15550:	cmp	r2, r0
   15554:	ldr	r2, [fp, r9, lsl #2]
   15558:	and	r2, r2, r6
   1555c:	str	r2, [r5, r9, lsl #2]
   15560:	beq	155d0 <__assert_fail@plt+0x43a4>
   15564:	sub	r3, r4, #-1073741823	; 0xc0000001
   15568:	add	r3, r5, r3, lsl #2
   1556c:	b	15574 <__assert_fail@plt+0x4348>
   15570:	ldr	r2, [r3, #-4]!
   15574:	cmp	r2, #0
   15578:	bne	15584 <__assert_fail@plt+0x4358>
   1557c:	subs	r4, r4, #1
   15580:	bne	15570 <__assert_fail@plt+0x4344>
   15584:	cmp	r8, #0
   15588:	rsblt	r4, r4, #0
   1558c:	str	r4, [r7, #4]
   15590:	add	sp, sp, #12
   15594:	ldrd	r4, [sp]
   15598:	ldrd	r6, [sp, #8]
   1559c:	ldrd	r8, [sp, #16]
   155a0:	ldrd	sl, [sp, #24]
   155a4:	add	sp, sp, #32
   155a8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ac:	mov	r1, sl
   155b0:	str	r2, [sp, #4]
   155b4:	bl	13584 <__assert_fail@plt+0x2358>
   155b8:	mov	r5, r0
   155bc:	ldr	r2, [sp, #4]
   155c0:	b	154a4 <__assert_fail@plt+0x4278>
   155c4:	mov	r4, fp
   155c8:	ldr	r2, [r5, r3, lsl #2]
   155cc:	b	15564 <__assert_fail@plt+0x4338>
   155d0:	mov	r2, sl
   155d4:	mov	r1, r5
   155d8:	mov	r0, r5
   155dc:	rsb	r8, r8, #0
   155e0:	bl	153a0 <__assert_fail@plt+0x4174>
   155e4:	ldr	r2, [r5, r9, lsl #2]
   155e8:	and	r2, r2, r6
   155ec:	str	r2, [r5, r9, lsl #2]
   155f0:	b	15564 <__assert_fail@plt+0x4338>
   155f4:	mov	r2, fp
   155f8:	mov	r0, r5
   155fc:	ldr	r1, [r9, #8]
   15600:	bl	153a0 <__assert_fail@plt+0x4174>
   15604:	cmp	r0, #0
   15608:	beq	15648 <__assert_fail@plt+0x441c>
   1560c:	sub	r2, sl, #1
   15610:	mvn	r3, #0
   15614:	cmp	fp, r2
   15618:	bge	15634 <__assert_fail@plt+0x4408>
   1561c:	add	r2, r5, sl, lsl #2
   15620:	add	fp, r5, fp, lsl #2
   15624:	sub	r2, r2, #4
   15628:	str	r3, [fp], #4
   1562c:	cmp	r2, fp
   15630:	bne	15628 <__assert_fail@plt+0x43fc>
   15634:	sub	sl, sl, #-1073741823	; 0xc0000001
   15638:	rsb	r8, r8, #0
   1563c:	mov	r2, r6
   15640:	str	r6, [r5, sl, lsl #2]
   15644:	b	15564 <__assert_fail@plt+0x4338>
   15648:	movw	r1, #59468	; 0xe84c
   1564c:	movt	r1, #2
   15650:	ldr	r3, [pc, #40]	; 15680 <__assert_fail@plt+0x4454>
   15654:	movw	r0, #59656	; 0xe908
   15658:	movt	r0, #2
   1565c:	movw	r2, #2443	; 0x98b
   15660:	bl	1122c <__assert_fail@plt>
   15664:	movw	r1, #59468	; 0xe84c
   15668:	movt	r1, #2
   1566c:	ldr	r3, [pc, #12]	; 15680 <__assert_fail@plt+0x4454>
   15670:	movw	r0, #60044	; 0xea8c
   15674:	movt	r0, #2
   15678:	movw	r2, #2427	; 0x97b
   1567c:	bl	1122c <__assert_fail@plt>
   15680:	andeq	lr, r2, r4, ror r6
   15684:	strd	r4, [sp, #-16]!
   15688:	mvn	r4, r0
   1568c:	uxth	r3, r0
   15690:	mov	ip, r0
   15694:	movw	r2, #65535	; 0xffff
   15698:	str	r6, [sp, #8]
   1569c:	str	lr, [sp, #12]
   156a0:	lsr	lr, r0, #16
   156a4:	udiv	r0, r4, lr
   156a8:	mls	r4, lr, r0, r4
   156ac:	mul	lr, r0, r3
   156b0:	orr	r3, r2, r4, lsl #16
   156b4:	cmp	r3, lr
   156b8:	bcs	156e8 <__assert_fail@plt+0x44bc>
   156bc:	adds	r3, ip, r3
   156c0:	movcs	r2, #1
   156c4:	movcc	r2, #0
   156c8:	eor	r2, r2, #1
   156cc:	cmp	lr, r3
   156d0:	movls	r2, #0
   156d4:	andhi	r2, r2, #1
   156d8:	cmp	r2, #0
   156dc:	subeq	r0, r0, #1
   156e0:	subne	r0, r0, #2
   156e4:	addne	r3, r3, ip
   156e8:	sub	r3, r3, lr
   156ec:	movw	r2, #65535	; 0xffff
   156f0:	lsr	lr, r3, #16
   156f4:	add	r2, r2, r3, lsl #16
   156f8:	mla	r3, r0, lr, r3
   156fc:	lsr	r4, r3, #16
   15700:	add	lr, r4, #1
   15704:	mls	r2, lr, ip, r2
   15708:	cmp	r2, r3, lsl #16
   1570c:	movcs	lr, r4
   15710:	addcs	r2, r2, ip
   15714:	add	r0, lr, r0, lsl #16
   15718:	cmp	r2, ip
   1571c:	subcs	r2, r2, ip
   15720:	addcs	r0, r0, #1
   15724:	cmp	r1, #0
   15728:	beq	15784 <__assert_fail@plt+0x4558>
   1572c:	mvn	r2, r2
   15730:	adds	r2, r1, r2
   15734:	bcc	1574c <__assert_fail@plt+0x4520>
   15738:	cmp	ip, r2
   1573c:	sub	r2, r2, ip
   15740:	subhi	r0, r0, #1
   15744:	subls	r0, r0, #2
   15748:	subls	r2, r2, ip
   1574c:	lsr	r3, r1, #16
   15750:	uxth	r5, r0
   15754:	uxth	r4, r1
   15758:	lsr	lr, r0, #16
   1575c:	mul	r6, r5, r4
   15760:	mul	r5, r5, r3
   15764:	mul	r3, lr, r3
   15768:	mla	lr, lr, r4, r5
   1576c:	add	lr, lr, r6, lsr #16
   15770:	cmp	r5, lr
   15774:	addhi	r3, r3, #65536	; 0x10000
   15778:	add	r3, r3, lr, lsr #16
   1577c:	adds	r2, r2, r3
   15780:	bcs	15794 <__assert_fail@plt+0x4568>
   15784:	ldrd	r4, [sp]
   15788:	ldr	r6, [sp, #8]
   1578c:	add	sp, sp, #12
   15790:	pop	{pc}		; (ldr pc, [sp], #4)
   15794:	uxth	r6, r6
   15798:	sub	r0, r0, #1
   1579c:	add	r6, r6, lr, lsl #16
   157a0:	cmp	r1, r6
   157a4:	movcs	r1, #0
   157a8:	movcc	r1, #1
   157ac:	cmp	ip, r2
   157b0:	movne	r1, #0
   157b4:	movcs	r3, r1
   157b8:	orrcc	r3, r1, #1
   157bc:	sub	r0, r0, r3
   157c0:	b	15784 <__assert_fail@plt+0x4558>
   157c4:	cmp	r1, #0
   157c8:	str	r4, [sp, #-8]!
   157cc:	str	lr, [sp, #4]
   157d0:	beq	15830 <__assert_fail@plt+0x4604>
   157d4:	ands	r2, r1, #-16777216	; 0xff000000
   157d8:	mov	r4, r0
   157dc:	mov	r3, r1
   157e0:	movne	r2, #0
   157e4:	bne	157f8 <__assert_fail@plt+0x45cc>
   157e8:	lsl	r3, r3, #8
   157ec:	add	r2, r2, #8
   157f0:	tst	r3, #-16777216	; 0xff000000
   157f4:	beq	157e8 <__assert_fail@plt+0x45bc>
   157f8:	cmp	r3, #0
   157fc:	blt	1580c <__assert_fail@plt+0x45e0>
   15800:	lsls	r3, r3, #1
   15804:	add	r2, r2, #1
   15808:	bpl	15800 <__assert_fail@plt+0x45d4>
   1580c:	lsl	r3, r1, r2
   15810:	mov	r1, #0
   15814:	mov	r0, r3
   15818:	strd	r2, [r4]
   1581c:	bl	15684 <__assert_fail@plt+0x4458>
   15820:	str	r0, [r4, #12]
   15824:	ldr	r4, [sp]
   15828:	add	sp, sp, #4
   1582c:	pop	{pc}		; (ldr pc, [sp], #4)
   15830:	movw	r1, #59468	; 0xe84c
   15834:	movt	r1, #2
   15838:	ldr	r3, [pc, #12]	; 1584c <__assert_fail@plt+0x4620>
   1583c:	movw	r0, #60052	; 0xea94
   15840:	movt	r0, #2
   15844:	movw	r2, #902	; 0x386
   15848:	bl	1122c <__assert_fail@plt>
   1584c:	andeq	lr, r2, r4, lsl #13
   15850:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15854:	mov	r5, r0
   15858:	strd	r6, [sp, #8]
   1585c:	mov	r6, r2
   15860:	mov	r7, r3
   15864:	strd	r8, [sp, #16]
   15868:	str	sl, [sp, #24]
   1586c:	str	lr, [sp, #28]
   15870:	sub	sp, sp, #32
   15874:	mov	r0, sp
   15878:	ldr	sl, [sp, #64]	; 0x40
   1587c:	ldr	r9, [sp, #68]	; 0x44
   15880:	bl	157c4 <__assert_fail@plt+0x4598>
   15884:	cmp	r9, #1
   15888:	movle	r0, r5
   1588c:	movle	r4, #0
   15890:	bgt	158f0 <__assert_fail@plt+0x46c4>
   15894:	mov	r2, sp
   15898:	ldr	r1, [sl]
   1589c:	bl	1345c <__assert_fail@plt+0x2230>
   158a0:	add	r0, r4, r0
   158a4:	cmp	r0, #1
   158a8:	bls	158d4 <__assert_fail@plt+0x46a8>
   158ac:	sub	ip, r0, #2
   158b0:	sub	r3, r5, #1
   158b4:	add	ip, r5, ip, lsr #1
   158b8:	add	r5, r5, r0
   158bc:	ldrb	r2, [r3, #1]!
   158c0:	ldrb	r1, [r5, #-1]!
   158c4:	cmp	r3, ip
   158c8:	strb	r1, [r3]
   158cc:	strb	r2, [r5]
   158d0:	bne	158bc <__assert_fail@plt+0x4690>
   158d4:	add	sp, sp, #32
   158d8:	ldrd	r4, [sp]
   158dc:	ldrd	r6, [sp, #8]
   158e0:	ldrd	r8, [sp, #16]
   158e4:	ldr	sl, [sp, #24]
   158e8:	add	sp, sp, #28
   158ec:	pop	{pc}		; (ldr pc, [sp], #4)
   158f0:	mov	r4, #0
   158f4:	add	r0, sp, #16
   158f8:	ldr	r1, [r7]
   158fc:	mov	r8, r4
   15900:	rsb	r7, r5, #1
   15904:	bl	157c4 <__assert_fail@plt+0x4598>
   15908:	mov	r2, r9
   1590c:	add	r3, sp, #16
   15910:	mov	r1, sl
   15914:	mov	r0, sl
   15918:	bl	14a08 <__assert_fail@plt+0x37dc>
   1591c:	sub	r3, r9, #-1073741823	; 0xc0000001
   15920:	mov	r1, r0
   15924:	ldr	r3, [sl, r3, lsl #2]
   15928:	add	r0, r5, r4
   1592c:	mov	r2, sp
   15930:	cmp	r3, #0
   15934:	subeq	r9, r9, #1
   15938:	bl	1345c <__assert_fail@plt+0x2230>
   1593c:	ldr	r3, [r6]
   15940:	add	r4, r4, r0
   15944:	cmp	r0, r3
   15948:	bcs	15970 <__assert_fail@plt+0x4744>
   1594c:	sub	r0, r0, r5
   15950:	add	r3, r5, r4
   15954:	sub	r0, r0, r4
   15958:	add	r4, r7, r3
   1595c:	strb	r8, [r3], #1
   15960:	add	r2, r3, r0
   15964:	ldr	r1, [r6]
   15968:	cmp	r1, r2
   1596c:	bhi	15958 <__assert_fail@plt+0x472c>
   15970:	cmp	r9, #1
   15974:	bne	15908 <__assert_fail@plt+0x46dc>
   15978:	add	r0, r5, r4
   1597c:	b	15894 <__assert_fail@plt+0x4668>
   15980:	cmp	r2, #0
   15984:	str	r4, [sp, #-8]!
   15988:	str	lr, [sp, #4]
   1598c:	beq	15ad4 <__assert_fail@plt+0x48a8>
   15990:	cmp	r2, #1
   15994:	beq	15a30 <__assert_fail@plt+0x4804>
   15998:	cmp	r2, #2
   1599c:	mov	r4, r0
   159a0:	beq	15a44 <__assert_fail@plt+0x4818>
   159a4:	sub	r2, r2, #-1073741823	; 0xc0000001
   159a8:	ldr	ip, [r1, r2, lsl #2]
   159ac:	add	r1, r1, r2, lsl #2
   159b0:	ldr	lr, [r1, #-4]
   159b4:	cmp	ip, #0
   159b8:	beq	15b0c <__assert_fail@plt+0x48e0>
   159bc:	ands	r2, ip, #-16777216	; 0xff000000
   159c0:	moveq	r3, ip
   159c4:	bne	15aa4 <__assert_fail@plt+0x4878>
   159c8:	lsl	r3, r3, #8
   159cc:	add	r2, r2, #8
   159d0:	tst	r3, #-16777216	; 0xff000000
   159d4:	beq	159c8 <__assert_fail@plt+0x479c>
   159d8:	cmp	r3, #0
   159dc:	blt	159ec <__assert_fail@plt+0x47c0>
   159e0:	lsls	r3, r3, #1
   159e4:	add	r2, r2, #1
   159e8:	bpl	159e0 <__assert_fail@plt+0x47b4>
   159ec:	cmp	r2, #0
   159f0:	str	r2, [r4]
   159f4:	beq	15a10 <__assert_fail@plt+0x47e4>
   159f8:	ldr	r3, [r1, #-8]
   159fc:	rsb	r1, r2, #32
   15a00:	lsr	r0, lr, r1
   15a04:	orr	ip, r0, ip, lsl r2
   15a08:	lsr	r3, r3, r1
   15a0c:	orr	lr, r3, lr, lsl r2
   15a10:	mov	r1, lr
   15a14:	mov	r0, ip
   15a18:	stmib	r4, {ip, lr}
   15a1c:	bl	15684 <__assert_fail@plt+0x4458>
   15a20:	str	r0, [r4, #12]
   15a24:	ldr	r4, [sp]
   15a28:	add	sp, sp, #4
   15a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a30:	ldr	r4, [sp]
   15a34:	ldr	r1, [r1]
   15a38:	ldr	lr, [sp, #4]
   15a3c:	add	sp, sp, #8
   15a40:	b	157c4 <__assert_fail@plt+0x4598>
   15a44:	ldr	lr, [r1]
   15a48:	ldr	ip, [r1, #4]
   15a4c:	cmp	ip, #0
   15a50:	beq	15af0 <__assert_fail@plt+0x48c4>
   15a54:	ands	r2, ip, #-16777216	; 0xff000000
   15a58:	moveq	r3, ip
   15a5c:	bne	15ac0 <__assert_fail@plt+0x4894>
   15a60:	lsl	r3, r3, #8
   15a64:	add	r2, r2, #8
   15a68:	tst	r3, #-16777216	; 0xff000000
   15a6c:	beq	15a60 <__assert_fail@plt+0x4834>
   15a70:	cmp	r3, #0
   15a74:	blt	15a84 <__assert_fail@plt+0x4858>
   15a78:	lsls	r3, r3, #1
   15a7c:	add	r2, r2, #1
   15a80:	bpl	15a78 <__assert_fail@plt+0x484c>
   15a84:	cmp	r2, #0
   15a88:	str	r2, [r4]
   15a8c:	beq	15a10 <__assert_fail@plt+0x47e4>
   15a90:	lsl	ip, ip, r2
   15a94:	rsb	r3, r2, #32
   15a98:	orr	ip, ip, lr, lsr r3
   15a9c:	lsl	lr, lr, r2
   15aa0:	b	15a10 <__assert_fail@plt+0x47e4>
   15aa4:	cmp	ip, #0
   15aa8:	movge	r3, ip
   15aac:	movge	r2, #0
   15ab0:	bge	159e0 <__assert_fail@plt+0x47b4>
   15ab4:	mov	r3, #0
   15ab8:	str	r3, [r4]
   15abc:	b	15a10 <__assert_fail@plt+0x47e4>
   15ac0:	cmp	ip, #0
   15ac4:	movge	r3, ip
   15ac8:	movge	r2, #0
   15acc:	bge	15a78 <__assert_fail@plt+0x484c>
   15ad0:	b	15ab4 <__assert_fail@plt+0x4888>
   15ad4:	movw	r1, #59468	; 0xe84c
   15ad8:	movt	r1, #2
   15adc:	ldr	r3, [pc, #68]	; 15b28 <__assert_fail@plt+0x48fc>
   15ae0:	movw	r0, #59844	; 0xe9c4
   15ae4:	movt	r0, #2
   15ae8:	mov	r2, #932	; 0x3a4
   15aec:	bl	1122c <__assert_fail@plt>
   15af0:	movw	r1, #59468	; 0xe84c
   15af4:	movt	r1, #2
   15af8:	ldr	r3, [pc, #44]	; 15b2c <__assert_fail@plt+0x4900>
   15afc:	movw	r0, #60060	; 0xea9c
   15b00:	movt	r0, #2
   15b04:	movw	r2, #915	; 0x393
   15b08:	bl	1122c <__assert_fail@plt>
   15b0c:	movw	r1, #59468	; 0xe84c
   15b10:	movt	r1, #2
   15b14:	ldr	r3, [pc, #12]	; 15b28 <__assert_fail@plt+0x48fc>
   15b18:	movw	r0, #60060	; 0xea9c
   15b1c:	movt	r0, #2
   15b20:	movw	r2, #945	; 0x3b1
   15b24:	bl	1122c <__assert_fail@plt>
   15b28:	muleq	r2, r8, r6
   15b2c:	andeq	lr, r2, ip, lsr #13
   15b30:	strd	r4, [sp, #-12]!
   15b34:	subs	r4, r3, #0
   15b38:	str	lr, [sp, #8]
   15b3c:	sub	sp, sp, #20
   15b40:	ble	15bfc <__assert_fail@plt+0x49d0>
   15b44:	sub	r3, r4, #-1073741823	; 0xc0000001
   15b48:	ldr	r3, [r2, r3, lsl #2]
   15b4c:	cmp	r3, #0
   15b50:	beq	15be0 <__assert_fail@plt+0x49b4>
   15b54:	mov	r5, r0
   15b58:	mov	r0, r1
   15b5c:	bl	132b8 <__assert_fail@plt+0x208c>
   15b60:	cmp	r0, #0
   15b64:	bne	15bc0 <__assert_fail@plt+0x4994>
   15b68:	umull	r3, lr, r1, r1
   15b6c:	mov	ip, r1
   15b70:	adds	lr, lr, #0
   15b74:	movne	lr, #1
   15b78:	cmp	lr, #0
   15b7c:	moveq	lr, #1
   15b80:	bne	15b98 <__assert_fail@plt+0x496c>
   15b84:	mul	ip, r1, ip
   15b88:	add	lr, lr, #1
   15b8c:	umull	r0, r3, r1, ip
   15b90:	cmp	r3, #0
   15b94:	beq	15b84 <__assert_fail@plt+0x4958>
   15b98:	mov	r0, r5
   15b9c:	add	r3, sp, #12
   15ba0:	stm	sp, {r2, r4, lr}
   15ba4:	add	r2, sp, #8
   15ba8:	str	ip, [sp, #12]
   15bac:	bl	15850 <__assert_fail@plt+0x4624>
   15bb0:	add	sp, sp, #20
   15bb4:	ldrd	r4, [sp]
   15bb8:	add	sp, sp, #8
   15bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc0:	mov	r1, r0
   15bc4:	mov	r3, r4
   15bc8:	mov	r0, r5
   15bcc:	bl	137ac <__assert_fail@plt+0x2580>
   15bd0:	add	sp, sp, #20
   15bd4:	ldrd	r4, [sp]
   15bd8:	add	sp, sp, #8
   15bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15be0:	movw	r1, #59468	; 0xe84c
   15be4:	movt	r1, #2
   15be8:	ldr	r3, [pc, #40]	; 15c18 <__assert_fail@plt+0x49ec>
   15bec:	movw	r0, #60076	; 0xeaac
   15bf0:	movt	r0, #2
   15bf4:	movw	r2, #1317	; 0x525
   15bf8:	bl	1122c <__assert_fail@plt>
   15bfc:	movw	r1, #59468	; 0xe84c
   15c00:	movt	r1, #2
   15c04:	ldr	r3, [pc, #12]	; 15c18 <__assert_fail@plt+0x49ec>
   15c08:	movw	r0, #60068	; 0xeaa4
   15c0c:	movt	r0, #2
   15c10:	movw	r2, #1316	; 0x524
   15c14:	bl	1122c <__assert_fail@plt>
   15c18:	andeq	lr, r2, r0, asr #13
   15c1c:	cmp	r2, #0
   15c20:	beq	15cb8 <__assert_fail@plt+0x4a8c>
   15c24:	strd	r4, [sp, #-16]!
   15c28:	mov	r5, r0
   15c2c:	mov	r0, r3
   15c30:	str	r6, [sp, #8]
   15c34:	str	lr, [sp, #12]
   15c38:	sub	sp, sp, #16
   15c3c:	bl	132b8 <__assert_fail@plt+0x208c>
   15c40:	cmp	r0, #0
   15c44:	bne	15c98 <__assert_fail@plt+0x4a6c>
   15c48:	umull	r0, lr, r3, r3
   15c4c:	mov	ip, r3
   15c50:	adds	lr, lr, #0
   15c54:	movne	lr, #1
   15c58:	cmp	lr, #0
   15c5c:	moveq	lr, #1
   15c60:	bne	15c78 <__assert_fail@plt+0x4a4c>
   15c64:	mul	ip, r3, ip
   15c68:	add	lr, lr, #1
   15c6c:	umull	r0, r4, r3, ip
   15c70:	cmp	r4, #0
   15c74:	beq	15c64 <__assert_fail@plt+0x4a38>
   15c78:	add	r6, sp, #8
   15c7c:	add	r4, sp, #12
   15c80:	mov	r0, r5
   15c84:	str	r6, [sp]
   15c88:	stmib	sp, {r4, lr}
   15c8c:	str	ip, [sp, #12]
   15c90:	bl	14494 <__assert_fail@plt+0x3268>
   15c94:	b	15ca4 <__assert_fail@plt+0x4a78>
   15c98:	mov	r3, r0
   15c9c:	mov	r0, r5
   15ca0:	bl	13340 <__assert_fail@plt+0x2114>
   15ca4:	add	sp, sp, #16
   15ca8:	ldrd	r4, [sp]
   15cac:	ldr	r6, [sp, #8]
   15cb0:	add	sp, sp, #12
   15cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb8:	mov	r0, r2
   15cbc:	bx	lr
   15cc0:	ldr	r2, [pc, #16]	; 15cd8 <__assert_fail@plt+0x4aac>
   15cc4:	mov	r3, #0
   15cc8:	str	r3, [r0]
   15ccc:	str	r3, [r0, #4]
   15cd0:	str	r2, [r0, #8]
   15cd4:	bx	lr
   15cd8:	andeq	lr, r2, ip, asr #13
   15cdc:	cmp	r1, #0
   15ce0:	subne	r1, r1, #1
   15ce4:	mov	r2, #0
   15ce8:	str	r4, [sp, #-8]!
   15cec:	lsr	r1, r1, #5
   15cf0:	mov	r4, r0
   15cf4:	movw	r3, #292	; 0x124
   15cf8:	movt	r3, #4
   15cfc:	add	r1, r1, #1
   15d00:	ldr	r3, [r3, #4]
   15d04:	lsl	r0, r1, #2
   15d08:	str	lr, [sp, #4]
   15d0c:	stm	r4, {r1, r2}
   15d10:	blx	r3
   15d14:	str	r0, [r4, #8]
   15d18:	ldr	r4, [sp]
   15d1c:	add	sp, sp, #4
   15d20:	pop	{pc}		; (ldr pc, [sp], #4)
   15d24:	ldr	r1, [r0]
   15d28:	cmp	r1, #0
   15d2c:	beq	15d48 <__assert_fail@plt+0x4b1c>
   15d30:	movw	r3, #292	; 0x124
   15d34:	movt	r3, #4
   15d38:	lsl	r1, r1, #2
   15d3c:	ldr	r0, [r0, #8]
   15d40:	ldr	r3, [r3, #8]
   15d44:	bx	r3
   15d48:	bx	lr
   15d4c:	subs	r3, r1, #0
   15d50:	blt	15d64 <__assert_fail@plt+0x4b38>
   15d54:	beq	15d5c <__assert_fail@plt+0x4b30>
   15d58:	b	13ad8 <__assert_fail@plt+0x28ac>
   15d5c:	str	r3, [r0, #4]
   15d60:	bx	lr
   15d64:	str	r4, [sp, #-8]!
   15d68:	mov	r4, r3
   15d6c:	mvn	r1, #0
   15d70:	ldr	r3, [r0]
   15d74:	str	lr, [sp, #4]
   15d78:	str	r1, [r0, #4]
   15d7c:	cmp	r3, #0
   15d80:	ble	15d9c <__assert_fail@plt+0x4b70>
   15d84:	ldr	r0, [r0, #8]
   15d88:	rsb	r3, r4, #0
   15d8c:	ldr	r4, [sp]
   15d90:	add	sp, sp, #4
   15d94:	str	r3, [r0]
   15d98:	pop	{pc}		; (ldr pc, [sp], #4)
   15d9c:	mov	r1, #1
   15da0:	bl	13584 <__assert_fail@plt+0x2358>
   15da4:	b	15d88 <__assert_fail@plt+0x4b5c>
   15da8:	subs	r2, r1, #0
   15dac:	beq	15db4 <__assert_fail@plt+0x4b88>
   15db0:	b	13ad8 <__assert_fail@plt+0x28ac>
   15db4:	str	r2, [r0, #4]
   15db8:	bx	lr
   15dbc:	cmp	r0, r1
   15dc0:	bxeq	lr
   15dc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15dc8:	mov	r5, r1
   15dcc:	strd	r6, [sp, #8]
   15dd0:	mov	r6, r0
   15dd4:	ldr	r7, [r1, #4]
   15dd8:	str	r8, [sp, #16]
   15ddc:	ldr	r3, [r0]
   15de0:	str	lr, [sp, #20]
   15de4:	eor	r4, r7, r7, asr #31
   15de8:	sub	r4, r4, r7, asr #31
   15dec:	cmp	r3, r4
   15df0:	blt	15e38 <__assert_fail@plt+0x4c0c>
   15df4:	ldr	r0, [r0, #8]
   15df8:	mov	lr, r7
   15dfc:	cmp	r7, #0
   15e00:	ldr	r3, [r5, #8]
   15e04:	subne	r2, r0, #4
   15e08:	addne	ip, r3, r4, lsl #2
   15e0c:	beq	15e20 <__assert_fail@plt+0x4bf4>
   15e10:	ldr	r1, [r3], #4
   15e14:	cmp	r3, ip
   15e18:	str	r1, [r2, #4]!
   15e1c:	bne	15e10 <__assert_fail@plt+0x4be4>
   15e20:	ldrd	r4, [sp]
   15e24:	ldr	r8, [sp, #16]
   15e28:	str	lr, [r6, #4]
   15e2c:	ldrd	r6, [sp, #8]
   15e30:	add	sp, sp, #20
   15e34:	pop	{pc}		; (ldr pc, [sp], #4)
   15e38:	mov	r1, r4
   15e3c:	bl	13584 <__assert_fail@plt+0x2358>
   15e40:	ldr	lr, [r5, #4]
   15e44:	b	15dfc <__assert_fail@plt+0x4bd0>
   15e48:	ldr	ip, [pc, #12]	; 15e5c <__assert_fail@plt+0x4c30>
   15e4c:	mov	r2, #0
   15e50:	str	r2, [r0]
   15e54:	stmib	r0, {r2, ip}
   15e58:	b	15d4c <__assert_fail@plt+0x4b20>
   15e5c:	andeq	lr, r2, ip, asr #13
   15e60:	ldr	ip, [pc, #24]	; 15e80 <__assert_fail@plt+0x4c54>
   15e64:	mov	r2, #0
   15e68:	cmp	r1, r2
   15e6c:	str	r2, [r0]
   15e70:	stmib	r0, {r2, ip}
   15e74:	beq	15e7c <__assert_fail@plt+0x4c50>
   15e78:	b	13ad8 <__assert_fail@plt+0x28ac>
   15e7c:	bx	lr
   15e80:	andeq	lr, r2, ip, asr #13
   15e84:	ldr	ip, [pc, #12]	; 15e98 <__assert_fail@plt+0x4c6c>
   15e88:	mov	r2, #0
   15e8c:	str	r2, [r0]
   15e90:	stmib	r0, {r2, ip}
   15e94:	b	15dbc <__assert_fail@plt+0x4b90>
   15e98:	andeq	lr, r2, ip, asr #13
   15e9c:	ldr	r3, [r0, #4]
   15ea0:	ldr	r2, [r0, #8]
   15ea4:	cmp	r3, #0
   15ea8:	blt	15eec <__assert_fail@plt+0x4cc0>
   15eac:	cmp	r3, #1
   15eb0:	ble	15ebc <__assert_fail@plt+0x4c90>
   15eb4:	mov	r0, #0
   15eb8:	bx	lr
   15ebc:	cmp	r3, #0
   15ec0:	bne	15ecc <__assert_fail@plt+0x4ca0>
   15ec4:	mov	r0, #1
   15ec8:	bx	lr
   15ecc:	ldr	r3, [r2]
   15ed0:	cmn	r3, #-2147483646	; 0x80000002
   15ed4:	movhi	r0, #0
   15ed8:	movls	r0, #1
   15edc:	rsb	r0, r0, r3, lsr #31
   15ee0:	subs	r0, r0, #1
   15ee4:	movne	r0, #1
   15ee8:	bx	lr
   15eec:	cmn	r3, #1
   15ef0:	bne	15eb4 <__assert_fail@plt+0x4c88>
   15ef4:	ldr	r3, [r2]
   15ef8:	mvn	r0, r3
   15efc:	lsr	r0, r0, #31
   15f00:	cmp	r3, #-2147483648	; 0x80000000
   15f04:	rsbls	r0, r0, #0
   15f08:	rsbhi	r0, r0, #1
   15f0c:	subs	r0, r0, #1
   15f10:	movne	r0, #1
   15f14:	bx	lr
   15f18:	ldr	r0, [r0, #4]
   15f1c:	cmp	r0, #1
   15f20:	movhi	r0, #0
   15f24:	movls	r0, #1
   15f28:	bx	lr
   15f2c:	b	15e9c <__assert_fail@plt+0x4c70>
   15f30:	ldr	r0, [r0, #4]
   15f34:	cmp	r0, #1
   15f38:	movhi	r0, #0
   15f3c:	movls	r0, #1
   15f40:	bx	lr
   15f44:	ldr	r3, [r0, #4]
   15f48:	ldr	r2, [r0, #8]
   15f4c:	cmp	r3, #0
   15f50:	blt	15fa0 <__assert_fail@plt+0x4d74>
   15f54:	cmp	r3, #1
   15f58:	ble	15f64 <__assert_fail@plt+0x4d38>
   15f5c:	mov	r0, #0
   15f60:	bx	lr
   15f64:	cmp	r3, #0
   15f68:	bne	15f74 <__assert_fail@plt+0x4d48>
   15f6c:	mov	r0, #1
   15f70:	bx	lr
   15f74:	ldr	r3, [r2]
   15f78:	movw	r0, #32766	; 0x7ffe
   15f7c:	cmp	r3, r0
   15f80:	movhi	r0, #0
   15f84:	movls	r0, #1
   15f88:	cmp	r3, #32768	; 0x8000
   15f8c:	rsbcc	r0, r0, #0
   15f90:	rsbcs	r0, r0, #1
   15f94:	subs	r0, r0, #1
   15f98:	movne	r0, #1
   15f9c:	bx	lr
   15fa0:	cmn	r3, #1
   15fa4:	bne	15f5c <__assert_fail@plt+0x4d30>
   15fa8:	ldr	r3, [r2]
   15fac:	cmp	r3, #32768	; 0x8000
   15fb0:	movcs	r0, #0
   15fb4:	movcc	r0, #1
   15fb8:	cmp	r3, #32768	; 0x8000
   15fbc:	rsbls	r0, r0, #0
   15fc0:	rsbhi	r0, r0, #1
   15fc4:	subs	r0, r0, #1
   15fc8:	movne	r0, #1
   15fcc:	bx	lr
   15fd0:	ldr	r3, [r0, #4]
   15fd4:	cmp	r3, #1
   15fd8:	bls	15fe4 <__assert_fail@plt+0x4db8>
   15fdc:	mov	r0, #0
   15fe0:	bx	lr
   15fe4:	cmp	r3, #0
   15fe8:	beq	1601c <__assert_fail@plt+0x4df0>
   15fec:	ldr	r3, [r0, #8]
   15ff0:	movw	r0, #65534	; 0xfffe
   15ff4:	ldr	r3, [r3]
   15ff8:	cmp	r3, r0
   15ffc:	movhi	r0, #0
   16000:	movls	r0, #1
   16004:	cmp	r3, #65536	; 0x10000
   16008:	rsbcc	r0, r0, #0
   1600c:	rsbcs	r0, r0, #1
   16010:	subs	r0, r0, #1
   16014:	movne	r0, #1
   16018:	bx	lr
   1601c:	mov	r0, #1
   16020:	bx	lr
   16024:	ldr	r3, [r0, #4]
   16028:	cmp	r3, #0
   1602c:	beq	16044 <__assert_fail@plt+0x4e18>
   16030:	ldr	r3, [r0, #8]
   16034:	ldr	r3, [r3]
   16038:	rsblt	r3, r3, #0
   1603c:	bicge	r3, r3, #-2147483648	; 0x80000000
   16040:	orrlt	r3, r3, #-2147483648	; 0x80000000
   16044:	mov	r0, r3
   16048:	bx	lr
   1604c:	ldr	r3, [r0, #4]
   16050:	cmp	r3, #0
   16054:	ldrne	r3, [r0, #8]
   16058:	ldrne	r0, [r3]
   1605c:	moveq	r0, r3
   16060:	bx	lr
   16064:	ldr	r0, [r0, #4]
   16068:	cmp	r0, #0
   1606c:	rsblt	r0, r0, #0
   16070:	bx	lr
   16074:	cmp	r1, #0
   16078:	blt	1609c <__assert_fail@plt+0x4e70>
   1607c:	ldr	r3, [r0, #4]
   16080:	cmp	r3, #0
   16084:	rsblt	r3, r3, #0
   16088:	cmp	r3, r1
   1608c:	ble	1609c <__assert_fail@plt+0x4e70>
   16090:	ldr	r3, [r0, #8]
   16094:	ldr	r0, [r3, r1, lsl #2]
   16098:	bx	lr
   1609c:	mov	r0, #0
   160a0:	bx	lr
   160a4:	cmp	r1, #0
   160a8:	subne	r1, r1, #1
   160ac:	lsr	r1, r1, #5
   160b0:	add	r1, r1, #1
   160b4:	b	13584 <__assert_fail@plt+0x2358>
   160b8:	ldr	r0, [r0, #8]
   160bc:	bx	lr
   160c0:	subs	r2, r1, #0
   160c4:	ble	160e0 <__assert_fail@plt+0x4eb4>
   160c8:	ldr	ip, [r0]
   160cc:	cmp	ip, r2
   160d0:	blt	160dc <__assert_fail@plt+0x4eb0>
   160d4:	ldr	r0, [r0, #8]
   160d8:	bx	lr
   160dc:	b	13584 <__assert_fail@plt+0x2358>
   160e0:	movw	r1, #59468	; 0xe84c
   160e4:	movt	r1, #2
   160e8:	ldr	r3, [pc, #20]	; 16104 <__assert_fail@plt+0x4ed8>
   160ec:	movw	r0, #59632	; 0xe8f0
   160f0:	movt	r0, #2
   160f4:	str	r4, [sp, #-8]!
   160f8:	movw	r2, #1663	; 0x67f
   160fc:	str	lr, [sp, #4]
   16100:	bl	1122c <__assert_fail@plt>
   16104:	ldrdeq	lr, [r2], -r0
   16108:	b	160c0 <__assert_fail@plt+0x4e94>
   1610c:	eor	r3, r1, r1, asr #31
   16110:	cmp	r1, #0
   16114:	ldr	r2, [r0, #8]
   16118:	sub	r3, r3, r1, asr #31
   1611c:	beq	16160 <__assert_fail@plt+0x4f34>
   16120:	sub	ip, r3, #-1073741823	; 0xc0000001
   16124:	push	{lr}		; (str lr, [sp, #-4]!)
   16128:	ldr	lr, [r2, ip, lsl #2]
   1612c:	add	r2, r2, ip, lsl #2
   16130:	cmp	lr, #0
   16134:	beq	16148 <__assert_fail@plt+0x4f1c>
   16138:	b	16150 <__assert_fail@plt+0x4f24>
   1613c:	ldr	ip, [r2, #-4]!
   16140:	cmp	ip, #0
   16144:	bne	16150 <__assert_fail@plt+0x4f24>
   16148:	subs	r3, r3, #1
   1614c:	bne	1613c <__assert_fail@plt+0x4f10>
   16150:	cmp	r1, #0
   16154:	rsblt	r3, r3, #0
   16158:	str	r3, [r0, #4]
   1615c:	pop	{pc}		; (ldr pc, [sp], #4)
   16160:	str	r1, [r0, #4]
   16164:	bx	lr
   16168:	mov	ip, r0
   1616c:	eor	r3, r2, r2, asr #31
   16170:	mov	r0, #0
   16174:	cmp	r2, r0
   16178:	sub	r3, r3, r2, asr #31
   1617c:	str	r0, [ip]
   16180:	str	r1, [ip, #8]
   16184:	beq	161cc <__assert_fail@plt+0x4fa0>
   16188:	sub	r0, r3, #-1073741823	; 0xc0000001
   1618c:	push	{lr}		; (str lr, [sp, #-4]!)
   16190:	ldr	lr, [r1, r0, lsl #2]
   16194:	add	r1, r1, r0, lsl #2
   16198:	cmp	lr, #0
   1619c:	beq	161b0 <__assert_fail@plt+0x4f84>
   161a0:	b	161b8 <__assert_fail@plt+0x4f8c>
   161a4:	ldr	r0, [r1, #-4]!
   161a8:	cmp	r0, #0
   161ac:	bne	161b8 <__assert_fail@plt+0x4f8c>
   161b0:	subs	r3, r3, #1
   161b4:	bne	161a4 <__assert_fail@plt+0x4f78>
   161b8:	cmp	r2, #0
   161bc:	mov	r0, ip
   161c0:	rsblt	r3, r3, #0
   161c4:	str	r3, [ip, #4]
   161c8:	pop	{pc}		; (ldr pc, [sp], #4)
   161cc:	mov	r0, ip
   161d0:	str	r2, [ip, #4]
   161d4:	bx	lr
   161d8:	vcmp.f64	d0, d0
   161dc:	mov	r3, r0
   161e0:	vmrs	APSR_nzcv, fpscr
   161e4:	bne	16200 <__assert_fail@plt+0x4fd4>
   161e8:	vldr	d6, [pc, #32]	; 16210 <__assert_fail@plt+0x4fe4>
   161ec:	vmul.f64	d6, d0, d6
   161f0:	vcmp.f64	d6, d0
   161f4:	vmrs	APSR_nzcv, fpscr
   161f8:	beq	16200 <__assert_fail@plt+0x4fd4>
   161fc:	b	13b24 <__assert_fail@plt+0x28f8>
   16200:	mov	r2, #0
   16204:	str	r2, [r3, #4]
   16208:	bx	lr
   1620c:	nop	{0}
   16210:	andeq	r0, r0, r0
   16214:	svccc	0x00e00000
   16218:	vcmp.f64	d0, d0
   1621c:	ldr	r1, [pc, #60]	; 16260 <__assert_fail@plt+0x5034>
   16220:	mov	r2, #0
   16224:	str	r2, [r0]
   16228:	str	r2, [r0, #4]
   1622c:	str	r1, [r0, #8]
   16230:	vmrs	APSR_nzcv, fpscr
   16234:	bne	16250 <__assert_fail@plt+0x5024>
   16238:	vldr	d6, [pc, #24]	; 16258 <__assert_fail@plt+0x502c>
   1623c:	vmul.f64	d6, d0, d6
   16240:	vcmp.f64	d0, d6
   16244:	vmrs	APSR_nzcv, fpscr
   16248:	beq	16250 <__assert_fail@plt+0x5024>
   1624c:	b	13b24 <__assert_fail@plt+0x28f8>
   16250:	bx	lr
   16254:	nop	{0}
   16258:	andeq	r0, r0, r0
   1625c:	svccc	0x00e00000
   16260:	andeq	lr, r2, ip, asr #13
   16264:	str	r4, [sp, #-8]!
   16268:	str	lr, [sp, #4]
   1626c:	ldr	lr, [r0, #4]
   16270:	cmp	lr, #0
   16274:	beq	16330 <__assert_fail@plt+0x5104>
   16278:	eor	r1, lr, lr, asr #31
   1627c:	ldr	ip, [r0, #8]
   16280:	sub	r1, r1, lr, asr #31
   16284:	sub	r1, r1, #1
   16288:	ldr	r0, [ip, r1, lsl #2]
   1628c:	ands	r3, r0, #-16777216	; 0xff000000
   16290:	bne	16340 <__assert_fail@plt+0x5114>
   16294:	mov	r2, r0
   16298:	lsl	r2, r2, #8
   1629c:	add	r3, r3, #8
   162a0:	tst	r2, #-16777216	; 0xff000000
   162a4:	beq	16298 <__assert_fail@plt+0x506c>
   162a8:	cmp	r2, #0
   162ac:	blt	162bc <__assert_fail@plt+0x5090>
   162b0:	lsls	r2, r2, #1
   162b4:	add	r3, r3, #1
   162b8:	bpl	162b0 <__assert_fail@plt+0x5084>
   162bc:	adds	r3, r3, #21
   162c0:	bmi	16320 <__assert_fail@plt+0x50f4>
   162c4:	vmov	s15, r0
   162c8:	mvn	r4, #0
   162cc:	vldr	d6, [pc, #132]	; 16358 <__assert_fail@plt+0x512c>
   162d0:	vcvt.f64.u32	d0, s15
   162d4:	subs	r1, r1, #1
   162d8:	bcc	1630c <__assert_fail@plt+0x50e0>
   162dc:	cmp	r3, #0
   162e0:	vmul.f64	d0, d0, d6
   162e4:	ble	162d4 <__assert_fail@plt+0x50a8>
   162e8:	ldr	r2, [ip, r1, lsl #2]
   162ec:	subs	r3, r3, #32
   162f0:	rsb	r0, r3, #0
   162f4:	andmi	r2, r2, r4, lsl r0
   162f8:	subs	r1, r1, #1
   162fc:	vmov	s15, r2
   16300:	vcvt.f64.u32	d7, s15
   16304:	vadd.f64	d0, d0, d7
   16308:	bcs	162dc <__assert_fail@plt+0x50b0>
   1630c:	cmp	lr, #0
   16310:	ldr	r4, [sp]
   16314:	add	sp, sp, #4
   16318:	vneglt.f64	d0, d0
   1631c:	pop	{pc}		; (ldr pc, [sp], #4)
   16320:	rsb	r2, r3, #0
   16324:	mvn	r4, #0
   16328:	and	r0, r0, r4, lsl r2
   1632c:	b	162c4 <__assert_fail@plt+0x5098>
   16330:	ldr	r4, [sp]
   16334:	add	sp, sp, #4
   16338:	vldr	d0, [pc, #32]	; 16360 <__assert_fail@plt+0x5134>
   1633c:	pop	{pc}		; (ldr pc, [sp], #4)
   16340:	cmp	r0, #0
   16344:	movlt	r3, #21
   16348:	blt	162c4 <__assert_fail@plt+0x5098>
   1634c:	mov	r2, r0
   16350:	mov	r3, #0
   16354:	b	162b0 <__assert_fail@plt+0x5084>
   16358:	andeq	r0, r0, r0
   1635c:	mvnsmi	r0, r0
	...
   16368:	vcmpe.f64	d0, #0.0
   1636c:	ldr	r3, [r0, #4]
   16370:	vmrs	APSR_nzcv, fpscr
   16374:	vneglt.f64	d0, d0
   16378:	cmp	r3, #0
   1637c:	beq	1640c <__assert_fail@plt+0x51e0>
   16380:	cmp	r3, #0
   16384:	rsblt	r3, r3, #0
   16388:	cmp	r3, #1
   1638c:	beq	163a8 <__assert_fail@plt+0x517c>
   16390:	vldr	d7, [pc, #144]	; 16428 <__assert_fail@plt+0x51fc>
   16394:	mov	r2, #1
   16398:	add	r2, r2, #1
   1639c:	vmul.f64	d0, d0, d7
   163a0:	cmp	r3, r2
   163a4:	bne	16398 <__assert_fail@plt+0x516c>
   163a8:	vldr	d6, [pc, #128]	; 16430 <__assert_fail@plt+0x5204>
   163ac:	vcmpe.f64	d0, d6
   163b0:	vmrs	APSR_nzcv, fpscr
   163b4:	bge	16420 <__assert_fail@plt+0x51f4>
   163b8:	vcvt.u32.f64	s14, d0
   163bc:	ldr	r1, [r0, #8]
   163c0:	sub	r3, r3, #1
   163c4:	ldr	r2, [r1, r3, lsl #2]
   163c8:	vmov	r0, s14
   163cc:	cmp	r0, r2
   163d0:	bcc	16404 <__assert_fail@plt+0x51d8>
   163d4:	bhi	16420 <__assert_fail@plt+0x51f4>
   163d8:	vcvt.f64.u32	d7, s14
   163dc:	sub	r3, r3, #1
   163e0:	cmn	r3, #1
   163e4:	vsub.f64	d0, d0, d7
   163e8:	vmul.f64	d0, d0, d6
   163ec:	beq	1640c <__assert_fail@plt+0x51e0>
   163f0:	vcvt.u32.f64	s14, d0
   163f4:	ldr	r2, [r1, r3, lsl #2]
   163f8:	vmov	r0, s14
   163fc:	cmp	r0, r2
   16400:	bcs	163d4 <__assert_fail@plt+0x51a8>
   16404:	mov	r0, #1
   16408:	bx	lr
   1640c:	vcmpe.f64	d0, #0.0
   16410:	vmrs	APSR_nzcv, fpscr
   16414:	mvngt	r0, #0
   16418:	movle	r0, #0
   1641c:	bx	lr
   16420:	mvn	r0, #0
   16424:	bx	lr
   16428:	andeq	r0, r0, r0
   1642c:	ldclcc	0, cr0, [r0]
   16430:	andeq	r0, r0, r0
   16434:	mvnsmi	r0, r0
   16438:	ldr	r3, [r0, #4]
   1643c:	vcmpe.f64	d0, #0.0
   16440:	cmp	r3, #0
   16444:	blt	1645c <__assert_fail@plt+0x5230>
   16448:	vmrs	APSR_nzcv, fpscr
   1644c:	bmi	16454 <__assert_fail@plt+0x5228>
   16450:	b	16368 <__assert_fail@plt+0x513c>
   16454:	mov	r0, #1
   16458:	bx	lr
   1645c:	vmrs	APSR_nzcv, fpscr
   16460:	bge	16480 <__assert_fail@plt+0x5254>
   16464:	str	r4, [sp, #-8]!
   16468:	str	lr, [sp, #4]
   1646c:	bl	16368 <__assert_fail@plt+0x513c>
   16470:	ldr	r4, [sp]
   16474:	add	sp, sp, #4
   16478:	rsb	r0, r0, #0
   1647c:	pop	{pc}		; (ldr pc, [sp], #4)
   16480:	mvn	r0, #0
   16484:	bx	lr
   16488:	ldr	r3, [r0, #4]
   1648c:	lsr	r0, r3, #31
   16490:	cmp	r3, #0
   16494:	rsble	r0, r0, #0
   16498:	rsbgt	r0, r0, #1
   1649c:	bx	lr
   164a0:	cmp	r1, #0
   164a4:	ldr	r3, [r0, #4]
   164a8:	bge	164cc <__assert_fail@plt+0x52a0>
   164ac:	cmp	r3, #0
   164b0:	blt	164bc <__assert_fail@plt+0x5290>
   164b4:	mov	r0, #1
   164b8:	bx	lr
   164bc:	cmn	r3, #1
   164c0:	beq	1650c <__assert_fail@plt+0x52e0>
   164c4:	mvn	r0, #0
   164c8:	bx	lr
   164cc:	cmp	r3, #0
   164d0:	blt	164c4 <__assert_fail@plt+0x5298>
   164d4:	cmp	r3, #1
   164d8:	bgt	164b4 <__assert_fail@plt+0x5288>
   164dc:	cmp	r3, #0
   164e0:	moveq	r0, r3
   164e4:	beq	164fc <__assert_fail@plt+0x52d0>
   164e8:	ldr	r3, [r0, #8]
   164ec:	ldr	r0, [r3]
   164f0:	cmp	r1, r0
   164f4:	movcs	r3, #0
   164f8:	movcc	r3, #1
   164fc:	cmp	r1, r0
   16500:	movls	r0, r3
   16504:	subhi	r0, r3, #1
   16508:	bx	lr
   1650c:	ldr	r2, [r0, #8]
   16510:	rsb	r3, r1, #0
   16514:	ldr	r1, [r2]
   16518:	cmp	r3, r1
   1651c:	movcs	r0, #0
   16520:	movcc	r0, #1
   16524:	cmp	r3, r1
   16528:	rsbls	r0, r0, #0
   1652c:	rsbhi	r0, r0, #1
   16530:	bx	lr
   16534:	ldr	r3, [r0, #4]
   16538:	cmp	r3, #0
   1653c:	blt	16580 <__assert_fail@plt+0x5354>
   16540:	cmp	r3, #1
   16544:	ble	16550 <__assert_fail@plt+0x5324>
   16548:	mov	r0, #1
   1654c:	bx	lr
   16550:	cmp	r3, #0
   16554:	moveq	r0, r3
   16558:	beq	16570 <__assert_fail@plt+0x5344>
   1655c:	ldr	r3, [r0, #8]
   16560:	ldr	r0, [r3]
   16564:	cmp	r1, r0
   16568:	movcs	r3, #0
   1656c:	movcc	r3, #1
   16570:	cmp	r1, r0
   16574:	movls	r0, r3
   16578:	subhi	r0, r3, #1
   1657c:	bx	lr
   16580:	mvn	r0, #0
   16584:	bx	lr
   16588:	ldr	r3, [r0, #4]
   1658c:	ldr	r2, [r1, #4]
   16590:	cmp	r3, r2
   16594:	beq	165a4 <__assert_fail@plt+0x5378>
   16598:	bge	165e8 <__assert_fail@plt+0x53bc>
   1659c:	mvn	r0, #0
   165a0:	bx	lr
   165a4:	cmp	r3, #0
   165a8:	ldr	r2, [r0, #8]
   165ac:	ldr	r1, [r1, #8]
   165b0:	blt	165f0 <__assert_fail@plt+0x53c4>
   165b4:	lsl	r0, r3, #2
   165b8:	add	r2, r2, r0
   165bc:	add	r1, r1, r0
   165c0:	b	165d4 <__assert_fail@plt+0x53a8>
   165c4:	ldr	ip, [r2, #-4]!
   165c8:	ldr	r0, [r1, #-4]!
   165cc:	cmp	ip, r0
   165d0:	bne	165e4 <__assert_fail@plt+0x53b8>
   165d4:	subs	r3, r3, #1
   165d8:	bcs	165c4 <__assert_fail@plt+0x5398>
   165dc:	mov	r0, #0
   165e0:	bx	lr
   165e4:	bls	1659c <__assert_fail@plt+0x5370>
   165e8:	mov	r0, #1
   165ec:	bx	lr
   165f0:	mvn	r3, r3
   165f4:	lsl	r0, r3, #2
   165f8:	add	r1, r1, r0
   165fc:	add	r2, r2, r0
   16600:	ldr	ip, [r1], #-4
   16604:	sub	r3, r3, #1
   16608:	ldr	r0, [r2], #-4
   1660c:	cmp	ip, r0
   16610:	bne	165e4 <__assert_fail@plt+0x53b8>
   16614:	cmn	r3, #1
   16618:	bne	16600 <__assert_fail@plt+0x53d4>
   1661c:	mov	r0, #0
   16620:	bx	lr
   16624:	ldr	r3, [r0, #4]
   16628:	eor	r2, r3, r3, asr #31
   1662c:	sub	r2, r2, r3, asr #31
   16630:	cmp	r2, #1
   16634:	ble	16640 <__assert_fail@plt+0x5414>
   16638:	mov	r0, #1
   1663c:	bx	lr
   16640:	cmp	r3, #0
   16644:	moveq	r0, r3
   16648:	beq	16660 <__assert_fail@plt+0x5434>
   1664c:	ldr	r3, [r0, #8]
   16650:	ldr	r0, [r3]
   16654:	cmp	r1, r0
   16658:	movcs	r3, #0
   1665c:	movcc	r3, #1
   16660:	cmp	r1, r0
   16664:	movls	r0, r3
   16668:	subhi	r0, r3, #1
   1666c:	bx	lr
   16670:	ldr	r3, [r0, #4]
   16674:	ldr	r2, [r1, #4]
   16678:	cmp	r3, #0
   1667c:	rsblt	r3, r3, #0
   16680:	cmp	r2, #0
   16684:	rsblt	r2, r2, #0
   16688:	cmp	r3, r2
   1668c:	beq	166a8 <__assert_fail@plt+0x547c>
   16690:	bge	166a0 <__assert_fail@plt+0x5474>
   16694:	mvn	r0, #0
   16698:	bx	lr
   1669c:	bls	16694 <__assert_fail@plt+0x5468>
   166a0:	mov	r0, #1
   166a4:	bx	lr
   166a8:	ldr	r0, [r0, #8]
   166ac:	lsl	r2, r3, #2
   166b0:	ldr	r1, [r1, #8]
   166b4:	add	r0, r0, r2
   166b8:	add	r2, r1, r2
   166bc:	b	166d0 <__assert_fail@plt+0x54a4>
   166c0:	ldr	ip, [r0, #-4]!
   166c4:	ldr	r1, [r2, #-4]!
   166c8:	cmp	ip, r1
   166cc:	bne	1669c <__assert_fail@plt+0x5470>
   166d0:	subs	r3, r3, #1
   166d4:	bcs	166c0 <__assert_fail@plt+0x5494>
   166d8:	mov	r0, #0
   166dc:	bx	lr
   166e0:	str	r4, [sp, #-8]!
   166e4:	mov	r4, r0
   166e8:	str	lr, [sp, #4]
   166ec:	bl	15dbc <__assert_fail@plt+0x4b90>
   166f0:	ldr	r3, [r4, #4]
   166f4:	cmp	r3, #0
   166f8:	rsblt	r3, r3, #0
   166fc:	str	r3, [r4, #4]
   16700:	ldr	r4, [sp]
   16704:	add	sp, sp, #4
   16708:	pop	{pc}		; (ldr pc, [sp], #4)
   1670c:	str	r4, [sp, #-8]!
   16710:	mov	r4, r0
   16714:	str	lr, [sp, #4]
   16718:	bl	15dbc <__assert_fail@plt+0x4b90>
   1671c:	ldr	r3, [r4, #4]
   16720:	rsb	r3, r3, #0
   16724:	str	r3, [r4, #4]
   16728:	ldr	r4, [sp]
   1672c:	add	sp, sp, #4
   16730:	pop	{pc}		; (ldr pc, [sp], #4)
   16734:	ldr	r2, [r1, #4]
   16738:	str	r4, [sp, #-8]!
   1673c:	str	lr, [sp, #4]
   16740:	ldr	r4, [r0, #4]
   16744:	ldr	ip, [r0]
   16748:	ldr	lr, [r1]
   1674c:	str	r2, [r0, #4]
   16750:	ldr	r3, [r0, #8]
   16754:	str	r4, [r1, #4]
   16758:	ldr	r2, [r1, #8]
   1675c:	str	lr, [r0]
   16760:	ldr	r4, [sp]
   16764:	add	sp, sp, #4
   16768:	str	ip, [r1]
   1676c:	str	r2, [r0, #8]
   16770:	str	r3, [r1, #8]
   16774:	pop	{pc}		; (ldr pc, [sp], #4)
   16778:	strd	r4, [sp, #-12]!
   1677c:	mov	r4, r1
   16780:	mov	r5, r0
   16784:	ldr	r3, [r2, #4]
   16788:	str	lr, [sp, #8]
   1678c:	sub	sp, sp, #12
   16790:	ldr	lr, [r1, #4]
   16794:	teq	lr, r3
   16798:	bmi	167c0 <__assert_fail@plt+0x5594>
   1679c:	bl	13fb4 <__assert_fail@plt+0x2d88>
   167a0:	ldr	r3, [r4, #4]
   167a4:	cmp	r3, #0
   167a8:	rsblt	r0, r0, #0
   167ac:	str	r0, [r5, #4]
   167b0:	add	sp, sp, #12
   167b4:	ldrd	r4, [sp]
   167b8:	add	sp, sp, #8
   167bc:	pop	{pc}		; (ldr pc, [sp], #4)
   167c0:	add	ip, r2, #8
   167c4:	mov	r1, lr
   167c8:	add	r2, r4, #8
   167cc:	str	ip, [sp]
   167d0:	bl	141fc <__assert_fail@plt+0x2fd0>
   167d4:	b	167a0 <__assert_fail@plt+0x5574>
   167d8:	ldr	ip, [pc, #132]	; 16864 <__assert_fail@plt+0x5638>
   167dc:	mov	r3, #0
   167e0:	cmp	r2, #0
   167e4:	strd	r4, [sp, #-16]!
   167e8:	mov	r5, r0
   167ec:	str	r6, [sp, #8]
   167f0:	mov	r6, r1
   167f4:	str	lr, [sp, #12]
   167f8:	sub	sp, sp, #16
   167fc:	add	r4, sp, #4
   16800:	str	r3, [sp, #4]
   16804:	str	r3, [sp, #8]
   16808:	str	ip, [sp, #12]
   1680c:	beq	1681c <__assert_fail@plt+0x55f0>
   16810:	mov	r1, r2
   16814:	mov	r0, r4
   16818:	bl	13ad8 <__assert_fail@plt+0x28ac>
   1681c:	mov	r1, r6
   16820:	mov	r2, r4
   16824:	mov	r0, r5
   16828:	bl	16778 <__assert_fail@plt+0x554c>
   1682c:	ldr	r1, [sp, #4]
   16830:	cmp	r1, #0
   16834:	beq	16850 <__assert_fail@plt+0x5624>
   16838:	movw	r3, #292	; 0x124
   1683c:	movt	r3, #4
   16840:	lsl	r1, r1, #2
   16844:	ldr	r3, [r3, #8]
   16848:	ldr	r0, [sp, #12]
   1684c:	blx	r3
   16850:	add	sp, sp, #16
   16854:	ldrd	r4, [sp]
   16858:	ldr	r6, [sp, #8]
   1685c:	add	sp, sp, #12
   16860:	pop	{pc}		; (ldr pc, [sp], #4)
   16864:	andeq	lr, r2, ip, asr #13
   16868:	strd	r4, [sp, #-16]!
   1686c:	mov	r4, r0
   16870:	mov	r5, r1
   16874:	mov	r1, r2
   16878:	str	r6, [sp, #8]
   1687c:	str	lr, [sp, #12]
   16880:	bl	15dbc <__assert_fail@plt+0x4b90>
   16884:	ldr	r3, [r4, #4]
   16888:	mov	r2, r5
   1688c:	mov	r1, r4
   16890:	mov	r0, r4
   16894:	ldr	r6, [sp, #8]
   16898:	ldr	lr, [sp, #12]
   1689c:	rsb	r3, r3, #0
   168a0:	str	r3, [r4, #4]
   168a4:	ldrd	r4, [sp]
   168a8:	add	sp, sp, #16
   168ac:	b	167d8 <__assert_fail@plt+0x55ac>
   168b0:	mov	r3, r2
   168b4:	mov	r2, r1
   168b8:	str	r4, [sp, #-8]!
   168bc:	mov	r1, r3
   168c0:	mov	r4, r0
   168c4:	str	lr, [sp, #4]
   168c8:	bl	16868 <__assert_fail@plt+0x563c>
   168cc:	mov	r1, r4
   168d0:	mov	r0, r4
   168d4:	bl	15dbc <__assert_fail@plt+0x4b90>
   168d8:	ldr	r3, [r4, #4]
   168dc:	rsb	r3, r3, #0
   168e0:	str	r3, [r4, #4]
   168e4:	ldr	r4, [sp]
   168e8:	add	sp, sp, #4
   168ec:	pop	{pc}		; (ldr pc, [sp], #4)
   168f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   168f4:	strd	r6, [sp, #8]
   168f8:	subs	r7, r1, #0
   168fc:	strd	r8, [sp, #16]
   16900:	strd	sl, [sp, #24]
   16904:	str	lr, [sp, #32]
   16908:	sub	sp, sp, #4
   1690c:	streq	r7, [r0, #4]
   16910:	beq	169ac <__assert_fail@plt+0x5780>
   16914:	mov	r6, r0
   16918:	ldr	r0, [sp, #40]	; 0x28
   1691c:	eor	r4, r7, r7, asr #31
   16920:	cmp	r7, #0
   16924:	mov	fp, r2
   16928:	lsr	r1, r3, #5
   1692c:	movle	r2, #0
   16930:	movgt	r2, #1
   16934:	sub	r4, r4, r7, asr #31
   16938:	and	r9, r3, #31
   1693c:	sub	r4, r4, r1
   16940:	cmp	r0, r2
   16944:	beq	169c8 <__assert_fail@plt+0x579c>
   16948:	cmp	r4, #0
   1694c:	lslgt	sl, r1, #2
   16950:	movgt	r8, #0
   16954:	ble	16a60 <__assert_fail@plt+0x5834>
   16958:	ldr	r3, [r6]
   1695c:	cmp	r4, r3
   16960:	bgt	16a6c <__assert_fail@plt+0x5840>
   16964:	cmp	r9, #0
   16968:	ldr	ip, [fp]
   1696c:	ldr	r5, [r6, #8]
   16970:	bne	16a88 <__assert_fail@plt+0x585c>
   16974:	sub	sl, sl, #4
   16978:	sub	r2, r5, #4
   1697c:	add	ip, ip, sl
   16980:	mov	r3, r9
   16984:	ldr	r1, [ip, #4]!
   16988:	add	r3, r3, #1
   1698c:	cmp	r4, r3
   16990:	str	r1, [r2, #4]!
   16994:	bgt	16984 <__assert_fail@plt+0x5758>
   16998:	cmp	r8, #0
   1699c:	str	r4, [r6, #4]
   169a0:	bne	16a2c <__assert_fail@plt+0x5800>
   169a4:	cmp	r7, #0
   169a8:	blt	16a44 <__assert_fail@plt+0x5818>
   169ac:	add	sp, sp, #4
   169b0:	ldrd	r4, [sp]
   169b4:	ldrd	r6, [sp, #8]
   169b8:	ldrd	r8, [sp, #16]
   169bc:	ldrd	sl, [sp, #24]
   169c0:	add	sp, sp, #32
   169c4:	pop	{pc}		; (ldr pc, [sp], #4)
   169c8:	cmp	r4, #0
   169cc:	ble	16a24 <__assert_fail@plt+0x57f8>
   169d0:	cmp	r1, #0
   169d4:	lsl	sl, r1, #2
   169d8:	ldr	r0, [fp]
   169dc:	beq	16a0c <__assert_fail@plt+0x57e0>
   169e0:	sub	r3, sl, #4
   169e4:	ldr	r2, [r0, r3]
   169e8:	add	r3, r0, r3
   169ec:	cmp	r2, #0
   169f0:	beq	16a04 <__assert_fail@plt+0x57d8>
   169f4:	b	16ab0 <__assert_fail@plt+0x5884>
   169f8:	ldr	r2, [r3, #-4]!
   169fc:	cmp	r2, #0
   16a00:	bne	16ab0 <__assert_fail@plt+0x5884>
   16a04:	subs	r1, r1, #1
   16a08:	bne	169f8 <__assert_fail@plt+0x57cc>
   16a0c:	ldr	r3, [r0, sl]
   16a10:	mvn	r2, #0
   16a14:	bics	r3, r3, r2, lsl r9
   16a18:	movne	r8, #1
   16a1c:	moveq	r8, #0
   16a20:	b	16958 <__assert_fail@plt+0x572c>
   16a24:	mov	r3, #0
   16a28:	str	r3, [r6, #4]
   16a2c:	mov	r2, #1
   16a30:	mov	r1, r6
   16a34:	mov	r0, r6
   16a38:	bl	167d8 <__assert_fail@plt+0x55ac>
   16a3c:	cmp	r7, #0
   16a40:	bge	169ac <__assert_fail@plt+0x5780>
   16a44:	mov	r1, r6
   16a48:	mov	r0, r6
   16a4c:	bl	15dbc <__assert_fail@plt+0x4b90>
   16a50:	ldr	r3, [r6, #4]
   16a54:	rsb	r3, r3, #0
   16a58:	str	r3, [r6, #4]
   16a5c:	b	169ac <__assert_fail@plt+0x5780>
   16a60:	mov	r3, #0
   16a64:	str	r3, [r6, #4]
   16a68:	b	169a4 <__assert_fail@plt+0x5778>
   16a6c:	mov	r1, r4
   16a70:	mov	r0, r6
   16a74:	bl	13584 <__assert_fail@plt+0x2358>
   16a78:	cmp	r9, #0
   16a7c:	mov	r5, r0
   16a80:	ldr	ip, [fp]
   16a84:	beq	16974 <__assert_fail@plt+0x5748>
   16a88:	mov	r3, r9
   16a8c:	mov	r2, r4
   16a90:	add	r1, ip, sl
   16a94:	mov	r0, r5
   16a98:	bl	14b90 <__assert_fail@plt+0x3964>
   16a9c:	sub	r3, r4, #-1073741823	; 0xc0000001
   16aa0:	ldr	r3, [r5, r3, lsl #2]
   16aa4:	cmp	r3, #0
   16aa8:	subeq	r4, r4, #1
   16aac:	b	16998 <__assert_fail@plt+0x576c>
   16ab0:	mov	r8, #1
   16ab4:	b	16958 <__assert_fail@plt+0x572c>
   16ab8:	strd	r4, [sp, #-20]!	; 0xffffffec
   16abc:	strd	r6, [sp, #8]
   16ac0:	ldr	r6, [r0, #4]
   16ac4:	str	lr, [sp, #16]
   16ac8:	sub	sp, sp, #12
   16acc:	cmp	r6, #0
   16ad0:	ble	16b30 <__assert_fail@plt+0x5904>
   16ad4:	mov	r5, r0
   16ad8:	mov	ip, #0
   16adc:	ldr	r2, [r5, #8]!
   16ae0:	mov	r4, r0
   16ae4:	mov	r3, ip
   16ae8:	mov	r1, ip
   16aec:	ldr	r0, [r2]
   16af0:	str	ip, [sp]
   16af4:	bl	13668 <__assert_fail@plt+0x243c>
   16af8:	mov	ip, #2
   16afc:	mov	r7, r0
   16b00:	mov	r2, r5
   16b04:	mov	r0, r4
   16b08:	mov	r1, r6
   16b0c:	mov	r3, r7
   16b10:	str	ip, [sp]
   16b14:	bl	168f0 <__assert_fail@plt+0x56c4>
   16b18:	mov	r0, r7
   16b1c:	add	sp, sp, #12
   16b20:	ldrd	r4, [sp]
   16b24:	ldrd	r6, [sp, #8]
   16b28:	add	sp, sp, #16
   16b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b30:	movw	r1, #59468	; 0xe84c
   16b34:	movt	r1, #2
   16b38:	ldr	r3, [pc, #12]	; 16b4c <__assert_fail@plt+0x5920>
   16b3c:	movw	r0, #60092	; 0xeabc
   16b40:	movt	r0, #2
   16b44:	movw	r2, #2723	; 0xaa3
   16b48:	bl	1122c <__assert_fail@plt>
   16b4c:	andeq	lr, r2, r4, ror #13
   16b50:	strd	r4, [sp, #-12]!
   16b54:	mov	r4, r1
   16b58:	mov	r5, r0
   16b5c:	ldr	r3, [r2, #4]
   16b60:	str	lr, [sp, #8]
   16b64:	sub	sp, sp, #12
   16b68:	ldr	lr, [r1, #4]
   16b6c:	teq	lr, r3
   16b70:	bmi	16ba8 <__assert_fail@plt+0x597c>
   16b74:	add	ip, r2, #8
   16b78:	mov	r1, lr
   16b7c:	add	r2, r4, #8
   16b80:	str	ip, [sp]
   16b84:	bl	141fc <__assert_fail@plt+0x2fd0>
   16b88:	ldr	r3, [r4, #4]
   16b8c:	cmp	r3, #0
   16b90:	rsblt	r0, r0, #0
   16b94:	str	r0, [r5, #4]
   16b98:	add	sp, sp, #12
   16b9c:	ldrd	r4, [sp]
   16ba0:	add	sp, sp, #8
   16ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ba8:	bl	13fb4 <__assert_fail@plt+0x2d88>
   16bac:	b	16b88 <__assert_fail@plt+0x595c>
   16bb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16bb4:	ldr	r5, [r3, #4]
   16bb8:	strd	r6, [sp, #8]
   16bbc:	strd	r8, [sp, #16]
   16bc0:	mov	r9, r3
   16bc4:	strd	sl, [sp, #24]
   16bc8:	str	lr, [sp, #32]
   16bcc:	sub	sp, sp, #84	; 0x54
   16bd0:	cmp	r5, #0
   16bd4:	ldr	r6, [r2, #4]
   16bd8:	beq	17074 <__assert_fail@plt+0x5e48>
   16bdc:	cmp	r6, #0
   16be0:	mov	r7, r0
   16be4:	mov	r8, r1
   16be8:	beq	16dfc <__assert_fail@plt+0x5bd0>
   16bec:	eor	r4, r5, r5, asr #31
   16bf0:	mov	r3, r2
   16bf4:	eor	sl, r6, r6, asr #31
   16bf8:	sub	r4, r4, r5, asr #31
   16bfc:	eor	r5, r5, r6
   16c00:	sub	sl, sl, r6, asr #31
   16c04:	cmp	sl, r4
   16c08:	bge	16c6c <__assert_fail@plt+0x5a40>
   16c0c:	ldr	r2, [sp, #120]	; 0x78
   16c10:	cmp	r5, #0
   16c14:	cmpge	r2, #1
   16c18:	bne	16e18 <__assert_fail@plt+0x5bec>
   16c1c:	cmp	r1, #0
   16c20:	beq	16c34 <__assert_fail@plt+0x5a08>
   16c24:	mov	r2, r9
   16c28:	mov	r1, r3
   16c2c:	mov	r0, r8
   16c30:	bl	16b50 <__assert_fail@plt+0x5924>
   16c34:	cmp	r7, #0
   16c38:	beq	16c48 <__assert_fail@plt+0x5a1c>
   16c3c:	mov	r0, r7
   16c40:	mov	r1, #1
   16c44:	bl	13ad8 <__assert_fail@plt+0x28ac>
   16c48:	mov	r6, #1
   16c4c:	mov	r0, r6
   16c50:	add	sp, sp, #84	; 0x54
   16c54:	ldrd	r4, [sp]
   16c58:	ldrd	r6, [sp, #8]
   16c5c:	ldrd	r8, [sp, #16]
   16c60:	ldrd	sl, [sp, #24]
   16c64:	add	sp, sp, #32
   16c68:	pop	{pc}		; (ldr pc, [sp], #4)
   16c6c:	ldr	r2, [pc, #1064]	; 1709c <__assert_fail@plt+0x5e70>
   16c70:	mov	r1, r3
   16c74:	sub	r3, sl, r4
   16c78:	mov	fp, #0
   16c7c:	add	r0, sp, #52	; 0x34
   16c80:	str	r3, [sp, #24]
   16c84:	add	r3, r3, #1
   16c88:	str	r3, [sp, #16]
   16c8c:	str	fp, [sp, #52]	; 0x34
   16c90:	str	fp, [sp, #56]	; 0x38
   16c94:	str	r2, [sp, #60]	; 0x3c
   16c98:	bl	15dbc <__assert_fail@plt+0x4b90>
   16c9c:	ldr	r2, [sp, #60]	; 0x3c
   16ca0:	cmp	r7, fp
   16ca4:	moveq	fp, r7
   16ca8:	str	r2, [sp, #12]
   16cac:	beq	16cf0 <__assert_fail@plt+0x5ac4>
   16cb0:	ldr	r3, [sp, #16]
   16cb4:	movw	r2, #292	; 0x124
   16cb8:	movt	r2, #4
   16cbc:	str	fp, [sp, #44]	; 0x2c
   16cc0:	ldr	r2, [r2, #4]
   16cc4:	lsls	r3, r3, #5
   16cc8:	moveq	r1, fp
   16ccc:	movne	r1, #1
   16cd0:	sub	r3, r3, r1
   16cd4:	lsr	r3, r3, #5
   16cd8:	add	r3, r3, #1
   16cdc:	lsl	r0, r3, #2
   16ce0:	str	r3, [sp, #40]	; 0x28
   16ce4:	blx	r2
   16ce8:	mov	fp, r0
   16cec:	str	r0, [sp, #48]	; 0x30
   16cf0:	ldr	r3, [r9, #8]
   16cf4:	mov	r2, r4
   16cf8:	add	r0, sp, #64	; 0x40
   16cfc:	mov	r1, r3
   16d00:	str	r3, [sp, #20]
   16d04:	bl	15980 <__assert_fail@plt+0x4754>
   16d08:	cmp	r4, #2
   16d0c:	ldr	r3, [sp, #20]
   16d10:	ble	16d20 <__assert_fail@plt+0x5af4>
   16d14:	ldr	r2, [sp, #64]	; 0x40
   16d18:	cmp	r2, #0
   16d1c:	bne	16f84 <__assert_fail@plt+0x5d58>
   16d20:	add	r0, sp, #64	; 0x40
   16d24:	mov	r2, sl
   16d28:	str	r4, [sp]
   16d2c:	ldr	r1, [sp, #12]
   16d30:	str	r0, [sp, #4]
   16d34:	mov	r0, fp
   16d38:	bl	14c68 <__assert_fail@plt+0x3a3c>
   16d3c:	lsl	r3, r4, #2
   16d40:	str	r3, [sp, #20]
   16d44:	cmp	fp, #0
   16d48:	beq	16d70 <__assert_fail@plt+0x5b44>
   16d4c:	ldr	r2, [sp, #16]
   16d50:	cmp	r5, #0
   16d54:	ldr	r3, [sp, #24]
   16d58:	ldr	r3, [fp, r3, lsl #2]
   16d5c:	clz	r3, r3
   16d60:	lsr	r3, r3, #5
   16d64:	subge	r3, r2, r3
   16d68:	sublt	r3, r3, r2
   16d6c:	str	r3, [sp, #44]	; 0x2c
   16d70:	ldr	r3, [sp, #12]
   16d74:	ldr	r2, [sp, #20]
   16d78:	add	r3, r3, r2
   16d7c:	ldr	r2, [r3, #-4]!
   16d80:	cmp	r2, #0
   16d84:	bne	16f78 <__assert_fail@plt+0x5d4c>
   16d88:	subs	r4, r4, #1
   16d8c:	bne	16d7c <__assert_fail@plt+0x5b50>
   16d90:	mov	sl, r4
   16d94:	mov	r1, r4
   16d98:	ldr	r3, [sp, #120]	; 0x78
   16d9c:	cmp	r6, #0
   16da0:	rsblt	r2, r4, #0
   16da4:	movge	r2, r4
   16da8:	str	r2, [sp, #56]	; 0x38
   16dac:	cmp	r3, #0
   16db0:	lsreq	r3, r5, #31
   16db4:	movne	r3, #0
   16db8:	cmp	r3, #0
   16dbc:	beq	16ea4 <__assert_fail@plt+0x5c78>
   16dc0:	cmp	r4, #0
   16dc4:	beq	16ec0 <__assert_fail@plt+0x5c94>
   16dc8:	cmp	r7, #0
   16dcc:	beq	17048 <__assert_fail@plt+0x5e1c>
   16dd0:	add	r1, sp, #40	; 0x28
   16dd4:	mov	r2, #1
   16dd8:	mov	r0, r1
   16ddc:	bl	168b0 <__assert_fail@plt+0x5684>
   16de0:	cmp	r8, #0
   16de4:	beq	16ec8 <__assert_fail@plt+0x5c9c>
   16de8:	add	r1, sp, #52	; 0x34
   16dec:	mov	r2, r9
   16df0:	mov	r0, r1
   16df4:	bl	16778 <__assert_fail@plt+0x554c>
   16df8:	b	17038 <__assert_fail@plt+0x5e0c>
   16dfc:	cmp	r0, #0
   16e00:	strne	r6, [r0, #4]
   16e04:	cmp	r1, #0
   16e08:	beq	16c4c <__assert_fail@plt+0x5a20>
   16e0c:	mov	r3, #0
   16e10:	str	r3, [r1, #4]
   16e14:	b	16c4c <__assert_fail@plt+0x5a20>
   16e18:	ldr	r2, [sp, #120]	; 0x78
   16e1c:	cmp	r2, #0
   16e20:	lsreq	r5, r5, #31
   16e24:	movne	r5, #0
   16e28:	cmp	r5, #0
   16e2c:	beq	16e78 <__assert_fail@plt+0x5c4c>
   16e30:	cmp	r1, #0
   16e34:	beq	16e48 <__assert_fail@plt+0x5c1c>
   16e38:	mov	r2, r9
   16e3c:	mov	r1, r3
   16e40:	mov	r0, r8
   16e44:	bl	16778 <__assert_fail@plt+0x554c>
   16e48:	cmp	r7, #0
   16e4c:	beq	16c48 <__assert_fail@plt+0x5a1c>
   16e50:	ldr	r3, [r7]
   16e54:	mvn	r2, #0
   16e58:	str	r2, [r7, #4]
   16e5c:	cmp	r3, #0
   16e60:	ble	17058 <__assert_fail@plt+0x5e2c>
   16e64:	ldr	r0, [r7, #8]
   16e68:	mov	r3, #1
   16e6c:	mov	r6, r3
   16e70:	str	r3, [r0]
   16e74:	b	16c4c <__assert_fail@plt+0x5a20>
   16e78:	cmp	r1, #0
   16e7c:	beq	16e8c <__assert_fail@plt+0x5c60>
   16e80:	mov	r1, r3
   16e84:	mov	r0, r8
   16e88:	bl	15dbc <__assert_fail@plt+0x4b90>
   16e8c:	cmp	r7, #0
   16e90:	beq	16c48 <__assert_fail@plt+0x5a1c>
   16e94:	mov	r3, #0
   16e98:	mov	r6, #1
   16e9c:	str	r3, [r7, #4]
   16ea0:	b	16c4c <__assert_fail@plt+0x5a20>
   16ea4:	ldr	r3, [sp, #120]	; 0x78
   16ea8:	cmp	r5, #0
   16eac:	cmpge	r3, #1
   16eb0:	moveq	r5, #1
   16eb4:	movne	r5, #0
   16eb8:	tst	r1, r5
   16ebc:	bne	17008 <__assert_fail@plt+0x5ddc>
   16ec0:	cmp	r7, #0
   16ec4:	beq	16f14 <__assert_fail@plt+0x5ce8>
   16ec8:	ldr	r3, [sp, #40]	; 0x28
   16ecc:	ldr	r0, [sp, #44]	; 0x2c
   16ed0:	ldr	r1, [r7]
   16ed4:	str	r3, [r7]
   16ed8:	ldr	r3, [r7, #4]
   16edc:	str	r0, [r7, #4]
   16ee0:	ldr	r0, [r7, #8]
   16ee4:	cmp	r1, #0
   16ee8:	str	r1, [sp, #40]	; 0x28
   16eec:	ldr	r2, [sp, #48]	; 0x30
   16ef0:	str	r3, [sp, #44]	; 0x2c
   16ef4:	str	r0, [sp, #48]	; 0x30
   16ef8:	str	r2, [r7, #8]
   16efc:	beq	16f14 <__assert_fail@plt+0x5ce8>
   16f00:	movw	r3, #292	; 0x124
   16f04:	movt	r3, #4
   16f08:	lsl	r1, r1, #2
   16f0c:	ldr	r3, [r3, #8]
   16f10:	blx	r3
   16f14:	ldr	r3, [sp, #52]	; 0x34
   16f18:	cmp	r8, #0
   16f1c:	moveq	r1, r3
   16f20:	beq	16f50 <__assert_fail@plt+0x5d24>
   16f24:	ldr	r2, [r8, #4]
   16f28:	ldr	r1, [sp, #56]	; 0x38
   16f2c:	ldr	r0, [sp, #60]	; 0x3c
   16f30:	str	r2, [sp, #56]	; 0x38
   16f34:	ldr	r2, [r8, #8]
   16f38:	str	r1, [r8, #4]
   16f3c:	ldr	r1, [r8]
   16f40:	str	r3, [r8]
   16f44:	str	r0, [r8, #8]
   16f48:	str	r1, [sp, #52]	; 0x34
   16f4c:	str	r2, [sp, #60]	; 0x3c
   16f50:	cmp	r1, #0
   16f54:	beq	16f70 <__assert_fail@plt+0x5d44>
   16f58:	movw	r3, #292	; 0x124
   16f5c:	movt	r3, #4
   16f60:	lsl	r1, r1, #2
   16f64:	ldr	r3, [r3, #8]
   16f68:	ldr	r0, [sp, #60]	; 0x3c
   16f6c:	blx	r3
   16f70:	mov	r6, sl
   16f74:	b	16c4c <__assert_fail@plt+0x5a20>
   16f78:	mov	r1, #1
   16f7c:	mov	sl, r1
   16f80:	b	16d98 <__assert_fail@plt+0x5b6c>
   16f84:	lsl	r0, r4, #2
   16f88:	str	r3, [sp, #36]	; 0x24
   16f8c:	movw	r3, #292	; 0x124
   16f90:	movt	r3, #4
   16f94:	ldr	r2, [r3, #4]
   16f98:	str	r0, [sp, #20]
   16f9c:	str	r3, [sp, #32]
   16fa0:	blx	r2
   16fa4:	ldr	r3, [sp, #36]	; 0x24
   16fa8:	mov	r2, r4
   16fac:	str	r0, [sp, #28]
   16fb0:	mov	r1, r3
   16fb4:	ldr	r3, [sp, #64]	; 0x40
   16fb8:	bl	14924 <__assert_fail@plt+0x36f8>
   16fbc:	cmp	r0, #0
   16fc0:	bne	17080 <__assert_fail@plt+0x5e54>
   16fc4:	mov	r2, sl
   16fc8:	add	r0, sp, #64	; 0x40
   16fcc:	str	r4, [sp]
   16fd0:	ldr	sl, [sp, #28]
   16fd4:	str	r0, [sp, #4]
   16fd8:	mov	r0, fp
   16fdc:	ldr	r1, [sp, #12]
   16fe0:	mov	r3, sl
   16fe4:	bl	14c68 <__assert_fail@plt+0x3a3c>
   16fe8:	cmp	sl, #0
   16fec:	beq	16d44 <__assert_fail@plt+0x5b18>
   16ff0:	mov	r0, sl
   16ff4:	ldr	r1, [sp, #20]
   16ff8:	ldr	r3, [sp, #32]
   16ffc:	ldr	r3, [r3, #8]
   17000:	blx	r3
   17004:	b	16d44 <__assert_fail@plt+0x5b18>
   17008:	cmp	r7, #0
   1700c:	beq	17068 <__assert_fail@plt+0x5e3c>
   17010:	add	r1, sp, #40	; 0x28
   17014:	mov	r2, #1
   17018:	mov	r0, r1
   1701c:	bl	167d8 <__assert_fail@plt+0x55ac>
   17020:	cmp	r8, #0
   17024:	beq	16ec8 <__assert_fail@plt+0x5c9c>
   17028:	add	r1, sp, #52	; 0x34
   1702c:	mov	r2, r9
   17030:	mov	r0, r1
   17034:	bl	16b50 <__assert_fail@plt+0x5924>
   17038:	cmp	r7, #0
   1703c:	bne	16ec8 <__assert_fail@plt+0x5c9c>
   17040:	ldr	r3, [sp, #52]	; 0x34
   17044:	b	16f24 <__assert_fail@plt+0x5cf8>
   17048:	cmp	r8, #0
   1704c:	bne	16de8 <__assert_fail@plt+0x5bbc>
   17050:	ldr	r1, [sp, #52]	; 0x34
   17054:	b	16f50 <__assert_fail@plt+0x5d24>
   17058:	mov	r0, r7
   1705c:	mov	r1, #1
   17060:	bl	13584 <__assert_fail@plt+0x2358>
   17064:	b	16e68 <__assert_fail@plt+0x5c3c>
   17068:	cmp	r8, #0
   1706c:	bne	17028 <__assert_fail@plt+0x5dfc>
   17070:	b	17050 <__assert_fail@plt+0x5e24>
   17074:	movw	r0, #60108	; 0xeacc
   17078:	movt	r0, #2
   1707c:	bl	13400 <__assert_fail@plt+0x21d4>
   17080:	movw	r1, #59468	; 0xe84c
   17084:	movt	r1, #2
   17088:	ldr	r3, [pc, #16]	; 170a0 <__assert_fail@plt+0x5e74>
   1708c:	movw	r0, #59656	; 0xe908
   17090:	movt	r0, #2
   17094:	movw	r2, #1155	; 0x483
   17098:	bl	1122c <__assert_fail@plt>
   1709c:	andeq	lr, r2, ip, asr #13
   170a0:	strdeq	lr, [r2], -r4
   170a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   170a8:	mov	ip, #0
   170ac:	cmp	r3, #0
   170b0:	strd	r6, [sp, #8]
   170b4:	mov	r4, r1
   170b8:	mov	r6, r0
   170bc:	str	lr, [sp, #20]
   170c0:	ldr	lr, [pc, #244]	; 171bc <__assert_fail@plt+0x5f90>
   170c4:	str	r8, [sp, #16]
   170c8:	sub	sp, sp, #32
   170cc:	mov	r8, r2
   170d0:	add	r5, sp, #20
   170d4:	ldr	r7, [sp, #56]	; 0x38
   170d8:	str	ip, [sp, #8]
   170dc:	str	ip, [sp, #12]
   170e0:	str	lr, [sp, #16]
   170e4:	str	ip, [sp, #20]
   170e8:	str	ip, [sp, #24]
   170ec:	str	lr, [sp, #28]
   170f0:	beq	17100 <__assert_fail@plt+0x5ed4>
   170f4:	mov	r1, r3
   170f8:	mov	r0, r5
   170fc:	bl	13ad8 <__assert_fail@plt+0x28ac>
   17100:	add	r1, sp, #8
   17104:	mov	r3, r5
   17108:	str	r7, [sp]
   1710c:	mov	r2, r8
   17110:	mov	r0, r6
   17114:	bl	16bb0 <__assert_fail@plt+0x5984>
   17118:	ldr	r1, [sp, #20]
   1711c:	cmp	r1, #0
   17120:	beq	1713c <__assert_fail@plt+0x5f10>
   17124:	movw	r3, #292	; 0x124
   17128:	movt	r3, #4
   1712c:	lsl	r1, r1, #2
   17130:	ldr	r3, [r3, #8]
   17134:	ldr	r0, [sp, #28]
   17138:	blx	r3
   1713c:	ldr	r3, [sp, #12]
   17140:	cmp	r3, #0
   17144:	ldrne	r2, [sp, #16]
   17148:	moveq	r5, r3
   1714c:	ldrne	r5, [r2]
   17150:	cmp	r4, #0
   17154:	ldr	r2, [sp, #8]
   17158:	moveq	r1, r2
   1715c:	beq	17180 <__assert_fail@plt+0x5f54>
   17160:	ldm	r4, {r1, ip}
   17164:	strd	r2, [r4]
   17168:	ldr	r3, [r4, #8]
   1716c:	ldr	r0, [sp, #16]
   17170:	str	r1, [sp, #8]
   17174:	str	ip, [sp, #12]
   17178:	str	r3, [sp, #16]
   1717c:	str	r0, [r4, #8]
   17180:	cmp	r1, #0
   17184:	beq	171a0 <__assert_fail@plt+0x5f74>
   17188:	movw	r3, #292	; 0x124
   1718c:	movt	r3, #4
   17190:	lsl	r1, r1, #2
   17194:	ldr	r3, [r3, #8]
   17198:	ldr	r0, [sp, #16]
   1719c:	blx	r3
   171a0:	mov	r0, r5
   171a4:	add	sp, sp, #32
   171a8:	ldrd	r4, [sp]
   171ac:	ldrd	r6, [sp, #8]
   171b0:	ldr	r8, [sp, #16]
   171b4:	add	sp, sp, #20
   171b8:	pop	{pc}		; (ldr pc, [sp], #4)
   171bc:	andeq	lr, r2, ip, asr #13
   171c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   171c4:	ldr	ip, [r2, #4]
   171c8:	strd	r6, [sp, #8]
   171cc:	ldr	r6, [r1, #4]
   171d0:	strd	r8, [sp, #16]
   171d4:	strd	sl, [sp, #24]
   171d8:	str	lr, [sp, #32]
   171dc:	sub	sp, sp, #20
   171e0:	cmp	ip, #0
   171e4:	cmpne	r6, #0
   171e8:	moveq	r3, #0
   171ec:	streq	r3, [r0, #4]
   171f0:	beq	172d0 <__assert_fail@plt+0x60a4>
   171f4:	eor	r3, r6, r6, asr #31
   171f8:	mov	fp, r1
   171fc:	mov	r4, r0
   17200:	eor	r1, ip, ip, asr #31
   17204:	movw	r7, #292	; 0x124
   17208:	movt	r7, #4
   1720c:	sub	r3, r3, r6, asr #31
   17210:	mov	sl, r2
   17214:	ldr	r2, [r7, #4]
   17218:	sub	r1, r1, ip, asr #31
   1721c:	eor	r6, r6, ip
   17220:	add	r9, r3, r1
   17224:	str	r3, [sp, #8]
   17228:	lsls	r5, r9, #5
   1722c:	str	r1, [sp, #12]
   17230:	movne	r0, #1
   17234:	moveq	r0, #0
   17238:	sub	r5, r5, r0
   1723c:	lsr	r5, r5, #5
   17240:	add	r5, r5, #1
   17244:	lsl	r0, r5, #2
   17248:	blx	r2
   1724c:	ldr	r3, [sp, #8]
   17250:	mov	r8, r0
   17254:	ldr	r1, [sp, #12]
   17258:	cmp	r3, r1
   1725c:	bge	172ec <__assert_fail@plt+0x60c0>
   17260:	str	r3, [sp]
   17264:	mov	r2, r1
   17268:	ldr	r3, [fp, #8]
   1726c:	ldr	r1, [sl, #8]
   17270:	bl	147a4 <__assert_fail@plt+0x3578>
   17274:	sub	r3, r9, #-1073741823	; 0xc0000001
   17278:	ldr	r1, [r4]
   1727c:	cmp	r6, #0
   17280:	ldr	r3, [r8, r3, lsl #2]
   17284:	str	r5, [r4]
   17288:	ldr	r0, [r4, #8]
   1728c:	clz	r3, r3
   17290:	lsr	r3, r3, #5
   17294:	subge	r3, r9, r3
   17298:	sublt	r3, r3, r9
   1729c:	cmp	r1, #0
   172a0:	stmib	r4, {r3, r8}
   172a4:	beq	172d0 <__assert_fail@plt+0x60a4>
   172a8:	ldr	r3, [r7, #8]
   172ac:	lsl	r1, r1, #2
   172b0:	add	sp, sp, #20
   172b4:	ldrd	r4, [sp]
   172b8:	ldrd	r6, [sp, #8]
   172bc:	ldrd	r8, [sp, #16]
   172c0:	ldrd	sl, [sp, #24]
   172c4:	ldr	lr, [sp, #32]
   172c8:	add	sp, sp, #36	; 0x24
   172cc:	bx	r3
   172d0:	add	sp, sp, #20
   172d4:	ldrd	r4, [sp]
   172d8:	ldrd	r6, [sp, #8]
   172dc:	ldrd	r8, [sp, #16]
   172e0:	ldrd	sl, [sp, #24]
   172e4:	add	sp, sp, #32
   172e8:	pop	{pc}		; (ldr pc, [sp], #4)
   172ec:	str	r1, [sp]
   172f0:	mov	r2, r3
   172f4:	ldr	r1, [fp, #8]
   172f8:	ldr	r3, [sl, #8]
   172fc:	bl	147a4 <__assert_fail@plt+0x3578>
   17300:	b	17274 <__assert_fail@plt+0x6048>
   17304:	ldr	ip, [pc, #132]	; 17390 <__assert_fail@plt+0x6164>
   17308:	mov	r3, #0
   1730c:	cmp	r2, #0
   17310:	strd	r4, [sp, #-16]!
   17314:	mov	r5, r0
   17318:	str	r6, [sp, #8]
   1731c:	mov	r6, r1
   17320:	str	lr, [sp, #12]
   17324:	sub	sp, sp, #16
   17328:	add	r4, sp, #4
   1732c:	str	r3, [sp, #4]
   17330:	str	r3, [sp, #8]
   17334:	str	ip, [sp, #12]
   17338:	beq	17348 <__assert_fail@plt+0x611c>
   1733c:	mov	r1, r2
   17340:	mov	r0, r4
   17344:	bl	13ad8 <__assert_fail@plt+0x28ac>
   17348:	mov	r1, r6
   1734c:	mov	r2, r4
   17350:	mov	r0, r5
   17354:	bl	171c0 <__assert_fail@plt+0x5f94>
   17358:	ldr	r1, [sp, #4]
   1735c:	cmp	r1, #0
   17360:	beq	1737c <__assert_fail@plt+0x6150>
   17364:	movw	r3, #292	; 0x124
   17368:	movt	r3, #4
   1736c:	lsl	r1, r1, #2
   17370:	ldr	r3, [r3, #8]
   17374:	ldr	r0, [sp, #12]
   17378:	blx	r3
   1737c:	add	sp, sp, #16
   17380:	ldrd	r4, [sp]
   17384:	ldr	r6, [sp, #8]
   17388:	add	sp, sp, #12
   1738c:	pop	{pc}		; (ldr pc, [sp], #4)
   17390:	andeq	lr, r2, ip, asr #13
   17394:	subs	r3, r2, #0
   17398:	blt	173a0 <__assert_fail@plt+0x6174>
   1739c:	b	17304 <__assert_fail@plt+0x60d8>
   173a0:	rsb	r2, r3, #0
   173a4:	str	r4, [sp, #-8]!
   173a8:	mov	r4, r0
   173ac:	str	lr, [sp, #4]
   173b0:	bl	17304 <__assert_fail@plt+0x60d8>
   173b4:	mov	r1, r4
   173b8:	mov	r0, r4
   173bc:	bl	15dbc <__assert_fail@plt+0x4b90>
   173c0:	ldr	r3, [r4, #4]
   173c4:	rsb	r3, r3, #0
   173c8:	str	r3, [r4, #4]
   173cc:	ldr	r4, [sp]
   173d0:	add	sp, sp, #4
   173d4:	pop	{pc}		; (ldr pc, [sp], #4)
   173d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   173dc:	ldr	r5, [r1, #4]
   173e0:	strd	r6, [sp, #8]
   173e4:	strd	r8, [sp, #16]
   173e8:	mov	r9, r0
   173ec:	strd	sl, [sp, #24]
   173f0:	str	lr, [sp, #32]
   173f4:	sub	sp, sp, #4
   173f8:	cmp	r5, #0
   173fc:	streq	r5, [r0, #4]
   17400:	beq	17498 <__assert_fail@plt+0x626c>
   17404:	ldr	r3, [r0]
   17408:	lsr	sl, r2, #5
   1740c:	cmp	r5, #0
   17410:	rsblt	r5, r5, #0
   17414:	ands	fp, r2, #31
   17418:	movne	r2, #1
   1741c:	moveq	r2, #0
   17420:	add	r7, r5, sl
   17424:	mov	r8, r1
   17428:	add	r7, r7, r2
   1742c:	cmp	r3, r7
   17430:	blt	174b4 <__assert_fail@plt+0x6288>
   17434:	cmp	fp, #0
   17438:	lsl	r4, sl, #2
   1743c:	ldr	r6, [r0, #8]
   17440:	ldr	r1, [r8, #8]
   17444:	bne	174d0 <__assert_fail@plt+0x62a4>
   17448:	lsl	r2, r5, #2
   1744c:	sub	r3, r2, #4
   17450:	add	r2, r1, r2
   17454:	add	r3, r3, r4
   17458:	add	r3, r6, r3
   1745c:	ldr	r0, [r2, #-4]!
   17460:	cmp	r2, r1
   17464:	str	r0, [r3], #-4
   17468:	bne	1745c <__assert_fail@plt+0x6230>
   1746c:	cmp	sl, #0
   17470:	addne	r3, r6, r4
   17474:	movne	r2, #0
   17478:	beq	17488 <__assert_fail@plt+0x625c>
   1747c:	str	r2, [r3, #-4]!
   17480:	cmp	r6, r3
   17484:	bne	1747c <__assert_fail@plt+0x6250>
   17488:	ldr	r3, [r8, #4]
   1748c:	cmp	r3, #0
   17490:	rsblt	r7, r7, #0
   17494:	str	r7, [r9, #4]
   17498:	add	sp, sp, #4
   1749c:	ldrd	r4, [sp]
   174a0:	ldrd	r6, [sp, #8]
   174a4:	ldrd	r8, [sp, #16]
   174a8:	ldrd	sl, [sp, #24]
   174ac:	add	sp, sp, #32
   174b0:	pop	{pc}		; (ldr pc, [sp], #4)
   174b4:	mov	r1, r7
   174b8:	lsl	r4, sl, #2
   174bc:	bl	13584 <__assert_fail@plt+0x2358>
   174c0:	cmp	fp, #0
   174c4:	mov	r6, r0
   174c8:	ldr	r1, [r8, #8]
   174cc:	beq	17448 <__assert_fail@plt+0x621c>
   174d0:	mov	r3, fp
   174d4:	mov	r2, r5
   174d8:	add	r0, r6, r4
   174dc:	bl	14924 <__assert_fail@plt+0x36f8>
   174e0:	sub	r3, r7, #-1073741823	; 0xc0000001
   174e4:	cmp	r0, #0
   174e8:	subeq	r7, r7, #1
   174ec:	str	r0, [r6, r3, lsl #2]
   174f0:	b	1746c <__assert_fail@plt+0x6240>
   174f4:	ldr	ip, [pc, #148]	; 17590 <__assert_fail@plt+0x6364>
   174f8:	mov	r3, #0
   174fc:	cmp	r2, #0
   17500:	strd	r4, [sp, #-16]!
   17504:	mov	r5, r0
   17508:	str	r6, [sp, #8]
   1750c:	mov	r6, r1
   17510:	str	lr, [sp, #12]
   17514:	sub	sp, sp, #16
   17518:	add	r4, sp, #4
   1751c:	str	r3, [sp, #4]
   17520:	str	r3, [sp, #8]
   17524:	str	ip, [sp, #12]
   17528:	beq	17538 <__assert_fail@plt+0x630c>
   1752c:	mov	r1, r2
   17530:	mov	r0, r4
   17534:	bl	13ad8 <__assert_fail@plt+0x28ac>
   17538:	mov	r1, r6
   1753c:	mov	r2, r4
   17540:	mov	r0, r4
   17544:	bl	171c0 <__assert_fail@plt+0x5f94>
   17548:	mov	r1, r5
   1754c:	mov	r2, r4
   17550:	mov	r0, r5
   17554:	bl	16778 <__assert_fail@plt+0x554c>
   17558:	ldr	r1, [sp, #4]
   1755c:	cmp	r1, #0
   17560:	beq	1757c <__assert_fail@plt+0x6350>
   17564:	movw	r3, #292	; 0x124
   17568:	movt	r3, #4
   1756c:	lsl	r1, r1, #2
   17570:	ldr	r3, [r3, #8]
   17574:	ldr	r0, [sp, #12]
   17578:	blx	r3
   1757c:	add	sp, sp, #16
   17580:	ldrd	r4, [sp]
   17584:	ldr	r6, [sp, #8]
   17588:	add	sp, sp, #12
   1758c:	pop	{pc}		; (ldr pc, [sp], #4)
   17590:	andeq	lr, r2, ip, asr #13
   17594:	ldr	ip, [pc, #148]	; 17630 <__assert_fail@plt+0x6404>
   17598:	mov	r3, #0
   1759c:	cmp	r2, #0
   175a0:	strd	r4, [sp, #-16]!
   175a4:	mov	r5, r0
   175a8:	str	r6, [sp, #8]
   175ac:	mov	r6, r1
   175b0:	str	lr, [sp, #12]
   175b4:	sub	sp, sp, #16
   175b8:	add	r4, sp, #4
   175bc:	str	r3, [sp, #4]
   175c0:	str	r3, [sp, #8]
   175c4:	str	ip, [sp, #12]
   175c8:	beq	175d8 <__assert_fail@plt+0x63ac>
   175cc:	mov	r1, r2
   175d0:	mov	r0, r4
   175d4:	bl	13ad8 <__assert_fail@plt+0x28ac>
   175d8:	mov	r1, r6
   175dc:	mov	r2, r4
   175e0:	mov	r0, r4
   175e4:	bl	171c0 <__assert_fail@plt+0x5f94>
   175e8:	mov	r1, r5
   175ec:	mov	r2, r4
   175f0:	mov	r0, r5
   175f4:	bl	16b50 <__assert_fail@plt+0x5924>
   175f8:	ldr	r1, [sp, #4]
   175fc:	cmp	r1, #0
   17600:	beq	1761c <__assert_fail@plt+0x63f0>
   17604:	movw	r3, #292	; 0x124
   17608:	movt	r3, #4
   1760c:	lsl	r1, r1, #2
   17610:	ldr	r3, [r3, #8]
   17614:	ldr	r0, [sp, #12]
   17618:	blx	r3
   1761c:	add	sp, sp, #16
   17620:	ldrd	r4, [sp]
   17624:	ldr	r6, [sp, #8]
   17628:	add	sp, sp, #12
   1762c:	pop	{pc}		; (ldr pc, [sp], #4)
   17630:	andeq	lr, r2, ip, asr #13
   17634:	strd	r4, [sp, #-16]!
   17638:	mov	r3, r2
   1763c:	mov	r4, r0
   17640:	str	r6, [sp, #8]
   17644:	mov	r6, r2
   17648:	mov	r0, #0
   1764c:	ldr	ip, [r6, #4]
   17650:	mov	r2, r1
   17654:	mov	r5, r1
   17658:	str	lr, [sp, #12]
   1765c:	sub	sp, sp, #8
   17660:	lsr	ip, ip, #31
   17664:	str	ip, [sp]
   17668:	bl	16bb0 <__assert_fail@plt+0x5984>
   1766c:	mov	r2, r4
   17670:	mov	r1, r4
   17674:	mov	r0, r4
   17678:	bl	171c0 <__assert_fail@plt+0x5f94>
   1767c:	mov	r1, r5
   17680:	mov	r0, r4
   17684:	mov	r2, #2
   17688:	bl	17594 <__assert_fail@plt+0x6368>
   1768c:	mov	ip, #2
   17690:	mov	r2, r4
   17694:	mov	r1, r4
   17698:	mov	r3, r6
   1769c:	mov	r0, #0
   176a0:	str	ip, [sp]
   176a4:	bl	16bb0 <__assert_fail@plt+0x5984>
   176a8:	mov	r2, r5
   176ac:	mov	r1, r5
   176b0:	mov	r0, r5
   176b4:	add	sp, sp, #8
   176b8:	ldrd	r4, [sp]
   176bc:	ldr	r6, [sp, #8]
   176c0:	ldr	lr, [sp, #12]
   176c4:	add	sp, sp, #16
   176c8:	b	171c0 <__assert_fail@plt+0x5f94>
   176cc:	ldr	ip, [pc, #104]	; 1773c <__assert_fail@plt+0x6510>
   176d0:	mov	r3, #0
   176d4:	str	r4, [sp, #-8]!
   176d8:	mov	r4, r0
   176dc:	str	lr, [sp, #4]
   176e0:	sub	sp, sp, #16
   176e4:	add	r0, sp, #4
   176e8:	str	r3, [sp, #4]
   176ec:	str	r3, [sp, #8]
   176f0:	str	ip, [sp, #12]
   176f4:	bl	171c0 <__assert_fail@plt+0x5f94>
   176f8:	mov	r1, r4
   176fc:	add	r2, sp, #4
   17700:	mov	r0, r4
   17704:	bl	16778 <__assert_fail@plt+0x554c>
   17708:	ldr	r1, [sp, #4]
   1770c:	cmp	r1, #0
   17710:	beq	1772c <__assert_fail@plt+0x6500>
   17714:	movw	r3, #292	; 0x124
   17718:	movt	r3, #4
   1771c:	lsl	r1, r1, #2
   17720:	ldr	r3, [r3, #8]
   17724:	ldr	r0, [sp, #12]
   17728:	blx	r3
   1772c:	add	sp, sp, #16
   17730:	ldr	r4, [sp]
   17734:	add	sp, sp, #4
   17738:	pop	{pc}		; (ldr pc, [sp], #4)
   1773c:	andeq	lr, r2, ip, asr #13
   17740:	ldr	ip, [pc, #104]	; 177b0 <__assert_fail@plt+0x6584>
   17744:	mov	r3, #0
   17748:	str	r4, [sp, #-8]!
   1774c:	mov	r4, r0
   17750:	str	lr, [sp, #4]
   17754:	sub	sp, sp, #16
   17758:	add	r0, sp, #4
   1775c:	str	r3, [sp, #4]
   17760:	str	r3, [sp, #8]
   17764:	str	ip, [sp, #12]
   17768:	bl	171c0 <__assert_fail@plt+0x5f94>
   1776c:	mov	r1, r4
   17770:	add	r2, sp, #4
   17774:	mov	r0, r4
   17778:	bl	16b50 <__assert_fail@plt+0x5924>
   1777c:	ldr	r1, [sp, #4]
   17780:	cmp	r1, #0
   17784:	beq	177a0 <__assert_fail@plt+0x6574>
   17788:	movw	r3, #292	; 0x124
   1778c:	movt	r3, #4
   17790:	lsl	r1, r1, #2
   17794:	ldr	r3, [r3, #8]
   17798:	ldr	r0, [sp, #12]
   1779c:	blx	r3
   177a0:	add	sp, sp, #16
   177a4:	ldr	r4, [sp]
   177a8:	add	sp, sp, #4
   177ac:	pop	{pc}		; (ldr pc, [sp], #4)
   177b0:	andeq	lr, r2, ip, asr #13
   177b4:	mov	ip, #1
   177b8:	push	{lr}		; (str lr, [sp, #-4]!)
   177bc:	sub	sp, sp, #12
   177c0:	str	ip, [sp]
   177c4:	bl	16bb0 <__assert_fail@plt+0x5984>
   177c8:	add	sp, sp, #12
   177cc:	pop	{pc}		; (ldr pc, [sp], #4)
   177d0:	mov	ip, #0
   177d4:	push	{lr}		; (str lr, [sp, #-4]!)
   177d8:	sub	sp, sp, #12
   177dc:	str	ip, [sp]
   177e0:	bl	16bb0 <__assert_fail@plt+0x5984>
   177e4:	add	sp, sp, #12
   177e8:	pop	{pc}		; (ldr pc, [sp], #4)
   177ec:	mov	ip, #2
   177f0:	push	{lr}		; (str lr, [sp, #-4]!)
   177f4:	sub	sp, sp, #12
   177f8:	str	ip, [sp]
   177fc:	bl	16bb0 <__assert_fail@plt+0x5984>
   17800:	add	sp, sp, #12
   17804:	pop	{pc}		; (ldr pc, [sp], #4)
   17808:	mov	ip, #1
   1780c:	push	{lr}		; (str lr, [sp, #-4]!)
   17810:	sub	sp, sp, #12
   17814:	mov	r3, r2
   17818:	mov	r2, r1
   1781c:	mov	r1, #0
   17820:	str	ip, [sp]
   17824:	bl	16bb0 <__assert_fail@plt+0x5984>
   17828:	add	sp, sp, #12
   1782c:	pop	{pc}		; (ldr pc, [sp], #4)
   17830:	mov	ip, #0
   17834:	push	{lr}		; (str lr, [sp, #-4]!)
   17838:	sub	sp, sp, #12
   1783c:	mov	r3, r2
   17840:	mov	r2, r1
   17844:	mov	r1, ip
   17848:	str	ip, [sp]
   1784c:	bl	16bb0 <__assert_fail@plt+0x5984>
   17850:	add	sp, sp, #12
   17854:	pop	{pc}		; (ldr pc, [sp], #4)
   17858:	mov	ip, #2
   1785c:	push	{lr}		; (str lr, [sp, #-4]!)
   17860:	sub	sp, sp, #12
   17864:	mov	r3, r2
   17868:	mov	r2, r1
   1786c:	mov	r1, #0
   17870:	str	ip, [sp]
   17874:	bl	16bb0 <__assert_fail@plt+0x5984>
   17878:	add	sp, sp, #12
   1787c:	pop	{pc}		; (ldr pc, [sp], #4)
   17880:	mov	ip, #1
   17884:	push	{lr}		; (str lr, [sp, #-4]!)
   17888:	sub	sp, sp, #12
   1788c:	mov	r3, r2
   17890:	mov	r2, r1
   17894:	mov	r1, r0
   17898:	mov	r0, #0
   1789c:	str	ip, [sp]
   178a0:	bl	16bb0 <__assert_fail@plt+0x5984>
   178a4:	add	sp, sp, #12
   178a8:	pop	{pc}		; (ldr pc, [sp], #4)
   178ac:	mov	ip, #0
   178b0:	push	{lr}		; (str lr, [sp, #-4]!)
   178b4:	sub	sp, sp, #12
   178b8:	mov	r3, r2
   178bc:	mov	r2, r1
   178c0:	mov	r1, r0
   178c4:	mov	r0, ip
   178c8:	str	ip, [sp]
   178cc:	bl	16bb0 <__assert_fail@plt+0x5984>
   178d0:	add	sp, sp, #12
   178d4:	pop	{pc}		; (ldr pc, [sp], #4)
   178d8:	mov	ip, #2
   178dc:	push	{lr}		; (str lr, [sp, #-4]!)
   178e0:	sub	sp, sp, #12
   178e4:	mov	r3, r2
   178e8:	mov	r2, r1
   178ec:	mov	r1, r0
   178f0:	mov	r0, #0
   178f4:	str	ip, [sp]
   178f8:	bl	16bb0 <__assert_fail@plt+0x5984>
   178fc:	add	sp, sp, #12
   17900:	pop	{pc}		; (ldr pc, [sp], #4)
   17904:	mov	r3, r2
   17908:	push	{lr}		; (str lr, [sp, #-4]!)
   1790c:	sub	sp, sp, #12
   17910:	ldr	ip, [r3, #4]
   17914:	mov	r2, r1
   17918:	mov	r1, r0
   1791c:	mov	r0, #0
   17920:	lsr	ip, ip, #31
   17924:	str	ip, [sp]
   17928:	bl	16bb0 <__assert_fail@plt+0x5984>
   1792c:	add	sp, sp, #12
   17930:	pop	{pc}		; (ldr pc, [sp], #4)
   17934:	mov	r3, r2
   17938:	add	r2, r1, #8
   1793c:	ldr	r1, [r1, #4]
   17940:	mov	ip, #1
   17944:	push	{lr}		; (str lr, [sp, #-4]!)
   17948:	sub	sp, sp, #12
   1794c:	str	ip, [sp]
   17950:	bl	168f0 <__assert_fail@plt+0x56c4>
   17954:	add	sp, sp, #12
   17958:	pop	{pc}		; (ldr pc, [sp], #4)
   1795c:	mov	r3, r2
   17960:	add	r2, r1, #8
   17964:	ldr	r1, [r1, #4]
   17968:	mov	ip, #0
   1796c:	push	{lr}		; (str lr, [sp, #-4]!)
   17970:	sub	sp, sp, #12
   17974:	str	ip, [sp]
   17978:	bl	168f0 <__assert_fail@plt+0x56c4>
   1797c:	add	sp, sp, #12
   17980:	pop	{pc}		; (ldr pc, [sp], #4)
   17984:	mov	r3, r2
   17988:	add	r2, r1, #8
   1798c:	ldr	r1, [r1, #4]
   17990:	mov	ip, #2
   17994:	push	{lr}		; (str lr, [sp, #-4]!)
   17998:	sub	sp, sp, #12
   1799c:	str	ip, [sp]
   179a0:	bl	168f0 <__assert_fail@plt+0x56c4>
   179a4:	add	sp, sp, #12
   179a8:	pop	{pc}		; (ldr pc, [sp], #4)
   179ac:	mov	r3, #1
   179b0:	b	15440 <__assert_fail@plt+0x4214>
   179b4:	mov	r3, #0
   179b8:	b	15440 <__assert_fail@plt+0x4214>
   179bc:	mov	r3, #2
   179c0:	b	15440 <__assert_fail@plt+0x4214>
   179c4:	mov	ip, #2
   179c8:	push	{lr}		; (str lr, [sp, #-4]!)
   179cc:	sub	sp, sp, #12
   179d0:	mov	r3, r2
   179d4:	mov	r2, r1
   179d8:	mov	r1, #0
   179dc:	str	ip, [sp]
   179e0:	bl	16bb0 <__assert_fail@plt+0x5984>
   179e4:	cmp	r0, #0
   179e8:	bne	179f4 <__assert_fail@plt+0x67c8>
   179ec:	add	sp, sp, #12
   179f0:	pop	{pc}		; (ldr pc, [sp], #4)
   179f4:	movw	r1, #59468	; 0xe84c
   179f8:	movt	r1, #2
   179fc:	ldr	r3, [pc, #12]	; 17a10 <__assert_fail@plt+0x67e4>
   17a00:	movw	r0, #59656	; 0xe908
   17a04:	movt	r0, #2
   17a08:	movw	r2, #2521	; 0x9d9
   17a0c:	bl	1122c <__assert_fail@plt>
   17a10:	andeq	lr, r2, r0, lsl #14
   17a14:	mov	ip, #2
   17a18:	push	{lr}		; (str lr, [sp, #-4]!)
   17a1c:	sub	sp, sp, #12
   17a20:	mov	r3, r1
   17a24:	mov	r1, #0
   17a28:	mov	r2, r0
   17a2c:	mov	r0, r1
   17a30:	str	ip, [sp]
   17a34:	bl	16bb0 <__assert_fail@plt+0x5984>
   17a38:	clz	r0, r0
   17a3c:	lsr	r0, r0, #5
   17a40:	add	sp, sp, #12
   17a44:	pop	{pc}		; (ldr pc, [sp], #4)
   17a48:	ldr	ip, [r2, #4]
   17a4c:	strd	r4, [sp, #-12]!
   17a50:	str	lr, [sp, #8]
   17a54:	sub	sp, sp, #28
   17a58:	cmp	ip, #0
   17a5c:	movle	r3, #0
   17a60:	movgt	r3, #1
   17a64:	cmp	r3, ip, lsr #31
   17a68:	beq	17af0 <__assert_fail@plt+0x68c4>
   17a6c:	ldr	r3, [pc, #140]	; 17b00 <__assert_fail@plt+0x68d4>
   17a70:	mov	r5, #0
   17a74:	mov	r4, r2
   17a78:	mov	r2, r1
   17a7c:	mov	r1, r0
   17a80:	add	r0, sp, #12
   17a84:	str	r5, [sp, #12]
   17a88:	str	r5, [sp, #16]
   17a8c:	str	r3, [sp, #20]
   17a90:	bl	16b50 <__assert_fail@plt+0x5924>
   17a94:	mov	ip, #2
   17a98:	mov	r3, r4
   17a9c:	mov	r1, r5
   17aa0:	add	r2, sp, #12
   17aa4:	mov	r0, r5
   17aa8:	str	ip, [sp]
   17aac:	bl	16bb0 <__assert_fail@plt+0x5984>
   17ab0:	ldr	r1, [sp, #12]
   17ab4:	clz	r4, r0
   17ab8:	lsr	r4, r4, #5
   17abc:	cmp	r1, r5
   17ac0:	beq	17adc <__assert_fail@plt+0x68b0>
   17ac4:	movw	r3, #292	; 0x124
   17ac8:	movt	r3, #4
   17acc:	lsl	r1, r1, #2
   17ad0:	ldr	r3, [r3, #8]
   17ad4:	ldr	r0, [sp, #20]
   17ad8:	blx	r3
   17adc:	mov	r0, r4
   17ae0:	add	sp, sp, #28
   17ae4:	ldrd	r4, [sp]
   17ae8:	add	sp, sp, #8
   17aec:	pop	{pc}		; (ldr pc, [sp], #4)
   17af0:	bl	16588 <__assert_fail@plt+0x535c>
   17af4:	clz	r4, r0
   17af8:	lsr	r4, r4, #5
   17afc:	b	17adc <__assert_fail@plt+0x68b0>
   17b00:	andeq	lr, r2, ip, asr #13
   17b04:	mov	ip, #1
   17b08:	push	{lr}		; (str lr, [sp, #-4]!)
   17b0c:	sub	sp, sp, #12
   17b10:	str	ip, [sp]
   17b14:	bl	170a4 <__assert_fail@plt+0x5e78>
   17b18:	add	sp, sp, #12
   17b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b20:	mov	ip, #0
   17b24:	push	{lr}		; (str lr, [sp, #-4]!)
   17b28:	sub	sp, sp, #12
   17b2c:	str	ip, [sp]
   17b30:	bl	170a4 <__assert_fail@plt+0x5e78>
   17b34:	add	sp, sp, #12
   17b38:	pop	{pc}		; (ldr pc, [sp], #4)
   17b3c:	mov	ip, #2
   17b40:	push	{lr}		; (str lr, [sp, #-4]!)
   17b44:	sub	sp, sp, #12
   17b48:	str	ip, [sp]
   17b4c:	bl	170a4 <__assert_fail@plt+0x5e78>
   17b50:	add	sp, sp, #12
   17b54:	pop	{pc}		; (ldr pc, [sp], #4)
   17b58:	mov	ip, #1
   17b5c:	push	{lr}		; (str lr, [sp, #-4]!)
   17b60:	sub	sp, sp, #12
   17b64:	mov	r3, r2
   17b68:	mov	r2, r1
   17b6c:	mov	r1, #0
   17b70:	str	ip, [sp]
   17b74:	bl	170a4 <__assert_fail@plt+0x5e78>
   17b78:	add	sp, sp, #12
   17b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b80:	mov	ip, #0
   17b84:	push	{lr}		; (str lr, [sp, #-4]!)
   17b88:	sub	sp, sp, #12
   17b8c:	mov	r3, r2
   17b90:	mov	r2, r1
   17b94:	mov	r1, ip
   17b98:	str	ip, [sp]
   17b9c:	bl	170a4 <__assert_fail@plt+0x5e78>
   17ba0:	add	sp, sp, #12
   17ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ba8:	mov	ip, #2
   17bac:	push	{lr}		; (str lr, [sp, #-4]!)
   17bb0:	sub	sp, sp, #12
   17bb4:	mov	r3, r2
   17bb8:	mov	r2, r1
   17bbc:	mov	r1, #0
   17bc0:	str	ip, [sp]
   17bc4:	bl	170a4 <__assert_fail@plt+0x5e78>
   17bc8:	add	sp, sp, #12
   17bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   17bd0:	mov	ip, #1
   17bd4:	push	{lr}		; (str lr, [sp, #-4]!)
   17bd8:	sub	sp, sp, #12
   17bdc:	mov	r3, r2
   17be0:	mov	r2, r1
   17be4:	mov	r1, r0
   17be8:	mov	r0, #0
   17bec:	str	ip, [sp]
   17bf0:	bl	170a4 <__assert_fail@plt+0x5e78>
   17bf4:	add	sp, sp, #12
   17bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bfc:	mov	ip, #0
   17c00:	push	{lr}		; (str lr, [sp, #-4]!)
   17c04:	sub	sp, sp, #12
   17c08:	mov	r3, r2
   17c0c:	mov	r2, r1
   17c10:	mov	r1, r0
   17c14:	mov	r0, ip
   17c18:	str	ip, [sp]
   17c1c:	bl	170a4 <__assert_fail@plt+0x5e78>
   17c20:	add	sp, sp, #12
   17c24:	pop	{pc}		; (ldr pc, [sp], #4)
   17c28:	mov	ip, #2
   17c2c:	push	{lr}		; (str lr, [sp, #-4]!)
   17c30:	sub	sp, sp, #12
   17c34:	mov	r3, r2
   17c38:	mov	r2, r1
   17c3c:	mov	r1, r0
   17c40:	mov	r0, #0
   17c44:	str	ip, [sp]
   17c48:	bl	170a4 <__assert_fail@plt+0x5e78>
   17c4c:	add	sp, sp, #12
   17c50:	pop	{pc}		; (ldr pc, [sp], #4)
   17c54:	mov	ip, #1
   17c58:	push	{lr}		; (str lr, [sp, #-4]!)
   17c5c:	sub	sp, sp, #12
   17c60:	mov	r3, r1
   17c64:	mov	r1, #0
   17c68:	mov	r2, r0
   17c6c:	mov	r0, r1
   17c70:	str	ip, [sp]
   17c74:	bl	170a4 <__assert_fail@plt+0x5e78>
   17c78:	add	sp, sp, #12
   17c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c80:	mov	ip, #0
   17c84:	push	{lr}		; (str lr, [sp, #-4]!)
   17c88:	sub	sp, sp, #12
   17c8c:	mov	r3, r1
   17c90:	mov	r2, r0
   17c94:	mov	r1, ip
   17c98:	mov	r0, ip
   17c9c:	str	ip, [sp]
   17ca0:	bl	170a4 <__assert_fail@plt+0x5e78>
   17ca4:	add	sp, sp, #12
   17ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   17cac:	mov	ip, #2
   17cb0:	push	{lr}		; (str lr, [sp, #-4]!)
   17cb4:	sub	sp, sp, #12
   17cb8:	mov	r3, r1
   17cbc:	mov	r1, #0
   17cc0:	mov	r2, r0
   17cc4:	mov	r0, r1
   17cc8:	str	ip, [sp]
   17ccc:	bl	170a4 <__assert_fail@plt+0x5e78>
   17cd0:	add	sp, sp, #12
   17cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   17cd8:	b	17bfc <__assert_fail@plt+0x69d0>
   17cdc:	mov	ip, #2
   17ce0:	push	{lr}		; (str lr, [sp, #-4]!)
   17ce4:	sub	sp, sp, #12
   17ce8:	mov	r3, r2
   17cec:	mov	r2, r1
   17cf0:	mov	r1, #0
   17cf4:	str	ip, [sp]
   17cf8:	bl	170a4 <__assert_fail@plt+0x5e78>
   17cfc:	cmp	r0, #0
   17d00:	bne	17d0c <__assert_fail@plt+0x6ae0>
   17d04:	add	sp, sp, #12
   17d08:	pop	{pc}		; (ldr pc, [sp], #4)
   17d0c:	movw	r1, #59468	; 0xe84c
   17d10:	movt	r1, #2
   17d14:	ldr	r3, [pc, #12]	; 17d28 <__assert_fail@plt+0x6afc>
   17d18:	movw	r0, #59656	; 0xe908
   17d1c:	movt	r0, #2
   17d20:	movw	r2, #2647	; 0xa57
   17d24:	bl	1122c <__assert_fail@plt>
   17d28:	andeq	lr, r2, r0, lsl r7
   17d2c:	mov	ip, #2
   17d30:	push	{lr}		; (str lr, [sp, #-4]!)
   17d34:	sub	sp, sp, #12
   17d38:	mov	r3, r1
   17d3c:	mov	r1, #0
   17d40:	mov	r2, r0
   17d44:	mov	r0, r1
   17d48:	str	ip, [sp]
   17d4c:	bl	170a4 <__assert_fail@plt+0x5e78>
   17d50:	clz	r0, r0
   17d54:	lsr	r0, r0, #5
   17d58:	add	sp, sp, #12
   17d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d60:	ldr	r3, [r1, #4]
   17d64:	strd	r4, [sp, #-16]!
   17d68:	mov	r4, r2
   17d6c:	mov	r5, r0
   17d70:	str	r6, [sp, #8]
   17d74:	str	lr, [sp, #12]
   17d78:	sub	sp, sp, #32
   17d7c:	cmp	r3, #0
   17d80:	moveq	r1, r2
   17d84:	beq	17f98 <__assert_fail@plt+0x6d6c>
   17d88:	ldr	r3, [r2, #4]
   17d8c:	cmp	r3, #0
   17d90:	beq	17f98 <__assert_fail@plt+0x6d6c>
   17d94:	ldr	r2, [pc, #864]	; 180fc <__assert_fail@plt+0x6ed0>
   17d98:	mov	r3, #0
   17d9c:	add	r0, sp, #8
   17da0:	str	r3, [sp, #8]
   17da4:	str	r3, [sp, #12]
   17da8:	strd	r2, [sp, #16]
   17dac:	str	r3, [sp, #24]
   17db0:	str	r2, [sp, #28]
   17db4:	bl	15dbc <__assert_fail@plt+0x4b90>
   17db8:	ldr	r3, [sp, #12]
   17dbc:	add	r0, sp, #8
   17dc0:	cmp	r3, #0
   17dc4:	rsblt	r3, r3, #0
   17dc8:	str	r3, [sp, #12]
   17dcc:	bl	16ab8 <__assert_fail@plt+0x588c>
   17dd0:	mov	r6, r0
   17dd4:	mov	r1, r4
   17dd8:	add	r0, sp, #20
   17ddc:	bl	15dbc <__assert_fail@plt+0x4b90>
   17de0:	ldr	r3, [sp, #24]
   17de4:	add	r0, sp, #20
   17de8:	cmp	r3, #0
   17dec:	rsblt	r3, r3, #0
   17df0:	str	r3, [sp, #24]
   17df4:	bl	16ab8 <__assert_fail@plt+0x588c>
   17df8:	ldr	r3, [sp, #12]
   17dfc:	cmp	r6, r0
   17e00:	movcs	r6, r0
   17e04:	ldr	r2, [sp, #24]
   17e08:	cmp	r3, r2
   17e0c:	bge	17e38 <__assert_fail@plt+0x6c0c>
   17e10:	str	r2, [sp, #12]
   17e14:	str	r3, [sp, #24]
   17e18:	ldr	r0, [sp, #8]
   17e1c:	ldr	r1, [sp, #16]
   17e20:	ldr	r2, [sp, #20]
   17e24:	ldr	r3, [sp, #28]
   17e28:	str	r2, [sp, #8]
   17e2c:	str	r0, [sp, #20]
   17e30:	str	r3, [sp, #16]
   17e34:	str	r1, [sp, #28]
   17e38:	mov	r0, #2
   17e3c:	add	r2, sp, #8
   17e40:	add	r3, sp, #20
   17e44:	mov	r1, r2
   17e48:	str	r0, [sp]
   17e4c:	mov	r0, #0
   17e50:	bl	16bb0 <__assert_fail@plt+0x5984>
   17e54:	ldr	r3, [sp, #12]
   17e58:	cmp	r3, #0
   17e5c:	bne	17f4c <__assert_fail@plt+0x6d20>
   17e60:	ldr	r3, [r5, #4]
   17e64:	ldr	r0, [sp, #20]
   17e68:	ldr	r2, [sp, #24]
   17e6c:	str	r3, [sp, #24]
   17e70:	ldr	r1, [sp, #28]
   17e74:	ldr	r3, [r5, #8]
   17e78:	str	r2, [r5, #4]
   17e7c:	ldr	r2, [r5]
   17e80:	str	r0, [r5]
   17e84:	str	r1, [r5, #8]
   17e88:	ldr	r1, [sp, #8]
   17e8c:	str	r2, [sp, #20]
   17e90:	str	r3, [sp, #28]
   17e94:	cmp	r1, #0
   17e98:	beq	17eb4 <__assert_fail@plt+0x6c88>
   17e9c:	movw	r3, #292	; 0x124
   17ea0:	movt	r3, #4
   17ea4:	lsl	r1, r1, #2
   17ea8:	ldr	r3, [r3, #8]
   17eac:	ldr	r0, [sp, #16]
   17eb0:	blx	r3
   17eb4:	ldr	r1, [sp, #20]
   17eb8:	cmp	r1, #0
   17ebc:	beq	17ed8 <__assert_fail@plt+0x6cac>
   17ec0:	movw	r3, #292	; 0x124
   17ec4:	movt	r3, #4
   17ec8:	lsl	r1, r1, #2
   17ecc:	ldr	r3, [r3, #8]
   17ed0:	ldr	r0, [sp, #28]
   17ed4:	blx	r3
   17ed8:	mov	r2, r6
   17edc:	mov	r1, r5
   17ee0:	mov	r0, r5
   17ee4:	bl	173d8 <__assert_fail@plt+0x61ac>
   17ee8:	add	sp, sp, #32
   17eec:	ldrd	r4, [sp]
   17ef0:	ldr	r6, [sp, #8]
   17ef4:	add	sp, sp, #12
   17ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   17efc:	ldr	r4, [sp, #24]
   17f00:	bge	17f34 <__assert_fail@plt+0x6d08>
   17f04:	ldr	r0, [sp, #8]
   17f08:	ldr	r3, [sp, #12]
   17f0c:	str	r4, [sp, #12]
   17f10:	ldr	r2, [sp, #16]
   17f14:	ldr	r1, [sp, #20]
   17f18:	mov	r4, r3
   17f1c:	str	r1, [sp, #8]
   17f20:	str	r3, [sp, #24]
   17f24:	ldr	r3, [sp, #28]
   17f28:	str	r3, [sp, #16]
   17f2c:	str	r0, [sp, #20]
   17f30:	str	r2, [sp, #28]
   17f34:	cmp	r4, #1
   17f38:	beq	17fb0 <__assert_fail@plt+0x6d84>
   17f3c:	add	r1, sp, #8
   17f40:	add	r2, sp, #20
   17f44:	mov	r0, r1
   17f48:	bl	16b50 <__assert_fail@plt+0x5924>
   17f4c:	add	r0, sp, #8
   17f50:	bl	16ab8 <__assert_fail@plt+0x588c>
   17f54:	add	r1, sp, #20
   17f58:	add	r0, sp, #8
   17f5c:	bl	16588 <__assert_fail@plt+0x535c>
   17f60:	cmp	r0, #0
   17f64:	bne	17efc <__assert_fail@plt+0x6cd0>
   17f68:	ldr	r3, [r5, #4]
   17f6c:	ldrd	r0, [sp, #8]
   17f70:	ldr	r2, [sp, #16]
   17f74:	str	r3, [sp, #12]
   17f78:	ldr	r3, [r5, #8]
   17f7c:	str	r1, [r5, #4]
   17f80:	ldr	r1, [r5]
   17f84:	str	r0, [r5]
   17f88:	str	r2, [r5, #8]
   17f8c:	str	r1, [sp, #8]
   17f90:	str	r3, [sp, #16]
   17f94:	b	17e94 <__assert_fail@plt+0x6c68>
   17f98:	bl	15dbc <__assert_fail@plt+0x4b90>
   17f9c:	ldr	r3, [r5, #4]
   17fa0:	cmp	r3, #0
   17fa4:	rsblt	r3, r3, #0
   17fa8:	str	r3, [r5, #4]
   17fac:	b	17ee8 <__assert_fail@plt+0x6cbc>
   17fb0:	mov	r0, #2
   17fb4:	add	r2, sp, #8
   17fb8:	add	r3, sp, #20
   17fbc:	mov	r1, r2
   17fc0:	str	r0, [sp]
   17fc4:	mov	r0, #0
   17fc8:	bl	16bb0 <__assert_fail@plt+0x5984>
   17fcc:	ldr	r3, [r5]
   17fd0:	cmp	r3, #0
   17fd4:	ble	180d0 <__assert_fail@plt+0x6ea4>
   17fd8:	ldr	r0, [r5, #8]
   17fdc:	ldr	r3, [sp, #16]
   17fe0:	ldr	r2, [sp, #28]
   17fe4:	ldr	r3, [r3]
   17fe8:	ldr	r2, [r2]
   17fec:	orrs	ip, r3, r2
   17ff0:	beq	180e0 <__assert_fail@plt+0x6eb4>
   17ff4:	cmp	r3, #0
   17ff8:	beq	18098 <__assert_fail@plt+0x6e6c>
   17ffc:	cmp	r2, #0
   18000:	moveq	r2, r3
   18004:	beq	18098 <__assert_fail@plt+0x6e6c>
   18008:	rsb	r1, ip, #0
   1800c:	and	r1, r1, ip
   18010:	ands	ip, r1, #-16777216	; 0xff000000
   18014:	bne	180c8 <__assert_fail@plt+0x6e9c>
   18018:	lsl	r1, r1, #8
   1801c:	add	ip, ip, #8
   18020:	tst	r1, #-16777216	; 0xff000000
   18024:	beq	18018 <__assert_fail@plt+0x6dec>
   18028:	cmp	r1, #0
   1802c:	blt	1803c <__assert_fail@plt+0x6e10>
   18030:	lsls	r1, r1, #1
   18034:	add	ip, ip, #1
   18038:	bpl	18030 <__assert_fail@plt+0x6e04>
   1803c:	rsb	ip, ip, #31
   18040:	lsr	r3, r3, ip
   18044:	lsr	r2, r2, ip
   18048:	tst	r3, #1
   1804c:	bne	180b0 <__assert_fail@plt+0x6e84>
   18050:	lsr	r3, r3, #1
   18054:	tst	r3, #1
   18058:	beq	18050 <__assert_fail@plt+0x6e24>
   1805c:	cmp	r2, r3
   18060:	beq	18094 <__assert_fail@plt+0x6e68>
   18064:	cmp	r3, r2
   18068:	bcs	18080 <__assert_fail@plt+0x6e54>
   1806c:	sub	r2, r2, r3
   18070:	lsr	r2, r2, #1
   18074:	tst	r2, #1
   18078:	beq	18070 <__assert_fail@plt+0x6e44>
   1807c:	b	1805c <__assert_fail@plt+0x6e30>
   18080:	sub	r3, r3, r2
   18084:	lsr	r3, r3, #1
   18088:	tst	r3, #1
   1808c:	beq	18084 <__assert_fail@plt+0x6e58>
   18090:	b	1805c <__assert_fail@plt+0x6e30>
   18094:	lsl	r2, r3, ip
   18098:	adds	r3, r2, #0
   1809c:	ldr	r1, [sp, #8]
   180a0:	movne	r3, #1
   180a4:	str	r2, [r0]
   180a8:	str	r3, [r5, #4]
   180ac:	b	17e94 <__assert_fail@plt+0x6c68>
   180b0:	mov	r1, r3
   180b4:	tst	r2, #1
   180b8:	mov	r3, r2
   180bc:	mov	r2, r1
   180c0:	beq	18050 <__assert_fail@plt+0x6e24>
   180c4:	b	1805c <__assert_fail@plt+0x6e30>
   180c8:	mov	ip, #0
   180cc:	b	18028 <__assert_fail@plt+0x6dfc>
   180d0:	mov	r1, r4
   180d4:	mov	r0, r5
   180d8:	bl	13584 <__assert_fail@plt+0x2358>
   180dc:	b	17fdc <__assert_fail@plt+0x6db0>
   180e0:	movw	r1, #59468	; 0xe84c
   180e4:	movt	r1, #2
   180e8:	ldr	r3, [pc, #16]	; 18100 <__assert_fail@plt+0x6ed4>
   180ec:	movw	r0, #60136	; 0xeae8
   180f0:	movt	r0, #2
   180f4:	movw	r2, #2663	; 0xa67
   180f8:	bl	1122c <__assert_fail@plt>
   180fc:	andeq	lr, r2, ip, asr #13
   18100:	andeq	lr, r2, r0, lsr #14
   18104:	ldr	ip, [pc, #220]	; 181e8 <__assert_fail@plt+0x6fbc>
   18108:	mov	r3, #0
   1810c:	strd	r4, [sp, #-16]!
   18110:	subs	r5, r2, #0
   18114:	mov	r4, r0
   18118:	str	r6, [sp, #8]
   1811c:	str	lr, [sp, #12]
   18120:	sub	sp, sp, #16
   18124:	str	r3, [sp, #4]
   18128:	str	r3, [sp, #8]
   1812c:	str	ip, [sp, #12]
   18130:	beq	181d8 <__assert_fail@plt+0x6fac>
   18134:	mov	r6, r1
   18138:	add	r0, sp, #4
   1813c:	mov	r1, r5
   18140:	bl	13ad8 <__assert_fail@plt+0x28ac>
   18144:	add	r2, sp, #4
   18148:	mov	r1, r6
   1814c:	mov	r0, r2
   18150:	bl	17d60 <__assert_fail@plt+0x6b34>
   18154:	ldr	r5, [sp, #8]
   18158:	cmp	r5, #0
   1815c:	ldrne	r3, [sp, #12]
   18160:	ldrne	r5, [r3]
   18164:	cmp	r4, #0
   18168:	ldr	r3, [sp, #4]
   1816c:	moveq	r1, r3
   18170:	beq	181a0 <__assert_fail@plt+0x6f74>
   18174:	ldr	r2, [r4, #4]
   18178:	ldr	r1, [sp, #8]
   1817c:	ldr	r0, [sp, #12]
   18180:	str	r2, [sp, #8]
   18184:	ldr	r2, [r4, #8]
   18188:	str	r1, [r4, #4]
   1818c:	ldr	r1, [r4]
   18190:	str	r3, [r4]
   18194:	str	r0, [r4, #8]
   18198:	str	r1, [sp, #4]
   1819c:	str	r2, [sp, #12]
   181a0:	cmp	r1, #0
   181a4:	beq	181c0 <__assert_fail@plt+0x6f94>
   181a8:	movw	r3, #292	; 0x124
   181ac:	movt	r3, #4
   181b0:	lsl	r1, r1, #2
   181b4:	ldr	r3, [r3, #8]
   181b8:	ldr	r0, [sp, #12]
   181bc:	blx	r3
   181c0:	mov	r0, r5
   181c4:	add	sp, sp, #16
   181c8:	ldrd	r4, [sp]
   181cc:	ldr	r6, [sp, #8]
   181d0:	add	sp, sp, #12
   181d4:	pop	{pc}		; (ldr pc, [sp], #4)
   181d8:	add	r2, sp, #4
   181dc:	mov	r0, r2
   181e0:	bl	17d60 <__assert_fail@plt+0x6b34>
   181e4:	b	18164 <__assert_fail@plt+0x6f38>
   181e8:	andeq	lr, r2, ip, asr #13
   181ec:	strd	r4, [sp, #-16]!
   181f0:	str	r6, [sp, #8]
   181f4:	str	lr, [sp, #12]
   181f8:	sub	sp, sp, #16
   181fc:	ldr	lr, [r1, #4]
   18200:	cmp	lr, #0
   18204:	beq	18218 <__assert_fail@plt+0x6fec>
   18208:	ldr	lr, [r2, #4]
   1820c:	mov	r5, r2
   18210:	cmp	lr, #0
   18214:	bne	18234 <__assert_fail@plt+0x7008>
   18218:	mov	r3, #0
   1821c:	str	r3, [r0, #4]
   18220:	add	sp, sp, #16
   18224:	ldrd	r4, [sp]
   18228:	ldr	r6, [sp, #8]
   1822c:	add	sp, sp, #12
   18230:	pop	{pc}		; (ldr pc, [sp], #4)
   18234:	ldr	ip, [pc, #128]	; 182bc <__assert_fail@plt+0x7090>
   18238:	mov	r3, #0
   1823c:	mov	r6, r0
   18240:	add	r0, sp, #4
   18244:	mov	r4, r1
   18248:	str	r3, [sp, #4]
   1824c:	str	r3, [sp, #8]
   18250:	str	ip, [sp, #12]
   18254:	bl	17d60 <__assert_fail@plt+0x6b34>
   18258:	add	r2, sp, #4
   1825c:	mov	r1, r4
   18260:	mov	r0, r2
   18264:	bl	179c4 <__assert_fail@plt+0x6798>
   18268:	add	r1, sp, #4
   1826c:	mov	r2, r5
   18270:	mov	r0, r6
   18274:	bl	171c0 <__assert_fail@plt+0x5f94>
   18278:	ldr	r1, [sp, #4]
   1827c:	cmp	r1, #0
   18280:	beq	1829c <__assert_fail@plt+0x7070>
   18284:	movw	r3, #292	; 0x124
   18288:	movt	r3, #4
   1828c:	lsl	r1, r1, #2
   18290:	ldr	r3, [r3, #8]
   18294:	ldr	r0, [sp, #12]
   18298:	blx	r3
   1829c:	mov	r1, r6
   182a0:	mov	r0, r6
   182a4:	bl	15dbc <__assert_fail@plt+0x4b90>
   182a8:	ldr	r3, [r6, #4]
   182ac:	cmp	r3, #0
   182b0:	rsblt	r3, r3, #0
   182b4:	str	r3, [r6, #4]
   182b8:	b	18220 <__assert_fail@plt+0x6ff4>
   182bc:	andeq	lr, r2, ip, asr #13
   182c0:	subs	ip, r2, #0
   182c4:	beq	18348 <__assert_fail@plt+0x711c>
   182c8:	strd	r4, [sp, #-16]!
   182cc:	mov	r5, r1
   182d0:	str	r6, [sp, #8]
   182d4:	str	lr, [sp, #12]
   182d8:	ldr	lr, [r1, #4]
   182dc:	cmp	lr, #0
   182e0:	moveq	r3, #0
   182e4:	streq	r3, [r0, #4]
   182e8:	bne	182fc <__assert_fail@plt+0x70d0>
   182ec:	ldrd	r4, [sp]
   182f0:	ldr	r6, [sp, #8]
   182f4:	add	sp, sp, #12
   182f8:	pop	{pc}		; (ldr pc, [sp], #4)
   182fc:	mov	r4, r0
   18300:	mov	r6, ip
   18304:	mov	r0, #0
   18308:	bl	18104 <__assert_fail@plt+0x6ed8>
   1830c:	udiv	r2, r6, r0
   18310:	mov	r1, r5
   18314:	mov	r0, r4
   18318:	bl	17304 <__assert_fail@plt+0x60d8>
   1831c:	mov	r1, r4
   18320:	mov	r0, r4
   18324:	bl	15dbc <__assert_fail@plt+0x4b90>
   18328:	ldr	r3, [r4, #4]
   1832c:	ldr	r6, [sp, #8]
   18330:	cmp	r3, #0
   18334:	rsblt	r3, r3, #0
   18338:	str	r3, [r4, #4]
   1833c:	ldrd	r4, [sp]
   18340:	add	sp, sp, #12
   18344:	pop	{pc}		; (ldr pc, [sp], #4)
   18348:	mov	r3, #0
   1834c:	str	r3, [r0, #4]
   18350:	bx	lr
   18354:	ldr	ip, [pc, #228]	; 18440 <__assert_fail@plt+0x7214>
   18358:	mov	r3, #0
   1835c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18360:	mov	r5, #32
   18364:	mov	r4, #-2147483648	; 0x80000000
   18368:	strd	r6, [sp, #8]
   1836c:	mov	r7, r1
   18370:	mov	r1, #1
   18374:	str	r8, [sp, #16]
   18378:	mov	r8, r0
   1837c:	mov	r6, r2
   18380:	str	lr, [sp, #20]
   18384:	sub	sp, sp, #16
   18388:	add	r0, sp, #4
   1838c:	str	r3, [sp, #4]
   18390:	str	r3, [sp, #8]
   18394:	str	ip, [sp, #12]
   18398:	bl	13ad8 <__assert_fail@plt+0x28ac>
   1839c:	b	183a8 <__assert_fail@plt+0x717c>
   183a0:	subs	r5, r5, #1
   183a4:	beq	183dc <__assert_fail@plt+0x71b0>
   183a8:	add	r2, sp, #4
   183ac:	mov	r1, r2
   183b0:	mov	r0, r2
   183b4:	bl	171c0 <__assert_fail@plt+0x5f94>
   183b8:	tst	r4, r6
   183bc:	lsr	r4, r4, #1
   183c0:	beq	183a0 <__assert_fail@plt+0x7174>
   183c4:	add	r1, sp, #4
   183c8:	mov	r2, r7
   183cc:	mov	r0, r1
   183d0:	bl	171c0 <__assert_fail@plt+0x5f94>
   183d4:	subs	r5, r5, #1
   183d8:	bne	183a8 <__assert_fail@plt+0x717c>
   183dc:	ldr	r3, [sp, #4]
   183e0:	ldr	r0, [sp, #8]
   183e4:	ldr	r1, [r8]
   183e8:	str	r3, [r8]
   183ec:	ldr	r3, [r8, #4]
   183f0:	str	r0, [r8, #4]
   183f4:	ldr	r0, [r8, #8]
   183f8:	cmp	r1, #0
   183fc:	str	r1, [sp, #4]
   18400:	ldr	r2, [sp, #12]
   18404:	str	r3, [sp, #8]
   18408:	str	r0, [sp, #12]
   1840c:	str	r2, [r8, #8]
   18410:	beq	18428 <__assert_fail@plt+0x71fc>
   18414:	movw	r3, #292	; 0x124
   18418:	movt	r3, #4
   1841c:	lsl	r1, r1, #2
   18420:	ldr	r3, [r3, #8]
   18424:	blx	r3
   18428:	add	sp, sp, #16
   1842c:	ldrd	r4, [sp]
   18430:	ldrd	r6, [sp, #8]
   18434:	ldr	r8, [sp, #16]
   18438:	add	sp, sp, #20
   1843c:	pop	{pc}		; (ldr pc, [sp], #4)
   18440:	andeq	lr, r2, ip, asr #13
   18444:	ldr	ip, [pc, #128]	; 184cc <__assert_fail@plt+0x72a0>
   18448:	mov	r3, #0
   1844c:	strd	r4, [sp, #-16]!
   18450:	cmp	r1, r3
   18454:	mov	r5, r0
   18458:	str	r6, [sp, #8]
   1845c:	mov	r6, r2
   18460:	str	lr, [sp, #12]
   18464:	sub	sp, sp, #16
   18468:	add	r4, sp, #4
   1846c:	str	r3, [sp, #4]
   18470:	str	r3, [sp, #8]
   18474:	str	ip, [sp, #12]
   18478:	beq	18484 <__assert_fail@plt+0x7258>
   1847c:	mov	r0, r4
   18480:	bl	13ad8 <__assert_fail@plt+0x28ac>
   18484:	mov	r1, r4
   18488:	mov	r2, r6
   1848c:	mov	r0, r5
   18490:	bl	18354 <__assert_fail@plt+0x7128>
   18494:	ldr	r1, [sp, #4]
   18498:	cmp	r1, #0
   1849c:	beq	184b8 <__assert_fail@plt+0x728c>
   184a0:	movw	r3, #292	; 0x124
   184a4:	movt	r3, #4
   184a8:	lsl	r1, r1, #2
   184ac:	ldr	r3, [r3, #8]
   184b0:	ldr	r0, [sp, #12]
   184b4:	blx	r3
   184b8:	add	sp, sp, #16
   184bc:	ldrd	r4, [sp]
   184c0:	ldr	r6, [sp, #8]
   184c4:	add	sp, sp, #12
   184c8:	pop	{pc}		; (ldr pc, [sp], #4)
   184cc:	andeq	lr, r2, ip, asr #13
   184d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   184d4:	mov	r4, r1
   184d8:	cmp	r1, #0
   184dc:	addeq	r1, r1, #1
   184e0:	cmp	r1, #0
   184e4:	mov	r5, r0
   184e8:	strd	r6, [sp, #8]
   184ec:	mov	r7, r2
   184f0:	str	r8, [sp, #16]
   184f4:	str	lr, [sp, #20]
   184f8:	streq	r1, [r0, #4]
   184fc:	beq	18504 <__assert_fail@plt+0x72d8>
   18500:	bl	13ad8 <__assert_fail@plt+0x28ac>
   18504:	add	r6, r7, #1
   18508:	cmp	r6, #1
   1850c:	bhi	18528 <__assert_fail@plt+0x72fc>
   18510:	b	18530 <__assert_fail@plt+0x7304>
   18514:	sub	r4, r4, r7
   18518:	mov	r1, r5
   1851c:	mov	r2, r4
   18520:	mov	r0, r5
   18524:	bl	17304 <__assert_fail@plt+0x60d8>
   18528:	cmp	r6, r4
   1852c:	bcc	18514 <__assert_fail@plt+0x72e8>
   18530:	ldrd	r4, [sp]
   18534:	ldrd	r6, [sp, #8]
   18538:	ldr	r8, [sp, #16]
   1853c:	add	sp, sp, #20
   18540:	pop	{pc}		; (ldr pc, [sp], #4)
   18544:	mov	r2, #2
   18548:	b	184d0 <__assert_fail@plt+0x72a4>
   1854c:	mov	r2, #1
   18550:	b	184d0 <__assert_fail@plt+0x72a4>
   18554:	cmp	r2, r1
   18558:	strd	r4, [sp, #-20]!	; 0xffffffec
   1855c:	mov	r4, r1
   18560:	mov	r5, r0
   18564:	strd	r6, [sp, #8]
   18568:	mov	r6, r2
   1856c:	lsr	r7, r1, #1
   18570:	str	lr, [sp, #16]
   18574:	sub	sp, sp, #20
   18578:	bhi	18628 <__assert_fail@plt+0x73fc>
   1857c:	mov	r1, #1
   18580:	bl	13ad8 <__assert_fail@plt+0x28ac>
   18584:	cmp	r7, r6
   18588:	subcc	r6, r4, r6
   1858c:	ldr	ip, [pc, #204]	; 18660 <__assert_fail@plt+0x7434>
   18590:	mov	r3, #0
   18594:	add	r7, sp, #4
   18598:	mov	r0, r7
   1859c:	mov	r2, #1
   185a0:	mov	r1, r6
   185a4:	str	r3, [sp, #4]
   185a8:	str	r3, [sp, #8]
   185ac:	str	ip, [sp, #12]
   185b0:	bl	184d0 <__assert_fail@plt+0x72a4>
   185b4:	cmp	r6, #0
   185b8:	beq	185e0 <__assert_fail@plt+0x73b4>
   185bc:	sub	r6, r4, r6
   185c0:	sub	r3, r4, #1
   185c4:	mov	r2, r4
   185c8:	mov	r1, r5
   185cc:	mov	r4, r3
   185d0:	mov	r0, r5
   185d4:	bl	17304 <__assert_fail@plt+0x60d8>
   185d8:	cmp	r4, r6
   185dc:	bne	185c0 <__assert_fail@plt+0x7394>
   185e0:	mov	r1, r5
   185e4:	mov	r2, r7
   185e8:	mov	r0, r5
   185ec:	bl	179c4 <__assert_fail@plt+0x6798>
   185f0:	ldr	r1, [sp, #4]
   185f4:	cmp	r1, #0
   185f8:	beq	18614 <__assert_fail@plt+0x73e8>
   185fc:	movw	r3, #292	; 0x124
   18600:	movt	r3, #4
   18604:	lsl	r1, r1, #2
   18608:	ldr	r3, [r3, #8]
   1860c:	ldr	r0, [sp, #12]
   18610:	blx	r3
   18614:	add	sp, sp, #20
   18618:	ldrd	r4, [sp]
   1861c:	ldrd	r6, [sp, #8]
   18620:	add	sp, sp, #16
   18624:	pop	{pc}		; (ldr pc, [sp], #4)
   18628:	mov	r3, #0
   1862c:	cmp	r7, r2
   18630:	str	r3, [r0, #4]
   18634:	bcs	1858c <__assert_fail@plt+0x7360>
   18638:	ldr	ip, [pc, #32]	; 18660 <__assert_fail@plt+0x7434>
   1863c:	add	r7, sp, #4
   18640:	mov	r1, r3
   18644:	mov	r0, r7
   18648:	mov	r2, #1
   1864c:	str	r3, [sp, #4]
   18650:	str	r3, [sp, #8]
   18654:	str	ip, [sp, #12]
   18658:	bl	184d0 <__assert_fail@plt+0x72a4>
   1865c:	b	185e0 <__assert_fail@plt+0x73b4>
   18660:	andeq	lr, r2, ip, asr #13
   18664:	ldr	ip, [r0, #4]
   18668:	str	r4, [sp, #-8]!
   1866c:	str	lr, [sp, #4]
   18670:	lsr	lr, r1, #5
   18674:	eor	r2, ip, ip, asr #31
   18678:	sub	r2, r2, ip, asr #31
   1867c:	cmp	r2, lr
   18680:	lsrle	r0, ip, #31
   18684:	ble	186a8 <__assert_fail@plt+0x747c>
   18688:	ldr	r2, [r0, #8]
   1868c:	and	r1, r1, #31
   18690:	cmp	ip, #0
   18694:	ldr	r4, [r2, lr, lsl #2]
   18698:	add	r2, r2, lr, lsl #2
   1869c:	lsr	ip, r4, r1
   186a0:	and	r0, ip, #1
   186a4:	blt	186b4 <__assert_fail@plt+0x7488>
   186a8:	ldr	r4, [sp]
   186ac:	add	sp, sp, #4
   186b0:	pop	{pc}		; (ldr pc, [sp], #4)
   186b4:	cmp	r1, #0
   186b8:	mov	r3, lr
   186bc:	beq	186ec <__assert_fail@plt+0x74c0>
   186c0:	rsb	r1, r1, #32
   186c4:	lsls	r1, r4, r1
   186c8:	beq	186ec <__assert_fail@plt+0x74c0>
   186cc:	mvn	ip, ip
   186d0:	ldr	r4, [sp]
   186d4:	add	sp, sp, #4
   186d8:	and	r0, ip, #1
   186dc:	pop	{pc}		; (ldr pc, [sp], #4)
   186e0:	ldr	r1, [r2, #-4]!
   186e4:	cmp	r1, #0
   186e8:	bne	186cc <__assert_fail@plt+0x74a0>
   186ec:	subs	r3, r3, #1
   186f0:	bcs	186e0 <__assert_fail@plt+0x74b4>
   186f4:	ldr	r4, [sp]
   186f8:	add	sp, sp, #4
   186fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18700:	strd	r4, [sp, #-16]!
   18704:	mov	r4, r0
   18708:	mov	r5, r1
   1870c:	str	r6, [sp, #8]
   18710:	str	lr, [sp, #12]
   18714:	bl	18664 <__assert_fail@plt+0x7438>
   18718:	cmp	r0, #0
   1871c:	bne	18768 <__assert_fail@plt+0x753c>
   18720:	ldr	r3, [r4, #4]
   18724:	cmp	r3, #0
   18728:	blt	18748 <__assert_fail@plt+0x751c>
   1872c:	mov	r1, r5
   18730:	mov	r0, r4
   18734:	ldrd	r4, [sp]
   18738:	ldr	r6, [sp, #8]
   1873c:	ldr	lr, [sp, #12]
   18740:	add	sp, sp, #16
   18744:	b	1389c <__assert_fail@plt+0x2670>
   18748:	mov	r2, r5
   1874c:	add	r0, r4, #4
   18750:	ldr	r1, [r4, #8]
   18754:	ldrd	r4, [sp]
   18758:	ldr	r6, [sp, #8]
   1875c:	ldr	lr, [sp, #12]
   18760:	add	sp, sp, #16
   18764:	b	139e4 <__assert_fail@plt+0x27b8>
   18768:	ldrd	r4, [sp]
   1876c:	ldr	r6, [sp, #8]
   18770:	add	sp, sp, #12
   18774:	pop	{pc}		; (ldr pc, [sp], #4)
   18778:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1877c:	ldr	r4, [r3, #4]
   18780:	strd	r6, [sp, #8]
   18784:	mov	r7, r0
   18788:	strd	r8, [sp, #16]
   1878c:	mov	r9, r1
   18790:	mov	r8, r2
   18794:	strd	sl, [sp, #24]
   18798:	mov	fp, r3
   1879c:	str	lr, [sp, #32]
   187a0:	sub	sp, sp, #92	; 0x5c
   187a4:	ldr	r3, [sp, #128]	; 0x80
   187a8:	cmp	r4, #0
   187ac:	ldr	r5, [r3, #4]
   187b0:	beq	18dd0 <__assert_fail@plt+0x7ba4>
   187b4:	cmp	r5, #0
   187b8:	beq	18d84 <__assert_fail@plt+0x7b58>
   187bc:	ldr	r2, [pc, #1700]	; 18e68 <__assert_fail@plt+0x7c3c>
   187c0:	mov	r3, #0
   187c4:	mov	r1, fp
   187c8:	add	r0, sp, #16
   187cc:	str	r3, [sp, #16]
   187d0:	str	r3, [sp, #20]
   187d4:	strd	r2, [sp, #24]
   187d8:	str	r3, [sp, #32]
   187dc:	strd	r2, [sp, #36]	; 0x24
   187e0:	str	r3, [sp, #44]	; 0x2c
   187e4:	strd	r2, [sp, #48]	; 0x30
   187e8:	str	r3, [sp, #56]	; 0x38
   187ec:	strd	r2, [sp, #60]	; 0x3c
   187f0:	str	r3, [sp, #68]	; 0x44
   187f4:	strd	r2, [sp, #72]	; 0x48
   187f8:	str	r3, [sp, #80]	; 0x50
   187fc:	str	r2, [sp, #84]	; 0x54
   18800:	bl	15dbc <__assert_fail@plt+0x4b90>
   18804:	ldr	r3, [sp, #20]
   18808:	add	r0, sp, #16
   1880c:	cmp	r3, #0
   18810:	rsblt	r3, r3, #0
   18814:	str	r3, [sp, #20]
   18818:	bl	16ab8 <__assert_fail@plt+0x588c>
   1881c:	mov	sl, r0
   18820:	add	r0, sp, #28
   18824:	ldr	r1, [sp, #128]	; 0x80
   18828:	bl	15dbc <__assert_fail@plt+0x4b90>
   1882c:	ldr	r3, [sp, #32]
   18830:	add	r0, sp, #28
   18834:	cmp	r3, #0
   18838:	rsblt	r3, r3, #0
   1883c:	str	r3, [sp, #32]
   18840:	bl	16ab8 <__assert_fail@plt+0x588c>
   18844:	ldr	r3, [sp, #20]
   18848:	cmp	sl, r0
   1884c:	movcc	r1, sl
   18850:	movcs	r1, r0
   18854:	ldr	r2, [sp, #32]
   18858:	sub	sl, sl, r1
   1885c:	sub	r6, r0, r1
   18860:	str	r1, [sp, #12]
   18864:	cmp	r3, r2
   18868:	bge	188b8 <__assert_fail@plt+0x768c>
   1886c:	mov	ip, fp
   18870:	str	r2, [sp, #20]
   18874:	mov	lr, sl
   18878:	str	r3, [sp, #32]
   1887c:	mov	r0, r9
   18880:	mov	sl, r6
   18884:	ldr	r1, [sp, #16]
   18888:	mov	r9, r8
   1888c:	mov	r6, lr
   18890:	mov	r8, r0
   18894:	ldr	r2, [sp, #24]
   18898:	ldr	r3, [sp, #36]	; 0x24
   1889c:	ldr	fp, [sp, #128]	; 0x80
   188a0:	str	ip, [sp, #128]	; 0x80
   188a4:	ldr	ip, [sp, #28]
   188a8:	str	r2, [sp, #36]	; 0x24
   188ac:	str	ip, [sp, #16]
   188b0:	str	r3, [sp, #24]
   188b4:	str	r1, [sp, #28]
   188b8:	mov	r1, #2
   188bc:	add	r2, sp, #16
   188c0:	add	r3, sp, #28
   188c4:	add	r0, sp, #76	; 0x4c
   188c8:	str	r1, [sp]
   188cc:	mov	r1, r2
   188d0:	bl	16bb0 <__assert_fail@plt+0x5984>
   188d4:	add	r1, sp, #76	; 0x4c
   188d8:	mov	r2, sl
   188dc:	mov	r0, r1
   188e0:	bl	173d8 <__assert_fail@plt+0x61ac>
   188e4:	mov	r1, r6
   188e8:	add	r0, sp, #52	; 0x34
   188ec:	bl	18700 <__assert_fail@plt+0x74d4>
   188f0:	ldr	r3, [sp, #20]
   188f4:	add	r6, sl, r6
   188f8:	cmp	r3, #0
   188fc:	ble	189fc <__assert_fail@plt+0x77d0>
   18900:	add	r0, sp, #16
   18904:	add	r5, sp, #64	; 0x40
   18908:	bl	16ab8 <__assert_fail@plt+0x588c>
   1890c:	add	r1, sl, r0
   18910:	add	r6, r6, r0
   18914:	mov	r0, r5
   18918:	add	r4, sp, #40	; 0x28
   1891c:	bl	18700 <__assert_fail@plt+0x74d4>
   18920:	b	18984 <__assert_fail@plt+0x7758>
   18924:	add	r1, sp, #16
   18928:	add	r2, sp, #28
   1892c:	mov	r0, r1
   18930:	bl	16b50 <__assert_fail@plt+0x5924>
   18934:	add	r2, sp, #76	; 0x4c
   18938:	mov	r1, r5
   1893c:	mov	r0, r2
   18940:	bl	16778 <__assert_fail@plt+0x554c>
   18944:	add	r2, sp, #52	; 0x34
   18948:	mov	r1, r4
   1894c:	mov	r0, r2
   18950:	bl	16778 <__assert_fail@plt+0x554c>
   18954:	add	r0, sp, #16
   18958:	bl	16ab8 <__assert_fail@plt+0x588c>
   1895c:	mov	r2, r0
   18960:	mov	sl, r0
   18964:	mov	r1, r5
   18968:	mov	r0, r5
   1896c:	bl	173d8 <__assert_fail@plt+0x61ac>
   18970:	mov	r2, sl
   18974:	mov	r1, r4
   18978:	mov	r0, r4
   1897c:	bl	173d8 <__assert_fail@plt+0x61ac>
   18980:	add	r6, r6, sl
   18984:	add	r1, sp, #28
   18988:	add	r0, sp, #16
   1898c:	bl	16588 <__assert_fail@plt+0x535c>
   18990:	cmp	r0, #0
   18994:	beq	18a10 <__assert_fail@plt+0x77e4>
   18998:	bge	18924 <__assert_fail@plt+0x76f8>
   1899c:	add	r1, sp, #28
   189a0:	add	r2, sp, #16
   189a4:	mov	r0, r1
   189a8:	bl	16b50 <__assert_fail@plt+0x5924>
   189ac:	add	r2, sp, #76	; 0x4c
   189b0:	mov	r1, r5
   189b4:	mov	r0, r5
   189b8:	bl	16778 <__assert_fail@plt+0x554c>
   189bc:	add	r2, sp, #52	; 0x34
   189c0:	mov	r1, r4
   189c4:	mov	r0, r4
   189c8:	bl	16778 <__assert_fail@plt+0x554c>
   189cc:	add	r0, sp, #28
   189d0:	bl	16ab8 <__assert_fail@plt+0x588c>
   189d4:	add	r1, sp, #76	; 0x4c
   189d8:	mov	sl, r0
   189dc:	mov	r2, r0
   189e0:	mov	r0, r1
   189e4:	bl	173d8 <__assert_fail@plt+0x61ac>
   189e8:	add	r1, sp, #52	; 0x34
   189ec:	mov	r2, sl
   189f0:	mov	r0, r1
   189f4:	bl	173d8 <__assert_fail@plt+0x61ac>
   189f8:	b	18980 <__assert_fail@plt+0x7754>
   189fc:	add	r5, sp, #64	; 0x40
   18a00:	mov	r1, sl
   18a04:	mov	r0, r5
   18a08:	add	r4, sp, #40	; 0x28
   18a0c:	bl	18700 <__assert_fail@plt+0x74d4>
   18a10:	add	r1, sp, #28
   18a14:	ldr	r2, [sp, #12]
   18a18:	sub	sl, r6, #1
   18a1c:	mov	r0, r1
   18a20:	bl	173d8 <__assert_fail@plt+0x61ac>
   18a24:	mov	r1, r4
   18a28:	mov	r0, r4
   18a2c:	bl	15dbc <__assert_fail@plt+0x4b90>
   18a30:	ldr	r3, [sp, #44]	; 0x2c
   18a34:	add	r2, sp, #28
   18a38:	add	r0, sp, #52	; 0x34
   18a3c:	ldr	r1, [sp, #128]	; 0x80
   18a40:	rsb	r3, r3, #0
   18a44:	str	r3, [sp, #44]	; 0x2c
   18a48:	bl	179c4 <__assert_fail@plt+0x6798>
   18a4c:	add	r1, sp, #52	; 0x34
   18a50:	mov	r0, r1
   18a54:	bl	15dbc <__assert_fail@plt+0x4b90>
   18a58:	ldr	r3, [sp, #56]	; 0x38
   18a5c:	add	r2, sp, #28
   18a60:	mov	r1, fp
   18a64:	add	r0, sp, #76	; 0x4c
   18a68:	cmp	r3, #0
   18a6c:	rsblt	r3, r3, #0
   18a70:	str	r3, [sp, #56]	; 0x38
   18a74:	bl	179c4 <__assert_fail@plt+0x6798>
   18a78:	add	r1, sp, #76	; 0x4c
   18a7c:	mov	r0, r1
   18a80:	bl	15dbc <__assert_fail@plt+0x4b90>
   18a84:	ldr	r3, [sp, #80]	; 0x50
   18a88:	cmp	r3, #0
   18a8c:	rsblt	r3, r3, #0
   18a90:	cmp	r6, #0
   18a94:	str	r3, [sp, #80]	; 0x50
   18a98:	beq	18b70 <__assert_fail@plt+0x7944>
   18a9c:	mov	r6, #2
   18aa0:	ldr	r1, [sp, #44]	; 0x2c
   18aa4:	ldr	r3, [sp, #48]	; 0x30
   18aa8:	ldr	r3, [r3]
   18aac:	cmp	r1, #0
   18ab0:	moveq	r3, #0
   18ab4:	andne	r3, r3, #1
   18ab8:	cmp	r3, #0
   18abc:	bne	18adc <__assert_fail@plt+0x78b0>
   18ac0:	ldrd	r2, [sp, #68]	; 0x44
   18ac4:	ldr	r3, [r3]
   18ac8:	cmp	r2, #0
   18acc:	moveq	r3, #0
   18ad0:	andne	r3, r3, #1
   18ad4:	cmp	r3, #0
   18ad8:	beq	18b38 <__assert_fail@plt+0x790c>
   18adc:	add	r2, sp, #52	; 0x34
   18ae0:	mov	r1, r4
   18ae4:	mov	r0, r4
   18ae8:	bl	16b50 <__assert_fail@plt+0x5924>
   18aec:	add	r2, sp, #76	; 0x4c
   18af0:	mov	r1, r5
   18af4:	mov	r0, r5
   18af8:	bl	16778 <__assert_fail@plt+0x554c>
   18afc:	ldrd	r2, [sp, #68]	; 0x44
   18b00:	ldr	r3, [r3]
   18b04:	cmp	r2, #0
   18b08:	moveq	r3, #0
   18b0c:	andne	r3, r3, #1
   18b10:	cmp	r3, #0
   18b14:	bne	18e4c <__assert_fail@plt+0x7c20>
   18b18:	ldr	r1, [sp, #44]	; 0x2c
   18b1c:	ldr	r3, [sp, #48]	; 0x30
   18b20:	ldr	r3, [r3]
   18b24:	cmp	r1, #0
   18b28:	moveq	r3, #0
   18b2c:	andne	r3, r3, #1
   18b30:	cmp	r3, #0
   18b34:	bne	18e4c <__assert_fail@plt+0x7c20>
   18b38:	mov	r3, #1
   18b3c:	add	r2, sp, #48	; 0x30
   18b40:	str	r6, [sp]
   18b44:	mov	r0, r4
   18b48:	sub	sl, sl, #1
   18b4c:	bl	168f0 <__assert_fail@plt+0x56c4>
   18b50:	mov	r3, #1
   18b54:	add	r2, sp, #72	; 0x48
   18b58:	str	r6, [sp]
   18b5c:	mov	r0, r5
   18b60:	ldr	r1, [sp, #68]	; 0x44
   18b64:	bl	168f0 <__assert_fail@plt+0x56c4>
   18b68:	cmn	sl, #1
   18b6c:	bne	18aa0 <__assert_fail@plt+0x7874>
   18b70:	add	r2, sp, #52	; 0x34
   18b74:	mov	r1, r4
   18b78:	mov	r0, r2
   18b7c:	bl	16778 <__assert_fail@plt+0x554c>
   18b80:	add	r1, sp, #52	; 0x34
   18b84:	mov	r0, r4
   18b88:	bl	16670 <__assert_fail@plt+0x5444>
   18b8c:	cmp	r0, #0
   18b90:	ble	18bd4 <__assert_fail@plt+0x79a8>
   18b94:	ldr	r3, [sp, #40]	; 0x28
   18b98:	add	r2, sp, #76	; 0x4c
   18b9c:	mov	r1, r5
   18ba0:	mov	r0, r5
   18ba4:	ldr	lr, [sp, #44]	; 0x2c
   18ba8:	ldr	ip, [sp, #56]	; 0x38
   18bac:	str	ip, [sp, #44]	; 0x2c
   18bb0:	str	lr, [sp, #56]	; 0x38
   18bb4:	ldr	lr, [sp, #48]	; 0x30
   18bb8:	ldr	ip, [sp, #52]	; 0x34
   18bbc:	str	r3, [sp, #52]	; 0x34
   18bc0:	ldr	r3, [sp, #60]	; 0x3c
   18bc4:	str	ip, [sp, #40]	; 0x28
   18bc8:	str	r3, [sp, #48]	; 0x30
   18bcc:	str	lr, [sp, #60]	; 0x3c
   18bd0:	bl	16b50 <__assert_fail@plt+0x5924>
   18bd4:	ldr	r3, [fp, #4]
   18bd8:	cmp	r3, #0
   18bdc:	blt	18e30 <__assert_fail@plt+0x7c04>
   18be0:	ldr	r3, [sp, #128]	; 0x80
   18be4:	ldr	r3, [r3, #4]
   18be8:	cmp	r3, #0
   18bec:	blt	18e14 <__assert_fail@plt+0x7be8>
   18bf0:	ldr	r2, [r7, #4]
   18bf4:	cmp	r9, #0
   18bf8:	ldr	r0, [sp, #28]
   18bfc:	ldr	r3, [sp, #32]
   18c00:	str	r2, [sp, #32]
   18c04:	ldr	r2, [r7, #8]
   18c08:	ldr	r1, [sp, #36]	; 0x24
   18c0c:	str	r3, [r7, #4]
   18c10:	ldr	r3, [r7]
   18c14:	str	r0, [r7]
   18c18:	str	r1, [r7, #8]
   18c1c:	str	r3, [sp, #28]
   18c20:	str	r2, [sp, #36]	; 0x24
   18c24:	beq	18c58 <__assert_fail@plt+0x7a2c>
   18c28:	ldr	r1, [r9, #4]
   18c2c:	ldr	r2, [sp, #40]	; 0x28
   18c30:	ldr	r0, [sp, #44]	; 0x2c
   18c34:	str	r1, [sp, #44]	; 0x2c
   18c38:	ldr	r1, [r9]
   18c3c:	str	r2, [r9]
   18c40:	ldr	r2, [r9, #8]
   18c44:	str	r0, [r9, #4]
   18c48:	ldr	r0, [sp, #48]	; 0x30
   18c4c:	str	r1, [sp, #40]	; 0x28
   18c50:	str	r2, [sp, #48]	; 0x30
   18c54:	str	r0, [r9, #8]
   18c58:	cmp	r8, #0
   18c5c:	beq	18c90 <__assert_fail@plt+0x7a64>
   18c60:	ldr	r2, [r8, #4]
   18c64:	ldr	ip, [sp, #64]	; 0x40
   18c68:	ldr	r1, [sp, #68]	; 0x44
   18c6c:	str	r2, [sp, #68]	; 0x44
   18c70:	ldr	r2, [r8, #8]
   18c74:	ldr	r0, [sp, #72]	; 0x48
   18c78:	str	r1, [r8, #4]
   18c7c:	ldr	r1, [r8]
   18c80:	str	ip, [r8]
   18c84:	str	r0, [r8, #8]
   18c88:	str	r1, [sp, #64]	; 0x40
   18c8c:	str	r2, [sp, #72]	; 0x48
   18c90:	ldr	r1, [sp, #16]
   18c94:	cmp	r1, #0
   18c98:	beq	18cb8 <__assert_fail@plt+0x7a8c>
   18c9c:	movw	r3, #292	; 0x124
   18ca0:	movt	r3, #4
   18ca4:	lsl	r1, r1, #2
   18ca8:	ldr	r3, [r3, #8]
   18cac:	ldr	r0, [sp, #24]
   18cb0:	blx	r3
   18cb4:	ldr	r3, [sp, #28]
   18cb8:	cmp	r3, #0
   18cbc:	beq	18cd8 <__assert_fail@plt+0x7aac>
   18cc0:	movw	r2, #292	; 0x124
   18cc4:	movt	r2, #4
   18cc8:	lsl	r1, r3, #2
   18ccc:	ldr	r3, [r2, #8]
   18cd0:	ldr	r0, [sp, #36]	; 0x24
   18cd4:	blx	r3
   18cd8:	ldr	r1, [sp, #40]	; 0x28
   18cdc:	cmp	r1, #0
   18ce0:	beq	18cfc <__assert_fail@plt+0x7ad0>
   18ce4:	movw	r3, #292	; 0x124
   18ce8:	movt	r3, #4
   18cec:	lsl	r1, r1, #2
   18cf0:	ldr	r3, [r3, #8]
   18cf4:	ldr	r0, [sp, #48]	; 0x30
   18cf8:	blx	r3
   18cfc:	ldr	r1, [sp, #52]	; 0x34
   18d00:	cmp	r1, #0
   18d04:	beq	18d20 <__assert_fail@plt+0x7af4>
   18d08:	movw	r3, #292	; 0x124
   18d0c:	movt	r3, #4
   18d10:	lsl	r1, r1, #2
   18d14:	ldr	r3, [r3, #8]
   18d18:	ldr	r0, [sp, #60]	; 0x3c
   18d1c:	blx	r3
   18d20:	ldr	r1, [sp, #64]	; 0x40
   18d24:	cmp	r1, #0
   18d28:	beq	18d44 <__assert_fail@plt+0x7b18>
   18d2c:	movw	r3, #292	; 0x124
   18d30:	movt	r3, #4
   18d34:	lsl	r1, r1, #2
   18d38:	ldr	r3, [r3, #8]
   18d3c:	ldr	r0, [sp, #72]	; 0x48
   18d40:	blx	r3
   18d44:	ldr	r1, [sp, #76]	; 0x4c
   18d48:	cmp	r1, #0
   18d4c:	beq	18d68 <__assert_fail@plt+0x7b3c>
   18d50:	movw	r3, #292	; 0x124
   18d54:	movt	r3, #4
   18d58:	lsl	r1, r1, #2
   18d5c:	ldr	r3, [r3, #8]
   18d60:	ldr	r0, [sp, #84]	; 0x54
   18d64:	blx	r3
   18d68:	add	sp, sp, #92	; 0x5c
   18d6c:	ldrd	r4, [sp]
   18d70:	ldrd	r6, [sp, #8]
   18d74:	ldrd	r8, [sp, #16]
   18d78:	ldrd	sl, [sp, #24]
   18d7c:	add	sp, sp, #32
   18d80:	pop	{pc}		; (ldr pc, [sp], #4)
   18d84:	mov	r1, fp
   18d88:	bl	15dbc <__assert_fail@plt+0x4b90>
   18d8c:	ldr	r3, [r7, #4]
   18d90:	cmp	r3, #0
   18d94:	rsblt	r3, r3, #0
   18d98:	cmp	r9, #0
   18d9c:	str	r3, [r7, #4]
   18da0:	beq	18dbc <__assert_fail@plt+0x7b90>
   18da4:	lsr	r1, r4, #31
   18da8:	mov	r0, r9
   18dac:	cmp	r4, #0
   18db0:	rsble	r1, r1, #0
   18db4:	rsbgt	r1, r1, #1
   18db8:	bl	15d4c <__assert_fail@plt+0x4b20>
   18dbc:	cmp	r8, #0
   18dc0:	beq	18d68 <__assert_fail@plt+0x7b3c>
   18dc4:	mov	r3, #0
   18dc8:	str	r3, [r8, #4]
   18dcc:	b	18d68 <__assert_fail@plt+0x7b3c>
   18dd0:	mov	r1, r3
   18dd4:	bl	15dbc <__assert_fail@plt+0x4b90>
   18dd8:	ldr	r3, [r7, #4]
   18ddc:	cmp	r3, #0
   18de0:	rsblt	r3, r3, #0
   18de4:	cmp	r9, #0
   18de8:	str	r3, [r7, #4]
   18dec:	strne	r4, [r9, #4]
   18df0:	cmp	r8, #0
   18df4:	beq	18d68 <__assert_fail@plt+0x7b3c>
   18df8:	lsr	r1, r5, #31
   18dfc:	mov	r0, r8
   18e00:	cmp	r5, #0
   18e04:	rsble	r1, r1, #0
   18e08:	rsbgt	r1, r1, #1
   18e0c:	bl	15d4c <__assert_fail@plt+0x4b20>
   18e10:	b	18d68 <__assert_fail@plt+0x7b3c>
   18e14:	mov	r1, r5
   18e18:	mov	r0, r5
   18e1c:	bl	15dbc <__assert_fail@plt+0x4b90>
   18e20:	ldr	r3, [sp, #68]	; 0x44
   18e24:	rsb	r3, r3, #0
   18e28:	str	r3, [sp, #68]	; 0x44
   18e2c:	b	18bf0 <__assert_fail@plt+0x79c4>
   18e30:	mov	r1, r4
   18e34:	mov	r0, r4
   18e38:	bl	15dbc <__assert_fail@plt+0x4b90>
   18e3c:	ldr	r3, [sp, #44]	; 0x2c
   18e40:	rsb	r3, r3, #0
   18e44:	str	r3, [sp, #44]	; 0x2c
   18e48:	b	18be0 <__assert_fail@plt+0x79b4>
   18e4c:	movw	r1, #59468	; 0xe84c
   18e50:	movt	r1, #2
   18e54:	ldr	r3, [pc, #16]	; 18e6c <__assert_fail@plt+0x7c40>
   18e58:	movw	r0, #60148	; 0xeaf4
   18e5c:	movt	r0, #2
   18e60:	movw	r2, #2950	; 0xb86
   18e64:	bl	1122c <__assert_fail@plt>
   18e68:	andeq	lr, r2, ip, asr #13
   18e6c:	andeq	lr, r2, ip, lsr #14
   18e70:	strd	r4, [sp, #-20]!	; 0xffffffec
   18e74:	ldr	r4, [r1, #4]
   18e78:	strd	r6, [sp, #8]
   18e7c:	str	lr, [sp, #16]
   18e80:	sub	sp, sp, #36	; 0x24
   18e84:	cmp	r4, #0
   18e88:	beq	18f38 <__assert_fail@plt+0x7d0c>
   18e8c:	ldr	r4, [r2, #4]
   18e90:	eor	r3, r4, r4, asr #31
   18e94:	sub	r3, r3, r4, asr #31
   18e98:	cmp	r3, #1
   18e9c:	ble	18f50 <__assert_fail@plt+0x7d24>
   18ea0:	ldr	ip, [pc, #360]	; 19010 <__assert_fail@plt+0x7de4>
   18ea4:	mov	r7, r2
   18ea8:	mov	r5, #0
   18eac:	mov	r3, r1
   18eb0:	mov	r6, r0
   18eb4:	mov	r2, r5
   18eb8:	add	r1, sp, #20
   18ebc:	str	r7, [sp]
   18ec0:	add	r0, sp, #8
   18ec4:	str	r5, [sp, #8]
   18ec8:	str	r5, [sp, #12]
   18ecc:	str	ip, [sp, #16]
   18ed0:	str	r5, [sp, #20]
   18ed4:	str	r5, [sp, #24]
   18ed8:	str	ip, [sp, #28]
   18edc:	bl	18778 <__assert_fail@plt+0x754c>
   18ee0:	ldr	r4, [sp, #12]
   18ee4:	cmp	r4, #1
   18ee8:	ble	18f84 <__assert_fail@plt+0x7d58>
   18eec:	mov	r4, r5
   18ef0:	ldr	r1, [sp, #8]
   18ef4:	cmp	r1, #0
   18ef8:	beq	18f14 <__assert_fail@plt+0x7ce8>
   18efc:	movw	r3, #292	; 0x124
   18f00:	movt	r3, #4
   18f04:	lsl	r1, r1, #2
   18f08:	ldr	r3, [r3, #8]
   18f0c:	ldr	r0, [sp, #16]
   18f10:	blx	r3
   18f14:	ldr	r1, [sp, #20]
   18f18:	cmp	r1, #0
   18f1c:	beq	18f38 <__assert_fail@plt+0x7d0c>
   18f20:	movw	r3, #292	; 0x124
   18f24:	movt	r3, #4
   18f28:	lsl	r1, r1, #2
   18f2c:	ldr	r3, [r3, #8]
   18f30:	ldr	r0, [sp, #28]
   18f34:	blx	r3
   18f38:	mov	r0, r4
   18f3c:	add	sp, sp, #36	; 0x24
   18f40:	ldrd	r4, [sp]
   18f44:	ldrd	r6, [sp, #8]
   18f48:	add	sp, sp, #16
   18f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f50:	cmp	r4, #0
   18f54:	beq	18f38 <__assert_fail@plt+0x7d0c>
   18f58:	ldr	r3, [r2, #8]
   18f5c:	ldr	ip, [r3]
   18f60:	clz	r3, ip
   18f64:	lsr	r3, r3, #5
   18f68:	cmp	ip, #1
   18f6c:	rsbls	r3, r3, #0
   18f70:	rsbhi	r3, r3, #1
   18f74:	cmp	r3, #1
   18f78:	beq	18ea0 <__assert_fail@plt+0x7c74>
   18f7c:	mov	r4, #0
   18f80:	b	18f38 <__assert_fail@plt+0x7d0c>
   18f84:	bne	18eec <__assert_fail@plt+0x7cc0>
   18f88:	ldr	r3, [sp, #16]
   18f8c:	ldr	r3, [r3]
   18f90:	clz	r2, r3
   18f94:	cmp	r3, #1
   18f98:	lsr	r2, r2, #5
   18f9c:	movls	r3, #0
   18fa0:	movhi	r3, #1
   18fa4:	cmp	r3, r2
   18fa8:	bne	18eec <__assert_fail@plt+0x7cc0>
   18fac:	ldr	r3, [sp, #24]
   18fb0:	cmp	r3, r5
   18fb4:	blt	18fe0 <__assert_fail@plt+0x7db4>
   18fb8:	ldr	r0, [sp, #20]
   18fbc:	ldm	r6, {r2, ip}
   18fc0:	ldr	r1, [sp, #28]
   18fc4:	stm	r6, {r0, r3}
   18fc8:	ldr	r3, [r6, #8]
   18fcc:	str	r2, [sp, #20]
   18fd0:	str	ip, [sp, #24]
   18fd4:	str	r1, [r6, #8]
   18fd8:	str	r3, [sp, #28]
   18fdc:	b	18ef0 <__assert_fail@plt+0x7cc4>
   18fe0:	ldr	r3, [r7, #4]
   18fe4:	add	r1, sp, #20
   18fe8:	mov	r2, r7
   18fec:	mov	r0, r1
   18ff0:	cmp	r3, r5
   18ff4:	blt	19004 <__assert_fail@plt+0x7dd8>
   18ff8:	bl	16778 <__assert_fail@plt+0x554c>
   18ffc:	ldr	r3, [sp, #24]
   19000:	b	18fb8 <__assert_fail@plt+0x7d8c>
   19004:	bl	16b50 <__assert_fail@plt+0x5924>
   19008:	ldr	r3, [sp, #24]
   1900c:	b	18fb8 <__assert_fail@plt+0x7d8c>
   19010:	andeq	lr, r2, ip, asr #13
   19014:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19018:	mov	r5, r3
   1901c:	ldr	r4, [r2, #4]
   19020:	strd	r6, [sp, #8]
   19024:	ldr	r6, [r3, #4]
   19028:	strd	r8, [sp, #16]
   1902c:	strd	sl, [sp, #24]
   19030:	str	lr, [sp, #32]
   19034:	sub	sp, sp, #76	; 0x4c
   19038:	cmp	r6, #0
   1903c:	str	r2, [sp, #12]
   19040:	str	r0, [sp, #16]
   19044:	beq	19450 <__assert_fail@plt+0x8224>
   19048:	cmp	r4, #0
   1904c:	beq	19184 <__assert_fail@plt+0x7f58>
   19050:	ldr	sl, [r3, #8]
   19054:	cmp	r6, #0
   19058:	add	fp, sp, #56	; 0x38
   1905c:	rsblt	r6, r6, #0
   19060:	mov	r7, r1
   19064:	mov	r2, r6
   19068:	mov	r0, fp
   1906c:	mov	r1, sl
   19070:	bl	15980 <__assert_fail@plt+0x4754>
   19074:	ldr	r8, [sp, #56]	; 0x38
   19078:	cmp	r8, #0
   1907c:	str	r8, [sp, #24]
   19080:	bne	1912c <__assert_fail@plt+0x7f00>
   19084:	ldr	r3, [sp, #24]
   19088:	str	r3, [sp, #20]
   1908c:	ldr	r3, [sp, #12]
   19090:	add	r8, sp, #44	; 0x2c
   19094:	ldr	r9, [pc, #960]	; 1945c <__assert_fail@plt+0x8230>
   19098:	ldr	r2, [r3, #4]
   1909c:	mov	r3, #0
   190a0:	str	r3, [sp, #44]	; 0x2c
   190a4:	str	r3, [sp, #48]	; 0x30
   190a8:	str	r9, [sp, #52]	; 0x34
   190ac:	cmp	r2, r3
   190b0:	blt	191a8 <__assert_fail@plt+0x7f7c>
   190b4:	mov	r1, r7
   190b8:	mov	r0, r8
   190bc:	bl	15dbc <__assert_fail@plt+0x4b90>
   190c0:	ldr	r2, [sp, #48]	; 0x30
   190c4:	mov	r3, #0
   190c8:	eor	r5, r2, r2, asr #31
   190cc:	sub	r5, r5, r2, asr #31
   190d0:	cmp	r6, r5
   190d4:	str	r5, [sp, #48]	; 0x30
   190d8:	ble	193b4 <__assert_fail@plt+0x8188>
   190dc:	ldr	r3, [r7, #4]
   190e0:	cmp	r3, #0
   190e4:	blt	193dc <__assert_fail@plt+0x81b0>
   190e8:	cmp	r2, #0
   190ec:	ldr	r3, [sp, #52]	; 0x34
   190f0:	moveq	r5, r2
   190f4:	beq	19124 <__assert_fail@plt+0x7ef8>
   190f8:	sub	r2, r5, #-1073741823	; 0xc0000001
   190fc:	ldr	r1, [r3, r2, lsl #2]
   19100:	add	r3, r3, r2, lsl #2
   19104:	cmp	r1, #0
   19108:	beq	1911c <__assert_fail@plt+0x7ef0>
   1910c:	b	19124 <__assert_fail@plt+0x7ef8>
   19110:	ldr	r2, [r3, #-4]!
   19114:	cmp	r2, #0
   19118:	bne	19124 <__assert_fail@plt+0x7ef8>
   1911c:	subs	r5, r5, #1
   19120:	bne	19110 <__assert_fail@plt+0x7ee4>
   19124:	str	r5, [sp, #48]	; 0x30
   19128:	b	191c0 <__assert_fail@plt+0x7f94>
   1912c:	mov	r2, #0
   19130:	movw	r3, #292	; 0x124
   19134:	movt	r3, #4
   19138:	lsl	r0, r6, #2
   1913c:	str	r2, [sp, #56]	; 0x38
   19140:	ldr	r3, [r3, #4]
   19144:	blx	r3
   19148:	mov	r1, sl
   1914c:	mov	r3, r8
   19150:	str	r0, [sp, #20]
   19154:	mov	r2, r6
   19158:	bl	14924 <__assert_fail@plt+0x36f8>
   1915c:	cmp	r0, #0
   19160:	ldreq	sl, [sp, #20]
   19164:	beq	1908c <__assert_fail@plt+0x7e60>
   19168:	movw	r1, #59468	; 0xe84c
   1916c:	movt	r1, #2
   19170:	ldr	r3, [pc, #744]	; 19460 <__assert_fail@plt+0x8234>
   19174:	movw	r0, #59656	; 0xe908
   19178:	movt	r0, #2
   1917c:	movw	r2, #3116	; 0xc2c
   19180:	bl	1122c <__assert_fail@plt>
   19184:	mov	r1, #1
   19188:	bl	13ad8 <__assert_fail@plt+0x28ac>
   1918c:	add	sp, sp, #76	; 0x4c
   19190:	ldrd	r4, [sp]
   19194:	ldrd	r6, [sp, #8]
   19198:	ldrd	r8, [sp, #16]
   1919c:	ldrd	sl, [sp, #24]
   191a0:	add	sp, sp, #32
   191a4:	pop	{pc}		; (ldr pc, [sp], #4)
   191a8:	mov	r2, r5
   191ac:	mov	r1, r7
   191b0:	mov	r0, r8
   191b4:	bl	18e70 <__assert_fail@plt+0x7c44>
   191b8:	cmp	r0, #0
   191bc:	beq	19444 <__assert_fail@plt+0x8218>
   191c0:	cmp	r4, #0
   191c4:	sub	r2, r6, #-1073741823	; 0xc0000001
   191c8:	rsblt	r4, r4, #0
   191cc:	mov	r3, #0
   191d0:	str	r9, [sp, #40]	; 0x28
   191d4:	add	r0, sp, #32
   191d8:	mov	r1, #1
   191dc:	str	r4, [sp, #8]
   191e0:	mov	r4, r2
   191e4:	lsl	r9, r4, #2
   191e8:	str	r2, [sp, #28]
   191ec:	str	r3, [sp, #32]
   191f0:	str	r3, [sp, #36]	; 0x24
   191f4:	bl	13ad8 <__assert_fail@plt+0x28ac>
   191f8:	ldr	r3, [sp, #8]
   191fc:	sub	r3, r3, #1
   19200:	cmn	r3, #1
   19204:	str	r3, [sp, #8]
   19208:	beq	192bc <__assert_fail@plt+0x8090>
   1920c:	ldrd	r2, [sp, #8]
   19210:	mov	r5, #32
   19214:	mov	r4, #-2147483648	; 0x80000000
   19218:	ldr	r3, [r3, #8]
   1921c:	ldr	r7, [r3, r2, lsl #2]
   19220:	b	1923c <__assert_fail@plt+0x8010>
   19224:	ldr	r2, [sp, #36]	; 0x24
   19228:	cmp	r2, r6
   1922c:	bgt	19270 <__assert_fail@plt+0x8044>
   19230:	subs	r5, r5, #1
   19234:	lsr	r4, r4, #1
   19238:	beq	191f8 <__assert_fail@plt+0x7fcc>
   1923c:	add	r2, sp, #32
   19240:	mov	r1, r2
   19244:	mov	r0, r2
   19248:	bl	171c0 <__assert_fail@plt+0x5f94>
   1924c:	tst	r4, r7
   19250:	beq	19224 <__assert_fail@plt+0x7ff8>
   19254:	add	r1, sp, #32
   19258:	mov	r2, r8
   1925c:	mov	r0, r1
   19260:	bl	171c0 <__assert_fail@plt+0x5f94>
   19264:	ldr	r2, [sp, #36]	; 0x24
   19268:	cmp	r2, r6
   1926c:	ble	19230 <__assert_fail@plt+0x8004>
   19270:	mov	r3, sl
   19274:	mov	r0, #0
   19278:	stm	sp, {r6, fp}
   1927c:	ldr	r1, [sp, #40]	; 0x28
   19280:	bl	14c68 <__assert_fail@plt+0x3a3c>
   19284:	ldr	r2, [sp, #40]	; 0x28
   19288:	ldr	r3, [r2, r9]
   1928c:	add	r2, r2, r9
   19290:	cmp	r3, #0
   19294:	mov	r3, r6
   19298:	beq	192ac <__assert_fail@plt+0x8080>
   1929c:	b	192b4 <__assert_fail@plt+0x8088>
   192a0:	ldr	r1, [r2, #-4]!
   192a4:	cmp	r1, #0
   192a8:	bne	192b4 <__assert_fail@plt+0x8088>
   192ac:	subs	r3, r3, #1
   192b0:	bne	192a0 <__assert_fail@plt+0x8074>
   192b4:	str	r3, [sp, #36]	; 0x24
   192b8:	b	19230 <__assert_fail@plt+0x8004>
   192bc:	ldr	r2, [sp, #36]	; 0x24
   192c0:	cmp	r2, r6
   192c4:	bge	19360 <__assert_fail@plt+0x8134>
   192c8:	ldr	r0, [sp, #20]
   192cc:	cmp	r0, #0
   192d0:	beq	192e8 <__assert_fail@plt+0x80bc>
   192d4:	movw	r3, #292	; 0x124
   192d8:	movt	r3, #4
   192dc:	add	r1, r9, #4
   192e0:	ldr	r3, [r3, #8]
   192e4:	blx	r3
   192e8:	ldr	ip, [sp, #16]
   192ec:	ldr	r3, [sp, #32]
   192f0:	ldr	r0, [sp, #36]	; 0x24
   192f4:	ldr	r1, [ip]
   192f8:	str	r3, [ip]
   192fc:	ldr	r3, [ip, #4]
   19300:	str	r0, [ip, #4]
   19304:	ldr	r0, [ip, #8]
   19308:	cmp	r1, #0
   1930c:	str	r1, [sp, #32]
   19310:	ldr	r2, [sp, #40]	; 0x28
   19314:	str	r3, [sp, #36]	; 0x24
   19318:	str	r0, [sp, #40]	; 0x28
   1931c:	str	r2, [ip, #8]
   19320:	beq	19338 <__assert_fail@plt+0x810c>
   19324:	movw	r3, #292	; 0x124
   19328:	movt	r3, #4
   1932c:	lsl	r1, r1, #2
   19330:	ldr	r3, [r3, #8]
   19334:	blx	r3
   19338:	ldr	r1, [sp, #44]	; 0x2c
   1933c:	cmp	r1, #0
   19340:	beq	1918c <__assert_fail@plt+0x7f60>
   19344:	movw	r3, #292	; 0x124
   19348:	movt	r3, #4
   1934c:	lsl	r1, r1, #2
   19350:	ldr	r3, [r3, #8]
   19354:	ldr	r0, [sp, #52]	; 0x34
   19358:	blx	r3
   1935c:	b	1918c <__assert_fail@plt+0x7f60>
   19360:	ldr	ip, [sp, #24]
   19364:	mov	r3, sl
   19368:	mov	r0, #0
   1936c:	stm	sp, {r6, fp}
   19370:	ldr	r1, [sp, #40]	; 0x28
   19374:	str	ip, [sp, #56]	; 0x38
   19378:	bl	14c68 <__assert_fail@plt+0x3a3c>
   1937c:	ldr	r2, [sp, #28]
   19380:	ldr	r3, [sp, #40]	; 0x28
   19384:	ldr	r2, [r3, r2, lsl #2]
   19388:	add	r3, r3, r9
   1938c:	cmp	r2, #0
   19390:	beq	193a4 <__assert_fail@plt+0x8178>
   19394:	b	193ac <__assert_fail@plt+0x8180>
   19398:	ldr	r2, [r3, #-4]!
   1939c:	cmp	r2, #0
   193a0:	bne	193ac <__assert_fail@plt+0x8180>
   193a4:	subs	r6, r6, #1
   193a8:	bne	19398 <__assert_fail@plt+0x816c>
   193ac:	str	r6, [sp, #36]	; 0x24
   193b0:	b	192c8 <__assert_fail@plt+0x809c>
   193b4:	mov	r0, r3
   193b8:	mov	r2, r5
   193bc:	stm	sp, {r6, fp}
   193c0:	mov	r3, sl
   193c4:	ldr	r1, [sp, #52]	; 0x34
   193c8:	bl	14c68 <__assert_fail@plt+0x3a3c>
   193cc:	ldr	r3, [r7, #4]
   193d0:	cmp	r3, #0
   193d4:	bge	19408 <__assert_fail@plt+0x81dc>
   193d8:	mov	r5, r6
   193dc:	ldr	r3, [sp, #44]	; 0x2c
   193e0:	cmp	r3, r6
   193e4:	blt	19414 <__assert_fail@plt+0x81e8>
   193e8:	ldr	r3, [sp, #52]	; 0x34
   193ec:	mov	r0, r3
   193f0:	mov	r2, r6
   193f4:	str	r5, [sp]
   193f8:	mov	r1, sl
   193fc:	bl	14110 <__assert_fail@plt+0x2ee4>
   19400:	cmp	r0, #0
   19404:	bne	19428 <__assert_fail@plt+0x81fc>
   19408:	mov	r5, r6
   1940c:	ldr	r3, [sp, #52]	; 0x34
   19410:	b	190f8 <__assert_fail@plt+0x7ecc>
   19414:	mov	r1, r6
   19418:	mov	r0, r8
   1941c:	bl	13584 <__assert_fail@plt+0x2358>
   19420:	mov	r3, r0
   19424:	b	193ec <__assert_fail@plt+0x81c0>
   19428:	movw	r1, #59468	; 0xe84c
   1942c:	movt	r1, #2
   19430:	ldr	r3, [pc, #40]	; 19460 <__assert_fail@plt+0x8234>
   19434:	movw	r0, #59656	; 0xe908
   19438:	movt	r0, #2
   1943c:	movw	r2, #3145	; 0xc49
   19440:	bl	1122c <__assert_fail@plt>
   19444:	movw	r0, #60208	; 0xeb30
   19448:	movt	r0, #2
   1944c:	bl	13400 <__assert_fail@plt+0x21d4>
   19450:	movw	r0, #60184	; 0xeb18
   19454:	movt	r0, #2
   19458:	bl	13400 <__assert_fail@plt+0x21d4>
   1945c:	andeq	lr, r2, ip, asr #13
   19460:	andeq	lr, r2, r8, lsr r7
   19464:	strd	r4, [sp, #-20]!	; 0xffffffec
   19468:	mov	ip, #0
   1946c:	cmp	r2, #0
   19470:	strd	r6, [sp, #8]
   19474:	mov	r5, r0
   19478:	mov	r6, r1
   1947c:	str	lr, [sp, #16]
   19480:	sub	sp, sp, #20
   19484:	mov	r7, r3
   19488:	ldr	lr, [pc, #104]	; 194f8 <__assert_fail@plt+0x82cc>
   1948c:	add	r4, sp, #4
   19490:	str	ip, [sp, #4]
   19494:	str	ip, [sp, #8]
   19498:	str	lr, [sp, #12]
   1949c:	beq	194ac <__assert_fail@plt+0x8280>
   194a0:	mov	r1, r2
   194a4:	mov	r0, r4
   194a8:	bl	13ad8 <__assert_fail@plt+0x28ac>
   194ac:	mov	r1, r6
   194b0:	mov	r3, r7
   194b4:	mov	r2, r4
   194b8:	mov	r0, r5
   194bc:	bl	19014 <__assert_fail@plt+0x7de8>
   194c0:	ldr	r1, [sp, #4]
   194c4:	cmp	r1, #0
   194c8:	beq	194e4 <__assert_fail@plt+0x82b8>
   194cc:	movw	r3, #292	; 0x124
   194d0:	movt	r3, #4
   194d4:	lsl	r1, r1, #2
   194d8:	ldr	r3, [r3, #8]
   194dc:	ldr	r0, [sp, #12]
   194e0:	blx	r3
   194e4:	add	sp, sp, #20
   194e8:	ldrd	r4, [sp]
   194ec:	ldrd	r6, [sp, #8]
   194f0:	add	sp, sp, #16
   194f4:	pop	{pc}		; (ldr pc, [sp], #4)
   194f8:	andeq	lr, r2, ip, asr #13
   194fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19500:	ldr	r4, [sp, #24]
   19504:	strd	r6, [sp, #8]
   19508:	str	r8, [sp, #16]
   1950c:	str	lr, [sp, #20]
   19510:	cmp	r4, #0
   19514:	beq	195d4 <__assert_fail@plt+0x83a8>
   19518:	mov	r5, r2
   1951c:	mov	r6, r0
   19520:	mov	r2, r3
   19524:	mov	r7, r1
   19528:	mov	r3, r0
   1952c:	mov	r1, r5
   19530:	mov	r0, r5
   19534:	bl	19014 <__assert_fail@plt+0x7de8>
   19538:	ldr	r3, [r5, #4]
   1953c:	cmp	r3, #1
   19540:	movle	r2, #1
   19544:	movgt	r2, #0
   19548:	cmp	r3, #0
   1954c:	movle	r2, #0
   19550:	cmp	r2, #0
   19554:	beq	19578 <__assert_fail@plt+0x834c>
   19558:	b	195ac <__assert_fail@plt+0x8380>
   1955c:	subs	r4, r4, #1
   19560:	beq	195a4 <__assert_fail@plt+0x8378>
   19564:	mov	r3, r6
   19568:	mov	r2, #2
   1956c:	mov	r1, r5
   19570:	mov	r0, r5
   19574:	bl	19464 <__assert_fail@plt+0x8238>
   19578:	mov	r1, r7
   1957c:	mov	r0, r5
   19580:	bl	16588 <__assert_fail@plt+0x535c>
   19584:	cmp	r0, #0
   19588:	bne	1955c <__assert_fail@plt+0x8330>
   1958c:	mov	r0, #1
   19590:	ldrd	r4, [sp]
   19594:	ldrd	r6, [sp, #8]
   19598:	ldr	r8, [sp, #16]
   1959c:	add	sp, sp, #20
   195a0:	pop	{pc}		; (ldr pc, [sp], #4)
   195a4:	mov	r0, r4
   195a8:	b	19590 <__assert_fail@plt+0x8364>
   195ac:	ldr	r3, [r5, #8]
   195b0:	ldr	r3, [r3]
   195b4:	clz	r2, r3
   195b8:	cmp	r3, #1
   195bc:	lsr	r2, r2, #5
   195c0:	movls	r3, #0
   195c4:	movhi	r3, #1
   195c8:	cmp	r3, r2
   195cc:	bne	19578 <__assert_fail@plt+0x834c>
   195d0:	b	1958c <__assert_fail@plt+0x8360>
   195d4:	movw	r1, #59468	; 0xe84c
   195d8:	movt	r1, #2
   195dc:	ldr	r3, [pc, #12]	; 195f0 <__assert_fail@plt+0x83c4>
   195e0:	movw	r0, #60264	; 0xeb68
   195e4:	movt	r0, #2
   195e8:	movw	r2, #3550	; 0xdde
   195ec:	bl	1122c <__assert_fail@plt>
   195f0:	andeq	lr, r2, r4, asr #14
   195f4:	strd	r4, [sp, #-16]!
   195f8:	mov	r4, r0
   195fc:	mov	r5, r1
   19600:	str	r6, [sp, #8]
   19604:	str	lr, [sp, #12]
   19608:	bl	18664 <__assert_fail@plt+0x7438>
   1960c:	cmp	r0, #0
   19610:	beq	1965c <__assert_fail@plt+0x8430>
   19614:	ldr	r3, [r4, #4]
   19618:	cmp	r3, #0
   1961c:	blt	19640 <__assert_fail@plt+0x8414>
   19620:	mov	r2, r5
   19624:	add	r0, r4, #4
   19628:	ldr	r1, [r4, #8]
   1962c:	ldrd	r4, [sp]
   19630:	ldr	r6, [sp, #8]
   19634:	ldr	lr, [sp, #12]
   19638:	add	sp, sp, #16
   1963c:	b	139e4 <__assert_fail@plt+0x27b8>
   19640:	mov	r1, r5
   19644:	mov	r0, r4
   19648:	ldrd	r4, [sp]
   1964c:	ldr	r6, [sp, #8]
   19650:	ldr	lr, [sp, #12]
   19654:	add	sp, sp, #16
   19658:	b	1389c <__assert_fail@plt+0x2670>
   1965c:	ldrd	r4, [sp]
   19660:	ldr	r6, [sp, #8]
   19664:	add	sp, sp, #12
   19668:	pop	{pc}		; (ldr pc, [sp], #4)
   1966c:	strd	r4, [sp, #-16]!
   19670:	mov	r4, r0
   19674:	mov	r5, r1
   19678:	str	r6, [sp, #8]
   1967c:	str	lr, [sp, #12]
   19680:	bl	18664 <__assert_fail@plt+0x7438>
   19684:	ldr	r3, [r4, #4]
   19688:	cmp	r0, r3, lsr #31
   1968c:	beq	196b0 <__assert_fail@plt+0x8484>
   19690:	mov	r2, r5
   19694:	add	r0, r4, #4
   19698:	ldr	r1, [r4, #8]
   1969c:	ldrd	r4, [sp]
   196a0:	ldr	r6, [sp, #8]
   196a4:	ldr	lr, [sp, #12]
   196a8:	add	sp, sp, #16
   196ac:	b	139e4 <__assert_fail@plt+0x27b8>
   196b0:	mov	r1, r5
   196b4:	mov	r0, r4
   196b8:	ldrd	r4, [sp]
   196bc:	ldr	r6, [sp, #8]
   196c0:	ldr	lr, [sp, #12]
   196c4:	add	sp, sp, #16
   196c8:	b	1389c <__assert_fail@plt+0x2670>
   196cc:	mov	r2, #1
   196d0:	str	r4, [sp, #-8]!
   196d4:	mov	r4, r0
   196d8:	str	lr, [sp, #4]
   196dc:	bl	167d8 <__assert_fail@plt+0x55ac>
   196e0:	mov	r1, r4
   196e4:	mov	r0, r4
   196e8:	bl	15dbc <__assert_fail@plt+0x4b90>
   196ec:	ldr	r3, [r4, #4]
   196f0:	rsb	r3, r3, #0
   196f4:	str	r3, [r4, #4]
   196f8:	ldr	r4, [sp]
   196fc:	add	sp, sp, #4
   19700:	pop	{pc}		; (ldr pc, [sp], #4)
   19704:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19708:	ldr	r3, [r2, #4]
   1970c:	strd	r6, [sp, #8]
   19710:	ldr	r7, [r1, #4]
   19714:	strd	r8, [sp, #16]
   19718:	strd	sl, [sp, #24]
   1971c:	str	lr, [sp, #32]
   19720:	sub	sp, sp, #20
   19724:	cmp	r7, #0
   19728:	rsblt	r7, r7, #0
   1972c:	cmp	r3, #0
   19730:	rsblt	r3, r3, #0
   19734:	cmp	r7, r3
   19738:	movge	fp, r3
   1973c:	movlt	fp, r7
   19740:	movge	r3, r1
   19744:	movlt	r7, r3
   19748:	movlt	r3, r2
   1974c:	movlt	r2, r1
   19750:	cmp	fp, #0
   19754:	streq	fp, [r0, #4]
   19758:	beq	198a0 <__assert_fail@plt+0x8674>
   1975c:	ldr	r6, [r2, #4]
   19760:	str	r0, [sp, #4]
   19764:	ldr	r5, [r3, #4]
   19768:	ldr	ip, [r0]
   1976c:	lsr	r6, r6, #31
   19770:	lsr	r5, r5, #31
   19774:	rsb	r9, r6, #0
   19778:	cmp	r9, #0
   1977c:	moveq	r7, fp
   19780:	and	r4, r5, r6
   19784:	add	r1, r4, r7
   19788:	rsb	sl, r5, #0
   1978c:	cmp	r1, ip
   19790:	rsb	r8, r4, #0
   19794:	bgt	198bc <__assert_fail@plt+0x8690>
   19798:	ldr	r1, [sp, #4]
   1979c:	ldr	r1, [r1, #8]
   197a0:	str	r1, [sp]
   197a4:	ldr	r0, [sp]
   197a8:	lsl	r1, fp, #2
   197ac:	ldr	r3, [r3, #8]
   197b0:	ldr	lr, [r2, #8]
   197b4:	sub	r0, r0, #4
   197b8:	mov	ip, r3
   197bc:	str	r1, [sp, #12]
   197c0:	add	r1, r1, r3
   197c4:	str	r3, [sp, #8]
   197c8:	sub	lr, lr, #4
   197cc:	ldr	r3, [ip], #4
   197d0:	ldr	r2, [lr, #4]!
   197d4:	eor	r3, r3, sl
   197d8:	adds	r3, r3, r5
   197dc:	eor	r2, r2, r9
   197e0:	movcs	r5, #1
   197e4:	movcc	r5, #0
   197e8:	adds	r6, r2, r6
   197ec:	and	r3, r3, r6
   197f0:	movcs	r2, #1
   197f4:	eor	r3, r3, r8
   197f8:	movcc	r2, #0
   197fc:	adds	r4, r3, r4
   19800:	mov	r6, r2
   19804:	movcs	r3, #1
   19808:	movcc	r3, #0
   1980c:	cmp	r1, ip
   19810:	str	r4, [r0, #4]!
   19814:	mov	r4, r3
   19818:	bne	197cc <__assert_fail@plt+0x85a0>
   1981c:	cmp	r2, #0
   19820:	bne	19928 <__assert_fail@plt+0x86fc>
   19824:	cmp	fp, r7
   19828:	bge	198d8 <__assert_fail@plt+0x86ac>
   1982c:	ldr	r3, [sp, #8]
   19830:	ldr	r0, [sp, #12]
   19834:	add	r2, r3, r7, lsl #2
   19838:	ldr	r3, [sp]
   1983c:	add	r0, r3, r0
   19840:	ldr	ip, [r1], #4
   19844:	eor	ip, ip, sl
   19848:	adds	r3, ip, r5
   1984c:	and	r3, r3, r9
   19850:	movcs	r5, #1
   19854:	eor	r3, r3, r8
   19858:	movcc	r5, #0
   1985c:	adds	r3, r3, r4
   19860:	movcs	ip, #1
   19864:	movcc	ip, #0
   19868:	cmp	r2, r1
   1986c:	mov	r4, ip
   19870:	str	r3, [r0], #4
   19874:	bne	19840 <__assert_fail@plt+0x8614>
   19878:	cmp	ip, #0
   1987c:	beq	198e8 <__assert_fail@plt+0x86bc>
   19880:	ldr	r1, [sp]
   19884:	mov	r2, #1
   19888:	add	r3, r7, r2
   1988c:	str	r2, [r1, r7, lsl #2]
   19890:	ldr	r2, [sp, #4]
   19894:	cmp	r8, #0
   19898:	rsbne	r3, r3, #0
   1989c:	str	r3, [r2, #4]
   198a0:	add	sp, sp, #20
   198a4:	ldrd	r4, [sp]
   198a8:	ldrd	r6, [sp, #8]
   198ac:	ldrd	r8, [sp, #16]
   198b0:	ldrd	sl, [sp, #24]
   198b4:	add	sp, sp, #32
   198b8:	pop	{pc}		; (ldr pc, [sp], #4)
   198bc:	str	r3, [sp, #8]
   198c0:	str	r2, [sp, #12]
   198c4:	bl	13584 <__assert_fail@plt+0x2358>
   198c8:	str	r0, [sp]
   198cc:	ldr	r3, [sp, #8]
   198d0:	ldr	r2, [sp, #12]
   198d4:	b	197a4 <__assert_fail@plt+0x8578>
   198d8:	cmp	r3, #0
   198dc:	bne	19880 <__assert_fail@plt+0x8654>
   198e0:	cmp	r7, #0
   198e4:	beq	19918 <__assert_fail@plt+0x86ec>
   198e8:	ldr	r2, [sp]
   198ec:	sub	r0, r7, #-1073741823	; 0xc0000001
   198f0:	ldr	r3, [r2, r0, lsl #2]
   198f4:	add	r0, r2, r0, lsl #2
   198f8:	cmp	r3, #0
   198fc:	beq	19910 <__assert_fail@plt+0x86e4>
   19900:	b	19920 <__assert_fail@plt+0x86f4>
   19904:	ldr	r3, [r0, #-4]!
   19908:	cmp	r3, #0
   1990c:	bne	19920 <__assert_fail@plt+0x86f4>
   19910:	subs	r7, r7, #1
   19914:	bne	19904 <__assert_fail@plt+0x86d8>
   19918:	mov	r3, #0
   1991c:	b	19890 <__assert_fail@plt+0x8664>
   19920:	mov	r3, r7
   19924:	b	19890 <__assert_fail@plt+0x8664>
   19928:	movw	r1, #59468	; 0xe84c
   1992c:	movt	r1, #2
   19930:	ldr	r3, [pc, #12]	; 19944 <__assert_fail@plt+0x8718>
   19934:	movw	r0, #60272	; 0xeb70
   19938:	movt	r0, #2
   1993c:	movw	r2, #3854	; 0xf0e
   19940:	bl	1122c <__assert_fail@plt>
   19944:	andeq	lr, r2, r4, asr r7
   19948:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1994c:	ldr	r3, [r2, #4]
   19950:	strd	r6, [sp, #8]
   19954:	ldr	r7, [r1, #4]
   19958:	strd	r8, [sp, #16]
   1995c:	strd	sl, [sp, #24]
   19960:	str	lr, [sp, #32]
   19964:	sub	sp, sp, #20
   19968:	cmp	r7, #0
   1996c:	rsblt	r7, r7, #0
   19970:	cmp	r3, #0
   19974:	rsblt	r3, r3, #0
   19978:	cmp	r7, r3
   1997c:	movge	fp, r3
   19980:	movlt	fp, r7
   19984:	movge	r3, r1
   19988:	movlt	r7, r3
   1998c:	movlt	r3, r2
   19990:	movlt	r2, r1
   19994:	cmp	fp, #0
   19998:	beq	19b58 <__assert_fail@plt+0x892c>
   1999c:	ldr	r6, [r2, #4]
   199a0:	str	r0, [sp, #4]
   199a4:	ldr	r5, [r3, #4]
   199a8:	ldr	ip, [r0]
   199ac:	lsr	r6, r6, #31
   199b0:	lsr	r5, r5, #31
   199b4:	rsb	r9, r6, #0
   199b8:	cmp	r9, #0
   199bc:	movne	r7, fp
   199c0:	orr	r4, r5, r6
   199c4:	add	r1, r4, r7
   199c8:	rsb	sl, r5, #0
   199cc:	cmp	r1, ip
   199d0:	rsb	r8, r4, #0
   199d4:	bgt	19b3c <__assert_fail@plt+0x8910>
   199d8:	ldr	r1, [sp, #4]
   199dc:	ldr	r1, [r1, #8]
   199e0:	str	r1, [sp]
   199e4:	ldr	r0, [sp]
   199e8:	lsl	r1, fp, #2
   199ec:	ldr	r3, [r3, #8]
   199f0:	ldr	lr, [r2, #8]
   199f4:	sub	r0, r0, #4
   199f8:	mov	ip, r3
   199fc:	str	r1, [sp, #12]
   19a00:	add	r1, r1, r3
   19a04:	str	r3, [sp, #8]
   19a08:	sub	lr, lr, #4
   19a0c:	ldr	r3, [ip], #4
   19a10:	ldr	r2, [lr, #4]!
   19a14:	eor	r3, r3, sl
   19a18:	adds	r3, r3, r5
   19a1c:	eor	r2, r2, r9
   19a20:	movcs	r5, #1
   19a24:	movcc	r5, #0
   19a28:	adds	r6, r2, r6
   19a2c:	orr	r3, r3, r6
   19a30:	movcs	r2, #1
   19a34:	eor	r3, r3, r8
   19a38:	movcc	r2, #0
   19a3c:	adds	r4, r3, r4
   19a40:	mov	r6, r2
   19a44:	movcs	r3, #1
   19a48:	movcc	r3, #0
   19a4c:	cmp	r1, ip
   19a50:	str	r4, [r0, #4]!
   19a54:	mov	r4, r3
   19a58:	bne	19a0c <__assert_fail@plt+0x87e0>
   19a5c:	cmp	r2, #0
   19a60:	bne	19b90 <__assert_fail@plt+0x8964>
   19a64:	cmp	fp, r7
   19a68:	bge	19af8 <__assert_fail@plt+0x88cc>
   19a6c:	ldr	r3, [sp, #8]
   19a70:	ldr	r0, [sp, #12]
   19a74:	add	r2, r3, r7, lsl #2
   19a78:	ldr	r3, [sp]
   19a7c:	add	r0, r3, r0
   19a80:	ldr	ip, [r1], #4
   19a84:	eor	ip, ip, sl
   19a88:	adds	r3, ip, r5
   19a8c:	orr	r3, r3, r9
   19a90:	movcs	r5, #1
   19a94:	eor	r3, r3, r8
   19a98:	movcc	r5, #0
   19a9c:	adds	r3, r3, r4
   19aa0:	movcs	ip, #1
   19aa4:	movcc	ip, #0
   19aa8:	cmp	r2, r1
   19aac:	mov	r4, ip
   19ab0:	str	r3, [r0], #4
   19ab4:	bne	19a80 <__assert_fail@plt+0x8854>
   19ab8:	cmp	ip, #0
   19abc:	bne	19b00 <__assert_fail@plt+0x88d4>
   19ac0:	ldr	r2, [sp]
   19ac4:	sub	r0, r7, #-1073741823	; 0xc0000001
   19ac8:	ldr	r3, [r2, r0, lsl #2]
   19acc:	add	r0, r2, r0, lsl #2
   19ad0:	cmp	r3, #0
   19ad4:	beq	19ae8 <__assert_fail@plt+0x88bc>
   19ad8:	b	19b7c <__assert_fail@plt+0x8950>
   19adc:	ldr	r3, [r0, #-4]!
   19ae0:	cmp	r3, #0
   19ae4:	bne	19b7c <__assert_fail@plt+0x8950>
   19ae8:	subs	r7, r7, #1
   19aec:	bne	19adc <__assert_fail@plt+0x88b0>
   19af0:	mov	r3, #0
   19af4:	b	19b10 <__assert_fail@plt+0x88e4>
   19af8:	cmp	r3, #0
   19afc:	beq	19b84 <__assert_fail@plt+0x8958>
   19b00:	ldr	r1, [sp]
   19b04:	mov	r2, #1
   19b08:	add	r3, r7, r2
   19b0c:	str	r2, [r1, r7, lsl #2]
   19b10:	ldr	r2, [sp, #4]
   19b14:	cmp	r8, #0
   19b18:	rsbne	r3, r3, #0
   19b1c:	str	r3, [r2, #4]
   19b20:	add	sp, sp, #20
   19b24:	ldrd	r4, [sp]
   19b28:	ldrd	r6, [sp, #8]
   19b2c:	ldrd	r8, [sp, #16]
   19b30:	ldrd	sl, [sp, #24]
   19b34:	add	sp, sp, #32
   19b38:	pop	{pc}		; (ldr pc, [sp], #4)
   19b3c:	str	r3, [sp, #8]
   19b40:	str	r2, [sp, #12]
   19b44:	bl	13584 <__assert_fail@plt+0x2358>
   19b48:	str	r0, [sp]
   19b4c:	ldr	r3, [sp, #8]
   19b50:	ldr	r2, [sp, #12]
   19b54:	b	199e4 <__assert_fail@plt+0x87b8>
   19b58:	mov	r1, r3
   19b5c:	add	sp, sp, #20
   19b60:	ldrd	r4, [sp]
   19b64:	ldrd	r6, [sp, #8]
   19b68:	ldrd	r8, [sp, #16]
   19b6c:	ldrd	sl, [sp, #24]
   19b70:	ldr	lr, [sp, #32]
   19b74:	add	sp, sp, #36	; 0x24
   19b78:	b	15dbc <__assert_fail@plt+0x4b90>
   19b7c:	mov	r3, r7
   19b80:	b	19b10 <__assert_fail@plt+0x88e4>
   19b84:	cmp	r7, #0
   19b88:	beq	19af0 <__assert_fail@plt+0x88c4>
   19b8c:	b	19ac0 <__assert_fail@plt+0x8894>
   19b90:	movw	r1, #59468	; 0xe84c
   19b94:	movt	r1, #2
   19b98:	ldr	r3, [pc, #12]	; 19bac <__assert_fail@plt+0x8980>
   19b9c:	movw	r0, #60272	; 0xeb70
   19ba0:	movt	r0, #2
   19ba4:	movw	r2, #3927	; 0xf57
   19ba8:	bl	1122c <__assert_fail@plt>
   19bac:	andeq	lr, r2, ip, asr r7
   19bb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19bb4:	strd	r6, [sp, #8]
   19bb8:	strd	r8, [sp, #16]
   19bbc:	ldr	r8, [r1, #4]
   19bc0:	strd	sl, [sp, #24]
   19bc4:	ldr	r9, [r2, #4]
   19bc8:	str	lr, [sp, #32]
   19bcc:	sub	sp, sp, #28
   19bd0:	cmp	r8, #0
   19bd4:	rsblt	r8, r8, #0
   19bd8:	cmp	r9, #0
   19bdc:	rsblt	r9, r9, #0
   19be0:	cmp	r8, r9
   19be4:	movge	lr, r9
   19be8:	movlt	lr, r8
   19bec:	movlt	r3, r2
   19bf0:	movge	r9, r8
   19bf4:	movge	r3, r1
   19bf8:	movlt	r2, r1
   19bfc:	str	lr, [sp, #8]
   19c00:	cmp	lr, #0
   19c04:	beq	19dc4 <__assert_fail@plt+0x8b98>
   19c08:	ldr	r6, [r2, #4]
   19c0c:	mov	r8, r9
   19c10:	str	r0, [sp, #12]
   19c14:	ldr	r5, [r3, #4]
   19c18:	ldr	ip, [r0]
   19c1c:	lsr	r6, r6, #31
   19c20:	lsr	r5, r5, #31
   19c24:	rsb	fp, r6, #0
   19c28:	eor	r4, r5, r6
   19c2c:	rsb	r7, r5, #0
   19c30:	add	r1, r4, r9
   19c34:	rsb	sl, r4, #0
   19c38:	cmp	r1, ip
   19c3c:	bgt	19da8 <__assert_fail@plt+0x8b7c>
   19c40:	ldr	r1, [sp, #12]
   19c44:	ldr	r1, [r1, #8]
   19c48:	str	r1, [sp, #4]
   19c4c:	ldrd	r0, [sp, #4]
   19c50:	ldr	r3, [r3, #8]
   19c54:	ldr	ip, [r2, #8]
   19c58:	lsl	r1, r1, #2
   19c5c:	sub	r0, r0, #4
   19c60:	add	r2, r1, r3
   19c64:	str	r3, [sp, #16]
   19c68:	str	r1, [sp, #20]
   19c6c:	mov	r1, r3
   19c70:	sub	ip, ip, #4
   19c74:	ldr	r3, [r1], #4
   19c78:	ldr	lr, [ip, #4]!
   19c7c:	eor	r3, r3, r7
   19c80:	adds	r3, r3, r5
   19c84:	eor	lr, lr, fp
   19c88:	movcs	r5, #1
   19c8c:	movcc	r5, #0
   19c90:	adds	r6, lr, r6
   19c94:	eor	r6, r6, sl
   19c98:	movcs	lr, #1
   19c9c:	eor	r3, r3, r6
   19ca0:	movcc	lr, #0
   19ca4:	adds	r4, r3, r4
   19ca8:	mov	r6, lr
   19cac:	movcs	r3, #1
   19cb0:	movcc	r3, #0
   19cb4:	cmp	r2, r1
   19cb8:	str	r4, [r0, #4]!
   19cbc:	mov	r4, r3
   19cc0:	bne	19c74 <__assert_fail@plt+0x8a48>
   19cc4:	cmp	lr, #0
   19cc8:	bne	19df4 <__assert_fail@plt+0x8bc8>
   19ccc:	ldr	r1, [sp, #8]
   19cd0:	cmp	r9, r1
   19cd4:	ble	19d64 <__assert_fail@plt+0x8b38>
   19cd8:	ldr	r3, [sp, #16]
   19cdc:	ldr	r0, [sp, #20]
   19ce0:	add	r1, r3, r9, lsl #2
   19ce4:	ldr	r3, [sp, #4]
   19ce8:	add	r0, r3, r0
   19cec:	ldr	r3, [r2], #4
   19cf0:	eor	r3, r3, r7
   19cf4:	adds	r3, r3, r5
   19cf8:	eor	r3, r3, r7
   19cfc:	movcs	r5, #1
   19d00:	movcc	r5, #0
   19d04:	adds	r4, r3, r4
   19d08:	movcs	r3, #1
   19d0c:	movcc	r3, #0
   19d10:	cmp	r1, r2
   19d14:	str	r4, [r0], #4
   19d18:	mov	r4, r3
   19d1c:	bne	19cec <__assert_fail@plt+0x8ac0>
   19d20:	cmp	r3, #0
   19d24:	bne	19d6c <__assert_fail@plt+0x8b40>
   19d28:	ldr	r2, [sp, #4]
   19d2c:	sub	r0, r9, #-1073741823	; 0xc0000001
   19d30:	ldr	r3, [r2, r0, lsl #2]
   19d34:	add	r0, r2, r0, lsl #2
   19d38:	cmp	r3, #0
   19d3c:	movne	r8, r9
   19d40:	beq	19d54 <__assert_fail@plt+0x8b28>
   19d44:	b	19d7c <__assert_fail@plt+0x8b50>
   19d48:	ldr	r3, [r0, #-4]!
   19d4c:	cmp	r3, #0
   19d50:	bne	19d7c <__assert_fail@plt+0x8b50>
   19d54:	subs	r8, r8, #1
   19d58:	bne	19d48 <__assert_fail@plt+0x8b1c>
   19d5c:	mov	r8, #0
   19d60:	b	19d7c <__assert_fail@plt+0x8b50>
   19d64:	cmp	r3, #0
   19d68:	beq	19de8 <__assert_fail@plt+0x8bbc>
   19d6c:	ldr	r2, [sp, #4]
   19d70:	mov	r3, #1
   19d74:	add	r8, r9, r3
   19d78:	str	r3, [r2, r9, lsl #2]
   19d7c:	ldr	r3, [sp, #12]
   19d80:	cmp	sl, #0
   19d84:	rsbne	r8, r8, #0
   19d88:	str	r8, [r3, #4]
   19d8c:	add	sp, sp, #28
   19d90:	ldrd	r4, [sp]
   19d94:	ldrd	r6, [sp, #8]
   19d98:	ldrd	r8, [sp, #16]
   19d9c:	ldrd	sl, [sp, #24]
   19da0:	add	sp, sp, #32
   19da4:	pop	{pc}		; (ldr pc, [sp], #4)
   19da8:	str	r3, [sp, #16]
   19dac:	str	r2, [sp, #20]
   19db0:	bl	13584 <__assert_fail@plt+0x2358>
   19db4:	str	r0, [sp, #4]
   19db8:	ldr	r3, [sp, #16]
   19dbc:	ldr	r2, [sp, #20]
   19dc0:	b	19c4c <__assert_fail@plt+0x8a20>
   19dc4:	mov	r1, r3
   19dc8:	add	sp, sp, #28
   19dcc:	ldrd	r4, [sp]
   19dd0:	ldrd	r6, [sp, #8]
   19dd4:	ldrd	r8, [sp, #16]
   19dd8:	ldrd	sl, [sp, #24]
   19ddc:	ldr	lr, [sp, #32]
   19de0:	add	sp, sp, #36	; 0x24
   19de4:	b	15dbc <__assert_fail@plt+0x4b90>
   19de8:	cmp	r9, #0
   19dec:	beq	19d5c <__assert_fail@plt+0x8b30>
   19df0:	b	19d28 <__assert_fail@plt+0x8afc>
   19df4:	movw	r1, #59468	; 0xe84c
   19df8:	movt	r1, #2
   19dfc:	ldr	r3, [pc, #12]	; 19e10 <__assert_fail@plt+0x8be4>
   19e00:	movw	r0, #60272	; 0xeb70
   19e04:	movt	r0, #2
   19e08:	movw	r2, #3996	; 0xf9c
   19e0c:	bl	1122c <__assert_fail@plt>
   19e10:	andeq	lr, r2, r4, ror #14
   19e14:	cmp	r1, #0
   19e18:	ble	19e98 <__assert_fail@plt+0x8c6c>
   19e1c:	strd	r4, [sp, #-16]!
   19e20:	mov	r5, r0
   19e24:	movw	r4, #21845	; 0x5555
   19e28:	str	r6, [sp, #8]
   19e2c:	add	r6, r5, r1, lsl #2
   19e30:	mov	r0, #0
   19e34:	str	lr, [sp, #12]
   19e38:	movw	lr, #13107	; 0x3333
   19e3c:	ldr	r1, [r5], #4
   19e40:	cmp	r1, #0
   19e44:	beq	19e80 <__assert_fail@plt+0x8c54>
   19e48:	mov	ip, #0
   19e4c:	and	r2, r4, r1, lsr #1
   19e50:	sub	r2, r1, r2
   19e54:	lsrs	r1, r1, #16
   19e58:	and	r3, lr, r2, lsr #2
   19e5c:	and	r2, r2, lr
   19e60:	add	r3, r3, r2
   19e64:	add	r3, r3, r3, lsr #4
   19e68:	ubfx	r2, r3, #8, #4
   19e6c:	and	r3, r3, #15
   19e70:	add	r3, r2, r3
   19e74:	add	ip, ip, r3
   19e78:	bne	19e4c <__assert_fail@plt+0x8c20>
   19e7c:	add	r0, r0, ip
   19e80:	cmp	r6, r5
   19e84:	bne	19e3c <__assert_fail@plt+0x8c10>
   19e88:	ldrd	r4, [sp]
   19e8c:	ldr	r6, [sp, #8]
   19e90:	add	sp, sp, #12
   19e94:	pop	{pc}		; (ldr pc, [sp], #4)
   19e98:	mov	r0, #0
   19e9c:	bx	lr
   19ea0:	ldr	r1, [r0, #4]
   19ea4:	cmp	r1, #0
   19ea8:	blt	19eb4 <__assert_fail@plt+0x8c88>
   19eac:	ldr	r0, [r0, #8]
   19eb0:	b	19e14 <__assert_fail@plt+0x8be8>
   19eb4:	mvn	r0, #0
   19eb8:	bx	lr
   19ebc:	ldr	r3, [r0, #4]
   19ec0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19ec4:	ldr	r2, [r1, #4]
   19ec8:	strd	r6, [sp, #8]
   19ecc:	strd	r8, [sp, #16]
   19ed0:	strd	sl, [sp, #24]
   19ed4:	str	lr, [sp, #32]
   19ed8:	sub	sp, sp, #20
   19edc:	teq	r3, r2
   19ee0:	str	r3, [sp, #4]
   19ee4:	str	r2, [sp, #8]
   19ee8:	bmi	1a0f0 <__assert_fail@plt+0x8ec4>
   19eec:	lsr	r5, r3, #31
   19ef0:	cmp	r3, #0
   19ef4:	rsb	r7, r5, #0
   19ef8:	blt	1a07c <__assert_fail@plt+0x8e50>
   19efc:	ldr	ip, [sp, #4]
   19f00:	ldr	r3, [sp, #8]
   19f04:	ldr	r2, [r1, #8]
   19f08:	ldr	r9, [r0, #8]
   19f0c:	cmp	ip, r3
   19f10:	str	r2, [sp, #12]
   19f14:	blt	1a0c0 <__assert_fail@plt+0x8e94>
   19f18:	cmp	r3, #0
   19f1c:	ble	1a0dc <__assert_fail@plt+0x8eb0>
   19f20:	stmib	sp, {r3, ip}
   19f24:	str	r9, [sp, #12]
   19f28:	mov	r9, r2
   19f2c:	ldr	r3, [sp, #12]
   19f30:	mov	r0, #0
   19f34:	sub	r9, r9, #4
   19f38:	mov	r8, r0
   19f3c:	mov	r4, r5
   19f40:	movw	r6, #21845	; 0x5555
   19f44:	movw	lr, #13107	; 0x3333
   19f48:	sub	fp, r3, #4
   19f4c:	ldr	r2, [fp, #4]!
   19f50:	ldr	r3, [r9, #4]!
   19f54:	eor	r2, r2, r7
   19f58:	adds	r2, r2, r5
   19f5c:	eor	r3, r3, r7
   19f60:	movcs	r5, #1
   19f64:	movcc	r5, #0
   19f68:	adds	r4, r3, r4
   19f6c:	movcs	sl, #1
   19f70:	movcc	sl, #0
   19f74:	cmp	r2, r4
   19f78:	eor	r2, r2, r4
   19f7c:	mov	r4, sl
   19f80:	beq	19fbc <__assert_fail@plt+0x8d90>
   19f84:	mov	ip, #0
   19f88:	and	r1, r6, r2, lsr #1
   19f8c:	sub	r1, r2, r1
   19f90:	lsrs	r2, r2, #16
   19f94:	and	r3, lr, r1, lsr #2
   19f98:	and	r1, r1, lr
   19f9c:	add	r3, r3, r1
   19fa0:	add	r3, r3, r3, lsr #4
   19fa4:	ubfx	r1, r3, #8, #4
   19fa8:	and	r3, r3, #15
   19fac:	add	r3, r1, r3
   19fb0:	add	ip, ip, r3
   19fb4:	bne	19f88 <__assert_fail@plt+0x8d5c>
   19fb8:	add	r0, r0, ip
   19fbc:	ldr	r3, [sp, #4]
   19fc0:	add	r8, r8, #1
   19fc4:	cmp	r8, r3
   19fc8:	blt	19f4c <__assert_fail@plt+0x8d20>
   19fcc:	cmp	sl, #0
   19fd0:	bne	1a114 <__assert_fail@plt+0x8ee8>
   19fd4:	ldr	r3, [sp, #4]
   19fd8:	ldr	r2, [sp, #8]
   19fdc:	cmp	r3, r2
   19fe0:	bge	1a060 <__assert_fail@plt+0x8e34>
   19fe4:	ldr	r2, [sp, #4]
   19fe8:	movw	lr, #21845	; 0x5555
   19fec:	movw	ip, #13107	; 0x3333
   19ff0:	ldr	r3, [sp, #12]
   19ff4:	add	r4, r3, r2, lsl #2
   19ff8:	ldr	r2, [sp, #8]
   19ffc:	add	r8, r3, r2, lsl #2
   1a000:	ldr	r1, [r4], #4
   1a004:	eor	r1, r1, r7
   1a008:	adds	r1, r1, r5
   1a00c:	movcs	r5, #1
   1a010:	movcc	r5, #0
   1a014:	cmp	r7, r1
   1a018:	eor	r1, r1, r7
   1a01c:	beq	1a058 <__assert_fail@plt+0x8e2c>
   1a020:	mov	r6, #0
   1a024:	and	r2, lr, r1, lsr #1
   1a028:	sub	r2, r1, r2
   1a02c:	lsrs	r1, r1, #16
   1a030:	and	r3, ip, r2, lsr #2
   1a034:	and	r2, r2, ip
   1a038:	add	r3, r3, r2
   1a03c:	add	r3, r3, r3, lsr #4
   1a040:	ubfx	r2, r3, #8, #4
   1a044:	and	r3, r3, #15
   1a048:	add	r3, r2, r3
   1a04c:	add	r6, r6, r3
   1a050:	bne	1a024 <__assert_fail@plt+0x8df8>
   1a054:	add	r0, r0, r6
   1a058:	cmp	r8, r4
   1a05c:	bne	1a000 <__assert_fail@plt+0x8dd4>
   1a060:	add	sp, sp, #20
   1a064:	ldrd	r4, [sp]
   1a068:	ldrd	r6, [sp, #8]
   1a06c:	ldrd	r8, [sp, #16]
   1a070:	ldrd	sl, [sp, #24]
   1a074:	add	sp, sp, #32
   1a078:	pop	{pc}		; (ldr pc, [sp], #4)
   1a07c:	cmp	r2, #0
   1a080:	bge	1a0f8 <__assert_fail@plt+0x8ecc>
   1a084:	ldr	r3, [sp, #4]
   1a088:	ldr	r2, [sp, #8]
   1a08c:	ldr	r0, [r0, #8]
   1a090:	ldr	r9, [r1, #8]
   1a094:	cmp	r3, r2
   1a098:	rsb	r3, r3, #0
   1a09c:	rsb	r2, r2, #0
   1a0a0:	str	r0, [sp, #12]
   1a0a4:	strdle	r2, [sp, #4]
   1a0a8:	ble	19f2c <__assert_fail@plt+0x8d00>
   1a0ac:	str	r3, [sp, #4]
   1a0b0:	str	r2, [sp, #8]
   1a0b4:	str	r9, [sp, #12]
   1a0b8:	mov	r9, r0
   1a0bc:	b	19f2c <__assert_fail@plt+0x8d00>
   1a0c0:	ldr	r3, [sp, #4]
   1a0c4:	cmp	r3, #0
   1a0c8:	movle	r0, #0
   1a0cc:	movle	r5, r0
   1a0d0:	strle	r0, [sp, #4]
   1a0d4:	bgt	19f2c <__assert_fail@plt+0x8d00>
   1a0d8:	b	19fd4 <__assert_fail@plt+0x8da8>
   1a0dc:	ldr	r3, [sp, #4]
   1a0e0:	mov	r0, #0
   1a0e4:	mov	r5, r0
   1a0e8:	stmib	sp, {r0, r3, r9}
   1a0ec:	b	19fd4 <__assert_fail@plt+0x8da8>
   1a0f0:	mvn	r0, #0
   1a0f4:	b	1a060 <__assert_fail@plt+0x8e34>
   1a0f8:	movw	r1, #59468	; 0xe84c
   1a0fc:	movt	r1, #2
   1a100:	ldr	r3, [pc, #40]	; 1a130 <__assert_fail@plt+0x8f04>
   1a104:	movw	r0, #60280	; 0xeb78
   1a108:	movt	r0, #2
   1a10c:	movw	r2, #4079	; 0xfef
   1a110:	bl	1122c <__assert_fail@plt>
   1a114:	movw	r1, #59468	; 0xe84c
   1a118:	movt	r1, #2
   1a11c:	ldr	r3, [pc, #12]	; 1a130 <__assert_fail@plt+0x8f04>
   1a120:	movw	r0, #60272	; 0xeb70
   1a124:	movt	r0, #2
   1a128:	movw	r2, #4100	; 0x1004
   1a12c:	bl	1122c <__assert_fail@plt>
   1a130:	andeq	lr, r2, ip, ror #14
   1a134:	strd	r4, [sp, #-16]!
   1a138:	lsr	ip, r1, #5
   1a13c:	ldr	r4, [r0, #4]
   1a140:	str	r6, [sp, #8]
   1a144:	str	lr, [sp, #12]
   1a148:	sub	sp, sp, #8
   1a14c:	eor	r3, r4, r4, asr #31
   1a150:	sub	r3, r3, r4, asr #31
   1a154:	cmp	r3, ip
   1a158:	ble	1a1b0 <__assert_fail@plt+0x8f84>
   1a15c:	ldr	r2, [r0, #8]
   1a160:	cmp	r1, #0
   1a164:	lsl	lr, ip, #2
   1a168:	ldr	r0, [r2, ip, lsl #2]
   1a16c:	bne	1a190 <__assert_fail@plt+0x8f64>
   1a170:	str	r1, [sp]
   1a174:	mov	r1, ip
   1a178:	bl	13668 <__assert_fail@plt+0x243c>
   1a17c:	add	sp, sp, #8
   1a180:	ldrd	r4, [sp]
   1a184:	ldr	r6, [sp, #8]
   1a188:	add	sp, sp, #12
   1a18c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a190:	cmp	r4, #0
   1a194:	movge	lr, #0
   1a198:	blt	1a1c0 <__assert_fail@plt+0x8f94>
   1a19c:	and	r1, r1, #31
   1a1a0:	mvn	r4, #0
   1a1a4:	and	r0, r0, r4, lsl r1
   1a1a8:	mov	r1, lr
   1a1ac:	b	1a170 <__assert_fail@plt+0x8f44>
   1a1b0:	cmp	r4, #0
   1a1b4:	movlt	r0, r1
   1a1b8:	mvnge	r0, #0
   1a1bc:	b	1a17c <__assert_fail@plt+0x8f50>
   1a1c0:	cmp	ip, #0
   1a1c4:	beq	1a1f8 <__assert_fail@plt+0x8fcc>
   1a1c8:	sub	lr, lr, #4
   1a1cc:	ldr	r6, [r2, lr]
   1a1d0:	add	lr, r2, lr
   1a1d4:	cmp	r6, #0
   1a1d8:	bne	1a220 <__assert_fail@plt+0x8ff4>
   1a1dc:	mov	r4, ip
   1a1e0:	b	1a1f0 <__assert_fail@plt+0x8fc4>
   1a1e4:	ldr	r5, [lr, #-4]!
   1a1e8:	cmp	r5, #0
   1a1ec:	bne	1a1fc <__assert_fail@plt+0x8fd0>
   1a1f0:	subs	r4, r4, #1
   1a1f4:	bne	1a1e4 <__assert_fail@plt+0x8fb8>
   1a1f8:	mov	r6, #1
   1a1fc:	mvn	r0, r0
   1a200:	and	r1, r1, #31
   1a204:	adds	r0, r0, r6
   1a208:	mvn	r4, #0
   1a20c:	mvncc	lr, #0
   1a210:	movcs	lr, #0
   1a214:	and	r0, r0, r4, lsl r1
   1a218:	mov	r1, lr
   1a21c:	b	1a170 <__assert_fail@plt+0x8f44>
   1a220:	mov	r6, #0
   1a224:	b	1a1fc <__assert_fail@plt+0x8fd0>
   1a228:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a22c:	strd	r6, [sp, #8]
   1a230:	lsr	r6, r1, #5
   1a234:	str	lr, [sp, #16]
   1a238:	sub	sp, sp, #12
   1a23c:	ldr	lr, [r0, #4]
   1a240:	eor	r3, lr, lr, asr #31
   1a244:	sub	r3, r3, lr, asr #31
   1a248:	mvn	lr, lr
   1a24c:	lsr	lr, lr, #31
   1a250:	cmp	r3, r6
   1a254:	rsb	lr, lr, #0
   1a258:	ble	1a2e0 <__assert_fail@plt+0x90b4>
   1a25c:	ldr	r2, [r0, #8]
   1a260:	cmp	lr, #0
   1a264:	lsl	r4, r6, #2
   1a268:	ldr	r7, [r2, r6, lsl #2]
   1a26c:	eor	r7, r7, lr
   1a270:	bne	1a2b4 <__assert_fail@plt+0x9088>
   1a274:	cmp	r6, #0
   1a278:	beq	1a2ac <__assert_fail@plt+0x9080>
   1a27c:	sub	r4, r4, #4
   1a280:	ldr	r0, [r2, r4]
   1a284:	add	r4, r2, r4
   1a288:	cmp	r0, #0
   1a28c:	bne	1a2f0 <__assert_fail@plt+0x90c4>
   1a290:	mov	ip, r6
   1a294:	b	1a2a4 <__assert_fail@plt+0x9078>
   1a298:	ldr	r5, [r4, #-4]!
   1a29c:	cmp	r5, #0
   1a2a0:	bne	1a2b0 <__assert_fail@plt+0x9084>
   1a2a4:	subs	ip, ip, #1
   1a2a8:	bne	1a298 <__assert_fail@plt+0x906c>
   1a2ac:	mov	r0, #1
   1a2b0:	sub	r7, r7, r0
   1a2b4:	and	ip, r1, #31
   1a2b8:	mvn	r0, #0
   1a2bc:	str	lr, [sp]
   1a2c0:	and	r0, r7, r0, lsl ip
   1a2c4:	mov	r1, r6
   1a2c8:	bl	13668 <__assert_fail@plt+0x243c>
   1a2cc:	add	sp, sp, #12
   1a2d0:	ldrd	r4, [sp]
   1a2d4:	ldrd	r6, [sp, #8]
   1a2d8:	add	sp, sp, #16
   1a2dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e0:	cmp	lr, #0
   1a2e4:	movne	r0, r1
   1a2e8:	mvneq	r0, #0
   1a2ec:	b	1a2cc <__assert_fail@plt+0x90a0>
   1a2f0:	mov	r0, lr
   1a2f4:	b	1a2b0 <__assert_fail@plt+0x9084>
   1a2f8:	cmp	r1, #1
   1a2fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a300:	strd	r6, [sp, #8]
   1a304:	strd	r8, [sp, #16]
   1a308:	strd	sl, [sp, #24]
   1a30c:	str	lr, [sp, #32]
   1a310:	sub	sp, sp, #20
   1a314:	ble	1a4dc <__assert_fail@plt+0x92b0>
   1a318:	cmp	r1, #62	; 0x3e
   1a31c:	mov	r6, r1
   1a320:	bgt	1a4f8 <__assert_fail@plt+0x92cc>
   1a324:	ldr	r4, [r0, #4]
   1a328:	cmp	r4, #0
   1a32c:	moveq	r5, #1
   1a330:	bne	1a354 <__assert_fail@plt+0x9128>
   1a334:	mov	r0, r5
   1a338:	add	sp, sp, #20
   1a33c:	ldrd	r4, [sp]
   1a340:	ldrd	r6, [sp, #8]
   1a344:	ldrd	r8, [sp, #16]
   1a348:	ldrd	sl, [sp, #24]
   1a34c:	add	sp, sp, #32
   1a350:	pop	{pc}		; (ldr pc, [sp], #4)
   1a354:	ldr	fp, [r0, #8]
   1a358:	cmp	r4, #0
   1a35c:	rsblt	r4, r4, #0
   1a360:	sub	r7, r4, #-1073741823	; 0xc0000001
   1a364:	sub	r5, r4, #1
   1a368:	lsl	r9, r7, #2
   1a36c:	ldr	r0, [fp, r7, lsl #2]
   1a370:	bl	13744 <__assert_fail@plt+0x2518>
   1a374:	sub	r3, r6, #2
   1a378:	add	r5, r0, r5, lsl #5
   1a37c:	cmp	r3, #30
   1a380:	ldrls	pc, [pc, r3, lsl #2]
   1a384:	b	1a44c <__assert_fail@plt+0x9220>
   1a388:	andeq	sl, r1, r4, lsr r3
   1a38c:	andeq	sl, r1, ip, asr #8
   1a390:	andeq	sl, r1, r0, asr #8
   1a394:	andeq	sl, r1, ip, asr #8
   1a398:	andeq	sl, r1, ip, asr #8
   1a39c:	andeq	sl, r1, ip, asr #8
   1a3a0:	andeq	sl, r1, r8, lsr #8
   1a3a4:	andeq	sl, r1, ip, asr #8
   1a3a8:	andeq	sl, r1, ip, asr #8
   1a3ac:	andeq	sl, r1, ip, asr #8
   1a3b0:	andeq	sl, r1, ip, asr #8
   1a3b4:	andeq	sl, r1, ip, asr #8
   1a3b8:	andeq	sl, r1, ip, asr #8
   1a3bc:	andeq	sl, r1, ip, asr #8
   1a3c0:	andeq	sl, r1, ip, lsl r4
   1a3c4:	andeq	sl, r1, ip, asr #8
   1a3c8:	andeq	sl, r1, ip, asr #8
   1a3cc:	andeq	sl, r1, ip, asr #8
   1a3d0:	andeq	sl, r1, ip, asr #8
   1a3d4:	andeq	sl, r1, ip, asr #8
   1a3d8:	andeq	sl, r1, ip, asr #8
   1a3dc:	andeq	sl, r1, ip, asr #8
   1a3e0:	andeq	sl, r1, ip, asr #8
   1a3e4:	andeq	sl, r1, ip, asr #8
   1a3e8:	andeq	sl, r1, ip, asr #8
   1a3ec:	andeq	sl, r1, ip, asr #8
   1a3f0:	andeq	sl, r1, ip, asr #8
   1a3f4:	andeq	sl, r1, ip, asr #8
   1a3f8:	andeq	sl, r1, ip, asr #8
   1a3fc:	andeq	sl, r1, ip, asr #8
   1a400:	andeq	sl, r1, r4, lsl #8
   1a404:	add	r5, r5, #4
   1a408:	movw	r3, #52429	; 0xcccd
   1a40c:	movt	r3, #52428	; 0xcccc
   1a410:	umull	r3, r5, r3, r5
   1a414:	lsr	r5, r5, #2
   1a418:	b	1a334 <__assert_fail@plt+0x9108>
   1a41c:	add	r5, r5, #3
   1a420:	lsr	r5, r5, #2
   1a424:	b	1a334 <__assert_fail@plt+0x9108>
   1a428:	add	r5, r5, #2
   1a42c:	movw	r3, #43691	; 0xaaab
   1a430:	movt	r3, #43690	; 0xaaaa
   1a434:	umull	r3, r5, r3, r5
   1a438:	lsr	r5, r5, #1
   1a43c:	b	1a334 <__assert_fail@plt+0x9108>
   1a440:	add	r5, r5, #1
   1a444:	lsr	r5, r5, #1
   1a448:	b	1a334 <__assert_fail@plt+0x9108>
   1a44c:	add	r9, r9, #4
   1a450:	movw	sl, #292	; 0x124
   1a454:	movt	sl, #4
   1a458:	mov	r0, r9
   1a45c:	ldr	r3, [sl, #4]
   1a460:	blx	r3
   1a464:	mov	r8, r0
   1a468:	sub	r2, r0, #4
   1a46c:	mov	r3, fp
   1a470:	add	r0, fp, r9
   1a474:	ldr	r1, [r3], #4
   1a478:	cmp	r3, r0
   1a47c:	str	r1, [r2, #4]!
   1a480:	bne	1a474 <__assert_fail@plt+0x9248>
   1a484:	mov	r1, r6
   1a488:	mov	r0, sp
   1a48c:	mov	r5, #0
   1a490:	bl	157c4 <__assert_fail@plt+0x4598>
   1a494:	b	1a49c <__assert_fail@plt+0x9270>
   1a498:	sub	r7, r4, #-1073741823	; 0xc0000001
   1a49c:	mov	r3, sp
   1a4a0:	mov	r2, r4
   1a4a4:	mov	r1, r8
   1a4a8:	mov	r0, r8
   1a4ac:	bl	14a08 <__assert_fail@plt+0x37dc>
   1a4b0:	ldr	r3, [r8, r7, lsl #2]
   1a4b4:	add	r5, r5, #1
   1a4b8:	cmp	r3, #0
   1a4bc:	subeq	r4, r4, #1
   1a4c0:	cmp	r4, #0
   1a4c4:	bne	1a498 <__assert_fail@plt+0x926c>
   1a4c8:	mov	r1, r9
   1a4cc:	mov	r0, r8
   1a4d0:	ldr	r3, [sl, #8]
   1a4d4:	blx	r3
   1a4d8:	b	1a334 <__assert_fail@plt+0x9108>
   1a4dc:	movw	r1, #59468	; 0xe84c
   1a4e0:	movt	r1, #2
   1a4e4:	ldr	r3, [pc, #40]	; 1a514 <__assert_fail@plt+0x92e8>
   1a4e8:	movw	r0, #60288	; 0xeb80
   1a4ec:	movt	r0, #2
   1a4f0:	movw	r2, #4191	; 0x105f
   1a4f4:	bl	1122c <__assert_fail@plt>
   1a4f8:	movw	r1, #59468	; 0xe84c
   1a4fc:	movt	r1, #2
   1a500:	ldr	r3, [pc, #12]	; 1a514 <__assert_fail@plt+0x92e8>
   1a504:	movw	r0, #60300	; 0xeb8c
   1a508:	movt	r0, #2
   1a50c:	movw	r2, #4192	; 0x1060
   1a510:	bl	1122c <__assert_fail@plt>
   1a514:	andeq	lr, r2, r8, ror r7
   1a518:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a51c:	strd	r6, [sp, #8]
   1a520:	mov	r6, r3
   1a524:	ldr	r7, [r2, #4]
   1a528:	strd	r8, [sp, #16]
   1a52c:	strd	sl, [sp, #24]
   1a530:	str	lr, [sp, #32]
   1a534:	sub	sp, sp, #52	; 0x34
   1a538:	lsr	r3, r7, #31
   1a53c:	bics	r3, r3, r6
   1a540:	bne	1a864 <__assert_fail@plt+0x9638>
   1a544:	cmp	r6, #0
   1a548:	beq	1a870 <__assert_fail@plt+0x9644>
   1a54c:	eor	r3, r7, r7, asr #31
   1a550:	mov	r5, r2
   1a554:	mov	r9, r0
   1a558:	mov	sl, r1
   1a55c:	sub	r3, r3, r7, asr #31
   1a560:	cmp	r3, #1
   1a564:	ble	1a764 <__assert_fail@plt+0x9538>
   1a568:	ldr	r8, [pc, #780]	; 1a87c <__assert_fail@plt+0x9650>
   1a56c:	mov	r4, #0
   1a570:	mov	r1, #2
   1a574:	mov	r0, r5
   1a578:	str	r4, [sp, #12]
   1a57c:	str	r4, [sp, #16]
   1a580:	str	r8, [sp, #20]
   1a584:	str	r4, [sp, #24]
   1a588:	str	r4, [sp, #28]
   1a58c:	str	r8, [sp, #32]
   1a590:	bl	1a2f8 <__assert_fail@plt+0x90cc>
   1a594:	sub	r1, r0, #1
   1a598:	add	r0, sp, #12
   1a59c:	udiv	r1, r1, r6
   1a5a0:	add	r1, r1, #1
   1a5a4:	bl	18700 <__assert_fail@plt+0x74d4>
   1a5a8:	cmp	r6, #2
   1a5ac:	beq	1a794 <__assert_fail@plt+0x9568>
   1a5b0:	cmp	r7, #0
   1a5b4:	str	r4, [sp, #36]	; 0x24
   1a5b8:	str	r4, [sp, #40]	; 0x28
   1a5bc:	str	r8, [sp, #44]	; 0x2c
   1a5c0:	blt	1a84c <__assert_fail@plt+0x9620>
   1a5c4:	ldr	r3, [sp, #16]
   1a5c8:	sub	r8, r6, #1
   1a5cc:	add	r4, sp, #24
   1a5d0:	mov	r7, #2
   1a5d4:	b	1a5dc <__assert_fail@plt+0x93b0>
   1a5d8:	ldr	r3, [sp, #16]
   1a5dc:	mov	r2, r8
   1a5e0:	mov	r1, r4
   1a5e4:	ldr	ip, [sp, #12]
   1a5e8:	add	r0, sp, #12
   1a5ec:	ldr	lr, [sp, #28]
   1a5f0:	ldr	fp, [sp, #20]
   1a5f4:	str	lr, [sp, #16]
   1a5f8:	str	r3, [sp, #28]
   1a5fc:	ldr	r3, [sp, #24]
   1a600:	ldr	lr, [sp, #32]
   1a604:	str	r3, [sp, #12]
   1a608:	str	ip, [sp, #24]
   1a60c:	str	lr, [sp, #20]
   1a610:	str	fp, [sp, #32]
   1a614:	bl	18354 <__assert_fail@plt+0x7128>
   1a618:	add	r3, sp, #12
   1a61c:	mov	r2, r5
   1a620:	str	r7, [sp]
   1a624:	mov	r0, r3
   1a628:	mov	r1, #0
   1a62c:	bl	16bb0 <__assert_fail@plt+0x5984>
   1a630:	mov	r2, r8
   1a634:	mov	r1, r4
   1a638:	add	r0, sp, #36	; 0x24
   1a63c:	bl	17304 <__assert_fail@plt+0x60d8>
   1a640:	add	r1, sp, #12
   1a644:	add	r2, sp, #36	; 0x24
   1a648:	mov	r0, r1
   1a64c:	bl	16778 <__assert_fail@plt+0x554c>
   1a650:	add	r2, sp, #12
   1a654:	mov	r3, r6
   1a658:	str	r7, [sp]
   1a65c:	mov	r1, #0
   1a660:	mov	r0, r2
   1a664:	bl	170a4 <__assert_fail@plt+0x5e78>
   1a668:	mov	r1, r4
   1a66c:	add	r0, sp, #12
   1a670:	bl	16670 <__assert_fail@plt+0x5444>
   1a674:	cmp	r0, #0
   1a678:	blt	1a5d8 <__assert_fail@plt+0x93ac>
   1a67c:	ldr	r1, [sp, #36]	; 0x24
   1a680:	cmp	r1, #0
   1a684:	beq	1a6a0 <__assert_fail@plt+0x9474>
   1a688:	movw	r3, #292	; 0x124
   1a68c:	movt	r3, #4
   1a690:	lsl	r1, r1, #2
   1a694:	ldr	r3, [r3, #8]
   1a698:	ldr	r0, [sp, #44]	; 0x2c
   1a69c:	blx	r3
   1a6a0:	cmp	sl, #0
   1a6a4:	beq	1a6c8 <__assert_fail@plt+0x949c>
   1a6a8:	mov	r2, r6
   1a6ac:	mov	r1, r4
   1a6b0:	add	r0, sp, #12
   1a6b4:	bl	18354 <__assert_fail@plt+0x7128>
   1a6b8:	add	r2, sp, #12
   1a6bc:	mov	r1, r5
   1a6c0:	mov	r0, sl
   1a6c4:	bl	16b50 <__assert_fail@plt+0x5924>
   1a6c8:	ldr	r3, [sp, #24]
   1a6cc:	cmp	r9, #0
   1a6d0:	moveq	r1, r3
   1a6d4:	beq	1a704 <__assert_fail@plt+0x94d8>
   1a6d8:	ldr	r1, [sp, #28]
   1a6dc:	ldr	r0, [r9, #4]
   1a6e0:	ldr	r2, [sp, #32]
   1a6e4:	str	r1, [r9, #4]
   1a6e8:	ldr	r1, [r9]
   1a6ec:	str	r3, [r9]
   1a6f0:	ldr	r3, [r9, #8]
   1a6f4:	str	r2, [r9, #8]
   1a6f8:	str	r1, [sp, #24]
   1a6fc:	str	r0, [sp, #28]
   1a700:	str	r3, [sp, #32]
   1a704:	cmp	r1, #0
   1a708:	beq	1a724 <__assert_fail@plt+0x94f8>
   1a70c:	movw	r3, #292	; 0x124
   1a710:	movt	r3, #4
   1a714:	lsl	r1, r1, #2
   1a718:	ldr	r3, [r3, #8]
   1a71c:	ldr	r0, [sp, #32]
   1a720:	blx	r3
   1a724:	ldr	r1, [sp, #12]
   1a728:	cmp	r1, #0
   1a72c:	beq	1a748 <__assert_fail@plt+0x951c>
   1a730:	movw	r3, #292	; 0x124
   1a734:	movt	r3, #4
   1a738:	lsl	r1, r1, #2
   1a73c:	ldr	r3, [r3, #8]
   1a740:	ldr	r0, [sp, #20]
   1a744:	blx	r3
   1a748:	add	sp, sp, #52	; 0x34
   1a74c:	ldrd	r4, [sp]
   1a750:	ldrd	r6, [sp, #8]
   1a754:	ldrd	r8, [sp, #16]
   1a758:	ldrd	sl, [sp, #24]
   1a75c:	add	sp, sp, #32
   1a760:	pop	{pc}		; (ldr pc, [sp], #4)
   1a764:	cmp	r7, #0
   1a768:	bne	1a824 <__assert_fail@plt+0x95f8>
   1a76c:	cmp	r9, #0
   1a770:	beq	1a780 <__assert_fail@plt+0x9554>
   1a774:	mov	r1, r5
   1a778:	mov	r0, r9
   1a77c:	bl	15dbc <__assert_fail@plt+0x4b90>
   1a780:	cmp	sl, #0
   1a784:	beq	1a748 <__assert_fail@plt+0x951c>
   1a788:	mov	r3, #0
   1a78c:	str	r3, [sl, #4]
   1a790:	b	1a748 <__assert_fail@plt+0x951c>
   1a794:	add	r4, sp, #24
   1a798:	mov	r7, r6
   1a79c:	ldr	fp, [sp, #12]
   1a7a0:	mov	r3, r4
   1a7a4:	mov	r2, r5
   1a7a8:	mov	r1, #0
   1a7ac:	add	r0, sp, #12
   1a7b0:	str	r7, [sp]
   1a7b4:	ldr	lr, [sp, #16]
   1a7b8:	ldr	ip, [sp, #28]
   1a7bc:	ldr	r8, [sp, #20]
   1a7c0:	str	ip, [sp, #16]
   1a7c4:	str	lr, [sp, #28]
   1a7c8:	ldr	lr, [sp, #24]
   1a7cc:	ldr	ip, [sp, #32]
   1a7d0:	str	lr, [sp, #12]
   1a7d4:	str	fp, [sp, #24]
   1a7d8:	str	ip, [sp, #20]
   1a7dc:	str	r8, [sp, #32]
   1a7e0:	bl	16bb0 <__assert_fail@plt+0x5984>
   1a7e4:	add	r1, sp, #12
   1a7e8:	mov	r2, r4
   1a7ec:	mov	r0, r1
   1a7f0:	bl	16778 <__assert_fail@plt+0x554c>
   1a7f4:	mov	r3, #1
   1a7f8:	add	r2, sp, #20
   1a7fc:	str	r7, [sp]
   1a800:	add	r0, sp, #12
   1a804:	ldr	r1, [sp, #16]
   1a808:	bl	168f0 <__assert_fail@plt+0x56c4>
   1a80c:	mov	r1, r4
   1a810:	add	r0, sp, #12
   1a814:	bl	16670 <__assert_fail@plt+0x5444>
   1a818:	cmp	r0, #0
   1a81c:	blt	1a79c <__assert_fail@plt+0x9570>
   1a820:	b	1a6a0 <__assert_fail@plt+0x9474>
   1a824:	ldr	r3, [r2, #8]
   1a828:	ldr	r2, [r3]
   1a82c:	clz	r3, r2
   1a830:	lsr	r3, r3, #5
   1a834:	cmp	r2, #1
   1a838:	rsbls	r3, r3, #0
   1a83c:	rsbhi	r3, r3, #1
   1a840:	cmp	r3, #1
   1a844:	beq	1a568 <__assert_fail@plt+0x933c>
   1a848:	b	1a76c <__assert_fail@plt+0x9540>
   1a84c:	add	r1, sp, #12
   1a850:	mov	r0, r1
   1a854:	bl	15dbc <__assert_fail@plt+0x4b90>
   1a858:	ldr	r3, [sp, #16]
   1a85c:	rsb	r3, r3, #0
   1a860:	b	1a5c8 <__assert_fail@plt+0x939c>
   1a864:	movw	r0, #60312	; 0xeb98
   1a868:	movt	r0, #2
   1a86c:	bl	13400 <__assert_fail@plt+0x21d4>
   1a870:	movw	r0, #60360	; 0xebc8
   1a874:	movt	r0, #2
   1a878:	bl	13400 <__assert_fail@plt+0x21d4>
   1a87c:	andeq	lr, r2, ip, asr #13
   1a880:	str	r4, [sp, #-8]!
   1a884:	mov	ip, #0
   1a888:	mov	r3, r2
   1a88c:	str	lr, [sp, #4]
   1a890:	sub	sp, sp, #16
   1a894:	mov	r2, r1
   1a898:	ldr	lr, [pc, #80]	; 1a8f0 <__assert_fail@plt+0x96c4>
   1a89c:	add	r1, sp, #4
   1a8a0:	str	ip, [sp, #4]
   1a8a4:	str	ip, [sp, #8]
   1a8a8:	str	lr, [sp, #12]
   1a8ac:	bl	1a518 <__assert_fail@plt+0x92ec>
   1a8b0:	ldmib	sp, {r1, r4}
   1a8b4:	clz	r4, r4
   1a8b8:	cmp	r1, #0
   1a8bc:	lsr	r4, r4, #5
   1a8c0:	beq	1a8dc <__assert_fail@plt+0x96b0>
   1a8c4:	movw	r3, #292	; 0x124
   1a8c8:	movt	r3, #4
   1a8cc:	lsl	r1, r1, #2
   1a8d0:	ldr	r3, [r3, #8]
   1a8d4:	ldr	r0, [sp, #12]
   1a8d8:	blx	r3
   1a8dc:	mov	r0, r4
   1a8e0:	add	sp, sp, #16
   1a8e4:	ldr	r4, [sp]
   1a8e8:	add	sp, sp, #4
   1a8ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8f0:	andeq	lr, r2, ip, asr #13
   1a8f4:	ldr	r3, [r0, #4]
   1a8f8:	cmp	r3, #0
   1a8fc:	bgt	1a90c <__assert_fail@plt+0x96e0>
   1a900:	moveq	r0, #1
   1a904:	movne	r0, #0
   1a908:	bx	lr
   1a90c:	mov	r1, r0
   1a910:	mov	r2, #2
   1a914:	mov	r0, #0
   1a918:	b	1a880 <__assert_fail@plt+0x9654>
   1a91c:	cmp	r1, #0
   1a920:	push	{lr}		; (str lr, [sp, #-4]!)
   1a924:	sub	sp, sp, #20
   1a928:	ble	1a968 <__assert_fail@plt+0x973c>
   1a92c:	sub	r2, r1, #-1073741823	; 0xc0000001
   1a930:	mov	r3, r0
   1a934:	ldr	r2, [r0, r2, lsl #2]
   1a938:	cmp	r2, #0
   1a93c:	beq	1a984 <__assert_fail@plt+0x9758>
   1a940:	mov	ip, #0
   1a944:	mov	r2, #2
   1a948:	mov	r0, ip
   1a94c:	str	ip, [sp, #4]
   1a950:	str	r1, [sp, #8]
   1a954:	add	r1, sp, #4
   1a958:	str	r3, [sp, #12]
   1a95c:	bl	1a880 <__assert_fail@plt+0x9654>
   1a960:	add	sp, sp, #20
   1a964:	pop	{pc}		; (ldr pc, [sp], #4)
   1a968:	movw	r1, #59468	; 0xe84c
   1a96c:	movt	r1, #2
   1a970:	ldr	r3, [pc, #40]	; 1a9a0 <__assert_fail@plt+0x9774>
   1a974:	movw	r0, #59632	; 0xe8f0
   1a978:	movt	r0, #2
   1a97c:	movw	r2, #3302	; 0xce6
   1a980:	bl	1122c <__assert_fail@plt>
   1a984:	movw	r1, #59468	; 0xe84c
   1a988:	movt	r1, #2
   1a98c:	ldr	r3, [pc, #12]	; 1a9a0 <__assert_fail@plt+0x9774>
   1a990:	movw	r0, #60388	; 0xebe4
   1a994:	movt	r0, #2
   1a998:	movw	r2, #3303	; 0xce7
   1a99c:	bl	1122c <__assert_fail@plt>
   1a9a0:	andeq	lr, r2, r8, lsl #15
   1a9a4:	mov	r3, #2
   1a9a8:	b	1a518 <__assert_fail@plt+0x92ec>
   1a9ac:	mov	r2, r1
   1a9b0:	mov	r3, #2
   1a9b4:	mov	r1, #0
   1a9b8:	b	1a518 <__assert_fail@plt+0x92ec>
   1a9bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a9c0:	strd	r6, [sp, #8]
   1a9c4:	subs	r6, r3, #0
   1a9c8:	str	lr, [sp, #16]
   1a9cc:	sub	sp, sp, #44	; 0x2c
   1a9d0:	ble	1ab2c <__assert_fail@plt+0x9900>
   1a9d4:	sub	r3, r6, #-1073741823	; 0xc0000001
   1a9d8:	mov	lr, r2
   1a9dc:	ldr	r3, [r2, r3, lsl #2]
   1a9e0:	cmp	r3, #0
   1a9e4:	beq	1ab10 <__assert_fail@plt+0x98e4>
   1a9e8:	ldr	r7, [pc, #344]	; 1ab48 <__assert_fail@plt+0x991c>
   1a9ec:	mov	ip, #0
   1a9f0:	mov	r4, r0
   1a9f4:	mov	r5, r1
   1a9f8:	add	r0, sp, #4
   1a9fc:	mov	r3, #2
   1aa00:	add	r2, sp, #28
   1aa04:	str	ip, [sp, #4]
   1aa08:	add	r1, sp, #16
   1aa0c:	str	ip, [sp, #8]
   1aa10:	str	r7, [sp, #12]
   1aa14:	str	ip, [sp, #16]
   1aa18:	str	ip, [sp, #20]
   1aa1c:	str	r7, [sp, #24]
   1aa20:	str	ip, [sp, #28]
   1aa24:	str	r6, [sp, #32]
   1aa28:	add	r6, r6, #1
   1aa2c:	str	lr, [sp, #36]	; 0x24
   1aa30:	bl	1a518 <__assert_fail@plt+0x92ec>
   1aa34:	ldr	r0, [sp, #8]
   1aa38:	cmp	r0, r6, asr #1
   1aa3c:	bne	1aaf4 <__assert_fail@plt+0x98c8>
   1aa40:	ldr	r1, [sp, #12]
   1aa44:	lsl	r0, r0, #2
   1aa48:	add	r3, r4, r0
   1aa4c:	add	r0, r1, r0
   1aa50:	ldr	r2, [r0, #-4]!
   1aa54:	cmp	r0, r1
   1aa58:	str	r2, [r3, #-4]!
   1aa5c:	bne	1aa50 <__assert_fail@plt+0x9824>
   1aa60:	ldr	r1, [sp, #4]
   1aa64:	cmp	r1, #0
   1aa68:	bne	1aadc <__assert_fail@plt+0x98b0>
   1aa6c:	cmp	r5, #0
   1aa70:	ldr	r4, [sp, #20]
   1aa74:	beq	1aaa0 <__assert_fail@plt+0x9874>
   1aa78:	cmp	r4, #0
   1aa7c:	ldr	r0, [sp, #24]
   1aa80:	ble	1aaa0 <__assert_fail@plt+0x9874>
   1aa84:	lsl	r3, r4, #2
   1aa88:	add	r1, r5, r3
   1aa8c:	add	r3, r0, r3
   1aa90:	ldr	r2, [r3, #-4]!
   1aa94:	cmp	r3, r0
   1aa98:	str	r2, [r1, #-4]!
   1aa9c:	bne	1aa90 <__assert_fail@plt+0x9864>
   1aaa0:	ldr	r1, [sp, #16]
   1aaa4:	cmp	r1, #0
   1aaa8:	beq	1aac4 <__assert_fail@plt+0x9898>
   1aaac:	movw	r3, #292	; 0x124
   1aab0:	movt	r3, #4
   1aab4:	lsl	r1, r1, #2
   1aab8:	ldr	r3, [r3, #8]
   1aabc:	ldr	r0, [sp, #24]
   1aac0:	blx	r3
   1aac4:	mov	r0, r4
   1aac8:	add	sp, sp, #44	; 0x2c
   1aacc:	ldrd	r4, [sp]
   1aad0:	ldrd	r6, [sp, #8]
   1aad4:	add	sp, sp, #16
   1aad8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aadc:	movw	r3, #292	; 0x124
   1aae0:	movt	r3, #4
   1aae4:	lsl	r1, r1, #2
   1aae8:	ldr	r3, [r3, #8]
   1aaec:	blx	r3
   1aaf0:	b	1aa6c <__assert_fail@plt+0x9840>
   1aaf4:	movw	r1, #59468	; 0xe84c
   1aaf8:	movt	r1, #2
   1aafc:	movw	r0, #60404	; 0xebf4
   1ab00:	movt	r0, #2
   1ab04:	add	r3, r7, #212	; 0xd4
   1ab08:	movw	r2, #3320	; 0xcf8
   1ab0c:	bl	1122c <__assert_fail@plt>
   1ab10:	movw	r1, #59468	; 0xe84c
   1ab14:	movt	r1, #2
   1ab18:	ldr	r3, [pc, #44]	; 1ab4c <__assert_fail@plt+0x9920>
   1ab1c:	movw	r0, #60388	; 0xebe4
   1ab20:	movt	r0, #2
   1ab24:	movw	r2, #3314	; 0xcf2
   1ab28:	bl	1122c <__assert_fail@plt>
   1ab2c:	movw	r1, #59468	; 0xe84c
   1ab30:	movt	r1, #2
   1ab34:	ldr	r3, [pc, #16]	; 1ab4c <__assert_fail@plt+0x9920>
   1ab38:	movw	r0, #59632	; 0xe8f0
   1ab3c:	movt	r0, #2
   1ab40:	movw	r2, #3313	; 0xcf1
   1ab44:	bl	1122c <__assert_fail@plt>
   1ab48:	andeq	lr, r2, ip, asr #13
   1ab4c:	andeq	lr, r2, r0, lsr #15
   1ab50:	ldr	r3, [r0, #4]
   1ab54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ab58:	ldr	r2, [r0, #8]
   1ab5c:	ldr	r2, [r2]
   1ab60:	strd	r6, [sp, #8]
   1ab64:	str	lr, [sp, #32]
   1ab68:	eor	lr, r3, r3, asr #31
   1ab6c:	strd	r8, [sp, #16]
   1ab70:	sub	lr, lr, r3, asr #31
   1ab74:	strd	sl, [sp, #24]
   1ab78:	sub	sp, sp, #92	; 0x5c
   1ab7c:	cmp	r3, #0
   1ab80:	moveq	ip, #0
   1ab84:	andne	ip, r2, #1
   1ab88:	cmp	ip, #0
   1ab8c:	beq	1ad58 <__assert_fail@plt+0x9b2c>
   1ab90:	cmp	lr, #1
   1ab94:	beq	1ad20 <__assert_fail@plt+0x9af4>
   1ab98:	mov	r5, r0
   1ab9c:	movw	r2, #55191	; 0xd797
   1aba0:	movt	r2, #49359	; 0xc0cf
   1aba4:	mov	r0, #0
   1aba8:	str	r1, [sp, #8]
   1abac:	mov	r1, r5
   1abb0:	bl	18104 <__assert_fail@plt+0x6ed8>
   1abb4:	cmp	r0, #1
   1abb8:	beq	1abe0 <__assert_fail@plt+0x99b4>
   1abbc:	mov	r6, #0
   1abc0:	mov	r0, r6
   1abc4:	add	sp, sp, #92	; 0x5c
   1abc8:	ldrd	r4, [sp]
   1abcc:	ldrd	r6, [sp, #8]
   1abd0:	ldrd	r8, [sp, #16]
   1abd4:	ldrd	sl, [sp, #24]
   1abd8:	add	sp, sp, #32
   1abdc:	pop	{pc}		; (ldr pc, [sp], #4)
   1abe0:	ldr	r3, [r5, #4]
   1abe4:	eor	r2, r3, r3, asr #31
   1abe8:	sub	r2, r2, r3, asr #31
   1abec:	cmp	r2, #1
   1abf0:	ble	1ad90 <__assert_fail@plt+0x9b64>
   1abf4:	ldr	r8, [pc, #1896]	; 1b364 <__assert_fail@plt+0xa138>
   1abf8:	mov	r4, #0
   1abfc:	add	r0, sp, #16
   1ac00:	mov	r1, r5
   1ac04:	mov	r9, #2
   1ac08:	str	r4, [sp, #16]
   1ac0c:	str	r4, [sp, #20]
   1ac10:	str	r8, [sp, #24]
   1ac14:	str	r4, [sp, #28]
   1ac18:	str	r4, [sp, #32]
   1ac1c:	str	r8, [sp, #36]	; 0x24
   1ac20:	bl	15dbc <__assert_fail@plt+0x4b90>
   1ac24:	ldr	r6, [sp, #20]
   1ac28:	mov	r3, r4
   1ac2c:	mov	r1, r4
   1ac30:	ldr	ip, [sp, #24]
   1ac34:	cmp	r6, #0
   1ac38:	rsblt	r6, r6, #0
   1ac3c:	ldr	r0, [ip]
   1ac40:	mov	r2, ip
   1ac44:	str	r6, [sp, #20]
   1ac48:	sub	r0, r0, #1
   1ac4c:	str	r0, [ip]
   1ac50:	str	r4, [sp]
   1ac54:	bl	13668 <__assert_fail@plt+0x243c>
   1ac58:	mov	r3, r0
   1ac5c:	add	r2, sp, #24
   1ac60:	str	r9, [sp]
   1ac64:	mov	r7, r0
   1ac68:	mov	r1, r6
   1ac6c:	add	r0, sp, #28
   1ac70:	bl	168f0 <__assert_fail@plt+0x56c4>
   1ac74:	mov	r1, r9
   1ac78:	add	r0, sp, #40	; 0x28
   1ac7c:	str	r4, [sp, #40]	; 0x28
   1ac80:	str	r4, [sp, #44]	; 0x2c
   1ac84:	str	r8, [sp, #48]	; 0x30
   1ac88:	bl	13ad8 <__assert_fail@plt+0x28ac>
   1ac8c:	add	r3, sp, #28
   1ac90:	add	r2, sp, #40	; 0x28
   1ac94:	str	r7, [sp]
   1ac98:	add	r1, sp, #16
   1ac9c:	mov	r0, r5
   1aca0:	bl	194fc <__assert_fail@plt+0x82d0>
   1aca4:	cmp	r0, r4
   1aca8:	bne	1adc8 <__assert_fail@plt+0x9b9c>
   1acac:	mov	r6, #0
   1acb0:	ldr	r1, [sp, #16]
   1acb4:	cmp	r1, #0
   1acb8:	beq	1acd4 <__assert_fail@plt+0x9aa8>
   1acbc:	movw	r3, #292	; 0x124
   1acc0:	movt	r3, #4
   1acc4:	lsl	r1, r1, #2
   1acc8:	ldr	r3, [r3, #8]
   1accc:	ldr	r0, [sp, #24]
   1acd0:	blx	r3
   1acd4:	ldr	r1, [sp, #28]
   1acd8:	cmp	r1, #0
   1acdc:	beq	1acf8 <__assert_fail@plt+0x9acc>
   1ace0:	movw	r3, #292	; 0x124
   1ace4:	movt	r3, #4
   1ace8:	lsl	r1, r1, #2
   1acec:	ldr	r3, [r3, #8]
   1acf0:	ldr	r0, [sp, #36]	; 0x24
   1acf4:	blx	r3
   1acf8:	ldr	r1, [sp, #40]	; 0x28
   1acfc:	cmp	r1, #0
   1ad00:	beq	1abc0 <__assert_fail@plt+0x9994>
   1ad04:	movw	r3, #292	; 0x124
   1ad08:	movt	r3, #4
   1ad0c:	lsl	r1, r1, #2
   1ad10:	ldr	r3, [r3, #8]
   1ad14:	ldr	r0, [sp, #48]	; 0x30
   1ad18:	blx	r3
   1ad1c:	b	1abc0 <__assert_fail@plt+0x9994>
   1ad20:	cmp	r2, #63	; 0x3f
   1ad24:	movhi	r3, #0
   1ad28:	movls	r3, #1
   1ad2c:	cmp	r2, #64	; 0x40
   1ad30:	rsbls	r3, r3, #0
   1ad34:	rsbhi	r3, r3, #1
   1ad38:	cmn	r3, #1
   1ad3c:	bne	1ab98 <__assert_fail@plt+0x996c>
   1ad40:	lsr	r2, r2, #1
   1ad44:	movw	r6, #38620	; 0x96dc
   1ad48:	movt	r6, #51561	; 0xc969
   1ad4c:	lsr	r2, r6, r2
   1ad50:	and	r6, r2, #2
   1ad54:	b	1abc0 <__assert_fail@plt+0x9994>
   1ad58:	cmp	lr, #1
   1ad5c:	bgt	1abbc <__assert_fail@plt+0x9990>
   1ad60:	cmp	r3, #0
   1ad64:	beq	1abbc <__assert_fail@plt+0x9990>
   1ad68:	cmp	r2, #2
   1ad6c:	movls	r3, #0
   1ad70:	movhi	r3, #1
   1ad74:	cmp	r2, #1
   1ad78:	movhi	r2, #0
   1ad7c:	movls	r2, #1
   1ad80:	cmp	r3, r2
   1ad84:	bne	1abbc <__assert_fail@plt+0x9990>
   1ad88:	mov	r6, #2
   1ad8c:	b	1abc0 <__assert_fail@plt+0x9994>
   1ad90:	cmp	r3, #0
   1ad94:	beq	1ad88 <__assert_fail@plt+0x9b5c>
   1ad98:	ldr	r3, [r5, #8]
   1ad9c:	movw	r1, #961	; 0x3c1
   1ada0:	ldr	r2, [r3]
   1ada4:	cmp	r2, #960	; 0x3c0
   1ada8:	movhi	r3, #0
   1adac:	movls	r3, #1
   1adb0:	cmp	r2, r1
   1adb4:	rsbls	r3, r3, #0
   1adb8:	rsbhi	r3, r3, #1
   1adbc:	cmn	r3, #1
   1adc0:	bne	1abf4 <__assert_fail@plt+0x99c8>
   1adc4:	b	1ad88 <__assert_fail@plt+0x9b5c>
   1adc8:	ldr	fp, [r5, #4]
   1adcc:	ldr	r3, [r5, #8]
   1add0:	ldr	sl, [r3]
   1add4:	str	r4, [sp, #64]	; 0x40
   1add8:	str	r3, [sp, #72]	; 0x48
   1addc:	eor	r3, fp, fp, asr #31
   1ade0:	sub	r3, r3, fp, asr #31
   1ade4:	cmp	fp, r4
   1ade8:	moveq	fp, #0
   1adec:	andne	fp, sl, #1
   1adf0:	cmp	fp, r4
   1adf4:	str	r3, [sp, #68]	; 0x44
   1adf8:	beq	1b348 <__assert_fail@plt+0xa11c>
   1adfc:	mov	r2, r9
   1ae00:	add	r1, sp, #64	; 0x40
   1ae04:	add	r0, sp, #40	; 0x28
   1ae08:	bl	1a880 <__assert_fail@plt+0x9654>
   1ae0c:	subs	r4, r0, #0
   1ae10:	bne	1acac <__assert_fail@plt+0x9a80>
   1ae14:	ldr	r3, [sp, #44]	; 0x2c
   1ae18:	cmp	r3, #1
   1ae1c:	mvnne	r9, #0
   1ae20:	beq	1b158 <__assert_fail@plt+0x9f2c>
   1ae24:	mov	r6, #3
   1ae28:	mov	sl, #2
   1ae2c:	mov	r1, #0
   1ae30:	add	r6, r6, #2
   1ae34:	str	sl, [sp]
   1ae38:	mov	r3, r6
   1ae3c:	mov	r0, r1
   1ae40:	add	r2, sp, #64	; 0x40
   1ae44:	bl	170a4 <__assert_fail@plt+0x5e78>
   1ae48:	cmp	r0, #0
   1ae4c:	beq	1acac <__assert_fail@plt+0x9a80>
   1ae50:	rsb	r3, r0, #0
   1ae54:	lsr	r2, r6, #1
   1ae58:	and	r3, r3, r0
   1ae5c:	ands	lr, r3, #-16777216	; 0xff000000
   1ae60:	bne	1b150 <__assert_fail@plt+0x9f24>
   1ae64:	lsl	r3, r3, #8
   1ae68:	add	lr, lr, #8
   1ae6c:	tst	r3, #-16777216	; 0xff000000
   1ae70:	beq	1ae64 <__assert_fail@plt+0x9c38>
   1ae74:	cmp	r3, #0
   1ae78:	blt	1ae88 <__assert_fail@plt+0x9c5c>
   1ae7c:	lsls	r3, r3, #1
   1ae80:	add	lr, lr, #1
   1ae84:	bpl	1ae7c <__assert_fail@plt+0x9c50>
   1ae88:	lsr	r0, r0, #1
   1ae8c:	rsb	lr, lr, #31
   1ae90:	mov	r1, #0
   1ae94:	lsr	ip, r2, #1
   1ae98:	lsr	r3, r0, lr
   1ae9c:	eor	r0, ip, r2
   1aea0:	and	lr, lr, r0
   1aea4:	cmp	r3, r2
   1aea8:	eor	r1, r1, lr
   1aeac:	bcs	1af08 <__assert_fail@plt+0x9cdc>
   1aeb0:	cmp	r3, #0
   1aeb4:	beq	1af34 <__assert_fail@plt+0x9d08>
   1aeb8:	and	ip, r3, r2
   1aebc:	sub	r0, r2, r3
   1aec0:	eor	r1, r1, ip
   1aec4:	lsr	ip, r3, #1
   1aec8:	mov	r2, r3
   1aecc:	rsb	r3, r0, #0
   1aed0:	and	r3, r3, r0
   1aed4:	ands	lr, r3, #-16777216	; 0xff000000
   1aed8:	bne	1af2c <__assert_fail@plt+0x9d00>
   1aedc:	lsl	r3, r3, #8
   1aee0:	add	lr, lr, #8
   1aee4:	tst	r3, #-16777216	; 0xff000000
   1aee8:	beq	1aedc <__assert_fail@plt+0x9cb0>
   1aeec:	cmp	r3, #0
   1aef0:	blt	1af00 <__assert_fail@plt+0x9cd4>
   1aef4:	lsls	r3, r3, #1
   1aef8:	add	lr, lr, #1
   1aefc:	bpl	1aef4 <__assert_fail@plt+0x9cc8>
   1af00:	rsb	lr, lr, #32
   1af04:	b	1ae98 <__assert_fail@plt+0x9c6c>
   1af08:	subs	r0, r3, r2
   1af0c:	bne	1aecc <__assert_fail@plt+0x9ca0>
   1af10:	movw	r1, #59468	; 0xe84c
   1af14:	movt	r1, #2
   1af18:	ldr	r3, [pc, #1096]	; 1b368 <__assert_fail@plt+0xa13c>
   1af1c:	movw	r0, #60444	; 0xec1c
   1af20:	movt	r0, #2
   1af24:	movw	r2, #3410	; 0xd52
   1af28:	bl	1122c <__assert_fail@plt>
   1af2c:	mov	lr, #0
   1af30:	b	1aeec <__assert_fail@plt+0x9cc0>
   1af34:	tst	r1, #1
   1af38:	beq	1b144 <__assert_fail@plt+0x9f18>
   1af3c:	ldr	fp, [sp, #68]	; 0x44
   1af40:	mvn	r0, #0
   1af44:	mov	r1, r3
   1af48:	ldr	r2, [sp, #72]	; 0x48
   1af4c:	ldr	sl, [r2]
   1af50:	str	r0, [sp]
   1af54:	str	r3, [sp, #52]	; 0x34
   1af58:	str	r3, [sp, #56]	; 0x38
   1af5c:	mov	r3, fp
   1af60:	str	r8, [sp, #60]	; 0x3c
   1af64:	mvn	r0, sl
   1af68:	bl	13668 <__assert_fail@plt+0x243c>
   1af6c:	tst	r6, #2
   1af70:	lsr	r6, r6, #2
   1af74:	mov	r9, r0
   1af78:	addne	r6, r6, #1
   1af7c:	rsbeq	r6, r6, #0
   1af80:	cmp	r9, #0
   1af84:	beq	1b324 <__assert_fail@plt+0xa0f8>
   1af88:	cmp	fp, #0
   1af8c:	blt	1b2c8 <__assert_fail@plt+0xa09c>
   1af90:	cmp	fp, #1
   1af94:	ble	1b2c0 <__assert_fail@plt+0xa094>
   1af98:	cmp	fp, #0
   1af9c:	moveq	fp, #0
   1afa0:	andne	fp, sl, #1
   1afa4:	cmp	fp, #0
   1afa8:	beq	1b308 <__assert_fail@plt+0xa0dc>
   1afac:	mov	r3, #0
   1afb0:	add	r0, sp, #76	; 0x4c
   1afb4:	mov	r1, #1
   1afb8:	str	r3, [sp, #76]	; 0x4c
   1afbc:	str	r3, [sp, #80]	; 0x50
   1afc0:	str	r8, [sp, #84]	; 0x54
   1afc4:	bl	13ad8 <__assert_fail@plt+0x28ac>
   1afc8:	add	r0, sp, #52	; 0x34
   1afcc:	mov	r1, #1
   1afd0:	bl	13ad8 <__assert_fail@plt+0x28ac>
   1afd4:	mov	r1, r6
   1afd8:	add	r0, sp, #40	; 0x28
   1afdc:	bl	15d4c <__assert_fail@plt+0x4b20>
   1afe0:	mov	r1, #2
   1afe4:	add	r0, sp, #64	; 0x40
   1afe8:	bl	1a2f8 <__assert_fail@plt+0x90cc>
   1afec:	sub	r8, r0, #2
   1aff0:	cmp	r8, r9
   1aff4:	bcc	1b218 <__assert_fail@plt+0x9fec>
   1aff8:	lsl	r3, r6, #1
   1affc:	mov	sl, #2
   1b000:	str	r4, [sp, #12]
   1b004:	rsb	r3, r3, #0
   1b008:	mov	r4, r3
   1b00c:	b	1b080 <__assert_fail@plt+0x9e54>
   1b010:	mov	r3, #1
   1b014:	add	r2, sp, #84	; 0x54
   1b018:	str	sl, [sp]
   1b01c:	add	r0, sp, #76	; 0x4c
   1b020:	bl	168f0 <__assert_fail@plt+0x56c4>
   1b024:	add	r1, sp, #52	; 0x34
   1b028:	mov	r2, r4
   1b02c:	mov	r0, r1
   1b030:	bl	17394 <__assert_fail@plt+0x6168>
   1b034:	add	r2, sp, #52	; 0x34
   1b038:	add	r1, sp, #76	; 0x4c
   1b03c:	mov	r0, r2
   1b040:	bl	16778 <__assert_fail@plt+0x554c>
   1b044:	add	r2, sp, #52	; 0x34
   1b048:	add	r3, sp, #64	; 0x40
   1b04c:	str	sl, [sp]
   1b050:	mov	r1, r2
   1b054:	mov	r0, #0
   1b058:	bl	16bb0 <__assert_fail@plt+0x5984>
   1b05c:	add	r2, sp, #76	; 0x4c
   1b060:	add	r3, sp, #64	; 0x40
   1b064:	str	sl, [sp]
   1b068:	mov	r1, r2
   1b06c:	mov	r0, #0
   1b070:	bl	16bb0 <__assert_fail@plt+0x5984>
   1b074:	cmp	r9, r8
   1b078:	sub	r8, r8, #1
   1b07c:	beq	1b214 <__assert_fail@plt+0x9fe8>
   1b080:	add	r1, sp, #76	; 0x4c
   1b084:	add	r2, sp, #52	; 0x34
   1b088:	mov	r0, r1
   1b08c:	bl	171c0 <__assert_fail@plt+0x5f94>
   1b090:	add	r2, sp, #64	; 0x40
   1b094:	add	r1, sp, #40	; 0x28
   1b098:	add	r0, sp, #52	; 0x34
   1b09c:	bl	17634 <__assert_fail@plt+0x6408>
   1b0a0:	cmp	r9, r8
   1b0a4:	beq	1b0bc <__assert_fail@plt+0x9e90>
   1b0a8:	mov	r1, r8
   1b0ac:	add	r0, sp, #64	; 0x40
   1b0b0:	bl	18664 <__assert_fail@plt+0x7438>
   1b0b4:	cmp	r0, #0
   1b0b8:	beq	1b05c <__assert_fail@plt+0x9e30>
   1b0bc:	add	r1, sp, #40	; 0x28
   1b0c0:	mov	r2, r6
   1b0c4:	mov	r0, r1
   1b0c8:	bl	17394 <__assert_fail@plt+0x6168>
   1b0cc:	ldr	lr, [sp, #52]	; 0x34
   1b0d0:	add	r1, sp, #76	; 0x4c
   1b0d4:	add	r2, sp, #52	; 0x34
   1b0d8:	mov	r0, r1
   1b0dc:	ldr	ip, [sp, #56]	; 0x38
   1b0e0:	ldr	r3, [sp, #80]	; 0x50
   1b0e4:	str	r3, [sp, #56]	; 0x38
   1b0e8:	str	ip, [sp, #80]	; 0x50
   1b0ec:	ldr	ip, [sp, #76]	; 0x4c
   1b0f0:	ldr	r3, [sp, #84]	; 0x54
   1b0f4:	str	lr, [sp, #76]	; 0x4c
   1b0f8:	ldr	lr, [sp, #60]	; 0x3c
   1b0fc:	str	ip, [sp, #52]	; 0x34
   1b100:	str	r3, [sp, #60]	; 0x3c
   1b104:	str	lr, [sp, #84]	; 0x54
   1b108:	bl	16778 <__assert_fail@plt+0x554c>
   1b10c:	ldr	r1, [sp, #80]	; 0x50
   1b110:	ldr	r3, [sp, #84]	; 0x54
   1b114:	ldr	r3, [r3]
   1b118:	cmp	r1, #0
   1b11c:	moveq	r3, #0
   1b120:	andne	r3, r3, #1
   1b124:	cmp	r3, #0
   1b128:	beq	1b010 <__assert_fail@plt+0x9de4>
   1b12c:	add	r1, sp, #76	; 0x4c
   1b130:	add	r2, sp, #64	; 0x40
   1b134:	mov	r0, r1
   1b138:	bl	16778 <__assert_fail@plt+0x554c>
   1b13c:	ldr	r1, [sp, #80]	; 0x50
   1b140:	b	1b010 <__assert_fail@plt+0x9de4>
   1b144:	cmp	r6, r9
   1b148:	bcc	1ae2c <__assert_fail@plt+0x9c00>
   1b14c:	b	1b16c <__assert_fail@plt+0x9f40>
   1b150:	mov	lr, #0
   1b154:	b	1ae74 <__assert_fail@plt+0x9c48>
   1b158:	ldr	r3, [sp, #48]	; 0x30
   1b15c:	ldr	r9, [r3]
   1b160:	sub	r9, r9, #1
   1b164:	cmp	r9, #3
   1b168:	bhi	1ae24 <__assert_fail@plt+0x9bf8>
   1b16c:	ldr	r3, [sp, #8]
   1b170:	cmp	r3, #24
   1b174:	sub	r8, r3, #24
   1b178:	movle	r6, #0
   1b17c:	movgt	r6, #1
   1b180:	cmp	r6, #0
   1b184:	bne	1b1c0 <__assert_fail@plt+0x9f94>
   1b188:	b	1b340 <__assert_fail@plt+0xa114>
   1b18c:	add	r3, sp, #28
   1b190:	add	r2, sp, #40	; 0x28
   1b194:	str	r7, [sp]
   1b198:	add	r1, sp, #16
   1b19c:	mov	r0, r5
   1b1a0:	bl	194fc <__assert_fail@plt+0x82d0>
   1b1a4:	cmp	r9, r8
   1b1a8:	movge	r3, #0
   1b1ac:	andlt	r3, r0, #1
   1b1b0:	mov	r4, r9
   1b1b4:	cmp	r3, #0
   1b1b8:	mov	r6, r0
   1b1bc:	beq	1acb0 <__assert_fail@plt+0x9a84>
   1b1c0:	add	r9, r4, #1
   1b1c4:	mul	r1, r4, r9
   1b1c8:	adds	r1, r1, #41	; 0x29
   1b1cc:	streq	r1, [sp, #44]	; 0x2c
   1b1d0:	beq	1b1dc <__assert_fail@plt+0x9fb0>
   1b1d4:	add	r0, sp, #40	; 0x28
   1b1d8:	bl	13ad8 <__assert_fail@plt+0x28ac>
   1b1dc:	add	r1, sp, #16
   1b1e0:	add	r0, sp, #40	; 0x28
   1b1e4:	bl	16588 <__assert_fail@plt+0x535c>
   1b1e8:	cmp	r0, #0
   1b1ec:	blt	1b18c <__assert_fail@plt+0x9f60>
   1b1f0:	cmp	r4, #29
   1b1f4:	bgt	1acb0 <__assert_fail@plt+0x9a84>
   1b1f8:	movw	r1, #59468	; 0xe84c
   1b1fc:	movt	r1, #2
   1b200:	ldr	r3, [pc, #356]	; 1b36c <__assert_fail@plt+0xa140>
   1b204:	movw	r0, #60484	; 0xec44
   1b208:	movt	r0, #2
   1b20c:	movw	r2, #3629	; 0xe2d
   1b210:	bl	1122c <__assert_fail@plt>
   1b214:	ldr	r4, [sp, #12]
   1b218:	ldr	r1, [sp, #76]	; 0x4c
   1b21c:	ldr	r8, [sp, #80]	; 0x50
   1b220:	cmp	r1, #0
   1b224:	beq	1b240 <__assert_fail@plt+0xa014>
   1b228:	movw	r3, #292	; 0x124
   1b22c:	movt	r3, #4
   1b230:	lsl	r1, r1, #2
   1b234:	ldr	r3, [r3, #8]
   1b238:	ldr	r0, [sp, #84]	; 0x54
   1b23c:	blx	r3
   1b240:	ldr	r3, [sp, #8]
   1b244:	cmp	r3, #24
   1b248:	movle	r6, #0
   1b24c:	movgt	r6, #1
   1b250:	cmp	r8, #0
   1b254:	sub	r8, r3, #24
   1b258:	beq	1b298 <__assert_fail@plt+0xa06c>
   1b25c:	ldr	r3, [sp, #56]	; 0x38
   1b260:	cmp	r3, #0
   1b264:	bne	1b288 <__assert_fail@plt+0xa05c>
   1b268:	b	1b298 <__assert_fail@plt+0xa06c>
   1b26c:	add	r2, sp, #64	; 0x40
   1b270:	add	r1, sp, #40	; 0x28
   1b274:	add	r0, sp, #52	; 0x34
   1b278:	bl	17634 <__assert_fail@plt+0x6408>
   1b27c:	ldr	r3, [sp, #56]	; 0x38
   1b280:	cmp	r3, #0
   1b284:	beq	1b298 <__assert_fail@plt+0xa06c>
   1b288:	subs	r9, r9, #1
   1b28c:	bne	1b26c <__assert_fail@plt+0xa040>
   1b290:	mov	r6, #0
   1b294:	mov	fp, r6
   1b298:	ldr	r1, [sp, #52]	; 0x34
   1b29c:	cmp	r1, #0
   1b2a0:	beq	1b180 <__assert_fail@plt+0x9f54>
   1b2a4:	movw	r3, #292	; 0x124
   1b2a8:	movt	r3, #4
   1b2ac:	lsl	r1, r1, #2
   1b2b0:	ldr	r3, [r3, #8]
   1b2b4:	ldr	r0, [sp, #60]	; 0x3c
   1b2b8:	blx	r3
   1b2bc:	b	1b180 <__assert_fail@plt+0x9f54>
   1b2c0:	cmp	fp, #0
   1b2c4:	bne	1b2e4 <__assert_fail@plt+0xa0b8>
   1b2c8:	movw	r1, #59468	; 0xe84c
   1b2cc:	movt	r1, #2
   1b2d0:	ldr	r3, [pc, #152]	; 1b370 <__assert_fail@plt+0xa144>
   1b2d4:	movw	r0, #60460	; 0xec2c
   1b2d8:	movt	r0, #2
   1b2dc:	movw	r2, #3445	; 0xd75
   1b2e0:	bl	1122c <__assert_fail@plt>
   1b2e4:	cmp	sl, #3
   1b2e8:	movhi	r3, #0
   1b2ec:	movls	r3, #1
   1b2f0:	cmp	sl, #4
   1b2f4:	rsbls	r3, r3, #0
   1b2f8:	rsbhi	r3, r3, #1
   1b2fc:	cmp	r3, #1
   1b300:	beq	1af98 <__assert_fail@plt+0x9d6c>
   1b304:	b	1b2c8 <__assert_fail@plt+0xa09c>
   1b308:	movw	r1, #59468	; 0xe84c
   1b30c:	movt	r1, #2
   1b310:	ldr	r3, [pc, #88]	; 1b370 <__assert_fail@plt+0xa144>
   1b314:	movw	r0, #60428	; 0xec0c
   1b318:	movt	r0, #2
   1b31c:	movw	r2, #3446	; 0xd76
   1b320:	bl	1122c <__assert_fail@plt>
   1b324:	movw	r1, #59468	; 0xe84c
   1b328:	movt	r1, #2
   1b32c:	ldr	r3, [pc, #60]	; 1b370 <__assert_fail@plt+0xa144>
   1b330:	movw	r0, #60452	; 0xec24
   1b334:	movt	r0, #2
   1b338:	movw	r2, #3442	; 0xd72
   1b33c:	bl	1122c <__assert_fail@plt>
   1b340:	mov	r6, fp
   1b344:	b	1acb0 <__assert_fail@plt+0x9a84>
   1b348:	movw	r1, #59468	; 0xe84c
   1b34c:	movt	r1, #2
   1b350:	movw	r0, #60428	; 0xec0c
   1b354:	movt	r0, #2
   1b358:	add	r3, r8, #224	; 0xe0
   1b35c:	mov	r2, #3504	; 0xdb0
   1b360:	bl	1122c <__assert_fail@plt>
   1b364:	andeq	lr, r2, ip, asr #13
   1b368:			; <UNDEFINED> instruction: 0x0002e7bc
   1b36c:	andeq	lr, r2, r0, ror #15
   1b370:	ldrdeq	lr, [r2], -r0
   1b374:	cmp	r1, #1
   1b378:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b37c:	strd	r6, [sp, #8]
   1b380:	mov	r6, r0
   1b384:	strd	r8, [sp, #16]
   1b388:	mov	r8, r2
   1b38c:	strd	sl, [sp, #24]
   1b390:	mov	fp, r1
   1b394:	str	lr, [sp, #32]
   1b398:	sub	sp, sp, #28
   1b39c:	ble	1b564 <__assert_fail@plt+0xa338>
   1b3a0:	cmp	r1, #36	; 0x24
   1b3a4:	ble	1b558 <__assert_fail@plt+0xa32c>
   1b3a8:	cmp	r1, #62	; 0x3e
   1b3ac:	bgt	1b5c8 <__assert_fail@plt+0xa39c>
   1b3b0:	movw	r5, #60492	; 0xec4c
   1b3b4:	movt	r5, #2
   1b3b8:	mov	r1, fp
   1b3bc:	mov	r0, r8
   1b3c0:	bl	1a2f8 <__assert_fail@plt+0x90cc>
   1b3c4:	cmp	r6, #0
   1b3c8:	movne	r7, #0
   1b3cc:	beq	1b57c <__assert_fail@plt+0xa350>
   1b3d0:	ldr	r2, [r8, #4]
   1b3d4:	cmp	r2, #0
   1b3d8:	moveq	r3, #48	; 0x30
   1b3dc:	moveq	r8, #1
   1b3e0:	strbeq	r3, [r6]
   1b3e4:	beq	1b500 <__assert_fail@plt+0xa2d4>
   1b3e8:	movge	sl, r6
   1b3ec:	movge	r4, #0
   1b3f0:	bge	1b404 <__assert_fail@plt+0xa1d8>
   1b3f4:	mov	r1, #45	; 0x2d
   1b3f8:	mov	sl, r6
   1b3fc:	mov	r4, #1
   1b400:	strb	r1, [sl], #1
   1b404:	cmp	r2, #0
   1b408:	mov	r0, fp
   1b40c:	rsblt	r2, r2, #0
   1b410:	str	r2, [sp, #8]
   1b414:	bl	132b8 <__assert_fail@plt+0x208c>
   1b418:	subs	r1, r0, #0
   1b41c:	bne	1b59c <__assert_fail@plt+0xa370>
   1b420:	umull	r3, r1, fp, fp
   1b424:	mov	r2, fp
   1b428:	adds	r1, r1, #0
   1b42c:	movne	r1, #1
   1b430:	cmp	r1, #0
   1b434:	moveq	r1, #1
   1b438:	bne	1b450 <__assert_fail@plt+0xa224>
   1b43c:	mul	r2, fp, r2
   1b440:	add	r1, r1, #1
   1b444:	umull	r3, r0, fp, r2
   1b448:	cmp	r0, #0
   1b44c:	beq	1b43c <__assert_fail@plt+0xa210>
   1b450:	ldr	r3, [sp, #8]
   1b454:	movw	r9, #292	; 0x124
   1b458:	movt	r9, #4
   1b45c:	str	r1, [sp, #16]
   1b460:	str	r2, [sp, #20]
   1b464:	ldr	r2, [r9, #4]
   1b468:	lsl	r3, r3, #2
   1b46c:	mov	r0, r3
   1b470:	str	r3, [sp, #12]
   1b474:	blx	r2
   1b478:	ldr	r2, [r8, #8]
   1b47c:	mov	lr, r0
   1b480:	sub	r1, r0, #4
   1b484:	ldr	r3, [sp, #12]
   1b488:	add	ip, r3, r2
   1b48c:	ldr	r0, [r2], #4
   1b490:	cmp	r2, ip
   1b494:	str	r0, [r1, #4]!
   1b498:	bne	1b48c <__assert_fail@plt+0xa260>
   1b49c:	ldr	r2, [sp, #8]
   1b4a0:	mov	r1, fp
   1b4a4:	mov	r0, sl
   1b4a8:	add	r3, sp, #20
   1b4ac:	str	lr, [sp]
   1b4b0:	mov	sl, lr
   1b4b4:	str	r2, [sp, #4]
   1b4b8:	add	r2, sp, #16
   1b4bc:	bl	15850 <__assert_fail@plt+0x4624>
   1b4c0:	add	r8, r0, r4
   1b4c4:	mov	r0, sl
   1b4c8:	ldr	r3, [r9, #8]
   1b4cc:	ldr	r1, [sp, #12]
   1b4d0:	blx	r3
   1b4d4:	cmp	r4, r8
   1b4d8:	subcc	r4, r4, #1
   1b4dc:	subcc	r2, r6, #1
   1b4e0:	addcc	r4, r6, r4
   1b4e4:	addcc	r2, r2, r8
   1b4e8:	bcs	1b500 <__assert_fail@plt+0xa2d4>
   1b4ec:	ldrb	r3, [r4, #1]!
   1b4f0:	ldrb	r3, [r5, r3]
   1b4f4:	cmp	r2, r4
   1b4f8:	strb	r3, [r4]
   1b4fc:	bne	1b4ec <__assert_fail@plt+0xa2c0>
   1b500:	mov	r3, #0
   1b504:	cmp	r7, r3
   1b508:	strb	r3, [r6, r8]
   1b50c:	beq	1b538 <__assert_fail@plt+0xa30c>
   1b510:	add	r2, r8, #1
   1b514:	cmp	r2, r7
   1b518:	beq	1b538 <__assert_fail@plt+0xa30c>
   1b51c:	movw	r3, #292	; 0x124
   1b520:	movt	r3, #4
   1b524:	mov	r0, r6
   1b528:	mov	r1, r7
   1b52c:	ldr	r3, [r3]
   1b530:	blx	r3
   1b534:	mov	r6, r0
   1b538:	mov	r0, r6
   1b53c:	add	sp, sp, #28
   1b540:	ldrd	r4, [sp]
   1b544:	ldrd	r6, [sp, #8]
   1b548:	ldrd	r8, [sp, #16]
   1b54c:	ldrd	sl, [sp, #24]
   1b550:	add	sp, sp, #32
   1b554:	pop	{pc}		; (ldr pc, [sp], #4)
   1b558:	movw	r5, #60556	; 0xec8c
   1b55c:	movt	r5, #2
   1b560:	b	1b3b8 <__assert_fail@plt+0xa18c>
   1b564:	cmn	r1, #1
   1b568:	blt	1b5b4 <__assert_fail@plt+0xa388>
   1b56c:	movw	r5, #60492	; 0xec4c
   1b570:	movt	r5, #2
   1b574:	mov	fp, #10
   1b578:	b	1b3b8 <__assert_fail@plt+0xa18c>
   1b57c:	add	r7, r0, #2
   1b580:	movw	r2, #292	; 0x124
   1b584:	movt	r2, #4
   1b588:	mov	r0, r7
   1b58c:	ldr	r2, [r2, #4]
   1b590:	blx	r2
   1b594:	mov	r6, r0
   1b598:	b	1b3d0 <__assert_fail@plt+0xa1a4>
   1b59c:	mov	r0, sl
   1b5a0:	ldr	r2, [r8, #8]
   1b5a4:	ldr	r3, [sp, #8]
   1b5a8:	bl	137ac <__assert_fail@plt+0x2580>
   1b5ac:	add	r8, r0, r4
   1b5b0:	b	1b4d4 <__assert_fail@plt+0xa2a8>
   1b5b4:	cmn	r1, #36	; 0x24
   1b5b8:	rsb	r3, r1, #0
   1b5bc:	blt	1b5c8 <__assert_fail@plt+0xa39c>
   1b5c0:	mov	fp, r3
   1b5c4:	b	1b3b0 <__assert_fail@plt+0xa184>
   1b5c8:	mov	r6, #0
   1b5cc:	b	1b538 <__assert_fail@plt+0xa30c>
   1b5d0:	sub	r3, r2, #2
   1b5d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b5d8:	cmp	r2, #0
   1b5dc:	cmpne	r3, #60	; 0x3c
   1b5e0:	strd	r6, [sp, #8]
   1b5e4:	strd	r8, [sp, #16]
   1b5e8:	strd	sl, [sp, #24]
   1b5ec:	str	lr, [sp, #32]
   1b5f0:	sub	sp, sp, #28
   1b5f4:	bhi	1b8f4 <__assert_fail@plt+0xa6c8>
   1b5f8:	mov	r4, r1
   1b5fc:	mov	sl, r2
   1b600:	mov	r9, r0
   1b604:	bl	11118 <__ctype_b_loc@plt>
   1b608:	ldr	ip, [r0]
   1b60c:	mov	fp, r0
   1b610:	mov	r1, r4
   1b614:	mov	r0, r1
   1b618:	ldrb	r5, [r1], #1
   1b61c:	lsl	r3, r5, #1
   1b620:	ldrh	r3, [ip, r3]
   1b624:	tst	r3, #8192	; 0x2000
   1b628:	bne	1b614 <__assert_fail@plt+0xa3e8>
   1b62c:	sub	r3, r5, #45	; 0x2d
   1b630:	cmp	sl, #0
   1b634:	clz	r3, r3
   1b638:	lsr	r3, r3, #5
   1b63c:	add	r8, r0, r3
   1b640:	ldrb	r3, [r0, r3]
   1b644:	beq	1b70c <__assert_fail@plt+0xa4e0>
   1b648:	cmp	r3, #0
   1b64c:	beq	1b6e4 <__assert_fail@plt+0xa4b8>
   1b650:	mov	r0, r8
   1b654:	movw	r7, #292	; 0x124
   1b658:	movt	r7, #4
   1b65c:	bl	11130 <strlen@plt>
   1b660:	ldr	r3, [r7, #4]
   1b664:	str	r0, [sp, #12]
   1b668:	blx	r3
   1b66c:	cmp	sl, #37	; 0x25
   1b670:	mov	r6, r0
   1b674:	movlt	r0, #10
   1b678:	movge	r0, #36	; 0x24
   1b67c:	ldrb	r1, [r8]
   1b680:	cmp	r1, #0
   1b684:	subne	r0, r0, #97	; 0x61
   1b688:	movne	r4, #0
   1b68c:	beq	1b6d4 <__assert_fail@plt+0xa4a8>
   1b690:	ldr	ip, [fp]
   1b694:	lsl	r3, r1, #1
   1b698:	ldrh	r3, [ip, r3]
   1b69c:	tst	r3, #8192	; 0x2000
   1b6a0:	bne	1b75c <__assert_fail@plt+0xa530>
   1b6a4:	sub	r3, r1, #48	; 0x30
   1b6a8:	uxtb	ip, r3
   1b6ac:	cmp	ip, #9
   1b6b0:	movls	r1, r3
   1b6b4:	bls	1b74c <__assert_fail@plt+0xa520>
   1b6b8:	sub	r3, r1, #97	; 0x61
   1b6bc:	cmp	r3, #25
   1b6c0:	addls	r1, r0, r1
   1b6c4:	bls	1b74c <__assert_fail@plt+0xa520>
   1b6c8:	sub	r3, r1, #65	; 0x41
   1b6cc:	cmp	r3, #25
   1b6d0:	bls	1b748 <__assert_fail@plt+0xa51c>
   1b6d4:	mov	r0, r6
   1b6d8:	ldr	r3, [r7, #8]
   1b6dc:	ldr	r1, [sp, #12]
   1b6e0:	blx	r3
   1b6e4:	mov	r3, #0
   1b6e8:	mvn	r0, #0
   1b6ec:	str	r3, [r9, #4]
   1b6f0:	add	sp, sp, #28
   1b6f4:	ldrd	r4, [sp]
   1b6f8:	ldrd	r6, [sp, #8]
   1b6fc:	ldrd	r8, [sp, #16]
   1b700:	ldrd	sl, [sp, #24]
   1b704:	add	sp, sp, #32
   1b708:	pop	{pc}		; (ldr pc, [sp], #4)
   1b70c:	cmp	r3, #48	; 0x30
   1b710:	movne	sl, #10
   1b714:	beq	1b874 <__assert_fail@plt+0xa648>
   1b718:	cmp	r3, #0
   1b71c:	beq	1b6e4 <__assert_fail@plt+0xa4b8>
   1b720:	mov	r0, r8
   1b724:	movw	r7, #292	; 0x124
   1b728:	movt	r7, #4
   1b72c:	bl	11130 <strlen@plt>
   1b730:	ldr	r3, [r7, #4]
   1b734:	str	r0, [sp, #12]
   1b738:	blx	r3
   1b73c:	mov	r6, r0
   1b740:	mov	r0, #10
   1b744:	b	1b67c <__assert_fail@plt+0xa450>
   1b748:	sub	r1, r1, #55	; 0x37
   1b74c:	cmp	sl, r1
   1b750:	bls	1b6d4 <__assert_fail@plt+0xa4a8>
   1b754:	strb	r1, [r6, r4]
   1b758:	add	r4, r4, #1
   1b75c:	ldrb	r1, [r8, #1]!
   1b760:	cmp	r1, #0
   1b764:	bne	1b690 <__assert_fail@plt+0xa464>
   1b768:	cmp	r4, #0
   1b76c:	beq	1b6d4 <__assert_fail@plt+0xa4a8>
   1b770:	mov	r0, sl
   1b774:	bl	132b8 <__assert_fail@plt+0x208c>
   1b778:	subs	fp, r0, #0
   1b77c:	ldr	ip, [r9]
   1b780:	bne	1b844 <__assert_fail@plt+0xa618>
   1b784:	umull	r3, r1, sl, sl
   1b788:	sub	lr, r4, #1
   1b78c:	adds	r1, r1, #0
   1b790:	movne	r1, #1
   1b794:	cmp	r1, #0
   1b798:	movne	r8, r4
   1b79c:	movne	r3, sl
   1b7a0:	bne	1b7c8 <__assert_fail@plt+0xa59c>
   1b7a4:	mov	r3, sl
   1b7a8:	mov	r1, #1
   1b7ac:	mul	r3, sl, r3
   1b7b0:	add	r1, r1, #1
   1b7b4:	umull	r2, r0, sl, r3
   1b7b8:	cmp	r0, #0
   1b7bc:	beq	1b7ac <__assert_fail@plt+0xa580>
   1b7c0:	add	r8, r1, lr
   1b7c4:	udiv	r8, r8, r1
   1b7c8:	cmp	r8, ip
   1b7cc:	str	r1, [sp, #16]
   1b7d0:	str	r3, [sp, #20]
   1b7d4:	bgt	1b8a4 <__assert_fail@plt+0xa678>
   1b7d8:	ldr	fp, [r9, #8]
   1b7dc:	add	r1, sp, #16
   1b7e0:	add	ip, sp, #20
   1b7e4:	mov	r3, sl
   1b7e8:	mov	r2, r4
   1b7ec:	mov	r0, fp
   1b7f0:	stm	sp, {r1, ip}
   1b7f4:	mov	r1, r6
   1b7f8:	bl	14494 <__assert_fail@plt+0x3268>
   1b7fc:	cmp	r0, #0
   1b800:	ble	1b8d8 <__assert_fail@plt+0xa6ac>
   1b804:	sub	r3, r0, #-1073741823	; 0xc0000001
   1b808:	ldr	r4, [fp, r3, lsl #2]
   1b80c:	cmp	r4, #0
   1b810:	movne	r4, r0
   1b814:	subeq	r4, r0, #1
   1b818:	cmp	r4, r8
   1b81c:	bgt	1b910 <__assert_fail@plt+0xa6e4>
   1b820:	mov	r0, r6
   1b824:	ldr	r3, [r7, #8]
   1b828:	ldr	r1, [sp, #12]
   1b82c:	blx	r3
   1b830:	cmp	r5, #45	; 0x2d
   1b834:	mov	r0, #0
   1b838:	rsbeq	r4, r4, #0
   1b83c:	str	r4, [r9, #4]
   1b840:	b	1b6f0 <__assert_fail@plt+0xa4c4>
   1b844:	mul	r8, r4, fp
   1b848:	add	r8, r8, #31
   1b84c:	lsr	r8, r8, #5
   1b850:	cmp	r8, ip
   1b854:	bgt	1b894 <__assert_fail@plt+0xa668>
   1b858:	ldr	r0, [r9, #8]
   1b85c:	mov	r2, r4
   1b860:	mov	r3, fp
   1b864:	mov	r1, r6
   1b868:	bl	13340 <__assert_fail@plt+0x2114>
   1b86c:	mov	r4, r0
   1b870:	b	1b818 <__assert_fail@plt+0xa5ec>
   1b874:	ldrb	r3, [r8, #1]
   1b878:	and	r3, r3, #223	; 0xdf
   1b87c:	cmp	r3, #88	; 0x58
   1b880:	bne	1b8b8 <__assert_fail@plt+0xa68c>
   1b884:	ldrb	r3, [r8, #2]
   1b888:	mov	sl, #16
   1b88c:	add	r8, r8, #2
   1b890:	b	1b718 <__assert_fail@plt+0xa4ec>
   1b894:	mov	r1, r8
   1b898:	mov	r0, r9
   1b89c:	bl	13584 <__assert_fail@plt+0x2358>
   1b8a0:	b	1b85c <__assert_fail@plt+0xa630>
   1b8a4:	mov	r1, r8
   1b8a8:	mov	r0, r9
   1b8ac:	bl	13584 <__assert_fail@plt+0x2358>
   1b8b0:	mov	fp, r0
   1b8b4:	b	1b7dc <__assert_fail@plt+0xa5b0>
   1b8b8:	cmp	r3, #66	; 0x42
   1b8bc:	bne	1b8d0 <__assert_fail@plt+0xa6a4>
   1b8c0:	mov	sl, #2
   1b8c4:	ldrb	r3, [r8, #2]
   1b8c8:	add	r8, r8, sl
   1b8cc:	b	1b718 <__assert_fail@plt+0xa4ec>
   1b8d0:	mov	sl, #8
   1b8d4:	b	1b720 <__assert_fail@plt+0xa4f4>
   1b8d8:	movw	r1, #59468	; 0xe84c
   1b8dc:	movt	r1, #2
   1b8e0:	ldr	r3, [pc, #68]	; 1b92c <__assert_fail@plt+0xa700>
   1b8e4:	movw	r0, #60044	; 0xea8c
   1b8e8:	movt	r0, #2
   1b8ec:	movw	r2, #4405	; 0x1135
   1b8f0:	bl	1122c <__assert_fail@plt>
   1b8f4:	movw	r1, #59468	; 0xe84c
   1b8f8:	movt	r1, #2
   1b8fc:	ldr	r3, [pc, #40]	; 1b92c <__assert_fail@plt+0xa700>
   1b900:	movw	r0, #60596	; 0xecb4
   1b904:	movt	r0, #2
   1b908:	movw	r2, #4320	; 0x10e0
   1b90c:	bl	1122c <__assert_fail@plt>
   1b910:	movw	r1, #59468	; 0xe84c
   1b914:	movt	r1, #2
   1b918:	ldr	r3, [pc, #12]	; 1b92c <__assert_fail@plt+0xa700>
   1b91c:	movw	r0, #60636	; 0xecdc
   1b920:	movt	r0, #2
   1b924:	movw	r2, #4408	; 0x1138
   1b928:	bl	1122c <__assert_fail@plt>
   1b92c:	strdeq	lr, [r2], -r4
   1b930:	push	{lr}		; (str lr, [sp, #-4]!)
   1b934:	mov	ip, #0
   1b938:	ldr	lr, [pc, #12]	; 1b94c <__assert_fail@plt+0xa720>
   1b93c:	str	ip, [r0]
   1b940:	stmib	r0, {ip, lr}
   1b944:	pop	{lr}		; (ldr lr, [sp], #4)
   1b948:	b	1b5d0 <__assert_fail@plt+0xa3a4>
   1b94c:	andeq	lr, r2, ip, asr #13
   1b950:	strd	r4, [sp, #-16]!
   1b954:	str	r6, [sp, #8]
   1b958:	mov	r6, r0
   1b95c:	mov	r0, #0
   1b960:	str	lr, [sp, #12]
   1b964:	bl	1b374 <__assert_fail@plt+0xa148>
   1b968:	subs	r4, r0, #0
   1b96c:	moveq	r6, r4
   1b970:	beq	1b9ac <__assert_fail@plt+0xa780>
   1b974:	bl	11130 <strlen@plt>
   1b978:	mov	r5, r0
   1b97c:	mov	r3, r6
   1b980:	mov	r2, r0
   1b984:	mov	r1, #1
   1b988:	mov	r0, r4
   1b98c:	bl	11058 <fwrite@plt>
   1b990:	movw	r3, #292	; 0x124
   1b994:	movt	r3, #4
   1b998:	mov	r6, r0
   1b99c:	add	r1, r5, #1
   1b9a0:	ldr	r3, [r3, #8]
   1b9a4:	mov	r0, r4
   1b9a8:	blx	r3
   1b9ac:	mov	r0, r6
   1b9b0:	ldrd	r4, [sp]
   1b9b4:	ldr	r6, [sp, #8]
   1b9b8:	add	sp, sp, #12
   1b9bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b9c4:	strd	r6, [sp, #8]
   1b9c8:	strd	r8, [sp, #16]
   1b9cc:	strd	sl, [sp, #24]
   1b9d0:	str	lr, [sp, #32]
   1b9d4:	sub	sp, sp, #12
   1b9d8:	ldr	sl, [sp, #48]	; 0x30
   1b9dc:	str	r0, [sp]
   1b9e0:	ldr	ip, [sp, #52]	; 0x34
   1b9e4:	ldr	r8, [sp, #56]	; 0x38
   1b9e8:	cmp	ip, #0
   1b9ec:	bne	1bba8 <__assert_fail@plt+0xa97c>
   1b9f0:	mov	r6, r3
   1b9f4:	add	r3, r2, #1
   1b9f8:	bics	r9, r3, #2
   1b9fc:	bne	1bbd0 <__assert_fail@plt+0xa9a4>
   1ba00:	add	r3, sl, #1
   1ba04:	cmp	r3, #2
   1ba08:	bhi	1bbb4 <__assert_fail@plt+0xa988>
   1ba0c:	cmp	sl, #0
   1ba10:	mov	r7, r1
   1ba14:	mvneq	sl, #0
   1ba18:	cmp	sl, r2
   1ba1c:	lslne	r9, r6, #1
   1ba20:	cmp	r2, #1
   1ba24:	bne	1ba34 <__assert_fail@plt+0xa808>
   1ba28:	sub	r3, r1, #1
   1ba2c:	rsb	r9, r9, #0
   1ba30:	mla	r8, r6, r3, r8
   1ba34:	ldr	r2, [sp]
   1ba38:	cmp	sl, #1
   1ba3c:	subeq	r3, r6, #1
   1ba40:	addeq	r8, r8, r3
   1ba44:	mul	r3, r7, r6
   1ba48:	ldr	r2, [r2]
   1ba4c:	add	r3, r3, #3
   1ba50:	lsr	r3, r3, #2
   1ba54:	str	r3, [sp, #4]
   1ba58:	cmp	r2, r3
   1ba5c:	blt	1bb64 <__assert_fail@plt+0xa938>
   1ba60:	ldr	r3, [sp]
   1ba64:	cmp	r7, #0
   1ba68:	ldr	r0, [r3, #8]
   1ba6c:	beq	1bb78 <__assert_fail@plt+0xa94c>
   1ba70:	rsb	sl, sl, #0
   1ba74:	mov	r2, #0
   1ba78:	mov	lr, r2
   1ba7c:	mov	r3, r2
   1ba80:	mul	fp, r6, sl
   1ba84:	cmp	r6, #0
   1ba88:	movne	ip, #0
   1ba8c:	movne	r1, r8
   1ba90:	beq	1bad0 <__assert_fail@plt+0xa8a4>
   1ba94:	ldrb	r5, [r1]
   1ba98:	lsl	r4, r2, #3
   1ba9c:	add	r2, r2, #1
   1baa0:	cmp	r2, #4
   1baa4:	orr	lr, lr, r5, lsl r4
   1baa8:	bne	1babc <__assert_fail@plt+0xa890>
   1baac:	str	lr, [r0, r3, lsl #2]
   1bab0:	mov	lr, #0
   1bab4:	add	r3, r3, #1
   1bab8:	mov	r2, lr
   1babc:	add	ip, ip, #1
   1bac0:	add	r1, r1, sl
   1bac4:	cmp	r6, ip
   1bac8:	bne	1ba94 <__assert_fail@plt+0xa868>
   1bacc:	add	r8, r8, fp
   1bad0:	subs	r7, r7, #1
   1bad4:	add	r8, r8, r9
   1bad8:	bne	1ba84 <__assert_fail@plt+0xa858>
   1badc:	ldr	r1, [sp, #4]
   1bae0:	cmp	r2, #0
   1bae4:	moveq	r2, r3
   1bae8:	addne	r2, r3, #1
   1baec:	cmp	r2, r1
   1baf0:	bne	1bb84 <__assert_fail@plt+0xa958>
   1baf4:	cmp	lr, #0
   1baf8:	addne	r2, r3, #1
   1bafc:	strne	lr, [r0, r3, lsl #2]
   1bb00:	beq	1bb28 <__assert_fail@plt+0xa8fc>
   1bb04:	ldr	r3, [sp]
   1bb08:	str	r2, [r3, #4]
   1bb0c:	add	sp, sp, #12
   1bb10:	ldrd	r4, [sp]
   1bb14:	ldrd	r6, [sp, #8]
   1bb18:	ldrd	r8, [sp, #16]
   1bb1c:	ldrd	sl, [sp, #24]
   1bb20:	add	sp, sp, #32
   1bb24:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb28:	cmp	r3, #0
   1bb2c:	beq	1bb5c <__assert_fail@plt+0xa930>
   1bb30:	sub	r2, r3, #-1073741823	; 0xc0000001
   1bb34:	ldr	r1, [r0, r2, lsl #2]
   1bb38:	add	r0, r0, r2, lsl #2
   1bb3c:	cmp	r1, #0
   1bb40:	beq	1bb54 <__assert_fail@plt+0xa928>
   1bb44:	b	1bba0 <__assert_fail@plt+0xa974>
   1bb48:	ldr	r2, [r0, #-4]!
   1bb4c:	cmp	r2, #0
   1bb50:	bne	1bba0 <__assert_fail@plt+0xa974>
   1bb54:	subs	r3, r3, #1
   1bb58:	bne	1bb48 <__assert_fail@plt+0xa91c>
   1bb5c:	mov	r2, #0
   1bb60:	b	1bb04 <__assert_fail@plt+0xa8d8>
   1bb64:	mov	r1, r3
   1bb68:	ldr	r0, [sp]
   1bb6c:	bl	13584 <__assert_fail@plt+0x2358>
   1bb70:	cmp	r7, #0
   1bb74:	bne	1ba70 <__assert_fail@plt+0xa844>
   1bb78:	ldr	r3, [sp, #4]
   1bb7c:	cmp	r3, #0
   1bb80:	beq	1bb5c <__assert_fail@plt+0xa930>
   1bb84:	movw	r1, #59468	; 0xe84c
   1bb88:	movt	r1, #2
   1bb8c:	ldr	r3, [pc, #88]	; 1bbec <__assert_fail@plt+0xa9c0>
   1bb90:	movw	r0, #60740	; 0xed44
   1bb94:	movt	r0, #2
   1bb98:	movw	r2, #4507	; 0x119b
   1bb9c:	bl	1122c <__assert_fail@plt>
   1bba0:	mov	r2, r3
   1bba4:	b	1bb04 <__assert_fail@plt+0xa8d8>
   1bba8:	movw	r0, #60648	; 0xece8
   1bbac:	movt	r0, #2
   1bbb0:	bl	13400 <__assert_fail@plt+0x21d4>
   1bbb4:	movw	r1, #59468	; 0xe84c
   1bbb8:	movt	r1, #2
   1bbbc:	ldr	r3, [pc, #40]	; 1bbec <__assert_fail@plt+0xa9c0>
   1bbc0:	movw	r0, #60712	; 0xed28
   1bbc4:	movt	r0, #2
   1bbc8:	movw	r2, #4469	; 0x1175
   1bbcc:	bl	1122c <__assert_fail@plt>
   1bbd0:	movw	r1, #59468	; 0xe84c
   1bbd4:	movt	r1, #2
   1bbd8:	ldr	r3, [pc, #12]	; 1bbec <__assert_fail@plt+0xa9c0>
   1bbdc:	movw	r0, #60684	; 0xed0c
   1bbe0:	movt	r0, #2
   1bbe4:	movw	r2, #4468	; 0x1174
   1bbe8:	bl	1122c <__assert_fail@plt>
   1bbec:	andeq	lr, r2, r0, lsl #16
   1bbf0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bbf4:	strd	r6, [sp, #8]
   1bbf8:	strd	r8, [sp, #16]
   1bbfc:	strd	sl, [sp, #24]
   1bc00:	str	lr, [sp, #32]
   1bc04:	sub	sp, sp, #20
   1bc08:	ldr	sl, [sp, #56]	; 0x38
   1bc0c:	str	r1, [sp, #4]
   1bc10:	ldr	ip, [sp, #60]	; 0x3c
   1bc14:	ldr	r7, [sp, #64]	; 0x40
   1bc18:	cmp	ip, #0
   1bc1c:	bne	1be44 <__assert_fail@plt+0xac18>
   1bc20:	add	r5, r2, #1
   1bc24:	bics	r5, r5, #2
   1bc28:	bne	1be0c <__assert_fail@plt+0xabe0>
   1bc2c:	add	r1, sl, #1
   1bc30:	cmp	r1, #2
   1bc34:	bhi	1bdf0 <__assert_fail@plt+0xabc4>
   1bc38:	cmp	r3, #0
   1bc3c:	ldr	r6, [r7, #4]
   1bc40:	beq	1bd60 <__assert_fail@plt+0xab34>
   1bc44:	cmp	r6, #0
   1bc48:	beq	1bd68 <__assert_fail@plt+0xab3c>
   1bc4c:	ldr	r1, [r7, #8]
   1bc50:	cmp	r6, #0
   1bc54:	rsblt	r6, r6, #0
   1bc58:	sub	ip, r6, #-1073741823	; 0xc0000001
   1bc5c:	ldr	r1, [r1, ip, lsl #2]
   1bc60:	cmp	r1, #0
   1bc64:	bne	1bc70 <__assert_fail@plt+0xaa44>
   1bc68:	b	1be28 <__assert_fail@plt+0xabfc>
   1bc6c:	mov	r5, ip
   1bc70:	lsrs	r1, r1, #8
   1bc74:	add	ip, r5, #1
   1bc78:	bne	1bc6c <__assert_fail@plt+0xaa40>
   1bc7c:	sub	r1, r6, #1
   1bc80:	cmp	r0, #0
   1bc84:	add	r1, r3, r1, lsl #2
   1bc88:	add	r5, r1, r5
   1bc8c:	udiv	r8, r5, r3
   1bc90:	beq	1bd90 <__assert_fail@plt+0xab64>
   1bc94:	cmp	sl, #0
   1bc98:	mvneq	sl, #0
   1bc9c:	cmp	sl, r2
   1bca0:	moveq	fp, #0
   1bca4:	lslne	fp, r3, #1
   1bca8:	cmp	r2, #1
   1bcac:	subeq	r9, r8, #1
   1bcb0:	rsbeq	fp, fp, #0
   1bcb4:	movne	r9, r0
   1bcb8:	mlaeq	r9, r3, r9, r0
   1bcbc:	cmp	sl, #1
   1bcc0:	subeq	r2, r3, #1
   1bcc4:	addeq	r9, r9, r2
   1bcc8:	cmp	r5, r3
   1bccc:	bcc	1bdb8 <__assert_fail@plt+0xab8c>
   1bcd0:	mov	ip, #0
   1bcd4:	mls	fp, sl, r3, fp
   1bcd8:	rsb	sl, sl, #0
   1bcdc:	mov	r2, ip
   1bce0:	mov	r5, ip
   1bce4:	mov	r4, ip
   1bce8:	mov	r1, #0
   1bcec:	mov	lr, r9
   1bcf0:	cmp	ip, #0
   1bcf4:	subne	ip, ip, #1
   1bcf8:	bne	1bd10 <__assert_fail@plt+0xaae4>
   1bcfc:	cmp	r6, r4
   1bd00:	mov	ip, #3
   1bd04:	ldrgt	r2, [r7, #8]
   1bd08:	ldrgt	r2, [r2, r4, lsl #2]
   1bd0c:	addgt	r4, r4, #1
   1bd10:	add	r1, r1, #1
   1bd14:	strb	r2, [lr], sl
   1bd18:	lsr	r2, r2, #8
   1bd1c:	cmp	r3, r1
   1bd20:	bne	1bcf0 <__assert_fail@plt+0xaac4>
   1bd24:	add	r5, r5, #1
   1bd28:	add	r9, r9, fp
   1bd2c:	cmp	r8, r5
   1bd30:	bhi	1bce8 <__assert_fail@plt+0xaabc>
   1bd34:	cmp	r4, r6
   1bd38:	bne	1bdb8 <__assert_fail@plt+0xab8c>
   1bd3c:	cmp	r8, r5
   1bd40:	beq	1bd68 <__assert_fail@plt+0xab3c>
   1bd44:	movw	r1, #59468	; 0xe84c
   1bd48:	movt	r1, #2
   1bd4c:	ldr	r3, [pc, #252]	; 1be50 <__assert_fail@plt+0xac24>
   1bd50:	movw	r0, #60852	; 0xedb4
   1bd54:	movt	r0, #2
   1bd58:	movw	r2, #4612	; 0x1204
   1bd5c:	bl	1122c <__assert_fail@plt>
   1bd60:	cmp	r6, #0
   1bd64:	bne	1bdd4 <__assert_fail@plt+0xaba8>
   1bd68:	ldr	r3, [sp, #4]
   1bd6c:	cmp	r3, #0
   1bd70:	strne	r5, [r3]
   1bd74:	add	sp, sp, #20
   1bd78:	ldrd	r4, [sp]
   1bd7c:	ldrd	r6, [sp, #8]
   1bd80:	ldrd	r8, [sp, #16]
   1bd84:	ldrd	sl, [sp, #24]
   1bd88:	add	sp, sp, #32
   1bd8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd90:	movw	r1, #292	; 0x124
   1bd94:	movt	r1, #4
   1bd98:	mul	r0, r8, r3
   1bd9c:	ldr	r1, [r1, #4]
   1bda0:	str	r3, [sp, #8]
   1bda4:	str	r2, [sp, #12]
   1bda8:	blx	r1
   1bdac:	ldr	r3, [sp, #8]
   1bdb0:	ldr	r2, [sp, #12]
   1bdb4:	b	1bc94 <__assert_fail@plt+0xaa68>
   1bdb8:	movw	r1, #59468	; 0xe84c
   1bdbc:	movt	r1, #2
   1bdc0:	ldr	r3, [pc, #136]	; 1be50 <__assert_fail@plt+0xac24>
   1bdc4:	movw	r0, #60844	; 0xedac
   1bdc8:	movt	r0, #2
   1bdcc:	movw	r2, #4611	; 0x1203
   1bdd0:	bl	1122c <__assert_fail@plt>
   1bdd4:	movw	r1, #59468	; 0xe84c
   1bdd8:	movt	r1, #2
   1bddc:	ldr	r3, [pc, #108]	; 1be50 <__assert_fail@plt+0xac24>
   1bde0:	movw	r0, #60800	; 0xed80
   1bde4:	movt	r0, #2
   1bde8:	movw	r2, #4528	; 0x11b0
   1bdec:	bl	1122c <__assert_fail@plt>
   1bdf0:	movw	r1, #59468	; 0xe84c
   1bdf4:	movt	r1, #2
   1bdf8:	ldr	r3, [pc, #80]	; 1be50 <__assert_fail@plt+0xac24>
   1bdfc:	movw	r0, #60712	; 0xed28
   1be00:	movt	r0, #2
   1be04:	movw	r2, #4527	; 0x11af
   1be08:	bl	1122c <__assert_fail@plt>
   1be0c:	movw	r1, #59468	; 0xe84c
   1be10:	movt	r1, #2
   1be14:	ldr	r3, [pc, #52]	; 1be50 <__assert_fail@plt+0xac24>
   1be18:	movw	r0, #60684	; 0xed0c
   1be1c:	movt	r0, #2
   1be20:	movw	r2, #4526	; 0x11ae
   1be24:	bl	1122c <__assert_fail@plt>
   1be28:	movw	r1, #59468	; 0xe84c
   1be2c:	movt	r1, #2
   1be30:	ldr	r3, [pc, #24]	; 1be50 <__assert_fail@plt+0xac24>
   1be34:	movw	r0, #60832	; 0xeda0
   1be38:	movt	r0, #2
   1be3c:	movw	r2, #4548	; 0x11c4
   1be40:	bl	1122c <__assert_fail@plt>
   1be44:	movw	r0, #60764	; 0xed5c
   1be48:	movt	r0, #2
   1be4c:	bl	13400 <__assert_fail@plt+0x21d4>
   1be50:	andeq	lr, r2, ip, lsl #16
   1be54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1be58:	movw	r4, #392	; 0x188
   1be5c:	movt	r4, #4
   1be60:	mov	r5, #0
   1be64:	cmp	r0, #2
   1be68:	strd	r6, [sp, #8]
   1be6c:	str	r8, [sp, #16]
   1be70:	str	lr, [sp, #20]
   1be74:	sub	sp, sp, #16
   1be78:	ldr	r6, [r4]
   1be7c:	str	r5, [r4]
   1be80:	beq	1beb0 <__assert_fail@plt+0xac84>
   1be84:	mov	r2, #0
   1be88:	movw	r3, #376	; 0x178
   1be8c:	movt	r3, #4
   1be90:	str	r6, [r4]
   1be94:	str	r2, [r3]
   1be98:	add	sp, sp, #16
   1be9c:	ldrd	r4, [sp]
   1bea0:	ldrd	r6, [sp, #8]
   1bea4:	ldr	r8, [sp, #16]
   1bea8:	add	sp, sp, #20
   1beac:	pop	{pc}		; (ldr pc, [sp], #4)
   1beb0:	mov	r8, r3
   1beb4:	mov	r7, r2
   1beb8:	str	r5, [sp]
   1bebc:	movw	r3, #60864	; 0xedc0
   1bec0:	movt	r3, #2
   1bec4:	movw	r2, #58160	; 0xe330
   1bec8:	movt	r2, #2
   1becc:	bl	1110c <getopt_long@plt>
   1bed0:	cmn	r0, #1
   1bed4:	beq	1be84 <__assert_fail@plt+0xac58>
   1bed8:	cmp	r0, #104	; 0x68
   1bedc:	beq	1bf18 <__assert_fail@plt+0xacec>
   1bee0:	cmp	r0, #118	; 0x76
   1bee4:	bne	1be84 <__assert_fail@plt+0xac58>
   1bee8:	add	ip, sp, #48	; 0x30
   1beec:	movw	r0, #388	; 0x184
   1bef0:	movt	r0, #4
   1bef4:	mov	r2, r8
   1bef8:	ldr	r3, [sp, #40]	; 0x28
   1befc:	mov	r1, r7
   1bf00:	str	ip, [sp]
   1bf04:	ldr	r0, [r0]
   1bf08:	str	ip, [sp, #12]
   1bf0c:	bl	2cce0 <__assert_fail@plt+0x1bab4>
   1bf10:	mov	r0, r5
   1bf14:	bl	11124 <exit@plt>
   1bf18:	mov	r0, r5
   1bf1c:	ldr	r3, [sp, #44]	; 0x2c
   1bf20:	blx	r3
   1bf24:	b	1be84 <__assert_fail@plt+0xac58>
   1bf28:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1bf2c:	mov	r5, #0
   1bf30:	movw	r4, #392	; 0x188
   1bf34:	movt	r4, #4
   1bf38:	strd	r6, [sp, #8]
   1bf3c:	movw	ip, #56684	; 0xdd6c
   1bf40:	movt	ip, #2
   1bf44:	strd	r8, [sp, #16]
   1bf48:	mov	r9, #1
   1bf4c:	str	lr, [sp, #24]
   1bf50:	sub	sp, sp, #20
   1bf54:	mov	r8, r3
   1bf58:	ldrb	lr, [sp, #52]	; 0x34
   1bf5c:	mov	r7, r2
   1bf60:	movw	r3, #60864	; 0xedc0
   1bf64:	movt	r3, #2
   1bf68:	movw	r2, #58160	; 0xe330
   1bf6c:	movt	r2, #2
   1bf70:	str	r5, [sp]
   1bf74:	ldr	r6, [r4]
   1bf78:	str	r9, [r4]
   1bf7c:	cmp	lr, r5
   1bf80:	movne	r2, ip
   1bf84:	bl	1110c <getopt_long@plt>
   1bf88:	cmn	r0, #1
   1bf8c:	beq	1bfb4 <__assert_fail@plt+0xad88>
   1bf90:	cmp	r0, #104	; 0x68
   1bf94:	beq	1c000 <__assert_fail@plt+0xadd4>
   1bf98:	cmp	r0, #118	; 0x76
   1bf9c:	beq	1bfd0 <__assert_fail@plt+0xada4>
   1bfa0:	movw	r3, #288	; 0x120
   1bfa4:	movt	r3, #4
   1bfa8:	ldr	r0, [r3]
   1bfac:	ldr	r3, [sp, #56]	; 0x38
   1bfb0:	blx	r3
   1bfb4:	str	r6, [r4]
   1bfb8:	add	sp, sp, #20
   1bfbc:	ldrd	r4, [sp]
   1bfc0:	ldrd	r6, [sp, #8]
   1bfc4:	ldrd	r8, [sp, #16]
   1bfc8:	add	sp, sp, #24
   1bfcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfd0:	add	ip, sp, #60	; 0x3c
   1bfd4:	movw	r0, #388	; 0x184
   1bfd8:	movt	r0, #4
   1bfdc:	mov	r2, r8
   1bfe0:	ldr	r3, [sp, #48]	; 0x30
   1bfe4:	mov	r1, r7
   1bfe8:	str	ip, [sp]
   1bfec:	ldr	r0, [r0]
   1bff0:	str	ip, [sp, #12]
   1bff4:	bl	2cce0 <__assert_fail@plt+0x1bab4>
   1bff8:	mov	r0, r5
   1bffc:	bl	11124 <exit@plt>
   1c000:	mov	r0, r5
   1c004:	ldr	r3, [sp, #56]	; 0x38
   1c008:	blx	r3
   1c00c:	b	1bfb4 <__assert_fail@plt+0xad88>
   1c010:	str	r4, [sp, #-8]!
   1c014:	mov	r4, r0
   1c018:	str	lr, [sp, #4]
   1c01c:	bl	10f98 <wcwidth@plt>
   1c020:	cmp	r0, #0
   1c024:	bge	1c038 <__assert_fail@plt+0xae0c>
   1c028:	mov	r0, r4
   1c02c:	bl	11040 <iswcntrl@plt>
   1c030:	clz	r0, r0
   1c034:	lsr	r0, r0, #5
   1c038:	ldr	r4, [sp]
   1c03c:	add	sp, sp, #4
   1c040:	pop	{pc}		; (ldr pc, [sp], #4)
   1c044:	mov	r3, r1
   1c048:	strd	r4, [sp, #-16]!
   1c04c:	mov	r4, r1
   1c050:	ldr	r2, [r1, #4]
   1c054:	mov	r5, r0
   1c058:	ldr	r1, [r3], #16
   1c05c:	str	r6, [sp, #8]
   1c060:	str	lr, [sp, #12]
   1c064:	cmp	r1, r3
   1c068:	strne	r1, [r0]
   1c06c:	beq	1c098 <__assert_fail@plt+0xae6c>
   1c070:	ldrb	r3, [r4, #8]
   1c074:	str	r2, [r5, #4]
   1c078:	ldr	r6, [sp, #8]
   1c07c:	cmp	r3, #0
   1c080:	strb	r3, [r5, #8]
   1c084:	ldrne	r3, [r4, #12]
   1c088:	strne	r3, [r5, #12]
   1c08c:	ldrd	r4, [sp]
   1c090:	add	sp, sp, #12
   1c094:	pop	{pc}		; (ldr pc, [sp], #4)
   1c098:	add	r3, r0, #16
   1c09c:	mov	r0, r3
   1c0a0:	bl	10fd4 <memcpy@plt>
   1c0a4:	ldr	r2, [r4, #4]
   1c0a8:	str	r0, [r5]
   1c0ac:	b	1c070 <__assert_fail@plt+0xae44>
   1c0b0:	lsr	r2, r0, #5
   1c0b4:	movw	r3, #60928	; 0xee00
   1c0b8:	movt	r3, #2
   1c0bc:	and	r0, r0, #31
   1c0c0:	ldr	r3, [r3, r2, lsl #2]
   1c0c4:	lsr	r0, r3, r0
   1c0c8:	and	r0, r0, #1
   1c0cc:	bx	lr
   1c0d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c0d4:	mov	r5, r2
   1c0d8:	strd	r6, [sp, #8]
   1c0dc:	subs	r6, r0, #0
   1c0e0:	mov	r7, r1
   1c0e4:	str	lr, [sp, #16]
   1c0e8:	sub	sp, sp, #12
   1c0ec:	addeq	r6, sp, #4
   1c0f0:	mov	r0, r6
   1c0f4:	bl	11088 <mbrtowc@plt>
   1c0f8:	cmp	r5, #0
   1c0fc:	cmnne	r0, #3
   1c100:	mov	r4, r0
   1c104:	bhi	1c120 <__assert_fail@plt+0xaef4>
   1c108:	mov	r0, r4
   1c10c:	add	sp, sp, #12
   1c110:	ldrd	r4, [sp]
   1c114:	ldrd	r6, [sp, #8]
   1c118:	add	sp, sp, #16
   1c11c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c120:	mov	r0, #0
   1c124:	bl	2d744 <__assert_fail@plt+0x1c518>
   1c128:	cmp	r0, #0
   1c12c:	bne	1c108 <__assert_fail@plt+0xaedc>
   1c130:	ldrb	r3, [r7]
   1c134:	mov	r4, #1
   1c138:	str	r3, [r6]
   1c13c:	b	1c108 <__assert_fail@plt+0xaedc>
   1c140:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c144:	mov	r5, r0
   1c148:	mov	r4, r1
   1c14c:	strd	r6, [sp, #8]
   1c150:	str	r8, [sp, #16]
   1c154:	str	lr, [sp, #20]
   1c158:	sub	sp, sp, #56	; 0x38
   1c15c:	bl	11070 <__ctype_get_mb_cur_max@plt>
   1c160:	cmp	r0, #1
   1c164:	bls	1c174 <__assert_fail@plt+0xaf48>
   1c168:	uxtb	r7, r4
   1c16c:	cmp	r7, #47	; 0x2f
   1c170:	bhi	1c198 <__assert_fail@plt+0xaf6c>
   1c174:	mov	r1, r4
   1c178:	mov	r0, r5
   1c17c:	add	sp, sp, #56	; 0x38
   1c180:	ldrd	r4, [sp]
   1c184:	ldrd	r6, [sp, #8]
   1c188:	ldr	r8, [sp, #16]
   1c18c:	ldr	lr, [sp, #20]
   1c190:	add	sp, sp, #24
   1c194:	b	1113c <strchr@plt>
   1c198:	mov	r3, #0
   1c19c:	mov	r0, #0
   1c1a0:	mov	r1, #0
   1c1a4:	movw	r6, #60928	; 0xee00
   1c1a8:	movt	r6, #2
   1c1ac:	strb	r3, [sp]
   1c1b0:	strd	r0, [sp, #4]
   1c1b4:	strb	r3, [sp, #12]
   1c1b8:	str	r5, [sp, #16]
   1c1bc:	mov	r5, #1
   1c1c0:	b	1c21c <__assert_fail@plt+0xaff0>
   1c1c4:	ldrb	r3, [r4]
   1c1c8:	lsr	r2, r3, #5
   1c1cc:	and	r3, r3, #31
   1c1d0:	ldr	r2, [r6, r2, lsl #2]
   1c1d4:	lsr	r3, r2, r3
   1c1d8:	tst	r3, #1
   1c1dc:	beq	1c2ac <__assert_fail@plt+0xb080>
   1c1e0:	str	r5, [sp, #20]
   1c1e4:	ldrb	r0, [r4]
   1c1e8:	strb	r5, [sp, #12]
   1c1ec:	strb	r5, [sp, #24]
   1c1f0:	cmp	r0, #0
   1c1f4:	str	r0, [sp, #28]
   1c1f8:	beq	1c368 <__assert_fail@plt+0xb13c>
   1c1fc:	mov	r0, #1
   1c200:	ldrb	r3, [r4]
   1c204:	cmp	r3, r7
   1c208:	beq	1c2ec <__assert_fail@plt+0xb0c0>
   1c20c:	add	r4, r4, r0
   1c210:	mov	r3, #0
   1c214:	strb	r3, [sp, #12]
   1c218:	str	r4, [sp, #16]
   1c21c:	ldrb	r3, [sp]
   1c220:	ldr	r4, [sp, #16]
   1c224:	cmp	r3, #0
   1c228:	addne	r8, sp, #4
   1c22c:	beq	1c1c4 <__assert_fail@plt+0xaf98>
   1c230:	bl	11070 <__ctype_get_mb_cur_max@plt>
   1c234:	mov	r1, r0
   1c238:	mov	r0, r4
   1c23c:	bl	2c63c <__assert_fail@plt+0x1b410>
   1c240:	mov	r2, r0
   1c244:	mov	r3, r8
   1c248:	mov	r1, r4
   1c24c:	add	r0, sp, #28
   1c250:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   1c254:	cmn	r0, #1
   1c258:	str	r0, [sp, #20]
   1c25c:	beq	1c2c8 <__assert_fail@plt+0xb09c>
   1c260:	cmn	r0, #2
   1c264:	beq	1c308 <__assert_fail@plt+0xb0dc>
   1c268:	cmp	r0, #0
   1c26c:	beq	1c328 <__assert_fail@plt+0xb0fc>
   1c270:	ldr	r4, [sp, #28]
   1c274:	mov	r0, r8
   1c278:	strb	r5, [sp, #24]
   1c27c:	bl	10ff8 <mbsinit@plt>
   1c280:	cmp	r0, #0
   1c284:	strb	r5, [sp, #12]
   1c288:	movne	r3, #0
   1c28c:	strbne	r3, [sp]
   1c290:	cmp	r4, #0
   1c294:	beq	1c2ec <__assert_fail@plt+0xb0c0>
   1c298:	ldr	r4, [sp, #16]
   1c29c:	ldr	r0, [sp, #20]
   1c2a0:	cmp	r0, #1
   1c2a4:	bne	1c20c <__assert_fail@plt+0xafe0>
   1c2a8:	b	1c200 <__assert_fail@plt+0xafd4>
   1c2ac:	add	r8, sp, #4
   1c2b0:	mov	r0, r8
   1c2b4:	bl	10ff8 <mbsinit@plt>
   1c2b8:	cmp	r0, #0
   1c2bc:	beq	1c370 <__assert_fail@plt+0xb144>
   1c2c0:	strb	r5, [sp]
   1c2c4:	b	1c230 <__assert_fail@plt+0xb004>
   1c2c8:	ldr	r4, [sp, #16]
   1c2cc:	mov	r3, #0
   1c2d0:	mov	r0, #1
   1c2d4:	strb	r5, [sp, #12]
   1c2d8:	str	r5, [sp, #20]
   1c2dc:	strb	r3, [sp, #24]
   1c2e0:	ldrb	r3, [r4]
   1c2e4:	cmp	r3, r7
   1c2e8:	bne	1c20c <__assert_fail@plt+0xafe0>
   1c2ec:	mov	r0, r4
   1c2f0:	add	sp, sp, #56	; 0x38
   1c2f4:	ldrd	r4, [sp]
   1c2f8:	ldrd	r6, [sp, #8]
   1c2fc:	ldr	r8, [sp, #16]
   1c300:	add	sp, sp, #20
   1c304:	pop	{pc}		; (ldr pc, [sp], #4)
   1c308:	ldr	r4, [sp, #16]
   1c30c:	mov	r0, r4
   1c310:	bl	11130 <strlen@plt>
   1c314:	mov	r3, #0
   1c318:	strb	r5, [sp, #12]
   1c31c:	str	r0, [sp, #20]
   1c320:	strb	r3, [sp, #24]
   1c324:	b	1c29c <__assert_fail@plt+0xb070>
   1c328:	ldr	r4, [sp, #16]
   1c32c:	str	r5, [sp, #20]
   1c330:	ldrb	r3, [r4]
   1c334:	cmp	r3, #0
   1c338:	bne	1c390 <__assert_fail@plt+0xb164>
   1c33c:	ldr	r4, [sp, #28]
   1c340:	cmp	r4, #0
   1c344:	beq	1c274 <__assert_fail@plt+0xb048>
   1c348:	movw	r3, #60960	; 0xee20
   1c34c:	movt	r3, #2
   1c350:	movw	r1, #60980	; 0xee34
   1c354:	movt	r1, #2
   1c358:	movw	r0, #55792	; 0xd9f0
   1c35c:	movt	r0, #2
   1c360:	mov	r2, #172	; 0xac
   1c364:	bl	1122c <__assert_fail@plt>
   1c368:	mov	r4, r0
   1c36c:	b	1c2ec <__assert_fail@plt+0xb0c0>
   1c370:	movw	r3, #60960	; 0xee20
   1c374:	movt	r3, #2
   1c378:	movw	r1, #60980	; 0xee34
   1c37c:	movt	r1, #2
   1c380:	movw	r0, #58076	; 0xe2dc
   1c384:	movt	r0, #2
   1c388:	mov	r2, #143	; 0x8f
   1c38c:	bl	1122c <__assert_fail@plt>
   1c390:	movw	r3, #60960	; 0xee20
   1c394:	movt	r3, #2
   1c398:	movw	r1, #60980	; 0xee34
   1c39c:	movt	r1, #2
   1c3a0:	movw	r0, #58100	; 0xe2f4
   1c3a4:	movt	r0, #2
   1c3a8:	mov	r2, #171	; 0xab
   1c3ac:	bl	1122c <__assert_fail@plt>
   1c3b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c3b4:	mov	r4, r0
   1c3b8:	strd	r6, [sp, #8]
   1c3bc:	str	r8, [sp, #16]
   1c3c0:	str	lr, [sp, #20]
   1c3c4:	sub	sp, sp, #56	; 0x38
   1c3c8:	bl	11070 <__ctype_get_mb_cur_max@plt>
   1c3cc:	cmp	r0, #1
   1c3d0:	bhi	1c3fc <__assert_fail@plt+0xb1d0>
   1c3d4:	mov	r0, r4
   1c3d8:	bl	11130 <strlen@plt>
   1c3dc:	mov	r5, r0
   1c3e0:	mov	r0, r5
   1c3e4:	add	sp, sp, #56	; 0x38
   1c3e8:	ldrd	r4, [sp]
   1c3ec:	ldrd	r6, [sp, #8]
   1c3f0:	ldr	r8, [sp, #16]
   1c3f4:	add	sp, sp, #20
   1c3f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3fc:	mov	r3, #0
   1c400:	mov	r0, #0
   1c404:	mov	r1, #0
   1c408:	movw	r7, #60928	; 0xee00
   1c40c:	movt	r7, #2
   1c410:	mov	r5, r3
   1c414:	strb	r3, [sp]
   1c418:	mov	r6, #1
   1c41c:	strd	r0, [sp, #4]
   1c420:	strb	r3, [sp, #12]
   1c424:	str	r4, [sp, #16]
   1c428:	b	1c480 <__assert_fail@plt+0xb254>
   1c42c:	ldrb	r3, [r4]
   1c430:	lsr	r2, r3, #5
   1c434:	and	r3, r3, #31
   1c438:	ldr	r2, [r7, r2, lsl #2]
   1c43c:	lsr	r3, r2, r3
   1c440:	tst	r3, #1
   1c444:	beq	1c4f0 <__assert_fail@plt+0xb2c4>
   1c448:	str	r6, [sp, #20]
   1c44c:	ldrb	r3, [r4]
   1c450:	strb	r6, [sp, #24]
   1c454:	mov	r4, r3
   1c458:	str	r3, [sp, #28]
   1c45c:	cmp	r4, #0
   1c460:	beq	1c3e0 <__assert_fail@plt+0xb1b4>
   1c464:	ldr	r4, [sp, #16]
   1c468:	mov	r2, #0
   1c46c:	add	r5, r5, #1
   1c470:	ldr	r3, [sp, #20]
   1c474:	strb	r2, [sp, #12]
   1c478:	add	r4, r4, r3
   1c47c:	str	r4, [sp, #16]
   1c480:	ldrb	r3, [sp]
   1c484:	cmp	r3, #0
   1c488:	addne	r8, sp, #4
   1c48c:	beq	1c42c <__assert_fail@plt+0xb200>
   1c490:	bl	11070 <__ctype_get_mb_cur_max@plt>
   1c494:	mov	r1, r0
   1c498:	mov	r0, r4
   1c49c:	bl	2c63c <__assert_fail@plt+0x1b410>
   1c4a0:	mov	r2, r0
   1c4a4:	mov	r3, r8
   1c4a8:	mov	r1, r4
   1c4ac:	add	r0, sp, #28
   1c4b0:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   1c4b4:	cmn	r0, #1
   1c4b8:	str	r0, [sp, #20]
   1c4bc:	beq	1c50c <__assert_fail@plt+0xb2e0>
   1c4c0:	cmn	r0, #2
   1c4c4:	beq	1c520 <__assert_fail@plt+0xb2f4>
   1c4c8:	cmp	r0, #0
   1c4cc:	beq	1c53c <__assert_fail@plt+0xb310>
   1c4d0:	ldr	r4, [sp, #28]
   1c4d4:	mov	r0, r8
   1c4d8:	strb	r6, [sp, #24]
   1c4dc:	bl	10ff8 <mbsinit@plt>
   1c4e0:	cmp	r0, #0
   1c4e4:	movne	r3, #0
   1c4e8:	strbne	r3, [sp]
   1c4ec:	b	1c45c <__assert_fail@plt+0xb230>
   1c4f0:	add	r8, sp, #4
   1c4f4:	mov	r0, r8
   1c4f8:	bl	10ff8 <mbsinit@plt>
   1c4fc:	cmp	r0, #0
   1c500:	beq	1c57c <__assert_fail@plt+0xb350>
   1c504:	strb	r6, [sp]
   1c508:	b	1c490 <__assert_fail@plt+0xb264>
   1c50c:	mov	r3, #0
   1c510:	str	r6, [sp, #20]
   1c514:	ldr	r4, [sp, #16]
   1c518:	strb	r3, [sp, #24]
   1c51c:	b	1c468 <__assert_fail@plt+0xb23c>
   1c520:	ldr	r4, [sp, #16]
   1c524:	mov	r0, r4
   1c528:	bl	11130 <strlen@plt>
   1c52c:	mov	r3, #0
   1c530:	str	r0, [sp, #20]
   1c534:	strb	r3, [sp, #24]
   1c538:	b	1c468 <__assert_fail@plt+0xb23c>
   1c53c:	ldr	r4, [sp, #16]
   1c540:	str	r6, [sp, #20]
   1c544:	ldrb	r3, [r4]
   1c548:	cmp	r3, #0
   1c54c:	bne	1c59c <__assert_fail@plt+0xb370>
   1c550:	ldr	r4, [sp, #28]
   1c554:	cmp	r4, #0
   1c558:	beq	1c4d4 <__assert_fail@plt+0xb2a8>
   1c55c:	movw	r3, #60996	; 0xee44
   1c560:	movt	r3, #2
   1c564:	movw	r1, #60980	; 0xee34
   1c568:	movt	r1, #2
   1c56c:	movw	r0, #55792	; 0xd9f0
   1c570:	movt	r0, #2
   1c574:	mov	r2, #172	; 0xac
   1c578:	bl	1122c <__assert_fail@plt>
   1c57c:	movw	r3, #60996	; 0xee44
   1c580:	movt	r3, #2
   1c584:	movw	r1, #60980	; 0xee34
   1c588:	movt	r1, #2
   1c58c:	movw	r0, #58076	; 0xe2dc
   1c590:	movt	r0, #2
   1c594:	mov	r2, #143	; 0x8f
   1c598:	bl	1122c <__assert_fail@plt>
   1c59c:	movw	r3, #60996	; 0xee44
   1c5a0:	movt	r3, #2
   1c5a4:	movw	r1, #60980	; 0xee34
   1c5a8:	movt	r1, #2
   1c5ac:	movw	r0, #58100	; 0xe2f4
   1c5b0:	movt	r0, #2
   1c5b4:	mov	r2, #171	; 0xab
   1c5b8:	bl	1122c <__assert_fail@plt>
   1c5bc:	strd	r4, [sp, #-16]!
   1c5c0:	subs	r4, r0, #0
   1c5c4:	str	r6, [sp, #8]
   1c5c8:	str	lr, [sp, #12]
   1c5cc:	beq	1c664 <__assert_fail@plt+0xb438>
   1c5d0:	mov	r1, #47	; 0x2f
   1c5d4:	bl	111e4 <strrchr@plt>
   1c5d8:	subs	r5, r0, #0
   1c5dc:	beq	1c63c <__assert_fail@plt+0xb410>
   1c5e0:	add	r6, r5, #1
   1c5e4:	sub	r3, r6, r4
   1c5e8:	cmp	r3, #6
   1c5ec:	ble	1c63c <__assert_fail@plt+0xb410>
   1c5f0:	movw	r1, #61072	; 0xee90
   1c5f4:	movt	r1, #2
   1c5f8:	mov	r2, #7
   1c5fc:	sub	r0, r5, #6
   1c600:	bl	11214 <strncmp@plt>
   1c604:	cmp	r0, #0
   1c608:	bne	1c63c <__assert_fail@plt+0xb410>
   1c60c:	movw	r1, #61080	; 0xee98
   1c610:	movt	r1, #2
   1c614:	mov	r2, #3
   1c618:	mov	r0, r6
   1c61c:	bl	11214 <strncmp@plt>
   1c620:	cmp	r0, #0
   1c624:	movne	r4, r6
   1c628:	bne	1c63c <__assert_fail@plt+0xb410>
   1c62c:	add	r4, r5, #4
   1c630:	movw	r3, #368	; 0x170
   1c634:	movt	r3, #4
   1c638:	str	r4, [r3]
   1c63c:	movw	r2, #412	; 0x19c
   1c640:	movt	r2, #4
   1c644:	ldr	r6, [sp, #8]
   1c648:	movw	r3, #372	; 0x174
   1c64c:	movt	r3, #4
   1c650:	str	r4, [r2]
   1c654:	str	r4, [r3]
   1c658:	ldrd	r4, [sp]
   1c65c:	add	sp, sp, #12
   1c660:	pop	{pc}		; (ldr pc, [sp], #4)
   1c664:	movw	r3, #384	; 0x180
   1c668:	movt	r3, #4
   1c66c:	movw	r0, #61016	; 0xee58
   1c670:	movt	r0, #2
   1c674:	ldr	r3, [r3]
   1c678:	mov	r2, #55	; 0x37
   1c67c:	mov	r1, #1
   1c680:	bl	11058 <fwrite@plt>
   1c684:	bl	11220 <abort@plt>
   1c688:	strd	r4, [sp, #-16]!
   1c68c:	mov	r4, #0
   1c690:	mov	r5, #0
   1c694:	cmp	r1, #10
   1c698:	str	r6, [sp, #8]
   1c69c:	strd	r4, [r0]
   1c6a0:	strd	r4, [r0, #8]
   1c6a4:	str	lr, [sp, #12]
   1c6a8:	strd	r4, [r0, #16]
   1c6ac:	strd	r4, [r0, #24]
   1c6b0:	strd	r4, [r0, #32]
   1c6b4:	strd	r4, [r0, #40]	; 0x28
   1c6b8:	beq	1c6d0 <__assert_fail@plt+0xb4a4>
   1c6bc:	ldrd	r4, [sp]
   1c6c0:	str	r1, [r0]
   1c6c4:	ldr	r6, [sp, #8]
   1c6c8:	add	sp, sp, #12
   1c6cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6d0:	bl	11220 <abort@plt>
   1c6d4:	mov	r2, #5
   1c6d8:	strd	r4, [sp, #-16]!
   1c6dc:	mov	r5, r0
   1c6e0:	str	r6, [sp, #8]
   1c6e4:	mov	r6, r1
   1c6e8:	mov	r1, r0
   1c6ec:	mov	r0, #0
   1c6f0:	str	lr, [sp, #12]
   1c6f4:	bl	1101c <dcgettext@plt>
   1c6f8:	cmp	r5, r0
   1c6fc:	mov	r4, r0
   1c700:	beq	1c718 <__assert_fail@plt+0xb4ec>
   1c704:	mov	r0, r4
   1c708:	ldrd	r4, [sp]
   1c70c:	ldr	r6, [sp, #8]
   1c710:	add	sp, sp, #12
   1c714:	pop	{pc}		; (ldr pc, [sp], #4)
   1c718:	bl	2d79c <__assert_fail@plt+0x1c570>
   1c71c:	ldrb	r3, [r0]
   1c720:	bic	r3, r3, #32
   1c724:	cmp	r3, #85	; 0x55
   1c728:	bne	1c790 <__assert_fail@plt+0xb564>
   1c72c:	ldrb	r3, [r0, #1]
   1c730:	bic	r3, r3, #32
   1c734:	cmp	r3, #84	; 0x54
   1c738:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c73c:	ldrb	r3, [r0, #2]
   1c740:	bic	r3, r3, #32
   1c744:	cmp	r3, #70	; 0x46
   1c748:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c74c:	ldrb	r3, [r0, #3]
   1c750:	cmp	r3, #45	; 0x2d
   1c754:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c758:	ldrb	r3, [r0, #4]
   1c75c:	cmp	r3, #56	; 0x38
   1c760:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c764:	ldrb	r3, [r0, #5]
   1c768:	cmp	r3, #0
   1c76c:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c770:	ldrb	r2, [r4]
   1c774:	movw	r3, #61172	; 0xeef4
   1c778:	movt	r3, #2
   1c77c:	movw	r4, #61184	; 0xef00
   1c780:	movt	r4, #2
   1c784:	cmp	r2, #96	; 0x60
   1c788:	movne	r4, r3
   1c78c:	b	1c704 <__assert_fail@plt+0xb4d8>
   1c790:	cmp	r3, #71	; 0x47
   1c794:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c798:	ldrb	r3, [r0, #1]
   1c79c:	bic	r3, r3, #32
   1c7a0:	cmp	r3, #66	; 0x42
   1c7a4:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c7a8:	ldrb	r3, [r0, #2]
   1c7ac:	cmp	r3, #49	; 0x31
   1c7b0:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c7b4:	ldrb	r3, [r0, #3]
   1c7b8:	cmp	r3, #56	; 0x38
   1c7bc:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c7c0:	ldrb	r3, [r0, #4]
   1c7c4:	cmp	r3, #48	; 0x30
   1c7c8:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c7cc:	ldrb	r3, [r0, #5]
   1c7d0:	cmp	r3, #51	; 0x33
   1c7d4:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c7d8:	ldrb	r3, [r0, #6]
   1c7dc:	cmp	r3, #48	; 0x30
   1c7e0:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c7e4:	ldrb	r3, [r0, #7]
   1c7e8:	cmp	r3, #0
   1c7ec:	bne	1c810 <__assert_fail@plt+0xb5e4>
   1c7f0:	ldrb	r2, [r4]
   1c7f4:	movw	r3, #61176	; 0xeef8
   1c7f8:	movt	r3, #2
   1c7fc:	movw	r4, #61180	; 0xeefc
   1c800:	movt	r4, #2
   1c804:	cmp	r2, #96	; 0x60
   1c808:	movne	r4, r3
   1c80c:	b	1c704 <__assert_fail@plt+0xb4d8>
   1c810:	movw	r3, #61188	; 0xef04
   1c814:	movt	r3, #2
   1c818:	cmp	r6, #9
   1c81c:	movw	r4, #61168	; 0xeef0
   1c820:	movt	r4, #2
   1c824:	movne	r4, r3
   1c828:	b	1c704 <__assert_fail@plt+0xb4d8>
   1c82c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c830:	strd	r6, [sp, #8]
   1c834:	strd	r8, [sp, #16]
   1c838:	strd	sl, [sp, #24]
   1c83c:	mov	fp, r0
   1c840:	mov	sl, r1
   1c844:	str	lr, [sp, #32]
   1c848:	sub	sp, sp, #116	; 0x74
   1c84c:	ldr	r8, [sp, #152]	; 0x98
   1c850:	str	r3, [sp, #28]
   1c854:	ldr	r3, [sp, #156]	; 0x9c
   1c858:	str	r2, [sp, #32]
   1c85c:	and	r4, r3, #2
   1c860:	ubfx	r3, r3, #1, #1
   1c864:	str	r3, [sp, #44]	; 0x2c
   1c868:	bl	11070 <__ctype_get_mb_cur_max@plt>
   1c86c:	str	r0, [sp, #64]	; 0x40
   1c870:	cmp	r8, #10
   1c874:	ldrls	pc, [pc, r8, lsl #2]
   1c878:	b	1dfe8 <__assert_fail@plt+0xcdbc>
   1c87c:	andeq	ip, r1, r0, lsl #25
   1c880:	andeq	ip, r1, ip, lsl sp
   1c884:	strdeq	sp, [r1], -r8
   1c888:	andeq	ip, r1, ip, lsr sp
   1c88c:	andeq	ip, r1, r4, ror #23
   1c890:	andeq	ip, r1, r0, lsr ip
   1c894:			; <UNDEFINED> instruction: 0x0001ccb0
   1c898:	andeq	ip, r1, ip, ror #25
   1c89c:	andeq	ip, r1, r8, lsr #17
   1c8a0:	andeq	ip, r1, r8, lsr #17
   1c8a4:	andeq	ip, r1, r8, lsr #17
   1c8a8:	cmp	r8, #10
   1c8ac:	beq	1c8d8 <__assert_fail@plt+0xb6ac>
   1c8b0:	mov	r1, r8
   1c8b4:	movw	r0, #61192	; 0xef08
   1c8b8:	movt	r0, #2
   1c8bc:	bl	1c6d4 <__assert_fail@plt+0xb4a8>
   1c8c0:	mov	r1, r8
   1c8c4:	str	r0, [sp, #164]	; 0xa4
   1c8c8:	movw	r0, #61188	; 0xef04
   1c8cc:	movt	r0, #2
   1c8d0:	bl	1c6d4 <__assert_fail@plt+0xb4a8>
   1c8d4:	str	r0, [sp, #168]	; 0xa8
   1c8d8:	cmp	r4, #0
   1c8dc:	movne	r4, #0
   1c8e0:	beq	1dcc4 <__assert_fail@plt+0xca98>
   1c8e4:	mov	r3, #1
   1c8e8:	mov	r5, #0
   1c8ec:	ldr	r0, [sp, #168]	; 0xa8
   1c8f0:	str	r3, [sp, #36]	; 0x24
   1c8f4:	str	r3, [sp, #40]	; 0x28
   1c8f8:	str	r5, [sp, #68]	; 0x44
   1c8fc:	bl	11130 <strlen@plt>
   1c900:	ldr	r3, [sp, #168]	; 0xa8
   1c904:	str	r5, [sp, #48]	; 0x30
   1c908:	str	r0, [sp, #56]	; 0x38
   1c90c:	str	r3, [sp, #60]	; 0x3c
   1c910:	str	r5, [sp, #72]	; 0x48
   1c914:	str	r8, [sp, #152]	; 0x98
   1c918:	mov	r8, fp
   1c91c:	mov	r9, #0
   1c920:	ldr	fp, [sp, #152]	; 0x98
   1c924:	ldr	r3, [sp, #28]
   1c928:	cmn	r3, #1
   1c92c:	beq	1ce8c <__assert_fail@plt+0xbc60>
   1c930:	ldr	r3, [sp, #28]
   1c934:	subs	r6, r3, r9
   1c938:	movne	r6, #1
   1c93c:	cmp	r6, #0
   1c940:	beq	1cea4 <__assert_fail@plt+0xbc78>
   1c944:	ldr	r0, [sp, #32]
   1c948:	ldr	r7, [sp, #40]	; 0x28
   1c94c:	add	r3, r0, r9
   1c950:	cmp	fp, #2
   1c954:	moveq	r7, #0
   1c958:	andne	r7, r7, #1
   1c95c:	str	r3, [sp, #52]	; 0x34
   1c960:	cmp	r7, #0
   1c964:	beq	1d340 <__assert_fail@plt+0xc114>
   1c968:	ldr	r2, [sp, #56]	; 0x38
   1c96c:	cmp	r2, #0
   1c970:	beq	1d5dc <__assert_fail@plt+0xc3b0>
   1c974:	ldr	r1, [sp, #28]
   1c978:	cmp	r2, #1
   1c97c:	mov	r3, r2
   1c980:	movls	r3, #0
   1c984:	movhi	r3, #1
   1c988:	add	r5, r9, r2
   1c98c:	cmn	r1, #1
   1c990:	movne	r3, #0
   1c994:	cmp	r3, #0
   1c998:	beq	1c9a4 <__assert_fail@plt+0xb778>
   1c99c:	bl	11130 <strlen@plt>
   1c9a0:	str	r0, [sp, #28]
   1c9a4:	ldr	r3, [sp, #28]
   1c9a8:	cmp	r5, r3
   1c9ac:	bhi	1d5dc <__assert_fail@plt+0xc3b0>
   1c9b0:	ldr	r0, [sp, #52]	; 0x34
   1c9b4:	ldr	r2, [sp, #56]	; 0x38
   1c9b8:	ldr	r1, [sp, #60]	; 0x3c
   1c9bc:	bl	11004 <memcmp@plt>
   1c9c0:	cmp	r0, #0
   1c9c4:	bne	1d5dc <__assert_fail@plt+0xc3b0>
   1c9c8:	ldr	r3, [sp, #44]	; 0x2c
   1c9cc:	cmp	r3, #0
   1c9d0:	bne	1df0c <__assert_fail@plt+0xcce0>
   1c9d4:	ldr	r3, [sp, #52]	; 0x34
   1c9d8:	ldrb	r5, [r3]
   1c9dc:	cmp	r5, #126	; 0x7e
   1c9e0:	ldrls	pc, [pc, r5, lsl #2]
   1c9e4:	b	1d29c <__assert_fail@plt+0xc070>
   1c9e8:	andeq	sp, r1, r0, lsr #3
   1c9ec:	muleq	r1, ip, r2
   1c9f0:	muleq	r1, ip, r2
   1c9f4:	muleq	r1, ip, r2
   1c9f8:	muleq	r1, ip, r2
   1c9fc:	muleq	r1, ip, r2
   1ca00:	muleq	r1, ip, r2
   1ca04:	andeq	sp, r1, r4, ror r1
   1ca08:	andeq	sp, r1, ip, ror #2
   1ca0c:	strheq	sp, [r1], -r4
   1ca10:	andeq	sp, r1, r0, ror #2
   1ca14:	andeq	sp, r1, ip, lsr #1
   1ca18:	andeq	sp, r1, ip, lsr r1
   1ca1c:	andeq	sp, r1, r8, lsl #3
   1ca20:	muleq	r1, ip, r2
   1ca24:	muleq	r1, ip, r2
   1ca28:	muleq	r1, ip, r2
   1ca2c:	muleq	r1, ip, r2
   1ca30:	muleq	r1, ip, r2
   1ca34:	muleq	r1, ip, r2
   1ca38:	muleq	r1, ip, r2
   1ca3c:	muleq	r1, ip, r2
   1ca40:	muleq	r1, ip, r2
   1ca44:	muleq	r1, ip, r2
   1ca48:	muleq	r1, ip, r2
   1ca4c:	muleq	r1, ip, r2
   1ca50:	muleq	r1, ip, r2
   1ca54:	muleq	r1, ip, r2
   1ca58:	muleq	r1, ip, r2
   1ca5c:	muleq	r1, ip, r2
   1ca60:	muleq	r1, ip, r2
   1ca64:	muleq	r1, ip, r2
   1ca68:	andeq	sp, r1, r8, ror r2
   1ca6c:	andeq	sp, r1, r0, lsl #3
   1ca70:	andeq	sp, r1, r0, lsl #3
   1ca74:	andeq	sp, r1, ip, asr r2
   1ca78:	andeq	sp, r1, r0, lsl #3
   1ca7c:	muleq	r1, r0, r2
   1ca80:	andeq	sp, r1, r0, lsl #3
   1ca84:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca88:	andeq	sp, r1, r0, lsl #3
   1ca8c:	andeq	sp, r1, r0, lsl #3
   1ca90:	andeq	sp, r1, r0, lsl #3
   1ca94:	muleq	r1, r0, r2
   1ca98:	muleq	r1, r0, r2
   1ca9c:	muleq	r1, r0, r2
   1caa0:	muleq	r1, r0, r2
   1caa4:	muleq	r1, r0, r2
   1caa8:	muleq	r1, r0, r2
   1caac:	muleq	r1, r0, r2
   1cab0:	muleq	r1, r0, r2
   1cab4:	muleq	r1, r0, r2
   1cab8:	muleq	r1, r0, r2
   1cabc:	muleq	r1, r0, r2
   1cac0:	muleq	r1, r0, r2
   1cac4:	muleq	r1, r0, r2
   1cac8:	muleq	r1, r0, r2
   1cacc:	muleq	r1, r0, r2
   1cad0:	muleq	r1, r0, r2
   1cad4:	andeq	sp, r1, r0, lsl #3
   1cad8:	andeq	sp, r1, r0, lsl #3
   1cadc:	andeq	sp, r1, r0, lsl #3
   1cae0:	andeq	sp, r1, r0, lsl #3
   1cae4:			; <UNDEFINED> instruction: 0x0001cfb0
   1cae8:	muleq	r1, ip, r2
   1caec:	muleq	r1, r0, r2
   1caf0:	muleq	r1, r0, r2
   1caf4:	muleq	r1, r0, r2
   1caf8:	muleq	r1, r0, r2
   1cafc:	muleq	r1, r0, r2
   1cb00:	muleq	r1, r0, r2
   1cb04:	muleq	r1, r0, r2
   1cb08:	muleq	r1, r0, r2
   1cb0c:	muleq	r1, r0, r2
   1cb10:	muleq	r1, r0, r2
   1cb14:	muleq	r1, r0, r2
   1cb18:	muleq	r1, r0, r2
   1cb1c:	muleq	r1, r0, r2
   1cb20:	muleq	r1, r0, r2
   1cb24:	muleq	r1, r0, r2
   1cb28:	muleq	r1, r0, r2
   1cb2c:	muleq	r1, r0, r2
   1cb30:	muleq	r1, r0, r2
   1cb34:	muleq	r1, r0, r2
   1cb38:	muleq	r1, r0, r2
   1cb3c:	muleq	r1, r0, r2
   1cb40:	muleq	r1, r0, r2
   1cb44:	muleq	r1, r0, r2
   1cb48:	muleq	r1, r0, r2
   1cb4c:	muleq	r1, r0, r2
   1cb50:	muleq	r1, r0, r2
   1cb54:	andeq	sp, r1, r0, lsl #3
   1cb58:	andeq	ip, r1, r8, asr pc
   1cb5c:	muleq	r1, r0, r2
   1cb60:	andeq	sp, r1, r0, lsl #3
   1cb64:	muleq	r1, r0, r2
   1cb68:	andeq	sp, r1, r0, lsl #3
   1cb6c:	muleq	r1, r0, r2
   1cb70:	muleq	r1, r0, r2
   1cb74:	muleq	r1, r0, r2
   1cb78:	muleq	r1, r0, r2
   1cb7c:	muleq	r1, r0, r2
   1cb80:	muleq	r1, r0, r2
   1cb84:	muleq	r1, r0, r2
   1cb88:	muleq	r1, r0, r2
   1cb8c:	muleq	r1, r0, r2
   1cb90:	muleq	r1, r0, r2
   1cb94:	muleq	r1, r0, r2
   1cb98:	muleq	r1, r0, r2
   1cb9c:	muleq	r1, r0, r2
   1cba0:	muleq	r1, r0, r2
   1cba4:	muleq	r1, r0, r2
   1cba8:	muleq	r1, r0, r2
   1cbac:	muleq	r1, r0, r2
   1cbb0:	muleq	r1, r0, r2
   1cbb4:	muleq	r1, r0, r2
   1cbb8:	muleq	r1, r0, r2
   1cbbc:	muleq	r1, r0, r2
   1cbc0:	muleq	r1, r0, r2
   1cbc4:	muleq	r1, r0, r2
   1cbc8:	muleq	r1, r0, r2
   1cbcc:	muleq	r1, r0, r2
   1cbd0:	muleq	r1, r0, r2
   1cbd4:	andeq	ip, r1, ip, ror sp
   1cbd8:	andeq	sp, r1, r0, lsl #3
   1cbdc:	andeq	ip, r1, ip, ror sp
   1cbe0:	andeq	sp, r1, ip, asr r2
   1cbe4:	cmp	r4, #0
   1cbe8:	moveq	r3, #1
   1cbec:	streq	r3, [sp, #40]	; 0x28
   1cbf0:	beq	1d304 <__assert_fail@plt+0xc0d8>
   1cbf4:	mov	r3, #0
   1cbf8:	mov	r2, #1
   1cbfc:	mov	r4, r3
   1cc00:	str	r2, [sp, #36]	; 0x24
   1cc04:	str	r2, [sp, #44]	; 0x2c
   1cc08:	str	r2, [sp, #56]	; 0x38
   1cc0c:	str	r3, [sp, #68]	; 0x44
   1cc10:	movw	r3, #61188	; 0xef04
   1cc14:	movt	r3, #2
   1cc18:	str	r4, [sp, #40]	; 0x28
   1cc1c:	mov	r8, #2
   1cc20:	str	r4, [sp, #48]	; 0x30
   1cc24:	str	r3, [sp, #60]	; 0x3c
   1cc28:	str	r4, [sp, #72]	; 0x48
   1cc2c:	b	1c914 <__assert_fail@plt+0xb6e8>
   1cc30:	cmp	r4, #0
   1cc34:	bne	1de80 <__assert_fail@plt+0xcc54>
   1cc38:	cmp	sl, #0
   1cc3c:	beq	1dc40 <__assert_fail@plt+0xca14>
   1cc40:	mov	r3, #34	; 0x22
   1cc44:	mov	r1, r4
   1cc48:	mov	r2, #1
   1cc4c:	strb	r3, [fp]
   1cc50:	movw	r3, #61168	; 0xeef0
   1cc54:	movt	r3, #2
   1cc58:	mov	r4, r2
   1cc5c:	str	r2, [sp, #36]	; 0x24
   1cc60:	str	r2, [sp, #40]	; 0x28
   1cc64:	str	r1, [sp, #44]	; 0x2c
   1cc68:	str	r1, [sp, #48]	; 0x30
   1cc6c:	str	r2, [sp, #56]	; 0x38
   1cc70:	str	r3, [sp, #60]	; 0x3c
   1cc74:	str	r1, [sp, #68]	; 0x44
   1cc78:	str	r1, [sp, #72]	; 0x48
   1cc7c:	b	1c914 <__assert_fail@plt+0xb6e8>
   1cc80:	mov	r3, #0
   1cc84:	mov	r4, r8
   1cc88:	str	r3, [sp, #40]	; 0x28
   1cc8c:	str	r3, [sp, #44]	; 0x2c
   1cc90:	str	r3, [sp, #48]	; 0x30
   1cc94:	str	r8, [sp, #56]	; 0x38
   1cc98:	str	r3, [sp, #60]	; 0x3c
   1cc9c:	str	r3, [sp, #68]	; 0x44
   1cca0:	mov	r3, #1
   1cca4:	str	r3, [sp, #36]	; 0x24
   1cca8:	str	r8, [sp, #72]	; 0x48
   1ccac:	b	1c914 <__assert_fail@plt+0xb6e8>
   1ccb0:	mov	r3, #1
   1ccb4:	mov	r2, #0
   1ccb8:	mov	r4, r2
   1ccbc:	mov	r8, #5
   1ccc0:	str	r3, [sp, #36]	; 0x24
   1ccc4:	str	r3, [sp, #40]	; 0x28
   1ccc8:	str	r3, [sp, #44]	; 0x2c
   1cccc:	str	r2, [sp, #48]	; 0x30
   1ccd0:	str	r3, [sp, #56]	; 0x38
   1ccd4:	movw	r3, #61168	; 0xeef0
   1ccd8:	movt	r3, #2
   1ccdc:	str	r3, [sp, #60]	; 0x3c
   1cce0:	str	r2, [sp, #68]	; 0x44
   1cce4:	str	r2, [sp, #72]	; 0x48
   1cce8:	b	1c914 <__assert_fail@plt+0xb6e8>
   1ccec:	mov	r3, #0
   1ccf0:	mov	r2, #1
   1ccf4:	mov	r4, r3
   1ccf8:	str	r2, [sp, #36]	; 0x24
   1ccfc:	str	r2, [sp, #40]	; 0x28
   1cd00:	str	r3, [sp, #44]	; 0x2c
   1cd04:	str	r3, [sp, #48]	; 0x30
   1cd08:	str	r3, [sp, #56]	; 0x38
   1cd0c:	str	r3, [sp, #60]	; 0x3c
   1cd10:	str	r3, [sp, #68]	; 0x44
   1cd14:	str	r3, [sp, #72]	; 0x48
   1cd18:	b	1c914 <__assert_fail@plt+0xb6e8>
   1cd1c:	mov	r2, #1
   1cd20:	mov	r3, #0
   1cd24:	mov	r4, r3
   1cd28:	str	r2, [sp, #36]	; 0x24
   1cd2c:	str	r2, [sp, #44]	; 0x2c
   1cd30:	str	r8, [sp, #56]	; 0x38
   1cd34:	str	r3, [sp, #68]	; 0x44
   1cd38:	b	1cc10 <__assert_fail@plt+0xb9e4>
   1cd3c:	mov	r3, #1
   1cd40:	mov	r2, #0
   1cd44:	mov	r4, r2
   1cd48:	mov	r8, #2
   1cd4c:	str	r3, [sp, #36]	; 0x24
   1cd50:	str	r3, [sp, #40]	; 0x28
   1cd54:	str	r3, [sp, #44]	; 0x2c
   1cd58:	str	r2, [sp, #48]	; 0x30
   1cd5c:	str	r3, [sp, #56]	; 0x38
   1cd60:	movw	r3, #61188	; 0xef04
   1cd64:	movt	r3, #2
   1cd68:	str	r3, [sp, #60]	; 0x3c
   1cd6c:	str	r2, [sp, #68]	; 0x44
   1cd70:	str	r2, [sp, #72]	; 0x48
   1cd74:	b	1c914 <__assert_fail@plt+0xb6e8>
   1cd78:	mov	r7, #0
   1cd7c:	ldr	r3, [sp, #28]
   1cd80:	cmn	r3, #1
   1cd84:	beq	1d85c <__assert_fail@plt+0xc630>
   1cd88:	ldr	r3, [sp, #28]
   1cd8c:	subs	r2, r3, #1
   1cd90:	movne	r2, #1
   1cd94:	sub	r3, fp, #2
   1cd98:	cmp	r2, #0
   1cd9c:	clz	r3, r3
   1cda0:	lsr	r3, r3, #5
   1cda4:	bne	1cdb0 <__assert_fail@plt+0xbb84>
   1cda8:	cmp	r9, #0
   1cdac:	beq	1d5bc <__assert_fail@plt+0xc390>
   1cdb0:	mov	r6, #0
   1cdb4:	ldr	r2, [sp, #40]	; 0x28
   1cdb8:	eor	r2, r2, #1
   1cdbc:	orrs	r3, r3, r2
   1cdc0:	bne	1cf98 <__assert_fail@plt+0xbd6c>
   1cdc4:	ldr	r2, [sp, #160]	; 0xa0
   1cdc8:	cmp	r2, #0
   1cdcc:	beq	1cdec <__assert_fail@plt+0xbbc0>
   1cdd0:	ldr	r0, [sp, #160]	; 0xa0
   1cdd4:	ubfx	r1, r5, #5, #8
   1cdd8:	and	r2, r5, #31
   1cddc:	ldr	r1, [r0, r1, lsl #2]
   1cde0:	lsr	r2, r1, r2
   1cde4:	tst	r2, #1
   1cde8:	bne	1cdf4 <__assert_fail@plt+0xbbc8>
   1cdec:	cmp	r7, #0
   1cdf0:	beq	1d064 <__assert_fail@plt+0xbe38>
   1cdf4:	ldr	r2, [sp, #44]	; 0x2c
   1cdf8:	sub	r3, fp, #2
   1cdfc:	clz	r3, r3
   1ce00:	lsr	r3, r3, #5
   1ce04:	cmp	r2, #0
   1ce08:	bne	1dbb0 <__assert_fail@plt+0xc984>
   1ce0c:	ldr	r2, [sp, #48]	; 0x30
   1ce10:	eor	r2, r2, #1
   1ce14:	ands	r3, r3, r2
   1ce18:	beq	1ce50 <__assert_fail@plt+0xbc24>
   1ce1c:	cmp	sl, r4
   1ce20:	str	r3, [sp, #48]	; 0x30
   1ce24:	movhi	r2, #39	; 0x27
   1ce28:	strbhi	r2, [r8, r4]
   1ce2c:	add	r2, r4, #1
   1ce30:	cmp	sl, r2
   1ce34:	movhi	r1, #36	; 0x24
   1ce38:	strbhi	r1, [r8, r2]
   1ce3c:	add	r2, r4, #2
   1ce40:	add	r4, r4, #3
   1ce44:	cmp	sl, r2
   1ce48:	movhi	r1, #39	; 0x27
   1ce4c:	strbhi	r1, [r8, r2]
   1ce50:	cmp	r4, sl
   1ce54:	add	r9, r9, #1
   1ce58:	movcc	r3, #92	; 0x5c
   1ce5c:	strbcc	r3, [r8, r4]
   1ce60:	add	r4, r4, #1
   1ce64:	cmp	r4, sl
   1ce68:	ldr	r3, [sp, #36]	; 0x24
   1ce6c:	strbcc	r5, [r8, r4]
   1ce70:	cmp	r6, #0
   1ce74:	add	r4, r4, #1
   1ce78:	moveq	r3, #0
   1ce7c:	str	r3, [sp, #36]	; 0x24
   1ce80:	ldr	r3, [sp, #28]
   1ce84:	cmn	r3, #1
   1ce88:	bne	1c930 <__assert_fail@plt+0xb704>
   1ce8c:	ldr	r3, [sp, #32]
   1ce90:	ldrb	r6, [r3, r9]
   1ce94:	adds	r6, r6, #0
   1ce98:	movne	r6, #1
   1ce9c:	cmp	r6, #0
   1cea0:	bne	1c944 <__assert_fail@plt+0xb718>
   1cea4:	str	fp, [sp, #152]	; 0x98
   1cea8:	mov	fp, r8
   1ceac:	cmp	r4, #0
   1ceb0:	ldr	r1, [sp, #44]	; 0x2c
   1ceb4:	movne	r3, #0
   1ceb8:	ldr	r8, [sp, #152]	; 0x98
   1cebc:	sub	r2, r8, #2
   1cec0:	clz	r2, r2
   1cec4:	lsr	r2, r2, #5
   1cec8:	andeq	r3, r2, r1
   1cecc:	cmp	r3, #0
   1ced0:	bne	1df8c <__assert_fail@plt+0xcd60>
   1ced4:	eor	r3, r1, #1
   1ced8:	ands	r2, r2, r3
   1cedc:	beq	1deb8 <__assert_fail@plt+0xcc8c>
   1cee0:	ldr	r3, [sp, #68]	; 0x44
   1cee4:	cmp	r3, #0
   1cee8:	beq	1debc <__assert_fail@plt+0xcc90>
   1ceec:	ldr	r3, [sp, #36]	; 0x24
   1cef0:	cmp	r3, #0
   1cef4:	bne	1df48 <__assert_fail@plt+0xcd1c>
   1cef8:	ldr	r3, [sp, #72]	; 0x48
   1cefc:	adds	r3, r3, #0
   1cf00:	movne	r3, #1
   1cf04:	cmp	sl, #0
   1cf08:	movne	r3, #0
   1cf0c:	cmp	r3, #0
   1cf10:	ldreq	r2, [sp, #68]	; 0x44
   1cf14:	beq	1debc <__assert_fail@plt+0xcc90>
   1cf18:	ldr	r2, [sp, #72]	; 0x48
   1cf1c:	str	r3, [sp, #68]	; 0x44
   1cf20:	movw	r3, #61188	; 0xef04
   1cf24:	movt	r3, #2
   1cf28:	mov	r1, #39	; 0x27
   1cf2c:	mov	r4, #1
   1cf30:	ldr	sl, [sp, #72]	; 0x48
   1cf34:	mov	r8, #2
   1cf38:	str	r3, [sp, #60]	; 0x3c
   1cf3c:	mov	r3, #0
   1cf40:	strb	r1, [fp]
   1cf44:	str	r3, [sp, #44]	; 0x2c
   1cf48:	str	r4, [sp, #56]	; 0x38
   1cf4c:	str	r2, [sp, #72]	; 0x48
   1cf50:	b	1c914 <__assert_fail@plt+0xb6e8>
   1cf54:	mov	r7, #0
   1cf58:	cmp	fp, #2
   1cf5c:	beq	1d83c <__assert_fail@plt+0xc610>
   1cf60:	ldr	r2, [sp, #40]	; 0x28
   1cf64:	ldr	r3, [sp, #56]	; 0x38
   1cf68:	ldr	r1, [sp, #44]	; 0x2c
   1cf6c:	cmp	r3, #0
   1cf70:	moveq	r3, #0
   1cf74:	andne	r3, r2, r1
   1cf78:	cmp	r3, #0
   1cf7c:	moveq	r5, #92	; 0x5c
   1cf80:	moveq	r3, r5
   1cf84:	bne	1d848 <__assert_fail@plt+0xc61c>
   1cf88:	ldr	r2, [sp, #40]	; 0x28
   1cf8c:	cmp	r2, #0
   1cf90:	bne	1dc84 <__assert_fail@plt+0xca58>
   1cf94:	mov	r6, #0
   1cf98:	ldr	r3, [sp, #44]	; 0x2c
   1cf9c:	cmp	r3, #0
   1cfa0:	beq	1d834 <__assert_fail@plt+0xc608>
   1cfa4:	mov	r3, #0
   1cfa8:	b	1cdc4 <__assert_fail@plt+0xbb98>
   1cfac:	mov	r7, #0
   1cfb0:	cmp	fp, #2
   1cfb4:	beq	1d8ac <__assert_fail@plt+0xc680>
   1cfb8:	cmp	fp, #5
   1cfbc:	beq	1d870 <__assert_fail@plt+0xc644>
   1cfc0:	sub	r3, fp, #2
   1cfc4:	mov	r6, #0
   1cfc8:	clz	r3, r3
   1cfcc:	mov	r5, #63	; 0x3f
   1cfd0:	lsr	r3, r3, #5
   1cfd4:	b	1cdb4 <__assert_fail@plt+0xbb88>
   1cfd8:	mov	r7, #0
   1cfdc:	cmp	fp, #2
   1cfe0:	movne	r3, #0
   1cfe4:	movne	r5, #39	; 0x27
   1cfe8:	strne	r6, [sp, #68]	; 0x44
   1cfec:	bne	1cdb4 <__assert_fail@plt+0xbb88>
   1cff0:	ldr	r3, [sp, #44]	; 0x2c
   1cff4:	cmp	r3, #0
   1cff8:	bne	1dcb4 <__assert_fail@plt+0xca88>
   1cffc:	ldr	r3, [sp, #72]	; 0x48
   1d000:	cmp	sl, #0
   1d004:	clz	r3, r3
   1d008:	lsr	r3, r3, #5
   1d00c:	moveq	r3, #0
   1d010:	cmp	r3, #0
   1d014:	bne	1dbe0 <__assert_fail@plt+0xc9b4>
   1d018:	cmp	sl, r4
   1d01c:	movhi	r3, #39	; 0x27
   1d020:	strbhi	r3, [r8, r4]
   1d024:	add	r3, r4, #1
   1d028:	cmp	sl, r3
   1d02c:	movhi	r2, #92	; 0x5c
   1d030:	strbhi	r2, [r8, r3]
   1d034:	add	r3, r4, #2
   1d038:	cmp	sl, r3
   1d03c:	bls	1d048 <__assert_fail@plt+0xbe1c>
   1d040:	mov	r2, #39	; 0x27
   1d044:	strb	r2, [r8, r3]
   1d048:	mov	r3, #0
   1d04c:	cmp	r7, #0
   1d050:	add	r4, r4, #3
   1d054:	mov	r5, #39	; 0x27
   1d058:	str	r3, [sp, #48]	; 0x30
   1d05c:	str	r6, [sp, #68]	; 0x44
   1d060:	bne	1cdf4 <__assert_fail@plt+0xbbc8>
   1d064:	ldr	r2, [sp, #48]	; 0x30
   1d068:	eor	r3, r3, #1
   1d06c:	add	r9, r9, #1
   1d070:	and	r3, r3, r2
   1d074:	uxtb	r3, r3
   1d078:	cmp	r3, #0
   1d07c:	beq	1ce64 <__assert_fail@plt+0xbc38>
   1d080:	cmp	sl, r4
   1d084:	movhi	r3, #39	; 0x27
   1d088:	strbhi	r3, [r8, r4]
   1d08c:	add	r3, r4, #1
   1d090:	add	r4, r4, #2
   1d094:	cmp	sl, r3
   1d098:	movhi	r2, #39	; 0x27
   1d09c:	strbhi	r2, [r8, r3]
   1d0a0:	mov	r3, #0
   1d0a4:	str	r3, [sp, #48]	; 0x30
   1d0a8:	b	1ce64 <__assert_fail@plt+0xbc38>
   1d0ac:	mov	r3, #118	; 0x76
   1d0b0:	b	1cf88 <__assert_fail@plt+0xbd5c>
   1d0b4:	mov	r3, #116	; 0x74
   1d0b8:	ldr	r2, [sp, #44]	; 0x2c
   1d0bc:	cmp	fp, #2
   1d0c0:	movne	r2, #0
   1d0c4:	andeq	r2, r2, #1
   1d0c8:	cmp	r2, #0
   1d0cc:	beq	1cf88 <__assert_fail@plt+0xbd5c>
   1d0d0:	mov	fp, r8
   1d0d4:	mov	r8, #2
   1d0d8:	ldr	r3, [sp, #40]	; 0x28
   1d0dc:	cmp	r3, #0
   1d0e0:	movne	r8, #4
   1d0e4:	mov	lr, #0
   1d0e8:	mov	r0, fp
   1d0ec:	ldr	r2, [sp, #32]
   1d0f0:	ldr	r3, [sp, #156]	; 0x9c
   1d0f4:	ldr	r1, [sp, #164]	; 0xa4
   1d0f8:	bic	ip, r3, #2
   1d0fc:	ldr	r3, [sp, #28]
   1d100:	stm	sp, {r8, ip, lr}
   1d104:	ldr	ip, [sp, #168]	; 0xa8
   1d108:	str	r1, [sp, #12]
   1d10c:	mov	r1, sl
   1d110:	str	ip, [sp, #16]
   1d114:	bl	1c82c <__assert_fail@plt+0xb600>
   1d118:	mov	r4, r0
   1d11c:	mov	r0, r4
   1d120:	add	sp, sp, #116	; 0x74
   1d124:	ldrd	r4, [sp]
   1d128:	ldrd	r6, [sp, #8]
   1d12c:	ldrd	r8, [sp, #16]
   1d130:	ldrd	sl, [sp, #24]
   1d134:	add	sp, sp, #32
   1d138:	pop	{pc}		; (ldr pc, [sp], #4)
   1d13c:	mov	r5, #102	; 0x66
   1d140:	ldr	r2, [sp, #44]	; 0x2c
   1d144:	sub	r3, fp, #2
   1d148:	clz	r3, r3
   1d14c:	lsr	r3, r3, #5
   1d150:	cmp	r2, #0
   1d154:	bne	1dbb0 <__assert_fail@plt+0xc984>
   1d158:	mov	r6, r2
   1d15c:	b	1ce50 <__assert_fail@plt+0xbc24>
   1d160:	mov	r5, #110	; 0x6e
   1d164:	mov	r6, #0
   1d168:	b	1cdf4 <__assert_fail@plt+0xbbc8>
   1d16c:	mov	r5, #98	; 0x62
   1d170:	b	1d140 <__assert_fail@plt+0xbf14>
   1d174:	mov	r5, #97	; 0x61
   1d178:	b	1d140 <__assert_fail@plt+0xbf14>
   1d17c:	mov	r7, #0
   1d180:	mov	r6, #0
   1d184:	b	1cfa4 <__assert_fail@plt+0xbd78>
   1d188:	mov	r5, #114	; 0x72
   1d18c:	b	1d164 <__assert_fail@plt+0xbf38>
   1d190:	ldr	r3, [sp, #44]	; 0x2c
   1d194:	cmp	r3, #0
   1d198:	bne	1df28 <__assert_fail@plt+0xccfc>
   1d19c:	mov	r7, r3
   1d1a0:	ldr	r3, [sp, #48]	; 0x30
   1d1a4:	sub	r2, fp, #2
   1d1a8:	clz	r2, r2
   1d1ac:	lsr	r2, r2, #5
   1d1b0:	eor	r3, r3, #1
   1d1b4:	ands	r3, r2, r3
   1d1b8:	beq	1dbcc <__assert_fail@plt+0xc9a0>
   1d1bc:	cmp	sl, r4
   1d1c0:	movhi	r1, #39	; 0x27
   1d1c4:	strbhi	r1, [r8, r4]
   1d1c8:	add	r1, r4, #1
   1d1cc:	cmp	sl, r1
   1d1d0:	movhi	r0, #36	; 0x24
   1d1d4:	strbhi	r0, [r8, r1]
   1d1d8:	add	r1, r4, #2
   1d1dc:	cmp	sl, r1
   1d1e0:	movhi	r0, #39	; 0x27
   1d1e4:	strbhi	r0, [r8, r1]
   1d1e8:	add	r1, r4, #3
   1d1ec:	cmp	sl, r1
   1d1f0:	bls	1dc24 <__assert_fail@plt+0xc9f8>
   1d1f4:	mov	r4, r1
   1d1f8:	mov	r1, #92	; 0x5c
   1d1fc:	mov	r0, r4
   1d200:	str	r3, [sp, #48]	; 0x30
   1d204:	strb	r1, [r8, r4]
   1d208:	cmp	fp, #2
   1d20c:	add	r4, r4, #1
   1d210:	beq	1dc74 <__assert_fail@plt+0xca48>
   1d214:	ldr	r1, [sp, #28]
   1d218:	add	r3, r9, #1
   1d21c:	cmp	r3, r1
   1d220:	bcs	1d238 <__assert_fail@plt+0xc00c>
   1d224:	ldr	r1, [sp, #32]
   1d228:	ldrb	r3, [r1, r3]
   1d22c:	sub	r3, r3, #48	; 0x30
   1d230:	cmp	r3, #9
   1d234:	bls	1dc8c <__assert_fail@plt+0xca60>
   1d238:	mov	r5, #48	; 0x30
   1d23c:	ldr	r3, [sp, #40]	; 0x28
   1d240:	eor	r3, r3, #1
   1d244:	orrs	r2, r2, r3
   1d248:	mov	r3, r6
   1d24c:	moveq	r6, r2
   1d250:	beq	1cdc4 <__assert_fail@plt+0xbb98>
   1d254:	mov	r6, #0
   1d258:	b	1cdec <__assert_fail@plt+0xbbc0>
   1d25c:	cmp	r9, #0
   1d260:	mov	r2, r7
   1d264:	bne	1d804 <__assert_fail@plt+0xc5d8>
   1d268:	mov	r6, r7
   1d26c:	mov	r3, r9
   1d270:	mov	r7, r2
   1d274:	b	1cdb4 <__assert_fail@plt+0xbb88>
   1d278:	mov	r2, r7
   1d27c:	mov	r6, r7
   1d280:	mov	r3, #0
   1d284:	mov	r7, r2
   1d288:	mov	r5, #32
   1d28c:	b	1cdb4 <__assert_fail@plt+0xbb88>
   1d290:	mov	r6, r7
   1d294:	b	1cfa4 <__assert_fail@plt+0xbd78>
   1d298:	mov	r7, #0
   1d29c:	ldr	r3, [sp, #64]	; 0x40
   1d2a0:	cmp	r3, #1
   1d2a4:	bne	1d8c4 <__assert_fail@plt+0xc698>
   1d2a8:	bl	11118 <__ctype_b_loc@plt>
   1d2ac:	ldr	r2, [r0]
   1d2b0:	sxth	r3, r5
   1d2b4:	lsl	r3, r3, #1
   1d2b8:	ldr	r1, [sp, #64]	; 0x40
   1d2bc:	ldrh	r3, [r2, r3]
   1d2c0:	mov	ip, r1
   1d2c4:	and	r3, r3, #16384	; 0x4000
   1d2c8:	cmp	r3, #0
   1d2cc:	ldr	r3, [sp, #40]	; 0x28
   1d2d0:	movne	r6, #1
   1d2d4:	moveq	r6, #0
   1d2d8:	movne	r2, #0
   1d2dc:	andeq	r2, r3, #1
   1d2e0:	cmp	r2, #0
   1d2e4:	bne	1dc0c <__assert_fail@plt+0xc9e0>
   1d2e8:	sub	r3, fp, #2
   1d2ec:	clz	r3, r3
   1d2f0:	lsr	r3, r3, #5
   1d2f4:	b	1cdb4 <__assert_fail@plt+0xbb88>
   1d2f8:	cmp	r4, #0
   1d2fc:	bne	1df9c <__assert_fail@plt+0xcd70>
   1d300:	str	r4, [sp, #40]	; 0x28
   1d304:	cmp	sl, #0
   1d308:	bne	1dfcc <__assert_fail@plt+0xcda0>
   1d30c:	mov	r3, #1
   1d310:	movw	r2, #61188	; 0xef04
   1d314:	movt	r2, #2
   1d318:	mov	r4, r3
   1d31c:	mov	r8, #2
   1d320:	str	r3, [sp, #36]	; 0x24
   1d324:	str	sl, [sp, #44]	; 0x2c
   1d328:	str	sl, [sp, #48]	; 0x30
   1d32c:	str	r3, [sp, #56]	; 0x38
   1d330:	str	r2, [sp, #60]	; 0x3c
   1d334:	str	sl, [sp, #68]	; 0x44
   1d338:	str	sl, [sp, #72]	; 0x48
   1d33c:	b	1c914 <__assert_fail@plt+0xb6e8>
   1d340:	ldr	r3, [sp, #32]
   1d344:	ldrb	r5, [r3, r9]
   1d348:	cmp	r5, #126	; 0x7e
   1d34c:	ldrls	pc, [pc, r5, lsl #2]
   1d350:	b	1d29c <__assert_fail@plt+0xc070>
   1d354:	andeq	sp, r1, r8, ror r5
   1d358:	muleq	r1, ip, r2
   1d35c:	muleq	r1, ip, r2
   1d360:	muleq	r1, ip, r2
   1d364:	muleq	r1, ip, r2
   1d368:	muleq	r1, ip, r2
   1d36c:	muleq	r1, ip, r2
   1d370:	andeq	sp, r1, r0, ror r5
   1d374:	andeq	sp, r1, r8, ror #10
   1d378:	strheq	sp, [r1], -r4
   1d37c:	andeq	sp, r1, r0, ror #10
   1d380:	andeq	sp, r1, ip, lsr #1
   1d384:	andeq	sp, r1, r8, asr r5
   1d388:	andeq	sp, r1, r0, asr r5
   1d38c:	muleq	r1, ip, r2
   1d390:	muleq	r1, ip, r2
   1d394:	muleq	r1, ip, r2
   1d398:	muleq	r1, ip, r2
   1d39c:	muleq	r1, ip, r2
   1d3a0:	muleq	r1, ip, r2
   1d3a4:	muleq	r1, ip, r2
   1d3a8:	muleq	r1, ip, r2
   1d3ac:	muleq	r1, ip, r2
   1d3b0:	muleq	r1, ip, r2
   1d3b4:	muleq	r1, ip, r2
   1d3b8:	muleq	r1, ip, r2
   1d3bc:	muleq	r1, ip, r2
   1d3c0:	muleq	r1, ip, r2
   1d3c4:	muleq	r1, ip, r2
   1d3c8:	muleq	r1, ip, r2
   1d3cc:	muleq	r1, ip, r2
   1d3d0:	muleq	r1, ip, r2
   1d3d4:	andeq	sp, r1, ip, asr #11
   1d3d8:	andeq	sp, r1, ip, lsr #11
   1d3dc:	andeq	sp, r1, ip, lsr #11
   1d3e0:	muleq	r1, ip, r5
   1d3e4:	andeq	sp, r1, ip, lsr #11
   1d3e8:	andeq	sp, r1, r8, ror #5
   1d3ec:	andeq	sp, r1, ip, lsr #11
   1d3f0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1d3f4:	andeq	sp, r1, ip, lsr #11
   1d3f8:	andeq	sp, r1, ip, lsr #11
   1d3fc:	andeq	sp, r1, ip, lsr #11
   1d400:	andeq	sp, r1, r8, ror #5
   1d404:	andeq	sp, r1, r8, ror #5
   1d408:	andeq	sp, r1, r8, ror #5
   1d40c:	andeq	sp, r1, r8, ror #5
   1d410:	andeq	sp, r1, r8, ror #5
   1d414:	andeq	sp, r1, r8, ror #5
   1d418:	andeq	sp, r1, r8, ror #5
   1d41c:	andeq	sp, r1, r8, ror #5
   1d420:	andeq	sp, r1, r8, ror #5
   1d424:	andeq	sp, r1, r8, ror #5
   1d428:	andeq	sp, r1, r8, ror #5
   1d42c:	andeq	sp, r1, r8, ror #5
   1d430:	andeq	sp, r1, r8, ror #5
   1d434:	andeq	sp, r1, r8, ror #5
   1d438:	andeq	sp, r1, r8, ror #5
   1d43c:	andeq	sp, r1, r8, ror #5
   1d440:	andeq	sp, r1, ip, lsr #11
   1d444:	andeq	sp, r1, ip, lsr #11
   1d448:	andeq	sp, r1, ip, lsr #11
   1d44c:	andeq	sp, r1, ip, lsr #11
   1d450:			; <UNDEFINED> instruction: 0x0001cfb0
   1d454:	muleq	r1, ip, r2
   1d458:	andeq	sp, r1, r8, ror #5
   1d45c:	andeq	sp, r1, r8, ror #5
   1d460:	andeq	sp, r1, r8, ror #5
   1d464:	andeq	sp, r1, r8, ror #5
   1d468:	andeq	sp, r1, r8, ror #5
   1d46c:	andeq	sp, r1, r8, ror #5
   1d470:	andeq	sp, r1, r8, ror #5
   1d474:	andeq	sp, r1, r8, ror #5
   1d478:	andeq	sp, r1, r8, ror #5
   1d47c:	andeq	sp, r1, r8, ror #5
   1d480:	andeq	sp, r1, r8, ror #5
   1d484:	andeq	sp, r1, r8, ror #5
   1d488:	andeq	sp, r1, r8, ror #5
   1d48c:	andeq	sp, r1, r8, ror #5
   1d490:	andeq	sp, r1, r8, ror #5
   1d494:	andeq	sp, r1, r8, ror #5
   1d498:	andeq	sp, r1, r8, ror #5
   1d49c:	andeq	sp, r1, r8, ror #5
   1d4a0:	andeq	sp, r1, r8, ror #5
   1d4a4:	andeq	sp, r1, r8, ror #5
   1d4a8:	andeq	sp, r1, r8, ror #5
   1d4ac:	andeq	sp, r1, r8, ror #5
   1d4b0:	andeq	sp, r1, r8, ror #5
   1d4b4:	andeq	sp, r1, r8, ror #5
   1d4b8:	andeq	sp, r1, r8, ror #5
   1d4bc:	andeq	sp, r1, r8, ror #5
   1d4c0:	andeq	sp, r1, ip, lsr #11
   1d4c4:	andeq	ip, r1, r8, asr pc
   1d4c8:	andeq	sp, r1, r8, ror #5
   1d4cc:	andeq	sp, r1, ip, lsr #11
   1d4d0:	andeq	sp, r1, r8, ror #5
   1d4d4:	andeq	sp, r1, ip, lsr #11
   1d4d8:	andeq	sp, r1, r8, ror #5
   1d4dc:	andeq	sp, r1, r8, ror #5
   1d4e0:	andeq	sp, r1, r8, ror #5
   1d4e4:	andeq	sp, r1, r8, ror #5
   1d4e8:	andeq	sp, r1, r8, ror #5
   1d4ec:	andeq	sp, r1, r8, ror #5
   1d4f0:	andeq	sp, r1, r8, ror #5
   1d4f4:	andeq	sp, r1, r8, ror #5
   1d4f8:	andeq	sp, r1, r8, ror #5
   1d4fc:	andeq	sp, r1, r8, ror #5
   1d500:	andeq	sp, r1, r8, ror #5
   1d504:	andeq	sp, r1, r8, ror #5
   1d508:	andeq	sp, r1, r8, ror #5
   1d50c:	andeq	sp, r1, r8, ror #5
   1d510:	andeq	sp, r1, r8, ror #5
   1d514:	andeq	sp, r1, r8, ror #5
   1d518:	andeq	sp, r1, r8, ror #5
   1d51c:	andeq	sp, r1, r8, ror #5
   1d520:	andeq	sp, r1, r8, ror #5
   1d524:	andeq	sp, r1, r8, ror #5
   1d528:	andeq	sp, r1, r8, ror #5
   1d52c:	andeq	sp, r1, r8, ror #5
   1d530:	andeq	sp, r1, r8, ror #5
   1d534:	andeq	sp, r1, r8, ror #5
   1d538:	andeq	sp, r1, r8, ror #5
   1d53c:	andeq	sp, r1, r8, ror #5
   1d540:	andeq	ip, r1, ip, ror sp
   1d544:	andeq	sp, r1, ip, lsr #11
   1d548:	andeq	ip, r1, ip, ror sp
   1d54c:	muleq	r1, ip, r5
   1d550:	mov	r3, #114	; 0x72
   1d554:	b	1d0b8 <__assert_fail@plt+0xbe8c>
   1d558:	mov	r3, #102	; 0x66
   1d55c:	b	1cf88 <__assert_fail@plt+0xbd5c>
   1d560:	mov	r3, #110	; 0x6e
   1d564:	b	1d0b8 <__assert_fail@plt+0xbe8c>
   1d568:	mov	r3, #98	; 0x62
   1d56c:	b	1cf88 <__assert_fail@plt+0xbd5c>
   1d570:	mov	r3, #97	; 0x61
   1d574:	b	1cf88 <__assert_fail@plt+0xbd5c>
   1d578:	ldr	r3, [sp, #40]	; 0x28
   1d57c:	cmp	r3, #0
   1d580:	bne	1d190 <__assert_fail@plt+0xbf64>
   1d584:	ldr	r3, [sp, #156]	; 0x9c
   1d588:	tst	r3, #1
   1d58c:	addne	r9, r9, #1
   1d590:	bne	1c924 <__assert_fail@plt+0xb6f8>
   1d594:	ldr	r7, [sp, #40]	; 0x28
   1d598:	b	1cf94 <__assert_fail@plt+0xbd68>
   1d59c:	sub	r3, fp, #2
   1d5a0:	clz	r3, r3
   1d5a4:	lsr	r3, r3, #5
   1d5a8:	b	1cda8 <__assert_fail@plt+0xbb7c>
   1d5ac:	sub	r3, fp, #2
   1d5b0:	mov	r6, #0
   1d5b4:	clz	r3, r3
   1d5b8:	lsr	r3, r3, #5
   1d5bc:	ldr	r2, [sp, #44]	; 0x2c
   1d5c0:	tst	r2, r3
   1d5c4:	beq	1cdb4 <__assert_fail@plt+0xbb88>
   1d5c8:	b	1d0d0 <__assert_fail@plt+0xbea4>
   1d5cc:	sub	r3, fp, #2
   1d5d0:	clz	r3, r3
   1d5d4:	lsr	r3, r3, #5
   1d5d8:	b	1d5bc <__assert_fail@plt+0xc390>
   1d5dc:	ldr	r3, [sp, #52]	; 0x34
   1d5e0:	ldrb	r5, [r3]
   1d5e4:	cmp	r5, #126	; 0x7e
   1d5e8:	ldrls	pc, [pc, r5, lsl #2]
   1d5ec:	b	1d298 <__assert_fail@plt+0xc06c>
   1d5f0:	muleq	r1, r0, r1
   1d5f4:	muleq	r1, r8, r2
   1d5f8:	muleq	r1, r8, r2
   1d5fc:	muleq	r1, r8, r2
   1d600:	muleq	r1, r8, r2
   1d604:	muleq	r1, r8, r2
   1d608:	muleq	r1, r8, r2
   1d60c:	andeq	sp, r1, r4, ror r1
   1d610:	andeq	sp, r1, ip, ror #2
   1d614:	andeq	sp, r1, r8, lsr #16
   1d618:	andeq	sp, r1, r0, ror #2
   1d61c:	andeq	sp, r1, ip, lsl r8
   1d620:	andeq	sp, r1, ip, lsr r1
   1d624:	andeq	sp, r1, r8, lsl #3
   1d628:	muleq	r1, r8, r2
   1d62c:	muleq	r1, r8, r2
   1d630:	muleq	r1, r8, r2
   1d634:	muleq	r1, r8, r2
   1d638:	muleq	r1, r8, r2
   1d63c:	muleq	r1, r8, r2
   1d640:	muleq	r1, r8, r2
   1d644:	muleq	r1, r8, r2
   1d648:	muleq	r1, r8, r2
   1d64c:	muleq	r1, r8, r2
   1d650:	muleq	r1, r8, r2
   1d654:	muleq	r1, r8, r2
   1d658:	muleq	r1, r8, r2
   1d65c:	muleq	r1, r8, r2
   1d660:	muleq	r1, r8, r2
   1d664:	muleq	r1, r8, r2
   1d668:	muleq	r1, r8, r2
   1d66c:	muleq	r1, r8, r2
   1d670:	andeq	sp, r1, r4, lsl r8
   1d674:	andeq	sp, r1, ip, ror r1
   1d678:	andeq	sp, r1, ip, ror r1
   1d67c:	strdeq	sp, [r1], -r8
   1d680:	andeq	sp, r1, ip, ror r1
   1d684:	andeq	sp, r1, ip, ror #15
   1d688:	andeq	sp, r1, ip, ror r1
   1d68c:	ldrdeq	ip, [r1], -r8
   1d690:	andeq	sp, r1, ip, ror r1
   1d694:	andeq	sp, r1, ip, ror r1
   1d698:	andeq	sp, r1, ip, ror r1
   1d69c:	andeq	sp, r1, ip, ror #15
   1d6a0:	andeq	sp, r1, ip, ror #15
   1d6a4:	andeq	sp, r1, ip, ror #15
   1d6a8:	andeq	sp, r1, ip, ror #15
   1d6ac:	andeq	sp, r1, ip, ror #15
   1d6b0:	andeq	sp, r1, ip, ror #15
   1d6b4:	andeq	sp, r1, ip, ror #15
   1d6b8:	andeq	sp, r1, ip, ror #15
   1d6bc:	andeq	sp, r1, ip, ror #15
   1d6c0:	andeq	sp, r1, ip, ror #15
   1d6c4:	andeq	sp, r1, ip, ror #15
   1d6c8:	andeq	sp, r1, ip, ror #15
   1d6cc:	andeq	sp, r1, ip, ror #15
   1d6d0:	andeq	sp, r1, ip, ror #15
   1d6d4:	andeq	sp, r1, ip, ror #15
   1d6d8:	andeq	sp, r1, ip, ror #15
   1d6dc:	andeq	sp, r1, ip, ror r1
   1d6e0:	andeq	sp, r1, ip, ror r1
   1d6e4:	andeq	sp, r1, ip, ror r1
   1d6e8:	andeq	sp, r1, ip, ror r1
   1d6ec:	andeq	ip, r1, ip, lsr #31
   1d6f0:	muleq	r1, r8, r2
   1d6f4:	andeq	sp, r1, ip, ror #15
   1d6f8:	andeq	sp, r1, ip, ror #15
   1d6fc:	andeq	sp, r1, ip, ror #15
   1d700:	andeq	sp, r1, ip, ror #15
   1d704:	andeq	sp, r1, ip, ror #15
   1d708:	andeq	sp, r1, ip, ror #15
   1d70c:	andeq	sp, r1, ip, ror #15
   1d710:	andeq	sp, r1, ip, ror #15
   1d714:	andeq	sp, r1, ip, ror #15
   1d718:	andeq	sp, r1, ip, ror #15
   1d71c:	andeq	sp, r1, ip, ror #15
   1d720:	andeq	sp, r1, ip, ror #15
   1d724:	andeq	sp, r1, ip, ror #15
   1d728:	andeq	sp, r1, ip, ror #15
   1d72c:	andeq	sp, r1, ip, ror #15
   1d730:	andeq	sp, r1, ip, ror #15
   1d734:	andeq	sp, r1, ip, ror #15
   1d738:	andeq	sp, r1, ip, ror #15
   1d73c:	andeq	sp, r1, ip, ror #15
   1d740:	andeq	sp, r1, ip, ror #15
   1d744:	andeq	sp, r1, ip, ror #15
   1d748:	andeq	sp, r1, ip, ror #15
   1d74c:	andeq	sp, r1, ip, ror #15
   1d750:	andeq	sp, r1, ip, ror #15
   1d754:	andeq	sp, r1, ip, ror #15
   1d758:	andeq	sp, r1, ip, ror #15
   1d75c:	andeq	sp, r1, ip, ror r1
   1d760:	andeq	ip, r1, r4, asr pc
   1d764:	andeq	sp, r1, ip, ror #15
   1d768:	andeq	sp, r1, ip, ror r1
   1d76c:	andeq	sp, r1, ip, ror #15
   1d770:	andeq	sp, r1, ip, ror r1
   1d774:	andeq	sp, r1, ip, ror #15
   1d778:	andeq	sp, r1, ip, ror #15
   1d77c:	andeq	sp, r1, ip, ror #15
   1d780:	andeq	sp, r1, ip, ror #15
   1d784:	andeq	sp, r1, ip, ror #15
   1d788:	andeq	sp, r1, ip, ror #15
   1d78c:	andeq	sp, r1, ip, ror #15
   1d790:	andeq	sp, r1, ip, ror #15
   1d794:	andeq	sp, r1, ip, ror #15
   1d798:	andeq	sp, r1, ip, ror #15
   1d79c:	andeq	sp, r1, ip, ror #15
   1d7a0:	andeq	sp, r1, ip, ror #15
   1d7a4:	andeq	sp, r1, ip, ror #15
   1d7a8:	andeq	sp, r1, ip, ror #15
   1d7ac:	andeq	sp, r1, ip, ror #15
   1d7b0:	andeq	sp, r1, ip, ror #15
   1d7b4:	andeq	sp, r1, ip, ror #15
   1d7b8:	andeq	sp, r1, ip, ror #15
   1d7bc:	andeq	sp, r1, ip, ror #15
   1d7c0:	andeq	sp, r1, ip, ror #15
   1d7c4:	andeq	sp, r1, ip, ror #15
   1d7c8:	andeq	sp, r1, ip, ror #15
   1d7cc:	andeq	sp, r1, ip, ror #15
   1d7d0:	andeq	sp, r1, ip, ror #15
   1d7d4:	andeq	sp, r1, ip, ror #15
   1d7d8:	andeq	sp, r1, ip, ror #15
   1d7dc:	andeq	ip, r1, r8, ror sp
   1d7e0:	andeq	sp, r1, ip, ror r1
   1d7e4:	andeq	ip, r1, r8, ror sp
   1d7e8:	strdeq	sp, [r1], -r8
   1d7ec:	mov	r6, r7
   1d7f0:	mov	r7, #0
   1d7f4:	b	1cfa4 <__assert_fail@plt+0xbd78>
   1d7f8:	cmp	r9, #0
   1d7fc:	mov	r2, #0
   1d800:	beq	1d268 <__assert_fail@plt+0xc03c>
   1d804:	mov	r6, #0
   1d808:	mov	r7, r2
   1d80c:	mov	r3, r6
   1d810:	b	1cdc4 <__assert_fail@plt+0xbb98>
   1d814:	mov	r2, #0
   1d818:	b	1d27c <__assert_fail@plt+0xc050>
   1d81c:	mov	r7, #0
   1d820:	mov	r3, #118	; 0x76
   1d824:	b	1cf88 <__assert_fail@plt+0xbd5c>
   1d828:	mov	r7, #0
   1d82c:	mov	r3, #116	; 0x74
   1d830:	b	1d0b8 <__assert_fail@plt+0xbe8c>
   1d834:	ldr	r3, [sp, #44]	; 0x2c
   1d838:	b	1cdec <__assert_fail@plt+0xbbc0>
   1d83c:	ldr	r3, [sp, #44]	; 0x2c
   1d840:	cmp	r3, #0
   1d844:	bne	1dcb4 <__assert_fail@plt+0xca88>
   1d848:	add	r9, r9, #1
   1d84c:	mov	r6, #0
   1d850:	ldr	r3, [sp, #48]	; 0x30
   1d854:	mov	r5, #92	; 0x5c
   1d858:	b	1d078 <__assert_fail@plt+0xbe4c>
   1d85c:	ldr	r3, [sp, #32]
   1d860:	ldrb	r2, [r3, #1]
   1d864:	adds	r2, r2, #0
   1d868:	movne	r2, #1
   1d86c:	b	1cd94 <__assert_fail@plt+0xbb68>
   1d870:	ldr	r3, [sp, #156]	; 0x9c
   1d874:	ands	r3, r3, #4
   1d878:	beq	1d8a0 <__assert_fail@plt+0xc674>
   1d87c:	ldr	r2, [sp, #28]
   1d880:	add	r3, r9, #2
   1d884:	cmp	r3, r2
   1d888:	bcs	1d89c <__assert_fail@plt+0xc670>
   1d88c:	ldr	r2, [sp, #52]	; 0x34
   1d890:	ldrb	r5, [r2, #1]
   1d894:	cmp	r5, #63	; 0x3f
   1d898:	beq	1dd18 <__assert_fail@plt+0xcaec>
   1d89c:	mov	r3, #0
   1d8a0:	mov	r5, #63	; 0x3f
   1d8a4:	mov	r6, r3
   1d8a8:	b	1cdb4 <__assert_fail@plt+0xbb88>
   1d8ac:	ldr	r3, [sp, #44]	; 0x2c
   1d8b0:	cmp	r3, #0
   1d8b4:	bne	1dcb4 <__assert_fail@plt+0xca88>
   1d8b8:	mov	r6, r3
   1d8bc:	mov	r5, #63	; 0x3f
   1d8c0:	b	1cdec <__assert_fail@plt+0xbbc0>
   1d8c4:	ldr	r1, [sp, #28]
   1d8c8:	mov	r2, #0
   1d8cc:	mov	r3, #0
   1d8d0:	strd	r2, [sp, #104]	; 0x68
   1d8d4:	cmn	r1, #1
   1d8d8:	bne	1d8e8 <__assert_fail@plt+0xc6bc>
   1d8dc:	ldr	r0, [sp, #32]
   1d8e0:	bl	11130 <strlen@plt>
   1d8e4:	str	r0, [sp, #28]
   1d8e8:	str	r8, [sp, #76]	; 0x4c
   1d8ec:	mov	r3, #0
   1d8f0:	str	sl, [sp, #80]	; 0x50
   1d8f4:	ldr	sl, [sp, #32]
   1d8f8:	str	r5, [sp, #84]	; 0x54
   1d8fc:	mov	r5, r3
   1d900:	ldr	r8, [sp, #44]	; 0x2c
   1d904:	str	r7, [sp, #88]	; 0x58
   1d908:	str	r4, [sp, #92]	; 0x5c
   1d90c:	ldr	r2, [sp, #28]
   1d910:	add	r4, r9, r5
   1d914:	add	r3, sp, #104	; 0x68
   1d918:	add	r7, sl, r4
   1d91c:	add	r0, sp, #100	; 0x64
   1d920:	mov	r1, r7
   1d924:	sub	r2, r2, r4
   1d928:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   1d92c:	subs	r1, r0, #0
   1d930:	beq	1d97c <__assert_fail@plt+0xc750>
   1d934:	cmn	r1, #1
   1d938:	beq	1dcf4 <__assert_fail@plt+0xcac8>
   1d93c:	cmn	r1, #2
   1d940:	beq	1de14 <__assert_fail@plt+0xcbe8>
   1d944:	cmp	fp, #2
   1d948:	movne	r3, #0
   1d94c:	andeq	r3, r8, #1
   1d950:	cmp	r3, #0
   1d954:	bne	1dae0 <__assert_fail@plt+0xc8b4>
   1d958:	ldr	r0, [sp, #100]	; 0x64
   1d95c:	add	r5, r5, r1
   1d960:	bl	1104c <iswprint@plt>
   1d964:	cmp	r0, #0
   1d968:	add	r0, sp, #104	; 0x68
   1d96c:	moveq	r6, #0
   1d970:	bl	10ff8 <mbsinit@plt>
   1d974:	cmp	r0, #0
   1d978:	beq	1d90c <__assert_fail@plt+0xc6e0>
   1d97c:	ldr	r3, [sp, #40]	; 0x28
   1d980:	mov	ip, r5
   1d984:	eor	r2, r6, #1
   1d988:	ldr	r8, [sp, #76]	; 0x4c
   1d98c:	ldr	sl, [sp, #80]	; 0x50
   1d990:	and	r2, r2, r3
   1d994:	ldr	r5, [sp, #84]	; 0x54
   1d998:	ldr	r7, [sp, #88]	; 0x58
   1d99c:	ldr	r4, [sp, #92]	; 0x5c
   1d9a0:	cmp	ip, #1
   1d9a4:	bls	1d2e0 <__assert_fail@plt+0xc0b4>
   1d9a8:	add	r1, ip, r9
   1d9ac:	mov	r0, #39	; 0x27
   1d9b0:	ldr	lr, [sp, #52]	; 0x34
   1d9b4:	mov	ip, #0
   1d9b8:	str	r6, [sp, #52]	; 0x34
   1d9bc:	ldr	r6, [sp, #48]	; 0x30
   1d9c0:	b	1da7c <__assert_fail@plt+0xc850>
   1d9c4:	ldr	ip, [sp, #44]	; 0x2c
   1d9c8:	sub	r3, fp, #2
   1d9cc:	clz	r3, r3
   1d9d0:	lsr	r3, r3, #5
   1d9d4:	cmp	ip, #0
   1d9d8:	bne	1dbec <__assert_fail@plt+0xc9c0>
   1d9dc:	eor	ip, r6, #1
   1d9e0:	ands	r3, r3, ip
   1d9e4:	beq	1da14 <__assert_fail@plt+0xc7e8>
   1d9e8:	cmp	sl, r4
   1d9ec:	add	ip, r4, #1
   1d9f0:	strbhi	r0, [r8, r4]
   1d9f4:	cmp	sl, ip
   1d9f8:	movhi	r6, #36	; 0x24
   1d9fc:	strbhi	r6, [r8, ip]
   1da00:	add	ip, r4, #2
   1da04:	mov	r6, r3
   1da08:	cmp	sl, ip
   1da0c:	add	r4, r4, #3
   1da10:	strbhi	r0, [r8, ip]
   1da14:	cmp	sl, r4
   1da18:	movhi	r3, #92	; 0x5c
   1da1c:	strbhi	r3, [r8, r4]
   1da20:	add	r3, r4, #1
   1da24:	cmp	sl, r3
   1da28:	bls	1da38 <__assert_fail@plt+0xc80c>
   1da2c:	lsr	ip, r5, #6
   1da30:	add	ip, ip, #48	; 0x30
   1da34:	strb	ip, [r8, r3]
   1da38:	add	r3, r4, #2
   1da3c:	cmp	sl, r3
   1da40:	bls	1da50 <__assert_fail@plt+0xc824>
   1da44:	ubfx	ip, r5, #3, #3
   1da48:	add	ip, ip, #48	; 0x30
   1da4c:	strb	ip, [r8, r3]
   1da50:	add	r9, r9, #1
   1da54:	and	r5, r5, #7
   1da58:	cmp	r9, r1
   1da5c:	add	r5, r5, #48	; 0x30
   1da60:	add	r4, r4, #3
   1da64:	bcs	1dc18 <__assert_fail@plt+0xc9ec>
   1da68:	mov	ip, r2
   1da6c:	cmp	sl, r4
   1da70:	strbhi	r5, [r8, r4]
   1da74:	add	r4, r4, #1
   1da78:	ldrb	r5, [lr, #1]!
   1da7c:	cmp	r2, #0
   1da80:	bne	1d9c4 <__assert_fail@plt+0xc798>
   1da84:	eor	r3, ip, #1
   1da88:	cmp	r7, #0
   1da8c:	and	r3, r3, r6
   1da90:	uxtb	r3, r3
   1da94:	beq	1daa8 <__assert_fail@plt+0xc87c>
   1da98:	cmp	sl, r4
   1da9c:	movhi	r7, #92	; 0x5c
   1daa0:	strbhi	r7, [r8, r4]
   1daa4:	add	r4, r4, #1
   1daa8:	add	r9, r9, #1
   1daac:	cmp	r9, r1
   1dab0:	bcs	1dc00 <__assert_fail@plt+0xc9d4>
   1dab4:	cmp	r3, #0
   1dab8:	beq	1dc38 <__assert_fail@plt+0xca0c>
   1dabc:	cmp	sl, r4
   1dac0:	add	r3, r4, #1
   1dac4:	mov	r7, #0
   1dac8:	strbhi	r0, [r8, r4]
   1dacc:	cmp	sl, r3
   1dad0:	add	r4, r4, #2
   1dad4:	mov	r6, r7
   1dad8:	strbhi	r0, [r8, r3]
   1dadc:	b	1da6c <__assert_fail@plt+0xc840>
   1dae0:	cmp	r1, #1
   1dae4:	beq	1d958 <__assert_fail@plt+0xc72c>
   1dae8:	add	r2, r4, #1
   1daec:	add	r3, sl, r1
   1daf0:	add	r2, sl, r2
   1daf4:	add	r4, r3, r4
   1daf8:	ldrb	r3, [r2], #1
   1dafc:	sub	r3, r3, #91	; 0x5b
   1db00:	cmp	r3, #33	; 0x21
   1db04:	ldrls	pc, [pc, r3, lsl #2]
   1db08:	b	1db94 <__assert_fail@plt+0xc968>
   1db0c:	andeq	sp, r1, r0, lsr #23
   1db10:	andeq	sp, r1, r0, lsr #23
   1db14:	muleq	r1, r4, fp
   1db18:	andeq	sp, r1, r0, lsr #23
   1db1c:	muleq	r1, r4, fp
   1db20:	andeq	sp, r1, r0, lsr #23
   1db24:	muleq	r1, r4, fp
   1db28:	muleq	r1, r4, fp
   1db2c:	muleq	r1, r4, fp
   1db30:	muleq	r1, r4, fp
   1db34:	muleq	r1, r4, fp
   1db38:	muleq	r1, r4, fp
   1db3c:	muleq	r1, r4, fp
   1db40:	muleq	r1, r4, fp
   1db44:	muleq	r1, r4, fp
   1db48:	muleq	r1, r4, fp
   1db4c:	muleq	r1, r4, fp
   1db50:	muleq	r1, r4, fp
   1db54:	muleq	r1, r4, fp
   1db58:	muleq	r1, r4, fp
   1db5c:	muleq	r1, r4, fp
   1db60:	muleq	r1, r4, fp
   1db64:	muleq	r1, r4, fp
   1db68:	muleq	r1, r4, fp
   1db6c:	muleq	r1, r4, fp
   1db70:	muleq	r1, r4, fp
   1db74:	muleq	r1, r4, fp
   1db78:	muleq	r1, r4, fp
   1db7c:	muleq	r1, r4, fp
   1db80:	muleq	r1, r4, fp
   1db84:	muleq	r1, r4, fp
   1db88:	muleq	r1, r4, fp
   1db8c:	muleq	r1, r4, fp
   1db90:	andeq	sp, r1, r0, lsr #23
   1db94:	cmp	r4, r2
   1db98:	bne	1daf8 <__assert_fail@plt+0xc8cc>
   1db9c:	b	1d958 <__assert_fail@plt+0xc72c>
   1dba0:	mov	r8, #2
   1dba4:	ldr	fp, [sp, #76]	; 0x4c
   1dba8:	ldr	sl, [sp, #80]	; 0x50
   1dbac:	b	1d0d8 <__assert_fail@plt+0xbeac>
   1dbb0:	ldr	r2, [sp, #40]	; 0x28
   1dbb4:	str	fp, [sp, #152]	; 0x98
   1dbb8:	mov	fp, r8
   1dbbc:	ldr	r8, [sp, #152]	; 0x98
   1dbc0:	and	r2, r2, r3
   1dbc4:	str	r2, [sp, #40]	; 0x28
   1dbc8:	b	1d0d8 <__assert_fail@plt+0xbeac>
   1dbcc:	cmp	sl, r4
   1dbd0:	movls	r0, r4
   1dbd4:	bls	1d208 <__assert_fail@plt+0xbfdc>
   1dbd8:	ldr	r3, [sp, #48]	; 0x30
   1dbdc:	b	1d1f8 <__assert_fail@plt+0xbfcc>
   1dbe0:	str	sl, [sp, #72]	; 0x48
   1dbe4:	ldr	sl, [sp, #44]	; 0x2c
   1dbe8:	b	1d048 <__assert_fail@plt+0xbe1c>
   1dbec:	str	r3, [sp, #40]	; 0x28
   1dbf0:	str	fp, [sp, #152]	; 0x98
   1dbf4:	mov	fp, r8
   1dbf8:	ldr	r8, [sp, #152]	; 0x98
   1dbfc:	b	1d0d8 <__assert_fail@plt+0xbeac>
   1dc00:	str	r6, [sp, #48]	; 0x30
   1dc04:	ldr	r6, [sp, #52]	; 0x34
   1dc08:	b	1d078 <__assert_fail@plt+0xbe4c>
   1dc0c:	mov	r6, #0
   1dc10:	ldr	r2, [sp, #40]	; 0x28
   1dc14:	b	1d9a8 <__assert_fail@plt+0xc77c>
   1dc18:	str	r6, [sp, #48]	; 0x30
   1dc1c:	ldr	r6, [sp, #52]	; 0x34
   1dc20:	b	1ce64 <__assert_fail@plt+0xbc38>
   1dc24:	add	r4, r4, #4
   1dc28:	mov	r6, #0
   1dc2c:	str	r3, [sp, #48]	; 0x30
   1dc30:	mov	r5, #48	; 0x30
   1dc34:	b	1cdec <__assert_fail@plt+0xbbc0>
   1dc38:	mov	r7, r3
   1dc3c:	b	1da6c <__assert_fail@plt+0xc840>
   1dc40:	mov	r3, #1
   1dc44:	movw	r2, #61168	; 0xeef0
   1dc48:	movt	r2, #2
   1dc4c:	mov	r4, r3
   1dc50:	str	r3, [sp, #36]	; 0x24
   1dc54:	str	r3, [sp, #40]	; 0x28
   1dc58:	str	sl, [sp, #44]	; 0x2c
   1dc5c:	str	sl, [sp, #48]	; 0x30
   1dc60:	str	r3, [sp, #56]	; 0x38
   1dc64:	str	r2, [sp, #60]	; 0x3c
   1dc68:	str	sl, [sp, #68]	; 0x44
   1dc6c:	str	sl, [sp, #72]	; 0x48
   1dc70:	b	1c914 <__assert_fail@plt+0xb6e8>
   1dc74:	mov	r3, r6
   1dc78:	mov	r5, #48	; 0x30
   1dc7c:	mov	r6, #0
   1dc80:	b	1cdec <__assert_fail@plt+0xbbc0>
   1dc84:	mov	r5, r3
   1dc88:	b	1d164 <__assert_fail@plt+0xbf38>
   1dc8c:	cmp	sl, r4
   1dc90:	mov	r5, #48	; 0x30
   1dc94:	movhi	r3, #48	; 0x30
   1dc98:	strbhi	r3, [r8, r4]
   1dc9c:	add	r3, r0, #2
   1dca0:	add	r4, r0, #3
   1dca4:	cmp	sl, r3
   1dca8:	movhi	r1, #48	; 0x30
   1dcac:	strbhi	r1, [r8, r3]
   1dcb0:	b	1d23c <__assert_fail@plt+0xc010>
   1dcb4:	str	fp, [sp, #152]	; 0x98
   1dcb8:	mov	fp, r8
   1dcbc:	ldr	r8, [sp, #152]	; 0x98
   1dcc0:	b	1d0d8 <__assert_fail@plt+0xbeac>
   1dcc4:	ldr	r3, [sp, #164]	; 0xa4
   1dcc8:	ldrb	r3, [r3]
   1dccc:	cmp	r3, #0
   1dcd0:	beq	1c8e4 <__assert_fail@plt+0xb6b8>
   1dcd4:	ldr	r2, [sp, #164]	; 0xa4
   1dcd8:	cmp	sl, r4
   1dcdc:	strbhi	r3, [fp, r4]
   1dce0:	add	r4, r4, #1
   1dce4:	ldrb	r3, [r2, #1]!
   1dce8:	cmp	r3, #0
   1dcec:	bne	1dcd8 <__assert_fail@plt+0xcaac>
   1dcf0:	b	1c8e4 <__assert_fail@plt+0xb6b8>
   1dcf4:	mov	ip, r5
   1dcf8:	mov	r6, #0
   1dcfc:	ldr	r2, [sp, #40]	; 0x28
   1dd00:	ldr	r8, [sp, #76]	; 0x4c
   1dd04:	ldr	sl, [sp, #80]	; 0x50
   1dd08:	ldr	r5, [sp, #84]	; 0x54
   1dd0c:	ldr	r7, [sp, #88]	; 0x58
   1dd10:	ldr	r4, [sp, #92]	; 0x5c
   1dd14:	b	1d9a0 <__assert_fail@plt+0xc774>
   1dd18:	ldr	r2, [sp, #32]
   1dd1c:	ldrb	r1, [r2, r3]
   1dd20:	sub	r2, r1, #33	; 0x21
   1dd24:	cmp	r2, #29
   1dd28:	ldrls	pc, [pc, r2, lsl #2]
   1dd2c:	b	1de08 <__assert_fail@plt+0xcbdc>
   1dd30:	andeq	sp, r1, r8, lsr #27
   1dd34:	andeq	sp, r1, r8, lsl #28
   1dd38:	andeq	sp, r1, r8, lsl #28
   1dd3c:	andeq	sp, r1, r8, lsl #28
   1dd40:	andeq	sp, r1, r8, lsl #28
   1dd44:	andeq	sp, r1, r8, lsl #28
   1dd48:	andeq	sp, r1, r8, lsr #27
   1dd4c:	andeq	sp, r1, r8, lsr #27
   1dd50:	andeq	sp, r1, r8, lsr #27
   1dd54:	andeq	sp, r1, r8, lsl #28
   1dd58:	andeq	sp, r1, r8, lsl #28
   1dd5c:	andeq	sp, r1, r8, lsl #28
   1dd60:	andeq	sp, r1, r8, lsr #27
   1dd64:	andeq	sp, r1, r8, lsl #28
   1dd68:	andeq	sp, r1, r8, lsr #27
   1dd6c:	andeq	sp, r1, r8, lsl #28
   1dd70:	andeq	sp, r1, r8, lsl #28
   1dd74:	andeq	sp, r1, r8, lsl #28
   1dd78:	andeq	sp, r1, r8, lsl #28
   1dd7c:	andeq	sp, r1, r8, lsl #28
   1dd80:	andeq	sp, r1, r8, lsl #28
   1dd84:	andeq	sp, r1, r8, lsl #28
   1dd88:	andeq	sp, r1, r8, lsl #28
   1dd8c:	andeq	sp, r1, r8, lsl #28
   1dd90:	andeq	sp, r1, r8, lsl #28
   1dd94:	andeq	sp, r1, r8, lsl #28
   1dd98:	andeq	sp, r1, r8, lsl #28
   1dd9c:	andeq	sp, r1, r8, lsr #27
   1dda0:	andeq	sp, r1, r8, lsr #27
   1dda4:	andeq	sp, r1, r8, lsr #27
   1dda8:	ldr	r2, [sp, #44]	; 0x2c
   1ddac:	cmp	r2, #0
   1ddb0:	bne	1df0c <__assert_fail@plt+0xcce0>
   1ddb4:	cmp	sl, r4
   1ddb8:	mov	r5, r1
   1ddbc:	movhi	r2, #63	; 0x3f
   1ddc0:	mov	r9, r3
   1ddc4:	strbhi	r2, [r8, r4]
   1ddc8:	add	r2, r4, #1
   1ddcc:	cmp	sl, r2
   1ddd0:	movhi	r0, #34	; 0x22
   1ddd4:	strbhi	r0, [r8, r2]
   1ddd8:	add	r2, r4, #2
   1dddc:	cmp	sl, r2
   1dde0:	movhi	r0, #34	; 0x22
   1dde4:	strbhi	r0, [r8, r2]
   1dde8:	add	r2, r4, #3
   1ddec:	add	r4, r4, #4
   1ddf0:	cmp	sl, r2
   1ddf4:	movhi	r0, #63	; 0x3f
   1ddf8:	strbhi	r0, [r8, r2]
   1ddfc:	mov	r2, #0
   1de00:	mov	r6, r2
   1de04:	b	1d23c <__assert_fail@plt+0xc010>
   1de08:	mov	r3, #0
   1de0c:	mov	r6, r3
   1de10:	b	1cdb4 <__assert_fail@plt+0xbb88>
   1de14:	ldr	r0, [sp, #28]
   1de18:	mov	r1, r4
   1de1c:	mov	r2, r7
   1de20:	mov	r3, r5
   1de24:	mov	ip, r5
   1de28:	ldr	r8, [sp, #76]	; 0x4c
   1de2c:	ldr	sl, [sp, #80]	; 0x50
   1de30:	cmp	r1, r0
   1de34:	ldr	r5, [sp, #84]	; 0x54
   1de38:	ldr	r7, [sp, #88]	; 0x58
   1de3c:	ldr	r4, [sp, #92]	; 0x5c
   1de40:	bcs	1de74 <__assert_fail@plt+0xcc48>
   1de44:	ldrb	r6, [r2]
   1de48:	cmp	r6, #0
   1de4c:	bne	1de60 <__assert_fail@plt+0xcc34>
   1de50:	b	1df94 <__assert_fail@plt+0xcd68>
   1de54:	ldrb	r6, [r2, #1]!
   1de58:	cmp	r6, #0
   1de5c:	beq	1df1c <__assert_fail@plt+0xccf0>
   1de60:	add	r3, r3, #1
   1de64:	add	r1, r9, r3
   1de68:	cmp	r1, r0
   1de6c:	bcc	1de54 <__assert_fail@plt+0xcc28>
   1de70:	mov	ip, r3
   1de74:	mov	r6, #0
   1de78:	ldr	r2, [sp, #40]	; 0x28
   1de7c:	b	1d9a0 <__assert_fail@plt+0xc774>
   1de80:	mov	r3, #1
   1de84:	mov	r2, #0
   1de88:	mov	r4, r2
   1de8c:	str	r3, [sp, #36]	; 0x24
   1de90:	str	r3, [sp, #40]	; 0x28
   1de94:	str	r3, [sp, #44]	; 0x2c
   1de98:	str	r2, [sp, #48]	; 0x30
   1de9c:	str	r3, [sp, #56]	; 0x38
   1dea0:	movw	r3, #61168	; 0xeef0
   1dea4:	movt	r3, #2
   1dea8:	str	r3, [sp, #60]	; 0x3c
   1deac:	str	r2, [sp, #68]	; 0x44
   1deb0:	str	r2, [sp, #72]	; 0x48
   1deb4:	b	1c914 <__assert_fail@plt+0xb6e8>
   1deb8:	mov	r2, r3
   1debc:	ldr	r3, [sp, #60]	; 0x3c
   1dec0:	cmp	r3, #0
   1dec4:	moveq	r2, #0
   1dec8:	andne	r2, r2, #1
   1decc:	cmp	r2, #0
   1ded0:	beq	1defc <__assert_fail@plt+0xccd0>
   1ded4:	mov	r2, r3
   1ded8:	ldrb	r3, [r3]
   1dedc:	cmp	r3, #0
   1dee0:	beq	1defc <__assert_fail@plt+0xccd0>
   1dee4:	cmp	sl, r4
   1dee8:	strbhi	r3, [fp, r4]
   1deec:	add	r4, r4, #1
   1def0:	ldrb	r3, [r2, #1]!
   1def4:	cmp	r3, #0
   1def8:	bne	1dee4 <__assert_fail@plt+0xccb8>
   1defc:	cmp	sl, r4
   1df00:	movhi	r3, #0
   1df04:	strbhi	r3, [fp, r4]
   1df08:	b	1d11c <__assert_fail@plt+0xbef0>
   1df0c:	str	fp, [sp, #152]	; 0x98
   1df10:	mov	fp, r8
   1df14:	ldr	r8, [sp, #152]	; 0x98
   1df18:	b	1d0e4 <__assert_fail@plt+0xbeb8>
   1df1c:	mov	ip, r3
   1df20:	ldr	r2, [sp, #40]	; 0x28
   1df24:	b	1d9a0 <__assert_fail@plt+0xc774>
   1df28:	str	fp, [sp, #152]	; 0x98
   1df2c:	mov	fp, r8
   1df30:	ldr	r8, [sp, #152]	; 0x98
   1df34:	sub	r3, r8, #2
   1df38:	clz	r3, r3
   1df3c:	lsr	r3, r3, #5
   1df40:	str	r3, [sp, #40]	; 0x28
   1df44:	b	1d0d8 <__assert_fail@plt+0xbeac>
   1df48:	mov	ip, #5
   1df4c:	ldr	r3, [sp, #28]
   1df50:	str	ip, [sp]
   1df54:	ldr	r2, [sp, #156]	; 0x9c
   1df58:	ldr	ip, [sp, #164]	; 0xa4
   1df5c:	ldr	r0, [sp, #160]	; 0xa0
   1df60:	str	r2, [sp, #4]
   1df64:	ldr	r2, [sp, #32]
   1df68:	ldr	r1, [sp, #72]	; 0x48
   1df6c:	str	ip, [sp, #12]
   1df70:	ldr	ip, [sp, #168]	; 0xa8
   1df74:	str	r0, [sp, #8]
   1df78:	mov	r0, fp
   1df7c:	str	ip, [sp, #16]
   1df80:	bl	1c82c <__assert_fail@plt+0xb600>
   1df84:	mov	r4, r0
   1df88:	b	1d11c <__assert_fail@plt+0xbef0>
   1df8c:	mov	r8, #2
   1df90:	b	1d0d8 <__assert_fail@plt+0xbeac>
   1df94:	ldr	r2, [sp, #40]	; 0x28
   1df98:	b	1d9a0 <__assert_fail@plt+0xc774>
   1df9c:	mov	r3, #0
   1dfa0:	mov	r2, #1
   1dfa4:	mov	r4, r3
   1dfa8:	strd	r2, [sp, #36]	; 0x24
   1dfac:	strd	r2, [sp, #44]	; 0x2c
   1dfb0:	str	r2, [sp, #56]	; 0x38
   1dfb4:	str	r3, [sp, #68]	; 0x44
   1dfb8:	str	r3, [sp, #72]	; 0x48
   1dfbc:	movw	r3, #61188	; 0xef04
   1dfc0:	movt	r3, #2
   1dfc4:	str	r3, [sp, #60]	; 0x3c
   1dfc8:	b	1c914 <__assert_fail@plt+0xb6e8>
   1dfcc:	mov	r3, #0
   1dfd0:	mov	r1, #1
   1dfd4:	mov	r2, r3
   1dfd8:	str	r1, [sp, #36]	; 0x24
   1dfdc:	str	r3, [sp, #48]	; 0x30
   1dfe0:	str	sl, [sp, #72]	; 0x48
   1dfe4:	b	1cf1c <__assert_fail@plt+0xbcf0>
   1dfe8:	bl	11220 <abort@plt>
   1dfec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dff0:	mov	r4, r0
   1dff4:	mov	r5, r3
   1dff8:	strd	r6, [sp, #8]
   1dffc:	movw	r7, #304	; 0x130
   1e000:	movt	r7, #4
   1e004:	strd	r8, [sp, #16]
   1e008:	strd	sl, [sp, #24]
   1e00c:	mov	sl, r1
   1e010:	mov	fp, r2
   1e014:	str	lr, [sp, #32]
   1e018:	sub	sp, sp, #60	; 0x3c
   1e01c:	bl	11148 <__errno_location@plt>
   1e020:	mov	r8, r0
   1e024:	cmn	r4, #-2147483647	; 0x80000001
   1e028:	ldr	r6, [r7]
   1e02c:	movne	r0, #0
   1e030:	moveq	r0, #1
   1e034:	ldr	r3, [r8]
   1e038:	orrs	r0, r0, r4, lsr #31
   1e03c:	str	r3, [sp, #28]
   1e040:	bne	1e1d0 <__assert_fail@plt+0xcfa4>
   1e044:	ldr	r3, [r7, #4]
   1e048:	cmp	r3, r4
   1e04c:	bgt	1e0ac <__assert_fail@plt+0xce80>
   1e050:	add	r1, r7, #8
   1e054:	sub	r2, r4, r3
   1e058:	str	r3, [sp, #52]	; 0x34
   1e05c:	cmp	r6, r1
   1e060:	add	r2, r2, #1
   1e064:	beq	1e1a8 <__assert_fail@plt+0xcf7c>
   1e068:	mov	r1, #8
   1e06c:	mov	r0, r6
   1e070:	mvn	r3, #-2147483648	; 0x80000000
   1e074:	str	r1, [sp]
   1e078:	add	r1, sp, #52	; 0x34
   1e07c:	bl	2d040 <__assert_fail@plt+0x1be14>
   1e080:	mov	r6, r0
   1e084:	str	r0, [r7]
   1e088:	ldr	r0, [r7, #4]
   1e08c:	mov	r1, #0
   1e090:	ldr	r2, [sp, #52]	; 0x34
   1e094:	sub	r2, r2, r0
   1e098:	add	r0, r6, r0, lsl #3
   1e09c:	lsl	r2, r2, #3
   1e0a0:	bl	1116c <memset@plt>
   1e0a4:	ldr	r3, [sp, #52]	; 0x34
   1e0a8:	str	r3, [r7, #4]
   1e0ac:	ldr	r1, [r5, #4]
   1e0b0:	add	r0, r6, r4, lsl #3
   1e0b4:	add	ip, r5, #8
   1e0b8:	mov	r3, fp
   1e0bc:	mov	r2, sl
   1e0c0:	ldr	r7, [r0, #4]
   1e0c4:	str	r0, [sp, #36]	; 0x24
   1e0c8:	str	ip, [sp, #40]	; 0x28
   1e0cc:	orr	r0, r1, #1
   1e0d0:	ldr	r9, [r6, r4, lsl #3]
   1e0d4:	str	ip, [sp, #8]
   1e0d8:	ldr	lr, [r5, #44]	; 0x2c
   1e0dc:	str	r0, [sp, #4]
   1e0e0:	ldr	ip, [r5]
   1e0e4:	mov	r1, r9
   1e0e8:	str	ip, [sp, #32]
   1e0ec:	ldr	ip, [r5, #40]	; 0x28
   1e0f0:	str	ip, [sp, #12]
   1e0f4:	ldr	ip, [sp, #32]
   1e0f8:	str	lr, [sp, #16]
   1e0fc:	str	r0, [sp, #44]	; 0x2c
   1e100:	mov	r0, r7
   1e104:	str	ip, [sp]
   1e108:	bl	1c82c <__assert_fail@plt+0xb600>
   1e10c:	cmp	r9, r0
   1e110:	bhi	1e180 <__assert_fail@plt+0xcf54>
   1e114:	add	r9, r0, #1
   1e118:	movw	r3, #416	; 0x1a0
   1e11c:	movt	r3, #4
   1e120:	cmp	r7, r3
   1e124:	str	r9, [r6, r4, lsl #3]
   1e128:	beq	1e134 <__assert_fail@plt+0xcf08>
   1e12c:	mov	r0, r7
   1e130:	bl	13254 <__assert_fail@plt+0x2028>
   1e134:	mov	r0, r9
   1e138:	bl	2ce90 <__assert_fail@plt+0x1bc64>
   1e13c:	ldr	ip, [r5]
   1e140:	mov	r3, fp
   1e144:	mov	r2, sl
   1e148:	mov	r1, r9
   1e14c:	mov	r7, r0
   1e150:	ldr	lr, [sp, #36]	; 0x24
   1e154:	ldr	r4, [r5, #40]	; 0x28
   1e158:	str	r0, [lr, #4]
   1e15c:	ldr	lr, [r5, #44]	; 0x2c
   1e160:	str	ip, [sp]
   1e164:	ldr	ip, [sp, #44]	; 0x2c
   1e168:	str	ip, [sp, #4]
   1e16c:	ldr	ip, [sp, #40]	; 0x28
   1e170:	str	r4, [sp, #12]
   1e174:	str	lr, [sp, #16]
   1e178:	str	ip, [sp, #8]
   1e17c:	bl	1c82c <__assert_fail@plt+0xb600>
   1e180:	ldr	r3, [sp, #28]
   1e184:	mov	r0, r7
   1e188:	str	r3, [r8]
   1e18c:	add	sp, sp, #60	; 0x3c
   1e190:	ldrd	r4, [sp]
   1e194:	ldrd	r6, [sp, #8]
   1e198:	ldrd	r8, [sp, #16]
   1e19c:	ldrd	sl, [sp, #24]
   1e1a0:	add	sp, sp, #32
   1e1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e1a8:	mov	r1, #8
   1e1ac:	mvn	r3, #-2147483648	; 0x80000000
   1e1b0:	str	r1, [sp]
   1e1b4:	add	r1, sp, #52	; 0x34
   1e1b8:	bl	2d040 <__assert_fail@plt+0x1be14>
   1e1bc:	ldrd	r2, [r7, #8]
   1e1c0:	mov	r6, r0
   1e1c4:	str	r0, [r7]
   1e1c8:	strd	r2, [r0]
   1e1cc:	b	1e088 <__assert_fail@plt+0xce5c>
   1e1d0:	bl	11220 <abort@plt>
   1e1d4:	strd	r4, [sp, #-16]!
   1e1d8:	mov	r5, r0
   1e1dc:	str	r6, [sp, #8]
   1e1e0:	str	lr, [sp, #12]
   1e1e4:	bl	11148 <__errno_location@plt>
   1e1e8:	mov	r4, r0
   1e1ec:	cmp	r5, #0
   1e1f0:	ldr	r0, [pc, #32]	; 1e218 <__assert_fail@plt+0xcfec>
   1e1f4:	mov	r1, #48	; 0x30
   1e1f8:	movne	r0, r5
   1e1fc:	ldr	r6, [r4]
   1e200:	bl	2d1b8 <__assert_fail@plt+0x1bf8c>
   1e204:	str	r6, [r4]
   1e208:	ldrd	r4, [sp]
   1e20c:	ldr	r6, [sp, #8]
   1e210:	add	sp, sp, #12
   1e214:	pop	{pc}		; (ldr pc, [sp], #4)
   1e218:	andeq	r0, r4, r0, lsr #5
   1e21c:	ldr	r3, [pc, #12]	; 1e230 <__assert_fail@plt+0xd004>
   1e220:	cmp	r0, #0
   1e224:	moveq	r0, r3
   1e228:	ldr	r0, [r0]
   1e22c:	bx	lr
   1e230:	andeq	r0, r4, r0, lsr #5
   1e234:	ldr	r3, [pc, #12]	; 1e248 <__assert_fail@plt+0xd01c>
   1e238:	cmp	r0, #0
   1e23c:	moveq	r0, r3
   1e240:	str	r1, [r0]
   1e244:	bx	lr
   1e248:	andeq	r0, r4, r0, lsr #5
   1e24c:	ldr	r3, [pc, #52]	; 1e288 <__assert_fail@plt+0xd05c>
   1e250:	cmp	r0, #0
   1e254:	push	{lr}		; (str lr, [sp, #-4]!)
   1e258:	lsr	lr, r1, #5
   1e25c:	and	r1, r1, #31
   1e260:	moveq	r0, r3
   1e264:	add	r3, r0, #8
   1e268:	ldr	ip, [r3, lr, lsl #2]
   1e26c:	lsr	r0, ip, r1
   1e270:	eor	r2, r2, r0
   1e274:	and	r0, r0, #1
   1e278:	and	r2, r2, #1
   1e27c:	eor	r1, ip, r2, lsl r1
   1e280:	str	r1, [r3, lr, lsl #2]
   1e284:	pop	{pc}		; (ldr pc, [sp], #4)
   1e288:	andeq	r0, r4, r0, lsr #5
   1e28c:	ldr	r3, [pc, #16]	; 1e2a4 <__assert_fail@plt+0xd078>
   1e290:	cmp	r0, #0
   1e294:	movne	r3, r0
   1e298:	ldr	r0, [r3, #4]
   1e29c:	str	r1, [r3, #4]
   1e2a0:	bx	lr
   1e2a4:	andeq	r0, r4, r0, lsr #5
   1e2a8:	ldr	r3, [pc, #48]	; 1e2e0 <__assert_fail@plt+0xd0b4>
   1e2ac:	cmp	r0, #0
   1e2b0:	mov	ip, #10
   1e2b4:	moveq	r0, r3
   1e2b8:	cmp	r2, #0
   1e2bc:	cmpne	r1, #0
   1e2c0:	str	ip, [r0]
   1e2c4:	beq	1e2d4 <__assert_fail@plt+0xd0a8>
   1e2c8:	str	r1, [r0, #40]	; 0x28
   1e2cc:	str	r2, [r0, #44]	; 0x2c
   1e2d0:	bx	lr
   1e2d4:	str	r4, [sp, #-8]!
   1e2d8:	str	lr, [sp, #4]
   1e2dc:	bl	11220 <abort@plt>
   1e2e0:	andeq	r0, r4, r0, lsr #5
   1e2e4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1e2e8:	strd	r6, [sp, #8]
   1e2ec:	mov	r7, r0
   1e2f0:	mov	r6, r1
   1e2f4:	strd	r8, [sp, #16]
   1e2f8:	mov	r8, r2
   1e2fc:	mov	r9, r3
   1e300:	str	lr, [sp, #24]
   1e304:	sub	sp, sp, #28
   1e308:	ldr	r4, [sp, #56]	; 0x38
   1e30c:	ldr	ip, [pc, #104]	; 1e37c <__assert_fail@plt+0xd150>
   1e310:	cmp	r4, #0
   1e314:	moveq	r4, ip
   1e318:	bl	11148 <__errno_location@plt>
   1e31c:	ldr	ip, [r4, #44]	; 0x2c
   1e320:	mov	r5, r0
   1e324:	mov	r1, r6
   1e328:	add	lr, r4, #8
   1e32c:	mov	r3, r9
   1e330:	ldr	r6, [r5]
   1e334:	mov	r2, r8
   1e338:	mov	r0, r7
   1e33c:	str	ip, [sp, #16]
   1e340:	ldr	ip, [r4, #40]	; 0x28
   1e344:	str	lr, [sp, #8]
   1e348:	str	ip, [sp, #12]
   1e34c:	ldr	ip, [r4, #4]
   1e350:	str	ip, [sp, #4]
   1e354:	ldr	ip, [r4]
   1e358:	str	ip, [sp]
   1e35c:	bl	1c82c <__assert_fail@plt+0xb600>
   1e360:	str	r6, [r5]
   1e364:	add	sp, sp, #28
   1e368:	ldrd	r4, [sp]
   1e36c:	ldrd	r6, [sp, #8]
   1e370:	ldrd	r8, [sp, #16]
   1e374:	add	sp, sp, #24
   1e378:	pop	{pc}		; (ldr pc, [sp], #4)
   1e37c:	andeq	r0, r4, r0, lsr #5
   1e380:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e384:	cmp	r3, #0
   1e388:	ldr	r4, [pc, #220]	; 1e46c <__assert_fail@plt+0xd240>
   1e38c:	movne	r4, r3
   1e390:	strd	r6, [sp, #8]
   1e394:	mov	r6, r2
   1e398:	strd	r8, [sp, #16]
   1e39c:	mov	r9, r0
   1e3a0:	strd	sl, [sp, #24]
   1e3a4:	mov	sl, r1
   1e3a8:	str	lr, [sp, #32]
   1e3ac:	sub	sp, sp, #44	; 0x2c
   1e3b0:	bl	11148 <__errno_location@plt>
   1e3b4:	ldr	r5, [r4, #4]
   1e3b8:	mov	r7, r0
   1e3bc:	mov	r1, #0
   1e3c0:	add	r8, r4, #8
   1e3c4:	mov	r3, sl
   1e3c8:	ldr	ip, [r4, #44]	; 0x2c
   1e3cc:	mov	r2, r9
   1e3d0:	mov	r0, r1
   1e3d4:	ldr	lr, [r7]
   1e3d8:	cmp	r6, r1
   1e3dc:	orreq	r5, r5, #1
   1e3e0:	str	ip, [sp, #16]
   1e3e4:	ldr	ip, [r4, #40]	; 0x28
   1e3e8:	stmib	sp, {r5, r8, ip}
   1e3ec:	ldr	ip, [r4]
   1e3f0:	str	lr, [sp, #28]
   1e3f4:	str	ip, [sp]
   1e3f8:	bl	1c82c <__assert_fail@plt+0xb600>
   1e3fc:	add	r1, r0, #1
   1e400:	mov	fp, r0
   1e404:	mov	r0, r1
   1e408:	str	r1, [sp, #36]	; 0x24
   1e40c:	bl	2ce90 <__assert_fail@plt+0x1bc64>
   1e410:	ldr	ip, [r4, #44]	; 0x2c
   1e414:	mov	r3, sl
   1e418:	mov	r2, r9
   1e41c:	ldr	r1, [sp, #36]	; 0x24
   1e420:	str	ip, [sp, #16]
   1e424:	ldr	ip, [r4, #40]	; 0x28
   1e428:	str	r0, [sp, #32]
   1e42c:	stmib	sp, {r5, r8, ip}
   1e430:	ldr	ip, [r4]
   1e434:	str	ip, [sp]
   1e438:	bl	1c82c <__assert_fail@plt+0xb600>
   1e43c:	ldr	lr, [sp, #28]
   1e440:	cmp	r6, #0
   1e444:	ldr	r0, [sp, #32]
   1e448:	str	lr, [r7]
   1e44c:	strne	fp, [r6]
   1e450:	add	sp, sp, #44	; 0x2c
   1e454:	ldrd	r4, [sp]
   1e458:	ldrd	r6, [sp, #8]
   1e45c:	ldrd	r8, [sp, #16]
   1e460:	ldrd	sl, [sp, #24]
   1e464:	add	sp, sp, #32
   1e468:	pop	{pc}		; (ldr pc, [sp], #4)
   1e46c:	andeq	r0, r4, r0, lsr #5
   1e470:	mov	r3, r2
   1e474:	mov	r2, #0
   1e478:	b	1e380 <__assert_fail@plt+0xd154>
   1e47c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e480:	movw	r5, #304	; 0x130
   1e484:	movt	r5, #4
   1e488:	ldr	r3, [r5, #4]
   1e48c:	strd	r6, [sp, #8]
   1e490:	str	r8, [sp, #16]
   1e494:	str	lr, [sp, #20]
   1e498:	ldr	r7, [r5]
   1e49c:	cmp	r3, #1
   1e4a0:	ble	1e4c4 <__assert_fail@plt+0xd298>
   1e4a4:	mov	r4, #1
   1e4a8:	add	r6, r7, #4
   1e4ac:	ldr	r0, [r6, r4, lsl #3]
   1e4b0:	add	r4, r4, #1
   1e4b4:	bl	13254 <__assert_fail@plt+0x2028>
   1e4b8:	ldr	r3, [r5, #4]
   1e4bc:	cmp	r3, r4
   1e4c0:	bgt	1e4ac <__assert_fail@plt+0xd280>
   1e4c4:	ldr	r0, [r7, #4]
   1e4c8:	movw	r4, #416	; 0x1a0
   1e4cc:	movt	r4, #4
   1e4d0:	cmp	r0, r4
   1e4d4:	beq	1e4e8 <__assert_fail@plt+0xd2bc>
   1e4d8:	bl	13254 <__assert_fail@plt+0x2028>
   1e4dc:	mov	r3, #256	; 0x100
   1e4e0:	str	r3, [r5, #8]
   1e4e4:	str	r4, [r5, #12]
   1e4e8:	ldr	r4, [pc, #44]	; 1e51c <__assert_fail@plt+0xd2f0>
   1e4ec:	cmp	r7, r4
   1e4f0:	beq	1e500 <__assert_fail@plt+0xd2d4>
   1e4f4:	mov	r0, r7
   1e4f8:	bl	13254 <__assert_fail@plt+0x2028>
   1e4fc:	str	r4, [r5]
   1e500:	mov	r3, #1
   1e504:	ldrd	r6, [sp, #8]
   1e508:	str	r3, [r5, #4]
   1e50c:	ldrd	r4, [sp]
   1e510:	ldr	r8, [sp, #16]
   1e514:	add	sp, sp, #20
   1e518:	pop	{pc}		; (ldr pc, [sp], #4)
   1e51c:	andeq	r0, r4, r8, lsr r1
   1e520:	ldr	r3, [pc, #4]	; 1e52c <__assert_fail@plt+0xd300>
   1e524:	mvn	r2, #0
   1e528:	b	1dfec <__assert_fail@plt+0xcdc0>
   1e52c:	andeq	r0, r4, r0, lsr #5
   1e530:	ldr	r3, [pc]	; 1e538 <__assert_fail@plt+0xd30c>
   1e534:	b	1dfec <__assert_fail@plt+0xcdc0>
   1e538:	andeq	r0, r4, r0, lsr #5
   1e53c:	mov	r1, r0
   1e540:	ldr	r3, [pc, #8]	; 1e550 <__assert_fail@plt+0xd324>
   1e544:	mvn	r2, #0
   1e548:	mov	r0, #0
   1e54c:	b	1dfec <__assert_fail@plt+0xcdc0>
   1e550:	andeq	r0, r4, r0, lsr #5
   1e554:	mov	r2, r1
   1e558:	ldr	r3, [pc, #8]	; 1e568 <__assert_fail@plt+0xd33c>
   1e55c:	mov	r1, r0
   1e560:	mov	r0, #0
   1e564:	b	1dfec <__assert_fail@plt+0xcdc0>
   1e568:	andeq	r0, r4, r0, lsr #5
   1e56c:	strd	r4, [sp, #-12]!
   1e570:	mov	r5, r2
   1e574:	mov	r4, r0
   1e578:	str	lr, [sp, #8]
   1e57c:	sub	sp, sp, #52	; 0x34
   1e580:	mov	r0, sp
   1e584:	bl	1c688 <__assert_fail@plt+0xb45c>
   1e588:	mov	r3, sp
   1e58c:	mov	r1, r5
   1e590:	mov	r0, r4
   1e594:	mvn	r2, #0
   1e598:	bl	1dfec <__assert_fail@plt+0xcdc0>
   1e59c:	add	sp, sp, #52	; 0x34
   1e5a0:	ldrd	r4, [sp]
   1e5a4:	add	sp, sp, #8
   1e5a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e5ac:	strd	r4, [sp, #-16]!
   1e5b0:	mov	r5, r2
   1e5b4:	mov	r4, r0
   1e5b8:	str	r6, [sp, #8]
   1e5bc:	mov	r6, r3
   1e5c0:	str	lr, [sp, #12]
   1e5c4:	sub	sp, sp, #48	; 0x30
   1e5c8:	mov	r0, sp
   1e5cc:	bl	1c688 <__assert_fail@plt+0xb45c>
   1e5d0:	mov	r3, sp
   1e5d4:	mov	r2, r6
   1e5d8:	mov	r1, r5
   1e5dc:	mov	r0, r4
   1e5e0:	bl	1dfec <__assert_fail@plt+0xcdc0>
   1e5e4:	add	sp, sp, #48	; 0x30
   1e5e8:	ldrd	r4, [sp]
   1e5ec:	ldr	r6, [sp, #8]
   1e5f0:	add	sp, sp, #12
   1e5f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e5f8:	mov	r2, r1
   1e5fc:	mov	r1, r0
   1e600:	mov	r0, #0
   1e604:	b	1e56c <__assert_fail@plt+0xd340>
   1e608:	mov	r3, r2
   1e60c:	mov	r2, r1
   1e610:	mov	r1, r0
   1e614:	mov	r0, #0
   1e618:	b	1e5ac <__assert_fail@plt+0xd380>
   1e61c:	ldr	ip, [pc, #140]	; 1e6b0 <__assert_fail@plt+0xd484>
   1e620:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1e624:	ldrd	r4, [ip]
   1e628:	strd	r6, [sp, #8]
   1e62c:	ldrd	r6, [ip, #8]
   1e630:	strd	r8, [sp, #16]
   1e634:	lsr	r9, r2, #5
   1e638:	str	lr, [sp, #24]
   1e63c:	sub	sp, sp, #52	; 0x34
   1e640:	and	lr, r2, #31
   1e644:	add	r8, sp, #8
   1e648:	mov	r2, r1
   1e64c:	strd	r4, [sp]
   1e650:	mov	r1, r0
   1e654:	mov	r3, sp
   1e658:	strd	r6, [sp, #8]
   1e65c:	mov	r0, #0
   1e660:	ldrd	r4, [ip, #16]
   1e664:	ldrd	r6, [ip, #24]
   1e668:	strd	r4, [sp, #16]
   1e66c:	ldrd	r4, [ip, #32]
   1e670:	strd	r6, [sp, #24]
   1e674:	ldrd	r6, [ip, #40]	; 0x28
   1e678:	strd	r4, [sp, #32]
   1e67c:	strd	r6, [sp, #40]	; 0x28
   1e680:	ldr	ip, [r8, r9, lsl #2]
   1e684:	mvn	r4, ip, lsr lr
   1e688:	and	r4, r4, #1
   1e68c:	eor	lr, ip, r4, lsl lr
   1e690:	str	lr, [r8, r9, lsl #2]
   1e694:	bl	1dfec <__assert_fail@plt+0xcdc0>
   1e698:	add	sp, sp, #52	; 0x34
   1e69c:	ldrd	r4, [sp]
   1e6a0:	ldrd	r6, [sp, #8]
   1e6a4:	ldrd	r8, [sp, #16]
   1e6a8:	add	sp, sp, #24
   1e6ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6b0:	andeq	r0, r4, r0, lsr #5
   1e6b4:	mov	r2, r1
   1e6b8:	mvn	r1, #0
   1e6bc:	b	1e61c <__assert_fail@plt+0xd3f0>
   1e6c0:	mov	r2, #58	; 0x3a
   1e6c4:	mvn	r1, #0
   1e6c8:	b	1e61c <__assert_fail@plt+0xd3f0>
   1e6cc:	mov	r2, #58	; 0x3a
   1e6d0:	b	1e61c <__assert_fail@plt+0xd3f0>
   1e6d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e6d8:	strd	r6, [sp, #8]
   1e6dc:	mov	r6, r0
   1e6e0:	mov	r7, r2
   1e6e4:	str	lr, [sp, #16]
   1e6e8:	sub	sp, sp, #100	; 0x64
   1e6ec:	mov	r0, sp
   1e6f0:	bl	1c688 <__assert_fail@plt+0xb45c>
   1e6f4:	ldrd	r4, [sp, #8]
   1e6f8:	mov	r1, r7
   1e6fc:	mov	r0, r6
   1e700:	add	r3, sp, #48	; 0x30
   1e704:	mvn	r2, #0
   1e708:	ldrd	r6, [sp]
   1e70c:	strd	r4, [sp, #56]	; 0x38
   1e710:	ldrd	r4, [sp, #16]
   1e714:	strd	r6, [sp, #48]	; 0x30
   1e718:	ldrd	r6, [sp, #32]
   1e71c:	ldr	lr, [sp, #60]	; 0x3c
   1e720:	strd	r4, [sp, #64]	; 0x40
   1e724:	ldrd	r4, [sp, #24]
   1e728:	mvn	ip, lr
   1e72c:	and	ip, ip, #67108864	; 0x4000000
   1e730:	strd	r4, [sp, #72]	; 0x48
   1e734:	eor	ip, ip, lr
   1e738:	ldrd	r4, [sp, #40]	; 0x28
   1e73c:	str	ip, [sp, #60]	; 0x3c
   1e740:	strd	r6, [sp, #80]	; 0x50
   1e744:	strd	r4, [sp, #88]	; 0x58
   1e748:	bl	1dfec <__assert_fail@plt+0xcdc0>
   1e74c:	add	sp, sp, #100	; 0x64
   1e750:	ldrd	r4, [sp]
   1e754:	ldrd	r6, [sp, #8]
   1e758:	add	sp, sp, #16
   1e75c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e760:	ldr	ip, [pc, #156]	; 1e804 <__assert_fail@plt+0xd5d8>
   1e764:	cmp	r2, #0
   1e768:	cmpne	r1, #0
   1e76c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1e770:	strd	r6, [sp, #8]
   1e774:	mov	r6, r2
   1e778:	str	r8, [sp, #16]
   1e77c:	mov	r8, r3
   1e780:	strd	sl, [sp, #20]
   1e784:	ldrd	r4, [ip]
   1e788:	str	lr, [sp, #28]
   1e78c:	sub	sp, sp, #48	; 0x30
   1e790:	mov	lr, #10
   1e794:	ldrd	r2, [ip, #8]
   1e798:	ldrd	sl, [ip, #16]
   1e79c:	strd	r4, [sp]
   1e7a0:	ldrd	r4, [ip, #32]
   1e7a4:	str	lr, [sp]
   1e7a8:	strd	r2, [sp, #8]
   1e7ac:	strd	sl, [sp, #16]
   1e7b0:	ldrd	r2, [ip, #24]
   1e7b4:	ldrd	sl, [ip, #40]	; 0x28
   1e7b8:	strd	r2, [sp, #24]
   1e7bc:	strd	r4, [sp, #32]
   1e7c0:	strd	sl, [sp, #40]	; 0x28
   1e7c4:	beq	1e800 <__assert_fail@plt+0xd5d4>
   1e7c8:	ldr	r2, [sp, #80]	; 0x50
   1e7cc:	mov	r7, r1
   1e7d0:	mov	r3, sp
   1e7d4:	mov	r1, r8
   1e7d8:	str	r7, [sp, #40]	; 0x28
   1e7dc:	str	r6, [sp, #44]	; 0x2c
   1e7e0:	bl	1dfec <__assert_fail@plt+0xcdc0>
   1e7e4:	add	sp, sp, #48	; 0x30
   1e7e8:	ldrd	r4, [sp]
   1e7ec:	ldrd	r6, [sp, #8]
   1e7f0:	ldr	r8, [sp, #16]
   1e7f4:	ldrd	sl, [sp, #20]
   1e7f8:	add	sp, sp, #28
   1e7fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e800:	bl	11220 <abort@plt>
   1e804:	andeq	r0, r4, r0, lsr #5
   1e808:	mvn	ip, #0
   1e80c:	push	{lr}		; (str lr, [sp, #-4]!)
   1e810:	sub	sp, sp, #12
   1e814:	str	ip, [sp]
   1e818:	bl	1e760 <__assert_fail@plt+0xd534>
   1e81c:	add	sp, sp, #12
   1e820:	pop	{pc}		; (ldr pc, [sp], #4)
   1e824:	mvn	ip, #0
   1e828:	push	{lr}		; (str lr, [sp, #-4]!)
   1e82c:	sub	sp, sp, #12
   1e830:	mov	r3, r2
   1e834:	mov	r2, r1
   1e838:	mov	r1, r0
   1e83c:	mov	r0, #0
   1e840:	str	ip, [sp]
   1e844:	bl	1e760 <__assert_fail@plt+0xd534>
   1e848:	add	sp, sp, #12
   1e84c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e850:	push	{lr}		; (str lr, [sp, #-4]!)
   1e854:	sub	sp, sp, #12
   1e858:	str	r3, [sp]
   1e85c:	mov	r3, r2
   1e860:	mov	r2, r1
   1e864:	mov	r1, r0
   1e868:	mov	r0, #0
   1e86c:	bl	1e760 <__assert_fail@plt+0xd534>
   1e870:	add	sp, sp, #12
   1e874:	pop	{pc}		; (ldr pc, [sp], #4)
   1e878:	ldr	r3, [pc]	; 1e880 <__assert_fail@plt+0xd654>
   1e87c:	b	1dfec <__assert_fail@plt+0xcdc0>
   1e880:	andeq	r0, r4, r0, asr #2
   1e884:	mov	r2, r1
   1e888:	ldr	r3, [pc, #8]	; 1e898 <__assert_fail@plt+0xd66c>
   1e88c:	mov	r1, r0
   1e890:	mov	r0, #0
   1e894:	b	1dfec <__assert_fail@plt+0xcdc0>
   1e898:	andeq	r0, r4, r0, asr #2
   1e89c:	ldr	r3, [pc, #4]	; 1e8a8 <__assert_fail@plt+0xd67c>
   1e8a0:	mvn	r2, #0
   1e8a4:	b	1dfec <__assert_fail@plt+0xcdc0>
   1e8a8:	andeq	r0, r4, r0, asr #2
   1e8ac:	mov	r1, r0
   1e8b0:	ldr	r3, [pc, #8]	; 1e8c0 <__assert_fail@plt+0xd694>
   1e8b4:	mvn	r2, #0
   1e8b8:	mov	r0, #0
   1e8bc:	b	1dfec <__assert_fail@plt+0xcdc0>
   1e8c0:	andeq	r0, r4, r0, asr #2
   1e8c4:	clz	r3, r1
   1e8c8:	cmp	r0, #0
   1e8cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1e8d0:	lsr	r3, r3, #5
   1e8d4:	mov	lr, r0
   1e8d8:	moveq	r0, #1
   1e8dc:	movne	r0, r3
   1e8e0:	cmp	r0, #0
   1e8e4:	movne	r0, #0
   1e8e8:	bne	1e8fc <__assert_fail@plt+0xd6d0>
   1e8ec:	ldr	r2, [r1, #4]
   1e8f0:	ldr	r3, [lr, #4]
   1e8f4:	cmp	r3, r2
   1e8f8:	beq	1e918 <__assert_fail@plt+0xd6ec>
   1e8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e900:	ldr	r2, [r1, #8]
   1e904:	ldr	ip, [lr, #8]
   1e908:	ldr	r2, [r2, r3, lsl #2]
   1e90c:	ldr	ip, [ip, r3, lsl #2]
   1e910:	cmp	ip, r2
   1e914:	bne	1e8fc <__assert_fail@plt+0xd6d0>
   1e918:	subs	r3, r3, #1
   1e91c:	bpl	1e900 <__assert_fail@plt+0xd6d4>
   1e920:	mov	r0, #1
   1e924:	pop	{pc}		; (ldr pc, [sp], #4)
   1e928:	strd	r4, [sp, #-16]!
   1e92c:	mov	r4, r0
   1e930:	mov	r5, r2
   1e934:	str	r6, [sp, #8]
   1e938:	mov	r6, r1
   1e93c:	str	lr, [sp, #12]
   1e940:	b	1e948 <__assert_fail@plt+0xd71c>
   1e944:	mov	r4, r3
   1e948:	ldr	r3, [r4, #4]
   1e94c:	cmp	r3, #0
   1e950:	bne	1e944 <__assert_fail@plt+0xd718>
   1e954:	ldr	r3, [r4, #8]
   1e958:	cmp	r3, #0
   1e95c:	bne	1e944 <__assert_fail@plt+0xd718>
   1e960:	b	1e998 <__assert_fail@plt+0xd76c>
   1e964:	ldr	r2, [r4]
   1e968:	cmp	r2, #0
   1e96c:	beq	1e9ac <__assert_fail@plt+0xd780>
   1e970:	ldr	r3, [r2, #8]
   1e974:	sub	r1, r3, r4
   1e978:	cmp	r3, #0
   1e97c:	clz	r1, r1
   1e980:	mov	r4, r2
   1e984:	lsr	r1, r1, #5
   1e988:	moveq	r2, #1
   1e98c:	movne	r2, r1
   1e990:	cmp	r2, #0
   1e994:	beq	1e944 <__assert_fail@plt+0xd718>
   1e998:	mov	r1, r4
   1e99c:	mov	r0, r5
   1e9a0:	blx	r6
   1e9a4:	cmp	r0, #0
   1e9a8:	beq	1e964 <__assert_fail@plt+0xd738>
   1e9ac:	ldrd	r4, [sp]
   1e9b0:	ldr	r6, [sp, #8]
   1e9b4:	add	sp, sp, #12
   1e9b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9bc:	ldr	r3, [r1, #40]	; 0x28
   1e9c0:	ldr	ip, [r1, #56]	; 0x38
   1e9c4:	cmp	ip, r3
   1e9c8:	ble	1ea8c <__assert_fail@plt+0xd860>
   1e9cc:	str	r4, [sp, #-8]!
   1e9d0:	ldr	r4, [r1, #80]	; 0x50
   1e9d4:	str	lr, [sp, #4]
   1e9d8:	ldr	lr, [r1, #4]
   1e9dc:	cmp	r4, #1
   1e9e0:	ldrb	ip, [lr, r3]
   1e9e4:	strb	ip, [r0]
   1e9e8:	ble	1ea08 <__assert_fail@plt+0xd7dc>
   1e9ec:	ldr	r4, [r1, #28]
   1e9f0:	cmp	r3, r4
   1e9f4:	beq	1ea08 <__assert_fail@plt+0xd7dc>
   1e9f8:	ldr	r4, [r1, #8]
   1e9fc:	ldr	r4, [r4, r3, lsl #2]
   1ea00:	cmn	r4, #1
   1ea04:	beq	1ea4c <__assert_fail@plt+0xd820>
   1ea08:	cmp	ip, #92	; 0x5c
   1ea0c:	beq	1ea44 <__assert_fail@plt+0xd818>
   1ea10:	cmp	ip, #91	; 0x5b
   1ea14:	beq	1eacc <__assert_fail@plt+0xd8a0>
   1ea18:	cmp	ip, #93	; 0x5d
   1ea1c:	beq	1eb24 <__assert_fail@plt+0xd8f8>
   1ea20:	cmp	ip, #94	; 0x5e
   1ea24:	bne	1ea68 <__assert_fail@plt+0xd83c>
   1ea28:	mov	r2, #25
   1ea2c:	mov	r3, #1
   1ea30:	ldr	r4, [sp]
   1ea34:	add	sp, sp, #4
   1ea38:	strb	r2, [r0, #4]
   1ea3c:	mov	r0, r3
   1ea40:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea44:	tst	r2, #1
   1ea48:	bne	1eaa0 <__assert_fail@plt+0xd874>
   1ea4c:	mov	r2, #1
   1ea50:	mov	r3, r2
   1ea54:	strb	r2, [r0, #4]
   1ea58:	ldr	r4, [sp]
   1ea5c:	add	sp, sp, #4
   1ea60:	mov	r0, r3
   1ea64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea68:	cmp	ip, #45	; 0x2d
   1ea6c:	bne	1ea4c <__assert_fail@plt+0xd820>
   1ea70:	mov	r2, #22
   1ea74:	mov	r3, #1
   1ea78:	ldr	r4, [sp]
   1ea7c:	add	sp, sp, #4
   1ea80:	strb	r2, [r0, #4]
   1ea84:	mov	r0, r3
   1ea88:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea8c:	mov	r2, #2
   1ea90:	mov	r3, #0
   1ea94:	strb	r2, [r0, #4]
   1ea98:	mov	r0, r3
   1ea9c:	bx	lr
   1eaa0:	ldr	r2, [r1, #48]	; 0x30
   1eaa4:	add	r3, r3, #1
   1eaa8:	cmp	r3, r2
   1eaac:	bge	1ea4c <__assert_fail@plt+0xd820>
   1eab0:	str	r3, [r1, #40]	; 0x28
   1eab4:	mov	r2, #1
   1eab8:	ldrb	r1, [lr, r3]
   1eabc:	mov	r3, r2
   1eac0:	strb	r1, [r0]
   1eac4:	strb	r2, [r0, #4]
   1eac8:	b	1ea58 <__assert_fail@plt+0xd82c>
   1eacc:	ldr	r1, [r1, #48]	; 0x30
   1ead0:	add	ip, r3, #1
   1ead4:	cmp	ip, r1
   1ead8:	bge	1eb0c <__assert_fail@plt+0xd8e0>
   1eadc:	add	r3, lr, r3
   1eae0:	ldrb	r3, [r3, #1]
   1eae4:	cmp	r3, #58	; 0x3a
   1eae8:	strb	r3, [r0]
   1eaec:	beq	1eb50 <__assert_fail@plt+0xd924>
   1eaf0:	cmp	r3, #61	; 0x3d
   1eaf4:	beq	1eb40 <__assert_fail@plt+0xd914>
   1eaf8:	cmp	r3, #46	; 0x2e
   1eafc:	moveq	r2, #26
   1eb00:	moveq	r3, #2
   1eb04:	strbeq	r2, [r0, #4]
   1eb08:	beq	1ea58 <__assert_fail@plt+0xd82c>
   1eb0c:	mov	r2, #1
   1eb10:	mov	r1, #91	; 0x5b
   1eb14:	mov	r3, r2
   1eb18:	strb	r1, [r0]
   1eb1c:	strb	r2, [r0, #4]
   1eb20:	b	1ea58 <__assert_fail@plt+0xd82c>
   1eb24:	mov	r2, #21
   1eb28:	mov	r3, #1
   1eb2c:	ldr	r4, [sp]
   1eb30:	add	sp, sp, #4
   1eb34:	strb	r2, [r0, #4]
   1eb38:	mov	r0, r3
   1eb3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb40:	mov	r2, #28
   1eb44:	mov	r3, #2
   1eb48:	strb	r2, [r0, #4]
   1eb4c:	b	1ea58 <__assert_fail@plt+0xd82c>
   1eb50:	tst	r2, #4
   1eb54:	beq	1eb0c <__assert_fail@plt+0xd8e0>
   1eb58:	mov	r2, #30
   1eb5c:	mov	r3, #2
   1eb60:	strb	r2, [r0, #4]
   1eb64:	b	1ea58 <__assert_fail@plt+0xd82c>
   1eb68:	ldrb	r3, [r1, #24]
   1eb6c:	cmp	r3, #17
   1eb70:	beq	1eb7c <__assert_fail@plt+0xd950>
   1eb74:	mov	r0, #0
   1eb78:	bx	lr
   1eb7c:	ldr	r3, [r1, #20]
   1eb80:	cmp	r0, r3
   1eb84:	bne	1eb74 <__assert_fail@plt+0xd948>
   1eb88:	ldrb	r3, [r1, #26]
   1eb8c:	mov	r0, #0
   1eb90:	orr	r3, r3, #8
   1eb94:	strb	r3, [r1, #26]
   1eb98:	bx	lr
   1eb9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1eba0:	strd	r6, [sp, #8]
   1eba4:	strd	r8, [sp, #16]
   1eba8:	ldr	r8, [r0, #84]	; 0x54
   1ebac:	strd	sl, [sp, #24]
   1ebb0:	mov	fp, r1
   1ebb4:	str	lr, [sp, #32]
   1ebb8:	sub	sp, sp, #44	; 0x2c
   1ebbc:	str	r3, [sp, #24]
   1ebc0:	add	r3, r3, r3, lsl #1
   1ebc4:	ldr	r9, [r8, #24]
   1ebc8:	add	r9, r9, r3, lsl #2
   1ebcc:	ldr	r1, [r9, #4]
   1ebd0:	cmp	r1, #0
   1ebd4:	ble	1ed80 <__assert_fail@plt+0xdb54>
   1ebd8:	ldr	r3, [sp, #80]	; 0x50
   1ebdc:	mov	r7, r2
   1ebe0:	mov	r2, #1
   1ebe4:	mov	sl, r0
   1ebe8:	mov	r4, #0
   1ebec:	add	r3, r3, r2
   1ebf0:	lsl	r2, r2, r7
   1ebf4:	add	r3, r3, r3, lsl #1
   1ebf8:	str	r2, [sp, #12]
   1ebfc:	str	r3, [sp, #28]
   1ec00:	mvn	r3, r2
   1ec04:	str	r3, [sp, #16]
   1ec08:	b	1ec20 <__assert_fail@plt+0xd9f4>
   1ec0c:	cmp	r3, #4
   1ec10:	beq	1ec94 <__assert_fail@plt+0xda68>
   1ec14:	add	r4, r4, #1
   1ec18:	cmp	r1, r4
   1ec1c:	ble	1ed80 <__assert_fail@plt+0xdb54>
   1ec20:	ldr	r3, [r9, #8]
   1ec24:	ldr	r2, [r8]
   1ec28:	ldr	r5, [r3, r4, lsl #2]
   1ec2c:	add	r3, r2, r5, lsl #3
   1ec30:	ldrb	r3, [r3, #4]
   1ec34:	cmp	r3, #8
   1ec38:	beq	1ec60 <__assert_fail@plt+0xda34>
   1ec3c:	cmp	r3, #9
   1ec40:	bne	1ec0c <__assert_fail@plt+0xd9e0>
   1ec44:	tst	fp, #2
   1ec48:	beq	1ec14 <__assert_fail@plt+0xd9e8>
   1ec4c:	ldr	r3, [r2, r5, lsl #3]
   1ec50:	cmp	r3, r7
   1ec54:	bne	1ec14 <__assert_fail@plt+0xd9e8>
   1ec58:	mov	r0, #0
   1ec5c:	b	1ec78 <__assert_fail@plt+0xda4c>
   1ec60:	tst	fp, #1
   1ec64:	beq	1ec14 <__assert_fail@plt+0xd9e8>
   1ec68:	ldr	r3, [r2, r5, lsl #3]
   1ec6c:	cmp	r3, r7
   1ec70:	bne	1ec14 <__assert_fail@plt+0xd9e8>
   1ec74:	mvn	r0, #0
   1ec78:	add	sp, sp, #44	; 0x2c
   1ec7c:	ldrd	r4, [sp]
   1ec80:	ldrd	r6, [sp, #8]
   1ec84:	ldrd	r8, [sp, #16]
   1ec88:	ldrd	sl, [sp, #24]
   1ec8c:	add	sp, sp, #32
   1ec90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec94:	ldr	r3, [sp, #80]	; 0x50
   1ec98:	cmn	r3, #1
   1ec9c:	beq	1ec14 <__assert_fail@plt+0xd9e8>
   1eca0:	and	r2, fp, #2
   1eca4:	ldr	r6, [sl, #116]	; 0x74
   1eca8:	add	r3, r5, r5, lsl #1
   1ecac:	str	r2, [sp, #20]
   1ecb0:	lsl	r3, r3, #2
   1ecb4:	ldr	r2, [sp, #28]
   1ecb8:	str	r9, [sp, #32]
   1ecbc:	mov	r9, r3
   1ecc0:	str	r4, [sp, #36]	; 0x24
   1ecc4:	ldr	r4, [sp, #24]
   1ecc8:	add	r6, r6, r2, lsl #3
   1eccc:	ldr	r3, [r6, #-24]	; 0xffffffe8
   1ecd0:	mov	r2, r7
   1ecd4:	mov	r1, fp
   1ecd8:	mov	r0, sl
   1ecdc:	cmp	r3, r5
   1ece0:	bne	1ed58 <__assert_fail@plt+0xdb2c>
   1ece4:	cmp	r7, #31
   1ece8:	bgt	1ecfc <__assert_fail@plt+0xdad0>
   1ecec:	ldr	r3, [r6, #-8]
   1ecf0:	ldr	ip, [sp, #12]
   1ecf4:	tst	ip, r3
   1ecf8:	beq	1ed58 <__assert_fail@plt+0xdb2c>
   1ecfc:	ldr	r3, [r8, #20]
   1ed00:	add	r3, r3, r9
   1ed04:	ldr	r3, [r3, #8]
   1ed08:	ldr	ip, [r3]
   1ed0c:	cmp	r4, ip
   1ed10:	mov	r3, ip
   1ed14:	beq	1ed88 <__assert_fail@plt+0xdb5c>
   1ed18:	ldr	ip, [sp, #80]	; 0x50
   1ed1c:	str	ip, [sp]
   1ed20:	bl	1eb9c <__assert_fail@plt+0xd970>
   1ed24:	cmn	r0, #1
   1ed28:	beq	1ec74 <__assert_fail@plt+0xda48>
   1ed2c:	cmp	r0, #0
   1ed30:	bne	1ed40 <__assert_fail@plt+0xdb14>
   1ed34:	ldr	r3, [sp, #20]
   1ed38:	cmp	r3, #0
   1ed3c:	bne	1ec58 <__assert_fail@plt+0xda2c>
   1ed40:	cmp	r7, #31
   1ed44:	bgt	1ed58 <__assert_fail@plt+0xdb2c>
   1ed48:	ldr	r3, [r6, #-8]
   1ed4c:	ldr	r2, [sp, #16]
   1ed50:	and	r3, r3, r2
   1ed54:	str	r3, [r6, #-8]
   1ed58:	add	r6, r6, #24
   1ed5c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   1ed60:	cmp	r3, #0
   1ed64:	bne	1eccc <__assert_fail@plt+0xdaa0>
   1ed68:	ldr	r9, [sp, #32]
   1ed6c:	ldr	r4, [sp, #36]	; 0x24
   1ed70:	ldr	r1, [r9, #4]
   1ed74:	add	r4, r4, #1
   1ed78:	cmp	r1, r4
   1ed7c:	bgt	1ec20 <__assert_fail@plt+0xd9f4>
   1ed80:	asr	r0, fp, #1
   1ed84:	b	1ec78 <__assert_fail@plt+0xda4c>
   1ed88:	sbfx	r0, fp, #0, #1
   1ed8c:	b	1ec78 <__assert_fail@plt+0xda4c>
   1ed90:	ldr	ip, [r0, #116]	; 0x74
   1ed94:	add	r1, r1, r1, lsl #1
   1ed98:	strd	r4, [sp, #-12]!
   1ed9c:	ldr	r5, [sp, #16]
   1eda0:	add	r1, ip, r1, lsl #3
   1eda4:	ldr	ip, [r1, #8]
   1eda8:	str	lr, [sp, #8]
   1edac:	ldr	lr, [sp, #12]
   1edb0:	cmp	ip, lr
   1edb4:	bgt	1ee18 <__assert_fail@plt+0xdbec>
   1edb8:	ldr	r4, [r1, #12]
   1edbc:	cmp	r4, lr
   1edc0:	blt	1ee08 <__assert_fail@plt+0xdbdc>
   1edc4:	sub	r1, ip, lr
   1edc8:	cmp	r4, lr
   1edcc:	clz	r1, r1
   1edd0:	lsr	r1, r1, #5
   1edd4:	beq	1edf0 <__assert_fail@plt+0xdbc4>
   1edd8:	cmp	ip, lr
   1eddc:	movne	r0, #0
   1ede0:	beq	1edf4 <__assert_fail@plt+0xdbc8>
   1ede4:	ldrd	r4, [sp]
   1ede8:	add	sp, sp, #8
   1edec:	pop	{pc}		; (ldr pc, [sp], #4)
   1edf0:	orr	r1, r1, #2
   1edf4:	str	r5, [sp, #12]
   1edf8:	ldrd	r4, [sp]
   1edfc:	ldr	lr, [sp, #8]
   1ee00:	add	sp, sp, #12
   1ee04:	b	1eb9c <__assert_fail@plt+0xd970>
   1ee08:	ldrd	r4, [sp]
   1ee0c:	add	sp, sp, #8
   1ee10:	mov	r0, #1
   1ee14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee18:	mvn	r0, #0
   1ee1c:	b	1ede4 <__assert_fail@plt+0xdbb8>
   1ee20:	ldr	r3, [r0, #80]	; 0x50
   1ee24:	strd	r4, [sp, #-16]!
   1ee28:	mov	r4, r0
   1ee2c:	mov	r5, r1
   1ee30:	str	r6, [sp, #8]
   1ee34:	str	lr, [sp, #12]
   1ee38:	cmp	r3, #1
   1ee3c:	ble	1ee84 <__assert_fail@plt+0xdc58>
   1ee40:	cmn	r1, #-1073741823	; 0xc0000001
   1ee44:	bhi	1eec4 <__assert_fail@plt+0xdc98>
   1ee48:	lsl	r6, r1, #2
   1ee4c:	ldr	r0, [r0, #8]
   1ee50:	mov	r1, r6
   1ee54:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1ee58:	subs	r3, r0, #0
   1ee5c:	beq	1eec4 <__assert_fail@plt+0xdc98>
   1ee60:	ldr	r0, [r4, #12]
   1ee64:	str	r3, [r4, #8]
   1ee68:	cmp	r0, #0
   1ee6c:	beq	1ee84 <__assert_fail@plt+0xdc58>
   1ee70:	mov	r1, r6
   1ee74:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1ee78:	cmp	r0, #0
   1ee7c:	beq	1eec4 <__assert_fail@plt+0xdc98>
   1ee80:	str	r0, [r4, #12]
   1ee84:	ldrb	r3, [r4, #75]	; 0x4b
   1ee88:	cmp	r3, #0
   1ee8c:	bne	1eea8 <__assert_fail@plt+0xdc7c>
   1ee90:	str	r5, [r4, #36]	; 0x24
   1ee94:	mov	r0, #0
   1ee98:	ldrd	r4, [sp]
   1ee9c:	ldr	r6, [sp, #8]
   1eea0:	add	sp, sp, #12
   1eea4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eea8:	mov	r1, r5
   1eeac:	ldr	r0, [r4, #4]
   1eeb0:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1eeb4:	cmp	r0, #0
   1eeb8:	beq	1eec4 <__assert_fail@plt+0xdc98>
   1eebc:	str	r0, [r4, #4]
   1eec0:	b	1ee90 <__assert_fail@plt+0xdc64>
   1eec4:	ldrd	r4, [sp]
   1eec8:	mov	r0, #12
   1eecc:	ldr	r6, [sp, #8]
   1eed0:	add	sp, sp, #12
   1eed4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eed8:	strd	r4, [sp, #-16]!
   1eedc:	mov	r5, r1
   1eee0:	mov	r4, r0
   1eee4:	ldr	r2, [r0]
   1eee8:	ldmib	r0, {r1, r3}
   1eeec:	str	r6, [sp, #8]
   1eef0:	str	lr, [sp, #12]
   1eef4:	cmp	r2, r1
   1eef8:	beq	1ef1c <__assert_fail@plt+0xdcf0>
   1eefc:	add	r2, r1, #1
   1ef00:	mov	r0, #1
   1ef04:	str	r2, [r4, #4]
   1ef08:	str	r5, [r3, r1, lsl #2]
   1ef0c:	ldrd	r4, [sp]
   1ef10:	ldr	r6, [sp, #8]
   1ef14:	add	sp, sp, #12
   1ef18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef1c:	add	r1, r1, #1
   1ef20:	mov	r0, r3
   1ef24:	lsl	r3, r1, #1
   1ef28:	lsl	r1, r1, #3
   1ef2c:	str	r3, [r4]
   1ef30:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1ef34:	subs	r3, r0, #0
   1ef38:	beq	1ef48 <__assert_fail@plt+0xdd1c>
   1ef3c:	str	r3, [r4, #8]
   1ef40:	ldr	r1, [r4, #4]
   1ef44:	b	1eefc <__assert_fail@plt+0xdcd0>
   1ef48:	mov	r0, r3
   1ef4c:	b	1ef0c <__assert_fail@plt+0xdce0>
   1ef50:	ldr	r3, [r1, #8]
   1ef54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ef58:	mov	r5, r1
   1ef5c:	mov	r4, #0
   1ef60:	strd	r6, [sp, #8]
   1ef64:	mov	r7, r1
   1ef68:	mov	r6, r2
   1ef6c:	str	r8, [sp, #16]
   1ef70:	mov	r8, r0
   1ef74:	str	lr, [sp, #20]
   1ef78:	lsl	r0, r3, #2
   1ef7c:	str	r2, [r5], #16
   1ef80:	str	r3, [r1, #16]
   1ef84:	str	r4, [r1, #20]
   1ef88:	bl	2d378 <__assert_fail@plt+0x1c14c>
   1ef8c:	cmp	r0, r4
   1ef90:	str	r0, [r7, #24]
   1ef94:	beq	1f03c <__assert_fail@plt+0xde10>
   1ef98:	ldr	r0, [r7, #8]
   1ef9c:	cmp	r0, #0
   1efa0:	bgt	1efb4 <__assert_fail@plt+0xdd88>
   1efa4:	b	1eff0 <__assert_fail@plt+0xddc4>
   1efa8:	add	r4, r4, #1
   1efac:	cmp	r0, r4
   1efb0:	ble	1eff0 <__assert_fail@plt+0xddc4>
   1efb4:	ldr	r2, [r7, #12]
   1efb8:	ldr	r3, [r8]
   1efbc:	ldr	r1, [r2, r4, lsl #2]
   1efc0:	add	r3, r3, r1, lsl #3
   1efc4:	ldrb	r3, [r3, #4]
   1efc8:	tst	r3, #8
   1efcc:	bne	1efa8 <__assert_fail@plt+0xdd7c>
   1efd0:	mov	r0, r5
   1efd4:	bl	1eed8 <__assert_fail@plt+0xdcac>
   1efd8:	cmp	r0, #0
   1efdc:	beq	1f03c <__assert_fail@plt+0xde10>
   1efe0:	ldr	r0, [r7, #8]
   1efe4:	add	r4, r4, #1
   1efe8:	cmp	r0, r4
   1efec:	bgt	1efb4 <__assert_fail@plt+0xdd88>
   1eff0:	ldr	r5, [r8, #32]
   1eff4:	ldr	r4, [r8, #68]	; 0x44
   1eff8:	and	r6, r6, r4
   1effc:	add	r6, r6, r6, lsl #1
   1f000:	lsl	r4, r6, #2
   1f004:	add	r6, r5, r4
   1f008:	ldr	r3, [r5, r4]
   1f00c:	ldrd	r0, [r6, #4]
   1f010:	add	r2, r3, #1
   1f014:	cmp	r0, r3
   1f018:	ble	1f044 <__assert_fail@plt+0xde18>
   1f01c:	mov	r0, #0
   1f020:	str	r2, [r5, r4]
   1f024:	str	r7, [r1, r3, lsl #2]
   1f028:	ldrd	r4, [sp]
   1f02c:	ldrd	r6, [sp, #8]
   1f030:	ldr	r8, [sp, #16]
   1f034:	add	sp, sp, #20
   1f038:	pop	{pc}		; (ldr pc, [sp], #4)
   1f03c:	mov	r0, #12
   1f040:	b	1f028 <__assert_fail@plt+0xddfc>
   1f044:	mov	r0, r1
   1f048:	lsl	r1, r2, #3
   1f04c:	lsl	r8, r2, #1
   1f050:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1f054:	subs	r1, r0, #0
   1f058:	beq	1f03c <__assert_fail@plt+0xde10>
   1f05c:	ldr	r3, [r5, r4]
   1f060:	str	r8, [r6, #4]
   1f064:	str	r1, [r6, #8]
   1f068:	add	r2, r3, #1
   1f06c:	b	1f01c <__assert_fail@plt+0xddf0>
   1f070:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f074:	mov	r5, r0
   1f078:	ldr	r4, [r0, #28]
   1f07c:	ldr	r3, [r0, #48]	; 0x30
   1f080:	strd	r6, [sp, #8]
   1f084:	ldr	r7, [r0, #36]	; 0x24
   1f088:	strd	r8, [sp, #16]
   1f08c:	str	lr, [sp, #24]
   1f090:	sub	sp, sp, #84	; 0x54
   1f094:	cmp	r7, r3
   1f098:	movge	r7, r3
   1f09c:	cmp	r7, r4
   1f0a0:	ble	1f134 <__assert_fail@plt+0xdf08>
   1f0a4:	add	r8, r0, #16
   1f0a8:	mvn	r6, #0
   1f0ac:	ldr	ip, [r5, #64]	; 0x40
   1f0b0:	sub	r2, r7, r4
   1f0b4:	ldrd	r0, [r8]
   1f0b8:	cmp	ip, #0
   1f0bc:	strd	r0, [sp, #8]
   1f0c0:	bne	1f190 <__assert_fail@plt+0xdf64>
   1f0c4:	ldr	r1, [r5]
   1f0c8:	ldr	r3, [r5, #24]
   1f0cc:	add	r3, r4, r3
   1f0d0:	add	r1, r1, r3
   1f0d4:	mov	r3, r8
   1f0d8:	add	r0, sp, #4
   1f0dc:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   1f0e0:	sub	r3, r0, #1
   1f0e4:	cmn	r3, #3
   1f0e8:	bhi	1f154 <__assert_fail@plt+0xdf28>
   1f0ec:	cmn	r0, #2
   1f0f0:	ldrne	r1, [sp, #4]
   1f0f4:	beq	1f1f4 <__assert_fail@plt+0xdfc8>
   1f0f8:	add	r0, r4, r0
   1f0fc:	add	ip, r4, #1
   1f100:	ldr	r2, [r5, #8]
   1f104:	cmp	ip, r0
   1f108:	add	r3, r2, r4, lsl #2
   1f10c:	str	r1, [r2, r4, lsl #2]
   1f110:	bge	1f188 <__assert_fail@plt+0xdf5c>
   1f114:	sub	r2, r2, #4
   1f118:	add	r2, r2, r0, lsl #2
   1f11c:	str	r6, [r3, #4]!
   1f120:	cmp	r2, r3
   1f124:	bne	1f11c <__assert_fail@plt+0xdef0>
   1f128:	mov	r4, r0
   1f12c:	cmp	r7, r4
   1f130:	bgt	1f0ac <__assert_fail@plt+0xde80>
   1f134:	str	r4, [r5, #28]
   1f138:	str	r4, [r5, #32]
   1f13c:	add	sp, sp, #84	; 0x54
   1f140:	ldrd	r4, [sp]
   1f144:	ldrd	r6, [sp, #8]
   1f148:	ldrd	r8, [sp, #16]
   1f14c:	add	sp, sp, #24
   1f150:	pop	{pc}		; (ldr pc, [sp], #4)
   1f154:	ldr	r3, [r5]
   1f158:	mov	r0, #1
   1f15c:	ldr	r1, [r5, #24]
   1f160:	ldr	r2, [r5, #64]	; 0x40
   1f164:	add	r3, r3, r4
   1f168:	ldrb	r1, [r3, r1]
   1f16c:	cmp	r2, #0
   1f170:	str	r1, [sp, #4]
   1f174:	ldrbne	r1, [r2, r1]
   1f178:	ldrd	r2, [sp, #8]
   1f17c:	strne	r1, [sp, #4]
   1f180:	strd	r2, [r8]
   1f184:	b	1f0f8 <__assert_fail@plt+0xdecc>
   1f188:	mov	r4, ip
   1f18c:	b	1f12c <__assert_fail@plt+0xdf00>
   1f190:	ldr	r3, [r5, #80]	; 0x50
   1f194:	cmp	r3, #0
   1f198:	cmpgt	r2, #0
   1f19c:	ble	1f1ec <__assert_fail@plt+0xdfc0>
   1f1a0:	add	r0, sp, #16
   1f1a4:	mov	r1, #0
   1f1a8:	b	1f1b0 <__assert_fail@plt+0xdf84>
   1f1ac:	ldr	ip, [r5, #64]	; 0x40
   1f1b0:	ldm	r5, {r3, lr}
   1f1b4:	ldr	r9, [r5, #24]
   1f1b8:	add	r3, r3, r4
   1f1bc:	add	r3, r3, r1
   1f1c0:	ldrb	r9, [r3, r9]
   1f1c4:	add	r3, lr, r4
   1f1c8:	ldrb	ip, [ip, r9]
   1f1cc:	strb	ip, [r3, r1]
   1f1d0:	add	r1, r1, #1
   1f1d4:	ldr	r3, [r5, #80]	; 0x50
   1f1d8:	strb	ip, [r0], #1
   1f1dc:	cmp	r2, r3
   1f1e0:	movlt	r3, r2
   1f1e4:	cmp	r3, r1
   1f1e8:	bgt	1f1ac <__assert_fail@plt+0xdf80>
   1f1ec:	add	r1, sp, #16
   1f1f0:	b	1f0d4 <__assert_fail@plt+0xdea8>
   1f1f4:	ldr	r2, [r5, #36]	; 0x24
   1f1f8:	ldr	r3, [r5, #48]	; 0x30
   1f1fc:	cmp	r2, r3
   1f200:	bge	1f154 <__assert_fail@plt+0xdf28>
   1f204:	ldrd	r2, [sp, #8]
   1f208:	strd	r2, [r5, #16]
   1f20c:	b	1f134 <__assert_fail@plt+0xdf08>
   1f210:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f214:	mov	r5, r0
   1f218:	ldr	r3, [r0, #48]	; 0x30
   1f21c:	strd	r6, [sp, #8]
   1f220:	strd	r8, [sp, #16]
   1f224:	ldr	r7, [r0, #36]	; 0x24
   1f228:	strd	sl, [sp, #24]
   1f22c:	str	lr, [sp, #32]
   1f230:	sub	sp, sp, #100	; 0x64
   1f234:	ldrb	r2, [r0, #74]	; 0x4a
   1f238:	cmp	r7, r3
   1f23c:	ldr	r6, [r0, #28]
   1f240:	movge	r7, r3
   1f244:	cmp	r2, #0
   1f248:	bne	1f258 <__assert_fail@plt+0xe02c>
   1f24c:	ldr	r3, [r0, #64]	; 0x40
   1f250:	cmp	r3, #0
   1f254:	beq	1f3a0 <__assert_fail@plt+0xe174>
   1f258:	ldr	r4, [r5, #32]
   1f25c:	cmp	r6, r7
   1f260:	bge	1f378 <__assert_fail@plt+0xe14c>
   1f264:	add	r3, r5, #16
   1f268:	str	r3, [sp, #12]
   1f26c:	sub	r3, r7, r6
   1f270:	str	r3, [sp, #8]
   1f274:	add	r3, sp, #20
   1f278:	mov	r9, r3
   1f27c:	ldrd	r0, [r5, #16]
   1f280:	ldr	r3, [r5, #64]	; 0x40
   1f284:	strd	r0, [sp, #24]
   1f288:	cmp	r3, #0
   1f28c:	bne	1f57c <__assert_fail@plt+0xe350>
   1f290:	ldr	r8, [r5]
   1f294:	ldr	r3, [r5, #24]
   1f298:	add	r3, r4, r3
   1f29c:	add	r8, r8, r3
   1f2a0:	mov	r0, r9
   1f2a4:	mov	r1, r8
   1f2a8:	ldrd	r2, [sp, #8]
   1f2ac:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   1f2b0:	sub	r3, r0, #1
   1f2b4:	mov	sl, r0
   1f2b8:	cmn	r3, #4
   1f2bc:	str	r3, [sp, #4]
   1f2c0:	bhi	1f5fc <__assert_fail@plt+0xe3d0>
   1f2c4:	ldr	r3, [sp, #20]
   1f2c8:	mov	r9, r6
   1f2cc:	mov	r0, r3
   1f2d0:	str	r3, [sp]
   1f2d4:	bl	11208 <towupper@plt>
   1f2d8:	ldr	r3, [sp]
   1f2dc:	mov	fp, r0
   1f2e0:	cmp	r3, r0
   1f2e4:	beq	1f5e4 <__assert_fail@plt+0xe3b8>
   1f2e8:	add	r3, sp, #32
   1f2ec:	add	r2, sp, #24
   1f2f0:	mov	r0, r3
   1f2f4:	mov	r1, fp
   1f2f8:	str	r3, [sp]
   1f2fc:	bl	10f50 <wcrtomb@plt>
   1f300:	cmp	sl, r0
   1f304:	mov	r3, r0
   1f308:	bne	1f690 <__assert_fail@plt+0xe464>
   1f30c:	ldr	r0, [r5, #4]
   1f310:	mov	r2, sl
   1f314:	ldr	r1, [sp]
   1f318:	add	r0, r0, r6
   1f31c:	bl	10fd4 <memcpy@plt>
   1f320:	ldrb	r3, [r5, #76]	; 0x4c
   1f324:	cmp	r3, #0
   1f328:	bne	1f670 <__assert_fail@plt+0xe444>
   1f32c:	add	r2, sl, r4
   1f330:	ldr	r3, [r5, #8]
   1f334:	add	sl, sl, r9
   1f338:	add	r6, r6, #1
   1f33c:	cmp	r6, sl
   1f340:	mov	r4, r2
   1f344:	mvnlt	r2, #0
   1f348:	str	fp, [r3, r9, lsl #2]
   1f34c:	add	r9, r3, r9, lsl #2
   1f350:	sublt	r3, r3, #4
   1f354:	addlt	r3, r3, sl, lsl #2
   1f358:	bge	1f25c <__assert_fail@plt+0xe030>
   1f35c:	str	r2, [r9, #4]!
   1f360:	cmp	r3, r9
   1f364:	bne	1f35c <__assert_fail@plt+0xe130>
   1f368:	mov	r6, sl
   1f36c:	b	1f25c <__assert_fail@plt+0xe030>
   1f370:	ldrd	r2, [sp, #24]
   1f374:	strd	r2, [r5, #16]
   1f378:	mov	r0, #0
   1f37c:	str	r6, [r5, #28]
   1f380:	str	r4, [r5, #32]
   1f384:	add	sp, sp, #100	; 0x64
   1f388:	ldrd	r4, [sp]
   1f38c:	ldrd	r6, [sp, #8]
   1f390:	ldrd	r8, [sp, #16]
   1f394:	ldrd	sl, [sp, #24]
   1f398:	add	sp, sp, #32
   1f39c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3a0:	ldrb	r3, [r0, #76]	; 0x4c
   1f3a4:	cmp	r3, #0
   1f3a8:	bne	1f258 <__assert_fail@plt+0xe02c>
   1f3ac:	cmp	r6, r7
   1f3b0:	bge	1f4d8 <__assert_fail@plt+0xe2ac>
   1f3b4:	add	fp, r0, #16
   1f3b8:	str	r7, [sp]
   1f3bc:	str	fp, [sp, #12]
   1f3c0:	ldr	r8, [r5]
   1f3c4:	mov	r4, r6
   1f3c8:	ldr	r7, [r5, #24]
   1f3cc:	add	r3, r8, r7
   1f3d0:	ldrb	sl, [r3, r6]
   1f3d4:	tst	sl, #128	; 0x80
   1f3d8:	bne	1f3fc <__assert_fail@plt+0xe1d0>
   1f3dc:	mov	r0, fp
   1f3e0:	bl	10ff8 <mbsinit@plt>
   1f3e4:	cmp	r0, #0
   1f3e8:	beq	1f3fc <__assert_fail@plt+0xe1d0>
   1f3ec:	mov	r0, sl
   1f3f0:	bl	11208 <towupper@plt>
   1f3f4:	bics	r3, r0, #127	; 0x7f
   1f3f8:	beq	1f50c <__assert_fail@plt+0xe2e0>
   1f3fc:	ldr	r3, [sp]
   1f400:	add	r1, r7, r6
   1f404:	add	r0, sp, #20
   1f408:	add	r1, r8, r1
   1f40c:	ldrd	r8, [fp]
   1f410:	sub	r3, r3, r6
   1f414:	mov	r2, r3
   1f418:	str	r3, [sp, #8]
   1f41c:	mov	r3, fp
   1f420:	strd	r8, [sp, #24]
   1f424:	mov	r9, r0
   1f428:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   1f42c:	sub	r3, r0, #1
   1f430:	mov	r8, r0
   1f434:	cmn	r3, #4
   1f438:	bhi	1f524 <__assert_fail@plt+0xe2f8>
   1f43c:	ldr	r3, [sp, #20]
   1f440:	mov	r0, r3
   1f444:	str	r3, [sp, #4]
   1f448:	bl	11208 <towupper@plt>
   1f44c:	ldr	r3, [sp, #4]
   1f450:	mov	sl, r0
   1f454:	cmp	r3, r0
   1f458:	beq	1f4e8 <__assert_fail@plt+0xe2bc>
   1f45c:	add	r3, sp, #32
   1f460:	add	r2, sp, #24
   1f464:	mov	r0, r3
   1f468:	mov	r1, sl
   1f46c:	str	r3, [sp, #4]
   1f470:	bl	10f50 <wcrtomb@plt>
   1f474:	cmp	r8, r0
   1f478:	bne	1f5d8 <__assert_fail@plt+0xe3ac>
   1f47c:	ldr	r0, [r5, #4]
   1f480:	mov	r2, r8
   1f484:	ldr	r3, [sp, #4]
   1f488:	add	r0, r0, r6
   1f48c:	mov	r1, r3
   1f490:	bl	10fd4 <memcpy@plt>
   1f494:	ldr	r3, [r5, #8]
   1f498:	add	r8, r8, r4
   1f49c:	add	r6, r6, #1
   1f4a0:	cmp	r6, r8
   1f4a4:	str	sl, [r3, r4, lsl #2]
   1f4a8:	add	r4, r3, r4, lsl #2
   1f4ac:	bge	1f4cc <__assert_fail@plt+0xe2a0>
   1f4b0:	sub	r3, r3, #4
   1f4b4:	add	r3, r3, r8, lsl #2
   1f4b8:	mvn	r2, #0
   1f4bc:	str	r2, [r4, #4]!
   1f4c0:	cmp	r4, r3
   1f4c4:	bne	1f4b8 <__assert_fail@plt+0xe28c>
   1f4c8:	mov	r6, r8
   1f4cc:	ldr	r3, [sp]
   1f4d0:	cmp	r3, r6
   1f4d4:	bgt	1f3c0 <__assert_fail@plt+0xe194>
   1f4d8:	mov	r0, #0
   1f4dc:	str	r6, [r5, #28]
   1f4e0:	str	r6, [r5, #32]
   1f4e4:	b	1f384 <__assert_fail@plt+0xe158>
   1f4e8:	ldr	r1, [r5]
   1f4ec:	mov	r2, r8
   1f4f0:	ldr	r3, [r5, #24]
   1f4f4:	ldr	r0, [r5, #4]
   1f4f8:	add	r3, r6, r3
   1f4fc:	add	r1, r1, r3
   1f500:	add	r0, r0, r6
   1f504:	bl	10fd4 <memcpy@plt>
   1f508:	b	1f494 <__assert_fail@plt+0xe268>
   1f50c:	ldr	r3, [r5, #4]
   1f510:	strb	r0, [r3, r6]
   1f514:	ldr	r3, [r5, #8]
   1f518:	str	r0, [r3, r6, lsl #2]
   1f51c:	add	r6, r6, #1
   1f520:	b	1f4cc <__assert_fail@plt+0xe2a0>
   1f524:	cmn	r3, #3
   1f528:	beq	1f554 <__assert_fail@plt+0xe328>
   1f52c:	ldr	r3, [r5, #4]
   1f530:	cmn	r0, #1
   1f534:	strb	sl, [r3, r6]
   1f538:	add	r6, r6, #1
   1f53c:	ldr	r3, [r5, #8]
   1f540:	str	sl, [r3, r4, lsl #2]
   1f544:	bne	1f4cc <__assert_fail@plt+0xe2a0>
   1f548:	ldrd	r2, [sp, #24]
   1f54c:	strd	r2, [fp]
   1f550:	b	1f4cc <__assert_fail@plt+0xe2a0>
   1f554:	ldr	r2, [r5, #36]	; 0x24
   1f558:	ldr	r3, [r5, #48]	; 0x30
   1f55c:	cmp	r2, r3
   1f560:	blt	1f794 <__assert_fail@plt+0xe568>
   1f564:	ldr	r3, [r5, #4]
   1f568:	strb	sl, [r3, r6]
   1f56c:	add	r6, r6, #1
   1f570:	ldr	r3, [r5, #8]
   1f574:	str	sl, [r3, r4, lsl #2]
   1f578:	b	1f4cc <__assert_fail@plt+0xe2a0>
   1f57c:	ldr	r2, [sp, #8]
   1f580:	ldr	r8, [r5, #80]	; 0x50
   1f584:	cmp	r2, #0
   1f588:	cmpgt	r8, #0
   1f58c:	ble	1f7c4 <__assert_fail@plt+0xe598>
   1f590:	ldr	lr, [r5]
   1f594:	add	r1, sp, #32
   1f598:	ldr	r2, [r5, #24]
   1f59c:	str	r1, [sp]
   1f5a0:	ldr	r0, [sp, #8]
   1f5a4:	add	r2, r4, r2
   1f5a8:	add	lr, lr, r2
   1f5ac:	cmp	r8, r0
   1f5b0:	mov	r2, lr
   1f5b4:	movge	r8, r0
   1f5b8:	ldrb	r0, [r2], #1
   1f5bc:	ldrb	r0, [r3, r0]
   1f5c0:	sub	ip, r2, lr
   1f5c4:	cmp	ip, r8
   1f5c8:	strb	r0, [r1], #1
   1f5cc:	blt	1f5b8 <__assert_fail@plt+0xe38c>
   1f5d0:	ldr	r8, [sp]
   1f5d4:	b	1f2a0 <__assert_fail@plt+0xe074>
   1f5d8:	mov	r4, r6
   1f5dc:	ldr	r7, [sp]
   1f5e0:	b	1f27c <__assert_fail@plt+0xe050>
   1f5e4:	ldr	r0, [r5, #4]
   1f5e8:	mov	r1, r8
   1f5ec:	mov	r2, sl
   1f5f0:	add	r0, r0, r6
   1f5f4:	bl	10fd4 <memcpy@plt>
   1f5f8:	b	1f320 <__assert_fail@plt+0xe0f4>
   1f5fc:	ldr	r3, [sp, #4]
   1f600:	cmn	r3, #3
   1f604:	bne	1f618 <__assert_fail@plt+0xe3ec>
   1f608:	ldr	r2, [r5, #36]	; 0x24
   1f60c:	ldr	r3, [r5, #48]	; 0x30
   1f610:	cmp	r2, r3
   1f614:	blt	1f370 <__assert_fail@plt+0xe144>
   1f618:	ldr	r3, [r5]
   1f61c:	ldr	r1, [r5, #24]
   1f620:	ldr	r2, [r5, #64]	; 0x40
   1f624:	add	r3, r3, r4
   1f628:	ldrb	r3, [r3, r1]
   1f62c:	cmp	r2, #0
   1f630:	ldr	r1, [r5, #4]
   1f634:	ldrbne	r3, [r2, r3]
   1f638:	lsl	r2, r6, #2
   1f63c:	strb	r3, [r1, r6]
   1f640:	ldrb	r1, [r5, #76]	; 0x4c
   1f644:	cmp	r1, #0
   1f648:	ldrne	r1, [r5, #12]
   1f64c:	strne	r4, [r1, r6, lsl #2]
   1f650:	cmn	sl, #1
   1f654:	add	r4, r4, #1
   1f658:	ldr	r1, [r5, #8]
   1f65c:	add	r6, r6, #1
   1f660:	str	r3, [r1, r2]
   1f664:	ldrdeq	r2, [sp, #24]
   1f668:	strdeq	r2, [r5, #16]
   1f66c:	b	1f25c <__assert_fail@plt+0xe030>
   1f670:	ldr	r3, [r5, #12]
   1f674:	add	r2, sl, r4
   1f678:	add	r3, r3, r6, lsl #2
   1f67c:	str	r4, [r3], #4
   1f680:	add	r4, r4, #1
   1f684:	cmp	r2, r4
   1f688:	bne	1f67c <__assert_fail@plt+0xe450>
   1f68c:	b	1f330 <__assert_fail@plt+0xe104>
   1f690:	cmn	r0, #1
   1f694:	beq	1f5e4 <__assert_fail@plt+0xe3b8>
   1f698:	add	r8, r0, r6
   1f69c:	ldr	r0, [r5, #36]	; 0x24
   1f6a0:	cmp	r8, r0
   1f6a4:	bhi	1f370 <__assert_fail@plt+0xe144>
   1f6a8:	ldr	r2, [r5, #12]
   1f6ac:	cmp	r2, #0
   1f6b0:	beq	1f7a0 <__assert_fail@plt+0xe574>
   1f6b4:	ldrb	r2, [r5, #76]	; 0x4c
   1f6b8:	cmp	r2, #0
   1f6bc:	bne	1f6e8 <__assert_fail@plt+0xe4bc>
   1f6c0:	cmp	r6, #0
   1f6c4:	ldrne	r1, [r5, #12]
   1f6c8:	subne	r1, r1, #4
   1f6cc:	beq	1f6e0 <__assert_fail@plt+0xe4b4>
   1f6d0:	str	r2, [r1, #4]!
   1f6d4:	add	r2, r2, #1
   1f6d8:	cmp	r2, r6
   1f6dc:	bne	1f6d0 <__assert_fail@plt+0xe4a4>
   1f6e0:	mov	r2, #1
   1f6e4:	strb	r2, [r5, #76]	; 0x4c
   1f6e8:	ldr	r0, [r5, #4]
   1f6ec:	mov	r2, r3
   1f6f0:	ldr	r1, [sp]
   1f6f4:	str	r3, [sp]
   1f6f8:	add	r0, r0, r6
   1f6fc:	bl	10fd4 <memcpy@plt>
   1f700:	ldr	r3, [sp]
   1f704:	lsl	r1, r6, #2
   1f708:	ldr	r2, [r5, #8]
   1f70c:	ldr	r0, [r5, #12]
   1f710:	cmp	r3, #1
   1f714:	mvnhi	lr, #0
   1f718:	str	fp, [r2, r6, lsl #2]
   1f71c:	add	r2, r2, r1
   1f720:	add	r1, r0, r1
   1f724:	str	r4, [r0, r6, lsl #2]
   1f728:	movhi	r0, #1
   1f72c:	bls	1f754 <__assert_fail@plt+0xe528>
   1f730:	ldr	ip, [sp, #4]
   1f734:	cmp	r0, sl
   1f738:	movcc	ip, r0
   1f73c:	add	r0, r0, #1
   1f740:	cmp	r0, r3
   1f744:	add	ip, ip, r4
   1f748:	str	ip, [r1, #4]!
   1f74c:	str	lr, [r2, #4]!
   1f750:	bne	1f730 <__assert_fail@plt+0xe504>
   1f754:	ldr	r7, [r5, #48]	; 0x30
   1f758:	sub	r3, r3, sl
   1f75c:	ldr	r2, [r5, #52]	; 0x34
   1f760:	add	r7, r3, r7
   1f764:	cmp	r2, r4
   1f768:	str	r7, [r5, #48]	; 0x30
   1f76c:	ble	1f77c <__assert_fail@plt+0xe550>
   1f770:	ldr	r2, [r5, #56]	; 0x38
   1f774:	add	r3, r2, r3
   1f778:	str	r3, [r5, #56]	; 0x38
   1f77c:	ldr	r3, [r5, #36]	; 0x24
   1f780:	mov	r6, r8
   1f784:	add	r4, sl, r4
   1f788:	cmp	r7, r3
   1f78c:	movge	r7, r3
   1f790:	b	1f25c <__assert_fail@plt+0xe030>
   1f794:	ldrd	r2, [sp, #24]
   1f798:	strd	r2, [fp]
   1f79c:	b	1f4d8 <__assert_fail@plt+0xe2ac>
   1f7a0:	lsl	r0, r0, #2
   1f7a4:	str	r3, [sp, #8]
   1f7a8:	bl	2d378 <__assert_fail@plt+0x1c14c>
   1f7ac:	cmp	r0, #0
   1f7b0:	str	r0, [r5, #12]
   1f7b4:	moveq	r0, #12
   1f7b8:	ldr	r3, [sp, #8]
   1f7bc:	bne	1f6b4 <__assert_fail@plt+0xe488>
   1f7c0:	b	1f384 <__assert_fail@plt+0xe158>
   1f7c4:	add	r3, sp, #32
   1f7c8:	str	r3, [sp]
   1f7cc:	b	1f5d0 <__assert_fail@plt+0xe3a4>
   1f7d0:	strd	r4, [sp, #-16]!
   1f7d4:	mov	r5, r0
   1f7d8:	ldr	r4, [r0, #28]
   1f7dc:	ldr	r3, [r0, #48]	; 0x30
   1f7e0:	str	r6, [sp, #8]
   1f7e4:	ldr	r6, [r0, #36]	; 0x24
   1f7e8:	str	lr, [sp, #12]
   1f7ec:	cmp	r6, r3
   1f7f0:	movge	r6, r3
   1f7f4:	cmp	r6, r4
   1f7f8:	ble	1f850 <__assert_fail@plt+0xe624>
   1f7fc:	bl	110e8 <__ctype_toupper_loc@plt>
   1f800:	ldr	r3, [r5]
   1f804:	ldr	r1, [r5, #24]
   1f808:	ldr	r2, [r5, #64]	; 0x40
   1f80c:	add	r3, r3, r4
   1f810:	ldrb	r3, [r3, r1]
   1f814:	cmp	r2, #0
   1f818:	ldr	r1, [r0]
   1f81c:	ldrbne	r3, [r2, r3]
   1f820:	ldr	r2, [r5, #4]
   1f824:	ldr	r3, [r1, r3, lsl #2]
   1f828:	strb	r3, [r2, r4]
   1f82c:	add	r4, r4, #1
   1f830:	cmp	r6, r4
   1f834:	bne	1f800 <__assert_fail@plt+0xe5d4>
   1f838:	str	r6, [r5, #28]
   1f83c:	str	r6, [r5, #32]
   1f840:	ldrd	r4, [sp]
   1f844:	ldr	r6, [sp, #8]
   1f848:	add	sp, sp, #12
   1f84c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f850:	mov	r6, r4
   1f854:	b	1f838 <__assert_fail@plt+0xe60c>
   1f858:	ldr	r3, [r0, #36]	; 0x24
   1f85c:	strd	r4, [sp, #-16]!
   1f860:	str	r6, [sp, #8]
   1f864:	str	lr, [sp, #12]
   1f868:	cmn	r3, #-536870910	; 0xe0000002
   1f86c:	bhi	1f990 <__assert_fail@plt+0xe764>
   1f870:	ldr	r2, [r0, #48]	; 0x30
   1f874:	lsl	r3, r3, #1
   1f878:	mov	r4, r0
   1f87c:	cmp	r3, r2
   1f880:	movge	r3, r2
   1f884:	cmp	r3, r1
   1f888:	movge	r1, r3
   1f88c:	bl	1ee20 <__assert_fail@plt+0xdbf4>
   1f890:	subs	r5, r0, #0
   1f894:	bne	1f8fc <__assert_fail@plt+0xe6d0>
   1f898:	ldr	r0, [r4, #100]	; 0x64
   1f89c:	cmp	r0, #0
   1f8a0:	beq	1f8c0 <__assert_fail@plt+0xe694>
   1f8a4:	ldr	r1, [r4, #36]	; 0x24
   1f8a8:	add	r1, r1, #1
   1f8ac:	lsl	r1, r1, #2
   1f8b0:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1f8b4:	cmp	r0, #0
   1f8b8:	beq	1f990 <__assert_fail@plt+0xe764>
   1f8bc:	str	r0, [r4, #100]	; 0x64
   1f8c0:	ldrb	r3, [r4, #72]	; 0x48
   1f8c4:	ldr	r2, [r4, #80]	; 0x50
   1f8c8:	cmp	r3, #0
   1f8cc:	beq	1f910 <__assert_fail@plt+0xe6e4>
   1f8d0:	cmp	r2, #1
   1f8d4:	mov	r0, r4
   1f8d8:	ble	1f988 <__assert_fail@plt+0xe75c>
   1f8dc:	ldrd	r4, [sp]
   1f8e0:	ldr	r6, [sp, #8]
   1f8e4:	ldr	lr, [sp, #12]
   1f8e8:	add	sp, sp, #16
   1f8ec:	b	1f210 <__assert_fail@plt+0xdfe4>
   1f8f0:	mov	lr, r3
   1f8f4:	str	lr, [r4, #28]
   1f8f8:	str	lr, [r4, #32]
   1f8fc:	mov	r0, r5
   1f900:	ldrd	r4, [sp]
   1f904:	ldr	r6, [sp, #8]
   1f908:	add	sp, sp, #12
   1f90c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f910:	cmp	r2, #1
   1f914:	bgt	1f97c <__assert_fail@plt+0xe750>
   1f918:	ldr	r1, [r4, #64]	; 0x40
   1f91c:	cmp	r1, #0
   1f920:	beq	1f8fc <__assert_fail@plt+0xe6d0>
   1f924:	ldr	r3, [r4, #28]
   1f928:	ldr	lr, [r4, #36]	; 0x24
   1f92c:	ldr	r2, [r4, #48]	; 0x30
   1f930:	cmp	lr, r2
   1f934:	movge	lr, r2
   1f938:	cmp	lr, r3
   1f93c:	bgt	1f948 <__assert_fail@plt+0xe71c>
   1f940:	b	1f8f0 <__assert_fail@plt+0xe6c4>
   1f944:	ldr	r1, [r4, #64]	; 0x40
   1f948:	ldr	r2, [r4]
   1f94c:	ldr	r0, [r4, #4]
   1f950:	ldr	ip, [r4, #24]
   1f954:	add	r2, r2, r3
   1f958:	ldrb	r2, [r2, ip]
   1f95c:	ldrb	r2, [r1, r2]
   1f960:	strb	r2, [r0, r3]
   1f964:	add	r3, r3, #1
   1f968:	cmp	lr, r3
   1f96c:	bne	1f944 <__assert_fail@plt+0xe718>
   1f970:	str	lr, [r4, #28]
   1f974:	str	lr, [r4, #32]
   1f978:	b	1f8fc <__assert_fail@plt+0xe6d0>
   1f97c:	mov	r0, r4
   1f980:	bl	1f070 <__assert_fail@plt+0xde44>
   1f984:	b	1f8fc <__assert_fail@plt+0xe6d0>
   1f988:	bl	1f7d0 <__assert_fail@plt+0xe5a4>
   1f98c:	b	1f8fc <__assert_fail@plt+0xe6d0>
   1f990:	mov	r5, #12
   1f994:	b	1f8fc <__assert_fail@plt+0xe6d0>
   1f998:	str	r4, [sp, #-8]!
   1f99c:	mov	r4, r0
   1f9a0:	ldr	r0, [r0]
   1f9a4:	str	lr, [sp, #4]
   1f9a8:	bl	13254 <__assert_fail@plt+0x2028>
   1f9ac:	ldr	r0, [r4, #4]
   1f9b0:	bl	13254 <__assert_fail@plt+0x2028>
   1f9b4:	ldr	r0, [r4, #8]
   1f9b8:	bl	13254 <__assert_fail@plt+0x2028>
   1f9bc:	ldr	r0, [r4, #12]
   1f9c0:	bl	13254 <__assert_fail@plt+0x2028>
   1f9c4:	mov	r0, r4
   1f9c8:	ldr	r4, [sp]
   1f9cc:	ldr	lr, [sp, #4]
   1f9d0:	add	sp, sp, #8
   1f9d4:	b	13254 <__assert_fail@plt+0x2028>
   1f9d8:	ldr	r2, [r0, #4]
   1f9dc:	mov	r3, #255	; 0xff
   1f9e0:	movt	r3, #4
   1f9e4:	and	r3, r3, r2
   1f9e8:	cmp	r3, #6
   1f9ec:	beq	1f9fc <__assert_fail@plt+0xe7d0>
   1f9f0:	cmp	r3, #3
   1f9f4:	beq	1fa04 <__assert_fail@plt+0xe7d8>
   1f9f8:	bx	lr
   1f9fc:	ldr	r0, [r0]
   1fa00:	b	1f998 <__assert_fail@plt+0xe76c>
   1fa04:	ldr	r0, [r0]
   1fa08:	b	13254 <__assert_fail@plt+0x2028>
   1fa0c:	add	r0, r1, #20
   1fa10:	str	r4, [sp, #-8]!
   1fa14:	str	lr, [sp, #4]
   1fa18:	bl	1f9d8 <__assert_fail@plt+0xe7ac>
   1fa1c:	ldr	r4, [sp]
   1fa20:	add	sp, sp, #4
   1fa24:	mov	r0, #0
   1fa28:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa2c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1fa30:	mov	r4, r0
   1fa34:	ldr	ip, [r0, #8]
   1fa38:	strd	r6, [sp, #8]
   1fa3c:	ldr	r6, [r0, #4]
   1fa40:	strd	r8, [sp, #16]
   1fa44:	str	sl, [sp, #24]
   1fa48:	str	lr, [sp, #28]
   1fa4c:	sub	sp, sp, #8
   1fa50:	add	r3, sp, #8
   1fa54:	cmp	ip, r6
   1fa58:	stmdb	r3, {r1, r2}
   1fa5c:	ldrb	r5, [sp, #4]
   1fa60:	bcs	1fb30 <__assert_fail@plt+0xe904>
   1fa64:	ldr	r7, [r0, #12]
   1fa68:	ldr	r6, [r0, #20]
   1fa6c:	lsl	r0, ip, #3
   1fa70:	cmp	r5, #5
   1fa74:	ldr	lr, [r4]
   1fa78:	ldrd	r2, [sp]
   1fa7c:	add	r1, lr, r0
   1fa80:	strd	r2, [lr, r0]
   1fa84:	ldr	r3, [r1, #4]
   1fa88:	bfc	r3, #8, #10
   1fa8c:	str	r3, [r1, #4]
   1fa90:	beq	1fb1c <__assert_fail@plt+0xe8f0>
   1fa94:	sub	r5, r5, #6
   1fa98:	clz	r5, r5
   1fa9c:	lsr	r5, r5, #5
   1faa0:	ldrb	r3, [r1, #6]
   1faa4:	mvn	r0, #0
   1faa8:	mov	r2, #0
   1faac:	bfi	r3, r5, #4, #1
   1fab0:	strb	r3, [r1, #6]
   1fab4:	str	r0, [r7, ip, lsl #2]
   1fab8:	ldr	r3, [r4, #8]
   1fabc:	add	r3, r3, r3, lsl #1
   1fac0:	lsl	r3, r3, #2
   1fac4:	add	r1, r6, r3
   1fac8:	str	r2, [r6, r3]
   1facc:	str	r2, [r1, #4]
   1fad0:	str	r2, [r1, #8]
   1fad4:	ldr	r3, [r4, #8]
   1fad8:	ldr	r0, [r4, #24]
   1fadc:	add	r3, r3, r3, lsl #1
   1fae0:	lsl	r3, r3, #2
   1fae4:	add	r1, r0, r3
   1fae8:	str	r2, [r0, r3]
   1faec:	str	r2, [r1, #4]
   1faf0:	str	r2, [r1, #8]
   1faf4:	ldr	r0, [r4, #8]
   1faf8:	add	r3, r0, #1
   1fafc:	str	r3, [r4, #8]
   1fb00:	add	sp, sp, #8
   1fb04:	ldrd	r4, [sp]
   1fb08:	ldrd	r6, [sp, #8]
   1fb0c:	ldrd	r8, [sp, #16]
   1fb10:	ldr	sl, [sp, #24]
   1fb14:	add	sp, sp, #28
   1fb18:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb1c:	ldr	r5, [r4, #92]	; 0x5c
   1fb20:	cmp	r5, #1
   1fb24:	movle	r5, #0
   1fb28:	movgt	r5, #1
   1fb2c:	b	1faa0 <__assert_fail@plt+0xe874>
   1fb30:	lsl	r9, r6, #1
   1fb34:	movw	r3, #21845	; 0x5555
   1fb38:	movt	r3, #5461	; 0x1555
   1fb3c:	cmp	r9, r3
   1fb40:	bhi	1fbfc <__assert_fail@plt+0xe9d0>
   1fb44:	lsl	r1, r6, #4
   1fb48:	ldr	r0, [r0]
   1fb4c:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1fb50:	cmp	r0, #0
   1fb54:	beq	1fbfc <__assert_fail@plt+0xe9d0>
   1fb58:	lsl	r8, r6, #3
   1fb5c:	str	r0, [r4]
   1fb60:	add	r6, r9, r6
   1fb64:	ldr	r0, [r4, #12]
   1fb68:	mov	r1, r8
   1fb6c:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1fb70:	mov	r7, r0
   1fb74:	mov	r1, r8
   1fb78:	lsl	r8, r6, #3
   1fb7c:	ldr	r0, [r4, #16]
   1fb80:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1fb84:	mov	sl, r0
   1fb88:	mov	r1, r8
   1fb8c:	ldr	r0, [r4, #20]
   1fb90:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1fb94:	mov	r6, r0
   1fb98:	mov	r1, r8
   1fb9c:	ldr	r0, [r4, #24]
   1fba0:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   1fba4:	cmp	sl, #0
   1fba8:	cmpne	r7, #0
   1fbac:	mov	r8, r0
   1fbb0:	beq	1fbdc <__assert_fail@plt+0xe9b0>
   1fbb4:	cmp	r0, #0
   1fbb8:	cmpne	r6, #0
   1fbbc:	beq	1fbdc <__assert_fail@plt+0xe9b0>
   1fbc0:	str	r9, [r4, #4]
   1fbc4:	str	r7, [r4, #12]
   1fbc8:	str	sl, [r4, #16]
   1fbcc:	str	r6, [r4, #20]
   1fbd0:	str	r0, [r4, #24]
   1fbd4:	ldr	ip, [r4, #8]
   1fbd8:	b	1fa6c <__assert_fail@plt+0xe840>
   1fbdc:	mov	r0, r7
   1fbe0:	bl	13254 <__assert_fail@plt+0x2028>
   1fbe4:	mov	r0, sl
   1fbe8:	bl	13254 <__assert_fail@plt+0x2028>
   1fbec:	mov	r0, r6
   1fbf0:	bl	13254 <__assert_fail@plt+0x2028>
   1fbf4:	mov	r0, r8
   1fbf8:	bl	13254 <__assert_fail@plt+0x2028>
   1fbfc:	mvn	r0, #0
   1fc00:	b	1fb00 <__assert_fail@plt+0xe8d4>
   1fc04:	ldr	r3, [r0]
   1fc08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fc0c:	mov	r4, r2
   1fc10:	mov	r5, r0
   1fc14:	strd	r6, [sp, #8]
   1fc18:	lsl	r7, r1, #3
   1fc1c:	mov	r6, r1
   1fc20:	str	r8, [sp, #16]
   1fc24:	str	lr, [sp, #20]
   1fc28:	add	r3, r3, r7
   1fc2c:	ldm	r3, {r1, r2}
   1fc30:	bl	1fa2c <__assert_fail@plt+0xe800>
   1fc34:	cmn	r0, #1
   1fc38:	beq	1fc84 <__assert_fail@plt+0xea58>
   1fc3c:	ldr	r1, [r5]
   1fc40:	ubfx	r2, r4, #0, #10
   1fc44:	add	r3, r1, r0, lsl #3
   1fc48:	add	r7, r1, r7
   1fc4c:	ldr	ip, [r3, #4]
   1fc50:	bfi	ip, r2, #8, #10
   1fc54:	mov	r1, ip
   1fc58:	str	ip, [r3, #4]
   1fc5c:	ldr	ip, [r7, #4]
   1fc60:	ubfx	ip, ip, #8, #10
   1fc64:	orr	r2, r2, ip
   1fc68:	bfi	r1, r2, #8, #10
   1fc6c:	ubfx	r2, r1, #16, #8
   1fc70:	str	r1, [r3, #4]
   1fc74:	orr	r2, r2, #4
   1fc78:	strb	r2, [r3, #6]
   1fc7c:	ldr	r3, [r5, #16]
   1fc80:	str	r6, [r3, r0, lsl #2]
   1fc84:	ldrd	r4, [sp]
   1fc88:	ldrd	r6, [sp, #8]
   1fc8c:	ldr	r8, [sp, #16]
   1fc90:	add	sp, sp, #20
   1fc94:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc98:	str	r4, [sp, #-8]!
   1fc9c:	mov	r4, r0
   1fca0:	ldr	r0, [r0, #24]
   1fca4:	str	lr, [sp, #4]
   1fca8:	bl	13254 <__assert_fail@plt+0x2028>
   1fcac:	ldr	r0, [r4, #36]	; 0x24
   1fcb0:	bl	13254 <__assert_fail@plt+0x2028>
   1fcb4:	ldr	r3, [r4, #40]	; 0x28
   1fcb8:	add	r2, r4, #4
   1fcbc:	cmp	r3, r2
   1fcc0:	beq	1fcd4 <__assert_fail@plt+0xeaa8>
   1fcc4:	ldr	r0, [r3, #8]
   1fcc8:	bl	13254 <__assert_fail@plt+0x2028>
   1fccc:	ldr	r0, [r4, #40]	; 0x28
   1fcd0:	bl	13254 <__assert_fail@plt+0x2028>
   1fcd4:	ldr	r0, [r4, #12]
   1fcd8:	bl	13254 <__assert_fail@plt+0x2028>
   1fcdc:	ldr	r0, [r4, #48]	; 0x30
   1fce0:	bl	13254 <__assert_fail@plt+0x2028>
   1fce4:	ldr	r0, [r4, #44]	; 0x2c
   1fce8:	bl	13254 <__assert_fail@plt+0x2028>
   1fcec:	mov	r0, r4
   1fcf0:	ldr	r4, [sp]
   1fcf4:	ldr	lr, [sp, #4]
   1fcf8:	add	sp, sp, #8
   1fcfc:	b	13254 <__assert_fail@plt+0x2028>
   1fd00:	str	r4, [sp, #-8]!
   1fd04:	mov	r4, r0
   1fd08:	ldr	r0, [r0, #8]
   1fd0c:	str	lr, [sp, #4]
   1fd10:	bl	13254 <__assert_fail@plt+0x2028>
   1fd14:	ldr	r0, [r4, #12]
   1fd18:	bl	13254 <__assert_fail@plt+0x2028>
   1fd1c:	ldrb	r3, [r4, #75]	; 0x4b
   1fd20:	cmp	r3, #0
   1fd24:	bne	1fd34 <__assert_fail@plt+0xeb08>
   1fd28:	ldr	r4, [sp]
   1fd2c:	add	sp, sp, #4
   1fd30:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd34:	ldr	r0, [r4, #4]
   1fd38:	ldr	r4, [sp]
   1fd3c:	ldr	lr, [sp, #4]
   1fd40:	add	sp, sp, #8
   1fd44:	b	13254 <__assert_fail@plt+0x2028>
   1fd48:	ldr	r3, [r0, #124]	; 0x7c
   1fd4c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fd50:	strd	r6, [sp, #8]
   1fd54:	str	r8, [sp, #16]
   1fd58:	mov	r8, r0
   1fd5c:	str	lr, [sp, #20]
   1fd60:	cmp	r3, #0
   1fd64:	ble	1fde8 <__assert_fail@plt+0xebbc>
   1fd68:	mov	r7, #0
   1fd6c:	ldr	r3, [r8, #132]	; 0x84
   1fd70:	ldr	r6, [r3, r7, lsl #2]
   1fd74:	ldr	r3, [r6, #16]
   1fd78:	cmp	r3, #0
   1fd7c:	ble	1fdac <__assert_fail@plt+0xeb80>
   1fd80:	mov	r4, #0
   1fd84:	ldr	r3, [r6, #20]
   1fd88:	ldr	r5, [r3, r4, lsl #2]
   1fd8c:	add	r4, r4, #1
   1fd90:	ldr	r0, [r5, #16]
   1fd94:	bl	13254 <__assert_fail@plt+0x2028>
   1fd98:	mov	r0, r5
   1fd9c:	bl	13254 <__assert_fail@plt+0x2028>
   1fda0:	ldr	r3, [r6, #16]
   1fda4:	cmp	r3, r4
   1fda8:	bgt	1fd84 <__assert_fail@plt+0xeb58>
   1fdac:	ldr	r0, [r6, #20]
   1fdb0:	bl	13254 <__assert_fail@plt+0x2028>
   1fdb4:	ldr	r3, [r6, #8]
   1fdb8:	cmp	r3, #0
   1fdbc:	beq	1fdd0 <__assert_fail@plt+0xeba4>
   1fdc0:	ldr	r0, [r3, #8]
   1fdc4:	bl	13254 <__assert_fail@plt+0x2028>
   1fdc8:	ldr	r0, [r6, #8]
   1fdcc:	bl	13254 <__assert_fail@plt+0x2028>
   1fdd0:	mov	r0, r6
   1fdd4:	add	r7, r7, #1
   1fdd8:	bl	13254 <__assert_fail@plt+0x2028>
   1fddc:	ldr	r3, [r8, #124]	; 0x7c
   1fde0:	cmp	r3, r7
   1fde4:	bgt	1fd6c <__assert_fail@plt+0xeb40>
   1fde8:	mov	r3, #0
   1fdec:	ldrd	r4, [sp]
   1fdf0:	ldrd	r6, [sp, #8]
   1fdf4:	str	r3, [r8, #108]	; 0x6c
   1fdf8:	str	r3, [r8, #124]	; 0x7c
   1fdfc:	ldr	r8, [sp, #16]
   1fe00:	add	sp, sp, #20
   1fe04:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe08:	ldrb	r3, [r1, #24]
   1fe0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fe10:	ldr	r2, [r1, #28]
   1fe14:	strd	r6, [sp, #8]
   1fe18:	str	r8, [sp, #16]
   1fe1c:	sub	r3, r3, #2
   1fe20:	str	lr, [sp, #20]
   1fe24:	cmp	r3, #14
   1fe28:	ldrls	pc, [pc, r3, lsl #2]
   1fe2c:	b	1ff74 <__assert_fail@plt+0xed48>
   1fe30:	andeq	pc, r1, r8, lsl #29
   1fe34:	andeq	pc, r1, r4, ror pc	; <UNPREDICTABLE>
   1fe38:	andeq	pc, r1, ip, ror #28
   1fe3c:	andeq	pc, r1, r4, ror pc	; <UNPREDICTABLE>
   1fe40:	andeq	pc, r1, r4, ror pc	; <UNPREDICTABLE>
   1fe44:	andeq	pc, r1, r4, ror pc	; <UNPREDICTABLE>
   1fe48:	andeq	pc, r1, r4, lsr #30
   1fe4c:	andeq	pc, r1, r4, lsr #30
   1fe50:	andeq	pc, r1, r4, lsr #29
   1fe54:	andeq	pc, r1, r4, lsr #29
   1fe58:	andeq	pc, r1, r4, lsr #30
   1fe5c:	andeq	pc, r1, r4, ror pc	; <UNPREDICTABLE>
   1fe60:	andeq	pc, r1, r4, ror pc	; <UNPREDICTABLE>
   1fe64:	andeq	pc, r1, r4, ror pc	; <UNPREDICTABLE>
   1fe68:	andeq	pc, r1, r8, lsl #29
   1fe6c:	ldr	ip, [r1, #16]
   1fe70:	ldr	r3, [r0, #12]
   1fe74:	ldr	r4, [ip, #28]
   1fe78:	str	r4, [r3, r2, lsl #2]
   1fe7c:	ldrb	r3, [r1, #24]
   1fe80:	cmp	r3, #4
   1fe84:	beq	1ffa0 <__assert_fail@plt+0xed74>
   1fe88:	mov	r3, #0
   1fe8c:	ldrd	r4, [sp]
   1fe90:	mov	r0, r3
   1fe94:	ldrd	r6, [sp, #8]
   1fe98:	ldr	r8, [sp, #16]
   1fe9c:	add	sp, sp, #20
   1fea0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fea4:	ldrb	r3, [r0, #88]	; 0x58
   1fea8:	add	r2, r2, r2, lsl #1
   1feac:	mov	r6, #2
   1feb0:	lsl	r2, r2, r6
   1feb4:	orr	r3, r3, #1
   1feb8:	strb	r3, [r0, #88]	; 0x58
   1febc:	ldr	r3, [r1, #4]
   1fec0:	cmp	r3, #0
   1fec4:	ldrne	r3, [r3, #12]
   1fec8:	ldreq	r3, [r1, #16]
   1fecc:	ldr	r5, [r3, #28]
   1fed0:	ldr	r3, [r1, #8]
   1fed4:	cmp	r3, #0
   1fed8:	ldrne	r3, [r3, #12]
   1fedc:	ldreq	r3, [r1, #16]
   1fee0:	ldr	r7, [r3, #28]
   1fee4:	ldr	r3, [r0, #20]
   1fee8:	mov	r0, #8
   1feec:	str	r6, [r3, r2]
   1fef0:	add	r4, r3, r2
   1fef4:	bl	2d378 <__assert_fail@plt+0x1c14c>
   1fef8:	cmp	r0, #0
   1fefc:	str	r0, [r4, #8]
   1ff00:	beq	1ffe8 <__assert_fail@plt+0xedbc>
   1ff04:	cmp	r5, r7
   1ff08:	beq	1ff8c <__assert_fail@plt+0xed60>
   1ff0c:	mov	r3, #0
   1ff10:	str	r6, [r4, #4]
   1ff14:	stmlt	r0, {r5, r7}
   1ff18:	strge	r7, [r0]
   1ff1c:	strge	r5, [r0, #4]
   1ff20:	b	1fe8c <__assert_fail@plt+0xec60>
   1ff24:	ldr	r5, [r0, #20]
   1ff28:	add	r2, r2, r2, lsl #1
   1ff2c:	mov	r3, #1
   1ff30:	mov	r0, #4
   1ff34:	ldr	r1, [r1, #16]
   1ff38:	lsl	r4, r2, #2
   1ff3c:	add	r6, r5, r4
   1ff40:	ldr	r7, [r1, #28]
   1ff44:	str	r3, [r5, r4]
   1ff48:	str	r3, [r6, #4]
   1ff4c:	bl	2d378 <__assert_fail@plt+0x1c14c>
   1ff50:	cmp	r0, #0
   1ff54:	str	r0, [r6, #8]
   1ff58:	moveq	r3, #12
   1ff5c:	streq	r0, [r6, #4]
   1ff60:	streq	r0, [r5, r4]
   1ff64:	beq	1fe8c <__assert_fail@plt+0xec60>
   1ff68:	mov	r3, #0
   1ff6c:	str	r7, [r0]
   1ff70:	b	1fe8c <__assert_fail@plt+0xec60>
   1ff74:	ldr	ip, [r1, #16]
   1ff78:	mov	r3, #0
   1ff7c:	ldr	r1, [r0, #12]
   1ff80:	ldr	r0, [ip, #28]
   1ff84:	str	r0, [r1, r2, lsl #2]
   1ff88:	b	1fe8c <__assert_fail@plt+0xec60>
   1ff8c:	mov	r2, #1
   1ff90:	mov	r3, #0
   1ff94:	str	r2, [r4, #4]
   1ff98:	str	r5, [r0]
   1ff9c:	b	1fe8c <__assert_fail@plt+0xec60>
   1ffa0:	ldr	r6, [r0, #20]
   1ffa4:	add	r2, r2, r2, lsl #1
   1ffa8:	mov	r1, #1
   1ffac:	mov	r0, r3
   1ffb0:	lsl	r5, r2, #2
   1ffb4:	add	r7, r6, r5
   1ffb8:	str	r1, [r6, r5]
   1ffbc:	str	r1, [r7, #4]
   1ffc0:	bl	2d378 <__assert_fail@plt+0x1c14c>
   1ffc4:	cmp	r0, #0
   1ffc8:	str	r0, [r7, #8]
   1ffcc:	moveq	r3, #12
   1ffd0:	streq	r0, [r7, #4]
   1ffd4:	streq	r0, [r6, r5]
   1ffd8:	beq	1fe8c <__assert_fail@plt+0xec60>
   1ffdc:	mov	r3, #0
   1ffe0:	str	r4, [r0]
   1ffe4:	b	1fe8c <__assert_fail@plt+0xec60>
   1ffe8:	mov	r3, #12
   1ffec:	b	1fe8c <__assert_fail@plt+0xec60>
   1fff0:	ldr	r3, [r0]
   1fff4:	strd	r4, [sp, #-16]!
   1fff8:	mov	r4, r0
   1fffc:	str	r6, [sp, #8]
   20000:	mov	r6, r1
   20004:	str	lr, [sp, #12]
   20008:	cmp	r3, #0
   2000c:	beq	20044 <__assert_fail@plt+0xee18>
   20010:	ldr	r1, [r0, #4]
   20014:	ldr	r0, [r0, #8]
   20018:	cmp	r1, #0
   2001c:	bne	20088 <__assert_fail@plt+0xee5c>
   20020:	str	r6, [r0]
   20024:	mov	r0, #1
   20028:	ldr	r3, [r4, #4]
   2002c:	add	r3, r3, r0
   20030:	str	r3, [r4, #4]
   20034:	ldrd	r4, [sp]
   20038:	ldr	r6, [sp, #8]
   2003c:	add	sp, sp, #12
   20040:	pop	{pc}		; (ldr pc, [sp], #4)
   20044:	mov	r5, #1
   20048:	mov	r0, #4
   2004c:	str	r5, [r4]
   20050:	str	r5, [r4, #4]
   20054:	bl	2d378 <__assert_fail@plt+0x1c14c>
   20058:	mov	r3, r0
   2005c:	cmp	r0, #0
   20060:	str	r0, [r4, #8]
   20064:	streq	r3, [r4]
   20068:	streq	r3, [r4, #4]
   2006c:	beq	20034 <__assert_fail@plt+0xee08>
   20070:	mov	r0, r5
   20074:	str	r6, [r3]
   20078:	ldrd	r4, [sp]
   2007c:	ldr	r6, [sp, #8]
   20080:	add	sp, sp, #12
   20084:	pop	{pc}		; (ldr pc, [sp], #4)
   20088:	cmp	r3, r1
   2008c:	beq	20110 <__assert_fail@plt+0xeee4>
   20090:	ldr	r2, [r0]
   20094:	mov	r3, r1
   20098:	cmp	r2, r6
   2009c:	ble	200c4 <__assert_fail@plt+0xee98>
   200a0:	cmp	r1, #0
   200a4:	ble	200f8 <__assert_fail@plt+0xeecc>
   200a8:	add	r1, r0, r1, lsl #2
   200ac:	ldr	r3, [r1, #-4]
   200b0:	str	r3, [r1], #-4
   200b4:	cmp	r1, r0
   200b8:	bne	200ac <__assert_fail@plt+0xee80>
   200bc:	mov	r3, #0
   200c0:	b	200f8 <__assert_fail@plt+0xeecc>
   200c4:	sub	r3, r1, #-1073741823	; 0xc0000001
   200c8:	ldr	r2, [r0, r3, lsl #2]
   200cc:	lsl	r3, r3, #2
   200d0:	cmp	r6, r2
   200d4:	bge	200f4 <__assert_fail@plt+0xeec8>
   200d8:	add	r3, r3, #4
   200dc:	add	r3, r0, r3
   200e0:	str	r2, [r3], #-4
   200e4:	sub	r1, r1, #1
   200e8:	ldr	r2, [r3, #-4]
   200ec:	cmp	r2, r6
   200f0:	bgt	200e0 <__assert_fail@plt+0xeeb4>
   200f4:	mov	r3, r1
   200f8:	str	r6, [r0, r3, lsl #2]
   200fc:	mov	r0, #1
   20100:	ldr	r3, [r4, #4]
   20104:	add	r3, r3, r0
   20108:	str	r3, [r4, #4]
   2010c:	b	20034 <__assert_fail@plt+0xee08>
   20110:	lsl	r3, r1, #1
   20114:	lsl	r1, r1, #3
   20118:	str	r3, [r4]
   2011c:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   20120:	cmp	r0, #0
   20124:	beq	20034 <__assert_fail@plt+0xee08>
   20128:	str	r0, [r4, #8]
   2012c:	ldr	r1, [r4, #4]
   20130:	b	20090 <__assert_fail@plt+0xee64>
   20134:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20138:	mov	r4, r0
   2013c:	mov	r5, r2
   20140:	strd	r6, [sp, #8]
   20144:	mov	r7, r1
   20148:	strd	r8, [sp, #16]
   2014c:	strd	sl, [sp, #24]
   20150:	mov	sl, #0
   20154:	str	lr, [sp, #32]
   20158:	sub	sp, sp, #20
   2015c:	ldr	r9, [sp, #56]	; 0x38
   20160:	str	r3, [sp, #12]
   20164:	ldr	r2, [r4]
   20168:	mov	r6, r5
   2016c:	ldr	r1, [r4, #20]
   20170:	add	ip, r2, r7, lsl #3
   20174:	ldrb	r3, [ip, #4]
   20178:	cmp	r3, #4
   2017c:	beq	2030c <__assert_fail@plt+0xf0e0>
   20180:	add	r8, r7, r7, lsl #1
   20184:	lsl	r8, r8, #2
   20188:	add	r3, r1, r8
   2018c:	ldr	r0, [r3, #4]
   20190:	cmp	r0, #0
   20194:	beq	203c4 <__assert_fail@plt+0xf198>
   20198:	ldr	r3, [r3, #8]
   2019c:	add	r6, r5, r5, lsl #1
   201a0:	cmp	r0, #1
   201a4:	lsl	r6, r6, #2
   201a8:	add	r0, r1, r6
   201ac:	ldr	fp, [r3]
   201b0:	beq	202a0 <__assert_fail@plt+0xf074>
   201b4:	ldr	r5, [r4, #8]
   201b8:	sub	r1, r5, #1
   201bc:	add	ip, r2, r1, lsl #3
   201c0:	cmp	r1, #0
   201c4:	movle	lr, #0
   201c8:	movgt	lr, #1
   201cc:	ldrb	r7, [ip, #6]
   201d0:	str	sl, [r0, #4]
   201d4:	ands	r3, lr, r7, lsr #2
   201d8:	beq	2036c <__assert_fail@plt+0xf140>
   201dc:	ldr	lr, [r4, #16]
   201e0:	add	r2, r2, r5, lsl #3
   201e4:	sub	r2, r2, ip
   201e8:	sub	r2, r2, #16
   201ec:	add	lr, lr, r5, lsl #2
   201f0:	b	20214 <__assert_fail@plt+0xefe8>
   201f4:	add	ip, ip, r2
   201f8:	sub	r1, r1, #1
   201fc:	ldrb	r7, [ip, #6]
   20200:	cmp	r1, #0
   20204:	movle	r5, #0
   20208:	movgt	r5, #1
   2020c:	ands	r3, r5, r7, lsr #2
   20210:	beq	2036c <__assert_fail@plt+0xf140>
   20214:	ldr	r5, [lr, #-4]!
   20218:	cmp	r5, fp
   2021c:	bne	201f4 <__assert_fail@plt+0xefc8>
   20220:	ldr	r7, [ip, #4]
   20224:	ubfx	r7, r7, #8, #10
   20228:	cmp	r9, r7
   2022c:	bne	201f4 <__assert_fail@plt+0xefc8>
   20230:	bl	1fff0 <__assert_fail@plt+0xedc4>
   20234:	cmp	r0, #0
   20238:	beq	20280 <__assert_fail@plt+0xf054>
   2023c:	ldr	r3, [r4, #20]
   20240:	mov	r2, r9
   20244:	mov	r0, r4
   20248:	add	r8, r3, r8
   2024c:	ldr	r3, [r8, #8]
   20250:	ldr	r7, [r3, #4]
   20254:	mov	r1, r7
   20258:	bl	1fc04 <__assert_fail@plt+0xe9d8>
   2025c:	cmn	r0, #1
   20260:	mov	r5, r0
   20264:	beq	20280 <__assert_fail@plt+0xf054>
   20268:	mov	r1, r0
   2026c:	ldr	r0, [r4, #20]
   20270:	add	r0, r0, r6
   20274:	bl	1fff0 <__assert_fail@plt+0xedc4>
   20278:	cmp	r0, #0
   2027c:	bne	20164 <__assert_fail@plt+0xef38>
   20280:	mov	r0, #12
   20284:	add	sp, sp, #20
   20288:	ldrd	r4, [sp]
   2028c:	ldrd	r6, [sp, #8]
   20290:	ldrd	r8, [sp, #16]
   20294:	ldrd	sl, [sp, #24]
   20298:	add	sp, sp, #32
   2029c:	pop	{pc}		; (ldr pc, [sp], #4)
   202a0:	ldr	r2, [sp, #12]
   202a4:	cmp	r7, r5
   202a8:	str	sl, [r0, #4]
   202ac:	sub	r2, r7, r2
   202b0:	clz	r2, r2
   202b4:	lsr	r2, r2, #5
   202b8:	moveq	r2, #0
   202bc:	cmp	r2, #0
   202c0:	bne	203d4 <__assert_fail@plt+0xf1a8>
   202c4:	ldr	r2, [ip, #4]
   202c8:	mov	r1, fp
   202cc:	mov	r0, r4
   202d0:	ubfx	r2, r2, #8, #10
   202d4:	orr	r9, r9, r2
   202d8:	mov	r2, r9
   202dc:	bl	1fc04 <__assert_fail@plt+0xe9d8>
   202e0:	cmn	r0, #1
   202e4:	mov	r5, r0
   202e8:	beq	20280 <__assert_fail@plt+0xf054>
   202ec:	mov	r1, r0
   202f0:	ldr	r0, [r4, #20]
   202f4:	add	r0, r0, r6
   202f8:	bl	1fff0 <__assert_fail@plt+0xedc4>
   202fc:	cmp	r0, #0
   20300:	beq	20280 <__assert_fail@plt+0xf054>
   20304:	mov	r7, fp
   20308:	b	20164 <__assert_fail@plt+0xef38>
   2030c:	ldr	ip, [r4, #12]
   20310:	add	r5, r5, r5, lsl #1
   20314:	mov	r2, r9
   20318:	lsl	fp, r7, #2
   2031c:	mov	r0, r4
   20320:	lsl	r8, r5, #2
   20324:	add	r1, r1, r8
   20328:	ldr	r7, [ip, r7, lsl #2]
   2032c:	str	sl, [r1, #4]
   20330:	mov	r1, r7
   20334:	bl	1fc04 <__assert_fail@plt+0xe9d8>
   20338:	cmn	r0, #1
   2033c:	mov	r5, r0
   20340:	beq	20280 <__assert_fail@plt+0xf054>
   20344:	ldr	r2, [r4, #12]
   20348:	mov	r1, r0
   2034c:	ldr	r0, [r4, #20]
   20350:	ldr	r3, [r2, fp]
   20354:	add	r0, r0, r8
   20358:	str	r3, [r2, r6, lsl #2]
   2035c:	bl	1fff0 <__assert_fail@plt+0xedc4>
   20360:	cmp	r0, #0
   20364:	bne	20164 <__assert_fail@plt+0xef38>
   20368:	b	20280 <__assert_fail@plt+0xf054>
   2036c:	mov	r2, r9
   20370:	mov	r1, fp
   20374:	mov	r0, r4
   20378:	bl	1fc04 <__assert_fail@plt+0xe9d8>
   2037c:	cmn	r0, #1
   20380:	mov	r5, r0
   20384:	beq	20280 <__assert_fail@plt+0xf054>
   20388:	ldr	r0, [r4, #20]
   2038c:	mov	r1, r5
   20390:	add	r0, r0, r6
   20394:	bl	1fff0 <__assert_fail@plt+0xedc4>
   20398:	cmp	r0, #0
   2039c:	beq	20280 <__assert_fail@plt+0xf054>
   203a0:	mov	r2, r5
   203a4:	mov	r1, fp
   203a8:	str	r9, [sp]
   203ac:	mov	r0, r4
   203b0:	ldr	r3, [sp, #12]
   203b4:	bl	20134 <__assert_fail@plt+0xef08>
   203b8:	cmp	r0, #0
   203bc:	beq	2023c <__assert_fail@plt+0xf010>
   203c0:	b	20284 <__assert_fail@plt+0xf058>
   203c4:	ldr	r3, [r4, #12]
   203c8:	ldr	r2, [r3, r7, lsl #2]
   203cc:	str	r2, [r3, r5, lsl #2]
   203d0:	b	20284 <__assert_fail@plt+0xf058>
   203d4:	mov	r1, fp
   203d8:	bl	1fff0 <__assert_fail@plt+0xedc4>
   203dc:	cmp	r0, #0
   203e0:	movne	r0, #0
   203e4:	bne	20284 <__assert_fail@plt+0xf058>
   203e8:	b	20280 <__assert_fail@plt+0xf054>
   203ec:	ldr	r3, [r0, #36]	; 0x24
   203f0:	strd	r4, [sp, #-16]!
   203f4:	mov	r4, r0
   203f8:	mov	r5, r1
   203fc:	str	r6, [sp, #8]
   20400:	str	lr, [sp, #12]
   20404:	ldr	r6, [r0, #104]	; 0x68
   20408:	cmp	r3, r1
   2040c:	bgt	2044c <__assert_fail@plt+0xf220>
   20410:	ldr	r2, [r0, #48]	; 0x30
   20414:	cmp	r3, r2
   20418:	bge	2044c <__assert_fail@plt+0xf220>
   2041c:	add	r1, r5, #1
   20420:	mov	r0, r4
   20424:	bl	1f858 <__assert_fail@plt+0xe62c>
   20428:	cmp	r0, #0
   2042c:	bne	2043c <__assert_fail@plt+0xf210>
   20430:	cmp	r6, r5
   20434:	movge	r0, #0
   20438:	blt	20468 <__assert_fail@plt+0xf23c>
   2043c:	ldrd	r4, [sp]
   20440:	ldr	r6, [sp, #8]
   20444:	add	sp, sp, #12
   20448:	pop	{pc}		; (ldr pc, [sp], #4)
   2044c:	ldr	r3, [r4, #28]
   20450:	cmp	r3, r5
   20454:	bgt	20430 <__assert_fail@plt+0xf204>
   20458:	ldr	r2, [r4, #48]	; 0x30
   2045c:	cmp	r3, r2
   20460:	bge	20430 <__assert_fail@plt+0xf204>
   20464:	b	2041c <__assert_fail@plt+0xf1f0>
   20468:	ldr	r3, [r4, #100]	; 0x64
   2046c:	sub	r2, r5, r6
   20470:	add	r0, r6, #1
   20474:	lsl	r2, r2, #2
   20478:	mov	r1, #0
   2047c:	add	r0, r3, r0, lsl #2
   20480:	bl	1116c <memset@plt>
   20484:	str	r5, [r4, #104]	; 0x68
   20488:	mov	r0, #0
   2048c:	ldrd	r4, [sp]
   20490:	ldr	r6, [sp, #8]
   20494:	add	sp, sp, #12
   20498:	pop	{pc}		; (ldr pc, [sp], #4)
   2049c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   204a0:	subs	r4, r0, #0
   204a4:	strd	r6, [sp, #8]
   204a8:	str	r8, [sp, #16]
   204ac:	str	lr, [sp, #20]
   204b0:	ldr	r7, [sp, #28]
   204b4:	beq	20560 <__assert_fail@plt+0xf334>
   204b8:	ldr	ip, [r4]
   204bc:	cmp	ip, #0
   204c0:	beq	20560 <__assert_fail@plt+0xf334>
   204c4:	sub	ip, ip, #1
   204c8:	ldr	lr, [r4, #8]
   204cc:	mov	r0, r3
   204d0:	add	r5, ip, ip, lsl #1
   204d4:	mov	r8, r1
   204d8:	lsl	r6, r2, #3
   204dc:	lsl	r5, r5, #3
   204e0:	mov	r2, r6
   204e4:	ldr	r3, [lr, r5]
   204e8:	add	lr, lr, r5
   204ec:	ldr	r1, [lr, #8]
   204f0:	str	ip, [r4]
   204f4:	str	r3, [r8]
   204f8:	bl	10fd4 <memcpy@plt>
   204fc:	ldr	r3, [r4, #8]
   20500:	mov	r2, r6
   20504:	ldr	r0, [sp, #24]
   20508:	add	r3, r3, r5
   2050c:	ldr	r1, [r3, #8]
   20510:	add	r1, r1, r6
   20514:	bl	10fd4 <memcpy@plt>
   20518:	ldr	r0, [r7, #8]
   2051c:	bl	13254 <__assert_fail@plt+0x2028>
   20520:	ldr	r3, [r4, #8]
   20524:	add	r3, r3, r5
   20528:	ldr	r0, [r3, #8]
   2052c:	bl	13254 <__assert_fail@plt+0x2028>
   20530:	ldr	r3, [r4, #8]
   20534:	add	r5, r3, r5
   20538:	ldr	r0, [r5, #4]
   2053c:	ldrd	r2, [r5, #12]
   20540:	strd	r2, [r7]
   20544:	ldr	r3, [r5, #20]
   20548:	str	r3, [r7, #8]
   2054c:	ldrd	r4, [sp]
   20550:	ldrd	r6, [sp, #8]
   20554:	ldr	r8, [sp, #16]
   20558:	add	sp, sp, #20
   2055c:	pop	{pc}		; (ldr pc, [sp], #4)
   20560:	mvn	r0, #0
   20564:	b	2054c <__assert_fail@plt+0xf320>
   20568:	ldr	r3, [r0, #28]
   2056c:	add	ip, r1, #1
   20570:	cmp	ip, r3
   20574:	bge	205bc <__assert_fail@plt+0xf390>
   20578:	ldr	r2, [r0, #8]
   2057c:	ldr	r0, [r2, ip, lsl #2]
   20580:	add	r2, r2, ip, lsl #2
   20584:	cmn	r0, #1
   20588:	bne	205bc <__assert_fail@plt+0xf390>
   2058c:	sub	r0, r3, r1
   20590:	mov	r3, #1
   20594:	b	205a4 <__assert_fail@plt+0xf378>
   20598:	ldr	ip, [r2, #4]!
   2059c:	cmn	ip, #1
   205a0:	bne	205b4 <__assert_fail@plt+0xf388>
   205a4:	add	r3, r3, #1
   205a8:	cmp	r3, r0
   205ac:	bne	20598 <__assert_fail@plt+0xf36c>
   205b0:	bx	lr
   205b4:	mov	r0, r3
   205b8:	bx	lr
   205bc:	mov	r0, #1
   205c0:	bx	lr
   205c4:	cmp	r0, #0
   205c8:	ble	20644 <__assert_fail@plt+0xf418>
   205cc:	push	{lr}		; (str lr, [sp, #-4]!)
   205d0:	sub	ip, r0, #1
   205d4:	mov	r0, #0
   205d8:	ldr	lr, [r1]
   205dc:	cmp	r0, ip
   205e0:	bcs	2061c <__assert_fail@plt+0xf3f0>
   205e4:	add	r1, r0, ip
   205e8:	lsr	r1, r1, #1
   205ec:	ldr	r3, [lr, r1, lsl #2]
   205f0:	cmp	r2, r3
   205f4:	ble	2060c <__assert_fail@plt+0xf3e0>
   205f8:	b	20630 <__assert_fail@plt+0xf404>
   205fc:	ldr	ip, [lr, r3, lsl #2]
   20600:	cmp	ip, r2
   20604:	blt	20638 <__assert_fail@plt+0xf40c>
   20608:	mov	r1, r3
   2060c:	add	r3, r0, r1
   20610:	cmp	r0, r1
   20614:	lsr	r3, r3, #1
   20618:	bcc	205fc <__assert_fail@plt+0xf3d0>
   2061c:	ldr	r3, [lr, r0, lsl #2]
   20620:	cmp	r2, r3
   20624:	addeq	r0, r0, #1
   20628:	movne	r0, #0
   2062c:	pop	{pc}		; (ldr pc, [sp], #4)
   20630:	mov	r3, r1
   20634:	mov	r1, ip
   20638:	add	r0, r3, #1
   2063c:	mov	ip, r1
   20640:	b	205dc <__assert_fail@plt+0xf3b0>
   20644:	mov	r0, #0
   20648:	bx	lr
   2064c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   20650:	mov	r5, r1
   20654:	mov	r4, r2
   20658:	strd	r6, [sp, #8]
   2065c:	mov	r6, r0
   20660:	strd	r8, [sp, #16]
   20664:	mov	r9, r3
   20668:	add	r8, r1, #8
   2066c:	str	lr, [sp, #24]
   20670:	sub	sp, sp, #12
   20674:	ldr	r7, [sp, #40]	; 0x28
   20678:	mov	r1, r8
   2067c:	mov	r2, r4
   20680:	ldr	r0, [r5, #4]
   20684:	bl	205c4 <__assert_fail@plt+0xf398>
   20688:	cmp	r0, #0
   2068c:	mov	r1, r4
   20690:	mov	r0, r5
   20694:	bne	2075c <__assert_fail@plt+0xf530>
   20698:	ldr	r3, [r6]
   2069c:	add	r2, r3, r4, lsl #3
   206a0:	ldrb	r2, [r2, #4]
   206a4:	cmp	r2, r7
   206a8:	bne	206b8 <__assert_fail@plt+0xf48c>
   206ac:	ldr	r3, [r3, r4, lsl #3]
   206b0:	cmp	r3, r9
   206b4:	beq	20724 <__assert_fail@plt+0xf4f8>
   206b8:	bl	1fff0 <__assert_fail@plt+0xedc4>
   206bc:	cmp	r0, #0
   206c0:	add	r4, r4, r4, lsl #1
   206c4:	beq	20740 <__assert_fail@plt+0xf514>
   206c8:	ldr	r3, [r6, #20]
   206cc:	lsl	r4, r4, #2
   206d0:	add	r3, r3, r4
   206d4:	ldr	r2, [r3, #4]
   206d8:	cmp	r2, #0
   206dc:	beq	2075c <__assert_fail@plt+0xf530>
   206e0:	cmp	r2, #2
   206e4:	ldr	r2, [r3, #8]
   206e8:	beq	206f4 <__assert_fail@plt+0xf4c8>
   206ec:	ldr	r4, [r2]
   206f0:	b	20678 <__assert_fail@plt+0xf44c>
   206f4:	mov	r3, r9
   206f8:	mov	r1, r5
   206fc:	ldr	r2, [r2, #4]
   20700:	mov	r0, r6
   20704:	str	r7, [sp]
   20708:	bl	2064c <__assert_fail@plt+0xf420>
   2070c:	cmp	r0, #0
   20710:	bne	20744 <__assert_fail@plt+0xf518>
   20714:	ldr	r3, [r6, #20]
   20718:	add	r4, r3, r4
   2071c:	ldr	r2, [r4, #8]
   20720:	b	206ec <__assert_fail@plt+0xf4c0>
   20724:	cmp	r7, #9
   20728:	bne	2075c <__assert_fail@plt+0xf530>
   2072c:	mov	r1, r4
   20730:	mov	r0, r5
   20734:	bl	1fff0 <__assert_fail@plt+0xedc4>
   20738:	cmp	r0, #0
   2073c:	bne	2075c <__assert_fail@plt+0xf530>
   20740:	mov	r0, #12
   20744:	add	sp, sp, #12
   20748:	ldrd	r4, [sp]
   2074c:	ldrd	r6, [sp, #8]
   20750:	ldrd	r8, [sp, #16]
   20754:	add	sp, sp, #24
   20758:	pop	{pc}		; (ldr pc, [sp], #4)
   2075c:	mov	r0, #0
   20760:	b	20744 <__assert_fail@plt+0xf518>
   20764:	ldr	r3, [r0]
   20768:	cmp	r2, r3
   2076c:	bge	20790 <__assert_fail@plt+0xf564>
   20770:	ldr	r3, [r1]
   20774:	add	r3, r3, r2, lsl #2
   20778:	ldr	r1, [r3, #4]
   2077c:	add	r2, r2, #1
   20780:	str	r1, [r3], #4
   20784:	ldr	r1, [r0]
   20788:	cmp	r2, r1
   2078c:	blt	20778 <__assert_fail@plt+0xf54c>
   20790:	bx	lr
   20794:	ldrb	r3, [r1, #24]
   20798:	cmp	r3, #4
   2079c:	beq	20808 <__assert_fail@plt+0xf5dc>
   207a0:	cmp	r3, #17
   207a4:	beq	207b0 <__assert_fail@plt+0xf584>
   207a8:	mov	r0, #0
   207ac:	bx	lr
   207b0:	ldr	r3, [r1, #4]
   207b4:	cmp	r3, #0
   207b8:	beq	207a8 <__assert_fail@plt+0xf57c>
   207bc:	ldrb	r2, [r3, #24]
   207c0:	cmp	r2, #17
   207c4:	bne	207a8 <__assert_fail@plt+0xf57c>
   207c8:	ldr	r2, [r3, #4]
   207cc:	ldr	r3, [r3, #20]
   207d0:	cmp	r2, #0
   207d4:	str	r2, [r1, #4]
   207d8:	strne	r1, [r2]
   207dc:	cmp	r3, #31
   207e0:	ldr	r1, [r1, #20]
   207e4:	ldr	r2, [r0, #132]	; 0x84
   207e8:	ldr	r1, [r2, r1, lsl #2]
   207ec:	str	r1, [r2, r3, lsl #2]
   207f0:	bgt	207a8 <__assert_fail@plt+0xf57c>
   207f4:	ldr	r2, [r0, #80]	; 0x50
   207f8:	mov	r1, #1
   207fc:	bic	r3, r2, r1, lsl r3
   20800:	str	r3, [r0, #80]	; 0x50
   20804:	b	207a8 <__assert_fail@plt+0xf57c>
   20808:	ldr	r2, [r0, #132]	; 0x84
   2080c:	cmp	r2, #0
   20810:	beq	207a8 <__assert_fail@plt+0xf57c>
   20814:	push	{lr}		; (str lr, [sp, #-4]!)
   20818:	mov	ip, #1
   2081c:	ldr	lr, [r1, #20]
   20820:	ldr	r3, [r0, #80]	; 0x50
   20824:	ldr	r2, [r2, lr, lsl #2]
   20828:	orr	r3, r3, ip, lsl r2
   2082c:	str	r2, [r1, #20]
   20830:	str	r3, [r0, #80]	; 0x50
   20834:	mov	r0, #0
   20838:	pop	{pc}		; (ldr pc, [sp], #4)
   2083c:	ldrb	r3, [r1, #24]
   20840:	ldr	r2, [r1, #4]
   20844:	cmp	r3, #11
   20848:	streq	r1, [r2, #16]
   2084c:	beq	2086c <__assert_fail@plt+0xf640>
   20850:	cmp	r3, #16
   20854:	bne	20874 <__assert_fail@plt+0xf648>
   20858:	ldr	r3, [r1, #8]
   2085c:	ldr	r0, [r3, #12]
   20860:	str	r0, [r2, #16]
   20864:	ldr	r2, [r1, #16]
   20868:	str	r2, [r3, #16]
   2086c:	mov	r0, #0
   20870:	bx	lr
   20874:	cmp	r2, #0
   20878:	mov	r0, #0
   2087c:	ldrne	r3, [r1, #16]
   20880:	strne	r3, [r2, #16]
   20884:	ldr	r3, [r1, #8]
   20888:	cmp	r3, #0
   2088c:	ldrne	r2, [r1, #16]
   20890:	strne	r2, [r3, #16]
   20894:	bx	lr
   20898:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2089c:	mov	r4, #0
   208a0:	strd	r6, [sp, #8]
   208a4:	strd	r8, [sp, #16]
   208a8:	ldr	r9, [r0, #108]	; 0x6c
   208ac:	strd	sl, [sp, #24]
   208b0:	str	lr, [sp, #32]
   208b4:	sub	sp, sp, #28
   208b8:	ldr	r6, [sp, #64]	; 0x40
   208bc:	ldr	r7, [sp, #72]	; 0x48
   208c0:	mov	ip, r9
   208c4:	ldr	lr, [r0, #84]	; 0x54
   208c8:	str	lr, [sp, #8]
   208cc:	cmp	r4, ip
   208d0:	bge	2092c <__assert_fail@plt+0xf700>
   208d4:	add	lr, r4, ip
   208d8:	ldr	r5, [r0, #116]	; 0x74
   208dc:	add	lr, lr, lr, lsr #31
   208e0:	asr	lr, lr, #1
   208e4:	add	r8, lr, lr, lsl #1
   208e8:	add	r8, r5, r8, lsl #3
   208ec:	ldr	r8, [r8, #4]
   208f0:	cmp	r6, r8
   208f4:	ble	2091c <__assert_fail@plt+0xf6f0>
   208f8:	b	20a7c <__assert_fail@plt+0xf850>
   208fc:	asr	ip, ip, #1
   20900:	add	r8, ip, ip, lsl #1
   20904:	mov	sl, ip
   20908:	add	r8, r5, r8, lsl #3
   2090c:	ldr	r8, [r8, #4]
   20910:	cmp	r8, r6
   20914:	blt	20a84 <__assert_fail@plt+0xf858>
   20918:	mov	lr, ip
   2091c:	add	ip, r4, lr
   20920:	cmp	r4, lr
   20924:	add	ip, ip, ip, lsr #31
   20928:	blt	208fc <__assert_fail@plt+0xf6d0>
   2092c:	cmp	r9, r4
   20930:	ble	20ac0 <__assert_fail@plt+0xf894>
   20934:	ldr	ip, [r0, #116]	; 0x74
   20938:	add	lr, r4, r4, lsl #1
   2093c:	add	ip, ip, lr, lsl #3
   20940:	ldr	ip, [ip, #4]
   20944:	cmp	r6, ip
   20948:	mvnne	r4, #0
   2094c:	mov	ip, r9
   20950:	mov	r5, #0
   20954:	cmp	r5, ip
   20958:	bge	209b4 <__assert_fail@plt+0xf788>
   2095c:	add	lr, r5, ip
   20960:	ldr	r8, [r0, #116]	; 0x74
   20964:	add	lr, lr, lr, lsr #31
   20968:	asr	lr, lr, #1
   2096c:	add	sl, lr, lr, lsl #1
   20970:	add	sl, r8, sl, lsl #3
   20974:	ldr	sl, [sl, #4]
   20978:	cmp	r7, sl
   2097c:	ble	209a4 <__assert_fail@plt+0xf778>
   20980:	b	20a90 <__assert_fail@plt+0xf864>
   20984:	asr	ip, ip, #1
   20988:	add	sl, ip, ip, lsl #1
   2098c:	mov	fp, ip
   20990:	add	sl, r8, sl, lsl #3
   20994:	ldr	sl, [sl, #4]
   20998:	cmp	sl, r7
   2099c:	blt	20a98 <__assert_fail@plt+0xf86c>
   209a0:	mov	lr, ip
   209a4:	add	ip, r5, lr
   209a8:	cmp	r5, lr
   209ac:	add	ip, ip, ip, lsr #31
   209b0:	blt	20984 <__assert_fail@plt+0xf758>
   209b4:	cmp	r9, r5
   209b8:	ble	20ac8 <__assert_fail@plt+0xf89c>
   209bc:	ldr	ip, [r0, #116]	; 0x74
   209c0:	add	lr, r5, r5, lsl #1
   209c4:	add	ip, ip, lr, lsl #3
   209c8:	ldr	ip, [ip, #4]
   209cc:	cmp	r7, ip
   209d0:	mvnne	r5, #0
   209d4:	ldr	ip, [r1]
   209d8:	cmp	ip, #0
   209dc:	ble	20ab8 <__assert_fail@plt+0xf88c>
   209e0:	mov	r9, r2
   209e4:	mov	r8, r0
   209e8:	str	r3, [sp, #12]
   209ec:	mov	fp, #0
   209f0:	str	r4, [sp, #16]
   209f4:	str	r1, [sp, #20]
   209f8:	ldr	r1, [r9]
   209fc:	mov	r0, r8
   20a00:	ldrd	r2, [sp, #8]
   20a04:	ldr	ip, [r8, #116]	; 0x74
   20a08:	ldr	r1, [r1, fp, lsl #2]
   20a0c:	ldr	r2, [r2]
   20a10:	add	lr, r1, r1, lsl #1
   20a14:	ldr	ip, [ip, lr, lsl #3]
   20a18:	ldr	r4, [r2, ip, lsl #3]
   20a1c:	str	r6, [sp]
   20a20:	ldr	r2, [sp, #16]
   20a24:	str	r2, [sp, #4]
   20a28:	mov	r2, r4
   20a2c:	bl	1ed90 <__assert_fail@plt+0xdb64>
   20a30:	ldr	r1, [r9]
   20a34:	mov	sl, r0
   20a38:	mov	r2, r4
   20a3c:	mov	r0, r8
   20a40:	ldr	r3, [sp, #68]	; 0x44
   20a44:	ldr	r1, [r1, fp, lsl #2]
   20a48:	str	r7, [sp]
   20a4c:	str	r5, [sp, #4]
   20a50:	bl	1ed90 <__assert_fail@plt+0xdb64>
   20a54:	cmp	sl, r0
   20a58:	beq	20aa4 <__assert_fail@plt+0xf878>
   20a5c:	mov	r0, #1
   20a60:	add	sp, sp, #28
   20a64:	ldrd	r4, [sp]
   20a68:	ldrd	r6, [sp, #8]
   20a6c:	ldrd	r8, [sp, #16]
   20a70:	ldrd	sl, [sp, #24]
   20a74:	add	sp, sp, #32
   20a78:	pop	{pc}		; (ldr pc, [sp], #4)
   20a7c:	mov	sl, lr
   20a80:	mov	lr, ip
   20a84:	add	r4, sl, #1
   20a88:	mov	ip, lr
   20a8c:	b	208cc <__assert_fail@plt+0xf6a0>
   20a90:	mov	fp, lr
   20a94:	mov	lr, ip
   20a98:	add	r5, fp, #1
   20a9c:	mov	ip, lr
   20aa0:	b	20954 <__assert_fail@plt+0xf728>
   20aa4:	ldr	r3, [sp, #20]
   20aa8:	add	fp, fp, #1
   20aac:	ldr	r3, [r3]
   20ab0:	cmp	fp, r3
   20ab4:	blt	209f8 <__assert_fail@plt+0xf7cc>
   20ab8:	mov	r0, #0
   20abc:	b	20a60 <__assert_fail@plt+0xf834>
   20ac0:	mvn	r4, #0
   20ac4:	b	2094c <__assert_fail@plt+0xf720>
   20ac8:	mvn	r5, #0
   20acc:	b	209d4 <__assert_fail@plt+0xf7a8>
   20ad0:	strd	r4, [sp, #-16]!
   20ad4:	mov	r4, r0
   20ad8:	mov	r5, r2
   20adc:	str	r6, [sp, #8]
   20ae0:	mov	r6, r1
   20ae4:	str	lr, [sp, #12]
   20ae8:	b	20af0 <__assert_fail@plt+0xf8c4>
   20aec:	mov	r4, r3
   20af0:	mov	r1, r4
   20af4:	mov	r0, r5
   20af8:	blx	r6
   20afc:	cmp	r0, #0
   20b00:	bne	20b30 <__assert_fail@plt+0xf904>
   20b04:	ldr	r3, [r4, #4]
   20b08:	cmp	r3, #0
   20b0c:	bne	20aec <__assert_fail@plt+0xf8c0>
   20b10:	ldr	r2, [r4, #8]
   20b14:	cmp	r2, #0
   20b18:	cmpne	r2, r3
   20b1c:	mov	r3, r4
   20b20:	bne	20b40 <__assert_fail@plt+0xf914>
   20b24:	ldr	r2, [r4]
   20b28:	subs	r4, r2, #0
   20b2c:	bne	20b10 <__assert_fail@plt+0xf8e4>
   20b30:	ldrd	r4, [sp]
   20b34:	ldr	r6, [sp, #8]
   20b38:	add	sp, sp, #12
   20b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   20b40:	mov	r3, r2
   20b44:	b	20aec <__assert_fail@plt+0xf8c0>
   20b48:	ldr	ip, [r1, #4]
   20b4c:	cmp	ip, #0
   20b50:	beq	20ce8 <__assert_fail@plt+0xfabc>
   20b54:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20b58:	strd	r6, [sp, #8]
   20b5c:	str	lr, [sp, #28]
   20b60:	ldr	lr, [r2, #4]
   20b64:	strd	r8, [sp, #16]
   20b68:	str	sl, [sp, #24]
   20b6c:	cmp	lr, #0
   20b70:	beq	20c70 <__assert_fail@plt+0xfa44>
   20b74:	ldr	r4, [r0]
   20b78:	mov	r9, r2
   20b7c:	add	r2, ip, lr
   20b80:	mov	r8, r1
   20b84:	mov	r7, r0
   20b88:	ldmib	r0, {r3, sl}
   20b8c:	add	r1, r2, r3
   20b90:	cmp	r1, r4
   20b94:	bgt	20cf8 <__assert_fail@plt+0xfacc>
   20b98:	ldr	r0, [r8, #8]
   20b9c:	add	r1, r3, ip
   20ba0:	sub	r5, ip, #1
   20ba4:	sub	r6, lr, #1
   20ba8:	add	r1, r1, lr
   20bac:	ldr	r2, [r9, #8]
   20bb0:	sub	r3, r3, #1
   20bb4:	ldr	ip, [r0, r5, lsl #2]
   20bb8:	ldr	lr, [r2, r6, lsl #2]
   20bbc:	cmp	ip, lr
   20bc0:	beq	20bdc <__assert_fail@plt+0xf9b0>
   20bc4:	bge	20c90 <__assert_fail@plt+0xfa64>
   20bc8:	subs	r6, r6, #1
   20bcc:	bmi	20c2c <__assert_fail@plt+0xfa00>
   20bd0:	ldr	lr, [r2, r6, lsl #2]
   20bd4:	cmp	ip, lr
   20bd8:	bne	20bc4 <__assert_fail@plt+0xf998>
   20bdc:	cmp	r3, #0
   20be0:	blt	20c0c <__assert_fail@plt+0xf9e0>
   20be4:	ldr	r4, [sl, r3, lsl #2]
   20be8:	add	lr, sl, r3, lsl #2
   20bec:	cmp	r4, ip
   20bf0:	bgt	20c04 <__assert_fail@plt+0xf9d8>
   20bf4:	b	20ca0 <__assert_fail@plt+0xfa74>
   20bf8:	ldr	r4, [lr, #-4]!
   20bfc:	cmp	r4, ip
   20c00:	ble	20ca0 <__assert_fail@plt+0xfa74>
   20c04:	subs	r3, r3, #1
   20c08:	bcs	20bf8 <__assert_fail@plt+0xf9cc>
   20c0c:	sub	r1, r1, #1
   20c10:	str	ip, [sl, r1, lsl #2]
   20c14:	subs	r5, r5, #1
   20c18:	bmi	20c2c <__assert_fail@plt+0xfa00>
   20c1c:	subs	r6, r6, #1
   20c20:	bmi	20c2c <__assert_fail@plt+0xfa00>
   20c24:	ldr	ip, [r0, r5, lsl #2]
   20c28:	b	20bd0 <__assert_fail@plt+0xf9a4>
   20c2c:	ldr	ip, [r7, #4]
   20c30:	ldr	r0, [r8, #4]
   20c34:	ldr	r2, [r9, #4]
   20c38:	sub	r3, ip, #1
   20c3c:	add	r0, ip, r0
   20c40:	add	r0, r0, r2
   20c44:	sub	r2, r0, r1
   20c48:	sub	r0, r0, #1
   20c4c:	add	ip, ip, r2
   20c50:	cmp	r3, #0
   20c54:	cmpge	r2, #0
   20c58:	str	ip, [r7, #4]
   20c5c:	bgt	20cbc <__assert_fail@plt+0xfa90>
   20c60:	lsl	r2, r2, #2
   20c64:	add	r1, sl, r1, lsl #2
   20c68:	mov	r0, sl
   20c6c:	bl	10fd4 <memcpy@plt>
   20c70:	mov	ip, #0
   20c74:	ldrd	r4, [sp]
   20c78:	mov	r0, ip
   20c7c:	ldrd	r6, [sp, #8]
   20c80:	ldrd	r8, [sp, #16]
   20c84:	ldr	sl, [sp, #24]
   20c88:	add	sp, sp, #28
   20c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   20c90:	subs	r5, r5, #1
   20c94:	bmi	20c2c <__assert_fail@plt+0xfa00>
   20c98:	ldr	ip, [r0, r5, lsl #2]
   20c9c:	b	20bbc <__assert_fail@plt+0xf990>
   20ca0:	cmp	r4, ip
   20ca4:	bne	20c0c <__assert_fail@plt+0xf9e0>
   20ca8:	b	20c14 <__assert_fail@plt+0xf9e8>
   20cac:	sub	r3, r3, #1
   20cb0:	str	ip, [sl, r4, lsl #2]
   20cb4:	cmn	r3, #1
   20cb8:	beq	20cf0 <__assert_fail@plt+0xfac4>
   20cbc:	ldr	lr, [sl, r0, lsl #2]
   20cc0:	add	r4, r3, r2
   20cc4:	ldr	ip, [sl, r3, lsl #2]
   20cc8:	cmp	lr, ip
   20ccc:	ble	20cac <__assert_fail@plt+0xfa80>
   20cd0:	subs	r2, r2, #1
   20cd4:	sub	r0, r0, #1
   20cd8:	str	lr, [sl, r4, lsl #2]
   20cdc:	bne	20cbc <__assert_fail@plt+0xfa90>
   20ce0:	ldr	sl, [r7, #8]
   20ce4:	b	20c64 <__assert_fail@plt+0xfa38>
   20ce8:	mov	r0, ip
   20cec:	bx	lr
   20cf0:	ldr	sl, [r7, #8]
   20cf4:	b	20c60 <__assert_fail@plt+0xfa34>
   20cf8:	add	r4, r2, r4
   20cfc:	mov	r0, sl
   20d00:	lsl	r1, r4, #2
   20d04:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   20d08:	subs	sl, r0, #0
   20d0c:	beq	20d28 <__assert_fail@plt+0xfafc>
   20d10:	ldr	ip, [r8, #4]
   20d14:	ldr	lr, [r9, #4]
   20d18:	str	r4, [r7]
   20d1c:	str	sl, [r7, #8]
   20d20:	ldr	r3, [r7, #4]
   20d24:	b	20b98 <__assert_fail@plt+0xf96c>
   20d28:	mov	ip, #12
   20d2c:	b	20c74 <__assert_fail@plt+0xfa48>
   20d30:	strd	r4, [sp, #-20]!	; 0xffffffec
   20d34:	mov	r5, r0
   20d38:	ldr	r0, [r1]
   20d3c:	strd	r6, [sp, #8]
   20d40:	str	lr, [sp, #16]
   20d44:	sub	sp, sp, #20
   20d48:	cmp	r0, #31
   20d4c:	beq	20dcc <__assert_fail@plt+0xfba0>
   20d50:	lsl	ip, r0, #5
   20d54:	add	r4, r0, #1
   20d58:	ldr	r0, [r5]
   20d5c:	add	r7, ip, #4
   20d60:	str	r4, [r1]
   20d64:	add	lr, r0, ip
   20d68:	mov	r6, #0
   20d6c:	ldr	r1, [sp, #40]	; 0x28
   20d70:	add	ip, ip, #16
   20d74:	cmp	r2, r6
   20d78:	str	r6, [lr, #4]
   20d7c:	add	ip, r0, ip
   20d80:	add	r0, r0, r7
   20d84:	strd	r2, [lr, #8]
   20d88:	mvn	r7, #0
   20d8c:	ldrd	r4, [r1]
   20d90:	strd	r4, [lr, #24]
   20d94:	ldrb	r1, [ip, #14]
   20d98:	bic	r1, r1, #12
   20d9c:	strb	r1, [ip, #14]
   20da0:	str	r6, [lr, #16]
   20da4:	str	r6, [lr, #20]
   20da8:	str	r7, [lr, #32]
   20dac:	strne	r0, [r2]
   20db0:	cmp	r3, #0
   20db4:	strne	r0, [r3]
   20db8:	add	sp, sp, #20
   20dbc:	ldrd	r4, [sp]
   20dc0:	ldrd	r6, [sp, #8]
   20dc4:	add	sp, sp, #16
   20dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   20dcc:	mov	r0, #996	; 0x3e4
   20dd0:	stmib	sp, {r1, r2, r3}
   20dd4:	bl	2d378 <__assert_fail@plt+0x1c14c>
   20dd8:	cmp	r0, #0
   20ddc:	beq	20db8 <__assert_fail@plt+0xfb8c>
   20de0:	ldr	lr, [r5]
   20de4:	mov	r7, #4
   20de8:	mov	r4, #1
   20dec:	mov	ip, #0
   20df0:	str	r0, [r5]
   20df4:	ldmib	sp, {r1, r2, r3}
   20df8:	str	lr, [r0]
   20dfc:	b	20d60 <__assert_fail@plt+0xfb34>
   20e00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20e04:	mov	r4, r0
   20e08:	ldr	r5, [r0]
   20e0c:	strd	r6, [sp, #8]
   20e10:	add	r7, r1, #56	; 0x38
   20e14:	add	r6, r1, #64	; 0x40
   20e18:	str	r8, [sp, #16]
   20e1c:	str	lr, [sp, #20]
   20e20:	sub	sp, sp, #16
   20e24:	add	r8, sp, #12
   20e28:	b	20e34 <__assert_fail@plt+0xfc08>
   20e2c:	mov	r4, r3
   20e30:	add	r8, r5, #4
   20e34:	add	ip, r4, #20
   20e38:	mov	r3, #0
   20e3c:	mov	r2, r3
   20e40:	mov	r1, r6
   20e44:	mov	r0, r7
   20e48:	str	ip, [sp]
   20e4c:	bl	20d30 <__assert_fail@plt+0xfb04>
   20e50:	cmp	r0, #0
   20e54:	str	r0, [r8]
   20e58:	beq	20ea4 <__assert_fail@plt+0xfc78>
   20e5c:	str	r5, [r0]
   20e60:	ldr	r5, [r8]
   20e64:	ldrb	r3, [r5, #26]
   20e68:	orr	r3, r3, #4
   20e6c:	strb	r3, [r5, #26]
   20e70:	ldr	r3, [r4, #4]
   20e74:	cmp	r3, #0
   20e78:	bne	20e2c <__assert_fail@plt+0xfc00>
   20e7c:	ldr	r2, [r4, #8]
   20e80:	cmp	r2, r3
   20e84:	cmpne	r2, #0
   20e88:	mov	r3, r4
   20e8c:	bne	20ebc <__assert_fail@plt+0xfc90>
   20e90:	ldr	r2, [r4]
   20e94:	ldr	r5, [r5]
   20e98:	subs	r4, r2, #0
   20e9c:	bne	20e7c <__assert_fail@plt+0xfc50>
   20ea0:	ldr	r0, [sp, #12]
   20ea4:	add	sp, sp, #16
   20ea8:	ldrd	r4, [sp]
   20eac:	ldrd	r6, [sp, #8]
   20eb0:	ldr	r8, [sp, #16]
   20eb4:	add	sp, sp, #20
   20eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   20ebc:	mov	r4, r2
   20ec0:	add	r8, r5, #8
   20ec4:	b	20e34 <__assert_fail@plt+0xfc08>
   20ec8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20ecc:	ldr	r4, [r1]
   20ed0:	ldr	r5, [r2, #4]
   20ed4:	strd	r6, [sp, #8]
   20ed8:	ldrb	r7, [r1, #28]
   20edc:	strd	r8, [sp, #16]
   20ee0:	mov	r8, r2
   20ee4:	strd	sl, [sp, #24]
   20ee8:	str	lr, [sp, #32]
   20eec:	sub	sp, sp, #28
   20ef0:	ands	r7, r7, #16
   20ef4:	str	r0, [sp, #12]
   20ef8:	beq	210c4 <__assert_fail@plt+0xfe98>
   20efc:	cmp	r5, #0
   20f00:	beq	21054 <__assert_fail@plt+0xfe28>
   20f04:	ldr	r3, [r2, #20]
   20f08:	cmp	r3, #31
   20f0c:	bgt	21034 <__assert_fail@plt+0xfe08>
   20f10:	ldr	r2, [r4, #80]	; 0x50
   20f14:	lsr	r3, r2, r3
   20f18:	tst	r3, #1
   20f1c:	beq	21034 <__assert_fail@plt+0xfe08>
   20f20:	add	r7, sp, #16
   20f24:	mov	ip, #8
   20f28:	add	r9, r4, #56	; 0x38
   20f2c:	mov	r3, #0
   20f30:	add	r4, r4, #64	; 0x40
   20f34:	mov	sl, #0
   20f38:	str	r7, [sp]
   20f3c:	mov	fp, #0
   20f40:	mov	r2, r3
   20f44:	str	r7, [sp, #8]
   20f48:	mov	r1, r4
   20f4c:	mov	r0, r9
   20f50:	strd	sl, [sp, #16]
   20f54:	strb	ip, [sp, #20]
   20f58:	bl	20d30 <__assert_fail@plt+0xfb04>
   20f5c:	mov	ip, #9
   20f60:	mov	r3, #0
   20f64:	str	r7, [sp]
   20f68:	mov	r6, r0
   20f6c:	mov	r1, r4
   20f70:	strd	sl, [sp, #16]
   20f74:	mov	r0, r9
   20f78:	mov	r2, r3
   20f7c:	strb	ip, [sp, #20]
   20f80:	bl	20d30 <__assert_fail@plt+0xfb04>
   20f84:	mov	r7, r0
   20f88:	ldr	r3, [sp, #8]
   20f8c:	mov	r0, #0
   20f90:	mov	r1, #0
   20f94:	mov	ip, #16
   20f98:	mov	r2, r5
   20f9c:	str	r3, [sp]
   20fa0:	mov	r3, r7
   20fa4:	strd	r0, [sp, #16]
   20fa8:	mov	r1, r4
   20fac:	mov	r0, r9
   20fb0:	strb	ip, [sp, #20]
   20fb4:	bl	20d30 <__assert_fail@plt+0xfb04>
   20fb8:	mov	fp, r0
   20fbc:	ldr	r0, [sp, #8]
   20fc0:	mov	r2, #0
   20fc4:	mov	r3, #0
   20fc8:	mov	ip, #16
   20fcc:	mov	r1, r4
   20fd0:	str	r0, [sp]
   20fd4:	mov	r0, r9
   20fd8:	strd	r2, [sp, #16]
   20fdc:	mov	r3, fp
   20fe0:	mov	r2, r6
   20fe4:	strb	ip, [sp, #20]
   20fe8:	bl	20d30 <__assert_fail@plt+0xfb04>
   20fec:	cmp	fp, #0
   20ff0:	cmpne	r0, #0
   20ff4:	mov	r5, r0
   20ff8:	beq	21140 <__assert_fail@plt+0xff14>
   20ffc:	cmp	r7, #0
   21000:	cmpne	r6, #0
   21004:	beq	21140 <__assert_fail@plt+0xff14>
   21008:	ldr	r2, [r8, #20]
   2100c:	ldrb	r3, [r8, #26]
   21010:	str	r2, [r7, #20]
   21014:	str	r2, [r6, #20]
   21018:	ldrb	r2, [r7, #26]
   2101c:	ubfx	r3, r3, #3, #1
   21020:	bfi	r2, r3, #3, #1
   21024:	strb	r2, [r7, #26]
   21028:	ldrb	r2, [r6, #26]
   2102c:	bfi	r2, r3, #3, #1
   21030:	strb	r2, [r6, #26]
   21034:	mov	r0, r5
   21038:	add	sp, sp, #28
   2103c:	ldrd	r4, [sp]
   21040:	ldrd	r6, [sp, #8]
   21044:	ldrd	r8, [sp, #16]
   21048:	ldrd	sl, [sp, #24]
   2104c:	add	sp, sp, #32
   21050:	pop	{pc}		; (ldr pc, [sp], #4)
   21054:	add	r7, sp, #16
   21058:	mov	ip, #8
   2105c:	add	r9, r4, #56	; 0x38
   21060:	mov	fp, #0
   21064:	add	r4, r4, #64	; 0x40
   21068:	mov	sl, #0
   2106c:	str	r7, [sp]
   21070:	mov	r1, r4
   21074:	mov	r3, r5
   21078:	str	r7, [sp, #8]
   2107c:	mov	r2, r5
   21080:	mov	r0, r9
   21084:	strd	sl, [sp, #16]
   21088:	strb	ip, [sp, #20]
   2108c:	bl	20d30 <__assert_fail@plt+0xfb04>
   21090:	mov	ip, #9
   21094:	mov	r6, r0
   21098:	str	r7, [sp]
   2109c:	mov	r1, r4
   210a0:	mov	r0, r9
   210a4:	strd	sl, [sp, #16]
   210a8:	mov	r3, r5
   210ac:	mov	r2, r5
   210b0:	strb	ip, [sp, #20]
   210b4:	bl	20d30 <__assert_fail@plt+0xfb04>
   210b8:	mov	fp, r0
   210bc:	mov	r7, r0
   210c0:	b	20fbc <__assert_fail@plt+0xfd90>
   210c4:	add	r3, sp, #16
   210c8:	mov	ip, #8
   210cc:	add	r9, r4, #56	; 0x38
   210d0:	mov	fp, #0
   210d4:	add	r4, r4, #64	; 0x40
   210d8:	mov	sl, #0
   210dc:	str	r3, [sp]
   210e0:	mov	r2, r7
   210e4:	mov	r1, r4
   210e8:	str	r3, [sp, #8]
   210ec:	mov	r0, r9
   210f0:	mov	r3, r7
   210f4:	strd	sl, [sp, #16]
   210f8:	strb	ip, [sp, #20]
   210fc:	bl	20d30 <__assert_fail@plt+0xfb04>
   21100:	ldr	r3, [sp, #8]
   21104:	mov	ip, #9
   21108:	mov	r2, r7
   2110c:	mov	r6, r0
   21110:	mov	r1, r4
   21114:	mov	r0, r9
   21118:	str	r3, [sp]
   2111c:	mov	r3, r7
   21120:	strd	sl, [sp, #16]
   21124:	strb	ip, [sp, #20]
   21128:	bl	20d30 <__assert_fail@plt+0xfb04>
   2112c:	cmp	r5, #0
   21130:	mov	r7, r0
   21134:	moveq	fp, r0
   21138:	bne	20f88 <__assert_fail@plt+0xfd5c>
   2113c:	b	20fbc <__assert_fail@plt+0xfd90>
   21140:	ldr	r2, [sp, #12]
   21144:	mov	r3, #12
   21148:	mov	r5, #0
   2114c:	str	r3, [r2]
   21150:	b	21034 <__assert_fail@plt+0xfe08>
   21154:	ldr	r2, [r1, #4]
   21158:	mov	r3, #0
   2115c:	strd	r4, [sp, #-12]!
   21160:	mov	r4, r1
   21164:	mov	r5, r0
   21168:	str	lr, [sp, #8]
   2116c:	sub	sp, sp, #12
   21170:	str	r3, [sp, #4]
   21174:	cmp	r2, r3
   21178:	beq	21188 <__assert_fail@plt+0xff5c>
   2117c:	ldrb	r3, [r2, #24]
   21180:	cmp	r3, #17
   21184:	beq	211b4 <__assert_fail@plt+0xff88>
   21188:	ldr	r2, [r4, #8]
   2118c:	cmp	r2, #0
   21190:	beq	211a0 <__assert_fail@plt+0xff74>
   21194:	ldrb	r3, [r2, #24]
   21198:	cmp	r3, #17
   2119c:	beq	211d0 <__assert_fail@plt+0xffa4>
   211a0:	ldr	r0, [sp, #4]
   211a4:	add	sp, sp, #12
   211a8:	ldrd	r4, [sp]
   211ac:	add	sp, sp, #8
   211b0:	pop	{pc}		; (ldr pc, [sp], #4)
   211b4:	mov	r1, r0
   211b8:	add	r0, sp, #4
   211bc:	bl	20ec8 <__assert_fail@plt+0xfc9c>
   211c0:	cmp	r0, #0
   211c4:	str	r0, [r4, #4]
   211c8:	strne	r4, [r0]
   211cc:	b	21188 <__assert_fail@plt+0xff5c>
   211d0:	mov	r1, r5
   211d4:	add	r0, sp, #4
   211d8:	bl	20ec8 <__assert_fail@plt+0xfc9c>
   211dc:	cmp	r0, #0
   211e0:	str	r0, [r4, #8]
   211e4:	strne	r4, [r0]
   211e8:	b	211a0 <__assert_fail@plt+0xff74>
   211ec:	ldr	r3, [r1, #4]
   211f0:	cmp	r3, #0
   211f4:	str	r3, [r0, #4]
   211f8:	ble	2125c <__assert_fail@plt+0x10030>
   211fc:	strd	r4, [sp, #-16]!
   21200:	mov	r4, r0
   21204:	lsl	r0, r3, #2
   21208:	str	r6, [sp, #8]
   2120c:	mov	r5, r1
   21210:	str	lr, [sp, #12]
   21214:	str	r3, [r4]
   21218:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2121c:	cmp	r0, #0
   21220:	str	r0, [r4, #8]
   21224:	moveq	r2, #12
   21228:	streq	r0, [r4]
   2122c:	streq	r0, [r4, #4]
   21230:	beq	21248 <__assert_fail@plt+0x1001c>
   21234:	ldr	r2, [r5, #4]
   21238:	ldr	r1, [r5, #8]
   2123c:	lsl	r2, r2, #2
   21240:	bl	10fd4 <memcpy@plt>
   21244:	mov	r2, #0
   21248:	ldrd	r4, [sp]
   2124c:	mov	r0, r2
   21250:	ldr	r6, [sp, #8]
   21254:	add	sp, sp, #12
   21258:	pop	{pc}		; (ldr pc, [sp], #4)
   2125c:	mov	r3, #0
   21260:	str	r3, [r0]
   21264:	str	r3, [r0, #4]
   21268:	str	r3, [r0, #8]
   2126c:	mov	r0, r3
   21270:	bx	lr
   21274:	cmp	r1, #0
   21278:	beq	21294 <__assert_fail@plt+0x10068>
   2127c:	ldr	r3, [r1, #4]
   21280:	cmp	r2, #0
   21284:	cmpne	r3, #0
   21288:	bgt	212c0 <__assert_fail@plt+0x10094>
   2128c:	cmp	r3, #0
   21290:	bgt	2139c <__assert_fail@plt+0x10170>
   21294:	cmp	r2, #0
   21298:	beq	212a8 <__assert_fail@plt+0x1007c>
   2129c:	ldr	r3, [r2, #4]
   212a0:	cmp	r3, #0
   212a4:	bgt	21398 <__assert_fail@plt+0x1016c>
   212a8:	mov	r3, #0
   212ac:	str	r3, [r0]
   212b0:	str	r3, [r0, #4]
   212b4:	str	r3, [r0, #8]
   212b8:	mov	r0, r3
   212bc:	bx	lr
   212c0:	ldr	ip, [r2, #4]
   212c4:	cmp	ip, #0
   212c8:	ble	2139c <__assert_fail@plt+0x10170>
   212cc:	add	r3, r3, ip
   212d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   212d4:	mov	r4, r2
   212d8:	strd	r6, [sp, #8]
   212dc:	mov	r6, r0
   212e0:	lsl	r0, r3, #2
   212e4:	strd	r8, [sp, #16]
   212e8:	mov	r5, r1
   212ec:	str	sl, [sp, #24]
   212f0:	str	lr, [sp, #28]
   212f4:	str	r3, [r6]
   212f8:	bl	2d378 <__assert_fail@plt+0x1c14c>
   212fc:	cmp	r0, #0
   21300:	str	r0, [r6, #8]
   21304:	beq	213d8 <__assert_fail@plt+0x101ac>
   21308:	mov	r7, #0
   2130c:	mov	lr, r0
   21310:	ldr	r9, [r4, #4]
   21314:	mov	ip, r7
   21318:	mov	r3, r7
   2131c:	ldr	r8, [r5, #4]
   21320:	b	21364 <__assert_fail@plt+0x10138>
   21324:	ldr	r2, [r5, #8]
   21328:	cmp	ip, r9
   2132c:	add	r1, r2, r3, lsl #2
   21330:	bge	213c0 <__assert_fail@plt+0x10194>
   21334:	ldr	r1, [r4, #8]
   21338:	add	r7, r7, #1
   2133c:	ldr	r2, [r2, r3, lsl #2]
   21340:	ldr	r1, [r1, ip, lsl #2]
   21344:	cmp	r2, r1
   21348:	addgt	ip, ip, #1
   2134c:	strgt	r1, [lr]
   21350:	bgt	21360 <__assert_fail@plt+0x10134>
   21354:	add	r3, r3, #1
   21358:	addeq	ip, ip, #1
   2135c:	str	r2, [lr]
   21360:	add	lr, lr, #4
   21364:	cmp	r8, r3
   21368:	bgt	21324 <__assert_fail@plt+0x100f8>
   2136c:	cmp	ip, r9
   21370:	blt	213a0 <__assert_fail@plt+0x10174>
   21374:	mov	r2, #0
   21378:	str	r7, [r6, #4]
   2137c:	ldrd	r4, [sp]
   21380:	mov	r0, r2
   21384:	ldrd	r6, [sp, #8]
   21388:	ldrd	r8, [sp, #16]
   2138c:	ldr	sl, [sp, #24]
   21390:	add	sp, sp, #28
   21394:	pop	{pc}		; (ldr pc, [sp], #4)
   21398:	mov	r1, r2
   2139c:	b	211ec <__assert_fail@plt+0xffc0>
   213a0:	ldr	r1, [r4, #8]
   213a4:	sub	r2, r9, ip
   213a8:	add	r0, r0, r7, lsl #2
   213ac:	add	r7, r7, r2
   213b0:	lsl	r2, r2, #2
   213b4:	add	r1, r1, ip, lsl #2
   213b8:	bl	10fd4 <memcpy@plt>
   213bc:	b	21374 <__assert_fail@plt+0x10148>
   213c0:	sub	r3, r8, r3
   213c4:	mov	r0, lr
   213c8:	lsl	r2, r3, #2
   213cc:	add	r7, r7, r3
   213d0:	bl	10fd4 <memcpy@plt>
   213d4:	b	21374 <__assert_fail@plt+0x10148>
   213d8:	mov	r2, #12
   213dc:	b	2137c <__assert_fail@plt+0x10150>
   213e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   213e4:	mov	ip, #0
   213e8:	ldr	r4, [r2, #4]
   213ec:	strd	r6, [sp, #8]
   213f0:	strd	r8, [sp, #16]
   213f4:	strd	sl, [sp, #24]
   213f8:	str	lr, [sp, #32]
   213fc:	sub	sp, sp, #28
   21400:	cmp	r4, ip
   21404:	str	ip, [r0]
   21408:	beq	214b0 <__assert_fail@plt+0x10284>
   2140c:	add	r7, r3, r4
   21410:	ble	2142c <__assert_fail@plt+0x10200>
   21414:	ldr	ip, [r2, #8]
   21418:	add	r4, ip, r4, lsl #2
   2141c:	ldr	lr, [ip], #4
   21420:	cmp	r4, ip
   21424:	add	r7, r7, lr
   21428:	bne	2141c <__assert_fail@plt+0x101f0>
   2142c:	mov	sl, r3
   21430:	ldr	r3, [r1, #68]	; 0x44
   21434:	mov	r8, r2
   21438:	mov	r9, r1
   2143c:	str	r0, [sp, #20]
   21440:	ldr	r2, [r1, #32]
   21444:	and	r3, r3, r7
   21448:	add	r3, r3, r3, lsl #1
   2144c:	lsl	r3, r3, #2
   21450:	ldr	fp, [r2, r3]
   21454:	add	r3, r2, r3
   21458:	cmp	fp, #0
   2145c:	ble	214d0 <__assert_fail@plt+0x102a4>
   21460:	ldr	r6, [r3, #8]
   21464:	mov	r5, #0
   21468:	sub	r6, r6, #4
   2146c:	b	21478 <__assert_fail@plt+0x1024c>
   21470:	cmp	r5, fp
   21474:	beq	214d0 <__assert_fail@plt+0x102a4>
   21478:	ldr	r4, [r6, #4]!
   2147c:	add	r5, r5, #1
   21480:	ldr	r3, [r4]
   21484:	cmp	r3, r7
   21488:	bne	21470 <__assert_fail@plt+0x10244>
   2148c:	ldrb	r3, [r4, #52]	; 0x34
   21490:	and	r3, r3, #15
   21494:	cmp	r3, sl
   21498:	bne	21470 <__assert_fail@plt+0x10244>
   2149c:	mov	r1, r8
   214a0:	ldr	r0, [r4, #40]	; 0x28
   214a4:	bl	1e8c4 <__assert_fail@plt+0xd698>
   214a8:	cmp	r0, #0
   214ac:	beq	21470 <__assert_fail@plt+0x10244>
   214b0:	mov	r0, r4
   214b4:	add	sp, sp, #28
   214b8:	ldrd	r4, [sp]
   214bc:	ldrd	r6, [sp, #8]
   214c0:	ldrd	r8, [sp, #16]
   214c4:	ldrd	sl, [sp, #24]
   214c8:	add	sp, sp, #32
   214cc:	pop	{pc}		; (ldr pc, [sp], #4)
   214d0:	mov	r1, #1
   214d4:	mov	r0, #56	; 0x38
   214d8:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   214dc:	subs	r4, r0, #0
   214e0:	beq	21658 <__assert_fail@plt+0x1042c>
   214e4:	add	fp, r4, #4
   214e8:	mov	r1, r8
   214ec:	mov	r0, fp
   214f0:	bl	211ec <__assert_fail@plt+0xffc0>
   214f4:	subs	r3, r0, #0
   214f8:	bne	216bc <__assert_fail@plt+0x10490>
   214fc:	ldrb	r2, [r4, #52]	; 0x34
   21500:	str	fp, [r4, #40]	; 0x28
   21504:	ldr	lr, [r8, #4]
   21508:	bfi	r2, sl, #0, #4
   2150c:	cmp	lr, #0
   21510:	strb	r2, [r4, #52]	; 0x34
   21514:	ble	21638 <__assert_fail@plt+0x1040c>
   21518:	add	r2, r4, #12
   2151c:	mov	r6, r3
   21520:	str	r2, [sp, #4]
   21524:	add	r2, r4, #8
   21528:	str	r2, [sp, #8]
   2152c:	and	r2, sl, #4
   21530:	str	r7, [sp, #16]
   21534:	mov	r7, r3
   21538:	str	r2, [sp, #12]
   2153c:	ldr	r1, [r8, #8]
   21540:	ldr	r2, [r9]
   21544:	ldr	r1, [r1, r6, lsl #2]
   21548:	add	r2, r2, r1, lsl #3
   2154c:	ldr	r5, [r2, #4]
   21550:	ldrb	r1, [r2, #4]
   21554:	ubfx	r5, r5, #8, #10
   21558:	cmp	r1, #1
   2155c:	cmpeq	r5, #0
   21560:	beq	21628 <__assert_fail@plt+0x103fc>
   21564:	ldrb	ip, [r2, #6]
   21568:	cmp	r1, #2
   2156c:	ldrb	r2, [r4, #52]	; 0x34
   21570:	ubfx	ip, ip, #4, #1
   21574:	ubfx	r0, r2, #5, #1
   21578:	orr	r0, r0, ip
   2157c:	bfi	r2, r0, #5, #1
   21580:	strb	r2, [r4, #52]	; 0x34
   21584:	uxtbeq	r2, r2
   21588:	orreq	r2, r2, #16
   2158c:	strbeq	r2, [r4, #52]	; 0x34
   21590:	beq	215a8 <__assert_fail@plt+0x1037c>
   21594:	cmp	r1, #4
   21598:	bne	215a8 <__assert_fail@plt+0x1037c>
   2159c:	ldrb	r2, [r4, #52]	; 0x34
   215a0:	orr	r2, r2, #64	; 0x40
   215a4:	strb	r2, [r4, #52]	; 0x34
   215a8:	cmp	r5, #0
   215ac:	beq	21628 <__assert_fail@plt+0x103fc>
   215b0:	ldr	r2, [r4, #40]	; 0x28
   215b4:	cmp	fp, r2
   215b8:	beq	21688 <__assert_fail@plt+0x1045c>
   215bc:	tst	r5, #1
   215c0:	beq	21674 <__assert_fail@plt+0x10448>
   215c4:	tst	sl, #1
   215c8:	beq	215f8 <__assert_fail@plt+0x103cc>
   215cc:	tst	r5, #2
   215d0:	bne	215f8 <__assert_fail@plt+0x103cc>
   215d4:	tst	r5, #16
   215d8:	beq	215e4 <__assert_fail@plt+0x103b8>
   215dc:	tst	sl, #2
   215e0:	beq	215f8 <__assert_fail@plt+0x103cc>
   215e4:	tst	r5, #64	; 0x40
   215e8:	beq	2166c <__assert_fail@plt+0x10440>
   215ec:	ldr	r3, [sp, #12]
   215f0:	cmp	r3, #0
   215f4:	bne	2166c <__assert_fail@plt+0x10440>
   215f8:	subs	r2, r6, r7
   215fc:	bmi	21620 <__assert_fail@plt+0x103f4>
   21600:	ldr	r1, [r4, #8]
   21604:	cmp	r2, r1
   21608:	bge	21620 <__assert_fail@plt+0x103f4>
   2160c:	sub	ip, r1, #1
   21610:	ldr	r1, [sp, #4]
   21614:	str	ip, [r4, #8]
   21618:	ldr	r0, [sp, #8]
   2161c:	bl	20764 <__assert_fail@plt+0xf538>
   21620:	ldr	lr, [r8, #4]
   21624:	add	r7, r7, #1
   21628:	add	r6, r6, #1
   2162c:	cmp	r6, lr
   21630:	blt	2153c <__assert_fail@plt+0x10310>
   21634:	ldr	r7, [sp, #16]
   21638:	mov	r2, r7
   2163c:	mov	r0, r9
   21640:	mov	r1, r4
   21644:	bl	1ef50 <__assert_fail@plt+0xdd24>
   21648:	cmp	r0, #0
   2164c:	beq	214b0 <__assert_fail@plt+0x10284>
   21650:	mov	r0, r4
   21654:	bl	1fc98 <__assert_fail@plt+0xea6c>
   21658:	ldr	r2, [sp, #20]
   2165c:	mov	r3, #12
   21660:	mov	r4, #0
   21664:	str	r3, [r2]
   21668:	b	214b0 <__assert_fail@plt+0x10284>
   2166c:	ldr	lr, [r8, #4]
   21670:	b	21628 <__assert_fail@plt+0x103fc>
   21674:	tst	r5, #2
   21678:	beq	215d4 <__assert_fail@plt+0x103a8>
   2167c:	tst	sl, #1
   21680:	beq	215d4 <__assert_fail@plt+0x103a8>
   21684:	b	215f8 <__assert_fail@plt+0x103cc>
   21688:	mov	r0, #12
   2168c:	bl	2d378 <__assert_fail@plt+0x1c14c>
   21690:	subs	r3, r0, #0
   21694:	beq	21650 <__assert_fail@plt+0x10424>
   21698:	mov	r1, r8
   2169c:	str	r3, [r4, #40]	; 0x28
   216a0:	bl	211ec <__assert_fail@plt+0xffc0>
   216a4:	subs	r7, r0, #0
   216a8:	bne	21650 <__assert_fail@plt+0x10424>
   216ac:	ldrb	r2, [r4, #52]	; 0x34
   216b0:	orr	r2, r2, #128	; 0x80
   216b4:	strb	r2, [r4, #52]	; 0x34
   216b8:	b	215bc <__assert_fail@plt+0x10390>
   216bc:	mov	r0, r4
   216c0:	bl	13254 <__assert_fail@plt+0x2028>
   216c4:	b	21658 <__assert_fail@plt+0x1042c>
   216c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   216cc:	mov	r3, #0
   216d0:	strd	r6, [sp, #8]
   216d4:	ldr	r6, [r2, #4]
   216d8:	strd	r8, [sp, #16]
   216dc:	strd	sl, [sp, #24]
   216e0:	str	lr, [sp, #32]
   216e4:	sub	sp, sp, #4
   216e8:	str	r3, [r0]
   216ec:	cmp	r6, r3
   216f0:	beq	218d8 <__assert_fail@plt+0x106ac>
   216f4:	ble	21710 <__assert_fail@plt+0x104e4>
   216f8:	ldr	r3, [r2, #8]
   216fc:	add	lr, r3, r6, lsl #2
   21700:	ldr	ip, [r3], #4
   21704:	cmp	lr, r3
   21708:	add	r6, r6, ip
   2170c:	bne	21700 <__assert_fail@plt+0x104d4>
   21710:	ldr	r3, [r1, #68]	; 0x44
   21714:	mov	sl, r2
   21718:	mov	r8, r1
   2171c:	mov	r9, r0
   21720:	ldr	r2, [r1, #32]
   21724:	and	r3, r3, r6
   21728:	add	r3, r3, r3, lsl #1
   2172c:	lsl	r3, r3, #2
   21730:	ldr	fp, [r2, r3]
   21734:	add	r3, r2, r3
   21738:	cmp	fp, #0
   2173c:	ble	2177c <__assert_fail@plt+0x10550>
   21740:	ldr	r7, [r3, #8]
   21744:	mov	r5, #0
   21748:	sub	r7, r7, #4
   2174c:	ldr	r4, [r7, #4]!
   21750:	mov	r1, sl
   21754:	add	r5, r5, #1
   21758:	ldr	r3, [r4]
   2175c:	add	r0, r4, #4
   21760:	cmp	r3, r6
   21764:	bne	21774 <__assert_fail@plt+0x10548>
   21768:	bl	1e8c4 <__assert_fail@plt+0xd698>
   2176c:	cmp	r0, #0
   21770:	bne	21878 <__assert_fail@plt+0x1064c>
   21774:	cmp	fp, r5
   21778:	bne	2174c <__assert_fail@plt+0x10520>
   2177c:	mov	r1, #1
   21780:	mov	r0, #56	; 0x38
   21784:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   21788:	subs	r4, r0, #0
   2178c:	beq	218c8 <__assert_fail@plt+0x1069c>
   21790:	add	r7, r4, #4
   21794:	mov	r1, sl
   21798:	mov	r0, r7
   2179c:	bl	211ec <__assert_fail@plt+0xffc0>
   217a0:	cmp	r0, #0
   217a4:	bne	218c0 <__assert_fail@plt+0x10694>
   217a8:	ldr	r5, [sl, #4]
   217ac:	str	r7, [r4, #40]	; 0x28
   217b0:	cmp	r5, #0
   217b4:	ble	21860 <__assert_fail@plt+0x10634>
   217b8:	ldr	r1, [sl, #8]
   217bc:	mov	sl, #65280	; 0xff00
   217c0:	movt	sl, #3
   217c4:	ldr	r7, [r8]
   217c8:	add	r5, r1, r5, lsl #2
   217cc:	b	21810 <__assert_fail@plt+0x105e4>
   217d0:	ldrb	r2, [r4, #52]	; 0x34
   217d4:	cmp	r0, #2
   217d8:	ldrb	lr, [r3, #6]
   217dc:	ubfx	ip, r2, #5, #1
   217e0:	ubfx	lr, lr, #4, #1
   217e4:	orr	ip, ip, lr
   217e8:	bfi	r2, ip, #5, #1
   217ec:	strb	r2, [r4, #52]	; 0x34
   217f0:	beq	21898 <__assert_fail@plt+0x1066c>
   217f4:	cmp	r0, #4
   217f8:	bne	218a8 <__assert_fail@plt+0x1067c>
   217fc:	ldrb	r3, [r4, #52]	; 0x34
   21800:	orr	r3, r3, #64	; 0x40
   21804:	strb	r3, [r4, #52]	; 0x34
   21808:	cmp	r5, r1
   2180c:	beq	21860 <__assert_fail@plt+0x10634>
   21810:	ldr	r3, [r1], #4
   21814:	add	r3, r7, r3, lsl #3
   21818:	ldrb	r0, [r3, #4]
   2181c:	cmp	r0, #1
   21820:	bne	217d0 <__assert_fail@plt+0x105a4>
   21824:	ldr	r2, [r3, #4]
   21828:	tst	sl, r2
   2182c:	beq	21808 <__assert_fail@plt+0x105dc>
   21830:	ldrb	r2, [r3, #6]
   21834:	ldrb	r3, [r4, #52]	; 0x34
   21838:	ubfx	r0, r2, #4, #1
   2183c:	ubfx	r2, r3, #5, #1
   21840:	orr	r2, r2, r0
   21844:	bfi	r3, r2, #5, #1
   21848:	strb	r3, [r4, #52]	; 0x34
   2184c:	ldrb	r3, [r4, #52]	; 0x34
   21850:	cmp	r5, r1
   21854:	orr	r3, r3, #128	; 0x80
   21858:	strb	r3, [r4, #52]	; 0x34
   2185c:	bne	21810 <__assert_fail@plt+0x105e4>
   21860:	mov	r2, r6
   21864:	mov	r0, r8
   21868:	mov	r1, r4
   2186c:	bl	1ef50 <__assert_fail@plt+0xdd24>
   21870:	cmp	r0, #0
   21874:	bne	218e0 <__assert_fail@plt+0x106b4>
   21878:	mov	r0, r4
   2187c:	add	sp, sp, #4
   21880:	ldrd	r4, [sp]
   21884:	ldrd	r6, [sp, #8]
   21888:	ldrd	r8, [sp, #16]
   2188c:	ldrd	sl, [sp, #24]
   21890:	add	sp, sp, #32
   21894:	pop	{pc}		; (ldr pc, [sp], #4)
   21898:	uxtb	r3, r2
   2189c:	orr	r3, r3, #16
   218a0:	strb	r3, [r4, #52]	; 0x34
   218a4:	b	21808 <__assert_fail@plt+0x105dc>
   218a8:	cmp	r0, #12
   218ac:	beq	2184c <__assert_fail@plt+0x10620>
   218b0:	ldr	r3, [r3, #4]
   218b4:	tst	sl, r3
   218b8:	beq	21808 <__assert_fail@plt+0x105dc>
   218bc:	b	2184c <__assert_fail@plt+0x10620>
   218c0:	mov	r0, r4
   218c4:	bl	13254 <__assert_fail@plt+0x2028>
   218c8:	mov	r3, #12
   218cc:	mov	r4, #0
   218d0:	str	r3, [r9]
   218d4:	b	21878 <__assert_fail@plt+0x1064c>
   218d8:	mov	r4, r6
   218dc:	b	21878 <__assert_fail@plt+0x1064c>
   218e0:	mov	r0, r4
   218e4:	bl	1fc98 <__assert_fail@plt+0xea6c>
   218e8:	b	218c8 <__assert_fail@plt+0x1069c>
   218ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   218f0:	strd	r6, [sp, #8]
   218f4:	subs	r7, r3, #0
   218f8:	subgt	r4, r1, #4
   218fc:	subgt	r6, r2, #4
   21900:	str	r8, [sp, #16]
   21904:	movgt	r5, #0
   21908:	movgt	r8, r0
   2190c:	str	lr, [sp, #20]
   21910:	sub	sp, sp, #16
   21914:	bgt	21944 <__assert_fail@plt+0x10718>
   21918:	b	219a8 <__assert_fail@plt+0x1077c>
   2191c:	bl	216c8 <__assert_fail@plt+0x1049c>
   21920:	str	r0, [r4]
   21924:	ldr	r0, [sp, #12]
   21928:	bl	13254 <__assert_fail@plt+0x2028>
   2192c:	ldr	r3, [sp]
   21930:	cmp	r3, #0
   21934:	bne	2198c <__assert_fail@plt+0x10760>
   21938:	add	r5, r5, #1
   2193c:	cmp	r7, r5
   21940:	beq	219a8 <__assert_fail@plt+0x1077c>
   21944:	ldr	r1, [r4, #4]!
   21948:	ldr	ip, [r6, #4]!
   2194c:	cmp	r1, #0
   21950:	streq	ip, [r4]
   21954:	beq	21938 <__assert_fail@plt+0x1070c>
   21958:	cmp	ip, #0
   2195c:	add	r2, ip, #4
   21960:	add	r1, r1, #4
   21964:	add	r0, sp, #4
   21968:	beq	21938 <__assert_fail@plt+0x1070c>
   2196c:	bl	21274 <__assert_fail@plt+0x10048>
   21970:	mov	r3, r0
   21974:	add	r2, sp, #4
   21978:	cmp	r3, #0
   2197c:	mov	r1, r8
   21980:	mov	r0, sp
   21984:	str	r3, [sp]
   21988:	beq	2191c <__assert_fail@plt+0x106f0>
   2198c:	mov	r0, r3
   21990:	add	sp, sp, #16
   21994:	ldrd	r4, [sp]
   21998:	ldrd	r6, [sp, #8]
   2199c:	ldr	r8, [sp, #16]
   219a0:	add	sp, sp, #20
   219a4:	pop	{pc}		; (ldr pc, [sp], #4)
   219a8:	mov	r3, #0
   219ac:	b	2198c <__assert_fail@plt+0x10760>
   219b0:	ldrb	r2, [r1, #24]
   219b4:	cmp	r2, #16
   219b8:	bne	219d8 <__assert_fail@plt+0x107ac>
   219bc:	ldr	r3, [r1, #4]
   219c0:	mov	r0, #0
   219c4:	ldr	r2, [r3, #12]
   219c8:	ldr	r3, [r3, #28]
   219cc:	str	r2, [r1, #12]
   219d0:	str	r3, [r1, #28]
   219d4:	bx	lr
   219d8:	strd	r4, [sp, #-16]!
   219dc:	mov	r4, r1
   219e0:	add	r3, r1, #20
   219e4:	ldm	r3, {r1, r2}
   219e8:	mov	r5, r0
   219ec:	str	r6, [sp, #8]
   219f0:	str	lr, [sp, #12]
   219f4:	str	r4, [r4, #12]
   219f8:	bl	1fa2c <__assert_fail@plt+0xe800>
   219fc:	cmn	r0, #1
   21a00:	mov	r3, r0
   21a04:	str	r0, [r4, #28]
   21a08:	beq	21a48 <__assert_fail@plt+0x1081c>
   21a0c:	ldrb	r2, [r4, #24]
   21a10:	cmp	r2, #12
   21a14:	movne	r0, #0
   21a18:	bne	21a38 <__assert_fail@plt+0x1080c>
   21a1c:	ldr	r2, [r5]
   21a20:	mov	r0, #0
   21a24:	ldr	r1, [r4, #20]
   21a28:	add	r3, r2, r3, lsl #3
   21a2c:	ldr	r2, [r3, #4]
   21a30:	bfi	r2, r1, #8, #10
   21a34:	str	r2, [r3, #4]
   21a38:	ldrd	r4, [sp]
   21a3c:	ldr	r6, [sp, #8]
   21a40:	add	sp, sp, #12
   21a44:	pop	{pc}		; (ldr pc, [sp], #4)
   21a48:	mov	r0, #12
   21a4c:	b	21a38 <__assert_fail@plt+0x1080c>
   21a50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21a54:	strd	r6, [sp, #8]
   21a58:	mov	r6, r0
   21a5c:	ldr	r0, [r0]
   21a60:	str	r8, [sp, #16]
   21a64:	str	lr, [sp, #20]
   21a68:	cmp	r0, #0
   21a6c:	beq	21aa0 <__assert_fail@plt+0x10874>
   21a70:	ldr	r3, [r6, #8]
   21a74:	cmp	r3, #0
   21a78:	beq	21aa0 <__assert_fail@plt+0x10874>
   21a7c:	mov	r4, #0
   21a80:	b	21a88 <__assert_fail@plt+0x1085c>
   21a84:	ldr	r0, [r6]
   21a88:	add	r0, r0, r4, lsl #3
   21a8c:	add	r4, r4, #1
   21a90:	bl	1f9d8 <__assert_fail@plt+0xe7ac>
   21a94:	ldr	r3, [r6, #8]
   21a98:	cmp	r3, r4
   21a9c:	bhi	21a84 <__assert_fail@plt+0x10858>
   21aa0:	ldr	r0, [r6, #12]
   21aa4:	bl	13254 <__assert_fail@plt+0x2028>
   21aa8:	ldr	r3, [r6, #8]
   21aac:	cmp	r3, #0
   21ab0:	movne	r4, #0
   21ab4:	movne	r5, r4
   21ab8:	beq	21b18 <__assert_fail@plt+0x108ec>
   21abc:	ldr	r3, [r6, #24]
   21ac0:	add	r5, r5, #1
   21ac4:	cmp	r3, #0
   21ac8:	add	r2, r3, r4
   21acc:	beq	21ad8 <__assert_fail@plt+0x108ac>
   21ad0:	ldr	r0, [r2, #8]
   21ad4:	bl	13254 <__assert_fail@plt+0x2028>
   21ad8:	ldr	r3, [r6, #28]
   21adc:	cmp	r3, #0
   21ae0:	add	r2, r3, r4
   21ae4:	beq	21af0 <__assert_fail@plt+0x108c4>
   21ae8:	ldr	r0, [r2, #8]
   21aec:	bl	13254 <__assert_fail@plt+0x2028>
   21af0:	ldr	r3, [r6, #20]
   21af4:	cmp	r3, #0
   21af8:	add	r2, r3, r4
   21afc:	beq	21b08 <__assert_fail@plt+0x108dc>
   21b00:	ldr	r0, [r2, #8]
   21b04:	bl	13254 <__assert_fail@plt+0x2028>
   21b08:	ldr	r3, [r6, #8]
   21b0c:	add	r4, r4, #12
   21b10:	cmp	r3, r5
   21b14:	bhi	21abc <__assert_fail@plt+0x10890>
   21b18:	ldr	r0, [r6, #20]
   21b1c:	bl	13254 <__assert_fail@plt+0x2028>
   21b20:	ldr	r0, [r6, #24]
   21b24:	bl	13254 <__assert_fail@plt+0x2028>
   21b28:	ldr	r0, [r6, #28]
   21b2c:	bl	13254 <__assert_fail@plt+0x2028>
   21b30:	ldr	r0, [r6]
   21b34:	bl	13254 <__assert_fail@plt+0x2028>
   21b38:	ldr	r0, [r6, #32]
   21b3c:	cmp	r0, #0
   21b40:	movne	r7, #0
   21b44:	beq	21ba0 <__assert_fail@plt+0x10974>
   21b48:	add	r5, r7, r7, lsl #1
   21b4c:	ldr	r3, [r0, r5, lsl #2]
   21b50:	add	r5, r0, r5, lsl #2
   21b54:	cmp	r3, #0
   21b58:	movgt	r4, #0
   21b5c:	ble	21b7c <__assert_fail@plt+0x10950>
   21b60:	ldr	r3, [r5, #8]
   21b64:	ldr	r0, [r3, r4, lsl #2]
   21b68:	add	r4, r4, #1
   21b6c:	bl	1fc98 <__assert_fail@plt+0xea6c>
   21b70:	ldr	r3, [r5]
   21b74:	cmp	r4, r3
   21b78:	blt	21b60 <__assert_fail@plt+0x10934>
   21b7c:	ldr	r0, [r5, #8]
   21b80:	add	r7, r7, #1
   21b84:	bl	13254 <__assert_fail@plt+0x2028>
   21b88:	ldr	r3, [r6, #68]	; 0x44
   21b8c:	cmp	r3, r7
   21b90:	bcc	21b9c <__assert_fail@plt+0x10970>
   21b94:	ldr	r0, [r6, #32]
   21b98:	b	21b48 <__assert_fail@plt+0x1091c>
   21b9c:	ldr	r0, [r6, #32]
   21ba0:	bl	13254 <__assert_fail@plt+0x2028>
   21ba4:	ldr	r0, [r6, #60]	; 0x3c
   21ba8:	movw	r3, #61300	; 0xef74
   21bac:	movt	r3, #2
   21bb0:	cmp	r0, r3
   21bb4:	beq	21bbc <__assert_fail@plt+0x10990>
   21bb8:	bl	13254 <__assert_fail@plt+0x2028>
   21bbc:	ldr	r0, [r6, #132]	; 0x84
   21bc0:	bl	13254 <__assert_fail@plt+0x2028>
   21bc4:	mov	r0, r6
   21bc8:	ldrd	r4, [sp]
   21bcc:	ldrd	r6, [sp, #8]
   21bd0:	ldr	r8, [sp, #16]
   21bd4:	ldr	lr, [sp, #20]
   21bd8:	add	sp, sp, #24
   21bdc:	b	13254 <__assert_fail@plt+0x2028>
   21be0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21be4:	mov	r5, #0
   21be8:	strd	r6, [sp, #8]
   21bec:	ldr	r7, [r0, #28]
   21bf0:	strd	r8, [sp, #16]
   21bf4:	strd	sl, [sp, #24]
   21bf8:	mov	sl, r1
   21bfc:	add	r1, r1, r1, lsl #1
   21c00:	str	lr, [sp, #32]
   21c04:	sub	sp, sp, #44	; 0x2c
   21c08:	add	r7, r7, r1, lsl #2
   21c0c:	str	r2, [sp, #12]
   21c10:	str	r5, [sp, #28]
   21c14:	str	r5, [sp, #32]
   21c18:	str	r5, [sp, #36]	; 0x24
   21c1c:	ldr	r6, [r7, #4]
   21c20:	str	r3, [sp, #20]
   21c24:	cmp	r6, r5
   21c28:	ble	21e10 <__assert_fail@plt+0x10be4>
   21c2c:	add	r3, r7, #8
   21c30:	mov	r9, r0
   21c34:	str	r3, [sp, #8]
   21c38:	add	r3, r2, #8
   21c3c:	str	r3, [sp, #16]
   21c40:	b	21c94 <__assert_fail@plt+0x10a68>
   21c44:	cmp	r0, #0
   21c48:	bne	21d1c <__assert_fail@plt+0x10af0>
   21c4c:	mov	r2, r3
   21c50:	ldr	r3, [sp, #12]
   21c54:	ldr	r1, [sp, #16]
   21c58:	ldr	r0, [r3, #4]
   21c5c:	bl	205c4 <__assert_fail@plt+0xf398>
   21c60:	cmp	r0, #0
   21c64:	beq	21d1c <__assert_fail@plt+0x10af0>
   21c68:	ldr	r2, [r9, #28]
   21c6c:	add	r0, sp, #28
   21c70:	ldr	r1, [sp, #20]
   21c74:	add	r2, r2, r4
   21c78:	bl	20b48 <__assert_fail@plt+0xf91c>
   21c7c:	cmp	r0, #0
   21c80:	bne	21e00 <__assert_fail@plt+0x10bd4>
   21c84:	ldr	r6, [r7, #4]
   21c88:	add	r5, r5, #1
   21c8c:	cmp	r6, r5
   21c90:	ble	21d4c <__assert_fail@plt+0x10b20>
   21c94:	ldr	r3, [r7, #8]
   21c98:	ldr	r4, [r3, r5, lsl #2]
   21c9c:	cmp	sl, r4
   21ca0:	beq	21c88 <__assert_fail@plt+0x10a5c>
   21ca4:	ldr	r3, [r9]
   21ca8:	add	r3, r3, r4, lsl #3
   21cac:	ldrb	r3, [r3, #4]
   21cb0:	tst	r3, #8
   21cb4:	beq	21c88 <__assert_fail@plt+0x10a5c>
   21cb8:	ldr	r8, [r9, #20]
   21cbc:	add	r4, r4, r4, lsl #1
   21cc0:	mov	r0, r6
   21cc4:	lsl	r4, r4, #2
   21cc8:	ldr	r1, [sp, #8]
   21ccc:	add	r8, r8, r4
   21cd0:	ldr	fp, [r8, #8]
   21cd4:	ldr	r3, [fp]
   21cd8:	mov	r2, r3
   21cdc:	str	r3, [sp, #4]
   21ce0:	bl	205c4 <__assert_fail@plt+0xf398>
   21ce4:	ldr	r2, [r8, #4]
   21ce8:	ldr	r3, [sp, #4]
   21cec:	cmp	r2, #1
   21cf0:	bgt	21c44 <__assert_fail@plt+0x10a18>
   21cf4:	cmp	r0, #0
   21cf8:	moveq	r2, r3
   21cfc:	bne	21c88 <__assert_fail@plt+0x10a5c>
   21d00:	ldr	r3, [sp, #12]
   21d04:	ldr	r1, [sp, #16]
   21d08:	ldr	r0, [r3, #4]
   21d0c:	bl	205c4 <__assert_fail@plt+0xf398>
   21d10:	cmp	r0, #0
   21d14:	beq	21c88 <__assert_fail@plt+0x10a5c>
   21d18:	b	21c68 <__assert_fail@plt+0x10a3c>
   21d1c:	ldr	r8, [fp, #4]
   21d20:	cmp	r8, #0
   21d24:	ble	21c88 <__assert_fail@plt+0x10a5c>
   21d28:	mov	r2, r8
   21d2c:	mov	r0, r6
   21d30:	ldr	r1, [sp, #8]
   21d34:	bl	205c4 <__assert_fail@plt+0xf398>
   21d38:	cmp	r0, #0
   21d3c:	beq	21d00 <__assert_fail@plt+0x10ad4>
   21d40:	add	r5, r5, #1
   21d44:	cmp	r6, r5
   21d48:	bgt	21c94 <__assert_fail@plt+0x10a68>
   21d4c:	cmp	r6, #0
   21d50:	ble	21dd4 <__assert_fail@plt+0x10ba8>
   21d54:	ldr	sl, [sp, #12]
   21d58:	mov	r4, #0
   21d5c:	add	r8, sl, #8
   21d60:	add	r9, sl, #4
   21d64:	ldr	r3, [r7, #8]
   21d68:	add	r1, sp, #36	; 0x24
   21d6c:	ldr	r0, [sp, #32]
   21d70:	ldr	r5, [r3, r4, lsl #2]
   21d74:	add	r4, r4, #1
   21d78:	mov	r2, r5
   21d7c:	bl	205c4 <__assert_fail@plt+0xf398>
   21d80:	cmp	r0, #0
   21d84:	mov	r1, r8
   21d88:	bne	21dcc <__assert_fail@plt+0x10ba0>
   21d8c:	ldr	r5, [sl, #4]
   21d90:	mov	r0, r5
   21d94:	bl	205c4 <__assert_fail@plt+0xf398>
   21d98:	sub	r3, r0, #1
   21d9c:	sub	ip, r5, #1
   21da0:	cmp	r3, r5
   21da4:	mov	r2, r3
   21da8:	movlt	r5, #0
   21dac:	movge	r5, #1
   21db0:	orrs	r3, r5, r3, lsr #31
   21db4:	mov	r1, r8
   21db8:	mov	r0, r9
   21dbc:	bne	21dcc <__assert_fail@plt+0x10ba0>
   21dc0:	str	ip, [sl, #4]
   21dc4:	bl	20764 <__assert_fail@plt+0xf538>
   21dc8:	ldr	r6, [r7, #4]
   21dcc:	cmp	r6, r4
   21dd0:	bgt	21d64 <__assert_fail@plt+0x10b38>
   21dd4:	ldr	r0, [sp, #36]	; 0x24
   21dd8:	mov	r4, #0
   21ddc:	bl	13254 <__assert_fail@plt+0x2028>
   21de0:	mov	r0, r4
   21de4:	add	sp, sp, #44	; 0x2c
   21de8:	ldrd	r4, [sp]
   21dec:	ldrd	r6, [sp, #8]
   21df0:	ldrd	r8, [sp, #16]
   21df4:	ldrd	sl, [sp, #24]
   21df8:	add	sp, sp, #32
   21dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   21e00:	mov	r4, r0
   21e04:	ldr	r0, [sp, #36]	; 0x24
   21e08:	bl	13254 <__assert_fail@plt+0x2028>
   21e0c:	b	21de0 <__assert_fail@plt+0x10bb4>
   21e10:	mov	r0, r5
   21e14:	b	21dd8 <__assert_fail@plt+0x10bac>
   21e18:	ldr	r3, [r0]
   21e1c:	strd	r4, [sp, #-16]!
   21e20:	mov	r5, r0
   21e24:	str	r6, [sp, #8]
   21e28:	str	lr, [sp, #12]
   21e2c:	cmp	r3, #0
   21e30:	ble	21e70 <__assert_fail@plt+0x10c44>
   21e34:	mov	r4, #0
   21e38:	mov	r6, r4
   21e3c:	ldr	r3, [r5, #8]
   21e40:	add	r6, r6, #1
   21e44:	add	r3, r3, r4
   21e48:	ldr	r0, [r3, #20]
   21e4c:	bl	13254 <__assert_fail@plt+0x2028>
   21e50:	ldr	r3, [r5, #8]
   21e54:	add	r3, r3, r4
   21e58:	add	r4, r4, #24
   21e5c:	ldr	r0, [r3, #8]
   21e60:	bl	13254 <__assert_fail@plt+0x2028>
   21e64:	ldr	r3, [r5]
   21e68:	cmp	r6, r3
   21e6c:	blt	21e3c <__assert_fail@plt+0x10c10>
   21e70:	ldr	r0, [r5, #8]
   21e74:	ldrd	r4, [sp]
   21e78:	ldr	r6, [sp, #8]
   21e7c:	ldr	lr, [sp, #12]
   21e80:	add	sp, sp, #16
   21e84:	b	13254 <__assert_fail@plt+0x2028>
   21e88:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21e8c:	strd	r6, [sp, #8]
   21e90:	subs	r6, r1, #0
   21e94:	str	r8, [sp, #16]
   21e98:	str	lr, [sp, #20]
   21e9c:	beq	21f90 <__assert_fail@plt+0x10d64>
   21ea0:	ldr	r2, [r6, #4]
   21ea4:	cmp	r2, #0
   21ea8:	mov	ip, r2
   21eac:	beq	21f90 <__assert_fail@plt+0x10d64>
   21eb0:	ldm	r0, {r1, r3}
   21eb4:	mov	r5, r0
   21eb8:	add	r4, r3, r2, lsl #1
   21ebc:	cmp	r1, r4
   21ec0:	blt	21fcc <__assert_fail@plt+0x10da0>
   21ec4:	cmp	r3, #0
   21ec8:	beq	2200c <__assert_fail@plt+0x10de0>
   21ecc:	sub	r2, r2, #1
   21ed0:	sub	r3, r3, #1
   21ed4:	mvn	r7, r2
   21ed8:	mvn	lr, r3
   21edc:	tst	r7, lr
   21ee0:	bpl	21f20 <__assert_fail@plt+0x10cf4>
   21ee4:	ldr	r1, [r5, #8]
   21ee8:	ldr	r0, [r6, #8]
   21eec:	ldr	ip, [r1, r3, lsl #2]
   21ef0:	ldr	r0, [r0, r2, lsl #2]
   21ef4:	cmp	ip, r0
   21ef8:	beq	21ecc <__assert_fail@plt+0x10ca0>
   21efc:	subge	r3, r3, #1
   21f00:	mvnge	lr, r3
   21f04:	bge	21edc <__assert_fail@plt+0x10cb0>
   21f08:	sub	r2, r2, #1
   21f0c:	sub	r4, r4, #1
   21f10:	mvn	r7, r2
   21f14:	tst	r7, lr
   21f18:	str	r0, [r1, r4, lsl #2]
   21f1c:	bmi	21ee4 <__assert_fail@plt+0x10cb8>
   21f20:	cmp	r2, #0
   21f24:	blt	21f44 <__assert_fail@plt+0x10d18>
   21f28:	ldr	r0, [r5, #8]
   21f2c:	add	r2, r2, #1
   21f30:	sub	r4, r4, r2
   21f34:	lsl	r2, r2, #2
   21f38:	ldr	r1, [r6, #8]
   21f3c:	add	r0, r0, r4, lsl #2
   21f40:	bl	10fd4 <memcpy@plt>
   21f44:	ldr	r3, [r5, #4]
   21f48:	ldr	r0, [r6, #4]
   21f4c:	add	r0, r3, r0, lsl #1
   21f50:	subs	r2, r0, r4
   21f54:	sub	r0, r0, #1
   21f58:	beq	21f90 <__assert_fail@plt+0x10d64>
   21f5c:	ldr	r1, [r5, #8]
   21f60:	add	ip, r3, r2
   21f64:	sub	r3, r3, #1
   21f68:	str	ip, [r5, #4]
   21f6c:	ldr	lr, [r1, r0, lsl #2]
   21f70:	add	r5, r3, r2
   21f74:	ldr	ip, [r1, r3, lsl #2]
   21f78:	cmp	lr, ip
   21f7c:	ble	21fa8 <__assert_fail@plt+0x10d7c>
   21f80:	subs	r2, r2, #1
   21f84:	sub	r0, r0, #1
   21f88:	str	lr, [r1, r5, lsl #2]
   21f8c:	bne	21f6c <__assert_fail@plt+0x10d40>
   21f90:	mov	r0, #0
   21f94:	ldrd	r4, [sp]
   21f98:	ldrd	r6, [sp, #8]
   21f9c:	ldr	r8, [sp, #16]
   21fa0:	add	sp, sp, #20
   21fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   21fa8:	subs	r3, r3, #1
   21fac:	str	ip, [r1, r5, lsl #2]
   21fb0:	bpl	21f6c <__assert_fail@plt+0x10d40>
   21fb4:	mov	r0, r1
   21fb8:	lsl	r2, r2, #2
   21fbc:	add	r1, r1, r4, lsl #2
   21fc0:	bl	10fd4 <memcpy@plt>
   21fc4:	mov	r0, #0
   21fc8:	b	21f94 <__assert_fail@plt+0x10d68>
   21fcc:	add	r2, r2, r1
   21fd0:	ldr	r0, [r0, #8]
   21fd4:	lsl	r1, r2, #3
   21fd8:	lsl	r4, r2, #1
   21fdc:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   21fe0:	cmp	r0, #0
   21fe4:	beq	22028 <__assert_fail@plt+0x10dfc>
   21fe8:	ldr	r3, [r5, #4]
   21fec:	str	r4, [r5]
   21ff0:	str	r0, [r5, #8]
   21ff4:	cmp	r3, #0
   21ff8:	ldreq	ip, [r6, #4]
   21ffc:	beq	22010 <__assert_fail@plt+0x10de4>
   22000:	ldr	r2, [r6, #4]
   22004:	add	r4, r3, r2, lsl #1
   22008:	b	21ecc <__assert_fail@plt+0x10ca0>
   2200c:	ldr	r0, [r0, #8]
   22010:	ldr	r1, [r6, #8]
   22014:	str	ip, [r5, #4]
   22018:	ldr	r2, [r6, #4]
   2201c:	lsl	r2, r2, #2
   22020:	bl	10fd4 <memcpy@plt>
   22024:	b	21f90 <__assert_fail@plt+0x10d64>
   22028:	mov	r0, #12
   2202c:	b	21f94 <__assert_fail@plt+0x10d68>
   22030:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22034:	mov	r4, r2
   22038:	mov	r5, r1
   2203c:	ldr	r2, [r1, #20]
   22040:	mov	r1, #0
   22044:	strd	r6, [sp, #8]
   22048:	add	r7, r4, r4, lsl #1
   2204c:	strd	r8, [sp, #16]
   22050:	mov	r8, r0
   22054:	lsl	r7, r7, #2
   22058:	strd	sl, [sp, #24]
   2205c:	mov	sl, r3
   22060:	str	lr, [sp, #32]
   22064:	sub	sp, sp, #36	; 0x24
   22068:	add	r2, r2, r7
   2206c:	ldr	r3, [r2, #4]
   22070:	str	r1, [sp, #12]
   22074:	add	r3, r3, #1
   22078:	lsl	r0, r3, #2
   2207c:	str	r3, [sp, #8]
   22080:	bl	2d378 <__assert_fail@plt+0x1c14c>
   22084:	cmp	r0, #0
   22088:	str	r0, [sp, #16]
   2208c:	beq	2227c <__assert_fail@plt+0x11050>
   22090:	ldr	lr, [r5]
   22094:	lsl	r6, r4, #3
   22098:	mov	r3, #65280	; 0xff00
   2209c:	movt	r3, #3
   220a0:	mvn	r9, #0
   220a4:	ldr	r2, [sp, #12]
   220a8:	ldr	r1, [r5, #24]
   220ac:	add	ip, lr, r6
   220b0:	str	r4, [r0, r2, lsl #2]
   220b4:	add	r2, r2, #1
   220b8:	ldr	fp, [ip, #4]
   220bc:	add	r0, r1, r7
   220c0:	str	r2, [sp, #12]
   220c4:	str	r9, [r0, #4]
   220c8:	and	r3, r3, fp
   220cc:	cmp	r3, #0
   220d0:	beq	22100 <__assert_fail@plt+0x10ed4>
   220d4:	ldr	r3, [r5, #20]
   220d8:	add	r3, r3, r7
   220dc:	ldr	r2, [r3, #4]
   220e0:	cmp	r2, #0
   220e4:	beq	221cc <__assert_fail@plt+0x10fa0>
   220e8:	ldr	r3, [r3, #8]
   220ec:	ldr	r3, [r3]
   220f0:	add	lr, lr, r3, lsl #3
   220f4:	ldrb	r3, [lr, #6]
   220f8:	tst	r3, #4
   220fc:	beq	22248 <__assert_fail@plt+0x1101c>
   22100:	ldrb	r3, [ip, #4]
   22104:	tst	r3, #8
   22108:	beq	221c8 <__assert_fail@plt+0x10f9c>
   2210c:	ldr	ip, [r5, #20]
   22110:	add	r3, ip, r7
   22114:	ldr	r2, [r3, #4]
   22118:	cmp	r2, #0
   2211c:	movgt	r9, #0
   22120:	movgt	r6, r9
   22124:	bgt	2217c <__assert_fail@plt+0x10f50>
   22128:	b	221c8 <__assert_fail@plt+0x10f9c>
   2212c:	ldrd	r2, [r0]
   22130:	strd	r2, [sp, #20]
   22134:	ldr	r3, [r0, #8]
   22138:	str	r3, [fp, #8]
   2213c:	mov	r1, fp
   22140:	add	r0, sp, #8
   22144:	bl	21e88 <__assert_fail@plt+0x10c5c>
   22148:	cmp	r0, #0
   2214c:	bne	221f4 <__assert_fail@plt+0x10fc8>
   22150:	ldr	r1, [r5, #24]
   22154:	add	r4, r1, r4
   22158:	ldr	r3, [r4, #4]
   2215c:	cmp	r3, #0
   22160:	beq	22210 <__assert_fail@plt+0x10fe4>
   22164:	ldr	ip, [r5, #20]
   22168:	add	r3, ip, r7
   2216c:	add	r6, r6, #1
   22170:	ldr	r2, [r3, #4]
   22174:	cmp	r2, r6
   22178:	ble	22228 <__assert_fail@plt+0x10ffc>
   2217c:	ldr	r3, [r3, #8]
   22180:	add	fp, sp, #20
   22184:	ldr	r2, [r3, r6, lsl #2]
   22188:	add	r4, r2, r2, lsl #1
   2218c:	lsl	r4, r4, #2
   22190:	add	r0, r1, r4
   22194:	ldr	r3, [r0, #4]
   22198:	cmn	r3, #1
   2219c:	moveq	r9, #1
   221a0:	beq	22168 <__assert_fail@plt+0x10f3c>
   221a4:	cmp	r3, #0
   221a8:	bne	2212c <__assert_fail@plt+0x10f00>
   221ac:	add	fp, sp, #20
   221b0:	mov	r1, r5
   221b4:	mov	r0, fp
   221b8:	bl	22030 <__assert_fail@plt+0x10e04>
   221bc:	cmp	r0, #0
   221c0:	beq	2213c <__assert_fail@plt+0x10f10>
   221c4:	b	221f4 <__assert_fail@plt+0x10fc8>
   221c8:	add	r0, r1, r7
   221cc:	ldrd	r2, [sp, #8]
   221d0:	add	ip, sp, #8
   221d4:	strd	r2, [r1, r7]
   221d8:	ldr	r3, [sp, #16]
   221dc:	str	r3, [r0, #8]
   221e0:	ldr	r1, [ip, #8]
   221e4:	mov	r0, #0
   221e8:	ldrd	r2, [sp, #8]
   221ec:	strd	r2, [r8]
   221f0:	str	r1, [r8, #8]
   221f4:	add	sp, sp, #36	; 0x24
   221f8:	ldrd	r4, [sp]
   221fc:	ldrd	r6, [sp, #8]
   22200:	ldrd	r8, [sp, #16]
   22204:	ldrd	sl, [sp, #24]
   22208:	add	sp, sp, #32
   2220c:	pop	{pc}		; (ldr pc, [sp], #4)
   22210:	ldr	r0, [sp, #28]
   22214:	mov	r9, #1
   22218:	bl	13254 <__assert_fail@plt+0x2028>
   2221c:	ldr	ip, [r5, #20]
   22220:	ldr	r1, [r5, #24]
   22224:	b	22168 <__assert_fail@plt+0x10f3c>
   22228:	eor	sl, sl, #1
   2222c:	add	r0, r1, r7
   22230:	tst	r9, sl
   22234:	beq	221cc <__assert_fail@plt+0x10fa0>
   22238:	mov	r3, #0
   2223c:	add	ip, sp, #8
   22240:	str	r3, [r0, #4]
   22244:	b	221e0 <__assert_fail@plt+0x10fb4>
   22248:	ubfx	fp, fp, #8, #10
   2224c:	mov	r3, r4
   22250:	mov	r2, r4
   22254:	mov	r1, r4
   22258:	mov	r0, r5
   2225c:	str	fp, [sp]
   22260:	bl	20134 <__assert_fail@plt+0xef08>
   22264:	cmp	r0, #0
   22268:	bne	221f4 <__assert_fail@plt+0x10fc8>
   2226c:	ldr	ip, [r5]
   22270:	ldr	r1, [r5, #24]
   22274:	add	ip, ip, r6
   22278:	b	22100 <__assert_fail@plt+0x10ed4>
   2227c:	mov	r0, #12
   22280:	b	221f4 <__assert_fail@plt+0x10fc8>
   22284:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22288:	mov	r5, r2
   2228c:	mov	r4, r3
   22290:	strd	r6, [sp, #8]
   22294:	mov	r6, #0
   22298:	mov	r7, r0
   2229c:	strd	r8, [sp, #16]
   222a0:	mov	r8, r1
   222a4:	ldr	r1, [r1, #4]
   222a8:	strd	sl, [sp, #24]
   222ac:	str	lr, [sp, #32]
   222b0:	sub	sp, sp, #28
   222b4:	lsl	r0, r1, #2
   222b8:	str	r1, [sp, #12]
   222bc:	str	r6, [sp, #16]
   222c0:	bl	2d378 <__assert_fail@plt+0x1c14c>
   222c4:	cmp	r0, r6
   222c8:	str	r0, [sp, #20]
   222cc:	beq	223cc <__assert_fail@plt+0x111a0>
   222d0:	ldr	r3, [r8, #4]
   222d4:	add	r9, sp, #12
   222d8:	cmp	r3, r6
   222dc:	ble	22374 <__assert_fail@plt+0x11148>
   222e0:	ldr	r3, [r8, #8]
   222e4:	ldr	r1, [r7, #24]
   222e8:	ldr	r2, [r3, r6, lsl #2]
   222ec:	add	r3, r2, r2, lsl #1
   222f0:	add	r1, r1, r3, lsl #2
   222f4:	ldr	fp, [r1, #4]
   222f8:	cmp	fp, #0
   222fc:	ble	22394 <__assert_fail@plt+0x11168>
   22300:	ldr	ip, [r1, #8]
   22304:	mov	r3, #0
   22308:	ldr	sl, [r7]
   2230c:	sub	ip, ip, #4
   22310:	b	2231c <__assert_fail@plt+0x110f0>
   22314:	cmp	fp, r3
   22318:	beq	22394 <__assert_fail@plt+0x11168>
   2231c:	ldr	r0, [ip, #4]!
   22320:	add	r3, r3, #1
   22324:	add	lr, sl, r0, lsl #3
   22328:	ldrb	lr, [lr, #4]
   2232c:	cmp	r4, lr
   22330:	bne	22314 <__assert_fail@plt+0x110e8>
   22334:	ldr	lr, [sl, r0, lsl #3]
   22338:	cmp	r5, lr
   2233c:	bne	22314 <__assert_fail@plt+0x110e8>
   22340:	cmn	r0, #1
   22344:	beq	22394 <__assert_fail@plt+0x11168>
   22348:	mov	r3, r5
   2234c:	mov	r1, r9
   22350:	str	r4, [sp]
   22354:	mov	r0, r7
   22358:	bl	2064c <__assert_fail@plt+0xf420>
   2235c:	subs	sl, r0, #0
   22360:	bne	223a4 <__assert_fail@plt+0x11178>
   22364:	ldr	r3, [r8, #4]
   22368:	add	r6, r6, #1
   2236c:	cmp	r3, r6
   22370:	bgt	222e0 <__assert_fail@plt+0x110b4>
   22374:	ldr	r0, [r8, #8]
   22378:	mov	sl, #0
   2237c:	bl	13254 <__assert_fail@plt+0x2028>
   22380:	ldr	r1, [r9, #8]
   22384:	ldrd	r2, [sp, #12]
   22388:	strd	r2, [r8]
   2238c:	str	r1, [r8, #8]
   22390:	b	223ac <__assert_fail@plt+0x11180>
   22394:	mov	r0, r9
   22398:	bl	21e88 <__assert_fail@plt+0x10c5c>
   2239c:	subs	sl, r0, #0
   223a0:	beq	22364 <__assert_fail@plt+0x11138>
   223a4:	ldr	r0, [sp, #20]
   223a8:	bl	13254 <__assert_fail@plt+0x2028>
   223ac:	mov	r0, sl
   223b0:	add	sp, sp, #28
   223b4:	ldrd	r4, [sp]
   223b8:	ldrd	r6, [sp, #8]
   223bc:	ldrd	r8, [sp, #16]
   223c0:	ldrd	sl, [sp, #24]
   223c4:	add	sp, sp, #32
   223c8:	pop	{pc}		; (ldr pc, [sp], #4)
   223cc:	mov	sl, #12
   223d0:	b	223ac <__assert_fail@plt+0x11180>
   223d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   223d8:	mov	r5, #0
   223dc:	strd	r6, [sp, #8]
   223e0:	ldr	r7, [r0, #108]	; 0x6c
   223e4:	strd	r8, [sp, #16]
   223e8:	strd	sl, [sp, #24]
   223ec:	str	lr, [sp, #32]
   223f0:	sub	sp, sp, #36	; 0x24
   223f4:	mov	r4, r7
   223f8:	cmp	r5, r4
   223fc:	bge	22458 <__assert_fail@plt+0x1122c>
   22400:	add	lr, r5, r4
   22404:	ldr	r6, [r0, #116]	; 0x74
   22408:	add	lr, lr, lr, lsr #31
   2240c:	asr	lr, lr, #1
   22410:	add	ip, lr, lr, lsl #1
   22414:	add	ip, r6, ip, lsl #3
   22418:	ldr	ip, [ip, #4]
   2241c:	cmp	r2, ip
   22420:	ble	22448 <__assert_fail@plt+0x1121c>
   22424:	b	22684 <__assert_fail@plt+0x11458>
   22428:	asr	ip, ip, #1
   2242c:	add	r4, ip, ip, lsl #1
   22430:	mov	r8, ip
   22434:	add	r4, r6, r4, lsl #3
   22438:	ldr	r4, [r4, #4]
   2243c:	cmp	r2, r4
   22440:	bgt	2268c <__assert_fail@plt+0x11460>
   22444:	mov	lr, ip
   22448:	add	ip, lr, r5
   2244c:	cmp	lr, r5
   22450:	add	ip, ip, ip, lsr #31
   22454:	bgt	22428 <__assert_fail@plt+0x111fc>
   22458:	cmp	r7, r5
   2245c:	ble	22698 <__assert_fail@plt+0x1146c>
   22460:	ldr	r4, [r0, #116]	; 0x74
   22464:	add	ip, r5, r5, lsl #1
   22468:	cmn	r5, #1
   2246c:	movne	r5, #0
   22470:	moveq	r5, #1
   22474:	lsl	ip, ip, #3
   22478:	add	lr, r4, ip
   2247c:	ldr	lr, [lr, #4]
   22480:	cmp	lr, r2
   22484:	orrne	r5, r5, #1
   22488:	cmp	r5, #0
   2248c:	bne	22698 <__assert_fail@plt+0x1146c>
   22490:	ldr	sl, [r0, #84]	; 0x54
   22494:	mov	r6, r2
   22498:	mov	r7, r0
   2249c:	add	r9, r1, #8
   224a0:	str	r1, [sp]
   224a4:	str	r3, [sp, #12]
   224a8:	add	r3, ip, #24
   224ac:	str	r3, [sp, #8]
   224b0:	ldr	r3, [sp, #8]
   224b4:	add	r4, r4, r3
   224b8:	b	2256c <__assert_fail@plt+0x11340>
   224bc:	ldr	r3, [r7, #100]	; 0x64
   224c0:	ldr	r2, [sl, #12]
   224c4:	ldr	fp, [r3, r5, lsl #2]
   224c8:	ldr	r8, [r2, r8, lsl #2]
   224cc:	cmp	fp, #0
   224d0:	beq	22654 <__assert_fail@plt+0x11428>
   224d4:	mov	r2, r8
   224d8:	add	r1, fp, #12
   224dc:	ldr	r0, [fp, #8]
   224e0:	bl	205c4 <__assert_fail@plt+0xf398>
   224e4:	cmp	r0, #0
   224e8:	bne	2255c <__assert_fail@plt+0x11330>
   224ec:	add	r2, sp, #20
   224f0:	add	r1, fp, #4
   224f4:	mov	r0, r2
   224f8:	str	r2, [sp, #4]
   224fc:	bl	211ec <__assert_fail@plt+0xffc0>
   22500:	ldr	r2, [sp, #4]
   22504:	mov	r1, r8
   22508:	str	r0, [sp, #16]
   2250c:	mov	r0, r2
   22510:	bl	1fff0 <__assert_fail@plt+0xedc4>
   22514:	eor	r0, r0, #1
   22518:	ldr	r2, [sp, #4]
   2251c:	ldr	r3, [sp, #16]
   22520:	cmp	r3, #0
   22524:	orrne	r0, r0, #1
   22528:	tst	r0, #255	; 0xff
   2252c:	bne	226c8 <__assert_fail@plt+0x1149c>
   22530:	ldr	r8, [r7, #100]	; 0x64
   22534:	mov	r1, sl
   22538:	add	r0, sp, #16
   2253c:	bl	216c8 <__assert_fail@plt+0x1049c>
   22540:	str	r0, [r8, r5, lsl #2]
   22544:	ldr	r0, [sp, #28]
   22548:	bl	13254 <__assert_fail@plt+0x2028>
   2254c:	ldr	r3, [r7, #100]	; 0x64
   22550:	ldr	r3, [r3, r5, lsl #2]
   22554:	cmp	r3, #0
   22558:	beq	226b8 <__assert_fail@plt+0x1148c>
   2255c:	add	r4, r4, #24
   22560:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   22564:	cmp	r3, #0
   22568:	beq	22698 <__assert_fail@plt+0x1146c>
   2256c:	ldr	r3, [sp]
   22570:	mov	r1, r9
   22574:	ldr	r8, [r4, #-24]	; 0xffffffe8
   22578:	ldr	fp, [r3, #4]
   2257c:	mov	r2, r8
   22580:	mov	r0, fp
   22584:	bl	205c4 <__assert_fail@plt+0xf398>
   22588:	cmp	r0, #0
   2258c:	beq	2255c <__assert_fail@plt+0x11330>
   22590:	ldr	r2, [r4, #-16]
   22594:	ldr	r5, [r4, #-12]
   22598:	add	r5, r6, r5
   2259c:	sub	r5, r5, r2
   225a0:	cmp	r6, r5
   225a4:	bne	224bc <__assert_fail@plt+0x11290>
   225a8:	ldr	r2, [sl, #20]
   225ac:	add	r8, r8, r8, lsl #1
   225b0:	mov	r0, fp
   225b4:	mov	r1, r9
   225b8:	add	r8, r2, r8, lsl #2
   225bc:	ldr	r3, [r8, #8]
   225c0:	ldr	r5, [r3]
   225c4:	mov	r2, r5
   225c8:	bl	205c4 <__assert_fail@plt+0xf398>
   225cc:	cmp	r0, #0
   225d0:	bne	2255c <__assert_fail@plt+0x11330>
   225d4:	mov	r3, #1
   225d8:	mov	fp, r0
   225dc:	mov	r0, #4
   225e0:	add	r4, sp, #20
   225e4:	str	r3, [sp, #20]
   225e8:	str	r3, [sp, #24]
   225ec:	bl	2d378 <__assert_fail@plt+0x1c14c>
   225f0:	cmp	r0, #0
   225f4:	mov	r1, r4
   225f8:	str	r0, [sp, #28]
   225fc:	ldr	r2, [sp, #12]
   22600:	streq	fp, [sp, #20]
   22604:	streq	fp, [sp, #24]
   22608:	moveq	fp, #12
   2260c:	strne	r5, [r0]
   22610:	mov	r0, sl
   22614:	ldr	r3, [sp, #72]	; 0x48
   22618:	str	fp, [sp, #16]
   2261c:	bl	22284 <__assert_fail@plt+0x11058>
   22620:	mov	r5, r0
   22624:	mov	r1, r4
   22628:	ldr	r0, [sp]
   2262c:	bl	21e88 <__assert_fail@plt+0x10c5c>
   22630:	mov	r4, r0
   22634:	ldr	r0, [sp, #28]
   22638:	bl	13254 <__assert_fail@plt+0x2028>
   2263c:	ldr	r0, [sp, #16]
   22640:	orr	r3, r5, r4
   22644:	orrs	r3, r3, r0
   22648:	bne	226e4 <__assert_fail@plt+0x114b8>
   2264c:	ldr	r4, [r7, #116]	; 0x74
   22650:	b	224b0 <__assert_fail@plt+0x11284>
   22654:	mov	r3, #1
   22658:	mov	r0, #4
   2265c:	str	r3, [sp, #20]
   22660:	str	r3, [sp, #24]
   22664:	bl	2d378 <__assert_fail@plt+0x1c14c>
   22668:	cmp	r0, #0
   2266c:	str	r0, [sp, #28]
   22670:	beq	226dc <__assert_fail@plt+0x114b0>
   22674:	add	r2, sp, #20
   22678:	str	r8, [r0]
   2267c:	str	fp, [sp, #16]
   22680:	b	22530 <__assert_fail@plt+0x11304>
   22684:	mov	r8, lr
   22688:	mov	lr, r4
   2268c:	add	r5, r8, #1
   22690:	mov	r4, lr
   22694:	b	223f8 <__assert_fail@plt+0x111cc>
   22698:	mov	r0, #0
   2269c:	add	sp, sp, #36	; 0x24
   226a0:	ldrd	r4, [sp]
   226a4:	ldrd	r6, [sp, #8]
   226a8:	ldrd	r8, [sp, #16]
   226ac:	ldrd	sl, [sp, #24]
   226b0:	add	sp, sp, #32
   226b4:	pop	{pc}		; (ldr pc, [sp], #4)
   226b8:	ldr	r0, [sp, #16]
   226bc:	cmp	r0, #0
   226c0:	beq	2255c <__assert_fail@plt+0x11330>
   226c4:	b	2269c <__assert_fail@plt+0x11470>
   226c8:	ldr	r0, [sp, #28]
   226cc:	bl	13254 <__assert_fail@plt+0x2028>
   226d0:	ldr	r0, [sp, #16]
   226d4:	cmp	r0, #0
   226d8:	bne	2269c <__assert_fail@plt+0x11470>
   226dc:	mov	r0, #12
   226e0:	b	2269c <__assert_fail@plt+0x11470>
   226e4:	cmp	r0, #0
   226e8:	bne	2269c <__assert_fail@plt+0x11470>
   226ec:	cmp	r5, #0
   226f0:	movne	r0, r5
   226f4:	moveq	r0, r4
   226f8:	b	2269c <__assert_fail@plt+0x11470>
   226fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22700:	mov	r3, #0
   22704:	strd	r6, [sp, #8]
   22708:	strd	sl, [sp, #24]
   2270c:	ldr	sl, [r1, #8]
   22710:	strd	r8, [sp, #16]
   22714:	str	lr, [sp, #32]
   22718:	sub	sp, sp, #14400	; 0x3840
   2271c:	sub	sp, sp, #44	; 0x2c
   22720:	str	r3, [r1, #44]	; 0x2c
   22724:	add	r8, sp, #104	; 0x68
   22728:	str	r3, [r1, #48]	; 0x30
   2272c:	cmp	sl, r3
   22730:	str	r3, [r8]
   22734:	str	r3, [r8, #4]
   22738:	str	r3, [r8, #8]
   2273c:	str	r3, [r8, #12]
   22740:	str	r3, [r8, #16]
   22744:	str	r1, [sp, #16]
   22748:	str	r3, [r8, #20]
   2274c:	str	r3, [r8, #24]
   22750:	str	r3, [r8, #28]
   22754:	ble	2311c <__assert_fail@plt+0x11ef0>
   22758:	add	r7, sp, #1120	; 0x460
   2275c:	str	r3, [sp, #20]
   22760:	add	r7, r7, #8
   22764:	str	r3, [sp, #24]
   22768:	str	r0, [sp, #36]	; 0x24
   2276c:	str	r3, [sp, #48]	; 0x30
   22770:	str	r3, [sp, #52]	; 0x34
   22774:	ldr	r3, [sp, #16]
   22778:	ldr	r1, [sp, #24]
   2277c:	ldr	r2, [r3, #12]
   22780:	lsl	r3, r1, #2
   22784:	str	r3, [sp, #32]
   22788:	ldr	r3, [sp, #36]	; 0x24
   2278c:	ldr	r1, [r2, r1, lsl #2]
   22790:	ldr	r3, [r3]
   22794:	add	r2, r3, r1, lsl #3
   22798:	ldrb	r6, [r2, #4]
   2279c:	str	r2, [sp, #12]
   227a0:	ldr	r2, [r2, #4]
   227a4:	cmp	r6, #1
   227a8:	ubfx	r2, r2, #8, #10
   227ac:	beq	22a3c <__assert_fail@plt+0x11810>
   227b0:	cmp	r6, #3
   227b4:	beq	22eb4 <__assert_fail@plt+0x11c88>
   227b8:	cmp	r6, #5
   227bc:	beq	22d18 <__assert_fail@plt+0x11aec>
   227c0:	cmp	r6, #7
   227c4:	beq	22e1c <__assert_fail@plt+0x11bf0>
   227c8:	ldr	r3, [sp, #24]
   227cc:	add	r3, r3, #1
   227d0:	cmp	r3, sl
   227d4:	str	r3, [sp, #24]
   227d8:	blt	22774 <__assert_fail@plt+0x11548>
   227dc:	ldr	r3, [sp, #20]
   227e0:	ldr	r9, [sp, #36]	; 0x24
   227e4:	cmp	r3, #0
   227e8:	ble	23118 <__assert_fail@plt+0x11eec>
   227ec:	ldr	r3, [sp, #20]
   227f0:	add	r5, sp, #2144	; 0x860
   227f4:	mov	fp, #0
   227f8:	add	r5, r5, #8
   227fc:	str	fp, [r5, #-2088]	; 0xfffff7d8
   22800:	add	r3, r3, #1
   22804:	lsl	r0, r3, #2
   22808:	str	r3, [r5, #-2092]	; 0xfffff7d4
   2280c:	bl	2d378 <__assert_fail@plt+0x1c14c>
   22810:	cmp	r0, fp
   22814:	str	r0, [r5, #-2084]	; 0xfffff7dc
   22818:	beq	230b8 <__assert_fail@plt+0x11e8c>
   2281c:	mov	r3, #0
   22820:	mov	r2, #0
   22824:	str	fp, [r5, #-2096]	; 0xfffff7d0
   22828:	add	r1, sp, #6208	; 0x1840
   2282c:	add	r4, sp, #3168	; 0xc60
   22830:	str	r8, [sp]
   22834:	add	r1, r1, #40	; 0x28
   22838:	add	r4, r4, #8
   2283c:	strd	r2, [r8, #-32]	; 0xffffffe0
   22840:	mov	sl, fp
   22844:	add	r6, r1, #28
   22848:	str	r1, [sp, #24]
   2284c:	strd	r2, [sp, #80]	; 0x50
   22850:	strd	r2, [sp, #88]	; 0x58
   22854:	strd	r2, [sp, #96]	; 0x60
   22858:	sub	r3, r8, #48	; 0x30
   2285c:	str	r3, [sp, #12]
   22860:	str	r4, [sp, #28]
   22864:	str	r4, [sp, #40]	; 0x28
   22868:	ldr	ip, [r4, #4]
   2286c:	mov	r3, #0
   22870:	str	r3, [r5, #-2088]	; 0xfffff7d8
   22874:	cmp	ip, r3
   22878:	movgt	r7, #0
   2287c:	ble	228c8 <__assert_fail@plt+0x1169c>
   22880:	ldr	r2, [r4, #8]
   22884:	add	r0, sp, #60	; 0x3c
   22888:	ldr	r3, [r9, #12]
   2288c:	ldr	r2, [r2, r7, lsl #2]
   22890:	ldr	r3, [r3, r2, lsl #2]
   22894:	cmn	r3, #1
   22898:	add	r2, r3, r3, lsl #1
   2289c:	beq	228bc <__assert_fail@plt+0x11690>
   228a0:	ldr	r1, [r9, #24]
   228a4:	add	r1, r1, r2, lsl #2
   228a8:	bl	21e88 <__assert_fail@plt+0x10c5c>
   228ac:	cmp	r0, #0
   228b0:	str	r0, [r5, #-2096]	; 0xfffff7d0
   228b4:	bne	22f58 <__assert_fail@plt+0x11d2c>
   228b8:	ldr	ip, [r4, #4]
   228bc:	add	r7, r7, #1
   228c0:	cmp	ip, r7
   228c4:	bgt	22880 <__assert_fail@plt+0x11654>
   228c8:	mov	r3, #0
   228cc:	add	r2, sp, #60	; 0x3c
   228d0:	ldr	r0, [sp, #12]
   228d4:	mov	r1, r9
   228d8:	bl	213e0 <__assert_fail@plt+0x101b4>
   228dc:	ldr	r3, [sp]
   228e0:	cmp	r0, #0
   228e4:	mov	r7, r0
   228e8:	str	r0, [r3], #4
   228ec:	str	r3, [sp]
   228f0:	beq	230d0 <__assert_fail@plt+0x11ea4>
   228f4:	ldrsb	r3, [r7, #52]	; 0x34
   228f8:	cmp	r3, #0
   228fc:	blt	22f88 <__assert_fail@plt+0x11d5c>
   22900:	add	r3, sp, #1120	; 0x460
   22904:	str	r7, [r5, sl, lsl #2]
   22908:	add	r3, r3, #8
   2290c:	str	r7, [r3, sl, lsl #2]
   22910:	sub	r7, r8, #36	; 0x24
   22914:	sub	r1, r6, #32
   22918:	mov	r2, r7
   2291c:	ldr	r3, [r2, #4]!
   22920:	ldr	r0, [r1, #4]!
   22924:	orr	r3, r3, r0
   22928:	cmp	r6, r1
   2292c:	str	r3, [r2]
   22930:	bne	2291c <__assert_fail@plt+0x116f0>
   22934:	ldr	r3, [sp, #20]
   22938:	add	sl, sl, #1
   2293c:	add	r4, r4, #12
   22940:	add	r6, r6, #32
   22944:	cmp	sl, r3
   22948:	bne	22868 <__assert_fail@plt+0x1163c>
   2294c:	cmp	fp, #0
   22950:	bne	2315c <__assert_fail@plt+0x11f30>
   22954:	mov	r1, #256	; 0x100
   22958:	mov	r0, #4
   2295c:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   22960:	ldr	r3, [sp, #16]
   22964:	cmp	r0, #0
   22968:	mov	r6, r0
   2296c:	str	r0, [r3, #44]	; 0x2c
   22970:	beq	22f58 <__assert_fail@plt+0x11d2c>
   22974:	ldr	r8, [sp, #24]
   22978:	add	r4, r9, #96	; 0x60
   2297c:	mov	lr, r0
   22980:	add	ip, r0, #1024	; 0x400
   22984:	ldr	r3, [r7, #4]!
   22988:	cmp	r3, #0
   2298c:	movne	r0, lr
   22990:	movne	r1, #1
   22994:	beq	229b0 <__assert_fail@plt+0x11784>
   22998:	tst	r3, #1
   2299c:	bne	230e0 <__assert_fail@plt+0x11eb4>
   229a0:	lsrs	r3, r3, #1
   229a4:	add	r0, r0, #4
   229a8:	lsl	r1, r1, #1
   229ac:	bne	22998 <__assert_fail@plt+0x1176c>
   229b0:	add	lr, lr, #128	; 0x80
   229b4:	add	r4, r4, #4
   229b8:	cmp	ip, lr
   229bc:	add	r8, r8, #4
   229c0:	bne	22984 <__assert_fail@plt+0x11758>
   229c4:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   229c8:	ubfx	r3, r3, #10, #1
   229cc:	cmp	r3, #0
   229d0:	beq	22a04 <__assert_fail@plt+0x117d8>
   229d4:	ldr	ip, [sp, #20]
   229d8:	add	r2, sp, #6208	; 0x1840
   229dc:	add	r1, r3, #1
   229e0:	add	r2, r2, #40	; 0x28
   229e4:	sub	r0, r3, #1
   229e8:	add	r2, r2, r3, lsl #5
   229ec:	ldr	r2, [r2, #-32]	; 0xffffffe0
   229f0:	tst	r2, #1024	; 0x400
   229f4:	bne	23148 <__assert_fail@plt+0x11f1c>
   229f8:	cmp	ip, r3
   229fc:	mov	r3, r1
   22a00:	bne	229d8 <__assert_fail@plt+0x117ac>
   22a04:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   22a08:	bl	13254 <__assert_fail@plt+0x2028>
   22a0c:	ldr	r3, [sp, #20]
   22a10:	ldr	r5, [sp, #28]
   22a14:	ldr	r2, [sp, #40]	; 0x28
   22a18:	add	r3, r3, r3, lsl #1
   22a1c:	add	r4, r2, r3, lsl #2
   22a20:	add	r5, r5, #12
   22a24:	ldr	r0, [r5, #-4]
   22a28:	bl	13254 <__assert_fail@plt+0x2028>
   22a2c:	cmp	r4, r5
   22a30:	bne	22a20 <__assert_fail@plt+0x117f4>
   22a34:	mov	r0, #1
   22a38:	b	22dfc <__assert_fail@plt+0x11bd0>
   22a3c:	ldrb	r3, [r3, r1, lsl #3]
   22a40:	asr	r0, r3, #5
   22a44:	and	r3, r3, #31
   22a48:	ldr	r1, [r8, r0, lsl #2]
   22a4c:	orr	r3, r1, r6, lsl r3
   22a50:	str	r3, [r8, r0, lsl #2]
   22a54:	cmp	r2, #0
   22a58:	beq	22b38 <__assert_fail@plt+0x1190c>
   22a5c:	tst	r2, #32
   22a60:	bne	22d78 <__assert_fail@plt+0x11b4c>
   22a64:	tst	r2, #128	; 0x80
   22a68:	bne	22dac <__assert_fail@plt+0x11b80>
   22a6c:	tst	r2, #4
   22a70:	beq	22ad4 <__assert_fail@plt+0x118a8>
   22a74:	cmp	r6, #1
   22a78:	beq	22f38 <__assert_fail@plt+0x11d0c>
   22a7c:	ldr	r1, [sp, #36]	; 0x24
   22a80:	ldr	r3, [r1, #92]	; 0x5c
   22a84:	cmp	r3, #1
   22a88:	ble	22e78 <__assert_fail@plt+0x11c4c>
   22a8c:	ldr	lr, [r1, #60]	; 0x3c
   22a90:	add	r0, r1, #96	; 0x60
   22a94:	add	r9, r1, #128	; 0x80
   22a98:	sub	ip, r8, #4
   22a9c:	mov	r1, #0
   22aa0:	sub	lr, lr, #4
   22aa4:	ldr	r3, [lr, #4]!
   22aa8:	ldr	r5, [r0], #4
   22aac:	ldr	r4, [ip, #4]!
   22ab0:	mvn	r3, r3
   22ab4:	orr	r3, r3, r5
   22ab8:	cmp	r0, r9
   22abc:	and	r3, r3, r4
   22ac0:	orr	r1, r1, r3
   22ac4:	str	r3, [ip]
   22ac8:	bne	22aa4 <__assert_fail@plt+0x11878>
   22acc:	cmp	r1, #0
   22ad0:	beq	227c8 <__assert_fail@plt+0x1159c>
   22ad4:	tst	r2, #8
   22ad8:	beq	22b38 <__assert_fail@plt+0x1190c>
   22adc:	cmp	r6, #1
   22ae0:	beq	22f1c <__assert_fail@plt+0x11cf0>
   22ae4:	ldr	r2, [sp, #36]	; 0x24
   22ae8:	ldr	r3, [r2, #92]	; 0x5c
   22aec:	cmp	r3, #1
   22af0:	ble	22ee0 <__assert_fail@plt+0x11cb4>
   22af4:	ldr	lr, [r2, #60]	; 0x3c
   22af8:	sub	ip, r8, #4
   22afc:	add	r0, r2, #96	; 0x60
   22b00:	add	r5, r2, #128	; 0x80
   22b04:	mov	r1, #0
   22b08:	sub	lr, lr, #4
   22b0c:	ldr	r2, [r0], #4
   22b10:	ldr	r4, [lr, #4]!
   22b14:	ldr	r3, [ip, #4]!
   22b18:	cmp	r5, r0
   22b1c:	and	r2, r2, r4
   22b20:	bic	r3, r3, r2
   22b24:	orr	r1, r1, r3
   22b28:	str	r3, [ip]
   22b2c:	bne	22b0c <__assert_fail@plt+0x118e0>
   22b30:	cmp	r1, #0
   22b34:	beq	227c8 <__assert_fail@plt+0x1159c>
   22b38:	ldr	r3, [sp, #20]
   22b3c:	cmp	r3, #0
   22b40:	movle	r5, #0
   22b44:	ble	22d00 <__assert_fail@plt+0x11ad4>
   22b48:	add	r4, sp, #6272	; 0x1880
   22b4c:	add	r9, sp, #2144	; 0x860
   22b50:	str	r6, [sp]
   22b54:	add	r4, r4, #4
   22b58:	mov	r5, #0
   22b5c:	ldr	r6, [sp, #20]
   22b60:	add	r9, r9, #8
   22b64:	b	22bac <__assert_fail@plt+0x11980>
   22b68:	ldr	r3, [sp, #12]
   22b6c:	add	r0, sp, #14400	; 0x3840
   22b70:	add	r0, r0, #40	; 0x28
   22b74:	ldrb	r2, [r3]
   22b78:	asr	r3, r2, #5
   22b7c:	and	r2, r2, #31
   22b80:	add	r3, r0, r3, lsl #2
   22b84:	add	r3, r3, r1
   22b88:	sub	r3, r3, #8192	; 0x2000
   22b8c:	ldr	r3, [r3]
   22b90:	lsr	r2, r3, r2
   22b94:	tst	r2, #1
   22b98:	bne	22bbc <__assert_fail@plt+0x11990>
   22b9c:	add	r5, r5, #1
   22ba0:	add	r4, r4, #32
   22ba4:	cmp	r5, r6
   22ba8:	bge	22cfc <__assert_fail@plt+0x11ad0>
   22bac:	ldr	r3, [sp]
   22bb0:	lsl	r1, r5, #5
   22bb4:	cmp	r3, #1
   22bb8:	beq	22b68 <__assert_fail@plt+0x1193c>
   22bbc:	sub	r1, r8, #4
   22bc0:	sub	r2, r4, #32
   22bc4:	mov	sl, r1
   22bc8:	mov	r0, r2
   22bcc:	sub	lr, r7, #4
   22bd0:	mov	ip, #0
   22bd4:	ldr	fp, [r0, #4]!
   22bd8:	ldr	r3, [sl, #4]!
   22bdc:	cmp	r0, r4
   22be0:	and	r3, r3, fp
   22be4:	orr	ip, ip, r3
   22be8:	str	r3, [lr, #4]!
   22bec:	bne	22bd4 <__assert_fail@plt+0x119a8>
   22bf0:	cmp	ip, #0
   22bf4:	beq	22b9c <__assert_fail@plt+0x11970>
   22bf8:	mov	sl, #0
   22bfc:	sub	fp, r9, #4
   22c00:	mov	lr, sl
   22c04:	ldr	r3, [r1, #4]!
   22c08:	ldr	ip, [r2, #4]!
   22c0c:	bic	r0, ip, r3
   22c10:	bic	r3, r3, ip
   22c14:	cmp	r2, r4
   22c18:	orr	lr, lr, r0
   22c1c:	orr	sl, sl, r3
   22c20:	str	r0, [fp, #4]!
   22c24:	str	r3, [r1]
   22c28:	bne	22c04 <__assert_fail@plt+0x119d8>
   22c2c:	add	fp, r5, r5, lsl #1
   22c30:	add	r3, sp, #3168	; 0xc60
   22c34:	cmp	lr, #0
   22c38:	add	r3, r3, #8
   22c3c:	str	sl, [sp, #28]
   22c40:	add	lr, r3, fp, lsl #2
   22c44:	str	lr, [sp, #20]
   22c48:	str	r3, [sp, #40]	; 0x28
   22c4c:	beq	22cd0 <__assert_fail@plt+0x11aa4>
   22c50:	add	r3, sp, #14400	; 0x3840
   22c54:	ldrd	r0, [r9]
   22c58:	add	r3, r3, #40	; 0x28
   22c5c:	add	ip, r3, r6, lsl #5
   22c60:	ldrd	sl, [r9, #16]
   22c64:	lsl	r3, r6, #1
   22c68:	sub	ip, ip, #8192	; 0x2000
   22c6c:	strd	r0, [ip]
   22c70:	ldrd	r0, [r9, #8]
   22c74:	strd	r0, [ip, #8]
   22c78:	ldrd	r0, [r9, #24]
   22c7c:	strd	sl, [ip, #16]
   22c80:	strd	r0, [ip, #24]
   22c84:	ldrd	r0, [r7]
   22c88:	strd	r0, [r4, #-28]	; 0xffffffe4
   22c8c:	add	r0, r3, r6
   22c90:	mov	r1, lr
   22c94:	ldrd	sl, [r7, #8]
   22c98:	str	r3, [sp, #44]	; 0x2c
   22c9c:	add	r3, sp, #3168	; 0xc60
   22ca0:	add	r3, r3, #8
   22ca4:	add	r0, r3, r0, lsl #2
   22ca8:	strd	sl, [r4, #-20]	; 0xffffffec
   22cac:	ldrd	sl, [r7, #16]
   22cb0:	strd	sl, [r4, #-12]
   22cb4:	ldrd	sl, [r7, #24]
   22cb8:	strd	sl, [r4, #-4]
   22cbc:	bl	211ec <__assert_fail@plt+0xffc0>
   22cc0:	cmp	r0, #0
   22cc4:	ldr	r3, [sp, #44]	; 0x2c
   22cc8:	bne	22f30 <__assert_fail@plt+0x11d04>
   22ccc:	add	r6, r6, #1
   22cd0:	ldr	r3, [sp, #16]
   22cd4:	ldr	r0, [sp, #20]
   22cd8:	ldr	r2, [sp, #32]
   22cdc:	ldr	r3, [r3, #12]
   22ce0:	ldr	r1, [r3, r2]
   22ce4:	bl	1fff0 <__assert_fail@plt+0xedc4>
   22ce8:	cmp	r0, #0
   22cec:	beq	22dcc <__assert_fail@plt+0x11ba0>
   22cf0:	ldr	r3, [sp, #28]
   22cf4:	cmp	r3, #0
   22cf8:	bne	22b9c <__assert_fail@plt+0x11970>
   22cfc:	str	r6, [sp, #20]
   22d00:	ldr	r3, [sp, #20]
   22d04:	cmp	r5, r3
   22d08:	beq	22ff4 <__assert_fail@plt+0x11dc8>
   22d0c:	ldr	r3, [sp, #16]
   22d10:	ldr	sl, [r3, #8]
   22d14:	b	227c8 <__assert_fail@plt+0x1159c>
   22d18:	ldr	r1, [sp, #36]	; 0x24
   22d1c:	ldr	r3, [r1, #92]	; 0x5c
   22d20:	cmp	r3, #1
   22d24:	ble	22e4c <__assert_fail@plt+0x11c20>
   22d28:	ldr	lr, [r1, #60]	; 0x3c
   22d2c:	sub	r0, r8, #4
   22d30:	sub	r1, lr, #4
   22d34:	add	lr, lr, #28
   22d38:	ldr	r3, [r0, #4]!
   22d3c:	ldr	ip, [r1, #4]!
   22d40:	orr	r3, r3, ip
   22d44:	cmp	r1, lr
   22d48:	str	r3, [r0]
   22d4c:	bne	22d38 <__assert_fail@plt+0x11b0c>
   22d50:	ldr	r3, [sp, #36]	; 0x24
   22d54:	ldr	r3, [r3, #128]	; 0x80
   22d58:	tst	r3, #64	; 0x40
   22d5c:	beq	22e3c <__assert_fail@plt+0x11c10>
   22d60:	tst	r3, #128	; 0x80
   22d64:	beq	22a54 <__assert_fail@plt+0x11828>
   22d68:	ldr	r3, [sp, #104]	; 0x68
   22d6c:	bic	r3, r3, #1
   22d70:	str	r3, [sp, #104]	; 0x68
   22d74:	b	22a54 <__assert_fail@plt+0x11828>
   22d78:	ldrd	r0, [sp, #48]	; 0x30
   22d7c:	str	r1, [r8, #4]
   22d80:	ldr	r3, [sp, #104]	; 0x68
   22d84:	str	r0, [r8]
   22d88:	strd	r0, [r8, #8]
   22d8c:	strd	r0, [r8, #16]
   22d90:	strd	r0, [r8, #24]
   22d94:	tst	r3, #1024	; 0x400
   22d98:	beq	227c8 <__assert_fail@plt+0x1159c>
   22d9c:	mov	r3, #1024	; 0x400
   22da0:	tst	r2, #128	; 0x80
   22da4:	str	r3, [sp, #104]	; 0x68
   22da8:	beq	22a6c <__assert_fail@plt+0x11840>
   22dac:	ldr	r3, [sp, #48]	; 0x30
   22db0:	ldr	r2, [sp, #52]	; 0x34
   22db4:	str	r3, [r8]
   22db8:	strd	r2, [r8, #4]
   22dbc:	strd	r2, [r8, #12]
   22dc0:	strd	r2, [r8, #20]
   22dc4:	str	r2, [r8, #28]
   22dc8:	b	227c8 <__assert_fail@plt+0x1159c>
   22dcc:	lsl	r3, r6, #1
   22dd0:	str	r6, [sp, #20]
   22dd4:	ldr	r2, [sp, #20]
   22dd8:	ldr	r4, [sp, #40]	; 0x28
   22ddc:	add	r3, r3, r2
   22de0:	add	r5, r4, r3, lsl #2
   22de4:	add	r4, r4, #12
   22de8:	ldr	r0, [r4, #-4]
   22dec:	bl	13254 <__assert_fail@plt+0x2028>
   22df0:	cmp	r5, r4
   22df4:	bne	22de4 <__assert_fail@plt+0x11bb8>
   22df8:	mov	r0, #0
   22dfc:	add	sp, sp, #14400	; 0x3840
   22e00:	add	sp, sp, #44	; 0x2c
   22e04:	ldrd	r4, [sp]
   22e08:	ldrd	r6, [sp, #8]
   22e0c:	ldrd	r8, [sp, #16]
   22e10:	ldrd	sl, [sp, #24]
   22e14:	add	sp, sp, #32
   22e18:	pop	{pc}		; (ldr pc, [sp], #4)
   22e1c:	ldr	r3, [sp, #36]	; 0x24
   22e20:	mvn	r0, #0
   22e24:	mvn	r1, #0
   22e28:	strd	r0, [r8]
   22e2c:	strd	r0, [r8, #8]
   22e30:	ldr	r3, [r3, #128]	; 0x80
   22e34:	tst	r3, #64	; 0x40
   22e38:	bne	22d60 <__assert_fail@plt+0x11b34>
   22e3c:	ldr	r1, [sp, #104]	; 0x68
   22e40:	bic	r1, r1, #1024	; 0x400
   22e44:	str	r1, [sp, #104]	; 0x68
   22e48:	b	22d60 <__assert_fail@plt+0x11b34>
   22e4c:	ldr	r3, [sp, #36]	; 0x24
   22e50:	mvn	r0, #0
   22e54:	mvn	r1, #0
   22e58:	strd	r0, [r8]
   22e5c:	strd	r0, [r8, #8]
   22e60:	strd	r0, [r8, #16]
   22e64:	ldr	r3, [r3, #128]	; 0x80
   22e68:	strd	r0, [r8, #24]
   22e6c:	tst	r3, #64	; 0x40
   22e70:	bne	22d60 <__assert_fail@plt+0x11b34>
   22e74:	b	22e3c <__assert_fail@plt+0x11c10>
   22e78:	ldr	r3, [sp, #36]	; 0x24
   22e7c:	sub	ip, r8, #4
   22e80:	mov	r1, #0
   22e84:	add	r0, r3, #96	; 0x60
   22e88:	add	r4, r3, #128	; 0x80
   22e8c:	ldr	r3, [r0], #4
   22e90:	ldr	lr, [ip, #4]!
   22e94:	cmp	r0, r4
   22e98:	and	r3, r3, lr
   22e9c:	orr	r1, r1, r3
   22ea0:	str	r3, [ip]
   22ea4:	bne	22e8c <__assert_fail@plt+0x11c60>
   22ea8:	cmp	r1, #0
   22eac:	bne	22ad4 <__assert_fail@plt+0x118a8>
   22eb0:	b	227c8 <__assert_fail@plt+0x1159c>
   22eb4:	ldr	lr, [r3, r1, lsl #3]
   22eb8:	sub	r0, r8, #4
   22ebc:	sub	r1, lr, #4
   22ec0:	add	lr, lr, #28
   22ec4:	ldr	r3, [r0, #4]!
   22ec8:	ldr	ip, [r1, #4]!
   22ecc:	orr	r3, r3, ip
   22ed0:	cmp	r1, lr
   22ed4:	str	r3, [r0]
   22ed8:	bne	22ec4 <__assert_fail@plt+0x11c98>
   22edc:	b	22a54 <__assert_fail@plt+0x11828>
   22ee0:	ldr	r3, [sp, #36]	; 0x24
   22ee4:	sub	r0, r8, #4
   22ee8:	mov	r1, #0
   22eec:	add	r2, r3, #96	; 0x60
   22ef0:	add	lr, r3, #128	; 0x80
   22ef4:	ldr	ip, [r2], #4
   22ef8:	ldr	r3, [r0, #4]!
   22efc:	cmp	lr, r2
   22f00:	bic	r3, r3, ip
   22f04:	orr	r1, r1, r3
   22f08:	str	r3, [r0]
   22f0c:	bne	22ef4 <__assert_fail@plt+0x11cc8>
   22f10:	cmp	r1, #0
   22f14:	beq	227c8 <__assert_fail@plt+0x1159c>
   22f18:	b	22b38 <__assert_fail@plt+0x1190c>
   22f1c:	ldr	r3, [sp, #12]
   22f20:	ldrb	r3, [r3, #6]
   22f24:	tst	r3, #64	; 0x40
   22f28:	beq	22ae4 <__assert_fail@plt+0x118b8>
   22f2c:	b	22dac <__assert_fail@plt+0x11b80>
   22f30:	str	r6, [sp, #20]
   22f34:	b	22dd4 <__assert_fail@plt+0x11ba8>
   22f38:	ldr	r3, [sp, #12]
   22f3c:	ldrb	r3, [r3, #6]
   22f40:	tst	r3, #64	; 0x40
   22f44:	bne	22a7c <__assert_fail@plt+0x11850>
   22f48:	b	22dac <__assert_fail@plt+0x11b80>
   22f4c:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   22f50:	cmp	r3, #0
   22f54:	beq	22fb8 <__assert_fail@plt+0x11d8c>
   22f58:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   22f5c:	ldr	r4, [sp, #40]	; 0x28
   22f60:	bl	13254 <__assert_fail@plt+0x2028>
   22f64:	ldr	r3, [sp, #20]
   22f68:	add	r5, r3, r3, lsl #1
   22f6c:	add	r5, r4, r5, lsl #2
   22f70:	add	r4, r4, #12
   22f74:	ldr	r0, [r4, #-4]
   22f78:	bl	13254 <__assert_fail@plt+0x2028>
   22f7c:	cmp	r5, r4
   22f80:	bne	22f70 <__assert_fail@plt+0x11d44>
   22f84:	b	22df8 <__assert_fail@plt+0x11bcc>
   22f88:	mov	r3, #1
   22f8c:	add	r2, sp, #60	; 0x3c
   22f90:	ldr	r0, [sp, #12]
   22f94:	mov	r1, r9
   22f98:	bl	213e0 <__assert_fail@plt+0x101b4>
   22f9c:	add	r3, sp, #1120	; 0x460
   22fa0:	cmp	r0, #0
   22fa4:	add	r3, r3, #8
   22fa8:	str	r0, [r3, sl, lsl #2]
   22fac:	beq	22f4c <__assert_fail@plt+0x11d20>
   22fb0:	cmp	r7, r0
   22fb4:	beq	22fc4 <__assert_fail@plt+0x11d98>
   22fb8:	ldr	r3, [r9, #92]	; 0x5c
   22fbc:	cmp	r3, #2
   22fc0:	movge	fp, #1
   22fc4:	mov	r3, #2
   22fc8:	add	r2, sp, #60	; 0x3c
   22fcc:	ldr	r0, [sp, #12]
   22fd0:	mov	r1, r9
   22fd4:	bl	213e0 <__assert_fail@plt+0x101b4>
   22fd8:	cmp	r0, #0
   22fdc:	str	r0, [r5, sl, lsl #2]
   22fe0:	bne	22910 <__assert_fail@plt+0x116e4>
   22fe4:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   22fe8:	cmp	r3, #0
   22fec:	beq	22910 <__assert_fail@plt+0x116e4>
   22ff0:	b	22f58 <__assert_fail@plt+0x11d2c>
   22ff4:	ldr	r0, [sp, #16]
   22ff8:	add	r1, sp, #3168	; 0xc60
   22ffc:	add	r1, r1, #8
   23000:	ldr	r2, [sp, #20]
   23004:	str	r1, [sp, #40]	; 0x28
   23008:	ldrd	sl, [r8]
   2300c:	ldr	ip, [r0, #12]
   23010:	lsl	r3, r2, #1
   23014:	ldr	lr, [sp, #32]
   23018:	add	r0, r3, r2
   2301c:	add	r5, r1, r0, lsl #2
   23020:	str	r3, [sp, #12]
   23024:	mov	r3, r1
   23028:	add	r1, sp, #14400	; 0x3840
   2302c:	add	r1, r1, #40	; 0x28
   23030:	add	r2, r1, r2, lsl #5
   23034:	mov	r1, #1
   23038:	ldr	r4, [ip, lr]
   2303c:	sub	r2, r2, #8192	; 0x2000
   23040:	str	r1, [r3, r0, lsl #2]
   23044:	mov	r0, #4
   23048:	str	r1, [r5, #4]
   2304c:	strd	sl, [r2]
   23050:	ldrd	sl, [r8, #16]
   23054:	strd	sl, [sp]
   23058:	ldrd	sl, [r8, #8]
   2305c:	strd	sl, [r2, #8]
   23060:	ldrd	sl, [sp]
   23064:	strd	sl, [r2, #16]
   23068:	ldrd	sl, [r8, #24]
   2306c:	strd	sl, [r2, #24]
   23070:	bl	2d378 <__assert_fail@plt+0x1c14c>
   23074:	cmp	r0, #0
   23078:	str	r0, [r5, #8]
   2307c:	ldr	r3, [sp, #12]
   23080:	beq	230a0 <__assert_fail@plt+0x11e74>
   23084:	str	r4, [r0]
   23088:	ldr	r3, [sp, #16]
   2308c:	ldr	sl, [r3, #8]
   23090:	ldr	r3, [sp, #20]
   23094:	add	r3, r3, #1
   23098:	str	r3, [sp, #20]
   2309c:	b	22dac <__assert_fail@plt+0x11b80>
   230a0:	ldr	r2, [sp, #20]
   230a4:	str	r0, [r5]
   230a8:	str	r0, [r5, #4]
   230ac:	cmp	r2, #0
   230b0:	beq	22df8 <__assert_fail@plt+0x11bcc>
   230b4:	b	22dd4 <__assert_fail@plt+0x11ba8>
   230b8:	add	r2, sp, #3168	; 0xc60
   230bc:	mov	r3, #12
   230c0:	add	r2, r2, #8
   230c4:	str	r3, [r5, #-2096]	; 0xfffff7d0
   230c8:	str	r2, [sp, #40]	; 0x28
   230cc:	b	22f5c <__assert_fail@plt+0x11d30>
   230d0:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   230d4:	cmp	r3, #0
   230d8:	beq	228f4 <__assert_fail@plt+0x116c8>
   230dc:	b	22f58 <__assert_fail@plt+0x11d2c>
   230e0:	ldr	r2, [r8]
   230e4:	ands	r2, r1, r2
   230e8:	bne	23140 <__assert_fail@plt+0x11f14>
   230ec:	add	r2, r2, #1
   230f0:	ldr	r9, [r8, r2, lsl #5]
   230f4:	tst	r1, r9
   230f8:	beq	230ec <__assert_fail@plt+0x11ec0>
   230fc:	ldr	r9, [r4]
   23100:	add	r2, r5, r2, lsl #2
   23104:	tst	r1, r9
   23108:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   2310c:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   23110:	str	r2, [r0]
   23114:	b	229a0 <__assert_fail@plt+0x11774>
   23118:	bne	22df8 <__assert_fail@plt+0x11bcc>
   2311c:	mov	r1, #256	; 0x100
   23120:	mov	r0, #4
   23124:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   23128:	ldr	r2, [sp, #16]
   2312c:	mov	r3, r0
   23130:	adds	r0, r0, #0
   23134:	movne	r0, #1
   23138:	str	r3, [r2, #44]	; 0x2c
   2313c:	b	22dfc <__assert_fail@plt+0x11bd0>
   23140:	mov	r2, #0
   23144:	b	230fc <__assert_fail@plt+0x11ed0>
   23148:	ldr	r3, [r5, r0, lsl #2]
   2314c:	cmp	fp, #0
   23150:	strne	r3, [r6, #1064]	; 0x428
   23154:	str	r3, [r6, #40]	; 0x28
   23158:	b	22a04 <__assert_fail@plt+0x117d8>
   2315c:	mov	r1, #512	; 0x200
   23160:	mov	r0, #4
   23164:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   23168:	ldr	r3, [sp, #16]
   2316c:	cmp	r0, #0
   23170:	mov	r6, r0
   23174:	str	r0, [r3, #48]	; 0x30
   23178:	beq	22f58 <__assert_fail@plt+0x11d2c>
   2317c:	ldr	ip, [sp, #24]
   23180:	mov	lr, r0
   23184:	add	r4, r0, #1024	; 0x400
   23188:	ldr	r3, [r7, #4]!
   2318c:	cmp	r3, #0
   23190:	movne	r0, lr
   23194:	movne	r1, #1
   23198:	beq	231b4 <__assert_fail@plt+0x11f88>
   2319c:	tst	r3, #1
   231a0:	bne	231c8 <__assert_fail@plt+0x11f9c>
   231a4:	lsrs	r3, r3, #1
   231a8:	add	r0, r0, #4
   231ac:	lsl	r1, r1, #1
   231b0:	bne	2319c <__assert_fail@plt+0x11f70>
   231b4:	add	lr, lr, #128	; 0x80
   231b8:	add	ip, ip, #4
   231bc:	cmp	r4, lr
   231c0:	bne	23188 <__assert_fail@plt+0x11f5c>
   231c4:	b	229c4 <__assert_fail@plt+0x11798>
   231c8:	ldr	r2, [ip]
   231cc:	ands	r2, r1, r2
   231d0:	bne	231fc <__assert_fail@plt+0x11fd0>
   231d4:	add	r2, r2, #1
   231d8:	ldr	r8, [ip, r2, lsl #5]
   231dc:	tst	r1, r8
   231e0:	beq	231d4 <__assert_fail@plt+0x11fa8>
   231e4:	add	r2, r5, r2, lsl #2
   231e8:	ldr	r8, [r2, #-2048]	; 0xfffff800
   231ec:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   231f0:	str	r8, [r0]
   231f4:	str	r2, [r0, #1024]	; 0x400
   231f8:	b	231a4 <__assert_fail@plt+0x11f78>
   231fc:	mov	r2, #0
   23200:	b	231e4 <__assert_fail@plt+0x11fb8>
   23204:	cmp	r1, #0
   23208:	strd	r4, [sp, #-16]!
   2320c:	mov	r5, r0
   23210:	str	r6, [sp, #8]
   23214:	str	lr, [sp, #12]
   23218:	blt	232cc <__assert_fail@plt+0x120a0>
   2321c:	ldr	r3, [r0, #48]	; 0x30
   23220:	cmp	r3, r1
   23224:	beq	232e0 <__assert_fail@plt+0x120b4>
   23228:	ldr	r3, [r0, #80]	; 0x50
   2322c:	cmp	r3, #1
   23230:	ble	23280 <__assert_fail@plt+0x12054>
   23234:	ldr	r3, [r0, #8]
   23238:	add	r3, r3, r1, lsl #2
   2323c:	b	23248 <__assert_fail@plt+0x1201c>
   23240:	cmn	r1, #1
   23244:	beq	232cc <__assert_fail@plt+0x120a0>
   23248:	ldr	r4, [r3], #-4
   2324c:	sub	r1, r1, #1
   23250:	cmn	r4, #1
   23254:	beq	23240 <__assert_fail@plt+0x12014>
   23258:	ldrb	r3, [r5, #78]	; 0x4e
   2325c:	cmp	r3, #0
   23260:	bne	232f0 <__assert_fail@plt+0x120c4>
   23264:	cmp	r4, #10
   23268:	movne	r0, #0
   2326c:	beq	232ac <__assert_fail@plt+0x12080>
   23270:	ldrd	r4, [sp]
   23274:	ldr	r6, [sp, #8]
   23278:	add	sp, sp, #12
   2327c:	pop	{pc}		; (ldr pc, [sp], #4)
   23280:	ldr	r3, [r0, #4]
   23284:	ldr	r0, [r0, #68]	; 0x44
   23288:	ldrb	r3, [r3, r1]
   2328c:	asr	r1, r3, #5
   23290:	and	r2, r3, #31
   23294:	ldr	r0, [r0, r1, lsl #2]
   23298:	lsr	r0, r0, r2
   2329c:	ands	r0, r0, #1
   232a0:	bne	23270 <__assert_fail@plt+0x12044>
   232a4:	cmp	r3, #10
   232a8:	bne	23270 <__assert_fail@plt+0x12044>
   232ac:	ldrb	r3, [r5, #77]	; 0x4d
   232b0:	ldrd	r4, [sp]
   232b4:	ldr	r6, [sp, #8]
   232b8:	add	sp, sp, #12
   232bc:	cmp	r3, #0
   232c0:	moveq	r0, #0
   232c4:	movne	r0, #2
   232c8:	pop	{pc}		; (ldr pc, [sp], #4)
   232cc:	ldr	r6, [sp, #8]
   232d0:	ldr	r0, [r5, #60]	; 0x3c
   232d4:	ldrd	r4, [sp]
   232d8:	add	sp, sp, #12
   232dc:	pop	{pc}		; (ldr pc, [sp], #4)
   232e0:	tst	r2, #2
   232e4:	movne	r0, #8
   232e8:	moveq	r0, #10
   232ec:	b	23270 <__assert_fail@plt+0x12044>
   232f0:	mov	r0, r4
   232f4:	bl	11154 <iswalnum@plt>
   232f8:	sub	r3, r4, #95	; 0x5f
   232fc:	cmp	r0, #0
   23300:	clz	r3, r3
   23304:	lsr	r3, r3, #5
   23308:	movne	r3, #1
   2330c:	cmp	r3, #0
   23310:	movne	r0, #1
   23314:	bne	23270 <__assert_fail@plt+0x12044>
   23318:	b	23264 <__assert_fail@plt+0x12038>
   2331c:	ldrb	ip, [r1, #4]
   23320:	str	r4, [sp, #-8]!
   23324:	ldr	r3, [r0, #4]
   23328:	str	lr, [sp, #4]
   2332c:	sub	ip, ip, #1
   23330:	ldrb	r3, [r3, r2]
   23334:	cmp	ip, #6
   23338:	ldrls	pc, [pc, ip, lsl #2]
   2333c:	b	23368 <__assert_fail@plt+0x1213c>
   23340:	andeq	r3, r2, ip, asr r3
   23344:	andeq	r3, r2, r8, ror #6
   23348:	andeq	r3, r2, ip, lsl #8
   2334c:	andeq	r3, r2, r8, ror #6
   23350:	andeq	r3, r2, r0, lsl #7
   23354:	andeq	r3, r2, r8, ror #6
   23358:	andeq	r3, r2, r8, ror r3
   2335c:	ldrb	ip, [r1]
   23360:	cmp	ip, r3
   23364:	beq	233a0 <__assert_fail@plt+0x12174>
   23368:	mov	r0, #0
   2336c:	ldr	r4, [sp]
   23370:	add	sp, sp, #4
   23374:	pop	{pc}		; (ldr pc, [sp], #4)
   23378:	tst	r3, #128	; 0x80
   2337c:	bne	23368 <__assert_fail@plt+0x1213c>
   23380:	cmp	r3, #10
   23384:	beq	23440 <__assert_fail@plt+0x12214>
   23388:	cmp	r3, #0
   2338c:	bne	233a0 <__assert_fail@plt+0x12174>
   23390:	ldr	ip, [r0, #84]	; 0x54
   23394:	ldr	ip, [ip, #128]	; 0x80
   23398:	tst	ip, #128	; 0x80
   2339c:	bne	23368 <__assert_fail@plt+0x1213c>
   233a0:	ldr	r4, [r1, #4]
   233a4:	mov	r3, #65280	; 0xff00
   233a8:	movt	r3, #3
   233ac:	and	r3, r3, r4
   233b0:	cmp	r3, #0
   233b4:	beq	233fc <__assert_fail@plt+0x121d0>
   233b8:	mov	r1, r2
   233bc:	ldr	r2, [r0, #88]	; 0x58
   233c0:	bl	23204 <__assert_fail@plt+0x11fd8>
   233c4:	ubfx	r1, r4, #8, #10
   233c8:	ands	r2, r1, #4
   233cc:	bne	2342c <__assert_fail@plt+0x12200>
   233d0:	tst	r1, #8
   233d4:	beq	233e0 <__assert_fail@plt+0x121b4>
   233d8:	tst	r0, #1
   233dc:	bne	23368 <__assert_fail@plt+0x1213c>
   233e0:	tst	r1, #32
   233e4:	beq	233f0 <__assert_fail@plt+0x121c4>
   233e8:	ands	r3, r0, #2
   233ec:	beq	23368 <__assert_fail@plt+0x1213c>
   233f0:	tst	r1, #128	; 0x80
   233f4:	ubfxne	r0, r0, #3, #1
   233f8:	bne	2336c <__assert_fail@plt+0x12140>
   233fc:	ldr	r4, [sp]
   23400:	add	sp, sp, #4
   23404:	mov	r0, #1
   23408:	pop	{pc}		; (ldr pc, [sp], #4)
   2340c:	ldr	ip, [r1]
   23410:	asr	lr, r3, #5
   23414:	and	r3, r3, #31
   23418:	ldr	ip, [ip, lr, lsl #2]
   2341c:	lsr	r3, ip, r3
   23420:	ands	r3, r3, #1
   23424:	bne	233a0 <__assert_fail@plt+0x12174>
   23428:	b	23368 <__assert_fail@plt+0x1213c>
   2342c:	ands	r3, r0, #1
   23430:	beq	23368 <__assert_fail@plt+0x1213c>
   23434:	tst	r1, #8
   23438:	beq	233e0 <__assert_fail@plt+0x121b4>
   2343c:	b	23368 <__assert_fail@plt+0x1213c>
   23440:	ldr	r3, [r0, #84]	; 0x54
   23444:	ldr	r3, [r3, #128]	; 0x80
   23448:	ands	r3, r3, #64	; 0x40
   2344c:	bne	233a0 <__assert_fail@plt+0x12174>
   23450:	b	23368 <__assert_fail@plt+0x1213c>
   23454:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23458:	mov	r4, r0
   2345c:	ldr	r5, [r0, #24]
   23460:	strd	r6, [sp, #8]
   23464:	mov	r7, r1
   23468:	strd	r8, [sp, #16]
   2346c:	mov	r8, r2
   23470:	strd	sl, [sp, #24]
   23474:	str	lr, [sp, #32]
   23478:	sub	sp, sp, #44	; 0x2c
   2347c:	cmp	r5, r1
   23480:	suble	r5, r1, r5
   23484:	ble	234e8 <__assert_fail@plt+0x122bc>
   23488:	ldr	r3, [r0, #80]	; 0x50
   2348c:	cmp	r3, #1
   23490:	ble	234a0 <__assert_fail@plt+0x12274>
   23494:	mov	r2, #0
   23498:	mov	r3, #0
   2349c:	strd	r2, [r0, #16]
   234a0:	ldrb	r3, [r4, #75]	; 0x4b
   234a4:	mov	r2, #0
   234a8:	tst	r8, #1
   234ac:	movne	r0, #4
   234b0:	moveq	r0, #6
   234b4:	ldr	ip, [r4, #44]	; 0x2c
   234b8:	mov	r5, r7
   234bc:	str	r2, [r4, #24]
   234c0:	ldr	r1, [r4, #52]	; 0x34
   234c4:	cmp	r3, r2
   234c8:	str	r2, [r4, #28]
   234cc:	ldreq	r3, [r4]
   234d0:	str	r2, [r4, #32]
   234d4:	str	ip, [r4, #48]	; 0x30
   234d8:	str	r1, [r4, #56]	; 0x38
   234dc:	str	r0, [r4, #60]	; 0x3c
   234e0:	streq	r3, [r4, #4]
   234e4:	strb	r2, [r4, #76]	; 0x4c
   234e8:	cmp	r5, #0
   234ec:	beq	23668 <__assert_fail@plt+0x1243c>
   234f0:	ldrb	r2, [r4, #76]	; 0x4c
   234f4:	ldr	r3, [r4, #32]
   234f8:	ldr	r6, [r4, #28]
   234fc:	cmp	r3, r5
   23500:	ble	23678 <__assert_fail@plt+0x1244c>
   23504:	cmp	r2, #0
   23508:	bne	237e4 <__assert_fail@plt+0x125b8>
   2350c:	mov	r2, r8
   23510:	sub	r1, r5, #1
   23514:	mov	r0, r4
   23518:	bl	23204 <__assert_fail@plt+0x11fd8>
   2351c:	ldr	r3, [r4, #80]	; 0x50
   23520:	sub	r2, r6, r5
   23524:	str	r0, [r4, #60]	; 0x3c
   23528:	cmp	r3, #1
   2352c:	bgt	235c4 <__assert_fail@plt+0x12398>
   23530:	ldrb	r3, [r4, #75]	; 0x4b
   23534:	cmp	r3, #0
   23538:	bne	23824 <__assert_fail@plt+0x125f8>
   2353c:	ldr	ip, [r4, #32]
   23540:	str	r2, [r4, #28]
   23544:	ldr	r1, [r4, #48]	; 0x30
   23548:	ldr	r0, [r4, #56]	; 0x38
   2354c:	sub	ip, ip, r5
   23550:	ldr	r2, [r4, #80]	; 0x50
   23554:	sub	r1, r1, r5
   23558:	str	ip, [r4, #32]
   2355c:	sub	r0, r0, r5
   23560:	cmp	r3, #0
   23564:	bne	23574 <__assert_fail@plt+0x12348>
   23568:	ldr	r3, [r4, #4]
   2356c:	add	r5, r3, r5
   23570:	str	r5, [r4, #4]
   23574:	cmp	r2, #1
   23578:	str	r7, [r4, #24]
   2357c:	str	r1, [r4, #48]	; 0x30
   23580:	str	r0, [r4, #56]	; 0x38
   23584:	ble	235f0 <__assert_fail@plt+0x123c4>
   23588:	ldrb	r3, [r4, #72]	; 0x48
   2358c:	mov	r0, r4
   23590:	cmp	r3, #0
   23594:	bne	235e0 <__assert_fail@plt+0x123b4>
   23598:	bl	1f070 <__assert_fail@plt+0xde44>
   2359c:	mov	r3, #0
   235a0:	mov	r0, r3
   235a4:	str	r3, [r4, #40]	; 0x28
   235a8:	add	sp, sp, #44	; 0x2c
   235ac:	ldrd	r4, [sp]
   235b0:	ldrd	r6, [sp, #8]
   235b4:	ldrd	r8, [sp, #16]
   235b8:	ldrd	sl, [sp, #24]
   235bc:	add	sp, sp, #32
   235c0:	pop	{pc}		; (ldr pc, [sp], #4)
   235c4:	ldr	r0, [r4, #8]
   235c8:	lsl	r2, r2, #2
   235cc:	add	r1, r0, r5, lsl #2
   235d0:	bl	10fa4 <memmove@plt>
   235d4:	ldr	r2, [r4, #28]
   235d8:	sub	r2, r2, r5
   235dc:	b	23530 <__assert_fail@plt+0x12304>
   235e0:	bl	1f210 <__assert_fail@plt+0xdfe4>
   235e4:	cmp	r0, #0
   235e8:	beq	2359c <__assert_fail@plt+0x12370>
   235ec:	b	235a8 <__assert_fail@plt+0x1237c>
   235f0:	ldrb	r3, [r4, #75]	; 0x4b
   235f4:	cmp	r3, #0
   235f8:	streq	r1, [r4, #28]
   235fc:	beq	2359c <__assert_fail@plt+0x12370>
   23600:	ldrb	r3, [r4, #72]	; 0x48
   23604:	cmp	r3, #0
   23608:	bne	23ae4 <__assert_fail@plt+0x128b8>
   2360c:	ldr	r0, [r4, #64]	; 0x40
   23610:	cmp	r0, #0
   23614:	beq	2359c <__assert_fail@plt+0x12370>
   23618:	ldr	r3, [r4, #28]
   2361c:	ldr	r2, [r4, #36]	; 0x24
   23620:	cmp	r1, r2
   23624:	movge	r1, r2
   23628:	cmp	r1, r3
   2362c:	bgt	2363c <__assert_fail@plt+0x12410>
   23630:	b	23c44 <__assert_fail@plt+0x12a18>
   23634:	ldr	r7, [r4, #24]
   23638:	ldr	r0, [r4, #64]	; 0x40
   2363c:	ldm	r4, {r2, ip}
   23640:	add	r2, r2, r3
   23644:	ldrb	r2, [r2, r7]
   23648:	ldrb	r2, [r0, r2]
   2364c:	strb	r2, [ip, r3]
   23650:	add	r3, r3, #1
   23654:	cmp	r1, r3
   23658:	bne	23634 <__assert_fail@plt+0x12408>
   2365c:	str	r1, [r4, #28]
   23660:	str	r1, [r4, #32]
   23664:	b	2359c <__assert_fail@plt+0x12370>
   23668:	ldr	r1, [r4, #48]	; 0x30
   2366c:	ldr	r0, [r4, #56]	; 0x38
   23670:	ldr	r2, [r4, #80]	; 0x50
   23674:	b	23574 <__assert_fail@plt+0x12348>
   23678:	cmp	r2, #0
   2367c:	bne	23b80 <__assert_fail@plt+0x12954>
   23680:	mov	r1, #0
   23684:	ldr	r9, [r4, #24]
   23688:	ldr	r2, [r4, #80]	; 0x50
   2368c:	str	r1, [r4, #28]
   23690:	cmp	r2, #1
   23694:	ble	239a4 <__assert_fail@plt+0x12778>
   23698:	ldrb	r1, [r4, #73]	; 0x49
   2369c:	cmp	r1, #0
   236a0:	beq	23714 <__assert_fail@plt+0x124e8>
   236a4:	ldr	r0, [r4]
   236a8:	sub	r2, r5, r2
   236ac:	sub	r1, r5, #1
   236b0:	add	ip, r0, r9
   236b4:	add	r2, ip, r2
   236b8:	add	lr, ip, r1
   236bc:	cmp	r0, r2
   236c0:	movcc	r0, r2
   236c4:	str	lr, [sp, #4]
   236c8:	cmp	lr, r0
   236cc:	str	ip, [sp, #8]
   236d0:	bcc	23714 <__assert_fail@plt+0x124e8>
   236d4:	ldrb	r2, [ip, r1]
   236d8:	and	r2, r2, #192	; 0xc0
   236dc:	cmp	r2, #128	; 0x80
   236e0:	bne	23af4 <__assert_fail@plt+0x128c8>
   236e4:	ldmib	sp, {r2, fp}
   236e8:	sub	r0, r0, #1
   236ec:	sub	r2, r2, #1
   236f0:	b	23708 <__assert_fail@plt+0x124dc>
   236f4:	ldrb	r1, [sl]
   236f8:	sub	r2, r2, #1
   236fc:	and	r1, r1, #192	; 0xc0
   23700:	cmp	r1, #128	; 0x80
   23704:	bne	23af0 <__assert_fail@plt+0x128c4>
   23708:	cmp	r0, r2
   2370c:	mov	sl, r2
   23710:	bne	236f4 <__assert_fail@plt+0x124c8>
   23714:	add	r9, r9, r3
   23718:	cmp	r7, r9
   2371c:	ble	23a24 <__assert_fail@plt+0x127f8>
   23720:	add	fp, r4, #16
   23724:	add	sl, sp, #24
   23728:	stmib	sp, {r4, r6}
   2372c:	str	r5, [sp, #12]
   23730:	ldr	r2, [sp, #4]
   23734:	mov	r3, fp
   23738:	mov	r0, sl
   2373c:	ldrd	r4, [fp]
   23740:	ldr	r1, [r2]
   23744:	ldr	r6, [r2, #44]	; 0x2c
   23748:	strd	r4, [sp, #32]
   2374c:	add	r1, r1, r9
   23750:	sub	r6, r6, r9
   23754:	mov	r2, r6
   23758:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   2375c:	sub	r3, r0, #1
   23760:	cmn	r3, #4
   23764:	ldrls	r1, [sp, #24]
   23768:	bhi	23bac <__assert_fail@plt+0x12980>
   2376c:	add	r9, r9, r0
   23770:	cmp	r7, r9
   23774:	bgt	23730 <__assert_fail@plt+0x12504>
   23778:	ldmib	sp, {r4, r6}
   2377c:	sub	r9, r9, r7
   23780:	cmn	r1, #1
   23784:	ldr	r5, [sp, #12]
   23788:	str	r9, [r4, #28]
   2378c:	beq	23a2c <__assert_fail@plt+0x12800>
   23790:	ldrb	r3, [r4, #78]	; 0x4e
   23794:	cmp	r3, #0
   23798:	bne	23c14 <__assert_fail@plt+0x129e8>
   2379c:	cmp	r1, #10
   237a0:	movne	r3, #0
   237a4:	bne	237b8 <__assert_fail@plt+0x1258c>
   237a8:	ldrb	r3, [r4, #77]	; 0x4d
   237ac:	cmp	r3, #0
   237b0:	moveq	r3, #0
   237b4:	movne	r3, #2
   237b8:	str	r3, [r4, #60]	; 0x3c
   237bc:	cmp	r9, #0
   237c0:	bne	23bd8 <__assert_fail@plt+0x129ac>
   237c4:	ldrb	r3, [r4, #75]	; 0x4b
   237c8:	str	r9, [r4, #32]
   237cc:	ldr	r1, [r4, #48]	; 0x30
   237d0:	ldr	r0, [r4, #56]	; 0x38
   237d4:	ldr	r2, [r4, #80]	; 0x50
   237d8:	sub	r1, r1, r5
   237dc:	sub	r0, r0, r5
   237e0:	b	23560 <__assert_fail@plt+0x12334>
   237e4:	mov	r3, r6
   237e8:	mov	r2, #0
   237ec:	ldr	r9, [r4, #12]
   237f0:	b	23804 <__assert_fail@plt+0x125d8>
   237f4:	bge	23998 <__assert_fail@plt+0x1276c>
   237f8:	add	r2, r1, #1
   237fc:	cmp	r2, r3
   23800:	bge	23840 <__assert_fail@plt+0x12614>
   23804:	add	r1, r2, r3
   23808:	add	r1, r1, r1, lsr #31
   2380c:	asr	r1, r1, #1
   23810:	ldr	r0, [r9, r1, lsl #2]
   23814:	cmp	r0, r5
   23818:	ble	237f4 <__assert_fail@plt+0x125c8>
   2381c:	mov	r3, r1
   23820:	b	237fc <__assert_fail@plt+0x125d0>
   23824:	ldr	r0, [r4, #4]
   23828:	add	r1, r0, r5
   2382c:	bl	10fa4 <memmove@plt>
   23830:	ldr	r2, [r4, #28]
   23834:	ldrb	r3, [r4, #75]	; 0x4b
   23838:	sub	r2, r2, r5
   2383c:	b	2353c <__assert_fail@plt+0x12310>
   23840:	cmp	r0, r5
   23844:	addlt	sl, r1, #1
   23848:	bge	23998 <__assert_fail@plt+0x1276c>
   2384c:	mov	r2, r8
   23850:	mov	r0, r4
   23854:	bl	23204 <__assert_fail@plt+0x11fd8>
   23858:	sub	r3, r5, sl
   2385c:	cmp	r6, r5
   23860:	str	r0, [r4, #60]	; 0x3c
   23864:	clz	r3, r3
   23868:	lsr	r3, r3, #5
   2386c:	movle	r3, #0
   23870:	cmp	r3, #0
   23874:	bne	23a44 <__assert_fail@plt+0x12818>
   23878:	ldr	r1, [r4, #44]	; 0x2c
   2387c:	mov	r3, #0
   23880:	cmp	sl, #0
   23884:	ldr	r0, [r4, #52]	; 0x34
   23888:	strb	r3, [r4, #76]	; 0x4c
   2388c:	sub	r1, r1, r7
   23890:	add	r2, r1, r5
   23894:	sub	r0, r0, r7
   23898:	add	r3, r0, r5
   2389c:	str	r2, [r4, #48]	; 0x30
   238a0:	str	r3, [r4, #56]	; 0x38
   238a4:	ble	238d4 <__assert_fail@plt+0x126a8>
   238a8:	sub	r3, sl, #-1073741823	; 0xc0000001
   238ac:	ldr	r2, [r9, r3, lsl #2]
   238b0:	add	r3, r9, r3, lsl #2
   238b4:	cmp	r2, r5
   238b8:	beq	238cc <__assert_fail@plt+0x126a0>
   238bc:	b	238d4 <__assert_fail@plt+0x126a8>
   238c0:	ldr	r2, [r3, #-4]!
   238c4:	cmp	r2, r5
   238c8:	bne	238d4 <__assert_fail@plt+0x126a8>
   238cc:	subs	sl, sl, #1
   238d0:	bne	238c0 <__assert_fail@plt+0x12694>
   238d4:	cmp	r6, sl
   238d8:	ble	23930 <__assert_fail@plt+0x12704>
   238dc:	ldr	r3, [r4, #8]
   238e0:	lsl	ip, sl, #2
   238e4:	ldr	r2, [r3, sl, lsl #2]
   238e8:	add	r3, r3, ip
   238ec:	cmn	r2, #1
   238f0:	beq	23904 <__assert_fail@plt+0x126d8>
   238f4:	b	23938 <__assert_fail@plt+0x1270c>
   238f8:	ldr	r2, [r3, #4]!
   238fc:	cmn	r2, #1
   23900:	bne	23938 <__assert_fail@plt+0x1270c>
   23904:	add	sl, sl, #1
   23908:	cmp	r6, sl
   2390c:	lsl	ip, sl, #2
   23910:	bne	238f8 <__assert_fail@plt+0x126cc>
   23914:	mov	r3, #0
   23918:	mov	r2, r3
   2391c:	str	r3, [r4, #28]
   23920:	ldrb	r3, [r4, #75]	; 0x4b
   23924:	str	r2, [r4, #32]
   23928:	ldr	r2, [r4, #80]	; 0x50
   2392c:	b	23560 <__assert_fail@plt+0x12334>
   23930:	beq	23914 <__assert_fail@plt+0x126e8>
   23934:	lsl	ip, sl, #2
   23938:	ldr	r2, [r9, ip]
   2393c:	sub	r2, r2, r5
   23940:	cmp	r2, #0
   23944:	str	r2, [r4, #28]
   23948:	beq	23920 <__assert_fail@plt+0x126f4>
   2394c:	ble	23974 <__assert_fail@plt+0x12748>
   23950:	ldr	r1, [r4, #8]
   23954:	mov	r3, #0
   23958:	mvn	r0, #0
   2395c:	sub	r1, r1, #4
   23960:	str	r0, [r1, #4]!
   23964:	add	r3, r3, #1
   23968:	ldr	r2, [r4, #28]
   2396c:	cmp	r2, r3
   23970:	bgt	23960 <__assert_fail@plt+0x12734>
   23974:	mov	r1, #255	; 0xff
   23978:	ldr	r0, [r4, #4]
   2397c:	bl	1116c <memset@plt>
   23980:	ldr	r2, [r4, #28]
   23984:	ldr	r1, [r4, #48]	; 0x30
   23988:	ldr	r0, [r4, #56]	; 0x38
   2398c:	sub	r1, r1, r5
   23990:	sub	r0, r0, r5
   23994:	b	23920 <__assert_fail@plt+0x126f4>
   23998:	mov	sl, r1
   2399c:	sub	r1, r1, #1
   239a0:	b	2384c <__assert_fail@plt+0x12620>
   239a4:	ldr	r3, [r4]
   239a8:	ldr	ip, [r4, #64]	; 0x40
   239ac:	add	r3, r3, r5
   239b0:	add	r9, r3, r9
   239b4:	ldrb	r0, [r9, #-1]
   239b8:	cmp	ip, #0
   239bc:	str	r1, [r4, #32]
   239c0:	ldrbne	r0, [ip, r0]
   239c4:	ldr	ip, [r4, #68]	; 0x44
   239c8:	asr	r1, r0, #5
   239cc:	and	r3, r0, #31
   239d0:	ldr	r1, [ip, r1, lsl #2]
   239d4:	lsr	r3, r1, r3
   239d8:	ands	r1, r3, #1
   239dc:	bne	239f4 <__assert_fail@plt+0x127c8>
   239e0:	cmp	r0, #10
   239e4:	bne	239f4 <__assert_fail@plt+0x127c8>
   239e8:	ldrb	r3, [r4, #77]	; 0x4d
   239ec:	cmp	r3, #0
   239f0:	movne	r1, #2
   239f4:	ldrb	r3, [r4, #75]	; 0x4b
   239f8:	str	r1, [r4, #60]	; 0x3c
   239fc:	ldr	r1, [r4, #48]	; 0x30
   23a00:	ldr	r0, [r4, #56]	; 0x38
   23a04:	cmp	r3, #0
   23a08:	sub	r1, r1, r5
   23a0c:	sub	r0, r0, r5
   23a10:	beq	23568 <__assert_fail@plt+0x1233c>
   23a14:	str	r7, [r4, #24]
   23a18:	str	r1, [r4, #48]	; 0x30
   23a1c:	str	r0, [r4, #56]	; 0x38
   23a20:	b	235f4 <__assert_fail@plt+0x123c8>
   23a24:	sub	r9, r9, r7
   23a28:	str	r9, [r4, #28]
   23a2c:	mov	r2, r8
   23a30:	sub	r1, r6, #1
   23a34:	mov	r0, r4
   23a38:	bl	23204 <__assert_fail@plt+0x11fd8>
   23a3c:	str	r0, [r4, #60]	; 0x3c
   23a40:	b	237bc <__assert_fail@plt+0x12590>
   23a44:	ldr	r3, [r9, sl, lsl #2]
   23a48:	cmp	r3, r5
   23a4c:	bne	23878 <__assert_fail@plt+0x1264c>
   23a50:	ldr	r0, [r4, #8]
   23a54:	lsl	r8, r5, #2
   23a58:	sub	r2, r6, r5
   23a5c:	lsl	r2, r2, #2
   23a60:	add	r1, r0, r8
   23a64:	bl	10fa4 <memmove@plt>
   23a68:	ldr	r0, [r4, #4]
   23a6c:	ldr	r2, [r4, #28]
   23a70:	add	r1, r0, r5
   23a74:	sub	r2, r2, r5
   23a78:	bl	10fa4 <memmove@plt>
   23a7c:	ldr	r3, [r4, #28]
   23a80:	ldr	r2, [r4, #32]
   23a84:	sub	r3, r3, r5
   23a88:	cmp	r3, #0
   23a8c:	sub	r2, r2, r5
   23a90:	str	r3, [r4, #28]
   23a94:	str	r2, [r4, #32]
   23a98:	ble	23ac8 <__assert_fail@plt+0x1289c>
   23a9c:	ldr	r1, [r4, #12]
   23aa0:	mov	r2, #0
   23aa4:	add	r0, r1, r8
   23aa8:	sub	r1, r1, #4
   23aac:	ldr	r3, [r0], #4
   23ab0:	add	r2, r2, #1
   23ab4:	sub	r3, r3, r5
   23ab8:	str	r3, [r1, #4]!
   23abc:	ldr	r3, [r4, #28]
   23ac0:	cmp	r3, r2
   23ac4:	bgt	23aac <__assert_fail@plt+0x12880>
   23ac8:	ldr	r1, [r4, #48]	; 0x30
   23acc:	ldr	r0, [r4, #56]	; 0x38
   23ad0:	ldrb	r3, [r4, #75]	; 0x4b
   23ad4:	sub	r1, r1, r5
   23ad8:	ldr	r2, [r4, #80]	; 0x50
   23adc:	sub	r0, r0, r5
   23ae0:	b	23560 <__assert_fail@plt+0x12334>
   23ae4:	mov	r0, r4
   23ae8:	bl	1f7d0 <__assert_fail@plt+0xe5a4>
   23aec:	b	2359c <__assert_fail@plt+0x12370>
   23af0:	strd	sl, [sp, #4]
   23af4:	ldr	r1, [sp, #8]
   23af8:	ldr	r2, [r4, #48]	; 0x30
   23afc:	ldr	r3, [r4, #64]	; 0x40
   23b00:	add	r2, r1, r2
   23b04:	ldr	r1, [sp, #4]
   23b08:	cmp	r3, #0
   23b0c:	sub	r2, r2, r1
   23b10:	ldreq	r1, [sp, #4]
   23b14:	bne	23c64 <__assert_fail@plt+0x12a38>
   23b18:	mov	sl, #0
   23b1c:	mov	fp, #0
   23b20:	add	r3, sp, #32
   23b24:	add	r0, sp, #20
   23b28:	strd	sl, [sp, #32]
   23b2c:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   23b30:	ldr	r3, [sp, #8]
   23b34:	add	r9, r3, r5
   23b38:	ldr	r3, [sp, #4]
   23b3c:	sub	r9, r9, r3
   23b40:	cmp	r0, r9
   23b44:	bcc	23b50 <__assert_fail@plt+0x12924>
   23b48:	cmn	r0, #3
   23b4c:	bls	23b5c <__assert_fail@plt+0x12930>
   23b50:	ldr	r9, [r4, #24]
   23b54:	ldr	r3, [r4, #32]
   23b58:	b	23714 <__assert_fail@plt+0x124e8>
   23b5c:	ldr	r1, [sp, #20]
   23b60:	sub	r9, r0, r9
   23b64:	mov	r2, #0
   23b68:	mov	r3, #0
   23b6c:	strd	r2, [r4, #16]
   23b70:	str	r9, [r4, #28]
   23b74:	cmn	r1, #1
   23b78:	bne	23790 <__assert_fail@plt+0x12564>
   23b7c:	b	23b50 <__assert_fail@plt+0x12924>
   23b80:	ldr	r1, [r4, #44]	; 0x2c
   23b84:	mov	r0, #0
   23b88:	ldr	r2, [r4, #52]	; 0x34
   23b8c:	strb	r0, [r4, #76]	; 0x4c
   23b90:	sub	r1, r1, r7
   23b94:	add	r1, r1, r5
   23b98:	sub	r2, r2, r7
   23b9c:	add	r2, r2, r5
   23ba0:	str	r1, [r4, #48]	; 0x30
   23ba4:	str	r2, [r4, #56]	; 0x38
   23ba8:	b	23680 <__assert_fail@plt+0x12454>
   23bac:	mov	r1, #0
   23bb0:	cmp	r6, r1
   23bb4:	cmpne	r0, r1
   23bb8:	beq	23bc8 <__assert_fail@plt+0x1299c>
   23bbc:	ldr	r3, [sp, #4]
   23bc0:	ldr	r3, [r3]
   23bc4:	ldrb	r1, [r3, r9]
   23bc8:	mov	r0, #1
   23bcc:	ldrd	r2, [sp, #32]
   23bd0:	strd	r2, [fp]
   23bd4:	b	2376c <__assert_fail@plt+0x12540>
   23bd8:	ble	23c00 <__assert_fail@plt+0x129d4>
   23bdc:	ldr	r2, [r4, #8]
   23be0:	mov	r3, #0
   23be4:	mvn	r1, #0
   23be8:	sub	r2, r2, #4
   23bec:	str	r1, [r2, #4]!
   23bf0:	add	r3, r3, #1
   23bf4:	ldr	r9, [r4, #28]
   23bf8:	cmp	r9, r3
   23bfc:	bgt	23bec <__assert_fail@plt+0x129c0>
   23c00:	ldrb	r3, [r4, #75]	; 0x4b
   23c04:	cmp	r3, #0
   23c08:	bne	23c4c <__assert_fail@plt+0x12a20>
   23c0c:	ldr	r9, [r4, #28]
   23c10:	b	237c8 <__assert_fail@plt+0x1259c>
   23c14:	mov	r0, r1
   23c18:	str	r1, [sp, #4]
   23c1c:	bl	11154 <iswalnum@plt>
   23c20:	ldr	r1, [sp, #4]
   23c24:	subs	r3, r1, #95	; 0x5f
   23c28:	movne	r3, #1
   23c2c:	cmp	r0, #0
   23c30:	movne	r3, #0
   23c34:	cmp	r3, #0
   23c38:	moveq	r3, #1
   23c3c:	beq	237b8 <__assert_fail@plt+0x1258c>
   23c40:	b	2379c <__assert_fail@plt+0x12570>
   23c44:	mov	r1, r3
   23c48:	b	2365c <__assert_fail@plt+0x12430>
   23c4c:	mov	r2, r9
   23c50:	mov	r1, #255	; 0xff
   23c54:	ldr	r0, [r4, #4]
   23c58:	bl	1116c <memset@plt>
   23c5c:	ldrb	r3, [r4, #75]	; 0x4b
   23c60:	b	23c0c <__assert_fail@plt+0x129e0>
   23c64:	cmp	r2, #6
   23c68:	movlt	r1, r2
   23c6c:	movge	r1, #6
   23c70:	cmp	r2, #0
   23c74:	ble	23cb4 <__assert_fail@plt+0x12a88>
   23c78:	ldrd	sl, [sp, #4]
   23c7c:	add	r0, sp, #24
   23c80:	mov	ip, r0
   23c84:	mov	lr, r0
   23c88:	sub	r0, r1, #1
   23c8c:	add	r0, ip, r0
   23c90:	add	r1, sl, r1
   23c94:	ldrb	ip, [r1, #-1]!
   23c98:	ldrb	ip, [r3, ip]
   23c9c:	cmp	sl, r1
   23ca0:	strb	ip, [r0], #-1
   23ca4:	bne	23c94 <__assert_fail@plt+0x12a68>
   23ca8:	strd	sl, [sp, #4]
   23cac:	mov	r1, lr
   23cb0:	b	23b18 <__assert_fail@plt+0x128ec>
   23cb4:	add	r3, sp, #24
   23cb8:	mov	lr, r3
   23cbc:	b	23cac <__assert_fail@plt+0x12a80>
   23cc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23cc4:	mov	r4, r1
   23cc8:	mov	r1, r2
   23ccc:	ldr	r2, [r0, #88]	; 0x58
   23cd0:	mov	r5, r0
   23cd4:	strd	r6, [sp, #8]
   23cd8:	str	r8, [sp, #16]
   23cdc:	str	lr, [sp, #20]
   23ce0:	bl	23204 <__assert_fail@plt+0x11fd8>
   23ce4:	ldr	lr, [r4, #8]
   23ce8:	cmp	lr, #0
   23cec:	ble	23d9c <__assert_fail@plt+0x12b70>
   23cf0:	ldr	r3, [r5, #84]	; 0x54
   23cf4:	mov	r2, #0
   23cf8:	and	r7, r0, #8
   23cfc:	and	r6, r0, #2
   23d00:	and	r5, r0, #1
   23d04:	ldr	r1, [r4, #12]
   23d08:	ldr	r4, [r3]
   23d0c:	sub	r1, r1, #4
   23d10:	ldr	r0, [r1, #4]!
   23d14:	add	r3, r4, r0, lsl #3
   23d18:	ldrb	ip, [r3, #4]
   23d1c:	ldr	r3, [r3, #4]
   23d20:	cmp	ip, #2
   23d24:	ubfx	r3, r3, #8, #10
   23d28:	bne	23d90 <__assert_fail@plt+0x12b64>
   23d2c:	cmp	r3, #0
   23d30:	beq	23d6c <__assert_fail@plt+0x12b40>
   23d34:	tst	r3, #4
   23d38:	beq	23d80 <__assert_fail@plt+0x12b54>
   23d3c:	cmp	r5, #0
   23d40:	beq	23d90 <__assert_fail@plt+0x12b64>
   23d44:	tst	r3, #8
   23d48:	bne	23d90 <__assert_fail@plt+0x12b64>
   23d4c:	tst	r3, #32
   23d50:	beq	23d5c <__assert_fail@plt+0x12b30>
   23d54:	cmp	r6, #0
   23d58:	beq	23d90 <__assert_fail@plt+0x12b64>
   23d5c:	tst	r3, #128	; 0x80
   23d60:	beq	23d6c <__assert_fail@plt+0x12b40>
   23d64:	cmp	r7, #0
   23d68:	beq	23d90 <__assert_fail@plt+0x12b64>
   23d6c:	ldrd	r4, [sp]
   23d70:	ldrd	r6, [sp, #8]
   23d74:	ldr	r8, [sp, #16]
   23d78:	add	sp, sp, #20
   23d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   23d80:	tst	r3, #8
   23d84:	beq	23d4c <__assert_fail@plt+0x12b20>
   23d88:	cmp	r5, #0
   23d8c:	beq	23d4c <__assert_fail@plt+0x12b20>
   23d90:	add	r2, r2, #1
   23d94:	cmp	r2, lr
   23d98:	bne	23d10 <__assert_fail@plt+0x12ae4>
   23d9c:	mov	r0, #0
   23da0:	b	23d6c <__assert_fail@plt+0x12b40>
   23da4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23da8:	strd	r6, [sp, #8]
   23dac:	strd	sl, [sp, #24]
   23db0:	ldr	fp, [r1]
   23db4:	strd	r8, [sp, #16]
   23db8:	str	lr, [sp, #32]
   23dbc:	sub	sp, sp, #12
   23dc0:	ldr	r6, [r0, #84]	; 0x54
   23dc4:	cmp	fp, #0
   23dc8:	ble	23e84 <__assert_fail@plt+0x12c58>
   23dcc:	mov	r8, r3
   23dd0:	mov	r9, r2
   23dd4:	mov	sl, r0
   23dd8:	mov	r7, r1
   23ddc:	mov	r4, #0
   23de0:	b	23dec <__assert_fail@plt+0x12bc0>
   23de4:	cmp	r4, fp
   23de8:	bge	23e84 <__assert_fail@plt+0x12c58>
   23dec:	ldr	r3, [r9]
   23df0:	ldr	ip, [r6]
   23df4:	ldr	r5, [r3, r4, lsl #2]
   23df8:	add	r4, r4, #1
   23dfc:	add	lr, ip, r5, lsl #3
   23e00:	ldrb	lr, [lr, #4]
   23e04:	cmp	lr, #8
   23e08:	bne	23de4 <__assert_fail@plt+0x12bb8>
   23e0c:	ldr	r3, [ip, r5, lsl #3]
   23e10:	cmp	r3, #31
   23e14:	bgt	23de4 <__assert_fail@plt+0x12bb8>
   23e18:	ldr	r2, [r6, #80]	; 0x50
   23e1c:	lsr	r3, r2, r3
   23e20:	tst	r3, #1
   23e24:	beq	23de4 <__assert_fail@plt+0x12bb8>
   23e28:	ldr	fp, [sl, #124]	; 0x7c
   23e2c:	ldr	r3, [sl, #128]	; 0x80
   23e30:	ldr	r2, [sl, #132]	; 0x84
   23e34:	cmp	r3, fp
   23e38:	beq	23eac <__assert_fail@plt+0x12c80>
   23e3c:	mov	r1, #24
   23e40:	mov	r0, #1
   23e44:	str	r2, [sp, #4]
   23e48:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   23e4c:	ldr	r2, [sp, #4]
   23e50:	ldr	r3, [sl, #124]	; 0x7c
   23e54:	str	r0, [r2, fp, lsl #2]
   23e58:	ldr	r2, [sl, #132]	; 0x84
   23e5c:	add	r1, r3, #1
   23e60:	ldr	r3, [r2, r3, lsl #2]
   23e64:	cmp	r3, #0
   23e68:	beq	23ea4 <__assert_fail@plt+0x12c78>
   23e6c:	str	r5, [r3, #4]
   23e70:	str	r1, [sl, #124]	; 0x7c
   23e74:	str	r8, [r3]
   23e78:	ldr	fp, [r7]
   23e7c:	cmp	r4, fp
   23e80:	blt	23dec <__assert_fail@plt+0x12bc0>
   23e84:	mov	r0, #0
   23e88:	add	sp, sp, #12
   23e8c:	ldrd	r4, [sp]
   23e90:	ldrd	r6, [sp, #8]
   23e94:	ldrd	r8, [sp, #16]
   23e98:	ldrd	sl, [sp, #24]
   23e9c:	add	sp, sp, #32
   23ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   23ea4:	mov	r0, #12
   23ea8:	b	23e88 <__assert_fail@plt+0x12c5c>
   23eac:	mov	r0, r2
   23eb0:	lsl	r1, fp, #3
   23eb4:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   23eb8:	subs	r2, r0, #0
   23ebc:	lsl	r3, fp, #1
   23ec0:	beq	23ea4 <__assert_fail@plt+0x12c78>
   23ec4:	str	r3, [sl, #128]	; 0x80
   23ec8:	str	r2, [sl, #132]	; 0x84
   23ecc:	ldr	fp, [sl, #124]	; 0x7c
   23ed0:	b	23e3c <__assert_fail@plt+0x12c10>
   23ed4:	strd	r4, [sp, #-16]!
   23ed8:	mov	r5, r0
   23edc:	mov	r0, r1
   23ee0:	mov	r4, r1
   23ee4:	str	r6, [sp, #8]
   23ee8:	str	lr, [sp, #12]
   23eec:	bl	11130 <strlen@plt>
   23ef0:	cmp	r0, #1
   23ef4:	bne	23f28 <__assert_fail@plt+0x12cfc>
   23ef8:	ldrb	r3, [r4]
   23efc:	mov	ip, #0
   23f00:	asr	r1, r3, #5
   23f04:	and	r3, r3, #31
   23f08:	ldr	r2, [r5, r1, lsl #2]
   23f0c:	orr	r3, r2, r0, lsl r3
   23f10:	str	r3, [r5, r1, lsl #2]
   23f14:	ldrd	r4, [sp]
   23f18:	mov	r0, ip
   23f1c:	ldr	r6, [sp, #8]
   23f20:	add	sp, sp, #12
   23f24:	pop	{pc}		; (ldr pc, [sp], #4)
   23f28:	mov	ip, #3
   23f2c:	b	23f14 <__assert_fail@plt+0x12ce8>
   23f30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23f34:	mov	r5, r1
   23f38:	strd	r6, [sp, #8]
   23f3c:	mov	r6, r0
   23f40:	strd	r8, [sp, #16]
   23f44:	mov	r8, r3
   23f48:	strd	sl, [sp, #24]
   23f4c:	mov	sl, r2
   23f50:	str	lr, [sp, #32]
   23f54:	sub	sp, sp, #4
   23f58:	ldr	r9, [sp, #40]	; 0x28
   23f5c:	ldr	ip, [sp, #48]	; 0x30
   23f60:	ldr	r7, [sp, #44]	; 0x2c
   23f64:	tst	ip, #4194304	; 0x400000
   23f68:	beq	23f8c <__assert_fail@plt+0x12d60>
   23f6c:	mov	r0, r7
   23f70:	movw	r1, #61792	; 0xf160
   23f74:	movt	r1, #2
   23f78:	bl	10f68 <strcmp@plt>
   23f7c:	cmp	r0, #0
   23f80:	movweq	r7, #61784	; 0xf158
   23f84:	movteq	r7, #2
   23f88:	bne	24090 <__assert_fail@plt+0x12e64>
   23f8c:	ldr	r4, [r8]
   23f90:	ldr	r3, [r9]
   23f94:	ldr	fp, [sl]
   23f98:	cmp	r3, r4
   23f9c:	beq	24174 <__assert_fail@plt+0x12f48>
   23fa0:	add	r3, r4, #1
   23fa4:	mov	r0, r7
   23fa8:	str	r3, [r8]
   23fac:	bl	10f44 <wctype@plt>
   23fb0:	movw	r1, #61808	; 0xf170
   23fb4:	movt	r1, #2
   23fb8:	str	r0, [fp, r4, lsl #2]
   23fbc:	mov	r0, r7
   23fc0:	bl	10f68 <strcmp@plt>
   23fc4:	subs	r4, r0, #0
   23fc8:	beq	24048 <__assert_fail@plt+0x12e1c>
   23fcc:	movw	r1, #61816	; 0xf178
   23fd0:	movt	r1, #2
   23fd4:	mov	r0, r7
   23fd8:	bl	10f68 <strcmp@plt>
   23fdc:	subs	r4, r0, #0
   23fe0:	bne	240b4 <__assert_fail@plt+0x12e88>
   23fe4:	bl	11118 <__ctype_b_loc@plt>
   23fe8:	ldr	r3, [r0]
   23fec:	cmp	r6, #0
   23ff0:	moveq	ip, #1
   23ff4:	sub	r3, r3, #2
   23ff8:	bne	2429c <__assert_fail@plt+0x13070>
   23ffc:	ldrh	r2, [r3, #2]!
   24000:	asr	r1, r4, #5
   24004:	and	r0, r4, #31
   24008:	add	r4, r4, #1
   2400c:	tst	r2, #2
   24010:	beq	24020 <__assert_fail@plt+0x12df4>
   24014:	ldr	r2, [r5, r1, lsl #2]
   24018:	orr	r2, r2, ip, lsl r0
   2401c:	str	r2, [r5, r1, lsl #2]
   24020:	cmp	r4, #256	; 0x100
   24024:	bne	23ffc <__assert_fail@plt+0x12dd0>
   24028:	mov	r0, #0
   2402c:	add	sp, sp, #4
   24030:	ldrd	r4, [sp]
   24034:	ldrd	r6, [sp, #8]
   24038:	ldrd	r8, [sp, #16]
   2403c:	ldrd	sl, [sp, #24]
   24040:	add	sp, sp, #32
   24044:	pop	{pc}		; (ldr pc, [sp], #4)
   24048:	bl	11118 <__ctype_b_loc@plt>
   2404c:	ldr	r3, [r0]
   24050:	cmp	r6, #0
   24054:	moveq	lr, #1
   24058:	sub	r3, r3, #2
   2405c:	bne	24260 <__assert_fail@plt+0x13034>
   24060:	ldrh	r0, [r3, #2]!
   24064:	asr	r2, r4, #5
   24068:	and	ip, r4, #31
   2406c:	add	r4, r4, #1
   24070:	tst	r0, #8
   24074:	beq	24084 <__assert_fail@plt+0x12e58>
   24078:	ldr	r1, [r5, r2, lsl #2]
   2407c:	orr	r1, r1, lr, lsl ip
   24080:	str	r1, [r5, r2, lsl #2]
   24084:	cmp	r4, #256	; 0x100
   24088:	bne	24060 <__assert_fail@plt+0x12e34>
   2408c:	b	24028 <__assert_fail@plt+0x12dfc>
   24090:	mov	r0, r7
   24094:	movw	r1, #61800	; 0xf168
   24098:	movt	r1, #2
   2409c:	bl	10f68 <strcmp@plt>
   240a0:	cmp	r0, #0
   240a4:	movw	r3, #61784	; 0xf158
   240a8:	movt	r3, #2
   240ac:	moveq	r7, r3
   240b0:	b	23f8c <__assert_fail@plt+0x12d60>
   240b4:	movw	r1, #61800	; 0xf168
   240b8:	movt	r1, #2
   240bc:	mov	r0, r7
   240c0:	bl	10f68 <strcmp@plt>
   240c4:	subs	r4, r0, #0
   240c8:	beq	2412c <__assert_fail@plt+0x12f00>
   240cc:	movw	r1, #61824	; 0xf180
   240d0:	movt	r1, #2
   240d4:	mov	r0, r7
   240d8:	bl	10f68 <strcmp@plt>
   240dc:	subs	r4, r0, #0
   240e0:	bne	241a0 <__assert_fail@plt+0x12f74>
   240e4:	bl	11118 <__ctype_b_loc@plt>
   240e8:	ldr	r3, [r0]
   240ec:	cmp	r6, #0
   240f0:	moveq	ip, #1
   240f4:	sub	r3, r3, #2
   240f8:	bne	24478 <__assert_fail@plt+0x1324c>
   240fc:	ldrh	r2, [r3, #2]!
   24100:	asr	r1, r4, #5
   24104:	and	r0, r4, #31
   24108:	add	r4, r4, #1
   2410c:	tst	r2, #8192	; 0x2000
   24110:	beq	24120 <__assert_fail@plt+0x12ef4>
   24114:	ldr	r2, [r5, r1, lsl #2]
   24118:	orr	r2, r2, ip, lsl r0
   2411c:	str	r2, [r5, r1, lsl #2]
   24120:	cmp	r4, #256	; 0x100
   24124:	bne	240fc <__assert_fail@plt+0x12ed0>
   24128:	b	24028 <__assert_fail@plt+0x12dfc>
   2412c:	bl	11118 <__ctype_b_loc@plt>
   24130:	ldr	r3, [r0]
   24134:	cmp	r6, #0
   24138:	moveq	ip, #1
   2413c:	sub	r3, r3, #2
   24140:	bne	242d8 <__assert_fail@plt+0x130ac>
   24144:	ldrh	r2, [r3, #2]!
   24148:	asr	r1, r4, #5
   2414c:	and	r0, r4, #31
   24150:	add	r4, r4, #1
   24154:	tst	r2, #512	; 0x200
   24158:	beq	24168 <__assert_fail@plt+0x12f3c>
   2415c:	ldr	r2, [r5, r1, lsl #2]
   24160:	orr	r2, r2, ip, lsl r0
   24164:	str	r2, [r5, r1, lsl #2]
   24168:	cmp	r4, #256	; 0x100
   2416c:	bne	24144 <__assert_fail@plt+0x12f18>
   24170:	b	24028 <__assert_fail@plt+0x12dfc>
   24174:	lsl	r4, r4, #1
   24178:	mov	r0, fp
   2417c:	add	r4, r4, #1
   24180:	lsl	r1, r4, #2
   24184:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   24188:	subs	fp, r0, #0
   2418c:	beq	243d4 <__assert_fail@plt+0x131a8>
   24190:	str	fp, [sl]
   24194:	str	r4, [r9]
   24198:	ldr	r4, [r8]
   2419c:	b	23fa0 <__assert_fail@plt+0x12d74>
   241a0:	movw	r1, #61784	; 0xf158
   241a4:	movt	r1, #2
   241a8:	mov	r0, r7
   241ac:	bl	10f68 <strcmp@plt>
   241b0:	subs	r4, r0, #0
   241b4:	beq	24218 <__assert_fail@plt+0x12fec>
   241b8:	movw	r1, #61832	; 0xf188
   241bc:	movt	r1, #2
   241c0:	mov	r0, r7
   241c4:	bl	10f68 <strcmp@plt>
   241c8:	subs	r4, r0, #0
   241cc:	bne	24314 <__assert_fail@plt+0x130e8>
   241d0:	bl	11118 <__ctype_b_loc@plt>
   241d4:	ldr	r3, [r0]
   241d8:	cmp	r6, #0
   241dc:	moveq	ip, #1
   241e0:	sub	r3, r3, #2
   241e4:	bne	244b4 <__assert_fail@plt+0x13288>
   241e8:	ldrh	r1, [r3, #2]!
   241ec:	asr	r2, r4, #5
   241f0:	and	r0, r4, #31
   241f4:	add	r4, r4, #1
   241f8:	tst	r1, #2048	; 0x800
   241fc:	beq	2420c <__assert_fail@plt+0x12fe0>
   24200:	ldr	r1, [r5, r2, lsl #2]
   24204:	orr	r1, r1, ip, lsl r0
   24208:	str	r1, [r5, r2, lsl #2]
   2420c:	cmp	r4, #256	; 0x100
   24210:	bne	241e8 <__assert_fail@plt+0x12fbc>
   24214:	b	24028 <__assert_fail@plt+0x12dfc>
   24218:	bl	11118 <__ctype_b_loc@plt>
   2421c:	ldr	r3, [r0]
   24220:	cmp	r6, #0
   24224:	moveq	ip, #1
   24228:	sub	r3, r3, #2
   2422c:	bne	2443c <__assert_fail@plt+0x13210>
   24230:	ldrh	r2, [r3, #2]!
   24234:	asr	r1, r4, #5
   24238:	and	r0, r4, #31
   2423c:	add	r4, r4, #1
   24240:	tst	r2, #1024	; 0x400
   24244:	beq	24254 <__assert_fail@plt+0x13028>
   24248:	ldr	r2, [r5, r1, lsl #2]
   2424c:	orr	r2, r2, ip, lsl r0
   24250:	str	r2, [r5, r1, lsl #2]
   24254:	cmp	r4, #256	; 0x100
   24258:	bne	24230 <__assert_fail@plt+0x13004>
   2425c:	b	24028 <__assert_fail@plt+0x12dfc>
   24260:	add	ip, r6, #256	; 0x100
   24264:	mov	lr, #1
   24268:	ldrh	r2, [r3, #2]!
   2426c:	tst	r2, #8
   24270:	beq	2428c <__assert_fail@plt+0x13060>
   24274:	ldrb	r2, [r6]
   24278:	asr	r0, r2, #5
   2427c:	and	r2, r2, #31
   24280:	ldr	r1, [r5, r0, lsl #2]
   24284:	orr	r2, r1, lr, lsl r2
   24288:	str	r2, [r5, r0, lsl #2]
   2428c:	add	r6, r6, #1
   24290:	cmp	ip, r6
   24294:	bne	24268 <__assert_fail@plt+0x1303c>
   24298:	b	24028 <__assert_fail@plt+0x12dfc>
   2429c:	add	ip, r6, #256	; 0x100
   242a0:	mov	lr, #1
   242a4:	ldrh	r2, [r3, #2]!
   242a8:	tst	r2, #2
   242ac:	beq	242c8 <__assert_fail@plt+0x1309c>
   242b0:	ldrb	r2, [r6]
   242b4:	asr	r0, r2, #5
   242b8:	and	r2, r2, #31
   242bc:	ldr	r1, [r5, r0, lsl #2]
   242c0:	orr	r2, r1, lr, lsl r2
   242c4:	str	r2, [r5, r0, lsl #2]
   242c8:	add	r6, r6, #1
   242cc:	cmp	ip, r6
   242d0:	bne	242a4 <__assert_fail@plt+0x13078>
   242d4:	b	24028 <__assert_fail@plt+0x12dfc>
   242d8:	add	ip, r6, #256	; 0x100
   242dc:	mov	lr, #1
   242e0:	ldrh	r2, [r3, #2]!
   242e4:	tst	r2, #512	; 0x200
   242e8:	beq	24304 <__assert_fail@plt+0x130d8>
   242ec:	ldrb	r2, [r6]
   242f0:	asr	r0, r2, #5
   242f4:	and	r2, r2, #31
   242f8:	ldr	r1, [r5, r0, lsl #2]
   242fc:	orr	r2, r1, lr, lsl r2
   24300:	str	r2, [r5, r0, lsl #2]
   24304:	add	r6, r6, #1
   24308:	cmp	ip, r6
   2430c:	bne	242e0 <__assert_fail@plt+0x130b4>
   24310:	b	24028 <__assert_fail@plt+0x12dfc>
   24314:	movw	r1, #61840	; 0xf190
   24318:	movt	r1, #2
   2431c:	mov	r0, r7
   24320:	bl	10f68 <strcmp@plt>
   24324:	subs	r4, r0, #0
   24328:	bne	24374 <__assert_fail@plt+0x13148>
   2432c:	bl	11118 <__ctype_b_loc@plt>
   24330:	ldr	r3, [r0]
   24334:	cmp	r6, #0
   24338:	moveq	ip, #1
   2433c:	sub	r3, r3, #2
   24340:	bne	246c4 <__assert_fail@plt+0x13498>
   24344:	ldrh	r2, [r3, #2]!
   24348:	asr	r1, r4, #5
   2434c:	and	r0, r4, #31
   24350:	add	r4, r4, #1
   24354:	tst	r2, #16384	; 0x4000
   24358:	beq	24368 <__assert_fail@plt+0x1313c>
   2435c:	ldr	r2, [r5, r1, lsl #2]
   24360:	orr	r2, r2, ip, lsl r0
   24364:	str	r2, [r5, r1, lsl #2]
   24368:	cmp	r4, #256	; 0x100
   2436c:	bne	24344 <__assert_fail@plt+0x13118>
   24370:	b	24028 <__assert_fail@plt+0x12dfc>
   24374:	movw	r1, #61792	; 0xf160
   24378:	movt	r1, #2
   2437c:	mov	r0, r7
   24380:	bl	10f68 <strcmp@plt>
   24384:	subs	r4, r0, #0
   24388:	bne	243dc <__assert_fail@plt+0x131b0>
   2438c:	bl	11118 <__ctype_b_loc@plt>
   24390:	ldr	r3, [r0]
   24394:	cmp	r6, #0
   24398:	moveq	ip, #1
   2439c:	sub	r3, r3, #2
   243a0:	bne	2473c <__assert_fail@plt+0x13510>
   243a4:	ldrh	r2, [r3, #2]!
   243a8:	asr	r1, r4, #5
   243ac:	and	r0, r4, #31
   243b0:	add	r4, r4, #1
   243b4:	tst	r2, #256	; 0x100
   243b8:	beq	243c8 <__assert_fail@plt+0x1319c>
   243bc:	ldr	r2, [r5, r1, lsl #2]
   243c0:	orr	r2, r2, ip, lsl r0
   243c4:	str	r2, [r5, r1, lsl #2]
   243c8:	cmp	r4, #256	; 0x100
   243cc:	bne	243a4 <__assert_fail@plt+0x13178>
   243d0:	b	24028 <__assert_fail@plt+0x12dfc>
   243d4:	mov	r0, #12
   243d8:	b	2402c <__assert_fail@plt+0x12e00>
   243dc:	movw	r1, #61848	; 0xf198
   243e0:	movt	r1, #2
   243e4:	mov	r0, r7
   243e8:	bl	10f68 <strcmp@plt>
   243ec:	subs	r4, r0, #0
   243f0:	bne	244f0 <__assert_fail@plt+0x132c4>
   243f4:	bl	11118 <__ctype_b_loc@plt>
   243f8:	ldr	r3, [r0]
   243fc:	cmp	r6, #0
   24400:	moveq	ip, #1
   24404:	sub	r3, r3, #2
   24408:	bne	24700 <__assert_fail@plt+0x134d4>
   2440c:	ldrh	r2, [r3, #2]!
   24410:	asr	r1, r4, #5
   24414:	and	r0, r4, #31
   24418:	add	r4, r4, #1
   2441c:	tst	r2, #1
   24420:	beq	24430 <__assert_fail@plt+0x13204>
   24424:	ldr	r2, [r5, r1, lsl #2]
   24428:	orr	r2, r2, ip, lsl r0
   2442c:	str	r2, [r5, r1, lsl #2]
   24430:	cmp	r4, #256	; 0x100
   24434:	bne	2440c <__assert_fail@plt+0x131e0>
   24438:	b	24028 <__assert_fail@plt+0x12dfc>
   2443c:	add	ip, r6, #256	; 0x100
   24440:	mov	lr, #1
   24444:	ldrh	r2, [r3, #2]!
   24448:	tst	r2, #1024	; 0x400
   2444c:	beq	24468 <__assert_fail@plt+0x1323c>
   24450:	ldrb	r2, [r6]
   24454:	asr	r0, r2, #5
   24458:	and	r2, r2, #31
   2445c:	ldr	r1, [r5, r0, lsl #2]
   24460:	orr	r2, r1, lr, lsl r2
   24464:	str	r2, [r5, r0, lsl #2]
   24468:	add	r6, r6, #1
   2446c:	cmp	ip, r6
   24470:	bne	24444 <__assert_fail@plt+0x13218>
   24474:	b	24028 <__assert_fail@plt+0x12dfc>
   24478:	add	ip, r6, #256	; 0x100
   2447c:	mov	lr, #1
   24480:	ldrh	r2, [r3, #2]!
   24484:	tst	r2, #8192	; 0x2000
   24488:	beq	244a4 <__assert_fail@plt+0x13278>
   2448c:	ldrb	r2, [r6]
   24490:	asr	r0, r2, #5
   24494:	and	r2, r2, #31
   24498:	ldr	r1, [r5, r0, lsl #2]
   2449c:	orr	r2, r1, lr, lsl r2
   244a0:	str	r2, [r5, r0, lsl #2]
   244a4:	add	r6, r6, #1
   244a8:	cmp	r6, ip
   244ac:	bne	24480 <__assert_fail@plt+0x13254>
   244b0:	b	24028 <__assert_fail@plt+0x12dfc>
   244b4:	add	r1, r6, #256	; 0x100
   244b8:	mov	lr, #1
   244bc:	ldrh	r2, [r3, #2]!
   244c0:	tst	r2, #2048	; 0x800
   244c4:	beq	244e0 <__assert_fail@plt+0x132b4>
   244c8:	ldrb	r2, [r6]
   244cc:	asr	ip, r2, #5
   244d0:	and	r2, r2, #31
   244d4:	ldr	r0, [r5, ip, lsl #2]
   244d8:	orr	r2, r0, lr, lsl r2
   244dc:	str	r2, [r5, ip, lsl #2]
   244e0:	add	r6, r6, #1
   244e4:	cmp	r1, r6
   244e8:	bne	244bc <__assert_fail@plt+0x13290>
   244ec:	b	24028 <__assert_fail@plt+0x12dfc>
   244f0:	movw	r1, #61856	; 0xf1a0
   244f4:	movt	r1, #2
   244f8:	mov	r0, r7
   244fc:	bl	10f68 <strcmp@plt>
   24500:	subs	r4, r0, #0
   24504:	bne	2458c <__assert_fail@plt+0x13360>
   24508:	bl	11118 <__ctype_b_loc@plt>
   2450c:	ldr	r3, [r0]
   24510:	cmp	r6, #0
   24514:	moveq	r0, #1
   24518:	sub	r3, r3, #2
   2451c:	bne	24550 <__assert_fail@plt+0x13324>
   24520:	ldrsh	r2, [r3, #2]!
   24524:	asr	r1, r4, #5
   24528:	and	ip, r4, #31
   2452c:	add	r4, r4, #1
   24530:	cmp	r2, #0
   24534:	bge	24544 <__assert_fail@plt+0x13318>
   24538:	ldr	r2, [r5, r1, lsl #2]
   2453c:	orr	r2, r2, r0, lsl ip
   24540:	str	r2, [r5, r1, lsl #2]
   24544:	cmp	r4, #256	; 0x100
   24548:	bne	24520 <__assert_fail@plt+0x132f4>
   2454c:	b	24028 <__assert_fail@plt+0x12dfc>
   24550:	add	lr, r6, #256	; 0x100
   24554:	mov	ip, #1
   24558:	ldrsh	r2, [r3, #2]!
   2455c:	cmp	r2, #0
   24560:	bge	2457c <__assert_fail@plt+0x13350>
   24564:	ldrb	r2, [r6]
   24568:	asr	r0, r2, #5
   2456c:	and	r2, r2, #31
   24570:	ldr	r1, [r5, r0, lsl #2]
   24574:	orr	r2, r1, ip, lsl r2
   24578:	str	r2, [r5, r0, lsl #2]
   2457c:	add	r6, r6, #1
   24580:	cmp	lr, r6
   24584:	bne	24558 <__assert_fail@plt+0x1332c>
   24588:	b	24028 <__assert_fail@plt+0x12dfc>
   2458c:	movw	r1, #61864	; 0xf1a8
   24590:	movt	r1, #2
   24594:	mov	r0, r7
   24598:	bl	10f68 <strcmp@plt>
   2459c:	subs	r4, r0, #0
   245a0:	bne	24628 <__assert_fail@plt+0x133fc>
   245a4:	bl	11118 <__ctype_b_loc@plt>
   245a8:	ldr	r3, [r0]
   245ac:	cmp	r6, #0
   245b0:	moveq	r0, #1
   245b4:	sub	r3, r3, #2
   245b8:	bne	245ec <__assert_fail@plt+0x133c0>
   245bc:	ldrh	r2, [r3, #2]!
   245c0:	asr	r1, r4, #5
   245c4:	and	ip, r4, #31
   245c8:	add	r4, r4, #1
   245cc:	tst	r2, #4
   245d0:	beq	245e0 <__assert_fail@plt+0x133b4>
   245d4:	ldr	r2, [r5, r1, lsl #2]
   245d8:	orr	r2, r2, r0, lsl ip
   245dc:	str	r2, [r5, r1, lsl #2]
   245e0:	cmp	r4, #256	; 0x100
   245e4:	bne	245bc <__assert_fail@plt+0x13390>
   245e8:	b	24028 <__assert_fail@plt+0x12dfc>
   245ec:	add	lr, r6, #256	; 0x100
   245f0:	mov	ip, #1
   245f4:	ldrh	r2, [r3, #2]!
   245f8:	tst	r2, #4
   245fc:	beq	24618 <__assert_fail@plt+0x133ec>
   24600:	ldrb	r2, [r6]
   24604:	asr	r0, r2, #5
   24608:	and	r2, r2, #31
   2460c:	ldr	r1, [r5, r0, lsl #2]
   24610:	orr	r2, r1, ip, lsl r2
   24614:	str	r2, [r5, r0, lsl #2]
   24618:	add	r6, r6, #1
   2461c:	cmp	r6, lr
   24620:	bne	245f4 <__assert_fail@plt+0x133c8>
   24624:	b	24028 <__assert_fail@plt+0x12dfc>
   24628:	mov	r0, r7
   2462c:	movw	r1, #61872	; 0xf1b0
   24630:	movt	r1, #2
   24634:	bl	10f68 <strcmp@plt>
   24638:	subs	r4, r0, #0
   2463c:	movne	r0, #4
   24640:	bne	2402c <__assert_fail@plt+0x12e00>
   24644:	bl	11118 <__ctype_b_loc@plt>
   24648:	ldr	r3, [r0]
   2464c:	cmp	r6, #0
   24650:	moveq	r0, #1
   24654:	sub	r3, r3, #2
   24658:	bne	2468c <__assert_fail@plt+0x13460>
   2465c:	ldrh	r2, [r3, #2]!
   24660:	asr	r1, r4, #5
   24664:	and	ip, r4, #31
   24668:	add	r4, r4, #1
   2466c:	tst	r2, #4096	; 0x1000
   24670:	beq	24680 <__assert_fail@plt+0x13454>
   24674:	ldr	r2, [r5, r1, lsl #2]
   24678:	orr	r2, r2, r0, lsl ip
   2467c:	str	r2, [r5, r1, lsl #2]
   24680:	cmp	r4, #256	; 0x100
   24684:	bne	2465c <__assert_fail@plt+0x13430>
   24688:	b	24028 <__assert_fail@plt+0x12dfc>
   2468c:	mov	ip, #1
   24690:	ldrh	r2, [r3, #2]!
   24694:	tst	r2, #4096	; 0x1000
   24698:	beq	246b4 <__assert_fail@plt+0x13488>
   2469c:	ldrb	r2, [r6, r4]
   246a0:	asr	r0, r2, #5
   246a4:	and	r2, r2, #31
   246a8:	ldr	r1, [r5, r0, lsl #2]
   246ac:	orr	r2, r1, ip, lsl r2
   246b0:	str	r2, [r5, r0, lsl #2]
   246b4:	add	r4, r4, #1
   246b8:	cmp	r4, #256	; 0x100
   246bc:	bne	24690 <__assert_fail@plt+0x13464>
   246c0:	b	24028 <__assert_fail@plt+0x12dfc>
   246c4:	add	lr, r6, #256	; 0x100
   246c8:	mov	ip, #1
   246cc:	ldrh	r2, [r3, #2]!
   246d0:	tst	r2, #16384	; 0x4000
   246d4:	beq	246f0 <__assert_fail@plt+0x134c4>
   246d8:	ldrb	r2, [r6]
   246dc:	asr	r0, r2, #5
   246e0:	and	r2, r2, #31
   246e4:	ldr	r1, [r5, r0, lsl #2]
   246e8:	orr	r2, r1, ip, lsl r2
   246ec:	str	r2, [r5, r0, lsl #2]
   246f0:	add	r6, r6, #1
   246f4:	cmp	lr, r6
   246f8:	bne	246cc <__assert_fail@plt+0x134a0>
   246fc:	b	24028 <__assert_fail@plt+0x12dfc>
   24700:	add	lr, r6, #256	; 0x100
   24704:	mov	ip, #1
   24708:	ldrh	r2, [r3, #2]!
   2470c:	tst	r2, #1
   24710:	beq	2472c <__assert_fail@plt+0x13500>
   24714:	ldrb	r2, [r6]
   24718:	asr	r0, r2, #5
   2471c:	and	r2, r2, #31
   24720:	ldr	r1, [r5, r0, lsl #2]
   24724:	orr	r2, r1, ip, lsl r2
   24728:	str	r2, [r5, r0, lsl #2]
   2472c:	add	r6, r6, #1
   24730:	cmp	lr, r6
   24734:	bne	24708 <__assert_fail@plt+0x134dc>
   24738:	b	24028 <__assert_fail@plt+0x12dfc>
   2473c:	add	lr, r6, #256	; 0x100
   24740:	mov	ip, #1
   24744:	ldrh	r2, [r3, #2]!
   24748:	tst	r2, #256	; 0x100
   2474c:	beq	24768 <__assert_fail@plt+0x1353c>
   24750:	ldrb	r2, [r6]
   24754:	asr	r0, r2, #5
   24758:	and	r2, r2, #31
   2475c:	ldr	r1, [r5, r0, lsl #2]
   24760:	orr	r2, r1, ip, lsl r2
   24764:	str	r2, [r5, r0, lsl #2]
   24768:	add	r6, r6, #1
   2476c:	cmp	r6, lr
   24770:	bne	24744 <__assert_fail@plt+0x13518>
   24774:	b	24028 <__assert_fail@plt+0x12dfc>
   24778:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2477c:	mov	r5, r3
   24780:	strd	r6, [sp, #8]
   24784:	mov	r6, r0
   24788:	mov	r0, #32
   2478c:	strd	r8, [sp, #16]
   24790:	mov	r9, #0
   24794:	strd	sl, [sp, #24]
   24798:	mov	fp, r1
   2479c:	mov	r1, #1
   247a0:	str	lr, [sp, #32]
   247a4:	sub	sp, sp, #44	; 0x2c
   247a8:	mov	sl, r2
   247ac:	ldrb	r8, [sp, #80]	; 0x50
   247b0:	str	r9, [sp, #20]
   247b4:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   247b8:	subs	r4, r0, #0
   247bc:	beq	24994 <__assert_fail@plt+0x13768>
   247c0:	mov	r1, #1
   247c4:	mov	r0, #40	; 0x28
   247c8:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   247cc:	subs	r7, r0, #0
   247d0:	beq	249a8 <__assert_fail@plt+0x1377c>
   247d4:	ldrb	ip, [r7, #16]
   247d8:	add	lr, sp, #20
   247dc:	mov	r0, fp
   247e0:	add	r3, r7, #36	; 0x24
   247e4:	add	r2, r7, #12
   247e8:	mov	r1, r4
   247ec:	bfi	ip, r8, #0, #1
   247f0:	strb	ip, [r7, #16]
   247f4:	str	lr, [sp]
   247f8:	str	sl, [sp, #4]
   247fc:	str	r9, [sp, #8]
   24800:	bl	23f30 <__assert_fail@plt+0x12d04>
   24804:	subs	sl, r0, #0
   24808:	bne	249c4 <__assert_fail@plt+0x13798>
   2480c:	ldrb	r3, [r5]
   24810:	cmp	r3, #0
   24814:	beq	2483c <__assert_fail@plt+0x13610>
   24818:	mov	ip, #1
   2481c:	asr	r1, r3, #5
   24820:	and	r0, r3, #31
   24824:	ldrb	r3, [r5, #1]!
   24828:	ldr	r2, [r4, r1, lsl #2]
   2482c:	cmp	r3, #0
   24830:	orr	r2, r2, ip, lsl r0
   24834:	str	r2, [r4, r1, lsl #2]
   24838:	bne	2481c <__assert_fail@plt+0x135f0>
   2483c:	cmp	r8, #0
   24840:	beq	24860 <__assert_fail@plt+0x13634>
   24844:	sub	r3, r4, #4
   24848:	add	r1, r4, #28
   2484c:	ldr	r2, [r3, #4]!
   24850:	mvn	r2, r2
   24854:	cmp	r1, r3
   24858:	str	r2, [r3]
   2485c:	bne	2484c <__assert_fail@plt+0x13620>
   24860:	ldr	r3, [r6, #92]	; 0x5c
   24864:	cmp	r3, #1
   24868:	ble	24894 <__assert_fail@plt+0x13668>
   2486c:	ldr	r1, [r6, #60]	; 0x3c
   24870:	sub	r3, r4, #4
   24874:	add	ip, r4, #28
   24878:	sub	r1, r1, #4
   2487c:	ldr	r2, [r3, #4]!
   24880:	ldr	r0, [r1, #4]!
   24884:	cmp	ip, r3
   24888:	and	r2, r2, r0
   2488c:	str	r2, [r3]
   24890:	bne	2487c <__assert_fail@plt+0x13650>
   24894:	add	fp, sp, #24
   24898:	mov	r5, #0
   2489c:	mov	ip, #3
   248a0:	add	r9, r6, #56	; 0x38
   248a4:	add	sl, r6, #64	; 0x40
   248a8:	mov	r3, r5
   248ac:	str	fp, [sp]
   248b0:	mov	r2, r5
   248b4:	mov	r0, r9
   248b8:	strd	r4, [sp, #24]
   248bc:	mov	r1, sl
   248c0:	strb	ip, [sp, #28]
   248c4:	bl	20d30 <__assert_fail@plt+0xfb04>
   248c8:	subs	r8, r0, #0
   248cc:	beq	24970 <__assert_fail@plt+0x13744>
   248d0:	ldr	r3, [r6, #92]	; 0x5c
   248d4:	cmp	r3, #1
   248d8:	ble	24964 <__assert_fail@plt+0x13738>
   248dc:	ldrb	ip, [r6, #88]	; 0x58
   248e0:	mov	r0, #6
   248e4:	mov	r3, r5
   248e8:	mov	r2, r5
   248ec:	mov	r1, sl
   248f0:	str	fp, [sp]
   248f4:	str	r7, [sp, #24]
   248f8:	strb	r0, [sp, #28]
   248fc:	mov	r0, r9
   24900:	orr	ip, ip, #2
   24904:	strb	ip, [r6, #88]	; 0x58
   24908:	bl	20d30 <__assert_fail@plt+0xfb04>
   2490c:	subs	r3, r0, #0
   24910:	beq	24970 <__assert_fail@plt+0x13744>
   24914:	add	ip, sp, #32
   24918:	mov	r4, #0
   2491c:	mov	r5, #0
   24920:	mov	r2, r8
   24924:	str	ip, [sp]
   24928:	mov	ip, #10
   2492c:	mov	r1, sl
   24930:	mov	r0, r9
   24934:	strd	r4, [sp, #32]
   24938:	strb	ip, [sp, #36]	; 0x24
   2493c:	bl	20d30 <__assert_fail@plt+0xfb04>
   24940:	mov	r8, r0
   24944:	mov	r0, r8
   24948:	add	sp, sp, #44	; 0x2c
   2494c:	ldrd	r4, [sp]
   24950:	ldrd	r6, [sp, #8]
   24954:	ldrd	r8, [sp, #16]
   24958:	ldrd	sl, [sp, #24]
   2495c:	add	sp, sp, #32
   24960:	pop	{pc}		; (ldr pc, [sp], #4)
   24964:	mov	r0, r7
   24968:	bl	1f998 <__assert_fail@plt+0xe76c>
   2496c:	b	24944 <__assert_fail@plt+0x13718>
   24970:	mov	r0, r4
   24974:	mov	r8, #0
   24978:	bl	13254 <__assert_fail@plt+0x2028>
   2497c:	mov	r0, r7
   24980:	bl	1f998 <__assert_fail@plt+0xe76c>
   24984:	ldr	r2, [sp, #84]	; 0x54
   24988:	mov	r3, #12
   2498c:	str	r3, [r2]
   24990:	b	24944 <__assert_fail@plt+0x13718>
   24994:	ldr	r2, [sp, #84]	; 0x54
   24998:	mov	r3, #12
   2499c:	mov	r8, r4
   249a0:	str	r3, [r2]
   249a4:	b	24944 <__assert_fail@plt+0x13718>
   249a8:	mov	r0, r4
   249ac:	mov	r8, r7
   249b0:	bl	13254 <__assert_fail@plt+0x2028>
   249b4:	ldr	r2, [sp, #84]	; 0x54
   249b8:	mov	r3, #12
   249bc:	str	r3, [r2]
   249c0:	b	24944 <__assert_fail@plt+0x13718>
   249c4:	mov	r0, r4
   249c8:	mov	r8, r9
   249cc:	bl	13254 <__assert_fail@plt+0x2028>
   249d0:	mov	r0, r7
   249d4:	bl	1f998 <__assert_fail@plt+0xe76c>
   249d8:	ldr	r3, [sp, #84]	; 0x54
   249dc:	str	sl, [r3]
   249e0:	b	24944 <__assert_fail@plt+0x13718>
   249e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   249e8:	strd	r6, [sp, #8]
   249ec:	ldr	r6, [r0]
   249f0:	strd	r8, [sp, #16]
   249f4:	strd	sl, [sp, #24]
   249f8:	str	lr, [sp, #32]
   249fc:	sub	sp, sp, #316	; 0x13c
   24a00:	ldr	ip, [r6, #92]	; 0x5c
   24a04:	cmp	ip, #1
   24a08:	ldr	ip, [r1]
   24a0c:	movne	r5, #0
   24a10:	ldreq	r5, [r0, #12]
   24a14:	ubfxeq	r5, r5, #22, #1
   24a18:	cmp	ip, #0
   24a1c:	ble	24b08 <__assert_fail@plt+0x138dc>
   24a20:	mov	r4, r3
   24a24:	mov	r3, #255	; 0xff
   24a28:	movt	r3, #32
   24a2c:	mov	r8, #0
   24a30:	str	r5, [sp, #4]
   24a34:	str	r2, [sp, #8]
   24a38:	str	r4, [sp, #12]
   24a3c:	str	r3, [sp, #32]
   24a40:	mov	r3, #1
   24a44:	movt	r3, #32
   24a48:	str	r1, [sp, #20]
   24a4c:	str	r0, [sp, #24]
   24a50:	str	r3, [sp, #36]	; 0x24
   24a54:	b	24a88 <__assert_fail@plt+0x1385c>
   24a58:	cmp	r7, #3
   24a5c:	beq	24cb8 <__assert_fail@plt+0x13a8c>
   24a60:	cmp	r7, #6
   24a64:	beq	24b24 <__assert_fail@plt+0x138f8>
   24a68:	and	r3, r7, #253	; 0xfd
   24a6c:	cmp	r3, #5
   24a70:	beq	24e70 <__assert_fail@plt+0x13c44>
   24a74:	cmp	r7, #2
   24a78:	beq	24e90 <__assert_fail@plt+0x13c64>
   24a7c:	add	r8, r8, #1
   24a80:	cmp	r8, ip
   24a84:	bge	24b08 <__assert_fail@plt+0x138dc>
   24a88:	ldr	r3, [sp, #8]
   24a8c:	ldr	r2, [r6]
   24a90:	ldr	r3, [r3]
   24a94:	ldr	r9, [r3, r8, lsl #2]
   24a98:	lsl	r3, r9, #3
   24a9c:	str	r3, [sp]
   24aa0:	add	r3, r2, r3
   24aa4:	ldrb	r7, [r3, #4]
   24aa8:	cmp	r7, #1
   24aac:	bne	24a58 <__assert_fail@plt+0x1382c>
   24ab0:	ldr	r3, [sp, #4]
   24ab4:	ldrb	fp, [r2, r9, lsl #3]
   24ab8:	ldr	r4, [sp, #12]
   24abc:	cmp	r3, #0
   24ac0:	strb	r7, [r4, fp]
   24ac4:	beq	24ad8 <__assert_fail@plt+0x138ac>
   24ac8:	bl	110dc <__ctype_tolower_loc@plt>
   24acc:	ldr	r3, [r0]
   24ad0:	ldr	r3, [r3, fp, lsl #2]
   24ad4:	strb	r7, [r4, r3]
   24ad8:	ldr	r3, [sp, #24]
   24adc:	ldr	r3, [r3, #12]
   24ae0:	tst	r3, #4194304	; 0x400000
   24ae4:	beq	24af4 <__assert_fail@plt+0x138c8>
   24ae8:	ldr	r3, [r6, #92]	; 0x5c
   24aec:	cmp	r3, #1
   24af0:	bgt	24d70 <__assert_fail@plt+0x13b44>
   24af4:	ldr	r3, [sp, #20]
   24af8:	add	r8, r8, #1
   24afc:	ldr	ip, [r3]
   24b00:	cmp	r8, ip
   24b04:	blt	24a88 <__assert_fail@plt+0x1385c>
   24b08:	add	sp, sp, #316	; 0x13c
   24b0c:	ldrd	r4, [sp]
   24b10:	ldrd	r6, [sp, #8]
   24b14:	ldrd	r8, [sp, #16]
   24b18:	ldrd	sl, [sp, #24]
   24b1c:	add	sp, sp, #32
   24b20:	pop	{pc}		; (ldr pc, [sp], #4)
   24b24:	ldr	r2, [r6, #92]	; 0x5c
   24b28:	ldr	fp, [r3]
   24b2c:	cmp	r2, #1
   24b30:	ble	24b58 <__assert_fail@plt+0x1392c>
   24b34:	ldr	r2, [fp, #36]	; 0x24
   24b38:	cmp	r2, #0
   24b3c:	bne	24c54 <__assert_fail@plt+0x13a28>
   24b40:	ldrb	r2, [fp, #16]
   24b44:	tst	r2, #1
   24b48:	bne	24c54 <__assert_fail@plt+0x13a28>
   24b4c:	ldr	r2, [fp, #32]
   24b50:	cmp	r2, #0
   24b54:	bne	24c54 <__assert_fail@plt+0x13a28>
   24b58:	ldr	r2, [fp, #20]
   24b5c:	cmp	r2, #0
   24b60:	ble	24a7c <__assert_fail@plt+0x13850>
   24b64:	mov	r5, fp
   24b68:	mov	r7, #0
   24b6c:	str	r8, [sp, #16]
   24b70:	add	r9, sp, #56	; 0x38
   24b74:	add	sl, sp, #48	; 0x30
   24b78:	ldr	r4, [sp, #12]
   24b7c:	ldr	fp, [sp, #24]
   24b80:	b	24b90 <__assert_fail@plt+0x13964>
   24b84:	ldr	r2, [r5, #20]
   24b88:	cmp	r7, r2
   24b8c:	bge	24c48 <__assert_fail@plt+0x13a1c>
   24b90:	mov	r2, #0
   24b94:	mov	r3, #0
   24b98:	lsl	r8, r7, #2
   24b9c:	mov	r0, r9
   24ba0:	strd	r2, [sl]
   24ba4:	mov	r2, sl
   24ba8:	ldr	r1, [r5]
   24bac:	ldr	r1, [r1, r7, lsl #2]
   24bb0:	add	r7, r7, #1
   24bb4:	bl	10f50 <wcrtomb@plt>
   24bb8:	cmn	r0, #1
   24bbc:	beq	24bf4 <__assert_fail@plt+0x139c8>
   24bc0:	ldr	r3, [sp, #4]
   24bc4:	ldrb	r2, [sp, #56]	; 0x38
   24bc8:	cmp	r3, #0
   24bcc:	mov	r3, #1
   24bd0:	str	r2, [sp]
   24bd4:	strb	r3, [r4, r2]
   24bd8:	beq	24bf4 <__assert_fail@plt+0x139c8>
   24bdc:	bl	110dc <__ctype_tolower_loc@plt>
   24be0:	ldr	r1, [r0]
   24be4:	mov	r3, #1
   24be8:	ldr	r2, [sp]
   24bec:	ldr	r2, [r1, r2, lsl #2]
   24bf0:	strb	r3, [r4, r2]
   24bf4:	ldr	r2, [fp, #12]
   24bf8:	tst	r2, #4194304	; 0x400000
   24bfc:	beq	24b84 <__assert_fail@plt+0x13958>
   24c00:	ldr	r2, [r6, #92]	; 0x5c
   24c04:	cmp	r2, #1
   24c08:	ble	24b84 <__assert_fail@plt+0x13958>
   24c0c:	ldr	r2, [r5]
   24c10:	ldr	r0, [r2, r8]
   24c14:	bl	10fec <towlower@plt>
   24c18:	mov	r1, r0
   24c1c:	mov	r2, sl
   24c20:	mov	r0, r9
   24c24:	bl	10f50 <wcrtomb@plt>
   24c28:	cmn	r0, #1
   24c2c:	beq	24b84 <__assert_fail@plt+0x13958>
   24c30:	ldrb	r2, [sp, #56]	; 0x38
   24c34:	mov	r3, #1
   24c38:	strb	r3, [r4, r2]
   24c3c:	ldr	r2, [r5, #20]
   24c40:	cmp	r7, r2
   24c44:	blt	24b90 <__assert_fail@plt+0x13964>
   24c48:	str	r4, [sp, #12]
   24c4c:	ldr	r8, [sp, #16]
   24c50:	b	24af4 <__assert_fail@plt+0x138c8>
   24c54:	ldr	r5, [sp, #4]
   24c58:	mov	r3, #0
   24c5c:	add	r9, sp, #56	; 0x38
   24c60:	add	sl, sp, #48	; 0x30
   24c64:	mov	r7, #1
   24c68:	ldr	r4, [sp, #12]
   24c6c:	strb	r3, [sp, #48]	; 0x30
   24c70:	mov	r0, #0
   24c74:	mov	r1, #0
   24c78:	mov	r3, r9
   24c7c:	mov	r2, #1
   24c80:	strd	r0, [r9]
   24c84:	mov	r1, sl
   24c88:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   24c8c:	ldrb	r3, [sp, #48]	; 0x30
   24c90:	cmn	r0, #2
   24c94:	strbeq	r7, [r4, r3]
   24c98:	add	r3, r3, #1
   24c9c:	uxtb	r3, r3
   24ca0:	cmp	r3, #0
   24ca4:	strb	r3, [sp, #48]	; 0x30
   24ca8:	bne	24c70 <__assert_fail@plt+0x13a44>
   24cac:	str	r5, [sp, #4]
   24cb0:	str	r4, [sp, #12]
   24cb4:	b	24af4 <__assert_fail@plt+0x138c8>
   24cb8:	ldr	r4, [sp, #12]
   24cbc:	mov	sl, #0
   24cc0:	mov	r9, #32
   24cc4:	str	r8, [sp, #28]
   24cc8:	mov	fp, #1
   24ccc:	mov	r5, sl
   24cd0:	ldr	r8, [sp, #4]
   24cd4:	str	r6, [sp, #16]
   24cd8:	ldr	r3, [sp]
   24cdc:	sub	r7, r9, #32
   24ce0:	ldr	r2, [r2, r3]
   24ce4:	ldr	r6, [r2, sl]
   24ce8:	add	r3, r5, r7
   24cec:	add	r2, r4, r7
   24cf0:	lsr	r3, r6, r3
   24cf4:	tst	r3, #1
   24cf8:	beq	24d28 <__assert_fail@plt+0x13afc>
   24cfc:	cmp	r8, #0
   24d00:	add	r3, r7, #128	; 0x80
   24d04:	strb	fp, [r4, r7]
   24d08:	beq	24d28 <__assert_fail@plt+0x13afc>
   24d0c:	cmp	r3, #384	; 0x180
   24d10:	bcs	24d24 <__assert_fail@plt+0x13af8>
   24d14:	bl	110dc <__ctype_tolower_loc@plt>
   24d18:	ldr	r3, [r0]
   24d1c:	ldr	r2, [r3, r7, lsl #2]
   24d20:	add	r2, r4, r2
   24d24:	strb	fp, [r2]
   24d28:	add	r7, r7, #1
   24d2c:	cmp	r9, r7
   24d30:	bne	24ce8 <__assert_fail@plt+0x13abc>
   24d34:	add	r9, r9, #32
   24d38:	add	sl, sl, #4
   24d3c:	cmp	r9, #288	; 0x120
   24d40:	sub	r5, r5, #32
   24d44:	beq	24d54 <__assert_fail@plt+0x13b28>
   24d48:	ldr	r3, [sp, #16]
   24d4c:	ldr	r2, [r3]
   24d50:	b	24cd8 <__assert_fail@plt+0x13aac>
   24d54:	str	r8, [sp, #4]
   24d58:	ldr	r3, [sp, #20]
   24d5c:	str	r4, [sp, #12]
   24d60:	ldr	r6, [sp, #16]
   24d64:	ldr	r8, [sp, #28]
   24d68:	ldr	ip, [r3]
   24d6c:	b	24a7c <__assert_fail@plt+0x13850>
   24d70:	ldr	r3, [r6]
   24d74:	add	r2, r9, #1
   24d78:	ldrb	r1, [r3, r9, lsl #3]
   24d7c:	strb	r1, [sp, #56]	; 0x38
   24d80:	ldr	r1, [r6, #8]
   24d84:	cmp	r2, r1
   24d88:	bcs	24eb8 <__assert_fail@plt+0x13c8c>
   24d8c:	ldr	r1, [sp]
   24d90:	ldr	r0, [sp, #32]
   24d94:	add	sl, r1, #8
   24d98:	add	r3, r3, sl
   24d9c:	ldr	r1, [r3, #4]
   24da0:	and	r1, r1, r0
   24da4:	ldr	r0, [sp, #36]	; 0x24
   24da8:	cmp	r1, r0
   24dac:	bne	24eb8 <__assert_fail@plt+0x13c8c>
   24db0:	add	r7, sp, #57	; 0x39
   24db4:	ldr	r5, [sp, #4]
   24db8:	ldr	r4, [sp, #12]
   24dbc:	ldr	r0, [sp, #32]
   24dc0:	ldr	ip, [sp, #36]	; 0x24
   24dc4:	b	24de0 <__assert_fail@plt+0x13bb4>
   24dc8:	ldr	r3, [r6]
   24dcc:	add	r3, r3, r2, lsl #3
   24dd0:	ldr	r1, [r3, #4]
   24dd4:	and	r1, r1, r0
   24dd8:	cmp	r1, ip
   24ddc:	bne	24df8 <__assert_fail@plt+0x13bcc>
   24de0:	ldrb	r3, [r3]
   24de4:	add	r2, r2, #1
   24de8:	strb	r3, [r7], #1
   24dec:	ldr	r3, [r6, #8]
   24df0:	cmp	r3, r2
   24df4:	bhi	24dc8 <__assert_fail@plt+0x13b9c>
   24df8:	add	r9, sp, #56	; 0x38
   24dfc:	str	r5, [sp, #4]
   24e00:	sub	r7, r7, r9
   24e04:	str	r4, [sp, #12]
   24e08:	add	sl, sp, #48	; 0x30
   24e0c:	mov	r4, #0
   24e10:	mov	r5, #0
   24e14:	mov	r2, r7
   24e18:	mov	r3, sl
   24e1c:	mov	r1, r9
   24e20:	add	r0, sp, #44	; 0x2c
   24e24:	strd	r4, [sl]
   24e28:	bl	1c0d0 <__assert_fail@plt+0xaea4>
   24e2c:	cmp	r0, r7
   24e30:	bne	24af4 <__assert_fail@plt+0x138c8>
   24e34:	ldr	r0, [sp, #44]	; 0x2c
   24e38:	bl	10fec <towlower@plt>
   24e3c:	mov	r1, r0
   24e40:	mov	r2, sl
   24e44:	mov	r0, r9
   24e48:	bl	10f50 <wcrtomb@plt>
   24e4c:	cmn	r0, #1
   24e50:	beq	24af4 <__assert_fail@plt+0x138c8>
   24e54:	ldrb	r3, [sp, #56]	; 0x38
   24e58:	mov	r2, #1
   24e5c:	ldr	r1, [sp, #12]
   24e60:	strb	r2, [r1, r3]
   24e64:	ldr	r3, [sp, #20]
   24e68:	ldr	ip, [r3]
   24e6c:	b	24a7c <__assert_fail@plt+0x13850>
   24e70:	ldr	r4, [sp, #12]
   24e74:	mov	r2, #256	; 0x100
   24e78:	mov	r1, #1
   24e7c:	mov	r0, r4
   24e80:	bl	1116c <memset@plt>
   24e84:	cmp	r7, #2
   24e88:	bne	24b08 <__assert_fail@plt+0x138dc>
   24e8c:	b	24ea4 <__assert_fail@plt+0x13c78>
   24e90:	ldr	r4, [sp, #12]
   24e94:	mov	r2, #256	; 0x100
   24e98:	mov	r1, #1
   24e9c:	mov	r0, r4
   24ea0:	bl	1116c <memset@plt>
   24ea4:	ldr	r2, [sp, #24]
   24ea8:	ldrb	r3, [r2, #28]
   24eac:	orr	r3, r3, #1
   24eb0:	strb	r3, [r2, #28]
   24eb4:	b	24b08 <__assert_fail@plt+0x138dc>
   24eb8:	add	r9, sp, #56	; 0x38
   24ebc:	b	24e08 <__assert_fail@plt+0x13bdc>
   24ec0:	add	ip, r0, r2, lsl #3
   24ec4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24ec8:	strd	r6, [sp, #8]
   24ecc:	str	sl, [sp, #24]
   24ed0:	ldrb	sl, [ip, #4]
   24ed4:	strd	r8, [sp, #16]
   24ed8:	str	lr, [sp, #28]
   24edc:	cmp	sl, #7
   24ee0:	beq	2504c <__assert_fail@plt+0x13e20>
   24ee4:	ldr	ip, [r3, #80]	; 0x50
   24ee8:	cmp	ip, #1
   24eec:	beq	24f34 <__assert_fail@plt+0x13d08>
   24ef0:	mov	r9, r1
   24ef4:	mov	r5, r0
   24ef8:	ldr	r1, [sp, #32]
   24efc:	mov	r0, r3
   24f00:	mov	r8, r3
   24f04:	mov	r6, r2
   24f08:	bl	20568 <__assert_fail@plt+0xf33c>
   24f0c:	cmp	sl, #5
   24f10:	mov	r7, r0
   24f14:	beq	24f54 <__assert_fail@plt+0x13d28>
   24f18:	sub	r4, sl, #6
   24f1c:	cmp	r0, #1
   24f20:	clz	r4, r4
   24f24:	lsr	r4, r4, #5
   24f28:	movle	r4, #0
   24f2c:	cmp	r4, #0
   24f30:	bne	24f9c <__assert_fail@plt+0x13d70>
   24f34:	mov	r7, #0
   24f38:	mov	r0, r7
   24f3c:	ldrd	r4, [sp]
   24f40:	ldrd	r6, [sp, #8]
   24f44:	ldrd	r8, [sp, #16]
   24f48:	ldr	sl, [sp, #24]
   24f4c:	add	sp, sp, #28
   24f50:	pop	{pc}		; (ldr pc, [sp], #4)
   24f54:	cmp	r0, #1
   24f58:	ble	24f34 <__assert_fail@plt+0x13d08>
   24f5c:	ldr	r3, [r9]
   24f60:	tst	r3, #64	; 0x40
   24f64:	bne	24f7c <__assert_fail@plt+0x13d50>
   24f68:	ldr	r2, [r8, #4]
   24f6c:	ldr	r1, [sp, #32]
   24f70:	ldrb	r2, [r2, r1]
   24f74:	cmp	r2, #10
   24f78:	beq	24f34 <__assert_fail@plt+0x13d08>
   24f7c:	tst	r3, #128	; 0x80
   24f80:	beq	24f38 <__assert_fail@plt+0x13d0c>
   24f84:	ldr	r3, [r8, #4]
   24f88:	ldr	r2, [sp, #32]
   24f8c:	ldrb	r3, [r3, r2]
   24f90:	cmp	r3, #0
   24f94:	beq	24f34 <__assert_fail@plt+0x13d08>
   24f98:	b	24f38 <__assert_fail@plt+0x13d0c>
   24f9c:	ldr	r6, [r5, r6, lsl #3]
   24fa0:	ldr	r0, [r6, #20]
   24fa4:	ldr	ip, [r6, #32]
   24fa8:	cmp	ip, #0
   24fac:	bne	24fbc <__assert_fail@plt+0x13d90>
   24fb0:	ldr	r3, [r6, #36]	; 0x24
   24fb4:	orrs	r3, r0, r3
   24fb8:	beq	25120 <__assert_fail@plt+0x13ef4>
   24fbc:	ldr	r3, [r8, #8]
   24fc0:	cmp	r0, #0
   24fc4:	ldr	r2, [sp, #32]
   24fc8:	ldr	r4, [r3, r2, lsl #2]
   24fcc:	ble	25000 <__assert_fail@plt+0x13dd4>
   24fd0:	ldr	r2, [r6]
   24fd4:	ldr	r3, [r2]
   24fd8:	cmp	r4, r3
   24fdc:	beq	2503c <__assert_fail@plt+0x13e10>
   24fe0:	mov	r3, #0
   24fe4:	b	24ff4 <__assert_fail@plt+0x13dc8>
   24fe8:	ldr	r1, [r2, #4]!
   24fec:	cmp	r4, r1
   24ff0:	beq	2503c <__assert_fail@plt+0x13e10>
   24ff4:	add	r3, r3, #1
   24ff8:	cmp	r0, r3
   24ffc:	bne	24fe8 <__assert_fail@plt+0x13dbc>
   25000:	ldr	r3, [r6, #36]	; 0x24
   25004:	cmp	r3, #0
   25008:	ble	250e4 <__assert_fail@plt+0x13eb8>
   2500c:	mov	r5, #0
   25010:	b	25020 <__assert_fail@plt+0x13df4>
   25014:	ldr	r3, [r6, #36]	; 0x24
   25018:	cmp	r5, r3
   2501c:	bge	250e0 <__assert_fail@plt+0x13eb4>
   25020:	ldr	r3, [r6, #12]
   25024:	mov	r0, r4
   25028:	ldr	r1, [r3, r5, lsl #2]
   2502c:	add	r5, r5, #1
   25030:	bl	10f5c <iswctype@plt>
   25034:	cmp	r0, #0
   25038:	beq	25014 <__assert_fail@plt+0x13de8>
   2503c:	ldrb	r3, [r6, #16]
   25040:	tst	r3, #1
   25044:	beq	24f38 <__assert_fail@plt+0x13d0c>
   25048:	b	24f34 <__assert_fail@plt+0x13d08>
   2504c:	ldr	r2, [r3, #4]
   25050:	ldr	r1, [sp, #32]
   25054:	ldr	r0, [sp, #32]
   25058:	ldrb	r1, [r2, r1]
   2505c:	add	r0, r2, r0
   25060:	cmp	r1, #193	; 0xc1
   25064:	bls	24f34 <__assert_fail@plt+0x13d08>
   25068:	ldr	ip, [sp, #32]
   2506c:	ldr	r3, [r3, #48]	; 0x30
   25070:	add	ip, ip, #1
   25074:	cmp	ip, r3
   25078:	bge	24f34 <__assert_fail@plt+0x13d08>
   2507c:	cmp	r1, #223	; 0xdf
   25080:	ldrb	ip, [r0, #1]
   25084:	bls	2514c <__assert_fail@plt+0x13f20>
   25088:	cmp	r1, #239	; 0xef
   2508c:	bhi	25130 <__assert_fail@plt+0x13f04>
   25090:	cmp	ip, #159	; 0x9f
   25094:	cmpls	r1, #224	; 0xe0
   25098:	movne	r7, #3
   2509c:	beq	24f34 <__assert_fail@plt+0x13d08>
   250a0:	ldr	r1, [sp, #32]
   250a4:	add	r1, r1, r7
   250a8:	cmp	r3, r1
   250ac:	blt	24f34 <__assert_fail@plt+0x13d08>
   250b0:	ldr	r3, [sp, #32]
   250b4:	sub	r3, r3, #1
   250b8:	add	r3, r2, r3
   250bc:	add	r3, r3, r7
   250c0:	b	250cc <__assert_fail@plt+0x13ea0>
   250c4:	cmp	r3, r0
   250c8:	beq	24f38 <__assert_fail@plt+0x13d0c>
   250cc:	ldrb	r2, [r0, #1]!
   250d0:	eor	r2, r2, #128	; 0x80
   250d4:	cmp	r2, #63	; 0x3f
   250d8:	bls	250c4 <__assert_fail@plt+0x13e98>
   250dc:	b	24f34 <__assert_fail@plt+0x13d08>
   250e0:	ldr	ip, [r6, #32]
   250e4:	cmp	ip, #0
   250e8:	ble	25120 <__assert_fail@plt+0x13ef4>
   250ec:	ldr	r2, [r6, #4]
   250f0:	mov	r3, #0
   250f4:	sub	r2, r2, #4
   250f8:	ldr	r1, [r2, #4]!
   250fc:	cmp	r4, r1
   25100:	bcc	25114 <__assert_fail@plt+0x13ee8>
   25104:	ldr	r1, [r6, #8]
   25108:	ldr	r1, [r1, r3, lsl #2]
   2510c:	cmp	r4, r1
   25110:	bls	2503c <__assert_fail@plt+0x13e10>
   25114:	add	r3, r3, #1
   25118:	cmp	r3, ip
   2511c:	bne	250f8 <__assert_fail@plt+0x13ecc>
   25120:	ldrb	r3, [r6, #16]
   25124:	tst	r3, #1
   25128:	bne	24f38 <__assert_fail@plt+0x13d0c>
   2512c:	b	24f34 <__assert_fail@plt+0x13d08>
   25130:	cmp	r1, #247	; 0xf7
   25134:	bhi	25160 <__assert_fail@plt+0x13f34>
   25138:	cmp	ip, #143	; 0x8f
   2513c:	cmpls	r1, #240	; 0xf0
   25140:	movne	r7, #4
   25144:	bne	250a0 <__assert_fail@plt+0x13e74>
   25148:	b	24f34 <__assert_fail@plt+0x13d08>
   2514c:	eor	ip, ip, #128	; 0x80
   25150:	cmp	ip, #63	; 0x3f
   25154:	movls	r7, #2
   25158:	bls	24f38 <__assert_fail@plt+0x13d0c>
   2515c:	b	24f34 <__assert_fail@plt+0x13d08>
   25160:	cmp	r1, #251	; 0xfb
   25164:	bhi	2517c <__assert_fail@plt+0x13f50>
   25168:	cmp	ip, #135	; 0x87
   2516c:	cmpls	r1, #248	; 0xf8
   25170:	movne	r7, #5
   25174:	bne	250a0 <__assert_fail@plt+0x13e74>
   25178:	b	24f34 <__assert_fail@plt+0x13d08>
   2517c:	cmp	r1, #253	; 0xfd
   25180:	bhi	24f34 <__assert_fail@plt+0x13d08>
   25184:	cmp	ip, #131	; 0x83
   25188:	cmpls	r1, #252	; 0xfc
   2518c:	beq	24f34 <__assert_fail@plt+0x13d08>
   25190:	mov	r7, #6
   25194:	b	250a0 <__assert_fail@plt+0x13e74>
   25198:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2519c:	mov	r5, r0
   251a0:	ldr	r0, [r0, #84]	; 0x54
   251a4:	ldr	r4, [r1, #4]
   251a8:	strd	r6, [sp, #8]
   251ac:	mov	r7, r2
   251b0:	mov	r6, #0
   251b4:	strd	sl, [sp, #24]
   251b8:	mov	sl, r3
   251bc:	ldr	r3, [r0]
   251c0:	strd	r8, [sp, #16]
   251c4:	str	lr, [sp, #32]
   251c8:	sub	sp, sp, #84	; 0x54
   251cc:	ldr	r2, [r5, #120]	; 0x78
   251d0:	str	r0, [sp, #20]
   251d4:	str	r1, [sp, #36]	; 0x24
   251d8:	ldr	r1, [sp, #124]	; 0x7c
   251dc:	ldr	r3, [r3, r7, lsl #3]
   251e0:	add	r2, r1, r2
   251e4:	cmp	r2, r4
   251e8:	str	r3, [sp, #28]
   251ec:	str	r6, [sp, #48]	; 0x30
   251f0:	bge	256dc <__assert_fail@plt+0x144b0>
   251f4:	ldr	r3, [sp, #36]	; 0x24
   251f8:	ldr	r2, [r5, #88]	; 0x58
   251fc:	ldr	r4, [r3]
   25200:	ldr	r8, [r3, #8]
   25204:	ldr	r3, [r5, #40]	; 0x28
   25208:	cmp	r4, #0
   2520c:	str	r3, [sp, #44]	; 0x2c
   25210:	ldr	r3, [r5, #100]	; 0x64
   25214:	str	r3, [sp, #40]	; 0x28
   25218:	beq	25668 <__assert_fail@plt+0x1443c>
   2521c:	sub	r1, r4, #1
   25220:	mov	r0, r5
   25224:	str	r4, [r5, #40]	; 0x28
   25228:	str	r8, [r5, #100]	; 0x64
   2522c:	bl	23204 <__assert_fail@plt+0x11fd8>
   25230:	cmp	r4, sl
   25234:	mov	r6, r0
   25238:	beq	25680 <__assert_fail@plt+0x14454>
   2523c:	ldr	sl, [r8, r4, lsl #2]
   25240:	cmp	sl, #0
   25244:	beq	25730 <__assert_fail@plt+0x14504>
   25248:	ldrb	r3, [sl, #52]	; 0x34
   2524c:	ands	r3, r3, #64	; 0x40
   25250:	bne	25560 <__assert_fail@plt+0x14334>
   25254:	add	r2, sp, #56	; 0x38
   25258:	str	r2, [sp, #8]
   2525c:	str	r3, [sp, #56]	; 0x38
   25260:	str	r3, [sp, #60]	; 0x3c
   25264:	str	r3, [sp, #64]	; 0x40
   25268:	ldr	r3, [sp, #124]	; 0x7c
   2526c:	cmp	r4, r3
   25270:	bge	254f8 <__assert_fail@plt+0x142cc>
   25274:	ldr	r3, [r5, #120]	; 0x78
   25278:	cmp	r3, #0
   2527c:	blt	254f8 <__assert_fail@plt+0x142cc>
   25280:	ldr	r3, [r5, #100]	; 0x64
   25284:	mov	r2, #0
   25288:	add	fp, r4, #1
   2528c:	str	r2, [sp, #12]
   25290:	ldr	r1, [r3, fp, lsl #2]
   25294:	lsl	r3, fp, #2
   25298:	sub	r6, fp, #1
   2529c:	str	r3, [sp, #16]
   252a0:	mov	r3, #0
   252a4:	cmp	r1, r3
   252a8:	str	r3, [sp, #60]	; 0x3c
   252ac:	beq	255f8 <__assert_fail@plt+0x143cc>
   252b0:	add	r1, r1, #4
   252b4:	ldr	r0, [sp, #8]
   252b8:	bl	21e88 <__assert_fail@plt+0x10c5c>
   252bc:	cmp	r0, #0
   252c0:	str	r0, [sp, #48]	; 0x30
   252c4:	bne	25618 <__assert_fail@plt+0x143ec>
   252c8:	cmp	sl, #0
   252cc:	beq	25440 <__assert_fail@plt+0x14214>
   252d0:	ldr	r3, [sl, #20]
   252d4:	mov	r2, #0
   252d8:	str	r2, [sp, #52]	; 0x34
   252dc:	str	r2, [sp, #68]	; 0x44
   252e0:	str	r2, [sp, #72]	; 0x48
   252e4:	cmp	r3, r2
   252e8:	str	r2, [sp, #76]	; 0x4c
   252ec:	ldr	r7, [r5, #84]	; 0x54
   252f0:	ble	25780 <__assert_fail@plt+0x14554>
   252f4:	mov	r2, r7
   252f8:	mov	r8, #0
   252fc:	str	fp, [sp, #32]
   25300:	ldr	r3, [sl, #24]
   25304:	ldr	r0, [r2], #128	; 0x80
   25308:	ldr	r4, [r3]
   2530c:	str	r2, [sp, #24]
   25310:	lsl	r9, r4, #3
   25314:	add	r3, r0, r9
   25318:	b	25374 <__assert_fail@plt+0x14148>
   2531c:	add	r1, r0, r9
   25320:	mov	r2, r6
   25324:	mov	r0, r5
   25328:	bl	2331c <__assert_fail@plt+0x120f0>
   2532c:	cmp	r0, #0
   25330:	beq	25350 <__assert_fail@plt+0x14124>
   25334:	lsl	fp, r4, #2
   25338:	ldr	r3, [r7, #12]
   2533c:	ldr	r0, [sp, #8]
   25340:	ldr	r1, [r3, fp]
   25344:	bl	1fff0 <__assert_fail@plt+0xedc4>
   25348:	cmp	r0, #0
   2534c:	beq	25608 <__assert_fail@plt+0x143dc>
   25350:	ldr	r3, [sl, #20]
   25354:	add	r8, r8, #1
   25358:	cmp	r8, r3
   2535c:	bge	25628 <__assert_fail@plt+0x143fc>
   25360:	ldr	r3, [sl, #24]
   25364:	ldr	r0, [r7]
   25368:	ldr	r4, [r3, r8, lsl #2]
   2536c:	lsl	r9, r4, #3
   25370:	add	r3, r0, r9
   25374:	ldrb	r3, [r3, #6]
   25378:	tst	r3, #16
   2537c:	beq	2531c <__assert_fail@plt+0x140f0>
   25380:	mov	r3, r5
   25384:	mov	r2, r4
   25388:	str	r6, [sp]
   2538c:	ldr	r1, [sp, #24]
   25390:	bl	24ec0 <__assert_fail@plt+0x13c94>
   25394:	cmp	r0, #1
   25398:	ble	255e8 <__assert_fail@plt+0x143bc>
   2539c:	ldr	r2, [r5, #100]	; 0x64
   253a0:	add	r9, r0, r6
   253a4:	lsl	fp, r4, #2
   253a8:	ldr	r3, [r7, #12]
   253ac:	ldr	r1, [r2, r9, lsl #2]
   253b0:	ldr	r4, [r3, r4, lsl #2]
   253b4:	mov	r3, #0
   253b8:	str	r3, [sp, #72]	; 0x48
   253bc:	cmp	r1, r3
   253c0:	beq	253dc <__assert_fail@plt+0x141b0>
   253c4:	add	r1, r1, #4
   253c8:	add	r0, sp, #68	; 0x44
   253cc:	bl	21e88 <__assert_fail@plt+0x10c5c>
   253d0:	cmp	r0, #0
   253d4:	str	r0, [sp, #52]	; 0x34
   253d8:	bne	25424 <__assert_fail@plt+0x141f8>
   253dc:	mov	r1, r4
   253e0:	add	r0, sp, #68	; 0x44
   253e4:	bl	1fff0 <__assert_fail@plt+0xedc4>
   253e8:	cmp	r0, #0
   253ec:	beq	25608 <__assert_fail@plt+0x143dc>
   253f0:	add	r2, sp, #68	; 0x44
   253f4:	mov	r1, r7
   253f8:	ldr	r4, [r5, #100]	; 0x64
   253fc:	add	r0, sp, #52	; 0x34
   25400:	bl	216c8 <__assert_fail@plt+0x1049c>
   25404:	ldr	r3, [r5, #100]	; 0x64
   25408:	str	r0, [r4, r9, lsl #2]
   2540c:	ldr	r3, [r3, r9, lsl #2]
   25410:	cmp	r3, #0
   25414:	bne	25338 <__assert_fail@plt+0x1410c>
   25418:	ldr	r3, [sp, #52]	; 0x34
   2541c:	cmp	r3, #0
   25420:	beq	25338 <__assert_fail@plt+0x1410c>
   25424:	ldr	fp, [sp, #32]
   25428:	ldr	r0, [sp, #76]	; 0x4c
   2542c:	bl	13254 <__assert_fail@plt+0x2028>
   25430:	ldr	r3, [sp, #52]	; 0x34
   25434:	cmp	r3, #0
   25438:	str	r3, [sp, #48]	; 0x30
   2543c:	bne	25618 <__assert_fail@plt+0x143ec>
   25440:	ldr	r3, [sp, #60]	; 0x3c
   25444:	mov	r4, fp
   25448:	cmp	r3, #0
   2544c:	beq	25498 <__assert_fail@plt+0x1426c>
   25450:	ldr	r1, [sp, #8]
   25454:	ldr	r0, [sp, #20]
   25458:	ldr	r2, [sp, #28]
   2545c:	ldr	r3, [sp, #128]	; 0x80
   25460:	bl	22284 <__assert_fail@plt+0x11058>
   25464:	cmp	r0, #0
   25468:	str	r0, [sp, #48]	; 0x30
   2546c:	bne	25618 <__assert_fail@plt+0x143ec>
   25470:	mov	r2, fp
   25474:	mov	r0, r5
   25478:	ldr	r3, [sp, #28]
   2547c:	ldr	r1, [sp, #128]	; 0x80
   25480:	str	r1, [sp]
   25484:	ldr	r1, [sp, #8]
   25488:	bl	223d4 <__assert_fail@plt+0x111a8>
   2548c:	cmp	r0, #0
   25490:	str	r0, [sp, #48]	; 0x30
   25494:	bne	25618 <__assert_fail@plt+0x143ec>
   25498:	mov	r1, r6
   2549c:	mov	r0, r5
   254a0:	ldr	r2, [r5, #88]	; 0x58
   254a4:	bl	23204 <__assert_fail@plt+0x11fd8>
   254a8:	mov	r3, r0
   254ac:	add	r0, sp, #48	; 0x30
   254b0:	ldr	r2, [sp, #8]
   254b4:	ldr	r1, [sp, #20]
   254b8:	bl	213e0 <__assert_fail@plt+0x101b4>
   254bc:	subs	sl, r0, #0
   254c0:	beq	25640 <__assert_fail@plt+0x14414>
   254c4:	mov	r2, #0
   254c8:	ldr	r3, [r5, #100]	; 0x64
   254cc:	str	r2, [sp, #12]
   254d0:	ldr	r2, [sp, #16]
   254d4:	str	sl, [r3, r2]
   254d8:	ldr	r2, [sp, #124]	; 0x7c
   254dc:	cmp	r2, fp
   254e0:	ble	254f8 <__assert_fail@plt+0x142cc>
   254e4:	ldr	r1, [sp, #12]
   254e8:	add	fp, fp, #1
   254ec:	ldr	r2, [r5, #120]	; 0x78
   254f0:	cmp	r2, r1
   254f4:	bge	25290 <__assert_fail@plt+0x14064>
   254f8:	ldr	r0, [sp, #64]	; 0x40
   254fc:	bl	13254 <__assert_fail@plt+0x2028>
   25500:	ldr	r3, [r5, #100]	; 0x64
   25504:	ldr	r2, [sp, #124]	; 0x7c
   25508:	ldr	r3, [r3, r2, lsl #2]
   2550c:	cmp	r3, #0
   25510:	beq	25760 <__assert_fail@plt+0x14534>
   25514:	ldr	r2, [sp, #36]	; 0x24
   25518:	add	r1, r3, #12
   2551c:	ldr	r0, [sp, #44]	; 0x2c
   25520:	str	r4, [r2]
   25524:	ldr	r2, [sp, #120]	; 0x78
   25528:	str	r0, [r5, #40]	; 0x28
   2552c:	ldr	r0, [sp, #40]	; 0x28
   25530:	str	r0, [r5, #100]	; 0x64
   25534:	ldr	r0, [r3, #8]
   25538:	bl	205c4 <__assert_fail@plt+0xf398>
   2553c:	clz	r0, r0
   25540:	lsr	r0, r0, #5
   25544:	add	sp, sp, #84	; 0x54
   25548:	ldrd	r4, [sp]
   2554c:	ldrd	r6, [sp, #8]
   25550:	ldrd	r8, [sp, #16]
   25554:	ldrd	sl, [sp, #24]
   25558:	add	sp, sp, #32
   2555c:	pop	{pc}		; (ldr pc, [sp], #4)
   25560:	add	r3, sp, #56	; 0x38
   25564:	add	r1, sl, #4
   25568:	mov	r0, r3
   2556c:	str	r3, [sp, #8]
   25570:	bl	211ec <__assert_fail@plt+0xffc0>
   25574:	cmp	r0, #0
   25578:	str	r0, [sp, #48]	; 0x30
   2557c:	bne	25544 <__assert_fail@plt+0x14318>
   25580:	ldrb	r3, [sl, #52]	; 0x34
   25584:	tst	r3, #64	; 0x40
   25588:	beq	25268 <__assert_fail@plt+0x1403c>
   2558c:	ldr	r3, [sp, #60]	; 0x3c
   25590:	cmp	r3, #0
   25594:	beq	255c0 <__assert_fail@plt+0x14394>
   25598:	mov	r2, r4
   2559c:	mov	r0, r5
   255a0:	ldr	r3, [sp, #28]
   255a4:	ldr	r1, [sp, #128]	; 0x80
   255a8:	str	r1, [sp]
   255ac:	ldr	r1, [sp, #8]
   255b0:	bl	223d4 <__assert_fail@plt+0x111a8>
   255b4:	cmp	r0, #0
   255b8:	str	r0, [sp, #48]	; 0x30
   255bc:	bne	25618 <__assert_fail@plt+0x143ec>
   255c0:	mov	r3, r6
   255c4:	add	r0, sp, #48	; 0x30
   255c8:	ldr	r2, [sp, #8]
   255cc:	ldr	r1, [sp, #20]
   255d0:	bl	213e0 <__assert_fail@plt+0x101b4>
   255d4:	subs	sl, r0, #0
   255d8:	beq	25748 <__assert_fail@plt+0x1451c>
   255dc:	ldr	r3, [r5, #100]	; 0x64
   255e0:	str	sl, [r3, r4, lsl #2]
   255e4:	b	25268 <__assert_fail@plt+0x1403c>
   255e8:	cmp	r0, #0
   255ec:	bne	25334 <__assert_fail@plt+0x14108>
   255f0:	ldr	r0, [r7]
   255f4:	b	2531c <__assert_fail@plt+0x140f0>
   255f8:	cmp	sl, #0
   255fc:	bne	252d0 <__assert_fail@plt+0x140a4>
   25600:	mov	r4, fp
   25604:	b	25498 <__assert_fail@plt+0x1426c>
   25608:	ldr	r0, [sp, #76]	; 0x4c
   2560c:	bl	13254 <__assert_fail@plt+0x2028>
   25610:	mov	r3, #12
   25614:	str	r3, [sp, #48]	; 0x30
   25618:	ldr	r0, [sp, #64]	; 0x40
   2561c:	bl	13254 <__assert_fail@plt+0x2028>
   25620:	ldr	r0, [sp, #48]	; 0x30
   25624:	b	25544 <__assert_fail@plt+0x14318>
   25628:	ldr	fp, [sp, #32]
   2562c:	ldr	r0, [sp, #76]	; 0x4c
   25630:	bl	13254 <__assert_fail@plt+0x2028>
   25634:	mov	r3, #0
   25638:	str	r3, [sp, #48]	; 0x30
   2563c:	b	25440 <__assert_fail@plt+0x14214>
   25640:	ldr	r3, [sp, #48]	; 0x30
   25644:	cmp	r3, #0
   25648:	bne	25618 <__assert_fail@plt+0x143ec>
   2564c:	ldr	r2, [sp, #12]
   25650:	ldr	r3, [r5, #100]	; 0x64
   25654:	add	r2, r2, #1
   25658:	str	r2, [sp, #12]
   2565c:	ldr	r2, [sp, #16]
   25660:	str	sl, [r3, r2]
   25664:	b	254d8 <__assert_fail@plt+0x142ac>
   25668:	sub	r1, sl, #1
   2566c:	mov	r0, r5
   25670:	str	sl, [r5, #40]	; 0x28
   25674:	str	r8, [r5, #100]	; 0x64
   25678:	bl	23204 <__assert_fail@plt+0x11fd8>
   2567c:	mov	r6, r0
   25680:	mov	r3, #1
   25684:	mov	r0, #4
   25688:	str	r3, [sp, #56]	; 0x38
   2568c:	str	r3, [sp, #60]	; 0x3c
   25690:	bl	2d378 <__assert_fail@plt+0x1c14c>
   25694:	cmp	r0, #0
   25698:	str	r0, [sp, #64]	; 0x40
   2569c:	beq	25758 <__assert_fail@plt+0x1452c>
   256a0:	add	r3, sp, #56	; 0x38
   256a4:	mov	ip, #0
   256a8:	str	r7, [r0]
   256ac:	mov	r1, r3
   256b0:	ldr	r0, [sp, #20]
   256b4:	str	r3, [sp, #8]
   256b8:	ldr	r2, [sp, #28]
   256bc:	str	ip, [sp, #48]	; 0x30
   256c0:	ldr	r3, [sp, #128]	; 0x80
   256c4:	bl	22284 <__assert_fail@plt+0x11058>
   256c8:	cmp	r0, #0
   256cc:	str	r0, [sp, #48]	; 0x30
   256d0:	moveq	r4, sl
   256d4:	beq	2558c <__assert_fail@plt+0x14360>
   256d8:	b	25618 <__assert_fail@plt+0x143ec>
   256dc:	mvn	r3, #-2147483648	; 0x80000000
   256e0:	add	r9, r2, #1
   256e4:	sub	r3, r3, r4
   256e8:	cmp	r3, r9
   256ec:	blt	25758 <__assert_fail@plt+0x1452c>
   256f0:	add	r8, r4, r9
   256f4:	cmn	r8, #-1073741823	; 0xc0000001
   256f8:	bhi	25758 <__assert_fail@plt+0x1452c>
   256fc:	ldr	fp, [sp, #36]	; 0x24
   25700:	lsl	r1, r8, #2
   25704:	ldr	r0, [fp, #8]
   25708:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2570c:	subs	r3, r0, #0
   25710:	beq	25758 <__assert_fail@plt+0x1452c>
   25714:	lsl	r2, r9, #2
   25718:	mov	r1, r6
   2571c:	str	r8, [fp, #4]
   25720:	add	r0, r3, r4, lsl #2
   25724:	str	r3, [fp, #8]
   25728:	bl	1116c <memset@plt>
   2572c:	b	251f4 <__assert_fail@plt+0x13fc8>
   25730:	add	r3, sp, #56	; 0x38
   25734:	str	r3, [sp, #8]
   25738:	str	sl, [sp, #56]	; 0x38
   2573c:	str	sl, [sp, #60]	; 0x3c
   25740:	str	sl, [sp, #64]	; 0x40
   25744:	b	25268 <__assert_fail@plt+0x1403c>
   25748:	ldr	r3, [sp, #48]	; 0x30
   2574c:	cmp	r3, #0
   25750:	beq	255dc <__assert_fail@plt+0x143b0>
   25754:	b	25618 <__assert_fail@plt+0x143ec>
   25758:	mov	r0, #12
   2575c:	b	25544 <__assert_fail@plt+0x14318>
   25760:	ldr	r3, [sp, #36]	; 0x24
   25764:	mov	r0, #1
   25768:	str	r4, [r3]
   2576c:	ldr	r3, [sp, #44]	; 0x2c
   25770:	str	r3, [r5, #40]	; 0x28
   25774:	ldr	r3, [sp, #40]	; 0x28
   25778:	str	r3, [r5, #100]	; 0x64
   2577c:	b	25544 <__assert_fail@plt+0x14318>
   25780:	mov	r0, #0
   25784:	b	25630 <__assert_fail@plt+0x14404>
   25788:	mov	ip, r2
   2578c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25790:	mov	r4, r0
   25794:	strd	r6, [sp, #8]
   25798:	mov	r6, r2
   2579c:	mov	r7, r3
   257a0:	strd	r8, [sp, #16]
   257a4:	mov	r3, #8
   257a8:	mov	r8, r1
   257ac:	strd	sl, [sp, #24]
   257b0:	str	lr, [sp, #32]
   257b4:	sub	sp, sp, #20
   257b8:	ldr	r2, [ip], #8
   257bc:	str	r7, [sp]
   257c0:	ldr	r5, [sp, #56]	; 0x38
   257c4:	mov	r1, ip
   257c8:	str	r5, [sp, #4]
   257cc:	str	r3, [sp, #8]
   257d0:	ldr	r3, [r6, #4]
   257d4:	bl	25198 <__assert_fail@plt+0x13f6c>
   257d8:	subs	fp, r0, #0
   257dc:	beq	25800 <__assert_fail@plt+0x145d4>
   257e0:	mov	r0, fp
   257e4:	add	sp, sp, #20
   257e8:	ldrd	r4, [sp]
   257ec:	ldrd	r6, [sp, #8]
   257f0:	ldrd	r8, [sp, #16]
   257f4:	ldrd	sl, [sp, #24]
   257f8:	add	sp, sp, #32
   257fc:	pop	{pc}		; (ldr pc, [sp], #4)
   25800:	ldr	r3, [r4, #108]	; 0x6c
   25804:	ldr	r1, [r4, #112]	; 0x70
   25808:	ldr	r9, [r6, #4]
   2580c:	ldr	sl, [r8]
   25810:	cmp	r3, r1
   25814:	ldr	r0, [r4, #116]	; 0x74
   25818:	movlt	lr, r9
   2581c:	bge	258b8 <__assert_fail@plt+0x1468c>
   25820:	add	r2, r3, r3, lsl #1
   25824:	cmp	r3, #0
   25828:	lsl	r2, r2, #3
   2582c:	ble	25848 <__assert_fail@plt+0x1461c>
   25830:	sub	r1, r2, #24
   25834:	add	r1, r0, r1
   25838:	ldr	ip, [r1, #4]
   2583c:	cmp	r5, ip
   25840:	moveq	ip, #1
   25844:	strbeq	ip, [r1, #20]
   25848:	cmp	sl, r9
   2584c:	add	ip, r0, r2
   25850:	str	r7, [r0, r2]
   25854:	add	r3, r3, #1
   25858:	movne	r0, #0
   2585c:	mvneq	r0, #0
   25860:	mov	r1, #0
   25864:	stmib	ip, {r5, sl}
   25868:	str	r9, [ip, #12]
   2586c:	sub	r2, r9, sl
   25870:	add	r5, r5, lr
   25874:	str	r0, [ip, #16]
   25878:	mov	r0, r4
   2587c:	str	r3, [r4, #108]	; 0x6c
   25880:	strb	r1, [ip, #20]
   25884:	ldr	r3, [r4, #120]	; 0x78
   25888:	cmp	r3, r2
   2588c:	strlt	r2, [r4, #120]	; 0x78
   25890:	ldr	r1, [r8]
   25894:	sub	r1, r5, r1
   25898:	add	sp, sp, #20
   2589c:	ldrd	r4, [sp]
   258a0:	ldrd	r6, [sp, #8]
   258a4:	ldrd	r8, [sp, #16]
   258a8:	ldrd	sl, [sp, #24]
   258ac:	ldr	lr, [sp, #32]
   258b0:	add	sp, sp, #36	; 0x24
   258b4:	b	203ec <__assert_fail@plt+0xf1c0>
   258b8:	add	r1, r1, r1, lsl #1
   258bc:	lsl	r1, r1, #4
   258c0:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   258c4:	cmp	r0, #0
   258c8:	beq	2590c <__assert_fail@plt+0x146e0>
   258cc:	ldr	r3, [r4, #108]	; 0x6c
   258d0:	mov	r1, fp
   258d4:	str	r0, [r4, #116]	; 0x74
   258d8:	ldr	r2, [r4, #112]	; 0x70
   258dc:	add	r3, r3, r3, lsl #1
   258e0:	add	r2, r2, r2, lsl #1
   258e4:	add	r0, r0, r3, lsl #3
   258e8:	lsl	r2, r2, #3
   258ec:	bl	1116c <memset@plt>
   258f0:	ldr	lr, [r6, #4]
   258f4:	ldr	r2, [r4, #112]	; 0x70
   258f8:	ldr	r3, [r4, #108]	; 0x6c
   258fc:	ldr	r0, [r4, #116]	; 0x74
   25900:	lsl	r2, r2, #1
   25904:	str	r2, [r4, #112]	; 0x70
   25908:	b	25820 <__assert_fail@plt+0x145f4>
   2590c:	ldr	r0, [r4, #116]	; 0x74
   25910:	mov	fp, #12
   25914:	bl	13254 <__assert_fail@plt+0x2028>
   25918:	b	257e0 <__assert_fail@plt+0x145b4>
   2591c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25920:	ldr	r3, [r0, #84]	; 0x54
   25924:	strd	r6, [sp, #8]
   25928:	ldr	r6, [r1]
   2592c:	strd	r8, [sp, #16]
   25930:	strd	sl, [sp, #24]
   25934:	str	lr, [sp, #32]
   25938:	sub	sp, sp, #84	; 0x54
   2593c:	ldr	sl, [r0, #40]	; 0x28
   25940:	cmp	r6, #0
   25944:	str	r3, [sp, #24]
   25948:	ble	25e70 <__assert_fail@plt+0x14c44>
   2594c:	lsl	r3, sl, #2
   25950:	mov	fp, r0
   25954:	mov	r9, sl
   25958:	str	r2, [sp, #36]	; 0x24
   2595c:	str	r3, [sp, #44]	; 0x2c
   25960:	mov	r3, #0
   25964:	str	r1, [sp, #56]	; 0x38
   25968:	str	r3, [sp, #16]
   2596c:	b	259b4 <__assert_fail@plt+0x14788>
   25970:	tst	r0, #1
   25974:	beq	259a0 <__assert_fail@plt+0x14774>
   25978:	tst	r3, #8
   2597c:	bne	259a0 <__assert_fail@plt+0x14774>
   25980:	tst	r3, #32
   25984:	beq	25990 <__assert_fail@plt+0x14764>
   25988:	tst	r0, #2
   2598c:	beq	259a0 <__assert_fail@plt+0x14774>
   25990:	tst	r3, #128	; 0x80
   25994:	beq	25a24 <__assert_fail@plt+0x147f8>
   25998:	tst	r0, #8
   2599c:	bne	25a24 <__assert_fail@plt+0x147f8>
   259a0:	ldr	r3, [sp, #16]
   259a4:	add	r3, r3, #1
   259a8:	cmp	r3, r6
   259ac:	str	r3, [sp, #16]
   259b0:	bge	25e70 <__assert_fail@plt+0x14c44>
   259b4:	ldr	r1, [sp, #16]
   259b8:	ldr	r3, [sp, #36]	; 0x24
   259bc:	ldr	r2, [r3]
   259c0:	ldr	r3, [sp, #24]
   259c4:	ldr	sl, [r2, r1, lsl #2]
   259c8:	ldr	r3, [r3]
   259cc:	add	r3, r3, sl, lsl #3
   259d0:	ldrb	r2, [r3, #4]
   259d4:	cmp	r2, #4
   259d8:	bne	259a0 <__assert_fail@plt+0x14774>
   259dc:	ldr	r4, [r3, #4]
   259e0:	mov	r3, #65280	; 0xff00
   259e4:	movt	r3, #3
   259e8:	and	r3, r3, r4
   259ec:	cmp	r3, #0
   259f0:	beq	25a24 <__assert_fail@plt+0x147f8>
   259f4:	mov	r1, r9
   259f8:	mov	r0, fp
   259fc:	ldr	r2, [fp, #88]	; 0x58
   25a00:	bl	23204 <__assert_fail@plt+0x11fd8>
   25a04:	ubfx	r3, r4, #8, #10
   25a08:	tst	r3, #4
   25a0c:	bne	25970 <__assert_fail@plt+0x14744>
   25a10:	tst	r3, #8
   25a14:	beq	25980 <__assert_fail@plt+0x14754>
   25a18:	tst	r0, #1
   25a1c:	beq	25980 <__assert_fail@plt+0x14754>
   25a20:	b	259a0 <__assert_fail@plt+0x14774>
   25a24:	ldr	ip, [fp, #108]	; 0x6c
   25a28:	mov	r0, #0
   25a2c:	mov	r4, ip
   25a30:	mov	r3, ip
   25a34:	cmp	r0, r3
   25a38:	bge	25a94 <__assert_fail@plt+0x14868>
   25a3c:	add	r2, r0, r3
   25a40:	ldr	lr, [fp, #116]	; 0x74
   25a44:	add	r2, r2, r2, lsr #31
   25a48:	asr	r2, r2, #1
   25a4c:	add	r1, r2, r2, lsl #1
   25a50:	add	r1, lr, r1, lsl #3
   25a54:	ldr	r1, [r1, #4]
   25a58:	cmp	r9, r1
   25a5c:	ble	25a84 <__assert_fail@plt+0x14858>
   25a60:	b	25c9c <__assert_fail@plt+0x14a70>
   25a64:	asr	r3, r3, #1
   25a68:	add	r1, r3, r3, lsl #1
   25a6c:	mov	r5, r3
   25a70:	add	r1, lr, r1, lsl #3
   25a74:	ldr	r1, [r1, #4]
   25a78:	cmp	r9, r1
   25a7c:	bgt	25ca4 <__assert_fail@plt+0x14a78>
   25a80:	mov	r2, r3
   25a84:	add	r3, r0, r2
   25a88:	cmp	r0, r2
   25a8c:	add	r3, r3, r3, lsr #31
   25a90:	blt	25a64 <__assert_fail@plt+0x14838>
   25a94:	cmp	ip, r0
   25a98:	ble	25cb0 <__assert_fail@plt+0x14a84>
   25a9c:	ldr	r3, [fp, #116]	; 0x74
   25aa0:	add	r2, r0, r0, lsl #1
   25aa4:	cmn	r0, #1
   25aa8:	add	r3, r3, r2, lsl #3
   25aac:	ldr	r1, [r3, #4]
   25ab0:	sub	r2, r1, r9
   25ab4:	clz	r2, r2
   25ab8:	lsr	r2, r2, #5
   25abc:	moveq	r2, #0
   25ac0:	cmp	r2, #0
   25ac4:	beq	25cb0 <__assert_fail@plt+0x14a84>
   25ac8:	add	r3, r3, #24
   25acc:	b	25adc <__assert_fail@plt+0x148b0>
   25ad0:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   25ad4:	cmp	r2, #0
   25ad8:	beq	25cb0 <__assert_fail@plt+0x14a84>
   25adc:	ldr	r2, [r3, #-24]	; 0xffffffe8
   25ae0:	add	r3, r3, #24
   25ae4:	cmp	sl, r2
   25ae8:	bne	25ad0 <__assert_fail@plt+0x148a4>
   25aec:	lsl	r2, sl, #2
   25af0:	mov	r3, #0
   25af4:	cmp	r4, ip
   25af8:	str	r2, [sp, #40]	; 0x28
   25afc:	str	r3, [sp, #64]	; 0x40
   25b00:	bge	25e24 <__assert_fail@plt+0x14bf8>
   25b04:	add	r3, sl, sl, lsl #1
   25b08:	ldr	r8, [sp, #24]
   25b0c:	lsl	r3, r3, #2
   25b10:	str	r3, [sp, #48]	; 0x30
   25b14:	b	25bfc <__assert_fail@plt+0x149d0>
   25b18:	ldr	r2, [r8, #20]
   25b1c:	ldr	r1, [sp, #48]	; 0x30
   25b20:	add	r2, r2, r1
   25b24:	ldr	r2, [r2, #8]
   25b28:	ldr	r2, [r2]
   25b2c:	add	r2, r2, r2, lsl #1
   25b30:	add	r6, r6, r2, lsl #2
   25b34:	add	r3, r9, r3
   25b38:	mov	r0, fp
   25b3c:	ldr	r2, [fp, #88]	; 0x58
   25b40:	sub	r5, r3, r5
   25b44:	sub	r1, r5, #1
   25b48:	bl	23204 <__assert_fail@plt+0x11fd8>
   25b4c:	ldr	r2, [sp, #44]	; 0x2c
   25b50:	mov	r3, r0
   25b54:	ldr	r7, [fp, #100]	; 0x64
   25b58:	ldr	r2, [r7, r2]
   25b5c:	ldr	r1, [r7, r5, lsl #2]
   25b60:	cmp	r2, #0
   25b64:	ldrne	r2, [r2, #8]
   25b68:	cmp	r1, #0
   25b6c:	str	r2, [sp, #28]
   25b70:	beq	25c50 <__assert_fail@plt+0x14a24>
   25b74:	mov	r2, r6
   25b78:	add	r0, sp, #68	; 0x44
   25b7c:	ldr	r1, [r1, #40]	; 0x28
   25b80:	str	r3, [sp, #32]
   25b84:	bl	21274 <__assert_fail@plt+0x10048>
   25b88:	cmp	r0, #0
   25b8c:	str	r0, [sp, #64]	; 0x40
   25b90:	ldr	r3, [sp, #32]
   25b94:	bne	25e60 <__assert_fail@plt+0x14c34>
   25b98:	add	r2, sp, #68	; 0x44
   25b9c:	mov	r1, r8
   25ba0:	ldr	r7, [fp, #100]	; 0x64
   25ba4:	add	r0, sp, #64	; 0x40
   25ba8:	bl	213e0 <__assert_fail@plt+0x101b4>
   25bac:	str	r0, [r7, r5, lsl #2]
   25bb0:	ldr	r0, [sp, #76]	; 0x4c
   25bb4:	bl	13254 <__assert_fail@plt+0x2028>
   25bb8:	ldr	r3, [fp, #100]	; 0x64
   25bbc:	ldr	r2, [r3, r5, lsl #2]
   25bc0:	cmp	r2, #0
   25bc4:	beq	25c74 <__assert_fail@plt+0x14a48>
   25bc8:	ldr	r2, [sp, #20]
   25bcc:	cmp	r2, #0
   25bd0:	bne	25bec <__assert_fail@plt+0x149c0>
   25bd4:	ldr	r2, [sp, #44]	; 0x2c
   25bd8:	ldr	r3, [r3, r2]
   25bdc:	ldr	r2, [sp, #28]
   25be0:	ldr	r3, [r3, #8]
   25be4:	cmp	r3, r2
   25be8:	bgt	25ddc <__assert_fail@plt+0x14bb0>
   25bec:	ldr	ip, [fp, #108]	; 0x6c
   25bf0:	add	r4, r4, #1
   25bf4:	cmp	r4, ip
   25bf8:	bge	25e24 <__assert_fail@plt+0x14bf8>
   25bfc:	ldr	r3, [fp, #116]	; 0x74
   25c00:	add	r2, r4, r4, lsl #1
   25c04:	ldr	r1, [r3, r2, lsl #3]
   25c08:	add	r3, r3, r2, lsl #3
   25c0c:	cmp	sl, r1
   25c10:	bne	25bf0 <__assert_fail@plt+0x149c4>
   25c14:	ldr	r2, [r3, #4]
   25c18:	cmp	r9, r2
   25c1c:	bne	25bf0 <__assert_fail@plt+0x149c4>
   25c20:	ldr	r5, [r3, #8]
   25c24:	ldr	r3, [r3, #12]
   25c28:	ldr	r6, [r8, #24]
   25c2c:	subs	r2, r3, r5
   25c30:	str	r2, [sp, #20]
   25c34:	beq	25b18 <__assert_fail@plt+0x148ec>
   25c38:	ldr	r2, [r8, #12]
   25c3c:	ldr	r1, [sp, #40]	; 0x28
   25c40:	ldr	r2, [r2, r1]
   25c44:	add	r2, r2, r2, lsl #1
   25c48:	add	r6, r6, r2, lsl #2
   25c4c:	b	25b34 <__assert_fail@plt+0x14908>
   25c50:	mov	r2, r6
   25c54:	mov	r1, r8
   25c58:	add	r0, sp, #64	; 0x40
   25c5c:	bl	213e0 <__assert_fail@plt+0x101b4>
   25c60:	ldr	r3, [fp, #100]	; 0x64
   25c64:	str	r0, [r7, r5, lsl #2]
   25c68:	ldr	r2, [r3, r5, lsl #2]
   25c6c:	cmp	r2, #0
   25c70:	bne	25bc8 <__assert_fail@plt+0x1499c>
   25c74:	ldr	r0, [sp, #64]	; 0x40
   25c78:	cmp	r0, #0
   25c7c:	beq	25bc8 <__assert_fail@plt+0x1499c>
   25c80:	add	sp, sp, #84	; 0x54
   25c84:	ldrd	r4, [sp]
   25c88:	ldrd	r6, [sp, #8]
   25c8c:	ldrd	r8, [sp, #16]
   25c90:	ldrd	sl, [sp, #24]
   25c94:	add	sp, sp, #32
   25c98:	pop	{pc}		; (ldr pc, [sp], #4)
   25c9c:	mov	r5, r2
   25ca0:	mov	r2, r3
   25ca4:	add	r0, r5, #1
   25ca8:	mov	r3, r2
   25cac:	b	25a34 <__assert_fail@plt+0x14808>
   25cb0:	ldr	r3, [fp, #84]	; 0x54
   25cb4:	ldr	r1, [fp, #124]	; 0x7c
   25cb8:	str	r3, [sp, #52]	; 0x34
   25cbc:	ldr	r3, [r3]
   25cc0:	cmp	r1, #0
   25cc4:	ldr	r2, [r3, sl, lsl #3]
   25cc8:	str	r2, [sp, #48]	; 0x30
   25ccc:	ble	25aec <__assert_fail@plt+0x148c0>
   25cd0:	mov	r2, #0
   25cd4:	str	sl, [sp, #40]	; 0x28
   25cd8:	str	r2, [sp, #28]
   25cdc:	ldr	r2, [fp, #4]
   25ce0:	str	r9, [sp, #32]
   25ce4:	str	r4, [sp, #60]	; 0x3c
   25ce8:	mov	sl, r2
   25cec:	ldr	r0, [sp, #28]
   25cf0:	ldr	r2, [fp, #132]	; 0x84
   25cf4:	ldr	r4, [r2, r0, lsl #2]
   25cf8:	ldr	r2, [r4, #4]
   25cfc:	ldr	r3, [r3, r2, lsl #3]
   25d00:	ldr	r2, [sp, #48]	; 0x30
   25d04:	cmp	r2, r3
   25d08:	beq	25d2c <__assert_fail@plt+0x14b00>
   25d0c:	ldr	r3, [sp, #28]
   25d10:	add	r3, r3, #1
   25d14:	cmp	r3, r1
   25d18:	str	r3, [sp, #28]
   25d1c:	bge	26068 <__assert_fail@plt+0x14e3c>
   25d20:	ldr	r3, [sp, #52]	; 0x34
   25d24:	ldr	r3, [r3]
   25d28:	b	25cec <__assert_fail@plt+0x14ac0>
   25d2c:	ldr	r6, [r4]
   25d30:	ldr	ip, [r4, #16]
   25d34:	ldr	r7, [sp, #32]
   25d38:	cmp	ip, #0
   25d3c:	ble	25e88 <__assert_fail@plt+0x14c5c>
   25d40:	mov	r3, sl
   25d44:	mov	r5, #0
   25d48:	mov	sl, r7
   25d4c:	mov	r7, r6
   25d50:	b	25d64 <__assert_fail@plt+0x14b38>
   25d54:	ldr	ip, [r4, #16]
   25d58:	mov	sl, r6
   25d5c:	cmp	r5, ip
   25d60:	bge	25e78 <__assert_fail@plt+0x14c4c>
   25d64:	ldr	r2, [r4, #20]
   25d68:	ldr	r9, [r2, r5, lsl #2]
   25d6c:	ldr	r8, [r9, #4]
   25d70:	sub	r2, r8, r7
   25d74:	cmp	r2, #0
   25d78:	add	r6, r2, sl
   25d7c:	ble	25da8 <__assert_fail@plt+0x14b7c>
   25d80:	ldr	r1, [fp, #28]
   25d84:	cmp	r1, r6
   25d88:	blt	25e30 <__assert_fail@plt+0x14c04>
   25d8c:	add	r1, r3, r7
   25d90:	add	r0, r3, sl
   25d94:	str	r3, [sp, #20]
   25d98:	bl	11004 <memcmp@plt>
   25d9c:	cmp	r0, #0
   25da0:	ldr	r3, [sp, #20]
   25da4:	bne	26010 <__assert_fail@plt+0x14de4>
   25da8:	ldr	r1, [sp, #32]
   25dac:	mov	r2, r9
   25db0:	mov	r0, fp
   25db4:	add	r5, r5, #1
   25db8:	mov	r7, r8
   25dbc:	ldr	r3, [sp, #40]	; 0x28
   25dc0:	str	r1, [sp]
   25dc4:	mov	r1, r4
   25dc8:	bl	25788 <__assert_fail@plt+0x1455c>
   25dcc:	cmp	r0, #1
   25dd0:	ldr	r3, [fp, #4]
   25dd4:	bls	25d54 <__assert_fail@plt+0x14b28>
   25dd8:	b	25c80 <__assert_fail@plt+0x14a54>
   25ddc:	add	r5, r6, #4
   25de0:	add	r6, r6, #8
   25de4:	mov	r2, r6
   25de8:	mov	r1, r5
   25dec:	mov	r3, r9
   25df0:	mov	r0, fp
   25df4:	bl	23da4 <__assert_fail@plt+0x12b78>
   25df8:	cmp	r0, #0
   25dfc:	str	r0, [sp, #64]	; 0x40
   25e00:	bne	25c80 <__assert_fail@plt+0x14a54>
   25e04:	mov	r2, r6
   25e08:	mov	r1, r5
   25e0c:	mov	r0, fp
   25e10:	bl	2591c <__assert_fail@plt+0x146f0>
   25e14:	cmp	r0, #0
   25e18:	str	r0, [sp, #64]	; 0x40
   25e1c:	beq	25bec <__assert_fail@plt+0x149c0>
   25e20:	b	25c80 <__assert_fail@plt+0x14a54>
   25e24:	ldr	r3, [sp, #56]	; 0x38
   25e28:	ldr	r6, [r3]
   25e2c:	b	259a0 <__assert_fail@plt+0x14774>
   25e30:	ldr	lr, [fp, #48]	; 0x30
   25e34:	mov	r1, r6
   25e38:	mov	r0, fp
   25e3c:	str	r2, [sp, #20]
   25e40:	cmp	lr, r6
   25e44:	blt	260ac <__assert_fail@plt+0x14e80>
   25e48:	bl	203ec <__assert_fail@plt+0xf1c0>
   25e4c:	cmp	r0, #0
   25e50:	bne	25c80 <__assert_fail@plt+0x14a54>
   25e54:	ldr	r3, [fp, #4]
   25e58:	ldr	r2, [sp, #20]
   25e5c:	b	25d8c <__assert_fail@plt+0x14b60>
   25e60:	ldr	r0, [sp, #76]	; 0x4c
   25e64:	bl	13254 <__assert_fail@plt+0x2028>
   25e68:	ldr	r0, [sp, #64]	; 0x40
   25e6c:	b	25c80 <__assert_fail@plt+0x14a54>
   25e70:	mov	r0, #0
   25e74:	b	25c80 <__assert_fail@plt+0x14a54>
   25e78:	mov	r9, r6
   25e7c:	mov	sl, r3
   25e80:	add	r6, r8, #1
   25e84:	mov	r7, r9
   25e88:	ldr	r3, [sp, #32]
   25e8c:	cmp	r3, r6
   25e90:	blt	25fe0 <__assert_fail@plt+0x14db4>
   25e94:	ldr	r9, [sp, #32]
   25e98:	ldr	r8, [sp, #48]	; 0x30
   25e9c:	ldr	r3, [r4]
   25ea0:	sub	r3, r6, r3
   25ea4:	cmp	r3, #0
   25ea8:	ble	25ed4 <__assert_fail@plt+0x14ca8>
   25eac:	ldr	r3, [fp, #28]
   25eb0:	cmp	r3, r7
   25eb4:	ble	2603c <__assert_fail@plt+0x14e10>
   25eb8:	add	r5, r7, #1
   25ebc:	add	r3, sl, r6
   25ec0:	ldrb	r2, [sl, r7]
   25ec4:	ldrb	r3, [r3, #-1]
   25ec8:	cmp	r2, r3
   25ecc:	bne	25fe0 <__assert_fail@plt+0x14db4>
   25ed0:	mov	r7, r5
   25ed4:	ldr	r3, [fp, #100]	; 0x64
   25ed8:	ldr	r3, [r3, r6, lsl #2]
   25edc:	cmp	r3, #0
   25ee0:	beq	25fd4 <__assert_fail@plt+0x14da8>
   25ee4:	ldr	ip, [r3, #8]
   25ee8:	cmp	ip, #0
   25eec:	ble	25fd4 <__assert_fail@plt+0x14da8>
   25ef0:	ldr	r2, [r3, #12]
   25ef4:	mov	r3, #0
   25ef8:	ldr	r1, [sp, #52]	; 0x34
   25efc:	sub	r2, r2, #4
   25f00:	ldr	r0, [r1]
   25f04:	b	25f10 <__assert_fail@plt+0x14ce4>
   25f08:	cmp	ip, r3
   25f0c:	beq	25fd4 <__assert_fail@plt+0x14da8>
   25f10:	ldr	r5, [r2, #4]!
   25f14:	add	r3, r3, #1
   25f18:	add	r1, r0, r5, lsl #3
   25f1c:	ldrb	r1, [r1, #4]
   25f20:	cmp	r1, #9
   25f24:	bne	25f08 <__assert_fail@plt+0x14cdc>
   25f28:	ldr	r1, [r0, r5, lsl #3]
   25f2c:	cmp	r8, r1
   25f30:	bne	25f08 <__assert_fail@plt+0x14cdc>
   25f34:	cmn	r5, #1
   25f38:	beq	25fd4 <__assert_fail@plt+0x14da8>
   25f3c:	ldr	r3, [r4]
   25f40:	ldr	r1, [r4, #8]
   25f44:	cmp	r1, #0
   25f48:	beq	25fe8 <__assert_fail@plt+0x14dbc>
   25f4c:	mov	ip, #9
   25f50:	mov	r0, fp
   25f54:	ldr	r2, [r4, #4]
   25f58:	stm	sp, {r5, r6, ip}
   25f5c:	bl	25198 <__assert_fail@plt+0x13f6c>
   25f60:	cmp	r0, #1
   25f64:	beq	25fd4 <__assert_fail@plt+0x14da8>
   25f68:	cmp	r0, #0
   25f6c:	bne	25c80 <__assert_fail@plt+0x14a54>
   25f70:	ldrd	r2, [r4, #12]
   25f74:	cmp	r3, r2
   25f78:	beq	26084 <__assert_fail@plt+0x14e58>
   25f7c:	mov	r1, #20
   25f80:	mov	r0, #1
   25f84:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   25f88:	subs	ip, r0, #0
   25f8c:	beq	2607c <__assert_fail@plt+0x14e50>
   25f90:	ldr	lr, [r4, #16]
   25f94:	mov	r2, ip
   25f98:	mov	r1, r4
   25f9c:	mov	r0, fp
   25fa0:	ldr	r3, [sp, #40]	; 0x28
   25fa4:	add	sl, lr, #1
   25fa8:	str	sl, [sp, #20]
   25fac:	ldr	sl, [r4, #20]
   25fb0:	str	ip, [sl, lr, lsl #2]
   25fb4:	stm	ip, {r5, r6}
   25fb8:	ldr	ip, [sp, #20]
   25fbc:	str	ip, [r4, #16]
   25fc0:	str	r9, [sp]
   25fc4:	bl	25788 <__assert_fail@plt+0x1455c>
   25fc8:	cmp	r0, #1
   25fcc:	ldr	sl, [fp, #4]
   25fd0:	bhi	25c80 <__assert_fail@plt+0x14a54>
   25fd4:	add	r6, r6, #1
   25fd8:	cmp	r9, r6
   25fdc:	bge	25e9c <__assert_fail@plt+0x14c70>
   25fe0:	ldr	r1, [fp, #124]	; 0x7c
   25fe4:	b	25d0c <__assert_fail@plt+0x14ae0>
   25fe8:	sub	r3, r6, r3
   25fec:	mov	r0, #12
   25ff0:	add	r1, r3, #1
   25ff4:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   25ff8:	cmp	r0, #0
   25ffc:	mov	r1, r0
   26000:	str	r0, [r4, #8]
   26004:	beq	2607c <__assert_fail@plt+0x14e50>
   26008:	ldr	r3, [r4]
   2600c:	b	25f4c <__assert_fail@plt+0x14d20>
   26010:	ldr	ip, [r4, #16]
   26014:	mov	r6, r7
   26018:	mov	r7, sl
   2601c:	mov	sl, r3
   26020:	cmp	ip, r5
   26024:	bgt	25fe0 <__assert_fail@plt+0x14db4>
   26028:	cmp	r5, #0
   2602c:	ble	25e88 <__assert_fail@plt+0x14c5c>
   26030:	mov	r9, r7
   26034:	mov	r8, r6
   26038:	b	25e80 <__assert_fail@plt+0x14c54>
   2603c:	ldr	r3, [fp, #48]	; 0x30
   26040:	cmp	r3, r7
   26044:	ble	25fe0 <__assert_fail@plt+0x14db4>
   26048:	add	r5, r7, #1
   2604c:	mov	r0, fp
   26050:	mov	r1, r5
   26054:	bl	1f858 <__assert_fail@plt+0xe62c>
   26058:	cmp	r0, #0
   2605c:	bne	25c80 <__assert_fail@plt+0x14a54>
   26060:	ldr	sl, [fp, #4]
   26064:	b	25ebc <__assert_fail@plt+0x14c90>
   26068:	ldr	r9, [sp, #32]
   2606c:	ldr	sl, [sp, #40]	; 0x28
   26070:	ldr	r4, [sp, #60]	; 0x3c
   26074:	ldr	ip, [fp, #108]	; 0x6c
   26078:	b	25aec <__assert_fail@plt+0x148c0>
   2607c:	mov	r0, #12
   26080:	b	25c80 <__assert_fail@plt+0x14a54>
   26084:	lsl	r3, r3, #1
   26088:	ldr	r0, [r4, #20]
   2608c:	add	sl, r3, #1
   26090:	lsl	r1, sl, #2
   26094:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   26098:	cmp	r0, #0
   2609c:	beq	2607c <__assert_fail@plt+0x14e50>
   260a0:	str	sl, [r4, #12]
   260a4:	str	r0, [r4, #20]
   260a8:	b	25f7c <__assert_fail@plt+0x14d50>
   260ac:	mov	r6, r7
   260b0:	mov	r7, sl
   260b4:	mov	sl, r3
   260b8:	b	26020 <__assert_fail@plt+0x14df4>
   260bc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   260c0:	mov	r4, r1
   260c4:	ldr	r5, [r1, #40]	; 0x28
   260c8:	ldr	r3, [r1, #104]	; 0x68
   260cc:	strd	r6, [sp, #8]
   260d0:	strd	r8, [sp, #16]
   260d4:	str	sl, [sp, #24]
   260d8:	mov	sl, r0
   260dc:	str	lr, [sp, #28]
   260e0:	sub	sp, sp, #16
   260e4:	cmp	r3, r5
   260e8:	ldr	r8, [r1, #84]	; 0x54
   260ec:	ldr	r9, [r1, #100]	; 0x64
   260f0:	bge	2612c <__assert_fail@plt+0x14f00>
   260f4:	mov	r6, r2
   260f8:	str	r2, [r9, r5, lsl #2]
   260fc:	str	r5, [r1, #104]	; 0x68
   26100:	ldr	r3, [r8, #76]	; 0x4c
   26104:	cmp	r3, #0
   26108:	bne	261f4 <__assert_fail@plt+0x14fc8>
   2610c:	mov	r0, r6
   26110:	add	sp, sp, #16
   26114:	ldrd	r4, [sp]
   26118:	ldrd	r6, [sp, #8]
   2611c:	ldrd	r8, [sp, #16]
   26120:	ldr	sl, [sp, #24]
   26124:	add	sp, sp, #28
   26128:	pop	{pc}		; (ldr pc, [sp], #4)
   2612c:	ldr	r3, [r9, r5, lsl #2]
   26130:	cmp	r3, #0
   26134:	moveq	r6, r2
   26138:	streq	r2, [r9, r5, lsl #2]
   2613c:	beq	26100 <__assert_fail@plt+0x14ed4>
   26140:	cmp	r2, #0
   26144:	ldr	r3, [r3, #40]	; 0x28
   26148:	beq	261b4 <__assert_fail@plt+0x14f88>
   2614c:	ldr	r7, [r2, #40]	; 0x28
   26150:	add	r0, sp, #4
   26154:	mov	r2, r3
   26158:	mov	r1, r7
   2615c:	bl	21274 <__assert_fail@plt+0x10048>
   26160:	cmp	r0, #0
   26164:	str	r0, [sl]
   26168:	bne	26258 <__assert_fail@plt+0x1502c>
   2616c:	ldr	r1, [r4, #40]	; 0x28
   26170:	mov	r0, r4
   26174:	ldr	r2, [r4, #88]	; 0x58
   26178:	sub	r1, r1, #1
   2617c:	bl	23204 <__assert_fail@plt+0x11fd8>
   26180:	ldr	r9, [r4, #100]	; 0x64
   26184:	mov	r3, r0
   26188:	add	r2, sp, #4
   2618c:	mov	r1, r8
   26190:	mov	r0, sl
   26194:	bl	213e0 <__assert_fail@plt+0x101b4>
   26198:	cmp	r7, #0
   2619c:	mov	r6, r0
   261a0:	str	r0, [r9, r5, lsl #2]
   261a4:	beq	26100 <__assert_fail@plt+0x14ed4>
   261a8:	ldr	r0, [sp, #12]
   261ac:	bl	13254 <__assert_fail@plt+0x2028>
   261b0:	b	26100 <__assert_fail@plt+0x14ed4>
   261b4:	ldrd	r6, [r3]
   261b8:	sub	r1, r5, #1
   261bc:	mov	r0, r4
   261c0:	ldr	r2, [r4, #88]	; 0x58
   261c4:	strd	r6, [sp, #4]
   261c8:	ldr	r3, [r3, #8]
   261cc:	str	r3, [sp, #12]
   261d0:	bl	23204 <__assert_fail@plt+0x11fd8>
   261d4:	mov	r3, r0
   261d8:	add	r2, sp, #4
   261dc:	mov	r1, r8
   261e0:	mov	r0, sl
   261e4:	bl	213e0 <__assert_fail@plt+0x101b4>
   261e8:	mov	r6, r0
   261ec:	str	r0, [r9, r5, lsl #2]
   261f0:	b	26100 <__assert_fail@plt+0x14ed4>
   261f4:	cmp	r6, #0
   261f8:	beq	26258 <__assert_fail@plt+0x1502c>
   261fc:	add	r7, r6, #8
   26200:	add	r8, r6, #12
   26204:	mov	r1, r7
   26208:	mov	r2, r8
   2620c:	mov	r3, r5
   26210:	mov	r0, r4
   26214:	bl	23da4 <__assert_fail@plt+0x12b78>
   26218:	cmp	r0, #0
   2621c:	str	r0, [sl]
   26220:	bne	26258 <__assert_fail@plt+0x1502c>
   26224:	ldrb	r3, [r6, #52]	; 0x34
   26228:	tst	r3, #64	; 0x40
   2622c:	beq	2610c <__assert_fail@plt+0x14ee0>
   26230:	mov	r2, r8
   26234:	mov	r1, r7
   26238:	mov	r0, r4
   2623c:	bl	2591c <__assert_fail@plt+0x146f0>
   26240:	cmp	r0, #0
   26244:	str	r0, [sl]
   26248:	bne	26258 <__assert_fail@plt+0x1502c>
   2624c:	ldr	r3, [r4, #100]	; 0x64
   26250:	ldr	r6, [r3, r5, lsl #2]
   26254:	b	2610c <__assert_fail@plt+0x14ee0>
   26258:	mov	r6, #0
   2625c:	b	2610c <__assert_fail@plt+0x14ee0>
   26260:	mov	r3, #1
   26264:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26268:	ldr	r4, [r1, #8]
   2626c:	strd	r6, [sp, #8]
   26270:	strd	r8, [sp, #16]
   26274:	mov	r9, r1
   26278:	strd	sl, [sp, #24]
   2627c:	mov	fp, r0
   26280:	mov	r0, #4
   26284:	str	lr, [sp, #32]
   26288:	sub	sp, sp, #60	; 0x3c
   2628c:	ldr	sl, [r1, #12]
   26290:	str	r3, [sp, #44]	; 0x2c
   26294:	str	r3, [sp, #48]	; 0x30
   26298:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2629c:	cmp	r0, #0
   262a0:	str	r0, [sp, #52]	; 0x34
   262a4:	beq	26530 <__assert_fail@plt+0x15304>
   262a8:	mov	r2, sl
   262ac:	add	r3, sp, #44	; 0x2c
   262b0:	str	r4, [r0]
   262b4:	mov	r1, r9
   262b8:	mov	r0, fp
   262bc:	bl	2806c <__assert_fail@plt+0x16e40>
   262c0:	cmp	r0, #0
   262c4:	bne	2650c <__assert_fail@plt+0x152e0>
   262c8:	cmp	sl, #0
   262cc:	addgt	r3, r9, #24
   262d0:	strgt	r0, [sp, #20]
   262d4:	strgt	r3, [sp, #36]	; 0x24
   262d8:	ble	264d8 <__assert_fail@plt+0x152ac>
   262dc:	ldr	r0, [r9]
   262e0:	lsl	r3, sl, #2
   262e4:	str	r3, [sp, #16]
   262e8:	ldr	r3, [r0, sl, lsl #2]
   262ec:	cmp	r3, #0
   262f0:	ldreq	r3, [sp, #20]
   262f4:	movne	r3, #0
   262f8:	addeq	r3, r3, #1
   262fc:	str	r3, [sp, #20]
   26300:	ldr	r2, [sp, #20]
   26304:	ldr	r3, [fp, #120]	; 0x78
   26308:	cmp	r3, r2
   2630c:	blt	26514 <__assert_fail@plt+0x152e8>
   26310:	mov	r2, #0
   26314:	ldr	r3, [fp, #100]	; 0x64
   26318:	sub	sl, sl, #1
   2631c:	str	r2, [sp, #48]	; 0x30
   26320:	ldr	r2, [sp, #16]
   26324:	add	r3, r3, r2
   26328:	ldr	r6, [r3, #-4]
   2632c:	cmp	r6, #0
   26330:	beq	264b4 <__assert_fail@plt+0x15288>
   26334:	ldr	r3, [r6, #20]
   26338:	ldr	r5, [fp, #84]	; 0x54
   2633c:	cmp	r3, #0
   26340:	ble	264b4 <__assert_fail@plt+0x15288>
   26344:	ldr	r3, [r6, #24]
   26348:	add	r2, r9, #20
   2634c:	mov	r8, #0
   26350:	ldr	r1, [r5]
   26354:	str	r2, [sp, #28]
   26358:	ldr	r4, [r3]
   2635c:	lsl	r7, r4, #3
   26360:	add	r3, r1, r7
   26364:	b	26424 <__assert_fail@plt+0x151f8>
   26368:	add	r1, r1, r7
   2636c:	mov	r2, sl
   26370:	mov	r0, fp
   26374:	bl	2331c <__assert_fail@plt+0x120f0>
   26378:	cmp	r0, #0
   2637c:	beq	26400 <__assert_fail@plt+0x151d4>
   26380:	ldr	r3, [r9]
   26384:	ldr	r2, [sp, #16]
   26388:	ldr	r3, [r3, r2]
   2638c:	cmp	r3, #0
   26390:	beq	26400 <__assert_fail@plt+0x151d4>
   26394:	ldr	r2, [r5, #12]
   26398:	add	r1, r3, #12
   2639c:	ldr	r0, [r3, #8]
   263a0:	ldr	r2, [r2, r4, lsl #2]
   263a4:	bl	205c4 <__assert_fail@plt+0xf398>
   263a8:	cmp	r0, #0
   263ac:	beq	26400 <__assert_fail@plt+0x151d4>
   263b0:	mov	r3, #1
   263b4:	ldr	r2, [r9, #20]
   263b8:	cmp	r2, #0
   263bc:	beq	263ec <__assert_fail@plt+0x151c0>
   263c0:	ldr	lr, [r5, #12]
   263c4:	add	ip, sl, r3
   263c8:	mov	r0, fp
   263cc:	ldr	r1, [sp, #28]
   263d0:	ldr	r2, [sp, #36]	; 0x24
   263d4:	ldr	r3, [lr, r4, lsl #2]
   263d8:	str	ip, [sp]
   263dc:	stmib	sp, {r4, sl}
   263e0:	bl	20898 <__assert_fail@plt+0xf66c>
   263e4:	cmp	r0, #0
   263e8:	bne	26400 <__assert_fail@plt+0x151d4>
   263ec:	mov	r1, r4
   263f0:	add	r0, sp, #44	; 0x2c
   263f4:	bl	1fff0 <__assert_fail@plt+0xedc4>
   263f8:	cmp	r0, #0
   263fc:	beq	264e0 <__assert_fail@plt+0x152b4>
   26400:	ldr	r3, [r6, #20]
   26404:	add	r8, r8, #1
   26408:	cmp	r8, r3
   2640c:	bge	264b4 <__assert_fail@plt+0x15288>
   26410:	ldr	r3, [r6, #24]
   26414:	ldr	r1, [r5]
   26418:	ldr	r4, [r3, r8, lsl #2]
   2641c:	lsl	r7, r4, #3
   26420:	add	r3, r1, r7
   26424:	ldrb	r3, [r3, #6]
   26428:	tst	r3, #16
   2642c:	beq	26368 <__assert_fail@plt+0x1513c>
   26430:	ldr	r0, [r9, #12]
   26434:	mov	r3, fp
   26438:	mov	r2, r4
   2643c:	ldr	r1, [fp, #84]	; 0x54
   26440:	str	r0, [sp, #24]
   26444:	str	r1, [sp, #32]
   26448:	ldr	r0, [r1], #128	; 0x80
   2644c:	str	sl, [sp]
   26450:	bl	24ec0 <__assert_fail@plt+0x13c94>
   26454:	subs	r3, r0, #0
   26458:	ble	264ac <__assert_fail@plt+0x15280>
   2645c:	ldr	r0, [sp, #24]
   26460:	add	r2, sl, r3
   26464:	cmp	r0, r2
   26468:	blt	263b4 <__assert_fail@plt+0x15188>
   2646c:	ldr	r1, [r9]
   26470:	ldr	r2, [r1, r2, lsl #2]
   26474:	cmp	r2, #0
   26478:	beq	264a4 <__assert_fail@plt+0x15278>
   2647c:	str	r3, [sp, #24]
   26480:	add	r1, r2, #12
   26484:	ldr	r3, [sp, #32]
   26488:	ldr	r0, [r2, #8]
   2648c:	ldr	ip, [r3, #12]
   26490:	ldr	r2, [ip, r4, lsl #2]
   26494:	bl	205c4 <__assert_fail@plt+0xf398>
   26498:	cmp	r0, #0
   2649c:	ldr	r3, [sp, #24]
   264a0:	bne	263b4 <__assert_fail@plt+0x15188>
   264a4:	ldr	r1, [r5]
   264a8:	b	26368 <__assert_fail@plt+0x1513c>
   264ac:	beq	264a4 <__assert_fail@plt+0x15278>
   264b0:	b	263b4 <__assert_fail@plt+0x15188>
   264b4:	add	r3, sp, #44	; 0x2c
   264b8:	mov	r2, sl
   264bc:	mov	r1, r9
   264c0:	mov	r0, fp
   264c4:	bl	2806c <__assert_fail@plt+0x16e40>
   264c8:	cmp	r0, #0
   264cc:	bne	2650c <__assert_fail@plt+0x152e0>
   264d0:	cmp	sl, #0
   264d4:	bne	262dc <__assert_fail@plt+0x150b0>
   264d8:	mov	r4, #0
   264dc:	b	264e4 <__assert_fail@plt+0x152b8>
   264e0:	mov	r4, #12
   264e4:	ldr	r0, [sp, #52]	; 0x34
   264e8:	bl	13254 <__assert_fail@plt+0x2028>
   264ec:	mov	r0, r4
   264f0:	add	sp, sp, #60	; 0x3c
   264f4:	ldrd	r4, [sp]
   264f8:	ldrd	r6, [sp, #8]
   264fc:	ldrd	r8, [sp, #16]
   26500:	ldrd	sl, [sp, #24]
   26504:	add	sp, sp, #32
   26508:	pop	{pc}		; (ldr pc, [sp], #4)
   2650c:	mov	r4, r0
   26510:	b	264e4 <__assert_fail@plt+0x152b8>
   26514:	mov	r1, #0
   26518:	ldr	r2, [sp, #16]
   2651c:	mov	r4, r1
   26520:	bl	1116c <memset@plt>
   26524:	ldr	r0, [sp, #52]	; 0x34
   26528:	bl	13254 <__assert_fail@plt+0x2028>
   2652c:	b	264ec <__assert_fail@plt+0x152c0>
   26530:	mov	r4, #12
   26534:	b	264ec <__assert_fail@plt+0x152c0>
   26538:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2653c:	mov	r4, r0
   26540:	mov	r5, r3
   26544:	strd	r6, [sp, #8]
   26548:	strd	r8, [sp, #16]
   2654c:	strd	sl, [sp, #24]
   26550:	str	lr, [sp, #32]
   26554:	sub	sp, sp, #428	; 0x1ac
   26558:	ldr	r9, [r0]
   2655c:	str	r0, [sp, #32]
   26560:	add	r0, sp, #148	; 0x94
   26564:	str	r1, [sp, #56]	; 0x38
   26568:	mov	r1, #0
   2656c:	str	r2, [sp, #72]	; 0x48
   26570:	mov	r2, #136	; 0x88
   26574:	ldr	r6, [sp, #464]	; 0x1d0
   26578:	bl	1116c <memset@plt>
   2657c:	ldr	r2, [r4, #16]
   26580:	cmp	r2, #0
   26584:	str	r2, [sp, #48]	; 0x30
   26588:	str	r9, [sp, #232]	; 0xe8
   2658c:	beq	265a8 <__assert_fail@plt+0x1537c>
   26590:	ldrb	r2, [r4, #28]
   26594:	subs	r3, r5, r6
   26598:	movne	r3, #1
   2659c:	ands	r3, r3, r2, lsr #3
   265a0:	streq	r3, [sp, #48]	; 0x30
   265a4:	bne	2694c <__assert_fail@plt+0x15720>
   265a8:	ldr	r3, [sp, #32]
   265ac:	ldr	r2, [sp, #472]	; 0x1d8
   265b0:	ldr	r3, [r3, #24]
   265b4:	cmp	r3, r2
   265b8:	movcs	r3, #0
   265bc:	strcs	r3, [sp, #108]	; 0x6c
   265c0:	bcs	265e0 <__assert_fail@plt+0x153b4>
   265c4:	sub	r2, r2, #1
   265c8:	sub	r1, r3, r2
   265cc:	sub	r3, r2, r3
   265d0:	str	r3, [sp, #108]	; 0x6c
   265d4:	ldr	r3, [sp, #472]	; 0x1d8
   265d8:	add	r3, r3, r1
   265dc:	str	r3, [sp, #472]	; 0x1d8
   265e0:	ldr	ip, [sp, #32]
   265e4:	ldr	r3, [ip, #8]
   265e8:	cmp	r3, #0
   265ec:	beq	27228 <__assert_fail@plt+0x15ffc>
   265f0:	ldr	r3, [r9, #36]	; 0x24
   265f4:	cmp	r3, #0
   265f8:	beq	27228 <__assert_fail@plt+0x15ffc>
   265fc:	ldr	r2, [r9, #40]	; 0x28
   26600:	cmp	r2, #0
   26604:	beq	27228 <__assert_fail@plt+0x15ffc>
   26608:	ldr	r1, [r9, #44]	; 0x2c
   2660c:	cmp	r1, #0
   26610:	beq	27228 <__assert_fail@plt+0x15ffc>
   26614:	ldr	r0, [r9, #48]	; 0x30
   26618:	cmp	r0, #0
   2661c:	beq	27228 <__assert_fail@plt+0x15ffc>
   26620:	ldr	r3, [r3, #8]
   26624:	cmp	r3, #0
   26628:	bne	2666c <__assert_fail@plt+0x15440>
   2662c:	ldr	r3, [r2, #8]
   26630:	cmp	r3, #0
   26634:	bne	2666c <__assert_fail@plt+0x15440>
   26638:	ldr	r3, [r1, #8]
   2663c:	cmp	r3, #0
   26640:	beq	26650 <__assert_fail@plt+0x15424>
   26644:	ldrsb	r3, [ip, #28]
   26648:	cmp	r3, #0
   2664c:	blt	2666c <__assert_fail@plt+0x15440>
   26650:	adds	r6, r6, #0
   26654:	movne	r6, #1
   26658:	cmp	r5, #0
   2665c:	moveq	r6, #0
   26660:	cmp	r6, #0
   26664:	bne	27228 <__assert_fail@plt+0x15ffc>
   26668:	mov	r5, r6
   2666c:	ldr	r3, [sp, #472]	; 0x1d8
   26670:	cmp	r3, #0
   26674:	bne	2693c <__assert_fail@plt+0x15710>
   26678:	ldr	r3, [r9, #76]	; 0x4c
   2667c:	adds	r3, r3, #0
   26680:	movne	r3, #1
   26684:	str	r3, [sp, #20]
   26688:	str	r3, [sp, #60]	; 0x3c
   2668c:	ldr	r8, [sp, #32]
   26690:	add	r0, sp, #148	; 0x94
   26694:	ldr	r2, [sp, #56]	; 0x38
   26698:	ldr	r3, [r9, #8]
   2669c:	ldr	ip, [r8, #12]
   266a0:	str	r2, [sp, #148]	; 0x94
   266a4:	ldr	lr, [r9, #92]	; 0x5c
   266a8:	add	r3, r3, #1
   266ac:	ldrb	r2, [r9, #88]	; 0x58
   266b0:	and	r4, ip, #4194304	; 0x400000
   266b4:	ubfx	ip, ip, #22, #1
   266b8:	ldr	r8, [r8, #20]
   266bc:	cmp	r3, lr
   266c0:	ldr	r7, [sp, #72]	; 0x48
   266c4:	movlt	r3, lr
   266c8:	str	r8, [sp, #80]	; 0x50
   266cc:	strb	ip, [sp, #220]	; 0xdc
   266d0:	ubfx	ip, r2, #2, #1
   266d4:	add	r1, r7, #1
   266d8:	ubfx	r2, r2, #3, #1
   266dc:	str	lr, [sp, #228]	; 0xe4
   266e0:	orrs	lr, r8, r4
   266e4:	str	r7, [sp, #192]	; 0xc0
   266e8:	movne	lr, #1
   266ec:	moveq	lr, #0
   266f0:	str	r7, [sp, #196]	; 0xc4
   266f4:	cmp	r3, r1
   266f8:	str	r7, [sp, #200]	; 0xc8
   266fc:	movlt	r1, r3
   26700:	str	r7, [sp, #204]	; 0xcc
   26704:	str	r8, [sp, #212]	; 0xd4
   26708:	strb	ip, [sp, #221]	; 0xdd
   2670c:	strb	r2, [sp, #222]	; 0xde
   26710:	strb	lr, [sp, #223]	; 0xdf
   26714:	bl	1ee20 <__assert_fail@plt+0xdbf4>
   26718:	subs	r3, r0, #0
   2671c:	str	r3, [sp, #36]	; 0x24
   26720:	bne	26e04 <__assert_fail@plt+0x15bd8>
   26724:	ldrb	r3, [r9, #88]	; 0x58
   26728:	add	r1, r9, #96	; 0x60
   2672c:	ldrb	r2, [sp, #223]	; 0xdf
   26730:	str	r1, [sp, #216]	; 0xd8
   26734:	ubfx	r3, r3, #4, #1
   26738:	cmp	r2, #0
   2673c:	strb	r3, [sp, #226]	; 0xe2
   26740:	bne	26758 <__assert_fail@plt+0x1552c>
   26744:	ldr	r3, [r9, #92]	; 0x5c
   26748:	ldr	r2, [sp, #56]	; 0x38
   2674c:	cmp	r3, #1
   26750:	str	r2, [sp, #152]	; 0x98
   26754:	ble	27320 <__assert_fail@plt+0x160f4>
   26758:	mov	r2, #0
   2675c:	ldr	r3, [sp, #32]
   26760:	mvn	r1, #0
   26764:	str	r2, [sp, #176]	; 0xb0
   26768:	str	r2, [sp, #180]	; 0xb4
   2676c:	ldr	r2, [sp, #468]	; 0x1d4
   26770:	ldrb	r3, [r3, #28]
   26774:	str	r2, [sp, #200]	; 0xc8
   26778:	str	r2, [sp, #204]	; 0xcc
   2677c:	ubfx	r3, r3, #7, #1
   26780:	strb	r3, [sp, #225]	; 0xe1
   26784:	ldr	r7, [r9, #76]	; 0x4c
   26788:	str	r1, [sp, #240]	; 0xf0
   2678c:	ldr	r3, [sp, #480]	; 0x1e0
   26790:	lsl	r4, r7, #1
   26794:	cmp	r4, #0
   26798:	str	r3, [sp, #236]	; 0xec
   2679c:	ble	267dc <__assert_fail@plt+0x155b0>
   267a0:	movw	r3, #43690	; 0xaaaa
   267a4:	movt	r3, #2730	; 0xaaa
   267a8:	cmp	r4, r3
   267ac:	bgt	27580 <__assert_fail@plt+0x16354>
   267b0:	add	r0, r4, r7, lsl #2
   267b4:	lsl	r0, r0, #3
   267b8:	bl	2d378 <__assert_fail@plt+0x1c14c>
   267bc:	str	r0, [sp, #264]	; 0x108
   267c0:	lsl	r0, r7, #3
   267c4:	bl	2d378 <__assert_fail@plt+0x1c14c>
   267c8:	ldr	r3, [sp, #264]	; 0x108
   267cc:	str	r0, [sp, #280]	; 0x118
   267d0:	cmp	r0, #0
   267d4:	cmpne	r3, #0
   267d8:	beq	27580 <__assert_fail@plt+0x16354>
   267dc:	ldr	r2, [sp, #472]	; 0x1d8
   267e0:	mov	r3, #1
   267e4:	str	r4, [sp, #260]	; 0x104
   267e8:	str	r3, [sp, #268]	; 0x10c
   267ec:	str	r4, [sp, #276]	; 0x114
   267f0:	cmp	r2, r3
   267f4:	bls	27514 <__assert_fail@plt+0x162e8>
   267f8:	ldr	r0, [sp, #184]	; 0xb8
   267fc:	cmn	r0, #-1073741822	; 0xc0000002
   26800:	bhi	27580 <__assert_fail@plt+0x16354>
   26804:	add	r0, r0, #1
   26808:	lsl	r0, r0, #2
   2680c:	bl	2d378 <__assert_fail@plt+0x1c14c>
   26810:	cmp	r0, #0
   26814:	mov	r4, r0
   26818:	str	r0, [sp, #248]	; 0xf8
   2681c:	beq	27254 <__assert_fail@plt+0x16028>
   26820:	ldr	r3, [sp, #480]	; 0x1e0
   26824:	str	r5, [sp, #116]	; 0x74
   26828:	ldr	r2, [r9, #92]	; 0x5c
   2682c:	tst	r3, #1
   26830:	movne	r3, #4
   26834:	moveq	r3, #6
   26838:	cmp	r5, r6
   2683c:	str	r2, [sp, #88]	; 0x58
   26840:	str	r3, [sp, #208]	; 0xd0
   26844:	movge	r3, r5
   26848:	movlt	r3, r6
   2684c:	mvngt	r2, #0
   26850:	movle	r2, #1
   26854:	str	r3, [sp, #64]	; 0x40
   26858:	ldr	r3, [sp, #48]	; 0x30
   2685c:	str	r2, [sp, #96]	; 0x60
   26860:	movlt	r2, r5
   26864:	movge	r2, r6
   26868:	str	r2, [sp, #76]	; 0x4c
   2686c:	cmp	r3, #0
   26870:	beq	27590 <__assert_fail@plt+0x16364>
   26874:	ldr	r3, [sp, #88]	; 0x58
   26878:	cmp	r3, #1
   2687c:	moveq	r3, #4
   26880:	beq	268a0 <__assert_fail@plt+0x15674>
   26884:	ldr	r3, [sp, #32]
   26888:	ldr	r2, [sp, #80]	; 0x50
   2688c:	ldr	r3, [r3, #12]
   26890:	and	r3, r3, #4194304	; 0x400000
   26894:	orrs	r3, r2, r3
   26898:	moveq	r3, #4
   2689c:	movne	r3, #0
   268a0:	ldr	r2, [sp, #36]	; 0x24
   268a4:	cmp	r5, r6
   268a8:	movle	r2, #2
   268ac:	ldr	r1, [sp, #80]	; 0x50
   268b0:	cmp	r1, #0
   268b4:	orrne	r3, r3, #1
   268b8:	orr	r3, r3, r2
   268bc:	ldr	r1, [sp, #64]	; 0x40
   268c0:	ldr	r2, [sp, #76]	; 0x4c
   268c4:	cmp	r5, r2
   268c8:	movge	r2, #0
   268cc:	movlt	r2, #1
   268d0:	cmp	r5, r1
   268d4:	orrgt	r2, r2, #1
   268d8:	cmp	r2, #0
   268dc:	bne	26dfc <__assert_fail@plt+0x15bd0>
   268e0:	add	r2, sp, #424	; 0x1a8
   268e4:	cmp	r5, r6
   268e8:	str	r9, [sp, #68]	; 0x44
   268ec:	sub	r3, r3, #4
   268f0:	suble	r2, r2, #308	; 0x134
   268f4:	movgt	r2, #0
   268f8:	str	r3, [sp, #92]	; 0x5c
   268fc:	adds	r3, r2, #0
   26900:	movne	r3, #1
   26904:	str	r2, [sp, #100]	; 0x64
   26908:	str	r3, [sp, #104]	; 0x68
   2690c:	mov	r3, #65280	; 0xff00
   26910:	movt	r3, #3
   26914:	str	r3, [sp, #52]	; 0x34
   26918:	ldr	r3, [sp, #92]	; 0x5c
   2691c:	cmp	r3, #4
   26920:	ldrls	pc, [pc, r3, lsl #2]
   26924:	b	275ac <__assert_fail@plt+0x16380>
   26928:	andeq	r6, r2, r4, ror lr
   2692c:	andeq	r6, r2, r4, ror lr
   26930:	andeq	r6, r2, ip, lsl #28
   26934:	andeq	r6, r2, r8, asr #26
   26938:	andeq	r6, r2, r4, ror #18
   2693c:	mov	r3, #1
   26940:	str	r3, [sp, #20]
   26944:	str	r3, [sp, #60]	; 0x3c
   26948:	b	2668c <__assert_fail@plt+0x15460>
   2694c:	ldr	r3, [sp, #48]	; 0x30
   26950:	tst	r2, #1
   26954:	movne	r3, #0
   26958:	str	r3, [sp, #48]	; 0x30
   2695c:	b	265a8 <__assert_fail@plt+0x1537c>
   26960:	str	r5, [sp, #116]	; 0x74
   26964:	mov	r1, r5
   26968:	add	r0, sp, #148	; 0x94
   2696c:	ldr	r2, [sp, #480]	; 0x1e0
   26970:	bl	23454 <__assert_fail@plt+0x12228>
   26974:	subs	r3, r0, #0
   26978:	str	r3, [sp, #36]	; 0x24
   2697c:	bne	275e0 <__assert_fail@plt+0x163b4>
   26980:	ldr	r3, [sp, #88]	; 0x58
   26984:	cmp	r3, #1
   26988:	beq	269a8 <__assert_fail@plt+0x1577c>
   2698c:	ldr	r3, [sp, #176]	; 0xb0
   26990:	cmp	r3, #0
   26994:	beq	269a8 <__assert_fail@plt+0x1577c>
   26998:	ldr	r3, [sp, #156]	; 0x9c
   2699c:	ldr	r3, [r3]
   269a0:	cmn	r3, #1
   269a4:	beq	271d8 <__assert_fail@plt+0x15fac>
   269a8:	ldr	r4, [sp, #232]	; 0xe8
   269ac:	mov	r3, #0
   269b0:	ldr	sl, [r4, #36]	; 0x24
   269b4:	str	r3, [sp, #124]	; 0x7c
   269b8:	str	r3, [sp, #252]	; 0xfc
   269bc:	str	r3, [sp, #256]	; 0x100
   269c0:	str	r3, [sp, #268]	; 0x10c
   269c4:	ldr	r3, [sp, #188]	; 0xbc
   269c8:	mov	r2, r3
   269cc:	ldrsb	r3, [sl, #52]	; 0x34
   269d0:	str	r2, [sp, #12]
   269d4:	cmp	r3, #0
   269d8:	bge	26a18 <__assert_fail@plt+0x157ec>
   269dc:	sub	r1, r2, #1
   269e0:	add	r0, sp, #148	; 0x94
   269e4:	ldr	r2, [sp, #236]	; 0xec
   269e8:	bl	23204 <__assert_fail@plt+0x11fd8>
   269ec:	tst	r0, #1
   269f0:	bne	27540 <__assert_fail@plt+0x16314>
   269f4:	cmp	r0, #0
   269f8:	beq	26a18 <__assert_fail@plt+0x157ec>
   269fc:	and	r3, r0, #6
   26a00:	cmp	r3, #6
   26a04:	beq	276d0 <__assert_fail@plt+0x164a4>
   26a08:	tst	r0, #2
   26a0c:	bne	27624 <__assert_fail@plt+0x163f8>
   26a10:	tst	r0, #4
   26a14:	bne	2764c <__assert_fail@plt+0x16420>
   26a18:	ldr	r3, [sp, #248]	; 0xf8
   26a1c:	cmp	r3, #0
   26a20:	beq	272e8 <__assert_fail@plt+0x160bc>
   26a24:	ldr	r2, [r4, #76]	; 0x4c
   26a28:	ldr	r1, [sp, #12]
   26a2c:	cmp	r2, #0
   26a30:	str	sl, [r3, r1, lsl #2]
   26a34:	bne	2768c <__assert_fail@plt+0x16460>
   26a38:	ldrb	r3, [sl, #52]	; 0x34
   26a3c:	ldr	r2, [sp, #104]	; 0x68
   26a40:	str	r2, [sp, #16]
   26a44:	ubfx	r3, r3, #4, #1
   26a48:	cmp	r3, #0
   26a4c:	mvneq	fp, #0
   26a50:	streq	r3, [sp, #28]
   26a54:	bne	275ec <__assert_fail@plt+0x163c0>
   26a58:	ldr	r3, [sp, #100]	; 0x64
   26a5c:	str	fp, [sp, #24]
   26a60:	ldr	r4, [sp, #188]	; 0xbc
   26a64:	str	r3, [sp, #40]	; 0x28
   26a68:	b	26acc <__assert_fail@plt+0x158a0>
   26a6c:	ldrb	r3, [r5, #52]	; 0x34
   26a70:	ldr	r2, [sp, #16]
   26a74:	ldr	r1, [sp, #12]
   26a78:	ldr	r4, [sp, #188]	; 0xbc
   26a7c:	cmp	sl, r5
   26a80:	movne	r2, #0
   26a84:	andeq	r2, r2, #1
   26a88:	cmp	r2, #0
   26a8c:	movne	r1, r8
   26a90:	tst	r3, #16
   26a94:	str	r1, [sp, #12]
   26a98:	str	r2, [sp, #16]
   26a9c:	beq	26ac8 <__assert_fail@plt+0x1589c>
   26aa0:	tst	r3, #128	; 0x80
   26aa4:	bne	26f24 <__assert_fail@plt+0x15cf8>
   26aa8:	ldr	r3, [sp, #20]
   26aac:	cmp	r3, #0
   26ab0:	beq	2761c <__assert_fail@plt+0x163f0>
   26ab4:	ldr	r3, [sp, #20]
   26ab8:	str	r4, [sp, #24]
   26abc:	str	r3, [sp, #28]
   26ac0:	mov	r3, #0
   26ac4:	str	r3, [sp, #40]	; 0x28
   26ac8:	mov	sl, r5
   26acc:	ldr	r3, [sp, #204]	; 0xcc
   26ad0:	cmp	r3, r4
   26ad4:	ble	26f1c <__assert_fail@plt+0x15cf0>
   26ad8:	ldr	r3, [sp, #184]	; 0xb8
   26adc:	add	r8, r4, #1
   26ae0:	cmp	r8, r3
   26ae4:	bge	26f40 <__assert_fail@plt+0x15d14>
   26ae8:	ldr	r3, [sp, #176]	; 0xb0
   26aec:	cmp	r8, r3
   26af0:	bge	271ac <__assert_fail@plt+0x15f80>
   26af4:	ldrb	r3, [sl, #52]	; 0x34
   26af8:	tst	r3, #32
   26afc:	bne	26f74 <__assert_fail@plt+0x15d48>
   26b00:	ldr	r3, [sp, #152]	; 0x98
   26b04:	add	r2, r4, #1
   26b08:	str	r2, [sp, #188]	; 0xbc
   26b0c:	ldrb	r4, [r3, r4]
   26b10:	ldr	r3, [sl, #44]	; 0x2c
   26b14:	cmp	r3, #0
   26b18:	beq	2717c <__assert_fail@plt+0x15f50>
   26b1c:	ldr	r5, [r3, r4, lsl #2]
   26b20:	ldr	r3, [sp, #248]	; 0xf8
   26b24:	cmp	r3, #0
   26b28:	beq	26b40 <__assert_fail@plt+0x15914>
   26b2c:	mov	r2, r5
   26b30:	add	r1, sp, #148	; 0x94
   26b34:	add	r0, sp, #124	; 0x7c
   26b38:	bl	260bc <__assert_fail@plt+0x14e90>
   26b3c:	mov	r5, r0
   26b40:	cmp	r5, #0
   26b44:	bne	26a6c <__assert_fail@plt+0x15840>
   26b48:	ldr	r3, [sp, #124]	; 0x7c
   26b4c:	ldr	r4, [sp, #248]	; 0xf8
   26b50:	cmp	r3, #0
   26b54:	bne	27250 <__assert_fail@plt+0x16024>
   26b58:	cmp	r4, #0
   26b5c:	beq	26f1c <__assert_fail@plt+0x15cf0>
   26b60:	ldr	r2, [sp, #28]
   26b64:	ldr	r3, [sp, #60]	; 0x3c
   26b68:	eor	r3, r3, #1
   26b6c:	tst	r2, r3
   26b70:	bne	26f1c <__assert_fail@plt+0x15cf0>
   26b74:	ldr	r3, [sp, #188]	; 0xbc
   26b78:	mov	r1, #0
   26b7c:	ldr	r0, [sp, #252]	; 0xfc
   26b80:	add	r4, r4, r3, lsl #2
   26b84:	b	26b9c <__assert_fail@plt+0x15970>
   26b88:	ldr	ip, [r4, #4]!
   26b8c:	mov	r3, r2
   26b90:	mov	r1, #1
   26b94:	cmp	ip, #0
   26b98:	bne	26ee0 <__assert_fail@plt+0x15cb4>
   26b9c:	add	r2, r3, #1
   26ba0:	cmp	r0, r2
   26ba4:	bge	26b88 <__assert_fail@plt+0x1595c>
   26ba8:	ldr	fp, [sp, #24]
   26bac:	cmp	r1, #0
   26bb0:	strne	r3, [sp, #188]	; 0xbc
   26bb4:	ldr	r2, [sp, #40]	; 0x28
   26bb8:	cmp	r2, #0
   26bbc:	beq	26bd0 <__assert_fail@plt+0x159a4>
   26bc0:	ldr	r3, [r2]
   26bc4:	ldr	r1, [sp, #12]
   26bc8:	add	r3, r3, r1
   26bcc:	str	r3, [r2]
   26bd0:	cmn	fp, #1
   26bd4:	beq	271cc <__assert_fail@plt+0x15fa0>
   26bd8:	cmn	fp, #2
   26bdc:	ldr	r4, [sp, #248]	; 0xf8
   26be0:	beq	27250 <__assert_fail@plt+0x16024>
   26be4:	ldr	r3, [sp, #32]
   26be8:	str	fp, [sp, #240]	; 0xf0
   26bec:	ldrb	r3, [r3, #28]
   26bf0:	tst	r3, #16
   26bf4:	bne	2728c <__assert_fail@plt+0x16060>
   26bf8:	ldr	r2, [sp, #472]	; 0x1d8
   26bfc:	cmp	r2, #1
   26c00:	bls	272f8 <__assert_fail@plt+0x160cc>
   26c04:	mov	r2, fp
   26c08:	add	r0, sp, #148	; 0x94
   26c0c:	ldr	r1, [r4, fp, lsl #2]
   26c10:	bl	23cc0 <__assert_fail@plt+0x12a94>
   26c14:	ldr	r3, [sp, #68]	; 0x44
   26c18:	ldrb	r3, [r3, #88]	; 0x58
   26c1c:	str	r0, [sp, #244]	; 0xf4
   26c20:	tst	r3, #1
   26c24:	bne	26c38 <__assert_fail@plt+0x15a0c>
   26c28:	ldr	r3, [sp, #68]	; 0x44
   26c2c:	ldr	r3, [r3, #76]	; 0x4c
   26c30:	cmp	r3, #0
   26c34:	beq	28000 <__assert_fail@plt+0x16dd4>
   26c38:	ldr	r3, [sp, #232]	; 0xe8
   26c3c:	cmn	fp, #-1073741822	; 0xc0000002
   26c40:	ldr	r9, [sp, #244]	; 0xf4
   26c44:	str	r3, [sp, #12]
   26c48:	bhi	27250 <__assert_fail@plt+0x16024>
   26c4c:	add	r5, fp, #1
   26c50:	lsl	r4, r5, #2
   26c54:	mov	r0, r4
   26c58:	bl	2d378 <__assert_fail@plt+0x1c14c>
   26c5c:	subs	sl, r0, #0
   26c60:	beq	2762c <__assert_fail@plt+0x16400>
   26c64:	ldr	r3, [sp, #12]
   26c68:	ldr	r6, [r3, #76]	; 0x4c
   26c6c:	cmp	r6, #0
   26c70:	beq	27328 <__assert_fail@plt+0x160fc>
   26c74:	mov	r0, r4
   26c78:	bl	2d378 <__assert_fail@plt+0x1c14c>
   26c7c:	cmp	r0, #0
   26c80:	mov	r6, r0
   26c84:	str	r0, [sp, #24]
   26c88:	beq	27704 <__assert_fail@plt+0x164d8>
   26c8c:	add	r4, sp, #300	; 0x12c
   26c90:	mov	r8, #0
   26c94:	lsl	r7, r5, #2
   26c98:	mov	r1, #0
   26c9c:	mov	r0, r6
   26ca0:	mov	r2, r7
   26ca4:	bl	1116c <memset@plt>
   26ca8:	add	r1, sp, #284	; 0x11c
   26cac:	add	r0, sp, #148	; 0x94
   26cb0:	str	sl, [sp, #284]	; 0x11c
   26cb4:	str	r6, [sp, #288]	; 0x120
   26cb8:	str	r9, [sp, #292]	; 0x124
   26cbc:	str	fp, [sp, #296]	; 0x128
   26cc0:	str	r8, [r4]
   26cc4:	str	r8, [r4, #4]
   26cc8:	str	r8, [r4, #8]
   26ccc:	bl	26260 <__assert_fail@plt+0x15034>
   26cd0:	mov	r3, r0
   26cd4:	ldr	r0, [sp, #308]	; 0x134
   26cd8:	str	r3, [sp, #16]
   26cdc:	bl	13254 <__assert_fail@plt+0x2028>
   26ce0:	ldr	r3, [sp, #16]
   26ce4:	cmp	r3, #0
   26ce8:	bne	276d8 <__assert_fail@plt+0x164ac>
   26cec:	ldr	r3, [sl]
   26cf0:	cmp	r3, #0
   26cf4:	bne	2772c <__assert_fail@plt+0x16500>
   26cf8:	ldr	r3, [r6]
   26cfc:	cmp	r3, #0
   26d00:	bne	2772c <__assert_fail@plt+0x16500>
   26d04:	ldr	r3, [sp, #248]	; 0xf8
   26d08:	sub	r7, r7, #4
   26d0c:	add	r3, r3, r7
   26d10:	subs	fp, fp, #1
   26d14:	bcc	27560 <__assert_fail@plt+0x16334>
   26d18:	ldr	r1, [r3, #-4]!
   26d1c:	cmp	r1, #0
   26d20:	beq	26d10 <__assert_fail@plt+0x15ae4>
   26d24:	ldrb	r2, [r1, #52]	; 0x34
   26d28:	tst	r2, #16
   26d2c:	beq	26d10 <__assert_fail@plt+0x15ae4>
   26d30:	mov	r2, fp
   26d34:	add	r0, sp, #148	; 0x94
   26d38:	bl	23cc0 <__assert_fail@plt+0x12a94>
   26d3c:	add	r5, fp, #1
   26d40:	mov	r9, r0
   26d44:	b	26c94 <__assert_fail@plt+0x15a68>
   26d48:	ldr	r3, [sp, #64]	; 0x40
   26d4c:	cmp	r3, r5
   26d50:	ble	26dbc <__assert_fail@plt+0x15b90>
   26d54:	ldr	r3, [sp, #56]	; 0x38
   26d58:	ldr	r1, [sp, #80]	; 0x50
   26d5c:	ldrb	r2, [r3, r5]
   26d60:	add	r3, r3, r5
   26d64:	ldrb	r2, [r1, r2]
   26d68:	ldr	r1, [sp, #48]	; 0x30
   26d6c:	ldrb	r2, [r1, r2]
   26d70:	cmp	r2, #0
   26d74:	bne	26964 <__assert_fail@plt+0x15738>
   26d78:	ldr	ip, [sp, #48]	; 0x30
   26d7c:	ldr	r2, [sp, #56]	; 0x38
   26d80:	ldr	r1, [sp, #64]	; 0x40
   26d84:	ldr	lr, [sp, #80]	; 0x50
   26d88:	sub	r0, r2, #1
   26d8c:	rsb	r2, r2, #1
   26d90:	add	r0, r0, r1
   26d94:	b	26dac <__assert_fail@plt+0x15b80>
   26d98:	ldrb	r1, [r3, #1]!
   26d9c:	ldrb	r1, [lr, r1]
   26da0:	ldrb	r1, [ip, r1]
   26da4:	cmp	r1, #0
   26da8:	bne	26960 <__assert_fail@plt+0x15734>
   26dac:	cmp	r3, r0
   26db0:	add	r5, r2, r3
   26db4:	bne	26d98 <__assert_fail@plt+0x15b6c>
   26db8:	str	r5, [sp, #116]	; 0x74
   26dbc:	ldr	r3, [sp, #64]	; 0x40
   26dc0:	cmp	r3, r5
   26dc4:	bne	26964 <__assert_fail@plt+0x15738>
   26dc8:	ldr	r2, [sp, #72]	; 0x48
   26dcc:	cmp	r2, r3
   26dd0:	ldrgt	r2, [sp, #56]	; 0x38
   26dd4:	movle	r3, #0
   26dd8:	ldrbgt	r3, [r2, r3]
   26ddc:	ldr	r2, [sp, #80]	; 0x50
   26de0:	cmp	r2, #0
   26de4:	ldrbne	r3, [r2, r3]
   26de8:	ldr	r2, [sp, #48]	; 0x30
   26dec:	ldrb	r3, [r2, r3]
   26df0:	cmp	r3, #0
   26df4:	bne	26964 <__assert_fail@plt+0x15738>
   26df8:	ldr	r9, [sp, #68]	; 0x44
   26dfc:	mov	r3, #1
   26e00:	str	r3, [sp, #36]	; 0x24
   26e04:	ldr	r4, [sp, #248]	; 0xf8
   26e08:	b	2725c <__assert_fail@plt+0x16030>
   26e0c:	ldr	r3, [sp, #64]	; 0x40
   26e10:	cmp	r3, r5
   26e14:	ble	26dbc <__assert_fail@plt+0x15b90>
   26e18:	ldr	r1, [sp, #48]	; 0x30
   26e1c:	ldr	r3, [sp, #56]	; 0x38
   26e20:	ldrb	r2, [r3, r5]
   26e24:	add	r3, r3, r5
   26e28:	ldrb	r2, [r1, r2]
   26e2c:	cmp	r2, #0
   26e30:	bne	26964 <__assert_fail@plt+0x15738>
   26e34:	ldr	ip, [sp, #48]	; 0x30
   26e38:	ldr	r2, [sp, #56]	; 0x38
   26e3c:	ldr	r1, [sp, #64]	; 0x40
   26e40:	sub	r0, r2, #1
   26e44:	rsb	r2, r2, #1
   26e48:	add	r0, r0, r1
   26e4c:	b	26e60 <__assert_fail@plt+0x15c34>
   26e50:	ldrb	r1, [r3, #1]!
   26e54:	ldrb	r1, [ip, r1]
   26e58:	cmp	r1, #0
   26e5c:	bne	26960 <__assert_fail@plt+0x15734>
   26e60:	cmp	r0, r3
   26e64:	add	r5, r2, r3
   26e68:	bne	26e50 <__assert_fail@plt+0x15c24>
   26e6c:	str	r5, [sp, #116]	; 0x74
   26e70:	b	26dbc <__assert_fail@plt+0x15b90>
   26e74:	ldr	r3, [sp, #76]	; 0x4c
   26e78:	cmp	r3, r5
   26e7c:	bgt	26df8 <__assert_fail@plt+0x15bcc>
   26e80:	mov	r1, #0
   26e84:	mov	r3, r5
   26e88:	ldr	ip, [sp, #48]	; 0x30
   26e8c:	ldr	r6, [sp, #56]	; 0x38
   26e90:	ldr	lr, [sp, #72]	; 0x48
   26e94:	ldr	r4, [sp, #76]	; 0x4c
   26e98:	ldr	r0, [sp, #80]	; 0x50
   26e9c:	b	26eb0 <__assert_fail@plt+0x15c84>
   26ea0:	sub	r3, r3, #1
   26ea4:	mov	r1, #1
   26ea8:	cmp	r3, r4
   26eac:	blt	27598 <__assert_fail@plt+0x1636c>
   26eb0:	cmp	lr, r3
   26eb4:	mov	r2, #0
   26eb8:	ldrbgt	r2, [r6, r3]
   26ebc:	cmp	r0, #0
   26ec0:	ldrbne	r2, [r0, r2]
   26ec4:	ldrb	r2, [ip, r2]
   26ec8:	cmp	r2, #0
   26ecc:	beq	26ea0 <__assert_fail@plt+0x15c74>
   26ed0:	cmp	r1, #0
   26ed4:	movne	r5, r3
   26ed8:	strne	r3, [sp, #116]	; 0x74
   26edc:	b	26964 <__assert_fail@plt+0x15738>
   26ee0:	mov	r2, #0
   26ee4:	add	r1, sp, #148	; 0x94
   26ee8:	str	r3, [sp, #188]	; 0xbc
   26eec:	add	r0, sp, #124	; 0x7c
   26ef0:	bl	260bc <__assert_fail@plt+0x14e90>
   26ef4:	ldr	r3, [sp, #124]	; 0x7c
   26ef8:	cmp	r3, #0
   26efc:	bne	26f10 <__assert_fail@plt+0x15ce4>
   26f00:	cmp	r0, #0
   26f04:	bne	27614 <__assert_fail@plt+0x163e8>
   26f08:	ldr	r4, [sp, #248]	; 0xf8
   26f0c:	b	26b74 <__assert_fail@plt+0x15948>
   26f10:	cmp	r0, #0
   26f14:	mov	r5, r0
   26f18:	bne	26a6c <__assert_fail@plt+0x15840>
   26f1c:	ldr	fp, [sp, #24]
   26f20:	b	26bb4 <__assert_fail@plt+0x15988>
   26f24:	mov	r2, r4
   26f28:	mov	r1, r5
   26f2c:	add	r0, sp, #148	; 0x94
   26f30:	bl	23cc0 <__assert_fail@plt+0x12a94>
   26f34:	cmp	r0, #0
   26f38:	beq	26ac8 <__assert_fail@plt+0x1589c>
   26f3c:	b	26aa8 <__assert_fail@plt+0x1587c>
   26f40:	ldr	r2, [sp, #196]	; 0xc4
   26f44:	cmp	r3, r2
   26f48:	bge	26ae8 <__assert_fail@plt+0x158bc>
   26f4c:	add	r1, r4, #2
   26f50:	add	r0, sp, #148	; 0x94
   26f54:	bl	1f858 <__assert_fail@plt+0xe62c>
   26f58:	cmp	r0, #0
   26f5c:	str	r0, [sp, #124]	; 0x7c
   26f60:	bne	2754c <__assert_fail@plt+0x16320>
   26f64:	ldrb	r3, [sl, #52]	; 0x34
   26f68:	ldr	r4, [sp, #188]	; 0xbc
   26f6c:	tst	r3, #32
   26f70:	beq	26b00 <__assert_fail@plt+0x158d4>
   26f74:	ldr	fp, [sl, #8]
   26f78:	ldr	r6, [sp, #232]	; 0xe8
   26f7c:	cmp	fp, #0
   26f80:	ble	27280 <__assert_fail@plt+0x16054>
   26f84:	add	r3, r6, #128	; 0x80
   26f88:	mov	r7, #0
   26f8c:	str	r3, [sp, #44]	; 0x2c
   26f90:	str	r8, [sp, #84]	; 0x54
   26f94:	b	270b4 <__assert_fail@plt+0x15e88>
   26f98:	tst	r0, #1
   26f9c:	beq	270a8 <__assert_fail@plt+0x15e7c>
   26fa0:	tst	r5, #8
   26fa4:	bne	270a8 <__assert_fail@plt+0x15e7c>
   26fa8:	tst	r5, #32
   26fac:	beq	26fb8 <__assert_fail@plt+0x15d8c>
   26fb0:	tst	r0, #2
   26fb4:	beq	270a8 <__assert_fail@plt+0x15e7c>
   26fb8:	tst	r5, #128	; 0x80
   26fbc:	beq	26fc8 <__assert_fail@plt+0x15d9c>
   26fc0:	tst	r0, #8
   26fc4:	beq	270a8 <__assert_fail@plt+0x15e7c>
   26fc8:	mov	r0, r8
   26fcc:	add	r3, sp, #148	; 0x94
   26fd0:	str	r4, [sp]
   26fd4:	mov	r2, r9
   26fd8:	ldr	r1, [sp, #44]	; 0x2c
   26fdc:	bl	24ec0 <__assert_fail@plt+0x13c94>
   26fe0:	subs	r4, r0, #0
   26fe4:	beq	270a0 <__assert_fail@plt+0x15e74>
   26fe8:	ldr	r2, [sp, #188]	; 0xbc
   26fec:	add	r0, sp, #148	; 0x94
   26ff0:	ldr	r3, [sp, #268]	; 0x10c
   26ff4:	cmp	r3, r4
   26ff8:	movlt	r3, r4
   26ffc:	add	r4, r4, r2
   27000:	mov	r1, r4
   27004:	str	r3, [sp, #268]	; 0x10c
   27008:	bl	203ec <__assert_fail@plt+0xf1c0>
   2700c:	cmp	r0, #0
   27010:	str	r0, [sp, #136]	; 0x88
   27014:	bne	2720c <__assert_fail@plt+0x15fe0>
   27018:	ldr	r3, [r6, #12]
   2701c:	ldr	r5, [sp, #248]	; 0xf8
   27020:	ldr	r2, [r6, #24]
   27024:	ldr	r3, [r3, r9, lsl #2]
   27028:	ldr	r1, [r5, r4, lsl #2]
   2702c:	add	r3, r3, r3, lsl #1
   27030:	lsl	r3, r3, #2
   27034:	cmp	r1, #0
   27038:	add	ip, r2, r3
   2703c:	beq	27110 <__assert_fail@plt+0x15ee4>
   27040:	mov	r2, ip
   27044:	add	r0, sp, #284	; 0x11c
   27048:	ldr	r1, [r1, #40]	; 0x28
   2704c:	bl	21274 <__assert_fail@plt+0x10048>
   27050:	cmp	r0, #0
   27054:	str	r0, [sp, #136]	; 0x88
   27058:	bne	2720c <__assert_fail@plt+0x15fe0>
   2705c:	sub	r1, r4, #1
   27060:	add	r0, sp, #148	; 0x94
   27064:	ldr	r2, [sp, #236]	; 0xec
   27068:	bl	23204 <__assert_fail@plt+0x11fd8>
   2706c:	ldr	r5, [sp, #248]	; 0xf8
   27070:	mov	r3, r0
   27074:	add	r2, sp, #284	; 0x11c
   27078:	mov	r1, r6
   2707c:	add	r0, sp, #136	; 0x88
   27080:	bl	213e0 <__assert_fail@plt+0x101b4>
   27084:	str	r0, [r5, r4, lsl #2]
   27088:	ldr	r0, [sp, #292]	; 0x124
   2708c:	bl	13254 <__assert_fail@plt+0x2028>
   27090:	ldr	r3, [sp, #248]	; 0xf8
   27094:	ldr	r2, [r3, r4, lsl #2]
   27098:	cmp	r2, #0
   2709c:	beq	27168 <__assert_fail@plt+0x15f3c>
   270a0:	ldr	fp, [sl, #8]
   270a4:	ldr	r4, [sp, #188]	; 0xbc
   270a8:	add	r7, r7, #1
   270ac:	cmp	r7, fp
   270b0:	bge	2727c <__assert_fail@plt+0x16050>
   270b4:	ldr	r2, [sl, #12]
   270b8:	ldr	r8, [r6]
   270bc:	ldr	r9, [r2, r7, lsl #2]
   270c0:	add	r2, r8, r9, lsl #3
   270c4:	ldrb	r1, [r2, #6]
   270c8:	tst	r1, #16
   270cc:	beq	270a8 <__assert_fail@plt+0x15e7c>
   270d0:	ldr	r5, [r2, #4]
   270d4:	ldr	r3, [sp, #52]	; 0x34
   270d8:	tst	r3, r5
   270dc:	beq	26fc8 <__assert_fail@plt+0x15d9c>
   270e0:	ubfx	r5, r5, #8, #10
   270e4:	mov	r1, r4
   270e8:	add	r0, sp, #148	; 0x94
   270ec:	ldr	r2, [sp, #236]	; 0xec
   270f0:	bl	23204 <__assert_fail@plt+0x11fd8>
   270f4:	tst	r5, #4
   270f8:	bne	26f98 <__assert_fail@plt+0x15d6c>
   270fc:	tst	r5, #8
   27100:	beq	26fa8 <__assert_fail@plt+0x15d7c>
   27104:	tst	r0, #1
   27108:	beq	26fa8 <__assert_fail@plt+0x15d7c>
   2710c:	b	270a8 <__assert_fail@plt+0x15e7c>
   27110:	add	r2, r2, r3
   27114:	sub	r1, r4, #1
   27118:	ldrd	r2, [r2]
   2711c:	add	r0, sp, #148	; 0x94
   27120:	mov	r8, r2
   27124:	mov	r9, r3
   27128:	ldr	r2, [sp, #236]	; 0xec
   2712c:	add	r3, sp, #284	; 0x11c
   27130:	strd	r8, [r3]
   27134:	ldr	r3, [ip, #8]
   27138:	str	r3, [sp, #292]	; 0x124
   2713c:	bl	23204 <__assert_fail@plt+0x11fd8>
   27140:	mov	r3, r0
   27144:	add	r2, sp, #284	; 0x11c
   27148:	mov	r1, r6
   2714c:	add	r0, sp, #136	; 0x88
   27150:	bl	213e0 <__assert_fail@plt+0x101b4>
   27154:	ldr	r3, [sp, #248]	; 0xf8
   27158:	str	r0, [r5, r4, lsl #2]
   2715c:	ldr	r2, [r3, r4, lsl #2]
   27160:	cmp	r2, #0
   27164:	bne	270a0 <__assert_fail@plt+0x15e74>
   27168:	ldr	r0, [sp, #136]	; 0x88
   2716c:	cmp	r0, #0
   27170:	beq	270a0 <__assert_fail@plt+0x15e74>
   27174:	ldr	r8, [sp, #84]	; 0x54
   27178:	b	27214 <__assert_fail@plt+0x15fe8>
   2717c:	ldr	r5, [sl, #48]	; 0x30
   27180:	cmp	r5, #0
   27184:	beq	272b4 <__assert_fail@plt+0x16088>
   27188:	ldr	r1, [sp, #188]	; 0xbc
   2718c:	add	r0, sp, #148	; 0x94
   27190:	ldr	r2, [sp, #236]	; 0xec
   27194:	sub	r1, r1, #1
   27198:	bl	23204 <__assert_fail@plt+0x11fd8>
   2719c:	tst	r0, #1
   271a0:	addne	r4, r4, #256	; 0x100
   271a4:	ldr	r5, [r5, r4, lsl #2]
   271a8:	b	26b20 <__assert_fail@plt+0x158f4>
   271ac:	ldr	r2, [sp, #196]	; 0xc4
   271b0:	cmp	r3, r2
   271b4:	bge	26af4 <__assert_fail@plt+0x158c8>
   271b8:	b	26f4c <__assert_fail@plt+0x15d20>
   271bc:	mov	r0, sl
   271c0:	bl	13254 <__assert_fail@plt+0x2028>
   271c4:	mov	r0, r4
   271c8:	bl	13254 <__assert_fail@plt+0x2028>
   271cc:	add	r0, sp, #148	; 0x94
   271d0:	bl	1fd48 <__assert_fail@plt+0xeb1c>
   271d4:	ldr	r5, [sp, #116]	; 0x74
   271d8:	ldr	r2, [sp, #76]	; 0x4c
   271dc:	ldr	r3, [sp, #96]	; 0x60
   271e0:	add	r5, r5, r3
   271e4:	ldr	r3, [sp, #64]	; 0x40
   271e8:	str	r5, [sp, #116]	; 0x74
   271ec:	cmp	r5, r3
   271f0:	movle	r3, #0
   271f4:	movgt	r3, #1
   271f8:	cmp	r5, r2
   271fc:	orrlt	r3, r3, #1
   27200:	cmp	r3, #0
   27204:	beq	26918 <__assert_fail@plt+0x156ec>
   27208:	b	26df8 <__assert_fail@plt+0x15bcc>
   2720c:	ldr	r8, [sp, #84]	; 0x54
   27210:	ldr	r3, [sp, #248]	; 0xf8
   27214:	cmp	r3, #0
   27218:	str	r0, [sp, #124]	; 0x7c
   2721c:	beq	272dc <__assert_fail@plt+0x160b0>
   27220:	mov	r5, #0
   27224:	b	26b2c <__assert_fail@plt+0x15900>
   27228:	mov	r3, #1
   2722c:	str	r3, [sp, #36]	; 0x24
   27230:	ldr	r0, [sp, #36]	; 0x24
   27234:	add	sp, sp, #428	; 0x1ac
   27238:	ldrd	r4, [sp]
   2723c:	ldrd	r6, [sp, #8]
   27240:	ldrd	r8, [sp, #16]
   27244:	ldrd	sl, [sp, #24]
   27248:	add	sp, sp, #32
   2724c:	pop	{pc}		; (ldr pc, [sp], #4)
   27250:	ldr	r9, [sp, #68]	; 0x44
   27254:	mov	r3, #12
   27258:	str	r3, [sp, #36]	; 0x24
   2725c:	mov	r0, r4
   27260:	bl	13254 <__assert_fail@plt+0x2028>
   27264:	ldr	r3, [r9, #76]	; 0x4c
   27268:	cmp	r3, #0
   2726c:	bne	27524 <__assert_fail@plt+0x162f8>
   27270:	add	r0, sp, #148	; 0x94
   27274:	bl	1fd00 <__assert_fail@plt+0xead4>
   27278:	b	27230 <__assert_fail@plt+0x16004>
   2727c:	ldr	r8, [sp, #84]	; 0x54
   27280:	mov	r3, #0
   27284:	str	r3, [sp, #124]	; 0x7c
   27288:	b	26b00 <__assert_fail@plt+0x158d4>
   2728c:	ldr	r9, [sp, #68]	; 0x44
   27290:	ldr	r3, [r9, #76]	; 0x4c
   27294:	cmp	r3, #0
   27298:	beq	273a4 <__assert_fail@plt+0x16178>
   2729c:	mov	r2, fp
   272a0:	add	r0, sp, #148	; 0x94
   272a4:	ldr	r1, [r4, fp, lsl #2]
   272a8:	bl	23cc0 <__assert_fail@plt+0x12a94>
   272ac:	str	r0, [sp, #244]	; 0xf4
   272b0:	b	26c38 <__assert_fail@plt+0x15a0c>
   272b4:	mov	r1, sl
   272b8:	ldr	r0, [sp, #232]	; 0xe8
   272bc:	bl	226fc <__assert_fail@plt+0x114d0>
   272c0:	cmp	r0, #0
   272c4:	bne	26b10 <__assert_fail@plt+0x158e4>
   272c8:	ldr	r3, [sp, #248]	; 0xf8
   272cc:	mov	r2, #12
   272d0:	str	r2, [sp, #124]	; 0x7c
   272d4:	cmp	r3, #0
   272d8:	bne	27220 <__assert_fail@plt+0x15ff4>
   272dc:	mov	r4, #0
   272e0:	ldr	r9, [sp, #68]	; 0x44
   272e4:	b	27254 <__assert_fail@plt+0x16028>
   272e8:	ldr	r3, [sp, #104]	; 0x68
   272ec:	str	r3, [sp, #16]
   272f0:	ldrb	r3, [sl, #52]	; 0x34
   272f4:	b	26a44 <__assert_fail@plt+0x15818>
   272f8:	ldr	r2, [sp, #68]	; 0x44
   272fc:	ldr	r2, [r2, #76]	; 0x4c
   27300:	cmp	r2, #0
   27304:	bne	2729c <__assert_fail@plt+0x16070>
   27308:	ldr	r9, [sp, #68]	; 0x44
   2730c:	ldr	r2, [sp, #472]	; 0x1d8
   27310:	cmp	r2, #0
   27314:	bne	273e8 <__assert_fail@plt+0x161bc>
   27318:	str	r2, [sp, #36]	; 0x24
   2731c:	b	2725c <__assert_fail@plt+0x16030>
   27320:	ldr	r2, [sp, #72]	; 0x48
   27324:	b	2675c <__assert_fail@plt+0x15530>
   27328:	add	r1, sp, #284	; 0x11c
   2732c:	add	r0, sp, #148	; 0x94
   27330:	str	sl, [sp, #284]	; 0x11c
   27334:	str	r6, [sp, #288]	; 0x120
   27338:	str	r9, [sp, #292]	; 0x124
   2733c:	str	fp, [sp, #296]	; 0x128
   27340:	str	r6, [sp, #300]	; 0x12c
   27344:	str	r6, [sp, #304]	; 0x130
   27348:	str	r6, [sp, #308]	; 0x134
   2734c:	bl	26260 <__assert_fail@plt+0x15034>
   27350:	mov	r7, r0
   27354:	ldr	r0, [sp, #308]	; 0x134
   27358:	bl	13254 <__assert_fail@plt+0x2028>
   2735c:	cmp	r7, #0
   27360:	bne	27724 <__assert_fail@plt+0x164f8>
   27364:	ldr	r4, [sl]
   27368:	cmp	r4, #0
   2736c:	beq	271bc <__assert_fail@plt+0x15f90>
   27370:	mov	r8, fp
   27374:	mov	fp, r9
   27378:	ldr	r9, [sp, #68]	; 0x44
   2737c:	ldr	r0, [sp, #248]	; 0xf8
   27380:	bl	13254 <__assert_fail@plt+0x2028>
   27384:	mov	r0, #0
   27388:	str	r8, [sp, #240]	; 0xf0
   2738c:	str	fp, [sp, #244]	; 0xf4
   27390:	str	sl, [sp, #248]	; 0xf8
   27394:	bl	13254 <__assert_fail@plt+0x2028>
   27398:	mov	r0, #0
   2739c:	bl	13254 <__assert_fail@plt+0x2028>
   273a0:	ldr	r4, [sp, #248]	; 0xf8
   273a4:	ldr	r3, [sp, #472]	; 0x1d8
   273a8:	cmp	r3, #0
   273ac:	beq	2725c <__assert_fail@plt+0x16030>
   273b0:	ldr	r3, [sp, #472]	; 0x1d8
   273b4:	cmp	r3, #1
   273b8:	bls	273e0 <__assert_fail@plt+0x161b4>
   273bc:	ldr	r2, [sp, #472]	; 0x1d8
   273c0:	ldr	r3, [sp, #476]	; 0x1dc
   273c4:	sub	r1, r3, #8
   273c8:	add	r1, r1, r2, lsl #3
   273cc:	mvn	r2, #0
   273d0:	str	r2, [r3, #12]
   273d4:	str	r2, [r3, #8]!
   273d8:	cmp	r1, r3
   273dc:	bne	273d0 <__assert_fail@plt+0x161a4>
   273e0:	ldr	r3, [sp, #32]
   273e4:	ldrb	r3, [r3, #28]
   273e8:	eor	r3, r3, #16
   273ec:	mov	r5, #0
   273f0:	ldr	r1, [sp, #240]	; 0xf0
   273f4:	ldr	r2, [sp, #472]	; 0x1d8
   273f8:	subs	r2, r2, #1
   273fc:	movne	r2, #1
   27400:	ands	r3, r2, r3, lsr #4
   27404:	ldr	r2, [sp, #476]	; 0x1dc
   27408:	str	r5, [r2]
   2740c:	str	r1, [r2, #4]
   27410:	bne	277a8 <__assert_fail@plt+0x1657c>
   27414:	ldrb	lr, [sp, #224]	; 0xe0
   27418:	mov	r1, #0
   2741c:	ldr	ip, [sp, #116]	; 0x74
   27420:	ldr	r7, [sp, #160]	; 0xa0
   27424:	ldr	r5, [sp, #176]	; 0xb0
   27428:	ldr	r6, [sp, #180]	; 0xb4
   2742c:	ldr	r8, [sp, #472]	; 0x1d8
   27430:	ldr	r2, [sp, #476]	; 0x1dc
   27434:	b	2743c <__assert_fail@plt+0x16210>
   27438:	ldr	r3, [r2, #8]!
   2743c:	cmn	r3, #1
   27440:	beq	27460 <__assert_fail@plt+0x16234>
   27444:	cmp	lr, #0
   27448:	ldr	r0, [r2, #4]
   2744c:	bne	27788 <__assert_fail@plt+0x1655c>
   27450:	add	r3, ip, r3
   27454:	add	r0, ip, r0
   27458:	str	r3, [r2]
   2745c:	str	r0, [r2, #4]
   27460:	add	r1, r1, #1
   27464:	cmp	r1, r8
   27468:	bne	27438 <__assert_fail@plt+0x1620c>
   2746c:	ldr	r3, [sp, #108]	; 0x6c
   27470:	cmp	r3, #0
   27474:	ble	274ac <__assert_fail@plt+0x16280>
   27478:	ldr	r3, [sp, #108]	; 0x6c
   2747c:	ldr	r2, [sp, #472]	; 0x1d8
   27480:	ldr	r0, [sp, #476]	; 0x1dc
   27484:	add	r1, r3, r2
   27488:	ldr	r3, [sp, #476]	; 0x1dc
   2748c:	add	r1, r0, r1, lsl #3
   27490:	add	r3, r3, r2, lsl #3
   27494:	mvn	r2, #0
   27498:	add	r3, r3, #8
   2749c:	str	r2, [r3, #-8]
   274a0:	str	r2, [r3, #-4]
   274a4:	cmp	r1, r3
   274a8:	bne	27498 <__assert_fail@plt+0x1626c>
   274ac:	ldr	r1, [r9, #132]	; 0x84
   274b0:	cmp	r1, #0
   274b4:	beq	2725c <__assert_fail@plt+0x16030>
   274b8:	ldr	r3, [sp, #472]	; 0x1d8
   274bc:	ldr	r2, [sp, #476]	; 0x1dc
   274c0:	sub	ip, r3, #1
   274c4:	mov	r3, #0
   274c8:	add	r5, r2, #8
   274cc:	add	lr, r2, #12
   274d0:	b	27508 <__assert_fail@plt+0x162dc>
   274d4:	ldr	r2, [r1, r3, lsl #2]
   274d8:	cmp	r2, r3
   274dc:	add	r0, r2, #1
   274e0:	beq	27504 <__assert_fail@plt+0x162d8>
   274e4:	ldr	r2, [sp, #476]	; 0x1dc
   274e8:	ldr	r2, [r2, r0, lsl #3]
   274ec:	ldr	r0, [sp, #476]	; 0x1dc
   274f0:	str	r2, [r5, r3, lsl #3]
   274f4:	ldr	r2, [r1, r3, lsl #2]
   274f8:	add	r2, r0, r2, lsl #3
   274fc:	ldr	r2, [r2, #12]
   27500:	str	r2, [lr, r3, lsl #3]
   27504:	add	r3, r3, #1
   27508:	cmp	r3, ip
   2750c:	bne	274d4 <__assert_fail@plt+0x162a8>
   27510:	b	2725c <__assert_fail@plt+0x16030>
   27514:	ldrb	r3, [r9, #88]	; 0x58
   27518:	tst	r3, #2
   2751c:	bne	267f8 <__assert_fail@plt+0x155cc>
   27520:	b	26820 <__assert_fail@plt+0x155f4>
   27524:	add	r0, sp, #148	; 0x94
   27528:	bl	1fd48 <__assert_fail@plt+0xeb1c>
   2752c:	ldr	r0, [sp, #280]	; 0x118
   27530:	bl	13254 <__assert_fail@plt+0x2028>
   27534:	ldr	r0, [sp, #264]	; 0x108
   27538:	bl	13254 <__assert_fail@plt+0x2028>
   2753c:	b	27270 <__assert_fail@plt+0x16044>
   27540:	ldr	sl, [r4, #40]	; 0x28
   27544:	cmp	sl, #0
   27548:	bne	26a18 <__assert_fail@plt+0x157ec>
   2754c:	mov	r3, #12
   27550:	ldr	r9, [sp, #68]	; 0x44
   27554:	str	r3, [sp, #36]	; 0x24
   27558:	ldr	r4, [sp, #248]	; 0xf8
   2755c:	b	2725c <__assert_fail@plt+0x16030>
   27560:	mov	r0, sl
   27564:	bl	13254 <__assert_fail@plt+0x2028>
   27568:	mov	r0, r6
   2756c:	bl	13254 <__assert_fail@plt+0x2028>
   27570:	add	r0, sp, #148	; 0x94
   27574:	bl	1fd48 <__assert_fail@plt+0xeb1c>
   27578:	ldr	r5, [sp, #116]	; 0x74
   2757c:	b	271d8 <__assert_fail@plt+0x15fac>
   27580:	mov	r3, #12
   27584:	ldr	r4, [sp, #248]	; 0xf8
   27588:	str	r3, [sp, #36]	; 0x24
   2758c:	b	2725c <__assert_fail@plt+0x16030>
   27590:	mov	r3, #8
   27594:	b	268bc <__assert_fail@plt+0x15690>
   27598:	str	r1, [sp, #36]	; 0x24
   2759c:	str	r3, [sp, #116]	; 0x74
   275a0:	ldr	r9, [sp, #68]	; 0x44
   275a4:	ldr	r4, [sp, #248]	; 0xf8
   275a8:	b	2725c <__assert_fail@plt+0x16030>
   275ac:	ldr	r4, [sp, #48]	; 0x30
   275b0:	ldr	r1, [sp, #172]	; 0xac
   275b4:	sub	r2, r5, r1
   275b8:	ldr	r3, [sp, #180]	; 0xb4
   275bc:	cmp	r3, r2
   275c0:	bhi	28010 <__assert_fail@plt+0x16de4>
   275c4:	mov	r1, r5
   275c8:	add	r0, sp, #148	; 0x94
   275cc:	ldr	r2, [sp, #480]	; 0x1e0
   275d0:	bl	23454 <__assert_fail@plt+0x12228>
   275d4:	subs	r3, r0, #0
   275d8:	str	r3, [sp, #36]	; 0x24
   275dc:	beq	28008 <__assert_fail@plt+0x16ddc>
   275e0:	ldr	r9, [sp, #68]	; 0x44
   275e4:	ldr	r4, [sp, #248]	; 0xf8
   275e8:	b	2725c <__assert_fail@plt+0x16030>
   275ec:	ldrsb	r3, [sl, #52]	; 0x34
   275f0:	cmp	r3, #0
   275f4:	blt	27668 <__assert_fail@plt+0x1643c>
   275f8:	ldr	fp, [sp, #12]
   275fc:	ldr	r3, [sp, #20]
   27600:	cmp	r3, #0
   27604:	beq	26bd0 <__assert_fail@plt+0x159a4>
   27608:	ldr	r3, [sp, #20]
   2760c:	str	r3, [sp, #28]
   27610:	b	26a58 <__assert_fail@plt+0x1582c>
   27614:	mov	r5, r0
   27618:	b	26a6c <__assert_fail@plt+0x15840>
   2761c:	mov	fp, r4
   27620:	b	26bd0 <__assert_fail@plt+0x159a4>
   27624:	ldr	sl, [r4, #44]	; 0x2c
   27628:	b	27544 <__assert_fail@plt+0x16318>
   2762c:	ldr	r9, [sp, #68]	; 0x44
   27630:	bl	13254 <__assert_fail@plt+0x2028>
   27634:	mov	r3, #12
   27638:	mov	r0, sl
   2763c:	str	r3, [sp, #36]	; 0x24
   27640:	bl	13254 <__assert_fail@plt+0x2028>
   27644:	ldr	r4, [sp, #248]	; 0xf8
   27648:	b	2725c <__assert_fail@plt+0x16030>
   2764c:	mov	r3, r0
   27650:	mov	r1, r4
   27654:	ldr	r2, [sl, #40]	; 0x28
   27658:	add	r0, sp, #124	; 0x7c
   2765c:	bl	213e0 <__assert_fail@plt+0x101b4>
   27660:	mov	sl, r0
   27664:	b	27544 <__assert_fail@plt+0x16318>
   27668:	mov	r1, sl
   2766c:	add	r0, sp, #148	; 0x94
   27670:	ldr	r2, [sp, #12]
   27674:	bl	23cc0 <__assert_fail@plt+0x12a94>
   27678:	subs	r3, r0, #0
   2767c:	str	r3, [sp, #28]
   27680:	bne	275f8 <__assert_fail@plt+0x163cc>
   27684:	mvn	fp, #0
   27688:	b	26a58 <__assert_fail@plt+0x1582c>
   2768c:	add	r4, sl, #8
   27690:	add	r5, sl, #12
   27694:	mov	r1, r4
   27698:	mov	r2, r5
   2769c:	mov	r3, #0
   276a0:	add	r0, sp, #148	; 0x94
   276a4:	bl	23da4 <__assert_fail@plt+0x12b78>
   276a8:	cmp	r0, #0
   276ac:	mov	fp, r0
   276b0:	str	r0, [sp, #124]	; 0x7c
   276b4:	bne	26bd0 <__assert_fail@plt+0x159a4>
   276b8:	ldrb	r3, [sl, #52]	; 0x34
   276bc:	tst	r3, #64	; 0x40
   276c0:	bne	27760 <__assert_fail@plt+0x16534>
   276c4:	mov	r2, #0
   276c8:	str	r2, [sp, #16]
   276cc:	b	26a44 <__assert_fail@plt+0x15818>
   276d0:	ldr	sl, [r4, #48]	; 0x30
   276d4:	b	27544 <__assert_fail@plt+0x16318>
   276d8:	mov	r7, r3
   276dc:	mov	r0, sl
   276e0:	bl	13254 <__assert_fail@plt+0x2028>
   276e4:	ldr	r0, [sp, #24]
   276e8:	bl	13254 <__assert_fail@plt+0x2028>
   276ec:	cmp	r7, #1
   276f0:	beq	271cc <__assert_fail@plt+0x15fa0>
   276f4:	str	r7, [sp, #36]	; 0x24
   276f8:	ldr	r9, [sp, #68]	; 0x44
   276fc:	ldr	r4, [sp, #248]	; 0xf8
   27700:	b	2725c <__assert_fail@plt+0x16030>
   27704:	mov	r3, #12
   27708:	mov	r0, sl
   2770c:	ldr	r9, [sp, #68]	; 0x44
   27710:	str	r3, [sp, #36]	; 0x24
   27714:	bl	13254 <__assert_fail@plt+0x2028>
   27718:	mov	r0, r6
   2771c:	bl	13254 <__assert_fail@plt+0x2028>
   27720:	b	26e04 <__assert_fail@plt+0x15bd8>
   27724:	str	r6, [sp, #24]
   27728:	b	276dc <__assert_fail@plt+0x164b0>
   2772c:	mov	r3, r5
   27730:	mov	r2, r6
   27734:	ldr	r0, [sp, #12]
   27738:	mov	r1, sl
   2773c:	bl	218ec <__assert_fail@plt+0x106c0>
   27740:	mov	r7, r0
   27744:	mov	r0, r6
   27748:	bl	13254 <__assert_fail@plt+0x2028>
   2774c:	cmp	r7, #0
   27750:	beq	27370 <__assert_fail@plt+0x16144>
   27754:	mov	r3, #0
   27758:	str	r3, [sp, #24]
   2775c:	b	276dc <__assert_fail@plt+0x164b0>
   27760:	mov	r2, r5
   27764:	mov	r1, r4
   27768:	add	r0, sp, #148	; 0x94
   2776c:	bl	2591c <__assert_fail@plt+0x146f0>
   27770:	cmp	r0, #0
   27774:	mov	fp, r0
   27778:	str	r0, [sp, #124]	; 0x7c
   2777c:	bne	26bd0 <__assert_fail@plt+0x159a4>
   27780:	ldrb	r3, [sl, #52]	; 0x34
   27784:	b	276c4 <__assert_fail@plt+0x16498>
   27788:	cmp	r5, r3
   2778c:	ldrne	r3, [r7, r3, lsl #2]
   27790:	moveq	r3, r6
   27794:	cmp	r5, r0
   27798:	moveq	r0, r6
   2779c:	str	r3, [r2]
   277a0:	ldrne	r0, [r7, r0, lsl #2]
   277a4:	b	27450 <__assert_fail@plt+0x16224>
   277a8:	ldr	r2, [sp, #32]
   277ac:	ldrb	r3, [r9, #88]	; 0x58
   277b0:	ldr	r2, [r2]
   277b4:	tst	r3, #1
   277b8:	str	r2, [sp, #16]
   277bc:	beq	27e1c <__assert_fail@plt+0x16bf0>
   277c0:	ldr	r3, [r9, #76]	; 0x4c
   277c4:	cmp	r3, r5
   277c8:	ble	27e1c <__assert_fail@plt+0x16bf0>
   277cc:	add	r1, sp, #296	; 0x128
   277d0:	mov	r2, #2
   277d4:	mov	r3, #16
   277d8:	mov	r0, #48	; 0x30
   277dc:	str	r1, [sp, #20]
   277e0:	str	r5, [sp, #136]	; 0x88
   277e4:	str	r2, [sp, #140]	; 0x8c
   277e8:	str	r5, [sp, #144]	; 0x90
   277ec:	str	r5, [sp, #284]	; 0x11c
   277f0:	str	r3, [sp, #288]	; 0x120
   277f4:	str	r1, [sp, #292]	; 0x124
   277f8:	bl	2d378 <__assert_fail@plt+0x1c14c>
   277fc:	cmp	r0, #0
   27800:	str	r0, [sp, #144]	; 0x90
   27804:	beq	27580 <__assert_fail@plt+0x16354>
   27808:	ldr	r1, [sp, #16]
   2780c:	add	r2, sp, #124	; 0x7c
   27810:	ldr	r3, [sp, #284]	; 0x11c
   27814:	str	r2, [sp, #28]
   27818:	ldr	sl, [r1, #72]	; 0x48
   2781c:	str	r5, [sp, #124]	; 0x7c
   27820:	ldr	r1, [sp, #472]	; 0x1d8
   27824:	str	r5, [sp, #128]	; 0x80
   27828:	str	r5, [sp, #132]	; 0x84
   2782c:	cmp	r3, r1
   27830:	add	r3, sp, #136	; 0x88
   27834:	str	r3, [sp, #12]
   27838:	bcc	27e68 <__assert_fail@plt+0x16c3c>
   2783c:	ldr	r3, [sp, #472]	; 0x1d8
   27840:	str	r3, [sp, #284]	; 0x11c
   27844:	ldr	r0, [sp, #292]	; 0x124
   27848:	ldr	r3, [sp, #472]	; 0x1d8
   2784c:	ldr	r1, [sp, #476]	; 0x1dc
   27850:	str	r0, [sp, #32]
   27854:	lsl	r2, r3, #3
   27858:	lsl	r3, r3, #4
   2785c:	mov	r4, r1
   27860:	str	r2, [sp, #40]	; 0x28
   27864:	str	r3, [sp, #48]	; 0x30
   27868:	bl	10fd4 <memcpy@plt>
   2786c:	ldr	r5, [r4], #4
   27870:	str	r9, [sp, #24]
   27874:	ldr	fp, [sp, #472]	; 0x1d8
   27878:	str	r4, [sp, #44]	; 0x2c
   2787c:	str	r5, [sp, #120]	; 0x78
   27880:	ldr	r3, [sp, #476]	; 0x1dc
   27884:	ldr	r3, [r3, #4]
   27888:	cmp	r5, r3
   2788c:	bgt	27f5c <__assert_fail@plt+0x16d30>
   27890:	ldr	r2, [sp, #16]
   27894:	lsl	r4, sl, #3
   27898:	mov	r6, sl
   2789c:	ldr	r1, [r2]
   278a0:	add	r0, r1, r4
   278a4:	ldrb	r2, [r0, #4]
   278a8:	cmp	r2, #8
   278ac:	beq	27ac0 <__assert_fail@plt+0x16894>
   278b0:	cmp	r2, #9
   278b4:	beq	27b24 <__assert_fail@plt+0x168f8>
   278b8:	cmp	r5, r3
   278bc:	beq	27a1c <__assert_fail@plt+0x167f0>
   278c0:	ldr	r3, [sp, #12]
   278c4:	cmp	r3, #0
   278c8:	beq	278e4 <__assert_fail@plt+0x166b8>
   278cc:	mov	r2, sl
   278d0:	add	r1, sp, #132	; 0x84
   278d4:	ldr	r0, [sp, #128]	; 0x80
   278d8:	bl	205c4 <__assert_fail@plt+0xf398>
   278dc:	cmp	r0, #0
   278e0:	bne	27a34 <__assert_fail@plt+0x16808>
   278e4:	ldr	r5, [sp, #232]	; 0xe8
   278e8:	ldr	r0, [r5]
   278ec:	add	r1, r0, r4
   278f0:	ldrb	r3, [r1, #4]
   278f4:	tst	r3, #8
   278f8:	beq	27994 <__assert_fail@plt+0x16768>
   278fc:	ldr	r5, [r5, #20]
   27900:	add	r4, sl, sl, lsl #1
   27904:	add	r1, sp, #132	; 0x84
   27908:	mov	r2, sl
   2790c:	ldr	lr, [sp, #120]	; 0x78
   27910:	ldr	r0, [sp, #128]	; 0x80
   27914:	add	r4, r5, r4, lsl #2
   27918:	ldr	ip, [sp, #248]	; 0xf8
   2791c:	ldr	r5, [ip, lr, lsl #2]
   27920:	bl	205c4 <__assert_fail@plt+0xf398>
   27924:	cmp	r0, #0
   27928:	beq	27cc8 <__assert_fail@plt+0x16a9c>
   2792c:	ldr	r6, [r4, #4]
   27930:	cmp	r6, #0
   27934:	ble	27d90 <__assert_fail@plt+0x16b64>
   27938:	ldr	r3, [r4, #8]
   2793c:	add	r8, r5, #12
   27940:	mvn	sl, #0
   27944:	mov	r4, #0
   27948:	ldr	r7, [r5, #8]
   2794c:	sub	r9, r3, #4
   27950:	ldr	r5, [r9, #4]!
   27954:	mov	r1, r8
   27958:	mov	r0, r7
   2795c:	add	r4, r4, #1
   27960:	mov	r2, r5
   27964:	bl	205c4 <__assert_fail@plt+0xf398>
   27968:	cmp	r0, #0
   2796c:	beq	2797c <__assert_fail@plt+0x16750>
   27970:	cmn	sl, #1
   27974:	bne	27b7c <__assert_fail@plt+0x16950>
   27978:	mov	sl, r5
   2797c:	cmp	r4, r6
   27980:	bne	27950 <__assert_fail@plt+0x16724>
   27984:	cmp	sl, #0
   27988:	blt	27d88 <__assert_fail@plt+0x16b5c>
   2798c:	ldr	r5, [sp, #120]	; 0x78
   27990:	b	27880 <__assert_fail@plt+0x16654>
   27994:	ldrb	r2, [r1, #6]
   27998:	tst	r2, #16
   2799c:	bne	27c98 <__assert_fail@plt+0x16a6c>
   279a0:	cmp	r3, #4
   279a4:	beq	27cfc <__assert_fail@plt+0x16ad0>
   279a8:	ldr	r7, [sp, #120]	; 0x78
   279ac:	mov	r2, r7
   279b0:	add	r0, sp, #148	; 0x94
   279b4:	bl	2331c <__assert_fail@plt+0x120f0>
   279b8:	cmp	r0, #0
   279bc:	beq	27d90 <__assert_fail@plt+0x16b64>
   279c0:	ldr	r2, [r5, #12]
   279c4:	add	r3, r7, #1
   279c8:	ldr	sl, [r2, r6, lsl #2]
   279cc:	str	r3, [sp, #120]	; 0x78
   279d0:	ldr	r2, [sp, #12]
   279d4:	cmp	r2, #0
   279d8:	beq	27a10 <__assert_fail@plt+0x167e4>
   279dc:	ldr	r2, [sp, #240]	; 0xf0
   279e0:	cmp	r3, r2
   279e4:	bgt	27d90 <__assert_fail@plt+0x16b64>
   279e8:	ldr	r2, [sp, #248]	; 0xf8
   279ec:	ldr	r3, [r2, r3, lsl #2]
   279f0:	cmp	r3, #0
   279f4:	beq	27d90 <__assert_fail@plt+0x16b64>
   279f8:	mov	r2, sl
   279fc:	add	r1, r3, #12
   27a00:	ldr	r0, [r3, #8]
   27a04:	bl	205c4 <__assert_fail@plt+0xf398>
   27a08:	cmp	r0, #0
   27a0c:	beq	27d90 <__assert_fail@plt+0x16b64>
   27a10:	mov	r3, #0
   27a14:	str	r3, [sp, #128]	; 0x80
   27a18:	b	27984 <__assert_fail@plt+0x16758>
   27a1c:	ldr	r3, [sp, #244]	; 0xf4
   27a20:	cmp	sl, r3
   27a24:	bne	278c0 <__assert_fail@plt+0x16694>
   27a28:	ldr	r3, [sp, #12]
   27a2c:	cmp	r3, #0
   27a30:	beq	27fc8 <__assert_fail@plt+0x16d9c>
   27a34:	ldr	r1, [sp, #44]	; 0x2c
   27a38:	mov	r3, #0
   27a3c:	ldr	r2, [sp, #476]	; 0x1dc
   27a40:	ldr	r2, [r2, r3, lsl #3]
   27a44:	cmp	r2, #0
   27a48:	blt	27a58 <__assert_fail@plt+0x1682c>
   27a4c:	ldr	r2, [r1, r3, lsl #3]
   27a50:	cmn	r2, #1
   27a54:	beq	27af0 <__assert_fail@plt+0x168c4>
   27a58:	add	r3, r3, #1
   27a5c:	cmp	fp, r3
   27a60:	bne	27a3c <__assert_fail@plt+0x16810>
   27a64:	ldr	r9, [sp, #24]
   27a68:	ldr	r0, [sp, #132]	; 0x84
   27a6c:	bl	13254 <__assert_fail@plt+0x2028>
   27a70:	ldr	r3, [sp, #20]
   27a74:	ldr	r0, [sp, #292]	; 0x124
   27a78:	cmp	r0, r3
   27a7c:	beq	27fec <__assert_fail@plt+0x16dc0>
   27a80:	bl	13254 <__assert_fail@plt+0x2028>
   27a84:	ldr	r1, [sp, #20]
   27a88:	mov	r2, #0
   27a8c:	mov	r3, #16
   27a90:	str	r2, [sp, #284]	; 0x11c
   27a94:	str	r3, [sp, #288]	; 0x120
   27a98:	str	r1, [sp, #292]	; 0x124
   27a9c:	ldr	r1, [sp, #12]
   27aa0:	cmp	r1, r2
   27aa4:	beq	27fa4 <__assert_fail@plt+0x16d78>
   27aa8:	ldr	r0, [sp, #12]
   27aac:	bl	21e18 <__assert_fail@plt+0x10bec>
   27ab0:	ldr	r4, [sp, #248]	; 0xf8
   27ab4:	ldr	r3, [sp, #476]	; 0x1dc
   27ab8:	ldr	r3, [r3]
   27abc:	b	27414 <__assert_fail@plt+0x161e8>
   27ac0:	ldr	r2, [r1, sl, lsl #3]
   27ac4:	add	r2, r2, #1
   27ac8:	cmp	fp, r2
   27acc:	ble	278b8 <__assert_fail@plt+0x1668c>
   27ad0:	ldr	r3, [sp, #476]	; 0x1dc
   27ad4:	ldr	r1, [sp, #476]	; 0x1dc
   27ad8:	add	r3, r3, r2, lsl #3
   27adc:	str	r5, [r1, r2, lsl #3]
   27ae0:	mvn	r2, #0
   27ae4:	str	r2, [r3, #4]
   27ae8:	ldr	r3, [r1, #4]
   27aec:	b	278b8 <__assert_fail@plt+0x1668c>
   27af0:	mov	r2, fp
   27af4:	ldr	r0, [sp, #12]
   27af8:	ldr	ip, [sp, #28]
   27afc:	ldr	r1, [sp, #32]
   27b00:	ldr	r3, [sp, #476]	; 0x1dc
   27b04:	stm	sp, {r1, ip}
   27b08:	add	r1, sp, #120	; 0x78
   27b0c:	bl	2049c <__assert_fail@plt+0xf270>
   27b10:	subs	sl, r0, #0
   27b14:	blt	27a64 <__assert_fail@plt+0x16838>
   27b18:	mov	r6, sl
   27b1c:	lsl	r4, sl, #3
   27b20:	b	278e4 <__assert_fail@plt+0x166b8>
   27b24:	ldr	r2, [r0]
   27b28:	add	r2, r2, #1
   27b2c:	cmp	fp, r2
   27b30:	ble	278b8 <__assert_fail@plt+0x1668c>
   27b34:	ldr	r3, [sp, #476]	; 0x1dc
   27b38:	ldr	r1, [r3, r2, lsl #3]
   27b3c:	add	r3, r3, r2, lsl #3
   27b40:	cmp	r5, r1
   27b44:	bgt	27f0c <__assert_fail@plt+0x16ce0>
   27b48:	ldrb	r1, [r0, #6]
   27b4c:	tst	r1, #8
   27b50:	beq	27e88 <__assert_fail@plt+0x16c5c>
   27b54:	ldr	r1, [sp, #32]
   27b58:	ldr	r2, [r1, r2, lsl #3]
   27b5c:	cmn	r2, #1
   27b60:	beq	27e88 <__assert_fail@plt+0x16c5c>
   27b64:	ldr	r2, [sp, #40]	; 0x28
   27b68:	ldr	r0, [sp, #476]	; 0x1dc
   27b6c:	bl	10fd4 <memcpy@plt>
   27b70:	ldr	r3, [sp, #476]	; 0x1dc
   27b74:	ldr	r3, [r3, #4]
   27b78:	b	278b8 <__assert_fail@plt+0x1668c>
   27b7c:	add	r1, sp, #132	; 0x84
   27b80:	mov	r2, sl
   27b84:	ldr	r0, [sp, #128]	; 0x80
   27b88:	bl	205c4 <__assert_fail@plt+0xf398>
   27b8c:	cmp	r0, #0
   27b90:	bne	27e14 <__assert_fail@plt+0x16be8>
   27b94:	ldr	r0, [sp, #12]
   27b98:	cmp	r0, #0
   27b9c:	beq	27984 <__assert_fail@plt+0x16758>
   27ba0:	ldr	r4, [r0]
   27ba4:	ldmib	r0, {r1, r3}
   27ba8:	ldr	r6, [sp, #120]	; 0x78
   27bac:	add	r2, r4, #1
   27bb0:	cmp	r2, r1
   27bb4:	str	r2, [r0]
   27bb8:	beq	27f30 <__assert_fail@plt+0x16d04>
   27bbc:	add	r2, r4, r4, lsl #1
   27bc0:	ldr	r0, [sp, #48]	; 0x30
   27bc4:	lsl	r4, r2, #3
   27bc8:	str	r6, [r3, r2, lsl #3]
   27bcc:	add	r6, r3, r4
   27bd0:	str	r5, [r6, #4]
   27bd4:	bl	2d378 <__assert_fail@plt+0x1c14c>
   27bd8:	ldr	r5, [sp, #12]
   27bdc:	ldr	r3, [r5, #8]
   27be0:	str	r0, [r6, #8]
   27be4:	add	r3, r3, r4
   27be8:	ldr	r0, [r3, #8]
   27bec:	cmp	r0, #0
   27bf0:	beq	27c3c <__assert_fail@plt+0x16a10>
   27bf4:	ldr	r6, [sp, #40]	; 0x28
   27bf8:	ldr	r1, [sp, #476]	; 0x1dc
   27bfc:	mov	r2, r6
   27c00:	bl	10fd4 <memcpy@plt>
   27c04:	ldr	r3, [r5, #8]
   27c08:	mov	r2, r6
   27c0c:	ldr	r1, [sp, #32]
   27c10:	add	r3, r3, r4
   27c14:	ldr	r0, [r3, #8]
   27c18:	add	r0, r0, r6
   27c1c:	bl	10fd4 <memcpy@plt>
   27c20:	ldr	r0, [r5, #8]
   27c24:	ldr	r1, [sp, #28]
   27c28:	add	r0, r0, r4
   27c2c:	add	r0, r0, #12
   27c30:	bl	211ec <__assert_fail@plt+0xffc0>
   27c34:	cmp	r0, #0
   27c38:	beq	27984 <__assert_fail@plt+0x16758>
   27c3c:	ldr	r9, [sp, #24]
   27c40:	ldr	r0, [sp, #132]	; 0x84
   27c44:	bl	13254 <__assert_fail@plt+0x2028>
   27c48:	ldr	r3, [sp, #20]
   27c4c:	ldr	r0, [sp, #292]	; 0x124
   27c50:	cmp	r0, r3
   27c54:	beq	27fb4 <__assert_fail@plt+0x16d88>
   27c58:	bl	13254 <__assert_fail@plt+0x2028>
   27c5c:	ldr	r1, [sp, #20]
   27c60:	mov	r2, #0
   27c64:	mov	r3, #16
   27c68:	str	r2, [sp, #284]	; 0x11c
   27c6c:	str	r3, [sp, #288]	; 0x120
   27c70:	str	r1, [sp, #292]	; 0x124
   27c74:	ldr	r1, [sp, #12]
   27c78:	cmp	r1, r2
   27c7c:	beq	27580 <__assert_fail@plt+0x16354>
   27c80:	mov	r3, #12
   27c84:	ldr	r0, [sp, #12]
   27c88:	str	r3, [sp, #36]	; 0x24
   27c8c:	bl	21e18 <__assert_fail@plt+0x10bec>
   27c90:	ldr	r4, [sp, #248]	; 0xf8
   27c94:	b	2725c <__assert_fail@plt+0x16030>
   27c98:	ldr	ip, [sp, #120]	; 0x78
   27c9c:	add	r3, sp, #148	; 0x94
   27ca0:	mov	r2, sl
   27ca4:	add	r1, r5, #128	; 0x80
   27ca8:	str	ip, [sp]
   27cac:	bl	24ec0 <__assert_fail@plt+0x13c94>
   27cb0:	subs	r7, r0, #0
   27cb4:	bne	27f04 <__assert_fail@plt+0x16cd8>
   27cb8:	ldr	r1, [r5]
   27cbc:	ldr	r7, [sp, #120]	; 0x78
   27cc0:	add	r1, r1, r4
   27cc4:	b	279ac <__assert_fail@plt+0x16780>
   27cc8:	mov	r1, sl
   27ccc:	ldr	r0, [sp, #28]
   27cd0:	bl	1fff0 <__assert_fail@plt+0xedc4>
   27cd4:	cmp	r0, #0
   27cd8:	bne	2792c <__assert_fail@plt+0x16700>
   27cdc:	ldr	r9, [sp, #24]
   27ce0:	ldr	r0, [sp, #132]	; 0x84
   27ce4:	bl	13254 <__assert_fail@plt+0x2028>
   27ce8:	ldr	r3, [sp, #20]
   27cec:	ldr	r0, [sp, #292]	; 0x124
   27cf0:	cmp	r0, r3
   27cf4:	bne	27c58 <__assert_fail@plt+0x16a2c>
   27cf8:	b	27c5c <__assert_fail@plt+0x16a30>
   27cfc:	ldr	r3, [r1]
   27d00:	add	r3, r3, #1
   27d04:	cmp	fp, r3
   27d08:	ble	27e98 <__assert_fail@plt+0x16c6c>
   27d0c:	ldr	r2, [sp, #476]	; 0x1dc
   27d10:	ldr	r1, [sp, #476]	; 0x1dc
   27d14:	add	r2, r2, r3, lsl #3
   27d18:	ldr	r0, [r1, r3, lsl #3]
   27d1c:	ldr	r3, [sp, #12]
   27d20:	cmp	r3, #0
   27d24:	ldr	r3, [r2, #4]
   27d28:	sub	r7, r3, r0
   27d2c:	beq	27efc <__assert_fail@plt+0x16cd0>
   27d30:	cmn	r0, #1
   27d34:	beq	27d90 <__assert_fail@plt+0x16b64>
   27d38:	cmn	r3, #1
   27d3c:	beq	27d90 <__assert_fail@plt+0x16b64>
   27d40:	cmp	r7, #0
   27d44:	beq	27ea4 <__assert_fail@plt+0x16c78>
   27d48:	ldr	r4, [sp, #120]	; 0x78
   27d4c:	ldr	r1, [sp, #152]	; 0x98
   27d50:	ldr	r3, [sp, #176]	; 0xb0
   27d54:	sub	r3, r3, r4
   27d58:	cmp	r7, r3
   27d5c:	bgt	27d90 <__assert_fail@plt+0x16b64>
   27d60:	add	r0, r1, r0
   27d64:	mov	r2, r7
   27d68:	add	r1, r1, r4
   27d6c:	bl	11004 <memcmp@plt>
   27d70:	cmp	r0, #0
   27d74:	bne	27d90 <__assert_fail@plt+0x16b64>
   27d78:	ldr	r2, [r5, #12]
   27d7c:	add	r3, r4, r7
   27d80:	ldr	sl, [r2, sl, lsl #2]
   27d84:	b	279cc <__assert_fail@plt+0x167a0>
   27d88:	cmn	sl, #2
   27d8c:	beq	27cdc <__assert_fail@plt+0x16ab0>
   27d90:	mov	r2, fp
   27d94:	ldr	r0, [sp, #12]
   27d98:	ldr	ip, [sp, #28]
   27d9c:	ldr	r1, [sp, #32]
   27da0:	ldr	r3, [sp, #476]	; 0x1dc
   27da4:	stm	sp, {r1, ip}
   27da8:	add	r1, sp, #120	; 0x78
   27dac:	bl	2049c <__assert_fail@plt+0xf270>
   27db0:	subs	sl, r0, #0
   27db4:	bge	2798c <__assert_fail@plt+0x16760>
   27db8:	ldr	r9, [sp, #24]
   27dbc:	ldr	r0, [sp, #132]	; 0x84
   27dc0:	bl	13254 <__assert_fail@plt+0x2028>
   27dc4:	ldr	r3, [sp, #20]
   27dc8:	ldr	r0, [sp, #292]	; 0x124
   27dcc:	cmp	r0, r3
   27dd0:	beq	27dd8 <__assert_fail@plt+0x16bac>
   27dd4:	bl	13254 <__assert_fail@plt+0x2028>
   27dd8:	ldr	r1, [sp, #20]
   27ddc:	mov	r2, #0
   27de0:	mov	r3, #16
   27de4:	str	r2, [sp, #284]	; 0x11c
   27de8:	str	r3, [sp, #288]	; 0x120
   27dec:	str	r1, [sp, #292]	; 0x124
   27df0:	ldr	r1, [sp, #12]
   27df4:	cmp	r1, r2
   27df8:	beq	26dfc <__assert_fail@plt+0x15bd0>
   27dfc:	mov	r3, #1
   27e00:	ldr	r0, [sp, #12]
   27e04:	str	r3, [sp, #36]	; 0x24
   27e08:	bl	21e18 <__assert_fail@plt+0x10bec>
   27e0c:	ldr	r4, [sp, #248]	; 0xf8
   27e10:	b	2725c <__assert_fail@plt+0x16030>
   27e14:	mov	sl, r5
   27e18:	b	27984 <__assert_fail@plt+0x16758>
   27e1c:	ldr	r2, [sp, #16]
   27e20:	mov	r3, #0
   27e24:	add	ip, sp, #296	; 0x128
   27e28:	add	r0, sp, #124	; 0x7c
   27e2c:	mov	r1, #2
   27e30:	str	r3, [sp, #12]
   27e34:	str	ip, [sp, #20]
   27e38:	str	r0, [sp, #28]
   27e3c:	ldr	sl, [r2, #72]	; 0x48
   27e40:	mov	r2, #16
   27e44:	str	r3, [sp, #124]	; 0x7c
   27e48:	str	r3, [sp, #128]	; 0x80
   27e4c:	str	r3, [sp, #132]	; 0x84
   27e50:	str	r3, [sp, #136]	; 0x88
   27e54:	str	r1, [sp, #140]	; 0x8c
   27e58:	str	r3, [sp, #144]	; 0x90
   27e5c:	str	r3, [sp, #284]	; 0x11c
   27e60:	str	r2, [sp, #288]	; 0x120
   27e64:	str	ip, [sp, #292]	; 0x124
   27e68:	mov	r3, #8
   27e6c:	add	r0, sp, #284	; 0x11c
   27e70:	ldr	r2, [sp, #20]
   27e74:	ldr	r1, [sp, #472]	; 0x1d8
   27e78:	bl	2d494 <__assert_fail@plt+0x1c268>
   27e7c:	cmp	r0, #0
   27e80:	bne	27844 <__assert_fail@plt+0x16618>
   27e84:	b	27ce8 <__assert_fail@plt+0x16abc>
   27e88:	str	r5, [r3, #4]
   27e8c:	ldr	r3, [sp, #476]	; 0x1dc
   27e90:	ldr	r3, [r3, #4]
   27e94:	b	278b8 <__assert_fail@plt+0x1668c>
   27e98:	ldr	r3, [sp, #12]
   27e9c:	cmp	r3, #0
   27ea0:	bne	27d90 <__assert_fail@plt+0x16b64>
   27ea4:	mov	r1, sl
   27ea8:	ldr	r0, [sp, #28]
   27eac:	bl	1fff0 <__assert_fail@plt+0xedc4>
   27eb0:	cmp	r0, #0
   27eb4:	beq	27cdc <__assert_fail@plt+0x16ab0>
   27eb8:	ldr	r3, [r5, #20]
   27ebc:	add	sl, sl, sl, lsl #1
   27ec0:	ldr	r7, [sp, #120]	; 0x78
   27ec4:	ldr	r1, [sp, #248]	; 0xf8
   27ec8:	add	r3, r3, sl, lsl #2
   27ecc:	ldr	r2, [r3, #8]
   27ed0:	ldr	r3, [r1, r7, lsl #2]
   27ed4:	ldr	sl, [r2]
   27ed8:	add	r1, r3, #12
   27edc:	ldr	r0, [r3, #8]
   27ee0:	mov	r2, sl
   27ee4:	bl	205c4 <__assert_fail@plt+0xf398>
   27ee8:	cmp	r0, #0
   27eec:	bne	27984 <__assert_fail@plt+0x16758>
   27ef0:	ldr	r1, [r5]
   27ef4:	add	r1, r1, r4
   27ef8:	b	279ac <__assert_fail@plt+0x16780>
   27efc:	cmp	r7, #0
   27f00:	beq	27ea4 <__assert_fail@plt+0x16c78>
   27f04:	ldr	r4, [sp, #120]	; 0x78
   27f08:	b	27d78 <__assert_fail@plt+0x16b4c>
   27f0c:	str	r5, [r3, #4]
   27f10:	ldr	r0, [sp, #32]
   27f14:	ldr	r2, [sp, #40]	; 0x28
   27f18:	ldr	r1, [sp, #476]	; 0x1dc
   27f1c:	bl	10fd4 <memcpy@plt>
   27f20:	ldr	r5, [sp, #120]	; 0x78
   27f24:	ldr	r3, [sp, #476]	; 0x1dc
   27f28:	ldr	r3, [r3, #4]
   27f2c:	b	278b8 <__assert_fail@plt+0x1668c>
   27f30:	mov	r1, #48	; 0x30
   27f34:	mov	r0, r3
   27f38:	mul	r1, r1, r2
   27f3c:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   27f40:	subs	r3, r0, #0
   27f44:	beq	27c3c <__assert_fail@plt+0x16a10>
   27f48:	ldr	r1, [sp, #12]
   27f4c:	ldr	r2, [r1, #4]
   27f50:	lsl	r2, r2, #1
   27f54:	strd	r2, [r1, #4]
   27f58:	b	27bbc <__assert_fail@plt+0x16990>
   27f5c:	ldr	r9, [sp, #24]
   27f60:	ldr	r0, [sp, #132]	; 0x84
   27f64:	bl	13254 <__assert_fail@plt+0x2028>
   27f68:	ldr	r3, [sp, #20]
   27f6c:	ldr	r0, [sp, #292]	; 0x124
   27f70:	cmp	r0, r3
   27f74:	beq	27f7c <__assert_fail@plt+0x16d50>
   27f78:	bl	13254 <__assert_fail@plt+0x2028>
   27f7c:	ldr	r0, [sp, #12]
   27f80:	mov	r2, #0
   27f84:	ldr	r3, [sp, #20]
   27f88:	str	r2, [sp, #284]	; 0x11c
   27f8c:	cmp	r0, r2
   27f90:	str	r3, [sp, #292]	; 0x124
   27f94:	mov	r3, #16
   27f98:	str	r3, [sp, #288]	; 0x120
   27f9c:	beq	27fa4 <__assert_fail@plt+0x16d78>
   27fa0:	bl	21e18 <__assert_fail@plt+0x10bec>
   27fa4:	ldr	r4, [sp, #248]	; 0xf8
   27fa8:	ldr	r3, [sp, #476]	; 0x1dc
   27fac:	ldr	r3, [r3]
   27fb0:	b	27414 <__assert_fail@plt+0x161e8>
   27fb4:	mov	r2, #0
   27fb8:	mov	r3, #16
   27fbc:	str	r2, [sp, #284]	; 0x11c
   27fc0:	str	r3, [sp, #288]	; 0x120
   27fc4:	b	27c80 <__assert_fail@plt+0x16a54>
   27fc8:	ldr	r9, [sp, #24]
   27fcc:	ldr	r0, [sp, #132]	; 0x84
   27fd0:	bl	13254 <__assert_fail@plt+0x2028>
   27fd4:	ldr	r3, [sp, #20]
   27fd8:	ldr	r0, [sp, #292]	; 0x124
   27fdc:	cmp	r0, r3
   27fe0:	beq	27fa4 <__assert_fail@plt+0x16d78>
   27fe4:	bl	13254 <__assert_fail@plt+0x2028>
   27fe8:	b	27fa4 <__assert_fail@plt+0x16d78>
   27fec:	mov	r2, #0
   27ff0:	mov	r3, #16
   27ff4:	str	r2, [sp, #284]	; 0x11c
   27ff8:	str	r3, [sp, #288]	; 0x120
   27ffc:	b	27aa8 <__assert_fail@plt+0x1687c>
   28000:	ldr	r9, [sp, #68]	; 0x44
   28004:	b	273b0 <__assert_fail@plt+0x16184>
   28008:	ldr	r1, [sp, #172]	; 0xac
   2800c:	sub	r2, r5, r1
   28010:	ldr	r0, [sp, #176]	; 0xb0
   28014:	mov	r3, r4
   28018:	cmp	r0, r2
   2801c:	bls	2802c <__assert_fail@plt+0x16e00>
   28020:	ldr	r3, [sp, #152]	; 0x98
   28024:	ldrb	r3, [r3, r2]
   28028:	add	r3, r4, r3
   2802c:	ldrb	r3, [r3]
   28030:	cmp	r3, #0
   28034:	bne	26964 <__assert_fail@plt+0x15738>
   28038:	ldr	r2, [sp, #76]	; 0x4c
   2803c:	ldr	r3, [sp, #96]	; 0x60
   28040:	add	r5, r5, r3
   28044:	ldr	r3, [sp, #64]	; 0x40
   28048:	str	r5, [sp, #116]	; 0x74
   2804c:	cmp	r5, r3
   28050:	movle	r3, #0
   28054:	movgt	r3, #1
   28058:	cmp	r5, r2
   2805c:	orrlt	r3, r3, #1
   28060:	cmp	r3, #0
   28064:	beq	275b4 <__assert_fail@plt+0x16388>
   28068:	b	26df8 <__assert_fail@plt+0x15bcc>
   2806c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28070:	mov	r4, r3
   28074:	ldr	r3, [r3, #4]
   28078:	ldr	r5, [r0, #84]	; 0x54
   2807c:	strd	r6, [sp, #8]
   28080:	strd	sl, [sp, #24]
   28084:	mov	fp, r2
   28088:	mov	sl, r1
   2808c:	str	lr, [sp, #32]
   28090:	lsl	lr, r2, #2
   28094:	ldr	r2, [r0, #100]	; 0x64
   28098:	strd	r8, [sp, #16]
   2809c:	sub	sp, sp, #108	; 0x6c
   280a0:	str	lr, [sp, #24]
   280a4:	ldr	r1, [r2, fp, lsl #2]
   280a8:	add	r2, r2, lr
   280ac:	strd	r0, [sp, #16]
   280b0:	mov	r0, #0
   280b4:	cmp	r1, r0
   280b8:	str	r0, [sp, #72]	; 0x48
   280bc:	beq	28514 <__assert_fail@plt+0x172e8>
   280c0:	cmp	r3, #0
   280c4:	bne	28100 <__assert_fail@plt+0x16ed4>
   280c8:	ldr	r1, [sl]
   280cc:	str	r3, [r1, fp, lsl #2]
   280d0:	ldr	r3, [r2]
   280d4:	ldrb	r3, [r3, #52]	; 0x34
   280d8:	ands	r3, r3, #64	; 0x40
   280dc:	bne	2821c <__assert_fail@plt+0x16ff0>
   280e0:	mov	r0, r3
   280e4:	add	sp, sp, #108	; 0x6c
   280e8:	ldrd	r4, [sp]
   280ec:	ldrd	r6, [sp, #8]
   280f0:	ldrd	r8, [sp, #16]
   280f4:	ldrd	sl, [sp, #24]
   280f8:	add	sp, sp, #32
   280fc:	pop	{pc}		; (ldr pc, [sp], #4)
   28100:	mov	r2, r4
   28104:	mov	r1, r5
   28108:	str	r0, [sp, #76]	; 0x4c
   2810c:	add	r0, sp, #76	; 0x4c
   28110:	bl	216c8 <__assert_fail@plt+0x1049c>
   28114:	ldr	r3, [sp, #76]	; 0x4c
   28118:	mov	r8, r0
   2811c:	cmp	r3, #0
   28120:	bne	280e0 <__assert_fail@plt+0x16eb4>
   28124:	mov	r6, r0
   28128:	ldr	r7, [r6, #28]!
   2812c:	cmp	r7, #0
   28130:	bne	281a4 <__assert_fail@plt+0x16f78>
   28134:	ldr	r2, [r4, #4]
   28138:	lsl	r0, r2, #2
   2813c:	strd	r2, [r8, #28]
   28140:	bl	2d378 <__assert_fail@plt+0x1c14c>
   28144:	cmp	r0, #0
   28148:	str	r0, [r8, #36]	; 0x24
   2814c:	beq	2819c <__assert_fail@plt+0x16f70>
   28150:	ldr	r3, [r4, #4]
   28154:	str	r7, [sp, #76]	; 0x4c
   28158:	cmp	r3, #0
   2815c:	bgt	28170 <__assert_fail@plt+0x16f44>
   28160:	b	281a4 <__assert_fail@plt+0x16f78>
   28164:	ldr	r3, [r4, #4]
   28168:	cmp	r7, r3
   2816c:	bge	281a4 <__assert_fail@plt+0x16f78>
   28170:	ldr	r3, [r4, #8]
   28174:	mov	r0, r6
   28178:	ldr	r1, [r5, #28]
   2817c:	ldr	r3, [r3, r7, lsl #2]
   28180:	add	r7, r7, #1
   28184:	add	r3, r3, r3, lsl #1
   28188:	add	r1, r1, r3, lsl #2
   2818c:	bl	21e88 <__assert_fail@plt+0x10c5c>
   28190:	cmp	r0, #0
   28194:	str	r0, [sp, #76]	; 0x4c
   28198:	beq	28164 <__assert_fail@plt+0x16f38>
   2819c:	mov	r3, #12
   281a0:	b	280e0 <__assert_fail@plt+0x16eb4>
   281a4:	ldr	r3, [sp, #20]
   281a8:	mov	r2, r6
   281ac:	mov	r0, r4
   281b0:	add	r3, r3, #4
   281b4:	mov	r1, r3
   281b8:	str	r3, [sp, #36]	; 0x24
   281bc:	bl	20b48 <__assert_fail@plt+0xf91c>
   281c0:	cmp	r0, #0
   281c4:	str	r0, [sp, #72]	; 0x48
   281c8:	bne	287e0 <__assert_fail@plt+0x175b4>
   281cc:	ldr	r3, [sl, #20]
   281d0:	cmp	r3, #0
   281d4:	bne	285e0 <__assert_fail@plt+0x173b4>
   281d8:	mov	r2, r4
   281dc:	mov	r1, r5
   281e0:	ldr	r4, [sl]
   281e4:	add	r0, sp, #72	; 0x48
   281e8:	bl	216c8 <__assert_fail@plt+0x1049c>
   281ec:	ldr	r3, [sp, #72]	; 0x48
   281f0:	str	r0, [r4, fp, lsl #2]
   281f4:	cmp	r3, #0
   281f8:	bne	280e0 <__assert_fail@plt+0x16eb4>
   281fc:	ldr	r3, [sp, #16]
   28200:	ldr	r2, [r3, #100]	; 0x64
   28204:	ldr	r3, [sp, #24]
   28208:	add	r2, r2, r3
   2820c:	ldr	r3, [r2]
   28210:	ldrb	r3, [r3, #52]	; 0x34
   28214:	ands	r3, r3, #64	; 0x40
   28218:	beq	280e0 <__assert_fail@plt+0x16eb4>
   2821c:	ldr	r3, [sp, #16]
   28220:	mov	r8, #0
   28224:	ldr	ip, [r3, #108]	; 0x6c
   28228:	mov	r3, ip
   2822c:	cmp	r8, r3
   28230:	bge	28290 <__assert_fail@plt+0x17064>
   28234:	ldr	r1, [sp, #16]
   28238:	add	r2, r8, r3
   2823c:	add	r2, r2, r2, lsr #31
   28240:	asr	r2, r2, #1
   28244:	ldr	r0, [r1, #116]	; 0x74
   28248:	add	r1, r2, r2, lsl #1
   2824c:	add	r1, r0, r1, lsl #3
   28250:	ldr	r1, [r1, #4]
   28254:	cmp	fp, r1
   28258:	ble	28280 <__assert_fail@plt+0x17054>
   2825c:	b	28554 <__assert_fail@plt+0x17328>
   28260:	asr	r3, r3, #1
   28264:	add	r1, r3, r3, lsl #1
   28268:	mov	lr, r3
   2826c:	add	r1, r0, r1, lsl #3
   28270:	ldr	r1, [r1, #4]
   28274:	cmp	fp, r1
   28278:	bgt	2855c <__assert_fail@plt+0x17330>
   2827c:	mov	r2, r3
   28280:	add	r3, r8, r2
   28284:	cmp	r8, r2
   28288:	add	r3, r3, r3, lsr #31
   2828c:	blt	28260 <__assert_fail@plt+0x17034>
   28290:	cmp	ip, r8
   28294:	ble	2854c <__assert_fail@plt+0x17320>
   28298:	ldr	r1, [sp, #16]
   2829c:	add	r2, r8, r8, lsl #1
   282a0:	lsl	r2, r2, #3
   282a4:	ldr	r3, [r1, #116]	; 0x74
   282a8:	str	r2, [sp, #48]	; 0x30
   282ac:	add	r3, r3, r2
   282b0:	ldr	r3, [r3, #4]
   282b4:	cmp	fp, r3
   282b8:	bne	2854c <__assert_fail@plt+0x17320>
   282bc:	cmn	r8, #1
   282c0:	beq	2854c <__assert_fail@plt+0x17320>
   282c4:	ldr	r3, [sp, #20]
   282c8:	ldr	r9, [r1, #84]	; 0x54
   282cc:	ldr	r0, [r3, #8]
   282d0:	mov	r3, #0
   282d4:	str	r3, [sp, #76]	; 0x4c
   282d8:	cmp	r0, r3
   282dc:	ble	2854c <__assert_fail@plt+0x17320>
   282e0:	add	r2, sl, #24
   282e4:	str	r2, [sp, #36]	; 0x24
   282e8:	add	r2, sl, #20
   282ec:	str	fp, [sp, #44]	; 0x2c
   282f0:	mov	fp, r3
   282f4:	str	r2, [sp, #40]	; 0x28
   282f8:	str	r8, [sp, #56]	; 0x38
   282fc:	b	28314 <__assert_fail@plt+0x170e8>
   28300:	cmp	r3, #4
   28304:	beq	28350 <__assert_fail@plt+0x17124>
   28308:	add	fp, fp, #1
   2830c:	cmp	fp, r0
   28310:	bge	28540 <__assert_fail@plt+0x17314>
   28314:	ldr	r3, [sp, #20]
   28318:	ldr	r2, [sl, #8]
   2831c:	ldr	r1, [r3, #12]
   28320:	ldr	r3, [r9]
   28324:	ldr	r6, [r1, fp, lsl #2]
   28328:	add	r3, r3, r6, lsl #3
   2832c:	cmp	r6, r2
   28330:	ldrb	r3, [r3, #4]
   28334:	bne	28300 <__assert_fail@plt+0x170d4>
   28338:	ldr	r2, [sl, #12]
   2833c:	ldr	r1, [sp, #44]	; 0x2c
   28340:	cmp	r1, r2
   28344:	beq	28308 <__assert_fail@plt+0x170dc>
   28348:	cmp	r3, #4
   2834c:	bne	28308 <__assert_fail@plt+0x170dc>
   28350:	ldr	r3, [sp, #16]
   28354:	lsl	r2, r6, #2
   28358:	str	fp, [sp, #60]	; 0x3c
   2835c:	ldr	fp, [sp, #44]	; 0x2c
   28360:	ldr	r7, [sp, #56]	; 0x38
   28364:	ldr	r4, [r3, #116]	; 0x74
   28368:	add	r3, r6, r6, lsl #1
   2836c:	lsl	r3, r3, #2
   28370:	strd	r2, [sp, #28]
   28374:	add	r2, sl, #16
   28378:	ldr	r3, [sp, #48]	; 0x30
   2837c:	str	r2, [sp, #52]	; 0x34
   28380:	add	r4, r4, r3
   28384:	b	284d8 <__assert_fail@plt+0x172ac>
   28388:	ldr	r3, [r9, #12]
   2838c:	ldr	r2, [sp, #28]
   28390:	ldr	r8, [r3, r2]
   28394:	ldr	r3, [sl, #12]
   28398:	cmp	r5, r3
   2839c:	bgt	284c4 <__assert_fail@plt+0x17298>
   283a0:	ldr	r3, [sl]
   283a4:	ldr	r3, [r3, r5, lsl #2]
   283a8:	cmp	r3, #0
   283ac:	beq	284c4 <__assert_fail@plt+0x17298>
   283b0:	mov	r2, r8
   283b4:	add	r1, r3, #12
   283b8:	ldr	r0, [r3, #8]
   283bc:	bl	205c4 <__assert_fail@plt+0xf398>
   283c0:	cmp	r0, #0
   283c4:	beq	284c4 <__assert_fail@plt+0x17298>
   283c8:	mov	r3, r6
   283cc:	str	fp, [sp]
   283d0:	str	r8, [sp, #4]
   283d4:	str	r5, [sp, #8]
   283d8:	ldr	r0, [sp, #16]
   283dc:	ldr	r2, [sp, #36]	; 0x24
   283e0:	ldr	r1, [sp, #40]	; 0x28
   283e4:	bl	20898 <__assert_fail@plt+0xf66c>
   283e8:	cmp	r0, #0
   283ec:	bne	284c4 <__assert_fail@plt+0x17298>
   283f0:	ldr	r3, [sp, #76]	; 0x4c
   283f4:	cmp	r3, #0
   283f8:	beq	28568 <__assert_fail@plt+0x1733c>
   283fc:	add	r4, sp, #76	; 0x4c
   28400:	add	r5, sp, #92	; 0x5c
   28404:	mov	r0, r5
   28408:	mov	r1, r7
   2840c:	str	r6, [sp, #84]	; 0x54
   28410:	str	fp, [sp, #88]	; 0x58
   28414:	bl	1fff0 <__assert_fail@plt+0xedc4>
   28418:	cmp	r0, #0
   2841c:	beq	28820 <__assert_fail@plt+0x175f4>
   28420:	mov	r1, r4
   28424:	ldr	r0, [sp, #16]
   28428:	ldr	r2, [sp, #24]
   2842c:	ldr	r3, [sp, #76]	; 0x4c
   28430:	ldr	r4, [r3, r2]
   28434:	bl	26260 <__assert_fail@plt+0x15034>
   28438:	cmp	r0, #0
   2843c:	bne	285ac <__assert_fail@plt+0x17380>
   28440:	ldr	r1, [sl, #4]
   28444:	ldr	r3, [sp, #76]	; 0x4c
   28448:	cmp	r1, #0
   2844c:	beq	2846c <__assert_fail@plt+0x17240>
   28450:	mov	r2, r3
   28454:	mov	r0, r9
   28458:	add	r3, fp, #1
   2845c:	bl	218ec <__assert_fail@plt+0x106c0>
   28460:	cmp	r0, #0
   28464:	bne	285ac <__assert_fail@plt+0x17380>
   28468:	ldr	r3, [sp, #76]	; 0x4c
   2846c:	mov	r2, r7
   28470:	ldr	r1, [sp, #24]
   28474:	str	r4, [r3, r1]
   28478:	add	r1, sp, #100	; 0x64
   2847c:	ldr	r4, [sp, #96]	; 0x60
   28480:	mov	r0, r4
   28484:	bl	205c4 <__assert_fail@plt+0xf398>
   28488:	sub	r2, r0, #1
   2848c:	cmp	r4, r2
   28490:	movgt	r3, #0
   28494:	movle	r3, #1
   28498:	orrs	r3, r3, r2, lsr #31
   2849c:	bne	284b4 <__assert_fail@plt+0x17288>
   284a0:	sub	r4, r4, #1
   284a4:	add	r1, sp, #100	; 0x64
   284a8:	add	r0, sp, #96	; 0x60
   284ac:	str	r4, [sp, #96]	; 0x60
   284b0:	bl	20764 <__assert_fail@plt+0xf538>
   284b4:	ldr	r3, [sp, #16]
   284b8:	ldr	r4, [r3, #116]	; 0x74
   284bc:	add	r3, r7, r7, lsl #1
   284c0:	add	r4, r4, r3, lsl #3
   284c4:	ldrb	r3, [r4, #20]
   284c8:	add	r7, r7, #1
   284cc:	add	r4, r4, #24
   284d0:	cmp	r3, #0
   284d4:	beq	285d0 <__assert_fail@plt+0x173a4>
   284d8:	ldr	r3, [r4]
   284dc:	cmp	r6, r3
   284e0:	bne	284c4 <__assert_fail@plt+0x17298>
   284e4:	ldr	r3, [r4, #8]
   284e8:	ldr	r5, [r4, #12]
   284ec:	sub	r5, r5, r3
   284f0:	cmp	r5, #0
   284f4:	add	r5, fp, r5
   284f8:	bne	28388 <__assert_fail@plt+0x1715c>
   284fc:	ldr	r3, [r9, #20]
   28500:	ldr	r2, [sp, #32]
   28504:	add	r3, r3, r2
   28508:	ldr	r3, [r3, #8]
   2850c:	ldr	r8, [r3]
   28510:	b	28394 <__assert_fail@plt+0x17168>
   28514:	ldr	r6, [sl]
   28518:	cmp	r3, r0
   2851c:	streq	r3, [r6, fp, lsl #2]
   28520:	beq	280e0 <__assert_fail@plt+0x16eb4>
   28524:	mov	r2, r4
   28528:	mov	r1, r5
   2852c:	add	r0, sp, #72	; 0x48
   28530:	bl	216c8 <__assert_fail@plt+0x1049c>
   28534:	str	r0, [r6, fp, lsl #2]
   28538:	ldr	r3, [sp, #72]	; 0x48
   2853c:	b	280e0 <__assert_fail@plt+0x16eb4>
   28540:	ldr	r3, [sp, #76]	; 0x4c
   28544:	cmp	r3, #0
   28548:	bne	28830 <__assert_fail@plt+0x17604>
   2854c:	mov	r3, #0
   28550:	b	280e0 <__assert_fail@plt+0x16eb4>
   28554:	mov	lr, r2
   28558:	mov	r2, r3
   2855c:	add	r8, lr, #1
   28560:	mov	r3, r2
   28564:	b	2822c <__assert_fail@plt+0x17000>
   28568:	ldrd	r2, [sl]
   2856c:	add	r4, sp, #76	; 0x4c
   28570:	add	r5, sp, #92	; 0x5c
   28574:	mov	r0, r5
   28578:	ldr	ip, [sl, #24]
   2857c:	ldr	r1, [sp, #52]	; 0x34
   28580:	strd	r2, [sp, #76]	; 0x4c
   28584:	ldrd	r2, [sl, #16]
   28588:	str	ip, [r4, #24]
   2858c:	strd	r2, [sp, #64]	; 0x40
   28590:	ldrd	r2, [sl, #8]
   28594:	strd	r2, [r4, #8]
   28598:	ldrd	r2, [sp, #64]	; 0x40
   2859c:	strd	r2, [r4, #16]
   285a0:	bl	211ec <__assert_fail@plt+0xffc0>
   285a4:	cmp	r0, #0
   285a8:	beq	28404 <__assert_fail@plt+0x171d8>
   285ac:	mov	r3, r0
   285b0:	ldr	r2, [sp, #76]	; 0x4c
   285b4:	cmp	r2, #0
   285b8:	beq	280e0 <__assert_fail@plt+0x16eb4>
   285bc:	ldr	r0, [sp, #100]	; 0x64
   285c0:	str	r3, [sp, #16]
   285c4:	bl	13254 <__assert_fail@plt+0x2028>
   285c8:	ldr	r3, [sp, #16]
   285cc:	b	280e0 <__assert_fail@plt+0x16eb4>
   285d0:	ldr	r3, [sp, #20]
   285d4:	ldr	fp, [sp, #60]	; 0x3c
   285d8:	ldr	r0, [r3, #8]
   285dc:	b	28308 <__assert_fail@plt+0x170dc>
   285e0:	ldr	r3, [sp, #16]
   285e4:	ldr	r3, [r3, #116]	; 0x74
   285e8:	str	r3, [sp, #32]
   285ec:	ble	286cc <__assert_fail@plt+0x174a0>
   285f0:	mov	r6, r0
   285f4:	str	fp, [sp, #28]
   285f8:	ldr	r3, [sl, #24]
   285fc:	ldr	r0, [sp, #28]
   28600:	ldr	ip, [sp, #32]
   28604:	ldr	r3, [r3, r6, lsl #2]
   28608:	add	r3, r3, r3, lsl #1
   2860c:	add	r2, ip, r3, lsl #3
   28610:	ldr	r1, [r2, #8]
   28614:	cmp	r0, r1
   28618:	ble	286b8 <__assert_fail@plt+0x1748c>
   2861c:	ldr	r1, [r2, #4]
   28620:	cmp	r0, r1
   28624:	bgt	286b8 <__assert_fail@plt+0x1748c>
   28628:	ldr	r1, [r2, #12]
   2862c:	ldr	r2, [ip, r3, lsl #3]
   28630:	ldr	r3, [r5]
   28634:	cmp	r0, r1
   28638:	ldr	r7, [r4, #4]
   2863c:	ldr	r9, [r3, r2, lsl #3]
   28640:	beq	286d8 <__assert_fail@plt+0x174ac>
   28644:	cmp	r7, #0
   28648:	ble	286b8 <__assert_fail@plt+0x1748c>
   2864c:	mov	r8, #0
   28650:	ldr	fp, [sp, #36]	; 0x24
   28654:	b	28668 <__assert_fail@plt+0x1743c>
   28658:	add	r8, r8, #1
   2865c:	cmp	r8, r7
   28660:	bge	286b8 <__assert_fail@plt+0x1748c>
   28664:	ldr	r3, [r5]
   28668:	ldr	r2, [r4, #8]
   2866c:	ldr	r1, [r2, r8, lsl #2]
   28670:	add	r2, r3, r1, lsl #3
   28674:	ldrb	r2, [r2, #4]
   28678:	sub	r2, r2, #8
   2867c:	cmp	r2, #1
   28680:	bhi	28658 <__assert_fail@plt+0x1742c>
   28684:	ldr	r3, [r3, r1, lsl #3]
   28688:	cmp	r9, r3
   2868c:	bne	28658 <__assert_fail@plt+0x1742c>
   28690:	mov	r3, fp
   28694:	mov	r2, r4
   28698:	mov	r0, r5
   2869c:	bl	21be0 <__assert_fail@plt+0x109b4>
   286a0:	cmp	r0, #0
   286a4:	bne	287e0 <__assert_fail@plt+0x175b4>
   286a8:	ldr	r7, [r4, #4]
   286ac:	add	r8, r8, #1
   286b0:	cmp	r8, r7
   286b4:	blt	28664 <__assert_fail@plt+0x17438>
   286b8:	ldr	r3, [sl, #20]
   286bc:	add	r6, r6, #1
   286c0:	cmp	r6, r3
   286c4:	blt	285f8 <__assert_fail@plt+0x173cc>
   286c8:	ldr	fp, [sp, #28]
   286cc:	mov	r3, #0
   286d0:	str	r3, [sp, #72]	; 0x48
   286d4:	b	281d8 <__assert_fail@plt+0x16fac>
   286d8:	cmp	r7, #0
   286dc:	ble	286b8 <__assert_fail@plt+0x1748c>
   286e0:	ldr	lr, [r4, #8]
   286e4:	mvn	r8, #0
   286e8:	mov	fp, r8
   286ec:	str	r6, [sp, #40]	; 0x28
   286f0:	add	r2, lr, r7, lsl #2
   286f4:	mov	r1, lr
   286f8:	mov	r6, r2
   286fc:	b	2871c <__assert_fail@plt+0x174f0>
   28700:	cmp	r0, #9
   28704:	bne	28714 <__assert_fail@plt+0x174e8>
   28708:	ldr	r0, [ip]
   2870c:	cmp	r9, r0
   28710:	moveq	r8, r2
   28714:	cmp	r6, r1
   28718:	beq	28744 <__assert_fail@plt+0x17518>
   2871c:	ldr	r2, [r1], #4
   28720:	add	ip, r3, r2, lsl #3
   28724:	ldrb	r0, [ip, #4]
   28728:	cmp	r0, #8
   2872c:	bne	28700 <__assert_fail@plt+0x174d4>
   28730:	ldr	r0, [r3, r2, lsl #3]
   28734:	cmp	r9, r0
   28738:	moveq	fp, r2
   2873c:	cmp	r6, r1
   28740:	bne	2871c <__assert_fail@plt+0x174f0>
   28744:	cmp	fp, #0
   28748:	ldr	r6, [sp, #40]	; 0x28
   2874c:	bge	287e8 <__assert_fail@plt+0x175bc>
   28750:	cmp	r8, #0
   28754:	blt	286b8 <__assert_fail@plt+0x1748c>
   28758:	mov	r9, #0
   2875c:	str	r6, [sp, #40]	; 0x28
   28760:	b	28774 <__assert_fail@plt+0x17548>
   28764:	add	r9, r9, #1
   28768:	cmp	r7, r9
   2876c:	ble	28828 <__assert_fail@plt+0x175fc>
   28770:	ldr	lr, [r4, #8]
   28774:	mov	r2, r8
   28778:	ldr	r6, [lr, r9, lsl #2]
   2877c:	ldr	r0, [r5, #28]
   28780:	add	fp, r6, r6, lsl #1
   28784:	lsl	fp, fp, #2
   28788:	add	r0, r0, fp
   2878c:	add	r1, r0, #8
   28790:	ldr	r0, [r0, #4]
   28794:	bl	205c4 <__assert_fail@plt+0xf398>
   28798:	cmp	r0, #0
   2879c:	bne	28764 <__assert_fail@plt+0x17538>
   287a0:	ldr	r1, [r5, #24]
   287a4:	add	fp, r1, fp
   287a8:	add	r1, fp, #8
   287ac:	ldr	r0, [fp, #4]
   287b0:	bl	205c4 <__assert_fail@plt+0xf398>
   287b4:	cmp	r0, #0
   287b8:	bne	28764 <__assert_fail@plt+0x17538>
   287bc:	mov	r1, r6
   287c0:	mov	r2, r4
   287c4:	ldr	r3, [sp, #36]	; 0x24
   287c8:	mov	r0, r5
   287cc:	bl	21be0 <__assert_fail@plt+0x109b4>
   287d0:	cmp	r0, #0
   287d4:	bne	287e0 <__assert_fail@plt+0x175b4>
   287d8:	ldr	r7, [r4, #4]
   287dc:	b	28768 <__assert_fail@plt+0x1753c>
   287e0:	mov	r3, r0
   287e4:	b	280e0 <__assert_fail@plt+0x16eb4>
   287e8:	mov	r1, fp
   287ec:	mov	r2, r4
   287f0:	ldr	r3, [sp, #36]	; 0x24
   287f4:	mov	r0, r5
   287f8:	bl	21be0 <__assert_fail@plt+0x109b4>
   287fc:	cmp	r0, #0
   28800:	bne	287e0 <__assert_fail@plt+0x175b4>
   28804:	cmp	r8, #0
   28808:	blt	286b8 <__assert_fail@plt+0x1748c>
   2880c:	ldr	r7, [r4, #4]
   28810:	cmp	r7, #0
   28814:	ble	286b8 <__assert_fail@plt+0x1748c>
   28818:	ldr	lr, [r4, #8]
   2881c:	b	28758 <__assert_fail@plt+0x1752c>
   28820:	mov	r3, #12
   28824:	b	285b0 <__assert_fail@plt+0x17384>
   28828:	ldr	r6, [sp, #40]	; 0x28
   2882c:	b	286b8 <__assert_fail@plt+0x1748c>
   28830:	mov	r3, #0
   28834:	b	285bc <__assert_fail@plt+0x17390>
   28838:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2883c:	ldr	r3, [r1, #56]	; 0x38
   28840:	strd	r6, [sp, #8]
   28844:	mov	r6, r0
   28848:	ldr	r7, [r1, #40]	; 0x28
   2884c:	strd	r8, [sp, #16]
   28850:	str	sl, [sp, #24]
   28854:	str	lr, [sp, #28]
   28858:	sub	sp, sp, #8
   2885c:	cmp	r3, r7
   28860:	movle	r3, #2
   28864:	movle	r0, #0
   28868:	strble	r3, [r6, #4]
   2886c:	ble	28b34 <__assert_fail@plt+0x17908>
   28870:	ldr	sl, [r1, #4]
   28874:	mov	r8, r2
   28878:	mov	r5, r1
   2887c:	ldrb	r3, [r6, #6]
   28880:	ldr	r2, [r1, #80]	; 0x50
   28884:	ldrb	r4, [sl, r7]
   28888:	bic	r3, r3, #96	; 0x60
   2888c:	cmp	r2, #1
   28890:	strb	r4, [r6]
   28894:	strb	r3, [r6, #6]
   28898:	ble	28b50 <__assert_fail@plt+0x17924>
   2889c:	ldr	r3, [r1, #28]
   288a0:	cmp	r7, r3
   288a4:	beq	288b8 <__assert_fail@plt+0x1768c>
   288a8:	ldr	r3, [r1, #8]
   288ac:	ldr	r3, [r3, r7, lsl #2]
   288b0:	cmn	r3, #1
   288b4:	beq	28d98 <__assert_fail@plt+0x17b6c>
   288b8:	cmp	r4, #92	; 0x5c
   288bc:	beq	28b8c <__assert_fail@plt+0x17960>
   288c0:	ldr	r3, [r5, #8]
   288c4:	mov	r2, #1
   288c8:	strb	r2, [r6, #4]
   288cc:	ldr	r9, [r3, r7, lsl #2]
   288d0:	mov	r0, r9
   288d4:	sub	r9, r9, #95	; 0x5f
   288d8:	bl	11154 <iswalnum@plt>
   288dc:	ldrb	r3, [r6, #6]
   288e0:	clz	r9, r9
   288e4:	cmp	r0, #0
   288e8:	lsr	r9, r9, #5
   288ec:	movne	r9, #1
   288f0:	bfi	r3, r9, #6, #1
   288f4:	strb	r3, [r6, #6]
   288f8:	sub	r4, r4, #10
   288fc:	cmp	r4, #115	; 0x73
   28900:	ldrls	pc, [pc, r4, lsl #2]
   28904:	b	28d90 <__assert_fail@plt+0x17b64>
   28908:	strdeq	r8, [r2], -r0
   2890c:	muleq	r2, r0, sp
   28910:	muleq	r2, r0, sp
   28914:	muleq	r2, r0, sp
   28918:	muleq	r2, r0, sp
   2891c:	muleq	r2, r0, sp
   28920:	muleq	r2, r0, sp
   28924:	muleq	r2, r0, sp
   28928:	muleq	r2, r0, sp
   2892c:	muleq	r2, r0, sp
   28930:	muleq	r2, r0, sp
   28934:	muleq	r2, r0, sp
   28938:	muleq	r2, r0, sp
   2893c:	muleq	r2, r0, sp
   28940:	muleq	r2, r0, sp
   28944:	muleq	r2, r0, sp
   28948:	muleq	r2, r0, sp
   2894c:	muleq	r2, r0, sp
   28950:	muleq	r2, r0, sp
   28954:	muleq	r2, r0, sp
   28958:	muleq	r2, r0, sp
   2895c:	muleq	r2, r0, sp
   28960:	muleq	r2, r0, sp
   28964:	muleq	r2, r0, sp
   28968:	muleq	r2, r0, sp
   2896c:	muleq	r2, r0, sp
   28970:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28974:	muleq	r2, r0, sp
   28978:	muleq	r2, r0, sp
   2897c:	muleq	r2, r0, sp
   28980:	andeq	r8, r2, ip, ror #28
   28984:	andeq	r8, r2, r4, lsl #29
   28988:	andeq	r8, r2, ip, asr lr
   2898c:	muleq	r2, ip, lr
   28990:	muleq	r2, r0, sp
   28994:	muleq	r2, r0, sp
   28998:	andeq	r8, r2, r4, ror #27
   2899c:	muleq	r2, r0, sp
   289a0:	muleq	r2, r0, sp
   289a4:	muleq	r2, r0, sp
   289a8:	muleq	r2, r0, sp
   289ac:	muleq	r2, r0, sp
   289b0:	muleq	r2, r0, sp
   289b4:	muleq	r2, r0, sp
   289b8:	muleq	r2, r0, sp
   289bc:	muleq	r2, r0, sp
   289c0:	muleq	r2, r0, sp
   289c4:	muleq	r2, r0, sp
   289c8:	muleq	r2, r0, sp
   289cc:	muleq	r2, r0, sp
   289d0:	muleq	r2, r0, sp
   289d4:	muleq	r2, r0, sp
   289d8:	muleq	r2, r0, sp
   289dc:	strdeq	r8, [r2], -r4
   289e0:	muleq	r2, r0, sp
   289e4:	muleq	r2, r0, sp
   289e8:	muleq	r2, r0, sp
   289ec:	muleq	r2, r0, sp
   289f0:	muleq	r2, r0, sp
   289f4:	muleq	r2, r0, sp
   289f8:	muleq	r2, r0, sp
   289fc:	muleq	r2, r0, sp
   28a00:	muleq	r2, r0, sp
   28a04:	muleq	r2, r0, sp
   28a08:	muleq	r2, r0, sp
   28a0c:	muleq	r2, r0, sp
   28a10:	muleq	r2, r0, sp
   28a14:	muleq	r2, r0, sp
   28a18:	muleq	r2, r0, sp
   28a1c:	muleq	r2, r0, sp
   28a20:	muleq	r2, r0, sp
   28a24:	muleq	r2, r0, sp
   28a28:	muleq	r2, r0, sp
   28a2c:	muleq	r2, r0, sp
   28a30:	muleq	r2, r0, sp
   28a34:	muleq	r2, r0, sp
   28a38:	muleq	r2, r0, sp
   28a3c:	muleq	r2, r0, sp
   28a40:	muleq	r2, r0, sp
   28a44:	muleq	r2, r0, sp
   28a48:	muleq	r2, r0, sp
   28a4c:	andeq	r8, r2, r0, lsl lr
   28a50:	muleq	r2, r0, sp
   28a54:	muleq	r2, r0, sp
   28a58:	andeq	r8, r2, r0, lsr #28
   28a5c:	muleq	r2, r0, sp
   28a60:	muleq	r2, r0, sp
   28a64:	muleq	r2, r0, sp
   28a68:	muleq	r2, r0, sp
   28a6c:	muleq	r2, r0, sp
   28a70:	muleq	r2, r0, sp
   28a74:	muleq	r2, r0, sp
   28a78:	muleq	r2, r0, sp
   28a7c:	muleq	r2, r0, sp
   28a80:	muleq	r2, r0, sp
   28a84:	muleq	r2, r0, sp
   28a88:	muleq	r2, r0, sp
   28a8c:	muleq	r2, r0, sp
   28a90:	muleq	r2, r0, sp
   28a94:	muleq	r2, r0, sp
   28a98:	muleq	r2, r0, sp
   28a9c:	muleq	r2, r0, sp
   28aa0:	muleq	r2, r0, sp
   28aa4:	muleq	r2, r0, sp
   28aa8:	muleq	r2, r0, sp
   28aac:	muleq	r2, r0, sp
   28ab0:	muleq	r2, r0, sp
   28ab4:	muleq	r2, r0, sp
   28ab8:	muleq	r2, r0, sp
   28abc:	muleq	r2, r0, sp
   28ac0:	muleq	r2, r0, sp
   28ac4:	muleq	r2, r0, sp
   28ac8:	muleq	r2, r0, sp
   28acc:			; <UNDEFINED> instruction: 0x00028eb8
   28ad0:	ldrdeq	r8, [r2], -r4
   28ad4:	strdeq	r8, [r2], -ip
   28ad8:	tst	r8, #8
   28adc:	bne	28b20 <__assert_fail@plt+0x178f4>
   28ae0:	ldr	r3, [r5, #48]	; 0x30
   28ae4:	add	r7, r7, #1
   28ae8:	cmp	r7, r3
   28aec:	beq	28b20 <__assert_fail@plt+0x178f4>
   28af0:	mov	r2, r8
   28af4:	mov	r1, r5
   28af8:	str	r7, [r5, #40]	; 0x28
   28afc:	mov	r0, sp
   28b00:	bl	28838 <__assert_fail@plt+0x1760c>
   28b04:	ldrb	r2, [sp, #4]
   28b08:	ldr	r3, [r5, #40]	; 0x28
   28b0c:	sub	r2, r2, #9
   28b10:	cmp	r2, #1
   28b14:	sub	r3, r3, #1
   28b18:	str	r3, [r5, #40]	; 0x28
   28b1c:	bhi	28d90 <__assert_fail@plt+0x17b64>
   28b20:	mov	r3, #12
   28b24:	mov	r2, #32
   28b28:	mov	r0, #1
   28b2c:	str	r2, [r6]
   28b30:	strb	r3, [r6, #4]
   28b34:	add	sp, sp, #8
   28b38:	ldrd	r4, [sp]
   28b3c:	ldrd	r6, [sp, #8]
   28b40:	ldrd	r8, [sp, #16]
   28b44:	ldr	sl, [sp, #24]
   28b48:	add	sp, sp, #28
   28b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   28b50:	cmp	r4, #92	; 0x5c
   28b54:	beq	28b8c <__assert_fail@plt+0x17960>
   28b58:	mov	r3, #1
   28b5c:	strb	r3, [r6, #4]
   28b60:	bl	11118 <__ctype_b_loc@plt>
   28b64:	ldr	r1, [r0]
   28b68:	lsl	r3, r4, #1
   28b6c:	ldrb	r2, [r6, #6]
   28b70:	ldrh	r3, [r1, r3]
   28b74:	ubfx	r3, r3, #3, #1
   28b78:	cmp	r4, #95	; 0x5f
   28b7c:	orreq	r3, r3, #1
   28b80:	bfi	r2, r3, #6, #1
   28b84:	strb	r2, [r6, #6]
   28b88:	b	288f8 <__assert_fail@plt+0x176cc>
   28b8c:	ldr	r1, [r5, #48]	; 0x30
   28b90:	add	r3, r7, #1
   28b94:	cmp	r3, r1
   28b98:	blt	28bac <__assert_fail@plt+0x17980>
   28b9c:	mov	r3, #36	; 0x24
   28ba0:	mov	r0, #1
   28ba4:	strb	r3, [r6, #4]
   28ba8:	b	28b34 <__assert_fail@plt+0x17908>
   28bac:	ldrb	r1, [r5, #75]	; 0x4b
   28bb0:	cmp	r1, #0
   28bb4:	bne	2911c <__assert_fail@plt+0x17ef0>
   28bb8:	ldrb	r7, [sl, r3]
   28bbc:	mov	r1, #1
   28bc0:	strb	r7, [r6]
   28bc4:	cmp	r2, r1
   28bc8:	strb	r1, [r6, #4]
   28bcc:	ble	28db8 <__assert_fail@plt+0x17b8c>
   28bd0:	ldr	r1, [r5, #8]
   28bd4:	add	r1, r1, r3, lsl #2
   28bd8:	ldr	r4, [r1]
   28bdc:	mov	r0, r4
   28be0:	sub	r4, r4, #95	; 0x5f
   28be4:	bl	11154 <iswalnum@plt>
   28be8:	ldrb	r3, [r6, #6]
   28bec:	clz	r4, r4
   28bf0:	cmp	r0, #0
   28bf4:	lsr	r4, r4, #5
   28bf8:	movne	r4, #1
   28bfc:	bfi	r3, r4, #6, #1
   28c00:	strb	r3, [r6, #6]
   28c04:	sub	r3, r7, #39	; 0x27
   28c08:	cmp	r3, #86	; 0x56
   28c0c:	ldrls	pc, [pc, r3, lsl #2]
   28c10:	b	28f30 <__assert_fail@plt+0x17d04>
   28c14:	andeq	r9, r2, r4, ror #1
   28c18:	andeq	r9, r2, r4, lsl #2
   28c1c:	andeq	r9, r2, ip, asr #1
   28c20:	andeq	r8, r2, r0, lsr pc
   28c24:	andeq	r9, r2, ip, lsr #1
   28c28:	andeq	r8, r2, r0, lsr pc
   28c2c:	andeq	r8, r2, r0, lsr pc
   28c30:	andeq	r8, r2, r0, lsr pc
   28c34:	andeq	r8, r2, r0, lsr pc
   28c38:	andeq	r8, r2, r0, lsr pc
   28c3c:	andeq	r9, r2, ip, lsl #1
   28c40:	andeq	r9, r2, ip, lsl #1
   28c44:	andeq	r9, r2, ip, lsl #1
   28c48:	andeq	r9, r2, ip, lsl #1
   28c4c:	andeq	r9, r2, ip, lsl #1
   28c50:	andeq	r9, r2, ip, lsl #1
   28c54:	andeq	r9, r2, ip, lsl #1
   28c58:	andeq	r9, r2, ip, lsl #1
   28c5c:	andeq	r9, r2, ip, lsl #1
   28c60:	andeq	r8, r2, r0, lsr pc
   28c64:	andeq	r8, r2, r0, lsr pc
   28c68:	andeq	r9, r2, ip, rrx
   28c6c:	andeq	r8, r2, r0, lsr pc
   28c70:	andeq	r9, r2, ip, asr #32
   28c74:	andeq	r9, r2, ip, lsr #32
   28c78:	andeq	r8, r2, r0, lsr pc
   28c7c:	andeq	r8, r2, r0, lsr pc
   28c80:	andeq	r9, r2, ip
   28c84:	andeq	r8, r2, r0, lsr pc
   28c88:	andeq	r8, r2, r0, lsr pc
   28c8c:	andeq	r8, r2, r0, lsr pc
   28c90:	andeq	r8, r2, r0, lsr pc
   28c94:	andeq	r8, r2, r0, lsr pc
   28c98:	andeq	r8, r2, r0, lsr pc
   28c9c:	andeq	r8, r2, r0, lsr pc
   28ca0:	andeq	r8, r2, r0, lsr pc
   28ca4:	andeq	r8, r2, r0, lsr pc
   28ca8:	andeq	r8, r2, r0, lsr pc
   28cac:	andeq	r8, r2, r0, lsr pc
   28cb0:	andeq	r8, r2, r0, lsr pc
   28cb4:	andeq	r8, r2, r0, lsr pc
   28cb8:	andeq	r8, r2, r0, lsr pc
   28cbc:	andeq	r8, r2, r0, lsr pc
   28cc0:	andeq	r8, r2, r0, lsr pc
   28cc4:	strdeq	r8, [r2], -r4
   28cc8:	andeq	r8, r2, r0, lsr pc
   28ccc:	andeq	r8, r2, r0, lsr pc
   28cd0:	andeq	r8, r2, r0, lsr pc
   28cd4:	ldrdeq	r8, [r2], -ip
   28cd8:	andeq	r8, r2, r0, lsr pc
   28cdc:	andeq	r8, r2, r0, lsr pc
   28ce0:	andeq	r8, r2, r0, lsr pc
   28ce4:	andeq	r8, r2, r0, lsr pc
   28ce8:	andeq	r8, r2, r0, lsr pc
   28cec:	andeq	r8, r2, r0, lsr pc
   28cf0:	andeq	r8, r2, r0, lsr pc
   28cf4:	andeq	r8, r2, r0, lsr pc
   28cf8:			; <UNDEFINED> instruction: 0x00028fbc
   28cfc:	andeq	r8, r2, r0, lsr pc
   28d00:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   28d04:	andeq	r8, r2, r0, lsr pc
   28d08:	andeq	r8, r2, r0, lsr pc
   28d0c:	andeq	r8, r2, r0, lsr pc
   28d10:	andeq	r8, r2, r0, lsr pc
   28d14:	andeq	r8, r2, r0, lsr pc
   28d18:	andeq	r8, r2, r0, lsr pc
   28d1c:	andeq	r8, r2, r0, lsr pc
   28d20:	andeq	r8, r2, r0, lsr pc
   28d24:	andeq	r8, r2, r0, lsr pc
   28d28:	andeq	r8, r2, r0, lsr pc
   28d2c:	andeq	r8, r2, r0, lsr pc
   28d30:	andeq	r8, r2, r0, lsr pc
   28d34:	andeq	r8, r2, r0, lsr pc
   28d38:	andeq	r8, r2, r0, lsr pc
   28d3c:	andeq	r8, r2, r0, lsr pc
   28d40:	andeq	r8, r2, r0, lsr pc
   28d44:	andeq	r8, r2, r4, lsl #31
   28d48:	andeq	r8, r2, r0, lsr pc
   28d4c:	andeq	r8, r2, r0, lsr pc
   28d50:	andeq	r8, r2, r0, lsr pc
   28d54:	andeq	r8, r2, ip, ror #30
   28d58:	andeq	r8, r2, r0, lsr pc
   28d5c:	andeq	r8, r2, r0, lsr pc
   28d60:	andeq	r8, r2, r0, lsr pc
   28d64:	andeq	r8, r2, r0, asr pc
   28d68:	andeq	r8, r2, r8, lsr pc
   28d6c:	andeq	r8, r2, r8, lsl pc
   28d70:	add	r7, sl, r7
   28d74:	eor	r3, r8, #2048	; 0x800
   28d78:	ldrb	r2, [r7, #-1]
   28d7c:	ubfx	r3, r3, #11, #1
   28d80:	cmp	r2, #10
   28d84:	orrne	r3, r3, #1
   28d88:	cmp	r3, #0
   28d8c:	beq	28e44 <__assert_fail@plt+0x17c18>
   28d90:	mov	r0, #1
   28d94:	b	28b34 <__assert_fail@plt+0x17908>
   28d98:	ldr	r3, [r6, #4]
   28d9c:	mov	r0, #1
   28da0:	bic	r3, r3, #2097152	; 0x200000
   28da4:	bic	r3, r3, #255	; 0xff
   28da8:	orr	r3, r3, #2097152	; 0x200000
   28dac:	orr	r3, r3, r0
   28db0:	str	r3, [r6, #4]
   28db4:	b	28b34 <__assert_fail@plt+0x17908>
   28db8:	bl	11118 <__ctype_b_loc@plt>
   28dbc:	ldr	r1, [r0]
   28dc0:	lsl	r3, r7, #1
   28dc4:	ldrb	r2, [r6, #6]
   28dc8:	ldrh	r3, [r1, r3]
   28dcc:	ubfx	r3, r3, #3, #1
   28dd0:	cmp	r7, #95	; 0x5f
   28dd4:	orreq	r3, r3, #1
   28dd8:	bfi	r2, r3, #6, #1
   28ddc:	strb	r2, [r6, #6]
   28de0:	b	28c04 <__assert_fail@plt+0x179d8>
   28de4:	mov	r3, #5
   28de8:	mov	r0, #1
   28dec:	strb	r3, [r6, #4]
   28df0:	b	28b34 <__assert_fail@plt+0x17908>
   28df4:	movw	r3, #1026	; 0x402
   28df8:	tst	r8, r3
   28dfc:	bne	28d90 <__assert_fail@plt+0x17b64>
   28e00:	mov	r3, #19
   28e04:	mov	r0, #1
   28e08:	strb	r3, [r6, #4]
   28e0c:	b	28b34 <__assert_fail@plt+0x17908>
   28e10:	mov	r3, #20
   28e14:	mov	r0, #1
   28e18:	strb	r3, [r6, #4]
   28e1c:	b	28b34 <__assert_fail@plt+0x17908>
   28e20:	mov	r3, #8
   28e24:	movt	r3, #128	; 0x80
   28e28:	tst	r8, r3
   28e2c:	moveq	r3, #1
   28e30:	movne	r3, #0
   28e34:	cmp	r7, #0
   28e38:	moveq	r3, #0
   28e3c:	cmp	r3, #0
   28e40:	bne	28d70 <__assert_fail@plt+0x17b44>
   28e44:	mov	r3, #12
   28e48:	mov	r2, #16
   28e4c:	mov	r0, #1
   28e50:	str	r2, [r6]
   28e54:	strb	r3, [r6, #4]
   28e58:	b	28b34 <__assert_fail@plt+0x17908>
   28e5c:	mov	r3, #11
   28e60:	mov	r0, #1
   28e64:	strb	r3, [r6, #4]
   28e68:	b	28b34 <__assert_fail@plt+0x17908>
   28e6c:	tst	r8, #8192	; 0x2000
   28e70:	beq	28d90 <__assert_fail@plt+0x17b64>
   28e74:	mov	r3, #8
   28e78:	mov	r0, #1
   28e7c:	strb	r3, [r6, #4]
   28e80:	b	28b34 <__assert_fail@plt+0x17908>
   28e84:	tst	r8, #8192	; 0x2000
   28e88:	beq	28d90 <__assert_fail@plt+0x17b64>
   28e8c:	mov	r3, #9
   28e90:	mov	r0, #1
   28e94:	strb	r3, [r6, #4]
   28e98:	b	28b34 <__assert_fail@plt+0x17908>
   28e9c:	movw	r3, #1026	; 0x402
   28ea0:	tst	r8, r3
   28ea4:	bne	28d90 <__assert_fail@plt+0x17b64>
   28ea8:	mov	r3, #18
   28eac:	mov	r0, #1
   28eb0:	strb	r3, [r6, #4]
   28eb4:	b	28b34 <__assert_fail@plt+0x17908>
   28eb8:	and	r2, r8, #4608	; 0x1200
   28ebc:	cmp	r2, #4608	; 0x1200
   28ec0:	moveq	r3, #23
   28ec4:	moveq	r0, #1
   28ec8:	strbeq	r3, [r6, #4]
   28ecc:	bne	28d90 <__assert_fail@plt+0x17b64>
   28ed0:	b	28b34 <__assert_fail@plt+0x17908>
   28ed4:	and	r2, r8, #33792	; 0x8400
   28ed8:	cmp	r2, #32768	; 0x8000
   28edc:	bne	28d90 <__assert_fail@plt+0x17b64>
   28ee0:	mov	r3, #10
   28ee4:	mov	r0, #1
   28ee8:	strb	r3, [r6, #4]
   28eec:	b	28b34 <__assert_fail@plt+0x17908>
   28ef0:	tst	r8, #2048	; 0x800
   28ef4:	beq	28d90 <__assert_fail@plt+0x17b64>
   28ef8:	b	28ee0 <__assert_fail@plt+0x17cb4>
   28efc:	and	r2, r8, #4608	; 0x1200
   28f00:	cmp	r2, #4608	; 0x1200
   28f04:	moveq	r3, #24
   28f08:	moveq	r0, #1
   28f0c:	strbeq	r3, [r6, #4]
   28f10:	bne	28d90 <__assert_fail@plt+0x17b64>
   28f14:	b	28b34 <__assert_fail@plt+0x17908>
   28f18:	and	r2, r8, #4608	; 0x1200
   28f1c:	cmp	r2, #512	; 0x200
   28f20:	moveq	r3, #24
   28f24:	moveq	r0, #2
   28f28:	strbeq	r3, [r6, #4]
   28f2c:	beq	28b34 <__assert_fail@plt+0x17908>
   28f30:	mov	r0, #2
   28f34:	b	28b34 <__assert_fail@plt+0x17908>
   28f38:	tst	r8, #33792	; 0x8400
   28f3c:	bne	28f30 <__assert_fail@plt+0x17d04>
   28f40:	mov	r3, #10
   28f44:	mov	r0, #2
   28f48:	strb	r3, [r6, #4]
   28f4c:	b	28b34 <__assert_fail@plt+0x17908>
   28f50:	and	r2, r8, #4608	; 0x1200
   28f54:	cmp	r2, #512	; 0x200
   28f58:	moveq	r3, #23
   28f5c:	moveq	r0, #2
   28f60:	strbeq	r3, [r6, #4]
   28f64:	bne	28f30 <__assert_fail@plt+0x17d04>
   28f68:	b	28b34 <__assert_fail@plt+0x17908>
   28f6c:	tst	r8, #524288	; 0x80000
   28f70:	bne	28f30 <__assert_fail@plt+0x17d04>
   28f74:	mov	r3, #32
   28f78:	mov	r0, #2
   28f7c:	strb	r3, [r6, #4]
   28f80:	b	28b34 <__assert_fail@plt+0x17908>
   28f84:	tst	r8, #524288	; 0x80000
   28f88:	bne	28f30 <__assert_fail@plt+0x17d04>
   28f8c:	mov	r3, #34	; 0x22
   28f90:	mov	r0, #2
   28f94:	strb	r3, [r6, #4]
   28f98:	b	28b34 <__assert_fail@plt+0x17908>
   28f9c:	tst	r8, #524288	; 0x80000
   28fa0:	bne	28f30 <__assert_fail@plt+0x17d04>
   28fa4:	mov	r3, #12
   28fa8:	mov	r2, #256	; 0x100
   28fac:	mov	r0, #2
   28fb0:	str	r2, [r6]
   28fb4:	strb	r3, [r6, #4]
   28fb8:	b	28b34 <__assert_fail@plt+0x17908>
   28fbc:	tst	r8, #524288	; 0x80000
   28fc0:	bne	28f30 <__assert_fail@plt+0x17d04>
   28fc4:	mov	r3, #12
   28fc8:	mov	r2, #64	; 0x40
   28fcc:	mov	r0, #2
   28fd0:	str	r2, [r6]
   28fd4:	strb	r3, [r6, #4]
   28fd8:	b	28b34 <__assert_fail@plt+0x17908>
   28fdc:	tst	r8, #524288	; 0x80000
   28fe0:	bne	28f30 <__assert_fail@plt+0x17d04>
   28fe4:	mov	r3, #33	; 0x21
   28fe8:	mov	r0, #2
   28fec:	strb	r3, [r6, #4]
   28ff0:	b	28b34 <__assert_fail@plt+0x17908>
   28ff4:	tst	r8, #524288	; 0x80000
   28ff8:	bne	28f30 <__assert_fail@plt+0x17d04>
   28ffc:	mov	r3, #35	; 0x23
   29000:	mov	r0, #2
   29004:	strb	r3, [r6, #4]
   29008:	b	28b34 <__assert_fail@plt+0x17908>
   2900c:	tst	r8, #524288	; 0x80000
   29010:	bne	28f30 <__assert_fail@plt+0x17d04>
   29014:	mov	r3, #12
   29018:	mov	r2, #512	; 0x200
   2901c:	mov	r0, #2
   29020:	str	r2, [r6]
   29024:	strb	r3, [r6, #4]
   29028:	b	28b34 <__assert_fail@plt+0x17908>
   2902c:	movw	r2, #1026	; 0x402
   29030:	and	r2, r2, r8
   29034:	cmp	r2, #2
   29038:	moveq	r3, #19
   2903c:	moveq	r0, r2
   29040:	strbeq	r3, [r6, #4]
   29044:	bne	28f30 <__assert_fail@plt+0x17d04>
   29048:	b	28b34 <__assert_fail@plt+0x17908>
   2904c:	tst	r8, #524288	; 0x80000
   29050:	bne	28f30 <__assert_fail@plt+0x17d04>
   29054:	mov	r3, #12
   29058:	mov	r2, #9
   2905c:	mov	r0, #2
   29060:	str	r2, [r6]
   29064:	strb	r3, [r6, #4]
   29068:	b	28b34 <__assert_fail@plt+0x17908>
   2906c:	tst	r8, #524288	; 0x80000
   29070:	bne	28f30 <__assert_fail@plt+0x17d04>
   29074:	mov	r3, #12
   29078:	mov	r2, #6
   2907c:	mov	r0, #2
   29080:	str	r2, [r6]
   29084:	strb	r3, [r6, #4]
   29088:	b	28b34 <__assert_fail@plt+0x17908>
   2908c:	tst	r8, #16384	; 0x4000
   29090:	bne	28f30 <__assert_fail@plt+0x17d04>
   29094:	sub	r7, r7, #49	; 0x31
   29098:	mov	r3, #4
   2909c:	mov	r0, #2
   290a0:	str	r7, [r6]
   290a4:	strb	r3, [r6, #4]
   290a8:	b	28b34 <__assert_fail@plt+0x17908>
   290ac:	movw	r2, #1026	; 0x402
   290b0:	and	r2, r2, r8
   290b4:	cmp	r2, #2
   290b8:	moveq	r3, #18
   290bc:	moveq	r0, r2
   290c0:	strbeq	r3, [r6, #4]
   290c4:	bne	28f30 <__assert_fail@plt+0x17d04>
   290c8:	b	28b34 <__assert_fail@plt+0x17908>
   290cc:	tst	r8, #8192	; 0x2000
   290d0:	bne	28f30 <__assert_fail@plt+0x17d04>
   290d4:	mov	r3, #9
   290d8:	mov	r0, #2
   290dc:	strb	r3, [r6, #4]
   290e0:	b	28b34 <__assert_fail@plt+0x17908>
   290e4:	tst	r8, #524288	; 0x80000
   290e8:	bne	28f30 <__assert_fail@plt+0x17d04>
   290ec:	mov	r3, #12
   290f0:	mov	r2, #128	; 0x80
   290f4:	mov	r0, #2
   290f8:	str	r2, [r6]
   290fc:	strb	r3, [r6, #4]
   29100:	b	28b34 <__assert_fail@plt+0x17908>
   29104:	tst	r8, #8192	; 0x2000
   29108:	bne	28f30 <__assert_fail@plt+0x17d04>
   2910c:	mov	r3, #8
   29110:	mov	r0, #2
   29114:	strb	r3, [r6, #4]
   29118:	b	28b34 <__assert_fail@plt+0x17908>
   2911c:	cmp	r2, #1
   29120:	ble	29154 <__assert_fail@plt+0x17f28>
   29124:	ldr	r1, [r5, #8]
   29128:	ldr	r0, [r1, r3, lsl #2]
   2912c:	add	r1, r1, r3, lsl #2
   29130:	cmn	r0, #1
   29134:	beq	29190 <__assert_fail@plt+0x17f64>
   29138:	ldr	r0, [r5, #28]
   2913c:	add	r7, r7, #2
   29140:	cmp	r0, r7
   29144:	beq	29154 <__assert_fail@plt+0x17f28>
   29148:	ldr	r0, [r1, #4]
   2914c:	cmn	r0, #1
   29150:	beq	29190 <__assert_fail@plt+0x17f64>
   29154:	ldrb	r0, [r5, #76]	; 0x4c
   29158:	ldr	r1, [r5]
   2915c:	ldr	ip, [r5, #24]
   29160:	cmp	r0, #0
   29164:	beq	29184 <__assert_fail@plt+0x17f58>
   29168:	ldr	r0, [r5, #12]
   2916c:	add	r1, r1, ip
   29170:	ldr	r0, [r0, r3, lsl #2]
   29174:	ldrb	r7, [r1, r0]
   29178:	tst	r7, #128	; 0x80
   2917c:	beq	28bbc <__assert_fail@plt+0x17990>
   29180:	b	28bb8 <__assert_fail@plt+0x1798c>
   29184:	add	r1, r1, r3
   29188:	ldrb	r7, [r1, ip]
   2918c:	b	28bbc <__assert_fail@plt+0x17990>
   29190:	ldrb	r7, [sl, r3]
   29194:	mov	r3, #1
   29198:	strb	r7, [r6]
   2919c:	strb	r3, [r6, #4]
   291a0:	b	28bd8 <__assert_fail@plt+0x179ac>
   291a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   291a8:	mov	r5, r0
   291ac:	mov	r4, r1
   291b0:	strd	r6, [sp, #8]
   291b4:	mov	r7, r2
   291b8:	mvn	r6, #0
   291bc:	str	r8, [sp, #16]
   291c0:	movw	r8, #32816	; 0x8030
   291c4:	str	lr, [sp, #20]
   291c8:	mov	r2, r7
   291cc:	mov	r1, r5
   291d0:	mov	r0, r4
   291d4:	bl	28838 <__assert_fail@plt+0x1760c>
   291d8:	ldr	r3, [r5, #40]	; 0x28
   291dc:	ldrb	r2, [r4, #4]
   291e0:	ldrb	r1, [r4]
   291e4:	add	r0, r3, r0
   291e8:	cmp	r2, #2
   291ec:	str	r0, [r5, #40]	; 0x28
   291f0:	beq	29258 <__assert_fail@plt+0x1802c>
   291f4:	cmp	r1, #44	; 0x2c
   291f8:	cmpne	r2, #24
   291fc:	beq	2925c <__assert_fail@plt+0x18030>
   29200:	cmp	r2, #1
   29204:	beq	29210 <__assert_fail@plt+0x17fe4>
   29208:	mvn	r6, #1
   2920c:	b	291c8 <__assert_fail@plt+0x17f9c>
   29210:	sub	r2, r1, #48	; 0x30
   29214:	uxtb	r0, r2
   29218:	cmp	r0, #9
   2921c:	movhi	r3, #0
   29220:	movls	r3, #1
   29224:	cmn	r6, #2
   29228:	moveq	r3, #0
   2922c:	cmp	r3, #0
   29230:	beq	29208 <__assert_fail@plt+0x17fdc>
   29234:	cmn	r6, #1
   29238:	add	r3, r6, r6, lsl #2
   2923c:	moveq	r6, r2
   29240:	beq	291c8 <__assert_fail@plt+0x17f9c>
   29244:	add	r6, r1, r3, lsl #1
   29248:	cmp	r6, r8
   2924c:	movge	r6, r8
   29250:	sub	r6, r6, #48	; 0x30
   29254:	b	291c8 <__assert_fail@plt+0x17f9c>
   29258:	mvn	r6, #1
   2925c:	mov	r0, r6
   29260:	ldrd	r4, [sp]
   29264:	ldrd	r6, [sp, #8]
   29268:	ldr	r8, [sp, #16]
   2926c:	add	sp, sp, #20
   29270:	pop	{pc}		; (ldr pc, [sp], #4)
   29274:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29278:	mov	r4, r1
   2927c:	ldr	r5, [r1, #40]	; 0x28
   29280:	strd	r6, [sp, #8]
   29284:	mov	r6, r0
   29288:	strd	r8, [sp, #16]
   2928c:	mov	r8, r2
   29290:	mov	r9, r3
   29294:	ldr	r2, [r1, #80]	; 0x50
   29298:	strd	sl, [sp, #24]
   2929c:	str	lr, [sp, #32]
   292a0:	sub	sp, sp, #12
   292a4:	ldrb	r7, [sp, #52]	; 0x34
   292a8:	cmp	r2, #1
   292ac:	beq	292c4 <__assert_fail@plt+0x18098>
   292b0:	mov	r1, r5
   292b4:	mov	r0, r4
   292b8:	bl	20568 <__assert_fail@plt+0xf33c>
   292bc:	cmp	r0, #1
   292c0:	bgt	29324 <__assert_fail@plt+0x180f8>
   292c4:	ldrb	r2, [r8, #4]
   292c8:	add	r5, r5, r9
   292cc:	str	r5, [r4, #40]	; 0x28
   292d0:	and	r3, r2, #251	; 0xfb
   292d4:	cmp	r2, #28
   292d8:	cmpne	r3, #26
   292dc:	beq	29344 <__assert_fail@plt+0x18118>
   292e0:	cmp	r2, #22
   292e4:	moveq	r2, r7
   292e8:	orrne	r2, r7, #1
   292ec:	cmp	r2, #0
   292f0:	beq	2948c <__assert_fail@plt+0x18260>
   292f4:	ldrb	r2, [r8]
   292f8:	mov	r3, #0
   292fc:	mov	r0, r3
   29300:	str	r3, [r6]
   29304:	strb	r2, [r6, #4]
   29308:	add	sp, sp, #12
   2930c:	ldrd	r4, [sp]
   29310:	ldrd	r6, [sp, #8]
   29314:	ldrd	r8, [sp, #16]
   29318:	ldrd	sl, [sp, #24]
   2931c:	add	sp, sp, #32
   29320:	pop	{pc}		; (ldr pc, [sp], #4)
   29324:	ldr	r2, [r4, #8]
   29328:	add	r3, r5, r0
   2932c:	mov	r1, #1
   29330:	mov	r0, #0
   29334:	ldr	r2, [r2, r5, lsl #2]
   29338:	stm	r6, {r1, r2}
   2933c:	str	r3, [r4, #40]	; 0x28
   29340:	b	29308 <__assert_fail@plt+0x180dc>
   29344:	ldr	sl, [r4, #56]	; 0x38
   29348:	cmp	r5, sl
   2934c:	bge	293ec <__assert_fail@plt+0x181c0>
   29350:	ldrb	fp, [r8]
   29354:	mov	r9, #0
   29358:	b	2937c <__assert_fail@plt+0x18150>
   2935c:	ldr	r3, [r6, #4]
   29360:	strb	r7, [r3, r9]
   29364:	add	r9, r9, #1
   29368:	cmp	r9, #32
   2936c:	beq	293ec <__assert_fail@plt+0x181c0>
   29370:	ldrb	r2, [r8, #4]
   29374:	ldr	r5, [r4, #40]	; 0x28
   29378:	ldr	sl, [r4, #56]	; 0x38
   2937c:	cmp	r2, #30
   29380:	beq	293f4 <__assert_fail@plt+0x181c8>
   29384:	ldr	r2, [r4, #4]
   29388:	add	r3, r5, #1
   2938c:	str	r3, [r4, #40]	; 0x28
   29390:	ldrb	r7, [r2, r5]
   29394:	cmp	sl, r3
   29398:	ble	293ec <__assert_fail@plt+0x181c0>
   2939c:	cmp	fp, r7
   293a0:	bne	2935c <__assert_fail@plt+0x18130>
   293a4:	ldr	r2, [r4, #4]
   293a8:	ldrb	r2, [r2, r3]
   293ac:	cmp	r2, #93	; 0x5d
   293b0:	bne	2935c <__assert_fail@plt+0x18130>
   293b4:	ldr	r2, [r6, #4]
   293b8:	add	r3, r3, #1
   293bc:	mov	r0, #0
   293c0:	str	r3, [r4, #40]	; 0x28
   293c4:	strb	r0, [r2, r9]
   293c8:	ldrb	r3, [r8, #4]
   293cc:	cmp	r3, #28
   293d0:	beq	294bc <__assert_fail@plt+0x18290>
   293d4:	cmp	r3, #30
   293d8:	beq	294b0 <__assert_fail@plt+0x18284>
   293dc:	cmp	r3, #26
   293e0:	moveq	r3, #3
   293e4:	streq	r3, [r6]
   293e8:	b	29308 <__assert_fail@plt+0x180dc>
   293ec:	mov	r0, #7
   293f0:	b	29308 <__assert_fail@plt+0x180dc>
   293f4:	ldrb	r3, [r4, #75]	; 0x4b
   293f8:	cmp	r3, #0
   293fc:	beq	29384 <__assert_fail@plt+0x18158>
   29400:	ldrb	r3, [r4, #76]	; 0x4c
   29404:	cmp	r3, #0
   29408:	beq	29470 <__assert_fail@plt+0x18244>
   2940c:	ldr	r3, [r4, #28]
   29410:	lsl	r2, r5, #2
   29414:	cmp	r5, r3
   29418:	beq	2942c <__assert_fail@plt+0x18200>
   2941c:	ldr	r3, [r4, #8]
   29420:	ldr	r3, [r3, r5, lsl #2]
   29424:	cmn	r3, #1
   29428:	beq	29384 <__assert_fail@plt+0x18158>
   2942c:	ldr	r3, [r4]
   29430:	ldr	r1, [r4, #12]
   29434:	ldr	r1, [r1, r2]
   29438:	ldr	r2, [r4, #24]
   2943c:	add	r3, r3, r1
   29440:	ldrb	r7, [r3, r2]
   29444:	tst	r7, #128	; 0x80
   29448:	bne	29384 <__assert_fail@plt+0x18158>
   2944c:	ldr	r0, [r4, #80]	; 0x50
   29450:	cmp	r0, #1
   29454:	beq	29464 <__assert_fail@plt+0x18238>
   29458:	mov	r1, r5
   2945c:	mov	r0, r4
   29460:	bl	20568 <__assert_fail@plt+0xf33c>
   29464:	add	r3, r5, r0
   29468:	str	r3, [r4, #40]	; 0x28
   2946c:	b	29394 <__assert_fail@plt+0x18168>
   29470:	ldr	r2, [r4]
   29474:	add	r3, r5, #1
   29478:	ldr	r1, [r4, #24]
   2947c:	str	r3, [r4, #40]	; 0x28
   29480:	add	r5, r2, r5
   29484:	ldrb	r7, [r5, r1]
   29488:	b	29394 <__assert_fail@plt+0x18168>
   2948c:	mov	r1, r4
   29490:	mov	r0, sp
   29494:	ldr	r2, [sp, #48]	; 0x30
   29498:	bl	1e9bc <__assert_fail@plt+0xd790>
   2949c:	ldrb	r3, [sp, #4]
   294a0:	cmp	r3, #21
   294a4:	movne	r0, #11
   294a8:	beq	292f4 <__assert_fail@plt+0x180c8>
   294ac:	b	29308 <__assert_fail@plt+0x180dc>
   294b0:	mov	r3, #4
   294b4:	str	r3, [r6]
   294b8:	b	29308 <__assert_fail@plt+0x180dc>
   294bc:	mov	r3, #2
   294c0:	str	r3, [r6]
   294c4:	b	29308 <__assert_fail@plt+0x180dc>
   294c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   294cc:	mov	r5, r1
   294d0:	strd	r6, [sp, #8]
   294d4:	strd	r8, [sp, #16]
   294d8:	strd	sl, [sp, #24]
   294dc:	mov	fp, r2
   294e0:	mov	sl, r0
   294e4:	str	lr, [sp, #32]
   294e8:	sub	sp, sp, #164	; 0xa4
   294ec:	ldrb	r2, [r2, #4]
   294f0:	str	r3, [sp, #20]
   294f4:	ldr	r3, [r1]
   294f8:	str	r3, [sp, #32]
   294fc:	sub	r3, r2, #1
   29500:	cmp	r3, #35	; 0x23
   29504:	ldrls	pc, [pc, r3, lsl #2]
   29508:	b	2a058 <__assert_fail@plt+0x18e2c>
   2950c:	ldrdeq	r9, [r2], -r0
   29510:	strdeq	r9, [r2], -ip
   29514:	andeq	sl, r2, r8, asr r0
   29518:	andeq	sl, r2, r0, ror r0
   2951c:	ldrdeq	sl, [r2], -ip
   29520:	andeq	sl, r2, r8, asr r0
   29524:	andeq	sl, r2, r8, asr r0
   29528:	andeq	r9, r2, r8, asr r8
   2952c:	andeq	sl, r2, r0, lsr #2
   29530:	strdeq	r9, [r2], -ip
   29534:	andeq	r9, r2, r8, lsr #11
   29538:	andeq	r9, r2, ip, asr ip
   2953c:	andeq	sl, r2, r8, asr r0
   29540:	andeq	sl, r2, r8, asr r0
   29544:	andeq	sl, r2, r8, asr r0
   29548:	andeq	sl, r2, r8, asr r0
   2954c:	andeq	sl, r2, r8, asr r0
   29550:	andeq	r9, r2, r8, lsr #11
   29554:	andeq	r9, r2, r8, lsr #11
   29558:	andeq	r9, r2, r8, lsr #27
   2955c:	andeq	sl, r2, r8, asr r0
   29560:	andeq	sl, r2, r8, asr r0
   29564:	muleq	r2, ip, r5
   29568:	andeq	r9, r2, r4, asr #11
   2956c:	andeq	sl, r2, r8, asr r0
   29570:	andeq	sl, r2, r8, asr r0
   29574:	andeq	sl, r2, r8, asr r0
   29578:	andeq	sl, r2, r8, asr r0
   2957c:	andeq	sl, r2, r8, asr r0
   29580:	andeq	sl, r2, r8, asr r0
   29584:	andeq	sl, r2, r8, asr r0
   29588:	ldrdeq	r9, [r2], -ip
   2958c:	ldrdeq	r9, [r2], -ip
   29590:	andeq	sl, r2, r8, lsr r0
   29594:	andeq	sl, r2, r8, lsr r0
   29598:	andeq	sl, r2, r8, asr r0
   2959c:	ldr	r3, [sp, #20]
   295a0:	tst	r3, #16777216	; 0x1000000
   295a4:	bne	29824 <__assert_fail@plt+0x185f8>
   295a8:	ldr	r3, [sp, #20]
   295ac:	tst	r3, #32
   295b0:	bne	29824 <__assert_fail@plt+0x185f8>
   295b4:	tst	r3, #16
   295b8:	bne	2a338 <__assert_fail@plt+0x1910c>
   295bc:	cmp	r2, #9
   295c0:	beq	2a120 <__assert_fail@plt+0x18ef4>
   295c4:	ldr	ip, [sp, #32]
   295c8:	mov	r0, #1
   295cc:	mov	r3, #0
   295d0:	mov	r2, r3
   295d4:	str	fp, [sp]
   295d8:	strb	r0, [fp, #4]
   295dc:	add	r1, ip, #64	; 0x40
   295e0:	add	r0, ip, #56	; 0x38
   295e4:	bl	20d30 <__assert_fail@plt+0xfb04>
   295e8:	subs	r3, r0, #0
   295ec:	str	r3, [sp, #24]
   295f0:	beq	29fc4 <__assert_fail@plt+0x18d98>
   295f4:	mov	r1, sl
   295f8:	mov	r0, fp
   295fc:	ldr	r2, [sp, #20]
   29600:	bl	28838 <__assert_fail@plt+0x1760c>
   29604:	ldr	r3, [sl, #40]	; 0x28
   29608:	ldrb	r5, [fp, #4]
   2960c:	add	r0, r3, r0
   29610:	str	r0, [sl, #40]	; 0x28
   29614:	cmp	r5, #23
   29618:	cmpne	r5, #11
   2961c:	sub	r2, r5, #18
   29620:	moveq	r3, #1
   29624:	movne	r3, #0
   29628:	cmp	r2, #1
   2962c:	orrls	r3, r3, #1
   29630:	sub	r4, r5, #18
   29634:	clz	r4, r4
   29638:	cmp	r3, #0
   2963c:	lsr	r4, r4, #5
   29640:	beq	29838 <__assert_fail@plt+0x1860c>
   29644:	ldrd	r2, [fp]
   29648:	cmp	r5, #23
   2964c:	add	r7, sp, #96	; 0x60
   29650:	ldr	r6, [sl, #40]	; 0x28
   29654:	strd	r2, [sp, #96]	; 0x60
   29658:	beq	29a4c <__assert_fail@plt+0x18820>
   2965c:	cmp	r5, #19
   29660:	beq	299cc <__assert_fail@plt+0x187a0>
   29664:	mov	r1, sl
   29668:	mov	r0, fp
   2966c:	ldr	r2, [sp, #20]
   29670:	bl	28838 <__assert_fail@plt+0x1760c>
   29674:	ldr	r3, [sl, #40]	; 0x28
   29678:	ldr	r2, [sp, #24]
   2967c:	add	r0, r3, r0
   29680:	cmp	r2, #0
   29684:	str	r0, [sl, #40]	; 0x28
   29688:	beq	29ac4 <__assert_fail@plt+0x18898>
   2968c:	cmp	r5, #18
   29690:	beq	29c1c <__assert_fail@plt+0x189f0>
   29694:	ldr	r6, [sp, #24]
   29698:	ldrb	r3, [r6, #24]
   2969c:	cmp	r3, #17
   296a0:	beq	29a18 <__assert_fail@plt+0x187ec>
   296a4:	mov	r4, #0
   296a8:	mvn	r9, #0
   296ac:	str	r4, [sp, #36]	; 0x24
   296b0:	mov	r3, #11
   296b4:	ldr	r2, [sp, #32]
   296b8:	mov	r0, #0
   296bc:	mov	r1, #0
   296c0:	add	r5, sp, #128	; 0x80
   296c4:	str	r5, [sp]
   296c8:	strd	r0, [sp, #128]	; 0x80
   296cc:	add	r7, r2, #56	; 0x38
   296d0:	add	r8, r2, #64	; 0x40
   296d4:	strb	r3, [sp, #132]	; 0x84
   296d8:	mov	r2, r6
   296dc:	mov	r0, r7
   296e0:	mov	r1, r8
   296e4:	mov	r3, #0
   296e8:	bl	20d30 <__assert_fail@plt+0xfb04>
   296ec:	subs	r2, r0, #0
   296f0:	beq	299a0 <__assert_fail@plt+0x18774>
   296f4:	add	r4, r4, #2
   296f8:	cmp	r4, r9
   296fc:	bgt	2979c <__assert_fail@plt+0x18570>
   29700:	strd	sl, [sp, #40]	; 0x28
   29704:	mov	sl, r2
   29708:	mov	r0, r6
   2970c:	ldr	r1, [sp, #32]
   29710:	mov	fp, #0
   29714:	bl	20e00 <__assert_fail@plt+0xfbd4>
   29718:	mov	r2, sl
   2971c:	mov	sl, #0
   29720:	str	r5, [sp]
   29724:	mov	ip, #16
   29728:	mov	r3, r0
   2972c:	mov	r6, r0
   29730:	mov	r1, r8
   29734:	strd	sl, [r5]
   29738:	mov	r0, r7
   2973c:	strb	ip, [sp, #132]	; 0x84
   29740:	add	r4, r4, #1
   29744:	bl	20d30 <__assert_fail@plt+0xfb04>
   29748:	clz	r3, r0
   2974c:	cmp	r6, #0
   29750:	lsr	r3, r3, #5
   29754:	moveq	ip, #1
   29758:	mov	r2, r0
   2975c:	mov	r1, r8
   29760:	mov	r0, r7
   29764:	movne	ip, r3
   29768:	subs	r3, ip, #0
   2976c:	bne	299a0 <__assert_fail@plt+0x18774>
   29770:	mov	ip, #10
   29774:	str	r5, [sp]
   29778:	strd	sl, [r5]
   2977c:	strb	ip, [sp, #132]	; 0x84
   29780:	bl	20d30 <__assert_fail@plt+0xfb04>
   29784:	subs	sl, r0, #0
   29788:	beq	299a0 <__assert_fail@plt+0x18774>
   2978c:	cmp	r4, r9
   29790:	ble	29708 <__assert_fail@plt+0x184dc>
   29794:	mov	r2, sl
   29798:	ldrd	sl, [sp, #40]	; 0x28
   2979c:	ldr	r1, [sp, #36]	; 0x24
   297a0:	cmp	r1, #0
   297a4:	beq	29c14 <__assert_fail@plt+0x189e8>
   297a8:	mov	r3, r2
   297ac:	mov	r9, #0
   297b0:	str	r5, [sp]
   297b4:	mov	r2, r1
   297b8:	mov	r1, r8
   297bc:	mov	r8, #0
   297c0:	mov	ip, #16
   297c4:	mov	r0, r7
   297c8:	strd	r8, [r5]
   297cc:	strb	ip, [sp, #132]	; 0x84
   297d0:	bl	20d30 <__assert_fail@plt+0xfb04>
   297d4:	ldr	r3, [sp, #204]	; 0xcc
   297d8:	ldr	r3, [r3]
   297dc:	cmp	r3, #0
   297e0:	bne	29ab8 <__assert_fail@plt+0x1888c>
   297e4:	str	r0, [sp, #24]
   297e8:	ldr	r3, [sp, #20]
   297ec:	ldrb	r5, [fp, #4]
   297f0:	tst	r3, #16777216	; 0x1000000
   297f4:	beq	29614 <__assert_fail@plt+0x183e8>
   297f8:	cmp	r5, #11
   297fc:	cmpne	r5, #23
   29800:	bne	29614 <__assert_fail@plt+0x183e8>
   29804:	ldr	r3, [sp, #24]
   29808:	cmp	r3, #0
   2980c:	beq	29824 <__assert_fail@plt+0x185f8>
   29810:	movw	r1, #64012	; 0xfa0c
   29814:	movt	r1, #1
   29818:	mov	r0, r3
   2981c:	mov	r2, #0
   29820:	bl	1e928 <__assert_fail@plt+0xd6fc>
   29824:	mov	r2, #0
   29828:	mov	r3, #13
   2982c:	str	r2, [sp, #24]
   29830:	ldr	r2, [sp, #204]	; 0xcc
   29834:	str	r3, [r2]
   29838:	ldr	r0, [sp, #24]
   2983c:	add	sp, sp, #164	; 0xa4
   29840:	ldrd	r4, [sp]
   29844:	ldrd	r6, [sp, #8]
   29848:	ldrd	r8, [sp, #16]
   2984c:	ldrd	sl, [sp, #24]
   29850:	add	sp, sp, #32
   29854:	pop	{pc}		; (ldr pc, [sp], #4)
   29858:	ldr	r4, [r5, #24]
   2985c:	mov	r1, r0
   29860:	mov	r0, fp
   29864:	ldr	r6, [sp, #20]
   29868:	add	r3, r4, #1
   2986c:	orr	r2, r6, #8388608	; 0x800000
   29870:	str	r3, [r5, #24]
   29874:	bl	28838 <__assert_fail@plt+0x1760c>
   29878:	ldr	r3, [sl, #40]	; 0x28
   2987c:	ldrb	r2, [fp, #4]
   29880:	add	r3, r3, r0
   29884:	cmp	r2, #9
   29888:	str	r3, [sl, #40]	; 0x28
   2988c:	moveq	r2, #0
   29890:	beq	2a140 <__assert_fail@plt+0x18f14>
   29894:	ldr	r3, [sp, #200]	; 0xc8
   29898:	mov	r2, fp
   2989c:	mov	r1, r5
   298a0:	add	r0, r3, #1
   298a4:	ldr	r3, [sp, #204]	; 0xcc
   298a8:	stm	sp, {r0, r3}
   298ac:	mov	r3, r6
   298b0:	mov	r0, sl
   298b4:	bl	2ac0c <__assert_fail@plt+0x199e0>
   298b8:	ldr	r3, [sp, #204]	; 0xcc
   298bc:	mov	r2, r0
   298c0:	ldr	r3, [r3]
   298c4:	cmp	r3, #0
   298c8:	bne	298fc <__assert_fail@plt+0x186d0>
   298cc:	ldrb	r1, [fp, #4]
   298d0:	cmp	r1, #9
   298d4:	beq	2a140 <__assert_fail@plt+0x18f14>
   298d8:	cmp	r0, #0
   298dc:	beq	298f0 <__assert_fail@plt+0x186c4>
   298e0:	movw	r1, #64012	; 0xfa0c
   298e4:	movt	r1, #1
   298e8:	mov	r2, r3
   298ec:	bl	1e928 <__assert_fail@plt+0xd6fc>
   298f0:	ldr	r2, [sp, #204]	; 0xcc
   298f4:	mov	r3, #8
   298f8:	str	r3, [r2]
   298fc:	mov	r3, #0
   29900:	str	r3, [sp, #24]
   29904:	b	29838 <__assert_fail@plt+0x1860c>
   29908:	cmp	r4, #0
   2990c:	ble	2aa18 <__assert_fail@plt+0x197ec>
   29910:	cmp	r4, #1
   29914:	beq	2a9b4 <__assert_fail@plt+0x19788>
   29918:	ldr	r6, [sp, #24]
   2991c:	mov	r7, #2
   29920:	add	r5, sp, #128	; 0x80
   29924:	str	r9, [sp, #36]	; 0x24
   29928:	ldr	r3, [sp, #32]
   2992c:	strd	sl, [sp, #40]	; 0x28
   29930:	mov	r9, r6
   29934:	add	r1, r3, #56	; 0x38
   29938:	add	r3, r3, #64	; 0x40
   2993c:	mov	sl, r3
   29940:	mov	fp, r1
   29944:	b	29950 <__assert_fail@plt+0x18724>
   29948:	cmp	r7, r4
   2994c:	bgt	29c00 <__assert_fail@plt+0x189d4>
   29950:	mov	r0, r6
   29954:	ldr	r1, [sp, #32]
   29958:	mov	r8, #0
   2995c:	bl	20e00 <__assert_fail@plt+0xfbd4>
   29960:	mov	r2, r9
   29964:	mov	r9, #0
   29968:	str	r5, [sp]
   2996c:	mov	ip, #16
   29970:	mov	r6, r0
   29974:	mov	r3, r0
   29978:	mov	r1, sl
   2997c:	strd	r8, [r5]
   29980:	mov	r0, fp
   29984:	strb	ip, [sp, #132]	; 0x84
   29988:	add	r7, r7, #1
   2998c:	bl	20d30 <__assert_fail@plt+0xfb04>
   29990:	cmp	r0, #0
   29994:	cmpne	r6, #0
   29998:	mov	r9, r0
   2999c:	bne	29948 <__assert_fail@plt+0x1871c>
   299a0:	ldr	r2, [sp, #204]	; 0xcc
   299a4:	mov	r3, #12
   299a8:	str	r3, [r2]
   299ac:	movw	r1, #64012	; 0xfa0c
   299b0:	movt	r1, #1
   299b4:	ldr	r0, [sp, #24]
   299b8:	mov	r2, #0
   299bc:	bl	1e928 <__assert_fail@plt+0xd6fc>
   299c0:	mov	r3, #0
   299c4:	str	r3, [sp, #24]
   299c8:	b	29838 <__assert_fail@plt+0x1860c>
   299cc:	mov	r1, sl
   299d0:	mov	r0, fp
   299d4:	ldr	r2, [sp, #20]
   299d8:	bl	28838 <__assert_fail@plt+0x1760c>
   299dc:	ldr	r3, [sl, #40]	; 0x28
   299e0:	ldr	r2, [sp, #24]
   299e4:	add	r0, r3, r0
   299e8:	cmp	r2, #0
   299ec:	str	r0, [sl, #40]	; 0x28
   299f0:	beq	29ac4 <__assert_fail@plt+0x18898>
   299f4:	ldr	r6, [sp, #24]
   299f8:	ldrb	r3, [r6, #24]
   299fc:	cmp	r3, #17
   29a00:	beq	2aa48 <__assert_fail@plt+0x1981c>
   29a04:	mov	r3, #0
   29a08:	mov	r9, #1
   29a0c:	str	r3, [sp, #36]	; 0x24
   29a10:	mov	r3, #10
   29a14:	b	296b4 <__assert_fail@plt+0x18488>
   29a18:	ldr	r6, [sp, #24]
   29a1c:	mov	r3, #0
   29a20:	mvn	r9, #0
   29a24:	mov	r4, r3
   29a28:	str	r3, [sp, #36]	; 0x24
   29a2c:	movw	r1, #60264	; 0xeb68
   29a30:	movt	r1, #1
   29a34:	ldr	r2, [r6, #20]
   29a38:	mov	r0, r6
   29a3c:	bl	1e928 <__assert_fail@plt+0xd6fc>
   29a40:	cmn	r9, #1
   29a44:	bne	29a10 <__assert_fail@plt+0x187e4>
   29a48:	b	296b0 <__assert_fail@plt+0x18484>
   29a4c:	mov	r1, fp
   29a50:	mov	r0, sl
   29a54:	ldr	r2, [sp, #20]
   29a58:	bl	291a4 <__assert_fail@plt+0x17f78>
   29a5c:	cmn	r0, #1
   29a60:	mov	r4, r0
   29a64:	beq	29ae0 <__assert_fail@plt+0x188b4>
   29a68:	cmn	r0, #2
   29a6c:	beq	29a84 <__assert_fail@plt+0x18858>
   29a70:	ldrb	r3, [fp, #4]
   29a74:	cmp	r3, #24
   29a78:	beq	29ba4 <__assert_fail@plt+0x18978>
   29a7c:	cmp	r3, #1
   29a80:	beq	29bcc <__assert_fail@plt+0x189a0>
   29a84:	ldr	r3, [sp, #20]
   29a88:	tst	r3, #2097152	; 0x200000
   29a8c:	beq	2a5c0 <__assert_fail@plt+0x19394>
   29a90:	ldrd	r2, [r7]
   29a94:	mov	r1, #1
   29a98:	str	r6, [sl, #40]	; 0x28
   29a9c:	ldr	r0, [sp, #24]
   29aa0:	strd	r2, [fp]
   29aa4:	ldr	r3, [sp, #204]	; 0xcc
   29aa8:	strb	r1, [fp, #4]
   29aac:	ldr	r3, [r3]
   29ab0:	cmp	r3, #0
   29ab4:	beq	297e4 <__assert_fail@plt+0x185b8>
   29ab8:	cmp	r0, #0
   29abc:	bne	297e4 <__assert_fail@plt+0x185b8>
   29ac0:	b	29bf0 <__assert_fail@plt+0x189c4>
   29ac4:	ldr	r3, [sp, #204]	; 0xcc
   29ac8:	ldr	r3, [r3]
   29acc:	cmp	r3, #0
   29ad0:	bne	298fc <__assert_fail@plt+0x186d0>
   29ad4:	mov	r3, #0
   29ad8:	str	r3, [sp, #24]
   29adc:	b	297e8 <__assert_fail@plt+0x185bc>
   29ae0:	ldrb	r3, [fp, #4]
   29ae4:	cmp	r3, #1
   29ae8:	bne	29be4 <__assert_fail@plt+0x189b8>
   29aec:	ldrb	r3, [fp]
   29af0:	cmp	r3, #44	; 0x2c
   29af4:	bne	29be4 <__assert_fail@plt+0x189b8>
   29af8:	mov	r4, #0
   29afc:	mov	r1, fp
   29b00:	mov	r0, sl
   29b04:	ldr	r2, [sp, #20]
   29b08:	bl	291a4 <__assert_fail@plt+0x17f78>
   29b0c:	cmn	r0, #2
   29b10:	mov	r9, r0
   29b14:	beq	29a84 <__assert_fail@plt+0x18858>
   29b18:	cmn	r0, #1
   29b1c:	cmpne	r0, r4
   29b20:	blt	29be4 <__assert_fail@plt+0x189b8>
   29b24:	ldrb	r3, [fp, #4]
   29b28:	cmp	r3, #24
   29b2c:	bne	29be4 <__assert_fail@plt+0x189b8>
   29b30:	cmn	r0, #1
   29b34:	bne	29ba8 <__assert_fail@plt+0x1897c>
   29b38:	cmp	r4, #32768	; 0x8000
   29b3c:	movlt	r5, #0
   29b40:	movge	r5, #1
   29b44:	cmp	r5, #0
   29b48:	bne	29bbc <__assert_fail@plt+0x18990>
   29b4c:	mov	r1, sl
   29b50:	mov	r0, fp
   29b54:	ldr	r2, [sp, #20]
   29b58:	bl	28838 <__assert_fail@plt+0x1760c>
   29b5c:	ldr	r3, [sl, #40]	; 0x28
   29b60:	ldr	ip, [sp, #24]
   29b64:	add	r0, r3, r0
   29b68:	cmp	ip, #0
   29b6c:	str	r0, [sl, #40]	; 0x28
   29b70:	beq	29ac4 <__assert_fail@plt+0x18898>
   29b74:	orrs	r3, r9, r4
   29b78:	bne	29908 <__assert_fail@plt+0x186dc>
   29b7c:	mov	r2, r5
   29b80:	movw	r1, #64012	; 0xfa0c
   29b84:	movt	r1, #1
   29b88:	mov	r0, ip
   29b8c:	bl	1e928 <__assert_fail@plt+0xd6fc>
   29b90:	ldr	r3, [sp, #204]	; 0xcc
   29b94:	ldr	r3, [r3]
   29b98:	cmp	r3, #0
   29b9c:	beq	29ad4 <__assert_fail@plt+0x188a8>
   29ba0:	b	299ac <__assert_fail@plt+0x18780>
   29ba4:	mov	r9, r0
   29ba8:	cmp	r9, #32768	; 0x8000
   29bac:	movlt	r5, #0
   29bb0:	movge	r5, #1
   29bb4:	cmp	r5, #0
   29bb8:	beq	29b4c <__assert_fail@plt+0x18920>
   29bbc:	ldr	r2, [sp, #204]	; 0xcc
   29bc0:	mov	r3, #15
   29bc4:	str	r3, [r2]
   29bc8:	b	29bf0 <__assert_fail@plt+0x189c4>
   29bcc:	ldrb	r3, [fp]
   29bd0:	cmp	r3, #44	; 0x2c
   29bd4:	beq	29afc <__assert_fail@plt+0x188d0>
   29bd8:	ldr	r3, [sp, #20]
   29bdc:	tst	r3, #2097152	; 0x200000
   29be0:	bne	29a90 <__assert_fail@plt+0x18864>
   29be4:	ldr	r2, [sp, #204]	; 0xcc
   29be8:	mov	r3, #10
   29bec:	str	r3, [r2]
   29bf0:	ldr	r3, [sp, #24]
   29bf4:	cmp	r3, #0
   29bf8:	beq	298fc <__assert_fail@plt+0x186d0>
   29bfc:	b	299ac <__assert_fail@plt+0x18780>
   29c00:	add	r9, sp, #36	; 0x24
   29c04:	mov	r2, r0
   29c08:	ldm	r9, {r9, sl, fp}
   29c0c:	cmp	r4, r9
   29c10:	bne	29c2c <__assert_fail@plt+0x18a00>
   29c14:	str	r2, [sp, #24]
   29c18:	b	297e8 <__assert_fail@plt+0x185bc>
   29c1c:	ldr	r2, [sp, #24]
   29c20:	mvn	r9, #0
   29c24:	mov	r4, #1
   29c28:	mov	r6, r2
   29c2c:	mov	r0, r6
   29c30:	ldr	r1, [sp, #32]
   29c34:	str	r2, [sp, #36]	; 0x24
   29c38:	bl	20e00 <__assert_fail@plt+0xfbd4>
   29c3c:	subs	r6, r0, #0
   29c40:	ldr	r2, [sp, #36]	; 0x24
   29c44:	beq	299a0 <__assert_fail@plt+0x18774>
   29c48:	ldrb	r3, [r6, #24]
   29c4c:	str	r2, [sp, #36]	; 0x24
   29c50:	cmp	r3, #17
   29c54:	bne	29a40 <__assert_fail@plt+0x18814>
   29c58:	b	29a2c <__assert_fail@plt+0x18800>
   29c5c:	ldr	r4, [fp]
   29c60:	movw	r3, #783	; 0x30f
   29c64:	tst	r4, r3
   29c68:	beq	29ccc <__assert_fail@plt+0x18aa0>
   29c6c:	ldr	r3, [sp, #32]
   29c70:	ldrb	r3, [r3, #88]	; 0x58
   29c74:	ands	r5, r3, #16
   29c78:	bne	29ccc <__assert_fail@plt+0x18aa0>
   29c7c:	ldr	r0, [sp, #32]
   29c80:	orr	r3, r3, #16
   29c84:	ands	r2, r3, #8
   29c88:	mov	r1, r3
   29c8c:	strb	r3, [r0, #88]	; 0x58
   29c90:	bne	2a948 <__assert_fail@plt+0x1971c>
   29c94:	mov	r3, #0
   29c98:	movt	r3, #1023	; 0x3ff
   29c9c:	tst	r1, #4
   29ca0:	mvn	r1, #2013265921	; 0x78000001
   29ca4:	strd	r2, [r0, #96]	; 0x60
   29ca8:	mvn	r3, #-134217727	; 0xf8000001
   29cac:	str	r1, [r0, #104]	; 0x68
   29cb0:	str	r3, [r0, #108]	; 0x6c
   29cb4:	beq	2a894 <__assert_fail@plt+0x19668>
   29cb8:	str	r2, [r0, #112]	; 0x70
   29cbc:	str	r2, [r0, #116]	; 0x74
   29cc0:	str	r2, [r0, #120]	; 0x78
   29cc4:	str	r2, [r0, #124]	; 0x7c
   29cc8:	ldr	r4, [fp]
   29ccc:	sub	r3, r4, #256	; 0x100
   29cd0:	ldr	r2, [sp, #32]
   29cd4:	bics	r3, r3, #256	; 0x100
   29cd8:	add	r5, r2, #56	; 0x38
   29cdc:	add	r6, r2, #64	; 0x40
   29ce0:	bne	2a2a4 <__assert_fail@plt+0x19078>
   29ce4:	cmp	r4, #256	; 0x100
   29ce8:	beq	2a398 <__assert_fail@plt+0x1916c>
   29cec:	mov	r0, #5
   29cf0:	mov	r2, r3
   29cf4:	str	fp, [sp]
   29cf8:	mov	r1, r6
   29cfc:	str	r0, [fp]
   29d00:	mov	r0, r5
   29d04:	bl	20d30 <__assert_fail@plt+0xfb04>
   29d08:	mov	r7, r0
   29d0c:	mov	r3, #10
   29d10:	str	r3, [fp]
   29d14:	mov	r3, #0
   29d18:	mov	r1, r6
   29d1c:	str	fp, [sp]
   29d20:	mov	r2, r3
   29d24:	mov	r0, r5
   29d28:	bl	20d30 <__assert_fail@plt+0xfb04>
   29d2c:	add	r3, sp, #128	; 0x80
   29d30:	mov	r4, r0
   29d34:	mov	ip, #10
   29d38:	mov	r8, #0
   29d3c:	mov	r9, #0
   29d40:	mov	r1, r6
   29d44:	str	r3, [sp]
   29d48:	mov	r0, r5
   29d4c:	mov	r3, r4
   29d50:	mov	r2, r7
   29d54:	clz	r4, r4
   29d58:	strd	r8, [sp, #128]	; 0x80
   29d5c:	lsr	r4, r4, #5
   29d60:	strb	ip, [sp, #132]	; 0x84
   29d64:	bl	20d30 <__assert_fail@plt+0xfb04>
   29d68:	cmp	r7, #0
   29d6c:	str	r0, [sp, #24]
   29d70:	moveq	r4, #1
   29d74:	cmp	r0, #0
   29d78:	movne	r3, r4
   29d7c:	moveq	r3, #1
   29d80:	cmp	r3, #0
   29d84:	bne	29fc4 <__assert_fail@plt+0x18d98>
   29d88:	mov	r0, fp
   29d8c:	mov	r1, sl
   29d90:	ldr	r2, [sp, #20]
   29d94:	bl	28838 <__assert_fail@plt+0x1760c>
   29d98:	ldr	r3, [sl, #40]	; 0x28
   29d9c:	add	r3, r3, r0
   29da0:	str	r3, [sl, #40]	; 0x28
   29da4:	b	29838 <__assert_fail@plt+0x1860c>
   29da8:	mov	r5, #0
   29dac:	mov	r1, #1
   29db0:	mov	r0, #32
   29db4:	str	r5, [sp, #68]	; 0x44
   29db8:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   29dbc:	mov	r8, r0
   29dc0:	mov	r1, #1
   29dc4:	mov	r0, #40	; 0x28
   29dc8:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   29dcc:	clz	r4, r0
   29dd0:	cmp	r8, r5
   29dd4:	lsr	r4, r4, #5
   29dd8:	moveq	r4, #1
   29ddc:	mov	r9, r0
   29de0:	cmp	r4, r5
   29de4:	bne	2a5dc <__assert_fail@plt+0x193b0>
   29de8:	mov	r1, sl
   29dec:	mov	r0, fp
   29df0:	ldr	r2, [sp, #20]
   29df4:	bl	1e9bc <__assert_fail@plt+0xd790>
   29df8:	ldrb	r3, [fp, #4]
   29dfc:	mov	r5, r0
   29e00:	cmp	r3, #2
   29e04:	beq	2a5b0 <__assert_fail@plt+0x19384>
   29e08:	cmp	r3, #25
   29e0c:	strne	r4, [sp, #44]	; 0x2c
   29e10:	beq	2a2cc <__assert_fail@plt+0x190a0>
   29e14:	ldr	r7, [sp, #20]
   29e18:	cmp	r3, #21
   29e1c:	mov	r0, #1
   29e20:	moveq	r3, #1
   29e24:	strbeq	r3, [fp, #4]
   29e28:	mov	r3, #0
   29e2c:	ubfx	r2, r7, #16, #1
   29e30:	str	r3, [sp, #24]
   29e34:	str	r3, [sp, #40]	; 0x28
   29e38:	add	r3, sp, #96	; 0x60
   29e3c:	str	r3, [sp, #36]	; 0x24
   29e40:	str	r2, [sp, #48]	; 0x30
   29e44:	mov	ip, #3
   29e48:	mov	r3, r5
   29e4c:	str	r7, [sp]
   29e50:	mov	r2, fp
   29e54:	mov	r1, sl
   29e58:	str	r0, [sp, #4]
   29e5c:	str	ip, [sp, #72]	; 0x48
   29e60:	add	r0, sp, #72	; 0x48
   29e64:	ldr	ip, [sp, #36]	; 0x24
   29e68:	str	ip, [sp, #76]	; 0x4c
   29e6c:	bl	29274 <__assert_fail@plt+0x18048>
   29e70:	cmp	r0, #0
   29e74:	bne	2a384 <__assert_fail@plt+0x19158>
   29e78:	mov	r2, r7
   29e7c:	mov	r1, sl
   29e80:	mov	r0, fp
   29e84:	bl	1e9bc <__assert_fail@plt+0xd790>
   29e88:	ldr	r3, [sp, #72]	; 0x48
   29e8c:	mov	r5, r0
   29e90:	sub	r2, r3, #2
   29e94:	bics	r2, r2, #2
   29e98:	beq	29eb0 <__assert_fail@plt+0x18c84>
   29e9c:	ldrb	r2, [fp, #4]
   29ea0:	cmp	r2, #2
   29ea4:	beq	2a328 <__assert_fail@plt+0x190fc>
   29ea8:	cmp	r2, #22
   29eac:	beq	2a3c4 <__assert_fail@plt+0x19198>
   29eb0:	cmp	r3, #4
   29eb4:	ldrls	pc, [pc, r3, lsl #2]
   29eb8:	b	2a1fc <__assert_fail@plt+0x18fd0>
   29ebc:	ldrdeq	sl, [r2], -ip
   29ec0:	andeq	sl, r2, ip, ror r2
   29ec4:	andeq	sl, r2, ip, asr r2
   29ec8:	andeq	sl, r2, r4, lsr #3
   29ecc:	strdeq	sl, [r2], -ip
   29ed0:	ldr	r3, [sp, #32]
   29ed4:	str	fp, [sp]
   29ed8:	add	r6, r3, #56	; 0x38
   29edc:	add	r5, r3, #64	; 0x40
   29ee0:	mov	r3, #0
   29ee4:	mov	r0, r6
   29ee8:	mov	r2, r3
   29eec:	mov	r1, r5
   29ef0:	bl	20d30 <__assert_fail@plt+0xfb04>
   29ef4:	subs	r3, r0, #0
   29ef8:	str	r3, [sp, #24]
   29efc:	beq	29fc4 <__assert_fail@plt+0x18d98>
   29f00:	ldr	r3, [sp, #32]
   29f04:	ldr	r3, [r3, #92]	; 0x5c
   29f08:	cmp	r3, #1
   29f0c:	ble	295f4 <__assert_fail@plt+0x183c8>
   29f10:	mov	r9, #0
   29f14:	mov	r8, #0
   29f18:	ldr	r4, [sp, #24]
   29f1c:	add	r7, sp, #128	; 0x80
   29f20:	strd	r8, [sp, #24]
   29f24:	mov	r9, r5
   29f28:	ldr	r3, [sl, #40]	; 0x28
   29f2c:	mov	r1, sl
   29f30:	mov	r0, fp
   29f34:	ldr	ip, [sl, #56]	; 0x38
   29f38:	ldr	r2, [sp, #20]
   29f3c:	cmp	ip, r3
   29f40:	ble	2a390 <__assert_fail@plt+0x19164>
   29f44:	ldr	ip, [sl, #28]
   29f48:	cmp	r3, ip
   29f4c:	beq	2a390 <__assert_fail@plt+0x19164>
   29f50:	ldr	ip, [sl, #8]
   29f54:	ldr	r3, [ip, r3, lsl #2]
   29f58:	cmn	r3, #1
   29f5c:	bne	2a390 <__assert_fail@plt+0x19164>
   29f60:	bl	28838 <__assert_fail@plt+0x1760c>
   29f64:	ldr	ip, [sl, #40]	; 0x28
   29f68:	mov	r3, #0
   29f6c:	mov	r1, r9
   29f70:	mov	r2, r3
   29f74:	str	fp, [sp]
   29f78:	add	ip, ip, r0
   29f7c:	mov	r0, r6
   29f80:	str	ip, [sl, #40]	; 0x28
   29f84:	bl	20d30 <__assert_fail@plt+0xfb04>
   29f88:	mov	r5, r0
   29f8c:	mov	r3, r0
   29f90:	ldrd	r0, [sp, #24]
   29f94:	mov	ip, #16
   29f98:	mov	r2, r4
   29f9c:	str	r7, [sp]
   29fa0:	strd	r0, [r7]
   29fa4:	mov	r1, r9
   29fa8:	mov	r0, r6
   29fac:	strb	ip, [sp, #132]	; 0x84
   29fb0:	bl	20d30 <__assert_fail@plt+0xfb04>
   29fb4:	cmp	r0, #0
   29fb8:	cmpne	r5, #0
   29fbc:	mov	r4, r0
   29fc0:	bne	29f28 <__assert_fail@plt+0x18cfc>
   29fc4:	mov	r2, #0
   29fc8:	mov	r3, #12
   29fcc:	str	r2, [sp, #24]
   29fd0:	ldr	r2, [sp, #204]	; 0xcc
   29fd4:	str	r3, [r2]
   29fd8:	b	29838 <__assert_fail@plt+0x1860c>
   29fdc:	sub	r1, r2, #33	; 0x21
   29fe0:	movw	r3, #61880	; 0xf1b8
   29fe4:	movt	r3, #2
   29fe8:	clz	r1, r1
   29fec:	lsr	r1, r1, #5
   29ff0:	movw	r2, #61808	; 0xf170
   29ff4:	movt	r2, #2
   29ff8:	str	r1, [sp]
   29ffc:	ldr	r0, [sp, #32]
   2a000:	ldr	r1, [sp, #204]	; 0xcc
   2a004:	str	r1, [sp, #4]
   2a008:	ldr	r1, [sl, #64]	; 0x40
   2a00c:	bl	24778 <__assert_fail@plt+0x1354c>
   2a010:	ldr	r3, [sp, #204]	; 0xcc
   2a014:	str	r0, [sp, #24]
   2a018:	ldr	r2, [r3]
   2a01c:	clz	r3, r0
   2a020:	lsr	r3, r3, #5
   2a024:	cmp	r2, #0
   2a028:	moveq	r3, #0
   2a02c:	cmp	r3, #0
   2a030:	beq	295f4 <__assert_fail@plt+0x183c8>
   2a034:	b	298fc <__assert_fail@plt+0x186d0>
   2a038:	sub	r1, r2, #35	; 0x23
   2a03c:	movw	r3, #56684	; 0xdd6c
   2a040:	movt	r3, #2
   2a044:	clz	r1, r1
   2a048:	movw	r2, #61824	; 0xf180
   2a04c:	movt	r2, #2
   2a050:	lsr	r1, r1, #5
   2a054:	b	29ff8 <__assert_fail@plt+0x18dcc>
   2a058:	mov	r2, #0
   2a05c:	mov	r3, #5
   2a060:	str	r2, [sp, #24]
   2a064:	ldr	r2, [sp, #204]	; 0xcc
   2a068:	str	r3, [r2]
   2a06c:	b	29838 <__assert_fail@plt+0x1860c>
   2a070:	ldr	r3, [sp, #32]
   2a074:	mov	ip, #1
   2a078:	ldr	r2, [fp]
   2a07c:	ldr	r3, [r3, #84]	; 0x54
   2a080:	lsl	ip, ip, r2
   2a084:	ands	r3, ip, r3
   2a088:	beq	2a600 <__assert_fail@plt+0x193d4>
   2a08c:	ldr	r4, [sp, #32]
   2a090:	mov	r3, #0
   2a094:	mov	r2, r3
   2a098:	ldr	lr, [r4, #80]	; 0x50
   2a09c:	add	r1, r4, #64	; 0x40
   2a0a0:	add	r0, r4, #56	; 0x38
   2a0a4:	orr	ip, lr, ip
   2a0a8:	str	ip, [r4, #80]	; 0x50
   2a0ac:	str	fp, [sp]
   2a0b0:	bl	20d30 <__assert_fail@plt+0xfb04>
   2a0b4:	subs	r3, r0, #0
   2a0b8:	str	r3, [sp, #24]
   2a0bc:	beq	29fc4 <__assert_fail@plt+0x18d98>
   2a0c0:	ldrb	r3, [r4, #88]	; 0x58
   2a0c4:	ldr	r2, [r4, #76]	; 0x4c
   2a0c8:	orr	r3, r3, #2
   2a0cc:	add	r2, r2, #1
   2a0d0:	str	r2, [r4, #76]	; 0x4c
   2a0d4:	strb	r3, [r4, #88]	; 0x58
   2a0d8:	b	295f4 <__assert_fail@plt+0x183c8>
   2a0dc:	ldr	r4, [sp, #32]
   2a0e0:	mov	r3, #0
   2a0e4:	mov	r2, r3
   2a0e8:	str	fp, [sp]
   2a0ec:	add	r1, r4, #64	; 0x40
   2a0f0:	add	r0, r4, #56	; 0x38
   2a0f4:	bl	20d30 <__assert_fail@plt+0xfb04>
   2a0f8:	subs	r3, r0, #0
   2a0fc:	str	r3, [sp, #24]
   2a100:	beq	29fc4 <__assert_fail@plt+0x18d98>
   2a104:	ldr	r3, [r4, #92]	; 0x5c
   2a108:	cmp	r3, #1
   2a10c:	ble	295f4 <__assert_fail@plt+0x183c8>
   2a110:	ldrb	r3, [r4, #88]	; 0x58
   2a114:	orr	r3, r3, #2
   2a118:	strb	r3, [r4, #88]	; 0x58
   2a11c:	b	295f4 <__assert_fail@plt+0x183c8>
   2a120:	ldr	r3, [sp, #20]
   2a124:	ands	r3, r3, #131072	; 0x20000
   2a128:	bne	295c4 <__assert_fail@plt+0x18398>
   2a12c:	str	r3, [sp, #24]
   2a130:	mov	r2, #16
   2a134:	ldr	r3, [sp, #204]	; 0xcc
   2a138:	str	r2, [r3]
   2a13c:	b	29838 <__assert_fail@plt+0x1860c>
   2a140:	cmp	r4, #8
   2a144:	bls	2a18c <__assert_fail@plt+0x18f60>
   2a148:	ldr	r0, [sp, #32]
   2a14c:	add	ip, sp, #128	; 0x80
   2a150:	mov	lr, #17
   2a154:	mov	r6, #0
   2a158:	mov	r7, #0
   2a15c:	mov	r3, #0
   2a160:	str	ip, [sp]
   2a164:	strd	r6, [sp, #128]	; 0x80
   2a168:	strb	lr, [sp, #132]	; 0x84
   2a16c:	add	r1, r0, #64	; 0x40
   2a170:	add	r0, r0, #56	; 0x38
   2a174:	bl	20d30 <__assert_fail@plt+0xfb04>
   2a178:	subs	r3, r0, #0
   2a17c:	str	r3, [sp, #24]
   2a180:	beq	29fc4 <__assert_fail@plt+0x18d98>
   2a184:	str	r4, [r3, #20]
   2a188:	b	295f4 <__assert_fail@plt+0x183c8>
   2a18c:	ldr	r0, [sp, #32]
   2a190:	mov	r1, #1
   2a194:	ldr	r3, [r0, #84]	; 0x54
   2a198:	orr	r3, r3, r1, lsl r4
   2a19c:	str	r3, [r0, #84]	; 0x54
   2a1a0:	b	2a148 <__assert_fail@plt+0x18f1c>
   2a1a4:	mov	r0, r8
   2a1a8:	ldr	r1, [sp, #76]	; 0x4c
   2a1ac:	bl	23ed4 <__assert_fail@plt+0x12ca8>
   2a1b0:	ldr	r3, [sp, #204]	; 0xcc
   2a1b4:	cmp	r0, #0
   2a1b8:	str	r0, [r3]
   2a1bc:	bne	2a234 <__assert_fail@plt+0x19008>
   2a1c0:	ldrb	r3, [fp, #4]
   2a1c4:	cmp	r3, #2
   2a1c8:	beq	2a328 <__assert_fail@plt+0x190fc>
   2a1cc:	cmp	r3, #21
   2a1d0:	beq	2a658 <__assert_fail@plt+0x1942c>
   2a1d4:	mov	r0, #0
   2a1d8:	b	29e44 <__assert_fail@plt+0x18c18>
   2a1dc:	ldrb	r3, [sp, #76]	; 0x4c
   2a1e0:	mov	r0, #1
   2a1e4:	asr	r1, r3, #5
   2a1e8:	and	r3, r3, #31
   2a1ec:	ldr	r2, [r8, r1, lsl #2]
   2a1f0:	orr	r3, r2, r0, lsl r3
   2a1f4:	str	r3, [r8, r1, lsl #2]
   2a1f8:	b	2a1c0 <__assert_fail@plt+0x18f94>
   2a1fc:	ldr	ip, [sp, #76]	; 0x4c
   2a200:	add	r0, sp, #68	; 0x44
   2a204:	add	r3, r9, #36	; 0x24
   2a208:	add	r2, r9, #12
   2a20c:	mov	r1, r8
   2a210:	str	r0, [sp]
   2a214:	str	r7, [sp, #8]
   2a218:	ldr	r0, [sl, #64]	; 0x40
   2a21c:	str	ip, [sp, #4]
   2a220:	bl	23f30 <__assert_fail@plt+0x12d04>
   2a224:	ldr	r3, [sp, #204]	; 0xcc
   2a228:	cmp	r0, #0
   2a22c:	str	r0, [r3]
   2a230:	beq	2a1c0 <__assert_fail@plt+0x18f94>
   2a234:	mov	r0, r8
   2a238:	bl	13254 <__assert_fail@plt+0x2028>
   2a23c:	mov	r0, r9
   2a240:	bl	1f998 <__assert_fail@plt+0xe76c>
   2a244:	ldr	r3, [sp, #204]	; 0xcc
   2a248:	ldr	r3, [r3]
   2a24c:	cmp	r3, #0
   2a250:	bne	298fc <__assert_fail@plt+0x186d0>
   2a254:	str	r3, [sp, #24]
   2a258:	b	295f4 <__assert_fail@plt+0x183c8>
   2a25c:	mov	r0, r8
   2a260:	ldr	r1, [sp, #76]	; 0x4c
   2a264:	bl	23ed4 <__assert_fail@plt+0x12ca8>
   2a268:	ldr	r3, [sp, #204]	; 0xcc
   2a26c:	cmp	r0, #0
   2a270:	str	r0, [r3]
   2a274:	beq	2a1c0 <__assert_fail@plt+0x18f94>
   2a278:	b	2a234 <__assert_fail@plt+0x19008>
   2a27c:	ldr	r2, [sp, #24]
   2a280:	ldr	r3, [r9, #20]
   2a284:	ldr	r0, [r9]
   2a288:	cmp	r3, r2
   2a28c:	beq	2a630 <__assert_fail@plt+0x19404>
   2a290:	ldr	r2, [sp, #76]	; 0x4c
   2a294:	add	r1, r3, #1
   2a298:	str	r1, [r9, #20]
   2a29c:	str	r2, [r0, r3, lsl #2]
   2a2a0:	b	2a1c0 <__assert_fail@plt+0x18f94>
   2a2a4:	mov	r3, #0
   2a2a8:	mov	r1, r6
   2a2ac:	str	fp, [sp]
   2a2b0:	mov	r2, r3
   2a2b4:	mov	r0, r5
   2a2b8:	bl	20d30 <__assert_fail@plt+0xfb04>
   2a2bc:	subs	r3, r0, #0
   2a2c0:	str	r3, [sp, #24]
   2a2c4:	bne	29d88 <__assert_fail@plt+0x18b5c>
   2a2c8:	b	29fc4 <__assert_fail@plt+0x18d98>
   2a2cc:	ldrb	r3, [r9, #16]
   2a2d0:	ldr	r2, [sp, #20]
   2a2d4:	orr	r3, r3, #1
   2a2d8:	tst	r2, #256	; 0x100
   2a2dc:	strb	r3, [r9, #16]
   2a2e0:	beq	2a2f0 <__assert_fail@plt+0x190c4>
   2a2e4:	ldr	r3, [r8]
   2a2e8:	orr	r3, r3, #1024	; 0x400
   2a2ec:	str	r3, [r8]
   2a2f0:	ldr	r3, [sl, #40]	; 0x28
   2a2f4:	mov	r1, sl
   2a2f8:	mov	r0, fp
   2a2fc:	ldr	r2, [sp, #20]
   2a300:	add	r3, r3, r5
   2a304:	str	r3, [sl, #40]	; 0x28
   2a308:	bl	1e9bc <__assert_fail@plt+0xd790>
   2a30c:	ldrb	r3, [fp, #4]
   2a310:	mov	r5, r0
   2a314:	cmp	r3, #2
   2a318:	beq	2a5b0 <__assert_fail@plt+0x19384>
   2a31c:	mov	r2, #1
   2a320:	str	r2, [sp, #44]	; 0x2c
   2a324:	b	29e14 <__assert_fail@plt+0x18be8>
   2a328:	ldr	r2, [sp, #204]	; 0xcc
   2a32c:	mov	r3, #7
   2a330:	str	r3, [r2]
   2a334:	b	2a234 <__assert_fail@plt+0x19008>
   2a338:	mov	r2, r3
   2a33c:	mov	r1, sl
   2a340:	mov	r0, fp
   2a344:	mov	r4, r3
   2a348:	bl	28838 <__assert_fail@plt+0x1760c>
   2a34c:	ldr	lr, [sp, #200]	; 0xc8
   2a350:	mov	r3, r4
   2a354:	mov	r2, fp
   2a358:	mov	r1, r5
   2a35c:	ldr	ip, [sl, #40]	; 0x28
   2a360:	str	lr, [sp]
   2a364:	ldr	lr, [sp, #204]	; 0xcc
   2a368:	add	ip, ip, r0
   2a36c:	mov	r0, sl
   2a370:	str	lr, [sp, #4]
   2a374:	str	ip, [sl, #40]	; 0x28
   2a378:	bl	294c8 <__assert_fail@plt+0x1829c>
   2a37c:	str	r0, [sp, #24]
   2a380:	b	29838 <__assert_fail@plt+0x1860c>
   2a384:	ldr	r3, [sp, #204]	; 0xcc
   2a388:	str	r0, [r3]
   2a38c:	b	2a234 <__assert_fail@plt+0x19008>
   2a390:	str	r4, [sp, #24]
   2a394:	b	295f4 <__assert_fail@plt+0x183c8>
   2a398:	mov	r0, #6
   2a39c:	mov	r2, r3
   2a3a0:	str	fp, [sp]
   2a3a4:	mov	r1, r6
   2a3a8:	str	r0, [fp]
   2a3ac:	mov	r0, r5
   2a3b0:	bl	20d30 <__assert_fail@plt+0xfb04>
   2a3b4:	mov	r3, #9
   2a3b8:	mov	r7, r0
   2a3bc:	str	r3, [fp]
   2a3c0:	b	29d14 <__assert_fail@plt+0x18ae8>
   2a3c4:	ldr	r3, [sl, #40]	; 0x28
   2a3c8:	mov	r2, r7
   2a3cc:	add	r0, sp, #88	; 0x58
   2a3d0:	mov	r1, sl
   2a3d4:	add	r3, r3, r5
   2a3d8:	str	r3, [sl, #40]	; 0x28
   2a3dc:	bl	1e9bc <__assert_fail@plt+0xd790>
   2a3e0:	ldrb	r2, [sp, #92]	; 0x5c
   2a3e4:	mov	r3, r0
   2a3e8:	cmp	r2, #2
   2a3ec:	beq	2a328 <__assert_fail@plt+0x190fc>
   2a3f0:	cmp	r2, #21
   2a3f4:	beq	2a614 <__assert_fail@plt+0x193e8>
   2a3f8:	mov	r1, #1
   2a3fc:	mov	r0, #3
   2a400:	str	r7, [sp]
   2a404:	add	ip, sp, #128	; 0x80
   2a408:	add	r2, sp, #88	; 0x58
   2a40c:	str	r1, [sp, #4]
   2a410:	mov	r1, sl
   2a414:	str	r0, [sp, #80]	; 0x50
   2a418:	add	r0, sp, #80	; 0x50
   2a41c:	str	ip, [sp, #84]	; 0x54
   2a420:	bl	29274 <__assert_fail@plt+0x18048>
   2a424:	cmp	r0, #0
   2a428:	bne	2a384 <__assert_fail@plt+0x19158>
   2a42c:	mov	r2, r7
   2a430:	mov	r1, sl
   2a434:	mov	r0, fp
   2a438:	bl	1e9bc <__assert_fail@plt+0xd790>
   2a43c:	ldr	r2, [sp, #72]	; 0x48
   2a440:	mov	r5, r0
   2a444:	sub	r3, r2, #2
   2a448:	bics	r3, r3, #2
   2a44c:	beq	2a884 <__assert_fail@plt+0x19658>
   2a450:	ldr	r3, [sp, #80]	; 0x50
   2a454:	sub	r1, r3, #2
   2a458:	bics	r1, r1, #2
   2a45c:	beq	2a884 <__assert_fail@plt+0x19658>
   2a460:	cmp	r2, #3
   2a464:	moveq	r1, #1
   2a468:	movne	r1, #0
   2a46c:	str	r1, [sp, #52]	; 0x34
   2a470:	beq	2a980 <__assert_fail@plt+0x19754>
   2a474:	cmp	r3, #3
   2a478:	beq	2a950 <__assert_fail@plt+0x19724>
   2a47c:	cmp	r2, #0
   2a480:	bne	2a86c <__assert_fail@plt+0x19640>
   2a484:	ldrb	r4, [sp, #76]	; 0x4c
   2a488:	cmp	r3, #0
   2a48c:	beq	2a87c <__assert_fail@plt+0x19650>
   2a490:	cmp	r3, #3
   2a494:	bne	2a864 <__assert_fail@plt+0x19638>
   2a498:	ldr	r1, [sp, #84]	; 0x54
   2a49c:	ldrb	r6, [r1]
   2a4a0:	cmp	r2, #0
   2a4a4:	ldr	r1, [sp, #52]	; 0x34
   2a4a8:	moveq	r1, #1
   2a4ac:	cmp	r1, #0
   2a4b0:	beq	2a85c <__assert_fail@plt+0x19630>
   2a4b4:	ldr	r2, [sp, #32]
   2a4b8:	ldr	r2, [r2, #92]	; 0x5c
   2a4bc:	cmp	r2, #1
   2a4c0:	ble	2a848 <__assert_fail@plt+0x1961c>
   2a4c4:	mov	r0, r4
   2a4c8:	bl	11178 <btowc@plt>
   2a4cc:	ldr	r3, [sp, #80]	; 0x50
   2a4d0:	mov	r4, r0
   2a4d4:	cmp	r3, #3
   2a4d8:	cmpne	r3, #0
   2a4dc:	bne	2a854 <__assert_fail@plt+0x19628>
   2a4e0:	ldr	r3, [sp, #32]
   2a4e4:	ldr	r3, [r3, #92]	; 0x5c
   2a4e8:	cmp	r3, #1
   2a4ec:	ble	2a4fc <__assert_fail@plt+0x192d0>
   2a4f0:	mov	r0, r6
   2a4f4:	bl	11178 <btowc@plt>
   2a4f8:	mov	r6, r0
   2a4fc:	cmn	r4, #1
   2a500:	cmnne	r6, #1
   2a504:	beq	2a938 <__assert_fail@plt+0x1970c>
   2a508:	ldr	r3, [sp, #48]	; 0x30
   2a50c:	cmp	r4, r6
   2a510:	movls	r3, #0
   2a514:	andhi	r3, r3, #1
   2a518:	cmp	r3, #0
   2a51c:	bne	2a884 <__assert_fail@plt+0x19658>
   2a520:	ldr	r3, [sp, #32]
   2a524:	ldr	r3, [r3, #92]	; 0x5c
   2a528:	cmp	r3, #1
   2a52c:	ble	2a55c <__assert_fail@plt+0x19330>
   2a530:	ldr	r1, [sp, #40]	; 0x28
   2a534:	ldr	r3, [r9, #32]
   2a538:	ldr	r2, [r9, #4]
   2a53c:	cmp	r3, r1
   2a540:	beq	2a9c0 <__assert_fail@plt+0x19794>
   2a544:	str	r4, [r2, r3, lsl #2]
   2a548:	ldr	r2, [r9, #8]
   2a54c:	ldr	r3, [r9, #32]
   2a550:	add	r1, r3, #1
   2a554:	str	r1, [r9, #32]
   2a558:	str	r6, [r2, r3, lsl #2]
   2a55c:	mov	r3, #0
   2a560:	mov	ip, #1
   2a564:	cmp	r4, r3
   2a568:	asr	r2, r3, #5
   2a56c:	and	r0, r3, #31
   2a570:	movhi	r1, #0
   2a574:	movls	r1, #1
   2a578:	cmp	r6, r3
   2a57c:	add	r3, r3, #1
   2a580:	movcc	r1, #0
   2a584:	cmp	r1, #0
   2a588:	beq	2a598 <__assert_fail@plt+0x1936c>
   2a58c:	ldr	r1, [r8, r2, lsl #2]
   2a590:	orr	r1, r1, ip, lsl r0
   2a594:	str	r1, [r8, r2, lsl #2]
   2a598:	cmp	r3, #256	; 0x100
   2a59c:	bne	2a564 <__assert_fail@plt+0x19338>
   2a5a0:	ldr	r2, [sp, #204]	; 0xcc
   2a5a4:	mov	r3, #0
   2a5a8:	str	r3, [r2]
   2a5ac:	b	2a1c0 <__assert_fail@plt+0x18f94>
   2a5b0:	ldr	r2, [sp, #204]	; 0xcc
   2a5b4:	mov	r3, #2
   2a5b8:	str	r3, [r2]
   2a5bc:	b	2a234 <__assert_fail@plt+0x19008>
   2a5c0:	ldrb	r3, [fp, #4]
   2a5c4:	cmp	r3, #2
   2a5c8:	bne	29be4 <__assert_fail@plt+0x189b8>
   2a5cc:	ldr	r2, [sp, #204]	; 0xcc
   2a5d0:	mov	r3, #9
   2a5d4:	str	r3, [r2]
   2a5d8:	b	29bf0 <__assert_fail@plt+0x189c4>
   2a5dc:	mov	r0, r8
   2a5e0:	str	r5, [sp, #24]
   2a5e4:	bl	13254 <__assert_fail@plt+0x2028>
   2a5e8:	mov	r0, r9
   2a5ec:	bl	13254 <__assert_fail@plt+0x2028>
   2a5f0:	ldr	r2, [sp, #204]	; 0xcc
   2a5f4:	mov	r3, #12
   2a5f8:	str	r3, [r2]
   2a5fc:	b	29838 <__assert_fail@plt+0x1860c>
   2a600:	str	r3, [sp, #24]
   2a604:	mov	r2, #6
   2a608:	ldr	r3, [sp, #204]	; 0xcc
   2a60c:	str	r2, [r3]
   2a610:	b	29838 <__assert_fail@plt+0x1860c>
   2a614:	ldr	r2, [sl, #40]	; 0x28
   2a618:	mov	r1, #1
   2a61c:	ldr	r3, [sp, #72]	; 0x48
   2a620:	sub	r2, r2, r5
   2a624:	str	r2, [sl, #40]	; 0x28
   2a628:	strb	r1, [fp, #4]
   2a62c:	b	29eb0 <__assert_fail@plt+0x18c84>
   2a630:	lsl	r3, r2, #1
   2a634:	add	r3, r3, #1
   2a638:	lsl	r1, r3, #2
   2a63c:	str	r3, [sp, #24]
   2a640:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2a644:	cmp	r0, #0
   2a648:	beq	2a758 <__assert_fail@plt+0x1952c>
   2a64c:	str	r0, [r9]
   2a650:	ldr	r3, [r9, #20]
   2a654:	b	2a290 <__assert_fail@plt+0x19064>
   2a658:	ldr	r3, [sl, #40]	; 0x28
   2a65c:	ldr	r2, [sp, #44]	; 0x2c
   2a660:	add	r3, r3, r5
   2a664:	cmp	r2, #0
   2a668:	str	r3, [sl, #40]	; 0x28
   2a66c:	beq	2a68c <__assert_fail@plt+0x19460>
   2a670:	sub	r3, r8, #4
   2a674:	add	r1, r8, #28
   2a678:	ldr	r2, [r3, #4]!
   2a67c:	mvn	r2, r2
   2a680:	cmp	r1, r3
   2a684:	str	r2, [r3]
   2a688:	bne	2a678 <__assert_fail@plt+0x1944c>
   2a68c:	ldr	r3, [sp, #32]
   2a690:	ldr	r0, [r3, #92]	; 0x5c
   2a694:	cmp	r0, #1
   2a698:	ble	2a6c8 <__assert_fail@plt+0x1949c>
   2a69c:	ldr	r3, [sp, #32]
   2a6a0:	sub	r2, r8, #4
   2a6a4:	add	ip, r8, #28
   2a6a8:	ldr	r3, [r3, #60]	; 0x3c
   2a6ac:	sub	r3, r3, #4
   2a6b0:	ldr	r1, [r2, #4]!
   2a6b4:	ldr	lr, [r3, #4]!
   2a6b8:	cmp	ip, r2
   2a6bc:	and	r1, r1, lr
   2a6c0:	str	r1, [r2]
   2a6c4:	bne	2a6b0 <__assert_fail@plt+0x19484>
   2a6c8:	ldr	r3, [r9, #20]
   2a6cc:	cmp	r3, #0
   2a6d0:	bne	2a768 <__assert_fail@plt+0x1953c>
   2a6d4:	ldr	r3, [r9, #24]
   2a6d8:	cmp	r3, #0
   2a6dc:	bne	2a768 <__assert_fail@plt+0x1953c>
   2a6e0:	ldr	r3, [r9, #28]
   2a6e4:	cmp	r3, #0
   2a6e8:	bne	2a768 <__assert_fail@plt+0x1953c>
   2a6ec:	ldr	r3, [r9, #32]
   2a6f0:	cmp	r3, #0
   2a6f4:	bne	2a768 <__assert_fail@plt+0x1953c>
   2a6f8:	cmp	r0, #1
   2a6fc:	ble	2a718 <__assert_fail@plt+0x194ec>
   2a700:	ldr	r3, [r9, #36]	; 0x24
   2a704:	cmp	r3, #0
   2a708:	bne	2a768 <__assert_fail@plt+0x1953c>
   2a70c:	ldrb	r3, [r9, #16]
   2a710:	tst	r3, #1
   2a714:	bne	2a768 <__assert_fail@plt+0x1953c>
   2a718:	mov	r0, r9
   2a71c:	bl	1f998 <__assert_fail@plt+0xe76c>
   2a720:	ldr	r0, [sp, #32]
   2a724:	mov	r3, #0
   2a728:	mov	ip, #3
   2a72c:	str	r8, [sp, #96]	; 0x60
   2a730:	ldr	r2, [sp, #36]	; 0x24
   2a734:	add	r1, r0, #64	; 0x40
   2a738:	add	r0, r0, #56	; 0x38
   2a73c:	str	r2, [sp]
   2a740:	mov	r2, r3
   2a744:	strb	ip, [sp, #100]	; 0x64
   2a748:	bl	20d30 <__assert_fail@plt+0xfb04>
   2a74c:	subs	r3, r0, #0
   2a750:	str	r3, [sp, #24]
   2a754:	bne	295f4 <__assert_fail@plt+0x183c8>
   2a758:	ldr	r2, [sp, #204]	; 0xcc
   2a75c:	mov	r3, #12
   2a760:	str	r3, [r2]
   2a764:	b	2a234 <__assert_fail@plt+0x19008>
   2a768:	ldr	r4, [sp, #32]
   2a76c:	mov	r3, #0
   2a770:	mov	lr, #6
   2a774:	mov	r2, r3
   2a778:	ldrb	ip, [r4, #88]	; 0x58
   2a77c:	add	r7, r4, #56	; 0x38
   2a780:	add	r6, r4, #64	; 0x40
   2a784:	mov	r0, r7
   2a788:	mov	r1, r6
   2a78c:	orr	ip, ip, #2
   2a790:	strb	ip, [r4, #88]	; 0x58
   2a794:	ldr	ip, [sp, #36]	; 0x24
   2a798:	str	ip, [sp]
   2a79c:	str	r9, [sp, #96]	; 0x60
   2a7a0:	strb	lr, [sp, #100]	; 0x64
   2a7a4:	bl	20d30 <__assert_fail@plt+0xfb04>
   2a7a8:	subs	r3, r0, #0
   2a7ac:	str	r3, [sp, #24]
   2a7b0:	beq	2a758 <__assert_fail@plt+0x1952c>
   2a7b4:	sub	r3, r8, #4
   2a7b8:	add	r2, r8, #28
   2a7bc:	ldr	r1, [r3, #4]!
   2a7c0:	cmp	r1, #0
   2a7c4:	bne	2a7dc <__assert_fail@plt+0x195b0>
   2a7c8:	cmp	r2, r3
   2a7cc:	bne	2a7bc <__assert_fail@plt+0x19590>
   2a7d0:	mov	r0, r8
   2a7d4:	bl	13254 <__assert_fail@plt+0x2028>
   2a7d8:	b	295f4 <__assert_fail@plt+0x183c8>
   2a7dc:	ldr	r2, [sp, #36]	; 0x24
   2a7e0:	mov	ip, #3
   2a7e4:	mov	r3, #0
   2a7e8:	mov	r1, r6
   2a7ec:	mov	r0, r7
   2a7f0:	str	r2, [sp]
   2a7f4:	mov	r2, r3
   2a7f8:	str	r8, [sp, #96]	; 0x60
   2a7fc:	strb	ip, [sp, #100]	; 0x64
   2a800:	bl	20d30 <__assert_fail@plt+0xfb04>
   2a804:	subs	r2, r0, #0
   2a808:	beq	2a758 <__assert_fail@plt+0x1952c>
   2a80c:	add	ip, sp, #128	; 0x80
   2a810:	mov	r4, #0
   2a814:	ldr	r3, [sp, #24]
   2a818:	mov	r5, #0
   2a81c:	mov	r1, r6
   2a820:	str	ip, [sp]
   2a824:	mov	ip, #10
   2a828:	mov	r0, r7
   2a82c:	strd	r4, [sp, #128]	; 0x80
   2a830:	strb	ip, [sp, #132]	; 0x84
   2a834:	bl	20d30 <__assert_fail@plt+0xfb04>
   2a838:	subs	r3, r0, #0
   2a83c:	str	r3, [sp, #24]
   2a840:	bne	295f4 <__assert_fail@plt+0x183c8>
   2a844:	b	2a758 <__assert_fail@plt+0x1952c>
   2a848:	cmp	r3, #0
   2a84c:	cmpne	r3, #3
   2a850:	beq	2a508 <__assert_fail@plt+0x192dc>
   2a854:	ldr	r6, [sp, #84]	; 0x54
   2a858:	b	2a4fc <__assert_fail@plt+0x192d0>
   2a85c:	ldr	r4, [sp, #76]	; 0x4c
   2a860:	b	2a4d4 <__assert_fail@plt+0x192a8>
   2a864:	mov	r6, #0
   2a868:	b	2a4a0 <__assert_fail@plt+0x19274>
   2a86c:	cmp	r3, #0
   2a870:	movne	r4, #0
   2a874:	bne	2a864 <__assert_fail@plt+0x19638>
   2a878:	mov	r4, r3
   2a87c:	ldrb	r6, [sp, #84]	; 0x54
   2a880:	b	2a4a0 <__assert_fail@plt+0x19274>
   2a884:	ldr	r2, [sp, #204]	; 0xcc
   2a888:	mov	r3, #11
   2a88c:	str	r3, [r2]
   2a890:	b	2a234 <__assert_fail@plt+0x19008>
   2a894:	mov	r5, #128	; 0x80
   2a898:	mov	r7, #4
   2a89c:	bl	11118 <__ctype_b_loc@plt>
   2a8a0:	ldr	r2, [r0]
   2a8a4:	add	ip, r7, #24
   2a8a8:	sub	r3, r5, #-2147483647	; 0x80000001
   2a8ac:	mov	lr, #1
   2a8b0:	ldr	r1, [sp, #32]
   2a8b4:	add	r6, r2, r3, lsl lr
   2a8b8:	add	ip, r1, ip, lsl #2
   2a8bc:	add	r7, r1, #128	; 0x80
   2a8c0:	mov	r0, r6
   2a8c4:	mov	r1, #0
   2a8c8:	ldrh	r2, [r0, #2]!
   2a8cc:	add	r3, r5, r1
   2a8d0:	ubfx	r2, r2, #3, #1
   2a8d4:	cmp	r3, #95	; 0x5f
   2a8d8:	movne	r3, r2
   2a8dc:	orreq	r3, r2, #1
   2a8e0:	cmp	r3, #0
   2a8e4:	beq	2a8f4 <__assert_fail@plt+0x196c8>
   2a8e8:	ldr	r3, [ip]
   2a8ec:	orr	r3, r3, lr, lsl r1
   2a8f0:	str	r3, [ip]
   2a8f4:	add	r1, r1, #1
   2a8f8:	cmp	r1, #32
   2a8fc:	bne	2a8c8 <__assert_fail@plt+0x1969c>
   2a900:	add	ip, ip, #4
   2a904:	add	r5, r5, #32
   2a908:	cmp	r7, ip
   2a90c:	add	r6, r6, #64	; 0x40
   2a910:	bne	2a8c0 <__assert_fail@plt+0x19694>
   2a914:	b	29ccc <__assert_fail@plt+0x18aa0>
   2a918:	ldr	r0, [sp, #84]	; 0x54
   2a91c:	str	r3, [sp, #56]	; 0x38
   2a920:	str	r2, [sp, #60]	; 0x3c
   2a924:	bl	11130 <strlen@plt>
   2a928:	cmp	r0, #1
   2a92c:	ldr	r3, [sp, #56]	; 0x38
   2a930:	ldr	r2, [sp, #60]	; 0x3c
   2a934:	bls	2a9a8 <__assert_fail@plt+0x1977c>
   2a938:	ldr	r2, [sp, #204]	; 0xcc
   2a93c:	mov	r3, #3
   2a940:	str	r3, [r2]
   2a944:	b	2a234 <__assert_fail@plt+0x19008>
   2a948:	mov	r7, r5
   2a94c:	b	2a89c <__assert_fail@plt+0x19670>
   2a950:	ldr	r0, [sp, #84]	; 0x54
   2a954:	str	r3, [sp, #56]	; 0x38
   2a958:	str	r2, [sp, #60]	; 0x3c
   2a95c:	bl	11130 <strlen@plt>
   2a960:	cmp	r0, #1
   2a964:	bhi	2a938 <__assert_fail@plt+0x1970c>
   2a968:	ldr	r3, [sp, #56]	; 0x38
   2a96c:	ldr	r2, [sp, #60]	; 0x3c
   2a970:	cmp	r2, #0
   2a974:	movne	r4, #0
   2a978:	bne	2a498 <__assert_fail@plt+0x1926c>
   2a97c:	b	2a484 <__assert_fail@plt+0x19258>
   2a980:	ldr	r0, [sp, #76]	; 0x4c
   2a984:	str	r3, [sp, #56]	; 0x38
   2a988:	str	r2, [sp, #60]	; 0x3c
   2a98c:	bl	11130 <strlen@plt>
   2a990:	cmp	r0, #1
   2a994:	ldr	r3, [sp, #56]	; 0x38
   2a998:	ldr	r2, [sp, #60]	; 0x3c
   2a99c:	bhi	2a938 <__assert_fail@plt+0x1970c>
   2a9a0:	cmp	r3, #3
   2a9a4:	beq	2a918 <__assert_fail@plt+0x196ec>
   2a9a8:	ldr	r1, [sp, #76]	; 0x4c
   2a9ac:	ldrb	r4, [r1]
   2a9b0:	b	2a488 <__assert_fail@plt+0x1925c>
   2a9b4:	ldr	r6, [sp, #24]
   2a9b8:	mov	r2, r6
   2a9bc:	b	29c0c <__assert_fail@plt+0x189e0>
   2a9c0:	lsl	r3, r1, #1
   2a9c4:	mov	r0, r2
   2a9c8:	add	r3, r3, #1
   2a9cc:	str	r3, [sp, #40]	; 0x28
   2a9d0:	lsl	r3, r3, #2
   2a9d4:	mov	r1, r3
   2a9d8:	str	r3, [sp, #56]	; 0x38
   2a9dc:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2a9e0:	ldr	r3, [sp, #56]	; 0x38
   2a9e4:	mov	r2, r0
   2a9e8:	ldr	r0, [r9, #8]
   2a9ec:	str	r2, [sp, #52]	; 0x34
   2a9f0:	mov	r1, r3
   2a9f4:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2a9f8:	ldr	r2, [sp, #52]	; 0x34
   2a9fc:	cmp	r0, #0
   2aa00:	cmpne	r2, #0
   2aa04:	beq	2aa24 <__assert_fail@plt+0x197f8>
   2aa08:	str	r2, [r9, #4]
   2aa0c:	str	r0, [r9, #8]
   2aa10:	ldr	r3, [r9, #32]
   2aa14:	b	2a544 <__assert_fail@plt+0x19318>
   2aa18:	mov	r2, r5
   2aa1c:	ldr	r6, [sp, #24]
   2aa20:	b	29c48 <__assert_fail@plt+0x18a1c>
   2aa24:	mov	r7, r0
   2aa28:	mov	r0, r2
   2aa2c:	bl	13254 <__assert_fail@plt+0x2028>
   2aa30:	mov	r0, r7
   2aa34:	bl	13254 <__assert_fail@plt+0x2028>
   2aa38:	ldr	r2, [sp, #204]	; 0xcc
   2aa3c:	mov	r3, #12
   2aa40:	str	r3, [r2]
   2aa44:	b	2a234 <__assert_fail@plt+0x19008>
   2aa48:	mov	r3, #0
   2aa4c:	mov	r9, #1
   2aa50:	ldr	r6, [sp, #24]
   2aa54:	str	r3, [sp, #36]	; 0x24
   2aa58:	b	29a2c <__assert_fail@plt+0x18800>
   2aa5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2aa60:	ldr	ip, [r1]
   2aa64:	strd	r6, [sp, #8]
   2aa68:	mov	r7, r2
   2aa6c:	strd	r8, [sp, #16]
   2aa70:	mov	r8, r1
   2aa74:	mov	r9, r0
   2aa78:	strd	sl, [sp, #24]
   2aa7c:	mov	sl, r3
   2aa80:	str	lr, [sp, #32]
   2aa84:	sub	sp, sp, #36	; 0x24
   2aa88:	ldr	r6, [sp, #72]	; 0x48
   2aa8c:	ldr	r5, [sp, #76]	; 0x4c
   2aa90:	str	r6, [sp]
   2aa94:	str	ip, [sp, #20]
   2aa98:	str	r5, [sp, #4]
   2aa9c:	bl	294c8 <__assert_fail@plt+0x1829c>
   2aaa0:	ldr	r2, [r5]
   2aaa4:	clz	r3, r0
   2aaa8:	lsr	r3, r3, #5
   2aaac:	cmp	r2, #0
   2aab0:	moveq	r3, #0
   2aab4:	cmp	r3, #0
   2aab8:	bne	2ac04 <__assert_fail@plt+0x199d8>
   2aabc:	mov	r4, r0
   2aac0:	str	r9, [sp, #12]
   2aac4:	str	r8, [sp, #16]
   2aac8:	ldrb	lr, [r7, #4]
   2aacc:	clz	ip, r6
   2aad0:	mov	r3, sl
   2aad4:	mov	r2, r7
   2aad8:	lsr	ip, ip, #5
   2aadc:	ldrd	r0, [sp, #12]
   2aae0:	and	fp, lr, #247	; 0xf7
   2aae4:	cmp	fp, #2
   2aae8:	beq	2abc8 <__assert_fail@plt+0x1999c>
   2aaec:	cmp	lr, #9
   2aaf0:	orrne	ip, ip, #1
   2aaf4:	cmp	ip, #0
   2aaf8:	beq	2abc8 <__assert_fail@plt+0x1999c>
   2aafc:	str	r6, [sp]
   2ab00:	str	r5, [sp, #4]
   2ab04:	bl	294c8 <__assert_fail@plt+0x1829c>
   2ab08:	ldr	r2, [r5]
   2ab0c:	clz	r3, r0
   2ab10:	mov	fp, r0
   2ab14:	lsr	r3, r3, #5
   2ab18:	cmp	r2, #0
   2ab1c:	moveq	r3, #0
   2ab20:	cmp	r3, #0
   2ab24:	bne	2abe8 <__assert_fail@plt+0x199bc>
   2ab28:	cmp	r4, #0
   2ab2c:	cmpne	r0, #0
   2ab30:	bne	2ab40 <__assert_fail@plt+0x19914>
   2ab34:	cmp	r4, #0
   2ab38:	moveq	r4, r0
   2ab3c:	b	2aac8 <__assert_fail@plt+0x1989c>
   2ab40:	mov	r3, r0
   2ab44:	ldr	r0, [sp, #20]
   2ab48:	add	r1, sp, #24
   2ab4c:	mov	ip, #16
   2ab50:	mov	r8, #0
   2ab54:	mov	r9, #0
   2ab58:	mov	r2, r4
   2ab5c:	str	r1, [sp]
   2ab60:	strd	r8, [sp, #24]
   2ab64:	add	r1, r0, #64	; 0x40
   2ab68:	add	r0, r0, #56	; 0x38
   2ab6c:	strb	ip, [sp, #28]
   2ab70:	bl	20d30 <__assert_fail@plt+0xfb04>
   2ab74:	cmp	r0, #0
   2ab78:	beq	2ab84 <__assert_fail@plt+0x19958>
   2ab7c:	mov	r4, r0
   2ab80:	b	2aac8 <__assert_fail@plt+0x1989c>
   2ab84:	mov	r3, r0
   2ab88:	movw	r1, #64012	; 0xfa0c
   2ab8c:	movt	r1, #1
   2ab90:	mov	r2, r3
   2ab94:	mov	r0, fp
   2ab98:	str	r3, [sp, #12]
   2ab9c:	bl	1e928 <__assert_fail@plt+0xd6fc>
   2aba0:	ldr	r3, [sp, #12]
   2aba4:	mov	r0, r4
   2aba8:	movw	r1, #64012	; 0xfa0c
   2abac:	movt	r1, #1
   2abb0:	mov	r2, r3
   2abb4:	bl	1e928 <__assert_fail@plt+0xd6fc>
   2abb8:	ldr	r3, [sp, #12]
   2abbc:	mov	r2, #12
   2abc0:	str	r2, [r5]
   2abc4:	mov	r4, r3
   2abc8:	mov	r0, r4
   2abcc:	add	sp, sp, #36	; 0x24
   2abd0:	ldrd	r4, [sp]
   2abd4:	ldrd	r6, [sp, #8]
   2abd8:	ldrd	r8, [sp, #16]
   2abdc:	ldrd	sl, [sp, #24]
   2abe0:	add	sp, sp, #32
   2abe4:	pop	{pc}		; (ldr pc, [sp], #4)
   2abe8:	cmp	r4, #0
   2abec:	beq	2ac04 <__assert_fail@plt+0x199d8>
   2abf0:	movw	r1, #64012	; 0xfa0c
   2abf4:	movt	r1, #1
   2abf8:	mov	r0, r4
   2abfc:	mov	r2, #0
   2ac00:	bl	1e928 <__assert_fail@plt+0xd6fc>
   2ac04:	mov	r4, #0
   2ac08:	b	2abc8 <__assert_fail@plt+0x1999c>
   2ac0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ac10:	mov	r5, r2
   2ac14:	ldr	r4, [r1]
   2ac18:	ldr	ip, [r4, #84]	; 0x54
   2ac1c:	strd	r6, [sp, #8]
   2ac20:	mov	r6, r0
   2ac24:	strd	r8, [sp, #16]
   2ac28:	strd	sl, [sp, #24]
   2ac2c:	mov	fp, r3
   2ac30:	mov	sl, r1
   2ac34:	str	lr, [sp, #32]
   2ac38:	sub	sp, sp, #36	; 0x24
   2ac3c:	ldrd	r8, [sp, #72]	; 0x48
   2ac40:	strd	r8, [sp]
   2ac44:	str	r3, [sp, #12]
   2ac48:	str	ip, [sp, #20]
   2ac4c:	bl	2aa5c <__assert_fail@plt+0x19830>
   2ac50:	ldr	r2, [r9]
   2ac54:	clz	r3, r0
   2ac58:	lsr	r3, r3, #5
   2ac5c:	cmp	r2, #0
   2ac60:	moveq	r3, #0
   2ac64:	cmp	r3, #0
   2ac68:	bne	2ad80 <__assert_fail@plt+0x19b54>
   2ac6c:	orr	r3, fp, #8388608	; 0x800000
   2ac70:	mov	r7, r0
   2ac74:	str	r3, [sp, #8]
   2ac78:	str	sl, [sp, #16]
   2ac7c:	b	2ad04 <__assert_fail@plt+0x19ad8>
   2ac80:	cmp	fp, #9
   2ac84:	orrne	ip, ip, #1
   2ac88:	cmp	ip, #0
   2ac8c:	beq	2ad5c <__assert_fail@plt+0x19b30>
   2ac90:	ldr	ip, [sp, #20]
   2ac94:	ldr	fp, [r4, #84]	; 0x54
   2ac98:	str	ip, [r4, #84]	; 0x54
   2ac9c:	strd	r8, [sp]
   2aca0:	bl	2aa5c <__assert_fail@plt+0x19830>
   2aca4:	ldr	r1, [r9]
   2aca8:	clz	r2, r0
   2acac:	mov	r3, r0
   2acb0:	lsr	r2, r2, #5
   2acb4:	cmp	r1, #0
   2acb8:	moveq	r2, #0
   2acbc:	cmp	r2, #0
   2acc0:	bne	2ad64 <__assert_fail@plt+0x19b38>
   2acc4:	ldr	r2, [r4, #84]	; 0x54
   2acc8:	orr	fp, r2, fp
   2accc:	str	fp, [r4, #84]	; 0x54
   2acd0:	add	r1, sp, #24
   2acd4:	mov	ip, #10
   2acd8:	mov	sl, #0
   2acdc:	mov	fp, #0
   2ace0:	mov	r2, r7
   2ace4:	add	r0, r4, #56	; 0x38
   2ace8:	str	r1, [sp]
   2acec:	add	r1, r4, #64	; 0x40
   2acf0:	strd	sl, [sp, #24]
   2acf4:	strb	ip, [sp, #28]
   2acf8:	bl	20d30 <__assert_fail@plt+0xfb04>
   2acfc:	subs	r7, r0, #0
   2ad00:	beq	2ada4 <__assert_fail@plt+0x19b78>
   2ad04:	ldrb	r3, [r5, #4]
   2ad08:	mov	r1, r6
   2ad0c:	mov	r0, r5
   2ad10:	ldr	r2, [sp, #8]
   2ad14:	cmp	r3, #10
   2ad18:	bne	2ad84 <__assert_fail@plt+0x19b58>
   2ad1c:	bl	28838 <__assert_fail@plt+0x1760c>
   2ad20:	ldr	lr, [r6, #40]	; 0x28
   2ad24:	clz	ip, r8
   2ad28:	mov	r2, r5
   2ad2c:	lsr	ip, ip, #5
   2ad30:	ldrb	fp, [r5, #4]
   2ad34:	ldr	r3, [sp, #12]
   2ad38:	add	lr, lr, r0
   2ad3c:	mov	r0, r6
   2ad40:	ldr	r1, [sp, #16]
   2ad44:	str	lr, [r6, #40]	; 0x28
   2ad48:	and	lr, fp, #247	; 0xf7
   2ad4c:	cmp	lr, #2
   2ad50:	bne	2ac80 <__assert_fail@plt+0x19a54>
   2ad54:	mov	r3, #0
   2ad58:	b	2acd0 <__assert_fail@plt+0x19aa4>
   2ad5c:	mov	r3, ip
   2ad60:	b	2acd0 <__assert_fail@plt+0x19aa4>
   2ad64:	cmp	r7, #0
   2ad68:	beq	2ad80 <__assert_fail@plt+0x19b54>
   2ad6c:	movw	r1, #64012	; 0xfa0c
   2ad70:	movt	r1, #1
   2ad74:	mov	r0, r7
   2ad78:	mov	r2, #0
   2ad7c:	bl	1e928 <__assert_fail@plt+0xd6fc>
   2ad80:	mov	r7, #0
   2ad84:	mov	r0, r7
   2ad88:	add	sp, sp, #36	; 0x24
   2ad8c:	ldrd	r4, [sp]
   2ad90:	ldrd	r6, [sp, #8]
   2ad94:	ldrd	r8, [sp, #16]
   2ad98:	ldrd	sl, [sp, #24]
   2ad9c:	add	sp, sp, #32
   2ada0:	pop	{pc}		; (ldr pc, [sp], #4)
   2ada4:	mov	r3, #12
   2ada8:	str	r3, [r9]
   2adac:	b	2ad84 <__assert_fail@plt+0x19b58>
   2adb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2adb4:	mov	r5, r0
   2adb8:	ldr	r4, [r0]
   2adbc:	strd	r6, [sp, #8]
   2adc0:	mov	r7, r3
   2adc4:	mov	r6, r2
   2adc8:	ldrb	r3, [r0, #28]
   2adcc:	mov	r0, #0
   2add0:	strd	r8, [sp, #16]
   2add4:	mov	r8, r1
   2add8:	ldr	r2, [r5, #4]
   2addc:	strd	sl, [sp, #24]
   2ade0:	str	lr, [sp, #32]
   2ade4:	sub	sp, sp, #140	; 0x8c
   2ade8:	bic	r3, r3, #111	; 0x6f
   2adec:	str	r0, [r5, #8]
   2adf0:	str	r7, [r5, #12]
   2adf4:	cmp	r2, #159	; 0x9f
   2adf8:	str	r0, [r5, #24]
   2adfc:	strb	r3, [r5, #28]
   2ae00:	str	r0, [sp, #28]
   2ae04:	bls	2b988 <__assert_fail@plt+0x1a75c>
   2ae08:	mov	r3, #160	; 0xa0
   2ae0c:	mov	r1, #0
   2ae10:	mov	r2, r3
   2ae14:	mov	r0, r4
   2ae18:	str	r3, [r5, #8]
   2ae1c:	bl	1116c <memset@plt>
   2ae20:	movw	r3, #43689	; 0xaaa9
   2ae24:	movt	r3, #2730	; 0xaaa
   2ae28:	mov	r2, #31
   2ae2c:	cmp	r6, r3
   2ae30:	str	r2, [r4, #64]	; 0x40
   2ae34:	bhi	2b438 <__assert_fail@plt+0x1a20c>
   2ae38:	add	r9, r6, #1
   2ae3c:	lsl	r0, r9, #3
   2ae40:	str	r9, [r4, #4]
   2ae44:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2ae48:	cmp	r6, #0
   2ae4c:	str	r0, [r4]
   2ae50:	beq	2b9ac <__assert_fail@plt+0x1a780>
   2ae54:	mov	r1, #1
   2ae58:	lsl	r1, r1, #1
   2ae5c:	cmp	r6, r1
   2ae60:	bcs	2ae58 <__assert_fail@plt+0x19c2c>
   2ae64:	sub	sl, r1, #1
   2ae68:	mov	r0, #12
   2ae6c:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   2ae70:	str	r0, [r4, #32]
   2ae74:	str	sl, [r4, #68]	; 0x44
   2ae78:	bl	11070 <__ctype_get_mb_cur_max@plt>
   2ae7c:	str	r0, [r4, #92]	; 0x5c
   2ae80:	mov	r0, #14
   2ae84:	bl	111f0 <nl_langinfo@plt>
   2ae88:	ldrb	r3, [r0]
   2ae8c:	and	r3, r3, #223	; 0xdf
   2ae90:	cmp	r3, #85	; 0x55
   2ae94:	bne	2aeec <__assert_fail@plt+0x19cc0>
   2ae98:	ldrb	r3, [r0, #1]
   2ae9c:	and	r3, r3, #223	; 0xdf
   2aea0:	cmp	r3, #84	; 0x54
   2aea4:	bne	2aeec <__assert_fail@plt+0x19cc0>
   2aea8:	ldrb	r3, [r0, #2]
   2aeac:	and	r3, r3, #223	; 0xdf
   2aeb0:	cmp	r3, #70	; 0x46
   2aeb4:	bne	2aeec <__assert_fail@plt+0x19cc0>
   2aeb8:	ldrb	r3, [r0, #3]
   2aebc:	movw	r1, #61884	; 0xf1bc
   2aec0:	movt	r1, #2
   2aec4:	cmp	r3, #45	; 0x2d
   2aec8:	moveq	r3, #4
   2aecc:	movne	r3, #3
   2aed0:	add	r0, r0, r3
   2aed4:	bl	10f68 <strcmp@plt>
   2aed8:	cmp	r0, #0
   2aedc:	bne	2aeec <__assert_fail@plt+0x19cc0>
   2aee0:	ldrb	r3, [r4, #88]	; 0x58
   2aee4:	orr	r3, r3, #4
   2aee8:	strb	r3, [r4, #88]	; 0x58
   2aeec:	ldrb	r3, [r4, #88]	; 0x58
   2aef0:	ldr	r2, [r4, #92]	; 0x5c
   2aef4:	bfc	r3, #3, #1
   2aef8:	cmp	r2, #1
   2aefc:	strb	r3, [r4, #88]	; 0x58
   2af00:	ble	2af1c <__assert_fail@plt+0x19cf0>
   2af04:	uxtb	sl, r3
   2af08:	ands	sl, sl, #4
   2af0c:	beq	2b49c <__assert_fail@plt+0x1a270>
   2af10:	movw	r3, #61300	; 0xef74
   2af14:	movt	r3, #2
   2af18:	str	r3, [r4, #60]	; 0x3c
   2af1c:	ldr	r3, [r4]
   2af20:	cmp	r3, #0
   2af24:	beq	2b438 <__assert_fail@plt+0x1a20c>
   2af28:	ldr	r3, [r4, #32]
   2af2c:	cmp	r3, #0
   2af30:	beq	2b438 <__assert_fail@plt+0x1a20c>
   2af34:	mov	r1, #0
   2af38:	movw	r2, #0
   2af3c:	movt	r2, #0
   2af40:	mov	r3, #1
   2af44:	cmp	r2, r1
   2af48:	str	r1, [sp, #28]
   2af4c:	mov	r1, #1
   2af50:	moveq	r3, r2
   2af54:	movw	r2, #0
   2af58:	movt	r2, #0
   2af5c:	cmp	r2, #0
   2af60:	moveq	r1, r2
   2af64:	orr	r3, r3, r1
   2af68:	ands	r3, r3, #255	; 0xff
   2af6c:	str	r3, [sp, #8]
   2af70:	beq	2af94 <__assert_fail@plt+0x19d68>
   2af74:	mov	r1, #0
   2af78:	add	r0, r4, #136	; 0x88
   2af7c:	bl	10fe0 <pthread_mutex_init@plt>
   2af80:	cmp	r0, #0
   2af84:	bne	2b438 <__assert_fail@plt+0x1a20c>
   2af88:	ldr	r3, [sp, #28]
   2af8c:	cmp	r3, #0
   2af90:	bne	2b440 <__assert_fail@plt+0x1a214>
   2af94:	mov	r2, #76	; 0x4c
   2af98:	mov	r1, #0
   2af9c:	ldr	sl, [r5, #20]
   2afa0:	add	r0, sp, #56	; 0x38
   2afa4:	and	fp, r7, #4194304	; 0x400000
   2afa8:	bl	1116c <memset@plt>
   2afac:	ldrb	r3, [r4, #88]	; 0x58
   2afb0:	adds	lr, fp, #0
   2afb4:	movne	lr, #1
   2afb8:	str	r8, [sp, #52]	; 0x34
   2afbc:	ldr	r0, [r4, #92]	; 0x5c
   2afc0:	orr	r2, sl, fp
   2afc4:	adds	r1, r2, #0
   2afc8:	str	r6, [sp, #96]	; 0x60
   2afcc:	movne	r1, #1
   2afd0:	cmp	r6, #0
   2afd4:	str	r6, [sp, #100]	; 0x64
   2afd8:	ubfx	ip, r3, #2, #1
   2afdc:	str	r6, [sp, #104]	; 0x68
   2afe0:	ubfx	r3, r3, #3, #1
   2afe4:	str	r6, [sp, #108]	; 0x6c
   2afe8:	str	sl, [sp, #116]	; 0x74
   2afec:	strb	lr, [sp, #124]	; 0x7c
   2aff0:	strb	ip, [sp, #125]	; 0x7d
   2aff4:	strb	r3, [sp, #126]	; 0x7e
   2aff8:	strb	r1, [sp, #127]	; 0x7f
   2affc:	str	r0, [sp, #132]	; 0x84
   2b000:	bne	2b474 <__assert_fail@plt+0x1a248>
   2b004:	cmp	r1, #0
   2b008:	ldrne	r8, [sp, #56]	; 0x38
   2b00c:	cmp	fp, #0
   2b010:	str	r8, [sp, #56]	; 0x38
   2b014:	beq	2b0cc <__assert_fail@plt+0x19ea0>
   2b018:	cmp	r0, #1
   2b01c:	ble	2b974 <__assert_fail@plt+0x1a748>
   2b020:	add	r0, sp, #52	; 0x34
   2b024:	bl	1f210 <__assert_fail@plt+0xdfe4>
   2b028:	cmp	r0, #0
   2b02c:	bne	2b068 <__assert_fail@plt+0x19e3c>
   2b030:	ldr	r3, [sp, #84]	; 0x54
   2b034:	cmp	r6, r3
   2b038:	ble	2ba00 <__assert_fail@plt+0x1a7d4>
   2b03c:	ldr	r3, [sp, #80]	; 0x50
   2b040:	ldr	r2, [r4, #92]	; 0x5c
   2b044:	ldr	r1, [sp, #88]	; 0x58
   2b048:	add	r3, r3, r2
   2b04c:	cmp	r1, r3
   2b050:	bgt	2ba00 <__assert_fail@plt+0x1a7d4>
   2b054:	lsl	r1, r1, #1
   2b058:	add	r0, sp, #52	; 0x34
   2b05c:	bl	1ee20 <__assert_fail@plt+0xdbf4>
   2b060:	cmp	r0, #0
   2b064:	beq	2b020 <__assert_fail@plt+0x19df4>
   2b068:	ldr	r6, [r5]
   2b06c:	str	r0, [sp, #28]
   2b070:	ldr	r0, [r6, #56]	; 0x38
   2b074:	cmp	r0, #0
   2b078:	beq	2b08c <__assert_fail@plt+0x19e60>
   2b07c:	ldr	r7, [r0]
   2b080:	bl	13254 <__assert_fail@plt+0x2028>
   2b084:	subs	r0, r7, #0
   2b088:	bne	2b07c <__assert_fail@plt+0x19e50>
   2b08c:	mov	r7, #0
   2b090:	mov	r3, #31
   2b094:	ldr	r0, [r6, #16]
   2b098:	str	r7, [r6, #52]	; 0x34
   2b09c:	str	r7, [r6, #56]	; 0x38
   2b0a0:	str	r3, [r6, #64]	; 0x40
   2b0a4:	bl	13254 <__assert_fail@plt+0x2028>
   2b0a8:	add	r0, sp, #52	; 0x34
   2b0ac:	str	r7, [r6, #16]
   2b0b0:	bl	1fd00 <__assert_fail@plt+0xead4>
   2b0b4:	ldr	r3, [sp, #8]
   2b0b8:	cmp	r3, r7
   2b0bc:	beq	2b440 <__assert_fail@plt+0x1a214>
   2b0c0:	add	r0, r4, #136	; 0x88
   2b0c4:	bl	10f80 <pthread_mutex_destroy@plt>
   2b0c8:	b	2b440 <__assert_fail@plt+0x1a214>
   2b0cc:	cmp	r0, #1
   2b0d0:	bgt	2b88c <__assert_fail@plt+0x1a660>
   2b0d4:	cmp	r2, #0
   2b0d8:	ldr	r1, [sp, #88]	; 0x58
   2b0dc:	beq	2b54c <__assert_fail@plt+0x1a320>
   2b0e0:	ldr	r3, [sp, #80]	; 0x50
   2b0e4:	ldr	r2, [sp, #100]	; 0x64
   2b0e8:	cmp	r1, r2
   2b0ec:	movge	r1, r2
   2b0f0:	cmp	r1, r3
   2b0f4:	bgt	2b100 <__assert_fail@plt+0x19ed4>
   2b0f8:	b	2baec <__assert_fail@plt+0x1a8c0>
   2b0fc:	ldr	r8, [sp, #56]	; 0x38
   2b100:	ldr	r2, [sp, #52]	; 0x34
   2b104:	ldr	ip, [sp, #76]	; 0x4c
   2b108:	ldr	r0, [sp, #116]	; 0x74
   2b10c:	add	r2, r2, r3
   2b110:	ldrb	r2, [r2, ip]
   2b114:	ldrb	r2, [r0, r2]
   2b118:	strb	r2, [r8, r3]
   2b11c:	add	r3, r3, #1
   2b120:	cmp	r1, r3
   2b124:	bne	2b0fc <__assert_fail@plt+0x19ed0>
   2b128:	mov	r3, #0
   2b12c:	str	r3, [sp, #28]
   2b130:	str	r1, [sp, #80]	; 0x50
   2b134:	str	r1, [sp, #84]	; 0x54
   2b138:	ldr	r6, [r5]
   2b13c:	mov	r8, #0
   2b140:	orr	r2, r7, #8388608	; 0x800000
   2b144:	add	r1, sp, #52	; 0x34
   2b148:	add	r0, sp, #32
   2b14c:	str	r8, [r5, #24]
   2b150:	str	r7, [r6, #128]	; 0x80
   2b154:	bl	28838 <__assert_fail@plt+0x1760c>
   2b158:	ldr	ip, [sp, #92]	; 0x5c
   2b15c:	add	r1, sp, #28
   2b160:	mov	r3, r7
   2b164:	add	r2, sp, #32
   2b168:	str	r8, [sp]
   2b16c:	str	r1, [sp, #4]
   2b170:	mov	r1, r5
   2b174:	add	ip, ip, r0
   2b178:	add	r0, sp, #52	; 0x34
   2b17c:	str	ip, [sp, #92]	; 0x5c
   2b180:	bl	2ac0c <__assert_fail@plt+0x199e0>
   2b184:	ldr	lr, [sp, #28]
   2b188:	mov	r9, r0
   2b18c:	cmp	lr, r8
   2b190:	bne	2b9b8 <__assert_fail@plt+0x1a78c>
   2b194:	mov	r2, #0
   2b198:	mov	r3, #0
   2b19c:	add	r7, sp, #40	; 0x28
   2b1a0:	mov	ip, #2
   2b1a4:	add	sl, r6, #56	; 0x38
   2b1a8:	add	r6, r6, #64	; 0x40
   2b1ac:	mov	r0, sl
   2b1b0:	mov	r1, r6
   2b1b4:	str	r7, [sp]
   2b1b8:	strd	r2, [sp, #40]	; 0x28
   2b1bc:	mov	r3, lr
   2b1c0:	mov	r2, lr
   2b1c4:	strb	ip, [sp, #44]	; 0x2c
   2b1c8:	bl	20d30 <__assert_fail@plt+0xfb04>
   2b1cc:	cmp	r9, #0
   2b1d0:	mov	lr, r0
   2b1d4:	moveq	r9, r0
   2b1d8:	beq	2b210 <__assert_fail@plt+0x19fe4>
   2b1dc:	mov	ip, #16
   2b1e0:	mov	r2, r9
   2b1e4:	str	r7, [sp]
   2b1e8:	mov	r9, #0
   2b1ec:	mov	r8, #0
   2b1f0:	mov	r3, lr
   2b1f4:	mov	r1, r6
   2b1f8:	mov	r0, sl
   2b1fc:	strd	r8, [sp, #40]	; 0x28
   2b200:	mov	r9, lr
   2b204:	strb	ip, [sp, #44]	; 0x2c
   2b208:	bl	20d30 <__assert_fail@plt+0xfb04>
   2b20c:	mov	lr, r0
   2b210:	clz	r3, lr
   2b214:	cmp	r9, #0
   2b218:	ldr	r6, [r5]
   2b21c:	lsr	r3, r3, #5
   2b220:	moveq	r9, #1
   2b224:	movne	r9, r3
   2b228:	cmp	r9, #0
   2b22c:	movne	r2, #12
   2b230:	movne	r3, #0
   2b234:	strne	r2, [sp, #28]
   2b238:	strne	r3, [r4, #52]	; 0x34
   2b23c:	bne	2b070 <__assert_fail@plt+0x19e44>
   2b240:	ldr	r0, [r6, #4]
   2b244:	str	lr, [r4, #52]	; 0x34
   2b248:	lsl	r0, r0, #2
   2b24c:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2b250:	ldr	r3, [r6, #4]
   2b254:	str	r0, [r6, #12]
   2b258:	lsl	r0, r3, #2
   2b25c:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2b260:	ldr	r3, [r6, #4]
   2b264:	str	r0, [r6, #16]
   2b268:	add	r3, r3, r3, lsl #1
   2b26c:	lsl	r0, r3, #2
   2b270:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2b274:	ldr	r3, [r6, #4]
   2b278:	str	r0, [r6, #20]
   2b27c:	add	r3, r3, r3, lsl #1
   2b280:	lsl	r0, r3, #2
   2b284:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2b288:	ldr	r3, [r6, #12]
   2b28c:	str	r0, [r6, #24]
   2b290:	cmp	r3, #0
   2b294:	beq	2b87c <__assert_fail@plt+0x1a650>
   2b298:	ldr	r3, [r6, #16]
   2b29c:	cmp	r3, #0
   2b2a0:	beq	2b87c <__assert_fail@plt+0x1a650>
   2b2a4:	ldr	r3, [r6, #20]
   2b2a8:	cmp	r3, #0
   2b2ac:	beq	2b87c <__assert_fail@plt+0x1a650>
   2b2b0:	cmp	r0, #0
   2b2b4:	beq	2b87c <__assert_fail@plt+0x1a650>
   2b2b8:	ldr	r0, [r5, #24]
   2b2bc:	lsl	r0, r0, #2
   2b2c0:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2b2c4:	cmp	r0, #0
   2b2c8:	str	r0, [r6, #132]	; 0x84
   2b2cc:	beq	2b350 <__assert_fail@plt+0x1a124>
   2b2d0:	ldr	r2, [r5, #24]
   2b2d4:	cmp	r2, #0
   2b2d8:	subne	r0, r0, #4
   2b2dc:	movne	r3, r9
   2b2e0:	beq	2b2f4 <__assert_fail@plt+0x1a0c8>
   2b2e4:	str	r3, [r0, #4]!
   2b2e8:	add	r3, r3, #1
   2b2ec:	cmp	r3, r2
   2b2f0:	bne	2b2e4 <__assert_fail@plt+0x1a0b8>
   2b2f4:	movw	r1, #1940	; 0x794
   2b2f8:	movt	r1, #2
   2b2fc:	ldr	r0, [r6, #52]	; 0x34
   2b300:	mov	r2, r6
   2b304:	bl	20ad0 <__assert_fail@plt+0xf8a4>
   2b308:	ldr	ip, [r5, #24]
   2b30c:	cmp	ip, #0
   2b310:	beq	2baf4 <__assert_fail@plt+0x1a8c8>
   2b314:	ldr	r0, [r6, #132]	; 0x84
   2b318:	ldr	r3, [r0]
   2b31c:	cmp	r3, #0
   2b320:	bne	2b350 <__assert_fail@plt+0x1a124>
   2b324:	mov	r2, r0
   2b328:	b	2b338 <__assert_fail@plt+0x1a10c>
   2b32c:	ldr	r1, [r2, #4]!
   2b330:	cmp	r1, r3
   2b334:	bne	2b350 <__assert_fail@plt+0x1a124>
   2b338:	add	r3, r3, #1
   2b33c:	cmp	r3, ip
   2b340:	bne	2b32c <__assert_fail@plt+0x1a100>
   2b344:	bl	13254 <__assert_fail@plt+0x2028>
   2b348:	mov	r3, #0
   2b34c:	str	r3, [r6, #132]	; 0x84
   2b350:	movw	r1, #4436	; 0x1154
   2b354:	movt	r1, #2
   2b358:	ldr	r0, [r6, #52]	; 0x34
   2b35c:	mov	r2, r5
   2b360:	bl	1e928 <__assert_fail@plt+0xd6fc>
   2b364:	cmp	r0, #0
   2b368:	bne	2b068 <__assert_fail@plt+0x19e3c>
   2b36c:	movw	r1, #6576	; 0x19b0
   2b370:	movt	r1, #2
   2b374:	ldr	r0, [r6, #52]	; 0x34
   2b378:	mov	r2, r6
   2b37c:	bl	1e928 <__assert_fail@plt+0xd6fc>
   2b380:	cmp	r0, #0
   2b384:	bne	2b068 <__assert_fail@plt+0x19e3c>
   2b388:	mov	r2, r6
   2b38c:	movw	r1, #2108	; 0x83c
   2b390:	movt	r1, #2
   2b394:	ldr	r0, [r6, #52]	; 0x34
   2b398:	bl	20ad0 <__assert_fail@plt+0xf8a4>
   2b39c:	mov	r2, r6
   2b3a0:	movw	r1, #65032	; 0xfe08
   2b3a4:	movt	r1, #1
   2b3a8:	ldr	r0, [r6, #52]	; 0x34
   2b3ac:	bl	20ad0 <__assert_fail@plt+0xf8a4>
   2b3b0:	subs	r3, r0, #0
   2b3b4:	str	r3, [sp, #12]
   2b3b8:	bne	2bad0 <__assert_fail@plt+0x1a8a4>
   2b3bc:	ldr	r1, [r6, #24]
   2b3c0:	mov	sl, r3
   2b3c4:	mov	r8, r3
   2b3c8:	add	r9, r8, r8, lsl #1
   2b3cc:	lsl	r9, r9, #2
   2b3d0:	add	r3, r1, r9
   2b3d4:	ldr	r3, [r3, #4]
   2b3d8:	cmp	r3, #0
   2b3dc:	addne	r8, r8, #1
   2b3e0:	bne	2b418 <__assert_fail@plt+0x1a1ec>
   2b3e4:	mov	r3, #1
   2b3e8:	mov	r2, r8
   2b3ec:	mov	r1, r6
   2b3f0:	mov	r0, r7
   2b3f4:	bl	22030 <__assert_fail@plt+0x10e04>
   2b3f8:	cmp	r0, #0
   2b3fc:	bne	2b068 <__assert_fail@plt+0x19e3c>
   2b400:	ldr	r1, [r6, #24]
   2b404:	add	r8, r8, #1
   2b408:	add	r9, r1, r9
   2b40c:	ldr	r9, [r9, #4]
   2b410:	cmp	r9, #0
   2b414:	beq	2b55c <__assert_fail@plt+0x1a330>
   2b418:	ldr	r3, [r6, #8]
   2b41c:	cmp	r8, r3
   2b420:	bne	2b3c8 <__assert_fail@plt+0x1a19c>
   2b424:	cmp	sl, #0
   2b428:	beq	2b580 <__assert_fail@plt+0x1a354>
   2b42c:	mov	sl, #0
   2b430:	mov	r8, sl
   2b434:	b	2b3c8 <__assert_fail@plt+0x1a19c>
   2b438:	mov	r3, #12
   2b43c:	str	r3, [sp, #28]
   2b440:	mov	r0, r4
   2b444:	bl	21a50 <__assert_fail@plt+0x10824>
   2b448:	ldr	r0, [sp, #28]
   2b44c:	mov	r3, #0
   2b450:	str	r3, [r5]
   2b454:	str	r3, [r5, #4]
   2b458:	add	sp, sp, #140	; 0x8c
   2b45c:	ldrd	r4, [sp]
   2b460:	ldrd	r6, [sp, #8]
   2b464:	ldrd	r8, [sp, #16]
   2b468:	ldrd	sl, [sp, #24]
   2b46c:	add	sp, sp, #32
   2b470:	pop	{pc}		; (ldr pc, [sp], #4)
   2b474:	mov	r1, r9
   2b478:	add	r0, sp, #52	; 0x34
   2b47c:	str	r2, [sp, #12]
   2b480:	bl	1ee20 <__assert_fail@plt+0xdbf4>
   2b484:	cmp	r0, #0
   2b488:	bne	2b068 <__assert_fail@plt+0x19e3c>
   2b48c:	ldrb	r1, [sp, #127]	; 0x7f
   2b490:	ldr	r2, [sp, #12]
   2b494:	ldr	r0, [r4, #92]	; 0x5c
   2b498:	b	2b004 <__assert_fail@plt+0x19dd8>
   2b49c:	mov	r1, #1
   2b4a0:	mov	r0, #32
   2b4a4:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   2b4a8:	cmp	r0, #0
   2b4ac:	str	r0, [r4, #60]	; 0x3c
   2b4b0:	beq	2b438 <__assert_fail@plt+0x1a20c>
   2b4b4:	str	r5, [sp, #8]
   2b4b8:	mov	r5, r4
   2b4bc:	lsl	fp, sl, #3
   2b4c0:	mov	r4, #0
   2b4c4:	b	2b4ec <__assert_fail@plt+0x1a2c0>
   2b4c8:	cmp	r3, #0
   2b4cc:	bne	2b4dc <__assert_fail@plt+0x1a2b0>
   2b4d0:	ldrb	r3, [r5, #88]	; 0x58
   2b4d4:	orr	r3, r3, #8
   2b4d8:	strb	r3, [r5, #88]	; 0x58
   2b4dc:	add	r4, r4, #1
   2b4e0:	add	fp, fp, #1
   2b4e4:	cmp	r4, #32
   2b4e8:	beq	2b534 <__assert_fail@plt+0x1a308>
   2b4ec:	mov	r0, fp
   2b4f0:	bl	11178 <btowc@plt>
   2b4f4:	cmn	r0, #1
   2b4f8:	bic	r3, fp, #127	; 0x7f
   2b4fc:	beq	2b4c8 <__assert_fail@plt+0x1a29c>
   2b500:	ldr	r1, [r5, #60]	; 0x3c
   2b504:	cmp	r3, #0
   2b508:	mov	r2, #1
   2b50c:	ldr	r3, [r1, sl]
   2b510:	orr	r3, r3, r2, lsl r4
   2b514:	str	r3, [r1, sl]
   2b518:	bne	2b4dc <__assert_fail@plt+0x1a2b0>
   2b51c:	cmp	r0, fp
   2b520:	bne	2b4d0 <__assert_fail@plt+0x1a2a4>
   2b524:	add	r4, r4, #1
   2b528:	add	fp, fp, #1
   2b52c:	cmp	r4, #32
   2b530:	bne	2b4ec <__assert_fail@plt+0x1a2c0>
   2b534:	add	sl, sl, #4
   2b538:	cmp	sl, #32
   2b53c:	bne	2b4bc <__assert_fail@plt+0x1a290>
   2b540:	mov	r4, r5
   2b544:	ldr	r5, [sp, #8]
   2b548:	b	2af1c <__assert_fail@plt+0x19cf0>
   2b54c:	str	fp, [sp, #28]
   2b550:	str	r1, [sp, #80]	; 0x50
   2b554:	str	r1, [sp, #84]	; 0x54
   2b558:	b	2b138 <__assert_fail@plt+0x19f0c>
   2b55c:	ldr	r0, [sp, #48]	; 0x30
   2b560:	bl	13254 <__assert_fail@plt+0x2028>
   2b564:	ldr	r3, [r6, #8]
   2b568:	cmp	r3, r8
   2b56c:	moveq	sl, r9
   2b570:	moveq	r8, sl
   2b574:	movne	sl, #1
   2b578:	ldr	r1, [r6, #24]
   2b57c:	b	2b3c8 <__assert_fail@plt+0x1a19c>
   2b580:	ldrb	r3, [r5, #28]
   2b584:	tst	r3, #16
   2b588:	bne	2b5a4 <__assert_fail@plt+0x1a378>
   2b58c:	ldr	r3, [r5, #24]
   2b590:	cmp	r3, #0
   2b594:	beq	2b5a4 <__assert_fail@plt+0x1a378>
   2b598:	ldrb	r3, [r6, #88]	; 0x58
   2b59c:	tst	r3, #1
   2b5a0:	bne	2b5b0 <__assert_fail@plt+0x1a384>
   2b5a4:	ldr	r3, [r6, #76]	; 0x4c
   2b5a8:	cmp	r3, #0
   2b5ac:	beq	2b6a8 <__assert_fail@plt+0x1a47c>
   2b5b0:	add	r8, r8, r8, lsl #1
   2b5b4:	lsl	r0, r8, #2
   2b5b8:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2b5bc:	cmp	r0, #0
   2b5c0:	str	r0, [r6, #28]
   2b5c4:	beq	2b87c <__assert_fail@plt+0x1a650>
   2b5c8:	ldr	r3, [r6, #8]
   2b5cc:	cmp	r3, #0
   2b5d0:	movne	r3, #0
   2b5d4:	movne	r2, r3
   2b5d8:	bne	2b5e4 <__assert_fail@plt+0x1a3b8>
   2b5dc:	b	2b6a8 <__assert_fail@plt+0x1a47c>
   2b5e0:	ldr	r0, [r6, #28]
   2b5e4:	add	ip, r3, r3, lsl #1
   2b5e8:	add	r3, r3, #1
   2b5ec:	add	r1, r0, ip, lsl #2
   2b5f0:	str	r2, [r0, ip, lsl #2]
   2b5f4:	str	r2, [r1, #4]
   2b5f8:	str	r2, [r1, #8]
   2b5fc:	ldr	r0, [r6, #8]
   2b600:	cmp	r0, r3
   2b604:	bhi	2b5e0 <__assert_fail@plt+0x1a3b4>
   2b608:	cmp	r0, #0
   2b60c:	beq	2b6a8 <__assert_fail@plt+0x1a47c>
   2b610:	mov	r3, #0
   2b614:	ldr	r1, [r6, #24]
   2b618:	mov	r9, r3
   2b61c:	str	r7, [sp, #20]
   2b620:	mov	r7, r6
   2b624:	mov	r6, r3
   2b628:	str	sl, [sp, #16]
   2b62c:	add	r3, r1, r9
   2b630:	ldr	ip, [r3, #4]
   2b634:	ldr	r3, [r3, #8]
   2b638:	cmp	ip, #0
   2b63c:	movgt	r8, #0
   2b640:	subgt	sl, r3, #4
   2b644:	bgt	2b664 <__assert_fail@plt+0x1a438>
   2b648:	b	2b690 <__assert_fail@plt+0x1a464>
   2b64c:	ldr	r1, [r7, #24]
   2b650:	add	r8, r8, #1
   2b654:	add	r3, r1, r9
   2b658:	ldr	r3, [r3, #4]
   2b65c:	cmp	r8, r3
   2b660:	bge	2b68c <__assert_fail@plt+0x1a460>
   2b664:	ldr	r3, [sl, #4]!
   2b668:	mov	r1, r6
   2b66c:	ldr	r0, [r7, #28]
   2b670:	add	r3, r3, r3, lsl #1
   2b674:	add	r0, r0, r3, lsl #2
   2b678:	bl	1eed8 <__assert_fail@plt+0xdcac>
   2b67c:	cmp	r0, #0
   2b680:	bne	2b64c <__assert_fail@plt+0x1a420>
   2b684:	mov	r0, #12
   2b688:	b	2b068 <__assert_fail@plt+0x19e3c>
   2b68c:	ldr	r0, [r7, #8]
   2b690:	add	r6, r6, #1
   2b694:	add	r9, r9, #12
   2b698:	cmp	r0, r6
   2b69c:	bhi	2b62c <__assert_fail@plt+0x1a400>
   2b6a0:	ldr	sl, [sp, #16]
   2b6a4:	ldr	r7, [sp, #20]
   2b6a8:	clz	fp, fp
   2b6ac:	mov	r2, #0
   2b6b0:	ldrb	r3, [r4, #88]	; 0x58
   2b6b4:	lsr	fp, fp, #5
   2b6b8:	str	r2, [sp, #28]
   2b6bc:	ands	fp, fp, r3, lsr #2
   2b6c0:	bne	2b89c <__assert_fail@plt+0x1a670>
   2b6c4:	ldr	r2, [r4, #24]
   2b6c8:	mov	r0, r7
   2b6cc:	ldr	r3, [r4, #52]	; 0x34
   2b6d0:	ldr	r3, [r3, #12]
   2b6d4:	ldr	r3, [r3, #28]
   2b6d8:	add	r1, r3, r3, lsl #1
   2b6dc:	str	r3, [r4, #72]	; 0x48
   2b6e0:	add	r1, r2, r1, lsl #2
   2b6e4:	bl	211ec <__assert_fail@plt+0xffc0>
   2b6e8:	cmp	r0, #0
   2b6ec:	mov	r8, r0
   2b6f0:	str	r0, [sp, #32]
   2b6f4:	bne	2b814 <__assert_fail@plt+0x1a5e8>
   2b6f8:	ldr	r3, [r4, #76]	; 0x4c
   2b6fc:	cmp	r3, #0
   2b700:	ble	2b7d4 <__assert_fail@plt+0x1a5a8>
   2b704:	ldr	r9, [sp, #44]	; 0x2c
   2b708:	cmp	r9, #0
   2b70c:	ble	2b7d4 <__assert_fail@plt+0x1a5a8>
   2b710:	mov	r6, r0
   2b714:	b	2b724 <__assert_fail@plt+0x1a4f8>
   2b718:	add	r6, r6, #1
   2b71c:	cmp	r9, r6
   2b720:	ble	2b7d4 <__assert_fail@plt+0x1a5a8>
   2b724:	ldr	r2, [sp, #48]	; 0x30
   2b728:	ldr	r0, [r4]
   2b72c:	ldr	r3, [r2, r6, lsl #2]
   2b730:	add	ip, r0, r3, lsl #3
   2b734:	ldrb	r1, [ip, #4]
   2b738:	cmp	r1, #4
   2b73c:	bne	2b718 <__assert_fail@plt+0x1a4ec>
   2b740:	sub	r2, r2, #4
   2b744:	mov	r1, #0
   2b748:	b	2b758 <__assert_fail@plt+0x1a52c>
   2b74c:	add	r1, r1, #1
   2b750:	cmp	r9, r1
   2b754:	beq	2b718 <__assert_fail@plt+0x1a4ec>
   2b758:	ldr	lr, [r2, #4]!
   2b75c:	add	sl, r0, lr, lsl #3
   2b760:	ldrb	sl, [sl, #4]
   2b764:	cmp	sl, #9
   2b768:	bne	2b74c <__assert_fail@plt+0x1a520>
   2b76c:	ldr	sl, [r0, lr, lsl #3]
   2b770:	ldr	lr, [ip]
   2b774:	cmp	sl, lr
   2b778:	bne	2b74c <__assert_fail@plt+0x1a520>
   2b77c:	ldr	r2, [r4, #20]
   2b780:	add	r3, r3, r3, lsl #1
   2b784:	add	r1, sp, #48	; 0x30
   2b788:	mov	r0, r9
   2b78c:	add	r3, r2, r3, lsl #2
   2b790:	ldr	r3, [r3, #8]
   2b794:	ldr	sl, [r3]
   2b798:	mov	r2, sl
   2b79c:	bl	205c4 <__assert_fail@plt+0xf398>
   2b7a0:	cmp	r0, #0
   2b7a4:	bne	2b718 <__assert_fail@plt+0x1a4ec>
   2b7a8:	ldr	r1, [r4, #24]
   2b7ac:	add	sl, sl, sl, lsl #1
   2b7b0:	mov	r0, r7
   2b7b4:	add	r1, r1, sl, lsl #2
   2b7b8:	bl	21e88 <__assert_fail@plt+0x10c5c>
   2b7bc:	cmp	r0, #0
   2b7c0:	bne	2bad8 <__assert_fail@plt+0x1a8ac>
   2b7c4:	ldr	r9, [sp, #44]	; 0x2c
   2b7c8:	mov	r6, #1
   2b7cc:	cmp	r9, r6
   2b7d0:	bgt	2b724 <__assert_fail@plt+0x1a4f8>
   2b7d4:	mov	r3, #0
   2b7d8:	mov	r2, r7
   2b7dc:	mov	r1, r4
   2b7e0:	add	r0, sp, #32
   2b7e4:	bl	213e0 <__assert_fail@plt+0x101b4>
   2b7e8:	cmp	r0, #0
   2b7ec:	str	r0, [r4, #36]	; 0x24
   2b7f0:	beq	2b96c <__assert_fail@plt+0x1a740>
   2b7f4:	ldrsb	r3, [r0, #52]	; 0x34
   2b7f8:	cmp	r3, #0
   2b7fc:	strge	r0, [r4, #40]	; 0x28
   2b800:	strge	r0, [r4, #44]	; 0x2c
   2b804:	strge	r0, [r4, #48]	; 0x30
   2b808:	blt	2b908 <__assert_fail@plt+0x1a6dc>
   2b80c:	ldr	r0, [sp, #48]	; 0x30
   2b810:	bl	13254 <__assert_fail@plt+0x2028>
   2b814:	ldr	r6, [r5]
   2b818:	str	r8, [sp, #28]
   2b81c:	ldr	r0, [r6, #56]	; 0x38
   2b820:	cmp	r0, #0
   2b824:	beq	2b838 <__assert_fail@plt+0x1a60c>
   2b828:	ldr	r7, [r0]
   2b82c:	bl	13254 <__assert_fail@plt+0x2028>
   2b830:	subs	r0, r7, #0
   2b834:	bne	2b828 <__assert_fail@plt+0x1a5fc>
   2b838:	mov	r7, #0
   2b83c:	mov	r3, #31
   2b840:	ldr	r0, [r6, #16]
   2b844:	str	r7, [r6, #52]	; 0x34
   2b848:	str	r7, [r6, #56]	; 0x38
   2b84c:	str	r3, [r6, #64]	; 0x40
   2b850:	bl	13254 <__assert_fail@plt+0x2028>
   2b854:	add	r0, sp, #52	; 0x34
   2b858:	str	r7, [r6, #16]
   2b85c:	bl	1fd00 <__assert_fail@plt+0xead4>
   2b860:	ldr	r0, [sp, #28]
   2b864:	cmp	r0, r7
   2b868:	beq	2b458 <__assert_fail@plt+0x1a22c>
   2b86c:	ldr	r3, [sp, #8]
   2b870:	cmp	r3, #0
   2b874:	bne	2b0c0 <__assert_fail@plt+0x19e94>
   2b878:	b	2b440 <__assert_fail@plt+0x1a214>
   2b87c:	mov	r3, #12
   2b880:	ldr	r6, [r5]
   2b884:	str	r3, [sp, #28]
   2b888:	b	2b070 <__assert_fail@plt+0x19e44>
   2b88c:	add	r0, sp, #52	; 0x34
   2b890:	bl	1f070 <__assert_fail@plt+0xde44>
   2b894:	str	fp, [sp, #28]
   2b898:	b	2b138 <__assert_fail@plt+0x19f0c>
   2b89c:	ldr	r3, [r5, #20]
   2b8a0:	cmp	r3, #0
   2b8a4:	bne	2b6c4 <__assert_fail@plt+0x1a498>
   2b8a8:	ldr	r0, [r4, #8]
   2b8ac:	cmp	r0, #0
   2b8b0:	beq	2bb10 <__assert_fail@plt+0x1a8e4>
   2b8b4:	ldr	ip, [r4]
   2b8b8:	mov	r1, r3
   2b8bc:	ldr	lr, [sp, #12]
   2b8c0:	mov	r2, ip
   2b8c4:	ldrb	r3, [r2, #4]
   2b8c8:	sub	r3, r3, #1
   2b8cc:	cmp	r3, #11
   2b8d0:	ldrls	pc, [pc, r3, lsl #2]
   2b8d4:	b	2bb40 <__assert_fail@plt+0x1a914>
   2b8d8:	andeq	fp, r2, r8, ror sl
   2b8dc:	andeq	fp, r2, r0, lsl sl
   2b8e0:	andeq	fp, r2, ip, lsr #21
   2b8e4:	andeq	fp, r2, r0, lsl sl
   2b8e8:	andeq	fp, r2, ip, lsl #20
   2b8ec:	andeq	fp, r2, r4, asr #13
   2b8f0:	andeq	fp, r2, r0, asr #22
   2b8f4:	andeq	fp, r2, r0, lsl sl
   2b8f8:	andeq	fp, r2, r0, lsl sl
   2b8fc:	andeq	fp, r2, r0, lsl sl
   2b900:	andeq	fp, r2, r0, lsl sl
   2b904:	andeq	fp, r2, r8, lsl #21
   2b908:	mov	r3, #1
   2b90c:	mov	r2, r7
   2b910:	mov	r1, r4
   2b914:	add	r0, sp, #32
   2b918:	bl	213e0 <__assert_fail@plt+0x101b4>
   2b91c:	mov	r3, #2
   2b920:	mov	r2, r7
   2b924:	str	r0, [r4, #40]	; 0x28
   2b928:	mov	r1, r4
   2b92c:	add	r0, sp, #32
   2b930:	bl	213e0 <__assert_fail@plt+0x101b4>
   2b934:	mov	r3, #6
   2b938:	mov	r2, r7
   2b93c:	str	r0, [r4, #44]	; 0x2c
   2b940:	mov	r1, r4
   2b944:	add	r0, sp, #32
   2b948:	bl	213e0 <__assert_fail@plt+0x101b4>
   2b94c:	ldr	r3, [r4, #40]	; 0x28
   2b950:	str	r0, [r4, #48]	; 0x30
   2b954:	cmp	r3, #0
   2b958:	beq	2b96c <__assert_fail@plt+0x1a740>
   2b95c:	ldr	r3, [r4, #44]	; 0x2c
   2b960:	cmp	r0, #0
   2b964:	cmpne	r3, #0
   2b968:	bne	2b80c <__assert_fail@plt+0x1a5e0>
   2b96c:	ldr	r8, [sp, #32]
   2b970:	b	2b814 <__assert_fail@plt+0x1a5e8>
   2b974:	add	r0, sp, #52	; 0x34
   2b978:	bl	1f7d0 <__assert_fail@plt+0xe5a4>
   2b97c:	mov	r3, #0
   2b980:	str	r3, [sp, #28]
   2b984:	b	2b138 <__assert_fail@plt+0x19f0c>
   2b988:	mov	r0, r4
   2b98c:	mov	r1, #160	; 0xa0
   2b990:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2b994:	subs	r4, r0, #0
   2b998:	beq	2bafc <__assert_fail@plt+0x1a8d0>
   2b99c:	mov	r3, #160	; 0xa0
   2b9a0:	str	r4, [r5]
   2b9a4:	str	r3, [r5, #4]
   2b9a8:	b	2ae08 <__assert_fail@plt+0x19bdc>
   2b9ac:	mov	sl, r6
   2b9b0:	mov	r1, #1
   2b9b4:	b	2ae68 <__assert_fail@plt+0x19c3c>
   2b9b8:	cmp	r0, r8
   2b9bc:	beq	2bb04 <__assert_fail@plt+0x1a8d8>
   2b9c0:	mov	r2, #0
   2b9c4:	mov	r3, #0
   2b9c8:	add	r7, sp, #40	; 0x28
   2b9cc:	mov	ip, #2
   2b9d0:	add	sl, r6, #56	; 0x38
   2b9d4:	add	r6, r6, #64	; 0x40
   2b9d8:	mov	r0, sl
   2b9dc:	mov	r1, r6
   2b9e0:	str	r7, [sp]
   2b9e4:	strd	r2, [sp, #40]	; 0x28
   2b9e8:	mov	r3, r8
   2b9ec:	mov	r2, r8
   2b9f0:	strb	ip, [sp, #44]	; 0x2c
   2b9f4:	bl	20d30 <__assert_fail@plt+0xfb04>
   2b9f8:	mov	lr, r0
   2b9fc:	b	2b1dc <__assert_fail@plt+0x19fb0>
   2ba00:	mov	r3, #0
   2ba04:	str	r3, [sp, #28]
   2ba08:	b	2b138 <__assert_fail@plt+0x19f0c>
   2ba0c:	mov	r1, fp
   2ba10:	add	lr, lr, #1
   2ba14:	add	r2, r2, #8
   2ba18:	cmp	lr, r0
   2ba1c:	bne	2b8c4 <__assert_fail@plt+0x1a698>
   2ba20:	orr	sl, sl, r1
   2ba24:	ands	sl, sl, #255	; 0xff
   2ba28:	moveq	r1, sl
   2ba2c:	beq	2bb14 <__assert_fail@plt+0x1a8e8>
   2ba30:	add	r2, ip, lr, lsl #3
   2ba34:	mov	r0, #7
   2ba38:	b	2ba50 <__assert_fail@plt+0x1a824>
   2ba3c:	cmp	r3, #5
   2ba40:	strbeq	r0, [ip, #4]
   2ba44:	add	ip, ip, #8
   2ba48:	cmp	r2, ip
   2ba4c:	beq	2bb14 <__assert_fail@plt+0x1a8e8>
   2ba50:	ldrb	r3, [ip, #4]
   2ba54:	cmp	r3, #1
   2ba58:	bne	2ba3c <__assert_fail@plt+0x1a810>
   2ba5c:	ldrsb	r3, [ip]
   2ba60:	cmp	r3, #0
   2ba64:	bge	2ba44 <__assert_fail@plt+0x1a818>
   2ba68:	ldrb	r3, [ip, #6]
   2ba6c:	bfc	r3, #5, #1
   2ba70:	strb	r3, [ip, #6]
   2ba74:	b	2ba44 <__assert_fail@plt+0x1a818>
   2ba78:	ldrsb	r3, [r2]
   2ba7c:	cmp	r3, #0
   2ba80:	movlt	sl, fp
   2ba84:	b	2ba10 <__assert_fail@plt+0x1a7e4>
   2ba88:	ldr	r3, [r2]
   2ba8c:	cmp	r3, #32
   2ba90:	beq	2ba10 <__assert_fail@plt+0x1a7e4>
   2ba94:	bls	2bae0 <__assert_fail@plt+0x1a8b4>
   2ba98:	cmp	r3, #64	; 0x40
   2ba9c:	beq	2ba10 <__assert_fail@plt+0x1a7e4>
   2baa0:	cmp	r3, #128	; 0x80
   2baa4:	beq	2ba10 <__assert_fail@plt+0x1a7e4>
   2baa8:	b	2b6c4 <__assert_fail@plt+0x1a498>
   2baac:	ldr	r6, [r2]
   2bab0:	add	r3, r6, #12
   2bab4:	add	r6, r6, #28
   2bab8:	ldr	r8, [r3, #4]!
   2babc:	cmp	r8, #0
   2bac0:	bne	2b6c4 <__assert_fail@plt+0x1a498>
   2bac4:	cmp	r6, r3
   2bac8:	bne	2bab8 <__assert_fail@plt+0x1a88c>
   2bacc:	b	2ba10 <__assert_fail@plt+0x1a7e4>
   2bad0:	ldr	r0, [sp, #12]
   2bad4:	b	2b068 <__assert_fail@plt+0x19e3c>
   2bad8:	mov	r8, r0
   2badc:	b	2b814 <__assert_fail@plt+0x1a5e8>
   2bae0:	cmp	r3, #16
   2bae4:	beq	2ba10 <__assert_fail@plt+0x1a7e4>
   2bae8:	b	2b6c4 <__assert_fail@plt+0x1a498>
   2baec:	mov	r1, r3
   2baf0:	b	2b128 <__assert_fail@plt+0x19efc>
   2baf4:	ldr	r0, [r6, #132]	; 0x84
   2baf8:	b	2b344 <__assert_fail@plt+0x1a118>
   2bafc:	mov	r0, #12
   2bb00:	b	2b458 <__assert_fail@plt+0x1a22c>
   2bb04:	ldr	r6, [r5]
   2bb08:	str	r0, [r4, #52]	; 0x34
   2bb0c:	b	2b070 <__assert_fail@plt+0x19e44>
   2bb10:	mov	r1, r0
   2bb14:	ldrb	r2, [r4, #88]	; 0x58
   2bb18:	mov	r0, #1
   2bb1c:	ldr	r3, [r4, #76]	; 0x4c
   2bb20:	str	r0, [r4, #92]	; 0x5c
   2bb24:	and	r2, r2, #251	; 0xfb
   2bb28:	cmp	r3, #0
   2bb2c:	movle	r3, r1
   2bb30:	orrgt	r3, r1, #1
   2bb34:	bfi	r2, r3, #1, #1
   2bb38:	strb	r2, [r4, #88]	; 0x58
   2bb3c:	b	2b6c4 <__assert_fail@plt+0x1a498>
   2bb40:	bl	11220 <abort@plt>
   2bb44:	movw	r3, #720	; 0x2d0
   2bb48:	movt	r3, #4
   2bb4c:	str	r4, [sp, #-8]!
   2bb50:	ldr	r3, [r3]
   2bb54:	str	lr, [sp, #4]
   2bb58:	mov	lr, r2
   2bb5c:	mov	r2, r1
   2bb60:	ldrb	ip, [lr, #28]
   2bb64:	mov	r1, r0
   2bb68:	mov	r0, lr
   2bb6c:	ubfx	r4, r3, #25, #1
   2bb70:	bfi	ip, r4, #4, #1
   2bb74:	mvn	ip, ip, lsl #25
   2bb78:	mvn	ip, ip, lsr #25
   2bb7c:	strb	ip, [lr, #28]
   2bb80:	bl	2adb0 <__assert_fail@plt+0x19b84>
   2bb84:	subs	r3, r0, #0
   2bb88:	beq	2bbbc <__assert_fail@plt+0x1a990>
   2bb8c:	movw	r1, #61300	; 0xef74
   2bb90:	movt	r1, #2
   2bb94:	ldr	r4, [sp]
   2bb98:	add	r3, r1, r3, lsl #2
   2bb9c:	add	r1, r1, #32
   2bba0:	mov	r2, #5
   2bba4:	mov	r0, #0
   2bba8:	ldr	lr, [sp, #4]
   2bbac:	add	sp, sp, #8
   2bbb0:	ldr	r3, [r3, #416]	; 0x1a0
   2bbb4:	add	r1, r1, r3
   2bbb8:	b	1101c <dcgettext@plt>
   2bbbc:	ldr	r4, [sp]
   2bbc0:	add	sp, sp, #4
   2bbc4:	pop	{pc}		; (ldr pc, [sp], #4)
   2bbc8:	movw	r3, #720	; 0x2d0
   2bbcc:	movt	r3, #4
   2bbd0:	ldr	r2, [r3]
   2bbd4:	str	r0, [r3]
   2bbd8:	mov	r0, r2
   2bbdc:	bx	lr
   2bbe0:	strd	r4, [sp, #-16]!
   2bbe4:	mov	r2, #256	; 0x100
   2bbe8:	mov	r4, r0
   2bbec:	ldr	r5, [r0]
   2bbf0:	mov	r1, #0
   2bbf4:	str	r6, [sp, #8]
   2bbf8:	ldr	r6, [r0, #16]
   2bbfc:	str	lr, [sp, #12]
   2bc00:	mov	r0, r6
   2bc04:	bl	1116c <memset@plt>
   2bc08:	ldr	r1, [r5, #36]	; 0x24
   2bc0c:	mov	r3, r6
   2bc10:	mov	r0, r4
   2bc14:	add	r2, r1, #12
   2bc18:	add	r1, r1, #8
   2bc1c:	bl	249e4 <__assert_fail@plt+0x137b8>
   2bc20:	ldr	r3, [r5, #36]	; 0x24
   2bc24:	ldr	r0, [r5, #40]	; 0x28
   2bc28:	cmp	r3, r0
   2bc2c:	beq	2bc48 <__assert_fail@plt+0x1aa1c>
   2bc30:	add	r2, r0, #12
   2bc34:	add	r1, r0, #8
   2bc38:	mov	r3, r6
   2bc3c:	mov	r0, r4
   2bc40:	bl	249e4 <__assert_fail@plt+0x137b8>
   2bc44:	ldr	r0, [r5, #36]	; 0x24
   2bc48:	ldr	r1, [r5, #44]	; 0x2c
   2bc4c:	cmp	r1, r0
   2bc50:	beq	2bc6c <__assert_fail@plt+0x1aa40>
   2bc54:	add	r2, r1, #12
   2bc58:	mov	r0, r4
   2bc5c:	mov	r3, r6
   2bc60:	add	r1, r1, #8
   2bc64:	bl	249e4 <__assert_fail@plt+0x137b8>
   2bc68:	ldr	r0, [r5, #36]	; 0x24
   2bc6c:	ldr	r1, [r5, #48]	; 0x30
   2bc70:	cmp	r1, r0
   2bc74:	beq	2bc8c <__assert_fail@plt+0x1aa60>
   2bc78:	add	r2, r1, #12
   2bc7c:	mov	r3, r6
   2bc80:	add	r1, r1, #8
   2bc84:	mov	r0, r4
   2bc88:	bl	249e4 <__assert_fail@plt+0x137b8>
   2bc8c:	ldrb	r3, [r4, #28]
   2bc90:	mov	r0, #0
   2bc94:	ldr	r6, [sp, #8]
   2bc98:	orr	r3, r3, #8
   2bc9c:	strb	r3, [r4, #28]
   2bca0:	ldrd	r4, [sp]
   2bca4:	add	sp, sp, #12
   2bca8:	pop	{pc}		; (ldr pc, [sp], #4)
   2bcac:	cmp	r3, r2
   2bcb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bcb4:	strd	r6, [sp, #8]
   2bcb8:	strd	r8, [sp, #16]
   2bcbc:	strd	sl, [sp, #24]
   2bcc0:	str	lr, [sp, #32]
   2bcc4:	sub	sp, sp, #52	; 0x34
   2bcc8:	movle	lr, #0
   2bccc:	movgt	lr, #1
   2bcd0:	ldr	ip, [sp, #88]	; 0x58
   2bcd4:	orrs	lr, lr, r3, lsr #31
   2bcd8:	ldrb	lr, [sp, #100]	; 0x64
   2bcdc:	ldr	r8, [sp, #96]	; 0x60
   2bce0:	add	r7, r3, ip
   2bce4:	str	lr, [sp, #36]	; 0x24
   2bce8:	ldr	lr, [r0]
   2bcec:	str	lr, [sp, #28]
   2bcf0:	bne	2bfe4 <__assert_fail@plt+0x1adb8>
   2bcf4:	cmp	r7, r2
   2bcf8:	mov	r4, r0
   2bcfc:	str	r2, [sp, #32]
   2bd00:	mov	fp, r3
   2bd04:	str	r1, [sp, #40]	; 0x28
   2bd08:	bgt	2bf90 <__assert_fail@plt+0x1ad64>
   2bd0c:	cmp	ip, #0
   2bd10:	cmpge	fp, r7
   2bd14:	bgt	2bf90 <__assert_fail@plt+0x1ad64>
   2bd18:	cmp	r7, #0
   2bd1c:	blt	2bf98 <__assert_fail@plt+0x1ad6c>
   2bd20:	cmp	fp, r7
   2bd24:	movgt	r2, #0
   2bd28:	movle	r2, #1
   2bd2c:	ands	r3, r2, ip, lsr #31
   2bd30:	bne	2bf98 <__assert_fail@plt+0x1ad6c>
   2bd34:	movw	r2, #0
   2bd38:	movt	r2, #0
   2bd3c:	cmp	r2, #0
   2bd40:	mov	r5, #1
   2bd44:	moveq	r5, r2
   2bd48:	movw	r2, #0
   2bd4c:	movt	r2, #0
   2bd50:	mov	r0, #1
   2bd54:	cmp	r2, #0
   2bd58:	moveq	r0, r2
   2bd5c:	orr	r5, r5, r0
   2bd60:	ands	r5, r5, #255	; 0xff
   2bd64:	beq	2bd78 <__assert_fail@plt+0x1ab4c>
   2bd68:	ldr	r3, [sp, #28]
   2bd6c:	mov	r5, #1
   2bd70:	add	r0, r3, #136	; 0x88
   2bd74:	bl	10fbc <pthread_mutex_lock@plt>
   2bd78:	ldrb	r0, [r4, #28]
   2bd7c:	cmp	fp, r7
   2bd80:	ubfx	r3, r0, #5, #2
   2bd84:	str	r3, [sp, #44]	; 0x2c
   2bd88:	bge	2bda0 <__assert_fail@plt+0x1ab74>
   2bd8c:	ldr	r2, [r4, #16]
   2bd90:	cmp	r2, #0
   2bd94:	beq	2bda0 <__assert_fail@plt+0x1ab74>
   2bd98:	tst	r0, #8
   2bd9c:	beq	2bf3c <__assert_fail@plt+0x1ad10>
   2bda0:	ubfx	r2, r0, #4, #1
   2bda4:	cmp	r8, #0
   2bda8:	orreq	r2, r2, #1
   2bdac:	ands	r2, r2, #255	; 0xff
   2bdb0:	bne	2bf28 <__assert_fail@plt+0x1acfc>
   2bdb4:	and	r0, r0, #6
   2bdb8:	ldr	ip, [r4, #24]
   2bdbc:	cmp	r0, #4
   2bdc0:	beq	2bff4 <__assert_fail@plt+0x1adc8>
   2bdc4:	add	sl, ip, #1
   2bdc8:	mov	r6, sl
   2bdcc:	lsl	r0, sl, #3
   2bdd0:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2bdd4:	subs	r9, r0, #0
   2bdd8:	beq	2bfec <__assert_fail@plt+0x1adc0>
   2bddc:	mov	r3, fp
   2bde0:	mov	r0, r4
   2bde4:	str	sl, [sp, #8]
   2bde8:	ldr	ip, [sp, #92]	; 0x5c
   2bdec:	ldr	r2, [sp, #32]
   2bdf0:	ldr	r1, [sp, #40]	; 0x28
   2bdf4:	stm	sp, {r7, ip}
   2bdf8:	ldr	ip, [sp, #44]	; 0x2c
   2bdfc:	str	r9, [sp, #12]
   2be00:	str	ip, [sp, #16]
   2be04:	bl	26538 <__assert_fail@plt+0x1530c>
   2be08:	cmp	r0, #0
   2be0c:	beq	2be5c <__assert_fail@plt+0x1ac30>
   2be10:	cmp	r0, #1
   2be14:	mvneq	r4, #0
   2be18:	beq	2be20 <__assert_fail@plt+0x1abf4>
   2be1c:	mvn	r4, #1
   2be20:	mov	r0, r9
   2be24:	bl	13254 <__assert_fail@plt+0x2028>
   2be28:	cmp	r5, #0
   2be2c:	beq	2be3c <__assert_fail@plt+0x1ac10>
   2be30:	ldr	r3, [sp, #28]
   2be34:	add	r0, r3, #136	; 0x88
   2be38:	bl	10f20 <pthread_mutex_unlock@plt>
   2be3c:	mov	r0, r4
   2be40:	add	sp, sp, #52	; 0x34
   2be44:	ldrd	r4, [sp]
   2be48:	ldrd	r6, [sp, #8]
   2be4c:	ldrd	r8, [sp, #16]
   2be50:	ldrd	sl, [sp, #24]
   2be54:	add	sp, sp, #32
   2be58:	pop	{pc}		; (ldr pc, [sp], #4)
   2be5c:	cmp	r8, #0
   2be60:	beq	2bf0c <__assert_fail@plt+0x1ace0>
   2be64:	ldrb	r7, [r4, #28]
   2be68:	add	sl, r6, #1
   2be6c:	ubfx	r7, r7, #1, #2
   2be70:	cmp	r7, #0
   2be74:	beq	2bf4c <__assert_fail@plt+0x1ad20>
   2be78:	cmp	r7, #1
   2be7c:	movne	r7, #2
   2be80:	beq	2c020 <__assert_fail@plt+0x1adf4>
   2be84:	cmp	r6, #0
   2be88:	ble	2c06c <__assert_fail@plt+0x1ae40>
   2be8c:	ldrd	r0, [r8, #4]
   2be90:	add	lr, r9, r6, lsl #3
   2be94:	mov	r3, r9
   2be98:	mov	r2, r6
   2be9c:	sub	r0, r0, #4
   2bea0:	sub	r1, r1, #4
   2bea4:	ldr	ip, [r3]
   2bea8:	add	r3, r3, #8
   2beac:	str	ip, [r0, #4]!
   2beb0:	ldr	ip, [r3, #-4]
   2beb4:	cmp	lr, r3
   2beb8:	str	ip, [r1, #4]!
   2bebc:	bne	2bea4 <__assert_fail@plt+0x1ac78>
   2bec0:	ldr	r3, [r8]
   2bec4:	cmp	r3, r2
   2bec8:	bls	2bef4 <__assert_fail@plt+0x1acc8>
   2becc:	ldr	ip, [r8, #4]
   2bed0:	mvn	r3, #0
   2bed4:	ldr	r0, [r8, #8]
   2bed8:	str	r3, [r0, r2, lsl #2]
   2bedc:	add	r6, r6, #1
   2bee0:	str	r3, [ip, r2, lsl #2]
   2bee4:	mov	r2, r6
   2bee8:	ldr	r1, [r8]
   2beec:	cmp	r1, r6
   2bef0:	bhi	2bed8 <__assert_fail@plt+0x1acac>
   2bef4:	ldrb	r3, [r4, #28]
   2bef8:	bfi	r3, r7, #1, #2
   2befc:	and	r2, r3, #6
   2bf00:	cmp	r2, #0
   2bf04:	strb	r3, [r4, #28]
   2bf08:	beq	2be1c <__assert_fail@plt+0x1abf0>
   2bf0c:	ldr	r3, [sp, #36]	; 0x24
   2bf10:	ldr	r4, [r9]
   2bf14:	cmp	r3, #0
   2bf18:	beq	2be20 <__assert_fail@plt+0x1abf4>
   2bf1c:	ldr	r3, [r9, #4]
   2bf20:	sub	r4, r3, r4
   2bf24:	b	2be20 <__assert_fail@plt+0x1abf4>
   2bf28:	mov	sl, #1
   2bf2c:	mov	r0, #8
   2bf30:	mov	r6, sl
   2bf34:	mov	r8, #0
   2bf38:	b	2bdd0 <__assert_fail@plt+0x1aba4>
   2bf3c:	mov	r0, r4
   2bf40:	bl	2bbe0 <__assert_fail@plt+0x1a9b4>
   2bf44:	ldrb	r0, [r4, #28]
   2bf48:	b	2bda0 <__assert_fail@plt+0x1ab74>
   2bf4c:	lsl	r7, sl, #2
   2bf50:	mov	r0, r7
   2bf54:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2bf58:	cmp	r0, #0
   2bf5c:	str	r0, [r8, #4]
   2bf60:	beq	2c078 <__assert_fail@plt+0x1ae4c>
   2bf64:	mov	r0, r7
   2bf68:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2bf6c:	cmp	r0, #0
   2bf70:	mov	r7, r0
   2bf74:	str	r0, [r8, #8]
   2bf78:	movne	r7, #1
   2bf7c:	strne	sl, [r8]
   2bf80:	bne	2be84 <__assert_fail@plt+0x1ac58>
   2bf84:	ldr	r0, [r8, #4]
   2bf88:	bl	13254 <__assert_fail@plt+0x2028>
   2bf8c:	b	2bef4 <__assert_fail@plt+0x1acc8>
   2bf90:	ldr	r7, [sp, #32]
   2bf94:	b	2bd34 <__assert_fail@plt+0x1ab08>
   2bf98:	movw	r2, #0
   2bf9c:	movt	r2, #0
   2bfa0:	cmp	r2, #0
   2bfa4:	mov	r5, #1
   2bfa8:	moveq	r5, r2
   2bfac:	movw	r2, #0
   2bfb0:	movt	r2, #0
   2bfb4:	mov	r1, #1
   2bfb8:	cmp	r2, #0
   2bfbc:	moveq	r1, r2
   2bfc0:	orr	r5, r5, r1
   2bfc4:	ands	r5, r5, #255	; 0xff
   2bfc8:	movne	r7, #0
   2bfcc:	bne	2bd68 <__assert_fail@plt+0x1ab3c>
   2bfd0:	ldrb	r0, [r4, #28]
   2bfd4:	mov	r7, r5
   2bfd8:	ubfx	r3, r0, #5, #2
   2bfdc:	str	r3, [sp, #44]	; 0x2c
   2bfe0:	b	2bda0 <__assert_fail@plt+0x1ab74>
   2bfe4:	mvn	r4, #0
   2bfe8:	b	2be3c <__assert_fail@plt+0x1ac10>
   2bfec:	mvn	r4, #1
   2bff0:	b	2be28 <__assert_fail@plt+0x1abfc>
   2bff4:	ldr	sl, [r8]
   2bff8:	cmp	sl, ip
   2bffc:	bhi	2bdc4 <__assert_fail@plt+0x1ab98>
   2c000:	cmp	sl, #0
   2c004:	mov	r6, sl
   2c008:	bgt	2bdcc <__assert_fail@plt+0x1aba0>
   2c00c:	mov	sl, #1
   2c010:	mov	r8, r2
   2c014:	mov	r6, sl
   2c018:	mov	r0, #8
   2c01c:	b	2bdd0 <__assert_fail@plt+0x1aba4>
   2c020:	ldr	r3, [r8]
   2c024:	cmp	r3, sl
   2c028:	bcs	2be84 <__assert_fail@plt+0x1ac58>
   2c02c:	lsl	fp, sl, #2
   2c030:	ldr	r0, [r8, #4]
   2c034:	mov	r1, fp
   2c038:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2c03c:	subs	r2, r0, #0
   2c040:	str	r2, [sp, #32]
   2c044:	beq	2c078 <__assert_fail@plt+0x1ae4c>
   2c048:	mov	r1, fp
   2c04c:	ldr	r0, [r8, #8]
   2c050:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2c054:	subs	fp, r0, #0
   2c058:	ldr	r2, [sp, #32]
   2c05c:	beq	2c080 <__assert_fail@plt+0x1ae54>
   2c060:	str	sl, [r8]
   2c064:	stmib	r8, {r2, fp}
   2c068:	b	2be84 <__assert_fail@plt+0x1ac58>
   2c06c:	mov	r6, #0
   2c070:	mov	r2, r6
   2c074:	b	2bec0 <__assert_fail@plt+0x1ac94>
   2c078:	mov	r7, #0
   2c07c:	b	2bef4 <__assert_fail@plt+0x1acc8>
   2c080:	mov	r0, r2
   2c084:	mov	r7, fp
   2c088:	bl	13254 <__assert_fail@plt+0x2028>
   2c08c:	b	2bef4 <__assert_fail@plt+0x1acc8>
   2c090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c094:	strd	r6, [sp, #8]
   2c098:	mov	r7, r3
   2c09c:	strd	r8, [sp, #16]
   2c0a0:	strd	sl, [sp, #24]
   2c0a4:	str	lr, [sp, #32]
   2c0a8:	sub	sp, sp, #28
   2c0ac:	ldr	r5, [sp, #64]	; 0x40
   2c0b0:	ldr	r6, [sp, #80]	; 0x50
   2c0b4:	ldrb	fp, [sp, #84]	; 0x54
   2c0b8:	orr	r3, r5, r2
   2c0bc:	orrs	r3, r3, r6
   2c0c0:	bmi	2c170 <__assert_fail@plt+0x1af44>
   2c0c4:	adds	r9, r2, r5
   2c0c8:	mov	r4, r2
   2c0cc:	bvs	2c170 <__assert_fail@plt+0x1af44>
   2c0d0:	cmp	r5, #0
   2c0d4:	mov	sl, r0
   2c0d8:	beq	2c178 <__assert_fail@plt+0x1af4c>
   2c0dc:	cmp	r2, #0
   2c0e0:	str	r1, [sp, #20]
   2c0e4:	moveq	r8, r2
   2c0e8:	bne	2c13c <__assert_fail@plt+0x1af10>
   2c0ec:	ldr	r3, [sp, #72]	; 0x48
   2c0f0:	mov	r2, r9
   2c0f4:	mov	r1, r7
   2c0f8:	mov	r0, sl
   2c0fc:	str	fp, [sp, #12]
   2c100:	ldr	ip, [sp, #76]	; 0x4c
   2c104:	stm	sp, {r3, r6, ip}
   2c108:	ldr	r3, [sp, #68]	; 0x44
   2c10c:	bl	2bcac <__assert_fail@plt+0x1aa80>
   2c110:	mov	r4, r0
   2c114:	mov	r0, r8
   2c118:	bl	13254 <__assert_fail@plt+0x2028>
   2c11c:	mov	r0, r4
   2c120:	add	sp, sp, #28
   2c124:	ldrd	r4, [sp]
   2c128:	ldrd	r6, [sp, #8]
   2c12c:	ldrd	r8, [sp, #16]
   2c130:	ldrd	sl, [sp, #24]
   2c134:	add	sp, sp, #32
   2c138:	pop	{pc}		; (ldr pc, [sp], #4)
   2c13c:	mov	r0, r9
   2c140:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2c144:	subs	r8, r0, #0
   2c148:	beq	2c170 <__assert_fail@plt+0x1af44>
   2c14c:	mov	r2, r4
   2c150:	ldr	r1, [sp, #20]
   2c154:	bl	10fd4 <memcpy@plt>
   2c158:	mov	r1, r7
   2c15c:	mov	r2, r5
   2c160:	add	r0, r8, r4
   2c164:	mov	r7, r8
   2c168:	bl	10fd4 <memcpy@plt>
   2c16c:	b	2c0ec <__assert_fail@plt+0x1aec0>
   2c170:	mvn	r4, #1
   2c174:	b	2c11c <__assert_fail@plt+0x1aef0>
   2c178:	mov	r7, r1
   2c17c:	mov	r8, r5
   2c180:	b	2c0ec <__assert_fail@plt+0x1aec0>
   2c184:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c188:	mov	r4, r0
   2c18c:	mov	r0, #0
   2c190:	tst	r2, #1
   2c194:	movw	r5, #45820	; 0xb2fc
   2c198:	movt	r5, #3
   2c19c:	movw	r3, #710	; 0x2c6
   2c1a0:	movt	r3, #257	; 0x101
   2c1a4:	strd	r6, [sp, #8]
   2c1a8:	mov	r6, r2
   2c1ac:	str	r8, [sp, #16]
   2c1b0:	mov	r7, r1
   2c1b4:	movne	r8, r5
   2c1b8:	str	lr, [sp, #20]
   2c1bc:	moveq	r8, r3
   2c1c0:	str	r0, [r4]
   2c1c4:	str	r0, [r4, #4]
   2c1c8:	str	r0, [r4, #8]
   2c1cc:	mov	r0, #256	; 0x100
   2c1d0:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2c1d4:	cmp	r0, #0
   2c1d8:	str	r0, [r4, #16]
   2c1dc:	beq	2c288 <__assert_fail@plt+0x1b05c>
   2c1e0:	lsl	r5, r6, #21
   2c1e4:	ands	r2, r6, #4
   2c1e8:	and	r5, r5, #4194304	; 0x400000
   2c1ec:	orr	r5, r5, r8
   2c1f0:	bne	2c260 <__assert_fail@plt+0x1b034>
   2c1f4:	ldrb	r3, [r4, #28]
   2c1f8:	ubfx	r6, r6, #3, #1
   2c1fc:	mov	r1, #0
   2c200:	mov	r0, r7
   2c204:	str	r1, [r4, #20]
   2c208:	bfi	r3, r2, #7, #1
   2c20c:	bfi	r3, r6, #4, #1
   2c210:	strb	r3, [r4, #28]
   2c214:	bl	11130 <strlen@plt>
   2c218:	mov	r2, r0
   2c21c:	mov	r3, r5
   2c220:	mov	r1, r7
   2c224:	mov	r0, r4
   2c228:	bl	2adb0 <__assert_fail@plt+0x19b84>
   2c22c:	cmp	r0, #16
   2c230:	mov	r5, r0
   2c234:	beq	2c270 <__assert_fail@plt+0x1b044>
   2c238:	cmp	r0, #0
   2c23c:	bne	2c274 <__assert_fail@plt+0x1b048>
   2c240:	mov	r0, r4
   2c244:	bl	2bbe0 <__assert_fail@plt+0x1a9b4>
   2c248:	mov	r0, r5
   2c24c:	ldrd	r4, [sp]
   2c250:	ldrd	r6, [sp, #8]
   2c254:	ldr	r8, [sp, #16]
   2c258:	add	sp, sp, #20
   2c25c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c260:	bic	r5, r5, #64	; 0x40
   2c264:	mov	r2, #1
   2c268:	orr	r5, r5, #256	; 0x100
   2c26c:	b	2c1f4 <__assert_fail@plt+0x1afc8>
   2c270:	mov	r5, #8
   2c274:	ldr	r0, [r4, #16]
   2c278:	bl	13254 <__assert_fail@plt+0x2028>
   2c27c:	mov	r3, #0
   2c280:	str	r3, [r4, #16]
   2c284:	b	2c248 <__assert_fail@plt+0x1b01c>
   2c288:	mov	r5, #12
   2c28c:	b	2c248 <__assert_fail@plt+0x1b01c>
   2c290:	cmp	r0, #16
   2c294:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c298:	strd	r6, [sp, #8]
   2c29c:	str	r8, [sp, #16]
   2c2a0:	str	lr, [sp, #20]
   2c2a4:	bhi	2c320 <__assert_fail@plt+0x1b0f4>
   2c2a8:	movw	r1, #61300	; 0xef74
   2c2ac:	movt	r1, #2
   2c2b0:	add	ip, r1, r0, lsl #2
   2c2b4:	mov	r4, r3
   2c2b8:	add	r1, r1, #32
   2c2bc:	mov	r6, r2
   2c2c0:	mov	r0, #0
   2c2c4:	ldr	r3, [ip, #416]	; 0x1a0
   2c2c8:	mov	r2, #5
   2c2cc:	add	r1, r1, r3
   2c2d0:	bl	1101c <dcgettext@plt>
   2c2d4:	mov	r7, r0
   2c2d8:	bl	11130 <strlen@plt>
   2c2dc:	cmp	r4, #0
   2c2e0:	add	r5, r0, #1
   2c2e4:	beq	2c308 <__assert_fail@plt+0x1b0dc>
   2c2e8:	cmp	r5, r4
   2c2ec:	mov	r1, r7
   2c2f0:	subhi	r2, r4, #1
   2c2f4:	movhi	r3, #0
   2c2f8:	movls	r2, r5
   2c2fc:	mov	r0, r6
   2c300:	strbhi	r3, [r6, r2]
   2c304:	bl	10fd4 <memcpy@plt>
   2c308:	mov	r0, r5
   2c30c:	ldrd	r4, [sp]
   2c310:	ldrd	r6, [sp, #8]
   2c314:	ldr	r8, [sp, #16]
   2c318:	add	sp, sp, #20
   2c31c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c320:	bl	11220 <abort@plt>
   2c324:	strd	r4, [sp, #-16]!
   2c328:	mov	r4, r0
   2c32c:	ldr	r5, [r0]
   2c330:	str	r6, [sp, #8]
   2c334:	str	lr, [sp, #12]
   2c338:	cmp	r5, #0
   2c33c:	beq	2c384 <__assert_fail@plt+0x1b158>
   2c340:	movw	r2, #0
   2c344:	movt	r2, #0
   2c348:	cmp	r2, #0
   2c34c:	mov	r3, #1
   2c350:	moveq	r3, r2
   2c354:	movw	r2, #0
   2c358:	movt	r2, #0
   2c35c:	mov	r1, #1
   2c360:	cmp	r2, #0
   2c364:	moveq	r1, r2
   2c368:	orr	r3, r3, r1
   2c36c:	tst	r3, #1
   2c370:	beq	2c37c <__assert_fail@plt+0x1b150>
   2c374:	add	r0, r5, #136	; 0x88
   2c378:	bl	10f80 <pthread_mutex_destroy@plt>
   2c37c:	mov	r0, r5
   2c380:	bl	21a50 <__assert_fail@plt+0x10824>
   2c384:	mov	r5, #0
   2c388:	ldr	r0, [r4, #16]
   2c38c:	str	r5, [r4]
   2c390:	str	r5, [r4, #4]
   2c394:	bl	13254 <__assert_fail@plt+0x2028>
   2c398:	str	r5, [r4, #16]
   2c39c:	ldr	r0, [r4, #20]
   2c3a0:	bl	13254 <__assert_fail@plt+0x2028>
   2c3a4:	ldr	r6, [sp, #8]
   2c3a8:	str	r5, [r4, #20]
   2c3ac:	ldrd	r4, [sp]
   2c3b0:	add	sp, sp, #12
   2c3b4:	pop	{pc}		; (ldr pc, [sp], #4)
   2c3b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c3bc:	strd	r6, [sp, #8]
   2c3c0:	strd	r8, [sp, #16]
   2c3c4:	strd	sl, [sp, #24]
   2c3c8:	str	lr, [sp, #32]
   2c3cc:	sub	sp, sp, #36	; 0x24
   2c3d0:	ldr	r6, [sp, #72]	; 0x48
   2c3d4:	bics	ip, r6, #7
   2c3d8:	movne	r0, #2
   2c3dc:	bne	2c494 <__assert_fail@plt+0x1b268>
   2c3e0:	ands	sl, r6, #4
   2c3e4:	mov	r7, r3
   2c3e8:	str	r2, [sp, #28]
   2c3ec:	mov	r8, r1
   2c3f0:	mov	r5, r0
   2c3f4:	bne	2c4b0 <__assert_fail@plt+0x1b284>
   2c3f8:	mov	r0, r1
   2c3fc:	bl	11130 <strlen@plt>
   2c400:	mov	r9, r0
   2c404:	movw	r2, #0
   2c408:	movt	r2, #0
   2c40c:	ldr	fp, [r5]
   2c410:	cmp	r2, #0
   2c414:	mov	r4, #1
   2c418:	moveq	r4, r2
   2c41c:	movw	r2, #0
   2c420:	movt	r2, #0
   2c424:	mov	r1, #1
   2c428:	cmp	r2, #0
   2c42c:	moveq	r1, r2
   2c430:	orr	r4, r4, r1
   2c434:	ands	r4, r4, #255	; 0xff
   2c438:	beq	2c444 <__assert_fail@plt+0x1b218>
   2c43c:	add	r0, fp, #136	; 0x88
   2c440:	bl	10fbc <pthread_mutex_lock@plt>
   2c444:	ldrb	r2, [r5, #28]
   2c448:	tst	r2, #16
   2c44c:	beq	2c4bc <__assert_fail@plt+0x1b290>
   2c450:	mov	ip, #0
   2c454:	mov	r0, r5
   2c458:	str	r9, [sp]
   2c45c:	mov	r3, sl
   2c460:	mov	r1, r8
   2c464:	mov	r2, r9
   2c468:	stmib	sp, {r9, ip}
   2c46c:	str	ip, [sp, #12]
   2c470:	str	r6, [sp, #16]
   2c474:	bl	26538 <__assert_fail@plt+0x1530c>
   2c478:	mov	r5, r0
   2c47c:	cmp	r4, #0
   2c480:	beq	2c48c <__assert_fail@plt+0x1b260>
   2c484:	add	r0, fp, #136	; 0x88
   2c488:	bl	10f20 <pthread_mutex_unlock@plt>
   2c48c:	adds	r0, r5, #0
   2c490:	movne	r0, #1
   2c494:	add	sp, sp, #36	; 0x24
   2c498:	ldrd	r4, [sp]
   2c49c:	ldrd	r6, [sp, #8]
   2c4a0:	ldrd	r8, [sp, #16]
   2c4a4:	ldrd	sl, [sp, #24]
   2c4a8:	add	sp, sp, #32
   2c4ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2c4b0:	ldr	sl, [r3]
   2c4b4:	ldr	r9, [r3, #4]
   2c4b8:	b	2c404 <__assert_fail@plt+0x1b1d8>
   2c4bc:	ldr	ip, [sp, #28]
   2c4c0:	mov	r0, r5
   2c4c4:	mov	r3, sl
   2c4c8:	mov	r1, r8
   2c4cc:	mov	r2, r9
   2c4d0:	str	r9, [sp]
   2c4d4:	stmib	sp, {r9, ip}
   2c4d8:	str	r7, [sp, #12]
   2c4dc:	str	r6, [sp, #16]
   2c4e0:	bl	26538 <__assert_fail@plt+0x1530c>
   2c4e4:	mov	r5, r0
   2c4e8:	b	2c47c <__assert_fail@plt+0x1b250>
   2c4ec:	str	r4, [sp, #-8]!
   2c4f0:	mov	r4, #0
   2c4f4:	str	lr, [sp, #4]
   2c4f8:	sub	sp, sp, #16
   2c4fc:	mov	lr, #1
   2c500:	ldr	ip, [sp, #24]
   2c504:	str	r4, [sp]
   2c508:	stmib	sp, {r2, ip, lr}
   2c50c:	bl	2bcac <__assert_fail@plt+0x1aa80>
   2c510:	add	sp, sp, #16
   2c514:	ldr	r4, [sp]
   2c518:	add	sp, sp, #4
   2c51c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c520:	str	r4, [sp, #-8]!
   2c524:	mov	r4, #0
   2c528:	str	lr, [sp, #4]
   2c52c:	sub	sp, sp, #16
   2c530:	ldr	lr, [sp, #24]
   2c534:	ldr	ip, [sp, #28]
   2c538:	str	lr, [sp]
   2c53c:	str	r4, [sp, #12]
   2c540:	stmib	sp, {r2, ip}
   2c544:	bl	2bcac <__assert_fail@plt+0x1aa80>
   2c548:	add	sp, sp, #16
   2c54c:	ldr	r4, [sp]
   2c550:	add	sp, sp, #4
   2c554:	pop	{pc}		; (ldr pc, [sp], #4)
   2c558:	strd	r4, [sp, #-12]!
   2c55c:	mov	r4, #1
   2c560:	str	lr, [sp, #8]
   2c564:	sub	sp, sp, #28
   2c568:	mov	lr, #0
   2c56c:	ldr	ip, [sp, #40]	; 0x28
   2c570:	ldr	r5, [sp, #44]	; 0x2c
   2c574:	str	ip, [sp]
   2c578:	ldr	ip, [sp, #52]	; 0x34
   2c57c:	stmib	sp, {r5, lr}
   2c580:	ldr	lr, [sp, #48]	; 0x30
   2c584:	str	r4, [sp, #20]
   2c588:	str	lr, [sp, #12]
   2c58c:	str	ip, [sp, #16]
   2c590:	bl	2c090 <__assert_fail@plt+0x1ae64>
   2c594:	add	sp, sp, #28
   2c598:	ldrd	r4, [sp]
   2c59c:	add	sp, sp, #8
   2c5a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2c5a4:	str	r4, [sp, #-8]!
   2c5a8:	mov	r4, #0
   2c5ac:	str	lr, [sp, #4]
   2c5b0:	sub	sp, sp, #24
   2c5b4:	ldr	lr, [sp, #32]
   2c5b8:	ldr	ip, [sp, #36]	; 0x24
   2c5bc:	str	lr, [sp]
   2c5c0:	str	r4, [sp, #20]
   2c5c4:	str	ip, [sp, #4]
   2c5c8:	ldr	r4, [sp, #40]	; 0x28
   2c5cc:	ldr	lr, [sp, #44]	; 0x2c
   2c5d0:	ldr	ip, [sp, #48]	; 0x30
   2c5d4:	str	r4, [sp, #8]
   2c5d8:	str	lr, [sp, #12]
   2c5dc:	str	ip, [sp, #16]
   2c5e0:	bl	2c090 <__assert_fail@plt+0x1ae64>
   2c5e4:	add	sp, sp, #24
   2c5e8:	ldr	r4, [sp]
   2c5ec:	add	sp, sp, #4
   2c5f0:	pop	{pc}		; (ldr pc, [sp], #4)
   2c5f4:	cmp	r2, #0
   2c5f8:	beq	2c620 <__assert_fail@plt+0x1b3f4>
   2c5fc:	ldrb	ip, [r0, #28]
   2c600:	push	{lr}		; (str lr, [sp, #-4]!)
   2c604:	mov	lr, #1
   2c608:	bfi	ip, lr, #1, #2
   2c60c:	strb	ip, [r0, #28]
   2c610:	strd	r2, [r1]
   2c614:	ldr	r3, [sp, #4]
   2c618:	str	r3, [r1, #8]
   2c61c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c620:	ldrb	r3, [r0, #28]
   2c624:	bfi	r3, r2, #1, #2
   2c628:	strb	r3, [r0, #28]
   2c62c:	str	r2, [r1]
   2c630:	str	r2, [r1, #4]
   2c634:	str	r2, [r1, #8]
   2c638:	bx	lr
   2c63c:	strd	r4, [sp, #-16]!
   2c640:	mov	r4, r1
   2c644:	mov	r1, #0
   2c648:	mov	r2, r4
   2c64c:	mov	r5, r0
   2c650:	str	r6, [sp, #8]
   2c654:	str	lr, [sp, #12]
   2c658:	bl	111a8 <memchr@plt>
   2c65c:	cmp	r0, #0
   2c660:	ldr	r6, [sp, #8]
   2c664:	subne	r0, r0, r5
   2c668:	moveq	r0, r4
   2c66c:	ldrd	r4, [sp]
   2c670:	add	sp, sp, #12
   2c674:	addne	r0, r0, #1
   2c678:	pop	{pc}		; (ldr pc, [sp], #4)
   2c67c:	mov	r3, r0
   2c680:	push	{lr}		; (str lr, [sp, #-4]!)
   2c684:	ldrb	r0, [r0]
   2c688:	ldrb	r2, [r1]
   2c68c:	cmp	r0, #45	; 0x2d
   2c690:	beq	2c730 <__assert_fail@plt+0x1b504>
   2c694:	cmp	r2, #45	; 0x2d
   2c698:	beq	2c76c <__assert_fail@plt+0x1b540>
   2c69c:	cmp	r0, #48	; 0x30
   2c6a0:	beq	2c83c <__assert_fail@plt+0x1b610>
   2c6a4:	cmp	r2, #48	; 0x30
   2c6a8:	beq	2c834 <__assert_fail@plt+0x1b608>
   2c6ac:	cmp	r2, r0
   2c6b0:	sub	ip, r0, #48	; 0x30
   2c6b4:	bne	2c6d4 <__assert_fail@plt+0x1b4a8>
   2c6b8:	cmp	ip, #9
   2c6bc:	bhi	2c864 <__assert_fail@plt+0x1b638>
   2c6c0:	ldrb	r0, [r3, #1]!
   2c6c4:	ldrb	r2, [r1, #1]!
   2c6c8:	sub	ip, r0, #48	; 0x30
   2c6cc:	cmp	r0, r2
   2c6d0:	beq	2c6b8 <__assert_fail@plt+0x1b48c>
   2c6d4:	cmp	ip, #9
   2c6d8:	sub	r0, r0, r2
   2c6dc:	bhi	2c868 <__assert_fail@plt+0x1b63c>
   2c6e0:	mov	lr, #0
   2c6e4:	ldrb	ip, [r3, #1]!
   2c6e8:	add	lr, lr, #1
   2c6ec:	sub	ip, ip, #48	; 0x30
   2c6f0:	cmp	ip, #9
   2c6f4:	bls	2c6e4 <__assert_fail@plt+0x1b4b8>
   2c6f8:	sub	r3, r2, #48	; 0x30
   2c6fc:	cmp	r3, #9
   2c700:	bhi	2c880 <__assert_fail@plt+0x1b654>
   2c704:	mov	r2, #0
   2c708:	ldrb	r3, [r1, #1]!
   2c70c:	add	r2, r2, #1
   2c710:	sub	r3, r3, #48	; 0x30
   2c714:	cmp	r3, #9
   2c718:	bls	2c708 <__assert_fail@plt+0x1b4dc>
   2c71c:	cmp	lr, r2
   2c720:	beq	2c84c <__assert_fail@plt+0x1b620>
   2c724:	bcs	2c784 <__assert_fail@plt+0x1b558>
   2c728:	mvn	r0, #0
   2c72c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c730:	ldrb	r0, [r3, #1]!
   2c734:	cmp	r0, #48	; 0x30
   2c738:	beq	2c730 <__assert_fail@plt+0x1b504>
   2c73c:	cmp	r2, #45	; 0x2d
   2c740:	sub	ip, r0, #48	; 0x30
   2c744:	beq	2c7ac <__assert_fail@plt+0x1b580>
   2c748:	cmp	ip, #9
   2c74c:	bls	2c728 <__assert_fail@plt+0x1b4fc>
   2c750:	cmp	r2, #48	; 0x30
   2c754:	beq	2c844 <__assert_fail@plt+0x1b618>
   2c758:	sub	r0, r2, #48	; 0x30
   2c75c:	cmp	r0, #9
   2c760:	movhi	r0, #0
   2c764:	mvnls	r0, #0
   2c768:	pop	{pc}		; (ldr pc, [sp], #4)
   2c76c:	ldrb	r2, [r1, #1]!
   2c770:	cmp	r2, #48	; 0x30
   2c774:	beq	2c76c <__assert_fail@plt+0x1b540>
   2c778:	sub	r2, r2, #48	; 0x30
   2c77c:	cmp	r2, #9
   2c780:	bhi	2c790 <__assert_fail@plt+0x1b564>
   2c784:	mov	r0, #1
   2c788:	pop	{pc}		; (ldr pc, [sp], #4)
   2c78c:	ldrb	r0, [r3, #1]!
   2c790:	cmp	r0, #48	; 0x30
   2c794:	beq	2c78c <__assert_fail@plt+0x1b560>
   2c798:	sub	r0, r0, #48	; 0x30
   2c79c:	cmp	r0, #9
   2c7a0:	movhi	r0, #0
   2c7a4:	movls	r0, #1
   2c7a8:	b	2c788 <__assert_fail@plt+0x1b55c>
   2c7ac:	ldrb	r2, [r1, #1]!
   2c7b0:	cmp	r2, #48	; 0x30
   2c7b4:	beq	2c7ac <__assert_fail@plt+0x1b580>
   2c7b8:	cmp	r0, r2
   2c7bc:	bne	2c7dc <__assert_fail@plt+0x1b5b0>
   2c7c0:	cmp	ip, #9
   2c7c4:	bhi	2c88c <__assert_fail@plt+0x1b660>
   2c7c8:	ldrb	r0, [r3, #1]!
   2c7cc:	ldrb	r2, [r1, #1]!
   2c7d0:	sub	ip, r0, #48	; 0x30
   2c7d4:	cmp	r0, r2
   2c7d8:	beq	2c7c0 <__assert_fail@plt+0x1b594>
   2c7dc:	cmp	ip, #9
   2c7e0:	sub	r0, r2, r0
   2c7e4:	bhi	2c890 <__assert_fail@plt+0x1b664>
   2c7e8:	mov	lr, #0
   2c7ec:	ldrb	ip, [r3, #1]!
   2c7f0:	add	lr, lr, #1
   2c7f4:	sub	ip, ip, #48	; 0x30
   2c7f8:	cmp	ip, #9
   2c7fc:	bls	2c7ec <__assert_fail@plt+0x1b5c0>
   2c800:	sub	r2, r2, #48	; 0x30
   2c804:	cmp	r2, #9
   2c808:	bhi	2c8a4 <__assert_fail@plt+0x1b678>
   2c80c:	mov	r2, #0
   2c810:	ldrb	r3, [r1, #1]!
   2c814:	add	r2, r2, #1
   2c818:	sub	r3, r3, #48	; 0x30
   2c81c:	cmp	r3, #9
   2c820:	bls	2c810 <__assert_fail@plt+0x1b5e4>
   2c824:	cmp	r2, lr
   2c828:	beq	2c858 <__assert_fail@plt+0x1b62c>
   2c82c:	bhi	2c784 <__assert_fail@plt+0x1b558>
   2c830:	b	2c728 <__assert_fail@plt+0x1b4fc>
   2c834:	ldrb	r2, [r1, #1]!
   2c838:	b	2c6a4 <__assert_fail@plt+0x1b478>
   2c83c:	ldrb	r0, [r3, #1]!
   2c840:	b	2c69c <__assert_fail@plt+0x1b470>
   2c844:	ldrb	r2, [r1, #1]!
   2c848:	b	2c750 <__assert_fail@plt+0x1b524>
   2c84c:	cmp	lr, #0
   2c850:	moveq	r0, #0
   2c854:	b	2c788 <__assert_fail@plt+0x1b55c>
   2c858:	cmp	r2, #0
   2c85c:	moveq	r0, #0
   2c860:	b	2c788 <__assert_fail@plt+0x1b55c>
   2c864:	sub	r0, r0, r2
   2c868:	sub	r3, r2, #48	; 0x30
   2c86c:	cmp	r3, #9
   2c870:	movls	lr, #0
   2c874:	bls	2c704 <__assert_fail@plt+0x1b4d8>
   2c878:	mov	r0, #0
   2c87c:	b	2c788 <__assert_fail@plt+0x1b55c>
   2c880:	adds	r0, lr, #0
   2c884:	movne	r0, #1
   2c888:	b	2c788 <__assert_fail@plt+0x1b55c>
   2c88c:	sub	r0, r2, r0
   2c890:	sub	r2, r2, #48	; 0x30
   2c894:	cmp	r2, #9
   2c898:	movls	lr, #0
   2c89c:	bls	2c80c <__assert_fail@plt+0x1b5e0>
   2c8a0:	b	2c878 <__assert_fail@plt+0x1b64c>
   2c8a4:	adds	r0, lr, #0
   2c8a8:	movne	r0, #1
   2c8ac:	rsb	r0, r0, #0
   2c8b0:	b	2c788 <__assert_fail@plt+0x1b55c>
   2c8b4:	cmp	r1, #0
   2c8b8:	strd	r4, [sp, #-16]!
   2c8bc:	mov	ip, r3
   2c8c0:	str	r6, [sp, #8]
   2c8c4:	mov	r4, r0
   2c8c8:	str	lr, [sp, #12]
   2c8cc:	sub	sp, sp, #32
   2c8d0:	ldr	r5, [sp, #48]	; 0x30
   2c8d4:	ldr	r6, [sp, #52]	; 0x34
   2c8d8:	beq	2ca1c <__assert_fail@plt+0x1b7f0>
   2c8dc:	mov	r3, r1
   2c8e0:	mov	r1, #1
   2c8e4:	stm	sp, {r2, ip}
   2c8e8:	movw	r2, #61888	; 0xf1c0
   2c8ec:	movt	r2, #2
   2c8f0:	bl	1119c <__fprintf_chk@plt>
   2c8f4:	mov	r2, #5
   2c8f8:	movw	r1, #61908	; 0xf1d4
   2c8fc:	movt	r1, #2
   2c900:	mov	r0, #0
   2c904:	bl	1101c <dcgettext@plt>
   2c908:	movw	ip, #2022	; 0x7e6
   2c90c:	mov	r3, r0
   2c910:	mov	r1, #1
   2c914:	movw	r2, #62636	; 0xf4ac
   2c918:	movt	r2, #2
   2c91c:	mov	r0, r4
   2c920:	str	ip, [sp]
   2c924:	bl	1119c <__fprintf_chk@plt>
   2c928:	mov	r1, r4
   2c92c:	mov	r0, #10
   2c930:	bl	11010 <fputc_unlocked@plt>
   2c934:	mov	r2, #5
   2c938:	movw	r1, #61912	; 0xf1d8
   2c93c:	movt	r1, #2
   2c940:	mov	r0, #0
   2c944:	bl	1101c <dcgettext@plt>
   2c948:	mov	r2, r0
   2c94c:	mov	r1, #1
   2c950:	movw	r3, #62084	; 0xf284
   2c954:	movt	r3, #2
   2c958:	mov	r0, r4
   2c95c:	bl	1119c <__fprintf_chk@plt>
   2c960:	mov	r1, r4
   2c964:	mov	r0, #10
   2c968:	bl	11010 <fputc_unlocked@plt>
   2c96c:	cmp	r6, #9
   2c970:	ldrls	pc, [pc, r6, lsl #2]
   2c974:	b	2cc88 <__assert_fail@plt+0x1ba5c>
   2c978:	andeq	ip, r2, r8, lsl #20
   2c97c:	andeq	ip, r2, r8, lsr sl
   2c980:	andeq	ip, r2, r4, ror sl
   2c984:			; <UNDEFINED> instruction: 0x0002cab4
   2c988:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c98c:	andeq	ip, r2, r4, lsr fp
   2c990:	andeq	ip, r2, ip, ror fp
   2c994:	ldrdeq	ip, [r2], -r0
   2c998:	andeq	ip, r2, r8, lsr #24
   2c99c:	andeq	ip, r2, r0, lsr #19
   2c9a0:	movw	r1, #62388	; 0xf3b4
   2c9a4:	movt	r1, #2
   2c9a8:	mov	r2, #5
   2c9ac:	mov	r0, #0
   2c9b0:	bl	1101c <dcgettext@plt>
   2c9b4:	ldr	lr, [r5, #4]
   2c9b8:	mov	r2, r0
   2c9bc:	mov	r1, #1
   2c9c0:	mov	r0, r4
   2c9c4:	ldr	r3, [r5, #8]
   2c9c8:	ldr	ip, [r5, #32]
   2c9cc:	str	lr, [sp]
   2c9d0:	ldr	lr, [r5, #12]
   2c9d4:	str	ip, [sp, #28]
   2c9d8:	ldr	ip, [r5, #28]
   2c9dc:	str	r3, [sp, #4]
   2c9e0:	ldr	r3, [r5, #16]
   2c9e4:	str	lr, [sp, #8]
   2c9e8:	ldr	lr, [r5, #20]
   2c9ec:	str	ip, [sp, #24]
   2c9f0:	ldr	ip, [r5, #24]
   2c9f4:	str	r3, [sp, #12]
   2c9f8:	ldr	r3, [r5]
   2c9fc:	str	lr, [sp, #16]
   2ca00:	str	ip, [sp, #20]
   2ca04:	bl	1119c <__fprintf_chk@plt>
   2ca08:	add	sp, sp, #32
   2ca0c:	ldrd	r4, [sp]
   2ca10:	ldr	r6, [sp, #8]
   2ca14:	add	sp, sp, #12
   2ca18:	pop	{pc}		; (ldr pc, [sp], #4)
   2ca1c:	mov	r3, r2
   2ca20:	mov	r1, #1
   2ca24:	str	ip, [sp]
   2ca28:	movw	r2, #61900	; 0xf1cc
   2ca2c:	movt	r2, #2
   2ca30:	bl	1119c <__fprintf_chk@plt>
   2ca34:	b	2c8f4 <__assert_fail@plt+0x1b6c8>
   2ca38:	mov	r2, #5
   2ca3c:	movw	r1, #62120	; 0xf2a8
   2ca40:	movt	r1, #2
   2ca44:	mov	r0, #0
   2ca48:	bl	1101c <dcgettext@plt>
   2ca4c:	ldr	r3, [r5]
   2ca50:	mov	r2, r0
   2ca54:	mov	r1, #1
   2ca58:	mov	r0, r4
   2ca5c:	add	sp, sp, #32
   2ca60:	ldrd	r4, [sp]
   2ca64:	ldr	r6, [sp, #8]
   2ca68:	ldr	lr, [sp, #12]
   2ca6c:	add	sp, sp, #16
   2ca70:	b	1119c <__fprintf_chk@plt>
   2ca74:	mov	r2, #5
   2ca78:	movw	r1, #62136	; 0xf2b8
   2ca7c:	movt	r1, #2
   2ca80:	mov	r0, #0
   2ca84:	bl	1101c <dcgettext@plt>
   2ca88:	ldm	r5, {r3, ip}
   2ca8c:	mov	r2, r0
   2ca90:	mov	r1, #1
   2ca94:	mov	r0, r4
   2ca98:	str	ip, [sp, #48]	; 0x30
   2ca9c:	add	sp, sp, #32
   2caa0:	ldrd	r4, [sp]
   2caa4:	ldr	r6, [sp, #8]
   2caa8:	ldr	lr, [sp, #12]
   2caac:	add	sp, sp, #16
   2cab0:	b	1119c <__fprintf_chk@plt>
   2cab4:	mov	r2, #5
   2cab8:	movw	r1, #62160	; 0xf2d0
   2cabc:	movt	r1, #2
   2cac0:	mov	r0, #0
   2cac4:	bl	1101c <dcgettext@plt>
   2cac8:	ldm	r5, {r3, lr}
   2cacc:	mov	r2, r0
   2cad0:	mov	r1, #1
   2cad4:	mov	r0, r4
   2cad8:	ldr	ip, [r5, #8]
   2cadc:	str	lr, [sp, #48]	; 0x30
   2cae0:	str	ip, [sp, #52]	; 0x34
   2cae4:	add	sp, sp, #32
   2cae8:	ldrd	r4, [sp]
   2caec:	ldr	r6, [sp, #8]
   2caf0:	ldr	lr, [sp, #12]
   2caf4:	add	sp, sp, #16
   2caf8:	b	1119c <__fprintf_chk@plt>
   2cafc:	mov	r2, #5
   2cb00:	movw	r1, #62188	; 0xf2ec
   2cb04:	movt	r1, #2
   2cb08:	mov	r0, #0
   2cb0c:	bl	1101c <dcgettext@plt>
   2cb10:	ldmib	r5, {r3, ip, lr}
   2cb14:	mov	r2, r0
   2cb18:	mov	r1, #1
   2cb1c:	mov	r0, r4
   2cb20:	str	r3, [sp]
   2cb24:	ldr	r3, [r5]
   2cb28:	stmib	sp, {ip, lr}
   2cb2c:	bl	1119c <__fprintf_chk@plt>
   2cb30:	b	2ca08 <__assert_fail@plt+0x1b7dc>
   2cb34:	mov	r2, #5
   2cb38:	movw	r1, #62220	; 0xf30c
   2cb3c:	movt	r1, #2
   2cb40:	mov	r0, #0
   2cb44:	bl	1101c <dcgettext@plt>
   2cb48:	ldmib	r5, {ip, lr}
   2cb4c:	mov	r2, r0
   2cb50:	mov	r1, #1
   2cb54:	mov	r0, r4
   2cb58:	ldr	r3, [r5, #16]
   2cb5c:	str	ip, [sp]
   2cb60:	ldr	ip, [r5, #12]
   2cb64:	str	r3, [sp, #12]
   2cb68:	ldr	r3, [r5]
   2cb6c:	str	lr, [sp, #4]
   2cb70:	str	ip, [sp, #8]
   2cb74:	bl	1119c <__fprintf_chk@plt>
   2cb78:	b	2ca08 <__assert_fail@plt+0x1b7dc>
   2cb7c:	mov	r2, #5
   2cb80:	movw	r1, #62256	; 0xf330
   2cb84:	movt	r1, #2
   2cb88:	mov	r0, #0
   2cb8c:	bl	1101c <dcgettext@plt>
   2cb90:	ldr	lr, [r5, #4]
   2cb94:	mov	r2, r0
   2cb98:	mov	r1, #1
   2cb9c:	mov	r0, r4
   2cba0:	ldr	r3, [r5, #8]
   2cba4:	ldr	ip, [r5, #20]
   2cba8:	str	lr, [sp]
   2cbac:	ldr	lr, [r5, #12]
   2cbb0:	str	ip, [sp, #16]
   2cbb4:	ldr	ip, [r5, #16]
   2cbb8:	str	r3, [sp, #4]
   2cbbc:	ldr	r3, [r5]
   2cbc0:	str	lr, [sp, #8]
   2cbc4:	str	ip, [sp, #12]
   2cbc8:	bl	1119c <__fprintf_chk@plt>
   2cbcc:	b	2ca08 <__assert_fail@plt+0x1b7dc>
   2cbd0:	mov	r2, #5
   2cbd4:	movw	r1, #62296	; 0xf358
   2cbd8:	movt	r1, #2
   2cbdc:	mov	r0, #0
   2cbe0:	bl	1101c <dcgettext@plt>
   2cbe4:	ldmib	r5, {r3, ip}
   2cbe8:	mov	r2, r0
   2cbec:	mov	r1, #1
   2cbf0:	mov	r0, r4
   2cbf4:	ldr	lr, [r5, #24]
   2cbf8:	str	r3, [sp]
   2cbfc:	ldr	r3, [r5, #12]
   2cc00:	str	lr, [sp, #20]
   2cc04:	ldr	lr, [r5, #20]
   2cc08:	str	ip, [sp, #4]
   2cc0c:	ldr	ip, [r5, #16]
   2cc10:	str	r3, [sp, #8]
   2cc14:	ldr	r3, [r5]
   2cc18:	str	ip, [sp, #12]
   2cc1c:	str	lr, [sp, #16]
   2cc20:	bl	1119c <__fprintf_chk@plt>
   2cc24:	b	2ca08 <__assert_fail@plt+0x1b7dc>
   2cc28:	mov	r2, #5
   2cc2c:	movw	r1, #62340	; 0xf384
   2cc30:	movt	r1, #2
   2cc34:	mov	r0, #0
   2cc38:	bl	1101c <dcgettext@plt>
   2cc3c:	ldmib	r5, {ip, lr}
   2cc40:	mov	r2, r0
   2cc44:	mov	r1, #1
   2cc48:	mov	r0, r4
   2cc4c:	ldr	r3, [r5, #28]
   2cc50:	str	ip, [sp]
   2cc54:	ldr	ip, [r5, #12]
   2cc58:	str	r3, [sp, #24]
   2cc5c:	ldr	r3, [r5, #24]
   2cc60:	str	lr, [sp, #4]
   2cc64:	ldr	lr, [r5, #16]
   2cc68:	str	ip, [sp, #8]
   2cc6c:	ldr	ip, [r5, #20]
   2cc70:	str	r3, [sp, #20]
   2cc74:	ldr	r3, [r5]
   2cc78:	str	lr, [sp, #12]
   2cc7c:	str	ip, [sp, #16]
   2cc80:	bl	1119c <__fprintf_chk@plt>
   2cc84:	b	2ca08 <__assert_fail@plt+0x1b7dc>
   2cc88:	movw	r1, #62440	; 0xf3e8
   2cc8c:	movt	r1, #2
   2cc90:	b	2c9a8 <__assert_fail@plt+0x1b77c>
   2cc94:	strd	r4, [sp, #-12]!
   2cc98:	str	lr, [sp, #8]
   2cc9c:	sub	sp, sp, #12
   2cca0:	ldr	r5, [sp, #24]
   2cca4:	ldr	ip, [r5]
   2cca8:	cmp	ip, #0
   2ccac:	beq	2ccc8 <__assert_fail@plt+0x1ba9c>
   2ccb0:	mov	lr, r5
   2ccb4:	mov	ip, #0
   2ccb8:	ldr	r4, [lr, #4]!
   2ccbc:	add	ip, ip, #1
   2ccc0:	cmp	r4, #0
   2ccc4:	bne	2ccb8 <__assert_fail@plt+0x1ba8c>
   2ccc8:	stm	sp, {r5, ip}
   2cccc:	bl	2c8b4 <__assert_fail@plt+0x1b688>
   2ccd0:	add	sp, sp, #12
   2ccd4:	ldrd	r4, [sp]
   2ccd8:	add	sp, sp, #8
   2ccdc:	pop	{pc}		; (ldr pc, [sp], #4)
   2cce0:	strd	r4, [sp, #-16]!
   2cce4:	mov	ip, #0
   2cce8:	str	r6, [sp, #8]
   2ccec:	str	lr, [sp, #12]
   2ccf0:	sub	sp, sp, #48	; 0x30
   2ccf4:	ldr	r5, [sp, #64]	; 0x40
   2ccf8:	add	r6, sp, #8
   2ccfc:	mov	r4, r6
   2cd00:	ldr	lr, [r5], #4
   2cd04:	cmp	lr, #0
   2cd08:	str	lr, [r4], #4
   2cd0c:	beq	2cd1c <__assert_fail@plt+0x1baf0>
   2cd10:	add	ip, ip, #1
   2cd14:	cmp	ip, #10
   2cd18:	bne	2cd00 <__assert_fail@plt+0x1bad4>
   2cd1c:	stm	sp, {r6, ip}
   2cd20:	bl	2c8b4 <__assert_fail@plt+0x1b688>
   2cd24:	add	sp, sp, #48	; 0x30
   2cd28:	ldrd	r4, [sp]
   2cd2c:	ldr	r6, [sp, #8]
   2cd30:	add	sp, sp, #12
   2cd34:	pop	{pc}		; (ldr pc, [sp], #4)
   2cd38:	push	{r3}		; (str r3, [sp, #-4]!)
   2cd3c:	mov	ip, #0
   2cd40:	strd	r4, [sp, #-12]!
   2cd44:	str	lr, [sp, #8]
   2cd48:	sub	sp, sp, #56	; 0x38
   2cd4c:	add	r3, sp, #72	; 0x48
   2cd50:	add	r5, sp, #16
   2cd54:	mov	r4, r3
   2cd58:	mov	lr, r5
   2cd5c:	str	r3, [sp, #12]
   2cd60:	ldr	r3, [r4], #4
   2cd64:	cmp	r3, #0
   2cd68:	str	r3, [lr], #4
   2cd6c:	beq	2cd7c <__assert_fail@plt+0x1bb50>
   2cd70:	add	ip, ip, #1
   2cd74:	cmp	ip, #10
   2cd78:	bne	2cd60 <__assert_fail@plt+0x1bb34>
   2cd7c:	ldr	r3, [sp, #68]	; 0x44
   2cd80:	stm	sp, {r5, ip}
   2cd84:	bl	2c8b4 <__assert_fail@plt+0x1b688>
   2cd88:	add	sp, sp, #56	; 0x38
   2cd8c:	ldrd	r4, [sp]
   2cd90:	ldr	lr, [sp, #8]
   2cd94:	add	sp, sp, #12
   2cd98:	add	sp, sp, #4
   2cd9c:	bx	lr
   2cda0:	movw	r3, #388	; 0x184
   2cda4:	movt	r3, #4
   2cda8:	str	r4, [sp, #-8]!
   2cdac:	mov	r0, #10
   2cdb0:	ldr	r1, [r3]
   2cdb4:	str	lr, [sp, #4]
   2cdb8:	bl	11010 <fputc_unlocked@plt>
   2cdbc:	mov	r2, #5
   2cdc0:	movw	r1, #62500	; 0xf424
   2cdc4:	movt	r1, #2
   2cdc8:	mov	r0, #0
   2cdcc:	bl	1101c <dcgettext@plt>
   2cdd0:	mov	r1, r0
   2cdd4:	movw	r2, #62520	; 0xf438
   2cdd8:	movt	r2, #2
   2cddc:	mov	r0, #1
   2cde0:	bl	11184 <__printf_chk@plt>
   2cde4:	mov	r2, #5
   2cde8:	movw	r1, #62544	; 0xf450
   2cdec:	movt	r1, #2
   2cdf0:	mov	r0, #0
   2cdf4:	bl	1101c <dcgettext@plt>
   2cdf8:	mov	r1, r0
   2cdfc:	movw	r3, #57864	; 0xe208
   2ce00:	movt	r3, #2
   2ce04:	movw	r2, #57904	; 0xe230
   2ce08:	movt	r2, #2
   2ce0c:	mov	r0, #1
   2ce10:	bl	11184 <__printf_chk@plt>
   2ce14:	mov	r2, #5
   2ce18:	movw	r1, #62564	; 0xf464
   2ce1c:	movt	r1, #2
   2ce20:	mov	r0, #0
   2ce24:	bl	1101c <dcgettext@plt>
   2ce28:	mov	r1, r0
   2ce2c:	movw	r2, #62604	; 0xf48c
   2ce30:	movt	r2, #2
   2ce34:	mov	r0, #1
   2ce38:	ldr	r4, [sp]
   2ce3c:	ldr	lr, [sp, #4]
   2ce40:	add	sp, sp, #8
   2ce44:	b	11184 <__printf_chk@plt>
   2ce48:	str	r4, [sp, #-8]!
   2ce4c:	str	lr, [sp, #4]
   2ce50:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2ce54:	cmp	r0, #0
   2ce58:	beq	2ce68 <__assert_fail@plt+0x1bc3c>
   2ce5c:	ldr	r4, [sp]
   2ce60:	add	sp, sp, #4
   2ce64:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce68:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2ce6c:	str	r4, [sp, #-8]!
   2ce70:	str	lr, [sp, #4]
   2ce74:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2ce78:	cmp	r0, #0
   2ce7c:	beq	2ce8c <__assert_fail@plt+0x1bc60>
   2ce80:	ldr	r4, [sp]
   2ce84:	add	sp, sp, #4
   2ce88:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce8c:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2ce90:	str	r4, [sp, #-8]!
   2ce94:	str	lr, [sp, #4]
   2ce98:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2ce9c:	cmp	r0, #0
   2cea0:	beq	2ceb0 <__assert_fail@plt+0x1bc84>
   2cea4:	ldr	r4, [sp]
   2cea8:	add	sp, sp, #4
   2ceac:	pop	{pc}		; (ldr pc, [sp], #4)
   2ceb0:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2ceb4:	strd	r4, [sp, #-16]!
   2ceb8:	mov	r5, r0
   2cebc:	mov	r4, r1
   2cec0:	str	r6, [sp, #8]
   2cec4:	str	lr, [sp, #12]
   2cec8:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2cecc:	cmp	r0, #0
   2ced0:	beq	2cee4 <__assert_fail@plt+0x1bcb8>
   2ced4:	ldrd	r4, [sp]
   2ced8:	ldr	r6, [sp, #8]
   2cedc:	add	sp, sp, #12
   2cee0:	pop	{pc}		; (ldr pc, [sp], #4)
   2cee4:	adds	r4, r4, #0
   2cee8:	movne	r4, #1
   2ceec:	cmp	r5, #0
   2cef0:	moveq	r4, #1
   2cef4:	cmp	r4, #0
   2cef8:	beq	2ced4 <__assert_fail@plt+0x1bca8>
   2cefc:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2cf00:	cmp	r1, #0
   2cf04:	orreq	r1, r1, #1
   2cf08:	str	r4, [sp, #-8]!
   2cf0c:	str	lr, [sp, #4]
   2cf10:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2cf14:	cmp	r0, #0
   2cf18:	beq	2cf28 <__assert_fail@plt+0x1bcfc>
   2cf1c:	ldr	r4, [sp]
   2cf20:	add	sp, sp, #4
   2cf24:	pop	{pc}		; (ldr pc, [sp], #4)
   2cf28:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2cf2c:	strd	r4, [sp, #-16]!
   2cf30:	mov	r4, r0
   2cf34:	mov	r5, r2
   2cf38:	str	r6, [sp, #8]
   2cf3c:	mov	r6, r1
   2cf40:	str	lr, [sp, #12]
   2cf44:	bl	2d7e8 <__assert_fail@plt+0x1c5bc>
   2cf48:	cmp	r0, #0
   2cf4c:	beq	2cf60 <__assert_fail@plt+0x1bd34>
   2cf50:	ldrd	r4, [sp]
   2cf54:	ldr	r6, [sp, #8]
   2cf58:	add	sp, sp, #12
   2cf5c:	pop	{pc}		; (ldr pc, [sp], #4)
   2cf60:	cmp	r4, #0
   2cf64:	beq	2cf74 <__assert_fail@plt+0x1bd48>
   2cf68:	cmp	r6, #0
   2cf6c:	cmpne	r5, #0
   2cf70:	beq	2cf50 <__assert_fail@plt+0x1bd24>
   2cf74:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2cf78:	b	2cf2c <__assert_fail@plt+0x1bd00>
   2cf7c:	cmp	r2, #0
   2cf80:	cmpne	r1, #0
   2cf84:	str	r4, [sp, #-8]!
   2cf88:	moveq	r2, #1
   2cf8c:	str	lr, [sp, #4]
   2cf90:	moveq	r1, r2
   2cf94:	bl	2d7e8 <__assert_fail@plt+0x1c5bc>
   2cf98:	cmp	r0, #0
   2cf9c:	beq	2cfac <__assert_fail@plt+0x1bd80>
   2cfa0:	ldr	r4, [sp]
   2cfa4:	add	sp, sp, #4
   2cfa8:	pop	{pc}		; (ldr pc, [sp], #4)
   2cfac:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2cfb0:	mov	r2, r1
   2cfb4:	mov	r1, r0
   2cfb8:	mov	r0, #0
   2cfbc:	b	2cf2c <__assert_fail@plt+0x1bd00>
   2cfc0:	mov	r2, r1
   2cfc4:	mov	r1, r0
   2cfc8:	mov	r0, #0
   2cfcc:	b	2cf7c <__assert_fail@plt+0x1bd50>
   2cfd0:	cmp	r0, #0
   2cfd4:	strd	r4, [sp, #-16]!
   2cfd8:	mov	r5, r1
   2cfdc:	ldr	r4, [r1]
   2cfe0:	str	r6, [sp, #8]
   2cfe4:	str	lr, [sp, #12]
   2cfe8:	beq	2d018 <__assert_fail@plt+0x1bdec>
   2cfec:	lsr	r3, r4, #1
   2cff0:	add	r3, r3, #1
   2cff4:	adds	r4, r4, r3
   2cff8:	bcs	2d034 <__assert_fail@plt+0x1be08>
   2cffc:	mov	r1, r4
   2d000:	bl	2cf2c <__assert_fail@plt+0x1bd00>
   2d004:	ldr	r6, [sp, #8]
   2d008:	str	r4, [r5]
   2d00c:	ldrd	r4, [sp]
   2d010:	add	sp, sp, #12
   2d014:	pop	{pc}		; (ldr pc, [sp], #4)
   2d018:	cmp	r4, #0
   2d01c:	bne	2cffc <__assert_fail@plt+0x1bdd0>
   2d020:	mov	r4, #64	; 0x40
   2d024:	udiv	r4, r4, r2
   2d028:	cmp	r2, #64	; 0x40
   2d02c:	addhi	r4, r4, #1
   2d030:	b	2cffc <__assert_fail@plt+0x1bdd0>
   2d034:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2d038:	mov	r2, #1
   2d03c:	b	2cfd0 <__assert_fail@plt+0x1bda4>
   2d040:	ldr	ip, [r1]
   2d044:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2d048:	mov	r5, r1
   2d04c:	strd	r6, [sp, #8]
   2d050:	str	lr, [sp, #28]
   2d054:	strd	r8, [sp, #16]
   2d058:	asr	lr, ip, #1
   2d05c:	ldr	r8, [sp, #32]
   2d060:	str	sl, [sp, #24]
   2d064:	adds	r4, ip, lr
   2d068:	mvn	lr, r3
   2d06c:	lsr	lr, lr, #31
   2d070:	mvnvs	r4, #-2147483648	; 0x80000000
   2d074:	cmp	r3, r4
   2d078:	movge	r1, #0
   2d07c:	andlt	r1, lr, #1
   2d080:	cmp	r1, #0
   2d084:	movne	r4, r3
   2d088:	smull	r6, r7, r4, r8
   2d08c:	cmp	r7, r6, asr #31
   2d090:	bne	2d118 <__assert_fail@plt+0x1beec>
   2d094:	cmp	r6, #63	; 0x3f
   2d098:	mov	r1, r6
   2d09c:	ble	2d100 <__assert_fail@plt+0x1bed4>
   2d0a0:	cmp	r0, #0
   2d0a4:	sub	r6, r4, ip
   2d0a8:	streq	r0, [r5]
   2d0ac:	cmp	r6, r2
   2d0b0:	bge	2d0e0 <__assert_fail@plt+0x1beb4>
   2d0b4:	adds	r4, ip, r2
   2d0b8:	bvs	2d114 <__assert_fail@plt+0x1bee8>
   2d0bc:	cmp	r4, r3
   2d0c0:	movle	r3, #0
   2d0c4:	andgt	r3, lr, #1
   2d0c8:	cmp	r3, #0
   2d0cc:	bne	2d114 <__assert_fail@plt+0x1bee8>
   2d0d0:	smull	r8, r9, r4, r8
   2d0d4:	cmp	r9, r8, asr #31
   2d0d8:	mov	r1, r8
   2d0dc:	bne	2d114 <__assert_fail@plt+0x1bee8>
   2d0e0:	bl	2ceb4 <__assert_fail@plt+0x1bc88>
   2d0e4:	ldrd	r6, [sp, #8]
   2d0e8:	ldrd	r8, [sp, #16]
   2d0ec:	ldr	sl, [sp, #24]
   2d0f0:	str	r4, [r5]
   2d0f4:	ldrd	r4, [sp]
   2d0f8:	add	sp, sp, #28
   2d0fc:	pop	{pc}		; (ldr pc, [sp], #4)
   2d100:	mov	r6, #64	; 0x40
   2d104:	sdiv	r4, r6, r8
   2d108:	mls	r1, r8, r4, r6
   2d10c:	sub	r1, r6, r1
   2d110:	b	2d0a0 <__assert_fail@plt+0x1be74>
   2d114:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2d118:	mvn	r6, #-2147483648	; 0x80000000
   2d11c:	b	2d104 <__assert_fail@plt+0x1bed8>
   2d120:	mov	r1, #1
   2d124:	str	r4, [sp, #-8]!
   2d128:	str	lr, [sp, #4]
   2d12c:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   2d130:	cmp	r0, #0
   2d134:	beq	2d144 <__assert_fail@plt+0x1bf18>
   2d138:	ldr	r4, [sp]
   2d13c:	add	sp, sp, #4
   2d140:	pop	{pc}		; (ldr pc, [sp], #4)
   2d144:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2d148:	mov	r1, #1
   2d14c:	str	r4, [sp, #-8]!
   2d150:	str	lr, [sp, #4]
   2d154:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   2d158:	cmp	r0, #0
   2d15c:	beq	2d16c <__assert_fail@plt+0x1bf40>
   2d160:	ldr	r4, [sp]
   2d164:	add	sp, sp, #4
   2d168:	pop	{pc}		; (ldr pc, [sp], #4)
   2d16c:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2d170:	str	r4, [sp, #-8]!
   2d174:	str	lr, [sp, #4]
   2d178:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   2d17c:	cmp	r0, #0
   2d180:	beq	2d190 <__assert_fail@plt+0x1bf64>
   2d184:	ldr	r4, [sp]
   2d188:	add	sp, sp, #4
   2d18c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d190:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2d194:	str	r4, [sp, #-8]!
   2d198:	str	lr, [sp, #4]
   2d19c:	bl	2d304 <__assert_fail@plt+0x1c0d8>
   2d1a0:	cmp	r0, #0
   2d1a4:	beq	2d1b4 <__assert_fail@plt+0x1bf88>
   2d1a8:	ldr	r4, [sp]
   2d1ac:	add	sp, sp, #4
   2d1b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d1b4:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2d1b8:	strd	r4, [sp, #-16]!
   2d1bc:	mov	r4, r1
   2d1c0:	str	r6, [sp, #8]
   2d1c4:	mov	r6, r0
   2d1c8:	mov	r0, r1
   2d1cc:	str	lr, [sp, #12]
   2d1d0:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2d1d4:	subs	r5, r0, #0
   2d1d8:	beq	2d1fc <__assert_fail@plt+0x1bfd0>
   2d1dc:	mov	r2, r4
   2d1e0:	mov	r1, r6
   2d1e4:	bl	10fd4 <memcpy@plt>
   2d1e8:	mov	r0, r5
   2d1ec:	ldrd	r4, [sp]
   2d1f0:	ldr	r6, [sp, #8]
   2d1f4:	add	sp, sp, #12
   2d1f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d1fc:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2d200:	strd	r4, [sp, #-16]!
   2d204:	mov	r4, r1
   2d208:	str	r6, [sp, #8]
   2d20c:	mov	r6, r0
   2d210:	mov	r0, r1
   2d214:	str	lr, [sp, #12]
   2d218:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2d21c:	subs	r5, r0, #0
   2d220:	beq	2d244 <__assert_fail@plt+0x1c018>
   2d224:	mov	r2, r4
   2d228:	mov	r1, r6
   2d22c:	bl	10fd4 <memcpy@plt>
   2d230:	mov	r0, r5
   2d234:	ldrd	r4, [sp]
   2d238:	ldr	r6, [sp, #8]
   2d23c:	add	sp, sp, #12
   2d240:	pop	{pc}		; (ldr pc, [sp], #4)
   2d244:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2d248:	strd	r4, [sp, #-16]!
   2d24c:	mov	r4, r1
   2d250:	str	r6, [sp, #8]
   2d254:	mov	r6, r0
   2d258:	add	r0, r1, #1
   2d25c:	str	lr, [sp, #12]
   2d260:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2d264:	subs	r5, r0, #0
   2d268:	beq	2d294 <__assert_fail@plt+0x1c068>
   2d26c:	mov	r3, #0
   2d270:	mov	r1, r6
   2d274:	mov	r2, r4
   2d278:	strb	r3, [r5, r4]
   2d27c:	bl	10fd4 <memcpy@plt>
   2d280:	mov	r0, r5
   2d284:	ldrd	r4, [sp]
   2d288:	ldr	r6, [sp, #8]
   2d28c:	add	sp, sp, #12
   2d290:	pop	{pc}		; (ldr pc, [sp], #4)
   2d294:	bl	2d2c0 <__assert_fail@plt+0x1c094>
   2d298:	str	r4, [sp, #-8]!
   2d29c:	mov	r4, r0
   2d2a0:	str	lr, [sp, #4]
   2d2a4:	bl	11130 <strlen@plt>
   2d2a8:	add	r1, r0, #1
   2d2ac:	mov	r0, r4
   2d2b0:	ldr	r4, [sp]
   2d2b4:	ldr	lr, [sp, #4]
   2d2b8:	add	sp, sp, #8
   2d2bc:	b	2d1b8 <__assert_fail@plt+0x1bf8c>
   2d2c0:	movw	r3, #288	; 0x120
   2d2c4:	movt	r3, #4
   2d2c8:	str	r4, [sp, #-8]!
   2d2cc:	ldr	r4, [r3]
   2d2d0:	mov	r2, #5
   2d2d4:	movw	r1, #62684	; 0xf4dc
   2d2d8:	movt	r1, #2
   2d2dc:	mov	r0, #0
   2d2e0:	str	lr, [sp, #4]
   2d2e4:	bl	1101c <dcgettext@plt>
   2d2e8:	mov	r3, r0
   2d2ec:	movw	r2, #58680	; 0xe538
   2d2f0:	movt	r2, #2
   2d2f4:	mov	r1, #0
   2d2f8:	mov	r0, r4
   2d2fc:	bl	11094 <error@plt>
   2d300:	bl	11220 <abort@plt>
   2d304:	cmp	r1, #0
   2d308:	cmpne	r0, #0
   2d30c:	beq	2d358 <__assert_fail@plt+0x1c12c>
   2d310:	strd	r4, [sp, #-16]!
   2d314:	umull	r4, r5, r0, r1
   2d318:	str	r6, [sp, #8]
   2d31c:	str	lr, [sp, #12]
   2d320:	adds	r3, r5, #0
   2d324:	movne	r3, #1
   2d328:	cmp	r4, #0
   2d32c:	blt	2d338 <__assert_fail@plt+0x1c10c>
   2d330:	cmp	r3, #0
   2d334:	beq	2d364 <__assert_fail@plt+0x1c138>
   2d338:	bl	11148 <__errno_location@plt>
   2d33c:	mov	r3, #12
   2d340:	ldrd	r4, [sp]
   2d344:	ldr	r6, [sp, #8]
   2d348:	add	sp, sp, #12
   2d34c:	str	r3, [r0]
   2d350:	mov	r0, #0
   2d354:	pop	{pc}		; (ldr pc, [sp], #4)
   2d358:	mov	r1, #1
   2d35c:	mov	r0, r1
   2d360:	b	10f2c <calloc@plt>
   2d364:	ldrd	r4, [sp]
   2d368:	ldr	r6, [sp, #8]
   2d36c:	ldr	lr, [sp, #12]
   2d370:	add	sp, sp, #16
   2d374:	b	10f2c <calloc@plt>
   2d378:	cmp	r0, #0
   2d37c:	beq	2d388 <__assert_fail@plt+0x1c15c>
   2d380:	blt	2d390 <__assert_fail@plt+0x1c164>
   2d384:	b	110b8 <malloc@plt>
   2d388:	mov	r0, #1
   2d38c:	b	110b8 <malloc@plt>
   2d390:	str	r4, [sp, #-8]!
   2d394:	str	lr, [sp, #4]
   2d398:	bl	11148 <__errno_location@plt>
   2d39c:	mov	r3, #12
   2d3a0:	ldr	r4, [sp]
   2d3a4:	add	sp, sp, #4
   2d3a8:	str	r3, [r0]
   2d3ac:	mov	r0, #0
   2d3b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d3b4:	cmp	r0, #0
   2d3b8:	beq	2d3e0 <__assert_fail@plt+0x1c1b4>
   2d3bc:	cmp	r1, #0
   2d3c0:	str	r4, [sp, #-8]!
   2d3c4:	str	lr, [sp, #4]
   2d3c8:	beq	2d3e8 <__assert_fail@plt+0x1c1bc>
   2d3cc:	blt	2d3fc <__assert_fail@plt+0x1c1d0>
   2d3d0:	ldr	r4, [sp]
   2d3d4:	ldr	lr, [sp, #4]
   2d3d8:	add	sp, sp, #8
   2d3dc:	b	11028 <realloc@plt>
   2d3e0:	mov	r0, r1
   2d3e4:	b	2d378 <__assert_fail@plt+0x1c14c>
   2d3e8:	bl	13254 <__assert_fail@plt+0x2028>
   2d3ec:	ldr	r4, [sp]
   2d3f0:	add	sp, sp, #4
   2d3f4:	mov	r0, #0
   2d3f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d3fc:	bl	11148 <__errno_location@plt>
   2d400:	mov	r3, #12
   2d404:	str	r3, [r0]
   2d408:	b	2d3ec <__assert_fail@plt+0x1c1c0>
   2d40c:	strd	r4, [sp, #-16]!
   2d410:	mov	r4, r0
   2d414:	str	r6, [sp, #8]
   2d418:	str	lr, [sp, #12]
   2d41c:	bl	1107c <__fpending@plt>
   2d420:	ldr	r5, [r4]
   2d424:	mov	r6, r0
   2d428:	mov	r0, r4
   2d42c:	bl	2d560 <__assert_fail@plt+0x1c334>
   2d430:	mov	r4, r0
   2d434:	and	r5, r5, #32
   2d438:	cmp	r5, #0
   2d43c:	bne	2d474 <__assert_fail@plt+0x1c248>
   2d440:	cmp	r0, #0
   2d444:	beq	2d460 <__assert_fail@plt+0x1c234>
   2d448:	cmp	r6, #0
   2d44c:	bne	2d48c <__assert_fail@plt+0x1c260>
   2d450:	bl	11148 <__errno_location@plt>
   2d454:	ldr	r4, [r0]
   2d458:	subs	r4, r4, #9
   2d45c:	mvnne	r4, #0
   2d460:	mov	r0, r4
   2d464:	ldrd	r4, [sp]
   2d468:	ldr	r6, [sp, #8]
   2d46c:	add	sp, sp, #12
   2d470:	pop	{pc}		; (ldr pc, [sp], #4)
   2d474:	cmp	r0, #0
   2d478:	bne	2d48c <__assert_fail@plt+0x1c260>
   2d47c:	bl	11148 <__errno_location@plt>
   2d480:	str	r4, [r0]
   2d484:	mvn	r4, #0
   2d488:	b	2d460 <__assert_fail@plt+0x1c234>
   2d48c:	mvn	r4, #0
   2d490:	b	2d460 <__assert_fail@plt+0x1c234>
   2d494:	ldr	ip, [r0, #4]
   2d498:	cmp	ip, r1
   2d49c:	bcs	2d508 <__assert_fail@plt+0x1c2dc>
   2d4a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d4a4:	mov	r5, r1
   2d4a8:	mov	r4, r0
   2d4ac:	strd	r6, [sp, #8]
   2d4b0:	umull	r6, r7, r1, r3
   2d4b4:	str	r8, [sp, #16]
   2d4b8:	mov	r8, r3
   2d4bc:	str	lr, [sp, #20]
   2d4c0:	cmp	r7, #0
   2d4c4:	bne	2d54c <__assert_fail@plt+0x1c320>
   2d4c8:	ldr	r0, [r0, #8]
   2d4cc:	cmp	r0, r2
   2d4d0:	beq	2d518 <__assert_fail@plt+0x1c2ec>
   2d4d4:	mov	r1, r6
   2d4d8:	bl	2d3b4 <__assert_fail@plt+0x1c188>
   2d4dc:	subs	r6, r0, #0
   2d4e0:	beq	2d544 <__assert_fail@plt+0x1c318>
   2d4e4:	mov	r3, #1
   2d4e8:	str	r5, [r4]
   2d4ec:	stmib	r4, {r5, r6}
   2d4f0:	ldrd	r4, [sp]
   2d4f4:	mov	r0, r3
   2d4f8:	ldrd	r6, [sp, #8]
   2d4fc:	ldr	r8, [sp, #16]
   2d500:	add	sp, sp, #20
   2d504:	pop	{pc}		; (ldr pc, [sp], #4)
   2d508:	mov	r3, #1
   2d50c:	str	r1, [r0]
   2d510:	mov	r0, r3
   2d514:	bx	lr
   2d518:	mov	r0, r6
   2d51c:	bl	2d378 <__assert_fail@plt+0x1c14c>
   2d520:	subs	r6, r0, #0
   2d524:	beq	2d544 <__assert_fail@plt+0x1c318>
   2d528:	ldr	r1, [r4, #8]
   2d52c:	cmp	r1, #0
   2d530:	beq	2d4e4 <__assert_fail@plt+0x1c2b8>
   2d534:	ldr	r2, [r4]
   2d538:	mul	r2, r2, r8
   2d53c:	bl	10fd4 <memcpy@plt>
   2d540:	b	2d4e4 <__assert_fail@plt+0x1c2b8>
   2d544:	mov	r3, #0
   2d548:	b	2d4f0 <__assert_fail@plt+0x1c2c4>
   2d54c:	bl	11148 <__errno_location@plt>
   2d550:	mov	r2, #12
   2d554:	mov	r3, #0
   2d558:	str	r2, [r0]
   2d55c:	b	2d4f0 <__assert_fail@plt+0x1c2c4>
   2d560:	strd	r4, [sp, #-12]!
   2d564:	mov	r4, r0
   2d568:	str	lr, [sp, #8]
   2d56c:	sub	sp, sp, #12
   2d570:	bl	11190 <fileno@plt>
   2d574:	cmp	r0, #0
   2d578:	mov	r0, r4
   2d57c:	blt	2d600 <__assert_fail@plt+0x1c3d4>
   2d580:	bl	110d0 <__freading@plt>
   2d584:	cmp	r0, #0
   2d588:	bne	2d5cc <__assert_fail@plt+0x1c3a0>
   2d58c:	mov	r0, r4
   2d590:	bl	2d614 <__assert_fail@plt+0x1c3e8>
   2d594:	cmp	r0, #0
   2d598:	beq	2d5fc <__assert_fail@plt+0x1c3d0>
   2d59c:	bl	11148 <__errno_location@plt>
   2d5a0:	mov	r5, r0
   2d5a4:	mov	r0, r4
   2d5a8:	ldr	r4, [r5]
   2d5ac:	bl	111b4 <fclose@plt>
   2d5b0:	cmp	r4, #0
   2d5b4:	mvnne	r0, #0
   2d5b8:	strne	r4, [r5]
   2d5bc:	add	sp, sp, #12
   2d5c0:	ldrd	r4, [sp]
   2d5c4:	add	sp, sp, #8
   2d5c8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d5cc:	mov	r0, r4
   2d5d0:	bl	11190 <fileno@plt>
   2d5d4:	mov	r1, #1
   2d5d8:	mov	r2, #0
   2d5dc:	mov	r3, #0
   2d5e0:	str	r1, [sp]
   2d5e4:	bl	11064 <lseek64@plt>
   2d5e8:	mvn	r3, #0
   2d5ec:	mvn	r2, #0
   2d5f0:	cmp	r1, r3
   2d5f4:	cmpeq	r0, r2
   2d5f8:	bne	2d58c <__assert_fail@plt+0x1c360>
   2d5fc:	mov	r0, r4
   2d600:	add	sp, sp, #12
   2d604:	ldrd	r4, [sp]
   2d608:	ldr	lr, [sp, #8]
   2d60c:	add	sp, sp, #12
   2d610:	b	111b4 <fclose@plt>
   2d614:	str	r4, [sp, #-8]!
   2d618:	subs	r4, r0, #0
   2d61c:	str	lr, [sp, #4]
   2d620:	sub	sp, sp, #8
   2d624:	beq	2d640 <__assert_fail@plt+0x1c414>
   2d628:	bl	110d0 <__freading@plt>
   2d62c:	cmp	r0, #0
   2d630:	beq	2d640 <__assert_fail@plt+0x1c414>
   2d634:	ldr	r3, [r4]
   2d638:	tst	r3, #256	; 0x100
   2d63c:	bne	2d658 <__assert_fail@plt+0x1c42c>
   2d640:	mov	r0, r4
   2d644:	add	sp, sp, #8
   2d648:	ldr	r4, [sp]
   2d64c:	ldr	lr, [sp, #4]
   2d650:	add	sp, sp, #8
   2d654:	b	10f8c <fflush@plt>
   2d658:	mov	r1, #1
   2d65c:	mov	r2, #0
   2d660:	mov	r3, #0
   2d664:	mov	r0, r4
   2d668:	str	r1, [sp]
   2d66c:	bl	2d674 <__assert_fail@plt+0x1c448>
   2d670:	b	2d640 <__assert_fail@plt+0x1c414>
   2d674:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d678:	mov	r4, r0
   2d67c:	ldr	ip, [r0, #4]
   2d680:	strd	r6, [sp, #8]
   2d684:	str	lr, [sp, #20]
   2d688:	ldr	lr, [r0, #8]
   2d68c:	str	r8, [sp, #16]
   2d690:	sub	sp, sp, #8
   2d694:	ldr	r5, [sp, #32]
   2d698:	cmp	lr, ip
   2d69c:	beq	2d6c4 <__assert_fail@plt+0x1c498>
   2d6a0:	mov	r0, r4
   2d6a4:	str	r5, [sp, #32]
   2d6a8:	add	sp, sp, #8
   2d6ac:	ldrd	r4, [sp]
   2d6b0:	ldrd	r6, [sp, #8]
   2d6b4:	ldr	r8, [sp, #16]
   2d6b8:	ldr	lr, [sp, #20]
   2d6bc:	add	sp, sp, #24
   2d6c0:	b	111c0 <fseeko64@plt>
   2d6c4:	ldr	ip, [r0, #16]
   2d6c8:	ldr	lr, [r0, #20]
   2d6cc:	cmp	lr, ip
   2d6d0:	bne	2d6a0 <__assert_fail@plt+0x1c474>
   2d6d4:	ldr	r8, [r0, #36]	; 0x24
   2d6d8:	cmp	r8, #0
   2d6dc:	bne	2d6a0 <__assert_fail@plt+0x1c474>
   2d6e0:	mov	r6, r2
   2d6e4:	mov	r7, r3
   2d6e8:	bl	11190 <fileno@plt>
   2d6ec:	mov	r2, r6
   2d6f0:	mov	r3, r7
   2d6f4:	str	r5, [sp]
   2d6f8:	bl	11064 <lseek64@plt>
   2d6fc:	mvn	r3, #0
   2d700:	mvn	r2, #0
   2d704:	cmp	r1, r3
   2d708:	cmpeq	r0, r2
   2d70c:	beq	2d73c <__assert_fail@plt+0x1c510>
   2d710:	ldr	r3, [r4]
   2d714:	strd	r0, [r4, #80]	; 0x50
   2d718:	bic	r3, r3, #16
   2d71c:	str	r3, [r4]
   2d720:	mov	r0, r8
   2d724:	add	sp, sp, #8
   2d728:	ldrd	r4, [sp]
   2d72c:	ldrd	r6, [sp, #8]
   2d730:	ldr	r8, [sp, #16]
   2d734:	add	sp, sp, #20
   2d738:	pop	{pc}		; (ldr pc, [sp], #4)
   2d73c:	mvn	r8, #0
   2d740:	b	2d720 <__assert_fail@plt+0x1c4f4>
   2d744:	push	{lr}		; (str lr, [sp, #-4]!)
   2d748:	sub	sp, sp, #268	; 0x10c
   2d74c:	movw	r2, #257	; 0x101
   2d750:	add	r1, sp, #4
   2d754:	bl	2d820 <__assert_fail@plt+0x1c5f4>
   2d758:	cmp	r0, #0
   2d75c:	movne	r0, #0
   2d760:	bne	2d794 <__assert_fail@plt+0x1c568>
   2d764:	movw	r1, #62704	; 0xf4f0
   2d768:	movt	r1, #2
   2d76c:	add	r0, sp, #4
   2d770:	bl	10f68 <strcmp@plt>
   2d774:	cmp	r0, #0
   2d778:	beq	2d794 <__assert_fail@plt+0x1c568>
   2d77c:	add	r0, sp, #4
   2d780:	movw	r1, #62708	; 0xf4f4
   2d784:	movt	r1, #2
   2d788:	bl	10f68 <strcmp@plt>
   2d78c:	adds	r0, r0, #0
   2d790:	movne	r0, #1
   2d794:	add	sp, sp, #268	; 0x10c
   2d798:	pop	{pc}		; (ldr pc, [sp], #4)
   2d79c:	mov	r0, #14
   2d7a0:	str	r4, [sp, #-8]!
   2d7a4:	str	lr, [sp, #4]
   2d7a8:	bl	111f0 <nl_langinfo@plt>
   2d7ac:	cmp	r0, #0
   2d7b0:	beq	2d7d4 <__assert_fail@plt+0x1c5a8>
   2d7b4:	ldrb	r2, [r0]
   2d7b8:	movw	r3, #62716	; 0xf4fc
   2d7bc:	movt	r3, #2
   2d7c0:	ldr	r4, [sp]
   2d7c4:	add	sp, sp, #4
   2d7c8:	cmp	r2, #0
   2d7cc:	moveq	r0, r3
   2d7d0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d7d4:	ldr	r4, [sp]
   2d7d8:	add	sp, sp, #4
   2d7dc:	movw	r0, #62716	; 0xf4fc
   2d7e0:	movt	r0, #2
   2d7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   2d7e8:	umull	r2, r3, r1, r2
   2d7ec:	cmp	r3, #0
   2d7f0:	bne	2d7fc <__assert_fail@plt+0x1c5d0>
   2d7f4:	mov	r1, r2
   2d7f8:	b	2d3b4 <__assert_fail@plt+0x1c188>
   2d7fc:	str	r4, [sp, #-8]!
   2d800:	str	lr, [sp, #4]
   2d804:	bl	11148 <__errno_location@plt>
   2d808:	mov	r3, #12
   2d80c:	ldr	r4, [sp]
   2d810:	add	sp, sp, #4
   2d814:	str	r3, [r0]
   2d818:	mov	r0, #0
   2d81c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d820:	strd	r4, [sp, #-16]!
   2d824:	mov	r5, r1
   2d828:	mov	r1, #0
   2d82c:	mov	r4, r2
   2d830:	str	r6, [sp, #8]
   2d834:	str	lr, [sp, #12]
   2d838:	bl	111d8 <setlocale@plt>
   2d83c:	subs	r6, r0, #0
   2d840:	beq	2d8c0 <__assert_fail@plt+0x1c694>
   2d844:	bl	11130 <strlen@plt>
   2d848:	cmp	r4, r0
   2d84c:	bhi	2d86c <__assert_fail@plt+0x1c640>
   2d850:	cmp	r4, #0
   2d854:	moveq	r0, #34	; 0x22
   2d858:	bne	2d890 <__assert_fail@plt+0x1c664>
   2d85c:	ldrd	r4, [sp]
   2d860:	ldr	r6, [sp, #8]
   2d864:	add	sp, sp, #12
   2d868:	pop	{pc}		; (ldr pc, [sp], #4)
   2d86c:	add	r2, r0, #1
   2d870:	mov	r1, r6
   2d874:	mov	r0, r5
   2d878:	bl	10fd4 <memcpy@plt>
   2d87c:	ldrd	r4, [sp]
   2d880:	mov	r0, #0
   2d884:	ldr	r6, [sp, #8]
   2d888:	add	sp, sp, #12
   2d88c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d890:	sub	r4, r4, #1
   2d894:	mov	r1, r6
   2d898:	mov	r2, r4
   2d89c:	mov	r0, r5
   2d8a0:	bl	10fd4 <memcpy@plt>
   2d8a4:	mov	r3, #0
   2d8a8:	mov	r0, #34	; 0x22
   2d8ac:	strb	r3, [r5, r4]
   2d8b0:	ldrd	r4, [sp]
   2d8b4:	ldr	r6, [sp, #8]
   2d8b8:	add	sp, sp, #12
   2d8bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2d8c0:	cmp	r4, #0
   2d8c4:	mov	r0, #22
   2d8c8:	strbne	r6, [r5]
   2d8cc:	ldrd	r4, [sp]
   2d8d0:	ldr	r6, [sp, #8]
   2d8d4:	add	sp, sp, #12
   2d8d8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d8dc:	mov	r1, #0
   2d8e0:	b	111d8 <setlocale@plt>
   2d8e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d8e8:	mov	r7, r0
   2d8ec:	ldr	r6, [pc, #72]	; 2d93c <__assert_fail@plt+0x1c710>
   2d8f0:	ldr	r5, [pc, #72]	; 2d940 <__assert_fail@plt+0x1c714>
   2d8f4:	add	r6, pc, r6
   2d8f8:	add	r5, pc, r5
   2d8fc:	sub	r6, r6, r5
   2d900:	mov	r8, r1
   2d904:	mov	r9, r2
   2d908:	bl	10f00 <pthread_mutex_unlock@plt-0x20>
   2d90c:	asrs	r6, r6, #2
   2d910:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d914:	mov	r4, #0
   2d918:	add	r4, r4, #1
   2d91c:	ldr	r3, [r5], #4
   2d920:	mov	r2, r9
   2d924:	mov	r1, r8
   2d928:	mov	r0, r7
   2d92c:	blx	r3
   2d930:	cmp	r6, r4
   2d934:	bne	2d918 <__assert_fail@plt+0x1c6ec>
   2d938:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d93c:	andeq	r2, r1, r8, lsl r6
   2d940:	andeq	r2, r1, r0, lsl r6
   2d944:	bx	lr
   2d948:	ldr	r3, [pc, #12]	; 2d95c <__assert_fail@plt+0x1c730>
   2d94c:	mov	r1, #0
   2d950:	add	r3, pc, r3
   2d954:	ldr	r2, [r3]
   2d958:	b	11160 <__cxa_atexit@plt>
   2d95c:	andeq	r2, r1, r4, asr #15

Disassembly of section .fini:

0002d960 <.fini>:
   2d960:	push	{r3, lr}
   2d964:	pop	{r3, pc}
