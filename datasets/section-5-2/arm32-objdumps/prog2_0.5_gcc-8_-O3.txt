
../repos/prog2/0.5:     file format elf32-littlearm


Disassembly of section .init:

000105e4 <.init>:
   105e4:	push	{r3, lr}
   105e8:	bl	10790 <_start@@Base+0x3c>
   105ec:	pop	{r3, pc}

Disassembly of section .plt:

000105f0 <strcmp@plt-0x14>:
   105f0:	push	{lr}		; (str lr, [sp, #-4]!)
   105f4:	ldr	lr, [pc, #4]	; 10600 <strcmp@plt-0x4>
   105f8:	add	lr, pc, lr
   105fc:	ldr	pc, [lr, #8]!
   10600:	andeq	r0, r1, r0, lsl #20

00010604 <strcmp@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2560]!	; 0xa00

00010610 <printf@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2552]!	; 0x9f8

0001061c <__libc_start_main@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2544]!	; 0x9f0

00010628 <__gmon_start__@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2536]!	; 0x9e8

00010634 <strlen@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2528]!	; 0x9e0

00010640 <memset@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2520]!	; 0x9d8

0001064c <__isoc99_scanf@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2512]!	; 0x9d0

00010658 <abort@plt>:
   10658:	add	ip, pc, #0, 12
   1065c:	add	ip, ip, #16, 20	; 0x10000
   10660:	ldr	pc, [ip, #2504]!	; 0x9c8

Disassembly of section .text:

00010664 <main@@Base>:
   10664:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10668:	mov	r2, #100	; 0x64
   1066c:	mov	r1, #0
   10670:	strd	r6, [sp, #8]
   10674:	movw	r5, #2324	; 0x914
   10678:	movt	r5, #1
   1067c:	str	r8, [sp, #16]
   10680:	movw	r7, #2308	; 0x904
   10684:	movt	r7, #1
   10688:	str	lr, [sp, #20]
   1068c:	sub	sp, sp, #200	; 0xc8
   10690:	movw	r6, #2320	; 0x910
   10694:	movt	r6, #1
   10698:	mov	r0, sp
   1069c:	bl	10640 <memset@plt>
   106a0:	add	r0, sp, #100	; 0x64
   106a4:	mov	r2, #100	; 0x64
   106a8:	mov	r1, #0
   106ac:	bl	10640 <memset@plt>
   106b0:	mov	r0, r7
   106b4:	bl	10610 <printf@plt>
   106b8:	mov	r1, sp
   106bc:	mov	r0, r6
   106c0:	bl	1064c <__isoc99_scanf@plt>
   106c4:	mov	r1, r5
   106c8:	mov	r0, sp
   106cc:	bl	10604 <strcmp@plt>
   106d0:	cmp	r0, #0
   106d4:	beq	1073c <main@@Base+0xd8>
   106d8:	add	r8, sp, #100	; 0x64
   106dc:	mov	r4, #0
   106e0:	b	106f4 <main@@Base+0x90>
   106e4:	add	r2, sp, #200	; 0xc8
   106e8:	add	r3, r2, r3
   106ec:	ldrb	r3, [r3, #-200]	; 0xffffff38
   106f0:	strb	r3, [r8], #1
   106f4:	mov	r0, sp
   106f8:	bl	10634 <strlen@plt>
   106fc:	sub	r3, r0, #1
   10700:	cmp	r0, r4
   10704:	sub	r3, r3, r4
   10708:	add	r4, r4, #1
   1070c:	bhi	106e4 <main@@Base+0x80>
   10710:	add	r1, sp, #100	; 0x64
   10714:	mov	r0, sp
   10718:	bl	10604 <strcmp@plt>
   1071c:	cmp	r0, #0
   10720:	mov	r1, sp
   10724:	movweq	r0, #2328	; 0x918
   10728:	movwne	r0, #2356	; 0x934
   1072c:	movteq	r0, #1
   10730:	movtne	r0, #1
   10734:	bl	10610 <printf@plt>
   10738:	b	106b0 <main@@Base+0x4c>
   1073c:	add	sp, sp, #200	; 0xc8
   10740:	ldrd	r4, [sp]
   10744:	ldrd	r6, [sp, #8]
   10748:	ldr	r8, [sp, #16]
   1074c:	add	sp, sp, #20
   10750:	pop	{pc}		; (ldr pc, [sp], #4)

00010754 <_start@@Base>:
   10754:	mov	fp, #0
   10758:	mov	lr, #0
   1075c:	pop	{r1}		; (ldr r1, [sp], #4)
   10760:	mov	r2, sp
   10764:	push	{r2}		; (str r2, [sp, #-4]!)
   10768:	push	{r0}		; (str r0, [sp, #-4]!)
   1076c:	ldr	ip, [pc, #16]	; 10784 <_start@@Base+0x30>
   10770:	push	{ip}		; (str ip, [sp, #-4]!)
   10774:	ldr	r0, [pc, #12]	; 10788 <_start@@Base+0x34>
   10778:	ldr	r3, [pc, #12]	; 1078c <_start@@Base+0x38>
   1077c:	bl	1061c <__libc_start_main@plt>
   10780:	bl	10658 <abort@plt>
   10784:	strdeq	r0, [r1], -r4
   10788:	andeq	r0, r1, r4, ror #12
   1078c:	muleq	r1, r4, r8
   10790:	ldr	r3, [pc, #20]	; 107ac <_start@@Base+0x58>
   10794:	ldr	r2, [pc, #20]	; 107b0 <_start@@Base+0x5c>
   10798:	add	r3, pc, r3
   1079c:	ldr	r2, [r3, r2]
   107a0:	cmp	r2, #0
   107a4:	bxeq	lr
   107a8:	b	10628 <__gmon_start__@plt>
   107ac:	andeq	r0, r1, r0, ror #16
   107b0:	andeq	r0, r0, ip, lsr #32
   107b4:	ldr	r0, [pc, #24]	; 107d4 <_start@@Base+0x80>
   107b8:	ldr	r3, [pc, #24]	; 107d8 <_start@@Base+0x84>
   107bc:	cmp	r3, r0
   107c0:	bxeq	lr
   107c4:	ldr	r3, [pc, #16]	; 107dc <_start@@Base+0x88>
   107c8:	cmp	r3, #0
   107cc:	bxeq	lr
   107d0:	bx	r3
   107d4:	andeq	r1, r2, r8, lsr r0
   107d8:	andeq	r1, r2, r8, lsr r0
   107dc:	andeq	r0, r0, r0
   107e0:	ldr	r0, [pc, #36]	; 1080c <_start@@Base+0xb8>
   107e4:	ldr	r1, [pc, #36]	; 10810 <_start@@Base+0xbc>
   107e8:	sub	r1, r1, r0
   107ec:	asr	r1, r1, #2
   107f0:	add	r1, r1, r1, lsr #31
   107f4:	asrs	r1, r1, #1
   107f8:	bxeq	lr
   107fc:	ldr	r3, [pc, #16]	; 10814 <_start@@Base+0xc0>
   10800:	cmp	r3, #0
   10804:	bxeq	lr
   10808:	bx	r3
   1080c:	andeq	r1, r2, r8, lsr r0
   10810:	andeq	r1, r2, r8, lsr r0
   10814:	andeq	r0, r0, r0
   10818:	push	{r4, lr}
   1081c:	ldr	r4, [pc, #24]	; 1083c <_start@@Base+0xe8>
   10820:	ldrb	r3, [r4]
   10824:	cmp	r3, #0
   10828:	popne	{r4, pc}
   1082c:	bl	107b4 <_start@@Base+0x60>
   10830:	mov	r3, #1
   10834:	strb	r3, [r4]
   10838:	pop	{r4, pc}
   1083c:	andeq	r1, r2, r8, lsr r0
   10840:	b	107e0 <_start@@Base+0x8c>

00010844 <inverte@@Base>:
   10844:	strd	r4, [sp, #-16]!
   10848:	mov	r5, r0
   1084c:	mov	r4, #0
   10850:	str	r6, [sp, #8]
   10854:	sub	r6, r1, #1
   10858:	str	lr, [sp, #12]
   1085c:	b	10868 <inverte@@Base+0x24>
   10860:	ldrb	r3, [r5, r3]
   10864:	strb	r3, [r6, #1]!
   10868:	mov	r0, r5
   1086c:	bl	10634 <strlen@plt>
   10870:	sub	r3, r0, #1
   10874:	cmp	r0, r4
   10878:	sub	r3, r3, r4
   1087c:	add	r4, r4, #1
   10880:	bhi	10860 <inverte@@Base+0x1c>
   10884:	ldrd	r4, [sp]
   10888:	ldr	r6, [sp, #8]
   1088c:	add	sp, sp, #12
   10890:	pop	{pc}		; (ldr pc, [sp], #4)

00010894 <__libc_csu_init@@Base>:
   10894:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10898:	mov	r7, r0
   1089c:	ldr	r6, [pc, #72]	; 108ec <__libc_csu_init@@Base+0x58>
   108a0:	ldr	r5, [pc, #72]	; 108f0 <__libc_csu_init@@Base+0x5c>
   108a4:	add	r6, pc, r6
   108a8:	add	r5, pc, r5
   108ac:	sub	r6, r6, r5
   108b0:	mov	r8, r1
   108b4:	mov	r9, r2
   108b8:	bl	105e4 <strcmp@plt-0x20>
   108bc:	asrs	r6, r6, #2
   108c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108c4:	mov	r4, #0
   108c8:	add	r4, r4, #1
   108cc:	ldr	r3, [r5], #4
   108d0:	mov	r2, r9
   108d4:	mov	r1, r8
   108d8:	mov	r0, r7
   108dc:	blx	r3
   108e0:	cmp	r6, r4
   108e4:	bne	108c8 <__libc_csu_init@@Base+0x34>
   108e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108ec:	andeq	r0, r1, r8, ror #12
   108f0:	andeq	r0, r1, r0, ror #12

000108f4 <__libc_csu_fini@@Base>:
   108f4:	bx	lr

Disassembly of section .fini:

000108f8 <.fini>:
   108f8:	push	{r3, lr}
   108fc:	pop	{r3, pc}
