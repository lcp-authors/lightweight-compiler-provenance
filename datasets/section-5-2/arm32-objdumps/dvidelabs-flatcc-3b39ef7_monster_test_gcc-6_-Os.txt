
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

0001298c <.init>:
   1298c:	push	{r3, lr}
   12990:	bl	12e84 <_start@@Base+0x3c>
   12994:	pop	{r3, pc}

Disassembly of section .plt:

00012998 <raise@plt-0x14>:
   12998:	push	{lr}		; (str lr, [sp, #-4]!)
   1299c:	ldr	lr, [pc, #4]	; 129a8 <raise@plt-0x4>
   129a0:	add	lr, pc, lr
   129a4:	ldr	pc, [lr, #8]!
   129a8:	andeq	r0, r2, r8, asr r6

000129ac <raise@plt>:
   129ac:	add	ip, pc, #0, 12
   129b0:	add	ip, ip, #32, 20	; 0x20000
   129b4:	ldr	pc, [ip, #1624]!	; 0x658

000129b8 <strcmp@plt>:
   129b8:	add	ip, pc, #0, 12
   129bc:	add	ip, ip, #32, 20	; 0x20000
   129c0:	ldr	pc, [ip, #1616]!	; 0x650

000129c4 <printf@plt>:
   129c4:	add	ip, pc, #0, 12
   129c8:	add	ip, ip, #32, 20	; 0x20000
   129cc:	ldr	pc, [ip, #1608]!	; 0x648

000129d0 <free@plt>:
   129d0:	add	ip, pc, #0, 12
   129d4:	add	ip, ip, #32, 20	; 0x20000
   129d8:	ldr	pc, [ip, #1600]!	; 0x640

000129dc <memcpy@plt>:
   129dc:	add	ip, pc, #0, 12
   129e0:	add	ip, ip, #32, 20	; 0x20000
   129e4:	ldr	pc, [ip, #1592]!	; 0x638

000129e8 <memcmp@plt>:
   129e8:	add	ip, pc, #0, 12
   129ec:	add	ip, ip, #32, 20	; 0x20000
   129f0:	ldr	pc, [ip, #1584]!	; 0x630

000129f4 <realloc@plt>:
   129f4:	add	ip, pc, #0, 12
   129f8:	add	ip, ip, #32, 20	; 0x20000
   129fc:	ldr	pc, [ip, #1576]!	; 0x628

00012a00 <gettimeofday@plt>:
   12a00:	add	ip, pc, #0, 12
   12a04:	add	ip, ip, #32, 20	; 0x20000
   12a08:	ldr	pc, [ip, #1568]!	; 0x620

00012a0c <puts@plt>:
   12a0c:	add	ip, pc, #0, 12
   12a10:	add	ip, ip, #32, 20	; 0x20000
   12a14:	ldr	pc, [ip, #1560]!	; 0x618

00012a18 <malloc@plt>:
   12a18:	add	ip, pc, #0, 12
   12a1c:	add	ip, ip, #32, 20	; 0x20000
   12a20:	ldr	pc, [ip, #1552]!	; 0x610

00012a24 <__libc_start_main@plt>:
   12a24:	add	ip, pc, #0, 12
   12a28:	add	ip, ip, #32, 20	; 0x20000
   12a2c:	ldr	pc, [ip, #1544]!	; 0x608

00012a30 <__gmon_start__@plt>:
   12a30:	add	ip, pc, #0, 12
   12a34:	add	ip, ip, #32, 20	; 0x20000
   12a38:	ldr	pc, [ip, #1536]!	; 0x600

00012a3c <strlen@plt>:
   12a3c:	add	ip, pc, #0, 12
   12a40:	add	ip, ip, #32, 20	; 0x20000
   12a44:	ldr	pc, [ip, #1528]!	; 0x5f8

00012a48 <fprintf@plt>:
   12a48:	add	ip, pc, #0, 12
   12a4c:	add	ip, ip, #32, 20	; 0x20000
   12a50:	ldr	pc, [ip, #1520]!	; 0x5f0

00012a54 <posix_memalign@plt>:
   12a54:	add	ip, pc, #0, 12
   12a58:	add	ip, ip, #32, 20	; 0x20000
   12a5c:	ldr	pc, [ip, #1512]!	; 0x5e8

00012a60 <memset@plt>:
   12a60:	add	ip, pc, #0, 12
   12a64:	add	ip, ip, #32, 20	; 0x20000
   12a68:	ldr	pc, [ip, #1504]!	; 0x5e0

00012a6c <strncpy@plt>:
   12a6c:	add	ip, pc, #0, 12
   12a70:	add	ip, ip, #32, 20	; 0x20000
   12a74:	ldr	pc, [ip, #1496]!	; 0x5d8

00012a78 <memchr@plt>:
   12a78:	add	ip, pc, #0, 12
   12a7c:	add	ip, ip, #32, 20	; 0x20000
   12a80:	ldr	pc, [ip, #1488]!	; 0x5d0

00012a84 <fputc@plt>:
   12a84:	add	ip, pc, #0, 12
   12a88:	add	ip, ip, #32, 20	; 0x20000
   12a8c:	ldr	pc, [ip, #1480]!	; 0x5c8

00012a90 <fputs@plt>:
   12a90:	add	ip, pc, #0, 12
   12a94:	add	ip, ip, #32, 20	; 0x20000
   12a98:	ldr	pc, [ip, #1472]!	; 0x5c0

00012a9c <strncmp@plt>:
   12a9c:	add	ip, pc, #0, 12
   12aa0:	add	ip, ip, #32, 20	; 0x20000
   12aa4:	ldr	pc, [ip, #1464]!	; 0x5b8

00012aa8 <abort@plt>:
   12aa8:	add	ip, pc, #0, 12
   12aac:	add	ip, ip, #32, 20	; 0x20000
   12ab0:	ldr	pc, [ip, #1456]!	; 0x5b0

00012ab4 <__assert_fail@plt>:
   12ab4:	add	ip, pc, #0, 12
   12ab8:	add	ip, ip, #32, 20	; 0x20000
   12abc:	ldr	pc, [ip, #1448]!	; 0x5a8

Disassembly of section .text:

00012ac0 <main@@Base-0x1f4>:
   12ac0:	subs	r2, r0, #0
   12ac4:	bne	12ae0 <__assert_fail@plt+0x2c>
   12ac8:	push	{r4, lr}
   12acc:	ldr	r3, [pc, #52]	; 12b08 <__assert_fail@plt+0x54>
   12ad0:	ldr	r2, [pc, #52]	; 12b0c <__assert_fail@plt+0x58>
   12ad4:	ldr	r1, [pc, #52]	; 12b10 <__assert_fail@plt+0x5c>
   12ad8:	ldr	r0, [pc, #52]	; 12b14 <__assert_fail@plt+0x60>
   12adc:	bl	12ab4 <__assert_fail@plt>
   12ae0:	ldr	r3, [r2]
   12ae4:	sub	r3, r2, r3
   12ae8:	ldrh	r1, [r3]
   12aec:	cmp	r1, #13
   12af0:	movls	r0, #0
   12af4:	bls	12b04 <__assert_fail@plt+0x50>
   12af8:	ldrh	r0, [r3, #12]
   12afc:	cmp	r0, #0
   12b00:	ldrbne	r0, [r2, r0]
   12b04:	bx	lr
   12b08:	andeq	lr, r1, sp, lsr #18
   12b0c:	andeq	r0, r0, r5, lsr r3
   12b10:	andeq	lr, r1, r3, lsl #26
   12b14:	andeq	lr, r1, r5, ror #26
   12b18:	subs	r3, r0, #0
   12b1c:	bne	12b38 <__assert_fail@plt+0x84>
   12b20:	push	{r4, lr}
   12b24:	ldr	r3, [pc, #60]	; 12b68 <__assert_fail@plt+0xb4>
   12b28:	ldr	r2, [pc, #60]	; 12b6c <__assert_fail@plt+0xb8>
   12b2c:	ldr	r1, [pc, #60]	; 12b70 <__assert_fail@plt+0xbc>
   12b30:	ldr	r0, [pc, #60]	; 12b74 <__assert_fail@plt+0xc0>
   12b34:	bl	12ab4 <__assert_fail@plt>
   12b38:	ldr	r2, [r3]
   12b3c:	sub	r2, r3, r2
   12b40:	ldrh	r1, [r2]
   12b44:	cmp	r1, #15
   12b48:	movls	r0, #0
   12b4c:	bls	12b64 <__assert_fail@plt+0xb0>
   12b50:	ldrh	r0, [r2, #14]
   12b54:	cmp	r0, #0
   12b58:	addne	r2, r3, r0
   12b5c:	ldrne	r0, [r3, r0]
   12b60:	addne	r0, r2, r0
   12b64:	bx	lr
   12b68:	andeq	lr, r1, sl, asr #18
   12b6c:	andeq	r0, r0, r5, lsr r3
   12b70:	andeq	lr, r1, r3, lsl #26
   12b74:	andeq	lr, r1, r5, ror #26
   12b78:	subs	r2, r0, #0
   12b7c:	bne	12b98 <__assert_fail@plt+0xe4>
   12b80:	push	{r4, lr}
   12b84:	ldr	r3, [pc, #52]	; 12bc0 <__assert_fail@plt+0x10c>
   12b88:	ldr	r2, [pc, #52]	; 12bc4 <__assert_fail@plt+0x110>
   12b8c:	ldr	r1, [pc, #52]	; 12bc8 <__assert_fail@plt+0x114>
   12b90:	ldr	r0, [pc, #52]	; 12bcc <__assert_fail@plt+0x118>
   12b94:	bl	12ab4 <__assert_fail@plt>
   12b98:	ldr	r3, [r2]
   12b9c:	sub	r3, r2, r3
   12ba0:	ldrh	r1, [r3]
   12ba4:	cmp	r1, #5
   12ba8:	movls	r0, #0
   12bac:	bls	12bbc <__assert_fail@plt+0x108>
   12bb0:	ldrh	r0, [r3, #4]
   12bb4:	cmp	r0, #0
   12bb8:	ldrne	r0, [r2, r0]
   12bbc:	bx	lr
   12bc0:	andeq	lr, r1, r2, ror #18
   12bc4:	andeq	r0, r0, r2, lsl #6
   12bc8:	andeq	lr, r1, r3, lsl #26
   12bcc:	andeq	lr, r1, r5, ror #26
   12bd0:	subs	r3, r0, #0
   12bd4:	bne	12bf0 <__assert_fail@plt+0x13c>
   12bd8:	push	{r4, lr}
   12bdc:	ldr	r3, [pc, #64]	; 12c24 <__assert_fail@plt+0x170>
   12be0:	ldr	r2, [pc, #64]	; 12c28 <__assert_fail@plt+0x174>
   12be4:	ldr	r1, [pc, #64]	; 12c2c <__assert_fail@plt+0x178>
   12be8:	ldr	r0, [pc, #64]	; 12c30 <__assert_fail@plt+0x17c>
   12bec:	bl	12ab4 <__assert_fail@plt>
   12bf0:	ldr	r2, [r3]
   12bf4:	sub	r2, r3, r2
   12bf8:	ldrh	r1, [r2]
   12bfc:	cmp	r1, #21
   12c00:	movls	r0, #0
   12c04:	bls	12c20 <__assert_fail@plt+0x16c>
   12c08:	ldrh	r0, [r2, #20]
   12c0c:	cmp	r0, #0
   12c10:	addne	r2, r3, r0
   12c14:	ldrne	r0, [r3, r0]
   12c18:	addne	r0, r0, #4
   12c1c:	addne	r0, r2, r0
   12c20:	bx	lr
   12c24:	andeq	lr, r1, r7, lsl #19
   12c28:	andeq	r0, r0, r7, lsr r3
   12c2c:	andeq	lr, r1, r3, lsl #26
   12c30:	andeq	lr, r1, r5, ror #26
   12c34:	push	{r0, r1, r2, r4, r5, lr}
   12c38:	mov	r4, r0
   12c3c:	add	r0, sp, #8
   12c40:	stmdb	r0, {r1, r2}
   12c44:	ldr	r2, [sp]
   12c48:	cmp	r2, #0
   12c4c:	beq	12c5c <__assert_fail@plt+0x1a8>
   12c50:	ldr	r1, [r2, #-4]
   12c54:	cmp	r3, r1
   12c58:	bcc	12c70 <__assert_fail@plt+0x1bc>
   12c5c:	ldr	r3, [pc, #64]	; 12ca4 <__assert_fail@plt+0x1f0>
   12c60:	ldr	r2, [pc, #64]	; 12ca8 <__assert_fail@plt+0x1f4>
   12c64:	ldr	r1, [pc, #64]	; 12cac <__assert_fail@plt+0x1f8>
   12c68:	ldr	r0, [pc, #64]	; 12cb0 <__assert_fail@plt+0x1fc>
   12c6c:	bl	12ab4 <__assert_fail@plt>
   12c70:	ldrb	r5, [r2, r3]
   12c74:	cmp	r5, #0
   12c78:	strbeq	r5, [r4]
   12c7c:	streq	r5, [r4, #4]
   12c80:	beq	12c98 <__assert_fail@plt+0x1e4>
   12c84:	mov	r1, r3
   12c88:	ldr	r0, [sp, #4]
   12c8c:	bl	14138 <_start@@Base+0x12f0>
   12c90:	strb	r5, [r4]
   12c94:	str	r0, [r4, #4]
   12c98:	mov	r0, r4
   12c9c:	add	sp, sp, #12
   12ca0:	pop	{r4, r5, pc}
   12ca4:	andeq	lr, r1, r5, lsr #19
   12ca8:	andeq	r0, r0, r5, lsl #6
   12cac:	andeq	lr, r1, r3, lsl #26
   12cb0:	andeq	lr, r1, r8, ror #28

00012cb4 <main@@Base>:
   12cb4:	push	{r4, lr}
   12cb8:	sub	sp, sp, #232	; 0xe8
   12cbc:	mov	r0, sp
   12cc0:	bl	1ab58 <flatcc_builder_init@@Base>
   12cc4:	ldr	r0, [pc, #372]	; 12e40 <main@@Base+0x18c>
   12cc8:	bl	12a0c <puts@plt>
   12ccc:	mov	r0, sp
   12cd0:	bl	15bbc <test_table_with_emptystruct@@Base>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12cf4 <main@@Base+0x40>
   12cdc:	ldr	r0, [pc, #352]	; 12e44 <main@@Base+0x190>
   12ce0:	bl	12a0c <puts@plt>
   12ce4:	mvn	r4, #0
   12ce8:	mov	r0, r4
   12cec:	add	sp, sp, #232	; 0xe8
   12cf0:	pop	{r4, pc}
   12cf4:	mov	r0, sp
   12cf8:	bl	157e8 <test_empty_monster@@Base>
   12cfc:	cmp	r0, #0
   12d00:	bne	12cdc <main@@Base+0x28>
   12d04:	mov	r0, sp
   12d08:	bl	16c4c <test_monster@@Base>
   12d0c:	cmp	r0, #0
   12d10:	bne	12cdc <main@@Base+0x28>
   12d14:	mov	r0, sp
   12d18:	bl	16cdc <test_monster_with_size@@Base>
   12d1c:	cmp	r0, #0
   12d20:	bne	12cdc <main@@Base+0x28>
   12d24:	mov	r0, sp
   12d28:	bl	16db8 <test_string@@Base>
   12d2c:	cmp	r0, #0
   12d30:	bne	12cdc <main@@Base+0x28>
   12d34:	mov	r0, sp
   12d38:	bl	19ac4 <test_struct_buffer@@Base>
   12d3c:	cmp	r0, #0
   12d40:	bne	12cdc <main@@Base+0x28>
   12d44:	mov	r0, sp
   12d48:	bl	158e8 <test_typed_empty_monster@@Base>
   12d4c:	cmp	r0, #0
   12d50:	bne	12cdc <main@@Base+0x28>
   12d54:	mov	r0, sp
   12d58:	bl	15c5c <test_typed_table_with_emptystruct@@Base>
   12d5c:	cmp	r0, #0
   12d60:	bne	12cdc <main@@Base+0x28>
   12d64:	mov	r0, sp
   12d68:	bl	19cb8 <test_typed_struct_buffer@@Base>
   12d6c:	cmp	r0, #0
   12d70:	bne	12cdc <main@@Base+0x28>
   12d74:	mov	r0, sp
   12d78:	bl	18014 <test_clone_slice@@Base>
   12d7c:	cmp	r0, #0
   12d80:	bne	12cdc <main@@Base+0x28>
   12d84:	mov	r0, sp
   12d88:	bl	194e0 <test_add_set_defaults@@Base>
   12d8c:	cmp	r0, #0
   12d90:	bne	12cdc <main@@Base+0x28>
   12d94:	mov	r0, sp
   12d98:	bl	18680 <test_create_add_field@@Base>
   12d9c:	cmp	r0, #0
   12da0:	bne	12cdc <main@@Base+0x28>
   12da4:	mov	r0, sp
   12da8:	bl	18840 <test_union_vector@@Base>
   12dac:	cmp	r0, #0
   12db0:	bne	12cdc <main@@Base+0x28>
   12db4:	mov	r0, sp
   12db8:	bl	17df8 <test_basic_sort@@Base>
   12dbc:	cmp	r0, #0
   12dc0:	bne	12cdc <main@@Base+0x28>
   12dc4:	mov	r0, sp
   12dc8:	bl	16f70 <test_sort_find@@Base>
   12dcc:	cmp	r0, #0
   12dd0:	bne	12cdc <main@@Base+0x28>
   12dd4:	mov	r0, sp
   12dd8:	bl	172d8 <test_scan@@Base>
   12ddc:	cmp	r0, #0
   12de0:	bne	12cdc <main@@Base+0x28>
   12de4:	mov	r0, sp
   12de8:	bl	19674 <test_nested_buffer@@Base>
   12dec:	cmp	r0, #0
   12df0:	bne	12cdc <main@@Base+0x28>
   12df4:	mov	r0, sp
   12df8:	bl	197a4 <test_nested_buffer_first@@Base>
   12dfc:	cmp	r0, #0
   12e00:	bne	12cdc <main@@Base+0x28>
   12e04:	mov	r0, sp
   12e08:	bl	198d4 <test_nested_buffer_using_nest@@Base>
   12e0c:	cmp	r0, #0
   12e10:	bne	12cdc <main@@Base+0x28>
   12e14:	mov	r0, sp
   12e18:	bl	1531c <test_type_aliases@@Base>
   12e1c:	cmp	r0, #0
   12e20:	bne	12cdc <main@@Base+0x28>
   12e24:	mov	r0, sp
   12e28:	bl	18b54 <test_mixed_type_union@@Base>
   12e2c:	subs	r4, r0, #0
   12e30:	bne	12cdc <main@@Base+0x28>
   12e34:	mov	r0, sp
   12e38:	bl	1ace4 <flatcc_builder_clear@@Base>
   12e3c:	b	12ce8 <main@@Base+0x34>
   12e40:	ldrdeq	r1, [r2], -r7
   12e44:	strdeq	r1, [r2], -r2

00012e48 <_start@@Base>:
   12e48:	mov	fp, #0
   12e4c:	mov	lr, #0
   12e50:	pop	{r1}		; (ldr r1, [sp], #4)
   12e54:	mov	r2, sp
   12e58:	push	{r2}		; (str r2, [sp, #-4]!)
   12e5c:	push	{r0}		; (str r0, [sp, #-4]!)
   12e60:	ldr	ip, [pc, #16]	; 12e78 <_start@@Base+0x30>
   12e64:	push	{ip}		; (str ip, [sp, #-4]!)
   12e68:	ldr	r0, [pc, #12]	; 12e7c <_start@@Base+0x34>
   12e6c:	ldr	r3, [pc, #12]	; 12e80 <_start@@Base+0x38>
   12e70:	bl	12a24 <__libc_start_main@plt>
   12e74:	bl	12aa8 <abort@plt>
   12e78:	andeq	lr, r1, ip, lsl r6
   12e7c:			; <UNDEFINED> instruction: 0x00012cb4
   12e80:			; <UNDEFINED> instruction: 0x0001e5bc
   12e84:	ldr	r3, [pc, #20]	; 12ea0 <_start@@Base+0x58>
   12e88:	ldr	r2, [pc, #20]	; 12ea4 <_start@@Base+0x5c>
   12e8c:	add	r3, pc, r3
   12e90:	ldr	r2, [r3, r2]
   12e94:	cmp	r2, #0
   12e98:	bxeq	lr
   12e9c:	b	12a30 <__gmon_start__@plt>
   12ea0:	andeq	r0, r2, ip, ror #2
   12ea4:	andeq	r0, r0, r8, rrx
   12ea8:	ldr	r3, [pc, #28]	; 12ecc <_start@@Base+0x84>
   12eac:	ldr	r0, [pc, #28]	; 12ed0 <_start@@Base+0x88>
   12eb0:	sub	r3, r3, r0
   12eb4:	cmp	r3, #6
   12eb8:	bxls	lr
   12ebc:	ldr	r3, [pc, #16]	; 12ed4 <_start@@Base+0x8c>
   12ec0:	cmp	r3, #0
   12ec4:	bxeq	lr
   12ec8:	bx	r3
   12ecc:	andeq	r3, r3, r7, ror r0
   12ed0:	andeq	r3, r3, r4, ror r0
   12ed4:	andeq	r0, r0, r0
   12ed8:	ldr	r1, [pc, #36]	; 12f04 <_start@@Base+0xbc>
   12edc:	ldr	r0, [pc, #36]	; 12f08 <_start@@Base+0xc0>
   12ee0:	sub	r1, r1, r0
   12ee4:	asr	r1, r1, #2
   12ee8:	add	r1, r1, r1, lsr #31
   12eec:	asrs	r1, r1, #1
   12ef0:	bxeq	lr
   12ef4:	ldr	r3, [pc, #16]	; 12f0c <_start@@Base+0xc4>
   12ef8:	cmp	r3, #0
   12efc:	bxeq	lr
   12f00:	bx	r3
   12f04:	andeq	r3, r3, r4, ror r0
   12f08:	andeq	r3, r3, r4, ror r0
   12f0c:	andeq	r0, r0, r0
   12f10:	push	{r4, lr}
   12f14:	ldr	r4, [pc, #24]	; 12f34 <_start@@Base+0xec>
   12f18:	ldrb	r3, [r4]
   12f1c:	cmp	r3, #0
   12f20:	popne	{r4, pc}
   12f24:	bl	12ea8 <_start@@Base+0x60>
   12f28:	mov	r3, #1
   12f2c:	strb	r3, [r4]
   12f30:	pop	{r4, pc}
   12f34:	andeq	r3, r3, ip, ror r0
   12f38:	ldr	r0, [pc, #40]	; 12f68 <_start@@Base+0x120>
   12f3c:	ldr	r3, [r0]
   12f40:	cmp	r3, #0
   12f44:	bne	12f4c <_start@@Base+0x104>
   12f48:	b	12ed8 <_start@@Base+0x90>
   12f4c:	ldr	r3, [pc, #24]	; 12f6c <_start@@Base+0x124>
   12f50:	cmp	r3, #0
   12f54:	beq	12f48 <_start@@Base+0x100>
   12f58:	push	{r4, lr}
   12f5c:	blx	r3
   12f60:	pop	{r4, lr}
   12f64:	b	12ed8 <_start@@Base+0x90>
   12f68:	andeq	r2, r3, r4, lsl pc
   12f6c:	andeq	r0, r0, r0
   12f70:	mov	r3, #0
   12f74:	cmp	r1, r3
   12f78:	push	{r0, r1, r4, lr}
   12f7c:	moveq	r0, #1
   12f80:	str	r3, [sp, #4]
   12f84:	beq	12fb0 <_start@@Base+0x168>
   12f88:	mov	r4, r0
   12f8c:	mov	r2, #4
   12f90:	add	r0, sp, r2
   12f94:	bl	12a6c <strncpy@plt>
   12f98:	ldr	r0, [sp, #4]
   12f9c:	ldr	r3, [r4, #4]
   12fa0:	cmp	r0, #0
   12fa4:	cmpne	r3, r0
   12fa8:	moveq	r0, #1
   12fac:	movne	r0, #0
   12fb0:	add	sp, sp, #8
   12fb4:	pop	{r4, pc}
   12fb8:	push	{r4, lr}
   12fbc:	subs	r4, r0, #0
   12fc0:	bne	12fcc <_start@@Base+0x184>
   12fc4:	mov	r0, #0
   12fc8:	pop	{r4, pc}
   12fcc:	bl	12f70 <_start@@Base+0x128>
   12fd0:	cmp	r0, #0
   12fd4:	beq	12fc4 <_start@@Base+0x17c>
   12fd8:	ldr	r0, [r4]
   12fdc:	add	r0, r4, r0
   12fe0:	pop	{r4, pc}
   12fe4:	push	{r4, lr}
   12fe8:	subs	r4, r0, #0
   12fec:	bne	12ff8 <_start@@Base+0x1b0>
   12ff0:	mov	r0, #0
   12ff4:	pop	{r4, pc}
   12ff8:	ldr	r1, [pc, #20]	; 13014 <_start@@Base+0x1cc>
   12ffc:	bl	12f70 <_start@@Base+0x128>
   13000:	cmp	r0, #0
   13004:	beq	12ff0 <_start@@Base+0x1a8>
   13008:	ldr	r0, [r4]
   1300c:	add	r0, r4, r0
   13010:	pop	{r4, pc}
   13014:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   13018:	push	{r4, lr}
   1301c:	subs	r4, r0, #0
   13020:	bne	1302c <_start@@Base+0x1e4>
   13024:	mov	r0, #0
   13028:	pop	{r4, pc}
   1302c:	ldr	r1, [pc, #20]	; 13048 <_start@@Base+0x200>
   13030:	bl	12f70 <_start@@Base+0x128>
   13034:	cmp	r0, #0
   13038:	beq	13024 <_start@@Base+0x1dc>
   1303c:	ldr	r0, [r4]
   13040:	add	r0, r4, r0
   13044:	pop	{r4, pc}
   13048:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   1304c:	cmp	r0, #0
   13050:	push	{r4, r5, r6, lr}
   13054:	bne	1306c <_start@@Base+0x224>
   13058:	ldr	r3, [pc, #104]	; 130c8 <_start@@Base+0x280>
   1305c:	mov	r2, #720	; 0x2d0
   13060:	ldr	r1, [pc, #100]	; 130cc <_start@@Base+0x284>
   13064:	ldr	r0, [pc, #100]	; 130d0 <_start@@Base+0x288>
   13068:	bl	12ab4 <__assert_fail@plt>
   1306c:	ldr	r3, [r0]
   13070:	sub	r3, r0, r3
   13074:	ldrh	r2, [r3]
   13078:	cmp	r2, #31
   1307c:	bhi	13088 <_start@@Base+0x240>
   13080:	mov	r0, #0
   13084:	pop	{r4, r5, r6, pc}
   13088:	ldrh	r3, [r3, #30]
   1308c:	cmp	r3, #0
   13090:	beq	13080 <_start@@Base+0x238>
   13094:	ldr	r5, [r0, r3]
   13098:	add	r6, r0, r3
   1309c:	add	r5, r5, #4
   130a0:	adds	r4, r6, r5
   130a4:	beq	13080 <_start@@Base+0x238>
   130a8:	ldr	r1, [pc, #36]	; 130d4 <_start@@Base+0x28c>
   130ac:	mov	r0, r4
   130b0:	bl	12f70 <_start@@Base+0x128>
   130b4:	cmp	r0, #0
   130b8:	beq	13080 <_start@@Base+0x238>
   130bc:	ldr	r0, [r6, r5]
   130c0:	add	r0, r4, r0
   130c4:	pop	{r4, r5, r6, pc}
   130c8:	andeq	lr, r1, ip, lsr #12
   130cc:	andeq	lr, r1, r3, lsl #26
   130d0:	andeq	lr, r1, r5, ror #26
   130d4:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   130d8:	mov	r3, #0
   130dc:	mov	r2, r3
   130e0:	b	1b25c <flatcc_builder_start_buffer@@Base>
   130e4:	mov	r1, #36	; 0x24
   130e8:	b	1ba60 <flatcc_builder_start_table@@Base>
   130ec:	push	{r4, lr}
   130f0:	mov	r4, r0
   130f4:	ldr	r1, [pc, #28]	; 13118 <_start@@Base+0x2d0>
   130f8:	bl	130d8 <_start@@Base+0x290>
   130fc:	cmp	r0, #0
   13100:	bne	13110 <_start@@Base+0x2c8>
   13104:	mov	r0, r4
   13108:	pop	{r4, lr}
   1310c:	b	130e4 <_start@@Base+0x29c>
   13110:	mvn	r0, #0
   13114:	pop	{r4, pc}
   13118:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   1311c:	b	130e4 <_start@@Base+0x29c>
   13120:	push	{r4, lr}
   13124:	subs	r4, r1, #0
   13128:	bne	13134 <_start@@Base+0x2ec>
   1312c:	mvn	r0, #0
   13130:	pop	{r4, pc}
   13134:	mov	r1, #10
   13138:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   1313c:	cmp	r0, #0
   13140:	beq	1312c <_start@@Base+0x2e4>
   13144:	str	r4, [r0]
   13148:	mov	r0, #0
   1314c:	pop	{r4, pc}
   13150:	push	{r4, lr}
   13154:	subs	r4, r1, #0
   13158:	bne	13164 <_start@@Base+0x31c>
   1315c:	mvn	r0, #0
   13160:	pop	{r4, pc}
   13164:	mov	r1, #3
   13168:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   1316c:	cmp	r0, #0
   13170:	beq	1315c <_start@@Base+0x314>
   13174:	str	r4, [r0]
   13178:	mov	r0, #0
   1317c:	pop	{r4, pc}
   13180:	push	{r4, lr}
   13184:	subs	r4, r1, #0
   13188:	bne	13194 <_start@@Base+0x34c>
   1318c:	mvn	r0, #0
   13190:	pop	{r4, pc}
   13194:	mov	r1, #9
   13198:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   1319c:	cmp	r0, #0
   131a0:	beq	1318c <_start@@Base+0x344>
   131a4:	str	r4, [r0]
   131a8:	mov	r0, #0
   131ac:	pop	{r4, pc}
   131b0:	push	{r4, lr}
   131b4:	subs	r4, r1, #0
   131b8:	bne	131c4 <_start@@Base+0x37c>
   131bc:	mvn	r0, #0
   131c0:	pop	{r4, pc}
   131c4:	mov	r1, #24
   131c8:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   131cc:	cmp	r0, #0
   131d0:	beq	131bc <_start@@Base+0x374>
   131d4:	str	r4, [r0]
   131d8:	mov	r0, #0
   131dc:	pop	{r4, pc}
   131e0:	ldr	r3, [pc, #4]	; 131ec <_start@@Base+0x3a4>
   131e4:	ldr	r2, [pc, #4]	; 131f0 <_start@@Base+0x3a8>
   131e8:	b	1de88 <flatcc_verify_table_as_root@@Base>
   131ec:	strdeq	r4, [r1], -r0
   131f0:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   131f4:	mov	r3, #4
   131f8:	mov	r2, r3
   131fc:	mov	r1, #0
   13200:	b	1d934 <flatcc_verify_field@@Base>
   13204:	mov	r2, #0
   13208:	mov	r3, #1
   1320c:	mov	r1, r2
   13210:	b	1d934 <flatcc_verify_field@@Base>
   13214:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13218:	mov	r8, r2
   1321c:	subs	r2, r0, #0
   13220:	sub	sp, sp, #24
   13224:	mov	r6, r1
   13228:	mov	r5, r3
   1322c:	beq	1323c <_start@@Base+0x3f4>
   13230:	ldr	r1, [pc, #216]	; 13310 <_start@@Base+0x4c8>
   13234:	mov	r0, r3
   13238:	bl	12a48 <fprintf@plt>
   1323c:	ldr	r9, [pc, #208]	; 13314 <_start@@Base+0x4cc>
   13240:	ldr	sl, [pc, #208]	; 13318 <_start@@Base+0x4d0>
   13244:	sub	r6, r6, #1
   13248:	mov	r4, #0
   1324c:	cmp	r4, r8
   13250:	bne	13278 <_start@@Base+0x430>
   13254:	ldr	r6, [pc, #192]	; 1331c <_start@@Base+0x4d4>
   13258:	tst	r4, #15
   1325c:	bne	132fc <_start@@Base+0x4b4>
   13260:	add	r2, sp, #4
   13264:	ldr	r1, [pc, #172]	; 13318 <_start@@Base+0x4d0>
   13268:	mov	r0, r5
   1326c:	bl	12a48 <fprintf@plt>
   13270:	add	sp, sp, #24
   13274:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13278:	ands	r7, r4, #15
   1327c:	bne	132e4 <_start@@Base+0x49c>
   13280:	cmp	r4, #0
   13284:	beq	13298 <_start@@Base+0x450>
   13288:	add	r2, sp, #4
   1328c:	mov	r1, sl
   13290:	mov	r0, r5
   13294:	bl	12a48 <fprintf@plt>
   13298:	mov	r2, r4
   1329c:	mov	r1, r9
   132a0:	mov	r0, r5
   132a4:	bl	12a48 <fprintf@plt>
   132a8:	ldrb	r2, [r6, #1]
   132ac:	ldr	r1, [pc, #108]	; 13320 <_start@@Base+0x4d8>
   132b0:	mov	r0, r5
   132b4:	bl	12a48 <fprintf@plt>
   132b8:	ldrb	r2, [r6, #1]!
   132bc:	add	r4, r4, #1
   132c0:	sub	r3, r2, #32
   132c4:	cmp	r3, #94	; 0x5e
   132c8:	add	r3, sp, #24
   132cc:	add	r3, r3, r7
   132d0:	movhi	r2, #46	; 0x2e
   132d4:	strb	r2, [r3, #-20]	; 0xffffffec
   132d8:	mov	r2, #0
   132dc:	strb	r2, [r3, #-19]	; 0xffffffed
   132e0:	b	1324c <_start@@Base+0x404>
   132e4:	tst	r4, #7
   132e8:	bne	132a8 <_start@@Base+0x460>
   132ec:	mov	r1, r5
   132f0:	mov	r0, #32
   132f4:	bl	12a84 <fputc@plt>
   132f8:	b	132a8 <_start@@Base+0x460>
   132fc:	mov	r1, r5
   13300:	mov	r0, r6
   13304:	bl	12a90 <fputs@plt>
   13308:	add	r4, r4, #1
   1330c:	b	13258 <_start@@Base+0x410>
   13310:	andeq	lr, r1, fp, lsl #27
   13314:	muleq	r1, r6, sp
   13318:	muleq	r1, r0, sp
   1331c:	andeq	lr, r1, r4, lsr #27
   13320:	muleq	r1, lr, sp
   13324:	push	{r4, lr}
   13328:	mov	r4, r0
   1332c:	bl	1c928 <flatcc_builder_create_string_str@@Base>
   13330:	mov	r1, r0
   13334:	mov	r0, r4
   13338:	pop	{r4, lr}
   1333c:	b	13150 <_start@@Base+0x308>
   13340:	mvn	r3, #-1073741824	; 0xc0000000
   13344:	mov	r2, #2
   13348:	mov	r1, #4
   1334c:	b	1b944 <flatcc_builder_start_vector@@Base>
   13350:	push	{r4, lr}
   13354:	mov	r4, r1
   13358:	mov	r1, #1
   1335c:	bl	1b46c <flatcc_builder_extend_vector@@Base>
   13360:	cmp	r0, #0
   13364:	ldrne	r3, [r4]
   13368:	strne	r3, [r0]
   1336c:	pop	{r4, pc}
   13370:	push	{r4, lr}
   13374:	mov	r4, r0
   13378:	bl	1c2bc <flatcc_builder_end_vector@@Base>
   1337c:	mov	r1, r0
   13380:	mov	r0, r4
   13384:	pop	{r4, lr}
   13388:	b	13180 <_start@@Base+0x338>
   1338c:	cmp	r1, #0
   13390:	push	{r4, lr}
   13394:	moveq	ip, r1
   13398:	mov	r4, r0
   1339c:	moveq	r0, r1
   133a0:	beq	133b4 <_start@@Base+0x56c>
   133a4:	ldr	r0, [r1, #-4]
   133a8:	cmp	r2, r0
   133ac:	movcc	ip, r2
   133b0:	movcs	ip, r0
   133b4:	sub	r0, r0, ip
   133b8:	cmp	r0, r3
   133bc:	movcc	r2, r0
   133c0:	movcs	r2, r3
   133c4:	add	r1, r1, ip
   133c8:	mov	r0, r4
   133cc:	bl	1c890 <flatcc_builder_create_string@@Base>
   133d0:	subs	r1, r0, #0
   133d4:	popeq	{r4, pc}
   133d8:	mov	r0, r4
   133dc:	pop	{r4, lr}
   133e0:	b	1b5d0 <flatcc_builder_offset_vector_push@@Base>
   133e4:	cmp	r0, #0
   133e8:	push	{r4, r5, r6, lr}
   133ec:	moveq	r4, r0
   133f0:	ldrne	r4, [r0, #-4]
   133f4:	mov	r5, r2
   133f8:	cmp	r2, r4
   133fc:	movcs	r2, r4
   13400:	bl	12a9c <strncmp@plt>
   13404:	cmp	r0, #0
   13408:	popne	{r4, r5, r6, pc}
   1340c:	cmp	r5, r4
   13410:	bhi	13420 <_start@@Base+0x5d8>
   13414:	movcc	r0, #1
   13418:	movcs	r0, #0
   1341c:	pop	{r4, r5, r6, pc}
   13420:	mvn	r0, #0
   13424:	pop	{r4, r5, r6, pc}
   13428:	push	{r0, r1, r4, lr}
   1342c:	mov	r1, #0
   13430:	mov	r0, sp
   13434:	bl	12a00 <gettimeofday@plt>
   13438:	ldr	r3, [pc, #88]	; 13498 <_start@@Base+0x650>
   1343c:	vldr	d5, [pc, #76]	; 13490 <_start@@Base+0x648>
   13440:	ldr	r2, [r3]
   13444:	cmp	r2, #0
   13448:	moveq	r4, sp
   1344c:	ldr	r2, [sp, #4]
   13450:	ldmeq	r4, {r0, r1}
   13454:	stmeq	r3, {r0, r1}
   13458:	ldr	r1, [r3, #4]
   1345c:	sub	r2, r2, r1
   13460:	vmov	s15, r2
   13464:	ldr	r2, [r3]
   13468:	ldr	r3, [sp]
   1346c:	vcvt.f64.s32	d7, s15
   13470:	sub	r3, r3, r2
   13474:	vmov	s0, r3
   13478:	vcvt.f64.s32	d0, s0
   1347c:	vdiv.f64	d6, d7, d5
   13480:	vadd.f64	d0, d6, d0
   13484:	add	sp, sp, #8
   13488:	pop	{r4, pc}
   1348c:	nop			; (mov r0, r0)
   13490:	andeq	r0, r0, r0
   13494:	smlawbmi	lr, r0, r4, r8
   13498:	andeq	r3, r3, r0, lsl #1
   1349c:	cmp	r0, #0
   134a0:	bne	134bc <_start@@Base+0x674>
   134a4:	push	{r4, lr}
   134a8:	ldr	r3, [pc, #56]	; 134e8 <_start@@Base+0x6a0>
   134ac:	ldr	r2, [pc, #56]	; 134ec <_start@@Base+0x6a4>
   134b0:	ldr	r1, [pc, #56]	; 134f0 <_start@@Base+0x6a8>
   134b4:	ldr	r0, [pc, #56]	; 134f4 <_start@@Base+0x6ac>
   134b8:	bl	12ab4 <__assert_fail@plt>
   134bc:	ldr	r3, [r0]
   134c0:	sub	r3, r0, r3
   134c4:	ldrh	r2, [r3]
   134c8:	cmp	r2, #9
   134cc:	bls	134e0 <_start@@Base+0x698>
   134d0:	ldrh	r3, [r3, #8]
   134d4:	cmp	r3, #0
   134d8:	ldrshne	r0, [r0, r3]
   134dc:	bne	134e4 <_start@@Base+0x69c>
   134e0:	mov	r0, #100	; 0x64
   134e4:	bx	lr
   134e8:	andeq	lr, r1, r8, asr r6
   134ec:			; <UNDEFINED> instruction: 0x000002b9
   134f0:	andeq	lr, r1, r3, lsl #26
   134f4:	andeq	lr, r1, r5, ror #26
   134f8:	cmp	r0, #0
   134fc:	bne	13518 <_start@@Base+0x6d0>
   13500:	push	{r4, lr}
   13504:	ldr	r3, [pc, #48]	; 1353c <_start@@Base+0x6f4>
   13508:	ldr	r2, [pc, #48]	; 13540 <_start@@Base+0x6f8>
   1350c:	ldr	r1, [pc, #48]	; 13544 <_start@@Base+0x6fc>
   13510:	ldr	r0, [pc, #48]	; 13548 <_start@@Base+0x700>
   13514:	bl	12ab4 <__assert_fail@plt>
   13518:	ldr	r3, [r0]
   1351c:	sub	r0, r0, r3
   13520:	ldrh	r3, [r0]
   13524:	cmp	r3, #9
   13528:	movls	r0, #0
   1352c:	ldrhhi	r0, [r0, #8]
   13530:	adds	r0, r0, #0
   13534:	movne	r0, #1
   13538:	bx	lr
   1353c:	andeq	lr, r1, r2, ror r6
   13540:			; <UNDEFINED> instruction: 0x000002b9
   13544:	andeq	lr, r1, r3, lsl #26
   13548:	andeq	lr, r1, r5, ror #26
   1354c:	cmp	r0, #0
   13550:	bne	1356c <_start@@Base+0x724>
   13554:	push	{r4, lr}
   13558:	mov	r2, #696	; 0x2b8
   1355c:	ldr	r3, [pc, #44]	; 13590 <_start@@Base+0x748>
   13560:	ldr	r1, [pc, #44]	; 13594 <_start@@Base+0x74c>
   13564:	ldr	r0, [pc, #44]	; 13598 <_start@@Base+0x750>
   13568:	bl	12ab4 <__assert_fail@plt>
   1356c:	ldr	r3, [r0]
   13570:	sub	r0, r0, r3
   13574:	ldrh	r3, [r0]
   13578:	cmp	r3, #5
   1357c:	movls	r0, #0
   13580:	ldrhhi	r0, [r0, #4]
   13584:	adds	r0, r0, #0
   13588:	movne	r0, #1
   1358c:	bx	lr
   13590:	muleq	r1, r7, r6
   13594:	andeq	lr, r1, r3, lsl #26
   13598:	andeq	lr, r1, r5, ror #26
   1359c:	subs	r2, r0, #0
   135a0:	bne	135bc <_start@@Base+0x774>
   135a4:	push	{r4, lr}
   135a8:	mov	r2, #696	; 0x2b8
   135ac:	ldr	r3, [pc, #48]	; 135e4 <_start@@Base+0x79c>
   135b0:	ldr	r1, [pc, #48]	; 135e8 <_start@@Base+0x7a0>
   135b4:	ldr	r0, [pc, #48]	; 135ec <_start@@Base+0x7a4>
   135b8:	bl	12ab4 <__assert_fail@plt>
   135bc:	ldr	r3, [r2]
   135c0:	sub	r3, r2, r3
   135c4:	ldrh	r1, [r3]
   135c8:	cmp	r1, #5
   135cc:	movls	r0, #0
   135d0:	bls	135e0 <_start@@Base+0x798>
   135d4:	ldrh	r0, [r3, #4]
   135d8:	cmp	r0, #0
   135dc:	addne	r0, r2, r0
   135e0:	bx	lr
   135e4:			; <UNDEFINED> instruction: 0x0001e6bd
   135e8:	andeq	lr, r1, r3, lsl #26
   135ec:	andeq	lr, r1, r5, ror #26
   135f0:	subs	r3, r0, #0
   135f4:	bne	13610 <_start@@Base+0x7c8>
   135f8:	push	{r4, lr}
   135fc:	ldr	r3, [pc, #64]	; 13644 <_start@@Base+0x7fc>
   13600:	ldr	r2, [pc, #64]	; 13648 <_start@@Base+0x800>
   13604:	ldr	r1, [pc, #64]	; 1364c <_start@@Base+0x804>
   13608:	ldr	r0, [pc, #64]	; 13650 <_start@@Base+0x808>
   1360c:	bl	12ab4 <__assert_fail@plt>
   13610:	ldr	r2, [r3]
   13614:	sub	r2, r3, r2
   13618:	ldrh	r1, [r2]
   1361c:	cmp	r1, #15
   13620:	movls	r0, #0
   13624:	bls	13640 <_start@@Base+0x7f8>
   13628:	ldrh	r0, [r2, #14]
   1362c:	cmp	r0, #0
   13630:	addne	r2, r3, r0
   13634:	ldrne	r0, [r3, r0]
   13638:	addne	r0, r0, #4
   1363c:	addne	r0, r2, r0
   13640:	bx	lr
   13644:	ldrdeq	lr, [r1], -r8
   13648:	andeq	r0, r0, r2, asr #5
   1364c:	andeq	lr, r1, r3, lsl #26
   13650:	andeq	lr, r1, r5, ror #26
   13654:	cmp	r0, #0
   13658:	beq	13668 <_start@@Base+0x820>
   1365c:	ldr	r3, [r0, #-4]
   13660:	cmp	r1, r3
   13664:	bcc	13680 <_start@@Base+0x838>
   13668:	push	{r4, lr}
   1366c:	ldr	r3, [pc, #20]	; 13688 <_start@@Base+0x840>
   13670:	ldr	r2, [pc, #20]	; 1368c <_start@@Base+0x844>
   13674:	ldr	r1, [pc, #20]	; 13690 <_start@@Base+0x848>
   13678:	ldr	r0, [pc, #20]	; 13694 <_start@@Base+0x84c>
   1367c:	bl	12ab4 <__assert_fail@plt>
   13680:	ldrb	r0, [r0, r1]
   13684:	bx	lr
   13688:	strdeq	lr, [r1], -r9
   1368c:	andeq	r0, r0, fp, lsl #3
   13690:	andeq	lr, r1, r8, lsr #27
   13694:	andeq	lr, r1, r0, lsl lr
   13698:	push	{r4, r5, r6, lr}
   1369c:	mov	r5, r0
   136a0:	mov	r6, r1
   136a4:	mov	r4, #0
   136a8:	cmp	r5, #0
   136ac:	beq	136bc <_start@@Base+0x874>
   136b0:	ldr	r3, [r5, #-4]
   136b4:	cmp	r4, r3
   136b8:	bcc	136c8 <_start@@Base+0x880>
   136bc:	mvn	r4, #0
   136c0:	mov	r0, r4
   136c4:	pop	{r4, r5, r6, pc}
   136c8:	mov	r1, r4
   136cc:	mov	r0, r5
   136d0:	bl	13654 <_start@@Base+0x80c>
   136d4:	cmp	r0, r6
   136d8:	beq	136c0 <_start@@Base+0x878>
   136dc:	add	r4, r4, #1
   136e0:	b	136a8 <_start@@Base+0x860>
   136e4:	push	{r4, r5, r6, r7, r8, lr}
   136e8:	mov	r5, r0
   136ec:	mov	r6, r2
   136f0:	mov	r7, r3
   136f4:	mov	r4, r1
   136f8:	cmp	r5, #0
   136fc:	beq	13714 <_start@@Base+0x8cc>
   13700:	ldr	r1, [r5, #-4]
   13704:	cmp	r6, r1
   13708:	movcc	r1, r6
   1370c:	cmp	r4, r1
   13710:	bcc	13720 <_start@@Base+0x8d8>
   13714:	mvn	r4, #0
   13718:	mov	r0, r4
   1371c:	pop	{r4, r5, r6, r7, r8, pc}
   13720:	mov	r1, r4
   13724:	mov	r0, r5
   13728:	bl	13654 <_start@@Base+0x80c>
   1372c:	cmp	r0, r7
   13730:	beq	13718 <_start@@Base+0x8d0>
   13734:	add	r4, r4, #1
   13738:	b	136f8 <_start@@Base+0x8b0>
   1373c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13740:	mov	r5, r0
   13744:	mov	r6, r1
   13748:	mov	r8, r2
   1374c:	lsl	r4, r6, #1
   13750:	cmp	r4, r8
   13754:	bls	1375c <_start@@Base+0x914>
   13758:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1375c:	bcs	13788 <_start@@Base+0x940>
   13760:	mov	r1, r4
   13764:	mov	r0, r5
   13768:	bl	13654 <_start@@Base+0x80c>
   1376c:	add	r7, r4, #1
   13770:	mov	r1, r7
   13774:	mov	r9, r0
   13778:	mov	r0, r5
   1377c:	bl	13654 <_start@@Base+0x80c>
   13780:	cmp	r9, r0
   13784:	movcc	r4, r7
   13788:	mov	r1, r6
   1378c:	mov	r0, r5
   13790:	bl	13654 <_start@@Base+0x80c>
   13794:	mov	r1, r4
   13798:	mov	r7, r0
   1379c:	mov	r0, r5
   137a0:	bl	13654 <_start@@Base+0x80c>
   137a4:	cmp	r7, r0
   137a8:	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   137ac:	ldrb	r2, [r5, r6]
   137b0:	ldrb	r3, [r5, r4]
   137b4:	strb	r2, [r5, r4]
   137b8:	strb	r3, [r5, r6]
   137bc:	mov	r6, r4
   137c0:	b	1374c <_start@@Base+0x904>
   137c4:	cmp	r0, #0
   137c8:	bne	137e4 <_start@@Base+0x99c>
   137cc:	push	{r4, lr}
   137d0:	ldr	r3, [pc, #56]	; 13810 <_start@@Base+0x9c8>
   137d4:	ldr	r2, [pc, #56]	; 13814 <_start@@Base+0x9cc>
   137d8:	ldr	r1, [pc, #56]	; 13818 <_start@@Base+0x9d0>
   137dc:	ldr	r0, [pc, #56]	; 1381c <_start@@Base+0x9d4>
   137e0:	bl	12ab4 <__assert_fail@plt>
   137e4:	ldr	r3, [r0]
   137e8:	sub	r3, r0, r3
   137ec:	ldrh	r2, [r3]
   137f0:	cmp	r2, #7
   137f4:	bls	13808 <_start@@Base+0x9c0>
   137f8:	ldrh	r3, [r3, #6]
   137fc:	cmp	r3, #0
   13800:	ldrshne	r0, [r0, r3]
   13804:	bne	1380c <_start@@Base+0x9c4>
   13808:	mov	r0, #150	; 0x96
   1380c:	bx	lr
   13810:	andeq	lr, r1, r2, lsl r7
   13814:			; <UNDEFINED> instruction: 0x000002ba
   13818:	andeq	lr, r1, r3, lsl #26
   1381c:	andeq	lr, r1, r5, ror #26
   13820:	cmp	r0, #0
   13824:	bne	13840 <_start@@Base+0x9f8>
   13828:	push	{r4, lr}
   1382c:	ldr	r3, [pc, #48]	; 13864 <_start@@Base+0xa1c>
   13830:	ldr	r2, [pc, #48]	; 13868 <_start@@Base+0xa20>
   13834:	ldr	r1, [pc, #48]	; 1386c <_start@@Base+0xa24>
   13838:	ldr	r0, [pc, #48]	; 13870 <_start@@Base+0xa28>
   1383c:	bl	12ab4 <__assert_fail@plt>
   13840:	ldr	r3, [r0]
   13844:	sub	r0, r0, r3
   13848:	ldrh	r3, [r0]
   1384c:	cmp	r3, #7
   13850:	movls	r0, #0
   13854:	ldrhhi	r0, [r0, #6]
   13858:	adds	r0, r0, #0
   1385c:	movne	r0, #1
   13860:	bx	lr
   13864:	andeq	lr, r1, lr, lsr #14
   13868:			; <UNDEFINED> instruction: 0x000002ba
   1386c:	andeq	lr, r1, r3, lsl #26
   13870:	andeq	lr, r1, r5, ror #26
   13874:	subs	r3, r0, #0
   13878:	bne	13894 <_start@@Base+0xa4c>
   1387c:	push	{r4, lr}
   13880:	ldr	r3, [pc, #64]	; 138c8 <_start@@Base+0xa80>
   13884:	ldr	r2, [pc, #64]	; 138cc <_start@@Base+0xa84>
   13888:	ldr	r1, [pc, #64]	; 138d0 <_start@@Base+0xa88>
   1388c:	ldr	r0, [pc, #64]	; 138d4 <_start@@Base+0xa8c>
   13890:	bl	12ab4 <__assert_fail@plt>
   13894:	ldr	r2, [r3]
   13898:	sub	r2, r3, r2
   1389c:	ldrh	r1, [r2]
   138a0:	cmp	r1, #23
   138a4:	movls	r0, #0
   138a8:	bls	138c4 <_start@@Base+0xa7c>
   138ac:	ldrh	r0, [r2, #22]
   138b0:	cmp	r0, #0
   138b4:	addne	r2, r3, r0
   138b8:	ldrne	r0, [r3, r0]
   138bc:	addne	r0, r0, #4
   138c0:	addne	r0, r2, r0
   138c4:	bx	lr
   138c8:	andeq	lr, r1, r5, asr r7
   138cc:	andeq	r0, r0, lr, asr #5
   138d0:	andeq	lr, r1, r3, lsl #26
   138d4:	andeq	lr, r1, r5, ror #26
   138d8:	cmp	r0, #0
   138dc:	beq	138ec <_start@@Base+0xaa4>
   138e0:	ldr	r3, [r0, #-4]
   138e4:	cmp	r3, r1
   138e8:	bhi	13904 <_start@@Base+0xabc>
   138ec:	push	{r4, lr}
   138f0:	mov	r2, #380	; 0x17c
   138f4:	ldr	r3, [pc, #16]	; 1390c <_start@@Base+0xac4>
   138f8:	ldr	r1, [pc, #16]	; 13910 <_start@@Base+0xac8>
   138fc:	ldr	r0, [pc, #16]	; 13914 <_start@@Base+0xacc>
   13900:	bl	12ab4 <__assert_fail@plt>
   13904:	add	r0, r0, r1, lsl #2
   13908:	bx	lr
   1390c:	andeq	lr, r1, r2, ror r7
   13910:	andeq	lr, r1, r3, lsl #26
   13914:	andeq	lr, r1, r0, lsl lr
   13918:	subs	r3, r0, #0
   1391c:	bne	13938 <_start@@Base+0xaf0>
   13920:	push	{r4, lr}
   13924:	mov	r2, #712	; 0x2c8
   13928:	ldr	r3, [pc, #60]	; 1396c <_start@@Base+0xb24>
   1392c:	ldr	r1, [pc, #60]	; 13970 <_start@@Base+0xb28>
   13930:	ldr	r0, [pc, #60]	; 13974 <_start@@Base+0xb2c>
   13934:	bl	12ab4 <__assert_fail@plt>
   13938:	ldr	r2, [r3]
   1393c:	sub	r2, r3, r2
   13940:	ldrh	r1, [r2]
   13944:	cmp	r1, #25
   13948:	movls	r0, #0
   1394c:	bls	13968 <_start@@Base+0xb20>
   13950:	ldrh	r0, [r2, #24]
   13954:	cmp	r0, #0
   13958:	addne	r2, r3, r0
   1395c:	ldrne	r0, [r3, r0]
   13960:	addne	r0, r0, #4
   13964:	addne	r0, r2, r0
   13968:	bx	lr
   1396c:	andeq	lr, r1, sp, lsl #15
   13970:	andeq	lr, r1, r3, lsl #26
   13974:	andeq	lr, r1, r5, ror #26
   13978:	cmp	r0, #0
   1397c:	add	r2, r0, r1, lsl #2
   13980:	beq	13990 <_start@@Base+0xb48>
   13984:	ldr	r3, [r0, #-4]
   13988:	cmp	r1, r3
   1398c:	bcc	139a8 <_start@@Base+0xb60>
   13990:	push	{r4, lr}
   13994:	mov	r2, #108	; 0x6c
   13998:	ldr	r3, [pc, #24]	; 139b8 <_start@@Base+0xb70>
   1399c:	ldr	r1, [pc, #24]	; 139bc <_start@@Base+0xb74>
   139a0:	ldr	r0, [pc, #24]	; 139c0 <_start@@Base+0xb78>
   139a4:	bl	12ab4 <__assert_fail@plt>
   139a8:	ldr	r3, [r0, r1, lsl #2]
   139ac:	add	r3, r3, #4
   139b0:	add	r0, r2, r3
   139b4:	bx	lr
   139b8:			; <UNDEFINED> instruction: 0x0001e7b6
   139bc:	andeq	lr, r1, r8, lsr #27
   139c0:	andeq	lr, r1, r0, lsl lr
   139c4:	subs	r3, r0, #0
   139c8:	bne	139e4 <_start@@Base+0xb9c>
   139cc:	push	{r4, lr}
   139d0:	ldr	r3, [pc, #64]	; 13a18 <_start@@Base+0xbd0>
   139d4:	ldr	r2, [pc, #64]	; 13a1c <_start@@Base+0xbd4>
   139d8:	ldr	r1, [pc, #64]	; 13a20 <_start@@Base+0xbd8>
   139dc:	ldr	r0, [pc, #64]	; 13a24 <_start@@Base+0xbdc>
   139e0:	bl	12ab4 <__assert_fail@plt>
   139e4:	ldr	r2, [r3]
   139e8:	sub	r2, r3, r2
   139ec:	ldrh	r1, [r2]
   139f0:	cmp	r1, #53	; 0x35
   139f4:	movls	r0, #0
   139f8:	bls	13a14 <_start@@Base+0xbcc>
   139fc:	ldrh	r0, [r2, #52]	; 0x34
   13a00:	cmp	r0, #0
   13a04:	addne	r2, r3, r0
   13a08:	ldrne	r0, [r3, r0]
   13a0c:	addne	r0, r0, #4
   13a10:	addne	r0, r2, r0
   13a14:	bx	lr
   13a18:	ldrdeq	lr, [r1], -r0
   13a1c:	andeq	r0, r0, sl, asr #5
   13a20:	andeq	lr, r1, r3, lsl #26
   13a24:	andeq	lr, r1, r5, ror #26
   13a28:	subs	r3, r0, #0
   13a2c:	bne	13a48 <_start@@Base+0xc00>
   13a30:	push	{r4, lr}
   13a34:	ldr	r3, [pc, #64]	; 13a7c <_start@@Base+0xc34>
   13a38:	ldr	r2, [pc, #64]	; 13a80 <_start@@Base+0xc38>
   13a3c:	ldr	r1, [pc, #64]	; 13a84 <_start@@Base+0xc3c>
   13a40:	ldr	r0, [pc, #64]	; 13a88 <_start@@Base+0xc40>
   13a44:	bl	12ab4 <__assert_fail@plt>
   13a48:	ldr	r2, [r3]
   13a4c:	sub	r2, r3, r2
   13a50:	ldrh	r1, [r2]
   13a54:	cmp	r1, #27
   13a58:	movls	r0, #0
   13a5c:	bls	13a78 <_start@@Base+0xc30>
   13a60:	ldrh	r0, [r2, #26]
   13a64:	cmp	r0, #0
   13a68:	addne	r2, r3, r0
   13a6c:	ldrne	r0, [r3, r0]
   13a70:	addne	r0, r0, #4
   13a74:	addne	r0, r2, r0
   13a78:	bx	lr
   13a7c:	strdeq	lr, [r1], -r8
   13a80:	andeq	r0, r0, r7, asr #5
   13a84:	andeq	lr, r1, r3, lsl #26
   13a88:	andeq	lr, r1, r5, ror #26
   13a8c:	cmp	r0, #0
   13a90:	add	r2, r0, r1, lsl #2
   13a94:	beq	13aa4 <_start@@Base+0xc5c>
   13a98:	ldr	r3, [r0, #-4]
   13a9c:	cmp	r1, r3
   13aa0:	bcc	13abc <_start@@Base+0xc74>
   13aa4:	push	{r4, lr}
   13aa8:	ldr	r3, [pc, #24]	; 13ac8 <_start@@Base+0xc80>
   13aac:	ldr	r2, [pc, #24]	; 13acc <_start@@Base+0xc84>
   13ab0:	ldr	r1, [pc, #24]	; 13ad0 <_start@@Base+0xc88>
   13ab4:	ldr	r0, [pc, #24]	; 13ad4 <_start@@Base+0xc8c>
   13ab8:	bl	12ab4 <__assert_fail@plt>
   13abc:	ldr	r0, [r0, r1, lsl #2]
   13ac0:	add	r0, r2, r0
   13ac4:	bx	lr
   13ac8:	andeq	lr, r1, r1, lsr #16
   13acc:			; <UNDEFINED> instruction: 0x000002b5
   13ad0:	andeq	lr, r1, r3, lsl #26
   13ad4:	andeq	lr, r1, r0, lsl lr
   13ad8:	subs	r2, r0, #0
   13adc:	bne	13af8 <_start@@Base+0xcb0>
   13ae0:	push	{r4, lr}
   13ae4:	ldr	r3, [pc, #52]	; 13b20 <_start@@Base+0xcd8>
   13ae8:	ldr	r2, [pc, #52]	; 13b24 <_start@@Base+0xcdc>
   13aec:	ldr	r1, [pc, #52]	; 13b28 <_start@@Base+0xce0>
   13af0:	ldr	r0, [pc, #52]	; 13b2c <_start@@Base+0xce4>
   13af4:	bl	12ab4 <__assert_fail@plt>
   13af8:	ldr	r3, [r2]
   13afc:	sub	r3, r2, r3
   13b00:	ldrh	r1, [r3]
   13b04:	cmp	r1, #19
   13b08:	movls	r0, #0
   13b0c:	bls	13b1c <_start@@Base+0xcd4>
   13b10:	ldrh	r0, [r3, #18]
   13b14:	cmp	r0, #0
   13b18:	ldrbne	r0, [r2, r0]
   13b1c:	bx	lr
   13b20:	andeq	lr, r1, pc, lsr r8
   13b24:	andeq	r0, r0, sp, asr #5
   13b28:	andeq	lr, r1, r3, lsl #26
   13b2c:	andeq	lr, r1, r5, ror #26
   13b30:	subs	r3, r0, #0
   13b34:	bne	13b50 <_start@@Base+0xd08>
   13b38:	push	{r4, lr}
   13b3c:	ldr	r3, [pc, #60]	; 13b80 <_start@@Base+0xd38>
   13b40:	ldr	r2, [pc, #60]	; 13b84 <_start@@Base+0xd3c>
   13b44:	ldr	r1, [pc, #60]	; 13b88 <_start@@Base+0xd40>
   13b48:	ldr	r0, [pc, #60]	; 13b8c <_start@@Base+0xd44>
   13b4c:	bl	12ab4 <__assert_fail@plt>
   13b50:	ldr	r2, [r3]
   13b54:	sub	r2, r3, r2
   13b58:	ldrh	r1, [r2]
   13b5c:	cmp	r1, #21
   13b60:	movls	r0, #0
   13b64:	bls	13b7c <_start@@Base+0xd34>
   13b68:	ldrh	r0, [r2, #20]
   13b6c:	cmp	r0, #0
   13b70:	addne	r2, r3, r0
   13b74:	ldrne	r0, [r3, r0]
   13b78:	addne	r0, r2, r0
   13b7c:	bx	lr
   13b80:	andeq	lr, r1, r0, ror #16
   13b84:	andeq	r0, r0, sp, asr #5
   13b88:	andeq	lr, r1, r3, lsl #26
   13b8c:	andeq	lr, r1, r5, ror #26
   13b90:	cmp	r0, #0
   13b94:	push	{r4, lr}
   13b98:	bne	13bb0 <_start@@Base+0xd68>
   13b9c:	ldr	r3, [pc, #84]	; 13bf8 <_start@@Base+0xdb0>
   13ba0:	ldr	r2, [pc, #84]	; 13bfc <_start@@Base+0xdb4>
   13ba4:	ldr	r1, [pc, #84]	; 13c00 <_start@@Base+0xdb8>
   13ba8:	ldr	r0, [pc, #84]	; 13c04 <_start@@Base+0xdbc>
   13bac:	bl	12ab4 <__assert_fail@plt>
   13bb0:	ldr	r3, [r0]
   13bb4:	sub	r3, r0, r3
   13bb8:	ldrh	r2, [r3]
   13bbc:	cmp	r2, #11
   13bc0:	bls	13bd0 <_start@@Base+0xd88>
   13bc4:	ldrh	r2, [r3, #10]
   13bc8:	cmp	r2, #0
   13bcc:	bne	13be4 <_start@@Base+0xd9c>
   13bd0:	ldr	r3, [pc, #32]	; 13bf8 <_start@@Base+0xdb0>
   13bd4:	ldr	r2, [pc, #32]	; 13bfc <_start@@Base+0xdb4>
   13bd8:	ldr	r1, [pc, #32]	; 13c00 <_start@@Base+0xdb8>
   13bdc:	ldr	r0, [pc, #36]	; 13c08 <_start@@Base+0xdc0>
   13be0:	b	13bac <_start@@Base+0xd64>
   13be4:	add	r3, r0, r2
   13be8:	ldr	r0, [r0, r2]
   13bec:	add	r0, r0, #4
   13bf0:	add	r0, r3, r0
   13bf4:	pop	{r4, pc}
   13bf8:	andeq	lr, r1, ip, ror r8
   13bfc:			; <UNDEFINED> instruction: 0x000002bb
   13c00:	andeq	lr, r1, r3, lsl #26
   13c04:	andeq	lr, r1, r5, ror #26
   13c08:	andeq	lr, r1, r7, asr #28
   13c0c:	push	{r4, r5, r6, r7, r8, lr}
   13c10:	subs	r5, r0, #0
   13c14:	beq	13c94 <_start@@Base+0xe4c>
   13c18:	ldr	r4, [r5, #-4]
   13c1c:	cmp	r4, #0
   13c20:	beq	13c94 <_start@@Base+0xe4c>
   13c24:	mov	r7, r1
   13c28:	sub	r4, r4, #1
   13c2c:	mov	r8, #0
   13c30:	cmp	r4, r8
   13c34:	bhi	13c64 <_start@@Base+0xe1c>
   13c38:	bne	13c94 <_start@@Base+0xe4c>
   13c3c:	mov	r1, r4
   13c40:	mov	r0, r5
   13c44:	bl	13a8c <_start@@Base+0xc44>
   13c48:	bl	13b90 <_start@@Base+0xd48>
   13c4c:	mov	r1, r7
   13c50:	bl	129b8 <strcmp@plt>
   13c54:	cmp	r0, #0
   13c58:	mvnne	r4, #0
   13c5c:	mov	r0, r4
   13c60:	pop	{r4, r5, r6, r7, r8, pc}
   13c64:	sub	r6, r4, r8
   13c68:	mov	r0, r5
   13c6c:	add	r6, r8, r6, lsr #1
   13c70:	mov	r1, r6
   13c74:	bl	13a8c <_start@@Base+0xc44>
   13c78:	bl	13b90 <_start@@Base+0xd48>
   13c7c:	mov	r1, r7
   13c80:	bl	129b8 <strcmp@plt>
   13c84:	cmp	r0, #0
   13c88:	addlt	r8, r6, #1
   13c8c:	movge	r4, r6
   13c90:	b	13c30 <_start@@Base+0xde8>
   13c94:	mvn	r4, #0
   13c98:	b	13c5c <_start@@Base+0xe14>
   13c9c:	push	{r4, r5, r6, lr}
   13ca0:	mov	r5, r0
   13ca4:	mov	r6, r1
   13ca8:	mov	r4, #0
   13cac:	cmp	r5, #0
   13cb0:	beq	13cc0 <_start@@Base+0xe78>
   13cb4:	ldr	r3, [r5, #-4]
   13cb8:	cmp	r4, r3
   13cbc:	bcc	13ccc <_start@@Base+0xe84>
   13cc0:	mvn	r4, #0
   13cc4:	mov	r0, r4
   13cc8:	pop	{r4, r5, r6, pc}
   13ccc:	mov	r1, r4
   13cd0:	mov	r0, r5
   13cd4:	bl	13a8c <_start@@Base+0xc44>
   13cd8:	bl	13b90 <_start@@Base+0xd48>
   13cdc:	mov	r1, r6
   13ce0:	bl	129b8 <strcmp@plt>
   13ce4:	cmp	r0, #0
   13ce8:	beq	13cc4 <_start@@Base+0xe7c>
   13cec:	add	r4, r4, #1
   13cf0:	b	13cac <_start@@Base+0xe64>
   13cf4:	push	{r4, r5, r6, lr}
   13cf8:	subs	r5, r0, #0
   13cfc:	mvneq	r4, #0
   13d00:	beq	13d18 <_start@@Base+0xed0>
   13d04:	ldr	r4, [r5, #-4]
   13d08:	mov	r6, r1
   13d0c:	sub	r4, r4, #1
   13d10:	cmn	r4, #1
   13d14:	bne	13d20 <_start@@Base+0xed8>
   13d18:	mov	r0, r4
   13d1c:	pop	{r4, r5, r6, pc}
   13d20:	mov	r1, r4
   13d24:	mov	r0, r5
   13d28:	bl	13a8c <_start@@Base+0xc44>
   13d2c:	bl	13b90 <_start@@Base+0xd48>
   13d30:	mov	r1, r6
   13d34:	bl	129b8 <strcmp@plt>
   13d38:	sub	r3, r4, #1
   13d3c:	cmp	r0, #0
   13d40:	beq	13d18 <_start@@Base+0xed0>
   13d44:	mov	r4, r3
   13d48:	b	13d10 <_start@@Base+0xec8>
   13d4c:	push	{r4, r5, r6, r7, r8, lr}
   13d50:	mov	r5, r0
   13d54:	mov	r6, r2
   13d58:	mov	r7, r3
   13d5c:	mov	r4, r1
   13d60:	cmp	r5, #0
   13d64:	beq	13d7c <_start@@Base+0xf34>
   13d68:	ldr	r3, [r5, #-4]
   13d6c:	cmp	r6, r3
   13d70:	movcc	r3, r6
   13d74:	cmp	r4, r3
   13d78:	bcc	13d88 <_start@@Base+0xf40>
   13d7c:	mvn	r4, #0
   13d80:	mov	r0, r4
   13d84:	pop	{r4, r5, r6, r7, r8, pc}
   13d88:	mov	r1, r4
   13d8c:	mov	r0, r5
   13d90:	bl	13a8c <_start@@Base+0xc44>
   13d94:	bl	13b90 <_start@@Base+0xd48>
   13d98:	mov	r1, r7
   13d9c:	bl	129b8 <strcmp@plt>
   13da0:	cmp	r0, #0
   13da4:	beq	13d80 <_start@@Base+0xf38>
   13da8:	add	r4, r4, #1
   13dac:	b	13d60 <_start@@Base+0xf18>
   13db0:	push	{r4, r5, r6, r7, r8, lr}
   13db4:	mov	r5, r0
   13db8:	mov	r6, r1
   13dbc:	bl	13c9c <_start@@Base+0xe54>
   13dc0:	mov	r4, #0
   13dc4:	mvn	r7, #0
   13dc8:	cmn	r0, #1
   13dcc:	bne	13dd8 <_start@@Base+0xf90>
   13dd0:	mov	r0, r4
   13dd4:	pop	{r4, r5, r6, r7, r8, pc}
   13dd8:	add	r1, r0, #1
   13ddc:	mov	r3, r6
   13de0:	mov	r2, r7
   13de4:	mov	r0, r5
   13de8:	add	r4, r4, #1
   13dec:	bl	13d4c <_start@@Base+0xf04>
   13df0:	b	13dc8 <_start@@Base+0xf80>
   13df4:	push	{r4, r5, r6, r7, r8, lr}
   13df8:	subs	r5, r0, #0
   13dfc:	beq	13e20 <_start@@Base+0xfd8>
   13e00:	mov	r7, r3
   13e04:	ldr	r3, [r5, #-4]
   13e08:	mov	r6, r1
   13e0c:	cmp	r2, r3
   13e10:	movcs	r2, r3
   13e14:	cmp	r2, r6
   13e18:	sub	r4, r2, #1
   13e1c:	bhi	13e28 <_start@@Base+0xfe0>
   13e20:	mvn	r4, #0
   13e24:	b	13e4c <_start@@Base+0x1004>
   13e28:	mov	r1, r4
   13e2c:	mov	r0, r5
   13e30:	bl	13a8c <_start@@Base+0xc44>
   13e34:	bl	13b90 <_start@@Base+0xd48>
   13e38:	mov	r1, r7
   13e3c:	bl	129b8 <strcmp@plt>
   13e40:	mov	r2, r4
   13e44:	cmp	r0, #0
   13e48:	bne	13e14 <_start@@Base+0xfcc>
   13e4c:	mov	r0, r4
   13e50:	pop	{r4, r5, r6, r7, r8, pc}
   13e54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e58:	mov	r5, r0
   13e5c:	mov	r6, r1
   13e60:	mov	r8, r2
   13e64:	mov	r7, #0
   13e68:	lsl	r4, r6, #1
   13e6c:	cmp	r4, r8
   13e70:	bls	13e78 <_start@@Base+0x1030>
   13e74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e78:	bcs	13ec0 <_start@@Base+0x1078>
   13e7c:	mov	r1, r4
   13e80:	mov	r0, r5
   13e84:	bl	13a8c <_start@@Base+0xc44>
   13e88:	bl	13b90 <_start@@Base+0xd48>
   13e8c:	add	r9, r4, #1
   13e90:	mov	r1, r9
   13e94:	mov	sl, r0
   13e98:	mov	r0, r5
   13e9c:	bl	13a8c <_start@@Base+0xc44>
   13ea0:	bl	13b90 <_start@@Base+0xd48>
   13ea4:	subs	r1, r0, #0
   13ea8:	moveq	r2, r7
   13eac:	ldrne	r2, [r1, #-4]
   13eb0:	mov	r0, sl
   13eb4:	bl	133e4 <_start@@Base+0x59c>
   13eb8:	cmp	r0, #0
   13ebc:	movlt	r4, r9
   13ec0:	mov	r1, r6
   13ec4:	mov	r0, r5
   13ec8:	bl	13a8c <_start@@Base+0xc44>
   13ecc:	bl	13b90 <_start@@Base+0xd48>
   13ed0:	mov	r1, r4
   13ed4:	mov	r9, r0
   13ed8:	mov	r0, r5
   13edc:	bl	13a8c <_start@@Base+0xc44>
   13ee0:	bl	13b90 <_start@@Base+0xd48>
   13ee4:	subs	r1, r0, #0
   13ee8:	moveq	r2, r7
   13eec:	ldrne	r2, [r1, #-4]
   13ef0:	mov	r0, r9
   13ef4:	bl	133e4 <_start@@Base+0x59c>
   13ef8:	cmp	r0, #0
   13efc:	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f00:	sub	r3, r6, r4
   13f04:	ldr	r2, [r5, r6, lsl #2]
   13f08:	ldr	r1, [r5, r4, lsl #2]
   13f0c:	lsl	r3, r3, #2
   13f10:	add	r2, r3, r2
   13f14:	sub	r3, r1, r3
   13f18:	str	r3, [r5, r6, lsl #2]
   13f1c:	str	r2, [r5, r4, lsl #2]
   13f20:	mov	r6, r4
   13f24:	b	13e68 <_start@@Base+0x1020>
   13f28:	push	{r4, r5, r6, r7, r8, lr}
   13f2c:	subs	r4, r0, #0
   13f30:	popeq	{r4, r5, r6, r7, r8, pc}
   13f34:	ldr	r7, [r4, #-4]
   13f38:	cmp	r7, #0
   13f3c:	popeq	{r4, r5, r6, r7, r8, pc}
   13f40:	sub	r6, r7, #1
   13f44:	lsr	r5, r7, #1
   13f48:	mov	r1, r5
   13f4c:	mov	r2, r6
   13f50:	mov	r0, r4
   13f54:	bl	13e54 <_start@@Base+0x100c>
   13f58:	subs	r5, r5, #1
   13f5c:	bcs	13f48 <_start@@Base+0x1100>
   13f60:	mvn	r5, #3
   13f64:	add	r8, r4, r7, lsl #2
   13f68:	mul	r5, r5, r7
   13f6c:	mov	r7, #0
   13f70:	cmp	r6, #0
   13f74:	add	r5, r5, #4
   13f78:	bne	13f80 <_start@@Base+0x1138>
   13f7c:	pop	{r4, r5, r6, r7, r8, pc}
   13f80:	ldr	r3, [r4]
   13f84:	ldr	r2, [r8, #-4]
   13f88:	add	r3, r5, r3
   13f8c:	sub	r2, r2, r5
   13f90:	sub	r6, r6, #1
   13f94:	str	r2, [r4]
   13f98:	mov	r1, r7
   13f9c:	str	r3, [r8, #-4]!
   13fa0:	mov	r2, r6
   13fa4:	mov	r0, r4
   13fa8:	bl	13e54 <_start@@Base+0x100c>
   13fac:	b	13f70 <_start@@Base+0x1128>
   13fb0:	push	{r4, r5, r6, r7, r8, lr}
   13fb4:	subs	r5, r0, #0
   13fb8:	mvneq	r4, #0
   13fbc:	beq	13fd8 <_start@@Base+0x1190>
   13fc0:	ldr	r4, [r5, #-4]
   13fc4:	mov	r7, r2
   13fc8:	mov	r6, r1
   13fcc:	sub	r4, r4, #1
   13fd0:	cmn	r4, #1
   13fd4:	bne	13fe0 <_start@@Base+0x1198>
   13fd8:	mov	r0, r4
   13fdc:	pop	{r4, r5, r6, r7, r8, pc}
   13fe0:	mov	r1, r4
   13fe4:	mov	r0, r5
   13fe8:	bl	13a8c <_start@@Base+0xc44>
   13fec:	bl	13b90 <_start@@Base+0xd48>
   13ff0:	mov	r2, r7
   13ff4:	mov	r1, r6
   13ff8:	bl	133e4 <_start@@Base+0x59c>
   13ffc:	sub	r3, r4, #1
   14000:	cmp	r0, #0
   14004:	beq	13fd8 <_start@@Base+0x1190>
   14008:	mov	r4, r3
   1400c:	b	13fd0 <_start@@Base+0x1188>
   14010:	subs	r3, r0, #0
   14014:	bne	14030 <_start@@Base+0x11e8>
   14018:	push	{r4, lr}
   1401c:	ldr	r3, [pc, #60]	; 14060 <_start@@Base+0x1218>
   14020:	ldr	r2, [pc, #60]	; 14064 <_start@@Base+0x121c>
   14024:	ldr	r1, [pc, #60]	; 14068 <_start@@Base+0x1220>
   14028:	ldr	r0, [pc, #60]	; 1406c <_start@@Base+0x1224>
   1402c:	bl	12ab4 <__assert_fail@plt>
   14030:	ldr	r2, [r3]
   14034:	sub	r2, r3, r2
   14038:	ldrh	r1, [r2]
   1403c:	cmp	r1, #33	; 0x21
   14040:	movls	r0, #0
   14044:	bls	1405c <_start@@Base+0x1214>
   14048:	ldrh	r0, [r2, #32]
   1404c:	cmp	r0, #0
   14050:	addne	r2, r3, r0
   14054:	ldrne	r0, [r3, r0]
   14058:	addne	r0, r2, r0
   1405c:	bx	lr
   14060:	muleq	r1, r8, r8
   14064:	ldrdeq	r0, [r0], -r2
   14068:	andeq	lr, r1, r3, lsl #26
   1406c:	andeq	lr, r1, r5, ror #26
   14070:	subs	r3, r0, #0
   14074:	bne	14090 <_start@@Base+0x1248>
   14078:	push	{r4, lr}
   1407c:	ldr	r3, [pc, #64]	; 140c4 <_start@@Base+0x127c>
   14080:	ldr	r2, [pc, #64]	; 140c8 <_start@@Base+0x1280>
   14084:	ldr	r1, [pc, #64]	; 140cc <_start@@Base+0x1284>
   14088:	ldr	r0, [pc, #64]	; 140d0 <_start@@Base+0x1288>
   1408c:	bl	12ab4 <__assert_fail@plt>
   14090:	ldr	r2, [r3]
   14094:	sub	r2, r3, r2
   14098:	ldrh	r1, [r2]
   1409c:	cmp	r1, #9
   140a0:	movls	r0, #0
   140a4:	bls	140c0 <_start@@Base+0x1278>
   140a8:	ldrh	r0, [r2, #8]
   140ac:	cmp	r0, #0
   140b0:	addne	r2, r3, r0
   140b4:	ldrne	r0, [r3, r0]
   140b8:	addne	r0, r0, #4
   140bc:	addne	r0, r2, r0
   140c0:	bx	lr
   140c4:			; <UNDEFINED> instruction: 0x0001e8b9
   140c8:	andeq	r0, r0, sp, ror #4
   140cc:	andeq	lr, r1, r3, lsl #26
   140d0:	andeq	lr, r1, r5, ror #26
   140d4:	subs	r3, r0, #0
   140d8:	bne	140f4 <_start@@Base+0x12ac>
   140dc:	push	{r4, lr}
   140e0:	ldr	r3, [pc, #64]	; 14128 <_start@@Base+0x12e0>
   140e4:	ldr	r2, [pc, #64]	; 1412c <_start@@Base+0x12e4>
   140e8:	ldr	r1, [pc, #64]	; 14130 <_start@@Base+0x12e8>
   140ec:	ldr	r0, [pc, #64]	; 14134 <_start@@Base+0x12ec>
   140f0:	bl	12ab4 <__assert_fail@plt>
   140f4:	ldr	r2, [r3]
   140f8:	sub	r2, r3, r2
   140fc:	ldrh	r1, [r2]
   14100:	cmp	r1, #11
   14104:	movls	r0, #0
   14108:	bls	14124 <_start@@Base+0x12dc>
   1410c:	ldrh	r0, [r2, #10]
   14110:	cmp	r0, #0
   14114:	addne	r2, r3, r0
   14118:	ldrne	r0, [r3, r0]
   1411c:	addne	r0, r0, #4
   14120:	addne	r0, r2, r0
   14124:	bx	lr
   14128:	ldrdeq	lr, [r1], -r9
   1412c:	andeq	r0, r0, sp, ror #4
   14130:	andeq	lr, r1, r3, lsl #26
   14134:	andeq	lr, r1, r5, ror #26
   14138:	cmp	r0, #0
   1413c:	add	r2, r0, r1, lsl #2
   14140:	beq	14150 <_start@@Base+0x1308>
   14144:	ldr	r3, [r0, #-4]
   14148:	cmp	r1, r3
   1414c:	bcc	14168 <_start@@Base+0x1320>
   14150:	push	{r4, lr}
   14154:	mov	r2, #117	; 0x75
   14158:	ldr	r3, [pc, #20]	; 14174 <_start@@Base+0x132c>
   1415c:	ldr	r1, [pc, #20]	; 14178 <_start@@Base+0x1330>
   14160:	ldr	r0, [pc, #20]	; 1417c <_start@@Base+0x1334>
   14164:	bl	12ab4 <__assert_fail@plt>
   14168:	ldr	r0, [r0, r1, lsl #2]
   1416c:	add	r0, r2, r0
   14170:	bx	lr
   14174:	strdeq	lr, [r1], -r4
   14178:	andeq	lr, r1, r8, lsr #27
   1417c:	andeq	lr, r1, r0, lsl lr
   14180:	cmp	r0, #0
   14184:	beq	14194 <_start@@Base+0x134c>
   14188:	ldr	r3, [r0, #-4]
   1418c:	cmp	r1, r3
   14190:	bcc	141ac <_start@@Base+0x1364>
   14194:	push	{r4, lr}
   14198:	ldr	r3, [pc, #20]	; 141b4 <_start@@Base+0x136c>
   1419c:	ldr	r2, [pc, #20]	; 141b8 <_start@@Base+0x1370>
   141a0:	ldr	r1, [pc, #20]	; 141bc <_start@@Base+0x1374>
   141a4:	ldr	r0, [pc, #20]	; 141c0 <_start@@Base+0x1378>
   141a8:	bl	12ab4 <__assert_fail@plt>
   141ac:	ldrb	r0, [r0, r1]
   141b0:	bx	lr
   141b4:	andeq	lr, r1, pc, lsl #18
   141b8:	muleq	r0, r5, r1
   141bc:	andeq	lr, r1, r8, lsr #27
   141c0:	andeq	lr, r1, r0, lsl lr
   141c4:	cmp	r0, #0
   141c8:	bne	141e4 <_start@@Base+0x139c>
   141cc:	push	{r4, lr}
   141d0:	ldr	r3, [pc, #48]	; 14208 <_start@@Base+0x13c0>
   141d4:	ldr	r2, [pc, #48]	; 1420c <_start@@Base+0x13c4>
   141d8:	ldr	r1, [pc, #48]	; 14210 <_start@@Base+0x13c8>
   141dc:	ldr	r0, [pc, #48]	; 14214 <_start@@Base+0x13cc>
   141e0:	bl	12ab4 <__assert_fail@plt>
   141e4:	ldr	r3, [r0]
   141e8:	sub	r0, r0, r3
   141ec:	ldrh	r3, [r0]
   141f0:	cmp	r3, #17
   141f4:	movls	r0, #0
   141f8:	ldrhhi	r0, [r0, #16]
   141fc:	adds	r0, r0, #0
   14200:	movne	r0, #1
   14204:	bx	lr
   14208:	andeq	lr, r1, r4, asr #19
   1420c:	andeq	r0, r0, r1, asr #5
   14210:	andeq	lr, r1, r3, lsl #26
   14214:	andeq	lr, r1, r5, ror #26
   14218:	mov	r3, #2
   1421c:	push	{r4, lr}
   14220:	mov	r2, r3
   14224:	mov	r4, r1
   14228:	mov	r1, r3
   1422c:	bl	1ca20 <flatcc_builder_table_add@@Base>
   14230:	cmp	r0, #0
   14234:	strhne	r4, [r0]
   14238:	movne	r0, #0
   1423c:	mvneq	r0, #0
   14240:	pop	{r4, pc}
   14244:	push	{r4, r5, r6, r7, r8, lr}
   14248:	subs	r4, r1, #0
   1424c:	beq	1429c <_start@@Base+0x1454>
   14250:	cmp	r2, #0
   14254:	bne	14260 <_start@@Base+0x1418>
   14258:	mvn	r0, #0
   1425c:	pop	{r4, r5, r6, r7, r8, pc}
   14260:	mov	r3, #1
   14264:	mov	r5, r2
   14268:	mov	r1, #7
   1426c:	mov	r2, r3
   14270:	mov	r6, r0
   14274:	bl	1ca20 <flatcc_builder_table_add@@Base>
   14278:	subs	r7, r0, #0
   1427c:	beq	14258 <_start@@Base+0x1410>
   14280:	mov	r1, #8
   14284:	mov	r0, r6
   14288:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   1428c:	cmp	r0, #0
   14290:	beq	14258 <_start@@Base+0x1410>
   14294:	strb	r4, [r7]
   14298:	str	r5, [r0]
   1429c:	mov	r0, #0
   142a0:	pop	{r4, r5, r6, r7, r8, pc}
   142a4:	push	{r4, lr}
   142a8:	mov	r2, #1
   142ac:	ldr	r1, [pc, #44]	; 142e0 <_start@@Base+0x1498>
   142b0:	mov	r4, r0
   142b4:	bl	1c01c <flatcc_builder_check_required@@Base>
   142b8:	cmp	r0, #0
   142bc:	bne	142d4 <_start@@Base+0x148c>
   142c0:	ldr	r3, [pc, #28]	; 142e4 <_start@@Base+0x149c>
   142c4:	mov	r2, #235	; 0xeb
   142c8:	ldr	r1, [pc, #24]	; 142e8 <_start@@Base+0x14a0>
   142cc:	ldr	r0, [pc, #24]	; 142ec <_start@@Base+0x14a4>
   142d0:	bl	12ab4 <__assert_fail@plt>
   142d4:	mov	r0, r4
   142d8:	pop	{r4, lr}
   142dc:	b	1c09c <flatcc_builder_end_table@@Base>
   142e0:	andeq	lr, r1, ip, ror #19
   142e4:	strdeq	lr, [r1], -r0
   142e8:	andeq	lr, r1, r8, lsl #29
   142ec:	andeq	lr, r1, fp, ror #29
   142f0:	push	{r4, lr}
   142f4:	mov	r4, r0
   142f8:	bl	142a4 <_start@@Base+0x145c>
   142fc:	mov	r1, r0
   14300:	mov	r0, r4
   14304:	pop	{r4, lr}
   14308:	b	1b2fc <flatcc_builder_end_buffer@@Base>
   1430c:	mov	r2, #0
   14310:	push	{r4, lr}
   14314:	mov	r3, #1
   14318:	mov	r1, r2
   1431c:	mov	r4, r0
   14320:	bl	1ca20 <flatcc_builder_table_add@@Base>
   14324:	cmp	r0, #0
   14328:	bne	1433c <_start@@Base+0x14f4>
   1432c:	pop	{r4, pc}
   14330:	mov	r0, r4
   14334:	pop	{r4, lr}
   14338:	b	1c09c <flatcc_builder_end_table@@Base>
   1433c:	mov	r2, #0
   14340:	ldr	r1, [pc, #32]	; 14368 <_start@@Base+0x1520>
   14344:	mov	r0, r4
   14348:	bl	1c01c <flatcc_builder_check_required@@Base>
   1434c:	cmp	r0, #0
   14350:	bne	14330 <_start@@Base+0x14e8>
   14354:	ldr	r3, [pc, #16]	; 1436c <_start@@Base+0x1524>
   14358:	mov	r2, #215	; 0xd7
   1435c:	ldr	r1, [pc, #12]	; 14370 <_start@@Base+0x1528>
   14360:	ldr	r0, [pc, #12]	; 14374 <_start@@Base+0x152c>
   14364:	bl	12ab4 <__assert_fail@plt>
   14368:	andeq	lr, r1, r0, lsr sl
   1436c:	andeq	lr, r1, fp, lsl #20
   14370:	andeq	lr, r1, r8, lsl #29
   14374:	andeq	lr, r1, sp, lsl #31
   14378:	push	{r4, lr}
   1437c:	mov	r2, #0
   14380:	ldr	r1, [pc, #44]	; 143b4 <_start@@Base+0x156c>
   14384:	mov	r4, r0
   14388:	bl	1c01c <flatcc_builder_check_required@@Base>
   1438c:	cmp	r0, #0
   14390:	bne	143a8 <_start@@Base+0x1560>
   14394:	ldr	r3, [pc, #28]	; 143b8 <_start@@Base+0x1570>
   14398:	mov	r2, #221	; 0xdd
   1439c:	ldr	r1, [pc, #24]	; 143bc <_start@@Base+0x1574>
   143a0:	ldr	r0, [pc, #24]	; 143c0 <_start@@Base+0x1578>
   143a4:	bl	12ab4 <__assert_fail@plt>
   143a8:	mov	r0, r4
   143ac:	pop	{r4, lr}
   143b0:	b	1c09c <flatcc_builder_end_table@@Base>
   143b4:	andeq	lr, r1, r2, lsr sl
   143b8:	andeq	lr, r1, r4, lsr sl
   143bc:	andeq	lr, r1, r8, lsl #29
   143c0:	andeq	pc, r1, sl, asr #32
   143c4:	push	{r4, r5, r6, lr}
   143c8:	subs	r5, r1, #0
   143cc:	mov	r4, r0
   143d0:	beq	14400 <_start@@Base+0x15b8>
   143d4:	mov	r3, #4
   143d8:	mov	r2, r3
   143dc:	mov	r1, #0
   143e0:	bl	1ca20 <flatcc_builder_table_add@@Base>
   143e4:	subs	r3, r0, #0
   143e8:	strne	r5, [r3]
   143ec:	bne	14400 <_start@@Base+0x15b8>
   143f0:	pop	{r4, r5, r6, pc}
   143f4:	mov	r0, r4
   143f8:	pop	{r4, r5, r6, lr}
   143fc:	b	1c09c <flatcc_builder_end_table@@Base>
   14400:	mov	r2, #0
   14404:	ldr	r1, [pc, #32]	; 1442c <_start@@Base+0x15e4>
   14408:	mov	r0, r4
   1440c:	bl	1c01c <flatcc_builder_check_required@@Base>
   14410:	cmp	r0, #0
   14414:	bne	143f4 <_start@@Base+0x15ac>
   14418:	ldr	r3, [pc, #16]	; 14430 <_start@@Base+0x15e8>
   1441c:	mov	r2, #239	; 0xef
   14420:	ldr	r1, [pc, #12]	; 14434 <_start@@Base+0x15ec>
   14424:	ldr	r0, [pc, #12]	; 14438 <_start@@Base+0x15f0>
   14428:	bl	12ab4 <__assert_fail@plt>
   1442c:	andeq	lr, r1, r2, ror #20
   14430:	andeq	lr, r1, ip, asr #20
   14434:	andeq	lr, r1, r8, lsl #29
   14438:	andeq	pc, r1, r3, ror #1
   1443c:	mov	r3, #8
   14440:	push	{r4, lr}
   14444:	mov	r2, r3
   14448:	mov	r1, #0
   1444c:	mov	r4, r0
   14450:	bl	1d934 <flatcc_verify_field@@Base>
   14454:	cmp	r0, #0
   14458:	popne	{r4, pc}
   1445c:	mov	r3, #4
   14460:	mov	r0, r4
   14464:	mov	r2, r3
   14468:	mov	r1, #1
   1446c:	pop	{r4, lr}
   14470:	b	1d934 <flatcc_verify_field@@Base>
   14474:	mov	r3, #1
   14478:	push	{r4, lr}
   1447c:	mov	r2, r3
   14480:	mov	r1, #0
   14484:	mov	r4, r0
   14488:	bl	1d934 <flatcc_verify_field@@Base>
   1448c:	cmp	r0, #0
   14490:	popne	{r4, pc}
   14494:	mov	r3, #1
   14498:	mov	r2, r3
   1449c:	mov	r1, r3
   144a0:	mov	r0, r4
   144a4:	bl	1d934 <flatcc_verify_field@@Base>
   144a8:	cmp	r0, #0
   144ac:	popne	{r4, pc}
   144b0:	mov	r3, #1
   144b4:	mov	r2, r3
   144b8:	mov	r1, #2
   144bc:	mov	r0, r4
   144c0:	bl	1d934 <flatcc_verify_field@@Base>
   144c4:	cmp	r0, #0
   144c8:	popne	{r4, pc}
   144cc:	mov	r3, #1
   144d0:	mov	r0, r4
   144d4:	mov	r2, r3
   144d8:	mov	r1, #3
   144dc:	pop	{r4, lr}
   144e0:	b	1d934 <flatcc_verify_field@@Base>
   144e4:	mov	r3, #1
   144e8:	push	{r0, r1, r4, lr}
   144ec:	mov	r2, r3
   144f0:	mov	r1, #0
   144f4:	mov	r4, r0
   144f8:	bl	1d934 <flatcc_verify_field@@Base>
   144fc:	cmp	r0, #0
   14500:	bne	14648 <_start@@Base+0x1800>
   14504:	mov	r3, #1
   14508:	mov	r2, r3
   1450c:	mov	r1, r3
   14510:	mov	r0, r4
   14514:	bl	1d934 <flatcc_verify_field@@Base>
   14518:	cmp	r0, #0
   1451c:	bne	14648 <_start@@Base+0x1800>
   14520:	mov	r3, #2
   14524:	mov	r2, r3
   14528:	mov	r1, r3
   1452c:	mov	r0, r4
   14530:	bl	1d934 <flatcc_verify_field@@Base>
   14534:	cmp	r0, #0
   14538:	bne	14648 <_start@@Base+0x1800>
   1453c:	mov	r3, #2
   14540:	mov	r2, r3
   14544:	mov	r1, #3
   14548:	mov	r0, r4
   1454c:	bl	1d934 <flatcc_verify_field@@Base>
   14550:	cmp	r0, #0
   14554:	bne	14648 <_start@@Base+0x1800>
   14558:	mov	r3, #4
   1455c:	mov	r2, r3
   14560:	mov	r1, r3
   14564:	mov	r0, r4
   14568:	bl	1d934 <flatcc_verify_field@@Base>
   1456c:	cmp	r0, #0
   14570:	bne	14648 <_start@@Base+0x1800>
   14574:	mov	r3, #4
   14578:	mov	r2, r3
   1457c:	mov	r1, #5
   14580:	mov	r0, r4
   14584:	bl	1d934 <flatcc_verify_field@@Base>
   14588:	cmp	r0, #0
   1458c:	bne	14648 <_start@@Base+0x1800>
   14590:	mov	r3, #8
   14594:	mov	r2, r3
   14598:	mov	r1, #6
   1459c:	mov	r0, r4
   145a0:	bl	1d934 <flatcc_verify_field@@Base>
   145a4:	cmp	r0, #0
   145a8:	bne	14648 <_start@@Base+0x1800>
   145ac:	mov	r3, #8
   145b0:	mov	r2, r3
   145b4:	mov	r1, #7
   145b8:	mov	r0, r4
   145bc:	bl	1d934 <flatcc_verify_field@@Base>
   145c0:	cmp	r0, #0
   145c4:	bne	14648 <_start@@Base+0x1800>
   145c8:	mov	r3, #4
   145cc:	mov	r2, r3
   145d0:	mov	r1, #8
   145d4:	mov	r0, r4
   145d8:	bl	1d934 <flatcc_verify_field@@Base>
   145dc:	cmp	r0, #0
   145e0:	bne	14648 <_start@@Base+0x1800>
   145e4:	mov	r3, #8
   145e8:	mov	r2, r3
   145ec:	mov	r1, #9
   145f0:	mov	r0, r4
   145f4:	bl	1d934 <flatcc_verify_field@@Base>
   145f8:	cmp	r0, #0
   145fc:	bne	14648 <_start@@Base+0x1800>
   14600:	mvn	r3, #0
   14604:	str	r3, [sp, #4]
   14608:	mov	r3, #1
   1460c:	str	r3, [sp]
   14610:	mov	r2, #0
   14614:	mov	r1, #10
   14618:	mov	r0, r4
   1461c:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14620:	cmp	r0, #0
   14624:	bne	14648 <_start@@Base+0x1800>
   14628:	mvn	r3, #-536870912	; 0xe0000000
   1462c:	str	r3, [sp, #4]
   14630:	mov	r3, #8
   14634:	mov	r2, r0
   14638:	str	r3, [sp]
   1463c:	mov	r1, #11
   14640:	mov	r0, r4
   14644:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14648:	add	sp, sp, #8
   1464c:	pop	{r4, pc}
   14650:	mov	r2, #0
   14654:	push	{r4, lr}
   14658:	mov	r1, r2
   1465c:	mov	r4, r0
   14660:	bl	1d994 <flatcc_verify_string_field@@Base>
   14664:	cmp	r0, #0
   14668:	popne	{r4, pc}
   1466c:	mov	r3, #8
   14670:	mov	r2, r3
   14674:	mov	r1, #1
   14678:	mov	r0, r4
   1467c:	bl	1d934 <flatcc_verify_field@@Base>
   14680:	cmp	r0, #0
   14684:	popne	{r4, pc}
   14688:	mov	r3, #2
   1468c:	mov	r0, r4
   14690:	mov	r2, r3
   14694:	mov	r1, r3
   14698:	pop	{r4, lr}
   1469c:	b	1d934 <flatcc_verify_field@@Base>
   146a0:	mov	r2, #0
   146a4:	push	{r4, lr}
   146a8:	mov	r1, r2
   146ac:	mov	r4, r0
   146b0:	bl	1d994 <flatcc_verify_string_field@@Base>
   146b4:	subs	r2, r0, #0
   146b8:	bne	14788 <_start@@Base+0x1940>
   146bc:	mov	r3, #4
   146c0:	mov	r2, r3
   146c4:	mov	r1, #1
   146c8:	mov	r0, r4
   146cc:	bl	1d934 <flatcc_verify_field@@Base>
   146d0:	subs	r2, r0, #0
   146d4:	bne	14788 <_start@@Base+0x1940>
   146d8:	mov	r1, #2
   146dc:	mov	r0, r4
   146e0:	bl	1d994 <flatcc_verify_string_field@@Base>
   146e4:	subs	r2, r0, #0
   146e8:	bne	14788 <_start@@Base+0x1940>
   146ec:	mov	r3, #8
   146f0:	mov	r2, r3
   146f4:	mov	r1, #3
   146f8:	mov	r0, r4
   146fc:	bl	1d934 <flatcc_verify_field@@Base>
   14700:	subs	r2, r0, #0
   14704:	bne	14788 <_start@@Base+0x1940>
   14708:	mov	r1, #4
   1470c:	mov	r0, r4
   14710:	bl	1d994 <flatcc_verify_string_field@@Base>
   14714:	subs	r2, r0, #0
   14718:	bne	14788 <_start@@Base+0x1940>
   1471c:	mov	r3, #8
   14720:	mov	r2, r3
   14724:	mov	r1, #5
   14728:	mov	r0, r4
   1472c:	bl	1d934 <flatcc_verify_field@@Base>
   14730:	subs	r2, r0, #0
   14734:	bne	14788 <_start@@Base+0x1940>
   14738:	mov	r3, #4
   1473c:	mov	r2, r3
   14740:	mov	r1, #6
   14744:	mov	r0, r4
   14748:	bl	1d934 <flatcc_verify_field@@Base>
   1474c:	subs	r2, r0, #0
   14750:	bne	14788 <_start@@Base+0x1940>
   14754:	mov	r3, #8
   14758:	mov	r2, r3
   1475c:	mov	r1, #7
   14760:	mov	r0, r4
   14764:	bl	1d934 <flatcc_verify_field@@Base>
   14768:	subs	r2, r0, #0
   1476c:	bne	14788 <_start@@Base+0x1940>
   14770:	mov	r3, #4
   14774:	mov	r0, r4
   14778:	mov	r2, r3
   1477c:	mov	r1, #8
   14780:	pop	{r4, lr}
   14784:	b	1d934 <flatcc_verify_field@@Base>
   14788:	mov	r0, r2
   1478c:	pop	{r4, pc}
   14790:	mov	r2, #0
   14794:	push	{r4, lr}
   14798:	mov	r1, r2
   1479c:	ldr	r3, [pc, #64]	; 147e4 <_start@@Base+0x199c>
   147a0:	mov	r4, r0
   147a4:	bl	1dad8 <flatcc_verify_table_field@@Base>
   147a8:	subs	r2, r0, #0
   147ac:	bne	147dc <_start@@Base+0x1994>
   147b0:	ldr	r3, [pc, #48]	; 147e8 <_start@@Base+0x19a0>
   147b4:	mov	r1, #1
   147b8:	mov	r0, r4
   147bc:	bl	1dad8 <flatcc_verify_table_field@@Base>
   147c0:	subs	r2, r0, #0
   147c4:	bne	147dc <_start@@Base+0x1994>
   147c8:	mov	r0, r4
   147cc:	ldr	r3, [pc, #24]	; 147ec <_start@@Base+0x19a4>
   147d0:	mov	r1, #2
   147d4:	pop	{r4, lr}
   147d8:	b	1dad8 <flatcc_verify_table_field@@Base>
   147dc:	mov	r0, r2
   147e0:	pop	{r4, pc}
   147e4:	andeq	r4, r1, r0, lsr #13
   147e8:	andeq	r5, r1, r0, asr #3
   147ec:	andeq	r4, r1, ip, lsr r4
   147f0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   147f4:	mov	r2, #32
   147f8:	mov	r3, #16
   147fc:	mov	r1, #0
   14800:	mov	r4, r0
   14804:	bl	1d934 <flatcc_verify_field@@Base>
   14808:	subs	r2, r0, #0
   1480c:	bne	14bc0 <_start@@Base+0x1d78>
   14810:	mov	r3, #2
   14814:	mov	r2, r3
   14818:	mov	r1, r3
   1481c:	mov	r0, r4
   14820:	bl	1d934 <flatcc_verify_field@@Base>
   14824:	subs	r2, r0, #0
   14828:	bne	14bc0 <_start@@Base+0x1d78>
   1482c:	mov	r3, #2
   14830:	mov	r2, r3
   14834:	mov	r1, #1
   14838:	mov	r0, r4
   1483c:	bl	1d934 <flatcc_verify_field@@Base>
   14840:	subs	r2, r0, #0
   14844:	bne	14bc0 <_start@@Base+0x1d78>
   14848:	mov	r2, #1
   1484c:	mov	r1, #3
   14850:	mov	r0, r4
   14854:	bl	1d994 <flatcc_verify_string_field@@Base>
   14858:	subs	r2, r0, #0
   1485c:	bne	14bc0 <_start@@Base+0x1d78>
   14860:	mov	r3, #1
   14864:	mov	r2, r3
   14868:	mov	r1, #6
   1486c:	mov	r0, r4
   14870:	bl	1d934 <flatcc_verify_field@@Base>
   14874:	subs	r2, r0, #0
   14878:	bne	14bc0 <_start@@Base+0x1d78>
   1487c:	mov	r5, #1
   14880:	mvn	r6, #0
   14884:	mov	r3, r5
   14888:	stm	sp, {r5, r6}
   1488c:	mov	r1, #5
   14890:	mov	r0, r4
   14894:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14898:	subs	r2, r0, #0
   1489c:	bne	14bc0 <_start@@Base+0x1d78>
   148a0:	ldr	r3, [pc, #804]	; 14bcc <_start@@Base+0x1d84>
   148a4:	mov	r1, #11
   148a8:	mov	r0, r4
   148ac:	bl	1db28 <flatcc_verify_table_vector_field@@Base>
   148b0:	subs	r2, r0, #0
   148b4:	bne	14bc0 <_start@@Base+0x1d78>
   148b8:	mov	r1, #10
   148bc:	mov	r0, r4
   148c0:	bl	1da28 <flatcc_verify_string_vector_field@@Base>
   148c4:	subs	r2, r0, #0
   148c8:	bne	14bc0 <_start@@Base+0x1d78>
   148cc:	mov	r1, #28
   148d0:	mov	r0, r4
   148d4:	bl	1da28 <flatcc_verify_string_vector_field@@Base>
   148d8:	subs	r2, r0, #0
   148dc:	bne	14bc0 <_start@@Base+0x1d78>
   148e0:	stm	sp, {r5, r6}
   148e4:	mov	r3, r5
   148e8:	mov	r1, #24
   148ec:	mov	r0, r4
   148f0:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   148f4:	subs	r2, r0, #0
   148f8:	bne	14bc0 <_start@@Base+0x1d78>
   148fc:	mvn	r3, #-536870912	; 0xe0000000
   14900:	mov	r5, #4
   14904:	str	r3, [sp, #4]
   14908:	mov	r2, #0
   1490c:	str	r5, [sp]
   14910:	mov	r3, #8
   14914:	mov	r1, #29
   14918:	mov	r0, r4
   1491c:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14920:	subs	r2, r0, #0
   14924:	bne	14bc0 <_start@@Base+0x1d78>
   14928:	ldr	r6, [pc, #668]	; 14bcc <_start@@Base+0x1d84>
   1492c:	mov	r1, #12
   14930:	mov	r3, r6
   14934:	mov	r0, r4
   14938:	bl	1dad8 <flatcc_verify_table_field@@Base>
   1493c:	subs	r2, r0, #0
   14940:	bne	14bc0 <_start@@Base+0x1d78>
   14944:	ldr	r3, [pc, #644]	; 14bd0 <_start@@Base+0x1d88>
   14948:	mov	r1, #8
   1494c:	mov	r0, r4
   14950:	bl	1e098 <flatcc_verify_union_field@@Base>
   14954:	subs	r2, r0, #0
   14958:	bne	14bc0 <_start@@Base+0x1d78>
   1495c:	mov	r7, #2
   14960:	mvn	r8, #-1073741824	; 0xc0000000
   14964:	mov	r3, r5
   14968:	stm	sp, {r7, r8}
   1496c:	mov	r1, #9
   14970:	mov	r0, r4
   14974:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14978:	subs	r2, r0, #0
   1497c:	bne	14bc0 <_start@@Base+0x1d78>
   14980:	stm	sp, {r7, r8}
   14984:	mov	r3, r5
   14988:	mov	r1, #31
   1498c:	mov	r0, r4
   14990:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14994:	subs	r2, r0, #0
   14998:	bne	14bc0 <_start@@Base+0x1d78>
   1499c:	str	r6, [sp, #4]
   149a0:	mov	r6, #1
   149a4:	mov	r3, r2
   149a8:	str	r6, [sp]
   149ac:	mov	r1, #13
   149b0:	mov	r0, r4
   149b4:	bl	1dfbc <flatcc_verify_table_as_nested_root@@Base>
   149b8:	subs	r2, r0, #0
   149bc:	bne	14bc0 <_start@@Base+0x1d78>
   149c0:	ldr	r3, [pc, #524]	; 14bd4 <_start@@Base+0x1d8c>
   149c4:	mov	r1, #14
   149c8:	mov	r0, r4
   149cc:	bl	1dad8 <flatcc_verify_table_field@@Base>
   149d0:	subs	r2, r0, #0
   149d4:	bne	14bc0 <_start@@Base+0x1d78>
   149d8:	mov	r2, r6
   149dc:	mov	r3, r6
   149e0:	mov	r1, #15
   149e4:	mov	r0, r4
   149e8:	bl	1d934 <flatcc_verify_field@@Base>
   149ec:	subs	r2, r0, #0
   149f0:	bne	14bc0 <_start@@Base+0x1d78>
   149f4:	mov	r2, r5
   149f8:	mov	r3, r5
   149fc:	mov	r1, #16
   14a00:	mov	r0, r4
   14a04:	bl	1d934 <flatcc_verify_field@@Base>
   14a08:	subs	r2, r0, #0
   14a0c:	bne	14bc0 <_start@@Base+0x1d78>
   14a10:	mov	r2, r5
   14a14:	mov	r3, r5
   14a18:	mov	r1, #17
   14a1c:	mov	r0, r4
   14a20:	bl	1d934 <flatcc_verify_field@@Base>
   14a24:	subs	r2, r0, #0
   14a28:	bne	14bc0 <_start@@Base+0x1d78>
   14a2c:	mov	r3, #8
   14a30:	mov	r2, r3
   14a34:	mov	r1, #18
   14a38:	mov	r0, r4
   14a3c:	bl	1d934 <flatcc_verify_field@@Base>
   14a40:	subs	r2, r0, #0
   14a44:	bne	14bc0 <_start@@Base+0x1d78>
   14a48:	mov	r3, #8
   14a4c:	mov	r2, r3
   14a50:	mov	r1, #19
   14a54:	mov	r0, r4
   14a58:	bl	1d934 <flatcc_verify_field@@Base>
   14a5c:	subs	r2, r0, #0
   14a60:	bne	14bc0 <_start@@Base+0x1d78>
   14a64:	mov	r2, r5
   14a68:	mov	r3, r5
   14a6c:	mov	r1, #20
   14a70:	mov	r0, r4
   14a74:	bl	1d934 <flatcc_verify_field@@Base>
   14a78:	subs	r2, r0, #0
   14a7c:	bne	14bc0 <_start@@Base+0x1d78>
   14a80:	mov	r2, r5
   14a84:	mov	r3, r5
   14a88:	mov	r1, #21
   14a8c:	mov	r0, r4
   14a90:	bl	1d934 <flatcc_verify_field@@Base>
   14a94:	subs	r2, r0, #0
   14a98:	bne	14bc0 <_start@@Base+0x1d78>
   14a9c:	mov	r3, #8
   14aa0:	mov	r2, r3
   14aa4:	mov	r1, #22
   14aa8:	mov	r0, r4
   14aac:	bl	1d934 <flatcc_verify_field@@Base>
   14ab0:	subs	r2, r0, #0
   14ab4:	bne	14bc0 <_start@@Base+0x1d78>
   14ab8:	mov	r3, #8
   14abc:	mov	r2, r3
   14ac0:	mov	r1, #23
   14ac4:	mov	r0, r4
   14ac8:	bl	1d934 <flatcc_verify_field@@Base>
   14acc:	subs	r2, r0, #0
   14ad0:	bne	14bc0 <_start@@Base+0x1d78>
   14ad4:	mov	r2, r5
   14ad8:	mov	r3, r5
   14adc:	mov	r1, #25
   14ae0:	mov	r0, r4
   14ae4:	bl	1d934 <flatcc_verify_field@@Base>
   14ae8:	subs	r2, r0, #0
   14aec:	bne	14bc0 <_start@@Base+0x1d78>
   14af0:	mov	r2, r5
   14af4:	mov	r3, r5
   14af8:	mov	r1, #26
   14afc:	mov	r0, r4
   14b00:	bl	1d934 <flatcc_verify_field@@Base>
   14b04:	subs	r2, r0, #0
   14b08:	bne	14bc0 <_start@@Base+0x1d78>
   14b0c:	mov	r2, r5
   14b10:	mov	r3, r5
   14b14:	mov	r1, #27
   14b18:	mov	r0, r4
   14b1c:	bl	1d934 <flatcc_verify_field@@Base>
   14b20:	subs	r2, r0, #0
   14b24:	bne	14bc0 <_start@@Base+0x1d78>
   14b28:	mvn	r3, #0
   14b2c:	str	r3, [sp, #4]
   14b30:	str	r6, [sp]
   14b34:	mov	r3, r6
   14b38:	mov	r1, #30
   14b3c:	mov	r0, r4
   14b40:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14b44:	subs	r2, r0, #0
   14b48:	bne	14bc0 <_start@@Base+0x1d78>
   14b4c:	mov	r5, #8
   14b50:	mvn	r6, #-536870912	; 0xe0000000
   14b54:	mov	r2, #0
   14b58:	stm	sp, {r5, r6}
   14b5c:	mov	r3, r5
   14b60:	mov	r1, #32
   14b64:	mov	r0, r4
   14b68:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14b6c:	subs	r2, r0, #0
   14b70:	bne	14bc0 <_start@@Base+0x1d78>
   14b74:	stm	sp, {r5, r6}
   14b78:	mov	r3, r5
   14b7c:	mov	r1, #33	; 0x21
   14b80:	mov	r0, r4
   14b84:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14b88:	subs	r2, r0, #0
   14b8c:	bne	14bc0 <_start@@Base+0x1d78>
   14b90:	ldr	r3, [pc, #64]	; 14bd8 <_start@@Base+0x1d90>
   14b94:	mov	r1, #34	; 0x22
   14b98:	mov	r0, r4
   14b9c:	bl	1dad8 <flatcc_verify_table_field@@Base>
   14ba0:	subs	r2, r0, #0
   14ba4:	bne	14bc0 <_start@@Base+0x1d78>
   14ba8:	ldr	r3, [pc, #44]	; 14bdc <_start@@Base+0x1d94>
   14bac:	mov	r1, #35	; 0x23
   14bb0:	mov	r0, r4
   14bb4:	add	sp, sp, #8
   14bb8:	pop	{r4, r5, r6, r7, r8, lr}
   14bbc:	b	1dad8 <flatcc_verify_table_field@@Base>
   14bc0:	mov	r0, r2
   14bc4:	add	sp, sp, #8
   14bc8:	pop	{r4, r5, r6, r7, r8, pc}
   14bcc:	strdeq	r4, [r1], -r0
   14bd0:	andeq	r4, r1, r8, asr ip
   14bd4:	andeq	r4, r1, r0, asr r6
   14bd8:	strdeq	r4, [r1], -r0
   14bdc:	andeq	r4, r1, r0, ror #23
   14be0:	push	{r0, r1, r4, r5, r6, lr}
   14be4:	mov	r4, #1
   14be8:	mvn	r6, #0
   14bec:	mov	r2, #0
   14bf0:	stm	sp, {r4, r6}
   14bf4:	mov	r3, r4
   14bf8:	mov	r1, r2
   14bfc:	mov	r5, r0
   14c00:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14c04:	cmp	r0, #0
   14c08:	bne	14c4c <_start@@Base+0x1e04>
   14c0c:	mov	r2, r0
   14c10:	stm	sp, {r4, r6}
   14c14:	mov	r3, r4
   14c18:	mov	r1, r4
   14c1c:	mov	r0, r5
   14c20:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   14c24:	cmp	r0, #0
   14c28:	bne	14c4c <_start@@Base+0x1e04>
   14c2c:	ldr	r3, [pc, #32]	; 14c54 <_start@@Base+0x1e0c>
   14c30:	mov	r2, r0
   14c34:	str	r3, [sp, #4]
   14c38:	str	r4, [sp]
   14c3c:	mov	r3, r0
   14c40:	mov	r1, #2
   14c44:	mov	r0, r5
   14c48:	bl	1dfbc <flatcc_verify_table_as_nested_root@@Base>
   14c4c:	add	sp, sp, #8
   14c50:	pop	{r4, r5, r6, pc}
   14c54:	strdeq	r4, [r1], -r0
   14c58:	ldrb	r3, [r0, #12]
   14c5c:	sub	r3, r3, #1
   14c60:	cmp	r3, #3
   14c64:	ldrls	pc, [pc, r3, lsl #2]
   14c68:	b	14c9c <_start@@Base+0x1e54>
   14c6c:	andeq	r4, r1, ip, ror ip
   14c70:	andeq	r4, r1, r4, lsl #25
   14c74:	andeq	r4, r1, ip, lsl #25
   14c78:	muleq	r1, r4, ip
   14c7c:	ldr	r1, [pc, #32]	; 14ca4 <_start@@Base+0x1e5c>
   14c80:	b	1dc28 <flatcc_verify_union_table@@Base>
   14c84:	ldr	r1, [pc, #28]	; 14ca8 <_start@@Base+0x1e60>
   14c88:	b	14c80 <_start@@Base+0x1e38>
   14c8c:	ldr	r1, [pc, #24]	; 14cac <_start@@Base+0x1e64>
   14c90:	b	14c80 <_start@@Base+0x1e38>
   14c94:	ldr	r1, [pc, #20]	; 14cb0 <_start@@Base+0x1e68>
   14c98:	b	14c80 <_start@@Base+0x1e38>
   14c9c:	mov	r0, #0
   14ca0:	bx	lr
   14ca4:	strdeq	r4, [r1], -r0
   14ca8:	andeq	r4, r1, r4, ror r4
   14cac:	strdeq	r4, [r1], -r8
   14cb0:			; <UNDEFINED> instruction: 0x00014cb4
   14cb4:	mov	r2, #0
   14cb8:	push	{r4, lr}
   14cbc:	mov	r1, r2
   14cc0:	ldr	r3, [pc, #64]	; 14d08 <_start@@Base+0x1ec0>
   14cc4:	mov	r4, r0
   14cc8:	bl	1dad8 <flatcc_verify_table_field@@Base>
   14ccc:	subs	r2, r0, #0
   14cd0:	bne	14d00 <_start@@Base+0x1eb8>
   14cd4:	ldr	r3, [pc, #48]	; 14d0c <_start@@Base+0x1ec4>
   14cd8:	mov	r1, #1
   14cdc:	mov	r0, r4
   14ce0:	bl	1dad8 <flatcc_verify_table_field@@Base>
   14ce4:	subs	r2, r0, #0
   14ce8:	bne	14d00 <_start@@Base+0x1eb8>
   14cec:	mov	r0, r4
   14cf0:	ldr	r3, [pc, #24]	; 14d10 <_start@@Base+0x1ec8>
   14cf4:	mov	r1, #3
   14cf8:	pop	{r4, lr}
   14cfc:	b	1e1b4 <flatcc_verify_union_vector_field@@Base>
   14d00:	mov	r0, r2
   14d04:	pop	{r4, pc}
   14d08:	muleq	r1, r0, r7
   14d0c:	andeq	r4, r1, r4, lsl sp
   14d10:	andeq	r4, r1, r8, asr ip
   14d14:	push	{r4, lr}
   14d18:	mov	r2, #0
   14d1c:	ldr	r3, [pc, #116]	; 14d98 <_start@@Base+0x1f50>
   14d20:	mov	r1, #1
   14d24:	mov	r4, r0
   14d28:	bl	1e098 <flatcc_verify_union_field@@Base>
   14d2c:	subs	r2, r0, #0
   14d30:	bne	14d90 <_start@@Base+0x1f48>
   14d34:	ldr	r3, [pc, #92]	; 14d98 <_start@@Base+0x1f50>
   14d38:	mov	r1, #3
   14d3c:	mov	r0, r4
   14d40:	bl	1e098 <flatcc_verify_union_field@@Base>
   14d44:	subs	r2, r0, #0
   14d48:	bne	14d90 <_start@@Base+0x1f48>
   14d4c:	ldr	r3, [pc, #68]	; 14d98 <_start@@Base+0x1f50>
   14d50:	mov	r1, #5
   14d54:	mov	r0, r4
   14d58:	bl	1e098 <flatcc_verify_union_field@@Base>
   14d5c:	subs	r2, r0, #0
   14d60:	bne	14d90 <_start@@Base+0x1f48>
   14d64:	ldr	r3, [pc, #44]	; 14d98 <_start@@Base+0x1f50>
   14d68:	mov	r1, #7
   14d6c:	mov	r0, r4
   14d70:	bl	1e098 <flatcc_verify_union_field@@Base>
   14d74:	subs	r2, r0, #0
   14d78:	bne	14d90 <_start@@Base+0x1f48>
   14d7c:	mov	r0, r4
   14d80:	ldr	r3, [pc, #16]	; 14d98 <_start@@Base+0x1f50>
   14d84:	mov	r1, #9
   14d88:	pop	{r4, lr}
   14d8c:	b	1e1b4 <flatcc_verify_union_vector_field@@Base>
   14d90:	mov	r0, r2
   14d94:	pop	{r4, pc}
   14d98:	muleq	r1, ip, sp
   14d9c:	ldrb	r3, [r0, #12]
   14da0:	cmp	r3, #9
   14da4:	beq	14de8 <_start@@Base+0x1fa0>
   14da8:	bhi	14dc8 <_start@@Base+0x1f80>
   14dac:	cmp	r3, #2
   14db0:	beq	14de0 <_start@@Base+0x1f98>
   14db4:	cmp	r3, #8
   14db8:	moveq	r2, #2
   14dbc:	beq	14dec <_start@@Base+0x1fa4>
   14dc0:	mov	r0, #0
   14dc4:	bx	lr
   14dc8:	cmp	r3, #11
   14dcc:	beq	14ddc <_start@@Base+0x1f94>
   14dd0:	bcc	14de8 <_start@@Base+0x1fa0>
   14dd4:	cmp	r3, #255	; 0xff
   14dd8:	bne	14dc0 <_start@@Base+0x1f78>
   14ddc:	b	1dcac <flatcc_verify_union_string@@Base>
   14de0:	ldr	r1, [pc, #12]	; 14df4 <_start@@Base+0x1fac>
   14de4:	b	1dc28 <flatcc_verify_union_table@@Base>
   14de8:	mov	r2, #4
   14dec:	mov	r1, r2
   14df0:	b	1dc50 <flatcc_verify_union_struct@@Base>
   14df4:	strdeq	r3, [r1], -r4
   14df8:	push	{lr}		; (str lr, [sp, #-4]!)
   14dfc:	vpush	{d8-d9}
   14e00:	vsub.f64	d8, d1, d0
   14e04:	vldr	d9, [pc, #244]	; 14f00 <_start@@Base+0x20b8>
   14e08:	sub	sp, sp, #12
   14e0c:	str	r1, [sp, #4]
   14e10:	mov	r1, r0
   14e14:	ldr	r0, [pc, #260]	; 14f20 <_start@@Base+0x20d8>
   14e18:	bl	129c4 <printf@plt>
   14e1c:	vmov	r2, r3, d8
   14e20:	ldr	r0, [pc, #252]	; 14f24 <_start@@Base+0x20dc>
   14e24:	bl	129c4 <printf@plt>
   14e28:	ldr	r1, [pc, #248]	; 14f28 <_start@@Base+0x20e0>
   14e2c:	ldr	r0, [pc, #248]	; 14f2c <_start@@Base+0x20e4>
   14e30:	bl	129c4 <printf@plt>
   14e34:	ldr	r1, [sp, #4]
   14e38:	ldr	r0, [pc, #240]	; 14f30 <_start@@Base+0x20e8>
   14e3c:	bl	129c4 <printf@plt>
   14e40:	vldr	s15, [sp, #4]
   14e44:	ldr	r0, [pc, #232]	; 14f34 <_start@@Base+0x20ec>
   14e48:	vcvt.f64.u32	d7, s15
   14e4c:	vmul.f64	d7, d7, d9
   14e50:	vdiv.f64	d6, d7, d9
   14e54:	vdiv.f64	d7, d6, d8
   14e58:	vmov	r2, r3, d7
   14e5c:	bl	129c4 <printf@plt>
   14e60:	vdiv.f64	d7, d9, d8
   14e64:	ldr	r0, [pc, #204]	; 14f38 <_start@@Base+0x20f0>
   14e68:	vmov	r2, r3, d7
   14e6c:	bl	129c4 <printf@plt>
   14e70:	vldr	d7, [pc, #144]	; 14f08 <_start@@Base+0x20c0>
   14e74:	ldr	r1, [pc, #192]	; 14f3c <_start@@Base+0x20f4>
   14e78:	ldr	r0, [pc, #192]	; 14f40 <_start@@Base+0x20f8>
   14e7c:	vdiv.f64	d6, d7, d8
   14e80:	vmov	r2, r3, d6
   14e84:	bl	129c4 <printf@plt>
   14e88:	vldr	d6, [pc, #128]	; 14f10 <_start@@Base+0x20c8>
   14e8c:	vldr	d5, [pc, #132]	; 14f18 <_start@@Base+0x20d0>
   14e90:	vmul.f64	d8, d8, d6
   14e94:	vdiv.f64	d7, d8, d9
   14e98:	vcmpe.f64	d7, d5
   14e9c:	vmrs	APSR_nzcv, fpscr
   14ea0:	vmovmi	r2, r3, d7
   14ea4:	ldrmi	r0, [pc, #152]	; 14f44 <_start@@Base+0x20fc>
   14ea8:	bmi	14ec4 <_start@@Base+0x207c>
   14eac:	vcmpe.f64	d7, d9
   14eb0:	vmrs	APSR_nzcv, fpscr
   14eb4:	bpl	14ed8 <_start@@Base+0x2090>
   14eb8:	vdiv.f64	d6, d7, d5
   14ebc:	ldr	r0, [pc, #132]	; 14f48 <_start@@Base+0x2100>
   14ec0:	vmov	r2, r3, d6
   14ec4:	bl	129c4 <printf@plt>
   14ec8:	mov	r0, #0
   14ecc:	add	sp, sp, #12
   14ed0:	vpop	{d8-d9}
   14ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed8:	vcmpe.f64	d7, d6
   14edc:	vmrs	APSR_nzcv, fpscr
   14ee0:	vdivmi.f64	d6, d7, d9
   14ee4:	ldrmi	r0, [pc, #96]	; 14f4c <_start@@Base+0x2104>
   14ee8:	ldrpl	r0, [pc, #96]	; 14f50 <_start@@Base+0x2108>
   14eec:	vdivpl.f64	d5, d7, d6
   14ef0:	vmovmi	r2, r3, d6
   14ef4:	vmovpl	r2, r3, d5
   14ef8:	b	14ec4 <_start@@Base+0x207c>
   14efc:	nop			; (mov r0, r0)
   14f00:	andeq	r0, r0, r0
   14f04:	smlawbmi	lr, r0, r4, r8
   14f08:	andeq	r0, r0, r0
   14f0c:	svccc	0x00f00000	; IMB
   14f10:	andeq	r0, r0, r0
   14f14:	bicmi	ip, sp, r5, ror #26
   14f18:	andeq	r0, r0, r0
   14f1c:	addmi	r4, pc, r0
   14f20:	andeq	pc, r1, r3, ror r1	; <UNPREDICTABLE>
   14f24:	andeq	pc, r1, r2, lsl #3
   14f28:	andeq	r4, pc, r0, asr #4
   14f2c:	muleq	r1, sl, r1
   14f30:	andeq	pc, r1, sl, lsr #3
   14f34:			; <UNDEFINED> instruction: 0x0001f1bd
   14f38:	ldrdeq	pc, [r1], -r5
   14f3c:	strdeq	pc, [r1], -r6
   14f40:	strdeq	pc, [r1], -lr
   14f44:	andeq	pc, r1, r2, lsr #4
   14f48:	andeq	pc, r1, sl, lsr r2	; <UNPREDICTABLE>
   14f4c:	andeq	pc, r1, r2, asr r2	; <UNPREDICTABLE>
   14f50:	andeq	pc, r1, sl, ror #4
   14f54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f58:	subs	r5, r0, #0
   14f5c:	beq	14fe8 <_start@@Base+0x21a0>
   14f60:	ldr	r4, [r5, #-4]
   14f64:	cmp	r4, #0
   14f68:	beq	14fe8 <_start@@Base+0x21a0>
   14f6c:	mov	r7, r1
   14f70:	sub	r4, r4, #1
   14f74:	mov	r8, #0
   14f78:	mov	r9, #5
   14f7c:	cmp	r4, r8
   14f80:	bhi	14fb4 <_start@@Base+0x216c>
   14f84:	bne	14fe8 <_start@@Base+0x21a0>
   14f88:	mov	r1, r4
   14f8c:	mov	r0, r5
   14f90:	bl	13a8c <_start@@Base+0xc44>
   14f94:	bl	13b90 <_start@@Base+0xd48>
   14f98:	mov	r2, #5
   14f9c:	mov	r1, r7
   14fa0:	bl	133e4 <_start@@Base+0x59c>
   14fa4:	cmp	r0, #0
   14fa8:	mvnne	r4, #0
   14fac:	mov	r0, r4
   14fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fb4:	sub	r6, r4, r8
   14fb8:	mov	r0, r5
   14fbc:	add	r6, r8, r6, lsr #1
   14fc0:	mov	r1, r6
   14fc4:	bl	13a8c <_start@@Base+0xc44>
   14fc8:	bl	13b90 <_start@@Base+0xd48>
   14fcc:	mov	r2, r9
   14fd0:	mov	r1, r7
   14fd4:	bl	133e4 <_start@@Base+0x59c>
   14fd8:	cmp	r0, #0
   14fdc:	addlt	r8, r6, #1
   14fe0:	movge	r4, r6
   14fe4:	b	14f7c <_start@@Base+0x2134>
   14fe8:	mvn	r4, #0
   14fec:	b	14fac <_start@@Base+0x2164>
   14ff0:	mov	r0, #0
   14ff4:	bx	lr
   14ff8:	mov	r0, #0
   14ffc:	bx	lr
   15000:	push	{r4, lr}
   15004:	mov	r4, r0
   15008:	bl	142a4 <_start@@Base+0x145c>
   1500c:	subs	r1, r0, #0
   15010:	popeq	{r4, pc}
   15014:	mov	r0, r4
   15018:	pop	{r4, lr}
   1501c:	b	1b5d0 <flatcc_builder_offset_vector_push@@Base>
   15020:	mov	r2, #4
   15024:	push	{r4, r5, r6, lr}
   15028:	mov	r5, r1
   1502c:	mov	r1, r2
   15030:	mov	r4, r0
   15034:	bl	1b3b8 <flatcc_builder_start_struct@@Base>
   15038:	subs	r3, r0, #0
   1503c:	popeq	{r4, r5, r6, pc}
   15040:	str	r5, [r3]
   15044:	mov	r0, r4
   15048:	pop	{r4, r5, r6, lr}
   1504c:	b	1b40c <flatcc_builder_end_struct@@Base>
   15050:	mvn	r3, #0
   15054:	push	{r0, r1, r2, r4, r5, lr}
   15058:	mov	r5, r0
   1505c:	str	r3, [sp, #4]
   15060:	mov	r3, #1
   15064:	str	r3, [sp]
   15068:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   1506c:	subs	r4, r0, #0
   15070:	bne	15080 <_start@@Base+0x2238>
   15074:	mvn	r0, #0
   15078:	add	sp, sp, #12
   1507c:	pop	{r4, r5, pc}
   15080:	mov	r1, #5
   15084:	mov	r0, r5
   15088:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   1508c:	cmp	r0, #0
   15090:	beq	15074 <_start@@Base+0x222c>
   15094:	str	r4, [r0]
   15098:	mov	r0, #0
   1509c:	b	15078 <_start@@Base+0x2230>
   150a0:	push	{r4, r5, r6, lr}
   150a4:	mov	r5, r0
   150a8:	bl	1c360 <flatcc_builder_end_offset_vector@@Base>
   150ac:	subs	r4, r0, #0
   150b0:	bne	150bc <_start@@Base+0x2274>
   150b4:	mvn	r0, #0
   150b8:	pop	{r4, r5, r6, pc}
   150bc:	mov	r1, #11
   150c0:	mov	r0, r5
   150c4:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   150c8:	cmp	r0, #0
   150cc:	beq	150b4 <_start@@Base+0x226c>
   150d0:	str	r4, [r0]
   150d4:	mov	r0, #0
   150d8:	pop	{r4, r5, r6, pc}
   150dc:	push	{r4, r5, r6, lr}
   150e0:	mov	r4, r0
   150e4:	bl	142a4 <_start@@Base+0x145c>
   150e8:	mov	r1, r0
   150ec:	mov	r0, r4
   150f0:	bl	1b2fc <flatcc_builder_end_buffer@@Base>
   150f4:	subs	r5, r0, #0
   150f8:	bne	15104 <_start@@Base+0x22bc>
   150fc:	mvn	r0, #0
   15100:	pop	{r4, r5, r6, pc}
   15104:	mov	r1, #13
   15108:	mov	r0, r4
   1510c:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   15110:	cmp	r0, #0
   15114:	beq	150fc <_start@@Base+0x22b4>
   15118:	str	r5, [r0]
   1511c:	mov	r0, #0
   15120:	pop	{r4, r5, r6, pc}
   15124:	push	{r0, r1, r4, lr}
   15128:	mov	r2, #16
   1512c:	mov	r1, #32
   15130:	mov	r4, r0
   15134:	bl	1b3b8 <flatcc_builder_start_struct@@Base>
   15138:	cmp	r0, #0
   1513c:	beq	15184 <_start@@Base+0x233c>
   15140:	mov	r3, #1065353216	; 0x3f800000
   15144:	str	r3, [r0]
   15148:	mov	r3, #1073741824	; 0x40000000
   1514c:	str	r3, [r0, #4]
   15150:	ldr	r3, [pc, #84]	; 151ac <_start@@Base+0x2364>
   15154:	ldr	r2, [pc, #84]	; 151b0 <_start@@Base+0x2368>
   15158:	str	r3, [r0, #8]
   1515c:	ldr	r3, [pc, #80]	; 151b4 <_start@@Base+0x236c>
   15160:	strd	r2, [r0, #16]
   15164:	mov	r3, #8
   15168:	strb	r3, [r0, #24]
   1516c:	ldr	r3, [pc, #68]	; 151b8 <_start@@Base+0x2370>
   15170:	strh	r3, [r0, #26]
   15174:	mvn	r3, #16
   15178:	strb	r3, [r0, #28]
   1517c:	mov	r0, r4
   15180:	bl	1b40c <flatcc_builder_end_struct@@Base>
   15184:	mov	r2, #0
   15188:	mov	r3, #16
   1518c:	str	r3, [sp]
   15190:	str	r2, [sp, #4]
   15194:	mov	r3, r0
   15198:	ldr	r1, [pc, #28]	; 151bc <_start@@Base+0x2374>
   1519c:	mov	r0, r4
   151a0:	bl	1afdc <flatcc_builder_create_buffer@@Base>
   151a4:	add	sp, sp, #8
   151a8:	pop	{r4, pc}
   151ac:	submi	r0, r0, r0
   151b0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   151b4:	andsmi	ip, r0, ip, asr #25
   151b8:	andeq	r0, r0, sl, lsr #21
   151bc:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   151c0:	mov	r3, #8
   151c4:	push	{r4, lr}
   151c8:	mov	r2, r3
   151cc:	mov	r1, #0
   151d0:	mov	r4, r0
   151d4:	bl	1d934 <flatcc_verify_field@@Base>
   151d8:	cmp	r0, #0
   151dc:	popne	{r4, pc}
   151e0:	mov	r3, #4
   151e4:	mov	r0, r4
   151e8:	mov	r2, r3
   151ec:	mov	r1, #1
   151f0:	pop	{r4, lr}
   151f4:	b	1d934 <flatcc_verify_field@@Base>

000151f8 <verify_empty_monster@@Base>:
   151f8:	push	{r4, r5, r6, r7, r8, lr}
   151fc:	mov	r4, r0
   15200:	ldr	r1, [pc, #220]	; 152e4 <verify_empty_monster@@Base+0xec>
   15204:	bl	12fb8 <_start@@Base+0x170>
   15208:	ldr	r1, [pc, #216]	; 152e8 <verify_empty_monster@@Base+0xf0>
   1520c:	mov	r5, r0
   15210:	mov	r0, r4
   15214:	bl	12fb8 <_start@@Base+0x170>
   15218:	mov	r1, #0
   1521c:	mov	r8, r0
   15220:	mov	r0, r4
   15224:	bl	12fb8 <_start@@Base+0x170>
   15228:	ldr	r1, [pc, #188]	; 152ec <verify_empty_monster@@Base+0xf4>
   1522c:	mov	r7, r0
   15230:	mov	r0, r4
   15234:	bl	12fb8 <_start@@Base+0x170>
   15238:	mov	r6, r0
   1523c:	mov	r0, r4
   15240:	bl	12fe4 <_start@@Base+0x19c>
   15244:	cmp	r5, #0
   15248:	ldreq	r0, [pc, #160]	; 152f0 <verify_empty_monster@@Base+0xf8>
   1524c:	beq	152dc <verify_empty_monster@@Base+0xe4>
   15250:	cmp	r8, #0
   15254:	ldrne	r0, [pc, #152]	; 152f4 <verify_empty_monster@@Base+0xfc>
   15258:	bne	152dc <verify_empty_monster@@Base+0xe4>
   1525c:	cmp	r5, r7
   15260:	ldrne	r0, [pc, #144]	; 152f8 <verify_empty_monster@@Base+0x100>
   15264:	bne	152dc <verify_empty_monster@@Base+0xe4>
   15268:	cmp	r5, r6
   1526c:	ldrne	r0, [pc, #136]	; 152fc <verify_empty_monster@@Base+0x104>
   15270:	bne	15280 <verify_empty_monster@@Base+0x88>
   15274:	cmp	r5, r0
   15278:	beq	15290 <verify_empty_monster@@Base+0x98>
   1527c:	ldr	r0, [pc, #124]	; 15300 <verify_empty_monster@@Base+0x108>
   15280:	bl	129c4 <printf@plt>
   15284:	mvn	r4, #0
   15288:	mov	r0, r4
   1528c:	pop	{r4, r5, r6, r7, r8, pc}
   15290:	bl	1349c <_start@@Base+0x654>
   15294:	cmp	r0, #100	; 0x64
   15298:	ldrne	r0, [pc, #100]	; 15304 <verify_empty_monster@@Base+0x10c>
   1529c:	bne	152dc <verify_empty_monster@@Base+0xe4>
   152a0:	mov	r0, r5
   152a4:	bl	134f8 <_start@@Base+0x6b0>
   152a8:	cmp	r0, #0
   152ac:	ldrne	r0, [pc, #84]	; 15308 <verify_empty_monster@@Base+0x110>
   152b0:	bne	152dc <verify_empty_monster@@Base+0xe4>
   152b4:	mov	r0, r5
   152b8:	bl	1354c <_start@@Base+0x704>
   152bc:	subs	r4, r0, #0
   152c0:	ldrne	r0, [pc, #68]	; 1530c <verify_empty_monster@@Base+0x114>
   152c4:	bne	152dc <verify_empty_monster@@Base+0xe4>
   152c8:	mov	r0, r5
   152cc:	bl	1359c <_start@@Base+0x754>
   152d0:	cmp	r0, #0
   152d4:	beq	15288 <verify_empty_monster@@Base+0x90>
   152d8:	ldr	r0, [pc, #48]	; 15310 <verify_empty_monster@@Base+0x118>
   152dc:	bl	12a0c <puts@plt>
   152e0:	b	15284 <verify_empty_monster@@Base+0x8c>
   152e4:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   152e8:	andeq	pc, r1, r1, lsl #5
   152ec:	andeq	pc, r1, r6, lsl #5
   152f0:	andeq	pc, r1, ip, lsl #5
   152f4:	andeq	pc, r1, r2, lsr #5
   152f8:	andeq	pc, r1, pc, asr #5
   152fc:	andeq	pc, r1, r5, lsl #6
   15300:	andeq	pc, r1, r8, lsr r3	; <UNPREDICTABLE>
   15304:	andeq	pc, r1, r3, ror #6
   15308:	andeq	pc, r1, r5, lsl #7
   1530c:	andeq	pc, r1, r2, lsr #7
   15310:			; <UNDEFINED> instruction: 0x0001f3bd

00015314 <test_enums@@Base>:
   15314:	mov	r0, #0
   15318:	bx	lr

0001531c <test_type_aliases@@Base>:
   1531c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15320:	mov	r4, r0
   15324:	mvn	r7, #0
   15328:	bl	1acd8 <flatcc_builder_reset@@Base>
   1532c:	mov	r3, #1
   15330:	mov	r2, #0
   15334:	mov	r1, r2
   15338:	stm	sp, {r3, r7}
   1533c:	mov	r0, r4
   15340:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   15344:	mov	r5, #8
   15348:	mov	r2, #0
   1534c:	mvn	r3, #-536870912	; 0xe0000000
   15350:	mov	r1, r2
   15354:	str	r3, [sp, #4]
   15358:	str	r5, [sp]
   1535c:	mov	r3, r5
   15360:	mov	r8, r0
   15364:	mov	r0, r4
   15368:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   1536c:	ldr	r1, [pc, #1072]	; 157a4 <test_type_aliases@@Base+0x488>
   15370:	mov	r6, r0
   15374:	mov	r0, r4
   15378:	bl	130d8 <_start@@Base+0x290>
   1537c:	cmp	r0, #0
   15380:	bne	153a4 <test_type_aliases@@Base+0x88>
   15384:	mov	r1, #12
   15388:	mov	r0, r4
   1538c:	bl	1ba60 <flatcc_builder_start_table@@Base>
   15390:	cmp	r0, #0
   15394:	beq	1540c <test_type_aliases@@Base+0xf0>
   15398:	mov	r1, #0
   1539c:	mov	r0, r4
   153a0:	bl	1b2fc <flatcc_builder_end_buffer@@Base>
   153a4:	add	r1, sp, #12
   153a8:	mov	r0, r4
   153ac:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   153b0:	ldr	r3, [pc, #1008]	; 157a8 <test_type_aliases@@Base+0x48c>
   153b4:	ldr	r2, [pc, #1000]	; 157a4 <test_type_aliases@@Base+0x488>
   153b8:	ldr	r1, [sp, #12]
   153bc:	mov	r4, r0
   153c0:	bl	1de88 <flatcc_verify_table_as_root@@Base>
   153c4:	subs	r5, r0, #0
   153c8:	beq	155ec <test_type_aliases@@Base+0x2d0>
   153cc:	ldr	r3, [pc, #984]	; 157ac <test_type_aliases@@Base+0x490>
   153d0:	mov	r1, r4
   153d4:	ldr	r2, [sp, #12]
   153d8:	ldr	r3, [r3]
   153dc:	ldr	r0, [pc, #972]	; 157b0 <test_type_aliases@@Base+0x494>
   153e0:	bl	13214 <_start@@Base+0x3cc>
   153e4:	mov	r0, r5
   153e8:	bl	1d918 <flatcc_verify_error_string@@Base>
   153ec:	mov	r1, r0
   153f0:	ldr	r0, [pc, #956]	; 157b4 <test_type_aliases@@Base+0x498>
   153f4:	bl	129c4 <printf@plt>
   153f8:	mov	r0, r4
   153fc:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   15400:	mov	r0, r5
   15404:	add	sp, sp, #16
   15408:	pop	{r4, r5, r6, r7, r8, pc}
   1540c:	mov	r3, r5
   15410:	mov	r2, r5
   15414:	mov	r1, #6
   15418:	mov	r0, r4
   1541c:	bl	1ca20 <flatcc_builder_table_add@@Base>
   15420:	cmp	r0, #0
   15424:	beq	15398 <test_type_aliases@@Base+0x7c>
   15428:	mov	r2, #0
   1542c:	mov	r3, #-2147483648	; 0x80000000
   15430:	mov	r1, #7
   15434:	strd	r2, [r0]
   15438:	mov	r3, r5
   1543c:	mov	r2, r5
   15440:	mov	r0, r4
   15444:	bl	1ca20 <flatcc_builder_table_add@@Base>
   15448:	cmp	r0, #0
   1544c:	beq	15398 <test_type_aliases@@Base+0x7c>
   15450:	mvn	r2, #0
   15454:	mvn	r3, #0
   15458:	mov	r1, #9
   1545c:	strd	r2, [r0]
   15460:	mov	r3, r5
   15464:	mov	r2, r5
   15468:	mov	r0, r4
   1546c:	bl	1ca20 <flatcc_builder_table_add@@Base>
   15470:	cmp	r0, #0
   15474:	beq	15398 <test_type_aliases@@Base+0x7c>
   15478:	ldr	r2, [pc, #824]	; 157b8 <test_type_aliases@@Base+0x49c>
   1547c:	ldr	r3, [pc, #824]	; 157bc <test_type_aliases@@Base+0x4a0>
   15480:	strd	r2, [r0]
   15484:	mov	r3, #4
   15488:	mov	r2, r3
   1548c:	mov	r1, r3
   15490:	mov	r0, r4
   15494:	bl	1ca20 <flatcc_builder_table_add@@Base>
   15498:	cmp	r0, #0
   1549c:	beq	15398 <test_type_aliases@@Base+0x7c>
   154a0:	mov	r3, #-2147483648	; 0x80000000
   154a4:	str	r3, [r0]
   154a8:	mov	r3, #4
   154ac:	mov	r2, r3
   154b0:	mov	r1, #5
   154b4:	mov	r0, r4
   154b8:	bl	1ca20 <flatcc_builder_table_add@@Base>
   154bc:	cmp	r0, #0
   154c0:	beq	15398 <test_type_aliases@@Base+0x7c>
   154c4:	mov	r3, #4
   154c8:	str	r7, [r0]
   154cc:	mov	r2, r3
   154d0:	mov	r1, r5
   154d4:	mov	r0, r4
   154d8:	bl	1ca20 <flatcc_builder_table_add@@Base>
   154dc:	cmp	r0, #0
   154e0:	beq	15398 <test_type_aliases@@Base+0x7c>
   154e4:	ldr	r3, [pc, #724]	; 157c0 <test_type_aliases@@Base+0x4a4>
   154e8:	mov	r1, r8
   154ec:	str	r3, [r0]
   154f0:	mov	r0, r4
   154f4:	bl	13120 <_start@@Base+0x2d8>
   154f8:	cmp	r0, #0
   154fc:	bne	15398 <test_type_aliases@@Base+0x7c>
   15500:	cmp	r6, #0
   15504:	beq	15398 <test_type_aliases@@Base+0x7c>
   15508:	mov	r1, #11
   1550c:	mov	r0, r4
   15510:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   15514:	cmp	r0, #0
   15518:	beq	15398 <test_type_aliases@@Base+0x7c>
   1551c:	mov	r3, #2
   15520:	str	r6, [r0]
   15524:	mov	r2, r3
   15528:	mov	r1, r3
   1552c:	mov	r0, r4
   15530:	bl	1ca20 <flatcc_builder_table_add@@Base>
   15534:	cmp	r0, #0
   15538:	beq	15398 <test_type_aliases@@Base+0x7c>
   1553c:	mov	r3, #32768	; 0x8000
   15540:	strh	r3, [r0]
   15544:	mov	r3, #2
   15548:	mov	r2, r3
   1554c:	mov	r1, #3
   15550:	mov	r0, r4
   15554:	bl	1ca20 <flatcc_builder_table_add@@Base>
   15558:	cmp	r0, #0
   1555c:	beq	15398 <test_type_aliases@@Base+0x7c>
   15560:	mov	r3, #1
   15564:	mvn	r5, #0
   15568:	strh	r5, [r0]
   1556c:	mov	r2, r3
   15570:	mov	r1, #0
   15574:	mov	r0, r4
   15578:	bl	1ca20 <flatcc_builder_table_add@@Base>
   1557c:	cmp	r0, #0
   15580:	beq	15398 <test_type_aliases@@Base+0x7c>
   15584:	mvn	r3, #127	; 0x7f
   15588:	strb	r3, [r0]
   1558c:	mov	r3, #1
   15590:	mov	r2, r3
   15594:	mov	r1, r3
   15598:	mov	r0, r4
   1559c:	bl	1ca20 <flatcc_builder_table_add@@Base>
   155a0:	cmp	r0, #0
   155a4:	beq	15398 <test_type_aliases@@Base+0x7c>
   155a8:	strb	r5, [r0]
   155ac:	ldr	r5, [pc, #528]	; 157c4 <test_type_aliases@@Base+0x4a8>
   155b0:	mov	r2, #0
   155b4:	add	r1, r5, #8
   155b8:	mov	r0, r4
   155bc:	bl	1c01c <flatcc_builder_check_required@@Base>
   155c0:	cmp	r0, #0
   155c4:	bne	155dc <test_type_aliases@@Base+0x2c0>
   155c8:	ldr	r1, [pc, #504]	; 157c8 <test_type_aliases@@Base+0x4ac>
   155cc:	ldr	r0, [pc, #504]	; 157cc <test_type_aliases@@Base+0x4b0>
   155d0:	add	r3, r5, #10
   155d4:	mov	r2, #237	; 0xed
   155d8:	bl	12ab4 <__assert_fail@plt>
   155dc:	mov	r0, r4
   155e0:	bl	1c09c <flatcc_builder_end_table@@Base>
   155e4:	mov	r1, r0
   155e8:	b	1539c <test_type_aliases@@Base+0x80>
   155ec:	cmp	r4, #0
   155f0:	bne	15608 <test_type_aliases@@Base+0x2ec>
   155f4:	ldr	r3, [pc, #468]	; 157d0 <test_type_aliases@@Base+0x4b4>
   155f8:	ldr	r2, [pc, #468]	; 157d4 <test_type_aliases@@Base+0x4b8>
   155fc:	ldr	r1, [pc, #468]	; 157d8 <test_type_aliases@@Base+0x4bc>
   15600:	ldr	r0, [pc, #468]	; 157dc <test_type_aliases@@Base+0x4c0>
   15604:	b	155d8 <test_type_aliases@@Base+0x2bc>
   15608:	ldr	r1, [pc, #404]	; 157a4 <test_type_aliases@@Base+0x488>
   1560c:	mov	r0, r4
   15610:	bl	12f70 <_start@@Base+0x128>
   15614:	cmp	r0, #0
   15618:	beq	155f4 <test_type_aliases@@Base+0x2d8>
   1561c:	ldr	r2, [r4]
   15620:	adds	r3, r4, r2
   15624:	beq	155f4 <test_type_aliases@@Base+0x2d8>
   15628:	ldr	r2, [r4, r2]
   1562c:	sub	r2, r3, r2
   15630:	ldrh	ip, [r2]
   15634:	cmp	ip, #5
   15638:	bls	15788 <test_type_aliases@@Base+0x46c>
   1563c:	ldrh	r1, [r2, #4]
   15640:	cmp	r1, #0
   15644:	beq	15788 <test_type_aliases@@Base+0x46c>
   15648:	ldrsb	r1, [r3, r1]
   1564c:	cmn	r1, #128	; 0x80
   15650:	bne	15788 <test_type_aliases@@Base+0x46c>
   15654:	cmp	ip, #9
   15658:	bls	15788 <test_type_aliases@@Base+0x46c>
   1565c:	ldrh	r1, [r2, #8]
   15660:	cmp	r1, #0
   15664:	beq	15788 <test_type_aliases@@Base+0x46c>
   15668:	ldrsh	r1, [r3, r1]
   1566c:	cmn	r1, #32768	; 0x8000
   15670:	bne	15788 <test_type_aliases@@Base+0x46c>
   15674:	cmp	ip, #13
   15678:	bls	15788 <test_type_aliases@@Base+0x46c>
   1567c:	ldrh	r1, [r2, #12]
   15680:	cmp	r1, #0
   15684:	beq	15788 <test_type_aliases@@Base+0x46c>
   15688:	ldr	r1, [r3, r1]
   1568c:	cmp	r1, #-2147483648	; 0x80000000
   15690:	bne	15788 <test_type_aliases@@Base+0x46c>
   15694:	cmp	ip, #17
   15698:	bls	15788 <test_type_aliases@@Base+0x46c>
   1569c:	ldrh	r1, [r2, #16]
   156a0:	cmp	r1, #0
   156a4:	beq	15788 <test_type_aliases@@Base+0x46c>
   156a8:	ldrd	r0, [r1, r3]
   156ac:	cmp	r1, #-2147483648	; 0x80000000
   156b0:	cmpeq	r0, #0
   156b4:	bne	15788 <test_type_aliases@@Base+0x46c>
   156b8:	ldrh	r1, [r2, #6]
   156bc:	cmp	r1, #0
   156c0:	beq	15788 <test_type_aliases@@Base+0x46c>
   156c4:	ldrb	r1, [r3, r1]
   156c8:	cmp	r1, #255	; 0xff
   156cc:	bne	15788 <test_type_aliases@@Base+0x46c>
   156d0:	ldrh	r1, [r2, #10]
   156d4:	cmp	r1, #0
   156d8:	beq	15788 <test_type_aliases@@Base+0x46c>
   156dc:	ldrh	r0, [r3, r1]
   156e0:	ldr	r1, [pc, #248]	; 157e0 <test_type_aliases@@Base+0x4c4>
   156e4:	cmp	r0, r1
   156e8:	bne	15788 <test_type_aliases@@Base+0x46c>
   156ec:	ldrh	r1, [r2, #14]
   156f0:	cmp	r1, #0
   156f4:	beq	15788 <test_type_aliases@@Base+0x46c>
   156f8:	ldr	r1, [r3, r1]
   156fc:	cmn	r1, #1
   15700:	bne	15788 <test_type_aliases@@Base+0x46c>
   15704:	cmp	ip, #19
   15708:	bls	15788 <test_type_aliases@@Base+0x46c>
   1570c:	ldrh	r1, [r2, #18]
   15710:	cmp	r1, #0
   15714:	beq	15788 <test_type_aliases@@Base+0x46c>
   15718:	ldrd	r6, [r3, r1]
   1571c:	mvn	r1, #0
   15720:	mvn	r0, #0
   15724:	cmp	r7, r1
   15728:	cmpeq	r6, r0
   1572c:	bne	15788 <test_type_aliases@@Base+0x46c>
   15730:	cmp	ip, #21
   15734:	bls	15788 <test_type_aliases@@Base+0x46c>
   15738:	ldrh	r1, [r2, #20]
   1573c:	cmp	r1, #0
   15740:	beq	15788 <test_type_aliases@@Base+0x46c>
   15744:	add	r1, r3, r1
   15748:	vldr	s15, [pc, #80]	; 157a0 <test_type_aliases@@Base+0x484>
   1574c:	vldr	s14, [r1]
   15750:	vcmp.f32	s14, s15
   15754:	vmrs	APSR_nzcv, fpscr
   15758:	bne	15788 <test_type_aliases@@Base+0x46c>
   1575c:	cmp	ip, #23
   15760:	bls	15788 <test_type_aliases@@Base+0x46c>
   15764:	ldrh	r2, [r2, #22]
   15768:	cmp	r2, #0
   1576c:	beq	15788 <test_type_aliases@@Base+0x46c>
   15770:	add	r3, r3, r2
   15774:	vldr	d7, [pc, #28]	; 15798 <test_type_aliases@@Base+0x47c>
   15778:	vldr	d6, [r3]
   1577c:	vcmp.f64	d6, d7
   15780:	vmrs	APSR_nzcv, fpscr
   15784:	beq	153f8 <test_type_aliases@@Base+0xdc>
   15788:	ldr	r0, [pc, #84]	; 157e4 <test_type_aliases@@Base+0x4c8>
   1578c:	bl	12a0c <puts@plt>
   15790:	mvn	r5, #0
   15794:	b	153f8 <test_type_aliases@@Base+0xdc>
   15798:	strbtvs	r6, [r6], -r6, ror #12
   1579c:	andmi	r6, r2, r6, ror #12
   157a0:	andsmi	r3, r3, r3, lsr r3
   157a4:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   157a8:	andeq	r4, r1, r4, ror #9
   157ac:	andeq	r3, r3, r8, ror r0
   157b0:	andeq	pc, r1, fp, lsl #9
   157b4:	muleq	r1, lr, r4
   157b8:	strbtvs	r6, [r6], -r6, ror #12
   157bc:	andmi	r6, r2, r6, ror #12
   157c0:	andsmi	r3, r3, r3, lsr r3
   157c4:	andeq	lr, r1, ip, asr sl
   157c8:	andeq	lr, r1, r8, lsl #29
   157cc:	ldrdeq	pc, [r1], -sp
   157d0:	andeq	lr, r1, r5, lsl #21
   157d4:	andeq	r0, r0, sp, ror #5
   157d8:	andeq	lr, r1, r3, lsl #26
   157dc:	andeq	lr, r1, r5, ror #26
   157e0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   157e4:	andeq	pc, r1, sl, asr #9

000157e8 <test_empty_monster@@Base>:
   157e8:	push	{r0, r1, r2, r4, r5, lr}
   157ec:	mov	r4, r0
   157f0:	bl	1acd8 <flatcc_builder_reset@@Base>
   157f4:	ldr	r1, [pc, #208]	; 158cc <test_empty_monster@@Base+0xe4>
   157f8:	mov	r0, r4
   157fc:	bl	130d8 <_start@@Base+0x290>
   15800:	mov	r0, r4
   15804:	bl	130e4 <_start@@Base+0x29c>
   15808:	ldr	r1, [pc, #192]	; 158d0 <test_empty_monster@@Base+0xe8>
   1580c:	mov	r0, r4
   15810:	bl	13324 <_start@@Base+0x4dc>
   15814:	mov	r0, r4
   15818:	bl	142a4 <_start@@Base+0x145c>
   1581c:	mov	r1, r0
   15820:	mov	r0, r4
   15824:	bl	1b2fc <flatcc_builder_end_buffer@@Base>
   15828:	add	r1, sp, #4
   1582c:	mov	r0, r4
   15830:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   15834:	ldr	r3, [pc, #152]	; 158d4 <test_empty_monster@@Base+0xec>
   15838:	ldr	r2, [sp, #4]
   1583c:	ldr	r3, [r3]
   15840:	mov	r1, r0
   15844:	mov	r4, r0
   15848:	ldr	r0, [pc, #136]	; 158d8 <test_empty_monster@@Base+0xf0>
   1584c:	bl	13214 <_start@@Base+0x3cc>
   15850:	mov	r0, r4
   15854:	bl	151f8 <verify_empty_monster@@Base>
   15858:	subs	r5, r0, #0
   1585c:	bne	158c0 <test_empty_monster@@Base+0xd8>
   15860:	ldr	r3, [pc, #116]	; 158dc <test_empty_monster@@Base+0xf4>
   15864:	ldr	r2, [pc, #96]	; 158cc <test_empty_monster@@Base+0xe4>
   15868:	ldr	r1, [sp, #4]
   1586c:	mov	r0, r4
   15870:	bl	1de88 <flatcc_verify_table_as_root@@Base>
   15874:	subs	r5, r0, #0
   15878:	beq	1589c <test_empty_monster@@Base+0xb4>
   1587c:	bl	1d918 <flatcc_verify_error_string@@Base>
   15880:	mov	r1, r0
   15884:	ldr	r0, [pc, #84]	; 158e0 <test_empty_monster@@Base+0xf8>
   15888:	bl	129c4 <printf@plt>
   1588c:	mvn	r5, #0
   15890:	mov	r0, r5
   15894:	add	sp, sp, #12
   15898:	pop	{r4, r5, pc}
   1589c:	ldr	r1, [sp, #4]
   158a0:	mov	r0, r4
   158a4:	sub	r1, r1, #1
   158a8:	bl	131e0 <_start@@Base+0x398>
   158ac:	cmp	r0, #0
   158b0:	bne	158c0 <test_empty_monster@@Base+0xd8>
   158b4:	ldr	r0, [pc, #40]	; 158e4 <test_empty_monster@@Base+0xfc>
   158b8:	bl	12a0c <puts@plt>
   158bc:	b	1588c <test_empty_monster@@Base+0xa4>
   158c0:	mov	r0, r4
   158c4:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   158c8:	b	15890 <test_empty_monster@@Base+0xa8>
   158cc:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   158d0:	strdeq	pc, [r1], -r9
   158d4:	andeq	r3, r3, r8, ror r0
   158d8:	andeq	pc, r1, r3, lsl #10
   158dc:	strdeq	r4, [r1], -r0
   158e0:	andeq	pc, r1, r7, lsl r5	; <UNPREDICTABLE>
   158e4:	andeq	pc, r1, pc, lsr r5	; <UNPREDICTABLE>

000158e8 <test_typed_empty_monster@@Base>:
   158e8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   158ec:	mov	r3, #0
   158f0:	mov	r4, r0
   158f4:	str	r3, [sp, #4]
   158f8:	bl	1acd8 <flatcc_builder_reset@@Base>
   158fc:	ldr	r1, [pc, #540]	; 15b20 <test_typed_empty_monster@@Base+0x238>
   15900:	mov	r0, r4
   15904:	bl	130d8 <_start@@Base+0x290>
   15908:	mov	r0, r4
   1590c:	bl	130e4 <_start@@Base+0x29c>
   15910:	ldr	r1, [pc, #524]	; 15b24 <test_typed_empty_monster@@Base+0x23c>
   15914:	mov	r0, r4
   15918:	bl	13324 <_start@@Base+0x4dc>
   1591c:	mov	r0, r4
   15920:	bl	142a4 <_start@@Base+0x145c>
   15924:	ldr	r7, [pc, #508]	; 15b28 <test_typed_empty_monster@@Base+0x240>
   15928:	mov	r1, r0
   1592c:	mov	r0, r4
   15930:	bl	1b2fc <flatcc_builder_end_buffer@@Base>
   15934:	mov	r1, sp
   15938:	mov	r0, r4
   1593c:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   15940:	ldr	r3, [pc, #484]	; 15b2c <test_typed_empty_monster@@Base+0x244>
   15944:	ldr	r2, [sp]
   15948:	ldr	r3, [r3]
   1594c:	mov	r4, r0
   15950:	mov	r1, r0
   15954:	ldr	r0, [pc, #468]	; 15b30 <test_typed_empty_monster@@Base+0x248>
   15958:	bl	13214 <_start@@Base+0x3cc>
   1595c:	ldr	r6, [r4, #4]
   15960:	ldr	r3, [pc, #460]	; 15b34 <test_typed_empty_monster@@Base+0x24c>
   15964:	ldr	r0, [pc, #460]	; 15b38 <test_typed_empty_monster@@Base+0x250>
   15968:	mov	r1, r7
   1596c:	ldrb	r2, [r1], #1
   15970:	cmp	r2, #0
   15974:	bne	1599c <test_typed_empty_monster@@Base+0xb4>
   15978:	cmp	r3, #0
   1597c:	beq	15b10 <test_typed_empty_monster@@Base+0x228>
   15980:	cmp	r6, r3
   15984:	beq	159a8 <test_typed_empty_monster@@Base+0xc0>
   15988:	mov	r1, r6
   1598c:	ldr	r0, [pc, #424]	; 15b3c <test_typed_empty_monster@@Base+0x254>
   15990:	bl	129c4 <printf@plt>
   15994:	mvn	r5, #0
   15998:	b	15a30 <test_typed_empty_monster@@Base+0x148>
   1599c:	eor	r3, r3, r2
   159a0:	mul	r3, r0, r3
   159a4:	b	1596c <test_typed_empty_monster@@Base+0x84>
   159a8:	ldr	r3, [pc, #400]	; 15b40 <test_typed_empty_monster@@Base+0x258>
   159ac:	cmp	r6, r3
   159b0:	beq	15af4 <test_typed_empty_monster@@Base+0x20c>
   159b4:	ldr	r0, [pc, #392]	; 15b44 <test_typed_empty_monster@@Base+0x25c>
   159b8:	b	15b08 <test_typed_empty_monster@@Base+0x220>
   159bc:	ldr	r3, [pc, #388]	; 15b48 <test_typed_empty_monster@@Base+0x260>
   159c0:	ldr	r2, [pc, #344]	; 15b20 <test_typed_empty_monster@@Base+0x238>
   159c4:	ldr	r1, [sp]
   159c8:	mov	r0, r4
   159cc:	bl	1de88 <flatcc_verify_table_as_root@@Base>
   159d0:	subs	r5, r0, #0
   159d4:	beq	159e8 <test_typed_empty_monster@@Base+0x100>
   159d8:	bl	1d918 <flatcc_verify_error_string@@Base>
   159dc:	mov	r1, r0
   159e0:	ldr	r0, [pc, #356]	; 15b4c <test_typed_empty_monster@@Base+0x264>
   159e4:	b	15a2c <test_typed_empty_monster@@Base+0x144>
   159e8:	ldr	r3, [pc, #344]	; 15b48 <test_typed_empty_monster@@Base+0x260>
   159ec:	ldr	r2, [pc, #300]	; 15b20 <test_typed_empty_monster@@Base+0x238>
   159f0:	ldr	r1, [sp]
   159f4:	mov	r0, r4
   159f8:	bl	1de88 <flatcc_verify_table_as_root@@Base>
   159fc:	subs	r5, r0, #0
   15a00:	bne	159d8 <test_typed_empty_monster@@Base+0xf0>
   15a04:	ldr	r3, [pc, #316]	; 15b48 <test_typed_empty_monster@@Base+0x260>
   15a08:	mov	r2, r6
   15a0c:	ldr	r1, [sp]
   15a10:	mov	r0, r4
   15a14:	bl	1dee4 <flatcc_verify_table_as_typed_root@@Base>
   15a18:	subs	r5, r0, #0
   15a1c:	beq	15a44 <test_typed_empty_monster@@Base+0x15c>
   15a20:	bl	1d918 <flatcc_verify_error_string@@Base>
   15a24:	mov	r1, r0
   15a28:	ldr	r0, [pc, #288]	; 15b50 <test_typed_empty_monster@@Base+0x268>
   15a2c:	bl	129c4 <printf@plt>
   15a30:	mov	r0, r4
   15a34:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   15a38:	mov	r0, r5
   15a3c:	add	sp, sp, #12
   15a40:	pop	{r4, r5, r6, r7, pc}
   15a44:	ldr	r1, [sp]
   15a48:	ldr	r2, [pc, #228]	; 15b34 <test_typed_empty_monster@@Base+0x24c>
   15a4c:	ldr	r0, [pc, #228]	; 15b38 <test_typed_empty_monster@@Base+0x250>
   15a50:	ldrb	r3, [r7], #1
   15a54:	cmp	r3, #0
   15a58:	bne	15a8c <test_typed_empty_monster@@Base+0x1a4>
   15a5c:	ldr	r0, [pc, #208]	; 15b34 <test_typed_empty_monster@@Base+0x24c>
   15a60:	cmp	r2, #0
   15a64:	moveq	r2, r0
   15a68:	ldr	r3, [pc, #216]	; 15b48 <test_typed_empty_monster@@Base+0x260>
   15a6c:	mov	r0, r4
   15a70:	bl	1dee4 <flatcc_verify_table_as_typed_root@@Base>
   15a74:	subs	r5, r0, #0
   15a78:	beq	15a98 <test_typed_empty_monster@@Base+0x1b0>
   15a7c:	bl	1d918 <flatcc_verify_error_string@@Base>
   15a80:	mov	r1, r0
   15a84:	ldr	r0, [pc, #200]	; 15b54 <test_typed_empty_monster@@Base+0x26c>
   15a88:	b	15a2c <test_typed_empty_monster@@Base+0x144>
   15a8c:	eor	r2, r2, r3
   15a90:	mul	r2, r0, r2
   15a94:	b	15a50 <test_typed_empty_monster@@Base+0x168>
   15a98:	mvn	r3, #126	; 0x7e
   15a9c:	strb	r3, [sp, #4]
   15aa0:	mvn	r3, #11
   15aa4:	strb	r3, [sp, #5]
   15aa8:	mov	r3, #14
   15aac:	strb	r3, [sp, #6]
   15ab0:	mov	r3, #51	; 0x33
   15ab4:	strb	r3, [sp, #7]
   15ab8:	add	r2, sp, #4
   15abc:	ldr	r3, [pc, #132]	; 15b48 <test_typed_empty_monster@@Base+0x260>
   15ac0:	ldr	r1, [sp]
   15ac4:	mov	r0, r4
   15ac8:	bl	1de88 <flatcc_verify_table_as_root@@Base>
   15acc:	subs	r5, r0, #0
   15ad0:	bne	159d8 <test_typed_empty_monster@@Base+0xf0>
   15ad4:	ldr	r1, [sp]
   15ad8:	mov	r0, r4
   15adc:	bl	131e0 <_start@@Base+0x398>
   15ae0:	cmp	r0, #0
   15ae4:	bne	15a30 <test_typed_empty_monster@@Base+0x148>
   15ae8:	ldr	r0, [pc, #104]	; 15b58 <test_typed_empty_monster@@Base+0x270>
   15aec:	bl	12a0c <puts@plt>
   15af0:	b	15a30 <test_typed_empty_monster@@Base+0x148>
   15af4:	mov	r0, r4
   15af8:	bl	151f8 <verify_empty_monster@@Base>
   15afc:	cmp	r0, #0
   15b00:	bne	159bc <test_typed_empty_monster@@Base+0xd4>
   15b04:	ldr	r0, [pc, #80]	; 15b5c <test_typed_empty_monster@@Base+0x274>
   15b08:	bl	12a0c <puts@plt>
   15b0c:	b	15994 <test_typed_empty_monster@@Base+0xac>
   15b10:	ldr	r3, [pc, #28]	; 15b34 <test_typed_empty_monster@@Base+0x24c>
   15b14:	cmp	r6, r3
   15b18:	beq	159b4 <test_typed_empty_monster@@Base+0xcc>
   15b1c:	b	15988 <test_typed_empty_monster@@Base+0xa0>
   15b20:	andeq	pc, r1, ip, ror #10
   15b24:	strdeq	pc, [r1], -r9
   15b28:	andeq	pc, r1, fp, lsl #11
   15b2c:	andeq	r3, r3, r8, ror r0
   15b30:	andeq	pc, r1, r1, ror r5	; <UNPREDICTABLE>
   15b34:	tsthi	ip, r5, asr #27
   15b38:			; <UNDEFINED> instruction: 0x01000193
   15b3c:	andeq	pc, r1, r2, lsr #11
   15b40:	movwcc	pc, #58497	; 0xe481	; <UNPREDICTABLE>
   15b44:	andeq	pc, r1, r0, lsl #14
   15b48:	strdeq	r4, [r1], -r0
   15b4c:	andeq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
   15b50:	andeq	pc, r1, r0, asr #12
   15b54:	andeq	pc, r1, r7, ror r6	; <UNPREDICTABLE>
   15b58:			; <UNDEFINED> instruction: 0x0001f6b7
   15b5c:	ldrdeq	pc, [r1], -r4

00015b60 <verify_table_with_emptystruct@@Base>:
   15b60:	push	{r4, lr}
   15b64:	bl	13018 <_start@@Base+0x1d0>
   15b68:	cmp	r0, #0
   15b6c:	ldreq	r0, [pc, #64]	; 15bb4 <verify_table_with_emptystruct@@Base+0x54>
   15b70:	beq	15ba0 <verify_table_with_emptystruct@@Base+0x40>
   15b74:	ldr	r3, [r0]
   15b78:	sub	r3, r0, r3
   15b7c:	ldrh	r2, [r3]
   15b80:	cmp	r2, #5
   15b84:	bls	15b9c <verify_table_with_emptystruct@@Base+0x3c>
   15b88:	ldrh	r3, [r3, #4]
   15b8c:	cmp	r3, #0
   15b90:	beq	15b9c <verify_table_with_emptystruct@@Base+0x3c>
   15b94:	cmn	r0, r3
   15b98:	bne	15bac <verify_table_with_emptystruct@@Base+0x4c>
   15b9c:	ldr	r0, [pc, #20]	; 15bb8 <verify_table_with_emptystruct@@Base+0x58>
   15ba0:	bl	12a0c <puts@plt>
   15ba4:	mvn	r0, #0
   15ba8:	pop	{r4, pc}
   15bac:	mov	r0, #0
   15bb0:	pop	{r4, pc}
   15bb4:	andeq	pc, r1, r8, lsr #14
   15bb8:	andeq	pc, r1, sp, asr #14

00015bbc <test_table_with_emptystruct@@Base>:
   15bbc:	push	{r0, r1, r2, r4, r5, lr}
   15bc0:	mov	r4, r0
   15bc4:	bl	1acd8 <flatcc_builder_reset@@Base>
   15bc8:	ldr	r1, [pc, #128]	; 15c50 <test_table_with_emptystruct@@Base+0x94>
   15bcc:	mov	r0, r4
   15bd0:	bl	130d8 <_start@@Base+0x290>
   15bd4:	subs	r5, r0, #0
   15bd8:	bne	15c08 <test_table_with_emptystruct@@Base+0x4c>
   15bdc:	mov	r1, #1
   15be0:	mov	r0, r4
   15be4:	bl	1ba60 <flatcc_builder_start_table@@Base>
   15be8:	cmp	r0, #0
   15bec:	movne	r0, r5
   15bf0:	bne	15bfc <test_table_with_emptystruct@@Base+0x40>
   15bf4:	mov	r0, r4
   15bf8:	bl	1430c <_start@@Base+0x14c4>
   15bfc:	mov	r1, r0
   15c00:	mov	r0, r4
   15c04:	bl	1b2fc <flatcc_builder_end_buffer@@Base>
   15c08:	add	r1, sp, #4
   15c0c:	mov	r0, r4
   15c10:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   15c14:	ldr	r3, [pc, #56]	; 15c54 <test_table_with_emptystruct@@Base+0x98>
   15c18:	ldr	r2, [sp, #4]
   15c1c:	ldr	r3, [r3]
   15c20:	mov	r1, r0
   15c24:	mov	r4, r0
   15c28:	ldr	r0, [pc, #40]	; 15c58 <test_table_with_emptystruct@@Base+0x9c>
   15c2c:	bl	13214 <_start@@Base+0x3cc>
   15c30:	mov	r0, r4
   15c34:	bl	15b60 <verify_table_with_emptystruct@@Base>
   15c38:	mov	r5, r0
   15c3c:	mov	r0, r4
   15c40:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   15c44:	mov	r0, r5
   15c48:	add	sp, sp, #12
   15c4c:	pop	{r4, r5, pc}
   15c50:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   15c54:	andeq	r3, r3, r8, ror r0
   15c58:	andeq	pc, r1, r3, ror r7	; <UNPREDICTABLE>

00015c5c <test_typed_table_with_emptystruct@@Base>:
   15c5c:	push	{r0, r1, r4, r5, r6, lr}
   15c60:	mov	r4, r0
   15c64:	bl	1acd8 <flatcc_builder_reset@@Base>
   15c68:	ldr	r1, [pc, #380]	; 15dec <test_typed_table_with_emptystruct@@Base+0x190>
   15c6c:	mov	r0, r4
   15c70:	bl	130d8 <_start@@Base+0x290>
   15c74:	subs	r5, r0, #0
   15c78:	bne	15ca8 <test_typed_table_with_emptystruct@@Base+0x4c>
   15c7c:	mov	r1, #1
   15c80:	mov	r0, r4
   15c84:	bl	1ba60 <flatcc_builder_start_table@@Base>
   15c88:	cmp	r0, #0
   15c8c:	movne	r0, r5
   15c90:	bne	15c9c <test_typed_table_with_emptystruct@@Base+0x40>
   15c94:	mov	r0, r4
   15c98:	bl	1430c <_start@@Base+0x14c4>
   15c9c:	mov	r1, r0
   15ca0:	mov	r0, r4
   15ca4:	bl	1b2fc <flatcc_builder_end_buffer@@Base>
   15ca8:	add	r1, sp, #4
   15cac:	mov	r0, r4
   15cb0:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   15cb4:	ldr	r3, [pc, #308]	; 15df0 <test_typed_table_with_emptystruct@@Base+0x194>
   15cb8:	ldr	r2, [sp, #4]
   15cbc:	ldr	r3, [r3]
   15cc0:	mov	r1, r0
   15cc4:	mov	r4, r0
   15cc8:	ldr	r0, [pc, #292]	; 15df4 <test_typed_table_with_emptystruct@@Base+0x198>
   15ccc:	bl	13214 <_start@@Base+0x3cc>
   15cd0:	ldr	r3, [pc, #288]	; 15df8 <test_typed_table_with_emptystruct@@Base+0x19c>
   15cd4:	ldr	r2, [pc, #272]	; 15dec <test_typed_table_with_emptystruct@@Base+0x190>
   15cd8:	ldr	r1, [sp, #4]
   15cdc:	mov	r0, r4
   15ce0:	bl	1de88 <flatcc_verify_table_as_root@@Base>
   15ce4:	cmp	r0, #0
   15ce8:	ldrne	r0, [pc, #268]	; 15dfc <test_typed_table_with_emptystruct@@Base+0x1a0>
   15cec:	bne	15d68 <test_typed_table_with_emptystruct@@Base+0x10c>
   15cf0:	ldr	r3, [pc, #256]	; 15df8 <test_typed_table_with_emptystruct@@Base+0x19c>
   15cf4:	ldr	r2, [pc, #240]	; 15dec <test_typed_table_with_emptystruct@@Base+0x190>
   15cf8:	ldr	r1, [sp, #4]
   15cfc:	mov	r0, r4
   15d00:	bl	1de88 <flatcc_verify_table_as_root@@Base>
   15d04:	cmp	r0, #0
   15d08:	ldrne	r0, [pc, #240]	; 15e00 <test_typed_table_with_emptystruct@@Base+0x1a4>
   15d0c:	bne	15d68 <test_typed_table_with_emptystruct@@Base+0x10c>
   15d10:	ldr	r6, [pc, #236]	; 15e04 <test_typed_table_with_emptystruct@@Base+0x1a8>
   15d14:	ldr	r3, [pc, #220]	; 15df8 <test_typed_table_with_emptystruct@@Base+0x19c>
   15d18:	mov	r2, r6
   15d1c:	ldr	r1, [sp, #4]
   15d20:	mov	r0, r4
   15d24:	bl	1dee4 <flatcc_verify_table_as_typed_root@@Base>
   15d28:	subs	r5, r0, #0
   15d2c:	ldrne	r0, [pc, #212]	; 15e08 <test_typed_table_with_emptystruct@@Base+0x1ac>
   15d30:	bne	15d68 <test_typed_table_with_emptystruct@@Base+0x10c>
   15d34:	cmp	r4, #0
   15d38:	ldreq	r0, [pc, #204]	; 15e0c <test_typed_table_with_emptystruct@@Base+0x1b0>
   15d3c:	beq	15d68 <test_typed_table_with_emptystruct@@Base+0x10c>
   15d40:	ldr	r3, [r4, #4]
   15d44:	cmp	r3, r6
   15d48:	ldrne	r0, [pc, #192]	; 15e10 <test_typed_table_with_emptystruct@@Base+0x1b4>
   15d4c:	bne	15d68 <test_typed_table_with_emptystruct@@Base+0x10c>
   15d50:	ldr	r1, [pc, #148]	; 15dec <test_typed_table_with_emptystruct@@Base+0x190>
   15d54:	mov	r0, r4
   15d58:	bl	12f70 <_start@@Base+0x128>
   15d5c:	cmp	r0, #0
   15d60:	bne	15d74 <test_typed_table_with_emptystruct@@Base+0x118>
   15d64:	ldr	r0, [pc, #168]	; 15e14 <test_typed_table_with_emptystruct@@Base+0x1b8>
   15d68:	bl	12a0c <puts@plt>
   15d6c:	mvn	r5, #0
   15d70:	b	15de0 <test_typed_table_with_emptystruct@@Base+0x184>
   15d74:	mov	r0, r4
   15d78:	bl	13018 <_start@@Base+0x1d0>
   15d7c:	cmp	r0, #0
   15d80:	ldrne	r0, [pc, #144]	; 15e18 <test_typed_table_with_emptystruct@@Base+0x1bc>
   15d84:	bne	15d68 <test_typed_table_with_emptystruct@@Base+0x10c>
   15d88:	ldr	r3, [r4, #4]
   15d8c:	cmp	r3, #1
   15d90:	bne	15da4 <test_typed_table_with_emptystruct@@Base+0x148>
   15d94:	ldr	r3, [r4]
   15d98:	cmn	r4, r3
   15d9c:	ldrne	r0, [pc, #120]	; 15e1c <test_typed_table_with_emptystruct@@Base+0x1c0>
   15da0:	bne	15d68 <test_typed_table_with_emptystruct@@Base+0x10c>
   15da4:	ldr	r1, [pc, #64]	; 15dec <test_typed_table_with_emptystruct@@Base+0x190>
   15da8:	mov	r0, r4
   15dac:	bl	12f70 <_start@@Base+0x128>
   15db0:	cmp	r0, #0
   15db4:	beq	15dc4 <test_typed_table_with_emptystruct@@Base+0x168>
   15db8:	ldr	r3, [r4]
   15dbc:	cmn	r4, r3
   15dc0:	bne	15dcc <test_typed_table_with_emptystruct@@Base+0x170>
   15dc4:	ldr	r0, [pc, #84]	; 15e20 <test_typed_table_with_emptystruct@@Base+0x1c4>
   15dc8:	b	15d68 <test_typed_table_with_emptystruct@@Base+0x10c>
   15dcc:	ldr	r2, [r4, #4]
   15dd0:	ldr	r3, [pc, #44]	; 15e04 <test_typed_table_with_emptystruct@@Base+0x1a8>
   15dd4:	cmp	r2, r3
   15dd8:	ldrne	r0, [pc, #68]	; 15e24 <test_typed_table_with_emptystruct@@Base+0x1c8>
   15ddc:	bne	15d68 <test_typed_table_with_emptystruct@@Base+0x10c>
   15de0:	mov	r0, r5
   15de4:	add	sp, sp, #8
   15de8:	pop	{r4, r5, r6, pc}
   15dec:	andeq	pc, r1, r8, ror #14
   15df0:	andeq	r3, r3, r8, ror r0
   15df4:	andeq	pc, r1, sp, ror #14
   15df8:	andeq	r3, r1, r4, lsl #4
   15dfc:	andeq	pc, r1, fp, lsl #15
   15e00:	andeq	pc, r1, sl, lsr #15
   15e04:	ldrhlt	r3, [sp], #118	; 0x76
   15e08:	andeq	pc, r1, r6, asr #15
   15e0c:	andeq	pc, r1, fp, ror #15
   15e10:	andeq	pc, r1, r8, lsr #17
   15e14:	andeq	pc, r1, r3, lsl #16
   15e18:	andeq	pc, r1, sp, lsr #16
   15e1c:	andeq	pc, r1, fp, asr #16
   15e20:	andeq	pc, r1, r0, ror r8	; <UNPREDICTABLE>
   15e24:			; <UNDEFINED> instruction: 0x0001f8b8

00015e28 <verify_monster@@Base>:
   15e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e2c:	vpush	{d8-d9}
   15e30:	ldr	r3, [pc, #1280]	; 16338 <verify_monster@@Base+0x510>
   15e34:	mov	r5, r0
   15e38:	add	lr, r3, #16
   15e3c:	add	fp, sp, #48	; 0x30
   15e40:	sub	sp, sp, #44	; 0x2c
   15e44:	sub	sp, sp, #48	; 0x30
   15e48:	add	r4, sp, #15
   15e4c:	bic	r4, r4, #15
   15e50:	sub	r2, fp, #72	; 0x48
   15e54:	ldr	r0, [r3]
   15e58:	ldr	r1, [r3, #4]
   15e5c:	mov	ip, r2
   15e60:	add	r3, r3, #8
   15e64:	cmp	r3, lr
   15e68:	stmia	ip!, {r0, r1}
   15e6c:	mov	r2, ip
   15e70:	bne	15e54 <verify_monster@@Base+0x2c>
   15e74:	ldr	r0, [r3]
   15e78:	ldr	r3, [pc, #1212]	; 1633c <verify_monster@@Base+0x514>
   15e7c:	str	r0, [ip]
   15e80:	sub	ip, fp, #88	; 0x58
   15e84:	ldm	r3, {r0, r1, r2, r3}
   15e88:	stm	ip, {r0, r1, r2, r3}
   15e8c:	mov	r0, r5
   15e90:	ldr	r1, [pc, #1192]	; 16340 <verify_monster@@Base+0x518>
   15e94:	bl	12f70 <_start@@Base+0x128>
   15e98:	cmp	r0, #0
   15e9c:	ldreq	r0, [pc, #1184]	; 16344 <verify_monster@@Base+0x51c>
   15ea0:	beq	15f78 <verify_monster@@Base+0x150>
   15ea4:	ldr	r1, [pc, #1180]	; 16348 <verify_monster@@Base+0x520>
   15ea8:	mov	r0, r5
   15eac:	bl	12f70 <_start@@Base+0x128>
   15eb0:	cmp	r0, #0
   15eb4:	ldreq	r0, [pc, #1168]	; 1634c <verify_monster@@Base+0x524>
   15eb8:	beq	15f78 <verify_monster@@Base+0x150>
   15ebc:	ldr	r1, [pc, #1164]	; 16350 <verify_monster@@Base+0x528>
   15ec0:	mov	r0, r5
   15ec4:	bl	12f70 <_start@@Base+0x128>
   15ec8:	cmp	r0, #0
   15ecc:	ldrne	r0, [pc, #1152]	; 16354 <verify_monster@@Base+0x52c>
   15ed0:	bne	15f78 <verify_monster@@Base+0x150>
   15ed4:	ldr	r1, [pc, #1124]	; 16340 <verify_monster@@Base+0x518>
   15ed8:	mov	r0, r5
   15edc:	bl	12f70 <_start@@Base+0x128>
   15ee0:	cmp	r0, #0
   15ee4:	ldreq	r0, [pc, #1132]	; 16358 <verify_monster@@Base+0x530>
   15ee8:	beq	15f78 <verify_monster@@Base+0x150>
   15eec:	mov	r0, r5
   15ef0:	bl	12fe4 <_start@@Base+0x19c>
   15ef4:	subs	r5, r0, #0
   15ef8:	ldreq	r0, [pc, #1116]	; 1635c <verify_monster@@Base+0x534>
   15efc:	beq	15f78 <verify_monster@@Base+0x150>
   15f00:	bl	1349c <_start@@Base+0x654>
   15f04:	cmp	r0, #80	; 0x50
   15f08:	ldrne	r0, [pc, #1104]	; 16360 <verify_monster@@Base+0x538>
   15f0c:	bne	15f78 <verify_monster@@Base+0x150>
   15f10:	mov	r0, r5
   15f14:	bl	1359c <_start@@Base+0x754>
   15f18:	subs	r6, r0, #0
   15f1c:	ldreq	r0, [pc, #1088]	; 16364 <verify_monster@@Base+0x53c>
   15f20:	beq	15f78 <verify_monster@@Base+0x150>
   15f24:	tst	r6, #15
   15f28:	beq	15f34 <verify_monster@@Base+0x10c>
   15f2c:	ldr	r0, [pc, #1076]	; 16368 <verify_monster@@Base+0x540>
   15f30:	bl	12a0c <puts@plt>
   15f34:	vldr	s16, [pc, #1008]	; 1632c <verify_monster@@Base+0x504>
   15f38:	vldr	s15, [r6, #8]
   15f3c:	vcmp.f32	s15, s16
   15f40:	vmrs	APSR_nzcv, fpscr
   15f44:	ldrne	r0, [pc, #1056]	; 1636c <verify_monster@@Base+0x544>
   15f48:	bne	15f78 <verify_monster@@Base+0x150>
   15f4c:	vldr	s18, [pc, #988]	; 16330 <verify_monster@@Base+0x508>
   15f50:	vldr	s15, [r6]
   15f54:	vcmp.f32	s15, s18
   15f58:	vmrs	APSR_nzcv, fpscr
   15f5c:	bne	15f74 <verify_monster@@Base+0x14c>
   15f60:	vldr	s17, [pc, #972]	; 16334 <verify_monster@@Base+0x50c>
   15f64:	vldr	s15, [r6, #4]
   15f68:	vcmp.f32	s15, s17
   15f6c:	vmrs	APSR_nzcv, fpscr
   15f70:	beq	15f80 <verify_monster@@Base+0x158>
   15f74:	ldr	r0, [pc, #1012]	; 16370 <verify_monster@@Base+0x548>
   15f78:	bl	12a0c <puts@plt>
   15f7c:	b	16318 <verify_monster@@Base+0x4f0>
   15f80:	mov	r2, #32
   15f84:	mov	r1, #0
   15f88:	mov	r0, r4
   15f8c:	bl	12a60 <memset@plt>
   15f90:	vldr	d7, [r6, #16]
   15f94:	ldrb	r3, [r6, #24]
   15f98:	vstr	s18, [r4]
   15f9c:	vstr	s17, [r4, #4]
   15fa0:	vcmp.f64	d7, #0.0
   15fa4:	strb	r3, [r4, #24]
   15fa8:	ldrh	r3, [r6, #26]
   15fac:	vstr	s16, [r4, #8]
   15fb0:	vmrs	APSR_nzcv, fpscr
   15fb4:	strh	r3, [r4, #26]
   15fb8:	ldrb	r3, [r6, #28]
   15fbc:	vstr	d7, [r4, #16]
   15fc0:	strb	r3, [r4, #28]
   15fc4:	bne	15fe0 <verify_monster@@Base+0x1b8>
   15fc8:	mov	r2, #4
   15fcc:	ldr	r1, [pc, #928]	; 16374 <verify_monster@@Base+0x54c>
   15fd0:	add	r0, r6, #26
   15fd4:	bl	129e8 <memcmp@plt>
   15fd8:	cmp	r0, #0
   15fdc:	beq	15fe8 <verify_monster@@Base+0x1c0>
   15fe0:	ldr	r0, [pc, #912]	; 16378 <verify_monster@@Base+0x550>
   15fe4:	b	15f78 <verify_monster@@Base+0x150>
   15fe8:	mov	r0, r5
   15fec:	bl	13b90 <_start@@Base+0xd48>
   15ff0:	subs	r4, r0, #0
   15ff4:	beq	16008 <verify_monster@@Base+0x1e0>
   15ff8:	ldr	r1, [pc, #892]	; 1637c <verify_monster@@Base+0x554>
   15ffc:	bl	129b8 <strcmp@plt>
   16000:	cmp	r0, #0
   16004:	beq	16010 <verify_monster@@Base+0x1e8>
   16008:	ldr	r0, [pc, #880]	; 16380 <verify_monster@@Base+0x558>
   1600c:	b	15f78 <verify_monster@@Base+0x150>
   16010:	ldr	r3, [r4, #-4]
   16014:	cmp	r3, #9
   16018:	ldrne	r0, [pc, #868]	; 16384 <verify_monster@@Base+0x55c>
   1601c:	bne	15f78 <verify_monster@@Base+0x150>
   16020:	ldr	r6, [r5]
   16024:	sub	r6, r5, r6
   16028:	ldrh	r8, [r6]
   1602c:	cmp	r8, #17
   16030:	bls	1604c <verify_monster@@Base+0x224>
   16034:	ldrh	r3, [r6, #16]
   16038:	cmp	r3, #0
   1603c:	beq	1604c <verify_monster@@Base+0x224>
   16040:	ldrsb	r3, [r5, r3]
   16044:	cmp	r3, #2
   16048:	beq	16054 <verify_monster@@Base+0x22c>
   1604c:	ldr	r0, [pc, #820]	; 16388 <verify_monster@@Base+0x560>
   16050:	b	15f78 <verify_monster@@Base+0x150>
   16054:	mov	r0, r5
   16058:	bl	135f0 <_start@@Base+0x7a8>
   1605c:	subs	r7, r0, #0
   16060:	beq	16074 <verify_monster@@Base+0x24c>
   16064:	ldr	r3, [r7, #-4]
   16068:	cmp	r3, #10
   1606c:	moveq	r4, #0
   16070:	beq	1607c <verify_monster@@Base+0x254>
   16074:	ldr	r0, [pc, #784]	; 1638c <verify_monster@@Base+0x564>
   16078:	b	15f78 <verify_monster@@Base+0x150>
   1607c:	mov	r1, r4
   16080:	mov	r0, r7
   16084:	bl	13654 <_start@@Base+0x80c>
   16088:	cmp	r0, r4
   1608c:	beq	160a0 <verify_monster@@Base+0x278>
   16090:	ldr	r0, [pc, #760]	; 16390 <verify_monster@@Base+0x568>
   16094:	mov	r1, r4
   16098:	bl	129c4 <printf@plt>
   1609c:	b	16318 <verify_monster@@Base+0x4f0>
   160a0:	add	r4, r4, #1
   160a4:	cmp	r4, #10
   160a8:	bne	1607c <verify_monster@@Base+0x254>
   160ac:	mov	r0, r5
   160b0:	bl	137c4 <_start@@Base+0x97c>
   160b4:	cmp	r0, #150	; 0x96
   160b8:	ldrne	r0, [pc, #724]	; 16394 <verify_monster@@Base+0x56c>
   160bc:	bne	15f78 <verify_monster@@Base+0x150>
   160c0:	mov	r0, r5
   160c4:	bl	13820 <_start@@Base+0x9d8>
   160c8:	subs	r4, r0, #0
   160cc:	ldrne	r0, [pc, #708]	; 16398 <verify_monster@@Base+0x570>
   160d0:	bne	15f78 <verify_monster@@Base+0x150>
   160d4:	mov	r0, r5
   160d8:	bl	134f8 <_start@@Base+0x6b0>
   160dc:	cmp	r0, #0
   160e0:	ldreq	r0, [pc, #692]	; 1639c <verify_monster@@Base+0x574>
   160e4:	beq	15f78 <verify_monster@@Base+0x150>
   160e8:	mov	r0, r5
   160ec:	bl	1354c <_start@@Base+0x704>
   160f0:	cmp	r0, #0
   160f4:	ldreq	r0, [pc, #676]	; 163a0 <verify_monster@@Base+0x578>
   160f8:	beq	15f78 <verify_monster@@Base+0x150>
   160fc:	mov	r0, r5
   16100:	bl	13874 <_start@@Base+0xa2c>
   16104:	subs	r9, r0, #0
   16108:	beq	16120 <verify_monster@@Base+0x2f8>
   1610c:	ldr	r3, [r9, #-4]
   16110:	cmp	r3, #5
   16114:	subeq	r7, fp, #72	; 0x48
   16118:	moveq	sl, r4
   1611c:	beq	16128 <verify_monster@@Base+0x300>
   16120:	ldr	r0, [pc, #636]	; 163a4 <verify_monster@@Base+0x57c>
   16124:	b	15f78 <verify_monster@@Base+0x150>
   16128:	mov	r1, r4
   1612c:	mov	r0, r9
   16130:	bl	138d8 <_start@@Base+0xa90>
   16134:	ldrsh	r3, [r7]
   16138:	cmp	r0, #0
   1613c:	beq	1669c <verify_monster@@Base+0x874>
   16140:	ldrsh	r2, [r0]
   16144:	cmp	r2, r3
   16148:	beq	16658 <verify_monster@@Base+0x830>
   1614c:	mov	r1, r4
   16150:	ldr	r0, [pc, #592]	; 163a8 <verify_monster@@Base+0x580>
   16154:	b	16098 <verify_monster@@Base+0x270>
   16158:	mov	r1, r4
   1615c:	bl	13a8c <_start@@Base+0xc44>
   16160:	subs	r4, r0, #0
   16164:	bne	1617c <verify_monster@@Base+0x354>
   16168:	ldr	r3, [pc, #572]	; 163ac <verify_monster@@Base+0x584>
   1616c:	ldr	r2, [pc, #572]	; 163b0 <verify_monster@@Base+0x588>
   16170:	ldr	r1, [pc, #572]	; 163b4 <verify_monster@@Base+0x58c>
   16174:	ldr	r0, [pc, #572]	; 163b8 <verify_monster@@Base+0x590>
   16178:	bl	12ab4 <__assert_fail@plt>
   1617c:	bl	13b90 <_start@@Base+0xd48>
   16180:	ldr	r1, [pc, #672]	; 16428 <verify_monster@@Base+0x600>
   16184:	bl	129b8 <strcmp@plt>
   16188:	cmp	r0, #0
   1618c:	ldrne	r0, [pc, #552]	; 163bc <verify_monster@@Base+0x594>
   16190:	bne	16314 <verify_monster@@Base+0x4ec>
   16194:	mov	r1, #1
   16198:	mov	r0, r7
   1619c:	bl	13a8c <_start@@Base+0xc44>
   161a0:	cmp	r4, r0
   161a4:	ldrne	r0, [pc, #532]	; 163c0 <verify_monster@@Base+0x598>
   161a8:	bne	15f78 <verify_monster@@Base+0x150>
   161ac:	mov	r1, #2
   161b0:	mov	r0, r7
   161b4:	bl	13a8c <_start@@Base+0xc44>
   161b8:	bl	13b90 <_start@@Base+0xd48>
   161bc:	ldr	r1, [pc, #512]	; 163c4 <verify_monster@@Base+0x59c>
   161c0:	mov	r4, r0
   161c4:	bl	129b8 <strcmp@plt>
   161c8:	subs	r1, r0, #0
   161cc:	movne	r1, r4
   161d0:	ldrne	r0, [pc, #496]	; 163c8 <verify_monster@@Base+0x5a0>
   161d4:	bne	16098 <verify_monster@@Base+0x270>
   161d8:	mov	r0, r7
   161dc:	bl	13a8c <_start@@Base+0xc44>
   161e0:	bl	13b90 <_start@@Base+0xd48>
   161e4:	ldr	r1, [pc, #480]	; 163cc <verify_monster@@Base+0x5a4>
   161e8:	mov	r4, r0
   161ec:	bl	129b8 <strcmp@plt>
   161f0:	cmp	r0, #0
   161f4:	movne	r1, r4
   161f8:	ldrne	r0, [pc, #464]	; 163d0 <verify_monster@@Base+0x5a8>
   161fc:	bne	16098 <verify_monster@@Base+0x270>
   16200:	mov	r1, #3
   16204:	mov	r0, r7
   16208:	bl	13a8c <_start@@Base+0xc44>
   1620c:	bl	13b90 <_start@@Base+0xd48>
   16210:	ldr	r1, [pc, #528]	; 16428 <verify_monster@@Base+0x600>
   16214:	mov	r4, r0
   16218:	bl	129b8 <strcmp@plt>
   1621c:	cmp	r0, #0
   16220:	movne	r1, r4
   16224:	ldrne	r0, [pc, #424]	; 163d4 <verify_monster@@Base+0x5ac>
   16228:	bne	16098 <verify_monster@@Base+0x270>
   1622c:	mov	r1, #4
   16230:	mov	r0, r7
   16234:	bl	13a8c <_start@@Base+0xc44>
   16238:	bl	13b90 <_start@@Base+0xd48>
   1623c:	ldr	r1, [pc, #384]	; 163c4 <verify_monster@@Base+0x59c>
   16240:	mov	r4, r0
   16244:	bl	129b8 <strcmp@plt>
   16248:	cmp	r0, #0
   1624c:	movne	r1, r4
   16250:	ldrne	r0, [pc, #384]	; 163d8 <verify_monster@@Base+0x5b0>
   16254:	bne	16098 <verify_monster@@Base+0x270>
   16258:	mov	r1, #6
   1625c:	mov	r0, r7
   16260:	bl	13a8c <_start@@Base+0xc44>
   16264:	bl	13b90 <_start@@Base+0xd48>
   16268:	ldr	r1, [pc, #348]	; 163cc <verify_monster@@Base+0x5a4>
   1626c:	mov	r4, r0
   16270:	bl	129b8 <strcmp@plt>
   16274:	cmp	r0, #0
   16278:	movne	r1, r4
   1627c:	ldrne	r0, [pc, #344]	; 163dc <verify_monster@@Base+0x5b4>
   16280:	bne	16098 <verify_monster@@Base+0x270>
   16284:	mov	r1, #7
   16288:	mov	r0, r7
   1628c:	bl	13a8c <_start@@Base+0xc44>
   16290:	bl	13b90 <_start@@Base+0xd48>
   16294:	ldr	r1, [pc, #296]	; 163c4 <verify_monster@@Base+0x59c>
   16298:	mov	r4, r0
   1629c:	bl	129b8 <strcmp@plt>
   162a0:	subs	r7, r0, #0
   162a4:	movne	r1, r4
   162a8:	ldrne	r0, [pc, #304]	; 163e0 <verify_monster@@Base+0x5b8>
   162ac:	bne	16098 <verify_monster@@Base+0x270>
   162b0:	mov	r0, r5
   162b4:	bl	13918 <_start@@Base+0xad0>
   162b8:	subs	r4, r0, #0
   162bc:	beq	162cc <verify_monster@@Base+0x4a4>
   162c0:	ldr	r3, [r4, #-4]
   162c4:	cmp	r3, #3
   162c8:	beq	162d4 <verify_monster@@Base+0x4ac>
   162cc:	ldr	r0, [pc, #272]	; 163e4 <verify_monster@@Base+0x5bc>
   162d0:	b	15f78 <verify_monster@@Base+0x150>
   162d4:	mov	r1, r7
   162d8:	bl	13978 <_start@@Base+0xb30>
   162dc:	ldr	r1, [pc, #260]	; 163e8 <verify_monster@@Base+0x5c0>
   162e0:	bl	129b8 <strcmp@plt>
   162e4:	cmp	r0, #0
   162e8:	ldrne	r0, [pc, #252]	; 163ec <verify_monster@@Base+0x5c4>
   162ec:	bne	15f78 <verify_monster@@Base+0x150>
   162f0:	mov	r1, #1
   162f4:	mov	r0, r4
   162f8:	bl	13978 <_start@@Base+0xb30>
   162fc:	subs	r3, r0, #0
   16300:	beq	16310 <verify_monster@@Base+0x4e8>
   16304:	ldr	r7, [r3, #-4]
   16308:	cmp	r7, #2
   1630c:	beq	16450 <verify_monster@@Base+0x628>
   16310:	ldr	r0, [pc, #216]	; 163f0 <verify_monster@@Base+0x5c8>
   16314:	bl	129c4 <printf@plt>
   16318:	mvn	r4, #0
   1631c:	mov	r0, r4
   16320:	sub	sp, fp, #48	; 0x30
   16324:	vpop	{d8-d9}
   16328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1632c:	subgt	ip, ip, sp, asr #25
   16330:	svccc	0x00800000
   16334:	andmi	r0, r0, r0
   16338:	andeq	lr, r1, r4, lsr #21
   1633c:			; <UNDEFINED> instruction: 0x0001eab8
   16340:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   16344:	andeq	pc, r1, r4, lsl r9	; <UNPREDICTABLE>
   16348:	andeq	pc, r1, sp, asr #17
   1634c:	ldrdeq	pc, [r1], -r5
   16350:	andeq	pc, r1, r6, lsl #18
   16354:	andeq	pc, r1, fp, lsl #18
   16358:	andeq	pc, r1, sp, lsr r9	; <UNPREDICTABLE>
   1635c:	andeq	pc, r1, ip, lsl #5
   16360:	andeq	pc, r1, r3, ror #6
   16364:	andeq	pc, r1, pc, ror #18
   16368:	andeq	pc, r1, r2, lsl #19
   1636c:	andeq	pc, r1, r9, lsr #19
   16370:	andeq	pc, r1, sl, asr #19
   16374:	andeq	r3, r3, r8, lsl #1
   16378:	andeq	pc, r1, r0, ror #19
   1637c:	strdeq	pc, [r1], -r9
   16380:	andeq	pc, r1, r4, lsl #20
   16384:	andeq	pc, r1, r8, lsl sl	; <UNPREDICTABLE>
   16388:	andeq	pc, r1, r3, lsr sl	; <UNPREDICTABLE>
   1638c:	andeq	pc, r1, r1, asr sl	; <UNPREDICTABLE>
   16390:	andeq	pc, r1, sp, ror #20
   16394:	andeq	pc, r1, sl, lsl #21
   16398:	muleq	r1, fp, sl
   1639c:	andeq	pc, r1, pc, lsr #21
   163a0:	andeq	pc, r1, r2, lsr #7
   163a4:	andeq	pc, r1, pc, asr #21
   163a8:	strdeq	pc, [r1], -r5
   163ac:	andeq	lr, r1, r8, asr #21
   163b0:	muleq	r0, r6, r2
   163b4:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   163b8:	andeq	pc, r1, pc, lsl #23
   163bc:	muleq	r1, r3, fp
   163c0:	andeq	pc, r1, fp, lsr #23
   163c4:	andeq	r0, r2, r2, ror r5
   163c8:	andeq	pc, r1, r0, ror #23
   163cc:	muleq	r2, r7, r5
   163d0:	andeq	pc, r1, r2, lsl #24
   163d4:	andeq	pc, r1, r7, lsr #24
   163d8:	andeq	pc, r1, fp, asr #24
   163dc:	andeq	pc, r1, sp, ror #24
   163e0:	muleq	r1, r2, ip
   163e4:			; <UNDEFINED> instruction: 0x0001fcb7
   163e8:	andeq	pc, r1, r1, ror #25
   163ec:	andeq	pc, r1, r7, ror #25
   163f0:	strdeq	pc, [r1], -lr
   163f4:	ldrdeq	lr, [r1], -r7
   163f8:	andeq	pc, r1, r8, lsl sp	; <UNPREDICTABLE>
   163fc:	andeq	pc, r1, r8, lsr sp	; <UNPREDICTABLE>
   16400:	andeq	pc, r1, pc, lsr sp	; <UNPREDICTABLE>
   16404:	andeq	pc, r1, r6, asr sp	; <UNPREDICTABLE>
   16408:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   1640c:	andeq	pc, r1, pc, lsl #27
   16410:	andeq	pc, r1, lr, lsr #27
   16414:	ldrdeq	pc, [r1], -r7
   16418:	andeq	pc, r1, sl, lsl #28
   1641c:	strdeq	pc, [r1], -r7
   16420:	andeq	pc, r1, r4, lsl lr	; <UNPREDICTABLE>
   16424:	andeq	pc, r1, r8, lsr lr	; <UNPREDICTABLE>
   16428:	andeq	pc, r1, r3, lsr #23
   1642c:	andeq	pc, r1, sl, ror lr	; <UNPREDICTABLE>
   16430:			; <UNDEFINED> instruction: 0x0001feb3
   16434:	andeq	pc, r1, r7, asr #29
   16438:	ldrdeq	lr, [r1], -sl
   1643c:	andeq	r0, r0, pc, asr r2
   16440:	andeq	lr, r1, r3, lsl #26
   16444:	andeq	lr, r1, r5, ror #26
   16448:	andeq	pc, r1, r5, ror #29
   1644c:	andeq	pc, r1, sp, lsl fp	; <UNPREDICTABLE>
   16450:	mov	r2, r7
   16454:	ldr	r1, [pc, #-104]	; 163f4 <verify_monster@@Base+0x5cc>
   16458:	bl	129e8 <memcmp@plt>
   1645c:	cmp	r0, #0
   16460:	ldrne	r0, [pc, #-112]	; 163f8 <verify_monster@@Base+0x5d0>
   16464:	bne	15f78 <verify_monster@@Base+0x150>
   16468:	mov	r1, r7
   1646c:	mov	r0, r4
   16470:	bl	13978 <_start@@Base+0xb30>
   16474:	ldr	r1, [pc, #-128]	; 163fc <verify_monster@@Base+0x5d4>
   16478:	bl	129b8 <strcmp@plt>
   1647c:	cmp	r0, #0
   16480:	ldrne	r0, [pc, #-136]	; 16400 <verify_monster@@Base+0x5d8>
   16484:	bne	15f78 <verify_monster@@Base+0x150>
   16488:	cmp	r8, #53	; 0x35
   1648c:	bls	1649c <verify_monster@@Base+0x674>
   16490:	ldrh	r3, [r6, #52]	; 0x34
   16494:	cmp	r3, #0
   16498:	bne	164a4 <verify_monster@@Base+0x67c>
   1649c:	ldr	r0, [pc, #-160]	; 16404 <verify_monster@@Base+0x5dc>
   164a0:	b	15f78 <verify_monster@@Base+0x150>
   164a4:	mov	r0, r5
   164a8:	bl	139c4 <_start@@Base+0xb7c>
   164ac:	cmp	r0, #0
   164b0:	beq	164c8 <verify_monster@@Base+0x6a0>
   164b4:	ldr	r3, [r0, #-4]
   164b8:	cmp	r3, #4
   164bc:	moveq	r1, #0
   164c0:	subeq	r3, fp, #88	; 0x58
   164c4:	beq	164d0 <verify_monster@@Base+0x6a8>
   164c8:	ldr	r0, [pc, #-200]	; 16408 <verify_monster@@Base+0x5e0>
   164cc:	b	15f78 <verify_monster@@Base+0x150>
   164d0:	ldrb	ip, [r0, r1]
   164d4:	ldr	r2, [r3, r1, lsl #2]
   164d8:	cmp	ip, r2
   164dc:	ldrne	r0, [pc, #-216]	; 1640c <verify_monster@@Base+0x5e4>
   164e0:	bne	16098 <verify_monster@@Base+0x270>
   164e4:	add	r1, r1, #1
   164e8:	cmp	r1, #4
   164ec:	bne	164d0 <verify_monster@@Base+0x6a8>
   164f0:	mov	r0, r5
   164f4:	bl	13ad8 <_start@@Base+0xc90>
   164f8:	cmp	r0, #1
   164fc:	ldrne	r0, [pc, #-244]	; 16410 <verify_monster@@Base+0x5e8>
   16500:	bne	15f78 <verify_monster@@Base+0x150>
   16504:	mov	r0, r5
   16508:	bl	13b30 <_start@@Base+0xce8>
   1650c:	bl	13b90 <_start@@Base+0xd48>
   16510:	ldr	r1, [pc, #-240]	; 16428 <verify_monster@@Base+0x600>
   16514:	bl	129b8 <strcmp@plt>
   16518:	cmp	r0, #0
   1651c:	ldrne	r0, [pc, #-272]	; 16414 <verify_monster@@Base+0x5ec>
   16520:	bne	15f78 <verify_monster@@Base+0x150>
   16524:	ldrh	r4, [r6, #28]
   16528:	cmp	r4, #0
   1652c:	addne	r3, r5, r4
   16530:	ldrne	r4, [r5, r4]
   16534:	addne	r4, r3, r4
   16538:	mov	r0, r4
   1653c:	bl	13b90 <_start@@Base+0xd48>
   16540:	ldr	r1, [pc, #-304]	; 16418 <verify_monster@@Base+0x5f0>
   16544:	bl	129b8 <strcmp@plt>
   16548:	cmp	r0, #0
   1654c:	ldrne	r0, [pc, #-312]	; 1641c <verify_monster@@Base+0x5f4>
   16550:	bne	15f78 <verify_monster@@Base+0x150>
   16554:	mov	r0, r4
   16558:	bl	13ad8 <_start@@Base+0xc90>
   1655c:	cmp	r0, #0
   16560:	ldrne	r0, [pc, #-328]	; 16420 <verify_monster@@Base+0x5f8>
   16564:	bne	15f78 <verify_monster@@Base+0x150>
   16568:	mov	r0, r4
   1656c:	bl	13a28 <_start@@Base+0xbe0>
   16570:	cmp	r0, #0
   16574:	moveq	r1, r0
   16578:	ldrne	r1, [r0, #-4]
   1657c:	sub	r1, r1, #1
   16580:	bl	13a8c <_start@@Base+0xc44>
   16584:	mov	r4, r0
   16588:	bl	13ad8 <_start@@Base+0xc90>
   1658c:	cmp	r0, #1
   16590:	ldrne	r0, [pc, #-372]	; 16424 <verify_monster@@Base+0x5fc>
   16594:	bne	15f78 <verify_monster@@Base+0x150>
   16598:	mov	r0, r4
   1659c:	bl	13b30 <_start@@Base+0xce8>
   165a0:	bl	13b90 <_start@@Base+0xd48>
   165a4:	ldr	r1, [pc, #-388]	; 16428 <verify_monster@@Base+0x600>
   165a8:	bl	129b8 <strcmp@plt>
   165ac:	subs	r4, r0, #0
   165b0:	ldrne	r0, [pc, #-396]	; 1642c <verify_monster@@Base+0x604>
   165b4:	bne	15f78 <verify_monster@@Base+0x150>
   165b8:	ldrh	r3, [r6, #34]	; 0x22
   165bc:	cmp	r3, #0
   165c0:	beq	165d0 <verify_monster@@Base+0x7a8>
   165c4:	ldrb	r3, [r5, r3]
   165c8:	cmp	r3, #0
   165cc:	beq	165d8 <verify_monster@@Base+0x7b0>
   165d0:	ldr	r0, [pc, #-424]	; 16430 <verify_monster@@Base+0x608>
   165d4:	b	15f78 <verify_monster@@Base+0x150>
   165d8:	ldrh	r3, [r6, #32]
   165dc:	cmp	r3, #0
   165e0:	ldreq	r0, [pc, #-436]	; 16434 <verify_monster@@Base+0x60c>
   165e4:	beq	15f78 <verify_monster@@Base+0x150>
   165e8:	mov	r0, r5
   165ec:	bl	14010 <_start@@Base+0x11c8>
   165f0:	cmp	r0, #0
   165f4:	ldreq	r3, [pc, #-452]	; 16438 <verify_monster@@Base+0x610>
   165f8:	ldreq	r2, [pc, #-452]	; 1643c <verify_monster@@Base+0x614>
   165fc:	ldreq	r1, [pc, #-452]	; 16440 <verify_monster@@Base+0x618>
   16600:	ldreq	r0, [pc, #-452]	; 16444 <verify_monster@@Base+0x61c>
   16604:	beq	16178 <verify_monster@@Base+0x350>
   16608:	ldr	r3, [r0]
   1660c:	sub	r0, r0, r3
   16610:	ldrh	r3, [r0]
   16614:	cmp	r3, #5
   16618:	bls	1631c <verify_monster@@Base+0x4f4>
   1661c:	ldrh	r2, [r0, #4]
   16620:	cmp	r2, #0
   16624:	bne	16650 <verify_monster@@Base+0x828>
   16628:	cmp	r3, #7
   1662c:	bls	1631c <verify_monster@@Base+0x4f4>
   16630:	ldrh	r2, [r0, #6]
   16634:	cmp	r2, #0
   16638:	bne	16650 <verify_monster@@Base+0x828>
   1663c:	cmp	r3, #9
   16640:	bls	1631c <verify_monster@@Base+0x4f4>
   16644:	ldrh	r3, [r0, #8]
   16648:	cmp	r3, #0
   1664c:	beq	1631c <verify_monster@@Base+0x4f4>
   16650:	ldr	r0, [pc, #-528]	; 16448 <verify_monster@@Base+0x620>
   16654:	b	15f78 <verify_monster@@Base+0x150>
   16658:	ldrsb	r2, [r7, #2]
   1665c:	ldrsb	r3, [r0, #2]
   16660:	cmp	r3, r2
   16664:	bne	1614c <verify_monster@@Base+0x324>
   16668:	add	r4, r4, #1
   1666c:	cmp	r4, #5
   16670:	add	r7, r7, #4
   16674:	bne	16128 <verify_monster@@Base+0x300>
   16678:	mov	r0, r5
   1667c:	bl	13a28 <_start@@Base+0xbe0>
   16680:	subs	r7, r0, #0
   16684:	beq	16694 <verify_monster@@Base+0x86c>
   16688:	ldr	r3, [r7, #-4]
   1668c:	cmp	r3, #8
   16690:	beq	16158 <verify_monster@@Base+0x330>
   16694:	ldr	r0, [pc, #-592]	; 1644c <verify_monster@@Base+0x624>
   16698:	b	15f78 <verify_monster@@Base+0x150>
   1669c:	cmp	r3, #0
   166a0:	bne	1614c <verify_monster@@Base+0x324>
   166a4:	ldrsb	r2, [r7, #2]
   166a8:	mov	r3, sl
   166ac:	b	16660 <verify_monster@@Base+0x838>

000166b0 <gen_monster@@Base>:
   166b0:	push	{r4, r5, r6, r7, lr}
   166b4:	mov	r4, r0
   166b8:	ldr	r5, [pc, #1336]	; 16bf8 <gen_monster@@Base+0x548>
   166bc:	sub	sp, sp, #44	; 0x2c
   166c0:	mov	r7, r1
   166c4:	ldr	r0, [r5]
   166c8:	ldr	r1, [r5, #4]
   166cc:	ldrh	r2, [r5, #8]
   166d0:	add	r3, sp, #16
   166d4:	mov	r6, #0
   166d8:	stmia	r3!, {r0, r1}
   166dc:	mov	r0, r4
   166e0:	strh	r2, [r3]
   166e4:	mov	r3, #1
   166e8:	strb	r6, [sp, #4]
   166ec:	strb	r3, [sp, #5]
   166f0:	strb	r3, [sp, #6]
   166f4:	strb	r6, [sp, #7]
   166f8:	bl	1acd8 <flatcc_builder_reset@@Base>
   166fc:	cmp	r7, r6
   16700:	beq	16868 <gen_monster@@Base+0x1b8>
   16704:	mov	r3, #2
   16708:	mov	r2, r6
   1670c:	ldr	r1, [pc, #1256]	; 16bfc <gen_monster@@Base+0x54c>
   16710:	mov	r0, r4
   16714:	bl	1b25c <flatcc_builder_start_buffer@@Base>
   16718:	cmp	r0, r6
   1671c:	bne	16728 <gen_monster@@Base+0x78>
   16720:	mov	r0, r4
   16724:	bl	130e4 <_start@@Base+0x29c>
   16728:	mov	r1, #80	; 0x50
   1672c:	mov	r0, r4
   16730:	bl	14218 <_start@@Base+0x13d0>
   16734:	mov	r2, #32
   16738:	mov	r3, #16
   1673c:	mov	r1, #0
   16740:	mov	r0, r4
   16744:	bl	1ca20 <flatcc_builder_table_add@@Base>
   16748:	mov	r3, #1065353216	; 0x3f800000
   1674c:	ldr	r1, [pc, #1196]	; 16c00 <gen_monster@@Base+0x550>
   16750:	str	r3, [r0]
   16754:	mov	r3, #1073741824	; 0x40000000
   16758:	str	r3, [r0, #4]
   1675c:	ldr	r3, [pc, #1184]	; 16c04 <gen_monster@@Base+0x554>
   16760:	str	r3, [r0, #8]
   16764:	mov	r0, r4
   16768:	bl	13324 <_start@@Base+0x4dc>
   1676c:	mov	r3, #1
   16770:	mov	r2, r3
   16774:	mov	r1, #6
   16778:	mov	r0, r4
   1677c:	bl	1ca20 <flatcc_builder_table_add@@Base>
   16780:	mov	r2, #10
   16784:	add	r1, sp, #16
   16788:	cmp	r0, #0
   1678c:	movne	r3, #2
   16790:	strbne	r3, [r0]
   16794:	mov	r0, r4
   16798:	bl	15050 <_start@@Base+0x2208>
   1679c:	mov	r0, r4
   167a0:	bl	13340 <_start@@Base+0x4f8>
   167a4:	mov	r1, #1
   167a8:	mov	r0, r4
   167ac:	bl	1b46c <flatcc_builder_extend_vector@@Base>
   167b0:	mov	r3, #16
   167b4:	mov	r1, #2
   167b8:	strh	r3, [r0]
   167bc:	mov	r3, #32
   167c0:	strb	r3, [r0, #2]
   167c4:	mov	r0, r4
   167c8:	bl	1b46c <flatcc_builder_extend_vector@@Base>
   167cc:	mov	r3, #48	; 0x30
   167d0:	mov	r1, #1
   167d4:	strh	r3, [r0]
   167d8:	mov	r3, #64	; 0x40
   167dc:	strb	r3, [r0, #2]
   167e0:	mov	r3, #80	; 0x50
   167e4:	strh	r3, [r0, #4]
   167e8:	mov	r3, #96	; 0x60
   167ec:	strb	r3, [r0, #6]
   167f0:	mov	r0, r4
   167f4:	bl	1b46c <flatcc_builder_extend_vector@@Base>
   167f8:	mov	r1, sp
   167fc:	cmp	r0, #0
   16800:	movne	r3, #112	; 0x70
   16804:	strhne	r3, [r0]
   16808:	mvnne	r3, #127	; 0x7f
   1680c:	strbne	r3, [r0, #2]
   16810:	mov	r3, #400	; 0x190
   16814:	strh	r3, [sp]
   16818:	mov	r0, r4
   1681c:	mvn	r3, #110	; 0x6e
   16820:	strb	r3, [sp, #2]
   16824:	bl	13350 <_start@@Base+0x508>
   16828:	mov	r1, sp
   1682c:	mov	r0, r4
   16830:	bl	13350 <_start@@Base+0x508>
   16834:	mov	r1, sp
   16838:	mov	r0, r4
   1683c:	bl	13350 <_start@@Base+0x508>
   16840:	mov	r0, r4
   16844:	bl	1c334 <flatcc_builder_vector_count@@Base>
   16848:	cmp	r0, #7
   1684c:	mov	r6, r0
   16850:	beq	16874 <gen_monster@@Base+0x1c4>
   16854:	ldr	r2, [pc, #940]	; 16c08 <gen_monster@@Base+0x558>
   16858:	ldr	r1, [pc, #940]	; 16c0c <gen_monster@@Base+0x55c>
   1685c:	ldr	r0, [pc, #940]	; 16c10 <gen_monster@@Base+0x560>
   16860:	add	r3, r5, #10
   16864:	bl	12ab4 <__assert_fail@plt>
   16868:	mov	r0, r4
   1686c:	bl	130ec <_start@@Base+0x2a4>
   16870:	b	16728 <gen_monster@@Base+0x78>
   16874:	mov	r1, #2
   16878:	mov	r0, r4
   1687c:	bl	1b7e8 <flatcc_builder_truncate_vector@@Base>
   16880:	mov	r0, r4
   16884:	bl	1c334 <flatcc_builder_vector_count@@Base>
   16888:	cmp	r0, #5
   1688c:	addne	r3, r5, #10
   16890:	ldrne	r2, [pc, #892]	; 16c14 <gen_monster@@Base+0x564>
   16894:	ldrne	r1, [pc, #880]	; 16c0c <gen_monster@@Base+0x55c>
   16898:	ldrne	r0, [pc, #888]	; 16c18 <gen_monster@@Base+0x568>
   1689c:	bne	16864 <gen_monster@@Base+0x1b4>
   168a0:	mov	r0, r4
   168a4:	bl	1c340 <flatcc_builder_vector_edit@@Base>
   168a8:	ldrh	r3, [r0, #16]
   168ac:	add	r3, r3, #1
   168b0:	strh	r3, [r0, #16]
   168b4:	mov	r0, r4
   168b8:	bl	13370 <_start@@Base+0x528>
   168bc:	mov	r0, r4
   168c0:	bl	130e4 <_start@@Base+0x29c>
   168c4:	mov	r2, r6
   168c8:	ldr	r1, [pc, #844]	; 16c1c <gen_monster@@Base+0x56c>
   168cc:	mov	r0, r4
   168d0:	bl	1c890 <flatcc_builder_create_string@@Base>
   168d4:	mov	r1, r0
   168d8:	mov	r0, r4
   168dc:	bl	13150 <_start@@Base+0x308>
   168e0:	mov	r0, r4
   168e4:	bl	142a4 <_start@@Base+0x145c>
   168e8:	mov	r6, r0
   168ec:	mov	r0, r4
   168f0:	bl	1b99c <flatcc_builder_start_offset_vector@@Base>
   168f4:	mov	r1, #2
   168f8:	mov	r0, r4
   168fc:	bl	1b598 <flatcc_builder_extend_offset_vector@@Base>
   16900:	str	r6, [r0]
   16904:	str	r6, [r0, #4]
   16908:	mov	r0, r4
   1690c:	bl	1311c <_start@@Base+0x2d4>
   16910:	mov	r2, #30
   16914:	ldr	r1, [pc, #772]	; 16c20 <gen_monster@@Base+0x570>
   16918:	mov	r0, r4
   1691c:	bl	1c950 <flatcc_builder_create_string_strn@@Base>
   16920:	mov	r1, r0
   16924:	mov	r0, r4
   16928:	bl	13150 <_start@@Base+0x308>
   1692c:	mov	r0, r4
   16930:	bl	15000 <_start@@Base+0x21b8>
   16934:	mov	r1, #3
   16938:	ldr	r7, [r0]
   1693c:	mov	r0, r4
   16940:	bl	1b598 <flatcc_builder_extend_offset_vector@@Base>
   16944:	mov	r1, #1
   16948:	stm	r0, {r6, r7}
   1694c:	mov	r0, r4
   16950:	bl	1b860 <flatcc_builder_truncate_offset_vector@@Base>
   16954:	mov	r0, r4
   16958:	bl	1c488 <flatcc_builder_offset_vector_count@@Base>
   1695c:	cmp	r0, #5
   16960:	addne	r3, r5, #10
   16964:	ldrne	r2, [pc, #696]	; 16c24 <gen_monster@@Base+0x574>
   16968:	ldrne	r1, [pc, #668]	; 16c0c <gen_monster@@Base+0x55c>
   1696c:	ldrne	r0, [pc, #692]	; 16c28 <gen_monster@@Base+0x578>
   16970:	bne	16864 <gen_monster@@Base+0x1b4>
   16974:	mov	r0, r4
   16978:	bl	1311c <_start@@Base+0x2d4>
   1697c:	mov	r2, #8
   16980:	ldr	r1, [pc, #676]	; 16c2c <gen_monster@@Base+0x57c>
   16984:	mov	r0, r4
   16988:	bl	1c950 <flatcc_builder_create_string_strn@@Base>
   1698c:	mov	r1, r0
   16990:	mov	r0, r4
   16994:	bl	13150 <_start@@Base+0x308>
   16998:	mov	r0, r4
   1699c:	bl	15000 <_start@@Base+0x21b8>
   169a0:	ldr	r3, [r0]
   169a4:	mov	r0, r4
   169a8:	str	r3, [sp, #8]
   169ac:	bl	1c488 <flatcc_builder_offset_vector_count@@Base>
   169b0:	cmp	r0, #6
   169b4:	addne	r3, r5, #10
   169b8:	ldrne	r2, [pc, #624]	; 16c30 <gen_monster@@Base+0x580>
   169bc:	ldrne	r1, [pc, #584]	; 16c0c <gen_monster@@Base+0x55c>
   169c0:	ldrne	r0, [pc, #620]	; 16c34 <gen_monster@@Base+0x584>
   169c4:	bne	16864 <gen_monster@@Base+0x1b4>
   169c8:	mov	r0, r4
   169cc:	bl	1c480 <flatcc_builder_offset_vector_edit@@Base>
   169d0:	add	r1, sp, #8
   169d4:	ldr	r3, [r0, #20]
   169d8:	ldr	r2, [r0, #8]
   169dc:	str	r6, [r0, #20]
   169e0:	str	r2, [sp, #12]
   169e4:	str	r3, [r0]
   169e8:	mov	r2, #2
   169ec:	mov	r0, r4
   169f0:	bl	1b63c <flatcc_builder_append_offset_vector@@Base>
   169f4:	mov	r0, r4
   169f8:	bl	150a0 <_start@@Base+0x2258>
   169fc:	ldr	r1, [pc, #564]	; 16c38 <gen_monster@@Base+0x588>
   16a00:	mov	r0, r4
   16a04:	bl	1c928 <flatcc_builder_create_string_str@@Base>
   16a08:	mov	r2, #2
   16a0c:	ldr	r1, [pc, #552]	; 16c3c <gen_monster@@Base+0x58c>
   16a10:	str	r0, [sp, #28]
   16a14:	mov	r0, r4
   16a18:	bl	1c890 <flatcc_builder_create_string@@Base>
   16a1c:	ldr	r1, [pc, #540]	; 16c40 <gen_monster@@Base+0x590>
   16a20:	str	r0, [sp, #32]
   16a24:	mov	r0, r4
   16a28:	bl	1c928 <flatcc_builder_create_string_str@@Base>
   16a2c:	mov	r2, #3
   16a30:	add	r1, sp, #28
   16a34:	str	r0, [sp, #36]	; 0x24
   16a38:	mov	r0, r4
   16a3c:	bl	1c3c0 <flatcc_builder_create_offset_vector@@Base>
   16a40:	mov	r1, r0
   16a44:	mov	r0, r4
   16a48:	bl	13120 <_start@@Base+0x2d8>
   16a4c:	mov	r2, #1
   16a50:	mvn	r3, #0
   16a54:	mov	r1, r2
   16a58:	mov	r0, r4
   16a5c:	bl	1b944 <flatcc_builder_start_vector@@Base>
   16a60:	mov	r2, #1
   16a64:	add	r1, sp, #4
   16a68:	mov	r0, r4
   16a6c:	bl	1b51c <flatcc_builder_append_vector@@Base>
   16a70:	mov	r2, #3
   16a74:	add	r1, sp, #5
   16a78:	mov	r0, r4
   16a7c:	bl	1b51c <flatcc_builder_append_vector@@Base>
   16a80:	mov	r0, r4
   16a84:	bl	1c2bc <flatcc_builder_end_vector@@Base>
   16a88:	mov	r1, r0
   16a8c:	mov	r0, r4
   16a90:	bl	131b0 <_start@@Base+0x368>
   16a94:	mov	r2, r6
   16a98:	mov	r1, #1
   16a9c:	mov	r0, r4
   16aa0:	bl	14244 <_start@@Base+0x13fc>
   16aa4:	mov	r0, r4
   16aa8:	bl	1311c <_start@@Base+0x2d4>
   16aac:	ldr	r1, [pc, #400]	; 16c44 <gen_monster@@Base+0x594>
   16ab0:	mov	r0, r4
   16ab4:	bl	13324 <_start@@Base+0x4dc>
   16ab8:	mov	r0, r4
   16abc:	bl	1b99c <flatcc_builder_start_offset_vector@@Base>
   16ac0:	mov	r0, r4
   16ac4:	bl	1311c <_start@@Base+0x2d4>
   16ac8:	mov	r2, r6
   16acc:	mov	r1, #1
   16ad0:	mov	r0, r4
   16ad4:	bl	14244 <_start@@Base+0x13fc>
   16ad8:	ldr	r1, [pc, #360]	; 16c48 <gen_monster@@Base+0x598>
   16adc:	mov	r0, r4
   16ae0:	bl	13324 <_start@@Base+0x4dc>
   16ae4:	mov	r0, r4
   16ae8:	bl	15000 <_start@@Base+0x21b8>
   16aec:	mov	r0, r4
   16af0:	bl	1311c <_start@@Base+0x2d4>
   16af4:	mov	r2, r6
   16af8:	mov	r1, #1
   16afc:	mov	r0, r4
   16b00:	bl	14244 <_start@@Base+0x13fc>
   16b04:	ldr	r1, [pc, #316]	; 16c48 <gen_monster@@Base+0x598>
   16b08:	mov	r0, r4
   16b0c:	bl	13324 <_start@@Base+0x4dc>
   16b10:	mov	r0, r4
   16b14:	bl	15000 <_start@@Base+0x21b8>
   16b18:	mov	r0, r4
   16b1c:	bl	1311c <_start@@Base+0x2d4>
   16b20:	mov	r1, #8
   16b24:	mov	r0, r4
   16b28:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   16b2c:	ldr	r1, [pc, #276]	; 16c48 <gen_monster@@Base+0x598>
   16b30:	cmp	r0, #0
   16b34:	strne	r6, [r0]
   16b38:	mov	r0, r4
   16b3c:	bl	13324 <_start@@Base+0x4dc>
   16b40:	mov	r3, #1
   16b44:	mov	r2, r3
   16b48:	mov	r1, #7
   16b4c:	mov	r0, r4
   16b50:	bl	1ca20 <flatcc_builder_table_add@@Base>
   16b54:	cmp	r0, #0
   16b58:	movne	r3, #1
   16b5c:	strbne	r3, [r0]
   16b60:	mov	r0, r4
   16b64:	bl	15000 <_start@@Base+0x21b8>
   16b68:	mov	r0, r4
   16b6c:	bl	150a0 <_start@@Base+0x2258>
   16b70:	mov	r0, r4
   16b74:	bl	142a4 <_start@@Base+0x145c>
   16b78:	subs	r5, r0, #0
   16b7c:	beq	16b94 <gen_monster@@Base+0x4e4>
   16b80:	mov	r1, #12
   16b84:	mov	r0, r4
   16b88:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   16b8c:	cmp	r0, #0
   16b90:	strne	r5, [r0]
   16b94:	mov	r3, #1
   16b98:	mov	r2, r3
   16b9c:	mov	r1, #15
   16ba0:	mov	r0, r4
   16ba4:	bl	1ca20 <flatcc_builder_table_add@@Base>
   16ba8:	mov	r1, #3
   16bac:	cmp	r0, #0
   16bb0:	movne	r3, #0
   16bb4:	strbne	r3, [r0]
   16bb8:	mov	r0, r4
   16bbc:	bl	1ba60 <flatcc_builder_start_table@@Base>
   16bc0:	mov	r0, r4
   16bc4:	bl	14378 <_start@@Base+0x1530>
   16bc8:	subs	r5, r0, #0
   16bcc:	beq	16be4 <gen_monster@@Base+0x534>
   16bd0:	mov	r1, #14
   16bd4:	mov	r0, r4
   16bd8:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   16bdc:	cmp	r0, #0
   16be0:	strne	r5, [r0]
   16be4:	mov	r0, r4
   16be8:	bl	142f0 <_start@@Base+0x14a8>
   16bec:	mov	r0, #0
   16bf0:	add	sp, sp, #44	; 0x2c
   16bf4:	pop	{r4, r5, r6, r7, pc}
   16bf8:	strdeq	lr, [r1], -ip
   16bfc:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   16c00:	strdeq	pc, [r1], -r9
   16c04:	subgt	ip, ip, sp, asr #25
   16c08:	andeq	r0, r0, r1, ror r3
   16c0c:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   16c10:	strdeq	pc, [r1], -sp
   16c14:	andeq	r0, r0, r3, ror r3
   16c18:	andeq	pc, r1, r4, lsr #30
   16c1c:	andeq	pc, r1, r3, lsr #23
   16c20:	andeq	r0, r2, r2, ror r5
   16c24:	muleq	r0, fp, r3
   16c28:	andeq	pc, r1, fp, asr #30
   16c2c:	andeq	pc, r1, lr, ror pc	; <UNPREDICTABLE>
   16c30:	andeq	r0, r0, r1, lsr #7
   16c34:	muleq	r1, sl, pc	; <UNPREDICTABLE>
   16c38:	andeq	pc, r1, r1, ror #25
   16c3c:	ldrdeq	lr, [r1], -r7
   16c40:	andeq	pc, r1, r8, lsr sp	; <UNPREDICTABLE>
   16c44:	andeq	pc, r1, sl, lsl #28
   16c48:	andeq	pc, r1, sp, asr #31

00016c4c <test_monster@@Base>:
   16c4c:	push	{r0, r1, r2, r4, r5, lr}
   16c50:	mov	r4, r0
   16c54:	mov	r1, #0
   16c58:	bl	166b0 <gen_monster@@Base>
   16c5c:	add	r1, sp, #4
   16c60:	mov	r0, r4
   16c64:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   16c68:	ldr	r3, [pc, #96]	; 16cd0 <test_monster@@Base+0x84>
   16c6c:	ldr	r2, [sp, #4]
   16c70:	ldr	r3, [r3]
   16c74:	mov	r1, r0
   16c78:	mov	r4, r0
   16c7c:	ldr	r0, [pc, #80]	; 16cd4 <test_monster@@Base+0x88>
   16c80:	bl	13214 <_start@@Base+0x3cc>
   16c84:	ldr	r1, [sp, #4]
   16c88:	mov	r0, r4
   16c8c:	bl	131e0 <_start@@Base+0x398>
   16c90:	cmp	r0, #0
   16c94:	beq	16cb8 <test_monster@@Base+0x6c>
   16c98:	bl	1d918 <flatcc_verify_error_string@@Base>
   16c9c:	mvn	r5, #0
   16ca0:	mov	r1, r0
   16ca4:	ldr	r0, [pc, #44]	; 16cd8 <test_monster@@Base+0x8c>
   16ca8:	bl	129c4 <printf@plt>
   16cac:	mov	r0, r5
   16cb0:	add	sp, sp, #12
   16cb4:	pop	{r4, r5, pc}
   16cb8:	mov	r0, r4
   16cbc:	bl	15e28 <verify_monster@@Base>
   16cc0:	mov	r5, r0
   16cc4:	mov	r0, r4
   16cc8:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   16ccc:	b	16cac <test_monster@@Base+0x60>
   16cd0:	andeq	r3, r3, r8, ror r0
   16cd4:	andeq	pc, r1, sp, ror r5	; <UNPREDICTABLE>
   16cd8:	ldrdeq	pc, [r1], -r6

00016cdc <test_monster_with_size@@Base>:
   16cdc:	push	{r0, r1, r2, r4, r5, lr}
   16ce0:	mov	r4, r0
   16ce4:	mov	r1, #1
   16ce8:	bl	166b0 <gen_monster@@Base>
   16cec:	add	r1, sp, #4
   16cf0:	mov	r0, r4
   16cf4:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   16cf8:	ldr	r3, [pc, #160]	; 16da0 <test_monster_with_size@@Base+0xc4>
   16cfc:	ldr	r2, [sp, #4]
   16d00:	ldr	r3, [r3]
   16d04:	mov	r4, r0
   16d08:	mov	r1, r0
   16d0c:	ldr	r0, [pc, #144]	; 16da4 <test_monster_with_size@@Base+0xc8>
   16d10:	bl	13214 <_start@@Base+0x3cc>
   16d14:	tst	r4, #15
   16d18:	beq	16d34 <test_monster_with_size@@Base+0x58>
   16d1c:	ldr	r0, [pc, #132]	; 16da8 <test_monster_with_size@@Base+0xcc>
   16d20:	bl	129c4 <printf@plt>
   16d24:	ldr	r0, [pc, #128]	; 16dac <test_monster_with_size@@Base+0xd0>
   16d28:	mov	r1, r4
   16d2c:	bl	129c4 <printf@plt>
   16d30:	b	16d54 <test_monster_with_size@@Base+0x78>
   16d34:	mov	r5, r4
   16d38:	ldr	r2, [sp, #4]
   16d3c:	ldr	r1, [r5], #4
   16d40:	sub	r2, r2, #4
   16d44:	cmp	r2, r1
   16d48:	beq	16d64 <test_monster_with_size@@Base+0x88>
   16d4c:	ldr	r0, [pc, #92]	; 16db0 <test_monster_with_size@@Base+0xd4>
   16d50:	bl	129c4 <printf@plt>
   16d54:	mvn	r5, #0
   16d58:	mov	r0, r5
   16d5c:	add	sp, sp, #12
   16d60:	pop	{r4, r5, pc}
   16d64:	mov	r1, r2
   16d68:	mov	r0, r5
   16d6c:	bl	131e0 <_start@@Base+0x398>
   16d70:	cmp	r0, #0
   16d74:	beq	16d88 <test_monster_with_size@@Base+0xac>
   16d78:	bl	1d918 <flatcc_verify_error_string@@Base>
   16d7c:	mov	r1, r0
   16d80:	ldr	r0, [pc, #44]	; 16db4 <test_monster_with_size@@Base+0xd8>
   16d84:	b	16d2c <test_monster_with_size@@Base+0x50>
   16d88:	mov	r0, r5
   16d8c:	bl	15e28 <verify_monster@@Base>
   16d90:	mov	r5, r0
   16d94:	mov	r0, r4
   16d98:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   16d9c:	b	16d58 <test_monster_with_size@@Base+0x7c>
   16da0:	andeq	r3, r3, r8, ror r0
   16da4:	andeq	r0, r2, r0
   16da8:	andeq	r0, r2, r8, lsl r0
   16dac:	andeq	r0, r2, r9, rrx
   16db0:	andeq	r0, r2, sp, ror r0
   16db4:	strheq	r0, [r2], -r3

00016db8 <test_string@@Base>:
   16db8:	push	{r4, lr}
   16dbc:	mov	r4, r0
   16dc0:	bl	1acd8 <flatcc_builder_reset@@Base>
   16dc4:	mov	r0, r4
   16dc8:	bl	130ec <_start@@Base+0x2a4>
   16dcc:	mov	r0, r4
   16dd0:	bl	1b9e4 <flatcc_builder_start_string@@Base>
   16dd4:	mov	r1, #3
   16dd8:	mov	r0, r4
   16ddc:	bl	1b6ac <flatcc_builder_extend_string@@Base>
   16de0:	mov	r3, #49	; 0x31
   16de4:	ldr	r1, [pc, #320]	; 16f2c <test_string@@Base+0x174>
   16de8:	strb	r3, [r0]
   16dec:	mov	r3, #50	; 0x32
   16df0:	strb	r3, [r0, #1]
   16df4:	mov	r3, #51	; 0x33
   16df8:	strb	r3, [r0, #2]
   16dfc:	mov	r0, r4
   16e00:	bl	1b788 <flatcc_builder_append_string_str@@Base>
   16e04:	mov	r0, r4
   16e08:	bl	1ca14 <flatcc_builder_string_len@@Base>
   16e0c:	cmp	r0, #4
   16e10:	beq	16e28 <test_string@@Base+0x70>
   16e14:	ldr	r3, [pc, #276]	; 16f30 <test_string@@Base+0x178>
   16e18:	ldr	r2, [pc, #276]	; 16f34 <test_string@@Base+0x17c>
   16e1c:	ldr	r1, [pc, #276]	; 16f38 <test_string@@Base+0x180>
   16e20:	ldr	r0, [pc, #276]	; 16f3c <test_string@@Base+0x184>
   16e24:	bl	12ab4 <__assert_fail@plt>
   16e28:	mov	r2, #30
   16e2c:	ldr	r1, [pc, #268]	; 16f40 <test_string@@Base+0x188>
   16e30:	mov	r0, r4
   16e34:	bl	1b7b0 <flatcc_builder_append_string_strn@@Base>
   16e38:	mov	r0, r4
   16e3c:	bl	1ca14 <flatcc_builder_string_len@@Base>
   16e40:	cmp	r0, #8
   16e44:	ldrne	r3, [pc, #228]	; 16f30 <test_string@@Base+0x178>
   16e48:	ldrne	r2, [pc, #244]	; 16f44 <test_string@@Base+0x18c>
   16e4c:	ldrne	r1, [pc, #228]	; 16f38 <test_string@@Base+0x180>
   16e50:	ldrne	r0, [pc, #240]	; 16f48 <test_string@@Base+0x190>
   16e54:	bne	16e24 <test_string@@Base+0x6c>
   16e58:	mov	r2, #2
   16e5c:	ldr	r1, [pc, #232]	; 16f4c <test_string@@Base+0x194>
   16e60:	mov	r0, r4
   16e64:	bl	1b714 <flatcc_builder_append_string@@Base>
   16e68:	mov	r0, r4
   16e6c:	bl	1ca14 <flatcc_builder_string_len@@Base>
   16e70:	cmp	r0, #10
   16e74:	ldrne	r3, [pc, #180]	; 16f30 <test_string@@Base+0x178>
   16e78:	ldrne	r2, [pc, #208]	; 16f50 <test_string@@Base+0x198>
   16e7c:	ldrne	r1, [pc, #180]	; 16f38 <test_string@@Base+0x180>
   16e80:	ldrne	r0, [pc, #204]	; 16f54 <test_string@@Base+0x19c>
   16e84:	bne	16e24 <test_string@@Base+0x6c>
   16e88:	mov	r1, #3
   16e8c:	mov	r0, r4
   16e90:	bl	1b8d8 <flatcc_builder_truncate_string@@Base>
   16e94:	mov	r0, r4
   16e98:	bl	1ca14 <flatcc_builder_string_len@@Base>
   16e9c:	cmp	r0, #7
   16ea0:	ldrne	r3, [pc, #136]	; 16f30 <test_string@@Base+0x178>
   16ea4:	ldrne	r2, [pc, #172]	; 16f58 <test_string@@Base+0x1a0>
   16ea8:	ldrne	r1, [pc, #136]	; 16f38 <test_string@@Base+0x180>
   16eac:	ldrne	r0, [pc, #168]	; 16f5c <test_string@@Base+0x1a4>
   16eb0:	bne	16e24 <test_string@@Base+0x6c>
   16eb4:	mov	r0, r4
   16eb8:	bl	1ca0c <flatcc_builder_string_edit@@Base>
   16ebc:	mov	r3, #46	; 0x2e
   16ec0:	strb	r3, [r0, #4]
   16ec4:	mov	r0, r4
   16ec8:	bl	1c988 <flatcc_builder_end_string@@Base>
   16ecc:	mov	r1, r0
   16ed0:	mov	r0, r4
   16ed4:	bl	13150 <_start@@Base+0x308>
   16ed8:	mov	r0, r4
   16edc:	bl	142f0 <_start@@Base+0x14a8>
   16ee0:	mov	r1, #0
   16ee4:	mov	r0, r4
   16ee8:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   16eec:	cmp	r0, #0
   16ef0:	ldreq	r3, [pc, #56]	; 16f30 <test_string@@Base+0x178>
   16ef4:	ldreq	r2, [pc, #100]	; 16f60 <test_string@@Base+0x1a8>
   16ef8:	ldreq	r1, [pc, #56]	; 16f38 <test_string@@Base+0x180>
   16efc:	ldreq	r0, [pc, #96]	; 16f64 <test_string@@Base+0x1ac>
   16f00:	beq	16e24 <test_string@@Base+0x6c>
   16f04:	bl	12fe4 <_start@@Base+0x19c>
   16f08:	bl	13b90 <_start@@Base+0xd48>
   16f0c:	ldr	r1, [pc, #84]	; 16f68 <test_string@@Base+0x1b0>
   16f10:	bl	129b8 <strcmp@plt>
   16f14:	cmp	r0, #0
   16f18:	popeq	{r4, pc}
   16f1c:	ldr	r0, [pc, #72]	; 16f6c <test_string@@Base+0x1b4>
   16f20:	bl	12a0c <puts@plt>
   16f24:	mvn	r0, #0
   16f28:	pop	{r4, pc}
   16f2c:	andeq	r0, r2, r2, lsl r1
   16f30:	andeq	lr, r1, r2, lsl fp
   16f34:	andeq	r0, r0, r8, lsr r4
   16f38:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   16f3c:	andeq	r0, r2, lr, ror #1
   16f40:	andeq	r0, r2, r4, lsl r1
   16f44:	andeq	r0, r0, sl, lsr r4
   16f48:	andeq	r0, r2, r9, lsl r1
   16f4c:	andeq	r0, r2, pc, lsr r1
   16f50:	andeq	r0, r0, ip, lsr r4
   16f54:	andeq	r0, r2, r2, asr #2
   16f58:	andeq	r0, r0, lr, lsr r4
   16f5c:	andeq	r0, r2, r9, ror #2
   16f60:	andeq	r0, r0, r5, asr #8
   16f64:	ldrdeq	r0, [r2], -r5
   16f68:	andeq	r0, r2, pc, lsl #3
   16f6c:	muleq	r2, r7, r1

00016f70 <test_sort_find@@Base>:
   16f70:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   16f74:	mov	r4, r0
   16f78:	bl	1acd8 <flatcc_builder_reset@@Base>
   16f7c:	mov	r0, r4
   16f80:	bl	130ec <_start@@Base+0x2a4>
   16f84:	ldr	r1, [pc, #724]	; 17260 <test_sort_find@@Base+0x2f0>
   16f88:	mov	r0, r4
   16f8c:	bl	13324 <_start@@Base+0x4dc>
   16f90:	mov	r0, r4
   16f94:	bl	1b99c <flatcc_builder_start_offset_vector@@Base>
   16f98:	mov	r0, r4
   16f9c:	bl	1311c <_start@@Base+0x2d4>
   16fa0:	ldr	r1, [pc, #700]	; 17264 <test_sort_find@@Base+0x2f4>
   16fa4:	mov	r0, r4
   16fa8:	bl	13324 <_start@@Base+0x4dc>
   16fac:	mov	r0, r4
   16fb0:	bl	15000 <_start@@Base+0x21b8>
   16fb4:	mov	r0, r4
   16fb8:	bl	1311c <_start@@Base+0x2d4>
   16fbc:	ldr	r1, [pc, #676]	; 17268 <test_sort_find@@Base+0x2f8>
   16fc0:	mov	r0, r4
   16fc4:	bl	13324 <_start@@Base+0x4dc>
   16fc8:	mov	r0, r4
   16fcc:	bl	15000 <_start@@Base+0x21b8>
   16fd0:	mov	r0, r4
   16fd4:	bl	1311c <_start@@Base+0x2d4>
   16fd8:	ldr	r1, [pc, #652]	; 1726c <test_sort_find@@Base+0x2fc>
   16fdc:	mov	r0, r4
   16fe0:	bl	13324 <_start@@Base+0x4dc>
   16fe4:	mov	r0, r4
   16fe8:	bl	15000 <_start@@Base+0x21b8>
   16fec:	mov	r0, r4
   16ff0:	bl	1311c <_start@@Base+0x2d4>
   16ff4:	ldr	r1, [pc, #628]	; 17270 <test_sort_find@@Base+0x300>
   16ff8:	mov	r0, r4
   16ffc:	bl	13324 <_start@@Base+0x4dc>
   17000:	mov	r0, r4
   17004:	bl	15000 <_start@@Base+0x21b8>
   17008:	mov	r0, r4
   1700c:	bl	1311c <_start@@Base+0x2d4>
   17010:	ldr	r1, [pc, #596]	; 1726c <test_sort_find@@Base+0x2fc>
   17014:	mov	r0, r4
   17018:	bl	13324 <_start@@Base+0x4dc>
   1701c:	mov	r0, r4
   17020:	bl	15000 <_start@@Base+0x21b8>
   17024:	mov	r0, r4
   17028:	bl	150a0 <_start@@Base+0x2258>
   1702c:	mov	r0, r4
   17030:	bl	142f0 <_start@@Base+0x14a8>
   17034:	add	r1, sp, #4
   17038:	mov	r0, r4
   1703c:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   17040:	ldr	r4, [pc, #556]	; 17274 <test_sort_find@@Base+0x304>
   17044:	ldr	r2, [sp, #4]
   17048:	ldr	r3, [r4]
   1704c:	mov	r1, r0
   17050:	mov	r6, r0
   17054:	ldr	r0, [pc, #540]	; 17278 <test_sort_find@@Base+0x308>
   17058:	bl	13214 <_start@@Base+0x3cc>
   1705c:	mov	r0, r6
   17060:	bl	12fe4 <_start@@Base+0x19c>
   17064:	bl	13a28 <_start@@Base+0xbe0>
   17068:	subs	r5, r0, #0
   1706c:	bne	17084 <test_sort_find@@Base+0x114>
   17070:	ldr	r3, [pc, #516]	; 1727c <test_sort_find@@Base+0x30c>
   17074:	ldr	r2, [pc, #516]	; 17280 <test_sort_find@@Base+0x310>
   17078:	ldr	r1, [pc, #516]	; 17284 <test_sort_find@@Base+0x314>
   1707c:	ldr	r0, [pc, #516]	; 17288 <test_sort_find@@Base+0x318>
   17080:	bl	12ab4 <__assert_fail@plt>
   17084:	bl	13f28 <_start@@Base+0x10e0>
   17088:	ldr	r3, [r4]
   1708c:	ldr	r2, [sp, #4]
   17090:	mov	r1, r6
   17094:	ldr	r0, [pc, #496]	; 1728c <test_sort_find@@Base+0x31c>
   17098:	bl	13214 <_start@@Base+0x3cc>
   1709c:	ldr	r3, [r5, #-4]
   170a0:	cmp	r3, #5
   170a4:	beq	170c8 <test_sort_find@@Base+0x158>
   170a8:	ldr	r0, [pc, #480]	; 17290 <test_sort_find@@Base+0x320>
   170ac:	bl	12a0c <puts@plt>
   170b0:	mvn	r4, #0
   170b4:	mov	r0, r6
   170b8:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   170bc:	mov	r0, r4
   170c0:	add	sp, sp, #8
   170c4:	pop	{r4, r5, r6, r7, r8, pc}
   170c8:	mov	r1, #0
   170cc:	mov	r0, r5
   170d0:	bl	13a8c <_start@@Base+0xc44>
   170d4:	bl	13b90 <_start@@Base+0xd48>
   170d8:	ldr	r1, [pc, #400]	; 17270 <test_sort_find@@Base+0x300>
   170dc:	bl	129b8 <strcmp@plt>
   170e0:	cmp	r0, #0
   170e4:	ldrne	r0, [pc, #424]	; 17294 <test_sort_find@@Base+0x324>
   170e8:	bne	170ac <test_sort_find@@Base+0x13c>
   170ec:	mov	r1, #1
   170f0:	mov	r0, r5
   170f4:	bl	13a8c <_start@@Base+0xc44>
   170f8:	mov	r8, r0
   170fc:	bl	13b90 <_start@@Base+0xd48>
   17100:	ldr	r1, [pc, #356]	; 1726c <test_sort_find@@Base+0x2fc>
   17104:	bl	129b8 <strcmp@plt>
   17108:	cmp	r0, #0
   1710c:	ldrne	r0, [pc, #388]	; 17298 <test_sort_find@@Base+0x328>
   17110:	bne	170ac <test_sort_find@@Base+0x13c>
   17114:	mov	r1, #2
   17118:	mov	r0, r5
   1711c:	bl	13a8c <_start@@Base+0xc44>
   17120:	mov	r7, r0
   17124:	bl	13b90 <_start@@Base+0xd48>
   17128:	ldr	r1, [pc, #316]	; 1726c <test_sort_find@@Base+0x2fc>
   1712c:	bl	129b8 <strcmp@plt>
   17130:	cmp	r0, #0
   17134:	ldrne	r0, [pc, #352]	; 1729c <test_sort_find@@Base+0x32c>
   17138:	bne	170ac <test_sort_find@@Base+0x13c>
   1713c:	mov	r1, #3
   17140:	mov	r0, r5
   17144:	bl	13a8c <_start@@Base+0xc44>
   17148:	bl	13b90 <_start@@Base+0xd48>
   1714c:	ldr	r1, [pc, #276]	; 17268 <test_sort_find@@Base+0x2f8>
   17150:	bl	129b8 <strcmp@plt>
   17154:	cmp	r0, #0
   17158:	ldrne	r0, [pc, #320]	; 172a0 <test_sort_find@@Base+0x330>
   1715c:	bne	170ac <test_sort_find@@Base+0x13c>
   17160:	mov	r1, #4
   17164:	mov	r0, r5
   17168:	bl	13a8c <_start@@Base+0xc44>
   1716c:	bl	13b90 <_start@@Base+0xd48>
   17170:	ldr	r1, [pc, #236]	; 17264 <test_sort_find@@Base+0x2f4>
   17174:	bl	129b8 <strcmp@plt>
   17178:	subs	r4, r0, #0
   1717c:	ldrne	r0, [pc, #288]	; 172a4 <test_sort_find@@Base+0x334>
   17180:	bne	170ac <test_sort_find@@Base+0x13c>
   17184:	cmp	r8, r7
   17188:	ldreq	r0, [pc, #280]	; 172a8 <test_sort_find@@Base+0x338>
   1718c:	beq	170ac <test_sort_find@@Base+0x13c>
   17190:	ldr	r1, [pc, #208]	; 17268 <test_sort_find@@Base+0x2f8>
   17194:	mov	r0, r5
   17198:	bl	13c0c <_start@@Base+0xdc4>
   1719c:	cmp	r0, #3
   171a0:	ldrne	r0, [pc, #260]	; 172ac <test_sort_find@@Base+0x33c>
   171a4:	bne	170ac <test_sort_find@@Base+0x13c>
   171a8:	ldr	r1, [pc, #256]	; 172b0 <test_sort_find@@Base+0x340>
   171ac:	mov	r0, r5
   171b0:	bl	14f54 <_start@@Base+0x210c>
   171b4:	cmp	r0, #3
   171b8:	ldrne	r0, [pc, #244]	; 172b4 <test_sort_find@@Base+0x344>
   171bc:	bne	170ac <test_sort_find@@Base+0x13c>
   171c0:	ldr	r1, [pc, #240]	; 172b8 <test_sort_find@@Base+0x348>
   171c4:	mov	r0, r5
   171c8:	bl	14f54 <_start@@Base+0x210c>
   171cc:	cmp	r0, #3
   171d0:	ldrne	r0, [pc, #228]	; 172bc <test_sort_find@@Base+0x34c>
   171d4:	bne	170ac <test_sort_find@@Base+0x13c>
   171d8:	ldr	r1, [pc, #224]	; 172c0 <test_sort_find@@Base+0x350>
   171dc:	mov	r0, r5
   171e0:	bl	13c0c <_start@@Base+0xdc4>
   171e4:	cmn	r0, #1
   171e8:	ldrne	r0, [pc, #212]	; 172c4 <test_sort_find@@Base+0x354>
   171ec:	bne	170ac <test_sort_find@@Base+0x13c>
   171f0:	ldr	r1, [pc, #120]	; 17270 <test_sort_find@@Base+0x300>
   171f4:	mov	r0, r5
   171f8:	bl	13c0c <_start@@Base+0xdc4>
   171fc:	cmp	r0, #0
   17200:	ldrne	r0, [pc, #192]	; 172c8 <test_sort_find@@Base+0x358>
   17204:	bne	170ac <test_sort_find@@Base+0x13c>
   17208:	ldr	r1, [pc, #92]	; 1726c <test_sort_find@@Base+0x2fc>
   1720c:	mov	r0, r5
   17210:	bl	13c0c <_start@@Base+0xdc4>
   17214:	cmp	r0, #1
   17218:	mov	r8, r0
   1721c:	ldrne	r0, [pc, #168]	; 172cc <test_sort_find@@Base+0x35c>
   17220:	bne	17240 <test_sort_find@@Base+0x2d0>
   17224:	ldr	r1, [pc, #56]	; 17264 <test_sort_find@@Base+0x2f4>
   17228:	mov	r0, r5
   1722c:	bl	13c0c <_start@@Base+0xdc4>
   17230:	cmp	r0, #4
   17234:	mov	r8, r0
   17238:	beq	17254 <test_sort_find@@Base+0x2e4>
   1723c:	ldr	r0, [pc, #140]	; 172d0 <test_sort_find@@Base+0x360>
   17240:	bl	12a0c <puts@plt>
   17244:	mov	r1, r8
   17248:	ldr	r0, [pc, #132]	; 172d4 <test_sort_find@@Base+0x364>
   1724c:	bl	129c4 <printf@plt>
   17250:	b	170b0 <test_sort_find@@Base+0x140>
   17254:	mov	r0, r5
   17258:	bl	13f28 <_start@@Base+0x10e0>
   1725c:	b	170b4 <test_sort_find@@Base+0x144>
   17260:	strdeq	pc, [r1], -r9
   17264:	andeq	pc, r1, r3, lsr #23
   17268:	andeq	r0, r2, r2, ror r5
   1726c:	muleq	r2, r7, r5
   17270:	andeq	r0, r2, sl, lsr #3
   17274:	andeq	r3, r3, r8, ror r0
   17278:			; <UNDEFINED> instruction: 0x000201b0
   1727c:	andeq	lr, r1, lr, lsl fp
   17280:	andeq	r0, r0, fp, ror r4
   17284:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   17288:	andeq	r0, r2, r8, asr #3
   1728c:			; <UNDEFINED> instruction: 0x000201b2
   17290:	ldrdeq	r0, [r2], -r1
   17294:	strdeq	r0, [r2], -r8
   17298:	andeq	r0, r2, r5, lsl r2
   1729c:	andeq	r0, r2, r2, lsr r2
   172a0:	andeq	r0, r2, pc, asr #4
   172a4:	andeq	r0, r2, ip, ror #4
   172a8:	andeq	r0, r2, r9, lsl #5
   172ac:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   172b0:	strdeq	r0, [r2], -fp
   172b4:	andeq	r0, r2, r2, lsl #6
   172b8:	andeq	r0, r2, r4, lsr r3
   172bc:	andeq	r0, r2, fp, lsr r3
   172c0:	andeq	r0, r2, lr, asr r3
   172c4:	andeq	r0, r2, r5, ror #6
   172c8:	andeq	r0, r2, fp, ror r3
   172cc:	andeq	r0, r2, r9, ror r4
   172d0:	muleq	r2, r3, r3
   172d4:	andeq	r0, r2, fp, lsl #7

000172d8 <test_scan@@Base>:
   172d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172dc:	mov	r4, r0
   172e0:	ldr	r7, [pc, #2616]	; 17d20 <test_scan@@Base+0xa48>
   172e4:	sub	sp, sp, #36	; 0x24
   172e8:	mov	r3, r7
   172ec:	ldr	r0, [r3, #1]!
   172f0:	str	r0, [sp, #24]
   172f4:	ldrh	r2, [r3, #4]
   172f8:	ldrb	r3, [r3, #6]
   172fc:	mov	r0, r4
   17300:	strh	r2, [sp, #28]
   17304:	strb	r3, [sp, #30]
   17308:	bl	1acd8 <flatcc_builder_reset@@Base>
   1730c:	mov	r0, r4
   17310:	bl	130ec <_start@@Base+0x2a4>
   17314:	ldr	r1, [pc, #2568]	; 17d24 <test_scan@@Base+0xa4c>
   17318:	mov	r0, r4
   1731c:	bl	13324 <_start@@Base+0x4dc>
   17320:	mov	r2, #7
   17324:	add	r1, sp, #24
   17328:	mov	r0, r4
   1732c:	bl	15050 <_start@@Base+0x2208>
   17330:	mov	r0, r4
   17334:	bl	1b99c <flatcc_builder_start_offset_vector@@Base>
   17338:	mov	r0, r4
   1733c:	bl	1c360 <flatcc_builder_end_offset_vector@@Base>
   17340:	mov	r1, r0
   17344:	mov	r0, r4
   17348:	bl	13120 <_start@@Base+0x2d8>
   1734c:	mov	r0, r4
   17350:	bl	1b99c <flatcc_builder_start_offset_vector@@Base>
   17354:	mov	r0, r4
   17358:	bl	1311c <_start@@Base+0x2d4>
   1735c:	ldr	r1, [pc, #2500]	; 17d28 <test_scan@@Base+0xa50>
   17360:	mov	r0, r4
   17364:	bl	13324 <_start@@Base+0x4dc>
   17368:	mov	r0, r4
   1736c:	bl	15000 <_start@@Base+0x21b8>
   17370:	mov	r0, r4
   17374:	bl	1311c <_start@@Base+0x2d4>
   17378:	ldr	r1, [pc, #2476]	; 17d2c <test_scan@@Base+0xa54>
   1737c:	mov	r0, r4
   17380:	bl	13324 <_start@@Base+0x4dc>
   17384:	mov	r0, r4
   17388:	bl	15000 <_start@@Base+0x21b8>
   1738c:	mov	r0, r4
   17390:	bl	1311c <_start@@Base+0x2d4>
   17394:	ldr	r1, [pc, #2452]	; 17d30 <test_scan@@Base+0xa58>
   17398:	mov	r0, r4
   1739c:	bl	13324 <_start@@Base+0x4dc>
   173a0:	mov	r0, r4
   173a4:	bl	15000 <_start@@Base+0x21b8>
   173a8:	mov	r0, r4
   173ac:	bl	1311c <_start@@Base+0x2d4>
   173b0:	ldr	r1, [pc, #2428]	; 17d34 <test_scan@@Base+0xa5c>
   173b4:	mov	r0, r4
   173b8:	bl	13324 <_start@@Base+0x4dc>
   173bc:	mov	r0, r4
   173c0:	bl	15000 <_start@@Base+0x21b8>
   173c4:	mov	r0, r4
   173c8:	bl	1311c <_start@@Base+0x2d4>
   173cc:	ldr	r1, [pc, #2396]	; 17d30 <test_scan@@Base+0xa58>
   173d0:	mov	r0, r4
   173d4:	bl	13324 <_start@@Base+0x4dc>
   173d8:	mov	r0, r4
   173dc:	bl	15000 <_start@@Base+0x21b8>
   173e0:	mov	r0, r4
   173e4:	bl	150a0 <_start@@Base+0x2258>
   173e8:	mov	r0, r4
   173ec:	bl	142f0 <_start@@Base+0x14a8>
   173f0:	add	r1, sp, #20
   173f4:	mov	r0, r4
   173f8:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   173fc:	str	r0, [sp, #8]
   17400:	bl	12fe4 <_start@@Base+0x19c>
   17404:	mov	r4, r0
   17408:	bl	13a28 <_start@@Base+0xbe0>
   1740c:	subs	r5, r0, #0
   17410:	bne	17428 <test_scan@@Base+0x150>
   17414:	ldr	r2, [pc, #2332]	; 17d38 <test_scan@@Base+0xa60>
   17418:	ldr	r1, [pc, #2332]	; 17d3c <test_scan@@Base+0xa64>
   1741c:	ldr	r0, [pc, #2332]	; 17d40 <test_scan@@Base+0xa68>
   17420:	add	r3, r7, #8
   17424:	bl	12ab4 <__assert_fail@plt>
   17428:	mov	r0, r4
   1742c:	bl	135f0 <_start@@Base+0x7a8>
   17430:	subs	r6, r0, #0
   17434:	addeq	r3, r7, #8
   17438:	ldreq	r2, [pc, #2308]	; 17d44 <test_scan@@Base+0xa6c>
   1743c:	ldreq	r1, [pc, #2296]	; 17d3c <test_scan@@Base+0xa64>
   17440:	ldreq	r0, [pc, #2304]	; 17d48 <test_scan@@Base+0xa70>
   17444:	beq	17424 <test_scan@@Base+0x14c>
   17448:	mov	r0, r4
   1744c:	bl	13918 <_start@@Base+0xad0>
   17450:	subs	r9, r0, #0
   17454:	addeq	r3, r7, #8
   17458:	ldreq	r2, [pc, #2284]	; 17d4c <test_scan@@Base+0xa74>
   1745c:	ldreq	r1, [pc, #2264]	; 17d3c <test_scan@@Base+0xa64>
   17460:	ldreq	r0, [pc, #2280]	; 17d50 <test_scan@@Base+0xa78>
   17464:	beq	17424 <test_scan@@Base+0x14c>
   17468:	ldr	r1, [pc, #2236]	; 17d2c <test_scan@@Base+0xa54>
   1746c:	mov	r0, r5
   17470:	bl	13c9c <_start@@Base+0xe54>
   17474:	cmp	r0, #1
   17478:	ldrne	r0, [pc, #2260]	; 17d54 <test_scan@@Base+0xa7c>
   1747c:	bne	174b8 <test_scan@@Base+0x1e0>
   17480:	ldr	r1, [pc, #2212]	; 17d2c <test_scan@@Base+0xa54>
   17484:	mov	r0, r5
   17488:	bl	13cf4 <_start@@Base+0xeac>
   1748c:	cmp	r0, #1
   17490:	bne	174b4 <test_scan@@Base+0x1dc>
   17494:	ldr	r7, [r5, #-4]
   17498:	ldr	sl, [pc, #2232]	; 17d58 <test_scan@@Base+0xa80>
   1749c:	mov	r4, #0
   174a0:	mov	r8, #5
   174a4:	cmp	r4, r7
   174a8:	bne	174d4 <test_scan@@Base+0x1fc>
   174ac:	ldr	r0, [pc, #2216]	; 17d5c <test_scan@@Base+0xa84>
   174b0:	b	174b8 <test_scan@@Base+0x1e0>
   174b4:	ldr	r0, [pc, #2212]	; 17d60 <test_scan@@Base+0xa88>
   174b8:	bl	12a0c <puts@plt>
   174bc:	mvn	r4, #0
   174c0:	ldr	r0, [sp, #8]
   174c4:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   174c8:	mov	r0, r4
   174cc:	add	sp, sp, #36	; 0x24
   174d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d4:	mov	r1, r4
   174d8:	mov	r0, r5
   174dc:	bl	13a8c <_start@@Base+0xc44>
   174e0:	bl	13b90 <_start@@Base+0xd48>
   174e4:	mov	r2, r8
   174e8:	mov	r1, sl
   174ec:	bl	133e4 <_start@@Base+0x59c>
   174f0:	cmp	r0, #0
   174f4:	addne	r4, r4, #1
   174f8:	bne	174a4 <test_scan@@Base+0x1cc>
   174fc:	cmp	r4, #1
   17500:	bne	174ac <test_scan@@Base+0x1d4>
   17504:	mov	r2, #5
   17508:	ldr	r1, [pc, #2120]	; 17d58 <test_scan@@Base+0xa80>
   1750c:	mov	r0, r5
   17510:	bl	13fb0 <_start@@Base+0x1168>
   17514:	cmp	r0, #1
   17518:	bne	174ac <test_scan@@Base+0x1d4>
   1751c:	ldr	r3, [pc, #2056]	; 17d2c <test_scan@@Base+0xa54>
   17520:	mvn	r2, #0
   17524:	mov	r1, #2
   17528:	mov	r0, r5
   1752c:	bl	13d4c <_start@@Base+0xf04>
   17530:	cmn	r0, #1
   17534:	ldrne	r0, [pc, #2088]	; 17d64 <test_scan@@Base+0xa8c>
   17538:	bne	174b8 <test_scan@@Base+0x1e0>
   1753c:	ldr	r1, [pc, #2084]	; 17d68 <test_scan@@Base+0xa90>
   17540:	mov	r0, r5
   17544:	bl	13c9c <_start@@Base+0xe54>
   17548:	cmn	r0, #1
   1754c:	mov	r4, r0
   17550:	ldrne	r0, [pc, #2068]	; 17d6c <test_scan@@Base+0xa94>
   17554:	bne	174b8 <test_scan@@Base+0x1e0>
   17558:	ldr	r1, [pc, #1992]	; 17d28 <test_scan@@Base+0xa50>
   1755c:	mov	r0, r5
   17560:	bl	13c9c <_start@@Base+0xe54>
   17564:	cmp	r0, #0
   17568:	beq	17578 <test_scan@@Base+0x2a0>
   1756c:	ldr	r0, [pc, #2044]	; 17d70 <test_scan@@Base+0xa98>
   17570:	bl	12a0c <puts@plt>
   17574:	b	174c0 <test_scan@@Base+0x1e8>
   17578:	ldr	r1, [pc, #1968]	; 17d30 <test_scan@@Base+0xa58>
   1757c:	mov	r0, r5
   17580:	bl	13c9c <_start@@Base+0xe54>
   17584:	cmp	r0, #2
   17588:	beq	17594 <test_scan@@Base+0x2bc>
   1758c:	ldr	r0, [pc, #2016]	; 17d74 <test_scan@@Base+0xa9c>
   17590:	b	174b8 <test_scan@@Base+0x1e0>
   17594:	ldr	r1, [pc, #1940]	; 17d30 <test_scan@@Base+0xa58>
   17598:	mov	r0, r5
   1759c:	bl	13cf4 <_start@@Base+0xeac>
   175a0:	cmp	r0, #4
   175a4:	bne	1758c <test_scan@@Base+0x2b4>
   175a8:	mov	r2, #8
   175ac:	ldr	r1, [pc, #1988]	; 17d78 <test_scan@@Base+0xaa0>
   175b0:	mov	r0, r5
   175b4:	bl	13fb0 <_start@@Base+0x1168>
   175b8:	cmp	r0, #4
   175bc:	beq	175c8 <test_scan@@Base+0x2f0>
   175c0:	ldr	r0, [pc, #1972]	; 17d7c <test_scan@@Base+0xaa4>
   175c4:	b	174b8 <test_scan@@Base+0x1e0>
   175c8:	cmp	r7, #3
   175cc:	ldr	r8, [pc, #1956]	; 17d78 <test_scan@@Base+0xaa0>
   175d0:	movcc	r1, r7
   175d4:	movcs	r1, #3
   175d8:	mov	r4, #8
   175dc:	cmp	r1, #1
   175e0:	sub	sl, r1, #1
   175e4:	bls	175c0 <test_scan@@Base+0x2e8>
   175e8:	mov	r1, sl
   175ec:	mov	r0, r5
   175f0:	bl	13a8c <_start@@Base+0xc44>
   175f4:	bl	13b90 <_start@@Base+0xd48>
   175f8:	mov	r1, r8
   175fc:	mov	r2, r4
   17600:	bl	133e4 <_start@@Base+0x59c>
   17604:	mov	r1, sl
   17608:	cmp	r0, #0
   1760c:	bne	175dc <test_scan@@Base+0x304>
   17610:	cmp	sl, #2
   17614:	bne	175c0 <test_scan@@Base+0x2e8>
   17618:	ldr	r3, [pc, #1808]	; 17d30 <test_scan@@Base+0xa58>
   1761c:	mvn	r2, #0
   17620:	mov	r0, r5
   17624:	bl	13d4c <_start@@Base+0xf04>
   17628:	cmp	r0, #2
   1762c:	mov	fp, r0
   17630:	moveq	r8, #8
   17634:	ldreq	sl, [pc, #1852]	; 17d78 <test_scan@@Base+0xaa0>
   17638:	beq	1766c <test_scan@@Base+0x394>
   1763c:	ldr	r0, [pc, #1852]	; 17d80 <test_scan@@Base+0xaa8>
   17640:	b	174b8 <test_scan@@Base+0x1e0>
   17644:	mov	r1, fp
   17648:	mov	r0, r5
   1764c:	bl	13a8c <_start@@Base+0xc44>
   17650:	bl	13b90 <_start@@Base+0xd48>
   17654:	mov	r2, r8
   17658:	mov	r1, sl
   1765c:	bl	133e4 <_start@@Base+0x59c>
   17660:	subs	r4, r0, #0
   17664:	beq	17678 <test_scan@@Base+0x3a0>
   17668:	add	fp, fp, #1
   1766c:	cmp	r7, fp
   17670:	bhi	17644 <test_scan@@Base+0x36c>
   17674:	b	1763c <test_scan@@Base+0x364>
   17678:	cmp	fp, #2
   1767c:	bne	1763c <test_scan@@Base+0x364>
   17680:	ldr	r3, [pc, #1704]	; 17d30 <test_scan@@Base+0xa58>
   17684:	mvn	r2, #0
   17688:	mov	r1, #3
   1768c:	mov	r0, r5
   17690:	bl	13d4c <_start@@Base+0xf04>
   17694:	cmp	r0, #4
   17698:	ldrne	r0, [pc, #1764]	; 17d84 <test_scan@@Base+0xaac>
   1769c:	bne	174b8 <test_scan@@Base+0x1e0>
   176a0:	ldr	r3, [pc, #1728]	; 17d68 <test_scan@@Base+0xa90>
   176a4:	mov	r2, #3
   176a8:	mov	r1, #1
   176ac:	mov	r0, r5
   176b0:	bl	13d4c <_start@@Base+0xf04>
   176b4:	cmn	r0, #1
   176b8:	ldrne	r0, [pc, #1736]	; 17d88 <test_scan@@Base+0xab0>
   176bc:	bne	174b8 <test_scan@@Base+0x1e0>
   176c0:	ldr	r3, [pc, #1632]	; 17d28 <test_scan@@Base+0xa50>
   176c4:	mov	r2, #3
   176c8:	mov	r1, #1
   176cc:	mov	r0, r5
   176d0:	bl	13d4c <_start@@Base+0xf04>
   176d4:	cmn	r0, #1
   176d8:	ldrne	r0, [pc, #1708]	; 17d8c <test_scan@@Base+0xab4>
   176dc:	bne	174b8 <test_scan@@Base+0x1e0>
   176e0:	ldr	r3, [pc, #1604]	; 17d2c <test_scan@@Base+0xa54>
   176e4:	mov	r2, #3
   176e8:	mov	r1, #1
   176ec:	mov	r0, r5
   176f0:	bl	13d4c <_start@@Base+0xf04>
   176f4:	cmp	r0, #1
   176f8:	mov	r8, r0
   176fc:	ldrne	r0, [pc, #1676]	; 17d90 <test_scan@@Base+0xab8>
   17700:	bne	174b8 <test_scan@@Base+0x1e0>
   17704:	ldr	r3, [pc, #1572]	; 17d30 <test_scan@@Base+0xa58>
   17708:	mov	r2, #3
   1770c:	mov	r1, r8
   17710:	mov	r0, r5
   17714:	bl	13d4c <_start@@Base+0xf04>
   17718:	cmp	r0, #2
   1771c:	ldrne	r0, [pc, #1648]	; 17d94 <test_scan@@Base+0xabc>
   17720:	bne	174b8 <test_scan@@Base+0x1e0>
   17724:	ldr	r3, [pc, #1544]	; 17d34 <test_scan@@Base+0xa5c>
   17728:	mov	r2, #3
   1772c:	mov	r1, r8
   17730:	mov	r0, r5
   17734:	bl	13d4c <_start@@Base+0xf04>
   17738:	cmn	r0, #1
   1773c:	ldrne	r0, [pc, #1620]	; 17d98 <test_scan@@Base+0xac0>
   17740:	bne	174b8 <test_scan@@Base+0x1e0>
   17744:	ldr	r3, [pc, #1564]	; 17d68 <test_scan@@Base+0xa90>
   17748:	mov	r2, #3
   1774c:	mov	r1, r8
   17750:	mov	r0, r5
   17754:	bl	13df4 <_start@@Base+0xfac>
   17758:	cmn	r0, #1
   1775c:	ldrne	r0, [pc, #1592]	; 17d9c <test_scan@@Base+0xac4>
   17760:	bne	174b8 <test_scan@@Base+0x1e0>
   17764:	ldr	r3, [pc, #1468]	; 17d28 <test_scan@@Base+0xa50>
   17768:	mov	r2, #3
   1776c:	mov	r1, #1
   17770:	mov	r0, r5
   17774:	bl	13df4 <_start@@Base+0xfac>
   17778:	cmn	r0, #1
   1777c:	ldrne	r0, [pc, #1564]	; 17da0 <test_scan@@Base+0xac8>
   17780:	bne	174b8 <test_scan@@Base+0x1e0>
   17784:	ldr	r3, [pc, #1440]	; 17d2c <test_scan@@Base+0xa54>
   17788:	mov	r2, #3
   1778c:	mov	r1, #1
   17790:	mov	r0, r5
   17794:	bl	13df4 <_start@@Base+0xfac>
   17798:	cmp	r0, #1
   1779c:	mov	r8, r0
   177a0:	ldrne	r0, [pc, #1532]	; 17da4 <test_scan@@Base+0xacc>
   177a4:	bne	174b8 <test_scan@@Base+0x1e0>
   177a8:	ldr	r3, [pc, #1408]	; 17d30 <test_scan@@Base+0xa58>
   177ac:	mov	r2, #3
   177b0:	mov	r1, r8
   177b4:	mov	r0, r5
   177b8:	bl	13df4 <_start@@Base+0xfac>
   177bc:	cmp	r0, #2
   177c0:	ldrne	r0, [pc, #1504]	; 17da8 <test_scan@@Base+0xad0>
   177c4:	bne	174b8 <test_scan@@Base+0x1e0>
   177c8:	ldr	r3, [pc, #1380]	; 17d34 <test_scan@@Base+0xa5c>
   177cc:	mov	r2, #3
   177d0:	mov	r1, r8
   177d4:	mov	r0, r5
   177d8:	bl	13df4 <_start@@Base+0xfac>
   177dc:	cmn	r0, #1
   177e0:	ldrne	r0, [pc, #1476]	; 17dac <test_scan@@Base+0xad4>
   177e4:	bne	174b8 <test_scan@@Base+0x1e0>
   177e8:	mov	r2, #0
   177ec:	ldr	r3, [pc, #1332]	; 17d28 <test_scan@@Base+0xa50>
   177f0:	mov	r1, r2
   177f4:	mov	r0, r5
   177f8:	bl	13d4c <_start@@Base+0xf04>
   177fc:	cmn	r0, #1
   17800:	beq	1780c <test_scan@@Base+0x534>
   17804:	ldr	r0, [pc, #1444]	; 17db0 <test_scan@@Base+0xad8>
   17808:	b	174b8 <test_scan@@Base+0x1e0>
   1780c:	mov	r2, #0
   17810:	ldr	r3, [pc, #1300]	; 17d2c <test_scan@@Base+0xa54>
   17814:	mov	r1, r2
   17818:	mov	r0, r5
   1781c:	bl	13d4c <_start@@Base+0xf04>
   17820:	cmn	r0, #1
   17824:	beq	17830 <test_scan@@Base+0x558>
   17828:	ldr	r0, [pc, #1412]	; 17db4 <test_scan@@Base+0xadc>
   1782c:	b	174b8 <test_scan@@Base+0x1e0>
   17830:	mov	r2, r8
   17834:	ldr	r3, [pc, #1264]	; 17d2c <test_scan@@Base+0xa54>
   17838:	mov	r1, r8
   1783c:	mov	r0, r5
   17840:	bl	13d4c <_start@@Base+0xf04>
   17844:	cmn	r0, #1
   17848:	mov	r2, r0
   1784c:	beq	17858 <test_scan@@Base+0x580>
   17850:	ldr	r0, [pc, #1376]	; 17db8 <test_scan@@Base+0xae0>
   17854:	b	174b8 <test_scan@@Base+0x1e0>
   17858:	ldr	r3, [pc, #1224]	; 17d28 <test_scan@@Base+0xa50>
   1785c:	mov	r1, r7
   17860:	mov	r0, r5
   17864:	bl	13d4c <_start@@Base+0xf04>
   17868:	cmn	r0, #1
   1786c:	beq	17878 <test_scan@@Base+0x5a0>
   17870:	ldr	r0, [pc, #1348]	; 17dbc <test_scan@@Base+0xae4>
   17874:	b	174b8 <test_scan@@Base+0x1e0>
   17878:	mov	r2, #0
   1787c:	ldr	r3, [pc, #1188]	; 17d28 <test_scan@@Base+0xa50>
   17880:	mov	r1, r2
   17884:	mov	r0, r5
   17888:	bl	13df4 <_start@@Base+0xfac>
   1788c:	cmn	r0, #1
   17890:	bne	17804 <test_scan@@Base+0x52c>
   17894:	mov	r2, #0
   17898:	ldr	r3, [pc, #1164]	; 17d2c <test_scan@@Base+0xa54>
   1789c:	mov	r1, r2
   178a0:	mov	r0, r5
   178a4:	bl	13df4 <_start@@Base+0xfac>
   178a8:	cmn	r0, #1
   178ac:	bne	17828 <test_scan@@Base+0x550>
   178b0:	mov	r2, #1
   178b4:	mov	r1, r2
   178b8:	ldr	r3, [pc, #1132]	; 17d2c <test_scan@@Base+0xa54>
   178bc:	mov	r0, r5
   178c0:	bl	13df4 <_start@@Base+0xfac>
   178c4:	cmn	r0, #1
   178c8:	mov	r2, r0
   178cc:	bne	17850 <test_scan@@Base+0x578>
   178d0:	ldr	r3, [pc, #1104]	; 17d28 <test_scan@@Base+0xa50>
   178d4:	mov	r1, r7
   178d8:	mov	r0, r5
   178dc:	bl	13df4 <_start@@Base+0xfac>
   178e0:	cmn	r0, #1
   178e4:	mov	sl, r0
   178e8:	bne	17870 <test_scan@@Base+0x598>
   178ec:	ldr	r1, [pc, #1080]	; 17d2c <test_scan@@Base+0xa54>
   178f0:	mov	r0, r5
   178f4:	bl	13db0 <_start@@Base+0xf68>
   178f8:	cmp	r0, #1
   178fc:	ldrne	r0, [pc, #1212]	; 17dc0 <test_scan@@Base+0xae8>
   17900:	bne	174b8 <test_scan@@Base+0x1e0>
   17904:	ldr	r1, [pc, #1116]	; 17d68 <test_scan@@Base+0xa90>
   17908:	mov	r0, r5
   1790c:	bl	13db0 <_start@@Base+0xf68>
   17910:	cmp	r0, #0
   17914:	ldrne	r0, [pc, #1192]	; 17dc4 <test_scan@@Base+0xaec>
   17918:	bne	174b8 <test_scan@@Base+0x1e0>
   1791c:	ldr	r1, [pc, #1028]	; 17d28 <test_scan@@Base+0xa50>
   17920:	mov	r0, r5
   17924:	bl	13db0 <_start@@Base+0xf68>
   17928:	cmp	r0, #1
   1792c:	str	r0, [sp]
   17930:	ldrne	r0, [pc, #1168]	; 17dc8 <test_scan@@Base+0xaf0>
   17934:	bne	174b8 <test_scan@@Base+0x1e0>
   17938:	ldr	r1, [pc, #1008]	; 17d30 <test_scan@@Base+0xa58>
   1793c:	mov	r0, r5
   17940:	bl	13db0 <_start@@Base+0xf68>
   17944:	cmp	r0, #2
   17948:	ldrne	r0, [pc, #1148]	; 17dcc <test_scan@@Base+0xaf4>
   1794c:	bne	174b8 <test_scan@@Base+0x1e0>
   17950:	mov	r1, #6
   17954:	mov	r0, r6
   17958:	bl	13698 <_start@@Base+0x850>
   1795c:	subs	r8, r0, #0
   17960:	ldrne	r0, [pc, #1128]	; 17dd0 <test_scan@@Base+0xaf8>
   17964:	bne	174b8 <test_scan@@Base+0x1e0>
   17968:	ldr	r1, [sp]
   1796c:	mov	r0, r6
   17970:	bl	13698 <_start@@Base+0x850>
   17974:	cmp	r0, #2
   17978:	str	r0, [sp, #4]
   1797c:	ldrne	r0, [pc, #1104]	; 17dd4 <test_scan@@Base+0xafc>
   17980:	bne	174b8 <test_scan@@Base+0x1e0>
   17984:	ldr	r3, [sp]
   17988:	mov	r2, sl
   1798c:	mov	r1, #3
   17990:	mov	r0, r6
   17994:	bl	136e4 <_start@@Base+0x89c>
   17998:	cmn	r0, #1
   1799c:	ldrne	r0, [pc, #1076]	; 17dd8 <test_scan@@Base+0xb00>
   179a0:	bne	174b8 <test_scan@@Base+0x1e0>
   179a4:	mov	r1, #5
   179a8:	mov	r0, r6
   179ac:	bl	13698 <_start@@Base+0x850>
   179b0:	cmn	r0, #1
   179b4:	beq	179c0 <test_scan@@Base+0x6e8>
   179b8:	ldr	r0, [pc, #1052]	; 17ddc <test_scan@@Base+0xb04>
   179bc:	b	174b8 <test_scan@@Base+0x1e0>
   179c0:	mov	r1, #2
   179c4:	mov	r0, r6
   179c8:	bl	13698 <_start@@Base+0x850>
   179cc:	cmp	r0, #6
   179d0:	ldrne	r0, [pc, #1032]	; 17de0 <test_scan@@Base+0xb08>
   179d4:	bne	174b8 <test_scan@@Base+0x1e0>
   179d8:	mov	r1, #3
   179dc:	mov	r0, r6
   179e0:	bl	13698 <_start@@Base+0x850>
   179e4:	cmp	r0, #3
   179e8:	mov	r3, r0
   179ec:	bne	179b8 <test_scan@@Base+0x6e0>
   179f0:	mov	r1, r0
   179f4:	mvn	r2, #0
   179f8:	mov	r0, r6
   179fc:	bl	136e4 <_start@@Base+0x89c>
   17a00:	cmp	r0, #3
   17a04:	mov	r3, r0
   17a08:	ldrne	r0, [pc, #980]	; 17de4 <test_scan@@Base+0xb0c>
   17a0c:	bne	174b8 <test_scan@@Base+0x1e0>
   17a10:	mvn	r2, #0
   17a14:	mov	r1, #4
   17a18:	mov	r0, r6
   17a1c:	bl	136e4 <_start@@Base+0x89c>
   17a20:	cmp	r0, #5
   17a24:	ldreq	sl, [r6, #-4]
   17a28:	ldrne	r0, [pc, #952]	; 17de8 <test_scan@@Base+0xb10>
   17a2c:	subeq	fp, sl, #1
   17a30:	bne	174b8 <test_scan@@Base+0x1e0>
   17a34:	cmn	fp, #1
   17a38:	bne	17a44 <test_scan@@Base+0x76c>
   17a3c:	ldr	r0, [pc, #936]	; 17dec <test_scan@@Base+0xb14>
   17a40:	b	174b8 <test_scan@@Base+0x1e0>
   17a44:	mov	r1, fp
   17a48:	mov	r0, r6
   17a4c:	bl	13654 <_start@@Base+0x80c>
   17a50:	sub	r3, fp, #1
   17a54:	cmp	r0, #3
   17a58:	movne	fp, r3
   17a5c:	bne	17a34 <test_scan@@Base+0x75c>
   17a60:	cmp	fp, #5
   17a64:	bne	17a3c <test_scan@@Base+0x764>
   17a68:	cmp	sl, #4
   17a6c:	movcc	r3, sl
   17a70:	movcs	r3, #4
   17a74:	cmp	r3, #1
   17a78:	sub	sl, r3, #1
   17a7c:	bhi	17a88 <test_scan@@Base+0x7b0>
   17a80:	ldr	r0, [pc, #872]	; 17df0 <test_scan@@Base+0xb18>
   17a84:	b	174b8 <test_scan@@Base+0x1e0>
   17a88:	mov	r1, sl
   17a8c:	mov	r0, r6
   17a90:	bl	13654 <_start@@Base+0x80c>
   17a94:	mov	r3, sl
   17a98:	cmp	r0, #3
   17a9c:	bne	17a74 <test_scan@@Base+0x79c>
   17aa0:	cmp	sl, #3
   17aa4:	bne	17a80 <test_scan@@Base+0x7a8>
   17aa8:	ldr	fp, [r9, #-4]
   17aac:	ldr	sl, [pc, #832]	; 17df4 <test_scan@@Base+0xb1c>
   17ab0:	mov	r6, r8
   17ab4:	cmp	r6, fp
   17ab8:	bne	17c74 <test_scan@@Base+0x99c>
   17abc:	ldr	sl, [pc, #816]	; 17df4 <test_scan@@Base+0xb1c>
   17ac0:	mov	fp, r8
   17ac4:	cmp	r6, fp
   17ac8:	bne	17c9c <test_scan@@Base+0x9c4>
   17acc:	ldr	fp, [pc, #800]	; 17df4 <test_scan@@Base+0xb1c>
   17ad0:	mov	r3, r8
   17ad4:	mov	sl, #4
   17ad8:	cmp	r6, r3
   17adc:	bne	17cc0 <test_scan@@Base+0x9e8>
   17ae0:	ldr	fp, [pc, #780]	; 17df4 <test_scan@@Base+0xb1c>
   17ae4:	mov	r3, r8
   17ae8:	mov	sl, #4
   17aec:	cmp	r6, r3
   17af0:	bne	17cf0 <test_scan@@Base+0xa18>
   17af4:	sub	r6, r6, #1
   17af8:	ldr	sl, [pc, #756]	; 17df4 <test_scan@@Base+0xb1c>
   17afc:	mov	fp, r6
   17b00:	cmn	fp, #1
   17b04:	beq	17b28 <test_scan@@Base+0x850>
   17b08:	mov	r1, fp
   17b0c:	mov	r0, r9
   17b10:	bl	13978 <_start@@Base+0xb30>
   17b14:	mov	r1, sl
   17b18:	bl	129b8 <strcmp@plt>
   17b1c:	sub	fp, fp, #1
   17b20:	cmp	r0, #0
   17b24:	bne	17b00 <test_scan@@Base+0x828>
   17b28:	ldr	sl, [pc, #708]	; 17df4 <test_scan@@Base+0xb1c>
   17b2c:	mov	fp, r6
   17b30:	cmn	fp, #1
   17b34:	beq	17b58 <test_scan@@Base+0x880>
   17b38:	mov	r1, fp
   17b3c:	mov	r0, r9
   17b40:	bl	13978 <_start@@Base+0xb30>
   17b44:	mov	r1, sl
   17b48:	bl	129b8 <strcmp@plt>
   17b4c:	sub	fp, fp, #1
   17b50:	cmp	r0, #0
   17b54:	bne	17b30 <test_scan@@Base+0x858>
   17b58:	ldr	fp, [pc, #660]	; 17df4 <test_scan@@Base+0xb1c>
   17b5c:	mov	r3, r6
   17b60:	mov	sl, #4
   17b64:	cmn	r3, #1
   17b68:	beq	17b98 <test_scan@@Base+0x8c0>
   17b6c:	mov	r1, r3
   17b70:	mov	r0, r9
   17b74:	str	r3, [sp, #12]
   17b78:	bl	13978 <_start@@Base+0xb30>
   17b7c:	mov	r2, sl
   17b80:	mov	r1, fp
   17b84:	bl	133e4 <_start@@Base+0x59c>
   17b88:	ldr	r3, [sp, #12]
   17b8c:	sub	r3, r3, #1
   17b90:	cmp	r0, #0
   17b94:	bne	17b64 <test_scan@@Base+0x88c>
   17b98:	ldr	fp, [pc, #596]	; 17df4 <test_scan@@Base+0xb1c>
   17b9c:	mov	sl, #4
   17ba0:	cmn	r6, #1
   17ba4:	beq	17bcc <test_scan@@Base+0x8f4>
   17ba8:	mov	r1, r6
   17bac:	mov	r0, r9
   17bb0:	bl	13978 <_start@@Base+0xb30>
   17bb4:	mov	r2, sl
   17bb8:	mov	r1, fp
   17bbc:	bl	133e4 <_start@@Base+0x59c>
   17bc0:	sub	r6, r6, #1
   17bc4:	cmp	r0, #0
   17bc8:	bne	17ba0 <test_scan@@Base+0x8c8>
   17bcc:	mov	r1, r8
   17bd0:	mov	r0, r5
   17bd4:	bl	13a8c <_start@@Base+0xc44>
   17bd8:	bl	1349c <_start@@Base+0x654>
   17bdc:	cmp	r0, #13
   17be0:	beq	17bf0 <test_scan@@Base+0x918>
   17be4:	add	r8, r8, #1
   17be8:	cmp	r7, r8
   17bec:	bne	17bcc <test_scan@@Base+0x8f4>
   17bf0:	ldr	r1, [sp]
   17bf4:	mov	r0, r5
   17bf8:	bl	13a8c <_start@@Base+0xc44>
   17bfc:	bl	1349c <_start@@Base+0x654>
   17c00:	cmp	r0, #42	; 0x2a
   17c04:	beq	17c1c <test_scan@@Base+0x944>
   17c08:	ldr	r3, [sp]
   17c0c:	add	r3, r3, #1
   17c10:	cmp	r7, r3
   17c14:	str	r3, [sp]
   17c18:	bhi	17bf0 <test_scan@@Base+0x918>
   17c1c:	sub	r7, r7, #1
   17c20:	cmn	r7, #1
   17c24:	beq	17c44 <test_scan@@Base+0x96c>
   17c28:	mov	r1, r7
   17c2c:	mov	r0, r5
   17c30:	bl	13a8c <_start@@Base+0xc44>
   17c34:	bl	1349c <_start@@Base+0x654>
   17c38:	sub	r7, r7, #1
   17c3c:	cmp	r0, #1
   17c40:	bne	17c20 <test_scan@@Base+0x948>
   17c44:	ldr	r3, [sp, #4]
   17c48:	sub	r3, r3, #1
   17c4c:	cmn	r3, #1
   17c50:	str	r3, [sp, #4]
   17c54:	beq	174c0 <test_scan@@Base+0x1e8>
   17c58:	ldr	r1, [sp, #4]
   17c5c:	mov	r0, r5
   17c60:	bl	13a8c <_start@@Base+0xc44>
   17c64:	bl	1349c <_start@@Base+0x654>
   17c68:	cmp	r0, #42	; 0x2a
   17c6c:	bne	17c44 <test_scan@@Base+0x96c>
   17c70:	b	174c0 <test_scan@@Base+0x1e8>
   17c74:	mov	r1, r6
   17c78:	mov	r0, r9
   17c7c:	bl	13978 <_start@@Base+0xb30>
   17c80:	mov	r1, sl
   17c84:	bl	129b8 <strcmp@plt>
   17c88:	cmp	r0, #0
   17c8c:	addne	r6, r6, #1
   17c90:	bne	17ab4 <test_scan@@Base+0x7dc>
   17c94:	mov	r6, fp
   17c98:	b	17abc <test_scan@@Base+0x7e4>
   17c9c:	mov	r1, fp
   17ca0:	mov	r0, r9
   17ca4:	bl	13978 <_start@@Base+0xb30>
   17ca8:	mov	r1, sl
   17cac:	bl	129b8 <strcmp@plt>
   17cb0:	cmp	r0, #0
   17cb4:	beq	17acc <test_scan@@Base+0x7f4>
   17cb8:	add	fp, fp, #1
   17cbc:	b	17ac4 <test_scan@@Base+0x7ec>
   17cc0:	mov	r1, r3
   17cc4:	mov	r0, r9
   17cc8:	str	r3, [sp, #12]
   17ccc:	bl	13978 <_start@@Base+0xb30>
   17cd0:	mov	r2, sl
   17cd4:	mov	r1, fp
   17cd8:	bl	133e4 <_start@@Base+0x59c>
   17cdc:	cmp	r0, #0
   17ce0:	beq	17ae0 <test_scan@@Base+0x808>
   17ce4:	ldr	r3, [sp, #12]
   17ce8:	add	r3, r3, #1
   17cec:	b	17ad8 <test_scan@@Base+0x800>
   17cf0:	mov	r1, r3
   17cf4:	mov	r0, r9
   17cf8:	str	r3, [sp, #12]
   17cfc:	bl	13978 <_start@@Base+0xb30>
   17d00:	mov	r2, sl
   17d04:	mov	r1, fp
   17d08:	bl	133e4 <_start@@Base+0x59c>
   17d0c:	cmp	r0, #0
   17d10:	beq	17af4 <test_scan@@Base+0x81c>
   17d14:	ldr	r3, [sp, #12]
   17d18:	add	r3, r3, #1
   17d1c:	b	17aec <test_scan@@Base+0x814>
   17d20:	andeq	lr, r1, ip, lsr #22
   17d24:	strdeq	pc, [r1], -r9
   17d28:	andeq	pc, r1, r3, lsr #23
   17d2c:	andeq	r0, r2, r2, ror r5
   17d30:	muleq	r2, r7, r5
   17d34:	andeq	r0, r2, sl, lsr #3
   17d38:	andeq	r0, r0, r9, lsl r5
   17d3c:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   17d40:	andeq	r0, r2, r8, asr #3
   17d44:	andeq	r0, r0, fp, lsl r5
   17d48:	andeq	r0, r2, r5, lsr #7
   17d4c:	andeq	r0, r0, sp, lsl r5
   17d50:	andeq	r0, r2, r9, lsr #7
   17d54:			; <UNDEFINED> instruction: 0x000203b2
   17d58:	andeq	r0, r2, r4, lsr r3
   17d5c:	ldrdeq	r0, [r2], -r1
   17d60:			; <UNDEFINED> instruction: 0x000203b1
   17d64:	strdeq	r0, [r2], -r7
   17d68:	andeq	r0, r2, lr, asr r3
   17d6c:	andeq	r0, r2, r5, ror #6
   17d70:	muleq	r2, r3, r3
   17d74:	andeq	r0, r2, r9, ror r4
   17d78:	andeq	r0, r2, r2, lsr #8
   17d7c:	andeq	r0, r2, sp, lsr #8
   17d80:	andeq	r0, r2, r7, asr #8
   17d84:	andeq	r0, r2, r1, ror r4
   17d88:	andeq	r0, r2, ip, lsl #9
   17d8c:	andeq	r0, r2, lr, lsr #9
   17d90:	andeq	r0, r2, r4, asr r5
   17d94:	andeq	r0, r2, r9, ror r5
   17d98:	andeq	r0, r2, pc, asr #9
   17d9c:	strdeq	r0, [r2], -sl
   17da0:	andeq	r0, r2, r7, lsr #10
   17da4:	andeq	r0, r2, r3, asr r5
   17da8:	andeq	r0, r2, r8, ror r5
   17dac:	andeq	r0, r2, r0, lsr #11
   17db0:	andeq	r0, r2, ip, asr #11
   17db4:	andeq	r0, r2, ip, ror #11
   17db8:	andeq	r0, r2, sl, lsl #12
   17dbc:	andeq	r0, r2, r0, lsr r6
   17dc0:	andeq	r0, r2, fp, asr r6
   17dc4:	andeq	r0, r2, r5, ror r6
   17dc8:	muleq	r2, r0, r6
   17dcc:	andeq	r0, r2, fp, lsr #13
   17dd0:	andeq	r0, r2, r8, asr #13
   17dd4:	strdeq	r0, [r2], -r4
   17dd8:	andeq	r0, r2, r1, lsr #14
   17ddc:	strdeq	r0, [r2], -fp
   17de0:	andeq	r0, r2, r9, asr r7
   17de4:	andeq	r0, r2, r4, lsl #15
   17de8:			; <UNDEFINED> instruction: 0x000207be
   17dec:	strdeq	r0, [r2], -sl
   17df0:	andeq	r0, r2, ip, lsr #16
   17df4:	andeq	pc, r1, r1, ror #25

00017df8 <test_basic_sort@@Base>:
   17df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dfc:	sub	sp, sp, #36	; 0x24
   17e00:	mov	r3, #3
   17e04:	mov	lr, #1
   17e08:	mov	ip, #2
   17e0c:	mov	r4, r0
   17e10:	mov	r2, #6
   17e14:	mov	r1, #4
   17e18:	mov	r5, #7
   17e1c:	strb	lr, [sp, #18]
   17e20:	strb	r3, [sp, #19]
   17e24:	strb	r3, [sp, #21]
   17e28:	strb	ip, [sp, #22]
   17e2c:	strb	lr, [sp, #24]
   17e30:	strb	ip, [sp, #25]
   17e34:	strb	r3, [sp, #26]
   17e38:	strb	r3, [sp, #27]
   17e3c:	strb	r2, [sp, #16]
   17e40:	strb	r2, [sp, #29]
   17e44:	strb	r1, [sp, #20]
   17e48:	strb	r1, [sp, #28]
   17e4c:	strb	r5, [sp, #17]
   17e50:	strb	r5, [sp, #30]
   17e54:	bl	1acd8 <flatcc_builder_reset@@Base>
   17e58:	mov	r0, r4
   17e5c:	bl	130ec <_start@@Base+0x2a4>
   17e60:	ldr	r1, [pc, #404]	; 17ffc <test_basic_sort@@Base+0x204>
   17e64:	mov	r0, r4
   17e68:	bl	13324 <_start@@Base+0x4dc>
   17e6c:	mov	r2, r5
   17e70:	add	r1, sp, #16
   17e74:	mov	r0, r4
   17e78:	bl	15050 <_start@@Base+0x2208>
   17e7c:	mov	r0, r4
   17e80:	bl	142f0 <_start@@Base+0x14a8>
   17e84:	add	r1, sp, #12
   17e88:	mov	r0, r4
   17e8c:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   17e90:	bl	12fe4 <_start@@Base+0x19c>
   17e94:	bl	135f0 <_start@@Base+0x7a8>
   17e98:	subs	r5, r0, #0
   17e9c:	beq	17ef4 <test_basic_sort@@Base+0xfc>
   17ea0:	ldr	r4, [r5, #-4]
   17ea4:	cmp	r4, #0
   17ea8:	beq	17edc <test_basic_sort@@Base+0xe4>
   17eac:	sub	r6, r4, #1
   17eb0:	lsr	r7, r4, #1
   17eb4:	mov	r1, r7
   17eb8:	mov	r2, r6
   17ebc:	mov	r0, r5
   17ec0:	bl	1373c <_start@@Base+0x8f4>
   17ec4:	subs	r7, r7, #1
   17ec8:	bcs	17eb4 <test_basic_sort@@Base+0xbc>
   17ecc:	add	r4, r5, r4
   17ed0:	mov	r7, #0
   17ed4:	cmp	r6, #0
   17ed8:	bne	17f08 <test_basic_sort@@Base+0x110>
   17edc:	ldr	r3, [r5, #-4]
   17ee0:	cmp	r3, #7
   17ee4:	moveq	r4, #0
   17ee8:	moveq	sl, #6
   17eec:	moveq	fp, r4
   17ef0:	beq	17fd8 <test_basic_sort@@Base+0x1e0>
   17ef4:	ldr	r3, [pc, #260]	; 18000 <test_basic_sort@@Base+0x208>
   17ef8:	mov	r2, #1552	; 0x610
   17efc:	ldr	r1, [pc, #256]	; 18004 <test_basic_sort@@Base+0x20c>
   17f00:	ldr	r0, [pc, #256]	; 18008 <test_basic_sort@@Base+0x210>
   17f04:	bl	12ab4 <__assert_fail@plt>
   17f08:	ldrb	r2, [r5]
   17f0c:	ldrb	r3, [r4, #-1]
   17f10:	sub	r6, r6, #1
   17f14:	strb	r2, [r4, #-1]!
   17f18:	mov	r1, r7
   17f1c:	strb	r3, [r5]
   17f20:	mov	r2, r6
   17f24:	mov	r0, r5
   17f28:	bl	1373c <_start@@Base+0x8f4>
   17f2c:	b	17ed4 <test_basic_sort@@Base+0xdc>
   17f30:	mov	r1, r4
   17f34:	mov	r0, r5
   17f38:	bl	13654 <_start@@Base+0x80c>
   17f3c:	add	r3, sp, #24
   17f40:	ldrb	r3, [r3, r4]
   17f44:	cmp	r3, r0
   17f48:	mov	r9, r0
   17f4c:	bne	17f98 <test_basic_sort@@Base+0x1a0>
   17f50:	mov	r6, sl
   17f54:	mov	r3, fp
   17f58:	cmp	r6, r3
   17f5c:	bhi	17fac <test_basic_sort@@Base+0x1b4>
   17f60:	bne	17fec <test_basic_sort@@Base+0x1f4>
   17f64:	mov	r1, r6
   17f68:	mov	r0, r5
   17f6c:	bl	13654 <_start@@Base+0x80c>
   17f70:	cmp	r9, r0
   17f74:	bne	17fec <test_basic_sort@@Base+0x1f4>
   17f78:	cmp	r4, #3
   17f7c:	movne	r8, r4
   17f80:	moveq	r8, #2
   17f84:	cmp	r8, r6
   17f88:	add	r4, r4, #1
   17f8c:	beq	17fd8 <test_basic_sort@@Base+0x1e0>
   17f90:	ldr	r0, [pc, #116]	; 1800c <test_basic_sort@@Base+0x214>
   17f94:	b	17f9c <test_basic_sort@@Base+0x1a4>
   17f98:	ldr	r0, [pc, #112]	; 18010 <test_basic_sort@@Base+0x218>
   17f9c:	bl	12a0c <puts@plt>
   17fa0:	mvn	r0, #0
   17fa4:	add	sp, sp, #36	; 0x24
   17fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fac:	sub	r7, r6, r3
   17fb0:	mov	r0, r5
   17fb4:	add	r7, r3, r7, lsr #1
   17fb8:	mov	r1, r7
   17fbc:	str	r3, [sp, #4]
   17fc0:	bl	13654 <_start@@Base+0x80c>
   17fc4:	ldr	r3, [sp, #4]
   17fc8:	cmp	r9, r0
   17fcc:	addhi	r3, r7, #1
   17fd0:	movls	r6, r7
   17fd4:	b	17f58 <test_basic_sort@@Base+0x160>
   17fd8:	cmp	r4, #7
   17fdc:	mov	r8, r4
   17fe0:	bne	17f30 <test_basic_sort@@Base+0x138>
   17fe4:	mov	r0, #0
   17fe8:	b	17fa4 <test_basic_sort@@Base+0x1ac>
   17fec:	cmp	r4, #3
   17ff0:	beq	17f90 <test_basic_sort@@Base+0x198>
   17ff4:	mvn	r6, #0
   17ff8:	b	17f84 <test_basic_sort@@Base+0x18c>
   17ffc:	strdeq	pc, [r1], -r9
   18000:	andeq	lr, r1, lr, lsr fp
   18004:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   18008:	andeq	r0, r2, r1, ror #16
   1800c:	andeq	r0, r2, r4, lsr #17
   18010:	andeq	r0, r2, pc, lsl #17

00018014 <test_clone_slice@@Base>:
   18014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18018:	vpush	{d8}
   1801c:	mov	r4, r0
   18020:	mov	r5, #0
   18024:	mov	r6, #1
   18028:	sub	sp, sp, #36	; 0x24
   1802c:	vldr	s16, [pc, #960]	; 183f4 <test_clone_slice@@Base+0x3e0>
   18030:	strb	r5, [sp, #24]
   18034:	strb	r6, [sp, #25]
   18038:	strb	r5, [sp, #26]
   1803c:	strb	r5, [sp, #27]
   18040:	strb	r6, [sp, #28]
   18044:	strb	r5, [sp, #29]
   18048:	strb	r5, [sp, #30]
   1804c:	bl	1acd8 <flatcc_builder_reset@@Base>
   18050:	mov	r0, r4
   18054:	bl	130ec <_start@@Base+0x2a4>
   18058:	ldr	r1, [pc, #920]	; 183f8 <test_clone_slice@@Base+0x3e4>
   1805c:	mov	r0, r4
   18060:	bl	13324 <_start@@Base+0x4dc>
   18064:	mvn	r3, #0
   18068:	mov	r2, #7
   1806c:	str	r3, [sp, #4]
   18070:	str	r6, [sp]
   18074:	mov	r3, r6
   18078:	add	r1, sp, #24
   1807c:	mov	r0, r4
   18080:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   18084:	ldr	r6, [pc, #880]	; 183fc <test_clone_slice@@Base+0x3e8>
   18088:	mov	r1, r0
   1808c:	mov	r0, r4
   18090:	bl	131b0 <_start@@Base+0x368>
   18094:	mov	r0, r4
   18098:	bl	13340 <_start@@Base+0x4f8>
   1809c:	mov	r1, #2
   180a0:	mov	r0, r4
   180a4:	bl	1b46c <flatcc_builder_extend_vector@@Base>
   180a8:	mov	r3, #22
   180ac:	strh	r3, [r0]
   180b0:	mov	r3, #44	; 0x2c
   180b4:	strh	r3, [r0, #4]
   180b8:	mov	r0, r4
   180bc:	bl	13370 <_start@@Base+0x528>
   180c0:	mov	r3, #16
   180c4:	mov	r2, #32
   180c8:	mov	r1, r5
   180cc:	mov	r0, r4
   180d0:	bl	1ca20 <flatcc_builder_table_add@@Base>
   180d4:	vstr	s16, [r0]
   180d8:	mov	r0, r4
   180dc:	bl	142f0 <_start@@Base+0x14a8>
   180e0:	add	r1, sp, #20
   180e4:	mov	r0, r4
   180e8:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   180ec:	ldr	r3, [r6]
   180f0:	ldr	r2, [sp, #20]
   180f4:	mov	r1, r0
   180f8:	mov	sl, r0
   180fc:	ldr	r0, [pc, #764]	; 18400 <test_clone_slice@@Base+0x3ec>
   18100:	bl	13214 <_start@@Base+0x3cc>
   18104:	mov	r0, sl
   18108:	bl	12fe4 <_start@@Base+0x19c>
   1810c:	mov	r8, r0
   18110:	mov	r0, r4
   18114:	bl	1acd8 <flatcc_builder_reset@@Base>
   18118:	mov	r0, r4
   1811c:	bl	130ec <_start@@Base+0x2a4>
   18120:	mov	r0, r8
   18124:	bl	13b90 <_start@@Base+0xd48>
   18128:	str	r6, [sp, #12]
   1812c:	subs	r5, r0, #0
   18130:	bne	18148 <test_clone_slice@@Base+0x134>
   18134:	ldr	r3, [pc, #772]	; 18440 <test_clone_slice@@Base+0x42c>
   18138:	ldr	r2, [pc, #708]	; 18404 <test_clone_slice@@Base+0x3f0>
   1813c:	ldr	r1, [pc, #768]	; 18444 <test_clone_slice@@Base+0x430>
   18140:	ldr	r0, [pc, #704]	; 18408 <test_clone_slice@@Base+0x3f4>
   18144:	bl	12ab4 <__assert_fail@plt>
   18148:	mov	r0, r8
   1814c:	bl	139c4 <_start@@Base+0xb7c>
   18150:	subs	r9, r0, #0
   18154:	ldreq	r3, [pc, #740]	; 18440 <test_clone_slice@@Base+0x42c>
   18158:	ldreq	r2, [pc, #684]	; 1840c <test_clone_slice@@Base+0x3f8>
   1815c:	ldreq	r1, [pc, #736]	; 18444 <test_clone_slice@@Base+0x430>
   18160:	ldreq	r0, [pc, #680]	; 18410 <test_clone_slice@@Base+0x3fc>
   18164:	beq	18144 <test_clone_slice@@Base+0x130>
   18168:	mov	r0, r8
   1816c:	bl	13874 <_start@@Base+0xa2c>
   18170:	subs	r7, r0, #0
   18174:	ldreq	r3, [pc, #708]	; 18440 <test_clone_slice@@Base+0x42c>
   18178:	ldreq	r2, [pc, #660]	; 18414 <test_clone_slice@@Base+0x400>
   1817c:	ldreq	r1, [pc, #704]	; 18444 <test_clone_slice@@Base+0x430>
   18180:	ldreq	r0, [pc, #656]	; 18418 <test_clone_slice@@Base+0x404>
   18184:	beq	18144 <test_clone_slice@@Base+0x130>
   18188:	ldr	r2, [r5, #-4]
   1818c:	mov	r1, r5
   18190:	mov	r0, r4
   18194:	bl	1c890 <flatcc_builder_create_string@@Base>
   18198:	mov	r1, r0
   1819c:	mov	r0, r4
   181a0:	bl	13150 <_start@@Base+0x308>
   181a4:	mov	r0, r4
   181a8:	bl	1b99c <flatcc_builder_start_offset_vector@@Base>
   181ac:	mov	r1, r5
   181b0:	ldr	r2, [r5, #-4]
   181b4:	mov	r0, r4
   181b8:	bl	1c890 <flatcc_builder_create_string@@Base>
   181bc:	subs	r1, r0, #0
   181c0:	beq	181cc <test_clone_slice@@Base+0x1b8>
   181c4:	mov	r0, r4
   181c8:	bl	1b5d0 <flatcc_builder_offset_vector_push@@Base>
   181cc:	mov	r1, r5
   181d0:	mov	r3, #20
   181d4:	mov	r2, #4
   181d8:	mov	r0, r4
   181dc:	bl	1338c <_start@@Base+0x544>
   181e0:	mov	r3, #3
   181e4:	mov	r2, #0
   181e8:	mov	r1, r5
   181ec:	mov	r0, r4
   181f0:	bl	1338c <_start@@Base+0x544>
   181f4:	mov	r0, r4
   181f8:	bl	1c360 <flatcc_builder_end_offset_vector@@Base>
   181fc:	mov	r6, #1
   18200:	mov	fp, #2
   18204:	mov	r1, r0
   18208:	mov	r0, r4
   1820c:	bl	13120 <_start@@Base+0x2d8>
   18210:	mov	r0, r4
   18214:	bl	130e4 <_start@@Base+0x29c>
   18218:	ldr	r2, [r5, #-4]
   1821c:	mov	r0, r4
   18220:	cmp	r2, #2
   18224:	movcc	r1, r2
   18228:	movcs	r1, #2
   1822c:	sub	r2, r2, r1
   18230:	cmp	r2, #20
   18234:	movcs	r2, #20
   18238:	add	r1, r5, r1
   1823c:	bl	1c890 <flatcc_builder_create_string@@Base>
   18240:	mvn	r5, #0
   18244:	mov	r1, r0
   18248:	mov	r0, r4
   1824c:	bl	13150 <_start@@Base+0x308>
   18250:	mov	r3, r6
   18254:	str	r5, [sp, #4]
   18258:	str	r6, [sp]
   1825c:	mov	r1, r9
   18260:	ldr	r2, [r9, #-4]
   18264:	mov	r0, r4
   18268:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   1826c:	mov	r1, r0
   18270:	mov	r0, r4
   18274:	bl	131b0 <_start@@Base+0x368>
   18278:	ldr	r2, [r7, #-4]
   1827c:	mvn	r3, #-1073741824	; 0xc0000000
   18280:	cmp	r2, r6
   18284:	movcc	r1, r2
   18288:	movcs	r1, r6
   1828c:	str	r3, [sp, #4]
   18290:	mov	r0, r4
   18294:	mov	r3, #4
   18298:	str	fp, [sp]
   1829c:	sub	r2, r2, r1
   182a0:	cmp	r2, fp
   182a4:	movcs	r2, fp
   182a8:	add	r1, r7, r1, lsl fp
   182ac:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   182b0:	mov	r1, r0
   182b4:	mov	r0, r4
   182b8:	bl	13180 <_start@@Base+0x338>
   182bc:	mov	r0, r4
   182c0:	bl	142a4 <_start@@Base+0x145c>
   182c4:	mov	r1, r6
   182c8:	mov	r2, r0
   182cc:	mov	r0, r4
   182d0:	bl	14244 <_start@@Base+0x13fc>
   182d4:	ldr	r2, [r9, #-4]
   182d8:	mov	r3, r6
   182dc:	cmp	r2, #3
   182e0:	movcc	r1, r2
   182e4:	movcs	r1, #3
   182e8:	mov	r0, r4
   182ec:	str	r5, [sp, #4]
   182f0:	str	r6, [sp]
   182f4:	sub	r2, r2, r1
   182f8:	add	r1, r9, r1
   182fc:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   18300:	mov	r1, r0
   18304:	mov	r0, r4
   18308:	bl	131b0 <_start@@Base+0x368>
   1830c:	mov	r0, r8
   18310:	bl	1359c <_start@@Base+0x754>
   18314:	mov	r3, #16
   18318:	str	r3, [sp]
   1831c:	mov	r1, #0
   18320:	mov	r3, #32
   18324:	mov	r2, r0
   18328:	mov	r0, r4
   1832c:	bl	1cba0 <flatcc_builder_table_add_copy@@Base>
   18330:	mvn	r3, #-1073741824	; 0xc0000000
   18334:	str	r3, [sp, #4]
   18338:	str	fp, [sp]
   1833c:	mov	r3, #4
   18340:	ldr	r2, [r7, #-4]
   18344:	mov	r1, r7
   18348:	mov	r0, r4
   1834c:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   18350:	mov	r1, r0
   18354:	mov	r0, r4
   18358:	bl	13180 <_start@@Base+0x338>
   1835c:	mov	r0, r4
   18360:	bl	142f0 <_start@@Base+0x14a8>
   18364:	add	r1, sp, #20
   18368:	mov	r0, r4
   1836c:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   18370:	ldr	r3, [sp, #12]
   18374:	ldr	r2, [sp, #20]
   18378:	ldr	r3, [r3]
   1837c:	mov	r1, r0
   18380:	mov	r4, r0
   18384:	ldr	r0, [pc, #144]	; 1841c <test_clone_slice@@Base+0x408>
   18388:	bl	13214 <_start@@Base+0x3cc>
   1838c:	mov	r0, r4
   18390:	bl	12fe4 <_start@@Base+0x19c>
   18394:	mov	r4, r0
   18398:	bl	13b90 <_start@@Base+0xd48>
   1839c:	ldr	r1, [pc, #84]	; 183f8 <test_clone_slice@@Base+0x3e4>
   183a0:	bl	129b8 <strcmp@plt>
   183a4:	subs	r8, r0, #0
   183a8:	ldrne	r0, [pc, #112]	; 18420 <test_clone_slice@@Base+0x40c>
   183ac:	bne	183d8 <test_clone_slice@@Base+0x3c4>
   183b0:	mov	r0, r4
   183b4:	bl	13918 <_start@@Base+0xad0>
   183b8:	mov	r1, r8
   183bc:	mov	r7, r0
   183c0:	bl	13978 <_start@@Base+0xb30>
   183c4:	ldr	r1, [pc, #44]	; 183f8 <test_clone_slice@@Base+0x3e4>
   183c8:	bl	129b8 <strcmp@plt>
   183cc:	cmp	r0, #0
   183d0:	beq	1847c <test_clone_slice@@Base+0x468>
   183d4:	ldr	r0, [pc, #72]	; 18424 <test_clone_slice@@Base+0x410>
   183d8:	bl	12a0c <puts@plt>
   183dc:	mov	r0, sl
   183e0:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   183e4:	mov	r0, r5
   183e8:	add	sp, sp, #36	; 0x24
   183ec:	vpop	{d8}
   183f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183f4:	eorgt	r3, r9, #-872415232	; 0xcc000000
   183f8:	andeq	r0, r2, fp, lsr #18
   183fc:	andeq	r3, r3, r8, ror r0
   18400:	andeq	r0, r2, r2, asr #17
   18404:	andeq	r0, r0, r4, asr #12
   18408:	ldrdeq	pc, [r1], -r1
   1840c:	andeq	r0, r0, r6, asr #12
   18410:	ldrdeq	r0, [r2], -ip
   18414:	andeq	r0, r0, r8, asr #12
   18418:	andeq	r0, r2, r2, ror #17
   1841c:	andeq	r0, r2, r8, ror #17
   18420:	strdeq	r0, [r2], -pc	; <UNPREDICTABLE>
   18424:	andeq	r0, r2, r9, lsl r9
   18428:	andeq	r0, r2, r6, lsr r9
   1842c:	andeq	r0, r2, ip, ror #18
   18430:	andeq	r0, r2, sl, asr r9
   18434:	andeq	r0, r2, r3, ror r9
   18438:	andeq	r0, r2, r5, lsr #19
   1843c:	muleq	r2, r3, r9
   18440:	andeq	lr, r1, lr, asr #22
   18444:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   18448:	andeq	pc, r1, pc, lsl #23
   1844c:	andeq	r0, r2, sp, lsr #18
   18450:	andeq	r0, r2, r9, lsr #19
   18454:	ldrdeq	r0, [r2], -r9
   18458:	strdeq	r0, [r2], -r5
   1845c:	andeq	r0, r2, r3, lsl sl
   18460:	andeq	r0, r2, pc, lsr #20
   18464:	andeq	r0, r2, sp, asr #20
   18468:	andeq	r0, r2, r6, ror #20
   1846c:	muleq	r2, r9, sl
   18470:			; <UNDEFINED> instruction: 0x00020ab4
   18474:	andeq	r0, r2, pc, asr #21
   18478:	andeq	r0, r2, ip, ror #21
   1847c:	mov	r1, r6
   18480:	mov	r0, r7
   18484:	bl	13978 <_start@@Base+0xb30>
   18488:	subs	r3, r0, #0
   1848c:	beq	1849c <test_clone_slice@@Base+0x488>
   18490:	ldr	r3, [r3, #-4]
   18494:	cmp	r3, #6
   18498:	beq	184a8 <test_clone_slice@@Base+0x494>
   1849c:	ldr	r0, [pc, #-124]	; 18428 <test_clone_slice@@Base+0x414>
   184a0:	bl	12a0c <puts@plt>
   184a4:	b	18534 <test_clone_slice@@Base+0x520>
   184a8:	ldr	r1, [pc, #-132]	; 1842c <test_clone_slice@@Base+0x418>
   184ac:	bl	129b8 <strcmp@plt>
   184b0:	cmp	r0, #0
   184b4:	ldrne	r0, [pc, #-140]	; 18430 <test_clone_slice@@Base+0x41c>
   184b8:	bne	183d8 <test_clone_slice@@Base+0x3c4>
   184bc:	mov	r1, fp
   184c0:	mov	r0, r7
   184c4:	bl	13978 <_start@@Base+0xb30>
   184c8:	subs	r3, r0, #0
   184cc:	beq	184dc <test_clone_slice@@Base+0x4c8>
   184d0:	ldr	r3, [r3, #-4]
   184d4:	cmp	r3, #3
   184d8:	beq	184e4 <test_clone_slice@@Base+0x4d0>
   184dc:	ldr	r0, [pc, #-176]	; 18434 <test_clone_slice@@Base+0x420>
   184e0:	b	184a0 <test_clone_slice@@Base+0x48c>
   184e4:	ldr	r1, [pc, #-180]	; 18438 <test_clone_slice@@Base+0x424>
   184e8:	bl	129b8 <strcmp@plt>
   184ec:	cmp	r0, #0
   184f0:	ldrne	r0, [pc, #-188]	; 1843c <test_clone_slice@@Base+0x428>
   184f4:	bne	183d8 <test_clone_slice@@Base+0x3c4>
   184f8:	mov	r0, r4
   184fc:	bl	13b30 <_start@@Base+0xce8>
   18500:	subs	r6, r0, #0
   18504:	ldreq	r3, [pc, #-204]	; 18440 <test_clone_slice@@Base+0x42c>
   18508:	moveq	r2, #1664	; 0x680
   1850c:	ldreq	r1, [pc, #-208]	; 18444 <test_clone_slice@@Base+0x430>
   18510:	ldreq	r0, [pc, #-208]	; 18448 <test_clone_slice@@Base+0x434>
   18514:	beq	18144 <test_clone_slice@@Base+0x130>
   18518:	bl	13b90 <_start@@Base+0xd48>
   1851c:	ldr	r1, [pc, #-216]	; 1844c <test_clone_slice@@Base+0x438>
   18520:	bl	129b8 <strcmp@plt>
   18524:	cmp	r0, #0
   18528:	beq	1853c <test_clone_slice@@Base+0x528>
   1852c:	ldr	r0, [pc, #-228]	; 18450 <test_clone_slice@@Base+0x43c>
   18530:	bl	129c4 <printf@plt>
   18534:	mvn	r5, #0
   18538:	b	183dc <test_clone_slice@@Base+0x3c8>
   1853c:	mov	r0, r6
   18540:	bl	139c4 <_start@@Base+0xb7c>
   18544:	subs	r3, r0, #0
   18548:	beq	18558 <test_clone_slice@@Base+0x544>
   1854c:	ldr	r2, [r3, #-4]
   18550:	cmp	r2, #7
   18554:	beq	18560 <test_clone_slice@@Base+0x54c>
   18558:	ldr	r0, [pc, #-268]	; 18454 <test_clone_slice@@Base+0x440>
   1855c:	b	184a0 <test_clone_slice@@Base+0x48c>
   18560:	add	r1, sp, #24
   18564:	bl	129e8 <memcmp@plt>
   18568:	cmp	r0, #0
   1856c:	ldrne	r0, [pc, #-284]	; 18458 <test_clone_slice@@Base+0x444>
   18570:	bne	184a0 <test_clone_slice@@Base+0x48c>
   18574:	mov	r0, r4
   18578:	bl	139c4 <_start@@Base+0xb7c>
   1857c:	subs	r3, r0, #0
   18580:	beq	18590 <test_clone_slice@@Base+0x57c>
   18584:	ldr	r2, [r3, #-4]
   18588:	cmp	r2, #4
   1858c:	beq	18598 <test_clone_slice@@Base+0x584>
   18590:	ldr	r0, [pc, #-316]	; 1845c <test_clone_slice@@Base+0x448>
   18594:	b	184a0 <test_clone_slice@@Base+0x48c>
   18598:	add	r1, sp, #27
   1859c:	bl	129e8 <memcmp@plt>
   185a0:	subs	r5, r0, #0
   185a4:	ldrne	r0, [pc, #-332]	; 18460 <test_clone_slice@@Base+0x44c>
   185a8:	bne	184a0 <test_clone_slice@@Base+0x48c>
   185ac:	mov	r0, r4
   185b0:	bl	1359c <_start@@Base+0x754>
   185b4:	vldr	s15, [r0]
   185b8:	vcmp.f32	s15, s16
   185bc:	vmrs	APSR_nzcv, fpscr
   185c0:	ldrne	r0, [pc, #-356]	; 18464 <test_clone_slice@@Base+0x450>
   185c4:	bne	184a0 <test_clone_slice@@Base+0x48c>
   185c8:	mov	r0, r4
   185cc:	bl	13874 <_start@@Base+0xa2c>
   185d0:	subs	r4, r0, #0
   185d4:	beq	185e4 <test_clone_slice@@Base+0x5d0>
   185d8:	ldr	r3, [r4, #-4]
   185dc:	cmp	r3, #2
   185e0:	beq	185ec <test_clone_slice@@Base+0x5d8>
   185e4:	ldr	r0, [pc, #-388]	; 18468 <test_clone_slice@@Base+0x454>
   185e8:	b	184a0 <test_clone_slice@@Base+0x48c>
   185ec:	mov	r1, r5
   185f0:	bl	138d8 <_start@@Base+0xa90>
   185f4:	cmp	r0, #0
   185f8:	beq	18608 <test_clone_slice@@Base+0x5f4>
   185fc:	ldrsh	r3, [r0]
   18600:	cmp	r3, #22
   18604:	beq	18610 <test_clone_slice@@Base+0x5fc>
   18608:	ldr	r0, [pc, #-420]	; 1846c <test_clone_slice@@Base+0x458>
   1860c:	b	184a0 <test_clone_slice@@Base+0x48c>
   18610:	mov	r1, #1
   18614:	mov	r0, r4
   18618:	bl	138d8 <_start@@Base+0xa90>
   1861c:	cmp	r0, #0
   18620:	beq	18630 <test_clone_slice@@Base+0x61c>
   18624:	ldrsh	r3, [r0]
   18628:	cmp	r3, #44	; 0x2c
   1862c:	beq	18638 <test_clone_slice@@Base+0x624>
   18630:	ldr	r0, [pc, #-456]	; 18470 <test_clone_slice@@Base+0x45c>
   18634:	b	184a0 <test_clone_slice@@Base+0x48c>
   18638:	mov	r0, r6
   1863c:	bl	13874 <_start@@Base+0xa2c>
   18640:	subs	r3, r0, #0
   18644:	beq	18654 <test_clone_slice@@Base+0x640>
   18648:	ldr	r3, [r3, #-4]
   1864c:	cmp	r3, #1
   18650:	beq	1865c <test_clone_slice@@Base+0x648>
   18654:	ldr	r0, [pc, #-488]	; 18474 <test_clone_slice@@Base+0x460>
   18658:	b	184a0 <test_clone_slice@@Base+0x48c>
   1865c:	mov	r1, #0
   18660:	bl	138d8 <_start@@Base+0xa90>
   18664:	cmp	r0, #0
   18668:	beq	18678 <test_clone_slice@@Base+0x664>
   1866c:	ldrsh	r3, [r0]
   18670:	cmp	r3, #44	; 0x2c
   18674:	beq	183dc <test_clone_slice@@Base+0x3c8>
   18678:	ldr	r0, [pc, #-520]	; 18478 <test_clone_slice@@Base+0x464>
   1867c:	b	184a0 <test_clone_slice@@Base+0x48c>

00018680 <test_create_add_field@@Base>:
   18680:	push	{r0, r1, r4, r5, r6, lr}
   18684:	mov	r4, r0
   18688:	bl	1acd8 <flatcc_builder_reset@@Base>
   1868c:	mov	r0, r4
   18690:	bl	130ec <_start@@Base+0x2a4>
   18694:	ldr	r1, [pc, #388]	; 18820 <test_create_add_field@@Base+0x1a0>
   18698:	mov	r0, r4
   1869c:	bl	13324 <_start@@Base+0x4dc>
   186a0:	ldr	r1, [pc, #380]	; 18824 <test_create_add_field@@Base+0x1a4>
   186a4:	mov	r0, r4
   186a8:	bl	1c928 <flatcc_builder_create_string_str@@Base>
   186ac:	mov	r1, #3
   186b0:	mov	r5, r0
   186b4:	mov	r0, r4
   186b8:	bl	1ba60 <flatcc_builder_start_table@@Base>
   186bc:	subs	r6, r0, #0
   186c0:	bne	18754 <test_create_add_field@@Base+0xd4>
   186c4:	mov	r3, #8
   186c8:	mov	r2, r3
   186cc:	mov	r1, #1
   186d0:	mov	r0, r4
   186d4:	bl	1ca20 <flatcc_builder_table_add@@Base>
   186d8:	cmp	r0, #0
   186dc:	beq	18754 <test_create_add_field@@Base+0xd4>
   186e0:	mvn	r2, #99	; 0x63
   186e4:	mvn	r3, #0
   186e8:	cmp	r5, #0
   186ec:	strd	r2, [r0]
   186f0:	beq	18754 <test_create_add_field@@Base+0xd4>
   186f4:	mov	r1, r6
   186f8:	mov	r0, r4
   186fc:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   18700:	cmp	r0, #0
   18704:	beq	18754 <test_create_add_field@@Base+0xd4>
   18708:	mov	r3, #2
   1870c:	str	r5, [r0]
   18710:	mov	r2, r3
   18714:	mov	r1, r3
   18718:	mov	r0, r4
   1871c:	bl	1ca20 <flatcc_builder_table_add@@Base>
   18720:	cmp	r0, #0
   18724:	beq	18754 <test_create_add_field@@Base+0xd4>
   18728:	mov	r3, #2
   1872c:	strh	r3, [r0]
   18730:	mov	r0, r4
   18734:	bl	14378 <_start@@Base+0x1530>
   18738:	subs	r5, r0, #0
   1873c:	beq	18754 <test_create_add_field@@Base+0xd4>
   18740:	mov	r1, #14
   18744:	mov	r0, r4
   18748:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   1874c:	cmp	r0, #0
   18750:	strne	r5, [r0]
   18754:	mov	r0, r4
   18758:	bl	142f0 <_start@@Base+0x14a8>
   1875c:	add	r1, sp, #4
   18760:	mov	r0, r4
   18764:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   18768:	mov	r5, r0
   1876c:	bl	12fe4 <_start@@Base+0x19c>
   18770:	cmp	r0, #0
   18774:	moveq	r2, #716	; 0x2cc
   18778:	ldreq	r3, [pc, #168]	; 18828 <test_create_add_field@@Base+0x1a8>
   1877c:	beq	187b8 <test_create_add_field@@Base+0x138>
   18780:	ldr	r3, [r0]
   18784:	sub	r3, r0, r3
   18788:	ldrh	r2, [r3]
   1878c:	cmp	r2, #29
   18790:	bls	187a4 <test_create_add_field@@Base+0x124>
   18794:	ldrh	r3, [r3, #28]
   18798:	cmp	r3, #0
   1879c:	ldrne	r0, [pc, #136]	; 1882c <test_create_add_field@@Base+0x1ac>
   187a0:	bne	18804 <test_create_add_field@@Base+0x184>
   187a4:	bl	14010 <_start@@Base+0x11c8>
   187a8:	cmp	r0, #0
   187ac:	bne	187c4 <test_create_add_field@@Base+0x144>
   187b0:	ldr	r3, [pc, #120]	; 18830 <test_create_add_field@@Base+0x1b0>
   187b4:	mov	r2, #608	; 0x260
   187b8:	ldr	r1, [pc, #116]	; 18834 <test_create_add_field@@Base+0x1b4>
   187bc:	ldr	r0, [pc, #116]	; 18838 <test_create_add_field@@Base+0x1b8>
   187c0:	bl	12ab4 <__assert_fail@plt>
   187c4:	ldr	r3, [r0]
   187c8:	sub	r3, r0, r3
   187cc:	ldrh	r2, [r3]
   187d0:	cmp	r2, #7
   187d4:	bls	18800 <test_create_add_field@@Base+0x180>
   187d8:	ldrh	r3, [r3, #6]
   187dc:	cmp	r3, #0
   187e0:	beq	18800 <test_create_add_field@@Base+0x180>
   187e4:	ldrd	r0, [r0, r3]
   187e8:	mvn	r3, #0
   187ec:	mvn	r2, #99	; 0x63
   187f0:	cmp	r1, r3
   187f4:	cmpeq	r0, r2
   187f8:	moveq	r4, #0
   187fc:	beq	1880c <test_create_add_field@@Base+0x18c>
   18800:	ldr	r0, [pc, #52]	; 1883c <test_create_add_field@@Base+0x1bc>
   18804:	bl	12a0c <puts@plt>
   18808:	mvn	r4, #0
   1880c:	mov	r0, r5
   18810:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   18814:	mov	r0, r4
   18818:	add	sp, sp, #8
   1881c:	pop	{r4, r5, r6, pc}
   18820:	strdeq	pc, [r1], -r9
   18824:	andeq	r0, r2, r0, lsl fp
   18828:	andeq	lr, r1, pc, asr fp
   1882c:	andeq	r0, r2, r6, lsl fp
   18830:	andeq	lr, r1, r7, lsl #23
   18834:	andeq	lr, r1, r3, lsl #26
   18838:	andeq	lr, r1, r5, ror #26
   1883c:	andeq	r0, r2, r3, asr #22

00018840 <test_union_vector@@Base>:
   18840:	push	{r4, r5, r6, r7, lr}
   18844:	mov	r4, r0
   18848:	sub	sp, sp, #28
   1884c:	bl	1acd8 <flatcc_builder_reset@@Base>
   18850:	mov	r0, r4
   18854:	bl	130ec <_start@@Base+0x2a4>
   18858:	ldr	r1, [pc, #680]	; 18b08 <test_union_vector@@Base+0x2c8>
   1885c:	mov	r0, r4
   18860:	bl	13324 <_start@@Base+0x4dc>
   18864:	mov	r1, #4
   18868:	mov	r0, r4
   1886c:	bl	1ba60 <flatcc_builder_start_table@@Base>
   18870:	subs	r2, r0, #0
   18874:	movne	r5, #0
   18878:	bne	188b4 <test_union_vector@@Base+0x74>
   1887c:	ldr	r5, [pc, #648]	; 18b0c <test_union_vector@@Base+0x2cc>
   18880:	mov	r0, r4
   18884:	add	r1, r5, #4
   18888:	bl	1c01c <flatcc_builder_check_required@@Base>
   1888c:	cmp	r0, #0
   18890:	bne	188a8 <test_union_vector@@Base+0x68>
   18894:	ldr	r1, [pc, #628]	; 18b10 <test_union_vector@@Base+0x2d0>
   18898:	ldr	r0, [pc, #628]	; 18b14 <test_union_vector@@Base+0x2d4>
   1889c:	add	r3, r5, #6
   188a0:	mov	r2, #217	; 0xd9
   188a4:	bl	12ab4 <__assert_fail@plt>
   188a8:	mov	r0, r4
   188ac:	bl	1c09c <flatcc_builder_end_table@@Base>
   188b0:	mov	r5, r0
   188b4:	mov	r0, r4
   188b8:	bl	1c5cc <flatcc_builder_start_union_vector@@Base>
   188bc:	add	r3, sp, #24
   188c0:	mov	r7, #2
   188c4:	str	r5, [sp, #20]
   188c8:	strb	r7, [sp, #16]
   188cc:	mov	r0, r4
   188d0:	ldmdb	r3, {r1, r2}
   188d4:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   188d8:	mov	r1, r4
   188dc:	add	r0, sp, #8
   188e0:	bl	1c614 <flatcc_builder_end_union_vector@@Base>
   188e4:	mov	r1, #4
   188e8:	mov	r0, r4
   188ec:	bl	1ba60 <flatcc_builder_start_table@@Base>
   188f0:	ldr	r6, [sp, #8]
   188f4:	ldr	r5, [sp, #12]
   188f8:	cmp	r5, #0
   188fc:	cmpne	r6, #0
   18900:	beq	18930 <test_union_vector@@Base+0xf0>
   18904:	mov	r1, r7
   18908:	mov	r0, r4
   1890c:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   18910:	cmp	r0, #0
   18914:	beq	18930 <test_union_vector@@Base+0xf0>
   18918:	str	r6, [r0]
   1891c:	mov	r1, #3
   18920:	mov	r0, r4
   18924:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   18928:	cmp	r0, #0
   1892c:	strne	r5, [r0]
   18930:	mov	r2, #0
   18934:	ldr	r1, [pc, #476]	; 18b18 <test_union_vector@@Base+0x2d8>
   18938:	mov	r0, r4
   1893c:	bl	1c01c <flatcc_builder_check_required@@Base>
   18940:	cmp	r0, #0
   18944:	ldreq	r3, [pc, #464]	; 18b1c <test_union_vector@@Base+0x2dc>
   18948:	moveq	r2, #223	; 0xdf
   1894c:	ldreq	r1, [pc, #444]	; 18b10 <test_union_vector@@Base+0x2d0>
   18950:	ldreq	r0, [pc, #456]	; 18b20 <test_union_vector@@Base+0x2e0>
   18954:	beq	188a4 <test_union_vector@@Base+0x64>
   18958:	mov	r0, r4
   1895c:	bl	1c09c <flatcc_builder_end_table@@Base>
   18960:	subs	r2, r0, #0
   18964:	beq	18974 <test_union_vector@@Base+0x134>
   18968:	mov	r1, #4
   1896c:	mov	r0, r4
   18970:	bl	14244 <_start@@Base+0x13fc>
   18974:	mov	r0, r4
   18978:	bl	142f0 <_start@@Base+0x14a8>
   1897c:	add	r1, sp, #4
   18980:	mov	r0, r4
   18984:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   18988:	ldr	r1, [sp, #4]
   1898c:	mov	r7, r0
   18990:	bl	131e0 <_start@@Base+0x398>
   18994:	subs	r6, r0, #0
   18998:	beq	189bc <test_union_vector@@Base+0x17c>
   1899c:	bl	1d918 <flatcc_verify_error_string@@Base>
   189a0:	mvn	r6, #0
   189a4:	mov	r1, r0
   189a8:	ldr	r0, [pc, #372]	; 18b24 <test_union_vector@@Base+0x2e4>
   189ac:	bl	129c4 <printf@plt>
   189b0:	mov	r0, r6
   189b4:	add	sp, sp, #28
   189b8:	pop	{r4, r5, r6, r7, pc}
   189bc:	mov	r0, r7
   189c0:	bl	12fe4 <_start@@Base+0x19c>
   189c4:	mov	r4, r0
   189c8:	bl	13ad8 <_start@@Base+0xc90>
   189cc:	cmp	r0, #4
   189d0:	beq	189e8 <test_union_vector@@Base+0x1a8>
   189d4:	ldr	r0, [pc, #332]	; 18b28 <test_union_vector@@Base+0x2e8>
   189d8:	bl	129c4 <printf@plt>
   189dc:	mov	r0, r7
   189e0:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   189e4:	b	189b0 <test_union_vector@@Base+0x170>
   189e8:	mov	r0, r4
   189ec:	bl	13b30 <_start@@Base+0xce8>
   189f0:	subs	r5, r0, #0
   189f4:	beq	18a18 <test_union_vector@@Base+0x1d8>
   189f8:	ldr	r3, [r5]
   189fc:	sub	r3, r5, r3
   18a00:	ldrh	r2, [r3]
   18a04:	cmp	r2, #11
   18a08:	bls	18a24 <test_union_vector@@Base+0x1e4>
   18a0c:	ldrh	r3, [r3, #10]
   18a10:	cmp	r3, #0
   18a14:	beq	18a24 <test_union_vector@@Base+0x1e4>
   18a18:	ldr	r0, [pc, #268]	; 18b2c <test_union_vector@@Base+0x2ec>
   18a1c:	bl	12a0c <puts@plt>
   18a20:	b	189dc <test_union_vector@@Base+0x19c>
   18a24:	mov	r0, r5
   18a28:	bl	14070 <_start@@Base+0x1228>
   18a2c:	mov	r4, r0
   18a30:	mov	r0, r5
   18a34:	bl	140d4 <_start@@Base+0x128c>
   18a38:	cmp	r4, #0
   18a3c:	mov	r5, r0
   18a40:	beq	18a50 <test_union_vector@@Base+0x210>
   18a44:	ldr	r3, [r4, #-4]
   18a48:	cmp	r3, #1
   18a4c:	beq	18a58 <test_union_vector@@Base+0x218>
   18a50:	ldr	r0, [pc, #216]	; 18b30 <test_union_vector@@Base+0x2f0>
   18a54:	b	18a1c <test_union_vector@@Base+0x1dc>
   18a58:	mov	r1, #0
   18a5c:	mov	r0, r4
   18a60:	bl	14180 <_start@@Base+0x1338>
   18a64:	cmp	r0, #2
   18a68:	ldrne	r0, [pc, #196]	; 18b34 <test_union_vector@@Base+0x2f4>
   18a6c:	bne	18a1c <test_union_vector@@Base+0x1dc>
   18a70:	mov	r1, #0
   18a74:	mov	r0, r5
   18a78:	bl	14138 <_start@@Base+0x12f0>
   18a7c:	cmp	r0, #0
   18a80:	ldreq	r0, [pc, #176]	; 18b38 <test_union_vector@@Base+0x2f8>
   18a84:	beq	18a1c <test_union_vector@@Base+0x1dc>
   18a88:	ldr	r3, [r0]
   18a8c:	sub	r3, r0, r3
   18a90:	ldrh	r2, [r3]
   18a94:	cmp	r2, #5
   18a98:	bls	18ac0 <test_union_vector@@Base+0x280>
   18a9c:	ldrh	r3, [r3, #4]
   18aa0:	cmp	r3, #0
   18aa4:	beq	18ac0 <test_union_vector@@Base+0x280>
   18aa8:	ldrsb	r1, [r0, r3]
   18aac:	cmp	r1, #2
   18ab0:	beq	18ac0 <test_union_vector@@Base+0x280>
   18ab4:	ldr	r0, [pc, #128]	; 18b3c <test_union_vector@@Base+0x2fc>
   18ab8:	bl	129c4 <printf@plt>
   18abc:	b	189dc <test_union_vector@@Base+0x19c>
   18ac0:	cmp	r5, #0
   18ac4:	beq	18ad4 <test_union_vector@@Base+0x294>
   18ac8:	ldr	r3, [r5, #-4]
   18acc:	cmp	r3, #1
   18ad0:	beq	18ae8 <test_union_vector@@Base+0x2a8>
   18ad4:	ldr	r3, [pc, #100]	; 18b40 <test_union_vector@@Base+0x300>
   18ad8:	ldr	r2, [pc, #100]	; 18b44 <test_union_vector@@Base+0x304>
   18adc:	ldr	r1, [pc, #100]	; 18b48 <test_union_vector@@Base+0x308>
   18ae0:	ldr	r0, [pc, #100]	; 18b4c <test_union_vector@@Base+0x30c>
   18ae4:	b	188a4 <test_union_vector@@Base+0x64>
   18ae8:	ldrb	r3, [r4]
   18aec:	cmp	r3, #0
   18af0:	bne	18afc <test_union_vector@@Base+0x2bc>
   18af4:	ldr	r0, [pc, #84]	; 18b50 <test_union_vector@@Base+0x310>
   18af8:	b	18a1c <test_union_vector@@Base+0x1dc>
   18afc:	cmp	r3, #2
   18b00:	beq	189dc <test_union_vector@@Base+0x19c>
   18b04:	b	18af4 <test_union_vector@@Base+0x2b4>
   18b08:	andeq	r0, r2, r6, asr fp
   18b0c:	muleq	r1, ip, fp
   18b10:	andeq	lr, r1, r8, lsl #29
   18b14:	andeq	r0, r2, sp, asr fp
   18b18:	andeq	lr, r1, lr, asr #23
   18b1c:	ldrdeq	lr, [r1], -r0
   18b20:	andeq	r0, r2, pc, lsr #24
   18b24:	andeq	r0, r2, r5, asr #25
   18b28:	andeq	r0, r2, r1, lsl #26
   18b2c:	andeq	r0, r2, r3, lsr #26
   18b30:	andeq	r0, r2, fp, asr #26
   18b34:	andeq	r0, r2, r2, ror sp
   18b38:	muleq	r2, pc, sp	; <UNPREDICTABLE>
   18b3c:	andeq	r0, r2, pc, lsr #27
   18b40:	andeq	lr, r1, r7, ror #23
   18b44:	andeq	r0, r0, sp, ror #4
   18b48:	andeq	lr, r1, r3, lsl #26
   18b4c:	andeq	r0, r2, ip, asr #27
   18b50:	andeq	r0, r2, r1, lsr lr

00018b54 <test_mixed_type_union@@Base>:
   18b54:	push	{r4, r5, r6, r7, r8, r9, lr}
   18b58:	mov	r4, r0
   18b5c:	sub	sp, sp, #116	; 0x74
   18b60:	bl	1acd8 <flatcc_builder_reset@@Base>
   18b64:	ldr	r1, [pc, #2212]	; 19410 <test_mixed_type_union@@Base+0x8bc>
   18b68:	mov	r0, r4
   18b6c:	bl	130d8 <_start@@Base+0x290>
   18b70:	cmp	r0, #0
   18b74:	bne	18b84 <test_mixed_type_union@@Base+0x30>
   18b78:	mov	r1, #10
   18b7c:	mov	r0, r4
   18b80:	bl	1ba60 <flatcc_builder_start_table@@Base>
   18b84:	mov	r1, #10
   18b88:	mov	r0, r4
   18b8c:	bl	15020 <_start@@Base+0x21d8>
   18b90:	mov	r2, #2
   18b94:	mov	r1, r2
   18b98:	mov	r8, r0
   18b9c:	mov	r0, r4
   18ba0:	bl	1b3b8 <flatcc_builder_start_struct@@Base>
   18ba4:	subs	r5, r0, #0
   18ba8:	beq	18bc0 <test_mixed_type_union@@Base+0x6c>
   18bac:	mov	r3, #22
   18bb0:	strh	r3, [r5]
   18bb4:	mov	r0, r4
   18bb8:	bl	1b40c <flatcc_builder_end_struct@@Base>
   18bbc:	mov	r5, r0
   18bc0:	mov	r2, #2
   18bc4:	mov	r1, r2
   18bc8:	mov	r0, r4
   18bcc:	bl	1b3b8 <flatcc_builder_start_struct@@Base>
   18bd0:	cmp	r0, #0
   18bd4:	beq	18c28 <test_mixed_type_union@@Base+0xd4>
   18bd8:	mov	r3, #19
   18bdc:	strh	r3, [r0]
   18be0:	mov	r0, r4
   18be4:	bl	1b40c <flatcc_builder_end_struct@@Base>
   18be8:	subs	r6, r0, #0
   18bec:	beq	18c28 <test_mixed_type_union@@Base+0xd4>
   18bf0:	mov	r3, #1
   18bf4:	mov	r2, r3
   18bf8:	mov	r1, #0
   18bfc:	mov	r0, r4
   18c00:	bl	1ca20 <flatcc_builder_table_add@@Base>
   18c04:	subs	r7, r0, #0
   18c08:	beq	18c28 <test_mixed_type_union@@Base+0xd4>
   18c0c:	mov	r1, #1
   18c10:	mov	r0, r4
   18c14:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   18c18:	cmp	r0, #0
   18c1c:	movne	r3, #8
   18c20:	strbne	r3, [r7]
   18c24:	strne	r6, [r0]
   18c28:	cmp	r5, #0
   18c2c:	beq	18c68 <test_mixed_type_union@@Base+0x114>
   18c30:	mov	r3, #1
   18c34:	mov	r2, r3
   18c38:	mov	r1, #6
   18c3c:	mov	r0, r4
   18c40:	bl	1ca20 <flatcc_builder_table_add@@Base>
   18c44:	subs	r6, r0, #0
   18c48:	beq	18c68 <test_mixed_type_union@@Base+0x114>
   18c4c:	mov	r1, #7
   18c50:	mov	r0, r4
   18c54:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   18c58:	cmp	r0, #0
   18c5c:	movne	r3, #8
   18c60:	strbne	r3, [r6]
   18c64:	strne	r5, [r0]
   18c68:	mov	r1, #1
   18c6c:	mov	r0, r4
   18c70:	bl	1ba60 <flatcc_builder_start_table@@Base>
   18c74:	cmp	r0, #0
   18c78:	beq	18ed0 <test_mixed_type_union@@Base+0x37c>
   18c7c:	mov	r6, #0
   18c80:	ldr	r1, [pc, #1932]	; 19414 <test_mixed_type_union@@Base+0x8c0>
   18c84:	mov	r0, r4
   18c88:	bl	1c928 <flatcc_builder_create_string_str@@Base>
   18c8c:	subs	r7, r0, #0
   18c90:	beq	18ccc <test_mixed_type_union@@Base+0x178>
   18c94:	mov	r3, #1
   18c98:	mov	r2, r3
   18c9c:	mov	r1, #4
   18ca0:	mov	r0, r4
   18ca4:	bl	1ca20 <flatcc_builder_table_add@@Base>
   18ca8:	subs	r9, r0, #0
   18cac:	beq	18ccc <test_mixed_type_union@@Base+0x178>
   18cb0:	mov	r1, #5
   18cb4:	mov	r0, r4
   18cb8:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   18cbc:	cmp	r0, #0
   18cc0:	movne	r3, #11
   18cc4:	strbne	r3, [r9]
   18cc8:	strne	r7, [r0]
   18ccc:	mov	r0, r4
   18cd0:	bl	1c5cc <flatcc_builder_start_union_vector@@Base>
   18cd4:	mov	r3, #8
   18cd8:	strb	r3, [sp, #104]	; 0x68
   18cdc:	add	r3, sp, #112	; 0x70
   18ce0:	str	r5, [sp, #108]	; 0x6c
   18ce4:	mov	r0, r4
   18ce8:	ldmdb	r3, {r1, r2}
   18cec:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18cf0:	mov	r3, #2
   18cf4:	strb	r3, [sp, #96]	; 0x60
   18cf8:	add	r3, sp, #96	; 0x60
   18cfc:	str	r6, [sp, #100]	; 0x64
   18d00:	mov	r0, r4
   18d04:	ldm	r3, {r1, r2}
   18d08:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18d0c:	mov	r1, #1
   18d10:	mov	r0, r4
   18d14:	bl	1ba60 <flatcc_builder_start_table@@Base>
   18d18:	cmp	r0, #0
   18d1c:	movne	r0, #0
   18d20:	bne	18d30 <test_mixed_type_union@@Base+0x1dc>
   18d24:	mov	r1, #1
   18d28:	mov	r0, r4
   18d2c:	bl	143c4 <_start@@Base+0x157c>
   18d30:	add	r3, sp, #88	; 0x58
   18d34:	mov	r7, #2
   18d38:	strb	r7, [sp, #88]	; 0x58
   18d3c:	str	r0, [sp, #92]	; 0x5c
   18d40:	mov	r0, r4
   18d44:	ldm	r3, {r1, r2}
   18d48:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18d4c:	ldr	r1, [pc, #1732]	; 19418 <test_mixed_type_union@@Base+0x8c4>
   18d50:	mov	r0, r4
   18d54:	bl	1c928 <flatcc_builder_create_string_str@@Base>
   18d58:	add	r3, sp, #80	; 0x50
   18d5c:	mov	r6, #11
   18d60:	strb	r6, [sp, #80]	; 0x50
   18d64:	mov	r5, #9
   18d68:	str	r0, [sp, #84]	; 0x54
   18d6c:	mov	r0, r4
   18d70:	ldm	r3, {r1, r2}
   18d74:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18d78:	add	r3, sp, #72	; 0x48
   18d7c:	strb	r5, [sp, #72]	; 0x48
   18d80:	str	r8, [sp, #76]	; 0x4c
   18d84:	mov	r0, r4
   18d88:	ldm	r3, {r1, r2}
   18d8c:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18d90:	mov	r2, #4
   18d94:	mov	r1, r2
   18d98:	mov	r0, r4
   18d9c:	bl	1b3b8 <flatcc_builder_start_struct@@Base>
   18da0:	mov	r3, #3
   18da4:	str	r3, [r0]
   18da8:	mov	r0, r4
   18dac:	bl	1b40c <flatcc_builder_end_struct@@Base>
   18db0:	add	r3, sp, #64	; 0x40
   18db4:	strb	r5, [sp, #64]	; 0x40
   18db8:	str	r0, [sp, #68]	; 0x44
   18dbc:	mov	r0, r4
   18dc0:	ldm	r3, {r1, r2}
   18dc4:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18dc8:	mov	r1, #1
   18dcc:	mov	r0, r4
   18dd0:	bl	15020 <_start@@Base+0x21d8>
   18dd4:	add	r3, sp, #56	; 0x38
   18dd8:	strb	r5, [sp, #56]	; 0x38
   18ddc:	str	r0, [sp, #60]	; 0x3c
   18de0:	mov	r0, r4
   18de4:	ldm	r3, {r1, r2}
   18de8:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18dec:	mov	r1, r7
   18df0:	mov	r0, r4
   18df4:	bl	15020 <_start@@Base+0x21d8>
   18df8:	add	r3, sp, #48	; 0x30
   18dfc:	strb	r5, [sp, #48]	; 0x30
   18e00:	str	r0, [sp, #52]	; 0x34
   18e04:	mov	r0, r4
   18e08:	ldm	r3, {r1, r2}
   18e0c:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18e10:	ldr	r1, [pc, #1540]	; 1941c <test_mixed_type_union@@Base+0x8c8>
   18e14:	mov	r0, r4
   18e18:	bl	1c928 <flatcc_builder_create_string_str@@Base>
   18e1c:	add	r3, sp, #40	; 0x28
   18e20:	strb	r6, [sp, #40]	; 0x28
   18e24:	str	r0, [sp, #44]	; 0x2c
   18e28:	mov	r0, r4
   18e2c:	ldm	r3, {r1, r2}
   18e30:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18e34:	ldr	r1, [pc, #1508]	; 19420 <test_mixed_type_union@@Base+0x8cc>
   18e38:	mov	r0, r4
   18e3c:	bl	1c928 <flatcc_builder_create_string_str@@Base>
   18e40:	add	r3, sp, #32
   18e44:	strb	r6, [sp, #32]
   18e48:	str	r0, [sp, #36]	; 0x24
   18e4c:	mov	r0, r4
   18e50:	ldm	r3, {r1, r2}
   18e54:	bl	1c7a4 <flatcc_builder_union_vector_push@@Base>
   18e58:	mov	r1, r4
   18e5c:	add	r0, sp, #24
   18e60:	bl	1c614 <flatcc_builder_end_union_vector@@Base>
   18e64:	ldr	r7, [sp, #24]
   18e68:	ldr	r6, [sp, #28]
   18e6c:	cmp	r6, #0
   18e70:	cmpne	r7, #0
   18e74:	beq	18ea4 <test_mixed_type_union@@Base+0x350>
   18e78:	mov	r1, #8
   18e7c:	mov	r0, r4
   18e80:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   18e84:	cmp	r0, #0
   18e88:	beq	18ea4 <test_mixed_type_union@@Base+0x350>
   18e8c:	str	r7, [r0]
   18e90:	mov	r1, r5
   18e94:	mov	r0, r4
   18e98:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   18e9c:	cmp	r0, #0
   18ea0:	strne	r6, [r0]
   18ea4:	mov	r2, #0
   18ea8:	ldr	r1, [pc, #1396]	; 19424 <test_mixed_type_union@@Base+0x8d0>
   18eac:	mov	r0, r4
   18eb0:	bl	1c01c <flatcc_builder_check_required@@Base>
   18eb4:	cmp	r0, #0
   18eb8:	bne	18f20 <test_mixed_type_union@@Base+0x3cc>
   18ebc:	ldr	r3, [pc, #1380]	; 19428 <test_mixed_type_union@@Base+0x8d4>
   18ec0:	ldr	r1, [pc, #1380]	; 1942c <test_mixed_type_union@@Base+0x8d8>
   18ec4:	ldr	r0, [pc, #1380]	; 19430 <test_mixed_type_union@@Base+0x8dc>
   18ec8:	mov	r2, #241	; 0xf1
   18ecc:	bl	12ab4 <__assert_fail@plt>
   18ed0:	mov	r1, #42	; 0x2a
   18ed4:	mov	r0, r4
   18ed8:	bl	143c4 <_start@@Base+0x157c>
   18edc:	subs	r6, r0, #0
   18ee0:	beq	18c7c <test_mixed_type_union@@Base+0x128>
   18ee4:	mov	r3, #1
   18ee8:	mov	r2, r3
   18eec:	mov	r1, #2
   18ef0:	mov	r0, r4
   18ef4:	bl	1ca20 <flatcc_builder_table_add@@Base>
   18ef8:	subs	r7, r0, #0
   18efc:	beq	18c80 <test_mixed_type_union@@Base+0x12c>
   18f00:	mov	r1, #3
   18f04:	mov	r0, r4
   18f08:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   18f0c:	cmp	r0, #0
   18f10:	movne	r3, #2
   18f14:	strbne	r3, [r7]
   18f18:	strne	r6, [r0]
   18f1c:	b	18c80 <test_mixed_type_union@@Base+0x12c>
   18f20:	mov	r0, r4
   18f24:	bl	1c09c <flatcc_builder_end_table@@Base>
   18f28:	mov	r1, r0
   18f2c:	mov	r0, r4
   18f30:	bl	1b2fc <flatcc_builder_end_buffer@@Base>
   18f34:	add	r1, sp, #4
   18f38:	mov	r0, r4
   18f3c:	bl	1d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>
   18f40:	ldr	r3, [pc, #1260]	; 19434 <test_mixed_type_union@@Base+0x8e0>
   18f44:	ldr	r2, [sp, #4]
   18f48:	ldr	r3, [r3]
   18f4c:	mov	r1, r0
   18f50:	mov	r7, r0
   18f54:	ldr	r0, [pc, #1244]	; 19438 <test_mixed_type_union@@Base+0x8e4>
   18f58:	bl	13214 <_start@@Base+0x3cc>
   18f5c:	ldr	r3, [pc, #1240]	; 1943c <test_mixed_type_union@@Base+0x8e8>
   18f60:	ldr	r2, [pc, #1192]	; 19410 <test_mixed_type_union@@Base+0x8bc>
   18f64:	ldr	r1, [sp, #4]
   18f68:	mov	r0, r7
   18f6c:	bl	1de88 <flatcc_verify_table_as_root@@Base>
   18f70:	cmp	r0, #0
   18f74:	beq	18f98 <test_mixed_type_union@@Base+0x444>
   18f78:	bl	1d918 <flatcc_verify_error_string@@Base>
   18f7c:	mvn	r4, #0
   18f80:	mov	r1, r0
   18f84:	ldr	r0, [pc, #1204]	; 19440 <test_mixed_type_union@@Base+0x8ec>
   18f88:	bl	129c4 <printf@plt>
   18f8c:	mov	r0, r4
   18f90:	add	sp, sp, #116	; 0x74
   18f94:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18f98:	cmp	r7, #0
   18f9c:	bne	18fb4 <test_mixed_type_union@@Base+0x460>
   18fa0:	ldr	r3, [pc, #1180]	; 19444 <test_mixed_type_union@@Base+0x8f0>
   18fa4:	ldr	r2, [pc, #1180]	; 19448 <test_mixed_type_union@@Base+0x8f4>
   18fa8:	ldr	r1, [pc, #1180]	; 1944c <test_mixed_type_union@@Base+0x8f8>
   18fac:	ldr	r0, [pc, #1180]	; 19450 <test_mixed_type_union@@Base+0x8fc>
   18fb0:	b	18ecc <test_mixed_type_union@@Base+0x378>
   18fb4:	ldr	r1, [pc, #1108]	; 19410 <test_mixed_type_union@@Base+0x8bc>
   18fb8:	mov	r0, r7
   18fbc:	bl	12f70 <_start@@Base+0x128>
   18fc0:	cmp	r0, #0
   18fc4:	beq	18fa0 <test_mixed_type_union@@Base+0x44c>
   18fc8:	ldr	r3, [r7]
   18fcc:	adds	r4, r7, r3
   18fd0:	beq	18fa0 <test_mixed_type_union@@Base+0x44c>
   18fd4:	ldr	r3, [r7, r3]
   18fd8:	sub	r3, r4, r3
   18fdc:	ldrh	r1, [r3]
   18fe0:	cmp	r1, #7
   18fe4:	bls	18ff4 <test_mixed_type_union@@Base+0x4a0>
   18fe8:	ldrh	r2, [r3, #6]
   18fec:	cmp	r2, #0
   18ff0:	bne	19000 <test_mixed_type_union@@Base+0x4ac>
   18ff4:	ldr	r0, [pc, #1112]	; 19454 <test_mixed_type_union@@Base+0x900>
   18ff8:	bl	12a0c <puts@plt>
   18ffc:	b	19164 <test_mixed_type_union@@Base+0x610>
   19000:	cmp	r1, #23
   19004:	bls	19014 <test_mixed_type_union@@Base+0x4c0>
   19008:	ldrh	r8, [r3, #22]
   1900c:	cmp	r8, #0
   19010:	bne	1901c <test_mixed_type_union@@Base+0x4c8>
   19014:	ldr	r0, [pc, #1084]	; 19458 <test_mixed_type_union@@Base+0x904>
   19018:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   1901c:	ldrh	r1, [r3, #4]
   19020:	cmp	r1, #0
   19024:	beq	19048 <test_mixed_type_union@@Base+0x4f4>
   19028:	ldrb	r0, [r4, r1]
   1902c:	cmp	r0, #0
   19030:	beq	19048 <test_mixed_type_union@@Base+0x4f4>
   19034:	add	r1, r4, r2
   19038:	ldr	r2, [r4, r2]
   1903c:	cmp	r0, #8
   19040:	add	ip, r1, r2
   19044:	beq	19050 <test_mixed_type_union@@Base+0x4fc>
   19048:	ldr	r0, [pc, #1036]	; 1945c <test_mixed_type_union@@Base+0x908>
   1904c:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   19050:	cmp	ip, #0
   19054:	bne	19318 <test_mixed_type_union@@Base+0x7c4>
   19058:	ldr	r0, [pc, #1024]	; 19460 <test_mixed_type_union@@Base+0x90c>
   1905c:	bl	12a0c <puts@plt>
   19060:	ldr	r0, [pc, #1020]	; 19464 <test_mixed_type_union@@Base+0x910>
   19064:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   19068:	bne	19060 <test_mixed_type_union@@Base+0x50c>
   1906c:	ldrh	r2, [r3, #16]
   19070:	cmp	r2, #0
   19074:	beq	19084 <test_mixed_type_union@@Base+0x530>
   19078:	ldrb	r2, [r4, r2]
   1907c:	cmp	r2, #8
   19080:	beq	1908c <test_mixed_type_union@@Base+0x538>
   19084:	ldr	r0, [pc, #988]	; 19468 <test_mixed_type_union@@Base+0x914>
   19088:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   1908c:	ldrh	r2, [r3, #18]
   19090:	cmp	r2, #0
   19094:	beq	190a8 <test_mixed_type_union@@Base+0x554>
   19098:	add	r1, r4, r2
   1909c:	ldr	r2, [r4, r2]
   190a0:	cmn	r1, r2
   190a4:	bne	190b0 <test_mixed_type_union@@Base+0x55c>
   190a8:	ldr	r0, [pc, #956]	; 1946c <test_mixed_type_union@@Base+0x918>
   190ac:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   190b0:	ldrh	r2, [r1, r2]
   190b4:	cmp	r2, #22
   190b8:	ldrne	r0, [pc, #944]	; 19470 <test_mixed_type_union@@Base+0x91c>
   190bc:	bne	18ff8 <test_mixed_type_union@@Base+0x4a4>
   190c0:	ldrh	r2, [r3, #8]
   190c4:	cmp	r2, #0
   190c8:	beq	190d8 <test_mixed_type_union@@Base+0x584>
   190cc:	ldrb	r2, [r4, r2]
   190d0:	cmp	r2, #2
   190d4:	beq	190e0 <test_mixed_type_union@@Base+0x58c>
   190d8:	ldr	r0, [pc, #916]	; 19474 <test_mixed_type_union@@Base+0x920>
   190dc:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   190e0:	ldrh	r3, [r3, #10]
   190e4:	cmp	r3, #0
   190e8:	beq	19108 <test_mixed_type_union@@Base+0x5b4>
   190ec:	add	r0, r4, r3
   190f0:	ldr	r3, [r4, r3]
   190f4:	adds	r0, r0, r3
   190f8:	beq	19108 <test_mixed_type_union@@Base+0x5b4>
   190fc:	bl	12b78 <__assert_fail@plt+0xc4>
   19100:	cmp	r0, #42	; 0x2a
   19104:	beq	19110 <test_mixed_type_union@@Base+0x5bc>
   19108:	ldr	r0, [pc, #872]	; 19478 <test_mixed_type_union@@Base+0x924>
   1910c:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   19110:	mov	r0, r4
   19114:	bl	12ac0 <__assert_fail@plt+0xc>
   19118:	cmp	r0, #11
   1911c:	ldrne	r0, [pc, #856]	; 1947c <test_mixed_type_union@@Base+0x928>
   19120:	bne	18ff8 <test_mixed_type_union@@Base+0x4a4>
   19124:	mov	r0, r4
   19128:	bl	12b18 <__assert_fail@plt+0x64>
   1912c:	cmp	r0, #0
   19130:	beq	1913c <test_mixed_type_union@@Base+0x5e8>
   19134:	adds	r5, r0, #4
   19138:	bne	19144 <test_mixed_type_union@@Base+0x5f0>
   1913c:	ldr	r0, [pc, #828]	; 19480 <test_mixed_type_union@@Base+0x92c>
   19140:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   19144:	ldr	r1, [pc, #712]	; 19414 <test_mixed_type_union@@Base+0x8c0>
   19148:	mov	r0, r5
   1914c:	bl	129b8 <strcmp@plt>
   19150:	cmp	r0, #0
   19154:	beq	19174 <test_mixed_type_union@@Base+0x620>
   19158:	mov	r1, r5
   1915c:	ldr	r0, [pc, #800]	; 19484 <test_mixed_type_union@@Base+0x930>
   19160:	bl	129c4 <printf@plt>
   19164:	mvn	r4, #0
   19168:	mov	r0, r7
   1916c:	bl	1d16c <flatcc_builder_aligned_free@@Base>
   19170:	b	18f8c <test_mixed_type_union@@Base+0x438>
   19174:	mov	r0, r4
   19178:	bl	12bd0 <__assert_fail@plt+0x11c>
   1917c:	ldr	r3, [r4, r8]
   19180:	add	r6, r4, r8
   19184:	add	r3, r3, #4
   19188:	add	r6, r6, r3
   1918c:	subs	r8, r0, #0
   19190:	beq	1932c <test_mixed_type_union@@Base+0x7d8>
   19194:	cmp	r6, #0
   19198:	ldr	r2, [r8, #-4]
   1919c:	moveq	r3, r6
   191a0:	beq	191a8 <test_mixed_type_union@@Base+0x654>
   191a4:	ldr	r3, [r6, #-4]
   191a8:	cmp	r2, r3
   191ac:	beq	19338 <test_mixed_type_union@@Base+0x7e4>
   191b0:	ldr	r3, [pc, #720]	; 19488 <test_mixed_type_union@@Base+0x934>
   191b4:	ldr	r2, [pc, #720]	; 1948c <test_mixed_type_union@@Base+0x938>
   191b8:	ldr	r1, [pc, #652]	; 1944c <test_mixed_type_union@@Base+0x8f8>
   191bc:	ldr	r0, [pc, #716]	; 19490 <test_mixed_type_union@@Base+0x93c>
   191c0:	b	18ecc <test_mixed_type_union@@Base+0x378>
   191c4:	ldr	r0, [r6, #12]
   191c8:	add	r0, r0, #16
   191cc:	adds	r0, r6, r0
   191d0:	beq	191e4 <test_mixed_type_union@@Base+0x690>
   191d4:	ldr	r1, [pc, #572]	; 19418 <test_mixed_type_union@@Base+0x8c4>
   191d8:	bl	129b8 <strcmp@plt>
   191dc:	cmp	r0, #0
   191e0:	beq	191ec <test_mixed_type_union@@Base+0x698>
   191e4:	ldr	r0, [pc, #680]	; 19494 <test_mixed_type_union@@Base+0x940>
   191e8:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   191ec:	mov	r3, #3
   191f0:	add	r0, sp, #16
   191f4:	ldm	r5, {r1, r2}
   191f8:	bl	12c34 <__assert_fail@plt+0x180>
   191fc:	ldrb	r3, [sp, #16]
   19200:	ldr	r0, [sp, #20]
   19204:	cmp	r3, #11
   19208:	ldrne	r0, [pc, #648]	; 19498 <test_mixed_type_union@@Base+0x944>
   1920c:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   19210:	cmp	r0, #0
   19214:	beq	19230 <test_mixed_type_union@@Base+0x6dc>
   19218:	adds	r0, r0, #4
   1921c:	beq	19230 <test_mixed_type_union@@Base+0x6dc>
   19220:	ldr	r1, [pc, #496]	; 19418 <test_mixed_type_union@@Base+0x8c4>
   19224:	bl	129b8 <strcmp@plt>
   19228:	subs	r4, r0, #0
   1922c:	beq	19238 <test_mixed_type_union@@Base+0x6e4>
   19230:	ldr	r0, [pc, #612]	; 1949c <test_mixed_type_union@@Base+0x948>
   19234:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   19238:	mov	r3, #4
   1923c:	add	r0, sp, #16
   19240:	ldm	r5, {r1, r2}
   19244:	bl	12c34 <__assert_fail@plt+0x180>
   19248:	ldrb	r3, [sp, #16]
   1924c:	cmp	r3, #9
   19250:	ldrne	r0, [pc, #584]	; 194a0 <test_mixed_type_union@@Base+0x94c>
   19254:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   19258:	mov	r3, #5
   1925c:	add	r0, sp, #16
   19260:	ldm	r5, {r1, r2}
   19264:	bl	12c34 <__assert_fail@plt+0x180>
   19268:	ldrb	r3, [sp, #16]
   1926c:	cmp	r3, #9
   19270:	ldrne	r0, [pc, #556]	; 194a4 <test_mixed_type_union@@Base+0x950>
   19274:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   19278:	mov	r3, #6
   1927c:	add	r0, sp, #16
   19280:	ldm	r5, {r1, r2}
   19284:	bl	12c34 <__assert_fail@plt+0x180>
   19288:	ldrb	r3, [sp, #16]
   1928c:	cmp	r3, #9
   19290:	ldrne	r0, [pc, #528]	; 194a8 <test_mixed_type_union@@Base+0x954>
   19294:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   19298:	add	r0, sp, #16
   1929c:	mov	r3, #7
   192a0:	ldm	r5, {r1, r2}
   192a4:	bl	12c34 <__assert_fail@plt+0x180>
   192a8:	ldrb	r6, [sp, #16]
   192ac:	cmp	r6, #9
   192b0:	ldrne	r0, [pc, #500]	; 194ac <test_mixed_type_union@@Base+0x958>
   192b4:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   192b8:	mov	r3, #8
   192bc:	ldm	r5, {r1, r2}
   192c0:	add	r0, sp, #16
   192c4:	bl	12c34 <__assert_fail@plt+0x180>
   192c8:	ldrb	r3, [sp, #16]
   192cc:	cmp	r3, #11
   192d0:	beq	192e0 <test_mixed_type_union@@Base+0x78c>
   192d4:	ldr	r0, [pc, #468]	; 194b0 <test_mixed_type_union@@Base+0x95c>
   192d8:	bl	129c4 <printf@plt>
   192dc:	b	19164 <test_mixed_type_union@@Base+0x610>
   192e0:	mov	r3, r6
   192e4:	ldm	r5, {r1, r2}
   192e8:	add	r0, sp, #16
   192ec:	bl	12c34 <__assert_fail@plt+0x180>
   192f0:	ldrb	r3, [sp, #16]
   192f4:	cmp	r3, #11
   192f8:	bne	192d4 <test_mixed_type_union@@Base+0x780>
   192fc:	cmp	r8, #0
   19300:	beq	19310 <test_mixed_type_union@@Base+0x7bc>
   19304:	ldr	r3, [r8, #-4]
   19308:	cmp	r3, #10
   1930c:	beq	19168 <test_mixed_type_union@@Base+0x614>
   19310:	ldr	r0, [pc, #412]	; 194b4 <test_mixed_type_union@@Base+0x960>
   19314:	b	192d8 <test_mixed_type_union@@Base+0x784>
   19318:	ldrh	r2, [r1, r2]
   1931c:	cmp	r2, #19
   19320:	bls	19068 <test_mixed_type_union@@Base+0x514>
   19324:	ldr	r0, [pc, #396]	; 194b8 <test_mixed_type_union@@Base+0x964>
   19328:	b	18ff8 <test_mixed_type_union@@Base+0x4a4>
   1932c:	cmp	r6, #0
   19330:	movne	r2, #0
   19334:	bne	191a4 <test_mixed_type_union@@Base+0x650>
   19338:	add	r5, sp, #8
   1933c:	str	r8, [sp, #8]
   19340:	str	r6, [sp, #12]
   19344:	mov	r3, #0
   19348:	add	r0, sp, #16
   1934c:	ldm	r5, {r1, r2}
   19350:	bl	12c34 <__assert_fail@plt+0x180>
   19354:	ldrb	r3, [sp, #16]
   19358:	cmp	r3, #8
   1935c:	ldrne	r0, [pc, #344]	; 194bc <test_mixed_type_union@@Base+0x968>
   19360:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   19364:	add	r0, sp, #16
   19368:	mov	r3, #1
   1936c:	ldm	r5, {r1, r2}
   19370:	bl	12c34 <__assert_fail@plt+0x180>
   19374:	ldrb	r9, [sp, #16]
   19378:	ldr	r0, [sp, #20]
   1937c:	cmp	r9, #2
   19380:	ldrne	r0, [pc, #312]	; 194c0 <test_mixed_type_union@@Base+0x96c>
   19384:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   19388:	bl	12b78 <__assert_fail@plt+0xc4>
   1938c:	cmp	r0, #42	; 0x2a
   19390:	ldrne	r0, [pc, #300]	; 194c4 <test_mixed_type_union@@Base+0x970>
   19394:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   19398:	mov	r3, r9
   1939c:	add	r0, sp, #16
   193a0:	ldm	r5, {r1, r2}
   193a4:	bl	12c34 <__assert_fail@plt+0x180>
   193a8:	ldrb	r3, [sp, #16]
   193ac:	ldr	r0, [sp, #20]
   193b0:	cmp	r3, #2
   193b4:	ldrne	r0, [pc, #268]	; 194c8 <test_mixed_type_union@@Base+0x974>
   193b8:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   193bc:	bl	12b78 <__assert_fail@plt+0xc4>
   193c0:	cmp	r0, #1
   193c4:	ldrne	r0, [pc, #256]	; 194cc <test_mixed_type_union@@Base+0x978>
   193c8:	bne	192d8 <test_mixed_type_union@@Base+0x784>
   193cc:	mov	r0, r4
   193d0:	bl	12bd0 <__assert_fail@plt+0x11c>
   193d4:	mov	r1, #3
   193d8:	bl	14180 <_start@@Base+0x1338>
   193dc:	cmp	r0, #11
   193e0:	ldrne	r0, [pc, #232]	; 194d0 <test_mixed_type_union@@Base+0x97c>
   193e4:	bne	18ff8 <test_mixed_type_union@@Base+0x4a4>
   193e8:	cmp	r6, #0
   193ec:	beq	193fc <test_mixed_type_union@@Base+0x8a8>
   193f0:	ldr	r3, [r6, #-4]
   193f4:	cmp	r3, #3
   193f8:	bhi	191c4 <test_mixed_type_union@@Base+0x670>
   193fc:	ldr	r3, [pc, #208]	; 194d4 <test_mixed_type_union@@Base+0x980>
   19400:	mov	r2, #119	; 0x77
   19404:	ldr	r1, [pc, #204]	; 194d8 <test_mixed_type_union@@Base+0x984>
   19408:	ldr	r0, [pc, #204]	; 194dc <test_mixed_type_union@@Base+0x988>
   1940c:	b	18ecc <test_mixed_type_union@@Base+0x378>
   19410:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   19414:	andeq	r0, r2, sl, asr #28
   19418:	andeq	r0, r2, r5, asr lr
   1941c:	andeq	r0, r2, r3, asr lr
   19420:	andeq	r0, r2, pc, asr #28
   19424:	andeq	lr, r1, r8, lsl #24
   19428:	andeq	lr, r1, sl, lsl #24
   1942c:	andeq	lr, r1, r8, lsl #29
   19430:	andeq	r0, r2, fp, asr lr
   19434:	andeq	r3, r3, r8, ror r0
   19438:	andeq	r0, r2, r2, ror #29
   1943c:	andeq	r4, r1, r4, lsl sp
   19440:	andeq	r0, r2, pc, ror #29
   19444:	andeq	lr, r1, ip, lsl ip
   19448:	andeq	r0, r0, r3, lsr r3
   1944c:	andeq	lr, r1, r3, lsl #26
   19450:	andeq	lr, r1, r5, ror #26
   19454:	andeq	r0, r2, lr, lsr pc
   19458:	andeq	r0, r2, r7, ror #30
   1945c:	muleq	r2, r2, pc	; <UNPREDICTABLE>
   19460:	andeq	r0, r2, sp, lsr #31
   19464:	andeq	r0, r2, fp, ror #31
   19468:	andeq	r1, r2, r9, lsl r0
   1946c:	andeq	r1, r2, sp, asr #32
   19470:	andeq	r1, r2, ip, ror r0
   19474:	andeq	r1, r2, fp, lsr #1
   19478:	andeq	r1, r2, r2, asr #1
   1947c:	andeq	r1, r2, r4, ror #1
   19480:	strdeq	r1, [r2], -sl
   19484:	andeq	r1, r2, r4, lsl r1
   19488:	andeq	lr, r1, r4, asr #24
   1948c:	andeq	r0, r0, r7, lsr r3
   19490:	andeq	r0, r2, ip, asr #27
   19494:	andeq	r1, r2, r3, lsr r2
   19498:	andeq	r1, r2, r6, ror #4
   1949c:	muleq	r2, lr, r2
   194a0:	ldrdeq	r1, [r2], -ip
   194a4:	strdeq	r1, [r2], -lr
   194a8:	andeq	r1, r2, r0, lsr #6
   194ac:	andeq	r1, r2, r4, asr #6
   194b0:	andeq	r1, r2, r7, ror #6
   194b4:	muleq	r2, r3, r3
   194b8:	andeq	r0, r2, r4, asr #31
   194bc:	andeq	r1, r2, r8, lsr r1
   194c0:	andeq	r1, r2, sp, asr r1
   194c4:	andeq	r1, r2, r0, lsl #3
   194c8:			; <UNDEFINED> instruction: 0x000211b2
   194cc:	ldrdeq	r1, [r2], -r4
   194d0:	andeq	r1, r2, r5, lsl #4
   194d4:	andeq	lr, r1, r3, ror #24
   194d8:	andeq	lr, r1, r8, lsr #27
   194dc:	andeq	lr, r1, r0, lsl lr

000194e0 <test_add_set_defaults@@Base>:
   194e0:	push	{r0, r1, r2, r4, r5, lr}
   194e4:	mov	r4, r0
   194e8:	bl	1acd8 <flatcc_builder_reset@@Base>
   194ec:	mov	r0, r4
   194f0:	bl	130ec <_start@@Base+0x2a4>
   194f4:	ldr	r1, [pc, #348]	; 19658 <test_add_set_defaults@@Base+0x178>
   194f8:	mov	r0, r4
   194fc:	bl	13324 <_start@@Base+0x4dc>
   19500:	mov	r3, #2
   19504:	mov	r2, r3
   19508:	mov	r1, #1
   1950c:	mov	r0, r4
   19510:	bl	1ca20 <flatcc_builder_table_add@@Base>
   19514:	cmp	r0, #0
   19518:	movne	r3, #100	; 0x64
   1951c:	strhne	r3, [r0]
   19520:	mov	r0, r4
   19524:	bl	142f0 <_start@@Base+0x14a8>
   19528:	add	r1, sp, #4
   1952c:	mov	r0, r4
   19530:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   19534:	bl	12fe4 <_start@@Base+0x19c>
   19538:	mov	r5, r0
   1953c:	bl	134f8 <_start@@Base+0x6b0>
   19540:	cmp	r0, #0
   19544:	ldrne	r0, [pc, #272]	; 1965c <test_add_set_defaults@@Base+0x17c>
   19548:	bne	19644 <test_add_set_defaults@@Base+0x164>
   1954c:	mov	r0, r5
   19550:	bl	13820 <_start@@Base+0x9d8>
   19554:	cmp	r0, #0
   19558:	ldreq	r0, [pc, #256]	; 19660 <test_add_set_defaults@@Base+0x180>
   1955c:	beq	19644 <test_add_set_defaults@@Base+0x164>
   19560:	mov	r0, r5
   19564:	bl	141c4 <_start@@Base+0x137c>
   19568:	subs	r5, r0, #0
   1956c:	ldrne	r0, [pc, #240]	; 19664 <test_add_set_defaults@@Base+0x184>
   19570:	bne	19644 <test_add_set_defaults@@Base+0x164>
   19574:	mov	r0, r4
   19578:	bl	1acd8 <flatcc_builder_reset@@Base>
   1957c:	mov	r0, r4
   19580:	bl	130ec <_start@@Base+0x2a4>
   19584:	ldr	r1, [pc, #204]	; 19658 <test_add_set_defaults@@Base+0x178>
   19588:	mov	r0, r4
   1958c:	bl	13324 <_start@@Base+0x4dc>
   19590:	mov	r3, #2
   19594:	mov	r2, r3
   19598:	mov	r1, r3
   1959c:	mov	r0, r4
   195a0:	bl	1ca20 <flatcc_builder_table_add@@Base>
   195a4:	mov	r1, #1
   195a8:	cmp	r0, #0
   195ac:	movne	r3, #100	; 0x64
   195b0:	strhne	r3, [r0]
   195b4:	mov	r3, #2
   195b8:	mov	r2, r3
   195bc:	mov	r0, r4
   195c0:	bl	1ca20 <flatcc_builder_table_add@@Base>
   195c4:	mov	r1, #6
   195c8:	cmp	r0, #0
   195cc:	movne	r3, #100	; 0x64
   195d0:	strhne	r3, [r0]
   195d4:	mov	r3, #1
   195d8:	mov	r2, r3
   195dc:	mov	r0, r4
   195e0:	bl	1ca20 <flatcc_builder_table_add@@Base>
   195e4:	cmp	r0, #0
   195e8:	movne	r3, #8
   195ec:	strbne	r3, [r0]
   195f0:	mov	r0, r4
   195f4:	bl	142f0 <_start@@Base+0x14a8>
   195f8:	add	r1, sp, #4
   195fc:	mov	r0, r4
   19600:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   19604:	bl	12fe4 <_start@@Base+0x19c>
   19608:	mov	r4, r0
   1960c:	bl	134f8 <_start@@Base+0x6b0>
   19610:	cmp	r0, #0
   19614:	ldreq	r0, [pc, #76]	; 19668 <test_add_set_defaults@@Base+0x188>
   19618:	beq	19644 <test_add_set_defaults@@Base+0x164>
   1961c:	mov	r0, r4
   19620:	bl	13820 <_start@@Base+0x9d8>
   19624:	cmp	r0, #0
   19628:	ldreq	r0, [pc, #60]	; 1966c <test_add_set_defaults@@Base+0x18c>
   1962c:	beq	19644 <test_add_set_defaults@@Base+0x164>
   19630:	mov	r0, r4
   19634:	bl	141c4 <_start@@Base+0x137c>
   19638:	cmp	r0, #0
   1963c:	bne	1964c <test_add_set_defaults@@Base+0x16c>
   19640:	ldr	r0, [pc, #40]	; 19670 <test_add_set_defaults@@Base+0x190>
   19644:	bl	12a0c <puts@plt>
   19648:	mvn	r5, #0
   1964c:	mov	r0, r5
   19650:	add	sp, sp, #12
   19654:	pop	{r4, r5, pc}
   19658:	strdeq	pc, [r1], -r9
   1965c:			; <UNDEFINED> instruction: 0x000213b9
   19660:	andeq	r1, r2, r4, ror #7
   19664:	andeq	r1, r2, r1, lsl r4
   19668:	andeq	r1, r2, pc, lsr r4
   1966c:	andeq	r1, r2, r2, ror r4
   19670:			; <UNDEFINED> instruction: 0x000214b1

00019674 <test_nested_buffer@@Base>:
   19674:	push	{r0, r1, r2, r4, r5, lr}
   19678:	mov	r4, r0
   1967c:	bl	1acd8 <flatcc_builder_reset@@Base>
   19680:	mov	r0, r4
   19684:	bl	130ec <_start@@Base+0x2a4>
   19688:	ldr	r1, [pc, #232]	; 19778 <test_nested_buffer@@Base+0x104>
   1968c:	mov	r0, r4
   19690:	bl	13324 <_start@@Base+0x4dc>
   19694:	mov	r0, r4
   19698:	bl	130ec <_start@@Base+0x2a4>
   1969c:	ldr	r1, [pc, #216]	; 1977c <test_nested_buffer@@Base+0x108>
   196a0:	mov	r0, r4
   196a4:	bl	13324 <_start@@Base+0x4dc>
   196a8:	mov	r0, r4
   196ac:	bl	150dc <_start@@Base+0x2294>
   196b0:	mov	r1, #10
   196b4:	mov	r0, r4
   196b8:	bl	14218 <_start@@Base+0x13d0>
   196bc:	mov	r0, r4
   196c0:	bl	142f0 <_start@@Base+0x14a8>
   196c4:	add	r1, sp, #4
   196c8:	mov	r0, r4
   196cc:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   196d0:	ldr	r3, [pc, #168]	; 19780 <test_nested_buffer@@Base+0x10c>
   196d4:	ldr	r2, [sp, #4]
   196d8:	ldr	r3, [r3]
   196dc:	mov	r1, r0
   196e0:	mov	r4, r0
   196e4:	ldr	r0, [pc, #152]	; 19784 <test_nested_buffer@@Base+0x110>
   196e8:	bl	13214 <_start@@Base+0x3cc>
   196ec:	mov	r0, r4
   196f0:	bl	12fe4 <_start@@Base+0x19c>
   196f4:	mov	r4, r0
   196f8:	bl	13b90 <_start@@Base+0xd48>
   196fc:	ldr	r1, [pc, #116]	; 19778 <test_nested_buffer@@Base+0x104>
   19700:	bl	129b8 <strcmp@plt>
   19704:	cmp	r0, #0
   19708:	ldrne	r0, [pc, #120]	; 19788 <test_nested_buffer@@Base+0x114>
   1970c:	bne	19768 <test_nested_buffer@@Base+0xf4>
   19710:	mov	r0, r4
   19714:	bl	1304c <_start@@Base+0x204>
   19718:	mov	r5, r0
   1971c:	mov	r0, r4
   19720:	bl	1349c <_start@@Base+0x654>
   19724:	cmp	r0, #10
   19728:	ldrne	r0, [pc, #92]	; 1978c <test_nested_buffer@@Base+0x118>
   1972c:	bne	19768 <test_nested_buffer@@Base+0xf4>
   19730:	mov	r0, r5
   19734:	bl	13b90 <_start@@Base+0xd48>
   19738:	cmp	r0, #0
   1973c:	bne	19754 <test_nested_buffer@@Base+0xe0>
   19740:	ldr	r3, [pc, #72]	; 19790 <test_nested_buffer@@Base+0x11c>
   19744:	ldr	r2, [pc, #72]	; 19794 <test_nested_buffer@@Base+0x120>
   19748:	ldr	r1, [pc, #72]	; 19798 <test_nested_buffer@@Base+0x124>
   1974c:	ldr	r0, [pc, #72]	; 1979c <test_nested_buffer@@Base+0x128>
   19750:	bl	12ab4 <__assert_fail@plt>
   19754:	ldr	r1, [pc, #32]	; 1977c <test_nested_buffer@@Base+0x108>
   19758:	bl	129b8 <strcmp@plt>
   1975c:	cmp	r0, #0
   19760:	beq	19770 <test_nested_buffer@@Base+0xfc>
   19764:	ldr	r0, [pc, #52]	; 197a0 <test_nested_buffer@@Base+0x12c>
   19768:	bl	12a0c <puts@plt>
   1976c:	mvn	r0, #0
   19770:	add	sp, sp, #12
   19774:	pop	{r4, r5, pc}
   19778:	strdeq	pc, [r1], -r9
   1977c:	andeq	r1, r2, r7, ror #9
   19780:	andeq	r3, r3, r8, ror r0
   19784:	strdeq	r1, [r2], -r7
   19788:	andeq	r1, r2, r9, lsl #10
   1978c:	andeq	r1, r2, r4, lsr #10
   19790:	andeq	lr, r1, r8, lsl #25
   19794:	andeq	r0, r0, ip, lsl #17
   19798:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   1979c:	andeq	r1, r2, r8, asr #10
   197a0:	andeq	r1, r2, r1, ror #10

000197a4 <test_nested_buffer_first@@Base>:
   197a4:	push	{r0, r1, r2, r4, r5, lr}
   197a8:	mov	r4, r0
   197ac:	bl	1acd8 <flatcc_builder_reset@@Base>
   197b0:	mov	r0, r4
   197b4:	bl	130ec <_start@@Base+0x2a4>
   197b8:	mov	r0, r4
   197bc:	bl	130ec <_start@@Base+0x2a4>
   197c0:	ldr	r1, [pc, #224]	; 198a8 <test_nested_buffer_first@@Base+0x104>
   197c4:	mov	r0, r4
   197c8:	bl	13324 <_start@@Base+0x4dc>
   197cc:	mov	r0, r4
   197d0:	bl	150dc <_start@@Base+0x2294>
   197d4:	mov	r1, #10
   197d8:	mov	r0, r4
   197dc:	bl	14218 <_start@@Base+0x13d0>
   197e0:	ldr	r1, [pc, #196]	; 198ac <test_nested_buffer_first@@Base+0x108>
   197e4:	mov	r0, r4
   197e8:	bl	13324 <_start@@Base+0x4dc>
   197ec:	mov	r0, r4
   197f0:	bl	142f0 <_start@@Base+0x14a8>
   197f4:	add	r1, sp, #4
   197f8:	mov	r0, r4
   197fc:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   19800:	ldr	r3, [pc, #168]	; 198b0 <test_nested_buffer_first@@Base+0x10c>
   19804:	ldr	r2, [sp, #4]
   19808:	ldr	r3, [r3]
   1980c:	mov	r1, r0
   19810:	mov	r4, r0
   19814:	ldr	r0, [pc, #152]	; 198b4 <test_nested_buffer_first@@Base+0x110>
   19818:	bl	13214 <_start@@Base+0x3cc>
   1981c:	mov	r0, r4
   19820:	bl	12fe4 <_start@@Base+0x19c>
   19824:	mov	r4, r0
   19828:	bl	13b90 <_start@@Base+0xd48>
   1982c:	ldr	r1, [pc, #120]	; 198ac <test_nested_buffer_first@@Base+0x108>
   19830:	bl	129b8 <strcmp@plt>
   19834:	cmp	r0, #0
   19838:	ldrne	r0, [pc, #120]	; 198b8 <test_nested_buffer_first@@Base+0x114>
   1983c:	bne	19898 <test_nested_buffer_first@@Base+0xf4>
   19840:	mov	r0, r4
   19844:	bl	1304c <_start@@Base+0x204>
   19848:	mov	r5, r0
   1984c:	mov	r0, r4
   19850:	bl	1349c <_start@@Base+0x654>
   19854:	cmp	r0, #10
   19858:	ldrne	r0, [pc, #92]	; 198bc <test_nested_buffer_first@@Base+0x118>
   1985c:	bne	19898 <test_nested_buffer_first@@Base+0xf4>
   19860:	mov	r0, r5
   19864:	bl	13b90 <_start@@Base+0xd48>
   19868:	cmp	r0, #0
   1986c:	bne	19884 <test_nested_buffer_first@@Base+0xe0>
   19870:	ldr	r3, [pc, #72]	; 198c0 <test_nested_buffer_first@@Base+0x11c>
   19874:	ldr	r2, [pc, #72]	; 198c4 <test_nested_buffer_first@@Base+0x120>
   19878:	ldr	r1, [pc, #72]	; 198c8 <test_nested_buffer_first@@Base+0x124>
   1987c:	ldr	r0, [pc, #72]	; 198cc <test_nested_buffer_first@@Base+0x128>
   19880:	bl	12ab4 <__assert_fail@plt>
   19884:	ldr	r1, [pc, #28]	; 198a8 <test_nested_buffer_first@@Base+0x104>
   19888:	bl	129b8 <strcmp@plt>
   1988c:	cmp	r0, #0
   19890:	beq	198a0 <test_nested_buffer_first@@Base+0xfc>
   19894:	ldr	r0, [pc, #52]	; 198d0 <test_nested_buffer_first@@Base+0x12c>
   19898:	bl	12a0c <puts@plt>
   1989c:	mvn	r0, #0
   198a0:	add	sp, sp, #12
   198a4:	pop	{r4, r5, pc}
   198a8:	andeq	r1, r2, r7, ror #9
   198ac:	strdeq	pc, [r1], -r9
   198b0:	andeq	r3, r3, r8, ror r0
   198b4:	strdeq	r1, [r2], -r7
   198b8:	andeq	r1, r2, r9, lsl #10
   198bc:	andeq	r1, r2, r4, lsr #10
   198c0:	muleq	r1, fp, ip
   198c4:	andeq	r0, r0, r1, asr #17
   198c8:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   198cc:	andeq	r1, r2, r8, asr #10
   198d0:	andeq	r1, r2, r1, ror #10

000198d4 <test_nested_buffer_using_nest@@Base>:
   198d4:	push	{r4, r5, lr}
   198d8:	sub	sp, sp, #1040	; 0x410
   198dc:	sub	sp, sp, #4
   198e0:	mov	r4, r0
   198e4:	bl	1acd8 <flatcc_builder_reset@@Base>
   198e8:	mov	r0, r4
   198ec:	bl	130ec <_start@@Base+0x2a4>
   198f0:	ldr	r1, [pc, #400]	; 19a88 <test_nested_buffer_using_nest@@Base+0x1b4>
   198f4:	mov	r0, r4
   198f8:	bl	13324 <_start@@Base+0x4dc>
   198fc:	mov	r3, #2
   19900:	mov	r2, r3
   19904:	mov	r1, #1
   19908:	mov	r0, r4
   1990c:	bl	1ca20 <flatcc_builder_table_add@@Base>
   19910:	cmp	r0, #0
   19914:	movne	r3, #42	; 0x2a
   19918:	strhne	r3, [r0]
   1991c:	mov	r0, r4
   19920:	bl	142f0 <_start@@Base+0x14a8>
   19924:	mov	r0, r4
   19928:	bl	1cf4c <flatcc_builder_get_buffer_size@@Base>
   1992c:	mov	r2, #1024	; 0x400
   19930:	add	r1, sp, #16
   19934:	mov	r5, r0
   19938:	mov	r0, r4
   1993c:	bl	1d018 <flatcc_builder_copy_buffer@@Base>
   19940:	cmp	r0, #0
   19944:	ldreq	r0, [pc, #320]	; 19a8c <test_nested_buffer_using_nest@@Base+0x1b8>
   19948:	beq	19a70 <test_nested_buffer_using_nest@@Base+0x19c>
   1994c:	mov	r0, r4
   19950:	bl	1acd8 <flatcc_builder_reset@@Base>
   19954:	mov	r0, r4
   19958:	bl	130ec <_start@@Base+0x2a4>
   1995c:	mov	r2, #8
   19960:	mvn	r3, #0
   19964:	add	r1, sp, #16
   19968:	stm	sp, {r2, r3}
   1996c:	mov	r0, r4
   19970:	mov	r2, r5
   19974:	mov	r3, #1
   19978:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   1997c:	subs	r5, r0, #0
   19980:	beq	19998 <test_nested_buffer_using_nest@@Base+0xc4>
   19984:	mov	r1, #13
   19988:	mov	r0, r4
   1998c:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   19990:	cmp	r0, #0
   19994:	strne	r5, [r0]
   19998:	mov	r1, #10
   1999c:	mov	r0, r4
   199a0:	bl	14218 <_start@@Base+0x13d0>
   199a4:	ldr	r1, [pc, #228]	; 19a90 <test_nested_buffer_using_nest@@Base+0x1bc>
   199a8:	mov	r0, r4
   199ac:	bl	13324 <_start@@Base+0x4dc>
   199b0:	mov	r0, r4
   199b4:	bl	142f0 <_start@@Base+0x14a8>
   199b8:	add	r1, sp, #12
   199bc:	mov	r0, r4
   199c0:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   199c4:	ldr	r3, [pc, #200]	; 19a94 <test_nested_buffer_using_nest@@Base+0x1c0>
   199c8:	ldr	r2, [sp, #12]
   199cc:	ldr	r3, [r3]
   199d0:	mov	r1, r0
   199d4:	mov	r4, r0
   199d8:	ldr	r0, [pc, #184]	; 19a98 <test_nested_buffer_using_nest@@Base+0x1c4>
   199dc:	bl	13214 <_start@@Base+0x3cc>
   199e0:	mov	r0, r4
   199e4:	bl	12fe4 <_start@@Base+0x19c>
   199e8:	mov	r4, r0
   199ec:	bl	13b90 <_start@@Base+0xd48>
   199f0:	ldr	r1, [pc, #152]	; 19a90 <test_nested_buffer_using_nest@@Base+0x1bc>
   199f4:	bl	129b8 <strcmp@plt>
   199f8:	cmp	r0, #0
   199fc:	ldrne	r0, [pc, #152]	; 19a9c <test_nested_buffer_using_nest@@Base+0x1c8>
   19a00:	bne	19a70 <test_nested_buffer_using_nest@@Base+0x19c>
   19a04:	mov	r0, r4
   19a08:	bl	1304c <_start@@Base+0x204>
   19a0c:	mov	r5, r0
   19a10:	mov	r0, r4
   19a14:	bl	1349c <_start@@Base+0x654>
   19a18:	cmp	r0, #10
   19a1c:	ldrne	r0, [pc, #124]	; 19aa0 <test_nested_buffer_using_nest@@Base+0x1cc>
   19a20:	bne	19a70 <test_nested_buffer_using_nest@@Base+0x19c>
   19a24:	mov	r0, r5
   19a28:	bl	13b90 <_start@@Base+0xd48>
   19a2c:	cmp	r0, #0
   19a30:	bne	19a48 <test_nested_buffer_using_nest@@Base+0x174>
   19a34:	ldr	r3, [pc, #104]	; 19aa4 <test_nested_buffer_using_nest@@Base+0x1d0>
   19a38:	ldr	r2, [pc, #104]	; 19aa8 <test_nested_buffer_using_nest@@Base+0x1d4>
   19a3c:	ldr	r1, [pc, #104]	; 19aac <test_nested_buffer_using_nest@@Base+0x1d8>
   19a40:	ldr	r0, [pc, #104]	; 19ab0 <test_nested_buffer_using_nest@@Base+0x1dc>
   19a44:	bl	12ab4 <__assert_fail@plt>
   19a48:	ldr	r1, [pc, #56]	; 19a88 <test_nested_buffer_using_nest@@Base+0x1b4>
   19a4c:	bl	129b8 <strcmp@plt>
   19a50:	subs	r4, r0, #0
   19a54:	ldrne	r0, [pc, #88]	; 19ab4 <test_nested_buffer_using_nest@@Base+0x1e0>
   19a58:	bne	19a70 <test_nested_buffer_using_nest@@Base+0x19c>
   19a5c:	mov	r0, r5
   19a60:	bl	137c4 <_start@@Base+0x97c>
   19a64:	cmp	r0, #42	; 0x2a
   19a68:	beq	19a78 <test_nested_buffer_using_nest@@Base+0x1a4>
   19a6c:	ldr	r0, [pc, #68]	; 19ab8 <test_nested_buffer_using_nest@@Base+0x1e4>
   19a70:	bl	12a0c <puts@plt>
   19a74:	mvn	r4, #0
   19a78:	mov	r0, r4
   19a7c:	add	sp, sp, #1040	; 0x410
   19a80:	add	sp, sp, #4
   19a84:	pop	{r4, r5, pc}
   19a88:	andeq	r1, r2, r7, ror #9
   19a8c:	andeq	r1, r2, lr, ror r5
   19a90:	strdeq	pc, [r1], -r9
   19a94:	andeq	r3, r3, r8, ror r0
   19a98:	muleq	r2, r8, r5
   19a9c:	andeq	r1, r2, r9, lsl #10
   19aa0:	andeq	r1, r2, r4, lsr #10
   19aa4:			; <UNDEFINED> instruction: 0x0001ecb4
   19aa8:	strdeq	r0, [r0], -sl
   19aac:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   19ab0:	andeq	r1, r2, r8, asr #10
   19ab4:	andeq	r1, r2, r1, ror #10
   19ab8:			; <UNDEFINED> instruction: 0x000215ba

00019abc <verify_include@@Base>:
   19abc:	mov	r0, #0
   19ac0:	bx	lr

00019ac4 <test_struct_buffer@@Base>:
   19ac4:	push	{r4, r5, lr}
   19ac8:	mov	r4, r0
   19acc:	sub	sp, sp, #108	; 0x6c
   19ad0:	bl	1acd8 <flatcc_builder_reset@@Base>
   19ad4:	mov	r0, r4
   19ad8:	bl	15124 <_start@@Base+0x22dc>
   19adc:	mov	r0, r4
   19ae0:	bl	1cf4c <flatcc_builder_get_buffer_size@@Base>
   19ae4:	cmp	r0, #48	; 0x30
   19ae8:	beq	19b00 <test_struct_buffer@@Base+0x3c>
   19aec:	ldr	r3, [pc, #384]	; 19c74 <test_struct_buffer@@Base+0x1b0>
   19af0:	ldr	r2, [pc, #384]	; 19c78 <test_struct_buffer@@Base+0x1b4>
   19af4:	ldr	r1, [pc, #384]	; 19c7c <test_struct_buffer@@Base+0x1b8>
   19af8:	ldr	r0, [pc, #384]	; 19c80 <test_struct_buffer@@Base+0x1bc>
   19afc:	bl	12ab4 <__assert_fail@plt>
   19b00:	mov	r1, r0
   19b04:	ldr	r0, [pc, #376]	; 19c84 <test_struct_buffer@@Base+0x1c0>
   19b08:	bl	129c4 <printf@plt>
   19b0c:	mov	r0, r4
   19b10:	bl	1d170 <flatcc_builder_get_emit_context@@Base>
   19b14:	ldr	r5, [r0, #24]
   19b18:	cmp	r5, #48	; 0x30
   19b1c:	ldrne	r3, [pc, #336]	; 19c74 <test_struct_buffer@@Base+0x1b0>
   19b20:	ldrne	r2, [pc, #352]	; 19c88 <test_struct_buffer@@Base+0x1c4>
   19b24:	ldrne	r1, [pc, #336]	; 19c7c <test_struct_buffer@@Base+0x1b8>
   19b28:	ldrne	r0, [pc, #348]	; 19c8c <test_struct_buffer@@Base+0x1c8>
   19b2c:	bne	19afc <test_struct_buffer@@Base+0x38>
   19b30:	mov	r2, #100	; 0x64
   19b34:	add	r1, sp, #4
   19b38:	mov	r0, r4
   19b3c:	bl	1d018 <flatcc_builder_copy_buffer@@Base>
   19b40:	cmp	r0, #0
   19b44:	ldreq	r0, [pc, #324]	; 19c90 <test_struct_buffer@@Base+0x1cc>
   19b48:	beq	19c40 <test_struct_buffer@@Base+0x17c>
   19b4c:	ldr	r3, [pc, #320]	; 19c94 <test_struct_buffer@@Base+0x1d0>
   19b50:	mov	r2, r5
   19b54:	add	r1, sp, #4
   19b58:	ldr	r3, [r3]
   19b5c:	ldr	r0, [pc, #308]	; 19c98 <test_struct_buffer@@Base+0x1d4>
   19b60:	bl	13214 <_start@@Base+0x3cc>
   19b64:	ldr	r1, [pc, #304]	; 19c9c <test_struct_buffer@@Base+0x1d8>
   19b68:	add	r0, sp, #4
   19b6c:	bl	12f70 <_start@@Base+0x128>
   19b70:	cmp	r0, #0
   19b74:	ldreq	r0, [pc, #292]	; 19ca0 <test_struct_buffer@@Base+0x1dc>
   19b78:	beq	19c40 <test_struct_buffer@@Base+0x17c>
   19b7c:	ldr	r1, [pc, #288]	; 19ca4 <test_struct_buffer@@Base+0x1e0>
   19b80:	add	r0, sp, #4
   19b84:	bl	12f70 <_start@@Base+0x128>
   19b88:	subs	r4, r0, #0
   19b8c:	ldrne	r0, [pc, #276]	; 19ca8 <test_struct_buffer@@Base+0x1e4>
   19b90:	bne	19c40 <test_struct_buffer@@Base+0x17c>
   19b94:	ldr	r1, [pc, #256]	; 19c9c <test_struct_buffer@@Base+0x1d8>
   19b98:	add	r0, sp, #4
   19b9c:	bl	12f70 <_start@@Base+0x128>
   19ba0:	cmp	r0, #0
   19ba4:	ldreq	r0, [pc, #256]	; 19cac <test_struct_buffer@@Base+0x1e8>
   19ba8:	beq	19c40 <test_struct_buffer@@Base+0x17c>
   19bac:	ldr	r1, [pc, #232]	; 19c9c <test_struct_buffer@@Base+0x1d8>
   19bb0:	add	r0, sp, #4
   19bb4:	bl	12f70 <_start@@Base+0x128>
   19bb8:	cmp	r0, #0
   19bbc:	beq	19c54 <test_struct_buffer@@Base+0x190>
   19bc0:	ldr	r3, [sp, #4]
   19bc4:	add	r2, sp, #4
   19bc8:	add	r3, r2, r3
   19bcc:	vldr	s15, [pc, #148]	; 19c68 <test_struct_buffer@@Base+0x1a4>
   19bd0:	vldr	s14, [r3]
   19bd4:	vcmp.f32	s14, s15
   19bd8:	vmrs	APSR_nzcv, fpscr
   19bdc:	bne	19c3c <test_struct_buffer@@Base+0x178>
   19be0:	vldr	s14, [r3, #4]
   19be4:	vldr	s15, [pc, #128]	; 19c6c <test_struct_buffer@@Base+0x1a8>
   19be8:	vcmp.f32	s14, s15
   19bec:	vmrs	APSR_nzcv, fpscr
   19bf0:	bne	19c3c <test_struct_buffer@@Base+0x178>
   19bf4:	vldr	s14, [r3, #8]
   19bf8:	vldr	s15, [pc, #112]	; 19c70 <test_struct_buffer@@Base+0x1ac>
   19bfc:	vcmp.f32	s14, s15
   19c00:	vmrs	APSR_nzcv, fpscr
   19c04:	bne	19c3c <test_struct_buffer@@Base+0x178>
   19c08:	vldr	d6, [r3, #16]
   19c0c:	vldr	d7, [pc, #76]	; 19c60 <test_struct_buffer@@Base+0x19c>
   19c10:	vcmp.f64	d6, d7
   19c14:	vmrs	APSR_nzcv, fpscr
   19c18:	bne	19c3c <test_struct_buffer@@Base+0x178>
   19c1c:	ldr	r2, [r3, #24]
   19c20:	ldr	r1, [pc, #136]	; 19cb0 <test_struct_buffer@@Base+0x1ec>
   19c24:	bic	r2, r2, #65280	; 0xff00
   19c28:	cmp	r2, r1
   19c2c:	bne	19c3c <test_struct_buffer@@Base+0x178>
   19c30:	ldrsb	r3, [r3, #28]
   19c34:	cmn	r3, #17
   19c38:	beq	19c48 <test_struct_buffer@@Base+0x184>
   19c3c:	ldr	r0, [pc, #112]	; 19cb4 <test_struct_buffer@@Base+0x1f0>
   19c40:	bl	12a0c <puts@plt>
   19c44:	mvn	r4, #0
   19c48:	mov	r0, r4
   19c4c:	add	sp, sp, #108	; 0x6c
   19c50:	pop	{r4, r5, pc}
   19c54:	ldr	r3, [r0]
   19c58:	udf	#0
   19c5c:	nop			; (mov r0, r0)
   19c60:	stclgt	12, cr12, [ip], {205}	; 0xcd
   19c64:	andsmi	ip, r0, ip, asr #25
   19c68:	svccc	0x00800000
   19c6c:	andmi	r0, r0, r0
   19c70:	submi	r0, r0, r0
   19c74:	ldrdeq	lr, [r1], -r2
   19c78:	andeq	r0, r0, r3, lsr #18
   19c7c:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   19c80:	ldrdeq	r1, [r2], -lr
   19c84:	andeq	r1, r2, r9, ror #11
   19c88:	andeq	r0, r0, r5, lsr #18
   19c8c:	andeq	r1, r2, r6, lsl #12
   19c90:	andeq	r1, r2, r1, asr r6
   19c94:	andeq	r3, r3, r8, ror r0
   19c98:	ldrdeq	r1, [r2], -r2
   19c9c:	strdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   19ca0:	andeq	r1, r2, fp, ror #12
   19ca4:	andeq	r1, r2, sp, asr r6
   19ca8:	andeq	r1, r2, r2, ror #12
   19cac:	andeq	r1, r2, ip, lsl #13
   19cb0:	beq	fea99cd8 <__bss_end__@@Base+0xfea66bec>
   19cb4:	andeq	r1, r2, pc, lsr #13

00019cb8 <test_typed_struct_buffer@@Base>:
   19cb8:	push	{r4, r5, r6, r7, lr}
   19cbc:	mov	r5, r0
   19cc0:	sub	sp, sp, #116	; 0x74
   19cc4:	bl	1acd8 <flatcc_builder_reset@@Base>
   19cc8:	mov	r2, #16
   19ccc:	mov	r1, #32
   19cd0:	mov	r0, r5
   19cd4:	bl	1b3b8 <flatcc_builder_start_struct@@Base>
   19cd8:	cmp	r0, #0
   19cdc:	beq	19d24 <test_typed_struct_buffer@@Base+0x6c>
   19ce0:	mov	r3, #1065353216	; 0x3f800000
   19ce4:	str	r3, [r0]
   19ce8:	mov	r3, #1073741824	; 0x40000000
   19cec:	str	r3, [r0, #4]
   19cf0:	ldr	r3, [pc, #588]	; 19f44 <test_typed_struct_buffer@@Base+0x28c>
   19cf4:	ldr	r2, [pc, #588]	; 19f48 <test_typed_struct_buffer@@Base+0x290>
   19cf8:	str	r3, [r0, #8]
   19cfc:	ldr	r3, [pc, #584]	; 19f4c <test_typed_struct_buffer@@Base+0x294>
   19d00:	strd	r2, [r0, #16]
   19d04:	mov	r3, #8
   19d08:	strb	r3, [r0, #24]
   19d0c:	ldr	r3, [pc, #572]	; 19f50 <test_typed_struct_buffer@@Base+0x298>
   19d10:	strh	r3, [r0, #26]
   19d14:	mvn	r3, #16
   19d18:	strb	r3, [r0, #28]
   19d1c:	mov	r0, r5
   19d20:	bl	1b40c <flatcc_builder_end_struct@@Base>
   19d24:	mov	r2, #0
   19d28:	mov	r7, #16
   19d2c:	mov	r3, r0
   19d30:	ldr	r1, [pc, #540]	; 19f54 <test_typed_struct_buffer@@Base+0x29c>
   19d34:	str	r2, [sp, #4]
   19d38:	str	r7, [sp]
   19d3c:	mov	r0, r5
   19d40:	bl	1afdc <flatcc_builder_create_buffer@@Base>
   19d44:	mov	r0, r5
   19d48:	bl	1cf4c <flatcc_builder_get_buffer_size@@Base>
   19d4c:	cmp	r0, #48	; 0x30
   19d50:	mov	r1, r0
   19d54:	beq	19d6c <test_typed_struct_buffer@@Base+0xb4>
   19d58:	ldr	r3, [pc, #504]	; 19f58 <test_typed_struct_buffer@@Base+0x2a0>
   19d5c:	ldr	r2, [pc, #504]	; 19f5c <test_typed_struct_buffer@@Base+0x2a4>
   19d60:	ldr	r1, [pc, #504]	; 19f60 <test_typed_struct_buffer@@Base+0x2a8>
   19d64:	ldr	r0, [pc, #504]	; 19f64 <test_typed_struct_buffer@@Base+0x2ac>
   19d68:	bl	12ab4 <__assert_fail@plt>
   19d6c:	ldr	r0, [pc, #500]	; 19f68 <test_typed_struct_buffer@@Base+0x2b0>
   19d70:	bl	129c4 <printf@plt>
   19d74:	mov	r0, r5
   19d78:	bl	1d170 <flatcc_builder_get_emit_context@@Base>
   19d7c:	ldr	r6, [r0, #24]
   19d80:	cmp	r6, #48	; 0x30
   19d84:	ldrne	r3, [pc, #460]	; 19f58 <test_typed_struct_buffer@@Base+0x2a0>
   19d88:	ldrne	r2, [pc, #476]	; 19f6c <test_typed_struct_buffer@@Base+0x2b4>
   19d8c:	ldrne	r1, [pc, #460]	; 19f60 <test_typed_struct_buffer@@Base+0x2a8>
   19d90:	ldrne	r0, [pc, #472]	; 19f70 <test_typed_struct_buffer@@Base+0x2b8>
   19d94:	bne	19d68 <test_typed_struct_buffer@@Base+0xb0>
   19d98:	add	r4, sp, #12
   19d9c:	mov	r2, #100	; 0x64
   19da0:	mov	r1, r4
   19da4:	mov	r0, r5
   19da8:	bl	1d018 <flatcc_builder_copy_buffer@@Base>
   19dac:	cmp	r0, #0
   19db0:	ldreq	r0, [pc, #444]	; 19f74 <test_typed_struct_buffer@@Base+0x2bc>
   19db4:	beq	19e2c <test_typed_struct_buffer@@Base+0x174>
   19db8:	ldr	r3, [pc, #440]	; 19f78 <test_typed_struct_buffer@@Base+0x2c0>
   19dbc:	mov	r2, r6
   19dc0:	mov	r1, r4
   19dc4:	ldr	r3, [r3]
   19dc8:	ldr	r0, [pc, #428]	; 19f7c <test_typed_struct_buffer@@Base+0x2c4>
   19dcc:	bl	13214 <_start@@Base+0x3cc>
   19dd0:	ldr	r1, [pc, #380]	; 19f54 <test_typed_struct_buffer@@Base+0x29c>
   19dd4:	mov	r0, r4
   19dd8:	bl	12f70 <_start@@Base+0x128>
   19ddc:	cmp	r0, #0
   19de0:	ldreq	r0, [pc, #408]	; 19f80 <test_typed_struct_buffer@@Base+0x2c8>
   19de4:	beq	19e2c <test_typed_struct_buffer@@Base+0x174>
   19de8:	ldr	r1, [pc, #404]	; 19f84 <test_typed_struct_buffer@@Base+0x2cc>
   19dec:	mov	r0, r4
   19df0:	bl	12f70 <_start@@Base+0x128>
   19df4:	cmp	r0, #0
   19df8:	ldrne	r0, [pc, #392]	; 19f88 <test_typed_struct_buffer@@Base+0x2d0>
   19dfc:	bne	19e2c <test_typed_struct_buffer@@Base+0x174>
   19e00:	ldr	r1, [pc, #332]	; 19f54 <test_typed_struct_buffer@@Base+0x29c>
   19e04:	mov	r0, r4
   19e08:	bl	12f70 <_start@@Base+0x128>
   19e0c:	cmp	r0, #0
   19e10:	ldreq	r0, [pc, #372]	; 19f8c <test_typed_struct_buffer@@Base+0x2d4>
   19e14:	beq	19e2c <test_typed_struct_buffer@@Base+0x174>
   19e18:	ldr	r5, [sp, #16]
   19e1c:	ldr	r3, [pc, #364]	; 19f90 <test_typed_struct_buffer@@Base+0x2d8>
   19e20:	cmp	r5, r3
   19e24:	beq	19e3c <test_typed_struct_buffer@@Base+0x184>
   19e28:	ldr	r0, [pc, #356]	; 19f94 <test_typed_struct_buffer@@Base+0x2dc>
   19e2c:	bl	12a0c <puts@plt>
   19e30:	mvn	r0, #0
   19e34:	add	sp, sp, #116	; 0x74
   19e38:	pop	{r4, r5, r6, r7, pc}
   19e3c:	ldr	r3, [sp, #12]
   19e40:	cmn	r4, r3
   19e44:	beq	19e28 <test_typed_struct_buffer@@Base+0x170>
   19e48:	str	r7, [sp]
   19e4c:	mov	r3, #32
   19e50:	mov	r2, r5
   19e54:	mov	r1, r6
   19e58:	mov	r0, r4
   19e5c:	bl	1de10 <flatcc_verify_struct_as_typed_root@@Base>
   19e60:	cmp	r0, #0
   19e64:	ldrne	r0, [pc, #300]	; 19f98 <test_typed_struct_buffer@@Base+0x2e0>
   19e68:	bne	19e2c <test_typed_struct_buffer@@Base+0x174>
   19e6c:	ldr	r3, [sp, #16]
   19e70:	cmp	r3, r5
   19e74:	beq	19e80 <test_typed_struct_buffer@@Base+0x1c8>
   19e78:	ldr	r0, [pc, #284]	; 19f9c <test_typed_struct_buffer@@Base+0x2e4>
   19e7c:	b	19e2c <test_typed_struct_buffer@@Base+0x174>
   19e80:	ldr	r5, [sp, #12]
   19e84:	adds	r5, r4, r5
   19e88:	beq	19e78 <test_typed_struct_buffer@@Base+0x1c0>
   19e8c:	mov	r3, #16
   19e90:	str	r3, [sp]
   19e94:	ldr	r2, [pc, #244]	; 19f90 <test_typed_struct_buffer@@Base+0x2d8>
   19e98:	mov	r3, #32
   19e9c:	mov	r1, #48	; 0x30
   19ea0:	mov	r0, r4
   19ea4:	bl	1de10 <flatcc_verify_struct_as_typed_root@@Base>
   19ea8:	cmp	r0, #0
   19eac:	ldrne	r0, [pc, #236]	; 19fa0 <test_typed_struct_buffer@@Base+0x2e8>
   19eb0:	bne	19e2c <test_typed_struct_buffer@@Base+0x174>
   19eb4:	vldr	s14, [r5]
   19eb8:	vldr	s15, [pc, #120]	; 19f38 <test_typed_struct_buffer@@Base+0x280>
   19ebc:	vcmp.f32	s14, s15
   19ec0:	vmrs	APSR_nzcv, fpscr
   19ec4:	bne	19f24 <test_typed_struct_buffer@@Base+0x26c>
   19ec8:	vldr	s14, [r5, #4]
   19ecc:	vldr	s15, [pc, #104]	; 19f3c <test_typed_struct_buffer@@Base+0x284>
   19ed0:	vcmp.f32	s14, s15
   19ed4:	vmrs	APSR_nzcv, fpscr
   19ed8:	bne	19f24 <test_typed_struct_buffer@@Base+0x26c>
   19edc:	vldr	s14, [r5, #8]
   19ee0:	vldr	s15, [pc, #88]	; 19f40 <test_typed_struct_buffer@@Base+0x288>
   19ee4:	vcmp.f32	s14, s15
   19ee8:	vmrs	APSR_nzcv, fpscr
   19eec:	bne	19f24 <test_typed_struct_buffer@@Base+0x26c>
   19ef0:	vldr	d6, [r5, #16]
   19ef4:	vldr	d7, [pc, #52]	; 19f30 <test_typed_struct_buffer@@Base+0x278>
   19ef8:	vcmp.f64	d6, d7
   19efc:	vmrs	APSR_nzcv, fpscr
   19f00:	bne	19f24 <test_typed_struct_buffer@@Base+0x26c>
   19f04:	ldr	r3, [r5, #24]
   19f08:	ldr	r2, [pc, #148]	; 19fa4 <test_typed_struct_buffer@@Base+0x2ec>
   19f0c:	bic	r3, r3, #65280	; 0xff00
   19f10:	cmp	r3, r2
   19f14:	bne	19f24 <test_typed_struct_buffer@@Base+0x26c>
   19f18:	ldrsb	r3, [r5, #28]
   19f1c:	cmn	r3, #17
   19f20:	beq	19e34 <test_typed_struct_buffer@@Base+0x17c>
   19f24:	ldr	r0, [pc, #124]	; 19fa8 <test_typed_struct_buffer@@Base+0x2f0>
   19f28:	b	19e2c <test_typed_struct_buffer@@Base+0x174>
   19f2c:	nop			; (mov r0, r0)
   19f30:	stclgt	12, cr12, [ip], {205}	; 0xcd
   19f34:	andsmi	ip, r0, ip, asr #25
   19f38:	svccc	0x00800000
   19f3c:	andmi	r0, r0, r0
   19f40:	submi	r0, r0, r0
   19f44:	submi	r0, r0, r0
   19f48:	stclgt	12, cr12, [ip], {205}	; 0xcd
   19f4c:	andsmi	ip, r0, ip, asr #25
   19f50:	andeq	r0, r0, sl, lsr #21
   19f54:	andeq	r1, r2, r7, asr #13
   19f58:	andeq	lr, r1, r5, ror #25
   19f5c:	andeq	r0, r0, r4, asr r9
   19f60:	andeq	pc, r1, lr, lsr fp	; <UNPREDICTABLE>
   19f64:	ldrdeq	r1, [r2], -lr
   19f68:	andeq	r1, r2, r9, ror #11
   19f6c:	andeq	r0, r0, r6, asr r9
   19f70:	andeq	r1, r2, r6, lsl #12
   19f74:	andeq	r1, r2, r1, asr r6
   19f78:	andeq	r3, r3, r8, ror r0
   19f7c:	andeq	r1, r2, ip, asr #13
   19f80:	andeq	r1, r2, fp, ror #12
   19f84:	andeq	r1, r2, sp, asr r6
   19f88:	andeq	r1, r2, r2, ror #12
   19f8c:	andeq	r1, r2, ip, lsl #13
   19f90:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   19f94:	andeq	r1, r2, r5, ror #13
   19f98:	andeq	r1, r2, sp, lsl #14
   19f9c:	andeq	r1, r2, pc, lsr #14
   19fa0:	andeq	r1, r2, ip, asr #14
   19fa4:	beq	fea99fcc <__bss_end__@@Base+0xfea66ee0>
   19fa8:	andeq	r1, r2, pc, lsr #13

00019fac <gen_monster_benchmark@@Base>:
   19fac:	push	{r0, r1, r2, r3, r4, lr}
   19fb0:	mov	r4, r0
   19fb4:	ldr	r2, [pc, #288]	; 1a0dc <gen_monster_benchmark@@Base+0x130>
   19fb8:	add	r3, sp, #4
   19fbc:	ldr	r1, [r2, #4]
   19fc0:	ldr	r0, [r2]
   19fc4:	ldrh	r2, [r2, #8]
   19fc8:	stmia	r3!, {r0, r1}
   19fcc:	mov	r0, r4
   19fd0:	strh	r2, [r3]
   19fd4:	bl	1acd8 <flatcc_builder_reset@@Base>
   19fd8:	mov	r0, r4
   19fdc:	bl	130ec <_start@@Base+0x2a4>
   19fe0:	mov	r1, #80	; 0x50
   19fe4:	mov	r0, r4
   19fe8:	bl	14218 <_start@@Base+0x13d0>
   19fec:	mov	r2, #32
   19ff0:	mov	r3, #16
   19ff4:	mov	r1, #0
   19ff8:	mov	r0, r4
   19ffc:	bl	1ca20 <flatcc_builder_table_add@@Base>
   1a000:	mov	r3, #1065353216	; 0x3f800000
   1a004:	ldr	r1, [pc, #212]	; 1a0e0 <gen_monster_benchmark@@Base+0x134>
   1a008:	str	r3, [r0]
   1a00c:	mov	r3, #1073741824	; 0x40000000
   1a010:	str	r3, [r0, #4]
   1a014:	ldr	r3, [pc, #200]	; 1a0e4 <gen_monster_benchmark@@Base+0x138>
   1a018:	str	r3, [r0, #8]
   1a01c:	mov	r0, r4
   1a020:	bl	13324 <_start@@Base+0x4dc>
   1a024:	mov	r2, #10
   1a028:	add	r1, sp, #4
   1a02c:	mov	r0, r4
   1a030:	bl	15050 <_start@@Base+0x2208>
   1a034:	mov	r0, r4
   1a038:	bl	13340 <_start@@Base+0x4f8>
   1a03c:	mov	r1, #1
   1a040:	mov	r0, r4
   1a044:	bl	1b46c <flatcc_builder_extend_vector@@Base>
   1a048:	mov	r3, #16
   1a04c:	mov	r1, #2
   1a050:	strh	r3, [r0]
   1a054:	mov	r3, #32
   1a058:	strb	r3, [r0, #2]
   1a05c:	mov	r0, r4
   1a060:	bl	1b46c <flatcc_builder_extend_vector@@Base>
   1a064:	mov	r3, #48	; 0x30
   1a068:	mov	r1, #1
   1a06c:	strh	r3, [r0]
   1a070:	mov	r3, #64	; 0x40
   1a074:	strb	r3, [r0, #2]
   1a078:	mov	r3, #80	; 0x50
   1a07c:	strh	r3, [r0, #4]
   1a080:	mov	r3, #96	; 0x60
   1a084:	strb	r3, [r0, #6]
   1a088:	mov	r0, r4
   1a08c:	bl	1b46c <flatcc_builder_extend_vector@@Base>
   1a090:	mov	r1, sp
   1a094:	cmp	r0, #0
   1a098:	movne	r3, #112	; 0x70
   1a09c:	strhne	r3, [r0]
   1a0a0:	mvnne	r3, #127	; 0x7f
   1a0a4:	strbne	r3, [r0, #2]
   1a0a8:	ldr	r3, [pc, #56]	; 1a0e8 <gen_monster_benchmark@@Base+0x13c>
   1a0ac:	mov	r0, r4
   1a0b0:	strh	r3, [sp]
   1a0b4:	mvn	r3, #110	; 0x6e
   1a0b8:	strb	r3, [sp, #2]
   1a0bc:	bl	13350 <_start@@Base+0x508>
   1a0c0:	mov	r0, r4
   1a0c4:	bl	13370 <_start@@Base+0x528>
   1a0c8:	mov	r0, r4
   1a0cc:	bl	142f0 <_start@@Base+0x14a8>
   1a0d0:	mov	r0, #0
   1a0d4:	add	sp, sp, #16
   1a0d8:	pop	{r4, pc}
   1a0dc:	strdeq	lr, [r1], -ip
   1a0e0:	strdeq	pc, [r1], -r9
   1a0e4:	subgt	ip, ip, sp, asr #25
   1a0e8:	muleq	r0, r1, r1

0001a0ec <time_monster@@Base>:
   1a0ec:	push	{r4, r5, r6, lr}
   1a0f0:	mov	r5, r0
   1a0f4:	vpush	{d8}
   1a0f8:	ldr	r0, [pc, #76]	; 1a14c <time_monster@@Base+0x60>
   1a0fc:	bl	12a0c <puts@plt>
   1a100:	bl	13428 <_start@@Base+0x5e0>
   1a104:	ldr	r4, [pc, #68]	; 1a150 <time_monster@@Base+0x64>
   1a108:	vmov.f64	d8, d0
   1a10c:	mov	r0, r5
   1a110:	bl	19fac <gen_monster_benchmark@@Base>
   1a114:	subs	r4, r4, #1
   1a118:	bne	1a10c <time_monster@@Base+0x20>
   1a11c:	mov	r0, r5
   1a120:	bl	1cf4c <flatcc_builder_get_buffer_size@@Base>
   1a124:	mov	r5, r0
   1a128:	bl	13428 <_start@@Base+0x5e0>
   1a12c:	mov	r1, r5
   1a130:	ldr	r0, [pc, #28]	; 1a154 <time_monster@@Base+0x68>
   1a134:	vmov.f64	d1, d0
   1a138:	vmov.f64	d0, d8
   1a13c:	bl	14df8 <_start@@Base+0x1fb0>
   1a140:	vpop	{d8}
   1a144:	mov	r0, r4
   1a148:	pop	{r4, r5, r6, pc}
   1a14c:	andeq	r1, r2, r2, ror r7
   1a150:	andeq	r4, pc, r0, asr #4
   1a154:	andeq	r1, r2, r3, lsl #15

0001a158 <gen_struct_buffer_benchmark@@Base>:
   1a158:	push	{r4, lr}
   1a15c:	mov	r4, r0
   1a160:	bl	1acd8 <flatcc_builder_reset@@Base>
   1a164:	mov	r0, r4
   1a168:	bl	15124 <_start@@Base+0x22dc>
   1a16c:	mov	r1, #0
   1a170:	mov	r0, r4
   1a174:	bl	1cfd4 <flatcc_builder_get_direct_buffer@@Base>
   1a178:	cmp	r0, #0
   1a17c:	beq	1a1fc <gen_struct_buffer_benchmark@@Base+0xa4>
   1a180:	ldr	r3, [r0]
   1a184:	vldr	s15, [pc, #132]	; 1a210 <gen_struct_buffer_benchmark@@Base+0xb8>
   1a188:	add	r0, r0, r3
   1a18c:	vldr	s14, [r0]
   1a190:	vcmp.f32	s14, s15
   1a194:	vmrs	APSR_nzcv, fpscr
   1a198:	bne	1a1fc <gen_struct_buffer_benchmark@@Base+0xa4>
   1a19c:	vldr	s14, [r0, #4]
   1a1a0:	vldr	s15, [pc, #108]	; 1a214 <gen_struct_buffer_benchmark@@Base+0xbc>
   1a1a4:	vcmp.f32	s14, s15
   1a1a8:	vmrs	APSR_nzcv, fpscr
   1a1ac:	bne	1a1fc <gen_struct_buffer_benchmark@@Base+0xa4>
   1a1b0:	vldr	s14, [r0, #8]
   1a1b4:	vldr	s15, [pc, #92]	; 1a218 <gen_struct_buffer_benchmark@@Base+0xc0>
   1a1b8:	vcmp.f32	s14, s15
   1a1bc:	vmrs	APSR_nzcv, fpscr
   1a1c0:	bne	1a1fc <gen_struct_buffer_benchmark@@Base+0xa4>
   1a1c4:	vldr	d6, [r0, #16]
   1a1c8:	vldr	d7, [pc, #56]	; 1a208 <gen_struct_buffer_benchmark@@Base+0xb0>
   1a1cc:	vcmp.f64	d6, d7
   1a1d0:	vmrs	APSR_nzcv, fpscr
   1a1d4:	bne	1a1fc <gen_struct_buffer_benchmark@@Base+0xa4>
   1a1d8:	ldr	r3, [r0, #24]
   1a1dc:	ldr	r2, [pc, #56]	; 1a21c <gen_struct_buffer_benchmark@@Base+0xc4>
   1a1e0:	bic	r3, r3, #65280	; 0xff00
   1a1e4:	cmp	r3, r2
   1a1e8:	bne	1a1fc <gen_struct_buffer_benchmark@@Base+0xa4>
   1a1ec:	ldrb	r0, [r0, #28]
   1a1f0:	subs	r0, r0, #239	; 0xef
   1a1f4:	mvnne	r0, #0
   1a1f8:	pop	{r4, pc}
   1a1fc:	mvn	r0, #0
   1a200:	pop	{r4, pc}
   1a204:	nop			; (mov r0, r0)
   1a208:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1a20c:	andsmi	ip, r0, ip, asr #25
   1a210:	svccc	0x00800000
   1a214:	andmi	r0, r0, r0
   1a218:	submi	r0, r0, r0
   1a21c:	beq	fea9a244 <__bss_end__@@Base+0xfea67158>

0001a220 <time_struct_buffer@@Base>:
   1a220:	push	{r4, r5, r6, lr}
   1a224:	mov	r6, r0
   1a228:	vpush	{d8-d9}
   1a22c:	ldr	r0, [pc, #104]	; 1a29c <time_struct_buffer@@Base+0x7c>
   1a230:	bl	12a0c <puts@plt>
   1a234:	bl	13428 <_start@@Base+0x5e0>
   1a238:	ldr	r5, [pc, #96]	; 1a2a0 <time_struct_buffer@@Base+0x80>
   1a23c:	mov	r4, #0
   1a240:	vmov.f64	d8, d0
   1a244:	mov	r0, r6
   1a248:	bl	1a158 <gen_struct_buffer_benchmark@@Base>
   1a24c:	subs	r5, r5, #1
   1a250:	orr	r4, r4, r0
   1a254:	bne	1a244 <time_struct_buffer@@Base+0x24>
   1a258:	bl	13428 <_start@@Base+0x5e0>
   1a25c:	mov	r0, r6
   1a260:	vmov.f64	d9, d0
   1a264:	bl	1cf4c <flatcc_builder_get_buffer_size@@Base>
   1a268:	cmp	r4, #0
   1a26c:	mov	r5, r0
   1a270:	beq	1a27c <time_struct_buffer@@Base+0x5c>
   1a274:	ldr	r0, [pc, #40]	; 1a2a4 <time_struct_buffer@@Base+0x84>
   1a278:	bl	12a0c <puts@plt>
   1a27c:	vmov.f64	d1, d9
   1a280:	vmov.f64	d0, d8
   1a284:	mov	r1, r5
   1a288:	ldr	r0, [pc, #24]	; 1a2a8 <time_struct_buffer@@Base+0x88>
   1a28c:	bl	14df8 <_start@@Base+0x1fb0>
   1a290:	vpop	{d8-d9}
   1a294:	mov	r0, r4
   1a298:	pop	{r4, r5, r6, pc}
   1a29c:	andeq	r1, r2, r2, ror r7
   1a2a0:	andeq	r4, pc, r0, asr #4
   1a2a4:	muleq	r2, r9, r7
   1a2a8:	andeq	r1, r2, sl, lsr #15
   1a2ac:	ldr	ip, [r0, #28]
   1a2b0:	ldr	r3, [r0, #64]	; 0x40
   1a2b4:	ldr	r2, [r0, #60]	; 0x3c
   1a2b8:	sub	r3, r3, ip
   1a2bc:	cmp	r3, r1
   1a2c0:	strls	r3, [r0, #24]
   1a2c4:	strhi	r1, [r0, #24]
   1a2c8:	ldr	r3, [r0, #32]
   1a2cc:	add	r2, r2, ip
   1a2d0:	str	r2, [r0, #16]
   1a2d4:	str	r1, [r3, #4]
   1a2d8:	bx	lr
   1a2dc:	push	{r0, r1, r4, r5, r6, lr}
   1a2e0:	mov	r6, r2
   1a2e4:	ldr	r2, [r0, #28]
   1a2e8:	mov	r3, #1
   1a2ec:	str	r3, [sp]
   1a2f0:	add	r2, r1, r2
   1a2f4:	ldr	r5, [r0, #48]	; 0x30
   1a2f8:	add	r1, r0, #60	; 0x3c
   1a2fc:	mov	r4, r0
   1a300:	ldr	r0, [r0, #40]	; 0x28
   1a304:	blx	r5
   1a308:	subs	r5, r0, #0
   1a30c:	mvnne	r5, #0
   1a310:	bne	1a320 <time_struct_buffer@@Base+0x100>
   1a314:	mov	r1, r6
   1a318:	mov	r0, r4
   1a31c:	bl	1a2ac <time_struct_buffer@@Base+0x8c>
   1a320:	mov	r0, r5
   1a324:	add	sp, sp, #8
   1a328:	pop	{r4, r5, r6, pc}
   1a32c:	push	{r4, r5, r6, lr}
   1a330:	mov	r4, r0
   1a334:	ldr	r5, [r0, #20]
   1a338:	ldr	r3, [r0, #24]
   1a33c:	add	r1, r5, r1
   1a340:	cmp	r1, r3
   1a344:	str	r1, [r0, #20]
   1a348:	bcs	1a358 <time_struct_buffer@@Base+0x138>
   1a34c:	ldr	r0, [r4, #16]
   1a350:	add	r0, r0, r5
   1a354:	pop	{r4, r5, r6, pc}
   1a358:	mvn	r2, #3
   1a35c:	add	r1, r1, #1
   1a360:	bl	1a2dc <time_struct_buffer@@Base+0xbc>
   1a364:	cmp	r0, #0
   1a368:	beq	1a34c <time_struct_buffer@@Base+0x12c>
   1a36c:	mov	r0, #0
   1a370:	pop	{r4, r5, r6, pc}
   1a374:	push	{r4, lr}
   1a378:	mov	r4, r0
   1a37c:	ldr	r2, [r0, #20]
   1a380:	mov	r1, #0
   1a384:	ldr	r0, [r0, #16]
   1a388:	bl	12a60 <memset@plt>
   1a38c:	ldr	r3, [r4, #32]
   1a390:	mov	r0, r4
   1a394:	ldr	r2, [r3, #8]
   1a398:	ldr	r1, [r3, #4]
   1a39c:	str	r2, [r4, #20]
   1a3a0:	ldr	r2, [r3]
   1a3a4:	str	r2, [r4, #28]
   1a3a8:	bl	1a2ac <time_struct_buffer@@Base+0x8c>
   1a3ac:	ldrh	r3, [r4, #130]	; 0x82
   1a3b0:	ldrh	r2, [r4, #128]	; 0x80
   1a3b4:	cmp	r2, r3
   1a3b8:	strhcc	r3, [r4, #128]	; 0x80
   1a3bc:	ldr	r3, [r4, #32]
   1a3c0:	sub	r3, r3, #36	; 0x24
   1a3c4:	ldrh	r2, [r3, #48]	; 0x30
   1a3c8:	str	r3, [r4, #32]
   1a3cc:	ldr	r3, [r4, #156]	; 0x9c
   1a3d0:	strh	r2, [r4, #130]	; 0x82
   1a3d4:	sub	r3, r3, #1
   1a3d8:	str	r3, [r4, #156]	; 0x9c
   1a3dc:	pop	{r4, pc}
   1a3e0:	ldr	r3, [r0, #20]
   1a3e4:	mov	r2, r1
   1a3e8:	sub	r3, r3, r1
   1a3ec:	str	r3, [r0, #20]
   1a3f0:	ldr	r0, [r0, #16]
   1a3f4:	mov	r1, #0
   1a3f8:	add	r0, r0, r3
   1a3fc:	b	12a60 <memset@plt>
   1a400:	push	{r4, r5, r6, lr}
   1a404:	mov	r6, r1
   1a408:	mov	r1, r2
   1a40c:	mov	r4, r2
   1a410:	bl	1a32c <time_struct_buffer@@Base+0x10c>
   1a414:	subs	r5, r0, #0
   1a418:	beq	1a428 <time_struct_buffer@@Base+0x208>
   1a41c:	mov	r2, r4
   1a420:	mov	r1, r6
   1a424:	bl	129dc <memcpy@plt>
   1a428:	mov	r0, r5
   1a42c:	pop	{r4, r5, r6, pc}
   1a430:	push	{r0, r1, r4, lr}
   1a434:	add	r3, sp, #8
   1a438:	cmp	r0, #4
   1a43c:	mov	r4, #0
   1a440:	mov	r2, r1
   1a444:	str	r4, [r3, #-4]!
   1a448:	movcs	r1, r0
   1a44c:	movcc	r1, #4
   1a450:	mov	r0, r3
   1a454:	bl	12a54 <posix_memalign@plt>
   1a458:	cmp	r0, r4
   1a45c:	beq	1a474 <time_struct_buffer@@Base+0x254>
   1a460:	ldr	r0, [sp, #4]
   1a464:	cmp	r0, r4
   1a468:	beq	1a474 <time_struct_buffer@@Base+0x254>
   1a46c:	bl	129d0 <free@plt>
   1a470:	str	r4, [sp, #4]
   1a474:	ldr	r0, [sp, #4]
   1a478:	add	sp, sp, #8
   1a47c:	pop	{r4, pc}

0001a480 <flatcc_builder_default_alloc@@Base>:
   1a480:	push	{r4, r5, r6, r7, r8, lr}
   1a484:	subs	r6, r2, #0
   1a488:	mov	r5, r1
   1a48c:	bne	1a4b0 <flatcc_builder_default_alloc@@Base+0x30>
   1a490:	ldr	r0, [r1]
   1a494:	cmp	r0, #0
   1a498:	popeq	{r4, r5, r6, r7, r8, pc}
   1a49c:	bl	129d0 <free@plt>
   1a4a0:	str	r6, [r5]
   1a4a4:	str	r6, [r5, #4]
   1a4a8:	mov	r0, #0
   1a4ac:	pop	{r4, r5, r6, r7, r8, pc}
   1a4b0:	ldr	r2, [sp, #24]
   1a4b4:	mov	r7, r3
   1a4b8:	sub	r2, r2, #1
   1a4bc:	cmp	r2, #6
   1a4c0:	ldrls	pc, [pc, r2, lsl #2]
   1a4c4:	b	1a558 <flatcc_builder_default_alloc@@Base+0xd8>
   1a4c8:	andeq	sl, r1, r0, ror #10
   1a4cc:	andeq	sl, r1, r8, asr r5
   1a4d0:	andeq	sl, r1, r8, asr r5
   1a4d4:	andeq	sl, r1, r8, asr #10
   1a4d8:	andeq	sl, r1, r4, ror #9
   1a4dc:	andeq	sl, r1, r8, asr r5
   1a4e0:	andeq	sl, r1, r0, asr r5
   1a4e4:	mov	r4, r6
   1a4e8:	cmp	r6, r4
   1a4ec:	bhi	1a568 <flatcc_builder_default_alloc@@Base+0xe8>
   1a4f0:	ldr	r2, [r5, #4]
   1a4f4:	cmp	r6, r2
   1a4f8:	bhi	1a504 <flatcc_builder_default_alloc@@Base+0x84>
   1a4fc:	cmp	r4, r2, lsr #1
   1a500:	bls	1a4a8 <flatcc_builder_default_alloc@@Base+0x28>
   1a504:	mov	r1, r4
   1a508:	ldr	r0, [r5]
   1a50c:	bl	129f4 <realloc@plt>
   1a510:	subs	r6, r0, #0
   1a514:	beq	1a570 <flatcc_builder_default_alloc@@Base+0xf0>
   1a518:	cmp	r7, #0
   1a51c:	beq	1a53c <flatcc_builder_default_alloc@@Base+0xbc>
   1a520:	ldr	r0, [r5, #4]
   1a524:	cmp	r4, r0
   1a528:	bls	1a53c <flatcc_builder_default_alloc@@Base+0xbc>
   1a52c:	sub	r2, r4, r0
   1a530:	mov	r1, #0
   1a534:	add	r0, r6, r0
   1a538:	bl	12a60 <memset@plt>
   1a53c:	str	r6, [r5]
   1a540:	str	r4, [r5, #4]
   1a544:	b	1a4a8 <flatcc_builder_default_alloc@@Base+0x28>
   1a548:	mov	r4, #288	; 0x120
   1a54c:	b	1a4e8 <flatcc_builder_default_alloc@@Base+0x68>
   1a550:	mov	r4, #64	; 0x40
   1a554:	b	1a4e8 <flatcc_builder_default_alloc@@Base+0x68>
   1a558:	mov	r4, #32
   1a55c:	b	1a4e8 <flatcc_builder_default_alloc@@Base+0x68>
   1a560:	mov	r4, #256	; 0x100
   1a564:	b	1a4e8 <flatcc_builder_default_alloc@@Base+0x68>
   1a568:	lsl	r4, r4, #1
   1a56c:	b	1a4e8 <flatcc_builder_default_alloc@@Base+0x68>
   1a570:	mvn	r0, #0
   1a574:	pop	{r4, r5, r6, r7, r8, pc}
   1a578:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a57c:	add	r6, r0, #52	; 0x34
   1a580:	mov	r4, r1
   1a584:	add	r1, r6, r1, lsl #3
   1a588:	mov	r5, r2
   1a58c:	add	r2, r2, r3
   1a590:	ldr	r3, [r1, #4]
   1a594:	cmp	r2, r3
   1a598:	bls	1a5cc <flatcc_builder_default_alloc@@Base+0x14c>
   1a59c:	str	r4, [sp]
   1a5a0:	ldr	r3, [sp, #32]
   1a5a4:	ldr	r7, [r0, #48]	; 0x30
   1a5a8:	ldr	r0, [r0, #40]	; 0x28
   1a5ac:	blx	r7
   1a5b0:	cmp	r0, #0
   1a5b4:	beq	1a5cc <flatcc_builder_default_alloc@@Base+0x14c>
   1a5b8:	ldr	r3, [pc, #28]	; 1a5dc <flatcc_builder_default_alloc@@Base+0x15c>
   1a5bc:	mov	r2, #308	; 0x134
   1a5c0:	ldr	r1, [pc, #24]	; 1a5e0 <flatcc_builder_default_alloc@@Base+0x160>
   1a5c4:	ldr	r0, [pc, #24]	; 1a5e4 <flatcc_builder_default_alloc@@Base+0x164>
   1a5c8:	bl	12ab4 <__assert_fail@plt>
   1a5cc:	ldr	r0, [r6, r4, lsl #3]
   1a5d0:	add	r0, r0, r5
   1a5d4:	add	sp, sp, #12
   1a5d8:	pop	{r4, r5, r6, r7, pc}
   1a5dc:	strdeq	r1, [r2], -lr
   1a5e0:	strdeq	r1, [r2], -sp
   1a5e4:	andeq	r1, r2, sl, ror #30
   1a5e8:	ldr	r2, [r0, #156]	; 0x9c
   1a5ec:	ldr	r3, [r0, #160]	; 0xa0
   1a5f0:	push	{r0, r1, r4, r5, r6, lr}
   1a5f4:	mov	r5, r1
   1a5f8:	add	r1, r2, #1
   1a5fc:	cmp	r1, r3
   1a600:	mov	r4, r0
   1a604:	str	r1, [r0, #156]	; 0x9c
   1a608:	ble	1a6b8 <flatcc_builder_default_alloc@@Base+0x238>
   1a60c:	ldr	r3, [r0, #176]	; 0xb0
   1a610:	cmp	r3, #0
   1a614:	cmpgt	r1, r3
   1a618:	movgt	r3, #1
   1a61c:	movle	r3, #0
   1a620:	ble	1a630 <flatcc_builder_default_alloc@@Base+0x1b0>
   1a624:	mvn	r0, #0
   1a628:	add	sp, sp, #8
   1a62c:	pop	{r4, r5, r6, pc}
   1a630:	mov	r6, #36	; 0x24
   1a634:	str	r3, [sp]
   1a638:	mul	r2, r6, r2
   1a63c:	mov	r3, r6
   1a640:	mov	r1, #4
   1a644:	bl	1a578 <flatcc_builder_default_alloc@@Base+0xf8>
   1a648:	cmp	r0, #0
   1a64c:	str	r0, [r4, #32]
   1a650:	beq	1a624 <flatcc_builder_default_alloc@@Base+0x1a4>
   1a654:	mov	r1, r6
   1a658:	ldr	r0, [r4, #88]	; 0x58
   1a65c:	bl	1e3a0 <flatcc_verify_union_vector_field@@Base+0x1ec>
   1a660:	ldr	r3, [r4, #176]	; 0xb0
   1a664:	cmp	r3, #0
   1a668:	cmpgt	r0, r3
   1a66c:	str	r0, [r4, #160]	; 0xa0
   1a670:	strgt	r3, [r4, #160]	; 0xa0
   1a674:	ldrh	r1, [r4, #130]	; 0x82
   1a678:	ldr	r2, [r4, #32]
   1a67c:	ldr	r3, [r4, #20]
   1a680:	mvn	r0, #3
   1a684:	strh	r1, [r2, #12]
   1a688:	ldr	r1, [r4, #28]
   1a68c:	str	r3, [r2, #8]
   1a690:	add	r3, r3, r1
   1a694:	add	r3, r3, #7
   1a698:	strh	r5, [r4, #130]	; 0x82
   1a69c:	bic	r3, r3, #7
   1a6a0:	str	r0, [r2, #4]
   1a6a4:	mov	r0, #0
   1a6a8:	str	r1, [r2]
   1a6ac:	str	r3, [r4, #28]
   1a6b0:	str	r0, [r4, #20]
   1a6b4:	b	1a628 <flatcc_builder_default_alloc@@Base+0x1a8>
   1a6b8:	ldr	r3, [r0, #32]
   1a6bc:	add	r3, r3, #36	; 0x24
   1a6c0:	str	r3, [r0, #32]
   1a6c4:	b	1a674 <flatcc_builder_default_alloc@@Base+0x1f4>
   1a6c8:	ldr	r3, [r0, #32]
   1a6cc:	push	{r0, r1, r2, r4, r5, lr}
   1a6d0:	add	r1, r1, #2
   1a6d4:	ldr	r2, [r3, #16]
   1a6d8:	lsl	r5, r1, #1
   1a6dc:	ldrh	r1, [r3, #28]
   1a6e0:	mov	r3, #1
   1a6e4:	str	r3, [sp]
   1a6e8:	mov	r3, r5
   1a6ec:	add	r2, r2, r1, lsl #1
   1a6f0:	mov	r1, #0
   1a6f4:	mov	r4, r0
   1a6f8:	bl	1a578 <flatcc_builder_default_alloc@@Base+0xf8>
   1a6fc:	cmp	r0, #0
   1a700:	streq	r0, [r4, #4]
   1a704:	mvneq	r0, #0
   1a708:	beq	1a744 <flatcc_builder_default_alloc@@Base+0x2c4>
   1a70c:	ldr	r2, [r4, #32]
   1a710:	add	r0, r0, #4
   1a714:	mov	r3, #0
   1a718:	str	r0, [r4, #4]
   1a71c:	str	r3, [sp]
   1a720:	mov	r1, #3
   1a724:	sub	r3, r5, #3
   1a728:	ldr	r2, [r2, #20]
   1a72c:	mov	r0, r4
   1a730:	bl	1a578 <flatcc_builder_default_alloc@@Base+0xf8>
   1a734:	cmp	r0, #0
   1a738:	str	r0, [r4]
   1a73c:	movne	r0, #0
   1a740:	mvneq	r0, #0
   1a744:	add	sp, sp, #12
   1a748:	pop	{r4, r5, pc}
   1a74c:	push	{r0, r1, r2, r4, r5, lr}
   1a750:	ldr	r3, [r1]
   1a754:	ldr	r4, [r0, #140]	; 0x8c
   1a758:	add	r2, r3, r4
   1a75c:	cmp	r4, r2
   1a760:	str	r2, [r0, #140]	; 0x8c
   1a764:	ble	1a77c <flatcc_builder_default_alloc@@Base+0x2fc>
   1a768:	ldr	r3, [pc, #68]	; 1a7b4 <flatcc_builder_default_alloc@@Base+0x334>
   1a76c:	ldr	r2, [pc, #68]	; 1a7b8 <flatcc_builder_default_alloc@@Base+0x338>
   1a770:	ldr	r1, [pc, #68]	; 1a7bc <flatcc_builder_default_alloc@@Base+0x33c>
   1a774:	ldr	r0, [pc, #68]	; 1a7c0 <flatcc_builder_default_alloc@@Base+0x340>
   1a778:	bl	12ab4 <__assert_fail@plt>
   1a77c:	str	r3, [sp]
   1a780:	add	r1, r1, #8
   1a784:	ldr	r5, [r0, #44]	; 0x2c
   1a788:	ldr	r2, [r1, #-4]
   1a78c:	mov	r3, r4
   1a790:	ldr	r0, [r0, #36]	; 0x24
   1a794:	blx	r5
   1a798:	cmp	r0, #0
   1a79c:	ldrne	r3, [pc, #16]	; 1a7b4 <flatcc_builder_default_alloc@@Base+0x334>
   1a7a0:	ldrne	r2, [pc, #28]	; 1a7c4 <flatcc_builder_default_alloc@@Base+0x344>
   1a7a4:	bne	1a770 <flatcc_builder_default_alloc@@Base+0x2f0>
   1a7a8:	add	r0, r4, #1
   1a7ac:	add	sp, sp, #12
   1a7b0:	pop	{r4, r5, pc}
   1a7b4:	andeq	r1, r2, sp, lsl #16
   1a7b8:	andeq	r0, r0, r1, lsr #5
   1a7bc:	strdeq	r1, [r2], -sp
   1a7c0:	andeq	r1, r2, sl, ror #30
   1a7c4:	andeq	r0, r0, r5, lsr #5
   1a7c8:	cmp	r2, #0
   1a7cc:	bne	1a7dc <flatcc_builder_default_alloc@@Base+0x35c>
   1a7d0:	ldrh	r2, [r0, #132]	; 0x84
   1a7d4:	cmp	r2, #0
   1a7d8:	moveq	r2, #1
   1a7dc:	ldrh	ip, [r1]
   1a7e0:	cmp	ip, #3
   1a7e4:	movls	ip, #4
   1a7e8:	strhls	ip, [r1]
   1a7ec:	ldrh	ip, [r1]
   1a7f0:	cmp	ip, r2
   1a7f4:	strhcc	r2, [r1]
   1a7f8:	cmp	r3, #0
   1a7fc:	bne	1a860 <flatcc_builder_default_alloc@@Base+0x3e0>
   1a800:	ldr	r3, [r0, #140]	; 0x8c
   1a804:	sub	r2, r2, #1
   1a808:	ands	r2, r2, r3
   1a80c:	beq	1a860 <flatcc_builder_default_alloc@@Base+0x3e0>
   1a810:	push	{r4, lr}
   1a814:	sub	sp, sp, #72	; 0x48
   1a818:	ldr	r4, [pc, #72]	; 1a868 <flatcc_builder_default_alloc@@Base+0x3e8>
   1a81c:	mov	r3, #1
   1a820:	mov	r1, sp
   1a824:	str	r2, [sp]
   1a828:	str	r4, [sp, #8]
   1a82c:	str	r2, [sp, #12]
   1a830:	str	r3, [sp, #4]
   1a834:	bl	1a74c <flatcc_builder_default_alloc@@Base+0x2cc>
   1a838:	cmp	r0, #0
   1a83c:	bne	1a854 <flatcc_builder_default_alloc@@Base+0x3d4>
   1a840:	add	r3, r4, #512	; 0x200
   1a844:	ldr	r2, [pc, #32]	; 1a86c <flatcc_builder_default_alloc@@Base+0x3ec>
   1a848:	ldr	r1, [pc, #32]	; 1a870 <flatcc_builder_default_alloc@@Base+0x3f0>
   1a84c:	ldr	r0, [pc, #32]	; 1a874 <flatcc_builder_default_alloc@@Base+0x3f4>
   1a850:	bl	12ab4 <__assert_fail@plt>
   1a854:	mov	r0, #0
   1a858:	add	sp, sp, #72	; 0x48
   1a85c:	pop	{r4, pc}
   1a860:	mov	r0, #0
   1a864:	bx	lr
   1a868:	andeq	r1, r2, r7, lsl r8
   1a86c:			; <UNDEFINED> instruction: 0x000002be
   1a870:	strdeq	r1, [r2], -sp
   1a874:	andeq	r1, r2, sl, ror #30
   1a878:	ldr	r2, [r0, #136]	; 0x88
   1a87c:	ldr	r3, [r1]
   1a880:	push	{r0, r1, r4, r5, r6, lr}
   1a884:	sub	r4, r2, r3
   1a888:	cmp	r2, r4
   1a88c:	bgt	1a8a4 <flatcc_builder_default_alloc@@Base+0x424>
   1a890:	ldr	r3, [pc, #76]	; 1a8e4 <flatcc_builder_default_alloc@@Base+0x464>
   1a894:	ldr	r2, [pc, #76]	; 1a8e8 <flatcc_builder_default_alloc@@Base+0x468>
   1a898:	ldr	r1, [pc, #76]	; 1a8ec <flatcc_builder_default_alloc@@Base+0x46c>
   1a89c:	ldr	r0, [pc, #76]	; 1a8f0 <flatcc_builder_default_alloc@@Base+0x470>
   1a8a0:	bl	12ab4 <__assert_fail@plt>
   1a8a4:	str	r3, [sp]
   1a8a8:	mov	r5, r0
   1a8ac:	ldr	r6, [r0, #44]	; 0x2c
   1a8b0:	ldr	r2, [r1, #4]
   1a8b4:	mov	r3, r4
   1a8b8:	add	r1, r1, #8
   1a8bc:	ldr	r0, [r0, #36]	; 0x24
   1a8c0:	blx	r6
   1a8c4:	cmp	r0, #0
   1a8c8:	ldrne	r3, [pc, #20]	; 1a8e4 <flatcc_builder_default_alloc@@Base+0x464>
   1a8cc:	ldrne	r2, [pc, #32]	; 1a8f4 <flatcc_builder_default_alloc@@Base+0x474>
   1a8d0:	bne	1a898 <flatcc_builder_default_alloc@@Base+0x418>
   1a8d4:	mov	r0, r4
   1a8d8:	str	r4, [r5, #136]	; 0x88
   1a8dc:	add	sp, sp, #8
   1a8e0:	pop	{r4, r5, r6, pc}
   1a8e4:	andeq	r1, r2, r6, lsr #20
   1a8e8:	andeq	r0, r0, r7, lsl #5
   1a8ec:	strdeq	r1, [r2], -sp
   1a8f0:	andeq	r1, r2, sl, ror #30
   1a8f4:	andeq	r0, r0, fp, lsl #5
   1a8f8:	ldr	r3, [r0, #20]
   1a8fc:	adds	r1, r3, r1
   1a900:	movcs	r3, #1
   1a904:	movcc	r3, #0
   1a908:	cmp	r1, r2
   1a90c:	movls	r2, r3
   1a910:	orrhi	r2, r3, #1
   1a914:	cmp	r2, #0
   1a918:	beq	1a934 <flatcc_builder_default_alloc@@Base+0x4b4>
   1a91c:	push	{r4, lr}
   1a920:	mov	r2, #892	; 0x37c
   1a924:	ldr	r3, [pc, #20]	; 1a940 <flatcc_builder_default_alloc@@Base+0x4c0>
   1a928:	ldr	r1, [pc, #20]	; 1a944 <flatcc_builder_default_alloc@@Base+0x4c4>
   1a92c:	ldr	r0, [pc, #20]	; 1a948 <flatcc_builder_default_alloc@@Base+0x4c8>
   1a930:	bl	12ab4 <__assert_fail@plt>
   1a934:	str	r1, [r0, #20]
   1a938:	mov	r0, r2
   1a93c:	bx	lr
   1a940:	andeq	r1, r2, r1, lsr sl
   1a944:	strdeq	r1, [r2], -sp
   1a948:	andeq	r1, r2, r3, asr #30
   1a94c:	ldrh	ip, [r0, #128]	; 0x80
   1a950:	push	{r4, r5, r6, r7, lr}
   1a954:	sub	sp, sp, #84	; 0x54
   1a958:	cmp	ip, #3
   1a95c:	movls	ip, #4
   1a960:	strhls	ip, [r0, #128]	; 0x80
   1a964:	mov	ip, #4
   1a968:	add	r5, sp, ip
   1a96c:	str	ip, [sp, #8]
   1a970:	ldr	r4, [r0, #136]	; 0x88
   1a974:	str	ip, [sp, #20]
   1a978:	mov	ip, #1
   1a97c:	str	ip, [sp, #12]
   1a980:	lsls	ip, r2, #2
   1a984:	strne	ip, [sp, #28]
   1a988:	and	lr, r4, #3
   1a98c:	str	r5, [sp, #16]
   1a990:	addne	r5, ip, #4
   1a994:	movne	ip, #2
   1a998:	strne	r5, [sp, #8]
   1a99c:	strne	r1, [sp, #24]
   1a9a0:	strne	ip, [sp, #12]
   1a9a4:	cmp	lr, #0
   1a9a8:	str	r2, [sp, #4]
   1a9ac:	beq	1a9dc <flatcc_builder_default_alloc@@Base+0x55c>
   1a9b0:	ldr	ip, [sp, #8]
   1a9b4:	add	r5, sp, #80	; 0x50
   1a9b8:	add	ip, ip, lr
   1a9bc:	str	ip, [sp, #8]
   1a9c0:	ldr	ip, [sp, #12]
   1a9c4:	ldr	r6, [pc, #204]	; 1aa98 <flatcc_builder_default_alloc@@Base+0x618>
   1a9c8:	add	ip, ip, #1
   1a9cc:	str	ip, [sp, #12]
   1a9d0:	add	r5, r5, ip, lsl #3
   1a9d4:	str	r6, [r5, #-72]	; 0xffffffb8
   1a9d8:	str	lr, [r5, #-68]	; 0xffffffbc
   1a9dc:	ldr	r5, [sp, #8]
   1a9e0:	sub	r6, r1, #4
   1a9e4:	sub	r5, r4, r5
   1a9e8:	mov	lr, r3
   1a9ec:	add	r2, r3, r2
   1a9f0:	mvn	r7, #3
   1a9f4:	cmp	r2, lr
   1a9f8:	bne	1aa0c <flatcc_builder_default_alloc@@Base+0x58c>
   1a9fc:	add	r1, sp, #8
   1aa00:	bl	1a878 <flatcc_builder_default_alloc@@Base+0x3f8>
   1aa04:	add	sp, sp, #84	; 0x54
   1aa08:	pop	{r4, r5, r6, r7, pc}
   1aa0c:	ldr	r4, [r6, #4]!
   1aa10:	cmp	r4, #0
   1aa14:	beq	1aa54 <flatcc_builder_default_alloc@@Base+0x5d4>
   1aa18:	sub	ip, r7, r6
   1aa1c:	add	ip, r1, ip
   1aa20:	add	ip, ip, r4
   1aa24:	sub	ip, ip, r5
   1aa28:	cmp	r3, #0
   1aa2c:	str	ip, [r6]
   1aa30:	beq	1aa90 <flatcc_builder_default_alloc@@Base+0x610>
   1aa34:	ldrb	ip, [lr]
   1aa38:	cmp	ip, #0
   1aa3c:	bne	1aa90 <flatcc_builder_default_alloc@@Base+0x610>
   1aa40:	ldr	r3, [pc, #84]	; 1aa9c <flatcc_builder_default_alloc@@Base+0x61c>
   1aa44:	ldr	r2, [pc, #84]	; 1aaa0 <flatcc_builder_default_alloc@@Base+0x620>
   1aa48:	ldr	r1, [pc, #84]	; 1aaa4 <flatcc_builder_default_alloc@@Base+0x624>
   1aa4c:	ldr	r0, [pc, #84]	; 1aaa8 <flatcc_builder_default_alloc@@Base+0x628>
   1aa50:	bl	12ab4 <__assert_fail@plt>
   1aa54:	cmp	r3, #0
   1aa58:	beq	1aa7c <flatcc_builder_default_alloc@@Base+0x5fc>
   1aa5c:	ldrb	ip, [lr]
   1aa60:	cmp	ip, #0
   1aa64:	beq	1aa90 <flatcc_builder_default_alloc@@Base+0x610>
   1aa68:	ldr	r3, [pc, #44]	; 1aa9c <flatcc_builder_default_alloc@@Base+0x61c>
   1aa6c:	ldr	r2, [pc, #56]	; 1aaac <flatcc_builder_default_alloc@@Base+0x62c>
   1aa70:	ldr	r1, [pc, #44]	; 1aaa4 <flatcc_builder_default_alloc@@Base+0x624>
   1aa74:	ldr	r0, [pc, #52]	; 1aab0 <flatcc_builder_default_alloc@@Base+0x630>
   1aa78:	b	1aa50 <flatcc_builder_default_alloc@@Base+0x5d0>
   1aa7c:	ldr	r3, [pc, #24]	; 1aa9c <flatcc_builder_default_alloc@@Base+0x61c>
   1aa80:	ldr	r2, [pc, #44]	; 1aab4 <flatcc_builder_default_alloc@@Base+0x634>
   1aa84:	ldr	r1, [pc, #24]	; 1aaa4 <flatcc_builder_default_alloc@@Base+0x624>
   1aa88:	ldr	r0, [pc, #40]	; 1aab8 <flatcc_builder_default_alloc@@Base+0x638>
   1aa8c:	b	1aa50 <flatcc_builder_default_alloc@@Base+0x5d0>
   1aa90:	add	lr, lr, #1
   1aa94:	b	1a9f4 <flatcc_builder_default_alloc@@Base+0x574>
   1aa98:	andeq	r1, r2, r7, lsl r8
   1aa9c:	andeq	r1, r2, r2, asr #20
   1aaa0:			; <UNDEFINED> instruction: 0x000005b1
   1aaa4:	strdeq	r1, [r2], -sp
   1aaa8:	andeq	r1, r2, lr, asr pc
   1aaac:			; <UNDEFINED> instruction: 0x000005b5
   1aab0:	andeq	r1, r2, ip, ror #30
   1aab4:			; <UNDEFINED> instruction: 0x000005b7
   1aab8:	andeq	r1, r2, sl, ror #30

0001aabc <flatcc_builder_flush_vtable_cache@@Base>:
   1aabc:	ldr	r3, [r0, #116]	; 0x74
   1aac0:	cmp	r3, #0
   1aac4:	bxeq	lr
   1aac8:	push	{r4, lr}
   1aacc:	mov	r1, #0
   1aad0:	mov	r4, r0
   1aad4:	ldr	r2, [r0, #96]	; 0x60
   1aad8:	ldr	r0, [r0, #92]	; 0x5c
   1aadc:	bl	12a60 <memset@plt>
   1aae0:	mov	r3, #16
   1aae4:	str	r3, [r4, #124]	; 0x7c
   1aae8:	mov	r3, #0
   1aaec:	str	r3, [r4, #120]	; 0x78
   1aaf0:	pop	{r4, pc}

0001aaf4 <flatcc_builder_custom_init@@Base>:
   1aaf4:	push	{r4, r5, r6, r7, r8, lr}
   1aaf8:	mov	r6, r1
   1aafc:	mov	r7, r2
   1ab00:	mov	r1, #0
   1ab04:	mov	r2, #232	; 0xe8
   1ab08:	mov	r4, r0
   1ab0c:	mov	r5, r3
   1ab10:	bl	12a60 <memset@plt>
   1ab14:	cmp	r6, #0
   1ab18:	moveq	r3, #1
   1ab1c:	addeq	r7, r4, #188	; 0xbc
   1ab20:	ldreq	r6, [pc, #40]	; 1ab50 <flatcc_builder_custom_init@@Base+0x5c>
   1ab24:	str	r7, [r4, #36]	; 0x24
   1ab28:	str	r6, [r4, #44]	; 0x2c
   1ab2c:	mov	r0, #0
   1ab30:	streq	r3, [r4, #184]	; 0xb8
   1ab34:	ldr	r3, [pc, #24]	; 1ab54 <flatcc_builder_custom_init@@Base+0x60>
   1ab38:	cmp	r5, #0
   1ab3c:	moveq	r5, r3
   1ab40:	ldr	r3, [sp, #24]
   1ab44:	str	r5, [r4, #48]	; 0x30
   1ab48:	str	r3, [r4, #40]	; 0x28
   1ab4c:	pop	{r4, r5, r6, r7, r8, pc}
   1ab50:	ldrdeq	sp, [r1], -r4
   1ab54:	andeq	sl, r1, r0, lsl #9

0001ab58 <flatcc_builder_init@@Base>:
   1ab58:	push	{r4, lr}
   1ab5c:	mov	r2, #232	; 0xe8
   1ab60:	mov	r4, r0
   1ab64:	mov	r1, #0
   1ab68:	bl	12a60 <memset@plt>
   1ab6c:	mov	r3, #1
   1ab70:	str	r3, [r4, #184]	; 0xb8
   1ab74:	ldr	r3, [pc, #24]	; 1ab94 <flatcc_builder_init@@Base+0x3c>
   1ab78:	mov	r0, #0
   1ab7c:	str	r3, [r4, #48]	; 0x30
   1ab80:	add	r3, r4, #188	; 0xbc
   1ab84:	str	r3, [r4, #36]	; 0x24
   1ab88:	ldr	r3, [pc, #8]	; 1ab98 <flatcc_builder_init@@Base+0x40>
   1ab8c:	str	r3, [r4, #44]	; 0x2c
   1ab90:	pop	{r4, pc}
   1ab94:	andeq	sl, r1, r0, lsl #9
   1ab98:	ldrdeq	sp, [r1], -r4

0001ab9c <flatcc_builder_custom_reset@@Base>:
   1ab9c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aba0:	mov	r6, #0
   1aba4:	mov	r4, r0
   1aba8:	mov	r7, r1
   1abac:	mov	r8, r2
   1abb0:	mov	r5, r0
   1abb4:	mov	r9, #1
   1abb8:	mov	sl, r6
   1abbc:	ldr	r3, [r5, #52]	; 0x34
   1abc0:	add	r1, r5, #52	; 0x34
   1abc4:	cmp	r3, #0
   1abc8:	beq	1aca8 <flatcc_builder_custom_reset@@Base+0x10c>
   1abcc:	cmp	r6, #5
   1abd0:	cmpne	r8, #0
   1abd4:	bne	1ac80 <flatcc_builder_custom_reset@@Base+0xe4>
   1abd8:	ldr	r2, [r5, #56]	; 0x38
   1abdc:	mov	r1, sl
   1abe0:	ldr	r0, [r5, #52]	; 0x34
   1abe4:	bl	12a60 <memset@plt>
   1abe8:	add	r6, r6, #1
   1abec:	cmp	r6, #8
   1abf0:	add	r5, r5, #8
   1abf4:	bne	1abbc <flatcc_builder_custom_reset@@Base+0x20>
   1abf8:	ldr	r2, [r4, #124]	; 0x7c
   1abfc:	mov	r3, #0
   1ac00:	cmp	r2, r3
   1ac04:	movne	r2, #16
   1ac08:	strne	r2, [r4, #124]	; 0x7c
   1ac0c:	ldr	r2, [r4, #60]	; 0x3c
   1ac10:	ldr	r0, [r4, #184]	; 0xb8
   1ac14:	str	r2, [r4, #16]
   1ac18:	ldr	r2, [r4, #76]	; 0x4c
   1ac1c:	cmp	r7, #0
   1ac20:	str	r2, [r4]
   1ac24:	ldr	r2, [r4, #52]	; 0x34
   1ac28:	strne	r3, [r4, #172]	; 0xac
   1ac2c:	strne	r3, [r4, #176]	; 0xb0
   1ac30:	strne	r3, [r4, #180]	; 0xb4
   1ac34:	cmp	r0, #0
   1ac38:	str	r3, [r4, #120]	; 0x78
   1ac3c:	strh	r3, [r4, #128]	; 0x80
   1ac40:	str	r3, [r4, #136]	; 0x88
   1ac44:	str	r3, [r4, #140]	; 0x8c
   1ac48:	str	r3, [r4, #156]	; 0x9c
   1ac4c:	str	r3, [r4, #160]	; 0xa0
   1ac50:	str	r3, [r4, #20]
   1ac54:	str	r3, [r4, #24]
   1ac58:	str	r3, [r4, #148]	; 0x94
   1ac5c:	str	r3, [r4, #152]	; 0x98
   1ac60:	str	r2, [r4, #4]
   1ac64:	str	r3, [r4, #32]
   1ac68:	beq	1ac78 <flatcc_builder_custom_reset@@Base+0xdc>
   1ac6c:	add	r0, r4, #188	; 0xbc
   1ac70:	bl	1d1cc <flatcc_emitter_reset@@Base>
   1ac74:	mov	r0, #0
   1ac78:	add	sp, sp, #12
   1ac7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac80:	str	r6, [sp]
   1ac84:	ldr	fp, [r4, #48]	; 0x30
   1ac88:	mov	r3, r9
   1ac8c:	mov	r2, #1
   1ac90:	ldr	r0, [r4, #40]	; 0x28
   1ac94:	blx	fp
   1ac98:	cmp	r0, #0
   1ac9c:	beq	1abd8 <flatcc_builder_custom_reset@@Base+0x3c>
   1aca0:	mvn	r0, #0
   1aca4:	b	1ac78 <flatcc_builder_custom_reset@@Base+0xdc>
   1aca8:	ldr	r3, [r5, #56]	; 0x38
   1acac:	cmp	r3, #0
   1acb0:	beq	1abe8 <flatcc_builder_custom_reset@@Base+0x4c>
   1acb4:	ldr	r3, [pc, #12]	; 1acc8 <flatcc_builder_custom_reset@@Base+0x12c>
   1acb8:	ldr	r2, [pc, #12]	; 1accc <flatcc_builder_custom_reset@@Base+0x130>
   1acbc:	ldr	r1, [pc, #12]	; 1acd0 <flatcc_builder_custom_reset@@Base+0x134>
   1acc0:	ldr	r0, [pc, #12]	; 1acd4 <flatcc_builder_custom_reset@@Base+0x138>
   1acc4:	bl	12ab4 <__assert_fail@plt>
   1acc8:	andeq	r1, r2, pc, asr sl
   1accc:			; <UNDEFINED> instruction: 0x000001b2
   1acd0:	strdeq	r1, [r2], -sp
   1acd4:	andeq	r1, r2, sl, ror pc

0001acd8 <flatcc_builder_reset@@Base>:
   1acd8:	mov	r2, #0
   1acdc:	mov	r1, r2
   1ace0:	b	1ab9c <flatcc_builder_custom_reset@@Base>

0001ace4 <flatcc_builder_clear@@Base>:
   1ace4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1ace8:	mov	r5, #0
   1acec:	mov	r4, r0
   1acf0:	add	r6, r0, #52	; 0x34
   1acf4:	mov	r8, r5
   1acf8:	str	r5, [sp]
   1acfc:	mov	r1, r6
   1ad00:	ldr	r7, [r4, #48]	; 0x30
   1ad04:	mov	r3, r8
   1ad08:	mov	r2, #0
   1ad0c:	ldr	r0, [r4, #40]	; 0x28
   1ad10:	add	r5, r5, #1
   1ad14:	blx	r7
   1ad18:	cmp	r5, #8
   1ad1c:	add	r6, r6, #8
   1ad20:	bne	1acf8 <flatcc_builder_clear@@Base+0x14>
   1ad24:	ldr	r3, [r4, #184]	; 0xb8
   1ad28:	cmp	r3, #0
   1ad2c:	beq	1ad38 <flatcc_builder_clear@@Base+0x54>
   1ad30:	add	r0, r4, #188	; 0xbc
   1ad34:	bl	1d27c <flatcc_emitter_clear@@Base>
   1ad38:	mov	r2, #232	; 0xe8
   1ad3c:	mov	r1, #0
   1ad40:	mov	r0, r4
   1ad44:	add	sp, sp, #8
   1ad48:	pop	{r4, r5, r6, r7, r8, lr}
   1ad4c:	b	12a60 <memset@plt>

0001ad50 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1ad50:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ad54:	add	r4, r1, #3
   1ad58:	bic	r4, r4, #3
   1ad5c:	add	r4, r4, #4
   1ad60:	mov	r7, #0
   1ad64:	str	r7, [sp]
   1ad68:	mov	r3, r4
   1ad6c:	ldr	r2, [r0, #228]	; 0xe4
   1ad70:	mov	r1, #7
   1ad74:	mov	r6, r0
   1ad78:	bl	1a578 <flatcc_builder_default_alloc@@Base+0xf8>
   1ad7c:	subs	r5, r0, #0
   1ad80:	moveq	r0, r5
   1ad84:	beq	1adb4 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   1ad88:	mov	r2, r4
   1ad8c:	mov	r1, r7
   1ad90:	bl	12a60 <memset@plt>
   1ad94:	ldr	r3, [r6, #224]	; 0xe0
   1ad98:	add	r0, r5, #4
   1ad9c:	str	r3, [r5]
   1ada0:	ldr	r1, [r6, #228]	; 0xe4
   1ada4:	add	r3, r1, #4
   1ada8:	add	r4, r4, r1
   1adac:	str	r3, [r6, #224]	; 0xe0
   1adb0:	str	r4, [r6, #228]	; 0xe4
   1adb4:	add	sp, sp, #12
   1adb8:	pop	{r4, r5, r6, r7, pc}

0001adbc <flatcc_builder_enter_user_frame@@Base>:
   1adbc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1adc0:	add	r4, r1, #3
   1adc4:	bic	r4, r4, #3
   1adc8:	add	r4, r4, #4
   1adcc:	mov	r7, #0
   1add0:	str	r7, [sp]
   1add4:	mov	r3, r4
   1add8:	ldr	r2, [r0, #228]	; 0xe4
   1addc:	mov	r1, #7
   1ade0:	mov	r6, r0
   1ade4:	bl	1a578 <flatcc_builder_default_alloc@@Base+0xf8>
   1ade8:	subs	r5, r0, #0
   1adec:	moveq	r0, r5
   1adf0:	beq	1ae1c <flatcc_builder_enter_user_frame@@Base+0x60>
   1adf4:	mov	r2, r4
   1adf8:	mov	r1, r7
   1adfc:	bl	12a60 <memset@plt>
   1ae00:	ldr	r3, [r6, #224]	; 0xe0
   1ae04:	str	r3, [r5]
   1ae08:	ldr	r1, [r6, #228]	; 0xe4
   1ae0c:	add	r0, r1, #4
   1ae10:	add	r4, r4, r1
   1ae14:	str	r0, [r6, #224]	; 0xe0
   1ae18:	str	r4, [r6, #228]	; 0xe4
   1ae1c:	add	sp, sp, #12
   1ae20:	pop	{r4, r5, r6, r7, pc}

0001ae24 <flatcc_builder_exit_user_frame@@Base>:
   1ae24:	ldr	r3, [r0, #224]	; 0xe0
   1ae28:	cmp	r3, #0
   1ae2c:	bne	1ae48 <flatcc_builder_exit_user_frame@@Base+0x24>
   1ae30:	push	{r4, lr}
   1ae34:	ldr	r3, [pc, #44]	; 1ae68 <flatcc_builder_exit_user_frame@@Base+0x44>
   1ae38:	ldr	r2, [pc, #44]	; 1ae6c <flatcc_builder_exit_user_frame@@Base+0x48>
   1ae3c:	ldr	r1, [pc, #44]	; 1ae70 <flatcc_builder_exit_user_frame@@Base+0x4c>
   1ae40:	ldr	r0, [pc, #44]	; 1ae74 <flatcc_builder_exit_user_frame@@Base+0x50>
   1ae44:	bl	12ab4 <__assert_fail@plt>
   1ae48:	ldr	r1, [r0, #108]	; 0x6c
   1ae4c:	mov	r2, r0
   1ae50:	add	r1, r1, r3
   1ae54:	sub	r3, r3, #4
   1ae58:	str	r3, [r0, #228]	; 0xe4
   1ae5c:	ldr	r0, [r1, #-4]
   1ae60:	str	r0, [r2, #224]	; 0xe0
   1ae64:	bx	lr
   1ae68:	andeq	r1, r2, fp, ror sl
   1ae6c:	andeq	r0, r0, lr, lsl r2
   1ae70:	strdeq	r1, [r2], -sp
   1ae74:	andeq	r1, r2, ip, lsl #31

0001ae78 <flatcc_builder_exit_user_frame_at@@Base>:
   1ae78:	ldr	r2, [r0, #224]	; 0xe0
   1ae7c:	cmp	r2, r1
   1ae80:	bcs	1ae9c <flatcc_builder_exit_user_frame_at@@Base+0x24>
   1ae84:	push	{r4, lr}
   1ae88:	ldr	r3, [pc, #20]	; 1aea4 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   1ae8c:	ldr	r2, [pc, #20]	; 1aea8 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   1ae90:	ldr	r1, [pc, #20]	; 1aeac <flatcc_builder_exit_user_frame_at@@Base+0x34>
   1ae94:	ldr	r0, [pc, #20]	; 1aeb0 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   1ae98:	bl	12ab4 <__assert_fail@plt>
   1ae9c:	str	r1, [r0, #224]	; 0xe0
   1aea0:	b	1ae24 <flatcc_builder_exit_user_frame@@Base>
   1aea4:	muleq	r2, sl, sl
   1aea8:	andeq	r0, r0, r7, lsr #4
   1aeac:	strdeq	r1, [r2], -sp
   1aeb0:	andeq	r1, r2, r5, lsr #31

0001aeb4 <flatcc_builder_get_current_user_frame@@Base>:
   1aeb4:	ldr	r0, [r0, #224]	; 0xe0
   1aeb8:	bx	lr

0001aebc <flatcc_builder_get_user_frame_ptr@@Base>:
   1aebc:	ldr	r0, [r0, #108]	; 0x6c
   1aec0:	add	r0, r0, r1
   1aec4:	bx	lr

0001aec8 <flatcc_builder_embed_buffer@@Base>:
   1aec8:	push	{r4, r5, r6, lr}
   1aecc:	mov	r4, r3
   1aed0:	ldr	r3, [r0, #152]	; 0x98
   1aed4:	sub	sp, sp, #80	; 0x50
   1aed8:	adds	r3, r3, #0
   1aedc:	movne	r3, #1
   1aee0:	mov	r6, r2
   1aee4:	mov	r2, r1
   1aee8:	add	r1, sp, #96	; 0x60
   1aeec:	mov	r5, r0
   1aef0:	bl	1a7c8 <flatcc_builder_default_alloc@@Base+0x348>
   1aef4:	cmp	r0, #0
   1aef8:	movne	r0, #0
   1aefc:	bne	1afd0 <flatcc_builder_embed_buffer@@Base+0x108>
   1af00:	ldr	r3, [sp, #100]	; 0x64
   1af04:	str	r0, [sp, #8]
   1af08:	tst	r3, #2
   1af0c:	ldr	r3, [r5, #136]	; 0x88
   1af10:	movne	r2, #4
   1af14:	moveq	r2, #0
   1af18:	sub	r3, r3, r4
   1af1c:	sub	r3, r3, r2
   1af20:	ldrh	r2, [sp, #96]	; 0x60
   1af24:	str	r0, [sp, #12]
   1af28:	sub	r2, r2, #1
   1af2c:	and	r3, r3, r2
   1af30:	add	r2, r4, r3
   1af34:	str	r2, [sp, #4]
   1af38:	ldr	r2, [r5, #152]	; 0x98
   1af3c:	cmp	r2, #0
   1af40:	beq	1af60 <flatcc_builder_embed_buffer@@Base+0x98>
   1af44:	mov	r2, #4
   1af48:	add	r1, sp, r2
   1af4c:	str	r2, [sp, #8]
   1af50:	str	r2, [sp, #20]
   1af54:	mov	r2, #1
   1af58:	str	r1, [sp, #16]
   1af5c:	str	r2, [sp, #12]
   1af60:	cmp	r4, #0
   1af64:	beq	1af90 <flatcc_builder_embed_buffer@@Base+0xc8>
   1af68:	ldr	r2, [sp, #8]
   1af6c:	add	r1, sp, #80	; 0x50
   1af70:	add	r2, r2, r4
   1af74:	str	r2, [sp, #8]
   1af78:	ldr	r2, [sp, #12]
   1af7c:	add	r2, r2, #1
   1af80:	str	r2, [sp, #12]
   1af84:	add	r1, r1, r2, lsl #3
   1af88:	str	r6, [r1, #-72]	; 0xffffffb8
   1af8c:	str	r4, [r1, #-68]	; 0xffffffbc
   1af90:	cmp	r3, #0
   1af94:	beq	1afc4 <flatcc_builder_embed_buffer@@Base+0xfc>
   1af98:	ldr	r2, [sp, #8]
   1af9c:	add	r1, sp, #80	; 0x50
   1afa0:	add	r2, r2, r3
   1afa4:	str	r2, [sp, #8]
   1afa8:	ldr	r2, [sp, #12]
   1afac:	ldr	r0, [pc, #36]	; 1afd8 <flatcc_builder_embed_buffer@@Base+0x110>
   1afb0:	add	r2, r2, #1
   1afb4:	str	r2, [sp, #12]
   1afb8:	add	r1, r1, r2, lsl #3
   1afbc:	str	r0, [r1, #-72]	; 0xffffffb8
   1afc0:	str	r3, [r1, #-68]	; 0xffffffbc
   1afc4:	add	r1, sp, #8
   1afc8:	mov	r0, r5
   1afcc:	bl	1a878 <flatcc_builder_default_alloc@@Base+0x3f8>
   1afd0:	add	sp, sp, #80	; 0x50
   1afd4:	pop	{r4, r5, r6, pc}
   1afd8:	andeq	r1, r2, r7, lsl r8

0001afdc <flatcc_builder_create_buffer@@Base>:
   1afdc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1afe0:	sub	sp, sp, #92	; 0x5c
   1afe4:	mov	r7, #0
   1afe8:	ldr	r8, [sp, #124]	; 0x7c
   1afec:	mov	r9, r1
   1aff0:	and	r6, r8, #1
   1aff4:	mov	r5, r3
   1aff8:	add	r1, sp, #120	; 0x78
   1affc:	mov	r3, r6
   1b000:	mov	r4, r0
   1b004:	str	r7, [sp, #12]
   1b008:	bl	1a7c8 <flatcc_builder_default_alloc@@Base+0x348>
   1b00c:	cmp	r0, r7
   1b010:	bne	1b184 <flatcc_builder_create_buffer@@Base+0x1a8>
   1b014:	ldrh	r3, [r4, #128]	; 0x80
   1b018:	ldrh	r1, [sp, #120]	; 0x78
   1b01c:	ldr	r2, [r4, #136]	; 0x88
   1b020:	and	r8, r8, #2
   1b024:	cmp	r3, r1
   1b028:	strhcc	r1, [r4, #128]	; 0x80
   1b02c:	cmp	r9, #0
   1b030:	sub	r1, r1, #1
   1b034:	ldrne	r3, [r9]
   1b038:	strne	r3, [sp, #12]
   1b03c:	ldr	r0, [sp, #12]
   1b040:	sub	r3, r2, #4
   1b044:	cmp	r0, #0
   1b048:	movne	r0, #4
   1b04c:	moveq	r0, #0
   1b050:	cmp	r8, #0
   1b054:	moveq	ip, #0
   1b058:	movne	ip, #4
   1b05c:	sub	r3, r3, r0
   1b060:	sub	r3, r3, ip
   1b064:	and	r3, r3, r1
   1b068:	moveq	lr, r6
   1b06c:	mov	r1, #0
   1b070:	orrne	lr, r6, #1
   1b074:	cmp	lr, r1
   1b078:	str	r1, [sp, #16]
   1b07c:	str	r1, [sp, #20]
   1b080:	beq	1b0a0 <flatcc_builder_create_buffer@@Base+0xc4>
   1b084:	mov	r1, #4
   1b088:	str	r1, [sp, #16]
   1b08c:	add	ip, sp, #8
   1b090:	str	r1, [sp, #28]
   1b094:	mov	r1, #1
   1b098:	str	ip, [sp, #24]
   1b09c:	str	r1, [sp, #20]
   1b0a0:	ldr	r7, [sp, #20]
   1b0a4:	add	r8, sp, #88	; 0x58
   1b0a8:	add	r1, r7, #1
   1b0ac:	ldr	ip, [sp, #16]
   1b0b0:	add	r8, r8, r1, lsl #3
   1b0b4:	add	r9, sp, #4
   1b0b8:	add	ip, ip, #4
   1b0bc:	str	r9, [r8, #-72]	; 0xffffffb8
   1b0c0:	cmp	r0, #0
   1b0c4:	mov	r9, #4
   1b0c8:	str	ip, [sp, #16]
   1b0cc:	str	r9, [r8, #-68]	; 0xffffffbc
   1b0d0:	str	r1, [sp, #20]
   1b0d4:	beq	1b100 <flatcc_builder_create_buffer@@Base+0x124>
   1b0d8:	add	ip, r0, ip
   1b0dc:	add	r1, r7, #2
   1b0e0:	str	ip, [sp, #16]
   1b0e4:	add	ip, sp, #88	; 0x58
   1b0e8:	add	r1, ip, r1, lsl #3
   1b0ec:	add	r7, r7, #2
   1b0f0:	add	ip, sp, #12
   1b0f4:	str	ip, [r1, #-72]	; 0xffffffb8
   1b0f8:	str	r0, [r1, #-68]	; 0xffffffbc
   1b0fc:	str	r7, [sp, #20]
   1b100:	cmp	r3, #0
   1b104:	beq	1b134 <flatcc_builder_create_buffer@@Base+0x158>
   1b108:	ldr	r1, [sp, #16]
   1b10c:	add	r0, sp, #88	; 0x58
   1b110:	add	r1, r1, r3
   1b114:	str	r1, [sp, #16]
   1b118:	ldr	r1, [sp, #20]
   1b11c:	ldr	ip, [pc, #108]	; 1b190 <flatcc_builder_create_buffer@@Base+0x1b4>
   1b120:	add	r1, r1, #1
   1b124:	str	r1, [sp, #20]
   1b128:	add	r0, r0, r1, lsl #3
   1b12c:	str	ip, [r0, #-72]	; 0xffffffb8
   1b130:	str	r3, [r0, #-68]	; 0xffffffbc
   1b134:	cmp	r6, #0
   1b138:	ldr	r3, [sp, #16]
   1b13c:	add	r1, sp, #16
   1b140:	sub	r3, r2, r3
   1b144:	ldrne	r2, [r4, #144]	; 0x90
   1b148:	ldreq	r2, [r4, #140]	; 0x8c
   1b14c:	add	r3, r3, lr, lsl #2
   1b150:	sub	r2, r2, r3
   1b154:	mov	r0, r4
   1b158:	sub	r3, r5, r3
   1b15c:	str	r2, [sp, #8]
   1b160:	str	r3, [sp, #4]
   1b164:	bl	1a878 <flatcc_builder_default_alloc@@Base+0x3f8>
   1b168:	cmp	r0, #0
   1b16c:	bne	1b188 <flatcc_builder_create_buffer@@Base+0x1ac>
   1b170:	ldr	r3, [pc, #28]	; 1b194 <flatcc_builder_create_buffer@@Base+0x1b8>
   1b174:	mov	r2, #772	; 0x304
   1b178:	ldr	r1, [pc, #24]	; 1b198 <flatcc_builder_create_buffer@@Base+0x1bc>
   1b17c:	ldr	r0, [pc, #24]	; 1b19c <flatcc_builder_create_buffer@@Base+0x1c0>
   1b180:	bl	12ab4 <__assert_fail@plt>
   1b184:	mov	r0, r7
   1b188:	add	sp, sp, #92	; 0x5c
   1b18c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b190:	andeq	r1, r2, r7, lsl r8
   1b194:			; <UNDEFINED> instruction: 0x00021abc
   1b198:	strdeq	r1, [r2], -sp
   1b19c:	andeq	r1, r2, sl, ror #30

0001b1a0 <flatcc_builder_create_struct@@Base>:
   1b1a0:	cmp	r3, #0
   1b1a4:	push	{lr}		; (str lr, [sp, #-4]!)
   1b1a8:	sub	sp, sp, #76	; 0x4c
   1b1ac:	bne	1b1c4 <flatcc_builder_create_struct@@Base+0x24>
   1b1b0:	ldr	r3, [pc, #144]	; 1b248 <flatcc_builder_create_struct@@Base+0xa8>
   1b1b4:	ldr	r2, [pc, #144]	; 1b24c <flatcc_builder_create_struct@@Base+0xac>
   1b1b8:	ldr	r1, [pc, #144]	; 1b250 <flatcc_builder_create_struct@@Base+0xb0>
   1b1bc:	ldr	r0, [pc, #144]	; 1b254 <flatcc_builder_create_struct@@Base+0xb4>
   1b1c0:	bl	12ab4 <__assert_fail@plt>
   1b1c4:	ldrh	ip, [r0, #128]	; 0x80
   1b1c8:	cmp	ip, r3
   1b1cc:	ldr	ip, [r0, #136]	; 0x88
   1b1d0:	strhcc	r3, [r0, #128]	; 0x80
   1b1d4:	sub	ip, ip, r2
   1b1d8:	sub	r3, r3, #1
   1b1dc:	and	r3, r3, ip
   1b1e0:	mov	ip, #0
   1b1e4:	cmp	r2, ip
   1b1e8:	strne	r2, [sp, #12]
   1b1ec:	str	ip, [sp]
   1b1f0:	strne	r2, [sp]
   1b1f4:	movne	r2, #1
   1b1f8:	str	ip, [sp, #4]
   1b1fc:	strne	r1, [sp, #8]
   1b200:	strne	r2, [sp, #4]
   1b204:	cmp	r3, #0
   1b208:	beq	1b238 <flatcc_builder_create_struct@@Base+0x98>
   1b20c:	ldr	r2, [sp]
   1b210:	add	r1, sp, #72	; 0x48
   1b214:	add	r2, r2, r3
   1b218:	str	r2, [sp]
   1b21c:	ldr	r2, [sp, #4]
   1b220:	ldr	ip, [pc, #48]	; 1b258 <flatcc_builder_create_struct@@Base+0xb8>
   1b224:	add	r2, r2, #1
   1b228:	str	r2, [sp, #4]
   1b22c:	add	r1, r1, r2, lsl #3
   1b230:	str	ip, [r1, #-72]	; 0xffffffb8
   1b234:	str	r3, [r1, #-68]	; 0xffffffbc
   1b238:	mov	r1, sp
   1b23c:	bl	1a878 <flatcc_builder_default_alloc@@Base+0x3f8>
   1b240:	add	sp, sp, #76	; 0x4c
   1b244:	pop	{pc}		; (ldr pc, [sp], #4)
   1b248:	ldrdeq	r1, [r2], -r9
   1b24c:	andeq	r0, r0, pc, lsl #6
   1b250:	strdeq	r1, [r2], -sp
   1b254:	andeq	r1, r2, r4, asr #31
   1b258:	andeq	r1, r2, r7, lsl r8

0001b25c <flatcc_builder_start_buffer@@Base>:
   1b25c:	push	{r4, r5, r6, r7, r8, lr}
   1b260:	mov	r5, r1
   1b264:	ldrh	r1, [r0, #128]	; 0x80
   1b268:	mov	r4, r0
   1b26c:	mov	r7, r2
   1b270:	mov	r6, r3
   1b274:	bl	1a5e8 <flatcc_builder_default_alloc@@Base+0x168>
   1b278:	cmp	r0, #0
   1b27c:	bne	1b2f0 <flatcc_builder_start_buffer@@Base+0x94>
   1b280:	ldrh	r3, [r4, #132]	; 0x84
   1b284:	ldr	ip, [r4, #32]
   1b288:	mov	r1, #1
   1b28c:	strh	r1, [r4, #128]	; 0x80
   1b290:	strh	r3, [ip, #34]	; 0x22
   1b294:	ldrh	r3, [r4, #164]	; 0xa4
   1b298:	strh	r7, [r4, #132]	; 0x84
   1b29c:	cmp	r5, #0
   1b2a0:	strh	r3, [ip, #32]
   1b2a4:	ldr	r3, [r4, #144]	; 0x90
   1b2a8:	strh	r6, [r4, #164]	; 0xa4
   1b2ac:	str	r3, [ip, #20]
   1b2b0:	ldr	r3, [r4, #152]	; 0x98
   1b2b4:	str	r3, [ip, #28]
   1b2b8:	ldr	r3, [r4, #136]	; 0x88
   1b2bc:	str	r3, [r4, #144]	; 0x90
   1b2c0:	ldr	r3, [r4, #148]	; 0x94
   1b2c4:	str	r3, [r4, #152]	; 0x98
   1b2c8:	add	r2, r3, r1
   1b2cc:	ldr	r3, [r4, #168]	; 0xa8
   1b2d0:	str	r2, [r4, #148]	; 0x94
   1b2d4:	str	r3, [ip, #16]
   1b2d8:	ldr	r3, [pc, #24]	; 1b2f8 <flatcc_builder_start_buffer@@Base+0x9c>
   1b2dc:	moveq	r5, r3
   1b2e0:	ldr	r3, [r5]
   1b2e4:	str	r3, [r4, #168]	; 0xa8
   1b2e8:	strh	r1, [ip, #14]
   1b2ec:	pop	{r4, r5, r6, r7, r8, pc}
   1b2f0:	mvn	r0, #0
   1b2f4:	pop	{r4, r5, r6, r7, r8, pc}
   1b2f8:	andeq	r1, r2, r7, lsl r8

0001b2fc <flatcc_builder_end_buffer@@Base>:
   1b2fc:	push	{r0, r1, r2, r4, r5, lr}
   1b300:	mov	r4, r0
   1b304:	ldrh	r0, [r0, #164]	; 0xa4
   1b308:	ldr	r2, [r4, #152]	; 0x98
   1b30c:	and	r0, r0, #2
   1b310:	cmp	r2, #0
   1b314:	orrne	r0, r0, #1
   1b318:	ldr	r2, [r4, #32]
   1b31c:	ldrh	r2, [r2, #14]
   1b320:	cmp	r2, #1
   1b324:	beq	1b33c <flatcc_builder_end_buffer@@Base+0x40>
   1b328:	ldr	r3, [pc, #120]	; 1b3a8 <flatcc_builder_end_buffer@@Base+0xac>
   1b32c:	ldr	r2, [pc, #120]	; 1b3ac <flatcc_builder_end_buffer@@Base+0xb0>
   1b330:	ldr	r1, [pc, #120]	; 1b3b0 <flatcc_builder_end_buffer@@Base+0xb4>
   1b334:	ldr	r0, [pc, #120]	; 1b3b4 <flatcc_builder_end_buffer@@Base+0xb8>
   1b338:	bl	12ab4 <__assert_fail@plt>
   1b33c:	ldrh	r2, [r4, #132]	; 0x84
   1b340:	mov	r3, r1
   1b344:	ldrh	r1, [r4, #128]	; 0x80
   1b348:	str	r0, [sp, #4]
   1b34c:	mov	r0, r4
   1b350:	cmp	r1, r2
   1b354:	strhcc	r2, [r4, #128]	; 0x80
   1b358:	ldrh	r1, [r4, #128]	; 0x80
   1b35c:	str	r1, [sp]
   1b360:	add	r1, r4, #168	; 0xa8
   1b364:	bl	1afdc <flatcc_builder_create_buffer@@Base>
   1b368:	subs	r5, r0, #0
   1b36c:	beq	1b39c <flatcc_builder_end_buffer@@Base+0xa0>
   1b370:	ldr	r3, [r4, #32]
   1b374:	mov	r0, r4
   1b378:	ldr	r2, [r3, #20]
   1b37c:	str	r2, [r4, #144]	; 0x90
   1b380:	ldr	r2, [r3, #28]
   1b384:	str	r2, [r4, #152]	; 0x98
   1b388:	ldr	r2, [r3, #16]
   1b38c:	str	r2, [r4, #168]	; 0xa8
   1b390:	ldrh	r3, [r3, #32]
   1b394:	strh	r3, [r4, #164]	; 0xa4
   1b398:	bl	1a374 <time_struct_buffer@@Base+0x154>
   1b39c:	mov	r0, r5
   1b3a0:	add	sp, sp, #12
   1b3a4:	pop	{r4, r5, pc}
   1b3a8:	strdeq	r1, [r2], -r6
   1b3ac:	andeq	r0, r0, r6, asr #6
   1b3b0:	strdeq	r1, [r2], -sp
   1b3b4:	andeq	r1, r2, pc, asr #31

0001b3b8 <flatcc_builder_start_struct@@Base>:
   1b3b8:	push	{r4, r5, r6, lr}
   1b3bc:	mov	r5, r1
   1b3c0:	mov	r1, r2
   1b3c4:	mov	r4, r0
   1b3c8:	bl	1a5e8 <flatcc_builder_default_alloc@@Base+0x168>
   1b3cc:	cmp	r0, #0
   1b3d0:	bne	1b3fc <flatcc_builder_start_struct@@Base+0x44>
   1b3d4:	ldr	r3, [r4, #32]
   1b3d8:	mov	r2, #2
   1b3dc:	mov	r0, r4
   1b3e0:	mvn	r1, #3
   1b3e4:	strh	r2, [r3, #14]
   1b3e8:	bl	1a2ac <time_struct_buffer@@Base+0x8c>
   1b3ec:	mov	r1, r5
   1b3f0:	mov	r0, r4
   1b3f4:	pop	{r4, r5, r6, lr}
   1b3f8:	b	1a32c <time_struct_buffer@@Base+0x10c>
   1b3fc:	mov	r0, #0
   1b400:	pop	{r4, r5, r6, pc}

0001b404 <flatcc_builder_struct_edit@@Base>:
   1b404:	ldr	r0, [r0, #16]
   1b408:	bx	lr

0001b40c <flatcc_builder_end_struct@@Base>:
   1b40c:	ldr	r3, [r0, #32]
   1b410:	push	{r4, r5, r6, lr}
   1b414:	ldrh	r3, [r3, #14]
   1b418:	cmp	r3, #2
   1b41c:	beq	1b434 <flatcc_builder_end_struct@@Base+0x28>
   1b420:	ldr	r3, [pc, #56]	; 1b460 <flatcc_builder_end_struct@@Base+0x54>
   1b424:	mov	r2, #872	; 0x368
   1b428:	ldr	r1, [pc, #52]	; 1b464 <flatcc_builder_end_struct@@Base+0x58>
   1b42c:	ldr	r0, [pc, #52]	; 1b468 <flatcc_builder_end_struct@@Base+0x5c>
   1b430:	bl	12ab4 <__assert_fail@plt>
   1b434:	ldrh	r3, [r0, #130]	; 0x82
   1b438:	ldr	r2, [r0, #20]
   1b43c:	ldr	r1, [r0, #16]
   1b440:	mov	r4, r0
   1b444:	bl	1b1a0 <flatcc_builder_create_struct@@Base>
   1b448:	subs	r5, r0, #0
   1b44c:	beq	1b458 <flatcc_builder_end_struct@@Base+0x4c>
   1b450:	mov	r0, r4
   1b454:	bl	1a374 <time_struct_buffer@@Base+0x154>
   1b458:	mov	r0, r5
   1b45c:	pop	{r4, r5, r6, pc}
   1b460:	andeq	r1, r2, r0, lsl fp
   1b464:	strdeq	r1, [r2], -sp
   1b468:	strdeq	r1, [r2], -fp

0001b46c <flatcc_builder_extend_vector@@Base>:
   1b46c:	push	{r4, r5, r6, lr}
   1b470:	mov	r4, r0
   1b474:	ldr	r0, [r0, #32]
   1b478:	mov	r5, r1
   1b47c:	ldr	r2, [r0, #24]
   1b480:	bl	1a8f8 <flatcc_builder_default_alloc@@Base+0x478>
   1b484:	cmp	r0, #0
   1b488:	bne	1b4a4 <flatcc_builder_extend_vector@@Base+0x38>
   1b48c:	ldr	r3, [r4, #32]
   1b490:	mov	r0, r4
   1b494:	ldr	r1, [r3, #16]
   1b498:	mul	r1, r1, r5
   1b49c:	pop	{r4, r5, r6, lr}
   1b4a0:	b	1a32c <time_struct_buffer@@Base+0x10c>
   1b4a4:	mov	r0, #0
   1b4a8:	pop	{r4, r5, r6, pc}

0001b4ac <flatcc_builder_vector_push@@Base>:
   1b4ac:	ldr	r3, [r0, #32]
   1b4b0:	push	{r4, lr}
   1b4b4:	ldrh	r2, [r3, #14]
   1b4b8:	cmp	r2, #4
   1b4bc:	beq	1b4d4 <flatcc_builder_vector_push@@Base+0x28>
   1b4c0:	ldr	r3, [pc, #64]	; 1b508 <flatcc_builder_vector_push@@Base+0x5c>
   1b4c4:	ldr	r2, [pc, #64]	; 1b50c <flatcc_builder_vector_push@@Base+0x60>
   1b4c8:	ldr	r1, [pc, #64]	; 1b510 <flatcc_builder_vector_push@@Base+0x64>
   1b4cc:	ldr	r0, [pc, #64]	; 1b514 <flatcc_builder_vector_push@@Base+0x68>
   1b4d0:	bl	12ab4 <__assert_fail@plt>
   1b4d4:	ldr	r2, [r3, #20]
   1b4d8:	ldr	ip, [r3, #24]
   1b4dc:	cmp	r2, ip
   1b4e0:	ldrhi	r3, [pc, #32]	; 1b508 <flatcc_builder_vector_push@@Base+0x5c>
   1b4e4:	movhi	r2, #908	; 0x38c
   1b4e8:	ldrhi	r1, [pc, #32]	; 1b510 <flatcc_builder_vector_push@@Base+0x64>
   1b4ec:	ldrhi	r0, [pc, #36]	; 1b518 <flatcc_builder_vector_push@@Base+0x6c>
   1b4f0:	bhi	1b4d0 <flatcc_builder_vector_push@@Base+0x24>
   1b4f4:	add	r2, r2, #1
   1b4f8:	str	r2, [r3, #20]
   1b4fc:	ldr	r2, [r3, #16]
   1b500:	pop	{r4, lr}
   1b504:	b	1a400 <time_struct_buffer@@Base+0x1e0>
   1b508:	andeq	r1, r2, sl, lsr #22
   1b50c:	andeq	r0, r0, fp, lsl #7
   1b510:	strdeq	r1, [r2], -sp
   1b514:	andeq	r2, r2, r7, lsr #32
   1b518:	andeq	r2, r2, r3, asr r0

0001b51c <flatcc_builder_append_vector@@Base>:
   1b51c:	push	{r4, r5, r6, lr}
   1b520:	mov	r4, r0
   1b524:	ldr	r0, [r0, #32]
   1b528:	ldrh	r3, [r0, #14]
   1b52c:	cmp	r3, #4
   1b530:	beq	1b548 <flatcc_builder_append_vector@@Base+0x2c>
   1b534:	ldr	r3, [pc, #76]	; 1b588 <flatcc_builder_append_vector@@Base+0x6c>
   1b538:	ldr	r2, [pc, #76]	; 1b58c <flatcc_builder_append_vector@@Base+0x70>
   1b53c:	ldr	r1, [pc, #76]	; 1b590 <flatcc_builder_append_vector@@Base+0x74>
   1b540:	ldr	r0, [pc, #76]	; 1b594 <flatcc_builder_append_vector@@Base+0x78>
   1b544:	bl	12ab4 <__assert_fail@plt>
   1b548:	mov	r5, r2
   1b54c:	mov	r6, r1
   1b550:	ldr	r2, [r0, #24]
   1b554:	mov	r1, r5
   1b558:	bl	1a8f8 <flatcc_builder_default_alloc@@Base+0x478>
   1b55c:	cmp	r0, #0
   1b560:	bne	1b580 <flatcc_builder_append_vector@@Base+0x64>
   1b564:	ldr	r3, [r4, #32]
   1b568:	mov	r1, r6
   1b56c:	mov	r0, r4
   1b570:	ldr	r2, [r3, #16]
   1b574:	mul	r2, r2, r5
   1b578:	pop	{r4, r5, r6, lr}
   1b57c:	b	1a400 <time_struct_buffer@@Base+0x1e0>
   1b580:	mov	r0, #0
   1b584:	pop	{r4, r5, r6, pc}
   1b588:	andeq	r1, r2, r5, asr #22
   1b58c:	muleq	r0, r3, r3
   1b590:	strdeq	r1, [r2], -sp
   1b594:	andeq	r2, r2, r7, lsr #32

0001b598 <flatcc_builder_extend_offset_vector@@Base>:
   1b598:	push	{r4, r5, r6, lr}
   1b59c:	mvn	r2, #-1073741824	; 0xc0000000
   1b5a0:	mov	r4, r0
   1b5a4:	ldr	r0, [r0, #32]
   1b5a8:	mov	r5, r1
   1b5ac:	bl	1a8f8 <flatcc_builder_default_alloc@@Base+0x478>
   1b5b0:	cmp	r0, #0
   1b5b4:	bne	1b5c8 <flatcc_builder_extend_offset_vector@@Base+0x30>
   1b5b8:	lsl	r1, r5, #2
   1b5bc:	mov	r0, r4
   1b5c0:	pop	{r4, r5, r6, lr}
   1b5c4:	b	1a32c <time_struct_buffer@@Base+0x10c>
   1b5c8:	mov	r0, #0
   1b5cc:	pop	{r4, r5, r6, pc}

0001b5d0 <flatcc_builder_offset_vector_push@@Base>:
   1b5d0:	ldr	r2, [r0, #32]
   1b5d4:	push	{r4, lr}
   1b5d8:	ldrh	r3, [r2, #14]
   1b5dc:	cmp	r3, #5
   1b5e0:	beq	1b5f8 <flatcc_builder_offset_vector_push@@Base+0x28>
   1b5e4:	ldr	r3, [pc, #64]	; 1b62c <flatcc_builder_offset_vector_push@@Base+0x5c>
   1b5e8:	ldr	r2, [pc, #64]	; 1b630 <flatcc_builder_offset_vector_push@@Base+0x60>
   1b5ec:	ldr	r1, [pc, #64]	; 1b634 <flatcc_builder_offset_vector_push@@Base+0x64>
   1b5f0:	ldr	r0, [pc, #64]	; 1b638 <flatcc_builder_offset_vector_push@@Base+0x68>
   1b5f4:	bl	12ab4 <__assert_fail@plt>
   1b5f8:	ldr	r3, [r2, #20]
   1b5fc:	cmn	r3, #-1073741823	; 0xc0000001
   1b600:	beq	1b624 <flatcc_builder_offset_vector_push@@Base+0x54>
   1b604:	add	r3, r3, #1
   1b608:	mov	r4, r1
   1b60c:	str	r3, [r2, #20]
   1b610:	mov	r1, #4
   1b614:	bl	1a32c <time_struct_buffer@@Base+0x10c>
   1b618:	cmp	r0, #0
   1b61c:	strne	r4, [r0]
   1b620:	pop	{r4, pc}
   1b624:	mov	r0, #0
   1b628:	pop	{r4, pc}
   1b62c:	andeq	r1, r2, r2, ror #22
   1b630:	andeq	r0, r0, r6, lsr #7
   1b634:	strdeq	r1, [r2], -sp
   1b638:	muleq	r2, r0, r0

0001b63c <flatcc_builder_append_offset_vector@@Base>:
   1b63c:	push	{r4, r5, r6, lr}
   1b640:	mov	r4, r0
   1b644:	ldr	r0, [r0, #32]
   1b648:	ldrh	r3, [r0, #14]
   1b64c:	cmp	r3, #5
   1b650:	beq	1b668 <flatcc_builder_append_offset_vector@@Base+0x2c>
   1b654:	ldr	r3, [pc, #68]	; 1b6a0 <flatcc_builder_append_offset_vector@@Base+0x64>
   1b658:	mov	r2, #948	; 0x3b4
   1b65c:	ldr	r1, [pc, #64]	; 1b6a4 <flatcc_builder_append_offset_vector@@Base+0x68>
   1b660:	ldr	r0, [pc, #64]	; 1b6a8 <flatcc_builder_append_offset_vector@@Base+0x6c>
   1b664:	bl	12ab4 <__assert_fail@plt>
   1b668:	mov	r5, r2
   1b66c:	mov	r6, r1
   1b670:	mvn	r2, #-1073741824	; 0xc0000000
   1b674:	mov	r1, r5
   1b678:	bl	1a8f8 <flatcc_builder_default_alloc@@Base+0x478>
   1b67c:	cmp	r0, #0
   1b680:	bne	1b698 <flatcc_builder_append_offset_vector@@Base+0x5c>
   1b684:	lsl	r2, r5, #2
   1b688:	mov	r1, r6
   1b68c:	mov	r0, r4
   1b690:	pop	{r4, r5, r6, lr}
   1b694:	b	1a400 <time_struct_buffer@@Base+0x1e0>
   1b698:	mov	r0, #0
   1b69c:	pop	{r4, r5, r6, pc}
   1b6a0:	andeq	r1, r2, r4, lsl #23
   1b6a4:	strdeq	r1, [r2], -sp
   1b6a8:	muleq	r2, r0, r0

0001b6ac <flatcc_builder_extend_string@@Base>:
   1b6ac:	push	{r4, r5, r6, lr}
   1b6b0:	mov	r4, r0
   1b6b4:	ldr	r0, [r0, #32]
   1b6b8:	ldrh	r3, [r0, #14]
   1b6bc:	cmp	r3, #6
   1b6c0:	beq	1b6d8 <flatcc_builder_extend_string@@Base+0x2c>
   1b6c4:	ldr	r3, [pc, #56]	; 1b704 <flatcc_builder_extend_string@@Base+0x58>
   1b6c8:	ldr	r2, [pc, #56]	; 1b708 <flatcc_builder_extend_string@@Base+0x5c>
   1b6cc:	ldr	r1, [pc, #56]	; 1b70c <flatcc_builder_extend_string@@Base+0x60>
   1b6d0:	ldr	r0, [pc, #56]	; 1b710 <flatcc_builder_extend_string@@Base+0x64>
   1b6d4:	bl	12ab4 <__assert_fail@plt>
   1b6d8:	mvn	r2, #0
   1b6dc:	mov	r5, r1
   1b6e0:	bl	1a8f8 <flatcc_builder_default_alloc@@Base+0x478>
   1b6e4:	cmp	r0, #0
   1b6e8:	bne	1b6fc <flatcc_builder_extend_string@@Base+0x50>
   1b6ec:	mov	r1, r5
   1b6f0:	mov	r0, r4
   1b6f4:	pop	{r4, r5, r6, lr}
   1b6f8:	b	1a32c <time_struct_buffer@@Base+0x10c>
   1b6fc:	mov	r0, #0
   1b700:	pop	{r4, r5, r6, pc}
   1b704:	andeq	r1, r2, r8, lsr #23
   1b708:			; <UNDEFINED> instruction: 0x000003bd
   1b70c:	strdeq	r1, [r2], -sp
   1b710:	andeq	r2, r2, r3, asr #1

0001b714 <flatcc_builder_append_string@@Base>:
   1b714:	push	{r4, r5, r6, lr}
   1b718:	mov	r4, r0
   1b71c:	ldr	r0, [r0, #32]
   1b720:	ldrh	r3, [r0, #14]
   1b724:	cmp	r3, #6
   1b728:	beq	1b740 <flatcc_builder_append_string@@Base+0x2c>
   1b72c:	ldr	r3, [pc, #68]	; 1b778 <flatcc_builder_append_string@@Base+0x64>
   1b730:	ldr	r2, [pc, #68]	; 1b77c <flatcc_builder_append_string@@Base+0x68>
   1b734:	ldr	r1, [pc, #68]	; 1b780 <flatcc_builder_append_string@@Base+0x6c>
   1b738:	ldr	r0, [pc, #68]	; 1b784 <flatcc_builder_append_string@@Base+0x70>
   1b73c:	bl	12ab4 <__assert_fail@plt>
   1b740:	mov	r5, r2
   1b744:	mov	r6, r1
   1b748:	mvn	r2, #0
   1b74c:	mov	r1, r5
   1b750:	bl	1a8f8 <flatcc_builder_default_alloc@@Base+0x478>
   1b754:	cmp	r0, #0
   1b758:	bne	1b770 <flatcc_builder_append_string@@Base+0x5c>
   1b75c:	mov	r2, r5
   1b760:	mov	r1, r6
   1b764:	mov	r0, r4
   1b768:	pop	{r4, r5, r6, lr}
   1b76c:	b	1a400 <time_struct_buffer@@Base+0x1e0>
   1b770:	mov	r0, #0
   1b774:	pop	{r4, r5, r6, pc}
   1b778:	andeq	r1, r2, r5, asr #23
   1b77c:	andeq	r0, r0, r6, asr #7
   1b780:	strdeq	r1, [r2], -sp
   1b784:	andeq	r2, r2, r3, asr #1

0001b788 <flatcc_builder_append_string_str@@Base>:
   1b788:	push	{r4, r5, r6, lr}
   1b78c:	mov	r5, r0
   1b790:	mov	r0, r1
   1b794:	mov	r4, r1
   1b798:	bl	12a3c <strlen@plt>
   1b79c:	mov	r1, r4
   1b7a0:	mov	r2, r0
   1b7a4:	mov	r0, r5
   1b7a8:	pop	{r4, r5, r6, lr}
   1b7ac:	b	1b714 <flatcc_builder_append_string@@Base>

0001b7b0 <flatcc_builder_append_string_strn@@Base>:
   1b7b0:	push	{r4, r5, r6, lr}
   1b7b4:	mov	r4, r1
   1b7b8:	mov	r6, r0
   1b7bc:	mov	r1, #0
   1b7c0:	mov	r0, r4
   1b7c4:	mov	r5, r2
   1b7c8:	bl	12a78 <memchr@plt>
   1b7cc:	mov	r1, r4
   1b7d0:	cmp	r0, #0
   1b7d4:	subne	r5, r0, r4
   1b7d8:	mov	r2, r5
   1b7dc:	mov	r0, r6
   1b7e0:	pop	{r4, r5, r6, lr}
   1b7e4:	b	1b714 <flatcc_builder_append_string@@Base>

0001b7e8 <flatcc_builder_truncate_vector@@Base>:
   1b7e8:	ldr	r3, [r0, #32]
   1b7ec:	push	{r4, lr}
   1b7f0:	ldrh	r2, [r3, #14]
   1b7f4:	cmp	r2, #4
   1b7f8:	beq	1b810 <flatcc_builder_truncate_vector@@Base+0x28>
   1b7fc:	ldr	r3, [pc, #68]	; 1b848 <flatcc_builder_truncate_vector@@Base+0x60>
   1b800:	ldr	r2, [pc, #68]	; 1b84c <flatcc_builder_truncate_vector@@Base+0x64>
   1b804:	ldr	r1, [pc, #68]	; 1b850 <flatcc_builder_truncate_vector@@Base+0x68>
   1b808:	ldr	r0, [pc, #68]	; 1b854 <flatcc_builder_truncate_vector@@Base+0x6c>
   1b80c:	bl	12ab4 <__assert_fail@plt>
   1b810:	ldr	r2, [r3, #20]
   1b814:	cmp	r2, r1
   1b818:	ldrcc	r3, [pc, #40]	; 1b848 <flatcc_builder_truncate_vector@@Base+0x60>
   1b81c:	ldrcc	r2, [pc, #52]	; 1b858 <flatcc_builder_truncate_vector@@Base+0x70>
   1b820:	ldrcc	r1, [pc, #40]	; 1b850 <flatcc_builder_truncate_vector@@Base+0x68>
   1b824:	ldrcc	r0, [pc, #48]	; 1b85c <flatcc_builder_truncate_vector@@Base+0x74>
   1b828:	bcc	1b80c <flatcc_builder_truncate_vector@@Base+0x24>
   1b82c:	sub	r2, r2, r1
   1b830:	str	r2, [r3, #20]
   1b834:	ldr	r3, [r3, #16]
   1b838:	mul	r1, r3, r1
   1b83c:	bl	1a3e0 <time_struct_buffer@@Base+0x1c0>
   1b840:	mov	r0, #0
   1b844:	pop	{r4, pc}
   1b848:	andeq	r1, r2, r2, ror #23
   1b84c:	ldrdeq	r0, [r0], -r9
   1b850:	strdeq	r1, [r2], -sp
   1b854:	andeq	r2, r2, r7, lsr #32
   1b858:	ldrdeq	r0, [r0], -sl
   1b85c:	andeq	r2, r2, pc, ror #1

0001b860 <flatcc_builder_truncate_offset_vector@@Base>:
   1b860:	ldr	r3, [r0, #32]
   1b864:	push	{r4, lr}
   1b868:	ldrh	r2, [r3, #14]
   1b86c:	cmp	r2, #5
   1b870:	beq	1b888 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   1b874:	ldr	r3, [pc, #68]	; 1b8c0 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   1b878:	ldr	r2, [pc, #68]	; 1b8c4 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   1b87c:	ldr	r1, [pc, #68]	; 1b8c8 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1b880:	ldr	r0, [pc, #68]	; 1b8cc <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   1b884:	bl	12ab4 <__assert_fail@plt>
   1b888:	ldr	r2, [r3, #20]
   1b88c:	cmp	r2, r1
   1b890:	ldrcc	r3, [pc, #40]	; 1b8c0 <flatcc_builder_truncate_offset_vector@@Base+0x60>
   1b894:	ldrcc	r2, [pc, #52]	; 1b8d0 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   1b898:	ldrcc	r1, [pc, #40]	; 1b8c8 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1b89c:	ldrcc	r0, [pc, #48]	; 1b8d4 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   1b8a0:	bcc	1b884 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   1b8a4:	sub	r2, r2, r1
   1b8a8:	str	r2, [r3, #20]
   1b8ac:	ldr	r3, [r3, #16]
   1b8b0:	mul	r1, r3, r1
   1b8b4:	bl	1a3e0 <time_struct_buffer@@Base+0x1c0>
   1b8b8:	mov	r0, #0
   1b8bc:	pop	{r4, pc}
   1b8c0:	andeq	r1, r2, r1, lsl #24
   1b8c4:	andeq	r0, r0, r2, ror #7
   1b8c8:	strdeq	r1, [r2], -sp
   1b8cc:	muleq	r2, r0, r0
   1b8d0:	andeq	r0, r0, r3, ror #7
   1b8d4:	andeq	r2, r2, r3, lsl r1

0001b8d8 <flatcc_builder_truncate_string@@Base>:
   1b8d8:	ldr	r2, [r0, #32]
   1b8dc:	push	{r4, lr}
   1b8e0:	ldrh	r3, [r2, #14]
   1b8e4:	cmp	r3, #6
   1b8e8:	beq	1b900 <flatcc_builder_truncate_string@@Base+0x28>
   1b8ec:	ldr	r3, [pc, #60]	; 1b930 <flatcc_builder_truncate_string@@Base+0x58>
   1b8f0:	ldr	r2, [pc, #60]	; 1b934 <flatcc_builder_truncate_string@@Base+0x5c>
   1b8f4:	ldr	r1, [pc, #60]	; 1b938 <flatcc_builder_truncate_string@@Base+0x60>
   1b8f8:	ldr	r0, [pc, #60]	; 1b93c <flatcc_builder_truncate_string@@Base+0x64>
   1b8fc:	bl	12ab4 <__assert_fail@plt>
   1b900:	ldr	r3, [r2, #20]
   1b904:	cmp	r3, r1
   1b908:	ldrcc	r3, [pc, #32]	; 1b930 <flatcc_builder_truncate_string@@Base+0x58>
   1b90c:	movcc	r2, #1004	; 0x3ec
   1b910:	ldrcc	r1, [pc, #32]	; 1b938 <flatcc_builder_truncate_string@@Base+0x60>
   1b914:	ldrcc	r0, [pc, #36]	; 1b940 <flatcc_builder_truncate_string@@Base+0x68>
   1b918:	bcc	1b8fc <flatcc_builder_truncate_string@@Base+0x24>
   1b91c:	sub	r3, r3, r1
   1b920:	str	r3, [r2, #20]
   1b924:	bl	1a3e0 <time_struct_buffer@@Base+0x1c0>
   1b928:	mov	r0, #0
   1b92c:	pop	{r4, pc}
   1b930:	andeq	r1, r2, r7, lsr #24
   1b934:	andeq	r0, r0, fp, ror #7
   1b938:	strdeq	r1, [r2], -sp
   1b93c:	andeq	r2, r2, r3, asr #1
   1b940:	andeq	r2, r2, lr, asr #2

0001b944 <flatcc_builder_start_vector@@Base>:
   1b944:	cmp	r2, #4
   1b948:	push	{r4, r5, r6, r7, r8, lr}
   1b94c:	mov	r7, r1
   1b950:	movcs	r1, r2
   1b954:	movcc	r1, #4
   1b958:	mov	r5, r0
   1b95c:	mov	r6, r3
   1b960:	bl	1a5e8 <flatcc_builder_default_alloc@@Base+0x168>
   1b964:	subs	r4, r0, #0
   1b968:	mvnne	r4, #0
   1b96c:	bne	1b994 <flatcc_builder_start_vector@@Base+0x50>
   1b970:	ldr	r2, [r5, #32]
   1b974:	mov	r3, #4
   1b978:	mvn	r1, #3
   1b97c:	str	r7, [r2, #16]
   1b980:	str	r4, [r2, #20]
   1b984:	str	r6, [r2, #24]
   1b988:	strh	r3, [r2, #14]
   1b98c:	mov	r0, r5
   1b990:	bl	1a2ac <time_struct_buffer@@Base+0x8c>
   1b994:	mov	r0, r4
   1b998:	pop	{r4, r5, r6, r7, r8, pc}

0001b99c <flatcc_builder_start_offset_vector@@Base>:
   1b99c:	push	{r4, r5, r6, lr}
   1b9a0:	mov	r1, #4
   1b9a4:	mov	r5, r0
   1b9a8:	bl	1a5e8 <flatcc_builder_default_alloc@@Base+0x168>
   1b9ac:	subs	r4, r0, #0
   1b9b0:	mvnne	r4, #0
   1b9b4:	bne	1b9dc <flatcc_builder_start_offset_vector@@Base+0x40>
   1b9b8:	ldr	r3, [r5, #32]
   1b9bc:	mov	r2, #4
   1b9c0:	mvn	r1, #3
   1b9c4:	str	r2, [r3, #16]
   1b9c8:	mov	r2, #5
   1b9cc:	str	r4, [r3, #20]
   1b9d0:	strh	r2, [r3, #14]
   1b9d4:	mov	r0, r5
   1b9d8:	bl	1a2ac <time_struct_buffer@@Base+0x8c>
   1b9dc:	mov	r0, r4
   1b9e0:	pop	{r4, r5, r6, pc}

0001b9e4 <flatcc_builder_start_string@@Base>:
   1b9e4:	push	{r4, r5, r6, lr}
   1b9e8:	mov	r1, #1
   1b9ec:	mov	r5, r0
   1b9f0:	bl	1a5e8 <flatcc_builder_default_alloc@@Base+0x168>
   1b9f4:	subs	r4, r0, #0
   1b9f8:	mvnne	r4, #0
   1b9fc:	bne	1ba24 <flatcc_builder_start_string@@Base+0x40>
   1ba00:	ldr	r3, [r5, #32]
   1ba04:	mov	r2, #1
   1ba08:	mvn	r1, #3
   1ba0c:	str	r2, [r3, #16]
   1ba10:	mov	r2, #6
   1ba14:	str	r4, [r3, #20]
   1ba18:	strh	r2, [r3, #14]
   1ba1c:	mov	r0, r5
   1ba20:	bl	1a2ac <time_struct_buffer@@Base+0x8c>
   1ba24:	mov	r0, r4
   1ba28:	pop	{r4, r5, r6, pc}

0001ba2c <flatcc_builder_reserve_table@@Base>:
   1ba2c:	cmp	r1, #0
   1ba30:	bge	1ba4c <flatcc_builder_reserve_table@@Base+0x20>
   1ba34:	push	{r4, lr}
   1ba38:	ldr	r3, [pc, #16]	; 1ba50 <flatcc_builder_reserve_table@@Base+0x24>
   1ba3c:	ldr	r2, [pc, #16]	; 1ba54 <flatcc_builder_reserve_table@@Base+0x28>
   1ba40:	ldr	r1, [pc, #16]	; 1ba58 <flatcc_builder_reserve_table@@Base+0x2c>
   1ba44:	ldr	r0, [pc, #16]	; 1ba5c <flatcc_builder_reserve_table@@Base+0x30>
   1ba48:	bl	12ab4 <__assert_fail@plt>
   1ba4c:	b	1a6c8 <flatcc_builder_default_alloc@@Base+0x248>
   1ba50:	andeq	r1, r2, r6, asr #24
   1ba54:	andeq	r0, r0, r9, lsr #8
   1ba58:	strdeq	r1, [r2], -sp
   1ba5c:	andeq	r2, r2, r6, lsl #3

0001ba60 <flatcc_builder_start_table@@Base>:
   1ba60:	push	{r4, r5, r6, lr}
   1ba64:	mov	r5, r1
   1ba68:	mov	r1, #4
   1ba6c:	mov	r4, r0
   1ba70:	bl	1a5e8 <flatcc_builder_default_alloc@@Base+0x168>
   1ba74:	cmp	r0, #0
   1ba78:	beq	1ba88 <flatcc_builder_start_table@@Base+0x28>
   1ba7c:	mvn	r5, #0
   1ba80:	mov	r0, r5
   1ba84:	pop	{r4, r5, r6, pc}
   1ba88:	ldr	r1, [r4, #52]	; 0x34
   1ba8c:	ldr	r2, [r4, #4]
   1ba90:	ldr	r3, [r4, #32]
   1ba94:	sub	r2, r2, r1
   1ba98:	str	r2, [r3, #16]
   1ba9c:	ldr	r1, [r4, #76]	; 0x4c
   1baa0:	ldr	r2, [r4]
   1baa4:	sub	r2, r2, r1
   1baa8:	str	r2, [r3, #20]
   1baac:	ldr	r2, [r4, #12]
   1bab0:	mov	r1, r5
   1bab4:	str	r2, [r3, #24]
   1bab8:	ldrh	r2, [r4, #8]
   1babc:	strh	r2, [r3, #28]
   1bac0:	ldr	r2, [pc, #44]	; 1baf4 <flatcc_builder_start_table@@Base+0x94>
   1bac4:	strh	r0, [r4, #8]
   1bac8:	str	r2, [r4, #12]
   1bacc:	mov	r2, #3
   1bad0:	strh	r2, [r3, #14]
   1bad4:	mov	r0, r4
   1bad8:	bl	1a6c8 <flatcc_builder_default_alloc@@Base+0x248>
   1badc:	subs	r5, r0, #0
   1bae0:	bne	1ba7c <flatcc_builder_start_table@@Base+0x1c>
   1bae4:	ldr	r1, [pc, #12]	; 1baf8 <flatcc_builder_start_table@@Base+0x98>
   1bae8:	mov	r0, r4
   1baec:	bl	1a2ac <time_struct_buffer@@Base+0x8c>
   1baf0:	b	1ba80 <flatcc_builder_start_table@@Base+0x20>
   1baf4:	svccs	0x00693b52
   1baf8:	strdeq	pc, [r0], -ip

0001bafc <flatcc_builder_create_vtable@@Base>:
   1bafc:	push	{lr}		; (str lr, [sp, #-4]!)
   1bb00:	sub	sp, sp, #76	; 0x4c
   1bb04:	cmp	r2, #0
   1bb08:	mov	r3, #0
   1bb0c:	str	r3, [sp]
   1bb10:	str	r3, [sp, #4]
   1bb14:	movne	r3, #1
   1bb18:	strne	r3, [sp, #4]
   1bb1c:	ldr	r3, [r0, #152]	; 0x98
   1bb20:	strne	r1, [sp, #8]
   1bb24:	strne	r2, [sp]
   1bb28:	strne	r2, [sp, #12]
   1bb2c:	cmp	r3, #0
   1bb30:	mov	r1, sp
   1bb34:	bne	1bb50 <flatcc_builder_create_vtable@@Base+0x54>
   1bb38:	ldr	r3, [r0, #180]	; 0xb4
   1bb3c:	cmp	r3, #0
   1bb40:	bne	1bb50 <flatcc_builder_create_vtable@@Base+0x54>
   1bb44:	bl	1a74c <flatcc_builder_default_alloc@@Base+0x2cc>
   1bb48:	add	sp, sp, #76	; 0x4c
   1bb4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb50:	bl	1a878 <flatcc_builder_default_alloc@@Base+0x3f8>
   1bb54:	cmp	r0, #0
   1bb58:	addne	r0, r0, #1
   1bb5c:	b	1bb48 <flatcc_builder_create_vtable@@Base+0x4c>

0001bb60 <flatcc_builder_create_cached_vtable@@Base>:
   1bb60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb64:	mov	r4, r0
   1bb68:	ldr	r5, [r0, #116]	; 0x74
   1bb6c:	sub	sp, sp, #20
   1bb70:	cmp	r5, #0
   1bb74:	mov	fp, r1
   1bb78:	mov	r7, r2
   1bb7c:	mov	r6, r3
   1bb80:	bne	1bc28 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1bb84:	ldr	r3, [r0, #124]	; 0x7c
   1bb88:	add	r9, r0, #92	; 0x5c
   1bb8c:	cmp	r3, #0
   1bb90:	beq	1bba8 <flatcc_builder_create_cached_vtable@@Base+0x48>
   1bb94:	ldr	r3, [pc, #556]	; 1bdc8 <flatcc_builder_create_cached_vtable@@Base+0x268>
   1bb98:	ldr	r2, [pc, #556]	; 1bdcc <flatcc_builder_create_cached_vtable@@Base+0x26c>
   1bb9c:	ldr	r1, [pc, #556]	; 1bdd0 <flatcc_builder_create_cached_vtable@@Base+0x270>
   1bba0:	ldr	r0, [pc, #556]	; 1bdd4 <flatcc_builder_create_cached_vtable@@Base+0x274>
   1bba4:	bl	12ab4 <__assert_fail@plt>
   1bba8:	str	r5, [sp]
   1bbac:	mov	r3, #16
   1bbb0:	mov	r2, r5
   1bbb4:	mov	r1, #6
   1bbb8:	bl	1a578 <flatcc_builder_default_alloc@@Base+0xf8>
   1bbbc:	cmp	r0, #0
   1bbc0:	beq	1bbfc <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1bbc4:	mov	r3, #16
   1bbc8:	str	r3, [r4, #124]	; 0x7c
   1bbcc:	mov	r3, #5
   1bbd0:	str	r3, [sp]
   1bbd4:	mov	r1, r9
   1bbd8:	mov	r3, #1
   1bbdc:	ldr	r8, [r4, #48]	; 0x30
   1bbe0:	mov	r2, #256	; 0x100
   1bbe4:	ldr	r0, [r4, #40]	; 0x28
   1bbe8:	blx	r8
   1bbec:	cmp	r0, #0
   1bbf0:	moveq	r3, #256	; 0x100
   1bbf4:	ldreq	r1, [r4, #96]	; 0x60
   1bbf8:	beq	1bc08 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   1bbfc:	mov	r0, #0
   1bc00:	b	1bd78 <flatcc_builder_create_cached_vtable@@Base+0x218>
   1bc04:	mov	r3, r2
   1bc08:	lsl	r2, r3, #1
   1bc0c:	cmp	r2, r1
   1bc10:	bls	1bc04 <flatcc_builder_create_cached_vtable@@Base+0xa4>
   1bc14:	lsr	r3, r3, #2
   1bc18:	mov	r2, #1
   1bc1c:	cmp	r3, r2, lsl r5
   1bc20:	bhi	1bce8 <flatcc_builder_create_cached_vtable@@Base+0x188>
   1bc24:	str	r5, [r4, #116]	; 0x74
   1bc28:	ldr	r3, [r4, #116]	; 0x74
   1bc2c:	ldr	r8, [r4, #92]	; 0x5c
   1bc30:	rsb	r3, r3, #32
   1bc34:	lsr	r6, r6, r3
   1bc38:	adds	r3, r8, r6, lsl #2
   1bc3c:	str	r3, [sp, #8]
   1bc40:	ldrne	r9, [r8, r6, lsl #2]
   1bc44:	movne	sl, #0
   1bc48:	beq	1bbfc <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1bc4c:	cmp	r9, #0
   1bc50:	bne	1bcf0 <flatcc_builder_create_cached_vtable@@Base+0x190>
   1bc54:	str	r9, [sp]
   1bc58:	mov	r3, #16
   1bc5c:	ldr	r2, [r4, #124]	; 0x7c
   1bc60:	mov	r1, #6
   1bc64:	mov	r0, r4
   1bc68:	bl	1a578 <flatcc_builder_default_alloc@@Base+0xf8>
   1bc6c:	subs	r5, r0, #0
   1bc70:	beq	1bbfc <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1bc74:	ldr	r3, [r4, #124]	; 0x7c
   1bc78:	mov	r1, fp
   1bc7c:	add	r2, r3, #16
   1bc80:	str	r2, [r4, #124]	; 0x7c
   1bc84:	ldr	r2, [r4, #152]	; 0x98
   1bc88:	mov	r0, r4
   1bc8c:	str	r2, [r5, #4]
   1bc90:	ldr	r2, [r8, r6, lsl #2]
   1bc94:	str	r2, [r5, #12]
   1bc98:	str	r3, [r8, r6, lsl #2]
   1bc9c:	mov	r2, r7
   1bca0:	bl	1bafc <flatcc_builder_create_vtable@@Base>
   1bca4:	cmp	r0, #0
   1bca8:	str	r0, [r5]
   1bcac:	beq	1bbfc <flatcc_builder_create_cached_vtable@@Base+0x9c>
   1bcb0:	cmp	sl, #0
   1bcb4:	ldrne	r3, [sl, #8]
   1bcb8:	strne	r3, [r5, #8]
   1bcbc:	bne	1bd74 <flatcc_builder_create_cached_vtable@@Base+0x214>
   1bcc0:	ldr	r2, [r4, #172]	; 0xac
   1bcc4:	cmp	r2, #0
   1bcc8:	beq	1bd80 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1bccc:	ldr	r3, [r4, #120]	; 0x78
   1bcd0:	add	r3, r7, r3
   1bcd4:	cmp	r2, r3
   1bcd8:	bcs	1bd80 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1bcdc:	mov	r0, r4
   1bce0:	bl	1aabc <flatcc_builder_flush_vtable_cache@@Base>
   1bce4:	b	1bd74 <flatcc_builder_create_cached_vtable@@Base+0x214>
   1bce8:	add	r5, r5, #1
   1bcec:	b	1bc1c <flatcc_builder_create_cached_vtable@@Base+0xbc>
   1bcf0:	ldr	r5, [r4, #100]	; 0x64
   1bcf4:	ldr	r0, [r4, #68]	; 0x44
   1bcf8:	add	r5, r5, r9
   1bcfc:	ldr	r2, [r5, #8]
   1bd00:	add	r1, r0, r2
   1bd04:	ldrh	r2, [r0, r2]
   1bd08:	cmp	r2, r7
   1bd0c:	bne	1bd2c <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   1bd10:	mov	r2, r7
   1bd14:	mov	r0, fp
   1bd18:	str	r3, [sp, #12]
   1bd1c:	bl	129e8 <memcmp@plt>
   1bd20:	ldr	r3, [sp, #12]
   1bd24:	cmp	r0, #0
   1bd28:	beq	1bd40 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   1bd2c:	add	r3, r5, #12
   1bd30:	ldr	r9, [r5, #12]
   1bd34:	mov	r5, sl
   1bd38:	mov	sl, r5
   1bd3c:	b	1bc4c <flatcc_builder_create_cached_vtable@@Base+0xec>
   1bd40:	ldr	r1, [r5, #4]
   1bd44:	ldr	r2, [r4, #152]	; 0x98
   1bd48:	cmp	r1, r2
   1bd4c:	addne	r3, r5, #12
   1bd50:	ldrne	r9, [r5, #12]
   1bd54:	bne	1bd38 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   1bd58:	ldr	r2, [sp, #8]
   1bd5c:	cmp	r3, r2
   1bd60:	ldrne	r2, [r5, #12]
   1bd64:	strne	r2, [r3]
   1bd68:	ldrne	r3, [r8, r6, lsl #2]
   1bd6c:	strne	r3, [r5, #12]
   1bd70:	strne	r9, [r8, r6, lsl #2]
   1bd74:	ldr	r0, [r5]
   1bd78:	add	sp, sp, #20
   1bd7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd80:	mov	r3, #0
   1bd84:	str	r3, [sp]
   1bd88:	ldr	r2, [r4, #120]	; 0x78
   1bd8c:	mov	r3, r7
   1bd90:	mov	r1, #2
   1bd94:	mov	r0, r4
   1bd98:	bl	1a578 <flatcc_builder_default_alloc@@Base+0xf8>
   1bd9c:	cmp	r0, #0
   1bda0:	mvneq	r0, #0
   1bda4:	beq	1bd78 <flatcc_builder_create_cached_vtable@@Base+0x218>
   1bda8:	ldr	r3, [r4, #120]	; 0x78
   1bdac:	mov	r2, r7
   1bdb0:	str	r3, [r5, #8]
   1bdb4:	add	r3, r7, r3
   1bdb8:	str	r3, [r4, #120]	; 0x78
   1bdbc:	mov	r1, fp
   1bdc0:	bl	129dc <memcpy@plt>
   1bdc4:	b	1bd74 <flatcc_builder_create_cached_vtable@@Base+0x214>
   1bdc8:	andeq	r1, r2, r3, ror #24
   1bdcc:	andeq	r0, r0, r6, asr r1
   1bdd0:	strdeq	r1, [r2], -sp
   1bdd4:	andeq	r2, r2, r0, ror r1

0001bdd8 <flatcc_builder_create_table@@Base>:
   1bdd8:	push	{r4, r5, r6, r7, lr}
   1bddc:	sub	sp, sp, #84	; 0x54
   1bde0:	ldr	r4, [sp, #108]	; 0x6c
   1bde4:	ldr	lr, [sp, #112]	; 0x70
   1bde8:	cmp	r4, #0
   1bdec:	bge	1be04 <flatcc_builder_create_table@@Base+0x2c>
   1bdf0:	ldr	r3, [pc, #268]	; 1bf04 <flatcc_builder_create_table@@Base+0x12c>
   1bdf4:	ldr	r2, [pc, #268]	; 1bf08 <flatcc_builder_create_table@@Base+0x130>
   1bdf8:	ldr	r1, [pc, #268]	; 1bf0c <flatcc_builder_create_table@@Base+0x134>
   1bdfc:	ldr	r0, [pc, #268]	; 1bf10 <flatcc_builder_create_table@@Base+0x138>
   1be00:	bl	12ab4 <__assert_fail@plt>
   1be04:	tst	lr, #1
   1be08:	ldreq	r3, [pc, #244]	; 1bf04 <flatcc_builder_create_table@@Base+0x12c>
   1be0c:	ldreq	r2, [pc, #256]	; 1bf14 <flatcc_builder_create_table@@Base+0x13c>
   1be10:	ldreq	r1, [pc, #244]	; 1bf0c <flatcc_builder_create_table@@Base+0x134>
   1be14:	ldreq	r0, [pc, #252]	; 1bf18 <flatcc_builder_create_table@@Base+0x140>
   1be18:	beq	1be00 <flatcc_builder_create_table@@Base+0x28>
   1be1c:	ldrh	ip, [r0, #128]	; 0x80
   1be20:	cmp	r3, #4
   1be24:	movcc	r3, #4
   1be28:	ldr	r6, [r0, #136]	; 0x88
   1be2c:	cmp	ip, r3
   1be30:	mvn	r5, #3
   1be34:	sub	ip, r6, r2
   1be38:	strhcc	r3, [r0, #128]	; 0x80
   1be3c:	sub	r3, r3, #1
   1be40:	and	r3, r3, ip
   1be44:	sub	ip, r5, r2
   1be48:	add	ip, ip, r6
   1be4c:	sub	ip, ip, r3
   1be50:	sub	lr, lr, #1
   1be54:	sub	lr, ip, lr
   1be58:	str	lr, [sp, #4]
   1be5c:	ldr	lr, [sp, #104]	; 0x68
   1be60:	sub	ip, r5, ip
   1be64:	add	r4, lr, r4, lsl #1
   1be68:	cmp	r4, lr
   1be6c:	bne	1beec <flatcc_builder_create_table@@Base+0x114>
   1be70:	mov	ip, #4
   1be74:	cmp	r2, #0
   1be78:	str	ip, [sp, #8]
   1be7c:	add	lr, sp, ip
   1be80:	str	ip, [sp, #20]
   1be84:	mov	ip, #1
   1be88:	str	ip, [sp, #12]
   1be8c:	strne	r2, [sp, #28]
   1be90:	addne	ip, r2, #4
   1be94:	movne	r2, #2
   1be98:	strne	ip, [sp, #8]
   1be9c:	strne	r1, [sp, #24]
   1bea0:	strne	r2, [sp, #12]
   1bea4:	cmp	r3, #0
   1bea8:	str	lr, [sp, #16]
   1beac:	beq	1bedc <flatcc_builder_create_table@@Base+0x104>
   1beb0:	ldr	r2, [sp, #8]
   1beb4:	add	r1, sp, #80	; 0x50
   1beb8:	add	r2, r2, r3
   1bebc:	str	r2, [sp, #8]
   1bec0:	ldr	r2, [sp, #12]
   1bec4:	ldr	ip, [pc, #80]	; 1bf1c <flatcc_builder_create_table@@Base+0x144>
   1bec8:	add	r2, r2, #1
   1becc:	str	r2, [sp, #12]
   1bed0:	add	r1, r1, r2, lsl #3
   1bed4:	str	ip, [r1, #-72]	; 0xffffffb8
   1bed8:	str	r3, [r1, #-68]	; 0xffffffbc
   1bedc:	add	r1, sp, #8
   1bee0:	bl	1a878 <flatcc_builder_default_alloc@@Base+0x3f8>
   1bee4:	add	sp, sp, #84	; 0x54
   1bee8:	pop	{r4, r5, r6, r7, pc}
   1beec:	ldrh	r5, [lr], #2
   1bef0:	sub	r7, ip, r5
   1bef4:	ldr	r6, [r1, r5]
   1bef8:	add	r6, r6, r7
   1befc:	str	r6, [r1, r5]
   1bf00:	b	1be68 <flatcc_builder_create_table@@Base+0x90>
   1bf04:	andeq	r1, r2, ip, ror #24
   1bf08:	ldrdeq	r0, [r0], -r5
   1bf0c:	strdeq	r1, [r2], -sp
   1bf10:	andeq	r2, r2, pc, ror r1
   1bf14:	ldrdeq	r0, [r0], -fp
   1bf18:	muleq	r2, r1, r1
   1bf1c:	andeq	r1, r2, r7, lsl r8

0001bf20 <flatcc_builder_check_required_field@@Base>:
   1bf20:	ldr	r3, [r0, #32]
   1bf24:	ldrh	r3, [r3, #14]
   1bf28:	cmp	r3, #3
   1bf2c:	beq	1bf48 <flatcc_builder_check_required_field@@Base+0x28>
   1bf30:	push	{r4, lr}
   1bf34:	ldr	r3, [pc, #52]	; 1bf70 <flatcc_builder_check_required_field@@Base+0x50>
   1bf38:	ldr	r2, [pc, #52]	; 1bf74 <flatcc_builder_check_required_field@@Base+0x54>
   1bf3c:	ldr	r1, [pc, #52]	; 1bf78 <flatcc_builder_check_required_field@@Base+0x58>
   1bf40:	ldr	r0, [pc, #52]	; 1bf7c <flatcc_builder_check_required_field@@Base+0x5c>
   1bf44:	bl	12ab4 <__assert_fail@plt>
   1bf48:	ldrh	r3, [r0, #8]
   1bf4c:	cmp	r3, r1
   1bf50:	movls	r0, #0
   1bf54:	bls	1bf6c <flatcc_builder_check_required_field@@Base+0x4c>
   1bf58:	ldr	r3, [r0, #4]
   1bf5c:	lsl	r1, r1, #1
   1bf60:	ldrh	r0, [r3, r1]
   1bf64:	adds	r0, r0, #0
   1bf68:	movne	r0, #1
   1bf6c:	bx	lr
   1bf70:	andeq	r1, r2, r8, lsl #25
   1bf74:	strdeq	r0, [r0], -r8
   1bf78:	strdeq	r1, [r2], -sp
   1bf7c:	muleq	r2, ip, r1

0001bf80 <flatcc_builder_check_union_field@@Base>:
   1bf80:	ldr	r3, [r0, #32]
   1bf84:	ldrh	r3, [r3, #14]
   1bf88:	cmp	r3, #3
   1bf8c:	beq	1bfa8 <flatcc_builder_check_union_field@@Base+0x28>
   1bf90:	push	{r4, lr}
   1bf94:	ldr	r3, [pc, #112]	; 1c00c <flatcc_builder_check_union_field@@Base+0x8c>
   1bf98:	ldr	r2, [pc, #112]	; 1c010 <flatcc_builder_check_union_field@@Base+0x90>
   1bf9c:	ldr	r1, [pc, #112]	; 1c014 <flatcc_builder_check_union_field@@Base+0x94>
   1bfa0:	ldr	r0, [pc, #112]	; 1c018 <flatcc_builder_check_union_field@@Base+0x98>
   1bfa4:	bl	12ab4 <__assert_fail@plt>
   1bfa8:	cmp	r1, #0
   1bfac:	beq	1c004 <flatcc_builder_check_union_field@@Base+0x84>
   1bfb0:	ldrh	r3, [r0, #8]
   1bfb4:	cmp	r3, r1
   1bfb8:	bls	1c004 <flatcc_builder_check_union_field@@Base+0x84>
   1bfbc:	sub	r1, r1, #-2147483647	; 0x80000001
   1bfc0:	ldr	r3, [r0, #4]
   1bfc4:	lsl	r1, r1, #1
   1bfc8:	ldrh	r2, [r3, r1]!
   1bfcc:	cmp	r2, #0
   1bfd0:	ldrheq	r0, [r3, #2]
   1bfd4:	beq	1bff8 <flatcc_builder_check_union_field@@Base+0x78>
   1bfd8:	ldr	r1, [r0, #16]
   1bfdc:	ldrh	r0, [r3, #2]
   1bfe0:	ldrb	r2, [r1, r2]
   1bfe4:	cmp	r2, #0
   1bfe8:	beq	1bff8 <flatcc_builder_check_union_field@@Base+0x78>
   1bfec:	adds	r0, r0, #0
   1bff0:	movne	r0, #1
   1bff4:	bx	lr
   1bff8:	clz	r0, r0
   1bffc:	lsr	r0, r0, #5
   1c000:	b	1bff4 <flatcc_builder_check_union_field@@Base+0x74>
   1c004:	mov	r0, #0
   1c008:	b	1bff4 <flatcc_builder_check_union_field@@Base+0x74>
   1c00c:	andeq	r1, r2, ip, lsr #25
   1c010:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1c014:	strdeq	r1, [r2], -sp
   1c018:	muleq	r2, ip, r1

0001c01c <flatcc_builder_check_required@@Base>:
   1c01c:	ldr	r3, [r0, #32]
   1c020:	push	{r4, lr}
   1c024:	ldrh	r3, [r3, #14]
   1c028:	cmp	r3, #3
   1c02c:	beq	1c044 <flatcc_builder_check_required@@Base+0x28>
   1c030:	ldr	r3, [pc, #84]	; 1c08c <flatcc_builder_check_required@@Base+0x70>
   1c034:	ldr	r2, [pc, #84]	; 1c090 <flatcc_builder_check_required@@Base+0x74>
   1c038:	ldr	r1, [pc, #84]	; 1c094 <flatcc_builder_check_required@@Base+0x78>
   1c03c:	ldr	r0, [pc, #84]	; 1c098 <flatcc_builder_check_required@@Base+0x7c>
   1c040:	bl	12ab4 <__assert_fail@plt>
   1c044:	ldrh	r3, [r0, #8]
   1c048:	cmp	r3, r2
   1c04c:	subge	r1, r1, #2
   1c050:	movge	ip, #0
   1c054:	bge	1c07c <flatcc_builder_check_required@@Base+0x60>
   1c058:	mov	r0, #0
   1c05c:	pop	{r4, pc}
   1c060:	ldrh	r3, [r1, #2]!
   1c064:	ldr	lr, [r0, #4]
   1c068:	lsl	r3, r3, #1
   1c06c:	ldrh	r3, [lr, r3]
   1c070:	cmp	r3, #0
   1c074:	beq	1c058 <flatcc_builder_check_required@@Base+0x3c>
   1c078:	add	ip, ip, #1
   1c07c:	cmp	ip, r2
   1c080:	blt	1c060 <flatcc_builder_check_required@@Base+0x44>
   1c084:	mov	r0, #1
   1c088:	pop	{r4, pc}
   1c08c:	andeq	r1, r2, sp, asr #25
   1c090:	andeq	r0, r0, r1, lsl r5
   1c094:	strdeq	r1, [r2], -sp
   1c098:	muleq	r2, ip, r1

0001c09c <flatcc_builder_end_table@@Base>:
   1c09c:	ldr	r3, [r0, #32]
   1c0a0:	push	{r4, r5, r6, r7, lr}
   1c0a4:	sub	sp, sp, #20
   1c0a8:	ldrh	r3, [r3, #14]
   1c0ac:	cmp	r3, #3
   1c0b0:	beq	1c0c8 <flatcc_builder_end_table@@Base+0x2c>
   1c0b4:	ldr	r3, [pc, #260]	; 1c1c0 <flatcc_builder_end_table@@Base+0x124>
   1c0b8:	ldr	r2, [pc, #260]	; 1c1c4 <flatcc_builder_end_table@@Base+0x128>
   1c0bc:	ldr	r1, [pc, #260]	; 1c1c8 <flatcc_builder_end_table@@Base+0x12c>
   1c0c0:	ldr	r0, [pc, #260]	; 1c1cc <flatcc_builder_end_table@@Base+0x130>
   1c0c4:	bl	12ab4 <__assert_fail@plt>
   1c0c8:	ldrh	r5, [r0, #8]
   1c0cc:	ldr	r3, [r0, #20]
   1c0d0:	ldr	r1, [r0, #4]
   1c0d4:	add	r5, r5, #2
   1c0d8:	add	r3, r3, #4
   1c0dc:	lsl	r5, r5, #1
   1c0e0:	uxth	r2, r3
   1c0e4:	uxth	r5, r5
   1c0e8:	ldr	r3, [r0, #12]
   1c0ec:	strh	r2, [r1, #-2]
   1c0f0:	strh	r5, [r1, #-4]
   1c0f4:	sub	r6, r1, #4
   1c0f8:	ldr	r1, [pc, #208]	; 1c1d0 <flatcc_builder_end_table@@Base+0x134>
   1c0fc:	eor	r3, r3, r5
   1c100:	mov	r4, r0
   1c104:	mul	r3, r1, r3
   1c108:	eor	r3, r3, r2
   1c10c:	mov	r2, r5
   1c110:	mul	r3, r1, r3
   1c114:	mov	r1, r6
   1c118:	str	r3, [r0, #12]
   1c11c:	bl	1bb60 <flatcc_builder_create_cached_vtable@@Base>
   1c120:	subs	r7, r0, #0
   1c124:	beq	1c1b4 <flatcc_builder_end_table@@Base+0x118>
   1c128:	mov	r2, r5
   1c12c:	mov	r1, #0
   1c130:	mov	r0, r6
   1c134:	bl	12a60 <memset@plt>
   1c138:	ldr	r3, [r4, #32]
   1c13c:	ldr	r1, [r4, #76]	; 0x4c
   1c140:	mov	r0, r4
   1c144:	ldr	r3, [r3, #20]
   1c148:	add	r1, r1, r3
   1c14c:	ldrh	r3, [r4, #130]	; 0x82
   1c150:	str	r7, [sp, #8]
   1c154:	ldr	r2, [r4]
   1c158:	sub	r2, r2, r1
   1c15c:	asr	r2, r2, #1
   1c160:	stm	sp, {r1, r2}
   1c164:	ldr	r2, [r4, #20]
   1c168:	ldr	r1, [r4, #16]
   1c16c:	bl	1bdd8 <flatcc_builder_create_table@@Base>
   1c170:	subs	r7, r0, #0
   1c174:	beq	1c1b4 <flatcc_builder_end_table@@Base+0x118>
   1c178:	ldr	r3, [r4, #32]
   1c17c:	mov	r0, r4
   1c180:	ldr	r2, [r3, #24]
   1c184:	str	r2, [r4, #12]
   1c188:	ldrh	r2, [r3, #28]
   1c18c:	strh	r2, [r4, #8]
   1c190:	ldr	r2, [r4, #52]	; 0x34
   1c194:	ldr	r1, [r3, #16]
   1c198:	add	r2, r2, r1
   1c19c:	str	r2, [r4, #4]
   1c1a0:	ldr	r2, [r4, #76]	; 0x4c
   1c1a4:	ldr	r3, [r3, #20]
   1c1a8:	add	r3, r2, r3
   1c1ac:	str	r3, [r4]
   1c1b0:	bl	1a374 <time_struct_buffer@@Base+0x154>
   1c1b4:	mov	r0, r7
   1c1b8:	add	sp, sp, #20
   1c1bc:	pop	{r4, r5, r6, r7, pc}
   1c1c0:	andeq	r1, r2, fp, ror #25
   1c1c4:	andeq	r0, r0, r5, lsr #10
   1c1c8:	strdeq	r1, [r2], -sp
   1c1cc:	muleq	r2, ip, r1
   1c1d0:			; <UNDEFINED> instruction: 0x9e3779b1

0001c1d4 <flatcc_builder_create_vector@@Base>:
   1c1d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c1d8:	sub	sp, sp, #84	; 0x54
   1c1dc:	ldr	lr, [sp, #92]	; 0x5c
   1c1e0:	ldrh	ip, [sp, #88]	; 0x58
   1c1e4:	cmp	r2, lr
   1c1e8:	bls	1c200 <flatcc_builder_create_vector@@Base+0x2c>
   1c1ec:	ldr	r3, [pc, #180]	; 1c2a8 <flatcc_builder_create_vector@@Base+0xd4>
   1c1f0:	ldr	r2, [pc, #180]	; 1c2ac <flatcc_builder_create_vector@@Base+0xd8>
   1c1f4:	ldr	r1, [pc, #180]	; 1c2b0 <flatcc_builder_create_vector@@Base+0xdc>
   1c1f8:	ldr	r0, [pc, #180]	; 1c2b4 <flatcc_builder_create_vector@@Base+0xe0>
   1c1fc:	bl	12ab4 <__assert_fail@plt>
   1c200:	ldrh	lr, [r0, #128]	; 0x80
   1c204:	mul	r3, r3, r2
   1c208:	cmp	ip, #4
   1c20c:	movcc	ip, #4
   1c210:	str	r2, [sp, #4]
   1c214:	ldr	r2, [r0, #136]	; 0x88
   1c218:	cmp	lr, ip
   1c21c:	sub	r2, r2, r3
   1c220:	strhcc	ip, [r0, #128]	; 0x80
   1c224:	sub	ip, ip, #1
   1c228:	and	ip, ip, r2
   1c22c:	mov	r2, #4
   1c230:	cmp	r3, #0
   1c234:	str	r2, [sp, #8]
   1c238:	add	lr, sp, r2
   1c23c:	str	r2, [sp, #20]
   1c240:	mov	r2, #1
   1c244:	str	r2, [sp, #12]
   1c248:	strne	r3, [sp, #28]
   1c24c:	addne	r2, r3, #4
   1c250:	movne	r3, #2
   1c254:	strne	r2, [sp, #8]
   1c258:	strne	r1, [sp, #24]
   1c25c:	strne	r3, [sp, #12]
   1c260:	cmp	ip, #0
   1c264:	str	lr, [sp, #16]
   1c268:	beq	1c298 <flatcc_builder_create_vector@@Base+0xc4>
   1c26c:	ldr	r3, [sp, #8]
   1c270:	add	r2, sp, #80	; 0x50
   1c274:	add	r3, r3, ip
   1c278:	str	r3, [sp, #8]
   1c27c:	ldr	r3, [sp, #12]
   1c280:	ldr	r1, [pc, #48]	; 1c2b8 <flatcc_builder_create_vector@@Base+0xe4>
   1c284:	add	r3, r3, #1
   1c288:	str	r3, [sp, #12]
   1c28c:	add	r2, r2, r3, lsl #3
   1c290:	str	r1, [r2, #-72]	; 0xffffffb8
   1c294:	str	ip, [r2, #-68]	; 0xffffffbc
   1c298:	add	r1, sp, #8
   1c29c:	bl	1a878 <flatcc_builder_default_alloc@@Base+0x3f8>
   1c2a0:	add	sp, sp, #84	; 0x54
   1c2a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2a8:	andeq	r1, r2, r4, lsl #26
   1c2ac:	andeq	r0, r0, r5, asr r5
   1c2b0:	strdeq	r1, [r2], -sp
   1c2b4:	andeq	r2, r2, r7, asr #3
   1c2b8:	andeq	r1, r2, r7, lsl r8

0001c2bc <flatcc_builder_end_vector@@Base>:
   1c2bc:	push	{r0, r1, r2, r4, r5, lr}
   1c2c0:	ldr	r2, [r0, #32]
   1c2c4:	ldrh	r3, [r2, #14]
   1c2c8:	cmp	r3, #4
   1c2cc:	beq	1c2e4 <flatcc_builder_end_vector@@Base+0x28>
   1c2d0:	ldr	r3, [pc, #76]	; 1c324 <flatcc_builder_end_vector@@Base+0x68>
   1c2d4:	ldr	r2, [pc, #76]	; 1c328 <flatcc_builder_end_vector@@Base+0x6c>
   1c2d8:	ldr	r1, [pc, #76]	; 1c32c <flatcc_builder_end_vector@@Base+0x70>
   1c2dc:	ldr	r0, [pc, #76]	; 1c330 <flatcc_builder_end_vector@@Base+0x74>
   1c2e0:	bl	12ab4 <__assert_fail@plt>
   1c2e4:	ldr	r3, [r2, #24]
   1c2e8:	mov	r4, r0
   1c2ec:	str	r3, [sp, #4]
   1c2f0:	ldrh	r3, [r0, #130]	; 0x82
   1c2f4:	str	r3, [sp]
   1c2f8:	ldr	r3, [r2, #16]
   1c2fc:	ldr	r1, [r0, #16]
   1c300:	ldr	r2, [r2, #20]
   1c304:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   1c308:	subs	r5, r0, #0
   1c30c:	beq	1c318 <flatcc_builder_end_vector@@Base+0x5c>
   1c310:	mov	r0, r4
   1c314:	bl	1a374 <time_struct_buffer@@Base+0x154>
   1c318:	mov	r0, r5
   1c31c:	add	sp, sp, #12
   1c320:	pop	{r4, r5, pc}
   1c324:	andeq	r1, r2, r1, lsr #26
   1c328:	andeq	r0, r0, r8, ror r5
   1c32c:	strdeq	r1, [r2], -sp
   1c330:	andeq	r2, r2, r7, lsr #32

0001c334 <flatcc_builder_vector_count@@Base>:
   1c334:	ldr	r3, [r0, #32]
   1c338:	ldr	r0, [r3, #20]
   1c33c:	bx	lr

0001c340 <flatcc_builder_vector_edit@@Base>:
   1c340:	ldr	r0, [r0, #16]
   1c344:	bx	lr

0001c348 <flatcc_builder_create_offset_vector_direct@@Base>:
   1c348:	cmn	r2, #-1073741823	; 0xc0000001
   1c34c:	bhi	1c358 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   1c350:	mov	r3, #0
   1c354:	b	1a94c <flatcc_builder_default_alloc@@Base+0x4cc>
   1c358:	mov	r0, #0
   1c35c:	bx	lr

0001c360 <flatcc_builder_end_offset_vector@@Base>:
   1c360:	ldr	r3, [r0, #32]
   1c364:	push	{r4, r5, r6, lr}
   1c368:	ldrh	r2, [r3, #14]
   1c36c:	cmp	r2, #5
   1c370:	beq	1c388 <flatcc_builder_end_offset_vector@@Base+0x28>
   1c374:	ldr	r3, [pc, #52]	; 1c3b0 <flatcc_builder_end_offset_vector@@Base+0x50>
   1c378:	ldr	r2, [pc, #52]	; 1c3b4 <flatcc_builder_end_offset_vector@@Base+0x54>
   1c37c:	ldr	r1, [pc, #52]	; 1c3b8 <flatcc_builder_end_offset_vector@@Base+0x58>
   1c380:	ldr	r0, [pc, #52]	; 1c3bc <flatcc_builder_end_offset_vector@@Base+0x5c>
   1c384:	bl	12ab4 <__assert_fail@plt>
   1c388:	ldr	r2, [r3, #20]
   1c38c:	ldr	r1, [r0, #16]
   1c390:	mov	r4, r0
   1c394:	bl	1c348 <flatcc_builder_create_offset_vector_direct@@Base>
   1c398:	subs	r5, r0, #0
   1c39c:	beq	1c3a8 <flatcc_builder_end_offset_vector@@Base+0x48>
   1c3a0:	mov	r0, r4
   1c3a4:	bl	1a374 <time_struct_buffer@@Base+0x154>
   1c3a8:	mov	r0, r5
   1c3ac:	pop	{r4, r5, r6, pc}
   1c3b0:	andeq	r1, r2, fp, lsr sp
   1c3b4:	andeq	r0, r0, r8, asr #11
   1c3b8:	strdeq	r1, [r2], -sp
   1c3bc:	muleq	r2, r0, r0

0001c3c0 <flatcc_builder_create_offset_vector@@Base>:
   1c3c0:	push	{r4, r5, r6, lr}
   1c3c4:	mov	r4, r0
   1c3c8:	mov	r6, r1
   1c3cc:	mov	r5, r2
   1c3d0:	bl	1b99c <flatcc_builder_start_offset_vector@@Base>
   1c3d4:	cmp	r0, #0
   1c3d8:	bne	1c408 <flatcc_builder_create_offset_vector@@Base+0x48>
   1c3dc:	mov	r1, r5
   1c3e0:	mov	r0, r4
   1c3e4:	bl	1b598 <flatcc_builder_extend_offset_vector@@Base>
   1c3e8:	cmp	r0, #0
   1c3ec:	beq	1c408 <flatcc_builder_create_offset_vector@@Base+0x48>
   1c3f0:	lsl	r2, r5, #2
   1c3f4:	mov	r1, r6
   1c3f8:	bl	129dc <memcpy@plt>
   1c3fc:	mov	r0, r4
   1c400:	pop	{r4, r5, r6, lr}
   1c404:	b	1c360 <flatcc_builder_end_offset_vector@@Base>
   1c408:	mov	r0, #0
   1c40c:	pop	{r4, r5, r6, pc}

0001c410 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1c410:	ldr	r2, [r0, #32]
   1c414:	mov	r3, r1
   1c418:	push	{r4, r5, r6, lr}
   1c41c:	ldrh	r1, [r2, #14]
   1c420:	cmp	r1, #5
   1c424:	beq	1c43c <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   1c428:	ldr	r3, [pc, #64]	; 1c470 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   1c42c:	ldr	r2, [pc, #64]	; 1c474 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   1c430:	ldr	r1, [pc, #64]	; 1c478 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   1c434:	ldr	r0, [pc, #64]	; 1c47c <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   1c438:	bl	12ab4 <__assert_fail@plt>
   1c43c:	ldr	r2, [r2, #20]
   1c440:	cmn	r2, #-1073741823	; 0xc0000001
   1c444:	movhi	r5, #0
   1c448:	bhi	1c468 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   1c44c:	ldr	r1, [r0, #16]
   1c450:	mov	r4, r0
   1c454:	bl	1a94c <flatcc_builder_default_alloc@@Base+0x4cc>
   1c458:	subs	r5, r0, #0
   1c45c:	beq	1c468 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   1c460:	mov	r0, r4
   1c464:	bl	1a374 <time_struct_buffer@@Base+0x154>
   1c468:	mov	r0, r5
   1c46c:	pop	{r4, r5, r6, pc}
   1c470:	andeq	r1, r2, ip, asr sp
   1c474:	ldrdeq	r0, [r0], -r5
   1c478:	strdeq	r1, [r2], -sp
   1c47c:	muleq	r2, r0, r0

0001c480 <flatcc_builder_offset_vector_edit@@Base>:
   1c480:	ldr	r0, [r0, #16]
   1c484:	bx	lr

0001c488 <flatcc_builder_offset_vector_count@@Base>:
   1c488:	ldr	r3, [r0, #32]
   1c48c:	ldr	r0, [r3, #20]
   1c490:	bx	lr

0001c494 <flatcc_builder_create_union_vector_direct@@Base>:
   1c494:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1c498:	mov	r4, r0
   1c49c:	ldr	r5, [sp, #32]
   1c4a0:	cmn	r5, #-1073741823	; 0xc0000001
   1c4a4:	bls	1c4c0 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   1c4a8:	mov	r3, #0
   1c4ac:	str	r3, [r4]
   1c4b0:	str	r3, [r4, #4]
   1c4b4:	mov	r0, r4
   1c4b8:	add	sp, sp, #8
   1c4bc:	pop	{r4, r5, r6, r7, r8, pc}
   1c4c0:	mov	r7, r1
   1c4c4:	mov	r8, r2
   1c4c8:	mov	r1, r3
   1c4cc:	mov	r0, r7
   1c4d0:	mov	r3, r2
   1c4d4:	mov	r2, r5
   1c4d8:	bl	1a94c <flatcc_builder_default_alloc@@Base+0x4cc>
   1c4dc:	subs	r6, r0, #0
   1c4e0:	beq	1c4a8 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   1c4e4:	mvn	r3, #0
   1c4e8:	str	r3, [sp, #4]
   1c4ec:	mov	r3, #1
   1c4f0:	str	r3, [sp]
   1c4f4:	mov	r2, r5
   1c4f8:	mov	r1, r8
   1c4fc:	mov	r0, r7
   1c500:	bl	1c1d4 <flatcc_builder_create_vector@@Base>
   1c504:	stm	r4, {r0, r6}
   1c508:	b	1c4b4 <flatcc_builder_create_union_vector_direct@@Base+0x20>

0001c50c <flatcc_builder_create_union_vector@@Base>:
   1c50c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1c510:	mov	r7, r0
   1c514:	mov	r0, r1
   1c518:	mov	r5, r1
   1c51c:	mov	r6, r2
   1c520:	mov	r8, r3
   1c524:	bl	1b99c <flatcc_builder_start_offset_vector@@Base>
   1c528:	subs	r4, r0, #0
   1c52c:	beq	1c548 <flatcc_builder_create_union_vector@@Base+0x3c>
   1c530:	mov	r3, #0
   1c534:	str	r3, [r7]
   1c538:	str	r3, [r7, #4]
   1c53c:	mov	r0, r7
   1c540:	add	sp, sp, #16
   1c544:	pop	{r4, r5, r6, r7, r8, pc}
   1c548:	mov	r1, r8
   1c54c:	mov	r0, r5
   1c550:	bl	1b598 <flatcc_builder_extend_offset_vector@@Base>
   1c554:	cmp	r0, #0
   1c558:	beq	1c530 <flatcc_builder_create_union_vector@@Base+0x24>
   1c55c:	mov	r1, r8
   1c560:	mov	r0, r5
   1c564:	bl	1a32c <time_struct_buffer@@Base+0x10c>
   1c568:	subs	r2, r0, #0
   1c56c:	movne	ip, r6
   1c570:	ldrne	r3, [r5, #16]
   1c574:	movne	r1, r4
   1c578:	beq	1c530 <flatcc_builder_create_union_vector@@Base+0x24>
   1c57c:	cmp	r1, r8
   1c580:	add	ip, ip, #8
   1c584:	bne	1c5b4 <flatcc_builder_create_union_vector@@Base+0xa8>
   1c588:	str	r1, [sp]
   1c58c:	add	r0, sp, #8
   1c590:	mov	r1, r5
   1c594:	bl	1c494 <flatcc_builder_create_union_vector_direct@@Base>
   1c598:	ldr	r6, [sp, #8]
   1c59c:	ldr	r4, [sp, #12]
   1c5a0:	mov	r0, r5
   1c5a4:	bl	1a374 <time_struct_buffer@@Base+0x154>
   1c5a8:	str	r6, [r7]
   1c5ac:	str	r4, [r7, #4]
   1c5b0:	b	1c53c <flatcc_builder_create_union_vector@@Base+0x30>
   1c5b4:	ldrb	r0, [ip, #-8]
   1c5b8:	strb	r0, [r2, r1]
   1c5bc:	ldr	r0, [ip, #-4]
   1c5c0:	str	r0, [r3, r1, lsl #2]
   1c5c4:	add	r1, r1, #1
   1c5c8:	b	1c57c <flatcc_builder_create_union_vector@@Base+0x70>

0001c5cc <flatcc_builder_start_union_vector@@Base>:
   1c5cc:	push	{r4, r5, r6, lr}
   1c5d0:	mov	r1, #4
   1c5d4:	mov	r5, r0
   1c5d8:	bl	1a5e8 <flatcc_builder_default_alloc@@Base+0x168>
   1c5dc:	subs	r4, r0, #0
   1c5e0:	mvnne	r4, #0
   1c5e4:	bne	1c60c <flatcc_builder_start_union_vector@@Base+0x40>
   1c5e8:	ldr	r3, [r5, #32]
   1c5ec:	mov	r2, #8
   1c5f0:	mvn	r1, #3
   1c5f4:	str	r2, [r3, #16]
   1c5f8:	mov	r2, #7
   1c5fc:	str	r4, [r3, #20]
   1c600:	strh	r2, [r3, #14]
   1c604:	mov	r0, r5
   1c608:	bl	1a2ac <time_struct_buffer@@Base+0x8c>
   1c60c:	mov	r0, r4
   1c610:	pop	{r4, r5, r6, pc}

0001c614 <flatcc_builder_end_union_vector@@Base>:
   1c614:	ldr	r3, [r1, #32]
   1c618:	push	{r4, r5, r6, r7, lr}
   1c61c:	sub	sp, sp, #20
   1c620:	ldrh	r2, [r3, #14]
   1c624:	cmp	r2, #7
   1c628:	beq	1c640 <flatcc_builder_end_union_vector@@Base+0x2c>
   1c62c:	ldr	r3, [pc, #156]	; 1c6d0 <flatcc_builder_end_union_vector@@Base+0xbc>
   1c630:	ldr	r2, [pc, #156]	; 1c6d4 <flatcc_builder_end_union_vector@@Base+0xc0>
   1c634:	ldr	r1, [pc, #156]	; 1c6d8 <flatcc_builder_end_union_vector@@Base+0xc4>
   1c638:	ldr	r0, [pc, #156]	; 1c6dc <flatcc_builder_end_union_vector@@Base+0xc8>
   1c63c:	bl	12ab4 <__assert_fail@plt>
   1c640:	ldr	r7, [r3, #20]
   1c644:	mov	r5, r1
   1c648:	mov	r4, r0
   1c64c:	lsl	r6, r7, #2
   1c650:	add	r1, r6, r7
   1c654:	mov	r0, r5
   1c658:	bl	1a32c <time_struct_buffer@@Base+0x10c>
   1c65c:	subs	r3, r0, #0
   1c660:	streq	r3, [r4]
   1c664:	streq	r3, [r4, #4]
   1c668:	addne	r2, r3, r6
   1c66c:	ldrne	r0, [r5, #16]
   1c670:	movne	r1, #0
   1c674:	bne	1c698 <flatcc_builder_end_union_vector@@Base+0x84>
   1c678:	mov	r0, r4
   1c67c:	add	sp, sp, #20
   1c680:	pop	{r4, r5, r6, r7, pc}
   1c684:	ldrb	ip, [r0, #-8]
   1c688:	strb	ip, [r2, r1]
   1c68c:	ldr	ip, [r0, #-4]
   1c690:	str	ip, [r3, r1, lsl #2]
   1c694:	add	r1, r1, #1
   1c698:	cmp	r1, r7
   1c69c:	add	r0, r0, #8
   1c6a0:	bne	1c684 <flatcc_builder_end_union_vector@@Base+0x70>
   1c6a4:	str	r1, [sp]
   1c6a8:	add	r0, sp, #8
   1c6ac:	mov	r1, r5
   1c6b0:	bl	1c494 <flatcc_builder_create_union_vector_direct@@Base>
   1c6b4:	ldr	r7, [sp, #8]
   1c6b8:	ldr	r6, [sp, #12]
   1c6bc:	mov	r0, r5
   1c6c0:	bl	1a374 <time_struct_buffer@@Base+0x154>
   1c6c4:	str	r7, [r4]
   1c6c8:	str	r6, [r4, #4]
   1c6cc:	b	1c678 <flatcc_builder_end_union_vector@@Base+0x64>
   1c6d0:	andeq	r1, r2, r8, lsl #27
   1c6d4:	andeq	r0, r0, r1, asr r6
   1c6d8:	strdeq	r1, [r2], -sp
   1c6dc:	ldrdeq	r2, [r2], -sl

0001c6e0 <flatcc_builder_union_vector_edit@@Base>:
   1c6e0:	ldr	r0, [r0, #16]
   1c6e4:	bx	lr

0001c6e8 <flatcc_builder_union_vector_count@@Base>:
   1c6e8:	ldr	r3, [r0, #32]
   1c6ec:	ldr	r0, [r3, #20]
   1c6f0:	bx	lr

0001c6f4 <flatcc_builder_extend_union_vector@@Base>:
   1c6f4:	push	{r4, r5, r6, lr}
   1c6f8:	mvn	r2, #-536870912	; 0xe0000000
   1c6fc:	mov	r4, r0
   1c700:	ldr	r0, [r0, #32]
   1c704:	mov	r5, r1
   1c708:	bl	1a8f8 <flatcc_builder_default_alloc@@Base+0x478>
   1c70c:	cmp	r0, #0
   1c710:	bne	1c724 <flatcc_builder_extend_union_vector@@Base+0x30>
   1c714:	lsl	r1, r5, #3
   1c718:	mov	r0, r4
   1c71c:	pop	{r4, r5, r6, lr}
   1c720:	b	1a32c <time_struct_buffer@@Base+0x10c>
   1c724:	mov	r0, #0
   1c728:	pop	{r4, r5, r6, pc}

0001c72c <flatcc_builder_truncate_union_vector@@Base>:
   1c72c:	ldr	r3, [r0, #32]
   1c730:	push	{r4, lr}
   1c734:	ldrh	r2, [r3, #14]
   1c738:	cmp	r2, #7
   1c73c:	beq	1c754 <flatcc_builder_truncate_union_vector@@Base+0x28>
   1c740:	ldr	r3, [pc, #68]	; 1c78c <flatcc_builder_truncate_union_vector@@Base+0x60>
   1c744:	ldr	r2, [pc, #68]	; 1c790 <flatcc_builder_truncate_union_vector@@Base+0x64>
   1c748:	ldr	r1, [pc, #68]	; 1c794 <flatcc_builder_truncate_union_vector@@Base+0x68>
   1c74c:	ldr	r0, [pc, #68]	; 1c798 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   1c750:	bl	12ab4 <__assert_fail@plt>
   1c754:	ldr	r2, [r3, #20]
   1c758:	cmp	r2, r1
   1c75c:	ldrcc	r3, [pc, #40]	; 1c78c <flatcc_builder_truncate_union_vector@@Base+0x60>
   1c760:	ldrcc	r2, [pc, #52]	; 1c79c <flatcc_builder_truncate_union_vector@@Base+0x70>
   1c764:	ldrcc	r1, [pc, #40]	; 1c794 <flatcc_builder_truncate_union_vector@@Base+0x68>
   1c768:	ldrcc	r0, [pc, #48]	; 1c7a0 <flatcc_builder_truncate_union_vector@@Base+0x74>
   1c76c:	bcc	1c750 <flatcc_builder_truncate_union_vector@@Base+0x24>
   1c770:	sub	r2, r2, r1
   1c774:	str	r2, [r3, #20]
   1c778:	ldr	r3, [r3, #16]
   1c77c:	mul	r1, r3, r1
   1c780:	bl	1a3e0 <time_struct_buffer@@Base+0x1c0>
   1c784:	mov	r0, #0
   1c788:	pop	{r4, pc}
   1c78c:	andeq	r1, r2, r8, lsr #27
   1c790:	andeq	r0, r0, r1, lsl #13
   1c794:	strdeq	r1, [r2], -sp
   1c798:	ldrdeq	r2, [r2], -sl
   1c79c:	andeq	r0, r0, r2, lsl #13
   1c7a0:	andeq	r2, r2, r3, lsl r1

0001c7a4 <flatcc_builder_union_vector_push@@Base>:
   1c7a4:	push	{r0, r1, r4, lr}
   1c7a8:	stm	sp, {r1, r2}
   1c7ac:	ldr	r2, [r0, #32]
   1c7b0:	ldrh	r3, [r2, #14]
   1c7b4:	cmp	r3, #7
   1c7b8:	beq	1c7d0 <flatcc_builder_union_vector_push@@Base+0x2c>
   1c7bc:	ldr	r3, [pc, #72]	; 1c80c <flatcc_builder_union_vector_push@@Base+0x68>
   1c7c0:	ldr	r2, [pc, #72]	; 1c810 <flatcc_builder_union_vector_push@@Base+0x6c>
   1c7c4:	ldr	r1, [pc, #72]	; 1c814 <flatcc_builder_union_vector_push@@Base+0x70>
   1c7c8:	ldr	r0, [pc, #72]	; 1c818 <flatcc_builder_union_vector_push@@Base+0x74>
   1c7cc:	bl	12ab4 <__assert_fail@plt>
   1c7d0:	ldr	r3, [r2, #20]
   1c7d4:	cmn	r3, #-536870911	; 0xe0000001
   1c7d8:	moveq	r3, #0
   1c7dc:	beq	1c800 <flatcc_builder_union_vector_push@@Base+0x5c>
   1c7e0:	add	r3, r3, #1
   1c7e4:	mov	r1, #8
   1c7e8:	str	r3, [r2, #20]
   1c7ec:	bl	1a32c <time_struct_buffer@@Base+0x10c>
   1c7f0:	subs	r3, r0, #0
   1c7f4:	movne	r4, sp
   1c7f8:	ldmne	r4, {r0, r1}
   1c7fc:	stmne	r3, {r0, r1}
   1c800:	mov	r0, r3
   1c804:	add	sp, sp, #8
   1c808:	pop	{r4, pc}
   1c80c:	andeq	r1, r2, sp, asr #27
   1c810:	andeq	r0, r0, sp, lsl #13
   1c814:	strdeq	r1, [r2], -sp
   1c818:	ldrdeq	r2, [r2], -sl

0001c81c <flatcc_builder_append_union_vector@@Base>:
   1c81c:	push	{r4, r5, r6, lr}
   1c820:	mov	r4, r0
   1c824:	ldr	r0, [r0, #32]
   1c828:	ldrh	r3, [r0, #14]
   1c82c:	cmp	r3, #7
   1c830:	beq	1c848 <flatcc_builder_append_union_vector@@Base+0x2c>
   1c834:	ldr	r3, [pc, #68]	; 1c880 <flatcc_builder_append_union_vector@@Base+0x64>
   1c838:	ldr	r2, [pc, #68]	; 1c884 <flatcc_builder_append_union_vector@@Base+0x68>
   1c83c:	ldr	r1, [pc, #68]	; 1c888 <flatcc_builder_append_union_vector@@Base+0x6c>
   1c840:	ldr	r0, [pc, #68]	; 1c88c <flatcc_builder_append_union_vector@@Base+0x70>
   1c844:	bl	12ab4 <__assert_fail@plt>
   1c848:	mov	r5, r2
   1c84c:	mov	r6, r1
   1c850:	mvn	r2, #-536870912	; 0xe0000000
   1c854:	mov	r1, r5
   1c858:	bl	1a8f8 <flatcc_builder_default_alloc@@Base+0x478>
   1c85c:	cmp	r0, #0
   1c860:	bne	1c878 <flatcc_builder_append_union_vector@@Base+0x5c>
   1c864:	lsl	r2, r5, #3
   1c868:	mov	r1, r6
   1c86c:	mov	r0, r4
   1c870:	pop	{r4, r5, r6, lr}
   1c874:	b	1a400 <time_struct_buffer@@Base+0x1e0>
   1c878:	mov	r0, #0
   1c87c:	pop	{r4, r5, r6, pc}
   1c880:	andeq	r1, r2, lr, ror #27
   1c884:	muleq	r0, ip, r6
   1c888:	strdeq	r1, [r2], -sp
   1c88c:	ldrdeq	r2, [r2], -sl

0001c890 <flatcc_builder_create_string@@Base>:
   1c890:	push	{lr}		; (str lr, [sp, #-4]!)
   1c894:	sub	sp, sp, #84	; 0x54
   1c898:	ldr	r3, [r0, #136]	; 0x88
   1c89c:	mov	ip, #4
   1c8a0:	cmp	r2, #0
   1c8a4:	str	ip, [sp, #8]
   1c8a8:	add	lr, sp, ip
   1c8ac:	str	ip, [sp, #20]
   1c8b0:	sub	r3, r3, r2
   1c8b4:	mov	ip, #1
   1c8b8:	str	ip, [sp, #12]
   1c8bc:	strne	r2, [sp, #28]
   1c8c0:	addne	ip, r2, #4
   1c8c4:	str	r2, [sp, #4]
   1c8c8:	sub	r3, r3, #1
   1c8cc:	movne	r2, #2
   1c8d0:	strne	ip, [sp, #8]
   1c8d4:	strne	r2, [sp, #12]
   1c8d8:	and	r3, r3, #3
   1c8dc:	ldr	r2, [sp, #8]
   1c8e0:	add	r3, r3, #1
   1c8e4:	add	r2, r2, r3
   1c8e8:	str	r2, [sp, #8]
   1c8ec:	ldr	r2, [sp, #12]
   1c8f0:	strne	r1, [sp, #24]
   1c8f4:	add	r2, r2, #1
   1c8f8:	add	r1, sp, #80	; 0x50
   1c8fc:	add	r1, r1, r2, lsl #3
   1c900:	ldr	ip, [pc, #28]	; 1c924 <flatcc_builder_create_string@@Base+0x94>
   1c904:	str	lr, [sp, #16]
   1c908:	str	r3, [r1, #-68]	; 0xffffffbc
   1c90c:	str	ip, [r1, #-72]	; 0xffffffb8
   1c910:	add	r1, sp, #8
   1c914:	str	r2, [sp, #12]
   1c918:	bl	1a878 <flatcc_builder_default_alloc@@Base+0x3f8>
   1c91c:	add	sp, sp, #84	; 0x54
   1c920:	pop	{pc}		; (ldr pc, [sp], #4)
   1c924:	andeq	r1, r2, r7, lsl r8

0001c928 <flatcc_builder_create_string_str@@Base>:
   1c928:	push	{r4, r5, r6, lr}
   1c92c:	mov	r5, r0
   1c930:	mov	r0, r1
   1c934:	mov	r4, r1
   1c938:	bl	12a3c <strlen@plt>
   1c93c:	mov	r1, r4
   1c940:	mov	r2, r0
   1c944:	mov	r0, r5
   1c948:	pop	{r4, r5, r6, lr}
   1c94c:	b	1c890 <flatcc_builder_create_string@@Base>

0001c950 <flatcc_builder_create_string_strn@@Base>:
   1c950:	push	{r4, r5, r6, lr}
   1c954:	mov	r4, r1
   1c958:	mov	r6, r0
   1c95c:	mov	r1, #0
   1c960:	mov	r0, r4
   1c964:	mov	r5, r2
   1c968:	bl	12a78 <memchr@plt>
   1c96c:	mov	r1, r4
   1c970:	cmp	r0, #0
   1c974:	subne	r5, r0, r4
   1c978:	mov	r2, r5
   1c97c:	mov	r0, r6
   1c980:	pop	{r4, r5, r6, lr}
   1c984:	b	1c890 <flatcc_builder_create_string@@Base>

0001c988 <flatcc_builder_end_string@@Base>:
   1c988:	ldr	r3, [r0, #32]
   1c98c:	push	{r4, r5, r6, lr}
   1c990:	ldrh	r2, [r3, #14]
   1c994:	cmp	r2, #6
   1c998:	beq	1c9b0 <flatcc_builder_end_string@@Base+0x28>
   1c99c:	ldr	r3, [pc, #80]	; 1c9f4 <flatcc_builder_end_string@@Base+0x6c>
   1c9a0:	ldr	r2, [pc, #80]	; 1c9f8 <flatcc_builder_end_string@@Base+0x70>
   1c9a4:	ldr	r1, [pc, #80]	; 1c9fc <flatcc_builder_end_string@@Base+0x74>
   1c9a8:	ldr	r0, [pc, #80]	; 1ca00 <flatcc_builder_end_string@@Base+0x78>
   1c9ac:	bl	12ab4 <__assert_fail@plt>
   1c9b0:	ldr	r2, [r3, #20]
   1c9b4:	ldr	r3, [r0, #20]
   1c9b8:	mov	r4, r0
   1c9bc:	cmp	r2, r3
   1c9c0:	ldrne	r3, [pc, #44]	; 1c9f4 <flatcc_builder_end_string@@Base+0x6c>
   1c9c4:	ldrne	r2, [pc, #56]	; 1ca04 <flatcc_builder_end_string@@Base+0x7c>
   1c9c8:	ldrne	r1, [pc, #44]	; 1c9fc <flatcc_builder_end_string@@Base+0x74>
   1c9cc:	ldrne	r0, [pc, #52]	; 1ca08 <flatcc_builder_end_string@@Base+0x80>
   1c9d0:	bne	1c9ac <flatcc_builder_end_string@@Base+0x24>
   1c9d4:	ldr	r1, [r0, #16]
   1c9d8:	bl	1c890 <flatcc_builder_create_string@@Base>
   1c9dc:	subs	r5, r0, #0
   1c9e0:	beq	1c9ec <flatcc_builder_end_string@@Base+0x64>
   1c9e4:	mov	r0, r4
   1c9e8:	bl	1a374 <time_struct_buffer@@Base+0x154>
   1c9ec:	mov	r0, r5
   1c9f0:	pop	{r4, r5, r6, pc}
   1c9f4:	andeq	r1, r2, r1, lsl lr
   1c9f8:	andeq	r0, r0, r4, asr #13
   1c9fc:	strdeq	r1, [r2], -sp
   1ca00:	andeq	r2, r2, r3, asr #1
   1ca04:	andeq	r0, r0, r5, asr #13
   1ca08:	andeq	r2, r2, ip, lsl #4

0001ca0c <flatcc_builder_string_edit@@Base>:
   1ca0c:	ldr	r0, [r0, #16]
   1ca10:	bx	lr

0001ca14 <flatcc_builder_string_len@@Base>:
   1ca14:	ldr	r3, [r0, #32]
   1ca18:	ldr	r0, [r3, #20]
   1ca1c:	bx	lr

0001ca20 <flatcc_builder_table_add@@Base>:
   1ca20:	push	{r4, r5, r6, r7, r8, lr}
   1ca24:	mov	r4, r0
   1ca28:	ldr	r0, [r0, #32]
   1ca2c:	ldrh	r0, [r0, #14]
   1ca30:	cmp	r0, #3
   1ca34:	beq	1ca4c <flatcc_builder_table_add@@Base+0x2c>
   1ca38:	ldr	r3, [pc, #232]	; 1cb28 <flatcc_builder_table_add@@Base+0x108>
   1ca3c:	ldr	r2, [pc, #232]	; 1cb2c <flatcc_builder_table_add@@Base+0x10c>
   1ca40:	ldr	r1, [pc, #232]	; 1cb30 <flatcc_builder_table_add@@Base+0x110>
   1ca44:	ldr	r0, [pc, #232]	; 1cb34 <flatcc_builder_table_add@@Base+0x114>
   1ca48:	bl	12ab4 <__assert_fail@plt>
   1ca4c:	ldr	r0, [pc, #228]	; 1cb38 <flatcc_builder_table_add@@Base+0x118>
   1ca50:	cmp	r1, r0
   1ca54:	ldrhi	r3, [pc, #204]	; 1cb28 <flatcc_builder_table_add@@Base+0x108>
   1ca58:	ldrhi	r2, [pc, #220]	; 1cb3c <flatcc_builder_table_add@@Base+0x11c>
   1ca5c:	ldrhi	r1, [pc, #204]	; 1cb30 <flatcc_builder_table_add@@Base+0x110>
   1ca60:	ldrhi	r0, [pc, #216]	; 1cb40 <flatcc_builder_table_add@@Base+0x120>
   1ca64:	bhi	1ca48 <flatcc_builder_table_add@@Base+0x28>
   1ca68:	ldrh	r0, [r4, #130]	; 0x82
   1ca6c:	lsl	r7, r1, #1
   1ca70:	cmp	r0, r3
   1ca74:	ldr	r0, [r4, #4]
   1ca78:	strhcc	r3, [r4, #130]	; 0x82
   1ca7c:	ldrh	r5, [r0, r7]
   1ca80:	cmp	r5, #0
   1ca84:	ldrne	r3, [pc, #156]	; 1cb28 <flatcc_builder_table_add@@Base+0x108>
   1ca88:	ldrne	r2, [pc, #180]	; 1cb44 <flatcc_builder_table_add@@Base+0x124>
   1ca8c:	ldrne	r1, [pc, #156]	; 1cb30 <flatcc_builder_table_add@@Base+0x110>
   1ca90:	ldrne	r0, [pc, #176]	; 1cb48 <flatcc_builder_table_add@@Base+0x128>
   1ca94:	bne	1ca48 <flatcc_builder_table_add@@Base+0x28>
   1ca98:	ldr	ip, [r4, #12]
   1ca9c:	ldr	lr, [pc, #168]	; 1cb4c <flatcc_builder_table_add@@Base+0x12c>
   1caa0:	eor	ip, ip, r1
   1caa4:	ldr	r6, [r4, #20]
   1caa8:	mul	ip, lr, ip
   1caac:	sub	r0, r3, #1
   1cab0:	eor	ip, ip, r2
   1cab4:	rsb	r3, r3, #0
   1cab8:	add	r0, r0, r6
   1cabc:	and	r6, r0, r3
   1cac0:	mul	ip, lr, ip
   1cac4:	ldr	r3, [r4, #24]
   1cac8:	uxth	r8, r1
   1cacc:	add	r1, r2, r6
   1cad0:	cmp	r1, r3
   1cad4:	str	ip, [r4, #12]
   1cad8:	str	r1, [r4, #20]
   1cadc:	bcs	1cb08 <flatcc_builder_table_add@@Base+0xe8>
   1cae0:	ldr	r3, [r4, #4]
   1cae4:	add	r2, r6, #4
   1cae8:	ldr	r0, [r4, #16]
   1caec:	strh	r2, [r3, r7]
   1caf0:	ldrh	r3, [r4, #8]
   1caf4:	add	r0, r0, r6
   1caf8:	cmp	r3, r8
   1cafc:	addls	r1, r8, #1
   1cb00:	strhls	r1, [r4, #8]
   1cb04:	pop	{r4, r5, r6, r7, r8, pc}
   1cb08:	ldr	r2, [pc, #64]	; 1cb50 <flatcc_builder_table_add@@Base+0x130>
   1cb0c:	add	r1, r1, #1
   1cb10:	mov	r0, r4
   1cb14:	bl	1a2dc <time_struct_buffer@@Base+0xbc>
   1cb18:	cmp	r0, #0
   1cb1c:	beq	1cae0 <flatcc_builder_table_add@@Base+0xc0>
   1cb20:	mov	r0, r5
   1cb24:	pop	{r4, r5, r6, r7, r8, pc}
   1cb28:	andeq	r1, r2, fp, lsr #28
   1cb2c:	andeq	r0, r0, sp, ror #13
   1cb30:	strdeq	r1, [r2], -sp
   1cb34:	muleq	r2, ip, r1
   1cb38:	strdeq	r7, [r0], -ip
   1cb3c:	andeq	r0, r0, lr, ror #13
   1cb40:	andeq	r2, r2, r0, lsr r2
   1cb44:	strdeq	r0, [r0], -r8
   1cb48:	andeq	r1, r2, sl, ror #30
   1cb4c:			; <UNDEFINED> instruction: 0x9e3779b1
   1cb50:	strdeq	pc, [r0], -ip

0001cb54 <flatcc_builder_table_edit@@Base>:
   1cb54:	ldr	r3, [r0, #32]
   1cb58:	ldrh	r3, [r3, #14]
   1cb5c:	cmp	r3, #3
   1cb60:	beq	1cb7c <flatcc_builder_table_edit@@Base+0x28>
   1cb64:	push	{r4, lr}
   1cb68:	ldr	r3, [pc, #32]	; 1cb90 <flatcc_builder_table_edit@@Base+0x3c>
   1cb6c:	ldr	r2, [pc, #32]	; 1cb94 <flatcc_builder_table_edit@@Base+0x40>
   1cb70:	ldr	r1, [pc, #32]	; 1cb98 <flatcc_builder_table_edit@@Base+0x44>
   1cb74:	ldr	r0, [pc, #32]	; 1cb9c <flatcc_builder_table_edit@@Base+0x48>
   1cb78:	bl	12ab4 <__assert_fail@plt>
   1cb7c:	ldr	r3, [r0, #20]
   1cb80:	ldr	r0, [r0, #16]
   1cb84:	sub	r1, r3, r1
   1cb88:	add	r0, r0, r1
   1cb8c:	bx	lr
   1cb90:	andeq	r1, r2, r4, asr #28
   1cb94:	andeq	r0, r0, r2, lsl #14
   1cb98:	strdeq	r1, [r2], -sp
   1cb9c:	muleq	r2, ip, r1

0001cba0 <flatcc_builder_table_add_copy@@Base>:
   1cba0:	push	{r4, r5, r6, lr}
   1cba4:	mov	r4, r3
   1cba8:	mov	r6, r2
   1cbac:	ldrh	r3, [sp, #16]
   1cbb0:	mov	r2, r4
   1cbb4:	bl	1ca20 <flatcc_builder_table_add@@Base>
   1cbb8:	subs	r5, r0, #0
   1cbbc:	beq	1cbcc <flatcc_builder_table_add_copy@@Base+0x2c>
   1cbc0:	mov	r2, r4
   1cbc4:	mov	r1, r6
   1cbc8:	bl	129dc <memcpy@plt>
   1cbcc:	mov	r0, r5
   1cbd0:	pop	{r4, r5, r6, pc}

0001cbd4 <flatcc_builder_table_add_offset@@Base>:
   1cbd4:	ldr	r3, [r0, #32]
   1cbd8:	push	{r4, r5, r6, r7, r8, lr}
   1cbdc:	ldrh	r3, [r3, #14]
   1cbe0:	cmp	r3, #3
   1cbe4:	beq	1cbfc <flatcc_builder_table_add_offset@@Base+0x28>
   1cbe8:	ldr	r3, [pc, #228]	; 1ccd4 <flatcc_builder_table_add_offset@@Base+0x100>
   1cbec:	ldr	r2, [pc, #228]	; 1ccd8 <flatcc_builder_table_add_offset@@Base+0x104>
   1cbf0:	ldr	r1, [pc, #228]	; 1ccdc <flatcc_builder_table_add_offset@@Base+0x108>
   1cbf4:	ldr	r0, [pc, #228]	; 1cce0 <flatcc_builder_table_add_offset@@Base+0x10c>
   1cbf8:	bl	12ab4 <__assert_fail@plt>
   1cbfc:	ldr	r3, [pc, #224]	; 1cce4 <flatcc_builder_table_add_offset@@Base+0x110>
   1cc00:	cmp	r1, r3
   1cc04:	ldrhi	r3, [pc, #200]	; 1ccd4 <flatcc_builder_table_add_offset@@Base+0x100>
   1cc08:	ldrhi	r2, [pc, #216]	; 1cce8 <flatcc_builder_table_add_offset@@Base+0x114>
   1cc0c:	ldrhi	r1, [pc, #200]	; 1ccdc <flatcc_builder_table_add_offset@@Base+0x108>
   1cc10:	ldrhi	r0, [pc, #212]	; 1ccec <flatcc_builder_table_add_offset@@Base+0x118>
   1cc14:	bhi	1cbf8 <flatcc_builder_table_add_offset@@Base+0x24>
   1cc18:	ldr	r3, [r0, #4]
   1cc1c:	lsl	r7, r1, #1
   1cc20:	mov	r4, r0
   1cc24:	ldrh	r6, [r3, r7]
   1cc28:	cmp	r6, #0
   1cc2c:	ldrne	r3, [pc, #160]	; 1ccd4 <flatcc_builder_table_add_offset@@Base+0x100>
   1cc30:	ldrne	r2, [pc, #184]	; 1ccf0 <flatcc_builder_table_add_offset@@Base+0x11c>
   1cc34:	ldrne	r1, [pc, #160]	; 1ccdc <flatcc_builder_table_add_offset@@Base+0x108>
   1cc38:	ldrne	r0, [pc, #180]	; 1ccf4 <flatcc_builder_table_add_offset@@Base+0x120>
   1cc3c:	bne	1cbf8 <flatcc_builder_table_add_offset@@Base+0x24>
   1cc40:	ldr	r3, [r0, #12]
   1cc44:	ldr	r2, [pc, #172]	; 1ccf8 <flatcc_builder_table_add_offset@@Base+0x124>
   1cc48:	eor	r3, r3, r1
   1cc4c:	ldr	r8, [r0, #20]
   1cc50:	mul	r3, r2, r3
   1cc54:	add	r8, r8, #3
   1cc58:	eor	r3, r3, #4
   1cc5c:	bic	r8, r8, #3
   1cc60:	mul	r3, r2, r3
   1cc64:	uxth	r5, r1
   1cc68:	str	r3, [r0, #12]
   1cc6c:	ldr	r3, [r0, #24]
   1cc70:	add	r1, r8, #4
   1cc74:	cmp	r1, r3
   1cc78:	str	r1, [r0, #20]
   1cc7c:	bhi	1ccbc <flatcc_builder_table_add_offset@@Base+0xe8>
   1cc80:	ldr	r3, [r4, #4]
   1cc84:	uxth	r2, r8
   1cc88:	add	r1, r2, #4
   1cc8c:	strh	r1, [r3, r7]
   1cc90:	ldrh	r3, [r4, #8]
   1cc94:	ldr	r0, [r4, #16]
   1cc98:	cmp	r3, r5
   1cc9c:	ldr	r3, [r4]
   1cca0:	addls	r1, r5, #1
   1cca4:	strhls	r1, [r4, #8]
   1cca8:	add	r1, r3, #2
   1ccac:	str	r1, [r4]
   1ccb0:	add	r0, r0, r8
   1ccb4:	strh	r2, [r3]
   1ccb8:	pop	{r4, r5, r6, r7, r8, pc}
   1ccbc:	ldr	r2, [pc, #56]	; 1ccfc <flatcc_builder_table_add_offset@@Base+0x128>
   1ccc0:	bl	1a2dc <time_struct_buffer@@Base+0xbc>
   1ccc4:	cmp	r0, #0
   1ccc8:	beq	1cc80 <flatcc_builder_table_add_offset@@Base+0xac>
   1cccc:	mov	r0, r6
   1ccd0:	pop	{r4, r5, r6, r7, r8, pc}
   1ccd4:	andeq	r1, r2, lr, asr lr
   1ccd8:	andeq	r0, r0, r3, lsl r7
   1ccdc:	strdeq	r1, [r2], -sp
   1cce0:	muleq	r2, ip, r1
   1cce4:	strdeq	r7, [r0], -ip
   1cce8:	andeq	r0, r0, r4, lsl r7
   1ccec:	andeq	r2, r2, r0, lsr r2
   1ccf0:	andeq	r0, r0, fp, lsl r7
   1ccf4:	andeq	r1, r2, sl, ror #30
   1ccf8:			; <UNDEFINED> instruction: 0x9e3779b1
   1ccfc:	strdeq	pc, [r0], -ip

0001cd00 <flatcc_builder_table_add_union@@Base>:
   1cd00:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cd04:	add	ip, sp, #8
   1cd08:	stmdb	ip, {r2, r3}
   1cd0c:	ldr	r3, [r0, #32]
   1cd10:	ldrb	r5, [sp]
   1cd14:	ldr	r4, [sp, #4]
   1cd18:	ldrh	r3, [r3, #14]
   1cd1c:	cmp	r3, #3
   1cd20:	beq	1cd38 <flatcc_builder_table_add_union@@Base+0x38>
   1cd24:	ldr	r3, [pc, #156]	; 1cdc8 <flatcc_builder_table_add_union@@Base+0xc8>
   1cd28:	ldr	r2, [pc, #156]	; 1cdcc <flatcc_builder_table_add_union@@Base+0xcc>
   1cd2c:	ldr	r1, [pc, #156]	; 1cdd0 <flatcc_builder_table_add_union@@Base+0xd0>
   1cd30:	ldr	r0, [pc, #156]	; 1cdd4 <flatcc_builder_table_add_union@@Base+0xd4>
   1cd34:	bl	12ab4 <__assert_fail@plt>
   1cd38:	cmp	r5, #0
   1cd3c:	mov	r6, r0
   1cd40:	mov	r7, r1
   1cd44:	bne	1cd64 <flatcc_builder_table_add_union@@Base+0x64>
   1cd48:	cmp	r4, #0
   1cd4c:	beq	1cd8c <flatcc_builder_table_add_union@@Base+0x8c>
   1cd50:	ldr	r3, [pc, #112]	; 1cdc8 <flatcc_builder_table_add_union@@Base+0xc8>
   1cd54:	ldr	r2, [pc, #124]	; 1cdd8 <flatcc_builder_table_add_union@@Base+0xd8>
   1cd58:	ldr	r1, [pc, #112]	; 1cdd0 <flatcc_builder_table_add_union@@Base+0xd0>
   1cd5c:	ldr	r0, [pc, #120]	; 1cddc <flatcc_builder_table_add_union@@Base+0xdc>
   1cd60:	b	1cd34 <flatcc_builder_table_add_union@@Base+0x34>
   1cd64:	cmp	r4, #0
   1cd68:	beq	1cd8c <flatcc_builder_table_add_union@@Base+0x8c>
   1cd6c:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   1cd70:	cmp	r0, #0
   1cd74:	strne	r4, [r0]
   1cd78:	ldreq	r3, [pc, #72]	; 1cdc8 <flatcc_builder_table_add_union@@Base+0xc8>
   1cd7c:	ldreq	r2, [pc, #92]	; 1cde0 <flatcc_builder_table_add_union@@Base+0xe0>
   1cd80:	ldreq	r1, [pc, #72]	; 1cdd0 <flatcc_builder_table_add_union@@Base+0xd0>
   1cd84:	ldreq	r0, [pc, #88]	; 1cde4 <flatcc_builder_table_add_union@@Base+0xe4>
   1cd88:	beq	1cd34 <flatcc_builder_table_add_union@@Base+0x34>
   1cd8c:	mov	r3, #1
   1cd90:	mov	r2, r3
   1cd94:	sub	r1, r7, #1
   1cd98:	mov	r0, r6
   1cd9c:	bl	1ca20 <flatcc_builder_table_add@@Base>
   1cda0:	cmp	r0, #0
   1cda4:	ldreq	r3, [pc, #28]	; 1cdc8 <flatcc_builder_table_add_union@@Base+0xc8>
   1cda8:	ldreq	r2, [pc, #56]	; 1cde8 <flatcc_builder_table_add_union@@Base+0xe8>
   1cdac:	ldreq	r1, [pc, #28]	; 1cdd0 <flatcc_builder_table_add_union@@Base+0xd0>
   1cdb0:	ldreq	r0, [pc, #52]	; 1cdec <flatcc_builder_table_add_union@@Base+0xec>
   1cdb4:	beq	1cd34 <flatcc_builder_table_add_union@@Base+0x34>
   1cdb8:	strb	r5, [r0]
   1cdbc:	mov	r0, #0
   1cdc0:	add	sp, sp, #12
   1cdc4:	pop	{r4, r5, r6, r7, pc}
   1cdc8:	andeq	r1, r2, lr, ror lr
   1cdcc:	andeq	r0, r0, lr, ror #11
   1cdd0:	strdeq	r1, [r2], -sp
   1cdd4:	muleq	r2, ip, r1
   1cdd8:	andeq	r0, r0, pc, ror #11
   1cddc:	andeq	r2, r2, r4, ror r2
   1cde0:	strdeq	r0, [r0], -r2
   1cde4:	muleq	r2, r6, r2
   1cde8:	strdeq	r0, [r0], -r6
   1cdec:	andeq	r2, r2, r0, lsr #5

0001cdf0 <flatcc_builder_table_add_union_vector@@Base>:
   1cdf0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cdf4:	mov	r7, r1
   1cdf8:	add	r1, sp, #8
   1cdfc:	stmdb	r1, {r2, r3}
   1ce00:	ldr	r3, [r0, #32]
   1ce04:	ldm	sp, {r4, r5}
   1ce08:	ldrh	r3, [r3, #14]
   1ce0c:	cmp	r3, #3
   1ce10:	beq	1ce28 <flatcc_builder_table_add_union_vector@@Base+0x38>
   1ce14:	ldr	r3, [pc, #176]	; 1cecc <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1ce18:	ldr	r1, [pc, #176]	; 1ced0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1ce1c:	ldr	r0, [pc, #176]	; 1ced4 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1ce20:	mov	r2, #1536	; 0x600
   1ce24:	bl	12ab4 <__assert_fail@plt>
   1ce28:	clz	r3, r5
   1ce2c:	clz	r2, r4
   1ce30:	lsr	r3, r3, #5
   1ce34:	lsr	r2, r2, #5
   1ce38:	cmp	r2, r3
   1ce3c:	beq	1ce68 <flatcc_builder_table_add_union_vector@@Base+0x78>
   1ce40:	adds	r4, r4, #0
   1ce44:	movne	r4, #1
   1ce48:	cmp	r4, r3
   1ce4c:	mvnne	r0, #0
   1ce50:	bne	1cec4 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   1ce54:	ldr	r3, [pc, #112]	; 1cecc <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1ce58:	ldr	r2, [pc, #120]	; 1ced8 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   1ce5c:	ldr	r1, [pc, #108]	; 1ced0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1ce60:	ldr	r0, [pc, #116]	; 1cedc <flatcc_builder_table_add_union_vector@@Base+0xec>
   1ce64:	b	1ce24 <flatcc_builder_table_add_union_vector@@Base+0x34>
   1ce68:	cmp	r4, #0
   1ce6c:	moveq	r0, r4
   1ce70:	beq	1cec4 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   1ce74:	sub	r1, r7, #1
   1ce78:	mov	r6, r0
   1ce7c:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   1ce80:	cmp	r0, #0
   1ce84:	bne	1ce9c <flatcc_builder_table_add_union_vector@@Base+0xac>
   1ce88:	ldr	r3, [pc, #60]	; 1cecc <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1ce8c:	ldr	r2, [pc, #76]	; 1cee0 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   1ce90:	ldr	r1, [pc, #56]	; 1ced0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1ce94:	ldr	r0, [pc, #72]	; 1cee4 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   1ce98:	b	1ce24 <flatcc_builder_table_add_union_vector@@Base+0x34>
   1ce9c:	str	r4, [r0]
   1cea0:	mov	r1, r7
   1cea4:	mov	r0, r6
   1cea8:	bl	1cbd4 <flatcc_builder_table_add_offset@@Base>
   1ceac:	cmp	r0, #0
   1ceb0:	strne	r5, [r0]
   1ceb4:	movne	r0, #0
   1ceb8:	ldreq	r3, [pc, #12]	; 1cecc <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1cebc:	ldreq	r2, [pc, #36]	; 1cee8 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   1cec0:	beq	1ce90 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   1cec4:	add	sp, sp, #12
   1cec8:	pop	{r4, r5, r6, r7, pc}
   1cecc:	muleq	r2, sp, lr
   1ced0:	strdeq	r1, [r2], -sp
   1ced4:	muleq	r2, ip, r1
   1ced8:	andeq	r0, r0, r1, lsl #12
   1cedc:	andeq	r2, r2, ip, lsr #5
   1cee0:	andeq	r0, r0, r4, lsl #12
   1cee4:	muleq	r2, r6, r2
   1cee8:	andeq	r0, r0, r8, lsl #12

0001ceec <flatcc_builder_push_buffer_alignment@@Base>:
   1ceec:	mov	r3, r0
   1cef0:	mov	r2, #4
   1cef4:	ldrh	r0, [r0, #128]	; 0x80
   1cef8:	strh	r2, [r3, #128]	; 0x80
   1cefc:	bx	lr

0001cf00 <flatcc_builder_pop_buffer_alignment@@Base>:
   1cf00:	ldrh	r3, [r0, #128]	; 0x80
   1cf04:	cmp	r3, r1
   1cf08:	strhcc	r1, [r0, #128]	; 0x80
   1cf0c:	bx	lr

0001cf10 <flatcc_builder_get_buffer_alignment@@Base>:
   1cf10:	ldrh	r0, [r0, #128]	; 0x80
   1cf14:	bx	lr

0001cf18 <flatcc_builder_set_vtable_clustering@@Base>:
   1cf18:	clz	r1, r1
   1cf1c:	lsr	r1, r1, #5
   1cf20:	str	r1, [r0, #180]	; 0xb4
   1cf24:	bx	lr

0001cf28 <flatcc_builder_set_block_align@@Base>:
   1cf28:	strh	r1, [r0, #132]	; 0x84
   1cf2c:	bx	lr

0001cf30 <flatcc_builder_get_level@@Base>:
   1cf30:	ldr	r0, [r0, #156]	; 0x9c
   1cf34:	bx	lr

0001cf38 <flatcc_builder_set_max_level@@Base>:
   1cf38:	ldr	r3, [r0, #160]	; 0xa0
   1cf3c:	str	r1, [r0, #176]	; 0xb0
   1cf40:	cmp	r1, r3
   1cf44:	strgt	r1, [r0, #160]	; 0xa0
   1cf48:	bx	lr

0001cf4c <flatcc_builder_get_buffer_size@@Base>:
   1cf4c:	ldr	r2, [r0, #140]	; 0x8c
   1cf50:	ldr	r0, [r0, #136]	; 0x88
   1cf54:	sub	r0, r2, r0
   1cf58:	bx	lr

0001cf5c <flatcc_builder_get_buffer_start@@Base>:
   1cf5c:	ldr	r0, [r0, #136]	; 0x88
   1cf60:	bx	lr

0001cf64 <flatcc_builder_get_buffer_end@@Base>:
   1cf64:	ldr	r0, [r0, #140]	; 0x8c
   1cf68:	bx	lr

0001cf6c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1cf6c:	str	r1, [r0, #172]	; 0xac
   1cf70:	bx	lr

0001cf74 <flatcc_builder_set_identifier@@Base>:
   1cf74:	ldr	r3, [pc, #16]	; 1cf8c <flatcc_builder_set_identifier@@Base+0x18>
   1cf78:	cmp	r1, #0
   1cf7c:	moveq	r1, r3
   1cf80:	ldr	r3, [r1]
   1cf84:	str	r3, [r0, #168]	; 0xa8
   1cf88:	bx	lr
   1cf8c:	andeq	r1, r2, r7, lsl r8

0001cf90 <flatcc_builder_get_type@@Base>:
   1cf90:	ldr	r0, [r0, #32]
   1cf94:	cmp	r0, #0
   1cf98:	ldrhne	r0, [r0, #14]
   1cf9c:	bx	lr

0001cfa0 <flatcc_builder_get_type_at@@Base>:
   1cfa0:	cmp	r1, #0
   1cfa4:	ble	1cfcc <flatcc_builder_get_type_at@@Base+0x2c>
   1cfa8:	ldr	r3, [r0, #156]	; 0x9c
   1cfac:	cmp	r1, r3
   1cfb0:	bgt	1cfcc <flatcc_builder_get_type_at@@Base+0x2c>
   1cfb4:	sub	r1, r1, r3
   1cfb8:	mov	r2, #36	; 0x24
   1cfbc:	ldr	r3, [r0, #32]
   1cfc0:	mla	r1, r2, r1, r3
   1cfc4:	ldrh	r0, [r1, #14]
   1cfc8:	bx	lr
   1cfcc:	mov	r0, #0
   1cfd0:	bx	lr

0001cfd4 <flatcc_builder_get_direct_buffer@@Base>:
   1cfd4:	ldr	r3, [r0, #184]	; 0xb8
   1cfd8:	cmp	r3, #0
   1cfdc:	beq	1d004 <flatcc_builder_get_direct_buffer@@Base+0x30>
   1cfe0:	ldr	r2, [r0, #188]	; 0xbc
   1cfe4:	ldr	r3, [r0, #192]	; 0xc0
   1cfe8:	cmp	r2, r3
   1cfec:	bne	1d004 <flatcc_builder_get_direct_buffer@@Base+0x30>
   1cff0:	cmp	r1, #0
   1cff4:	ldrne	r3, [r0, #212]	; 0xd4
   1cff8:	ldr	r0, [r0, #196]	; 0xc4
   1cffc:	strne	r3, [r1]
   1d000:	bx	lr
   1d004:	mov	r0, #0
   1d008:	cmp	r1, #0
   1d00c:	strne	r0, [r1]
   1d010:	moveq	r0, r1
   1d014:	bx	lr

0001d018 <flatcc_builder_copy_buffer@@Base>:
   1d018:	ldr	r3, [r0, #184]	; 0xb8
   1d01c:	cmp	r3, #0
   1d020:	beq	1d04c <flatcc_builder_copy_buffer@@Base+0x34>
   1d024:	push	{r4, lr}
   1d028:	add	r0, r0, #188	; 0xbc
   1d02c:	bl	1d60c <flatcc_emitter_copy_buffer@@Base>
   1d030:	cmp	r0, #0
   1d034:	popne	{r4, pc}
   1d038:	ldr	r3, [pc, #20]	; 1d054 <flatcc_builder_copy_buffer@@Base+0x3c>
   1d03c:	ldr	r2, [pc, #20]	; 1d058 <flatcc_builder_copy_buffer@@Base+0x40>
   1d040:	ldr	r1, [pc, #20]	; 1d05c <flatcc_builder_copy_buffer@@Base+0x44>
   1d044:	ldr	r0, [pc, #20]	; 1d060 <flatcc_builder_copy_buffer@@Base+0x48>
   1d048:	bl	12ab4 <__assert_fail@plt>
   1d04c:	mov	r0, r3
   1d050:	bx	lr
   1d054:	andeq	r1, r2, r3, asr #29
   1d058:	andeq	r0, r0, r6, lsl #15
   1d05c:	strdeq	r1, [r2], -sp
   1d060:	ldrdeq	r0, [r2], -r5

0001d064 <flatcc_builder_finalize_buffer@@Base>:
   1d064:	push	{r4, r5, r6, lr}
   1d068:	cmp	r1, #0
   1d06c:	ldr	r4, [r0, #140]	; 0x8c
   1d070:	ldr	r2, [r0, #136]	; 0x88
   1d074:	mov	r5, r0
   1d078:	sub	r4, r4, r2
   1d07c:	strne	r4, [r1]
   1d080:	mov	r0, r4
   1d084:	bl	12a18 <malloc@plt>
   1d088:	subs	r6, r0, #0
   1d08c:	bne	1d0a4 <flatcc_builder_finalize_buffer@@Base+0x40>
   1d090:	ldr	r3, [pc, #52]	; 1d0cc <flatcc_builder_finalize_buffer@@Base+0x68>
   1d094:	ldr	r2, [pc, #52]	; 1d0d0 <flatcc_builder_finalize_buffer@@Base+0x6c>
   1d098:	ldr	r1, [pc, #52]	; 1d0d4 <flatcc_builder_finalize_buffer@@Base+0x70>
   1d09c:	ldr	r0, [pc, #52]	; 1d0d8 <flatcc_builder_finalize_buffer@@Base+0x74>
   1d0a0:	bl	12ab4 <__assert_fail@plt>
   1d0a4:	mov	r2, r4
   1d0a8:	mov	r1, r6
   1d0ac:	mov	r0, r5
   1d0b0:	bl	1d018 <flatcc_builder_copy_buffer@@Base>
   1d0b4:	cmp	r0, #0
   1d0b8:	ldreq	r3, [pc, #12]	; 1d0cc <flatcc_builder_finalize_buffer@@Base+0x68>
   1d0bc:	ldreq	r2, [pc, #24]	; 1d0dc <flatcc_builder_finalize_buffer@@Base+0x78>
   1d0c0:	beq	1d098 <flatcc_builder_finalize_buffer@@Base+0x34>
   1d0c4:	mov	r0, r6
   1d0c8:	pop	{r4, r5, r6, pc}
   1d0cc:	ldrdeq	r1, [r2], -lr
   1d0d0:	muleq	r0, r8, r7
   1d0d4:	strdeq	r1, [r2], -sp
   1d0d8:	andeq	r1, r2, sl, ror #30
   1d0dc:	muleq	r0, ip, r7

0001d0e0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   1d0e0:	push	{r4, r5, r6, r7, r8, lr}
   1d0e4:	mov	r6, r0
   1d0e8:	ldr	r4, [r0, #140]	; 0x8c
   1d0ec:	ldr	r2, [r0, #136]	; 0x88
   1d0f0:	ldrh	r0, [r0, #128]	; 0x80
   1d0f4:	subs	r7, r1, #0
   1d0f8:	sub	r2, r4, r2
   1d0fc:	sub	r4, r0, #1
   1d100:	strne	r2, [r7]
   1d104:	add	r4, r4, r2
   1d108:	rsb	r2, r0, #0
   1d10c:	and	r4, r4, r2
   1d110:	mov	r1, r4
   1d114:	bl	1a430 <time_struct_buffer@@Base+0x210>
   1d118:	subs	r5, r0, #0
   1d11c:	beq	1d144 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   1d120:	mov	r2, r4
   1d124:	mov	r1, r5
   1d128:	mov	r0, r6
   1d12c:	bl	1d018 <flatcc_builder_copy_buffer@@Base>
   1d130:	subs	r4, r0, #0
   1d134:	bne	1d144 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   1d138:	mov	r0, r5
   1d13c:	bl	129d0 <free@plt>
   1d140:	mov	r5, r4
   1d144:	cmp	r7, #0
   1d148:	clz	r3, r5
   1d14c:	lsr	r3, r3, #5
   1d150:	moveq	r3, #0
   1d154:	cmp	r3, #0
   1d158:	movne	r3, #0
   1d15c:	strne	r3, [r7]
   1d160:	mov	r0, r5
   1d164:	pop	{r4, r5, r6, r7, r8, pc}

0001d168 <flatcc_builder_aligned_alloc@@Base>:
   1d168:	b	1a430 <time_struct_buffer@@Base+0x210>

0001d16c <flatcc_builder_aligned_free@@Base>:
   1d16c:	b	129d0 <free@plt>

0001d170 <flatcc_builder_get_emit_context@@Base>:
   1d170:	ldr	r0, [r0, #36]	; 0x24
   1d174:	bx	lr

0001d178 <flatcc_emitter_recycle_page@@Base>:
   1d178:	ldr	r3, [r0]
   1d17c:	cmp	r3, r1
   1d180:	beq	1d1c4 <flatcc_emitter_recycle_page@@Base+0x4c>
   1d184:	ldr	r2, [r0, #4]
   1d188:	cmp	r1, r2
   1d18c:	beq	1d1c4 <flatcc_emitter_recycle_page@@Base+0x4c>
   1d190:	ldr	r2, [r1, #2944]	; 0xb80
   1d194:	ldr	r0, [r1, #2948]	; 0xb84
   1d198:	str	r0, [r2, #2948]	; 0xb84
   1d19c:	ldr	r0, [r1, #2948]	; 0xb84
   1d1a0:	str	r2, [r0, #2944]	; 0xb80
   1d1a4:	ldr	r2, [r3, #2948]	; 0xb84
   1d1a8:	str	r3, [r1, #2944]	; 0xb80
   1d1ac:	str	r2, [r1, #2948]	; 0xb84
   1d1b0:	str	r1, [r2, #2944]	; 0xb80
   1d1b4:	ldr	r3, [r1, #2944]	; 0xb80
   1d1b8:	mov	r0, #0
   1d1bc:	str	r1, [r3, #2948]	; 0xb84
   1d1c0:	bx	lr
   1d1c4:	mvn	r0, #0
   1d1c8:	bx	lr

0001d1cc <flatcc_emitter_reset@@Base>:
   1d1cc:	ldr	r3, [r0]
   1d1d0:	cmp	r3, #0
   1d1d4:	bxeq	lr
   1d1d8:	add	r2, r3, #1472	; 0x5c0
   1d1dc:	push	{r4, lr}
   1d1e0:	mov	r4, r0
   1d1e4:	str	r2, [r0, #8]
   1d1e8:	str	r2, [r0, #16]
   1d1ec:	mov	r2, #1472	; 0x5c0
   1d1f0:	str	r2, [r0, #12]
   1d1f4:	str	r2, [r0, #20]
   1d1f8:	sub	r2, r2, #2944	; 0xb80
   1d1fc:	str	r3, [r0, #4]
   1d200:	str	r2, [r3, #2952]	; 0xb88
   1d204:	ldr	r3, [r0, #32]
   1d208:	cmp	r3, #0
   1d20c:	ldr	r3, [r0, #24]
   1d210:	streq	r3, [r0, #32]
   1d214:	ldr	r2, [r0, #32]
   1d218:	lsr	r3, r3, #2
   1d21c:	add	r2, r2, r2, lsl #1
   1d220:	add	r3, r3, r2, lsr #2
   1d224:	str	r3, [r0, #32]
   1d228:	mov	r3, #0
   1d22c:	str	r3, [r0, #24]
   1d230:	ldr	r2, [r4, #32]
   1d234:	ldr	r3, [r4, #28]
   1d238:	cmp	r3, r2, lsl #1
   1d23c:	popls	{r4, pc}
   1d240:	ldr	r3, [r4, #4]
   1d244:	ldr	r2, [r4]
   1d248:	ldr	r0, [r3, #2944]	; 0xb80
   1d24c:	cmp	r0, r2
   1d250:	bne	1d258 <flatcc_emitter_reset@@Base+0x8c>
   1d254:	pop	{r4, pc}
   1d258:	ldr	r2, [r0, #2944]	; 0xb80
   1d25c:	str	r2, [r3, #2944]	; 0xb80
   1d260:	ldr	r2, [r0, #2944]	; 0xb80
   1d264:	str	r3, [r2, #2948]	; 0xb84
   1d268:	bl	129d0 <free@plt>
   1d26c:	ldr	r3, [r4, #28]
   1d270:	sub	r3, r3, #2944	; 0xb80
   1d274:	str	r3, [r4, #28]
   1d278:	b	1d230 <flatcc_emitter_reset@@Base+0x64>

0001d27c <flatcc_emitter_clear@@Base>:
   1d27c:	ldr	r3, [r0]
   1d280:	cmp	r3, #0
   1d284:	bxeq	lr
   1d288:	ldr	r2, [r3, #2948]	; 0xb84
   1d28c:	push	{r4, r5, r6, lr}
   1d290:	mov	r4, r0
   1d294:	mov	r1, #0
   1d298:	str	r1, [r2, #2944]	; 0xb80
   1d29c:	ldr	r5, [r3, #2944]	; 0xb80
   1d2a0:	cmp	r5, #0
   1d2a4:	bne	1d2c4 <flatcc_emitter_clear@@Base+0x48>
   1d2a8:	mov	r0, r3
   1d2ac:	bl	129d0 <free@plt>
   1d2b0:	mov	r1, r5
   1d2b4:	mov	r0, r4
   1d2b8:	mov	r2, #36	; 0x24
   1d2bc:	pop	{r4, r5, r6, lr}
   1d2c0:	b	12a60 <memset@plt>
   1d2c4:	ldr	r0, [r5, #2948]	; 0xb84
   1d2c8:	bl	129d0 <free@plt>
   1d2cc:	mov	r3, r5
   1d2d0:	b	1d29c <flatcc_emitter_clear@@Base+0x20>

0001d2d4 <flatcc_emitter@@Base>:
   1d2d4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2d8:	mov	r4, r0
   1d2dc:	ldr	r0, [sp, #48]	; 0x30
   1d2e0:	ldr	ip, [r4, #24]
   1d2e4:	cmp	r3, #0
   1d2e8:	add	ip, ip, r0
   1d2ec:	str	ip, [r4, #24]
   1d2f0:	bge	1d4a0 <flatcc_emitter@@Base+0x1cc>
   1d2f4:	ldr	ip, [r4, #12]
   1d2f8:	cmp	r0, ip
   1d2fc:	bhi	1d344 <flatcc_emitter@@Base+0x70>
   1d300:	ldr	r3, [r4, #8]
   1d304:	sub	r3, r3, r0
   1d308:	sub	r0, ip, r0
   1d30c:	str	r3, [r4, #8]
   1d310:	str	r0, [r4, #12]
   1d314:	mov	r4, r1
   1d318:	mov	r5, r2
   1d31c:	cmp	r5, #0
   1d320:	add	r4, r4, #8
   1d324:	beq	1d35c <flatcc_emitter@@Base+0x88>
   1d328:	ldmdb	r4, {r1, r2}
   1d32c:	mov	r0, r3
   1d330:	bl	129dc <memcpy@plt>
   1d334:	ldr	r2, [r4, #-4]
   1d338:	sub	r5, r5, #1
   1d33c:	add	r3, r0, r2
   1d340:	b	1d31c <flatcc_emitter@@Base+0x48>
   1d344:	ldr	sl, [pc, #696]	; 1d604 <flatcc_emitter@@Base+0x330>
   1d348:	add	r5, r1, r2, lsl #3
   1d34c:	sub	r6, r2, #1
   1d350:	mov	r9, #2944	; 0xb80
   1d354:	cmn	r6, #1
   1d358:	bne	1d364 <flatcc_emitter@@Base+0x90>
   1d35c:	mov	r0, #0
   1d360:	b	1d408 <flatcc_emitter@@Base+0x134>
   1d364:	ldr	r7, [r5, #-4]
   1d368:	ldr	fp, [r5, #-8]
   1d36c:	mov	r8, #1472	; 0x5c0
   1d370:	add	fp, fp, r7
   1d374:	cmp	r7, #0
   1d378:	subeq	r5, r5, #8
   1d37c:	subeq	r6, r6, #1
   1d380:	beq	1d354 <flatcc_emitter@@Base+0x80>
   1d384:	ldr	r3, [r4, #12]
   1d388:	cmp	r3, r7
   1d38c:	bcs	1d470 <flatcc_emitter@@Base+0x19c>
   1d390:	cmp	r3, #0
   1d394:	movne	r2, r3
   1d398:	bne	1d474 <flatcc_emitter@@Base+0x1a0>
   1d39c:	ldr	r3, [r4]
   1d3a0:	cmp	r3, #0
   1d3a4:	beq	1d3ec <flatcc_emitter@@Base+0x118>
   1d3a8:	ldr	r2, [r3, #2948]	; 0xb84
   1d3ac:	ldr	r1, [r4, #4]
   1d3b0:	cmp	r2, r1
   1d3b4:	beq	1d3ec <flatcc_emitter@@Base+0x118>
   1d3b8:	ldr	r3, [r3, #2952]	; 0xb88
   1d3bc:	sub	r3, r3, #2944	; 0xb80
   1d3c0:	str	r3, [r2, #2952]	; 0xb88
   1d3c4:	str	r2, [r4]
   1d3c8:	ldr	r3, [r4]
   1d3cc:	str	r9, [r4, #12]
   1d3d0:	add	r2, r3, #2944	; 0xb80
   1d3d4:	str	r2, [r4, #8]
   1d3d8:	ldr	r2, [r3, #2944]	; 0xb80
   1d3dc:	ldr	r2, [r2, #2952]	; 0xb88
   1d3e0:	sub	r2, r2, #2944	; 0xb80
   1d3e4:	str	r2, [r3, #2952]	; 0xb88
   1d3e8:	b	1d374 <flatcc_emitter@@Base+0xa0>
   1d3ec:	mov	r0, sl
   1d3f0:	str	r3, [sp, #4]
   1d3f4:	bl	12a18 <malloc@plt>
   1d3f8:	ldr	r3, [sp, #4]
   1d3fc:	cmp	r0, #0
   1d400:	bne	1d410 <flatcc_emitter@@Base+0x13c>
   1d404:	mvn	r0, #0
   1d408:	add	sp, sp, #12
   1d40c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d410:	ldr	r2, [r4, #28]
   1d414:	cmp	r3, #0
   1d418:	add	r2, r2, #2944	; 0xb80
   1d41c:	str	r2, [r4, #28]
   1d420:	beq	1d440 <flatcc_emitter@@Base+0x16c>
   1d424:	ldr	r2, [r4, #4]
   1d428:	str	r3, [r0, #2944]	; 0xb80
   1d42c:	str	r2, [r0, #2948]	; 0xb84
   1d430:	str	r0, [r3, #2948]	; 0xb84
   1d434:	str	r0, [r2, #2944]	; 0xb80
   1d438:	str	r0, [r4]
   1d43c:	b	1d3c8 <flatcc_emitter@@Base+0xf4>
   1d440:	add	r3, r0, #1472	; 0x5c0
   1d444:	str	r3, [r4, #8]
   1d448:	str	r3, [r4, #16]
   1d44c:	ldr	r3, [pc, #436]	; 1d608 <flatcc_emitter@@Base+0x334>
   1d450:	str	r0, [r4]
   1d454:	str	r0, [r4, #4]
   1d458:	str	r0, [r0, #2944]	; 0xb80
   1d45c:	str	r0, [r0, #2948]	; 0xb84
   1d460:	str	r8, [r4, #12]
   1d464:	str	r8, [r4, #20]
   1d468:	str	r3, [r0, #2952]	; 0xb88
   1d46c:	b	1d374 <flatcc_emitter@@Base+0xa0>
   1d470:	mov	r2, r7
   1d474:	ldr	r0, [r4, #8]
   1d478:	rsb	r1, r2, #0
   1d47c:	add	r0, r0, r1
   1d480:	sub	r3, r3, r2
   1d484:	add	fp, fp, r1
   1d488:	str	r0, [r4, #8]
   1d48c:	str	r3, [r4, #12]
   1d490:	mov	r1, fp
   1d494:	sub	r7, r7, r2
   1d498:	bl	129dc <memcpy@plt>
   1d49c:	b	1d374 <flatcc_emitter@@Base+0xa0>
   1d4a0:	ldr	ip, [r4, #20]
   1d4a4:	cmp	r0, ip
   1d4a8:	bls	1d4e4 <flatcc_emitter@@Base+0x210>
   1d4ac:	ldr	sl, [pc, #336]	; 1d604 <flatcc_emitter@@Base+0x330>
   1d4b0:	mov	r6, r2
   1d4b4:	add	r5, r1, #8
   1d4b8:	mov	r9, #2944	; 0xb80
   1d4bc:	cmp	r6, #0
   1d4c0:	beq	1d35c <flatcc_emitter@@Base+0x88>
   1d4c4:	ldr	r7, [r5, #-4]
   1d4c8:	ldr	fp, [r5, #-8]
   1d4cc:	mov	r8, #1472	; 0x5c0
   1d4d0:	cmp	r7, #0
   1d4d4:	bne	1d4fc <flatcc_emitter@@Base+0x228>
   1d4d8:	sub	r6, r6, #1
   1d4dc:	add	r5, r5, #8
   1d4e0:	b	1d4bc <flatcc_emitter@@Base+0x1e8>
   1d4e4:	ldr	r3, [r4, #16]
   1d4e8:	add	lr, r3, r0
   1d4ec:	sub	r0, ip, r0
   1d4f0:	str	lr, [r4, #16]
   1d4f4:	str	r0, [r4, #20]
   1d4f8:	b	1d314 <flatcc_emitter@@Base+0x40>
   1d4fc:	ldr	r3, [r4, #20]
   1d500:	cmp	r3, r7
   1d504:	bcs	1d5c4 <flatcc_emitter@@Base+0x2f0>
   1d508:	cmp	r3, #0
   1d50c:	bne	1d5c8 <flatcc_emitter@@Base+0x2f4>
   1d510:	ldr	r3, [r4, #4]
   1d514:	cmp	r3, #0
   1d518:	beq	1d530 <flatcc_emitter@@Base+0x25c>
   1d51c:	ldr	r2, [r3, #2944]	; 0xb80
   1d520:	ldr	r1, [r4]
   1d524:	cmp	r2, r1
   1d528:	strne	r2, [r4, #4]
   1d52c:	bne	1d574 <flatcc_emitter@@Base+0x2a0>
   1d530:	mov	r0, sl
   1d534:	str	r3, [sp, #4]
   1d538:	bl	12a18 <malloc@plt>
   1d53c:	cmp	r0, #0
   1d540:	beq	1d404 <flatcc_emitter@@Base+0x130>
   1d544:	ldr	r2, [r4, #28]
   1d548:	ldr	r3, [sp, #4]
   1d54c:	add	r2, r2, #2944	; 0xb80
   1d550:	cmp	r3, #0
   1d554:	str	r2, [r4, #28]
   1d558:	beq	1d594 <flatcc_emitter@@Base+0x2c0>
   1d55c:	ldr	r2, [r4]
   1d560:	str	r3, [r0, #2948]	; 0xb84
   1d564:	str	r2, [r0, #2944]	; 0xb80
   1d568:	str	r0, [r2, #2948]	; 0xb84
   1d56c:	str	r0, [r3, #2944]	; 0xb80
   1d570:	str	r0, [r4, #4]
   1d574:	ldr	r3, [r4, #4]
   1d578:	str	r9, [r4, #20]
   1d57c:	str	r3, [r4, #16]
   1d580:	ldr	r2, [r3, #2948]	; 0xb84
   1d584:	ldr	r2, [r2, #2952]	; 0xb88
   1d588:	add	r2, r2, #2944	; 0xb80
   1d58c:	str	r2, [r3, #2952]	; 0xb88
   1d590:	b	1d4d0 <flatcc_emitter@@Base+0x1fc>
   1d594:	add	r3, r0, #1472	; 0x5c0
   1d598:	str	r3, [r4, #8]
   1d59c:	str	r3, [r4, #16]
   1d5a0:	ldr	r3, [pc, #96]	; 1d608 <flatcc_emitter@@Base+0x334>
   1d5a4:	str	r0, [r4]
   1d5a8:	str	r0, [r4, #4]
   1d5ac:	str	r0, [r0, #2944]	; 0xb80
   1d5b0:	str	r0, [r0, #2948]	; 0xb84
   1d5b4:	str	r8, [r4, #12]
   1d5b8:	str	r8, [r4, #20]
   1d5bc:	str	r3, [r0, #2952]	; 0xb88
   1d5c0:	b	1d4d0 <flatcc_emitter@@Base+0x1fc>
   1d5c4:	mov	r3, r7
   1d5c8:	mov	r2, r3
   1d5cc:	mov	r1, fp
   1d5d0:	ldr	r0, [r4, #16]
   1d5d4:	str	r3, [sp, #4]
   1d5d8:	bl	129dc <memcpy@plt>
   1d5dc:	ldr	r3, [sp, #4]
   1d5e0:	ldr	r2, [r4, #16]
   1d5e4:	sub	r7, r7, r3
   1d5e8:	add	r2, r2, r3
   1d5ec:	str	r2, [r4, #16]
   1d5f0:	ldr	r2, [r4, #20]
   1d5f4:	add	fp, fp, r3
   1d5f8:	sub	r3, r2, r3
   1d5fc:	str	r3, [r4, #20]
   1d600:	b	1d4d0 <flatcc_emitter@@Base+0x1fc>
   1d604:	andeq	r0, r0, ip, lsl #23
   1d608:			; <UNDEFINED> instruction: 0xfffffa40

0001d60c <flatcc_emitter_copy_buffer@@Base>:
   1d60c:	push	{r4, r5, r6, lr}
   1d610:	mov	r4, r0
   1d614:	ldr	r0, [r0, #24]
   1d618:	cmp	r0, r2
   1d61c:	movhi	r3, #0
   1d620:	bhi	1d694 <flatcc_emitter_copy_buffer@@Base+0x88>
   1d624:	ldr	r2, [r4]
   1d628:	cmp	r2, #0
   1d62c:	moveq	r3, r2
   1d630:	beq	1d694 <flatcc_emitter_copy_buffer@@Base+0x88>
   1d634:	mov	r3, r1
   1d638:	ldr	r1, [r4, #4]
   1d63c:	cmp	r2, r1
   1d640:	moveq	r2, r0
   1d644:	ldr	r1, [r4, #8]
   1d648:	beq	1d688 <flatcc_emitter_copy_buffer@@Base+0x7c>
   1d64c:	ldr	r5, [r4, #12]
   1d650:	mov	r0, r3
   1d654:	rsb	r5, r5, #2944	; 0xb80
   1d658:	mov	r2, r5
   1d65c:	bl	129dc <memcpy@plt>
   1d660:	ldr	r2, [r4]
   1d664:	mov	r6, #2944	; 0xb80
   1d668:	add	r3, r0, r5
   1d66c:	ldr	r5, [r2, #2944]	; 0xb80
   1d670:	ldr	r2, [r4, #4]
   1d674:	cmp	r5, r2
   1d678:	bne	1d69c <flatcc_emitter_copy_buffer@@Base+0x90>
   1d67c:	ldr	r2, [r4, #20]
   1d680:	mov	r1, r5
   1d684:	rsb	r2, r2, #2944	; 0xb80
   1d688:	mov	r0, r3
   1d68c:	bl	129dc <memcpy@plt>
   1d690:	mov	r3, r0
   1d694:	mov	r0, r3
   1d698:	pop	{r4, r5, r6, pc}
   1d69c:	mov	r1, r5
   1d6a0:	mov	r0, r3
   1d6a4:	mov	r2, r6
   1d6a8:	bl	129dc <memcpy@plt>
   1d6ac:	ldr	r5, [r5, #2944]	; 0xb80
   1d6b0:	add	r3, r0, #2944	; 0xb80
   1d6b4:	b	1d670 <flatcc_emitter_copy_buffer@@Base+0x64>
   1d6b8:	add	r1, r1, #2
   1d6bc:	ldrh	r3, [r0, #22]
   1d6c0:	lsl	r1, r1, #1
   1d6c4:	uxth	r1, r1
   1d6c8:	cmp	r3, r1
   1d6cc:	ldrhi	r3, [r0, #12]
   1d6d0:	ldrhhi	r0, [r3, r1]
   1d6d4:	movls	r0, #0
   1d6d8:	bx	lr
   1d6dc:	push	{r4, lr}
   1d6e0:	mov	r2, r0
   1d6e4:	bl	1d6b8 <flatcc_emitter_copy_buffer@@Base+0xac>
   1d6e8:	uxth	r3, r0
   1d6ec:	cmp	r3, #0
   1d6f0:	ldrne	r3, [r2, #16]
   1d6f4:	uxtahne	r3, r3, r0
   1d6f8:	ldrne	r0, [r2]
   1d6fc:	addne	r0, r0, r3
   1d700:	moveq	r0, r3
   1d704:	pop	{r4, pc}
   1d708:	push	{r4, r5, r6, lr}
   1d70c:	mov	r4, r3
   1d710:	mov	r5, r0
   1d714:	bl	1d6b8 <flatcc_emitter_copy_buffer@@Base+0xac>
   1d718:	uxth	r3, r0
   1d71c:	cmp	r3, #0
   1d720:	bne	1d73c <flatcc_emitter_copy_buffer@@Base+0x130>
   1d724:	cmp	r2, #0
   1d728:	movne	r2, #4
   1d72c:	moveq	r2, #0
   1d730:	str	r3, [r4]
   1d734:	mov	r0, r2
   1d738:	pop	{r4, r5, r6, pc}
   1d73c:	ldrh	r3, [r5, #20]
   1d740:	uxth	r1, r0
   1d744:	add	r2, r1, #4
   1d748:	cmp	r2, r3
   1d74c:	movhi	r2, #13
   1d750:	bhi	1d734 <flatcc_emitter_copy_buffer@@Base+0x128>
   1d754:	ldr	r0, [r5, #16]
   1d758:	add	r1, r1, r0
   1d75c:	ands	r2, r1, #3
   1d760:	streq	r1, [r4]
   1d764:	movne	r2, #12
   1d768:	b	1d734 <flatcc_emitter_copy_buffer@@Base+0x128>
   1d76c:	push	{r4, lr}
   1d770:	sub	sp, sp, #24
   1d774:	ldr	ip, [sp, #32]
   1d778:	sub	ip, ip, #1
   1d77c:	cmp	ip, #0
   1d780:	str	ip, [sp, #8]
   1d784:	moveq	r0, #3
   1d788:	beq	1d844 <flatcc_emitter_copy_buffer@@Base+0x238>
   1d78c:	add	r3, r2, r3
   1d790:	cmp	r2, r3
   1d794:	bcs	1d7ac <flatcc_emitter_copy_buffer@@Base+0x1a0>
   1d798:	add	r2, r3, #4
   1d79c:	cmp	r1, r2
   1d7a0:	bcc	1d7ac <flatcc_emitter_copy_buffer@@Base+0x1a0>
   1d7a4:	tst	r3, #3
   1d7a8:	beq	1d7b4 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   1d7ac:	mov	r0, #15
   1d7b0:	b	1d844 <flatcc_emitter_copy_buffer@@Base+0x238>
   1d7b4:	ldr	r2, [r0, r3]
   1d7b8:	str	r3, [sp, #16]
   1d7bc:	subs	r2, r3, r2
   1d7c0:	bmi	1d7cc <flatcc_emitter_copy_buffer@@Base+0x1c0>
   1d7c4:	tst	r2, #1
   1d7c8:	beq	1d7d4 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1d7cc:	mov	r0, #29
   1d7d0:	b	1d844 <flatcc_emitter_copy_buffer@@Base+0x238>
   1d7d4:	add	lr, r2, #2
   1d7d8:	cmp	r1, lr
   1d7dc:	movcc	r0, #27
   1d7e0:	bcc	1d844 <flatcc_emitter_copy_buffer@@Base+0x238>
   1d7e4:	ldrh	ip, [r0, r2]
   1d7e8:	add	r4, r0, r2
   1d7ec:	add	r2, ip, r2
   1d7f0:	cmp	r1, r2
   1d7f4:	strh	ip, [sp, #22]
   1d7f8:	bcc	1d804 <flatcc_emitter_copy_buffer@@Base+0x1f8>
   1d7fc:	tst	ip, #1
   1d800:	beq	1d80c <flatcc_emitter_copy_buffer@@Base+0x200>
   1d804:	mov	r0, #30
   1d808:	b	1d844 <flatcc_emitter_copy_buffer@@Base+0x238>
   1d80c:	cmp	ip, #3
   1d810:	movls	r0, #28
   1d814:	bls	1d844 <flatcc_emitter_copy_buffer@@Base+0x238>
   1d818:	ldrh	r2, [r0, lr]
   1d81c:	sub	r3, r1, r3
   1d820:	cmp	r3, r2
   1d824:	strh	r2, [sp, #20]
   1d828:	movcc	r0, #20
   1d82c:	bcc	1d844 <flatcc_emitter_copy_buffer@@Base+0x238>
   1d830:	stm	sp, {r0, r1}
   1d834:	ldr	r3, [sp, #36]	; 0x24
   1d838:	mov	r0, sp
   1d83c:	str	r4, [sp, #12]
   1d840:	blx	r3
   1d844:	add	sp, sp, #24
   1d848:	pop	{r4, pc}
   1d84c:	add	r3, r2, r3
   1d850:	cmp	r2, r3
   1d854:	ldrh	ip, [sp, #4]
   1d858:	bcs	1d880 <flatcc_emitter_copy_buffer@@Base+0x274>
   1d85c:	add	r2, r3, #4
   1d860:	cmp	r1, r2
   1d864:	bcc	1d880 <flatcc_emitter_copy_buffer@@Base+0x274>
   1d868:	cmp	ip, #4
   1d86c:	movcc	ip, #4
   1d870:	sub	ip, ip, #1
   1d874:	orr	ip, ip, #3
   1d878:	tst	ip, r2
   1d87c:	beq	1d890 <flatcc_emitter_copy_buffer@@Base+0x284>
   1d880:	mov	r0, #16
   1d884:	bx	lr
   1d888:	mov	r0, #25
   1d88c:	bx	lr
   1d890:	ldr	r3, [r0, r3]
   1d894:	ldr	r0, [sp, #8]
   1d898:	cmp	r0, r3
   1d89c:	bcc	1d888 <flatcc_emitter_copy_buffer@@Base+0x27c>
   1d8a0:	ldr	r0, [sp]
   1d8a4:	sub	r1, r1, r2
   1d8a8:	mul	r0, r3, r0
   1d8ac:	cmp	r1, r0
   1d8b0:	movcc	r0, #26
   1d8b4:	movcs	r0, #0
   1d8b8:	bx	lr
   1d8bc:	add	r3, r2, r3
   1d8c0:	cmp	r2, r3
   1d8c4:	bcs	1d8dc <flatcc_emitter_copy_buffer@@Base+0x2d0>
   1d8c8:	add	r2, r3, #4
   1d8cc:	cmp	r1, r2
   1d8d0:	bcc	1d8dc <flatcc_emitter_copy_buffer@@Base+0x2d0>
   1d8d4:	tst	r3, #3
   1d8d8:	beq	1d8ec <flatcc_emitter_copy_buffer@@Base+0x2e0>
   1d8dc:	mov	r0, #17
   1d8e0:	bx	lr
   1d8e4:	mov	r0, #8
   1d8e8:	bx	lr
   1d8ec:	ldr	r3, [r0, r3]
   1d8f0:	sub	r1, r1, r2
   1d8f4:	add	ip, r3, #1
   1d8f8:	cmp	r1, ip
   1d8fc:	bcc	1d8e4 <flatcc_emitter_copy_buffer@@Base+0x2d8>
   1d900:	add	r0, r0, r2
   1d904:	ldrb	r0, [r0, r3]
   1d908:	cmp	r0, #0
   1d90c:	movne	r0, #7
   1d910:	moveq	r0, #0
   1d914:	bx	lr

0001d918 <flatcc_verify_error_string@@Base>:
   1d918:	cmp	r0, #36	; 0x24
   1d91c:	ldrls	r3, [pc, #8]	; 1d92c <flatcc_verify_error_string@@Base+0x14>
   1d920:	ldrls	r0, [r3, r0, lsl #2]
   1d924:	ldrhi	r0, [pc, #4]	; 1d930 <flatcc_verify_error_string@@Base+0x18>
   1d928:	bx	lr
   1d92c:	ldrdeq	r2, [r2], -r4
   1d930:	andeq	r2, r2, r8, ror #6

0001d934 <flatcc_verify_field@@Base>:
   1d934:	push	{r4, r5, r6, lr}
   1d938:	mov	r5, r0
   1d93c:	mov	r4, r3
   1d940:	bl	1d6b8 <flatcc_emitter_copy_buffer@@Base+0xac>
   1d944:	uxth	r1, r0
   1d948:	cmp	r1, #0
   1d94c:	beq	1d984 <flatcc_verify_field@@Base+0x50>
   1d950:	ldrh	r3, [r5, #20]
   1d954:	add	r2, r2, r1
   1d958:	cmp	r2, r3
   1d95c:	bhi	1d98c <flatcc_verify_field@@Base+0x58>
   1d960:	ldr	r0, [r5]
   1d964:	ldr	r3, [r5, #16]
   1d968:	sub	r4, r4, #1
   1d96c:	add	r0, r0, r3
   1d970:	add	r0, r0, r1
   1d974:	tst	r0, r4
   1d978:	moveq	r0, #0
   1d97c:	movne	r0, #12
   1d980:	pop	{r4, r5, r6, pc}
   1d984:	mov	r0, r1
   1d988:	pop	{r4, r5, r6, pc}
   1d98c:	mov	r0, #13
   1d990:	pop	{r4, r5, r6, pc}

0001d994 <flatcc_verify_string_field@@Base>:
   1d994:	push	{r0, r1, r4, lr}
   1d998:	add	r3, sp, #4
   1d99c:	mov	r4, r0
   1d9a0:	bl	1d708 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1d9a4:	cmp	r0, #0
   1d9a8:	bne	1d9c8 <flatcc_verify_string_field@@Base+0x34>
   1d9ac:	ldr	r2, [sp, #4]
   1d9b0:	cmp	r2, #0
   1d9b4:	beq	1d9c8 <flatcc_verify_string_field@@Base+0x34>
   1d9b8:	ldr	r0, [r4]
   1d9bc:	ldr	r1, [r4, #4]
   1d9c0:	ldr	r3, [r0, r2]
   1d9c4:	bl	1d8bc <flatcc_emitter_copy_buffer@@Base+0x2b0>
   1d9c8:	add	sp, sp, #8
   1d9cc:	pop	{r4, pc}

0001d9d0 <flatcc_verify_vector_field@@Base>:
   1d9d0:	push	{r4, r5, lr}
   1d9d4:	sub	sp, sp, #28
   1d9d8:	mov	r5, r3
   1d9dc:	add	r3, sp, #20
   1d9e0:	mov	r4, r0
   1d9e4:	bl	1d708 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1d9e8:	cmp	r0, #0
   1d9ec:	bne	1da20 <flatcc_verify_vector_field@@Base+0x50>
   1d9f0:	ldr	r2, [sp, #20]
   1d9f4:	cmp	r2, #0
   1d9f8:	beq	1da20 <flatcc_verify_vector_field@@Base+0x50>
   1d9fc:	ldr	r3, [sp, #44]	; 0x2c
   1da00:	ldr	r0, [r4]
   1da04:	str	r3, [sp, #8]
   1da08:	ldrh	r3, [sp, #40]	; 0x28
   1da0c:	str	r5, [sp]
   1da10:	ldr	r1, [r4, #4]
   1da14:	str	r3, [sp, #4]
   1da18:	ldr	r3, [r0, r2]
   1da1c:	bl	1d84c <flatcc_emitter_copy_buffer@@Base+0x240>
   1da20:	add	sp, sp, #28
   1da24:	pop	{r4, r5, pc}

0001da28 <flatcc_verify_string_vector_field@@Base>:
   1da28:	push	{r4, r5, r6, r7, r8, r9, lr}
   1da2c:	sub	sp, sp, #28
   1da30:	add	r3, sp, #20
   1da34:	mov	r7, r0
   1da38:	bl	1d708 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1da3c:	subs	r6, r0, #0
   1da40:	bne	1daa0 <flatcc_verify_string_vector_field@@Base+0x78>
   1da44:	ldr	r4, [sp, #20]
   1da48:	cmp	r4, #0
   1da4c:	beq	1daa0 <flatcc_verify_string_vector_field@@Base+0x78>
   1da50:	ldm	r7, {r5, r8}
   1da54:	mvn	r3, #-1073741824	; 0xc0000000
   1da58:	mov	r2, r4
   1da5c:	ldr	r7, [r5, r4]
   1da60:	str	r3, [sp, #8]
   1da64:	mov	r3, #4
   1da68:	str	r3, [sp, #4]
   1da6c:	str	r3, [sp]
   1da70:	mov	r1, r8
   1da74:	mov	r3, r7
   1da78:	mov	r0, r5
   1da7c:	bl	1d84c <flatcc_emitter_copy_buffer@@Base+0x240>
   1da80:	subs	r6, r0, #0
   1da84:	bne	1daa0 <flatcc_verify_string_vector_field@@Base+0x78>
   1da88:	add	r4, r4, r7
   1da8c:	mov	r7, r6
   1da90:	ldr	r9, [r5, r4]
   1da94:	add	r4, r4, #4
   1da98:	cmp	r9, r7
   1da9c:	bne	1daac <flatcc_verify_string_vector_field@@Base+0x84>
   1daa0:	mov	r0, r6
   1daa4:	add	sp, sp, #28
   1daa8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1daac:	ldr	r3, [r5, r4]
   1dab0:	mov	r2, r4
   1dab4:	mov	r1, r8
   1dab8:	mov	r0, r5
   1dabc:	bl	1d8bc <flatcc_emitter_copy_buffer@@Base+0x2b0>
   1dac0:	cmp	r0, #0
   1dac4:	addeq	r7, r7, #1
   1dac8:	addeq	r4, r4, #4
   1dacc:	beq	1da98 <flatcc_verify_string_vector_field@@Base+0x70>
   1dad0:	mov	r6, r0
   1dad4:	b	1daa0 <flatcc_verify_string_vector_field@@Base+0x78>

0001dad8 <flatcc_verify_table_field@@Base>:
   1dad8:	push	{r4, r5, lr}
   1dadc:	sub	sp, sp, #20
   1dae0:	mov	r5, r3
   1dae4:	add	r3, sp, #12
   1dae8:	mov	r4, r0
   1daec:	bl	1d708 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1daf0:	cmp	r0, #0
   1daf4:	bne	1db20 <flatcc_verify_table_field@@Base+0x48>
   1daf8:	ldr	r2, [sp, #12]
   1dafc:	cmp	r2, #0
   1db00:	beq	1db20 <flatcc_verify_table_field@@Base+0x48>
   1db04:	ldr	r0, [r4]
   1db08:	ldr	r3, [r4, #8]
   1db0c:	str	r5, [sp, #4]
   1db10:	str	r3, [sp]
   1db14:	ldr	r1, [r4, #4]
   1db18:	ldr	r3, [r0, r2]
   1db1c:	bl	1d76c <flatcc_emitter_copy_buffer@@Base+0x160>
   1db20:	add	sp, sp, #20
   1db24:	pop	{r4, r5, pc}

0001db28 <flatcc_verify_table_vector_field@@Base>:
   1db28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db2c:	sub	sp, sp, #36	; 0x24
   1db30:	mov	sl, r3
   1db34:	add	r3, sp, #28
   1db38:	mov	r7, r0
   1db3c:	bl	1d708 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1db40:	subs	r6, r0, #0
   1db44:	bne	1dbcc <flatcc_verify_table_vector_field@@Base+0xa4>
   1db48:	ldr	r4, [sp, #28]
   1db4c:	cmp	r4, #0
   1db50:	beq	1dbcc <flatcc_verify_table_vector_field@@Base+0xa4>
   1db54:	ldr	r9, [r7, #8]
   1db58:	cmp	r9, #0
   1db5c:	movle	r6, #3
   1db60:	ble	1dbcc <flatcc_verify_table_vector_field@@Base+0xa4>
   1db64:	ldm	r7, {r5, r8}
   1db68:	mvn	r3, #-1073741824	; 0xc0000000
   1db6c:	mov	r2, r4
   1db70:	ldr	r7, [r5, r4]
   1db74:	str	r3, [sp, #8]
   1db78:	mov	r3, #4
   1db7c:	str	r3, [sp, #4]
   1db80:	str	r3, [sp]
   1db84:	mov	r1, r8
   1db88:	mov	r3, r7
   1db8c:	mov	r0, r5
   1db90:	bl	1d84c <flatcc_emitter_copy_buffer@@Base+0x240>
   1db94:	cmp	r0, #0
   1db98:	bne	1dc18 <flatcc_verify_table_vector_field@@Base+0xf0>
   1db9c:	add	r4, r4, r7
   1dba0:	sub	r9, r9, #1
   1dba4:	ldr	r3, [r5, r4]
   1dba8:	add	r4, r4, #4
   1dbac:	add	r4, r5, r4
   1dbb0:	mov	r7, r6
   1dbb4:	str	r3, [sp, #20]
   1dbb8:	sub	r3, r4, r5
   1dbbc:	str	r3, [sp, #16]
   1dbc0:	ldr	r3, [sp, #20]
   1dbc4:	cmp	r3, r7
   1dbc8:	bne	1dbd8 <flatcc_verify_table_vector_field@@Base+0xb0>
   1dbcc:	mov	r0, r6
   1dbd0:	add	sp, sp, #36	; 0x24
   1dbd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbd8:	mov	fp, r4
   1dbdc:	stm	sp, {r9, sl}
   1dbe0:	ldr	r2, [sp, #16]
   1dbe4:	ldr	r3, [fp]
   1dbe8:	mov	r1, r8
   1dbec:	mov	r0, r5
   1dbf0:	bl	1d76c <flatcc_emitter_copy_buffer@@Base+0x160>
   1dbf4:	add	r4, r4, #4
   1dbf8:	cmp	r0, #0
   1dbfc:	beq	1dc20 <flatcc_verify_table_vector_field@@Base+0xf8>
   1dc00:	stm	sp, {r9, sl}
   1dc04:	ldr	r2, [sp, #16]
   1dc08:	ldr	r3, [fp]
   1dc0c:	mov	r1, r8
   1dc10:	mov	r0, r5
   1dc14:	bl	1d76c <flatcc_emitter_copy_buffer@@Base+0x160>
   1dc18:	mov	r6, r0
   1dc1c:	b	1dbcc <flatcc_verify_table_vector_field@@Base+0xa4>
   1dc20:	add	r7, r7, #1
   1dc24:	b	1dbb8 <flatcc_verify_table_vector_field@@Base+0x90>

0001dc28 <flatcc_verify_union_table@@Base>:
   1dc28:	push	{r0, r1, r2, lr}
   1dc2c:	str	r1, [sp, #4]
   1dc30:	ldr	r3, [r0, #8]
   1dc34:	str	r3, [sp]
   1dc38:	ldr	r3, [r0, #20]
   1dc3c:	ldr	r2, [r0, #16]
   1dc40:	ldm	r0, {r0, r1}
   1dc44:	bl	1d76c <flatcc_emitter_copy_buffer@@Base+0x160>
   1dc48:	add	sp, sp, #12
   1dc4c:	pop	{pc}		; (ldr pc, [sp], #4)

0001dc50 <flatcc_verify_union_struct@@Base>:
   1dc50:	ldr	ip, [r0, #4]
   1dc54:	ldr	r3, [r0, #16]
   1dc58:	ldr	r0, [r0, #20]
   1dc5c:	cmp	r0, #0
   1dc60:	beq	1dc94 <flatcc_verify_union_struct@@Base+0x44>
   1dc64:	add	r3, r3, r0
   1dc68:	cmp	ip, r3
   1dc6c:	bcc	1dc94 <flatcc_verify_union_struct@@Base+0x44>
   1dc70:	adds	r1, r1, r3
   1dc74:	bcs	1dc9c <flatcc_verify_union_struct@@Base+0x4c>
   1dc78:	cmp	ip, r1
   1dc7c:	bcc	1dca4 <flatcc_verify_union_struct@@Base+0x54>
   1dc80:	sub	r2, r2, #1
   1dc84:	tst	r2, r3
   1dc88:	movne	r0, #11
   1dc8c:	moveq	r0, #0
   1dc90:	bx	lr
   1dc94:	mov	r0, #18
   1dc98:	bx	lr
   1dc9c:	mov	r0, #10
   1dca0:	bx	lr
   1dca4:	mov	r0, #9
   1dca8:	bx	lr

0001dcac <flatcc_verify_union_string@@Base>:
   1dcac:	ldr	r3, [r0, #20]
   1dcb0:	ldr	r2, [r0, #16]
   1dcb4:	ldm	r0, {r0, r1}
   1dcb8:	b	1d8bc <flatcc_emitter_copy_buffer@@Base+0x2b0>

0001dcbc <flatcc_verify_buffer_header@@Base>:
   1dcbc:	ands	r3, r0, #3
   1dcc0:	push	{r0, r1, r4, lr}
   1dcc4:	movne	r0, #5
   1dcc8:	bne	1dd20 <flatcc_verify_buffer_header@@Base+0x64>
   1dccc:	cmn	r1, #9
   1dcd0:	movhi	r0, #6
   1dcd4:	bhi	1dd20 <flatcc_verify_buffer_header@@Base+0x64>
   1dcd8:	cmp	r1, #7
   1dcdc:	movls	r0, #1
   1dce0:	bls	1dd20 <flatcc_verify_buffer_header@@Base+0x64>
   1dce4:	cmp	r2, #0
   1dce8:	beq	1dd1c <flatcc_verify_buffer_header@@Base+0x60>
   1dcec:	mov	r4, r0
   1dcf0:	add	r0, sp, #8
   1dcf4:	mov	r1, r2
   1dcf8:	str	r3, [r0, #-4]!
   1dcfc:	mov	r2, #4
   1dd00:	bl	12a6c <strncpy@plt>
   1dd04:	ldr	r3, [sp, #4]
   1dd08:	ldr	r2, [r4, #4]
   1dd0c:	cmp	r3, #0
   1dd10:	cmpne	r2, r3
   1dd14:	movne	r0, #2
   1dd18:	bne	1dd20 <flatcc_verify_buffer_header@@Base+0x64>
   1dd1c:	mov	r0, #0
   1dd20:	add	sp, sp, #8
   1dd24:	pop	{r4, pc}

0001dd28 <flatcc_verify_typed_buffer_header@@Base>:
   1dd28:	tst	r0, #3
   1dd2c:	bne	1dd5c <flatcc_verify_typed_buffer_header@@Base+0x34>
   1dd30:	cmn	r1, #9
   1dd34:	bhi	1dd64 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   1dd38:	cmp	r1, #7
   1dd3c:	bls	1dd6c <flatcc_verify_typed_buffer_header@@Base+0x44>
   1dd40:	cmp	r2, #0
   1dd44:	beq	1dd74 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   1dd48:	ldr	r0, [r0, #4]
   1dd4c:	cmp	r2, r0
   1dd50:	movne	r0, #2
   1dd54:	moveq	r0, #0
   1dd58:	bx	lr
   1dd5c:	mov	r0, #5
   1dd60:	bx	lr
   1dd64:	mov	r0, #6
   1dd68:	bx	lr
   1dd6c:	mov	r0, #1
   1dd70:	bx	lr
   1dd74:	mov	r0, r2
   1dd78:	bx	lr

0001dd7c <flatcc_verify_struct_as_root@@Base>:
   1dd7c:	push	{r4, r5, r6, r7, r8, lr}
   1dd80:	mov	r7, r0
   1dd84:	mov	r6, r1
   1dd88:	mov	r8, r2
   1dd8c:	mov	r4, r3
   1dd90:	ldrh	r5, [sp, #24]
   1dd94:	bl	1dcbc <flatcc_verify_buffer_header@@Base>
   1dd98:	cmp	r0, #0
   1dd9c:	beq	1ddb4 <flatcc_verify_struct_as_root@@Base+0x38>
   1dda0:	mov	r2, r8
   1dda4:	mov	r1, r6
   1dda8:	mov	r0, r7
   1ddac:	pop	{r4, r5, r6, r7, r8, lr}
   1ddb0:	b	1dcbc <flatcc_verify_buffer_header@@Base>
   1ddb4:	ldr	r2, [r7]
   1ddb8:	cmp	r6, r2
   1ddbc:	movcs	r3, #0
   1ddc0:	movcc	r3, #1
   1ddc4:	cmp	r2, #0
   1ddc8:	orreq	r3, r3, #1
   1ddcc:	cmp	r3, #0
   1ddd0:	bne	1ddf8 <flatcc_verify_struct_as_root@@Base+0x7c>
   1ddd4:	adds	r4, r2, r4
   1ddd8:	bcs	1de00 <flatcc_verify_struct_as_root@@Base+0x84>
   1dddc:	cmp	r6, r4
   1dde0:	bcc	1de08 <flatcc_verify_struct_as_root@@Base+0x8c>
   1dde4:	sub	r5, r5, #1
   1dde8:	tst	r5, r2
   1ddec:	moveq	r0, #0
   1ddf0:	movne	r0, #11
   1ddf4:	pop	{r4, r5, r6, r7, r8, pc}
   1ddf8:	mov	r0, #18
   1ddfc:	pop	{r4, r5, r6, r7, r8, pc}
   1de00:	mov	r0, #10
   1de04:	pop	{r4, r5, r6, r7, r8, pc}
   1de08:	mov	r0, #9
   1de0c:	pop	{r4, r5, r6, r7, r8, pc}

0001de10 <flatcc_verify_struct_as_typed_root@@Base>:
   1de10:	push	{r4, r5, r6, lr}
   1de14:	mov	r5, r0
   1de18:	bl	1dd28 <flatcc_verify_typed_buffer_header@@Base>
   1de1c:	cmp	r0, #0
   1de20:	popne	{r4, r5, r6, pc}
   1de24:	ldr	r2, [r5]
   1de28:	mov	r4, r1
   1de2c:	cmp	r1, r2
   1de30:	movcs	r1, #0
   1de34:	movcc	r1, #1
   1de38:	cmp	r2, #0
   1de3c:	orreq	r1, r1, #1
   1de40:	cmp	r1, #0
   1de44:	bne	1de70 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   1de48:	adds	r3, r2, r3
   1de4c:	bcs	1de78 <flatcc_verify_struct_as_typed_root@@Base+0x68>
   1de50:	cmp	r4, r3
   1de54:	bcc	1de80 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   1de58:	ldrh	r3, [sp, #16]
   1de5c:	sub	r3, r3, #1
   1de60:	tst	r3, r2
   1de64:	moveq	r0, #0
   1de68:	movne	r0, #11
   1de6c:	pop	{r4, r5, r6, pc}
   1de70:	mov	r0, #18
   1de74:	pop	{r4, r5, r6, pc}
   1de78:	mov	r0, #10
   1de7c:	pop	{r4, r5, r6, pc}
   1de80:	mov	r0, #9
   1de84:	pop	{r4, r5, r6, pc}

0001de88 <flatcc_verify_table_as_root@@Base>:
   1de88:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1de8c:	mov	r7, r2
   1de90:	mov	r4, r0
   1de94:	mov	r5, r1
   1de98:	mov	r6, r3
   1de9c:	bl	1dcbc <flatcc_verify_buffer_header@@Base>
   1dea0:	subs	r2, r0, #0
   1dea4:	beq	1dec0 <flatcc_verify_table_as_root@@Base+0x38>
   1dea8:	mov	r2, r7
   1deac:	mov	r1, r5
   1deb0:	mov	r0, r4
   1deb4:	add	sp, sp, #12
   1deb8:	pop	{r4, r5, r6, r7, lr}
   1debc:	b	1dcbc <flatcc_verify_buffer_header@@Base>
   1dec0:	mov	r3, #100	; 0x64
   1dec4:	str	r3, [sp]
   1dec8:	str	r6, [sp, #4]
   1decc:	ldr	r3, [r4]
   1ded0:	mov	r1, r5
   1ded4:	mov	r0, r4
   1ded8:	bl	1d76c <flatcc_emitter_copy_buffer@@Base+0x160>
   1dedc:	add	sp, sp, #12
   1dee0:	pop	{r4, r5, r6, r7, pc}

0001dee4 <flatcc_verify_table_as_typed_root@@Base>:
   1dee4:	push	{r0, r1, r2, r4, r5, lr}
   1dee8:	mov	r4, r0
   1deec:	bl	1dd28 <flatcc_verify_typed_buffer_header@@Base>
   1def0:	cmp	r0, #0
   1def4:	bne	1df14 <flatcc_verify_table_as_typed_root@@Base+0x30>
   1def8:	str	r3, [sp, #4]
   1defc:	mov	r3, #100	; 0x64
   1df00:	str	r3, [sp]
   1df04:	mov	r2, r0
   1df08:	ldr	r3, [r4]
   1df0c:	mov	r0, r4
   1df10:	bl	1d76c <flatcc_emitter_copy_buffer@@Base+0x160>
   1df14:	add	sp, sp, #12
   1df18:	pop	{r4, r5, pc}

0001df1c <flatcc_verify_struct_as_nested_root@@Base>:
   1df1c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df20:	mov	r7, #1
   1df24:	ldrh	r4, [sp, #52]	; 0x34
   1df28:	mvn	sl, #0
   1df2c:	mov	r8, r3
   1df30:	stm	sp, {r7, sl}
   1df34:	mov	r3, r4
   1df38:	mov	r5, r0
   1df3c:	mov	r6, r1
   1df40:	mov	fp, r2
   1df44:	ldr	r9, [sp, #48]	; 0x30
   1df48:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   1df4c:	cmp	r0, #0
   1df50:	beq	1df78 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   1df54:	str	sl, [sp, #52]	; 0x34
   1df58:	str	r7, [sp, #48]	; 0x30
   1df5c:	mov	r3, r4
   1df60:	mov	r2, fp
   1df64:	mov	r1, r6
   1df68:	mov	r0, r5
   1df6c:	add	sp, sp, #12
   1df70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df74:	b	1d9d0 <flatcc_verify_vector_field@@Base>
   1df78:	mov	r1, r6
   1df7c:	mov	r0, r5
   1df80:	bl	1d6dc <flatcc_emitter_copy_buffer@@Base+0xd0>
   1df84:	subs	r1, r0, #0
   1df88:	beq	1dfb4 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   1df8c:	ldr	ip, [r1]
   1df90:	mov	r3, r9
   1df94:	add	r0, r1, ip
   1df98:	str	r4, [sp, #48]	; 0x30
   1df9c:	mov	r2, r8
   1dfa0:	ldr	r1, [r1, ip]
   1dfa4:	add	r0, r0, #4
   1dfa8:	add	sp, sp, #12
   1dfac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfb0:	b	1dd7c <flatcc_verify_struct_as_root@@Base>
   1dfb4:	add	sp, sp, #12
   1dfb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dfbc <flatcc_verify_table_as_nested_root@@Base>:
   1dfbc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfc0:	mov	r7, #1
   1dfc4:	ldrh	r5, [sp, #48]	; 0x30
   1dfc8:	mvn	sl, #0
   1dfcc:	mov	r8, r3
   1dfd0:	stm	sp, {r7, sl}
   1dfd4:	mov	r3, r5
   1dfd8:	mov	r6, r0
   1dfdc:	mov	r4, r1
   1dfe0:	mov	fp, r2
   1dfe4:	ldr	r9, [sp, #52]	; 0x34
   1dfe8:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   1dfec:	cmp	r0, #0
   1dff0:	beq	1e018 <flatcc_verify_table_as_nested_root@@Base+0x5c>
   1dff4:	str	sl, [sp, #52]	; 0x34
   1dff8:	str	r7, [sp, #48]	; 0x30
   1dffc:	mov	r3, r5
   1e000:	mov	r2, fp
   1e004:	mov	r1, r4
   1e008:	mov	r0, r6
   1e00c:	add	sp, sp, #12
   1e010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e014:	b	1d9d0 <flatcc_verify_vector_field@@Base>
   1e018:	mov	r1, r4
   1e01c:	mov	r0, r6
   1e020:	bl	1d6dc <flatcc_emitter_copy_buffer@@Base+0xd0>
   1e024:	subs	r3, r0, #0
   1e028:	beq	1e090 <flatcc_verify_table_as_nested_root@@Base+0xd4>
   1e02c:	ldr	r2, [r3]
   1e030:	add	r7, r3, r2
   1e034:	ldr	r5, [r3, r2]
   1e038:	add	r4, r7, #4
   1e03c:	mov	r2, r8
   1e040:	mov	r1, r5
   1e044:	mov	r0, r4
   1e048:	bl	1dcbc <flatcc_verify_buffer_header@@Base>
   1e04c:	subs	r2, r0, #0
   1e050:	beq	1e06c <flatcc_verify_table_as_nested_root@@Base+0xb0>
   1e054:	mov	r2, r8
   1e058:	mov	r1, r5
   1e05c:	mov	r0, r4
   1e060:	add	sp, sp, #12
   1e064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e068:	b	1dcbc <flatcc_verify_buffer_header@@Base>
   1e06c:	ldr	r3, [r6, #8]
   1e070:	str	r9, [sp, #52]	; 0x34
   1e074:	str	r3, [sp, #48]	; 0x30
   1e078:	mov	r1, r5
   1e07c:	ldr	r3, [r7, #4]
   1e080:	mov	r0, r4
   1e084:	add	sp, sp, #12
   1e088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e08c:	b	1d76c <flatcc_emitter_copy_buffer@@Base+0x160>
   1e090:	add	sp, sp, #12
   1e094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e098 <flatcc_verify_union_field@@Base>:
   1e098:	push	{r4, r5, r6, r7, r8, lr}
   1e09c:	mov	r6, r1
   1e0a0:	sub	r1, r1, #1
   1e0a4:	sub	sp, sp, #32
   1e0a8:	uxth	r1, r1
   1e0ac:	mov	r7, r3
   1e0b0:	mov	r4, r0
   1e0b4:	bl	1d6b8 <flatcc_emitter_copy_buffer@@Base+0xac>
   1e0b8:	uxth	r3, r0
   1e0bc:	cmp	r3, #0
   1e0c0:	bne	1e0f8 <flatcc_verify_union_field@@Base+0x60>
   1e0c4:	mov	r1, r6
   1e0c8:	mov	r0, r4
   1e0cc:	bl	1d6b8 <flatcc_emitter_copy_buffer@@Base+0xac>
   1e0d0:	uxth	r0, r0
   1e0d4:	cmp	r0, #0
   1e0d8:	movne	r0, #23
   1e0dc:	bne	1e0f0 <flatcc_verify_union_field@@Base+0x58>
   1e0e0:	cmp	r2, #0
   1e0e4:	movne	r0, #21
   1e0e8:	bne	1e0f0 <flatcc_verify_union_field@@Base+0x58>
   1e0ec:	mov	r0, #0
   1e0f0:	add	sp, sp, #32
   1e0f4:	pop	{r4, r5, r6, r7, r8, pc}
   1e0f8:	ldrh	r3, [r4, #20]
   1e0fc:	uxth	r5, r0
   1e100:	add	r1, r5, #1
   1e104:	cmp	r1, r3
   1e108:	movhi	r0, #13
   1e10c:	bhi	1e0f0 <flatcc_verify_union_field@@Base+0x58>
   1e110:	mov	r1, r6
   1e114:	mov	r0, r4
   1e118:	bl	1d6b8 <flatcc_emitter_copy_buffer@@Base+0xac>
   1e11c:	ldr	r3, [r4, #16]
   1e120:	ldr	r8, [r4]
   1e124:	add	r5, r5, r3
   1e128:	ldrb	r1, [r8, r5]
   1e12c:	adds	r3, r1, #0
   1e130:	movne	r3, #1
   1e134:	uxth	r0, r0
   1e138:	cmp	r0, #0
   1e13c:	movne	r0, r3
   1e140:	orreq	r0, r3, #1
   1e144:	cmp	r0, #0
   1e148:	moveq	r0, #24
   1e14c:	beq	1e0f0 <flatcc_verify_union_field@@Base+0x58>
   1e150:	cmp	r1, #0
   1e154:	beq	1e0ec <flatcc_verify_union_field@@Base+0x54>
   1e158:	add	r3, sp, #4
   1e15c:	mov	r1, r6
   1e160:	mov	r0, r4
   1e164:	bl	1d708 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1e168:	cmp	r0, #0
   1e16c:	bne	1e0f0 <flatcc_verify_union_field@@Base+0x58>
   1e170:	ldr	r3, [sp, #4]
   1e174:	cmp	r3, #0
   1e178:	beq	1e0ec <flatcc_verify_union_field@@Base+0x54>
   1e17c:	ldr	r1, [r4, #4]
   1e180:	ldr	r2, [r4]
   1e184:	str	r1, [sp, #12]
   1e188:	ldr	r1, [r4, #8]
   1e18c:	str	r3, [sp, #24]
   1e190:	str	r1, [sp, #16]
   1e194:	ldr	r3, [r2, r3]
   1e198:	str	r2, [sp, #8]
   1e19c:	str	r3, [sp, #28]
   1e1a0:	ldrb	r3, [r8, r5]
   1e1a4:	add	r0, sp, #8
   1e1a8:	strb	r3, [sp, #20]
   1e1ac:	blx	r7
   1e1b0:	b	1e0f0 <flatcc_verify_union_field@@Base+0x58>

0001e1b4 <flatcc_verify_union_vector_field@@Base>:
   1e1b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1b8:	sub	r5, r1, #1
   1e1bc:	sub	sp, sp, #60	; 0x3c
   1e1c0:	uxth	r5, r5
   1e1c4:	mov	r9, r1
   1e1c8:	mov	r1, r5
   1e1cc:	mov	r4, r0
   1e1d0:	mov	r8, r2
   1e1d4:	mov	sl, r3
   1e1d8:	bl	1d6b8 <flatcc_emitter_copy_buffer@@Base+0xac>
   1e1dc:	uxth	r0, r0
   1e1e0:	cmp	r0, #0
   1e1e4:	bne	1e214 <flatcc_verify_union_vector_field@@Base+0x60>
   1e1e8:	mov	r1, r9
   1e1ec:	mov	r0, r4
   1e1f0:	bl	1d6b8 <flatcc_emitter_copy_buffer@@Base+0xac>
   1e1f4:	cmp	r2, #0
   1e1f8:	uxth	r0, r0
   1e1fc:	clz	r0, r0
   1e200:	lsr	r0, r0, #5
   1e204:	moveq	r0, #0
   1e208:	cmp	r0, #0
   1e20c:	movne	r3, #22
   1e210:	bne	1e274 <flatcc_verify_union_vector_field@@Base+0xc0>
   1e214:	mov	r7, #1
   1e218:	mvn	fp, #0
   1e21c:	mov	r3, r7
   1e220:	stm	sp, {r7, fp}
   1e224:	mov	r2, r8
   1e228:	mov	r1, r5
   1e22c:	mov	r0, r4
   1e230:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   1e234:	subs	r6, r0, #0
   1e238:	beq	1e25c <flatcc_verify_union_vector_field@@Base+0xa8>
   1e23c:	stm	sp, {r7, fp}
   1e240:	mov	r3, r7
   1e244:	mov	r2, r8
   1e248:	mov	r1, r5
   1e24c:	mov	r0, r4
   1e250:	bl	1d9d0 <flatcc_verify_vector_field@@Base>
   1e254:	mov	r3, r0
   1e258:	b	1e274 <flatcc_verify_union_vector_field@@Base+0xc0>
   1e25c:	mov	r1, r5
   1e260:	mov	r0, r4
   1e264:	bl	1d6dc <flatcc_emitter_copy_buffer@@Base+0xd0>
   1e268:	cmp	r0, #0
   1e26c:	bne	1e280 <flatcc_verify_union_vector_field@@Base+0xcc>
   1e270:	mov	r3, r6
   1e274:	mov	r0, r3
   1e278:	add	sp, sp, #60	; 0x3c
   1e27c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e280:	ldr	r3, [r0]
   1e284:	mov	r2, r8
   1e288:	add	r5, r0, r3
   1e28c:	ldr	r7, [r0, r3]
   1e290:	mov	r1, r9
   1e294:	add	r3, sp, #28
   1e298:	mov	r0, r4
   1e29c:	bl	1d708 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1e2a0:	subs	r3, r0, #0
   1e2a4:	bne	1e274 <flatcc_verify_union_vector_field@@Base+0xc0>
   1e2a8:	ldr	r9, [sp, #28]
   1e2ac:	cmp	r9, #0
   1e2b0:	beq	1e270 <flatcc_verify_union_vector_field@@Base+0xbc>
   1e2b4:	ldr	r8, [r4, #8]
   1e2b8:	cmp	r8, #0
   1e2bc:	movle	r3, #3
   1e2c0:	ble	1e274 <flatcc_verify_union_vector_field@@Base+0xc0>
   1e2c4:	ldm	r4, {r6, fp}
   1e2c8:	mvn	r3, #-1073741824	; 0xc0000000
   1e2cc:	mov	r2, r9
   1e2d0:	ldr	r4, [r6, r9]
   1e2d4:	str	r3, [sp, #8]
   1e2d8:	mov	r3, #4
   1e2dc:	str	r3, [sp, #4]
   1e2e0:	str	r3, [sp]
   1e2e4:	mov	r1, fp
   1e2e8:	mov	r3, r4
   1e2ec:	mov	r0, r6
   1e2f0:	bl	1d84c <flatcc_emitter_copy_buffer@@Base+0x240>
   1e2f4:	subs	r3, r0, #0
   1e2f8:	bne	1e274 <flatcc_verify_union_vector_field@@Base+0xc0>
   1e2fc:	add	r4, r4, r9
   1e300:	ldr	r2, [r6, r4]
   1e304:	cmp	r7, r2
   1e308:	movne	r3, #34	; 0x22
   1e30c:	bne	1e274 <flatcc_verify_union_vector_field@@Base+0xc0>
   1e310:	add	r5, r5, #4
   1e314:	add	r4, r4, #4
   1e318:	add	r7, r7, r5
   1e31c:	sub	r8, r8, #1
   1e320:	str	r6, [sp, #32]
   1e324:	str	fp, [sp, #36]	; 0x24
   1e328:	str	r8, [sp, #40]	; 0x28
   1e32c:	cmp	r5, r7
   1e330:	beq	1e274 <flatcc_verify_union_vector_field@@Base+0xc0>
   1e334:	ldr	r1, [r6, r4]
   1e338:	ldrb	r2, [r5]
   1e33c:	cmp	r1, #0
   1e340:	bne	1e354 <flatcc_verify_union_vector_field@@Base+0x1a0>
   1e344:	cmp	r2, #0
   1e348:	beq	1e38c <flatcc_verify_union_vector_field@@Base+0x1d8>
   1e34c:	mov	r3, #32
   1e350:	b	1e274 <flatcc_verify_union_vector_field@@Base+0xc0>
   1e354:	cmp	r2, #0
   1e358:	str	r3, [sp, #20]
   1e35c:	beq	1e398 <flatcc_verify_union_vector_field@@Base+0x1e4>
   1e360:	add	r0, sp, #32
   1e364:	strb	r2, [sp, #44]	; 0x2c
   1e368:	str	r4, [sp, #48]	; 0x30
   1e36c:	str	r1, [sp, #52]	; 0x34
   1e370:	blx	sl
   1e374:	ldr	r3, [sp, #20]
   1e378:	cmp	r0, #0
   1e37c:	beq	1e38c <flatcc_verify_union_vector_field@@Base+0x1d8>
   1e380:	add	r0, sp, #32
   1e384:	blx	sl
   1e388:	b	1e254 <flatcc_verify_union_vector_field@@Base+0xa0>
   1e38c:	add	r4, r4, #4
   1e390:	add	r5, r5, #1
   1e394:	b	1e32c <flatcc_verify_union_vector_field@@Base+0x178>
   1e398:	mov	r3, #33	; 0x21
   1e39c:	b	1e274 <flatcc_verify_union_vector_field@@Base+0xc0>
   1e3a0:	subs	r2, r1, #1
   1e3a4:	bxeq	lr
   1e3a8:	bcc	1e580 <flatcc_verify_union_vector_field@@Base+0x3cc>
   1e3ac:	cmp	r0, r1
   1e3b0:	bls	1e564 <flatcc_verify_union_vector_field@@Base+0x3b0>
   1e3b4:	tst	r1, r2
   1e3b8:	beq	1e570 <flatcc_verify_union_vector_field@@Base+0x3bc>
   1e3bc:	clz	r3, r0
   1e3c0:	clz	r2, r1
   1e3c4:	sub	r3, r2, r3
   1e3c8:	rsbs	r3, r3, #31
   1e3cc:	addne	r3, r3, r3, lsl #1
   1e3d0:	mov	r2, #0
   1e3d4:	addne	pc, pc, r3, lsl #2
   1e3d8:	nop			; (mov r0, r0)
   1e3dc:	cmp	r0, r1, lsl #31
   1e3e0:	adc	r2, r2, r2
   1e3e4:	subcs	r0, r0, r1, lsl #31
   1e3e8:	cmp	r0, r1, lsl #30
   1e3ec:	adc	r2, r2, r2
   1e3f0:	subcs	r0, r0, r1, lsl #30
   1e3f4:	cmp	r0, r1, lsl #29
   1e3f8:	adc	r2, r2, r2
   1e3fc:	subcs	r0, r0, r1, lsl #29
   1e400:	cmp	r0, r1, lsl #28
   1e404:	adc	r2, r2, r2
   1e408:	subcs	r0, r0, r1, lsl #28
   1e40c:	cmp	r0, r1, lsl #27
   1e410:	adc	r2, r2, r2
   1e414:	subcs	r0, r0, r1, lsl #27
   1e418:	cmp	r0, r1, lsl #26
   1e41c:	adc	r2, r2, r2
   1e420:	subcs	r0, r0, r1, lsl #26
   1e424:	cmp	r0, r1, lsl #25
   1e428:	adc	r2, r2, r2
   1e42c:	subcs	r0, r0, r1, lsl #25
   1e430:	cmp	r0, r1, lsl #24
   1e434:	adc	r2, r2, r2
   1e438:	subcs	r0, r0, r1, lsl #24
   1e43c:	cmp	r0, r1, lsl #23
   1e440:	adc	r2, r2, r2
   1e444:	subcs	r0, r0, r1, lsl #23
   1e448:	cmp	r0, r1, lsl #22
   1e44c:	adc	r2, r2, r2
   1e450:	subcs	r0, r0, r1, lsl #22
   1e454:	cmp	r0, r1, lsl #21
   1e458:	adc	r2, r2, r2
   1e45c:	subcs	r0, r0, r1, lsl #21
   1e460:	cmp	r0, r1, lsl #20
   1e464:	adc	r2, r2, r2
   1e468:	subcs	r0, r0, r1, lsl #20
   1e46c:	cmp	r0, r1, lsl #19
   1e470:	adc	r2, r2, r2
   1e474:	subcs	r0, r0, r1, lsl #19
   1e478:	cmp	r0, r1, lsl #18
   1e47c:	adc	r2, r2, r2
   1e480:	subcs	r0, r0, r1, lsl #18
   1e484:	cmp	r0, r1, lsl #17
   1e488:	adc	r2, r2, r2
   1e48c:	subcs	r0, r0, r1, lsl #17
   1e490:	cmp	r0, r1, lsl #16
   1e494:	adc	r2, r2, r2
   1e498:	subcs	r0, r0, r1, lsl #16
   1e49c:	cmp	r0, r1, lsl #15
   1e4a0:	adc	r2, r2, r2
   1e4a4:	subcs	r0, r0, r1, lsl #15
   1e4a8:	cmp	r0, r1, lsl #14
   1e4ac:	adc	r2, r2, r2
   1e4b0:	subcs	r0, r0, r1, lsl #14
   1e4b4:	cmp	r0, r1, lsl #13
   1e4b8:	adc	r2, r2, r2
   1e4bc:	subcs	r0, r0, r1, lsl #13
   1e4c0:	cmp	r0, r1, lsl #12
   1e4c4:	adc	r2, r2, r2
   1e4c8:	subcs	r0, r0, r1, lsl #12
   1e4cc:	cmp	r0, r1, lsl #11
   1e4d0:	adc	r2, r2, r2
   1e4d4:	subcs	r0, r0, r1, lsl #11
   1e4d8:	cmp	r0, r1, lsl #10
   1e4dc:	adc	r2, r2, r2
   1e4e0:	subcs	r0, r0, r1, lsl #10
   1e4e4:	cmp	r0, r1, lsl #9
   1e4e8:	adc	r2, r2, r2
   1e4ec:	subcs	r0, r0, r1, lsl #9
   1e4f0:	cmp	r0, r1, lsl #8
   1e4f4:	adc	r2, r2, r2
   1e4f8:	subcs	r0, r0, r1, lsl #8
   1e4fc:	cmp	r0, r1, lsl #7
   1e500:	adc	r2, r2, r2
   1e504:	subcs	r0, r0, r1, lsl #7
   1e508:	cmp	r0, r1, lsl #6
   1e50c:	adc	r2, r2, r2
   1e510:	subcs	r0, r0, r1, lsl #6
   1e514:	cmp	r0, r1, lsl #5
   1e518:	adc	r2, r2, r2
   1e51c:	subcs	r0, r0, r1, lsl #5
   1e520:	cmp	r0, r1, lsl #4
   1e524:	adc	r2, r2, r2
   1e528:	subcs	r0, r0, r1, lsl #4
   1e52c:	cmp	r0, r1, lsl #3
   1e530:	adc	r2, r2, r2
   1e534:	subcs	r0, r0, r1, lsl #3
   1e538:	cmp	r0, r1, lsl #2
   1e53c:	adc	r2, r2, r2
   1e540:	subcs	r0, r0, r1, lsl #2
   1e544:	cmp	r0, r1, lsl #1
   1e548:	adc	r2, r2, r2
   1e54c:	subcs	r0, r0, r1, lsl #1
   1e550:	cmp	r0, r1
   1e554:	adc	r2, r2, r2
   1e558:	subcs	r0, r0, r1
   1e55c:	mov	r0, r2
   1e560:	bx	lr
   1e564:	moveq	r0, #1
   1e568:	movne	r0, #0
   1e56c:	bx	lr
   1e570:	clz	r2, r1
   1e574:	rsb	r2, r2, #31
   1e578:	lsr	r0, r0, r2
   1e57c:	bx	lr
   1e580:	cmp	r0, #0
   1e584:	mvnne	r0, #0
   1e588:	b	1e5ac <flatcc_verify_union_vector_field@@Base+0x3f8>
   1e58c:	cmp	r1, #0
   1e590:	beq	1e580 <flatcc_verify_union_vector_field@@Base+0x3cc>
   1e594:	push	{r0, r1, lr}
   1e598:	bl	1e3a0 <flatcc_verify_union_vector_field@@Base+0x1ec>
   1e59c:	pop	{r1, r2, lr}
   1e5a0:	mul	r3, r2, r0
   1e5a4:	sub	r1, r1, r3
   1e5a8:	bx	lr
   1e5ac:	push	{r1, lr}
   1e5b0:	mov	r0, #8
   1e5b4:	bl	129ac <raise@plt>
   1e5b8:	pop	{r1, pc}

0001e5bc <__libc_csu_init@@Base>:
   1e5bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e5c0:	mov	r7, r0
   1e5c4:	ldr	r6, [pc, #72]	; 1e614 <__libc_csu_init@@Base+0x58>
   1e5c8:	ldr	r5, [pc, #72]	; 1e618 <__libc_csu_init@@Base+0x5c>
   1e5cc:	add	r6, pc, r6
   1e5d0:	add	r5, pc, r5
   1e5d4:	sub	r6, r6, r5
   1e5d8:	mov	r8, r1
   1e5dc:	mov	r9, r2
   1e5e0:	bl	1298c <raise@plt-0x20>
   1e5e4:	asrs	r6, r6, #2
   1e5e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e5ec:	mov	r4, #0
   1e5f0:	add	r4, r4, #1
   1e5f4:	ldr	r3, [r5], #4
   1e5f8:	mov	r2, r9
   1e5fc:	mov	r1, r8
   1e600:	mov	r0, r7
   1e604:	blx	r3
   1e608:	cmp	r6, r4
   1e60c:	bne	1e5f0 <__libc_csu_init@@Base+0x34>
   1e610:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e614:	andeq	r4, r1, ip, lsr r9
   1e618:	andeq	r4, r1, r4, lsr r9

0001e61c <__libc_csu_fini@@Base>:
   1e61c:	bx	lr

Disassembly of section .fini:

0001e620 <.fini>:
   1e620:	push	{r3, lr}
   1e624:	pop	{r3, pc}
