
../repos/takev-yyast-2f13a16/yyast/yadump:     file format elf32-littlearm


Disassembly of section .init:

000104ac <.init>:
   104ac:	push	{r3, lr}
   104b0:	bl	106b4 <close@plt+0x140>
   104b4:	pop	{r3, pc}

Disassembly of section .plt:

000104b8 <free@plt-0x14>:
   104b8:	push	{lr}		; (str lr, [sp, #-4]!)
   104bc:	ldr	lr, [pc, #4]	; 104c8 <free@plt-0x4>
   104c0:	add	lr, pc, lr
   104c4:	ldr	pc, [lr, #8]!
   104c8:	andeq	r0, r1, r8, lsr fp

000104cc <free@plt>:
   104cc:	add	ip, pc, #0, 12
   104d0:	add	ip, ip, #16, 20	; 0x10000
   104d4:	ldr	pc, [ip, #2872]!	; 0xb38

000104d8 <strndup@plt>:
   104d8:	add	ip, pc, #0, 12
   104dc:	add	ip, ip, #16, 20	; 0x10000
   104e0:	ldr	pc, [ip, #2864]!	; 0xb30

000104e4 <perror@plt>:
   104e4:	add	ip, pc, #0, 12
   104e8:	add	ip, ip, #16, 20	; 0x10000
   104ec:	ldr	pc, [ip, #2856]!	; 0xb28

000104f0 <__libc_start_main@plt>:
   104f0:	add	ip, pc, #0, 12
   104f4:	add	ip, ip, #16, 20	; 0x10000
   104f8:	ldr	pc, [ip, #2848]!	; 0xb20

000104fc <__fxstat@plt>:
   104fc:	add	ip, pc, #0, 12
   10500:	add	ip, ip, #16, 20	; 0x10000
   10504:	ldr	pc, [ip, #2840]!	; 0xb18

00010508 <__gmon_start__@plt>:
   10508:	add	ip, pc, #0, 12
   1050c:	add	ip, ip, #16, 20	; 0x10000
   10510:	ldr	pc, [ip, #2832]!	; 0xb10

00010514 <open@plt>:
   10514:	add	ip, pc, #0, 12
   10518:	add	ip, ip, #16, 20	; 0x10000
   1051c:	ldr	pc, [ip, #2824]!	; 0xb08

00010520 <exit@plt>:
   10520:	add	ip, pc, #0, 12
   10524:	add	ip, ip, #16, 20	; 0x10000
   10528:	ldr	pc, [ip, #2816]!	; 0xb00

0001052c <mmap@plt>:
   1052c:	add	ip, pc, #0, 12
   10530:	add	ip, ip, #16, 20	; 0x10000
   10534:	ldr	pc, [ip, #2808]!	; 0xaf8

00010538 <fprintf@plt>:
   10538:	add	ip, pc, #0, 12
   1053c:	add	ip, ip, #16, 20	; 0x10000
   10540:	ldr	pc, [ip, #2800]!	; 0xaf0

00010544 <munmap@plt>:
   10544:	add	ip, pc, #0, 12
   10548:	add	ip, ip, #16, 20	; 0x10000
   1054c:	ldr	pc, [ip, #2792]!	; 0xae8

00010550 <fputc@plt>:
   10550:	add	ip, pc, #0, 12
   10554:	add	ip, ip, #16, 20	; 0x10000
   10558:	ldr	pc, [ip, #2784]!	; 0xae0

0001055c <fputs@plt>:
   1055c:	add	ip, pc, #0, 12
   10560:	add	ip, ip, #16, 20	; 0x10000
   10564:	ldr	pc, [ip, #2776]!	; 0xad8

00010568 <abort@plt>:
   10568:	add	ip, pc, #0, 12
   1056c:	add	ip, ip, #16, 20	; 0x10000
   10570:	ldr	pc, [ip, #2768]!	; 0xad0

00010574 <close@plt>:
   10574:	add	ip, pc, #0, 12
   10578:	add	ip, ip, #16, 20	; 0x10000
   1057c:	ldr	pc, [ip, #2760]!	; 0xac8

Disassembly of section .text:

00010580 <.text>:
   10580:	cmp	r0, #2
   10584:	push	{r4, r5, r6, r7, lr}
   10588:	sub	sp, sp, #100	; 0x64
   1058c:	beq	105a8 <close@plt+0x34>
   10590:	ldr	r3, [pc, #196]	; 1065c <close@plt+0xe8>
   10594:	ldr	r0, [pc, #196]	; 10660 <close@plt+0xec>
   10598:	ldr	r1, [r3]
   1059c:	bl	1055c <fputs@plt>
   105a0:	mov	r0, #1
   105a4:	bl	10520 <exit@plt>
   105a8:	mov	r3, r1
   105ac:	mov	r1, #0
   105b0:	ldr	r0, [r3, #4]
   105b4:	bl	10514 <open@plt>
   105b8:	cmn	r0, #1
   105bc:	mov	r5, r0
   105c0:	bne	105d0 <close@plt+0x5c>
   105c4:	ldr	r0, [pc, #152]	; 10664 <close@plt+0xf0>
   105c8:	bl	104e4 <perror@plt>
   105cc:	b	105a0 <close@plt+0x2c>
   105d0:	add	r1, sp, #8
   105d4:	bl	10bd8 <close@plt+0x664>
   105d8:	cmn	r0, #1
   105dc:	ldreq	r0, [pc, #132]	; 10668 <close@plt+0xf4>
   105e0:	beq	105c8 <close@plt+0x54>
   105e4:	ldr	r6, [sp, #52]	; 0x34
   105e8:	mov	r4, #0
   105ec:	mov	r3, #1
   105f0:	str	r4, [sp, #4]
   105f4:	str	r5, [sp]
   105f8:	mov	r2, r3
   105fc:	mov	r1, r6
   10600:	mov	r0, r4
   10604:	bl	1052c <mmap@plt>
   10608:	cmn	r0, #1
   1060c:	mov	r7, r0
   10610:	ldreq	r0, [pc, #84]	; 1066c <close@plt+0xf8>
   10614:	beq	105c8 <close@plt+0x54>
   10618:	mov	r2, r4
   1061c:	mov	r1, r6
   10620:	bl	10848 <close@plt+0x2d4>
   10624:	mov	r1, r6
   10628:	mov	r0, r7
   1062c:	bl	10544 <munmap@plt>
   10630:	cmn	r0, #1
   10634:	ldreq	r0, [pc, #52]	; 10670 <close@plt+0xfc>
   10638:	beq	105c8 <close@plt+0x54>
   1063c:	mov	r0, r5
   10640:	bl	10574 <close@plt>
   10644:	cmn	r0, #1
   10648:	ldreq	r0, [pc, #36]	; 10674 <close@plt+0x100>
   1064c:	beq	105c8 <close@plt+0x54>
   10650:	mov	r0, r4
   10654:	add	sp, sp, #100	; 0x64
   10658:	pop	{r4, r5, r6, r7, pc}
   1065c:	andeq	r1, r2, r8, asr r0
   10660:	ldrdeq	r0, [r1], -r1
   10664:	strdeq	r0, [r1], -r1
   10668:	andeq	r0, r1, r6, lsl #26
   1066c:	andeq	r0, r1, pc, lsl sp
   10670:	andeq	r0, r1, r1, asr #26
   10674:	andeq	r0, r1, r7, ror #26
   10678:	mov	fp, #0
   1067c:	mov	lr, #0
   10680:	pop	{r1}		; (ldr r1, [sp], #4)
   10684:	mov	r2, sp
   10688:	push	{r2}		; (str r2, [sp, #-4]!)
   1068c:	push	{r0}		; (str r0, [sp, #-4]!)
   10690:	ldr	ip, [pc, #16]	; 106a8 <close@plt+0x134>
   10694:	push	{ip}		; (str ip, [sp, #-4]!)
   10698:	ldr	r0, [pc, #12]	; 106ac <close@plt+0x138>
   1069c:	ldr	r3, [pc, #12]	; 106b0 <close@plt+0x13c>
   106a0:	bl	104f0 <__libc_start_main@plt>
   106a4:	bl	10568 <abort@plt>
   106a8:	ldrdeq	r0, [r1], -r4
   106ac:	andeq	r0, r1, r0, lsl #11
   106b0:	andeq	r0, r1, r4, ror fp
   106b4:	ldr	r3, [pc, #20]	; 106d0 <close@plt+0x15c>
   106b8:	ldr	r2, [pc, #20]	; 106d4 <close@plt+0x160>
   106bc:	add	r3, pc, r3
   106c0:	ldr	r2, [r3, r2]
   106c4:	cmp	r2, #0
   106c8:	bxeq	lr
   106cc:	b	10508 <__gmon_start__@plt>
   106d0:	andeq	r0, r1, ip, lsr r9
   106d4:	andeq	r0, r0, r8, asr #32
   106d8:	ldr	r3, [pc, #28]	; 106fc <close@plt+0x188>
   106dc:	ldr	r0, [pc, #28]	; 10700 <close@plt+0x18c>
   106e0:	sub	r3, r3, r0
   106e4:	cmp	r3, #6
   106e8:	bxls	lr
   106ec:	ldr	r3, [pc, #16]	; 10704 <close@plt+0x190>
   106f0:	cmp	r3, #0
   106f4:	bxeq	lr
   106f8:	bx	r3
   106fc:	andeq	r1, r2, r7, asr r0
   10700:	andeq	r1, r2, r4, asr r0
   10704:	andeq	r0, r0, r0
   10708:	ldr	r1, [pc, #36]	; 10734 <close@plt+0x1c0>
   1070c:	ldr	r0, [pc, #36]	; 10738 <close@plt+0x1c4>
   10710:	sub	r1, r1, r0
   10714:	asr	r1, r1, #2
   10718:	add	r1, r1, r1, lsr #31
   1071c:	asrs	r1, r1, #1
   10720:	bxeq	lr
   10724:	ldr	r3, [pc, #16]	; 1073c <close@plt+0x1c8>
   10728:	cmp	r3, #0
   1072c:	bxeq	lr
   10730:	bx	r3
   10734:	andeq	r1, r2, r4, asr r0
   10738:	andeq	r1, r2, r4, asr r0
   1073c:	andeq	r0, r0, r0
   10740:	push	{r4, lr}
   10744:	ldr	r4, [pc, #24]	; 10764 <close@plt+0x1f0>
   10748:	ldrb	r3, [r4]
   1074c:	cmp	r3, #0
   10750:	popne	{r4, pc}
   10754:	bl	106d8 <close@plt+0x164>
   10758:	mov	r3, #1
   1075c:	strb	r3, [r4]
   10760:	pop	{r4, pc}
   10764:	andeq	r1, r2, r0, rrx
   10768:	ldr	r0, [pc, #40]	; 10798 <close@plt+0x224>
   1076c:	ldr	r3, [r0]
   10770:	cmp	r3, #0
   10774:	bne	1077c <close@plt+0x208>
   10778:	b	10708 <close@plt+0x194>
   1077c:	ldr	r3, [pc, #24]	; 1079c <close@plt+0x228>
   10780:	cmp	r3, #0
   10784:	beq	10778 <close@plt+0x204>
   10788:	push	{r4, lr}
   1078c:	blx	r3
   10790:	pop	{r4, lr}
   10794:	b	10708 <close@plt+0x194>
   10798:	andeq	r0, r2, r4, lsl pc
   1079c:	andeq	r0, r0, r0
   107a0:	push	{r4, r5, r6, r7, r8, lr}
   107a4:	mov	r5, r0
   107a8:	ldr	r6, [pc, #36]	; 107d4 <close@plt+0x260>
   107ac:	ldr	r7, [pc, #36]	; 107d8 <close@plt+0x264>
   107b0:	mov	r4, #0
   107b4:	cmp	r4, r5
   107b8:	bne	107c0 <close@plt+0x24c>
   107bc:	pop	{r4, r5, r6, r7, r8, pc}
   107c0:	ldr	r1, [r6]
   107c4:	mov	r0, r7
   107c8:	bl	1055c <fputs@plt>
   107cc:	add	r4, r4, #1
   107d0:	b	107b4 <close@plt+0x240>
   107d4:	andeq	r1, r2, ip, asr r0
   107d8:	andeq	r0, r1, r0, lsl #25
   107dc:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   107e0:	uxtb	r2, r0
   107e4:	str	r2, [sp, #20]
   107e8:	lsr	r2, r0, #8
   107ec:	lsr	r3, r1, #16
   107f0:	uxtb	r2, r2
   107f4:	str	r2, [sp, #16]
   107f8:	lsr	r2, r0, #16
   107fc:	lsr	r0, r0, #24
   10800:	uxtb	r2, r2
   10804:	str	r2, [sp, #12]
   10808:	uxtb	r2, r1
   1080c:	str	r0, [sp, #8]
   10810:	str	r2, [sp, #4]
   10814:	ldr	r0, [pc, #36]	; 10840 <close@plt+0x2cc>
   10818:	lsr	r2, r1, #8
   1081c:	uxtb	r3, r3
   10820:	uxtb	r2, r2
   10824:	str	r2, [sp]
   10828:	lsr	r2, r1, #24
   1082c:	ldr	r0, [r0]
   10830:	ldr	r1, [pc, #12]	; 10844 <close@plt+0x2d0>
   10834:	bl	10538 <fprintf@plt>
   10838:	add	sp, sp, #28
   1083c:	pop	{pc}		; (ldr pc, [sp], #4)
   10840:	andeq	r1, r2, ip, asr r0
   10844:	strdeq	r0, [r1], -r4
   10848:	cmp	r1, #31
   1084c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10850:	sub	sp, sp, #20
   10854:	ldr	r6, [pc, #728]	; 10b34 <close@plt+0x5c0>
   10858:	bhi	10870 <close@plt+0x2fc>
   1085c:	ldr	r1, [r6]
   10860:	ldr	r0, [pc, #720]	; 10b38 <close@plt+0x5c4>
   10864:	bl	1055c <fputs@plt>
   10868:	mov	r0, #1
   1086c:	bl	10520 <exit@plt>
   10870:	mov	r4, r0
   10874:	ldrb	r3, [r0, #31]
   10878:	ldr	r5, [r4, #12]
   1087c:	ldr	r8, [r0]
   10880:	rev	r5, r5
   10884:	ldr	r9, [r0, #4]
   10888:	sub	r5, r5, #32
   1088c:	mov	r7, r2
   10890:	str	r3, [sp, #12]
   10894:	ldr	r2, [r4, #24]
   10898:	ldr	r3, [r0, #16]
   1089c:	ldr	r0, [r0, #20]
   108a0:	cmp	r1, r5
   108a4:	rev	r8, r8
   108a8:	rev	r9, r9
   108ac:	rev	r3, r3
   108b0:	rev	r0, r0
   108b4:	rev	r2, r2
   108b8:	mov	sl, r5
   108bc:	mov	fp, #0
   108c0:	bcs	108e8 <close@plt+0x374>
   108c4:	mov	r2, r1
   108c8:	mov	r3, #0
   108cc:	ldr	r1, [pc, #616]	; 10b3c <close@plt+0x5c8>
   108d0:	strd	r2, [sp]
   108d4:	mov	r2, r5
   108d8:	mov	r3, fp
   108dc:	ldr	r0, [r6]
   108e0:	bl	10538 <fprintf@plt>
   108e4:	b	10868 <close@plt+0x2f4>
   108e8:	cmn	r2, #1
   108ec:	beq	10960 <close@plt+0x3ec>
   108f0:	str	r0, [sp]
   108f4:	ldr	r1, [pc, #580]	; 10b40 <close@plt+0x5cc>
   108f8:	ldr	r0, [r6]
   108fc:	bl	10538 <fprintf@plt>
   10900:	mov	r3, fp
   10904:	mov	r2, sl
   10908:	ldr	r1, [pc, #564]	; 10b44 <close@plt+0x5d0>
   1090c:	ldr	r0, [r6]
   10910:	bl	10538 <fprintf@plt>
   10914:	mov	r0, r7
   10918:	bl	107a0 <close@plt+0x22c>
   1091c:	ldr	r1, [r6]
   10920:	mov	r0, #32
   10924:	bl	10550 <fputc@plt>
   10928:	mov	r0, r9
   1092c:	mov	r1, r8
   10930:	bl	107dc <close@plt+0x268>
   10934:	ldr	r3, [sp, #12]
   10938:	cmp	r3, #6
   1093c:	ldrls	pc, [pc, r3, lsl #2]
   10940:	b	10b24 <close@plt+0x5b0>
   10944:	ldrdeq	r0, [r1], -ip
   10948:	andeq	r0, r1, r4, lsr #22
   1094c:	andeq	r0, r1, ip, ror #21
   10950:			; <UNDEFINED> instruction: 0x00010ab0
   10954:	andeq	r0, r1, r0, ror r9
   10958:	andeq	r0, r1, r4, ror #19
   1095c:	andeq	r0, r1, ip, lsr sl
   10960:	ldr	r1, [r6]
   10964:	ldr	r0, [pc, #476]	; 10b48 <close@plt+0x5d4>
   10968:	bl	1055c <fputs@plt>
   1096c:	b	10900 <close@plt+0x38c>
   10970:	cmp	r5, #8
   10974:	movne	r2, r5
   10978:	ldrne	r1, [pc, #460]	; 10b4c <close@plt+0x5d8>
   1097c:	bne	10aa4 <close@plt+0x530>
   10980:	ldrb	r2, [r4, #33]	; 0x21
   10984:	ldrb	r3, [r4, #32]
   10988:	ldrb	r1, [r4, #37]	; 0x25
   1098c:	orr	r3, r3, r2, lsl #8
   10990:	ldrb	r2, [r4, #34]	; 0x22
   10994:	orr	r3, r3, r2, lsl #16
   10998:	ldrb	r2, [r4, #35]	; 0x23
   1099c:	orr	r3, r3, r2, lsl #24
   109a0:	ldrb	r2, [r4, #36]	; 0x24
   109a4:	rev	r3, r3
   109a8:	orr	r2, r2, r1, lsl #8
   109ac:	ldrb	r1, [r4, #38]	; 0x26
   109b0:	orr	r2, r2, r1, lsl #16
   109b4:	ldrb	r1, [r4, #39]	; 0x27
   109b8:	orr	r2, r2, r1, lsl #24
   109bc:	ldr	r1, [pc, #396]	; 10b50 <close@plt+0x5dc>
   109c0:	rev	r2, r2
   109c4:	ldr	r0, [r6]
   109c8:	bl	10538 <fprintf@plt>
   109cc:	ldr	r0, [r4, #12]
   109d0:	rev	r0, r0
   109d4:	add	r0, r0, #7
   109d8:	bic	r0, r0, #7
   109dc:	add	sp, sp, #20
   109e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109e4:	cmp	r5, #8
   109e8:	movne	r2, r5
   109ec:	ldrne	r1, [pc, #352]	; 10b54 <close@plt+0x5e0>
   109f0:	bne	10aa4 <close@plt+0x530>
   109f4:	ldrb	r2, [r4, #33]	; 0x21
   109f8:	ldrb	r3, [r4, #32]
   109fc:	ldrb	r1, [r4, #37]	; 0x25
   10a00:	orr	r3, r3, r2, lsl #8
   10a04:	ldrb	r2, [r4, #34]	; 0x22
   10a08:	orr	r3, r3, r2, lsl #16
   10a0c:	ldrb	r2, [r4, #35]	; 0x23
   10a10:	orr	r3, r3, r2, lsl #24
   10a14:	ldrb	r2, [r4, #36]	; 0x24
   10a18:	rev	r3, r3
   10a1c:	orr	r2, r2, r1, lsl #8
   10a20:	ldrb	r1, [r4, #38]	; 0x26
   10a24:	orr	r2, r2, r1, lsl #16
   10a28:	ldrb	r1, [r4, #39]	; 0x27
   10a2c:	orr	r2, r2, r1, lsl #24
   10a30:	rev	r2, r2
   10a34:	ldr	r1, [pc, #284]	; 10b58 <close@plt+0x5e4>
   10a38:	b	109c4 <close@plt+0x450>
   10a3c:	cmp	r5, #8
   10a40:	movne	r2, r5
   10a44:	ldrne	r1, [pc, #272]	; 10b5c <close@plt+0x5e8>
   10a48:	bne	10aa4 <close@plt+0x530>
   10a4c:	ldrb	r2, [r4, #33]	; 0x21
   10a50:	ldrb	r3, [r4, #32]
   10a54:	ldrb	r1, [r4, #36]	; 0x24
   10a58:	ldr	r0, [r6]
   10a5c:	orr	r3, r3, r2, lsl #8
   10a60:	ldrb	r2, [r4, #34]	; 0x22
   10a64:	orr	r3, r3, r2, lsl #16
   10a68:	ldrb	r2, [r4, #35]	; 0x23
   10a6c:	orr	r3, r3, r2, lsl #24
   10a70:	ldrb	r2, [r4, #37]	; 0x25
   10a74:	rev	r9, r3
   10a78:	mov	r3, r9
   10a7c:	orr	r1, r1, r2, lsl #8
   10a80:	ldrb	r2, [r4, #38]	; 0x26
   10a84:	orr	r1, r1, r2, lsl #16
   10a88:	ldrb	r2, [r4, #39]	; 0x27
   10a8c:	orr	r1, r1, r2, lsl #24
   10a90:	rev	r8, r1
   10a94:	mov	r2, r8
   10a98:	ldr	r1, [pc, #192]	; 10b60 <close@plt+0x5ec>
   10a9c:	bl	10538 <fprintf@plt>
   10aa0:	b	109cc <close@plt+0x458>
   10aa4:	ldr	r0, [r6]
   10aa8:	bl	10538 <fprintf@plt>
   10aac:	b	109cc <close@plt+0x458>
   10ab0:	mov	r1, r5
   10ab4:	add	r0, r4, #32
   10ab8:	bl	104d8 <strndup@plt>
   10abc:	ldr	r1, [pc, #160]	; 10b64 <close@plt+0x5f0>
   10ac0:	mov	r5, r0
   10ac4:	mov	r2, r0
   10ac8:	ldr	r0, [r6]
   10acc:	bl	10538 <fprintf@plt>
   10ad0:	mov	r0, r5
   10ad4:	bl	104cc <free@plt>
   10ad8:	b	109cc <close@plt+0x458>
   10adc:	ldr	r1, [r6]
   10ae0:	ldr	r0, [pc, #128]	; 10b68 <close@plt+0x5f4>
   10ae4:	bl	1055c <fputs@plt>
   10ae8:	b	109cc <close@plt+0x458>
   10aec:	ldr	r1, [r6]
   10af0:	mov	r0, #10
   10af4:	bl	10550 <fputc@plt>
   10af8:	mov	r6, #0
   10afc:	add	r7, r7, #1
   10b00:	cmp	r5, r6
   10b04:	bls	109cc <close@plt+0x458>
   10b08:	add	r0, r6, #32
   10b0c:	sub	r1, r5, r6
   10b10:	mov	r2, r7
   10b14:	add	r0, r4, r0
   10b18:	bl	10848 <close@plt+0x2d4>
   10b1c:	add	r6, r6, r0
   10b20:	b	10b00 <close@plt+0x58c>
   10b24:	ldr	r3, [pc, #64]	; 10b6c <close@plt+0x5f8>
   10b28:	ldr	r0, [pc, #64]	; 10b70 <close@plt+0x5fc>
   10b2c:	ldr	r1, [r3]
   10b30:	b	10ae4 <close@plt+0x570>
   10b34:	andeq	r1, r2, ip, asr r0
   10b38:	andeq	r0, r1, r7, lsl #24
   10b3c:	andeq	r0, r1, pc, lsr #24
   10b40:	andeq	r0, r1, r8, ror #24
   10b44:	andeq	r0, r1, r3, lsl #25
   10b48:	andeq	r0, r1, r7, ror ip
   10b4c:	muleq	r1, r4, ip
   10b50:	andeq	r0, r1, ip, lsl #25
   10b54:	andeq	r0, r1, r3, lsr #25
   10b58:	muleq	r1, fp, ip
   10b5c:			; <UNDEFINED> instruction: 0x00010cb0
   10b60:	andeq	r0, r1, sl, lsr #25
   10b64:			; <UNDEFINED> instruction: 0x00010cb7
   10b68:			; <UNDEFINED> instruction: 0x00010cbe
   10b6c:	andeq	r1, r2, r8, asr r0
   10b70:	andeq	r0, r1, r5, asr #25
   10b74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b78:	mov	r7, r0
   10b7c:	ldr	r6, [pc, #72]	; 10bcc <close@plt+0x658>
   10b80:	ldr	r5, [pc, #72]	; 10bd0 <close@plt+0x65c>
   10b84:	add	r6, pc, r6
   10b88:	add	r5, pc, r5
   10b8c:	sub	r6, r6, r5
   10b90:	mov	r8, r1
   10b94:	mov	r9, r2
   10b98:	bl	104ac <free@plt-0x20>
   10b9c:	asrs	r6, r6, #2
   10ba0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ba4:	mov	r4, #0
   10ba8:	add	r4, r4, #1
   10bac:	ldr	r3, [r5], #4
   10bb0:	mov	r2, r9
   10bb4:	mov	r1, r8
   10bb8:	mov	r0, r7
   10bbc:	blx	r3
   10bc0:	cmp	r6, r4
   10bc4:	bne	10ba8 <close@plt+0x634>
   10bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bcc:	andeq	r0, r1, r4, lsl #7
   10bd0:	andeq	r0, r1, ip, ror r3
   10bd4:	bx	lr
   10bd8:	mov	r2, r1
   10bdc:	mov	r1, r0
   10be0:	mov	r0, #3
   10be4:	b	104fc <__fxstat@plt>

Disassembly of section .fini:

00010be8 <.fini>:
   10be8:	push	{r3, lr}
   10bec:	pop	{r3, pc}
