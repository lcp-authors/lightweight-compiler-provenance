
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010cd8 <.init>:
   10cd8:	push	{r3, lr}
   10cdc:	bl	10fbc <__assert_fail@plt+0x48>
   10ce0:	pop	{r3, pc}

Disassembly of section .plt:

00010ce4 <fstatfs64@plt-0x14>:
   10ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce8:	ldr	lr, [pc, #4]	; 10cf4 <fstatfs64@plt-0x4>
   10cec:	add	lr, pc, lr
   10cf0:	ldr	pc, [lr, #8]!
   10cf4:	andeq	r8, r1, ip, lsl #6

00010cf8 <fstatfs64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #780]!	; 0x30c

00010d04 <calloc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #772]!	; 0x304

00010d10 <raise@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #764]!	; 0x2fc

00010d1c <strcmp@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #756]!	; 0x2f4

00010d28 <strtol@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #748]!	; 0x2ec

00010d34 <getpwuid@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d40 <printf@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #732]!	; 0x2dc

00010d4c <getuid@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #724]!	; 0x2d4

00010d58 <memmove@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #716]!	; 0x2cc

00010d64 <free@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d70 <memcpy@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #700]!	; 0x2bc

00010d7c <time@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #692]!	; 0x2b4

00010d88 <ctime@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #684]!	; 0x2ac

00010d94 <realloc@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #676]!	; 0x2a4

00010da0 <funlockfile@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #668]!	; 0x29c

00010dac <__fxstatat64@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #660]!	; 0x294

00010db8 <__fxstat64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #652]!	; 0x28c

00010dc4 <readlink@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #644]!	; 0x284

00010dd0 <fwrite@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #636]!	; 0x27c

00010ddc <ioctl@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #628]!	; 0x274

00010de8 <strcpy@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #620]!	; 0x26c

00010df4 <open64@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #612]!	; 0x264

00010e00 <getenv@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #604]!	; 0x25c

00010e0c <malloc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #596]!	; 0x254

00010e18 <__libc_start_main@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #588]!	; 0x24c

00010e24 <strerror@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #580]!	; 0x244

00010e30 <__gmon_start__@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #572]!	; 0x23c

00010e3c <__ctype_b_loc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #564]!	; 0x234

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #556]!	; 0x22c

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #548]!	; 0x224

00010e60 <openat64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #540]!	; 0x21c

00010e6c <fprintf@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #532]!	; 0x214

00010e78 <__errno_location@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #524]!	; 0x20c

00010e84 <snprintf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #516]!	; 0x204

00010e90 <memset@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #508]!	; 0x1fc

00010e9c <fcntl64@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #500]!	; 0x1f4

00010ea8 <strrchr@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #492]!	; 0x1ec

00010eb4 <fputc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ec0 <readdir64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #476]!	; 0x1dc

00010ecc <fdopendir@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ed8 <putc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ee4 <dirfd@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #452]!	; 0x1c4

00010ef0 <flockfile@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #444]!	; 0x1bc

00010efc <fchdir@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #436]!	; 0x1b4

00010f08 <qsort@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #428]!	; 0x1ac

00010f14 <__xstat64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f20 <isatty@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #412]!	; 0x19c

00010f2c <strncmp@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #404]!	; 0x194

00010f38 <abort@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #396]!	; 0x18c

00010f44 <close@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #388]!	; 0x184

00010f50 <__lxstat64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #380]!	; 0x17c

00010f5c <closedir@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #372]!	; 0x174

00010f68 <getgrgid@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #364]!	; 0x16c

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #356]!	; 0x164

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e18 <__libc_start_main@plt>
   10fac:	bl	10f38 <abort@plt>
   10fb0:	andeq	r8, r1, r4, asr #17
   10fb4:	andeq	r1, r1, r0, ror r0
   10fb8:	andeq	r8, r1, r4, ror #16
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e30 <__gmon_start__@plt>
   10fd8:	andeq	r8, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, r4, ror #1
   10fe0:	ldr	r0, [pc, #24]	; 11000 <__assert_fail@plt+0x8c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x90>
   10fe8:	cmp	r3, r0
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0x94>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	r9, r2, r0, lsl r1
   11004:	andeq	r9, r2, r0, lsl r1
   11008:	andeq	r0, r0, r0
   1100c:	ldr	r0, [pc, #36]	; 11038 <__assert_fail@plt+0xc4>
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	sub	r1, r1, r0
   11018:	asr	r1, r1, #2
   1101c:	add	r1, r1, r1, lsr #31
   11020:	asrs	r1, r1, #1
   11024:	bxeq	lr
   11028:	ldr	r3, [pc, #16]	; 11040 <__assert_fail@plt+0xcc>
   1102c:	cmp	r3, #0
   11030:	bxeq	lr
   11034:	bx	r3
   11038:	andeq	r9, r2, r0, lsl r1
   1103c:	andeq	r9, r2, r0, lsl r1
   11040:	andeq	r0, r0, r0
   11044:	push	{r4, lr}
   11048:	ldr	r4, [pc, #24]	; 11068 <__assert_fail@plt+0xf4>
   1104c:	ldrb	r3, [r4]
   11050:	cmp	r3, #0
   11054:	popne	{r4, pc}
   11058:	bl	10fe0 <__assert_fail@plt+0x6c>
   1105c:	mov	r3, #1
   11060:	strb	r3, [r4]
   11064:	pop	{r4, pc}
   11068:	andeq	r9, r2, r8, lsl r1
   1106c:	b	1100c <__assert_fail@plt+0x98>
   11070:	b	11074 <__assert_fail@plt+0x100>
   11074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11078:	add	fp, sp, #28
   1107c:	sub	sp, sp, #12
   11080:	mov	r4, r1
   11084:	movw	r1, #37152	; 0x9120
   11088:	mov	r5, r0
   1108c:	mov	r0, #0
   11090:	movw	r8, #37220	; 0x9164
   11094:	movw	sl, #37260	; 0x918c
   11098:	movw	r6, #37216	; 0x9160
   1109c:	movw	r9, #37304	; 0x91b8
   110a0:	mov	r7, #1
   110a4:	movt	r1, #2
   110a8:	movt	r8, #2
   110ac:	movt	sl, #2
   110b0:	movt	r6, #2
   110b4:	movt	r9, #2
   110b8:	strb	r0, [r1]
   110bc:	movw	r1, #37232	; 0x9170
   110c0:	str	r0, [r8]
   110c4:	str	r0, [sl]
   110c8:	str	r0, [r6]
   110cc:	str	r0, [r9]
   110d0:	movt	r1, #2
   110d4:	str	r0, [r1]
   110d8:	movw	r1, #37224	; 0x9168
   110dc:	movt	r1, #2
   110e0:	str	r0, [r1]
   110e4:	movw	r1, #37276	; 0x919c
   110e8:	movt	r1, #2
   110ec:	str	r0, [r1]
   110f0:	movw	r1, #37240	; 0x9178
   110f4:	movt	r1, #2
   110f8:	str	r0, [r1]
   110fc:	movw	r1, #37292	; 0x91ac
   11100:	movt	r1, #2
   11104:	str	r0, [r1]
   11108:	movw	r1, #37296	; 0x91b0
   1110c:	movt	r1, #2
   11110:	str	r0, [r1]
   11114:	movw	r1, #37280	; 0x91a0
   11118:	movt	r1, #2
   1111c:	str	r0, [r1]
   11120:	movw	r1, #37272	; 0x9198
   11124:	movt	r1, #2
   11128:	str	r0, [r1]
   1112c:	movw	r1, #37244	; 0x917c
   11130:	movt	r1, #2
   11134:	str	r0, [r1]
   11138:	movw	r1, #37300	; 0x91b4
   1113c:	movt	r1, #2
   11140:	str	r0, [r1]
   11144:	movw	r1, #37268	; 0x9194
   11148:	movt	r1, #2
   1114c:	str	r0, [r1]
   11150:	movw	r1, #37236	; 0x9174
   11154:	movt	r1, #2
   11158:	str	r0, [r1]
   1115c:	movw	r1, #37228	; 0x916c
   11160:	movt	r1, #2
   11164:	str	r0, [r1]
   11168:	movw	r1, #37212	; 0x915c
   1116c:	movt	r1, #2
   11170:	str	r0, [r1]
   11174:	movw	r1, #37284	; 0x91a4
   11178:	movt	r1, #2
   1117c:	str	r0, [r1]
   11180:	movw	r1, #37208	; 0x9158
   11184:	movt	r1, #2
   11188:	str	r0, [r1]
   1118c:	movw	r1, #37252	; 0x9184
   11190:	movt	r1, #2
   11194:	str	r0, [r1]
   11198:	movw	r1, #37264	; 0x9190
   1119c:	movt	r1, #2
   111a0:	str	r0, [r1]
   111a4:	movw	r1, #37248	; 0x9180
   111a8:	movt	r1, #2
   111ac:	str	r0, [r1]
   111b0:	mov	r0, #1
   111b4:	bl	10f20 <isatty@plt>
   111b8:	cmp	r0, #0
   111bc:	beq	1121c <__assert_fail@plt+0x2a8>
   111c0:	movw	r0, #35028	; 0x88d4
   111c4:	movt	r0, #1
   111c8:	bl	10e00 <getenv@plt>
   111cc:	cmp	r0, #0
   111d0:	beq	111f0 <__assert_fail@plt+0x27c>
   111d4:	mov	r1, #0
   111d8:	mov	r2, #10
   111dc:	bl	10d28 <strtol@plt>
   111e0:	movw	r1, #37104	; 0x90f0
   111e4:	movt	r1, #2
   111e8:	str	r0, [r1]
   111ec:	b	11208 <__assert_fail@plt+0x294>
   111f0:	add	r2, sp, #4
   111f4:	mov	r0, #1
   111f8:	movw	r1, #21523	; 0x5413
   111fc:	bl	18114 <__assert_fail@plt+0x71a0>
   11200:	cmp	r0, #0
   11204:	beq	11830 <__assert_fail@plt+0x8bc>
   11208:	movw	r1, #37300	; 0x91b4
   1120c:	mov	r6, r8
   11210:	mov	r0, #1
   11214:	movt	r1, #2
   11218:	str	r0, [r1]
   1121c:	str	r7, [r6]
   11220:	bl	10d4c <getuid@plt>
   11224:	cmp	r0, #0
   11228:	bne	1123c <__assert_fail@plt+0x2c8>
   1122c:	movw	r1, #37296	; 0x91b0
   11230:	mov	r0, #1
   11234:	movt	r1, #2
   11238:	str	r0, [r1]
   1123c:	movw	r1, #37124	; 0x9104
   11240:	movw	r7, #35036	; 0x88dc
   11244:	movw	r8, #37276	; 0x919c
   11248:	mov	r0, #1
   1124c:	mov	r6, #20
   11250:	movt	r1, #2
   11254:	movt	r7, #1
   11258:	movt	r8, #2
   1125c:	str	r0, [r1]
   11260:	b	11278 <__assert_fail@plt+0x304>
   11264:	orr	r6, r6, #32
   11268:	movw	r1, #37296	; 0x91b0
   1126c:	mov	r0, #1
   11270:	movt	r1, #2
   11274:	str	r0, [r1]
   11278:	mov	r0, r5
   1127c:	mov	r1, r4
   11280:	mov	r2, r7
   11284:	bl	16ca4 <__assert_fail@plt+0x5d30>
   11288:	add	r0, r0, #1
   1128c:	cmp	r0, #121	; 0x79
   11290:	bhi	117f8 <__assert_fail@plt+0x884>
   11294:	add	r1, pc, #0
   11298:	ldr	pc, [r1, r0, lsl #2]
   1129c:	andeq	r1, r1, r0, lsl r7
   112a0:	strdeq	r1, [r1], -r8
   112a4:	strdeq	r1, [r1], -r8
   112a8:	strdeq	r1, [r1], -r8
   112ac:	strdeq	r1, [r1], -r8
   112b0:	strdeq	r1, [r1], -r8
   112b4:	strdeq	r1, [r1], -r8
   112b8:	strdeq	r1, [r1], -r8
   112bc:	strdeq	r1, [r1], -r8
   112c0:	strdeq	r1, [r1], -r8
   112c4:	strdeq	r1, [r1], -r8
   112c8:	strdeq	r1, [r1], -r8
   112cc:	strdeq	r1, [r1], -r8
   112d0:	strdeq	r1, [r1], -r8
   112d4:	strdeq	r1, [r1], -r8
   112d8:	strdeq	r1, [r1], -r8
   112dc:	strdeq	r1, [r1], -r8
   112e0:	strdeq	r1, [r1], -r8
   112e4:	strdeq	r1, [r1], -r8
   112e8:	strdeq	r1, [r1], -r8
   112ec:	strdeq	r1, [r1], -r8
   112f0:	strdeq	r1, [r1], -r8
   112f4:	strdeq	r1, [r1], -r8
   112f8:	strdeq	r1, [r1], -r8
   112fc:	strdeq	r1, [r1], -r8
   11300:	strdeq	r1, [r1], -r8
   11304:	strdeq	r1, [r1], -r8
   11308:	strdeq	r1, [r1], -r8
   1130c:	strdeq	r1, [r1], -r8
   11310:	strdeq	r1, [r1], -r8
   11314:	strdeq	r1, [r1], -r8
   11318:	strdeq	r1, [r1], -r8
   1131c:	strdeq	r1, [r1], -r8
   11320:	strdeq	r1, [r1], -r8
   11324:	strdeq	r1, [r1], -r8
   11328:	strdeq	r1, [r1], -r8
   1132c:	strdeq	r1, [r1], -r8
   11330:	strdeq	r1, [r1], -r8
   11334:	strdeq	r1, [r1], -r8
   11338:	strdeq	r1, [r1], -r8
   1133c:	strdeq	r1, [r1], -r8
   11340:	strdeq	r1, [r1], -r8
   11344:	strdeq	r1, [r1], -r8
   11348:	strdeq	r1, [r1], -r8
   1134c:	strdeq	r1, [r1], -r8
   11350:	strdeq	r1, [r1], -r8
   11354:	strdeq	r1, [r1], -r8
   11358:	strdeq	r1, [r1], -r8
   1135c:	strdeq	r1, [r1], -r8
   11360:	strdeq	r1, [r1], -r8
   11364:	andeq	r1, r1, r4, lsl #9
   11368:	strdeq	r1, [r1], -r8
   1136c:	strdeq	r1, [r1], -r8
   11370:	strdeq	r1, [r1], -r8
   11374:	strdeq	r1, [r1], -r8
   11378:	strdeq	r1, [r1], -r8
   1137c:	strdeq	r1, [r1], -r8
   11380:	strdeq	r1, [r1], -r8
   11384:	strdeq	r1, [r1], -r8
   11388:	strdeq	r1, [r1], -r8
   1138c:	strdeq	r1, [r1], -r8
   11390:	strdeq	r1, [r1], -r8
   11394:	strdeq	r1, [r1], -r8
   11398:	strdeq	r1, [r1], -r8
   1139c:	strdeq	r1, [r1], -r8
   113a0:	strdeq	r1, [r1], -r8
   113a4:	andeq	r1, r1, r8, ror #4
   113a8:	strdeq	r1, [r1], -r8
   113ac:	andeq	r1, r1, r4, lsr #9
   113b0:	strdeq	r1, [r1], -r8
   113b4:	strdeq	r1, [r1], -r8
   113b8:	ldrdeq	r1, [r1], -r4
   113bc:	strdeq	r1, [r1], -r8
   113c0:	strdeq	r1, [r1], -r8
   113c4:	strdeq	r1, [r1], -r8
   113c8:	strdeq	r1, [r1], -r8
   113cc:	strdeq	r1, [r1], -r8
   113d0:	andeq	r1, r1, r8, ror #9
   113d4:	strdeq	r1, [r1], -r8
   113d8:	strdeq	r1, [r1], -r8
   113dc:	strdeq	r1, [r1], -r8
   113e0:	strdeq	r1, [r1], -r8
   113e4:	strdeq	r1, [r1], -r8
   113e8:	strdeq	r1, [r1], -r4
   113ec:	andeq	r1, r1, r8, lsl #10
   113f0:	andeq	r1, r1, ip, lsl r5
   113f4:	strdeq	r1, [r1], -r8
   113f8:	strdeq	r1, [r1], -r8
   113fc:	andeq	r1, r1, r0, lsr r5
   11400:	strdeq	r1, [r1], -r8
   11404:	strdeq	r1, [r1], -r8
   11408:	strdeq	r1, [r1], -r8
   1140c:	strdeq	r1, [r1], -r8
   11410:	strdeq	r1, [r1], -r8
   11414:	strdeq	r1, [r1], -r8
   11418:	strdeq	r1, [r1], -r8
   1141c:	strdeq	r1, [r1], -r8
   11420:	strdeq	r1, [r1], -r8
   11424:	andeq	r1, r1, r4, ror #4
   11428:	strdeq	r1, [r1], -r8
   1142c:	andeq	r1, r1, r4, asr #10
   11430:	andeq	r1, r1, r8, ror #10
   11434:	strdeq	r1, [r1], -r8
   11438:	andeq	r1, r1, ip, lsl #11
   1143c:	andeq	r1, r1, r8, ror r2
   11440:	strdeq	r1, [r1], -r8
   11444:	andeq	r1, r1, r0, lsr #11
   11448:	strdeq	r1, [r1], -r8
   1144c:			; <UNDEFINED> instruction: 0x000115b4
   11450:	andeq	r1, r1, r8, asr #11
   11454:	andeq	r1, r1, r4, ror #11
   11458:	andeq	r1, r1, r4, lsl r6
   1145c:	andeq	r1, r1, r4, asr #12
   11460:	andeq	r1, r1, r8, asr r6
   11464:	andeq	r1, r1, ip, ror #12
   11468:	andeq	r1, r1, r0, lsl #13
   1146c:	muleq	r1, r4, r6
   11470:	andeq	r1, r1, r8, lsr #13
   11474:			; <UNDEFINED> instruction: 0x000116bc
   11478:	strdeq	r1, [r1], -r8
   1147c:	strdeq	r1, [r1], -r8
   11480:	andeq	r1, r1, r0, ror #13
   11484:	movw	r1, #37216	; 0x9160
   11488:	mov	r0, #0
   1148c:	mov	r2, #1
   11490:	movt	r1, #2
   11494:	str	r0, [r9]
   11498:	str	r0, [sl]
   1149c:	str	r2, [r1]
   114a0:	b	1163c <__assert_fail@plt+0x6c8>
   114a4:	movw	r1, #37220	; 0x9164
   114a8:	mov	r2, #1
   114ac:	mov	r0, #0
   114b0:	movt	r1, #2
   114b4:	str	r0, [r9]
   114b8:	str	r0, [r8]
   114bc:	str	r0, [sl]
   114c0:	str	r2, [r1]
   114c4:	movw	r1, #37216	; 0x9160
   114c8:	movt	r1, #2
   114cc:	str	r0, [r1]
   114d0:	b	11278 <__assert_fail@plt+0x304>
   114d4:	movw	r1, #37248	; 0x9180
   114d8:	mov	r0, #1
   114dc:	movt	r1, #2
   114e0:	str	r0, [r1]
   114e4:	b	11278 <__assert_fail@plt+0x304>
   114e8:	orr	r0, r6, #2
   114ec:	bic	r6, r0, #16
   114f0:	b	11278 <__assert_fail@plt+0x304>
   114f4:	movw	r1, #37228	; 0x916c
   114f8:	mov	r0, #1
   114fc:	movt	r1, #2
   11500:	str	r0, [r1]
   11504:	b	11278 <__assert_fail@plt+0x304>
   11508:	movw	r0, #37148	; 0x911c
   1150c:	mov	r1, #1
   11510:	movt	r0, #2
   11514:	str	r1, [r0]
   11518:	b	11278 <__assert_fail@plt+0x304>
   1151c:	movw	r1, #37268	; 0x9194
   11520:	mov	r0, #1
   11524:	movt	r1, #2
   11528:	str	r0, [r1]
   1152c:	b	11278 <__assert_fail@plt+0x304>
   11530:	movw	r1, #37252	; 0x9184
   11534:	mov	r0, #1
   11538:	movt	r1, #2
   1153c:	str	r0, [r1]
   11540:	b	11278 <__assert_fail@plt+0x304>
   11544:	movw	r1, #37240	; 0x9178
   11548:	mov	r0, #0
   1154c:	movt	r1, #2
   11550:	str	r0, [r1]
   11554:	movw	r1, #37284	; 0x91a4
   11558:	mov	r0, #1
   1155c:	movt	r1, #2
   11560:	str	r0, [r1]
   11564:	b	11278 <__assert_fail@plt+0x304>
   11568:	movw	r1, #37228	; 0x916c
   1156c:	mov	r0, #0
   11570:	movt	r1, #2
   11574:	str	r0, [r1]
   11578:	movw	r1, #37280	; 0x91a0
   1157c:	mov	r0, #1
   11580:	movt	r1, #2
   11584:	str	r0, [r1]
   11588:	b	11278 <__assert_fail@plt+0x304>
   1158c:	movw	r1, #37244	; 0x917c
   11590:	mov	r0, #1
   11594:	movt	r1, #2
   11598:	str	r0, [r1]
   1159c:	b	11278 <__assert_fail@plt+0x304>
   115a0:	movw	r1, #37232	; 0x9170
   115a4:	mov	r0, #1
   115a8:	movt	r1, #2
   115ac:	str	r0, [r1]
   115b0:	b	11278 <__assert_fail@plt+0x304>
   115b4:	movw	r0, #37288	; 0x91a8
   115b8:	mov	r1, #1024	; 0x400
   115bc:	movt	r0, #2
   115c0:	str	r1, [r0]
   115c4:	b	11278 <__assert_fail@plt+0x304>
   115c8:	movw	r1, #37272	; 0x9198
   115cc:	mov	r0, #0
   115d0:	movt	r1, #2
   115d4:	str	r0, [r1]
   115d8:	mov	r1, #1
   115dc:	str	r1, [sl]
   115e0:	b	1162c <__assert_fail@plt+0x6b8>
   115e4:	movw	r0, #37216	; 0x9160
   115e8:	mov	r1, #0
   115ec:	movt	r0, #2
   115f0:	str	r1, [sl]
   115f4:	str	r1, [r8]
   115f8:	str	r1, [r0]
   115fc:	mov	r0, #1
   11600:	str	r0, [r9]
   11604:	movw	r0, #37220	; 0x9164
   11608:	movt	r0, #2
   1160c:	str	r1, [r0]
   11610:	b	11278 <__assert_fail@plt+0x304>
   11614:	movw	r1, #37272	; 0x9198
   11618:	mov	r0, #1
   1161c:	movt	r1, #2
   11620:	str	r0, [sl]
   11624:	str	r0, [r1]
   11628:	mov	r0, #0
   1162c:	movw	r1, #37216	; 0x9160
   11630:	str	r0, [r9]
   11634:	movt	r1, #2
   11638:	str	r0, [r1]
   1163c:	str	r0, [r8]
   11640:	b	11700 <__assert_fail@plt+0x78c>
   11644:	movw	r1, #37224	; 0x9168
   11648:	mov	r0, #1
   1164c:	movt	r1, #2
   11650:	str	r0, [r1]
   11654:	b	11278 <__assert_fail@plt+0x304>
   11658:	movw	r1, #37264	; 0x9190
   1165c:	mov	r0, #1
   11660:	movt	r1, #2
   11664:	str	r0, [r1]
   11668:	b	11278 <__assert_fail@plt+0x304>
   1166c:	movw	r1, #37300	; 0x91b4
   11670:	mov	r0, #1
   11674:	movt	r1, #2
   11678:	str	r0, [r1]
   1167c:	b	11278 <__assert_fail@plt+0x304>
   11680:	movw	r1, #37236	; 0x9174
   11684:	mov	r0, #1
   11688:	movt	r1, #2
   1168c:	str	r0, [r1]
   11690:	b	11278 <__assert_fail@plt+0x304>
   11694:	movw	r1, #37208	; 0x9158
   11698:	mov	r0, #1
   1169c:	movt	r1, #2
   116a0:	str	r0, [r1]
   116a4:	b	11278 <__assert_fail@plt+0x304>
   116a8:	movw	r0, #37148	; 0x911c
   116ac:	mov	r1, #2
   116b0:	movt	r0, #2
   116b4:	str	r1, [r0]
   116b8:	b	11278 <__assert_fail@plt+0x304>
   116bc:	movw	r1, #37284	; 0x91a4
   116c0:	mov	r0, #0
   116c4:	movt	r1, #2
   116c8:	str	r0, [r1]
   116cc:	movw	r1, #37240	; 0x9178
   116d0:	mov	r0, #1
   116d4:	movt	r1, #2
   116d8:	str	r0, [r1]
   116dc:	b	11278 <__assert_fail@plt+0x304>
   116e0:	mov	r1, #1
   116e4:	mov	r0, #0
   116e8:	str	r1, [r8]
   116ec:	movw	r1, #37216	; 0x9160
   116f0:	str	r0, [r9]
   116f4:	str	r0, [sl]
   116f8:	movt	r1, #2
   116fc:	str	r0, [r1]
   11700:	movw	r1, #37220	; 0x9164
   11704:	movt	r1, #2
   11708:	str	r0, [r1]
   1170c:	b	11278 <__assert_fail@plt+0x304>
   11710:	movw	r0, #37248	; 0x9180
   11714:	movw	r3, #37280	; 0x91a0
   11718:	ldr	r2, [sl]
   1171c:	movw	r7, #37232	; 0x9170
   11720:	movt	r0, #2
   11724:	movt	r3, #2
   11728:	movt	r7, #2
   1172c:	ldr	r0, [r0]
   11730:	ldr	r3, [r3]
   11734:	ldr	r7, [r7]
   11738:	orr	r1, r0, r2
   1173c:	orr	r1, r1, r3
   11740:	movw	r3, #37208	; 0x9158
   11744:	movt	r3, #2
   11748:	ldr	r3, [r3]
   1174c:	orr	r3, r3, r2
   11750:	orr	r7, r3, r7
   11754:	orr	r0, r7, r0
   11758:	movw	r7, #37264	; 0x9190
   1175c:	movt	r7, #2
   11760:	ldr	r7, [r7]
   11764:	orr	r7, r0, r7
   11768:	movw	r0, #37148	; 0x911c
   1176c:	movt	r0, #2
   11770:	ldr	r0, [r0]
   11774:	orrs	r7, r7, r0
   11778:	orreq	r6, r6, #8
   1177c:	cmp	r1, #0
   11780:	movw	r1, #37252	; 0x9184
   11784:	movt	r1, #2
   11788:	orreq	r6, r6, #1
   1178c:	ldr	r1, [r1]
   11790:	cmp	r1, #0
   11794:	movw	r1, #37124	; 0x9104
   11798:	orrne	r6, r6, #128	; 0x80
   1179c:	cmp	r3, #0
   117a0:	movt	r1, #2
   117a4:	movwne	r3, #37288	; 0x91a8
   117a8:	movne	r7, #2
   117ac:	movtne	r3, #2
   117b0:	ldr	r1, [r1]
   117b4:	strne	r7, [r3]
   117b8:	movw	r3, #37236	; 0x9174
   117bc:	movt	r3, #2
   117c0:	ldr	r3, [r3]
   117c4:	cmp	r3, #0
   117c8:	beq	11804 <__assert_fail@plt+0x890>
   117cc:	cmp	r0, #2
   117d0:	beq	11840 <__assert_fail@plt+0x8cc>
   117d4:	cmp	r0, #1
   117d8:	beq	11868 <__assert_fail@plt+0x8f4>
   117dc:	cmp	r0, #0
   117e0:	bne	11930 <__assert_fail@plt+0x9bc>
   117e4:	movw	r0, #37156	; 0x9124
   117e8:	movw	r3, #12496	; 0x30d0
   117ec:	movt	r0, #2
   117f0:	movt	r3, #1
   117f4:	b	1192c <__assert_fail@plt+0x9b8>
   117f8:	bl	13094 <__assert_fail@plt+0x2120>
   117fc:	sub	sp, fp, #28
   11800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11804:	cmp	r0, #2
   11808:	beq	1187c <__assert_fail@plt+0x908>
   1180c:	cmp	r0, #1
   11810:	beq	118a4 <__assert_fail@plt+0x930>
   11814:	cmp	r0, #0
   11818:	bne	11930 <__assert_fail@plt+0x9bc>
   1181c:	movw	r0, #37156	; 0x9124
   11820:	movw	r3, #12484	; 0x30c4
   11824:	movt	r0, #2
   11828:	movt	r3, #1
   1182c:	b	1192c <__assert_fail@plt+0x9b8>
   11830:	ldrh	r0, [sp, #6]
   11834:	cmp	r0, #0
   11838:	bne	111e0 <__assert_fail@plt+0x26c>
   1183c:	b	11208 <__assert_fail@plt+0x294>
   11840:	movw	r0, #37240	; 0x9178
   11844:	movt	r0, #2
   11848:	ldr	r0, [r0]
   1184c:	cmp	r0, #0
   11850:	beq	118b8 <__assert_fail@plt+0x944>
   11854:	movw	r0, #37156	; 0x9124
   11858:	movw	r3, #12824	; 0x3218
   1185c:	movt	r0, #2
   11860:	movt	r3, #1
   11864:	b	1192c <__assert_fail@plt+0x9b8>
   11868:	movw	r0, #37156	; 0x9124
   1186c:	movw	r3, #13216	; 0x33a0
   11870:	movt	r0, #2
   11874:	movt	r3, #1
   11878:	b	1192c <__assert_fail@plt+0x9b8>
   1187c:	movw	r0, #37240	; 0x9178
   11880:	movt	r0, #2
   11884:	ldr	r0, [r0]
   11888:	cmp	r0, #0
   1188c:	beq	118e0 <__assert_fail@plt+0x96c>
   11890:	movw	r0, #37156	; 0x9124
   11894:	movw	r3, #12720	; 0x31b0
   11898:	movt	r0, #2
   1189c:	movt	r3, #1
   118a0:	b	1192c <__assert_fail@plt+0x9b8>
   118a4:	movw	r0, #37156	; 0x9124
   118a8:	movw	r3, #13136	; 0x3350
   118ac:	movt	r0, #2
   118b0:	movt	r3, #1
   118b4:	b	1192c <__assert_fail@plt+0x9b8>
   118b8:	movw	r0, #37284	; 0x91a4
   118bc:	movt	r0, #2
   118c0:	ldr	r0, [r0]
   118c4:	cmp	r0, #0
   118c8:	beq	11908 <__assert_fail@plt+0x994>
   118cc:	movw	r0, #37156	; 0x9124
   118d0:	movw	r3, #13032	; 0x32e8
   118d4:	movt	r0, #2
   118d8:	movt	r3, #1
   118dc:	b	1192c <__assert_fail@plt+0x9b8>
   118e0:	movw	r0, #37284	; 0x91a4
   118e4:	movt	r0, #2
   118e8:	ldr	r0, [r0]
   118ec:	cmp	r0, #0
   118f0:	beq	1191c <__assert_fail@plt+0x9a8>
   118f4:	movw	r0, #37156	; 0x9124
   118f8:	movw	r3, #12928	; 0x3280
   118fc:	movt	r0, #2
   11900:	movt	r3, #1
   11904:	b	1192c <__assert_fail@plt+0x9b8>
   11908:	movw	r0, #37156	; 0x9124
   1190c:	movw	r3, #12616	; 0x3148
   11910:	movt	r0, #2
   11914:	movt	r3, #1
   11918:	b	1192c <__assert_fail@plt+0x9b8>
   1191c:	movw	r0, #37156	; 0x9124
   11920:	movw	r3, #12512	; 0x30e0
   11924:	movt	r0, #2
   11928:	movt	r3, #1
   1192c:	str	r3, [r0]
   11930:	movw	r3, #37216	; 0x9160
   11934:	sub	r0, r5, r1
   11938:	movt	r3, #2
   1193c:	ldr	r3, [r3]
   11940:	cmp	r3, #0
   11944:	beq	11954 <__assert_fail@plt+0x9e0>
   11948:	movw	r2, #8788	; 0x2254
   1194c:	movt	r2, #1
   11950:	b	1199c <__assert_fail@plt+0xa28>
   11954:	ldr	r3, [r8]
   11958:	cmp	r3, #0
   1195c:	beq	1196c <__assert_fail@plt+0x9f8>
   11960:	movw	r2, #11544	; 0x2d18
   11964:	movt	r2, #1
   11968:	b	1199c <__assert_fail@plt+0xa28>
   1196c:	cmp	r2, #0
   11970:	beq	11980 <__assert_fail@plt+0xa0c>
   11974:	movw	r2, #9244	; 0x241c
   11978:	movt	r2, #1
   1197c:	b	1199c <__assert_fail@plt+0xa28>
   11980:	ldr	r3, [r9]
   11984:	movw	r7, #10712	; 0x29d8
   11988:	movw	r2, #12024	; 0x2ef8
   1198c:	movt	r7, #1
   11990:	movt	r2, #1
   11994:	cmp	r3, #0
   11998:	moveq	r2, r7
   1199c:	movw	r3, #37160	; 0x9128
   119a0:	cmp	r0, #0
   119a4:	movt	r3, #2
   119a8:	str	r2, [r3]
   119ac:	beq	119b8 <__assert_fail@plt+0xa44>
   119b0:	add	r1, r4, r1, lsl #2
   119b4:	b	119c4 <__assert_fail@plt+0xa50>
   119b8:	movw	r1, #37112	; 0x90f8
   119bc:	mov	r0, #1
   119c0:	movt	r1, #2
   119c4:	mov	r2, r6
   119c8:	bl	119e0 <__assert_fail@plt+0xa6c>
   119cc:	movw	r0, #37256	; 0x9188
   119d0:	movt	r0, #2
   119d4:	ldr	r0, [r0]
   119d8:	sub	sp, fp, #28
   119dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119e4:	add	fp, sp, #28
   119e8:	sub	sp, sp, #4
   119ec:	mov	r8, r0
   119f0:	movw	r0, #37244	; 0x917c
   119f4:	mov	r7, r2
   119f8:	movw	r2, #7304	; 0x1c88
   119fc:	mov	r6, r1
   11a00:	movt	r0, #2
   11a04:	movt	r2, #1
   11a08:	ldr	r0, [r0]
   11a0c:	cmp	r0, #0
   11a10:	mov	r0, r1
   11a14:	mov	r1, r7
   11a18:	movne	r2, #0
   11a1c:	bl	1357c <__assert_fail@plt+0x2608>
   11a20:	cmp	r0, #0
   11a24:	beq	11c14 <__assert_fail@plt+0xca0>
   11a28:	mov	r1, #0
   11a2c:	mov	r5, r0
   11a30:	mov	r6, #0
   11a34:	bl	15598 <__assert_fail@plt+0x4624>
   11a38:	mov	r1, r0
   11a3c:	mov	r0, #0
   11a40:	bl	11d34 <__assert_fail@plt+0xdc0>
   11a44:	movw	r0, #37280	; 0x91a0
   11a48:	movt	r0, #2
   11a4c:	ldr	r0, [r0]
   11a50:	cmp	r0, #0
   11a54:	bne	11c0c <__assert_fail@plt+0xc98>
   11a58:	movw	r1, #37228	; 0x916c
   11a5c:	mov	r0, #4096	; 0x1000
   11a60:	movt	r1, #2
   11a64:	ldr	r1, [r1]
   11a68:	cmp	r1, #0
   11a6c:	andeq	r6, r0, r7, lsl #9
   11a70:	mov	r0, r5
   11a74:	bl	13ee4 <__assert_fail@plt+0x2f70>
   11a78:	cmp	r0, #0
   11a7c:	beq	11bfc <__assert_fail@plt+0xc88>
   11a80:	movw	r7, #37296	; 0x91b0
   11a84:	movw	r4, #37152	; 0x9120
   11a88:	mov	r9, r0
   11a8c:	movt	r7, #2
   11a90:	movt	r4, #2
   11a94:	b	11af8 <__assert_fail@plt+0xb84>
   11a98:	movw	r0, #37136	; 0x9110
   11a9c:	mov	sl, r4
   11aa0:	mov	r4, r7
   11aa4:	movt	r0, #2
   11aa8:	ldr	r7, [r0]
   11aac:	ldr	r0, [r9, #32]
   11ab0:	bl	10e24 <strerror@plt>
   11ab4:	movw	r1, #35241	; 0x89a9
   11ab8:	mov	r3, r0
   11abc:	mov	r0, r7
   11ac0:	add	r2, r9, #168	; 0xa8
   11ac4:	mov	r7, r4
   11ac8:	mov	r4, sl
   11acc:	movt	r1, #1
   11ad0:	bl	10e6c <fprintf@plt>
   11ad4:	movw	r1, #37256	; 0x9188
   11ad8:	mov	r0, #1
   11adc:	movt	r1, #2
   11ae0:	str	r0, [r1]
   11ae4:	mov	r0, r5
   11ae8:	bl	13ee4 <__assert_fail@plt+0x2f70>
   11aec:	mov	r9, r0
   11af0:	cmp	r0, #0
   11af4:	beq	11bfc <__assert_fail@plt+0xc88>
   11af8:	ldrh	r0, [r9, #56]	; 0x38
   11afc:	sub	r0, r0, #1
   11b00:	cmp	r0, #6
   11b04:	bhi	11ae4 <__assert_fail@plt+0xb70>
   11b08:	add	r1, pc, #0
   11b0c:	ldr	pc, [r1, r0, lsl #2]
   11b10:	andeq	r1, r1, ip, lsr #22
   11b14:	ldrdeq	r1, [r1], -ip
   11b18:	andeq	r1, r1, r4, ror #21
   11b1c:	muleq	r1, r8, sl
   11b20:	andeq	r1, r1, r4, ror #21
   11b24:	andeq	r1, r1, r4, ror #21
   11b28:	muleq	r1, r8, sl
   11b2c:	ldrb	r0, [r9, #168]	; 0xa8
   11b30:	cmp	r0, #46	; 0x2e
   11b34:	bne	11b50 <__assert_fail@plt+0xbdc>
   11b38:	ldr	r0, [r9, #48]	; 0x30
   11b3c:	cmp	r0, #0
   11b40:	beq	11b50 <__assert_fail@plt+0xbdc>
   11b44:	ldr	r0, [r7]
   11b48:	cmp	r0, #0
   11b4c:	beq	11ae4 <__assert_fail@plt+0xb70>
   11b50:	ldrb	r0, [r4]
   11b54:	cmp	r0, #1
   11b58:	bne	11b70 <__assert_fail@plt+0xbfc>
   11b5c:	ldr	r1, [r9, #28]
   11b60:	movw	r0, #35081	; 0x8909
   11b64:	movt	r0, #1
   11b68:	bl	10d40 <printf@plt>
   11b6c:	b	11b90 <__assert_fail@plt+0xc1c>
   11b70:	cmp	r8, #2
   11b74:	blt	11b90 <__assert_fail@plt+0xc1c>
   11b78:	ldr	r1, [r9, #28]
   11b7c:	movw	r0, #35082	; 0x890a
   11b80:	movt	r0, #1
   11b84:	bl	10d40 <printf@plt>
   11b88:	mov	r0, #1
   11b8c:	strb	r0, [r4]
   11b90:	mov	r0, r5
   11b94:	mov	r1, r6
   11b98:	bl	15598 <__assert_fail@plt+0x4624>
   11b9c:	mov	sl, r0
   11ba0:	mov	r0, r9
   11ba4:	mov	r1, sl
   11ba8:	bl	11d34 <__assert_fail@plt+0xdc0>
   11bac:	cmp	sl, #0
   11bb0:	beq	11ae4 <__assert_fail@plt+0xb70>
   11bb4:	movw	r0, #37228	; 0x916c
   11bb8:	movt	r0, #2
   11bbc:	ldr	r0, [r0]
   11bc0:	cmp	r0, #0
   11bc4:	bne	11ae4 <__assert_fail@plt+0xb70>
   11bc8:	mov	r0, r5
   11bcc:	mov	r1, r9
   11bd0:	mov	r2, #4
   11bd4:	bl	15568 <__assert_fail@plt+0x45f4>
   11bd8:	b	11ae4 <__assert_fail@plt+0xb70>
   11bdc:	movw	r0, #37136	; 0x9110
   11be0:	movw	r1, #35087	; 0x890f
   11be4:	add	r2, r9, #168	; 0xa8
   11be8:	movt	r0, #2
   11bec:	movt	r1, #1
   11bf0:	ldr	r0, [r0]
   11bf4:	bl	10e6c <fprintf@plt>
   11bf8:	b	11ae4 <__assert_fail@plt+0xb70>
   11bfc:	bl	10e78 <__errno_location@plt>
   11c00:	ldr	r0, [r0]
   11c04:	cmp	r0, #0
   11c08:	bne	11c4c <__assert_fail@plt+0xcd8>
   11c0c:	sub	sp, fp, #28
   11c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c14:	movw	r0, #37136	; 0x9110
   11c18:	ldr	r4, [r6]
   11c1c:	movt	r0, #2
   11c20:	ldr	r5, [r0]
   11c24:	bl	10e78 <__errno_location@plt>
   11c28:	ldr	r0, [r0]
   11c2c:	bl	10e24 <strerror@plt>
   11c30:	movw	r1, #35064	; 0x88f8
   11c34:	mov	r3, r0
   11c38:	mov	r0, r5
   11c3c:	mov	r2, r4
   11c40:	movt	r1, #1
   11c44:	bl	10e6c <fprintf@plt>
   11c48:	b	11c70 <__assert_fail@plt+0xcfc>
   11c4c:	movw	r1, #37136	; 0x9110
   11c50:	movt	r1, #2
   11c54:	ldr	r4, [r1]
   11c58:	bl	10e24 <strerror@plt>
   11c5c:	movw	r1, #35116	; 0x892c
   11c60:	mov	r2, r0
   11c64:	mov	r0, r4
   11c68:	movt	r1, #1
   11c6c:	bl	10e6c <fprintf@plt>
   11c70:	movw	r0, #37256	; 0x9188
   11c74:	mov	r1, #1
   11c78:	movt	r0, #2
   11c7c:	str	r1, [r0]
   11c80:	sub	sp, fp, #28
   11c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c88:	push	{fp, lr}
   11c8c:	mov	fp, sp
   11c90:	ldr	r0, [r0]
   11c94:	mov	r2, #0
   11c98:	ldrh	r3, [r0, #56]	; 0x38
   11c9c:	cmp	r3, #7
   11ca0:	beq	11cd8 <__assert_fail@plt+0xd64>
   11ca4:	ldr	r1, [r1]
   11ca8:	ldrh	ip, [r1, #56]	; 0x38
   11cac:	cmp	ip, #7
   11cb0:	beq	11cd8 <__assert_fail@plt+0xd64>
   11cb4:	cmp	r3, #10
   11cb8:	cmpne	ip, #10
   11cbc:	bne	11ce0 <__assert_fail@plt+0xd6c>
   11cc0:	cmp	ip, #10
   11cc4:	mov	r2, #1
   11cc8:	mvneq	r2, #0
   11ccc:	cmp	r3, #10
   11cd0:	cmpeq	ip, #10
   11cd4:	beq	11d14 <__assert_fail@plt+0xda0>
   11cd8:	mov	r0, r2
   11cdc:	pop	{fp, pc}
   11ce0:	cmp	r3, ip
   11ce4:	beq	11d00 <__assert_fail@plt+0xd8c>
   11ce8:	movw	r2, #37280	; 0x91a0
   11cec:	ldr	lr, [r0, #48]	; 0x30
   11cf0:	movt	r2, #2
   11cf4:	ldr	r2, [r2]
   11cf8:	orrs	r2, r2, lr
   11cfc:	beq	11d1c <__assert_fail@plt+0xda8>
   11d00:	movw	r2, #37156	; 0x9124
   11d04:	movt	r2, #2
   11d08:	ldr	r2, [r2]
   11d0c:	pop	{fp, lr}
   11d10:	bx	r2
   11d14:	pop	{fp, lr}
   11d18:	b	130c4 <__assert_fail@plt+0x2150>
   11d1c:	cmp	r3, #1
   11d20:	mov	r2, #1
   11d24:	mvnne	r2, #0
   11d28:	cmpne	ip, #1
   11d2c:	beq	11cd8 <__assert_fail@plt+0xd64>
   11d30:	b	11d00 <__assert_fail@plt+0xd8c>
   11d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d38:	add	fp, sp, #28
   11d3c:	sub	sp, sp, #180	; 0xb4
   11d40:	cmp	r1, #0
   11d44:	beq	12208 <__assert_fail@plt+0x1294>
   11d48:	mov	r5, r0
   11d4c:	movw	r0, #37232	; 0x9170
   11d50:	movw	r2, #37260	; 0x918c
   11d54:	mov	sl, #0
   11d58:	mov	lr, #1
   11d5c:	str	r1, [sp, #4]
   11d60:	mov	r4, r1
   11d64:	mov	r1, #0
   11d68:	mov	r6, #0
   11d6c:	mov	r9, #0
   11d70:	movt	r0, #2
   11d74:	movt	r2, #2
   11d78:	str	r5, [sp, #16]
   11d7c:	ldr	r0, [r0]
   11d80:	ldr	r2, [r2]
   11d84:	orr	r0, r2, r0
   11d88:	movw	r2, #37208	; 0x9158
   11d8c:	movt	r2, #2
   11d90:	ldr	r2, [r2]
   11d94:	orr	ip, r0, r2
   11d98:	mov	r0, #0
   11d9c:	mov	r2, #0
   11da0:	str	r0, [sp, #64]	; 0x40
   11da4:	mov	r0, #0
   11da8:	str	ip, [sp, #12]
   11dac:	str	r0, [sp, #44]	; 0x2c
   11db0:	mov	r0, #0
   11db4:	str	r0, [sp, #60]	; 0x3c
   11db8:	mov	r0, #0
   11dbc:	str	r0, [sp, #36]	; 0x24
   11dc0:	mov	r0, #0
   11dc4:	str	r0, [sp, #28]
   11dc8:	mov	r0, #0
   11dcc:	str	r0, [sp, #32]
   11dd0:	mov	r0, #0
   11dd4:	str	r0, [sp, #8]
   11dd8:	mov	r0, #0
   11ddc:	str	r0, [sp, #56]	; 0x38
   11de0:	b	11df4 <__assert_fail@plt+0xe80>
   11de4:	str	lr, [r4, #16]
   11de8:	ldr	r4, [r4, #8]
   11dec:	cmp	r4, #0
   11df0:	beq	1210c <__assert_fail@plt+0x1198>
   11df4:	ldrh	r0, [r4, #56]	; 0x38
   11df8:	cmp	r0, #10
   11dfc:	cmpne	r0, #7
   11e00:	beq	120a0 <__assert_fail@plt+0x112c>
   11e04:	cmp	r5, #0
   11e08:	beq	11e24 <__assert_fail@plt+0xeb0>
   11e0c:	ldrb	r0, [r4, #168]	; 0xa8
   11e10:	cmp	r0, #46	; 0x2e
   11e14:	bne	11e40 <__assert_fail@plt+0xecc>
   11e18:	movw	r0, #37296	; 0x91b0
   11e1c:	movt	r0, #2
   11e20:	b	11e34 <__assert_fail@plt+0xec0>
   11e24:	cmp	r0, #1
   11e28:	bne	11e40 <__assert_fail@plt+0xecc>
   11e2c:	movw	r0, #37280	; 0x91a0
   11e30:	movt	r0, #2
   11e34:	ldr	r0, [r0]
   11e38:	cmp	r0, #0
   11e3c:	beq	11de4 <__assert_fail@plt+0xe70>
   11e40:	ldr	r0, [r4, #52]	; 0x34
   11e44:	cmp	r0, r2
   11e48:	movhi	r2, r0
   11e4c:	cmp	ip, #0
   11e50:	beq	12098 <__assert_fail@plt+0x1124>
   11e54:	str	r2, [sp, #48]	; 0x30
   11e58:	str	r1, [sp, #52]	; 0x34
   11e5c:	add	r2, r4, #160	; 0xa0
   11e60:	add	r1, r4, #128	; 0x80
   11e64:	add	r0, r4, #112	; 0x70
   11e68:	ldrd	r2, [r2]
   11e6c:	subs	r7, r6, r2
   11e70:	ldr	r7, [sp, #56]	; 0x38
   11e74:	rscs	r3, r3, #0
   11e78:	movcc	r6, r2
   11e7c:	ldrd	r2, [r1]
   11e80:	subs	r1, r7, r2
   11e84:	rscs	r1, r3, r7, asr #31
   11e88:	movlt	r7, r2
   11e8c:	str	r7, [sp, #56]	; 0x38
   11e90:	ldr	r7, [sp, #64]	; 0x40
   11e94:	ldrd	r0, [r0]
   11e98:	subs	r3, sl, r0
   11e9c:	sbcs	r3, r7, r1
   11ea0:	mov	r3, #0
   11ea4:	movwlt	r3, #1
   11ea8:	cmp	r3, #0
   11eac:	movne	sl, r0
   11eb0:	ldr	r0, [sp, #60]	; 0x3c
   11eb4:	movne	r7, r1
   11eb8:	mov	r1, r7
   11ebc:	str	r7, [sp, #64]	; 0x40
   11ec0:	add	r0, r0, r2
   11ec4:	str	r0, [sp, #60]	; 0x3c
   11ec8:	ldr	r0, [r4, #84]	; 0x54
   11ecc:	cmp	r0, r9
   11ed0:	movhi	r9, r0
   11ed4:	movw	r0, #37260	; 0x918c
   11ed8:	movt	r0, #2
   11edc:	ldr	r0, [r0]
   11ee0:	cmp	r0, #0
   11ee4:	beq	12090 <__assert_fail@plt+0x111c>
   11ee8:	movw	r0, #37272	; 0x9198
   11eec:	str	r9, [sp, #24]
   11ef0:	mov	r9, #0
   11ef4:	str	r6, [sp, #40]	; 0x28
   11ef8:	movt	r0, #2
   11efc:	ldr	r0, [r0]
   11f00:	cmp	r0, #0
   11f04:	beq	11f3c <__assert_fail@plt+0xfc8>
   11f08:	ldr	r0, [r4, #88]	; 0x58
   11f0c:	mov	r1, #0
   11f10:	add	r2, sp, #90	; 0x5a
   11f14:	bl	180b8 <__assert_fail@plt+0x7144>
   11f18:	mov	r8, r0
   11f1c:	cmp	r9, #0
   11f20:	bne	11f74 <__assert_fail@plt+0x1000>
   11f24:	ldr	r0, [r4, #92]	; 0x5c
   11f28:	mov	r1, #0
   11f2c:	add	r2, sp, #69	; 0x45
   11f30:	bl	180b8 <__assert_fail@plt+0x7144>
   11f34:	mov	r9, r0
   11f38:	b	11f74 <__assert_fail@plt+0x1000>
   11f3c:	ldr	r0, [r4, #88]	; 0x58
   11f40:	bl	10d34 <getpwuid@plt>
   11f44:	cmp	r0, #0
   11f48:	mov	r8, #0
   11f4c:	mov	r9, #0
   11f50:	ldrne	r8, [r0]
   11f54:	ldr	r0, [r4, #92]	; 0x5c
   11f58:	bl	10f68 <getgrgid@plt>
   11f5c:	cmp	r0, #0
   11f60:	ldrne	r9, [r0]
   11f64:	cmp	r8, #0
   11f68:	beq	11f08 <__assert_fail@plt+0xf94>
   11f6c:	cmp	r9, #0
   11f70:	beq	11f24 <__assert_fail@plt+0xfb0>
   11f74:	mov	r0, r8
   11f78:	bl	10e48 <strlen@plt>
   11f7c:	mov	r5, r0
   11f80:	mov	r0, r9
   11f84:	bl	10e48 <strlen@plt>
   11f88:	movw	r1, #37224	; 0x9168
   11f8c:	movw	r2, #35361	; 0x8a21
   11f90:	ldr	r3, [sp, #44]	; 0x2c
   11f94:	add	r7, r0, r5
   11f98:	movt	r1, #2
   11f9c:	movt	r2, #1
   11fa0:	ldr	r1, [r1]
   11fa4:	cmp	r1, #0
   11fa8:	movne	r3, r2
   11fac:	mov	r2, #1
   11fb0:	str	r3, [sp, #44]	; 0x2c
   11fb4:	ldr	r3, [sp, #32]
   11fb8:	moveq	r2, r3
   11fbc:	cmp	r3, #1
   11fc0:	movle	r3, r2
   11fc4:	ldr	r2, [sp, #36]	; 0x24
   11fc8:	str	r3, [sp, #32]
   11fcc:	cmp	r5, r2
   11fd0:	movgt	r2, r5
   11fd4:	str	r2, [sp, #36]	; 0x24
   11fd8:	ldr	r2, [sp, #28]
   11fdc:	cmp	r0, r2
   11fe0:	movgt	r2, r0
   11fe4:	cmp	r1, #0
   11fe8:	movwne	r1, #1
   11fec:	str	r2, [sp, #28]
   11ff0:	add	r0, r7, r1
   11ff4:	add	r0, r0, #19
   11ff8:	bl	18280 <__assert_fail@plt+0x730c>
   11ffc:	cmp	r0, #0
   12000:	beq	12210 <__assert_fail@plt+0x129c>
   12004:	str	sl, [sp, #20]
   12008:	add	sl, r0, #12
   1200c:	mov	r6, r0
   12010:	mov	r1, r8
   12014:	str	sl, [r0]
   12018:	mov	r0, sl
   1201c:	bl	10de8 <strcpy@plt>
   12020:	add	r0, r5, sl
   12024:	mov	r1, r9
   12028:	add	r0, r0, #1
   1202c:	str	r0, [r6, #4]
   12030:	bl	10de8 <strcpy@plt>
   12034:	ldr	r0, [r4, #80]	; 0x50
   12038:	ldr	r9, [sp, #24]
   1203c:	and	r0, r0, #45056	; 0xb000
   12040:	orr	r0, r0, #16384	; 0x4000
   12044:	cmp	r0, #24576	; 0x6000
   12048:	moveq	r0, #1
   1204c:	streq	r0, [sp, #8]
   12050:	movw	r0, #37224	; 0x9168
   12054:	movt	r0, #2
   12058:	ldr	r0, [r0]
   1205c:	cmp	r0, #0
   12060:	beq	12078 <__assert_fail@plt+0x1104>
   12064:	ldr	r1, [sp, #44]	; 0x2c
   12068:	add	r0, r7, sl
   1206c:	add	r0, r0, #2
   12070:	str	r0, [r6, #8]
   12074:	bl	10de8 <strcpy@plt>
   12078:	str	r6, [r4, #20]
   1207c:	ldr	sl, [sp, #20]
   12080:	ldr	r5, [sp, #16]
   12084:	ldr	r6, [sp, #40]	; 0x28
   12088:	ldr	ip, [sp, #12]
   1208c:	mov	lr, #1
   12090:	ldr	r1, [sp, #52]	; 0x34
   12094:	ldr	r2, [sp, #48]	; 0x30
   12098:	add	r1, r1, #1
   1209c:	b	11de8 <__assert_fail@plt+0xe74>
   120a0:	movw	r0, #37136	; 0x9110
   120a4:	str	r6, [sp, #40]	; 0x28
   120a8:	mov	r5, sl
   120ac:	mov	r6, r1
   120b0:	mov	sl, r2
   120b4:	movt	r0, #2
   120b8:	ldr	r7, [r0]
   120bc:	ldr	r0, [r4, #32]
   120c0:	bl	10e24 <strerror@plt>
   120c4:	movw	r1, #35241	; 0x89a9
   120c8:	mov	r3, r0
   120cc:	add	r2, r4, #168	; 0xa8
   120d0:	mov	r0, r7
   120d4:	movt	r1, #1
   120d8:	bl	10e6c <fprintf@plt>
   120dc:	mov	r2, sl
   120e0:	mov	sl, r5
   120e4:	mov	r1, r6
   120e8:	ldr	ip, [sp, #12]
   120ec:	ldr	r6, [sp, #40]	; 0x28
   120f0:	ldr	r5, [sp, #16]
   120f4:	movw	r0, #37256	; 0x9188
   120f8:	mov	lr, #1
   120fc:	movt	r0, #2
   12100:	str	lr, [r4, #16]
   12104:	str	lr, [r0]
   12108:	b	11de8 <__assert_fail@plt+0xe74>
   1210c:	ldr	r4, [sp, #4]
   12110:	cmp	r1, #0
   12114:	beq	12208 <__assert_fail@plt+0x1294>
   12118:	cmp	ip, #0
   1211c:	str	r2, [fp, #-60]	; 0xffffffc4
   12120:	str	r1, [fp, #-64]	; 0xffffffc0
   12124:	str	r4, [fp, #-76]	; 0xffffffb4
   12128:	beq	121bc <__assert_fail@plt+0x1248>
   1212c:	ldr	r0, [sp, #60]	; 0x3c
   12130:	sub	r4, fp, #97	; 0x61
   12134:	mov	r2, r4
   12138:	str	r0, [fp, #-72]	; 0xffffffb8
   1213c:	ldr	r0, [sp, #8]
   12140:	str	r0, [fp, #-68]	; 0xffffffbc
   12144:	ldr	r0, [sp, #56]	; 0x38
   12148:	asr	r1, r0, #31
   1214c:	bl	180b8 <__assert_fail@plt+0x7144>
   12150:	bl	10e48 <strlen@plt>
   12154:	ldr	r1, [sp, #28]
   12158:	mov	r2, r4
   1215c:	str	r1, [fp, #-48]	; 0xffffffd0
   12160:	ldr	r1, [sp, #32]
   12164:	str	r1, [fp, #-52]	; 0xffffffcc
   12168:	str	r0, [fp, #-56]	; 0xffffffc8
   1216c:	mov	r0, r6
   12170:	mov	r1, #0
   12174:	bl	180b8 <__assert_fail@plt+0x7144>
   12178:	bl	10e48 <strlen@plt>
   1217c:	str	r0, [fp, #-44]	; 0xffffffd4
   12180:	mov	r0, r9
   12184:	mov	r1, #0
   12188:	mov	r2, r4
   1218c:	bl	180b8 <__assert_fail@plt+0x7144>
   12190:	bl	10e48 <strlen@plt>
   12194:	ldr	r1, [sp, #64]	; 0x40
   12198:	mov	r2, r4
   1219c:	ldr	r4, [sp, #4]
   121a0:	str	r0, [fp, #-40]	; 0xffffffd8
   121a4:	mov	r0, sl
   121a8:	bl	180b8 <__assert_fail@plt+0x7144>
   121ac:	bl	10e48 <strlen@plt>
   121b0:	ldr	r1, [sp, #36]	; 0x24
   121b4:	str	r1, [fp, #-32]	; 0xffffffe0
   121b8:	str	r0, [fp, #-36]	; 0xffffffdc
   121bc:	movw	r0, #37160	; 0x9128
   121c0:	movt	r0, #2
   121c4:	ldr	r1, [r0]
   121c8:	sub	r0, fp, #76	; 0x4c
   121cc:	blx	r1
   121d0:	movw	r0, #37152	; 0x9120
   121d4:	mov	r1, #1
   121d8:	movt	r0, #2
   121dc:	strb	r1, [r0]
   121e0:	movw	r0, #37260	; 0x918c
   121e4:	movt	r0, #2
   121e8:	ldr	r0, [r0]
   121ec:	cmp	r0, #0
   121f0:	beq	12208 <__assert_fail@plt+0x1294>
   121f4:	ldr	r0, [r4, #20]
   121f8:	bl	13554 <__assert_fail@plt+0x25e0>
   121fc:	ldr	r4, [r4, #8]
   12200:	cmp	r4, #0
   12204:	bne	121f4 <__assert_fail@plt+0x1280>
   12208:	sub	sp, fp, #28
   1220c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12210:	movw	r0, #37136	; 0x9110
   12214:	movt	r0, #2
   12218:	ldr	r4, [r0]
   1221c:	bl	10e78 <__errno_location@plt>
   12220:	ldr	r0, [r0]
   12224:	bl	10e24 <strerror@plt>
   12228:	movw	r1, #35129	; 0x8939
   1222c:	mov	r2, r0
   12230:	mov	r0, r4
   12234:	movt	r1, #1
   12238:	bl	10e6c <fprintf@plt>
   1223c:	movw	r1, #37256	; 0x9188
   12240:	mov	r0, #1
   12244:	movt	r1, #2
   12248:	str	r0, [r1]
   1224c:	sub	sp, fp, #28
   12250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12254:	push	{r4, r5, r6, sl, fp, lr}
   12258:	add	fp, sp, #16
   1225c:	ldr	r5, [r0]
   12260:	cmp	r5, #0
   12264:	beq	122b0 <__assert_fail@plt+0x133c>
   12268:	movw	r6, #37140	; 0x9114
   1226c:	mov	r4, r0
   12270:	movt	r6, #2
   12274:	b	12284 <__assert_fail@plt+0x1310>
   12278:	ldr	r5, [r5, #8]
   1227c:	cmp	r5, #0
   12280:	beq	122b0 <__assert_fail@plt+0x133c>
   12284:	ldr	r0, [r5, #16]
   12288:	cmp	r0, #1
   1228c:	beq	12278 <__assert_fail@plt+0x1304>
   12290:	ldr	r2, [r4, #20]
   12294:	ldr	r1, [r4, #32]
   12298:	mov	r0, r5
   1229c:	bl	122b4 <__assert_fail@plt+0x1340>
   122a0:	ldr	r1, [r6]
   122a4:	mov	r0, #10
   122a8:	bl	10ed8 <putc@plt>
   122ac:	b	12278 <__assert_fail@plt+0x1304>
   122b0:	pop	{r4, r5, r6, sl, fp, pc}
   122b4:	push	{r4, r5, r6, sl, fp, lr}
   122b8:	add	fp, sp, #16
   122bc:	mov	r5, r0
   122c0:	movw	r0, #37232	; 0x9170
   122c4:	mov	r6, r2
   122c8:	movt	r0, #2
   122cc:	ldr	r0, [r0]
   122d0:	cmp	r0, #0
   122d4:	beq	122f4 <__assert_fail@plt+0x1380>
   122d8:	add	r0, r5, #160	; 0xa0
   122dc:	ldr	r2, [r0]
   122e0:	movw	r0, #35151	; 0x894f
   122e4:	movt	r0, #1
   122e8:	bl	10d40 <printf@plt>
   122ec:	mov	r4, r0
   122f0:	b	122f8 <__assert_fail@plt+0x1384>
   122f4:	mov	r4, #0
   122f8:	movw	r0, #37208	; 0x9158
   122fc:	movt	r0, #2
   12300:	ldr	r0, [r0]
   12304:	cmp	r0, #0
   12308:	beq	12350 <__assert_fail@plt+0x13dc>
   1230c:	movw	r2, #37288	; 0x91a8
   12310:	add	r0, r5, #128	; 0x80
   12314:	movt	r2, #2
   12318:	ldrd	r0, [r0]
   1231c:	ldr	r2, [r2]
   12320:	sub	r3, r2, #1
   12324:	adds	r0, r0, r3
   12328:	adc	r1, r1, r3, asr #31
   1232c:	asr	r3, r2, #31
   12330:	bl	1861c <__assert_fail@plt+0x76a8>
   12334:	mov	r2, r0
   12338:	movw	r0, #35196	; 0x897c
   1233c:	mov	r3, r1
   12340:	mov	r1, r6
   12344:	movt	r0, #1
   12348:	bl	10d40 <printf@plt>
   1234c:	add	r4, r0, r4
   12350:	add	r0, r5, #168	; 0xa8
   12354:	bl	1300c <__assert_fail@plt+0x2098>
   12358:	add	r4, r0, r4
   1235c:	movw	r0, #37248	; 0x9180
   12360:	movt	r0, #2
   12364:	ldr	r0, [r0]
   12368:	cmp	r0, #0
   1236c:	beq	12398 <__assert_fail@plt+0x1424>
   12370:	ldr	r1, [r5, #80]	; 0x50
   12374:	and	r2, r1, #61440	; 0xf000
   12378:	cmp	r2, #40960	; 0xa000
   1237c:	bge	123c4 <__assert_fail@plt+0x1450>
   12380:	cmp	r2, #4096	; 0x1000
   12384:	beq	123d8 <__assert_fail@plt+0x1464>
   12388:	mov	r0, #47	; 0x2f
   1238c:	cmp	r2, #16384	; 0x4000
   12390:	beq	123f4 <__assert_fail@plt+0x1480>
   12394:	b	123e8 <__assert_fail@plt+0x1474>
   12398:	movw	r0, #37264	; 0x9190
   1239c:	movt	r0, #2
   123a0:	ldr	r0, [r0]
   123a4:	cmp	r0, #0
   123a8:	beq	123bc <__assert_fail@plt+0x1448>
   123ac:	ldr	r1, [r5, #80]	; 0x50
   123b0:	and	r0, r1, #61440	; 0xf000
   123b4:	cmp	r0, #16384	; 0x4000
   123b8:	beq	12374 <__assert_fail@plt+0x1400>
   123bc:	mov	r0, r4
   123c0:	pop	{r4, r5, r6, sl, fp, pc}
   123c4:	beq	123e0 <__assert_fail@plt+0x146c>
   123c8:	cmp	r2, #49152	; 0xc000
   123cc:	bne	123e8 <__assert_fail@plt+0x1474>
   123d0:	mov	r0, #61	; 0x3d
   123d4:	b	123f4 <__assert_fail@plt+0x1480>
   123d8:	mov	r0, #124	; 0x7c
   123dc:	b	123f4 <__assert_fail@plt+0x1480>
   123e0:	mov	r0, #64	; 0x40
   123e4:	b	123f4 <__assert_fail@plt+0x1480>
   123e8:	mov	r0, #42	; 0x2a
   123ec:	tst	r1, #73	; 0x49
   123f0:	beq	12414 <__assert_fail@plt+0x14a0>
   123f4:	movw	r1, #37140	; 0x9114
   123f8:	movt	r1, #2
   123fc:	ldr	r1, [r1]
   12400:	bl	10ed8 <putc@plt>
   12404:	mov	r0, #1
   12408:	add	r4, r0, r4
   1240c:	mov	r0, r4
   12410:	pop	{r4, r5, r6, sl, fp, pc}
   12414:	mov	r0, #0
   12418:	b	12408 <__assert_fail@plt+0x1494>
   1241c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12420:	add	fp, sp, #28
   12424:	sub	sp, sp, #44	; 0x2c
   12428:	sub	sp, sp, #8192	; 0x2000
   1242c:	ldr	sl, [r0]
   12430:	mov	r7, r0
   12434:	movw	r5, #37208	; 0x9158
   12438:	movt	r5, #2
   1243c:	ldr	r0, [sl, #48]	; 0x30
   12440:	cmp	r0, #0
   12444:	beq	1248c <__assert_fail@plt+0x1518>
   12448:	movw	r0, #37260	; 0x918c
   1244c:	ldr	r1, [r5]
   12450:	movt	r0, #2
   12454:	ldr	r0, [r0]
   12458:	orrs	r0, r1, r0
   1245c:	beq	1248c <__assert_fail@plt+0x1518>
   12460:	movw	r0, #37288	; 0x91a8
   12464:	ldr	r1, [r7, #4]
   12468:	movt	r0, #2
   1246c:	ldr	r0, [r0]
   12470:	add	r1, r1, r0
   12474:	sub	r1, r1, #1
   12478:	udiv	r1, r1, r0
   1247c:	movw	r0, #35140	; 0x8944
   12480:	movt	r0, #1
   12484:	bl	10d40 <printf@plt>
   12488:	ldr	sl, [r7]
   1248c:	cmp	sl, #0
   12490:	beq	12834 <__assert_fail@plt+0x18c0>
   12494:	sub	lr, fp, #4096	; 0x1000
   12498:	sub	r6, lr, #32
   1249c:	b	124fc <__assert_fail@plt+0x1588>
   124a0:	movw	r0, #37136	; 0x9110
   124a4:	movt	r0, #2
   124a8:	ldr	r7, [r0]
   124ac:	bl	10e78 <__errno_location@plt>
   124b0:	ldr	r0, [r0]
   124b4:	bl	10e24 <strerror@plt>
   124b8:	movw	r1, #35236	; 0x89a4
   124bc:	mov	r3, r0
   124c0:	mov	r0, r7
   124c4:	mov	r2, r6
   124c8:	mov	r7, r5
   124cc:	movt	r1, #1
   124d0:	bl	10e6c <fprintf@plt>
   124d4:	movw	r0, #37140	; 0x9114
   124d8:	movt	r0, #2
   124dc:	ldr	r1, [r0]
   124e0:	mov	r0, #10
   124e4:	bl	10ed8 <putc@plt>
   124e8:	movw	r5, #37208	; 0x9158
   124ec:	movt	r5, #2
   124f0:	ldr	sl, [sl, #8]
   124f4:	cmp	sl, #0
   124f8:	beq	12834 <__assert_fail@plt+0x18c0>
   124fc:	ldr	r0, [sl, #16]
   12500:	cmp	r0, #1
   12504:	beq	124f0 <__assert_fail@plt+0x157c>
   12508:	movw	r0, #37232	; 0x9170
   1250c:	movt	r0, #2
   12510:	ldr	r0, [r0]
   12514:	cmp	r0, #0
   12518:	beq	12534 <__assert_fail@plt+0x15c0>
   1251c:	add	r0, sl, #160	; 0xa0
   12520:	ldr	r1, [r7, #32]
   12524:	ldr	r2, [r0]
   12528:	movw	r0, #35151	; 0x894f
   1252c:	movt	r0, #1
   12530:	bl	10d40 <printf@plt>
   12534:	ldr	r0, [r5]
   12538:	mov	r8, r6
   1253c:	cmp	r0, #0
   12540:	beq	12584 <__assert_fail@plt+0x1610>
   12544:	movw	r2, #37288	; 0x91a8
   12548:	add	r0, sl, #128	; 0x80
   1254c:	movt	r2, #2
   12550:	ldrd	r0, [r0]
   12554:	ldr	r2, [r2]
   12558:	sub	r3, r2, #1
   1255c:	adds	r0, r0, r3
   12560:	adc	r1, r1, r3, asr #31
   12564:	asr	r3, r2, #31
   12568:	bl	1861c <__assert_fail@plt+0x76a8>
   1256c:	mov	r3, r1
   12570:	ldr	r1, [r7, #20]
   12574:	mov	r2, r0
   12578:	movw	r0, #35196	; 0x897c
   1257c:	movt	r0, #1
   12580:	bl	10d40 <printf@plt>
   12584:	ldr	r0, [sl, #80]	; 0x50
   12588:	add	r4, sp, #20
   1258c:	mov	r1, r4
   12590:	bl	133f0 <__assert_fail@plt+0x247c>
   12594:	ldr	r0, [r7, #28]
   12598:	ldr	r2, [r7, #36]	; 0x24
   1259c:	ldr	r1, [r7, #44]	; 0x2c
   125a0:	mov	r9, r7
   125a4:	ldr	r7, [sl, #20]
   125a8:	ldr	r3, [sl, #84]	; 0x54
   125ac:	ldr	r5, [r7, #4]
   125b0:	ldr	r6, [r7]
   125b4:	stm	sp, {r1, r6}
   125b8:	str	r0, [sp, #8]
   125bc:	movw	r0, #35157	; 0x8955
   125c0:	mov	r1, r4
   125c4:	movt	r0, #1
   125c8:	str	r5, [sp, #12]
   125cc:	bl	10d40 <printf@plt>
   125d0:	movw	r0, #37224	; 0x9168
   125d4:	movt	r0, #2
   125d8:	ldr	r0, [r0]
   125dc:	cmp	r0, #0
   125e0:	beq	125f8 <__assert_fail@plt+0x1684>
   125e4:	ldr	r2, [r7, #8]
   125e8:	ldr	r1, [r9, #24]
   125ec:	movw	r0, #35177	; 0x8969
   125f0:	movt	r0, #1
   125f4:	bl	10d40 <printf@plt>
   125f8:	ldr	r0, [sl, #80]	; 0x50
   125fc:	mov	r5, r9
   12600:	mov	r6, r8
   12604:	add	r4, sp, #40	; 0x28
   12608:	and	r0, r0, #45056	; 0xb000
   1260c:	orr	r0, r0, #16384	; 0x4000
   12610:	cmp	r0, #24576	; 0x6000
   12614:	bne	1263c <__assert_fail@plt+0x16c8>
   12618:	add	r0, sl, #96	; 0x60
   1261c:	ldr	r0, [r0]
   12620:	ubfx	r1, r0, #8, #8
   12624:	uxtb	r2, r0
   12628:	movw	r0, #35183	; 0x896f
   1262c:	movt	r0, #1
   12630:	bl	10d40 <printf@plt>
   12634:	mov	r7, r5
   12638:	b	1268c <__assert_fail@plt+0x1718>
   1263c:	ldr	r1, [r5, #8]
   12640:	ldr	r3, [r5, #40]	; 0x28
   12644:	add	r0, sl, #112	; 0x70
   12648:	mov	r7, r5
   1264c:	cmp	r1, #0
   12650:	beq	12674 <__assert_fail@plt+0x1700>
   12654:	ldrd	r0, [r0]
   12658:	movw	r2, #35217	; 0x8991
   1265c:	movt	r2, #1
   12660:	stm	sp, {r0, r1}
   12664:	movw	r0, #35193	; 0x8979
   12668:	rsb	r1, r3, #8
   1266c:	movt	r0, #1
   12670:	b	12688 <__assert_fail@plt+0x1714>
   12674:	ldm	r0, {r2, r9}
   12678:	movw	r0, #35196	; 0x897c
   1267c:	mov	r1, r3
   12680:	mov	r3, r9
   12684:	movt	r0, #1
   12688:	bl	10d40 <printf@plt>
   1268c:	movw	r0, #37240	; 0x9178
   12690:	movt	r0, #2
   12694:	ldr	r0, [r0]
   12698:	cmp	r0, #0
   1269c:	beq	126a8 <__assert_fail@plt+0x1734>
   126a0:	add	r0, sl, #136	; 0x88
   126a4:	b	126c0 <__assert_fail@plt+0x174c>
   126a8:	movw	r0, #37284	; 0x91a4
   126ac:	movt	r0, #2
   126b0:	ldr	r0, [r0]
   126b4:	cmp	r0, #0
   126b8:	addeq	r0, sl, #144	; 0x90
   126bc:	addne	r0, sl, #152	; 0x98
   126c0:	ldr	r0, [r0]
   126c4:	bl	1283c <__assert_fail@plt+0x18c8>
   126c8:	add	r8, sl, #168	; 0xa8
   126cc:	mov	r0, r8
   126d0:	bl	1300c <__assert_fail@plt+0x2098>
   126d4:	movw	r0, #37248	; 0x9180
   126d8:	movt	r0, #2
   126dc:	ldr	r0, [r0]
   126e0:	cmp	r0, #0
   126e4:	beq	1271c <__assert_fail@plt+0x17a8>
   126e8:	ldr	r0, [sl, #80]	; 0x50
   126ec:	and	r1, r0, #61440	; 0xf000
   126f0:	cmp	r1, #40960	; 0xa000
   126f4:	bge	12744 <__assert_fail@plt+0x17d0>
   126f8:	cmp	r1, #4096	; 0x1000
   126fc:	beq	12764 <__assert_fail@plt+0x17f0>
   12700:	cmp	r1, #16384	; 0x4000
   12704:	bne	1278c <__assert_fail@plt+0x1818>
   12708:	movw	r0, #37140	; 0x9114
   1270c:	movt	r0, #2
   12710:	ldr	r1, [r0]
   12714:	mov	r0, #47	; 0x2f
   12718:	b	127a4 <__assert_fail@plt+0x1830>
   1271c:	movw	r0, #37264	; 0x9190
   12720:	movt	r0, #2
   12724:	ldr	r0, [r0]
   12728:	cmp	r0, #0
   1272c:	beq	127a8 <__assert_fail@plt+0x1834>
   12730:	ldr	r0, [sl, #80]	; 0x50
   12734:	and	r1, r0, #61440	; 0xf000
   12738:	cmp	r1, #16384	; 0x4000
   1273c:	beq	126ec <__assert_fail@plt+0x1778>
   12740:	b	127a8 <__assert_fail@plt+0x1834>
   12744:	beq	12778 <__assert_fail@plt+0x1804>
   12748:	cmp	r1, #49152	; 0xc000
   1274c:	bne	1278c <__assert_fail@plt+0x1818>
   12750:	movw	r0, #37140	; 0x9114
   12754:	movt	r0, #2
   12758:	ldr	r1, [r0]
   1275c:	mov	r0, #61	; 0x3d
   12760:	b	127a4 <__assert_fail@plt+0x1830>
   12764:	movw	r0, #37140	; 0x9114
   12768:	movt	r0, #2
   1276c:	ldr	r1, [r0]
   12770:	mov	r0, #124	; 0x7c
   12774:	b	127a4 <__assert_fail@plt+0x1830>
   12778:	movw	r0, #37140	; 0x9114
   1277c:	movt	r0, #2
   12780:	ldr	r1, [r0]
   12784:	mov	r0, #64	; 0x40
   12788:	b	127a4 <__assert_fail@plt+0x1830>
   1278c:	tst	r0, #73	; 0x49
   12790:	beq	127a8 <__assert_fail@plt+0x1834>
   12794:	movw	r0, #37140	; 0x9114
   12798:	movt	r0, #2
   1279c:	ldr	r1, [r0]
   127a0:	mov	r0, #42	; 0x2a
   127a4:	bl	10ed8 <putc@plt>
   127a8:	ldr	r0, [sl, #80]	; 0x50
   127ac:	and	r0, r0, #61440	; 0xf000
   127b0:	cmp	r0, #40960	; 0xa000
   127b4:	bne	124d4 <__assert_fail@plt+0x1560>
   127b8:	ldr	r0, [sl, #48]	; 0x30
   127bc:	cmp	r0, #0
   127c0:	beq	127e4 <__assert_fail@plt+0x1870>
   127c4:	ldr	r0, [sl, #4]
   127c8:	movw	r2, #35230	; 0x899e
   127cc:	mov	r1, #4096	; 0x1000
   127d0:	movt	r2, #1
   127d4:	ldr	r3, [r0, #24]
   127d8:	mov	r0, r6
   127dc:	str	r8, [sp]
   127e0:	b	127f8 <__assert_fail@plt+0x1884>
   127e4:	movw	r2, #35137	; 0x8941
   127e8:	mov	r0, r6
   127ec:	mov	r1, #4096	; 0x1000
   127f0:	mov	r3, r8
   127f4:	movt	r2, #1
   127f8:	bl	10e84 <snprintf@plt>
   127fc:	mov	r0, r6
   12800:	mov	r1, r4
   12804:	movw	r2, #4095	; 0xfff
   12808:	bl	10dc4 <readlink@plt>
   1280c:	cmn	r0, #1
   12810:	beq	124a0 <__assert_fail@plt+0x152c>
   12814:	mov	r1, #0
   12818:	strb	r1, [r4, r0]
   1281c:	movw	r0, #35249	; 0x89b1
   12820:	movt	r0, #1
   12824:	bl	10d40 <printf@plt>
   12828:	mov	r0, r4
   1282c:	bl	1300c <__assert_fail@plt+0x2098>
   12830:	b	124d4 <__assert_fail@plt+0x1560>
   12834:	sub	sp, fp, #28
   12838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1283c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12840:	add	fp, sp, #24
   12844:	sub	sp, sp, #8
   12848:	str	r0, [sp, #4]
   1284c:	add	r0, sp, #4
   12850:	bl	10d88 <ctime@plt>
   12854:	movw	r5, #37140	; 0x9114
   12858:	mov	r4, r0
   1285c:	ldrb	r0, [r0, #4]
   12860:	movt	r5, #2
   12864:	ldr	r1, [r5]
   12868:	bl	10ed8 <putc@plt>
   1286c:	ldrb	r0, [r4, #5]
   12870:	ldr	r1, [r5]
   12874:	bl	10ed8 <putc@plt>
   12878:	ldrb	r0, [r4, #6]
   1287c:	ldr	r1, [r5]
   12880:	bl	10ed8 <putc@plt>
   12884:	ldrb	r0, [r4, #7]
   12888:	ldr	r1, [r5]
   1288c:	bl	10ed8 <putc@plt>
   12890:	ldrb	r0, [r4, #8]
   12894:	ldr	r1, [r5]
   12898:	bl	10ed8 <putc@plt>
   1289c:	ldrb	r0, [r4, #9]
   128a0:	ldr	r1, [r5]
   128a4:	bl	10ed8 <putc@plt>
   128a8:	ldrb	r0, [r4, #10]
   128ac:	ldr	r1, [r5]
   128b0:	bl	10ed8 <putc@plt>
   128b4:	movw	r0, #37268	; 0x9194
   128b8:	movt	r0, #2
   128bc:	ldr	r0, [r0]
   128c0:	cmp	r0, #0
   128c4:	beq	12940 <__assert_fail@plt+0x19cc>
   128c8:	ldr	r1, [r5]
   128cc:	ldrb	r0, [r4, #11]
   128d0:	bl	10ed8 <putc@plt>
   128d4:	ldrb	r0, [r4, #12]
   128d8:	ldr	r1, [r5]
   128dc:	bl	10ed8 <putc@plt>
   128e0:	ldrb	r0, [r4, #13]
   128e4:	ldr	r1, [r5]
   128e8:	bl	10ed8 <putc@plt>
   128ec:	ldrb	r0, [r4, #14]
   128f0:	ldr	r1, [r5]
   128f4:	bl	10ed8 <putc@plt>
   128f8:	ldrb	r0, [r4, #15]
   128fc:	ldr	r1, [r5]
   12900:	bl	10ed8 <putc@plt>
   12904:	ldrb	r0, [r4, #16]
   12908:	ldr	r1, [r5]
   1290c:	bl	10ed8 <putc@plt>
   12910:	ldrb	r0, [r4, #17]
   12914:	ldr	r1, [r5]
   12918:	bl	10ed8 <putc@plt>
   1291c:	ldrb	r0, [r4, #18]
   12920:	ldr	r1, [r5]
   12924:	bl	10ed8 <putc@plt>
   12928:	mov	r8, #23
   1292c:	mov	r9, #22
   12930:	mov	r6, #21
   12934:	mov	r7, #20
   12938:	mov	r0, #19
   1293c:	b	12970 <__assert_fail@plt+0x19fc>
   12940:	ldr	r0, [sp, #4]
   12944:	add	r0, r0, #61696	; 0xf100
   12948:	add	r6, r0, #15663104	; 0xef0000
   1294c:	mov	r0, #0
   12950:	bl	10d7c <time@plt>
   12954:	cmp	r6, r0
   12958:	ble	12978 <__assert_fail@plt+0x1a04>
   1295c:	mov	r8, #15
   12960:	mov	r9, #14
   12964:	mov	r6, #13
   12968:	mov	r7, #12
   1296c:	mov	r0, #11
   12970:	ldrb	r0, [r4, r0]
   12974:	b	1298c <__assert_fail@plt+0x1a18>
   12978:	mov	r8, #23
   1297c:	mov	r9, #22
   12980:	mov	r6, #21
   12984:	mov	r7, #20
   12988:	mov	r0, #32
   1298c:	ldr	r1, [r5]
   12990:	bl	10ed8 <putc@plt>
   12994:	ldrb	r0, [r4, r7]
   12998:	ldr	r1, [r5]
   1299c:	bl	10ed8 <putc@plt>
   129a0:	ldrb	r0, [r4, r6]
   129a4:	ldr	r1, [r5]
   129a8:	bl	10ed8 <putc@plt>
   129ac:	ldrb	r0, [r4, r9]
   129b0:	ldr	r1, [r5]
   129b4:	bl	10ed8 <putc@plt>
   129b8:	ldrb	r0, [r4, r8]
   129bc:	ldr	r1, [r5]
   129c0:	bl	10ed8 <putc@plt>
   129c4:	ldr	r1, [r5]
   129c8:	mov	r0, #32
   129cc:	bl	10ed8 <putc@plt>
   129d0:	sub	sp, fp, #24
   129d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   129d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129dc:	add	fp, sp, #28
   129e0:	sub	sp, sp, #20
   129e4:	movw	r1, #37232	; 0x9170
   129e8:	mov	r4, r0
   129ec:	ldr	r0, [r0, #16]
   129f0:	movw	r5, #37208	; 0x9158
   129f4:	movw	r2, #37264	; 0x9190
   129f8:	movt	r1, #2
   129fc:	movt	r5, #2
   12a00:	movt	r2, #2
   12a04:	ldr	r1, [r1]
   12a08:	ldr	r2, [r2]
   12a0c:	cmp	r1, #0
   12a10:	ldrne	r1, [r4, #32]
   12a14:	addne	r0, r0, r1
   12a18:	ldr	r1, [r5]
   12a1c:	addne	r0, r0, #1
   12a20:	cmp	r1, #0
   12a24:	ldrne	r1, [r4, #20]
   12a28:	addne	r0, r0, r1
   12a2c:	movw	r1, #37248	; 0x9180
   12a30:	movt	r1, #2
   12a34:	addne	r0, r0, #1
   12a38:	ldr	r1, [r1]
   12a3c:	orrs	r1, r2, r1
   12a40:	movw	r1, #37104	; 0x90f0
   12a44:	movt	r1, #2
   12a48:	addne	r0, r0, #1
   12a4c:	add	r0, r0, #1
   12a50:	ldr	r1, [r1]
   12a54:	add	r1, r1, #1
   12a58:	cmp	r1, r0, lsl #1
   12a5c:	bge	12ab0 <__assert_fail@plt+0x1b3c>
   12a60:	ldr	r5, [r4]
   12a64:	cmp	r5, #0
   12a68:	beq	12d10 <__assert_fail@plt+0x1d9c>
   12a6c:	movw	r6, #37140	; 0x9114
   12a70:	movt	r6, #2
   12a74:	b	12a84 <__assert_fail@plt+0x1b10>
   12a78:	ldr	r5, [r5, #8]
   12a7c:	cmp	r5, #0
   12a80:	beq	12d10 <__assert_fail@plt+0x1d9c>
   12a84:	ldr	r0, [r5, #16]
   12a88:	cmp	r0, #1
   12a8c:	beq	12a78 <__assert_fail@plt+0x1b04>
   12a90:	ldr	r2, [r4, #20]
   12a94:	ldr	r1, [r4, #32]
   12a98:	mov	r0, r5
   12a9c:	bl	122b4 <__assert_fail@plt+0x1340>
   12aa0:	ldr	r1, [r6]
   12aa4:	mov	r0, #10
   12aa8:	bl	10ed8 <putc@plt>
   12aac:	b	12a78 <__assert_fail@plt+0x1b04>
   12ab0:	sdiv	r0, r1, r0
   12ab4:	str	r0, [sp, #8]
   12ab8:	sdiv	r0, r1, r0
   12abc:	cmp	r0, #0
   12ac0:	str	r0, [sp, #16]
   12ac4:	beq	12d10 <__assert_fail@plt+0x1d9c>
   12ac8:	movw	r7, #37120	; 0x9100
   12acc:	ldr	r1, [r4, #12]
   12ad0:	movw	r6, #37164	; 0x912c
   12ad4:	movt	r7, #2
   12ad8:	movt	r6, #2
   12adc:	ldr	r0, [r7]
   12ae0:	cmp	r1, r0
   12ae4:	ble	12b08 <__assert_fail@plt+0x1b94>
   12ae8:	ldr	r0, [r6]
   12aec:	lsl	r1, r1, #2
   12af0:	bl	182b0 <__assert_fail@plt+0x733c>
   12af4:	cmp	r0, #0
   12af8:	beq	12c94 <__assert_fail@plt+0x1d20>
   12afc:	ldr	r1, [r4, #12]
   12b00:	str	r0, [r6]
   12b04:	str	r1, [r7]
   12b08:	ldr	r0, [r6]
   12b0c:	ldr	r1, [r4]
   12b10:	mov	r2, #0
   12b14:	str	r2, [sp, #12]
   12b18:	b	12b28 <__assert_fail@plt+0x1bb4>
   12b1c:	ldr	r1, [r1, #8]
   12b20:	cmp	r1, #0
   12b24:	beq	12b48 <__assert_fail@plt+0x1bd4>
   12b28:	ldr	r2, [r1, #16]
   12b2c:	cmp	r2, #1
   12b30:	beq	12b1c <__assert_fail@plt+0x1ba8>
   12b34:	ldr	r2, [sp, #12]
   12b38:	str	r1, [r0, r2, lsl #2]
   12b3c:	add	r2, r2, #1
   12b40:	str	r2, [sp, #12]
   12b44:	b	12b1c <__assert_fail@plt+0x1ba8>
   12b48:	ldr	r0, [sp, #8]
   12b4c:	ldr	r1, [sp, #12]
   12b50:	sdiv	r7, r1, r0
   12b54:	mls	r0, r7, r0, r1
   12b58:	cmp	r0, #0
   12b5c:	ldr	r0, [r4]
   12b60:	addne	r7, r7, #1
   12b64:	ldr	r0, [r0, #48]	; 0x30
   12b68:	cmp	r0, #0
   12b6c:	beq	12bb0 <__assert_fail@plt+0x1c3c>
   12b70:	movw	r0, #37260	; 0x918c
   12b74:	ldr	r1, [r5]
   12b78:	movt	r0, #2
   12b7c:	ldr	r0, [r0]
   12b80:	orrs	r0, r1, r0
   12b84:	beq	12bb0 <__assert_fail@plt+0x1c3c>
   12b88:	movw	r0, #37288	; 0x91a8
   12b8c:	ldr	r1, [r4, #4]
   12b90:	movt	r0, #2
   12b94:	ldr	r0, [r0]
   12b98:	add	r1, r1, r0
   12b9c:	sub	r1, r1, #1
   12ba0:	udiv	r1, r1, r0
   12ba4:	movw	r0, #35140	; 0x8944
   12ba8:	movt	r0, #1
   12bac:	bl	10d40 <printf@plt>
   12bb0:	cmp	r7, #1
   12bb4:	blt	12d10 <__assert_fail@plt+0x1d9c>
   12bb8:	movw	r8, #37140	; 0x9114
   12bbc:	mov	r5, #0
   12bc0:	movt	r8, #2
   12bc4:	b	12bf0 <__assert_fail@plt+0x1c7c>
   12bc8:	ldr	r1, [r8]
   12bcc:	mov	r0, #10
   12bd0:	bl	10ed8 <putc@plt>
   12bd4:	ldr	r5, [sp, #4]
   12bd8:	mov	r7, r6
   12bdc:	add	r5, r5, #1
   12be0:	cmp	r5, r6
   12be4:	movw	r6, #37164	; 0x912c
   12be8:	movt	r6, #2
   12bec:	beq	12d10 <__assert_fail@plt+0x1d9c>
   12bf0:	ldr	r0, [r6]
   12bf4:	ldr	r2, [r4, #20]
   12bf8:	ldr	r1, [r4, #32]
   12bfc:	ldr	r0, [r0, r5, lsl #2]
   12c00:	bl	122b4 <__assert_fail@plt+0x1340>
   12c04:	ldr	r1, [sp, #12]
   12c08:	add	r9, r5, r7
   12c0c:	mov	r6, r7
   12c10:	str	r5, [sp, #4]
   12c14:	cmp	r9, r1
   12c18:	bge	12bc8 <__assert_fail@plt+0x1c54>
   12c1c:	mov	sl, #0
   12c20:	b	12c54 <__assert_fail@plt+0x1ce0>
   12c24:	movw	r0, #37164	; 0x912c
   12c28:	ldr	r2, [r7, #20]
   12c2c:	ldr	r1, [r7, #32]
   12c30:	mov	r4, r7
   12c34:	movt	r0, #2
   12c38:	ldr	r0, [r0]
   12c3c:	ldr	r0, [r0, r9, lsl #2]
   12c40:	bl	122b4 <__assert_fail@plt+0x1340>
   12c44:	ldr	r1, [sp, #12]
   12c48:	add	r9, r9, r6
   12c4c:	cmp	r9, r1
   12c50:	bge	12bc8 <__assert_fail@plt+0x1c54>
   12c54:	ldr	r1, [sp, #8]
   12c58:	add	sl, sl, #1
   12c5c:	cmp	sl, r1
   12c60:	beq	12bc8 <__assert_fail@plt+0x1c54>
   12c64:	ldr	r1, [sp, #16]
   12c68:	mov	r7, r4
   12c6c:	cmp	r0, r1
   12c70:	bge	12c24 <__assert_fail@plt+0x1cb0>
   12c74:	ldr	r1, [sp, #16]
   12c78:	sub	r4, r1, r0
   12c7c:	ldr	r1, [r8]
   12c80:	mov	r0, #32
   12c84:	bl	10ed8 <putc@plt>
   12c88:	subs	r4, r4, #1
   12c8c:	bne	12c7c <__assert_fail@plt+0x1d08>
   12c90:	b	12c24 <__assert_fail@plt+0x1cb0>
   12c94:	movw	r0, #37136	; 0x9110
   12c98:	movt	r0, #2
   12c9c:	ldr	r5, [r0]
   12ca0:	bl	10e78 <__errno_location@plt>
   12ca4:	ldr	r0, [r0]
   12ca8:	bl	10e24 <strerror@plt>
   12cac:	movw	r1, #35203	; 0x8983
   12cb0:	mov	r2, r0
   12cb4:	mov	r0, r5
   12cb8:	movt	r1, #1
   12cbc:	bl	10e6c <fprintf@plt>
   12cc0:	ldr	r5, [r4]
   12cc4:	cmp	r5, #0
   12cc8:	beq	12d10 <__assert_fail@plt+0x1d9c>
   12ccc:	movw	r6, #37140	; 0x9114
   12cd0:	movt	r6, #2
   12cd4:	b	12ce4 <__assert_fail@plt+0x1d70>
   12cd8:	ldr	r5, [r5, #8]
   12cdc:	cmp	r5, #0
   12ce0:	beq	12d10 <__assert_fail@plt+0x1d9c>
   12ce4:	ldr	r0, [r5, #16]
   12ce8:	cmp	r0, #1
   12cec:	beq	12cd8 <__assert_fail@plt+0x1d64>
   12cf0:	ldr	r2, [r4, #20]
   12cf4:	ldr	r1, [r4, #32]
   12cf8:	mov	r0, r5
   12cfc:	bl	122b4 <__assert_fail@plt+0x1340>
   12d00:	ldr	r1, [r6]
   12d04:	mov	r0, #10
   12d08:	bl	10ed8 <putc@plt>
   12d0c:	b	12cd8 <__assert_fail@plt+0x1d64>
   12d10:	sub	sp, fp, #28
   12d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d1c:	add	fp, sp, #28
   12d20:	sub	sp, sp, #4
   12d24:	mov	sl, r0
   12d28:	ldr	r1, [r0, #16]
   12d2c:	movw	r0, #37232	; 0x9170
   12d30:	movw	r3, #37264	; 0x9190
   12d34:	movt	r0, #2
   12d38:	movt	r3, #2
   12d3c:	ldr	r0, [r0]
   12d40:	ldr	r3, [r3]
   12d44:	cmp	r0, #0
   12d48:	ldrne	r0, [sl, #32]
   12d4c:	addne	r0, r1, r0
   12d50:	addne	r1, r0, #1
   12d54:	movw	r0, #37208	; 0x9158
   12d58:	movt	r0, #2
   12d5c:	ldr	r0, [r0]
   12d60:	cmp	r0, #0
   12d64:	ldrne	r2, [sl, #20]
   12d68:	addne	r1, r1, r2
   12d6c:	movw	r2, #37248	; 0x9180
   12d70:	movt	r2, #2
   12d74:	addne	r1, r1, #1
   12d78:	ldr	r2, [r2]
   12d7c:	orrs	r2, r3, r2
   12d80:	movw	r2, #37104	; 0x90f0
   12d84:	movt	r2, #2
   12d88:	addne	r1, r1, #1
   12d8c:	add	r1, r1, #1
   12d90:	ldr	r2, [r2]
   12d94:	add	r2, r2, #1
   12d98:	cmp	r2, r1, lsl #1
   12d9c:	bge	12df0 <__assert_fail@plt+0x1e7c>
   12da0:	ldr	r5, [sl]
   12da4:	cmp	r5, #0
   12da8:	beq	12edc <__assert_fail@plt+0x1f68>
   12dac:	movw	r6, #37140	; 0x9114
   12db0:	movt	r6, #2
   12db4:	b	12dc4 <__assert_fail@plt+0x1e50>
   12db8:	ldr	r5, [r5, #8]
   12dbc:	cmp	r5, #0
   12dc0:	beq	12edc <__assert_fail@plt+0x1f68>
   12dc4:	ldr	r0, [r5, #16]
   12dc8:	cmp	r0, #1
   12dcc:	beq	12db8 <__assert_fail@plt+0x1e44>
   12dd0:	ldr	r2, [sl, #20]
   12dd4:	ldr	r1, [sl, #32]
   12dd8:	mov	r0, r5
   12ddc:	bl	122b4 <__assert_fail@plt+0x1340>
   12de0:	ldr	r1, [r6]
   12de4:	mov	r0, #10
   12de8:	bl	10ed8 <putc@plt>
   12dec:	b	12db8 <__assert_fail@plt+0x1e44>
   12df0:	sdiv	r9, r2, r1
   12df4:	sdiv	r8, r2, r9
   12df8:	cmp	r8, #0
   12dfc:	beq	12edc <__assert_fail@plt+0x1f68>
   12e00:	ldr	r5, [sl]
   12e04:	ldr	r1, [r5, #48]	; 0x30
   12e08:	cmp	r1, #0
   12e0c:	beq	12e54 <__assert_fail@plt+0x1ee0>
   12e10:	movw	r1, #37260	; 0x918c
   12e14:	movt	r1, #2
   12e18:	ldr	r1, [r1]
   12e1c:	orrs	r0, r0, r1
   12e20:	beq	12e54 <__assert_fail@plt+0x1ee0>
   12e24:	movw	r0, #37288	; 0x91a8
   12e28:	ldr	r1, [sl, #4]
   12e2c:	mov	r3, #0
   12e30:	movt	r0, #2
   12e34:	ldr	r0, [r0]
   12e38:	add	r1, r1, r0
   12e3c:	sub	r1, r1, #1
   12e40:	udiv	r2, r1, r0
   12e44:	movw	r0, #35218	; 0x8992
   12e48:	movt	r0, #1
   12e4c:	bl	10d40 <printf@plt>
   12e50:	ldr	r5, [sl]
   12e54:	movw	r7, #37140	; 0x9114
   12e58:	cmp	r5, #0
   12e5c:	movt	r7, #2
   12e60:	beq	12ee4 <__assert_fail@plt+0x1f70>
   12e64:	mov	r6, #0
   12e68:	b	12e98 <__assert_fail@plt+0x1f24>
   12e6c:	ldr	r2, [sl, #20]
   12e70:	ldr	r1, [sl, #32]
   12e74:	mov	r0, r5
   12e78:	bl	122b4 <__assert_fail@plt+0x1340>
   12e7c:	add	r6, r6, #1
   12e80:	cmp	r6, r9
   12e84:	cmplt	r0, r8
   12e88:	blt	12ec0 <__assert_fail@plt+0x1f4c>
   12e8c:	ldr	r5, [r5, #8]
   12e90:	cmp	r5, #0
   12e94:	beq	12ee4 <__assert_fail@plt+0x1f70>
   12e98:	ldr	r0, [r5, #16]
   12e9c:	cmp	r0, #1
   12ea0:	beq	12e8c <__assert_fail@plt+0x1f18>
   12ea4:	cmp	r6, r9
   12ea8:	blt	12e6c <__assert_fail@plt+0x1ef8>
   12eac:	ldr	r1, [r7]
   12eb0:	mov	r0, #10
   12eb4:	bl	10ed8 <putc@plt>
   12eb8:	mov	r6, #0
   12ebc:	b	12e6c <__assert_fail@plt+0x1ef8>
   12ec0:	sub	r4, r8, r0
   12ec4:	ldr	r1, [r7]
   12ec8:	mov	r0, #32
   12ecc:	bl	10ed8 <putc@plt>
   12ed0:	subs	r4, r4, #1
   12ed4:	bne	12ec4 <__assert_fail@plt+0x1f50>
   12ed8:	b	12e8c <__assert_fail@plt+0x1f18>
   12edc:	sub	sp, fp, #28
   12ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ee4:	ldr	r1, [r7]
   12ee8:	mov	r0, #10
   12eec:	sub	sp, fp, #28
   12ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ef4:	b	10ed8 <putc@plt>
   12ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12efc:	add	fp, sp, #28
   12f00:	sub	sp, sp, #4
   12f04:	mov	r4, r0
   12f08:	movw	r0, #37232	; 0x9170
   12f0c:	movt	r0, #2
   12f10:	ldr	r0, [r0]
   12f14:	cmp	r0, #0
   12f18:	beq	12f28 <__assert_fail@plt+0x1fb4>
   12f1c:	ldr	r0, [r4, #32]
   12f20:	add	r6, r0, #1
   12f24:	b	12f2c <__assert_fail@plt+0x1fb8>
   12f28:	mov	r6, #0
   12f2c:	movw	r0, #37208	; 0x9158
   12f30:	ldr	r5, [r4]
   12f34:	movw	sl, #37140	; 0x9114
   12f38:	movt	r0, #2
   12f3c:	movt	sl, #2
   12f40:	ldr	r0, [r0]
   12f44:	cmp	r0, #0
   12f48:	ldrne	r0, [r4, #20]
   12f4c:	addne	r0, r6, r0
   12f50:	addne	r6, r0, #1
   12f54:	movw	r0, #37248	; 0x9180
   12f58:	movt	r0, #2
   12f5c:	ldr	r0, [r0]
   12f60:	cmp	r0, #0
   12f64:	addne	r6, r6, #1
   12f68:	cmp	r5, #0
   12f6c:	beq	12ff8 <__assert_fail@plt+0x2084>
   12f70:	mov	r7, #0
   12f74:	b	12f98 <__assert_fail@plt+0x2024>
   12f78:	ldr	r2, [r4, #20]
   12f7c:	ldr	r1, [r4, #32]
   12f80:	mov	r0, r5
   12f84:	bl	122b4 <__assert_fail@plt+0x1340>
   12f88:	add	r7, r0, r7
   12f8c:	ldr	r5, [r5, #8]
   12f90:	cmp	r5, #0
   12f94:	beq	12ff8 <__assert_fail@plt+0x2084>
   12f98:	ldr	r0, [r5, #16]
   12f9c:	cmp	r0, #1
   12fa0:	beq	12f8c <__assert_fail@plt+0x2018>
   12fa4:	cmp	r7, #1
   12fa8:	blt	12f78 <__assert_fail@plt+0x2004>
   12fac:	ldr	r1, [sl]
   12fb0:	mov	r0, #44	; 0x2c
   12fb4:	bl	10ed8 <putc@plt>
   12fb8:	ldr	r1, [r5, #52]	; 0x34
   12fbc:	add	r7, r7, #2
   12fc0:	add	r0, r6, r7
   12fc4:	add	r8, r0, r1
   12fc8:	movw	r0, #37104	; 0x90f0
   12fcc:	ldr	r1, [sl]
   12fd0:	movt	r0, #2
   12fd4:	ldr	r9, [r0]
   12fd8:	mov	r0, #10
   12fdc:	cmp	r8, r9
   12fe0:	movwcc	r0, #32
   12fe4:	bl	10ed8 <putc@plt>
   12fe8:	cmp	r8, r9
   12fec:	mov	r0, #0
   12ff0:	movcs	r7, r0
   12ff4:	b	12f78 <__assert_fail@plt+0x2004>
   12ff8:	ldr	r1, [sl]
   12ffc:	mov	r0, #10
   13000:	sub	sp, fp, #28
   13004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13008:	b	10ed8 <putc@plt>
   1300c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13010:	add	fp, sp, #24
   13014:	ldrb	r7, [r0]
   13018:	cmp	r7, #0
   1301c:	beq	13088 <__assert_fail@plt+0x2114>
   13020:	add	r6, r0, #1
   13024:	bl	10e3c <__ctype_b_loc@plt>
   13028:	movw	r8, #37300	; 0x91b4
   1302c:	movw	r9, #37140	; 0x9114
   13030:	mov	r5, r0
   13034:	mov	r4, #0
   13038:	movt	r8, #2
   1303c:	movt	r9, #2
   13040:	ldr	r2, [r5]
   13044:	uxtb	r1, r7
   13048:	ldr	r0, [r8]
   1304c:	add	r2, r2, r1, lsl #1
   13050:	cmp	r0, #0
   13054:	mov	r0, r1
   13058:	movwne	r0, #63	; 0x3f
   1305c:	ldrh	r2, [r2]
   13060:	tst	r2, #16384	; 0x4000
   13064:	movne	r0, r1
   13068:	ldr	r1, [r9]
   1306c:	bl	10ed8 <putc@plt>
   13070:	ldrb	r7, [r6, r4]
   13074:	add	r4, r4, #1
   13078:	cmp	r7, #0
   1307c:	bne	13040 <__assert_fail@plt+0x20cc>
   13080:	mov	r0, r4
   13084:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13088:	mov	r4, #0
   1308c:	mov	r0, r4
   13090:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13094:	push	{fp, lr}
   13098:	mov	fp, sp
   1309c:	movw	r0, #37136	; 0x9110
   130a0:	mov	r1, #51	; 0x33
   130a4:	mov	r2, #1
   130a8:	movt	r0, #2
   130ac:	ldr	r3, [r0]
   130b0:	movw	r0, #35254	; 0x89b6
   130b4:	movt	r0, #1
   130b8:	bl	10dd0 <fwrite@plt>
   130bc:	mov	r0, #1
   130c0:	pop	{fp, pc}
   130c4:	add	r0, r0, #168	; 0xa8
   130c8:	add	r1, r1, #168	; 0xa8
   130cc:	b	10d1c <strcmp@plt>
   130d0:	add	r2, r1, #168	; 0xa8
   130d4:	add	r1, r0, #168	; 0xa8
   130d8:	mov	r0, r2
   130dc:	b	10d1c <strcmp@plt>
   130e0:	push	{r4, sl, fp, lr}
   130e4:	add	fp, sp, #8
   130e8:	ldr	r3, [r0, #144]	; 0x90
   130ec:	ldr	r2, [r1, #144]	; 0x90
   130f0:	mov	ip, r0
   130f4:	mov	r0, #1
   130f8:	cmp	r2, r3
   130fc:	ble	13104 <__assert_fail@plt+0x2190>
   13100:	pop	{r4, sl, fp, pc}
   13104:	bne	13118 <__assert_fail@plt+0x21a4>
   13108:	ldr	lr, [ip, #148]	; 0x94
   1310c:	ldr	r4, [r1, #148]	; 0x94
   13110:	cmp	r4, lr
   13114:	bgt	13100 <__assert_fail@plt+0x218c>
   13118:	mvn	r0, #0
   1311c:	cmp	r2, r3
   13120:	poplt	{r4, sl, fp, pc}
   13124:	bne	13138 <__assert_fail@plt+0x21c4>
   13128:	ldr	r2, [ip, #148]	; 0x94
   1312c:	ldr	r3, [r1, #148]	; 0x94
   13130:	cmp	r3, r2
   13134:	blt	13100 <__assert_fail@plt+0x218c>
   13138:	add	r0, ip, #168	; 0xa8
   1313c:	add	r1, r1, #168	; 0xa8
   13140:	pop	{r4, sl, fp, lr}
   13144:	b	10d1c <strcmp@plt>
   13148:	push	{r4, sl, fp, lr}
   1314c:	add	fp, sp, #8
   13150:	ldr	r3, [r0, #144]	; 0x90
   13154:	ldr	r2, [r1, #144]	; 0x90
   13158:	mov	ip, r0
   1315c:	mvn	r0, #0
   13160:	cmp	r2, r3
   13164:	bgt	131ac <__assert_fail@plt+0x2238>
   13168:	bne	1317c <__assert_fail@plt+0x2208>
   1316c:	ldr	lr, [ip, #148]	; 0x94
   13170:	ldr	r4, [r1, #148]	; 0x94
   13174:	cmp	r4, lr
   13178:	bgt	131ac <__assert_fail@plt+0x2238>
   1317c:	mov	r0, #1
   13180:	cmp	r2, r3
   13184:	blt	131ac <__assert_fail@plt+0x2238>
   13188:	bne	1319c <__assert_fail@plt+0x2228>
   1318c:	ldr	r2, [ip, #148]	; 0x94
   13190:	ldr	r3, [r1, #148]	; 0x94
   13194:	cmp	r3, r2
   13198:	poplt	{r4, sl, fp, pc}
   1319c:	add	r0, ip, #168	; 0xa8
   131a0:	add	r1, r1, #168	; 0xa8
   131a4:	bl	10d1c <strcmp@plt>
   131a8:	rsb	r0, r0, #0
   131ac:	pop	{r4, sl, fp, pc}
   131b0:	push	{r4, sl, fp, lr}
   131b4:	add	fp, sp, #8
   131b8:	ldr	r3, [r0, #136]	; 0x88
   131bc:	ldr	r2, [r1, #136]	; 0x88
   131c0:	mov	ip, r0
   131c4:	mov	r0, #1
   131c8:	cmp	r2, r3
   131cc:	ble	131d4 <__assert_fail@plt+0x2260>
   131d0:	pop	{r4, sl, fp, pc}
   131d4:	bne	131e8 <__assert_fail@plt+0x2274>
   131d8:	ldr	lr, [ip, #140]	; 0x8c
   131dc:	ldr	r4, [r1, #140]	; 0x8c
   131e0:	cmp	r4, lr
   131e4:	bgt	131d0 <__assert_fail@plt+0x225c>
   131e8:	mvn	r0, #0
   131ec:	cmp	r2, r3
   131f0:	poplt	{r4, sl, fp, pc}
   131f4:	bne	13208 <__assert_fail@plt+0x2294>
   131f8:	ldr	r2, [ip, #140]	; 0x8c
   131fc:	ldr	r3, [r1, #140]	; 0x8c
   13200:	cmp	r3, r2
   13204:	blt	131d0 <__assert_fail@plt+0x225c>
   13208:	add	r0, ip, #168	; 0xa8
   1320c:	add	r1, r1, #168	; 0xa8
   13210:	pop	{r4, sl, fp, lr}
   13214:	b	10d1c <strcmp@plt>
   13218:	push	{r4, sl, fp, lr}
   1321c:	add	fp, sp, #8
   13220:	ldr	r3, [r0, #136]	; 0x88
   13224:	ldr	r2, [r1, #136]	; 0x88
   13228:	mov	ip, r0
   1322c:	mvn	r0, #0
   13230:	cmp	r2, r3
   13234:	bgt	1327c <__assert_fail@plt+0x2308>
   13238:	bne	1324c <__assert_fail@plt+0x22d8>
   1323c:	ldr	lr, [ip, #140]	; 0x8c
   13240:	ldr	r4, [r1, #140]	; 0x8c
   13244:	cmp	r4, lr
   13248:	bgt	1327c <__assert_fail@plt+0x2308>
   1324c:	mov	r0, #1
   13250:	cmp	r2, r3
   13254:	blt	1327c <__assert_fail@plt+0x2308>
   13258:	bne	1326c <__assert_fail@plt+0x22f8>
   1325c:	ldr	r2, [ip, #140]	; 0x8c
   13260:	ldr	r3, [r1, #140]	; 0x8c
   13264:	cmp	r3, r2
   13268:	poplt	{r4, sl, fp, pc}
   1326c:	add	r0, ip, #168	; 0xa8
   13270:	add	r1, r1, #168	; 0xa8
   13274:	bl	10d1c <strcmp@plt>
   13278:	rsb	r0, r0, #0
   1327c:	pop	{r4, sl, fp, pc}
   13280:	push	{r4, sl, fp, lr}
   13284:	add	fp, sp, #8
   13288:	ldr	r3, [r0, #152]	; 0x98
   1328c:	ldr	r2, [r1, #152]	; 0x98
   13290:	mov	ip, r0
   13294:	mov	r0, #1
   13298:	cmp	r2, r3
   1329c:	ble	132a4 <__assert_fail@plt+0x2330>
   132a0:	pop	{r4, sl, fp, pc}
   132a4:	bne	132b8 <__assert_fail@plt+0x2344>
   132a8:	ldr	lr, [ip, #156]	; 0x9c
   132ac:	ldr	r4, [r1, #156]	; 0x9c
   132b0:	cmp	r4, lr
   132b4:	bgt	132a0 <__assert_fail@plt+0x232c>
   132b8:	mvn	r0, #0
   132bc:	cmp	r2, r3
   132c0:	poplt	{r4, sl, fp, pc}
   132c4:	bne	132d8 <__assert_fail@plt+0x2364>
   132c8:	ldr	r2, [ip, #156]	; 0x9c
   132cc:	ldr	r3, [r1, #156]	; 0x9c
   132d0:	cmp	r3, r2
   132d4:	blt	132a0 <__assert_fail@plt+0x232c>
   132d8:	add	r0, ip, #168	; 0xa8
   132dc:	add	r1, r1, #168	; 0xa8
   132e0:	pop	{r4, sl, fp, lr}
   132e4:	b	10d1c <strcmp@plt>
   132e8:	push	{r4, sl, fp, lr}
   132ec:	add	fp, sp, #8
   132f0:	ldr	r3, [r0, #152]	; 0x98
   132f4:	ldr	r2, [r1, #152]	; 0x98
   132f8:	mov	ip, r0
   132fc:	mvn	r0, #0
   13300:	cmp	r2, r3
   13304:	bgt	1334c <__assert_fail@plt+0x23d8>
   13308:	bne	1331c <__assert_fail@plt+0x23a8>
   1330c:	ldr	lr, [ip, #156]	; 0x9c
   13310:	ldr	r4, [r1, #156]	; 0x9c
   13314:	cmp	r4, lr
   13318:	bgt	1334c <__assert_fail@plt+0x23d8>
   1331c:	mov	r0, #1
   13320:	cmp	r2, r3
   13324:	blt	1334c <__assert_fail@plt+0x23d8>
   13328:	bne	1333c <__assert_fail@plt+0x23c8>
   1332c:	ldr	r2, [ip, #156]	; 0x9c
   13330:	ldr	r3, [r1, #156]	; 0x9c
   13334:	cmp	r3, r2
   13338:	poplt	{r4, sl, fp, pc}
   1333c:	add	r0, ip, #168	; 0xa8
   13340:	add	r1, r1, #168	; 0xa8
   13344:	bl	10d1c <strcmp@plt>
   13348:	rsb	r0, r0, #0
   1334c:	pop	{r4, sl, fp, pc}
   13350:	push	{r4, r5, r6, sl, fp, lr}
   13354:	add	fp, sp, #16
   13358:	ldr	r4, [r0, #112]	; 0x70
   1335c:	ldr	r6, [r1, #112]	; 0x70
   13360:	ldr	r3, [r0, #116]	; 0x74
   13364:	ldr	r5, [r1, #116]	; 0x74
   13368:	mov	ip, #1
   1336c:	subs	r2, r4, r6
   13370:	sbcs	r2, r3, r5
   13374:	blt	13388 <__assert_fail@plt+0x2414>
   13378:	subs	r2, r6, r4
   1337c:	mvn	ip, #0
   13380:	sbcs	r2, r5, r3
   13384:	bge	13390 <__assert_fail@plt+0x241c>
   13388:	mov	r0, ip
   1338c:	pop	{r4, r5, r6, sl, fp, pc}
   13390:	add	r0, r0, #168	; 0xa8
   13394:	add	r1, r1, #168	; 0xa8
   13398:	pop	{r4, r5, r6, sl, fp, lr}
   1339c:	b	10d1c <strcmp@plt>
   133a0:	push	{r4, r5, r6, sl, fp, lr}
   133a4:	add	fp, sp, #16
   133a8:	ldr	r4, [r0, #112]	; 0x70
   133ac:	ldr	r6, [r1, #112]	; 0x70
   133b0:	ldr	r3, [r0, #116]	; 0x74
   133b4:	ldr	r5, [r1, #116]	; 0x74
   133b8:	mvn	ip, #0
   133bc:	subs	r2, r4, r6
   133c0:	sbcs	r2, r3, r5
   133c4:	blt	133e8 <__assert_fail@plt+0x2474>
   133c8:	subs	r2, r6, r4
   133cc:	mov	ip, #1
   133d0:	sbcs	r2, r5, r3
   133d4:	blt	133e8 <__assert_fail@plt+0x2474>
   133d8:	add	r0, r0, #168	; 0xa8
   133dc:	add	r1, r1, #168	; 0xa8
   133e0:	bl	10d1c <strcmp@plt>
   133e4:	rsb	ip, r0, #0
   133e8:	mov	r0, ip
   133ec:	pop	{r4, r5, r6, sl, fp, pc}
   133f0:	push	{fp, lr}
   133f4:	mov	fp, sp
   133f8:	and	r2, r0, #61440	; 0xf000
   133fc:	sub	r2, r2, #4096	; 0x1000
   13400:	lsr	r3, r2, #12
   13404:	cmp	r3, #11
   13408:	bhi	13458 <__assert_fail@plt+0x24e4>
   1340c:	add	r2, pc, #4
   13410:	mov	ip, #45	; 0x2d
   13414:	ldr	pc, [r2, r3, lsl #2]
   13418:	andeq	r3, r1, r8, asr #8
   1341c:	andeq	r3, r1, r0, asr r4
   13420:	andeq	r3, r1, r8, asr r4
   13424:	andeq	r3, r1, r0, ror #8
   13428:	andeq	r3, r1, r8, asr r4
   1342c:	andeq	r3, r1, r8, ror r4
   13430:	andeq	r3, r1, r8, asr r4
   13434:	andeq	r3, r1, ip, ror r4
   13438:	andeq	r3, r1, r8, asr r4
   1343c:	andeq	r3, r1, r8, ror #8
   13440:	andeq	r3, r1, r8, asr r4
   13444:	andeq	r3, r1, r0, ror r4
   13448:	mov	ip, #112	; 0x70
   1344c:	b	1347c <__assert_fail@plt+0x2508>
   13450:	mov	ip, #99	; 0x63
   13454:	b	1347c <__assert_fail@plt+0x2508>
   13458:	mov	ip, #63	; 0x3f
   1345c:	b	1347c <__assert_fail@plt+0x2508>
   13460:	mov	ip, #100	; 0x64
   13464:	b	1347c <__assert_fail@plt+0x2508>
   13468:	mov	ip, #108	; 0x6c
   1346c:	b	1347c <__assert_fail@plt+0x2508>
   13470:	mov	ip, #115	; 0x73
   13474:	b	1347c <__assert_fail@plt+0x2508>
   13478:	mov	ip, #98	; 0x62
   1347c:	tst	r0, #2
   13480:	mov	r3, #119	; 0x77
   13484:	mov	r2, #32
   13488:	mov	lr, #45	; 0x2d
   1348c:	movweq	r3, #45	; 0x2d
   13490:	tst	r0, #4
   13494:	strh	r2, [r1, #10]
   13498:	mov	r2, #114	; 0x72
   1349c:	strb	ip, [r1]
   134a0:	mov	ip, #119	; 0x77
   134a4:	movweq	r2, #45	; 0x2d
   134a8:	tst	r0, #16
   134ac:	strb	r3, [r1, #8]
   134b0:	mov	r3, #114	; 0x72
   134b4:	strb	r2, [r1, #7]
   134b8:	mov	r2, #119	; 0x77
   134bc:	movweq	r2, #45	; 0x2d
   134c0:	tst	r0, #32
   134c4:	strb	r2, [r1, #5]
   134c8:	mov	r2, #114	; 0x72
   134cc:	movweq	r2, #45	; 0x2d
   134d0:	tst	r0, #128	; 0x80
   134d4:	movweq	ip, #45	; 0x2d
   134d8:	tst	r0, #256	; 0x100
   134dc:	strb	r2, [r1, #4]
   134e0:	movweq	r3, #45	; 0x2d
   134e4:	ands	r2, r0, #1
   134e8:	strb	ip, [r1, #2]
   134ec:	mov	r2, #84	; 0x54
   134f0:	mov	ip, #45	; 0x2d
   134f4:	strb	r3, [r1, #1]
   134f8:	mov	r3, #45	; 0x2d
   134fc:	movwne	r3, #120	; 0x78
   13500:	movwne	r2, #116	; 0x74
   13504:	tst	r0, #512	; 0x200
   13508:	moveq	r2, r3
   1350c:	mov	r3, #83	; 0x53
   13510:	strb	r2, [r1, #9]
   13514:	ands	r2, r0, #8
   13518:	mov	r2, #83	; 0x53
   1351c:	movwne	lr, #120	; 0x78
   13520:	movwne	r2, #115	; 0x73
   13524:	tst	r0, #1024	; 0x400
   13528:	moveq	r2, lr
   1352c:	strb	r2, [r1, #6]
   13530:	ands	r2, r0, #64	; 0x40
   13534:	movwne	ip, #120	; 0x78
   13538:	movwne	r3, #115	; 0x73
   1353c:	tst	r0, #2048	; 0x800
   13540:	moveq	r3, ip
   13544:	strb	r3, [r1, #3]
   13548:	pop	{fp, pc}
   1354c:	ldr	r0, [r0, #16]
   13550:	b	133f0 <__assert_fail@plt+0x247c>
   13554:	push	{r4, r5, r6, sl, fp, lr}
   13558:	add	fp, sp, #16
   1355c:	mov	r4, r0
   13560:	bl	10e78 <__errno_location@plt>
   13564:	ldr	r6, [r0]
   13568:	mov	r5, r0
   1356c:	mov	r0, r4
   13570:	bl	10d64 <free@plt>
   13574:	str	r6, [r5]
   13578:	pop	{r4, r5, r6, sl, fp, pc}
   1357c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13580:	add	fp, sp, #28
   13584:	sub	sp, sp, #28
   13588:	cmp	r1, #4096	; 0x1000
   1358c:	bcs	135a8 <__assert_fail@plt+0x2634>
   13590:	mov	r7, r0
   13594:	and	r0, r1, #516	; 0x204
   13598:	mov	r5, r1
   1359c:	cmp	r0, #516	; 0x204
   135a0:	tstne	r5, #18
   135a4:	bne	135c4 <__assert_fail@plt+0x2650>
   135a8:	bl	10e78 <__errno_location@plt>
   135ac:	mov	r1, #22
   135b0:	mov	r4, #0
   135b4:	str	r1, [r0]
   135b8:	mov	r0, r4
   135bc:	sub	sp, fp, #28
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c4:	mov	r0, #1
   135c8:	mov	r1, #96	; 0x60
   135cc:	mov	sl, r2
   135d0:	bl	1822c <__assert_fail@plt+0x72b8>
   135d4:	cmp	r0, #0
   135d8:	beq	139e0 <__assert_fail@plt+0x2a6c>
   135dc:	mov	r4, r0
   135e0:	mvn	r0, #99	; 0x63
   135e4:	tst	r5, #2
   135e8:	mov	r1, r5
   135ec:	str	r0, [r4, #32]
   135f0:	bic	r0, r5, #516	; 0x204
   135f4:	str	sl, [r4, #44]	; 0x2c
   135f8:	str	r4, [sp, #24]
   135fc:	orrne	r1, r0, #4
   13600:	str	r1, [r4, #48]	; 0x30
   13604:	ldr	r0, [r7]
   13608:	cmp	r0, #0
   1360c:	beq	13644 <__assert_fail@plt+0x26d0>
   13610:	add	r6, r7, #4
   13614:	mov	r4, #0
   13618:	bl	10e48 <strlen@plt>
   1361c:	cmp	r0, r4
   13620:	movhi	r4, r0
   13624:	ldr	r0, [r6], #4
   13628:	cmp	r0, #0
   1362c:	bne	13618 <__assert_fail@plt+0x26a4>
   13630:	add	r0, r4, #1
   13634:	ldr	r4, [sp, #24]
   13638:	cmp	r0, #4096	; 0x1000
   1363c:	movls	r0, #4096	; 0x1000
   13640:	b	13648 <__assert_fail@plt+0x26d4>
   13644:	mov	r0, #4096	; 0x1000
   13648:	ldr	r1, [r4, #36]	; 0x24
   1364c:	add	r0, r0, #256	; 0x100
   13650:	adds	r1, r0, r1
   13654:	bcc	13678 <__assert_fail@plt+0x2704>
   13658:	ldr	r0, [r4, #24]
   1365c:	bl	13554 <__assert_fail@plt+0x25e0>
   13660:	mov	r0, #0
   13664:	str	r0, [r4, #24]
   13668:	bl	10e78 <__errno_location@plt>
   1366c:	mov	r1, #36	; 0x24
   13670:	str	r1, [r0]
   13674:	b	139d8 <__assert_fail@plt+0x2a64>
   13678:	str	r1, [r4, #36]	; 0x24
   1367c:	ldr	r0, [r4, #24]
   13680:	bl	182b0 <__assert_fail@plt+0x733c>
   13684:	cmp	r0, #0
   13688:	beq	136fc <__assert_fail@plt+0x2788>
   1368c:	str	r0, [r4, #24]
   13690:	ldr	r0, [r7]
   13694:	cmp	r0, #0
   13698:	beq	13710 <__assert_fail@plt+0x279c>
   1369c:	mov	r0, #176	; 0xb0
   136a0:	bl	18280 <__assert_fail@plt+0x730c>
   136a4:	cmp	r0, #0
   136a8:	beq	139d0 <__assert_fail@plt+0x2a5c>
   136ac:	ldr	r1, [r4, #24]
   136b0:	mov	r6, r0
   136b4:	mov	r0, #0
   136b8:	mov	r2, #196608	; 0x30000
   136bc:	strb	r0, [r6, #168]	; 0xa8
   136c0:	str	r2, [r6, #58]	; 0x3a
   136c4:	mvn	r2, #0
   136c8:	str	r4, [r6, #44]	; 0x2c
   136cc:	str	r2, [r6, #48]	; 0x30
   136d0:	str	r0, [r6, #52]	; 0x34
   136d4:	str	r0, [r6, #12]
   136d8:	str	r0, [r6, #16]
   136dc:	str	r0, [r6, #20]
   136e0:	str	r1, [r6, #28]
   136e4:	str	r0, [r6, #32]
   136e8:	cmp	sl, #0
   136ec:	beq	1371c <__assert_fail@plt+0x27a8>
   136f0:	ldrb	r0, [r4, #49]	; 0x31
   136f4:	ubfx	r0, r0, #2, #1
   136f8:	b	13720 <__assert_fail@plt+0x27ac>
   136fc:	ldr	r0, [r4, #24]
   13700:	bl	13554 <__assert_fail@plt+0x25e0>
   13704:	mov	r0, #0
   13708:	str	r0, [r4, #24]
   1370c:	b	139d8 <__assert_fail@plt+0x2a64>
   13710:	mov	r6, #0
   13714:	cmp	sl, #0
   13718:	bne	136f0 <__assert_fail@plt+0x277c>
   1371c:	mov	r0, #1
   13720:	ldr	r4, [r7]
   13724:	cmp	r4, #0
   13728:	beq	13894 <__assert_fail@plt+0x2920>
   1372c:	eor	r0, r0, #1
   13730:	str	r6, [sp, #20]
   13734:	and	r1, r5, #2048	; 0x800
   13738:	mov	r9, #0
   1373c:	mov	r6, #0
   13740:	str	sl, [sp, #8]
   13744:	str	r0, [sp, #12]
   13748:	mov	r0, #0
   1374c:	str	r1, [sp, #16]
   13750:	str	r0, [sp, #4]
   13754:	b	13780 <__assert_fail@plt+0x280c>
   13758:	cmp	r9, #0
   1375c:	str	r4, [r5, #8]
   13760:	beq	13888 <__assert_fail@plt+0x2914>
   13764:	ldr	r0, [sp, #4]
   13768:	str	r5, [sp, #4]
   1376c:	str	r5, [r0, #8]
   13770:	ldr	r4, [r7, #4]!
   13774:	add	r6, r6, #1
   13778:	cmp	r4, #0
   1377c:	beq	138b0 <__assert_fail@plt+0x293c>
   13780:	mov	r0, r4
   13784:	bl	10e48 <strlen@plt>
   13788:	mov	r8, r0
   1378c:	ldr	r0, [sp, #16]
   13790:	cmp	r0, #0
   13794:	bne	137cc <__assert_fail@plt+0x2858>
   13798:	cmp	r8, #3
   1379c:	bcc	137cc <__assert_fail@plt+0x2858>
   137a0:	add	r0, r8, r4
   137a4:	ldrb	r0, [r0, #-1]
   137a8:	cmp	r0, #47	; 0x2f
   137ac:	bne	137cc <__assert_fail@plt+0x2858>
   137b0:	sub	r0, r4, #2
   137b4:	ldrb	r1, [r0, r8]
   137b8:	cmp	r1, #47	; 0x2f
   137bc:	bne	137cc <__assert_fail@plt+0x2858>
   137c0:	sub	r8, r8, #1
   137c4:	cmp	r8, #1
   137c8:	bhi	137b4 <__assert_fail@plt+0x2840>
   137cc:	add	r0, r8, #176	; 0xb0
   137d0:	bic	r0, r0, #7
   137d4:	bl	18280 <__assert_fail@plt+0x730c>
   137d8:	cmp	r0, #0
   137dc:	beq	138a0 <__assert_fail@plt+0x292c>
   137e0:	add	sl, r0, #168	; 0xa8
   137e4:	mov	r5, r0
   137e8:	mov	r1, r4
   137ec:	mov	r2, r8
   137f0:	mov	r0, sl
   137f4:	bl	10d70 <memcpy@plt>
   137f8:	ldr	r0, [sp, #24]
   137fc:	ldr	r2, [sp, #20]
   13800:	mov	r4, #0
   13804:	strb	r4, [sl, r8]
   13808:	str	r2, [r5, #4]
   1380c:	add	r2, r5, #44	; 0x2c
   13810:	ldr	r1, [r0, #24]
   13814:	stm	r2, {r0, r4, r8}
   13818:	mov	r2, #196608	; 0x30000
   1381c:	str	r2, [r5, #58]	; 0x3a
   13820:	ldr	r2, [sp, #12]
   13824:	str	r4, [r5, #12]
   13828:	str	r4, [r5, #16]
   1382c:	str	r4, [r5, #20]
   13830:	str	sl, [r5, #24]
   13834:	str	r1, [r5, #28]
   13838:	clz	r1, r9
   1383c:	str	r4, [r5, #32]
   13840:	lsr	r1, r1, #5
   13844:	orrs	r1, r2, r1
   13848:	bne	13860 <__assert_fail@plt+0x28ec>
   1384c:	mov	r0, #2
   13850:	str	r0, [r5, #112]	; 0x70
   13854:	str	r4, [r5, #116]	; 0x74
   13858:	mov	r0, #11
   1385c:	b	1386c <__assert_fail@plt+0x28f8>
   13860:	mov	r1, r5
   13864:	mov	r2, #0
   13868:	bl	13a74 <__assert_fail@plt+0x2b00>
   1386c:	ldr	sl, [sp, #8]
   13870:	strh	r0, [r5, #56]	; 0x38
   13874:	cmp	sl, #0
   13878:	beq	13758 <__assert_fail@plt+0x27e4>
   1387c:	str	r9, [r5, #8]
   13880:	mov	r9, r5
   13884:	b	13770 <__assert_fail@plt+0x27fc>
   13888:	mov	r0, r5
   1388c:	str	r5, [sp, #4]
   13890:	b	13880 <__assert_fail@plt+0x290c>
   13894:	ldr	r4, [sp, #24]
   13898:	mov	r9, #0
   1389c:	b	138e4 <__assert_fail@plt+0x2970>
   138a0:	ldr	r6, [sp, #20]
   138a4:	cmp	r9, #0
   138a8:	bne	139ac <__assert_fail@plt+0x2a38>
   138ac:	b	139c4 <__assert_fail@plt+0x2a50>
   138b0:	cmp	sl, #0
   138b4:	beq	138dc <__assert_fail@plt+0x2968>
   138b8:	ldr	r4, [sp, #24]
   138bc:	cmp	r6, #2
   138c0:	bcc	138e0 <__assert_fail@plt+0x296c>
   138c4:	mov	r0, r4
   138c8:	mov	r1, r9
   138cc:	mov	r2, r6
   138d0:	bl	13c0c <__assert_fail@plt+0x2c98>
   138d4:	mov	r9, r0
   138d8:	b	138e0 <__assert_fail@plt+0x296c>
   138dc:	ldr	r4, [sp, #24]
   138e0:	ldr	r6, [sp, #20]
   138e4:	mov	r0, #176	; 0xb0
   138e8:	bl	18280 <__assert_fail@plt+0x730c>
   138ec:	cmp	r0, #0
   138f0:	beq	13984 <__assert_fail@plt+0x2a10>
   138f4:	ldr	r2, [r4, #24]
   138f8:	mov	r1, #0
   138fc:	mov	r3, #196608	; 0x30000
   13900:	str	r0, [r4]
   13904:	str	r1, [r0, #52]	; 0x34
   13908:	strb	r1, [r0, #168]	; 0xa8
   1390c:	str	r4, [r0, #44]	; 0x2c
   13910:	str	r3, [r0, #58]	; 0x3a
   13914:	str	r2, [r0, #28]
   13918:	mov	r2, #9
   1391c:	str	r1, [r0, #32]
   13920:	strh	r2, [r0, #56]	; 0x38
   13924:	str	r9, [r0, #8]
   13928:	str	r1, [r0, #12]
   1392c:	str	r1, [r0, #16]
   13930:	str	r1, [r0, #20]
   13934:	mov	r1, #1
   13938:	str	r1, [r0, #48]	; 0x30
   1393c:	ldrh	r0, [r4, #48]	; 0x30
   13940:	movw	r1, #258	; 0x102
   13944:	tst	r0, r1
   13948:	beq	139e8 <__assert_fail@plt+0x2a74>
   1394c:	movw	r0, #13652	; 0x3554
   13950:	movw	r2, #22400	; 0x5780
   13954:	movw	r3, #22432	; 0x57a0
   13958:	mov	r1, #0
   1395c:	movt	r0, #1
   13960:	movt	r2, #1
   13964:	movt	r3, #1
   13968:	str	r0, [sp]
   1396c:	mov	r0, #31
   13970:	bl	171b4 <__assert_fail@plt+0x6240>
   13974:	cmp	r0, #0
   13978:	str	r0, [r4, #56]	; 0x38
   1397c:	bne	13a00 <__assert_fail@plt+0x2a8c>
   13980:	b	1398c <__assert_fail@plt+0x2a18>
   13984:	mov	r0, #0
   13988:	str	r0, [r4]
   1398c:	cmp	r9, #0
   13990:	bne	139ac <__assert_fail@plt+0x2a38>
   13994:	b	139c4 <__assert_fail@plt+0x2a50>
   13998:	mov	r0, r9
   1399c:	bl	13554 <__assert_fail@plt+0x25e0>
   139a0:	cmp	r4, #0
   139a4:	mov	r9, r4
   139a8:	beq	139c4 <__assert_fail@plt+0x2a50>
   139ac:	ldrd	r4, [r9, #8]
   139b0:	cmp	r5, #0
   139b4:	beq	13998 <__assert_fail@plt+0x2a24>
   139b8:	mov	r0, r5
   139bc:	bl	10f5c <closedir@plt>
   139c0:	b	13998 <__assert_fail@plt+0x2a24>
   139c4:	mov	r0, r6
   139c8:	bl	13554 <__assert_fail@plt+0x25e0>
   139cc:	ldr	r4, [sp, #24]
   139d0:	ldr	r0, [r4, #24]
   139d4:	bl	13554 <__assert_fail@plt+0x25e0>
   139d8:	mov	r0, r4
   139dc:	bl	13554 <__assert_fail@plt+0x25e0>
   139e0:	mov	r4, #0
   139e4:	b	135b8 <__assert_fail@plt+0x2644>
   139e8:	mov	r0, #32
   139ec:	bl	18280 <__assert_fail@plt+0x730c>
   139f0:	cmp	r0, #0
   139f4:	str	r0, [r4, #56]	; 0x38
   139f8:	beq	1398c <__assert_fail@plt+0x2a18>
   139fc:	bl	18304 <__assert_fail@plt+0x7390>
   13a00:	ldr	r4, [sp, #24]
   13a04:	ldr	r0, [r4, #48]	; 0x30
   13a08:	tst	r0, #516	; 0x204
   13a0c:	bne	13a64 <__assert_fail@plt+0x2af0>
   13a10:	mov	r1, #32768	; 0x8000
   13a14:	tst	r0, #512	; 0x200
   13a18:	and	r1, r1, r0, lsl #11
   13a1c:	orr	r1, r1, #18688	; 0x4900
   13a20:	orr	r2, r1, #524288	; 0x80000
   13a24:	bne	13a3c <__assert_fail@plt+0x2ac8>
   13a28:	movw	r0, #35307	; 0x89eb
   13a2c:	mov	r1, r2
   13a30:	movt	r0, #1
   13a34:	bl	185d4 <__assert_fail@plt+0x7660>
   13a38:	b	13a4c <__assert_fail@plt+0x2ad8>
   13a3c:	ldr	r0, [r4, #32]
   13a40:	movw	r1, #35307	; 0x89eb
   13a44:	movt	r1, #1
   13a48:	bl	1814c <__assert_fail@plt+0x71d8>
   13a4c:	cmn	r0, #1
   13a50:	str	r0, [r4, #28]
   13a54:	bgt	13a64 <__assert_fail@plt+0x2af0>
   13a58:	ldr	r0, [r4, #48]	; 0x30
   13a5c:	orr	r0, r0, #4
   13a60:	str	r0, [r4, #48]	; 0x30
   13a64:	add	r0, r4, #60	; 0x3c
   13a68:	mvn	r1, #0
   13a6c:	bl	17ff0 <__assert_fail@plt+0x707c>
   13a70:	b	135b8 <__assert_fail@plt+0x2644>
   13a74:	push	{r4, r5, r6, sl, fp, lr}
   13a78:	add	fp, sp, #16
   13a7c:	sub	sp, sp, #8
   13a80:	mov	r4, r1
   13a84:	ldr	r1, [r0, #48]	; 0x30
   13a88:	ldr	r3, [r4, #48]	; 0x30
   13a8c:	add	r5, r4, #64	; 0x40
   13a90:	cmp	r3, #0
   13a94:	andeq	r3, r1, #1
   13a98:	orreq	r2, r3, r2
   13a9c:	cmp	r2, #0
   13aa0:	andseq	r1, r1, #2
   13aa4:	beq	13b00 <__assert_fail@plt+0x2b8c>
   13aa8:	ldr	r1, [r4, #24]
   13aac:	mov	r0, #3
   13ab0:	mov	r2, r5
   13ab4:	bl	10f14 <__xstat64@plt>
   13ab8:	cmp	r0, #0
   13abc:	beq	13b80 <__assert_fail@plt+0x2c0c>
   13ac0:	bl	10e78 <__errno_location@plt>
   13ac4:	mov	r6, r0
   13ac8:	ldr	r0, [r0]
   13acc:	cmp	r0, #2
   13ad0:	bne	13b30 <__assert_fail@plt+0x2bbc>
   13ad4:	ldr	r1, [r4, #24]
   13ad8:	mov	r0, #3
   13adc:	mov	r2, r5
   13ae0:	bl	10f50 <__lxstat64@plt>
   13ae4:	cmp	r0, #0
   13ae8:	bne	13b2c <__assert_fail@plt+0x2bb8>
   13aec:	mov	r0, #0
   13af0:	str	r0, [r6]
   13af4:	mov	r0, #13
   13af8:	sub	sp, fp, #16
   13afc:	pop	{r4, r5, r6, sl, fp, pc}
   13b00:	ldr	r1, [r0, #32]
   13b04:	ldr	r2, [r4, #24]
   13b08:	mov	r0, #256	; 0x100
   13b0c:	mov	r3, r5
   13b10:	str	r0, [sp]
   13b14:	mov	r0, #3
   13b18:	bl	10dac <__fxstatat64@plt>
   13b1c:	cmp	r0, #0
   13b20:	beq	13b80 <__assert_fail@plt+0x2c0c>
   13b24:	bl	10e78 <__errno_location@plt>
   13b28:	mov	r6, r0
   13b2c:	ldr	r0, [r6]
   13b30:	vmov.i32	q8, #0	; 0x00000000
   13b34:	add	r1, r5, #80	; 0x50
   13b38:	str	r0, [r4, #32]
   13b3c:	mov	r0, #0
   13b40:	str	r0, [r5, #96]	; 0x60
   13b44:	vst1.64	{d16-d17}, [r1]
   13b48:	add	r1, r5, #64	; 0x40
   13b4c:	vst1.64	{d16-d17}, [r1]
   13b50:	add	r1, r5, #48	; 0x30
   13b54:	vst1.64	{d16-d17}, [r1]
   13b58:	add	r1, r5, #32
   13b5c:	vst1.64	{d16-d17}, [r1]
   13b60:	add	r1, r5, #16
   13b64:	vst1.64	{d16-d17}, [r1]
   13b68:	mov	r1, #100	; 0x64
   13b6c:	vst1.64	{d16-d17}, [r5], r1
   13b70:	str	r0, [r5]
   13b74:	mov	r0, #10
   13b78:	sub	sp, fp, #16
   13b7c:	pop	{r4, r5, r6, sl, fp, pc}
   13b80:	ldr	r0, [r4, #80]	; 0x50
   13b84:	and	r0, r0, #61440	; 0xf000
   13b88:	cmp	r0, #40960	; 0xa000
   13b8c:	beq	13bf4 <__assert_fail@plt+0x2c80>
   13b90:	cmp	r0, #32768	; 0x8000
   13b94:	beq	13be8 <__assert_fail@plt+0x2c74>
   13b98:	cmp	r0, #16384	; 0x4000
   13b9c:	bne	13c00 <__assert_fail@plt+0x2c8c>
   13ba0:	ldrb	r1, [r4, #168]	; 0xa8
   13ba4:	mov	r0, #1
   13ba8:	cmp	r1, #46	; 0x2e
   13bac:	bne	13c04 <__assert_fail@plt+0x2c90>
   13bb0:	ldrb	r1, [r4, #169]	; 0xa9
   13bb4:	cmp	r1, #0
   13bb8:	beq	13bd0 <__assert_fail@plt+0x2c5c>
   13bbc:	cmp	r1, #46	; 0x2e
   13bc0:	bne	13c04 <__assert_fail@plt+0x2c90>
   13bc4:	ldrb	r1, [r4, #170]	; 0xaa
   13bc8:	cmp	r1, #0
   13bcc:	bne	13c04 <__assert_fail@plt+0x2c90>
   13bd0:	ldr	r1, [r4, #48]	; 0x30
   13bd4:	mov	r0, #5
   13bd8:	cmp	r1, #0
   13bdc:	movweq	r0, #1
   13be0:	sub	sp, fp, #16
   13be4:	pop	{r4, r5, r6, sl, fp, pc}
   13be8:	mov	r0, #8
   13bec:	sub	sp, fp, #16
   13bf0:	pop	{r4, r5, r6, sl, fp, pc}
   13bf4:	mov	r0, #12
   13bf8:	sub	sp, fp, #16
   13bfc:	pop	{r4, r5, r6, sl, fp, pc}
   13c00:	mov	r0, #3
   13c04:	sub	sp, fp, #16
   13c08:	pop	{r4, r5, r6, sl, fp, pc}
   13c0c:	push	{r4, r5, r6, r7, fp, lr}
   13c10:	add	fp, sp, #16
   13c14:	mov	r6, r0
   13c18:	ldr	r7, [r0, #44]	; 0x2c
   13c1c:	ldr	r0, [r0, #40]	; 0x28
   13c20:	mov	r5, r2
   13c24:	mov	r4, r1
   13c28:	cmp	r0, r2
   13c2c:	bcs	13c64 <__assert_fail@plt+0x2cf0>
   13c30:	add	r1, r5, #40	; 0x28
   13c34:	cmn	r1, #-1073741823	; 0xc0000001
   13c38:	str	r1, [r6, #40]	; 0x28
   13c3c:	bhi	13d08 <__assert_fail@plt+0x2d94>
   13c40:	ldr	r0, [r6, #8]
   13c44:	lsl	r1, r1, #2
   13c48:	bl	182b0 <__assert_fail@plt+0x733c>
   13c4c:	cmp	r0, #0
   13c50:	beq	13d08 <__assert_fail@plt+0x2d94>
   13c54:	str	r0, [r6, #8]
   13c58:	cmp	r4, #0
   13c5c:	bne	13c70 <__assert_fail@plt+0x2cfc>
   13c60:	b	13c84 <__assert_fail@plt+0x2d10>
   13c64:	ldr	r0, [r6, #8]
   13c68:	cmp	r4, #0
   13c6c:	beq	13c84 <__assert_fail@plt+0x2d10>
   13c70:	str	r4, [r0], #4
   13c74:	ldr	r4, [r4, #8]
   13c78:	cmp	r4, #0
   13c7c:	bne	13c70 <__assert_fail@plt+0x2cfc>
   13c80:	ldr	r0, [r6, #8]
   13c84:	mov	r1, r5
   13c88:	mov	r2, #4
   13c8c:	mov	r3, r7
   13c90:	bl	10f08 <qsort@plt>
   13c94:	ldr	r0, [r6, #8]
   13c98:	cmp	r5, #1
   13c9c:	ldr	r4, [r0]
   13ca0:	mov	r1, r4
   13ca4:	beq	13d2c <__assert_fail@plt+0x2db8>
   13ca8:	mov	r2, r0
   13cac:	ldr	r1, [r2, #4]!
   13cb0:	str	r1, [r4, #8]
   13cb4:	subs	r1, r5, #2
   13cb8:	beq	13d24 <__assert_fail@plt+0x2db0>
   13cbc:	tst	r1, #1
   13cc0:	beq	13cd8 <__assert_fail@plt+0x2d64>
   13cc4:	ldr	r1, [r0, #8]!
   13cc8:	ldr	r2, [r0, #-4]
   13ccc:	str	r1, [r2, #8]
   13cd0:	sub	r1, r5, #3
   13cd4:	mov	r2, r0
   13cd8:	cmp	r5, #3
   13cdc:	beq	13d28 <__assert_fail@plt+0x2db4>
   13ce0:	mov	r0, r2
   13ce4:	ldm	r2, {r3, r7}
   13ce8:	subs	r1, r1, #2
   13cec:	str	r7, [r3, #8]
   13cf0:	ldr	r3, [r0, #8]!
   13cf4:	ldr	r2, [r2, #4]
   13cf8:	str	r3, [r2, #8]
   13cfc:	mov	r2, r0
   13d00:	bne	13ce4 <__assert_fail@plt+0x2d70>
   13d04:	b	13d28 <__assert_fail@plt+0x2db4>
   13d08:	ldr	r0, [r6, #8]
   13d0c:	bl	13554 <__assert_fail@plt+0x25e0>
   13d10:	mov	r0, #0
   13d14:	str	r0, [r6, #40]	; 0x28
   13d18:	str	r0, [r6, #8]
   13d1c:	mov	r0, r4
   13d20:	pop	{r4, r5, r6, r7, fp, pc}
   13d24:	mov	r0, r2
   13d28:	ldr	r1, [r0]
   13d2c:	mov	r0, #0
   13d30:	str	r0, [r1, #8]
   13d34:	mov	r0, r4
   13d38:	pop	{r4, r5, r6, r7, fp, pc}
   13d3c:	push	{r4, r5, r6, r7, fp, lr}
   13d40:	add	fp, sp, #16
   13d44:	mov	r4, r0
   13d48:	ldr	r0, [r0]
   13d4c:	cmp	r0, #0
   13d50:	beq	13d90 <__assert_fail@plt+0x2e1c>
   13d54:	ldr	r1, [r0, #48]	; 0x30
   13d58:	cmp	r1, #0
   13d5c:	bmi	13d84 <__assert_fail@plt+0x2e10>
   13d60:	ldr	r5, [r0, #8]
   13d64:	cmp	r5, #0
   13d68:	ldreq	r5, [r0, #4]
   13d6c:	bl	13554 <__assert_fail@plt+0x25e0>
   13d70:	ldr	r0, [r5, #48]	; 0x30
   13d74:	cmn	r0, #1
   13d78:	mov	r0, r5
   13d7c:	bgt	13d60 <__assert_fail@plt+0x2dec>
   13d80:	b	13d88 <__assert_fail@plt+0x2e14>
   13d84:	mov	r5, r0
   13d88:	mov	r0, r5
   13d8c:	bl	13554 <__assert_fail@plt+0x25e0>
   13d90:	ldr	r5, [r4, #4]
   13d94:	cmp	r5, #0
   13d98:	bne	13db4 <__assert_fail@plt+0x2e40>
   13d9c:	b	13dcc <__assert_fail@plt+0x2e58>
   13da0:	mov	r0, r5
   13da4:	bl	13554 <__assert_fail@plt+0x25e0>
   13da8:	cmp	r6, #0
   13dac:	mov	r5, r6
   13db0:	beq	13dcc <__assert_fail@plt+0x2e58>
   13db4:	ldrd	r6, [r5, #8]
   13db8:	cmp	r7, #0
   13dbc:	beq	13da0 <__assert_fail@plt+0x2e2c>
   13dc0:	mov	r0, r7
   13dc4:	bl	10f5c <closedir@plt>
   13dc8:	b	13da0 <__assert_fail@plt+0x2e2c>
   13dcc:	ldr	r0, [r4, #8]
   13dd0:	bl	13554 <__assert_fail@plt+0x25e0>
   13dd4:	ldr	r0, [r4, #24]
   13dd8:	bl	13554 <__assert_fail@plt+0x25e0>
   13ddc:	ldr	r0, [r4, #48]	; 0x30
   13de0:	tst	r0, #512	; 0x200
   13de4:	bne	13e10 <__assert_fail@plt+0x2e9c>
   13de8:	mov	r6, #0
   13dec:	tst	r0, #4
   13df0:	bne	13e54 <__assert_fail@plt+0x2ee0>
   13df4:	ldr	r0, [r4, #28]
   13df8:	bl	10efc <fchdir@plt>
   13dfc:	cmp	r0, #0
   13e00:	beq	13e30 <__assert_fail@plt+0x2ebc>
   13e04:	bl	10e78 <__errno_location@plt>
   13e08:	ldr	r6, [r0]
   13e0c:	b	13e34 <__assert_fail@plt+0x2ec0>
   13e10:	ldr	r0, [r4, #32]
   13e14:	mov	r6, #0
   13e18:	cmp	r0, #0
   13e1c:	bmi	13e54 <__assert_fail@plt+0x2ee0>
   13e20:	bl	10f44 <close@plt>
   13e24:	cmp	r0, #0
   13e28:	bne	13e4c <__assert_fail@plt+0x2ed8>
   13e2c:	b	13e54 <__assert_fail@plt+0x2ee0>
   13e30:	mov	r6, #0
   13e34:	ldr	r0, [r4, #28]
   13e38:	bl	10f44 <close@plt>
   13e3c:	cmp	r6, #0
   13e40:	bne	13e54 <__assert_fail@plt+0x2ee0>
   13e44:	cmp	r0, #0
   13e48:	beq	13e54 <__assert_fail@plt+0x2ee0>
   13e4c:	bl	10e78 <__errno_location@plt>
   13e50:	ldr	r6, [r0]
   13e54:	add	r5, r4, #60	; 0x3c
   13e58:	mov	r0, r5
   13e5c:	bl	18014 <__assert_fail@plt+0x70a0>
   13e60:	cmp	r0, #0
   13e64:	bne	13e80 <__assert_fail@plt+0x2f0c>
   13e68:	mov	r0, r5
   13e6c:	bl	18068 <__assert_fail@plt+0x70f4>
   13e70:	cmp	r0, #0
   13e74:	bmi	13e58 <__assert_fail@plt+0x2ee4>
   13e78:	bl	10f44 <close@plt>
   13e7c:	b	13e58 <__assert_fail@plt+0x2ee4>
   13e80:	ldr	r0, [r4, #52]	; 0x34
   13e84:	cmp	r0, #0
   13e88:	beq	13e90 <__assert_fail@plt+0x2f1c>
   13e8c:	bl	174b8 <__assert_fail@plt+0x6544>
   13e90:	ldrh	r0, [r4, #48]	; 0x30
   13e94:	movw	r1, #258	; 0x102
   13e98:	tst	r0, r1
   13e9c:	beq	13eb4 <__assert_fail@plt+0x2f40>
   13ea0:	ldr	r0, [r4, #56]	; 0x38
   13ea4:	cmp	r0, #0
   13ea8:	beq	13ebc <__assert_fail@plt+0x2f48>
   13eac:	bl	174b8 <__assert_fail@plt+0x6544>
   13eb0:	b	13ebc <__assert_fail@plt+0x2f48>
   13eb4:	ldr	r0, [r4, #56]	; 0x38
   13eb8:	bl	13554 <__assert_fail@plt+0x25e0>
   13ebc:	mov	r0, r4
   13ec0:	bl	13554 <__assert_fail@plt+0x25e0>
   13ec4:	cmp	r6, #0
   13ec8:	beq	13edc <__assert_fail@plt+0x2f68>
   13ecc:	bl	10e78 <__errno_location@plt>
   13ed0:	str	r6, [r0]
   13ed4:	mvn	r0, #0
   13ed8:	pop	{r4, r5, r6, r7, fp, pc}
   13edc:	mov	r0, #0
   13ee0:	pop	{r4, r5, r6, r7, fp, pc}
   13ee4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ee8:	add	fp, sp, #24
   13eec:	sub	sp, sp, #8
   13ef0:	ldr	r6, [r0]
   13ef4:	mov	r5, #0
   13ef8:	cmp	r6, #0
   13efc:	beq	1463c <__assert_fail@plt+0x36c8>
   13f00:	mov	r4, r0
   13f04:	ldr	r0, [r0, #48]	; 0x30
   13f08:	tst	r0, #8192	; 0x2000
   13f0c:	bne	1463c <__assert_fail@plt+0x36c8>
   13f10:	ldrh	r1, [r6, #60]	; 0x3c
   13f14:	mov	r2, #3
   13f18:	strh	r2, [r6, #60]	; 0x3c
   13f1c:	cmp	r1, #1
   13f20:	beq	13f90 <__assert_fail@plt+0x301c>
   13f24:	cmp	r1, #2
   13f28:	bne	13fac <__assert_fail@plt+0x3038>
   13f2c:	ldrh	r2, [r6, #56]	; 0x38
   13f30:	bic	r3, r2, #1
   13f34:	cmp	r3, #12
   13f38:	bne	13fb0 <__assert_fail@plt+0x303c>
   13f3c:	mov	r0, r4
   13f40:	mov	r1, r6
   13f44:	mov	r2, #1
   13f48:	bl	13a74 <__assert_fail@plt+0x2b00>
   13f4c:	cmp	r0, #1
   13f50:	strh	r0, [r6, #56]	; 0x38
   13f54:	bne	140a0 <__assert_fail@plt+0x312c>
   13f58:	ldr	r0, [r4, #48]	; 0x30
   13f5c:	tst	r0, #4
   13f60:	bne	140a0 <__assert_fail@plt+0x312c>
   13f64:	mov	r1, #32768	; 0x8000
   13f68:	tst	r0, #512	; 0x200
   13f6c:	and	r1, r1, r0, lsl #11
   13f70:	orr	r1, r1, #18688	; 0x4900
   13f74:	orr	r2, r1, #524288	; 0x80000
   13f78:	bne	14284 <__assert_fail@plt+0x3310>
   13f7c:	movw	r0, #35307	; 0x89eb
   13f80:	mov	r1, r2
   13f84:	movt	r0, #1
   13f88:	bl	185d4 <__assert_fail@plt+0x7660>
   13f8c:	b	14294 <__assert_fail@plt+0x3320>
   13f90:	mov	r0, r4
   13f94:	mov	r1, r6
   13f98:	mov	r2, #0
   13f9c:	bl	13a74 <__assert_fail@plt+0x2b00>
   13fa0:	strh	r0, [r6, #56]	; 0x38
   13fa4:	mov	r5, r6
   13fa8:	b	1463c <__assert_fail@plt+0x36c8>
   13fac:	ldrh	r2, [r6, #56]	; 0x38
   13fb0:	cmp	r2, #1
   13fb4:	bne	14010 <__assert_fail@plt+0x309c>
   13fb8:	cmp	r1, #4
   13fbc:	bne	140a8 <__assert_fail@plt+0x3134>
   13fc0:	ldrb	r0, [r6, #58]	; 0x3a
   13fc4:	tst	r0, #2
   13fc8:	beq	13fd4 <__assert_fail@plt+0x3060>
   13fcc:	ldr	r0, [r6, #36]	; 0x24
   13fd0:	bl	10f44 <close@plt>
   13fd4:	ldr	r5, [r4, #4]
   13fd8:	cmp	r5, #0
   13fdc:	bne	13ff8 <__assert_fail@plt+0x3084>
   13fe0:	b	14140 <__assert_fail@plt+0x31cc>
   13fe4:	mov	r0, r5
   13fe8:	bl	13554 <__assert_fail@plt+0x25e0>
   13fec:	cmp	r8, #0
   13ff0:	mov	r5, r8
   13ff4:	beq	14138 <__assert_fail@plt+0x31c4>
   13ff8:	ldrd	r8, [r5, #8]
   13ffc:	cmp	r9, #0
   14000:	beq	13fe4 <__assert_fail@plt+0x3070>
   14004:	mov	r0, r9
   14008:	bl	10f5c <closedir@plt>
   1400c:	b	13fe4 <__assert_fail@plt+0x3070>
   14010:	ldr	r5, [r6, #8]
   14014:	cmp	r5, #0
   14018:	beq	1415c <__assert_fail@plt+0x31e8>
   1401c:	mov	r0, r6
   14020:	str	r5, [r4]
   14024:	bl	13554 <__assert_fail@plt+0x25e0>
   14028:	ldr	r0, [r5, #48]	; 0x30
   1402c:	cmp	r0, #0
   14030:	beq	141a8 <__assert_fail@plt+0x3234>
   14034:	ldrh	r0, [r5, #60]	; 0x3c
   14038:	mov	r6, r5
   1403c:	cmp	r0, #4
   14040:	beq	14010 <__assert_fail@plt+0x309c>
   14044:	cmp	r0, #2
   14048:	bne	14504 <__assert_fail@plt+0x3590>
   1404c:	mov	r0, r4
   14050:	mov	r1, r5
   14054:	mov	r2, #1
   14058:	bl	13a74 <__assert_fail@plt+0x2b00>
   1405c:	cmp	r0, #1
   14060:	strh	r0, [r5, #56]	; 0x38
   14064:	bne	144fc <__assert_fail@plt+0x3588>
   14068:	ldr	r0, [r4, #48]	; 0x30
   1406c:	tst	r0, #4
   14070:	bne	144fc <__assert_fail@plt+0x3588>
   14074:	mov	r1, #32768	; 0x8000
   14078:	tst	r0, #512	; 0x200
   1407c:	and	r1, r1, r0, lsl #11
   14080:	orr	r1, r1, #18688	; 0x4900
   14084:	orr	r2, r1, #524288	; 0x80000
   14088:	bne	144bc <__assert_fail@plt+0x3548>
   1408c:	movw	r0, #35307	; 0x89eb
   14090:	mov	r1, r2
   14094:	movt	r0, #1
   14098:	bl	185d4 <__assert_fail@plt+0x7660>
   1409c:	b	144cc <__assert_fail@plt+0x3558>
   140a0:	mov	r5, r6
   140a4:	b	14540 <__assert_fail@plt+0x35cc>
   140a8:	tst	r0, #64	; 0x40
   140ac:	beq	140c8 <__assert_fail@plt+0x3154>
   140b0:	ldrd	r2, [r4, #16]
   140b4:	ldrd	r8, [r6, #64]	; 0x40
   140b8:	eor	r1, r9, r3
   140bc:	eor	r2, r8, r2
   140c0:	orrs	r1, r2, r1
   140c4:	bne	13fc0 <__assert_fail@plt+0x304c>
   140c8:	ldr	r5, [r4, #4]
   140cc:	cmp	r5, #0
   140d0:	beq	1422c <__assert_fail@plt+0x32b8>
   140d4:	tst	r0, #4096	; 0x1000
   140d8:	bne	141ec <__assert_fail@plt+0x3278>
   140dc:	ldr	r3, [r6, #24]
   140e0:	mov	r0, r4
   140e4:	mov	r1, r6
   140e8:	mvn	r2, #0
   140ec:	bl	14728 <__assert_fail@plt+0x37b4>
   140f0:	cmp	r0, #0
   140f4:	beq	14244 <__assert_fail@plt+0x32d0>
   140f8:	bl	10e78 <__errno_location@plt>
   140fc:	ldr	r0, [r0]
   14100:	str	r0, [r6, #32]
   14104:	ldrh	r0, [r6, #58]	; 0x3a
   14108:	orr	r0, r0, #1
   1410c:	strh	r0, [r6, #58]	; 0x3a
   14110:	ldr	r0, [r4, #4]
   14114:	cmp	r0, #0
   14118:	beq	14244 <__assert_fail@plt+0x32d0>
   1411c:	ldmib	r0, {r1, r2}
   14120:	cmp	r2, #0
   14124:	ldr	r1, [r1, #24]
   14128:	str	r1, [r0, #24]
   1412c:	mov	r0, r2
   14130:	bne	1411c <__assert_fail@plt+0x31a8>
   14134:	b	14244 <__assert_fail@plt+0x32d0>
   14138:	mov	r0, #0
   1413c:	str	r0, [r4, #4]
   14140:	mov	r0, #6
   14144:	strh	r0, [r6, #56]	; 0x38
   14148:	mov	r0, r4
   1414c:	mov	r1, r6
   14150:	bl	1464c <__assert_fail@plt+0x36d8>
   14154:	mov	r5, r6
   14158:	b	1463c <__assert_fail@plt+0x36c8>
   1415c:	ldr	r5, [r6, #4]
   14160:	ldr	r0, [r5, #12]
   14164:	cmp	r0, #0
   14168:	beq	142c4 <__assert_fail@plt+0x3350>
   1416c:	str	r5, [r4]
   14170:	ldr	r1, [r5, #40]	; 0x28
   14174:	ldr	r0, [r4, #24]
   14178:	mov	r5, #0
   1417c:	strb	r5, [r0, r1]
   14180:	mov	r0, r4
   14184:	mov	r1, #3
   14188:	bl	14988 <__assert_fail@plt+0x3a14>
   1418c:	cmp	r0, #0
   14190:	beq	142b4 <__assert_fail@plt+0x3340>
   14194:	mov	r7, r0
   14198:	mov	r0, r6
   1419c:	bl	13554 <__assert_fail@plt+0x25e0>
   141a0:	mov	r5, r7
   141a4:	b	14504 <__assert_fail@plt+0x3590>
   141a8:	mov	r0, r4
   141ac:	bl	15418 <__assert_fail@plt+0x44a4>
   141b0:	ldr	r1, [r4, #48]	; 0x30
   141b4:	cmp	r0, #0
   141b8:	beq	141cc <__assert_fail@plt+0x3258>
   141bc:	orr	r0, r1, #8192	; 0x2000
   141c0:	mov	r5, #0
   141c4:	str	r0, [r4, #48]	; 0x30
   141c8:	b	1463c <__assert_fail@plt+0x36c8>
   141cc:	movw	r0, #258	; 0x102
   141d0:	tst	r1, r0
   141d4:	beq	14374 <__assert_fail@plt+0x3400>
   141d8:	ldr	r0, [r4, #56]	; 0x38
   141dc:	cmp	r0, #0
   141e0:	beq	1437c <__assert_fail@plt+0x3408>
   141e4:	bl	174b8 <__assert_fail@plt+0x6544>
   141e8:	b	1437c <__assert_fail@plt+0x3408>
   141ec:	bic	r0, r0, #4096	; 0x1000
   141f0:	str	r0, [r4, #48]	; 0x30
   141f4:	b	1420c <__assert_fail@plt+0x3298>
   141f8:	mov	r0, r5
   141fc:	bl	13554 <__assert_fail@plt+0x25e0>
   14200:	cmp	r8, #0
   14204:	mov	r5, r8
   14208:	beq	14224 <__assert_fail@plt+0x32b0>
   1420c:	ldrd	r8, [r5, #8]
   14210:	cmp	r9, #0
   14214:	beq	141f8 <__assert_fail@plt+0x3284>
   14218:	mov	r0, r9
   1421c:	bl	10f5c <closedir@plt>
   14220:	b	141f8 <__assert_fail@plt+0x3284>
   14224:	mov	r0, #0
   14228:	str	r0, [r4, #4]
   1422c:	mov	r0, r4
   14230:	mov	r1, #3
   14234:	bl	14988 <__assert_fail@plt+0x3a14>
   14238:	cmp	r0, #0
   1423c:	str	r0, [r4, #4]
   14240:	beq	14254 <__assert_fail@plt+0x32e0>
   14244:	ldr	r5, [r4, #4]
   14248:	mov	r0, #0
   1424c:	str	r0, [r4, #4]
   14250:	b	14504 <__assert_fail@plt+0x3590>
   14254:	ldrb	r0, [r4, #49]	; 0x31
   14258:	mov	r5, #0
   1425c:	tst	r0, #32
   14260:	bne	1463c <__assert_fail@plt+0x36c8>
   14264:	ldr	r0, [r6, #32]
   14268:	cmp	r0, #0
   1426c:	beq	14148 <__assert_fail@plt+0x31d4>
   14270:	ldrh	r0, [r6, #56]	; 0x38
   14274:	cmp	r0, #4
   14278:	beq	14148 <__assert_fail@plt+0x31d4>
   1427c:	mov	r0, #7
   14280:	b	14144 <__assert_fail@plt+0x31d0>
   14284:	ldr	r0, [r4, #32]
   14288:	movw	r1, #35307	; 0x89eb
   1428c:	movt	r1, #1
   14290:	bl	1814c <__assert_fail@plt+0x71d8>
   14294:	cmn	r0, #1
   14298:	str	r0, [r6, #36]	; 0x24
   1429c:	ble	14358 <__assert_fail@plt+0x33e4>
   142a0:	ldrh	r0, [r6, #58]	; 0x3a
   142a4:	mov	r5, r6
   142a8:	orr	r0, r0, #2
   142ac:	strh	r0, [r6, #58]	; 0x3a
   142b0:	b	14540 <__assert_fail@plt+0x35cc>
   142b4:	ldrb	r0, [r4, #49]	; 0x31
   142b8:	tst	r0, #32
   142bc:	bne	1463c <__assert_fail@plt+0x36c8>
   142c0:	ldr	r5, [r6, #4]
   142c4:	mov	r0, r6
   142c8:	str	r5, [r4]
   142cc:	bl	13554 <__assert_fail@plt+0x25e0>
   142d0:	ldr	r0, [r5, #48]	; 0x30
   142d4:	cmn	r0, #1
   142d8:	beq	1433c <__assert_fail@plt+0x33c8>
   142dc:	ldrh	r0, [r5, #56]	; 0x38
   142e0:	cmp	r0, #11
   142e4:	beq	14648 <__assert_fail@plt+0x36d4>
   142e8:	ldr	r0, [r5, #40]	; 0x28
   142ec:	ldr	r1, [r4, #24]
   142f0:	mov	r2, #0
   142f4:	strb	r2, [r1, r0]
   142f8:	ldr	r0, [r5, #48]	; 0x30
   142fc:	cmp	r0, #0
   14300:	beq	1444c <__assert_fail@plt+0x34d8>
   14304:	ldrh	r0, [r5, #58]	; 0x3a
   14308:	tst	r0, #2
   1430c:	bne	14478 <__assert_fail@plt+0x3504>
   14310:	tst	r0, #1
   14314:	bne	14600 <__assert_fail@plt+0x368c>
   14318:	ldr	r1, [r5, #4]
   1431c:	movw	r3, #35306	; 0x89ea
   14320:	mov	r0, r4
   14324:	mvn	r2, #0
   14328:	movt	r3, #1
   1432c:	bl	14728 <__assert_fail@plt+0x37b4>
   14330:	cmp	r0, #0
   14334:	bne	1445c <__assert_fail@plt+0x34e8>
   14338:	b	14600 <__assert_fail@plt+0x368c>
   1433c:	mov	r0, r5
   14340:	bl	13554 <__assert_fail@plt+0x25e0>
   14344:	bl	10e78 <__errno_location@plt>
   14348:	mov	r5, #0
   1434c:	str	r5, [r0]
   14350:	str	r5, [r4]
   14354:	b	1463c <__assert_fail@plt+0x36c8>
   14358:	bl	10e78 <__errno_location@plt>
   1435c:	ldr	r0, [r0]
   14360:	mov	r1, #7
   14364:	mov	r5, r6
   14368:	strh	r1, [r6, #56]	; 0x38
   1436c:	str	r0, [r6, #32]
   14370:	b	14540 <__assert_fail@plt+0x35cc>
   14374:	ldr	r0, [r4, #56]	; 0x38
   14378:	bl	13554 <__assert_fail@plt+0x25e0>
   1437c:	ldr	r1, [r5, #52]	; 0x34
   14380:	add	r6, r5, #168	; 0xa8
   14384:	str	r1, [r5, #40]	; 0x28
   14388:	add	r2, r1, #1
   1438c:	mov	r1, r6
   14390:	ldr	r0, [r4, #24]
   14394:	bl	10d58 <memmove@plt>
   14398:	mov	r0, r6
   1439c:	mov	r1, #47	; 0x2f
   143a0:	bl	10ea8 <strrchr@plt>
   143a4:	cmp	r0, #0
   143a8:	beq	143e4 <__assert_fail@plt+0x3470>
   143ac:	cmp	r0, r6
   143b0:	bne	143c0 <__assert_fail@plt+0x344c>
   143b4:	ldrb	r1, [r5, #169]	; 0xa9
   143b8:	cmp	r1, #0
   143bc:	beq	143e4 <__assert_fail@plt+0x3470>
   143c0:	add	r7, r0, #1
   143c4:	mov	r0, r7
   143c8:	bl	10e48 <strlen@plt>
   143cc:	mov	r8, r0
   143d0:	add	r2, r0, #1
   143d4:	mov	r0, r6
   143d8:	mov	r1, r7
   143dc:	bl	10d58 <memmove@plt>
   143e0:	str	r8, [r5, #52]	; 0x34
   143e4:	ldr	r0, [r4, #24]
   143e8:	movw	r1, #258	; 0x102
   143ec:	str	r0, [r5, #24]
   143f0:	str	r0, [r5, #28]
   143f4:	ldrh	r0, [r4, #48]	; 0x30
   143f8:	tst	r0, r1
   143fc:	beq	14430 <__assert_fail@plt+0x34bc>
   14400:	movw	r0, #13652	; 0x3554
   14404:	movw	r2, #22400	; 0x5780
   14408:	movw	r3, #22432	; 0x57a0
   1440c:	mov	r1, #0
   14410:	movt	r0, #1
   14414:	movt	r2, #1
   14418:	movt	r3, #1
   1441c:	str	r0, [sp]
   14420:	mov	r0, #31
   14424:	bl	171b4 <__assert_fail@plt+0x6240>
   14428:	str	r0, [r4, #56]	; 0x38
   1442c:	b	14540 <__assert_fail@plt+0x35cc>
   14430:	mov	r0, #32
   14434:	bl	18280 <__assert_fail@plt+0x730c>
   14438:	cmp	r0, #0
   1443c:	str	r0, [r4, #56]	; 0x38
   14440:	beq	14540 <__assert_fail@plt+0x35cc>
   14444:	bl	18304 <__assert_fail@plt+0x7390>
   14448:	b	14540 <__assert_fail@plt+0x35cc>
   1444c:	mov	r0, r4
   14450:	bl	15418 <__assert_fail@plt+0x44a4>
   14454:	cmp	r0, #0
   14458:	beq	14600 <__assert_fail@plt+0x368c>
   1445c:	bl	10e78 <__errno_location@plt>
   14460:	ldr	r0, [r0]
   14464:	str	r0, [r5, #32]
   14468:	ldr	r0, [r4, #48]	; 0x30
   1446c:	orr	r0, r0, #8192	; 0x2000
   14470:	str	r0, [r4, #48]	; 0x30
   14474:	b	14600 <__assert_fail@plt+0x368c>
   14478:	ldr	r0, [r4, #48]	; 0x30
   1447c:	tst	r0, #4
   14480:	bne	145f8 <__assert_fail@plt+0x3684>
   14484:	ldr	r6, [r5, #36]	; 0x24
   14488:	tst	r0, #512	; 0x200
   1448c:	bne	145cc <__assert_fail@plt+0x3658>
   14490:	mov	r0, r6
   14494:	bl	10efc <fchdir@plt>
   14498:	cmp	r0, #0
   1449c:	beq	145f8 <__assert_fail@plt+0x3684>
   144a0:	bl	10e78 <__errno_location@plt>
   144a4:	ldr	r0, [r0]
   144a8:	str	r0, [r5, #32]
   144ac:	ldr	r0, [r4, #48]	; 0x30
   144b0:	orr	r0, r0, #8192	; 0x2000
   144b4:	str	r0, [r4, #48]	; 0x30
   144b8:	b	145f8 <__assert_fail@plt+0x3684>
   144bc:	ldr	r0, [r4, #32]
   144c0:	movw	r1, #35307	; 0x89eb
   144c4:	movt	r1, #1
   144c8:	bl	1814c <__assert_fail@plt+0x71d8>
   144cc:	cmn	r0, #1
   144d0:	str	r0, [r5, #36]	; 0x24
   144d4:	ble	144e8 <__assert_fail@plt+0x3574>
   144d8:	ldrh	r0, [r5, #58]	; 0x3a
   144dc:	orr	r0, r0, #2
   144e0:	strh	r0, [r5, #58]	; 0x3a
   144e4:	b	144fc <__assert_fail@plt+0x3588>
   144e8:	bl	10e78 <__errno_location@plt>
   144ec:	ldr	r0, [r0]
   144f0:	mov	r1, #7
   144f4:	strh	r1, [r5, #56]	; 0x38
   144f8:	str	r0, [r5, #32]
   144fc:	mov	r0, #3
   14500:	strh	r0, [r5, #60]	; 0x3c
   14504:	ldr	r0, [r5, #4]
   14508:	ldr	r1, [r0, #28]
   1450c:	ldr	r0, [r0, #40]	; 0x28
   14510:	sub	r2, r0, #1
   14514:	ldrb	r1, [r1, r2]
   14518:	cmp	r1, #47	; 0x2f
   1451c:	ldr	r1, [r4, #24]
   14520:	moveq	r0, r2
   14524:	mov	r2, #47	; 0x2f
   14528:	strb	r2, [r1, r0]!
   1452c:	ldr	r2, [r5, #52]	; 0x34
   14530:	add	r0, r1, #1
   14534:	add	r1, r5, #168	; 0xa8
   14538:	add	r2, r2, #1
   1453c:	bl	10d58 <memmove@plt>
   14540:	str	r5, [r4]
   14544:	ldrh	r0, [r5, #56]	; 0x38
   14548:	cmp	r0, #11
   1454c:	bne	14584 <__assert_fail@plt+0x3610>
   14550:	add	r0, r5, #112	; 0x70
   14554:	ldrd	r0, [r0]
   14558:	eor	r2, r0, #1
   1455c:	orrs	r2, r2, r1
   14560:	beq	1463c <__assert_fail@plt+0x36c8>
   14564:	eor	r0, r0, #2
   14568:	orrs	r0, r0, r1
   1456c:	bne	14648 <__assert_fail@plt+0x36d4>
   14570:	mov	r0, r4
   14574:	mov	r1, r5
   14578:	mov	r2, #0
   1457c:	bl	13a74 <__assert_fail@plt+0x2b00>
   14580:	strh	r0, [r5, #56]	; 0x38
   14584:	cmp	r0, #1
   14588:	bne	1463c <__assert_fail@plt+0x36c8>
   1458c:	ldr	r0, [r5, #48]	; 0x30
   14590:	cmp	r0, #0
   14594:	bne	145a4 <__assert_fail@plt+0x3630>
   14598:	add	r0, r5, #64	; 0x40
   1459c:	ldrd	r0, [r0]
   145a0:	strd	r0, [r4, #16]
   145a4:	mov	r0, r4
   145a8:	mov	r1, r5
   145ac:	bl	154a8 <__assert_fail@plt+0x4534>
   145b0:	cmp	r0, #0
   145b4:	bne	1463c <__assert_fail@plt+0x36c8>
   145b8:	bl	10e78 <__errno_location@plt>
   145bc:	mov	r1, #12
   145c0:	mov	r5, #0
   145c4:	str	r1, [r0]
   145c8:	b	1463c <__assert_fail@plt+0x36c8>
   145cc:	ldr	r1, [r4, #32]
   145d0:	cmp	r1, r6
   145d4:	bne	145e0 <__assert_fail@plt+0x366c>
   145d8:	cmn	r1, #100	; 0x64
   145dc:	bne	14648 <__assert_fail@plt+0x36d4>
   145e0:	add	r0, r4, #60	; 0x3c
   145e4:	bl	1801c <__assert_fail@plt+0x70a8>
   145e8:	cmp	r0, #0
   145ec:	bmi	145f4 <__assert_fail@plt+0x3680>
   145f0:	bl	10f44 <close@plt>
   145f4:	str	r6, [r4, #32]
   145f8:	ldr	r0, [r5, #36]	; 0x24
   145fc:	bl	10f44 <close@plt>
   14600:	ldrh	r0, [r5, #56]	; 0x38
   14604:	cmp	r0, #2
   14608:	beq	14630 <__assert_fail@plt+0x36bc>
   1460c:	ldr	r0, [r5, #32]
   14610:	mov	r1, #7
   14614:	cmp	r0, #0
   14618:	movweq	r1, #6
   1461c:	strh	r1, [r5, #56]	; 0x38
   14620:	bne	14630 <__assert_fail@plt+0x36bc>
   14624:	mov	r0, r4
   14628:	mov	r1, r5
   1462c:	bl	1464c <__assert_fail@plt+0x36d8>
   14630:	ldrb	r0, [r4, #49]	; 0x31
   14634:	tst	r0, #32
   14638:	movne	r5, #0
   1463c:	mov	r0, r5
   14640:	sub	sp, fp, #24
   14644:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14648:	bl	10f38 <abort@plt>
   1464c:	push	{r4, r5, r7, sl, fp, lr}
   14650:	add	fp, sp, #16
   14654:	sub	sp, sp, #24
   14658:	ldrh	r2, [r0, #48]	; 0x30
   1465c:	movw	r3, #258	; 0x102
   14660:	add	lr, r1, #64	; 0x40
   14664:	add	r4, r1, #160	; 0xa0
   14668:	tst	r2, r3
   1466c:	beq	146a4 <__assert_fail@plt+0x3730>
   14670:	ldrd	r2, [lr]
   14674:	mov	r1, sp
   14678:	stm	sp, {r2, r3}
   1467c:	ldrd	r2, [r4]
   14680:	str	r3, [sp, #12]
   14684:	str	r2, [sp, #8]
   14688:	ldr	r0, [r0, #56]	; 0x38
   1468c:	bl	17d48 <__assert_fail@plt+0x6dd4>
   14690:	cmp	r0, #0
   14694:	beq	14724 <__assert_fail@plt+0x37b0>
   14698:	bl	13554 <__assert_fail@plt+0x25e0>
   1469c:	sub	sp, fp, #16
   146a0:	pop	{r4, r5, r7, sl, fp, pc}
   146a4:	ldr	r1, [r1, #4]
   146a8:	cmp	r1, #0
   146ac:	beq	1471c <__assert_fail@plt+0x37a8>
   146b0:	ldr	r2, [r1, #48]	; 0x30
   146b4:	cmp	r2, #0
   146b8:	bmi	1471c <__assert_fail@plt+0x37a8>
   146bc:	ldr	ip, [r0, #56]	; 0x38
   146c0:	ldrd	r2, [ip, #16]
   146c4:	orrs	r2, r2, r3
   146c8:	beq	14724 <__assert_fail@plt+0x37b0>
   146cc:	ldrd	r2, [r4]
   146d0:	ldrd	r4, [ip]
   146d4:	eor	r3, r5, r3
   146d8:	eor	r2, r4, r2
   146dc:	orrs	r2, r2, r3
   146e0:	bne	1471c <__assert_fail@plt+0x37a8>
   146e4:	add	r3, ip, #8
   146e8:	ldm	lr, {r2, r5}
   146ec:	ldm	r3, {r4, r7}
   146f0:	eor	r7, r7, r5
   146f4:	eor	r2, r4, r2
   146f8:	orrs	r2, r2, r7
   146fc:	bne	1471c <__assert_fail@plt+0x37a8>
   14700:	add	r2, r1, #64	; 0x40
   14704:	add	r1, r1, #160	; 0xa0
   14708:	ldm	r2, {r2, r5}
   1470c:	stm	r3, {r2, r5}
   14710:	ldr	r0, [r0, #56]	; 0x38
   14714:	ldrd	r2, [r1]
   14718:	strd	r2, [r0]
   1471c:	sub	sp, fp, #16
   14720:	pop	{r4, r5, r7, sl, fp, pc}
   14724:	bl	10f38 <abort@plt>
   14728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1472c:	add	fp, sp, #28
   14730:	sub	sp, sp, #108	; 0x6c
   14734:	mov	r7, r3
   14738:	mov	r4, r2
   1473c:	mov	r8, r1
   14740:	mov	sl, r0
   14744:	cmp	r3, #0
   14748:	beq	1476c <__assert_fail@plt+0x37f8>
   1474c:	movw	r1, #35306	; 0x89ea
   14750:	mov	r0, r7
   14754:	movt	r1, #1
   14758:	bl	10d1c <strcmp@plt>
   1475c:	cmp	r0, #0
   14760:	mov	r6, r0
   14764:	movwne	r6, #1
   14768:	b	14770 <__assert_fail@plt+0x37fc>
   1476c:	mov	r6, #1
   14770:	ldr	r0, [sl, #48]	; 0x30
   14774:	tst	r0, #4
   14778:	bne	147d0 <__assert_fail@plt+0x385c>
   1477c:	cmn	r4, #1
   14780:	mov	r1, #0
   14784:	mov	r9, #0
   14788:	movwgt	r1, #1
   1478c:	orrs	r1, r1, r6
   14790:	bne	147f0 <__assert_fail@plt+0x387c>
   14794:	ands	r0, r0, #512	; 0x200
   14798:	beq	147f0 <__assert_fail@plt+0x387c>
   1479c:	add	r4, sl, #60	; 0x3c
   147a0:	mov	r0, r4
   147a4:	bl	18014 <__assert_fail@plt+0x70a0>
   147a8:	cmp	r0, #0
   147ac:	bne	147f8 <__assert_fail@plt+0x3884>
   147b0:	mov	r0, r4
   147b4:	bl	18068 <__assert_fail@plt+0x70f4>
   147b8:	cmn	r0, #1
   147bc:	ble	147f8 <__assert_fail@plt+0x3884>
   147c0:	mov	r4, r0
   147c4:	mov	r9, #0
   147c8:	mov	r7, #0
   147cc:	b	14840 <__assert_fail@plt+0x38cc>
   147d0:	mov	r5, #0
   147d4:	cmp	r4, #0
   147d8:	bmi	14978 <__assert_fail@plt+0x3a04>
   147dc:	ands	r0, r0, #512	; 0x200
   147e0:	beq	14978 <__assert_fail@plt+0x3a04>
   147e4:	mov	r0, r4
   147e8:	bl	10f44 <close@plt>
   147ec:	b	14978 <__assert_fail@plt+0x3a04>
   147f0:	cmn	r4, #1
   147f4:	bgt	14840 <__assert_fail@plt+0x38cc>
   147f8:	ldr	r0, [sl, #48]	; 0x30
   147fc:	mov	r1, #32768	; 0x8000
   14800:	and	r1, r1, r0, lsl #11
   14804:	tst	r0, #512	; 0x200
   14808:	orr	r1, r1, #18688	; 0x4900
   1480c:	orr	r2, r1, #524288	; 0x80000
   14810:	bne	14824 <__assert_fail@plt+0x38b0>
   14814:	mov	r0, r7
   14818:	mov	r1, r2
   1481c:	bl	185d4 <__assert_fail@plt+0x7660>
   14820:	b	14830 <__assert_fail@plt+0x38bc>
   14824:	ldr	r0, [sl, #32]
   14828:	mov	r1, r7
   1482c:	bl	1814c <__assert_fail@plt+0x71d8>
   14830:	mov	r4, r0
   14834:	mov	r9, #1
   14838:	cmp	r0, #0
   1483c:	bmi	1491c <__assert_fail@plt+0x39a8>
   14840:	ldr	r5, [sl, #48]	; 0x30
   14844:	tst	r5, #2
   14848:	bne	1488c <__assert_fail@plt+0x3918>
   1484c:	cmp	r7, #0
   14850:	beq	1486c <__assert_fail@plt+0x38f8>
   14854:	movw	r1, #35306	; 0x89ea
   14858:	mov	r0, r7
   1485c:	movt	r1, #1
   14860:	bl	10d1c <strcmp@plt>
   14864:	cmp	r0, #0
   14868:	beq	1488c <__assert_fail@plt+0x3918>
   1486c:	tst	r5, #512	; 0x200
   14870:	bne	148ec <__assert_fail@plt+0x3978>
   14874:	mov	r0, r4
   14878:	bl	10efc <fchdir@plt>
   1487c:	mov	r5, r0
   14880:	cmp	r9, #0
   14884:	bne	1493c <__assert_fail@plt+0x39c8>
   14888:	b	14978 <__assert_fail@plt+0x3a04>
   1488c:	mov	r2, sp
   14890:	mov	r0, #3
   14894:	mov	r1, r4
   14898:	bl	10db8 <__fxstat64@plt>
   1489c:	cmp	r0, #0
   148a0:	bne	14930 <__assert_fail@plt+0x39bc>
   148a4:	add	r0, r8, #64	; 0x40
   148a8:	ldm	sp, {r2, r3}
   148ac:	ldrd	r0, [r0]
   148b0:	eor	r1, r1, r3
   148b4:	eor	r0, r0, r2
   148b8:	orrs	r0, r0, r1
   148bc:	bne	14924 <__assert_fail@plt+0x39b0>
   148c0:	add	r0, r8, #160	; 0xa0
   148c4:	ldr	r2, [sp, #96]	; 0x60
   148c8:	ldr	r3, [sp, #100]	; 0x64
   148cc:	ldrd	r0, [r0]
   148d0:	eor	r1, r1, r3
   148d4:	eor	r0, r0, r2
   148d8:	orrs	r0, r0, r1
   148dc:	bne	14924 <__assert_fail@plt+0x39b0>
   148e0:	ldr	r5, [sl, #48]	; 0x30
   148e4:	tst	r5, #512	; 0x200
   148e8:	beq	14874 <__assert_fail@plt+0x3900>
   148ec:	ldr	r1, [sl, #32]
   148f0:	cmp	r1, r4
   148f4:	bne	14900 <__assert_fail@plt+0x398c>
   148f8:	cmn	r1, #100	; 0x64
   148fc:	bne	14984 <__assert_fail@plt+0x3a10>
   14900:	cmp	r6, #0
   14904:	beq	14958 <__assert_fail@plt+0x39e4>
   14908:	add	r0, sl, #60	; 0x3c
   1490c:	bl	1801c <__assert_fail@plt+0x70a8>
   14910:	cmp	r0, #0
   14914:	bpl	1496c <__assert_fail@plt+0x39f8>
   14918:	b	14970 <__assert_fail@plt+0x39fc>
   1491c:	mvn	r5, #0
   14920:	b	14978 <__assert_fail@plt+0x3a04>
   14924:	bl	10e78 <__errno_location@plt>
   14928:	mov	r1, #2
   1492c:	str	r1, [r0]
   14930:	mvn	r5, #0
   14934:	cmp	r9, #0
   14938:	beq	14978 <__assert_fail@plt+0x3a04>
   1493c:	bl	10e78 <__errno_location@plt>
   14940:	ldr	r7, [r0]
   14944:	mov	r6, r0
   14948:	mov	r0, r4
   1494c:	bl	10f44 <close@plt>
   14950:	str	r7, [r6]
   14954:	b	14978 <__assert_fail@plt+0x3a04>
   14958:	tst	r5, #4
   1495c:	bne	14970 <__assert_fail@plt+0x39fc>
   14960:	cmp	r1, #0
   14964:	bmi	14970 <__assert_fail@plt+0x39fc>
   14968:	mov	r0, r1
   1496c:	bl	10f44 <close@plt>
   14970:	str	r4, [sl, #32]
   14974:	mov	r5, #0
   14978:	mov	r0, r5
   1497c:	sub	sp, fp, #28
   14980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14984:	bl	10f38 <abort@plt>
   14988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1498c:	add	fp, sp, #28
   14990:	sub	sp, sp, #68	; 0x44
   14994:	ldr	sl, [r0]
   14998:	mov	r7, r1
   1499c:	mov	r5, r0
   149a0:	str	r0, [sp, #48]	; 0x30
   149a4:	ldr	r4, [sl, #12]
   149a8:	cmp	r4, #0
   149ac:	beq	149f4 <__assert_fail@plt+0x3a80>
   149b0:	mov	r0, r4
   149b4:	bl	10ee4 <dirfd@plt>
   149b8:	cmn	r0, #1
   149bc:	str	r0, [fp, #-32]	; 0xffffffe0
   149c0:	ble	14a28 <__assert_fail@plt+0x3ab4>
   149c4:	mov	r1, r5
   149c8:	str	r4, [sp, #12]
   149cc:	str	r7, [sp, #4]
   149d0:	mov	ip, #0
   149d4:	ldr	r0, [r1, #44]!	; 0x2c
   149d8:	str	r1, [sp, #20]
   149dc:	mvn	r1, #0
   149e0:	cmp	r0, #0
   149e4:	movweq	r1, #34464	; 0x86a0
   149e8:	movteq	r1, #1
   149ec:	str	r1, [sp, #32]
   149f0:	b	14c78 <__assert_fail@plt+0x3d04>
   149f4:	ldr	r3, [r5, #48]	; 0x30
   149f8:	mvn	r0, #99	; 0x63
   149fc:	mov	r2, #0
   14a00:	and	r1, r3, #516	; 0x204
   14a04:	cmp	r1, #512	; 0x200
   14a08:	ldr	r1, [sl, #24]
   14a0c:	ldreq	r0, [r5, #32]
   14a10:	tst	r3, #16
   14a14:	beq	14a50 <__assert_fail@plt+0x3adc>
   14a18:	tst	r3, #1
   14a1c:	bne	14a44 <__assert_fail@plt+0x3ad0>
   14a20:	mov	r2, #32768	; 0x8000
   14a24:	b	14a50 <__assert_fail@plt+0x3adc>
   14a28:	ldr	r0, [sl, #12]
   14a2c:	bl	10f5c <closedir@plt>
   14a30:	mov	r6, #0
   14a34:	str	r6, [sl, #12]
   14a38:	cmp	r7, #3
   14a3c:	beq	14a94 <__assert_fail@plt+0x3b20>
   14a40:	b	1540c <__assert_fail@plt+0x4498>
   14a44:	ldr	r3, [sl, #48]	; 0x30
   14a48:	cmp	r3, #0
   14a4c:	movne	r2, #32768	; 0x8000
   14a50:	sub	r3, fp, #32
   14a54:	bl	18184 <__assert_fail@plt+0x7210>
   14a58:	cmp	r0, #0
   14a5c:	str	r0, [sl, #12]
   14a60:	beq	14a88 <__assert_fail@plt+0x3b14>
   14a64:	ldrh	r0, [sl, #56]	; 0x38
   14a68:	cmp	r0, #11
   14a6c:	bne	14aac <__assert_fail@plt+0x3b38>
   14a70:	mov	r0, r5
   14a74:	mov	r1, sl
   14a78:	mov	r2, #0
   14a7c:	bl	13a74 <__assert_fail@plt+0x2b00>
   14a80:	strh	r0, [sl, #56]	; 0x38
   14a84:	b	14aec <__assert_fail@plt+0x3b78>
   14a88:	mov	r6, #0
   14a8c:	cmp	r7, #3
   14a90:	bne	1540c <__assert_fail@plt+0x4498>
   14a94:	mov	r0, #4
   14a98:	strh	r0, [sl, #56]	; 0x38
   14a9c:	bl	10e78 <__errno_location@plt>
   14aa0:	ldr	r0, [r0]
   14aa4:	str	r0, [sl, #32]
   14aa8:	b	1540c <__assert_fail@plt+0x4498>
   14aac:	ldrb	r0, [r5, #49]	; 0x31
   14ab0:	tst	r0, #1
   14ab4:	beq	14aec <__assert_fail@plt+0x3b78>
   14ab8:	mov	r0, r5
   14abc:	mov	r1, sl
   14ac0:	bl	1464c <__assert_fail@plt+0x36d8>
   14ac4:	mov	r0, r5
   14ac8:	mov	r1, sl
   14acc:	mov	r2, #0
   14ad0:	mov	r6, #0
   14ad4:	bl	13a74 <__assert_fail@plt+0x2b00>
   14ad8:	mov	r0, r5
   14adc:	mov	r1, sl
   14ae0:	bl	154a8 <__assert_fail@plt+0x4534>
   14ae4:	cmp	r0, #0
   14ae8:	beq	14b90 <__assert_fail@plt+0x3c1c>
   14aec:	mov	r1, r5
   14af0:	str	r7, [sp, #4]
   14af4:	str	r4, [sp, #12]
   14af8:	ldr	r0, [r1, #44]!	; 0x2c
   14afc:	str	r1, [sp, #20]
   14b00:	mvn	r1, #0
   14b04:	cmp	r0, #0
   14b08:	movweq	r1, #34464	; 0x86a0
   14b0c:	movteq	r1, #1
   14b10:	cmp	r7, #2
   14b14:	str	r1, [sp, #32]
   14b18:	bne	14b34 <__assert_fail@plt+0x3bc0>
   14b1c:	mov	ip, #1
   14b20:	cmp	r7, #3
   14b24:	bne	14c78 <__assert_fail@plt+0x3d04>
   14b28:	sub	r0, r7, #3
   14b2c:	mov	r5, #0
   14b30:	b	14bbc <__assert_fail@plt+0x3c48>
   14b34:	ldr	r0, [r5, #48]	; 0x30
   14b38:	and	r0, r0, #56	; 0x38
   14b3c:	cmp	r0, #24
   14b40:	bne	14bb4 <__assert_fail@plt+0x3c40>
   14b44:	ldr	r0, [sl, #84]	; 0x54
   14b48:	cmp	r0, #2
   14b4c:	bne	14bb4 <__assert_fail@plt+0x3c40>
   14b50:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14b54:	mov	r0, sl
   14b58:	bl	15820 <__assert_fail@plt+0x48ac>
   14b5c:	movw	r1, #26984	; 0x6968
   14b60:	cmp	r0, r1
   14b64:	ble	14ba0 <__assert_fail@plt+0x3c2c>
   14b68:	movw	r1, #26985	; 0x6969
   14b6c:	cmp	r0, r1
   14b70:	movwne	r1, #16719	; 0x414f
   14b74:	movtne	r1, #21318	; 0x5346
   14b78:	cmpne	r0, r1
   14b7c:	beq	14bb4 <__assert_fail@plt+0x3c40>
   14b80:	movw	r1, #40864	; 0x9fa0
   14b84:	cmp	r0, r1
   14b88:	beq	14bb4 <__assert_fail@plt+0x3c40>
   14b8c:	b	14b1c <__assert_fail@plt+0x3ba8>
   14b90:	bl	10e78 <__errno_location@plt>
   14b94:	mov	r1, #12
   14b98:	str	r1, [r0]
   14b9c:	b	1540c <__assert_fail@plt+0x4498>
   14ba0:	movw	r1, #19778	; 0x4d42
   14ba4:	movt	r1, #65363	; 0xff53
   14ba8:	cmp	r0, r1
   14bac:	cmpne	r0, #0
   14bb0:	bne	14b1c <__assert_fail@plt+0x3ba8>
   14bb4:	sub	r0, r7, #3
   14bb8:	mov	r5, #1
   14bbc:	clz	r0, r0
   14bc0:	lsr	r6, r0, #5
   14bc4:	ldr	r0, [sp, #48]	; 0x30
   14bc8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14bcc:	ldrb	r0, [r0, #49]	; 0x31
   14bd0:	tst	r0, #2
   14bd4:	beq	14bf0 <__assert_fail@plt+0x3c7c>
   14bd8:	mov	r0, r2
   14bdc:	movw	r1, #1030	; 0x406
   14be0:	mov	r2, #3
   14be4:	bl	183f4 <__assert_fail@plt+0x7480>
   14be8:	mov	r2, r0
   14bec:	str	r0, [fp, #-32]	; 0xffffffe0
   14bf0:	cmp	r2, #0
   14bf4:	bmi	14c10 <__assert_fail@plt+0x3c9c>
   14bf8:	ldr	r0, [sp, #48]	; 0x30
   14bfc:	mov	r1, sl
   14c00:	mov	r3, #0
   14c04:	bl	14728 <__assert_fail@plt+0x37b4>
   14c08:	cmp	r0, #0
   14c0c:	beq	14c70 <__assert_fail@plt+0x3cfc>
   14c10:	and	r0, r6, r5
   14c14:	cmp	r0, #1
   14c18:	bne	14c28 <__assert_fail@plt+0x3cb4>
   14c1c:	bl	10e78 <__errno_location@plt>
   14c20:	ldr	r0, [r0]
   14c24:	str	r0, [sl, #32]
   14c28:	ldrh	r0, [sl, #58]	; 0x3a
   14c2c:	orr	r0, r0, #1
   14c30:	strh	r0, [sl, #58]	; 0x3a
   14c34:	ldr	r0, [sl, #12]
   14c38:	bl	10f5c <closedir@plt>
   14c3c:	ldr	r5, [sp, #48]	; 0x30
   14c40:	mov	r4, #0
   14c44:	str	r4, [sl, #12]
   14c48:	ldrb	r0, [r5, #49]	; 0x31
   14c4c:	tst	r0, #2
   14c50:	beq	14c64 <__assert_fail@plt+0x3cf0>
   14c54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14c58:	cmp	r0, #0
   14c5c:	bmi	14c64 <__assert_fail@plt+0x3cf0>
   14c60:	bl	10f44 <close@plt>
   14c64:	mov	ip, #1
   14c68:	str	r4, [sl, #12]
   14c6c:	b	14c78 <__assert_fail@plt+0x3d04>
   14c70:	ldr	r5, [sp, #48]	; 0x30
   14c74:	mov	ip, #0
   14c78:	ldr	r0, [sl, #40]	; 0x28
   14c7c:	ldr	r1, [sl, #28]
   14c80:	mov	r9, #0
   14c84:	sub	r2, r0, #1
   14c88:	ldrb	r1, [r1, r2]
   14c8c:	cmp	r1, #47	; 0x2f
   14c90:	ldrb	r1, [r5, #48]	; 0x30
   14c94:	moveq	r0, r2
   14c98:	tst	r1, #4
   14c9c:	mov	r1, #0
   14ca0:	str	r1, [sp, #40]	; 0x28
   14ca4:	beq	14cbc <__assert_fail@plt+0x3d48>
   14ca8:	ldr	r1, [r5, #24]
   14cac:	mov	r2, #47	; 0x2f
   14cb0:	strb	r2, [r1, r0]!
   14cb4:	add	r1, r1, #1
   14cb8:	str	r1, [sp, #40]	; 0x28
   14cbc:	ldr	r6, [sl, #12]
   14cc0:	add	r1, r0, #1
   14cc4:	str	r1, [fp, #-44]	; 0xffffffd4
   14cc8:	cmp	r6, #0
   14ccc:	beq	1502c <__assert_fail@plt+0x40b8>
   14cd0:	ldr	r0, [sl, #48]	; 0x30
   14cd4:	str	ip, [sp]
   14cd8:	mov	r4, #0
   14cdc:	add	r0, r0, #1
   14ce0:	str	r0, [sp, #24]
   14ce4:	ldr	r0, [r5, #36]	; 0x24
   14ce8:	sub	r0, r0, r1
   14cec:	str	r0, [fp, #-36]	; 0xffffffdc
   14cf0:	bl	10e78 <__errno_location@plt>
   14cf4:	str	r0, [sp, #36]	; 0x24
   14cf8:	mov	r0, #0
   14cfc:	mov	r9, #0
   14d00:	mov	r7, #0
   14d04:	str	sl, [sp, #28]
   14d08:	str	r0, [sp, #44]	; 0x2c
   14d0c:	mov	r0, #0
   14d10:	str	r0, [sp, #8]
   14d14:	mov	r0, #0
   14d18:	str	r0, [sp, #16]
   14d1c:	ldr	r0, [sp, #36]	; 0x24
   14d20:	str	r4, [r0]
   14d24:	mov	r0, r6
   14d28:	bl	10ec0 <readdir64@plt>
   14d2c:	cmp	r0, #0
   14d30:	beq	15038 <__assert_fail@plt+0x40c4>
   14d34:	mov	r8, r0
   14d38:	ldrb	r0, [r5, #48]	; 0x30
   14d3c:	tst	r0, #32
   14d40:	bne	14d70 <__assert_fail@plt+0x3dfc>
   14d44:	ldrb	r0, [r8, #19]
   14d48:	cmp	r0, #46	; 0x2e
   14d4c:	bne	14d70 <__assert_fail@plt+0x3dfc>
   14d50:	ldrb	r0, [r8, #20]
   14d54:	cmp	r0, #0
   14d58:	beq	15008 <__assert_fail@plt+0x4094>
   14d5c:	cmp	r0, #46	; 0x2e
   14d60:	bne	14d70 <__assert_fail@plt+0x3dfc>
   14d64:	ldrb	r0, [r8, #21]
   14d68:	cmp	r0, #0
   14d6c:	beq	15008 <__assert_fail@plt+0x4094>
   14d70:	add	r4, r8, #19
   14d74:	mov	r0, r4
   14d78:	bl	10e48 <strlen@plt>
   14d7c:	mov	r5, r0
   14d80:	add	r0, r0, #176	; 0xb0
   14d84:	bic	r0, r0, #7
   14d88:	bl	18280 <__assert_fail@plt+0x730c>
   14d8c:	mov	r6, r0
   14d90:	cmp	r0, #0
   14d94:	beq	15394 <__assert_fail@plt+0x4420>
   14d98:	add	sl, r6, #168	; 0xa8
   14d9c:	mov	r1, r4
   14da0:	mov	r2, r5
   14da4:	str	r7, [fp, #-40]	; 0xffffffd8
   14da8:	mov	r0, sl
   14dac:	bl	10d70 <memcpy@plt>
   14db0:	ldr	r2, [sp, #48]	; 0x30
   14db4:	mov	r0, #0
   14db8:	mov	r1, #196608	; 0x30000
   14dbc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14dc0:	strb	r0, [sl, r5]
   14dc4:	str	r5, [r6, #52]	; 0x34
   14dc8:	str	r2, [r6, #44]	; 0x2c
   14dcc:	add	r7, r5, r3
   14dd0:	ldr	r4, [r2, #24]
   14dd4:	str	r0, [r6, #12]
   14dd8:	str	r0, [r6, #16]
   14ddc:	str	r0, [r6, #20]
   14de0:	str	r1, [r6, #58]	; 0x3a
   14de4:	str	r4, [r6, #28]
   14de8:	str	r0, [r6, #32]
   14dec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14df0:	cmp	r5, r0
   14df4:	bcs	14e08 <__assert_fail@plt+0x3e94>
   14df8:	mov	r5, r2
   14dfc:	cmp	r7, r3
   14e00:	bcs	14e78 <__assert_fail@plt+0x3f04>
   14e04:	b	15284 <__assert_fail@plt+0x4310>
   14e08:	ldr	r1, [r2, #36]	; 0x24
   14e0c:	movw	r0, #257	; 0x101
   14e10:	mov	r5, r2
   14e14:	add	r0, r7, r0
   14e18:	adds	r1, r0, r1
   14e1c:	bcs	15360 <__assert_fail@plt+0x43ec>
   14e20:	mov	r0, r4
   14e24:	str	r1, [r5, #36]	; 0x24
   14e28:	bl	182b0 <__assert_fail@plt+0x733c>
   14e2c:	cmp	r0, #0
   14e30:	beq	15380 <__assert_fail@plt+0x440c>
   14e34:	cmp	r0, r4
   14e38:	str	r0, [r5, #24]
   14e3c:	beq	14e64 <__assert_fail@plt+0x3ef0>
   14e40:	ldrb	r1, [r5, #48]	; 0x30
   14e44:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e48:	tst	r1, #4
   14e4c:	ldr	r1, [sp, #40]	; 0x28
   14e50:	addne	r1, r0, r3
   14e54:	mov	r0, #1
   14e58:	str	r1, [sp, #40]	; 0x28
   14e5c:	str	r0, [sp, #16]
   14e60:	b	14e68 <__assert_fail@plt+0x3ef4>
   14e64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e68:	ldr	r0, [r5, #36]	; 0x24
   14e6c:	sub	r0, r0, r3
   14e70:	cmp	r7, r3
   14e74:	bcc	15284 <__assert_fail@plt+0x4310>
   14e78:	str	r0, [fp, #-36]	; 0xffffffdc
   14e7c:	ldr	r0, [sp, #24]
   14e80:	add	r4, r6, #112	; 0x70
   14e84:	str	r0, [r6, #48]	; 0x30
   14e88:	ldr	r0, [r5]
   14e8c:	str	r7, [r6, #40]	; 0x28
   14e90:	str	r0, [r6, #4]
   14e94:	ldrd	r0, [r8]
   14e98:	strd	r0, [r4, #48]	; 0x30
   14e9c:	ldrb	r0, [r5, #48]	; 0x30
   14ea0:	tst	r0, #4
   14ea4:	bne	14eb0 <__assert_fail@plt+0x3f3c>
   14ea8:	str	sl, [r6, #24]
   14eac:	b	14ecc <__assert_fail@plt+0x3f58>
   14eb0:	ldr	r0, [r6, #28]
   14eb4:	ldr	r1, [r6, #52]	; 0x34
   14eb8:	str	r0, [r6, #24]
   14ebc:	ldr	r0, [sp, #40]	; 0x28
   14ec0:	add	r2, r1, #1
   14ec4:	mov	r1, sl
   14ec8:	bl	10d58 <memmove@plt>
   14ecc:	ldr	r0, [r5, #44]	; 0x2c
   14ed0:	ldr	r7, [fp, #-40]	; 0xffffffd8
   14ed4:	ldr	r2, [r5, #48]	; 0x30
   14ed8:	ldr	sl, [sp, #28]
   14edc:	cmp	r0, #0
   14ee0:	beq	14f04 <__assert_fail@plt+0x3f90>
   14ee4:	ands	r0, r2, #1024	; 0x400
   14ee8:	bne	14f04 <__assert_fail@plt+0x3f90>
   14eec:	mov	r0, r5
   14ef0:	mov	r1, r6
   14ef4:	mov	r2, #0
   14ef8:	bl	13a74 <__assert_fail@plt+0x2b00>
   14efc:	strh	r0, [r6, #56]	; 0x38
   14f00:	b	14f78 <__assert_fail@plt+0x4004>
   14f04:	ldrb	r3, [r8, #18]
   14f08:	mov	r0, #0
   14f0c:	tst	r2, #8
   14f10:	mov	r1, #0
   14f14:	beq	14f38 <__assert_fail@plt+0x3fc4>
   14f18:	orr	r1, r3, #4
   14f1c:	cmp	r1, #4
   14f20:	mov	r1, #0
   14f24:	beq	14f38 <__assert_fail@plt+0x3fc4>
   14f28:	eor	r1, r3, #10
   14f2c:	and	r2, r2, #16
   14f30:	orrs	r1, r2, r1
   14f34:	movwne	r1, #1
   14f38:	mov	r2, #11
   14f3c:	strh	r2, [r6, #56]	; 0x38
   14f40:	sub	r2, r3, #1
   14f44:	uxtb	r3, r2
   14f48:	cmp	r3, #11
   14f4c:	bhi	14f60 <__assert_fail@plt+0x3fec>
   14f50:	sxtb	r0, r2
   14f54:	movw	r2, #35312	; 0x89f0
   14f58:	movt	r2, #1
   14f5c:	ldr	r0, [r2, r0, lsl #2]
   14f60:	cmp	r1, #0
   14f64:	str	r0, [r6, #80]	; 0x50
   14f68:	mov	r0, #2
   14f6c:	mov	r1, #0
   14f70:	movwne	r0, #1
   14f74:	strd	r0, [r4]
   14f78:	mov	r4, #0
   14f7c:	cmp	r9, #0
   14f80:	str	r4, [r6, #8]
   14f84:	beq	14f94 <__assert_fail@plt+0x4020>
   14f88:	ldr	r0, [sp, #44]	; 0x2c
   14f8c:	str	r6, [r0, #8]
   14f90:	b	14f98 <__assert_fail@plt+0x4024>
   14f94:	mov	r9, r6
   14f98:	movw	r0, #10000	; 0x2710
   14f9c:	cmp	r7, r0
   14fa0:	bne	14ff4 <__assert_fail@plt+0x4080>
   14fa4:	ldr	r0, [sp, #20]
   14fa8:	ldr	r0, [r0]
   14fac:	cmp	r0, #0
   14fb0:	bne	14ff4 <__assert_fail@plt+0x4080>
   14fb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14fb8:	mov	r0, sl
   14fbc:	bl	15820 <__assert_fail@plt+0x48ac>
   14fc0:	mov	r1, #0
   14fc4:	str	r1, [sp, #8]
   14fc8:	movw	r1, #19778	; 0x4d42
   14fcc:	movt	r1, #65363	; 0xff53
   14fd0:	cmp	r0, r1
   14fd4:	movwne	r1, #26985	; 0x6969
   14fd8:	cmpne	r0, r1
   14fdc:	beq	14ff4 <__assert_fail@plt+0x4080>
   14fe0:	movw	r1, #6548	; 0x1994
   14fe4:	movt	r1, #258	; 0x102
   14fe8:	cmp	r0, r1
   14fec:	movne	r0, #1
   14ff0:	strne	r0, [sp, #8]
   14ff4:	ldr	r0, [sp, #32]
   14ff8:	add	r7, r7, #1
   14ffc:	cmp	r0, r7
   15000:	bls	15014 <__assert_fail@plt+0x40a0>
   15004:	str	r6, [sp, #44]	; 0x2c
   15008:	ldr	r6, [sl, #12]
   1500c:	cmp	r6, #0
   15010:	bne	14d1c <__assert_fail@plt+0x3da8>
   15014:	ldr	r0, [sp, #16]
   15018:	ldr	ip, [sp]
   1501c:	ldr	r4, [sp, #8]
   15020:	tst	r0, #1
   15024:	bne	1508c <__assert_fail@plt+0x4118>
   15028:	b	1512c <__assert_fail@plt+0x41b8>
   1502c:	mov	r7, #0
   15030:	mov	r4, #0
   15034:	b	1512c <__assert_fail@plt+0x41b8>
   15038:	ldr	r0, [sp, #36]	; 0x24
   1503c:	ldr	r0, [r0]
   15040:	cmp	r0, #0
   15044:	beq	15060 <__assert_fail@plt+0x40ec>
   15048:	str	r0, [sl, #32]
   1504c:	ldr	r0, [sp, #12]
   15050:	orrs	r0, r0, r7
   15054:	mov	r0, #4
   15058:	movwne	r0, #7
   1505c:	strh	r0, [sl, #56]	; 0x38
   15060:	ldr	r0, [sl, #12]
   15064:	ldr	r4, [sp, #8]
   15068:	cmp	r0, #0
   1506c:	beq	1507c <__assert_fail@plt+0x4108>
   15070:	bl	10f5c <closedir@plt>
   15074:	mov	r0, #0
   15078:	str	r0, [sl, #12]
   1507c:	ldr	r0, [sp, #16]
   15080:	ldr	ip, [sp]
   15084:	tst	r0, #1
   15088:	beq	1512c <__assert_fail@plt+0x41b8>
   1508c:	ldr	r1, [r5, #4]
   15090:	ldr	r0, [r5, #24]
   15094:	cmp	r1, #0
   15098:	bne	150b0 <__assert_fail@plt+0x413c>
   1509c:	b	150d4 <__assert_fail@plt+0x4160>
   150a0:	str	r0, [r1, #28]
   150a4:	ldr	r1, [r1, #8]
   150a8:	cmp	r1, #0
   150ac:	beq	150d4 <__assert_fail@plt+0x4160>
   150b0:	ldr	r2, [r1, #24]
   150b4:	add	r3, r1, #168	; 0xa8
   150b8:	cmp	r2, r3
   150bc:	beq	150a0 <__assert_fail@plt+0x412c>
   150c0:	ldr	r3, [r1, #28]
   150c4:	sub	r2, r2, r3
   150c8:	add	r2, r0, r2
   150cc:	str	r2, [r1, #24]
   150d0:	b	150a0 <__assert_fail@plt+0x412c>
   150d4:	ldr	r1, [r9, #48]	; 0x30
   150d8:	cmp	r1, #0
   150dc:	bmi	1512c <__assert_fail@plt+0x41b8>
   150e0:	mov	r1, r9
   150e4:	b	15108 <__assert_fail@plt+0x4194>
   150e8:	str	r0, [r1, #28]
   150ec:	ldr	r2, [r1, #8]
   150f0:	cmp	r2, #0
   150f4:	ldreq	r2, [r1, #4]
   150f8:	ldr	r1, [r2, #48]	; 0x30
   150fc:	cmn	r1, #1
   15100:	mov	r1, r2
   15104:	ble	1512c <__assert_fail@plt+0x41b8>
   15108:	ldr	r2, [r1, #24]
   1510c:	add	r3, r1, #168	; 0xa8
   15110:	cmp	r2, r3
   15114:	beq	150e8 <__assert_fail@plt+0x4174>
   15118:	ldr	r3, [r1, #28]
   1511c:	sub	r2, r2, r3
   15120:	add	r2, r0, r2
   15124:	str	r2, [r1, #24]
   15128:	b	150e8 <__assert_fail@plt+0x4174>
   1512c:	ldrb	r0, [r5, #48]	; 0x30
   15130:	tst	r0, #4
   15134:	beq	15160 <__assert_fail@plt+0x41ec>
   15138:	ldr	r2, [sp, #40]	; 0x28
   1513c:	ldr	r0, [r5, #36]	; 0x24
   15140:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15144:	cmp	r3, r0
   15148:	sub	r1, r2, #1
   1514c:	mov	r0, #0
   15150:	moveq	r2, r1
   15154:	cmp	r7, #0
   15158:	moveq	r2, r1
   1515c:	strb	r0, [r2]
   15160:	ldr	r0, [sp, #12]
   15164:	cmp	r0, #0
   15168:	movwne	r0, #1
   1516c:	orrs	r0, r0, ip
   15170:	beq	151d8 <__assert_fail@plt+0x4264>
   15174:	cmp	r7, #0
   15178:	bne	15218 <__assert_fail@plt+0x42a4>
   1517c:	ldr	r0, [sp, #4]
   15180:	cmp	r0, #3
   15184:	bne	1519c <__assert_fail@plt+0x4228>
   15188:	ldrh	r0, [sl, #56]	; 0x38
   1518c:	cmp	r0, #4
   15190:	cmpne	r0, #7
   15194:	movne	r0, #6
   15198:	strhne	r0, [sl, #56]	; 0x38
   1519c:	mov	r6, #0
   151a0:	cmp	r9, #0
   151a4:	bne	151c0 <__assert_fail@plt+0x424c>
   151a8:	b	1540c <__assert_fail@plt+0x4498>
   151ac:	mov	r0, r9
   151b0:	bl	13554 <__assert_fail@plt+0x25e0>
   151b4:	cmp	r4, #0
   151b8:	mov	r9, r4
   151bc:	beq	1540c <__assert_fail@plt+0x4498>
   151c0:	ldrd	r4, [r9, #8]
   151c4:	cmp	r5, #0
   151c8:	beq	151ac <__assert_fail@plt+0x4238>
   151cc:	mov	r0, r5
   151d0:	bl	10f5c <closedir@plt>
   151d4:	b	151ac <__assert_fail@plt+0x4238>
   151d8:	ldr	r0, [sp, #4]
   151dc:	cmp	r0, #1
   151e0:	cmpne	r7, #0
   151e4:	bne	15218 <__assert_fail@plt+0x42a4>
   151e8:	ldr	r0, [sl, #48]	; 0x30
   151ec:	cmp	r0, #0
   151f0:	beq	15300 <__assert_fail@plt+0x438c>
   151f4:	ldr	r1, [sl, #4]
   151f8:	movw	r3, #35306	; 0x89ea
   151fc:	mov	r0, r5
   15200:	mvn	r2, #0
   15204:	movt	r3, #1
   15208:	bl	14728 <__assert_fail@plt+0x37b4>
   1520c:	cmp	r0, #0
   15210:	bne	15310 <__assert_fail@plt+0x439c>
   15214:	b	15174 <__assert_fail@plt+0x4200>
   15218:	tst	r4, #1
   1521c:	beq	1524c <__assert_fail@plt+0x42d8>
   15220:	movw	r0, #22504	; 0x57e8
   15224:	mov	r1, r9
   15228:	mov	r2, r7
   1522c:	movt	r0, #1
   15230:	str	r0, [r5, #44]	; 0x2c
   15234:	mov	r0, r5
   15238:	bl	13c0c <__assert_fail@plt+0x2c98>
   1523c:	mov	r6, r0
   15240:	mov	r0, #0
   15244:	str	r0, [r5, #44]	; 0x2c
   15248:	b	1540c <__assert_fail@plt+0x4498>
   1524c:	cmp	r7, #2
   15250:	bcc	1527c <__assert_fail@plt+0x4308>
   15254:	ldr	r0, [sp, #20]
   15258:	ldr	r0, [r0]
   1525c:	cmp	r0, #0
   15260:	beq	1527c <__assert_fail@plt+0x4308>
   15264:	mov	r0, r5
   15268:	mov	r1, r9
   1526c:	mov	r2, r7
   15270:	bl	13c0c <__assert_fail@plt+0x2c98>
   15274:	mov	r6, r0
   15278:	b	1540c <__assert_fail@plt+0x4498>
   1527c:	mov	r6, r9
   15280:	b	1540c <__assert_fail@plt+0x4498>
   15284:	mov	r0, r6
   15288:	bl	13554 <__assert_fail@plt+0x25e0>
   1528c:	ldr	r7, [sp, #28]
   15290:	cmp	r9, #0
   15294:	bne	152b0 <__assert_fail@plt+0x433c>
   15298:	b	152c8 <__assert_fail@plt+0x4354>
   1529c:	mov	r0, r9
   152a0:	bl	13554 <__assert_fail@plt+0x25e0>
   152a4:	cmp	r4, #0
   152a8:	mov	r9, r4
   152ac:	beq	152c8 <__assert_fail@plt+0x4354>
   152b0:	ldrd	r4, [r9, #8]
   152b4:	cmp	r5, #0
   152b8:	beq	1529c <__assert_fail@plt+0x4328>
   152bc:	mov	r0, r5
   152c0:	bl	10f5c <closedir@plt>
   152c4:	b	1529c <__assert_fail@plt+0x4328>
   152c8:	ldr	r0, [r7, #12]
   152cc:	bl	10f5c <closedir@plt>
   152d0:	ldr	r1, [sp, #48]	; 0x30
   152d4:	mov	r0, #7
   152d8:	mov	r6, #0
   152dc:	strh	r0, [r7, #56]	; 0x38
   152e0:	str	r6, [r7, #12]
   152e4:	ldr	r0, [r1, #48]	; 0x30
   152e8:	orr	r0, r0, #8192	; 0x2000
   152ec:	str	r0, [r1, #48]	; 0x30
   152f0:	ldr	r1, [sp, #36]	; 0x24
   152f4:	mov	r0, #36	; 0x24
   152f8:	str	r0, [r1]
   152fc:	b	1540c <__assert_fail@plt+0x4498>
   15300:	mov	r0, r5
   15304:	bl	15418 <__assert_fail@plt+0x44a4>
   15308:	cmp	r0, #0
   1530c:	beq	15174 <__assert_fail@plt+0x4200>
   15310:	mov	r0, #7
   15314:	mov	r6, #0
   15318:	cmp	r9, #0
   1531c:	strh	r0, [sl, #56]	; 0x38
   15320:	ldr	r0, [r5, #48]	; 0x30
   15324:	orr	r0, r0, #8192	; 0x2000
   15328:	str	r0, [r5, #48]	; 0x30
   1532c:	bne	15348 <__assert_fail@plt+0x43d4>
   15330:	b	1540c <__assert_fail@plt+0x4498>
   15334:	mov	r0, r9
   15338:	bl	13554 <__assert_fail@plt+0x25e0>
   1533c:	cmp	r4, #0
   15340:	mov	r9, r4
   15344:	beq	1540c <__assert_fail@plt+0x4498>
   15348:	ldrd	r4, [r9, #8]
   1534c:	cmp	r5, #0
   15350:	beq	15334 <__assert_fail@plt+0x43c0>
   15354:	mov	r0, r5
   15358:	bl	10f5c <closedir@plt>
   1535c:	b	15334 <__assert_fail@plt+0x43c0>
   15360:	mov	r0, r4
   15364:	bl	13554 <__assert_fail@plt+0x25e0>
   15368:	ldr	r1, [sp, #36]	; 0x24
   1536c:	mov	r0, #0
   15370:	str	r0, [r5, #24]
   15374:	mov	r0, #36	; 0x24
   15378:	str	r0, [r1]
   1537c:	b	15390 <__assert_fail@plt+0x441c>
   15380:	ldr	r0, [r5, #24]
   15384:	bl	13554 <__assert_fail@plt+0x25e0>
   15388:	mov	r0, #0
   1538c:	str	r0, [r5, #24]
   15390:	ldr	sl, [sp, #28]
   15394:	ldr	r0, [sp, #36]	; 0x24
   15398:	ldr	r4, [r0]
   1539c:	mov	r0, r6
   153a0:	bl	13554 <__assert_fail@plt+0x25e0>
   153a4:	ldr	r5, [sp, #48]	; 0x30
   153a8:	cmp	r9, #0
   153ac:	bne	153c8 <__assert_fail@plt+0x4454>
   153b0:	b	153e0 <__assert_fail@plt+0x446c>
   153b4:	mov	r0, r9
   153b8:	bl	13554 <__assert_fail@plt+0x25e0>
   153bc:	cmp	r6, #0
   153c0:	mov	r9, r6
   153c4:	beq	153e0 <__assert_fail@plt+0x446c>
   153c8:	ldrd	r6, [r9, #8]
   153cc:	cmp	r7, #0
   153d0:	beq	153b4 <__assert_fail@plt+0x4440>
   153d4:	mov	r0, r7
   153d8:	bl	10f5c <closedir@plt>
   153dc:	b	153b4 <__assert_fail@plt+0x4440>
   153e0:	ldr	r0, [sl, #12]
   153e4:	bl	10f5c <closedir@plt>
   153e8:	mov	r0, #7
   153ec:	mov	r6, #0
   153f0:	strh	r0, [sl, #56]	; 0x38
   153f4:	str	r6, [sl, #12]
   153f8:	ldr	r0, [r5, #48]	; 0x30
   153fc:	orr	r0, r0, #8192	; 0x2000
   15400:	str	r0, [r5, #48]	; 0x30
   15404:	ldr	r0, [sp, #36]	; 0x24
   15408:	str	r4, [r0]
   1540c:	mov	r0, r6
   15410:	sub	sp, fp, #28
   15414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15418:	push	{r4, r5, fp, lr}
   1541c:	add	fp, sp, #8
   15420:	mov	r5, r0
   15424:	ldr	r0, [r0, #48]	; 0x30
   15428:	mov	r4, #0
   1542c:	tst	r0, #4
   15430:	bne	15474 <__assert_fail@plt+0x4500>
   15434:	tst	r0, #512	; 0x200
   15438:	bne	15454 <__assert_fail@plt+0x44e0>
   1543c:	ldr	r0, [r5, #28]
   15440:	bl	10efc <fchdir@plt>
   15444:	cmp	r0, #0
   15448:	mov	r4, r0
   1544c:	movwne	r4, #1
   15450:	b	15474 <__assert_fail@plt+0x4500>
   15454:	ldr	r1, [r5, #32]
   15458:	add	r0, r5, #60	; 0x3c
   1545c:	bl	1801c <__assert_fail@plt+0x70a8>
   15460:	cmp	r0, #0
   15464:	bmi	1546c <__assert_fail@plt+0x44f8>
   15468:	bl	10f44 <close@plt>
   1546c:	mvn	r0, #99	; 0x63
   15470:	str	r0, [r5, #32]
   15474:	add	r5, r5, #60	; 0x3c
   15478:	mov	r0, r5
   1547c:	bl	18014 <__assert_fail@plt+0x70a0>
   15480:	cmp	r0, #0
   15484:	bne	154a0 <__assert_fail@plt+0x452c>
   15488:	mov	r0, r5
   1548c:	bl	18068 <__assert_fail@plt+0x70f4>
   15490:	cmp	r0, #0
   15494:	bmi	15478 <__assert_fail@plt+0x4504>
   15498:	bl	10f44 <close@plt>
   1549c:	b	15478 <__assert_fail@plt+0x4504>
   154a0:	mov	r0, r4
   154a4:	pop	{r4, r5, fp, pc}
   154a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154ac:	add	fp, sp, #24
   154b0:	mov	r6, r0
   154b4:	ldrh	r0, [r0, #48]	; 0x30
   154b8:	mov	r4, r1
   154bc:	add	r5, r1, #64	; 0x40
   154c0:	movw	r1, #258	; 0x102
   154c4:	tst	r0, r1
   154c8:	beq	15540 <__assert_fail@plt+0x45cc>
   154cc:	mov	r0, #24
   154d0:	bl	18280 <__assert_fail@plt+0x730c>
   154d4:	mov	r8, #0
   154d8:	cmp	r0, #0
   154dc:	beq	15560 <__assert_fail@plt+0x45ec>
   154e0:	ldrd	r2, [r5]
   154e4:	mov	r7, r0
   154e8:	add	r0, r4, #160	; 0xa0
   154ec:	stm	r7, {r2, r3}
   154f0:	add	r2, r7, #8
   154f4:	ldrd	r0, [r0]
   154f8:	stm	r2, {r0, r1, r4}
   154fc:	mov	r1, r7
   15500:	ldr	r0, [r6, #56]	; 0x38
   15504:	bl	17d08 <__assert_fail@plt+0x6d94>
   15508:	cmp	r0, r7
   1550c:	beq	15534 <__assert_fail@plt+0x45c0>
   15510:	mov	r5, r0
   15514:	mov	r0, r7
   15518:	bl	13554 <__assert_fail@plt+0x25e0>
   1551c:	cmp	r5, #0
   15520:	beq	15560 <__assert_fail@plt+0x45ec>
   15524:	ldr	r0, [r5, #16]
   15528:	mov	r1, #2
   1552c:	strh	r1, [r4, #56]	; 0x38
   15530:	str	r0, [r4]
   15534:	mov	r8, #1
   15538:	mov	r0, r8
   1553c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15540:	ldr	r0, [r6, #56]	; 0x38
   15544:	mov	r1, r5
   15548:	bl	18320 <__assert_fail@plt+0x73ac>
   1554c:	cmp	r0, #0
   15550:	mov	r8, #1
   15554:	movne	r0, #2
   15558:	strhne	r0, [r4, #56]	; 0x38
   1555c:	strne	r4, [r4]
   15560:	mov	r0, r8
   15564:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15568:	push	{fp, lr}
   1556c:	mov	fp, sp
   15570:	cmp	r2, #5
   15574:	bcc	1558c <__assert_fail@plt+0x4618>
   15578:	bl	10e78 <__errno_location@plt>
   1557c:	mov	r1, #22
   15580:	str	r1, [r0]
   15584:	mov	r0, #1
   15588:	pop	{fp, pc}
   1558c:	mov	r0, #0
   15590:	strh	r2, [r1, #60]	; 0x3c
   15594:	pop	{fp, pc}
   15598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1559c:	add	fp, sp, #28
   155a0:	sub	sp, sp, #4
   155a4:	mov	r9, r0
   155a8:	mvn	r0, #4096	; 0x1000
   155ac:	tst	r1, r0
   155b0:	beq	155c8 <__assert_fail@plt+0x4654>
   155b4:	bl	10e78 <__errno_location@plt>
   155b8:	mov	r1, #22
   155bc:	mov	r5, #0
   155c0:	str	r1, [r0]
   155c4:	b	156c8 <__assert_fail@plt+0x4754>
   155c8:	ldr	r8, [r9]
   155cc:	mov	r7, r1
   155d0:	bl	10e78 <__errno_location@plt>
   155d4:	mov	r5, #0
   155d8:	mov	sl, r0
   155dc:	str	r5, [r0]
   155e0:	ldrb	r0, [r9, #49]	; 0x31
   155e4:	tst	r0, #32
   155e8:	bne	156c8 <__assert_fail@plt+0x4754>
   155ec:	ldrh	r0, [r8, #56]	; 0x38
   155f0:	cmp	r0, #1
   155f4:	beq	15604 <__assert_fail@plt+0x4690>
   155f8:	cmp	r0, #9
   155fc:	ldreq	r5, [r8, #8]
   15600:	b	156c8 <__assert_fail@plt+0x4754>
   15604:	ldr	r6, [r9, #4]
   15608:	cmp	r6, #0
   1560c:	bne	15628 <__assert_fail@plt+0x46b4>
   15610:	b	15644 <__assert_fail@plt+0x46d0>
   15614:	mov	r0, r6
   15618:	bl	13554 <__assert_fail@plt+0x25e0>
   1561c:	cmp	r4, #0
   15620:	mov	r6, r4
   15624:	beq	15644 <__assert_fail@plt+0x46d0>
   15628:	ldr	r1, [r6, #12]
   1562c:	ldr	r4, [r6, #8]
   15630:	cmp	r1, #0
   15634:	beq	15614 <__assert_fail@plt+0x46a0>
   15638:	mov	r0, r1
   1563c:	bl	10f5c <closedir@plt>
   15640:	b	15614 <__assert_fail@plt+0x46a0>
   15644:	mov	r4, #1
   15648:	cmp	r7, #4096	; 0x1000
   1564c:	bne	15660 <__assert_fail@plt+0x46ec>
   15650:	ldr	r0, [r9, #48]	; 0x30
   15654:	mov	r4, #2
   15658:	orr	r0, r0, #4096	; 0x1000
   1565c:	str	r0, [r9, #48]	; 0x30
   15660:	ldr	r0, [r8, #48]	; 0x30
   15664:	cmp	r0, #0
   15668:	bne	156b4 <__assert_fail@plt+0x4740>
   1566c:	ldr	r0, [r8, #24]
   15670:	ldrb	r0, [r0]
   15674:	cmp	r0, #47	; 0x2f
   15678:	beq	156b4 <__assert_fail@plt+0x4740>
   1567c:	ldr	r0, [r9, #48]	; 0x30
   15680:	tst	r0, #4
   15684:	bne	156b4 <__assert_fail@plt+0x4740>
   15688:	mov	r1, #32768	; 0x8000
   1568c:	tst	r0, #512	; 0x200
   15690:	and	r1, r1, r0, lsl #11
   15694:	orr	r1, r1, #18688	; 0x4900
   15698:	orr	r2, r1, #524288	; 0x80000
   1569c:	bne	156d4 <__assert_fail@plt+0x4760>
   156a0:	movw	r0, #35307	; 0x89eb
   156a4:	mov	r1, r2
   156a8:	movt	r0, #1
   156ac:	bl	185d4 <__assert_fail@plt+0x7660>
   156b0:	b	156e4 <__assert_fail@plt+0x4770>
   156b4:	mov	r0, r9
   156b8:	mov	r1, r4
   156bc:	bl	14988 <__assert_fail@plt+0x3a14>
   156c0:	mov	r5, r0
   156c4:	str	r0, [r9, #4]
   156c8:	mov	r0, r5
   156cc:	sub	sp, fp, #28
   156d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156d4:	ldr	r0, [r9, #32]
   156d8:	movw	r1, #35307	; 0x89eb
   156dc:	movt	r1, #1
   156e0:	bl	1814c <__assert_fail@plt+0x71d8>
   156e4:	mov	r8, r0
   156e8:	cmn	r0, #1
   156ec:	ble	15730 <__assert_fail@plt+0x47bc>
   156f0:	mov	r0, r9
   156f4:	mov	r1, r4
   156f8:	bl	14988 <__assert_fail@plt+0x3a14>
   156fc:	str	r0, [r9, #4]
   15700:	ldrb	r0, [r9, #49]	; 0x31
   15704:	tst	r0, #2
   15708:	bne	1573c <__assert_fail@plt+0x47c8>
   1570c:	mov	r0, r8
   15710:	bl	10efc <fchdir@plt>
   15714:	cmp	r0, #0
   15718:	beq	1576c <__assert_fail@plt+0x47f8>
   1571c:	ldr	r4, [sl]
   15720:	mov	r0, r8
   15724:	bl	10f44 <close@plt>
   15728:	str	r4, [sl]
   1572c:	b	156c8 <__assert_fail@plt+0x4754>
   15730:	mov	r5, #0
   15734:	str	r5, [r9, #4]
   15738:	b	156c8 <__assert_fail@plt+0x4754>
   1573c:	ldr	r1, [r9, #32]
   15740:	cmp	r1, r8
   15744:	bne	15750 <__assert_fail@plt+0x47dc>
   15748:	cmn	r1, #100	; 0x64
   1574c:	bne	1577c <__assert_fail@plt+0x4808>
   15750:	add	r0, r9, #60	; 0x3c
   15754:	bl	1801c <__assert_fail@plt+0x70a8>
   15758:	cmp	r0, #0
   1575c:	bmi	15764 <__assert_fail@plt+0x47f0>
   15760:	bl	10f44 <close@plt>
   15764:	str	r8, [r9, #32]
   15768:	b	15774 <__assert_fail@plt+0x4800>
   1576c:	mov	r0, r8
   15770:	bl	10f44 <close@plt>
   15774:	ldr	r5, [r9, #4]
   15778:	b	156c8 <__assert_fail@plt+0x4754>
   1577c:	bl	10f38 <abort@plt>
   15780:	push	{fp, lr}
   15784:	mov	fp, sp
   15788:	mov	r2, r1
   1578c:	ldrd	r0, [r0, #8]
   15790:	mov	r3, #0
   15794:	bl	186f0 <__assert_fail@plt+0x777c>
   15798:	mov	r0, r2
   1579c:	pop	{fp, pc}
   157a0:	push	{r4, r5, fp, lr}
   157a4:	add	fp, sp, #8
   157a8:	ldrd	r2, [r1, #8]
   157ac:	ldrd	r4, [r0, #8]
   157b0:	eor	r3, r5, r3
   157b4:	eor	r2, r4, r2
   157b8:	orrs	r2, r2, r3
   157bc:	mov	r2, #0
   157c0:	bne	157e0 <__assert_fail@plt+0x486c>
   157c4:	ldrd	r2, [r1]
   157c8:	ldrd	r0, [r0]
   157cc:	eor	r1, r1, r3
   157d0:	eor	r0, r0, r2
   157d4:	orr	r0, r0, r1
   157d8:	clz	r0, r0
   157dc:	lsr	r2, r0, #5
   157e0:	mov	r0, r2
   157e4:	pop	{r4, r5, fp, pc}
   157e8:	push	{r4, r5, fp, lr}
   157ec:	add	fp, sp, #8
   157f0:	ldr	r0, [r0]
   157f4:	ldrd	r2, [r0, #160]	; 0xa0
   157f8:	ldr	r0, [r1]
   157fc:	ldrd	r4, [r0, #160]	; 0xa0
   15800:	mov	r0, #0
   15804:	subs	r1, r4, r2
   15808:	sbcs	r1, r5, r3
   1580c:	movwcc	r0, #1
   15810:	subs	r1, r2, r4
   15814:	sbcs	r1, r3, r5
   15818:	subcc	r0, r0, #1
   1581c:	pop	{r4, r5, fp, pc}
   15820:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15824:	add	fp, sp, #24
   15828:	sub	sp, sp, #96	; 0x60
   1582c:	ldr	r7, [r0, #44]	; 0x2c
   15830:	mov	r4, r0
   15834:	mov	r5, #0
   15838:	ldrb	r0, [r7, #49]	; 0x31
   1583c:	tst	r0, #2
   15840:	beq	1593c <__assert_fail@plt+0x49c8>
   15844:	ldr	r6, [r7, #52]	; 0x34
   15848:	mov	r9, r1
   1584c:	cmp	r6, #0
   15850:	bne	15890 <__assert_fail@plt+0x491c>
   15854:	movw	r0, #13652	; 0x3554
   15858:	movw	r2, #22856	; 0x5948
   1585c:	movw	r3, #22888	; 0x5968
   15860:	mov	r1, #0
   15864:	mov	r8, #0
   15868:	movt	r0, #1
   1586c:	movt	r2, #1
   15870:	movt	r3, #1
   15874:	str	r0, [sp]
   15878:	mov	r0, #13
   1587c:	bl	171b4 <__assert_fail@plt+0x6240>
   15880:	mov	r6, r0
   15884:	cmp	r0, #0
   15888:	str	r0, [r7, #52]	; 0x34
   1588c:	beq	158c8 <__assert_fail@plt+0x4954>
   15890:	ldrd	r0, [r4, #64]	; 0x40
   15894:	str	r1, [sp, #12]
   15898:	str	r0, [sp, #8]
   1589c:	add	r1, sp, #8
   158a0:	mov	r0, r6
   158a4:	bl	16f00 <__assert_fail@plt+0x5f8c>
   158a8:	cmp	r0, #0
   158ac:	beq	158b8 <__assert_fail@plt+0x4944>
   158b0:	ldr	r5, [r0, #8]
   158b4:	b	1593c <__assert_fail@plt+0x49c8>
   158b8:	mov	r8, #1
   158bc:	cmp	r9, #0
   158c0:	bpl	158d4 <__assert_fail@plt+0x4960>
   158c4:	b	1593c <__assert_fail@plt+0x49c8>
   158c8:	mov	r6, #0
   158cc:	cmp	r9, #0
   158d0:	bmi	1593c <__assert_fail@plt+0x49c8>
   158d4:	add	r1, sp, #8
   158d8:	mov	r0, r9
   158dc:	bl	10cf8 <fstatfs64@plt>
   158e0:	cmp	r0, #0
   158e4:	bne	1593c <__assert_fail@plt+0x49c8>
   158e8:	cmp	r8, #0
   158ec:	beq	15938 <__assert_fail@plt+0x49c4>
   158f0:	mov	r0, #16
   158f4:	bl	18280 <__assert_fail@plt+0x730c>
   158f8:	cmp	r0, #0
   158fc:	beq	15938 <__assert_fail@plt+0x49c4>
   15900:	mov	r5, r0
   15904:	ldrd	r0, [r4, #64]	; 0x40
   15908:	ldr	r2, [sp, #8]
   1590c:	stm	r5, {r0, r1, r2}
   15910:	mov	r0, r6
   15914:	mov	r1, r5
   15918:	bl	17d08 <__assert_fail@plt+0x6d94>
   1591c:	cmp	r0, #0
   15920:	beq	15930 <__assert_fail@plt+0x49bc>
   15924:	cmp	r0, r5
   15928:	beq	15938 <__assert_fail@plt+0x49c4>
   1592c:	bl	10f38 <abort@plt>
   15930:	mov	r0, r5
   15934:	bl	13554 <__assert_fail@plt+0x25e0>
   15938:	ldr	r5, [sp, #8]
   1593c:	mov	r0, r5
   15940:	sub	sp, fp, #24
   15944:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15948:	push	{fp, lr}
   1594c:	mov	fp, sp
   15950:	mov	r2, r1
   15954:	ldrd	r0, [r0]
   15958:	mov	r3, #0
   1595c:	bl	186f0 <__assert_fail@plt+0x777c>
   15960:	mov	r0, r2
   15964:	pop	{fp, pc}
   15968:	ldrd	r2, [r1]
   1596c:	ldrd	r0, [r0]
   15970:	eor	r1, r1, r3
   15974:	eor	r0, r0, r2
   15978:	orr	r0, r0, r1
   1597c:	clz	r0, r0
   15980:	lsr	r0, r0, #5
   15984:	bx	lr
   15988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1598c:	add	fp, sp, #28
   15990:	sub	sp, sp, #92	; 0x5c
   15994:	mvn	r4, #0
   15998:	cmp	r0, #1
   1599c:	blt	16480 <__assert_fail@plt+0x550c>
   159a0:	ldr	ip, [fp, #16]
   159a4:	mov	r9, r2
   159a8:	mov	r2, r0
   159ac:	mov	r8, r1
   159b0:	mov	r0, #0
   159b4:	str	r3, [fp, #-48]	; 0xffffffd0
   159b8:	ldr	r6, [ip]
   159bc:	ldr	r4, [ip, #4]
   159c0:	str	r0, [ip, #12]
   159c4:	cmp	r6, #0
   159c8:	beq	159ec <__assert_fail@plt+0x4a78>
   159cc:	ldr	r0, [ip, #16]
   159d0:	cmp	r0, #0
   159d4:	beq	159f4 <__assert_fail@plt+0x4a80>
   159d8:	ldrb	r0, [r9]
   159dc:	cmp	r0, #45	; 0x2d
   159e0:	cmpne	r0, #43	; 0x2b
   159e4:	addeq	r9, r9, #1
   159e8:	b	15a68 <__assert_fail@plt+0x4af4>
   159ec:	mov	r6, #1
   159f0:	str	r6, [ip]
   159f4:	mov	r0, #0
   159f8:	str	r6, [ip, #28]
   159fc:	str	r6, [ip, #32]
   15a00:	str	r0, [ip, #20]
   15a04:	ldrb	r1, [r9]
   15a08:	cmp	r1, #43	; 0x2b
   15a0c:	beq	15a1c <__assert_fail@plt+0x4aa8>
   15a10:	cmp	r1, #45	; 0x2d
   15a14:	bne	15a28 <__assert_fail@plt+0x4ab4>
   15a18:	mov	r0, #2
   15a1c:	str	r0, [ip, #24]
   15a20:	add	r9, r9, #1
   15a24:	b	15a60 <__assert_fail@plt+0x4aec>
   15a28:	ldr	r0, [fp, #20]
   15a2c:	cmp	r0, #0
   15a30:	bne	15a58 <__assert_fail@plt+0x4ae4>
   15a34:	movw	r0, #35436	; 0x8a6c
   15a38:	mov	r5, ip
   15a3c:	mov	r7, r2
   15a40:	movt	r0, #1
   15a44:	bl	10e00 <getenv@plt>
   15a48:	mov	r2, r7
   15a4c:	mov	ip, r5
   15a50:	cmp	r0, #0
   15a54:	beq	1648c <__assert_fail@plt+0x5518>
   15a58:	mov	r0, #0
   15a5c:	str	r0, [ip, #24]
   15a60:	mov	r0, #1
   15a64:	str	r0, [ip, #16]
   15a68:	ldrb	r0, [r9]
   15a6c:	ldr	r5, [ip, #20]
   15a70:	str	r8, [fp, #-32]	; 0xffffffe0
   15a74:	subs	r1, r0, #58	; 0x3a
   15a78:	movne	r1, r4
   15a7c:	cmp	r5, #0
   15a80:	str	r1, [fp, #-44]	; 0xffffffd4
   15a84:	beq	15af0 <__assert_fail@plt+0x4b7c>
   15a88:	ldrb	r0, [r5]
   15a8c:	cmp	r0, #0
   15a90:	beq	15af0 <__assert_fail@plt+0x4b7c>
   15a94:	str	r2, [fp, #-36]	; 0xffffffdc
   15a98:	add	r8, r5, #1
   15a9c:	mov	r0, r9
   15aa0:	mov	r7, ip
   15aa4:	str	r8, [ip, #20]
   15aa8:	ldrb	r4, [r5]
   15aac:	mov	r1, r4
   15ab0:	bl	10e54 <strchr@plt>
   15ab4:	ldrb	r1, [r5, #1]
   15ab8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15abc:	cmp	r1, #0
   15ac0:	orr	r1, r4, #1
   15ac4:	addeq	r6, r6, #1
   15ac8:	streq	r6, [r7]
   15acc:	cmp	r1, #59	; 0x3b
   15ad0:	cmpne	r0, #0
   15ad4:	bne	15b50 <__assert_fail@plt+0x4bdc>
   15ad8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15adc:	cmp	r0, #0
   15ae0:	bne	164c0 <__assert_fail@plt+0x554c>
   15ae4:	str	r4, [r7, #8]
   15ae8:	mov	r4, #63	; 0x3f
   15aec:	b	16480 <__assert_fail@plt+0x550c>
   15af0:	mov	r3, ip
   15af4:	str	r9, [sp, #48]	; 0x30
   15af8:	mov	r5, ip
   15afc:	ldr	r9, [r3, #32]!
   15b00:	cmp	r9, r6
   15b04:	strgt	r6, [r3]
   15b08:	movgt	r9, r6
   15b0c:	ldr	r7, [r5, #28]!
   15b10:	cmp	r7, r6
   15b14:	strgt	r6, [r5]
   15b18:	movgt	r7, r6
   15b1c:	ldr	r4, [ip, #24]
   15b20:	cmp	r4, #1
   15b24:	bne	15fc8 <__assert_fail@plt+0x5054>
   15b28:	cmp	r7, r9
   15b2c:	cmpne	r9, r6
   15b30:	bne	15bd4 <__assert_fail@plt+0x4c60>
   15b34:	cmp	r9, r6
   15b38:	mov	r1, r5
   15b3c:	mov	r0, r6
   15b40:	bne	15f74 <__assert_fail@plt+0x5000>
   15b44:	cmp	r6, r2
   15b48:	blt	15f98 <__assert_fail@plt+0x5024>
   15b4c:	b	15fb4 <__assert_fail@plt+0x5040>
   15b50:	ldrb	r2, [r0]
   15b54:	ldrb	r1, [r0, #1]
   15b58:	cmp	r2, #87	; 0x57
   15b5c:	bne	15bac <__assert_fail@plt+0x4c38>
   15b60:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15b64:	cmp	r2, #0
   15b68:	beq	15bac <__assert_fail@plt+0x4c38>
   15b6c:	cmp	r1, #59	; 0x3b
   15b70:	bne	15bac <__assert_fail@plt+0x4c38>
   15b74:	ldrb	r0, [r8]
   15b78:	cmp	r0, #0
   15b7c:	bne	164f0 <__assert_fail@plt+0x557c>
   15b80:	cmp	r6, r3
   15b84:	bne	164e8 <__assert_fail@plt+0x5574>
   15b88:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15b8c:	cmp	r0, #0
   15b90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15b94:	bne	165e8 <__assert_fail@plt+0x5674>
   15b98:	str	r4, [r7, #8]
   15b9c:	ldrb	r4, [r9]
   15ba0:	cmp	r4, #58	; 0x3a
   15ba4:	movwne	r4, #63	; 0x3f
   15ba8:	b	16480 <__assert_fail@plt+0x550c>
   15bac:	cmp	r1, #58	; 0x3a
   15bb0:	bne	16480 <__assert_fail@plt+0x550c>
   15bb4:	ldrb	r0, [r0, #2]
   15bb8:	ldrb	r1, [r8]
   15bbc:	cmp	r0, #58	; 0x3a
   15bc0:	bne	160d0 <__assert_fail@plt+0x515c>
   15bc4:	cmp	r1, #0
   15bc8:	bne	160d8 <__assert_fail@plt+0x5164>
   15bcc:	mov	r0, #0
   15bd0:	b	165b0 <__assert_fail@plt+0x563c>
   15bd4:	cmp	r6, r9
   15bd8:	str	r4, [sp, #28]
   15bdc:	str	r5, [sp, #56]	; 0x38
   15be0:	str	r7, [fp, #-40]	; 0xffffffd8
   15be4:	str	r3, [sp, #52]	; 0x34
   15be8:	str	r2, [fp, #-36]	; 0xffffffdc
   15bec:	ble	15f50 <__assert_fail@plt+0x4fdc>
   15bf0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15bf4:	cmp	r0, r9
   15bf8:	bge	15f50 <__assert_fail@plt+0x4fdc>
   15bfc:	add	r0, r8, r9, lsl #2
   15c00:	ldr	lr, [fp, #-40]	; 0xffffffd8
   15c04:	mov	r2, r6
   15c08:	str	r0, [fp, #-52]	; 0xffffffcc
   15c0c:	sub	r0, r8, r9, lsl #2
   15c10:	str	r0, [sp, #32]
   15c14:	rsb	r0, r9, #1
   15c18:	add	r0, r8, r0, lsl #2
   15c1c:	str	r0, [sp, #44]	; 0x2c
   15c20:	mvn	r0, r9
   15c24:	str	r0, [fp, #-56]	; 0xffffffc8
   15c28:	add	r0, r8, r0, lsl #2
   15c2c:	add	r0, r0, #4
   15c30:	str	r0, [sp, #24]
   15c34:	add	r0, r8, #4
   15c38:	str	r0, [sp, #60]	; 0x3c
   15c3c:	b	15c50 <__assert_fail@plt+0x4cdc>
   15c40:	mov	r2, sl
   15c44:	cmp	r2, r9
   15c48:	cmpgt	r9, lr
   15c4c:	ble	15f50 <__assert_fail@plt+0x4fdc>
   15c50:	sub	r4, r9, lr
   15c54:	sub	r0, r2, r9
   15c58:	cmp	r0, r4
   15c5c:	ble	15d0c <__assert_fail@plt+0x4d98>
   15c60:	sub	sl, r2, r4
   15c64:	cmp	r4, #1
   15c68:	blt	15c40 <__assert_fail@plt+0x4ccc>
   15c6c:	mov	r3, #0
   15c70:	cmp	r4, #4
   15c74:	bcc	15df4 <__assert_fail@plt+0x4e80>
   15c78:	add	r5, r8, r2, lsl #2
   15c7c:	add	r1, r8, lr, lsl #2
   15c80:	cmp	r1, r5
   15c84:	bcs	15c98 <__assert_fail@plt+0x4d24>
   15c88:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15c8c:	add	r5, r8, sl, lsl #2
   15c90:	cmp	r5, r0
   15c94:	bcc	15df4 <__assert_fail@plt+0x4e80>
   15c98:	bic	r3, r4, #3
   15c9c:	mov	r0, #1
   15ca0:	str	sl, [sp, #40]	; 0x28
   15ca4:	subs	r5, r3, #4
   15ca8:	add	r5, r0, r5, lsr #2
   15cac:	and	r0, r5, #1
   15cb0:	str	r0, [sp, #36]	; 0x24
   15cb4:	beq	15db0 <__assert_fail@plt+0x4e3c>
   15cb8:	sub	r8, r5, r0
   15cbc:	ldr	r0, [sp, #24]
   15cc0:	add	r5, r2, lr
   15cc4:	mov	r7, #0
   15cc8:	add	sl, r0, r5, lsl #2
   15ccc:	mov	r5, #0
   15cd0:	add	ip, r1, r5
   15cd4:	add	r0, sl, r5
   15cd8:	add	r5, r5, #32
   15cdc:	subs	r8, r8, #2
   15ce0:	add	r7, r7, #8
   15ce4:	vld1.32	{d16-d17}, [r0]
   15ce8:	vld1.32	{d18-d19}, [ip]
   15cec:	vst1.32	{d16-d17}, [ip]!
   15cf0:	vst1.32	{d18-d19}, [r0]!
   15cf4:	vld1.32	{d16-d17}, [r0]
   15cf8:	vld1.32	{d18-d19}, [ip]
   15cfc:	vst1.32	{d16-d17}, [ip]
   15d00:	vst1.32	{d18-d19}, [r0]
   15d04:	bne	15cd0 <__assert_fail@plt+0x4d5c>
   15d08:	b	15db4 <__assert_fail@plt+0x4e40>
   15d0c:	cmp	r0, #1
   15d10:	blt	15f44 <__assert_fail@plt+0x4fd0>
   15d14:	mov	sl, #0
   15d18:	cmp	r0, #3
   15d1c:	bls	15ec0 <__assert_fail@plt+0x4f4c>
   15d20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15d24:	add	r1, r3, r2, lsl #2
   15d28:	add	r8, r3, lr, lsl #2
   15d2c:	cmp	r8, r1
   15d30:	bcs	15d4c <__assert_fail@plt+0x4dd8>
   15d34:	ldr	r3, [sp, #32]
   15d38:	add	r1, r2, lr
   15d3c:	add	r1, r3, r1, lsl #2
   15d40:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15d44:	cmp	r3, r1
   15d48:	bcc	15ec0 <__assert_fail@plt+0x4f4c>
   15d4c:	bic	sl, r0, #3
   15d50:	mov	r3, #1
   15d54:	subs	r1, sl, #4
   15d58:	add	r1, r3, r1, lsr #2
   15d5c:	and	r3, r1, #1
   15d60:	str	r3, [sp, #40]	; 0x28
   15d64:	beq	15e80 <__assert_fail@plt+0x4f0c>
   15d68:	sub	r7, r3, r1
   15d6c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15d70:	mov	r1, #0
   15d74:	mov	ip, #32
   15d78:	mov	r5, r3
   15d7c:	mov	r4, r8
   15d80:	adds	r7, r7, #2
   15d84:	add	r1, r1, #8
   15d88:	vld1.32	{d16-d17}, [r5]!
   15d8c:	vld1.32	{d18-d19}, [r4]!
   15d90:	vst1.32	{d16-d17}, [r8], ip
   15d94:	vst1.32	{d18-d19}, [r3], ip
   15d98:	vld1.32	{d16-d17}, [r5]
   15d9c:	vld1.32	{d18-d19}, [r4]
   15da0:	vst1.32	{d16-d17}, [r4]
   15da4:	vst1.32	{d18-d19}, [r5]
   15da8:	bne	15d78 <__assert_fail@plt+0x4e04>
   15dac:	b	15e84 <__assert_fail@plt+0x4f10>
   15db0:	mov	r7, #0
   15db4:	ldr	r0, [sp, #36]	; 0x24
   15db8:	ldr	r8, [fp, #-32]	; 0xffffffe0
   15dbc:	ldr	sl, [sp, #40]	; 0x28
   15dc0:	cmp	r0, #0
   15dc4:	beq	15de8 <__assert_fail@plt+0x4e74>
   15dc8:	add	r0, r7, lr
   15dcc:	add	r1, r7, sl
   15dd0:	add	r0, r8, r0, lsl #2
   15dd4:	add	r1, r8, r1, lsl #2
   15dd8:	vld1.32	{d16-d17}, [r1]
   15ddc:	vld1.32	{d18-d19}, [r0]
   15de0:	vst1.32	{d16-d17}, [r0]
   15de4:	vst1.32	{d18-d19}, [r1]
   15de8:	ldr	ip, [fp, #16]
   15dec:	cmp	r4, r3
   15df0:	beq	15c40 <__assert_fail@plt+0x4ccc>
   15df4:	mvn	r0, r3
   15df8:	tst	r4, #1
   15dfc:	add	r1, r9, r0
   15e00:	beq	15e20 <__assert_fail@plt+0x4eac>
   15e04:	add	r0, r3, lr
   15e08:	add	r5, r3, sl
   15e0c:	orr	r3, r3, #1
   15e10:	ldr	r7, [r8, r0, lsl #2]
   15e14:	ldr	r4, [r8, r5, lsl #2]
   15e18:	str	r4, [r8, r0, lsl #2]
   15e1c:	str	r7, [r8, r5, lsl #2]
   15e20:	cmp	r1, lr
   15e24:	beq	15c40 <__assert_fail@plt+0x4ccc>
   15e28:	ldr	r4, [sp, #60]	; 0x3c
   15e2c:	add	r0, lr, r3
   15e30:	sub	r1, r9, r3
   15e34:	add	r4, r4, r0, lsl #2
   15e38:	add	r0, r2, lr
   15e3c:	ldr	r2, [sp, #44]	; 0x2c
   15e40:	add	r0, r0, r3
   15e44:	add	r2, r2, r0, lsl #2
   15e48:	ldr	r0, [r4, #-4]
   15e4c:	ldr	r3, [r2, #-4]
   15e50:	sub	r1, r1, #2
   15e54:	cmp	lr, r1
   15e58:	str	r3, [r4, #-4]
   15e5c:	str	r0, [r2, #-4]
   15e60:	ldr	r0, [r4]
   15e64:	ldr	r3, [r2]
   15e68:	str	r3, [r4]
   15e6c:	str	r0, [r2]
   15e70:	add	r2, r2, #8
   15e74:	add	r4, r4, #8
   15e78:	bne	15e48 <__assert_fail@plt+0x4ed4>
   15e7c:	b	15c40 <__assert_fail@plt+0x4ccc>
   15e80:	mov	r1, #0
   15e84:	ldr	r3, [sp, #40]	; 0x28
   15e88:	ldr	ip, [fp, #16]
   15e8c:	cmp	r3, #0
   15e90:	beq	15eb8 <__assert_fail@plt+0x4f44>
   15e94:	ldr	r4, [fp, #-32]	; 0xffffffe0
   15e98:	add	r3, r1, lr
   15e9c:	add	r1, r1, r9
   15ea0:	add	r3, r4, r3, lsl #2
   15ea4:	add	r1, r4, r1, lsl #2
   15ea8:	vld1.32	{d16-d17}, [r1]
   15eac:	vld1.32	{d18-d19}, [r3]
   15eb0:	vst1.32	{d16-d17}, [r3]
   15eb4:	vst1.32	{d18-d19}, [r1]
   15eb8:	cmp	r0, sl
   15ebc:	beq	15f44 <__assert_fail@plt+0x4fd0>
   15ec0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15ec4:	tst	r0, #1
   15ec8:	mov	r4, sl
   15ecc:	add	r1, r2, r1
   15ed0:	beq	15ef4 <__assert_fail@plt+0x4f80>
   15ed4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ed8:	add	r7, sl, r9
   15edc:	add	r4, sl, lr
   15ee0:	ldr	r5, [r3, r7, lsl #2]
   15ee4:	ldr	r8, [r3, r4, lsl #2]
   15ee8:	str	r5, [r3, r4, lsl #2]
   15eec:	orr	r4, sl, #1
   15ef0:	str	r8, [r3, r7, lsl #2]
   15ef4:	cmp	r1, sl
   15ef8:	beq	15f44 <__assert_fail@plt+0x4fd0>
   15efc:	ldr	r3, [sp, #60]	; 0x3c
   15f00:	add	r1, lr, r4
   15f04:	add	r4, r9, r4
   15f08:	add	r1, r3, r1, lsl #2
   15f0c:	add	r3, r3, r4, lsl #2
   15f10:	sub	r4, r4, r2
   15f14:	ldr	r7, [r1, #-4]
   15f18:	ldr	r5, [r3, #-4]
   15f1c:	adds	r4, r4, #2
   15f20:	str	r5, [r1, #-4]
   15f24:	str	r7, [r3, #-4]
   15f28:	ldr	r7, [r1]
   15f2c:	ldr	r5, [r3]
   15f30:	str	r5, [r1]
   15f34:	str	r7, [r3]
   15f38:	add	r1, r1, #8
   15f3c:	add	r3, r3, #8
   15f40:	bne	15f14 <__assert_fail@plt+0x4fa0>
   15f44:	ldr	r8, [fp, #-32]	; 0xffffffe0
   15f48:	add	lr, r0, lr
   15f4c:	b	15c44 <__assert_fail@plt+0x4cd0>
   15f50:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15f54:	ldr	r3, [sp, #52]	; 0x34
   15f58:	ldr	r5, [sp, #56]	; 0x38
   15f5c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15f60:	ldr	r4, [sp, #28]
   15f64:	add	r0, r0, r6
   15f68:	mov	r1, r3
   15f6c:	sub	r0, r0, r9
   15f70:	str	r0, [r5]
   15f74:	mov	r7, r0
   15f78:	str	r6, [r1]
   15f7c:	cmp	r6, r2
   15f80:	blt	15f98 <__assert_fail@plt+0x5024>
   15f84:	b	15fb4 <__assert_fail@plt+0x5040>
   15f88:	add	r6, r6, #1
   15f8c:	cmp	r2, r6
   15f90:	str	r6, [ip]
   15f94:	beq	15fbc <__assert_fail@plt+0x5048>
   15f98:	ldr	r0, [r8, r6, lsl #2]
   15f9c:	ldrb	r1, [r0]
   15fa0:	cmp	r1, #45	; 0x2d
   15fa4:	bne	15f88 <__assert_fail@plt+0x5014>
   15fa8:	ldrb	r0, [r0, #1]
   15fac:	cmp	r0, #0
   15fb0:	beq	15f88 <__assert_fail@plt+0x5014>
   15fb4:	mov	r9, r6
   15fb8:	b	15fc0 <__assert_fail@plt+0x504c>
   15fbc:	mov	r9, r2
   15fc0:	mov	r6, r9
   15fc4:	str	r9, [r3]
   15fc8:	cmp	r6, r2
   15fcc:	beq	16474 <__assert_fail@plt+0x5500>
   15fd0:	mov	sl, r4
   15fd4:	movw	r4, #35360	; 0x8a20
   15fd8:	ldr	r0, [r8, r6, lsl #2]
   15fdc:	str	r5, [sp, #56]	; 0x38
   15fe0:	str	r7, [fp, #-40]	; 0xffffffd8
   15fe4:	str	r3, [sp, #52]	; 0x34
   15fe8:	str	r2, [fp, #-36]	; 0xffffffdc
   15fec:	movt	r4, #1
   15ff0:	mov	r1, r4
   15ff4:	bl	10d1c <strcmp@plt>
   15ff8:	cmp	r0, #0
   15ffc:	beq	16080 <__assert_fail@plt+0x510c>
   16000:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16004:	ldr	ip, [fp, #16]
   16008:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1600c:	cmp	r6, r2
   16010:	beq	16474 <__assert_fail@plt+0x5500>
   16014:	ldr	r5, [r8, r6, lsl #2]
   16018:	mov	r3, r4
   1601c:	mvn	r4, #0
   16020:	ldrb	r0, [r5]
   16024:	cmp	r0, #45	; 0x2d
   16028:	bne	160b8 <__assert_fail@plt+0x5144>
   1602c:	mov	r7, r5
   16030:	ldrb	r1, [r7, #1]!
   16034:	cmp	r1, #0
   16038:	beq	160b8 <__assert_fail@plt+0x5144>
   1603c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16040:	cmp	r0, #0
   16044:	beq	165d8 <__assert_fail@plt+0x5664>
   16048:	ldr	r9, [fp, #12]
   1604c:	cmp	r1, #45	; 0x2d
   16050:	bne	1653c <__assert_fail@plt+0x55c8>
   16054:	add	r0, r5, #2
   16058:	mov	r1, r8
   1605c:	str	r0, [ip, #20]
   16060:	ldr	r0, [fp, #8]
   16064:	stm	sp, {r0, r9, ip}
   16068:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1606c:	str	r3, [sp, #16]
   16070:	str	r0, [sp, #12]
   16074:	mov	r0, r2
   16078:	ldr	r2, [sp, #48]	; 0x30
   1607c:	b	1652c <__assert_fail@plt+0x55b8>
   16080:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16084:	ldr	ip, [fp, #16]
   16088:	ldr	lr, [fp, #-36]	; 0xffffffdc
   1608c:	add	r2, r6, #1
   16090:	cmp	r0, r9
   16094:	str	r2, [ip]
   16098:	cmpne	r9, r2
   1609c:	bne	160e8 <__assert_fail@plt+0x5174>
   160a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   160a4:	ldr	r1, [sp, #56]	; 0x38
   160a8:	cmp	r0, r9
   160ac:	mov	r0, r2
   160b0:	beq	1645c <__assert_fail@plt+0x54e8>
   160b4:	b	16464 <__assert_fail@plt+0x54f0>
   160b8:	cmp	sl, #0
   160bc:	addne	r0, r6, #1
   160c0:	strne	r5, [ip, #12]
   160c4:	movne	r4, #1
   160c8:	strne	r0, [ip]
   160cc:	b	16480 <__assert_fail@plt+0x550c>
   160d0:	cmp	r1, #0
   160d4:	beq	16494 <__assert_fail@plt+0x5520>
   160d8:	add	r0, r6, #1
   160dc:	str	r8, [r7, #12]
   160e0:	str	r0, [r7]
   160e4:	b	165b4 <__assert_fail@plt+0x5640>
   160e8:	cmp	r6, r9
   160ec:	str	r2, [sp, #48]	; 0x30
   160f0:	blt	1643c <__assert_fail@plt+0x54c8>
   160f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   160f8:	cmp	r0, r9
   160fc:	bge	1643c <__assert_fail@plt+0x54c8>
   16100:	add	r0, r8, r9, lsl #2
   16104:	ldr	ip, [fp, #-40]	; 0xffffffd8
   16108:	str	r0, [fp, #-44]	; 0xffffffd4
   1610c:	sub	r0, r8, r9, lsl #2
   16110:	str	r0, [sp, #44]	; 0x2c
   16114:	rsb	r0, r9, #1
   16118:	add	r0, r8, r0, lsl #2
   1611c:	str	r0, [fp, #-56]	; 0xffffffc8
   16120:	mvn	r0, r9
   16124:	str	r0, [fp, #-48]	; 0xffffffd0
   16128:	add	r0, r8, r0, lsl #2
   1612c:	add	r0, r0, #4
   16130:	str	r0, [sp, #40]	; 0x28
   16134:	add	r0, r8, #4
   16138:	str	r0, [fp, #-52]	; 0xffffffcc
   1613c:	ldr	r0, [sp, #48]	; 0x30
   16140:	b	16154 <__assert_fail@plt+0x51e0>
   16144:	mov	r0, r3
   16148:	cmp	r0, r9
   1614c:	cmpgt	r9, ip
   16150:	ble	1643c <__assert_fail@plt+0x54c8>
   16154:	sub	r4, r9, ip
   16158:	sub	sl, r0, r9
   1615c:	cmp	sl, r4
   16160:	ble	1620c <__assert_fail@plt+0x5298>
   16164:	sub	r3, r0, r4
   16168:	cmp	r4, #1
   1616c:	blt	16144 <__assert_fail@plt+0x51d0>
   16170:	mov	r1, #0
   16174:	cmp	r4, #4
   16178:	bcc	162ec <__assert_fail@plt+0x5378>
   1617c:	add	r2, r8, r0, lsl #2
   16180:	add	r7, r8, ip, lsl #2
   16184:	cmp	r7, r2
   16188:	bcs	1619c <__assert_fail@plt+0x5228>
   1618c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   16190:	add	r2, r8, r3, lsl #2
   16194:	cmp	r2, r5
   16198:	bcc	162ec <__assert_fail@plt+0x5378>
   1619c:	bic	r1, r4, #3
   161a0:	mov	r6, #1
   161a4:	subs	r2, r1, #4
   161a8:	add	r2, r6, r2, lsr #2
   161ac:	and	r6, r2, #1
   161b0:	str	r6, [sp, #60]	; 0x3c
   161b4:	beq	162ac <__assert_fail@plt+0x5338>
   161b8:	ldr	r5, [sp, #40]	; 0x28
   161bc:	sub	r2, r6, r2
   161c0:	add	r6, ip, r0
   161c4:	add	lr, r5, r6, lsl #2
   161c8:	mov	r5, #0
   161cc:	mov	r6, #0
   161d0:	add	sl, r7, r5
   161d4:	add	r8, lr, r5
   161d8:	adds	r2, r2, #2
   161dc:	add	r5, r5, #32
   161e0:	add	r6, r6, #8
   161e4:	vld1.32	{d16-d17}, [r8]
   161e8:	vld1.32	{d18-d19}, [sl]
   161ec:	vst1.32	{d16-d17}, [sl]!
   161f0:	vst1.32	{d18-d19}, [r8]!
   161f4:	vld1.32	{d16-d17}, [r8]
   161f8:	vld1.32	{d18-d19}, [sl]
   161fc:	vst1.32	{d16-d17}, [sl]
   16200:	vst1.32	{d18-d19}, [r8]
   16204:	bne	161d0 <__assert_fail@plt+0x525c>
   16208:	b	162b0 <__assert_fail@plt+0x533c>
   1620c:	cmp	sl, #1
   16210:	blt	16434 <__assert_fail@plt+0x54c0>
   16214:	mov	r1, #0
   16218:	cmp	sl, #3
   1621c:	bls	163b4 <__assert_fail@plt+0x5440>
   16220:	add	r2, r8, r0, lsl #2
   16224:	add	r7, r8, ip, lsl #2
   16228:	cmp	r7, r2
   1622c:	bcs	16248 <__assert_fail@plt+0x52d4>
   16230:	ldr	r3, [sp, #44]	; 0x2c
   16234:	add	r2, ip, r0
   16238:	add	r2, r3, r2, lsl #2
   1623c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16240:	cmp	r3, r2
   16244:	bcc	163b4 <__assert_fail@plt+0x5440>
   16248:	bic	r1, sl, #3
   1624c:	mov	r3, #1
   16250:	subs	r2, r1, #4
   16254:	add	r2, r3, r2, lsr #2
   16258:	and	r3, r2, #1
   1625c:	str	r3, [sp, #60]	; 0x3c
   16260:	beq	16378 <__assert_fail@plt+0x5404>
   16264:	ldr	r5, [fp, #-44]	; 0xffffffd4
   16268:	sub	r6, r3, r2
   1626c:	mov	r4, #0
   16270:	mov	lr, #32
   16274:	mov	r2, r5
   16278:	mov	r3, r7
   1627c:	adds	r6, r6, #2
   16280:	add	r4, r4, #8
   16284:	vld1.32	{d16-d17}, [r2]!
   16288:	vld1.32	{d18-d19}, [r3]!
   1628c:	vst1.32	{d16-d17}, [r7], lr
   16290:	vst1.32	{d18-d19}, [r5], lr
   16294:	vld1.32	{d16-d17}, [r2]
   16298:	vld1.32	{d18-d19}, [r3]
   1629c:	vst1.32	{d16-d17}, [r3]
   162a0:	vst1.32	{d18-d19}, [r2]
   162a4:	bne	16274 <__assert_fail@plt+0x5300>
   162a8:	b	1637c <__assert_fail@plt+0x5408>
   162ac:	mov	r6, #0
   162b0:	ldr	r2, [sp, #60]	; 0x3c
   162b4:	ldr	r8, [fp, #-32]	; 0xffffffe0
   162b8:	ldr	lr, [fp, #-36]	; 0xffffffdc
   162bc:	cmp	r2, #0
   162c0:	beq	162e4 <__assert_fail@plt+0x5370>
   162c4:	add	r2, r6, ip
   162c8:	add	r7, r6, r3
   162cc:	add	r2, r8, r2, lsl #2
   162d0:	add	r7, r8, r7, lsl #2
   162d4:	vld1.32	{d16-d17}, [r7]
   162d8:	vld1.32	{d18-d19}, [r2]
   162dc:	vst1.32	{d16-d17}, [r2]
   162e0:	vst1.32	{d18-d19}, [r7]
   162e4:	cmp	r4, r1
   162e8:	beq	16144 <__assert_fail@plt+0x51d0>
   162ec:	mvn	r2, r1
   162f0:	tst	r4, #1
   162f4:	add	r2, r9, r2
   162f8:	beq	16318 <__assert_fail@plt+0x53a4>
   162fc:	add	r7, r1, ip
   16300:	add	r5, r1, r3
   16304:	orr	r1, r1, #1
   16308:	ldr	r6, [r8, r7, lsl #2]
   1630c:	ldr	r4, [r8, r5, lsl #2]
   16310:	str	r4, [r8, r7, lsl #2]
   16314:	str	r6, [r8, r5, lsl #2]
   16318:	cmp	r2, ip
   1631c:	beq	16144 <__assert_fail@plt+0x51d0>
   16320:	add	r0, ip, r0
   16324:	sub	r2, r9, r1
   16328:	add	r7, ip, r1
   1632c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   16330:	add	r0, r0, r1
   16334:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16338:	add	r7, r4, r7, lsl #2
   1633c:	add	r0, r1, r0, lsl #2
   16340:	ldr	r1, [r7, #-4]
   16344:	ldr	r6, [r0, #-4]
   16348:	sub	r2, r2, #2
   1634c:	cmp	ip, r2
   16350:	str	r6, [r7, #-4]
   16354:	str	r1, [r0, #-4]
   16358:	ldr	r1, [r7]
   1635c:	ldr	r6, [r0]
   16360:	str	r6, [r7]
   16364:	str	r1, [r0]
   16368:	add	r0, r0, #8
   1636c:	add	r7, r7, #8
   16370:	bne	16340 <__assert_fail@plt+0x53cc>
   16374:	b	16144 <__assert_fail@plt+0x51d0>
   16378:	mov	r4, #0
   1637c:	ldr	r2, [sp, #60]	; 0x3c
   16380:	cmp	r2, #0
   16384:	beq	163a8 <__assert_fail@plt+0x5434>
   16388:	add	r2, r4, ip
   1638c:	add	r3, r4, r9
   16390:	add	r2, r8, r2, lsl #2
   16394:	add	r3, r8, r3, lsl #2
   16398:	vld1.32	{d16-d17}, [r3]
   1639c:	vld1.32	{d18-d19}, [r2]
   163a0:	vst1.32	{d16-d17}, [r2]
   163a4:	vst1.32	{d18-d19}, [r3]
   163a8:	ldr	lr, [fp, #-36]	; 0xffffffdc
   163ac:	cmp	sl, r1
   163b0:	beq	16434 <__assert_fail@plt+0x54c0>
   163b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   163b8:	tst	sl, #1
   163bc:	mov	r3, r1
   163c0:	add	r2, r0, r2
   163c4:	beq	163e4 <__assert_fail@plt+0x5470>
   163c8:	add	r6, r1, r9
   163cc:	add	r3, r1, ip
   163d0:	ldr	r5, [r8, r6, lsl #2]
   163d4:	ldr	r7, [r8, r3, lsl #2]
   163d8:	str	r5, [r8, r3, lsl #2]
   163dc:	orr	r3, r1, #1
   163e0:	str	r7, [r8, r6, lsl #2]
   163e4:	cmp	r2, r1
   163e8:	beq	16434 <__assert_fail@plt+0x54c0>
   163ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   163f0:	add	r1, ip, r3
   163f4:	add	r3, r9, r3
   163f8:	add	r1, r2, r1, lsl #2
   163fc:	add	r2, r2, r3, lsl #2
   16400:	sub	r3, r3, r0
   16404:	ldr	r7, [r1, #-4]
   16408:	ldr	r6, [r2, #-4]
   1640c:	adds	r3, r3, #2
   16410:	str	r6, [r1, #-4]
   16414:	str	r7, [r2, #-4]
   16418:	ldr	r7, [r1]
   1641c:	ldr	r6, [r2]
   16420:	str	r6, [r1]
   16424:	str	r7, [r2]
   16428:	add	r1, r1, #8
   1642c:	add	r2, r2, #8
   16430:	bne	16404 <__assert_fail@plt+0x5490>
   16434:	add	ip, sl, ip
   16438:	b	16148 <__assert_fail@plt+0x51d4>
   1643c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16440:	ldr	r2, [sp, #48]	; 0x30
   16444:	ldr	r1, [sp, #56]	; 0x38
   16448:	ldr	ip, [fp, #16]
   1644c:	add	r0, r0, r2
   16450:	sub	r0, r0, r9
   16454:	str	r0, [r1]
   16458:	ldr	r1, [sp, #52]	; 0x34
   1645c:	str	r2, [r1]
   16460:	str	r0, [fp, #-40]	; 0xffffffd8
   16464:	ldr	r7, [fp, #-40]	; 0xffffffd8
   16468:	str	lr, [ip]
   1646c:	str	lr, [ip, #32]
   16470:	mov	r9, lr
   16474:	cmp	r7, r9
   16478:	mvn	r4, #0
   1647c:	strne	r7, [ip]
   16480:	mov	r0, r4
   16484:	sub	sp, fp, #28
   16488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1648c:	mov	r0, #1
   16490:	b	15a5c <__assert_fail@plt+0x4ae8>
   16494:	cmp	r6, r3
   16498:	bne	165a0 <__assert_fail@plt+0x562c>
   1649c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   164a0:	cmp	r0, #0
   164a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   164a8:	bne	1660c <__assert_fail@plt+0x5698>
   164ac:	str	r4, [r7, #8]
   164b0:	ldrb	r4, [r9]
   164b4:	cmp	r4, #58	; 0x3a
   164b8:	movwne	r4, #63	; 0x3f
   164bc:	b	165b4 <__assert_fail@plt+0x5640>
   164c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   164c4:	movw	r1, #35363	; 0x8a23
   164c8:	mov	r3, r4
   164cc:	movt	r1, #1
   164d0:	ldr	r2, [r0]
   164d4:	movw	r0, #37136	; 0x9110
   164d8:	movt	r0, #2
   164dc:	ldr	r0, [r0]
   164e0:	bl	10e6c <fprintf@plt>
   164e4:	b	15ae4 <__assert_fail@plt+0x4b70>
   164e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   164ec:	ldr	r8, [r0, r6, lsl #2]
   164f0:	ldr	r2, [fp, #8]
   164f4:	movw	r1, #35432	; 0x8a68
   164f8:	str	r8, [r7, #12]
   164fc:	mov	r0, #0
   16500:	movt	r1, #1
   16504:	str	r0, [r7, #12]
   16508:	str	r8, [r7, #20]
   1650c:	str	r2, [sp]
   16510:	stmib	sp, {r0, r7}
   16514:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16518:	str	r1, [sp, #16]
   1651c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16520:	mov	r2, r9
   16524:	str	r0, [sp, #12]
   16528:	mov	r0, r3
   1652c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16530:	bl	16630 <__assert_fail@plt+0x56bc>
   16534:	sub	sp, fp, #28
   16538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1653c:	cmp	r9, #0
   16540:	beq	165d8 <__assert_fail@plt+0x5664>
   16544:	ldrb	r0, [r5, #2]
   16548:	cmp	r0, #0
   1654c:	beq	165c0 <__assert_fail@plt+0x564c>
   16550:	ldr	r1, [fp, #8]
   16554:	movw	r0, #35361	; 0x8a21
   16558:	str	r7, [ip, #20]
   1655c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16560:	movt	r0, #1
   16564:	stm	sp, {r1, r9, ip}
   16568:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1656c:	str	r0, [sp, #16]
   16570:	mov	r0, r2
   16574:	ldr	r2, [sp, #48]	; 0x30
   16578:	str	r1, [sp, #12]
   1657c:	mov	r1, r8
   16580:	bl	16630 <__assert_fail@plt+0x56bc>
   16584:	ldr	ip, [fp, #16]
   16588:	mov	r4, r0
   1658c:	cmn	r0, #1
   16590:	bne	16480 <__assert_fail@plt+0x550c>
   16594:	ldr	r6, [ip]
   16598:	ldr	r5, [r8, r6, lsl #2]
   1659c:	b	165d8 <__assert_fail@plt+0x5664>
   165a0:	add	r0, r6, #1
   165a4:	str	r0, [r7]
   165a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   165ac:	ldr	r0, [r0, r6, lsl #2]
   165b0:	str	r0, [r7, #12]
   165b4:	mov	r0, #0
   165b8:	str	r0, [r7, #20]
   165bc:	b	16480 <__assert_fail@plt+0x550c>
   165c0:	ldr	r0, [sp, #48]	; 0x30
   165c4:	bl	10e54 <strchr@plt>
   165c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   165cc:	ldr	ip, [fp, #16]
   165d0:	cmp	r0, #0
   165d4:	beq	16550 <__assert_fail@plt+0x55dc>
   165d8:	ldr	r9, [sp, #48]	; 0x30
   165dc:	add	r5, r5, #1
   165e0:	str	r5, [ip, #20]
   165e4:	b	15a98 <__assert_fail@plt+0x4b24>
   165e8:	ldr	r2, [r0]
   165ec:	movw	r0, #37136	; 0x9110
   165f0:	movw	r1, #35391	; 0x8a3f
   165f4:	mov	r3, r4
   165f8:	movt	r0, #2
   165fc:	movt	r1, #1
   16600:	ldr	r0, [r0]
   16604:	bl	10e6c <fprintf@plt>
   16608:	b	15b98 <__assert_fail@plt+0x4c24>
   1660c:	ldr	r2, [r0]
   16610:	movw	r0, #37136	; 0x9110
   16614:	movw	r1, #35391	; 0x8a3f
   16618:	mov	r3, r4
   1661c:	movt	r0, #2
   16620:	movt	r1, #1
   16624:	ldr	r0, [r0]
   16628:	bl	10e6c <fprintf@plt>
   1662c:	b	164ac <__assert_fail@plt+0x5538>
   16630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16634:	add	fp, sp, #28
   16638:	sub	sp, sp, #44	; 0x2c
   1663c:	str	r0, [sp, #12]
   16640:	ldr	r0, [fp, #16]
   16644:	ldr	r5, [fp, #8]
   16648:	str	r2, [sp, #16]
   1664c:	str	r1, [sp, #20]
   16650:	ldr	r9, [r0, #20]
   16654:	mov	r6, r9
   16658:	b	16660 <__assert_fail@plt+0x56ec>
   1665c:	add	r6, r6, #1
   16660:	ldrb	r0, [r6]
   16664:	cmp	r0, #0
   16668:	cmpne	r0, #61	; 0x3d
   1666c:	bne	1665c <__assert_fail@plt+0x56e8>
   16670:	ldr	sl, [r3]
   16674:	mvn	ip, #0
   16678:	str	r3, [fp, #-32]	; 0xffffffe0
   1667c:	cmp	sl, #0
   16680:	beq	16890 <__assert_fail@plt+0x591c>
   16684:	sub	r4, r6, r9
   16688:	mov	r8, #0
   1668c:	mov	r5, sl
   16690:	mov	r7, r3
   16694:	b	166a8 <__assert_fail@plt+0x5734>
   16698:	ldr	r5, [r7, #16]!
   1669c:	add	r8, r8, #1
   166a0:	cmp	r5, #0
   166a4:	beq	166dc <__assert_fail@plt+0x5768>
   166a8:	mov	r0, r5
   166ac:	mov	r1, r9
   166b0:	mov	r2, r4
   166b4:	bl	10f2c <strncmp@plt>
   166b8:	cmp	r0, #0
   166bc:	bne	16698 <__assert_fail@plt+0x5724>
   166c0:	mov	r0, r5
   166c4:	bl	10e48 <strlen@plt>
   166c8:	cmp	r4, r0
   166cc:	bne	16698 <__assert_fail@plt+0x5724>
   166d0:	ldr	r5, [fp, #8]
   166d4:	mov	ip, r8
   166d8:	b	16940 <__assert_fail@plt+0x59cc>
   166dc:	cmp	sl, #0
   166e0:	beq	168bc <__assert_fail@plt+0x5948>
   166e4:	mvn	r0, #0
   166e8:	str	r4, [sp, #36]	; 0x24
   166ec:	mov	r4, #0
   166f0:	mov	r5, #0
   166f4:	mov	r7, #0
   166f8:	str	r0, [sp, #24]
   166fc:	mov	r0, #0
   16700:	str	r0, [sp, #32]
   16704:	mov	r0, #0
   16708:	str	r0, [sp, #8]
   1670c:	mov	r0, #0
   16710:	str	r0, [sp, #28]
   16714:	ldr	r2, [sp, #36]	; 0x24
   16718:	mov	r0, sl
   1671c:	mov	r1, r9
   16720:	bl	10f2c <strncmp@plt>
   16724:	cmp	r0, #0
   16728:	beq	1675c <__assert_fail@plt+0x57e8>
   1672c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16730:	mov	r1, r4
   16734:	add	r0, r3, r5, lsl #4
   16738:	ldr	sl, [r0, #16]
   1673c:	cmp	sl, #0
   16740:	beq	168a8 <__assert_fail@plt+0x5934>
   16744:	ldr	r0, [fp, #16]
   16748:	add	r1, r1, #16
   1674c:	add	r5, r5, #1
   16750:	mov	r4, r1
   16754:	ldr	r9, [r0, #20]
   16758:	b	16714 <__assert_fail@plt+0x57a0>
   1675c:	cmp	r7, #0
   16760:	beq	16814 <__assert_fail@plt+0x58a0>
   16764:	ldr	r0, [fp, #12]
   16768:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1676c:	cmp	r0, #0
   16770:	bne	16798 <__assert_fail@plt+0x5824>
   16774:	add	r0, r3, r5, lsl #4
   16778:	ldr	r2, [r7, #4]
   1677c:	ldr	r1, [r0, #4]
   16780:	cmp	r2, r1
   16784:	bne	16798 <__assert_fail@plt+0x5824>
   16788:	ldr	r1, [r0, #8]
   1678c:	ldr	r2, [r7, #8]
   16790:	cmp	r2, r1
   16794:	beq	1684c <__assert_fail@plt+0x58d8>
   16798:	ldr	r0, [sp, #32]
   1679c:	mov	r1, r4
   167a0:	cmp	r0, #0
   167a4:	bne	16734 <__assert_fail@plt+0x57c0>
   167a8:	ldr	r0, [fp, #20]
   167ac:	cmp	r0, #0
   167b0:	beq	16828 <__assert_fail@plt+0x58b4>
   167b4:	ldr	r9, [sp, #28]
   167b8:	mov	r0, #0
   167bc:	str	r0, [sp, #32]
   167c0:	cmp	r9, #0
   167c4:	bne	1683c <__assert_fail@plt+0x58c8>
   167c8:	mov	r0, r8
   167cc:	bl	18280 <__assert_fail@plt+0x730c>
   167d0:	cmp	r0, #0
   167d4:	beq	1687c <__assert_fail@plt+0x5908>
   167d8:	mov	r9, r0
   167dc:	mov	r0, #0
   167e0:	mov	r1, #0
   167e4:	mov	r2, r8
   167e8:	str	r0, [sp, #32]
   167ec:	mov	r0, r9
   167f0:	bl	10e90 <memset@plt>
   167f4:	ldr	r0, [sp, #24]
   167f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   167fc:	mov	r1, #1
   16800:	mov	r2, #1
   16804:	str	r1, [sp, #8]
   16808:	mov	r1, r4
   1680c:	strb	r2, [r9, r0]
   16810:	b	1683c <__assert_fail@plt+0x58c8>
   16814:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16818:	mov	r1, r4
   1681c:	str	r5, [sp, #24]
   16820:	add	r7, r3, r4
   16824:	b	16734 <__assert_fail@plt+0x57c0>
   16828:	ldr	r9, [sp, #28]
   1682c:	mov	r0, #1
   16830:	str	r0, [sp, #32]
   16834:	cmp	r9, #0
   16838:	beq	16870 <__assert_fail@plt+0x58fc>
   1683c:	mov	r0, #1
   16840:	str	r9, [sp, #28]
   16844:	strb	r0, [r9, r5]
   16848:	b	16734 <__assert_fail@plt+0x57c0>
   1684c:	ldr	r1, [sp, #32]
   16850:	cmp	r1, #0
   16854:	bne	16730 <__assert_fail@plt+0x57bc>
   16858:	ldr	r0, [r0, #12]
   1685c:	ldr	r1, [r7, #12]
   16860:	cmp	r1, r0
   16864:	mov	r1, r4
   16868:	bne	167a8 <__assert_fail@plt+0x5834>
   1686c:	b	16734 <__assert_fail@plt+0x57c0>
   16870:	mov	r0, #0
   16874:	str	r0, [sp, #28]
   16878:	b	16734 <__assert_fail@plt+0x57c0>
   1687c:	mov	r0, #1
   16880:	str	r0, [sp, #32]
   16884:	mov	r0, #0
   16888:	str	r0, [sp, #28]
   1688c:	b	1672c <__assert_fail@plt+0x57b8>
   16890:	mov	r0, #0
   16894:	mov	r8, #0
   16898:	mov	r7, #0
   1689c:	mov	sl, #0
   168a0:	mov	r4, #0
   168a4:	b	168d4 <__assert_fail@plt+0x5960>
   168a8:	ldr	r5, [fp, #8]
   168ac:	ldr	ip, [sp, #24]
   168b0:	ldr	sl, [sp, #28]
   168b4:	ldr	r4, [sp, #8]
   168b8:	b	168d8 <__assert_fail@plt+0x5964>
   168bc:	ldr	r5, [fp, #8]
   168c0:	mov	r0, #0
   168c4:	mov	r7, #0
   168c8:	mov	sl, #0
   168cc:	mov	r4, #0
   168d0:	mvn	ip, #0
   168d4:	str	r0, [sp, #32]
   168d8:	cmp	sl, #0
   168dc:	ldreq	r0, [sp, #32]
   168e0:	cmpeq	r0, #0
   168e4:	beq	16938 <__assert_fail@plt+0x59c4>
   168e8:	ldr	r0, [fp, #20]
   168ec:	cmp	r0, #0
   168f0:	bne	16aa4 <__assert_fail@plt+0x5b30>
   168f4:	cmp	r4, #0
   168f8:	beq	16904 <__assert_fail@plt+0x5990>
   168fc:	mov	r0, sl
   16900:	bl	13554 <__assert_fail@plt+0x25e0>
   16904:	ldr	r0, [fp, #16]
   16908:	ldr	r4, [r0, #20]
   1690c:	mov	r5, r0
   16910:	mov	r0, r4
   16914:	bl	10e48 <strlen@plt>
   16918:	mov	r1, #0
   1691c:	add	r0, r4, r0
   16920:	str	r1, [r5, #8]
   16924:	str	r0, [r5, #20]
   16928:	ldr	r0, [r5]
   1692c:	add	r0, r0, #1
   16930:	str	r0, [r5]
   16934:	b	16a68 <__assert_fail@plt+0x5af4>
   16938:	cmp	r7, #0
   1693c:	beq	169d8 <__assert_fail@plt+0x5a64>
   16940:	ldr	r1, [fp, #16]
   16944:	mov	r0, #0
   16948:	str	r0, [r1, #20]
   1694c:	mov	r2, r1
   16950:	ldr	r1, [r1]
   16954:	add	r0, r1, #1
   16958:	str	r0, [r2]
   1695c:	ldrb	r3, [r6]
   16960:	ldr	r2, [r7, #4]
   16964:	cmp	r3, #0
   16968:	beq	16984 <__assert_fail@plt+0x5a10>
   1696c:	cmp	r2, #0
   16970:	beq	16a50 <__assert_fail@plt+0x5adc>
   16974:	ldr	r1, [fp, #16]
   16978:	add	r0, r6, #1
   1697c:	str	r0, [r1, #12]
   16980:	b	169b0 <__assert_fail@plt+0x5a3c>
   16984:	cmp	r2, #1
   16988:	bne	169b0 <__assert_fail@plt+0x5a3c>
   1698c:	ldr	r2, [sp, #12]
   16990:	cmp	r0, r2
   16994:	bge	16a74 <__assert_fail@plt+0x5b00>
   16998:	ldr	r2, [fp, #16]
   1699c:	add	r1, r1, #2
   169a0:	str	r1, [r2]
   169a4:	ldr	r1, [sp, #20]
   169a8:	ldr	r0, [r1, r0, lsl #2]
   169ac:	str	r0, [r2, #12]
   169b0:	cmp	r5, #0
   169b4:	strne	ip, [r5]
   169b8:	ldr	r1, [r7, #8]
   169bc:	ldr	r0, [r7, #12]
   169c0:	cmp	r1, #0
   169c4:	beq	16a9c <__assert_fail@plt+0x5b28>
   169c8:	str	r0, [r1]
   169cc:	mov	r0, #0
   169d0:	sub	sp, fp, #28
   169d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169d8:	ldr	r0, [fp, #12]
   169dc:	cmp	r0, #0
   169e0:	beq	16a24 <__assert_fail@plt+0x5ab0>
   169e4:	ldr	r0, [fp, #16]
   169e8:	ldr	r1, [sp, #20]
   169ec:	ldr	r0, [r0]
   169f0:	ldr	r0, [r1, r0, lsl #2]
   169f4:	ldrb	r0, [r0, #1]
   169f8:	cmp	r0, #45	; 0x2d
   169fc:	beq	16a24 <__assert_fail@plt+0x5ab0>
   16a00:	ldr	r0, [fp, #16]
   16a04:	ldr	r0, [r0, #20]
   16a08:	ldrb	r1, [r0]
   16a0c:	ldr	r0, [sp, #16]
   16a10:	bl	10e54 <strchr@plt>
   16a14:	mov	r1, r0
   16a18:	mvn	r0, #0
   16a1c:	cmp	r1, #0
   16a20:	bne	16a9c <__assert_fail@plt+0x5b28>
   16a24:	ldr	r0, [fp, #20]
   16a28:	cmp	r0, #0
   16a2c:	bne	16b90 <__assert_fail@plt+0x5c1c>
   16a30:	ldr	r1, [fp, #16]
   16a34:	mov	r0, #0
   16a38:	str	r0, [r1, #20]
   16a3c:	str	r0, [r1, #8]
   16a40:	ldr	r0, [r1]
   16a44:	add	r0, r0, #1
   16a48:	str	r0, [r1]
   16a4c:	b	16a68 <__assert_fail@plt+0x5af4>
   16a50:	ldr	r0, [fp, #20]
   16a54:	cmp	r0, #0
   16a58:	bne	16bc4 <__assert_fail@plt+0x5c50>
   16a5c:	ldr	r0, [r7, #12]
   16a60:	ldr	r1, [fp, #16]
   16a64:	str	r0, [r1, #8]
   16a68:	mov	r0, #63	; 0x3f
   16a6c:	sub	sp, fp, #28
   16a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a74:	ldr	r0, [fp, #20]
   16a78:	cmp	r0, #0
   16a7c:	bne	16bf4 <__assert_fail@plt+0x5c80>
   16a80:	ldr	r0, [r7, #12]
   16a84:	ldr	r1, [fp, #16]
   16a88:	str	r0, [r1, #8]
   16a8c:	ldr	r0, [sp, #16]
   16a90:	ldrb	r0, [r0]
   16a94:	cmp	r0, #58	; 0x3a
   16a98:	movwne	r0, #63	; 0x3f
   16a9c:	sub	sp, fp, #28
   16aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aa4:	movw	r5, #37136	; 0x9110
   16aa8:	ldr	r1, [sp, #32]
   16aac:	movt	r5, #2
   16ab0:	ldr	r0, [r5]
   16ab4:	cmp	r1, #0
   16ab8:	beq	16aec <__assert_fail@plt+0x5b78>
   16abc:	ldr	r1, [sp, #20]
   16ac0:	ldr	r3, [fp, #24]
   16ac4:	ldr	r2, [r1]
   16ac8:	ldr	r1, [fp, #16]
   16acc:	ldr	r1, [r1, #20]
   16ad0:	str	r1, [sp]
   16ad4:	movw	r1, #35452	; 0x8a7c
   16ad8:	movt	r1, #1
   16adc:	bl	10e6c <fprintf@plt>
   16ae0:	cmp	r4, #0
   16ae4:	bne	168fc <__assert_fail@plt+0x5988>
   16ae8:	b	16904 <__assert_fail@plt+0x5990>
   16aec:	bl	10ef0 <flockfile@plt>
   16af0:	ldr	r1, [fp, #16]
   16af4:	ldr	r0, [sp, #20]
   16af8:	ldr	r9, [fp, #24]
   16afc:	ldr	r1, [r1, #20]
   16b00:	ldr	r2, [r0]
   16b04:	ldr	r0, [r5]
   16b08:	mov	r3, r9
   16b0c:	str	r1, [sp]
   16b10:	movw	r1, #35484	; 0x8a9c
   16b14:	movt	r1, #1
   16b18:	bl	10e6c <fprintf@plt>
   16b1c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16b20:	cmp	r8, #0
   16b24:	beq	16b70 <__assert_fail@plt+0x5bfc>
   16b28:	mov	r6, sl
   16b2c:	ldrb	r0, [r6]
   16b30:	cmp	r0, #0
   16b34:	bne	16b4c <__assert_fail@plt+0x5bd8>
   16b38:	add	r1, r1, #16
   16b3c:	add	r6, r6, #1
   16b40:	subs	r8, r8, #1
   16b44:	bne	16b2c <__assert_fail@plt+0x5bb8>
   16b48:	b	16b70 <__assert_fail@plt+0x5bfc>
   16b4c:	ldr	r3, [r1]
   16b50:	ldr	r0, [r5]
   16b54:	mov	r7, r1
   16b58:	movw	r1, #35531	; 0x8acb
   16b5c:	mov	r2, r9
   16b60:	movt	r1, #1
   16b64:	bl	10e6c <fprintf@plt>
   16b68:	mov	r1, r7
   16b6c:	b	16b38 <__assert_fail@plt+0x5bc4>
   16b70:	ldr	r1, [r5]
   16b74:	mov	r0, #10
   16b78:	bl	10eb4 <fputc@plt>
   16b7c:	ldr	r0, [r5]
   16b80:	bl	10da0 <funlockfile@plt>
   16b84:	cmp	r4, #0
   16b88:	bne	168fc <__assert_fail@plt+0x5988>
   16b8c:	b	16904 <__assert_fail@plt+0x5990>
   16b90:	ldr	r1, [fp, #16]
   16b94:	ldr	r0, [sp, #20]
   16b98:	ldr	r3, [fp, #24]
   16b9c:	ldr	r2, [r0]
   16ba0:	movw	r0, #37136	; 0x9110
   16ba4:	ldr	r1, [r1, #20]
   16ba8:	movt	r0, #2
   16bac:	ldr	r0, [r0]
   16bb0:	str	r1, [sp]
   16bb4:	movw	r1, #35539	; 0x8ad3
   16bb8:	movt	r1, #1
   16bbc:	bl	10e6c <fprintf@plt>
   16bc0:	b	16a30 <__assert_fail@plt+0x5abc>
   16bc4:	ldr	r0, [sp, #20]
   16bc8:	ldr	r1, [r7]
   16bcc:	ldr	r3, [fp, #24]
   16bd0:	ldr	r2, [r0]
   16bd4:	movw	r0, #37136	; 0x9110
   16bd8:	str	r1, [sp]
   16bdc:	movw	r1, #35571	; 0x8af3
   16be0:	movt	r0, #2
   16be4:	movt	r1, #1
   16be8:	ldr	r0, [r0]
   16bec:	bl	10e6c <fprintf@plt>
   16bf0:	b	16a5c <__assert_fail@plt+0x5ae8>
   16bf4:	ldr	r0, [sp, #20]
   16bf8:	ldr	r1, [r7]
   16bfc:	ldr	r3, [fp, #24]
   16c00:	ldr	r2, [r0]
   16c04:	movw	r0, #37136	; 0x9110
   16c08:	str	r1, [sp]
   16c0c:	movw	r1, #35616	; 0x8b20
   16c10:	movt	r0, #2
   16c14:	movt	r1, #1
   16c18:	ldr	r0, [r0]
   16c1c:	bl	10e6c <fprintf@plt>
   16c20:	b	16a80 <__assert_fail@plt+0x5b0c>
   16c24:	push	{r4, r5, r6, r7, fp, lr}
   16c28:	add	fp, sp, #16
   16c2c:	sub	sp, sp, #16
   16c30:	movw	r7, #37124	; 0x9104
   16c34:	movw	r6, #37168	; 0x9130
   16c38:	movw	r5, #37128	; 0x9108
   16c3c:	movt	r7, #2
   16c40:	movt	r5, #2
   16c44:	movt	r6, #2
   16c48:	ldr	r4, [r7]
   16c4c:	ldr	r5, [r5]
   16c50:	str	r6, [sp, #8]
   16c54:	stm	r6, {r4, r5}
   16c58:	ldr	r5, [fp, #16]
   16c5c:	str	r5, [sp, #12]
   16c60:	ldr	r5, [fp, #12]
   16c64:	str	r5, [sp, #4]
   16c68:	ldr	r5, [fp, #8]
   16c6c:	str	r5, [sp]
   16c70:	bl	15988 <__assert_fail@plt+0x4a14>
   16c74:	ldr	r1, [r6]
   16c78:	ldr	r3, [r6, #12]
   16c7c:	ldr	r2, [r6, #8]
   16c80:	str	r1, [r7]
   16c84:	movw	r1, #37308	; 0x91bc
   16c88:	movt	r1, #2
   16c8c:	str	r3, [r1]
   16c90:	movw	r1, #37132	; 0x910c
   16c94:	movt	r1, #2
   16c98:	str	r2, [r1]
   16c9c:	sub	sp, fp, #16
   16ca0:	pop	{r4, r5, r6, r7, fp, pc}
   16ca4:	push	{r4, r5, r6, sl, fp, lr}
   16ca8:	add	fp, sp, #16
   16cac:	sub	sp, sp, #16
   16cb0:	movw	r6, #37124	; 0x9104
   16cb4:	movw	r5, #37168	; 0x9130
   16cb8:	movw	r4, #37128	; 0x9108
   16cbc:	movt	r6, #2
   16cc0:	movt	r4, #2
   16cc4:	movt	r5, #2
   16cc8:	ldr	r3, [r6]
   16ccc:	ldr	r4, [r4]
   16cd0:	stm	r5, {r3, r4}
   16cd4:	mov	r4, #0
   16cd8:	mov	r3, #1
   16cdc:	str	r4, [sp]
   16ce0:	stmib	sp, {r4, r5}
   16ce4:	str	r3, [sp, #12]
   16ce8:	mov	r3, #0
   16cec:	bl	15988 <__assert_fail@plt+0x4a14>
   16cf0:	ldr	r1, [r5]
   16cf4:	ldr	r3, [r5, #12]
   16cf8:	ldr	r2, [r5, #8]
   16cfc:	str	r1, [r6]
   16d00:	movw	r1, #37308	; 0x91bc
   16d04:	movt	r1, #2
   16d08:	str	r3, [r1]
   16d0c:	movw	r1, #37132	; 0x910c
   16d10:	movt	r1, #2
   16d14:	str	r2, [r1]
   16d18:	sub	sp, fp, #16
   16d1c:	pop	{r4, r5, r6, sl, fp, pc}
   16d20:	ldr	r0, [r0, #8]
   16d24:	bx	lr
   16d28:	ldr	r0, [r0, #12]
   16d2c:	bx	lr
   16d30:	ldr	r0, [r0, #16]
   16d34:	bx	lr
   16d38:	ldm	r0, {r2, ip}
   16d3c:	mov	r0, #0
   16d40:	cmp	r2, ip
   16d44:	bxcs	lr
   16d48:	mov	r0, #0
   16d4c:	b	16d5c <__assert_fail@plt+0x5de8>
   16d50:	add	r2, r2, #8
   16d54:	cmp	r2, ip
   16d58:	bcs	16d8c <__assert_fail@plt+0x5e18>
   16d5c:	ldr	r1, [r2]
   16d60:	cmp	r1, #0
   16d64:	beq	16d50 <__assert_fail@plt+0x5ddc>
   16d68:	mov	r3, #0
   16d6c:	mov	r1, r2
   16d70:	ldr	r1, [r1, #4]
   16d74:	add	r3, r3, #1
   16d78:	cmp	r1, #0
   16d7c:	bne	16d70 <__assert_fail@plt+0x5dfc>
   16d80:	cmp	r3, r0
   16d84:	movhi	r0, r3
   16d88:	b	16d50 <__assert_fail@plt+0x5ddc>
   16d8c:	bx	lr
   16d90:	push	{fp, lr}
   16d94:	mov	fp, sp
   16d98:	ldm	r0, {r3, ip}
   16d9c:	mov	lr, #0
   16da0:	mov	r1, #0
   16da4:	cmp	r3, ip
   16da8:	bcs	16dec <__assert_fail@plt+0x5e78>
   16dac:	mov	r1, #0
   16db0:	mov	lr, #0
   16db4:	b	16dc4 <__assert_fail@plt+0x5e50>
   16db8:	add	r3, r3, #8
   16dbc:	cmp	r3, ip
   16dc0:	bcs	16dec <__assert_fail@plt+0x5e78>
   16dc4:	ldr	r2, [r3]
   16dc8:	cmp	r2, #0
   16dcc:	beq	16db8 <__assert_fail@plt+0x5e44>
   16dd0:	mov	r2, r3
   16dd4:	ldr	r2, [r2, #4]
   16dd8:	add	r1, r1, #1
   16ddc:	cmp	r2, #0
   16de0:	bne	16dd4 <__assert_fail@plt+0x5e60>
   16de4:	add	lr, lr, #1
   16de8:	b	16db8 <__assert_fail@plt+0x5e44>
   16dec:	ldr	r2, [r0, #12]
   16df0:	cmp	lr, r2
   16df4:	bne	16e0c <__assert_fail@plt+0x5e98>
   16df8:	ldr	r2, [r0, #16]
   16dfc:	mov	r0, #1
   16e00:	cmp	r1, r2
   16e04:	movne	r0, #0
   16e08:	pop	{fp, pc}
   16e0c:	mov	r0, #0
   16e10:	pop	{fp, pc}
   16e14:	nop	{0}
   16e18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16e1c:	add	fp, sp, #24
   16e20:	sub	sp, sp, #8
   16e24:	ldr	r6, [r0]
   16e28:	ldmib	r0, {r3, r7, r8}
   16e2c:	ldr	r2, [r0, #16]
   16e30:	mov	r4, r1
   16e34:	mov	r5, #0
   16e38:	cmp	r6, r3
   16e3c:	bcs	16e84 <__assert_fail@plt+0x5f10>
   16e40:	mov	r5, #0
   16e44:	b	16e54 <__assert_fail@plt+0x5ee0>
   16e48:	add	r6, r6, #8
   16e4c:	cmp	r6, r3
   16e50:	bcs	16e84 <__assert_fail@plt+0x5f10>
   16e54:	ldr	r0, [r6]
   16e58:	cmp	r0, #0
   16e5c:	beq	16e48 <__assert_fail@plt+0x5ed4>
   16e60:	mov	r0, #0
   16e64:	mov	r1, r6
   16e68:	ldr	r1, [r1, #4]
   16e6c:	add	r0, r0, #1
   16e70:	cmp	r1, #0
   16e74:	bne	16e68 <__assert_fail@plt+0x5ef4>
   16e78:	cmp	r0, r5
   16e7c:	movhi	r5, r0
   16e80:	b	16e48 <__assert_fail@plt+0x5ed4>
   16e84:	movw	r1, #35656	; 0x8b48
   16e88:	mov	r0, r4
   16e8c:	movt	r1, #1
   16e90:	bl	10e6c <fprintf@plt>
   16e94:	movw	r1, #35680	; 0x8b60
   16e98:	mov	r0, r4
   16e9c:	mov	r2, r7
   16ea0:	movt	r1, #1
   16ea4:	bl	10e6c <fprintf@plt>
   16ea8:	vmov	s0, r8
   16eac:	vldr	d16, [pc, #68]	; 16ef8 <__assert_fail@plt+0x5f84>
   16eb0:	movw	r1, #35704	; 0x8b78
   16eb4:	mov	r0, r4
   16eb8:	mov	r2, r8
   16ebc:	movt	r1, #1
   16ec0:	vcvt.f64.u32	d17, s0
   16ec4:	vmov	s0, r7
   16ec8:	vcvt.f64.u32	d18, s0
   16ecc:	vmul.f64	d16, d17, d16
   16ed0:	vdiv.f64	d16, d16, d18
   16ed4:	vstr	d16, [sp]
   16ed8:	bl	10e6c <fprintf@plt>
   16edc:	movw	r1, #35737	; 0x8b99
   16ee0:	mov	r0, r4
   16ee4:	mov	r2, r5
   16ee8:	movt	r1, #1
   16eec:	sub	sp, fp, #24
   16ef0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ef4:	b	10e6c <fprintf@plt>
   16ef8:	andeq	r0, r0, r0
   16efc:	subsmi	r0, r9, r0
   16f00:	push	{r4, r5, r6, r7, fp, lr}
   16f04:	add	fp, sp, #16
   16f08:	mov	r4, r1
   16f0c:	ldr	r1, [r0, #8]
   16f10:	ldr	r2, [r0, #24]
   16f14:	mov	r5, r0
   16f18:	mov	r0, r4
   16f1c:	blx	r2
   16f20:	ldr	r1, [r5, #8]
   16f24:	cmp	r0, r1
   16f28:	bcs	16f90 <__assert_fail@plt+0x601c>
   16f2c:	ldr	r7, [r5]
   16f30:	mov	r6, #0
   16f34:	ldr	r1, [r7, r0, lsl #3]!
   16f38:	cmp	r1, #0
   16f3c:	cmpne	r7, #0
   16f40:	bne	16f70 <__assert_fail@plt+0x5ffc>
   16f44:	mov	r0, r6
   16f48:	pop	{r4, r5, r6, r7, fp, pc}
   16f4c:	ldr	r2, [r5, #28]
   16f50:	mov	r0, r4
   16f54:	blx	r2
   16f58:	cmp	r0, #0
   16f5c:	bne	16f84 <__assert_fail@plt+0x6010>
   16f60:	ldr	r7, [r7, #4]
   16f64:	cmp	r7, #0
   16f68:	beq	16f44 <__assert_fail@plt+0x5fd0>
   16f6c:	ldr	r1, [r7]
   16f70:	cmp	r1, r4
   16f74:	bne	16f4c <__assert_fail@plt+0x5fd8>
   16f78:	mov	r6, r4
   16f7c:	mov	r0, r6
   16f80:	pop	{r4, r5, r6, r7, fp, pc}
   16f84:	ldr	r6, [r7]
   16f88:	mov	r0, r6
   16f8c:	pop	{r4, r5, r6, r7, fp, pc}
   16f90:	bl	10f38 <abort@plt>
   16f94:	push	{fp, lr}
   16f98:	mov	fp, sp
   16f9c:	ldr	r1, [r0, #16]
   16fa0:	cmp	r1, #0
   16fa4:	beq	16fc4 <__assert_fail@plt+0x6050>
   16fa8:	ldm	r0, {r1, r2}
   16fac:	cmp	r1, r2
   16fb0:	bcs	16fcc <__assert_fail@plt+0x6058>
   16fb4:	ldr	r0, [r1], #8
   16fb8:	cmp	r0, #0
   16fbc:	beq	16fac <__assert_fail@plt+0x6038>
   16fc0:	pop	{fp, pc}
   16fc4:	mov	r0, #0
   16fc8:	pop	{fp, pc}
   16fcc:	bl	10f38 <abort@plt>
   16fd0:	push	{r4, r5, fp, lr}
   16fd4:	add	fp, sp, #8
   16fd8:	mov	r5, r1
   16fdc:	ldr	r1, [r0, #8]
   16fe0:	ldr	r2, [r0, #24]
   16fe4:	mov	r4, r0
   16fe8:	mov	r0, r5
   16fec:	blx	r2
   16ff0:	ldr	r1, [r4, #8]
   16ff4:	cmp	r0, r1
   16ff8:	bcs	1705c <__assert_fail@plt+0x60e8>
   16ffc:	ldr	r1, [r4]
   17000:	add	r2, r1, r0, lsl #3
   17004:	ldr	r3, [r2]
   17008:	ldr	r2, [r2, #4]
   1700c:	cmp	r3, r5
   17010:	beq	17020 <__assert_fail@plt+0x60ac>
   17014:	cmp	r2, #0
   17018:	bne	17004 <__assert_fail@plt+0x6090>
   1701c:	b	17030 <__assert_fail@plt+0x60bc>
   17020:	cmp	r2, #0
   17024:	beq	17030 <__assert_fail@plt+0x60bc>
   17028:	ldr	r0, [r2]
   1702c:	pop	{r4, r5, fp, pc}
   17030:	ldr	r2, [r4, #4]
   17034:	add	r0, r1, r0, lsl #3
   17038:	add	r1, r0, #8
   1703c:	cmp	r1, r2
   17040:	bcs	17054 <__assert_fail@plt+0x60e0>
   17044:	ldr	r0, [r1], #8
   17048:	cmp	r0, #0
   1704c:	beq	1703c <__assert_fail@plt+0x60c8>
   17050:	pop	{r4, r5, fp, pc}
   17054:	mov	r0, #0
   17058:	pop	{r4, r5, fp, pc}
   1705c:	bl	10f38 <abort@plt>
   17060:	push	{r4, r5, fp, lr}
   17064:	add	fp, sp, #8
   17068:	ldm	r0, {r5, lr}
   1706c:	mov	ip, r0
   17070:	mov	r0, #0
   17074:	cmp	r5, lr
   17078:	popcs	{r4, r5, fp, pc}
   1707c:	mov	r0, #0
   17080:	b	17094 <__assert_fail@plt+0x6120>
   17084:	ldr	lr, [ip, #4]
   17088:	add	r5, r5, #8
   1708c:	cmp	r5, lr
   17090:	bcs	170cc <__assert_fail@plt+0x6158>
   17094:	ldr	r3, [r5]
   17098:	cmp	r3, #0
   1709c:	cmpne	r5, #0
   170a0:	beq	17088 <__assert_fail@plt+0x6114>
   170a4:	mov	r3, r5
   170a8:	cmp	r0, r2
   170ac:	bcs	170cc <__assert_fail@plt+0x6158>
   170b0:	ldr	r4, [r3]
   170b4:	str	r4, [r1, r0, lsl #2]
   170b8:	add	r0, r0, #1
   170bc:	ldr	r3, [r3, #4]
   170c0:	cmp	r3, #0
   170c4:	bne	170a8 <__assert_fail@plt+0x6134>
   170c8:	b	17084 <__assert_fail@plt+0x6110>
   170cc:	pop	{r4, r5, fp, pc}
   170d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   170d4:	add	fp, sp, #24
   170d8:	mov	r5, r1
   170dc:	ldr	r4, [r0]
   170e0:	ldr	r1, [r0, #4]
   170e4:	mov	r6, #0
   170e8:	cmp	r4, r1
   170ec:	bcs	17158 <__assert_fail@plt+0x61e4>
   170f0:	mov	r9, r2
   170f4:	mov	r8, r0
   170f8:	mov	r6, #0
   170fc:	b	17110 <__assert_fail@plt+0x619c>
   17100:	ldr	r1, [r8, #4]
   17104:	add	r4, r4, #8
   17108:	cmp	r4, r1
   1710c:	bcs	17158 <__assert_fail@plt+0x61e4>
   17110:	ldr	r0, [r4]
   17114:	cmp	r0, #0
   17118:	cmpne	r4, #0
   1711c:	beq	17104 <__assert_fail@plt+0x6190>
   17120:	mov	r1, r9
   17124:	blx	r5
   17128:	cmp	r0, #0
   1712c:	beq	17158 <__assert_fail@plt+0x61e4>
   17130:	mov	r7, r4
   17134:	ldr	r7, [r7, #4]
   17138:	add	r6, r6, #1
   1713c:	cmp	r7, #0
   17140:	beq	17100 <__assert_fail@plt+0x618c>
   17144:	ldr	r0, [r7]
   17148:	mov	r1, r9
   1714c:	blx	r5
   17150:	cmp	r0, #0
   17154:	bne	17134 <__assert_fail@plt+0x61c0>
   17158:	mov	r0, r6
   1715c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17160:	ldrb	r2, [r0]
   17164:	cmp	r2, #0
   17168:	moveq	r0, #0
   1716c:	bxeq	lr
   17170:	add	r3, r0, #1
   17174:	mov	r0, #0
   17178:	rsb	r0, r0, r0, lsl #5
   1717c:	uxtab	r0, r0, r2
   17180:	udiv	r2, r0, r1
   17184:	mls	r0, r2, r1, r0
   17188:	ldrb	r2, [r3], #1
   1718c:	cmp	r2, #0
   17190:	bne	17178 <__assert_fail@plt+0x6204>
   17194:	bx	lr
   17198:	movw	r1, #35768	; 0x8bb8
   1719c:	movt	r1, #1
   171a0:	vld1.32	{d16-d17}, [r1]!
   171a4:	ldr	r1, [r1]
   171a8:	vst1.32	{d16-d17}, [r0]!
   171ac:	str	r1, [r0]
   171b0:	bx	lr
   171b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   171b8:	add	fp, sp, #24
   171bc:	movw	r9, #29660	; 0x73dc
   171c0:	cmp	r3, #0
   171c4:	movw	r5, #29640	; 0x73c8
   171c8:	mov	r6, r0
   171cc:	mov	r0, #40	; 0x28
   171d0:	mov	r7, r1
   171d4:	movt	r9, #1
   171d8:	movne	r9, r3
   171dc:	cmp	r2, #0
   171e0:	movt	r5, #1
   171e4:	movne	r5, r2
   171e8:	bl	18280 <__assert_fail@plt+0x730c>
   171ec:	mov	r8, #0
   171f0:	cmp	r0, #0
   171f4:	beq	173b0 <__assert_fail@plt+0x643c>
   171f8:	mov	r4, r0
   171fc:	movw	r0, #35768	; 0x8bb8
   17200:	cmp	r7, #0
   17204:	movt	r0, #1
   17208:	moveq	r7, r0
   1720c:	cmp	r7, r0
   17210:	str	r7, [r4, #20]
   17214:	beq	17290 <__assert_fail@plt+0x631c>
   17218:	vldr	s2, [pc, #408]	; 173b8 <__assert_fail@plt+0x6444>
   1721c:	vldr	s0, [r7, #8]
   17220:	vcmpe.f32	s0, s2
   17224:	vmrs	APSR_nzcv, fpscr
   17228:	ble	1733c <__assert_fail@plt+0x63c8>
   1722c:	vldr	s4, [pc, #392]	; 173bc <__assert_fail@plt+0x6448>
   17230:	vcmpe.f32	s0, s4
   17234:	vmrs	APSR_nzcv, fpscr
   17238:	bpl	1733c <__assert_fail@plt+0x63c8>
   1723c:	vldr	s4, [pc, #380]	; 173c0 <__assert_fail@plt+0x644c>
   17240:	vldr	s6, [r7, #12]
   17244:	vcmpe.f32	s6, s4
   17248:	vmrs	APSR_nzcv, fpscr
   1724c:	ble	1733c <__assert_fail@plt+0x63c8>
   17250:	vldr	s4, [r7]
   17254:	vcmpe.f32	s4, #0.0
   17258:	vmrs	APSR_nzcv, fpscr
   1725c:	blt	1733c <__assert_fail@plt+0x63c8>
   17260:	vadd.f32	s2, s4, s2
   17264:	vcmpe.f32	s2, s0
   17268:	vmrs	APSR_nzcv, fpscr
   1726c:	bpl	1733c <__assert_fail@plt+0x63c8>
   17270:	vldr	s0, [r7, #4]
   17274:	vmov.f32	s4, #112	; 0x3f800000  1.0
   17278:	vcmpe.f32	s0, s4
   1727c:	vmrs	APSR_nzcv, fpscr
   17280:	bhi	1733c <__assert_fail@plt+0x63c8>
   17284:	vcmpe.f32	s2, s0
   17288:	vmrs	APSR_nzcv, fpscr
   1728c:	bpl	1733c <__assert_fail@plt+0x63c8>
   17290:	ldrb	r0, [r7, #16]
   17294:	cmp	r0, #0
   17298:	bne	172c4 <__assert_fail@plt+0x6350>
   1729c:	vmov	s2, r6
   172a0:	vldr	s0, [r7, #8]
   172a4:	vldr	s4, [pc, #280]	; 173c4 <__assert_fail@plt+0x6450>
   172a8:	vcvt.f32.u32	s2, s2
   172ac:	vdiv.f32	s2, s2, s0
   172b0:	vcvt.u32.f32	s0, s2
   172b4:	vcmpe.f32	s2, s4
   172b8:	vmrs	APSR_nzcv, fpscr
   172bc:	bge	1734c <__assert_fail@plt+0x63d8>
   172c0:	vmov	r6, s0
   172c4:	cmp	r6, #10
   172c8:	movls	r6, #10
   172cc:	orr	r0, r6, #1
   172d0:	cmn	r0, #1
   172d4:	beq	1734c <__assert_fail@plt+0x63d8>
   172d8:	ldr	r6, [fp, #8]
   172dc:	mov	r1, #3
   172e0:	cmp	r0, #10
   172e4:	bcc	1731c <__assert_fail@plt+0x63a8>
   172e8:	mov	r1, #3
   172ec:	mov	r3, #9
   172f0:	mov	r2, #12
   172f4:	udiv	r7, r0, r1
   172f8:	mls	r7, r7, r1, r0
   172fc:	cmp	r7, #0
   17300:	beq	1731c <__assert_fail@plt+0x63a8>
   17304:	add	r3, r3, r2
   17308:	add	r2, r2, #8
   1730c:	add	r1, r1, #2
   17310:	add	r3, r3, #4
   17314:	cmp	r3, r0
   17318:	bcc	172f4 <__assert_fail@plt+0x6380>
   1731c:	udiv	r2, r0, r1
   17320:	mls	r1, r2, r1, r0
   17324:	cmp	r1, #0
   17328:	bne	17344 <__assert_fail@plt+0x63d0>
   1732c:	add	r0, r0, #2
   17330:	cmn	r0, #1
   17334:	bne	172dc <__assert_fail@plt+0x6368>
   17338:	b	1734c <__assert_fail@plt+0x63d8>
   1733c:	str	r0, [r4, #20]
   17340:	b	17354 <__assert_fail@plt+0x63e0>
   17344:	cmp	r0, #536870912	; 0x20000000
   17348:	bcc	17364 <__assert_fail@plt+0x63f0>
   1734c:	mov	r0, #0
   17350:	str	r0, [r4, #8]
   17354:	mov	r0, r4
   17358:	bl	13554 <__assert_fail@plt+0x25e0>
   1735c:	mov	r0, r8
   17360:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17364:	cmp	r0, #0
   17368:	str	r0, [r4, #8]
   1736c:	beq	17354 <__assert_fail@plt+0x63e0>
   17370:	mov	r1, #8
   17374:	bl	1822c <__assert_fail@plt+0x72b8>
   17378:	cmp	r0, #0
   1737c:	str	r0, [r4]
   17380:	beq	17354 <__assert_fail@plt+0x63e0>
   17384:	mov	r1, #0
   17388:	str	r5, [r4, #24]
   1738c:	str	r9, [r4, #28]
   17390:	str	r6, [r4, #32]
   17394:	mov	r8, r4
   17398:	str	r1, [r4, #36]	; 0x24
   1739c:	str	r1, [r4, #12]
   173a0:	str	r1, [r4, #16]
   173a4:	ldr	r1, [r4, #8]
   173a8:	add	r0, r0, r1, lsl #3
   173ac:	str	r0, [r4, #4]
   173b0:	mov	r0, r8
   173b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   173b8:	stclcc	12, cr12, [ip, #820]	; 0x334
   173bc:	svccc	0x00666666
   173c0:	svccc	0x008ccccd
   173c4:	svcmi	0x00800000
   173c8:	ror	r2, r0, #3
   173cc:	udiv	r2, r2, r1
   173d0:	mul	r1, r2, r1
   173d4:	rsb	r0, r1, r0, ror #3
   173d8:	bx	lr
   173dc:	sub	r0, r0, r1
   173e0:	clz	r0, r0
   173e4:	lsr	r0, r0, #5
   173e8:	bx	lr
   173ec:	push	{r4, r5, r6, r7, fp, lr}
   173f0:	add	fp, sp, #16
   173f4:	mov	r4, r0
   173f8:	ldr	r5, [r0]
   173fc:	ldr	r0, [r0, #4]
   17400:	cmp	r5, r0
   17404:	bcs	174a8 <__assert_fail@plt+0x6534>
   17408:	mov	r6, #0
   1740c:	b	17428 <__assert_fail@plt+0x64b4>
   17410:	str	r6, [r5]
   17414:	str	r6, [r5, #4]
   17418:	ldr	r0, [r4, #4]
   1741c:	add	r5, r5, #8
   17420:	cmp	r5, r0
   17424:	bcs	174a8 <__assert_fail@plt+0x6534>
   17428:	ldr	r1, [r5]
   1742c:	cmp	r1, #0
   17430:	beq	1741c <__assert_fail@plt+0x64a8>
   17434:	ldr	r1, [r4, #32]
   17438:	ldr	r7, [r5, #4]
   1743c:	cmp	r1, #0
   17440:	mov	r0, r1
   17444:	movwne	r0, #1
   17448:	cmp	r7, #0
   1744c:	bne	17490 <__assert_fail@plt+0x651c>
   17450:	cmp	r0, #0
   17454:	beq	17410 <__assert_fail@plt+0x649c>
   17458:	ldr	r0, [r5]
   1745c:	blx	r1
   17460:	b	17410 <__assert_fail@plt+0x649c>
   17464:	str	r6, [r7]
   17468:	cmp	r1, #0
   1746c:	ldr	r2, [r7, #4]
   17470:	ldr	r0, [r4, #36]	; 0x24
   17474:	str	r0, [r7, #4]
   17478:	mov	r0, r1
   1747c:	str	r7, [r4, #36]	; 0x24
   17480:	movwne	r0, #1
   17484:	cmp	r2, #0
   17488:	mov	r7, r2
   1748c:	beq	17450 <__assert_fail@plt+0x64dc>
   17490:	tst	r0, #1
   17494:	beq	17464 <__assert_fail@plt+0x64f0>
   17498:	ldr	r0, [r7]
   1749c:	blx	r1
   174a0:	ldr	r1, [r4, #32]
   174a4:	b	17464 <__assert_fail@plt+0x64f0>
   174a8:	mov	r0, #0
   174ac:	str	r0, [r4, #12]
   174b0:	str	r0, [r4, #16]
   174b4:	pop	{r4, r5, r6, r7, fp, pc}
   174b8:	push	{r4, r5, r6, sl, fp, lr}
   174bc:	add	fp, sp, #16
   174c0:	mov	r4, r0
   174c4:	ldr	r0, [r0, #32]
   174c8:	cmp	r0, #0
   174cc:	beq	17540 <__assert_fail@plt+0x65cc>
   174d0:	ldr	r0, [r4, #16]
   174d4:	cmp	r0, #0
   174d8:	beq	17540 <__assert_fail@plt+0x65cc>
   174dc:	ldr	r5, [r4]
   174e0:	ldr	r1, [r4, #4]
   174e4:	cmp	r5, r1
   174e8:	bcc	17500 <__assert_fail@plt+0x658c>
   174ec:	b	17540 <__assert_fail@plt+0x65cc>
   174f0:	ldr	r1, [r4, #4]
   174f4:	add	r5, r5, #8
   174f8:	cmp	r5, r1
   174fc:	bcs	17540 <__assert_fail@plt+0x65cc>
   17500:	ldr	r0, [r5]
   17504:	cmp	r0, #0
   17508:	cmpne	r5, #0
   1750c:	beq	174f4 <__assert_fail@plt+0x6580>
   17510:	ldr	r1, [r4, #32]
   17514:	blx	r1
   17518:	ldr	r6, [r5, #4]
   1751c:	cmp	r6, #0
   17520:	beq	174f0 <__assert_fail@plt+0x657c>
   17524:	ldr	r1, [r4, #32]
   17528:	ldr	r0, [r6]
   1752c:	blx	r1
   17530:	ldr	r6, [r6, #4]
   17534:	cmp	r6, #0
   17538:	bne	17524 <__assert_fail@plt+0x65b0>
   1753c:	b	174f0 <__assert_fail@plt+0x657c>
   17540:	ldr	r5, [r4]
   17544:	ldr	r1, [r4, #4]
   17548:	cmp	r5, r1
   1754c:	bcc	17560 <__assert_fail@plt+0x65ec>
   17550:	b	17588 <__assert_fail@plt+0x6614>
   17554:	add	r5, r5, #8
   17558:	cmp	r5, r1
   1755c:	bcs	17588 <__assert_fail@plt+0x6614>
   17560:	ldr	r0, [r5, #4]
   17564:	cmp	r0, #0
   17568:	beq	17554 <__assert_fail@plt+0x65e0>
   1756c:	ldr	r6, [r0, #4]
   17570:	bl	13554 <__assert_fail@plt+0x25e0>
   17574:	cmp	r6, #0
   17578:	mov	r0, r6
   1757c:	bne	1756c <__assert_fail@plt+0x65f8>
   17580:	ldr	r1, [r4, #4]
   17584:	b	17554 <__assert_fail@plt+0x65e0>
   17588:	ldr	r0, [r4, #36]	; 0x24
   1758c:	cmp	r0, #0
   17590:	beq	175a8 <__assert_fail@plt+0x6634>
   17594:	ldr	r5, [r0, #4]
   17598:	bl	13554 <__assert_fail@plt+0x25e0>
   1759c:	cmp	r5, #0
   175a0:	mov	r0, r5
   175a4:	bne	17594 <__assert_fail@plt+0x6620>
   175a8:	ldr	r0, [r4]
   175ac:	bl	13554 <__assert_fail@plt+0x25e0>
   175b0:	mov	r0, r4
   175b4:	pop	{r4, r5, r6, sl, fp, lr}
   175b8:	b	13554 <__assert_fail@plt+0x25e0>
   175bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175c0:	add	fp, sp, #28
   175c4:	sub	sp, sp, #44	; 0x2c
   175c8:	mov	r7, r0
   175cc:	mov	r4, r0
   175d0:	ldr	r0, [r7, #20]!
   175d4:	ldrb	r2, [r0, #16]
   175d8:	cmp	r2, #0
   175dc:	bne	1760c <__assert_fail@plt+0x6698>
   175e0:	vmov	s2, r1
   175e4:	vldr	s0, [r0, #8]
   175e8:	vldr	s4, [pc, #564]	; 17824 <__assert_fail@plt+0x68b0>
   175ec:	mov	r5, #0
   175f0:	vcvt.f32.u32	s2, s2
   175f4:	vdiv.f32	s2, s2, s0
   175f8:	vcvt.u32.f32	s0, s2
   175fc:	vcmpe.f32	s2, s4
   17600:	vmrs	APSR_nzcv, fpscr
   17604:	bge	17814 <__assert_fail@plt+0x68a0>
   17608:	vmov	r1, s0
   1760c:	cmp	r1, #10
   17610:	mov	r5, #0
   17614:	movls	r1, #10
   17618:	orr	r6, r1, #1
   1761c:	cmn	r6, #1
   17620:	beq	17814 <__assert_fail@plt+0x68a0>
   17624:	mov	r0, #3
   17628:	cmp	r6, #10
   1762c:	bcc	17664 <__assert_fail@plt+0x66f0>
   17630:	mov	r0, #3
   17634:	mov	r2, #9
   17638:	mov	r1, #12
   1763c:	udiv	r3, r6, r0
   17640:	mls	r3, r3, r0, r6
   17644:	cmp	r3, #0
   17648:	beq	17664 <__assert_fail@plt+0x66f0>
   1764c:	add	r2, r2, r1
   17650:	add	r1, r1, #8
   17654:	add	r0, r0, #2
   17658:	add	r2, r2, #4
   1765c:	cmp	r2, r6
   17660:	bcc	1763c <__assert_fail@plt+0x66c8>
   17664:	udiv	r1, r6, r0
   17668:	mls	r0, r1, r0, r6
   1766c:	cmp	r0, #0
   17670:	bne	17684 <__assert_fail@plt+0x6710>
   17674:	add	r6, r6, #2
   17678:	cmn	r6, #1
   1767c:	bne	17624 <__assert_fail@plt+0x66b0>
   17680:	b	17814 <__assert_fail@plt+0x68a0>
   17684:	sub	r0, r6, #1
   17688:	cmn	r0, #-536870910	; 0xe0000002
   1768c:	bhi	17814 <__assert_fail@plt+0x68a0>
   17690:	ldr	r0, [r4, #8]
   17694:	cmp	r6, r0
   17698:	bne	176a4 <__assert_fail@plt+0x6730>
   1769c:	mov	r5, #1
   176a0:	b	17814 <__assert_fail@plt+0x68a0>
   176a4:	mov	r0, r6
   176a8:	mov	r1, #8
   176ac:	bl	1822c <__assert_fail@plt+0x72b8>
   176b0:	cmp	r0, #0
   176b4:	str	r0, [sp, #4]
   176b8:	beq	17814 <__assert_fail@plt+0x68a0>
   176bc:	add	r0, r0, r6, lsl #3
   176c0:	mov	r1, #0
   176c4:	add	r5, sp, #4
   176c8:	mov	sl, r4
   176cc:	mov	r2, #0
   176d0:	str	r1, [sp, #20]
   176d4:	str	r1, [sp, #16]
   176d8:	str	r6, [sp, #12]
   176dc:	mov	r1, r4
   176e0:	str	r0, [sp, #8]
   176e4:	add	r0, r5, #20
   176e8:	vld1.32	{d16-d17}, [r7]
   176ec:	vst1.32	{d16-d17}, [r0]
   176f0:	ldr	r0, [sl, #36]!	; 0x24
   176f4:	str	r0, [sp, #40]	; 0x28
   176f8:	mov	r0, r5
   176fc:	bl	17828 <__assert_fail@plt+0x68b4>
   17700:	cmp	r0, #0
   17704:	beq	1772c <__assert_fail@plt+0x67b8>
   17708:	ldr	r0, [r4]
   1770c:	bl	13554 <__assert_fail@plt+0x25e0>
   17710:	mov	r0, #36	; 0x24
   17714:	vld1.32	{d16-d17}, [r5], r0
   17718:	vst1.32	{d16-d17}, [r4], r0
   1771c:	ldr	r0, [r5]
   17720:	mov	r5, #1
   17724:	str	r0, [r4]
   17728:	b	17814 <__assert_fail@plt+0x68a0>
   1772c:	ldr	r0, [sp, #40]	; 0x28
   17730:	str	r0, [sl]
   17734:	ldr	r0, [sp, #8]
   17738:	ldr	r8, [sp, #4]
   1773c:	cmp	r8, r0
   17740:	str	r0, [sp]
   17744:	bcs	177f0 <__assert_fail@plt+0x687c>
   17748:	mov	r9, #0
   1774c:	b	17764 <__assert_fail@plt+0x67f0>
   17750:	str	r9, [r8, #4]
   17754:	ldr	r0, [sp]
   17758:	add	r8, r8, #8
   1775c:	cmp	r8, r0
   17760:	bcs	177f0 <__assert_fail@plt+0x687c>
   17764:	ldr	r0, [r8]
   17768:	cmp	r0, #0
   1776c:	beq	17754 <__assert_fail@plt+0x67e0>
   17770:	ldr	r6, [r8, #4]
   17774:	cmp	r6, #0
   17778:	beq	17750 <__assert_fail@plt+0x67dc>
   1777c:	ldr	r1, [r4, #8]
   17780:	b	177a4 <__assert_fail@plt+0x6830>
   17784:	add	r0, r3, r0, lsl #3
   17788:	add	r0, r0, #4
   1778c:	ldr	r3, [r0]
   17790:	cmp	r2, #0
   17794:	str	r3, [r6, #4]
   17798:	str	r6, [r0]
   1779c:	mov	r6, r2
   177a0:	beq	17750 <__assert_fail@plt+0x67dc>
   177a4:	ldr	r5, [r6]
   177a8:	ldr	r2, [r4, #24]
   177ac:	mov	r0, r5
   177b0:	blx	r2
   177b4:	ldr	r1, [r4, #8]
   177b8:	cmp	r0, r1
   177bc:	bcs	17820 <__assert_fail@plt+0x68ac>
   177c0:	ldr	r3, [r4]
   177c4:	ldr	r2, [r6, #4]
   177c8:	ldr	r7, [r3, r0, lsl #3]
   177cc:	cmp	r7, #0
   177d0:	bne	17784 <__assert_fail@plt+0x6810>
   177d4:	str	r5, [r3, r0, lsl #3]
   177d8:	ldr	r0, [r4, #12]
   177dc:	add	r0, r0, #1
   177e0:	str	r0, [r4, #12]
   177e4:	mov	r0, sl
   177e8:	str	r9, [r6]
   177ec:	b	1778c <__assert_fail@plt+0x6818>
   177f0:	add	r1, sp, #4
   177f4:	mov	r0, r4
   177f8:	mov	r2, #0
   177fc:	mov	r5, #0
   17800:	bl	17828 <__assert_fail@plt+0x68b4>
   17804:	cmp	r0, #0
   17808:	beq	17820 <__assert_fail@plt+0x68ac>
   1780c:	ldr	r0, [sp, #4]
   17810:	bl	13554 <__assert_fail@plt+0x25e0>
   17814:	mov	r0, r5
   17818:	sub	sp, fp, #28
   1781c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17820:	bl	10f38 <abort@plt>
   17824:	svcmi	0x00800000
   17828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1782c:	add	fp, sp, #28
   17830:	sub	sp, sp, #12
   17834:	ldr	sl, [r1]
   17838:	str	r1, [sp, #8]
   1783c:	ldr	r1, [r1, #4]
   17840:	mov	r7, r0
   17844:	mov	r0, #1
   17848:	str	r2, [sp, #4]
   1784c:	cmp	sl, r1
   17850:	bcs	179ac <__assert_fail@plt+0x6a38>
   17854:	add	r8, r7, #36	; 0x24
   17858:	mov	r9, #0
   1785c:	b	17898 <__assert_fail@plt+0x6924>
   17860:	str	r4, [r6, r5, lsl #3]
   17864:	ldr	r0, [r7, #12]
   17868:	add	r0, r0, #1
   1786c:	str	r0, [r7, #12]
   17870:	ldr	r1, [sp, #8]
   17874:	str	r9, [sl]
   17878:	ldr	r0, [r1, #12]
   1787c:	sub	r0, r0, #1
   17880:	str	r0, [r1, #12]
   17884:	ldr	r0, [sp, #8]
   17888:	add	sl, sl, #8
   1788c:	ldr	r0, [r0, #4]
   17890:	cmp	sl, r0
   17894:	bcs	179a8 <__assert_fail@plt+0x6a34>
   17898:	ldr	r4, [sl]
   1789c:	cmp	r4, #0
   178a0:	beq	17884 <__assert_fail@plt+0x6910>
   178a4:	ldr	r5, [sl, #4]
   178a8:	cmp	r5, #0
   178ac:	beq	17928 <__assert_fail@plt+0x69b4>
   178b0:	ldr	r1, [r7, #8]
   178b4:	b	178e8 <__assert_fail@plt+0x6974>
   178b8:	str	r4, [r3, r0, lsl #3]
   178bc:	ldr	r0, [r7, #12]
   178c0:	add	r0, r0, #1
   178c4:	str	r0, [r7, #12]
   178c8:	mov	r0, r8
   178cc:	str	r9, [r5]
   178d0:	ldr	r3, [r0]
   178d4:	cmp	r2, #0
   178d8:	str	r3, [r5, #4]
   178dc:	str	r5, [r0]
   178e0:	mov	r5, r2
   178e4:	beq	17924 <__assert_fail@plt+0x69b0>
   178e8:	ldr	r4, [r5]
   178ec:	ldr	r2, [r7, #24]
   178f0:	mov	r0, r4
   178f4:	blx	r2
   178f8:	ldr	r1, [r7, #8]
   178fc:	cmp	r0, r1
   17900:	bcs	179c0 <__assert_fail@plt+0x6a4c>
   17904:	ldr	r3, [r7]
   17908:	ldr	r2, [r5, #4]
   1790c:	ldr	r6, [r3, r0, lsl #3]
   17910:	cmp	r6, #0
   17914:	beq	178b8 <__assert_fail@plt+0x6944>
   17918:	add	r0, r3, r0, lsl #3
   1791c:	add	r0, r0, #4
   17920:	b	178d0 <__assert_fail@plt+0x695c>
   17924:	ldr	r4, [sl]
   17928:	ldr	r0, [sp, #4]
   1792c:	str	r9, [sl, #4]
   17930:	cmp	r0, #0
   17934:	bne	17884 <__assert_fail@plt+0x6910>
   17938:	ldr	r1, [r7, #8]
   1793c:	ldr	r2, [r7, #24]
   17940:	mov	r0, r4
   17944:	blx	r2
   17948:	mov	r5, r0
   1794c:	ldr	r0, [r7, #8]
   17950:	cmp	r5, r0
   17954:	bcs	179c0 <__assert_fail@plt+0x6a4c>
   17958:	ldr	r6, [r7]
   1795c:	ldr	r0, [r6, r5, lsl #3]
   17960:	cmp	r0, #0
   17964:	beq	17860 <__assert_fail@plt+0x68ec>
   17968:	ldr	r0, [r8]
   1796c:	cmp	r0, #0
   17970:	beq	17980 <__assert_fail@plt+0x6a0c>
   17974:	ldr	r1, [r0, #4]
   17978:	str	r1, [r8]
   1797c:	b	17990 <__assert_fail@plt+0x6a1c>
   17980:	mov	r0, #8
   17984:	bl	18280 <__assert_fail@plt+0x730c>
   17988:	cmp	r0, #0
   1798c:	beq	179b4 <__assert_fail@plt+0x6a40>
   17990:	add	r1, r6, r5, lsl #3
   17994:	str	r4, [r0]
   17998:	ldr	r2, [r1, #4]
   1799c:	str	r2, [r0, #4]
   179a0:	str	r0, [r1, #4]
   179a4:	b	17870 <__assert_fail@plt+0x68fc>
   179a8:	mov	r0, #1
   179ac:	sub	sp, fp, #28
   179b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179b4:	mov	r0, #0
   179b8:	sub	sp, fp, #28
   179bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179c0:	bl	10f38 <abort@plt>
   179c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179c8:	add	fp, sp, #28
   179cc:	sub	sp, sp, #4
   179d0:	cmp	r1, #0
   179d4:	beq	17cf0 <__assert_fail@plt+0x6d7c>
   179d8:	mov	r8, r2
   179dc:	mov	sl, r1
   179e0:	ldr	r1, [r0, #8]
   179e4:	ldr	r2, [r0, #24]
   179e8:	mov	r4, r0
   179ec:	mov	r0, sl
   179f0:	blx	r2
   179f4:	mov	r7, r0
   179f8:	ldr	r0, [r4, #8]
   179fc:	cmp	r7, r0
   17a00:	bcs	17cf0 <__assert_fail@plt+0x6d7c>
   17a04:	ldr	r5, [r4]
   17a08:	mov	r9, r5
   17a0c:	ldr	r1, [r9, r7, lsl #3]!
   17a10:	cmp	r1, #0
   17a14:	beq	17aa0 <__assert_fail@plt+0x6b2c>
   17a18:	cmp	r1, sl
   17a1c:	beq	17a48 <__assert_fail@plt+0x6ad4>
   17a20:	ldr	r2, [r4, #28]
   17a24:	mov	r0, sl
   17a28:	blx	r2
   17a2c:	cmp	r0, #0
   17a30:	mov	r6, r9
   17a34:	beq	17a5c <__assert_fail@plt+0x6ae8>
   17a38:	ldr	r0, [r6]
   17a3c:	cmp	r0, #0
   17a40:	bne	17a4c <__assert_fail@plt+0x6ad8>
   17a44:	b	17aa0 <__assert_fail@plt+0x6b2c>
   17a48:	mov	r0, sl
   17a4c:	cmp	r8, #0
   17a50:	mov	r7, #0
   17a54:	strne	r0, [r8]
   17a58:	b	17c8c <__assert_fail@plt+0x6d18>
   17a5c:	add	r6, r5, r7, lsl #3
   17a60:	ldr	r0, [r6, #4]!
   17a64:	cmp	r0, #0
   17a68:	beq	17aa0 <__assert_fail@plt+0x6b2c>
   17a6c:	ldr	r1, [r0]
   17a70:	cmp	r1, sl
   17a74:	beq	17a94 <__assert_fail@plt+0x6b20>
   17a78:	ldr	r2, [r4, #28]
   17a7c:	mov	r0, sl
   17a80:	blx	r2
   17a84:	ldr	r6, [r6]
   17a88:	cmp	r0, #0
   17a8c:	beq	17a60 <__assert_fail@plt+0x6aec>
   17a90:	b	17a38 <__assert_fail@plt+0x6ac4>
   17a94:	mov	r0, sl
   17a98:	cmp	r0, #0
   17a9c:	bne	17a4c <__assert_fail@plt+0x6ad8>
   17aa0:	vldr	s0, [r4, #8]
   17aa4:	vldr	s2, [r4, #12]
   17aa8:	ldr	r0, [r4, #20]
   17aac:	vcvt.f32.u32	s0, s0
   17ab0:	vcvt.f32.u32	s4, s2
   17ab4:	vldr	s2, [r0, #8]
   17ab8:	vmul.f32	s6, s2, s0
   17abc:	vcmpe.f32	s6, s4
   17ac0:	vmrs	APSR_nzcv, fpscr
   17ac4:	bpl	17c18 <__assert_fail@plt+0x6ca4>
   17ac8:	movw	r1, #35768	; 0x8bb8
   17acc:	movt	r1, #1
   17ad0:	cmp	r0, r1
   17ad4:	beq	17b60 <__assert_fail@plt+0x6bec>
   17ad8:	vldr	s6, [pc, #532]	; 17cf4 <__assert_fail@plt+0x6d80>
   17adc:	vcmpe.f32	s2, s6
   17ae0:	vmrs	APSR_nzcv, fpscr
   17ae4:	ble	17b4c <__assert_fail@plt+0x6bd8>
   17ae8:	vldr	s8, [pc, #520]	; 17cf8 <__assert_fail@plt+0x6d84>
   17aec:	vcmpe.f32	s2, s8
   17af0:	vmrs	APSR_nzcv, fpscr
   17af4:	bpl	17b4c <__assert_fail@plt+0x6bd8>
   17af8:	vldr	s8, [pc, #508]	; 17cfc <__assert_fail@plt+0x6d88>
   17afc:	vldr	s10, [r0, #12]
   17b00:	vcmpe.f32	s10, s8
   17b04:	vmrs	APSR_nzcv, fpscr
   17b08:	ble	17b4c <__assert_fail@plt+0x6bd8>
   17b0c:	vldr	s8, [r0]
   17b10:	vcmpe.f32	s8, #0.0
   17b14:	vmrs	APSR_nzcv, fpscr
   17b18:	blt	17b4c <__assert_fail@plt+0x6bd8>
   17b1c:	vadd.f32	s6, s8, s6
   17b20:	vcmpe.f32	s6, s2
   17b24:	vmrs	APSR_nzcv, fpscr
   17b28:	bpl	17b4c <__assert_fail@plt+0x6bd8>
   17b2c:	vldr	s8, [r0, #4]
   17b30:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17b34:	vcmpe.f32	s8, s10
   17b38:	vmrs	APSR_nzcv, fpscr
   17b3c:	bhi	17b4c <__assert_fail@plt+0x6bd8>
   17b40:	vcmpe.f32	s6, s8
   17b44:	vmrs	APSR_nzcv, fpscr
   17b48:	bmi	17b64 <__assert_fail@plt+0x6bf0>
   17b4c:	vldr	s2, [pc, #428]	; 17d00 <__assert_fail@plt+0x6d8c>
   17b50:	movw	r0, #35768	; 0x8bb8
   17b54:	movt	r0, #1
   17b58:	str	r0, [r4, #20]
   17b5c:	b	17b64 <__assert_fail@plt+0x6bf0>
   17b60:	mov	r0, r1
   17b64:	vmul.f32	s6, s2, s0
   17b68:	vcmpe.f32	s6, s4
   17b6c:	vmrs	APSR_nzcv, fpscr
   17b70:	bpl	17c18 <__assert_fail@plt+0x6ca4>
   17b74:	vldr	s4, [r0, #12]
   17b78:	ldrb	r0, [r0, #16]
   17b7c:	mvn	r7, #0
   17b80:	cmp	r0, #0
   17b84:	vmul.f32	s0, s4, s0
   17b88:	vldr	s4, [pc, #372]	; 17d04 <__assert_fail@plt+0x6d90>
   17b8c:	vmul.f32	s2, s2, s0
   17b90:	vseleq.f32	s0, s2, s0
   17b94:	vcmpe.f32	s0, s4
   17b98:	vmrs	APSR_nzcv, fpscr
   17b9c:	bge	17c8c <__assert_fail@plt+0x6d18>
   17ba0:	vcvt.u32.f32	s0, s0
   17ba4:	mov	r0, r4
   17ba8:	vmov	r1, s0
   17bac:	bl	175bc <__assert_fail@plt+0x6648>
   17bb0:	cmp	r0, #0
   17bb4:	beq	17c8c <__assert_fail@plt+0x6d18>
   17bb8:	ldr	r1, [r4, #8]
   17bbc:	ldr	r2, [r4, #24]
   17bc0:	mov	r0, sl
   17bc4:	blx	r2
   17bc8:	mov	r7, r0
   17bcc:	ldr	r0, [r4, #8]
   17bd0:	cmp	r7, r0
   17bd4:	bcs	17cf0 <__assert_fail@plt+0x6d7c>
   17bd8:	ldr	r5, [r4]
   17bdc:	mov	r9, r5
   17be0:	ldr	r1, [r9, r7, lsl #3]!
   17be4:	cmp	r1, #0
   17be8:	beq	17c18 <__assert_fail@plt+0x6ca4>
   17bec:	cmp	r1, sl
   17bf0:	mov	r0, sl
   17bf4:	beq	17c10 <__assert_fail@plt+0x6c9c>
   17bf8:	ldr	r2, [r4, #28]
   17bfc:	mov	r0, sl
   17c00:	blx	r2
   17c04:	cmp	r0, #0
   17c08:	beq	17ca0 <__assert_fail@plt+0x6d2c>
   17c0c:	ldr	r0, [r9]
   17c10:	cmp	r0, #0
   17c14:	bne	17cf0 <__assert_fail@plt+0x6d7c>
   17c18:	ldr	r0, [r9]
   17c1c:	cmp	r0, #0
   17c20:	beq	17c3c <__assert_fail@plt+0x6cc8>
   17c24:	ldr	r0, [r4, #36]	; 0x24
   17c28:	cmp	r0, #0
   17c2c:	beq	17c5c <__assert_fail@plt+0x6ce8>
   17c30:	ldr	r1, [r0, #4]
   17c34:	str	r1, [r4, #36]	; 0x24
   17c38:	b	17c6c <__assert_fail@plt+0x6cf8>
   17c3c:	str	sl, [r9]
   17c40:	ldr	r0, [r4, #12]
   17c44:	ldr	r1, [r4, #16]
   17c48:	add	r0, r0, #1
   17c4c:	add	r1, r1, #1
   17c50:	str	r0, [r4, #12]
   17c54:	str	r1, [r4, #16]
   17c58:	b	17c88 <__assert_fail@plt+0x6d14>
   17c5c:	mov	r0, #8
   17c60:	bl	18280 <__assert_fail@plt+0x730c>
   17c64:	cmp	r0, #0
   17c68:	beq	17c98 <__assert_fail@plt+0x6d24>
   17c6c:	str	sl, [r0]
   17c70:	ldr	r1, [r9, #4]
   17c74:	str	r1, [r0, #4]
   17c78:	str	r0, [r9, #4]
   17c7c:	ldr	r0, [r4, #16]
   17c80:	add	r0, r0, #1
   17c84:	str	r0, [r4, #16]
   17c88:	mov	r7, #1
   17c8c:	mov	r0, r7
   17c90:	sub	sp, fp, #28
   17c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c98:	mvn	r7, #0
   17c9c:	b	17c8c <__assert_fail@plt+0x6d18>
   17ca0:	add	r6, r5, r7, lsl #3
   17ca4:	ldr	r0, [r6, #4]!
   17ca8:	cmp	r0, #0
   17cac:	beq	17c18 <__assert_fail@plt+0x6ca4>
   17cb0:	ldr	r1, [r0]
   17cb4:	cmp	r1, sl
   17cb8:	beq	17ce4 <__assert_fail@plt+0x6d70>
   17cbc:	ldr	r2, [r4, #28]
   17cc0:	mov	r0, sl
   17cc4:	blx	r2
   17cc8:	ldr	r6, [r6]
   17ccc:	cmp	r0, #0
   17cd0:	beq	17ca4 <__assert_fail@plt+0x6d30>
   17cd4:	ldr	r0, [r6]
   17cd8:	cmp	r0, #0
   17cdc:	beq	17c18 <__assert_fail@plt+0x6ca4>
   17ce0:	b	17cf0 <__assert_fail@plt+0x6d7c>
   17ce4:	mov	r0, sl
   17ce8:	cmp	r0, #0
   17cec:	beq	17c18 <__assert_fail@plt+0x6ca4>
   17cf0:	bl	10f38 <abort@plt>
   17cf4:	stclcc	12, cr12, [ip, #820]	; 0x334
   17cf8:	svccc	0x00666666
   17cfc:	svccc	0x008ccccd
   17d00:	svccc	0x004ccccd
   17d04:	svcmi	0x00800000
   17d08:	push	{r4, sl, fp, lr}
   17d0c:	add	fp, sp, #8
   17d10:	sub	sp, sp, #8
   17d14:	add	r2, sp, #4
   17d18:	mov	r4, r1
   17d1c:	bl	179c4 <__assert_fail@plt+0x6a50>
   17d20:	cmn	r0, #1
   17d24:	beq	17d38 <__assert_fail@plt+0x6dc4>
   17d28:	ldr	r1, [sp, #4]
   17d2c:	cmp	r0, #0
   17d30:	moveq	r4, r1
   17d34:	b	17d3c <__assert_fail@plt+0x6dc8>
   17d38:	mov	r4, #0
   17d3c:	mov	r0, r4
   17d40:	sub	sp, fp, #8
   17d44:	pop	{r4, sl, fp, pc}
   17d48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17d4c:	add	fp, sp, #24
   17d50:	mov	r9, r1
   17d54:	ldr	r1, [r0, #8]
   17d58:	ldr	r2, [r0, #24]
   17d5c:	mov	r5, r0
   17d60:	mov	r0, r9
   17d64:	blx	r2
   17d68:	mov	r7, r0
   17d6c:	ldr	r0, [r5, #8]
   17d70:	cmp	r7, r0
   17d74:	bcs	17fd8 <__assert_fail@plt+0x7064>
   17d78:	ldr	r6, [r5]
   17d7c:	mov	r8, #0
   17d80:	mov	r4, r6
   17d84:	ldr	r1, [r4, r7, lsl #3]!
   17d88:	cmp	r1, #0
   17d8c:	beq	17e40 <__assert_fail@plt+0x6ecc>
   17d90:	cmp	r1, r9
   17d94:	beq	17db0 <__assert_fail@plt+0x6e3c>
   17d98:	ldr	r2, [r5, #28]
   17d9c:	mov	r0, r9
   17da0:	blx	r2
   17da4:	cmp	r0, #0
   17da8:	beq	17de8 <__assert_fail@plt+0x6e74>
   17dac:	ldr	r9, [r4]
   17db0:	add	r0, r6, r7, lsl #3
   17db4:	ldr	r0, [r0, #4]
   17db8:	cmp	r0, #0
   17dbc:	beq	17e30 <__assert_fail@plt+0x6ebc>
   17dc0:	ldm	r0, {r1, r2}
   17dc4:	stm	r4, {r1, r2}
   17dc8:	mov	r1, #0
   17dcc:	str	r1, [r0]
   17dd0:	ldr	r1, [r5, #36]	; 0x24
   17dd4:	str	r1, [r0, #4]
   17dd8:	str	r0, [r5, #36]	; 0x24
   17ddc:	cmp	r9, #0
   17de0:	bne	17e78 <__assert_fail@plt+0x6f04>
   17de4:	b	17e40 <__assert_fail@plt+0x6ecc>
   17de8:	add	r7, r6, r7, lsl #3
   17dec:	ldr	r0, [r7, #4]!
   17df0:	cmp	r0, #0
   17df4:	beq	17e40 <__assert_fail@plt+0x6ecc>
   17df8:	ldr	r1, [r0]
   17dfc:	cmp	r1, r9
   17e00:	beq	17e48 <__assert_fail@plt+0x6ed4>
   17e04:	ldr	r2, [r5, #28]
   17e08:	mov	r0, r9
   17e0c:	blx	r2
   17e10:	ldr	r1, [r7]
   17e14:	cmp	r0, #0
   17e18:	bne	17e50 <__assert_fail@plt+0x6edc>
   17e1c:	ldr	r0, [r1, #4]!
   17e20:	mov	r7, r1
   17e24:	cmp	r0, #0
   17e28:	bne	17df8 <__assert_fail@plt+0x6e84>
   17e2c:	b	17e40 <__assert_fail@plt+0x6ecc>
   17e30:	mov	r0, #0
   17e34:	str	r0, [r4]
   17e38:	cmp	r9, #0
   17e3c:	bne	17e78 <__assert_fail@plt+0x6f04>
   17e40:	mov	r0, r8
   17e44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17e48:	mov	r1, r0
   17e4c:	b	17e54 <__assert_fail@plt+0x6ee0>
   17e50:	ldr	r9, [r1]
   17e54:	ldr	r0, [r1, #4]
   17e58:	str	r0, [r7]
   17e5c:	mov	r0, #0
   17e60:	str	r0, [r1]
   17e64:	ldr	r0, [r5, #36]	; 0x24
   17e68:	str	r0, [r1, #4]
   17e6c:	str	r1, [r5, #36]	; 0x24
   17e70:	cmp	r9, #0
   17e74:	beq	17e40 <__assert_fail@plt+0x6ecc>
   17e78:	ldr	r0, [r5, #16]
   17e7c:	sub	r0, r0, #1
   17e80:	str	r0, [r5, #16]
   17e84:	ldr	r0, [r4]
   17e88:	cmp	r0, #0
   17e8c:	bne	17fcc <__assert_fail@plt+0x7058>
   17e90:	ldr	r0, [r5, #12]
   17e94:	vldr	s0, [r5, #8]
   17e98:	sub	r1, r0, #1
   17e9c:	str	r1, [r5, #12]
   17ea0:	vmov	s2, r1
   17ea4:	ldr	r0, [r5, #20]
   17ea8:	vcvt.f32.u32	s0, s0
   17eac:	vcvt.f32.u32	s2, s2
   17eb0:	vldr	s4, [r0]
   17eb4:	vmul.f32	s6, s4, s0
   17eb8:	vcmpe.f32	s6, s2
   17ebc:	vmrs	APSR_nzcv, fpscr
   17ec0:	ble	17fcc <__assert_fail@plt+0x7058>
   17ec4:	movw	r1, #35768	; 0x8bb8
   17ec8:	movt	r1, #1
   17ecc:	cmp	r0, r1
   17ed0:	beq	17f5c <__assert_fail@plt+0x6fe8>
   17ed4:	vldr	s8, [pc, #256]	; 17fdc <__assert_fail@plt+0x7068>
   17ed8:	vldr	s6, [r0, #8]
   17edc:	vcmpe.f32	s6, s8
   17ee0:	vmrs	APSR_nzcv, fpscr
   17ee4:	ble	17f48 <__assert_fail@plt+0x6fd4>
   17ee8:	vldr	s10, [pc, #240]	; 17fe0 <__assert_fail@plt+0x706c>
   17eec:	vcmpe.f32	s6, s10
   17ef0:	vmrs	APSR_nzcv, fpscr
   17ef4:	bpl	17f48 <__assert_fail@plt+0x6fd4>
   17ef8:	vcmpe.f32	s4, #0.0
   17efc:	vmrs	APSR_nzcv, fpscr
   17f00:	blt	17f48 <__assert_fail@plt+0x6fd4>
   17f04:	vldr	s10, [r0, #12]
   17f08:	vldr	s12, [pc, #212]	; 17fe4 <__assert_fail@plt+0x7070>
   17f0c:	vcmpe.f32	s10, s12
   17f10:	vmrs	APSR_nzcv, fpscr
   17f14:	ble	17f48 <__assert_fail@plt+0x6fd4>
   17f18:	vadd.f32	s8, s4, s8
   17f1c:	vcmpe.f32	s8, s6
   17f20:	vmrs	APSR_nzcv, fpscr
   17f24:	bpl	17f48 <__assert_fail@plt+0x6fd4>
   17f28:	vldr	s6, [r0, #4]
   17f2c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17f30:	vcmpe.f32	s6, s10
   17f34:	vmrs	APSR_nzcv, fpscr
   17f38:	bhi	17f48 <__assert_fail@plt+0x6fd4>
   17f3c:	vcmpe.f32	s8, s6
   17f40:	vmrs	APSR_nzcv, fpscr
   17f44:	bmi	17f60 <__assert_fail@plt+0x6fec>
   17f48:	vldr	s4, [pc, #152]	; 17fe8 <__assert_fail@plt+0x7074>
   17f4c:	movw	r0, #35768	; 0x8bb8
   17f50:	movt	r0, #1
   17f54:	str	r0, [r5, #20]
   17f58:	b	17f60 <__assert_fail@plt+0x6fec>
   17f5c:	mov	r0, r1
   17f60:	vmul.f32	s4, s4, s0
   17f64:	vcmpe.f32	s4, s2
   17f68:	vmrs	APSR_nzcv, fpscr
   17f6c:	ble	17fcc <__assert_fail@plt+0x7058>
   17f70:	vldr	s2, [r0, #4]
   17f74:	ldrb	r1, [r0, #16]
   17f78:	cmp	r1, #0
   17f7c:	vmul.f32	s0, s2, s0
   17f80:	bne	17f8c <__assert_fail@plt+0x7018>
   17f84:	vldr	s2, [r0, #8]
   17f88:	vmul.f32	s0, s0, s2
   17f8c:	vcvt.u32.f32	s0, s0
   17f90:	mov	r0, r5
   17f94:	vmov	r1, s0
   17f98:	bl	175bc <__assert_fail@plt+0x6648>
   17f9c:	cmp	r0, #0
   17fa0:	bne	17fcc <__assert_fail@plt+0x7058>
   17fa4:	ldr	r0, [r5, #36]	; 0x24
   17fa8:	cmp	r0, #0
   17fac:	beq	17fc4 <__assert_fail@plt+0x7050>
   17fb0:	ldr	r4, [r0, #4]
   17fb4:	bl	13554 <__assert_fail@plt+0x25e0>
   17fb8:	cmp	r4, #0
   17fbc:	mov	r0, r4
   17fc0:	bne	17fb0 <__assert_fail@plt+0x703c>
   17fc4:	mov	r0, #0
   17fc8:	str	r0, [r5, #36]	; 0x24
   17fcc:	mov	r8, r9
   17fd0:	mov	r0, r8
   17fd4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17fd8:	bl	10f38 <abort@plt>
   17fdc:	stclcc	12, cr12, [ip, #820]	; 0x334
   17fe0:	svccc	0x00666666
   17fe4:	svccc	0x008ccccd
   17fe8:	andeq	r0, r0, r0
   17fec:	b	17d48 <__assert_fail@plt+0x6dd4>
   17ff0:	vdup.32	q8, r1
   17ff4:	mov	r2, #0
   17ff8:	str	r2, [r0, #20]
   17ffc:	str	r2, [r0, #24]
   18000:	mov	r2, #1
   18004:	strb	r2, [r0, #28]
   18008:	vst1.32	{d16-d17}, [r0]!
   1800c:	str	r1, [r0]
   18010:	bx	lr
   18014:	ldrb	r0, [r0, #28]
   18018:	bx	lr
   1801c:	push	{fp, lr}
   18020:	mov	fp, sp
   18024:	ldrb	r3, [r0, #28]
   18028:	ldr	r2, [r0, #20]
   1802c:	eor	lr, r3, #1
   18030:	add	r2, r2, lr
   18034:	and	r3, r2, #3
   18038:	ldr	ip, [r0, r3, lsl #2]
   1803c:	str	r1, [r0, r3, lsl #2]
   18040:	str	r3, [r0, #20]
   18044:	ldr	r1, [r0, #24]
   18048:	cmp	r3, r1
   1804c:	addeq	r1, r2, lr
   18050:	andeq	r1, r1, #3
   18054:	streq	r1, [r0, #24]
   18058:	mov	r1, #0
   1805c:	strb	r1, [r0, #28]
   18060:	mov	r0, ip
   18064:	pop	{fp, pc}
   18068:	push	{fp, lr}
   1806c:	mov	fp, sp
   18070:	ldrb	r1, [r0, #28]
   18074:	cmp	r1, #0
   18078:	bne	180b4 <__assert_fail@plt+0x7140>
   1807c:	ldr	r3, [r0, #20]
   18080:	ldr	r2, [r0, #16]
   18084:	ldr	r1, [r0, r3, lsl #2]
   18088:	str	r2, [r0, r3, lsl #2]
   1808c:	ldr	r2, [r0, #20]
   18090:	ldr	r3, [r0, #24]
   18094:	cmp	r2, r3
   18098:	moveq	r2, #1
   1809c:	strbeq	r2, [r0, #28]
   180a0:	subne	r2, r2, #1
   180a4:	andne	r2, r2, #3
   180a8:	strne	r2, [r0, #20]
   180ac:	mov	r0, r1
   180b0:	pop	{fp, pc}
   180b4:	bl	10f38 <abort@plt>
   180b8:	push	{r4, r5, r6, sl, fp, lr}
   180bc:	add	fp, sp, #16
   180c0:	mov	r5, r0
   180c4:	mov	r0, #0
   180c8:	mov	r4, r1
   180cc:	add	r6, r2, #19
   180d0:	strb	r0, [r2, #20]
   180d4:	mov	r0, r5
   180d8:	mov	r1, r4
   180dc:	mov	r2, #10
   180e0:	mov	r3, #0
   180e4:	bl	186f0 <__assert_fail@plt+0x777c>
   180e8:	add	r2, r0, r0, lsl #2
   180ec:	sub	r2, r5, r2, lsl #1
   180f0:	orr	r2, r2, #48	; 0x30
   180f4:	strb	r2, [r6], #-1
   180f8:	rsbs	r2, r5, #9
   180fc:	mov	r5, r0
   18100:	rscs	r2, r4, #0
   18104:	mov	r4, r1
   18108:	bcc	180d4 <__assert_fail@plt+0x7160>
   1810c:	add	r0, r6, #1
   18110:	pop	{r4, r5, r6, sl, fp, pc}
   18114:	sub	sp, sp, #8
   18118:	push	{fp, lr}
   1811c:	mov	fp, sp
   18120:	sub	sp, sp, #8
   18124:	str	r3, [fp, #12]
   18128:	add	r3, fp, #8
   1812c:	str	r2, [fp, #8]
   18130:	orr	r3, r3, #4
   18134:	str	r3, [sp, #4]
   18138:	bl	10ddc <ioctl@plt>
   1813c:	mov	sp, fp
   18140:	pop	{fp, lr}
   18144:	add	sp, sp, #8
   18148:	bx	lr
   1814c:	sub	sp, sp, #4
   18150:	push	{fp, lr}
   18154:	mov	fp, sp
   18158:	sub	sp, sp, #4
   1815c:	str	r3, [fp, #8]
   18160:	tst	r2, #64	; 0x40
   18164:	mov	r3, #0
   18168:	ldrne	r3, [fp, #8]
   1816c:	bl	10e60 <openat64@plt>
   18170:	bl	181e4 <__assert_fail@plt+0x7270>
   18174:	mov	sp, fp
   18178:	pop	{fp, lr}
   1817c:	add	sp, sp, #4
   18180:	bx	lr
   18184:	push	{r4, r5, r6, sl, fp, lr}
   18188:	add	fp, sp, #16
   1818c:	orr	r2, r2, #18688	; 0x4900
   18190:	mov	r4, r3
   18194:	orr	r2, r2, #524288	; 0x80000
   18198:	bl	1814c <__assert_fail@plt+0x71d8>
   1819c:	mov	r5, r0
   181a0:	mov	r0, #0
   181a4:	cmp	r5, #0
   181a8:	bmi	181e0 <__assert_fail@plt+0x726c>
   181ac:	mov	r0, r5
   181b0:	bl	10ecc <fdopendir@plt>
   181b4:	cmp	r0, #0
   181b8:	beq	181c4 <__assert_fail@plt+0x7250>
   181bc:	str	r5, [r4]
   181c0:	pop	{r4, r5, r6, sl, fp, pc}
   181c4:	bl	10e78 <__errno_location@plt>
   181c8:	ldr	r6, [r0]
   181cc:	mov	r4, r0
   181d0:	mov	r0, r5
   181d4:	bl	10f44 <close@plt>
   181d8:	mov	r0, #0
   181dc:	str	r6, [r4]
   181e0:	pop	{r4, r5, r6, sl, fp, pc}
   181e4:	push	{r4, r5, r6, r7, fp, lr}
   181e8:	add	fp, sp, #16
   181ec:	mov	r4, r0
   181f0:	cmp	r0, #2
   181f4:	bhi	18224 <__assert_fail@plt+0x72b0>
   181f8:	mov	r0, r4
   181fc:	bl	18610 <__assert_fail@plt+0x769c>
   18200:	mov	r5, r0
   18204:	bl	10e78 <__errno_location@plt>
   18208:	ldr	r7, [r0]
   1820c:	mov	r6, r0
   18210:	mov	r0, r4
   18214:	bl	10f44 <close@plt>
   18218:	mov	r0, r5
   1821c:	str	r7, [r6]
   18220:	pop	{r4, r5, r6, r7, fp, pc}
   18224:	mov	r0, r4
   18228:	pop	{r4, r5, r6, r7, fp, pc}
   1822c:	clz	r2, r1
   18230:	clz	r3, r0
   18234:	lsr	r2, r2, #5
   18238:	lsr	r3, r3, #5
   1823c:	orrs	r2, r3, r2
   18240:	movwne	r1, #1
   18244:	movwne	r0, #1
   18248:	cmp	r1, #0
   1824c:	beq	1827c <__assert_fail@plt+0x7308>
   18250:	mvn	r2, #-2147483648	; 0x80000000
   18254:	udiv	r2, r2, r1
   18258:	cmp	r2, r0
   1825c:	bcs	1827c <__assert_fail@plt+0x7308>
   18260:	push	{fp, lr}
   18264:	mov	fp, sp
   18268:	bl	10e78 <__errno_location@plt>
   1826c:	mov	r1, #12
   18270:	str	r1, [r0]
   18274:	mov	r0, #0
   18278:	pop	{fp, pc}
   1827c:	b	10d04 <calloc@plt>
   18280:	cmp	r0, #0
   18284:	movweq	r0, #1
   18288:	cmn	r0, #1
   1828c:	ble	18294 <__assert_fail@plt+0x7320>
   18290:	b	10e0c <malloc@plt>
   18294:	push	{fp, lr}
   18298:	mov	fp, sp
   1829c:	bl	10e78 <__errno_location@plt>
   182a0:	mov	r1, #12
   182a4:	str	r1, [r0]
   182a8:	mov	r0, #0
   182ac:	pop	{fp, pc}
   182b0:	push	{fp, lr}
   182b4:	mov	fp, sp
   182b8:	cmp	r0, #0
   182bc:	beq	182d8 <__assert_fail@plt+0x7364>
   182c0:	cmp	r1, #0
   182c4:	beq	182e4 <__assert_fail@plt+0x7370>
   182c8:	cmn	r1, #1
   182cc:	ble	182f0 <__assert_fail@plt+0x737c>
   182d0:	pop	{fp, lr}
   182d4:	b	10d94 <realloc@plt>
   182d8:	mov	r0, r1
   182dc:	pop	{fp, lr}
   182e0:	b	18280 <__assert_fail@plt+0x730c>
   182e4:	bl	13554 <__assert_fail@plt+0x25e0>
   182e8:	mov	r0, #0
   182ec:	pop	{fp, pc}
   182f0:	bl	10e78 <__errno_location@plt>
   182f4:	mov	r1, #12
   182f8:	str	r1, [r0]
   182fc:	mov	r0, #0
   18300:	pop	{fp, pc}
   18304:	movw	r2, #62998	; 0xf616
   18308:	mov	r1, #0
   1830c:	movt	r2, #149	; 0x95
   18310:	str	r1, [r0, #16]
   18314:	str	r1, [r0, #20]
   18318:	str	r2, [r0, #24]
   1831c:	bx	lr
   18320:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   18324:	add	fp, sp, #24
   18328:	ldr	r2, [r0, #24]
   1832c:	movw	r3, #62998	; 0xf616
   18330:	movt	r3, #149	; 0x95
   18334:	cmp	r2, r3
   18338:	bne	183d4 <__assert_fail@plt+0x7460>
   1833c:	add	r3, r0, #16
   18340:	add	ip, r0, #8
   18344:	ldrd	r4, [r3]
   18348:	orrs	r2, r4, r5
   1834c:	beq	18388 <__assert_fail@plt+0x7414>
   18350:	ldr	r6, [r1, #96]	; 0x60
   18354:	ldr	r9, [r1, #100]	; 0x64
   18358:	ldm	r0, {r2, r7}
   1835c:	eor	r7, r9, r7
   18360:	eor	r2, r6, r2
   18364:	orrs	r2, r2, r7
   18368:	bne	18388 <__assert_fail@plt+0x7414>
   1836c:	ldm	ip, {r2, r7}
   18370:	ldm	r1, {r6, r9}
   18374:	eor	r7, r9, r7
   18378:	eor	r2, r6, r2
   1837c:	orrs	r2, r2, r7
   18380:	mov	r2, #1
   18384:	beq	183c0 <__assert_fail@plt+0x744c>
   18388:	adds	r6, r4, #1
   1838c:	adc	r7, r5, #0
   18390:	and	r2, r6, r4
   18394:	strd	r6, [r3]
   18398:	and	r3, r7, r5
   1839c:	orrs	r2, r2, r3
   183a0:	mov	r2, #0
   183a4:	bne	183c0 <__assert_fail@plt+0x744c>
   183a8:	orrs	r3, r6, r7
   183ac:	beq	183c8 <__assert_fail@plt+0x7454>
   183b0:	ldrd	r4, [r1]
   183b4:	strd	r4, [ip]
   183b8:	ldrd	r4, [r1, #96]	; 0x60
   183bc:	strd	r4, [r0]
   183c0:	mov	r0, r2
   183c4:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   183c8:	mov	r2, #1
   183cc:	mov	r0, r2
   183d0:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   183d4:	movw	r0, #35788	; 0x8bcc
   183d8:	movw	r1, #35812	; 0x8be4
   183dc:	movw	r3, #35826	; 0x8bf2
   183e0:	mov	r2, #60	; 0x3c
   183e4:	movt	r0, #1
   183e8:	movt	r1, #1
   183ec:	movt	r3, #1
   183f0:	bl	10f74 <__assert_fail@plt>
   183f4:	sub	sp, sp, #8
   183f8:	push	{r4, r5, r6, r7, fp, lr}
   183fc:	add	fp, sp, #16
   18400:	sub	sp, sp, #8
   18404:	mov	r5, r0
   18408:	add	r0, fp, #8
   1840c:	cmp	r1, #11
   18410:	str	r2, [fp, #8]
   18414:	str	r3, [fp, #12]
   18418:	str	r0, [sp, #4]
   1841c:	bhi	18458 <__assert_fail@plt+0x74e4>
   18420:	mov	r0, #1
   18424:	movw	r2, #1300	; 0x514
   18428:	tst	r2, r0, lsl r1
   1842c:	bne	18518 <__assert_fail@plt+0x75a4>
   18430:	movw	r2, #2570	; 0xa0a
   18434:	tst	r2, r0, lsl r1
   18438:	bne	18480 <__assert_fail@plt+0x750c>
   1843c:	cmp	r1, #0
   18440:	bne	18458 <__assert_fail@plt+0x74e4>
   18444:	ldr	r0, [sp, #4]
   18448:	add	r1, r0, #4
   1844c:	str	r1, [sp, #4]
   18450:	mov	r1, #0
   18454:	b	18524 <__assert_fail@plt+0x75b0>
   18458:	sub	r0, r1, #1024	; 0x400
   1845c:	cmp	r0, #10
   18460:	bhi	18518 <__assert_fail@plt+0x75a4>
   18464:	mov	r2, #1
   18468:	movw	r3, #645	; 0x285
   1846c:	tst	r3, r2, lsl r0
   18470:	bne	18518 <__assert_fail@plt+0x75a4>
   18474:	movw	r3, #1282	; 0x502
   18478:	tst	r3, r2, lsl r0
   1847c:	beq	1848c <__assert_fail@plt+0x7518>
   18480:	mov	r0, r5
   18484:	bl	10e9c <fcntl64@plt>
   18488:	b	18530 <__assert_fail@plt+0x75bc>
   1848c:	cmp	r0, #6
   18490:	bne	18518 <__assert_fail@plt+0x75a4>
   18494:	ldr	r0, [sp, #4]
   18498:	movw	r7, #37204	; 0x9154
   1849c:	movt	r7, #2
   184a0:	add	r1, r0, #4
   184a4:	str	r1, [sp, #4]
   184a8:	ldr	r6, [r0]
   184ac:	ldr	r0, [r7]
   184b0:	cmp	r0, #0
   184b4:	bmi	18554 <__assert_fail@plt+0x75e0>
   184b8:	mov	r0, r5
   184bc:	movw	r1, #1030	; 0x406
   184c0:	mov	r2, r6
   184c4:	bl	10e9c <fcntl64@plt>
   184c8:	mov	r4, r0
   184cc:	cmn	r0, #1
   184d0:	bgt	18548 <__assert_fail@plt+0x75d4>
   184d4:	bl	10e78 <__errno_location@plt>
   184d8:	ldr	r0, [r0]
   184dc:	cmp	r0, #22
   184e0:	bne	18548 <__assert_fail@plt+0x75d4>
   184e4:	mov	r0, r5
   184e8:	mov	r1, #0
   184ec:	mov	r2, r6
   184f0:	bl	10e9c <fcntl64@plt>
   184f4:	mov	r4, r0
   184f8:	cmp	r0, #0
   184fc:	bmi	18534 <__assert_fail@plt+0x75c0>
   18500:	mvn	r0, #0
   18504:	str	r0, [r7]
   18508:	mov	r0, #1
   1850c:	cmp	r0, #0
   18510:	bne	18580 <__assert_fail@plt+0x760c>
   18514:	b	18534 <__assert_fail@plt+0x75c0>
   18518:	ldr	r0, [sp, #4]
   1851c:	add	r2, r0, #4
   18520:	str	r2, [sp, #4]
   18524:	ldr	r2, [r0]
   18528:	mov	r0, r5
   1852c:	bl	10e9c <fcntl64@plt>
   18530:	mov	r4, r0
   18534:	mov	r0, r4
   18538:	sub	sp, fp, #16
   1853c:	pop	{r4, r5, r6, r7, fp, lr}
   18540:	add	sp, sp, #8
   18544:	bx	lr
   18548:	mov	r0, #1
   1854c:	str	r0, [r7]
   18550:	b	18534 <__assert_fail@plt+0x75c0>
   18554:	mov	r0, r5
   18558:	mov	r1, #0
   1855c:	mov	r2, r6
   18560:	bl	10e9c <fcntl64@plt>
   18564:	mov	r4, r0
   18568:	ldr	r0, [r7]
   1856c:	add	r0, r0, #1
   18570:	clz	r0, r0
   18574:	lsr	r0, r0, #5
   18578:	cmp	r0, #0
   1857c:	beq	18534 <__assert_fail@plt+0x75c0>
   18580:	cmp	r4, #0
   18584:	bmi	18534 <__assert_fail@plt+0x75c0>
   18588:	mov	r0, r4
   1858c:	mov	r1, #1
   18590:	bl	10e9c <fcntl64@plt>
   18594:	cmp	r0, #0
   18598:	bmi	185b4 <__assert_fail@plt+0x7640>
   1859c:	orr	r2, r0, #1
   185a0:	mov	r0, r4
   185a4:	mov	r1, #2
   185a8:	bl	10e9c <fcntl64@plt>
   185ac:	cmn	r0, #1
   185b0:	bne	18534 <__assert_fail@plt+0x75c0>
   185b4:	bl	10e78 <__errno_location@plt>
   185b8:	ldr	r6, [r0]
   185bc:	mov	r5, r0
   185c0:	mov	r0, r4
   185c4:	bl	10f44 <close@plt>
   185c8:	str	r6, [r5]
   185cc:	mvn	r4, #0
   185d0:	b	18534 <__assert_fail@plt+0x75c0>
   185d4:	sub	sp, sp, #8
   185d8:	push	{fp, lr}
   185dc:	mov	fp, sp
   185e0:	sub	sp, sp, #8
   185e4:	str	r2, [fp, #8]
   185e8:	str	r3, [fp, #12]
   185ec:	tst	r1, #64	; 0x40
   185f0:	mov	r2, #0
   185f4:	ldrne	r2, [fp, #8]
   185f8:	bl	10df4 <open64@plt>
   185fc:	bl	181e4 <__assert_fail@plt+0x7270>
   18600:	mov	sp, fp
   18604:	pop	{fp, lr}
   18608:	add	sp, sp, #8
   1860c:	bx	lr
   18610:	mov	r1, #0
   18614:	mov	r2, #3
   18618:	b	183f4 <__assert_fail@plt+0x7480>
   1861c:	cmp	r3, #0
   18620:	cmpeq	r2, #0
   18624:	bne	18648 <__assert_fail@plt+0x76d4>
   18628:	cmp	r1, #0
   1862c:	movlt	r1, #-2147483648	; 0x80000000
   18630:	movlt	r0, #0
   18634:	blt	18644 <__assert_fail@plt+0x76d0>
   18638:	cmpeq	r0, #0
   1863c:	mvnne	r1, #-2147483648	; 0x80000000
   18640:	mvnne	r0, #0
   18644:	b	1872c <__assert_fail@plt+0x77b8>
   18648:	sub	sp, sp, #8
   1864c:	push	{sp, lr}
   18650:	cmp	r1, #0
   18654:	blt	18674 <__assert_fail@plt+0x7700>
   18658:	cmp	r3, #0
   1865c:	blt	186a8 <__assert_fail@plt+0x7734>
   18660:	bl	1873c <__assert_fail@plt+0x77c8>
   18664:	ldr	lr, [sp, #4]
   18668:	add	sp, sp, #8
   1866c:	pop	{r2, r3}
   18670:	bx	lr
   18674:	rsbs	r0, r0, #0
   18678:	sbc	r1, r1, r1, lsl #1
   1867c:	cmp	r3, #0
   18680:	blt	186cc <__assert_fail@plt+0x7758>
   18684:	bl	1873c <__assert_fail@plt+0x77c8>
   18688:	ldr	lr, [sp, #4]
   1868c:	add	sp, sp, #8
   18690:	pop	{r2, r3}
   18694:	rsbs	r0, r0, #0
   18698:	sbc	r1, r1, r1, lsl #1
   1869c:	rsbs	r2, r2, #0
   186a0:	sbc	r3, r3, r3, lsl #1
   186a4:	bx	lr
   186a8:	rsbs	r2, r2, #0
   186ac:	sbc	r3, r3, r3, lsl #1
   186b0:	bl	1873c <__assert_fail@plt+0x77c8>
   186b4:	ldr	lr, [sp, #4]
   186b8:	add	sp, sp, #8
   186bc:	pop	{r2, r3}
   186c0:	rsbs	r0, r0, #0
   186c4:	sbc	r1, r1, r1, lsl #1
   186c8:	bx	lr
   186cc:	rsbs	r2, r2, #0
   186d0:	sbc	r3, r3, r3, lsl #1
   186d4:	bl	1873c <__assert_fail@plt+0x77c8>
   186d8:	ldr	lr, [sp, #4]
   186dc:	add	sp, sp, #8
   186e0:	pop	{r2, r3}
   186e4:	rsbs	r2, r2, #0
   186e8:	sbc	r3, r3, r3, lsl #1
   186ec:	bx	lr
   186f0:	cmp	r3, #0
   186f4:	cmpeq	r2, #0
   186f8:	bne	18710 <__assert_fail@plt+0x779c>
   186fc:	cmp	r1, #0
   18700:	cmpeq	r0, #0
   18704:	mvnne	r1, #0
   18708:	mvnne	r0, #0
   1870c:	b	1872c <__assert_fail@plt+0x77b8>
   18710:	sub	sp, sp, #8
   18714:	push	{sp, lr}
   18718:	bl	1873c <__assert_fail@plt+0x77c8>
   1871c:	ldr	lr, [sp, #4]
   18720:	add	sp, sp, #8
   18724:	pop	{r2, r3}
   18728:	bx	lr
   1872c:	push	{r1, lr}
   18730:	mov	r0, #8
   18734:	bl	10d10 <raise@plt>
   18738:	pop	{r1, pc}
   1873c:	cmp	r1, r3
   18740:	cmpeq	r0, r2
   18744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18748:	mov	r4, r0
   1874c:	movcc	r0, #0
   18750:	mov	r5, r1
   18754:	ldr	lr, [sp, #36]	; 0x24
   18758:	movcc	r1, r0
   1875c:	bcc	18858 <__assert_fail@plt+0x78e4>
   18760:	cmp	r3, #0
   18764:	clzeq	ip, r2
   18768:	clzne	ip, r3
   1876c:	addeq	ip, ip, #32
   18770:	cmp	r5, #0
   18774:	clzeq	r1, r4
   18778:	addeq	r1, r1, #32
   1877c:	clzne	r1, r5
   18780:	sub	ip, ip, r1
   18784:	sub	sl, ip, #32
   18788:	lsl	r9, r3, ip
   1878c:	rsb	fp, ip, #32
   18790:	orr	r9, r9, r2, lsl sl
   18794:	orr	r9, r9, r2, lsr fp
   18798:	lsl	r8, r2, ip
   1879c:	cmp	r5, r9
   187a0:	cmpeq	r4, r8
   187a4:	movcc	r0, #0
   187a8:	movcc	r1, r0
   187ac:	bcc	187c8 <__assert_fail@plt+0x7854>
   187b0:	mov	r0, #1
   187b4:	subs	r4, r4, r8
   187b8:	lsl	r1, r0, sl
   187bc:	orr	r1, r1, r0, lsr fp
   187c0:	lsl	r0, r0, ip
   187c4:	sbc	r5, r5, r9
   187c8:	cmp	ip, #0
   187cc:	beq	18858 <__assert_fail@plt+0x78e4>
   187d0:	lsr	r6, r8, #1
   187d4:	orr	r6, r6, r9, lsl #31
   187d8:	lsr	r7, r9, #1
   187dc:	mov	r2, ip
   187e0:	b	18804 <__assert_fail@plt+0x7890>
   187e4:	subs	r3, r4, r6
   187e8:	sbc	r8, r5, r7
   187ec:	adds	r3, r3, r3
   187f0:	adc	r8, r8, r8
   187f4:	adds	r4, r3, #1
   187f8:	adc	r5, r8, #0
   187fc:	subs	r2, r2, #1
   18800:	beq	18820 <__assert_fail@plt+0x78ac>
   18804:	cmp	r5, r7
   18808:	cmpeq	r4, r6
   1880c:	bcs	187e4 <__assert_fail@plt+0x7870>
   18810:	adds	r4, r4, r4
   18814:	adc	r5, r5, r5
   18818:	subs	r2, r2, #1
   1881c:	bne	18804 <__assert_fail@plt+0x7890>
   18820:	lsr	r3, r4, ip
   18824:	orr	r3, r3, r5, lsl fp
   18828:	lsr	r2, r5, ip
   1882c:	orr	r3, r3, r5, lsr sl
   18830:	adds	r0, r0, r4
   18834:	mov	r4, r3
   18838:	lsl	r3, r2, ip
   1883c:	orr	r3, r3, r4, lsl sl
   18840:	lsl	ip, r4, ip
   18844:	orr	r3, r3, r4, lsr fp
   18848:	adc	r1, r1, r5
   1884c:	subs	r0, r0, ip
   18850:	mov	r5, r2
   18854:	sbc	r1, r1, r3
   18858:	cmp	lr, #0
   1885c:	strdne	r4, [lr]
   18860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18864:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18868:	mov	r7, r0
   1886c:	ldr	r6, [pc, #72]	; 188bc <__assert_fail@plt+0x7948>
   18870:	ldr	r5, [pc, #72]	; 188c0 <__assert_fail@plt+0x794c>
   18874:	add	r6, pc, r6
   18878:	add	r5, pc, r5
   1887c:	sub	r6, r6, r5
   18880:	mov	r8, r1
   18884:	mov	r9, r2
   18888:	bl	10cd8 <fstatfs64@plt-0x20>
   1888c:	asrs	r6, r6, #2
   18890:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18894:	mov	r4, #0
   18898:	add	r4, r4, #1
   1889c:	ldr	r3, [r5], #4
   188a0:	mov	r2, r9
   188a4:	mov	r1, r8
   188a8:	mov	r0, r7
   188ac:	blx	r3
   188b0:	cmp	r6, r4
   188b4:	bne	18898 <__assert_fail@plt+0x7924>
   188b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188bc:	muleq	r1, r0, r6
   188c0:	andeq	r0, r1, r8, lsl #13
   188c4:	bx	lr

Disassembly of section .fini:

000188c8 <.fini>:
   188c8:	push	{r3, lr}
   188cc:	pop	{r3, pc}
