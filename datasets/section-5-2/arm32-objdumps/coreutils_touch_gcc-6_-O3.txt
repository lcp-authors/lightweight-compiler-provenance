
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	11d48 <__assert_fail@plt+0x978>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	r2, r2, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #139264	; 0x22000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #139264	; 0x22000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #139264	; 0x22000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <gmtime_r@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #139264	; 0x22000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <utimensat@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #139264	; 0x22000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <strcmp@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #139264	; 0x22000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <strtol@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #139264	; 0x22000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <mktime@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #139264	; 0x22000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <fflush@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #139264	; 0x22000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #139264	; 0x22000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <clock_gettime@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #139264	; 0x22000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #139264	; 0x22000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #139264	; 0x22000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #139264	; 0x22000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <time@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #139264	; 0x22000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <memcmp@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #139264	; 0x22000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <fputc_unlocked@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #139264	; 0x22000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <dcgettext@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #139264	; 0x22000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <dup2@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #139264	; 0x22000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <realloc@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #139264	; 0x22000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <localtime_r@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #139264	; 0x22000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <textdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #139264	; 0x22000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #139264	; 0x22000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <tzset@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #139264	; 0x22000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #139264	; 0x22000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #139264	; 0x22000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #139264	; 0x22000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #139264	; 0x22000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #139264	; 0x22000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #139264	; 0x22000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #139264	; 0x22000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #139264	; 0x22000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <malloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #139264	; 0x22000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <__libc_start_main@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #139264	; 0x22000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <strftime@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #139264	; 0x22000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__vfprintf_chk@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #139264	; 0x22000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__freading@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #139264	; 0x22000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <localtime@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #139264	; 0x22000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_tolower_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #139264	; 0x22000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <__ctype_toupper_loc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #139264	; 0x22000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <__gmon_start__@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #139264	; 0x22000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <getopt_long@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #139264	; 0x22000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <__ctype_b_loc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #139264	; 0x22000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #139264	; 0x22000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <strlen@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #139264	; 0x22000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <strchr@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #139264	; 0x22000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <setenv@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #139264	; 0x22000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #139264	; 0x22000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <__sprintf_chk@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #139264	; 0x22000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <snprintf@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #139264	; 0x22000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <__cxa_atexit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #139264	; 0x22000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <memset@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #139264	; 0x22000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <__printf_chk@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #139264	; 0x22000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <fileno@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #139264	; 0x22000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <__fprintf_chk@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #139264	; 0x22000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fclose@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #139264	; 0x22000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <fseeko64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #139264	; 0x22000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <__overflow@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #139264	; 0x22000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <setlocale@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #139264	; 0x22000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #139264	; 0x22000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #139264	; 0x22000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <fputc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #139264	; 0x22000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <timegm@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #139264	; 0x22000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <futimens@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #139264	; 0x22000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #139264	; 0x22000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <__xstat64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #139264	; 0x22000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <unsetenv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #139264	; 0x22000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <fputs@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #139264	; 0x22000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

00011394 <strncmp@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #139264	; 0x22000
   1139c:	ldr	pc, [ip, #3456]!	; 0xd80

000113a0 <abort@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #139264	; 0x22000
   113a8:	ldr	pc, [ip, #3448]!	; 0xd78

000113ac <close@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #139264	; 0x22000
   113b4:	ldr	pc, [ip, #3440]!	; 0xd70

000113b8 <__lxstat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #139264	; 0x22000
   113c0:	ldr	pc, [ip, #3432]!	; 0xd68

000113c4 <__snprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #139264	; 0x22000
   113cc:	ldr	pc, [ip, #3424]!	; 0xd60

000113d0 <__assert_fail@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #139264	; 0x22000
   113d8:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113e0 <.text>:
   113e0:	push	{r4, r5, r6, lr}
   113e4:	mov	r5, r1
   113e8:	ldr	r3, [pc, #96]	; 11450 <__assert_fail@plt+0x80>
   113ec:	ldr	r4, [pc, #96]	; 11454 <__assert_fail@plt+0x84>
   113f0:	sub	sp, sp, #8
   113f4:	mov	r1, #100	; 0x64
   113f8:	cmp	r0, r3
   113fc:	addge	r4, r4, #1
   11400:	mov	r6, r0
   11404:	bl	2120c <__assert_fail@plt+0xfe3c>
   11408:	mov	r0, r6
   1140c:	eor	r3, r1, r1, asr #31
   11410:	sub	r3, r3, r1, asr #31
   11414:	mov	r1, #100	; 0x64
   11418:	str	r3, [sp, #4]
   1141c:	bl	20fec <__assert_fail@plt+0xfc1c>
   11420:	mov	r3, r4
   11424:	mvn	r2, #0
   11428:	mov	r1, #1
   1142c:	add	r0, r0, #19
   11430:	cmp	r0, #0
   11434:	rsblt	r0, r0, #0
   11438:	str	r0, [sp]
   1143c:	mov	r0, r5
   11440:	bl	112a4 <__sprintf_chk@plt>
   11444:	mov	r0, r5
   11448:	add	sp, sp, #8
   1144c:	pop	{r4, r5, r6, pc}
   11450:			; <UNDEFINED> instruction: 0xfffff894
   11454:	andeq	r2, r2, r4, ror #20
   11458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1145c:	mov	r9, r0
   11460:	sub	sp, sp, #156	; 0x9c
   11464:	ldr	r0, [r1]
   11468:	mov	fp, r1
   1146c:	bl	19514 <__assert_fail@plt+0x8144>
   11470:	ldr	r1, [pc, #2044]	; 11c74 <__assert_fail@plt+0x8a4>
   11474:	mov	r0, #6
   11478:	bl	1131c <setlocale@plt>
   1147c:	ldr	r1, [pc, #2036]	; 11c78 <__assert_fail@plt+0x8a8>
   11480:	ldr	r0, [pc, #2036]	; 11c7c <__assert_fail@plt+0x8ac>
   11484:	bl	11364 <bindtextdomain@plt>
   11488:	ldr	r5, [pc, #2032]	; 11c80 <__assert_fail@plt+0x8b0>
   1148c:	ldr	r0, [pc, #2024]	; 11c7c <__assert_fail@plt+0x8ac>
   11490:	bl	11160 <textdomain@plt>
   11494:	ldr	r0, [pc, #2024]	; 11c84 <__assert_fail@plt+0x8b4>
   11498:	bl	2149c <__assert_fail@plt+0x100cc>
   1149c:	mov	r3, #0
   114a0:	str	r3, [sp, #24]
   114a4:	str	r3, [sp, #28]
   114a8:	str	r3, [r5, #16]
   114ac:	strb	r3, [r5, #20]
   114b0:	strb	r3, [r5, #21]
   114b4:	ldr	r3, [pc, #1996]	; 11c88 <__assert_fail@plt+0x8b8>
   114b8:	ldr	r7, [pc, #1996]	; 11c8c <__assert_fail@plt+0x8bc>
   114bc:	ldr	sl, [pc, #1996]	; 11c90 <__assert_fail@plt+0x8c0>
   114c0:	add	r8, r3, #100	; 0x64
   114c4:	mov	r6, #0
   114c8:	str	r6, [sp]
   114cc:	mov	r3, r8
   114d0:	mov	r2, r7
   114d4:	mov	r1, fp
   114d8:	mov	r0, r9
   114dc:	bl	11250 <getopt_long@plt>
   114e0:	cmn	r0, #1
   114e4:	beq	1164c <__assert_fail@plt+0x27c>
   114e8:	cmp	r0, #102	; 0x66
   114ec:	beq	114c4 <__assert_fail@plt+0xf4>
   114f0:	bgt	11518 <__assert_fail@plt+0x148>
   114f4:	cmp	r0, #97	; 0x61
   114f8:	beq	116c0 <__assert_fail@plt+0x2f0>
   114fc:	bgt	11544 <__assert_fail@plt+0x174>
   11500:	cmn	r0, #3
   11504:	beq	115c8 <__assert_fail@plt+0x1f8>
   11508:	cmn	r0, #2
   1150c:	bne	116a4 <__assert_fail@plt+0x2d4>
   11510:	mov	r0, r6
   11514:	bl	11e78 <__assert_fail@plt+0xaa8>
   11518:	cmp	r0, #114	; 0x72
   1151c:	beq	116ac <__assert_fail@plt+0x2dc>
   11520:	bgt	11560 <__assert_fail@plt+0x190>
   11524:	cmp	r0, #104	; 0x68
   11528:	beq	11640 <__assert_fail@plt+0x270>
   1152c:	cmp	r0, #109	; 0x6d
   11530:	bne	116a4 <__assert_fail@plt+0x2d4>
   11534:	ldr	r3, [r5, #16]
   11538:	orr	r3, r3, #2
   1153c:	str	r3, [r5, #16]
   11540:	b	114c4 <__assert_fail@plt+0xf4>
   11544:	cmp	r0, #99	; 0x63
   11548:	beq	115bc <__assert_fail@plt+0x1ec>
   1154c:	cmp	r0, #100	; 0x64
   11550:	bne	116a4 <__assert_fail@plt+0x2d4>
   11554:	ldr	r3, [sl]
   11558:	str	r3, [sp, #24]
   1155c:	b	114c4 <__assert_fail@plt+0xf4>
   11560:	cmp	r0, #116	; 0x74
   11564:	beq	11610 <__assert_fail@plt+0x240>
   11568:	cmp	r0, #256	; 0x100
   1156c:	bne	116a4 <__assert_fail@plt+0x2d4>
   11570:	ldr	r3, [pc, #1820]	; 11c94 <__assert_fail@plt+0x8c4>
   11574:	mov	r1, #4
   11578:	mov	r0, #1
   1157c:	ldr	r2, [r3]
   11580:	ldr	r3, [pc, #1808]	; 11c98 <__assert_fail@plt+0x8c8>
   11584:	str	r0, [sp, #8]
   11588:	str	r2, [sp, #4]
   1158c:	str	r1, [sp]
   11590:	add	r2, r3, #20
   11594:	ldr	r1, [sl]
   11598:	ldr	r0, [pc, #1788]	; 11c9c <__assert_fail@plt+0x8cc>
   1159c:	bl	124e4 <__assert_fail@plt+0x1114>
   115a0:	ldr	r3, [pc, #1760]	; 11c88 <__assert_fail@plt+0x8b8>
   115a4:	ldr	r2, [r5, #16]
   115a8:	add	r0, r3, r0, lsl #2
   115ac:	ldr	r3, [r0, #56]	; 0x38
   115b0:	orr	r3, r3, r2
   115b4:	str	r3, [r5, #16]
   115b8:	b	114c4 <__assert_fail@plt+0xf4>
   115bc:	mov	r3, #1
   115c0:	strb	r3, [r5, #21]
   115c4:	b	114c4 <__assert_fail@plt+0xf4>
   115c8:	ldr	lr, [pc, #1744]	; 11ca0 <__assert_fail@plt+0x8d0>
   115cc:	ldr	ip, [pc, #1744]	; 11ca4 <__assert_fail@plt+0x8d4>
   115d0:	ldr	r1, [pc, #1744]	; 11ca8 <__assert_fail@plt+0x8d8>
   115d4:	ldr	r3, [pc, #1744]	; 11cac <__assert_fail@plt+0x8dc>
   115d8:	ldr	r0, [pc, #1744]	; 11cb0 <__assert_fail@plt+0x8e0>
   115dc:	ldr	r2, [pc, #1744]	; 11cb4 <__assert_fail@plt+0x8e4>
   115e0:	ldr	r4, [pc, #1744]	; 11cb8 <__assert_fail@plt+0x8e8>
   115e4:	str	r6, [sp, #20]
   115e8:	ldr	r0, [r0]
   115ec:	ldr	r3, [r3]
   115f0:	stmib	sp, {r1, ip, lr}
   115f4:	str	r2, [sp]
   115f8:	str	r4, [sp, #16]
   115fc:	ldr	r2, [pc, #1720]	; 11cbc <__assert_fail@plt+0x8ec>
   11600:	ldr	r1, [pc, #1720]	; 11cc0 <__assert_fail@plt+0x8f0>
   11604:	bl	1e354 <__assert_fail@plt+0xcf84>
   11608:	mov	r0, r6
   1160c:	bl	11268 <exit@plt>
   11610:	mov	r2, #6
   11614:	ldr	r1, [sl]
   11618:	ldr	r0, [pc, #1632]	; 11c80 <__assert_fail@plt+0x8b0>
   1161c:	bl	19124 <__assert_fail@plt+0x7d54>
   11620:	subs	r3, r0, #0
   11624:	str	r3, [sp, #28]
   11628:	beq	11bac <__assert_fail@plt+0x7dc>
   1162c:	str	r6, [r5, #4]
   11630:	ldr	r3, [pc, #1676]	; 11cc4 <__assert_fail@plt+0x8f4>
   11634:	ldm	r5, {r0, r1}
   11638:	stm	r3, {r0, r1}
   1163c:	b	114c4 <__assert_fail@plt+0xf4>
   11640:	mov	r3, #1
   11644:	strb	r3, [r5, #22]
   11648:	b	114c4 <__assert_fail@plt+0xf4>
   1164c:	ldr	r3, [r5, #16]
   11650:	mov	r4, r0
   11654:	cmp	r3, r6
   11658:	moveq	r3, #3
   1165c:	streq	r3, [r5, #16]
   11660:	ldr	r3, [sp, #28]
   11664:	cmp	r3, #0
   11668:	beq	116d0 <__assert_fail@plt+0x300>
   1166c:	ldrb	r3, [r5, #20]
   11670:	ldr	r2, [sp, #24]
   11674:	cmp	r2, #0
   11678:	orrne	r3, r3, #1
   1167c:	cmp	r3, #0
   11680:	beq	116d0 <__assert_fail@plt+0x300>
   11684:	ldr	r1, [pc, #1596]	; 11cc8 <__assert_fail@plt+0x8f8>
   11688:	mov	r2, #5
   1168c:	mov	r0, #0
   11690:	bl	11130 <dcgettext@plt>
   11694:	mov	r1, #0
   11698:	mov	r2, r0
   1169c:	mov	r0, r1
   116a0:	bl	111c0 <error@plt>
   116a4:	mov	r0, #1
   116a8:	bl	11e78 <__assert_fail@plt+0xaa8>
   116ac:	ldr	r3, [sl]
   116b0:	mov	r2, #1
   116b4:	strb	r2, [r5, #20]
   116b8:	str	r3, [r5, #24]
   116bc:	b	114c4 <__assert_fail@plt+0xf4>
   116c0:	ldr	r3, [r5, #16]
   116c4:	orr	r3, r3, #1
   116c8:	str	r3, [r5, #16]
   116cc:	b	114c4 <__assert_fail@plt+0xf4>
   116d0:	ldrb	r3, [r5, #20]
   116d4:	cmp	r3, #0
   116d8:	bne	1189c <__assert_fail@plt+0x4cc>
   116dc:	ldr	r6, [sp, #24]
   116e0:	cmp	r6, #0
   116e4:	beq	11aac <__assert_fail@plt+0x6dc>
   116e8:	add	r0, sp, #32
   116ec:	bl	12988 <__assert_fail@plt+0x15b8>
   116f0:	add	r2, sp, #32
   116f4:	mov	r1, r6
   116f8:	ldr	r0, [pc, #1408]	; 11c80 <__assert_fail@plt+0x8b0>
   116fc:	bl	11e34 <__assert_fail@plt+0xa64>
   11700:	ldr	r3, [pc, #1468]	; 11cc4 <__assert_fail@plt+0x8f4>
   11704:	ldm	r5, {r0, r1}
   11708:	ldr	r2, [r5, #16]
   1170c:	cmp	r2, #3
   11710:	stm	r3, {r0, r1}
   11714:	beq	11a50 <__assert_fail@plt+0x680>
   11718:	ldr	sl, [pc, #1452]	; 11ccc <__assert_fail@plt+0x8fc>
   1171c:	ldr	r3, [sl]
   11720:	cmp	r9, r3
   11724:	beq	11c68 <__assert_fail@plt+0x898>
   11728:	movle	r3, #1
   1172c:	ble	11990 <__assert_fail@plt+0x5c0>
   11730:	mov	r2, #1
   11734:	str	r4, [sp, #28]
   11738:	mov	r8, r2
   1173c:	str	r9, [sp, #24]
   11740:	b	117d0 <__assert_fail@plt+0x400>
   11744:	bl	11298 <__errno_location@plt>
   11748:	cmp	r4, #0
   1174c:	ldr	r9, [r0]
   11750:	beq	11924 <__assert_fail@plt+0x554>
   11754:	cmp	r4, #1
   11758:	cmpeq	r9, #9
   1175c:	bne	11934 <__assert_fail@plt+0x564>
   11760:	ldrb	r3, [r5, #21]
   11764:	cmp	r3, #0
   11768:	bne	11894 <__assert_fail@plt+0x4c4>
   1176c:	cmp	r7, #0
   11770:	cmpne	r7, #21
   11774:	mov	r9, #9
   11778:	bne	11948 <__assert_fail@plt+0x578>
   1177c:	mov	r2, #5
   11780:	ldr	r1, [pc, #1352]	; 11cd0 <__assert_fail@plt+0x900>
   11784:	mov	r0, #0
   11788:	bl	11130 <dcgettext@plt>
   1178c:	mov	r1, r6
   11790:	mov	r4, r0
   11794:	mov	r0, #4
   11798:	bl	1ba70 <__assert_fail@plt+0xa6a0>
   1179c:	mov	r2, r4
   117a0:	mov	r1, r9
   117a4:	mov	r3, r0
   117a8:	mov	r0, #0
   117ac:	bl	111c0 <error@plt>
   117b0:	mov	r2, #0
   117b4:	ldr	r3, [sl]
   117b8:	and	r8, r8, r2
   117bc:	ldr	r2, [sp, #24]
   117c0:	add	r3, r3, #1
   117c4:	cmp	r2, r3
   117c8:	str	r3, [sl]
   117cc:	ble	1198c <__assert_fail@plt+0x5bc>
   117d0:	ldr	r6, [fp, r3, lsl #2]
   117d4:	ldr	r1, [pc, #1272]	; 11cd4 <__assert_fail@plt+0x904>
   117d8:	mov	r0, r6
   117dc:	bl	110a0 <strcmp@plt>
   117e0:	subs	r7, r0, #0
   117e4:	moveq	r4, #1
   117e8:	beq	1180c <__assert_fail@plt+0x43c>
   117ec:	ldrb	r3, [r5, #21]
   117f0:	cmp	r3, #0
   117f4:	bne	11804 <__assert_fail@plt+0x434>
   117f8:	ldrb	r3, [r5, #22]
   117fc:	cmp	r3, #0
   11800:	beq	119e0 <__assert_fail@plt+0x610>
   11804:	ldr	r4, [sp, #28]
   11808:	mov	r7, #0
   1180c:	ldr	r3, [r5, #16]
   11810:	cmp	r3, #3
   11814:	beq	11838 <__assert_fail@plt+0x468>
   11818:	cmp	r3, #2
   1181c:	mvneq	r3, #-1073741823	; 0xc0000001
   11820:	streq	r3, [r5, #4]
   11824:	beq	11838 <__assert_fail@plt+0x468>
   11828:	cmp	r3, #1
   1182c:	bne	11c54 <__assert_fail@plt+0x884>
   11830:	mvn	r3, #-1073741823	; 0xc0000001
   11834:	str	r3, [r5, #12]
   11838:	ldrb	r1, [r5, #22]
   1183c:	ldrb	r3, [r5, #28]
   11840:	cmp	r4, #1
   11844:	movne	r2, r6
   11848:	moveq	r2, #0
   1184c:	cmp	r1, #0
   11850:	movne	r1, #256	; 0x100
   11854:	moveq	r1, #0
   11858:	str	r1, [sp]
   1185c:	cmp	r3, #0
   11860:	ldr	r1, [pc, #1048]	; 11c80 <__assert_fail@plt+0x8b0>
   11864:	movne	r1, #0
   11868:	mov	r3, r1
   1186c:	mov	r0, r4
   11870:	mvn	r1, #99	; 0x63
   11874:	bl	128f4 <__assert_fail@plt+0x1524>
   11878:	cmp	r0, #0
   1187c:	bne	11744 <__assert_fail@plt+0x374>
   11880:	cmp	r4, #0
   11884:	bne	11894 <__assert_fail@plt+0x4c4>
   11888:	bl	113ac <close@plt>
   1188c:	cmp	r0, #0
   11890:	bne	11a0c <__assert_fail@plt+0x63c>
   11894:	mov	r2, #1
   11898:	b	117b4 <__assert_fail@plt+0x3e4>
   1189c:	ldrb	r3, [r5, #22]
   118a0:	add	r2, sp, #48	; 0x30
   118a4:	ldr	r1, [r5, #24]
   118a8:	cmp	r3, #0
   118ac:	mov	r0, #3
   118b0:	beq	11afc <__assert_fail@plt+0x72c>
   118b4:	bl	113b8 <__lxstat64@plt>
   118b8:	adds	r0, r0, #0
   118bc:	movne	r0, #1
   118c0:	cmp	r0, #0
   118c4:	bne	11b70 <__assert_fail@plt+0x7a0>
   118c8:	ldr	r3, [sp, #124]	; 0x7c
   118cc:	ldr	r0, [sp, #24]
   118d0:	ldr	r1, [sp, #120]	; 0x78
   118d4:	ldr	r2, [sp, #132]	; 0x84
   118d8:	str	r3, [r5, #4]
   118dc:	ldr	r3, [sp, #128]	; 0x80
   118e0:	cmp	r0, #0
   118e4:	str	r1, [r5]
   118e8:	str	r2, [r5, #12]
   118ec:	str	r3, [r5, #8]
   118f0:	beq	11718 <__assert_fail@plt+0x348>
   118f4:	ldr	r3, [r5, #16]
   118f8:	tst	r3, #1
   118fc:	bne	11b0c <__assert_fail@plt+0x73c>
   11900:	ldr	r3, [r5, #16]
   11904:	tst	r3, #2
   11908:	beq	11718 <__assert_fail@plt+0x348>
   1190c:	ldr	r2, [pc, #944]	; 11cc4 <__assert_fail@plt+0x8f4>
   11910:	ldr	r1, [sp, #24]
   11914:	mov	r0, r2
   11918:	bl	11e34 <__assert_fail@plt+0xa64>
   1191c:	ldr	sl, [pc, #936]	; 11ccc <__assert_fail@plt+0x8fc>
   11920:	b	1171c <__assert_fail@plt+0x34c>
   11924:	mov	r0, #0
   11928:	bl	113ac <close@plt>
   1192c:	cmp	r0, #0
   11930:	bne	11a0c <__assert_fail@plt+0x63c>
   11934:	cmp	r9, #0
   11938:	beq	11894 <__assert_fail@plt+0x4c4>
   1193c:	cmp	r7, #0
   11940:	cmpne	r7, #21
   11944:	beq	119c4 <__assert_fail@plt+0x5f4>
   11948:	cmp	r7, #22
   1194c:	beq	1199c <__assert_fail@plt+0x5cc>
   11950:	mov	r2, #5
   11954:	ldr	r1, [pc, #892]	; 11cd8 <__assert_fail@plt+0x908>
   11958:	mov	r0, #0
   1195c:	bl	11130 <dcgettext@plt>
   11960:	mov	r1, r6
   11964:	mov	r4, r0
   11968:	mov	r0, #4
   1196c:	bl	1ba70 <__assert_fail@plt+0xa6a0>
   11970:	mov	r2, r4
   11974:	mov	r1, r7
   11978:	mov	r3, r0
   1197c:	mov	r0, #0
   11980:	bl	111c0 <error@plt>
   11984:	mov	r2, #0
   11988:	b	117b4 <__assert_fail@plt+0x3e4>
   1198c:	mov	r3, r8
   11990:	eor	r0, r3, #1
   11994:	add	sp, sp, #156	; 0x9c
   11998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1199c:	add	r2, sp, #48	; 0x30
   119a0:	mov	r1, r6
   119a4:	mov	r0, #3
   119a8:	bl	11370 <__xstat64@plt>
   119ac:	cmp	r0, #0
   119b0:	bne	11950 <__assert_fail@plt+0x580>
   119b4:	ldr	r3, [sp, #64]	; 0x40
   119b8:	and	r3, r3, #61440	; 0xf000
   119bc:	cmp	r3, #16384	; 0x4000
   119c0:	bne	11950 <__assert_fail@plt+0x580>
   119c4:	ldrb	r2, [r5, #21]
   119c8:	cmp	r9, #2
   119cc:	movne	r2, #0
   119d0:	andeq	r2, r2, #1
   119d4:	cmp	r2, #0
   119d8:	beq	1177c <__assert_fail@plt+0x3ac>
   119dc:	b	117b4 <__assert_fail@plt+0x3e4>
   119e0:	ldr	r3, [pc, #756]	; 11cdc <__assert_fail@plt+0x90c>
   119e4:	ldr	r2, [pc, #756]	; 11ce0 <__assert_fail@plt+0x910>
   119e8:	mov	r1, r6
   119ec:	mov	r0, #0
   119f0:	bl	12890 <__assert_fail@plt+0x14c0>
   119f4:	subs	r4, r0, #0
   119f8:	movge	r7, #0
   119fc:	bge	1180c <__assert_fail@plt+0x43c>
   11a00:	bl	11298 <__errno_location@plt>
   11a04:	ldr	r7, [r0]
   11a08:	b	1180c <__assert_fail@plt+0x43c>
   11a0c:	bl	11298 <__errno_location@plt>
   11a10:	mov	r2, #5
   11a14:	ldr	r1, [pc, #712]	; 11ce4 <__assert_fail@plt+0x914>
   11a18:	ldr	r4, [r0]
   11a1c:	mov	r0, #0
   11a20:	bl	11130 <dcgettext@plt>
   11a24:	mov	r1, r6
   11a28:	mov	r7, r0
   11a2c:	mov	r0, #4
   11a30:	bl	1ba70 <__assert_fail@plt+0xa6a0>
   11a34:	mov	r2, r7
   11a38:	mov	r1, r4
   11a3c:	mov	r3, r0
   11a40:	mov	r0, #0
   11a44:	bl	111c0 <error@plt>
   11a48:	mov	r2, #0
   11a4c:	b	117b4 <__assert_fail@plt+0x3e4>
   11a50:	ldr	r3, [sp, #32]
   11a54:	cmp	r0, r3
   11a58:	bne	11718 <__assert_fail@plt+0x348>
   11a5c:	ldr	r2, [sp, #36]	; 0x24
   11a60:	mov	r3, r1
   11a64:	cmp	r1, r2
   11a68:	bne	11718 <__assert_fail@plt+0x348>
   11a6c:	eor	r0, r0, #1
   11a70:	add	r2, sp, #40	; 0x28
   11a74:	str	r0, [sp, #40]	; 0x28
   11a78:	ldr	r1, [sp, #24]
   11a7c:	add	r0, sp, #48	; 0x30
   11a80:	str	r3, [sp, #44]	; 0x2c
   11a84:	bl	11e34 <__assert_fail@plt+0xa64>
   11a88:	ldr	r2, [sp, #48]	; 0x30
   11a8c:	ldr	r3, [sp, #40]	; 0x28
   11a90:	cmp	r2, r3
   11a94:	bne	11718 <__assert_fail@plt+0x348>
   11a98:	ldr	r2, [sp, #52]	; 0x34
   11a9c:	ldr	r3, [sp, #44]	; 0x2c
   11aa0:	subs	r3, r2, r3
   11aa4:	movne	r3, #1
   11aa8:	str	r3, [sp, #28]
   11aac:	ldr	r3, [sp, #28]
   11ab0:	ldr	sl, [pc, #532]	; 11ccc <__assert_fail@plt+0x8fc>
   11ab4:	cmp	r3, #0
   11ab8:	bne	1171c <__assert_fail@plt+0x34c>
   11abc:	ldr	r3, [sl]
   11ac0:	sub	r3, r9, r3
   11ac4:	cmp	r3, #1
   11ac8:	ble	11adc <__assert_fail@plt+0x70c>
   11acc:	bl	194b4 <__assert_fail@plt+0x80e4>
   11ad0:	ldr	r3, [pc, #528]	; 11ce8 <__assert_fail@plt+0x918>
   11ad4:	cmp	r0, r3
   11ad8:	ble	11b20 <__assert_fail@plt+0x750>
   11adc:	ldr	r3, [r5, #16]
   11ae0:	cmp	r3, #3
   11ae4:	mvnne	r3, #-1073741824	; 0xc0000000
   11ae8:	strne	r3, [r5, #4]
   11aec:	strne	r3, [r5, #12]
   11af0:	moveq	r3, #1
   11af4:	strbeq	r3, [r5, #28]
   11af8:	b	1171c <__assert_fail@plt+0x34c>
   11afc:	bl	11370 <__xstat64@plt>
   11b00:	adds	r0, r0, #0
   11b04:	movne	r0, #1
   11b08:	b	118c0 <__assert_fail@plt+0x4f0>
   11b0c:	ldr	r2, [pc, #364]	; 11c80 <__assert_fail@plt+0x8b0>
   11b10:	ldr	r1, [sp, #24]
   11b14:	mov	r0, r2
   11b18:	bl	11e34 <__assert_fail@plt+0xa64>
   11b1c:	b	11900 <__assert_fail@plt+0x530>
   11b20:	ldr	r3, [sl]
   11b24:	mov	r2, #9
   11b28:	ldr	r0, [pc, #336]	; 11c80 <__assert_fail@plt+0x8b0>
   11b2c:	ldr	r1, [fp, r3, lsl #2]
   11b30:	bl	19124 <__assert_fail@plt+0x7d54>
   11b34:	cmp	r0, #0
   11b38:	beq	11adc <__assert_fail@plt+0x70c>
   11b3c:	ldr	r3, [sp, #28]
   11b40:	str	r3, [r5, #4]
   11b44:	ldr	r3, [pc, #376]	; 11cc4 <__assert_fail@plt+0x8f4>
   11b48:	ldm	r5, {r0, r1}
   11b4c:	stm	r3, {r0, r1}
   11b50:	ldr	r0, [pc, #404]	; 11cec <__assert_fail@plt+0x91c>
   11b54:	bl	111d8 <getenv@plt>
   11b58:	cmp	r0, #0
   11b5c:	beq	11bd8 <__assert_fail@plt+0x808>
   11b60:	ldr	r3, [sl]
   11b64:	add	r3, r3, #1
   11b68:	str	r3, [sl]
   11b6c:	b	1171c <__assert_fail@plt+0x34c>
   11b70:	bl	11298 <__errno_location@plt>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #368]	; 11cf0 <__assert_fail@plt+0x920>
   11b7c:	ldr	r4, [r0]
   11b80:	mov	r0, #0
   11b84:	bl	11130 <dcgettext@plt>
   11b88:	ldr	r1, [r5, #24]
   11b8c:	mov	r6, r0
   11b90:	mov	r0, #4
   11b94:	bl	1ba70 <__assert_fail@plt+0xa6a0>
   11b98:	mov	r2, r6
   11b9c:	mov	r1, r4
   11ba0:	mov	r3, r0
   11ba4:	mov	r0, #1
   11ba8:	bl	111c0 <error@plt>
   11bac:	mov	r2, #5
   11bb0:	ldr	r1, [pc, #316]	; 11cf4 <__assert_fail@plt+0x924>
   11bb4:	bl	11130 <dcgettext@plt>
   11bb8:	mov	r4, r0
   11bbc:	ldr	r0, [sl]
   11bc0:	bl	1d3e0 <__assert_fail@plt+0xc010>
   11bc4:	mov	r2, r4
   11bc8:	ldr	r1, [sp, #28]
   11bcc:	mov	r3, r0
   11bd0:	mov	r0, #1
   11bd4:	bl	111c0 <error@plt>
   11bd8:	ldr	r0, [pc, #160]	; 11c80 <__assert_fail@plt+0x8b0>
   11bdc:	bl	11220 <localtime@plt>
   11be0:	subs	r6, r0, #0
   11be4:	beq	11b60 <__assert_fail@plt+0x790>
   11be8:	ldr	r7, [sp, #28]
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #256]	; 11cf8 <__assert_fail@plt+0x928>
   11bf4:	mov	r0, r7
   11bf8:	bl	11130 <dcgettext@plt>
   11bfc:	ldr	r2, [r6]
   11c00:	ldr	r3, [sl]
   11c04:	str	r2, [sp, #20]
   11c08:	ldr	r2, [r6, #4]
   11c0c:	ldr	r3, [fp, r3, lsl #2]
   11c10:	str	r2, [sp, #16]
   11c14:	ldr	r2, [r6, #8]
   11c18:	mov	r1, r7
   11c1c:	str	r2, [sp, #12]
   11c20:	ldr	r2, [r6, #12]
   11c24:	str	r2, [sp, #8]
   11c28:	ldr	r2, [r6, #16]
   11c2c:	add	r2, r2, #1
   11c30:	str	r2, [sp, #4]
   11c34:	ldr	r2, [r6, #20]
   11c38:	add	r2, r2, #1888	; 0x760
   11c3c:	add	r2, r2, #12
   11c40:	str	r2, [sp]
   11c44:	mov	r2, r0
   11c48:	mov	r0, r7
   11c4c:	bl	111c0 <error@plt>
   11c50:	b	11b60 <__assert_fail@plt+0x790>
   11c54:	ldr	r3, [pc, #160]	; 11cfc <__assert_fail@plt+0x92c>
   11c58:	mov	r2, #147	; 0x93
   11c5c:	ldr	r1, [pc, #156]	; 11d00 <__assert_fail@plt+0x930>
   11c60:	ldr	r0, [pc, #156]	; 11d04 <__assert_fail@plt+0x934>
   11c64:	bl	113d0 <__assert_fail@plt>
   11c68:	mov	r2, #5
   11c6c:	ldr	r1, [pc, #148]	; 11d08 <__assert_fail@plt+0x938>
   11c70:	b	1168c <__assert_fail@plt+0x2bc>
   11c74:	andeq	r3, r2, r0, ror #12
   11c78:	andeq	r1, r2, r4, asr ip
   11c7c:	andeq	r1, r2, ip, lsr #23
   11c80:			; <UNDEFINED> instruction: 0x000341b0
   11c84:	andeq	r2, r1, ip, lsr #15
   11c88:	andeq	r1, r2, r0, asr #9
   11c8c:			; <UNDEFINED> instruction: 0x00021cb8
   11c90:	andeq	r4, r3, r8, lsr #3
   11c94:	andeq	r4, r3, r4, asr #2
   11c98:	strdeq	r1, [r2], -r8
   11c9c:	andeq	r1, r2, ip, ror #24
   11ca0:	andeq	r1, r2, r0, lsl #25
   11ca4:	muleq	r2, r0, ip
   11ca8:	muleq	r2, ip, ip
   11cac:	andeq	r4, r3, r0, asr #2
   11cb0:	andeq	r4, r3, r4, lsr #3
   11cb4:	andeq	r1, r2, ip, lsr #25
   11cb8:	andeq	r1, r2, r4, ror ip
   11cbc:	andeq	r1, r2, r8, lsr #23
   11cc0:	andeq	r1, r2, r4, asr #11
   11cc4:			; <UNDEFINED> instruction: 0x000341b8
   11cc8:	andeq	r1, r2, r4, asr #25
   11ccc:	muleq	r3, r8, r1
   11cd0:	ldrdeq	r1, [r2], -r8
   11cd4:	andeq	r1, r2, r8, lsl #27
   11cd8:	andeq	r1, r2, r8, asr #27
   11cdc:			; <UNDEFINED> instruction: 0x000001b6
   11ce0:	andeq	r0, r0, r1, asr #18
   11ce4:			; <UNDEFINED> instruction: 0x00021db4
   11ce8:	andeq	r0, r3, pc, lsr #27
   11cec:	andeq	r1, r2, r4, lsl sp
   11cf0:	strdeq	r1, [r2], -r4
   11cf4:	andeq	r1, r2, ip, lsr #11
   11cf8:	andeq	r1, r2, r4, lsr #26
   11cfc:	andeq	r1, r2, r4, lsr #11
   11d00:	andeq	r1, r2, ip, lsl #27
   11d04:	muleq	r2, r8, sp
   11d08:	andeq	r1, r2, r0, ror sp
   11d0c:	mov	fp, #0
   11d10:	mov	lr, #0
   11d14:	pop	{r1}		; (ldr r1, [sp], #4)
   11d18:	mov	r2, sp
   11d1c:	push	{r2}		; (str r2, [sp, #-4]!)
   11d20:	push	{r0}		; (str r0, [sp, #-4]!)
   11d24:	ldr	ip, [pc, #16]	; 11d3c <__assert_fail@plt+0x96c>
   11d28:	push	{ip}		; (str ip, [sp, #-4]!)
   11d2c:	ldr	r0, [pc, #12]	; 11d40 <__assert_fail@plt+0x970>
   11d30:	ldr	r3, [pc, #12]	; 11d44 <__assert_fail@plt+0x974>
   11d34:	bl	111f0 <__libc_start_main@plt>
   11d38:	bl	113a0 <abort@plt>
   11d3c:	muleq	r2, r8, r4
   11d40:	andeq	r1, r1, r8, asr r4
   11d44:	andeq	r1, r2, r8, lsr r4
   11d48:	ldr	r3, [pc, #20]	; 11d64 <__assert_fail@plt+0x994>
   11d4c:	ldr	r2, [pc, #20]	; 11d68 <__assert_fail@plt+0x998>
   11d50:	add	r3, pc, r3
   11d54:	ldr	r2, [r3, r2]
   11d58:	cmp	r2, #0
   11d5c:	bxeq	lr
   11d60:	b	11244 <__gmon_start__@plt>
   11d64:	andeq	r2, r2, r8, lsr #5
   11d68:	andeq	r0, r0, r4, lsr r1
   11d6c:	ldr	r3, [pc, #28]	; 11d90 <__assert_fail@plt+0x9c0>
   11d70:	ldr	r0, [pc, #28]	; 11d94 <__assert_fail@plt+0x9c4>
   11d74:	sub	r3, r3, r0
   11d78:	cmp	r3, #6
   11d7c:	bxls	lr
   11d80:	ldr	r3, [pc, #16]	; 11d98 <__assert_fail@plt+0x9c8>
   11d84:	cmp	r3, #0
   11d88:	bxeq	lr
   11d8c:	bx	r3
   11d90:	andeq	r4, r3, pc, lsl #3
   11d94:	andeq	r4, r3, ip, lsl #3
   11d98:	andeq	r0, r0, r0
   11d9c:	ldr	r1, [pc, #36]	; 11dc8 <__assert_fail@plt+0x9f8>
   11da0:	ldr	r0, [pc, #36]	; 11dcc <__assert_fail@plt+0x9fc>
   11da4:	sub	r1, r1, r0
   11da8:	asr	r1, r1, #2
   11dac:	add	r1, r1, r1, lsr #31
   11db0:	asrs	r1, r1, #1
   11db4:	bxeq	lr
   11db8:	ldr	r3, [pc, #16]	; 11dd0 <__assert_fail@plt+0xa00>
   11dbc:	cmp	r3, #0
   11dc0:	bxeq	lr
   11dc4:	bx	r3
   11dc8:	andeq	r4, r3, ip, lsl #3
   11dcc:	andeq	r4, r3, ip, lsl #3
   11dd0:	andeq	r0, r0, r0
   11dd4:	push	{r4, lr}
   11dd8:	ldr	r4, [pc, #24]	; 11df8 <__assert_fail@plt+0xa28>
   11ddc:	ldrb	r3, [r4]
   11de0:	cmp	r3, #0
   11de4:	popne	{r4, pc}
   11de8:	bl	11d6c <__assert_fail@plt+0x99c>
   11dec:	mov	r3, #1
   11df0:	strb	r3, [r4]
   11df4:	pop	{r4, pc}
   11df8:	andeq	r4, r3, ip, lsr #3
   11dfc:	ldr	r0, [pc, #40]	; 11e2c <__assert_fail@plt+0xa5c>
   11e00:	ldr	r3, [r0]
   11e04:	cmp	r3, #0
   11e08:	bne	11e10 <__assert_fail@plt+0xa40>
   11e0c:	b	11d9c <__assert_fail@plt+0x9cc>
   11e10:	ldr	r3, [pc, #24]	; 11e30 <__assert_fail@plt+0xa60>
   11e14:	cmp	r3, #0
   11e18:	beq	11e0c <__assert_fail@plt+0xa3c>
   11e1c:	push	{r4, lr}
   11e20:	blx	r3
   11e24:	pop	{r4, lr}
   11e28:	b	11d9c <__assert_fail@plt+0x9cc>
   11e2c:	andeq	r3, r3, r4, lsl pc
   11e30:	andeq	r0, r0, r0
   11e34:	push	{r4, r5, r6, lr}
   11e38:	mov	r5, r1
   11e3c:	bl	190c0 <__assert_fail@plt+0x7cf0>
   11e40:	subs	r4, r0, #0
   11e44:	popne	{r4, r5, r6, pc}
   11e48:	mov	r2, #5
   11e4c:	ldr	r1, [pc, #32]	; 11e74 <__assert_fail@plt+0xaa4>
   11e50:	bl	11130 <dcgettext@plt>
   11e54:	mov	r6, r0
   11e58:	mov	r0, r5
   11e5c:	bl	1d3e0 <__assert_fail@plt+0xc010>
   11e60:	mov	r2, r6
   11e64:	mov	r1, r4
   11e68:	mov	r3, r0
   11e6c:	mov	r0, #1
   11e70:	bl	111c0 <error@plt>
   11e74:	andeq	r1, r2, ip, lsr #11
   11e78:	subs	r5, r0, #0
   11e7c:	push	{r7, lr}
   11e80:	sub	sp, sp, #56	; 0x38
   11e84:	beq	11ec0 <__assert_fail@plt+0xaf0>
   11e88:	ldr	r3, [pc, #732]	; 1216c <__assert_fail@plt+0xd9c>
   11e8c:	mov	r2, #5
   11e90:	ldr	r1, [pc, #728]	; 12170 <__assert_fail@plt+0xda0>
   11e94:	mov	r0, #0
   11e98:	ldr	r4, [r3]
   11e9c:	bl	11130 <dcgettext@plt>
   11ea0:	ldr	r3, [pc, #716]	; 12174 <__assert_fail@plt+0xda4>
   11ea4:	mov	r1, #1
   11ea8:	ldr	r3, [r3]
   11eac:	mov	r2, r0
   11eb0:	mov	r0, r4
   11eb4:	bl	112ec <__fprintf_chk@plt>
   11eb8:	mov	r0, r5
   11ebc:	bl	11268 <exit@plt>
   11ec0:	mov	r2, #5
   11ec4:	ldr	r1, [pc, #684]	; 12178 <__assert_fail@plt+0xda8>
   11ec8:	bl	11130 <dcgettext@plt>
   11ecc:	ldr	r3, [pc, #672]	; 12174 <__assert_fail@plt+0xda4>
   11ed0:	ldr	r7, [pc, #676]	; 1217c <__assert_fail@plt+0xdac>
   11ed4:	ldr	r4, [pc, #676]	; 12180 <__assert_fail@plt+0xdb0>
   11ed8:	ldr	r2, [r3]
   11edc:	mov	r1, r0
   11ee0:	mov	r0, #1
   11ee4:	bl	112d4 <__printf_chk@plt>
   11ee8:	mov	r2, #5
   11eec:	ldr	r1, [pc, #656]	; 12184 <__assert_fail@plt+0xdb4>
   11ef0:	mov	r0, r5
   11ef4:	bl	11130 <dcgettext@plt>
   11ef8:	ldr	r1, [r7]
   11efc:	bl	11070 <fputs_unlocked@plt>
   11f00:	mov	r2, #5
   11f04:	ldr	r1, [pc, #636]	; 12188 <__assert_fail@plt+0xdb8>
   11f08:	mov	r0, r5
   11f0c:	bl	11130 <dcgettext@plt>
   11f10:	ldr	r1, [r7]
   11f14:	bl	11070 <fputs_unlocked@plt>
   11f18:	mov	r2, #5
   11f1c:	ldr	r1, [pc, #616]	; 1218c <__assert_fail@plt+0xdbc>
   11f20:	mov	r0, r5
   11f24:	bl	11130 <dcgettext@plt>
   11f28:	ldr	r1, [r7]
   11f2c:	bl	11070 <fputs_unlocked@plt>
   11f30:	mov	r2, #5
   11f34:	ldr	r1, [pc, #596]	; 12190 <__assert_fail@plt+0xdc0>
   11f38:	mov	r0, r5
   11f3c:	bl	11130 <dcgettext@plt>
   11f40:	ldr	r1, [r7]
   11f44:	bl	11070 <fputs_unlocked@plt>
   11f48:	mov	r2, #5
   11f4c:	ldr	r1, [pc, #576]	; 12194 <__assert_fail@plt+0xdc4>
   11f50:	mov	r0, r5
   11f54:	bl	11130 <dcgettext@plt>
   11f58:	ldr	r1, [r7]
   11f5c:	bl	11070 <fputs_unlocked@plt>
   11f60:	mov	r2, #5
   11f64:	ldr	r1, [pc, #556]	; 12198 <__assert_fail@plt+0xdc8>
   11f68:	mov	r0, r5
   11f6c:	bl	11130 <dcgettext@plt>
   11f70:	ldr	r1, [r7]
   11f74:	bl	11070 <fputs_unlocked@plt>
   11f78:	mov	r2, #5
   11f7c:	ldr	r1, [pc, #536]	; 1219c <__assert_fail@plt+0xdcc>
   11f80:	mov	r0, r5
   11f84:	bl	11130 <dcgettext@plt>
   11f88:	ldr	r1, [r7]
   11f8c:	bl	11070 <fputs_unlocked@plt>
   11f90:	mov	r2, #5
   11f94:	ldr	r1, [pc, #516]	; 121a0 <__assert_fail@plt+0xdd0>
   11f98:	mov	r0, r5
   11f9c:	bl	11130 <dcgettext@plt>
   11fa0:	ldr	r1, [r7]
   11fa4:	bl	11070 <fputs_unlocked@plt>
   11fa8:	ldm	r4!, {r0, r1, r2, r3}
   11fac:	mov	lr, sp
   11fb0:	stmia	lr!, {r0, r1, r2, r3}
   11fb4:	ldm	r4!, {r0, r1, r2, r3}
   11fb8:	ldr	ip, [sp]
   11fbc:	stmia	lr!, {r0, r1, r2, r3}
   11fc0:	cmp	ip, #0
   11fc4:	ldm	r4!, {r0, r1, r2, r3}
   11fc8:	stmia	lr!, {r0, r1, r2, r3}
   11fcc:	ldm	r4, {r0, r1}
   11fd0:	moveq	r4, sp
   11fd4:	stm	lr, {r0, r1}
   11fd8:	beq	12008 <__assert_fail@plt+0xc38>
   11fdc:	ldr	r6, [pc, #448]	; 121a4 <__assert_fail@plt+0xdd4>
   11fe0:	mov	r4, sp
   11fe4:	b	11ff4 <__assert_fail@plt+0xc24>
   11fe8:	ldr	ip, [r4, #8]!
   11fec:	cmp	ip, #0
   11ff0:	beq	12008 <__assert_fail@plt+0xc38>
   11ff4:	mov	r1, ip
   11ff8:	mov	r0, r6
   11ffc:	bl	110a0 <strcmp@plt>
   12000:	cmp	r0, #0
   12004:	bne	11fe8 <__assert_fail@plt+0xc18>
   12008:	ldr	r4, [r4, #4]
   1200c:	mov	r2, #5
   12010:	cmp	r4, #0
   12014:	ldr	r1, [pc, #396]	; 121a8 <__assert_fail@plt+0xdd8>
   12018:	beq	120c0 <__assert_fail@plt+0xcf0>
   1201c:	mov	r0, #0
   12020:	bl	11130 <dcgettext@plt>
   12024:	ldr	r3, [pc, #384]	; 121ac <__assert_fail@plt+0xddc>
   12028:	ldr	r2, [pc, #384]	; 121b0 <__assert_fail@plt+0xde0>
   1202c:	mov	r1, r0
   12030:	mov	r0, #1
   12034:	bl	112d4 <__printf_chk@plt>
   12038:	mov	r1, #0
   1203c:	mov	r0, #5
   12040:	bl	1131c <setlocale@plt>
   12044:	cmp	r0, #0
   12048:	ldreq	r6, [pc, #340]	; 121a4 <__assert_fail@plt+0xdd4>
   1204c:	beq	12068 <__assert_fail@plt+0xc98>
   12050:	mov	r2, #3
   12054:	ldr	r1, [pc, #344]	; 121b4 <__assert_fail@plt+0xde4>
   12058:	bl	11394 <strncmp@plt>
   1205c:	ldr	r6, [pc, #320]	; 121a4 <__assert_fail@plt+0xdd4>
   12060:	cmp	r0, #0
   12064:	bne	12150 <__assert_fail@plt+0xd80>
   12068:	mov	r2, #5
   1206c:	ldr	r1, [pc, #324]	; 121b8 <__assert_fail@plt+0xde8>
   12070:	mov	r0, #0
   12074:	bl	11130 <dcgettext@plt>
   12078:	ldr	r3, [pc, #292]	; 121a4 <__assert_fail@plt+0xdd4>
   1207c:	ldr	r2, [pc, #296]	; 121ac <__assert_fail@plt+0xddc>
   12080:	mov	r1, r0
   12084:	mov	r0, #1
   12088:	bl	112d4 <__printf_chk@plt>
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #292]	; 121bc <__assert_fail@plt+0xdec>
   12094:	mov	r0, #0
   12098:	bl	11130 <dcgettext@plt>
   1209c:	ldr	r2, [pc, #284]	; 121c0 <__assert_fail@plt+0xdf0>
   120a0:	cmp	r4, r6
   120a4:	ldr	r3, [pc, #280]	; 121c4 <__assert_fail@plt+0xdf4>
   120a8:	movne	r3, r2
   120ac:	mov	r1, r0
   120b0:	mov	r2, r4
   120b4:	mov	r0, #1
   120b8:	bl	112d4 <__printf_chk@plt>
   120bc:	b	11eb8 <__assert_fail@plt+0xae8>
   120c0:	mov	r0, r4
   120c4:	bl	11130 <dcgettext@plt>
   120c8:	ldr	r3, [pc, #220]	; 121ac <__assert_fail@plt+0xddc>
   120cc:	ldr	r2, [pc, #220]	; 121b0 <__assert_fail@plt+0xde0>
   120d0:	mov	r1, r0
   120d4:	mov	r0, #1
   120d8:	bl	112d4 <__printf_chk@plt>
   120dc:	mov	r1, r4
   120e0:	mov	r0, #5
   120e4:	bl	1131c <setlocale@plt>
   120e8:	cmp	r0, #0
   120ec:	beq	12104 <__assert_fail@plt+0xd34>
   120f0:	mov	r2, #3
   120f4:	ldr	r1, [pc, #184]	; 121b4 <__assert_fail@plt+0xde4>
   120f8:	bl	11394 <strncmp@plt>
   120fc:	cmp	r0, #0
   12100:	bne	12148 <__assert_fail@plt+0xd78>
   12104:	mov	r2, #5
   12108:	ldr	r1, [pc, #168]	; 121b8 <__assert_fail@plt+0xde8>
   1210c:	mov	r0, #0
   12110:	bl	11130 <dcgettext@plt>
   12114:	ldr	r3, [pc, #136]	; 121a4 <__assert_fail@plt+0xdd4>
   12118:	ldr	r2, [pc, #140]	; 121ac <__assert_fail@plt+0xddc>
   1211c:	mov	r4, r3
   12120:	mov	r1, r0
   12124:	mov	r0, #1
   12128:	bl	112d4 <__printf_chk@plt>
   1212c:	ldr	r1, [pc, #136]	; 121bc <__assert_fail@plt+0xdec>
   12130:	mov	r2, #5
   12134:	mov	r0, #0
   12138:	bl	11130 <dcgettext@plt>
   1213c:	ldr	r3, [pc, #128]	; 121c4 <__assert_fail@plt+0xdf4>
   12140:	mov	r1, r0
   12144:	b	120b0 <__assert_fail@plt+0xce0>
   12148:	ldr	r6, [pc, #84]	; 121a4 <__assert_fail@plt+0xdd4>
   1214c:	mov	r4, r6
   12150:	mov	r2, #5
   12154:	ldr	r1, [pc, #108]	; 121c8 <__assert_fail@plt+0xdf8>
   12158:	mov	r0, #0
   1215c:	bl	11130 <dcgettext@plt>
   12160:	ldr	r1, [r7]
   12164:	bl	11070 <fputs_unlocked@plt>
   12168:	b	12068 <__assert_fail@plt+0xc98>
   1216c:	andeq	r4, r3, r0, lsr #3
   12170:	andeq	r1, r2, ip, asr #11
   12174:	ldrdeq	r4, [r3], -r8
   12178:	strdeq	r1, [r2], -r4
   1217c:	andeq	r4, r3, r4, lsr #3
   12180:	andeq	r1, r2, r0, asr #9
   12184:	andeq	r1, r2, r4, lsl r6
   12188:	andeq	r1, r2, r8, lsr r7
   1218c:	andeq	r1, r2, r4, lsl #15
   12190:	andeq	r1, r2, r8, asr r8
   12194:	andeq	r1, r2, r0, ror #18
   12198:			; <UNDEFINED> instruction: 0x00021ab8
   1219c:	andeq	r1, r2, r8, ror #21
   121a0:	andeq	r1, r2, r0, lsr #22
   121a4:	andeq	r1, r2, r4, asr #11
   121a8:	andeq	r1, r2, r8, ror #22
   121ac:	andeq	r1, r2, r0, lsl #23
   121b0:	andeq	r1, r2, r8, lsr #23
   121b4:			; <UNDEFINED> instruction: 0x00021bb8
   121b8:	andeq	r1, r2, r4, lsl #24
   121bc:	andeq	r1, r2, r0, lsr #24
   121c0:	andeq	r3, r2, r0, ror #12
   121c4:	strdeq	r1, [r2], -r4
   121c8:			; <UNDEFINED> instruction: 0x00021bbc
   121cc:	mov	r0, #1
   121d0:	b	11e78 <__assert_fail@plt+0xaa8>
   121d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121d8:	mov	r4, r1
   121dc:	sub	sp, sp, #12
   121e0:	mov	r5, r2
   121e4:	str	r2, [sp, #4]
   121e8:	mov	r7, r3
   121ec:	mov	sl, r0
   121f0:	bl	11274 <strlen@plt>
   121f4:	ldr	fp, [r4]
   121f8:	cmp	fp, #0
   121fc:	beq	12310 <__assert_fail@plt+0xf40>
   12200:	cmp	r5, #0
   12204:	mov	r8, r0
   12208:	mov	r3, r5
   1220c:	beq	122b8 <__assert_fail@plt+0xee8>
   12210:	mov	r2, #0
   12214:	mov	r5, r2
   12218:	mov	r6, r3
   1221c:	mvn	r9, #0
   12220:	str	r2, [sp]
   12224:	mov	r2, r8
   12228:	mov	r1, sl
   1222c:	mov	r0, fp
   12230:	bl	11394 <strncmp@plt>
   12234:	cmp	r0, #0
   12238:	mov	r0, fp
   1223c:	bne	1227c <__assert_fail@plt+0xeac>
   12240:	bl	11274 <strlen@plt>
   12244:	ldr	r3, [sp, #4]
   12248:	mov	r2, r7
   1224c:	mov	r1, r6
   12250:	cmp	r8, r0
   12254:	mla	r0, r7, r9, r3
   12258:	beq	122a8 <__assert_fail@plt+0xed8>
   1225c:	cmn	r9, #1
   12260:	moveq	r9, r5
   12264:	beq	1227c <__assert_fail@plt+0xeac>
   12268:	bl	11118 <memcmp@plt>
   1226c:	ldr	r3, [sp]
   12270:	cmp	r0, #0
   12274:	movne	r3, #1
   12278:	str	r3, [sp]
   1227c:	ldr	fp, [r4, #4]!
   12280:	add	r5, r5, #1
   12284:	cmp	fp, #0
   12288:	add	r6, r6, r7
   1228c:	bne	12224 <__assert_fail@plt+0xe54>
   12290:	ldr	r3, [sp]
   12294:	cmp	r3, #0
   12298:	mvnne	r9, #1
   1229c:	mov	r0, r9
   122a0:	add	sp, sp, #12
   122a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122a8:	mov	r9, r5
   122ac:	mov	r0, r9
   122b0:	add	sp, sp, #12
   122b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122b8:	mov	r6, r5
   122bc:	mvn	r9, #0
   122c0:	mov	r2, r8
   122c4:	mov	r1, sl
   122c8:	mov	r0, fp
   122cc:	bl	11394 <strncmp@plt>
   122d0:	cmp	r0, #0
   122d4:	mov	r0, fp
   122d8:	bne	122f4 <__assert_fail@plt+0xf24>
   122dc:	bl	11274 <strlen@plt>
   122e0:	cmp	r8, r0
   122e4:	beq	122a8 <__assert_fail@plt+0xed8>
   122e8:	cmn	r9, #1
   122ec:	moveq	r9, r5
   122f0:	movne	r6, #1
   122f4:	ldr	fp, [r4, #4]!
   122f8:	add	r5, r5, #1
   122fc:	cmp	fp, #0
   12300:	bne	122c0 <__assert_fail@plt+0xef0>
   12304:	str	r6, [sp]
   12308:	mov	r3, r6
   1230c:	b	12294 <__assert_fail@plt+0xec4>
   12310:	mvn	r9, #0
   12314:	b	1229c <__assert_fail@plt+0xecc>
   12318:	push	{r4, r5, r6, lr}
   1231c:	mov	r6, r0
   12320:	ldr	r0, [r1]
   12324:	cmp	r0, #0
   12328:	beq	12360 <__assert_fail@plt+0xf90>
   1232c:	mov	r4, r1
   12330:	mov	r5, #0
   12334:	b	12348 <__assert_fail@plt+0xf78>
   12338:	ldr	r0, [r4, #4]!
   1233c:	add	r5, r5, #1
   12340:	cmp	r0, #0
   12344:	beq	12360 <__assert_fail@plt+0xf90>
   12348:	mov	r1, r6
   1234c:	bl	110a0 <strcmp@plt>
   12350:	cmp	r0, #0
   12354:	bne	12338 <__assert_fail@plt+0xf68>
   12358:	mov	r0, r5
   1235c:	pop	{r4, r5, r6, pc}
   12360:	mvn	r0, #0
   12364:	pop	{r4, r5, r6, pc}
   12368:	cmn	r2, #1
   1236c:	push	{r4, r5, r6, lr}
   12370:	mov	r2, #5
   12374:	sub	sp, sp, #8
   12378:	mov	r4, r1
   1237c:	mov	r5, r0
   12380:	ldreq	r1, [pc, #76]	; 123d4 <__assert_fail@plt+0x1004>
   12384:	ldrne	r1, [pc, #76]	; 123d8 <__assert_fail@plt+0x1008>
   12388:	mov	r0, #0
   1238c:	bl	11130 <dcgettext@plt>
   12390:	mov	r2, r4
   12394:	mov	r1, #8
   12398:	mov	r6, r0
   1239c:	mov	r0, #0
   123a0:	bl	1b690 <__assert_fail@plt+0xa2c0>
   123a4:	mov	r1, r5
   123a8:	mov	r4, r0
   123ac:	mov	r0, #1
   123b0:	bl	1d22c <__assert_fail@plt+0xbe5c>
   123b4:	mov	r1, #0
   123b8:	mov	r3, r4
   123bc:	mov	r2, r6
   123c0:	str	r0, [sp]
   123c4:	mov	r0, r1
   123c8:	bl	111c0 <error@plt>
   123cc:	add	sp, sp, #8
   123d0:	pop	{r4, r5, r6, pc}
   123d4:	andeq	r1, r2, ip, asr #29
   123d8:	andeq	r1, r2, r8, ror #29
   123dc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e0:	mov	r6, r0
   123e4:	ldr	r9, [pc, #232]	; 124d4 <__assert_fail@plt+0x1104>
   123e8:	mov	r4, r1
   123ec:	mov	r7, r2
   123f0:	ldr	r1, [pc, #224]	; 124d8 <__assert_fail@plt+0x1108>
   123f4:	mov	r2, #5
   123f8:	mov	r0, #0
   123fc:	bl	11130 <dcgettext@plt>
   12400:	ldr	r1, [r9]
   12404:	bl	11070 <fputs_unlocked@plt>
   12408:	ldr	fp, [r6]
   1240c:	cmp	fp, #0
   12410:	movne	r8, #0
   12414:	movne	r5, r8
   12418:	movne	sl, #1
   1241c:	bne	1245c <__assert_fail@plt+0x108c>
   12420:	b	124a0 <__assert_fail@plt+0x10d0>
   12424:	mov	r0, fp
   12428:	ldr	r8, [r9]
   1242c:	bl	1d3e0 <__assert_fail@plt+0xc010>
   12430:	ldr	r2, [pc, #164]	; 124dc <__assert_fail@plt+0x110c>
   12434:	mov	r1, sl
   12438:	mov	r3, r0
   1243c:	mov	r0, r8
   12440:	bl	112ec <__fprintf_chk@plt>
   12444:	mov	r8, r4
   12448:	ldr	fp, [r6, #4]!
   1244c:	add	r5, r5, #1
   12450:	cmp	fp, #0
   12454:	add	r4, r4, r7
   12458:	beq	124a0 <__assert_fail@plt+0x10d0>
   1245c:	cmp	r5, #0
   12460:	mov	r1, r4
   12464:	mov	r2, r7
   12468:	mov	r0, r8
   1246c:	beq	12424 <__assert_fail@plt+0x1054>
   12470:	bl	11118 <memcmp@plt>
   12474:	cmp	r0, #0
   12478:	bne	12424 <__assert_fail@plt+0x1054>
   1247c:	mov	r0, fp
   12480:	ldr	fp, [r9]
   12484:	bl	1d3e0 <__assert_fail@plt+0xc010>
   12488:	ldr	r2, [pc, #80]	; 124e0 <__assert_fail@plt+0x1110>
   1248c:	mov	r1, sl
   12490:	mov	r3, r0
   12494:	mov	r0, fp
   12498:	bl	112ec <__fprintf_chk@plt>
   1249c:	b	12448 <__assert_fail@plt+0x1078>
   124a0:	ldr	r0, [r9]
   124a4:	ldr	r3, [r0, #20]
   124a8:	ldr	r2, [r0, #24]
   124ac:	cmp	r3, r2
   124b0:	bcs	124c8 <__assert_fail@plt+0x10f8>
   124b4:	add	r1, r3, #1
   124b8:	mov	r2, #10
   124bc:	str	r1, [r0, #20]
   124c0:	strb	r2, [r3]
   124c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124c8:	mov	r1, #10
   124cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124d0:	b	11310 <__overflow@plt>
   124d4:	andeq	r4, r3, r0, lsr #3
   124d8:	andeq	r1, r2, r8, lsl #30
   124dc:	andeq	r1, r2, r0, lsr #30
   124e0:	andeq	r1, r2, r8, lsr #30
   124e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124e8:	sub	sp, sp, #36	; 0x24
   124ec:	mov	r6, r1
   124f0:	ldrb	ip, [sp, #80]	; 0x50
   124f4:	str	r0, [sp, #28]
   124f8:	str	r2, [sp, #24]
   124fc:	cmp	ip, #0
   12500:	str	ip, [sp, #20]
   12504:	str	r3, [sp, #12]
   12508:	ldr	r7, [sp, #72]	; 0x48
   1250c:	bne	125c4 <__assert_fail@plt+0x11f4>
   12510:	ldr	r0, [r2]
   12514:	cmp	r0, #0
   12518:	movne	sl, ip
   1251c:	movne	r4, r2
   12520:	bne	125a8 <__assert_fail@plt+0x11d8>
   12524:	mov	r2, #5
   12528:	ldr	r1, [pc, #512]	; 12730 <__assert_fail@plt+0x1360>
   1252c:	mov	r0, #0
   12530:	bl	11130 <dcgettext@plt>
   12534:	mov	r4, r0
   12538:	mov	r2, r6
   1253c:	mov	r1, #8
   12540:	mov	r0, #0
   12544:	bl	1b690 <__assert_fail@plt+0xa2c0>
   12548:	ldr	r1, [sp, #28]
   1254c:	mvn	sl, #0
   12550:	mov	r5, r0
   12554:	mov	r0, #1
   12558:	bl	1d22c <__assert_fail@plt+0xbe5c>
   1255c:	mov	r1, #0
   12560:	mov	r3, r5
   12564:	mov	r2, r4
   12568:	str	r0, [sp]
   1256c:	mov	r0, r1
   12570:	bl	111c0 <error@plt>
   12574:	ldr	r0, [sp, #24]
   12578:	mov	r2, r7
   1257c:	ldr	r1, [sp, #12]
   12580:	bl	123dc <__assert_fail@plt+0x100c>
   12584:	ldr	r3, [sp, #76]	; 0x4c
   12588:	blx	r3
   1258c:	mov	r0, sl
   12590:	add	sp, sp, #36	; 0x24
   12594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12598:	ldr	r0, [r4, #4]!
   1259c:	add	sl, sl, #1
   125a0:	cmp	r0, #0
   125a4:	beq	12524 <__assert_fail@plt+0x1154>
   125a8:	mov	r1, r6
   125ac:	bl	110a0 <strcmp@plt>
   125b0:	cmp	r0, #0
   125b4:	bne	12598 <__assert_fail@plt+0x11c8>
   125b8:	mov	r0, sl
   125bc:	add	sp, sp, #36	; 0x24
   125c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125c4:	mov	r0, r1
   125c8:	bl	11274 <strlen@plt>
   125cc:	ldr	r3, [sp, #24]
   125d0:	ldr	fp, [r3]
   125d4:	cmp	fp, #0
   125d8:	mov	r9, r0
   125dc:	beq	12524 <__assert_fail@plt+0x1154>
   125e0:	ldr	r2, [sp, #12]
   125e4:	cmp	r2, #0
   125e8:	beq	126a4 <__assert_fail@plt+0x12d4>
   125ec:	mov	r1, #0
   125f0:	mov	r4, r1
   125f4:	mov	r8, r3
   125f8:	mov	r5, r2
   125fc:	mvn	sl, #0
   12600:	str	r1, [sp, #16]
   12604:	mov	r2, r9
   12608:	mov	r1, r6
   1260c:	mov	r0, fp
   12610:	bl	11394 <strncmp@plt>
   12614:	cmp	r0, #0
   12618:	mov	r0, fp
   1261c:	bne	12660 <__assert_fail@plt+0x1290>
   12620:	bl	11274 <strlen@plt>
   12624:	ldr	r3, [sp, #12]
   12628:	mov	r2, r7
   1262c:	mov	r1, r5
   12630:	cmp	r9, r0
   12634:	mla	r0, r7, sl, r3
   12638:	beq	12694 <__assert_fail@plt+0x12c4>
   1263c:	cmn	sl, #1
   12640:	moveq	sl, r4
   12644:	beq	12660 <__assert_fail@plt+0x1290>
   12648:	bl	11118 <memcmp@plt>
   1264c:	ldr	r2, [sp, #20]
   12650:	ldr	r3, [sp, #16]
   12654:	cmp	r0, #0
   12658:	movne	r3, r2
   1265c:	str	r3, [sp, #16]
   12660:	ldr	fp, [r8, #4]!
   12664:	add	r4, r4, #1
   12668:	cmp	fp, #0
   1266c:	add	r5, r5, r7
   12670:	bne	12604 <__assert_fail@plt+0x1234>
   12674:	ldr	r3, [sp, #16]
   12678:	cmp	r3, #0
   1267c:	bne	12718 <__assert_fail@plt+0x1348>
   12680:	cmn	sl, #1
   12684:	beq	12524 <__assert_fail@plt+0x1154>
   12688:	mov	r0, sl
   1268c:	add	sp, sp, #36	; 0x24
   12690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12694:	mov	sl, r4
   12698:	mov	r0, sl
   1269c:	add	sp, sp, #36	; 0x24
   126a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126a4:	mov	r5, r3
   126a8:	ldr	r3, [sp, #12]
   126ac:	str	r7, [sp, #72]	; 0x48
   126b0:	mov	r7, fp
   126b4:	ldr	fp, [sp, #20]
   126b8:	mov	r8, r3
   126bc:	mvn	sl, #0
   126c0:	mov	r4, r3
   126c4:	mov	r2, r9
   126c8:	mov	r1, r6
   126cc:	mov	r0, r7
   126d0:	bl	11394 <strncmp@plt>
   126d4:	cmp	r0, #0
   126d8:	mov	r0, r7
   126dc:	bne	126f8 <__assert_fail@plt+0x1328>
   126e0:	bl	11274 <strlen@plt>
   126e4:	cmp	r9, r0
   126e8:	beq	12694 <__assert_fail@plt+0x12c4>
   126ec:	cmn	sl, #1
   126f0:	moveq	sl, r4
   126f4:	movne	r8, fp
   126f8:	ldr	r7, [r5, #4]!
   126fc:	add	r4, r4, #1
   12700:	cmp	r7, #0
   12704:	bne	126c4 <__assert_fail@plt+0x12f4>
   12708:	str	r8, [sp, #16]
   1270c:	ldr	r7, [sp, #72]	; 0x48
   12710:	mov	r3, r8
   12714:	b	12678 <__assert_fail@plt+0x12a8>
   12718:	mov	r2, #5
   1271c:	ldr	r1, [pc, #16]	; 12734 <__assert_fail@plt+0x1364>
   12720:	mov	r0, #0
   12724:	bl	11130 <dcgettext@plt>
   12728:	mov	r4, r0
   1272c:	b	12538 <__assert_fail@plt+0x1168>
   12730:	andeq	r1, r2, ip, asr #29
   12734:	andeq	r1, r2, r8, ror #29
   12738:	push	{r4, r5, r6, r7, r8, lr}
   1273c:	ldr	r7, [r1]
   12740:	cmp	r7, #0
   12744:	beq	12784 <__assert_fail@plt+0x13b4>
   12748:	mov	r6, r3
   1274c:	mov	r8, r0
   12750:	mov	r4, r2
   12754:	mov	r5, r1
   12758:	b	12768 <__assert_fail@plt+0x1398>
   1275c:	ldr	r7, [r5, #4]!
   12760:	cmp	r7, #0
   12764:	beq	12784 <__assert_fail@plt+0x13b4>
   12768:	mov	r1, r4
   1276c:	mov	r2, r6
   12770:	mov	r0, r8
   12774:	bl	11118 <memcmp@plt>
   12778:	add	r4, r4, r6
   1277c:	cmp	r0, #0
   12780:	bne	1275c <__assert_fail@plt+0x138c>
   12784:	mov	r0, r7
   12788:	pop	{r4, r5, r6, r7, r8, pc}
   1278c:	ldr	r3, [pc, #4]	; 12798 <__assert_fail@plt+0x13c8>
   12790:	str	r0, [r3]
   12794:	bx	lr
   12798:	ldrdeq	r4, [r3], -r0
   1279c:	ldr	r3, [pc, #4]	; 127a8 <__assert_fail@plt+0x13d8>
   127a0:	strb	r0, [r3, #4]
   127a4:	bx	lr
   127a8:	ldrdeq	r4, [r3], -r0
   127ac:	ldr	r3, [pc, #192]	; 12874 <__assert_fail@plt+0x14a4>
   127b0:	push	{r4, r5, r6, lr}
   127b4:	sub	sp, sp, #8
   127b8:	ldr	r0, [r3]
   127bc:	bl	1ec94 <__assert_fail@plt+0xd8c4>
   127c0:	cmp	r0, #0
   127c4:	beq	127e8 <__assert_fail@plt+0x1418>
   127c8:	ldr	r4, [pc, #168]	; 12878 <__assert_fail@plt+0x14a8>
   127cc:	ldrb	r3, [r4, #4]
   127d0:	cmp	r3, #0
   127d4:	beq	12804 <__assert_fail@plt+0x1434>
   127d8:	bl	11298 <__errno_location@plt>
   127dc:	ldr	r3, [r0]
   127e0:	cmp	r3, #32
   127e4:	bne	12804 <__assert_fail@plt+0x1434>
   127e8:	ldr	r3, [pc, #140]	; 1287c <__assert_fail@plt+0x14ac>
   127ec:	ldr	r0, [r3]
   127f0:	bl	1ec94 <__assert_fail@plt+0xd8c4>
   127f4:	cmp	r0, #0
   127f8:	bne	1284c <__assert_fail@plt+0x147c>
   127fc:	add	sp, sp, #8
   12800:	pop	{r4, r5, r6, pc}
   12804:	mov	r2, #5
   12808:	ldr	r1, [pc, #112]	; 12880 <__assert_fail@plt+0x14b0>
   1280c:	mov	r0, #0
   12810:	bl	11130 <dcgettext@plt>
   12814:	ldr	r4, [r4]
   12818:	cmp	r4, #0
   1281c:	mov	r5, r0
   12820:	beq	12858 <__assert_fail@plt+0x1488>
   12824:	bl	11298 <__errno_location@plt>
   12828:	ldr	r6, [r0]
   1282c:	mov	r0, r4
   12830:	bl	1c180 <__assert_fail@plt+0xadb0>
   12834:	mov	r1, r6
   12838:	str	r5, [sp]
   1283c:	ldr	r2, [pc, #64]	; 12884 <__assert_fail@plt+0x14b4>
   12840:	mov	r3, r0
   12844:	mov	r0, #0
   12848:	bl	111c0 <error@plt>
   1284c:	ldr	r3, [pc, #52]	; 12888 <__assert_fail@plt+0x14b8>
   12850:	ldr	r0, [r3]
   12854:	bl	110e8 <_exit@plt>
   12858:	bl	11298 <__errno_location@plt>
   1285c:	mov	r3, r5
   12860:	ldr	r2, [pc, #36]	; 1288c <__assert_fail@plt+0x14bc>
   12864:	ldr	r1, [r0]
   12868:	mov	r0, r4
   1286c:	bl	111c0 <error@plt>
   12870:	b	1284c <__assert_fail@plt+0x147c>
   12874:	andeq	r4, r3, r4, lsr #3
   12878:	ldrdeq	r4, [r3], -r0
   1287c:	andeq	r4, r3, r0, lsr #3
   12880:	andeq	r1, r2, r0, lsr pc
   12884:	andeq	r1, r2, ip, lsr pc
   12888:	andeq	r4, r3, r8, asr #2
   1288c:	andeq	r1, r2, r0, asr #30
   12890:	mov	ip, r1
   12894:	push	{r4, r5, r6, r7, r8, lr}
   12898:	mov	r1, r2
   1289c:	mov	r5, r0
   128a0:	mov	r2, r3
   128a4:	mov	r0, ip
   128a8:	bl	111cc <open64@plt>
   128ac:	sub	r3, r5, r0
   128b0:	clz	r3, r3
   128b4:	lsr	r3, r3, #5
   128b8:	orrs	r3, r3, r0, lsr #31
   128bc:	mov	r4, r0
   128c0:	bne	128ec <__assert_fail@plt+0x151c>
   128c4:	mov	r1, r5
   128c8:	bl	1113c <dup2@plt>
   128cc:	mov	r7, r0
   128d0:	bl	11298 <__errno_location@plt>
   128d4:	mov	r5, r0
   128d8:	mov	r0, r4
   128dc:	ldr	r6, [r5]
   128e0:	mov	r4, r7
   128e4:	bl	113ac <close@plt>
   128e8:	str	r6, [r5]
   128ec:	mov	r0, r4
   128f0:	pop	{r4, r5, r6, r7, r8, pc}
   128f4:	cmp	r0, #0
   128f8:	push	{r4, r5, r6, r7, r8, lr}
   128fc:	mov	r7, r1
   12900:	mov	r5, r2
   12904:	mov	r6, r3
   12908:	blt	12938 <__assert_fail@plt+0x1568>
   1290c:	mov	r1, r3
   12910:	bl	11358 <futimens@plt>
   12914:	cmp	r5, #0
   12918:	mov	r4, r0
   1291c:	beq	12928 <__assert_fail@plt+0x1558>
   12920:	cmn	r0, #1
   12924:	beq	1295c <__assert_fail@plt+0x158c>
   12928:	cmp	r4, #1
   1292c:	beq	12974 <__assert_fail@plt+0x15a4>
   12930:	mov	r0, r4
   12934:	pop	{r4, r5, r6, r7, r8, pc}
   12938:	cmp	r2, #0
   1293c:	beq	12974 <__assert_fail@plt+0x15a4>
   12940:	mov	r2, r6
   12944:	mov	r1, r5
   12948:	mov	r0, r7
   1294c:	ldr	r3, [sp, #24]
   12950:	bl	11094 <utimensat@plt>
   12954:	mov	r4, r0
   12958:	b	12928 <__assert_fail@plt+0x1558>
   1295c:	bl	11298 <__errno_location@plt>
   12960:	ldr	r3, [r0]
   12964:	cmp	r3, #38	; 0x26
   12968:	beq	12940 <__assert_fail@plt+0x1570>
   1296c:	mov	r0, r4
   12970:	pop	{r4, r5, r6, r7, r8, pc}
   12974:	bl	11298 <__errno_location@plt>
   12978:	mov	r3, #9
   1297c:	mvn	r4, #0
   12980:	str	r3, [r0]
   12984:	b	12930 <__assert_fail@plt+0x1560>
   12988:	mov	r1, r0
   1298c:	mov	r0, #0
   12990:	b	110dc <clock_gettime@plt>
   12994:	push	{r4, r5, lr}
   12998:	sub	sp, sp, #12
   1299c:	mov	r4, r0
   129a0:	mov	r1, sp
   129a4:	mov	r0, #0
   129a8:	bl	110dc <clock_gettime@plt>
   129ac:	ldm	sp, {r0, r1}
   129b0:	stm	r4, {r0, r1}
   129b4:	mov	r0, r4
   129b8:	add	sp, sp, #12
   129bc:	pop	{r4, r5, pc}
   129c0:	ldr	r3, [r1, #24]
   129c4:	cmp	r3, #0
   129c8:	blt	12a38 <__assert_fail@plt+0x1668>
   129cc:	push	{r4, r5, lr}
   129d0:	ldr	r2, [r0]
   129d4:	ldr	r5, [r1]
   129d8:	ldr	lr, [r1, #4]
   129dc:	ldr	r3, [r0, #4]
   129e0:	ldr	ip, [r0, #8]
   129e4:	ldr	r4, [r1, #8]
   129e8:	eor	r2, r2, r5
   129ec:	eor	r3, r3, lr
   129f0:	ldr	r5, [r1, #12]
   129f4:	ldr	lr, [r0, #12]
   129f8:	orr	r3, r2, r3
   129fc:	eor	r2, ip, r4
   12a00:	ldr	ip, [r0, #16]
   12a04:	ldr	r4, [r1, #16]
   12a08:	orr	r3, r3, r2
   12a0c:	eor	lr, lr, r5
   12a10:	ldr	r2, [r0, #20]
   12a14:	ldr	r0, [r1, #20]
   12a18:	orr	r3, r3, lr
   12a1c:	eor	r1, ip, r4
   12a20:	eor	r2, r2, r0
   12a24:	orr	r3, r3, r1
   12a28:	orrs	r3, r3, r2
   12a2c:	moveq	r0, #1
   12a30:	movne	r0, #0
   12a34:	pop	{r4, r5, pc}
   12a38:	mov	r0, #0
   12a3c:	bx	lr
   12a40:	push	{r0, r1, r2, r3}
   12a44:	mov	r2, #6
   12a48:	push	{r4, lr}
   12a4c:	mov	r1, #1
   12a50:	ldr	r4, [pc, #56]	; 12a90 <__assert_fail@plt+0x16c0>
   12a54:	sub	sp, sp, #8
   12a58:	ldr	r0, [pc, #52]	; 12a94 <__assert_fail@plt+0x16c4>
   12a5c:	ldr	r3, [r4]
   12a60:	bl	11184 <fwrite@plt>
   12a64:	add	ip, sp, #20
   12a68:	ldr	r0, [r4]
   12a6c:	ldr	r2, [sp, #16]
   12a70:	mov	r3, ip
   12a74:	mov	r1, #1
   12a78:	str	ip, [sp, #4]
   12a7c:	bl	11208 <__vfprintf_chk@plt>
   12a80:	add	sp, sp, #8
   12a84:	pop	{r4, lr}
   12a88:	add	sp, sp, #16
   12a8c:	bx	lr
   12a90:	andeq	r4, r3, r0, lsr #3
   12a94:	andeq	r2, r2, r0, ror sl
   12a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a9c:	ldr	r1, [sp, #80]	; 0x50
   12aa0:	ldrd	sl, [sp, #60]	; 0x3c
   12aa4:	cmp	r1, #0
   12aa8:	ldrd	r8, [sp, #68]	; 0x44
   12aac:	ldr	ip, [sp, #76]	; 0x4c
   12ab0:	ldr	r1, [r0, #144]	; 0x90
   12ab4:	blt	12de8 <__assert_fail@plt+0x1a18>
   12ab8:	cmp	ip, #0
   12abc:	blt	12f4c <__assert_fail@plt+0x1b7c>
   12ac0:	cmp	r1, #0
   12ac4:	blt	12d5c <__assert_fail@plt+0x198c>
   12ac8:	mvn	lr, #-2147483648	; 0x80000000
   12acc:	sub	lr, lr, ip
   12ad0:	cmp	r1, lr
   12ad4:	movle	lr, #0
   12ad8:	movgt	lr, #1
   12adc:	cmp	lr, #0
   12ae0:	addne	ip, r1, ip
   12ae4:	movne	r1, #1
   12ae8:	beq	12d5c <__assert_fail@plt+0x198c>
   12aec:	cmp	r8, #0
   12af0:	sbcs	lr, r9, #0
   12af4:	str	ip, [r0, #144]	; 0x90
   12af8:	ldrd	r4, [r0, #136]	; 0x88
   12afc:	blt	13038 <__assert_fail@plt+0x1c68>
   12b00:	cmp	r4, #0
   12b04:	sbcs	ip, r5, #0
   12b08:	blt	12ddc <__assert_fail@plt+0x1a0c>
   12b0c:	mvn	r6, #0
   12b10:	subs	r6, r6, r8
   12b14:	mvn	r7, #-2147483648	; 0x80000000
   12b18:	sbc	r7, r7, r9
   12b1c:	cmp	r6, r4
   12b20:	sbcs	ip, r7, r5
   12b24:	movlt	ip, #1
   12b28:	movge	ip, #0
   12b2c:	cmp	ip, #0
   12b30:	beq	12ddc <__assert_fail@plt+0x1a0c>
   12b34:	adds	r4, r4, r8
   12b38:	adc	r5, r5, r9
   12b3c:	mov	r1, #1
   12b40:	cmp	sl, #0
   12b44:	sbcs	ip, fp, #0
   12b48:	strd	r4, [r0, #136]	; 0x88
   12b4c:	ldrd	r4, [r0, #128]	; 0x80
   12b50:	blt	13014 <__assert_fail@plt+0x1c44>
   12b54:	cmp	r4, #0
   12b58:	sbcs	ip, r5, #0
   12b5c:	blt	12dcc <__assert_fail@plt+0x19fc>
   12b60:	mvn	r6, #0
   12b64:	subs	r6, r6, sl
   12b68:	mvn	r7, #-2147483648	; 0x80000000
   12b6c:	sbc	r7, r7, fp
   12b70:	cmp	r6, r4
   12b74:	sbcs	ip, r7, r5
   12b78:	movlt	ip, #1
   12b7c:	movge	ip, #0
   12b80:	cmp	ip, #0
   12b84:	beq	12dcc <__assert_fail@plt+0x19fc>
   12b88:	adds	r4, r4, sl
   12b8c:	adc	r5, r5, fp
   12b90:	mov	ip, #1
   12b94:	ldrd	r6, [sp, #52]	; 0x34
   12b98:	strd	r4, [r0, #128]	; 0x80
   12b9c:	orr	r1, ip, r1
   12ba0:	cmp	r6, #0
   12ba4:	sbcs	lr, r7, #0
   12ba8:	blt	12fe4 <__assert_fail@plt+0x1c14>
   12bac:	ldrd	r4, [r0, #120]	; 0x78
   12bb0:	cmp	r4, #0
   12bb4:	sbcs	ip, r5, #0
   12bb8:	blt	12db0 <__assert_fail@plt+0x19e0>
   12bbc:	mov	r8, r6
   12bc0:	mvn	r6, #0
   12bc4:	mov	r9, r7
   12bc8:	subs	r8, r6, r8
   12bcc:	mvn	r7, #-2147483648	; 0x80000000
   12bd0:	sbc	r9, r7, r9
   12bd4:	cmp	r8, r4
   12bd8:	sbcs	ip, r9, r5
   12bdc:	movlt	ip, #1
   12be0:	movge	ip, #0
   12be4:	cmp	ip, #0
   12be8:	beq	12db0 <__assert_fail@plt+0x19e0>
   12bec:	ldrd	r6, [sp, #52]	; 0x34
   12bf0:	mov	ip, #1
   12bf4:	adds	r6, r6, r4
   12bf8:	adc	r7, r7, r5
   12bfc:	mov	r4, r6
   12c00:	mov	r5, r7
   12c04:	ldrd	r6, [sp, #44]	; 0x2c
   12c08:	strd	r4, [r0, #120]	; 0x78
   12c0c:	orr	r1, r1, ip
   12c10:	cmp	r6, #0
   12c14:	sbcs	lr, r7, #0
   12c18:	blt	12fb4 <__assert_fail@plt+0x1be4>
   12c1c:	ldrd	r4, [r0, #112]	; 0x70
   12c20:	cmp	r4, #0
   12c24:	sbcs	ip, r5, #0
   12c28:	blt	12d94 <__assert_fail@plt+0x19c4>
   12c2c:	mov	r8, r6
   12c30:	mvn	r6, #0
   12c34:	mov	r9, r7
   12c38:	subs	r8, r6, r8
   12c3c:	mvn	r7, #-2147483648	; 0x80000000
   12c40:	sbc	r9, r7, r9
   12c44:	cmp	r8, r4
   12c48:	sbcs	ip, r9, r5
   12c4c:	movlt	ip, #1
   12c50:	movge	ip, #0
   12c54:	cmp	ip, #0
   12c58:	beq	12d94 <__assert_fail@plt+0x19c4>
   12c5c:	ldrd	r6, [sp, #44]	; 0x2c
   12c60:	mov	ip, #1
   12c64:	adds	r6, r6, r4
   12c68:	adc	r7, r7, r5
   12c6c:	mov	r4, r6
   12c70:	mov	r5, r7
   12c74:	ldrd	r6, [sp, #36]	; 0x24
   12c78:	strd	r4, [r0, #112]	; 0x70
   12c7c:	orr	r1, r1, ip
   12c80:	cmp	r6, #0
   12c84:	sbcs	lr, r7, #0
   12c88:	blt	12f84 <__assert_fail@plt+0x1bb4>
   12c8c:	ldrd	r4, [r0, #104]	; 0x68
   12c90:	cmp	r4, #0
   12c94:	sbcs	ip, r5, #0
   12c98:	blt	12d78 <__assert_fail@plt+0x19a8>
   12c9c:	mov	r8, r6
   12ca0:	mvn	r6, #0
   12ca4:	mov	r9, r7
   12ca8:	subs	r8, r6, r8
   12cac:	mvn	r7, #-2147483648	; 0x80000000
   12cb0:	sbc	r9, r7, r9
   12cb4:	cmp	r8, r4
   12cb8:	sbcs	ip, r9, r5
   12cbc:	movlt	ip, #1
   12cc0:	movge	ip, #0
   12cc4:	cmp	ip, #0
   12cc8:	beq	12d78 <__assert_fail@plt+0x19a8>
   12ccc:	ldrd	r6, [sp, #36]	; 0x24
   12cd0:	mov	ip, #1
   12cd4:	adds	r6, r6, r4
   12cd8:	adc	r7, r7, r5
   12cdc:	mov	r4, r6
   12ce0:	mov	r5, r7
   12ce4:	cmp	r2, #0
   12ce8:	sbcs	lr, r3, #0
   12cec:	strd	r4, [r0, #104]	; 0x68
   12cf0:	orr	r1, r1, ip
   12cf4:	ldrd	r4, [r0, #96]	; 0x60
   12cf8:	blt	12f60 <__assert_fail@plt+0x1b90>
   12cfc:	cmp	r4, #0
   12d00:	sbcs	ip, r5, #0
   12d04:	blt	12d68 <__assert_fail@plt+0x1998>
   12d08:	mvn	r6, #0
   12d0c:	subs	r6, r6, r2
   12d10:	mvn	r7, #-2147483648	; 0x80000000
   12d14:	sbc	r7, r7, r3
   12d18:	cmp	r6, r4
   12d1c:	sbcs	ip, r7, r5
   12d20:	movlt	ip, #1
   12d24:	movge	ip, #0
   12d28:	cmp	ip, #0
   12d2c:	beq	12d68 <__assert_fail@plt+0x1998>
   12d30:	adds	r2, r2, r4
   12d34:	adc	r3, r3, r5
   12d38:	mov	ip, #1
   12d3c:	orr	r1, r1, ip
   12d40:	strd	r2, [r0, #96]	; 0x60
   12d44:	cmp	r1, #0
   12d48:	moveq	r3, #1
   12d4c:	strbeq	r3, [r0, #153]	; 0x99
   12d50:	moveq	r0, r3
   12d54:	movne	r0, #0
   12d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d5c:	add	ip, r1, ip
   12d60:	mov	r1, #0
   12d64:	b	12aec <__assert_fail@plt+0x171c>
   12d68:	adds	r2, r2, r4
   12d6c:	adc	r3, r3, r5
   12d70:	mov	ip, #0
   12d74:	b	12d3c <__assert_fail@plt+0x196c>
   12d78:	ldrd	r6, [sp, #36]	; 0x24
   12d7c:	mov	ip, #0
   12d80:	adds	r6, r6, r4
   12d84:	adc	r7, r7, r5
   12d88:	mov	r4, r6
   12d8c:	mov	r5, r7
   12d90:	b	12ce4 <__assert_fail@plt+0x1914>
   12d94:	ldrd	r6, [sp, #44]	; 0x2c
   12d98:	mov	ip, #0
   12d9c:	adds	r6, r6, r4
   12da0:	adc	r7, r7, r5
   12da4:	mov	r4, r6
   12da8:	mov	r5, r7
   12dac:	b	12c74 <__assert_fail@plt+0x18a4>
   12db0:	ldrd	r6, [sp, #52]	; 0x34
   12db4:	mov	ip, #0
   12db8:	adds	r6, r6, r4
   12dbc:	adc	r7, r7, r5
   12dc0:	mov	r4, r6
   12dc4:	mov	r5, r7
   12dc8:	b	12c04 <__assert_fail@plt+0x1834>
   12dcc:	adds	r4, r4, sl
   12dd0:	adc	r5, r5, fp
   12dd4:	mov	ip, #0
   12dd8:	b	12b94 <__assert_fail@plt+0x17c4>
   12ddc:	adds	r4, r4, r8
   12de0:	adc	r5, r5, r9
   12de4:	b	12b40 <__assert_fail@plt+0x1770>
   12de8:	mvn	lr, r1
   12dec:	lsr	lr, lr, #31
   12df0:	cmp	lr, ip, lsr #31
   12df4:	beq	12f20 <__assert_fail@plt+0x1b50>
   12df8:	sub	ip, r1, ip
   12dfc:	mov	r1, #0
   12e00:	ldrd	r4, [r0, #136]	; 0x88
   12e04:	str	ip, [r0, #144]	; 0x90
   12e08:	mvn	ip, r5
   12e0c:	lsr	ip, ip, #31
   12e10:	cmp	ip, r9, lsr #31
   12e14:	beq	131b8 <__assert_fail@plt+0x1de8>
   12e18:	subs	r4, r4, r8
   12e1c:	sbc	r5, r5, r9
   12e20:	ldrd	r6, [r0, #128]	; 0x80
   12e24:	strd	r4, [r0, #136]	; 0x88
   12e28:	mvn	ip, r7
   12e2c:	lsr	ip, ip, #31
   12e30:	cmp	ip, fp, lsr #31
   12e34:	beq	1317c <__assert_fail@plt+0x1dac>
   12e38:	subs	r6, r6, sl
   12e3c:	sbc	r7, r7, fp
   12e40:	mov	ip, #0
   12e44:	ldrd	r8, [r0, #120]	; 0x78
   12e48:	orr	r1, ip, r1
   12e4c:	ldr	lr, [sp, #56]	; 0x38
   12e50:	mvn	ip, r9
   12e54:	strd	r6, [r0, #128]	; 0x80
   12e58:	lsr	ip, ip, #31
   12e5c:	cmp	ip, lr, lsr #31
   12e60:	beq	13130 <__assert_fail@plt+0x1d60>
   12e64:	ldrd	r4, [sp, #52]	; 0x34
   12e68:	mov	ip, #0
   12e6c:	subs	r4, r8, r4
   12e70:	sbc	r5, r9, r5
   12e74:	mov	r8, r4
   12e78:	mov	r9, r5
   12e7c:	ldrd	r6, [r0, #112]	; 0x70
   12e80:	orr	r1, r1, ip
   12e84:	ldr	lr, [sp, #48]	; 0x30
   12e88:	mvn	ip, r7
   12e8c:	strd	r8, [r0, #120]	; 0x78
   12e90:	lsr	ip, ip, #31
   12e94:	cmp	ip, lr, lsr #31
   12e98:	beq	130e4 <__assert_fail@plt+0x1d14>
   12e9c:	ldrd	r4, [sp, #44]	; 0x2c
   12ea0:	mov	ip, #0
   12ea4:	subs	r4, r6, r4
   12ea8:	sbc	r5, r7, r5
   12eac:	mov	r6, r4
   12eb0:	mov	r7, r5
   12eb4:	ldrd	r8, [r0, #104]	; 0x68
   12eb8:	orr	r1, r1, ip
   12ebc:	ldr	lr, [sp, #40]	; 0x28
   12ec0:	mvn	ip, r9
   12ec4:	strd	r6, [r0, #112]	; 0x70
   12ec8:	lsr	ip, ip, #31
   12ecc:	cmp	ip, lr, lsr #31
   12ed0:	beq	13098 <__assert_fail@plt+0x1cc8>
   12ed4:	ldrd	r4, [sp, #36]	; 0x24
   12ed8:	mov	ip, #0
   12edc:	subs	r4, r8, r4
   12ee0:	sbc	r5, r9, r5
   12ee4:	mov	r8, r4
   12ee8:	mov	r9, r5
   12eec:	ldrd	r6, [r0, #96]	; 0x60
   12ef0:	orr	r1, r1, ip
   12ef4:	strd	r8, [r0, #104]	; 0x68
   12ef8:	mvn	ip, r7
   12efc:	lsr	ip, ip, #31
   12f00:	cmp	ip, r3, lsr #31
   12f04:	beq	1305c <__assert_fail@plt+0x1c8c>
   12f08:	subs	r2, r6, r2
   12f0c:	sbc	r3, r7, r3
   12f10:	mov	ip, #0
   12f14:	strd	r2, [r0, #96]	; 0x60
   12f18:	orr	r1, r1, ip
   12f1c:	b	12d44 <__assert_fail@plt+0x1974>
   12f20:	cmp	r1, #0
   12f24:	blt	131f4 <__assert_fail@plt+0x1e24>
   12f28:	sub	lr, ip, #-2147483647	; 0x80000001
   12f2c:	cmp	r1, lr
   12f30:	movle	lr, #0
   12f34:	movgt	lr, #1
   12f38:	cmp	lr, #0
   12f3c:	beq	12df8 <__assert_fail@plt+0x1a28>
   12f40:	sub	ip, r1, ip
   12f44:	mov	r1, #1
   12f48:	b	12e00 <__assert_fail@plt+0x1a30>
   12f4c:	rsb	lr, ip, #-2147483648	; 0x80000000
   12f50:	cmp	r1, lr
   12f54:	movge	lr, #0
   12f58:	movlt	lr, #1
   12f5c:	b	12adc <__assert_fail@plt+0x170c>
   12f60:	mov	r6, #0
   12f64:	subs	r6, r6, r2
   12f68:	mov	r7, #-2147483648	; 0x80000000
   12f6c:	sbc	r7, r7, r3
   12f70:	cmp	r4, r6
   12f74:	sbcs	ip, r5, r7
   12f78:	movlt	ip, #1
   12f7c:	movge	ip, #0
   12f80:	b	12d28 <__assert_fail@plt+0x1958>
   12f84:	ldrd	r4, [r0, #104]	; 0x68
   12f88:	mov	r8, r6
   12f8c:	mov	r6, #0
   12f90:	mov	r9, r7
   12f94:	subs	r8, r6, r8
   12f98:	mov	r7, #-2147483648	; 0x80000000
   12f9c:	sbc	r9, r7, r9
   12fa0:	cmp	r4, r8
   12fa4:	sbcs	ip, r5, r9
   12fa8:	movlt	ip, #1
   12fac:	movge	ip, #0
   12fb0:	b	12cc4 <__assert_fail@plt+0x18f4>
   12fb4:	ldrd	r4, [r0, #112]	; 0x70
   12fb8:	mov	r8, r6
   12fbc:	mov	r6, #0
   12fc0:	mov	r9, r7
   12fc4:	subs	r8, r6, r8
   12fc8:	mov	r7, #-2147483648	; 0x80000000
   12fcc:	sbc	r9, r7, r9
   12fd0:	cmp	r4, r8
   12fd4:	sbcs	ip, r5, r9
   12fd8:	movlt	ip, #1
   12fdc:	movge	ip, #0
   12fe0:	b	12c54 <__assert_fail@plt+0x1884>
   12fe4:	ldrd	r4, [r0, #120]	; 0x78
   12fe8:	mov	r8, r6
   12fec:	mov	r6, #0
   12ff0:	mov	r9, r7
   12ff4:	subs	r8, r6, r8
   12ff8:	mov	r7, #-2147483648	; 0x80000000
   12ffc:	sbc	r9, r7, r9
   13000:	cmp	r4, r8
   13004:	sbcs	ip, r5, r9
   13008:	movlt	ip, #1
   1300c:	movge	ip, #0
   13010:	b	12be4 <__assert_fail@plt+0x1814>
   13014:	mov	r6, #0
   13018:	subs	r6, r6, sl
   1301c:	mov	r7, #-2147483648	; 0x80000000
   13020:	sbc	r7, r7, fp
   13024:	cmp	r4, r6
   13028:	sbcs	ip, r5, r7
   1302c:	movlt	ip, #1
   13030:	movge	ip, #0
   13034:	b	12b80 <__assert_fail@plt+0x17b0>
   13038:	mov	r6, #0
   1303c:	subs	r6, r6, r8
   13040:	mov	r7, #-2147483648	; 0x80000000
   13044:	sbc	r7, r7, r9
   13048:	cmp	r4, r6
   1304c:	sbcs	ip, r5, r7
   13050:	movlt	ip, #1
   13054:	movge	ip, #0
   13058:	b	12b2c <__assert_fail@plt+0x175c>
   1305c:	cmp	r6, #0
   13060:	sbcs	ip, r7, #0
   13064:	blt	132a0 <__assert_fail@plt+0x1ed0>
   13068:	subs	r4, r2, #1
   1306c:	sbc	r5, r3, #-2147483648	; 0x80000000
   13070:	cmp	r4, r6
   13074:	sbcs	ip, r5, r7
   13078:	movlt	ip, #1
   1307c:	movge	ip, #0
   13080:	cmp	ip, #0
   13084:	beq	12f08 <__assert_fail@plt+0x1b38>
   13088:	subs	r2, r6, r2
   1308c:	sbc	r3, r7, r3
   13090:	mov	ip, #1
   13094:	b	12f14 <__assert_fail@plt+0x1b44>
   13098:	cmp	r8, #0
   1309c:	sbcs	ip, r9, #0
   130a0:	blt	13280 <__assert_fail@plt+0x1eb0>
   130a4:	ldrd	r4, [sp, #36]	; 0x24
   130a8:	subs	r4, r4, #1
   130ac:	sbc	r5, r5, #-2147483648	; 0x80000000
   130b0:	cmp	r4, r8
   130b4:	sbcs	ip, r5, r9
   130b8:	movlt	ip, #1
   130bc:	movge	ip, #0
   130c0:	cmp	ip, #0
   130c4:	beq	12ed4 <__assert_fail@plt+0x1b04>
   130c8:	ldrd	r4, [sp, #36]	; 0x24
   130cc:	mov	ip, #1
   130d0:	subs	r4, r8, r4
   130d4:	sbc	r5, r9, r5
   130d8:	mov	r8, r4
   130dc:	mov	r9, r5
   130e0:	b	12eec <__assert_fail@plt+0x1b1c>
   130e4:	cmp	r6, #0
   130e8:	sbcs	ip, r7, #0
   130ec:	blt	13260 <__assert_fail@plt+0x1e90>
   130f0:	ldrd	r4, [sp, #44]	; 0x2c
   130f4:	subs	r4, r4, #1
   130f8:	sbc	r5, r5, #-2147483648	; 0x80000000
   130fc:	cmp	r4, r6
   13100:	sbcs	ip, r5, r7
   13104:	movlt	ip, #1
   13108:	movge	ip, #0
   1310c:	cmp	ip, #0
   13110:	beq	12e9c <__assert_fail@plt+0x1acc>
   13114:	ldrd	r4, [sp, #44]	; 0x2c
   13118:	mov	ip, #1
   1311c:	subs	r4, r6, r4
   13120:	sbc	r5, r7, r5
   13124:	mov	r6, r4
   13128:	mov	r7, r5
   1312c:	b	12eb4 <__assert_fail@plt+0x1ae4>
   13130:	cmp	r8, #0
   13134:	sbcs	ip, r9, #0
   13138:	blt	13240 <__assert_fail@plt+0x1e70>
   1313c:	ldrd	r4, [sp, #52]	; 0x34
   13140:	subs	r4, r4, #1
   13144:	sbc	r5, r5, #-2147483648	; 0x80000000
   13148:	cmp	r4, r8
   1314c:	sbcs	ip, r5, r9
   13150:	movlt	ip, #1
   13154:	movge	ip, #0
   13158:	cmp	ip, #0
   1315c:	beq	12e64 <__assert_fail@plt+0x1a94>
   13160:	ldrd	r4, [sp, #52]	; 0x34
   13164:	mov	ip, #1
   13168:	subs	r4, r8, r4
   1316c:	sbc	r5, r9, r5
   13170:	mov	r8, r4
   13174:	mov	r9, r5
   13178:	b	12e7c <__assert_fail@plt+0x1aac>
   1317c:	cmp	r6, #0
   13180:	sbcs	ip, r7, #0
   13184:	blt	13224 <__assert_fail@plt+0x1e54>
   13188:	subs	r4, sl, #1
   1318c:	sbc	r5, fp, #-2147483648	; 0x80000000
   13190:	cmp	r4, r6
   13194:	sbcs	ip, r5, r7
   13198:	movlt	ip, #1
   1319c:	movge	ip, #0
   131a0:	cmp	ip, #0
   131a4:	beq	12e38 <__assert_fail@plt+0x1a68>
   131a8:	subs	r6, r6, sl
   131ac:	sbc	r7, r7, fp
   131b0:	mov	ip, #1
   131b4:	b	12e44 <__assert_fail@plt+0x1a74>
   131b8:	cmp	r4, #0
   131bc:	sbcs	ip, r5, #0
   131c0:	blt	13208 <__assert_fail@plt+0x1e38>
   131c4:	subs	r6, r8, #1
   131c8:	sbc	r7, r9, #-2147483648	; 0x80000000
   131cc:	cmp	r6, r4
   131d0:	sbcs	ip, r7, r5
   131d4:	movlt	ip, #1
   131d8:	movge	ip, #0
   131dc:	cmp	ip, #0
   131e0:	beq	12e18 <__assert_fail@plt+0x1a48>
   131e4:	subs	r4, r4, r8
   131e8:	sbc	r5, r5, r9
   131ec:	mov	r1, #1
   131f0:	b	12e20 <__assert_fail@plt+0x1a50>
   131f4:	add	lr, r1, #-2147483648	; 0x80000000
   131f8:	cmp	lr, ip
   131fc:	movge	lr, #0
   13200:	movlt	lr, #1
   13204:	b	12f38 <__assert_fail@plt+0x1b68>
   13208:	adds	r6, r4, #0
   1320c:	adc	r7, r5, #-2147483648	; 0x80000000
   13210:	cmp	r6, r8
   13214:	sbcs	ip, r7, r9
   13218:	movlt	ip, #1
   1321c:	movge	ip, #0
   13220:	b	131dc <__assert_fail@plt+0x1e0c>
   13224:	adds	r4, r6, #0
   13228:	adc	r5, r7, #-2147483648	; 0x80000000
   1322c:	cmp	r4, sl
   13230:	sbcs	ip, r5, fp
   13234:	movlt	ip, #1
   13238:	movge	ip, #0
   1323c:	b	131a0 <__assert_fail@plt+0x1dd0>
   13240:	ldrd	r6, [sp, #52]	; 0x34
   13244:	adds	r4, r8, #0
   13248:	adc	r5, r9, #-2147483648	; 0x80000000
   1324c:	cmp	r4, r6
   13250:	sbcs	ip, r5, r7
   13254:	movlt	ip, #1
   13258:	movge	ip, #0
   1325c:	b	13158 <__assert_fail@plt+0x1d88>
   13260:	ldrd	r8, [sp, #44]	; 0x2c
   13264:	adds	r4, r6, #0
   13268:	adc	r5, r7, #-2147483648	; 0x80000000
   1326c:	cmp	r4, r8
   13270:	sbcs	ip, r5, r9
   13274:	movlt	ip, #1
   13278:	movge	ip, #0
   1327c:	b	1310c <__assert_fail@plt+0x1d3c>
   13280:	ldrd	r6, [sp, #36]	; 0x24
   13284:	adds	r4, r8, #0
   13288:	adc	r5, r9, #-2147483648	; 0x80000000
   1328c:	cmp	r4, r6
   13290:	sbcs	ip, r5, r7
   13294:	movlt	ip, #1
   13298:	movge	ip, #0
   1329c:	b	130c0 <__assert_fail@plt+0x1cf0>
   132a0:	adds	r4, r6, #0
   132a4:	adc	r5, r7, #-2147483648	; 0x80000000
   132a8:	cmp	r4, r2
   132ac:	sbcs	ip, r5, r3
   132b0:	movlt	ip, #1
   132b4:	movge	ip, #0
   132b8:	b	13080 <__assert_fail@plt+0x1cb0>
   132bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132c0:	mov	r8, r0
   132c4:	ldr	ip, [sp, #32]
   132c8:	mov	r9, r1
   132cc:	cmp	ip, #2
   132d0:	mov	r4, r2
   132d4:	mov	r5, r3
   132d8:	ldrd	r6, [sp, #40]	; 0x28
   132dc:	bgt	13348 <__assert_fail@plt+0x1f78>
   132e0:	cmp	r6, #0
   132e4:	sbcs	r3, r7, #0
   132e8:	blt	13454 <__assert_fail@plt+0x2084>
   132ec:	cmp	r4, #0
   132f0:	sbcs	r3, r5, #0
   132f4:	blt	133b8 <__assert_fail@plt+0x1fe8>
   132f8:	add	r3, pc, #360	; 0x168
   132fc:	ldrd	r2, [r3]
   13300:	cmp	r2, r4
   13304:	sbcs	r3, r3, r5
   13308:	bge	133ec <__assert_fail@plt+0x201c>
   1330c:	mov	r1, #60	; 0x3c
   13310:	cmp	r9, #0
   13314:	umull	r2, r3, r4, r1
   13318:	mov	ip, #1
   1331c:	mla	r3, r1, r5, r3
   13320:	beq	13404 <__assert_fail@plt+0x2034>
   13324:	cmp	r2, #0
   13328:	sbcs	r1, r3, #0
   1332c:	blt	13438 <__assert_fail@plt+0x2068>
   13330:	subs	r2, r2, r6
   13334:	sbc	r3, r3, r7
   13338:	cmp	ip, #0
   1333c:	beq	13390 <__assert_fail@plt+0x1fc0>
   13340:	mov	r0, #0
   13344:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13348:	cmp	r6, #0
   1334c:	sbcs	r3, r7, #0
   13350:	bge	132ec <__assert_fail@plt+0x1f1c>
   13354:	mov	r2, #100	; 0x64
   13358:	mov	r3, #0
   1335c:	mov	r0, r4
   13360:	mov	r1, r5
   13364:	bl	2122c <__assert_fail@plt+0xfe5c>
   13368:	mov	ip, #60	; 0x3c
   1336c:	mov	r2, #100	; 0x64
   13370:	mov	r3, #0
   13374:	umull	r6, r7, r0, ip
   13378:	mov	r0, r4
   1337c:	mla	r7, ip, r1, r7
   13380:	mov	r1, r5
   13384:	bl	2122c <__assert_fail@plt+0xfe5c>
   13388:	adds	r2, r2, r6
   1338c:	adc	r3, r3, r7
   13390:	adds	r0, r2, #1440	; 0x5a0
   13394:	adc	r1, r3, #0
   13398:	cmp	r1, #0
   1339c:	cmpeq	r0, #2880	; 0xb40
   133a0:	bhi	13340 <__assert_fail@plt+0x1f70>
   133a4:	rsb	r2, r2, r2, lsl #4
   133a8:	mov	r0, #1
   133ac:	lsl	r2, r2, #2
   133b0:	str	r2, [r8]
   133b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133b8:	mvn	r3, #0
   133bc:	mvn	r2, #0
   133c0:	cmp	r5, r3
   133c4:	cmpeq	r4, r2
   133c8:	beq	133ec <__assert_fail@plt+0x201c>
   133cc:	mov	r3, r5
   133d0:	mov	r2, r4
   133d4:	mov	r0, #0
   133d8:	mov	r1, #-2147483648	; 0x80000000
   133dc:	bl	2122c <__assert_fail@plt+0xfe5c>
   133e0:	cmp	r0, #60	; 0x3c
   133e4:	sbcs	r3, r1, #0
   133e8:	blt	1330c <__assert_fail@plt+0x1f3c>
   133ec:	mov	r1, #60	; 0x3c
   133f0:	cmp	r9, #0
   133f4:	umull	r2, r3, r4, r1
   133f8:	mov	ip, #0
   133fc:	mla	r3, r1, r5, r3
   13400:	bne	13324 <__assert_fail@plt+0x1f54>
   13404:	cmp	r2, #0
   13408:	sbcs	r1, r3, #0
   1340c:	blt	1342c <__assert_fail@plt+0x205c>
   13410:	mvn	r0, #0
   13414:	subs	r0, r0, r6
   13418:	mvn	r1, #-2147483648	; 0x80000000
   1341c:	sbc	r1, r1, r7
   13420:	cmp	r0, r2
   13424:	sbcs	r1, r1, r3
   13428:	blt	13340 <__assert_fail@plt+0x1f70>
   1342c:	adds	r2, r2, r6
   13430:	adc	r3, r3, r7
   13434:	b	13338 <__assert_fail@plt+0x1f68>
   13438:	adds	r0, r2, #0
   1343c:	adc	r1, r3, #-2147483648	; 0x80000000
   13440:	cmp	r0, r6
   13444:	sbcs	r1, r1, r7
   13448:	bge	13330 <__assert_fail@plt+0x1f60>
   1344c:	mov	r0, #0
   13450:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13454:	mov	r3, #100	; 0x64
   13458:	mul	r2, r3, r5
   1345c:	umull	r4, r5, r4, r3
   13460:	add	r5, r2, r5
   13464:	b	13354 <__assert_fail@plt+0x1f84>
   13468:	eorcs	r2, r2, #536870914	; 0x20000002
   1346c:	eoreq	r2, r2, #536870914	; 0x20000002
   13470:	push	{r4, r5, lr}
   13474:	mov	r4, r0
   13478:	ldrb	r0, [r0, #188]	; 0xbc
   1347c:	sub	sp, sp, #20
   13480:	mov	r5, r1
   13484:	cmp	r0, #0
   13488:	beq	134e4 <__assert_fail@plt+0x2114>
   1348c:	ldrd	r0, [r4, #8]
   13490:	adds	r2, r0, #1
   13494:	adc	r3, r1, #0
   13498:	cmp	r3, #0
   1349c:	cmpeq	r2, #13
   134a0:	bls	1352c <__assert_fail@plt+0x215c>
   134a4:	ldr	r3, [pc, #180]	; 13560 <__assert_fail@plt+0x2190>
   134a8:	strd	r0, [sp, #8]
   134ac:	str	r3, [sp]
   134b0:	mov	r2, #1
   134b4:	mvn	r3, #0
   134b8:	mov	r1, #100	; 0x64
   134bc:	mov	r0, r5
   134c0:	bl	113c4 <__snprintf_chk@plt>
   134c4:	ldr	r3, [r4, #16]
   134c8:	cmp	r3, #6
   134cc:	bhi	134d8 <__assert_fail@plt+0x2108>
   134d0:	cmp	r0, #99	; 0x63
   134d4:	bls	13550 <__assert_fail@plt+0x2180>
   134d8:	mov	r0, r5
   134dc:	add	sp, sp, #20
   134e0:	pop	{r4, r5, pc}
   134e4:	strb	r0, [r1]
   134e8:	ldr	r3, [r4, #16]
   134ec:	cmp	r3, #6
   134f0:	bhi	134d8 <__assert_fail@plt+0x2108>
   134f4:	mov	r1, #100	; 0x64
   134f8:	mov	r2, #1
   134fc:	ldr	ip, [pc, #96]	; 13564 <__assert_fail@plt+0x2194>
   13500:	ldr	lr, [pc, #96]	; 13568 <__assert_fail@plt+0x2198>
   13504:	add	r3, ip, r3, lsl #2
   13508:	add	r2, r2, lr
   1350c:	add	r0, r5, r0
   13510:	stm	sp, {r2, r3}
   13514:	mvn	r3, #0
   13518:	mov	r2, #1
   1351c:	bl	113c4 <__snprintf_chk@plt>
   13520:	mov	r0, r5
   13524:	add	sp, sp, #20
   13528:	pop	{r4, r5, pc}
   1352c:	add	r1, r2, r2, lsl #2
   13530:	ldr	r3, [pc, #52]	; 1356c <__assert_fail@plt+0x219c>
   13534:	add	r2, r2, r1, lsl #1
   13538:	add	r3, r3, r2
   1353c:	mov	r1, #100	; 0x64
   13540:	ldr	r2, [pc, #40]	; 13570 <__assert_fail@plt+0x21a0>
   13544:	mov	r0, r5
   13548:	bl	112b0 <snprintf@plt>
   1354c:	b	134c4 <__assert_fail@plt+0x20f4>
   13550:	clz	r2, r0
   13554:	rsb	r1, r0, #100	; 0x64
   13558:	lsr	r2, r2, #5
   1355c:	b	134fc <__assert_fail@plt+0x212c>
   13560:	andeq	r2, r2, r8, ror sl
   13564:	andeq	r1, r2, r0, ror #31
   13568:	andeq	r1, r2, r4, lsr #30
   1356c:	andeq	r1, r2, r4, asr #30
   13570:	andeq	r1, r2, r0, asr #30
   13574:	push	{r4, r5, r6, r8, r9, lr}
   13578:	mov	r2, #5
   1357c:	sub	sp, sp, #16
   13580:	mov	r5, r0
   13584:	mov	r4, r1
   13588:	mov	r0, #0
   1358c:	ldr	r1, [pc, #520]	; 1379c <__assert_fail@plt+0x23cc>
   13590:	bl	11130 <dcgettext@plt>
   13594:	mov	r1, r5
   13598:	bl	12a40 <__assert_fail@plt+0x1670>
   1359c:	ldrd	r2, [r4, #96]	; 0x60
   135a0:	orrs	r1, r2, r3
   135a4:	bne	1368c <__assert_fail@plt+0x22bc>
   135a8:	ldrd	r8, [r4, #104]	; 0x68
   135ac:	orrs	r3, r8, r9
   135b0:	beq	13630 <__assert_fail@plt+0x2260>
   135b4:	ldr	r2, [pc, #484]	; 137a0 <__assert_fail@plt+0x23d0>
   135b8:	ldr	r6, [pc, #484]	; 137a4 <__assert_fail@plt+0x23d4>
   135bc:	ldr	r3, [pc, #484]	; 137a8 <__assert_fail@plt+0x23d8>
   135c0:	ldr	r0, [r6]
   135c4:	strd	r8, [sp]
   135c8:	str	r3, [sp, #8]
   135cc:	mov	r1, #1
   135d0:	bl	112ec <__fprintf_chk@plt>
   135d4:	ldrd	r8, [r4, #112]	; 0x70
   135d8:	orrs	r3, r8, r9
   135dc:	movne	r2, #0
   135e0:	bne	13764 <__assert_fail@plt+0x2394>
   135e4:	ldrd	r8, [r4, #120]	; 0x78
   135e8:	mov	r3, #0
   135ec:	orrs	r2, r8, r9
   135f0:	bne	13734 <__assert_fail@plt+0x2364>
   135f4:	ldrd	r8, [r4, #128]	; 0x80
   135f8:	orrs	r2, r8, r9
   135fc:	bne	1370c <__assert_fail@plt+0x233c>
   13600:	ldrd	r8, [r4, #136]	; 0x88
   13604:	orrs	r2, r8, r9
   13608:	bne	136e4 <__assert_fail@plt+0x2314>
   1360c:	ldr	r4, [r4, #144]	; 0x90
   13610:	asr	r5, r4, #31
   13614:	orrs	r2, r4, r5
   13618:	bne	136c0 <__assert_fail@plt+0x22f0>
   1361c:	ldr	r1, [r6]
   13620:	mov	r0, #10
   13624:	add	sp, sp, #16
   13628:	pop	{r4, r5, r6, r8, r9, lr}
   1362c:	b	11340 <fputc@plt>
   13630:	ldrd	r8, [r4, #112]	; 0x70
   13634:	orrs	r3, r8, r9
   13638:	bne	1375c <__assert_fail@plt+0x238c>
   1363c:	ldrd	r8, [r4, #120]	; 0x78
   13640:	orrs	r3, r8, r9
   13644:	bne	13790 <__assert_fail@plt+0x23c0>
   13648:	ldrd	r2, [r4, #128]	; 0x80
   1364c:	orrs	r3, r2, r3
   13650:	bne	13790 <__assert_fail@plt+0x23c0>
   13654:	ldrd	r2, [r4, #136]	; 0x88
   13658:	orrs	r3, r2, r3
   1365c:	bne	13790 <__assert_fail@plt+0x23c0>
   13660:	ldr	r0, [r4, #144]	; 0x90
   13664:	cmp	r0, #0
   13668:	bne	13790 <__assert_fail@plt+0x23c0>
   1366c:	mov	r2, #5
   13670:	ldr	r1, [pc, #308]	; 137ac <__assert_fail@plt+0x23dc>
   13674:	bl	11130 <dcgettext@plt>
   13678:	ldr	r3, [pc, #292]	; 137a4 <__assert_fail@plt+0x23d4>
   1367c:	ldr	r1, [r3]
   13680:	add	sp, sp, #16
   13684:	pop	{r4, r5, r6, r8, r9, lr}
   13688:	b	11388 <fputs@plt>
   1368c:	ldr	r6, [pc, #272]	; 137a4 <__assert_fail@plt+0x23d4>
   13690:	ldr	r1, [pc, #280]	; 137b0 <__assert_fail@plt+0x23e0>
   13694:	strd	r2, [sp]
   13698:	str	r1, [sp, #8]
   1369c:	ldr	r0, [r6]
   136a0:	ldr	r2, [pc, #248]	; 137a0 <__assert_fail@plt+0x23d0>
   136a4:	mov	r1, #1
   136a8:	bl	112ec <__fprintf_chk@plt>
   136ac:	ldrd	r8, [r4, #104]	; 0x68
   136b0:	orrs	r3, r8, r9
   136b4:	beq	135d4 <__assert_fail@plt+0x2204>
   136b8:	ldr	r2, [pc, #244]	; 137b4 <__assert_fail@plt+0x23e4>
   136bc:	b	135bc <__assert_fail@plt+0x21ec>
   136c0:	ldr	r1, [pc, #240]	; 137b8 <__assert_fail@plt+0x23e8>
   136c4:	ldr	r2, [pc, #232]	; 137b4 <__assert_fail@plt+0x23e4>
   136c8:	str	r1, [sp, #8]
   136cc:	ldr	r0, [r6]
   136d0:	strd	r4, [sp]
   136d4:	add	r2, r2, r3
   136d8:	mov	r1, #1
   136dc:	bl	112ec <__fprintf_chk@plt>
   136e0:	b	1361c <__assert_fail@plt+0x224c>
   136e4:	ldr	r1, [pc, #208]	; 137bc <__assert_fail@plt+0x23ec>
   136e8:	ldr	r2, [pc, #196]	; 137b4 <__assert_fail@plt+0x23e4>
   136ec:	str	r1, [sp, #8]
   136f0:	add	r2, r2, r3
   136f4:	ldr	r0, [r6]
   136f8:	strd	r8, [sp]
   136fc:	mov	r1, #1
   13700:	bl	112ec <__fprintf_chk@plt>
   13704:	mov	r3, #0
   13708:	b	1360c <__assert_fail@plt+0x223c>
   1370c:	ldr	r1, [pc, #172]	; 137c0 <__assert_fail@plt+0x23f0>
   13710:	ldr	r2, [pc, #156]	; 137b4 <__assert_fail@plt+0x23e4>
   13714:	str	r1, [sp, #8]
   13718:	add	r2, r2, r3
   1371c:	ldr	r0, [r6]
   13720:	strd	r8, [sp]
   13724:	mov	r1, #1
   13728:	bl	112ec <__fprintf_chk@plt>
   1372c:	mov	r3, #0
   13730:	b	13600 <__assert_fail@plt+0x2230>
   13734:	ldr	r1, [pc, #136]	; 137c4 <__assert_fail@plt+0x23f4>
   13738:	ldr	r2, [pc, #116]	; 137b4 <__assert_fail@plt+0x23e4>
   1373c:	str	r1, [sp, #8]
   13740:	add	r2, r2, r3
   13744:	ldr	r0, [r6]
   13748:	strd	r8, [sp]
   1374c:	mov	r1, #1
   13750:	bl	112ec <__fprintf_chk@plt>
   13754:	mov	r3, #0
   13758:	b	135f4 <__assert_fail@plt+0x2224>
   1375c:	ldr	r6, [pc, #64]	; 137a4 <__assert_fail@plt+0x23d4>
   13760:	mov	r2, #1
   13764:	ldr	r3, [pc, #92]	; 137c8 <__assert_fail@plt+0x23f8>
   13768:	ldr	r1, [pc, #68]	; 137b4 <__assert_fail@plt+0x23e4>
   1376c:	strd	r8, [sp]
   13770:	add	r2, r1, r2
   13774:	str	r3, [sp, #8]
   13778:	ldr	r0, [r6]
   1377c:	mov	r1, #1
   13780:	bl	112ec <__fprintf_chk@plt>
   13784:	mov	r3, #0
   13788:	ldrd	r8, [r4, #120]	; 0x78
   1378c:	b	135ec <__assert_fail@plt+0x221c>
   13790:	mov	r3, #1
   13794:	ldr	r6, [pc, #8]	; 137a4 <__assert_fail@plt+0x23d4>
   13798:	b	135ec <__assert_fail@plt+0x221c>
   1379c:	andeq	r2, r2, ip, lsl #21
   137a0:	andeq	r2, r2, r1, lsl #21
   137a4:	andeq	r4, r3, r0, lsr #3
   137a8:			; <UNDEFINED> instruction: 0x00022ab8
   137ac:	andeq	r2, r2, r0, lsr #21
   137b0:			; <UNDEFINED> instruction: 0x00022ab0
   137b4:	andeq	r2, r2, r0, lsl #21
   137b8:	ldrdeq	r2, [r2], -ip
   137bc:	andeq	r2, r2, r0, ror #21
   137c0:	ldrdeq	r2, [r2], -r4
   137c4:	andeq	r2, r2, ip, asr #21
   137c8:	andeq	r2, r2, r4, asr #21
   137cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   137d0:	sub	sp, sp, #40	; 0x28
   137d4:	mov	r4, r2
   137d8:	mov	r2, #0
   137dc:	mov	r3, r0
   137e0:	mov	r5, r1
   137e4:	str	r2, [sp, #4]
   137e8:	str	r2, [sp]
   137ec:	mov	r0, r4
   137f0:	ldr	r2, [pc, #360]	; 13960 <__assert_fail@plt+0x2590>
   137f4:	mov	r1, #100	; 0x64
   137f8:	bl	20c5c <__assert_fail@plt+0xf88c>
   137fc:	adds	r3, r5, #0
   13800:	movne	r3, #1
   13804:	cmp	r0, #99	; 0x63
   13808:	movgt	r3, #0
   1380c:	cmp	r3, #0
   13810:	beq	13820 <__assert_fail@plt+0x2450>
   13814:	ldr	r3, [r5, #176]	; 0xb0
   13818:	cmp	r3, #0
   1381c:	bne	1382c <__assert_fail@plt+0x245c>
   13820:	mov	r0, r4
   13824:	add	sp, sp, #40	; 0x28
   13828:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1382c:	ldr	r5, [r5, #24]
   13830:	ldr	r3, [pc, #300]	; 13964 <__assert_fail@plt+0x2594>
   13834:	cmp	r5, #0
   13838:	asr	r9, r5, #31
   1383c:	smull	r1, r3, r3, r5
   13840:	add	r3, r3, r5
   13844:	movge	r2, #43	; 0x2b
   13848:	rsb	r9, r9, r3, asr #11
   1384c:	movlt	r2, #45	; 0x2d
   13850:	eor	r3, r9, r9, asr #31
   13854:	sub	r3, r3, r9, asr #31
   13858:	add	r7, sp, #12
   1385c:	mov	r6, r0
   13860:	str	r2, [sp]
   13864:	str	r3, [sp, #4]
   13868:	mov	r0, r7
   1386c:	ldr	r3, [pc, #244]	; 13968 <__assert_fail@plt+0x2598>
   13870:	mov	r2, #27
   13874:	mov	r1, #1
   13878:	bl	112a4 <__sprintf_chk@plt>
   1387c:	mov	r3, #3600	; 0xe10
   13880:	add	r8, r4, r6
   13884:	mul	r3, r3, r9
   13888:	rsb	r6, r6, #100	; 0x64
   1388c:	subs	r5, r5, r3
   13890:	beq	13934 <__assert_fail@plt+0x2564>
   13894:	cmp	r5, #0
   13898:	ldr	r3, [pc, #204]	; 1396c <__assert_fail@plt+0x259c>
   1389c:	rsblt	r5, r5, #0
   138a0:	ldr	r9, [pc, #200]	; 13970 <__assert_fail@plt+0x25a0>
   138a4:	smull	r2, r3, r3, r5
   138a8:	ldr	sl, [pc, #196]	; 13974 <__assert_fail@plt+0x25a4>
   138ac:	add	r3, r3, r5
   138b0:	asr	ip, r5, #31
   138b4:	rsb	r3, ip, r3, asr #5
   138b8:	smull	r2, sl, sl, r5
   138bc:	smull	r2, r1, r9, r3
   138c0:	asr	lr, r3, #31
   138c4:	rsb	lr, lr, r1, asr #2
   138c8:	rsb	r2, r3, r3, lsl #4
   138cc:	add	lr, lr, lr, lsl #2
   138d0:	rsb	ip, ip, sl, asr #6
   138d4:	sub	r1, r3, lr, lsl #1
   138d8:	add	lr, r7, r0
   138dc:	subs	r3, r5, r2, lsl #2
   138e0:	add	ip, ip, #48	; 0x30
   138e4:	add	r2, r1, #48	; 0x30
   138e8:	mov	sl, #58	; 0x3a
   138ec:	strb	sl, [r7, r0]
   138f0:	strb	r2, [lr, #2]
   138f4:	strb	ip, [lr, #1]
   138f8:	addeq	r2, lr, #3
   138fc:	beq	1392c <__assert_fail@plt+0x255c>
   13900:	smull	r2, r9, r9, r3
   13904:	strb	sl, [lr, #3]
   13908:	asr	r2, r3, #31
   1390c:	rsb	r9, r2, r9, asr #2
   13910:	add	r2, lr, #6
   13914:	add	r1, r9, r9, lsl #2
   13918:	add	r9, r9, #48	; 0x30
   1391c:	sub	r3, r3, r1, lsl #1
   13920:	add	r3, r3, #48	; 0x30
   13924:	strb	r3, [lr, #5]
   13928:	strb	r9, [lr, #4]
   1392c:	mov	r3, #0
   13930:	strb	r3, [r2]
   13934:	ldr	r3, [pc, #60]	; 13978 <__assert_fail@plt+0x25a8>
   13938:	str	r7, [sp, #4]
   1393c:	str	r3, [sp]
   13940:	mov	r1, r6
   13944:	mov	r0, r8
   13948:	mvn	r3, #0
   1394c:	mov	r2, #1
   13950:	bl	113c4 <__snprintf_chk@plt>
   13954:	mov	r0, r4
   13958:	add	sp, sp, #40	; 0x28
   1395c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13960:	andeq	r2, r2, r8, ror #21
   13964:			; <UNDEFINED> instruction: 0x91a2b3c5
   13968:	andeq	r2, r2, r4, lsl #22
   1396c:	stmhi	r8, {r0, r3, r7, fp, pc}
   13970:	strbtvs	r6, [r6], -r7, ror #12
   13974:	blne	13b4050 <optarg@@GLIBC_2.4+0x137fea8>
   13978:	andeq	r2, r2, ip, lsl #22
   1397c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13980:	mov	r2, #5
   13984:	sub	sp, sp, #132	; 0x84
   13988:	mov	r5, r0
   1398c:	mov	r4, r1
   13990:	mov	r0, #0
   13994:	ldr	r1, [pc, #1256]	; 13e84 <__assert_fail@plt+0x2ab4>
   13998:	bl	11130 <dcgettext@plt>
   1399c:	mov	r1, r5
   139a0:	bl	12a40 <__assert_fail@plt+0x1670>
   139a4:	ldr	r3, [r4, #156]	; 0x9c
   139a8:	cmp	r3, #0
   139ac:	beq	139bc <__assert_fail@plt+0x25ec>
   139b0:	ldrb	r8, [r4, #182]	; 0xb6
   139b4:	cmp	r8, #0
   139b8:	beq	13cc0 <__assert_fail@plt+0x28f0>
   139bc:	ldrb	r2, [r4, #180]	; 0xb4
   139c0:	ldrb	r3, [r4, #187]	; 0xbb
   139c4:	cmp	r2, r3
   139c8:	beq	13b98 <__assert_fail@plt+0x27c8>
   139cc:	ldr	r5, [pc, #1204]	; 13e88 <__assert_fail@plt+0x2ab8>
   139d0:	mov	r2, #5
   139d4:	ldr	r1, [pc, #1200]	; 13e8c <__assert_fail@plt+0x2abc>
   139d8:	mov	r0, #0
   139dc:	ldr	r6, [r5]
   139e0:	bl	11130 <dcgettext@plt>
   139e4:	ldrd	r2, [r4, #40]	; 0x28
   139e8:	mov	r1, #1
   139ec:	strd	r2, [sp]
   139f0:	mov	r2, r0
   139f4:	mov	r0, r6
   139f8:	bl	112ec <__fprintf_chk@plt>
   139fc:	ldrb	r2, [r4, #180]	; 0xb4
   13a00:	mov	ip, #0
   13a04:	mov	r3, #1
   13a08:	strb	r2, [r4, #187]	; 0xbb
   13a0c:	ldr	r2, [r4, #172]	; 0xac
   13a10:	cmp	r2, #0
   13a14:	beq	13a24 <__assert_fail@plt+0x2654>
   13a18:	ldrb	r2, [r4, #185]	; 0xb9
   13a1c:	cmp	r2, #0
   13a20:	beq	13d18 <__assert_fail@plt+0x2948>
   13a24:	ldr	r2, [r4, #160]	; 0xa0
   13a28:	cmp	r2, #0
   13a2c:	beq	13a3c <__assert_fail@plt+0x266c>
   13a30:	ldrb	r2, [r4, #183]	; 0xb7
   13a34:	cmp	r2, #0
   13a38:	beq	13b08 <__assert_fail@plt+0x2738>
   13a3c:	ldr	r2, [r4, #164]	; 0xa4
   13a40:	cmp	r2, #0
   13a44:	beq	13a54 <__assert_fail@plt+0x2684>
   13a48:	ldrb	r6, [r4, #184]	; 0xb8
   13a4c:	cmp	r6, #0
   13a50:	beq	13ac4 <__assert_fail@plt+0x26f4>
   13a54:	ldr	r2, [r4, #176]	; 0xb0
   13a58:	cmp	r2, #0
   13a5c:	beq	13a6c <__assert_fail@plt+0x269c>
   13a60:	ldrb	r2, [r4, #186]	; 0xba
   13a64:	cmp	r2, #0
   13a68:	beq	13ba8 <__assert_fail@plt+0x27d8>
   13a6c:	ldrb	r2, [r4, #152]	; 0x98
   13a70:	cmp	r2, #0
   13a74:	beq	13ab0 <__assert_fail@plt+0x26e0>
   13a78:	ldr	r6, [r4, #88]	; 0x58
   13a7c:	cmp	r3, #0
   13a80:	asr	r7, r6, #31
   13a84:	bne	13cb0 <__assert_fail@plt+0x28e0>
   13a88:	mov	r2, #5
   13a8c:	ldr	r1, [pc, #1020]	; 13e90 <__assert_fail@plt+0x2ac0>
   13a90:	mov	r0, #0
   13a94:	ldr	r4, [r5]
   13a98:	bl	11130 <dcgettext@plt>
   13a9c:	strd	r6, [sp]
   13aa0:	mov	r1, #1
   13aa4:	mov	r2, r0
   13aa8:	mov	r0, r4
   13aac:	bl	112ec <__fprintf_chk@plt>
   13ab0:	ldr	r1, [r5]
   13ab4:	mov	r0, #10
   13ab8:	bl	11340 <fputc@plt>
   13abc:	add	sp, sp, #132	; 0x84
   13ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ac4:	ldr	r2, [r4, #168]	; 0xa8
   13ac8:	ldr	r3, [pc, #964]	; 13e94 <__assert_fail@plt+0x2ac4>
   13acc:	ldr	r1, [pc, #964]	; 13e98 <__assert_fail@plt+0x2ac8>
   13ad0:	cmp	r2, #0
   13ad4:	ldr	r2, [pc, #960]	; 13e9c <__assert_fail@plt+0x2acc>
   13ad8:	movne	r1, r3
   13adc:	add	r2, r2, ip
   13ae0:	ldr	r3, [r4, #20]
   13ae4:	ldr	r0, [r5]
   13ae8:	str	r1, [sp]
   13aec:	mov	r1, #1
   13af0:	bl	112ec <__fprintf_chk@plt>
   13af4:	mov	r2, #1
   13af8:	mov	ip, r6
   13afc:	mov	r3, r2
   13b00:	strb	r2, [r4, #184]	; 0xb8
   13b04:	b	13a54 <__assert_fail@plt+0x2684>
   13b08:	cmp	r3, #0
   13b0c:	bne	13dbc <__assert_fail@plt+0x29ec>
   13b10:	mov	r2, #5
   13b14:	ldr	r1, [pc, #900]	; 13ea0 <__assert_fail@plt+0x2ad0>
   13b18:	mov	r0, #0
   13b1c:	ldr	r9, [r5]
   13b20:	bl	11130 <dcgettext@plt>
   13b24:	ldrb	r2, [r4, #188]	; 0xbc
   13b28:	cmp	r2, #0
   13b2c:	mov	sl, r0
   13b30:	beq	13d74 <__assert_fail@plt+0x29a4>
   13b34:	ldrd	r0, [r4, #8]
   13b38:	adds	r2, r0, #1
   13b3c:	adc	r3, r1, #0
   13b40:	cmp	r3, #0
   13b44:	cmpeq	r2, #13
   13b48:	bhi	13dcc <__assert_fail@plt+0x29fc>
   13b4c:	add	r1, r2, r2, lsl #2
   13b50:	ldr	r3, [pc, #844]	; 13ea4 <__assert_fail@plt+0x2ad4>
   13b54:	add	r2, r2, r1, lsl #1
   13b58:	add	r8, sp, #28
   13b5c:	add	r3, r3, r2
   13b60:	mov	r0, r8
   13b64:	ldr	r2, [pc, #828]	; 13ea8 <__assert_fail@plt+0x2ad8>
   13b68:	mov	r1, #100	; 0x64
   13b6c:	bl	112b0 <snprintf@plt>
   13b70:	ldr	r3, [r4, #16]
   13b74:	cmp	r3, #6
   13b78:	bhi	13d88 <__assert_fail@plt+0x29b8>
   13b7c:	cmp	r0, #99	; 0x63
   13b80:	bhi	13d88 <__assert_fail@plt+0x29b8>
   13b84:	clz	r2, r0
   13b88:	add	lr, r8, r0
   13b8c:	lsr	r2, r2, #5
   13b90:	rsb	r1, r0, #100	; 0x64
   13b94:	b	13e00 <__assert_fail@plt+0x2a30>
   13b98:	mov	ip, #1
   13b9c:	mov	r3, #0
   13ba0:	ldr	r5, [pc, #736]	; 13e88 <__assert_fail@plt+0x2ab8>
   13ba4:	b	13a0c <__assert_fail@plt+0x263c>
   13ba8:	ldr	r6, [r4, #24]
   13bac:	ldr	r3, [pc, #760]	; 13eac <__assert_fail@plt+0x2adc>
   13bb0:	cmp	r6, #0
   13bb4:	asr	sl, r6, #31
   13bb8:	smull	r1, r3, r3, r6
   13bbc:	ldr	r7, [pc, #748]	; 13eb0 <__assert_fail@plt+0x2ae0>
   13bc0:	add	r3, r3, r6
   13bc4:	movge	r2, #43	; 0x2b
   13bc8:	rsb	sl, sl, r3, asr #11
   13bcc:	movlt	r2, #45	; 0x2d
   13bd0:	eor	r3, sl, sl, asr #31
   13bd4:	sub	r3, r3, sl, asr #31
   13bd8:	add	r8, sp, #28
   13bdc:	stm	sp, {r2, r3}
   13be0:	mov	r0, r8
   13be4:	ldr	r3, [pc, #712]	; 13eb4 <__assert_fail@plt+0x2ae4>
   13be8:	mov	r2, #27
   13bec:	mov	r1, #1
   13bf0:	add	r7, ip, r7
   13bf4:	ldr	r9, [r5]
   13bf8:	bl	112a4 <__sprintf_chk@plt>
   13bfc:	mov	r3, #3600	; 0xe10
   13c00:	mul	r3, r3, sl
   13c04:	subs	r6, r6, r3
   13c08:	beq	13c80 <__assert_fail@plt+0x28b0>
   13c0c:	cmp	r6, #0
   13c10:	ldr	r3, [pc, #672]	; 13eb8 <__assert_fail@plt+0x2ae8>
   13c14:	rsblt	r6, r6, #0
   13c18:	ldr	ip, [pc, #668]	; 13ebc <__assert_fail@plt+0x2aec>
   13c1c:	smull	r2, r3, r3, r6
   13c20:	ldr	sl, [pc, #664]	; 13ec0 <__assert_fail@plt+0x2af0>
   13c24:	add	r3, r3, r6
   13c28:	asr	r2, r6, #31
   13c2c:	rsb	r3, r2, r3, asr #5
   13c30:	smull	r1, sl, sl, r6
   13c34:	smull	r1, lr, ip, r3
   13c38:	asr	r1, r3, #31
   13c3c:	rsb	r1, r1, lr, asr #2
   13c40:	rsb	lr, r3, r3, lsl #4
   13c44:	add	r1, r1, r1, lsl #2
   13c48:	add	fp, r8, r0
   13c4c:	rsb	r2, r2, sl, asr #6
   13c50:	sub	r1, r3, r1, lsl #1
   13c54:	add	r2, r2, #48	; 0x30
   13c58:	mov	sl, #58	; 0x3a
   13c5c:	subs	r3, r6, lr, lsl #2
   13c60:	add	r1, r1, #48	; 0x30
   13c64:	strb	sl, [r8, r0]
   13c68:	strb	r2, [fp, #1]
   13c6c:	strb	r1, [fp, #2]
   13c70:	addeq	r2, fp, #3
   13c74:	bne	13e2c <__assert_fail@plt+0x2a5c>
   13c78:	mov	r3, #0
   13c7c:	strb	r3, [r2]
   13c80:	mov	r3, r8
   13c84:	mov	r2, r7
   13c88:	mov	r0, r9
   13c8c:	mov	r1, #1
   13c90:	bl	112ec <__fprintf_chk@plt>
   13c94:	ldrb	r3, [r4, #152]	; 0x98
   13c98:	mov	r2, #1
   13c9c:	strb	r2, [r4, #186]	; 0xba
   13ca0:	cmp	r3, #0
   13ca4:	beq	13ab0 <__assert_fail@plt+0x26e0>
   13ca8:	ldr	r6, [r4, #88]	; 0x58
   13cac:	asr	r7, r6, #31
   13cb0:	ldr	r1, [r5]
   13cb4:	mov	r0, #32
   13cb8:	bl	11340 <fputc@plt>
   13cbc:	b	13a88 <__assert_fail@plt+0x26b8>
   13cc0:	ldrd	r2, [r4, #64]	; 0x40
   13cc4:	ldr	r5, [pc, #444]	; 13e88 <__assert_fail@plt+0x2ab8>
   13cc8:	ldrd	r6, [r4, #56]	; 0x38
   13ccc:	mov	r1, #1
   13cd0:	ldr	r0, [r5]
   13cd4:	strd	r2, [sp, #16]
   13cd8:	ldrd	r2, [r4, #40]	; 0x28
   13cdc:	strd	r6, [sp, #8]
   13ce0:	strd	r2, [sp]
   13ce4:	ldr	r2, [pc, #472]	; 13ec4 <__assert_fail@plt+0x2af4>
   13ce8:	bl	112ec <__fprintf_chk@plt>
   13cec:	ldrb	r1, [r4, #180]	; 0xb4
   13cf0:	ldrb	r2, [r4, #187]	; 0xbb
   13cf4:	mov	r3, #1
   13cf8:	strb	r3, [r4, #182]	; 0xb6
   13cfc:	cmp	r1, r2
   13d00:	moveq	ip, r8
   13d04:	beq	13a0c <__assert_fail@plt+0x263c>
   13d08:	ldr	r1, [r5]
   13d0c:	mov	r0, #32
   13d10:	bl	11340 <fputc@plt>
   13d14:	b	139d0 <__assert_fail@plt+0x2600>
   13d18:	ldr	r0, [r4, #88]	; 0x58
   13d1c:	ldrd	r8, [r4, #80]	; 0x50
   13d20:	ldrd	r6, [r4, #72]	; 0x48
   13d24:	asr	r1, r0, #31
   13d28:	ldr	r2, [pc, #408]	; 13ec8 <__assert_fail@plt+0x2af8>
   13d2c:	strd	r0, [sp, #16]
   13d30:	strd	r8, [sp, #8]
   13d34:	add	r2, r2, ip
   13d38:	ldr	r0, [r5]
   13d3c:	mov	r1, #1
   13d40:	strd	r6, [sp]
   13d44:	bl	112ec <__fprintf_chk@plt>
   13d48:	ldr	r3, [r4, #92]	; 0x5c
   13d4c:	cmp	r3, #0
   13d50:	bne	13e5c <__assert_fail@plt+0x2a8c>
   13d54:	ldr	r1, [r4, #28]
   13d58:	cmp	r1, #1
   13d5c:	beq	13e70 <__assert_fail@plt+0x2aa0>
   13d60:	mov	r2, #1
   13d64:	mov	r3, r2
   13d68:	mov	ip, #0
   13d6c:	strb	r2, [r4, #185]	; 0xb9
   13d70:	b	13a24 <__assert_fail@plt+0x2654>
   13d74:	ldr	r3, [r4, #16]
   13d78:	strb	r2, [sp, #28]
   13d7c:	cmp	r3, #6
   13d80:	add	r8, sp, #28
   13d84:	bls	13df4 <__assert_fail@plt+0x2a24>
   13d88:	ldrd	r6, [r4, #8]
   13d8c:	mov	r2, sl
   13d90:	str	r3, [sp, #8]
   13d94:	mov	r0, r9
   13d98:	mov	r3, r8
   13d9c:	strd	r6, [sp]
   13da0:	mov	r1, #1
   13da4:	bl	112ec <__fprintf_chk@plt>
   13da8:	mov	r2, #1
   13dac:	mov	r3, r2
   13db0:	mov	ip, #0
   13db4:	strb	r2, [r4, #183]	; 0xb7
   13db8:	b	13a3c <__assert_fail@plt+0x266c>
   13dbc:	ldr	r1, [r5]
   13dc0:	mov	r0, #32
   13dc4:	bl	11340 <fputc@plt>
   13dc8:	b	13b10 <__assert_fail@plt+0x2740>
   13dcc:	ldr	r2, [pc, #248]	; 13ecc <__assert_fail@plt+0x2afc>
   13dd0:	add	r8, sp, #28
   13dd4:	mov	r3, #100	; 0x64
   13dd8:	strd	r0, [sp, #8]
   13ddc:	str	r2, [sp]
   13de0:	mov	r0, r8
   13de4:	mov	r1, r3
   13de8:	mov	r2, #1
   13dec:	bl	113c4 <__snprintf_chk@plt>
   13df0:	b	13b70 <__assert_fail@plt+0x27a0>
   13df4:	mov	lr, r8
   13df8:	mov	r1, #100	; 0x64
   13dfc:	mov	r2, #1
   13e00:	ldr	ip, [pc, #200]	; 13ed0 <__assert_fail@plt+0x2b00>
   13e04:	ldr	r0, [pc, #200]	; 13ed4 <__assert_fail@plt+0x2b04>
   13e08:	add	r3, ip, r3, lsl #2
   13e0c:	add	r2, r2, r0
   13e10:	mov	r0, lr
   13e14:	stm	sp, {r2, r3}
   13e18:	mvn	r3, #0
   13e1c:	mov	r2, #1
   13e20:	bl	113c4 <__snprintf_chk@plt>
   13e24:	ldr	r3, [r4, #16]
   13e28:	b	13d88 <__assert_fail@plt+0x29b8>
   13e2c:	smull	r2, ip, ip, r3
   13e30:	strb	sl, [fp, #3]
   13e34:	asr	r2, r3, #31
   13e38:	rsb	ip, r2, ip, asr #2
   13e3c:	add	r2, fp, #6
   13e40:	add	r1, ip, ip, lsl #2
   13e44:	add	ip, ip, #48	; 0x30
   13e48:	sub	r3, r3, r1, lsl #1
   13e4c:	add	r3, r3, #48	; 0x30
   13e50:	strb	r3, [fp, #5]
   13e54:	strb	ip, [fp, #4]
   13e58:	b	13c78 <__assert_fail@plt+0x28a8>
   13e5c:	ldr	r2, [pc, #116]	; 13ed8 <__assert_fail@plt+0x2b08>
   13e60:	mov	r1, #1
   13e64:	ldr	r0, [r5]
   13e68:	bl	112ec <__fprintf_chk@plt>
   13e6c:	b	13d54 <__assert_fail@plt+0x2984>
   13e70:	ldr	r3, [r5]
   13e74:	mov	r2, #2
   13e78:	ldr	r0, [pc, #92]	; 13edc <__assert_fail@plt+0x2b0c>
   13e7c:	bl	11184 <fwrite@plt>
   13e80:	b	13d60 <__assert_fail@plt+0x2990>
   13e84:	andeq	r2, r2, ip, lsl #21
   13e88:	andeq	r4, r3, r0, lsr #3
   13e8c:	andeq	r2, r2, ip, lsr fp
   13e90:	andeq	r2, r2, r4, lsr #23
   13e94:	andeq	r2, r2, r4, lsl fp
   13e98:	andeq	r3, r2, r0, ror #12
   13e9c:	muleq	r2, r0, fp
   13ea0:	andeq	r2, r2, r0, ror fp
   13ea4:	andeq	r1, r2, r4, asr #30
   13ea8:	andeq	r1, r2, r0, asr #30
   13eac:			; <UNDEFINED> instruction: 0x91a2b3c5
   13eb0:	muleq	r2, ip, fp
   13eb4:	andeq	r2, r2, r4, lsl #22
   13eb8:	stmhi	r8, {r0, r3, r7, fp, pc}
   13ebc:	strbtvs	r6, [r6], -r7, ror #12
   13ec0:	blne	13b459c <optarg@@GLIBC_2.4+0x13803f4>
   13ec4:	andeq	r2, r2, ip, lsl fp
   13ec8:	andeq	r2, r2, ip, asr #22
   13ecc:	andeq	r2, r2, r8, ror sl
   13ed0:	andeq	r1, r2, r0, ror #31
   13ed4:	andeq	r1, r2, r4, lsr #30
   13ed8:	andeq	r2, r2, r4, ror #22
   13edc:	andeq	r2, r2, ip, ror #22
   13ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ee4:	sub	sp, sp, #1472	; 0x5c0
   13ee8:	sub	sp, sp, #12
   13eec:	ldr	sl, [pc, #3580]	; 14cf0 <__assert_fail@plt+0x3920>
   13ef0:	mov	r3, #0
   13ef4:	add	fp, sp, #208	; 0xd0
   13ef8:	mov	r7, #38	; 0x26
   13efc:	add	r9, sp, #360	; 0x168
   13f00:	mov	r8, r3
   13f04:	str	r3, [sp, #104]	; 0x68
   13f08:	strh	r3, [sp, #208]	; 0xd0
   13f0c:	mvn	r3, #1
   13f10:	str	r0, [sp, #64]	; 0x40
   13f14:	str	r3, [sp, #52]	; 0x34
   13f18:	cmn	r7, #93	; 0x5d
   13f1c:	beq	13f6c <__assert_fail@plt+0x2b9c>
   13f20:	ldr	r3, [sp, #52]	; 0x34
   13f24:	cmn	r3, #2
   13f28:	beq	1439c <__assert_fail@plt+0x2fcc>
   13f2c:	ldr	r2, [sp, #52]	; 0x34
   13f30:	cmp	r2, #0
   13f34:	ble	142e4 <__assert_fail@plt+0x2f14>
   13f38:	ldr	r3, [pc, #3508]	; 14cf4 <__assert_fail@plt+0x3924>
   13f3c:	cmp	r2, r3
   13f40:	movle	r3, r2
   13f44:	ble	142d8 <__assert_fail@plt+0x2f08>
   13f48:	mov	r0, #2
   13f4c:	add	r3, r0, r7
   13f50:	cmp	r3, #112	; 0x70
   13f54:	bhi	13f6c <__assert_fail@plt+0x2b9c>
   13f58:	add	r3, sl, r3
   13f5c:	add	r2, r3, #1952	; 0x7a0
   13f60:	ldrsb	r2, [r2, #8]
   13f64:	cmp	r0, r2
   13f68:	beq	1430c <__assert_fail@plt+0x2f3c>
   13f6c:	add	r3, sl, r8
   13f70:	ldrb	lr, [r3, #2192]	; 0x890
   13f74:	cmp	lr, #0
   13f78:	beq	14180 <__assert_fail@plt+0x2db0>
   13f7c:	add	r3, sl, lr
   13f80:	add	r6, sp, #312	; 0x138
   13f84:	ldrb	r3, [r3, #2308]	; 0x904
   13f88:	sub	r5, r6, #8
   13f8c:	mov	r8, r5
   13f90:	rsb	ip, r3, #1
   13f94:	str	r3, [sp, #108]	; 0x6c
   13f98:	rsb	ip, ip, ip, lsl #3
   13f9c:	sub	r3, lr, #4
   13fa0:	add	ip, r9, ip, lsl #3
   13fa4:	str	r3, [sp, #112]	; 0x70
   13fa8:	mov	r7, ip
   13fac:	ldr	r3, [ip, #8]
   13fb0:	str	r5, [sp, #80]	; 0x50
   13fb4:	str	r3, [sp, #84]	; 0x54
   13fb8:	ldm	r7!, {r0, r1, r2, r3}
   13fbc:	ldrd	r4, [ip, #16]
   13fc0:	stmia	r8!, {r0, r1, r2, r3}
   13fc4:	str	r3, [sp, #88]	; 0x58
   13fc8:	ldm	r7!, {r0, r1, r2, r3}
   13fcc:	strd	r4, [sp, #56]	; 0x38
   13fd0:	stmia	r8!, {r0, r1, r2, r3}
   13fd4:	ldm	r7!, {r0, r1, r2, r3}
   13fd8:	stmia	r8!, {r0, r1, r2, r3}
   13fdc:	ldr	r3, [ip, #24]
   13fe0:	ldm	r7, {r0, r1}
   13fe4:	str	r3, [sp, #96]	; 0x60
   13fe8:	ldr	r3, [ip, #28]
   13fec:	ldr	r4, [sp, #112]	; 0x70
   13ff0:	str	r3, [sp, #100]	; 0x64
   13ff4:	ldr	r3, [ip, #32]
   13ff8:	stm	r8, {r0, r1}
   13ffc:	str	r3, [sp, #92]	; 0x5c
   14000:	ldrd	r2, [ip, #40]	; 0x28
   14004:	ldr	r7, [ip, #36]	; 0x24
   14008:	strd	r2, [sp, #72]	; 0x48
   1400c:	ldr	r3, [ip, #48]	; 0x30
   14010:	str	r3, [sp, #68]	; 0x44
   14014:	cmp	r4, #87	; 0x57
   14018:	ldrls	pc, [pc, r4, lsl #2]
   1401c:	b	16920 <__assert_fail@plt+0x5550>
   14020:	andeq	r5, r1, r4, lsl #9
   14024:	andeq	r6, r1, r0, lsr #18
   14028:	andeq	r6, r1, r0, lsr #18
   1402c:	ldrdeq	r5, [r1], -r0
   14030:			; <UNDEFINED> instruction: 0x000152bc
   14034:	andeq	r5, r1, r0, lsl #5
   14038:	strdeq	r5, [r1], -r8
   1403c:	andeq	r4, r1, r0, asr #31
   14040:	andeq	r5, r1, r8, asr r0
   14044:	andeq	r5, r1, r8, lsr #32
   14048:	andeq	r4, r1, ip, lsl #30
   1404c:	ldrdeq	r4, [r1], -ip
   14050:	andeq	r6, r1, r0, lsr #18
   14054:	andeq	r6, r1, r0, lsr #18
   14058:	andeq	r4, r1, r0, lsr #29
   1405c:	andeq	r4, r1, r8, ror #28
   14060:	andeq	r4, r1, r8, lsr #28
   14064:	andeq	r6, r1, r0, lsr #18
   14068:	andeq	r4, r1, ip, ror #27
   1406c:			; <UNDEFINED> instruction: 0x00014db4
   14070:	andeq	r4, r1, r4, ror sp
   14074:	andeq	r6, r1, r0, lsr #18
   14078:	andeq	r6, r1, r0, lsr #18
   1407c:	andeq	r4, r1, ip, lsr #26
   14080:	strdeq	r5, [r1], -r8
   14084:			; <UNDEFINED> instruction: 0x000159b4
   14088:	muleq	r1, r8, r9
   1408c:	ldrdeq	r5, [r1], -ip
   14090:	andeq	r4, r1, ip, lsr pc
   14094:	andeq	r5, r1, r4, asr #22
   14098:	ldrdeq	r5, [r1], -r0
   1409c:	andeq	r5, r1, r4, asr #21
   140a0:	andeq	r5, r1, r4, lsr #21
   140a4:	andeq	r5, r1, ip, lsl sp
   140a8:	andeq	r5, r1, r8, asr #23
   140ac:	strdeq	r5, [r1], -r0
   140b0:	strdeq	r4, [r1], -ip
   140b4:	andeq	r5, r1, ip, asr #25
   140b8:	andeq	r5, r1, r4, asr #24
   140bc:	andeq	r5, r1, r8, asr sl
   140c0:	strdeq	r5, [r1], -r8
   140c4:	andeq	r5, r1, r0, lsr #24
   140c8:	strdeq	r5, [r1], -r0
   140cc:	muleq	r1, r4, sl
   140d0:	andeq	r4, r1, ip, asr #20
   140d4:	andeq	r6, r1, r0, lsr #18
   140d8:	andeq	r4, r1, r4, ror #19
   140dc:	andeq	r4, r1, r8, lsl #19
   140e0:	andeq	r4, r1, ip, lsr #18
   140e4:	ldrdeq	r4, [r1], -r0
   140e8:	andeq	r4, r1, r0, ror r8
   140ec:	andeq	r4, r1, r0, lsl r8
   140f0:	andeq	r4, r1, ip, lsr #15
   140f4:	andeq	r4, r1, ip, asr #14
   140f8:	andeq	r4, r1, ip, ror #13
   140fc:	andeq	r4, r1, ip, lsl #13
   14100:	andeq	r4, r1, r8, asr #11
   14104:	andeq	r4, r1, ip, lsr #24
   14108:	ldrdeq	r4, [r1], -r8
   1410c:	andeq	r4, r1, r8, ror fp
   14110:	andeq	r4, r1, r8, lsl fp
   14114:			; <UNDEFINED> instruction: 0x00014ab8
   14118:			; <UNDEFINED> instruction: 0x000157b4
   1411c:	andeq	r5, r1, r0, ror r7
   14120:	andeq	r5, r1, r8, lsl r7
   14124:	andeq	r5, r1, r8, asr #13
   14128:	andeq	r5, r1, r8, ror r6
   1412c:	andeq	r5, r1, r0, lsr #12
   14130:	andeq	r5, r1, r8, asr #11
   14134:	andeq	r5, r1, r4, ror r5
   14138:	andeq	r6, r1, r0, lsr #18
   1413c:	andeq	r5, r1, r8, lsr r9
   14140:	ldrdeq	r5, [r1], -r8
   14144:	andeq	r5, r1, r4, lsl r8
   14148:	andeq	r5, r1, r8, lsl #4
   1414c:	andeq	r5, r1, ip, lsl r5
   14150:	andeq	r5, r1, r4, lsr r3
   14154:	andeq	r5, r1, r8, asr #9
   14158:	andeq	r6, r1, r0, lsr #18
   1415c:	andeq	r6, r1, r0, lsr #18
   14160:	andeq	r6, r1, r0, lsr #18
   14164:	muleq	r1, r4, r0
   14168:	andeq	r6, r1, r0, lsr #18
   1416c:	andeq	r5, r1, ip, lsr #8
   14170:	andeq	r5, r1, r4, lsl #7
   14174:	andeq	r5, r1, r8, lsl r1
   14178:	andeq	r5, r1, r8, ror #8
   1417c:	andeq	r5, r1, r8, ror #4
   14180:	ldr	r3, [sp, #104]	; 0x68
   14184:	cmp	r3, #3
   14188:	beq	142f0 <__assert_fail@plt+0x2f20>
   1418c:	add	r1, sp, #208	; 0xd0
   14190:	b	141a4 <__assert_fail@plt+0x2dd4>
   14194:	cmp	fp, r1
   14198:	beq	14228 <__assert_fail@plt+0x2e58>
   1419c:	ldrsh	r8, [fp, #-2]!
   141a0:	sub	r9, r9, #56	; 0x38
   141a4:	add	r8, sl, r8
   141a8:	ldrsb	r3, [r8, #184]	; 0xb8
   141ac:	cmn	r3, #93	; 0x5d
   141b0:	add	r2, r3, #1
   141b4:	beq	14194 <__assert_fail@plt+0x2dc4>
   141b8:	cmp	r2, #112	; 0x70
   141bc:	add	r3, sl, r2
   141c0:	bhi	14194 <__assert_fail@plt+0x2dc4>
   141c4:	ldrb	r2, [r3, #1960]	; 0x7a8
   141c8:	cmp	r2, #1
   141cc:	bne	14194 <__assert_fail@plt+0x2dc4>
   141d0:	ldrb	r8, [r3, #2076]	; 0x81c
   141d4:	cmp	r8, #0
   141d8:	beq	14194 <__assert_fail@plt+0x2dc4>
   141dc:	ldr	r3, [sp, #128]	; 0x80
   141e0:	add	r1, sp, #256	; 0x100
   141e4:	str	r3, [sp, #264]	; 0x108
   141e8:	ldrd	r2, [sp, #120]	; 0x78
   141ec:	add	r4, sp, #248	; 0xf8
   141f0:	add	r9, r9, #56	; 0x38
   141f4:	strd	r2, [r1]
   141f8:	ldm	r4!, {r0, r1, r2, r3}
   141fc:	mov	ip, r9
   14200:	mov	r5, #3
   14204:	mov	lr, fp
   14208:	stmia	ip!, {r0, r1, r2, r3}
   1420c:	str	r5, [sp, #104]	; 0x68
   14210:	ldm	r4!, {r0, r1, r2, r3}
   14214:	b	14360 <__assert_fail@plt+0x2f90>
   14218:	ldr	r1, [sp, #64]	; 0x40
   1421c:	mov	r2, r4
   14220:	mov	r3, r5
   14224:	strd	r2, [r1, #56]	; 0x38
   14228:	mov	r0, #1
   1422c:	add	sp, sp, #1472	; 0x5c0
   14230:	add	sp, sp, #12
   14234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14238:	sub	r5, r5, #43	; 0x2b
   1423c:	tst	r5, #253	; 0xfd
   14240:	bne	16214 <__assert_fail@plt+0x4e44>
   14244:	mov	r0, r1
   14248:	mov	lr, r3
   1424c:	add	r4, r4, #1
   14250:	str	r4, [ip]
   14254:	ldrb	r5, [r4]
   14258:	sub	r6, r5, #9
   1425c:	cmp	r6, #23
   14260:	bhi	1426c <__assert_fail@plt+0x2e9c>
   14264:	ands	r6, r2, r3, lsl r6
   14268:	bne	1424c <__assert_fail@plt+0x2e7c>
   1426c:	sub	r6, r5, #48	; 0x30
   14270:	cmp	r6, #9
   14274:	bhi	143b4 <__assert_fail@plt+0x2fe4>
   14278:	cmn	lr, #1
   1427c:	str	r0, [sp, #56]	; 0x38
   14280:	str	lr, [sp, #52]	; 0x34
   14284:	beq	15f28 <__assert_fail@plt+0x4b58>
   14288:	mov	r2, #0
   1428c:	mov	r3, r7
   14290:	mov	r5, r2
   14294:	mov	r7, r4
   14298:	cmp	r5, #0
   1429c:	blt	15ef4 <__assert_fail@plt+0x4b24>
   142a0:	ldr	r2, [pc, #2640]	; 14cf8 <__assert_fail@plt+0x3928>
   142a4:	cmp	r5, r2
   142a8:	bgt	142cc <__assert_fail@plt+0x2efc>
   142ac:	add	r5, r5, r5, lsl #2
   142b0:	lsl	r2, r5, #1
   142b4:	cmp	r2, #0
   142b8:	blt	15d48 <__assert_fail@plt+0x4978>
   142bc:	mvn	r1, #-2147483648	; 0x80000000
   142c0:	sub	r1, r1, r6
   142c4:	cmp	r1, r2
   142c8:	bge	15d48 <__assert_fail@plt+0x4978>
   142cc:	mov	r7, r3
   142d0:	mov	r3, #63	; 0x3f
   142d4:	str	r3, [sp, #52]	; 0x34
   142d8:	add	r3, sl, r3
   142dc:	ldrb	r0, [r3, #1680]	; 0x690
   142e0:	b	13f4c <__assert_fail@plt+0x2b7c>
   142e4:	mov	r0, #0
   142e8:	str	r0, [sp, #52]	; 0x34
   142ec:	b	13f4c <__assert_fail@plt+0x2b7c>
   142f0:	ldr	r3, [sp, #52]	; 0x34
   142f4:	cmp	r3, #0
   142f8:	mvngt	r3, #1
   142fc:	strgt	r3, [sp, #52]	; 0x34
   14300:	bgt	1418c <__assert_fail@plt+0x2dbc>
   14304:	bne	1418c <__assert_fail@plt+0x2dbc>
   14308:	b	14228 <__assert_fail@plt+0x2e58>
   1430c:	ldrb	r8, [r3, #2076]	; 0x81c
   14310:	cmp	r8, #0
   14314:	beq	14480 <__assert_fail@plt+0x30b0>
   14318:	ldr	r3, [sp, #104]	; 0x68
   1431c:	add	r1, sp, #256	; 0x100
   14320:	cmp	r3, #0
   14324:	subne	r3, r3, #1
   14328:	strne	r3, [sp, #104]	; 0x68
   1432c:	ldr	r3, [sp, #128]	; 0x80
   14330:	add	r4, sp, #248	; 0xf8
   14334:	str	r3, [sp, #264]	; 0x108
   14338:	ldrd	r2, [sp, #120]	; 0x78
   1433c:	add	r9, r9, #56	; 0x38
   14340:	mov	ip, r9
   14344:	strd	r2, [r1]
   14348:	ldm	r4!, {r0, r1, r2, r3}
   1434c:	mov	lr, fp
   14350:	mvn	r5, #1
   14354:	str	r5, [sp, #52]	; 0x34
   14358:	stmia	ip!, {r0, r1, r2, r3}
   1435c:	ldm	r4!, {r0, r1, r2, r3}
   14360:	stmia	ip!, {r0, r1, r2, r3}
   14364:	ldm	r4!, {r0, r1, r2, r3}
   14368:	stmia	ip!, {r0, r1, r2, r3}
   1436c:	ldm	r4, {r0, r1}
   14370:	stm	ip, {r0, r1}
   14374:	add	fp, lr, #2
   14378:	add	r3, sp, #246	; 0xf6
   1437c:	cmp	fp, r3
   14380:	strh	r8, [lr, #2]
   14384:	bcs	15fe4 <__assert_fail@plt+0x4c14>
   14388:	cmp	r8, #12
   1438c:	beq	15fdc <__assert_fail@plt+0x4c0c>
   14390:	add	r3, sl, r8
   14394:	ldrsb	r7, [r3, #184]	; 0xb8
   14398:	b	13f18 <__assert_fail@plt+0x2b48>
   1439c:	ldr	ip, [sp, #64]	; 0x40
   143a0:	ldr	r2, [pc, #2388]	; 14cfc <__assert_fail@plt+0x392c>
   143a4:	mov	r3, #1
   143a8:	ldr	r4, [ip]
   143ac:	mov	r1, #0
   143b0:	ldrb	r5, [r4]
   143b4:	sub	r0, r5, #9
   143b8:	cmp	r0, #23
   143bc:	bhi	143c8 <__assert_fail@plt+0x2ff8>
   143c0:	ands	r0, r2, r3, lsl r0
   143c4:	bne	1444c <__assert_fail@plt+0x307c>
   143c8:	sub	r6, r5, #48	; 0x30
   143cc:	cmp	r6, #9
   143d0:	bls	14238 <__assert_fail@plt+0x2e68>
   143d4:	sub	r0, r5, #43	; 0x2b
   143d8:	tst	r0, #253	; 0xfd
   143dc:	beq	14468 <__assert_fail@plt+0x3098>
   143e0:	cmp	r5, #65	; 0x41
   143e4:	bcc	143fc <__assert_fail@plt+0x302c>
   143e8:	cmp	r5, #90	; 0x5a
   143ec:	bls	15fec <__assert_fail@plt+0x4c1c>
   143f0:	sub	r0, r5, #97	; 0x61
   143f4:	cmp	r0, #25
   143f8:	bls	15fec <__assert_fail@plt+0x4c1c>
   143fc:	cmp	r5, #40	; 0x28
   14400:	bne	16820 <__assert_fail@plt+0x5450>
   14404:	mov	r5, #0
   14408:	b	14410 <__assert_fail@plt+0x3040>
   1440c:	mov	r4, lr
   14410:	add	lr, r4, #1
   14414:	str	lr, [ip]
   14418:	ldrb	r0, [lr, #-1]
   1441c:	cmp	r0, #0
   14420:	beq	142e8 <__assert_fail@plt+0x2f18>
   14424:	cmp	r0, #40	; 0x28
   14428:	addeq	r5, r5, #1
   1442c:	beq	14438 <__assert_fail@plt+0x3068>
   14430:	cmp	r0, #41	; 0x29
   14434:	subeq	r5, r5, #1
   14438:	cmp	r5, #0
   1443c:	bne	1440c <__assert_fail@plt+0x303c>
   14440:	ldrb	r5, [r4, #1]
   14444:	mov	r4, lr
   14448:	b	143b4 <__assert_fail@plt+0x2fe4>
   1444c:	add	r4, r4, #1
   14450:	str	r4, [ip]
   14454:	ldrb	r5, [r4]
   14458:	sub	r0, r5, #9
   1445c:	cmp	r0, #23
   14460:	bhi	143c8 <__assert_fail@plt+0x2ff8>
   14464:	b	143c0 <__assert_fail@plt+0x2ff0>
   14468:	cmp	r5, #45	; 0x2d
   1446c:	moveq	r0, #1
   14470:	movne	r0, #0
   14474:	mvneq	lr, #0
   14478:	movne	lr, #1
   1447c:	b	1424c <__assert_fail@plt+0x2e7c>
   14480:	add	lr, r9, #56	; 0x38
   14484:	add	r6, sp, #312	; 0x138
   14488:	ldm	lr!, {r0, r1, r2, r3}
   1448c:	sub	ip, r6, #8
   14490:	ldr	r4, [r9, #64]	; 0x40
   14494:	str	ip, [sp, #80]	; 0x50
   14498:	stmia	ip!, {r0, r1, r2, r3}
   1449c:	ldm	lr!, {r0, r1, r2, r3}
   144a0:	str	r4, [sp, #84]	; 0x54
   144a4:	ldr	r4, [r9, #68]	; 0x44
   144a8:	stmia	ip!, {r0, r1, r2, r3}
   144ac:	str	r4, [sp, #88]	; 0x58
   144b0:	ldrd	r4, [r9, #72]	; 0x48
   144b4:	ldm	lr!, {r0, r1, r2, r3}
   144b8:	strd	r4, [sp, #56]	; 0x38
   144bc:	ldr	r4, [r9, #80]	; 0x50
   144c0:	str	r8, [sp, #108]	; 0x6c
   144c4:	str	r4, [sp, #96]	; 0x60
   144c8:	stmia	ip!, {r0, r1, r2, r3}
   144cc:	ldr	r3, [r9, #84]	; 0x54
   144d0:	ldm	lr, {r0, r1}
   144d4:	str	r3, [sp, #100]	; 0x64
   144d8:	ldr	r3, [r9, #88]	; 0x58
   144dc:	stm	ip, {r0, r1}
   144e0:	str	r3, [sp, #92]	; 0x5c
   144e4:	ldrd	r2, [r9, #96]	; 0x60
   144e8:	ldr	r7, [r9, #92]	; 0x5c
   144ec:	ldrd	r0, [sp, #56]	; 0x38
   144f0:	strd	r2, [sp, #72]	; 0x48
   144f4:	ldr	r2, [sp, #84]	; 0x54
   144f8:	ldr	r3, [r9, #104]	; 0x68
   144fc:	str	r3, [sp, #68]	; 0x44
   14500:	str	r2, [r6]
   14504:	ldr	r2, [sp, #88]	; 0x58
   14508:	ldrsh	lr, [sp, #108]	; 0x6c
   1450c:	str	r2, [r6, #4]
   14510:	ldr	r2, [sp, #96]	; 0x60
   14514:	strd	r0, [r6, #8]
   14518:	str	r2, [r6, #16]
   1451c:	ldr	r2, [sp, #100]	; 0x64
   14520:	ldrd	r0, [sp, #72]	; 0x48
   14524:	str	r2, [r6, #20]
   14528:	ldr	r2, [sp, #92]	; 0x5c
   1452c:	ldr	ip, [sp, #80]	; 0x50
   14530:	str	r2, [r6, #24]
   14534:	rsb	r3, lr, lr, lsl #3
   14538:	ldr	r2, [sp, #68]	; 0x44
   1453c:	str	r7, [r6, #28]
   14540:	strd	r0, [r6, #32]
   14544:	str	r2, [sp, #352]	; 0x160
   14548:	sub	r9, r9, r3, lsl #3
   1454c:	ldm	ip!, {r0, r1, r2, r3}
   14550:	add	r9, r9, #56	; 0x38
   14554:	mov	r4, r9
   14558:	add	r8, sl, r8
   1455c:	stmia	r4!, {r0, r1, r2, r3}
   14560:	sub	lr, fp, lr, lsl #1
   14564:	ldm	ip!, {r0, r1, r2, r3}
   14568:	stmia	r4!, {r0, r1, r2, r3}
   1456c:	ldm	ip!, {r0, r1, r2, r3}
   14570:	ldrsh	r5, [lr]
   14574:	stmia	r4!, {r0, r1, r2, r3}
   14578:	ldrb	r3, [r8, #2400]	; 0x960
   1457c:	ldm	ip, {r0, r1}
   14580:	sub	r3, r3, #28
   14584:	add	r2, sl, r3
   14588:	add	r2, r2, #2480	; 0x9b0
   1458c:	stm	r4, {r0, r1}
   14590:	ldrsb	r2, [r2, #12]
   14594:	add	r2, r2, r5
   14598:	cmp	r2, #112	; 0x70
   1459c:	bhi	145b8 <__assert_fail@plt+0x31e8>
   145a0:	add	r2, sl, r2
   145a4:	add	r1, r2, #1952	; 0x7a0
   145a8:	ldrsb	r1, [r1, #8]
   145ac:	cmp	r1, r5
   145b0:	ldrbeq	r8, [r2, #2076]	; 0x81c
   145b4:	beq	14374 <__assert_fail@plt+0x2fa4>
   145b8:	add	r3, sl, r3
   145bc:	add	r3, r3, #2512	; 0x9d0
   145c0:	ldrsb	r8, [r3, #8]
   145c4:	b	14374 <__assert_fail@plt+0x2fa4>
   145c8:	mov	r2, #56	; 0x38
   145cc:	mov	r1, #0
   145d0:	ldr	r0, [sp, #80]	; 0x50
   145d4:	bl	112c8 <memset@plt>
   145d8:	ldrd	r2, [r9]
   145dc:	cmp	r2, #0
   145e0:	strd	r2, [sp, #56]	; 0x38
   145e4:	sbcs	r3, r3, #0
   145e8:	blt	163d8 <__assert_fail@plt+0x5008>
   145ec:	ldrd	r2, [sp, #56]	; 0x38
   145f0:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   145f4:	orrs	r3, r2, r3
   145f8:	beq	14630 <__assert_fail@plt+0x3260>
   145fc:	cmp	r4, #0
   14600:	sbcs	r3, r5, #0
   14604:	blt	16740 <__assert_fail@plt+0x5370>
   14608:	ldrd	r2, [sp, #56]	; 0x38
   1460c:	mvn	r0, #0
   14610:	mvn	r1, #-2147483648	; 0x80000000
   14614:	bl	2122c <__assert_fail@plt+0xfe5c>
   14618:	cmp	r0, r4
   1461c:	sbcs	r3, r1, r5
   14620:	movlt	r3, #1
   14624:	movge	r3, #0
   14628:	cmp	r3, #0
   1462c:	bne	14228 <__assert_fail@plt+0x2e58>
   14630:	ldrd	r0, [sp, #56]	; 0x38
   14634:	mov	r8, #60	; 0x3c
   14638:	umull	r2, r3, r4, r0
   1463c:	mul	ip, r4, r1
   14640:	strd	r2, [sp, #56]	; 0x38
   14644:	mla	r3, r0, r5, ip
   14648:	ldr	r2, [sp, #60]	; 0x3c
   1464c:	mov	r0, #0
   14650:	mov	r1, #0
   14654:	add	r3, r3, r2
   14658:	str	r3, [sp, #60]	; 0x3c
   1465c:	str	r0, [sp, #84]	; 0x54
   14660:	mov	r3, #0
   14664:	strd	r0, [sp, #72]	; 0x48
   14668:	str	r0, [sp, #92]	; 0x5c
   1466c:	mov	r7, r1
   14670:	str	r0, [sp, #96]	; 0x60
   14674:	str	r1, [sp, #100]	; 0x64
   14678:	str	r1, [sp, #88]	; 0x58
   1467c:	str	r3, [sp, #68]	; 0x44
   14680:	ldr	r2, [sp, #84]	; 0x54
   14684:	ldrd	r0, [sp, #56]	; 0x38
   14688:	b	14500 <__assert_fail@plt+0x3130>
   1468c:	mov	r4, #0
   14690:	mov	r5, #0
   14694:	mov	r2, #56	; 0x38
   14698:	mov	r1, #0
   1469c:	ldr	r0, [sp, #80]	; 0x50
   146a0:	strd	r4, [sp, #72]	; 0x48
   146a4:	bl	112c8 <memset@plt>
   146a8:	mov	r2, r4
   146ac:	mov	r3, r5
   146b0:	str	r4, [sp, #92]	; 0x5c
   146b4:	strd	r2, [sp, #56]	; 0x38
   146b8:	mov	r3, #0
   146bc:	str	r3, [sp, #68]	; 0x44
   146c0:	mov	r3, #1
   146c4:	str	r3, [sp, #84]	; 0x54
   146c8:	mov	r3, #0
   146cc:	mov	r7, r5
   146d0:	str	r4, [sp, #96]	; 0x60
   146d4:	str	r5, [sp, #100]	; 0x64
   146d8:	mov	r8, #59	; 0x3b
   146dc:	str	r3, [sp, #88]	; 0x58
   146e0:	ldr	r2, [sp, #84]	; 0x54
   146e4:	ldrd	r0, [sp, #56]	; 0x38
   146e8:	b	14500 <__assert_fail@plt+0x3130>
   146ec:	mov	r4, #0
   146f0:	mov	r5, #0
   146f4:	mov	r2, #56	; 0x38
   146f8:	mov	r1, #0
   146fc:	ldr	r0, [sp, #80]	; 0x50
   14700:	strd	r4, [sp, #72]	; 0x48
   14704:	bl	112c8 <memset@plt>
   14708:	mov	r2, r4
   1470c:	mov	r3, r5
   14710:	str	r4, [sp, #92]	; 0x5c
   14714:	strd	r2, [sp, #56]	; 0x38
   14718:	ldr	r3, [r9, #-48]	; 0xffffffd0
   1471c:	mov	r7, r5
   14720:	str	r3, [sp, #84]	; 0x54
   14724:	ldr	r3, [r9, #-44]	; 0xffffffd4
   14728:	str	r4, [sp, #96]	; 0x60
   1472c:	str	r3, [sp, #88]	; 0x58
   14730:	mov	r3, #0
   14734:	str	r5, [sp, #100]	; 0x64
   14738:	mov	r8, #58	; 0x3a
   1473c:	str	r3, [sp, #68]	; 0x44
   14740:	ldr	r2, [sp, #84]	; 0x54
   14744:	ldrd	r0, [sp, #56]	; 0x38
   14748:	b	14500 <__assert_fail@plt+0x3130>
   1474c:	mov	r4, #0
   14750:	mov	r5, #0
   14754:	mov	r2, #56	; 0x38
   14758:	mov	r1, #0
   1475c:	ldr	r0, [sp, #80]	; 0x50
   14760:	strd	r4, [sp, #72]	; 0x48
   14764:	bl	112c8 <memset@plt>
   14768:	mov	r2, r4
   1476c:	mov	r3, r5
   14770:	str	r4, [sp, #92]	; 0x5c
   14774:	strd	r2, [sp, #56]	; 0x38
   14778:	ldr	r3, [r9, #-56]	; 0xffffffc8
   1477c:	mov	r7, r5
   14780:	str	r3, [sp, #84]	; 0x54
   14784:	ldr	r3, [r9, #-52]	; 0xffffffcc
   14788:	str	r4, [sp, #96]	; 0x60
   1478c:	str	r3, [sp, #88]	; 0x58
   14790:	mov	r3, #0
   14794:	str	r5, [sp, #100]	; 0x64
   14798:	mov	r8, #57	; 0x39
   1479c:	str	r3, [sp, #68]	; 0x44
   147a0:	ldr	r2, [sp, #84]	; 0x54
   147a4:	ldrd	r0, [sp, #56]	; 0x38
   147a8:	b	14500 <__assert_fail@plt+0x3130>
   147ac:	mov	r2, #56	; 0x38
   147b0:	mov	r1, #0
   147b4:	ldr	r0, [sp, #80]	; 0x50
   147b8:	bl	112c8 <memset@plt>
   147bc:	mov	r2, #1
   147c0:	mov	r3, #0
   147c4:	mov	r0, #0
   147c8:	mov	r1, #0
   147cc:	strd	r2, [r6, #-8]
   147d0:	mov	r3, r1
   147d4:	mov	r2, r0
   147d8:	str	r3, [sp, #100]	; 0x64
   147dc:	strd	r2, [sp, #56]	; 0x38
   147e0:	str	r3, [sp, #88]	; 0x58
   147e4:	mov	r3, #0
   147e8:	strd	r0, [sp, #72]	; 0x48
   147ec:	str	r0, [sp, #92]	; 0x5c
   147f0:	mov	r7, r1
   147f4:	str	r0, [sp, #96]	; 0x60
   147f8:	str	r0, [sp, #84]	; 0x54
   147fc:	mov	r2, r0
   14800:	mov	r8, #56	; 0x38
   14804:	str	r3, [sp, #68]	; 0x44
   14808:	ldrd	r0, [sp, #56]	; 0x38
   1480c:	b	14500 <__assert_fail@plt+0x3130>
   14810:	mov	r2, #56	; 0x38
   14814:	mov	r1, #0
   14818:	ldr	r0, [sp, #80]	; 0x50
   1481c:	bl	112c8 <memset@plt>
   14820:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14824:	mov	r0, #0
   14828:	mov	r1, #0
   1482c:	strd	r2, [r6, #-8]
   14830:	mov	r2, r0
   14834:	mov	r3, r1
   14838:	mov	r7, r1
   1483c:	strd	r2, [sp, #56]	; 0x38
   14840:	mov	r3, #0
   14844:	strd	r0, [sp, #72]	; 0x48
   14848:	str	r0, [sp, #92]	; 0x5c
   1484c:	str	r0, [sp, #96]	; 0x60
   14850:	str	r0, [sp, #84]	; 0x54
   14854:	mov	r2, r0
   14858:	str	r7, [sp, #100]	; 0x64
   1485c:	str	r7, [sp, #88]	; 0x58
   14860:	mov	r8, #55	; 0x37
   14864:	str	r3, [sp, #68]	; 0x44
   14868:	ldrd	r0, [sp, #56]	; 0x38
   1486c:	b	14500 <__assert_fail@plt+0x3130>
   14870:	mov	r2, #56	; 0x38
   14874:	mov	r1, #0
   14878:	ldr	r0, [sp, #80]	; 0x50
   1487c:	bl	112c8 <memset@plt>
   14880:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   14884:	mov	r0, #0
   14888:	mov	r1, #0
   1488c:	strd	r2, [r6, #-8]
   14890:	mov	r2, r0
   14894:	mov	r3, r1
   14898:	mov	r7, r1
   1489c:	strd	r2, [sp, #56]	; 0x38
   148a0:	mov	r3, #0
   148a4:	strd	r0, [sp, #72]	; 0x48
   148a8:	str	r0, [sp, #92]	; 0x5c
   148ac:	str	r0, [sp, #96]	; 0x60
   148b0:	str	r0, [sp, #84]	; 0x54
   148b4:	mov	r2, r0
   148b8:	str	r7, [sp, #100]	; 0x64
   148bc:	str	r7, [sp, #88]	; 0x58
   148c0:	mov	r8, #54	; 0x36
   148c4:	str	r3, [sp, #68]	; 0x44
   148c8:	ldrd	r0, [sp, #56]	; 0x38
   148cc:	b	14500 <__assert_fail@plt+0x3130>
   148d0:	mov	r1, #1
   148d4:	ldrd	r2, [r9]
   148d8:	str	r1, [sp, #44]	; 0x2c
   148dc:	ldr	r1, [r9, #48]	; 0x30
   148e0:	ldr	r0, [sp, #64]	; 0x40
   148e4:	str	r1, [sp, #40]	; 0x28
   148e8:	ldrd	r4, [r9, #40]	; 0x28
   148ec:	strd	r4, [sp, #32]
   148f0:	ldrd	r4, [r9, #32]
   148f4:	strd	r4, [sp, #24]
   148f8:	ldrd	r4, [r9, #24]
   148fc:	strd	r4, [sp, #16]
   14900:	ldrd	r4, [r9, #16]
   14904:	strd	r4, [sp, #8]
   14908:	ldrd	r4, [r9, #8]
   1490c:	strd	r4, [sp]
   14910:	bl	12a98 <__assert_fail@plt+0x16c8>
   14914:	cmp	r0, #0
   14918:	beq	14228 <__assert_fail@plt+0x2e58>
   1491c:	mov	r8, #53	; 0x35
   14920:	ldr	r2, [sp, #84]	; 0x54
   14924:	ldrd	r0, [sp, #56]	; 0x38
   14928:	b	14500 <__assert_fail@plt+0x3130>
   1492c:	mov	r1, #1
   14930:	ldrd	r2, [r9]
   14934:	str	r1, [sp, #44]	; 0x2c
   14938:	ldr	r1, [r9, #48]	; 0x30
   1493c:	ldr	r0, [sp, #64]	; 0x40
   14940:	str	r1, [sp, #40]	; 0x28
   14944:	ldrd	r4, [r9, #40]	; 0x28
   14948:	strd	r4, [sp, #32]
   1494c:	ldrd	r4, [r9, #32]
   14950:	strd	r4, [sp, #24]
   14954:	ldrd	r4, [r9, #24]
   14958:	strd	r4, [sp, #16]
   1495c:	ldrd	r4, [r9, #16]
   14960:	strd	r4, [sp, #8]
   14964:	ldrd	r4, [r9, #8]
   14968:	strd	r4, [sp]
   1496c:	bl	12a98 <__assert_fail@plt+0x16c8>
   14970:	cmp	r0, #0
   14974:	beq	14228 <__assert_fail@plt+0x2e58>
   14978:	mov	r8, #52	; 0x34
   1497c:	ldr	r2, [sp, #84]	; 0x54
   14980:	ldrd	r0, [sp, #56]	; 0x38
   14984:	b	14500 <__assert_fail@plt+0x3130>
   14988:	ldr	r1, [r9]
   1498c:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   14990:	str	r1, [sp, #44]	; 0x2c
   14994:	ldr	r1, [r9, #-8]
   14998:	ldr	r0, [sp, #64]	; 0x40
   1499c:	str	r1, [sp, #40]	; 0x28
   149a0:	ldrd	r4, [r9, #-16]
   149a4:	strd	r4, [sp, #32]
   149a8:	ldrd	r4, [r9, #-24]	; 0xffffffe8
   149ac:	strd	r4, [sp, #24]
   149b0:	ldrd	r4, [r9, #-32]	; 0xffffffe0
   149b4:	strd	r4, [sp, #16]
   149b8:	ldrd	r4, [r9, #-40]	; 0xffffffd8
   149bc:	strd	r4, [sp, #8]
   149c0:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   149c4:	strd	r4, [sp]
   149c8:	bl	12a98 <__assert_fail@plt+0x16c8>
   149cc:	cmp	r0, #0
   149d0:	beq	14228 <__assert_fail@plt+0x2e58>
   149d4:	mov	r8, #51	; 0x33
   149d8:	ldr	r2, [sp, #84]	; 0x54
   149dc:	ldrd	r0, [sp, #56]	; 0x38
   149e0:	b	14500 <__assert_fail@plt+0x3130>
   149e4:	ldr	r3, [sp, #64]	; 0x40
   149e8:	sub	lr, r9, #112	; 0x70
   149ec:	add	ip, r3, #32
   149f0:	ldm	lr!, {r0, r1, r2, r3}
   149f4:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   149f8:	stmia	ip!, {r0, r1, r2, r3}
   149fc:	cmp	r5, #-2147483648	; 0x80000000
   14a00:	ldm	lr, {r0, r1}
   14a04:	cmpeq	r4, #0
   14a08:	stm	ip, {r0, r1}
   14a0c:	beq	14218 <__assert_fail@plt+0x2e48>
   14a10:	ldrd	r2, [r9, #8]
   14a14:	rsbs	r0, r4, #0
   14a18:	ldr	ip, [sp, #64]	; 0x40
   14a1c:	rsc	r1, r5, #0
   14a20:	cmp	r3, #-2147483648	; 0x80000000
   14a24:	cmpeq	r2, #0
   14a28:	strd	r0, [ip, #56]	; 0x38
   14a2c:	beq	16374 <__assert_fail@plt+0x4fa4>
   14a30:	rsbs	r2, r2, #0
   14a34:	rsc	r3, r3, #0
   14a38:	mov	r8, #50	; 0x32
   14a3c:	strd	r2, [ip, #64]	; 0x40
   14a40:	ldrd	r0, [sp, #56]	; 0x38
   14a44:	ldr	r2, [sp, #84]	; 0x54
   14a48:	b	14500 <__assert_fail@plt+0x3130>
   14a4c:	ldr	r4, [sp, #64]	; 0x40
   14a50:	mov	lr, r9
   14a54:	add	ip, r4, #32
   14a58:	str	ip, [sp, #112]	; 0x70
   14a5c:	mov	ip, r4
   14a60:	ldrd	r4, [r9, #-104]	; 0xffffff98
   14a64:	ldm	lr!, {r0, r1, r2, r3}
   14a68:	mov	r8, #48	; 0x30
   14a6c:	strd	r4, [ip, #64]	; 0x40
   14a70:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   14a74:	strd	r4, [ip, #56]	; 0x38
   14a78:	ldr	ip, [sp, #112]	; 0x70
   14a7c:	stmia	ip!, {r0, r1, r2, r3}
   14a80:	ldm	lr, {r0, r1}
   14a84:	ldr	r2, [sp, #84]	; 0x54
   14a88:	stm	ip, {r0, r1}
   14a8c:	ldrd	r0, [sp, #56]	; 0x38
   14a90:	b	14500 <__assert_fail@plt+0x3130>
   14a94:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14a98:	ldrd	r0, [r9]
   14a9c:	ldr	ip, [sp, #64]	; 0x40
   14aa0:	mov	r8, #47	; 0x2f
   14aa4:	strd	r2, [ip, #64]	; 0x40
   14aa8:	strd	r0, [ip, #56]	; 0x38
   14aac:	ldr	r2, [sp, #84]	; 0x54
   14ab0:	ldrd	r0, [sp, #56]	; 0x38
   14ab4:	b	14500 <__assert_fail@plt+0x3130>
   14ab8:	mov	r4, #0
   14abc:	mov	r5, #0
   14ac0:	mov	r2, #56	; 0x38
   14ac4:	mov	r1, #0
   14ac8:	ldr	r0, [sp, #80]	; 0x50
   14acc:	strd	r4, [sp, #72]	; 0x48
   14ad0:	bl	112c8 <memset@plt>
   14ad4:	mov	r2, r4
   14ad8:	mov	r3, r5
   14adc:	str	r4, [sp, #92]	; 0x5c
   14ae0:	strd	r2, [sp, #56]	; 0x38
   14ae4:	mov	r3, #0
   14ae8:	str	r3, [sp, #68]	; 0x44
   14aec:	mov	r3, #1
   14af0:	str	r3, [sp, #96]	; 0x60
   14af4:	mov	r3, #0
   14af8:	mov	r7, r5
   14afc:	str	r4, [sp, #84]	; 0x54
   14b00:	str	r5, [sp, #88]	; 0x58
   14b04:	mov	r8, #65	; 0x41
   14b08:	str	r3, [sp, #100]	; 0x64
   14b0c:	mov	r2, r4
   14b10:	ldrd	r0, [sp, #56]	; 0x38
   14b14:	b	14500 <__assert_fail@plt+0x3130>
   14b18:	mov	r4, #0
   14b1c:	mov	r5, #0
   14b20:	mov	r2, #56	; 0x38
   14b24:	mov	r1, #0
   14b28:	ldr	r0, [sp, #80]	; 0x50
   14b2c:	strd	r4, [sp, #72]	; 0x48
   14b30:	bl	112c8 <memset@plt>
   14b34:	mov	r2, r4
   14b38:	mov	r3, r5
   14b3c:	str	r4, [sp, #92]	; 0x5c
   14b40:	strd	r2, [sp, #56]	; 0x38
   14b44:	ldr	r3, [r9, #-48]	; 0xffffffd0
   14b48:	mov	r7, r5
   14b4c:	str	r3, [sp, #96]	; 0x60
   14b50:	ldr	r3, [r9, #-44]	; 0xffffffd4
   14b54:	str	r4, [sp, #84]	; 0x54
   14b58:	str	r3, [sp, #100]	; 0x64
   14b5c:	mov	r3, #0
   14b60:	str	r5, [sp, #88]	; 0x58
   14b64:	mov	r8, #64	; 0x40
   14b68:	str	r3, [sp, #68]	; 0x44
   14b6c:	mov	r2, r4
   14b70:	ldrd	r0, [sp, #56]	; 0x38
   14b74:	b	14500 <__assert_fail@plt+0x3130>
   14b78:	mov	r4, #0
   14b7c:	mov	r5, #0
   14b80:	mov	r2, #56	; 0x38
   14b84:	mov	r1, #0
   14b88:	ldr	r0, [sp, #80]	; 0x50
   14b8c:	strd	r4, [sp, #72]	; 0x48
   14b90:	bl	112c8 <memset@plt>
   14b94:	mov	r2, r4
   14b98:	mov	r3, r5
   14b9c:	str	r4, [sp, #92]	; 0x5c
   14ba0:	strd	r2, [sp, #56]	; 0x38
   14ba4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   14ba8:	mov	r7, r5
   14bac:	str	r3, [sp, #96]	; 0x60
   14bb0:	ldr	r3, [r9, #-52]	; 0xffffffcc
   14bb4:	str	r4, [sp, #84]	; 0x54
   14bb8:	str	r3, [sp, #100]	; 0x64
   14bbc:	mov	r3, #0
   14bc0:	str	r5, [sp, #88]	; 0x58
   14bc4:	mov	r8, #63	; 0x3f
   14bc8:	str	r3, [sp, #68]	; 0x44
   14bcc:	mov	r2, r4
   14bd0:	ldrd	r0, [sp, #56]	; 0x38
   14bd4:	b	14500 <__assert_fail@plt+0x3130>
   14bd8:	mov	r4, #0
   14bdc:	mov	r5, #0
   14be0:	mov	r2, #56	; 0x38
   14be4:	mov	r1, #0
   14be8:	ldr	r0, [sp, #80]	; 0x50
   14bec:	strd	r4, [sp, #72]	; 0x48
   14bf0:	bl	112c8 <memset@plt>
   14bf4:	ldrd	r2, [r9]
   14bf8:	str	r4, [sp, #92]	; 0x5c
   14bfc:	mov	r7, r5
   14c00:	strd	r2, [sp, #56]	; 0x38
   14c04:	mov	r3, #0
   14c08:	str	r4, [sp, #96]	; 0x60
   14c0c:	str	r5, [sp, #100]	; 0x64
   14c10:	str	r4, [sp, #84]	; 0x54
   14c14:	str	r5, [sp, #88]	; 0x58
   14c18:	mov	r8, #62	; 0x3e
   14c1c:	str	r3, [sp, #68]	; 0x44
   14c20:	mov	r2, r4
   14c24:	ldrd	r0, [sp, #56]	; 0x38
   14c28:	b	14500 <__assert_fail@plt+0x3130>
   14c2c:	mov	r2, #56	; 0x38
   14c30:	mov	r1, #0
   14c34:	ldr	r0, [sp, #80]	; 0x50
   14c38:	bl	112c8 <memset@plt>
   14c3c:	ldrd	r2, [r9]
   14c40:	cmp	r2, #0
   14c44:	strd	r2, [sp, #56]	; 0x38
   14c48:	sbcs	r3, r3, #0
   14c4c:	blt	1652c <__assert_fail@plt+0x515c>
   14c50:	ldrd	r2, [sp, #56]	; 0x38
   14c54:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   14c58:	orrs	r3, r2, r3
   14c5c:	beq	14c94 <__assert_fail@plt+0x38c4>
   14c60:	cmp	r4, #0
   14c64:	sbcs	r3, r5, #0
   14c68:	blt	16700 <__assert_fail@plt+0x5330>
   14c6c:	ldrd	r2, [sp, #56]	; 0x38
   14c70:	mvn	r0, #0
   14c74:	mvn	r1, #-2147483648	; 0x80000000
   14c78:	bl	2122c <__assert_fail@plt+0xfe5c>
   14c7c:	cmp	r0, r4
   14c80:	sbcs	r3, r1, r5
   14c84:	movlt	r3, #1
   14c88:	movge	r3, #0
   14c8c:	cmp	r3, #0
   14c90:	bne	14228 <__assert_fail@plt+0x2e58>
   14c94:	ldrd	r0, [sp, #56]	; 0x38
   14c98:	mov	r8, #61	; 0x3d
   14c9c:	umull	r2, r3, r4, r0
   14ca0:	mul	ip, r4, r1
   14ca4:	strd	r2, [sp, #56]	; 0x38
   14ca8:	mla	r3, r0, r5, ip
   14cac:	ldr	r2, [sp, #60]	; 0x3c
   14cb0:	mov	r0, #0
   14cb4:	mov	r1, #0
   14cb8:	add	r3, r3, r2
   14cbc:	str	r3, [sp, #60]	; 0x3c
   14cc0:	str	r0, [sp, #84]	; 0x54
   14cc4:	mov	r3, #0
   14cc8:	strd	r0, [sp, #72]	; 0x48
   14ccc:	str	r0, [sp, #92]	; 0x5c
   14cd0:	mov	r7, r1
   14cd4:	str	r0, [sp, #96]	; 0x60
   14cd8:	str	r1, [sp, #100]	; 0x64
   14cdc:	str	r1, [sp, #88]	; 0x58
   14ce0:	str	r3, [sp, #68]	; 0x44
   14ce4:	ldr	r2, [sp, #84]	; 0x54
   14ce8:	ldrd	r0, [sp, #56]	; 0x38
   14cec:	b	14500 <__assert_fail@plt+0x3130>
   14cf0:	andeq	r1, r2, r4, asr #30
   14cf4:	andeq	r0, r0, r5, lsl r1
   14cf8:	stcleq	12, cr12, [ip], {204}	; 0xcc
   14cfc:	addeq	r0, r0, pc, lsl r0
   14d00:	andeq	r2, r2, r4, asr #24
   14d04:	andeq	r2, r2, ip, lsr ip
   14d08:	andeq	r1, r2, r8, lsl #29
   14d0c:	andeq	r2, r2, r0, lsr ip
   14d10:	andeq	r2, r2, ip, lsr #24
   14d14:	andeq	r2, r2, r4, lsl ip
   14d18:	andeq	r2, r2, r0, lsr #24
   14d1c:	andeq	r2, r2, r8, lsl ip
   14d20:	andeq	r3, r2, r4, asr r1
   14d24:	andeq	r2, r2, r0, lsl #24
   14d28:			; <UNDEFINED> instruction: 0xffff9d90
   14d2c:	ldr	lr, [sp, #64]	; 0x40
   14d30:	ldrd	r4, [r9]
   14d34:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14d38:	ldr	r0, [lr, #176]	; 0xb0
   14d3c:	ldrb	r1, [r9, #-56]	; 0xffffffc8
   14d40:	strd	r4, [sp, #8]
   14d44:	ldr	ip, [r9, #-40]	; 0xffffffd8
   14d48:	add	r0, r0, #1
   14d4c:	str	ip, [sp]
   14d50:	str	r0, [lr, #176]	; 0xb0
   14d54:	add	r0, lr, #24
   14d58:	bl	132bc <__assert_fail@plt+0x1eec>
   14d5c:	cmp	r0, #0
   14d60:	beq	14228 <__assert_fail@plt+0x2e58>
   14d64:	mov	r8, #27
   14d68:	ldr	r2, [sp, #84]	; 0x54
   14d6c:	ldrd	r0, [sp, #56]	; 0x38
   14d70:	b	14500 <__assert_fail@plt+0x3130>
   14d74:	ldr	lr, [sp, #64]	; 0x40
   14d78:	ldrd	r2, [r9, #-160]	; 0xffffff60
   14d7c:	sub	r1, r9, #272	; 0x110
   14d80:	ldr	ip, [r9, #-56]	; 0xffffffc8
   14d84:	ldrd	r0, [r1]
   14d88:	strd	r2, [lr, #80]	; 0x50
   14d8c:	ldr	r2, [r9, #-52]	; 0xffffffcc
   14d90:	mov	r3, #2
   14d94:	strd	r0, [lr, #72]	; 0x48
   14d98:	str	r2, [lr, #92]	; 0x5c
   14d9c:	str	ip, [lr, #88]	; 0x58
   14da0:	str	r3, [lr, #28]
   14da4:	mov	r8, #24
   14da8:	ldr	r2, [sp, #84]	; 0x54
   14dac:	ldrd	r0, [sp, #56]	; 0x38
   14db0:	b	14500 <__assert_fail@plt+0x3130>
   14db4:	ldr	ip, [sp, #64]	; 0x40
   14db8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14dbc:	ldrd	r0, [r9, #-160]	; 0xffffff60
   14dc0:	mov	r8, #23
   14dc4:	strd	r2, [ip, #80]	; 0x50
   14dc8:	mov	r3, #0
   14dcc:	mov	r2, #2
   14dd0:	strd	r0, [ip, #72]	; 0x48
   14dd4:	str	r2, [ip, #28]
   14dd8:	str	r3, [ip, #88]	; 0x58
   14ddc:	str	r3, [ip, #92]	; 0x5c
   14de0:	ldr	r2, [sp, #84]	; 0x54
   14de4:	ldrd	r0, [sp, #56]	; 0x38
   14de8:	b	14500 <__assert_fail@plt+0x3130>
   14dec:	ldr	ip, [sp, #64]	; 0x40
   14df0:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14df4:	mov	r0, #0
   14df8:	mov	r1, #0
   14dfc:	strd	r2, [ip, #72]	; 0x48
   14e00:	mov	r3, #0
   14e04:	mov	r2, #2
   14e08:	strd	r0, [ip, #80]	; 0x50
   14e0c:	str	r2, [ip, #28]
   14e10:	str	r3, [ip, #88]	; 0x58
   14e14:	str	r3, [ip, #92]	; 0x5c
   14e18:	mov	r8, #22
   14e1c:	ldr	r2, [sp, #84]	; 0x54
   14e20:	ldrd	r0, [sp, #56]	; 0x38
   14e24:	b	14500 <__assert_fail@plt+0x3130>
   14e28:	ldr	lr, [sp, #64]	; 0x40
   14e2c:	ldrd	r2, [r9, #-160]	; 0xffffff60
   14e30:	sub	r1, r9, #272	; 0x110
   14e34:	ldr	ip, [r9, #-56]	; 0xffffffc8
   14e38:	ldrd	r0, [r1]
   14e3c:	strd	r2, [lr, #80]	; 0x50
   14e40:	ldr	r2, [r9, #-52]	; 0xffffffcc
   14e44:	ldr	r3, [r9]
   14e48:	strd	r0, [lr, #72]	; 0x48
   14e4c:	str	r2, [lr, #92]	; 0x5c
   14e50:	str	ip, [lr, #88]	; 0x58
   14e54:	str	r3, [lr, #28]
   14e58:	mov	r8, #20
   14e5c:	ldr	r2, [sp, #84]	; 0x54
   14e60:	ldrd	r0, [sp, #56]	; 0x38
   14e64:	b	14500 <__assert_fail@plt+0x3130>
   14e68:	ldr	ip, [sp, #64]	; 0x40
   14e6c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14e70:	ldrd	r0, [r9, #-160]	; 0xffffff60
   14e74:	mov	r8, #19
   14e78:	strd	r2, [ip, #80]	; 0x50
   14e7c:	ldr	r2, [r9]
   14e80:	mov	r3, #0
   14e84:	strd	r0, [ip, #72]	; 0x48
   14e88:	str	r2, [ip, #28]
   14e8c:	str	r3, [ip, #88]	; 0x58
   14e90:	str	r3, [ip, #92]	; 0x5c
   14e94:	ldr	r2, [sp, #84]	; 0x54
   14e98:	ldrd	r0, [sp, #56]	; 0x38
   14e9c:	b	14500 <__assert_fail@plt+0x3130>
   14ea0:	ldr	ip, [sp, #64]	; 0x40
   14ea4:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14ea8:	mov	r0, #0
   14eac:	mov	r1, #0
   14eb0:	strd	r2, [ip, #72]	; 0x48
   14eb4:	ldr	r2, [r9]
   14eb8:	mov	r3, #0
   14ebc:	strd	r0, [ip, #80]	; 0x50
   14ec0:	str	r2, [ip, #28]
   14ec4:	str	r3, [ip, #88]	; 0x58
   14ec8:	str	r3, [ip, #92]	; 0x5c
   14ecc:	mov	r8, #18
   14ed0:	ldr	r2, [sp, #84]	; 0x54
   14ed4:	ldrd	r0, [sp, #56]	; 0x38
   14ed8:	b	14500 <__assert_fail@plt+0x3130>
   14edc:	mov	r2, #5
   14ee0:	ldr	r1, [pc, #-488]	; 14d00 <__assert_fail@plt+0x3930>
   14ee4:	mov	r0, #0
   14ee8:	bl	11130 <dcgettext@plt>
   14eec:	ldr	r3, [sp, #64]	; 0x40
   14ef0:	ldrb	r3, [r3, #181]	; 0xb5
   14ef4:	cmp	r3, #0
   14ef8:	bne	16514 <__assert_fail@plt+0x5144>
   14efc:	mov	r8, #15
   14f00:	ldr	r2, [sp, #84]	; 0x54
   14f04:	ldrd	r0, [sp, #56]	; 0x38
   14f08:	b	14500 <__assert_fail@plt+0x3130>
   14f0c:	mov	r2, #5
   14f10:	ldr	r1, [pc, #-532]	; 14d04 <__assert_fail@plt+0x3934>
   14f14:	mov	r0, #0
   14f18:	bl	11130 <dcgettext@plt>
   14f1c:	ldr	r3, [sp, #64]	; 0x40
   14f20:	ldrb	r3, [r3, #181]	; 0xb5
   14f24:	cmp	r3, #0
   14f28:	bne	1631c <__assert_fail@plt+0x4f4c>
   14f2c:	mov	r8, #14
   14f30:	ldr	r2, [sp, #84]	; 0x54
   14f34:	ldrd	r0, [sp, #56]	; 0x38
   14f38:	b	14500 <__assert_fail@plt+0x3130>
   14f3c:	ldr	r8, [sp, #64]	; 0x40
   14f40:	mov	r1, #1
   14f44:	ldr	r0, [r9, #-56]	; 0xffffffc8
   14f48:	ldrd	r2, [r9]
   14f4c:	str	r1, [sp, #44]	; 0x2c
   14f50:	ldr	r1, [r9, #48]	; 0x30
   14f54:	str	r0, [r8, #24]
   14f58:	str	r1, [sp, #40]	; 0x28
   14f5c:	ldrd	r4, [r9, #40]	; 0x28
   14f60:	mov	r0, r8
   14f64:	strd	r4, [sp, #32]
   14f68:	ldrd	r4, [r9, #32]
   14f6c:	strd	r4, [sp, #24]
   14f70:	ldrd	r4, [r9, #24]
   14f74:	strd	r4, [sp, #16]
   14f78:	ldrd	r4, [r9, #16]
   14f7c:	strd	r4, [sp, #8]
   14f80:	ldrd	r4, [r9, #8]
   14f84:	strd	r4, [sp]
   14f88:	bl	12a98 <__assert_fail@plt+0x16c8>
   14f8c:	cmp	r0, #0
   14f90:	beq	14228 <__assert_fail@plt+0x2e58>
   14f94:	mov	r2, #5
   14f98:	ldr	r1, [pc, #-660]	; 14d0c <__assert_fail@plt+0x393c>
   14f9c:	mov	r0, #0
   14fa0:	bl	11130 <dcgettext@plt>
   14fa4:	ldrb	r3, [r8, #181]	; 0xb5
   14fa8:	cmp	r3, #0
   14fac:	bne	164e4 <__assert_fail@plt+0x5114>
   14fb0:	mov	r8, #32
   14fb4:	ldr	r2, [sp, #84]	; 0x54
   14fb8:	ldrd	r0, [sp, #56]	; 0x38
   14fbc:	b	14500 <__assert_fail@plt+0x3130>
   14fc0:	ldr	r4, [sp, #64]	; 0x40
   14fc4:	mov	r2, #5
   14fc8:	ldr	r1, [pc, #-712]	; 14d08 <__assert_fail@plt+0x3938>
   14fcc:	ldr	r3, [r4, #156]	; 0x9c
   14fd0:	mov	r0, #0
   14fd4:	add	r3, r3, #1
   14fd8:	str	r3, [r4, #156]	; 0x9c
   14fdc:	bl	11130 <dcgettext@plt>
   14fe0:	ldrb	r3, [r4, #181]	; 0xb5
   14fe4:	cmp	r3, #0
   14fe8:	bne	16224 <__assert_fail@plt+0x4e54>
   14fec:	mov	r8, #11
   14ff0:	ldr	r2, [sp, #84]	; 0x54
   14ff4:	ldrd	r0, [sp, #56]	; 0x38
   14ff8:	b	14500 <__assert_fail@plt+0x3130>
   14ffc:	ldr	ip, [sp, #64]	; 0x40
   15000:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15004:	ldr	r0, [r9]
   15008:	mov	r1, #1
   1500c:	strd	r2, [ip, #8]
   15010:	str	r0, [ip, #16]
   15014:	strb	r1, [ip, #188]	; 0xbc
   15018:	mov	r8, #40	; 0x28
   1501c:	ldr	r2, [sp, #84]	; 0x54
   15020:	ldrd	r0, [sp, #56]	; 0x38
   15024:	b	14500 <__assert_fail@plt+0x3130>
   15028:	mov	r2, #5
   1502c:	ldr	r1, [pc, #-808]	; 14d0c <__assert_fail@plt+0x393c>
   15030:	mov	r0, #0
   15034:	bl	11130 <dcgettext@plt>
   15038:	ldr	r3, [sp, #64]	; 0x40
   1503c:	ldrb	r3, [r3, #181]	; 0xb5
   15040:	cmp	r3, #0
   15044:	bne	1643c <__assert_fail@plt+0x506c>
   15048:	mov	r8, #13
   1504c:	ldr	r2, [sp, #84]	; 0x54
   15050:	ldrd	r0, [sp, #56]	; 0x38
   15054:	b	14500 <__assert_fail@plt+0x3130>
   15058:	ldr	r4, [sp, #64]	; 0x40
   1505c:	mov	r2, #5
   15060:	ldr	r1, [pc, #-856]	; 14d10 <__assert_fail@plt+0x3940>
   15064:	ldr	r3, [r4, #160]	; 0xa0
   15068:	mov	r0, #0
   1506c:	add	r3, r3, #1
   15070:	str	r3, [r4, #160]	; 0xa0
   15074:	bl	11130 <dcgettext@plt>
   15078:	ldrb	r3, [r4, #181]	; 0xb5
   1507c:	cmp	r3, #0
   15080:	bne	16578 <__assert_fail@plt+0x51a8>
   15084:	mov	r8, #12
   15088:	ldr	r2, [sp, #84]	; 0x54
   1508c:	ldrd	r0, [sp, #56]	; 0x38
   15090:	b	14500 <__assert_fail@plt+0x3130>
   15094:	ldrd	r0, [r9, #8]
   15098:	mov	r3, #0
   1509c:	mvn	r2, #0
   150a0:	adds	r4, r0, #-2147483648	; 0x80000000
   150a4:	adc	r5, r1, #0
   150a8:	cmp	r5, r3
   150ac:	cmpeq	r4, r2
   150b0:	bhi	14228 <__assert_fail@plt+0x2e58>
   150b4:	mov	r3, #0
   150b8:	str	r0, [sp, #304]	; 0x130
   150bc:	str	r3, [sp, #308]	; 0x134
   150c0:	mov	r8, #85	; 0x55
   150c4:	ldr	r2, [sp, #84]	; 0x54
   150c8:	ldrd	r0, [sp, #56]	; 0x38
   150cc:	b	14500 <__assert_fail@plt+0x3130>
   150d0:	ldr	r4, [sp, #64]	; 0x40
   150d4:	ldr	r1, [pc, #-968]	; 14d14 <__assert_fail@plt+0x3944>
   150d8:	mov	r0, #0
   150dc:	ldr	r2, [r4, #172]	; 0xac
   150e0:	ldr	r3, [r4, #156]	; 0x9c
   150e4:	add	r2, r2, #1
   150e8:	add	r3, r3, #1
   150ec:	str	r2, [r4, #172]	; 0xac
   150f0:	str	r3, [r4, #156]	; 0x9c
   150f4:	mov	r2, #5
   150f8:	bl	11130 <dcgettext@plt>
   150fc:	ldrb	r3, [r4, #181]	; 0xb5
   15100:	cmp	r3, #0
   15104:	bne	16454 <__assert_fail@plt+0x5084>
   15108:	mov	r8, #7
   1510c:	ldr	r2, [sp, #84]	; 0x54
   15110:	ldrd	r0, [sp, #56]	; 0x38
   15114:	b	14500 <__assert_fail@plt+0x3130>
   15118:	sub	lr, r9, #56	; 0x38
   1511c:	add	ip, sp, #184	; 0xb8
   15120:	ldm	lr!, {r0, r1, r2, r3}
   15124:	ldr	r5, [sp, #64]	; 0x40
   15128:	ldr	r8, [r9, #-48]	; 0xffffffd0
   1512c:	stmia	ip!, {r0, r1, r2, r3}
   15130:	ldm	lr, {r0, r1}
   15134:	ldr	r4, [r5, #156]	; 0x9c
   15138:	stm	ip, {r0, r1}
   1513c:	ldr	r1, [r9, #-40]	; 0xffffffd8
   15140:	cmp	r4, #0
   15144:	str	r4, [sp, #132]	; 0x84
   15148:	str	r1, [sp, #112]	; 0x70
   1514c:	ldr	r4, [r9, #-44]	; 0xffffffd4
   15150:	beq	160ac <__assert_fail@plt+0x4cdc>
   15154:	ldr	r3, [r5, #48]	; 0x30
   15158:	cmp	r3, #0
   1515c:	bne	160ac <__assert_fail@plt+0x4cdc>
   15160:	ldrb	r3, [r5, #153]	; 0x99
   15164:	cmp	r3, #0
   15168:	bne	160ac <__assert_fail@plt+0x4cdc>
   1516c:	ldr	r3, [r5, #172]	; 0xac
   15170:	cmp	r1, #2
   15174:	cmple	r3, #0
   15178:	bne	165c0 <__assert_fail@plt+0x51f0>
   1517c:	mov	r3, #1
   15180:	ldr	r0, [sp, #64]	; 0x40
   15184:	str	r3, [r5, #172]	; 0xac
   15188:	mov	r2, #0
   1518c:	mov	r3, #0
   15190:	mov	r1, #0
   15194:	strd	r2, [r0, #80]	; 0x50
   15198:	mov	r3, #2
   1519c:	str	r8, [r0, #72]	; 0x48
   151a0:	str	r4, [r0, #76]	; 0x4c
   151a4:	str	r1, [r0, #88]	; 0x58
   151a8:	str	r1, [r0, #92]	; 0x5c
   151ac:	str	r3, [r0, #28]
   151b0:	mov	r1, #1
   151b4:	ldrd	r2, [r9]
   151b8:	str	r1, [sp, #44]	; 0x2c
   151bc:	ldr	r1, [r9, #48]	; 0x30
   151c0:	str	r1, [sp, #40]	; 0x28
   151c4:	ldrd	r4, [r9, #40]	; 0x28
   151c8:	strd	r4, [sp, #32]
   151cc:	ldrd	r4, [r9, #32]
   151d0:	strd	r4, [sp, #24]
   151d4:	ldrd	r4, [r9, #24]
   151d8:	strd	r4, [sp, #16]
   151dc:	ldrd	r4, [r9, #16]
   151e0:	strd	r4, [sp, #8]
   151e4:	ldrd	r4, [r9, #8]
   151e8:	strd	r4, [sp]
   151ec:	bl	12a98 <__assert_fail@plt+0x16c8>
   151f0:	cmp	r0, #0
   151f4:	beq	14228 <__assert_fail@plt+0x2e58>
   151f8:	mov	r8, #89	; 0x59
   151fc:	ldr	r2, [sp, #84]	; 0x54
   15200:	ldrd	r0, [sp, #56]	; 0x38
   15204:	b	14500 <__assert_fail@plt+0x3130>
   15208:	mov	r4, #0
   1520c:	mov	r5, #0
   15210:	mov	r2, #56	; 0x38
   15214:	mov	r1, #0
   15218:	ldr	r0, [sp, #80]	; 0x50
   1521c:	strd	r4, [sp, #72]	; 0x48
   15220:	bl	112c8 <memset@plt>
   15224:	mov	r2, r4
   15228:	mov	r3, r5
   1522c:	str	r4, [sp, #92]	; 0x5c
   15230:	strd	r2, [sp, #56]	; 0x38
   15234:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15238:	mov	r7, r5
   1523c:	str	r3, [sp, #96]	; 0x60
   15240:	ldr	r3, [r9, #-44]	; 0xffffffd4
   15244:	str	r4, [sp, #84]	; 0x54
   15248:	str	r3, [sp, #100]	; 0x64
   1524c:	mov	r3, #0
   15250:	str	r5, [sp, #88]	; 0x58
   15254:	mov	r8, #78	; 0x4e
   15258:	str	r3, [sp, #68]	; 0x44
   1525c:	mov	r2, r4
   15260:	ldrd	r0, [sp, #56]	; 0x38
   15264:	b	14500 <__assert_fail@plt+0x3130>
   15268:	ldrd	r2, [r9, #8]
   1526c:	mov	r8, #91	; 0x5b
   15270:	ldrd	r0, [sp, #56]	; 0x38
   15274:	strd	r2, [r6, #-8]
   15278:	ldr	r2, [sp, #84]	; 0x54
   1527c:	b	14500 <__assert_fail@plt+0x3130>
   15280:	ldr	r4, [sp, #64]	; 0x40
   15284:	mov	r2, #5
   15288:	ldr	r1, [pc, #-1400]	; 14d18 <__assert_fail@plt+0x3948>
   1528c:	ldr	r3, [r4, #164]	; 0xa4
   15290:	mov	r0, #0
   15294:	add	r3, r3, #1
   15298:	str	r3, [r4, #164]	; 0xa4
   1529c:	bl	11130 <dcgettext@plt>
   152a0:	ldrb	r3, [r4, #181]	; 0xb5
   152a4:	cmp	r3, #0
   152a8:	bne	16424 <__assert_fail@plt+0x5054>
   152ac:	mov	r8, #9
   152b0:	ldr	r2, [sp, #84]	; 0x54
   152b4:	ldrd	r0, [sp, #56]	; 0x38
   152b8:	b	14500 <__assert_fail@plt+0x3130>
   152bc:	ldr	r4, [sp, #64]	; 0x40
   152c0:	mov	r2, #5
   152c4:	ldr	r1, [pc, #-1456]	; 14d1c <__assert_fail@plt+0x394c>
   152c8:	ldr	r3, [r4, #172]	; 0xac
   152cc:	mov	r0, #0
   152d0:	add	r3, r3, #1
   152d4:	str	r3, [r4, #172]	; 0xac
   152d8:	bl	11130 <dcgettext@plt>
   152dc:	ldrb	r3, [r4, #181]	; 0xb5
   152e0:	cmp	r3, #0
   152e4:	bne	164fc <__assert_fail@plt+0x512c>
   152e8:	mov	r8, #8
   152ec:	ldr	r2, [sp, #84]	; 0x54
   152f0:	ldrd	r0, [sp, #56]	; 0x38
   152f4:	b	14500 <__assert_fail@plt+0x3130>
   152f8:	ldr	r4, [sp, #64]	; 0x40
   152fc:	mov	r2, #5
   15300:	ldr	r1, [pc, #-1512]	; 14d20 <__assert_fail@plt+0x3950>
   15304:	ldr	r3, [r4, #176]	; 0xb0
   15308:	mov	r0, #0
   1530c:	add	r3, r3, #1
   15310:	str	r3, [r4, #176]	; 0xb0
   15314:	bl	11130 <dcgettext@plt>
   15318:	ldrb	r3, [r4, #181]	; 0xb5
   1531c:	cmp	r3, #0
   15320:	bne	16590 <__assert_fail@plt+0x51c0>
   15324:	mov	r8, #10
   15328:	ldr	r2, [sp, #84]	; 0x54
   1532c:	ldrd	r0, [sp, #56]	; 0x38
   15330:	b	14500 <__assert_fail@plt+0x3130>
   15334:	mov	r2, #56	; 0x38
   15338:	mov	r1, #0
   1533c:	ldr	r0, [sp, #80]	; 0x50
   15340:	bl	112c8 <memset@plt>
   15344:	mov	r3, #0
   15348:	mov	r7, r3
   1534c:	str	r3, [sp, #56]	; 0x38
   15350:	str	r3, [sp, #60]	; 0x3c
   15354:	str	r3, [sp, #84]	; 0x54
   15358:	str	r3, [sp, #92]	; 0x5c
   1535c:	str	r3, [sp, #96]	; 0x60
   15360:	str	r3, [sp, #100]	; 0x64
   15364:	str	r3, [sp, #88]	; 0x58
   15368:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   1536c:	mov	r8, #80	; 0x50
   15370:	str	r7, [sp, #68]	; 0x44
   15374:	strd	r2, [sp, #72]	; 0x48
   15378:	ldrd	r0, [sp, #56]	; 0x38
   1537c:	ldr	r2, [sp, #84]	; 0x54
   15380:	b	14500 <__assert_fail@plt+0x3130>
   15384:	mov	lr, r9
   15388:	ldr	r5, [sp, #64]	; 0x40
   1538c:	ldm	lr!, {r0, r1, r2, r3}
   15390:	add	ip, sp, #160	; 0xa0
   15394:	ldr	r8, [r5, #156]	; 0x9c
   15398:	ldr	r4, [r9, #12]
   1539c:	stmia	ip!, {r0, r1, r2, r3}
   153a0:	cmp	r8, #0
   153a4:	ldm	lr, {r0, r1}
   153a8:	str	r2, [sp, #112]	; 0x70
   153ac:	stm	ip, {r0, r1}
   153b0:	str	r0, [sp, #132]	; 0x84
   153b4:	beq	16110 <__assert_fail@plt+0x4d40>
   153b8:	ldr	r3, [r5, #48]	; 0x30
   153bc:	cmp	r3, #0
   153c0:	bne	16110 <__assert_fail@plt+0x4d40>
   153c4:	ldrb	r3, [r5, #153]	; 0x99
   153c8:	cmp	r3, #0
   153cc:	bne	16110 <__assert_fail@plt+0x4d40>
   153d0:	ldr	r3, [r5, #172]	; 0xac
   153d4:	cmp	r0, #2
   153d8:	cmple	r3, #0
   153dc:	bne	165f4 <__assert_fail@plt+0x5224>
   153e0:	mov	r3, #1
   153e4:	ldr	r0, [sp, #64]	; 0x40
   153e8:	str	r3, [r5, #172]	; 0xac
   153ec:	mov	r2, #0
   153f0:	mov	r3, #0
   153f4:	strd	r2, [r0, #80]	; 0x50
   153f8:	mov	r2, r0
   153fc:	ldr	r0, [sp, #112]	; 0x70
   15400:	mov	r1, #0
   15404:	mov	r3, #2
   15408:	str	r0, [r2, #72]	; 0x48
   1540c:	str	r1, [r2, #88]	; 0x58
   15410:	str	r1, [r2, #92]	; 0x5c
   15414:	str	r4, [r2, #76]	; 0x4c
   15418:	str	r3, [r2, #28]
   1541c:	mov	r8, #88	; 0x58
   15420:	ldr	r2, [sp, #84]	; 0x54
   15424:	ldrd	r0, [sp, #56]	; 0x38
   15428:	b	14500 <__assert_fail@plt+0x3130>
   1542c:	ldrd	r0, [r9, #8]
   15430:	mov	r3, #0
   15434:	mvn	r2, #0
   15438:	adds	r4, r0, #-2147483648	; 0x80000000
   1543c:	adc	r5, r1, #0
   15440:	cmp	r5, r3
   15444:	cmpeq	r4, r2
   15448:	bhi	14228 <__assert_fail@plt+0x2e58>
   1544c:	mov	r3, #0
   15450:	str	r0, [sp, #304]	; 0x130
   15454:	str	r3, [sp, #308]	; 0x134
   15458:	mov	r8, #87	; 0x57
   1545c:	ldr	r2, [sp, #84]	; 0x54
   15460:	ldrd	r0, [sp, #56]	; 0x38
   15464:	b	14500 <__assert_fail@plt+0x3130>
   15468:	mvn	r2, #0
   1546c:	mvn	r3, #0
   15470:	mov	r8, #90	; 0x5a
   15474:	strd	r2, [r6, #-8]
   15478:	ldrd	r0, [sp, #56]	; 0x38
   1547c:	ldr	r2, [sp, #84]	; 0x54
   15480:	b	14500 <__assert_fail@plt+0x3130>
   15484:	ldr	r4, [sp, #64]	; 0x40
   15488:	ldm	r9, {r0, r1}
   1548c:	add	r3, r4, #88	; 0x58
   15490:	mov	ip, #1
   15494:	stm	r3, {r0, r1}
   15498:	mov	r2, #5
   1549c:	strb	ip, [r4, #152]	; 0x98
   154a0:	ldr	r1, [pc, #-1924]	; 14d24 <__assert_fail@plt+0x3954>
   154a4:	mov	r0, #0
   154a8:	bl	11130 <dcgettext@plt>
   154ac:	ldrb	r3, [r4, #181]	; 0xb5
   154b0:	cmp	r3, #0
   154b4:	bne	165a8 <__assert_fail@plt+0x51d8>
   154b8:	mov	r8, #4
   154bc:	ldr	r2, [sp, #84]	; 0x54
   154c0:	ldrd	r0, [sp, #56]	; 0x38
   154c4:	b	14500 <__assert_fail@plt+0x3130>
   154c8:	mov	r4, #0
   154cc:	mov	r5, #0
   154d0:	mov	r2, #56	; 0x38
   154d4:	mov	r1, #0
   154d8:	ldr	r0, [sp, #80]	; 0x50
   154dc:	strd	r4, [sp, #72]	; 0x48
   154e0:	bl	112c8 <memset@plt>
   154e4:	ldrd	r2, [r9]
   154e8:	str	r4, [sp, #92]	; 0x5c
   154ec:	mov	r7, r5
   154f0:	strd	r2, [sp, #56]	; 0x38
   154f4:	mov	r3, #0
   154f8:	str	r4, [sp, #96]	; 0x60
   154fc:	str	r5, [sp, #100]	; 0x64
   15500:	str	r4, [sp, #84]	; 0x54
   15504:	str	r5, [sp, #88]	; 0x58
   15508:	mov	r8, #81	; 0x51
   1550c:	str	r3, [sp, #68]	; 0x44
   15510:	mov	r2, r4
   15514:	ldrd	r0, [sp, #56]	; 0x38
   15518:	b	14500 <__assert_fail@plt+0x3130>
   1551c:	mov	r4, #0
   15520:	mov	r5, #0
   15524:	mov	r2, #56	; 0x38
   15528:	mov	r1, #0
   1552c:	ldr	r0, [sp, #80]	; 0x50
   15530:	strd	r4, [sp, #72]	; 0x48
   15534:	bl	112c8 <memset@plt>
   15538:	ldr	r7, [r9, #-44]	; 0xffffffd4
   1553c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15540:	mov	r8, #79	; 0x4f
   15544:	str	r4, [sp, #96]	; 0x60
   15548:	str	r5, [sp, #100]	; 0x64
   1554c:	strd	r4, [sp, #56]	; 0x38
   15550:	str	r4, [sp, #84]	; 0x54
   15554:	str	r5, [sp, #88]	; 0x58
   15558:	str	r3, [sp, #92]	; 0x5c
   1555c:	mov	r3, #0
   15560:	str	r3, [sp, #68]	; 0x44
   15564:	ldr	r2, [sp, #84]	; 0x54
   15568:	mov	r0, r4
   1556c:	mov	r1, r5
   15570:	b	14500 <__assert_fail@plt+0x3130>
   15574:	mov	r2, #56	; 0x38
   15578:	mov	r1, #0
   1557c:	ldr	r0, [sp, #80]	; 0x50
   15580:	bl	112c8 <memset@plt>
   15584:	mov	r3, #0
   15588:	str	r3, [sp, #56]	; 0x38
   1558c:	str	r3, [sp, #60]	; 0x3c
   15590:	str	r3, [sp, #84]	; 0x54
   15594:	mov	r2, #1
   15598:	str	r3, [sp, #92]	; 0x5c
   1559c:	mov	r7, r3
   155a0:	str	r3, [sp, #96]	; 0x60
   155a4:	str	r3, [sp, #100]	; 0x64
   155a8:	str	r3, [sp, #88]	; 0x58
   155ac:	str	r3, [sp, #68]	; 0x44
   155b0:	mov	r3, #0
   155b4:	mov	r8, #73	; 0x49
   155b8:	strd	r2, [sp, #72]	; 0x48
   155bc:	ldrd	r0, [sp, #56]	; 0x38
   155c0:	ldr	r2, [sp, #84]	; 0x54
   155c4:	b	14500 <__assert_fail@plt+0x3130>
   155c8:	mov	r2, #56	; 0x38
   155cc:	mov	r1, #0
   155d0:	ldr	r0, [sp, #80]	; 0x50
   155d4:	bl	112c8 <memset@plt>
   155d8:	ldr	r3, [r9, #-56]	; 0xffffffc8
   155dc:	mov	r2, #0
   155e0:	mov	r0, r3
   155e4:	asr	r1, r3, #31
   155e8:	ldr	r3, [r9, #-52]	; 0xffffffcc
   155ec:	str	r2, [sp, #56]	; 0x38
   155f0:	str	r2, [sp, #60]	; 0x3c
   155f4:	strd	r0, [sp, #72]	; 0x48
   155f8:	str	r2, [sp, #92]	; 0x5c
   155fc:	mov	r7, r2
   15600:	str	r2, [sp, #96]	; 0x60
   15604:	str	r2, [sp, #100]	; 0x64
   15608:	str	r2, [sp, #84]	; 0x54
   1560c:	str	r2, [sp, #88]	; 0x58
   15610:	str	r3, [sp, #68]	; 0x44
   15614:	mov	r8, #72	; 0x48
   15618:	ldrd	r0, [sp, #56]	; 0x38
   1561c:	b	14500 <__assert_fail@plt+0x3130>
   15620:	mov	r2, #56	; 0x38
   15624:	mov	r1, #0
   15628:	ldr	r0, [sp, #80]	; 0x50
   1562c:	bl	112c8 <memset@plt>
   15630:	ldr	r3, [r9, #-56]	; 0xffffffc8
   15634:	mov	r2, #0
   15638:	mov	r0, r3
   1563c:	asr	r1, r3, #31
   15640:	ldr	r3, [r9, #-52]	; 0xffffffcc
   15644:	str	r2, [sp, #56]	; 0x38
   15648:	str	r2, [sp, #60]	; 0x3c
   1564c:	strd	r0, [sp, #72]	; 0x48
   15650:	str	r2, [sp, #92]	; 0x5c
   15654:	mov	r7, r2
   15658:	str	r2, [sp, #96]	; 0x60
   1565c:	str	r2, [sp, #100]	; 0x64
   15660:	str	r2, [sp, #84]	; 0x54
   15664:	str	r2, [sp, #88]	; 0x58
   15668:	str	r3, [sp, #68]	; 0x44
   1566c:	mov	r8, #71	; 0x47
   15670:	ldrd	r0, [sp, #56]	; 0x38
   15674:	b	14500 <__assert_fail@plt+0x3130>
   15678:	mov	r2, #56	; 0x38
   1567c:	mov	r1, #0
   15680:	ldr	r0, [sp, #80]	; 0x50
   15684:	bl	112c8 <memset@plt>
   15688:	mov	r3, #0
   1568c:	mov	r7, r3
   15690:	str	r3, [sp, #56]	; 0x38
   15694:	str	r3, [sp, #60]	; 0x3c
   15698:	str	r3, [sp, #84]	; 0x54
   1569c:	str	r3, [sp, #92]	; 0x5c
   156a0:	str	r3, [sp, #96]	; 0x60
   156a4:	str	r3, [sp, #100]	; 0x64
   156a8:	str	r3, [sp, #88]	; 0x58
   156ac:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   156b0:	mov	r8, #70	; 0x46
   156b4:	str	r7, [sp, #68]	; 0x44
   156b8:	strd	r2, [sp, #72]	; 0x48
   156bc:	ldrd	r0, [sp, #56]	; 0x38
   156c0:	ldr	r2, [sp, #84]	; 0x54
   156c4:	b	14500 <__assert_fail@plt+0x3130>
   156c8:	mov	r2, #56	; 0x38
   156cc:	mov	r1, #0
   156d0:	ldr	r0, [sp, #80]	; 0x50
   156d4:	bl	112c8 <memset@plt>
   156d8:	mov	r3, #0
   156dc:	mov	r7, r3
   156e0:	str	r3, [sp, #56]	; 0x38
   156e4:	str	r3, [sp, #60]	; 0x3c
   156e8:	str	r3, [sp, #84]	; 0x54
   156ec:	str	r3, [sp, #92]	; 0x5c
   156f0:	str	r3, [sp, #96]	; 0x60
   156f4:	str	r3, [sp, #100]	; 0x64
   156f8:	str	r3, [sp, #88]	; 0x58
   156fc:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   15700:	mov	r8, #69	; 0x45
   15704:	str	r7, [sp, #68]	; 0x44
   15708:	strd	r2, [sp, #72]	; 0x48
   1570c:	ldrd	r0, [sp, #56]	; 0x38
   15710:	ldr	r2, [sp, #84]	; 0x54
   15714:	b	14500 <__assert_fail@plt+0x3130>
   15718:	mov	r4, #0
   1571c:	mov	r5, #0
   15720:	mov	r2, #56	; 0x38
   15724:	mov	r1, #0
   15728:	ldr	r0, [sp, #80]	; 0x50
   1572c:	strd	r4, [sp, #72]	; 0x48
   15730:	bl	112c8 <memset@plt>
   15734:	mov	r3, #0
   15738:	str	r4, [sp, #84]	; 0x54
   1573c:	str	r3, [sp, #68]	; 0x44
   15740:	mov	r3, #1
   15744:	str	r4, [sp, #96]	; 0x60
   15748:	str	r5, [sp, #100]	; 0x64
   1574c:	strd	r4, [sp, #56]	; 0x38
   15750:	str	r5, [sp, #88]	; 0x58
   15754:	mov	r8, #68	; 0x44
   15758:	str	r3, [sp, #92]	; 0x5c
   1575c:	mov	r7, #0
   15760:	ldr	r2, [sp, #84]	; 0x54
   15764:	mov	r0, r4
   15768:	mov	r1, r5
   1576c:	b	14500 <__assert_fail@plt+0x3130>
   15770:	mov	r4, #0
   15774:	mov	r5, #0
   15778:	mov	r2, #56	; 0x38
   1577c:	mov	r1, #0
   15780:	ldr	r0, [sp, #80]	; 0x50
   15784:	strd	r4, [sp, #72]	; 0x48
   15788:	bl	112c8 <memset@plt>
   1578c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15790:	str	r4, [sp, #96]	; 0x60
   15794:	str	r5, [sp, #100]	; 0x64
   15798:	strd	r4, [sp, #56]	; 0x38
   1579c:	str	r4, [sp, #84]	; 0x54
   157a0:	str	r5, [sp, #88]	; 0x58
   157a4:	str	r3, [sp, #92]	; 0x5c
   157a8:	ldr	r7, [r9, #-44]	; 0xffffffd4
   157ac:	mov	r8, #67	; 0x43
   157b0:	b	1555c <__assert_fail@plt+0x418c>
   157b4:	mov	r4, #0
   157b8:	mov	r5, #0
   157bc:	mov	r2, #56	; 0x38
   157c0:	mov	r1, #0
   157c4:	ldr	r0, [sp, #80]	; 0x50
   157c8:	strd	r4, [sp, #72]	; 0x48
   157cc:	bl	112c8 <memset@plt>
   157d0:	ldr	r3, [r9, #-56]	; 0xffffffc8
   157d4:	str	r4, [sp, #96]	; 0x60
   157d8:	str	r5, [sp, #100]	; 0x64
   157dc:	strd	r4, [sp, #56]	; 0x38
   157e0:	str	r4, [sp, #84]	; 0x54
   157e4:	str	r5, [sp, #88]	; 0x58
   157e8:	str	r3, [sp, #92]	; 0x5c
   157ec:	ldr	r7, [r9, #-52]	; 0xffffffcc
   157f0:	mov	r8, #66	; 0x42
   157f4:	b	1555c <__assert_fail@plt+0x418c>
   157f8:	ldr	r2, [sp, #64]	; 0x40
   157fc:	ldr	r3, [r9]
   15800:	mov	r8, #28
   15804:	str	r3, [r2, #20]
   15808:	ldrd	r0, [sp, #56]	; 0x38
   1580c:	ldr	r2, [sp, #84]	; 0x54
   15810:	b	14500 <__assert_fail@plt+0x3130>
   15814:	mov	r2, #56	; 0x38
   15818:	mov	r1, #0
   1581c:	ldr	r0, [sp, #80]	; 0x50
   15820:	bl	112c8 <memset@plt>
   15824:	ldrd	r2, [r9]
   15828:	cmp	r2, #0
   1582c:	strd	r2, [sp, #56]	; 0x38
   15830:	sbcs	r3, r3, #0
   15834:	blt	1638c <__assert_fail@plt+0x4fbc>
   15838:	ldrd	r2, [sp, #56]	; 0x38
   1583c:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   15840:	orrs	r3, r2, r3
   15844:	beq	1587c <__assert_fail@plt+0x44ac>
   15848:	cmp	r4, #0
   1584c:	sbcs	r3, r5, #0
   15850:	blt	1668c <__assert_fail@plt+0x52bc>
   15854:	ldrd	r2, [sp, #56]	; 0x38
   15858:	mvn	r0, #0
   1585c:	mvn	r1, #-2147483648	; 0x80000000
   15860:	bl	2122c <__assert_fail@plt+0xfe5c>
   15864:	cmp	r0, r4
   15868:	sbcs	r3, r1, r5
   1586c:	movlt	r3, #1
   15870:	movge	r3, #0
   15874:	cmp	r3, #0
   15878:	bne	14228 <__assert_fail@plt+0x2e58>
   1587c:	ldrd	r0, [sp, #56]	; 0x38
   15880:	mov	r8, #77	; 0x4d
   15884:	umull	r2, r3, r4, r0
   15888:	mul	ip, r4, r1
   1588c:	strd	r2, [sp, #56]	; 0x38
   15890:	mla	r3, r0, r5, ip
   15894:	ldr	r2, [sp, #60]	; 0x3c
   15898:	mov	r0, #0
   1589c:	mov	r1, #0
   158a0:	add	r3, r3, r2
   158a4:	str	r3, [sp, #60]	; 0x3c
   158a8:	str	r0, [sp, #84]	; 0x54
   158ac:	mov	r3, #0
   158b0:	strd	r0, [sp, #72]	; 0x48
   158b4:	str	r0, [sp, #92]	; 0x5c
   158b8:	mov	r7, r1
   158bc:	str	r0, [sp, #96]	; 0x60
   158c0:	str	r1, [sp, #100]	; 0x64
   158c4:	str	r1, [sp, #88]	; 0x58
   158c8:	str	r3, [sp, #68]	; 0x44
   158cc:	ldr	r2, [sp, #84]	; 0x54
   158d0:	ldrd	r0, [sp, #56]	; 0x38
   158d4:	b	14500 <__assert_fail@plt+0x3130>
   158d8:	mov	r4, #0
   158dc:	mov	r5, #0
   158e0:	mov	r2, #56	; 0x38
   158e4:	mov	r1, #0
   158e8:	ldr	r0, [sp, #80]	; 0x50
   158ec:	strd	r4, [sp, #72]	; 0x48
   158f0:	bl	112c8 <memset@plt>
   158f4:	mov	r2, r4
   158f8:	mov	r3, r5
   158fc:	str	r4, [sp, #92]	; 0x5c
   15900:	strd	r2, [sp, #56]	; 0x38
   15904:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15908:	mov	r7, r5
   1590c:	str	r3, [sp, #84]	; 0x54
   15910:	ldr	r3, [r9, #-44]	; 0xffffffd4
   15914:	str	r4, [sp, #96]	; 0x60
   15918:	str	r3, [sp, #88]	; 0x58
   1591c:	mov	r3, #0
   15920:	str	r5, [sp, #100]	; 0x64
   15924:	mov	r8, #76	; 0x4c
   15928:	str	r3, [sp, #68]	; 0x44
   1592c:	ldr	r2, [sp, #84]	; 0x54
   15930:	ldrd	r0, [sp, #56]	; 0x38
   15934:	b	14500 <__assert_fail@plt+0x3130>
   15938:	mov	r2, #56	; 0x38
   1593c:	mov	r1, #0
   15940:	ldr	r0, [sp, #80]	; 0x50
   15944:	bl	112c8 <memset@plt>
   15948:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   1594c:	mov	r0, #0
   15950:	mov	r1, #0
   15954:	strd	r2, [r6, #-8]
   15958:	mov	r2, r0
   1595c:	mov	r3, r1
   15960:	mov	r7, r1
   15964:	strd	r2, [sp, #56]	; 0x38
   15968:	mov	r3, #0
   1596c:	strd	r0, [sp, #72]	; 0x48
   15970:	str	r0, [sp, #92]	; 0x5c
   15974:	str	r0, [sp, #96]	; 0x60
   15978:	str	r0, [sp, #84]	; 0x54
   1597c:	mov	r2, r0
   15980:	str	r7, [sp, #100]	; 0x64
   15984:	str	r7, [sp, #88]	; 0x58
   15988:	mov	r8, #75	; 0x4b
   1598c:	str	r3, [sp, #68]	; 0x44
   15990:	ldrd	r0, [sp, #56]	; 0x38
   15994:	b	14500 <__assert_fail@plt+0x3130>
   15998:	ldr	r2, [sp, #64]	; 0x40
   1599c:	ldr	r3, [r9]
   159a0:	mov	r8, #30
   159a4:	str	r3, [r2, #24]
   159a8:	ldrd	r0, [sp, #56]	; 0x38
   159ac:	ldr	r2, [sp, #84]	; 0x54
   159b0:	b	14500 <__assert_fail@plt+0x3130>
   159b4:	ldr	r1, [sp, #64]	; 0x40
   159b8:	mov	r2, #1
   159bc:	mov	r8, #29
   159c0:	ldr	r3, [r1, #168]	; 0xa8
   159c4:	str	r2, [r1, #20]
   159c8:	add	r3, r3, r2
   159cc:	str	r3, [r1, #168]	; 0xa8
   159d0:	ldr	r2, [sp, #84]	; 0x54
   159d4:	ldrd	r0, [sp, #56]	; 0x38
   159d8:	b	14500 <__assert_fail@plt+0x3130>
   159dc:	ldr	r2, [sp, #64]	; 0x40
   159e0:	ldr	r3, [pc, #-3264]	; 14d28 <__assert_fail@plt+0x3958>
   159e4:	mov	r8, #31
   159e8:	str	r3, [r2, #24]
   159ec:	ldrd	r0, [sp, #56]	; 0x38
   159f0:	ldr	r2, [sp, #84]	; 0x54
   159f4:	b	14500 <__assert_fail@plt+0x3130>
   159f8:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   159fc:	ldrd	r2, [r9, #-112]	; 0xffffff90
   15a00:	ldr	r1, [sp, #64]	; 0x40
   15a04:	cmp	r5, #-2147483648	; 0x80000000
   15a08:	cmpeq	r4, #0
   15a0c:	strd	r2, [r1, #56]	; 0x38
   15a10:	beq	16374 <__assert_fail@plt+0x4fa4>
   15a14:	ldrd	r2, [r9, #8]
   15a18:	rsbs	r0, r4, #0
   15a1c:	mov	ip, r1
   15a20:	rsc	r1, r5, #0
   15a24:	cmp	r3, #-2147483648	; 0x80000000
   15a28:	cmpeq	r2, #0
   15a2c:	strd	r0, [ip, #64]	; 0x40
   15a30:	beq	16334 <__assert_fail@plt+0x4f64>
   15a34:	rsbs	r2, r2, #0
   15a38:	ldr	r1, [r9, #16]
   15a3c:	rsc	r3, r3, #0
   15a40:	str	r1, [ip, #48]	; 0x30
   15a44:	strd	r2, [ip, #40]	; 0x28
   15a48:	mov	r8, #44	; 0x2c
   15a4c:	ldr	r2, [sp, #84]	; 0x54
   15a50:	ldrd	r0, [sp, #56]	; 0x38
   15a54:	b	14500 <__assert_fail@plt+0x3130>
   15a58:	ldrd	r2, [r9, #-104]	; 0xffffff98
   15a5c:	ldr	r1, [sp, #64]	; 0x40
   15a60:	ldrd	r4, [r9, #8]
   15a64:	strd	r2, [r1, #64]	; 0x40
   15a68:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   15a6c:	cmp	r5, #-2147483648	; 0x80000000
   15a70:	cmpeq	r4, #0
   15a74:	strd	r2, [r1, #56]	; 0x38
   15a78:	beq	16334 <__assert_fail@plt+0x4f64>
   15a7c:	rsbs	r0, r4, #0
   15a80:	mov	r2, r1
   15a84:	ldr	r3, [r9, #16]
   15a88:	rsc	r1, r5, #0
   15a8c:	str	r3, [r2, #48]	; 0x30
   15a90:	strd	r0, [r2, #40]	; 0x28
   15a94:	mov	r8, #43	; 0x2b
   15a98:	ldr	r2, [sp, #84]	; 0x54
   15a9c:	ldrd	r0, [sp, #56]	; 0x38
   15aa0:	b	14500 <__assert_fail@plt+0x3130>
   15aa4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   15aa8:	mov	r8, #36	; 0x24
   15aac:	ldr	r2, [sp, #64]	; 0x40
   15ab0:	add	r3, r3, #3600	; 0xe10
   15ab4:	ldrd	r0, [sp, #56]	; 0x38
   15ab8:	str	r3, [r2, #24]
   15abc:	ldr	r2, [sp, #84]	; 0x54
   15ac0:	b	14500 <__assert_fail@plt+0x3130>
   15ac4:	ldr	r3, [r9]
   15ac8:	mov	r8, #35	; 0x23
   15acc:	b	15aac <__assert_fail@plt+0x46dc>
   15ad0:	ldrd	r4, [r9]
   15ad4:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15ad8:	ldrb	r1, [r9, #-56]	; 0xffffffc8
   15adc:	strd	r4, [sp, #8]
   15ae0:	ldr	r0, [r9, #-40]	; 0xffffffd8
   15ae4:	str	r0, [sp]
   15ae8:	ldr	r0, [sp, #64]	; 0x40
   15aec:	add	r0, r0, #24
   15af0:	bl	132bc <__assert_fail@plt+0x1eec>
   15af4:	cmp	r0, #0
   15af8:	beq	14228 <__assert_fail@plt+0x2e58>
   15afc:	ldrd	r0, [r9, #-112]	; 0xffffff90
   15b00:	cmp	r0, #0
   15b04:	sbcs	r3, r1, #0
   15b08:	ldr	r3, [sp, #64]	; 0x40
   15b0c:	ldr	ip, [r3, #24]
   15b10:	blt	1634c <__assert_fail@plt+0x4f7c>
   15b14:	cmp	ip, #0
   15b18:	blt	167a4 <__assert_fail@plt+0x53d4>
   15b1c:	mvn	r4, #-2147483648	; 0x80000000
   15b20:	mov	r5, #0
   15b24:	cmp	r4, r0
   15b28:	sbcs	r3, r5, r1
   15b2c:	bge	162dc <__assert_fail@plt+0x4f0c>
   15b30:	ldr	r3, [sp, #64]	; 0x40
   15b34:	add	ip, ip, r0
   15b38:	mov	r0, #1
   15b3c:	str	ip, [r3, #24]
   15b40:	b	1422c <__assert_fail@plt+0x2e5c>
   15b44:	mov	r1, #1
   15b48:	ldrd	r2, [r9]
   15b4c:	str	r1, [sp, #44]	; 0x2c
   15b50:	ldr	r1, [r9, #48]	; 0x30
   15b54:	ldr	r8, [sp, #64]	; 0x40
   15b58:	str	r1, [sp, #40]	; 0x28
   15b5c:	ldrd	r0, [r9, #40]	; 0x28
   15b60:	ldr	ip, [pc, #3664]	; 169b8 <__assert_fail@plt+0x55e8>
   15b64:	strd	r0, [sp, #32]
   15b68:	ldrd	r4, [r9, #32]
   15b6c:	str	ip, [r8, #24]
   15b70:	mov	r0, r8
   15b74:	strd	r4, [sp, #24]
   15b78:	ldrd	r4, [r9, #24]
   15b7c:	strd	r4, [sp, #16]
   15b80:	ldrd	r4, [r9, #16]
   15b84:	strd	r4, [sp, #8]
   15b88:	ldrd	r4, [r9, #8]
   15b8c:	strd	r4, [sp]
   15b90:	bl	12a98 <__assert_fail@plt+0x16c8>
   15b94:	cmp	r0, #0
   15b98:	beq	14228 <__assert_fail@plt+0x2e58>
   15b9c:	mov	r2, #5
   15ba0:	ldr	r1, [pc, #3604]	; 169bc <__assert_fail@plt+0x55ec>
   15ba4:	mov	r0, #0
   15ba8:	bl	11130 <dcgettext@plt>
   15bac:	ldrb	r3, [r8, #181]	; 0xb5
   15bb0:	cmp	r3, #0
   15bb4:	bne	1623c <__assert_fail@plt+0x4e6c>
   15bb8:	mov	r8, #33	; 0x21
   15bbc:	ldr	r2, [sp, #84]	; 0x54
   15bc0:	ldrd	r0, [sp, #56]	; 0x38
   15bc4:	b	14500 <__assert_fail@plt+0x3130>
   15bc8:	ldr	r2, [sp, #64]	; 0x40
   15bcc:	mov	r0, #0
   15bd0:	mov	r1, #0
   15bd4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   15bd8:	strd	r0, [r2, #8]
   15bdc:	str	r3, [r2, #16]
   15be0:	mov	r8, #38	; 0x26
   15be4:	ldr	r2, [sp, #84]	; 0x54
   15be8:	ldrd	r0, [sp, #56]	; 0x38
   15bec:	b	14500 <__assert_fail@plt+0x3130>
   15bf0:	ldr	r4, [sp, #64]	; 0x40
   15bf4:	mov	lr, r9
   15bf8:	add	ip, r4, #32
   15bfc:	str	ip, [sp, #112]	; 0x70
   15c00:	mov	ip, r4
   15c04:	ldrd	r4, [r9, #-168]	; 0xffffff58
   15c08:	ldm	lr!, {r0, r1, r2, r3}
   15c0c:	mov	r8, #46	; 0x2e
   15c10:	strd	r4, [ip, #56]	; 0x38
   15c14:	ldrd	r4, [r9, #-104]	; 0xffffff98
   15c18:	strd	r4, [ip, #64]	; 0x40
   15c1c:	b	14a78 <__assert_fail@plt+0x36a8>
   15c20:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   15c24:	ldrd	r0, [r9, #8]
   15c28:	ldr	ip, [sp, #64]	; 0x40
   15c2c:	mov	r8, #45	; 0x2d
   15c30:	strd	r2, [ip, #56]	; 0x38
   15c34:	strd	r0, [ip, #64]	; 0x40
   15c38:	ldr	r2, [sp, #84]	; 0x54
   15c3c:	ldrd	r0, [sp, #56]	; 0x38
   15c40:	b	14500 <__assert_fail@plt+0x3130>
   15c44:	ldr	r4, [r9, #-208]	; 0xffffff30
   15c48:	ldr	r3, [sp, #64]	; 0x40
   15c4c:	cmp	r4, #3
   15c50:	ldrb	r3, [r3, #181]	; 0xb5
   15c54:	ble	161c0 <__assert_fail@plt+0x4df0>
   15c58:	cmp	r3, #0
   15c5c:	beq	15c8c <__assert_fail@plt+0x48bc>
   15c60:	mov	r2, #5
   15c64:	ldr	r1, [pc, #3412]	; 169c0 <__assert_fail@plt+0x55f0>
   15c68:	mov	r0, #0
   15c6c:	bl	11130 <dcgettext@plt>
   15c70:	ldrd	r2, [r9, #-216]	; 0xffffff28
   15c74:	strd	r2, [sp, #112]	; 0x70
   15c78:	asr	r3, r4, #31
   15c7c:	mov	r5, r3
   15c80:	ldrd	r2, [sp, #112]	; 0x70
   15c84:	strd	r4, [sp]
   15c88:	bl	12a40 <__assert_fail@plt+0x1670>
   15c8c:	sub	lr, r9, #224	; 0xe0
   15c90:	ldr	r4, [sp, #64]	; 0x40
   15c94:	ldm	lr!, {r0, r1, r2, r3}
   15c98:	add	ip, r4, #32
   15c9c:	mov	r8, #42	; 0x2a
   15ca0:	stmia	ip!, {r0, r1, r2, r3}
   15ca4:	ldm	lr, {r0, r1}
   15ca8:	ldrd	r2, [r9, #8]
   15cac:	stm	ip, {r0, r1}
   15cb0:	mov	r1, r4
   15cb4:	ldrd	r4, [r9, #-104]	; 0xffffff98
   15cb8:	strd	r2, [r1, #64]	; 0x40
   15cbc:	ldr	r2, [sp, #84]	; 0x54
   15cc0:	strd	r4, [r1, #56]	; 0x38
   15cc4:	ldrd	r0, [sp, #56]	; 0x38
   15cc8:	b	14500 <__assert_fail@plt+0x3130>
   15ccc:	ldrd	r2, [r9, #-104]	; 0xffffff98
   15cd0:	ldrd	r0, [r9, #8]
   15cd4:	ldr	ip, [sp, #64]	; 0x40
   15cd8:	mov	r8, #41	; 0x29
   15cdc:	strd	r2, [ip, #56]	; 0x38
   15ce0:	strd	r0, [ip, #64]	; 0x40
   15ce4:	ldr	r2, [sp, #84]	; 0x54
   15ce8:	ldrd	r0, [sp, #56]	; 0x38
   15cec:	b	14500 <__assert_fail@plt+0x3130>
   15cf0:	ldr	ip, [sp, #64]	; 0x40
   15cf4:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   15cf8:	ldr	r0, [r9]
   15cfc:	mov	r1, #1
   15d00:	strd	r2, [ip, #8]
   15d04:	str	r0, [ip, #16]
   15d08:	strb	r1, [ip, #188]	; 0xbc
   15d0c:	mov	r8, #39	; 0x27
   15d10:	ldr	r2, [sp, #84]	; 0x54
   15d14:	ldrd	r0, [sp, #56]	; 0x38
   15d18:	b	14500 <__assert_fail@plt+0x3130>
   15d1c:	ldr	r2, [sp, #64]	; 0x40
   15d20:	mov	r0, #0
   15d24:	mov	r1, #0
   15d28:	ldr	r3, [r9]
   15d2c:	strd	r0, [r2, #8]
   15d30:	str	r3, [r2, #16]
   15d34:	mov	r8, #37	; 0x25
   15d38:	ldr	r2, [sp, #84]	; 0x54
   15d3c:	ldrd	r0, [sp, #56]	; 0x38
   15d40:	b	14500 <__assert_fail@plt+0x3130>
   15d44:	mvn	r2, #9
   15d48:	ldrb	r0, [r4, #1]
   15d4c:	add	r5, r6, r2
   15d50:	add	r1, r4, #1
   15d54:	sub	r6, r0, #48	; 0x30
   15d58:	cmp	r6, #9
   15d5c:	bls	15eec <__assert_fail@plt+0x4b1c>
   15d60:	mov	ip, r4
   15d64:	mov	r2, r5
   15d68:	mov	r4, r7
   15d6c:	mov	r5, r0
   15d70:	mov	r7, r3
   15d74:	mov	r3, ip
   15d78:	and	r5, r5, #253	; 0xfd
   15d7c:	cmp	r5, #44	; 0x2c
   15d80:	bne	16178 <__assert_fail@plt+0x4da8>
   15d84:	ldrb	r0, [r1, #1]
   15d88:	sub	r0, r0, #48	; 0x30
   15d8c:	cmp	r0, #9
   15d90:	bhi	16178 <__assert_fail@plt+0x4da8>
   15d94:	ldrb	lr, [r1, #2]
   15d98:	add	r4, r0, r0, lsl #2
   15d9c:	add	r0, r1, #2
   15da0:	sub	ip, lr, #48	; 0x30
   15da4:	cmp	ip, #9
   15da8:	lsl	r4, r4, #1
   15dac:	ldrbls	lr, [r3, #4]
   15db0:	addls	r4, r4, ip
   15db4:	addls	r0, r1, #3
   15db8:	subls	ip, lr, #48	; 0x30
   15dbc:	add	r3, r4, r4, lsl #2
   15dc0:	cmp	ip, #9
   15dc4:	lsl	r3, r3, #1
   15dc8:	ldrbls	lr, [r0, #1]
   15dcc:	addls	r3, r3, ip
   15dd0:	addls	r0, r0, #1
   15dd4:	subls	ip, lr, #48	; 0x30
   15dd8:	add	r3, r3, r3, lsl #2
   15ddc:	cmp	ip, #9
   15de0:	lsl	r3, r3, #1
   15de4:	ldrbls	lr, [r0, #1]
   15de8:	addls	r3, r3, ip
   15dec:	addls	r0, r0, #1
   15df0:	subls	ip, lr, #48	; 0x30
   15df4:	add	r3, r3, r3, lsl #2
   15df8:	cmp	ip, #9
   15dfc:	lsl	r3, r3, #1
   15e00:	ldrbls	lr, [r0, #1]
   15e04:	addls	r3, r3, ip
   15e08:	addls	r0, r0, #1
   15e0c:	subls	ip, lr, #48	; 0x30
   15e10:	add	r3, r3, r3, lsl #2
   15e14:	cmp	ip, #9
   15e18:	lsl	r3, r3, #1
   15e1c:	ldrbls	lr, [r0, #1]
   15e20:	addls	r3, r3, ip
   15e24:	addls	r0, r0, #1
   15e28:	subls	ip, lr, #48	; 0x30
   15e2c:	add	r3, r3, r3, lsl #2
   15e30:	cmp	ip, #9
   15e34:	lsl	r3, r3, #1
   15e38:	ldrbls	lr, [r0, #1]
   15e3c:	addls	r3, r3, ip
   15e40:	addls	r0, r0, #1
   15e44:	subls	ip, lr, #48	; 0x30
   15e48:	add	r3, r3, r3, lsl #2
   15e4c:	cmp	ip, #9
   15e50:	lsl	r3, r3, #1
   15e54:	ldrbls	lr, [r0, #1]
   15e58:	addls	r3, r3, ip
   15e5c:	addls	r0, r0, #1
   15e60:	subls	ip, lr, #48	; 0x30
   15e64:	add	r3, r3, r3, lsl #2
   15e68:	cmp	ip, #9
   15e6c:	lsl	r3, r3, #1
   15e70:	ldrbls	lr, [r0, #1]
   15e74:	addls	r3, r3, ip
   15e78:	addls	r0, r0, #1
   15e7c:	ldr	r1, [sp, #52]	; 0x34
   15e80:	cmn	r1, #1
   15e84:	beq	16968 <__assert_fail@plt+0x5598>
   15e88:	mov	ip, r0
   15e8c:	add	r0, r0, #1
   15e90:	ldrb	r1, [ip]
   15e94:	sub	r1, r1, #48	; 0x30
   15e98:	cmp	r1, #9
   15e9c:	bls	15e88 <__assert_fail@plt+0x4ab8>
   15ea0:	ldr	r1, [sp, #56]	; 0x38
   15ea4:	cmp	r3, #0
   15ea8:	moveq	r1, #0
   15eac:	andne	r1, r1, #1
   15eb0:	cmp	r1, #0
   15eb4:	beq	16930 <__assert_fail@plt+0x5560>
   15eb8:	cmp	r2, #-2147483648	; 0x80000000
   15ebc:	beq	16888 <__assert_fail@plt+0x54b8>
   15ec0:	ldr	r1, [pc, #2812]	; 169c4 <__assert_fail@plt+0x55f4>
   15ec4:	sub	r2, r2, #1
   15ec8:	sub	r1, r1, r3
   15ecc:	ldr	r3, [sp, #64]	; 0x40
   15ed0:	str	r2, [sp, #248]	; 0xf8
   15ed4:	str	r1, [sp, #252]	; 0xfc
   15ed8:	str	ip, [r3]
   15edc:	mov	r3, #276	; 0x114
   15ee0:	mov	r0, #21
   15ee4:	str	r3, [sp, #52]	; 0x34
   15ee8:	b	13f4c <__assert_fail@plt+0x2b7c>
   15eec:	mov	r4, r1
   15ef0:	b	14298 <__assert_fail@plt+0x2ec8>
   15ef4:	cmn	r5, #1
   15ef8:	beq	15d44 <__assert_fail@plt+0x4974>
   15efc:	mov	r1, r5
   15f00:	mov	r0, #-2147483648	; 0x80000000
   15f04:	str	r3, [sp, #68]	; 0x44
   15f08:	bl	20fec <__assert_fail@plt+0xfc1c>
   15f0c:	ldr	r3, [sp, #68]	; 0x44
   15f10:	cmp	r0, #9
   15f14:	bgt	142ac <__assert_fail@plt+0x2edc>
   15f18:	mov	r7, r3
   15f1c:	mov	r3, #63	; 0x3f
   15f20:	str	r3, [sp, #52]	; 0x34
   15f24:	b	142d8 <__assert_fail@plt+0x2f08>
   15f28:	mov	r3, r4
   15f2c:	mov	r2, #0
   15f30:	ldr	r6, [pc, #2704]	; 169c8 <__assert_fail@plt+0x55f8>
   15f34:	mov	r4, r2
   15f38:	mov	r2, r7
   15f3c:	mov	r7, r3
   15f40:	cmp	r4, #0
   15f44:	blt	15fac <__assert_fail@plt+0x4bdc>
   15f48:	cmp	r4, r6
   15f4c:	bgt	15f6c <__assert_fail@plt+0x4b9c>
   15f50:	add	r4, r4, r4, lsl #2
   15f54:	rsbs	r1, r5, #48	; 0x30
   15f58:	rsb	r0, r1, #-2147483648	; 0x80000000
   15f5c:	lsl	r4, r4, #1
   15f60:	beq	15f74 <__assert_fail@plt+0x4ba4>
   15f64:	cmp	r4, r0
   15f68:	bge	15f74 <__assert_fail@plt+0x4ba4>
   15f6c:	mov	r7, r2
   15f70:	b	142d0 <__assert_fail@plt+0x2f00>
   15f74:	ldrb	r5, [r7, #1]
   15f78:	add	r4, r1, r4
   15f7c:	sub	r1, r5, #48	; 0x30
   15f80:	cmp	r1, #9
   15f84:	add	r1, r7, #1
   15f88:	bls	15fa4 <__assert_fail@plt+0x4bd4>
   15f8c:	mov	r0, r7
   15f90:	mov	r7, r2
   15f94:	mov	r2, r4
   15f98:	mov	r4, r3
   15f9c:	mov	r3, r0
   15fa0:	b	15d78 <__assert_fail@plt+0x49a8>
   15fa4:	mov	r7, r1
   15fa8:	b	15f40 <__assert_fail@plt+0x4b70>
   15fac:	cmn	r4, #1
   15fb0:	mov	r1, r4
   15fb4:	mov	r0, #-2147483648	; 0x80000000
   15fb8:	beq	15f50 <__assert_fail@plt+0x4b80>
   15fbc:	str	r2, [sp, #72]	; 0x48
   15fc0:	str	r3, [sp, #68]	; 0x44
   15fc4:	bl	20fec <__assert_fail@plt+0xfc1c>
   15fc8:	ldr	r2, [sp, #72]	; 0x48
   15fcc:	cmp	r0, #9
   15fd0:	ble	15f6c <__assert_fail@plt+0x4b9c>
   15fd4:	ldr	r3, [sp, #68]	; 0x44
   15fd8:	b	15f50 <__assert_fail@plt+0x4b80>
   15fdc:	mov	r0, #0
   15fe0:	b	1422c <__assert_fail@plt+0x2e5c>
   15fe4:	mov	r0, #2
   15fe8:	b	1422c <__assert_fail@plt+0x2e5c>
   15fec:	add	r3, sp, #152	; 0x98
   15ff0:	add	r6, sp, #140	; 0x8c
   15ff4:	add	r2, r3, #7
   15ff8:	mov	r3, r6
   15ffc:	ldr	r1, [sp, #64]	; 0x40
   16000:	add	r4, r4, #1
   16004:	cmp	r3, r2
   16008:	strbcc	r5, [r3]
   1600c:	str	r4, [r1]
   16010:	ldrb	r5, [r4]
   16014:	addcc	r3, r3, #1
   16018:	cmp	r5, #65	; 0x41
   1601c:	sub	r1, r5, #97	; 0x61
   16020:	bcc	16034 <__assert_fail@plt+0x4c64>
   16024:	cmp	r5, #90	; 0x5a
   16028:	bls	15ffc <__assert_fail@plt+0x4c2c>
   1602c:	cmp	r1, #25
   16030:	bls	15ffc <__assert_fail@plt+0x4c2c>
   16034:	cmp	r5, #46	; 0x2e
   16038:	beq	15ffc <__assert_fail@plt+0x4c2c>
   1603c:	mov	r2, #0
   16040:	strb	r2, [r3]
   16044:	ldrb	r3, [sp, #140]	; 0x8c
   16048:	cmp	r3, r2
   1604c:	movne	r2, r6
   16050:	beq	16070 <__assert_fail@plt+0x4ca0>
   16054:	sub	r1, r3, #97	; 0x61
   16058:	cmp	r1, #25
   1605c:	subls	r3, r3, #32
   16060:	strb	r3, [r2]
   16064:	ldrb	r3, [r2, #1]!
   16068:	cmp	r3, #0
   1606c:	bne	16054 <__assert_fail@plt+0x4c84>
   16070:	ldr	r4, [pc, #2388]	; 169cc <__assert_fail@plt+0x55fc>
   16074:	ldr	r1, [pc, #2388]	; 169d0 <__assert_fail@plt+0x5600>
   16078:	b	16088 <__assert_fail@plt+0x4cb8>
   1607c:	ldr	r1, [r4, #12]!
   16080:	cmp	r1, #0
   16084:	beq	167c0 <__assert_fail@plt+0x53f0>
   16088:	mov	r0, r6
   1608c:	bl	110a0 <strcmp@plt>
   16090:	cmp	r0, #0
   16094:	bne	1607c <__assert_fail@plt+0x4cac>
   16098:	ldr	r2, [r4, #8]
   1609c:	ldr	r3, [r4, #4]
   160a0:	str	r3, [sp, #52]	; 0x34
   160a4:	asr	r3, r2, #31
   160a8:	b	16818 <__assert_fail@plt+0x5448>
   160ac:	ldr	r2, [sp, #112]	; 0x70
   160b0:	cmp	r2, #4
   160b4:	bgt	1646c <__assert_fail@plt+0x509c>
   160b8:	ldr	r1, [sp, #64]	; 0x40
   160bc:	cmp	r2, #2
   160c0:	ldr	r3, [r1, #172]	; 0xac
   160c4:	add	r3, r3, #1
   160c8:	str	r3, [r1, #172]	; 0xac
   160cc:	ble	166cc <__assert_fail@plt+0x52fc>
   160d0:	mov	r2, #100	; 0x64
   160d4:	mov	r3, #0
   160d8:	mov	r0, r8
   160dc:	mov	r1, r4
   160e0:	bl	2122c <__assert_fail@plt+0xfe5c>
   160e4:	mov	r2, #100	; 0x64
   160e8:	mov	r3, #0
   160ec:	mov	lr, r0
   160f0:	mov	ip, r1
   160f4:	mov	r0, r8
   160f8:	mov	r1, r4
   160fc:	mov	r8, lr
   16100:	mov	r4, ip
   16104:	bl	2122c <__assert_fail@plt+0xfe5c>
   16108:	ldr	r0, [sp, #64]	; 0x40
   1610c:	b	15190 <__assert_fail@plt+0x3dc0>
   16110:	ldr	r2, [sp, #132]	; 0x84
   16114:	cmp	r2, #4
   16118:	bgt	16254 <__assert_fail@plt+0x4e84>
   1611c:	ldr	r1, [sp, #64]	; 0x40
   16120:	cmp	r2, #2
   16124:	ldr	r3, [r1, #172]	; 0xac
   16128:	add	r3, r3, #1
   1612c:	str	r3, [r1, #172]	; 0xac
   16130:	ble	16634 <__assert_fail@plt+0x5264>
   16134:	ldr	r5, [sp, #112]	; 0x70
   16138:	mov	r2, #100	; 0x64
   1613c:	mov	r3, #0
   16140:	mov	r1, r4
   16144:	mov	r0, r5
   16148:	bl	2122c <__assert_fail@plt+0xfe5c>
   1614c:	mov	r2, #100	; 0x64
   16150:	mov	r3, #0
   16154:	mov	lr, r0
   16158:	mov	ip, r1
   1615c:	mov	r0, r5
   16160:	mov	r1, r4
   16164:	str	lr, [sp, #112]	; 0x70
   16168:	mov	r4, ip
   1616c:	bl	2122c <__assert_fail@plt+0xfe5c>
   16170:	ldr	r0, [sp, #64]	; 0x40
   16174:	b	153f4 <__assert_fail@plt+0x4024>
   16178:	ldrb	ip, [sp, #56]	; 0x38
   1617c:	ldr	r3, [sp, #52]	; 0x34
   16180:	ldr	r0, [pc, #2124]	; 169d4 <__assert_fail@plt+0x5604>
   16184:	strb	ip, [sp, #248]	; 0xf8
   16188:	sub	ip, r1, r4
   1618c:	str	ip, [sp, #128]	; 0x80
   16190:	ldr	ip, [sp, #64]	; 0x40
   16194:	cmp	r3, #0
   16198:	mov	r4, r2
   1619c:	ldr	r3, [pc, #2100]	; 169d8 <__assert_fail@plt+0x5608>
   161a0:	asr	r5, r2, #31
   161a4:	movne	r3, r0
   161a8:	str	r1, [ip]
   161ac:	str	r3, [sp, #52]	; 0x34
   161b0:	movne	r0, #19
   161b4:	moveq	r0, #20
   161b8:	strd	r4, [sp, #120]	; 0x78
   161bc:	b	13f4c <__assert_fail@plt+0x2b7c>
   161c0:	cmp	r3, #0
   161c4:	bne	16780 <__assert_fail@plt+0x53b0>
   161c8:	ldrd	r2, [r9, #-216]	; 0xffffff28
   161cc:	mov	r4, r2
   161d0:	mov	r5, r3
   161d4:	ldr	ip, [sp, #64]	; 0x40
   161d8:	mov	lr, r9
   161dc:	strd	r4, [ip, #56]	; 0x38
   161e0:	ldm	lr!, {r0, r1, r2, r3}
   161e4:	mov	r4, ip
   161e8:	mov	r8, r4
   161ec:	ldrd	r4, [r9, #-104]	; 0xffffff98
   161f0:	add	ip, ip, #32
   161f4:	strd	r4, [r8, #64]	; 0x40
   161f8:	stmia	ip!, {r0, r1, r2, r3}
   161fc:	mov	r8, #42	; 0x2a
   16200:	ldm	lr, {r0, r1}
   16204:	ldr	r2, [sp, #84]	; 0x54
   16208:	stm	ip, {r0, r1}
   1620c:	ldrd	r0, [sp, #56]	; 0x38
   16210:	b	14500 <__assert_fail@plt+0x3130>
   16214:	mov	r3, #0
   16218:	str	r3, [sp, #56]	; 0x38
   1621c:	str	r3, [sp, #52]	; 0x34
   16220:	b	14288 <__assert_fail@plt+0x2eb8>
   16224:	ldr	r1, [sp, #64]	; 0x40
   16228:	bl	1397c <__assert_fail@plt+0x25ac>
   1622c:	mov	r8, #11
   16230:	ldr	r2, [sp, #84]	; 0x54
   16234:	ldrd	r0, [sp, #56]	; 0x38
   16238:	b	14500 <__assert_fail@plt+0x3130>
   1623c:	ldr	r1, [sp, #64]	; 0x40
   16240:	bl	13574 <__assert_fail@plt+0x21a4>
   16244:	mov	r8, #33	; 0x21
   16248:	ldr	r2, [sp, #84]	; 0x54
   1624c:	ldrd	r0, [sp, #56]	; 0x38
   16250:	b	14500 <__assert_fail@plt+0x3130>
   16254:	ldr	r2, [sp, #64]	; 0x40
   16258:	ldr	r5, [sp, #112]	; 0x70
   1625c:	add	r8, r8, #1
   16260:	str	r8, [r2, #156]	; 0x9c
   16264:	mov	r1, r4
   16268:	mov	r2, #100	; 0x64
   1626c:	mov	r3, #0
   16270:	mov	r0, r5
   16274:	bl	2122c <__assert_fail@plt+0xfe5c>
   16278:	ldr	ip, [sp, #64]	; 0x40
   1627c:	mov	r1, r4
   16280:	mov	r0, r5
   16284:	mov	r8, #88	; 0x58
   16288:	strd	r2, [ip, #64]	; 0x40
   1628c:	mov	r2, #100	; 0x64
   16290:	mov	r3, #0
   16294:	bl	2122c <__assert_fail@plt+0xfe5c>
   16298:	mov	r2, #100	; 0x64
   1629c:	mov	r3, #0
   162a0:	bl	2122c <__assert_fail@plt+0xfe5c>
   162a4:	mov	r1, r4
   162a8:	ldr	r4, [sp, #64]	; 0x40
   162ac:	mov	r0, r5
   162b0:	strd	r2, [r4, #56]	; 0x38
   162b4:	ldr	r2, [pc, #1824]	; 169dc <__assert_fail@plt+0x560c>
   162b8:	mov	r3, #0
   162bc:	bl	2122c <__assert_fail@plt+0xfe5c>
   162c0:	ldr	r3, [sp, #132]	; 0x84
   162c4:	ldr	r2, [sp, #84]	; 0x54
   162c8:	sub	r3, r3, #4
   162cc:	str	r3, [r4, #48]	; 0x30
   162d0:	strd	r0, [r4, #40]	; 0x28
   162d4:	ldrd	r0, [sp, #56]	; 0x38
   162d8:	b	14500 <__assert_fail@plt+0x3130>
   162dc:	subs	r2, r4, r0
   162e0:	sbc	r3, r5, r1
   162e4:	asr	r5, ip, #31
   162e8:	cmp	r2, ip
   162ec:	sbcs	r3, r3, r5
   162f0:	movlt	r3, #1
   162f4:	movge	r3, #0
   162f8:	cmp	r3, #0
   162fc:	bne	15b30 <__assert_fail@plt+0x4760>
   16300:	ldr	r3, [sp, #64]	; 0x40
   16304:	add	r0, ip, r0
   16308:	mov	r8, #34	; 0x22
   1630c:	str	r0, [r3, #24]
   16310:	ldr	r2, [sp, #84]	; 0x54
   16314:	ldrd	r0, [sp, #56]	; 0x38
   16318:	b	14500 <__assert_fail@plt+0x3130>
   1631c:	ldr	r1, [sp, #64]	; 0x40
   16320:	bl	1397c <__assert_fail@plt+0x25ac>
   16324:	mov	r8, #14
   16328:	ldr	r2, [sp, #84]	; 0x54
   1632c:	ldrd	r0, [sp, #56]	; 0x38
   16330:	b	14500 <__assert_fail@plt+0x3130>
   16334:	ldr	r1, [sp, #64]	; 0x40
   16338:	mov	r2, #0
   1633c:	mov	r3, #-2147483648	; 0x80000000
   16340:	mov	r0, #1
   16344:	strd	r2, [r1, #40]	; 0x28
   16348:	b	1422c <__assert_fail@plt+0x2e5c>
   1634c:	mov	r2, #-2147483648	; 0x80000000
   16350:	subs	r2, r2, r0
   16354:	mvn	r3, #0
   16358:	sbc	r3, r3, r1
   1635c:	asr	r5, ip, #31
   16360:	cmp	ip, r2
   16364:	sbcs	r3, r5, r3
   16368:	movlt	r3, #1
   1636c:	movge	r3, #0
   16370:	b	162f8 <__assert_fail@plt+0x4f28>
   16374:	ldr	r1, [sp, #64]	; 0x40
   16378:	mov	r2, #0
   1637c:	mov	r3, #-2147483648	; 0x80000000
   16380:	mov	r0, #1
   16384:	strd	r2, [r1, #64]	; 0x40
   16388:	b	1422c <__assert_fail@plt+0x2e5c>
   1638c:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   16390:	cmp	r4, #0
   16394:	sbcs	r3, r5, #0
   16398:	blt	166dc <__assert_fail@plt+0x530c>
   1639c:	ldrd	r0, [sp, #56]	; 0x38
   163a0:	mvn	r3, #0
   163a4:	mvn	r2, #0
   163a8:	cmp	r1, r3
   163ac:	cmpeq	r0, r2
   163b0:	beq	1587c <__assert_fail@plt+0x44ac>
   163b4:	mov	r3, r1
   163b8:	mov	r2, r0
   163bc:	mov	r1, #-2147483648	; 0x80000000
   163c0:	mov	r0, #0
   163c4:	bl	2122c <__assert_fail@plt+0xfe5c>
   163c8:	cmp	r0, r4
   163cc:	sbcs	r3, r1, r5
   163d0:	blt	14228 <__assert_fail@plt+0x2e58>
   163d4:	b	1587c <__assert_fail@plt+0x44ac>
   163d8:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   163dc:	cmp	r4, #0
   163e0:	sbcs	r3, r5, #0
   163e4:	blt	16644 <__assert_fail@plt+0x5274>
   163e8:	ldrd	r0, [sp, #56]	; 0x38
   163ec:	mvn	r3, #0
   163f0:	mvn	r2, #0
   163f4:	cmp	r1, r3
   163f8:	cmpeq	r0, r2
   163fc:	beq	14630 <__assert_fail@plt+0x3260>
   16400:	mov	r3, r1
   16404:	mov	r2, r0
   16408:	mov	r1, #-2147483648	; 0x80000000
   1640c:	mov	r0, #0
   16410:	bl	2122c <__assert_fail@plt+0xfe5c>
   16414:	cmp	r0, r4
   16418:	sbcs	r3, r1, r5
   1641c:	blt	14228 <__assert_fail@plt+0x2e58>
   16420:	b	14630 <__assert_fail@plt+0x3260>
   16424:	ldr	r1, [sp, #64]	; 0x40
   16428:	bl	1397c <__assert_fail@plt+0x25ac>
   1642c:	mov	r8, #9
   16430:	ldr	r2, [sp, #84]	; 0x54
   16434:	ldrd	r0, [sp, #56]	; 0x38
   16438:	b	14500 <__assert_fail@plt+0x3130>
   1643c:	ldr	r1, [sp, #64]	; 0x40
   16440:	bl	13574 <__assert_fail@plt+0x21a4>
   16444:	mov	r8, #13
   16448:	ldr	r2, [sp, #84]	; 0x54
   1644c:	ldrd	r0, [sp, #56]	; 0x38
   16450:	b	14500 <__assert_fail@plt+0x3130>
   16454:	ldr	r1, [sp, #64]	; 0x40
   16458:	bl	1397c <__assert_fail@plt+0x25ac>
   1645c:	mov	r8, #7
   16460:	ldr	r2, [sp, #84]	; 0x54
   16464:	ldrd	r0, [sp, #56]	; 0x38
   16468:	b	14500 <__assert_fail@plt+0x3130>
   1646c:	ldr	r5, [sp, #64]	; 0x40
   16470:	ldr	r3, [sp, #132]	; 0x84
   16474:	mov	r0, r8
   16478:	add	r3, r3, #1
   1647c:	str	r3, [r5, #156]	; 0x9c
   16480:	mov	r2, #100	; 0x64
   16484:	mov	r3, #0
   16488:	mov	r1, r4
   1648c:	bl	2122c <__assert_fail@plt+0xfe5c>
   16490:	mov	r0, r8
   16494:	mov	r1, r4
   16498:	strd	r2, [r5, #64]	; 0x40
   1649c:	mov	r2, #100	; 0x64
   164a0:	mov	r3, #0
   164a4:	bl	2122c <__assert_fail@plt+0xfe5c>
   164a8:	mov	r2, #100	; 0x64
   164ac:	mov	r3, #0
   164b0:	bl	2122c <__assert_fail@plt+0xfe5c>
   164b4:	mov	r0, r8
   164b8:	mov	r1, r4
   164bc:	strd	r2, [r5, #56]	; 0x38
   164c0:	mov	r3, #0
   164c4:	ldr	r2, [pc, #1296]	; 169dc <__assert_fail@plt+0x560c>
   164c8:	bl	2122c <__assert_fail@plt+0xfe5c>
   164cc:	ldr	r3, [sp, #112]	; 0x70
   164d0:	sub	r8, r3, #4
   164d4:	str	r8, [r5, #48]	; 0x30
   164d8:	strd	r0, [r5, #40]	; 0x28
   164dc:	mov	r0, r5
   164e0:	b	151b0 <__assert_fail@plt+0x3de0>
   164e4:	ldr	r1, [sp, #64]	; 0x40
   164e8:	bl	13574 <__assert_fail@plt+0x21a4>
   164ec:	mov	r8, #32
   164f0:	ldr	r2, [sp, #84]	; 0x54
   164f4:	ldrd	r0, [sp, #56]	; 0x38
   164f8:	b	14500 <__assert_fail@plt+0x3130>
   164fc:	ldr	r1, [sp, #64]	; 0x40
   16500:	bl	1397c <__assert_fail@plt+0x25ac>
   16504:	mov	r8, #8
   16508:	ldr	r2, [sp, #84]	; 0x54
   1650c:	ldrd	r0, [sp, #56]	; 0x38
   16510:	b	14500 <__assert_fail@plt+0x3130>
   16514:	ldr	r1, [sp, #64]	; 0x40
   16518:	bl	13574 <__assert_fail@plt+0x21a4>
   1651c:	mov	r8, #15
   16520:	ldr	r2, [sp, #84]	; 0x54
   16524:	ldrd	r0, [sp, #56]	; 0x38
   16528:	b	14500 <__assert_fail@plt+0x3130>
   1652c:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   16530:	cmp	r4, #0
   16534:	sbcs	r3, r5, #0
   16538:	blt	16668 <__assert_fail@plt+0x5298>
   1653c:	ldrd	r0, [sp, #56]	; 0x38
   16540:	mvn	r3, #0
   16544:	mvn	r2, #0
   16548:	cmp	r1, r3
   1654c:	cmpeq	r0, r2
   16550:	beq	14c94 <__assert_fail@plt+0x38c4>
   16554:	mov	r3, r1
   16558:	mov	r2, r0
   1655c:	mov	r1, #-2147483648	; 0x80000000
   16560:	mov	r0, #0
   16564:	bl	2122c <__assert_fail@plt+0xfe5c>
   16568:	cmp	r0, r4
   1656c:	sbcs	r3, r1, r5
   16570:	blt	14228 <__assert_fail@plt+0x2e58>
   16574:	b	14c94 <__assert_fail@plt+0x38c4>
   16578:	ldr	r1, [sp, #64]	; 0x40
   1657c:	bl	1397c <__assert_fail@plt+0x25ac>
   16580:	mov	r8, #12
   16584:	ldr	r2, [sp, #84]	; 0x54
   16588:	ldrd	r0, [sp, #56]	; 0x38
   1658c:	b	14500 <__assert_fail@plt+0x3130>
   16590:	ldr	r1, [sp, #64]	; 0x40
   16594:	bl	1397c <__assert_fail@plt+0x25ac>
   16598:	mov	r8, #10
   1659c:	ldr	r2, [sp, #84]	; 0x54
   165a0:	ldrd	r0, [sp, #56]	; 0x38
   165a4:	b	14500 <__assert_fail@plt+0x3130>
   165a8:	ldr	r1, [sp, #64]	; 0x40
   165ac:	bl	1397c <__assert_fail@plt+0x25ac>
   165b0:	mov	r8, #4
   165b4:	ldr	r2, [sp, #84]	; 0x54
   165b8:	ldrd	r0, [sp, #56]	; 0x38
   165bc:	b	14500 <__assert_fail@plt+0x3130>
   165c0:	add	lr, sp, #184	; 0xb8
   165c4:	str	r4, [sp, #196]	; 0xc4
   165c8:	str	r1, [sp, #200]	; 0xc8
   165cc:	str	r8, [sp, #192]	; 0xc0
   165d0:	ldm	lr!, {r0, r1, r2, r3}
   165d4:	add	ip, r5, #32
   165d8:	mov	r4, #1
   165dc:	strb	r4, [r5, #180]	; 0xb4
   165e0:	stmia	ip!, {r0, r1, r2, r3}
   165e4:	ldm	lr, {r0, r1}
   165e8:	stm	ip, {r0, r1}
   165ec:	mov	r0, r5
   165f0:	b	151b0 <__assert_fail@plt+0x3de0>
   165f4:	ldr	r3, [sp, #112]	; 0x70
   165f8:	add	ip, sp, #160	; 0xa0
   165fc:	str	r4, [sp, #172]	; 0xac
   16600:	str	r0, [sp, #176]	; 0xb0
   16604:	str	r3, [sp, #168]	; 0xa8
   16608:	ldm	ip!, {r0, r1, r2, r3}
   1660c:	add	lr, r5, #32
   16610:	mov	r4, #1
   16614:	strb	r4, [r5, #180]	; 0xb4
   16618:	stmia	lr!, {r0, r1, r2, r3}
   1661c:	mov	r8, #88	; 0x58
   16620:	ldm	ip, {r0, r1}
   16624:	ldr	r2, [sp, #84]	; 0x54
   16628:	stm	lr, {r0, r1}
   1662c:	ldrd	r0, [sp, #56]	; 0x38
   16630:	b	14500 <__assert_fail@plt+0x3130>
   16634:	mov	r2, #0
   16638:	mov	r3, #0
   1663c:	mov	r0, r1
   16640:	b	153f4 <__assert_fail@plt+0x4024>
   16644:	ldrd	r2, [sp, #56]	; 0x38
   16648:	mvn	r0, #0
   1664c:	mvn	r1, #-2147483648	; 0x80000000
   16650:	bl	2122c <__assert_fail@plt+0xfe5c>
   16654:	cmp	r4, r0
   16658:	sbcs	r3, r5, r1
   1665c:	movlt	r3, #1
   16660:	movge	r3, #0
   16664:	b	14628 <__assert_fail@plt+0x3258>
   16668:	ldrd	r2, [sp, #56]	; 0x38
   1666c:	mvn	r0, #0
   16670:	mvn	r1, #-2147483648	; 0x80000000
   16674:	bl	2122c <__assert_fail@plt+0xfe5c>
   16678:	cmp	r4, r0
   1667c:	sbcs	r3, r5, r1
   16680:	movlt	r3, #1
   16684:	movge	r3, #0
   16688:	b	14c8c <__assert_fail@plt+0x38bc>
   1668c:	mvn	r3, #0
   16690:	mvn	r2, #0
   16694:	cmp	r5, r3
   16698:	cmpeq	r4, r2
   1669c:	beq	1587c <__assert_fail@plt+0x44ac>
   166a0:	mov	r2, r4
   166a4:	mov	r3, r5
   166a8:	mov	r0, #0
   166ac:	mov	r1, #-2147483648	; 0x80000000
   166b0:	bl	2122c <__assert_fail@plt+0xfe5c>
   166b4:	ldrd	r2, [sp, #56]	; 0x38
   166b8:	cmp	r0, r2
   166bc:	sbcs	r3, r1, r3
   166c0:	movlt	r3, #1
   166c4:	movge	r3, #0
   166c8:	b	15874 <__assert_fail@plt+0x44a4>
   166cc:	mov	r2, #0
   166d0:	mov	r3, #0
   166d4:	mov	r0, r1
   166d8:	b	15190 <__assert_fail@plt+0x3dc0>
   166dc:	ldrd	r2, [sp, #56]	; 0x38
   166e0:	mvn	r0, #0
   166e4:	mvn	r1, #-2147483648	; 0x80000000
   166e8:	bl	2122c <__assert_fail@plt+0xfe5c>
   166ec:	cmp	r4, r0
   166f0:	sbcs	r3, r5, r1
   166f4:	movlt	r3, #1
   166f8:	movge	r3, #0
   166fc:	b	15874 <__assert_fail@plt+0x44a4>
   16700:	mvn	r3, #0
   16704:	mvn	r2, #0
   16708:	cmp	r5, r3
   1670c:	cmpeq	r4, r2
   16710:	beq	14c94 <__assert_fail@plt+0x38c4>
   16714:	mov	r2, r4
   16718:	mov	r3, r5
   1671c:	mov	r0, #0
   16720:	mov	r1, #-2147483648	; 0x80000000
   16724:	bl	2122c <__assert_fail@plt+0xfe5c>
   16728:	ldrd	r2, [sp, #56]	; 0x38
   1672c:	cmp	r0, r2
   16730:	sbcs	r3, r1, r3
   16734:	movlt	r3, #1
   16738:	movge	r3, #0
   1673c:	b	14c8c <__assert_fail@plt+0x38bc>
   16740:	mvn	r3, #0
   16744:	mvn	r2, #0
   16748:	cmp	r5, r3
   1674c:	cmpeq	r4, r2
   16750:	beq	14630 <__assert_fail@plt+0x3260>
   16754:	mov	r2, r4
   16758:	mov	r3, r5
   1675c:	mov	r0, #0
   16760:	mov	r1, #-2147483648	; 0x80000000
   16764:	bl	2122c <__assert_fail@plt+0xfe5c>
   16768:	ldrd	r2, [sp, #56]	; 0x38
   1676c:	cmp	r0, r2
   16770:	sbcs	r3, r1, r3
   16774:	movlt	r3, #1
   16778:	movge	r3, #0
   1677c:	b	14628 <__assert_fail@plt+0x3258>
   16780:	mov	r2, #5
   16784:	ldr	r1, [pc, #596]	; 169e0 <__assert_fail@plt+0x5610>
   16788:	mov	r0, #0
   1678c:	bl	11130 <dcgettext@plt>
   16790:	ldrd	r2, [r9, #-216]	; 0xffffff28
   16794:	mov	r4, r2
   16798:	mov	r5, r3
   1679c:	bl	12a40 <__assert_fail@plt+0x1670>
   167a0:	b	161d4 <__assert_fail@plt+0x4e04>
   167a4:	adds	r2, r0, ip
   167a8:	adc	r3, r1, ip, asr #31
   167ac:	cmp	r2, #-2147483648	; 0x80000000
   167b0:	sbcs	r3, r3, #0
   167b4:	movge	r3, #1
   167b8:	movlt	r3, #0
   167bc:	b	162f8 <__assert_fail@plt+0x4f28>
   167c0:	mov	r0, r6
   167c4:	bl	11274 <strlen@plt>
   167c8:	cmp	r0, #3
   167cc:	str	r0, [sp, #52]	; 0x34
   167d0:	beq	16850 <__assert_fail@plt+0x5480>
   167d4:	cmp	r0, #4
   167d8:	beq	16844 <__assert_fail@plt+0x5474>
   167dc:	ldr	r4, [pc, #512]	; 169e4 <__assert_fail@plt+0x5614>
   167e0:	ldr	r1, [pc, #512]	; 169e8 <__assert_fail@plt+0x5618>
   167e4:	b	167f4 <__assert_fail@plt+0x5424>
   167e8:	ldr	r1, [r4, #12]!
   167ec:	cmp	r1, #0
   167f0:	beq	16898 <__assert_fail@plt+0x54c8>
   167f4:	mov	r0, r6
   167f8:	bl	110a0 <strcmp@plt>
   167fc:	mov	r3, r4
   16800:	cmp	r0, #0
   16804:	bne	167e8 <__assert_fail@plt+0x5418>
   16808:	ldr	r2, [r3, #8]
   1680c:	ldr	r3, [r3, #4]
   16810:	str	r3, [sp, #52]	; 0x34
   16814:	asr	r3, r2, #31
   16818:	strd	r2, [sp, #248]	; 0xf8
   1681c:	b	13f2c <__assert_fail@plt+0x2b5c>
   16820:	ldr	r2, [sp, #64]	; 0x40
   16824:	add	r3, r4, #1
   16828:	str	r3, [r2]
   1682c:	ldrb	r3, [r4]
   16830:	cmp	r3, #0
   16834:	str	r3, [sp, #52]	; 0x34
   16838:	bne	142d8 <__assert_fail@plt+0x2f08>
   1683c:	mov	r0, r3
   16840:	b	13f4c <__assert_fail@plt+0x2b7c>
   16844:	ldrb	r3, [sp, #143]	; 0x8f
   16848:	cmp	r3, #46	; 0x2e
   1684c:	bne	167dc <__assert_fail@plt+0x540c>
   16850:	ldr	r4, [pc, #396]	; 169e4 <__assert_fail@plt+0x5614>
   16854:	ldr	r1, [pc, #396]	; 169e8 <__assert_fail@plt+0x5618>
   16858:	mov	r5, #3
   1685c:	b	1686c <__assert_fail@plt+0x549c>
   16860:	ldr	r1, [r4, #12]!
   16864:	cmp	r1, #0
   16868:	beq	16898 <__assert_fail@plt+0x54c8>
   1686c:	mov	r2, r5
   16870:	mov	r0, r6
   16874:	bl	11394 <strncmp@plt>
   16878:	mov	r3, r4
   1687c:	cmp	r0, #0
   16880:	bne	16860 <__assert_fail@plt+0x5490>
   16884:	b	16808 <__assert_fail@plt+0x5438>
   16888:	mov	r3, #63	; 0x3f
   1688c:	mov	r0, #2
   16890:	str	r3, [sp, #52]	; 0x34
   16894:	b	13f4c <__assert_fail@plt+0x2b7c>
   16898:	ldr	r3, [pc, #332]	; 169ec <__assert_fail@plt+0x561c>
   1689c:	ldr	r1, [pc, #356]	; 16a08 <__assert_fail@plt+0x5638>
   168a0:	str	r3, [sp, #72]	; 0x48
   168a4:	mov	r4, r3
   168a8:	b	168b8 <__assert_fail@plt+0x54e8>
   168ac:	ldr	r1, [r4, #12]!
   168b0:	cmp	r1, #0
   168b4:	beq	168cc <__assert_fail@plt+0x54fc>
   168b8:	mov	r0, r6
   168bc:	bl	110a0 <strcmp@plt>
   168c0:	cmp	r0, #0
   168c4:	bne	168ac <__assert_fail@plt+0x54dc>
   168c8:	b	16098 <__assert_fail@plt+0x4cc8>
   168cc:	ldr	r3, [sp, #64]	; 0x40
   168d0:	add	r3, r3, #192	; 0xc0
   168d4:	ldr	r4, [r3]
   168d8:	str	r3, [sp, #80]	; 0x50
   168dc:	cmp	r4, #0
   168e0:	beq	16984 <__assert_fail@plt+0x55b4>
   168e4:	mov	r5, r3
   168e8:	mov	r1, r4
   168ec:	b	168fc <__assert_fail@plt+0x552c>
   168f0:	ldr	r1, [r5, #12]!
   168f4:	cmp	r1, #0
   168f8:	beq	16984 <__assert_fail@plt+0x55b4>
   168fc:	mov	r0, r6
   16900:	bl	110a0 <strcmp@plt>
   16904:	cmp	r0, #0
   16908:	bne	168f0 <__assert_fail@plt+0x5520>
   1690c:	ldr	r2, [r5, #8]
   16910:	ldr	r3, [r5, #4]
   16914:	str	r3, [sp, #52]	; 0x34
   16918:	asr	r3, r2, #31
   1691c:	b	16818 <__assert_fail@plt+0x5448>
   16920:	mov	r8, lr
   16924:	ldr	r2, [sp, #84]	; 0x54
   16928:	ldrd	r0, [sp, #56]	; 0x38
   1692c:	b	14500 <__assert_fail@plt+0x3130>
   16930:	ldr	r0, [sp, #52]	; 0x34
   16934:	str	r3, [sp, #252]	; 0xfc
   16938:	ldr	r3, [sp, #64]	; 0x40
   1693c:	ldr	r1, [pc, #172]	; 169f0 <__assert_fail@plt+0x5620>
   16940:	cmp	r0, #0
   16944:	str	ip, [r3]
   16948:	moveq	r3, r1
   1694c:	movne	r3, #276	; 0x114
   16950:	str	r2, [sp, #248]	; 0xf8
   16954:	moveq	r0, #22
   16958:	movne	r0, #21
   1695c:	str	r3, [sp, #52]	; 0x34
   16960:	b	13f4c <__assert_fail@plt+0x2b7c>
   16964:	ldrb	lr, [r0, #1]!
   16968:	sub	r1, lr, #48	; 0x30
   1696c:	cmp	r1, #9
   16970:	bhi	15e88 <__assert_fail@plt+0x4ab8>
   16974:	cmp	lr, #48	; 0x30
   16978:	beq	16964 <__assert_fail@plt+0x5594>
   1697c:	add	r3, r3, #1
   16980:	b	15e88 <__assert_fail@plt+0x4ab8>
   16984:	ldr	r3, [pc, #104]	; 169f4 <__assert_fail@plt+0x5624>
   16988:	ldr	r1, [pc, #124]	; 16a0c <__assert_fail@plt+0x563c>
   1698c:	str	r3, [sp, #56]	; 0x38
   16990:	mov	r5, r3
   16994:	b	169a4 <__assert_fail@plt+0x55d4>
   16998:	ldr	r1, [r5, #12]!
   1699c:	cmp	r1, #0
   169a0:	beq	16a24 <__assert_fail@plt+0x5654>
   169a4:	mov	r0, r6
   169a8:	bl	110a0 <strcmp@plt>
   169ac:	cmp	r0, #0
   169b0:	bne	16998 <__assert_fail@plt+0x55c8>
   169b4:	b	1690c <__assert_fail@plt+0x553c>
   169b8:			; <UNDEFINED> instruction: 0xffff9d90
   169bc:	andeq	r2, r2, r0, lsr ip
   169c0:	andeq	r2, r2, ip, asr #24
   169c4:	blcc	fe6c91cc <optarg@@GLIBC_2.4+0xfe695024>
   169c8:	stcleq	12, cr12, [ip], {204}	; 0xcc
   169cc:	andeq	r2, r2, r0, ror r0
   169d0:			; <UNDEFINED> instruction: 0x00022bbc
   169d4:	andeq	r0, r0, r2, lsl r1
   169d8:	andeq	r0, r0, r3, lsl r1
   169dc:	andeq	r2, r0, r0, lsl r7
   169e0:	andeq	r2, r2, r8, lsl #25
   169e4:	andeq	r2, r2, r8, lsr r9
   169e8:	andeq	r2, r2, r0, asr #23
   169ec:	andeq	r2, r2, ip, lsr #1
   169f0:	andeq	r0, r0, r5, lsl r1
   169f4:	ldrdeq	r2, [r2], -ip
   169f8:	andeq	r2, r2, ip, asr #25
   169fc:	andeq	r2, r2, ip, lsl r3
   16a00:	andeq	r2, r2, r0, lsr #7
   16a04:	ldrdeq	r2, [r2], -r8
   16a08:	andeq	r2, r2, r8, asr #23
   16a0c:	andeq	r2, r2, ip, asr #23
   16a10:	andeq	r2, r2, r4, ror #23
   16a14:	andeq	r0, r0, r3, lsl #2
   16a18:	ldrdeq	r2, [r2], -r0
   16a1c:	muleq	r2, ip, r4
   16a20:	andeq	r0, r0, r1, lsl r1
   16a24:	ldr	r1, [pc, #-52]	; 169f8 <__assert_fail@plt+0x5628>
   16a28:	mov	r0, r6
   16a2c:	bl	110a0 <strcmp@plt>
   16a30:	cmp	r0, #0
   16a34:	beq	16bb0 <__assert_fail@plt+0x57e0>
   16a38:	ldr	r5, [pc, #-68]	; 169fc <__assert_fail@plt+0x562c>
   16a3c:	ldr	r3, [pc, #-44]	; 16a18 <__assert_fail@plt+0x5648>
   16a40:	str	r7, [sp, #68]	; 0x44
   16a44:	mov	r1, r3
   16a48:	mov	r7, r4
   16a4c:	mov	r4, r5
   16a50:	mov	r0, r6
   16a54:	bl	110a0 <strcmp@plt>
   16a58:	cmp	r0, #0
   16a5c:	beq	16bcc <__assert_fail@plt+0x57fc>
   16a60:	ldr	r1, [r4, #12]!
   16a64:	cmp	r1, #0
   16a68:	bne	16a50 <__assert_fail@plt+0x5680>
   16a6c:	ldr	r2, [sp, #52]	; 0x34
   16a70:	mov	r4, r7
   16a74:	sub	r2, r2, #1
   16a78:	ldr	r7, [sp, #68]	; 0x44
   16a7c:	str	r2, [sp, #68]	; 0x44
   16a80:	ldrb	r2, [r6, r2]
   16a84:	mov	r3, r1
   16a88:	cmp	r2, #83	; 0x53
   16a8c:	beq	16be4 <__assert_fail@plt+0x5814>
   16a90:	ldr	r5, [pc, #-152]	; 16a00 <__assert_fail@plt+0x5630>
   16a94:	ldr	r1, [pc, #-152]	; 16a04 <__assert_fail@plt+0x5634>
   16a98:	mov	r0, r6
   16a9c:	bl	110a0 <strcmp@plt>
   16aa0:	cmp	r0, #0
   16aa4:	beq	1690c <__assert_fail@plt+0x553c>
   16aa8:	ldr	r1, [r5, #12]!
   16aac:	cmp	r1, #0
   16ab0:	bne	16a98 <__assert_fail@plt+0x56c8>
   16ab4:	ldr	r3, [sp, #52]	; 0x34
   16ab8:	cmp	r3, #1
   16abc:	ldrb	r3, [sp, #140]	; 0x8c
   16ac0:	beq	16c24 <__assert_fail@plt+0x5854>
   16ac4:	cmp	r3, #0
   16ac8:	movne	r2, #0
   16acc:	movne	r3, r6
   16ad0:	movne	r1, r6
   16ad4:	beq	16b78 <__assert_fail@plt+0x57a8>
   16ad8:	ldrb	ip, [r1]
   16adc:	ldrb	r0, [r1, #1]!
   16ae0:	cmp	ip, #46	; 0x2e
   16ae4:	add	ip, r3, #1
   16ae8:	movne	r3, ip
   16aec:	moveq	r2, #1
   16af0:	cmp	r0, #0
   16af4:	strb	r0, [r3]
   16af8:	bne	16ad8 <__assert_fail@plt+0x5708>
   16afc:	cmp	r2, #0
   16b00:	beq	16b78 <__assert_fail@plt+0x57a8>
   16b04:	ldr	r1, [pc, #-260]	; 16a08 <__assert_fail@plt+0x5638>
   16b08:	ldr	r5, [sp, #72]	; 0x48
   16b0c:	mov	r0, r6
   16b10:	bl	110a0 <strcmp@plt>
   16b14:	cmp	r0, #0
   16b18:	beq	16c1c <__assert_fail@plt+0x584c>
   16b1c:	ldr	r1, [r5, #12]!
   16b20:	cmp	r1, #0
   16b24:	bne	16b0c <__assert_fail@plt+0x573c>
   16b28:	cmp	r4, #0
   16b2c:	beq	16b54 <__assert_fail@plt+0x5784>
   16b30:	ldr	r5, [sp, #80]	; 0x50
   16b34:	mov	r1, r4
   16b38:	mov	r0, r6
   16b3c:	bl	110a0 <strcmp@plt>
   16b40:	cmp	r0, #0
   16b44:	beq	1690c <__assert_fail@plt+0x553c>
   16b48:	ldr	r1, [r5, #12]!
   16b4c:	cmp	r1, #0
   16b50:	bne	16b38 <__assert_fail@plt+0x5768>
   16b54:	ldr	r1, [pc, #-336]	; 16a0c <__assert_fail@plt+0x563c>
   16b58:	ldr	r4, [sp, #56]	; 0x38
   16b5c:	mov	r0, r6
   16b60:	bl	110a0 <strcmp@plt>
   16b64:	cmp	r0, #0
   16b68:	beq	16c64 <__assert_fail@plt+0x5894>
   16b6c:	ldr	r1, [r4, #12]!
   16b70:	cmp	r1, #0
   16b74:	bne	16b5c <__assert_fail@plt+0x578c>
   16b78:	ldr	r3, [sp, #64]	; 0x40
   16b7c:	ldrb	r3, [r3, #181]	; 0xb5
   16b80:	cmp	r3, #0
   16b84:	beq	16888 <__assert_fail@plt+0x54b8>
   16b88:	mov	r2, #5
   16b8c:	ldr	r1, [pc, #-388]	; 16a10 <__assert_fail@plt+0x5640>
   16b90:	mov	r0, #0
   16b94:	bl	11130 <dcgettext@plt>
   16b98:	mov	r1, r6
   16b9c:	bl	12a40 <__assert_fail@plt+0x1670>
   16ba0:	mov	r3, #63	; 0x3f
   16ba4:	str	r3, [sp, #52]	; 0x34
   16ba8:	mov	r0, #2
   16bac:	b	13f4c <__assert_fail@plt+0x2b7c>
   16bb0:	mov	r3, #0
   16bb4:	ldr	r1, [pc, #-424]	; 16a14 <__assert_fail@plt+0x5644>
   16bb8:	mov	r2, #0
   16bbc:	str	r1, [sp, #52]	; 0x34
   16bc0:	strd	r2, [sp, #248]	; 0xf8
   16bc4:	mov	r3, r1
   16bc8:	b	142d8 <__assert_fail@plt+0x2f08>
   16bcc:	ldmib	r4, {r2, r3}
   16bd0:	ldr	r7, [sp, #68]	; 0x44
   16bd4:	str	r2, [sp, #52]	; 0x34
   16bd8:	mov	r2, r3
   16bdc:	asr	r3, r3, #31
   16be0:	b	16818 <__assert_fail@plt+0x5448>
   16be4:	ldr	r2, [sp, #68]	; 0x44
   16be8:	ldr	r1, [pc, #-472]	; 16a18 <__assert_fail@plt+0x5648>
   16bec:	strb	r3, [r6, r2]
   16bf0:	mov	r0, r6
   16bf4:	bl	110a0 <strcmp@plt>
   16bf8:	cmp	r0, #0
   16bfc:	beq	1690c <__assert_fail@plt+0x553c>
   16c00:	ldr	r1, [r5, #12]!
   16c04:	cmp	r1, #0
   16c08:	bne	16bf0 <__assert_fail@plt+0x5820>
   16c0c:	ldr	r2, [sp, #68]	; 0x44
   16c10:	mov	r3, #83	; 0x53
   16c14:	strb	r3, [r6, r2]
   16c18:	b	16a90 <__assert_fail@plt+0x56c0>
   16c1c:	mov	r3, r5
   16c20:	b	16808 <__assert_fail@plt+0x5438>
   16c24:	cmp	r3, #65	; 0x41
   16c28:	ldrne	r2, [pc, #-532]	; 16a1c <__assert_fail@plt+0x564c>
   16c2c:	beq	16c78 <__assert_fail@plt+0x58a8>
   16c30:	ldr	r0, [r2, #12]
   16c34:	mov	r1, r2
   16c38:	cmp	r0, #0
   16c3c:	beq	16ac4 <__assert_fail@plt+0x56f4>
   16c40:	ldrb	r0, [r0]
   16c44:	add	r2, r2, #12
   16c48:	cmp	r0, r3
   16c4c:	bne	16c30 <__assert_fail@plt+0x5860>
   16c50:	ldr	r2, [r1, #20]
   16c54:	ldr	r3, [r1, #16]
   16c58:	str	r3, [sp, #52]	; 0x34
   16c5c:	asr	r3, r2, #31
   16c60:	b	16818 <__assert_fail@plt+0x5448>
   16c64:	ldr	r2, [r4, #8]
   16c68:	ldr	r3, [r4, #4]
   16c6c:	str	r3, [sp, #52]	; 0x34
   16c70:	asr	r3, r2, #31
   16c74:	b	16818 <__assert_fail@plt+0x5448>
   16c78:	mov	r3, #0
   16c7c:	ldr	r1, [pc, #-612]	; 16a20 <__assert_fail@plt+0x5650>
   16c80:	mov	r2, #3600	; 0xe10
   16c84:	str	r1, [sp, #52]	; 0x34
   16c88:	strd	r2, [sp, #248]	; 0xf8
   16c8c:	mov	r3, r1
   16c90:	b	142d8 <__assert_fail@plt+0x2f08>
   16c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c98:	sub	sp, sp, #908	; 0x38c
   16c9c:	mov	r7, r2
   16ca0:	str	r0, [sp, #44]	; 0x2c
   16ca4:	mov	r0, r1
   16ca8:	mov	r4, r1
   16cac:	mov	r6, r3
   16cb0:	bl	11274 <strlen@plt>
   16cb4:	cmp	r7, #0
   16cb8:	str	r0, [sp, #48]	; 0x30
   16cbc:	beq	174d8 <__assert_fail@plt+0x6108>
   16cc0:	ldrb	r3, [r4]
   16cc4:	ldm	r7, {r5, r9}
   16cc8:	sub	r3, r3, #9
   16ccc:	cmp	r3, #23
   16cd0:	movhi	r8, r4
   16cd4:	bhi	16d04 <__assert_fail@plt+0x5934>
   16cd8:	mov	r1, #1
   16cdc:	ldr	r2, [pc, #3944]	; 17c4c <__assert_fail@plt+0x687c>
   16ce0:	mov	r8, r4
   16ce4:	ands	r3, r2, r1, lsl r3
   16ce8:	beq	16d04 <__assert_fail@plt+0x5934>
   16cec:	ldrb	r3, [r8, #1]!
   16cf0:	sub	r3, r3, #9
   16cf4:	cmp	r3, #23
   16cf8:	bhi	16d04 <__assert_fail@plt+0x5934>
   16cfc:	ands	r3, r2, r1, lsl r3
   16d00:	bne	16cec <__assert_fail@plt+0x591c>
   16d04:	mov	r2, #56	; 0x38
   16d08:	mov	r1, #0
   16d0c:	add	r0, sp, #312	; 0x138
   16d10:	bl	112c8 <memset@plt>
   16d14:	mov	r2, #4
   16d18:	ldr	r1, [pc, #3888]	; 17c50 <__assert_fail@plt+0x6880>
   16d1c:	mov	r0, r8
   16d20:	bl	11394 <strncmp@plt>
   16d24:	cmp	r0, #0
   16d28:	bne	16d88 <__assert_fail@plt+0x59b8>
   16d2c:	ldrb	ip, [r8, #4]
   16d30:	add	fp, r8, #4
   16d34:	cmp	ip, #0
   16d38:	beq	16d88 <__assert_fail@plt+0x59b8>
   16d3c:	mov	r3, ip
   16d40:	mov	r1, fp
   16d44:	mov	r0, #1
   16d48:	b	16d68 <__assert_fail@plt+0x5998>
   16d4c:	cmp	r3, #34	; 0x22
   16d50:	beq	16fb0 <__assert_fail@plt+0x5be0>
   16d54:	ldrb	r3, [r2, #1]
   16d58:	add	r0, r0, #1
   16d5c:	add	r1, r2, #1
   16d60:	cmp	r3, #0
   16d64:	beq	16d88 <__assert_fail@plt+0x59b8>
   16d68:	cmp	r3, #92	; 0x5c
   16d6c:	mov	r2, r1
   16d70:	bne	16d4c <__assert_fail@plt+0x597c>
   16d74:	ldrb	r3, [r1, #1]
   16d78:	add	r2, r1, #1
   16d7c:	cmp	r3, #92	; 0x5c
   16d80:	cmpne	r3, #34	; 0x22
   16d84:	beq	16d54 <__assert_fail@plt+0x5984>
   16d88:	mov	r1, r7
   16d8c:	add	r2, sp, #224	; 0xe0
   16d90:	ldr	r0, [sp, #944]	; 0x3b0
   16d94:	bl	1d8a8 <__assert_fail@plt+0xc4d8>
   16d98:	cmp	r0, #0
   16d9c:	beq	174c8 <__assert_fail@plt+0x60f8>
   16da0:	ldr	r3, [sp, #944]	; 0x3b0
   16da4:	str	r3, [sp, #36]	; 0x24
   16da8:	mov	r3, #0
   16dac:	str	r3, [sp, #40]	; 0x28
   16db0:	and	r6, r6, #1
   16db4:	strb	r6, [sp, #853]	; 0x355
   16db8:	ldr	r6, [sp, #240]	; 0xf0
   16dbc:	str	r9, [sp, #764]	; 0x2fc
   16dc0:	add	r6, r6, #1
   16dc4:	add	r9, sp, #728	; 0x2d8
   16dc8:	asr	r7, r6, #31
   16dcc:	ldr	sl, [pc, #3712]	; 17c54 <__assert_fail@plt+0x6884>
   16dd0:	strd	r6, [r9]
   16dd4:	ldrb	r7, [r8]
   16dd8:	ldr	r9, [sp, #244]	; 0xf4
   16ddc:	ldr	r6, [pc, #3700]	; 17c58 <__assert_fail@plt+0x6888>
   16de0:	cmp	r7, #0
   16de4:	moveq	r8, r6
   16de8:	mov	fp, #0
   16dec:	adds	r6, sl, r9
   16df0:	adc	r7, fp, r9, asr #31
   16df4:	add	ip, sp, #312	; 0x138
   16df8:	ldr	r9, [sp, #236]	; 0xec
   16dfc:	add	fp, sp, #712	; 0x2c8
   16e00:	ldr	sl, [sp, #232]	; 0xe8
   16e04:	ldm	ip!, {r0, r1, r2, r3}
   16e08:	add	lr, sp, #768	; 0x300
   16e0c:	str	r8, [sp, #672]	; 0x2a0
   16e10:	ldr	r8, [sp, #228]	; 0xe4
   16e14:	strd	r6, [fp]
   16e18:	mov	r6, r9
   16e1c:	asr	r7, r9, #31
   16e20:	add	r9, sp, #736	; 0x2e0
   16e24:	asr	fp, sl, #31
   16e28:	strd	r6, [r9]
   16e2c:	mov	r6, r8
   16e30:	asr	r7, r8, #31
   16e34:	add	r8, sp, #744	; 0x2e8
   16e38:	stmia	lr!, {r0, r1, r2, r3}
   16e3c:	ldm	ip!, {r0, r1, r2, r3}
   16e40:	strd	sl, [r8]
   16e44:	add	sl, sp, #752	; 0x2f0
   16e48:	ldr	r8, [sp, #256]	; 0x100
   16e4c:	ldr	r9, [sp, #224]	; 0xe0
   16e50:	strd	r6, [sl]
   16e54:	mov	r6, #0
   16e58:	mov	r7, #2
   16e5c:	str	r7, [sp, #700]	; 0x2bc
   16e60:	str	r9, [sp, #760]	; 0x2f8
   16e64:	str	r8, [sp, #168]	; 0xa8
   16e68:	str	r6, [sp, #720]	; 0x2d0
   16e6c:	stmia	lr!, {r0, r1, r2, r3}
   16e70:	cmp	r5, r6
   16e74:	ldm	ip!, {r0, r1, r2, r3}
   16e78:	ldr	r7, [sp, #264]	; 0x108
   16e7c:	strb	r6, [sp, #824]	; 0x338
   16e80:	stmia	lr!, {r0, r1, r2, r3}
   16e84:	ldm	ip, {r0, r1}
   16e88:	ldr	r3, [pc, #3532]	; 17c5c <__assert_fail@plt+0x688c>
   16e8c:	strb	r6, [sp, #825]	; 0x339
   16e90:	str	r6, [sp, #828]	; 0x33c
   16e94:	str	r6, [sp, #832]	; 0x340
   16e98:	str	r6, [sp, #844]	; 0x34c
   16e9c:	str	r6, [sp, #836]	; 0x344
   16ea0:	str	r6, [sp, #840]	; 0x348
   16ea4:	str	r6, [sp, #848]	; 0x350
   16ea8:	strb	r6, [sp, #852]	; 0x354
   16eac:	strb	r6, [sp, #854]	; 0x356
   16eb0:	strb	r6, [sp, #855]	; 0x357
   16eb4:	strb	r6, [sp, #857]	; 0x359
   16eb8:	strb	r6, [sp, #856]	; 0x358
   16ebc:	strb	r6, [sp, #858]	; 0x35a
   16ec0:	strb	r6, [sp, #859]	; 0x35b
   16ec4:	strb	r6, [sp, #860]	; 0x35c
   16ec8:	stm	lr, {r0, r1}
   16ecc:	str	r7, [sp, #864]	; 0x360
   16ed0:	str	r8, [sp, #872]	; 0x368
   16ed4:	str	r6, [sp, #876]	; 0x36c
   16ed8:	str	r3, [sp, #868]	; 0x364
   16edc:	blt	17074 <__assert_fail@plt+0x5ca4>
   16ee0:	ldr	r8, [pc, #3448]	; 17c60 <__assert_fail@plt+0x6890>
   16ee4:	ldr	r7, [pc, #3448]	; 17c64 <__assert_fail@plt+0x6894>
   16ee8:	sub	r6, r5, #-2147483647	; 0x80000001
   16eec:	cmp	r5, r8
   16ef0:	sub	r3, r6, r8
   16ef4:	add	r2, sp, #572	; 0x23c
   16ef8:	add	r1, sp, #372	; 0x174
   16efc:	ldr	r0, [sp, #36]	; 0x24
   16f00:	bgt	16f40 <__assert_fail@plt+0x5b70>
   16f04:	str	r3, [sp, #372]	; 0x174
   16f08:	bl	1d8a8 <__assert_fail@plt+0xc4d8>
   16f0c:	sub	r8, r8, #7733248	; 0x760000
   16f10:	sub	r8, r8, #42752	; 0xa700
   16f14:	cmp	r0, #0
   16f18:	beq	16f38 <__assert_fail@plt+0x5b68>
   16f1c:	ldr	r3, [sp, #612]	; 0x264
   16f20:	cmp	r3, #0
   16f24:	beq	16f38 <__assert_fail@plt+0x5b68>
   16f28:	ldr	r2, [sp, #604]	; 0x25c
   16f2c:	ldr	r1, [sp, #872]	; 0x368
   16f30:	cmp	r1, r2
   16f34:	bne	1751c <__assert_fail@plt+0x614c>
   16f38:	cmp	r8, r7
   16f3c:	bne	16eec <__assert_fail@plt+0x5b1c>
   16f40:	ldr	r0, [sp, #864]	; 0x360
   16f44:	cmp	r0, #0
   16f48:	beq	16f6c <__assert_fail@plt+0x5b9c>
   16f4c:	ldr	r1, [sp, #876]	; 0x36c
   16f50:	cmp	r1, #0
   16f54:	beq	16f6c <__assert_fail@plt+0x5b9c>
   16f58:	bl	110a0 <strcmp@plt>
   16f5c:	cmp	r0, #0
   16f60:	mvneq	r3, #0
   16f64:	streq	r0, [sp, #876]	; 0x36c
   16f68:	streq	r3, [sp, #872]	; 0x368
   16f6c:	add	r0, sp, #672	; 0x2a0
   16f70:	bl	13ee0 <__assert_fail@plt+0x2b10>
   16f74:	subs	fp, r0, #0
   16f78:	beq	170d8 <__assert_fail@plt+0x5d08>
   16f7c:	ldrb	sl, [sp, #853]	; 0x355
   16f80:	cmp	sl, #0
   16f84:	bne	17304 <__assert_fail@plt+0x5f34>
   16f88:	ldr	r0, [sp, #36]	; 0x24
   16f8c:	ldr	r3, [sp, #944]	; 0x3b0
   16f90:	cmp	r0, r3
   16f94:	beq	16f9c <__assert_fail@plt+0x5bcc>
   16f98:	bl	1d87c <__assert_fail@plt+0xc4ac>
   16f9c:	ldr	r0, [sp, #40]	; 0x28
   16fa0:	bl	1ee10 <__assert_fail@plt+0xda40>
   16fa4:	mov	r0, sl
   16fa8:	add	sp, sp, #908	; 0x38c
   16fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fb0:	cmp	r0, #100	; 0x64
   16fb4:	movle	r3, #0
   16fb8:	addle	sl, sp, #472	; 0x1d8
   16fbc:	strle	r3, [sp, #40]	; 0x28
   16fc0:	bgt	173e0 <__assert_fail@plt+0x6010>
   16fc4:	cmp	ip, #34	; 0x22
   16fc8:	mov	r2, sl
   16fcc:	beq	16ff8 <__assert_fail@plt+0x5c28>
   16fd0:	sub	ip, ip, #92	; 0x5c
   16fd4:	clz	ip, ip
   16fd8:	lsr	ip, ip, #5
   16fdc:	add	r3, fp, ip
   16fe0:	ldrb	r1, [fp, ip]
   16fe4:	ldrb	ip, [r3, #1]
   16fe8:	add	fp, r3, #1
   16fec:	strb	r1, [r2], #1
   16ff0:	cmp	ip, #34	; 0x22
   16ff4:	bne	16fd0 <__assert_fail@plt+0x5c00>
   16ff8:	mov	r3, #0
   16ffc:	strb	r3, [r2]
   17000:	mov	r0, sl
   17004:	bl	1d7f4 <__assert_fail@plt+0xc424>
   17008:	subs	r3, r0, #0
   1700c:	str	r3, [sp, #36]	; 0x24
   17010:	moveq	sl, r3
   17014:	beq	16f9c <__assert_fail@plt+0x5bcc>
   17018:	ldrb	r3, [fp, #1]
   1701c:	add	r8, fp, #1
   17020:	sub	r3, r3, #9
   17024:	cmp	r3, #23
   17028:	bhi	17054 <__assert_fail@plt+0x5c84>
   1702c:	mov	r1, #1
   17030:	ldr	r2, [pc, #3092]	; 17c4c <__assert_fail@plt+0x687c>
   17034:	ands	r3, r2, r1, lsl r3
   17038:	beq	17054 <__assert_fail@plt+0x5c84>
   1703c:	ldrb	r3, [r8, #1]!
   17040:	sub	r3, r3, #9
   17044:	cmp	r3, #23
   17048:	bhi	17054 <__assert_fail@plt+0x5c84>
   1704c:	ands	r3, r2, r1, lsl r3
   17050:	bne	1703c <__assert_fail@plt+0x5c6c>
   17054:	mov	r1, r7
   17058:	add	r2, sp, #224	; 0xe0
   1705c:	ldr	r0, [sp, #36]	; 0x24
   17060:	bl	1d8a8 <__assert_fail@plt+0xc4d8>
   17064:	cmp	r0, #0
   17068:	beq	17330 <__assert_fail@plt+0x5f60>
   1706c:	str	sl, [sp, #948]	; 0x3b4
   17070:	b	16db0 <__assert_fail@plt+0x59e0>
   17074:	add	r8, r5, #7733248	; 0x760000
   17078:	add	r5, r5, #30932992	; 0x1d80000
   1707c:	add	r8, r8, #42752	; 0xa700
   17080:	add	r5, r5, #171008	; 0x29c00
   17084:	add	r7, sp, #572	; 0x23c
   17088:	add	r6, sp, #372	; 0x174
   1708c:	mov	r2, r7
   17090:	mov	r1, r6
   17094:	ldr	r0, [sp, #36]	; 0x24
   17098:	str	r8, [sp, #372]	; 0x174
   1709c:	bl	1d8a8 <__assert_fail@plt+0xc4d8>
   170a0:	add	r8, r8, #7733248	; 0x760000
   170a4:	add	r8, r8, #42752	; 0xa700
   170a8:	cmp	r0, #0
   170ac:	beq	170cc <__assert_fail@plt+0x5cfc>
   170b0:	ldr	r3, [sp, #612]	; 0x264
   170b4:	cmp	r3, #0
   170b8:	beq	170cc <__assert_fail@plt+0x5cfc>
   170bc:	ldr	r2, [sp, #604]	; 0x25c
   170c0:	ldr	r1, [sp, #872]	; 0x368
   170c4:	cmp	r2, r1
   170c8:	bne	1751c <__assert_fail@plt+0x614c>
   170cc:	cmp	r5, r8
   170d0:	bne	1708c <__assert_fail@plt+0x5cbc>
   170d4:	b	16f40 <__assert_fail@plt+0x5b70>
   170d8:	ldrb	ip, [sp, #853]	; 0x355
   170dc:	cmp	ip, #0
   170e0:	mov	r9, ip
   170e4:	bne	173fc <__assert_fail@plt+0x602c>
   170e8:	ldrb	sl, [sp, #824]	; 0x338
   170ec:	cmp	sl, #0
   170f0:	beq	17338 <__assert_fail@plt+0x5f68>
   170f4:	add	r3, sp, #760	; 0x2f8
   170f8:	ldm	r3, {r0, r1}
   170fc:	ldr	r3, [sp, #44]	; 0x2c
   17100:	stm	r3, {r0, r1}
   17104:	cmp	r9, #0
   17108:	beq	174e8 <__assert_fail@plt+0x6118>
   1710c:	ldr	r3, [sp, #948]	; 0x3b4
   17110:	cmp	r3, #0
   17114:	beq	17538 <__assert_fail@plt+0x6168>
   17118:	mov	r0, r3
   1711c:	ldr	r1, [pc, #2884]	; 17c68 <__assert_fail@plt+0x6898>
   17120:	bl	110a0 <strcmp@plt>
   17124:	mov	r2, #5
   17128:	cmp	r0, #0
   1712c:	bne	17550 <__assert_fail@plt+0x6180>
   17130:	ldr	r1, [pc, #2868]	; 17c6c <__assert_fail@plt+0x689c>
   17134:	bl	11130 <dcgettext@plt>
   17138:	bl	12a40 <__assert_fail@plt+0x1670>
   1713c:	ldr	r7, [sp, #44]	; 0x2c
   17140:	ldr	r1, [pc, #2856]	; 17c70 <__assert_fail@plt+0x68a0>
   17144:	mov	r2, #5
   17148:	ldm	r7, {r4, r6}
   1714c:	mov	r0, #0
   17150:	bl	11130 <dcgettext@plt>
   17154:	asr	r5, r4, #31
   17158:	mov	r2, r4
   1715c:	mov	r3, r5
   17160:	str	r6, [sp]
   17164:	bl	12a40 <__assert_fail@plt+0x1670>
   17168:	add	r1, sp, #268	; 0x10c
   1716c:	mov	r0, r7
   17170:	bl	11088 <gmtime_r@plt>
   17174:	cmp	r0, #0
   17178:	beq	171ac <__assert_fail@plt+0x5ddc>
   1717c:	mov	r2, #5
   17180:	ldr	r1, [pc, #2796]	; 17c74 <__assert_fail@plt+0x68a4>
   17184:	mov	r0, #0
   17188:	bl	11130 <dcgettext@plt>
   1718c:	mov	r1, #0
   17190:	add	r2, sp, #372	; 0x174
   17194:	mov	r4, r0
   17198:	add	r0, sp, #268	; 0x10c
   1719c:	bl	137cc <__assert_fail@plt+0x23fc>
   171a0:	mov	r1, r0
   171a4:	mov	r0, r4
   171a8:	bl	12a40 <__assert_fail@plt+0x1670>
   171ac:	ldr	r1, [sp, #44]	; 0x2c
   171b0:	add	r2, sp, #572	; 0x23c
   171b4:	ldr	r0, [sp, #36]	; 0x24
   171b8:	bl	1d8a8 <__assert_fail@plt+0xc4d8>
   171bc:	cmp	r0, #0
   171c0:	beq	172fc <__assert_fail@plt+0x5f2c>
   171c4:	mov	r2, #5
   171c8:	ldr	r1, [pc, #2728]	; 17c78 <__assert_fail@plt+0x68a8>
   171cc:	mov	r0, #0
   171d0:	ldr	r4, [sp, #608]	; 0x260
   171d4:	bl	11130 <dcgettext@plt>
   171d8:	add	r2, sp, #372	; 0x174
   171dc:	mov	r1, #0
   171e0:	asr	r8, r4, #31
   171e4:	add	r6, sp, #108	; 0x6c
   171e8:	mov	r5, r0
   171ec:	add	r0, sp, #572	; 0x23c
   171f0:	bl	137cc <__assert_fail@plt+0x23fc>
   171f4:	ldr	r3, [pc, #2824]	; 17d04 <__assert_fail@plt+0x6934>
   171f8:	cmp	r4, #0
   171fc:	movge	r2, #43	; 0x2b
   17200:	smull	r1, r3, r3, r4
   17204:	add	r3, r3, r4
   17208:	movlt	r2, #45	; 0x2d
   1720c:	rsb	r8, r8, r3, asr #11
   17210:	mov	r1, #1
   17214:	eor	r3, r8, r8, asr #31
   17218:	sub	r3, r3, r8, asr #31
   1721c:	str	r3, [sp, #4]
   17220:	ldr	r3, [pc, #2784]	; 17d08 <__assert_fail@plt+0x6938>
   17224:	str	r2, [sp]
   17228:	mov	r7, r0
   1722c:	mov	r2, #27
   17230:	mov	r0, r6
   17234:	bl	112a4 <__sprintf_chk@plt>
   17238:	mov	r3, #3600	; 0xe10
   1723c:	mul	r3, r3, r8
   17240:	subs	r3, r4, r3
   17244:	beq	172ec <__assert_fail@plt+0x5f1c>
   17248:	cmp	r3, #0
   1724c:	ldr	r2, [pc, #2744]	; 17d0c <__assert_fail@plt+0x693c>
   17250:	rsblt	r3, r3, #0
   17254:	ldr	r4, [pc, #2740]	; 17d10 <__assert_fail@plt+0x6940>
   17258:	smull	r1, r2, r2, r3
   1725c:	ldr	r8, [pc, #2736]	; 17d14 <__assert_fail@plt+0x6944>
   17260:	add	r2, r2, r3
   17264:	asr	lr, r3, #31
   17268:	rsb	r2, lr, r2, asr #5
   1726c:	mov	ip, r2
   17270:	smull	r2, r8, r8, r3
   17274:	smull	r1, r2, r4, ip
   17278:	asr	r1, ip, #31
   1727c:	rsb	r1, r1, r2, asr #2
   17280:	rsb	r2, ip, ip, lsl #4
   17284:	add	r1, r1, r1, lsl #2
   17288:	rsb	lr, lr, r8, asr #6
   1728c:	sub	r1, ip, r1, lsl #1
   17290:	add	ip, r6, r0
   17294:	add	lr, lr, #48	; 0x30
   17298:	mov	r8, #58	; 0x3a
   1729c:	subs	r2, r3, r2, lsl #2
   172a0:	add	r1, r1, #48	; 0x30
   172a4:	strb	r8, [r6, r0]
   172a8:	strb	lr, [ip, #1]
   172ac:	strb	r1, [ip, #2]
   172b0:	addeq	r0, ip, #3
   172b4:	beq	172e4 <__assert_fail@plt+0x5f14>
   172b8:	smull	r3, r4, r4, r2
   172bc:	strb	r8, [ip, #3]
   172c0:	asr	r3, r2, #31
   172c4:	rsb	r3, r3, r4, asr #2
   172c8:	add	r1, r3, #48	; 0x30
   172cc:	add	lr, r3, r3, lsl #2
   172d0:	add	r0, ip, #6
   172d4:	sub	r3, r2, lr, lsl #1
   172d8:	add	r3, r3, #48	; 0x30
   172dc:	strb	r3, [ip, #5]
   172e0:	strb	r1, [ip, #4]
   172e4:	mov	r3, #0
   172e8:	strb	r3, [r0]
   172ec:	mov	r2, r6
   172f0:	mov	r1, r7
   172f4:	mov	r0, r5
   172f8:	bl	12a40 <__assert_fail@plt+0x1670>
   172fc:	mov	sl, r9
   17300:	b	16f88 <__assert_fail@plt+0x5bb8>
   17304:	ldr	r2, [sp, #48]	; 0x30
   17308:	ldr	r3, [sp, #672]	; 0x2a0
   1730c:	add	r4, r4, r2
   17310:	cmp	r3, r4
   17314:	mov	r2, #5
   17318:	ldrcs	r1, [pc, #2396]	; 17c7c <__assert_fail@plt+0x68ac>
   1731c:	ldrcc	r1, [pc, #2396]	; 17c80 <__assert_fail@plt+0x68b0>
   17320:	mov	r0, #0
   17324:	bl	11130 <dcgettext@plt>
   17328:	ldr	r1, [sp, #672]	; 0x2a0
   1732c:	bl	12a40 <__assert_fail@plt+0x1670>
   17330:	mov	sl, #0
   17334:	b	16f88 <__assert_fail@plt+0x5bb8>
   17338:	ldr	r0, [sp, #844]	; 0x34c
   1733c:	ldr	r1, [sp, #828]	; 0x33c
   17340:	ldr	lr, [sp, #832]	; 0x340
   17344:	orr	r3, r0, r1
   17348:	orr	r3, r3, lr
   1734c:	ldr	r4, [sp, #840]	; 0x348
   17350:	ldr	r2, [sp, #836]	; 0x344
   17354:	ldr	lr, [sp, #848]	; 0x350
   17358:	orr	r3, r3, r4
   1735c:	add	r2, r2, lr
   17360:	orr	r3, r3, r2
   17364:	cmp	r3, #1
   17368:	ble	17680 <__assert_fail@plt+0x62b0>
   1736c:	cmp	ip, #0
   17370:	beq	16f88 <__assert_fail@plt+0x5bb8>
   17374:	cmp	r0, #1
   17378:	ble	17388 <__assert_fail@plt+0x5fb8>
   1737c:	ldr	r0, [pc, #2304]	; 17c84 <__assert_fail@plt+0x68b4>
   17380:	bl	12a40 <__assert_fail@plt+0x1670>
   17384:	ldr	r1, [sp, #828]	; 0x33c
   17388:	cmp	r1, #1
   1738c:	ble	17398 <__assert_fail@plt+0x5fc8>
   17390:	ldr	r0, [pc, #2288]	; 17c88 <__assert_fail@plt+0x68b8>
   17394:	bl	12a40 <__assert_fail@plt+0x1670>
   17398:	ldr	r3, [sp, #832]	; 0x340
   1739c:	cmp	r3, #1
   173a0:	ble	173ac <__assert_fail@plt+0x5fdc>
   173a4:	ldr	r0, [pc, #2272]	; 17c8c <__assert_fail@plt+0x68bc>
   173a8:	bl	12a40 <__assert_fail@plt+0x1670>
   173ac:	ldr	r3, [sp, #840]	; 0x348
   173b0:	cmp	r3, #1
   173b4:	ble	173c0 <__assert_fail@plt+0x5ff0>
   173b8:	ldr	r0, [pc, #2256]	; 17c90 <__assert_fail@plt+0x68c0>
   173bc:	bl	12a40 <__assert_fail@plt+0x1670>
   173c0:	ldr	r3, [sp, #836]	; 0x344
   173c4:	ldr	r2, [sp, #848]	; 0x350
   173c8:	add	r3, r3, r2
   173cc:	cmp	r3, #1
   173d0:	ble	16f88 <__assert_fail@plt+0x5bb8>
   173d4:	ldr	r0, [pc, #2232]	; 17c94 <__assert_fail@plt+0x68c4>
   173d8:	bl	12a40 <__assert_fail@plt+0x1670>
   173dc:	b	16f88 <__assert_fail@plt+0x5bb8>
   173e0:	bl	1ec0c <__assert_fail@plt+0xd83c>
   173e4:	subs	r3, r0, #0
   173e8:	str	r3, [sp, #40]	; 0x28
   173ec:	beq	174c8 <__assert_fail@plt+0x60f8>
   173f0:	mov	sl, r3
   173f4:	ldrb	ip, [r8, #4]
   173f8:	b	16fc4 <__assert_fail@plt+0x5bf4>
   173fc:	mov	r2, #5
   17400:	ldr	r1, [pc, #2192]	; 17c98 <__assert_fail@plt+0x68c8>
   17404:	bl	11130 <dcgettext@plt>
   17408:	bl	12a40 <__assert_fail@plt+0x1670>
   1740c:	ldrb	r3, [sp, #824]	; 0x338
   17410:	cmp	r3, #0
   17414:	bne	174f0 <__assert_fail@plt+0x6120>
   17418:	ldr	r3, [sp, #848]	; 0x350
   1741c:	cmp	r3, #0
   17420:	bne	1770c <__assert_fail@plt+0x633c>
   17424:	ldr	r3, [sp, #948]	; 0x3b4
   17428:	cmp	r3, #0
   1742c:	beq	178d0 <__assert_fail@plt+0x6500>
   17430:	ldr	r3, [sp, #944]	; 0x3b0
   17434:	ldr	r2, [sp, #36]	; 0x24
   17438:	cmp	r3, r2
   1743c:	beq	17724 <__assert_fail@plt+0x6354>
   17440:	ldr	r4, [pc, #2132]	; 17c9c <__assert_fail@plt+0x68cc>
   17444:	ldr	r1, [pc, #2132]	; 17ca0 <__assert_fail@plt+0x68d0>
   17448:	mov	r2, #5
   1744c:	mov	r0, fp
   17450:	ldr	r5, [r4]
   17454:	bl	11130 <dcgettext@plt>
   17458:	ldr	r3, [sp, #948]	; 0x3b4
   1745c:	mov	r1, #1
   17460:	mov	r2, r0
   17464:	mov	r0, r5
   17468:	bl	112ec <__fprintf_chk@plt>
   1746c:	ldr	r3, [sp, #836]	; 0x344
   17470:	cmp	r3, #0
   17474:	beq	174a4 <__assert_fail@plt+0x60d4>
   17478:	ldr	r3, [sp, #848]	; 0x350
   1747c:	cmp	r3, #0
   17480:	bne	17568 <__assert_fail@plt+0x6198>
   17484:	ldr	r3, [sp, #692]	; 0x2b4
   17488:	cmp	r3, #0
   1748c:	ble	174b0 <__assert_fail@plt+0x60e0>
   17490:	ldr	r3, [r4]
   17494:	mov	r2, #5
   17498:	mov	r1, #1
   1749c:	ldr	r0, [pc, #2048]	; 17ca4 <__assert_fail@plt+0x68d4>
   174a0:	bl	11184 <fwrite@plt>
   174a4:	ldr	r3, [sp, #848]	; 0x350
   174a8:	cmp	r3, #0
   174ac:	bne	17568 <__assert_fail@plt+0x6198>
   174b0:	ldr	r1, [r4]
   174b4:	mov	r0, #10
   174b8:	bl	11340 <fputc@plt>
   174bc:	ldrb	ip, [sp, #853]	; 0x355
   174c0:	mov	r9, ip
   174c4:	b	170e8 <__assert_fail@plt+0x5d18>
   174c8:	mov	r3, #0
   174cc:	str	r3, [sp, #40]	; 0x28
   174d0:	mov	sl, r3
   174d4:	b	16f9c <__assert_fail@plt+0x5bcc>
   174d8:	add	r0, sp, #100	; 0x64
   174dc:	bl	12988 <__assert_fail@plt+0x15b8>
   174e0:	add	r7, sp, #100	; 0x64
   174e4:	b	16cc0 <__assert_fail@plt+0x58f0>
   174e8:	mov	sl, #1
   174ec:	b	16f88 <__assert_fail@plt+0x5bb8>
   174f0:	ldr	r4, [pc, #1956]	; 17c9c <__assert_fail@plt+0x68cc>
   174f4:	ldr	r1, [pc, #1964]	; 17ca8 <__assert_fail@plt+0x68d8>
   174f8:	mov	r2, #5
   174fc:	ldr	r5, [r4]
   17500:	mov	r0, fp
   17504:	bl	11130 <dcgettext@plt>
   17508:	mov	r1, #1
   1750c:	mov	r2, r0
   17510:	mov	r0, r5
   17514:	bl	112ec <__fprintf_chk@plt>
   17518:	b	1746c <__assert_fail@plt+0x609c>
   1751c:	ldr	r1, [pc, #1848]	; 17c5c <__assert_fail@plt+0x688c>
   17520:	str	r3, [sp, #876]	; 0x36c
   17524:	mov	r3, #0
   17528:	str	r2, [sp, #884]	; 0x374
   1752c:	str	r1, [sp, #880]	; 0x370
   17530:	str	r3, [sp, #888]	; 0x378
   17534:	b	16f40 <__assert_fail@plt+0x5b70>
   17538:	mov	r2, #5
   1753c:	ldr	r1, [pc, #1896]	; 17cac <__assert_fail@plt+0x68dc>
   17540:	mov	r0, r3
   17544:	bl	11130 <dcgettext@plt>
   17548:	bl	12a40 <__assert_fail@plt+0x1670>
   1754c:	b	1713c <__assert_fail@plt+0x5d6c>
   17550:	ldr	r1, [pc, #1880]	; 17cb0 <__assert_fail@plt+0x68e0>
   17554:	mov	r0, #0
   17558:	bl	11130 <dcgettext@plt>
   1755c:	ldr	r1, [sp, #948]	; 0x3b4
   17560:	bl	12a40 <__assert_fail@plt+0x1670>
   17564:	b	1713c <__assert_fail@plt+0x5d6c>
   17568:	ldr	r5, [sp, #696]	; 0x2b8
   1756c:	ldr	r3, [pc, #1936]	; 17d04 <__assert_fail@plt+0x6934>
   17570:	cmp	r5, #0
   17574:	asr	r7, r5, #31
   17578:	smull	r1, r3, r3, r5
   1757c:	add	r3, r3, r5
   17580:	movge	r2, #43	; 0x2b
   17584:	rsb	r7, r7, r3, asr #11
   17588:	movlt	r2, #45	; 0x2d
   1758c:	eor	r3, r7, r7, asr #31
   17590:	sub	r3, r3, r7, asr #31
   17594:	add	r6, sp, #108	; 0x6c
   17598:	str	r2, [sp]
   1759c:	str	r3, [sp, #4]
   175a0:	mov	r2, #27
   175a4:	mov	r0, r6
   175a8:	ldr	r3, [pc, #1880]	; 17d08 <__assert_fail@plt+0x6938>
   175ac:	mov	r1, #1
   175b0:	ldr	r8, [r4]
   175b4:	bl	112a4 <__sprintf_chk@plt>
   175b8:	mov	r2, #3600	; 0xe10
   175bc:	mul	r2, r2, r7
   175c0:	subs	r2, r5, r2
   175c4:	beq	17668 <__assert_fail@plt+0x6298>
   175c8:	cmp	r2, #0
   175cc:	ldr	r3, [pc, #1848]	; 17d0c <__assert_fail@plt+0x693c>
   175d0:	rsblt	r2, r2, #0
   175d4:	ldr	r7, [pc, #1844]	; 17d10 <__assert_fail@plt+0x6940>
   175d8:	smull	r1, r3, r3, r2
   175dc:	ldr	r1, [pc, #1840]	; 17d14 <__assert_fail@plt+0x6944>
   175e0:	add	r3, r3, r2
   175e4:	asr	lr, r2, #31
   175e8:	rsb	r3, lr, r3, asr #5
   175ec:	smull	r1, r5, r1, r2
   175f0:	smull	r1, ip, r7, r3
   175f4:	asr	r1, r3, #31
   175f8:	rsb	r1, r1, ip, asr #2
   175fc:	rsb	r9, r3, r3, lsl #4
   17600:	add	r1, r1, r1, lsl #2
   17604:	add	ip, r6, r0
   17608:	rsb	lr, lr, r5, asr #6
   1760c:	sub	r1, r3, r1, lsl #1
   17610:	add	r1, r1, #48	; 0x30
   17614:	add	lr, lr, #48	; 0x30
   17618:	mov	r5, #58	; 0x3a
   1761c:	subs	r3, r2, r9, lsl #2
   17620:	strb	r5, [r6, r0]
   17624:	strb	r1, [ip, #2]
   17628:	strb	lr, [ip, #1]
   1762c:	addeq	r1, ip, #3
   17630:	beq	17660 <__assert_fail@plt+0x6290>
   17634:	smull	r2, r7, r7, r3
   17638:	strb	r5, [ip, #3]
   1763c:	asr	r2, r3, #31
   17640:	rsb	r2, r2, r7, asr #2
   17644:	add	r1, ip, #6
   17648:	add	r0, r2, r2, lsl #2
   1764c:	add	r2, r2, #48	; 0x30
   17650:	sub	r3, r3, r0, lsl #1
   17654:	add	r3, r3, #48	; 0x30
   17658:	strb	r3, [ip, #5]
   1765c:	strb	r2, [ip, #4]
   17660:	mov	r3, #0
   17664:	strb	r3, [r1]
   17668:	mov	r3, r6
   1766c:	mov	r0, r8
   17670:	ldr	r2, [pc, #1596]	; 17cb4 <__assert_fail@plt+0x68e4>
   17674:	mov	r1, #1
   17678:	bl	112ec <__fprintf_chk@plt>
   1767c:	b	174b0 <__assert_fail@plt+0x60e0>
   17680:	add	r3, sp, #712	; 0x2c8
   17684:	ldrd	r6, [r3]
   17688:	cmp	r6, #0
   1768c:	sbcs	r3, r7, #0
   17690:	blt	17790 <__assert_fail@plt+0x63c0>
   17694:	ldr	r3, [sp, #720]	; 0x2d0
   17698:	cmp	r3, #2
   1769c:	beq	17888 <__assert_fail@plt+0x64b8>
   176a0:	ldr	r2, [pc, #1552]	; 17cb8 <__assert_fail@plt+0x68e8>
   176a4:	mov	r3, #0
   176a8:	cmp	r2, r6
   176ac:	sbcs	r3, r3, r7
   176b0:	movge	r4, r6
   176b4:	bge	17750 <__assert_fail@plt+0x6380>
   176b8:	sub	r3, r6, #1888	; 0x760
   176bc:	sub	r3, r3, #12
   176c0:	cmp	ip, #0
   176c4:	str	r3, [sp, #156]	; 0x9c
   176c8:	beq	16f88 <__assert_fail@plt+0x5bb8>
   176cc:	mov	r2, #5
   176d0:	ldr	r1, [pc, #1508]	; 17cbc <__assert_fail@plt+0x68ec>
   176d4:	mov	r0, #0
   176d8:	bl	11130 <dcgettext@plt>
   176dc:	mov	r2, r6
   176e0:	mov	r3, r7
   176e4:	bl	12a40 <__assert_fail@plt+0x1670>
   176e8:	ldrb	r9, [sp, #853]	; 0x355
   176ec:	cmp	r9, #0
   176f0:	beq	16f88 <__assert_fail@plt+0x5bb8>
   176f4:	mov	r2, #5
   176f8:	ldr	r1, [pc, #1472]	; 17cc0 <__assert_fail@plt+0x68f0>
   176fc:	mov	r0, #0
   17700:	bl	11130 <dcgettext@plt>
   17704:	bl	12a40 <__assert_fail@plt+0x1670>
   17708:	b	16f88 <__assert_fail@plt+0x5bb8>
   1770c:	ldr	r4, [pc, #1416]	; 17c9c <__assert_fail@plt+0x68cc>
   17710:	mov	r2, #5
   17714:	ldr	r1, [pc, #1448]	; 17cc4 <__assert_fail@plt+0x68f4>
   17718:	ldr	r5, [r4]
   1771c:	mov	r0, fp
   17720:	b	17504 <__assert_fail@plt+0x6134>
   17724:	ldr	r1, [pc, #1340]	; 17c68 <__assert_fail@plt+0x6898>
   17728:	ldr	r0, [sp, #948]	; 0x3b4
   1772c:	bl	110a0 <strcmp@plt>
   17730:	ldr	r4, [pc, #1380]	; 17c9c <__assert_fail@plt+0x68cc>
   17734:	mov	r2, #5
   17738:	cmp	r0, #0
   1773c:	bne	177bc <__assert_fail@plt+0x63ec>
   17740:	ldr	r1, [pc, #1408]	; 17cc8 <__assert_fail@plt+0x68f8>
   17744:	ldr	r5, [r4]
   17748:	b	17504 <__assert_fail@plt+0x6134>
   1774c:	ldrb	ip, [sp, #853]	; 0x355
   17750:	sub	r3, r4, #1888	; 0x760
   17754:	mov	r9, ip
   17758:	sub	r3, r3, #12
   1775c:	str	r3, [sp, #156]	; 0x9c
   17760:	add	r3, sp, #728	; 0x2d8
   17764:	mov	r1, #0
   17768:	ldrd	r2, [r3]
   1776c:	mvn	r0, #0
   17770:	subs	r4, r2, #-2147483647	; 0x80000001
   17774:	adc	r5, r3, #0
   17778:	cmp	r5, r1
   1777c:	cmpeq	r4, r0
   17780:	bls	177c4 <__assert_fail@plt+0x63f4>
   17784:	sub	r2, r2, #1
   17788:	str	r2, [sp, #152]	; 0x98
   1778c:	b	176ec <__assert_fail@plt+0x631c>
   17790:	ldr	r2, [pc, #1332]	; 17ccc <__assert_fail@plt+0x68fc>
   17794:	mvn	r3, #0
   17798:	cmp	r6, r2
   1779c:	sbcs	r3, r7, r3
   177a0:	blt	178e4 <__assert_fail@plt+0x6514>
   177a4:	rsb	r6, r6, #-16777216	; 0xff000000
   177a8:	add	r6, r6, #16711680	; 0xff0000
   177ac:	add	r6, r6, #63488	; 0xf800
   177b0:	add	r6, r6, #148	; 0x94
   177b4:	str	r6, [sp, #156]	; 0x9c
   177b8:	b	17760 <__assert_fail@plt+0x6390>
   177bc:	ldr	r1, [pc, #1292]	; 17cd0 <__assert_fail@plt+0x6900>
   177c0:	b	1744c <__assert_fail@plt+0x607c>
   177c4:	add	r1, sp, #736	; 0x2e0
   177c8:	sub	r2, r2, #1
   177cc:	ldrd	r4, [r1]
   177d0:	str	r2, [sp, #152]	; 0x98
   177d4:	cmp	r4, #0
   177d8:	sbcs	r3, r5, #0
   177dc:	blt	18414 <__assert_fail@plt+0x7044>
   177e0:	cmp	r4, #-2147483648	; 0x80000000
   177e4:	sbcs	r3, r5, #0
   177e8:	movge	r3, #1
   177ec:	movlt	r3, #0
   177f0:	str	r3, [sp, #48]	; 0x30
   177f4:	cmp	r3, #0
   177f8:	strne	r4, [sp, #148]	; 0x94
   177fc:	bne	176ec <__assert_fail@plt+0x631c>
   17800:	ldr	r0, [sp, #844]	; 0x34c
   17804:	str	r4, [sp, #148]	; 0x94
   17808:	cmp	r0, #0
   1780c:	beq	1796c <__assert_fail@plt+0x659c>
   17810:	ldr	r3, [sp, #700]	; 0x2bc
   17814:	add	r1, sp, #744	; 0x2e8
   17818:	cmp	r3, #0
   1781c:	ldrd	r6, [r1]
   17820:	beq	18d90 <__assert_fail@plt+0x79c0>
   17824:	cmp	r3, #1
   17828:	bne	1843c <__assert_fail@plt+0x706c>
   1782c:	subs	r8, r6, #1
   17830:	sbc	r9, r7, #0
   17834:	cmp	r9, #0
   17838:	cmpeq	r8, #10
   1783c:	addls	r3, r6, #12
   17840:	bls	1844c <__assert_fail@plt+0x707c>
   17844:	cmp	r7, #0
   17848:	cmpeq	r6, #12
   1784c:	beq	18d88 <__assert_fail@plt+0x79b8>
   17850:	ldr	r4, [pc, #1148]	; 17cd4 <__assert_fail@plt+0x6904>
   17854:	mvn	r3, #0
   17858:	str	r3, [sp, #144]	; 0x90
   1785c:	cmp	ip, #0
   17860:	beq	16f88 <__assert_fail@plt+0x5bb8>
   17864:	mov	r2, #5
   17868:	ldr	r1, [pc, #1128]	; 17cd8 <__assert_fail@plt+0x6908>
   1786c:	mov	r0, #0
   17870:	bl	11130 <dcgettext@plt>
   17874:	add	r3, sp, #744	; 0x2e8
   17878:	ldrd	r2, [r3]
   1787c:	str	r4, [sp]
   17880:	bl	12a40 <__assert_fail@plt+0x1670>
   17884:	b	16f88 <__assert_fail@plt+0x5bb8>
   17888:	cmp	r6, #69	; 0x45
   1788c:	sbcs	r3, r7, #0
   17890:	movlt	r4, #2000	; 0x7d0
   17894:	ldrge	r4, [pc, #952]	; 17c54 <__assert_fail@plt+0x6884>
   17898:	mov	r5, #0
   1789c:	adds	r4, r4, r6
   178a0:	adc	r5, r5, r7
   178a4:	cmp	ip, #0
   178a8:	bne	17920 <__assert_fail@plt+0x6550>
   178ac:	ldr	r2, [pc, #1028]	; 17cb8 <__assert_fail@plt+0x68e8>
   178b0:	mov	r3, #0
   178b4:	cmp	r2, r4
   178b8:	sbcs	r3, r3, r5
   178bc:	sublt	r3, r4, #1888	; 0x760
   178c0:	sublt	r3, r3, #12
   178c4:	strlt	r3, [sp, #156]	; 0x9c
   178c8:	blt	16f88 <__assert_fail@plt+0x5bb8>
   178cc:	b	17750 <__assert_fail@plt+0x6380>
   178d0:	mov	r0, r3
   178d4:	ldr	r4, [pc, #960]	; 17c9c <__assert_fail@plt+0x68cc>
   178d8:	mov	r2, #5
   178dc:	ldr	r1, [pc, #1016]	; 17cdc <__assert_fail@plt+0x690c>
   178e0:	b	17744 <__assert_fail@plt+0x6374>
   178e4:	ldr	r2, [pc, #1012]	; 17ce0 <__assert_fail@plt+0x6910>
   178e8:	mvn	r3, #0
   178ec:	subs	r2, r2, r6
   178f0:	sbc	r3, r3, r7
   178f4:	cmp	r2, #-2147483648	; 0x80000000
   178f8:	sbcs	r3, r3, #0
   178fc:	blt	177a4 <__assert_fail@plt+0x63d4>
   17900:	rsb	r3, r6, #-16777216	; 0xff000000
   17904:	add	r3, r3, #16711680	; 0xff0000
   17908:	add	r3, r3, #63488	; 0xf800
   1790c:	add	r3, r3, #148	; 0x94
   17910:	cmp	ip, #0
   17914:	str	r3, [sp, #156]	; 0x9c
   17918:	beq	16f88 <__assert_fail@plt+0x5bb8>
   1791c:	b	176cc <__assert_fail@plt+0x62fc>
   17920:	mov	r2, #5
   17924:	ldr	r1, [pc, #952]	; 17ce4 <__assert_fail@plt+0x6914>
   17928:	mov	r0, #0
   1792c:	bl	11130 <dcgettext@plt>
   17930:	mov	r2, r6
   17934:	mov	r3, r7
   17938:	strd	r4, [sp]
   1793c:	bl	12a40 <__assert_fail@plt+0x1670>
   17940:	ldr	r2, [pc, #880]	; 17cb8 <__assert_fail@plt+0x68e8>
   17944:	mov	r3, #0
   17948:	cmp	r2, r4
   1794c:	sbcs	r3, r3, r5
   17950:	bge	1774c <__assert_fail@plt+0x637c>
   17954:	sub	r3, r4, #1888	; 0x760
   17958:	sub	r3, r3, #12
   1795c:	str	r3, [sp, #156]	; 0x9c
   17960:	mov	r6, r4
   17964:	mov	r7, r5
   17968:	b	176cc <__assert_fail@plt+0x62fc>
   1796c:	ldrb	r3, [sp, #825]	; 0x339
   17970:	cmp	r3, #0
   17974:	beq	183d4 <__assert_fail@plt+0x7004>
   17978:	ldr	r3, [sp, #828]	; 0x33c
   1797c:	cmp	r3, #0
   17980:	bne	183d4 <__assert_fail@plt+0x7004>
   17984:	ldr	r3, [sp, #832]	; 0x340
   17988:	cmp	r3, #0
   1798c:	beq	17810 <__assert_fail@plt+0x6440>
   17990:	ldr	r3, [sp, #48]	; 0x30
   17994:	cmp	ip, #0
   17998:	str	r3, [sp, #136]	; 0x88
   1799c:	str	r3, [sp, #140]	; 0x8c
   179a0:	str	r3, [sp, #144]	; 0x90
   179a4:	str	r3, [sp, #764]	; 0x2fc
   179a8:	bne	18dc0 <__assert_fail@plt+0x79f0>
   179ac:	mov	r3, fp
   179b0:	mov	lr, fp
   179b4:	mov	r1, fp
   179b8:	mvn	r0, #0
   179bc:	str	r0, [sp, #168]	; 0xa8
   179c0:	ldr	r0, [sp, #836]	; 0x344
   179c4:	ldr	r5, [sp, #156]	; 0x9c
   179c8:	cmp	r0, #0
   179cc:	str	r1, [sp, #180]	; 0xb4
   179d0:	ldrne	ip, [sp, #692]	; 0x2b4
   179d4:	ldreq	ip, [sp, #168]	; 0xa8
   179d8:	add	r1, sp, #136	; 0x88
   179dc:	str	r3, [sp, #188]	; 0xbc
   179e0:	ldr	r0, [sp, #36]	; 0x24
   179e4:	mvn	r3, #0
   179e8:	strne	ip, [sp, #168]	; 0xa8
   179ec:	str	lr, [sp, #184]	; 0xb8
   179f0:	str	r2, [sp, #196]	; 0xc4
   179f4:	str	ip, [sp, #212]	; 0xd4
   179f8:	str	r3, [sp, #160]	; 0xa0
   179fc:	str	r4, [sp, #192]	; 0xc0
   17a00:	str	r5, [sp, #200]	; 0xc8
   17a04:	bl	1d99c <__assert_fail@plt+0xc5cc>
   17a08:	add	r1, sp, #136	; 0x88
   17a0c:	mov	r8, r0
   17a10:	add	r0, sp, #180	; 0xb4
   17a14:	bl	129c0 <__assert_fail@plt+0x15f0>
   17a18:	cmp	r0, #0
   17a1c:	bne	17eac <__assert_fail@plt+0x6adc>
   17a20:	ldr	r6, [sp, #848]	; 0x350
   17a24:	cmp	r6, #0
   17a28:	bne	17d18 <__assert_fail@plt+0x6948>
   17a2c:	ldr	r3, [sp, #180]	; 0xb4
   17a30:	ldr	r2, [sp, #136]	; 0x88
   17a34:	ldr	r1, [sp, #184]	; 0xb8
   17a38:	ldr	r0, [sp, #140]	; 0x8c
   17a3c:	str	r2, [sp, #56]	; 0x38
   17a40:	cmp	r3, r2
   17a44:	cmpeq	r1, r0
   17a48:	ldr	r2, [sp, #152]	; 0x98
   17a4c:	str	r1, [sp, #64]	; 0x40
   17a50:	str	r2, [sp, #44]	; 0x2c
   17a54:	mov	r1, r2
   17a58:	ldr	r2, [sp, #200]	; 0xc8
   17a5c:	str	r3, [sp, #48]	; 0x30
   17a60:	str	r0, [sp, #72]	; 0x48
   17a64:	ldr	ip, [sp, #188]	; 0xbc
   17a68:	ldr	r3, [sp, #144]	; 0x90
   17a6c:	mov	r0, r2
   17a70:	str	r2, [sp, #88]	; 0x58
   17a74:	ldr	r2, [sp, #156]	; 0x9c
   17a78:	str	ip, [sp, #80]	; 0x50
   17a7c:	str	r3, [sp, #84]	; 0x54
   17a80:	ldr	r5, [sp, #192]	; 0xc0
   17a84:	ldr	r8, [sp, #148]	; 0x94
   17a88:	ldr	r9, [sp, #196]	; 0xc4
   17a8c:	mov	lr, r2
   17a90:	str	r2, [sp, #92]	; 0x5c
   17a94:	bne	17acc <__assert_fail@plt+0x66fc>
   17a98:	mov	r2, r3
   17a9c:	cmp	ip, r2
   17aa0:	sub	r3, r5, r8
   17aa4:	clz	r3, r3
   17aa8:	lsr	r3, r3, #5
   17aac:	moveq	r3, #0
   17ab0:	cmp	r3, #0
   17ab4:	beq	17acc <__assert_fail@plt+0x66fc>
   17ab8:	mov	r2, r1
   17abc:	cmp	r9, r2
   17ac0:	cmpeq	r0, lr
   17ac4:	moveq	fp, #1
   17ac8:	movne	fp, #0
   17acc:	ldrb	r3, [sp, #853]	; 0x355
   17ad0:	cmp	r3, #0
   17ad4:	beq	16f88 <__assert_fail@plt+0x5bb8>
   17ad8:	mov	r2, #5
   17adc:	ldr	r1, [pc, #516]	; 17ce8 <__assert_fail@plt+0x6918>
   17ae0:	mov	r0, #0
   17ae4:	bl	11130 <dcgettext@plt>
   17ae8:	bl	12a40 <__assert_fail@plt+0x1670>
   17aec:	mov	r2, #5
   17af0:	ldr	r1, [pc, #500]	; 17cec <__assert_fail@plt+0x691c>
   17af4:	mov	r0, #0
   17af8:	bl	11130 <dcgettext@plt>
   17afc:	add	r7, sp, #572	; 0x23c
   17b00:	mov	r2, r7
   17b04:	add	r1, sp, #672	; 0x2a0
   17b08:	mov	r4, r0
   17b0c:	add	r0, sp, #180	; 0xb4
   17b10:	bl	137cc <__assert_fail@plt+0x23fc>
   17b14:	mov	r1, r0
   17b18:	mov	r0, r4
   17b1c:	bl	12a40 <__assert_fail@plt+0x1670>
   17b20:	mov	r2, #5
   17b24:	ldr	r1, [pc, #452]	; 17cf0 <__assert_fail@plt+0x6920>
   17b28:	mov	r0, #0
   17b2c:	bl	11130 <dcgettext@plt>
   17b30:	mov	r2, r7
   17b34:	add	r1, sp, #672	; 0x2a0
   17b38:	mov	r4, r0
   17b3c:	add	r0, sp, #136	; 0x88
   17b40:	bl	137cc <__assert_fail@plt+0x23fc>
   17b44:	mov	r1, r0
   17b48:	mov	r0, r4
   17b4c:	bl	12a40 <__assert_fail@plt+0x1670>
   17b50:	ldr	r1, [sp, #88]	; 0x58
   17b54:	ldr	r0, [sp, #92]	; 0x5c
   17b58:	ldr	r3, [pc, #404]	; 17cf4 <__assert_fail@plt+0x6924>
   17b5c:	cmp	r1, r0
   17b60:	ldr	r1, [sp, #80]	; 0x50
   17b64:	ldr	r0, [sp, #84]	; 0x54
   17b68:	ldr	r4, [pc, #392]	; 17cf8 <__assert_fail@plt+0x6928>
   17b6c:	ldr	r2, [pc, #392]	; 17cfc <__assert_fail@plt+0x692c>
   17b70:	moveq	r2, r3
   17b74:	cmp	r1, r0
   17b78:	ldr	r1, [sp, #64]	; 0x40
   17b7c:	ldr	r0, [sp, #72]	; 0x48
   17b80:	moveq	lr, r3
   17b84:	movne	lr, r4
   17b88:	cmp	r1, r0
   17b8c:	ldr	r0, [sp, #56]	; 0x38
   17b90:	ldr	r1, [sp, #48]	; 0x30
   17b94:	moveq	ip, r3
   17b98:	movne	ip, r4
   17b9c:	cmp	r1, r0
   17ba0:	ldr	r1, [sp, #44]	; 0x2c
   17ba4:	moveq	r0, r3
   17ba8:	movne	r0, r4
   17bac:	cmp	r9, r1
   17bb0:	moveq	r1, r3
   17bb4:	movne	r1, r4
   17bb8:	str	r2, [sp, #4]
   17bbc:	cmp	r5, r8
   17bc0:	ldr	r2, [pc, #312]	; 17d00 <__assert_fail@plt+0x6930>
   17bc4:	moveq	r4, r3
   17bc8:	mov	r3, #100	; 0x64
   17bcc:	str	r0, [sp, #24]
   17bd0:	str	r1, [sp, #8]
   17bd4:	str	r2, [sp]
   17bd8:	mov	r1, r3
   17bdc:	str	lr, [sp, #16]
   17be0:	str	ip, [sp, #20]
   17be4:	str	r4, [sp, #12]
   17be8:	mov	r0, r7
   17bec:	mov	r2, #1
   17bf0:	bl	113c4 <__snprintf_chk@plt>
   17bf4:	subs	r3, r0, #0
   17bf8:	blt	18fd0 <__assert_fail@plt+0x7c00>
   17bfc:	cmp	r3, #99	; 0x63
   17c00:	movge	r3, #99	; 0x63
   17c04:	cmp	r3, #0
   17c08:	beq	18fc0 <__assert_fail@plt+0x7bf0>
   17c0c:	sub	r2, r3, #1
   17c10:	add	r1, sp, #904	; 0x388
   17c14:	add	r1, r1, r2
   17c18:	ldrb	r1, [r1, #-332]	; 0xfffffeb4
   17c1c:	cmp	r1, #32
   17c20:	addeq	r1, r7, r2
   17c24:	moveq	r3, r2
   17c28:	bne	18fc0 <__assert_fail@plt+0x7bf0>
   17c2c:	cmp	r3, #0
   17c30:	beq	18fc0 <__assert_fail@plt+0x7bf0>
   17c34:	ldrb	r0, [r1, #-1]!
   17c38:	sub	r2, r3, #1
   17c3c:	cmp	r0, #32
   17c40:	bne	18fc0 <__assert_fail@plt+0x7bf0>
   17c44:	mov	r3, r2
   17c48:	b	17c2c <__assert_fail@plt+0x685c>
   17c4c:	addeq	r0, r0, pc, lsl r0
   17c50:	andeq	r3, r2, r8, ror r6
   17c54:	andeq	r0, r0, ip, ror #14
   17c58:	andeq	r2, r2, r0, ror #25
   17c5c:	andeq	r0, r0, sp, lsl #2
   17c60:	svcvc	0x008958ff
   17c64:	mcrvc	3, 1, r6, cr5, cr15, {7}
   17c68:	andeq	r2, r2, r4, lsl #27
   17c6c:	andeq	r3, r2, r8, ror #11
   17c70:	andeq	r3, r2, ip, lsr #12
   17c74:	andeq	r3, r2, r0, asr r6
   17c78:	andeq	r3, r2, r4, ror #12
   17c7c:	andeq	r2, r2, r4, ror #25
   17c80:	strdeq	r2, [r2], -ip
   17c84:	andeq	r2, r2, ip, ror #27
   17c88:	andeq	r2, r2, r0, lsl lr
   17c8c:	andeq	r2, r2, r4, lsr lr
   17c90:	andeq	r2, r2, r8, asr lr
   17c94:	andeq	r2, r2, r4, lsl #29
   17c98:	andeq	r2, r2, r4, lsr #26
   17c9c:	andeq	r4, r3, r0, lsr #3
   17ca0:	andeq	r2, r2, ip, ror #26
   17ca4:	ldrdeq	r2, [r2], -ip
   17ca8:	andeq	r2, r2, r8, lsr sp
   17cac:	andeq	r3, r2, ip, asr #11
   17cb0:	andeq	r3, r2, r4, lsl #12
   17cb4:	andeq	r2, r2, r4, ror #27
   17cb8:	andhi	r0, r0, fp, ror #14
   17cbc:	ldrdeq	r2, [r2], -r8
   17cc0:	strdeq	r2, [r2], -r8
   17cc4:	andeq	r2, r2, r4, asr sp
   17cc8:	andeq	r2, r2, ip, lsl #27
   17ccc:			; <UNDEFINED> instruction: 0xfffff895
   17cd0:			; <UNDEFINED> instruction: 0x00022db0
   17cd4:	andeq	r2, r2, ip, ror #22
   17cd8:	andeq	r2, r2, r0, lsr #30
   17cdc:	andeq	r2, r2, ip, asr #27
   17ce0:			; <UNDEFINED> instruction: 0xfffff894
   17ce4:	andeq	r2, r2, ip, lsr #29
   17ce8:	strdeq	r2, [r2], -ip
   17cec:	andeq	r3, r2, r0, lsr #32
   17cf0:	andeq	r3, r2, r0, asr #32
   17cf4:	andeq	r3, r2, r0, ror #12
   17cf8:	ldrdeq	r2, [r2], -ip
   17cfc:	ldrdeq	r2, [r2], -r4
   17d00:	andeq	r3, r2, r0, rrx
   17d04:			; <UNDEFINED> instruction: 0x91a2b3c5
   17d08:	andeq	r2, r2, r4, lsl #22
   17d0c:	stmhi	r8, {r0, r3, r7, fp, pc}
   17d10:	strbtvs	r6, [r6], -r7, ror #12
   17d14:	blne	13b83f0 <optarg@@GLIBC_2.4+0x1384248>
   17d18:	ldr	r4, [sp, #696]	; 0x2b8
   17d1c:	ldr	r5, [pc, #-32]	; 17d04 <__assert_fail@plt+0x6934>
   17d20:	cmp	r4, #0
   17d24:	asr	r1, r4, #31
   17d28:	smull	r3, r5, r5, r4
   17d2c:	ldr	r3, [pc, #-44]	; 17d08 <__assert_fail@plt+0x6938>
   17d30:	add	r5, r5, r4
   17d34:	add	r7, sp, #572	; 0x23c
   17d38:	rsb	r5, r1, r5, asr #11
   17d3c:	movge	r2, #43	; 0x2b
   17d40:	eor	r1, r5, r5, asr #31
   17d44:	movlt	r2, #45	; 0x2d
   17d48:	sub	r1, r1, r5, asr #31
   17d4c:	add	r8, r7, #3
   17d50:	mov	ip, #88	; 0x58
   17d54:	str	r1, [sp, #4]
   17d58:	str	r2, [sp]
   17d5c:	mov	r1, #1
   17d60:	mov	r0, r8
   17d64:	mov	r2, #27
   17d68:	strb	ip, [sp, #574]	; 0x23e
   17d6c:	strb	ip, [sp, #573]	; 0x23d
   17d70:	strb	ip, [sp, #572]	; 0x23c
   17d74:	bl	112a4 <__sprintf_chk@plt>
   17d78:	mov	r3, #3600	; 0xe10
   17d7c:	mul	r5, r3, r5
   17d80:	sub	r4, r4, r5
   17d84:	cmp	r4, #0
   17d88:	mov	r9, r0
   17d8c:	add	r1, r8, r0
   17d90:	eor	r0, r4, r4, asr #31
   17d94:	sub	r0, r0, r4, asr #31
   17d98:	beq	17e30 <__assert_fail@plt+0x6a60>
   17d9c:	ldr	r3, [pc, #-152]	; 17d0c <__assert_fail@plt+0x693c>
   17da0:	asr	r4, r0, #31
   17da4:	ldr	r5, [pc, #-156]	; 17d10 <__assert_fail@plt+0x6940>
   17da8:	smull	r2, r3, r3, r0
   17dac:	ldr	ip, [pc, #-160]	; 17d14 <__assert_fail@plt+0x6944>
   17db0:	add	r3, r3, r0
   17db4:	rsb	r3, r4, r3, asr #5
   17db8:	smull	r2, ip, ip, r0
   17dbc:	smull	r2, lr, r5, r3
   17dc0:	asr	r2, r3, #31
   17dc4:	rsb	r2, r2, lr, asr #2
   17dc8:	rsb	ip, r4, ip, asr #6
   17dcc:	add	r2, r2, r2, lsl #2
   17dd0:	rsb	r4, r3, r3, lsl #4
   17dd4:	sub	r2, r3, r2, lsl #1
   17dd8:	add	lr, ip, #48	; 0x30
   17ddc:	subs	r3, r0, r4, lsl #2
   17de0:	mov	ip, #58	; 0x3a
   17de4:	add	r2, r2, #48	; 0x30
   17de8:	strb	ip, [r8, r9]
   17dec:	add	r0, r1, #3
   17df0:	strb	lr, [r1, #1]
   17df4:	strb	r2, [r1, #2]
   17df8:	beq	17e28 <__assert_fail@plt+0x6a58>
   17dfc:	smull	r2, r5, r5, r3
   17e00:	strb	ip, [r1, #3]
   17e04:	asr	r2, r3, #31
   17e08:	rsb	r2, r2, r5, asr #2
   17e0c:	add	r0, r1, #6
   17e10:	add	ip, r2, r2, lsl #2
   17e14:	add	r2, r2, #48	; 0x30
   17e18:	sub	r3, r3, ip, lsl #1
   17e1c:	add	r3, r3, #48	; 0x30
   17e20:	strb	r3, [r1, #5]
   17e24:	strb	r2, [r1, #4]
   17e28:	mov	r3, #0
   17e2c:	strb	r3, [r0]
   17e30:	mov	r0, r7
   17e34:	bl	1d7f4 <__assert_fail@plt+0xc424>
   17e38:	subs	r5, r0, #0
   17e3c:	beq	18ea8 <__assert_fail@plt+0x7ad8>
   17e40:	ldr	r2, [sp, #180]	; 0xb4
   17e44:	ldr	r3, [sp, #184]	; 0xb8
   17e48:	ldr	r1, [sp, #188]	; 0xbc
   17e4c:	str	r2, [sp, #136]	; 0x88
   17e50:	ldr	r2, [sp, #192]	; 0xc0
   17e54:	str	r3, [sp, #140]	; 0x8c
   17e58:	str	r1, [sp, #144]	; 0x90
   17e5c:	ldr	r3, [sp, #196]	; 0xc4
   17e60:	ldr	r1, [sp, #200]	; 0xc8
   17e64:	str	r2, [sp, #148]	; 0x94
   17e68:	ldr	r2, [sp, #212]	; 0xd4
   17e6c:	str	r3, [sp, #152]	; 0x98
   17e70:	str	r1, [sp, #156]	; 0x9c
   17e74:	mvn	r3, #0
   17e78:	add	r1, sp, #136	; 0x88
   17e7c:	str	r2, [sp, #168]	; 0xa8
   17e80:	str	r3, [sp, #160]	; 0xa0
   17e84:	bl	1d99c <__assert_fail@plt+0xc5cc>
   17e88:	add	r1, sp, #136	; 0x88
   17e8c:	mov	r8, r0
   17e90:	add	r0, sp, #180	; 0xb4
   17e94:	bl	129c0 <__assert_fail@plt+0x15f0>
   17e98:	mov	r4, r0
   17e9c:	mov	r0, r5
   17ea0:	bl	1d87c <__assert_fail@plt+0xc4ac>
   17ea4:	cmp	r4, #0
   17ea8:	beq	17a2c <__assert_fail@plt+0x665c>
   17eac:	ldr	r3, [sp, #832]	; 0x340
   17eb0:	cmp	r3, #0
   17eb4:	beq	180a8 <__assert_fail@plt+0x6cd8>
   17eb8:	ldr	r1, [sp, #828]	; 0x33c
   17ebc:	cmp	r1, #0
   17ec0:	bne	1830c <__assert_fail@plt+0x6f3c>
   17ec4:	add	r3, sp, #680	; 0x2a8
   17ec8:	ldrd	r4, [r3]
   17ecc:	cmp	r4, #1
   17ed0:	sbcs	r3, r5, #0
   17ed4:	blt	19074 <__assert_fail@plt+0x7ca4>
   17ed8:	ldr	ip, [sp, #160]	; 0xa0
   17edc:	ldr	r0, [sp, #688]	; 0x2b0
   17ee0:	mov	r3, r1
   17ee4:	subs	r2, ip, r0
   17ee8:	movne	r2, #1
   17eec:	add	r1, pc, #940	; 0x3ac
   17ef0:	ldrd	r0, [r1]
   17ef4:	subs	r2, r4, r2
   17ef8:	sbc	r3, r5, r3
   17efc:	cmp	r0, r2
   17f00:	sbcs	r3, r1, r3
   17f04:	blt	17ff8 <__assert_fail@plt+0x6c28>
   17f08:	cmp	r4, #1
   17f0c:	sbcs	r3, r5, #0
   17f10:	blt	18fb4 <__assert_fail@plt+0x7be4>
   17f14:	ldr	r2, [sp, #160]	; 0xa0
   17f18:	ldr	r3, [sp, #688]	; 0x2b0
   17f1c:	cmp	r2, r3
   17f20:	movne	r0, #1
   17f24:	movne	r1, #0
   17f28:	beq	18f9c <__assert_fail@plt+0x7bcc>
   17f2c:	subs	r4, r4, r0
   17f30:	sbc	r5, r5, r1
   17f34:	lsl	r0, r4, #3
   17f38:	lsl	ip, r5, #3
   17f3c:	orr	r1, ip, r4, lsr #29
   17f40:	subs	r0, r0, r4
   17f44:	sbc	r1, r1, r5
   17f48:	cmp	r0, #0
   17f4c:	sub	r3, r3, r2
   17f50:	sbcs	ip, r1, #0
   17f54:	ldr	r2, [pc, #844]	; 182a8 <__assert_fail@plt+0x6ed8>
   17f58:	add	r3, r3, #7
   17f5c:	blt	18f5c <__assert_fail@plt+0x7b8c>
   17f60:	smull	ip, r2, r2, r3
   17f64:	add	r2, r2, r3
   17f68:	asr	ip, r3, #31
   17f6c:	rsb	r2, ip, r2, asr #2
   17f70:	rsb	r2, r2, r2, lsl #3
   17f74:	subs	r2, r3, r2
   17f78:	asrmi	r3, r2, #31
   17f7c:	bmi	17fac <__assert_fail@plt+0x6bdc>
   17f80:	mvn	r4, #0
   17f84:	subs	r4, r4, r0
   17f88:	mvn	r5, #-2147483648	; 0x80000000
   17f8c:	sbc	r5, r5, r1
   17f90:	asr	r3, r2, #31
   17f94:	cmp	r4, r2
   17f98:	sbcs	ip, r5, r3
   17f9c:	movlt	ip, #1
   17fa0:	movge	ip, #0
   17fa4:	cmp	ip, #0
   17fa8:	bne	17ff8 <__assert_fail@plt+0x6c28>
   17fac:	ldr	ip, [sp, #148]	; 0x94
   17fb0:	adds	r2, r2, r0
   17fb4:	adc	r3, r3, r1
   17fb8:	cmp	ip, #0
   17fbc:	blt	18dcc <__assert_fail@plt+0x79fc>
   17fc0:	cmp	r2, #0
   17fc4:	sbcs	r1, r3, #0
   17fc8:	blt	18f34 <__assert_fail@plt+0x7b64>
   17fcc:	mvn	r0, #-2147483648	; 0x80000000
   17fd0:	sub	r0, r0, ip
   17fd4:	cmp	r0, r2
   17fd8:	asr	r1, r0, #31
   17fdc:	sbcs	r1, r1, r3
   17fe0:	movlt	r1, #1
   17fe4:	movge	r1, #0
   17fe8:	cmp	r1, #0
   17fec:	beq	18e00 <__assert_fail@plt+0x7a30>
   17ff0:	add	r2, ip, r2
   17ff4:	str	r2, [sp, #148]	; 0x94
   17ff8:	ldrb	r3, [sp, #853]	; 0x355
   17ffc:	cmp	r3, #0
   18000:	beq	16f88 <__assert_fail@plt+0x5bb8>
   18004:	mov	r2, #5
   18008:	ldr	r1, [pc, #668]	; 182ac <__assert_fail@plt+0x6edc>
   1800c:	mov	r0, #0
   18010:	bl	11130 <dcgettext@plt>
   18014:	add	r1, sp, #572	; 0x23c
   18018:	mov	r6, r0
   1801c:	add	r0, sp, #672	; 0x2a0
   18020:	bl	13470 <__assert_fail@plt+0x20a0>
   18024:	add	r3, sp, #680	; 0x2a8
   18028:	add	r1, sp, #672	; 0x2a0
   1802c:	add	r2, sp, #372	; 0x174
   18030:	ldrd	r4, [r3]
   18034:	ldr	r8, [sp, #688]	; 0x2b0
   18038:	mov	r7, r0
   1803c:	add	r0, sp, #136	; 0x88
   18040:	bl	137cc <__assert_fail@plt+0x23fc>
   18044:	str	r8, [sp]
   18048:	mov	r2, r4
   1804c:	mov	r3, r5
   18050:	mov	r1, r7
   18054:	str	r0, [sp, #4]
   18058:	mov	r0, r6
   1805c:	bl	12a40 <__assert_fail@plt+0x1670>
   18060:	b	16f88 <__assert_fail@plt+0x5bb8>
   18064:	mov	r2, #5
   18068:	ldr	r1, [pc, #576]	; 182b0 <__assert_fail@plt+0x6ee0>
   1806c:	mov	r0, #0
   18070:	bl	11130 <dcgettext@plt>
   18074:	add	r1, sp, #572	; 0x23c
   18078:	mov	r4, r0
   1807c:	add	r0, sp, #672	; 0x2a0
   18080:	bl	13470 <__assert_fail@plt+0x20a0>
   18084:	add	r2, sp, #372	; 0x174
   18088:	add	r1, sp, #672	; 0x2a0
   1808c:	mov	r5, r0
   18090:	add	r0, sp, #136	; 0x88
   18094:	bl	137cc <__assert_fail@plt+0x23fc>
   18098:	mov	r1, r5
   1809c:	mov	r2, r0
   180a0:	mov	r0, r4
   180a4:	bl	12a40 <__assert_fail@plt+0x1670>
   180a8:	ldrb	r3, [sp, #853]	; 0x355
   180ac:	cmp	r3, #0
   180b0:	beq	18318 <__assert_fail@plt+0x6f48>
   180b4:	ldr	r3, [sp, #828]	; 0x33c
   180b8:	cmp	r3, #0
   180bc:	beq	18608 <__assert_fail@plt+0x7238>
   180c0:	ldr	r3, [sp, #832]	; 0x340
   180c4:	cmp	r3, #0
   180c8:	bne	18ecc <__assert_fail@plt+0x7afc>
   180cc:	add	r6, sp, #372	; 0x174
   180d0:	mov	r2, #5
   180d4:	ldr	r1, [pc, #472]	; 182b4 <__assert_fail@plt+0x6ee4>
   180d8:	mov	r0, #0
   180dc:	bl	11130 <dcgettext@plt>
   180e0:	mov	r2, r6
   180e4:	add	r1, sp, #672	; 0x2a0
   180e8:	mov	r4, r0
   180ec:	add	r0, sp, #136	; 0x88
   180f0:	bl	137cc <__assert_fail@plt+0x23fc>
   180f4:	mov	r1, r0
   180f8:	mov	r0, r4
   180fc:	bl	12a40 <__assert_fail@plt+0x1670>
   18100:	add	r3, sp, #768	; 0x300
   18104:	add	r1, sp, #776	; 0x308
   18108:	add	ip, sp, #784	; 0x310
   1810c:	ldrd	r2, [r3]
   18110:	ldrd	r0, [r1]
   18114:	ldrd	r4, [ip]
   18118:	ldrb	r9, [sp, #853]	; 0x355
   1811c:	orr	r0, r0, r2
   18120:	orr	r1, r1, r3
   18124:	orr	r6, r0, r4
   18128:	orr	r7, r1, r5
   1812c:	orrs	ip, r6, r7
   18130:	beq	1885c <__assert_fail@plt+0x748c>
   18134:	cmp	r9, #0
   18138:	beq	1816c <__assert_fail@plt+0x6d9c>
   1813c:	orrs	r3, r0, r1
   18140:	bne	185b8 <__assert_fail@plt+0x71e8>
   18144:	ldr	r3, [sp, #144]	; 0x90
   18148:	cmp	r3, #12
   1814c:	beq	18164 <__assert_fail@plt+0x6d94>
   18150:	mov	r2, #5
   18154:	ldr	r1, [pc, #348]	; 182b8 <__assert_fail@plt+0x6ee8>
   18158:	mov	r0, #0
   1815c:	bl	11130 <dcgettext@plt>
   18160:	bl	12a40 <__assert_fail@plt+0x1670>
   18164:	add	r3, sp, #768	; 0x300
   18168:	ldrd	r2, [r3]
   1816c:	cmp	r2, #0
   18170:	sbcs	r1, r3, #0
   18174:	ldr	ip, [sp, #156]	; 0x9c
   18178:	blt	18590 <__assert_fail@plt+0x71c0>
   1817c:	cmp	ip, #0
   18180:	blt	185ec <__assert_fail@plt+0x721c>
   18184:	mvn	r0, #-2147483648	; 0x80000000
   18188:	mov	r1, #0
   1818c:	cmp	r0, r2
   18190:	sbcs	lr, r1, r3
   18194:	blt	18274 <__assert_fail@plt+0x6ea4>
   18198:	subs	r0, r0, r2
   1819c:	sbc	r1, r1, r3
   181a0:	asr	r5, ip, #31
   181a4:	cmp	r0, ip
   181a8:	sbcs	r1, r1, r5
   181ac:	movlt	r1, #1
   181b0:	movge	r1, #0
   181b4:	cmp	r1, #0
   181b8:	bne	18274 <__assert_fail@plt+0x6ea4>
   181bc:	add	r1, sp, #776	; 0x308
   181c0:	add	fp, ip, r2
   181c4:	ldrd	r0, [r1]
   181c8:	cmp	r0, #0
   181cc:	sbcs	r3, r1, #0
   181d0:	ldr	r3, [sp, #152]	; 0x98
   181d4:	blt	1851c <__assert_fail@plt+0x714c>
   181d8:	cmp	r3, #0
   181dc:	blt	18500 <__assert_fail@plt+0x7130>
   181e0:	mvn	r4, #-2147483648	; 0x80000000
   181e4:	mov	r5, #0
   181e8:	cmp	r4, r0
   181ec:	sbcs	r2, r5, r1
   181f0:	blt	18274 <__assert_fail@plt+0x6ea4>
   181f4:	subs	r4, r4, r0
   181f8:	sbc	r5, r5, r1
   181fc:	asr	r7, r3, #31
   18200:	cmp	r4, r3
   18204:	sbcs	r2, r5, r7
   18208:	movlt	r2, #1
   1820c:	movge	r2, #0
   18210:	cmp	r2, #0
   18214:	bne	18274 <__assert_fail@plt+0x6ea4>
   18218:	add	r2, sp, #784	; 0x310
   1821c:	add	r9, r3, r0
   18220:	ldrd	r6, [r2]
   18224:	ldr	r4, [sp, #148]	; 0x94
   18228:	cmp	r6, #0
   1822c:	sbcs	r3, r7, #0
   18230:	blt	18544 <__assert_fail@plt+0x7174>
   18234:	cmp	r4, #0
   18238:	blt	184e4 <__assert_fail@plt+0x7114>
   1823c:	mvn	r2, #-2147483648	; 0x80000000
   18240:	mov	r3, #0
   18244:	cmp	r2, r6
   18248:	sbcs	r1, r3, r7
   1824c:	blt	18274 <__assert_fail@plt+0x6ea4>
   18250:	subs	r2, r2, r6
   18254:	sbc	r3, r3, r7
   18258:	asr	r1, r4, #31
   1825c:	cmp	r2, r4
   18260:	sbcs	r3, r3, r1
   18264:	movlt	r5, #1
   18268:	movge	r5, #0
   1826c:	cmp	r5, #0
   18270:	beq	186bc <__assert_fail@plt+0x72ec>
   18274:	ldrb	r3, [sp, #853]	; 0x355
   18278:	cmp	r3, #0
   1827c:	beq	16f88 <__assert_fail@plt+0x5bb8>
   18280:	mov	r2, #5
   18284:	ldr	r1, [pc, #48]	; 182bc <__assert_fail@plt+0x6eec>
   18288:	mov	r0, #0
   1828c:	bl	11130 <dcgettext@plt>
   18290:	ldr	r2, [pc, #40]	; 182c0 <__assert_fail@plt+0x6ef0>
   18294:	ldr	r1, [pc, #40]	; 182c4 <__assert_fail@plt+0x6ef4>
   18298:	bl	12a40 <__assert_fail@plt+0x1670>
   1829c:	b	16f88 <__assert_fail@plt+0x5bb8>
   182a0:	stmdbmi	r4!, {r0, r3, r6, r9, ip, pc}
   182a4:	subne	r2, r9, #-1845493760	; 0x92000000
   182a8:	subls	r2, r9, #-1828716544	; 0x93000000
   182ac:	andeq	r3, r2, r8, ror #2
   182b0:			; <UNDEFINED> instruction: 0x000231b8
   182b4:	andeq	r3, r2, r8, asr r2
   182b8:	ldrdeq	r3, [r2], -r8
   182bc:	andeq	r3, r2, r0, lsr #6
   182c0:	andeq	r0, r0, r5, ror #16
   182c4:	andeq	r3, r2, r0, lsr r3
   182c8:	andeq	r3, r2, r4, lsr #9
   182cc:	andeq	r2, r2, ip, lsr pc
   182d0:	andeq	r2, r2, ip, ror #30
   182d4:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   182d8:	andeq	r2, r2, ip, ror #22
   182dc:	andeq	r3, r2, r0, ror #12
   182e0:	andeq	r3, r2, r4, ror r2
   182e4:	ldrdeq	r3, [r2], -r8
   182e8:	andeq	r3, r2, r4, lsl #4
   182ec:	andeq	r3, r2, ip, lsl r2
   182f0:	andeq	r3, r2, r4, lsl #7
   182f4:	andeq	r3, r2, r4, asr #7
   182f8:	andeq	r3, r2, r0, ror #7
   182fc:	andeq	r3, r2, r0, lsr #8
   18300:	andeq	r3, r2, ip, asr r4
   18304:	andeq	r3, r2, r0, lsl #9
   18308:	ldrdeq	r3, [r2], -r0
   1830c:	ldrb	r2, [sp, #853]	; 0x355
   18310:	cmp	r2, #0
   18314:	bne	180c4 <__assert_fail@plt+0x6cf4>
   18318:	add	r3, sp, #768	; 0x300
   1831c:	add	r1, sp, #776	; 0x308
   18320:	add	ip, sp, #784	; 0x310
   18324:	ldrd	r2, [r3]
   18328:	ldrd	r0, [r1]
   1832c:	ldrd	r4, [ip]
   18330:	orr	r0, r0, r2
   18334:	orr	r1, r1, r3
   18338:	orr	r0, r0, r4
   1833c:	orr	r1, r1, r5
   18340:	orrs	r1, r0, r1
   18344:	bne	1816c <__assert_fail@plt+0x6d9c>
   18348:	ldr	r3, [sp, #848]	; 0x350
   1834c:	ldr	r9, [sp, #48]	; 0x30
   18350:	cmp	r3, #0
   18354:	beq	188ac <__assert_fail@plt+0x74dc>
   18358:	ldr	r2, [sp, #172]	; 0xac
   1835c:	ldr	r1, [sp, #696]	; 0x2b8
   18360:	asr	r3, r2, #31
   18364:	subs	r2, r1, r2
   18368:	rsc	r3, r3, r1, asr #31
   1836c:	mvn	r1, r8
   18370:	lsr	r1, r1, #31
   18374:	cmp	r1, r3, lsr #31
   18378:	beq	18ed4 <__assert_fail@plt+0x7b04>
   1837c:	asr	r1, r8, #31
   18380:	cmp	r8, r2
   18384:	sbcs	ip, r1, r3
   18388:	bge	18efc <__assert_fail@plt+0x7b2c>
   1838c:	subs	r0, r2, r8
   18390:	sbc	r1, r3, r1
   18394:	cmp	r0, #-2147483647	; 0x80000001
   18398:	sbcs	r1, r1, #0
   1839c:	movge	r1, #1
   183a0:	movlt	r1, #0
   183a4:	cmp	r1, #0
   183a8:	subeq	r8, r8, r2
   183ac:	beq	18868 <__assert_fail@plt+0x7498>
   183b0:	cmp	r9, #0
   183b4:	beq	16f88 <__assert_fail@plt+0x5bb8>
   183b8:	mov	r2, #5
   183bc:	ldr	r1, [pc, #-252]	; 182c8 <__assert_fail@plt+0x6ef8>
   183c0:	mov	r0, #0
   183c4:	bl	11130 <dcgettext@plt>
   183c8:	ldr	r1, [sp, #696]	; 0x2b8
   183cc:	bl	12a40 <__assert_fail@plt+0x1670>
   183d0:	b	16f88 <__assert_fail@plt+0x5bb8>
   183d4:	mov	r3, #0
   183d8:	cmp	ip, #0
   183dc:	str	r3, [sp, #136]	; 0x88
   183e0:	str	r3, [sp, #140]	; 0x8c
   183e4:	str	r3, [sp, #144]	; 0x90
   183e8:	str	r3, [sp, #764]	; 0x2fc
   183ec:	moveq	lr, fp
   183f0:	moveq	r3, fp
   183f4:	moveq	r1, fp
   183f8:	bne	18dc0 <__assert_fail@plt+0x79f0>
   183fc:	ldr	ip, [sp, #828]	; 0x33c
   18400:	ldr	r5, [sp, #832]	; 0x340
   18404:	orr	ip, ip, r5
   18408:	orrs	r0, ip, r0
   1840c:	beq	179c0 <__assert_fail@plt+0x65f0>
   18410:	b	179b8 <__assert_fail@plt+0x65e8>
   18414:	mov	r0, #-2147483648	; 0x80000000
   18418:	subs	r0, r0, r4
   1841c:	mvn	r1, #0
   18420:	sbc	r1, r1, r5
   18424:	cmp	r0, #1
   18428:	sbcs	r3, r1, #0
   1842c:	movge	r3, #1
   18430:	movlt	r3, #0
   18434:	str	r3, [sp, #48]	; 0x30
   18438:	b	177f4 <__assert_fail@plt+0x6424>
   1843c:	cmp	r7, #0
   18440:	cmpeq	r6, #23
   18444:	bhi	1856c <__assert_fail@plt+0x719c>
   18448:	mov	r3, r6
   1844c:	ldr	lr, [sp, #752]	; 0x2f0
   18450:	ldr	r1, [sp, #760]	; 0x2f8
   18454:	cmp	ip, #0
   18458:	str	r3, [sp, #144]	; 0x90
   1845c:	str	lr, [sp, #140]	; 0x8c
   18460:	str	r1, [sp, #136]	; 0x88
   18464:	beq	183fc <__assert_fail@plt+0x702c>
   18468:	cmp	r0, #0
   1846c:	mov	r2, #5
   18470:	ldrne	r1, [pc, #-428]	; 182cc <__assert_fail@plt+0x6efc>
   18474:	ldreq	r1, [pc, #-428]	; 182d0 <__assert_fail@plt+0x6f00>
   18478:	movne	r0, #0
   1847c:	bl	11130 <dcgettext@plt>
   18480:	ldr	r1, [sp, #144]	; 0x90
   18484:	ldr	ip, [sp, #136]	; 0x88
   18488:	ldr	r2, [pc, #-444]	; 182d4 <__assert_fail@plt+0x6f04>
   1848c:	add	r6, sp, #372	; 0x174
   18490:	mov	r3, #100	; 0x64
   18494:	str	r1, [sp, #4]
   18498:	str	r2, [sp]
   1849c:	mov	r1, r3
   184a0:	str	ip, [sp, #12]
   184a4:	mov	r2, #1
   184a8:	mov	r4, r0
   184ac:	ldr	r0, [sp, #140]	; 0x8c
   184b0:	str	r0, [sp, #8]
   184b4:	mov	r0, r6
   184b8:	bl	113c4 <__snprintf_chk@plt>
   184bc:	mov	r1, r6
   184c0:	mov	r0, r4
   184c4:	bl	12a40 <__assert_fail@plt+0x1670>
   184c8:	ldr	r0, [sp, #844]	; 0x34c
   184cc:	ldr	r1, [sp, #136]	; 0x88
   184d0:	ldr	lr, [sp, #140]	; 0x8c
   184d4:	ldr	r3, [sp, #144]	; 0x90
   184d8:	ldr	r4, [sp, #148]	; 0x94
   184dc:	ldr	r2, [sp, #152]	; 0x98
   184e0:	b	183fc <__assert_fail@plt+0x702c>
   184e4:	adds	r2, r6, r4
   184e8:	adc	r3, r7, r4, asr #31
   184ec:	cmp	r2, #-2147483648	; 0x80000000
   184f0:	sbcs	r3, r3, #0
   184f4:	movge	r5, #1
   184f8:	movlt	r5, #0
   184fc:	b	1826c <__assert_fail@plt+0x6e9c>
   18500:	adds	r4, r0, r3
   18504:	adc	r5, r1, r3, asr #31
   18508:	cmp	r4, #-2147483648	; 0x80000000
   1850c:	sbcs	r2, r5, #0
   18510:	movge	r2, #1
   18514:	movlt	r2, #0
   18518:	b	18210 <__assert_fail@plt+0x6e40>
   1851c:	mov	r4, #-2147483648	; 0x80000000
   18520:	subs	r4, r4, r0
   18524:	mvn	r5, #0
   18528:	sbc	r5, r5, r1
   1852c:	asr	r7, r3, #31
   18530:	cmp	r3, r4
   18534:	sbcs	r2, r7, r5
   18538:	movlt	r2, #1
   1853c:	movge	r2, #0
   18540:	b	18210 <__assert_fail@plt+0x6e40>
   18544:	mov	r2, #-2147483648	; 0x80000000
   18548:	subs	r2, r2, r6
   1854c:	mvn	r3, #0
   18550:	sbc	r3, r3, r7
   18554:	asr	r1, r4, #31
   18558:	cmp	r4, r2
   1855c:	sbcs	r3, r1, r3
   18560:	movlt	r5, #1
   18564:	movge	r5, #0
   18568:	b	1826c <__assert_fail@plt+0x6e9c>
   1856c:	mvn	r2, #0
   18570:	cmp	r3, #0
   18574:	str	r2, [sp, #144]	; 0x90
   18578:	beq	18db8 <__assert_fail@plt+0x79e8>
   1857c:	ldr	r2, [pc, #-684]	; 182d8 <__assert_fail@plt+0x6f08>
   18580:	cmp	r3, #1
   18584:	ldr	r4, [pc, #-688]	; 182dc <__assert_fail@plt+0x6f0c>
   18588:	moveq	r4, r2
   1858c:	b	1785c <__assert_fail@plt+0x648c>
   18590:	mov	r0, #-2147483648	; 0x80000000
   18594:	subs	r0, r0, r2
   18598:	mvn	r1, #0
   1859c:	sbc	r1, r1, r3
   185a0:	asr	r5, ip, #31
   185a4:	cmp	ip, r0
   185a8:	sbcs	r1, r5, r1
   185ac:	movlt	r1, #1
   185b0:	movge	r1, #0
   185b4:	b	181b4 <__assert_fail@plt+0x6de4>
   185b8:	ldr	r3, [sp, #148]	; 0x94
   185bc:	cmp	r3, #15
   185c0:	beq	185e0 <__assert_fail@plt+0x7210>
   185c4:	mov	r2, #5
   185c8:	ldr	r1, [pc, #-752]	; 182e0 <__assert_fail@plt+0x6f10>
   185cc:	mov	r0, #0
   185d0:	bl	11130 <dcgettext@plt>
   185d4:	bl	12a40 <__assert_fail@plt+0x1670>
   185d8:	add	r3, sp, #784	; 0x310
   185dc:	ldrd	r4, [r3]
   185e0:	orrs	r3, r4, r5
   185e4:	bne	18144 <__assert_fail@plt+0x6d74>
   185e8:	b	18164 <__assert_fail@plt+0x6d94>
   185ec:	adds	r0, r2, ip
   185f0:	adc	r1, r3, ip, asr #31
   185f4:	cmp	r0, #-2147483648	; 0x80000000
   185f8:	sbcs	r1, r1, #0
   185fc:	movge	r1, #1
   18600:	movlt	r1, #0
   18604:	b	181b4 <__assert_fail@plt+0x6de4>
   18608:	ldr	r0, [sp, #832]	; 0x340
   1860c:	cmp	r0, #0
   18610:	bne	180cc <__assert_fail@plt+0x6cfc>
   18614:	mov	r2, #5
   18618:	ldr	r1, [pc, #-828]	; 182e4 <__assert_fail@plt+0x6f14>
   1861c:	bl	11130 <dcgettext@plt>
   18620:	add	r1, sp, #268	; 0x10c
   18624:	add	r6, sp, #372	; 0x174
   18628:	mov	r4, r0
   1862c:	ldr	r0, [sp, #156]	; 0x9c
   18630:	bl	113e0 <__assert_fail@plt+0x10>
   18634:	ldr	r2, [sp, #152]	; 0x98
   18638:	ldr	ip, [sp, #148]	; 0x94
   1863c:	ldr	r1, [pc, #-860]	; 182e8 <__assert_fail@plt+0x6f18>
   18640:	mov	r3, #100	; 0x64
   18644:	add	r2, r2, #1
   18648:	str	r2, [sp, #8]
   1864c:	str	ip, [sp, #12]
   18650:	str	r1, [sp]
   18654:	mov	r2, #1
   18658:	mov	r1, r3
   1865c:	str	r0, [sp, #4]
   18660:	mov	r0, r6
   18664:	bl	113c4 <__snprintf_chk@plt>
   18668:	mov	r1, r6
   1866c:	mov	r0, r4
   18670:	bl	12a40 <__assert_fail@plt+0x1670>
   18674:	ldr	r3, [sp, #832]	; 0x340
   18678:	cmp	r3, #0
   1867c:	beq	180d0 <__assert_fail@plt+0x6d00>
   18680:	ldr	r3, [sp, #828]	; 0x33c
   18684:	cmp	r3, #0
   18688:	beq	180d0 <__assert_fail@plt+0x6d00>
   1868c:	mov	r2, #5
   18690:	ldr	r1, [pc, #-940]	; 182ec <__assert_fail@plt+0x6f1c>
   18694:	mov	r0, #0
   18698:	bl	11130 <dcgettext@plt>
   1869c:	add	r1, sp, #572	; 0x23c
   186a0:	mov	r4, r0
   186a4:	add	r0, sp, #672	; 0x2a0
   186a8:	bl	13470 <__assert_fail@plt+0x20a0>
   186ac:	mov	r1, r0
   186b0:	mov	r0, r4
   186b4:	bl	12a40 <__assert_fail@plt+0x1670>
   186b8:	b	180d0 <__assert_fail@plt+0x6d00>
   186bc:	ldr	r3, [sp, #188]	; 0xbc
   186c0:	ldr	r1, [sp, #184]	; 0xb8
   186c4:	ldr	r2, [sp, #180]	; 0xb4
   186c8:	str	r3, [sp, #144]	; 0x90
   186cc:	ldr	r3, [sp, #212]	; 0xd4
   186d0:	str	r1, [sp, #140]	; 0x8c
   186d4:	add	r4, r4, r6
   186d8:	add	r1, sp, #136	; 0x88
   186dc:	ldr	r0, [sp, #36]	; 0x24
   186e0:	str	r4, [sp, #148]	; 0x94
   186e4:	str	fp, [sp, #156]	; 0x9c
   186e8:	str	r9, [sp, #152]	; 0x98
   186ec:	str	r2, [sp, #136]	; 0x88
   186f0:	str	r3, [sp, #168]	; 0xa8
   186f4:	bl	1d99c <__assert_fail@plt+0xc5cc>
   186f8:	cmn	r0, #1
   186fc:	mov	r8, r0
   18700:	beq	18e68 <__assert_fail@plt+0x7a98>
   18704:	ldrb	r3, [sp, #853]	; 0x355
   18708:	cmp	r3, #0
   1870c:	beq	18348 <__assert_fail@plt+0x6f78>
   18710:	mov	r2, #5
   18714:	ldr	r1, [pc, #-1068]	; 182f0 <__assert_fail@plt+0x6f20>
   18718:	mov	r0, r5
   1871c:	bl	11130 <dcgettext@plt>
   18720:	add	r1, sp, #784	; 0x310
   18724:	add	r3, sp, #768	; 0x300
   18728:	ldrd	r6, [r1]
   1872c:	add	r1, sp, #776	; 0x308
   18730:	ldrd	r2, [r3]
   18734:	strd	r6, [sp, #8]
   18738:	ldrd	r6, [r1]
   1873c:	strd	r6, [sp]
   18740:	bl	12a40 <__assert_fail@plt+0x1670>
   18744:	mov	r2, #5
   18748:	ldr	r1, [pc, #-1116]	; 182f4 <__assert_fail@plt+0x6f24>
   1874c:	mov	r0, r5
   18750:	bl	11130 <dcgettext@plt>
   18754:	add	r2, sp, #372	; 0x174
   18758:	add	r1, sp, #672	; 0x2a0
   1875c:	mov	r6, r0
   18760:	add	r0, sp, #136	; 0x88
   18764:	bl	137cc <__assert_fail@plt+0x23fc>
   18768:	mov	r1, r0
   1876c:	mov	r0, r6
   18770:	bl	12a40 <__assert_fail@plt+0x1670>
   18774:	ldr	r3, [sp, #212]	; 0xd4
   18778:	cmn	r3, #1
   1877c:	beq	187a0 <__assert_fail@plt+0x73d0>
   18780:	ldr	r2, [sp, #168]	; 0xa8
   18784:	cmp	r3, r2
   18788:	beq	187a0 <__assert_fail@plt+0x73d0>
   1878c:	mov	r2, #5
   18790:	ldr	r1, [pc, #-1184]	; 182f8 <__assert_fail@plt+0x6f28>
   18794:	mov	r0, r5
   18798:	bl	11130 <dcgettext@plt>
   1879c:	bl	12a40 <__assert_fail@plt+0x1670>
   187a0:	add	r3, sp, #784	; 0x310
   187a4:	ldrd	r2, [r3]
   187a8:	orrs	r3, r2, r3
   187ac:	bne	18858 <__assert_fail@plt+0x7488>
   187b0:	ldr	r3, [sp, #148]	; 0x94
   187b4:	cmp	r4, r3
   187b8:	bne	187d8 <__assert_fail@plt+0x7408>
   187bc:	add	r3, sp, #776	; 0x308
   187c0:	ldrd	r2, [r3]
   187c4:	orrs	r3, r2, r3
   187c8:	bne	18858 <__assert_fail@plt+0x7488>
   187cc:	ldr	r3, [sp, #152]	; 0x98
   187d0:	cmp	r9, r3
   187d4:	beq	18858 <__assert_fail@plt+0x7488>
   187d8:	mov	r2, #5
   187dc:	ldr	r1, [pc, #-1256]	; 182fc <__assert_fail@plt+0x6f2c>
   187e0:	mov	r0, #0
   187e4:	bl	11130 <dcgettext@plt>
   187e8:	bl	12a40 <__assert_fail@plt+0x1670>
   187ec:	mov	r2, #5
   187f0:	ldr	r1, [pc, #-1272]	; 18300 <__assert_fail@plt+0x6f30>
   187f4:	mov	r0, #0
   187f8:	bl	11130 <dcgettext@plt>
   187fc:	add	r1, sp, #268	; 0x10c
   18800:	mov	r5, r0
   18804:	mov	r0, fp
   18808:	bl	113e0 <__assert_fail@plt+0x10>
   1880c:	mov	r3, r4
   18810:	add	r2, r9, #1
   18814:	mov	r1, r0
   18818:	mov	r0, r5
   1881c:	bl	12a40 <__assert_fail@plt+0x1670>
   18820:	mov	r2, #5
   18824:	ldr	r1, [pc, #-1320]	; 18304 <__assert_fail@plt+0x6f34>
   18828:	mov	r0, #0
   1882c:	bl	11130 <dcgettext@plt>
   18830:	add	r1, sp, #268	; 0x10c
   18834:	mov	r4, r0
   18838:	ldr	r0, [sp, #156]	; 0x9c
   1883c:	bl	113e0 <__assert_fail@plt+0x10>
   18840:	ldr	r2, [sp, #152]	; 0x98
   18844:	ldr	r3, [sp, #148]	; 0x94
   18848:	add	r2, r2, #1
   1884c:	mov	r1, r0
   18850:	mov	r0, r4
   18854:	bl	12a40 <__assert_fail@plt+0x1670>
   18858:	ldrb	r9, [sp, #853]	; 0x355
   1885c:	ldr	r3, [sp, #848]	; 0x350
   18860:	cmp	r3, #0
   18864:	bne	18358 <__assert_fail@plt+0x6f88>
   18868:	cmp	r9, #0
   1886c:	beq	188ac <__assert_fail@plt+0x74dc>
   18870:	mov	r2, #5
   18874:	ldr	r1, [pc, #-1396]	; 18308 <__assert_fail@plt+0x6f38>
   18878:	mov	r0, #0
   1887c:	bl	11130 <dcgettext@plt>
   18880:	add	r1, sp, #672	; 0x2a0
   18884:	add	r2, sp, #372	; 0x174
   18888:	mov	r4, r0
   1888c:	add	r0, sp, #136	; 0x88
   18890:	bl	137cc <__assert_fail@plt+0x23fc>
   18894:	mov	r2, r8
   18898:	asr	r3, r8, #31
   1889c:	mov	r1, r0
   188a0:	mov	r0, r4
   188a4:	bl	12a40 <__assert_fail@plt+0x1670>
   188a8:	ldrb	r9, [sp, #853]	; 0x355
   188ac:	ldr	r2, [sp, #816]	; 0x330
   188b0:	ldr	r3, [sp, #764]	; 0x2fc
   188b4:	mov	r0, r2
   188b8:	asr	r1, r2, #31
   188bc:	add	r5, pc, #900	; 0x384
   188c0:	ldrd	r4, [r5]
   188c4:	strd	r0, [sp, #64]	; 0x40
   188c8:	adds	r0, r2, r3
   188cc:	adc	r1, r1, r3, asr #31
   188d0:	add	r3, pc, #880	; 0x370
   188d4:	ldrd	r2, [r3]
   188d8:	mov	r6, r0
   188dc:	mov	r7, r1
   188e0:	bl	2122c <__assert_fail@plt+0xfe5c>
   188e4:	adds	r0, r2, r4
   188e8:	adc	r1, r3, r5
   188ec:	mov	r2, r4
   188f0:	mov	r3, r5
   188f4:	bl	2122c <__assert_fail@plt+0xfe5c>
   188f8:	mov	r0, r2
   188fc:	mov	r1, r3
   18900:	mov	r2, r4
   18904:	strd	r0, [sp, #72]	; 0x48
   18908:	subs	r0, r6, r0
   1890c:	mov	r3, r5
   18910:	sbc	r1, r7, r1
   18914:	bl	2122c <__assert_fail@plt+0xfe5c>
   18918:	add	r3, sp, #792	; 0x318
   1891c:	ldrd	r2, [r3]
   18920:	cmp	r2, #0
   18924:	strd	r2, [sp, #48]	; 0x30
   18928:	sbcs	r3, r3, #0
   1892c:	mov	fp, r0
   18930:	blt	18ca0 <__assert_fail@plt+0x78d0>
   18934:	add	r3, pc, #788	; 0x314
   18938:	ldrd	r2, [r3]
   1893c:	ldrd	r0, [sp, #48]	; 0x30
   18940:	cmp	r2, r0
   18944:	sbcs	r3, r3, r1
   18948:	blt	18c24 <__assert_fail@plt+0x7854>
   1894c:	ldr	r3, [sp, #48]	; 0x30
   18950:	mov	r1, #3600	; 0xe10
   18954:	ldr	r0, [sp, #52]	; 0x34
   18958:	umull	r2, r3, r3, r1
   1895c:	mla	r3, r1, r0, r3
   18960:	cmp	r2, #0
   18964:	sbcs	r1, r3, #0
   18968:	blt	18d14 <__assert_fail@plt+0x7944>
   1896c:	cmp	r8, #0
   18970:	movlt	r4, r8
   18974:	asrlt	r5, r4, #31
   18978:	blt	189ac <__assert_fail@plt+0x75dc>
   1897c:	mvn	r0, #0
   18980:	subs	r0, r0, r2
   18984:	mvn	r1, #-2147483648	; 0x80000000
   18988:	sbc	r1, r1, r3
   1898c:	asr	r5, r8, #31
   18990:	cmp	r0, r8
   18994:	sbcs	r1, r1, r5
   18998:	mov	r4, r8
   1899c:	movlt	r1, #1
   189a0:	movge	r1, #0
   189a4:	cmp	r1, #0
   189a8:	bne	18c24 <__assert_fail@plt+0x7854>
   189ac:	add	r1, sp, #800	; 0x320
   189b0:	adds	r4, r4, r2
   189b4:	ldrd	r0, [r1]
   189b8:	adc	r5, r5, r3
   189bc:	cmp	r0, #0
   189c0:	sbcs	r3, r1, #0
   189c4:	strd	r0, [sp, #56]	; 0x38
   189c8:	blt	18cdc <__assert_fail@plt+0x790c>
   189cc:	add	r3, pc, #644	; 0x284
   189d0:	ldrd	r2, [r3]
   189d4:	cmp	r2, r0
   189d8:	sbcs	r3, r3, r1
   189dc:	blt	18c24 <__assert_fail@plt+0x7854>
   189e0:	ldrd	r6, [sp, #56]	; 0x38
   189e4:	mov	r1, #60	; 0x3c
   189e8:	umull	r2, r3, r6, r1
   189ec:	mla	r3, r1, r7, r3
   189f0:	cmp	r2, #0
   189f4:	sbcs	r1, r3, #0
   189f8:	blt	18d64 <__assert_fail@plt+0x7994>
   189fc:	cmp	r4, #0
   18a00:	sbcs	r1, r5, #0
   18a04:	blt	18a30 <__assert_fail@plt+0x7660>
   18a08:	mvn	r0, #0
   18a0c:	subs	r0, r0, r2
   18a10:	mvn	r1, #-2147483648	; 0x80000000
   18a14:	sbc	r1, r1, r3
   18a18:	cmp	r0, r4
   18a1c:	sbcs	r1, r1, r5
   18a20:	movlt	r1, #1
   18a24:	movge	r1, #0
   18a28:	cmp	r1, #0
   18a2c:	bne	18c24 <__assert_fail@plt+0x7854>
   18a30:	add	r1, sp, #808	; 0x328
   18a34:	adds	r4, r4, r2
   18a38:	ldrd	r0, [r1]
   18a3c:	adc	r5, r5, r3
   18a40:	cmp	r0, #0
   18a44:	sbcs	r3, r1, #0
   18a48:	blt	18d40 <__assert_fail@plt+0x7970>
   18a4c:	cmp	r4, #0
   18a50:	sbcs	r3, r5, #0
   18a54:	blt	18a80 <__assert_fail@plt+0x76b0>
   18a58:	mvn	r2, #0
   18a5c:	subs	r2, r2, r0
   18a60:	mvn	r3, #-2147483648	; 0x80000000
   18a64:	sbc	r3, r3, r1
   18a68:	cmp	r2, r4
   18a6c:	sbcs	r3, r3, r5
   18a70:	movlt	r3, #1
   18a74:	movge	r3, #0
   18a78:	cmp	r3, #0
   18a7c:	bne	18c24 <__assert_fail@plt+0x7854>
   18a80:	adds	r4, r4, r0
   18a84:	adc	r5, r5, r1
   18a88:	cmp	fp, #0
   18a8c:	blt	18bf0 <__assert_fail@plt+0x7820>
   18a90:	cmp	r4, #0
   18a94:	sbcs	r3, r5, #0
   18a98:	blt	18bc0 <__assert_fail@plt+0x77f0>
   18a9c:	rsb	r2, fp, #2130706432	; 0x7f000000
   18aa0:	add	r2, r2, #16711680	; 0xff0000
   18aa4:	add	r2, r2, #65280	; 0xff00
   18aa8:	add	r2, r2, #255	; 0xff
   18aac:	cmp	r2, r4
   18ab0:	asr	r3, r2, #31
   18ab4:	sbcs	r3, r3, r5
   18ab8:	movlt	r3, #1
   18abc:	movge	r3, #0
   18ac0:	cmp	r3, #0
   18ac4:	bne	18c24 <__assert_fail@plt+0x7854>
   18ac8:	ldr	r3, [sp, #44]	; 0x2c
   18acc:	ldr	r2, [sp, #72]	; 0x48
   18ad0:	add	r4, r4, fp
   18ad4:	cmp	r9, #0
   18ad8:	str	r4, [r3]
   18adc:	str	r2, [r3, #4]
   18ae0:	beq	174e8 <__assert_fail@plt+0x6118>
   18ae4:	ldrd	r2, [sp, #56]	; 0x38
   18ae8:	ldrd	r6, [sp, #48]	; 0x30
   18aec:	orr	r6, r6, r2
   18af0:	orr	r7, r7, r3
   18af4:	orr	r2, r6, r0
   18af8:	orr	r3, r7, r1
   18afc:	ldrd	r0, [sp, #64]	; 0x40
   18b00:	orr	r0, r0, r2
   18b04:	orr	r1, r1, r3
   18b08:	mov	r2, r0
   18b0c:	mov	r3, r1
   18b10:	orrs	r3, r2, r3
   18b14:	beq	17104 <__assert_fail@plt+0x5d34>
   18b18:	mov	r2, #5
   18b1c:	ldr	r1, [pc, #316]	; 18c60 <__assert_fail@plt+0x7890>
   18b20:	mov	r0, #0
   18b24:	bl	11130 <dcgettext@plt>
   18b28:	add	r1, sp, #808	; 0x328
   18b2c:	add	r3, sp, #792	; 0x318
   18b30:	ldrd	r6, [r1]
   18b34:	add	r1, sp, #800	; 0x320
   18b38:	ldrd	r2, [r3]
   18b3c:	ldrd	r8, [r1]
   18b40:	ldr	r1, [sp, #816]	; 0x330
   18b44:	strd	r6, [sp, #8]
   18b48:	str	r1, [sp, #16]
   18b4c:	strd	r8, [sp]
   18b50:	bl	12a40 <__assert_fail@plt+0x1670>
   18b54:	mov	r2, #5
   18b58:	ldr	r1, [pc, #260]	; 18c64 <__assert_fail@plt+0x7894>
   18b5c:	mov	r0, #0
   18b60:	bl	11130 <dcgettext@plt>
   18b64:	asr	r3, r4, #31
   18b68:	mov	r2, r4
   18b6c:	bl	12a40 <__assert_fail@plt+0x1670>
   18b70:	ldr	r3, [sp, #168]	; 0xa8
   18b74:	cmn	r3, #1
   18b78:	beq	18bb8 <__assert_fail@plt+0x77e8>
   18b7c:	add	r2, sp, #268	; 0x10c
   18b80:	ldr	r1, [sp, #44]	; 0x2c
   18b84:	ldr	r0, [sp, #36]	; 0x24
   18b88:	bl	1d8a8 <__assert_fail@plt+0xc4d8>
   18b8c:	cmp	r0, #0
   18b90:	beq	18bb8 <__assert_fail@plt+0x77e8>
   18b94:	ldr	r2, [sp, #168]	; 0xa8
   18b98:	ldr	r3, [sp, #300]	; 0x12c
   18b9c:	cmp	r2, r3
   18ba0:	beq	18bb8 <__assert_fail@plt+0x77e8>
   18ba4:	mov	r2, #5
   18ba8:	ldr	r1, [pc, #184]	; 18c68 <__assert_fail@plt+0x7898>
   18bac:	mov	r0, #0
   18bb0:	bl	11130 <dcgettext@plt>
   18bb4:	bl	12a40 <__assert_fail@plt+0x1670>
   18bb8:	ldrb	r9, [sp, #853]	; 0x355
   18bbc:	b	17104 <__assert_fail@plt+0x5d34>
   18bc0:	mov	r2, #-2147483648	; 0x80000000
   18bc4:	subs	r2, r2, r4
   18bc8:	mvn	r3, #0
   18bcc:	sbc	r3, r3, r5
   18bd0:	mov	r6, r2
   18bd4:	mov	r7, r3
   18bd8:	cmp	fp, r6
   18bdc:	asr	r3, fp, #31
   18be0:	sbcs	r3, r3, r7
   18be4:	movlt	r3, #1
   18be8:	movge	r3, #0
   18bec:	b	18ac0 <__assert_fail@plt+0x76f0>
   18bf0:	rsb	r2, fp, #-2147483648	; 0x80000000
   18bf4:	cmp	r4, r2
   18bf8:	asr	r3, r2, #31
   18bfc:	sbcs	r3, r5, r3
   18c00:	blt	18c24 <__assert_fail@plt+0x7854>
   18c04:	cmp	r4, #0
   18c08:	sbcs	r3, r5, #0
   18c0c:	blt	18ac8 <__assert_fail@plt+0x76f8>
   18c10:	adds	r2, r4, fp
   18c14:	adc	r3, r5, fp, asr #31
   18c18:	cmp	r2, #-2147483648	; 0x80000000
   18c1c:	sbcs	r3, r3, #0
   18c20:	blt	18ac8 <__assert_fail@plt+0x76f8>
   18c24:	cmp	r9, #0
   18c28:	beq	16f88 <__assert_fail@plt+0x5bb8>
   18c2c:	mov	r2, #5
   18c30:	ldr	r1, [pc, #52]	; 18c6c <__assert_fail@plt+0x789c>
   18c34:	mov	r0, #0
   18c38:	bl	11130 <dcgettext@plt>
   18c3c:	bl	12a40 <__assert_fail@plt+0x1670>
   18c40:	b	16f88 <__assert_fail@plt+0x5bb8>
   18c44:	nop			; (mov r0, r0)
   18c48:	blcc	fe6cb450 <optarg@@GLIBC_2.4+0xfe6972a8>
   18c4c:	andeq	r0, r0, r0
   18c50:	mcrrcc	14, 6, r5, sp, cr15
   18c54:	andeq	r1, r9, fp, lsr #20
   18c58:	eorcs	r2, r2, #536870914	; 0x20000002
   18c5c:	eoreq	r2, r2, #536870914	; 0x20000002
   18c60:	andeq	r3, r2, ip, lsl r5
   18c64:	andeq	r3, r2, r8, ror #10
   18c68:	andeq	r3, r2, ip, lsl #11
   18c6c:	andeq	r3, r2, ip, ror #9
   18c70:	ldrdeq	r2, [r2], -r0
   18c74:	andeq	r2, r2, r8, lsr #31
   18c78:	andeq	r3, r2, r4, asr #6
   18c7c:	ldrdeq	r2, [r2], -ip
   18c80:	andeq	r3, r2, r0, lsr #21
   18c84:	muleq	r2, ip, r0
   18c88:	strheq	r3, [r2], -r4
   18c8c:	andeq	r3, r2, r8, ror #1
   18c90:	andeq	r3, r2, r0, lsl r1
   18c94:	andeq	r3, r2, r4, lsr r1
   18c98:	andeq	r3, r2, r8, asr #2
   18c9c:	andeq	r3, r2, ip, asr r1
   18ca0:	ldrd	r0, [sp, #48]	; 0x30
   18ca4:	mvn	r3, #0
   18ca8:	mvn	r2, #0
   18cac:	cmp	r1, r3
   18cb0:	cmpeq	r0, r2
   18cb4:	beq	1894c <__assert_fail@plt+0x757c>
   18cb8:	mov	r3, r1
   18cbc:	mov	r2, r0
   18cc0:	mov	r1, #-2147483648	; 0x80000000
   18cc4:	mov	r0, #0
   18cc8:	bl	2122c <__assert_fail@plt+0xfe5c>
   18ccc:	cmp	r0, #3600	; 0xe10
   18cd0:	sbcs	r3, r1, #0
   18cd4:	blt	18c24 <__assert_fail@plt+0x7854>
   18cd8:	b	1894c <__assert_fail@plt+0x757c>
   18cdc:	mvn	r3, #0
   18ce0:	mvn	r2, #0
   18ce4:	cmp	r1, r3
   18ce8:	cmpeq	r0, r2
   18cec:	beq	189e0 <__assert_fail@plt+0x7610>
   18cf0:	mov	r3, r1
   18cf4:	mov	r2, r0
   18cf8:	mov	r1, #-2147483648	; 0x80000000
   18cfc:	mov	r0, #0
   18d00:	bl	2122c <__assert_fail@plt+0xfe5c>
   18d04:	cmp	r0, #60	; 0x3c
   18d08:	sbcs	r3, r1, #0
   18d0c:	blt	18c24 <__assert_fail@plt+0x7854>
   18d10:	b	189e0 <__assert_fail@plt+0x7610>
   18d14:	mov	r0, #0
   18d18:	subs	r0, r0, r2
   18d1c:	mov	r1, #-2147483648	; 0x80000000
   18d20:	sbc	r1, r1, r3
   18d24:	asr	r5, r8, #31
   18d28:	cmp	r8, r0
   18d2c:	sbcs	r1, r5, r1
   18d30:	mov	r4, r8
   18d34:	movlt	r1, #1
   18d38:	movge	r1, #0
   18d3c:	b	189a4 <__assert_fail@plt+0x75d4>
   18d40:	mov	r2, #0
   18d44:	subs	r2, r2, r0
   18d48:	mov	r3, #-2147483648	; 0x80000000
   18d4c:	sbc	r3, r3, r1
   18d50:	cmp	r4, r2
   18d54:	sbcs	r3, r5, r3
   18d58:	movlt	r3, #1
   18d5c:	movge	r3, #0
   18d60:	b	18a78 <__assert_fail@plt+0x76a8>
   18d64:	mov	r0, #0
   18d68:	subs	r0, r0, r2
   18d6c:	mov	r1, #-2147483648	; 0x80000000
   18d70:	sbc	r1, r1, r3
   18d74:	cmp	r4, r0
   18d78:	sbcs	r1, r5, r1
   18d7c:	movlt	r1, #1
   18d80:	movge	r1, #0
   18d84:	b	18a28 <__assert_fail@plt+0x7658>
   18d88:	mov	r3, #12
   18d8c:	b	1844c <__assert_fail@plt+0x707c>
   18d90:	subs	r8, r6, #1
   18d94:	sbc	r9, r7, #0
   18d98:	cmp	r9, #0
   18d9c:	cmpeq	r8, #10
   18da0:	bls	18448 <__assert_fail@plt+0x7078>
   18da4:	cmp	r7, #0
   18da8:	cmpeq	r6, #12
   18dac:	mvnne	r3, #0
   18db0:	strne	r3, [sp, #144]	; 0x90
   18db4:	beq	1844c <__assert_fail@plt+0x707c>
   18db8:	ldr	r4, [pc, #-336]	; 18c70 <__assert_fail@plt+0x78a0>
   18dbc:	b	1785c <__assert_fail@plt+0x648c>
   18dc0:	ldr	r0, [pc, #-340]	; 18c74 <__assert_fail@plt+0x78a4>
   18dc4:	bl	12a40 <__assert_fail@plt+0x1670>
   18dc8:	b	184c8 <__assert_fail@plt+0x70f8>
   18dcc:	rsb	r0, ip, #-2147483648	; 0x80000000
   18dd0:	cmp	r2, r0
   18dd4:	asr	r1, r0, #31
   18dd8:	sbcs	r1, r3, r1
   18ddc:	blt	17ff0 <__assert_fail@plt+0x6c20>
   18de0:	cmp	r2, #0
   18de4:	sbcs	r1, r3, #0
   18de8:	blt	18e00 <__assert_fail@plt+0x7a30>
   18dec:	adds	r0, r2, ip
   18df0:	adc	r1, r3, ip, asr #31
   18df4:	cmp	r0, #-2147483648	; 0x80000000
   18df8:	sbcs	r1, r1, #0
   18dfc:	bge	17ff0 <__assert_fail@plt+0x6c20>
   18e00:	add	r2, ip, r2
   18e04:	mvn	r3, #0
   18e08:	add	r1, sp, #136	; 0x88
   18e0c:	ldr	r0, [sp, #36]	; 0x24
   18e10:	str	r2, [sp, #148]	; 0x94
   18e14:	str	r3, [sp, #168]	; 0xa8
   18e18:	bl	1d99c <__assert_fail@plt+0xc5cc>
   18e1c:	cmn	r0, #1
   18e20:	mov	r8, r0
   18e24:	beq	17ff8 <__assert_fail@plt+0x6c28>
   18e28:	ldrb	r9, [sp, #853]	; 0x355
   18e2c:	cmp	r9, #0
   18e30:	bne	18064 <__assert_fail@plt+0x6c94>
   18e34:	add	r3, sp, #768	; 0x300
   18e38:	add	r1, sp, #776	; 0x308
   18e3c:	add	ip, sp, #784	; 0x310
   18e40:	ldrd	r2, [r3]
   18e44:	ldrd	r0, [r1]
   18e48:	ldrd	r4, [ip]
   18e4c:	orr	r0, r0, r2
   18e50:	orr	r1, r1, r3
   18e54:	orr	r0, r0, r4
   18e58:	orr	r1, r1, r5
   18e5c:	orrs	r1, r0, r1
   18e60:	bne	1816c <__assert_fail@plt+0x6d9c>
   18e64:	b	1885c <__assert_fail@plt+0x748c>
   18e68:	ldrb	r3, [sp, #853]	; 0x355
   18e6c:	cmp	r3, #0
   18e70:	beq	16f88 <__assert_fail@plt+0x5bb8>
   18e74:	mov	r0, r5
   18e78:	mov	r2, #5
   18e7c:	ldr	r1, [pc, #-524]	; 18c78 <__assert_fail@plt+0x78a8>
   18e80:	bl	11130 <dcgettext@plt>
   18e84:	add	r1, sp, #672	; 0x2a0
   18e88:	add	r2, sp, #372	; 0x174
   18e8c:	mov	r4, r0
   18e90:	add	r0, sp, #136	; 0x88
   18e94:	bl	137cc <__assert_fail@plt+0x23fc>
   18e98:	mov	r1, r0
   18e9c:	mov	r0, r4
   18ea0:	bl	12a40 <__assert_fail@plt+0x1670>
   18ea4:	b	16f88 <__assert_fail@plt+0x5bb8>
   18ea8:	ldrb	r3, [sp, #853]	; 0x355
   18eac:	cmp	r3, #0
   18eb0:	beq	16f88 <__assert_fail@plt+0x5bb8>
   18eb4:	mov	r2, #5
   18eb8:	ldr	r1, [pc, #-580]	; 18c7c <__assert_fail@plt+0x78ac>
   18ebc:	bl	11130 <dcgettext@plt>
   18ec0:	mov	r1, r7
   18ec4:	bl	12a40 <__assert_fail@plt+0x1670>
   18ec8:	b	16f88 <__assert_fail@plt+0x5bb8>
   18ecc:	add	r6, sp, #372	; 0x174
   18ed0:	b	1868c <__assert_fail@plt+0x72bc>
   18ed4:	cmp	r8, #0
   18ed8:	blt	18f18 <__assert_fail@plt+0x7b48>
   18edc:	subs	r4, r2, #-2147483647	; 0x80000001
   18ee0:	adc	r5, r3, #0
   18ee4:	asr	r1, r8, #31
   18ee8:	cmp	r4, r8
   18eec:	sbcs	r1, r5, r1
   18ef0:	movlt	r1, #1
   18ef4:	movge	r1, #0
   18ef8:	b	183a4 <__assert_fail@plt+0x6fd4>
   18efc:	subs	r0, r8, r2
   18f00:	sbc	r1, r1, r3
   18f04:	cmp	r0, #-2147483648	; 0x80000000
   18f08:	sbcs	r1, r1, #0
   18f0c:	movge	r1, #1
   18f10:	movlt	r1, #0
   18f14:	b	183a4 <__assert_fail@plt+0x6fd4>
   18f18:	add	r0, r8, #-2147483648	; 0x80000000
   18f1c:	cmp	r0, r2
   18f20:	asr	r1, r0, #31
   18f24:	sbcs	r1, r1, r3
   18f28:	movlt	r1, #1
   18f2c:	movge	r1, #0
   18f30:	b	183a4 <__assert_fail@plt+0x6fd4>
   18f34:	mov	r0, #-2147483648	; 0x80000000
   18f38:	subs	r0, r0, r2
   18f3c:	mvn	r1, #0
   18f40:	sbc	r1, r1, r3
   18f44:	asr	r5, ip, #31
   18f48:	cmp	ip, r0
   18f4c:	sbcs	r1, r5, r1
   18f50:	movlt	r1, #1
   18f54:	movge	r1, #0
   18f58:	b	17fe8 <__assert_fail@plt+0x6c18>
   18f5c:	smull	ip, r2, r2, r3
   18f60:	add	r2, r2, r3
   18f64:	asr	ip, r3, #31
   18f68:	rsb	r2, ip, r2, asr #2
   18f6c:	mov	r4, #0
   18f70:	rsb	r2, r2, r2, lsl #3
   18f74:	sub	r2, r3, r2
   18f78:	subs	r4, r4, r0
   18f7c:	mov	r5, #-2147483648	; 0x80000000
   18f80:	sbc	r5, r5, r1
   18f84:	asr	r3, r2, #31
   18f88:	cmp	r2, r4
   18f8c:	sbcs	ip, r3, r5
   18f90:	movlt	ip, #1
   18f94:	movge	ip, #0
   18f98:	b	17fa4 <__assert_fail@plt+0x6bd4>
   18f9c:	mov	ip, r3
   18fa0:	mov	r2, r3
   18fa4:	mov	r0, #0
   18fa8:	mov	r1, #0
   18fac:	mov	r3, ip
   18fb0:	b	17f2c <__assert_fail@plt+0x6b5c>
   18fb4:	ldr	r3, [sp, #160]	; 0xa0
   18fb8:	ldr	ip, [sp, #688]	; 0x2b0
   18fbc:	b	18fa0 <__assert_fail@plt+0x7bd0>
   18fc0:	add	r2, sp, #904	; 0x388
   18fc4:	add	r3, r2, r3
   18fc8:	mov	r2, #0
   18fcc:	strb	r2, [r3, #-332]	; 0xfffffeb4
   18fd0:	mov	r1, r7
   18fd4:	ldr	r0, [pc, #-860]	; 18c80 <__assert_fail@plt+0x78b0>
   18fd8:	bl	12a40 <__assert_fail@plt+0x1670>
   18fdc:	mov	r2, #5
   18fe0:	ldr	r1, [pc, #-868]	; 18c84 <__assert_fail@plt+0x78b4>
   18fe4:	mov	r0, #0
   18fe8:	bl	11130 <dcgettext@plt>
   18fec:	bl	12a40 <__assert_fail@plt+0x1670>
   18ff0:	cmp	fp, #0
   18ff4:	beq	1900c <__assert_fail@plt+0x7c3c>
   18ff8:	mov	r2, #5
   18ffc:	ldr	r1, [pc, #-892]	; 18c88 <__assert_fail@plt+0x78b8>
   19000:	mov	r0, #0
   19004:	bl	11130 <dcgettext@plt>
   19008:	bl	12a40 <__assert_fail@plt+0x1670>
   1900c:	ldr	r3, [sp, #44]	; 0x2c
   19010:	cmp	r5, r8
   19014:	cmpne	r9, r3
   19018:	beq	19030 <__assert_fail@plt+0x7c60>
   1901c:	mov	r2, #5
   19020:	ldr	r1, [pc, #-924]	; 18c8c <__assert_fail@plt+0x78bc>
   19024:	mov	r0, #0
   19028:	bl	11130 <dcgettext@plt>
   1902c:	bl	12a40 <__assert_fail@plt+0x1670>
   19030:	mov	r2, #5
   19034:	ldr	r1, [pc, #-940]	; 18c90 <__assert_fail@plt+0x78c0>
   19038:	mov	r0, #0
   1903c:	bl	11130 <dcgettext@plt>
   19040:	bl	12a40 <__assert_fail@plt+0x1670>
   19044:	cmp	r6, #0
   19048:	movne	r2, #5
   1904c:	ldrne	r1, [pc, #-960]	; 18c94 <__assert_fail@plt+0x78c4>
   19050:	ldreq	r1, [pc, #-960]	; 18c98 <__assert_fail@plt+0x78c8>
   19054:	movne	r0, #0
   19058:	moveq	r0, r6
   1905c:	moveq	r2, #5
   19060:	bl	11130 <dcgettext@plt>
   19064:	mov	r1, r0
   19068:	ldr	r0, [pc, #-980]	; 18c9c <__assert_fail@plt+0x78cc>
   1906c:	bl	12a40 <__assert_fail@plt+0x1670>
   19070:	b	16f88 <__assert_fail@plt+0x5bb8>
   19074:	orrs	r3, r4, r5
   19078:	moveq	r2, r4
   1907c:	moveq	r3, r5
   19080:	beq	17eec <__assert_fail@plt+0x6b1c>
   19084:	mvn	r3, #0
   19088:	mvn	r2, #0
   1908c:	cmp	r5, r3
   19090:	cmpeq	r4, r2
   19094:	beq	17f08 <__assert_fail@plt+0x6b38>
   19098:	mov	r3, r5
   1909c:	mov	r2, r4
   190a0:	mov	r0, #0
   190a4:	mov	r1, #-2147483648	; 0x80000000
   190a8:	bl	2122c <__assert_fail@plt+0xfe5c>
   190ac:	cmp	r0, #7
   190b0:	sbcs	r3, r1, #0
   190b4:	blt	17ff8 <__assert_fail@plt+0x6c28>
   190b8:	b	17f08 <__assert_fail@plt+0x6b38>
   190bc:	b	16c94 <__assert_fail@plt+0x58c4>
   190c0:	push	{r4, r5, r6, r7, r8, lr}
   190c4:	mov	r5, r0
   190c8:	sub	sp, sp, #8
   190cc:	ldr	r0, [pc, #76]	; 19120 <__assert_fail@plt+0x7d50>
   190d0:	mov	r6, r1
   190d4:	mov	r7, r2
   190d8:	bl	111d8 <getenv@plt>
   190dc:	mov	r8, r0
   190e0:	bl	1d7f4 <__assert_fail@plt+0xc424>
   190e4:	subs	r4, r0, #0
   190e8:	moveq	r5, r4
   190ec:	beq	19114 <__assert_fail@plt+0x7d44>
   190f0:	mov	r0, r5
   190f4:	stm	sp, {r4, r8}
   190f8:	mov	r2, r7
   190fc:	mov	r1, r6
   19100:	mov	r3, #0
   19104:	bl	16c94 <__assert_fail@plt+0x58c4>
   19108:	mov	r5, r0
   1910c:	mov	r0, r4
   19110:	bl	1d87c <__assert_fail@plt+0xc4ac>
   19114:	mov	r0, r5
   19118:	add	sp, sp, #8
   1911c:	pop	{r4, r5, r6, r7, r8, pc}
   19120:	andeq	r3, r2, r0, lsl #13
   19124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19128:	sub	sp, sp, #60	; 0x3c
   1912c:	mov	r8, r2
   19130:	str	r0, [sp, #4]
   19134:	mov	r0, r1
   19138:	mov	r5, r1
   1913c:	bl	11274 <strlen@plt>
   19140:	ands	r3, r8, #4
   19144:	mov	r6, r0
   19148:	beq	19180 <__assert_fail@plt+0x7db0>
   1914c:	mov	r1, #46	; 0x2e
   19150:	mov	r0, r5
   19154:	bl	11280 <strchr@plt>
   19158:	subs	sl, r0, #0
   1915c:	beq	19184 <__assert_fail@plt+0x7db4>
   19160:	sub	r3, sl, r5
   19164:	sub	r6, r6, r3
   19168:	cmp	r6, #3
   1916c:	moveq	r6, r3
   19170:	beq	19184 <__assert_fail@plt+0x7db4>
   19174:	mov	r0, #0
   19178:	add	sp, sp, #60	; 0x3c
   1917c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19180:	mov	sl, r3
   19184:	sub	r3, r6, #8
   19188:	cmp	r3, #4
   1918c:	bhi	19174 <__assert_fail@plt+0x7da4>
   19190:	tst	r6, #1
   19194:	bne	19174 <__assert_fail@plt+0x7da4>
   19198:	mov	r2, r5
   1919c:	add	r1, r5, r6
   191a0:	ldrb	r3, [r2], #1
   191a4:	sub	r3, r3, #48	; 0x30
   191a8:	cmp	r3, #9
   191ac:	bhi	19174 <__assert_fail@plt+0x7da4>
   191b0:	cmp	r1, r2
   191b4:	bne	191a0 <__assert_fail@plt+0x7dd0>
   191b8:	ldrb	r0, [r5]
   191bc:	ldrb	r1, [r5, #2]
   191c0:	ldrb	r2, [r5, #4]
   191c4:	ldrb	r3, [r5, #6]
   191c8:	sub	r0, r0, #48	; 0x30
   191cc:	ldrb	r4, [r5, #1]
   191d0:	add	r0, r0, r0, lsl #2
   191d4:	sub	r1, r1, #48	; 0x30
   191d8:	sub	r2, r2, #48	; 0x30
   191dc:	sub	r3, r3, #48	; 0x30
   191e0:	add	r4, r4, r0, lsl #1
   191e4:	ldrb	lr, [r5, #3]
   191e8:	ldrb	r0, [r5, #7]
   191ec:	ldrb	ip, [r5, #5]
   191f0:	add	r1, r1, r1, lsl #2
   191f4:	add	r2, r2, r2, lsl #2
   191f8:	add	r3, r3, r3, lsl #2
   191fc:	asr	r6, r6, #1
   19200:	add	r3, r0, r3, lsl #1
   19204:	add	lr, lr, r1, lsl #1
   19208:	add	r2, ip, r2, lsl #1
   1920c:	sub	r9, r4, #48	; 0x30
   19210:	sub	r0, lr, #48	; 0x30
   19214:	sub	r2, r2, #48	; 0x30
   19218:	sub	r3, r3, #48	; 0x30
   1921c:	cmp	r6, #4
   19220:	str	r9, [sp, #12]
   19224:	str	r0, [sp, #16]
   19228:	str	r2, [sp, #20]
   1922c:	str	r3, [sp, #24]
   19230:	beq	19274 <__assert_fail@plt+0x7ea4>
   19234:	ldrb	r3, [r5, #8]
   19238:	ldrb	r2, [r5, #9]
   1923c:	cmp	r6, #6
   19240:	sub	r3, r3, #48	; 0x30
   19244:	add	r3, r3, r3, lsl #2
   19248:	add	r3, r2, r3, lsl #1
   1924c:	sub	r3, r3, #48	; 0x30
   19250:	str	r3, [sp, #28]
   19254:	bne	19274 <__assert_fail@plt+0x7ea4>
   19258:	ldrb	r3, [r5, #10]
   1925c:	ldrb	r2, [r5, #11]
   19260:	sub	r3, r3, #48	; 0x30
   19264:	add	r3, r3, r3, lsl #2
   19268:	add	r3, r2, r3, lsl #1
   1926c:	sub	r3, r3, #48	; 0x30
   19270:	str	r3, [sp, #32]
   19274:	ands	r0, r8, #1
   19278:	sub	r3, r6, #4
   1927c:	beq	192c4 <__assert_fail@plt+0x7ef4>
   19280:	cmp	r3, #1
   19284:	sub	r4, r4, #49	; 0x31
   19288:	ldr	r6, [sp, #16]
   1928c:	ldr	r7, [sp, #20]
   19290:	ldr	r5, [sp, #24]
   19294:	beq	19470 <__assert_fail@plt+0x80a0>
   19298:	cmp	r3, #2
   1929c:	bne	1948c <__assert_fail@plt+0x80bc>
   192a0:	tst	r8, #2
   192a4:	beq	19174 <__assert_fail@plt+0x7da4>
   192a8:	ldr	r1, [sp, #28]
   192ac:	mov	r2, #100	; 0x64
   192b0:	ldr	r3, [sp, #32]
   192b4:	mla	r1, r2, r1, r3
   192b8:	sub	r1, r1, #1888	; 0x760
   192bc:	sub	r9, r1, #12
   192c0:	b	19310 <__assert_fail@plt+0x7f40>
   192c4:	cmp	r3, #1
   192c8:	beq	193f8 <__assert_fail@plt+0x8028>
   192cc:	cmp	r3, #2
   192d0:	bne	1944c <__assert_fail@plt+0x807c>
   192d4:	tst	r8, #2
   192d8:	beq	19174 <__assert_fail@plt+0x7da4>
   192dc:	mov	r3, #100	; 0x64
   192e0:	ldr	r2, [sp, #16]
   192e4:	mla	r1, r3, r9, r2
   192e8:	sub	r1, r1, #1888	; 0x760
   192ec:	sub	r9, r1, #12
   192f0:	sub	r6, r6, #-1073741820	; 0xc0000004
   192f4:	add	r8, sp, #12
   192f8:	add	r3, r8, r6, lsl #2
   192fc:	ldr	r4, [r8, r6, lsl #2]
   19300:	ldr	r7, [r3, #8]
   19304:	ldr	r6, [r3, #4]
   19308:	ldr	r5, [r3, #12]
   1930c:	sub	r4, r4, #1
   19310:	cmp	sl, #0
   19314:	beq	19444 <__assert_fail@plt+0x8074>
   19318:	ldrb	r3, [sl, #1]
   1931c:	sub	r3, r3, #48	; 0x30
   19320:	cmp	r3, #9
   19324:	bhi	19174 <__assert_fail@plt+0x7da4>
   19328:	ldrb	r2, [sl, #2]
   1932c:	sub	r0, r2, #48	; 0x30
   19330:	cmp	r0, #9
   19334:	bhi	19174 <__assert_fail@plt+0x7da4>
   19338:	add	r3, r3, r3, lsl #2
   1933c:	add	r3, r2, r3, lsl #1
   19340:	sub	fp, r3, #48	; 0x30
   19344:	mov	r3, #0
   19348:	str	r3, [sp]
   1934c:	mov	r3, r7
   19350:	add	r8, sp, #12
   19354:	mov	r7, r4
   19358:	mvn	sl, #0
   1935c:	mov	r4, r3
   19360:	b	193c0 <__assert_fail@plt+0x7ff0>
   19364:	ldr	r3, [sp, #32]
   19368:	ldr	ip, [sp, #28]
   1936c:	ldr	r1, [sp, #24]
   19370:	eor	ip, ip, r7
   19374:	eor	r3, r3, r9
   19378:	orr	r3, r3, ip
   1937c:	ldr	ip, [sp, #20]
   19380:	eor	r1, r1, r6
   19384:	ldr	lr, [sp, #16]
   19388:	orr	r3, r3, r1
   1938c:	eor	ip, ip, r4
   19390:	ldr	r1, [sp, #12]
   19394:	orr	r3, r3, ip
   19398:	eor	lr, lr, r5
   1939c:	orr	r3, r3, lr
   193a0:	eor	r1, r1, fp
   193a4:	orrs	r3, r3, r1
   193a8:	beq	19410 <__assert_fail@plt+0x8040>
   193ac:	cmp	fp, #60	; 0x3c
   193b0:	bne	19174 <__assert_fail@plt+0x7da4>
   193b4:	mov	fp, #59	; 0x3b
   193b8:	mov	r3, #1
   193bc:	str	r3, [sp]
   193c0:	mov	r0, r8
   193c4:	str	fp, [sp, #12]
   193c8:	str	r5, [sp, #16]
   193cc:	str	r4, [sp, #20]
   193d0:	str	r6, [sp, #24]
   193d4:	str	r7, [sp, #28]
   193d8:	str	r9, [sp, #32]
   193dc:	str	sl, [sp, #36]	; 0x24
   193e0:	str	sl, [sp, #44]	; 0x2c
   193e4:	bl	110b8 <mktime@plt>
   193e8:	ldr	r3, [sp, #36]	; 0x24
   193ec:	cmp	r3, #0
   193f0:	bge	19364 <__assert_fail@plt+0x7f94>
   193f4:	b	19174 <__assert_fail@plt+0x7da4>
   193f8:	cmp	r9, #68	; 0x44
   193fc:	bgt	192f0 <__assert_fail@plt+0x7f20>
   19400:	tst	r8, #8
   19404:	addeq	r9, r4, #52	; 0x34
   19408:	beq	192f0 <__assert_fail@plt+0x7f20>
   1940c:	b	19174 <__assert_fail@plt+0x7da4>
   19410:	cmp	r0, #0
   19414:	blt	1942c <__assert_fail@plt+0x805c>
   19418:	ldr	r2, [sp]
   1941c:	mvn	r3, #-2147483648	; 0x80000000
   19420:	sub	r3, r3, r2
   19424:	cmp	r0, r3
   19428:	bgt	19174 <__assert_fail@plt+0x7da4>
   1942c:	ldr	r3, [sp]
   19430:	add	r0, r3, r0
   19434:	ldr	r3, [sp, #4]
   19438:	str	r0, [r3]
   1943c:	mov	r0, #1
   19440:	b	19178 <__assert_fail@plt+0x7da8>
   19444:	mov	fp, sl
   19448:	b	19344 <__assert_fail@plt+0x7f74>
   1944c:	bl	1110c <time@plt>
   19450:	add	r3, sp, #56	; 0x38
   19454:	str	r0, [r3, #-48]!	; 0xffffffd0
   19458:	mov	r0, r3
   1945c:	bl	11220 <localtime@plt>
   19460:	cmp	r0, #0
   19464:	beq	19174 <__assert_fail@plt+0x7da4>
   19468:	ldr	r9, [r0, #20]
   1946c:	b	192f0 <__assert_fail@plt+0x7f20>
   19470:	ldr	r9, [sp, #28]
   19474:	cmp	r9, #68	; 0x44
   19478:	bgt	19310 <__assert_fail@plt+0x7f40>
   1947c:	tst	r8, #8
   19480:	addeq	r9, r9, #100	; 0x64
   19484:	beq	19310 <__assert_fail@plt+0x7f40>
   19488:	b	19174 <__assert_fail@plt+0x7da4>
   1948c:	mov	r0, #0
   19490:	bl	1110c <time@plt>
   19494:	add	r3, sp, #56	; 0x38
   19498:	str	r0, [r3, #-48]!	; 0xffffffd0
   1949c:	mov	r0, r3
   194a0:	bl	11220 <localtime@plt>
   194a4:	cmp	r0, #0
   194a8:	beq	19174 <__assert_fail@plt+0x7da4>
   194ac:	ldr	r9, [r0, #20]
   194b0:	b	19310 <__assert_fail@plt+0x7f40>
   194b4:	push	{lr}		; (str lr, [sp, #-4]!)
   194b8:	sub	sp, sp, #12
   194bc:	ldr	r0, [pc, #72]	; 1950c <__assert_fail@plt+0x813c>
   194c0:	bl	111d8 <getenv@plt>
   194c4:	subs	r3, r0, #0
   194c8:	beq	194d8 <__assert_fail@plt+0x8108>
   194cc:	ldrb	r3, [r3]
   194d0:	cmp	r3, #0
   194d4:	bne	194e4 <__assert_fail@plt+0x8114>
   194d8:	ldr	r0, [pc, #48]	; 19510 <__assert_fail@plt+0x8140>
   194dc:	add	sp, sp, #12
   194e0:	pop	{pc}		; (ldr pc, [sp], #4)
   194e4:	mov	r2, #10
   194e8:	add	r1, sp, #4
   194ec:	bl	110ac <strtol@plt>
   194f0:	ldr	r2, [sp, #4]
   194f4:	ldr	r3, [pc, #20]	; 19510 <__assert_fail@plt+0x8140>
   194f8:	ldrb	r2, [r2]
   194fc:	cmp	r2, #0
   19500:	movne	r0, r3
   19504:	add	sp, sp, #12
   19508:	pop	{pc}		; (ldr pc, [sp], #4)
   1950c:	andeq	r3, r2, ip, ror #18
   19510:	andeq	r1, r3, r9, rrx
   19514:	push	{r4, r5, r6, lr}
   19518:	subs	r4, r0, #0
   1951c:	beq	19590 <__assert_fail@plt+0x81c0>
   19520:	mov	r1, #47	; 0x2f
   19524:	bl	11328 <strrchr@plt>
   19528:	subs	r5, r0, #0
   1952c:	beq	1957c <__assert_fail@plt+0x81ac>
   19530:	add	r6, r5, #1
   19534:	sub	r3, r6, r4
   19538:	cmp	r3, #6
   1953c:	ble	1957c <__assert_fail@plt+0x81ac>
   19540:	mov	r2, #7
   19544:	ldr	r1, [pc, #96]	; 195ac <__assert_fail@plt+0x81dc>
   19548:	sub	r0, r5, #6
   1954c:	bl	11394 <strncmp@plt>
   19550:	cmp	r0, #0
   19554:	bne	1957c <__assert_fail@plt+0x81ac>
   19558:	mov	r2, #3
   1955c:	ldr	r1, [pc, #76]	; 195b0 <__assert_fail@plt+0x81e0>
   19560:	mov	r0, r6
   19564:	bl	11394 <strncmp@plt>
   19568:	cmp	r0, #0
   1956c:	movne	r4, r6
   19570:	ldreq	r3, [pc, #60]	; 195b4 <__assert_fail@plt+0x81e4>
   19574:	addeq	r4, r5, #4
   19578:	streq	r4, [r3]
   1957c:	ldr	r2, [pc, #52]	; 195b8 <__assert_fail@plt+0x81e8>
   19580:	ldr	r3, [pc, #52]	; 195bc <__assert_fail@plt+0x81ec>
   19584:	str	r4, [r2]
   19588:	str	r4, [r3]
   1958c:	pop	{r4, r5, r6, pc}
   19590:	ldr	r3, [pc, #40]	; 195c0 <__assert_fail@plt+0x81f0>
   19594:	mov	r2, #55	; 0x37
   19598:	mov	r1, #1
   1959c:	ldr	r3, [r3]
   195a0:	ldr	r0, [pc, #28]	; 195c4 <__assert_fail@plt+0x81f4>
   195a4:	bl	11184 <fwrite@plt>
   195a8:	bl	113a0 <abort@plt>
   195ac:			; <UNDEFINED> instruction: 0x000239b4
   195b0:			; <UNDEFINED> instruction: 0x000239bc
   195b4:	muleq	r3, r0, r1
   195b8:	ldrdeq	r4, [r3], -r8
   195bc:	muleq	r3, r4, r1
   195c0:	andeq	r4, r3, r0, lsr #3
   195c4:	andeq	r3, r2, ip, ror r9
   195c8:	push	{r4, r5, r6, lr}
   195cc:	mov	r4, r0
   195d0:	mov	r5, r1
   195d4:	bl	1ef08 <__assert_fail@plt+0xdb38>
   195d8:	ldrb	r3, [r0]
   195dc:	bic	r3, r3, #32
   195e0:	cmp	r3, #85	; 0x55
   195e4:	bne	19644 <__assert_fail@plt+0x8274>
   195e8:	ldrb	r3, [r0, #1]
   195ec:	bic	r3, r3, #32
   195f0:	cmp	r3, #84	; 0x54
   195f4:	bne	19680 <__assert_fail@plt+0x82b0>
   195f8:	ldrb	r3, [r0, #2]
   195fc:	bic	r3, r3, #32
   19600:	cmp	r3, #70	; 0x46
   19604:	bne	19680 <__assert_fail@plt+0x82b0>
   19608:	ldrb	r3, [r0, #3]
   1960c:	cmp	r3, #45	; 0x2d
   19610:	bne	19680 <__assert_fail@plt+0x82b0>
   19614:	ldrb	r3, [r0, #4]
   19618:	cmp	r3, #56	; 0x38
   1961c:	bne	19680 <__assert_fail@plt+0x82b0>
   19620:	ldrb	r3, [r0, #5]
   19624:	cmp	r3, #0
   19628:	bne	19680 <__assert_fail@plt+0x82b0>
   1962c:	ldrb	r2, [r4]
   19630:	ldr	r3, [pc, #152]	; 196d0 <__assert_fail@plt+0x8300>
   19634:	ldr	r0, [pc, #152]	; 196d4 <__assert_fail@plt+0x8304>
   19638:	cmp	r2, #96	; 0x60
   1963c:	movne	r0, r3
   19640:	pop	{r4, r5, r6, pc}
   19644:	cmp	r3, #71	; 0x47
   19648:	bne	19680 <__assert_fail@plt+0x82b0>
   1964c:	ldrb	r3, [r0, #1]
   19650:	bic	r3, r3, #32
   19654:	cmp	r3, #66	; 0x42
   19658:	bne	19680 <__assert_fail@plt+0x82b0>
   1965c:	ldrb	r3, [r0, #2]
   19660:	cmp	r3, #49	; 0x31
   19664:	bne	19680 <__assert_fail@plt+0x82b0>
   19668:	ldrb	r3, [r0, #3]
   1966c:	cmp	r3, #56	; 0x38
   19670:	bne	19680 <__assert_fail@plt+0x82b0>
   19674:	ldrb	r3, [r0, #4]
   19678:	cmp	r3, #48	; 0x30
   1967c:	beq	19694 <__assert_fail@plt+0x82c4>
   19680:	ldr	r3, [pc, #80]	; 196d8 <__assert_fail@plt+0x8308>
   19684:	cmp	r5, #9
   19688:	ldr	r0, [pc, #76]	; 196dc <__assert_fail@plt+0x830c>
   1968c:	movne	r0, r3
   19690:	pop	{r4, r5, r6, pc}
   19694:	ldrb	r3, [r0, #5]
   19698:	cmp	r3, #51	; 0x33
   1969c:	bne	19680 <__assert_fail@plt+0x82b0>
   196a0:	ldrb	r3, [r0, #6]
   196a4:	cmp	r3, #48	; 0x30
   196a8:	bne	19680 <__assert_fail@plt+0x82b0>
   196ac:	ldrb	r3, [r0, #7]
   196b0:	cmp	r3, #0
   196b4:	bne	19680 <__assert_fail@plt+0x82b0>
   196b8:	ldrb	r2, [r4]
   196bc:	ldr	r3, [pc, #28]	; 196e0 <__assert_fail@plt+0x8310>
   196c0:	ldr	r0, [pc, #28]	; 196e4 <__assert_fail@plt+0x8314>
   196c4:	cmp	r2, #96	; 0x60
   196c8:	movne	r0, r3
   196cc:	pop	{r4, r5, r6, pc}
   196d0:	andeq	r3, r2, r8, lsl sl
   196d4:	andeq	r3, r2, r4, lsl sl
   196d8:	andeq	r3, r2, r8, lsr #20
   196dc:	andeq	r3, r2, r4, lsr #20
   196e0:	andeq	r3, r2, r0, lsr #20
   196e4:	andeq	r3, r2, ip, lsl sl
   196e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196ec:	sub	sp, sp, #140	; 0x8c
   196f0:	mov	r9, r1
   196f4:	str	r3, [sp, #24]
   196f8:	mov	r3, #1
   196fc:	mov	sl, r0
   19700:	str	r2, [sp, #44]	; 0x2c
   19704:	str	r3, [sp, #28]
   19708:	bl	1119c <__ctype_get_mb_cur_max@plt>
   1970c:	ldr	r3, [sp, #180]	; 0xb4
   19710:	mov	fp, r9
   19714:	mov	r9, sl
   19718:	lsr	r3, r3, #1
   1971c:	and	r3, r3, #1
   19720:	str	r3, [sp, #40]	; 0x28
   19724:	ldr	r3, [sp, #180]	; 0xb4
   19728:	mov	r2, #0
   1972c:	and	r3, r3, #4
   19730:	str	r3, [sp, #100]	; 0x64
   19734:	ldr	r3, [sp, #180]	; 0xb4
   19738:	str	r2, [sp, #76]	; 0x4c
   1973c:	and	r3, r3, #1
   19740:	str	r3, [sp, #96]	; 0x60
   19744:	str	r2, [sp, #36]	; 0x24
   19748:	str	r2, [sp, #56]	; 0x38
   1974c:	str	r2, [sp, #68]	; 0x44
   19750:	str	r2, [sp, #72]	; 0x48
   19754:	str	r2, [sp, #84]	; 0x54
   19758:	str	r0, [sp, #80]	; 0x50
   1975c:	ldr	r3, [sp, #176]	; 0xb0
   19760:	cmp	r3, #10
   19764:	ldrls	pc, [pc, r3, lsl #2]
   19768:	b	1a940 <__assert_fail@plt+0x9570>
   1976c:	muleq	r1, r8, r7
   19770:			; <UNDEFINED> instruction: 0x00019ab8
   19774:	andeq	r9, r1, r0, lsl ip
   19778:	andeq	r9, r1, ip, ror #21
   1977c:	andeq	r9, r1, r4, ror #24
   19780:	andeq	r9, r1, r4, asr #24
   19784:	andeq	r9, r1, ip, lsl #22
   19788:	andeq	r9, r1, r0, lsr fp
   1978c:	andeq	r9, r1, r8, asr fp
   19790:	andeq	r9, r1, r8, asr fp
   19794:	andeq	r9, r1, r8, asr fp
   19798:	mov	r3, #0
   1979c:	ldr	r1, [sp, #56]	; 0x38
   197a0:	ldr	r2, [sp, #176]	; 0xb0
   197a4:	ldr	lr, [sp, #176]	; 0xb0
   197a8:	mov	r8, r3
   197ac:	mov	ip, r3
   197b0:	str	r3, [sp, #40]	; 0x28
   197b4:	mov	r3, r1
   197b8:	cmp	r2, #2
   197bc:	moveq	r3, #0
   197c0:	andne	r3, r3, #1
   197c4:	mov	r0, r3
   197c8:	str	r3, [sp, #92]	; 0x5c
   197cc:	ldr	r3, [sp, #68]	; 0x44
   197d0:	sub	lr, lr, #2
   197d4:	adds	r2, r3, #0
   197d8:	movne	r2, #1
   197dc:	and	r3, r1, ip
   197e0:	and	r3, r2, r3
   197e4:	clz	lr, lr
   197e8:	str	r3, [sp, #88]	; 0x58
   197ec:	lsr	lr, lr, #5
   197f0:	mov	r3, ip
   197f4:	and	r3, r3, lr
   197f8:	mov	sl, #0
   197fc:	and	r0, r2, r0
   19800:	str	r3, [sp, #64]	; 0x40
   19804:	eor	r3, r1, #1
   19808:	str	lr, [sp, #52]	; 0x34
   1980c:	str	r0, [sp, #48]	; 0x30
   19810:	str	r3, [sp, #60]	; 0x3c
   19814:	ldr	r3, [sp, #24]
   19818:	cmn	r3, #1
   1981c:	beq	19d4c <__assert_fail@plt+0x897c>
   19820:	subs	r7, r3, sl
   19824:	movne	r7, #1
   19828:	cmp	r7, #0
   1982c:	beq	19d64 <__assert_fail@plt+0x8994>
   19830:	ldr	r3, [sp, #48]	; 0x30
   19834:	cmp	r3, #0
   19838:	beq	1a0d0 <__assert_fail@plt+0x8d00>
   1983c:	ldr	r2, [sp, #68]	; 0x44
   19840:	ldr	r1, [sp, #24]
   19844:	cmp	r2, #1
   19848:	mov	r3, r2
   1984c:	movls	r3, #0
   19850:	movhi	r3, #1
   19854:	cmn	r1, #1
   19858:	movne	r3, #0
   1985c:	cmp	r3, #0
   19860:	add	r4, sl, r2
   19864:	beq	19874 <__assert_fail@plt+0x84a4>
   19868:	ldr	r0, [sp, #44]	; 0x2c
   1986c:	bl	11274 <strlen@plt>
   19870:	str	r0, [sp, #24]
   19874:	ldr	r3, [sp, #24]
   19878:	cmp	r3, r4
   1987c:	ldr	r3, [sp, #44]	; 0x2c
   19880:	add	r5, r3, sl
   19884:	bcc	1a0d8 <__assert_fail@plt+0x8d08>
   19888:	mov	r0, r5
   1988c:	ldr	r2, [sp, #68]	; 0x44
   19890:	ldr	r1, [sp, #72]	; 0x48
   19894:	bl	11118 <memcmp@plt>
   19898:	cmp	r0, #0
   1989c:	bne	1a0d8 <__assert_fail@plt+0x8d08>
   198a0:	ldr	r3, [sp, #40]	; 0x28
   198a4:	cmp	r3, #0
   198a8:	bne	1aa94 <__assert_fail@plt+0x96c4>
   198ac:	ldrb	r4, [r5]
   198b0:	cmp	r4, #126	; 0x7e
   198b4:	ldrls	pc, [pc, r4, lsl #2]
   198b8:	b	1a9d0 <__assert_fail@plt+0x9600>
   198bc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   198c0:	ldrdeq	sl, [r1], -r0
   198c4:	ldrdeq	sl, [r1], -r0
   198c8:	ldrdeq	sl, [r1], -r0
   198cc:	ldrdeq	sl, [r1], -r0
   198d0:	ldrdeq	sl, [r1], -r0
   198d4:	ldrdeq	sl, [r1], -r0
   198d8:	andeq	r9, r1, ip, ror pc
   198dc:	andeq	r9, r1, r8, ror #30
   198e0:	andeq	r9, r1, r4, asr #30
   198e4:	andeq	r9, r1, r4, lsr #30
   198e8:	andeq	r9, r1, r4, asr pc
   198ec:	andeq	r9, r1, ip, lsl #29
   198f0:	andeq	sl, r1, r0, asr #1
   198f4:	ldrdeq	sl, [r1], -r0
   198f8:	ldrdeq	sl, [r1], -r0
   198fc:	ldrdeq	sl, [r1], -r0
   19900:	ldrdeq	sl, [r1], -r0
   19904:	ldrdeq	sl, [r1], -r0
   19908:	ldrdeq	sl, [r1], -r0
   1990c:	ldrdeq	sl, [r1], -r0
   19910:	ldrdeq	sl, [r1], -r0
   19914:	ldrdeq	sl, [r1], -r0
   19918:	ldrdeq	sl, [r1], -r0
   1991c:	ldrdeq	sl, [r1], -r0
   19920:	ldrdeq	sl, [r1], -r0
   19924:	ldrdeq	sl, [r1], -r0
   19928:	ldrdeq	sl, [r1], -r0
   1992c:	ldrdeq	sl, [r1], -r0
   19930:	ldrdeq	sl, [r1], -r0
   19934:	ldrdeq	sl, [r1], -r0
   19938:	ldrdeq	sl, [r1], -r0
   1993c:	strheq	sl, [r1], -r0
   19940:	muleq	r1, r0, r0
   19944:	muleq	r1, r0, r0
   19948:	andeq	sl, r1, r0, ror r0
   1994c:	muleq	r1, r0, r0
   19950:	andeq	r9, r1, ip, ror lr
   19954:	muleq	r1, r0, r0
   19958:	andeq	r9, r1, r8, asr lr
   1995c:	muleq	r1, r0, r0
   19960:	muleq	r1, r0, r0
   19964:	muleq	r1, r0, r0
   19968:	andeq	r9, r1, ip, ror lr
   1996c:	andeq	r9, r1, ip, ror lr
   19970:	andeq	r9, r1, ip, ror lr
   19974:	andeq	r9, r1, ip, ror lr
   19978:	andeq	r9, r1, ip, ror lr
   1997c:	andeq	r9, r1, ip, ror lr
   19980:	andeq	r9, r1, ip, ror lr
   19984:	andeq	r9, r1, ip, ror lr
   19988:	andeq	r9, r1, ip, ror lr
   1998c:	andeq	r9, r1, ip, ror lr
   19990:	andeq	r9, r1, ip, ror lr
   19994:	andeq	r9, r1, ip, ror lr
   19998:	andeq	r9, r1, ip, ror lr
   1999c:	andeq	r9, r1, ip, ror lr
   199a0:	andeq	r9, r1, ip, ror lr
   199a4:	andeq	r9, r1, ip, ror lr
   199a8:	muleq	r1, r0, r0
   199ac:	muleq	r1, r0, r0
   199b0:	muleq	r1, r0, r0
   199b4:	muleq	r1, r0, r0
   199b8:	andeq	r9, r1, r8, lsl #28
   199bc:	ldrdeq	sl, [r1], -r0
   199c0:	andeq	r9, r1, ip, ror lr
   199c4:	andeq	r9, r1, ip, ror lr
   199c8:	andeq	r9, r1, ip, ror lr
   199cc:	andeq	r9, r1, ip, ror lr
   199d0:	andeq	r9, r1, ip, ror lr
   199d4:	andeq	r9, r1, ip, ror lr
   199d8:	andeq	r9, r1, ip, ror lr
   199dc:	andeq	r9, r1, ip, ror lr
   199e0:	andeq	r9, r1, ip, ror lr
   199e4:	andeq	r9, r1, ip, ror lr
   199e8:	andeq	r9, r1, ip, ror lr
   199ec:	andeq	r9, r1, ip, ror lr
   199f0:	andeq	r9, r1, ip, ror lr
   199f4:	andeq	r9, r1, ip, ror lr
   199f8:	andeq	r9, r1, ip, ror lr
   199fc:	andeq	r9, r1, ip, ror lr
   19a00:	andeq	r9, r1, ip, ror lr
   19a04:	andeq	r9, r1, ip, ror lr
   19a08:	andeq	r9, r1, ip, ror lr
   19a0c:	andeq	r9, r1, ip, ror lr
   19a10:	andeq	r9, r1, ip, ror lr
   19a14:	andeq	r9, r1, ip, ror lr
   19a18:	andeq	r9, r1, ip, ror lr
   19a1c:	andeq	r9, r1, ip, ror lr
   19a20:	andeq	r9, r1, ip, ror lr
   19a24:	andeq	r9, r1, ip, ror lr
   19a28:	muleq	r1, r0, r0
   19a2c:	ldrdeq	r9, [r1], -r4
   19a30:	andeq	r9, r1, ip, ror lr
   19a34:	muleq	r1, r0, r0
   19a38:	andeq	r9, r1, ip, ror lr
   19a3c:	muleq	r1, r0, r0
   19a40:	andeq	r9, r1, ip, ror lr
   19a44:	andeq	r9, r1, ip, ror lr
   19a48:	andeq	r9, r1, ip, ror lr
   19a4c:	andeq	r9, r1, ip, ror lr
   19a50:	andeq	r9, r1, ip, ror lr
   19a54:	andeq	r9, r1, ip, ror lr
   19a58:	andeq	r9, r1, ip, ror lr
   19a5c:	andeq	r9, r1, ip, ror lr
   19a60:	andeq	r9, r1, ip, ror lr
   19a64:	andeq	r9, r1, ip, ror lr
   19a68:	andeq	r9, r1, ip, ror lr
   19a6c:	andeq	r9, r1, ip, ror lr
   19a70:	andeq	r9, r1, ip, ror lr
   19a74:	andeq	r9, r1, ip, ror lr
   19a78:	andeq	r9, r1, ip, ror lr
   19a7c:	andeq	r9, r1, ip, ror lr
   19a80:	andeq	r9, r1, ip, ror lr
   19a84:	andeq	r9, r1, ip, ror lr
   19a88:	andeq	r9, r1, ip, ror lr
   19a8c:	andeq	r9, r1, ip, ror lr
   19a90:	andeq	r9, r1, ip, ror lr
   19a94:	andeq	r9, r1, ip, ror lr
   19a98:	andeq	r9, r1, ip, ror lr
   19a9c:	andeq	r9, r1, ip, ror lr
   19aa0:	andeq	r9, r1, ip, ror lr
   19aa4:	andeq	r9, r1, ip, ror lr
   19aa8:	andeq	r9, r1, ip, lsl #25
   19aac:	muleq	r1, r0, r0
   19ab0:	andeq	r9, r1, ip, lsl #25
   19ab4:	andeq	sl, r1, r0, ror r0
   19ab8:	mov	r3, #1
   19abc:	str	r3, [sp, #40]	; 0x28
   19ac0:	str	r3, [sp, #68]	; 0x44
   19ac4:	mov	r8, #0
   19ac8:	ldr	r3, [pc, #4056]	; 1aaa8 <__assert_fail@plt+0x96d8>
   19acc:	str	r3, [sp, #72]	; 0x48
   19ad0:	mov	r3, #2
   19ad4:	str	r3, [sp, #176]	; 0xb0
   19ad8:	ldr	r1, [sp, #56]	; 0x38
   19adc:	mov	r2, r3
   19ae0:	ldr	ip, [sp, #40]	; 0x28
   19ae4:	mov	lr, r3
   19ae8:	b	197b4 <__assert_fail@plt+0x83e4>
   19aec:	mov	r3, #1
   19af0:	str	r3, [sp, #56]	; 0x38
   19af4:	str	r3, [sp, #68]	; 0x44
   19af8:	str	r3, [sp, #40]	; 0x28
   19afc:	ldr	r3, [pc, #4004]	; 1aaa8 <__assert_fail@plt+0x96d8>
   19b00:	mov	r8, #0
   19b04:	str	r3, [sp, #72]	; 0x48
   19b08:	b	19ad0 <__assert_fail@plt+0x8700>
   19b0c:	mov	r3, #1
   19b10:	str	r3, [sp, #56]	; 0x38
   19b14:	str	r3, [sp, #68]	; 0x44
   19b18:	str	r3, [sp, #40]	; 0x28
   19b1c:	ldr	r3, [pc, #3976]	; 1aaac <__assert_fail@plt+0x96dc>
   19b20:	mov	r8, #0
   19b24:	str	r3, [sp, #72]	; 0x48
   19b28:	mov	r3, #5
   19b2c:	b	19ad4 <__assert_fail@plt+0x8704>
   19b30:	mov	r3, #0
   19b34:	str	r3, [sp, #40]	; 0x28
   19b38:	mov	r3, #1
   19b3c:	str	r3, [sp, #56]	; 0x38
   19b40:	mov	r8, #0
   19b44:	mov	r1, r3
   19b48:	ldr	r2, [sp, #176]	; 0xb0
   19b4c:	ldr	ip, [sp, #40]	; 0x28
   19b50:	ldr	lr, [sp, #176]	; 0xb0
   19b54:	b	197b4 <__assert_fail@plt+0x83e4>
   19b58:	ldr	r3, [sp, #176]	; 0xb0
   19b5c:	cmp	r3, #10
   19b60:	beq	19ba4 <__assert_fail@plt+0x87d4>
   19b64:	mov	r2, #5
   19b68:	ldr	r1, [pc, #3904]	; 1aab0 <__assert_fail@plt+0x96e0>
   19b6c:	mov	r0, #0
   19b70:	bl	11130 <dcgettext@plt>
   19b74:	ldr	r2, [pc, #3892]	; 1aab0 <__assert_fail@plt+0x96e0>
   19b78:	cmp	r0, r2
   19b7c:	str	r0, [sp, #188]	; 0xbc
   19b80:	beq	1ac3c <__assert_fail@plt+0x986c>
   19b84:	mov	r2, #5
   19b88:	ldr	r1, [pc, #3864]	; 1aaa8 <__assert_fail@plt+0x96d8>
   19b8c:	mov	r0, #0
   19b90:	bl	11130 <dcgettext@plt>
   19b94:	ldr	r2, [pc, #3852]	; 1aaa8 <__assert_fail@plt+0x96d8>
   19b98:	cmp	r0, r2
   19b9c:	str	r0, [sp, #192]	; 0xc0
   19ba0:	beq	1ac2c <__assert_fail@plt+0x985c>
   19ba4:	ldr	r8, [sp, #40]	; 0x28
   19ba8:	cmp	r8, #0
   19bac:	movne	r8, #0
   19bb0:	bne	19be0 <__assert_fail@plt+0x8810>
   19bb4:	ldr	r3, [sp, #188]	; 0xbc
   19bb8:	ldrb	r3, [r3]
   19bbc:	cmp	r3, #0
   19bc0:	beq	19be0 <__assert_fail@plt+0x8810>
   19bc4:	ldr	r2, [sp, #188]	; 0xbc
   19bc8:	cmp	fp, r8
   19bcc:	strbhi	r3, [r9, r8]
   19bd0:	ldrb	r3, [r2, #1]!
   19bd4:	add	r8, r8, #1
   19bd8:	cmp	r3, #0
   19bdc:	bne	19bc8 <__assert_fail@plt+0x87f8>
   19be0:	ldr	r0, [sp, #192]	; 0xc0
   19be4:	bl	11274 <strlen@plt>
   19be8:	ldr	r3, [sp, #192]	; 0xc0
   19bec:	ldr	r2, [sp, #176]	; 0xb0
   19bf0:	str	r3, [sp, #72]	; 0x48
   19bf4:	mov	r3, #1
   19bf8:	str	r3, [sp, #56]	; 0x38
   19bfc:	mov	r1, r3
   19c00:	ldr	ip, [sp, #40]	; 0x28
   19c04:	ldr	lr, [sp, #176]	; 0xb0
   19c08:	str	r0, [sp, #68]	; 0x44
   19c0c:	b	197b4 <__assert_fail@plt+0x83e4>
   19c10:	ldr	r3, [sp, #40]	; 0x28
   19c14:	cmp	r3, #0
   19c18:	beq	1a8c0 <__assert_fail@plt+0x94f0>
   19c1c:	mov	r3, #1
   19c20:	str	r3, [sp, #68]	; 0x44
   19c24:	ldr	r3, [pc, #3708]	; 1aaa8 <__assert_fail@plt+0x96d8>
   19c28:	str	r3, [sp, #72]	; 0x48
   19c2c:	mov	r8, #0
   19c30:	ldr	r1, [sp, #56]	; 0x38
   19c34:	ldr	r2, [sp, #176]	; 0xb0
   19c38:	ldr	ip, [sp, #40]	; 0x28
   19c3c:	ldr	lr, [sp, #176]	; 0xb0
   19c40:	b	197b4 <__assert_fail@plt+0x83e4>
   19c44:	ldr	r3, [sp, #40]	; 0x28
   19c48:	cmp	r3, #0
   19c4c:	beq	1a944 <__assert_fail@plt+0x9574>
   19c50:	str	r3, [sp, #56]	; 0x38
   19c54:	mov	r3, #1
   19c58:	str	r3, [sp, #68]	; 0x44
   19c5c:	ldr	r3, [pc, #3656]	; 1aaac <__assert_fail@plt+0x96dc>
   19c60:	b	19c28 <__assert_fail@plt+0x8858>
   19c64:	ldr	r3, [sp, #40]	; 0x28
   19c68:	cmp	r3, #0
   19c6c:	mov	r3, #1
   19c70:	streq	r3, [sp, #56]	; 0x38
   19c74:	beq	1a8c0 <__assert_fail@plt+0x94f0>
   19c78:	str	r3, [sp, #68]	; 0x44
   19c7c:	ldr	r3, [pc, #3620]	; 1aaa8 <__assert_fail@plt+0x96d8>
   19c80:	mov	r8, #0
   19c84:	str	r3, [sp, #72]	; 0x48
   19c88:	b	19ad0 <__assert_fail@plt+0x8700>
   19c8c:	ldr	r3, [sp, #24]
   19c90:	ldr	r6, [sp, #48]	; 0x30
   19c94:	cmn	r3, #1
   19c98:	beq	1a2f4 <__assert_fail@plt+0x8f24>
   19c9c:	subs	r3, r3, #1
   19ca0:	movne	r3, #1
   19ca4:	cmp	r3, #0
   19ca8:	beq	1a074 <__assert_fail@plt+0x8ca4>
   19cac:	ldr	r1, [sp, #52]	; 0x34
   19cb0:	mov	r7, r3
   19cb4:	mov	r3, #0
   19cb8:	str	r3, [sp, #32]
   19cbc:	ldr	r3, [sp, #60]	; 0x3c
   19cc0:	orr	r2, r1, r3
   19cc4:	ldr	r3, [sp, #40]	; 0x28
   19cc8:	eor	r2, r2, #1
   19ccc:	orr	r2, r3, r2
   19cd0:	tst	r2, #255	; 0xff
   19cd4:	bne	1a5f8 <__assert_fail@plt+0x9228>
   19cd8:	cmp	r6, #0
   19cdc:	bne	19eb8 <__assert_fail@plt+0x8ae8>
   19ce0:	ldr	r3, [sp, #36]	; 0x24
   19ce4:	add	sl, sl, #1
   19ce8:	and	r3, r3, r7
   19cec:	uxtb	r6, r3
   19cf0:	cmp	r6, #0
   19cf4:	beq	19d20 <__assert_fail@plt+0x8950>
   19cf8:	cmp	fp, r8
   19cfc:	movhi	r3, #39	; 0x27
   19d00:	strbhi	r3, [r9, r8]
   19d04:	add	r3, r8, #1
   19d08:	cmp	fp, r3
   19d0c:	movhi	r2, #39	; 0x27
   19d10:	add	r8, r8, #2
   19d14:	strbhi	r2, [r9, r3]
   19d18:	mov	r3, #0
   19d1c:	str	r3, [sp, #36]	; 0x24
   19d20:	ldr	r2, [sp, #32]
   19d24:	cmp	r8, fp
   19d28:	ldr	r3, [sp, #28]
   19d2c:	strbcc	r4, [r9, r8]
   19d30:	cmp	r2, #0
   19d34:	moveq	r3, #0
   19d38:	str	r3, [sp, #28]
   19d3c:	ldr	r3, [sp, #24]
   19d40:	add	r8, r8, #1
   19d44:	cmn	r3, #1
   19d48:	bne	19820 <__assert_fail@plt+0x8450>
   19d4c:	ldr	r3, [sp, #44]	; 0x2c
   19d50:	ldrb	r3, [r3, sl]
   19d54:	adds	r7, r3, #0
   19d58:	movne	r7, #1
   19d5c:	cmp	r7, #0
   19d60:	bne	19830 <__assert_fail@plt+0x8460>
   19d64:	ldr	r3, [sp, #64]	; 0x40
   19d68:	cmp	r8, #0
   19d6c:	movne	r3, #0
   19d70:	andeq	r3, r3, #1
   19d74:	cmp	r3, #0
   19d78:	str	r3, [sp, #64]	; 0x40
   19d7c:	bne	1a820 <__assert_fail@plt+0x9450>
   19d80:	ldr	r3, [sp, #40]	; 0x28
   19d84:	ldr	r2, [sp, #52]	; 0x34
   19d88:	eor	r3, r3, #1
   19d8c:	ands	r2, r2, r3
   19d90:	beq	1ac4c <__assert_fail@plt+0x987c>
   19d94:	ldr	r3, [sp, #76]	; 0x4c
   19d98:	cmp	r3, #0
   19d9c:	beq	1ac1c <__assert_fail@plt+0x984c>
   19da0:	ldr	r3, [sp, #28]
   19da4:	cmp	r3, #0
   19da8:	bne	1abd8 <__assert_fail@plt+0x9808>
   19dac:	ldr	r2, [sp, #84]	; 0x54
   19db0:	clz	r3, fp
   19db4:	cmp	r2, #0
   19db8:	lsr	r3, r3, #5
   19dbc:	moveq	r3, #0
   19dc0:	cmp	r3, #0
   19dc4:	beq	1ab78 <__assert_fail@plt+0x97a8>
   19dc8:	mov	fp, r2
   19dcc:	str	r3, [sp, #76]	; 0x4c
   19dd0:	b	1975c <__assert_fail@plt+0x838c>
   19dd4:	ldr	r3, [sp, #176]	; 0xb0
   19dd8:	ldr	r6, [sp, #48]	; 0x30
   19ddc:	cmp	r3, #2
   19de0:	beq	1a318 <__assert_fail@plt+0x8f48>
   19de4:	ldr	r3, [sp, #88]	; 0x58
   19de8:	cmp	r3, #0
   19dec:	beq	1a89c <__assert_fail@plt+0x94cc>
   19df0:	mov	r3, #0
   19df4:	add	sl, sl, #1
   19df8:	ldr	r6, [sp, #36]	; 0x24
   19dfc:	str	r3, [sp, #32]
   19e00:	mov	r4, #92	; 0x5c
   19e04:	b	19cf0 <__assert_fail@plt+0x8920>
   19e08:	ldr	r3, [sp, #176]	; 0xb0
   19e0c:	ldr	r6, [sp, #48]	; 0x30
   19e10:	cmp	r3, #2
   19e14:	beq	1a348 <__assert_fail@plt+0x8f78>
   19e18:	cmp	r3, #5
   19e1c:	bne	1a8ac <__assert_fail@plt+0x94dc>
   19e20:	ldr	r3, [sp, #100]	; 0x64
   19e24:	cmp	r3, #0
   19e28:	beq	1a910 <__assert_fail@plt+0x9540>
   19e2c:	ldr	r2, [sp, #24]
   19e30:	add	r3, sl, #2
   19e34:	cmp	r2, r3
   19e38:	bls	19e48 <__assert_fail@plt+0x8a78>
   19e3c:	ldrb	r4, [r5, #1]
   19e40:	cmp	r4, #63	; 0x3f
   19e44:	beq	1aab8 <__assert_fail@plt+0x96e8>
   19e48:	mov	r1, #0
   19e4c:	str	r1, [sp, #32]
   19e50:	mov	r4, #63	; 0x3f
   19e54:	b	19cbc <__assert_fail@plt+0x88ec>
   19e58:	ldr	r3, [sp, #176]	; 0xb0
   19e5c:	ldr	r6, [sp, #48]	; 0x30
   19e60:	cmp	r3, #2
   19e64:	beq	1a374 <__assert_fail@plt+0x8fa4>
   19e68:	str	r7, [sp, #32]
   19e6c:	str	r7, [sp, #76]	; 0x4c
   19e70:	mov	r1, #0
   19e74:	mov	r4, #39	; 0x27
   19e78:	b	19cbc <__assert_fail@plt+0x88ec>
   19e7c:	ldr	r6, [sp, #48]	; 0x30
   19e80:	ldr	r1, [sp, #52]	; 0x34
   19e84:	str	r7, [sp, #32]
   19e88:	b	19cbc <__assert_fail@plt+0x88ec>
   19e8c:	ldr	r6, [sp, #48]	; 0x30
   19e90:	ldr	r1, [sp, #52]	; 0x34
   19e94:	mov	r4, #12
   19e98:	mov	r3, #102	; 0x66
   19e9c:	ldr	r2, [sp, #56]	; 0x38
   19ea0:	cmp	r2, #0
   19ea4:	streq	r2, [sp, #32]
   19ea8:	beq	19cbc <__assert_fail@plt+0x88ec>
   19eac:	mov	r4, r3
   19eb0:	mov	r3, #0
   19eb4:	str	r3, [sp, #32]
   19eb8:	ldr	r3, [sp, #40]	; 0x28
   19ebc:	cmp	r3, #0
   19ec0:	bne	1a630 <__assert_fail@plt+0x9260>
   19ec4:	ldr	r3, [sp, #36]	; 0x24
   19ec8:	eor	r3, r3, #1
   19ecc:	and	r3, r3, r1
   19ed0:	ands	r3, r3, #255	; 0xff
   19ed4:	beq	19f0c <__assert_fail@plt+0x8b3c>
   19ed8:	cmp	fp, r8
   19edc:	movhi	r2, #39	; 0x27
   19ee0:	strbhi	r2, [r9, r8]
   19ee4:	add	r2, r8, #1
   19ee8:	cmp	fp, r2
   19eec:	movhi	r1, #36	; 0x24
   19ef0:	strbhi	r1, [r9, r2]
   19ef4:	add	r2, r8, #2
   19ef8:	cmp	fp, r2
   19efc:	add	r8, r8, #3
   19f00:	movhi	r1, #39	; 0x27
   19f04:	strbhi	r1, [r9, r2]
   19f08:	str	r3, [sp, #36]	; 0x24
   19f0c:	cmp	fp, r8
   19f10:	movhi	r3, #92	; 0x5c
   19f14:	strbhi	r3, [r9, r8]
   19f18:	add	sl, sl, #1
   19f1c:	add	r8, r8, #1
   19f20:	b	19d20 <__assert_fail@plt+0x8950>
   19f24:	ldr	r6, [sp, #48]	; 0x30
   19f28:	mov	r4, #10
   19f2c:	mov	r3, #110	; 0x6e
   19f30:	ldr	r2, [sp, #64]	; 0x40
   19f34:	cmp	r2, #0
   19f38:	bne	1a9b8 <__assert_fail@plt+0x95e8>
   19f3c:	ldr	r1, [sp, #52]	; 0x34
   19f40:	b	19e9c <__assert_fail@plt+0x8acc>
   19f44:	ldr	r6, [sp, #48]	; 0x30
   19f48:	ldr	r1, [sp, #52]	; 0x34
   19f4c:	mov	r3, #116	; 0x74
   19f50:	b	19e9c <__assert_fail@plt+0x8acc>
   19f54:	ldr	r6, [sp, #48]	; 0x30
   19f58:	ldr	r1, [sp, #52]	; 0x34
   19f5c:	mov	r4, #11
   19f60:	mov	r3, #118	; 0x76
   19f64:	b	19e9c <__assert_fail@plt+0x8acc>
   19f68:	ldr	r6, [sp, #48]	; 0x30
   19f6c:	ldr	r1, [sp, #52]	; 0x34
   19f70:	mov	r4, #8
   19f74:	mov	r3, #98	; 0x62
   19f78:	b	19e9c <__assert_fail@plt+0x8acc>
   19f7c:	ldr	r6, [sp, #48]	; 0x30
   19f80:	ldr	r1, [sp, #52]	; 0x34
   19f84:	mov	r4, #7
   19f88:	mov	r3, #97	; 0x61
   19f8c:	b	19e9c <__assert_fail@plt+0x8acc>
   19f90:	ldr	r3, [sp, #56]	; 0x38
   19f94:	ldr	r6, [sp, #48]	; 0x30
   19f98:	cmp	r3, #0
   19f9c:	beq	1a460 <__assert_fail@plt+0x9090>
   19fa0:	ldr	r3, [sp, #40]	; 0x28
   19fa4:	cmp	r3, #0
   19fa8:	bne	1aa94 <__assert_fail@plt+0x96c4>
   19fac:	ldr	r3, [sp, #36]	; 0x24
   19fb0:	ldr	r2, [sp, #52]	; 0x34
   19fb4:	eor	r3, r3, #1
   19fb8:	ands	r3, r2, r3
   19fbc:	moveq	r2, r8
   19fc0:	beq	19ff8 <__assert_fail@plt+0x8c28>
   19fc4:	cmp	fp, r8
   19fc8:	movhi	r2, #39	; 0x27
   19fcc:	strbhi	r2, [r9, r8]
   19fd0:	add	r2, r8, #1
   19fd4:	cmp	fp, r2
   19fd8:	movhi	r1, #36	; 0x24
   19fdc:	strbhi	r1, [r9, r2]
   19fe0:	add	r2, r8, #2
   19fe4:	cmp	fp, r2
   19fe8:	movhi	r1, #39	; 0x27
   19fec:	strbhi	r1, [r9, r2]
   19ff0:	add	r2, r8, #3
   19ff4:	str	r3, [sp, #36]	; 0x24
   19ff8:	cmp	fp, r2
   19ffc:	movhi	r3, #92	; 0x5c
   1a000:	strbhi	r3, [r9, r2]
   1a004:	ldr	r3, [sp, #92]	; 0x5c
   1a008:	add	r8, r2, #1
   1a00c:	cmp	r3, #0
   1a010:	beq	1a994 <__assert_fail@plt+0x95c4>
   1a014:	ldr	r1, [sp, #24]
   1a018:	add	r3, sl, #1
   1a01c:	cmp	r1, r3
   1a020:	bls	1a058 <__assert_fail@plt+0x8c88>
   1a024:	ldr	r1, [sp, #44]	; 0x2c
   1a028:	ldrb	r3, [r1, r3]
   1a02c:	sub	r3, r3, #48	; 0x30
   1a030:	cmp	r3, #9
   1a034:	bhi	1a058 <__assert_fail@plt+0x8c88>
   1a038:	cmp	fp, r8
   1a03c:	movhi	r3, #48	; 0x30
   1a040:	strbhi	r3, [r9, r8]
   1a044:	add	r3, r2, #2
   1a048:	cmp	fp, r3
   1a04c:	add	r8, r2, #3
   1a050:	movhi	r1, #48	; 0x30
   1a054:	strbhi	r1, [r9, r3]
   1a058:	ldr	r3, [sp, #40]	; 0x28
   1a05c:	ldr	r1, [sp, #52]	; 0x34
   1a060:	mov	r7, r3
   1a064:	str	r3, [sp, #32]
   1a068:	mov	r4, #48	; 0x30
   1a06c:	b	19cbc <__assert_fail@plt+0x88ec>
   1a070:	ldr	r6, [sp, #48]	; 0x30
   1a074:	cmp	sl, #0
   1a078:	streq	r7, [sp, #32]
   1a07c:	beq	1a09c <__assert_fail@plt+0x8ccc>
   1a080:	mov	r3, #0
   1a084:	ldr	r1, [sp, #52]	; 0x34
   1a088:	str	r3, [sp, #32]
   1a08c:	b	19cbc <__assert_fail@plt+0x88ec>
   1a090:	ldr	r6, [sp, #48]	; 0x30
   1a094:	mov	r3, #0
   1a098:	str	r3, [sp, #32]
   1a09c:	ldr	r3, [sp, #64]	; 0x40
   1a0a0:	cmp	r3, #0
   1a0a4:	bne	1a820 <__assert_fail@plt+0x9450>
   1a0a8:	ldr	r1, [sp, #52]	; 0x34
   1a0ac:	b	19cbc <__assert_fail@plt+0x88ec>
   1a0b0:	ldr	r3, [sp, #48]	; 0x30
   1a0b4:	mov	r6, r3
   1a0b8:	str	r3, [sp, #32]
   1a0bc:	b	1a09c <__assert_fail@plt+0x8ccc>
   1a0c0:	ldr	r6, [sp, #48]	; 0x30
   1a0c4:	mov	r4, #13
   1a0c8:	mov	r3, #114	; 0x72
   1a0cc:	b	19f30 <__assert_fail@plt+0x8b60>
   1a0d0:	ldr	r3, [sp, #44]	; 0x2c
   1a0d4:	add	r5, r3, sl
   1a0d8:	ldrb	r4, [r5]
   1a0dc:	cmp	r4, #126	; 0x7e
   1a0e0:	ldrls	pc, [pc, r4, lsl #2]
   1a0e4:	b	1a480 <__assert_fail@plt+0x90b0>
   1a0e8:	andeq	sl, r1, r0, asr r4
   1a0ec:	andeq	sl, r1, r0, lsl #9
   1a0f0:	andeq	sl, r1, r0, lsl #9
   1a0f4:	andeq	sl, r1, r0, lsl #9
   1a0f8:	andeq	sl, r1, r0, lsl #9
   1a0fc:	andeq	sl, r1, r0, lsl #9
   1a100:	andeq	sl, r1, r0, lsl #9
   1a104:	andeq	sl, r1, r8, asr #8
   1a108:	andeq	sl, r1, r0, asr #8
   1a10c:	andeq	sl, r1, r4, lsr r4
   1a110:	andeq	sl, r1, ip, lsr #8
   1a114:	andeq	sl, r1, r4, lsr #8
   1a118:	andeq	sl, r1, ip, lsl r4
   1a11c:	andeq	sl, r1, r4, lsl r4
   1a120:	andeq	sl, r1, r0, lsl #9
   1a124:	andeq	sl, r1, r0, lsl #9
   1a128:	andeq	sl, r1, r0, lsl #9
   1a12c:	andeq	sl, r1, r0, lsl #9
   1a130:	andeq	sl, r1, r0, lsl #9
   1a134:	andeq	sl, r1, r0, lsl #9
   1a138:	andeq	sl, r1, r0, lsl #9
   1a13c:	andeq	sl, r1, r0, lsl #9
   1a140:	andeq	sl, r1, r0, lsl #9
   1a144:	andeq	sl, r1, r0, lsl #9
   1a148:	andeq	sl, r1, r0, lsl #9
   1a14c:	andeq	sl, r1, r0, lsl #9
   1a150:	andeq	sl, r1, r0, lsl #9
   1a154:	andeq	sl, r1, r0, lsl #9
   1a158:	andeq	sl, r1, r0, lsl #9
   1a15c:	andeq	sl, r1, r0, lsl #9
   1a160:	andeq	sl, r1, r0, lsl #9
   1a164:	andeq	sl, r1, r0, lsl #9
   1a168:	andeq	sl, r1, r8, lsl #8
   1a16c:	andeq	sl, r1, r0, lsl #8
   1a170:	andeq	sl, r1, r0, lsl #8
   1a174:	strdeq	sl, [r1], -r8
   1a178:	andeq	sl, r1, r0, lsl #8
   1a17c:	strdeq	sl, [r1], -r0
   1a180:	andeq	sl, r1, r0, lsl #8
   1a184:	andeq	sl, r1, r4, ror #6
   1a188:	andeq	sl, r1, r0, lsl #8
   1a18c:	andeq	sl, r1, r0, lsl #8
   1a190:	andeq	sl, r1, r0, lsl #8
   1a194:	strdeq	sl, [r1], -r0
   1a198:	strdeq	sl, [r1], -r0
   1a19c:	strdeq	sl, [r1], -r0
   1a1a0:	strdeq	sl, [r1], -r0
   1a1a4:	strdeq	sl, [r1], -r0
   1a1a8:	strdeq	sl, [r1], -r0
   1a1ac:	strdeq	sl, [r1], -r0
   1a1b0:	strdeq	sl, [r1], -r0
   1a1b4:	strdeq	sl, [r1], -r0
   1a1b8:	strdeq	sl, [r1], -r0
   1a1bc:	strdeq	sl, [r1], -r0
   1a1c0:	strdeq	sl, [r1], -r0
   1a1c4:	strdeq	sl, [r1], -r0
   1a1c8:	strdeq	sl, [r1], -r0
   1a1cc:	strdeq	sl, [r1], -r0
   1a1d0:	strdeq	sl, [r1], -r0
   1a1d4:	andeq	sl, r1, r0, lsl #8
   1a1d8:	andeq	sl, r1, r0, lsl #8
   1a1dc:	andeq	sl, r1, r0, lsl #8
   1a1e0:	andeq	sl, r1, r0, lsl #8
   1a1e4:	andeq	sl, r1, r8, lsr r3
   1a1e8:	andeq	sl, r1, r0, lsl #9
   1a1ec:	strdeq	sl, [r1], -r0
   1a1f0:	strdeq	sl, [r1], -r0
   1a1f4:	strdeq	sl, [r1], -r0
   1a1f8:	strdeq	sl, [r1], -r0
   1a1fc:	strdeq	sl, [r1], -r0
   1a200:	strdeq	sl, [r1], -r0
   1a204:	strdeq	sl, [r1], -r0
   1a208:	strdeq	sl, [r1], -r0
   1a20c:	strdeq	sl, [r1], -r0
   1a210:	strdeq	sl, [r1], -r0
   1a214:	strdeq	sl, [r1], -r0
   1a218:	strdeq	sl, [r1], -r0
   1a21c:	strdeq	sl, [r1], -r0
   1a220:	strdeq	sl, [r1], -r0
   1a224:	strdeq	sl, [r1], -r0
   1a228:	strdeq	sl, [r1], -r0
   1a22c:	strdeq	sl, [r1], -r0
   1a230:	strdeq	sl, [r1], -r0
   1a234:	strdeq	sl, [r1], -r0
   1a238:	strdeq	sl, [r1], -r0
   1a23c:	strdeq	sl, [r1], -r0
   1a240:	strdeq	sl, [r1], -r0
   1a244:	strdeq	sl, [r1], -r0
   1a248:	strdeq	sl, [r1], -r0
   1a24c:	strdeq	sl, [r1], -r0
   1a250:	strdeq	sl, [r1], -r0
   1a254:	andeq	sl, r1, r0, lsl #8
   1a258:	andeq	sl, r1, r8, lsl #6
   1a25c:	strdeq	sl, [r1], -r0
   1a260:	andeq	sl, r1, r0, lsl #8
   1a264:	strdeq	sl, [r1], -r0
   1a268:	andeq	sl, r1, r0, lsl #8
   1a26c:	strdeq	sl, [r1], -r0
   1a270:	strdeq	sl, [r1], -r0
   1a274:	strdeq	sl, [r1], -r0
   1a278:	strdeq	sl, [r1], -r0
   1a27c:	strdeq	sl, [r1], -r0
   1a280:	strdeq	sl, [r1], -r0
   1a284:	strdeq	sl, [r1], -r0
   1a288:	strdeq	sl, [r1], -r0
   1a28c:	strdeq	sl, [r1], -r0
   1a290:	strdeq	sl, [r1], -r0
   1a294:	strdeq	sl, [r1], -r0
   1a298:	strdeq	sl, [r1], -r0
   1a29c:	strdeq	sl, [r1], -r0
   1a2a0:	strdeq	sl, [r1], -r0
   1a2a4:	strdeq	sl, [r1], -r0
   1a2a8:	strdeq	sl, [r1], -r0
   1a2ac:	strdeq	sl, [r1], -r0
   1a2b0:	strdeq	sl, [r1], -r0
   1a2b4:	strdeq	sl, [r1], -r0
   1a2b8:	strdeq	sl, [r1], -r0
   1a2bc:	strdeq	sl, [r1], -r0
   1a2c0:	strdeq	sl, [r1], -r0
   1a2c4:	strdeq	sl, [r1], -r0
   1a2c8:	strdeq	sl, [r1], -r0
   1a2cc:	strdeq	sl, [r1], -r0
   1a2d0:	strdeq	sl, [r1], -r0
   1a2d4:	andeq	sl, r1, r4, ror #5
   1a2d8:	andeq	sl, r1, r0, lsl #8
   1a2dc:	andeq	sl, r1, r4, ror #5
   1a2e0:	strdeq	sl, [r1], -r8
   1a2e4:	ldr	r3, [sp, #24]
   1a2e8:	mov	r6, #0
   1a2ec:	cmn	r3, #1
   1a2f0:	bne	19c9c <__assert_fail@plt+0x88cc>
   1a2f4:	ldr	r3, [sp, #44]	; 0x2c
   1a2f8:	ldrb	r3, [r3, #1]
   1a2fc:	adds	r3, r3, #0
   1a300:	movne	r3, #1
   1a304:	b	19ca4 <__assert_fail@plt+0x88d4>
   1a308:	ldr	r3, [sp, #176]	; 0xb0
   1a30c:	mov	r6, #0
   1a310:	cmp	r3, #2
   1a314:	bne	19de4 <__assert_fail@plt+0x8a14>
   1a318:	ldr	r3, [sp, #64]	; 0x40
   1a31c:	cmp	r3, #0
   1a320:	bne	1ab58 <__assert_fail@plt+0x9788>
   1a324:	add	sl, sl, #1
   1a328:	ldr	r6, [sp, #36]	; 0x24
   1a32c:	str	r3, [sp, #32]
   1a330:	mov	r4, #92	; 0x5c
   1a334:	b	19cf0 <__assert_fail@plt+0x8920>
   1a338:	ldr	r3, [sp, #176]	; 0xb0
   1a33c:	mov	r6, #0
   1a340:	cmp	r3, #2
   1a344:	bne	19e18 <__assert_fail@plt+0x8a48>
   1a348:	ldr	r3, [sp, #40]	; 0x28
   1a34c:	cmp	r3, #0
   1a350:	bne	1a634 <__assert_fail@plt+0x9264>
   1a354:	mov	r1, r7
   1a358:	str	r3, [sp, #32]
   1a35c:	mov	r4, #63	; 0x3f
   1a360:	b	19cbc <__assert_fail@plt+0x88ec>
   1a364:	ldr	r3, [sp, #176]	; 0xb0
   1a368:	mov	r6, #0
   1a36c:	cmp	r3, #2
   1a370:	bne	19e68 <__assert_fail@plt+0x8a98>
   1a374:	ldr	r3, [sp, #64]	; 0x40
   1a378:	cmp	r3, #0
   1a37c:	bne	1ab58 <__assert_fail@plt+0x9788>
   1a380:	ldr	r2, [sp, #84]	; 0x54
   1a384:	adds	r3, fp, #0
   1a388:	movne	r3, #1
   1a38c:	cmp	r2, #0
   1a390:	movne	r3, #0
   1a394:	cmp	r3, #0
   1a398:	strne	fp, [sp, #84]	; 0x54
   1a39c:	movne	fp, #0
   1a3a0:	bne	1a3d0 <__assert_fail@plt+0x9000>
   1a3a4:	cmp	fp, r8
   1a3a8:	movhi	r3, #39	; 0x27
   1a3ac:	strbhi	r3, [r9, r8]
   1a3b0:	add	r3, r8, #1
   1a3b4:	cmp	fp, r3
   1a3b8:	movhi	r2, #92	; 0x5c
   1a3bc:	strbhi	r2, [r9, r3]
   1a3c0:	add	r3, r8, #2
   1a3c4:	cmp	fp, r3
   1a3c8:	movhi	r2, #39	; 0x27
   1a3cc:	strbhi	r2, [r9, r3]
   1a3d0:	ldr	r3, [sp, #64]	; 0x40
   1a3d4:	add	r8, r8, #3
   1a3d8:	mov	r1, r7
   1a3dc:	str	r7, [sp, #32]
   1a3e0:	str	r7, [sp, #76]	; 0x4c
   1a3e4:	str	r3, [sp, #36]	; 0x24
   1a3e8:	mov	r4, #39	; 0x27
   1a3ec:	b	19cbc <__assert_fail@plt+0x88ec>
   1a3f0:	mov	r6, #0
   1a3f4:	b	19e80 <__assert_fail@plt+0x8ab0>
   1a3f8:	mov	r6, #0
   1a3fc:	b	1a074 <__assert_fail@plt+0x8ca4>
   1a400:	mov	r6, #0
   1a404:	b	1a094 <__assert_fail@plt+0x8cc4>
   1a408:	str	r7, [sp, #32]
   1a40c:	mov	r6, #0
   1a410:	b	1a09c <__assert_fail@plt+0x8ccc>
   1a414:	mov	r6, #0
   1a418:	b	1a0c4 <__assert_fail@plt+0x8cf4>
   1a41c:	mov	r6, #0
   1a420:	b	19e90 <__assert_fail@plt+0x8ac0>
   1a424:	mov	r6, #0
   1a428:	b	19f58 <__assert_fail@plt+0x8b88>
   1a42c:	mov	r6, #0
   1a430:	b	19f28 <__assert_fail@plt+0x8b58>
   1a434:	mov	r6, #0
   1a438:	mov	r3, #116	; 0x74
   1a43c:	b	19f30 <__assert_fail@plt+0x8b60>
   1a440:	mov	r6, #0
   1a444:	b	19f6c <__assert_fail@plt+0x8b9c>
   1a448:	mov	r6, #0
   1a44c:	b	19f80 <__assert_fail@plt+0x8bb0>
   1a450:	ldr	r3, [sp, #56]	; 0x38
   1a454:	mov	r6, #0
   1a458:	cmp	r3, #0
   1a45c:	bne	19fa0 <__assert_fail@plt+0x8bd0>
   1a460:	ldr	r3, [sp, #96]	; 0x60
   1a464:	cmp	r3, #0
   1a468:	addne	sl, sl, #1
   1a46c:	bne	19814 <__assert_fail@plt+0x8444>
   1a470:	ldr	r1, [sp, #52]	; 0x34
   1a474:	str	r3, [sp, #32]
   1a478:	mov	r4, r3
   1a47c:	b	19cbc <__assert_fail@plt+0x88ec>
   1a480:	mov	r6, #0
   1a484:	ldr	r3, [sp, #80]	; 0x50
   1a488:	cmp	r3, #1
   1a48c:	bne	1a67c <__assert_fail@plt+0x92ac>
   1a490:	bl	1125c <__ctype_b_loc@plt>
   1a494:	ldr	r2, [sp, #80]	; 0x50
   1a498:	sxth	r3, r4
   1a49c:	mov	r1, r2
   1a4a0:	lsl	r3, r3, #1
   1a4a4:	ldr	r2, [r0]
   1a4a8:	ldrh	r3, [r2, r3]
   1a4ac:	and	r3, r3, #16384	; 0x4000
   1a4b0:	cmp	r3, #0
   1a4b4:	movne	r3, #1
   1a4b8:	moveq	r3, #0
   1a4bc:	str	r3, [sp, #32]
   1a4c0:	moveq	r3, #1
   1a4c4:	movne	r3, #0
   1a4c8:	ldr	r2, [sp, #56]	; 0x38
   1a4cc:	and	r3, r3, r2
   1a4d0:	ands	r3, r3, #255	; 0xff
   1a4d4:	beq	1a0a8 <__assert_fail@plt+0x8cd8>
   1a4d8:	add	r1, sl, r1
   1a4dc:	mov	r0, #0
   1a4e0:	ldr	r7, [sp, #40]	; 0x28
   1a4e4:	ldr	r2, [sp, #36]	; 0x24
   1a4e8:	ldr	lr, [sp, #52]	; 0x34
   1a4ec:	b	1a59c <__assert_fail@plt+0x91cc>
   1a4f0:	cmp	r7, #0
   1a4f4:	bne	1a8f0 <__assert_fail@plt+0x9520>
   1a4f8:	eor	r0, r2, #1
   1a4fc:	ands	r0, lr, r0
   1a500:	beq	1a538 <__assert_fail@plt+0x9168>
   1a504:	cmp	fp, r8
   1a508:	movhi	r2, #39	; 0x27
   1a50c:	strbhi	r2, [r9, r8]
   1a510:	add	r2, r8, #1
   1a514:	cmp	fp, r2
   1a518:	movhi	ip, #36	; 0x24
   1a51c:	strbhi	ip, [r9, r2]
   1a520:	add	r2, r8, #2
   1a524:	cmp	fp, r2
   1a528:	movhi	ip, #39	; 0x27
   1a52c:	strbhi	ip, [r9, r2]
   1a530:	add	r8, r8, #3
   1a534:	mov	r2, r0
   1a538:	cmp	fp, r8
   1a53c:	movhi	r0, #92	; 0x5c
   1a540:	strbhi	r0, [r9, r8]
   1a544:	add	r0, r8, #1
   1a548:	cmp	fp, r0
   1a54c:	lsrhi	ip, r4, #6
   1a550:	addhi	ip, ip, #48	; 0x30
   1a554:	strbhi	ip, [r9, r0]
   1a558:	add	ip, r8, #2
   1a55c:	cmp	fp, ip
   1a560:	lsrhi	r0, r4, #3
   1a564:	andhi	r0, r0, #7
   1a568:	addhi	r0, r0, #48	; 0x30
   1a56c:	add	sl, sl, #1
   1a570:	strbhi	r0, [r9, ip]
   1a574:	and	r4, r4, #7
   1a578:	cmp	sl, r1
   1a57c:	add	r4, r4, #48	; 0x30
   1a580:	add	r8, r8, #3
   1a584:	bcs	1a908 <__assert_fail@plt+0x9538>
   1a588:	mov	r0, r3
   1a58c:	cmp	fp, r8
   1a590:	strbhi	r4, [r9, r8]
   1a594:	ldrb	r4, [r5, #1]!
   1a598:	add	r8, r8, #1
   1a59c:	cmp	r3, #0
   1a5a0:	bne	1a4f0 <__assert_fail@plt+0x9120>
   1a5a4:	cmp	r6, #0
   1a5a8:	bne	1a64c <__assert_fail@plt+0x927c>
   1a5ac:	eor	r6, r0, #1
   1a5b0:	and	r6, r6, r2
   1a5b4:	add	sl, sl, #1
   1a5b8:	cmp	r1, sl
   1a5bc:	uxtb	r6, r6
   1a5c0:	bls	1a674 <__assert_fail@plt+0x92a4>
   1a5c4:	cmp	r6, #0
   1a5c8:	beq	1a58c <__assert_fail@plt+0x91bc>
   1a5cc:	cmp	fp, r8
   1a5d0:	movhi	r2, #39	; 0x27
   1a5d4:	strbhi	r2, [r9, r8]
   1a5d8:	add	r2, r8, #1
   1a5dc:	cmp	fp, r2
   1a5e0:	movhi	ip, #39	; 0x27
   1a5e4:	strbhi	ip, [r9, r2]
   1a5e8:	add	r8, r8, #2
   1a5ec:	mov	r6, r3
   1a5f0:	mov	r2, r3
   1a5f4:	b	1a58c <__assert_fail@plt+0x91bc>
   1a5f8:	ldr	r3, [sp, #184]	; 0xb8
   1a5fc:	cmp	r3, #0
   1a600:	beq	19cd8 <__assert_fail@plt+0x8908>
   1a604:	lsr	r2, r4, #5
   1a608:	mov	r0, r3
   1a60c:	uxtb	r2, r2
   1a610:	and	r3, r4, #31
   1a614:	ldr	r2, [r0, r2, lsl #2]
   1a618:	lsr	r3, r2, r3
   1a61c:	tst	r3, #1
   1a620:	beq	19cd8 <__assert_fail@plt+0x8908>
   1a624:	ldr	r3, [sp, #40]	; 0x28
   1a628:	cmp	r3, #0
   1a62c:	beq	19ec4 <__assert_fail@plt+0x8af4>
   1a630:	mov	r3, r1
   1a634:	str	r3, [sp, #64]	; 0x40
   1a638:	mov	sl, r9
   1a63c:	ldr	r3, [sp, #56]	; 0x38
   1a640:	mov	r9, fp
   1a644:	ldr	r2, [sp, #64]	; 0x40
   1a648:	b	1a838 <__assert_fail@plt+0x9468>
   1a64c:	cmp	fp, r8
   1a650:	eor	r6, r0, #1
   1a654:	movhi	ip, #92	; 0x5c
   1a658:	and	r6, r6, r2
   1a65c:	add	sl, sl, #1
   1a660:	strbhi	ip, [r9, r8]
   1a664:	cmp	r1, sl
   1a668:	add	r8, r8, #1
   1a66c:	uxtb	r6, r6
   1a670:	bhi	1a5c4 <__assert_fail@plt+0x91f4>
   1a674:	str	r2, [sp, #36]	; 0x24
   1a678:	b	19cf0 <__assert_fail@plt+0x8920>
   1a67c:	ldr	r3, [sp, #24]
   1a680:	cmn	r3, #1
   1a684:	mov	r3, #0
   1a688:	str	r3, [sp, #128]	; 0x80
   1a68c:	str	r3, [sp, #132]	; 0x84
   1a690:	beq	1a984 <__assert_fail@plt+0x95b4>
   1a694:	mov	r2, r7
   1a698:	mov	r3, #0
   1a69c:	str	r7, [sp, #104]	; 0x68
   1a6a0:	str	r5, [sp, #116]	; 0x74
   1a6a4:	mov	r7, r3
   1a6a8:	mov	r5, r2
   1a6ac:	str	r4, [sp, #32]
   1a6b0:	str	r6, [sp, #108]	; 0x6c
   1a6b4:	str	r8, [sp, #112]	; 0x70
   1a6b8:	ldr	r3, [sp, #44]	; 0x2c
   1a6bc:	add	r6, sl, r7
   1a6c0:	add	r4, r3, r6
   1a6c4:	ldr	r3, [sp, #24]
   1a6c8:	mov	r1, r4
   1a6cc:	sub	r2, r3, r6
   1a6d0:	add	r0, sp, #124	; 0x7c
   1a6d4:	add	r3, sp, #128	; 0x80
   1a6d8:	bl	1ef3c <__assert_fail@plt+0xdb6c>
   1a6dc:	subs	r8, r0, #0
   1a6e0:	beq	1aa68 <__assert_fail@plt+0x9698>
   1a6e4:	cmn	r8, #1
   1a6e8:	beq	1aa40 <__assert_fail@plt+0x9670>
   1a6ec:	cmn	r8, #2
   1a6f0:	beq	1a9d8 <__assert_fail@plt+0x9608>
   1a6f4:	ldr	r3, [sp, #64]	; 0x40
   1a6f8:	cmp	r3, #0
   1a6fc:	beq	1a7bc <__assert_fail@plt+0x93ec>
   1a700:	cmp	r8, #1
   1a704:	beq	1a7bc <__assert_fail@plt+0x93ec>
   1a708:	sub	r3, r8, #1
   1a70c:	add	r6, r3, r6
   1a710:	ldr	r3, [sp, #44]	; 0x2c
   1a714:	add	r6, r3, r6
   1a718:	ldrb	r3, [r4, #1]!
   1a71c:	sub	r3, r3, #91	; 0x5b
   1a720:	cmp	r3, #33	; 0x21
   1a724:	ldrls	pc, [pc, r3, lsl #2]
   1a728:	b	1a7b4 <__assert_fail@plt+0x93e4>
   1a72c:	andeq	sl, r1, r0, lsr #16
   1a730:	andeq	sl, r1, r0, lsr #16
   1a734:			; <UNDEFINED> instruction: 0x0001a7b4
   1a738:	andeq	sl, r1, r0, lsr #16
   1a73c:			; <UNDEFINED> instruction: 0x0001a7b4
   1a740:	andeq	sl, r1, r0, lsr #16
   1a744:			; <UNDEFINED> instruction: 0x0001a7b4
   1a748:			; <UNDEFINED> instruction: 0x0001a7b4
   1a74c:			; <UNDEFINED> instruction: 0x0001a7b4
   1a750:			; <UNDEFINED> instruction: 0x0001a7b4
   1a754:			; <UNDEFINED> instruction: 0x0001a7b4
   1a758:			; <UNDEFINED> instruction: 0x0001a7b4
   1a75c:			; <UNDEFINED> instruction: 0x0001a7b4
   1a760:			; <UNDEFINED> instruction: 0x0001a7b4
   1a764:			; <UNDEFINED> instruction: 0x0001a7b4
   1a768:			; <UNDEFINED> instruction: 0x0001a7b4
   1a76c:			; <UNDEFINED> instruction: 0x0001a7b4
   1a770:			; <UNDEFINED> instruction: 0x0001a7b4
   1a774:			; <UNDEFINED> instruction: 0x0001a7b4
   1a778:			; <UNDEFINED> instruction: 0x0001a7b4
   1a77c:			; <UNDEFINED> instruction: 0x0001a7b4
   1a780:			; <UNDEFINED> instruction: 0x0001a7b4
   1a784:			; <UNDEFINED> instruction: 0x0001a7b4
   1a788:			; <UNDEFINED> instruction: 0x0001a7b4
   1a78c:			; <UNDEFINED> instruction: 0x0001a7b4
   1a790:			; <UNDEFINED> instruction: 0x0001a7b4
   1a794:			; <UNDEFINED> instruction: 0x0001a7b4
   1a798:			; <UNDEFINED> instruction: 0x0001a7b4
   1a79c:			; <UNDEFINED> instruction: 0x0001a7b4
   1a7a0:			; <UNDEFINED> instruction: 0x0001a7b4
   1a7a4:			; <UNDEFINED> instruction: 0x0001a7b4
   1a7a8:			; <UNDEFINED> instruction: 0x0001a7b4
   1a7ac:			; <UNDEFINED> instruction: 0x0001a7b4
   1a7b0:	andeq	sl, r1, r0, lsr #16
   1a7b4:	cmp	r6, r4
   1a7b8:	bne	1a718 <__assert_fail@plt+0x9348>
   1a7bc:	ldr	r0, [sp, #124]	; 0x7c
   1a7c0:	bl	1116c <iswprint@plt>
   1a7c4:	add	r7, r7, r8
   1a7c8:	cmp	r0, #0
   1a7cc:	add	r0, sp, #128	; 0x80
   1a7d0:	moveq	r5, #0
   1a7d4:	bl	11100 <mbsinit@plt>
   1a7d8:	cmp	r0, #0
   1a7dc:	beq	1a6b8 <__assert_fail@plt+0x92e8>
   1a7e0:	ldr	r4, [sp, #32]
   1a7e4:	str	r5, [sp, #32]
   1a7e8:	ldr	r3, [sp, #32]
   1a7ec:	mov	r1, r7
   1a7f0:	eor	r3, r3, #1
   1a7f4:	ldr	r7, [sp, #104]	; 0x68
   1a7f8:	ldr	r6, [sp, #108]	; 0x6c
   1a7fc:	ldr	r8, [sp, #112]	; 0x70
   1a800:	ldr	r5, [sp, #116]	; 0x74
   1a804:	uxtb	r3, r3
   1a808:	cmp	r1, #1
   1a80c:	bls	1a4c8 <__assert_fail@plt+0x90f8>
   1a810:	ldr	r2, [sp, #56]	; 0x38
   1a814:	and	r3, r3, r2
   1a818:	uxtb	r3, r3
   1a81c:	b	1a4d8 <__assert_fail@plt+0x9108>
   1a820:	mov	r3, #2
   1a824:	str	r3, [sp, #176]	; 0xb0
   1a828:	ldr	r2, [sp, #64]	; 0x40
   1a82c:	ldr	r3, [sp, #56]	; 0x38
   1a830:	mov	sl, r9
   1a834:	mov	r9, fp
   1a838:	and	r3, r3, r2
   1a83c:	tst	r3, #255	; 0xff
   1a840:	ldr	r3, [sp, #176]	; 0xb0
   1a844:	movne	r3, #4
   1a848:	str	r3, [sp, #176]	; 0xb0
   1a84c:	ldr	r3, [sp, #180]	; 0xb4
   1a850:	mov	ip, #0
   1a854:	bic	r3, r3, #2
   1a858:	str	r3, [sp, #4]
   1a85c:	ldr	r3, [sp, #192]	; 0xc0
   1a860:	ldr	r2, [sp, #44]	; 0x2c
   1a864:	str	r3, [sp, #16]
   1a868:	ldr	r3, [sp, #188]	; 0xbc
   1a86c:	mov	r1, r9
   1a870:	str	r3, [sp, #12]
   1a874:	ldr	r3, [sp, #176]	; 0xb0
   1a878:	mov	r0, sl
   1a87c:	str	r3, [sp]
   1a880:	str	ip, [sp, #8]
   1a884:	ldr	r3, [sp, #24]
   1a888:	bl	196e8 <__assert_fail@plt+0x8318>
   1a88c:	mov	fp, r0
   1a890:	mov	r0, fp
   1a894:	add	sp, sp, #140	; 0x8c
   1a898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a89c:	mov	r4, #92	; 0x5c
   1a8a0:	mov	r1, #0
   1a8a4:	mov	r3, r4
   1a8a8:	b	19e9c <__assert_fail@plt+0x8acc>
   1a8ac:	mov	r3, #0
   1a8b0:	ldr	r1, [sp, #52]	; 0x34
   1a8b4:	str	r3, [sp, #32]
   1a8b8:	mov	r4, #63	; 0x3f
   1a8bc:	b	19cbc <__assert_fail@plt+0x88ec>
   1a8c0:	cmp	fp, #0
   1a8c4:	beq	1a920 <__assert_fail@plt+0x9550>
   1a8c8:	mov	r3, #39	; 0x27
   1a8cc:	strb	r3, [r9]
   1a8d0:	mov	r3, #0
   1a8d4:	str	r3, [sp, #40]	; 0x28
   1a8d8:	mov	r3, #1
   1a8dc:	str	r3, [sp, #68]	; 0x44
   1a8e0:	ldr	r3, [pc, #448]	; 1aaa8 <__assert_fail@plt+0x96d8>
   1a8e4:	mov	r8, #1
   1a8e8:	str	r3, [sp, #72]	; 0x48
   1a8ec:	b	19ad0 <__assert_fail@plt+0x8700>
   1a8f0:	ldr	r3, [sp, #40]	; 0x28
   1a8f4:	mov	sl, r9
   1a8f8:	str	r3, [sp, #56]	; 0x38
   1a8fc:	mov	r9, fp
   1a900:	ldr	r2, [sp, #64]	; 0x40
   1a904:	b	1a838 <__assert_fail@plt+0x9468>
   1a908:	str	r2, [sp, #36]	; 0x24
   1a90c:	b	19d20 <__assert_fail@plt+0x8950>
   1a910:	mov	r1, #0
   1a914:	str	r3, [sp, #32]
   1a918:	mov	r4, #63	; 0x3f
   1a91c:	b	19cbc <__assert_fail@plt+0x88ec>
   1a920:	ldr	r3, [pc, #384]	; 1aaa8 <__assert_fail@plt+0x96d8>
   1a924:	str	r3, [sp, #72]	; 0x48
   1a928:	mov	r3, #0
   1a92c:	str	r3, [sp, #40]	; 0x28
   1a930:	mov	r3, #1
   1a934:	str	r3, [sp, #68]	; 0x44
   1a938:	mov	r8, r3
   1a93c:	b	19ad0 <__assert_fail@plt+0x8700>
   1a940:	bl	113a0 <abort@plt>
   1a944:	cmp	fp, #0
   1a948:	beq	1a9a8 <__assert_fail@plt+0x95d8>
   1a94c:	mov	r2, #1
   1a950:	mov	r3, #34	; 0x22
   1a954:	strb	r3, [r9]
   1a958:	mov	r8, r2
   1a95c:	mov	r3, r2
   1a960:	str	r2, [sp, #68]	; 0x44
   1a964:	str	r3, [sp, #56]	; 0x38
   1a968:	ldr	r3, [pc, #316]	; 1aaac <__assert_fail@plt+0x96dc>
   1a96c:	ldr	r1, [sp, #56]	; 0x38
   1a970:	str	r3, [sp, #72]	; 0x48
   1a974:	ldr	r2, [sp, #176]	; 0xb0
   1a978:	ldr	ip, [sp, #40]	; 0x28
   1a97c:	ldr	lr, [sp, #176]	; 0xb0
   1a980:	b	197b4 <__assert_fail@plt+0x83e4>
   1a984:	ldr	r0, [sp, #44]	; 0x2c
   1a988:	bl	11274 <strlen@plt>
   1a98c:	str	r0, [sp, #24]
   1a990:	b	1a694 <__assert_fail@plt+0x92c4>
   1a994:	mov	r7, #0
   1a998:	ldr	r1, [sp, #52]	; 0x34
   1a99c:	str	r3, [sp, #32]
   1a9a0:	mov	r4, #48	; 0x30
   1a9a4:	b	19cbc <__assert_fail@plt+0x88ec>
   1a9a8:	mov	r3, #1
   1a9ac:	str	r3, [sp, #68]	; 0x44
   1a9b0:	mov	r8, r3
   1a9b4:	b	1a964 <__assert_fail@plt+0x9594>
   1a9b8:	mov	r3, #2
   1a9bc:	mov	sl, r9
   1a9c0:	str	r3, [sp, #176]	; 0xb0
   1a9c4:	mov	r9, fp
   1a9c8:	ldr	r3, [sp, #56]	; 0x38
   1a9cc:	b	1a838 <__assert_fail@plt+0x9468>
   1a9d0:	ldr	r6, [sp, #48]	; 0x30
   1a9d4:	b	1a484 <__assert_fail@plt+0x90b4>
   1a9d8:	ldr	r0, [sp, #24]
   1a9dc:	mov	ip, r6
   1a9e0:	cmp	r0, ip
   1a9e4:	mov	r1, r7
   1a9e8:	mov	r2, r4
   1a9ec:	ldr	r7, [sp, #104]	; 0x68
   1a9f0:	ldr	r4, [sp, #32]
   1a9f4:	ldr	r6, [sp, #108]	; 0x6c
   1a9f8:	ldr	r8, [sp, #112]	; 0x70
   1a9fc:	ldr	r5, [sp, #116]	; 0x74
   1aa00:	bls	1aa30 <__assert_fail@plt+0x9660>
   1aa04:	ldrb	r3, [r2]
   1aa08:	cmp	r3, #0
   1aa0c:	bne	1aa20 <__assert_fail@plt+0x9650>
   1aa10:	b	1ab40 <__assert_fail@plt+0x9770>
   1aa14:	ldrb	r3, [r2, #1]!
   1aa18:	cmp	r3, #0
   1aa1c:	beq	1ab40 <__assert_fail@plt+0x9770>
   1aa20:	add	r1, r1, #1
   1aa24:	add	r3, sl, r1
   1aa28:	cmp	r0, r3
   1aa2c:	bhi	1aa14 <__assert_fail@plt+0x9644>
   1aa30:	mov	r2, #0
   1aa34:	mov	r3, r7
   1aa38:	str	r2, [sp, #32]
   1aa3c:	b	1a808 <__assert_fail@plt+0x9438>
   1aa40:	mov	r1, r7
   1aa44:	ldr	r7, [sp, #104]	; 0x68
   1aa48:	mov	r2, #0
   1aa4c:	ldr	r4, [sp, #32]
   1aa50:	ldr	r6, [sp, #108]	; 0x6c
   1aa54:	ldr	r8, [sp, #112]	; 0x70
   1aa58:	ldr	r5, [sp, #116]	; 0x74
   1aa5c:	mov	r3, r7
   1aa60:	str	r2, [sp, #32]
   1aa64:	b	1a808 <__assert_fail@plt+0x9438>
   1aa68:	mov	r3, r5
   1aa6c:	eor	r3, r3, #1
   1aa70:	ldr	r4, [sp, #32]
   1aa74:	mov	r1, r7
   1aa78:	str	r5, [sp, #32]
   1aa7c:	ldr	r7, [sp, #104]	; 0x68
   1aa80:	ldr	r6, [sp, #108]	; 0x6c
   1aa84:	ldr	r8, [sp, #112]	; 0x70
   1aa88:	ldr	r5, [sp, #116]	; 0x74
   1aa8c:	uxtb	r3, r3
   1aa90:	b	1a808 <__assert_fail@plt+0x9438>
   1aa94:	mov	sl, r9
   1aa98:	str	r3, [sp, #56]	; 0x38
   1aa9c:	mov	r9, fp
   1aaa0:	ldr	r2, [sp, #64]	; 0x40
   1aaa4:	b	1a838 <__assert_fail@plt+0x9468>
   1aaa8:	andeq	r3, r2, r8, lsr #20
   1aaac:	andeq	r3, r2, r4, lsr #20
   1aab0:	andeq	r3, r2, ip, lsr #20
   1aab4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1aab8:	ldr	r2, [sp, #44]	; 0x2c
   1aabc:	ldrb	r1, [r2, r3]
   1aac0:	sub	r2, r1, #33	; 0x21
   1aac4:	uxtb	r2, r2
   1aac8:	cmp	r2, #29
   1aacc:	bhi	1ab4c <__assert_fail@plt+0x977c>
   1aad0:	ldr	r0, [pc, #-36]	; 1aab4 <__assert_fail@plt+0x96e4>
   1aad4:	mov	ip, #1
   1aad8:	ands	r2, r0, ip, lsl r2
   1aadc:	beq	1ab6c <__assert_fail@plt+0x979c>
   1aae0:	ldr	r2, [sp, #40]	; 0x28
   1aae4:	cmp	r2, #0
   1aae8:	bne	1ac60 <__assert_fail@plt+0x9890>
   1aaec:	add	r2, r8, #1
   1aaf0:	cmp	fp, r8
   1aaf4:	strbhi	r4, [r9, r8]
   1aaf8:	cmp	fp, r2
   1aafc:	movhi	r0, #34	; 0x22
   1ab00:	strbhi	r0, [r9, r2]
   1ab04:	add	r2, r8, #2
   1ab08:	cmp	fp, r2
   1ab0c:	movhi	r0, #34	; 0x22
   1ab10:	strbhi	r0, [r9, r2]
   1ab14:	add	r2, r8, #3
   1ab18:	cmp	fp, r2
   1ab1c:	mov	sl, r3
   1ab20:	ldr	r3, [sp, #40]	; 0x28
   1ab24:	movhi	r0, #63	; 0x3f
   1ab28:	mov	r4, r1
   1ab2c:	strbhi	r0, [r9, r2]
   1ab30:	add	r8, r8, #4
   1ab34:	mov	r1, r3
   1ab38:	str	r3, [sp, #32]
   1ab3c:	b	19cbc <__assert_fail@plt+0x88ec>
   1ab40:	str	r3, [sp, #32]
   1ab44:	mov	r3, r7
   1ab48:	b	1a808 <__assert_fail@plt+0x9438>
   1ab4c:	mov	r1, #0
   1ab50:	str	r1, [sp, #32]
   1ab54:	b	19cbc <__assert_fail@plt+0x88ec>
   1ab58:	mov	sl, r9
   1ab5c:	ldr	r3, [sp, #56]	; 0x38
   1ab60:	mov	r9, fp
   1ab64:	ldr	r2, [sp, #64]	; 0x40
   1ab68:	b	1a838 <__assert_fail@plt+0x9468>
   1ab6c:	str	r2, [sp, #32]
   1ab70:	mov	r1, #0
   1ab74:	b	19cbc <__assert_fail@plt+0x88ec>
   1ab78:	ldr	r2, [sp, #76]	; 0x4c
   1ab7c:	mov	sl, r9
   1ab80:	mov	r9, fp
   1ab84:	mov	fp, r8
   1ab88:	ldr	r1, [sp, #72]	; 0x48
   1ab8c:	cmp	r1, #0
   1ab90:	moveq	r3, #0
   1ab94:	andne	r3, r2, #1
   1ab98:	cmp	r3, #0
   1ab9c:	beq	1abc8 <__assert_fail@plt+0x97f8>
   1aba0:	ldrb	r3, [r1]
   1aba4:	cmp	r3, #0
   1aba8:	beq	1abc8 <__assert_fail@plt+0x97f8>
   1abac:	mov	r2, r1
   1abb0:	cmp	r9, fp
   1abb4:	strbhi	r3, [sl, fp]
   1abb8:	ldrb	r3, [r2, #1]!
   1abbc:	add	fp, fp, #1
   1abc0:	cmp	r3, #0
   1abc4:	bne	1abb0 <__assert_fail@plt+0x97e0>
   1abc8:	cmp	r9, fp
   1abcc:	movhi	r3, #0
   1abd0:	strbhi	r3, [sl, fp]
   1abd4:	b	1a890 <__assert_fail@plt+0x94c0>
   1abd8:	ldr	r3, [sp, #192]	; 0xc0
   1abdc:	mov	ip, #5
   1abe0:	str	r3, [sp, #16]
   1abe4:	ldr	r3, [sp, #188]	; 0xbc
   1abe8:	ldr	r2, [sp, #44]	; 0x2c
   1abec:	str	r3, [sp, #12]
   1abf0:	ldr	r3, [sp, #184]	; 0xb8
   1abf4:	ldr	r1, [sp, #84]	; 0x54
   1abf8:	str	r3, [sp, #8]
   1abfc:	ldr	r3, [sp, #180]	; 0xb4
   1ac00:	mov	r0, r9
   1ac04:	str	r3, [sp, #4]
   1ac08:	str	ip, [sp]
   1ac0c:	ldr	r3, [sp, #24]
   1ac10:	bl	196e8 <__assert_fail@plt+0x8318>
   1ac14:	mov	fp, r0
   1ac18:	b	1a890 <__assert_fail@plt+0x94c0>
   1ac1c:	mov	sl, r9
   1ac20:	mov	r9, fp
   1ac24:	mov	fp, r8
   1ac28:	b	1ab88 <__assert_fail@plt+0x97b8>
   1ac2c:	ldr	r1, [sp, #176]	; 0xb0
   1ac30:	bl	195c8 <__assert_fail@plt+0x81f8>
   1ac34:	str	r0, [sp, #192]	; 0xc0
   1ac38:	b	19ba4 <__assert_fail@plt+0x87d4>
   1ac3c:	ldr	r1, [sp, #176]	; 0xb0
   1ac40:	bl	195c8 <__assert_fail@plt+0x81f8>
   1ac44:	str	r0, [sp, #188]	; 0xbc
   1ac48:	b	19b84 <__assert_fail@plt+0x87b4>
   1ac4c:	mov	sl, r9
   1ac50:	mov	r2, r3
   1ac54:	mov	r9, fp
   1ac58:	mov	fp, r8
   1ac5c:	b	1ab88 <__assert_fail@plt+0x97b8>
   1ac60:	mov	sl, r9
   1ac64:	mov	r9, fp
   1ac68:	b	1a84c <__assert_fail@plt+0x947c>
   1ac6c:	push	{r4, r5, r6, lr}
   1ac70:	mov	r5, r0
   1ac74:	bl	11298 <__errno_location@plt>
   1ac78:	cmp	r5, #0
   1ac7c:	mov	r1, #48	; 0x30
   1ac80:	mov	r4, r0
   1ac84:	ldr	r0, [pc, #16]	; 1ac9c <__assert_fail@plt+0x98cc>
   1ac88:	ldr	r6, [r4]
   1ac8c:	movne	r0, r5
   1ac90:	bl	1eaa8 <__assert_fail@plt+0xd6d8>
   1ac94:	str	r6, [r4]
   1ac98:	pop	{r4, r5, r6, pc}
   1ac9c:	ldrdeq	r4, [r3], -ip
   1aca0:	ldr	r3, [pc, #12]	; 1acb4 <__assert_fail@plt+0x98e4>
   1aca4:	cmp	r0, #0
   1aca8:	moveq	r0, r3
   1acac:	ldr	r0, [r0]
   1acb0:	bx	lr
   1acb4:	ldrdeq	r4, [r3], -ip
   1acb8:	ldr	r3, [pc, #12]	; 1accc <__assert_fail@plt+0x98fc>
   1acbc:	cmp	r0, #0
   1acc0:	moveq	r0, r3
   1acc4:	str	r1, [r0]
   1acc8:	bx	lr
   1accc:	ldrdeq	r4, [r3], -ip
   1acd0:	ldr	r3, [pc, #52]	; 1ad0c <__assert_fail@plt+0x993c>
   1acd4:	cmp	r0, #0
   1acd8:	moveq	r0, r3
   1acdc:	add	r3, r0, #8
   1ace0:	push	{lr}		; (str lr, [sp, #-4]!)
   1ace4:	lsr	lr, r1, #5
   1ace8:	and	r1, r1, #31
   1acec:	ldr	ip, [r3, lr, lsl #2]
   1acf0:	lsr	r0, ip, r1
   1acf4:	eor	r2, r2, r0
   1acf8:	and	r2, r2, #1
   1acfc:	and	r0, r0, #1
   1ad00:	eor	r1, ip, r2, lsl r1
   1ad04:	str	r1, [r3, lr, lsl #2]
   1ad08:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad0c:	ldrdeq	r4, [r3], -ip
   1ad10:	ldr	r3, [pc, #16]	; 1ad28 <__assert_fail@plt+0x9958>
   1ad14:	cmp	r0, #0
   1ad18:	movne	r3, r0
   1ad1c:	ldr	r0, [r3, #4]
   1ad20:	str	r1, [r3, #4]
   1ad24:	bx	lr
   1ad28:	ldrdeq	r4, [r3], -ip
   1ad2c:	ldr	r3, [pc, #44]	; 1ad60 <__assert_fail@plt+0x9990>
   1ad30:	cmp	r0, #0
   1ad34:	moveq	r0, r3
   1ad38:	mov	ip, #10
   1ad3c:	cmp	r2, #0
   1ad40:	cmpne	r1, #0
   1ad44:	str	ip, [r0]
   1ad48:	beq	1ad58 <__assert_fail@plt+0x9988>
   1ad4c:	str	r1, [r0, #40]	; 0x28
   1ad50:	str	r2, [r0, #44]	; 0x2c
   1ad54:	bx	lr
   1ad58:	push	{r4, lr}
   1ad5c:	bl	113a0 <abort@plt>
   1ad60:	ldrdeq	r4, [r3], -ip
   1ad64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad68:	sub	sp, sp, #24
   1ad6c:	ldr	ip, [pc, #108]	; 1ade0 <__assert_fail@plt+0x9a10>
   1ad70:	ldr	r4, [sp, #56]	; 0x38
   1ad74:	mov	r9, r2
   1ad78:	cmp	r4, #0
   1ad7c:	moveq	r4, ip
   1ad80:	mov	sl, r3
   1ad84:	mov	r7, r0
   1ad88:	mov	r8, r1
   1ad8c:	bl	11298 <__errno_location@plt>
   1ad90:	ldr	r3, [r4, #44]	; 0x2c
   1ad94:	mov	r1, r8
   1ad98:	ldr	r6, [r0]
   1ad9c:	str	r3, [sp, #16]
   1ada0:	ldr	r2, [r4, #40]	; 0x28
   1ada4:	add	r3, r4, #8
   1ada8:	str	r3, [sp, #8]
   1adac:	str	r2, [sp, #12]
   1adb0:	ldr	r2, [r4, #4]
   1adb4:	mov	r5, r0
   1adb8:	str	r2, [sp, #4]
   1adbc:	ldr	ip, [r4]
   1adc0:	mov	r3, sl
   1adc4:	mov	r2, r9
   1adc8:	mov	r0, r7
   1adcc:	str	ip, [sp]
   1add0:	bl	196e8 <__assert_fail@plt+0x8318>
   1add4:	str	r6, [r5]
   1add8:	add	sp, sp, #24
   1addc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ade0:	ldrdeq	r4, [r3], -ip
   1ade4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ade8:	cmp	r2, #0
   1adec:	sub	sp, sp, #36	; 0x24
   1adf0:	ldr	r4, [pc, #164]	; 1ae9c <__assert_fail@plt+0x9acc>
   1adf4:	mov	r8, r1
   1adf8:	movne	r4, r2
   1adfc:	mov	r7, r0
   1ae00:	bl	11298 <__errno_location@plt>
   1ae04:	ldr	r3, [r4, #44]	; 0x2c
   1ae08:	ldr	r5, [r4, #4]
   1ae0c:	add	r9, r4, #8
   1ae10:	orr	r5, r5, #1
   1ae14:	mov	r1, #0
   1ae18:	mov	r2, r7
   1ae1c:	ldr	fp, [r0]
   1ae20:	str	r3, [sp, #16]
   1ae24:	ldr	r3, [r4, #40]	; 0x28
   1ae28:	stmib	sp, {r5, r9}
   1ae2c:	str	r3, [sp, #12]
   1ae30:	ldr	r3, [r4]
   1ae34:	mov	r6, r0
   1ae38:	str	r3, [sp]
   1ae3c:	mov	r0, r1
   1ae40:	mov	r3, r8
   1ae44:	bl	196e8 <__assert_fail@plt+0x8318>
   1ae48:	add	r1, r0, #1
   1ae4c:	mov	r0, r1
   1ae50:	str	r1, [sp, #28]
   1ae54:	bl	1e564 <__assert_fail@plt+0xd194>
   1ae58:	ldr	r3, [r4, #44]	; 0x2c
   1ae5c:	ldr	r1, [sp, #28]
   1ae60:	str	r3, [sp, #16]
   1ae64:	ldr	r3, [r4, #40]	; 0x28
   1ae68:	str	r5, [sp, #4]
   1ae6c:	str	r3, [sp, #12]
   1ae70:	str	r9, [sp, #8]
   1ae74:	ldr	ip, [r4]
   1ae78:	mov	r3, r8
   1ae7c:	mov	r2, r7
   1ae80:	str	ip, [sp]
   1ae84:	mov	sl, r0
   1ae88:	bl	196e8 <__assert_fail@plt+0x8318>
   1ae8c:	mov	r0, sl
   1ae90:	str	fp, [r6]
   1ae94:	add	sp, sp, #36	; 0x24
   1ae98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae9c:	ldrdeq	r4, [r3], -ip
   1aea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aea4:	cmp	r3, #0
   1aea8:	sub	sp, sp, #44	; 0x2c
   1aeac:	ldr	r4, [pc, #192]	; 1af74 <__assert_fail@plt+0x9ba4>
   1aeb0:	mov	r6, r2
   1aeb4:	movne	r4, r3
   1aeb8:	mov	r9, r1
   1aebc:	mov	r8, r0
   1aec0:	bl	11298 <__errno_location@plt>
   1aec4:	ldr	r3, [r4, #44]	; 0x2c
   1aec8:	ldr	r5, [r4, #4]
   1aecc:	add	sl, r4, #8
   1aed0:	cmp	r6, #0
   1aed4:	orreq	r5, r5, #1
   1aed8:	mov	r1, #0
   1aedc:	ldr	r2, [r0]
   1aee0:	str	r3, [sp, #16]
   1aee4:	ldr	r3, [r4, #40]	; 0x28
   1aee8:	stmib	sp, {r5, sl}
   1aeec:	str	r3, [sp, #12]
   1aef0:	ldr	r3, [r4]
   1aef4:	mov	r7, r0
   1aef8:	str	r2, [sp, #28]
   1aefc:	str	r3, [sp]
   1af00:	mov	r2, r8
   1af04:	mov	r3, r9
   1af08:	mov	r0, r1
   1af0c:	bl	196e8 <__assert_fail@plt+0x8318>
   1af10:	add	r1, r0, #1
   1af14:	mov	fp, r0
   1af18:	mov	r0, r1
   1af1c:	str	r1, [sp, #36]	; 0x24
   1af20:	bl	1e564 <__assert_fail@plt+0xd194>
   1af24:	ldr	r3, [r4, #44]	; 0x2c
   1af28:	mov	r2, r8
   1af2c:	str	r3, [sp, #16]
   1af30:	ldr	r3, [r4, #40]	; 0x28
   1af34:	str	r5, [sp, #4]
   1af38:	str	r3, [sp, #12]
   1af3c:	str	sl, [sp, #8]
   1af40:	ldr	ip, [r4]
   1af44:	ldr	r1, [sp, #36]	; 0x24
   1af48:	mov	r3, r9
   1af4c:	str	ip, [sp]
   1af50:	str	r0, [sp, #32]
   1af54:	bl	196e8 <__assert_fail@plt+0x8318>
   1af58:	ldr	r2, [sp, #28]
   1af5c:	cmp	r6, #0
   1af60:	str	r2, [r7]
   1af64:	ldr	r0, [sp, #32]
   1af68:	strne	fp, [r6]
   1af6c:	add	sp, sp, #44	; 0x2c
   1af70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af74:	ldrdeq	r4, [r3], -ip
   1af78:	push	{r4, r5, r6, r7, r8, lr}
   1af7c:	ldr	r6, [pc, #116]	; 1aff8 <__assert_fail@plt+0x9c28>
   1af80:	ldr	r3, [r6, #4]
   1af84:	ldr	r7, [r6]
   1af88:	cmp	r3, #1
   1af8c:	movgt	r5, r7
   1af90:	movgt	r4, #1
   1af94:	ble	1afb4 <__assert_fail@plt+0x9be4>
   1af98:	ldr	r0, [r5, #12]
   1af9c:	bl	1ee10 <__assert_fail@plt+0xda40>
   1afa0:	ldr	r3, [r6, #4]
   1afa4:	add	r4, r4, #1
   1afa8:	cmp	r3, r4
   1afac:	add	r5, r5, #8
   1afb0:	bgt	1af98 <__assert_fail@plt+0x9bc8>
   1afb4:	ldr	r0, [r7, #4]
   1afb8:	ldr	r4, [pc, #60]	; 1affc <__assert_fail@plt+0x9c2c>
   1afbc:	cmp	r0, r4
   1afc0:	beq	1afd4 <__assert_fail@plt+0x9c04>
   1afc4:	bl	1ee10 <__assert_fail@plt+0xda40>
   1afc8:	mov	r3, #256	; 0x100
   1afcc:	str	r4, [r6, #12]
   1afd0:	str	r3, [r6, #8]
   1afd4:	ldr	r4, [pc, #36]	; 1b000 <__assert_fail@plt+0x9c30>
   1afd8:	cmp	r7, r4
   1afdc:	beq	1afec <__assert_fail@plt+0x9c1c>
   1afe0:	mov	r0, r7
   1afe4:	bl	1ee10 <__assert_fail@plt+0xda40>
   1afe8:	str	r4, [r6]
   1afec:	mov	r3, #1
   1aff0:	str	r3, [r6, #4]
   1aff4:	pop	{r4, r5, r6, r7, r8, pc}
   1aff8:	andeq	r4, r3, ip, asr #2
   1affc:	andeq	r4, r3, ip, lsl #4
   1b000:	andeq	r4, r3, r4, asr r1
   1b004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b008:	sub	sp, sp, #44	; 0x2c
   1b00c:	mov	r5, r0
   1b010:	mov	sl, r1
   1b014:	bl	11298 <__errno_location@plt>
   1b018:	ldr	r4, [pc, #400]	; 1b1b0 <__assert_fail@plt+0x9de0>
   1b01c:	cmn	r5, #-2147483647	; 0x80000001
   1b020:	ldr	r6, [r4]
   1b024:	mov	r8, r0
   1b028:	movne	r0, #0
   1b02c:	moveq	r0, #1
   1b030:	ldr	r3, [r8]
   1b034:	orrs	r0, r0, r5, lsr #31
   1b038:	str	r3, [sp, #24]
   1b03c:	bne	1b1ac <__assert_fail@plt+0x9ddc>
   1b040:	ldr	r2, [r4, #4]
   1b044:	cmp	r5, r2
   1b048:	blt	1b0a8 <__assert_fail@plt+0x9cd8>
   1b04c:	add	r7, r4, #8
   1b050:	cmp	r6, r7
   1b054:	str	r2, [sp, #36]	; 0x24
   1b058:	beq	1b17c <__assert_fail@plt+0x9dac>
   1b05c:	mov	r3, #8
   1b060:	sub	r2, r5, r2
   1b064:	mov	r0, r6
   1b068:	str	r3, [sp]
   1b06c:	add	r2, r2, #1
   1b070:	mvn	r3, #-2147483648	; 0x80000000
   1b074:	add	r1, sp, #36	; 0x24
   1b078:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b07c:	mov	r6, r0
   1b080:	str	r0, [r4]
   1b084:	ldr	r0, [r4, #4]
   1b088:	ldr	r2, [sp, #36]	; 0x24
   1b08c:	mov	r1, #0
   1b090:	sub	r2, r2, r0
   1b094:	add	r0, r6, r0, lsl #3
   1b098:	lsl	r2, r2, #3
   1b09c:	bl	112c8 <memset@plt>
   1b0a0:	ldr	r3, [sp, #36]	; 0x24
   1b0a4:	str	r3, [r4, #4]
   1b0a8:	ldr	r4, [pc, #260]	; 1b1b4 <__assert_fail@plt+0x9de4>
   1b0ac:	add	fp, r6, r5, lsl #3
   1b0b0:	ldr	r9, [r6, r5, lsl #3]
   1b0b4:	ldr	r0, [r4, #4]
   1b0b8:	ldr	r3, [r4]
   1b0bc:	ldr	r7, [fp, #4]
   1b0c0:	ldr	r1, [r4, #44]	; 0x2c
   1b0c4:	ldr	r2, [r4, #40]	; 0x28
   1b0c8:	orr	r0, r0, #1
   1b0cc:	str	r3, [sp]
   1b0d0:	add	r3, r4, #8
   1b0d4:	str	r0, [sp, #28]
   1b0d8:	str	r0, [sp, #4]
   1b0dc:	str	r1, [sp, #16]
   1b0e0:	str	r2, [sp, #12]
   1b0e4:	str	r3, [sp, #8]
   1b0e8:	mov	r0, r7
   1b0ec:	mov	r1, r9
   1b0f0:	mvn	r3, #0
   1b0f4:	mov	r2, sl
   1b0f8:	bl	196e8 <__assert_fail@plt+0x8318>
   1b0fc:	cmp	r9, r0
   1b100:	bhi	1b168 <__assert_fail@plt+0x9d98>
   1b104:	add	r3, r4, #48	; 0x30
   1b108:	add	r9, r0, #1
   1b10c:	cmp	r7, r3
   1b110:	str	r9, [r6, r5, lsl #3]
   1b114:	beq	1b120 <__assert_fail@plt+0x9d50>
   1b118:	mov	r0, r7
   1b11c:	bl	1ee10 <__assert_fail@plt+0xda40>
   1b120:	mov	r0, r9
   1b124:	bl	1e564 <__assert_fail@plt+0xd194>
   1b128:	ldr	ip, [r4, #44]	; 0x2c
   1b12c:	ldr	r3, [r4]
   1b130:	ldr	lr, [r4, #40]	; 0x28
   1b134:	ldr	r4, [pc, #124]	; 1b1b8 <__assert_fail@plt+0x9de8>
   1b138:	mov	r2, sl
   1b13c:	mov	r1, r9
   1b140:	str	r0, [fp, #4]
   1b144:	str	r4, [sp, #8]
   1b148:	ldr	r4, [sp, #28]
   1b14c:	str	r3, [sp]
   1b150:	str	r4, [sp, #4]
   1b154:	str	ip, [sp, #16]
   1b158:	str	lr, [sp, #12]
   1b15c:	mvn	r3, #0
   1b160:	mov	r7, r0
   1b164:	bl	196e8 <__assert_fail@plt+0x8318>
   1b168:	ldr	r3, [sp, #24]
   1b16c:	mov	r0, r7
   1b170:	str	r3, [r8]
   1b174:	add	sp, sp, #44	; 0x2c
   1b178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b17c:	mov	r3, #8
   1b180:	sub	r2, r5, r2
   1b184:	str	r3, [sp]
   1b188:	add	r1, sp, #36	; 0x24
   1b18c:	add	r2, r2, #1
   1b190:	mvn	r3, #-2147483648	; 0x80000000
   1b194:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b198:	mov	r6, r0
   1b19c:	ldm	r7, {r0, r1}
   1b1a0:	str	r6, [r4]
   1b1a4:	stm	r6, {r0, r1}
   1b1a8:	b	1b084 <__assert_fail@plt+0x9cb4>
   1b1ac:	bl	113a0 <abort@plt>
   1b1b0:	andeq	r4, r3, ip, asr #2
   1b1b4:	ldrdeq	r4, [r3], -ip
   1b1b8:	andeq	r4, r3, r4, ror #3
   1b1bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1c0:	sub	sp, sp, #52	; 0x34
   1b1c4:	mov	r5, r0
   1b1c8:	mov	sl, r1
   1b1cc:	mov	fp, r2
   1b1d0:	bl	11298 <__errno_location@plt>
   1b1d4:	ldr	r4, [pc, #408]	; 1b374 <__assert_fail@plt+0x9fa4>
   1b1d8:	cmn	r5, #-2147483647	; 0x80000001
   1b1dc:	ldr	r6, [r4]
   1b1e0:	mov	r8, r0
   1b1e4:	movne	r0, #0
   1b1e8:	moveq	r0, #1
   1b1ec:	ldr	r3, [r8]
   1b1f0:	orrs	r0, r0, r5, lsr #31
   1b1f4:	str	r3, [sp, #28]
   1b1f8:	bne	1b370 <__assert_fail@plt+0x9fa0>
   1b1fc:	ldr	r2, [r4, #4]
   1b200:	cmp	r5, r2
   1b204:	blt	1b264 <__assert_fail@plt+0x9e94>
   1b208:	add	r7, r4, #8
   1b20c:	cmp	r6, r7
   1b210:	str	r2, [sp, #44]	; 0x2c
   1b214:	beq	1b340 <__assert_fail@plt+0x9f70>
   1b218:	mov	r3, #8
   1b21c:	sub	r2, r5, r2
   1b220:	mov	r0, r6
   1b224:	str	r3, [sp]
   1b228:	add	r2, r2, #1
   1b22c:	mvn	r3, #-2147483648	; 0x80000000
   1b230:	add	r1, sp, #44	; 0x2c
   1b234:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b238:	mov	r6, r0
   1b23c:	str	r0, [r4]
   1b240:	ldr	r0, [r4, #4]
   1b244:	ldr	r2, [sp, #44]	; 0x2c
   1b248:	mov	r1, #0
   1b24c:	sub	r2, r2, r0
   1b250:	add	r0, r6, r0, lsl #3
   1b254:	lsl	r2, r2, #3
   1b258:	bl	112c8 <memset@plt>
   1b25c:	ldr	r3, [sp, #44]	; 0x2c
   1b260:	str	r3, [r4, #4]
   1b264:	ldr	r4, [pc, #268]	; 1b378 <__assert_fail@plt+0x9fa8>
   1b268:	add	r3, r6, r5, lsl #3
   1b26c:	str	r3, [sp, #32]
   1b270:	ldr	r7, [r3, #4]
   1b274:	ldr	r0, [r4, #4]
   1b278:	ldr	r3, [r4]
   1b27c:	ldr	r9, [r6, r5, lsl #3]
   1b280:	ldr	r1, [r4, #44]	; 0x2c
   1b284:	ldr	r2, [r4, #40]	; 0x28
   1b288:	orr	r0, r0, #1
   1b28c:	str	r3, [sp]
   1b290:	add	r3, r4, #8
   1b294:	str	r0, [sp, #36]	; 0x24
   1b298:	str	r0, [sp, #4]
   1b29c:	str	r1, [sp, #16]
   1b2a0:	str	r2, [sp, #12]
   1b2a4:	str	r3, [sp, #8]
   1b2a8:	mov	r0, r7
   1b2ac:	mov	r1, r9
   1b2b0:	mov	r3, fp
   1b2b4:	mov	r2, sl
   1b2b8:	bl	196e8 <__assert_fail@plt+0x8318>
   1b2bc:	cmp	r9, r0
   1b2c0:	bhi	1b32c <__assert_fail@plt+0x9f5c>
   1b2c4:	add	r3, r4, #48	; 0x30
   1b2c8:	add	r9, r0, #1
   1b2cc:	cmp	r7, r3
   1b2d0:	str	r9, [r6, r5, lsl #3]
   1b2d4:	beq	1b2e0 <__assert_fail@plt+0x9f10>
   1b2d8:	mov	r0, r7
   1b2dc:	bl	1ee10 <__assert_fail@plt+0xda40>
   1b2e0:	mov	r0, r9
   1b2e4:	bl	1e564 <__assert_fail@plt+0xd194>
   1b2e8:	ldr	ip, [sp, #32]
   1b2ec:	ldr	lr, [r4, #44]	; 0x2c
   1b2f0:	ldr	r5, [r4, #40]	; 0x28
   1b2f4:	mov	r3, fp
   1b2f8:	mov	r2, sl
   1b2fc:	mov	r1, r9
   1b300:	str	r0, [ip, #4]
   1b304:	ldr	ip, [r4]
   1b308:	ldr	r4, [pc, #108]	; 1b37c <__assert_fail@plt+0x9fac>
   1b30c:	str	lr, [sp, #16]
   1b310:	str	r4, [sp, #8]
   1b314:	ldr	r4, [sp, #36]	; 0x24
   1b318:	str	r5, [sp, #12]
   1b31c:	str	r4, [sp, #4]
   1b320:	str	ip, [sp]
   1b324:	mov	r7, r0
   1b328:	bl	196e8 <__assert_fail@plt+0x8318>
   1b32c:	ldr	r3, [sp, #28]
   1b330:	mov	r0, r7
   1b334:	str	r3, [r8]
   1b338:	add	sp, sp, #52	; 0x34
   1b33c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b340:	mov	r3, #8
   1b344:	sub	r2, r5, r2
   1b348:	str	r3, [sp]
   1b34c:	add	r1, sp, #44	; 0x2c
   1b350:	add	r2, r2, #1
   1b354:	mvn	r3, #-2147483648	; 0x80000000
   1b358:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b35c:	mov	r6, r0
   1b360:	ldm	r7, {r0, r1}
   1b364:	str	r6, [r4]
   1b368:	stm	r6, {r0, r1}
   1b36c:	b	1b240 <__assert_fail@plt+0x9e70>
   1b370:	bl	113a0 <abort@plt>
   1b374:	andeq	r4, r3, ip, asr #2
   1b378:	ldrdeq	r4, [r3], -ip
   1b37c:	andeq	r4, r3, r4, ror #3
   1b380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b384:	sub	sp, sp, #44	; 0x2c
   1b388:	mov	sl, r0
   1b38c:	bl	11298 <__errno_location@plt>
   1b390:	ldr	r4, [pc, #352]	; 1b4f8 <__assert_fail@plt+0xa128>
   1b394:	ldr	r2, [r4, #4]
   1b398:	ldr	r5, [r4]
   1b39c:	cmp	r2, #0
   1b3a0:	ldr	r3, [r0]
   1b3a4:	mov	r8, r0
   1b3a8:	str	r3, [sp, #28]
   1b3ac:	bgt	1b408 <__assert_fail@plt+0xa038>
   1b3b0:	add	r6, r4, #8
   1b3b4:	cmp	r5, r6
   1b3b8:	str	r2, [sp, #36]	; 0x24
   1b3bc:	beq	1b4c8 <__assert_fail@plt+0xa0f8>
   1b3c0:	mov	r3, #8
   1b3c4:	mov	r0, r5
   1b3c8:	str	r3, [sp]
   1b3cc:	rsb	r2, r2, #1
   1b3d0:	mvn	r3, #-2147483648	; 0x80000000
   1b3d4:	add	r1, sp, #36	; 0x24
   1b3d8:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b3dc:	mov	r5, r0
   1b3e0:	str	r0, [r4]
   1b3e4:	ldr	r0, [r4, #4]
   1b3e8:	ldr	r2, [sp, #36]	; 0x24
   1b3ec:	mov	r1, #0
   1b3f0:	sub	r2, r2, r0
   1b3f4:	add	r0, r5, r0, lsl #3
   1b3f8:	lsl	r2, r2, #3
   1b3fc:	bl	112c8 <memset@plt>
   1b400:	ldr	r3, [sp, #36]	; 0x24
   1b404:	str	r3, [r4, #4]
   1b408:	ldr	r4, [pc, #236]	; 1b4fc <__assert_fail@plt+0xa12c>
   1b40c:	ldr	r9, [r5]
   1b410:	ldr	r6, [r5, #4]
   1b414:	ldr	r7, [r4, #4]
   1b418:	ldr	r1, [r4, #44]	; 0x2c
   1b41c:	ldr	r2, [r4, #40]	; 0x28
   1b420:	ldr	r3, [r4]
   1b424:	orr	r7, r7, #1
   1b428:	add	fp, r4, #8
   1b42c:	str	r1, [sp, #16]
   1b430:	str	r2, [sp, #12]
   1b434:	str	r3, [sp]
   1b438:	str	r7, [sp, #4]
   1b43c:	str	fp, [sp, #8]
   1b440:	mov	r1, r9
   1b444:	mov	r0, r6
   1b448:	mvn	r3, #0
   1b44c:	mov	r2, sl
   1b450:	bl	196e8 <__assert_fail@plt+0x8318>
   1b454:	cmp	r9, r0
   1b458:	bhi	1b4b4 <__assert_fail@plt+0xa0e4>
   1b45c:	add	r3, r4, #48	; 0x30
   1b460:	add	r9, r0, #1
   1b464:	cmp	r6, r3
   1b468:	str	r9, [r5]
   1b46c:	beq	1b478 <__assert_fail@plt+0xa0a8>
   1b470:	mov	r0, r6
   1b474:	bl	1ee10 <__assert_fail@plt+0xda40>
   1b478:	mov	r0, r9
   1b47c:	bl	1e564 <__assert_fail@plt+0xd194>
   1b480:	ldr	ip, [r4, #44]	; 0x2c
   1b484:	ldr	r3, [r4]
   1b488:	ldr	lr, [r4, #40]	; 0x28
   1b48c:	mov	r2, sl
   1b490:	mov	r1, r9
   1b494:	str	r0, [r5, #4]
   1b498:	str	r3, [sp]
   1b49c:	stmib	sp, {r7, fp}
   1b4a0:	str	ip, [sp, #16]
   1b4a4:	str	lr, [sp, #12]
   1b4a8:	mvn	r3, #0
   1b4ac:	mov	r6, r0
   1b4b0:	bl	196e8 <__assert_fail@plt+0x8318>
   1b4b4:	ldr	r3, [sp, #28]
   1b4b8:	mov	r0, r6
   1b4bc:	str	r3, [r8]
   1b4c0:	add	sp, sp, #44	; 0x2c
   1b4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4c8:	mov	r3, #8
   1b4cc:	str	r3, [sp]
   1b4d0:	add	r1, sp, #36	; 0x24
   1b4d4:	rsb	r2, r2, #1
   1b4d8:	mvn	r3, #-2147483648	; 0x80000000
   1b4dc:	mov	r0, #0
   1b4e0:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b4e4:	mov	r5, r0
   1b4e8:	ldm	r6, {r0, r1}
   1b4ec:	str	r5, [r4]
   1b4f0:	stm	r5, {r0, r1}
   1b4f4:	b	1b3e4 <__assert_fail@plt+0xa014>
   1b4f8:	andeq	r4, r3, ip, asr #2
   1b4fc:	ldrdeq	r4, [r3], -ip
   1b500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b504:	sub	sp, sp, #44	; 0x2c
   1b508:	mov	r9, r0
   1b50c:	mov	sl, r1
   1b510:	bl	11298 <__errno_location@plt>
   1b514:	ldr	r4, [pc, #364]	; 1b688 <__assert_fail@plt+0xa2b8>
   1b518:	ldr	r2, [r4, #4]
   1b51c:	ldr	r5, [r4]
   1b520:	cmp	r2, #0
   1b524:	ldr	r3, [r0]
   1b528:	mov	r7, r0
   1b52c:	str	r3, [sp, #24]
   1b530:	bgt	1b58c <__assert_fail@plt+0xa1bc>
   1b534:	add	r6, r4, #8
   1b538:	cmp	r5, r6
   1b53c:	str	r2, [sp, #36]	; 0x24
   1b540:	beq	1b658 <__assert_fail@plt+0xa288>
   1b544:	mov	r3, #8
   1b548:	mov	r0, r5
   1b54c:	str	r3, [sp]
   1b550:	rsb	r2, r2, #1
   1b554:	mvn	r3, #-2147483648	; 0x80000000
   1b558:	add	r1, sp, #36	; 0x24
   1b55c:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b560:	mov	r5, r0
   1b564:	str	r0, [r4]
   1b568:	ldr	r0, [r4, #4]
   1b56c:	ldr	r2, [sp, #36]	; 0x24
   1b570:	mov	r1, #0
   1b574:	sub	r2, r2, r0
   1b578:	add	r0, r5, r0, lsl #3
   1b57c:	lsl	r2, r2, #3
   1b580:	bl	112c8 <memset@plt>
   1b584:	ldr	r3, [sp, #36]	; 0x24
   1b588:	str	r3, [r4, #4]
   1b58c:	ldr	r4, [pc, #248]	; 1b68c <__assert_fail@plt+0xa2bc>
   1b590:	ldr	r8, [r5]
   1b594:	ldr	r6, [r5, #4]
   1b598:	ldr	r0, [r4, #4]
   1b59c:	ldr	r1, [r4, #44]	; 0x2c
   1b5a0:	ldr	r2, [r4, #40]	; 0x28
   1b5a4:	ldr	r3, [r4]
   1b5a8:	orr	r0, r0, #1
   1b5ac:	add	fp, r4, #8
   1b5b0:	str	r0, [sp, #28]
   1b5b4:	str	r0, [sp, #4]
   1b5b8:	str	r1, [sp, #16]
   1b5bc:	str	r2, [sp, #12]
   1b5c0:	str	r3, [sp]
   1b5c4:	str	fp, [sp, #8]
   1b5c8:	mov	r1, r8
   1b5cc:	mov	r0, r6
   1b5d0:	mov	r3, sl
   1b5d4:	mov	r2, r9
   1b5d8:	bl	196e8 <__assert_fail@plt+0x8318>
   1b5dc:	cmp	r8, r0
   1b5e0:	bhi	1b644 <__assert_fail@plt+0xa274>
   1b5e4:	add	r3, r4, #48	; 0x30
   1b5e8:	add	r8, r0, #1
   1b5ec:	cmp	r6, r3
   1b5f0:	str	r8, [r5]
   1b5f4:	beq	1b600 <__assert_fail@plt+0xa230>
   1b5f8:	mov	r0, r6
   1b5fc:	bl	1ee10 <__assert_fail@plt+0xda40>
   1b600:	mov	r0, r8
   1b604:	bl	1e564 <__assert_fail@plt+0xd194>
   1b608:	ldr	lr, [r4, #44]	; 0x2c
   1b60c:	ldr	ip, [r4]
   1b610:	mov	r3, sl
   1b614:	mov	r2, r9
   1b618:	mov	r1, r8
   1b61c:	str	r0, [r5, #4]
   1b620:	ldr	r5, [r4, #40]	; 0x28
   1b624:	ldr	r4, [sp, #28]
   1b628:	str	fp, [sp, #8]
   1b62c:	str	r4, [sp, #4]
   1b630:	str	lr, [sp, #16]
   1b634:	str	r5, [sp, #12]
   1b638:	str	ip, [sp]
   1b63c:	mov	r6, r0
   1b640:	bl	196e8 <__assert_fail@plt+0x8318>
   1b644:	ldr	r3, [sp, #24]
   1b648:	mov	r0, r6
   1b64c:	str	r3, [r7]
   1b650:	add	sp, sp, #44	; 0x2c
   1b654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b658:	mov	r3, #8
   1b65c:	str	r3, [sp]
   1b660:	add	r1, sp, #36	; 0x24
   1b664:	rsb	r2, r2, #1
   1b668:	mvn	r3, #-2147483648	; 0x80000000
   1b66c:	mov	r0, #0
   1b670:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b674:	mov	r5, r0
   1b678:	ldm	r6, {r0, r1}
   1b67c:	str	r5, [r4]
   1b680:	stm	r5, {r0, r1}
   1b684:	b	1b568 <__assert_fail@plt+0xa198>
   1b688:	andeq	r4, r3, ip, asr #2
   1b68c:	ldrdeq	r4, [r3], -ip
   1b690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b694:	sub	sp, sp, #132	; 0x84
   1b698:	mov	r5, r1
   1b69c:	mov	r4, r0
   1b6a0:	mov	r9, r2
   1b6a4:	add	r0, sp, #80	; 0x50
   1b6a8:	mov	r2, #48	; 0x30
   1b6ac:	mov	r1, #0
   1b6b0:	bl	112c8 <memset@plt>
   1b6b4:	cmp	r5, #10
   1b6b8:	beq	1b870 <__assert_fail@plt+0xa4a0>
   1b6bc:	add	lr, sp, #80	; 0x50
   1b6c0:	str	r5, [sp, #80]	; 0x50
   1b6c4:	ldm	lr!, {r0, r1, r2, r3}
   1b6c8:	add	ip, sp, #32
   1b6cc:	ldr	r6, [pc, #416]	; 1b874 <__assert_fail@plt+0xa4a4>
   1b6d0:	stmia	ip!, {r0, r1, r2, r3}
   1b6d4:	ldm	lr!, {r0, r1, r2, r3}
   1b6d8:	stmia	ip!, {r0, r1, r2, r3}
   1b6dc:	ldm	lr, {r0, r1, r2, r3}
   1b6e0:	stm	ip, {r0, r1, r2, r3}
   1b6e4:	bl	11298 <__errno_location@plt>
   1b6e8:	cmn	r4, #-2147483647	; 0x80000001
   1b6ec:	ldr	r5, [r6]
   1b6f0:	mov	r7, r0
   1b6f4:	movne	r0, #0
   1b6f8:	moveq	r0, #1
   1b6fc:	ldr	r3, [r7]
   1b700:	orrs	r0, r0, r4, lsr #31
   1b704:	str	r3, [sp, #24]
   1b708:	bne	1b870 <__assert_fail@plt+0xa4a0>
   1b70c:	ldr	r2, [r6, #4]
   1b710:	cmp	r4, r2
   1b714:	blt	1b774 <__assert_fail@plt+0xa3a4>
   1b718:	add	r8, r6, #8
   1b71c:	cmp	r5, r8
   1b720:	str	r2, [sp, #80]	; 0x50
   1b724:	beq	1b840 <__assert_fail@plt+0xa470>
   1b728:	mov	r3, #8
   1b72c:	sub	r2, r4, r2
   1b730:	mov	r0, r5
   1b734:	str	r3, [sp]
   1b738:	add	r2, r2, #1
   1b73c:	add	r1, sp, #80	; 0x50
   1b740:	mvn	r3, #-2147483648	; 0x80000000
   1b744:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b748:	mov	r5, r0
   1b74c:	str	r0, [r6]
   1b750:	ldr	r0, [r6, #4]
   1b754:	ldr	r2, [sp, #80]	; 0x50
   1b758:	mov	r1, #0
   1b75c:	sub	r2, r2, r0
   1b760:	add	r0, r5, r0, lsl #3
   1b764:	lsl	r2, r2, #3
   1b768:	bl	112c8 <memset@plt>
   1b76c:	ldr	r3, [sp, #80]	; 0x50
   1b770:	str	r3, [r6, #4]
   1b774:	add	fp, r5, r4, lsl #3
   1b778:	ldr	r1, [sp, #36]	; 0x24
   1b77c:	ldr	r8, [r5, r4, lsl #3]
   1b780:	ldr	r6, [fp, #4]
   1b784:	ldr	r2, [sp, #72]	; 0x48
   1b788:	ldr	r3, [sp, #32]
   1b78c:	ldr	ip, [sp, #76]	; 0x4c
   1b790:	orr	r1, r1, #1
   1b794:	add	sl, sp, #40	; 0x28
   1b798:	str	r1, [sp, #28]
   1b79c:	str	r1, [sp, #4]
   1b7a0:	str	r2, [sp, #12]
   1b7a4:	str	r3, [sp]
   1b7a8:	mov	r0, r6
   1b7ac:	mov	r1, r8
   1b7b0:	str	ip, [sp, #16]
   1b7b4:	str	sl, [sp, #8]
   1b7b8:	mvn	r3, #0
   1b7bc:	mov	r2, r9
   1b7c0:	bl	196e8 <__assert_fail@plt+0x8318>
   1b7c4:	cmp	r8, r0
   1b7c8:	bhi	1b82c <__assert_fail@plt+0xa45c>
   1b7cc:	ldr	r3, [pc, #164]	; 1b878 <__assert_fail@plt+0xa4a8>
   1b7d0:	add	r8, r0, #1
   1b7d4:	cmp	r6, r3
   1b7d8:	str	r8, [r5, r4, lsl #3]
   1b7dc:	beq	1b7e8 <__assert_fail@plt+0xa418>
   1b7e0:	mov	r0, r6
   1b7e4:	bl	1ee10 <__assert_fail@plt+0xda40>
   1b7e8:	mov	r0, r8
   1b7ec:	bl	1e564 <__assert_fail@plt+0xd194>
   1b7f0:	ldr	lr, [sp, #76]	; 0x4c
   1b7f4:	ldr	r3, [sp, #32]
   1b7f8:	ldr	ip, [sp, #72]	; 0x48
   1b7fc:	ldr	r4, [sp, #28]
   1b800:	mov	r2, r9
   1b804:	mov	r1, r8
   1b808:	str	r0, [fp, #4]
   1b80c:	str	r3, [sp]
   1b810:	str	sl, [sp, #8]
   1b814:	str	r4, [sp, #4]
   1b818:	str	lr, [sp, #16]
   1b81c:	str	ip, [sp, #12]
   1b820:	mvn	r3, #0
   1b824:	mov	r6, r0
   1b828:	bl	196e8 <__assert_fail@plt+0x8318>
   1b82c:	ldr	r3, [sp, #24]
   1b830:	mov	r0, r6
   1b834:	str	r3, [r7]
   1b838:	add	sp, sp, #132	; 0x84
   1b83c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b840:	mov	r3, #8
   1b844:	sub	r2, r4, r2
   1b848:	add	r1, sp, #80	; 0x50
   1b84c:	str	r3, [sp]
   1b850:	add	r2, r2, #1
   1b854:	mvn	r3, #-2147483648	; 0x80000000
   1b858:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b85c:	mov	r5, r0
   1b860:	ldm	r8, {r0, r1}
   1b864:	str	r5, [r6]
   1b868:	stm	r5, {r0, r1}
   1b86c:	b	1b750 <__assert_fail@plt+0xa380>
   1b870:	bl	113a0 <abort@plt>
   1b874:	andeq	r4, r3, ip, asr #2
   1b878:	andeq	r4, r3, ip, lsl #4
   1b87c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b880:	sub	sp, sp, #132	; 0x84
   1b884:	mov	r5, r1
   1b888:	mov	r4, r0
   1b88c:	mov	r9, r2
   1b890:	add	r0, sp, #80	; 0x50
   1b894:	mov	r2, #48	; 0x30
   1b898:	mov	r1, #0
   1b89c:	mov	sl, r3
   1b8a0:	bl	112c8 <memset@plt>
   1b8a4:	cmp	r5, #10
   1b8a8:	beq	1ba64 <__assert_fail@plt+0xa694>
   1b8ac:	add	lr, sp, #80	; 0x50
   1b8b0:	str	r5, [sp, #80]	; 0x50
   1b8b4:	ldm	lr!, {r0, r1, r2, r3}
   1b8b8:	add	ip, sp, #32
   1b8bc:	ldr	r6, [pc, #420]	; 1ba68 <__assert_fail@plt+0xa698>
   1b8c0:	stmia	ip!, {r0, r1, r2, r3}
   1b8c4:	ldm	lr!, {r0, r1, r2, r3}
   1b8c8:	stmia	ip!, {r0, r1, r2, r3}
   1b8cc:	ldm	lr, {r0, r1, r2, r3}
   1b8d0:	stm	ip, {r0, r1, r2, r3}
   1b8d4:	bl	11298 <__errno_location@plt>
   1b8d8:	cmn	r4, #-2147483647	; 0x80000001
   1b8dc:	ldr	r5, [r6]
   1b8e0:	mov	r7, r0
   1b8e4:	movne	r0, #0
   1b8e8:	moveq	r0, #1
   1b8ec:	ldr	r3, [r7]
   1b8f0:	orrs	r0, r0, r4, lsr #31
   1b8f4:	str	r3, [sp, #24]
   1b8f8:	bne	1ba64 <__assert_fail@plt+0xa694>
   1b8fc:	ldr	r2, [r6, #4]
   1b900:	cmp	r4, r2
   1b904:	blt	1b964 <__assert_fail@plt+0xa594>
   1b908:	add	r8, r6, #8
   1b90c:	cmp	r5, r8
   1b910:	str	r2, [sp, #80]	; 0x50
   1b914:	beq	1ba34 <__assert_fail@plt+0xa664>
   1b918:	mov	r3, #8
   1b91c:	sub	r2, r4, r2
   1b920:	mov	r0, r5
   1b924:	str	r3, [sp]
   1b928:	add	r2, r2, #1
   1b92c:	add	r1, sp, #80	; 0x50
   1b930:	mvn	r3, #-2147483648	; 0x80000000
   1b934:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1b938:	mov	r5, r0
   1b93c:	str	r0, [r6]
   1b940:	ldr	r0, [r6, #4]
   1b944:	ldr	r2, [sp, #80]	; 0x50
   1b948:	mov	r1, #0
   1b94c:	sub	r2, r2, r0
   1b950:	add	r0, r5, r0, lsl #3
   1b954:	lsl	r2, r2, #3
   1b958:	bl	112c8 <memset@plt>
   1b95c:	ldr	r3, [sp, #80]	; 0x50
   1b960:	str	r3, [r6, #4]
   1b964:	add	fp, r5, r4, lsl #3
   1b968:	ldr	r3, [sp, #32]
   1b96c:	ldr	r1, [sp, #36]	; 0x24
   1b970:	ldr	r8, [r5, r4, lsl #3]
   1b974:	ldr	r6, [fp, #4]
   1b978:	ldr	r2, [sp, #72]	; 0x48
   1b97c:	ldr	ip, [sp, #76]	; 0x4c
   1b980:	orr	r1, r1, #1
   1b984:	str	r3, [sp]
   1b988:	add	r3, sp, #40	; 0x28
   1b98c:	str	r1, [sp, #28]
   1b990:	str	r1, [sp, #4]
   1b994:	str	r2, [sp, #12]
   1b998:	str	r3, [sp, #8]
   1b99c:	mov	r0, r6
   1b9a0:	mov	r1, r8
   1b9a4:	str	ip, [sp, #16]
   1b9a8:	mov	r3, sl
   1b9ac:	mov	r2, r9
   1b9b0:	bl	196e8 <__assert_fail@plt+0x8318>
   1b9b4:	cmp	r8, r0
   1b9b8:	bhi	1ba20 <__assert_fail@plt+0xa650>
   1b9bc:	ldr	r3, [pc, #168]	; 1ba6c <__assert_fail@plt+0xa69c>
   1b9c0:	add	r8, r0, #1
   1b9c4:	cmp	r6, r3
   1b9c8:	str	r8, [r5, r4, lsl #3]
   1b9cc:	beq	1b9d8 <__assert_fail@plt+0xa608>
   1b9d0:	mov	r0, r6
   1b9d4:	bl	1ee10 <__assert_fail@plt+0xda40>
   1b9d8:	mov	r0, r8
   1b9dc:	bl	1e564 <__assert_fail@plt+0xd194>
   1b9e0:	add	lr, sp, #40	; 0x28
   1b9e4:	ldr	ip, [sp, #76]	; 0x4c
   1b9e8:	ldr	r4, [sp, #72]	; 0x48
   1b9ec:	ldr	r5, [sp, #28]
   1b9f0:	mov	r3, sl
   1b9f4:	mov	r2, r9
   1b9f8:	mov	r1, r8
   1b9fc:	str	r0, [fp, #4]
   1ba00:	str	lr, [sp, #8]
   1ba04:	ldr	lr, [sp, #32]
   1ba08:	str	r5, [sp, #4]
   1ba0c:	str	ip, [sp, #16]
   1ba10:	str	r4, [sp, #12]
   1ba14:	str	lr, [sp]
   1ba18:	mov	r6, r0
   1ba1c:	bl	196e8 <__assert_fail@plt+0x8318>
   1ba20:	ldr	r3, [sp, #24]
   1ba24:	mov	r0, r6
   1ba28:	str	r3, [r7]
   1ba2c:	add	sp, sp, #132	; 0x84
   1ba30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba34:	mov	r3, #8
   1ba38:	sub	r2, r4, r2
   1ba3c:	add	r1, sp, #80	; 0x50
   1ba40:	str	r3, [sp]
   1ba44:	add	r2, r2, #1
   1ba48:	mvn	r3, #-2147483648	; 0x80000000
   1ba4c:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1ba50:	mov	r5, r0
   1ba54:	ldm	r8, {r0, r1}
   1ba58:	str	r5, [r6]
   1ba5c:	stm	r5, {r0, r1}
   1ba60:	b	1b940 <__assert_fail@plt+0xa570>
   1ba64:	bl	113a0 <abort@plt>
   1ba68:	andeq	r4, r3, ip, asr #2
   1ba6c:	andeq	r4, r3, ip, lsl #4
   1ba70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba74:	sub	sp, sp, #124	; 0x7c
   1ba78:	mov	r4, r0
   1ba7c:	mov	r9, r1
   1ba80:	add	r0, sp, #72	; 0x48
   1ba84:	mov	r2, #48	; 0x30
   1ba88:	mov	r1, #0
   1ba8c:	bl	112c8 <memset@plt>
   1ba90:	cmp	r4, #10
   1ba94:	beq	1bc20 <__assert_fail@plt+0xa850>
   1ba98:	add	lr, sp, #72	; 0x48
   1ba9c:	str	r4, [sp, #72]	; 0x48
   1baa0:	ldm	lr!, {r0, r1, r2, r3}
   1baa4:	add	ip, sp, #24
   1baa8:	ldr	r5, [pc, #372]	; 1bc24 <__assert_fail@plt+0xa854>
   1baac:	stmia	ip!, {r0, r1, r2, r3}
   1bab0:	ldm	lr!, {r0, r1, r2, r3}
   1bab4:	stmia	ip!, {r0, r1, r2, r3}
   1bab8:	ldm	lr, {r0, r1, r2, r3}
   1babc:	stm	ip, {r0, r1, r2, r3}
   1bac0:	bl	11298 <__errno_location@plt>
   1bac4:	ldr	r2, [r5, #4]
   1bac8:	ldr	r4, [r5]
   1bacc:	cmp	r2, #0
   1bad0:	mov	r7, r0
   1bad4:	ldr	fp, [r0]
   1bad8:	bgt	1bb34 <__assert_fail@plt+0xa764>
   1badc:	add	r6, r5, #8
   1bae0:	cmp	r4, r6
   1bae4:	str	r2, [sp, #72]	; 0x48
   1bae8:	beq	1bbf0 <__assert_fail@plt+0xa820>
   1baec:	mov	r3, #8
   1baf0:	mov	r0, r4
   1baf4:	str	r3, [sp]
   1baf8:	rsb	r2, r2, #1
   1bafc:	add	r1, sp, #72	; 0x48
   1bb00:	mvn	r3, #-2147483648	; 0x80000000
   1bb04:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1bb08:	mov	r4, r0
   1bb0c:	str	r0, [r5]
   1bb10:	ldr	r0, [r5, #4]
   1bb14:	ldr	r2, [sp, #72]	; 0x48
   1bb18:	mov	r1, #0
   1bb1c:	sub	r2, r2, r0
   1bb20:	add	r0, r4, r0, lsl #3
   1bb24:	lsl	r2, r2, #3
   1bb28:	bl	112c8 <memset@plt>
   1bb2c:	ldr	r3, [sp, #72]	; 0x48
   1bb30:	str	r3, [r5, #4]
   1bb34:	ldr	r6, [sp, #28]
   1bb38:	ldr	r8, [r4]
   1bb3c:	ldr	r5, [r4, #4]
   1bb40:	ldr	r2, [sp, #64]	; 0x40
   1bb44:	ldr	r3, [sp, #24]
   1bb48:	ldr	ip, [sp, #68]	; 0x44
   1bb4c:	orr	r6, r6, #1
   1bb50:	add	sl, sp, #32
   1bb54:	str	r2, [sp, #12]
   1bb58:	str	r3, [sp]
   1bb5c:	str	r6, [sp, #4]
   1bb60:	mov	r1, r8
   1bb64:	mov	r0, r5
   1bb68:	str	ip, [sp, #16]
   1bb6c:	str	sl, [sp, #8]
   1bb70:	mvn	r3, #0
   1bb74:	mov	r2, r9
   1bb78:	bl	196e8 <__assert_fail@plt+0x8318>
   1bb7c:	cmp	r8, r0
   1bb80:	bhi	1bbe0 <__assert_fail@plt+0xa810>
   1bb84:	ldr	r3, [pc, #156]	; 1bc28 <__assert_fail@plt+0xa858>
   1bb88:	add	r8, r0, #1
   1bb8c:	cmp	r5, r3
   1bb90:	str	r8, [r4]
   1bb94:	beq	1bba0 <__assert_fail@plt+0xa7d0>
   1bb98:	mov	r0, r5
   1bb9c:	bl	1ee10 <__assert_fail@plt+0xda40>
   1bba0:	mov	r0, r8
   1bba4:	bl	1e564 <__assert_fail@plt+0xd194>
   1bba8:	ldr	lr, [sp, #68]	; 0x44
   1bbac:	ldr	r3, [sp, #24]
   1bbb0:	ldr	ip, [sp, #64]	; 0x40
   1bbb4:	mov	r2, r9
   1bbb8:	mov	r1, r8
   1bbbc:	str	r0, [r4, #4]
   1bbc0:	str	r3, [sp]
   1bbc4:	str	sl, [sp, #8]
   1bbc8:	str	r6, [sp, #4]
   1bbcc:	str	lr, [sp, #16]
   1bbd0:	str	ip, [sp, #12]
   1bbd4:	mvn	r3, #0
   1bbd8:	mov	r5, r0
   1bbdc:	bl	196e8 <__assert_fail@plt+0x8318>
   1bbe0:	mov	r0, r5
   1bbe4:	str	fp, [r7]
   1bbe8:	add	sp, sp, #124	; 0x7c
   1bbec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbf0:	mov	r3, #8
   1bbf4:	add	r1, sp, #72	; 0x48
   1bbf8:	str	r3, [sp]
   1bbfc:	rsb	r2, r2, #1
   1bc00:	mvn	r3, #-2147483648	; 0x80000000
   1bc04:	mov	r0, #0
   1bc08:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1bc0c:	mov	r4, r0
   1bc10:	ldm	r6, {r0, r1}
   1bc14:	str	r4, [r5]
   1bc18:	stm	r4, {r0, r1}
   1bc1c:	b	1bb10 <__assert_fail@plt+0xa740>
   1bc20:	bl	113a0 <abort@plt>
   1bc24:	andeq	r4, r3, ip, asr #2
   1bc28:	andeq	r4, r3, ip, lsl #4
   1bc2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc30:	sub	sp, sp, #132	; 0x84
   1bc34:	mov	r4, r0
   1bc38:	mov	r9, r1
   1bc3c:	mov	sl, r2
   1bc40:	add	r0, sp, #80	; 0x50
   1bc44:	mov	r2, #48	; 0x30
   1bc48:	mov	r1, #0
   1bc4c:	bl	112c8 <memset@plt>
   1bc50:	cmp	r4, #10
   1bc54:	beq	1bde8 <__assert_fail@plt+0xaa18>
   1bc58:	add	lr, sp, #80	; 0x50
   1bc5c:	str	r4, [sp, #80]	; 0x50
   1bc60:	ldm	lr!, {r0, r1, r2, r3}
   1bc64:	add	ip, sp, #32
   1bc68:	ldr	r5, [pc, #380]	; 1bdec <__assert_fail@plt+0xaa1c>
   1bc6c:	stmia	ip!, {r0, r1, r2, r3}
   1bc70:	ldm	lr!, {r0, r1, r2, r3}
   1bc74:	stmia	ip!, {r0, r1, r2, r3}
   1bc78:	ldm	lr, {r0, r1, r2, r3}
   1bc7c:	stm	ip, {r0, r1, r2, r3}
   1bc80:	bl	11298 <__errno_location@plt>
   1bc84:	ldr	r2, [r5, #4]
   1bc88:	ldr	r4, [r5]
   1bc8c:	cmp	r2, #0
   1bc90:	ldr	r3, [r0]
   1bc94:	mov	r7, r0
   1bc98:	str	r3, [sp, #28]
   1bc9c:	bgt	1bcf8 <__assert_fail@plt+0xa928>
   1bca0:	add	r6, r5, #8
   1bca4:	cmp	r4, r6
   1bca8:	str	r2, [sp, #80]	; 0x50
   1bcac:	beq	1bdb8 <__assert_fail@plt+0xa9e8>
   1bcb0:	mov	r3, #8
   1bcb4:	mov	r0, r4
   1bcb8:	str	r3, [sp]
   1bcbc:	rsb	r2, r2, #1
   1bcc0:	add	r1, sp, #80	; 0x50
   1bcc4:	mvn	r3, #-2147483648	; 0x80000000
   1bcc8:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1bccc:	mov	r4, r0
   1bcd0:	str	r0, [r5]
   1bcd4:	ldr	r0, [r5, #4]
   1bcd8:	ldr	r2, [sp, #80]	; 0x50
   1bcdc:	mov	r1, #0
   1bce0:	sub	r2, r2, r0
   1bce4:	add	r0, r4, r0, lsl #3
   1bce8:	lsl	r2, r2, #3
   1bcec:	bl	112c8 <memset@plt>
   1bcf0:	ldr	r3, [sp, #80]	; 0x50
   1bcf4:	str	r3, [r5, #4]
   1bcf8:	ldr	r6, [sp, #36]	; 0x24
   1bcfc:	ldr	r8, [r4]
   1bd00:	ldr	r5, [r4, #4]
   1bd04:	ldr	r2, [sp, #72]	; 0x48
   1bd08:	ldr	r3, [sp, #32]
   1bd0c:	ldr	ip, [sp, #76]	; 0x4c
   1bd10:	orr	r6, r6, #1
   1bd14:	add	fp, sp, #40	; 0x28
   1bd18:	str	r2, [sp, #12]
   1bd1c:	str	r3, [sp]
   1bd20:	str	r6, [sp, #4]
   1bd24:	mov	r1, r8
   1bd28:	mov	r0, r5
   1bd2c:	str	ip, [sp, #16]
   1bd30:	str	fp, [sp, #8]
   1bd34:	mov	r3, sl
   1bd38:	mov	r2, r9
   1bd3c:	bl	196e8 <__assert_fail@plt+0x8318>
   1bd40:	cmp	r8, r0
   1bd44:	bhi	1bda4 <__assert_fail@plt+0xa9d4>
   1bd48:	ldr	r3, [pc, #160]	; 1bdf0 <__assert_fail@plt+0xaa20>
   1bd4c:	add	r8, r0, #1
   1bd50:	cmp	r5, r3
   1bd54:	str	r8, [r4]
   1bd58:	beq	1bd64 <__assert_fail@plt+0xa994>
   1bd5c:	mov	r0, r5
   1bd60:	bl	1ee10 <__assert_fail@plt+0xda40>
   1bd64:	mov	r0, r8
   1bd68:	bl	1e564 <__assert_fail@plt+0xd194>
   1bd6c:	ldr	ip, [sp, #76]	; 0x4c
   1bd70:	ldr	lr, [sp, #32]
   1bd74:	mov	r3, sl
   1bd78:	mov	r2, r9
   1bd7c:	mov	r1, r8
   1bd80:	str	r0, [r4, #4]
   1bd84:	ldr	r4, [sp, #72]	; 0x48
   1bd88:	str	fp, [sp, #8]
   1bd8c:	str	r6, [sp, #4]
   1bd90:	str	ip, [sp, #16]
   1bd94:	str	r4, [sp, #12]
   1bd98:	str	lr, [sp]
   1bd9c:	mov	r5, r0
   1bda0:	bl	196e8 <__assert_fail@plt+0x8318>
   1bda4:	ldr	r3, [sp, #28]
   1bda8:	mov	r0, r5
   1bdac:	str	r3, [r7]
   1bdb0:	add	sp, sp, #132	; 0x84
   1bdb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdb8:	mov	r3, #8
   1bdbc:	add	r1, sp, #80	; 0x50
   1bdc0:	str	r3, [sp]
   1bdc4:	rsb	r2, r2, #1
   1bdc8:	mvn	r3, #-2147483648	; 0x80000000
   1bdcc:	mov	r0, #0
   1bdd0:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1bdd4:	mov	r4, r0
   1bdd8:	ldm	r6, {r0, r1}
   1bddc:	str	r4, [r5]
   1bde0:	stm	r4, {r0, r1}
   1bde4:	b	1bcd4 <__assert_fail@plt+0xa904>
   1bde8:	bl	113a0 <abort@plt>
   1bdec:	andeq	r4, r3, ip, asr #2
   1bdf0:	andeq	r4, r3, ip, lsl #4
   1bdf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdf8:	mov	r4, r2
   1bdfc:	ldr	lr, [pc, #432]	; 1bfb4 <__assert_fail@plt+0xabe4>
   1be00:	mov	sl, r0
   1be04:	mov	fp, r1
   1be08:	ldm	lr!, {r0, r1, r2, r3}
   1be0c:	sub	sp, sp, #92	; 0x5c
   1be10:	add	ip, sp, #40	; 0x28
   1be14:	lsr	r7, r4, #5
   1be18:	stmia	ip!, {r0, r1, r2, r3}
   1be1c:	add	r6, sp, #48	; 0x30
   1be20:	ldm	lr!, {r0, r1, r2, r3}
   1be24:	and	r4, r4, #31
   1be28:	ldr	r5, [pc, #392]	; 1bfb8 <__assert_fail@plt+0xabe8>
   1be2c:	stmia	ip!, {r0, r1, r2, r3}
   1be30:	ldm	lr, {r0, r1, r2, r3}
   1be34:	stm	ip, {r0, r1, r2, r3}
   1be38:	ldr	r2, [r6, r7, lsl #2]
   1be3c:	lsr	r3, r2, r4
   1be40:	eor	r3, r3, #1
   1be44:	and	r3, r3, #1
   1be48:	eor	r4, r2, r3, lsl r4
   1be4c:	str	r4, [r6, r7, lsl #2]
   1be50:	bl	11298 <__errno_location@plt>
   1be54:	ldr	r2, [r5, #4]
   1be58:	ldr	r4, [r5]
   1be5c:	cmp	r2, #0
   1be60:	ldr	r3, [r0]
   1be64:	mov	r8, r0
   1be68:	str	r3, [sp, #28]
   1be6c:	bgt	1bec8 <__assert_fail@plt+0xaaf8>
   1be70:	add	r7, r5, #8
   1be74:	cmp	r4, r7
   1be78:	str	r2, [sp, #36]	; 0x24
   1be7c:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1be80:	mov	r3, #8
   1be84:	mov	r0, r4
   1be88:	str	r3, [sp]
   1be8c:	rsb	r2, r2, #1
   1be90:	mvn	r3, #-2147483648	; 0x80000000
   1be94:	add	r1, sp, #36	; 0x24
   1be98:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1be9c:	mov	r4, r0
   1bea0:	str	r0, [r5]
   1bea4:	ldr	r0, [r5, #4]
   1bea8:	ldr	r2, [sp, #36]	; 0x24
   1beac:	mov	r1, #0
   1beb0:	sub	r2, r2, r0
   1beb4:	add	r0, r4, r0, lsl #3
   1beb8:	lsl	r2, r2, #3
   1bebc:	bl	112c8 <memset@plt>
   1bec0:	ldr	r3, [sp, #36]	; 0x24
   1bec4:	str	r3, [r5, #4]
   1bec8:	ldr	r7, [sp, #44]	; 0x2c
   1becc:	ldr	r9, [r4]
   1bed0:	ldr	r5, [r4, #4]
   1bed4:	ldr	r2, [sp, #80]	; 0x50
   1bed8:	ldr	r3, [sp, #40]	; 0x28
   1bedc:	ldr	ip, [sp, #84]	; 0x54
   1bee0:	orr	r7, r7, #1
   1bee4:	str	r2, [sp, #12]
   1bee8:	str	r3, [sp]
   1beec:	str	r7, [sp, #4]
   1bef0:	str	r6, [sp, #8]
   1bef4:	mov	r1, r9
   1bef8:	mov	r0, r5
   1befc:	str	ip, [sp, #16]
   1bf00:	mov	r3, fp
   1bf04:	mov	r2, sl
   1bf08:	bl	196e8 <__assert_fail@plt+0x8318>
   1bf0c:	cmp	r9, r0
   1bf10:	bhi	1bf70 <__assert_fail@plt+0xaba0>
   1bf14:	ldr	r3, [pc, #160]	; 1bfbc <__assert_fail@plt+0xabec>
   1bf18:	add	r9, r0, #1
   1bf1c:	cmp	r5, r3
   1bf20:	str	r9, [r4]
   1bf24:	beq	1bf30 <__assert_fail@plt+0xab60>
   1bf28:	mov	r0, r5
   1bf2c:	bl	1ee10 <__assert_fail@plt+0xda40>
   1bf30:	mov	r0, r9
   1bf34:	bl	1e564 <__assert_fail@plt+0xd194>
   1bf38:	ldr	ip, [sp, #84]	; 0x54
   1bf3c:	ldr	lr, [sp, #40]	; 0x28
   1bf40:	mov	r3, fp
   1bf44:	mov	r2, sl
   1bf48:	mov	r1, r9
   1bf4c:	str	r0, [r4, #4]
   1bf50:	ldr	r4, [sp, #80]	; 0x50
   1bf54:	str	r6, [sp, #8]
   1bf58:	str	r7, [sp, #4]
   1bf5c:	str	ip, [sp, #16]
   1bf60:	str	r4, [sp, #12]
   1bf64:	str	lr, [sp]
   1bf68:	mov	r5, r0
   1bf6c:	bl	196e8 <__assert_fail@plt+0x8318>
   1bf70:	ldr	r3, [sp, #28]
   1bf74:	mov	r0, r5
   1bf78:	str	r3, [r8]
   1bf7c:	add	sp, sp, #92	; 0x5c
   1bf80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf84:	mov	r3, #8
   1bf88:	str	r3, [sp]
   1bf8c:	add	r1, sp, #36	; 0x24
   1bf90:	rsb	r2, r2, #1
   1bf94:	mvn	r3, #-2147483648	; 0x80000000
   1bf98:	mov	r0, #0
   1bf9c:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1bfa0:	mov	r4, r0
   1bfa4:	ldm	r7, {r0, r1}
   1bfa8:	str	r4, [r5]
   1bfac:	stm	r4, {r0, r1}
   1bfb0:	b	1bea4 <__assert_fail@plt+0xaad4>
   1bfb4:	ldrdeq	r4, [r3], -ip
   1bfb8:	andeq	r4, r3, ip, asr #2
   1bfbc:	andeq	r4, r3, ip, lsl #4
   1bfc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfc4:	mov	r4, r1
   1bfc8:	ldr	lr, [pc, #420]	; 1c174 <__assert_fail@plt+0xada4>
   1bfcc:	mov	r6, r0
   1bfd0:	sub	sp, sp, #84	; 0x54
   1bfd4:	ldm	lr!, {r0, r1, r2, r3}
   1bfd8:	add	ip, sp, #32
   1bfdc:	lsr	r8, r4, #5
   1bfe0:	add	r5, sp, #40	; 0x28
   1bfe4:	stmia	ip!, {r0, r1, r2, r3}
   1bfe8:	and	r4, r4, #31
   1bfec:	ldm	lr!, {r0, r1, r2, r3}
   1bff0:	ldr	r7, [pc, #384]	; 1c178 <__assert_fail@plt+0xada8>
   1bff4:	stmia	ip!, {r0, r1, r2, r3}
   1bff8:	ldm	lr, {r0, r1, r2, r3}
   1bffc:	stm	ip, {r0, r1, r2, r3}
   1c000:	ldr	r2, [r5, r8, lsl #2]
   1c004:	lsr	r3, r2, r4
   1c008:	eor	r3, r3, #1
   1c00c:	and	r3, r3, #1
   1c010:	eor	r4, r2, r3, lsl r4
   1c014:	str	r4, [r5, r8, lsl #2]
   1c018:	bl	11298 <__errno_location@plt>
   1c01c:	ldr	r2, [r7, #4]
   1c020:	ldr	r4, [r7]
   1c024:	cmp	r2, #0
   1c028:	mov	r9, r0
   1c02c:	ldr	sl, [r0]
   1c030:	bgt	1c08c <__assert_fail@plt+0xacbc>
   1c034:	add	r8, r7, #8
   1c038:	cmp	r4, r8
   1c03c:	str	r2, [sp, #28]
   1c040:	beq	1c144 <__assert_fail@plt+0xad74>
   1c044:	mov	r3, #8
   1c048:	mov	r0, r4
   1c04c:	str	r3, [sp]
   1c050:	rsb	r2, r2, #1
   1c054:	mvn	r3, #-2147483648	; 0x80000000
   1c058:	add	r1, sp, #28
   1c05c:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c060:	mov	r4, r0
   1c064:	str	r0, [r7]
   1c068:	ldr	r0, [r7, #4]
   1c06c:	ldr	r2, [sp, #28]
   1c070:	mov	r1, #0
   1c074:	sub	r2, r2, r0
   1c078:	add	r0, r4, r0, lsl #3
   1c07c:	lsl	r2, r2, #3
   1c080:	bl	112c8 <memset@plt>
   1c084:	ldr	r3, [sp, #28]
   1c088:	str	r3, [r7, #4]
   1c08c:	ldr	r8, [sp, #36]	; 0x24
   1c090:	ldr	fp, [r4]
   1c094:	ldr	r7, [r4, #4]
   1c098:	ldr	r2, [sp, #72]	; 0x48
   1c09c:	ldr	r3, [sp, #32]
   1c0a0:	ldr	ip, [sp, #76]	; 0x4c
   1c0a4:	orr	r8, r8, #1
   1c0a8:	str	r2, [sp, #12]
   1c0ac:	str	r3, [sp]
   1c0b0:	str	r8, [sp, #4]
   1c0b4:	str	r5, [sp, #8]
   1c0b8:	mov	r1, fp
   1c0bc:	mov	r0, r7
   1c0c0:	str	ip, [sp, #16]
   1c0c4:	mvn	r3, #0
   1c0c8:	mov	r2, r6
   1c0cc:	bl	196e8 <__assert_fail@plt+0x8318>
   1c0d0:	cmp	fp, r0
   1c0d4:	bhi	1c134 <__assert_fail@plt+0xad64>
   1c0d8:	ldr	r3, [pc, #156]	; 1c17c <__assert_fail@plt+0xadac>
   1c0dc:	add	fp, r0, #1
   1c0e0:	cmp	r7, r3
   1c0e4:	str	fp, [r4]
   1c0e8:	beq	1c0f4 <__assert_fail@plt+0xad24>
   1c0ec:	mov	r0, r7
   1c0f0:	bl	1ee10 <__assert_fail@plt+0xda40>
   1c0f4:	mov	r0, fp
   1c0f8:	bl	1e564 <__assert_fail@plt+0xd194>
   1c0fc:	ldr	lr, [sp, #76]	; 0x4c
   1c100:	ldr	r3, [sp, #32]
   1c104:	ldr	ip, [sp, #72]	; 0x48
   1c108:	mov	r2, r6
   1c10c:	mov	r1, fp
   1c110:	str	r0, [r4, #4]
   1c114:	str	r3, [sp]
   1c118:	str	r5, [sp, #8]
   1c11c:	str	r8, [sp, #4]
   1c120:	str	lr, [sp, #16]
   1c124:	str	ip, [sp, #12]
   1c128:	mvn	r3, #0
   1c12c:	mov	r7, r0
   1c130:	bl	196e8 <__assert_fail@plt+0x8318>
   1c134:	mov	r0, r7
   1c138:	str	sl, [r9]
   1c13c:	add	sp, sp, #84	; 0x54
   1c140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c144:	mov	r3, #8
   1c148:	str	r3, [sp]
   1c14c:	add	r1, sp, #28
   1c150:	rsb	r2, r2, #1
   1c154:	mvn	r3, #-2147483648	; 0x80000000
   1c158:	mov	r0, #0
   1c15c:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c160:	mov	r4, r0
   1c164:	ldm	r8, {r0, r1}
   1c168:	str	r4, [r7]
   1c16c:	stm	r4, {r0, r1}
   1c170:	b	1c068 <__assert_fail@plt+0xac98>
   1c174:	ldrdeq	r4, [r3], -ip
   1c178:	andeq	r4, r3, ip, asr #2
   1c17c:	andeq	r4, r3, ip, lsl #4
   1c180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c184:	mov	r6, r0
   1c188:	ldr	lr, [pc, #404]	; 1c324 <__assert_fail@plt+0xaf54>
   1c18c:	sub	sp, sp, #84	; 0x54
   1c190:	add	ip, sp, #32
   1c194:	ldm	lr!, {r0, r1, r2, r3}
   1c198:	ldr	r5, [pc, #392]	; 1c328 <__assert_fail@plt+0xaf58>
   1c19c:	stmia	ip!, {r0, r1, r2, r3}
   1c1a0:	ldm	lr!, {r0, r1, r2, r3}
   1c1a4:	ldr	r4, [sp, #44]	; 0x2c
   1c1a8:	stmia	ip!, {r0, r1, r2, r3}
   1c1ac:	ldm	lr, {r0, r1, r2, r3}
   1c1b0:	mvn	lr, r4
   1c1b4:	and	lr, lr, #67108864	; 0x4000000
   1c1b8:	eor	lr, lr, r4
   1c1bc:	stm	ip, {r0, r1, r2, r3}
   1c1c0:	str	lr, [sp, #44]	; 0x2c
   1c1c4:	bl	11298 <__errno_location@plt>
   1c1c8:	ldr	r2, [r5, #4]
   1c1cc:	ldr	r4, [r5]
   1c1d0:	cmp	r2, #0
   1c1d4:	mov	r8, r0
   1c1d8:	ldr	sl, [r0]
   1c1dc:	bgt	1c238 <__assert_fail@plt+0xae68>
   1c1e0:	add	r7, r5, #8
   1c1e4:	cmp	r4, r7
   1c1e8:	str	r2, [sp, #28]
   1c1ec:	beq	1c2f4 <__assert_fail@plt+0xaf24>
   1c1f0:	mov	r3, #8
   1c1f4:	mov	r0, r4
   1c1f8:	str	r3, [sp]
   1c1fc:	rsb	r2, r2, #1
   1c200:	mvn	r3, #-2147483648	; 0x80000000
   1c204:	add	r1, sp, #28
   1c208:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c20c:	mov	r4, r0
   1c210:	str	r0, [r5]
   1c214:	ldr	r0, [r5, #4]
   1c218:	ldr	r2, [sp, #28]
   1c21c:	mov	r1, #0
   1c220:	sub	r2, r2, r0
   1c224:	add	r0, r4, r0, lsl #3
   1c228:	lsl	r2, r2, #3
   1c22c:	bl	112c8 <memset@plt>
   1c230:	ldr	r3, [sp, #28]
   1c234:	str	r3, [r5, #4]
   1c238:	ldr	r7, [sp, #36]	; 0x24
   1c23c:	ldr	r9, [r4]
   1c240:	ldr	r5, [r4, #4]
   1c244:	ldr	r2, [sp, #72]	; 0x48
   1c248:	ldr	r3, [sp, #32]
   1c24c:	ldr	ip, [sp, #76]	; 0x4c
   1c250:	orr	r7, r7, #1
   1c254:	add	fp, sp, #40	; 0x28
   1c258:	str	r2, [sp, #12]
   1c25c:	str	r3, [sp]
   1c260:	str	r7, [sp, #4]
   1c264:	mov	r1, r9
   1c268:	mov	r0, r5
   1c26c:	str	ip, [sp, #16]
   1c270:	str	fp, [sp, #8]
   1c274:	mvn	r3, #0
   1c278:	mov	r2, r6
   1c27c:	bl	196e8 <__assert_fail@plt+0x8318>
   1c280:	cmp	r9, r0
   1c284:	bhi	1c2e4 <__assert_fail@plt+0xaf14>
   1c288:	ldr	r3, [pc, #156]	; 1c32c <__assert_fail@plt+0xaf5c>
   1c28c:	add	r9, r0, #1
   1c290:	cmp	r5, r3
   1c294:	str	r9, [r4]
   1c298:	beq	1c2a4 <__assert_fail@plt+0xaed4>
   1c29c:	mov	r0, r5
   1c2a0:	bl	1ee10 <__assert_fail@plt+0xda40>
   1c2a4:	mov	r0, r9
   1c2a8:	bl	1e564 <__assert_fail@plt+0xd194>
   1c2ac:	ldr	lr, [sp, #76]	; 0x4c
   1c2b0:	ldr	r3, [sp, #32]
   1c2b4:	ldr	ip, [sp, #72]	; 0x48
   1c2b8:	mov	r2, r6
   1c2bc:	mov	r1, r9
   1c2c0:	str	r0, [r4, #4]
   1c2c4:	str	r3, [sp]
   1c2c8:	str	fp, [sp, #8]
   1c2cc:	str	r7, [sp, #4]
   1c2d0:	str	lr, [sp, #16]
   1c2d4:	str	ip, [sp, #12]
   1c2d8:	mvn	r3, #0
   1c2dc:	mov	r5, r0
   1c2e0:	bl	196e8 <__assert_fail@plt+0x8318>
   1c2e4:	mov	r0, r5
   1c2e8:	str	sl, [r8]
   1c2ec:	add	sp, sp, #84	; 0x54
   1c2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2f4:	mov	r3, #8
   1c2f8:	str	r3, [sp]
   1c2fc:	add	r1, sp, #28
   1c300:	rsb	r2, r2, #1
   1c304:	mvn	r3, #-2147483648	; 0x80000000
   1c308:	mov	r0, #0
   1c30c:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c310:	mov	r4, r0
   1c314:	ldm	r7, {r0, r1}
   1c318:	str	r4, [r5]
   1c31c:	stm	r4, {r0, r1}
   1c320:	b	1c214 <__assert_fail@plt+0xae44>
   1c324:	ldrdeq	r4, [r3], -ip
   1c328:	andeq	r4, r3, ip, asr #2
   1c32c:	andeq	r4, r3, ip, lsl #4
   1c330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c334:	mov	r9, r0
   1c338:	ldr	lr, [pc, #416]	; 1c4e0 <__assert_fail@plt+0xb110>
   1c33c:	mov	sl, r1
   1c340:	sub	sp, sp, #92	; 0x5c
   1c344:	ldm	lr!, {r0, r1, r2, r3}
   1c348:	add	ip, sp, #40	; 0x28
   1c34c:	ldr	r5, [pc, #400]	; 1c4e4 <__assert_fail@plt+0xb114>
   1c350:	stmia	ip!, {r0, r1, r2, r3}
   1c354:	ldm	lr!, {r0, r1, r2, r3}
   1c358:	ldr	r4, [sp, #52]	; 0x34
   1c35c:	stmia	ip!, {r0, r1, r2, r3}
   1c360:	ldm	lr, {r0, r1, r2, r3}
   1c364:	mvn	lr, r4
   1c368:	and	lr, lr, #67108864	; 0x4000000
   1c36c:	eor	lr, lr, r4
   1c370:	stm	ip, {r0, r1, r2, r3}
   1c374:	str	lr, [sp, #52]	; 0x34
   1c378:	bl	11298 <__errno_location@plt>
   1c37c:	ldr	r2, [r5, #4]
   1c380:	ldr	r4, [r5]
   1c384:	cmp	r2, #0
   1c388:	ldr	r3, [r0]
   1c38c:	mov	r7, r0
   1c390:	str	r3, [sp, #28]
   1c394:	bgt	1c3f0 <__assert_fail@plt+0xb020>
   1c398:	add	r6, r5, #8
   1c39c:	cmp	r4, r6
   1c3a0:	str	r2, [sp, #36]	; 0x24
   1c3a4:	beq	1c4b0 <__assert_fail@plt+0xb0e0>
   1c3a8:	mov	r3, #8
   1c3ac:	mov	r0, r4
   1c3b0:	str	r3, [sp]
   1c3b4:	rsb	r2, r2, #1
   1c3b8:	mvn	r3, #-2147483648	; 0x80000000
   1c3bc:	add	r1, sp, #36	; 0x24
   1c3c0:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c3c4:	mov	r4, r0
   1c3c8:	str	r0, [r5]
   1c3cc:	ldr	r0, [r5, #4]
   1c3d0:	ldr	r2, [sp, #36]	; 0x24
   1c3d4:	mov	r1, #0
   1c3d8:	sub	r2, r2, r0
   1c3dc:	add	r0, r4, r0, lsl #3
   1c3e0:	lsl	r2, r2, #3
   1c3e4:	bl	112c8 <memset@plt>
   1c3e8:	ldr	r3, [sp, #36]	; 0x24
   1c3ec:	str	r3, [r5, #4]
   1c3f0:	ldr	r6, [sp, #44]	; 0x2c
   1c3f4:	ldr	r8, [r4]
   1c3f8:	ldr	r5, [r4, #4]
   1c3fc:	ldr	r2, [sp, #80]	; 0x50
   1c400:	ldr	r3, [sp, #40]	; 0x28
   1c404:	ldr	ip, [sp, #84]	; 0x54
   1c408:	orr	r6, r6, #1
   1c40c:	add	fp, sp, #48	; 0x30
   1c410:	str	r2, [sp, #12]
   1c414:	str	r3, [sp]
   1c418:	str	r6, [sp, #4]
   1c41c:	mov	r1, r8
   1c420:	mov	r0, r5
   1c424:	str	ip, [sp, #16]
   1c428:	str	fp, [sp, #8]
   1c42c:	mov	r3, sl
   1c430:	mov	r2, r9
   1c434:	bl	196e8 <__assert_fail@plt+0x8318>
   1c438:	cmp	r8, r0
   1c43c:	bhi	1c49c <__assert_fail@plt+0xb0cc>
   1c440:	ldr	r3, [pc, #160]	; 1c4e8 <__assert_fail@plt+0xb118>
   1c444:	add	r8, r0, #1
   1c448:	cmp	r5, r3
   1c44c:	str	r8, [r4]
   1c450:	beq	1c45c <__assert_fail@plt+0xb08c>
   1c454:	mov	r0, r5
   1c458:	bl	1ee10 <__assert_fail@plt+0xda40>
   1c45c:	mov	r0, r8
   1c460:	bl	1e564 <__assert_fail@plt+0xd194>
   1c464:	ldr	ip, [sp, #84]	; 0x54
   1c468:	ldr	lr, [sp, #40]	; 0x28
   1c46c:	mov	r3, sl
   1c470:	mov	r2, r9
   1c474:	mov	r1, r8
   1c478:	str	r0, [r4, #4]
   1c47c:	ldr	r4, [sp, #80]	; 0x50
   1c480:	str	fp, [sp, #8]
   1c484:	str	r6, [sp, #4]
   1c488:	str	ip, [sp, #16]
   1c48c:	str	r4, [sp, #12]
   1c490:	str	lr, [sp]
   1c494:	mov	r5, r0
   1c498:	bl	196e8 <__assert_fail@plt+0x8318>
   1c49c:	ldr	r3, [sp, #28]
   1c4a0:	mov	r0, r5
   1c4a4:	str	r3, [r7]
   1c4a8:	add	sp, sp, #92	; 0x5c
   1c4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4b0:	mov	r3, #8
   1c4b4:	str	r3, [sp]
   1c4b8:	add	r1, sp, #36	; 0x24
   1c4bc:	rsb	r2, r2, #1
   1c4c0:	mvn	r3, #-2147483648	; 0x80000000
   1c4c4:	mov	r0, #0
   1c4c8:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c4cc:	mov	r4, r0
   1c4d0:	ldm	r6, {r0, r1}
   1c4d4:	str	r4, [r5]
   1c4d8:	stm	r4, {r0, r1}
   1c4dc:	b	1c3cc <__assert_fail@plt+0xaffc>
   1c4e0:	ldrdeq	r4, [r3], -ip
   1c4e4:	andeq	r4, r3, ip, asr #2
   1c4e8:	andeq	r4, r3, ip, lsl #4
   1c4ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4f0:	sub	sp, sp, #180	; 0xb4
   1c4f4:	mov	r6, r1
   1c4f8:	mov	r4, r0
   1c4fc:	mov	r9, r2
   1c500:	add	r0, sp, #80	; 0x50
   1c504:	mov	r2, #48	; 0x30
   1c508:	mov	r1, #0
   1c50c:	bl	112c8 <memset@plt>
   1c510:	cmp	r6, #10
   1c514:	beq	1c6f4 <__assert_fail@plt+0xb324>
   1c518:	add	r5, sp, #80	; 0x50
   1c51c:	str	r6, [sp, #80]	; 0x50
   1c520:	ldm	r5!, {r0, r1, r2, r3}
   1c524:	add	ip, sp, #128	; 0x80
   1c528:	mov	r7, ip
   1c52c:	add	lr, sp, #32
   1c530:	stmia	ip!, {r0, r1, r2, r3}
   1c534:	mov	r8, #67108864	; 0x4000000
   1c538:	ldm	r5!, {r0, r1, r2, r3}
   1c53c:	ldr	r6, [pc, #436]	; 1c6f8 <__assert_fail@plt+0xb328>
   1c540:	stmia	ip!, {r0, r1, r2, r3}
   1c544:	ldm	r5, {r0, r1, r2, r3}
   1c548:	stm	ip, {r0, r1, r2, r3}
   1c54c:	ldm	r7!, {r0, r1, r2, r3}
   1c550:	stmia	lr!, {r0, r1, r2, r3}
   1c554:	ldm	r7!, {r0, r1, r2, r3}
   1c558:	str	r8, [sp, #44]	; 0x2c
   1c55c:	stmia	lr!, {r0, r1, r2, r3}
   1c560:	ldm	ip, {r0, r1, r2, r3}
   1c564:	stm	lr, {r0, r1, r2, r3}
   1c568:	bl	11298 <__errno_location@plt>
   1c56c:	cmn	r4, #-2147483647	; 0x80000001
   1c570:	ldr	r5, [r6]
   1c574:	mov	r7, r0
   1c578:	movne	r0, #0
   1c57c:	moveq	r0, #1
   1c580:	ldr	r3, [r7]
   1c584:	orrs	r0, r0, r4, lsr #31
   1c588:	str	r3, [sp, #24]
   1c58c:	bne	1c6f4 <__assert_fail@plt+0xb324>
   1c590:	ldr	r2, [r6, #4]
   1c594:	cmp	r4, r2
   1c598:	blt	1c5f8 <__assert_fail@plt+0xb228>
   1c59c:	add	r8, r6, #8
   1c5a0:	cmp	r5, r8
   1c5a4:	str	r2, [sp, #80]	; 0x50
   1c5a8:	beq	1c6c4 <__assert_fail@plt+0xb2f4>
   1c5ac:	mov	r3, #8
   1c5b0:	sub	r2, r4, r2
   1c5b4:	mov	r0, r5
   1c5b8:	str	r3, [sp]
   1c5bc:	add	r2, r2, #1
   1c5c0:	add	r1, sp, #80	; 0x50
   1c5c4:	mvn	r3, #-2147483648	; 0x80000000
   1c5c8:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c5cc:	mov	r5, r0
   1c5d0:	str	r0, [r6]
   1c5d4:	ldr	r0, [r6, #4]
   1c5d8:	ldr	r2, [sp, #80]	; 0x50
   1c5dc:	mov	r1, #0
   1c5e0:	sub	r2, r2, r0
   1c5e4:	add	r0, r5, r0, lsl #3
   1c5e8:	lsl	r2, r2, #3
   1c5ec:	bl	112c8 <memset@plt>
   1c5f0:	ldr	r3, [sp, #80]	; 0x50
   1c5f4:	str	r3, [r6, #4]
   1c5f8:	add	fp, r5, r4, lsl #3
   1c5fc:	ldr	r1, [sp, #36]	; 0x24
   1c600:	ldr	r8, [r5, r4, lsl #3]
   1c604:	ldr	r6, [fp, #4]
   1c608:	ldr	r2, [sp, #72]	; 0x48
   1c60c:	ldr	r3, [sp, #32]
   1c610:	ldr	ip, [sp, #76]	; 0x4c
   1c614:	orr	r1, r1, #1
   1c618:	add	sl, sp, #40	; 0x28
   1c61c:	str	r1, [sp, #28]
   1c620:	str	r1, [sp, #4]
   1c624:	str	r2, [sp, #12]
   1c628:	str	r3, [sp]
   1c62c:	mov	r0, r6
   1c630:	mov	r1, r8
   1c634:	str	ip, [sp, #16]
   1c638:	str	sl, [sp, #8]
   1c63c:	mvn	r3, #0
   1c640:	mov	r2, r9
   1c644:	bl	196e8 <__assert_fail@plt+0x8318>
   1c648:	cmp	r8, r0
   1c64c:	bhi	1c6b0 <__assert_fail@plt+0xb2e0>
   1c650:	ldr	r3, [pc, #164]	; 1c6fc <__assert_fail@plt+0xb32c>
   1c654:	add	r8, r0, #1
   1c658:	cmp	r6, r3
   1c65c:	str	r8, [r5, r4, lsl #3]
   1c660:	beq	1c66c <__assert_fail@plt+0xb29c>
   1c664:	mov	r0, r6
   1c668:	bl	1ee10 <__assert_fail@plt+0xda40>
   1c66c:	mov	r0, r8
   1c670:	bl	1e564 <__assert_fail@plt+0xd194>
   1c674:	ldr	lr, [sp, #76]	; 0x4c
   1c678:	ldr	r3, [sp, #32]
   1c67c:	ldr	ip, [sp, #72]	; 0x48
   1c680:	ldr	r4, [sp, #28]
   1c684:	mov	r2, r9
   1c688:	mov	r1, r8
   1c68c:	str	r0, [fp, #4]
   1c690:	str	r3, [sp]
   1c694:	str	sl, [sp, #8]
   1c698:	str	r4, [sp, #4]
   1c69c:	str	lr, [sp, #16]
   1c6a0:	str	ip, [sp, #12]
   1c6a4:	mvn	r3, #0
   1c6a8:	mov	r6, r0
   1c6ac:	bl	196e8 <__assert_fail@plt+0x8318>
   1c6b0:	ldr	r3, [sp, #24]
   1c6b4:	mov	r0, r6
   1c6b8:	str	r3, [r7]
   1c6bc:	add	sp, sp, #180	; 0xb4
   1c6c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6c4:	mov	r3, #8
   1c6c8:	sub	r2, r4, r2
   1c6cc:	add	r1, sp, #80	; 0x50
   1c6d0:	str	r3, [sp]
   1c6d4:	add	r2, r2, #1
   1c6d8:	mvn	r3, #-2147483648	; 0x80000000
   1c6dc:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c6e0:	mov	r5, r0
   1c6e4:	ldm	r8, {r0, r1}
   1c6e8:	str	r5, [r6]
   1c6ec:	stm	r5, {r0, r1}
   1c6f0:	b	1c5d4 <__assert_fail@plt+0xb204>
   1c6f4:	bl	113a0 <abort@plt>
   1c6f8:	andeq	r4, r3, ip, asr #2
   1c6fc:	andeq	r4, r3, ip, lsl #4
   1c700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c704:	mov	r7, r1
   1c708:	ldr	lr, [pc, #492]	; 1c8fc <__assert_fail@plt+0xb52c>
   1c70c:	mov	r8, r2
   1c710:	mov	r4, r0
   1c714:	mov	fp, r3
   1c718:	ldm	lr!, {r0, r1, r2, r3}
   1c71c:	sub	sp, sp, #100	; 0x64
   1c720:	add	ip, sp, #48	; 0x30
   1c724:	mov	sl, #10
   1c728:	stmia	ip!, {r0, r1, r2, r3}
   1c72c:	cmp	r8, #0
   1c730:	cmpne	r7, #0
   1c734:	ldm	lr!, {r0, r1, r2, r3}
   1c738:	str	sl, [sp, #48]	; 0x30
   1c73c:	stmia	ip!, {r0, r1, r2, r3}
   1c740:	ldm	lr, {r0, r1, r2, r3}
   1c744:	stm	ip, {r0, r1, r2, r3}
   1c748:	beq	1c8f8 <__assert_fail@plt+0xb528>
   1c74c:	str	r7, [sp, #88]	; 0x58
   1c750:	str	r8, [sp, #92]	; 0x5c
   1c754:	bl	11298 <__errno_location@plt>
   1c758:	ldr	r6, [pc, #416]	; 1c900 <__assert_fail@plt+0xb530>
   1c75c:	cmn	r4, #-2147483647	; 0x80000001
   1c760:	ldr	r5, [r6]
   1c764:	mov	r9, r0
   1c768:	movne	r0, #0
   1c76c:	moveq	r0, #1
   1c770:	ldr	r3, [r9]
   1c774:	orrs	r0, r0, r4, lsr #31
   1c778:	str	r3, [sp, #28]
   1c77c:	bne	1c8f8 <__assert_fail@plt+0xb528>
   1c780:	ldr	r2, [r6, #4]
   1c784:	cmp	r4, r2
   1c788:	movlt	r3, sl
   1c78c:	blt	1c7f8 <__assert_fail@plt+0xb428>
   1c790:	add	r7, r6, #8
   1c794:	cmp	r5, r7
   1c798:	str	r2, [sp, #44]	; 0x2c
   1c79c:	beq	1c8c8 <__assert_fail@plt+0xb4f8>
   1c7a0:	mov	r3, #8
   1c7a4:	sub	r2, r4, r2
   1c7a8:	mov	r0, r5
   1c7ac:	str	r3, [sp]
   1c7b0:	add	r2, r2, #1
   1c7b4:	mvn	r3, #-2147483648	; 0x80000000
   1c7b8:	add	r1, sp, #44	; 0x2c
   1c7bc:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c7c0:	mov	r5, r0
   1c7c4:	str	r0, [r6]
   1c7c8:	ldr	r0, [r6, #4]
   1c7cc:	ldr	r2, [sp, #44]	; 0x2c
   1c7d0:	mov	r1, #0
   1c7d4:	sub	r2, r2, r0
   1c7d8:	add	r0, r5, r0, lsl #3
   1c7dc:	lsl	r2, r2, #3
   1c7e0:	bl	112c8 <memset@plt>
   1c7e4:	ldr	r3, [sp, #48]	; 0x30
   1c7e8:	ldr	r7, [sp, #88]	; 0x58
   1c7ec:	ldr	r8, [sp, #92]	; 0x5c
   1c7f0:	ldr	r2, [sp, #44]	; 0x2c
   1c7f4:	str	r2, [r6, #4]
   1c7f8:	add	r2, r5, r4, lsl #3
   1c7fc:	mov	r1, r2
   1c800:	str	r2, [sp, #32]
   1c804:	ldr	r2, [sp, #52]	; 0x34
   1c808:	ldr	r6, [r1, #4]
   1c80c:	ldr	sl, [r5, r4, lsl #3]
   1c810:	orr	r2, r2, #1
   1c814:	str	r3, [sp]
   1c818:	add	r3, sp, #56	; 0x38
   1c81c:	str	r2, [sp, #36]	; 0x24
   1c820:	str	r2, [sp, #4]
   1c824:	str	r3, [sp, #8]
   1c828:	mov	r0, r6
   1c82c:	str	r8, [sp, #16]
   1c830:	str	r7, [sp, #12]
   1c834:	mov	r1, sl
   1c838:	mvn	r3, #0
   1c83c:	mov	r2, fp
   1c840:	bl	196e8 <__assert_fail@plt+0x8318>
   1c844:	cmp	sl, r0
   1c848:	bhi	1c8b4 <__assert_fail@plt+0xb4e4>
   1c84c:	ldr	r3, [pc, #176]	; 1c904 <__assert_fail@plt+0xb534>
   1c850:	add	r7, r0, #1
   1c854:	cmp	r6, r3
   1c858:	str	r7, [r5, r4, lsl #3]
   1c85c:	beq	1c868 <__assert_fail@plt+0xb498>
   1c860:	mov	r0, r6
   1c864:	bl	1ee10 <__assert_fail@plt+0xda40>
   1c868:	mov	r0, r7
   1c86c:	bl	1e564 <__assert_fail@plt+0xd194>
   1c870:	ldr	r3, [sp, #32]
   1c874:	ldr	lr, [sp, #92]	; 0x5c
   1c878:	ldr	ip, [sp, #88]	; 0x58
   1c87c:	ldr	r4, [sp, #36]	; 0x24
   1c880:	mov	r2, fp
   1c884:	mov	r1, r7
   1c888:	str	r0, [r3, #4]
   1c88c:	add	r3, sp, #56	; 0x38
   1c890:	str	r3, [sp, #8]
   1c894:	ldr	r3, [sp, #48]	; 0x30
   1c898:	str	r4, [sp, #4]
   1c89c:	str	r3, [sp]
   1c8a0:	str	lr, [sp, #16]
   1c8a4:	str	ip, [sp, #12]
   1c8a8:	mvn	r3, #0
   1c8ac:	mov	r6, r0
   1c8b0:	bl	196e8 <__assert_fail@plt+0x8318>
   1c8b4:	ldr	r3, [sp, #28]
   1c8b8:	mov	r0, r6
   1c8bc:	str	r3, [r9]
   1c8c0:	add	sp, sp, #100	; 0x64
   1c8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8c8:	mov	r3, #8
   1c8cc:	sub	r2, r4, r2
   1c8d0:	str	r3, [sp]
   1c8d4:	add	r1, sp, #44	; 0x2c
   1c8d8:	add	r2, r2, #1
   1c8dc:	mvn	r3, #-2147483648	; 0x80000000
   1c8e0:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c8e4:	mov	r5, r0
   1c8e8:	ldm	r7, {r0, r1}
   1c8ec:	str	r5, [r6]
   1c8f0:	stm	r5, {r0, r1}
   1c8f4:	b	1c7c8 <__assert_fail@plt+0xb3f8>
   1c8f8:	bl	113a0 <abort@plt>
   1c8fc:	ldrdeq	r4, [r3], -ip
   1c900:	andeq	r4, r3, ip, asr #2
   1c904:	andeq	r4, r3, ip, lsl #4
   1c908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c90c:	mov	r7, r1
   1c910:	ldr	lr, [pc, #492]	; 1cb04 <__assert_fail@plt+0xb734>
   1c914:	mov	r8, r2
   1c918:	mov	r4, r0
   1c91c:	mov	fp, r3
   1c920:	ldm	lr!, {r0, r1, r2, r3}
   1c924:	sub	sp, sp, #100	; 0x64
   1c928:	add	ip, sp, #48	; 0x30
   1c92c:	mov	sl, #10
   1c930:	stmia	ip!, {r0, r1, r2, r3}
   1c934:	cmp	r8, #0
   1c938:	cmpne	r7, #0
   1c93c:	ldm	lr!, {r0, r1, r2, r3}
   1c940:	str	sl, [sp, #48]	; 0x30
   1c944:	stmia	ip!, {r0, r1, r2, r3}
   1c948:	ldm	lr, {r0, r1, r2, r3}
   1c94c:	stm	ip, {r0, r1, r2, r3}
   1c950:	beq	1cb00 <__assert_fail@plt+0xb730>
   1c954:	str	r7, [sp, #88]	; 0x58
   1c958:	str	r8, [sp, #92]	; 0x5c
   1c95c:	bl	11298 <__errno_location@plt>
   1c960:	ldr	r6, [pc, #416]	; 1cb08 <__assert_fail@plt+0xb738>
   1c964:	cmn	r4, #-2147483647	; 0x80000001
   1c968:	ldr	r5, [r6]
   1c96c:	mov	r9, r0
   1c970:	movne	r0, #0
   1c974:	moveq	r0, #1
   1c978:	ldr	r3, [r9]
   1c97c:	orrs	r0, r0, r4, lsr #31
   1c980:	str	r3, [sp, #28]
   1c984:	bne	1cb00 <__assert_fail@plt+0xb730>
   1c988:	ldr	r2, [r6, #4]
   1c98c:	cmp	r4, r2
   1c990:	movlt	r3, sl
   1c994:	blt	1ca00 <__assert_fail@plt+0xb630>
   1c998:	add	r7, r6, #8
   1c99c:	cmp	r5, r7
   1c9a0:	str	r2, [sp, #44]	; 0x2c
   1c9a4:	beq	1cad0 <__assert_fail@plt+0xb700>
   1c9a8:	mov	r3, #8
   1c9ac:	sub	r2, r4, r2
   1c9b0:	mov	r0, r5
   1c9b4:	str	r3, [sp]
   1c9b8:	add	r2, r2, #1
   1c9bc:	mvn	r3, #-2147483648	; 0x80000000
   1c9c0:	add	r1, sp, #44	; 0x2c
   1c9c4:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1c9c8:	mov	r5, r0
   1c9cc:	str	r0, [r6]
   1c9d0:	ldr	r0, [r6, #4]
   1c9d4:	ldr	r2, [sp, #44]	; 0x2c
   1c9d8:	mov	r1, #0
   1c9dc:	sub	r2, r2, r0
   1c9e0:	add	r0, r5, r0, lsl #3
   1c9e4:	lsl	r2, r2, #3
   1c9e8:	bl	112c8 <memset@plt>
   1c9ec:	ldr	r3, [sp, #48]	; 0x30
   1c9f0:	ldr	r7, [sp, #88]	; 0x58
   1c9f4:	ldr	r8, [sp, #92]	; 0x5c
   1c9f8:	ldr	r2, [sp, #44]	; 0x2c
   1c9fc:	str	r2, [r6, #4]
   1ca00:	add	r2, r5, r4, lsl #3
   1ca04:	mov	r1, r2
   1ca08:	str	r2, [sp, #32]
   1ca0c:	ldr	r2, [sp, #52]	; 0x34
   1ca10:	ldr	r6, [r1, #4]
   1ca14:	ldr	sl, [r5, r4, lsl #3]
   1ca18:	orr	r2, r2, #1
   1ca1c:	str	r3, [sp]
   1ca20:	add	r3, sp, #56	; 0x38
   1ca24:	str	r2, [sp, #36]	; 0x24
   1ca28:	str	r2, [sp, #4]
   1ca2c:	str	r3, [sp, #8]
   1ca30:	mov	r0, r6
   1ca34:	str	r8, [sp, #16]
   1ca38:	str	r7, [sp, #12]
   1ca3c:	mov	r1, sl
   1ca40:	ldr	r3, [sp, #136]	; 0x88
   1ca44:	mov	r2, fp
   1ca48:	bl	196e8 <__assert_fail@plt+0x8318>
   1ca4c:	cmp	sl, r0
   1ca50:	bhi	1cabc <__assert_fail@plt+0xb6ec>
   1ca54:	ldr	r3, [pc, #176]	; 1cb0c <__assert_fail@plt+0xb73c>
   1ca58:	add	r7, r0, #1
   1ca5c:	cmp	r6, r3
   1ca60:	str	r7, [r5, r4, lsl #3]
   1ca64:	beq	1ca70 <__assert_fail@plt+0xb6a0>
   1ca68:	mov	r0, r6
   1ca6c:	bl	1ee10 <__assert_fail@plt+0xda40>
   1ca70:	mov	r0, r7
   1ca74:	bl	1e564 <__assert_fail@plt+0xd194>
   1ca78:	ldr	r3, [sp, #32]
   1ca7c:	ldr	lr, [sp, #92]	; 0x5c
   1ca80:	ldr	ip, [sp, #88]	; 0x58
   1ca84:	ldr	r4, [sp, #36]	; 0x24
   1ca88:	mov	r2, fp
   1ca8c:	mov	r1, r7
   1ca90:	str	r0, [r3, #4]
   1ca94:	add	r3, sp, #56	; 0x38
   1ca98:	str	r3, [sp, #8]
   1ca9c:	ldr	r3, [sp, #48]	; 0x30
   1caa0:	str	r4, [sp, #4]
   1caa4:	str	r3, [sp]
   1caa8:	str	lr, [sp, #16]
   1caac:	str	ip, [sp, #12]
   1cab0:	ldr	r3, [sp, #136]	; 0x88
   1cab4:	mov	r6, r0
   1cab8:	bl	196e8 <__assert_fail@plt+0x8318>
   1cabc:	ldr	r3, [sp, #28]
   1cac0:	mov	r0, r6
   1cac4:	str	r3, [r9]
   1cac8:	add	sp, sp, #100	; 0x64
   1cacc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cad0:	mov	r3, #8
   1cad4:	sub	r2, r4, r2
   1cad8:	str	r3, [sp]
   1cadc:	add	r1, sp, #44	; 0x2c
   1cae0:	add	r2, r2, #1
   1cae4:	mvn	r3, #-2147483648	; 0x80000000
   1cae8:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1caec:	mov	r5, r0
   1caf0:	ldm	r7, {r0, r1}
   1caf4:	str	r5, [r6]
   1caf8:	stm	r5, {r0, r1}
   1cafc:	b	1c9d0 <__assert_fail@plt+0xb600>
   1cb00:	bl	113a0 <abort@plt>
   1cb04:	ldrdeq	r4, [r3], -ip
   1cb08:	andeq	r4, r3, ip, asr #2
   1cb0c:	andeq	r4, r3, ip, lsl #4
   1cb10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb14:	mov	r5, r0
   1cb18:	ldr	lr, [pc, #452]	; 1cce4 <__assert_fail@plt+0xb914>
   1cb1c:	mov	r6, r1
   1cb20:	mov	sl, r2
   1cb24:	ldm	lr!, {r0, r1, r2, r3}
   1cb28:	sub	sp, sp, #92	; 0x5c
   1cb2c:	add	ip, sp, #40	; 0x28
   1cb30:	cmp	r6, #0
   1cb34:	cmpne	r5, #0
   1cb38:	stmia	ip!, {r0, r1, r2, r3}
   1cb3c:	mov	r9, #10
   1cb40:	ldm	lr!, {r0, r1, r2, r3}
   1cb44:	moveq	fp, #1
   1cb48:	movne	fp, #0
   1cb4c:	str	r9, [sp, #40]	; 0x28
   1cb50:	stmia	ip!, {r0, r1, r2, r3}
   1cb54:	ldm	lr, {r0, r1, r2, r3}
   1cb58:	stm	ip, {r0, r1, r2, r3}
   1cb5c:	beq	1cce0 <__assert_fail@plt+0xb910>
   1cb60:	str	r5, [sp, #80]	; 0x50
   1cb64:	str	r6, [sp, #84]	; 0x54
   1cb68:	bl	11298 <__errno_location@plt>
   1cb6c:	ldr	r7, [pc, #372]	; 1cce8 <__assert_fail@plt+0xb918>
   1cb70:	ldr	r2, [r7, #4]
   1cb74:	ldr	r4, [r7]
   1cb78:	cmp	r2, #0
   1cb7c:	ldr	r3, [r0]
   1cb80:	mov	r8, r0
   1cb84:	str	r3, [sp, #24]
   1cb88:	movgt	r3, r9
   1cb8c:	bgt	1cbf4 <__assert_fail@plt+0xb824>
   1cb90:	add	r5, r7, #8
   1cb94:	cmp	r4, r5
   1cb98:	str	r2, [sp, #36]	; 0x24
   1cb9c:	beq	1ccb0 <__assert_fail@plt+0xb8e0>
   1cba0:	mov	r3, #8
   1cba4:	mov	r0, r4
   1cba8:	str	r3, [sp]
   1cbac:	rsb	r2, r2, #1
   1cbb0:	mvn	r3, #-2147483648	; 0x80000000
   1cbb4:	add	r1, sp, #36	; 0x24
   1cbb8:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1cbbc:	mov	r4, r0
   1cbc0:	str	r0, [r7]
   1cbc4:	ldr	r0, [r7, #4]
   1cbc8:	ldr	r2, [sp, #36]	; 0x24
   1cbcc:	mov	r1, #0
   1cbd0:	sub	r2, r2, r0
   1cbd4:	add	r0, r4, r0, lsl #3
   1cbd8:	lsl	r2, r2, #3
   1cbdc:	bl	112c8 <memset@plt>
   1cbe0:	ldr	r3, [sp, #40]	; 0x28
   1cbe4:	ldr	r5, [sp, #80]	; 0x50
   1cbe8:	ldr	r6, [sp, #84]	; 0x54
   1cbec:	ldr	r2, [sp, #36]	; 0x24
   1cbf0:	str	r2, [r7, #4]
   1cbf4:	ldr	r2, [sp, #44]	; 0x2c
   1cbf8:	ldr	r9, [r4]
   1cbfc:	ldr	r7, [r4, #4]
   1cc00:	orr	r2, r2, #1
   1cc04:	add	fp, sp, #48	; 0x30
   1cc08:	str	r2, [sp, #28]
   1cc0c:	str	r2, [sp, #4]
   1cc10:	str	r3, [sp]
   1cc14:	str	r6, [sp, #16]
   1cc18:	str	r5, [sp, #12]
   1cc1c:	mov	r1, r9
   1cc20:	mov	r0, r7
   1cc24:	str	fp, [sp, #8]
   1cc28:	mvn	r3, #0
   1cc2c:	mov	r2, sl
   1cc30:	bl	196e8 <__assert_fail@plt+0x8318>
   1cc34:	cmp	r9, r0
   1cc38:	bhi	1cc9c <__assert_fail@plt+0xb8cc>
   1cc3c:	ldr	r3, [pc, #168]	; 1ccec <__assert_fail@plt+0xb91c>
   1cc40:	add	r5, r0, #1
   1cc44:	cmp	r7, r3
   1cc48:	str	r5, [r4]
   1cc4c:	beq	1cc58 <__assert_fail@plt+0xb888>
   1cc50:	mov	r0, r7
   1cc54:	bl	1ee10 <__assert_fail@plt+0xda40>
   1cc58:	mov	r0, r5
   1cc5c:	bl	1e564 <__assert_fail@plt+0xd194>
   1cc60:	ldr	lr, [sp, #84]	; 0x54
   1cc64:	ldr	r3, [sp, #40]	; 0x28
   1cc68:	ldr	ip, [sp, #80]	; 0x50
   1cc6c:	mov	r2, sl
   1cc70:	mov	r1, r5
   1cc74:	str	r0, [r4, #4]
   1cc78:	ldr	r4, [sp, #28]
   1cc7c:	str	r3, [sp]
   1cc80:	str	fp, [sp, #8]
   1cc84:	str	r4, [sp, #4]
   1cc88:	str	lr, [sp, #16]
   1cc8c:	str	ip, [sp, #12]
   1cc90:	mvn	r3, #0
   1cc94:	mov	r7, r0
   1cc98:	bl	196e8 <__assert_fail@plt+0x8318>
   1cc9c:	ldr	r3, [sp, #24]
   1cca0:	mov	r0, r7
   1cca4:	str	r3, [r8]
   1cca8:	add	sp, sp, #92	; 0x5c
   1ccac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccb0:	mov	r3, #8
   1ccb4:	str	r3, [sp]
   1ccb8:	add	r1, sp, #36	; 0x24
   1ccbc:	rsb	r2, r2, #1
   1ccc0:	mov	r0, fp
   1ccc4:	mvn	r3, #-2147483648	; 0x80000000
   1ccc8:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1cccc:	mov	r4, r0
   1ccd0:	ldm	r5, {r0, r1}
   1ccd4:	str	r4, [r7]
   1ccd8:	stm	r4, {r0, r1}
   1ccdc:	b	1cbc4 <__assert_fail@plt+0xb7f4>
   1cce0:	bl	113a0 <abort@plt>
   1cce4:	ldrdeq	r4, [r3], -ip
   1cce8:	andeq	r4, r3, ip, asr #2
   1ccec:	andeq	r4, r3, ip, lsl #4
   1ccf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccf4:	mov	r5, r0
   1ccf8:	ldr	lr, [pc, #464]	; 1ced0 <__assert_fail@plt+0xbb00>
   1ccfc:	mov	r6, r1
   1cd00:	mov	sl, r2
   1cd04:	mov	fp, r3
   1cd08:	ldm	lr!, {r0, r1, r2, r3}
   1cd0c:	sub	sp, sp, #92	; 0x5c
   1cd10:	add	ip, sp, #40	; 0x28
   1cd14:	cmp	r6, #0
   1cd18:	cmpne	r5, #0
   1cd1c:	stmia	ip!, {r0, r1, r2, r3}
   1cd20:	moveq	r4, #1
   1cd24:	ldm	lr!, {r0, r1, r2, r3}
   1cd28:	movne	r4, #0
   1cd2c:	mov	r9, #10
   1cd30:	str	r4, [sp, #28]
   1cd34:	stmia	ip!, {r0, r1, r2, r3}
   1cd38:	ldm	lr, {r0, r1, r2, r3}
   1cd3c:	str	r9, [sp, #40]	; 0x28
   1cd40:	stm	ip, {r0, r1, r2, r3}
   1cd44:	beq	1cecc <__assert_fail@plt+0xbafc>
   1cd48:	str	r5, [sp, #80]	; 0x50
   1cd4c:	str	r6, [sp, #84]	; 0x54
   1cd50:	bl	11298 <__errno_location@plt>
   1cd54:	ldr	r7, [pc, #376]	; 1ced4 <__assert_fail@plt+0xbb04>
   1cd58:	ldr	r2, [r7, #4]
   1cd5c:	ldr	r4, [r7]
   1cd60:	cmp	r2, #0
   1cd64:	ldr	r3, [r0]
   1cd68:	mov	r8, r0
   1cd6c:	str	r3, [sp, #24]
   1cd70:	movgt	r3, r9
   1cd74:	bgt	1cddc <__assert_fail@plt+0xba0c>
   1cd78:	add	r5, r7, #8
   1cd7c:	cmp	r4, r5
   1cd80:	str	r2, [sp, #36]	; 0x24
   1cd84:	beq	1ce9c <__assert_fail@plt+0xbacc>
   1cd88:	mov	r3, #8
   1cd8c:	mov	r0, r4
   1cd90:	str	r3, [sp]
   1cd94:	rsb	r2, r2, #1
   1cd98:	mvn	r3, #-2147483648	; 0x80000000
   1cd9c:	add	r1, sp, #36	; 0x24
   1cda0:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1cda4:	mov	r4, r0
   1cda8:	str	r0, [r7]
   1cdac:	ldr	r0, [r7, #4]
   1cdb0:	ldr	r2, [sp, #36]	; 0x24
   1cdb4:	mov	r1, #0
   1cdb8:	sub	r2, r2, r0
   1cdbc:	add	r0, r4, r0, lsl #3
   1cdc0:	lsl	r2, r2, #3
   1cdc4:	bl	112c8 <memset@plt>
   1cdc8:	ldr	r3, [sp, #40]	; 0x28
   1cdcc:	ldr	r5, [sp, #80]	; 0x50
   1cdd0:	ldr	r6, [sp, #84]	; 0x54
   1cdd4:	ldr	r2, [sp, #36]	; 0x24
   1cdd8:	str	r2, [r7, #4]
   1cddc:	ldr	r2, [sp, #44]	; 0x2c
   1cde0:	ldr	r9, [r4]
   1cde4:	ldr	r7, [r4, #4]
   1cde8:	orr	r2, r2, #1
   1cdec:	str	r3, [sp]
   1cdf0:	add	r3, sp, #48	; 0x30
   1cdf4:	str	r2, [sp, #28]
   1cdf8:	str	r2, [sp, #4]
   1cdfc:	str	r3, [sp, #8]
   1ce00:	str	r6, [sp, #16]
   1ce04:	str	r5, [sp, #12]
   1ce08:	mov	r1, r9
   1ce0c:	mov	r0, r7
   1ce10:	mov	r3, fp
   1ce14:	mov	r2, sl
   1ce18:	bl	196e8 <__assert_fail@plt+0x8318>
   1ce1c:	cmp	r9, r0
   1ce20:	bhi	1ce88 <__assert_fail@plt+0xbab8>
   1ce24:	ldr	r3, [pc, #172]	; 1ced8 <__assert_fail@plt+0xbb08>
   1ce28:	add	r5, r0, #1
   1ce2c:	cmp	r7, r3
   1ce30:	str	r5, [r4]
   1ce34:	beq	1ce40 <__assert_fail@plt+0xba70>
   1ce38:	mov	r0, r7
   1ce3c:	bl	1ee10 <__assert_fail@plt+0xda40>
   1ce40:	mov	r0, r5
   1ce44:	bl	1e564 <__assert_fail@plt+0xd194>
   1ce48:	add	lr, sp, #48	; 0x30
   1ce4c:	ldr	ip, [sp, #84]	; 0x54
   1ce50:	mov	r1, r5
   1ce54:	ldr	r5, [sp, #28]
   1ce58:	mov	r3, fp
   1ce5c:	mov	r2, sl
   1ce60:	str	r0, [r4, #4]
   1ce64:	ldr	r4, [sp, #80]	; 0x50
   1ce68:	str	lr, [sp, #8]
   1ce6c:	ldr	lr, [sp, #40]	; 0x28
   1ce70:	str	r5, [sp, #4]
   1ce74:	str	ip, [sp, #16]
   1ce78:	str	r4, [sp, #12]
   1ce7c:	str	lr, [sp]
   1ce80:	mov	r7, r0
   1ce84:	bl	196e8 <__assert_fail@plt+0x8318>
   1ce88:	ldr	r3, [sp, #24]
   1ce8c:	mov	r0, r7
   1ce90:	str	r3, [r8]
   1ce94:	add	sp, sp, #92	; 0x5c
   1ce98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce9c:	mov	r3, #8
   1cea0:	str	r3, [sp]
   1cea4:	add	r1, sp, #36	; 0x24
   1cea8:	rsb	r2, r2, #1
   1ceac:	ldr	r0, [sp, #28]
   1ceb0:	mvn	r3, #-2147483648	; 0x80000000
   1ceb4:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1ceb8:	mov	r4, r0
   1cebc:	ldm	r5, {r0, r1}
   1cec0:	str	r4, [r7]
   1cec4:	stm	r4, {r0, r1}
   1cec8:	b	1cdac <__assert_fail@plt+0xb9dc>
   1cecc:	bl	113a0 <abort@plt>
   1ced0:	ldrdeq	r4, [r3], -ip
   1ced4:	andeq	r4, r3, ip, asr #2
   1ced8:	andeq	r4, r3, ip, lsl #4
   1cedc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cee0:	sub	sp, sp, #52	; 0x34
   1cee4:	mov	r5, r0
   1cee8:	mov	sl, r1
   1ceec:	mov	fp, r2
   1cef0:	bl	11298 <__errno_location@plt>
   1cef4:	ldr	r4, [pc, #404]	; 1d090 <__assert_fail@plt+0xbcc0>
   1cef8:	cmn	r5, #-2147483647	; 0x80000001
   1cefc:	ldr	r6, [r4]
   1cf00:	mov	r8, r0
   1cf04:	movne	r0, #0
   1cf08:	moveq	r0, #1
   1cf0c:	ldr	r3, [r8]
   1cf10:	orrs	r0, r0, r5, lsr #31
   1cf14:	str	r3, [sp, #28]
   1cf18:	bne	1d08c <__assert_fail@plt+0xbcbc>
   1cf1c:	ldr	r2, [r4, #4]
   1cf20:	cmp	r5, r2
   1cf24:	blt	1cf84 <__assert_fail@plt+0xbbb4>
   1cf28:	add	r7, r4, #8
   1cf2c:	cmp	r6, r7
   1cf30:	str	r2, [sp, #44]	; 0x2c
   1cf34:	beq	1d05c <__assert_fail@plt+0xbc8c>
   1cf38:	mov	r3, #8
   1cf3c:	sub	r2, r5, r2
   1cf40:	mov	r0, r6
   1cf44:	str	r3, [sp]
   1cf48:	add	r2, r2, #1
   1cf4c:	mvn	r3, #-2147483648	; 0x80000000
   1cf50:	add	r1, sp, #44	; 0x2c
   1cf54:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1cf58:	mov	r6, r0
   1cf5c:	str	r0, [r4]
   1cf60:	ldr	r0, [r4, #4]
   1cf64:	ldr	r2, [sp, #44]	; 0x2c
   1cf68:	mov	r1, #0
   1cf6c:	sub	r2, r2, r0
   1cf70:	add	r0, r6, r0, lsl #3
   1cf74:	lsl	r2, r2, #3
   1cf78:	bl	112c8 <memset@plt>
   1cf7c:	ldr	r3, [sp, #44]	; 0x2c
   1cf80:	str	r3, [r4, #4]
   1cf84:	ldr	r2, [r4, #56]	; 0x38
   1cf88:	add	r3, r6, r5, lsl #3
   1cf8c:	ldr	r1, [r4, #20]
   1cf90:	ldr	r7, [r3, #4]
   1cf94:	ldr	r9, [r6, r5, lsl #3]
   1cf98:	ldr	ip, [r4, #60]	; 0x3c
   1cf9c:	str	r3, [sp, #32]
   1cfa0:	ldr	r3, [r4, #16]
   1cfa4:	str	r2, [sp, #12]
   1cfa8:	ldr	r2, [pc, #228]	; 1d094 <__assert_fail@plt+0xbcc4>
   1cfac:	orr	r1, r1, #1
   1cfb0:	str	r1, [sp, #36]	; 0x24
   1cfb4:	str	r1, [sp, #4]
   1cfb8:	str	r2, [sp, #8]
   1cfbc:	str	r3, [sp]
   1cfc0:	mov	r0, r7
   1cfc4:	mov	r1, r9
   1cfc8:	str	ip, [sp, #16]
   1cfcc:	mov	r3, fp
   1cfd0:	mov	r2, sl
   1cfd4:	bl	196e8 <__assert_fail@plt+0x8318>
   1cfd8:	cmp	r9, r0
   1cfdc:	bhi	1d048 <__assert_fail@plt+0xbc78>
   1cfe0:	ldr	r3, [pc, #176]	; 1d098 <__assert_fail@plt+0xbcc8>
   1cfe4:	add	r9, r0, #1
   1cfe8:	cmp	r7, r3
   1cfec:	str	r9, [r6, r5, lsl #3]
   1cff0:	beq	1cffc <__assert_fail@plt+0xbc2c>
   1cff4:	mov	r0, r7
   1cff8:	bl	1ee10 <__assert_fail@plt+0xda40>
   1cffc:	mov	r0, r9
   1d000:	bl	1e564 <__assert_fail@plt+0xd194>
   1d004:	ldr	ip, [sp, #32]
   1d008:	ldr	lr, [r4, #60]	; 0x3c
   1d00c:	ldr	r5, [r4, #56]	; 0x38
   1d010:	mov	r3, fp
   1d014:	mov	r2, sl
   1d018:	mov	r1, r9
   1d01c:	str	r0, [ip, #4]
   1d020:	ldr	ip, [r4, #16]
   1d024:	ldr	r4, [pc, #104]	; 1d094 <__assert_fail@plt+0xbcc4>
   1d028:	str	lr, [sp, #16]
   1d02c:	str	r4, [sp, #8]
   1d030:	ldr	r4, [sp, #36]	; 0x24
   1d034:	str	r5, [sp, #12]
   1d038:	str	r4, [sp, #4]
   1d03c:	str	ip, [sp]
   1d040:	mov	r7, r0
   1d044:	bl	196e8 <__assert_fail@plt+0x8318>
   1d048:	ldr	r3, [sp, #28]
   1d04c:	mov	r0, r7
   1d050:	str	r3, [r8]
   1d054:	add	sp, sp, #52	; 0x34
   1d058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d05c:	mov	r3, #8
   1d060:	sub	r2, r5, r2
   1d064:	str	r3, [sp]
   1d068:	add	r1, sp, #44	; 0x2c
   1d06c:	add	r2, r2, #1
   1d070:	mvn	r3, #-2147483648	; 0x80000000
   1d074:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1d078:	mov	r6, r0
   1d07c:	ldm	r7, {r0, r1}
   1d080:	str	r6, [r4]
   1d084:	stm	r6, {r0, r1}
   1d088:	b	1cf60 <__assert_fail@plt+0xbb90>
   1d08c:	bl	113a0 <abort@plt>
   1d090:	andeq	r4, r3, ip, asr #2
   1d094:	andeq	r4, r3, r4, ror #2
   1d098:	andeq	r4, r3, ip, lsl #4
   1d09c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0a0:	sub	sp, sp, #44	; 0x2c
   1d0a4:	mov	r9, r0
   1d0a8:	mov	sl, r1
   1d0ac:	bl	11298 <__errno_location@plt>
   1d0b0:	ldr	r4, [pc, #360]	; 1d220 <__assert_fail@plt+0xbe50>
   1d0b4:	ldr	r2, [r4, #4]
   1d0b8:	ldr	r5, [r4]
   1d0bc:	cmp	r2, #0
   1d0c0:	ldr	r3, [r0]
   1d0c4:	mov	r7, r0
   1d0c8:	str	r3, [sp, #24]
   1d0cc:	bgt	1d128 <__assert_fail@plt+0xbd58>
   1d0d0:	add	r6, r4, #8
   1d0d4:	cmp	r5, r6
   1d0d8:	str	r2, [sp, #36]	; 0x24
   1d0dc:	beq	1d1f0 <__assert_fail@plt+0xbe20>
   1d0e0:	mov	r3, #8
   1d0e4:	mov	r0, r5
   1d0e8:	str	r3, [sp]
   1d0ec:	rsb	r2, r2, #1
   1d0f0:	mvn	r3, #-2147483648	; 0x80000000
   1d0f4:	add	r1, sp, #36	; 0x24
   1d0f8:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1d0fc:	mov	r5, r0
   1d100:	str	r0, [r4]
   1d104:	ldr	r0, [r4, #4]
   1d108:	ldr	r2, [sp, #36]	; 0x24
   1d10c:	mov	r1, #0
   1d110:	sub	r2, r2, r0
   1d114:	add	r0, r5, r0, lsl #3
   1d118:	lsl	r2, r2, #3
   1d11c:	bl	112c8 <memset@plt>
   1d120:	ldr	r3, [sp, #36]	; 0x24
   1d124:	str	r3, [r4, #4]
   1d128:	ldr	r1, [r4, #20]
   1d12c:	ldr	r8, [r5]
   1d130:	ldr	r6, [r5, #4]
   1d134:	ldr	r2, [r4, #56]	; 0x38
   1d138:	ldr	r3, [r4, #16]
   1d13c:	ldr	ip, [r4, #60]	; 0x3c
   1d140:	ldr	fp, [pc, #220]	; 1d224 <__assert_fail@plt+0xbe54>
   1d144:	orr	r1, r1, #1
   1d148:	str	r1, [sp, #28]
   1d14c:	str	r1, [sp, #4]
   1d150:	str	r2, [sp, #12]
   1d154:	str	r3, [sp]
   1d158:	mov	r1, r8
   1d15c:	mov	r0, r6
   1d160:	str	ip, [sp, #16]
   1d164:	str	fp, [sp, #8]
   1d168:	mov	r3, sl
   1d16c:	mov	r2, r9
   1d170:	bl	196e8 <__assert_fail@plt+0x8318>
   1d174:	cmp	r8, r0
   1d178:	bhi	1d1dc <__assert_fail@plt+0xbe0c>
   1d17c:	ldr	r3, [pc, #164]	; 1d228 <__assert_fail@plt+0xbe58>
   1d180:	add	r8, r0, #1
   1d184:	cmp	r6, r3
   1d188:	str	r8, [r5]
   1d18c:	beq	1d198 <__assert_fail@plt+0xbdc8>
   1d190:	mov	r0, r6
   1d194:	bl	1ee10 <__assert_fail@plt+0xda40>
   1d198:	mov	r0, r8
   1d19c:	bl	1e564 <__assert_fail@plt+0xd194>
   1d1a0:	ldr	lr, [r4, #60]	; 0x3c
   1d1a4:	ldr	ip, [r4, #16]
   1d1a8:	mov	r3, sl
   1d1ac:	mov	r2, r9
   1d1b0:	mov	r1, r8
   1d1b4:	str	r0, [r5, #4]
   1d1b8:	ldr	r5, [r4, #56]	; 0x38
   1d1bc:	ldr	r4, [sp, #28]
   1d1c0:	str	fp, [sp, #8]
   1d1c4:	str	r4, [sp, #4]
   1d1c8:	str	lr, [sp, #16]
   1d1cc:	str	r5, [sp, #12]
   1d1d0:	str	ip, [sp]
   1d1d4:	mov	r6, r0
   1d1d8:	bl	196e8 <__assert_fail@plt+0x8318>
   1d1dc:	ldr	r3, [sp, #24]
   1d1e0:	mov	r0, r6
   1d1e4:	str	r3, [r7]
   1d1e8:	add	sp, sp, #44	; 0x2c
   1d1ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1f0:	mov	r3, #8
   1d1f4:	str	r3, [sp]
   1d1f8:	add	r1, sp, #36	; 0x24
   1d1fc:	rsb	r2, r2, #1
   1d200:	mvn	r3, #-2147483648	; 0x80000000
   1d204:	mov	r0, #0
   1d208:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1d20c:	mov	r5, r0
   1d210:	ldm	r6, {r0, r1}
   1d214:	str	r5, [r4]
   1d218:	stm	r5, {r0, r1}
   1d21c:	b	1d104 <__assert_fail@plt+0xbd34>
   1d220:	andeq	r4, r3, ip, asr #2
   1d224:	andeq	r4, r3, r4, ror #2
   1d228:	andeq	r4, r3, ip, lsl #4
   1d22c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d230:	sub	sp, sp, #44	; 0x2c
   1d234:	mov	r5, r0
   1d238:	mov	sl, r1
   1d23c:	bl	11298 <__errno_location@plt>
   1d240:	ldr	r4, [pc, #396]	; 1d3d4 <__assert_fail@plt+0xc004>
   1d244:	cmn	r5, #-2147483647	; 0x80000001
   1d248:	ldr	r6, [r4]
   1d24c:	mov	r8, r0
   1d250:	movne	r0, #0
   1d254:	moveq	r0, #1
   1d258:	ldr	r3, [r8]
   1d25c:	orrs	r0, r0, r5, lsr #31
   1d260:	str	r3, [sp, #24]
   1d264:	bne	1d3d0 <__assert_fail@plt+0xc000>
   1d268:	ldr	r2, [r4, #4]
   1d26c:	cmp	r5, r2
   1d270:	blt	1d2d0 <__assert_fail@plt+0xbf00>
   1d274:	add	r7, r4, #8
   1d278:	cmp	r6, r7
   1d27c:	str	r2, [sp, #36]	; 0x24
   1d280:	beq	1d3a0 <__assert_fail@plt+0xbfd0>
   1d284:	mov	r3, #8
   1d288:	sub	r2, r5, r2
   1d28c:	mov	r0, r6
   1d290:	str	r3, [sp]
   1d294:	add	r2, r2, #1
   1d298:	mvn	r3, #-2147483648	; 0x80000000
   1d29c:	add	r1, sp, #36	; 0x24
   1d2a0:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1d2a4:	mov	r6, r0
   1d2a8:	str	r0, [r4]
   1d2ac:	ldr	r0, [r4, #4]
   1d2b0:	ldr	r2, [sp, #36]	; 0x24
   1d2b4:	mov	r1, #0
   1d2b8:	sub	r2, r2, r0
   1d2bc:	add	r0, r6, r0, lsl #3
   1d2c0:	lsl	r2, r2, #3
   1d2c4:	bl	112c8 <memset@plt>
   1d2c8:	ldr	r3, [sp, #36]	; 0x24
   1d2cc:	str	r3, [r4, #4]
   1d2d0:	ldr	r2, [r4, #56]	; 0x38
   1d2d4:	add	fp, r6, r5, lsl #3
   1d2d8:	ldr	r1, [r4, #20]
   1d2dc:	ldr	r9, [r6, r5, lsl #3]
   1d2e0:	ldr	r7, [fp, #4]
   1d2e4:	ldr	r3, [r4, #16]
   1d2e8:	ldr	ip, [r4, #60]	; 0x3c
   1d2ec:	str	r2, [sp, #12]
   1d2f0:	ldr	r2, [pc, #224]	; 1d3d8 <__assert_fail@plt+0xc008>
   1d2f4:	orr	r1, r1, #1
   1d2f8:	str	r1, [sp, #28]
   1d2fc:	str	r1, [sp, #4]
   1d300:	str	r2, [sp, #8]
   1d304:	str	r3, [sp]
   1d308:	mov	r0, r7
   1d30c:	mov	r1, r9
   1d310:	str	ip, [sp, #16]
   1d314:	mvn	r3, #0
   1d318:	mov	r2, sl
   1d31c:	bl	196e8 <__assert_fail@plt+0x8318>
   1d320:	cmp	r9, r0
   1d324:	bhi	1d38c <__assert_fail@plt+0xbfbc>
   1d328:	ldr	r3, [pc, #172]	; 1d3dc <__assert_fail@plt+0xc00c>
   1d32c:	add	r9, r0, #1
   1d330:	cmp	r7, r3
   1d334:	str	r9, [r6, r5, lsl #3]
   1d338:	beq	1d344 <__assert_fail@plt+0xbf74>
   1d33c:	mov	r0, r7
   1d340:	bl	1ee10 <__assert_fail@plt+0xda40>
   1d344:	mov	r0, r9
   1d348:	bl	1e564 <__assert_fail@plt+0xd194>
   1d34c:	ldr	ip, [r4, #60]	; 0x3c
   1d350:	ldr	r3, [r4, #16]
   1d354:	ldr	lr, [r4, #56]	; 0x38
   1d358:	ldr	r4, [pc, #120]	; 1d3d8 <__assert_fail@plt+0xc008>
   1d35c:	mov	r2, sl
   1d360:	mov	r1, r9
   1d364:	str	r0, [fp, #4]
   1d368:	str	r4, [sp, #8]
   1d36c:	ldr	r4, [sp, #28]
   1d370:	str	r3, [sp]
   1d374:	str	r4, [sp, #4]
   1d378:	str	ip, [sp, #16]
   1d37c:	str	lr, [sp, #12]
   1d380:	mvn	r3, #0
   1d384:	mov	r7, r0
   1d388:	bl	196e8 <__assert_fail@plt+0x8318>
   1d38c:	ldr	r3, [sp, #24]
   1d390:	mov	r0, r7
   1d394:	str	r3, [r8]
   1d398:	add	sp, sp, #44	; 0x2c
   1d39c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3a0:	mov	r3, #8
   1d3a4:	sub	r2, r5, r2
   1d3a8:	str	r3, [sp]
   1d3ac:	add	r1, sp, #36	; 0x24
   1d3b0:	add	r2, r2, #1
   1d3b4:	mvn	r3, #-2147483648	; 0x80000000
   1d3b8:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1d3bc:	mov	r6, r0
   1d3c0:	ldm	r7, {r0, r1}
   1d3c4:	str	r6, [r4]
   1d3c8:	stm	r6, {r0, r1}
   1d3cc:	b	1d2ac <__assert_fail@plt+0xbedc>
   1d3d0:	bl	113a0 <abort@plt>
   1d3d4:	andeq	r4, r3, ip, asr #2
   1d3d8:	andeq	r4, r3, r4, ror #2
   1d3dc:	andeq	r4, r3, ip, lsl #4
   1d3e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3e4:	sub	sp, sp, #44	; 0x2c
   1d3e8:	mov	sl, r0
   1d3ec:	bl	11298 <__errno_location@plt>
   1d3f0:	ldr	r4, [pc, #348]	; 1d554 <__assert_fail@plt+0xc184>
   1d3f4:	ldr	r2, [r4, #4]
   1d3f8:	ldr	r5, [r4]
   1d3fc:	cmp	r2, #0
   1d400:	ldr	r3, [r0]
   1d404:	mov	r8, r0
   1d408:	str	r3, [sp, #28]
   1d40c:	bgt	1d468 <__assert_fail@plt+0xc098>
   1d410:	add	r6, r4, #8
   1d414:	cmp	r5, r6
   1d418:	str	r2, [sp, #36]	; 0x24
   1d41c:	beq	1d524 <__assert_fail@plt+0xc154>
   1d420:	mov	r3, #8
   1d424:	mov	r0, r5
   1d428:	str	r3, [sp]
   1d42c:	rsb	r2, r2, #1
   1d430:	mvn	r3, #-2147483648	; 0x80000000
   1d434:	add	r1, sp, #36	; 0x24
   1d438:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1d43c:	mov	r5, r0
   1d440:	str	r0, [r4]
   1d444:	ldr	r0, [r4, #4]
   1d448:	ldr	r2, [sp, #36]	; 0x24
   1d44c:	mov	r1, #0
   1d450:	sub	r2, r2, r0
   1d454:	add	r0, r5, r0, lsl #3
   1d458:	lsl	r2, r2, #3
   1d45c:	bl	112c8 <memset@plt>
   1d460:	ldr	r3, [sp, #36]	; 0x24
   1d464:	str	r3, [r4, #4]
   1d468:	ldr	r7, [r4, #20]
   1d46c:	ldr	r9, [r5]
   1d470:	ldr	r6, [r5, #4]
   1d474:	ldr	r2, [r4, #56]	; 0x38
   1d478:	ldr	r3, [r4, #16]
   1d47c:	ldr	ip, [r4, #60]	; 0x3c
   1d480:	ldr	fp, [pc, #208]	; 1d558 <__assert_fail@plt+0xc188>
   1d484:	orr	r7, r7, #1
   1d488:	str	r2, [sp, #12]
   1d48c:	str	r3, [sp]
   1d490:	str	r7, [sp, #4]
   1d494:	mov	r1, r9
   1d498:	mov	r0, r6
   1d49c:	str	ip, [sp, #16]
   1d4a0:	str	fp, [sp, #8]
   1d4a4:	mvn	r3, #0
   1d4a8:	mov	r2, sl
   1d4ac:	bl	196e8 <__assert_fail@plt+0x8318>
   1d4b0:	cmp	r9, r0
   1d4b4:	bhi	1d510 <__assert_fail@plt+0xc140>
   1d4b8:	ldr	r3, [pc, #156]	; 1d55c <__assert_fail@plt+0xc18c>
   1d4bc:	add	r9, r0, #1
   1d4c0:	cmp	r6, r3
   1d4c4:	str	r9, [r5]
   1d4c8:	beq	1d4d4 <__assert_fail@plt+0xc104>
   1d4cc:	mov	r0, r6
   1d4d0:	bl	1ee10 <__assert_fail@plt+0xda40>
   1d4d4:	mov	r0, r9
   1d4d8:	bl	1e564 <__assert_fail@plt+0xd194>
   1d4dc:	ldr	ip, [r4, #60]	; 0x3c
   1d4e0:	ldr	r3, [r4, #16]
   1d4e4:	ldr	lr, [r4, #56]	; 0x38
   1d4e8:	mov	r2, sl
   1d4ec:	mov	r1, r9
   1d4f0:	str	r0, [r5, #4]
   1d4f4:	str	r3, [sp]
   1d4f8:	stmib	sp, {r7, fp}
   1d4fc:	str	ip, [sp, #16]
   1d500:	str	lr, [sp, #12]
   1d504:	mvn	r3, #0
   1d508:	mov	r6, r0
   1d50c:	bl	196e8 <__assert_fail@plt+0x8318>
   1d510:	ldr	r3, [sp, #28]
   1d514:	mov	r0, r6
   1d518:	str	r3, [r8]
   1d51c:	add	sp, sp, #44	; 0x2c
   1d520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d524:	mov	r3, #8
   1d528:	str	r3, [sp]
   1d52c:	add	r1, sp, #36	; 0x24
   1d530:	rsb	r2, r2, #1
   1d534:	mvn	r3, #-2147483648	; 0x80000000
   1d538:	mov	r0, #0
   1d53c:	bl	1e780 <__assert_fail@plt+0xd3b0>
   1d540:	mov	r5, r0
   1d544:	ldm	r6, {r0, r1}
   1d548:	str	r5, [r4]
   1d54c:	stm	r5, {r0, r1}
   1d550:	b	1d444 <__assert_fail@plt+0xc074>
   1d554:	andeq	r4, r3, ip, asr #2
   1d558:	andeq	r4, r3, r4, ror #2
   1d55c:	andeq	r4, r3, ip, lsl #4
   1d560:	push	{r4, r5, r6, r7, r8, lr}
   1d564:	mov	r5, r0
   1d568:	ldr	r0, [pc, #296]	; 1d698 <__assert_fail@plt+0xc2c8>
   1d56c:	bl	111d8 <getenv@plt>
   1d570:	ldrb	r3, [r5, #4]
   1d574:	subs	r6, r0, #0
   1d578:	beq	1d66c <__assert_fail@plt+0xc29c>
   1d57c:	cmp	r3, #0
   1d580:	beq	1d5a4 <__assert_fail@plt+0xc1d4>
   1d584:	mov	r1, r6
   1d588:	add	r0, r5, #5
   1d58c:	bl	110a0 <strcmp@plt>
   1d590:	cmp	r0, #0
   1d594:	bne	1d5a4 <__assert_fail@plt+0xc1d4>
   1d598:	mov	r4, #1
   1d59c:	mov	r0, r4
   1d5a0:	pop	{r4, r5, r6, r7, r8, pc}
   1d5a4:	mov	r0, r6
   1d5a8:	bl	11274 <strlen@plt>
   1d5ac:	add	r7, r0, #1
   1d5b0:	cmp	r7, #58	; 0x3a
   1d5b4:	movls	r0, #64	; 0x40
   1d5b8:	addhi	r0, r0, #10
   1d5bc:	bichi	r0, r0, #3
   1d5c0:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1d5c4:	subs	r4, r0, #0
   1d5c8:	beq	1d690 <__assert_fail@plt+0xc2c0>
   1d5cc:	mov	r3, r4
   1d5d0:	mov	r8, #0
   1d5d4:	mov	r2, #1
   1d5d8:	strb	r2, [r4, #4]
   1d5dc:	str	r8, [r4]
   1d5e0:	mov	r1, r6
   1d5e4:	strb	r8, [r3, #5]!
   1d5e8:	mov	r2, r7
   1d5ec:	mov	r0, r3
   1d5f0:	bl	110f4 <memcpy@plt>
   1d5f4:	strb	r8, [r0, r7]
   1d5f8:	ldrb	r3, [r5, #4]
   1d5fc:	cmp	r3, #0
   1d600:	beq	1d650 <__assert_fail@plt+0xc280>
   1d604:	add	r1, r5, #5
   1d608:	mov	r2, #1
   1d60c:	ldr	r0, [pc, #132]	; 1d698 <__assert_fail@plt+0xc2c8>
   1d610:	bl	1128c <setenv@plt>
   1d614:	cmp	r0, #0
   1d618:	beq	1d660 <__assert_fail@plt+0xc290>
   1d61c:	bl	11298 <__errno_location@plt>
   1d620:	cmp	r4, #1
   1d624:	mov	r6, r0
   1d628:	ldr	r7, [r0]
   1d62c:	beq	1d644 <__assert_fail@plt+0xc274>
   1d630:	ldr	r5, [r4]
   1d634:	mov	r0, r4
   1d638:	bl	1ee10 <__assert_fail@plt+0xda40>
   1d63c:	subs	r4, r5, #0
   1d640:	bne	1d630 <__assert_fail@plt+0xc260>
   1d644:	str	r7, [r6]
   1d648:	mov	r4, #0
   1d64c:	b	1d59c <__assert_fail@plt+0xc1cc>
   1d650:	ldr	r0, [pc, #64]	; 1d698 <__assert_fail@plt+0xc2c8>
   1d654:	bl	1137c <unsetenv@plt>
   1d658:	cmp	r0, #0
   1d65c:	bne	1d61c <__assert_fail@plt+0xc24c>
   1d660:	bl	11178 <tzset@plt>
   1d664:	mov	r0, r4
   1d668:	pop	{r4, r5, r6, r7, r8, pc}
   1d66c:	cmp	r3, #0
   1d670:	beq	1d598 <__assert_fail@plt+0xc1c8>
   1d674:	mov	r0, #64	; 0x40
   1d678:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1d67c:	subs	r4, r0, #0
   1d680:	strne	r6, [r4]
   1d684:	strbne	r6, [r4, #4]
   1d688:	strbne	r6, [r4, #5]
   1d68c:	bne	1d5f8 <__assert_fail@plt+0xc228>
   1d690:	mov	r4, #0
   1d694:	b	1d59c <__assert_fail@plt+0xc1cc>
   1d698:	andeq	r3, r2, r0, lsl #13
   1d69c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d6a0:	ldr	r6, [r1, #40]	; 0x28
   1d6a4:	cmp	r6, #0
   1d6a8:	beq	1d7a4 <__assert_fail@plt+0xc3d4>
   1d6ac:	cmp	r1, r6
   1d6b0:	mov	r7, r1
   1d6b4:	mov	r5, r0
   1d6b8:	bhi	1d6c8 <__assert_fail@plt+0xc2f8>
   1d6bc:	add	r3, r1, #44	; 0x2c
   1d6c0:	cmp	r6, r3
   1d6c4:	bcc	1d7a4 <__assert_fail@plt+0xc3d4>
   1d6c8:	ldrb	r3, [r6]
   1d6cc:	cmp	r3, #0
   1d6d0:	addne	r4, r5, #5
   1d6d4:	beq	1d79c <__assert_fail@plt+0xc3cc>
   1d6d8:	mov	r1, r6
   1d6dc:	mov	r0, r4
   1d6e0:	bl	110a0 <strcmp@plt>
   1d6e4:	add	r2, r5, #5
   1d6e8:	cmp	r0, #0
   1d6ec:	mov	r0, r4
   1d6f0:	beq	1d790 <__assert_fail@plt+0xc3c0>
   1d6f4:	ldrb	r3, [r4]
   1d6f8:	cmp	r3, #0
   1d6fc:	bne	1d714 <__assert_fail@plt+0xc344>
   1d700:	cmp	r4, r2
   1d704:	bne	1d7ac <__assert_fail@plt+0xc3dc>
   1d708:	ldrb	r3, [r5, #4]
   1d70c:	cmp	r3, #0
   1d710:	beq	1d7ac <__assert_fail@plt+0xc3dc>
   1d714:	bl	11274 <strlen@plt>
   1d718:	add	r0, r0, #1
   1d71c:	ldrb	r3, [r4, r0]!
   1d720:	cmp	r3, #0
   1d724:	bne	1d6d8 <__assert_fail@plt+0xc308>
   1d728:	ldr	r3, [r5]
   1d72c:	cmp	r3, #0
   1d730:	addne	r4, r3, #5
   1d734:	movne	r5, r3
   1d738:	b	1d6d8 <__assert_fail@plt+0xc308>
   1d73c:	cmp	r8, #58	; 0x3a
   1d740:	addhi	r0, r0, #10
   1d744:	bichi	r0, r0, #3
   1d748:	movls	r0, #64	; 0x40
   1d74c:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1d750:	subs	r9, r0, #0
   1d754:	beq	1d7e4 <__assert_fail@plt+0xc414>
   1d758:	mov	r3, r9
   1d75c:	mov	sl, #0
   1d760:	mov	r2, #1
   1d764:	strb	r2, [r9, #4]
   1d768:	str	sl, [r9]
   1d76c:	mov	r1, r6
   1d770:	strb	sl, [r3, #5]!
   1d774:	mov	r2, r8
   1d778:	mov	r0, r3
   1d77c:	bl	110f4 <memcpy@plt>
   1d780:	mov	r4, r0
   1d784:	strb	sl, [r0, r8]
   1d788:	str	r9, [r5]
   1d78c:	strb	sl, [r9, #4]
   1d790:	str	r4, [r7, #40]	; 0x28
   1d794:	mov	r0, #1
   1d798:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d79c:	ldr	r4, [pc, #76]	; 1d7f0 <__assert_fail@plt+0xc420>
   1d7a0:	b	1d790 <__assert_fail@plt+0xc3c0>
   1d7a4:	mov	r0, #1
   1d7a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d7ac:	mov	r0, r6
   1d7b0:	bl	11274 <strlen@plt>
   1d7b4:	add	r3, r5, #64	; 0x40
   1d7b8:	sub	r3, r3, r4
   1d7bc:	add	r8, r0, #1
   1d7c0:	cmp	r8, r3
   1d7c4:	bge	1d73c <__assert_fail@plt+0xc36c>
   1d7c8:	mov	r1, r6
   1d7cc:	mov	r2, r8
   1d7d0:	mov	r0, r4
   1d7d4:	bl	110f4 <memcpy@plt>
   1d7d8:	mov	r3, #0
   1d7dc:	strb	r3, [r4, r8]
   1d7e0:	b	1d790 <__assert_fail@plt+0xc3c0>
   1d7e4:	mov	r0, r9
   1d7e8:	str	r9, [r5]
   1d7ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d7f0:	andeq	r3, r2, r0, ror #12
   1d7f4:	push	{r4, r5, r6, r7, r8, lr}
   1d7f8:	subs	r7, r0, #0
   1d7fc:	beq	1d858 <__assert_fail@plt+0xc488>
   1d800:	bl	11274 <strlen@plt>
   1d804:	add	r5, r0, #1
   1d808:	cmp	r5, #58	; 0x3a
   1d80c:	addhi	r0, r0, #10
   1d810:	bichi	r0, r0, #3
   1d814:	movls	r0, #64	; 0x40
   1d818:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1d81c:	subs	r4, r0, #0
   1d820:	beq	1d850 <__assert_fail@plt+0xc480>
   1d824:	mov	r3, r4
   1d828:	mov	r6, #0
   1d82c:	mov	r2, #1
   1d830:	strb	r2, [r4, #4]
   1d834:	str	r6, [r4]
   1d838:	mov	r1, r7
   1d83c:	strb	r6, [r3, #5]!
   1d840:	mov	r2, r5
   1d844:	mov	r0, r3
   1d848:	bl	110f4 <memcpy@plt>
   1d84c:	strb	r6, [r0, r5]
   1d850:	mov	r0, r4
   1d854:	pop	{r4, r5, r6, r7, r8, pc}
   1d858:	mov	r0, #64	; 0x40
   1d85c:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1d860:	subs	r4, r0, #0
   1d864:	beq	1d850 <__assert_fail@plt+0xc480>
   1d868:	str	r7, [r4]
   1d86c:	strb	r7, [r4, #4]
   1d870:	strb	r7, [r4, #5]
   1d874:	mov	r0, r4
   1d878:	pop	{r4, r5, r6, r7, r8, pc}
   1d87c:	cmp	r0, #1
   1d880:	bxeq	lr
   1d884:	cmp	r0, #0
   1d888:	beq	1d8a4 <__assert_fail@plt+0xc4d4>
   1d88c:	push	{r4, lr}
   1d890:	ldr	r4, [r0]
   1d894:	bl	1ee10 <__assert_fail@plt+0xda40>
   1d898:	subs	r0, r4, #0
   1d89c:	bne	1d890 <__assert_fail@plt+0xc4c0>
   1d8a0:	pop	{r4, pc}
   1d8a4:	bx	lr
   1d8a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d8ac:	subs	r8, r0, #0
   1d8b0:	mov	r5, r1
   1d8b4:	mov	r6, r2
   1d8b8:	beq	1d988 <__assert_fail@plt+0xc5b8>
   1d8bc:	bl	1d560 <__assert_fail@plt+0xc190>
   1d8c0:	subs	r4, r0, #0
   1d8c4:	beq	1d970 <__assert_fail@plt+0xc5a0>
   1d8c8:	mov	r0, r5
   1d8cc:	mov	r1, r6
   1d8d0:	bl	11154 <localtime_r@plt>
   1d8d4:	subs	r7, r0, #0
   1d8d8:	beq	1d968 <__assert_fail@plt+0xc598>
   1d8dc:	mov	r0, r8
   1d8e0:	mov	r1, r6
   1d8e4:	bl	1d69c <__assert_fail@plt+0xc2cc>
   1d8e8:	cmp	r4, #1
   1d8ec:	mov	r7, r0
   1d8f0:	beq	1d94c <__assert_fail@plt+0xc57c>
   1d8f4:	bl	11298 <__errno_location@plt>
   1d8f8:	ldrb	r3, [r4, #4]
   1d8fc:	cmp	r3, #0
   1d900:	mov	r8, r0
   1d904:	ldr	r9, [r0]
   1d908:	beq	1d97c <__assert_fail@plt+0xc5ac>
   1d90c:	mov	r2, #1
   1d910:	add	r1, r4, #5
   1d914:	ldr	r0, [pc, #124]	; 1d998 <__assert_fail@plt+0xc5c8>
   1d918:	bl	1128c <setenv@plt>
   1d91c:	cmp	r0, #0
   1d920:	beq	1d95c <__assert_fail@plt+0xc58c>
   1d924:	ldr	r9, [r8]
   1d928:	mov	sl, #0
   1d92c:	ldr	r5, [r4]
   1d930:	mov	r0, r4
   1d934:	bl	1ee10 <__assert_fail@plt+0xda40>
   1d938:	subs	r4, r5, #0
   1d93c:	bne	1d92c <__assert_fail@plt+0xc55c>
   1d940:	cmp	sl, #0
   1d944:	str	r9, [r8]
   1d948:	beq	1d970 <__assert_fail@plt+0xc5a0>
   1d94c:	cmp	r7, #0
   1d950:	beq	1d970 <__assert_fail@plt+0xc5a0>
   1d954:	mov	r0, r6
   1d958:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d95c:	bl	11178 <tzset@plt>
   1d960:	mov	sl, #1
   1d964:	b	1d92c <__assert_fail@plt+0xc55c>
   1d968:	cmp	r4, #1
   1d96c:	bne	1d8f4 <__assert_fail@plt+0xc524>
   1d970:	mov	r6, #0
   1d974:	mov	r0, r6
   1d978:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d97c:	ldr	r0, [pc, #20]	; 1d998 <__assert_fail@plt+0xc5c8>
   1d980:	bl	1137c <unsetenv@plt>
   1d984:	b	1d91c <__assert_fail@plt+0xc54c>
   1d988:	mov	r0, r5
   1d98c:	mov	r1, r2
   1d990:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d994:	b	11088 <gmtime_r@plt>
   1d998:	andeq	r3, r2, r0, lsl #13
   1d99c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9a0:	subs	r5, r0, #0
   1d9a4:	sub	sp, sp, #52	; 0x34
   1d9a8:	mov	r6, r1
   1d9ac:	beq	1dadc <__assert_fail@plt+0xc70c>
   1d9b0:	bl	1d560 <__assert_fail@plt+0xc190>
   1d9b4:	subs	r4, r0, #0
   1d9b8:	beq	1daf4 <__assert_fail@plt+0xc724>
   1d9bc:	ldm	r6, {r1, r2, ip}
   1d9c0:	ldr	r0, [r6, #12]
   1d9c4:	ldr	r3, [r6, #16]
   1d9c8:	str	r1, [sp, #4]
   1d9cc:	str	r2, [sp, #8]
   1d9d0:	ldr	r1, [r6, #20]
   1d9d4:	ldr	r2, [r6, #32]
   1d9d8:	str	r0, [sp, #16]
   1d9dc:	str	r3, [sp, #20]
   1d9e0:	add	r0, sp, #4
   1d9e4:	mvn	r3, #0
   1d9e8:	str	r3, [sp, #32]
   1d9ec:	str	ip, [sp, #12]
   1d9f0:	str	r1, [sp, #24]
   1d9f4:	str	r2, [sp, #36]	; 0x24
   1d9f8:	bl	110b8 <mktime@plt>
   1d9fc:	ldr	r3, [sp, #32]
   1da00:	cmp	r3, #0
   1da04:	mov	r8, r0
   1da08:	blt	1daa8 <__assert_fail@plt+0xc6d8>
   1da0c:	mov	r0, r5
   1da10:	add	r1, sp, #4
   1da14:	bl	1d69c <__assert_fail@plt+0xc2cc>
   1da18:	cmp	r4, #1
   1da1c:	mov	sl, r0
   1da20:	beq	1da74 <__assert_fail@plt+0xc6a4>
   1da24:	bl	11298 <__errno_location@plt>
   1da28:	ldrb	r3, [r4, #4]
   1da2c:	cmp	r3, #0
   1da30:	mov	r7, r0
   1da34:	ldr	r9, [r0]
   1da38:	bne	1dab8 <__assert_fail@plt+0xc6e8>
   1da3c:	ldr	r0, [pc, #184]	; 1dafc <__assert_fail@plt+0xc72c>
   1da40:	bl	1137c <unsetenv@plt>
   1da44:	cmp	r0, #0
   1da48:	beq	1dad0 <__assert_fail@plt+0xc700>
   1da4c:	ldr	r9, [r7]
   1da50:	mov	fp, #0
   1da54:	ldr	r5, [r4]
   1da58:	mov	r0, r4
   1da5c:	bl	1ee10 <__assert_fail@plt+0xda40>
   1da60:	subs	r4, r5, #0
   1da64:	bne	1da54 <__assert_fail@plt+0xc684>
   1da68:	cmp	fp, #0
   1da6c:	str	r9, [r7]
   1da70:	beq	1daf4 <__assert_fail@plt+0xc724>
   1da74:	cmp	sl, #0
   1da78:	beq	1daf4 <__assert_fail@plt+0xc724>
   1da7c:	add	lr, sp, #4
   1da80:	mov	ip, r6
   1da84:	ldm	lr!, {r0, r1, r2, r3}
   1da88:	stmia	ip!, {r0, r1, r2, r3}
   1da8c:	ldm	lr!, {r0, r1, r2, r3}
   1da90:	stmia	ip!, {r0, r1, r2, r3}
   1da94:	ldm	lr, {r0, r1, r2}
   1da98:	stm	ip, {r0, r1, r2}
   1da9c:	mov	r0, r8
   1daa0:	add	sp, sp, #52	; 0x34
   1daa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daa8:	cmp	r4, #1
   1daac:	beq	1daf4 <__assert_fail@plt+0xc724>
   1dab0:	mov	sl, #0
   1dab4:	b	1da24 <__assert_fail@plt+0xc654>
   1dab8:	mov	r2, #1
   1dabc:	add	r1, r4, #5
   1dac0:	ldr	r0, [pc, #52]	; 1dafc <__assert_fail@plt+0xc72c>
   1dac4:	bl	1128c <setenv@plt>
   1dac8:	cmp	r0, #0
   1dacc:	bne	1da4c <__assert_fail@plt+0xc67c>
   1dad0:	bl	11178 <tzset@plt>
   1dad4:	mov	fp, #1
   1dad8:	b	1da54 <__assert_fail@plt+0xc684>
   1dadc:	mov	r0, r1
   1dae0:	bl	1134c <timegm@plt>
   1dae4:	mov	r8, r0
   1dae8:	mov	r0, r8
   1daec:	add	sp, sp, #52	; 0x34
   1daf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daf4:	mvn	r8, #0
   1daf8:	b	1da9c <__assert_fail@plt+0xc6cc>
   1dafc:	andeq	r3, r2, r0, lsl #13
   1db00:	push	{r4, r5, r6, lr}
   1db04:	sub	sp, sp, #32
   1db08:	cmp	r1, #0
   1db0c:	mov	r4, r0
   1db10:	ldr	r5, [sp, #48]	; 0x30
   1db14:	ldr	r6, [sp, #52]	; 0x34
   1db18:	beq	1de30 <__assert_fail@plt+0xca60>
   1db1c:	stm	sp, {r2, r3}
   1db20:	mov	r3, r1
   1db24:	ldr	r2, [pc, #808]	; 1de54 <__assert_fail@plt+0xca84>
   1db28:	mov	r1, #1
   1db2c:	bl	112ec <__fprintf_chk@plt>
   1db30:	mov	r2, #5
   1db34:	ldr	r1, [pc, #796]	; 1de58 <__assert_fail@plt+0xca88>
   1db38:	mov	r0, #0
   1db3c:	bl	11130 <dcgettext@plt>
   1db40:	ldr	r3, [pc, #788]	; 1de5c <__assert_fail@plt+0xca8c>
   1db44:	ldr	r2, [pc, #788]	; 1de60 <__assert_fail@plt+0xca90>
   1db48:	str	r3, [sp]
   1db4c:	mov	r1, #1
   1db50:	mov	r3, r0
   1db54:	mov	r0, r4
   1db58:	bl	112ec <__fprintf_chk@plt>
   1db5c:	mov	r1, r4
   1db60:	mov	r0, #10
   1db64:	bl	11124 <fputc_unlocked@plt>
   1db68:	mov	r2, #5
   1db6c:	ldr	r1, [pc, #752]	; 1de64 <__assert_fail@plt+0xca94>
   1db70:	mov	r0, #0
   1db74:	bl	11130 <dcgettext@plt>
   1db78:	mov	r1, #1
   1db7c:	ldr	r3, [pc, #740]	; 1de68 <__assert_fail@plt+0xca98>
   1db80:	mov	r2, r0
   1db84:	mov	r0, r4
   1db88:	bl	112ec <__fprintf_chk@plt>
   1db8c:	mov	r1, r4
   1db90:	mov	r0, #10
   1db94:	bl	11124 <fputc_unlocked@plt>
   1db98:	cmp	r6, #9
   1db9c:	ldrls	pc, [pc, r6, lsl #2]
   1dba0:	b	1de48 <__assert_fail@plt+0xca78>
   1dba4:	andeq	sp, r1, r8, lsr #24
   1dba8:	andeq	sp, r1, r0, lsr ip
   1dbac:	andeq	sp, r1, ip, asr ip
   1dbb0:	muleq	r1, r0, ip
   1dbb4:	andeq	sp, r1, ip, asr #25
   1dbb8:	andeq	sp, r1, r8, lsl #26
   1dbbc:	andeq	sp, r1, r4, asr #26
   1dbc0:	andeq	sp, r1, r8, lsl #27
   1dbc4:	ldrdeq	sp, [r1], -r8
   1dbc8:	andeq	sp, r1, ip, asr #23
   1dbcc:	ldr	r1, [pc, #664]	; 1de6c <__assert_fail@plt+0xca9c>
   1dbd0:	mov	r2, #5
   1dbd4:	mov	r0, #0
   1dbd8:	bl	11130 <dcgettext@plt>
   1dbdc:	ldr	ip, [r5, #32]
   1dbe0:	ldr	r1, [r5, #28]
   1dbe4:	ldr	r2, [r5, #24]
   1dbe8:	ldr	r3, [r5]
   1dbec:	ldr	r6, [r5, #20]
   1dbf0:	str	ip, [sp, #28]
   1dbf4:	ldr	lr, [r5, #16]
   1dbf8:	str	r1, [sp, #24]
   1dbfc:	ldr	ip, [r5, #12]
   1dc00:	str	r2, [sp, #20]
   1dc04:	ldr	r1, [r5, #8]
   1dc08:	ldr	r2, [r5, #4]
   1dc0c:	str	r6, [sp, #16]
   1dc10:	stmib	sp, {r1, ip, lr}
   1dc14:	mov	r1, #1
   1dc18:	str	r2, [sp]
   1dc1c:	mov	r2, r0
   1dc20:	mov	r0, r4
   1dc24:	bl	112ec <__fprintf_chk@plt>
   1dc28:	add	sp, sp, #32
   1dc2c:	pop	{r4, r5, r6, pc}
   1dc30:	mov	r2, #5
   1dc34:	ldr	r1, [pc, #564]	; 1de70 <__assert_fail@plt+0xcaa0>
   1dc38:	mov	r0, #0
   1dc3c:	bl	11130 <dcgettext@plt>
   1dc40:	ldr	r3, [r5]
   1dc44:	mov	r1, #1
   1dc48:	mov	r2, r0
   1dc4c:	mov	r0, r4
   1dc50:	add	sp, sp, #32
   1dc54:	pop	{r4, r5, r6, lr}
   1dc58:	b	112ec <__fprintf_chk@plt>
   1dc5c:	mov	r2, #5
   1dc60:	ldr	r1, [pc, #524]	; 1de74 <__assert_fail@plt+0xcaa4>
   1dc64:	mov	r0, #0
   1dc68:	bl	11130 <dcgettext@plt>
   1dc6c:	ldr	r2, [r5, #4]
   1dc70:	ldr	r3, [r5]
   1dc74:	mov	r1, #1
   1dc78:	str	r2, [sp, #48]	; 0x30
   1dc7c:	mov	r2, r0
   1dc80:	mov	r0, r4
   1dc84:	add	sp, sp, #32
   1dc88:	pop	{r4, r5, r6, lr}
   1dc8c:	b	112ec <__fprintf_chk@plt>
   1dc90:	mov	r2, #5
   1dc94:	ldr	r1, [pc, #476]	; 1de78 <__assert_fail@plt+0xcaa8>
   1dc98:	mov	r0, #0
   1dc9c:	bl	11130 <dcgettext@plt>
   1dca0:	ldr	r1, [r5, #8]
   1dca4:	ldr	r2, [r5, #4]
   1dca8:	ldr	r3, [r5]
   1dcac:	str	r1, [sp, #52]	; 0x34
   1dcb0:	str	r2, [sp, #48]	; 0x30
   1dcb4:	mov	r1, #1
   1dcb8:	mov	r2, r0
   1dcbc:	mov	r0, r4
   1dcc0:	add	sp, sp, #32
   1dcc4:	pop	{r4, r5, r6, lr}
   1dcc8:	b	112ec <__fprintf_chk@plt>
   1dccc:	mov	r2, #5
   1dcd0:	ldr	r1, [pc, #420]	; 1de7c <__assert_fail@plt+0xcaac>
   1dcd4:	mov	r0, #0
   1dcd8:	bl	11130 <dcgettext@plt>
   1dcdc:	ldr	r1, [r5, #8]
   1dce0:	ldr	ip, [r5, #12]
   1dce4:	ldr	r2, [r5, #4]
   1dce8:	ldr	r3, [r5]
   1dcec:	stmib	sp, {r1, ip}
   1dcf0:	str	r2, [sp]
   1dcf4:	mov	r1, #1
   1dcf8:	mov	r2, r0
   1dcfc:	mov	r0, r4
   1dd00:	bl	112ec <__fprintf_chk@plt>
   1dd04:	b	1dc28 <__assert_fail@plt+0xc858>
   1dd08:	mov	r2, #5
   1dd0c:	ldr	r1, [pc, #364]	; 1de80 <__assert_fail@plt+0xcab0>
   1dd10:	mov	r0, #0
   1dd14:	bl	11130 <dcgettext@plt>
   1dd18:	add	r1, r5, #8
   1dd1c:	ldr	r2, [r5, #4]
   1dd20:	ldm	r1, {r1, ip, lr}
   1dd24:	ldr	r3, [r5]
   1dd28:	str	r2, [sp]
   1dd2c:	stmib	sp, {r1, ip, lr}
   1dd30:	mov	r1, #1
   1dd34:	mov	r2, r0
   1dd38:	mov	r0, r4
   1dd3c:	bl	112ec <__fprintf_chk@plt>
   1dd40:	b	1dc28 <__assert_fail@plt+0xc858>
   1dd44:	mov	r2, #5
   1dd48:	ldr	r1, [pc, #308]	; 1de84 <__assert_fail@plt+0xcab4>
   1dd4c:	mov	r0, #0
   1dd50:	bl	11130 <dcgettext@plt>
   1dd54:	add	r1, r5, #8
   1dd58:	ldr	r2, [r5, #4]
   1dd5c:	ldm	r1, {r1, ip, lr}
   1dd60:	ldr	r6, [r5, #20]
   1dd64:	ldr	r3, [r5]
   1dd68:	stmib	sp, {r1, ip, lr}
   1dd6c:	mov	r1, #1
   1dd70:	str	r2, [sp]
   1dd74:	str	r6, [sp, #16]
   1dd78:	mov	r2, r0
   1dd7c:	mov	r0, r4
   1dd80:	bl	112ec <__fprintf_chk@plt>
   1dd84:	b	1dc28 <__assert_fail@plt+0xc858>
   1dd88:	mov	r2, #5
   1dd8c:	ldr	r1, [pc, #244]	; 1de88 <__assert_fail@plt+0xcab8>
   1dd90:	mov	r0, #0
   1dd94:	bl	11130 <dcgettext@plt>
   1dd98:	ldr	r2, [r5, #24]
   1dd9c:	ldr	r3, [r5]
   1dda0:	ldr	r6, [r5, #20]
   1dda4:	ldr	lr, [r5, #16]
   1dda8:	ldr	ip, [r5, #12]
   1ddac:	str	r2, [sp, #20]
   1ddb0:	ldr	r1, [r5, #8]
   1ddb4:	ldr	r2, [r5, #4]
   1ddb8:	str	r6, [sp, #16]
   1ddbc:	stmib	sp, {r1, ip, lr}
   1ddc0:	mov	r1, #1
   1ddc4:	str	r2, [sp]
   1ddc8:	mov	r2, r0
   1ddcc:	mov	r0, r4
   1ddd0:	bl	112ec <__fprintf_chk@plt>
   1ddd4:	b	1dc28 <__assert_fail@plt+0xc858>
   1ddd8:	mov	r2, #5
   1dddc:	ldr	r1, [pc, #168]	; 1de8c <__assert_fail@plt+0xcabc>
   1dde0:	mov	r0, #0
   1dde4:	bl	11130 <dcgettext@plt>
   1dde8:	ldr	r1, [r5, #28]
   1ddec:	ldr	r2, [r5, #24]
   1ddf0:	ldr	r3, [r5]
   1ddf4:	ldr	r6, [r5, #20]
   1ddf8:	ldr	lr, [r5, #16]
   1ddfc:	str	r1, [sp, #24]
   1de00:	ldr	ip, [r5, #12]
   1de04:	str	r2, [sp, #20]
   1de08:	ldr	r1, [r5, #8]
   1de0c:	ldr	r2, [r5, #4]
   1de10:	str	r6, [sp, #16]
   1de14:	stmib	sp, {r1, ip, lr}
   1de18:	mov	r1, #1
   1de1c:	str	r2, [sp]
   1de20:	mov	r2, r0
   1de24:	mov	r0, r4
   1de28:	bl	112ec <__fprintf_chk@plt>
   1de2c:	b	1dc28 <__assert_fail@plt+0xc858>
   1de30:	str	r3, [sp]
   1de34:	mov	r1, #1
   1de38:	mov	r3, r2
   1de3c:	ldr	r2, [pc, #76]	; 1de90 <__assert_fail@plt+0xcac0>
   1de40:	bl	112ec <__fprintf_chk@plt>
   1de44:	b	1db30 <__assert_fail@plt+0xc760>
   1de48:	mov	r2, #5
   1de4c:	ldr	r1, [pc, #64]	; 1de94 <__assert_fail@plt+0xcac4>
   1de50:	b	1dbd4 <__assert_fail@plt+0xc804>
   1de54:	muleq	r2, r8, sl
   1de58:	andeq	r3, r2, ip, lsr #21
   1de5c:	andeq	r0, r0, r6, ror #15
   1de60:	andeq	r3, r2, r4, lsl #27
   1de64:			; <UNDEFINED> instruction: 0x00023ab0
   1de68:	andeq	r3, r2, ip, asr fp
   1de6c:	andeq	r3, r2, ip, lsl #25
   1de70:	andeq	r3, r2, r0, lsl #23
   1de74:	muleq	r2, r0, fp
   1de78:	andeq	r3, r2, r8, lsr #23
   1de7c:	andeq	r3, r2, r4, asr #23
   1de80:	andeq	r3, r2, r4, ror #23
   1de84:	andeq	r3, r2, r8, lsl #24
   1de88:	andeq	r3, r2, r0, lsr ip
   1de8c:	andeq	r3, r2, ip, asr ip
   1de90:	andeq	r3, r2, r4, lsr #21
   1de94:	andeq	r3, r2, r0, asr #25
   1de98:	push	{r4, r5, lr}
   1de9c:	sub	sp, sp, #12
   1dea0:	ldr	r5, [sp, #24]
   1dea4:	ldr	ip, [r5]
   1dea8:	cmp	ip, #0
   1deac:	beq	1dec8 <__assert_fail@plt+0xcaf8>
   1deb0:	mov	lr, r5
   1deb4:	mov	ip, #0
   1deb8:	ldr	r4, [lr, #4]!
   1debc:	add	ip, ip, #1
   1dec0:	cmp	r4, #0
   1dec4:	bne	1deb8 <__assert_fail@plt+0xcae8>
   1dec8:	stm	sp, {r5, ip}
   1decc:	bl	1db00 <__assert_fail@plt+0xc730>
   1ded0:	add	sp, sp, #12
   1ded4:	pop	{r4, r5, pc}
   1ded8:	push	{r4, r5, lr}
   1dedc:	sub	sp, sp, #76	; 0x4c
   1dee0:	mov	r5, r0
   1dee4:	ldr	ip, [sp, #88]	; 0x58
   1dee8:	ldr	r0, [ip]
   1deec:	cmp	r0, #0
   1def0:	str	r0, [sp, #32]
   1def4:	beq	1e2c8 <__assert_fail@plt+0xcef8>
   1def8:	ldr	r0, [ip, #4]
   1defc:	cmp	r0, #0
   1df00:	str	r0, [sp, #36]	; 0x24
   1df04:	beq	1e2d0 <__assert_fail@plt+0xcf00>
   1df08:	ldr	r0, [ip, #8]
   1df0c:	cmp	r0, #0
   1df10:	str	r0, [sp, #40]	; 0x28
   1df14:	beq	1e2d8 <__assert_fail@plt+0xcf08>
   1df18:	ldr	r0, [ip, #12]
   1df1c:	cmp	r0, #0
   1df20:	str	r0, [sp, #44]	; 0x2c
   1df24:	beq	1e2e0 <__assert_fail@plt+0xcf10>
   1df28:	ldr	r0, [ip, #16]
   1df2c:	cmp	r0, #0
   1df30:	str	r0, [sp, #48]	; 0x30
   1df34:	beq	1e2e8 <__assert_fail@plt+0xcf18>
   1df38:	ldr	r0, [ip, #20]
   1df3c:	cmp	r0, #0
   1df40:	str	r0, [sp, #52]	; 0x34
   1df44:	beq	1e2f0 <__assert_fail@plt+0xcf20>
   1df48:	ldr	r0, [ip, #24]
   1df4c:	cmp	r0, #0
   1df50:	str	r0, [sp, #56]	; 0x38
   1df54:	beq	1e2f8 <__assert_fail@plt+0xcf28>
   1df58:	ldr	r0, [ip, #28]
   1df5c:	cmp	r0, #0
   1df60:	str	r0, [sp, #60]	; 0x3c
   1df64:	beq	1e300 <__assert_fail@plt+0xcf30>
   1df68:	ldr	r0, [ip, #32]
   1df6c:	cmp	r0, #0
   1df70:	str	r0, [sp, #64]	; 0x40
   1df74:	beq	1e308 <__assert_fail@plt+0xcf38>
   1df78:	ldr	r0, [ip, #36]	; 0x24
   1df7c:	cmp	r0, #0
   1df80:	movne	r4, #10
   1df84:	moveq	r4, #9
   1df88:	cmp	r1, #0
   1df8c:	beq	1e2a0 <__assert_fail@plt+0xced0>
   1df90:	stm	sp, {r2, r3}
   1df94:	mov	r0, r5
   1df98:	mov	r3, r1
   1df9c:	ldr	r2, [pc, #876]	; 1e310 <__assert_fail@plt+0xcf40>
   1dfa0:	mov	r1, #1
   1dfa4:	bl	112ec <__fprintf_chk@plt>
   1dfa8:	mov	r2, #5
   1dfac:	ldr	r1, [pc, #864]	; 1e314 <__assert_fail@plt+0xcf44>
   1dfb0:	mov	r0, #0
   1dfb4:	bl	11130 <dcgettext@plt>
   1dfb8:	ldr	r3, [pc, #856]	; 1e318 <__assert_fail@plt+0xcf48>
   1dfbc:	ldr	r2, [pc, #856]	; 1e31c <__assert_fail@plt+0xcf4c>
   1dfc0:	str	r3, [sp]
   1dfc4:	mov	r1, #1
   1dfc8:	mov	r3, r0
   1dfcc:	mov	r0, r5
   1dfd0:	bl	112ec <__fprintf_chk@plt>
   1dfd4:	mov	r1, r5
   1dfd8:	mov	r0, #10
   1dfdc:	bl	11124 <fputc_unlocked@plt>
   1dfe0:	mov	r2, #5
   1dfe4:	ldr	r1, [pc, #820]	; 1e320 <__assert_fail@plt+0xcf50>
   1dfe8:	mov	r0, #0
   1dfec:	bl	11130 <dcgettext@plt>
   1dff0:	mov	r1, #1
   1dff4:	ldr	r3, [pc, #808]	; 1e324 <__assert_fail@plt+0xcf54>
   1dff8:	mov	r2, r0
   1dffc:	mov	r0, r5
   1e000:	bl	112ec <__fprintf_chk@plt>
   1e004:	mov	r1, r5
   1e008:	mov	r0, #10
   1e00c:	bl	11124 <fputc_unlocked@plt>
   1e010:	cmp	r4, #9
   1e014:	ldrls	pc, [pc, r4, lsl #2]
   1e018:	b	1e2bc <__assert_fail@plt+0xceec>
   1e01c:	andeq	lr, r1, r0, lsr #1
   1e020:	andeq	lr, r1, r8, lsr #1
   1e024:	ldrdeq	lr, [r1], -r4
   1e028:	andeq	lr, r1, r8, lsl #2
   1e02c:	andeq	lr, r1, r0, asr #2
   1e030:	andeq	lr, r1, ip, ror r1
   1e034:			; <UNDEFINED> instruction: 0x0001e1b8
   1e038:	strdeq	lr, [r1], -ip
   1e03c:	andeq	lr, r1, r8, asr #4
   1e040:	andeq	lr, r1, r4, asr #32
   1e044:	ldr	r1, [pc, #732]	; 1e328 <__assert_fail@plt+0xcf58>
   1e048:	mov	r2, #5
   1e04c:	mov	r0, #0
   1e050:	bl	11130 <dcgettext@plt>
   1e054:	ldr	ip, [sp, #64]	; 0x40
   1e058:	ldr	r1, [sp, #60]	; 0x3c
   1e05c:	ldr	r2, [sp, #56]	; 0x38
   1e060:	ldr	lr, [sp, #48]	; 0x30
   1e064:	str	ip, [sp, #28]
   1e068:	str	r1, [sp, #24]
   1e06c:	ldr	ip, [sp, #44]	; 0x2c
   1e070:	ldr	r1, [sp, #40]	; 0x28
   1e074:	ldr	r4, [sp, #52]	; 0x34
   1e078:	str	r2, [sp, #20]
   1e07c:	ldr	r2, [sp, #36]	; 0x24
   1e080:	stmib	sp, {r1, ip, lr}
   1e084:	mov	r1, #1
   1e088:	str	r2, [sp]
   1e08c:	ldr	r3, [sp, #32]
   1e090:	str	r4, [sp, #16]
   1e094:	mov	r2, r0
   1e098:	mov	r0, r5
   1e09c:	bl	112ec <__fprintf_chk@plt>
   1e0a0:	add	sp, sp, #76	; 0x4c
   1e0a4:	pop	{r4, r5, pc}
   1e0a8:	mov	r2, #5
   1e0ac:	ldr	r1, [pc, #632]	; 1e32c <__assert_fail@plt+0xcf5c>
   1e0b0:	mov	r0, #0
   1e0b4:	bl	11130 <dcgettext@plt>
   1e0b8:	ldr	r3, [sp, #32]
   1e0bc:	mov	r1, #1
   1e0c0:	mov	r2, r0
   1e0c4:	mov	r0, r5
   1e0c8:	add	sp, sp, #76	; 0x4c
   1e0cc:	pop	{r4, r5, lr}
   1e0d0:	b	112ec <__fprintf_chk@plt>
   1e0d4:	mov	r2, #5
   1e0d8:	ldr	r1, [pc, #592]	; 1e330 <__assert_fail@plt+0xcf60>
   1e0dc:	mov	r0, #0
   1e0e0:	bl	11130 <dcgettext@plt>
   1e0e4:	ldr	r2, [sp, #36]	; 0x24
   1e0e8:	ldr	r3, [sp, #32]
   1e0ec:	str	r2, [sp, #88]	; 0x58
   1e0f0:	mov	r1, #1
   1e0f4:	mov	r2, r0
   1e0f8:	mov	r0, r5
   1e0fc:	add	sp, sp, #76	; 0x4c
   1e100:	pop	{r4, r5, lr}
   1e104:	b	112ec <__fprintf_chk@plt>
   1e108:	mov	r2, #5
   1e10c:	ldr	r1, [pc, #544]	; 1e334 <__assert_fail@plt+0xcf64>
   1e110:	mov	r0, #0
   1e114:	bl	11130 <dcgettext@plt>
   1e118:	ldr	r1, [sp, #40]	; 0x28
   1e11c:	ldr	r2, [sp, #36]	; 0x24
   1e120:	str	r1, [sp, #4]
   1e124:	str	r2, [sp]
   1e128:	ldr	r3, [sp, #32]
   1e12c:	mov	r1, #1
   1e130:	mov	r2, r0
   1e134:	mov	r0, r5
   1e138:	bl	112ec <__fprintf_chk@plt>
   1e13c:	b	1e0a0 <__assert_fail@plt+0xccd0>
   1e140:	mov	r2, #5
   1e144:	ldr	r1, [pc, #492]	; 1e338 <__assert_fail@plt+0xcf68>
   1e148:	mov	r0, #0
   1e14c:	bl	11130 <dcgettext@plt>
   1e150:	ldr	r1, [sp, #40]	; 0x28
   1e154:	ldr	ip, [sp, #44]	; 0x2c
   1e158:	ldr	r2, [sp, #36]	; 0x24
   1e15c:	ldr	r3, [sp, #32]
   1e160:	stmib	sp, {r1, ip}
   1e164:	str	r2, [sp]
   1e168:	mov	r1, #1
   1e16c:	mov	r2, r0
   1e170:	mov	r0, r5
   1e174:	bl	112ec <__fprintf_chk@plt>
   1e178:	b	1e0a0 <__assert_fail@plt+0xccd0>
   1e17c:	mov	r2, #5
   1e180:	ldr	r1, [pc, #436]	; 1e33c <__assert_fail@plt+0xcf6c>
   1e184:	mov	r0, #0
   1e188:	bl	11130 <dcgettext@plt>
   1e18c:	add	r1, sp, #40	; 0x28
   1e190:	ldr	r2, [sp, #36]	; 0x24
   1e194:	ldm	r1, {r1, ip, lr}
   1e198:	ldr	r3, [sp, #32]
   1e19c:	str	r2, [sp]
   1e1a0:	stmib	sp, {r1, ip, lr}
   1e1a4:	mov	r1, #1
   1e1a8:	mov	r2, r0
   1e1ac:	mov	r0, r5
   1e1b0:	bl	112ec <__fprintf_chk@plt>
   1e1b4:	b	1e0a0 <__assert_fail@plt+0xccd0>
   1e1b8:	mov	r2, #5
   1e1bc:	ldr	r1, [pc, #380]	; 1e340 <__assert_fail@plt+0xcf70>
   1e1c0:	mov	r0, #0
   1e1c4:	bl	11130 <dcgettext@plt>
   1e1c8:	add	r1, sp, #40	; 0x28
   1e1cc:	ldr	r2, [sp, #36]	; 0x24
   1e1d0:	ldm	r1, {r1, ip, lr}
   1e1d4:	ldr	r4, [sp, #52]	; 0x34
   1e1d8:	str	r2, [sp]
   1e1dc:	stmib	sp, {r1, ip, lr}
   1e1e0:	mov	r1, #1
   1e1e4:	ldr	r3, [sp, #32]
   1e1e8:	str	r4, [sp, #16]
   1e1ec:	mov	r2, r0
   1e1f0:	mov	r0, r5
   1e1f4:	bl	112ec <__fprintf_chk@plt>
   1e1f8:	b	1e0a0 <__assert_fail@plt+0xccd0>
   1e1fc:	mov	r2, #5
   1e200:	ldr	r1, [pc, #316]	; 1e344 <__assert_fail@plt+0xcf74>
   1e204:	mov	r0, #0
   1e208:	bl	11130 <dcgettext@plt>
   1e20c:	add	r1, sp, #40	; 0x28
   1e210:	ldr	r2, [sp, #56]	; 0x38
   1e214:	ldm	r1, {r1, ip, lr}
   1e218:	ldr	r4, [sp, #52]	; 0x34
   1e21c:	str	r2, [sp, #20]
   1e220:	ldr	r2, [sp, #36]	; 0x24
   1e224:	stmib	sp, {r1, ip, lr}
   1e228:	mov	r1, #1
   1e22c:	str	r2, [sp]
   1e230:	ldr	r3, [sp, #32]
   1e234:	str	r4, [sp, #16]
   1e238:	mov	r2, r0
   1e23c:	mov	r0, r5
   1e240:	bl	112ec <__fprintf_chk@plt>
   1e244:	b	1e0a0 <__assert_fail@plt+0xccd0>
   1e248:	mov	r2, #5
   1e24c:	ldr	r1, [pc, #244]	; 1e348 <__assert_fail@plt+0xcf78>
   1e250:	mov	r0, #0
   1e254:	bl	11130 <dcgettext@plt>
   1e258:	ldr	r1, [sp, #60]	; 0x3c
   1e25c:	ldr	r2, [sp, #56]	; 0x38
   1e260:	ldr	lr, [sp, #48]	; 0x30
   1e264:	ldr	ip, [sp, #44]	; 0x2c
   1e268:	str	r1, [sp, #24]
   1e26c:	ldr	r1, [sp, #40]	; 0x28
   1e270:	ldr	r4, [sp, #52]	; 0x34
   1e274:	str	r2, [sp, #20]
   1e278:	ldr	r2, [sp, #36]	; 0x24
   1e27c:	stmib	sp, {r1, ip, lr}
   1e280:	mov	r1, #1
   1e284:	str	r2, [sp]
   1e288:	ldr	r3, [sp, #32]
   1e28c:	str	r4, [sp, #16]
   1e290:	mov	r2, r0
   1e294:	mov	r0, r5
   1e298:	bl	112ec <__fprintf_chk@plt>
   1e29c:	b	1e0a0 <__assert_fail@plt+0xccd0>
   1e2a0:	str	r3, [sp]
   1e2a4:	mov	r1, #1
   1e2a8:	mov	r3, r2
   1e2ac:	mov	r0, r5
   1e2b0:	ldr	r2, [pc, #148]	; 1e34c <__assert_fail@plt+0xcf7c>
   1e2b4:	bl	112ec <__fprintf_chk@plt>
   1e2b8:	b	1dfa8 <__assert_fail@plt+0xcbd8>
   1e2bc:	mov	r2, #5
   1e2c0:	ldr	r1, [pc, #136]	; 1e350 <__assert_fail@plt+0xcf80>
   1e2c4:	b	1e04c <__assert_fail@plt+0xcc7c>
   1e2c8:	mov	r4, r0
   1e2cc:	b	1df88 <__assert_fail@plt+0xcbb8>
   1e2d0:	mov	r4, #1
   1e2d4:	b	1df88 <__assert_fail@plt+0xcbb8>
   1e2d8:	mov	r4, #2
   1e2dc:	b	1df88 <__assert_fail@plt+0xcbb8>
   1e2e0:	mov	r4, #3
   1e2e4:	b	1df88 <__assert_fail@plt+0xcbb8>
   1e2e8:	mov	r4, #4
   1e2ec:	b	1df88 <__assert_fail@plt+0xcbb8>
   1e2f0:	mov	r4, #5
   1e2f4:	b	1df88 <__assert_fail@plt+0xcbb8>
   1e2f8:	mov	r4, #6
   1e2fc:	b	1df88 <__assert_fail@plt+0xcbb8>
   1e300:	mov	r4, #7
   1e304:	b	1df88 <__assert_fail@plt+0xcbb8>
   1e308:	mov	r4, #8
   1e30c:	b	1df88 <__assert_fail@plt+0xcbb8>
   1e310:	muleq	r2, r8, sl
   1e314:	andeq	r3, r2, ip, lsr #21
   1e318:	andeq	r0, r0, r6, ror #15
   1e31c:	andeq	r3, r2, r4, lsl #27
   1e320:			; <UNDEFINED> instruction: 0x00023ab0
   1e324:	andeq	r3, r2, ip, asr fp
   1e328:	andeq	r3, r2, ip, lsl #25
   1e32c:	andeq	r3, r2, r0, lsl #23
   1e330:	muleq	r2, r0, fp
   1e334:	andeq	r3, r2, r8, lsr #23
   1e338:	andeq	r3, r2, r4, asr #23
   1e33c:	andeq	r3, r2, r4, ror #23
   1e340:	andeq	r3, r2, r8, lsl #24
   1e344:	andeq	r3, r2, r0, lsr ip
   1e348:	andeq	r3, r2, ip, asr ip
   1e34c:	andeq	r3, r2, r4, lsr #21
   1e350:	andeq	r3, r2, r0, asr #25
   1e354:	push	{r3}		; (str r3, [sp, #-4]!)
   1e358:	push	{lr}		; (str lr, [sp, #-4]!)
   1e35c:	sub	sp, sp, #56	; 0x38
   1e360:	add	r3, sp, #64	; 0x40
   1e364:	ldr	ip, [sp, #64]	; 0x40
   1e368:	str	r3, [sp, #12]
   1e36c:	cmp	ip, #0
   1e370:	str	ip, [sp, #16]
   1e374:	beq	1e40c <__assert_fail@plt+0xd03c>
   1e378:	ldr	ip, [sp, #68]	; 0x44
   1e37c:	cmp	ip, #0
   1e380:	str	ip, [sp, #20]
   1e384:	beq	1e42c <__assert_fail@plt+0xd05c>
   1e388:	ldr	ip, [sp, #72]	; 0x48
   1e38c:	cmp	ip, #0
   1e390:	str	ip, [sp, #24]
   1e394:	beq	1e434 <__assert_fail@plt+0xd064>
   1e398:	ldr	ip, [sp, #76]	; 0x4c
   1e39c:	cmp	ip, #0
   1e3a0:	str	ip, [sp, #28]
   1e3a4:	beq	1e43c <__assert_fail@plt+0xd06c>
   1e3a8:	ldr	ip, [sp, #80]	; 0x50
   1e3ac:	cmp	ip, #0
   1e3b0:	str	ip, [sp, #32]
   1e3b4:	beq	1e444 <__assert_fail@plt+0xd074>
   1e3b8:	ldr	ip, [sp, #84]	; 0x54
   1e3bc:	cmp	ip, #0
   1e3c0:	str	ip, [sp, #36]	; 0x24
   1e3c4:	beq	1e44c <__assert_fail@plt+0xd07c>
   1e3c8:	ldr	ip, [sp, #88]	; 0x58
   1e3cc:	cmp	ip, #0
   1e3d0:	str	ip, [sp, #40]	; 0x28
   1e3d4:	beq	1e454 <__assert_fail@plt+0xd084>
   1e3d8:	ldr	ip, [sp, #92]	; 0x5c
   1e3dc:	cmp	ip, #0
   1e3e0:	str	ip, [sp, #44]	; 0x2c
   1e3e4:	beq	1e45c <__assert_fail@plt+0xd08c>
   1e3e8:	ldr	ip, [sp, #96]	; 0x60
   1e3ec:	cmp	ip, #0
   1e3f0:	str	ip, [sp, #48]	; 0x30
   1e3f4:	beq	1e464 <__assert_fail@plt+0xd094>
   1e3f8:	ldr	ip, [sp, #100]	; 0x64
   1e3fc:	cmp	ip, #0
   1e400:	str	ip, [sp, #52]	; 0x34
   1e404:	movne	ip, #10
   1e408:	moveq	ip, #9
   1e40c:	add	r3, sp, #16
   1e410:	stm	sp, {r3, ip}
   1e414:	ldr	r3, [sp, #60]	; 0x3c
   1e418:	bl	1db00 <__assert_fail@plt+0xc730>
   1e41c:	add	sp, sp, #56	; 0x38
   1e420:	pop	{lr}		; (ldr lr, [sp], #4)
   1e424:	add	sp, sp, #4
   1e428:	bx	lr
   1e42c:	mov	ip, #1
   1e430:	b	1e40c <__assert_fail@plt+0xd03c>
   1e434:	mov	ip, #2
   1e438:	b	1e40c <__assert_fail@plt+0xd03c>
   1e43c:	mov	ip, #3
   1e440:	b	1e40c <__assert_fail@plt+0xd03c>
   1e444:	mov	ip, #4
   1e448:	b	1e40c <__assert_fail@plt+0xd03c>
   1e44c:	mov	ip, #5
   1e450:	b	1e40c <__assert_fail@plt+0xd03c>
   1e454:	mov	ip, #6
   1e458:	b	1e40c <__assert_fail@plt+0xd03c>
   1e45c:	mov	ip, #7
   1e460:	b	1e40c <__assert_fail@plt+0xd03c>
   1e464:	mov	ip, #8
   1e468:	b	1e40c <__assert_fail@plt+0xd03c>
   1e46c:	ldr	r3, [pc, #116]	; 1e4e8 <__assert_fail@plt+0xd118>
   1e470:	push	{r4, lr}
   1e474:	mov	r0, #10
   1e478:	ldr	r1, [r3]
   1e47c:	bl	11124 <fputc_unlocked@plt>
   1e480:	mov	r2, #5
   1e484:	ldr	r1, [pc, #96]	; 1e4ec <__assert_fail@plt+0xd11c>
   1e488:	mov	r0, #0
   1e48c:	bl	11130 <dcgettext@plt>
   1e490:	ldr	r2, [pc, #88]	; 1e4f0 <__assert_fail@plt+0xd120>
   1e494:	mov	r1, r0
   1e498:	mov	r0, #1
   1e49c:	bl	112d4 <__printf_chk@plt>
   1e4a0:	mov	r2, #5
   1e4a4:	ldr	r1, [pc, #72]	; 1e4f4 <__assert_fail@plt+0xd124>
   1e4a8:	mov	r0, #0
   1e4ac:	bl	11130 <dcgettext@plt>
   1e4b0:	ldr	r3, [pc, #64]	; 1e4f8 <__assert_fail@plt+0xd128>
   1e4b4:	ldr	r2, [pc, #64]	; 1e4fc <__assert_fail@plt+0xd12c>
   1e4b8:	mov	r1, r0
   1e4bc:	mov	r0, #1
   1e4c0:	bl	112d4 <__printf_chk@plt>
   1e4c4:	mov	r2, #5
   1e4c8:	ldr	r1, [pc, #48]	; 1e500 <__assert_fail@plt+0xd130>
   1e4cc:	mov	r0, #0
   1e4d0:	bl	11130 <dcgettext@plt>
   1e4d4:	ldr	r2, [pc, #40]	; 1e504 <__assert_fail@plt+0xd134>
   1e4d8:	pop	{r4, lr}
   1e4dc:	mov	r1, r0
   1e4e0:	mov	r0, #1
   1e4e4:	b	112d4 <__printf_chk@plt>
   1e4e8:	andeq	r4, r3, r4, lsr #3
   1e4ec:	strdeq	r3, [r2], -ip
   1e4f0:	andeq	r3, r2, r0, lsl sp
   1e4f4:	andeq	r3, r2, r8, lsr #26
   1e4f8:	andeq	r1, r2, r0, lsl #23
   1e4fc:	andeq	r1, r2, r8, lsr #23
   1e500:	andeq	r3, r2, ip, lsr sp
   1e504:	andeq	r3, r2, r4, ror #26
   1e508:	push	{r4, r5, r6, lr}
   1e50c:	mov	r6, r0
   1e510:	mov	r5, r1
   1e514:	mov	r4, r2
   1e518:	bl	20ca0 <__assert_fail@plt+0xf8d0>
   1e51c:	cmp	r0, #0
   1e520:	popne	{r4, r5, r6, pc}
   1e524:	cmp	r6, #0
   1e528:	beq	1e538 <__assert_fail@plt+0xd168>
   1e52c:	cmp	r5, #0
   1e530:	cmpne	r4, #0
   1e534:	popeq	{r4, r5, r6, pc}
   1e538:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e53c:	push	{r4, lr}
   1e540:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1e544:	cmp	r0, #0
   1e548:	popne	{r4, pc}
   1e54c:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e550:	push	{r4, lr}
   1e554:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1e558:	cmp	r0, #0
   1e55c:	popne	{r4, pc}
   1e560:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e564:	push	{r4, lr}
   1e568:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1e56c:	cmp	r0, #0
   1e570:	popne	{r4, pc}
   1e574:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e578:	push	{r4, r5, r6, lr}
   1e57c:	mov	r5, r0
   1e580:	mov	r4, r1
   1e584:	bl	1ec38 <__assert_fail@plt+0xd868>
   1e588:	cmp	r0, #0
   1e58c:	popne	{r4, r5, r6, pc}
   1e590:	adds	r4, r4, #0
   1e594:	movne	r4, #1
   1e598:	cmp	r5, #0
   1e59c:	orreq	r4, r4, #1
   1e5a0:	cmp	r4, #0
   1e5a4:	popeq	{r4, r5, r6, pc}
   1e5a8:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e5ac:	push	{r4, lr}
   1e5b0:	cmp	r1, #0
   1e5b4:	orreq	r1, r1, #1
   1e5b8:	bl	1ec38 <__assert_fail@plt+0xd868>
   1e5bc:	cmp	r0, #0
   1e5c0:	popne	{r4, pc}
   1e5c4:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e5c8:	push	{r4, r5, r6, lr}
   1e5cc:	mov	r6, r0
   1e5d0:	mov	r5, r1
   1e5d4:	mov	r4, r2
   1e5d8:	bl	20ca0 <__assert_fail@plt+0xf8d0>
   1e5dc:	cmp	r0, #0
   1e5e0:	popne	{r4, r5, r6, pc}
   1e5e4:	cmp	r6, #0
   1e5e8:	beq	1e5f8 <__assert_fail@plt+0xd228>
   1e5ec:	cmp	r5, #0
   1e5f0:	cmpne	r4, #0
   1e5f4:	popeq	{r4, r5, r6, pc}
   1e5f8:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e5fc:	cmp	r2, #0
   1e600:	cmpne	r1, #0
   1e604:	moveq	r2, #1
   1e608:	moveq	r1, r2
   1e60c:	push	{r4, lr}
   1e610:	bl	20ca0 <__assert_fail@plt+0xf8d0>
   1e614:	cmp	r0, #0
   1e618:	popne	{r4, pc}
   1e61c:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e620:	push	{r4, lr}
   1e624:	mov	r2, r1
   1e628:	mov	r1, r0
   1e62c:	mov	r0, #0
   1e630:	bl	20ca0 <__assert_fail@plt+0xf8d0>
   1e634:	cmp	r0, #0
   1e638:	popne	{r4, pc}
   1e63c:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e640:	cmp	r1, #0
   1e644:	cmpne	r0, #0
   1e648:	moveq	r2, #1
   1e64c:	movne	r2, r1
   1e650:	moveq	r1, r2
   1e654:	movne	r1, r0
   1e658:	push	{r4, lr}
   1e65c:	mov	r0, #0
   1e660:	bl	20ca0 <__assert_fail@plt+0xf8d0>
   1e664:	cmp	r0, #0
   1e668:	popne	{r4, pc}
   1e66c:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e670:	cmp	r0, #0
   1e674:	push	{r4, r5, r6, lr}
   1e678:	mov	r5, r1
   1e67c:	ldr	r4, [r1]
   1e680:	beq	1e6bc <__assert_fail@plt+0xd2ec>
   1e684:	lsr	r2, r4, #1
   1e688:	add	r3, r2, #1
   1e68c:	mvn	r3, r3
   1e690:	cmp	r4, r3
   1e694:	bhi	1e6d8 <__assert_fail@plt+0xd308>
   1e698:	add	r4, r4, #1
   1e69c:	add	r4, r4, r2
   1e6a0:	mov	r1, r4
   1e6a4:	mov	r2, #1
   1e6a8:	bl	20ca0 <__assert_fail@plt+0xf8d0>
   1e6ac:	cmp	r0, #0
   1e6b0:	beq	1e6dc <__assert_fail@plt+0xd30c>
   1e6b4:	str	r4, [r5]
   1e6b8:	pop	{r4, r5, r6, pc}
   1e6bc:	cmp	r4, #0
   1e6c0:	moveq	r4, #64	; 0x40
   1e6c4:	mov	r1, r4
   1e6c8:	mov	r2, #1
   1e6cc:	bl	20ca0 <__assert_fail@plt+0xf8d0>
   1e6d0:	cmp	r0, #0
   1e6d4:	bne	1e6b4 <__assert_fail@plt+0xd2e4>
   1e6d8:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e6dc:	cmp	r4, #0
   1e6e0:	bne	1e6d8 <__assert_fail@plt+0xd308>
   1e6e4:	str	r4, [r5]
   1e6e8:	pop	{r4, r5, r6, pc}
   1e6ec:	cmp	r0, #0
   1e6f0:	push	{r4, r5, r6, lr}
   1e6f4:	mov	r5, r1
   1e6f8:	ldr	r4, [r1]
   1e6fc:	mov	r6, r2
   1e700:	beq	1e744 <__assert_fail@plt+0xd374>
   1e704:	lsr	r1, r4, #1
   1e708:	add	r3, r1, #1
   1e70c:	mvn	r3, r3
   1e710:	cmp	r4, r3
   1e714:	bhi	1e77c <__assert_fail@plt+0xd3ac>
   1e718:	add	r4, r4, #1
   1e71c:	add	r4, r4, r1
   1e720:	mov	r1, r4
   1e724:	bl	20ca0 <__assert_fail@plt+0xf8d0>
   1e728:	cmp	r0, #0
   1e72c:	bne	1e73c <__assert_fail@plt+0xd36c>
   1e730:	cmp	r4, #0
   1e734:	cmpne	r6, #0
   1e738:	bne	1e77c <__assert_fail@plt+0xd3ac>
   1e73c:	str	r4, [r5]
   1e740:	pop	{r4, r5, r6, pc}
   1e744:	cmp	r4, #0
   1e748:	bne	1e764 <__assert_fail@plt+0xd394>
   1e74c:	mov	r1, r2
   1e750:	mov	r0, #64	; 0x40
   1e754:	bl	20de0 <__assert_fail@plt+0xfa10>
   1e758:	cmp	r0, #0
   1e75c:	movne	r4, r0
   1e760:	addeq	r4, r0, #1
   1e764:	mov	r2, r6
   1e768:	mov	r1, r4
   1e76c:	mov	r0, #0
   1e770:	bl	20ca0 <__assert_fail@plt+0xf8d0>
   1e774:	cmp	r0, #0
   1e778:	bne	1e73c <__assert_fail@plt+0xd36c>
   1e77c:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e784:	sub	sp, sp, #12
   1e788:	ldr	r6, [r1]
   1e78c:	mov	r8, r1
   1e790:	mov	r9, r0
   1e794:	asrs	r4, r6, #1
   1e798:	mov	sl, r2
   1e79c:	mov	fp, r3
   1e7a0:	ldr	r7, [sp, #48]	; 0x30
   1e7a4:	bmi	1e920 <__assert_fail@plt+0xd550>
   1e7a8:	mvn	r1, #-2147483648	; 0x80000000
   1e7ac:	sub	r1, r1, r4
   1e7b0:	cmp	r6, r1
   1e7b4:	movle	r1, #0
   1e7b8:	movgt	r1, #1
   1e7bc:	mvn	r3, fp
   1e7c0:	cmp	r1, #0
   1e7c4:	addeq	r4, r4, r6
   1e7c8:	mvnne	r4, #-2147483648	; 0x80000000
   1e7cc:	lsr	r3, r3, #31
   1e7d0:	cmp	fp, r4
   1e7d4:	movge	r2, #0
   1e7d8:	andlt	r2, r3, #1
   1e7dc:	cmp	r2, #0
   1e7e0:	beq	1e8d0 <__assert_fail@plt+0xd500>
   1e7e4:	cmp	r7, #0
   1e7e8:	blt	1e9b8 <__assert_fail@plt+0xd5e8>
   1e7ec:	bne	1e9b0 <__assert_fail@plt+0xd5e0>
   1e7f0:	mov	r5, #64	; 0x40
   1e7f4:	mov	r1, r7
   1e7f8:	mov	r0, r5
   1e7fc:	str	r3, [sp, #4]
   1e800:	bl	20fec <__assert_fail@plt+0xfc1c>
   1e804:	mov	r1, r7
   1e808:	mov	r4, r0
   1e80c:	mov	r0, r5
   1e810:	bl	2120c <__assert_fail@plt+0xfe3c>
   1e814:	ldr	r3, [sp, #4]
   1e818:	sub	r5, r5, r1
   1e81c:	cmp	r9, #0
   1e820:	sub	r2, r4, r6
   1e824:	streq	r9, [r8]
   1e828:	cmp	r2, sl
   1e82c:	bge	1e8b0 <__assert_fail@plt+0xd4e0>
   1e830:	cmp	sl, #0
   1e834:	blt	1e950 <__assert_fail@plt+0xd580>
   1e838:	cmp	r6, #0
   1e83c:	blt	1e85c <__assert_fail@plt+0xd48c>
   1e840:	mvn	r2, #-2147483648	; 0x80000000
   1e844:	sub	r2, r2, sl
   1e848:	cmp	r6, r2
   1e84c:	movle	r2, #0
   1e850:	movgt	r2, #1
   1e854:	cmp	r2, #0
   1e858:	bne	1e94c <__assert_fail@plt+0xd57c>
   1e85c:	add	r6, r6, sl
   1e860:	cmp	fp, r6
   1e864:	movge	r3, #0
   1e868:	andlt	r3, r3, #1
   1e86c:	cmp	r3, #0
   1e870:	mov	r4, r6
   1e874:	bne	1e94c <__assert_fail@plt+0xd57c>
   1e878:	cmp	r7, #0
   1e87c:	blt	1e964 <__assert_fail@plt+0xd594>
   1e880:	beq	1e8ac <__assert_fail@plt+0xd4dc>
   1e884:	cmp	r6, #0
   1e888:	blt	1ea08 <__assert_fail@plt+0xd638>
   1e88c:	mov	r1, r7
   1e890:	mvn	r0, #-2147483648	; 0x80000000
   1e894:	bl	20fec <__assert_fail@plt+0xfc1c>
   1e898:	cmp	r6, r0
   1e89c:	movle	r0, #0
   1e8a0:	movgt	r0, #1
   1e8a4:	cmp	r0, #0
   1e8a8:	bne	1e94c <__assert_fail@plt+0xd57c>
   1e8ac:	mul	r5, r6, r7
   1e8b0:	mov	r1, r5
   1e8b4:	mov	r0, r9
   1e8b8:	bl	1ec38 <__assert_fail@plt+0xd868>
   1e8bc:	cmp	r0, #0
   1e8c0:	beq	1e934 <__assert_fail@plt+0xd564>
   1e8c4:	str	r4, [r8]
   1e8c8:	add	sp, sp, #12
   1e8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8d0:	cmp	r7, #0
   1e8d4:	blt	1e990 <__assert_fail@plt+0xd5c0>
   1e8d8:	beq	1e7f0 <__assert_fail@plt+0xd420>
   1e8dc:	cmp	r4, #0
   1e8e0:	blt	1e9c0 <__assert_fail@plt+0xd5f0>
   1e8e4:	mov	r1, r7
   1e8e8:	mvn	r0, #-2147483648	; 0x80000000
   1e8ec:	str	r3, [sp, #4]
   1e8f0:	bl	20fec <__assert_fail@plt+0xfc1c>
   1e8f4:	ldr	r3, [sp, #4]
   1e8f8:	cmp	r0, r4
   1e8fc:	movge	r0, #0
   1e900:	movlt	r0, #1
   1e904:	cmp	r0, #0
   1e908:	mvnne	r5, #-2147483648	; 0x80000000
   1e90c:	bne	1e7f4 <__assert_fail@plt+0xd424>
   1e910:	mul	r5, r7, r4
   1e914:	cmp	r5, #63	; 0x3f
   1e918:	bgt	1e81c <__assert_fail@plt+0xd44c>
   1e91c:	b	1e7f0 <__assert_fail@plt+0xd420>
   1e920:	rsb	r1, r4, #-2147483648	; 0x80000000
   1e924:	cmp	r6, r1
   1e928:	movge	r1, #0
   1e92c:	movlt	r1, #1
   1e930:	b	1e7bc <__assert_fail@plt+0xd3ec>
   1e934:	adds	r5, r5, #0
   1e938:	movne	r5, #1
   1e93c:	cmp	r9, #0
   1e940:	orreq	r5, r5, #1
   1e944:	cmp	r5, #0
   1e948:	beq	1e8c4 <__assert_fail@plt+0xd4f4>
   1e94c:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1e950:	rsb	r2, sl, #-2147483648	; 0x80000000
   1e954:	cmp	r6, r2
   1e958:	movge	r2, #0
   1e95c:	movlt	r2, #1
   1e960:	b	1e854 <__assert_fail@plt+0xd484>
   1e964:	cmp	r6, #0
   1e968:	blt	1e9ec <__assert_fail@plt+0xd61c>
   1e96c:	cmn	r7, #1
   1e970:	beq	1e8ac <__assert_fail@plt+0xd4dc>
   1e974:	mov	r1, r7
   1e978:	mov	r0, #-2147483648	; 0x80000000
   1e97c:	bl	20fec <__assert_fail@plt+0xfc1c>
   1e980:	cmp	r6, r0
   1e984:	movle	r0, #0
   1e988:	movgt	r0, #1
   1e98c:	b	1e8a4 <__assert_fail@plt+0xd4d4>
   1e990:	cmp	r4, #0
   1e994:	blt	1ea2c <__assert_fail@plt+0xd65c>
   1e998:	cmn	r7, #1
   1e99c:	beq	1e910 <__assert_fail@plt+0xd540>
   1e9a0:	str	r3, [sp, #4]
   1e9a4:	mov	r1, r7
   1e9a8:	mov	r0, #-2147483648	; 0x80000000
   1e9ac:	b	1e8f0 <__assert_fail@plt+0xd520>
   1e9b0:	mov	r4, fp
   1e9b4:	b	1e8e4 <__assert_fail@plt+0xd514>
   1e9b8:	mov	r4, fp
   1e9bc:	b	1e998 <__assert_fail@plt+0xd5c8>
   1e9c0:	cmn	r4, #1
   1e9c4:	beq	1e910 <__assert_fail@plt+0xd540>
   1e9c8:	mov	r1, r4
   1e9cc:	mov	r0, #-2147483648	; 0x80000000
   1e9d0:	str	r3, [sp, #4]
   1e9d4:	bl	20fec <__assert_fail@plt+0xfc1c>
   1e9d8:	ldr	r3, [sp, #4]
   1e9dc:	cmp	r7, r0
   1e9e0:	movle	r0, #0
   1e9e4:	movgt	r0, #1
   1e9e8:	b	1e904 <__assert_fail@plt+0xd534>
   1e9ec:	mov	r1, r7
   1e9f0:	mvn	r0, #-2147483648	; 0x80000000
   1e9f4:	bl	20fec <__assert_fail@plt+0xfc1c>
   1e9f8:	cmp	r6, r0
   1e9fc:	movge	r0, #0
   1ea00:	movlt	r0, #1
   1ea04:	b	1e8a4 <__assert_fail@plt+0xd4d4>
   1ea08:	cmn	r6, #1
   1ea0c:	beq	1e8ac <__assert_fail@plt+0xd4dc>
   1ea10:	mov	r1, r6
   1ea14:	mov	r0, #-2147483648	; 0x80000000
   1ea18:	bl	20fec <__assert_fail@plt+0xfc1c>
   1ea1c:	cmp	r7, r0
   1ea20:	movle	r0, #0
   1ea24:	movgt	r0, #1
   1ea28:	b	1e8a4 <__assert_fail@plt+0xd4d4>
   1ea2c:	mov	r1, r7
   1ea30:	mvn	r0, #-2147483648	; 0x80000000
   1ea34:	str	r3, [sp, #4]
   1ea38:	bl	20fec <__assert_fail@plt+0xfc1c>
   1ea3c:	ldr	r3, [sp, #4]
   1ea40:	cmp	r0, r4
   1ea44:	movle	r0, #0
   1ea48:	movgt	r0, #1
   1ea4c:	b	1e904 <__assert_fail@plt+0xd534>
   1ea50:	push	{r4, lr}
   1ea54:	mov	r1, #1
   1ea58:	bl	1ebc4 <__assert_fail@plt+0xd7f4>
   1ea5c:	cmp	r0, #0
   1ea60:	popne	{r4, pc}
   1ea64:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1ea68:	push	{r4, lr}
   1ea6c:	mov	r1, #1
   1ea70:	bl	1ebc4 <__assert_fail@plt+0xd7f4>
   1ea74:	cmp	r0, #0
   1ea78:	popne	{r4, pc}
   1ea7c:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1ea80:	push	{r4, lr}
   1ea84:	bl	1ebc4 <__assert_fail@plt+0xd7f4>
   1ea88:	cmp	r0, #0
   1ea8c:	popne	{r4, pc}
   1ea90:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1ea94:	push	{r4, lr}
   1ea98:	bl	1ebc4 <__assert_fail@plt+0xd7f4>
   1ea9c:	cmp	r0, #0
   1eaa0:	popne	{r4, pc}
   1eaa4:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1eaa8:	push	{r4, r5, r6, lr}
   1eaac:	mov	r6, r0
   1eab0:	mov	r0, r1
   1eab4:	mov	r4, r1
   1eab8:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1eabc:	subs	r5, r0, #0
   1eac0:	beq	1ead8 <__assert_fail@plt+0xd708>
   1eac4:	mov	r2, r4
   1eac8:	mov	r1, r6
   1eacc:	bl	110f4 <memcpy@plt>
   1ead0:	mov	r0, r5
   1ead4:	pop	{r4, r5, r6, pc}
   1ead8:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1eadc:	push	{r4, r5, r6, lr}
   1eae0:	mov	r6, r0
   1eae4:	mov	r0, r1
   1eae8:	mov	r4, r1
   1eaec:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1eaf0:	subs	r5, r0, #0
   1eaf4:	beq	1eb0c <__assert_fail@plt+0xd73c>
   1eaf8:	mov	r2, r4
   1eafc:	mov	r1, r6
   1eb00:	bl	110f4 <memcpy@plt>
   1eb04:	mov	r0, r5
   1eb08:	pop	{r4, r5, r6, pc}
   1eb0c:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1eb10:	push	{r4, r5, r6, lr}
   1eb14:	mov	r6, r0
   1eb18:	add	r0, r1, #1
   1eb1c:	mov	r4, r1
   1eb20:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1eb24:	subs	r5, r0, #0
   1eb28:	beq	1eb48 <__assert_fail@plt+0xd778>
   1eb2c:	mov	r3, #0
   1eb30:	mov	r1, r6
   1eb34:	strb	r3, [r5, r4]
   1eb38:	mov	r2, r4
   1eb3c:	bl	110f4 <memcpy@plt>
   1eb40:	mov	r0, r5
   1eb44:	pop	{r4, r5, r6, pc}
   1eb48:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1eb4c:	push	{r4, r5, r6, lr}
   1eb50:	mov	r6, r0
   1eb54:	bl	11274 <strlen@plt>
   1eb58:	add	r4, r0, #1
   1eb5c:	mov	r0, r4
   1eb60:	bl	1ec0c <__assert_fail@plt+0xd83c>
   1eb64:	subs	r5, r0, #0
   1eb68:	beq	1eb80 <__assert_fail@plt+0xd7b0>
   1eb6c:	mov	r2, r4
   1eb70:	mov	r1, r6
   1eb74:	bl	110f4 <memcpy@plt>
   1eb78:	mov	r0, r5
   1eb7c:	pop	{r4, r5, r6, pc}
   1eb80:	bl	1eb84 <__assert_fail@plt+0xd7b4>
   1eb84:	ldr	r3, [pc, #44]	; 1ebb8 <__assert_fail@plt+0xd7e8>
   1eb88:	push	{r4, lr}
   1eb8c:	mov	r2, #5
   1eb90:	ldr	r1, [pc, #36]	; 1ebbc <__assert_fail@plt+0xd7ec>
   1eb94:	mov	r0, #0
   1eb98:	ldr	r4, [r3]
   1eb9c:	bl	11130 <dcgettext@plt>
   1eba0:	ldr	r2, [pc, #24]	; 1ebc0 <__assert_fail@plt+0xd7f0>
   1eba4:	mov	r1, #0
   1eba8:	mov	r3, r0
   1ebac:	mov	r0, r4
   1ebb0:	bl	111c0 <error@plt>
   1ebb4:	bl	113a0 <abort@plt>
   1ebb8:	andeq	r4, r3, r8, asr #2
   1ebbc:			; <UNDEFINED> instruction: 0x00023db4
   1ebc0:	andeq	r1, r2, r0, asr #30
   1ebc4:	cmp	r1, #0
   1ebc8:	cmpne	r0, #0
   1ebcc:	moveq	r1, #1
   1ebd0:	moveq	r0, r1
   1ebd4:	umull	r2, r3, r0, r1
   1ebd8:	adds	r3, r3, #0
   1ebdc:	movne	r3, #1
   1ebe0:	cmp	r2, #0
   1ebe4:	blt	1ebf4 <__assert_fail@plt+0xd824>
   1ebe8:	cmp	r3, #0
   1ebec:	bne	1ebf4 <__assert_fail@plt+0xd824>
   1ebf0:	b	11064 <calloc@plt>
   1ebf4:	push	{r4, lr}
   1ebf8:	bl	11298 <__errno_location@plt>
   1ebfc:	mov	r3, #12
   1ec00:	str	r3, [r0]
   1ec04:	mov	r0, #0
   1ec08:	pop	{r4, pc}
   1ec0c:	cmp	r0, #0
   1ec10:	moveq	r0, #1
   1ec14:	cmp	r0, #0
   1ec18:	blt	1ec20 <__assert_fail@plt+0xd850>
   1ec1c:	b	111e4 <malloc@plt>
   1ec20:	push	{r4, lr}
   1ec24:	bl	11298 <__errno_location@plt>
   1ec28:	mov	r3, #12
   1ec2c:	str	r3, [r0]
   1ec30:	mov	r0, #0
   1ec34:	pop	{r4, pc}
   1ec38:	cmp	r0, #0
   1ec3c:	beq	1ec60 <__assert_fail@plt+0xd890>
   1ec40:	cmp	r1, #0
   1ec44:	push	{lr}		; (str lr, [sp, #-4]!)
   1ec48:	sub	sp, sp, #12
   1ec4c:	beq	1ec68 <__assert_fail@plt+0xd898>
   1ec50:	blt	1ec80 <__assert_fail@plt+0xd8b0>
   1ec54:	add	sp, sp, #12
   1ec58:	pop	{lr}		; (ldr lr, [sp], #4)
   1ec5c:	b	11148 <realloc@plt>
   1ec60:	mov	r0, r1
   1ec64:	b	1ec0c <__assert_fail@plt+0xd83c>
   1ec68:	str	r1, [sp, #4]
   1ec6c:	bl	1ee10 <__assert_fail@plt+0xda40>
   1ec70:	ldr	r3, [sp, #4]
   1ec74:	mov	r0, r3
   1ec78:	add	sp, sp, #12
   1ec7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec80:	bl	11298 <__errno_location@plt>
   1ec84:	mov	r2, #12
   1ec88:	mov	r3, #0
   1ec8c:	str	r2, [r0]
   1ec90:	b	1ec74 <__assert_fail@plt+0xd8a4>
   1ec94:	push	{r4, r5, r6, lr}
   1ec98:	mov	r4, r0
   1ec9c:	bl	111a8 <__fpending@plt>
   1eca0:	ldr	r5, [r4]
   1eca4:	and	r5, r5, #32
   1eca8:	mov	r6, r0
   1ecac:	mov	r0, r4
   1ecb0:	bl	1ed10 <__assert_fail@plt+0xd940>
   1ecb4:	cmp	r5, #0
   1ecb8:	mov	r4, r0
   1ecbc:	bne	1ecdc <__assert_fail@plt+0xd90c>
   1ecc0:	cmp	r0, #0
   1ecc4:	beq	1ecd4 <__assert_fail@plt+0xd904>
   1ecc8:	cmp	r6, #0
   1eccc:	beq	1ecf8 <__assert_fail@plt+0xd928>
   1ecd0:	mvn	r4, #0
   1ecd4:	mov	r0, r4
   1ecd8:	pop	{r4, r5, r6, pc}
   1ecdc:	cmp	r0, #0
   1ece0:	bne	1ecd0 <__assert_fail@plt+0xd900>
   1ece4:	bl	11298 <__errno_location@plt>
   1ece8:	str	r4, [r0]
   1ecec:	mvn	r4, #0
   1ecf0:	mov	r0, r4
   1ecf4:	pop	{r4, r5, r6, pc}
   1ecf8:	bl	11298 <__errno_location@plt>
   1ecfc:	ldr	r4, [r0]
   1ed00:	subs	r4, r4, #9
   1ed04:	mvnne	r4, #0
   1ed08:	mov	r0, r4
   1ed0c:	pop	{r4, r5, r6, pc}
   1ed10:	push	{r4, r5, lr}
   1ed14:	sub	sp, sp, #12
   1ed18:	mov	r4, r0
   1ed1c:	bl	112e0 <fileno@plt>
   1ed20:	cmp	r0, #0
   1ed24:	mov	r0, r4
   1ed28:	blt	1eda4 <__assert_fail@plt+0xd9d4>
   1ed2c:	bl	11214 <__freading@plt>
   1ed30:	cmp	r0, #0
   1ed34:	bne	1ed70 <__assert_fail@plt+0xd9a0>
   1ed38:	mov	r0, r4
   1ed3c:	bl	1edb0 <__assert_fail@plt+0xd9e0>
   1ed40:	cmp	r0, #0
   1ed44:	beq	1eda0 <__assert_fail@plt+0xd9d0>
   1ed48:	bl	11298 <__errno_location@plt>
   1ed4c:	mov	r5, r0
   1ed50:	mov	r0, r4
   1ed54:	ldr	r4, [r5]
   1ed58:	bl	112f8 <fclose@plt>
   1ed5c:	cmp	r4, #0
   1ed60:	mvnne	r0, #0
   1ed64:	strne	r4, [r5]
   1ed68:	add	sp, sp, #12
   1ed6c:	pop	{r4, r5, pc}
   1ed70:	mov	r0, r4
   1ed74:	bl	112e0 <fileno@plt>
   1ed78:	mov	r3, #1
   1ed7c:	str	r3, [sp]
   1ed80:	mov	r2, #0
   1ed84:	mov	r3, #0
   1ed88:	bl	11190 <lseek64@plt>
   1ed8c:	mvn	r3, #0
   1ed90:	mvn	r2, #0
   1ed94:	cmp	r1, r3
   1ed98:	cmpeq	r0, r2
   1ed9c:	bne	1ed38 <__assert_fail@plt+0xd968>
   1eda0:	mov	r0, r4
   1eda4:	add	sp, sp, #12
   1eda8:	pop	{r4, r5, lr}
   1edac:	b	112f8 <fclose@plt>
   1edb0:	push	{r4, lr}
   1edb4:	subs	r4, r0, #0
   1edb8:	sub	sp, sp, #8
   1edbc:	beq	1edd8 <__assert_fail@plt+0xda08>
   1edc0:	bl	11214 <__freading@plt>
   1edc4:	cmp	r0, #0
   1edc8:	beq	1edd8 <__assert_fail@plt+0xda08>
   1edcc:	ldr	r3, [r4]
   1edd0:	tst	r3, #256	; 0x100
   1edd4:	bne	1ede8 <__assert_fail@plt+0xda18>
   1edd8:	mov	r0, r4
   1eddc:	add	sp, sp, #8
   1ede0:	pop	{r4, lr}
   1ede4:	b	110c4 <fflush@plt>
   1ede8:	mov	r3, #1
   1edec:	str	r3, [sp]
   1edf0:	mov	r2, #0
   1edf4:	mov	r3, #0
   1edf8:	mov	r0, r4
   1edfc:	bl	1ee68 <__assert_fail@plt+0xda98>
   1ee00:	mov	r0, r4
   1ee04:	add	sp, sp, #8
   1ee08:	pop	{r4, lr}
   1ee0c:	b	110c4 <fflush@plt>
   1ee10:	push	{r4, r5, lr}
   1ee14:	sub	sp, sp, #12
   1ee18:	mov	r5, r0
   1ee1c:	bl	11298 <__errno_location@plt>
   1ee20:	mov	r2, #0
   1ee24:	mov	r4, r0
   1ee28:	ldr	r3, [r0]
   1ee2c:	str	r2, [r4]
   1ee30:	mov	r0, r5
   1ee34:	str	r3, [sp]
   1ee38:	str	r3, [sp, #4]
   1ee3c:	bl	110d0 <free@plt>
   1ee40:	ldr	r3, [r4]
   1ee44:	add	r2, sp, #8
   1ee48:	cmp	r3, #0
   1ee4c:	moveq	r3, #4
   1ee50:	movne	r3, #0
   1ee54:	add	r3, r2, r3
   1ee58:	ldr	r3, [r3, #-8]
   1ee5c:	str	r3, [r4]
   1ee60:	add	sp, sp, #12
   1ee64:	pop	{r4, r5, pc}
   1ee68:	push	{r4, r5, r6, r7, r8, lr}
   1ee6c:	sub	sp, sp, #8
   1ee70:	ldmib	r0, {ip, lr}
   1ee74:	mov	r4, r0
   1ee78:	ldr	r5, [sp, #32]
   1ee7c:	cmp	lr, ip
   1ee80:	beq	1ee98 <__assert_fail@plt+0xdac8>
   1ee84:	str	r5, [sp, #32]
   1ee88:	mov	r0, r4
   1ee8c:	add	sp, sp, #8
   1ee90:	pop	{r4, r5, r6, r7, r8, lr}
   1ee94:	b	11304 <fseeko64@plt>
   1ee98:	ldr	lr, [r0, #20]
   1ee9c:	ldr	ip, [r0, #16]
   1eea0:	cmp	lr, ip
   1eea4:	bne	1ee84 <__assert_fail@plt+0xdab4>
   1eea8:	ldr	r8, [r0, #36]	; 0x24
   1eeac:	cmp	r8, #0
   1eeb0:	bne	1ee84 <__assert_fail@plt+0xdab4>
   1eeb4:	mov	r6, r2
   1eeb8:	mov	r7, r3
   1eebc:	bl	112e0 <fileno@plt>
   1eec0:	mov	r2, r6
   1eec4:	mov	r3, r7
   1eec8:	str	r5, [sp]
   1eecc:	bl	11190 <lseek64@plt>
   1eed0:	mvn	r3, #0
   1eed4:	mvn	r2, #0
   1eed8:	cmp	r1, r3
   1eedc:	cmpeq	r0, r2
   1eee0:	beq	1ef00 <__assert_fail@plt+0xdb30>
   1eee4:	ldr	r3, [r4]
   1eee8:	strd	r0, [r4, #80]	; 0x50
   1eeec:	mov	r0, r8
   1eef0:	bic	r3, r3, #16
   1eef4:	str	r3, [r4]
   1eef8:	add	sp, sp, #8
   1eefc:	pop	{r4, r5, r6, r7, r8, pc}
   1ef00:	mvn	r0, #0
   1ef04:	b	1eef8 <__assert_fail@plt+0xdb28>
   1ef08:	push	{r4, lr}
   1ef0c:	mov	r0, #14
   1ef10:	bl	11334 <nl_langinfo@plt>
   1ef14:	cmp	r0, #0
   1ef18:	beq	1ef30 <__assert_fail@plt+0xdb60>
   1ef1c:	ldrb	r2, [r0]
   1ef20:	ldr	r3, [pc, #16]	; 1ef38 <__assert_fail@plt+0xdb68>
   1ef24:	cmp	r2, #0
   1ef28:	moveq	r0, r3
   1ef2c:	pop	{r4, pc}
   1ef30:	ldr	r0, [pc]	; 1ef38 <__assert_fail@plt+0xdb68>
   1ef34:	pop	{r4, pc}
   1ef38:	andeq	r3, r2, r8, asr #27
   1ef3c:	push	{r4, r5, r6, r7, lr}
   1ef40:	subs	r6, r0, #0
   1ef44:	sub	sp, sp, #12
   1ef48:	addeq	r6, sp, #4
   1ef4c:	mov	r0, r6
   1ef50:	mov	r5, r2
   1ef54:	mov	r7, r1
   1ef58:	bl	111b4 <mbrtowc@plt>
   1ef5c:	cmp	r5, #0
   1ef60:	cmnne	r0, #3
   1ef64:	mov	r4, r0
   1ef68:	bls	1ef84 <__assert_fail@plt+0xdbb4>
   1ef6c:	mov	r0, #0
   1ef70:	bl	20cec <__assert_fail@plt+0xf91c>
   1ef74:	cmp	r0, #0
   1ef78:	moveq	r4, #1
   1ef7c:	ldrbeq	r3, [r7]
   1ef80:	streq	r3, [r6]
   1ef84:	mov	r0, r4
   1ef88:	add	sp, sp, #12
   1ef8c:	pop	{r4, r5, r6, r7, pc}
   1ef90:	push	{r4, r5, r6, lr}
   1ef94:	subs	r4, r2, #0
   1ef98:	mov	r6, r0
   1ef9c:	beq	1efc8 <__assert_fail@plt+0xdbf8>
   1efa0:	mov	r5, r1
   1efa4:	bl	11238 <__ctype_toupper_loc@plt>
   1efa8:	add	r3, r5, r4
   1efac:	add	r2, r6, r4
   1efb0:	ldrb	lr, [r3, #-1]!
   1efb4:	ldr	ip, [r0]
   1efb8:	cmp	r5, r3
   1efbc:	ldr	ip, [ip, lr, lsl #2]
   1efc0:	strb	ip, [r2, #-1]!
   1efc4:	bne	1efb0 <__assert_fail@plt+0xdbe0>
   1efc8:	mov	r0, r6
   1efcc:	pop	{r4, r5, r6, pc}
   1efd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efd4:	sub	sp, sp, #1120	; 0x460
   1efd8:	sub	sp, sp, #4
   1efdc:	mov	r4, r3
   1efe0:	str	r3, [sp, #40]	; 0x28
   1efe4:	str	r1, [sp, #36]	; 0x24
   1efe8:	mov	sl, r2
   1efec:	mov	r6, r0
   1eff0:	bl	11298 <__errno_location@plt>
   1eff4:	ldr	r3, [r4, #40]	; 0x28
   1eff8:	ldr	r2, [r4, #8]
   1effc:	mov	r1, r3
   1f000:	ldr	r3, [pc, #4040]	; 1ffd0 <__assert_fail@plt+0xec00>
   1f004:	mov	ip, r2
   1f008:	str	r2, [sp, #56]	; 0x38
   1f00c:	subs	r2, r1, #0
   1f010:	moveq	r2, r3
   1f014:	cmp	ip, #12
   1f018:	str	r2, [sp, #60]	; 0x3c
   1f01c:	ldr	r5, [sp, #1168]	; 0x490
   1f020:	ldr	r3, [r0]
   1f024:	str	r0, [sp, #48]	; 0x30
   1f028:	str	r3, [sp, #68]	; 0x44
   1f02c:	ldrb	r3, [sp, #1160]	; 0x488
   1f030:	str	r3, [sp, #64]	; 0x40
   1f034:	subgt	r3, ip, #12
   1f038:	strgt	r3, [sp, #56]	; 0x38
   1f03c:	bgt	1f04c <__assert_fail@plt+0xdc7c>
   1f040:	subs	r3, ip, #0
   1f044:	moveq	r3, #12
   1f048:	str	r3, [sp, #56]	; 0x38
   1f04c:	ldrb	r3, [sl]
   1f050:	cmp	r3, #0
   1f054:	beq	208c0 <__assert_fail@plt+0xf4f0>
   1f058:	ldr	fp, [pc, #3956]	; 1ffd4 <__assert_fail@plt+0xec04>
   1f05c:	mov	r2, #0
   1f060:	str	r2, [sp, #28]
   1f064:	str	sl, [sp, #32]
   1f068:	cmp	r3, #37	; 0x25
   1f06c:	beq	1f15c <__assert_fail@plt+0xdd8c>
   1f070:	bic	r5, r5, r5, asr #31
   1f074:	ldr	r2, [sp, #36]	; 0x24
   1f078:	ldr	r1, [sp, #28]
   1f07c:	cmp	r5, #1
   1f080:	movcs	r4, r5
   1f084:	movcc	r4, #1
   1f088:	sub	r2, r2, r1
   1f08c:	cmp	r4, r2
   1f090:	bcs	1f138 <__assert_fail@plt+0xdd68>
   1f094:	cmp	r6, #0
   1f098:	beq	1f0c8 <__assert_fail@plt+0xdcf8>
   1f09c:	cmp	r5, #1
   1f0a0:	ble	1f0c4 <__assert_fail@plt+0xdcf4>
   1f0a4:	sub	r5, r5, #1
   1f0a8:	mov	r0, r6
   1f0ac:	mov	r2, r5
   1f0b0:	mov	r1, #32
   1f0b4:	bl	112c8 <memset@plt>
   1f0b8:	ldr	r3, [sp, #32]
   1f0bc:	add	r6, r6, r5
   1f0c0:	ldrb	r3, [r3]
   1f0c4:	strb	r3, [r6], #1
   1f0c8:	ldr	r3, [sp, #28]
   1f0cc:	add	r3, r3, r4
   1f0d0:	ldr	r4, [sp, #32]
   1f0d4:	str	r3, [sp, #28]
   1f0d8:	ldrb	r3, [r4, #1]
   1f0dc:	add	r2, r4, #1
   1f0e0:	str	r2, [sp, #32]
   1f0e4:	cmp	r3, #0
   1f0e8:	mvn	r5, #0
   1f0ec:	bne	1f068 <__assert_fail@plt+0xdc98>
   1f0f0:	ldr	r3, [sp, #36]	; 0x24
   1f0f4:	ldr	r2, [sp, #68]	; 0x44
   1f0f8:	cmp	r6, #0
   1f0fc:	cmpne	r3, #0
   1f100:	movne	r3, #0
   1f104:	strbne	r3, [r6]
   1f108:	ldr	r3, [sp, #48]	; 0x30
   1f10c:	ldr	r0, [sp, #28]
   1f110:	str	r2, [r3]
   1f114:	b	1f150 <__assert_fail@plt+0xdd80>
   1f118:	ldr	r3, [sp, #28]
   1f11c:	ldr	r2, [sp, #36]	; 0x24
   1f120:	add	r3, r3, r8
   1f124:	str	r3, [sp, #28]
   1f128:	sub	r3, r2, r3
   1f12c:	cmp	r3, #1
   1f130:	sub	r5, r5, r8
   1f134:	bhi	1fa14 <__assert_fail@plt+0xe644>
   1f138:	ldr	r2, [sp, #48]	; 0x30
   1f13c:	mov	r3, #34	; 0x22
   1f140:	str	r3, [r2]
   1f144:	mov	r3, #0
   1f148:	mov	r0, r3
   1f14c:	str	r3, [sp, #28]
   1f150:	add	sp, sp, #1120	; 0x460
   1f154:	add	sp, sp, #4
   1f158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f15c:	mov	r7, #0
   1f160:	ldr	r4, [sp, #32]
   1f164:	ldr	r3, [sp, #64]	; 0x40
   1f168:	mov	sl, r7
   1f16c:	str	r3, [sp, #44]	; 0x2c
   1f170:	ldrb	r1, [r4, #1]!
   1f174:	sub	r3, r1, #35	; 0x23
   1f178:	mov	r9, r1
   1f17c:	cmp	r3, #60	; 0x3c
   1f180:	ldrls	pc, [pc, r3, lsl #2]
   1f184:	b	1f298 <__assert_fail@plt+0xdec8>
   1f188:	muleq	r1, r0, r2
   1f18c:	muleq	r1, r8, r2
   1f190:	muleq	r1, r8, r2
   1f194:	muleq	r1, r8, r2
   1f198:	muleq	r1, r8, r2
   1f19c:	muleq	r1, r8, r2
   1f1a0:	muleq	r1, r8, r2
   1f1a4:	muleq	r1, r8, r2
   1f1a8:	andeq	pc, r1, r8, lsl #5
   1f1ac:	muleq	r1, r8, r2
   1f1b0:	andeq	pc, r1, r8, lsl #5
   1f1b4:	muleq	r1, r8, r2
   1f1b8:	muleq	r1, r8, r2
   1f1bc:	andeq	pc, r1, r8, lsl #5
   1f1c0:	muleq	r1, r8, r2
   1f1c4:	muleq	r1, r8, r2
   1f1c8:	muleq	r1, r8, r2
   1f1cc:	muleq	r1, r8, r2
   1f1d0:	muleq	r1, r8, r2
   1f1d4:	muleq	r1, r8, r2
   1f1d8:	muleq	r1, r8, r2
   1f1dc:	muleq	r1, r8, r2
   1f1e0:	muleq	r1, r8, r2
   1f1e4:	muleq	r1, r8, r2
   1f1e8:	muleq	r1, r8, r2
   1f1ec:	muleq	r1, r8, r2
   1f1f0:	muleq	r1, r8, r2
   1f1f4:	muleq	r1, r8, r2
   1f1f8:	muleq	r1, r8, r2
   1f1fc:	muleq	r1, r8, r2
   1f200:	muleq	r1, r8, r2
   1f204:	muleq	r1, r8, r2
   1f208:	muleq	r1, r8, r2
   1f20c:	muleq	r1, r8, r2
   1f210:	muleq	r1, r8, r2
   1f214:	muleq	r1, r8, r2
   1f218:	muleq	r1, r8, r2
   1f21c:	muleq	r1, r8, r2
   1f220:	muleq	r1, r8, r2
   1f224:	muleq	r1, r8, r2
   1f228:	muleq	r1, r8, r2
   1f22c:	muleq	r1, r8, r2
   1f230:	muleq	r1, r8, r2
   1f234:	muleq	r1, r8, r2
   1f238:	muleq	r1, r8, r2
   1f23c:	muleq	r1, r8, r2
   1f240:	muleq	r1, r8, r2
   1f244:	muleq	r1, r8, r2
   1f248:	muleq	r1, r8, r2
   1f24c:	muleq	r1, r8, r2
   1f250:	muleq	r1, r8, r2
   1f254:	muleq	r1, r8, r2
   1f258:	muleq	r1, r8, r2
   1f25c:	muleq	r1, r8, r2
   1f260:	muleq	r1, r8, r2
   1f264:	muleq	r1, r8, r2
   1f268:	muleq	r1, r8, r2
   1f26c:	muleq	r1, r8, r2
   1f270:	muleq	r1, r8, r2
   1f274:	andeq	pc, r1, ip, ror r2	; <UNPREDICTABLE>
   1f278:	andeq	pc, r1, r8, lsl #5
   1f27c:	mov	r3, #1
   1f280:	str	r3, [sp, #44]	; 0x2c
   1f284:	b	1f170 <__assert_fail@plt+0xdda0>
   1f288:	mov	sl, r1
   1f28c:	b	1f170 <__assert_fail@plt+0xdda0>
   1f290:	mov	r7, #1
   1f294:	b	1f170 <__assert_fail@plt+0xdda0>
   1f298:	sub	r3, r1, #48	; 0x30
   1f29c:	cmp	r3, #9
   1f2a0:	bhi	1f2e4 <__assert_fail@plt+0xdf14>
   1f2a4:	ldr	r9, [pc, #3372]	; 1ffd8 <__assert_fail@plt+0xec08>
   1f2a8:	mov	r5, #0
   1f2ac:	mvn	r8, #-2147483648	; 0x80000000
   1f2b0:	cmp	r5, #0
   1f2b4:	blt	1f5cc <__assert_fail@plt+0xe1fc>
   1f2b8:	cmp	r5, r9
   1f2bc:	ble	1f5e8 <__assert_fail@plt+0xe218>
   1f2c0:	mov	r3, r4
   1f2c4:	ldrb	r1, [r3, #1]
   1f2c8:	add	r4, r3, #1
   1f2cc:	mov	r3, r4
   1f2d0:	sub	r2, r1, #48	; 0x30
   1f2d4:	cmp	r2, #9
   1f2d8:	bls	1f2c4 <__assert_fail@plt+0xdef4>
   1f2dc:	mov	r9, r1
   1f2e0:	mvn	r5, #-2147483648	; 0x80000000
   1f2e4:	cmp	r1, #69	; 0x45
   1f2e8:	beq	1f4f0 <__assert_fail@plt+0xe120>
   1f2ec:	cmp	r1, #79	; 0x4f
   1f2f0:	movne	r9, #0
   1f2f4:	beq	1f4f0 <__assert_fail@plt+0xe120>
   1f2f8:	cmp	r1, #122	; 0x7a
   1f2fc:	ldrls	pc, [pc, r1, lsl #2]
   1f300:	b	1f500 <__assert_fail@plt+0xe130>
   1f304:	strdeq	pc, [r1], -ip
   1f308:	andeq	pc, r1, r0, lsl #10
   1f30c:	andeq	pc, r1, r0, lsl #10
   1f310:	andeq	pc, r1, r0, lsl #10
   1f314:	andeq	pc, r1, r0, lsl #10
   1f318:	andeq	pc, r1, r0, lsl #10
   1f31c:	andeq	pc, r1, r0, lsl #10
   1f320:	andeq	pc, r1, r0, lsl #10
   1f324:	andeq	pc, r1, r0, lsl #10
   1f328:	andeq	pc, r1, r0, lsl #10
   1f32c:	andeq	pc, r1, r0, lsl #10
   1f330:	andeq	pc, r1, r0, lsl #10
   1f334:	andeq	pc, r1, r0, lsl #10
   1f338:	andeq	pc, r1, r0, lsl #10
   1f33c:	andeq	pc, r1, r0, lsl #10
   1f340:	andeq	pc, r1, r0, lsl #10
   1f344:	andeq	pc, r1, r0, lsl #10
   1f348:	andeq	pc, r1, r0, lsl #10
   1f34c:	andeq	pc, r1, r0, lsl #10
   1f350:	andeq	pc, r1, r0, lsl #10
   1f354:	andeq	pc, r1, r0, lsl #10
   1f358:	andeq	pc, r1, r0, lsl #10
   1f35c:	andeq	pc, r1, r0, lsl #10
   1f360:	andeq	pc, r1, r0, lsl #10
   1f364:	andeq	pc, r1, r0, lsl #10
   1f368:	andeq	pc, r1, r0, lsl #10
   1f36c:	andeq	pc, r1, r0, lsl #10
   1f370:	andeq	pc, r1, r0, lsl #10
   1f374:	andeq	pc, r1, r0, lsl #10
   1f378:	andeq	pc, r1, r0, lsl #10
   1f37c:	andeq	pc, r1, r0, lsl #10
   1f380:	andeq	pc, r1, r0, lsl #10
   1f384:	andeq	pc, r1, r0, lsl #10
   1f388:	andeq	pc, r1, r0, lsl #10
   1f38c:	andeq	pc, r1, r0, lsl #10
   1f390:	andeq	pc, r1, r0, lsl #10
   1f394:	andeq	pc, r1, r0, lsl #10
   1f398:	andeq	r0, r2, r8, lsr r0
   1f39c:	andeq	pc, r1, r0, lsl #10
   1f3a0:	andeq	pc, r1, r0, lsl #10
   1f3a4:	andeq	pc, r1, r0, lsl #10
   1f3a8:	andeq	pc, r1, r0, lsl #10
   1f3ac:	andeq	pc, r1, r0, lsl #10
   1f3b0:	andeq	pc, r1, r0, lsl #10
   1f3b4:	andeq	pc, r1, r0, lsl #10
   1f3b8:	andeq	pc, r1, r0, lsl #10
   1f3bc:	andeq	pc, r1, r0, lsl #10
   1f3c0:	andeq	pc, r1, r0, lsl #10
   1f3c4:	andeq	pc, r1, r0, lsl #10
   1f3c8:	andeq	pc, r1, r0, lsl #10
   1f3cc:	andeq	pc, r1, r0, lsl #10
   1f3d0:	andeq	pc, r1, r0, lsl #10
   1f3d4:	andeq	pc, r1, r0, lsl #10
   1f3d8:	andeq	pc, r1, r0, lsl #10
   1f3dc:	andeq	pc, r1, r0, lsl #10
   1f3e0:	andeq	pc, r1, r0, lsl #10
   1f3e4:	andeq	pc, r1, r0, lsl #10
   1f3e8:	andeq	pc, r1, r0, lsl #10
   1f3ec:	andeq	r0, r2, r8, ror #3
   1f3f0:	andeq	pc, r1, r0, lsl #10
   1f3f4:	andeq	pc, r1, r0, lsl #10
   1f3f8:	andeq	pc, r1, r0, lsl #10
   1f3fc:	andeq	pc, r1, r0, lsl #10
   1f400:	andeq	pc, r1, r0, lsl #10
   1f404:	andeq	pc, r1, r0, lsl #10
   1f408:	andeq	pc, r1, r0, lsr r8	; <UNPREDICTABLE>
   1f40c:	muleq	r1, r0, r6
   1f410:	andeq	pc, r1, r0, ror r8	; <UNPREDICTABLE>
   1f414:	andeq	pc, r1, r4, lsr #25
   1f418:	andeq	pc, r1, r0, lsl #10
   1f41c:	muleq	r1, r0, fp
   1f420:			; <UNDEFINED> instruction: 0x0001fcb8
   1f424:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f428:			; <UNDEFINED> instruction: 0x000201bc
   1f42c:	andeq	pc, r1, r0, lsl #10
   1f430:	andeq	pc, r1, r0, lsl #10
   1f434:	andeq	pc, r1, r0, lsl #10
   1f438:	andeq	r0, r2, r4, lsr #3
   1f43c:	andeq	r0, r2, ip, lsl #5
   1f440:	andeq	pc, r1, r0, lsl #10
   1f444:	andeq	r0, r2, ip, ror #4
   1f448:	andeq	pc, r1, r0, lsl #10
   1f44c:	andeq	r0, r2, r0, ror #4
   1f450:	andeq	r0, r2, r8, asr #4
   1f454:	andeq	pc, r1, r4, asr #31
   1f458:	andeq	pc, r1, ip, lsl #31
   1f45c:			; <UNDEFINED> instruction: 0x0001fcb8
   1f460:	andeq	r0, r2, ip, lsl #4
   1f464:	andeq	pc, r1, r4, lsr #16
   1f468:	muleq	r2, ip, r7
   1f46c:	andeq	r0, r2, r8, ror #13
   1f470:	andeq	pc, r1, r0, lsl #10
   1f474:	andeq	pc, r1, r0, lsl #10
   1f478:	andeq	pc, r1, r0, lsl #10
   1f47c:	andeq	pc, r1, r0, lsl #10
   1f480:	andeq	pc, r1, r0, lsl #10
   1f484:	andeq	pc, r1, r0, lsl #10
   1f488:	andeq	pc, r1, r0, lsr r8	; <UNPREDICTABLE>
   1f48c:	andeq	pc, r1, r4, lsr #30
   1f490:	andeq	pc, r1, r4, lsr #16
   1f494:	andeq	pc, r1, r4, lsr lr	; <UNPREDICTABLE>
   1f498:			; <UNDEFINED> instruction: 0x000205b4
   1f49c:	andeq	pc, r1, r0, lsl #10
   1f4a0:			; <UNDEFINED> instruction: 0x0001fcb8
   1f4a4:	andeq	pc, r1, r4, lsr #30
   1f4a8:	andeq	pc, r1, r0, lsl #10
   1f4ac:	andeq	r0, r2, r8, ror r5
   1f4b0:	muleq	r2, r8, r6
   1f4b4:	andeq	r0, r2, r8, lsl #13
   1f4b8:	andeq	r0, r2, ip, asr #12
   1f4bc:	ldrdeq	r0, [r2], -r4
   1f4c0:	andeq	pc, r1, r0, lsl #10
   1f4c4:	andeq	r0, r2, r0, ror #13
   1f4c8:	andeq	r0, r2, ip, lsr #13
   1f4cc:	andeq	pc, r1, r4, lsr #13
   1f4d0:	ldrdeq	pc, [r1], -r4
   1f4d4:	andeq	r0, r2, r0, lsr #2
   1f4d8:	andeq	r0, r2, ip, ror #1
   1f4dc:	andeq	pc, r1, r0, lsl #10
   1f4e0:	ldrdeq	r0, [r2], -r4
   1f4e4:	andeq	pc, r1, r4, lsr #16
   1f4e8:	andeq	pc, r1, r8, asr #30
   1f4ec:	andeq	pc, r1, ip, ror #28
   1f4f0:	ldrb	r1, [r4, #1]
   1f4f4:	add	r4, r4, #1
   1f4f8:	b	1f2f8 <__assert_fail@plt+0xdf28>
   1f4fc:	sub	r4, r4, #1
   1f500:	ldr	r3, [sp, #32]
   1f504:	ldr	r2, [sp, #28]
   1f508:	sub	r8, r4, r3
   1f50c:	subs	r3, sl, #45	; 0x2d
   1f510:	movne	r3, #1
   1f514:	cmp	r5, #0
   1f518:	movlt	r3, #0
   1f51c:	cmp	r3, #0
   1f520:	add	r7, r8, #1
   1f524:	moveq	r5, #0
   1f528:	ldr	r3, [sp, #36]	; 0x24
   1f52c:	cmp	r7, r5
   1f530:	movcs	r9, r7
   1f534:	movcc	r9, r5
   1f538:	sub	r3, r3, r2
   1f53c:	cmp	r9, r3
   1f540:	bcs	1f138 <__assert_fail@plt+0xdd68>
   1f544:	cmp	r6, #0
   1f548:	beq	1f5bc <__assert_fail@plt+0xe1ec>
   1f54c:	cmp	r7, r5
   1f550:	bcs	1f578 <__assert_fail@plt+0xe1a8>
   1f554:	cmp	sl, #43	; 0x2b
   1f558:	cmpne	sl, #48	; 0x30
   1f55c:	sub	r5, r5, r7
   1f560:	mov	r0, r6
   1f564:	mov	r2, r5
   1f568:	moveq	r1, #48	; 0x30
   1f56c:	movne	r1, #32
   1f570:	bl	112c8 <memset@plt>
   1f574:	add	r6, r6, r5
   1f578:	ldr	r3, [sp, #44]	; 0x2c
   1f57c:	cmp	r3, #0
   1f580:	beq	1f7d8 <__assert_fail@plt+0xe408>
   1f584:	cmp	r7, #0
   1f588:	beq	1f5b8 <__assert_fail@plt+0xe1e8>
   1f58c:	bl	11238 <__ctype_toupper_loc@plt>
   1f590:	ldr	r3, [sp, #32]
   1f594:	add	r8, r6, r8
   1f598:	sub	sl, r3, #1
   1f59c:	mov	r3, r4
   1f5a0:	ldrb	r1, [r3], #-1
   1f5a4:	ldr	r2, [r0]
   1f5a8:	cmp	r3, sl
   1f5ac:	ldr	r2, [r2, r1, lsl #2]
   1f5b0:	strb	r2, [r8], #-1
   1f5b4:	bne	1f5a0 <__assert_fail@plt+0xe1d0>
   1f5b8:	add	r6, r6, r7
   1f5bc:	ldr	r3, [sp, #28]
   1f5c0:	add	r3, r3, r9
   1f5c4:	str	r3, [sp, #28]
   1f5c8:	b	1f0d8 <__assert_fail@plt+0xdd08>
   1f5cc:	cmn	r5, #1
   1f5d0:	beq	1f664 <__assert_fail@plt+0xe294>
   1f5d4:	mov	r1, r5
   1f5d8:	mov	r0, #-2147483648	; 0x80000000
   1f5dc:	bl	20fec <__assert_fail@plt+0xfc1c>
   1f5e0:	cmp	r0, #9
   1f5e4:	ble	1f2c0 <__assert_fail@plt+0xdef0>
   1f5e8:	ldrb	r0, [r4]
   1f5ec:	add	r5, r5, r5, lsl #2
   1f5f0:	cmp	r0, #47	; 0x2f
   1f5f4:	lsl	r3, r5, #1
   1f5f8:	mov	r1, r3
   1f5fc:	ble	1f67c <__assert_fail@plt+0xe2ac>
   1f600:	cmp	r3, #0
   1f604:	blt	1f640 <__assert_fail@plt+0xe270>
   1f608:	sub	r2, r0, #48	; 0x30
   1f60c:	sub	r2, r8, r2
   1f610:	cmp	r3, r2
   1f614:	movle	r2, #0
   1f618:	movgt	r2, #1
   1f61c:	cmp	r2, #0
   1f620:	beq	1f640 <__assert_fail@plt+0xe270>
   1f624:	ldrb	r1, [r4, #1]
   1f628:	add	r3, r4, #1
   1f62c:	sub	r2, r1, #48	; 0x30
   1f630:	cmp	r2, #9
   1f634:	bls	1f2c4 <__assert_fail@plt+0xdef4>
   1f638:	mov	r4, r3
   1f63c:	b	1f2dc <__assert_fail@plt+0xdf0c>
   1f640:	ldrb	r1, [r4, #1]
   1f644:	add	r3, r0, r3
   1f648:	sub	r5, r3, #48	; 0x30
   1f64c:	sub	r3, r1, #48	; 0x30
   1f650:	cmp	r3, #9
   1f654:	add	r4, r4, #1
   1f658:	bls	1f2b0 <__assert_fail@plt+0xdee0>
   1f65c:	mov	r9, r1
   1f660:	b	1f2e4 <__assert_fail@plt+0xdf14>
   1f664:	ldrb	r0, [r4]
   1f668:	cmp	r0, #47	; 0x2f
   1f66c:	mvngt	r3, #9
   1f670:	bgt	1f640 <__assert_fail@plt+0xe270>
   1f674:	mvn	r1, #9
   1f678:	mov	r3, r1
   1f67c:	rsb	r2, r0, #-2147483600	; 0x80000030
   1f680:	cmp	r2, r1
   1f684:	movle	r2, #0
   1f688:	movgt	r2, #1
   1f68c:	b	1f61c <__assert_fail@plt+0xe24c>
   1f690:	cmp	r9, #69	; 0x45
   1f694:	beq	1f500 <__assert_fail@plt+0xe130>
   1f698:	cmp	r7, #0
   1f69c:	beq	1f6a8 <__assert_fail@plt+0xe2d8>
   1f6a0:	str	r7, [sp, #44]	; 0x2c
   1f6a4:	mov	r7, #0
   1f6a8:	cmp	r9, #0
   1f6ac:	mov	r3, #37	; 0x25
   1f6b0:	mov	r2, #32
   1f6b4:	strb	r3, [sp, #81]	; 0x51
   1f6b8:	addeq	r3, sp, #80	; 0x50
   1f6bc:	strb	r2, [sp, #80]	; 0x50
   1f6c0:	streq	r3, [sp, #32]
   1f6c4:	addeq	ip, sp, #82	; 0x52
   1f6c8:	moveq	r2, r3
   1f6cc:	bne	1f7c0 <__assert_fail@plt+0xe3f0>
   1f6d0:	mov	lr, #0
   1f6d4:	strb	r1, [ip]
   1f6d8:	add	r0, sp, #96	; 0x60
   1f6dc:	ldr	r3, [sp, #40]	; 0x28
   1f6e0:	strb	lr, [ip, #1]
   1f6e4:	mov	r1, #1024	; 0x400
   1f6e8:	bl	111fc <strftime@plt>
   1f6ec:	subs	r9, r0, #0
   1f6f0:	beq	1f0d8 <__assert_fail@plt+0xdd08>
   1f6f4:	mvn	r3, r5
   1f6f8:	cmp	sl, #45	; 0x2d
   1f6fc:	lsr	r3, r3, #31
   1f700:	moveq	r3, #0
   1f704:	cmp	r3, #0
   1f708:	moveq	r5, #0
   1f70c:	sub	r8, r9, #1
   1f710:	cmp	r8, r5
   1f714:	movcs	r3, r8
   1f718:	movcc	r3, r5
   1f71c:	mov	r2, r3
   1f720:	str	r3, [sp, #32]
   1f724:	ldr	r1, [sp, #28]
   1f728:	ldr	r3, [sp, #36]	; 0x24
   1f72c:	sub	r3, r3, r1
   1f730:	cmp	r2, r3
   1f734:	bcs	1f138 <__assert_fail@plt+0xdd68>
   1f738:	cmp	r6, #0
   1f73c:	beq	1f79c <__assert_fail@plt+0xe3cc>
   1f740:	cmp	r8, r5
   1f744:	bcs	1f76c <__assert_fail@plt+0xe39c>
   1f748:	cmp	sl, #43	; 0x2b
   1f74c:	cmpne	sl, #48	; 0x30
   1f750:	sub	r5, r5, r8
   1f754:	mov	r0, r6
   1f758:	mov	r2, r5
   1f75c:	moveq	r1, #48	; 0x30
   1f760:	movne	r1, #32
   1f764:	bl	112c8 <memset@plt>
   1f768:	add	r6, r6, r5
   1f76c:	cmp	r7, #0
   1f770:	bne	20820 <__assert_fail@plt+0xf450>
   1f774:	ldr	r3, [sp, #44]	; 0x2c
   1f778:	cmp	r3, #0
   1f77c:	bne	1f7ec <__assert_fail@plt+0xe41c>
   1f780:	mov	r2, r8
   1f784:	add	r1, sp, #97	; 0x61
   1f788:	mov	r0, r6
   1f78c:	bl	110f4 <memcpy@plt>
   1f790:	add	r8, r6, r8
   1f794:	ldr	r2, [sp, #32]
   1f798:	mov	r6, r8
   1f79c:	ldr	r3, [sp, #28]
   1f7a0:	add	r3, r3, r2
   1f7a4:	str	r3, [sp, #28]
   1f7a8:	b	1f0d8 <__assert_fail@plt+0xdd08>
   1f7ac:	mov	r7, #0
   1f7b0:	mov	r2, #32
   1f7b4:	mov	r3, #37	; 0x25
   1f7b8:	strb	r2, [sp, #80]	; 0x50
   1f7bc:	strb	r3, [sp, #81]	; 0x51
   1f7c0:	add	r3, sp, #80	; 0x50
   1f7c4:	str	r3, [sp, #32]
   1f7c8:	strb	r9, [sp, #82]	; 0x52
   1f7cc:	add	ip, sp, #83	; 0x53
   1f7d0:	mov	r2, r3
   1f7d4:	b	1f6d0 <__assert_fail@plt+0xe300>
   1f7d8:	ldr	r1, [sp, #32]
   1f7dc:	mov	r2, r7
   1f7e0:	mov	r0, r6
   1f7e4:	bl	110f4 <memcpy@plt>
   1f7e8:	b	1f5b8 <__assert_fail@plt+0xe1e8>
   1f7ec:	cmp	r8, #0
   1f7f0:	beq	20a3c <__assert_fail@plt+0xf66c>
   1f7f4:	bl	11238 <__ctype_toupper_loc@plt>
   1f7f8:	add	r8, r6, r8
   1f7fc:	add	r3, sp, #96	; 0x60
   1f800:	add	r9, r3, r9
   1f804:	mov	r3, r8
   1f808:	ldrb	r1, [r9, #-1]!
   1f80c:	ldr	r2, [r0]
   1f810:	ldr	r2, [r2, r1, lsl #2]
   1f814:	strb	r2, [r3, #-1]!
   1f818:	cmp	r6, r3
   1f81c:	bne	1f808 <__assert_fail@plt+0xe438>
   1f820:	b	1f794 <__assert_fail@plt+0xe3c4>
   1f824:	cmp	r9, #79	; 0x4f
   1f828:	bne	1f6a4 <__assert_fail@plt+0xe2d4>
   1f82c:	b	1f500 <__assert_fail@plt+0xe130>
   1f830:	cmp	r9, #0
   1f834:	bne	1f500 <__assert_fail@plt+0xe130>
   1f838:	ldr	r3, [sp, #44]	; 0x2c
   1f83c:	cmp	r7, #0
   1f840:	moveq	r7, r3
   1f844:	mov	r2, #32
   1f848:	add	r0, sp, #80	; 0x50
   1f84c:	mov	r3, #37	; 0x25
   1f850:	str	r7, [sp, #44]	; 0x2c
   1f854:	strb	r2, [sp, #80]	; 0x50
   1f858:	str	r0, [sp, #32]
   1f85c:	strb	r3, [sp, #81]	; 0x51
   1f860:	add	ip, sp, #82	; 0x52
   1f864:	mov	r7, #0
   1f868:	mov	r2, r0
   1f86c:	b	1f6d0 <__assert_fail@plt+0xe300>
   1f870:	cmp	r9, #69	; 0x45
   1f874:	beq	1f7ac <__assert_fail@plt+0xe3dc>
   1f878:	ldr	r3, [sp, #40]	; 0x28
   1f87c:	ldr	r0, [pc, #1880]	; 1ffdc <__assert_fail@plt+0xec0c>
   1f880:	mvn	ip, #98	; 0x62
   1f884:	ldr	r2, [r3, #20]
   1f888:	add	r3, r2, #1888	; 0x760
   1f88c:	add	r3, r3, #12
   1f890:	cmp	r3, r0
   1f894:	ldr	r0, [pc, #1912]	; 20014 <__assert_fail@plt+0xec44>
   1f898:	movhi	r3, #0
   1f89c:	movls	r3, #1
   1f8a0:	cmp	r2, r0
   1f8a4:	mla	r3, ip, r3, r2
   1f8a8:	movge	ip, #0
   1f8ac:	movlt	ip, #1
   1f8b0:	str	ip, [sp, #52]	; 0x34
   1f8b4:	ldr	ip, [pc, #1896]	; 20024 <__assert_fail@plt+0xec54>
   1f8b8:	cmp	sl, #0
   1f8bc:	smull	lr, ip, ip, r3
   1f8c0:	asr	r3, r3, #31
   1f8c4:	rsb	r3, r3, ip, asr #5
   1f8c8:	add	r3, r3, #19
   1f8cc:	bne	208e8 <__assert_fail@plt+0xf518>
   1f8d0:	ldr	ip, [sp, #1164]	; 0x48c
   1f8d4:	cmp	r2, r0
   1f8d8:	movlt	r2, #0
   1f8dc:	movge	r2, #1
   1f8e0:	cmp	ip, #43	; 0x2b
   1f8e4:	beq	20930 <__assert_fail@plt+0xf560>
   1f8e8:	mov	sl, ip
   1f8ec:	mov	lr, #0
   1f8f0:	mov	ip, #2
   1f8f4:	mov	r0, #0
   1f8f8:	cmp	r9, #79	; 0x4f
   1f8fc:	movne	r2, #0
   1f900:	andeq	r2, r2, #1
   1f904:	cmp	r2, #0
   1f908:	uxtbne	r1, r1
   1f90c:	bne	1f7ac <__assert_fail@plt+0xe3dc>
   1f910:	ldr	r2, [sp, #52]	; 0x34
   1f914:	cmp	r2, #0
   1f918:	rsbne	r3, r3, #0
   1f91c:	add	r2, sp, #80	; 0x50
   1f920:	add	r7, sp, #94	; 0x5e
   1f924:	str	r2, [sp, #32]
   1f928:	ldr	r9, [pc, #1712]	; 1ffe0 <__assert_fail@plt+0xec10>
   1f92c:	mov	r2, r7
   1f930:	mov	r7, r3
   1f934:	mov	r3, r2
   1f938:	tst	r0, #1
   1f93c:	movne	r2, #58	; 0x3a
   1f940:	mov	r8, r3
   1f944:	strbne	r2, [r3, #-1]
   1f948:	subne	r8, r3, #1
   1f94c:	umull	r3, r2, r9, r7
   1f950:	asrs	r0, r0, #1
   1f954:	lsr	r2, r2, #3
   1f958:	movne	r1, #1
   1f95c:	add	r3, r2, r2, lsl #2
   1f960:	moveq	r1, #0
   1f964:	sub	r3, r7, r3, lsl #1
   1f968:	cmp	r2, #0
   1f96c:	orrne	r1, r1, #1
   1f970:	add	r3, r3, #48	; 0x30
   1f974:	cmp	r1, #0
   1f978:	strb	r3, [r8, #-1]
   1f97c:	mov	r7, r2
   1f980:	sub	r3, r8, #1
   1f984:	bne	1f938 <__assert_fail@plt+0xe568>
   1f988:	mov	r7, r3
   1f98c:	cmp	sl, #0
   1f990:	moveq	r9, #1
   1f994:	moveq	sl, #48	; 0x30
   1f998:	beq	1f9a4 <__assert_fail@plt+0xe5d4>
   1f99c:	subs	r9, sl, #45	; 0x2d
   1f9a0:	movne	r9, #1
   1f9a4:	ldr	r3, [sp, #52]	; 0x34
   1f9a8:	cmp	r5, #0
   1f9ac:	movlt	r5, ip
   1f9b0:	cmp	r3, #0
   1f9b4:	bne	20800 <__assert_fail@plt+0xf430>
   1f9b8:	cmp	lr, #0
   1f9bc:	beq	20858 <__assert_fail@plt+0xf488>
   1f9c0:	mov	r3, #43	; 0x2b
   1f9c4:	ldr	r2, [sp, #32]
   1f9c8:	add	r8, r2, #14
   1f9cc:	sub	r2, r8, r7
   1f9d0:	sub	r8, r5, #1
   1f9d4:	sub	r8, r8, r2
   1f9d8:	str	r2, [sp, #32]
   1f9dc:	cmp	r8, #0
   1f9e0:	movle	r2, #0
   1f9e4:	andgt	r2, r9, #1
   1f9e8:	cmp	r2, #0
   1f9ec:	moveq	r8, #0
   1f9f0:	cmp	sl, #95	; 0x5f
   1f9f4:	beq	20888 <__assert_fail@plt+0xf4b8>
   1f9f8:	ldr	r2, [sp, #36]	; 0x24
   1f9fc:	ldr	r1, [sp, #28]
   1fa00:	sub	r2, r2, r1
   1fa04:	cmp	r2, #1
   1fa08:	bls	1f138 <__assert_fail@plt+0xdd68>
   1fa0c:	cmp	r6, #0
   1fa10:	strbne	r3, [r6], #1
   1fa14:	ldr	r3, [sp, #28]
   1fa18:	sub	r5, r5, #1
   1fa1c:	cmp	r5, #0
   1fa20:	movlt	r9, #0
   1fa24:	andge	r9, r9, #1
   1fa28:	add	r3, r3, #1
   1fa2c:	cmp	r9, #0
   1fa30:	str	r3, [sp, #28]
   1fa34:	ldr	r8, [sp, #32]
   1fa38:	bne	1fa40 <__assert_fail@plt+0xe670>
   1fa3c:	mov	r5, r9
   1fa40:	ldr	r3, [sp, #36]	; 0x24
   1fa44:	ldr	r2, [sp, #28]
   1fa48:	cmp	r5, r8
   1fa4c:	movcs	r9, r5
   1fa50:	movcc	r9, r8
   1fa54:	sub	r3, r3, r2
   1fa58:	cmp	r9, r3
   1fa5c:	bcs	1f138 <__assert_fail@plt+0xdd68>
   1fa60:	cmp	r6, #0
   1fa64:	beq	1f5bc <__assert_fail@plt+0xe1ec>
   1fa68:	cmp	r5, r8
   1fa6c:	bls	1fa94 <__assert_fail@plt+0xe6c4>
   1fa70:	cmp	sl, #43	; 0x2b
   1fa74:	cmpne	sl, #48	; 0x30
   1fa78:	sub	r5, r5, r8
   1fa7c:	mov	r0, r6
   1fa80:	mov	r2, r5
   1fa84:	moveq	r1, #48	; 0x30
   1fa88:	movne	r1, #32
   1fa8c:	bl	112c8 <memset@plt>
   1fa90:	add	r6, r6, r5
   1fa94:	ldr	r3, [sp, #44]	; 0x2c
   1fa98:	cmp	r3, #0
   1fa9c:	beq	20808 <__assert_fail@plt+0xf438>
   1faa0:	cmp	r8, #0
   1faa4:	beq	1f5bc <__assert_fail@plt+0xe1ec>
   1faa8:	add	r6, r6, r8
   1faac:	bl	11238 <__ctype_toupper_loc@plt>
   1fab0:	add	r8, r7, r8
   1fab4:	mov	r3, r6
   1fab8:	ldrb	r1, [r8, #-1]!
   1fabc:	ldr	r2, [r0]
   1fac0:	cmp	r7, r8
   1fac4:	ldr	r2, [r2, r1, lsl #2]
   1fac8:	strb	r2, [r3, #-1]!
   1facc:	bne	1fab8 <__assert_fail@plt+0xe6e8>
   1fad0:	b	1f5bc <__assert_fail@plt+0xe1ec>
   1fad4:	ldr	lr, [sp, #40]	; 0x28
   1fad8:	add	ip, sp, #96	; 0x60
   1fadc:	mvn	r7, #0
   1fae0:	ldm	lr!, {r0, r1, r2, r3}
   1fae4:	stmia	ip!, {r0, r1, r2, r3}
   1fae8:	ldm	lr!, {r0, r1, r2, r3}
   1faec:	stmia	ip!, {r0, r1, r2, r3}
   1faf0:	ldm	lr, {r0, r1, r2}
   1faf4:	str	r7, [sp, #124]	; 0x7c
   1faf8:	stm	ip, {r0, r1, r2}
   1fafc:	add	r1, sp, #96	; 0x60
   1fb00:	ldr	r0, [sp, #1176]	; 0x498
   1fb04:	bl	1d99c <__assert_fail@plt+0xc5cc>
   1fb08:	ldr	r3, [sp, #124]	; 0x7c
   1fb0c:	cmp	r3, #0
   1fb10:	blt	209c0 <__assert_fail@plt+0xf5f0>
   1fb14:	lsr	r3, r0, #31
   1fb18:	str	r3, [sp, #52]	; 0x34
   1fb1c:	cmp	r0, #0
   1fb20:	add	r3, sp, #80	; 0x50
   1fb24:	str	r3, [sp, #32]
   1fb28:	add	r7, sp, #94	; 0x5e
   1fb2c:	blt	1fb64 <__assert_fail@plt+0xe794>
   1fb30:	smull	r3, r2, fp, r0
   1fb34:	asr	r3, r0, #31
   1fb38:	rsb	r3, r3, r2, asr #2
   1fb3c:	mov	r2, r3
   1fb40:	add	r3, r3, r3, lsl #2
   1fb44:	sub	r3, r0, r3, lsl #1
   1fb48:	add	r3, r3, #48	; 0x30
   1fb4c:	subs	r0, r2, #0
   1fb50:	strb	r3, [r7, #-1]!
   1fb54:	bne	1fb30 <__assert_fail@plt+0xe760>
   1fb58:	mov	lr, #0
   1fb5c:	mov	ip, #1
   1fb60:	b	1f98c <__assert_fail@plt+0xe5bc>
   1fb64:	smull	r3, r2, fp, r0
   1fb68:	asr	r3, r0, #31
   1fb6c:	rsb	r3, r3, r2, asr #2
   1fb70:	mov	r2, r3
   1fb74:	add	r3, r3, r3, lsl #2
   1fb78:	sub	r3, r0, r3, lsl #1
   1fb7c:	rsb	r3, r3, #48	; 0x30
   1fb80:	subs	r0, r2, #0
   1fb84:	strb	r3, [r7, #-1]!
   1fb88:	bne	1fb64 <__assert_fail@plt+0xe794>
   1fb8c:	b	1fb58 <__assert_fail@plt+0xe788>
   1fb90:	cmp	r9, #0
   1fb94:	bne	1f500 <__assert_fail@plt+0xe130>
   1fb98:	clz	r3, sl
   1fb9c:	lsr	r3, r3, #5
   1fba0:	ands	r3, r3, r5, lsr #31
   1fba4:	bne	20968 <__assert_fail@plt+0xf598>
   1fba8:	sub	r7, r5, #6
   1fbac:	ldr	r9, [pc, #1124]	; 20018 <__assert_fail@plt+0xec48>
   1fbb0:	bic	r7, r7, r7, asr #31
   1fbb4:	ldr	r3, [sp, #1180]	; 0x49c
   1fbb8:	str	r7, [sp, #8]
   1fbbc:	str	r3, [sp, #20]
   1fbc0:	ldr	r3, [sp, #1176]	; 0x498
   1fbc4:	str	sl, [sp, #4]
   1fbc8:	str	r3, [sp, #16]
   1fbcc:	ldr	r3, [sp, #1172]	; 0x494
   1fbd0:	mov	r2, r9
   1fbd4:	str	r3, [sp, #12]
   1fbd8:	ldr	r3, [sp, #44]	; 0x2c
   1fbdc:	mvn	r1, #0
   1fbe0:	str	r3, [sp]
   1fbe4:	mov	r0, #0
   1fbe8:	ldr	r3, [sp, #40]	; 0x28
   1fbec:	bl	1efd0 <__assert_fail@plt+0xdc00>
   1fbf0:	cmp	sl, #45	; 0x2d
   1fbf4:	moveq	r3, #0
   1fbf8:	bicne	r3, r5, r5, asr #31
   1fbfc:	mov	r8, r0
   1fc00:	ldr	r1, [sp, #36]	; 0x24
   1fc04:	ldr	r0, [sp, #28]
   1fc08:	cmp	r3, r8
   1fc0c:	movcs	r2, r3
   1fc10:	movcc	r2, r8
   1fc14:	sub	r1, r1, r0
   1fc18:	cmp	r2, r1
   1fc1c:	str	r2, [sp, #32]
   1fc20:	str	r1, [sp, #52]	; 0x34
   1fc24:	bcs	1f138 <__assert_fail@plt+0xdd68>
   1fc28:	cmp	r6, #0
   1fc2c:	beq	1f79c <__assert_fail@plt+0xe3cc>
   1fc30:	cmp	r3, r8
   1fc34:	bls	1fc60 <__assert_fail@plt+0xe890>
   1fc38:	cmp	sl, #43	; 0x2b
   1fc3c:	cmpne	sl, #48	; 0x30
   1fc40:	sub	r5, r3, r8
   1fc44:	moveq	r1, #48	; 0x30
   1fc48:	movne	r1, #32
   1fc4c:	mov	r0, r6
   1fc50:	mov	r2, r5
   1fc54:	bl	112c8 <memset@plt>
   1fc58:	ldr	r1, [sp, #52]	; 0x34
   1fc5c:	add	r6, r6, r5
   1fc60:	ldr	r3, [sp, #1180]	; 0x49c
   1fc64:	mov	r2, r9
   1fc68:	str	r3, [sp, #20]
   1fc6c:	ldr	r3, [sp, #1176]	; 0x498
   1fc70:	mov	r0, r6
   1fc74:	str	r3, [sp, #16]
   1fc78:	ldr	r3, [sp, #1172]	; 0x494
   1fc7c:	str	r7, [sp, #8]
   1fc80:	str	r3, [sp, #12]
   1fc84:	ldr	r3, [sp, #44]	; 0x2c
   1fc88:	str	sl, [sp, #4]
   1fc8c:	str	r3, [sp]
   1fc90:	ldr	r3, [sp, #40]	; 0x28
   1fc94:	bl	1efd0 <__assert_fail@plt+0xdc00>
   1fc98:	add	r6, r6, r8
   1fc9c:	ldr	r2, [sp, #32]
   1fca0:	b	1f79c <__assert_fail@plt+0xe3cc>
   1fca4:	cmp	r9, #0
   1fca8:	bne	1f500 <__assert_fail@plt+0xe130>
   1fcac:	mvn	r7, #0
   1fcb0:	ldr	r9, [pc, #812]	; 1ffe4 <__assert_fail@plt+0xec14>
   1fcb4:	b	1fbb4 <__assert_fail@plt+0xe7e4>
   1fcb8:	cmp	r9, #69	; 0x45
   1fcbc:	beq	1f500 <__assert_fail@plt+0xe130>
   1fcc0:	ldr	r3, [sp, #40]	; 0x28
   1fcc4:	ldr	r8, [r3, #28]
   1fcc8:	ldr	r2, [r3, #24]
   1fccc:	ldr	r7, [r3, #20]
   1fcd0:	str	r2, [sp, #32]
   1fcd4:	sub	r2, r8, r2
   1fcd8:	add	r2, r2, #380	; 0x17c
   1fcdc:	ldr	r3, [pc, #844]	; 20030 <__assert_fail@plt+0xec60>
   1fce0:	add	r2, r2, #2
   1fce4:	cmp	r7, #0
   1fce8:	smull	r0, r3, r3, r2
   1fcec:	add	r3, r3, r2
   1fcf0:	asr	r0, r2, #31
   1fcf4:	rsb	r0, r0, r3, asr #2
   1fcf8:	mvnge	r3, #99	; 0x63
   1fcfc:	rsb	r0, r0, r0, lsl #3
   1fd00:	sub	r2, r2, r0
   1fd04:	sub	r2, r8, r2
   1fd08:	movlt	r3, #300	; 0x12c
   1fd0c:	adds	r2, r2, #3
   1fd10:	str	r2, [sp, #52]	; 0x34
   1fd14:	add	r3, r3, r7
   1fd18:	bmi	20b68 <__assert_fail@plt+0xf798>
   1fd1c:	tst	r3, #3
   1fd20:	ldrne	r3, [pc, #772]	; 2002c <__assert_fail@plt+0xec5c>
   1fd24:	bne	1fd6c <__assert_fail@plt+0xe99c>
   1fd28:	ldr	r2, [pc, #756]	; 20024 <__assert_fail@plt+0xec54>
   1fd2c:	mov	r0, #100	; 0x64
   1fd30:	smull	r2, ip, r2, r3
   1fd34:	asr	r2, r3, #31
   1fd38:	rsb	lr, r2, ip, asr #5
   1fd3c:	mul	r0, r0, lr
   1fd40:	cmp	r3, r0
   1fd44:	ldrne	r3, [pc, #732]	; 20028 <__assert_fail@plt+0xec58>
   1fd48:	bne	1fd6c <__assert_fail@plt+0xe99c>
   1fd4c:	rsb	r2, r2, ip, asr #7
   1fd50:	mov	ip, #400	; 0x190
   1fd54:	ldr	r0, [pc, #720]	; 2002c <__assert_fail@plt+0xec5c>
   1fd58:	mul	r2, ip, r2
   1fd5c:	sub	ip, ip, #34	; 0x22
   1fd60:	cmp	r3, r2
   1fd64:	movne	r3, r0
   1fd68:	moveq	r3, ip
   1fd6c:	ldr	r2, [sp, #32]
   1fd70:	sub	r3, r8, r3
   1fd74:	sub	r2, r3, r2
   1fd78:	ldr	r0, [pc, #688]	; 20030 <__assert_fail@plt+0xec60>
   1fd7c:	add	r2, r2, #380	; 0x17c
   1fd80:	add	r2, r2, #2
   1fd84:	smull	r0, ip, r0, r2
   1fd88:	add	ip, ip, r2
   1fd8c:	asr	r0, r2, #31
   1fd90:	rsb	r0, r0, ip, asr #2
   1fd94:	rsb	r0, r0, r0, lsl #3
   1fd98:	sub	r2, r2, r0
   1fd9c:	sub	r3, r3, r2
   1fda0:	adds	r3, r3, #3
   1fda4:	movmi	r0, #0
   1fda8:	movpl	r0, #1
   1fdac:	ldrmi	r3, [sp, #52]	; 0x34
   1fdb0:	ldrmi	lr, [pc, #604]	; 20014 <__assert_fail@plt+0xec44>
   1fdb4:	ldrpl	lr, [pc, #556]	; 1ffe8 <__assert_fail@plt+0xec18>
   1fdb8:	movmi	r8, r0
   1fdbc:	movpl	r8, r0
   1fdc0:	cmp	r1, #71	; 0x47
   1fdc4:	beq	209f0 <__assert_fail@plt+0xf620>
   1fdc8:	cmp	r1, #103	; 0x67
   1fdcc:	bne	209d0 <__assert_fail@plt+0xf600>
   1fdd0:	ldr	r3, [pc, #588]	; 20024 <__assert_fail@plt+0xec54>
   1fdd4:	mov	r0, #100	; 0x64
   1fdd8:	smull	r2, r3, r3, r7
   1fddc:	asr	r2, r7, #31
   1fde0:	rsb	r2, r2, r3, asr #5
   1fde4:	ldr	r3, [pc, #568]	; 20024 <__assert_fail@plt+0xec54>
   1fde8:	mul	r2, r0, r2
   1fdec:	sub	r2, r7, r2
   1fdf0:	add	r2, r2, r8
   1fdf4:	smull	r3, ip, r3, r2
   1fdf8:	asr	r3, r2, #31
   1fdfc:	rsb	r3, r3, ip, asr #5
   1fe00:	mul	r3, r0, r3
   1fe04:	subs	r3, r2, r3
   1fe08:	bmi	208f8 <__assert_fail@plt+0xf528>
   1fe0c:	cmp	sl, #0
   1fe10:	beq	2090c <__assert_fail@plt+0xf53c>
   1fe14:	mov	r2, #1
   1fe18:	mov	r0, #0
   1fe1c:	str	r0, [sp, #52]	; 0x34
   1fe20:	cmp	sl, #43	; 0x2b
   1fe24:	beq	20930 <__assert_fail@plt+0xf560>
   1fe28:	mov	lr, #0
   1fe2c:	mov	ip, #2
   1fe30:	b	1f8f4 <__assert_fail@plt+0xe524>
   1fe34:	cmp	r9, #69	; 0x45
   1fe38:	beq	1f500 <__assert_fail@plt+0xe130>
   1fe3c:	ldr	r3, [sp, #40]	; 0x28
   1fe40:	mov	ip, #2
   1fe44:	ldr	r2, [r3, #12]
   1fe48:	mov	r3, r2
   1fe4c:	mov	r0, #0
   1fe50:	lsr	r2, r2, #31
   1fe54:	cmp	r3, r0
   1fe58:	str	r2, [sp, #52]	; 0x34
   1fe5c:	mov	lr, r0
   1fe60:	movlt	r2, #0
   1fe64:	movge	r2, #1
   1fe68:	b	1f8f8 <__assert_fail@plt+0xe528>
   1fe6c:	mov	r8, #0
   1fe70:	ldr	r2, [sp, #40]	; 0x28
   1fe74:	ldr	r3, [r2, #32]
   1fe78:	cmp	r3, #0
   1fe7c:	blt	1f0d8 <__assert_fail@plt+0xdd08>
   1fe80:	ldr	lr, [r2, #36]	; 0x24
   1fe84:	cmp	lr, #0
   1fe88:	blt	20a80 <__assert_fail@plt+0xf6b0>
   1fe8c:	bne	20958 <__assert_fail@plt+0xf588>
   1fe90:	ldr	r3, [sp, #60]	; 0x3c
   1fe94:	ldrb	r3, [r3]
   1fe98:	cmp	r3, #45	; 0x2d
   1fe9c:	moveq	r2, lr
   1fea0:	movne	r2, #1
   1fea4:	movne	r3, lr
   1fea8:	moveq	r3, #1
   1feac:	str	r3, [sp, #52]	; 0x34
   1feb0:	ldr	r3, [pc, #308]	; 1ffec <__assert_fail@plt+0xec1c>
   1feb4:	ldr	r7, [pc, #304]	; 1ffec <__assert_fail@plt+0xec1c>
   1feb8:	smull	r3, ip, r3, lr
   1febc:	ldr	r3, [pc, #300]	; 1fff0 <__assert_fail@plt+0xec20>
   1fec0:	add	ip, ip, lr
   1fec4:	smull	r0, r3, r3, lr
   1fec8:	asr	r0, lr, #31
   1fecc:	rsb	ip, r0, ip, asr #5
   1fed0:	str	r0, [sp, #72]	; 0x48
   1fed4:	smull	r7, r0, r7, ip
   1fed8:	add	r0, r0, ip
   1fedc:	asr	r7, ip, #31
   1fee0:	rsb	r0, r7, r0, asr #5
   1fee4:	add	r3, r3, lr
   1fee8:	rsb	r0, r0, r0, lsl #4
   1feec:	str	r0, [sp, #76]	; 0x4c
   1fef0:	ldr	r0, [sp, #72]	; 0x48
   1fef4:	rsb	r7, ip, ip, lsl #4
   1fef8:	rsb	r3, r0, r3, asr #11
   1fefc:	ldr	r0, [sp, #76]	; 0x4c
   1ff00:	sub	r7, lr, r7, lsl #2
   1ff04:	sub	r0, ip, r0, lsl #2
   1ff08:	cmp	r8, #3
   1ff0c:	ldrls	pc, [pc, r8, lsl #2]
   1ff10:	b	1f500 <__assert_fail@plt+0xe130>
   1ff14:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1ff18:			; <UNDEFINED> instruction: 0x00020ab8
   1ff1c:	andeq	r0, r2, ip, lsr #22
   1ff20:	andeq	r0, r2, r0, lsr #21
   1ff24:	ldr	r3, [sp, #44]	; 0x2c
   1ff28:	cmp	r7, #0
   1ff2c:	movne	r3, r7
   1ff30:	cmp	r9, #69	; 0x45
   1ff34:	str	r3, [sp, #44]	; 0x2c
   1ff38:	beq	1f500 <__assert_fail@plt+0xe130>
   1ff3c:	uxtb	r1, r1
   1ff40:	mov	r7, #0
   1ff44:	b	1f6a8 <__assert_fail@plt+0xe2d8>
   1ff48:	cmp	r9, #69	; 0x45
   1ff4c:	beq	1f7ac <__assert_fail@plt+0xe3dc>
   1ff50:	ldr	r3, [sp, #40]	; 0x28
   1ff54:	mov	r0, #100	; 0x64
   1ff58:	ldr	r2, [r3, #20]
   1ff5c:	ldr	r3, [pc, #192]	; 20024 <__assert_fail@plt+0xec54>
   1ff60:	smull	r3, ip, r3, r2
   1ff64:	asr	r3, r2, #31
   1ff68:	rsb	r3, r3, ip, asr #5
   1ff6c:	mul	r3, r0, r3
   1ff70:	subs	r3, r2, r3
   1ff74:	bpl	1fe0c <__assert_fail@plt+0xea3c>
   1ff78:	sub	r0, r0, #2000	; 0x7d0
   1ff7c:	cmp	r2, r0
   1ff80:	rsblt	r3, r3, #0
   1ff84:	addge	r3, r3, #100	; 0x64
   1ff88:	b	1fe0c <__assert_fail@plt+0xea3c>
   1ff8c:	cmp	r9, #69	; 0x45
   1ff90:	beq	1f500 <__assert_fail@plt+0xe130>
   1ff94:	ldr	r2, [sp, #40]	; 0x28
   1ff98:	mov	ip, #2
   1ff9c:	ldr	r3, [r2, #28]
   1ffa0:	ldr	r2, [r2, #24]
   1ffa4:	sub	r3, r3, r2
   1ffa8:	ldr	r2, [pc, #128]	; 20030 <__assert_fail@plt+0xec60>
   1ffac:	add	r3, r3, #7
   1ffb0:	smull	r0, r2, r2, r3
   1ffb4:	add	r2, r2, r3
   1ffb8:	asr	r3, r3, #31
   1ffbc:	rsb	r2, r3, r2, asr ip
   1ffc0:	b	1fe48 <__assert_fail@plt+0xea78>
   1ffc4:	ldr	r9, [pc, #40]	; 1fff4 <__assert_fail@plt+0xec24>
   1ffc8:	mvn	r7, #0
   1ffcc:	b	1fbb4 <__assert_fail@plt+0xe7e4>
   1ffd0:	andeq	r3, r2, r0, ror #12
   1ffd4:	strbtvs	r6, [r6], -r7, ror #12
   1ffd8:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1ffdc:	andeq	r0, r0, fp, ror #14
   1ffe0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ffe4:	ldrdeq	r3, [r2], -r8
   1ffe8:			; <UNDEFINED> instruction: 0xfffff893
   1ffec:	stmhi	r8, {r0, r3, r7, fp, pc}
   1fff0:			; <UNDEFINED> instruction: 0x91a2b3c5
   1fff4:	andeq	r3, r2, r4, ror #27
   1fff8:	ldrdeq	r3, [r2], -r0
   1fffc:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   20000:	ldmvs	fp, {r0, r2, r3, r5, r7, r8, r9, fp, pc}^
   20004:	ldrbtne	fp, [r8], #1417	; 0x589
   20008:	tstmi	fp, #2096	; 0x830
   2000c:	blvs	18129c0 <optarg@@GLIBC_2.4+0x17de818>
   20010:	strbpl	r3, [r6, #2953]!	; 0xb89
   20014:			; <UNDEFINED> instruction: 0xfffff894
   20018:	strdeq	r3, [r2], -r0
   2001c:	andeq	r2, r0, pc, lsl #14
   20020:	andeq	r2, r0, r0, lsl r7
   20024:	mvnpl	r8, pc, lsl r5
   20028:	andeq	r0, r0, lr, ror #2
   2002c:	andeq	r0, r0, sp, ror #2
   20030:	subls	r2, r9, #-1828716544	; 0x93000000
   20034:			; <UNDEFINED> instruction: 0xfffff895
   20038:	ldr	r2, [sp, #32]
   2003c:	sub	r3, r4, #1
   20040:	cmp	r3, r2
   20044:	movne	r4, r3
   20048:	bne	1f500 <__assert_fail@plt+0xe130>
   2004c:	mvn	r3, r5
   20050:	cmp	sl, #45	; 0x2d
   20054:	lsr	r3, r3, #31
   20058:	moveq	r3, #0
   2005c:	cmp	r3, #0
   20060:	moveq	r5, #1
   20064:	beq	20074 <__assert_fail@plt+0xeca4>
   20068:	cmp	r5, #1
   2006c:	mov	r3, r5
   20070:	movcc	r5, #1
   20074:	ldr	r2, [sp, #36]	; 0x24
   20078:	ldr	r0, [sp, #28]
   2007c:	sub	r2, r2, r0
   20080:	cmp	r2, r5
   20084:	bls	1f138 <__assert_fail@plt+0xdd68>
   20088:	cmp	r6, #0
   2008c:	beq	200c4 <__assert_fail@plt+0xecf4>
   20090:	cmp	r3, #1
   20094:	bls	200c0 <__assert_fail@plt+0xecf0>
   20098:	sub	r7, r3, #1
   2009c:	cmp	sl, #43	; 0x2b
   200a0:	cmpne	sl, #48	; 0x30
   200a4:	mov	r2, r7
   200a8:	bne	20b50 <__assert_fail@plt+0xf780>
   200ac:	mov	r1, #48	; 0x30
   200b0:	mov	r0, r6
   200b4:	bl	112c8 <memset@plt>
   200b8:	ldrb	r1, [r4]
   200bc:	add	r6, r6, r7
   200c0:	strb	r1, [r6], #1
   200c4:	ldr	r3, [sp, #28]
   200c8:	add	r3, r3, r5
   200cc:	str	r3, [sp, #28]
   200d0:	b	1f0d8 <__assert_fail@plt+0xdd08>
   200d4:	cmp	r9, #69	; 0x45
   200d8:	beq	1f500 <__assert_fail@plt+0xe130>
   200dc:	ldr	r3, [sp, #40]	; 0x28
   200e0:	mov	ip, #1
   200e4:	ldr	r2, [r3, #24]
   200e8:	b	1fe48 <__assert_fail@plt+0xea78>
   200ec:	ldr	r3, [sp, #40]	; 0x28
   200f0:	ldr	r2, [pc, #-200]	; 20030 <__assert_fail@plt+0xec60>
   200f4:	mov	ip, #1
   200f8:	ldr	r3, [r3, #24]
   200fc:	add	r3, r3, #6
   20100:	smull	r0, r2, r2, r3
   20104:	add	r0, r2, r3
   20108:	asr	r2, r3, #31
   2010c:	rsb	r2, r2, r0, asr #2
   20110:	rsb	r2, r2, r2, lsl #3
   20114:	sub	r3, r3, r2
   20118:	add	r2, r3, ip
   2011c:	b	1fe48 <__assert_fail@plt+0xea78>
   20120:	subs	r3, sl, #45	; 0x2d
   20124:	movne	r3, #1
   20128:	cmp	r5, #0
   2012c:	movlt	r3, #0
   20130:	cmp	r3, #0
   20134:	beq	20c04 <__assert_fail@plt+0xf834>
   20138:	cmp	r5, #1
   2013c:	movcs	r7, r5
   20140:	movcc	r7, #1
   20144:	ldr	r3, [sp, #36]	; 0x24
   20148:	ldr	r2, [sp, #28]
   2014c:	sub	r3, r3, r2
   20150:	cmp	r3, r7
   20154:	bls	1f138 <__assert_fail@plt+0xdd68>
   20158:	cmp	r6, #0
   2015c:	beq	20194 <__assert_fail@plt+0xedc4>
   20160:	cmp	r5, #1
   20164:	bls	2018c <__assert_fail@plt+0xedbc>
   20168:	cmp	sl, #43	; 0x2b
   2016c:	cmpne	sl, #48	; 0x30
   20170:	sub	r5, r5, #1
   20174:	mov	r0, r6
   20178:	mov	r2, r5
   2017c:	moveq	r1, #48	; 0x30
   20180:	movne	r1, #32
   20184:	bl	112c8 <memset@plt>
   20188:	add	r6, r6, r5
   2018c:	mov	r3, #9
   20190:	strb	r3, [r6], #1
   20194:	ldr	r3, [sp, #28]
   20198:	add	r3, r3, r7
   2019c:	str	r3, [sp, #28]
   201a0:	b	1f0d8 <__assert_fail@plt+0xdd08>
   201a4:	cmp	r9, #69	; 0x45
   201a8:	beq	1f500 <__assert_fail@plt+0xe130>
   201ac:	ldr	r3, [sp, #40]	; 0x28
   201b0:	mov	ip, #2
   201b4:	ldr	r2, [r3, #4]
   201b8:	b	1fe48 <__assert_fail@plt+0xea78>
   201bc:	cmp	r9, #69	; 0x45
   201c0:	beq	1f500 <__assert_fail@plt+0xe130>
   201c4:	ldr	r2, [sp, #56]	; 0x38
   201c8:	mov	ip, #2
   201cc:	b	1fe48 <__assert_fail@plt+0xea78>
   201d0:	cmp	r9, #69	; 0x45
   201d4:	beq	1f500 <__assert_fail@plt+0xe130>
   201d8:	ldr	r3, [sp, #40]	; 0x28
   201dc:	mov	ip, #2
   201e0:	ldr	r2, [r3, #8]
   201e4:	b	1fe48 <__assert_fail@plt+0xea78>
   201e8:	ldrb	r3, [r4, #1]
   201ec:	add	r0, r4, #1
   201f0:	cmp	r3, #58	; 0x3a
   201f4:	movne	r8, #1
   201f8:	beq	20c10 <__assert_fail@plt+0xf840>
   201fc:	cmp	r3, #122	; 0x7a
   20200:	moveq	r4, r0
   20204:	bne	1f500 <__assert_fail@plt+0xe130>
   20208:	b	1fe70 <__assert_fail@plt+0xeaa0>
   2020c:	cmp	r9, #69	; 0x45
   20210:	beq	1f500 <__assert_fail@plt+0xe130>
   20214:	ldr	r3, [sp, #40]	; 0x28
   20218:	ldr	r0, [pc, #-496]	; 20030 <__assert_fail@plt+0xec60>
   2021c:	ldr	r2, [r3, #24]
   20220:	ldr	r3, [r3, #28]
   20224:	add	r2, r2, #6
   20228:	smull	ip, r0, r0, r2
   2022c:	add	ip, r0, r2
   20230:	asr	r0, r2, #31
   20234:	rsb	r0, r0, ip, asr #2
   20238:	mov	ip, #2
   2023c:	rsb	r0, r0, r0, lsl #3
   20240:	sub	r2, r2, r0
   20244:	b	1ffa4 <__assert_fail@plt+0xebd4>
   20248:	cmp	r9, #69	; 0x45
   2024c:	beq	1f500 <__assert_fail@plt+0xe130>
   20250:	ldr	r3, [sp, #40]	; 0x28
   20254:	mov	ip, #2
   20258:	ldr	r2, [r3]
   2025c:	b	1fe48 <__assert_fail@plt+0xea78>
   20260:	mvn	r7, #0
   20264:	ldr	r9, [pc, #-628]	; 1fff8 <__assert_fail@plt+0xec28>
   20268:	b	1fbb4 <__assert_fail@plt+0xe7e4>
   2026c:	mov	r3, #1
   20270:	cmp	r7, #0
   20274:	moveq	r7, r3
   20278:	moveq	r1, #112	; 0x70
   2027c:	movne	r3, #0
   20280:	movne	r1, #112	; 0x70
   20284:	strne	r3, [sp, #44]	; 0x2c
   20288:	b	1f6a8 <__assert_fail@plt+0xe2d8>
   2028c:	cmp	r9, #69	; 0x45
   20290:	beq	1f500 <__assert_fail@plt+0xe130>
   20294:	cmp	r5, #0
   20298:	movle	r5, #9
   2029c:	ldr	r3, [sp, #1180]	; 0x49c
   202a0:	mov	r8, #9
   202a4:	b	202b8 <__assert_fail@plt+0xeee8>
   202a8:	asr	r2, r3, #31
   202ac:	smull	r1, r3, fp, r3
   202b0:	sub	r8, r8, #1
   202b4:	rsb	r3, r2, r3, asr #2
   202b8:	cmp	r8, r5
   202bc:	bgt	202a8 <__assert_fail@plt+0xeed8>
   202c0:	smull	r2, r1, fp, r3
   202c4:	asr	r2, r3, #31
   202c8:	rsb	r1, r2, r1, asr #2
   202cc:	cmp	r8, #1
   202d0:	add	r0, r1, r1, lsl #2
   202d4:	mov	lr, r1
   202d8:	ble	20c4c <__assert_fail@plt+0xf87c>
   202dc:	subs	r1, r3, r0, lsl #1
   202e0:	beq	202ac <__assert_fail@plt+0xeedc>
   202e4:	sub	r0, r8, #1
   202e8:	add	ip, sp, #1120	; 0x460
   202ec:	add	ip, ip, r0
   202f0:	add	r1, r1, #48	; 0x30
   202f4:	cmp	r0, #0
   202f8:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   202fc:	beq	20c44 <__assert_fail@plt+0xf874>
   20300:	smull	r1, ip, fp, lr
   20304:	ldr	r1, [pc, #-744]	; 20024 <__assert_fail@plt+0xec54>
   20308:	smull	r1, r0, r1, r3
   2030c:	asr	r1, lr, #31
   20310:	rsb	r1, r1, ip, asr #2
   20314:	sub	ip, r8, #2
   20318:	add	r1, r1, r1, lsl #2
   2031c:	cmp	ip, #0
   20320:	sub	r1, lr, r1, lsl #1
   20324:	add	lr, sp, #1120	; 0x460
   20328:	add	lr, lr, ip
   2032c:	add	r1, r1, #48	; 0x30
   20330:	rsb	r0, r2, r0, asr #5
   20334:	strb	r1, [lr, #-1040]	; 0xfffffbf0
   20338:	beq	204c4 <__assert_fail@plt+0xf0f4>
   2033c:	smull	r1, lr, fp, r0
   20340:	ldr	r1, [pc, #-844]	; 1fffc <__assert_fail@plt+0xec2c>
   20344:	smull	r1, ip, r1, r3
   20348:	asr	r1, r0, #31
   2034c:	rsb	r1, r1, lr, asr #2
   20350:	rsb	lr, r2, ip, asr #6
   20354:	add	r1, r1, r1, lsl #2
   20358:	sub	ip, r8, #3
   2035c:	sub	r0, r0, r1, lsl #1
   20360:	add	r1, sp, #1120	; 0x460
   20364:	add	r1, r1, ip
   20368:	add	r0, r0, #48	; 0x30
   2036c:	cmp	ip, #0
   20370:	strb	r0, [r1, #-1040]	; 0xfffffbf0
   20374:	ble	204c4 <__assert_fail@plt+0xf0f4>
   20378:	smull	r1, ip, fp, lr
   2037c:	ldr	r1, [pc, #-900]	; 20000 <__assert_fail@plt+0xec30>
   20380:	asr	r0, lr, #31
   20384:	rsb	r0, r0, ip, asr #2
   20388:	smull	ip, r1, r1, r3
   2038c:	add	r0, r0, r0, lsl #2
   20390:	sub	ip, r8, #4
   20394:	sub	r0, lr, r0, lsl #1
   20398:	add	lr, sp, #1120	; 0x460
   2039c:	add	lr, lr, ip
   203a0:	add	r0, r0, #48	; 0x30
   203a4:	cmp	ip, #0
   203a8:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   203ac:	rsb	ip, r2, r1, asr #12
   203b0:	ble	204c4 <__assert_fail@plt+0xf0f4>
   203b4:	smull	r1, lr, fp, ip
   203b8:	ldr	r0, [pc, #-956]	; 20004 <__assert_fail@plt+0xec34>
   203bc:	asr	r1, ip, #31
   203c0:	rsb	r1, r1, lr, asr #2
   203c4:	smull	lr, r0, r0, r3
   203c8:	add	r1, r1, r1, lsl #2
   203cc:	sub	lr, r8, #5
   203d0:	sub	r1, ip, r1, lsl #1
   203d4:	add	ip, sp, #1120	; 0x460
   203d8:	add	ip, ip, lr
   203dc:	add	r1, r1, #48	; 0x30
   203e0:	cmp	lr, #0
   203e4:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   203e8:	rsb	lr, r2, r0, asr #13
   203ec:	ble	204c4 <__assert_fail@plt+0xf0f4>
   203f0:	smull	r1, ip, fp, lr
   203f4:	ldr	r1, [pc, #-1012]	; 20008 <__assert_fail@plt+0xec38>
   203f8:	asr	r0, lr, #31
   203fc:	rsb	r0, r0, ip, asr #2
   20400:	smull	ip, r1, r1, r3
   20404:	add	r0, r0, r0, lsl #2
   20408:	sub	ip, r8, #6
   2040c:	sub	r0, lr, r0, lsl #1
   20410:	add	lr, sp, #1120	; 0x460
   20414:	add	lr, lr, ip
   20418:	add	r0, r0, #48	; 0x30
   2041c:	cmp	ip, #0
   20420:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   20424:	rsb	ip, r2, r1, asr #18
   20428:	ble	204c4 <__assert_fail@plt+0xf0f4>
   2042c:	smull	r1, lr, fp, ip
   20430:	ldr	r0, [pc, #-1068]	; 2000c <__assert_fail@plt+0xec3c>
   20434:	asr	r1, ip, #31
   20438:	rsb	r1, r1, lr, asr #2
   2043c:	smull	lr, r0, r0, r3
   20440:	add	r1, r1, r1, lsl #2
   20444:	sub	lr, r8, #7
   20448:	sub	r1, ip, r1, lsl #1
   2044c:	add	ip, sp, #1120	; 0x460
   20450:	add	ip, ip, lr
   20454:	add	r1, r1, #48	; 0x30
   20458:	cmp	lr, #0
   2045c:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   20460:	rsb	ip, r2, r0, asr #22
   20464:	ble	204c4 <__assert_fail@plt+0xf0f4>
   20468:	smull	r1, lr, fp, ip
   2046c:	ldr	r1, [pc, #-1124]	; 20010 <__assert_fail@plt+0xec40>
   20470:	asr	r0, ip, #31
   20474:	rsb	r0, r0, lr, asr #2
   20478:	smull	r1, r3, r1, r3
   2047c:	add	r0, r0, r0, lsl #2
   20480:	sub	r1, r8, #8
   20484:	sub	r0, ip, r0, lsl #1
   20488:	add	ip, sp, #1120	; 0x460
   2048c:	add	lr, ip, r1
   20490:	add	r0, r0, #48	; 0x30
   20494:	cmp	r1, #1
   20498:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   2049c:	rsb	r2, r2, r3, asr #25
   204a0:	bne	204c4 <__assert_fail@plt+0xf0f4>
   204a4:	smull	r3, r1, fp, r2
   204a8:	asr	r3, r2, #31
   204ac:	rsb	r3, r3, r1, asr #2
   204b0:	mov	r8, #9
   204b4:	add	r3, r3, r3, lsl #2
   204b8:	sub	r2, r2, r3, lsl #1
   204bc:	add	r3, r2, #48	; 0x30
   204c0:	strb	r3, [sp, #80]	; 0x50
   204c4:	cmp	sl, #0
   204c8:	ldr	r3, [sp, #36]	; 0x24
   204cc:	ldr	r2, [sp, #28]
   204d0:	moveq	sl, #48	; 0x30
   204d4:	cmp	r8, #0
   204d8:	movcs	r7, r8
   204dc:	movcc	r7, #0
   204e0:	sub	r3, r3, r2
   204e4:	cmp	r7, r3
   204e8:	bcs	1f138 <__assert_fail@plt+0xdd68>
   204ec:	cmp	r6, #0
   204f0:	beq	20514 <__assert_fail@plt+0xf144>
   204f4:	ldr	r3, [sp, #44]	; 0x2c
   204f8:	mov	r2, r8
   204fc:	cmp	r3, #0
   20500:	add	r1, sp, #80	; 0x50
   20504:	mov	r0, r6
   20508:	beq	20c3c <__assert_fail@plt+0xf86c>
   2050c:	bl	1ef90 <__assert_fail@plt+0xdbc0>
   20510:	add	r6, r6, r8
   20514:	cmp	sl, #45	; 0x2d
   20518:	ldr	r3, [sp, #28]
   2051c:	subne	r5, r5, r8
   20520:	add	r7, r7, r3
   20524:	ldr	r3, [sp, #36]	; 0x24
   20528:	bicne	r5, r5, r5, asr #31
   2052c:	moveq	r5, #0
   20530:	sub	r3, r3, r7
   20534:	cmp	r5, r3
   20538:	bcs	1f138 <__assert_fail@plt+0xdd68>
   2053c:	cmp	r6, #0
   20540:	beq	2056c <__assert_fail@plt+0xf19c>
   20544:	cmp	r5, #0
   20548:	beq	2056c <__assert_fail@plt+0xf19c>
   2054c:	cmp	sl, #43	; 0x2b
   20550:	cmpne	sl, #48	; 0x30
   20554:	mov	r0, r6
   20558:	mov	r2, r5
   2055c:	moveq	r1, #48	; 0x30
   20560:	movne	r1, #32
   20564:	bl	112c8 <memset@plt>
   20568:	add	r6, r6, r5
   2056c:	add	r3, r5, r7
   20570:	str	r3, [sp, #28]
   20574:	b	1f0d8 <__assert_fail@plt+0xdd08>
   20578:	cmp	r9, #69	; 0x45
   2057c:	beq	1f500 <__assert_fail@plt+0xe130>
   20580:	ldr	r3, [sp, #40]	; 0x28
   20584:	mov	r0, #0
   20588:	mov	lr, r0
   2058c:	ldr	r3, [r3, #28]
   20590:	mov	ip, #3
   20594:	cmn	r3, #1
   20598:	movlt	r2, #1
   2059c:	movge	r2, r0
   205a0:	str	r2, [sp, #52]	; 0x34
   205a4:	add	r3, r3, #1
   205a8:	movge	r2, #1
   205ac:	movlt	r2, r0
   205b0:	b	1f8f8 <__assert_fail@plt+0xe528>
   205b4:	cmp	r9, #69	; 0x45
   205b8:	beq	1f500 <__assert_fail@plt+0xe130>
   205bc:	ldr	r3, [sp, #40]	; 0x28
   205c0:	ldr	r2, [r3, #12]
   205c4:	cmp	sl, #0
   205c8:	mov	ip, #2
   205cc:	moveq	sl, #95	; 0x5f
   205d0:	b	1fe48 <__assert_fail@plt+0xea78>
   205d4:	mvn	r3, r5
   205d8:	cmp	sl, #45	; 0x2d
   205dc:	lsr	r3, r3, #31
   205e0:	moveq	r3, #0
   205e4:	cmp	r3, #0
   205e8:	beq	20c30 <__assert_fail@plt+0xf860>
   205ec:	cmp	r5, #1
   205f0:	movcs	r7, r5
   205f4:	movcc	r7, #1
   205f8:	ldr	r3, [sp, #36]	; 0x24
   205fc:	ldr	r2, [sp, #28]
   20600:	sub	r3, r3, r2
   20604:	cmp	r3, r7
   20608:	bls	1f138 <__assert_fail@plt+0xdd68>
   2060c:	cmp	r6, #0
   20610:	beq	20194 <__assert_fail@plt+0xedc4>
   20614:	cmp	r5, #1
   20618:	bls	20640 <__assert_fail@plt+0xf270>
   2061c:	cmp	sl, #43	; 0x2b
   20620:	cmpne	sl, #48	; 0x30
   20624:	sub	r5, r5, #1
   20628:	mov	r0, r6
   2062c:	mov	r2, r5
   20630:	moveq	r1, #48	; 0x30
   20634:	movne	r1, #32
   20638:	bl	112c8 <memset@plt>
   2063c:	add	r6, r6, r5
   20640:	mov	r3, #10
   20644:	strb	r3, [r6], #1
   20648:	b	20194 <__assert_fail@plt+0xedc4>
   2064c:	cmp	r9, #69	; 0x45
   20650:	beq	1f500 <__assert_fail@plt+0xe130>
   20654:	ldr	r3, [sp, #40]	; 0x28
   20658:	mov	r0, #0
   2065c:	mov	lr, r0
   20660:	ldr	r3, [r3, #16]
   20664:	mov	ip, #2
   20668:	cmn	r3, #1
   2066c:	movlt	r2, #1
   20670:	movge	r2, r0
   20674:	str	r2, [sp, #52]	; 0x34
   20678:	add	r3, r3, #1
   2067c:	movge	r2, #1
   20680:	movlt	r2, r0
   20684:	b	1f8f8 <__assert_fail@plt+0xe528>
   20688:	cmp	r9, #69	; 0x45
   2068c:	beq	1f500 <__assert_fail@plt+0xe130>
   20690:	ldr	r2, [sp, #56]	; 0x38
   20694:	b	205c4 <__assert_fail@plt+0xf1f4>
   20698:	cmp	r9, #69	; 0x45
   2069c:	beq	1f500 <__assert_fail@plt+0xe130>
   206a0:	ldr	r3, [sp, #40]	; 0x28
   206a4:	ldr	r2, [r3, #8]
   206a8:	b	205c4 <__assert_fail@plt+0xf1f4>
   206ac:	ldr	r3, [sp, #40]	; 0x28
   206b0:	cmp	r9, #79	; 0x4f
   206b4:	ldr	r3, [r3, #16]
   206b8:	beq	1f7ac <__assert_fail@plt+0xe3dc>
   206bc:	add	r2, r3, r3, lsl #2
   206c0:	mov	lr, #0
   206c4:	add	r3, r3, r2, lsl #1
   206c8:	str	lr, [sp, #52]	; 0x34
   206cc:	asr	r3, r3, #5
   206d0:	add	r3, r3, #1
   206d4:	mov	r0, lr
   206d8:	mov	ip, #1
   206dc:	b	1f91c <__assert_fail@plt+0xe54c>
   206e0:	mov	r3, #0
   206e4:	b	20270 <__assert_fail@plt+0xeea0>
   206e8:	ldr	r0, [sp, #60]	; 0x3c
   206ec:	bl	11274 <strlen@plt>
   206f0:	mvn	r3, r5
   206f4:	cmp	sl, #45	; 0x2d
   206f8:	lsr	r3, r3, #31
   206fc:	moveq	r3, #0
   20700:	cmp	r3, #0
   20704:	moveq	r5, #0
   20708:	ldr	r3, [sp, #44]	; 0x2c
   2070c:	cmp	r7, #0
   20710:	movne	r3, #0
   20714:	str	r3, [sp, #44]	; 0x2c
   20718:	ldr	r2, [sp, #28]
   2071c:	ldr	r3, [sp, #36]	; 0x24
   20720:	sub	r3, r3, r2
   20724:	cmp	r0, r5
   20728:	movcs	r9, r0
   2072c:	movcc	r9, r5
   20730:	cmp	r9, r3
   20734:	mov	r8, r0
   20738:	bcs	1f138 <__assert_fail@plt+0xdd68>
   2073c:	cmp	r6, #0
   20740:	beq	1f5bc <__assert_fail@plt+0xe1ec>
   20744:	cmp	r0, r5
   20748:	bcs	20770 <__assert_fail@plt+0xf3a0>
   2074c:	cmp	sl, #43	; 0x2b
   20750:	cmpne	sl, #48	; 0x30
   20754:	sub	r5, r5, r0
   20758:	mov	r2, r5
   2075c:	mov	r0, r6
   20760:	moveq	r1, #48	; 0x30
   20764:	movne	r1, #32
   20768:	bl	112c8 <memset@plt>
   2076c:	add	r6, r6, r5
   20770:	cmp	r7, #0
   20774:	bne	20af0 <__assert_fail@plt+0xf720>
   20778:	ldr	r3, [sp, #44]	; 0x2c
   2077c:	mov	r2, r8
   20780:	cmp	r3, #0
   20784:	ldr	r1, [sp, #60]	; 0x3c
   20788:	mov	r0, r6
   2078c:	beq	20ae4 <__assert_fail@plt+0xf714>
   20790:	bl	1ef90 <__assert_fail@plt+0xdbc0>
   20794:	add	r6, r6, r8
   20798:	b	1f5bc <__assert_fail@plt+0xe1ec>
   2079c:	cmp	r9, #69	; 0x45
   207a0:	beq	1f7ac <__assert_fail@plt+0xe3dc>
   207a4:	cmp	r9, #79	; 0x4f
   207a8:	beq	1f500 <__assert_fail@plt+0xe130>
   207ac:	ldr	r3, [sp, #40]	; 0x28
   207b0:	ldr	r0, [pc, #-1956]	; 20014 <__assert_fail@plt+0xec44>
   207b4:	ldr	r2, [r3, #20]
   207b8:	cmp	r2, r0
   207bc:	movge	ip, #0
   207c0:	movlt	ip, #1
   207c4:	add	r3, r2, #1888	; 0x760
   207c8:	cmp	sl, #0
   207cc:	str	ip, [sp, #52]	; 0x34
   207d0:	add	r3, r3, #12
   207d4:	bne	208c8 <__assert_fail@plt+0xf4f8>
   207d8:	ldr	ip, [sp, #1164]	; 0x48c
   207dc:	cmp	r2, r0
   207e0:	movlt	r2, #0
   207e4:	movge	r2, #1
   207e8:	cmp	ip, #43	; 0x2b
   207ec:	beq	20a74 <__assert_fail@plt+0xf6a4>
   207f0:	mov	sl, ip
   207f4:	mov	lr, #0
   207f8:	mov	ip, #4
   207fc:	b	1f8f4 <__assert_fail@plt+0xe524>
   20800:	mov	r3, #45	; 0x2d
   20804:	b	1f9c4 <__assert_fail@plt+0xe5f4>
   20808:	mov	r0, r6
   2080c:	mov	r1, r7
   20810:	mov	r2, r8
   20814:	bl	110f4 <memcpy@plt>
   20818:	add	r6, r6, r8
   2081c:	b	1f5bc <__assert_fail@plt+0xe1ec>
   20820:	cmp	r8, #0
   20824:	beq	20a3c <__assert_fail@plt+0xf66c>
   20828:	bl	1122c <__ctype_tolower_loc@plt>
   2082c:	add	r8, r6, r8
   20830:	add	r3, sp, #96	; 0x60
   20834:	add	r9, r3, r9
   20838:	mov	r3, r8
   2083c:	ldrb	r1, [r9, #-1]!
   20840:	ldr	r2, [r0]
   20844:	ldr	r2, [r2, r1, lsl #2]
   20848:	strb	r2, [r3, #-1]!
   2084c:	cmp	r6, r3
   20850:	bne	2083c <__assert_fail@plt+0xf46c>
   20854:	b	1f794 <__assert_fail@plt+0xe3c4>
   20858:	ldr	r3, [sp, #32]
   2085c:	add	r8, r3, #14
   20860:	sub	r8, r8, r7
   20864:	sub	r3, r5, r8
   20868:	cmp	r3, #0
   2086c:	movle	r3, #0
   20870:	andgt	r3, r9, #1
   20874:	cmp	r3, #0
   20878:	bne	1fa40 <__assert_fail@plt+0xe670>
   2087c:	cmp	r9, #0
   20880:	bne	1fa40 <__assert_fail@plt+0xe670>
   20884:	b	1fa3c <__assert_fail@plt+0xe66c>
   20888:	cmp	r6, #0
   2088c:	beq	1f118 <__assert_fail@plt+0xdd48>
   20890:	mov	r0, r6
   20894:	mov	r2, r8
   20898:	mov	r1, #32
   2089c:	str	r3, [sp, #52]	; 0x34
   208a0:	bl	112c8 <memset@plt>
   208a4:	ldr	r3, [sp, #28]
   208a8:	sub	r5, r5, r8
   208ac:	add	r3, r3, r8
   208b0:	str	r3, [sp, #28]
   208b4:	add	r6, r6, r8
   208b8:	ldr	r3, [sp, #52]	; 0x34
   208bc:	b	1f9f8 <__assert_fail@plt+0xe628>
   208c0:	str	r3, [sp, #28]
   208c4:	b	1f0f0 <__assert_fail@plt+0xdd20>
   208c8:	ldr	r2, [sp, #52]	; 0x34
   208cc:	cmp	sl, #43	; 0x2b
   208d0:	eor	r2, r2, #1
   208d4:	beq	20a44 <__assert_fail@plt+0xf674>
   208d8:	mov	lr, #0
   208dc:	uxtb	r2, r2
   208e0:	mov	ip, #4
   208e4:	b	1f8f4 <__assert_fail@plt+0xe524>
   208e8:	cmp	r2, r0
   208ec:	movlt	r2, #0
   208f0:	movge	r2, #1
   208f4:	b	1fe20 <__assert_fail@plt+0xea50>
   208f8:	cmp	r7, lr
   208fc:	bge	20a90 <__assert_fail@plt+0xf6c0>
   20900:	cmp	sl, #0
   20904:	rsb	r3, r3, #0
   20908:	bne	1fe14 <__assert_fail@plt+0xea44>
   2090c:	ldr	r2, [sp, #1164]	; 0x48c
   20910:	cmp	r2, #43	; 0x2b
   20914:	beq	20a54 <__assert_fail@plt+0xf684>
   20918:	mov	lr, #0
   2091c:	mov	sl, r2
   20920:	str	lr, [sp, #52]	; 0x34
   20924:	mov	r2, #1
   20928:	mov	ip, #2
   2092c:	b	1f8f4 <__assert_fail@plt+0xe524>
   20930:	mov	ip, #2
   20934:	mov	r0, #99	; 0x63
   20938:	cmp	r0, r3
   2093c:	movcs	r0, #0
   20940:	movcc	r0, #1
   20944:	cmp	r5, ip
   20948:	movle	lr, r0
   2094c:	orrgt	lr, r0, #1
   20950:	mov	sl, #43	; 0x2b
   20954:	b	1f8f4 <__assert_fail@plt+0xe524>
   20958:	mov	r3, #0
   2095c:	mov	r2, #1
   20960:	str	r3, [sp, #52]	; 0x34
   20964:	b	1feb0 <__assert_fail@plt+0xeae0>
   20968:	ldr	r3, [sp, #1180]	; 0x49c
   2096c:	mov	ip, #43	; 0x2b
   20970:	str	r3, [sp, #20]
   20974:	ldr	r3, [sp, #1176]	; 0x498
   20978:	mov	r7, #4
   2097c:	str	r3, [sp, #16]
   20980:	ldr	r3, [sp, #1172]	; 0x494
   20984:	mov	r0, r9
   20988:	str	r3, [sp, #12]
   2098c:	ldr	r3, [sp, #44]	; 0x2c
   20990:	str	r7, [sp, #8]
   20994:	str	r3, [sp]
   20998:	str	ip, [sp, #4]
   2099c:	ldr	r3, [sp, #40]	; 0x28
   209a0:	ldr	r2, [pc, #-2448]	; 20018 <__assert_fail@plt+0xec48>
   209a4:	mvn	r1, #0
   209a8:	mov	sl, ip
   209ac:	bl	1efd0 <__assert_fail@plt+0xdc00>
   209b0:	mov	r3, r9
   209b4:	ldr	r9, [pc, #-2468]	; 20018 <__assert_fail@plt+0xec48>
   209b8:	mov	r8, r0
   209bc:	b	1fc00 <__assert_fail@plt+0xe830>
   209c0:	ldr	r2, [sp, #48]	; 0x30
   209c4:	mov	r3, #75	; 0x4b
   209c8:	str	r3, [r2]
   209cc:	b	1f144 <__assert_fail@plt+0xdd74>
   209d0:	ldr	r2, [pc, #-2472]	; 20030 <__assert_fail@plt+0xec60>
   209d4:	mov	ip, #2
   209d8:	smull	r0, r2, r2, r3
   209dc:	add	r0, r2, r3
   209e0:	asr	r2, r3, #31
   209e4:	rsb	r2, r2, r0, asr #2
   209e8:	add	r2, r2, #1
   209ec:	b	1fe48 <__assert_fail@plt+0xea78>
   209f0:	cmp	r7, lr
   209f4:	add	r3, r7, #1888	; 0x760
   209f8:	movge	r2, #0
   209fc:	movlt	r2, #1
   20a00:	add	r3, r3, #12
   20a04:	cmp	sl, #0
   20a08:	str	r2, [sp, #52]	; 0x34
   20a0c:	add	r3, r3, r0
   20a10:	bne	208c8 <__assert_fail@plt+0xf4f8>
   20a14:	ldr	r2, [sp, #1164]	; 0x48c
   20a18:	cmp	r2, #43	; 0x2b
   20a1c:	beq	20a68 <__assert_fail@plt+0xf698>
   20a20:	cmp	r7, lr
   20a24:	mov	sl, r2
   20a28:	mov	lr, #0
   20a2c:	movlt	r2, #0
   20a30:	movge	r2, #1
   20a34:	mov	ip, #4
   20a38:	b	1f8f4 <__assert_fail@plt+0xe524>
   20a3c:	mov	r8, r6
   20a40:	b	1f794 <__assert_fail@plt+0xe3c4>
   20a44:	mov	ip, #4
   20a48:	uxtb	r2, r2
   20a4c:	ldr	r0, [pc, #-2616]	; 2001c <__assert_fail@plt+0xec4c>
   20a50:	b	20938 <__assert_fail@plt+0xf568>
   20a54:	str	sl, [sp, #52]	; 0x34
   20a58:	mov	r2, #1
   20a5c:	mov	ip, #2
   20a60:	mov	r0, #99	; 0x63
   20a64:	b	20938 <__assert_fail@plt+0xf568>
   20a68:	cmp	r7, lr
   20a6c:	movlt	r2, #0
   20a70:	movge	r2, #1
   20a74:	mov	ip, #4
   20a78:	ldr	r0, [pc, #-2660]	; 2001c <__assert_fail@plt+0xec4c>
   20a7c:	b	20938 <__assert_fail@plt+0xf568>
   20a80:	mov	r3, #1
   20a84:	mov	r2, #0
   20a88:	str	r3, [sp, #52]	; 0x34
   20a8c:	b	1feb0 <__assert_fail@plt+0xeae0>
   20a90:	cmp	sl, #0
   20a94:	add	r3, r3, #100	; 0x64
   20a98:	beq	2090c <__assert_fail@plt+0xf53c>
   20a9c:	b	1fe14 <__assert_fail@plt+0xea44>
   20aa0:	cmp	r7, #0
   20aa4:	bne	20b2c <__assert_fail@plt+0xf75c>
   20aa8:	cmp	r0, #0
   20aac:	moveq	lr, #1
   20ab0:	moveq	ip, #3
   20ab4:	beq	1f8f8 <__assert_fail@plt+0xe528>
   20ab8:	mov	ip, #100	; 0x64
   20abc:	mov	lr, #1
   20ac0:	mla	r3, ip, r3, r0
   20ac4:	mov	ip, #6
   20ac8:	mov	r0, #4
   20acc:	b	1f8f8 <__assert_fail@plt+0xe528>
   20ad0:	mov	ip, #100	; 0x64
   20ad4:	mov	lr, #1
   20ad8:	mla	r3, ip, r3, r0
   20adc:	mov	ip, #5
   20ae0:	b	1f8f4 <__assert_fail@plt+0xe524>
   20ae4:	bl	110f4 <memcpy@plt>
   20ae8:	add	r6, r6, r8
   20aec:	b	1f5bc <__assert_fail@plt+0xe1ec>
   20af0:	cmp	r8, #0
   20af4:	beq	1f5bc <__assert_fail@plt+0xe1ec>
   20af8:	bl	1122c <__ctype_tolower_loc@plt>
   20afc:	ldr	r3, [sp, #60]	; 0x3c
   20b00:	add	r6, r6, r8
   20b04:	ldr	ip, [sp, #60]	; 0x3c
   20b08:	add	r8, r3, r8
   20b0c:	mov	r3, r6
   20b10:	ldrb	r1, [r8, #-1]!
   20b14:	ldr	r2, [r0]
   20b18:	cmp	ip, r8
   20b1c:	ldr	r2, [r2, r1, lsl #2]
   20b20:	strb	r2, [r3, #-1]!
   20b24:	bne	20b10 <__assert_fail@plt+0xf740>
   20b28:	b	1f5bc <__assert_fail@plt+0xe1ec>
   20b2c:	mov	lr, #100	; 0x64
   20b30:	ldr	ip, [pc, #-2840]	; 20020 <__assert_fail@plt+0xec50>
   20b34:	mul	r0, lr, r0
   20b38:	mov	lr, #1
   20b3c:	mla	r3, ip, r3, r0
   20b40:	mov	r0, #20
   20b44:	add	r3, r3, r7
   20b48:	mov	ip, #9
   20b4c:	b	1f8f8 <__assert_fail@plt+0xe528>
   20b50:	mov	r1, #32
   20b54:	mov	r0, r6
   20b58:	bl	112c8 <memset@plt>
   20b5c:	add	r6, r6, r7
   20b60:	ldrb	r1, [r4]
   20b64:	b	200c0 <__assert_fail@plt+0xecf0>
   20b68:	sub	r3, r3, #1
   20b6c:	tst	r3, #3
   20b70:	ldrne	r3, [pc, #-2892]	; 2002c <__assert_fail@plt+0xec5c>
   20b74:	bne	20bbc <__assert_fail@plt+0xf7ec>
   20b78:	ldr	r2, [pc, #-2908]	; 20024 <__assert_fail@plt+0xec54>
   20b7c:	mov	r0, #100	; 0x64
   20b80:	smull	r2, ip, r2, r3
   20b84:	asr	r2, r3, #31
   20b88:	rsb	lr, r2, ip, asr #5
   20b8c:	mul	r0, r0, lr
   20b90:	cmp	r3, r0
   20b94:	ldrne	r3, [pc, #-2932]	; 20028 <__assert_fail@plt+0xec58>
   20b98:	bne	20bbc <__assert_fail@plt+0xf7ec>
   20b9c:	rsb	r2, r2, ip, asr #7
   20ba0:	mov	ip, #400	; 0x190
   20ba4:	ldr	r0, [pc, #-2944]	; 2002c <__assert_fail@plt+0xec5c>
   20ba8:	mul	r2, ip, r2
   20bac:	sub	ip, ip, #34	; 0x22
   20bb0:	cmp	r3, r2
   20bb4:	movne	r3, r0
   20bb8:	moveq	r3, ip
   20bbc:	ldr	r2, [sp, #32]
   20bc0:	add	r3, r8, r3
   20bc4:	sub	r2, r3, r2
   20bc8:	ldr	ip, [pc, #-2976]	; 20030 <__assert_fail@plt+0xec60>
   20bcc:	add	r2, r2, #380	; 0x17c
   20bd0:	add	r2, r2, #2
   20bd4:	mvn	r0, #0
   20bd8:	smull	ip, lr, ip, r2
   20bdc:	add	lr, lr, r2
   20be0:	asr	ip, r2, #31
   20be4:	rsb	ip, ip, lr, asr #2
   20be8:	mov	r8, r0
   20bec:	rsb	ip, ip, ip, lsl #3
   20bf0:	sub	ip, r2, ip
   20bf4:	sub	r3, r3, ip
   20bf8:	add	r3, r3, #3
   20bfc:	ldr	lr, [pc, #-3024]	; 20034 <__assert_fail@plt+0xec64>
   20c00:	b	1fdc0 <__assert_fail@plt+0xe9f0>
   20c04:	mov	r5, r3
   20c08:	mov	r7, #1
   20c0c:	b	20144 <__assert_fail@plt+0xed74>
   20c10:	add	r2, r4, #2
   20c14:	mov	r8, #1
   20c18:	mov	r0, r2
   20c1c:	ldrb	r3, [r2], #1
   20c20:	add	r8, r8, #1
   20c24:	cmp	r3, #58	; 0x3a
   20c28:	bne	201fc <__assert_fail@plt+0xee2c>
   20c2c:	b	20c18 <__assert_fail@plt+0xf848>
   20c30:	mov	r5, r3
   20c34:	mov	r7, #1
   20c38:	b	205f8 <__assert_fail@plt+0xf228>
   20c3c:	bl	110f4 <memcpy@plt>
   20c40:	b	20510 <__assert_fail@plt+0xf140>
   20c44:	mov	r8, #1
   20c48:	b	204c4 <__assert_fail@plt+0xf0f4>
   20c4c:	subeq	r3, r3, r0, lsl #1
   20c50:	addeq	r3, r3, #48	; 0x30
   20c54:	strbeq	r3, [sp, #80]	; 0x50
   20c58:	b	204c4 <__assert_fail@plt+0xf0f4>
   20c5c:	push	{r4, r5, lr}
   20c60:	sub	sp, sp, #36	; 0x24
   20c64:	add	lr, sp, #32
   20c68:	mov	ip, #0
   20c6c:	ldr	r5, [sp, #48]	; 0x30
   20c70:	ldr	r4, [sp, #52]	; 0x34
   20c74:	strb	ip, [lr, #-1]!
   20c78:	str	lr, [sp, #12]
   20c7c:	mvn	lr, #0
   20c80:	str	ip, [sp, #4]
   20c84:	str	ip, [sp]
   20c88:	str	r5, [sp, #16]
   20c8c:	str	r4, [sp, #20]
   20c90:	str	lr, [sp, #8]
   20c94:	bl	1efd0 <__assert_fail@plt+0xdc00>
   20c98:	add	sp, sp, #36	; 0x24
   20c9c:	pop	{r4, r5, pc}
   20ca0:	push	{r4, r5, r6, lr}
   20ca4:	subs	r4, r2, #0
   20ca8:	mov	r6, r0
   20cac:	mov	r5, r1
   20cb0:	beq	20cdc <__assert_fail@plt+0xf90c>
   20cb4:	mov	r1, r4
   20cb8:	mvn	r0, #0
   20cbc:	bl	20de0 <__assert_fail@plt+0xfa10>
   20cc0:	cmp	r0, r5
   20cc4:	bcs	20cdc <__assert_fail@plt+0xf90c>
   20cc8:	bl	11298 <__errno_location@plt>
   20ccc:	mov	r3, #12
   20cd0:	str	r3, [r0]
   20cd4:	mov	r0, #0
   20cd8:	pop	{r4, r5, r6, pc}
   20cdc:	mul	r1, r5, r4
   20ce0:	mov	r0, r6
   20ce4:	pop	{r4, r5, r6, lr}
   20ce8:	b	1ec38 <__assert_fail@plt+0xd868>
   20cec:	push	{lr}		; (str lr, [sp, #-4]!)
   20cf0:	sub	sp, sp, #268	; 0x10c
   20cf4:	add	r1, sp, #4
   20cf8:	ldr	r2, [pc, #60]	; 20d3c <__assert_fail@plt+0xf96c>
   20cfc:	bl	20d48 <__assert_fail@plt+0xf978>
   20d00:	cmp	r0, #0
   20d04:	movne	r0, #0
   20d08:	bne	20d34 <__assert_fail@plt+0xf964>
   20d0c:	ldr	r1, [pc, #44]	; 20d40 <__assert_fail@plt+0xf970>
   20d10:	add	r0, sp, #4
   20d14:	bl	110a0 <strcmp@plt>
   20d18:	cmp	r0, #0
   20d1c:	beq	20d34 <__assert_fail@plt+0xf964>
   20d20:	add	r0, sp, #4
   20d24:	ldr	r1, [pc, #24]	; 20d44 <__assert_fail@plt+0xf974>
   20d28:	bl	110a0 <strcmp@plt>
   20d2c:	adds	r0, r0, #0
   20d30:	movne	r0, #1
   20d34:	add	sp, sp, #268	; 0x10c
   20d38:	pop	{pc}		; (ldr pc, [sp], #4)
   20d3c:	andeq	r0, r0, r1, lsl #2
   20d40:	andeq	r3, r2, ip, lsl #13
   20d44:	strdeq	r3, [r2], -ip
   20d48:	push	{r4, r5, r6, lr}
   20d4c:	mov	r5, r1
   20d50:	mov	r1, #0
   20d54:	mov	r4, r2
   20d58:	bl	1131c <setlocale@plt>
   20d5c:	subs	r6, r0, #0
   20d60:	beq	20dbc <__assert_fail@plt+0xf9ec>
   20d64:	bl	11274 <strlen@plt>
   20d68:	cmp	r4, r0
   20d6c:	bhi	20da4 <__assert_fail@plt+0xf9d4>
   20d70:	cmp	r4, #0
   20d74:	bne	20d80 <__assert_fail@plt+0xf9b0>
   20d78:	mov	r0, #34	; 0x22
   20d7c:	pop	{r4, r5, r6, pc}
   20d80:	sub	r4, r4, #1
   20d84:	mov	r1, r6
   20d88:	mov	r2, r4
   20d8c:	mov	r0, r5
   20d90:	bl	110f4 <memcpy@plt>
   20d94:	mov	r3, #0
   20d98:	strb	r3, [r5, r4]
   20d9c:	mov	r0, #34	; 0x22
   20da0:	pop	{r4, r5, r6, pc}
   20da4:	add	r2, r0, #1
   20da8:	mov	r1, r6
   20dac:	mov	r0, r5
   20db0:	bl	110f4 <memcpy@plt>
   20db4:	mov	r0, #0
   20db8:	pop	{r4, r5, r6, pc}
   20dbc:	cmp	r4, #0
   20dc0:	beq	20dd0 <__assert_fail@plt+0xfa00>
   20dc4:	strb	r6, [r5]
   20dc8:	mov	r0, #22
   20dcc:	pop	{r4, r5, r6, pc}
   20dd0:	mov	r0, #22
   20dd4:	pop	{r4, r5, r6, pc}
   20dd8:	mov	r1, #0
   20ddc:	b	1131c <setlocale@plt>
   20de0:	subs	r2, r1, #1
   20de4:	bxeq	lr
   20de8:	bcc	20fc0 <__assert_fail@plt+0xfbf0>
   20dec:	cmp	r0, r1
   20df0:	bls	20fa4 <__assert_fail@plt+0xfbd4>
   20df4:	tst	r1, r2
   20df8:	beq	20fb0 <__assert_fail@plt+0xfbe0>
   20dfc:	clz	r3, r0
   20e00:	clz	r2, r1
   20e04:	sub	r3, r2, r3
   20e08:	rsbs	r3, r3, #31
   20e0c:	addne	r3, r3, r3, lsl #1
   20e10:	mov	r2, #0
   20e14:	addne	pc, pc, r3, lsl #2
   20e18:	nop			; (mov r0, r0)
   20e1c:	cmp	r0, r1, lsl #31
   20e20:	adc	r2, r2, r2
   20e24:	subcs	r0, r0, r1, lsl #31
   20e28:	cmp	r0, r1, lsl #30
   20e2c:	adc	r2, r2, r2
   20e30:	subcs	r0, r0, r1, lsl #30
   20e34:	cmp	r0, r1, lsl #29
   20e38:	adc	r2, r2, r2
   20e3c:	subcs	r0, r0, r1, lsl #29
   20e40:	cmp	r0, r1, lsl #28
   20e44:	adc	r2, r2, r2
   20e48:	subcs	r0, r0, r1, lsl #28
   20e4c:	cmp	r0, r1, lsl #27
   20e50:	adc	r2, r2, r2
   20e54:	subcs	r0, r0, r1, lsl #27
   20e58:	cmp	r0, r1, lsl #26
   20e5c:	adc	r2, r2, r2
   20e60:	subcs	r0, r0, r1, lsl #26
   20e64:	cmp	r0, r1, lsl #25
   20e68:	adc	r2, r2, r2
   20e6c:	subcs	r0, r0, r1, lsl #25
   20e70:	cmp	r0, r1, lsl #24
   20e74:	adc	r2, r2, r2
   20e78:	subcs	r0, r0, r1, lsl #24
   20e7c:	cmp	r0, r1, lsl #23
   20e80:	adc	r2, r2, r2
   20e84:	subcs	r0, r0, r1, lsl #23
   20e88:	cmp	r0, r1, lsl #22
   20e8c:	adc	r2, r2, r2
   20e90:	subcs	r0, r0, r1, lsl #22
   20e94:	cmp	r0, r1, lsl #21
   20e98:	adc	r2, r2, r2
   20e9c:	subcs	r0, r0, r1, lsl #21
   20ea0:	cmp	r0, r1, lsl #20
   20ea4:	adc	r2, r2, r2
   20ea8:	subcs	r0, r0, r1, lsl #20
   20eac:	cmp	r0, r1, lsl #19
   20eb0:	adc	r2, r2, r2
   20eb4:	subcs	r0, r0, r1, lsl #19
   20eb8:	cmp	r0, r1, lsl #18
   20ebc:	adc	r2, r2, r2
   20ec0:	subcs	r0, r0, r1, lsl #18
   20ec4:	cmp	r0, r1, lsl #17
   20ec8:	adc	r2, r2, r2
   20ecc:	subcs	r0, r0, r1, lsl #17
   20ed0:	cmp	r0, r1, lsl #16
   20ed4:	adc	r2, r2, r2
   20ed8:	subcs	r0, r0, r1, lsl #16
   20edc:	cmp	r0, r1, lsl #15
   20ee0:	adc	r2, r2, r2
   20ee4:	subcs	r0, r0, r1, lsl #15
   20ee8:	cmp	r0, r1, lsl #14
   20eec:	adc	r2, r2, r2
   20ef0:	subcs	r0, r0, r1, lsl #14
   20ef4:	cmp	r0, r1, lsl #13
   20ef8:	adc	r2, r2, r2
   20efc:	subcs	r0, r0, r1, lsl #13
   20f00:	cmp	r0, r1, lsl #12
   20f04:	adc	r2, r2, r2
   20f08:	subcs	r0, r0, r1, lsl #12
   20f0c:	cmp	r0, r1, lsl #11
   20f10:	adc	r2, r2, r2
   20f14:	subcs	r0, r0, r1, lsl #11
   20f18:	cmp	r0, r1, lsl #10
   20f1c:	adc	r2, r2, r2
   20f20:	subcs	r0, r0, r1, lsl #10
   20f24:	cmp	r0, r1, lsl #9
   20f28:	adc	r2, r2, r2
   20f2c:	subcs	r0, r0, r1, lsl #9
   20f30:	cmp	r0, r1, lsl #8
   20f34:	adc	r2, r2, r2
   20f38:	subcs	r0, r0, r1, lsl #8
   20f3c:	cmp	r0, r1, lsl #7
   20f40:	adc	r2, r2, r2
   20f44:	subcs	r0, r0, r1, lsl #7
   20f48:	cmp	r0, r1, lsl #6
   20f4c:	adc	r2, r2, r2
   20f50:	subcs	r0, r0, r1, lsl #6
   20f54:	cmp	r0, r1, lsl #5
   20f58:	adc	r2, r2, r2
   20f5c:	subcs	r0, r0, r1, lsl #5
   20f60:	cmp	r0, r1, lsl #4
   20f64:	adc	r2, r2, r2
   20f68:	subcs	r0, r0, r1, lsl #4
   20f6c:	cmp	r0, r1, lsl #3
   20f70:	adc	r2, r2, r2
   20f74:	subcs	r0, r0, r1, lsl #3
   20f78:	cmp	r0, r1, lsl #2
   20f7c:	adc	r2, r2, r2
   20f80:	subcs	r0, r0, r1, lsl #2
   20f84:	cmp	r0, r1, lsl #1
   20f88:	adc	r2, r2, r2
   20f8c:	subcs	r0, r0, r1, lsl #1
   20f90:	cmp	r0, r1
   20f94:	adc	r2, r2, r2
   20f98:	subcs	r0, r0, r1
   20f9c:	mov	r0, r2
   20fa0:	bx	lr
   20fa4:	moveq	r0, #1
   20fa8:	movne	r0, #0
   20fac:	bx	lr
   20fb0:	clz	r2, r1
   20fb4:	rsb	r2, r2, #31
   20fb8:	lsr	r0, r0, r2
   20fbc:	bx	lr
   20fc0:	cmp	r0, #0
   20fc4:	mvnne	r0, #0
   20fc8:	b	21300 <__assert_fail@plt+0xff30>
   20fcc:	cmp	r1, #0
   20fd0:	beq	20fc0 <__assert_fail@plt+0xfbf0>
   20fd4:	push	{r0, r1, lr}
   20fd8:	bl	20de0 <__assert_fail@plt+0xfa10>
   20fdc:	pop	{r1, r2, lr}
   20fe0:	mul	r3, r2, r0
   20fe4:	sub	r1, r1, r3
   20fe8:	bx	lr
   20fec:	cmp	r1, #0
   20ff0:	beq	211fc <__assert_fail@plt+0xfe2c>
   20ff4:	eor	ip, r0, r1
   20ff8:	rsbmi	r1, r1, #0
   20ffc:	subs	r2, r1, #1
   21000:	beq	211c8 <__assert_fail@plt+0xfdf8>
   21004:	movs	r3, r0
   21008:	rsbmi	r3, r0, #0
   2100c:	cmp	r3, r1
   21010:	bls	211d4 <__assert_fail@plt+0xfe04>
   21014:	tst	r1, r2
   21018:	beq	211e4 <__assert_fail@plt+0xfe14>
   2101c:	clz	r2, r3
   21020:	clz	r0, r1
   21024:	sub	r2, r0, r2
   21028:	rsbs	r2, r2, #31
   2102c:	addne	r2, r2, r2, lsl #1
   21030:	mov	r0, #0
   21034:	addne	pc, pc, r2, lsl #2
   21038:	nop			; (mov r0, r0)
   2103c:	cmp	r3, r1, lsl #31
   21040:	adc	r0, r0, r0
   21044:	subcs	r3, r3, r1, lsl #31
   21048:	cmp	r3, r1, lsl #30
   2104c:	adc	r0, r0, r0
   21050:	subcs	r3, r3, r1, lsl #30
   21054:	cmp	r3, r1, lsl #29
   21058:	adc	r0, r0, r0
   2105c:	subcs	r3, r3, r1, lsl #29
   21060:	cmp	r3, r1, lsl #28
   21064:	adc	r0, r0, r0
   21068:	subcs	r3, r3, r1, lsl #28
   2106c:	cmp	r3, r1, lsl #27
   21070:	adc	r0, r0, r0
   21074:	subcs	r3, r3, r1, lsl #27
   21078:	cmp	r3, r1, lsl #26
   2107c:	adc	r0, r0, r0
   21080:	subcs	r3, r3, r1, lsl #26
   21084:	cmp	r3, r1, lsl #25
   21088:	adc	r0, r0, r0
   2108c:	subcs	r3, r3, r1, lsl #25
   21090:	cmp	r3, r1, lsl #24
   21094:	adc	r0, r0, r0
   21098:	subcs	r3, r3, r1, lsl #24
   2109c:	cmp	r3, r1, lsl #23
   210a0:	adc	r0, r0, r0
   210a4:	subcs	r3, r3, r1, lsl #23
   210a8:	cmp	r3, r1, lsl #22
   210ac:	adc	r0, r0, r0
   210b0:	subcs	r3, r3, r1, lsl #22
   210b4:	cmp	r3, r1, lsl #21
   210b8:	adc	r0, r0, r0
   210bc:	subcs	r3, r3, r1, lsl #21
   210c0:	cmp	r3, r1, lsl #20
   210c4:	adc	r0, r0, r0
   210c8:	subcs	r3, r3, r1, lsl #20
   210cc:	cmp	r3, r1, lsl #19
   210d0:	adc	r0, r0, r0
   210d4:	subcs	r3, r3, r1, lsl #19
   210d8:	cmp	r3, r1, lsl #18
   210dc:	adc	r0, r0, r0
   210e0:	subcs	r3, r3, r1, lsl #18
   210e4:	cmp	r3, r1, lsl #17
   210e8:	adc	r0, r0, r0
   210ec:	subcs	r3, r3, r1, lsl #17
   210f0:	cmp	r3, r1, lsl #16
   210f4:	adc	r0, r0, r0
   210f8:	subcs	r3, r3, r1, lsl #16
   210fc:	cmp	r3, r1, lsl #15
   21100:	adc	r0, r0, r0
   21104:	subcs	r3, r3, r1, lsl #15
   21108:	cmp	r3, r1, lsl #14
   2110c:	adc	r0, r0, r0
   21110:	subcs	r3, r3, r1, lsl #14
   21114:	cmp	r3, r1, lsl #13
   21118:	adc	r0, r0, r0
   2111c:	subcs	r3, r3, r1, lsl #13
   21120:	cmp	r3, r1, lsl #12
   21124:	adc	r0, r0, r0
   21128:	subcs	r3, r3, r1, lsl #12
   2112c:	cmp	r3, r1, lsl #11
   21130:	adc	r0, r0, r0
   21134:	subcs	r3, r3, r1, lsl #11
   21138:	cmp	r3, r1, lsl #10
   2113c:	adc	r0, r0, r0
   21140:	subcs	r3, r3, r1, lsl #10
   21144:	cmp	r3, r1, lsl #9
   21148:	adc	r0, r0, r0
   2114c:	subcs	r3, r3, r1, lsl #9
   21150:	cmp	r3, r1, lsl #8
   21154:	adc	r0, r0, r0
   21158:	subcs	r3, r3, r1, lsl #8
   2115c:	cmp	r3, r1, lsl #7
   21160:	adc	r0, r0, r0
   21164:	subcs	r3, r3, r1, lsl #7
   21168:	cmp	r3, r1, lsl #6
   2116c:	adc	r0, r0, r0
   21170:	subcs	r3, r3, r1, lsl #6
   21174:	cmp	r3, r1, lsl #5
   21178:	adc	r0, r0, r0
   2117c:	subcs	r3, r3, r1, lsl #5
   21180:	cmp	r3, r1, lsl #4
   21184:	adc	r0, r0, r0
   21188:	subcs	r3, r3, r1, lsl #4
   2118c:	cmp	r3, r1, lsl #3
   21190:	adc	r0, r0, r0
   21194:	subcs	r3, r3, r1, lsl #3
   21198:	cmp	r3, r1, lsl #2
   2119c:	adc	r0, r0, r0
   211a0:	subcs	r3, r3, r1, lsl #2
   211a4:	cmp	r3, r1, lsl #1
   211a8:	adc	r0, r0, r0
   211ac:	subcs	r3, r3, r1, lsl #1
   211b0:	cmp	r3, r1
   211b4:	adc	r0, r0, r0
   211b8:	subcs	r3, r3, r1
   211bc:	cmp	ip, #0
   211c0:	rsbmi	r0, r0, #0
   211c4:	bx	lr
   211c8:	teq	ip, r0
   211cc:	rsbmi	r0, r0, #0
   211d0:	bx	lr
   211d4:	movcc	r0, #0
   211d8:	asreq	r0, ip, #31
   211dc:	orreq	r0, r0, #1
   211e0:	bx	lr
   211e4:	clz	r2, r1
   211e8:	rsb	r2, r2, #31
   211ec:	cmp	ip, #0
   211f0:	lsr	r0, r3, r2
   211f4:	rsbmi	r0, r0, #0
   211f8:	bx	lr
   211fc:	cmp	r0, #0
   21200:	mvngt	r0, #-2147483648	; 0x80000000
   21204:	movlt	r0, #-2147483648	; 0x80000000
   21208:	b	21300 <__assert_fail@plt+0xff30>
   2120c:	cmp	r1, #0
   21210:	beq	211fc <__assert_fail@plt+0xfe2c>
   21214:	push	{r0, r1, lr}
   21218:	bl	20ff4 <__assert_fail@plt+0xfc24>
   2121c:	pop	{r1, r2, lr}
   21220:	mul	r3, r2, r0
   21224:	sub	r1, r1, r3
   21228:	bx	lr
   2122c:	cmp	r3, #0
   21230:	cmpeq	r2, #0
   21234:	bne	21258 <__assert_fail@plt+0xfe88>
   21238:	cmp	r1, #0
   2123c:	movlt	r1, #-2147483648	; 0x80000000
   21240:	movlt	r0, #0
   21244:	blt	21254 <__assert_fail@plt+0xfe84>
   21248:	cmpeq	r0, #0
   2124c:	mvnne	r1, #-2147483648	; 0x80000000
   21250:	mvnne	r0, #0
   21254:	b	21300 <__assert_fail@plt+0xff30>
   21258:	sub	sp, sp, #8
   2125c:	push	{sp, lr}
   21260:	cmp	r1, #0
   21264:	blt	21284 <__assert_fail@plt+0xfeb4>
   21268:	cmp	r3, #0
   2126c:	blt	212b8 <__assert_fail@plt+0xfee8>
   21270:	bl	21310 <__assert_fail@plt+0xff40>
   21274:	ldr	lr, [sp, #4]
   21278:	add	sp, sp, #8
   2127c:	pop	{r2, r3}
   21280:	bx	lr
   21284:	rsbs	r0, r0, #0
   21288:	sbc	r1, r1, r1, lsl #1
   2128c:	cmp	r3, #0
   21290:	blt	212dc <__assert_fail@plt+0xff0c>
   21294:	bl	21310 <__assert_fail@plt+0xff40>
   21298:	ldr	lr, [sp, #4]
   2129c:	add	sp, sp, #8
   212a0:	pop	{r2, r3}
   212a4:	rsbs	r0, r0, #0
   212a8:	sbc	r1, r1, r1, lsl #1
   212ac:	rsbs	r2, r2, #0
   212b0:	sbc	r3, r3, r3, lsl #1
   212b4:	bx	lr
   212b8:	rsbs	r2, r2, #0
   212bc:	sbc	r3, r3, r3, lsl #1
   212c0:	bl	21310 <__assert_fail@plt+0xff40>
   212c4:	ldr	lr, [sp, #4]
   212c8:	add	sp, sp, #8
   212cc:	pop	{r2, r3}
   212d0:	rsbs	r0, r0, #0
   212d4:	sbc	r1, r1, r1, lsl #1
   212d8:	bx	lr
   212dc:	rsbs	r2, r2, #0
   212e0:	sbc	r3, r3, r3, lsl #1
   212e4:	bl	21310 <__assert_fail@plt+0xff40>
   212e8:	ldr	lr, [sp, #4]
   212ec:	add	sp, sp, #8
   212f0:	pop	{r2, r3}
   212f4:	rsbs	r2, r2, #0
   212f8:	sbc	r3, r3, r3, lsl #1
   212fc:	bx	lr
   21300:	push	{r1, lr}
   21304:	mov	r0, #8
   21308:	bl	1107c <raise@plt>
   2130c:	pop	{r1, pc}
   21310:	cmp	r1, r3
   21314:	push	{r4, r5, r6, r7, r8, r9, lr}
   21318:	cmpeq	r0, r2
   2131c:	mov	r4, r0
   21320:	mov	r5, r1
   21324:	ldr	r9, [sp, #28]
   21328:	movcc	r0, #0
   2132c:	movcc	r1, #0
   21330:	bcc	21428 <__assert_fail@plt+0x10058>
   21334:	cmp	r3, #0
   21338:	clzeq	ip, r2
   2133c:	clzne	ip, r3
   21340:	addeq	ip, ip, #32
   21344:	cmp	r5, #0
   21348:	clzeq	r1, r4
   2134c:	addeq	r1, r1, #32
   21350:	clzne	r1, r5
   21354:	sub	ip, ip, r1
   21358:	sub	lr, ip, #32
   2135c:	lsl	r7, r3, ip
   21360:	rsb	r8, ip, #32
   21364:	orr	r7, r7, r2, lsl lr
   21368:	orr	r7, r7, r2, lsr r8
   2136c:	lsl	r6, r2, ip
   21370:	cmp	r5, r7
   21374:	cmpeq	r4, r6
   21378:	movcc	r0, #0
   2137c:	movcc	r1, #0
   21380:	bcc	2139c <__assert_fail@plt+0xffcc>
   21384:	mov	r3, #1
   21388:	subs	r4, r4, r6
   2138c:	lsl	r1, r3, lr
   21390:	lsl	r0, r3, ip
   21394:	orr	r1, r1, r3, lsr r8
   21398:	sbc	r5, r5, r7
   2139c:	cmp	ip, #0
   213a0:	beq	21428 <__assert_fail@plt+0x10058>
   213a4:	lsrs	r3, r7, #1
   213a8:	rrx	r2, r6
   213ac:	mov	r6, ip
   213b0:	b	213d4 <__assert_fail@plt+0x10004>
   213b4:	subs	r4, r4, r2
   213b8:	sbc	r5, r5, r3
   213bc:	adds	r4, r4, r4
   213c0:	adc	r5, r5, r5
   213c4:	adds	r4, r4, #1
   213c8:	adc	r5, r5, #0
   213cc:	subs	r6, r6, #1
   213d0:	beq	213f0 <__assert_fail@plt+0x10020>
   213d4:	cmp	r5, r3
   213d8:	cmpeq	r4, r2
   213dc:	bcs	213b4 <__assert_fail@plt+0xffe4>
   213e0:	adds	r4, r4, r4
   213e4:	adc	r5, r5, r5
   213e8:	subs	r6, r6, #1
   213ec:	bne	213d4 <__assert_fail@plt+0x10004>
   213f0:	lsr	r6, r4, ip
   213f4:	lsr	r7, r5, ip
   213f8:	orr	r6, r6, r5, lsl r8
   213fc:	adds	r2, r0, r4
   21400:	orr	r6, r6, r5, lsr lr
   21404:	adc	r3, r1, r5
   21408:	lsl	r1, r7, ip
   2140c:	orr	r1, r1, r6, lsl lr
   21410:	lsl	r0, r6, ip
   21414:	orr	r1, r1, r6, lsr r8
   21418:	subs	r0, r2, r0
   2141c:	mov	r4, r6
   21420:	mov	r5, r7
   21424:	sbc	r1, r3, r1
   21428:	cmp	r9, #0
   2142c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   21430:	strd	r4, [r9]
   21434:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2143c:	mov	r7, r0
   21440:	ldr	r6, [pc, #72]	; 21490 <__assert_fail@plt+0x100c0>
   21444:	ldr	r5, [pc, #72]	; 21494 <__assert_fail@plt+0x100c4>
   21448:	add	r6, pc, r6
   2144c:	add	r5, pc, r5
   21450:	sub	r6, r6, r5
   21454:	mov	r8, r1
   21458:	mov	r9, r2
   2145c:	bl	11044 <calloc@plt-0x20>
   21460:	asrs	r6, r6, #2
   21464:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21468:	mov	r4, #0
   2146c:	add	r4, r4, #1
   21470:	ldr	r3, [r5], #4
   21474:	mov	r2, r9
   21478:	mov	r1, r8
   2147c:	mov	r0, r7
   21480:	blx	r3
   21484:	cmp	r6, r4
   21488:	bne	2146c <__assert_fail@plt+0x1009c>
   2148c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21490:	andeq	r2, r1, r0, asr #21
   21494:			; <UNDEFINED> instruction: 0x00012ab8
   21498:	bx	lr
   2149c:	ldr	r3, [pc, #12]	; 214b0 <__assert_fail@plt+0x100e0>
   214a0:	mov	r1, #0
   214a4:	add	r3, pc, r3
   214a8:	ldr	r2, [r3]
   214ac:	b	112bc <__cxa_atexit@plt>
   214b0:	muleq	r1, r0, ip

Disassembly of section .fini:

000214b4 <.fini>:
   214b4:	push	{r3, lr}
   214b8:	pop	{r3, pc}
