
../repos/prog2/Extras_cores:     file format elf32-littlearm


Disassembly of section .init:

00010534 <.init>:
   10534:	push	{r3, lr}
   10538:	bl	105c0 <_start@@Base+0x3c>
   1053c:	pop	{r3, pc}

Disassembly of section .plt:

00010540 <printf@plt-0x14>:
   10540:	push	{lr}		; (str lr, [sp, #-4]!)
   10544:	ldr	lr, [pc, #4]	; 10550 <printf@plt-0x4>
   10548:	add	lr, pc, lr
   1054c:	ldr	pc, [lr, #8]!
   10550:			; <UNDEFINED> instruction: 0x00010ab0

00010554 <printf@plt>:
   10554:	add	ip, pc, #0, 12
   10558:	add	ip, ip, #16, 20	; 0x10000
   1055c:	ldr	pc, [ip, #2736]!	; 0xab0

00010560 <__libc_start_main@plt>:
   10560:	add	ip, pc, #0, 12
   10564:	add	ip, ip, #16, 20	; 0x10000
   10568:	ldr	pc, [ip, #2728]!	; 0xaa8

0001056c <__gmon_start__@plt>:
   1056c:	add	ip, pc, #0, 12
   10570:	add	ip, ip, #16, 20	; 0x10000
   10574:	ldr	pc, [ip, #2720]!	; 0xaa0

00010578 <abort@plt>:
   10578:	add	ip, pc, #0, 12
   1057c:	add	ip, ip, #16, 20	; 0x10000
   10580:	ldr	pc, [ip, #2712]!	; 0xa98

Disassembly of section .text:

00010584 <_start@@Base>:
   10584:	mov	fp, #0
   10588:	mov	lr, #0
   1058c:	pop	{r1}		; (ldr r1, [sp], #4)
   10590:	mov	r2, sp
   10594:	push	{r2}		; (str r2, [sp, #-4]!)
   10598:	push	{r0}		; (str r0, [sp, #-4]!)
   1059c:	ldr	ip, [pc, #16]	; 105b4 <_start@@Base+0x30>
   105a0:	push	{ip}		; (str ip, [sp, #-4]!)
   105a4:	ldr	r0, [pc, #12]	; 105b8 <_start@@Base+0x34>
   105a8:	ldr	r3, [pc, #12]	; 105bc <_start@@Base+0x38>
   105ac:	bl	10560 <__libc_start_main@plt>
   105b0:	bl	10578 <abort@plt>
   105b4:	andeq	r0, r1, r8, ror r7
   105b8:	andeq	r0, r1, ip, lsr #13
   105bc:	andeq	r0, r1, r8, lsl r7
   105c0:	ldr	r3, [pc, #20]	; 105dc <_start@@Base+0x58>
   105c4:	ldr	r2, [pc, #20]	; 105e0 <_start@@Base+0x5c>
   105c8:	add	r3, pc, r3
   105cc:	ldr	r2, [r3, r2]
   105d0:	cmp	r2, #0
   105d4:	bxeq	lr
   105d8:	b	1056c <__gmon_start__@plt>
   105dc:	andeq	r0, r1, r0, lsr sl
   105e0:	andeq	r0, r0, ip, lsl r0
   105e4:	ldr	r3, [pc, #28]	; 10608 <_start@@Base+0x84>
   105e8:	ldr	r0, [pc, #28]	; 1060c <_start@@Base+0x88>
   105ec:	sub	r3, r3, r0
   105f0:	cmp	r3, #6
   105f4:	bxls	lr
   105f8:	ldr	r3, [pc, #16]	; 10610 <_start@@Base+0x8c>
   105fc:	cmp	r3, #0
   10600:	bxeq	lr
   10604:	bx	r3
   10608:	andeq	r1, r2, fp, lsr #32
   1060c:	andeq	r1, r2, r8, lsr #32
   10610:	andeq	r0, r0, r0
   10614:	ldr	r1, [pc, #36]	; 10640 <_start@@Base+0xbc>
   10618:	ldr	r0, [pc, #36]	; 10644 <_start@@Base+0xc0>
   1061c:	sub	r1, r1, r0
   10620:	asr	r1, r1, #2
   10624:	add	r1, r1, r1, lsr #31
   10628:	asrs	r1, r1, #1
   1062c:	bxeq	lr
   10630:	ldr	r3, [pc, #16]	; 10648 <_start@@Base+0xc4>
   10634:	cmp	r3, #0
   10638:	bxeq	lr
   1063c:	bx	r3
   10640:	andeq	r1, r2, r8, lsr #32
   10644:	andeq	r1, r2, r8, lsr #32
   10648:	andeq	r0, r0, r0
   1064c:	push	{r4, lr}
   10650:	ldr	r4, [pc, #24]	; 10670 <_start@@Base+0xec>
   10654:	ldrb	r3, [r4]
   10658:	cmp	r3, #0
   1065c:	popne	{r4, pc}
   10660:	bl	105e4 <_start@@Base+0x60>
   10664:	mov	r3, #1
   10668:	strb	r3, [r4]
   1066c:	pop	{r4, pc}
   10670:	andeq	r1, r2, r8, lsr #32
   10674:	ldr	r0, [pc, #40]	; 106a4 <_start@@Base+0x120>
   10678:	ldr	r3, [r0]
   1067c:	cmp	r3, #0
   10680:	bne	10688 <_start@@Base+0x104>
   10684:	b	10614 <_start@@Base+0x90>
   10688:	ldr	r3, [pc, #24]	; 106a8 <_start@@Base+0x124>
   1068c:	cmp	r3, #0
   10690:	beq	10684 <_start@@Base+0x100>
   10694:	push	{r4, lr}
   10698:	blx	r3
   1069c:	pop	{r4, lr}
   106a0:	b	10614 <_start@@Base+0x90>
   106a4:	andeq	r0, r2, r4, lsl pc
   106a8:	andeq	r0, r0, r0

000106ac <main@@Base>:
   106ac:	push	{r4, lr}
   106b0:	ldr	r0, [pc, #64]	; 106f8 <main@@Base+0x4c>
   106b4:	bl	10554 <printf@plt>
   106b8:	ldr	r0, [pc, #60]	; 106fc <main@@Base+0x50>
   106bc:	bl	10554 <printf@plt>
   106c0:	ldr	r0, [pc, #56]	; 10700 <main@@Base+0x54>
   106c4:	bl	10554 <printf@plt>
   106c8:	ldr	r0, [pc, #52]	; 10704 <main@@Base+0x58>
   106cc:	bl	10554 <printf@plt>
   106d0:	ldr	r0, [pc, #48]	; 10708 <main@@Base+0x5c>
   106d4:	bl	10554 <printf@plt>
   106d8:	ldr	r0, [pc, #44]	; 1070c <main@@Base+0x60>
   106dc:	bl	10554 <printf@plt>
   106e0:	ldr	r0, [pc, #40]	; 10710 <main@@Base+0x64>
   106e4:	bl	10554 <printf@plt>
   106e8:	ldr	r0, [pc, #36]	; 10714 <main@@Base+0x68>
   106ec:	bl	10554 <printf@plt>
   106f0:	mov	r0, #0
   106f4:	pop	{r4, pc}
   106f8:	andeq	r0, r1, r8, lsl #15
   106fc:	muleq	r1, r8, r7
   10700:	andeq	r0, r1, r8, lsr #15
   10704:			; <UNDEFINED> instruction: 0x000107bc
   10708:	andeq	r0, r1, ip, asr #15
   1070c:	andeq	r0, r1, r0, ror #15
   10710:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10714:	andeq	r0, r1, r0, lsl #16

00010718 <__libc_csu_init@@Base>:
   10718:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1071c:	mov	r7, r0
   10720:	ldr	r6, [pc, #72]	; 10770 <__libc_csu_init@@Base+0x58>
   10724:	ldr	r5, [pc, #72]	; 10774 <__libc_csu_init@@Base+0x5c>
   10728:	add	r6, pc, r6
   1072c:	add	r5, pc, r5
   10730:	sub	r6, r6, r5
   10734:	mov	r8, r1
   10738:	mov	r9, r2
   1073c:	bl	10534 <printf@plt-0x20>
   10740:	asrs	r6, r6, #2
   10744:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10748:	mov	r4, #0
   1074c:	add	r4, r4, #1
   10750:	ldr	r3, [r5], #4
   10754:	mov	r2, r9
   10758:	mov	r1, r8
   1075c:	mov	r0, r7
   10760:	blx	r3
   10764:	cmp	r6, r4
   10768:	bne	1074c <__libc_csu_init@@Base+0x34>
   1076c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10770:	andeq	r0, r1, r0, ror #15
   10774:	ldrdeq	r0, [r1], -r8

00010778 <__libc_csu_fini@@Base>:
   10778:	bx	lr

Disassembly of section .fini:

0001077c <.fini>:
   1077c:	push	{r3, lr}
   10780:	pop	{r3, pc}
