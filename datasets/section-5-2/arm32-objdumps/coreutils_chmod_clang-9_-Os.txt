
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

000110cc <.init>:
   110cc:	push	{r3, lr}
   110d0:	bl	1142c <__assert_fail@plt+0x4c>
   110d4:	pop	{r3, pc}

Disassembly of section .plt:

000110d8 <fstatfs64@plt-0x14>:
   110d8:	push	{lr}		; (str lr, [sp, #-4]!)
   110dc:	ldr	lr, [pc, #4]	; 110e8 <fstatfs64@plt-0x4>
   110e0:	add	lr, pc, lr
   110e4:	ldr	pc, [lr, #8]!
   110e8:	andeq	r8, r1, r8, lsl pc

000110ec <fstatfs64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #24, 20	; 0x18000
   110f4:	ldr	pc, [ip, #3864]!	; 0xf18

000110f8 <calloc@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #24, 20	; 0x18000
   11100:	ldr	pc, [ip, #3856]!	; 0xf10

00011104 <fputs_unlocked@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #24, 20	; 0x18000
   1110c:	ldr	pc, [ip, #3848]!	; 0xf08

00011110 <raise@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #24, 20	; 0x18000
   11118:	ldr	pc, [ip, #3840]!	; 0xf00

0001111c <strcmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #24, 20	; 0x18000
   11124:	ldr	pc, [ip, #3832]!	; 0xef8

00011128 <fflush@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #24, 20	; 0x18000
   11130:	ldr	pc, [ip, #3824]!	; 0xef0

00011134 <memmove@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #24, 20	; 0x18000
   1113c:	ldr	pc, [ip, #3816]!	; 0xee8

00011140 <free@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #24, 20	; 0x18000
   11148:	ldr	pc, [ip, #3808]!	; 0xee0

0001114c <_exit@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #24, 20	; 0x18000
   11154:	ldr	pc, [ip, #3800]!	; 0xed8

00011158 <memcpy@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #24, 20	; 0x18000
   11160:	ldr	pc, [ip, #3792]!	; 0xed0

00011164 <mbsinit@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #24, 20	; 0x18000
   1116c:	ldr	pc, [ip, #3784]!	; 0xec8

00011170 <dcgettext@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #24, 20	; 0x18000
   11178:	ldr	pc, [ip, #3776]!	; 0xec0

0001117c <realloc@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #24, 20	; 0x18000
   11184:	ldr	pc, [ip, #3768]!	; 0xeb8

00011188 <textdomain@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #24, 20	; 0x18000
   11190:	ldr	pc, [ip, #3760]!	; 0xeb0

00011194 <__fxstatat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #24, 20	; 0x18000
   1119c:	ldr	pc, [ip, #3752]!	; 0xea8

000111a0 <iswprint@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #24, 20	; 0x18000
   111a8:	ldr	pc, [ip, #3744]!	; 0xea0

000111ac <__fxstat64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #24, 20	; 0x18000
   111b4:	ldr	pc, [ip, #3736]!	; 0xe98

000111b8 <lseek64@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #24, 20	; 0x18000
   111c0:	ldr	pc, [ip, #3728]!	; 0xe90

000111c4 <__ctype_get_mb_cur_max@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #24, 20	; 0x18000
   111cc:	ldr	pc, [ip, #3720]!	; 0xe88

000111d0 <__fpending@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #24, 20	; 0x18000
   111d8:	ldr	pc, [ip, #3712]!	; 0xe80

000111dc <ferror_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #24, 20	; 0x18000
   111e4:	ldr	pc, [ip, #3704]!	; 0xe78

000111e8 <mbrtowc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #24, 20	; 0x18000
   111f0:	ldr	pc, [ip, #3696]!	; 0xe70

000111f4 <error@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #24, 20	; 0x18000
   111fc:	ldr	pc, [ip, #3688]!	; 0xe68

00011200 <open64@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #24, 20	; 0x18000
   11208:	ldr	pc, [ip, #3680]!	; 0xe60

0001120c <malloc@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #24, 20	; 0x18000
   11214:	ldr	pc, [ip, #3672]!	; 0xe58

00011218 <__libc_start_main@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #24, 20	; 0x18000
   11220:	ldr	pc, [ip, #3664]!	; 0xe50

00011224 <__freading@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #24, 20	; 0x18000
   1122c:	ldr	pc, [ip, #3656]!	; 0xe48

00011230 <__gmon_start__@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #24, 20	; 0x18000
   11238:	ldr	pc, [ip, #3648]!	; 0xe40

0001123c <getopt_long@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #24, 20	; 0x18000
   11244:	ldr	pc, [ip, #3640]!	; 0xe38

00011248 <__ctype_b_loc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #24, 20	; 0x18000
   11250:	ldr	pc, [ip, #3632]!	; 0xe30

00011254 <exit@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #24, 20	; 0x18000
   1125c:	ldr	pc, [ip, #3624]!	; 0xe28

00011260 <bcmp@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #24, 20	; 0x18000
   11268:	ldr	pc, [ip, #3616]!	; 0xe20

0001126c <strlen@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #24, 20	; 0x18000
   11274:	ldr	pc, [ip, #3608]!	; 0xe18

00011278 <openat64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #24, 20	; 0x18000
   11280:	ldr	pc, [ip, #3600]!	; 0xe10

00011284 <fchmodat@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #24, 20	; 0x18000
   1128c:	ldr	pc, [ip, #3592]!	; 0xe08

00011290 <__errno_location@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #24, 20	; 0x18000
   11298:	ldr	pc, [ip, #3584]!	; 0xe00

0001129c <__sprintf_chk@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #24, 20	; 0x18000
   112a4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112a8 <__cxa_atexit@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #24, 20	; 0x18000
   112b0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112b4 <memset@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #24, 20	; 0x18000
   112bc:	ldr	pc, [ip, #3560]!	; 0xde8

000112c0 <__printf_chk@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #24, 20	; 0x18000
   112c8:	ldr	pc, [ip, #3552]!	; 0xde0

000112cc <fileno@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #24, 20	; 0x18000
   112d4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112d8 <__fprintf_chk@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #24, 20	; 0x18000
   112e0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112e4 <fclose@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #24, 20	; 0x18000
   112ec:	ldr	pc, [ip, #3528]!	; 0xdc8

000112f0 <fseeko64@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #24, 20	; 0x18000
   112f8:	ldr	pc, [ip, #3520]!	; 0xdc0

000112fc <fcntl64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #24, 20	; 0x18000
   11304:	ldr	pc, [ip, #3512]!	; 0xdb8

00011308 <setlocale@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #24, 20	; 0x18000
   11310:	ldr	pc, [ip, #3504]!	; 0xdb0

00011314 <strrchr@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #24, 20	; 0x18000
   1131c:	ldr	pc, [ip, #3496]!	; 0xda8

00011320 <nl_langinfo@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #24, 20	; 0x18000
   11328:	ldr	pc, [ip, #3488]!	; 0xda0

0001132c <readdir64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #24, 20	; 0x18000
   11334:	ldr	pc, [ip, #3480]!	; 0xd98

00011338 <fdopendir@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #24, 20	; 0x18000
   11340:	ldr	pc, [ip, #3472]!	; 0xd90

00011344 <dirfd@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #24, 20	; 0x18000
   1134c:	ldr	pc, [ip, #3464]!	; 0xd88

00011350 <fchdir@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #24, 20	; 0x18000
   11358:	ldr	pc, [ip, #3456]!	; 0xd80

0001135c <qsort@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #24, 20	; 0x18000
   11364:	ldr	pc, [ip, #3448]!	; 0xd78

00011368 <bindtextdomain@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #24, 20	; 0x18000
   11370:	ldr	pc, [ip, #3440]!	; 0xd70

00011374 <umask@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #24, 20	; 0x18000
   1137c:	ldr	pc, [ip, #3432]!	; 0xd68

00011380 <chmod@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #24, 20	; 0x18000
   11388:	ldr	pc, [ip, #3424]!	; 0xd60

0001138c <__xstat64@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #24, 20	; 0x18000
   11394:	ldr	pc, [ip, #3416]!	; 0xd58

00011398 <fputs@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #24, 20	; 0x18000
   113a0:	ldr	pc, [ip, #3408]!	; 0xd50

000113a4 <strncmp@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #24, 20	; 0x18000
   113ac:	ldr	pc, [ip, #3400]!	; 0xd48

000113b0 <abort@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #24, 20	; 0x18000
   113b8:	ldr	pc, [ip, #3392]!	; 0xd40

000113bc <close@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #24, 20	; 0x18000
   113c4:	ldr	pc, [ip, #3384]!	; 0xd38

000113c8 <__lxstat64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #24, 20	; 0x18000
   113d0:	ldr	pc, [ip, #3376]!	; 0xd30

000113d4 <closedir@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #24, 20	; 0x18000
   113dc:	ldr	pc, [ip, #3368]!	; 0xd28

000113e0 <__assert_fail@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #24, 20	; 0x18000
   113e8:	ldr	pc, [ip, #3360]!	; 0xd20

Disassembly of section .text:

000113f0 <.text>:
   113f0:	mov	fp, #0
   113f4:	mov	lr, #0
   113f8:	pop	{r1}		; (ldr r1, [sp], #4)
   113fc:	mov	r2, sp
   11400:	push	{r2}		; (str r2, [sp, #-4]!)
   11404:	push	{r0}		; (str r0, [sp, #-4]!)
   11408:	ldr	ip, [pc, #16]	; 11420 <__assert_fail@plt+0x40>
   1140c:	push	{ip}		; (str ip, [sp, #-4]!)
   11410:	ldr	r0, [pc, #12]	; 11424 <__assert_fail@plt+0x44>
   11414:	ldr	r3, [pc, #12]	; 11428 <__assert_fail@plt+0x48>
   11418:	bl	11218 <__libc_start_main@plt>
   1141c:	bl	113b0 <abort@plt>
   11420:	andeq	r8, r1, ip, lsl #28
   11424:	muleq	r1, r8, r7
   11428:	andeq	r8, r1, ip, lsr #27
   1142c:	ldr	r3, [pc, #20]	; 11448 <__assert_fail@plt+0x68>
   11430:	ldr	r2, [pc, #20]	; 1144c <__assert_fail@plt+0x6c>
   11434:	add	r3, pc, r3
   11438:	ldr	r2, [r3, r2]
   1143c:	cmp	r2, #0
   11440:	bxeq	lr
   11444:	b	11230 <__gmon_start__@plt>
   11448:	andeq	r8, r1, r4, asr #23
   1144c:	andeq	r0, r0, ip, lsl #2
   11450:	ldr	r0, [pc, #24]	; 11470 <__assert_fail@plt+0x90>
   11454:	ldr	r3, [pc, #24]	; 11474 <__assert_fail@plt+0x94>
   11458:	cmp	r3, r0
   1145c:	bxeq	lr
   11460:	ldr	r3, [pc, #16]	; 11478 <__assert_fail@plt+0x98>
   11464:	cmp	r3, #0
   11468:	bxeq	lr
   1146c:	bx	r3
   11470:	andeq	sl, r2, r8, ror #2
   11474:	andeq	sl, r2, r8, ror #2
   11478:	andeq	r0, r0, r0
   1147c:	ldr	r0, [pc, #36]	; 114a8 <__assert_fail@plt+0xc8>
   11480:	ldr	r1, [pc, #36]	; 114ac <__assert_fail@plt+0xcc>
   11484:	sub	r1, r1, r0
   11488:	asr	r1, r1, #2
   1148c:	add	r1, r1, r1, lsr #31
   11490:	asrs	r1, r1, #1
   11494:	bxeq	lr
   11498:	ldr	r3, [pc, #16]	; 114b0 <__assert_fail@plt+0xd0>
   1149c:	cmp	r3, #0
   114a0:	bxeq	lr
   114a4:	bx	r3
   114a8:	andeq	sl, r2, r8, ror #2
   114ac:	andeq	sl, r2, r8, ror #2
   114b0:	andeq	r0, r0, r0
   114b4:	push	{r4, lr}
   114b8:	ldr	r4, [pc, #24]	; 114d8 <__assert_fail@plt+0xf8>
   114bc:	ldrb	r3, [r4]
   114c0:	cmp	r3, #0
   114c4:	popne	{r4, pc}
   114c8:	bl	11450 <__assert_fail@plt+0x70>
   114cc:	mov	r3, #1
   114d0:	strb	r3, [r4]
   114d4:	pop	{r4, pc}
   114d8:	andeq	sl, r2, r4, lsl #3
   114dc:	b	1147c <__assert_fail@plt+0x9c>
   114e0:	push	{fp, lr}
   114e4:	mov	fp, sp
   114e8:	sub	sp, sp, #64	; 0x40
   114ec:	mov	r8, r0
   114f0:	cmp	r0, #0
   114f4:	bne	11758 <__assert_fail@plt+0x378>
   114f8:	movw	r1, #36531	; 0x8eb3
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	11170 <dcgettext@plt>
   1150c:	mov	r1, r0
   11510:	movw	r0, #41396	; 0xa1b4
   11514:	movt	r0, #2
   11518:	ldr	r2, [r0]
   1151c:	mov	r0, #1
   11520:	mov	r3, r2
   11524:	str	r2, [sp]
   11528:	bl	112c0 <__printf_chk@plt>
   1152c:	movw	r1, #36666	; 0x8f3a
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	11170 <dcgettext@plt>
   11540:	movw	r9, #41340	; 0xa17c
   11544:	movt	r9, #2
   11548:	ldr	r1, [r9]
   1154c:	bl	11104 <fputs_unlocked@plt>
   11550:	movw	r1, #36771	; 0x8fa3
   11554:	mov	r0, #0
   11558:	mov	r2, #5
   1155c:	movt	r1, #1
   11560:	bl	11170 <dcgettext@plt>
   11564:	ldr	r1, [r9]
   11568:	bl	11104 <fputs_unlocked@plt>
   1156c:	movw	r1, #36972	; 0x906c
   11570:	mov	r0, #0
   11574:	mov	r2, #5
   11578:	movt	r1, #1
   1157c:	bl	11170 <dcgettext@plt>
   11580:	ldr	r1, [r9]
   11584:	bl	11104 <fputs_unlocked@plt>
   11588:	movw	r1, #37100	; 0x90ec
   1158c:	mov	r0, #0
   11590:	mov	r2, #5
   11594:	movt	r1, #1
   11598:	bl	11170 <dcgettext@plt>
   1159c:	ldr	r1, [r9]
   115a0:	bl	11104 <fputs_unlocked@plt>
   115a4:	movw	r1, #37166	; 0x912e
   115a8:	mov	r0, #0
   115ac:	mov	r2, #5
   115b0:	movt	r1, #1
   115b4:	bl	11170 <dcgettext@plt>
   115b8:	ldr	r1, [r9]
   115bc:	bl	11104 <fputs_unlocked@plt>
   115c0:	movw	r1, #37233	; 0x9171
   115c4:	mov	r0, #0
   115c8:	mov	r2, #5
   115cc:	movt	r1, #1
   115d0:	bl	11170 <dcgettext@plt>
   115d4:	ldr	r1, [r9]
   115d8:	bl	11104 <fputs_unlocked@plt>
   115dc:	movw	r1, #37278	; 0x919e
   115e0:	mov	r0, #0
   115e4:	mov	r2, #5
   115e8:	movt	r1, #1
   115ec:	bl	11170 <dcgettext@plt>
   115f0:	ldr	r1, [r9]
   115f4:	bl	11104 <fputs_unlocked@plt>
   115f8:	movw	r1, #37332	; 0x91d4
   115fc:	mov	r0, #0
   11600:	mov	r2, #5
   11604:	movt	r1, #1
   11608:	bl	11170 <dcgettext@plt>
   1160c:	ldr	r1, [r9]
   11610:	bl	11104 <fputs_unlocked@plt>
   11614:	movw	r0, #39016	; 0x9868
   11618:	add	r6, sp, #8
   1161c:	movt	r0, #1
   11620:	mov	r1, r6
   11624:	ldm	r0!, {r2, r3, r4, r5}
   11628:	stmia	r1!, {r2, r3, r4, r5}
   1162c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11630:	stmia	r1!, {r2, r3, r4, r5, r7}
   11634:	ldm	r0, {r2, r3, r4, r5, r7}
   11638:	stm	r1, {r2, r3, r4, r5, r7}
   1163c:	movw	r1, #37681	; 0x9331
   11640:	movw	r5, #37407	; 0x921f
   11644:	movt	r1, #1
   11648:	movt	r5, #1
   1164c:	mov	r0, r5
   11650:	bl	1111c <strcmp@plt>
   11654:	cmp	r0, #0
   11658:	ldrne	r1, [r6, #8]!
   1165c:	cmpne	r1, #0
   11660:	bne	1164c <__assert_fail@plt+0x26c>
   11664:	movw	r1, #37776	; 0x9390
   11668:	ldr	r6, [r6, #4]
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	11170 <dcgettext@plt>
   1167c:	movw	r2, #37505	; 0x9281
   11680:	movw	r3, #37799	; 0x93a7
   11684:	mov	r1, r0
   11688:	mov	r0, #1
   1168c:	movt	r2, #1
   11690:	movt	r3, #1
   11694:	bl	112c0 <__printf_chk@plt>
   11698:	cmp	r6, #0
   1169c:	mov	r0, #5
   116a0:	mov	r1, #0
   116a4:	moveq	r6, r5
   116a8:	bl	11308 <setlocale@plt>
   116ac:	cmp	r0, #0
   116b0:	beq	116e8 <__assert_fail@plt+0x308>
   116b4:	movw	r1, #37839	; 0x93cf
   116b8:	mov	r2, #3
   116bc:	movt	r1, #1
   116c0:	bl	113a4 <strncmp@plt>
   116c4:	cmp	r0, #0
   116c8:	beq	116e8 <__assert_fail@plt+0x308>
   116cc:	movw	r1, #37843	; 0x93d3
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	11170 <dcgettext@plt>
   116e0:	ldr	r1, [r9]
   116e4:	bl	11104 <fputs_unlocked@plt>
   116e8:	movw	r1, #37914	; 0x941a
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	11170 <dcgettext@plt>
   116fc:	movw	r2, #37799	; 0x93a7
   11700:	mov	r1, r0
   11704:	mov	r0, #1
   11708:	mov	r3, r5
   1170c:	movt	r2, #1
   11710:	bl	112c0 <__printf_chk@plt>
   11714:	movw	r1, #37941	; 0x9435
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #1
   11724:	bl	11170 <dcgettext@plt>
   11728:	mov	r1, r0
   1172c:	movw	r0, #37709	; 0x934d
   11730:	movw	r3, #36770	; 0x8fa2
   11734:	cmp	r6, r5
   11738:	mov	r2, r6
   1173c:	movt	r0, #1
   11740:	movt	r3, #1
   11744:	moveq	r3, r0
   11748:	mov	r0, #1
   1174c:	bl	112c0 <__printf_chk@plt>
   11750:	mov	r0, r8
   11754:	bl	11254 <exit@plt>
   11758:	movw	r0, #41336	; 0xa178
   1175c:	movw	r1, #36492	; 0x8e8c
   11760:	mov	r2, #5
   11764:	movt	r0, #2
   11768:	movt	r1, #1
   1176c:	ldr	r5, [r0]
   11770:	mov	r0, #0
   11774:	bl	11170 <dcgettext@plt>
   11778:	mov	r2, r0
   1177c:	movw	r0, #41396	; 0xa1b4
   11780:	mov	r1, #1
   11784:	movt	r0, #2
   11788:	ldr	r3, [r0]
   1178c:	mov	r0, r5
   11790:	bl	112d8 <__fprintf_chk@plt>
   11794:	b	11750 <__assert_fail@plt+0x370>
   11798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1179c:	add	fp, sp, #28
   117a0:	sub	sp, sp, #156	; 0x9c
   117a4:	mov	r4, #0
   117a8:	mov	r7, r0
   117ac:	mov	r5, r1
   117b0:	str	r4, [sp, #36]	; 0x24
   117b4:	ldr	r0, [r1]
   117b8:	bl	15ec4 <__assert_fail@plt+0x4ae4>
   117bc:	movw	r1, #36770	; 0x8fa2
   117c0:	mov	r0, #6
   117c4:	movt	r1, #1
   117c8:	bl	11308 <setlocale@plt>
   117cc:	movw	r6, #37509	; 0x9285
   117d0:	movw	r1, #37413	; 0x9225
   117d4:	movt	r6, #1
   117d8:	movt	r1, #1
   117dc:	mov	r0, r6
   117e0:	bl	11368 <bindtextdomain@plt>
   117e4:	mov	r0, r6
   117e8:	bl	11188 <textdomain@plt>
   117ec:	movw	r0, #9628	; 0x259c
   117f0:	movt	r0, #1
   117f4:	bl	18e10 <__assert_fail@plt+0x7a30>
   117f8:	movw	r0, #41352	; 0xa188
   117fc:	movw	r8, #41328	; 0xa170
   11800:	mov	r6, #0
   11804:	mov	r1, #0
   11808:	mov	sl, #0
   1180c:	movt	r0, #2
   11810:	movt	r8, #2
   11814:	strb	r4, [r0]
   11818:	movw	r0, #41353	; 0xa189
   1181c:	movt	r0, #2
   11820:	strb	r4, [r0]
   11824:	movw	r0, #41354	; 0xa18a
   11828:	movt	r0, #2
   1182c:	strb	r4, [r0]
   11830:	mov	r0, #0
   11834:	str	r0, [sp, #32]
   11838:	movw	r2, #37437	; 0x923d
   1183c:	movw	r3, #38840	; 0x97b8
   11840:	mov	r9, r1
   11844:	mov	r0, r7
   11848:	mov	r1, r5
   1184c:	str	r4, [sp]
   11850:	movt	r2, #1
   11854:	movt	r3, #1
   11858:	bl	1123c <getopt_long@plt>
   1185c:	cmp	r0, #96	; 0x60
   11860:	ble	1192c <__assert_fail@plt+0x54c>
   11864:	cmp	r0, #255	; 0xff
   11868:	bgt	119d4 <__assert_fail@plt+0x5f4>
   1186c:	sub	r0, r0, #97	; 0x61
   11870:	cmp	r0, #23
   11874:	bhi	12574 <__assert_fail@plt+0x1194>
   11878:	add	r1, pc, #0
   1187c:	ldr	pc, [r1, r0, lsl #2]
   11880:	andeq	r1, r1, r0, ror #17
   11884:	andeq	r2, r1, r4, ror r5
   11888:	andeq	r1, r1, r4, lsl sl
   1188c:	andeq	r2, r1, r4, ror r5
   11890:	andeq	r2, r1, r4, ror r5
   11894:	andeq	r1, r1, r0, asr #20
   11898:	andeq	r1, r1, r0, ror #17
   1189c:	andeq	r2, r1, r4, ror r5
   118a0:	andeq	r2, r1, r4, ror r5
   118a4:	andeq	r2, r1, r4, ror r5
   118a8:	andeq	r2, r1, r4, ror r5
   118ac:	andeq	r2, r1, r4, ror r5
   118b0:	andeq	r2, r1, r4, ror r5
   118b4:	andeq	r2, r1, r4, ror r5
   118b8:	andeq	r1, r1, r0, ror #17
   118bc:	andeq	r2, r1, r4, ror r5
   118c0:	andeq	r2, r1, r4, ror r5
   118c4:	andeq	r1, r1, r0, ror #17
   118c8:	andeq	r1, r1, r0, ror #17
   118cc:	andeq	r1, r1, r0, ror #17
   118d0:	andeq	r1, r1, r0, ror #17
   118d4:	andeq	r1, r1, ip, lsr #20
   118d8:	andeq	r1, r1, r0, ror #17
   118dc:	andeq	r1, r1, r0, ror #17
   118e0:	ldr	r0, [r8]
   118e4:	str	r6, [sp, #24]
   118e8:	str	r7, [sp, #28]
   118ec:	mov	r4, r9
   118f0:	mov	r7, r5
   118f4:	add	r0, r5, r0, lsl #2
   118f8:	ldr	r6, [r0, #-4]
   118fc:	mov	r0, r6
   11900:	bl	1126c <strlen@plt>
   11904:	cmp	sl, #0
   11908:	mov	r9, sl
   1190c:	mov	r8, r0
   11910:	addne	r9, r9, #1
   11914:	add	r5, r0, r9
   11918:	ldr	r0, [sp, #36]	; 0x24
   1191c:	cmp	r0, r5
   11920:	bls	11968 <__assert_fail@plt+0x588>
   11924:	ldr	r1, [sp, #32]
   11928:	b	11980 <__assert_fail@plt+0x5a0>
   1192c:	cmp	r0, #42	; 0x2a
   11930:	ble	11a64 <__assert_fail@plt+0x684>
   11934:	sub	r1, r0, #43	; 0x2b
   11938:	cmp	r1, #18
   1193c:	bhi	11954 <__assert_fail@plt+0x574>
   11940:	movw	r3, #8163	; 0x1fe3
   11944:	mov	r2, #1
   11948:	movt	r3, #4
   1194c:	tst	r3, r2, lsl r1
   11950:	bne	118e0 <__assert_fail@plt+0x500>
   11954:	cmp	r0, #82	; 0x52
   11958:	bne	11a58 <__assert_fail@plt+0x678>
   1195c:	movw	r0, #41354	; 0xa18a
   11960:	movt	r0, #2
   11964:	b	11a48 <__assert_fail@plt+0x668>
   11968:	add	r0, r5, #1
   1196c:	add	r1, sp, #36	; 0x24
   11970:	str	r0, [sp, #36]	; 0x24
   11974:	ldr	r0, [sp, #32]
   11978:	bl	18054 <__assert_fail@plt+0x6c74>
   1197c:	mov	r1, r0
   11980:	mov	r0, #44	; 0x2c
   11984:	str	r1, [sp, #32]
   11988:	add	r2, r8, #1
   1198c:	strb	r0, [r1, sl]
   11990:	add	r0, r1, r9
   11994:	mov	r1, r6
   11998:	bl	11158 <memcpy@plt>
   1199c:	movw	r6, #41328	; 0xa170
   119a0:	movw	r0, #41352	; 0xa188
   119a4:	mov	sl, r5
   119a8:	mov	r5, r7
   119ac:	ldr	r7, [sp, #28]
   119b0:	mov	r1, #1
   119b4:	movt	r6, #2
   119b8:	movt	r0, #2
   119bc:	mov	r8, r6
   119c0:	ldr	r6, [sp, #24]
   119c4:	strb	r1, [r0]
   119c8:	mov	r1, r4
   119cc:	mov	r4, #0
   119d0:	b	11838 <__assert_fail@plt+0x458>
   119d4:	cmp	r0, #256	; 0x100
   119d8:	mov	r1, #0
   119dc:	beq	11838 <__assert_fail@plt+0x458>
   119e0:	movw	r1, #257	; 0x101
   119e4:	cmp	r0, r1
   119e8:	bne	119f4 <__assert_fail@plt+0x614>
   119ec:	mov	r1, #1
   119f0:	b	11838 <__assert_fail@plt+0x458>
   119f4:	movw	r1, #258	; 0x102
   119f8:	cmp	r0, r1
   119fc:	bne	12574 <__assert_fail@plt+0x1194>
   11a00:	movw	r0, #41344	; 0xa180
   11a04:	mov	r1, r9
   11a08:	movt	r0, #2
   11a0c:	ldr	r6, [r0]
   11a10:	b	11838 <__assert_fail@plt+0x458>
   11a14:	movw	r0, #41240	; 0xa118
   11a18:	mov	r1, #1
   11a1c:	movt	r0, #2
   11a20:	str	r1, [r0]
   11a24:	mov	r1, r9
   11a28:	b	11838 <__assert_fail@plt+0x458>
   11a2c:	movw	r0, #41240	; 0xa118
   11a30:	mov	r1, r9
   11a34:	movt	r0, #2
   11a38:	str	r4, [r0]
   11a3c:	b	11838 <__assert_fail@plt+0x458>
   11a40:	movw	r0, #41353	; 0xa189
   11a44:	movt	r0, #2
   11a48:	mov	r1, #1
   11a4c:	strb	r1, [r0]
   11a50:	mov	r1, r9
   11a54:	b	11838 <__assert_fail@plt+0x458>
   11a58:	cmp	r0, #88	; 0x58
   11a5c:	beq	118e0 <__assert_fail@plt+0x500>
   11a60:	b	12574 <__assert_fail@plt+0x1194>
   11a64:	cmn	r0, #1
   11a68:	bne	12458 <__assert_fail@plt+0x1078>
   11a6c:	ldr	r0, [sp, #32]
   11a70:	cmp	r6, #0
   11a74:	beq	11a90 <__assert_fail@plt+0x6b0>
   11a78:	mov	r4, #0
   11a7c:	cmp	r0, #0
   11a80:	beq	11aac <__assert_fail@plt+0x6cc>
   11a84:	movw	r1, #37548	; 0x92ac
   11a88:	movt	r1, #1
   11a8c:	b	12520 <__assert_fail@plt+0x1140>
   11a90:	cmp	r0, #0
   11a94:	mov	r4, r0
   11a98:	bne	11aac <__assert_fail@plt+0x6cc>
   11a9c:	ldr	r0, [r8]
   11aa0:	add	r1, r0, #1
   11aa4:	str	r1, [r8]
   11aa8:	ldr	r4, [r5, r0, lsl #2]
   11aac:	ldr	r0, [r8]
   11ab0:	cmp	r0, r7
   11ab4:	bge	124c8 <__assert_fail@plt+0x10e8>
   11ab8:	cmp	r6, #0
   11abc:	beq	11b08 <__assert_fail@plt+0x728>
   11ac0:	mov	r0, r6
   11ac4:	bl	15cd0 <__assert_fail@plt+0x48f0>
   11ac8:	movw	r1, #41356	; 0xa18c
   11acc:	cmp	r0, #0
   11ad0:	movt	r1, #2
   11ad4:	str	r0, [r1]
   11ad8:	bne	11b38 <__assert_fail@plt+0x758>
   11adc:	bl	11290 <__errno_location@plt>
   11ae0:	movw	r1, #37633	; 0x9301
   11ae4:	ldr	r4, [r0]
   11ae8:	mov	r0, #0
   11aec:	mov	r2, #5
   11af0:	movt	r1, #1
   11af4:	bl	11170 <dcgettext@plt>
   11af8:	mov	r5, r0
   11afc:	mov	r0, #4
   11b00:	mov	r1, r6
   11b04:	b	11ba4 <__assert_fail@plt+0x7c4>
   11b08:	mov	r0, r4
   11b0c:	bl	15984 <__assert_fail@plt+0x45a4>
   11b10:	movw	r1, #41356	; 0xa18c
   11b14:	cmp	r0, #0
   11b18:	movt	r1, #2
   11b1c:	str	r0, [r1]
   11b20:	beq	12540 <__assert_fail@plt+0x1160>
   11b24:	mov	r0, #0
   11b28:	bl	11374 <umask@plt>
   11b2c:	movw	r1, #41360	; 0xa190
   11b30:	movt	r1, #2
   11b34:	str	r0, [r1]
   11b38:	movw	r0, #41354	; 0xa18a
   11b3c:	movw	r4, #41384	; 0xa1a8
   11b40:	movt	r0, #2
   11b44:	movt	r4, #2
   11b48:	ldrb	r0, [r0]
   11b4c:	and	r0, r9, r0
   11b50:	tst	r0, #1
   11b54:	beq	11bbc <__assert_fail@plt+0x7dc>
   11b58:	movw	r0, #41368	; 0xa198
   11b5c:	movt	r0, #2
   11b60:	bl	179fc <__assert_fail@plt+0x661c>
   11b64:	movw	sl, #41353	; 0xa189
   11b68:	cmp	r0, #0
   11b6c:	str	r0, [r4]
   11b70:	movt	sl, #2
   11b74:	bne	11bcc <__assert_fail@plt+0x7ec>
   11b78:	bl	11290 <__errno_location@plt>
   11b7c:	movw	r1, #37633	; 0x9301
   11b80:	ldr	r4, [r0]
   11b84:	mov	r0, #0
   11b88:	mov	r2, #5
   11b8c:	movt	r1, #1
   11b90:	bl	11170 <dcgettext@plt>
   11b94:	movw	r1, #40295	; 0x9d67
   11b98:	mov	r5, r0
   11b9c:	mov	r0, #4
   11ba0:	movt	r1, #1
   11ba4:	bl	17578 <__assert_fail@plt+0x6198>
   11ba8:	mov	r3, r0
   11bac:	mov	r0, #1
   11bb0:	mov	r1, r4
   11bb4:	mov	r2, r5
   11bb8:	bl	111f4 <error@plt>
   11bbc:	movw	sl, #41353	; 0xa189
   11bc0:	mov	r0, #0
   11bc4:	movt	sl, #2
   11bc8:	str	r0, [r4]
   11bcc:	ldr	r0, [r8]
   11bd0:	movw	r1, #1041	; 0x411
   11bd4:	mov	r2, #0
   11bd8:	add	r0, r5, r0, lsl #2
   11bdc:	bl	183c0 <__assert_fail@plt+0x6fe0>
   11be0:	str	r0, [sp, #32]
   11be4:	bl	131e8 <__assert_fail@plt+0x1e08>
   11be8:	cmp	r0, #0
   11bec:	beq	123c0 <__assert_fail@plt+0xfe0>
   11bf0:	mov	r8, r0
   11bf4:	sub	r0, fp, #40	; 0x28
   11bf8:	mov	r4, #1
   11bfc:	add	r0, r0, #1
   11c00:	str	r0, [sp, #20]
   11c04:	add	r0, sp, #40	; 0x28
   11c08:	add	r0, r0, #1
   11c0c:	str	r0, [sp, #24]
   11c10:	ldrh	r0, [r8, #56]	; 0x38
   11c14:	ldr	r9, [r8, #24]
   11c18:	ldr	r7, [r8, #28]
   11c1c:	sub	r0, r0, #2
   11c20:	cmp	r0, #11
   11c24:	bhi	11cbc <__assert_fail@plt+0x8dc>
   11c28:	add	r1, pc, #4
   11c2c:	mov	r6, #1
   11c30:	ldr	pc, [r1, r0, lsl #2]
   11c34:	andeq	r1, r1, r4, ror #24
   11c38:			; <UNDEFINED> instruction: 0x00011cbc
   11c3c:	andeq	r1, r1, r4, lsr #27
   11c40:			; <UNDEFINED> instruction: 0x00011cbc
   11c44:	andeq	r2, r1, r8, lsl #6
   11c48:	andeq	r1, r1, r0, lsr lr
   11c4c:			; <UNDEFINED> instruction: 0x00011cbc
   11c50:			; <UNDEFINED> instruction: 0x00011cbc
   11c54:	andeq	r1, r1, ip, ror lr
   11c58:			; <UNDEFINED> instruction: 0x00011cbc
   11c5c:			; <UNDEFINED> instruction: 0x00011cbc
   11c60:	ldrdeq	r1, [r1], -r8
   11c64:	ldr	r0, [sp, #32]
   11c68:	mov	r1, r8
   11c6c:	bl	1840c <__assert_fail@plt+0x702c>
   11c70:	cmp	r0, #0
   11c74:	beq	11cbc <__assert_fail@plt+0x8dc>
   11c78:	movw	r1, #38184	; 0x9528
   11c7c:	mov	r0, #0
   11c80:	mov	r2, #5
   11c84:	mov	r6, #0
   11c88:	movt	r1, #1
   11c8c:	bl	11170 <dcgettext@plt>
   11c90:	mov	r5, r0
   11c94:	mov	r0, #0
   11c98:	mov	r1, #3
   11c9c:	mov	r2, r7
   11ca0:	bl	1771c <__assert_fail@plt+0x633c>
   11ca4:	mov	r3, r0
   11ca8:	mov	r0, #0
   11cac:	mov	r1, #0
   11cb0:	mov	r2, r5
   11cb4:	bl	111f4 <error@plt>
   11cb8:	b	12308 <__assert_fail@plt+0xf28>
   11cbc:	movw	r0, #41384	; 0xa1a8
   11cc0:	str	r7, [sp, #28]
   11cc4:	movt	r0, #2
   11cc8:	ldr	r0, [r0]
   11ccc:	cmp	r0, #0
   11cd0:	beq	11d88 <__assert_fail@plt+0x9a8>
   11cd4:	add	r1, r8, #160	; 0xa0
   11cd8:	ldrd	r2, [r0]
   11cdc:	ldrd	r6, [r1]
   11ce0:	eor	r1, r7, r3
   11ce4:	eor	r2, r6, r2
   11ce8:	orrs	r1, r2, r1
   11cec:	bne	11d88 <__assert_fail@plt+0x9a8>
   11cf0:	add	r1, r8, #64	; 0x40
   11cf4:	ldr	r3, [r0, #12]
   11cf8:	ldr	r0, [r0, #8]
   11cfc:	ldr	r2, [r1]
   11d00:	ldr	r1, [r1, #4]
   11d04:	eor	r1, r1, r3
   11d08:	eor	r0, r2, r0
   11d0c:	orrs	r0, r0, r1
   11d10:	bne	11d88 <__assert_fail@plt+0x9a8>
   11d14:	ldr	r7, [sp, #28]
   11d18:	movw	r6, #40295	; 0x9d67
   11d1c:	movt	r6, #1
   11d20:	mov	r1, r6
   11d24:	mov	r0, r7
   11d28:	bl	1111c <strcmp@plt>
   11d2c:	cmp	r0, #0
   11d30:	beq	12340 <__assert_fail@plt+0xf60>
   11d34:	movw	r1, #38415	; 0x960f
   11d38:	mov	r0, #0
   11d3c:	mov	r2, #5
   11d40:	movt	r1, #1
   11d44:	bl	11170 <dcgettext@plt>
   11d48:	mov	r5, r0
   11d4c:	mov	r0, #0
   11d50:	mov	r1, #4
   11d54:	mov	r2, r7
   11d58:	bl	174d0 <__assert_fail@plt+0x60f0>
   11d5c:	mov	r7, r0
   11d60:	mov	r0, #1
   11d64:	mov	r1, #4
   11d68:	mov	r2, r6
   11d6c:	bl	174d0 <__assert_fail@plt+0x60f0>
   11d70:	str	r0, [sp]
   11d74:	mov	r0, #0
   11d78:	mov	r1, #0
   11d7c:	mov	r2, r5
   11d80:	mov	r3, r7
   11d84:	b	12374 <__assert_fail@plt+0xf94>
   11d88:	ldr	r7, [r8, #80]	; 0x50
   11d8c:	and	r0, r7, #61440	; 0xf000
   11d90:	cmp	r0, #40960	; 0xa000
   11d94:	bne	11f98 <__assert_fail@plt+0xbb8>
   11d98:	mov	r7, #0
   11d9c:	mov	r6, #2
   11da0:	b	11ef4 <__assert_fail@plt+0xb14>
   11da4:	ldrb	r0, [sl]
   11da8:	str	r7, [sp, #28]
   11dac:	mov	r6, #0
   11db0:	mov	r7, #0
   11db4:	mov	r5, #0
   11db8:	cmp	r0, #0
   11dbc:	bne	11ef8 <__assert_fail@plt+0xb18>
   11dc0:	ldr	r5, [r8, #32]
   11dc4:	movw	r1, #38121	; 0x94e9
   11dc8:	mov	r6, #0
   11dcc:	mov	r0, #0
   11dd0:	movt	r1, #1
   11dd4:	b	11ec4 <__assert_fail@plt+0xae4>
   11dd8:	ldrb	r0, [sl]
   11ddc:	str	r7, [sp, #28]
   11de0:	mov	r6, #0
   11de4:	mov	r7, #0
   11de8:	mov	r5, #0
   11dec:	cmp	r0, #0
   11df0:	bne	11ef8 <__assert_fail@plt+0xb18>
   11df4:	movw	r1, #38146	; 0x9502
   11df8:	mov	r0, #0
   11dfc:	mov	r2, #5
   11e00:	mov	r6, #0
   11e04:	movt	r1, #1
   11e08:	bl	11170 <dcgettext@plt>
   11e0c:	ldr	r1, [sp, #28]
   11e10:	mov	r5, r0
   11e14:	mov	r0, #4
   11e18:	bl	17578 <__assert_fail@plt+0x6198>
   11e1c:	mov	r3, r0
   11e20:	mov	r0, #0
   11e24:	mov	r1, #0
   11e28:	mov	r2, r5
   11e2c:	b	11eec <__assert_fail@plt+0xb0c>
   11e30:	ldrb	r0, [sl]
   11e34:	str	r7, [sp, #28]
   11e38:	mov	r6, #0
   11e3c:	mov	r7, #0
   11e40:	mov	r5, #0
   11e44:	cmp	r0, #0
   11e48:	bne	11ef8 <__assert_fail@plt+0xb18>
   11e4c:	ldr	r2, [sp, #28]
   11e50:	ldr	r5, [r8, #32]
   11e54:	mov	r0, #0
   11e58:	mov	r1, #3
   11e5c:	mov	r6, #0
   11e60:	bl	1771c <__assert_fail@plt+0x633c>
   11e64:	movw	r2, #37678	; 0x932e
   11e68:	mov	r3, r0
   11e6c:	mov	r0, #0
   11e70:	mov	r1, r5
   11e74:	movt	r2, #1
   11e78:	b	11eec <__assert_fail@plt+0xb0c>
   11e7c:	ldr	r0, [r8, #48]	; 0x30
   11e80:	cmp	r0, #0
   11e84:	bne	11e94 <__assert_fail@plt+0xab4>
   11e88:	ldr	r0, [r8, #16]
   11e8c:	cmp	r0, #0
   11e90:	beq	12324 <__assert_fail@plt+0xf44>
   11e94:	ldrb	r0, [sl]
   11e98:	str	r7, [sp, #28]
   11e9c:	mov	r6, #0
   11ea0:	mov	r7, #0
   11ea4:	mov	r5, #0
   11ea8:	cmp	r0, #0
   11eac:	bne	11ef8 <__assert_fail@plt+0xb18>
   11eb0:	ldr	r5, [r8, #32]
   11eb4:	movw	r1, #38104	; 0x94d8
   11eb8:	mov	r6, #0
   11ebc:	mov	r0, #0
   11ec0:	movt	r1, #1
   11ec4:	mov	r2, #5
   11ec8:	bl	11170 <dcgettext@plt>
   11ecc:	ldr	r1, [sp, #28]
   11ed0:	mov	r7, r0
   11ed4:	mov	r0, #4
   11ed8:	bl	17578 <__assert_fail@plt+0x6198>
   11edc:	mov	r3, r0
   11ee0:	mov	r0, #0
   11ee4:	mov	r1, r5
   11ee8:	mov	r2, r7
   11eec:	bl	111f4 <error@plt>
   11ef0:	mov	r7, #0
   11ef4:	mov	r5, #0
   11ef8:	movw	r0, #41240	; 0xa118
   11efc:	movt	r0, #2
   11f00:	ldr	r0, [r0]
   11f04:	cmp	r0, #2
   11f08:	beq	12208 <__assert_fail@plt+0xe28>
   11f0c:	cmp	r6, #4
   11f10:	bne	120b4 <__assert_fail@plt+0xcd4>
   11f14:	tst	r5, #3584	; 0xe00
   11f18:	mov	r0, r5
   11f1c:	beq	12054 <__assert_fail@plt+0xc74>
   11f20:	ldr	r0, [sp, #32]
   11f24:	mov	r1, r9
   11f28:	add	r2, sp, #40	; 0x28
   11f2c:	mov	r3, #0
   11f30:	ldr	r0, [r0, #32]
   11f34:	bl	18e58 <__assert_fail@plt+0x7a78>
   11f38:	cmp	r0, #0
   11f3c:	beq	12050 <__assert_fail@plt+0xc70>
   11f40:	ldrb	r0, [sl]
   11f44:	cmp	r0, #0
   11f48:	bne	120b0 <__assert_fail@plt+0xcd0>
   11f4c:	bl	11290 <__errno_location@plt>
   11f50:	movw	r1, #38584	; 0x96b8
   11f54:	ldr	r9, [r0]
   11f58:	mov	r0, #0
   11f5c:	mov	r2, #5
   11f60:	movt	r1, #1
   11f64:	bl	11170 <dcgettext@plt>
   11f68:	ldr	r1, [sp, #28]
   11f6c:	mov	sl, r0
   11f70:	mov	r0, #4
   11f74:	bl	17578 <__assert_fail@plt+0x6198>
   11f78:	mov	r3, r0
   11f7c:	mov	r2, sl
   11f80:	movw	sl, #41353	; 0xa189
   11f84:	mov	r0, #0
   11f88:	mov	r1, r9
   11f8c:	movt	sl, #2
   11f90:	bl	111f4 <error@plt>
   11f94:	b	120b0 <__assert_fail@plt+0xcd0>
   11f98:	movw	r1, #41356	; 0xa18c
   11f9c:	sub	r0, r0, #16384	; 0x4000
   11fa0:	movt	r1, #2
   11fa4:	clz	r0, r0
   11fa8:	ldr	r3, [r1]
   11fac:	movw	r1, #41360	; 0xa190
   11fb0:	movt	r1, #2
   11fb4:	ldr	r2, [r1]
   11fb8:	mov	r1, #0
   11fbc:	str	r1, [sp]
   11fc0:	lsr	r1, r0, #5
   11fc4:	mov	r0, r7
   11fc8:	bl	15d24 <__assert_fail@plt+0x4944>
   11fcc:	mov	r5, r0
   11fd0:	ldr	r0, [sp, #32]
   11fd4:	mov	r1, r9
   11fd8:	mov	r3, #0
   11fdc:	mov	r2, r5
   11fe0:	ldr	r0, [r0, #32]
   11fe4:	bl	12684 <__assert_fail@plt+0x12a4>
   11fe8:	cmp	r0, #0
   11fec:	beq	121bc <__assert_fail@plt+0xddc>
   11ff0:	ldrb	r0, [sl]
   11ff4:	mov	r6, #1
   11ff8:	cmp	r0, #0
   11ffc:	bne	11ef8 <__assert_fail@plt+0xb18>
   12000:	bl	11290 <__errno_location@plt>
   12004:	ldr	r0, [r0]
   12008:	movw	r1, #38522	; 0x967a
   1200c:	mov	r2, #5
   12010:	movt	r1, #1
   12014:	str	r0, [sp, #16]
   12018:	mov	r0, #0
   1201c:	bl	11170 <dcgettext@plt>
   12020:	ldr	r1, [sp, #28]
   12024:	mov	sl, r0
   12028:	mov	r0, #4
   1202c:	bl	17578 <__assert_fail@plt+0x6198>
   12030:	ldr	r1, [sp, #16]
   12034:	mov	r3, r0
   12038:	mov	r2, sl
   1203c:	movw	sl, #41353	; 0xa189
   12040:	mov	r0, #0
   12044:	movt	sl, #2
   12048:	bl	111f4 <error@plt>
   1204c:	b	11ef8 <__assert_fail@plt+0xb18>
   12050:	ldr	r0, [sp, #56]	; 0x38
   12054:	eor	r0, r0, r7
   12058:	movw	r1, #4095	; 0xfff
   1205c:	tst	r0, r1
   12060:	beq	120b0 <__assert_fail@plt+0xcd0>
   12064:	ldr	r1, [sp, #28]
   12068:	mov	r0, #4
   1206c:	mov	r6, #4
   12070:	bl	17578 <__assert_fail@plt+0x6198>
   12074:	mov	r9, r0
   12078:	mov	r0, r5
   1207c:	add	r1, sp, #40	; 0x28
   12080:	bl	127b4 <__assert_fail@plt+0x13d4>
   12084:	mov	sl, #0
   12088:	mov	r0, r7
   1208c:	sub	r1, fp, #40	; 0x28
   12090:	strb	sl, [sp, #50]	; 0x32
   12094:	bl	127b4 <__assert_fail@plt+0x13d4>
   12098:	movw	r1, #38695	; 0x9727
   1209c:	strb	sl, [fp, #-30]	; 0xffffffe2
   120a0:	mov	sl, r5
   120a4:	bfc	sl, #12, #20
   120a8:	movt	r1, #1
   120ac:	b	121cc <__assert_fail@plt+0xdec>
   120b0:	mov	r6, #3
   120b4:	cmp	r6, #4
   120b8:	beq	120d0 <__assert_fail@plt+0xcf0>
   120bc:	movw	r0, #41240	; 0xa118
   120c0:	movt	r0, #2
   120c4:	ldr	r0, [r0]
   120c8:	cmp	r0, #0
   120cc:	bne	12208 <__assert_fail@plt+0xe28>
   120d0:	ldr	r1, [sp, #28]
   120d4:	mov	r0, #4
   120d8:	bl	17578 <__assert_fail@plt+0x6198>
   120dc:	mov	r9, r0
   120e0:	cmp	r6, #0
   120e4:	beq	1211c <__assert_fail@plt+0xd3c>
   120e8:	cmp	r6, #2
   120ec:	bne	12148 <__assert_fail@plt+0xd68>
   120f0:	movw	r1, #38613	; 0x96d5
   120f4:	mov	r0, #0
   120f8:	mov	r2, #5
   120fc:	movt	r1, #1
   12100:	bl	11170 <dcgettext@plt>
   12104:	mov	r1, r0
   12108:	mov	r0, #1
   1210c:	mov	r2, r9
   12110:	bl	112c0 <__printf_chk@plt>
   12114:	mov	r6, #2
   12118:	b	12208 <__assert_fail@plt+0xe28>
   1211c:	movw	r1, #38669	; 0x970d
   12120:	mov	r0, #0
   12124:	mov	r2, #5
   12128:	mov	r6, #0
   1212c:	movt	r1, #1
   12130:	bl	11170 <dcgettext@plt>
   12134:	mov	r1, r0
   12138:	mov	r0, #1
   1213c:	mov	r2, r9
   12140:	bl	112c0 <__printf_chk@plt>
   12144:	b	12208 <__assert_fail@plt+0xe28>
   12148:	mov	r0, r5
   1214c:	add	r1, sp, #40	; 0x28
   12150:	bl	127b4 <__assert_fail@plt+0x13d4>
   12154:	mov	sl, #0
   12158:	mov	r0, r7
   1215c:	sub	r1, fp, #40	; 0x28
   12160:	strb	sl, [sp, #50]	; 0x32
   12164:	bl	127b4 <__assert_fail@plt+0x13d4>
   12168:	strb	sl, [fp, #-30]	; 0xffffffe2
   1216c:	mov	sl, r5
   12170:	cmp	r6, #1
   12174:	bfc	sl, #12, #20
   12178:	beq	121c4 <__assert_fail@plt+0xde4>
   1217c:	cmp	r6, #3
   12180:	bne	124c4 <__assert_fail@plt+0x10e4>
   12184:	movw	r1, #38804	; 0x9794
   12188:	mov	r0, #0
   1218c:	mov	r2, #5
   12190:	movt	r1, #1
   12194:	bl	11170 <dcgettext@plt>
   12198:	mov	r1, r0
   1219c:	ldr	r0, [sp, #24]
   121a0:	mov	r2, r9
   121a4:	mov	r3, sl
   121a8:	str	r0, [sp]
   121ac:	mov	r0, #1
   121b0:	bl	112c0 <__printf_chk@plt>
   121b4:	mov	r6, #3
   121b8:	b	12200 <__assert_fail@plt+0xe20>
   121bc:	mov	r6, #4
   121c0:	b	11ef8 <__assert_fail@plt+0xb18>
   121c4:	movw	r1, #38745	; 0x9759
   121c8:	movt	r1, #1
   121cc:	mov	r0, #0
   121d0:	mov	r2, #5
   121d4:	bl	11170 <dcgettext@plt>
   121d8:	mov	r1, r0
   121dc:	ldr	r0, [sp, #20]
   121e0:	mov	r3, r7
   121e4:	mov	r2, r9
   121e8:	bfc	r3, #12, #20
   121ec:	stm	sp, {r0, sl}
   121f0:	ldr	r0, [sp, #24]
   121f4:	str	r0, [sp, #8]
   121f8:	mov	r0, #1
   121fc:	bl	112c0 <__printf_chk@plt>
   12200:	movw	sl, #41353	; 0xa189
   12204:	movt	sl, #2
   12208:	cmp	r6, #3
   1220c:	bcc	122d8 <__assert_fail@plt+0xef8>
   12210:	movw	r0, #41352	; 0xa188
   12214:	movt	r0, #2
   12218:	ldrb	r0, [r0]
   1221c:	cmp	r0, #1
   12220:	bne	122d8 <__assert_fail@plt+0xef8>
   12224:	movw	r0, #41356	; 0xa18c
   12228:	mov	r2, #0
   1222c:	movt	r0, #2
   12230:	ldr	r3, [r0]
   12234:	mov	r0, #0
   12238:	str	r0, [sp]
   1223c:	and	r0, r7, #61440	; 0xf000
   12240:	sub	r0, r0, #16384	; 0x4000
   12244:	clz	r0, r0
   12248:	lsr	r1, r0, #5
   1224c:	mov	r0, r7
   12250:	bl	15d24 <__assert_fail@plt+0x4944>
   12254:	mov	r7, r0
   12258:	mvn	r0, r0
   1225c:	tst	r5, r0
   12260:	beq	122d8 <__assert_fail@plt+0xef8>
   12264:	mov	r0, r5
   12268:	add	r1, sp, #40	; 0x28
   1226c:	bl	127b4 <__assert_fail@plt+0x13d4>
   12270:	mov	r0, r7
   12274:	sub	r1, fp, #40	; 0x28
   12278:	bl	127b4 <__assert_fail@plt+0x13d4>
   1227c:	movw	r1, #38549	; 0x9695
   12280:	mov	r0, #0
   12284:	mov	r2, #5
   12288:	movt	r1, #1
   1228c:	strb	r0, [sp, #50]	; 0x32
   12290:	strb	r0, [fp, #-30]	; 0xffffffe2
   12294:	mov	r0, #0
   12298:	bl	11170 <dcgettext@plt>
   1229c:	ldr	r2, [sp, #28]
   122a0:	mov	r5, r0
   122a4:	mov	r0, #0
   122a8:	mov	r1, #3
   122ac:	bl	1771c <__assert_fail@plt+0x633c>
   122b0:	mov	r3, r0
   122b4:	ldr	r0, [sp, #24]
   122b8:	mov	r1, #0
   122bc:	mov	r2, r5
   122c0:	str	r0, [sp]
   122c4:	ldr	r0, [sp, #20]
   122c8:	str	r0, [sp, #4]
   122cc:	mov	r0, #0
   122d0:	bl	111f4 <error@plt>
   122d4:	mov	r6, #1
   122d8:	movw	r0, #41354	; 0xa18a
   122dc:	movt	r0, #2
   122e0:	ldrb	r0, [r0]
   122e4:	cmp	r0, #0
   122e8:	bne	122fc <__assert_fail@plt+0xf1c>
   122ec:	ldr	r0, [sp, #32]
   122f0:	mov	r1, r8
   122f4:	mov	r2, #4
   122f8:	bl	145c0 <__assert_fail@plt+0x31e0>
   122fc:	cmp	r6, #1
   12300:	mov	r6, #0
   12304:	movwhi	r6, #1
   12308:	ldr	r0, [sp, #32]
   1230c:	and	r4, r4, r6
   12310:	bl	131e8 <__assert_fail@plt+0x1e08>
   12314:	mov	r8, r0
   12318:	cmp	r0, #0
   1231c:	bne	11c10 <__assert_fail@plt+0x830>
   12320:	b	123c4 <__assert_fail@plt+0xfe4>
   12324:	ldr	r0, [sp, #32]
   12328:	mov	r6, #1
   1232c:	mov	r1, r8
   12330:	mov	r2, #1
   12334:	str	r6, [r8, #16]
   12338:	bl	145c0 <__assert_fail@plt+0x31e0>
   1233c:	b	12308 <__assert_fail@plt+0xf28>
   12340:	movw	r1, #38370	; 0x95e2
   12344:	mov	r0, #0
   12348:	mov	r2, #5
   1234c:	movt	r1, #1
   12350:	bl	11170 <dcgettext@plt>
   12354:	mov	r5, r0
   12358:	mov	r0, #4
   1235c:	mov	r1, r7
   12360:	bl	17578 <__assert_fail@plt+0x6198>
   12364:	mov	r3, r0
   12368:	mov	r0, #0
   1236c:	mov	r1, #0
   12370:	mov	r2, r5
   12374:	bl	111f4 <error@plt>
   12378:	movw	r1, #38473	; 0x9649
   1237c:	mov	r0, #0
   12380:	mov	r2, #5
   12384:	mov	r6, #0
   12388:	movt	r1, #1
   1238c:	bl	11170 <dcgettext@plt>
   12390:	mov	r2, r0
   12394:	mov	r0, #0
   12398:	mov	r1, #0
   1239c:	bl	111f4 <error@plt>
   123a0:	ldr	r5, [sp, #32]
   123a4:	mov	r1, r8
   123a8:	mov	r2, #4
   123ac:	mov	r0, r5
   123b0:	bl	145c0 <__assert_fail@plt+0x31e0>
   123b4:	mov	r0, r5
   123b8:	bl	131e8 <__assert_fail@plt+0x1e08>
   123bc:	b	12308 <__assert_fail@plt+0xf28>
   123c0:	mov	r4, #1
   123c4:	bl	11290 <__errno_location@plt>
   123c8:	ldr	r6, [r0]
   123cc:	mov	r5, r0
   123d0:	cmp	r6, #0
   123d4:	beq	12410 <__assert_fail@plt+0x1030>
   123d8:	ldrb	r0, [sl]
   123dc:	mov	r4, #0
   123e0:	cmp	r0, #0
   123e4:	bne	12410 <__assert_fail@plt+0x1030>
   123e8:	movw	r1, #38071	; 0x94b7
   123ec:	mov	r0, #0
   123f0:	mov	r2, #5
   123f4:	mov	r4, #0
   123f8:	movt	r1, #1
   123fc:	bl	11170 <dcgettext@plt>
   12400:	mov	r2, r0
   12404:	mov	r0, #0
   12408:	mov	r1, r6
   1240c:	bl	111f4 <error@plt>
   12410:	ldr	r0, [sp, #32]
   12414:	bl	13060 <__assert_fail@plt+0x1c80>
   12418:	cmp	r0, #0
   1241c:	beq	1244c <__assert_fail@plt+0x106c>
   12420:	movw	r1, #38087	; 0x94c7
   12424:	ldr	r5, [r5]
   12428:	mov	r0, #0
   1242c:	mov	r2, #5
   12430:	mov	r4, #0
   12434:	movt	r1, #1
   12438:	bl	11170 <dcgettext@plt>
   1243c:	mov	r2, r0
   12440:	mov	r0, #0
   12444:	mov	r1, r5
   12448:	bl	111f4 <error@plt>
   1244c:	eor	r0, r4, #1
   12450:	sub	sp, fp, #28
   12454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12458:	cmn	r0, #3
   1245c:	bne	124b4 <__assert_fail@plt+0x10d4>
   12460:	movw	r0, #41244	; 0xa11c
   12464:	movw	r2, #37535	; 0x929f
   12468:	mov	r1, #0
   1246c:	movw	r7, #37519	; 0x928f
   12470:	movt	r0, #2
   12474:	movt	r2, #1
   12478:	str	r1, [sp, #8]
   1247c:	movw	r1, #37407	; 0x921f
   12480:	movt	r7, #1
   12484:	movt	r1, #1
   12488:	ldr	r3, [r0]
   1248c:	movw	r0, #41340	; 0xa17c
   12490:	str	r2, [sp, #4]
   12494:	movw	r2, #37505	; 0x9281
   12498:	str	r7, [sp]
   1249c:	movt	r0, #2
   124a0:	movt	r2, #1
   124a4:	ldr	r0, [r0]
   124a8:	bl	17e48 <__assert_fail@plt+0x6a68>
   124ac:	mov	r0, #0
   124b0:	bl	11254 <exit@plt>
   124b4:	cmn	r0, #2
   124b8:	bne	12574 <__assert_fail@plt+0x1194>
   124bc:	mov	r0, #0
   124c0:	bl	114e0 <__assert_fail@plt+0x100>
   124c4:	bl	113b0 <abort@plt>
   124c8:	cmp	r4, #0
   124cc:	beq	12518 <__assert_fail@plt+0x1138>
   124d0:	add	r0, r5, r0, lsl #2
   124d4:	ldr	r0, [r0, #-4]
   124d8:	cmp	r4, r0
   124dc:	bne	12518 <__assert_fail@plt+0x1138>
   124e0:	movw	r1, #37608	; 0x92e8
   124e4:	mov	r0, #0
   124e8:	mov	r2, #5
   124ec:	movt	r1, #1
   124f0:	bl	11170 <dcgettext@plt>
   124f4:	mov	r6, r0
   124f8:	add	r0, r5, r7, lsl #2
   124fc:	ldr	r0, [r0, #-4]
   12500:	bl	178b0 <__assert_fail@plt+0x64d0>
   12504:	mov	r3, r0
   12508:	mov	r0, #0
   1250c:	mov	r1, #0
   12510:	mov	r2, r6
   12514:	b	12570 <__assert_fail@plt+0x1190>
   12518:	movw	r1, #37592	; 0x92d8
   1251c:	movt	r1, #1
   12520:	mov	r0, #0
   12524:	mov	r2, #5
   12528:	bl	11170 <dcgettext@plt>
   1252c:	mov	r2, r0
   12530:	mov	r0, #0
   12534:	mov	r1, #0
   12538:	bl	111f4 <error@plt>
   1253c:	b	12574 <__assert_fail@plt+0x1194>
   12540:	movw	r1, #37664	; 0x9320
   12544:	mov	r0, #0
   12548:	mov	r2, #5
   1254c:	movt	r1, #1
   12550:	bl	11170 <dcgettext@plt>
   12554:	mov	r5, r0
   12558:	mov	r0, r4
   1255c:	bl	178b0 <__assert_fail@plt+0x64d0>
   12560:	mov	r3, r0
   12564:	mov	r0, #0
   12568:	mov	r1, #0
   1256c:	mov	r2, r5
   12570:	bl	111f4 <error@plt>
   12574:	mov	r0, #1
   12578:	bl	114e0 <__assert_fail@plt+0x100>
   1257c:	movw	r1, #41388	; 0xa1ac
   12580:	movt	r1, #2
   12584:	str	r0, [r1]
   12588:	bx	lr
   1258c:	movw	r1, #41392	; 0xa1b0
   12590:	movt	r1, #2
   12594:	strb	r0, [r1]
   12598:	bx	lr
   1259c:	push	{r4, r5, r6, sl, fp, lr}
   125a0:	add	fp, sp, #16
   125a4:	sub	sp, sp, #8
   125a8:	movw	r0, #41340	; 0xa17c
   125ac:	movt	r0, #2
   125b0:	ldr	r0, [r0]
   125b4:	bl	18510 <__assert_fail@plt+0x7130>
   125b8:	cmp	r0, #0
   125bc:	beq	125e4 <__assert_fail@plt+0x1204>
   125c0:	movw	r0, #41392	; 0xa1b0
   125c4:	movt	r0, #2
   125c8:	ldrb	r0, [r0]
   125cc:	cmp	r0, #0
   125d0:	beq	12604 <__assert_fail@plt+0x1224>
   125d4:	bl	11290 <__errno_location@plt>
   125d8:	ldr	r0, [r0]
   125dc:	cmp	r0, #32
   125e0:	bne	12604 <__assert_fail@plt+0x1224>
   125e4:	movw	r0, #41336	; 0xa178
   125e8:	movt	r0, #2
   125ec:	ldr	r0, [r0]
   125f0:	bl	18510 <__assert_fail@plt+0x7130>
   125f4:	cmp	r0, #0
   125f8:	subeq	sp, fp, #16
   125fc:	popeq	{r4, r5, r6, sl, fp, pc}
   12600:	b	12674 <__assert_fail@plt+0x1294>
   12604:	movw	r1, #39087	; 0x98af
   12608:	mov	r0, #0
   1260c:	mov	r2, #5
   12610:	movt	r1, #1
   12614:	bl	11170 <dcgettext@plt>
   12618:	mov	r4, r0
   1261c:	movw	r0, #41388	; 0xa1ac
   12620:	movt	r0, #2
   12624:	ldr	r6, [r0]
   12628:	bl	11290 <__errno_location@plt>
   1262c:	ldr	r5, [r0]
   12630:	cmp	r6, #0
   12634:	bne	12650 <__assert_fail@plt+0x1270>
   12638:	movw	r2, #37678	; 0x932e
   1263c:	mov	r0, #0
   12640:	mov	r1, r5
   12644:	mov	r3, r4
   12648:	movt	r2, #1
   1264c:	b	12670 <__assert_fail@plt+0x1290>
   12650:	mov	r0, r6
   12654:	bl	17670 <__assert_fail@plt+0x6290>
   12658:	movw	r2, #39099	; 0x98bb
   1265c:	mov	r3, r0
   12660:	str	r4, [sp]
   12664:	mov	r0, #0
   12668:	mov	r1, r5
   1266c:	movt	r2, #1
   12670:	bl	111f4 <error@plt>
   12674:	movw	r0, #41248	; 0xa120
   12678:	movt	r0, #2
   1267c:	ldr	r0, [r0]
   12680:	bl	1114c <_exit@plt>
   12684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12688:	add	fp, sp, #28
   1268c:	sub	sp, sp, #140	; 0x8c
   12690:	mov	r8, r2
   12694:	mov	r5, r1
   12698:	mov	r6, r0
   1269c:	cmp	r3, #256	; 0x100
   126a0:	bne	1278c <__assert_fail@plt+0x13ac>
   126a4:	mov	r0, r6
   126a8:	mov	r1, r5
   126ac:	mov	r2, #2654208	; 0x288000
   126b0:	bl	11278 <openat64@plt>
   126b4:	mov	r4, r0
   126b8:	cmp	r0, #0
   126bc:	bmi	12700 <__assert_fail@plt+0x1320>
   126c0:	movw	r1, #36770	; 0x8fa2
   126c4:	add	r2, sp, #32
   126c8:	mov	r0, r4
   126cc:	mov	r3, #4096	; 0x1000
   126d0:	movt	r1, #1
   126d4:	bl	18e58 <__assert_fail@plt+0x7a78>
   126d8:	cmp	r0, #0
   126dc:	beq	12708 <__assert_fail@plt+0x1328>
   126e0:	bl	11290 <__errno_location@plt>
   126e4:	ldr	r6, [r0]
   126e8:	mov	r5, r0
   126ec:	mov	r0, r4
   126f0:	bl	113bc <close@plt>
   126f4:	str	r6, [r5]
   126f8:	mvn	r7, #0
   126fc:	b	127a0 <__assert_fail@plt+0x13c0>
   12700:	mov	r7, r4
   12704:	b	127a0 <__assert_fail@plt+0x13c0>
   12708:	ldr	r0, [sp, #48]	; 0x30
   1270c:	and	r0, r0, #61440	; 0xf000
   12710:	cmp	r0, #40960	; 0xa000
   12714:	bne	12734 <__assert_fail@plt+0x1354>
   12718:	mov	r0, r4
   1271c:	bl	113bc <close@plt>
   12720:	bl	11290 <__errno_location@plt>
   12724:	mov	r1, #95	; 0x5f
   12728:	mvn	r7, #0
   1272c:	str	r1, [r0]
   12730:	b	127a0 <__assert_fail@plt+0x13c0>
   12734:	movw	r3, #39106	; 0x98c2
   12738:	add	r7, sp, #6
   1273c:	mov	r1, #1
   12740:	mov	r2, #26
   12744:	str	r4, [sp]
   12748:	movt	r3, #1
   1274c:	mov	r0, r7
   12750:	bl	1129c <__sprintf_chk@plt>
   12754:	mov	r0, r7
   12758:	mov	r1, r8
   1275c:	bl	11380 <chmod@plt>
   12760:	mov	r7, r0
   12764:	bl	11290 <__errno_location@plt>
   12768:	ldr	sl, [r0]
   1276c:	mov	r9, r0
   12770:	mov	r0, r4
   12774:	bl	113bc <close@plt>
   12778:	cmp	r7, #0
   1277c:	beq	127a0 <__assert_fail@plt+0x13c0>
   12780:	cmp	sl, #2
   12784:	bne	127ac <__assert_fail@plt+0x13cc>
   12788:	mov	r3, #0
   1278c:	mov	r0, r6
   12790:	mov	r1, r5
   12794:	mov	r2, r8
   12798:	bl	11284 <fchmodat@plt>
   1279c:	mov	r7, r0
   127a0:	mov	r0, r7
   127a4:	sub	sp, fp, #28
   127a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127ac:	str	sl, [r9]
   127b0:	b	127a0 <__assert_fail@plt+0x13c0>
   127b4:	push	{fp, lr}
   127b8:	mov	fp, sp
   127bc:	and	r2, r0, #61440	; 0xf000
   127c0:	sub	r2, r2, #4096	; 0x1000
   127c4:	lsr	r3, r2, #12
   127c8:	cmp	r3, #11
   127cc:	bhi	1281c <__assert_fail@plt+0x143c>
   127d0:	add	r2, pc, #4
   127d4:	mov	ip, #45	; 0x2d
   127d8:	ldr	pc, [r2, r3, lsl #2]
   127dc:	andeq	r2, r1, ip, lsl #16
   127e0:	andeq	r2, r1, r4, lsl r8
   127e4:	andeq	r2, r1, ip, lsl r8
   127e8:	andeq	r2, r1, r4, lsr #16
   127ec:	andeq	r2, r1, ip, lsl r8
   127f0:	andeq	r2, r1, ip, lsr r8
   127f4:	andeq	r2, r1, ip, lsl r8
   127f8:	andeq	r2, r1, r0, asr #16
   127fc:	andeq	r2, r1, ip, lsl r8
   12800:	andeq	r2, r1, ip, lsr #16
   12804:	andeq	r2, r1, ip, lsl r8
   12808:	andeq	r2, r1, r4, lsr r8
   1280c:	mov	ip, #112	; 0x70
   12810:	b	12840 <__assert_fail@plt+0x1460>
   12814:	mov	ip, #99	; 0x63
   12818:	b	12840 <__assert_fail@plt+0x1460>
   1281c:	mov	ip, #63	; 0x3f
   12820:	b	12840 <__assert_fail@plt+0x1460>
   12824:	mov	ip, #100	; 0x64
   12828:	b	12840 <__assert_fail@plt+0x1460>
   1282c:	mov	ip, #108	; 0x6c
   12830:	b	12840 <__assert_fail@plt+0x1460>
   12834:	mov	ip, #115	; 0x73
   12838:	b	12840 <__assert_fail@plt+0x1460>
   1283c:	mov	ip, #98	; 0x62
   12840:	tst	r0, #2
   12844:	mov	r3, #119	; 0x77
   12848:	mov	r2, #32
   1284c:	mov	lr, #45	; 0x2d
   12850:	movweq	r3, #45	; 0x2d
   12854:	tst	r0, #4
   12858:	strh	r2, [r1, #10]
   1285c:	mov	r2, #114	; 0x72
   12860:	strb	ip, [r1]
   12864:	mov	ip, #119	; 0x77
   12868:	movweq	r2, #45	; 0x2d
   1286c:	tst	r0, #16
   12870:	strb	r3, [r1, #8]
   12874:	mov	r3, #114	; 0x72
   12878:	strb	r2, [r1, #7]
   1287c:	mov	r2, #119	; 0x77
   12880:	movweq	r2, #45	; 0x2d
   12884:	tst	r0, #32
   12888:	strb	r2, [r1, #5]
   1288c:	mov	r2, #114	; 0x72
   12890:	movweq	r2, #45	; 0x2d
   12894:	tst	r0, #128	; 0x80
   12898:	movweq	ip, #45	; 0x2d
   1289c:	tst	r0, #256	; 0x100
   128a0:	strb	r2, [r1, #4]
   128a4:	movweq	r3, #45	; 0x2d
   128a8:	ands	r2, r0, #1
   128ac:	strb	ip, [r1, #2]
   128b0:	mov	r2, #84	; 0x54
   128b4:	mov	ip, #45	; 0x2d
   128b8:	strb	r3, [r1, #1]
   128bc:	mov	r3, #45	; 0x2d
   128c0:	movwne	r3, #120	; 0x78
   128c4:	movwne	r2, #116	; 0x74
   128c8:	tst	r0, #512	; 0x200
   128cc:	moveq	r2, r3
   128d0:	mov	r3, #83	; 0x53
   128d4:	strb	r2, [r1, #9]
   128d8:	ands	r2, r0, #8
   128dc:	mov	r2, #83	; 0x53
   128e0:	movwne	lr, #120	; 0x78
   128e4:	movwne	r2, #115	; 0x73
   128e8:	tst	r0, #1024	; 0x400
   128ec:	moveq	r2, lr
   128f0:	strb	r2, [r1, #6]
   128f4:	ands	r2, r0, #64	; 0x40
   128f8:	movwne	ip, #120	; 0x78
   128fc:	movwne	r3, #115	; 0x73
   12900:	tst	r0, #2048	; 0x800
   12904:	moveq	r3, ip
   12908:	strb	r3, [r1, #3]
   1290c:	pop	{fp, pc}
   12910:	ldr	r0, [r0, #16]
   12914:	b	127b4 <__assert_fail@plt+0x13d4>
   12918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1291c:	add	fp, sp, #28
   12920:	sub	sp, sp, #12
   12924:	cmp	r1, #4096	; 0x1000
   12928:	bcs	12944 <__assert_fail@plt+0x1564>
   1292c:	mov	r6, r0
   12930:	and	r0, r1, #516	; 0x204
   12934:	mov	r5, r1
   12938:	cmp	r0, #516	; 0x204
   1293c:	tstne	r5, #18
   12940:	bne	12960 <__assert_fail@plt+0x1580>
   12944:	bl	11290 <__errno_location@plt>
   12948:	mov	r1, #22
   1294c:	str	r1, [r0]
   12950:	mov	r8, #0
   12954:	mov	r0, r8
   12958:	sub	sp, fp, #28
   1295c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12960:	mov	r0, #1
   12964:	mov	r1, #96	; 0x60
   12968:	mov	r9, r2
   1296c:	bl	1843c <__assert_fail@plt+0x705c>
   12970:	cmp	r0, #0
   12974:	beq	12950 <__assert_fail@plt+0x1570>
   12978:	mov	r8, r0
   1297c:	mvn	r0, #99	; 0x63
   12980:	tst	r5, #2
   12984:	mov	r1, r5
   12988:	str	r0, [r8, #32]
   1298c:	bic	r0, r5, #516	; 0x204
   12990:	str	r9, [r8, #44]	; 0x2c
   12994:	orrne	r1, r0, #4
   12998:	str	r1, [r8, #48]	; 0x30
   1299c:	ldr	r0, [r6]
   129a0:	cmp	r0, #0
   129a4:	beq	129d8 <__assert_fail@plt+0x15f8>
   129a8:	add	r4, r6, #4
   129ac:	mov	r7, #0
   129b0:	bl	1126c <strlen@plt>
   129b4:	cmp	r0, r7
   129b8:	movhi	r7, r0
   129bc:	ldr	r0, [r4], #4
   129c0:	cmp	r0, #0
   129c4:	bne	129b0 <__assert_fail@plt+0x15d0>
   129c8:	add	r1, r7, #1
   129cc:	cmp	r1, #4096	; 0x1000
   129d0:	movls	r1, #4096	; 0x1000
   129d4:	b	129dc <__assert_fail@plt+0x15fc>
   129d8:	mov	r1, #4096	; 0x1000
   129dc:	mov	r0, r8
   129e0:	bl	12c40 <__assert_fail@plt+0x1860>
   129e4:	cmp	r0, #0
   129e8:	beq	12c34 <__assert_fail@plt+0x1854>
   129ec:	ldr	r0, [r6]
   129f0:	cmp	r0, #0
   129f4:	beq	12a24 <__assert_fail@plt+0x1644>
   129f8:	movw	r1, #36770	; 0x8fa2
   129fc:	mov	r0, r8
   12a00:	mov	r2, #0
   12a04:	movt	r1, #1
   12a08:	bl	12cb4 <__assert_fail@plt+0x18d4>
   12a0c:	cmp	r0, #0
   12a10:	beq	12c2c <__assert_fail@plt+0x184c>
   12a14:	mov	r4, r0
   12a18:	mvn	r0, #0
   12a1c:	str	r0, [r4, #48]	; 0x30
   12a20:	b	12a28 <__assert_fail@plt+0x1648>
   12a24:	mov	r4, #0
   12a28:	cmp	r9, #0
   12a2c:	beq	12a3c <__assert_fail@plt+0x165c>
   12a30:	ldrb	r0, [r8, #49]	; 0x31
   12a34:	ubfx	r0, r0, #2, #1
   12a38:	b	12a40 <__assert_fail@plt+0x1660>
   12a3c:	mov	r0, #1
   12a40:	ldr	r7, [r6]
   12a44:	cmp	r7, #0
   12a48:	beq	12b68 <__assert_fail@plt+0x1788>
   12a4c:	eor	r0, r0, #1
   12a50:	and	r1, r5, #2048	; 0x800
   12a54:	mov	sl, #0
   12a58:	mov	r5, #0
   12a5c:	str	r0, [sp, #4]
   12a60:	mov	r0, #0
   12a64:	str	r1, [sp, #8]
   12a68:	str	r0, [sp]
   12a6c:	mov	r0, r7
   12a70:	bl	1126c <strlen@plt>
   12a74:	mov	r2, r0
   12a78:	ldr	r0, [sp, #8]
   12a7c:	cmp	r0, #0
   12a80:	bne	12ab8 <__assert_fail@plt+0x16d8>
   12a84:	cmp	r2, #3
   12a88:	bcc	12ab8 <__assert_fail@plt+0x16d8>
   12a8c:	add	r0, r2, r7
   12a90:	ldrb	r0, [r0, #-1]
   12a94:	cmp	r0, #47	; 0x2f
   12a98:	bne	12ab8 <__assert_fail@plt+0x16d8>
   12a9c:	sub	r0, r7, #2
   12aa0:	ldrb	r1, [r0, r2]
   12aa4:	cmp	r1, #47	; 0x2f
   12aa8:	bne	12ab8 <__assert_fail@plt+0x16d8>
   12aac:	sub	r2, r2, #1
   12ab0:	cmp	r2, #1
   12ab4:	bhi	12aa0 <__assert_fail@plt+0x16c0>
   12ab8:	mov	r0, r8
   12abc:	mov	r1, r7
   12ac0:	bl	12cb4 <__assert_fail@plt+0x18d4>
   12ac4:	cmp	r0, #0
   12ac8:	beq	12c1c <__assert_fail@plt+0x183c>
   12acc:	mov	r1, #0
   12ad0:	ldr	r2, [sp, #4]
   12ad4:	str	r4, [r0, #4]
   12ad8:	mov	r7, r0
   12adc:	str	r1, [r0, #48]	; 0x30
   12ae0:	add	r0, r0, #168	; 0xa8
   12ae4:	str	r0, [r7, #24]
   12ae8:	clz	r0, sl
   12aec:	lsr	r0, r0, #5
   12af0:	orrs	r0, r2, r0
   12af4:	bne	12b08 <__assert_fail@plt+0x1728>
   12af8:	mov	r0, #2
   12afc:	strd	r0, [r7, #112]	; 0x70
   12b00:	mov	r0, #11
   12b04:	b	12b1c <__assert_fail@plt+0x173c>
   12b08:	mov	r0, r8
   12b0c:	mov	r1, r7
   12b10:	mov	r2, #0
   12b14:	bl	12d34 <__assert_fail@plt+0x1954>
   12b18:	mov	r1, #0
   12b1c:	cmp	r9, #0
   12b20:	strh	r0, [r7, #56]	; 0x38
   12b24:	beq	12b34 <__assert_fail@plt+0x1754>
   12b28:	str	sl, [r7, #8]
   12b2c:	mov	sl, r7
   12b30:	b	12b4c <__assert_fail@plt+0x176c>
   12b34:	cmp	sl, #0
   12b38:	str	r1, [r7, #8]
   12b3c:	beq	12b60 <__assert_fail@plt+0x1780>
   12b40:	ldr	r0, [sp]
   12b44:	str	r7, [sp]
   12b48:	str	r7, [r0, #8]
   12b4c:	ldr	r7, [r6, #4]!
   12b50:	add	r5, r5, #1
   12b54:	cmp	r7, #0
   12b58:	bne	12a6c <__assert_fail@plt+0x168c>
   12b5c:	b	12b70 <__assert_fail@plt+0x1790>
   12b60:	str	r7, [sp]
   12b64:	b	12b2c <__assert_fail@plt+0x174c>
   12b68:	mov	sl, #0
   12b6c:	b	12b94 <__assert_fail@plt+0x17b4>
   12b70:	cmp	r9, #0
   12b74:	beq	12b94 <__assert_fail@plt+0x17b4>
   12b78:	cmp	r5, #2
   12b7c:	bcc	12b94 <__assert_fail@plt+0x17b4>
   12b80:	mov	r0, r8
   12b84:	mov	r1, sl
   12b88:	mov	r2, r5
   12b8c:	bl	12e70 <__assert_fail@plt+0x1a90>
   12b90:	mov	sl, r0
   12b94:	movw	r1, #36770	; 0x8fa2
   12b98:	mov	r0, r8
   12b9c:	mov	r2, #0
   12ba0:	movt	r1, #1
   12ba4:	bl	12cb4 <__assert_fail@plt+0x18d4>
   12ba8:	cmp	r0, #0
   12bac:	str	r0, [r8]
   12bb0:	beq	12c1c <__assert_fail@plt+0x183c>
   12bb4:	mov	r1, #9
   12bb8:	strh	r1, [r0, #56]	; 0x38
   12bbc:	mov	r1, #1
   12bc0:	str	sl, [r0, #8]
   12bc4:	str	r1, [r0, #48]	; 0x30
   12bc8:	mov	r0, r8
   12bcc:	bl	12f64 <__assert_fail@plt+0x1b84>
   12bd0:	cmp	r0, #0
   12bd4:	beq	12c1c <__assert_fail@plt+0x183c>
   12bd8:	ldrh	r0, [r8, #48]	; 0x30
   12bdc:	tst	r0, #516	; 0x204
   12be0:	bne	12c0c <__assert_fail@plt+0x182c>
   12be4:	movw	r1, #39124	; 0x98d4
   12be8:	mov	r0, r8
   12bec:	movt	r1, #1
   12bf0:	bl	12ff0 <__assert_fail@plt+0x1c10>
   12bf4:	cmn	r0, #1
   12bf8:	str	r0, [r8, #28]
   12bfc:	bgt	12c0c <__assert_fail@plt+0x182c>
   12c00:	ldr	r0, [r8, #48]	; 0x30
   12c04:	orr	r0, r0, #4
   12c08:	str	r0, [r8, #48]	; 0x30
   12c0c:	add	r0, r8, #60	; 0x3c
   12c10:	mvn	r1, #0
   12c14:	bl	158b4 <__assert_fail@plt+0x44d4>
   12c18:	b	12954 <__assert_fail@plt+0x1574>
   12c1c:	mov	r0, sl
   12c20:	bl	13020 <__assert_fail@plt+0x1c40>
   12c24:	mov	r0, r4
   12c28:	bl	18988 <__assert_fail@plt+0x75a8>
   12c2c:	ldr	r0, [r8, #24]
   12c30:	bl	18988 <__assert_fail@plt+0x75a8>
   12c34:	mov	r0, r8
   12c38:	bl	18988 <__assert_fail@plt+0x75a8>
   12c3c:	b	12950 <__assert_fail@plt+0x1570>
   12c40:	push	{r4, r5, fp, lr}
   12c44:	add	fp, sp, #8
   12c48:	mov	r4, r0
   12c4c:	ldr	r0, [r0, #36]	; 0x24
   12c50:	add	r1, r1, #256	; 0x100
   12c54:	adds	r1, r1, r0
   12c58:	bcc	12c7c <__assert_fail@plt+0x189c>
   12c5c:	ldr	r0, [r4, #24]
   12c60:	bl	18988 <__assert_fail@plt+0x75a8>
   12c64:	mov	r5, #0
   12c68:	str	r5, [r4, #24]
   12c6c:	bl	11290 <__errno_location@plt>
   12c70:	mov	r1, #36	; 0x24
   12c74:	str	r1, [r0]
   12c78:	b	12cac <__assert_fail@plt+0x18cc>
   12c7c:	str	r1, [r4, #36]	; 0x24
   12c80:	ldr	r0, [r4, #24]
   12c84:	bl	184c0 <__assert_fail@plt+0x70e0>
   12c88:	cmp	r0, #0
   12c8c:	beq	12c9c <__assert_fail@plt+0x18bc>
   12c90:	mov	r5, #1
   12c94:	str	r0, [r4, #24]
   12c98:	b	12cac <__assert_fail@plt+0x18cc>
   12c9c:	ldr	r0, [r4, #24]
   12ca0:	bl	18988 <__assert_fail@plt+0x75a8>
   12ca4:	mov	r5, #0
   12ca8:	str	r5, [r4, #24]
   12cac:	mov	r0, r5
   12cb0:	pop	{r4, r5, fp, pc}
   12cb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12cb8:	add	fp, sp, #24
   12cbc:	mov	r5, r0
   12cc0:	add	r0, r2, #176	; 0xb0
   12cc4:	mov	r6, r2
   12cc8:	mov	r8, r1
   12ccc:	bic	r0, r0, #7
   12cd0:	bl	18490 <__assert_fail@plt+0x70b0>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12d28 <__assert_fail@plt+0x1948>
   12cdc:	add	r7, r0, #168	; 0xa8
   12ce0:	mov	r4, r0
   12ce4:	mov	r1, r8
   12ce8:	mov	r2, r6
   12cec:	mov	r0, r7
   12cf0:	bl	11158 <memcpy@plt>
   12cf4:	mov	r0, #0
   12cf8:	mov	r2, #196608	; 0x30000
   12cfc:	strb	r0, [r7, r6]
   12d00:	str	r6, [r4, #52]	; 0x34
   12d04:	str	r5, [r4, #44]	; 0x2c
   12d08:	ldr	r1, [r5, #24]
   12d0c:	str	r0, [r4, #12]
   12d10:	str	r0, [r4, #16]
   12d14:	str	r0, [r4, #20]
   12d18:	str	r2, [r4, #58]	; 0x3a
   12d1c:	str	r1, [r4, #28]
   12d20:	str	r0, [r4, #32]
   12d24:	b	12d2c <__assert_fail@plt+0x194c>
   12d28:	mov	r4, #0
   12d2c:	mov	r0, r4
   12d30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d34:	push	{r4, r5, r6, sl, fp, lr}
   12d38:	add	fp, sp, #16
   12d3c:	mov	r4, r1
   12d40:	ldr	r1, [r0, #48]	; 0x30
   12d44:	ldr	r3, [r4, #48]	; 0x30
   12d48:	add	r5, r4, #64	; 0x40
   12d4c:	cmp	r3, #0
   12d50:	andeq	r3, r1, #1
   12d54:	orreq	r2, r3, r2
   12d58:	cmp	r2, #0
   12d5c:	andseq	r1, r1, #2
   12d60:	beq	12db0 <__assert_fail@plt+0x19d0>
   12d64:	ldr	r0, [r4, #24]
   12d68:	mov	r1, r5
   12d6c:	bl	18e28 <__assert_fail@plt+0x7a48>
   12d70:	cmp	r0, #0
   12d74:	beq	12df4 <__assert_fail@plt+0x1a14>
   12d78:	bl	11290 <__errno_location@plt>
   12d7c:	mov	r6, r0
   12d80:	ldr	r0, [r0]
   12d84:	cmp	r0, #2
   12d88:	bne	12dd8 <__assert_fail@plt+0x19f8>
   12d8c:	ldr	r0, [r4, #24]
   12d90:	mov	r1, r5
   12d94:	bl	18e48 <__assert_fail@plt+0x7a68>
   12d98:	cmp	r0, #0
   12d9c:	bne	12dd4 <__assert_fail@plt+0x19f4>
   12da0:	mov	r0, #0
   12da4:	str	r0, [r6]
   12da8:	mov	r0, #13
   12dac:	pop	{r4, r5, r6, sl, fp, pc}
   12db0:	ldr	r1, [r4, #24]
   12db4:	ldr	r0, [r0, #32]
   12db8:	mov	r2, r5
   12dbc:	mov	r3, #256	; 0x100
   12dc0:	bl	18e58 <__assert_fail@plt+0x7a78>
   12dc4:	cmp	r0, #0
   12dc8:	beq	12df4 <__assert_fail@plt+0x1a14>
   12dcc:	bl	11290 <__errno_location@plt>
   12dd0:	mov	r6, r0
   12dd4:	ldr	r0, [r6]
   12dd8:	str	r0, [r4, #32]
   12ddc:	mov	r0, r5
   12de0:	mov	r1, #0
   12de4:	mov	r2, #104	; 0x68
   12de8:	bl	112b4 <memset@plt>
   12dec:	mov	r0, #10
   12df0:	pop	{r4, r5, r6, sl, fp, pc}
   12df4:	ldr	r0, [r4, #80]	; 0x50
   12df8:	and	r0, r0, #61440	; 0xf000
   12dfc:	cmp	r0, #40960	; 0xa000
   12e00:	beq	12e58 <__assert_fail@plt+0x1a78>
   12e04:	cmp	r0, #32768	; 0x8000
   12e08:	beq	12e60 <__assert_fail@plt+0x1a80>
   12e0c:	cmp	r0, #16384	; 0x4000
   12e10:	bne	12e68 <__assert_fail@plt+0x1a88>
   12e14:	ldrb	r1, [r4, #168]	; 0xa8
   12e18:	mov	r0, #1
   12e1c:	cmp	r1, #46	; 0x2e
   12e20:	bne	12e6c <__assert_fail@plt+0x1a8c>
   12e24:	ldrb	r1, [r4, #169]	; 0xa9
   12e28:	cmp	r1, #0
   12e2c:	beq	12e44 <__assert_fail@plt+0x1a64>
   12e30:	cmp	r1, #46	; 0x2e
   12e34:	bne	12e6c <__assert_fail@plt+0x1a8c>
   12e38:	ldrb	r1, [r4, #170]	; 0xaa
   12e3c:	cmp	r1, #0
   12e40:	popne	{r4, r5, r6, sl, fp, pc}
   12e44:	ldr	r1, [r4, #48]	; 0x30
   12e48:	mov	r0, #5
   12e4c:	cmp	r1, #0
   12e50:	movweq	r0, #1
   12e54:	pop	{r4, r5, r6, sl, fp, pc}
   12e58:	mov	r0, #12
   12e5c:	pop	{r4, r5, r6, sl, fp, pc}
   12e60:	mov	r0, #8
   12e64:	pop	{r4, r5, r6, sl, fp, pc}
   12e68:	mov	r0, #3
   12e6c:	pop	{r4, r5, r6, sl, fp, pc}
   12e70:	push	{r4, r5, r6, r7, fp, lr}
   12e74:	add	fp, sp, #16
   12e78:	mov	r6, r0
   12e7c:	ldr	r7, [r0, #44]	; 0x2c
   12e80:	ldr	r0, [r0, #40]	; 0x28
   12e84:	mov	r5, r2
   12e88:	mov	r4, r1
   12e8c:	cmp	r0, r2
   12e90:	bcs	12ec0 <__assert_fail@plt+0x1ae0>
   12e94:	add	r1, r5, #40	; 0x28
   12e98:	cmn	r1, #-1073741823	; 0xc0000001
   12e9c:	str	r1, [r6, #40]	; 0x28
   12ea0:	bhi	12f34 <__assert_fail@plt+0x1b54>
   12ea4:	ldr	r0, [r6, #8]
   12ea8:	lsl	r1, r1, #2
   12eac:	bl	184c0 <__assert_fail@plt+0x70e0>
   12eb0:	cmp	r0, #0
   12eb4:	beq	12f34 <__assert_fail@plt+0x1b54>
   12eb8:	str	r0, [r6, #8]
   12ebc:	b	12ec4 <__assert_fail@plt+0x1ae4>
   12ec0:	ldr	r0, [r6, #8]
   12ec4:	cmp	r4, #0
   12ec8:	beq	12ee0 <__assert_fail@plt+0x1b00>
   12ecc:	str	r4, [r0], #4
   12ed0:	ldr	r4, [r4, #8]
   12ed4:	cmp	r4, #0
   12ed8:	bne	12ecc <__assert_fail@plt+0x1aec>
   12edc:	ldr	r0, [r6, #8]
   12ee0:	mov	r1, r5
   12ee4:	mov	r2, #4
   12ee8:	mov	r3, r7
   12eec:	bl	1135c <qsort@plt>
   12ef0:	ldr	r0, [r6, #8]
   12ef4:	cmp	r5, #1
   12ef8:	ldr	r4, [r0]
   12efc:	mov	r1, r4
   12f00:	beq	12f54 <__assert_fail@plt+0x1b74>
   12f04:	ldr	r1, [r0, #4]!
   12f08:	str	r1, [r4, #8]
   12f0c:	subs	r1, r5, #2
   12f10:	beq	12f4c <__assert_fail@plt+0x1b6c>
   12f14:	mov	r2, r0
   12f18:	ldr	r3, [r2, #4]!
   12f1c:	ldr	r0, [r0]
   12f20:	subs	r1, r1, #1
   12f24:	str	r3, [r0, #8]
   12f28:	mov	r0, r2
   12f2c:	bne	12f18 <__assert_fail@plt+0x1b38>
   12f30:	b	12f50 <__assert_fail@plt+0x1b70>
   12f34:	ldr	r0, [r6, #8]
   12f38:	bl	18988 <__assert_fail@plt+0x75a8>
   12f3c:	mov	r0, #0
   12f40:	str	r0, [r6, #40]	; 0x28
   12f44:	str	r0, [r6, #8]
   12f48:	b	12f5c <__assert_fail@plt+0x1b7c>
   12f4c:	mov	r2, r0
   12f50:	ldr	r1, [r2]
   12f54:	mov	r0, #0
   12f58:	str	r0, [r1, #8]
   12f5c:	mov	r0, r4
   12f60:	pop	{r4, r5, r6, r7, fp, pc}
   12f64:	push	{r4, r5, fp, lr}
   12f68:	add	fp, sp, #8
   12f6c:	sub	sp, sp, #8
   12f70:	mov	r4, r0
   12f74:	ldrh	r0, [r0, #48]	; 0x30
   12f78:	movw	r1, #258	; 0x102
   12f7c:	tst	r0, r1
   12f80:	beq	12fc0 <__assert_fail@plt+0x1be0>
   12f84:	movw	r0, #35208	; 0x8988
   12f88:	movw	r2, #18264	; 0x4758
   12f8c:	movw	r3, #18296	; 0x4778
   12f90:	mov	r1, #0
   12f94:	mov	r5, #0
   12f98:	movt	r0, #1
   12f9c:	movt	r2, #1
   12fa0:	movt	r3, #1
   12fa4:	str	r0, [sp]
   12fa8:	mov	r0, #31
   12fac:	bl	14de4 <__assert_fail@plt+0x3a04>
   12fb0:	cmp	r0, #0
   12fb4:	str	r0, [r4, #56]	; 0x38
   12fb8:	movne	r5, #1
   12fbc:	b	12fe4 <__assert_fail@plt+0x1c04>
   12fc0:	mov	r0, #32
   12fc4:	bl	18490 <__assert_fail@plt+0x70b0>
   12fc8:	cmp	r0, #0
   12fcc:	str	r0, [r4, #56]	; 0x38
   12fd0:	beq	12fe0 <__assert_fail@plt+0x1c00>
   12fd4:	bl	18590 <__assert_fail@plt+0x71b0>
   12fd8:	mov	r5, #1
   12fdc:	b	12fe4 <__assert_fail@plt+0x1c04>
   12fe0:	mov	r5, #0
   12fe4:	mov	r0, r5
   12fe8:	sub	sp, fp, #8
   12fec:	pop	{r4, r5, fp, pc}
   12ff0:	ldr	r3, [r0, #48]	; 0x30
   12ff4:	mov	r2, #32768	; 0x8000
   12ff8:	and	r2, r2, r3, lsl #11
   12ffc:	tst	r3, #512	; 0x200
   13000:	orr	r2, r2, #18688	; 0x4900
   13004:	orr	r2, r2, #524288	; 0x80000
   13008:	bne	13018 <__assert_fail@plt+0x1c38>
   1300c:	mov	r0, r1
   13010:	mov	r1, r2
   13014:	b	188f0 <__assert_fail@plt+0x7510>
   13018:	ldr	r0, [r0, #32]
   1301c:	b	15e2c <__assert_fail@plt+0x4a4c>
   13020:	push	{r4, r6, r7, sl, fp, lr}
   13024:	add	fp, sp, #16
   13028:	cmp	r0, #0
   1302c:	beq	1305c <__assert_fail@plt+0x1c7c>
   13030:	mov	r4, r0
   13034:	ldrd	r6, [r4, #8]
   13038:	cmp	r7, #0
   1303c:	beq	13048 <__assert_fail@plt+0x1c68>
   13040:	mov	r0, r7
   13044:	bl	113d4 <closedir@plt>
   13048:	mov	r0, r4
   1304c:	bl	18988 <__assert_fail@plt+0x75a8>
   13050:	cmp	r6, #0
   13054:	mov	r4, r6
   13058:	bne	13034 <__assert_fail@plt+0x1c54>
   1305c:	pop	{r4, r6, r7, sl, fp, pc}
   13060:	push	{r4, r5, fp, lr}
   13064:	add	fp, sp, #8
   13068:	mov	r4, r0
   1306c:	ldr	r0, [r0]
   13070:	cmp	r0, #0
   13074:	beq	130b4 <__assert_fail@plt+0x1cd4>
   13078:	ldr	r1, [r0, #48]	; 0x30
   1307c:	cmp	r1, #0
   13080:	bmi	130a8 <__assert_fail@plt+0x1cc8>
   13084:	ldr	r5, [r0, #8]
   13088:	cmp	r5, #0
   1308c:	ldreq	r5, [r0, #4]
   13090:	bl	18988 <__assert_fail@plt+0x75a8>
   13094:	ldr	r0, [r5, #48]	; 0x30
   13098:	cmn	r0, #1
   1309c:	mov	r0, r5
   130a0:	bgt	13084 <__assert_fail@plt+0x1ca4>
   130a4:	b	130ac <__assert_fail@plt+0x1ccc>
   130a8:	mov	r5, r0
   130ac:	mov	r0, r5
   130b0:	bl	18988 <__assert_fail@plt+0x75a8>
   130b4:	ldr	r0, [r4, #4]
   130b8:	cmp	r0, #0
   130bc:	blne	13020 <__assert_fail@plt+0x1c40>
   130c0:	ldr	r0, [r4, #8]
   130c4:	bl	18988 <__assert_fail@plt+0x75a8>
   130c8:	ldr	r0, [r4, #24]
   130cc:	bl	18988 <__assert_fail@plt+0x75a8>
   130d0:	ldr	r0, [r4, #48]	; 0x30
   130d4:	tst	r0, #512	; 0x200
   130d8:	bne	13104 <__assert_fail@plt+0x1d24>
   130dc:	mov	r5, #0
   130e0:	tst	r0, #4
   130e4:	bne	13140 <__assert_fail@plt+0x1d60>
   130e8:	ldr	r0, [r4, #28]
   130ec:	bl	11350 <fchdir@plt>
   130f0:	cmp	r0, #0
   130f4:	beq	1311c <__assert_fail@plt+0x1d3c>
   130f8:	bl	11290 <__errno_location@plt>
   130fc:	ldr	r5, [r0]
   13100:	b	13120 <__assert_fail@plt+0x1d40>
   13104:	ldr	r0, [r4, #32]
   13108:	mov	r5, #0
   1310c:	cmp	r0, #0
   13110:	bmi	13140 <__assert_fail@plt+0x1d60>
   13114:	bl	113bc <close@plt>
   13118:	b	13130 <__assert_fail@plt+0x1d50>
   1311c:	mov	r5, #0
   13120:	ldr	r0, [r4, #28]
   13124:	bl	113bc <close@plt>
   13128:	cmp	r5, #0
   1312c:	bne	13140 <__assert_fail@plt+0x1d60>
   13130:	cmp	r0, #0
   13134:	beq	13140 <__assert_fail@plt+0x1d60>
   13138:	bl	11290 <__errno_location@plt>
   1313c:	ldr	r5, [r0]
   13140:	add	r0, r4, #60	; 0x3c
   13144:	bl	13188 <__assert_fail@plt+0x1da8>
   13148:	ldr	r0, [r4, #52]	; 0x34
   1314c:	cmp	r0, #0
   13150:	beq	13158 <__assert_fail@plt+0x1d78>
   13154:	bl	15110 <__assert_fail@plt+0x3d30>
   13158:	mov	r0, r4
   1315c:	bl	131c0 <__assert_fail@plt+0x1de0>
   13160:	mov	r0, r4
   13164:	bl	18988 <__assert_fail@plt+0x75a8>
   13168:	cmp	r5, #0
   1316c:	beq	13180 <__assert_fail@plt+0x1da0>
   13170:	bl	11290 <__errno_location@plt>
   13174:	str	r5, [r0]
   13178:	mvn	r0, #0
   1317c:	pop	{r4, r5, fp, pc}
   13180:	mov	r0, #0
   13184:	pop	{r4, r5, fp, pc}
   13188:	push	{r4, sl, fp, lr}
   1318c:	add	fp, sp, #8
   13190:	mov	r4, r0
   13194:	bl	158d8 <__assert_fail@plt+0x44f8>
   13198:	cmp	r0, #0
   1319c:	bne	131bc <__assert_fail@plt+0x1ddc>
   131a0:	mov	r0, r4
   131a4:	bl	1592c <__assert_fail@plt+0x454c>
   131a8:	cmp	r0, #0
   131ac:	bmi	131b4 <__assert_fail@plt+0x1dd4>
   131b0:	bl	113bc <close@plt>
   131b4:	mov	r0, r4
   131b8:	b	13194 <__assert_fail@plt+0x1db4>
   131bc:	pop	{r4, sl, fp, pc}
   131c0:	ldrh	r1, [r0, #48]	; 0x30
   131c4:	movw	r2, #258	; 0x102
   131c8:	tst	r1, r2
   131cc:	beq	131e0 <__assert_fail@plt+0x1e00>
   131d0:	ldr	r0, [r0, #56]	; 0x38
   131d4:	cmp	r0, #0
   131d8:	bxeq	lr
   131dc:	b	15110 <__assert_fail@plt+0x3d30>
   131e0:	ldr	r0, [r0, #56]	; 0x38
   131e4:	b	18988 <__assert_fail@plt+0x75a8>
   131e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   131ec:	add	fp, sp, #24
   131f0:	ldr	r6, [r0]
   131f4:	mov	r5, #0
   131f8:	cmp	r6, #0
   131fc:	beq	137ec <__assert_fail@plt+0x240c>
   13200:	ldr	r1, [r0, #48]	; 0x30
   13204:	mov	r4, r0
   13208:	tst	r1, #8192	; 0x2000
   1320c:	bne	137ec <__assert_fail@plt+0x240c>
   13210:	ldrh	r0, [r6, #60]	; 0x3c
   13214:	mov	r2, #3
   13218:	strh	r2, [r6, #60]	; 0x3c
   1321c:	cmp	r0, #1
   13220:	beq	13290 <__assert_fail@plt+0x1eb0>
   13224:	cmp	r0, #2
   13228:	bne	132a8 <__assert_fail@plt+0x1ec8>
   1322c:	ldrh	r2, [r6, #56]	; 0x38
   13230:	bic	r3, r2, #1
   13234:	cmp	r3, #12
   13238:	bne	132ac <__assert_fail@plt+0x1ecc>
   1323c:	mov	r0, r4
   13240:	mov	r1, r6
   13244:	mov	r2, #1
   13248:	bl	12d34 <__assert_fail@plt+0x1954>
   1324c:	cmp	r0, #1
   13250:	strh	r0, [r6, #56]	; 0x38
   13254:	bne	13640 <__assert_fail@plt+0x2260>
   13258:	ldrb	r0, [r4, #48]	; 0x30
   1325c:	tst	r0, #4
   13260:	bne	13640 <__assert_fail@plt+0x2260>
   13264:	movw	r1, #39124	; 0x98d4
   13268:	mov	r0, r4
   1326c:	movt	r1, #1
   13270:	bl	12ff0 <__assert_fail@plt+0x1c10>
   13274:	cmn	r0, #1
   13278:	str	r0, [r6, #36]	; 0x24
   1327c:	ble	1362c <__assert_fail@plt+0x224c>
   13280:	ldrh	r0, [r6, #58]	; 0x3a
   13284:	orr	r0, r0, #2
   13288:	strh	r0, [r6, #58]	; 0x3a
   1328c:	b	13640 <__assert_fail@plt+0x2260>
   13290:	mov	r0, r4
   13294:	mov	r1, r6
   13298:	mov	r2, #0
   1329c:	bl	12d34 <__assert_fail@plt+0x1954>
   132a0:	strh	r0, [r6, #56]	; 0x38
   132a4:	b	132fc <__assert_fail@plt+0x1f1c>
   132a8:	ldrh	r2, [r6, #56]	; 0x38
   132ac:	cmp	r2, #1
   132b0:	bne	13304 <__assert_fail@plt+0x1f24>
   132b4:	cmp	r0, #4
   132b8:	bne	13394 <__assert_fail@plt+0x1fb4>
   132bc:	ldrb	r0, [r6, #58]	; 0x3a
   132c0:	tst	r0, #2
   132c4:	beq	132d0 <__assert_fail@plt+0x1ef0>
   132c8:	ldr	r0, [r6, #36]	; 0x24
   132cc:	bl	113bc <close@plt>
   132d0:	ldr	r0, [r4, #4]
   132d4:	cmp	r0, #0
   132d8:	beq	132e8 <__assert_fail@plt+0x1f08>
   132dc:	bl	13020 <__assert_fail@plt+0x1c40>
   132e0:	mov	r0, #0
   132e4:	str	r0, [r4, #4]
   132e8:	mov	r0, #6
   132ec:	strh	r0, [r6, #56]	; 0x38
   132f0:	mov	r0, r4
   132f4:	mov	r1, r6
   132f8:	bl	137f8 <__assert_fail@plt+0x2418>
   132fc:	mov	r5, r6
   13300:	b	137ec <__assert_fail@plt+0x240c>
   13304:	ldr	r5, [r6, #8]
   13308:	cmp	r5, #0
   1330c:	beq	1342c <__assert_fail@plt+0x204c>
   13310:	mov	r0, r6
   13314:	str	r5, [r4]
   13318:	bl	18988 <__assert_fail@plt+0x75a8>
   1331c:	ldr	r0, [r5, #48]	; 0x30
   13320:	cmp	r0, #0
   13324:	beq	13478 <__assert_fail@plt+0x2098>
   13328:	ldrh	r0, [r5, #60]	; 0x3c
   1332c:	mov	r6, r5
   13330:	cmp	r0, #4
   13334:	beq	13304 <__assert_fail@plt+0x1f24>
   13338:	cmp	r0, #2
   1333c:	bne	136d4 <__assert_fail@plt+0x22f4>
   13340:	mov	r0, r4
   13344:	mov	r1, r5
   13348:	mov	r2, #1
   1334c:	bl	12d34 <__assert_fail@plt+0x1954>
   13350:	cmp	r0, #1
   13354:	strh	r0, [r5, #56]	; 0x38
   13358:	bne	136cc <__assert_fail@plt+0x22ec>
   1335c:	ldrb	r0, [r4, #48]	; 0x30
   13360:	tst	r0, #4
   13364:	bne	136cc <__assert_fail@plt+0x22ec>
   13368:	movw	r1, #39124	; 0x98d4
   1336c:	mov	r0, r4
   13370:	movt	r1, #1
   13374:	bl	12ff0 <__assert_fail@plt+0x1c10>
   13378:	cmn	r0, #1
   1337c:	str	r0, [r5, #36]	; 0x24
   13380:	ble	136b8 <__assert_fail@plt+0x22d8>
   13384:	ldrh	r0, [r5, #58]	; 0x3a
   13388:	orr	r0, r0, #2
   1338c:	strh	r0, [r5, #58]	; 0x3a
   13390:	b	136cc <__assert_fail@plt+0x22ec>
   13394:	tst	r1, #64	; 0x40
   13398:	beq	133bc <__assert_fail@plt+0x1fdc>
   1339c:	ldr	r0, [r4, #16]
   133a0:	ldr	r2, [r6, #64]	; 0x40
   133a4:	ldr	r3, [r4, #20]
   133a8:	ldr	r5, [r6, #68]	; 0x44
   133ac:	eor	r3, r5, r3
   133b0:	eor	r0, r2, r0
   133b4:	orrs	r0, r0, r3
   133b8:	bne	132bc <__assert_fail@plt+0x1edc>
   133bc:	ldr	r0, [r4, #4]
   133c0:	cmp	r0, #0
   133c4:	beq	13538 <__assert_fail@plt+0x2158>
   133c8:	tst	r1, #4096	; 0x1000
   133cc:	bne	13524 <__assert_fail@plt+0x2144>
   133d0:	ldr	r3, [r6, #24]
   133d4:	mov	r0, r4
   133d8:	mov	r1, r6
   133dc:	mvn	r2, #0
   133e0:	bl	138d0 <__assert_fail@plt+0x24f0>
   133e4:	cmp	r0, #0
   133e8:	beq	13550 <__assert_fail@plt+0x2170>
   133ec:	bl	11290 <__errno_location@plt>
   133f0:	ldr	r0, [r0]
   133f4:	str	r0, [r6, #32]
   133f8:	ldrh	r0, [r6, #58]	; 0x3a
   133fc:	orr	r0, r0, #1
   13400:	strh	r0, [r6, #58]	; 0x3a
   13404:	ldr	r0, [r4, #4]
   13408:	cmp	r0, #0
   1340c:	beq	13550 <__assert_fail@plt+0x2170>
   13410:	ldmib	r0, {r1, r2}
   13414:	cmp	r2, #0
   13418:	ldr	r1, [r1, #24]
   1341c:	str	r1, [r0, #24]
   13420:	mov	r0, r2
   13424:	bne	13410 <__assert_fail@plt+0x2030>
   13428:	b	13550 <__assert_fail@plt+0x2170>
   1342c:	ldr	r5, [r6, #4]
   13430:	ldr	r0, [r5, #12]
   13434:	cmp	r0, #0
   13438:	beq	135a0 <__assert_fail@plt+0x21c0>
   1343c:	str	r5, [r4]
   13440:	ldr	r1, [r5, #40]	; 0x28
   13444:	ldr	r0, [r4, #24]
   13448:	mov	r5, #0
   1344c:	strb	r5, [r0, r1]
   13450:	mov	r0, r4
   13454:	mov	r1, #3
   13458:	bl	13ab0 <__assert_fail@plt+0x26d0>
   1345c:	cmp	r0, #0
   13460:	beq	13590 <__assert_fail@plt+0x21b0>
   13464:	mov	r7, r0
   13468:	mov	r0, r6
   1346c:	bl	18988 <__assert_fail@plt+0x75a8>
   13470:	mov	r5, r7
   13474:	b	136d4 <__assert_fail@plt+0x22f4>
   13478:	mov	r0, r4
   1347c:	bl	14440 <__assert_fail@plt+0x3060>
   13480:	cmp	r0, #0
   13484:	beq	1349c <__assert_fail@plt+0x20bc>
   13488:	ldr	r0, [r4, #48]	; 0x30
   1348c:	mov	r5, #0
   13490:	orr	r0, r0, #8192	; 0x2000
   13494:	str	r0, [r4, #48]	; 0x30
   13498:	b	137ec <__assert_fail@plt+0x240c>
   1349c:	mov	r0, r4
   134a0:	bl	131c0 <__assert_fail@plt+0x1de0>
   134a4:	ldr	r1, [r5, #52]	; 0x34
   134a8:	add	r6, r5, #168	; 0xa8
   134ac:	str	r1, [r5, #40]	; 0x28
   134b0:	add	r2, r1, #1
   134b4:	mov	r1, r6
   134b8:	ldr	r0, [r4, #24]
   134bc:	bl	11134 <memmove@plt>
   134c0:	mov	r0, r6
   134c4:	mov	r1, #47	; 0x2f
   134c8:	bl	11314 <strrchr@plt>
   134cc:	cmp	r0, #0
   134d0:	beq	1350c <__assert_fail@plt+0x212c>
   134d4:	cmp	r0, r6
   134d8:	bne	134e8 <__assert_fail@plt+0x2108>
   134dc:	ldrb	r1, [r5, #169]	; 0xa9
   134e0:	cmp	r1, #0
   134e4:	beq	1350c <__assert_fail@plt+0x212c>
   134e8:	add	r7, r0, #1
   134ec:	mov	r0, r7
   134f0:	bl	1126c <strlen@plt>
   134f4:	mov	r8, r0
   134f8:	add	r2, r0, #1
   134fc:	mov	r0, r6
   13500:	mov	r1, r7
   13504:	bl	11134 <memmove@plt>
   13508:	str	r8, [r5, #52]	; 0x34
   1350c:	ldr	r0, [r4, #24]
   13510:	str	r0, [r5, #24]
   13514:	str	r0, [r5, #28]
   13518:	mov	r0, r4
   1351c:	bl	12f64 <__assert_fail@plt+0x1b84>
   13520:	b	13710 <__assert_fail@plt+0x2330>
   13524:	bic	r1, r1, #4096	; 0x1000
   13528:	str	r1, [r4, #48]	; 0x30
   1352c:	bl	13020 <__assert_fail@plt+0x1c40>
   13530:	mov	r0, #0
   13534:	str	r0, [r4, #4]
   13538:	mov	r0, r4
   1353c:	mov	r1, #3
   13540:	bl	13ab0 <__assert_fail@plt+0x26d0>
   13544:	cmp	r0, #0
   13548:	str	r0, [r4, #4]
   1354c:	beq	13560 <__assert_fail@plt+0x2180>
   13550:	ldr	r5, [r4, #4]
   13554:	mov	r0, #0
   13558:	str	r0, [r4, #4]
   1355c:	b	136d4 <__assert_fail@plt+0x22f4>
   13560:	ldrb	r0, [r4, #49]	; 0x31
   13564:	mov	r5, #0
   13568:	tst	r0, #32
   1356c:	bne	137ec <__assert_fail@plt+0x240c>
   13570:	ldr	r0, [r6, #32]
   13574:	cmp	r0, #0
   13578:	beq	132f0 <__assert_fail@plt+0x1f10>
   1357c:	ldrh	r0, [r6, #56]	; 0x38
   13580:	cmp	r0, #4
   13584:	beq	132f0 <__assert_fail@plt+0x1f10>
   13588:	mov	r0, #7
   1358c:	b	132ec <__assert_fail@plt+0x1f0c>
   13590:	ldrb	r0, [r4, #49]	; 0x31
   13594:	tst	r0, #32
   13598:	bne	137ec <__assert_fail@plt+0x240c>
   1359c:	ldr	r5, [r6, #4]
   135a0:	mov	r0, r6
   135a4:	str	r5, [r4]
   135a8:	bl	18988 <__assert_fail@plt+0x75a8>
   135ac:	ldr	r0, [r5, #48]	; 0x30
   135b0:	cmn	r0, #1
   135b4:	beq	13610 <__assert_fail@plt+0x2230>
   135b8:	ldrh	r0, [r5, #56]	; 0x38
   135bc:	cmp	r0, #11
   135c0:	beq	137f4 <__assert_fail@plt+0x2414>
   135c4:	ldr	r0, [r5, #40]	; 0x28
   135c8:	ldr	r1, [r4, #24]
   135cc:	mov	r2, #0
   135d0:	strb	r2, [r1, r0]
   135d4:	ldr	r0, [r5, #48]	; 0x30
   135d8:	cmp	r0, #0
   135dc:	beq	13648 <__assert_fail@plt+0x2268>
   135e0:	ldrh	r0, [r5, #58]	; 0x3a
   135e4:	tst	r0, #2
   135e8:	bne	13674 <__assert_fail@plt+0x2294>
   135ec:	tst	r0, #1
   135f0:	bne	137b0 <__assert_fail@plt+0x23d0>
   135f4:	ldr	r1, [r5, #4]
   135f8:	movw	r3, #39123	; 0x98d3
   135fc:	mov	r0, r4
   13600:	mvn	r2, #0
   13604:	movt	r3, #1
   13608:	bl	138d0 <__assert_fail@plt+0x24f0>
   1360c:	b	13650 <__assert_fail@plt+0x2270>
   13610:	mov	r0, r5
   13614:	bl	18988 <__assert_fail@plt+0x75a8>
   13618:	bl	11290 <__errno_location@plt>
   1361c:	mov	r5, #0
   13620:	str	r5, [r0]
   13624:	str	r5, [r4]
   13628:	b	137ec <__assert_fail@plt+0x240c>
   1362c:	bl	11290 <__errno_location@plt>
   13630:	ldr	r0, [r0]
   13634:	mov	r1, #7
   13638:	strh	r1, [r6, #56]	; 0x38
   1363c:	str	r0, [r6, #32]
   13640:	mov	r5, r6
   13644:	b	13710 <__assert_fail@plt+0x2330>
   13648:	mov	r0, r4
   1364c:	bl	14440 <__assert_fail@plt+0x3060>
   13650:	cmp	r0, #0
   13654:	beq	137b0 <__assert_fail@plt+0x23d0>
   13658:	bl	11290 <__errno_location@plt>
   1365c:	ldr	r0, [r0]
   13660:	str	r0, [r5, #32]
   13664:	ldr	r0, [r4, #48]	; 0x30
   13668:	orr	r0, r0, #8192	; 0x2000
   1366c:	str	r0, [r4, #48]	; 0x30
   13670:	b	137b0 <__assert_fail@plt+0x23d0>
   13674:	ldr	r0, [r4, #48]	; 0x30
   13678:	tst	r0, #4
   1367c:	bne	137a8 <__assert_fail@plt+0x23c8>
   13680:	ldr	r1, [r5, #36]	; 0x24
   13684:	tst	r0, #512	; 0x200
   13688:	bne	1379c <__assert_fail@plt+0x23bc>
   1368c:	mov	r0, r1
   13690:	bl	11350 <fchdir@plt>
   13694:	cmp	r0, #0
   13698:	beq	137a8 <__assert_fail@plt+0x23c8>
   1369c:	bl	11290 <__errno_location@plt>
   136a0:	ldr	r0, [r0]
   136a4:	str	r0, [r5, #32]
   136a8:	ldr	r0, [r4, #48]	; 0x30
   136ac:	orr	r0, r0, #8192	; 0x2000
   136b0:	str	r0, [r4, #48]	; 0x30
   136b4:	b	137a8 <__assert_fail@plt+0x23c8>
   136b8:	bl	11290 <__errno_location@plt>
   136bc:	ldr	r0, [r0]
   136c0:	mov	r1, #7
   136c4:	strh	r1, [r5, #56]	; 0x38
   136c8:	str	r0, [r5, #32]
   136cc:	mov	r0, #3
   136d0:	strh	r0, [r5, #60]	; 0x3c
   136d4:	ldr	r0, [r5, #4]
   136d8:	ldr	r1, [r0, #28]
   136dc:	ldr	r0, [r0, #40]	; 0x28
   136e0:	sub	r2, r0, #1
   136e4:	ldrb	r1, [r1, r2]
   136e8:	cmp	r1, #47	; 0x2f
   136ec:	ldr	r1, [r4, #24]
   136f0:	moveq	r0, r2
   136f4:	mov	r2, #47	; 0x2f
   136f8:	strb	r2, [r1, r0]!
   136fc:	ldr	r2, [r5, #52]	; 0x34
   13700:	add	r0, r1, #1
   13704:	add	r1, r5, #168	; 0xa8
   13708:	add	r2, r2, #1
   1370c:	bl	11134 <memmove@plt>
   13710:	str	r5, [r4]
   13714:	ldrh	r0, [r5, #56]	; 0x38
   13718:	cmp	r0, #11
   1371c:	bne	13754 <__assert_fail@plt+0x2374>
   13720:	add	r0, r5, #112	; 0x70
   13724:	ldrd	r0, [r0]
   13728:	eor	r2, r0, #1
   1372c:	orrs	r2, r2, r1
   13730:	beq	137ec <__assert_fail@plt+0x240c>
   13734:	eor	r0, r0, #2
   13738:	orrs	r0, r0, r1
   1373c:	bne	137f4 <__assert_fail@plt+0x2414>
   13740:	mov	r0, r4
   13744:	mov	r1, r5
   13748:	mov	r2, #0
   1374c:	bl	12d34 <__assert_fail@plt+0x1954>
   13750:	strh	r0, [r5, #56]	; 0x38
   13754:	cmp	r0, #1
   13758:	bne	137ec <__assert_fail@plt+0x240c>
   1375c:	ldr	r0, [r5, #48]	; 0x30
   13760:	cmp	r0, #0
   13764:	bne	13774 <__assert_fail@plt+0x2394>
   13768:	add	r0, r5, #64	; 0x40
   1376c:	ldrd	r0, [r0]
   13770:	strd	r0, [r4, #16]
   13774:	mov	r0, r4
   13778:	mov	r1, r5
   1377c:	bl	1449c <__assert_fail@plt+0x30bc>
   13780:	cmp	r0, #0
   13784:	bne	137ec <__assert_fail@plt+0x240c>
   13788:	bl	11290 <__errno_location@plt>
   1378c:	mov	r1, #12
   13790:	mov	r5, #0
   13794:	str	r1, [r0]
   13798:	b	137ec <__assert_fail@plt+0x240c>
   1379c:	mov	r0, r4
   137a0:	mov	r2, #1
   137a4:	bl	14558 <__assert_fail@plt+0x3178>
   137a8:	ldr	r0, [r5, #36]	; 0x24
   137ac:	bl	113bc <close@plt>
   137b0:	ldrh	r0, [r5, #56]	; 0x38
   137b4:	cmp	r0, #2
   137b8:	beq	137e0 <__assert_fail@plt+0x2400>
   137bc:	ldr	r0, [r5, #32]
   137c0:	mov	r1, #7
   137c4:	cmp	r0, #0
   137c8:	movweq	r1, #6
   137cc:	strh	r1, [r5, #56]	; 0x38
   137d0:	bne	137e0 <__assert_fail@plt+0x2400>
   137d4:	mov	r0, r4
   137d8:	mov	r1, r5
   137dc:	bl	137f8 <__assert_fail@plt+0x2418>
   137e0:	ldrb	r0, [r4, #49]	; 0x31
   137e4:	tst	r0, #32
   137e8:	movne	r5, #0
   137ec:	mov	r0, r5
   137f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   137f4:	bl	113b0 <abort@plt>
   137f8:	push	{r4, r5, r7, sl, fp, lr}
   137fc:	add	fp, sp, #16
   13800:	sub	sp, sp, #24
   13804:	ldrh	r2, [r0, #48]	; 0x30
   13808:	movw	r3, #258	; 0x102
   1380c:	add	lr, r1, #64	; 0x40
   13810:	add	r4, r1, #160	; 0xa0
   13814:	tst	r2, r3
   13818:	beq	13850 <__assert_fail@plt+0x2470>
   1381c:	ldrd	r2, [lr]
   13820:	mov	r1, sp
   13824:	stm	sp, {r2, r3}
   13828:	ldrd	r2, [r4]
   1382c:	str	r3, [sp, #12]
   13830:	str	r2, [sp, #8]
   13834:	ldr	r0, [r0, #56]	; 0x38
   13838:	bl	157a0 <__assert_fail@plt+0x43c0>
   1383c:	cmp	r0, #0
   13840:	beq	138cc <__assert_fail@plt+0x24ec>
   13844:	bl	18988 <__assert_fail@plt+0x75a8>
   13848:	sub	sp, fp, #16
   1384c:	pop	{r4, r5, r7, sl, fp, pc}
   13850:	ldr	r1, [r1, #4]
   13854:	cmp	r1, #0
   13858:	beq	13848 <__assert_fail@plt+0x2468>
   1385c:	ldr	r2, [r1, #48]	; 0x30
   13860:	cmp	r2, #0
   13864:	bmi	13848 <__assert_fail@plt+0x2468>
   13868:	ldr	ip, [r0, #56]	; 0x38
   1386c:	ldrd	r2, [ip, #16]
   13870:	orrs	r2, r2, r3
   13874:	beq	138cc <__assert_fail@plt+0x24ec>
   13878:	ldrd	r2, [r4]
   1387c:	ldrd	r4, [ip]
   13880:	eor	r3, r5, r3
   13884:	eor	r2, r4, r2
   13888:	orrs	r2, r2, r3
   1388c:	bne	13848 <__assert_fail@plt+0x2468>
   13890:	add	r3, ip, #8
   13894:	ldm	lr, {r2, r5}
   13898:	ldm	r3, {r4, r7}
   1389c:	eor	r7, r7, r5
   138a0:	eor	r2, r4, r2
   138a4:	orrs	r2, r2, r7
   138a8:	bne	13848 <__assert_fail@plt+0x2468>
   138ac:	add	r2, r1, #64	; 0x40
   138b0:	add	r1, r1, #160	; 0xa0
   138b4:	ldm	r2, {r2, r5}
   138b8:	stm	r3, {r2, r5}
   138bc:	ldr	r0, [r0, #56]	; 0x38
   138c0:	ldrd	r2, [r1]
   138c4:	strd	r2, [r0]
   138c8:	b	13848 <__assert_fail@plt+0x2468>
   138cc:	bl	113b0 <abort@plt>
   138d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138d4:	add	fp, sp, #28
   138d8:	sub	sp, sp, #108	; 0x6c
   138dc:	mov	r7, r3
   138e0:	mov	r4, r2
   138e4:	mov	r8, r1
   138e8:	mov	sl, r0
   138ec:	cmp	r3, #0
   138f0:	beq	13914 <__assert_fail@plt+0x2534>
   138f4:	movw	r1, #39123	; 0x98d3
   138f8:	mov	r0, r7
   138fc:	movt	r1, #1
   13900:	bl	1111c <strcmp@plt>
   13904:	cmp	r0, #0
   13908:	mov	r6, r0
   1390c:	movwne	r6, #1
   13910:	b	13918 <__assert_fail@plt+0x2538>
   13914:	mov	r6, #1
   13918:	ldr	r0, [sl, #48]	; 0x30
   1391c:	tst	r0, #4
   13920:	bne	13978 <__assert_fail@plt+0x2598>
   13924:	cmn	r4, #1
   13928:	mov	r1, #0
   1392c:	mov	r9, #0
   13930:	movwgt	r1, #1
   13934:	orrs	r1, r1, r6
   13938:	bne	13998 <__assert_fail@plt+0x25b8>
   1393c:	ands	r0, r0, #512	; 0x200
   13940:	beq	13998 <__assert_fail@plt+0x25b8>
   13944:	add	r4, sl, #60	; 0x3c
   13948:	mov	r0, r4
   1394c:	bl	158d8 <__assert_fail@plt+0x44f8>
   13950:	cmp	r0, #0
   13954:	bne	139a0 <__assert_fail@plt+0x25c0>
   13958:	mov	r0, r4
   1395c:	bl	1592c <__assert_fail@plt+0x454c>
   13960:	cmn	r0, #1
   13964:	ble	139a0 <__assert_fail@plt+0x25c0>
   13968:	mov	r4, r0
   1396c:	mov	r9, #0
   13970:	mov	r7, #0
   13974:	b	139bc <__assert_fail@plt+0x25dc>
   13978:	mov	r5, #0
   1397c:	cmp	r4, #0
   13980:	bmi	13aa4 <__assert_fail@plt+0x26c4>
   13984:	ands	r0, r0, #512	; 0x200
   13988:	beq	13aa4 <__assert_fail@plt+0x26c4>
   1398c:	mov	r0, r4
   13990:	bl	113bc <close@plt>
   13994:	b	13aa4 <__assert_fail@plt+0x26c4>
   13998:	cmn	r4, #1
   1399c:	bgt	139bc <__assert_fail@plt+0x25dc>
   139a0:	mov	r0, sl
   139a4:	mov	r1, r7
   139a8:	bl	12ff0 <__assert_fail@plt+0x1c10>
   139ac:	cmp	r0, #0
   139b0:	bmi	13a54 <__assert_fail@plt+0x2674>
   139b4:	mov	r4, r0
   139b8:	mov	r9, #1
   139bc:	ldr	r5, [sl, #48]	; 0x30
   139c0:	tst	r5, #2
   139c4:	bne	139e8 <__assert_fail@plt+0x2608>
   139c8:	cmp	r7, #0
   139cc:	beq	13a3c <__assert_fail@plt+0x265c>
   139d0:	movw	r1, #39123	; 0x98d3
   139d4:	mov	r0, r7
   139d8:	movt	r1, #1
   139dc:	bl	1111c <strcmp@plt>
   139e0:	cmp	r0, #0
   139e4:	bne	13a3c <__assert_fail@plt+0x265c>
   139e8:	mov	r1, sp
   139ec:	mov	r0, r4
   139f0:	bl	18e38 <__assert_fail@plt+0x7a58>
   139f4:	cmp	r0, #0
   139f8:	bne	13a80 <__assert_fail@plt+0x26a0>
   139fc:	add	r0, r8, #64	; 0x40
   13a00:	ldm	sp, {r2, r3}
   13a04:	ldrd	r0, [r0]
   13a08:	eor	r1, r1, r3
   13a0c:	eor	r0, r0, r2
   13a10:	orrs	r0, r0, r1
   13a14:	bne	13a74 <__assert_fail@plt+0x2694>
   13a18:	add	r0, r8, #160	; 0xa0
   13a1c:	ldr	r2, [sp, #96]	; 0x60
   13a20:	ldr	r3, [sp, #100]	; 0x64
   13a24:	ldrd	r0, [r0]
   13a28:	eor	r1, r1, r3
   13a2c:	eor	r0, r0, r2
   13a30:	orrs	r0, r0, r1
   13a34:	bne	13a74 <__assert_fail@plt+0x2694>
   13a38:	ldr	r5, [sl, #48]	; 0x30
   13a3c:	tst	r5, #512	; 0x200
   13a40:	bne	13a5c <__assert_fail@plt+0x267c>
   13a44:	mov	r0, r4
   13a48:	bl	11350 <fchdir@plt>
   13a4c:	mov	r5, r0
   13a50:	b	13a84 <__assert_fail@plt+0x26a4>
   13a54:	mvn	r5, #0
   13a58:	b	13aa4 <__assert_fail@plt+0x26c4>
   13a5c:	mov	r0, sl
   13a60:	mov	r1, r4
   13a64:	mov	r2, r6
   13a68:	bl	14558 <__assert_fail@plt+0x3178>
   13a6c:	mov	r5, #0
   13a70:	b	13aa4 <__assert_fail@plt+0x26c4>
   13a74:	bl	11290 <__errno_location@plt>
   13a78:	mov	r1, #2
   13a7c:	str	r1, [r0]
   13a80:	mvn	r5, #0
   13a84:	cmp	r9, #0
   13a88:	beq	13aa4 <__assert_fail@plt+0x26c4>
   13a8c:	bl	11290 <__errno_location@plt>
   13a90:	ldr	r7, [r0]
   13a94:	mov	r6, r0
   13a98:	mov	r0, r4
   13a9c:	bl	113bc <close@plt>
   13aa0:	str	r7, [r6]
   13aa4:	mov	r0, r5
   13aa8:	sub	sp, fp, #28
   13aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab4:	add	fp, sp, #28
   13ab8:	sub	sp, sp, #68	; 0x44
   13abc:	ldr	sl, [r0]
   13ac0:	mov	r4, r1
   13ac4:	str	r0, [fp, #-36]	; 0xffffffdc
   13ac8:	ldr	r9, [sl, #12]
   13acc:	cmp	r9, #0
   13ad0:	beq	13b14 <__assert_fail@plt+0x2734>
   13ad4:	mov	r0, r9
   13ad8:	bl	11344 <dirfd@plt>
   13adc:	cmn	r0, #1
   13ae0:	str	r0, [fp, #-32]	; 0xffffffe0
   13ae4:	ble	13b4c <__assert_fail@plt+0x276c>
   13ae8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13aec:	mov	ip, #0
   13af0:	mov	r1, r7
   13af4:	ldr	r0, [r1, #44]!	; 0x2c
   13af8:	str	r1, [sp, #24]
   13afc:	mvn	r1, #0
   13b00:	cmp	r0, #0
   13b04:	movweq	r1, #34464	; 0x86a0
   13b08:	movteq	r1, #1
   13b0c:	str	r1, [sp, #32]
   13b10:	b	13db4 <__assert_fail@plt+0x29d4>
   13b14:	ldr	r3, [r0, #48]	; 0x30
   13b18:	mov	r2, r0
   13b1c:	mvn	r0, #99	; 0x63
   13b20:	and	r1, r3, #516	; 0x204
   13b24:	cmp	r1, #512	; 0x200
   13b28:	ldr	r1, [sl, #24]
   13b2c:	ldreq	r0, [r2, #32]
   13b30:	mov	r2, #0
   13b34:	tst	r3, #16
   13b38:	beq	13b6c <__assert_fail@plt+0x278c>
   13b3c:	tst	r3, #1
   13b40:	bne	13b60 <__assert_fail@plt+0x2780>
   13b44:	mov	r2, #32768	; 0x8000
   13b48:	b	13b6c <__assert_fail@plt+0x278c>
   13b4c:	ldr	r0, [sl, #12]
   13b50:	bl	113d4 <closedir@plt>
   13b54:	mov	r5, #0
   13b58:	str	r5, [sl, #12]
   13b5c:	b	13bac <__assert_fail@plt+0x27cc>
   13b60:	ldr	r3, [sl, #48]	; 0x30
   13b64:	cmp	r3, #0
   13b68:	movne	r2, #32768	; 0x8000
   13b6c:	sub	r3, fp, #32
   13b70:	bl	15e64 <__assert_fail@plt+0x4a84>
   13b74:	cmp	r0, #0
   13b78:	str	r0, [sl, #12]
   13b7c:	beq	13ba8 <__assert_fail@plt+0x27c8>
   13b80:	ldrh	r0, [sl, #56]	; 0x38
   13b84:	cmp	r0, #11
   13b88:	bne	13bcc <__assert_fail@plt+0x27ec>
   13b8c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13b90:	mov	r1, sl
   13b94:	mov	r2, #0
   13b98:	mov	r0, r7
   13b9c:	bl	12d34 <__assert_fail@plt+0x1954>
   13ba0:	strh	r0, [sl, #56]	; 0x38
   13ba4:	b	13c14 <__assert_fail@plt+0x2834>
   13ba8:	mov	r5, #0
   13bac:	cmp	r4, #3
   13bb0:	bne	14434 <__assert_fail@plt+0x3054>
   13bb4:	mov	r0, #4
   13bb8:	strh	r0, [sl, #56]	; 0x38
   13bbc:	bl	11290 <__errno_location@plt>
   13bc0:	ldr	r0, [r0]
   13bc4:	str	r0, [sl, #32]
   13bc8:	b	14434 <__assert_fail@plt+0x3054>
   13bcc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13bd0:	ldrb	r0, [r7, #49]	; 0x31
   13bd4:	tst	r0, #1
   13bd8:	beq	13c14 <__assert_fail@plt+0x2834>
   13bdc:	mov	r0, r7
   13be0:	mov	r1, sl
   13be4:	bl	137f8 <__assert_fail@plt+0x2418>
   13be8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13bec:	mov	r1, sl
   13bf0:	mov	r2, #0
   13bf4:	mov	r5, #0
   13bf8:	bl	12d34 <__assert_fail@plt+0x1954>
   13bfc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13c00:	mov	r1, sl
   13c04:	bl	1449c <__assert_fail@plt+0x30bc>
   13c08:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13c0c:	cmp	r0, #0
   13c10:	beq	13cb8 <__assert_fail@plt+0x28d8>
   13c14:	mov	r1, r7
   13c18:	ldr	r0, [r1, #44]!	; 0x2c
   13c1c:	str	r1, [sp, #24]
   13c20:	mvn	r1, #0
   13c24:	cmp	r0, #0
   13c28:	movweq	r1, #34464	; 0x86a0
   13c2c:	movteq	r1, #1
   13c30:	cmp	r4, #2
   13c34:	str	r1, [sp, #32]
   13c38:	bne	13c58 <__assert_fail@plt+0x2878>
   13c3c:	mov	ip, #1
   13c40:	cmp	r4, #3
   13c44:	bne	13db4 <__assert_fail@plt+0x29d4>
   13c48:	sub	r0, r4, #3
   13c4c:	mov	r8, r4
   13c50:	mov	r5, #0
   13c54:	b	13cec <__assert_fail@plt+0x290c>
   13c58:	ldr	r0, [r7, #48]	; 0x30
   13c5c:	and	r0, r0, #56	; 0x38
   13c60:	cmp	r0, #24
   13c64:	bne	13ce0 <__assert_fail@plt+0x2900>
   13c68:	ldr	r0, [sl, #84]	; 0x54
   13c6c:	cmp	r0, #2
   13c70:	bne	13ce0 <__assert_fail@plt+0x2900>
   13c74:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13c78:	mov	r0, sl
   13c7c:	bl	147f8 <__assert_fail@plt+0x3418>
   13c80:	movw	r1, #26984	; 0x6968
   13c84:	cmp	r0, r1
   13c88:	ble	13cc8 <__assert_fail@plt+0x28e8>
   13c8c:	movw	r1, #26985	; 0x6969
   13c90:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13c94:	cmp	r0, r1
   13c98:	movwne	r1, #16719	; 0x414f
   13c9c:	movtne	r1, #21318	; 0x5346
   13ca0:	cmpne	r0, r1
   13ca4:	beq	13ce0 <__assert_fail@plt+0x2900>
   13ca8:	movw	r1, #40864	; 0x9fa0
   13cac:	cmp	r0, r1
   13cb0:	beq	13ce0 <__assert_fail@plt+0x2900>
   13cb4:	b	13c3c <__assert_fail@plt+0x285c>
   13cb8:	bl	11290 <__errno_location@plt>
   13cbc:	mov	r1, #12
   13cc0:	str	r1, [r0]
   13cc4:	b	14434 <__assert_fail@plt+0x3054>
   13cc8:	movw	r1, #19778	; 0x4d42
   13ccc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13cd0:	movt	r1, #65363	; 0xff53
   13cd4:	cmp	r0, r1
   13cd8:	cmpne	r0, #0
   13cdc:	bne	13c3c <__assert_fail@plt+0x285c>
   13ce0:	sub	r0, r4, #3
   13ce4:	mov	r8, r4
   13ce8:	mov	r5, #1
   13cec:	clz	r0, r0
   13cf0:	lsr	r4, r0, #5
   13cf4:	ldrb	r0, [r7, #49]	; 0x31
   13cf8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13cfc:	tst	r0, #2
   13d00:	beq	13d20 <__assert_fail@plt+0x2940>
   13d04:	mov	r0, r2
   13d08:	movw	r1, #1030	; 0x406
   13d0c:	mov	r2, #3
   13d10:	bl	18718 <__assert_fail@plt+0x7338>
   13d14:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13d18:	mov	r2, r0
   13d1c:	str	r0, [fp, #-32]	; 0xffffffe0
   13d20:	cmp	r2, #0
   13d24:	bmi	13d44 <__assert_fail@plt+0x2964>
   13d28:	mov	r0, r7
   13d2c:	mov	r1, sl
   13d30:	mov	r3, #0
   13d34:	bl	138d0 <__assert_fail@plt+0x24f0>
   13d38:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13d3c:	cmp	r0, #0
   13d40:	beq	13dac <__assert_fail@plt+0x29cc>
   13d44:	and	r0, r4, r5
   13d48:	cmp	r0, #1
   13d4c:	bne	13d5c <__assert_fail@plt+0x297c>
   13d50:	bl	11290 <__errno_location@plt>
   13d54:	ldr	r0, [r0]
   13d58:	str	r0, [sl, #32]
   13d5c:	ldrh	r0, [sl, #58]	; 0x3a
   13d60:	orr	r0, r0, #1
   13d64:	strh	r0, [sl, #58]	; 0x3a
   13d68:	ldr	r0, [sl, #12]
   13d6c:	bl	113d4 <closedir@plt>
   13d70:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13d74:	mov	r4, #0
   13d78:	str	r4, [sl, #12]
   13d7c:	ldrb	r0, [r7, #49]	; 0x31
   13d80:	tst	r0, #2
   13d84:	beq	13d9c <__assert_fail@plt+0x29bc>
   13d88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13d8c:	cmp	r0, #0
   13d90:	bmi	13d9c <__assert_fail@plt+0x29bc>
   13d94:	bl	113bc <close@plt>
   13d98:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13d9c:	str	r4, [sl, #12]
   13da0:	mov	ip, #1
   13da4:	mov	r4, r8
   13da8:	b	13db4 <__assert_fail@plt+0x29d4>
   13dac:	mov	r4, r8
   13db0:	mov	ip, #0
   13db4:	ldr	r0, [sl, #40]	; 0x28
   13db8:	ldr	r1, [sl, #28]
   13dbc:	mov	r5, #0
   13dc0:	str	r4, [sp, #12]
   13dc4:	sub	r2, r0, #1
   13dc8:	ldrb	r1, [r1, r2]
   13dcc:	cmp	r1, #47	; 0x2f
   13dd0:	ldrb	r1, [r7, #48]	; 0x30
   13dd4:	moveq	r0, r2
   13dd8:	tst	r1, #4
   13ddc:	mov	r1, #0
   13de0:	str	r1, [sp, #40]	; 0x28
   13de4:	beq	13dfc <__assert_fail@plt+0x2a1c>
   13de8:	ldr	r1, [r7, #24]
   13dec:	mov	r2, #47	; 0x2f
   13df0:	strb	r2, [r1, r0]!
   13df4:	add	r1, r1, #1
   13df8:	str	r1, [sp, #40]	; 0x28
   13dfc:	ldr	r4, [sl, #12]
   13e00:	add	r1, r0, #1
   13e04:	str	r1, [sp, #48]	; 0x30
   13e08:	cmp	r4, #0
   13e0c:	beq	14150 <__assert_fail@plt+0x2d70>
   13e10:	ldr	r0, [sl, #48]	; 0x30
   13e14:	str	ip, [sp, #4]
   13e18:	str	r9, [sp, #8]
   13e1c:	add	r0, r0, #1
   13e20:	str	r0, [sp, #28]
   13e24:	ldr	r0, [r7, #36]	; 0x24
   13e28:	sub	r0, r0, r1
   13e2c:	str	r0, [fp, #-44]	; 0xffffffd4
   13e30:	bl	11290 <__errno_location@plt>
   13e34:	str	r0, [sp, #36]	; 0x24
   13e38:	mov	r0, #0
   13e3c:	mov	r1, #0
   13e40:	mov	r5, #0
   13e44:	mov	r8, #0
   13e48:	mov	r9, #0
   13e4c:	str	r0, [sp, #20]
   13e50:	mov	r0, #0
   13e54:	str	r0, [sp, #16]
   13e58:	ldr	r0, [sp, #36]	; 0x24
   13e5c:	str	r5, [fp, #-40]	; 0xffffffd8
   13e60:	mov	r5, sl
   13e64:	str	r1, [r0]
   13e68:	mov	r0, r4
   13e6c:	bl	1132c <readdir64@plt>
   13e70:	cmp	r0, #0
   13e74:	beq	141ac <__assert_fail@plt+0x2dcc>
   13e78:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13e7c:	mov	sl, r0
   13e80:	ldrb	r0, [r7, #48]	; 0x30
   13e84:	tst	r0, #32
   13e88:	bne	13eb8 <__assert_fail@plt+0x2ad8>
   13e8c:	ldrb	r0, [sl, #19]
   13e90:	cmp	r0, #46	; 0x2e
   13e94:	bne	13eb8 <__assert_fail@plt+0x2ad8>
   13e98:	ldrb	r0, [sl, #20]
   13e9c:	cmp	r0, #0
   13ea0:	beq	140f4 <__assert_fail@plt+0x2d14>
   13ea4:	cmp	r0, #46	; 0x2e
   13ea8:	bne	13eb8 <__assert_fail@plt+0x2ad8>
   13eac:	ldrb	r0, [sl, #21]
   13eb0:	cmp	r0, #0
   13eb4:	beq	140f4 <__assert_fail@plt+0x2d14>
   13eb8:	add	r6, sl, #19
   13ebc:	str	r9, [sp, #44]	; 0x2c
   13ec0:	mov	r0, r6
   13ec4:	bl	1126c <strlen@plt>
   13ec8:	mov	r4, r0
   13ecc:	mov	r0, r7
   13ed0:	mov	r1, r6
   13ed4:	mov	r2, r4
   13ed8:	bl	12cb4 <__assert_fail@plt+0x18d4>
   13edc:	mov	r9, r0
   13ee0:	cmp	r0, #0
   13ee4:	beq	14164 <__assert_fail@plt+0x2d84>
   13ee8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13eec:	cmp	r4, r0
   13ef0:	bcs	13f04 <__assert_fail@plt+0x2b24>
   13ef4:	ldr	r2, [sp, #48]	; 0x30
   13ef8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13efc:	add	r4, r4, r2
   13f00:	b	13f64 <__assert_fail@plt+0x2b84>
   13f04:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13f08:	ldr	r0, [sp, #48]	; 0x30
   13f0c:	ldr	r6, [r7, #24]
   13f10:	add	r4, r4, r0
   13f14:	mov	r0, r7
   13f18:	add	r1, r4, #1
   13f1c:	bl	12c40 <__assert_fail@plt+0x1860>
   13f20:	cmp	r0, #0
   13f24:	beq	14164 <__assert_fail@plt+0x2d84>
   13f28:	ldr	r0, [r7, #24]
   13f2c:	cmp	r6, r0
   13f30:	beq	13f58 <__assert_fail@plt+0x2b78>
   13f34:	ldrb	r1, [r7, #48]	; 0x30
   13f38:	ldr	r2, [sp, #48]	; 0x30
   13f3c:	tst	r1, #4
   13f40:	ldr	r1, [sp, #40]	; 0x28
   13f44:	addne	r1, r0, r2
   13f48:	mov	r0, #1
   13f4c:	str	r1, [sp, #40]	; 0x28
   13f50:	str	r0, [sp, #16]
   13f54:	b	13f5c <__assert_fail@plt+0x2b7c>
   13f58:	ldr	r2, [sp, #48]	; 0x30
   13f5c:	ldr	r0, [r7, #36]	; 0x24
   13f60:	sub	r0, r0, r2
   13f64:	cmp	r4, r2
   13f68:	bcc	14208 <__assert_fail@plt+0x2e28>
   13f6c:	ldr	r1, [sp, #28]
   13f70:	str	r0, [fp, #-44]	; 0xffffffd4
   13f74:	add	r0, r9, #160	; 0xa0
   13f78:	str	r1, [r9, #48]	; 0x30
   13f7c:	ldr	r1, [r7]
   13f80:	str	r4, [r9, #40]	; 0x28
   13f84:	str	r1, [r9, #4]
   13f88:	ldrd	r2, [sl]
   13f8c:	strd	r2, [r0]
   13f90:	ldrb	r0, [r7, #48]	; 0x30
   13f94:	tst	r0, #4
   13f98:	bne	13fa8 <__assert_fail@plt+0x2bc8>
   13f9c:	add	r0, r9, #168	; 0xa8
   13fa0:	str	r0, [r9, #24]
   13fa4:	b	13fc8 <__assert_fail@plt+0x2be8>
   13fa8:	ldr	r0, [r9, #28]
   13fac:	ldr	r2, [r9, #52]	; 0x34
   13fb0:	add	r1, r9, #168	; 0xa8
   13fb4:	str	r0, [r9, #24]
   13fb8:	ldr	r0, [sp, #40]	; 0x28
   13fbc:	add	r2, r2, #1
   13fc0:	bl	11134 <memmove@plt>
   13fc4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13fc8:	ldr	r0, [r7, #44]	; 0x2c
   13fcc:	ldr	r2, [r7, #48]	; 0x30
   13fd0:	cmp	r0, #0
   13fd4:	beq	14008 <__assert_fail@plt+0x2c28>
   13fd8:	ands	r0, r2, #1024	; 0x400
   13fdc:	bne	14008 <__assert_fail@plt+0x2c28>
   13fe0:	mov	r0, r7
   13fe4:	mov	r1, r9
   13fe8:	mov	r2, #0
   13fec:	bl	12d34 <__assert_fail@plt+0x1954>
   13ff0:	mov	sl, r5
   13ff4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13ff8:	ldr	r5, [fp, #-40]	; 0xffffffd8
   13ffc:	mov	r1, #0
   14000:	strh	r0, [r9, #56]	; 0x38
   14004:	b	14088 <__assert_fail@plt+0x2ca8>
   14008:	ldrb	r3, [sl, #18]
   1400c:	mov	r0, #0
   14010:	tst	r2, #8
   14014:	mov	r1, #0
   14018:	beq	1403c <__assert_fail@plt+0x2c5c>
   1401c:	orr	r1, r3, #4
   14020:	cmp	r1, #4
   14024:	mov	r1, #0
   14028:	beq	1403c <__assert_fail@plt+0x2c5c>
   1402c:	eor	r1, r3, #10
   14030:	and	r2, r2, #16
   14034:	orrs	r1, r2, r1
   14038:	movwne	r1, #1
   1403c:	mov	r6, #11
   14040:	mov	sl, r5
   14044:	sub	r3, r3, #1
   14048:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1404c:	add	r2, r9, #112	; 0x70
   14050:	strh	r6, [r9, #56]	; 0x38
   14054:	uxtb	r6, r3
   14058:	cmp	r6, #11
   1405c:	bhi	14070 <__assert_fail@plt+0x2c90>
   14060:	sxtb	r0, r3
   14064:	movw	r3, #39128	; 0x98d8
   14068:	movt	r3, #1
   1406c:	ldr	r0, [r3, r0, lsl #2]
   14070:	cmp	r1, #0
   14074:	str	r0, [r9, #80]	; 0x50
   14078:	mov	r0, #2
   1407c:	mov	r1, #0
   14080:	movwne	r0, #1
   14084:	strd	r0, [r2]
   14088:	cmp	r5, #0
   1408c:	str	r1, [r9, #8]
   14090:	mov	r4, r9
   14094:	ldrne	r0, [sp, #44]	; 0x2c
   14098:	movne	r4, r5
   1409c:	strne	r9, [r0, #8]
   140a0:	movw	r0, #10000	; 0x2710
   140a4:	cmp	r8, r0
   140a8:	bne	14120 <__assert_fail@plt+0x2d40>
   140ac:	ldr	r0, [sp, #24]
   140b0:	ldr	r0, [r0]
   140b4:	cmp	r0, #0
   140b8:	bne	14120 <__assert_fail@plt+0x2d40>
   140bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   140c0:	mov	r0, sl
   140c4:	bl	147f8 <__assert_fail@plt+0x3418>
   140c8:	mov	r1, #0
   140cc:	str	r1, [sp, #20]
   140d0:	movw	r1, #19778	; 0x4d42
   140d4:	movt	r1, #65363	; 0xff53
   140d8:	cmp	r0, r1
   140dc:	movwne	r1, #26985	; 0x6969
   140e0:	cmpne	r0, r1
   140e4:	bne	14104 <__assert_fail@plt+0x2d24>
   140e8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   140ec:	mov	r1, #0
   140f0:	b	14120 <__assert_fail@plt+0x2d40>
   140f4:	mov	sl, r5
   140f8:	ldr	r5, [fp, #-40]	; 0xffffffd8
   140fc:	mov	r1, #0
   14100:	b	14134 <__assert_fail@plt+0x2d54>
   14104:	movw	r1, #6548	; 0x1994
   14108:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1410c:	movt	r1, #258	; 0x102
   14110:	cmp	r0, r1
   14114:	mov	r1, #0
   14118:	movne	r0, #1
   1411c:	strne	r0, [sp, #20]
   14120:	ldr	r0, [sp, #32]
   14124:	add	r8, r8, #1
   14128:	cmp	r0, r8
   1412c:	bls	14250 <__assert_fail@plt+0x2e70>
   14130:	mov	r5, r4
   14134:	ldr	r4, [sl, #12]
   14138:	cmp	r4, #0
   1413c:	bne	13e58 <__assert_fail@plt+0x2a78>
   14140:	ldr	r0, [sp, #16]
   14144:	ldr	r4, [sp, #12]
   14148:	ldr	r9, [sp, #8]
   1414c:	b	141fc <__assert_fail@plt+0x2e1c>
   14150:	ldr	r4, [sp, #12]
   14154:	mov	r8, #0
   14158:	mov	r0, #0
   1415c:	str	r0, [sp, #20]
   14160:	b	142f8 <__assert_fail@plt+0x2f18>
   14164:	ldr	r6, [sp, #36]	; 0x24
   14168:	mov	r0, r9
   1416c:	ldr	r4, [r6]
   14170:	bl	18988 <__assert_fail@plt+0x75a8>
   14174:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14178:	bl	13020 <__assert_fail@plt+0x1c40>
   1417c:	ldr	r0, [r5, #12]
   14180:	mov	r8, r5
   14184:	bl	113d4 <closedir@plt>
   14188:	mov	r0, #7
   1418c:	strh	r0, [r5, #56]	; 0x38
   14190:	mov	r5, #0
   14194:	str	r5, [r8, #12]
   14198:	ldr	r0, [r7, #48]	; 0x30
   1419c:	orr	r0, r0, #8192	; 0x2000
   141a0:	str	r0, [r7, #48]	; 0x30
   141a4:	str	r4, [r6]
   141a8:	b	14434 <__assert_fail@plt+0x3054>
   141ac:	ldr	r0, [sp, #36]	; 0x24
   141b0:	ldr	r9, [sp, #8]
   141b4:	mov	sl, r5
   141b8:	ldr	r0, [r0]
   141bc:	cmp	r0, #0
   141c0:	beq	141d8 <__assert_fail@plt+0x2df8>
   141c4:	str	r0, [sl, #32]
   141c8:	orrs	r0, r9, r8
   141cc:	mov	r0, #4
   141d0:	movwne	r0, #7
   141d4:	strh	r0, [sl, #56]	; 0x38
   141d8:	ldr	r0, [sl, #12]
   141dc:	ldr	r4, [sp, #12]
   141e0:	ldr	r5, [fp, #-40]	; 0xffffffd8
   141e4:	cmp	r0, #0
   141e8:	beq	141f8 <__assert_fail@plt+0x2e18>
   141ec:	bl	113d4 <closedir@plt>
   141f0:	mov	r0, #0
   141f4:	str	r0, [sl, #12]
   141f8:	ldr	r0, [sp, #16]
   141fc:	tst	r0, #1
   14200:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14204:	b	14264 <__assert_fail@plt+0x2e84>
   14208:	mov	r0, r9
   1420c:	bl	18988 <__assert_fail@plt+0x75a8>
   14210:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14214:	bl	13020 <__assert_fail@plt+0x1c40>
   14218:	ldr	r0, [r5, #12]
   1421c:	mov	r8, r5
   14220:	bl	113d4 <closedir@plt>
   14224:	mov	r0, #7
   14228:	ldr	r1, [sp, #36]	; 0x24
   1422c:	strh	r0, [r5, #56]	; 0x38
   14230:	mov	r5, #0
   14234:	str	r5, [r8, #12]
   14238:	ldr	r0, [r7, #48]	; 0x30
   1423c:	orr	r0, r0, #8192	; 0x2000
   14240:	str	r0, [r7, #48]	; 0x30
   14244:	mov	r0, #36	; 0x24
   14248:	str	r0, [r1]
   1424c:	b	14434 <__assert_fail@plt+0x3054>
   14250:	ldr	r0, [sp, #16]
   14254:	mov	r5, r4
   14258:	ldr	r4, [sp, #12]
   1425c:	ldr	r9, [sp, #8]
   14260:	tst	r0, #1
   14264:	ldr	ip, [sp, #4]
   14268:	beq	142f8 <__assert_fail@plt+0x2f18>
   1426c:	ldr	r1, [r7, #4]
   14270:	ldr	r0, [r7, #24]
   14274:	cmp	r1, #0
   14278:	beq	142a8 <__assert_fail@plt+0x2ec8>
   1427c:	ldr	r2, [r1, #24]
   14280:	add	r3, r1, #168	; 0xa8
   14284:	cmp	r2, r3
   14288:	beq	1429c <__assert_fail@plt+0x2ebc>
   1428c:	ldr	r3, [r1, #28]
   14290:	sub	r2, r2, r3
   14294:	add	r2, r0, r2
   14298:	str	r2, [r1, #24]
   1429c:	str	r0, [r1, #28]
   142a0:	ldr	r1, [r1, #8]
   142a4:	b	14274 <__assert_fail@plt+0x2e94>
   142a8:	ldr	r1, [r5, #48]	; 0x30
   142ac:	cmp	r1, #0
   142b0:	bmi	142f8 <__assert_fail@plt+0x2f18>
   142b4:	mov	r1, r5
   142b8:	ldr	r2, [r1, #24]
   142bc:	add	r3, r1, #168	; 0xa8
   142c0:	cmp	r2, r3
   142c4:	beq	142d8 <__assert_fail@plt+0x2ef8>
   142c8:	ldr	r3, [r1, #28]
   142cc:	sub	r2, r2, r3
   142d0:	add	r2, r0, r2
   142d4:	str	r2, [r1, #24]
   142d8:	str	r0, [r1, #28]
   142dc:	ldr	r2, [r1, #8]
   142e0:	cmp	r2, #0
   142e4:	ldreq	r2, [r1, #4]
   142e8:	ldr	r1, [r2, #48]	; 0x30
   142ec:	cmn	r1, #1
   142f0:	mov	r1, r2
   142f4:	bgt	142b8 <__assert_fail@plt+0x2ed8>
   142f8:	ldrb	r0, [r7, #48]	; 0x30
   142fc:	tst	r0, #4
   14300:	beq	1432c <__assert_fail@plt+0x2f4c>
   14304:	ldr	r2, [sp, #40]	; 0x28
   14308:	ldr	r0, [r7, #36]	; 0x24
   1430c:	ldr	r3, [sp, #48]	; 0x30
   14310:	cmp	r3, r0
   14314:	sub	r1, r2, #1
   14318:	mov	r0, #0
   1431c:	moveq	r2, r1
   14320:	cmp	r8, #0
   14324:	moveq	r2, r1
   14328:	strb	r0, [r2]
   1432c:	cmp	r9, #0
   14330:	movwne	r9, #1
   14334:	orrs	r0, r9, ip
   14338:	beq	14364 <__assert_fail@plt+0x2f84>
   1433c:	cmp	r8, #0
   14340:	bne	14398 <__assert_fail@plt+0x2fb8>
   14344:	cmp	r4, #3
   14348:	bne	14428 <__assert_fail@plt+0x3048>
   1434c:	ldrh	r0, [sl, #56]	; 0x38
   14350:	cmp	r0, #4
   14354:	cmpne	r0, #7
   14358:	movne	r0, #6
   1435c:	strhne	r0, [sl, #56]	; 0x38
   14360:	b	14428 <__assert_fail@plt+0x3048>
   14364:	cmp	r4, #1
   14368:	cmpne	r8, #0
   1436c:	bne	14398 <__assert_fail@plt+0x2fb8>
   14370:	ldr	r0, [sl, #48]	; 0x30
   14374:	cmp	r0, #0
   14378:	beq	14400 <__assert_fail@plt+0x3020>
   1437c:	ldr	r1, [sl, #4]
   14380:	movw	r3, #39123	; 0x98d3
   14384:	mov	r0, r7
   14388:	mvn	r2, #0
   1438c:	movt	r3, #1
   14390:	bl	138d0 <__assert_fail@plt+0x24f0>
   14394:	b	14408 <__assert_fail@plt+0x3028>
   14398:	ldr	r0, [sp, #20]
   1439c:	tst	r0, #1
   143a0:	beq	143d0 <__assert_fail@plt+0x2ff0>
   143a4:	movw	r0, #18368	; 0x47c0
   143a8:	mov	r1, r5
   143ac:	mov	r2, r8
   143b0:	movt	r0, #1
   143b4:	str	r0, [r7, #44]	; 0x2c
   143b8:	mov	r0, r7
   143bc:	bl	12e70 <__assert_fail@plt+0x1a90>
   143c0:	mov	r5, r0
   143c4:	mov	r0, #0
   143c8:	str	r0, [r7, #44]	; 0x2c
   143cc:	b	14434 <__assert_fail@plt+0x3054>
   143d0:	cmp	r8, #2
   143d4:	bcc	14434 <__assert_fail@plt+0x3054>
   143d8:	ldr	r0, [sp, #24]
   143dc:	ldr	r0, [r0]
   143e0:	cmp	r0, #0
   143e4:	beq	14434 <__assert_fail@plt+0x3054>
   143e8:	mov	r0, r7
   143ec:	mov	r1, r5
   143f0:	mov	r2, r8
   143f4:	bl	12e70 <__assert_fail@plt+0x1a90>
   143f8:	mov	r5, r0
   143fc:	b	14434 <__assert_fail@plt+0x3054>
   14400:	mov	r0, r7
   14404:	bl	14440 <__assert_fail@plt+0x3060>
   14408:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1440c:	cmp	r0, #0
   14410:	beq	1433c <__assert_fail@plt+0x2f5c>
   14414:	mov	r0, #7
   14418:	strh	r0, [sl, #56]	; 0x38
   1441c:	ldr	r0, [r7, #48]	; 0x30
   14420:	orr	r0, r0, #8192	; 0x2000
   14424:	str	r0, [r7, #48]	; 0x30
   14428:	mov	r0, r5
   1442c:	bl	13020 <__assert_fail@plt+0x1c40>
   14430:	mov	r5, #0
   14434:	mov	r0, r5
   14438:	sub	sp, fp, #28
   1443c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14440:	push	{r4, r5, fp, lr}
   14444:	add	fp, sp, #8
   14448:	mov	r4, r0
   1444c:	ldr	r0, [r0, #48]	; 0x30
   14450:	mov	r5, #0
   14454:	tst	r0, #4
   14458:	bne	1448c <__assert_fail@plt+0x30ac>
   1445c:	tst	r0, #512	; 0x200
   14460:	bne	1447c <__assert_fail@plt+0x309c>
   14464:	ldr	r0, [r4, #28]
   14468:	bl	11350 <fchdir@plt>
   1446c:	cmp	r0, #0
   14470:	mov	r5, r0
   14474:	movwne	r5, #1
   14478:	b	1448c <__assert_fail@plt+0x30ac>
   1447c:	mov	r0, r4
   14480:	mvn	r1, #99	; 0x63
   14484:	mov	r2, #1
   14488:	bl	14558 <__assert_fail@plt+0x3178>
   1448c:	add	r0, r4, #60	; 0x3c
   14490:	bl	13188 <__assert_fail@plt+0x1da8>
   14494:	mov	r0, r5
   14498:	pop	{r4, r5, fp, pc}
   1449c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   144a0:	add	fp, sp, #24
   144a4:	mov	r6, r0
   144a8:	ldrh	r0, [r0, #48]	; 0x30
   144ac:	mov	r4, r1
   144b0:	add	r5, r1, #64	; 0x40
   144b4:	movw	r1, #258	; 0x102
   144b8:	tst	r0, r1
   144bc:	beq	14530 <__assert_fail@plt+0x3150>
   144c0:	mov	r0, #24
   144c4:	bl	18490 <__assert_fail@plt+0x70b0>
   144c8:	mov	r8, #0
   144cc:	cmp	r0, #0
   144d0:	beq	14550 <__assert_fail@plt+0x3170>
   144d4:	ldrd	r2, [r5]
   144d8:	mov	r7, r0
   144dc:	add	r0, r4, #160	; 0xa0
   144e0:	stm	r7, {r2, r3}
   144e4:	add	r2, r7, #8
   144e8:	ldrd	r0, [r0]
   144ec:	stm	r2, {r0, r1, r4}
   144f0:	mov	r1, r7
   144f4:	ldr	r0, [r6, #56]	; 0x38
   144f8:	bl	15760 <__assert_fail@plt+0x4380>
   144fc:	cmp	r0, r7
   14500:	beq	14528 <__assert_fail@plt+0x3148>
   14504:	mov	r5, r0
   14508:	mov	r0, r7
   1450c:	bl	18988 <__assert_fail@plt+0x75a8>
   14510:	cmp	r5, #0
   14514:	beq	14550 <__assert_fail@plt+0x3170>
   14518:	ldr	r0, [r5, #16]
   1451c:	mov	r1, #2
   14520:	strh	r1, [r4, #56]	; 0x38
   14524:	str	r0, [r4]
   14528:	mov	r8, #1
   1452c:	b	14550 <__assert_fail@plt+0x3170>
   14530:	ldr	r0, [r6, #56]	; 0x38
   14534:	mov	r1, r5
   14538:	bl	185ac <__assert_fail@plt+0x71cc>
   1453c:	cmp	r0, #0
   14540:	mov	r8, #1
   14544:	movne	r0, #2
   14548:	strhne	r0, [r4, #56]	; 0x38
   1454c:	strne	r4, [r4]
   14550:	mov	r0, r8
   14554:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14558:	push	{r4, r5, fp, lr}
   1455c:	add	fp, sp, #8
   14560:	mov	r4, r1
   14564:	ldr	r1, [r0, #32]
   14568:	mov	r5, r0
   1456c:	cmp	r1, r4
   14570:	bne	1457c <__assert_fail@plt+0x319c>
   14574:	cmn	r1, #100	; 0x64
   14578:	bne	145bc <__assert_fail@plt+0x31dc>
   1457c:	cmp	r2, #0
   14580:	beq	14598 <__assert_fail@plt+0x31b8>
   14584:	add	r0, r5, #60	; 0x3c
   14588:	bl	158e0 <__assert_fail@plt+0x4500>
   1458c:	cmp	r0, #0
   14590:	bpl	145b0 <__assert_fail@plt+0x31d0>
   14594:	b	145b4 <__assert_fail@plt+0x31d4>
   14598:	cmp	r1, #0
   1459c:	bmi	145b4 <__assert_fail@plt+0x31d4>
   145a0:	ldr	r0, [r5, #48]	; 0x30
   145a4:	ands	r0, r0, #4
   145a8:	bne	145b4 <__assert_fail@plt+0x31d4>
   145ac:	mov	r0, r1
   145b0:	bl	113bc <close@plt>
   145b4:	str	r4, [r5, #32]
   145b8:	pop	{r4, r5, fp, pc}
   145bc:	bl	113b0 <abort@plt>
   145c0:	push	{fp, lr}
   145c4:	mov	fp, sp
   145c8:	cmp	r2, #5
   145cc:	bcc	145e4 <__assert_fail@plt+0x3204>
   145d0:	bl	11290 <__errno_location@plt>
   145d4:	mov	r1, #22
   145d8:	str	r1, [r0]
   145dc:	mov	r0, #1
   145e0:	pop	{fp, pc}
   145e4:	mov	r0, #0
   145e8:	strh	r2, [r1, #60]	; 0x3c
   145ec:	pop	{fp, pc}
   145f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145f4:	add	fp, sp, #28
   145f8:	sub	sp, sp, #4
   145fc:	mov	r5, r0
   14600:	mvn	r0, #4096	; 0x1000
   14604:	tst	r1, r0
   14608:	beq	14620 <__assert_fail@plt+0x3240>
   1460c:	bl	11290 <__errno_location@plt>
   14610:	mov	r1, #22
   14614:	mov	r4, #0
   14618:	str	r1, [r0]
   1461c:	b	1471c <__assert_fail@plt+0x333c>
   14620:	ldr	r6, [r5]
   14624:	mov	r7, r1
   14628:	bl	11290 <__errno_location@plt>
   1462c:	mov	r4, #0
   14630:	mov	sl, r0
   14634:	str	r4, [r0]
   14638:	ldrb	r0, [r5, #49]	; 0x31
   1463c:	tst	r0, #32
   14640:	bne	1471c <__assert_fail@plt+0x333c>
   14644:	ldrh	r0, [r6, #56]	; 0x38
   14648:	cmp	r0, #1
   1464c:	beq	1465c <__assert_fail@plt+0x327c>
   14650:	cmp	r0, #9
   14654:	ldreq	r4, [r6, #8]
   14658:	b	1471c <__assert_fail@plt+0x333c>
   1465c:	ldr	r0, [r5, #4]
   14660:	cmp	r0, #0
   14664:	blne	13020 <__assert_fail@plt+0x1c40>
   14668:	mov	r9, #1
   1466c:	cmp	r7, #4096	; 0x1000
   14670:	bne	14684 <__assert_fail@plt+0x32a4>
   14674:	ldr	r0, [r5, #48]	; 0x30
   14678:	mov	r9, #2
   1467c:	orr	r0, r0, #4096	; 0x1000
   14680:	str	r0, [r5, #48]	; 0x30
   14684:	ldr	r0, [r6, #48]	; 0x30
   14688:	cmp	r0, #0
   1468c:	bne	14708 <__assert_fail@plt+0x3328>
   14690:	ldr	r0, [r6, #24]
   14694:	ldrb	r0, [r0]
   14698:	cmp	r0, #47	; 0x2f
   1469c:	beq	14708 <__assert_fail@plt+0x3328>
   146a0:	ldrb	r0, [r5, #48]	; 0x30
   146a4:	tst	r0, #4
   146a8:	bne	14708 <__assert_fail@plt+0x3328>
   146ac:	movw	r1, #39124	; 0x98d4
   146b0:	mov	r0, r5
   146b4:	movt	r1, #1
   146b8:	bl	12ff0 <__assert_fail@plt+0x1c10>
   146bc:	cmn	r0, #1
   146c0:	ble	14728 <__assert_fail@plt+0x3348>
   146c4:	mov	r8, r0
   146c8:	mov	r0, r5
   146cc:	mov	r1, r9
   146d0:	bl	13ab0 <__assert_fail@plt+0x26d0>
   146d4:	str	r0, [r5, #4]
   146d8:	ldrb	r0, [r5, #49]	; 0x31
   146dc:	tst	r0, #2
   146e0:	bne	14734 <__assert_fail@plt+0x3354>
   146e4:	mov	r0, r8
   146e8:	bl	11350 <fchdir@plt>
   146ec:	cmp	r0, #0
   146f0:	beq	14748 <__assert_fail@plt+0x3368>
   146f4:	ldr	r5, [sl]
   146f8:	mov	r0, r8
   146fc:	bl	113bc <close@plt>
   14700:	str	r5, [sl]
   14704:	b	1471c <__assert_fail@plt+0x333c>
   14708:	mov	r0, r5
   1470c:	mov	r1, r9
   14710:	bl	13ab0 <__assert_fail@plt+0x26d0>
   14714:	mov	r4, r0
   14718:	str	r0, [r5, #4]
   1471c:	mov	r0, r4
   14720:	sub	sp, fp, #28
   14724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14728:	mov	r4, #0
   1472c:	str	r4, [r5, #4]
   14730:	b	1471c <__assert_fail@plt+0x333c>
   14734:	mov	r0, r5
   14738:	mov	r1, r8
   1473c:	mov	r2, #1
   14740:	bl	14558 <__assert_fail@plt+0x3178>
   14744:	b	14750 <__assert_fail@plt+0x3370>
   14748:	mov	r0, r8
   1474c:	bl	113bc <close@plt>
   14750:	ldr	r4, [r5, #4]
   14754:	b	1471c <__assert_fail@plt+0x333c>
   14758:	push	{fp, lr}
   1475c:	mov	fp, sp
   14760:	mov	r2, r1
   14764:	ldrd	r0, [r0, #8]
   14768:	mov	r3, #0
   1476c:	bl	18c38 <__assert_fail@plt+0x7858>
   14770:	mov	r0, r2
   14774:	pop	{fp, pc}
   14778:	push	{r4, r5, fp, lr}
   1477c:	add	fp, sp, #8
   14780:	ldrd	r2, [r1, #8]
   14784:	ldrd	r4, [r0, #8]
   14788:	eor	r3, r5, r3
   1478c:	eor	r2, r4, r2
   14790:	orrs	r2, r2, r3
   14794:	mov	r2, #0
   14798:	bne	147b8 <__assert_fail@plt+0x33d8>
   1479c:	ldrd	r2, [r1]
   147a0:	ldrd	r0, [r0]
   147a4:	eor	r1, r1, r3
   147a8:	eor	r0, r0, r2
   147ac:	orr	r0, r0, r1
   147b0:	clz	r0, r0
   147b4:	lsr	r2, r0, #5
   147b8:	mov	r0, r2
   147bc:	pop	{r4, r5, fp, pc}
   147c0:	push	{r4, r5, fp, lr}
   147c4:	add	fp, sp, #8
   147c8:	ldr	r0, [r0]
   147cc:	ldrd	r2, [r0, #160]	; 0xa0
   147d0:	ldr	r0, [r1]
   147d4:	ldrd	r4, [r0, #160]	; 0xa0
   147d8:	mov	r0, #0
   147dc:	subs	r1, r4, r2
   147e0:	sbcs	r1, r5, r3
   147e4:	movwcc	r0, #1
   147e8:	subs	r1, r2, r4
   147ec:	sbcs	r1, r3, r5
   147f0:	subcc	r0, r0, #1
   147f4:	pop	{r4, r5, fp, pc}
   147f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   147fc:	add	fp, sp, #24
   14800:	sub	sp, sp, #96	; 0x60
   14804:	ldr	r7, [r0, #44]	; 0x2c
   14808:	mov	r4, r0
   1480c:	mov	r5, #0
   14810:	ldrb	r0, [r7, #49]	; 0x31
   14814:	tst	r0, #2
   14818:	beq	1490c <__assert_fail@plt+0x352c>
   1481c:	ldr	r6, [r7, #52]	; 0x34
   14820:	mov	r9, r1
   14824:	cmp	r6, #0
   14828:	bne	14868 <__assert_fail@plt+0x3488>
   1482c:	movw	r0, #35208	; 0x8988
   14830:	movw	r2, #18712	; 0x4918
   14834:	movw	r3, #18744	; 0x4938
   14838:	mov	r1, #0
   1483c:	mov	r8, #0
   14840:	movt	r0, #1
   14844:	movt	r2, #1
   14848:	movt	r3, #1
   1484c:	str	r0, [sp]
   14850:	mov	r0, #13
   14854:	bl	14de4 <__assert_fail@plt+0x3a04>
   14858:	mov	r6, r0
   1485c:	cmp	r0, #0
   14860:	str	r0, [r7, #52]	; 0x34
   14864:	beq	14898 <__assert_fail@plt+0x34b8>
   14868:	ldrd	r0, [r4, #64]	; 0x40
   1486c:	str	r1, [sp, #12]
   14870:	str	r0, [sp, #8]
   14874:	add	r1, sp, #8
   14878:	mov	r0, r6
   1487c:	bl	14b30 <__assert_fail@plt+0x3750>
   14880:	cmp	r0, #0
   14884:	beq	14890 <__assert_fail@plt+0x34b0>
   14888:	ldr	r5, [r0, #8]
   1488c:	b	1490c <__assert_fail@plt+0x352c>
   14890:	mov	r8, #1
   14894:	b	1489c <__assert_fail@plt+0x34bc>
   14898:	mov	r6, #0
   1489c:	cmp	r9, #0
   148a0:	bmi	1490c <__assert_fail@plt+0x352c>
   148a4:	add	r1, sp, #8
   148a8:	mov	r0, r9
   148ac:	bl	110ec <fstatfs64@plt>
   148b0:	cmp	r0, #0
   148b4:	bne	1490c <__assert_fail@plt+0x352c>
   148b8:	cmp	r8, #0
   148bc:	beq	14908 <__assert_fail@plt+0x3528>
   148c0:	mov	r0, #16
   148c4:	bl	18490 <__assert_fail@plt+0x70b0>
   148c8:	cmp	r0, #0
   148cc:	beq	14908 <__assert_fail@plt+0x3528>
   148d0:	mov	r5, r0
   148d4:	ldrd	r0, [r4, #64]	; 0x40
   148d8:	ldr	r2, [sp, #8]
   148dc:	stm	r5, {r0, r1, r2}
   148e0:	mov	r0, r6
   148e4:	mov	r1, r5
   148e8:	bl	15760 <__assert_fail@plt+0x4380>
   148ec:	cmp	r0, #0
   148f0:	beq	14900 <__assert_fail@plt+0x3520>
   148f4:	cmp	r0, r5
   148f8:	beq	14908 <__assert_fail@plt+0x3528>
   148fc:	bl	113b0 <abort@plt>
   14900:	mov	r0, r5
   14904:	bl	18988 <__assert_fail@plt+0x75a8>
   14908:	ldr	r5, [sp, #8]
   1490c:	mov	r0, r5
   14910:	sub	sp, fp, #24
   14914:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14918:	push	{fp, lr}
   1491c:	mov	fp, sp
   14920:	mov	r2, r1
   14924:	ldrd	r0, [r0]
   14928:	mov	r3, #0
   1492c:	bl	18c38 <__assert_fail@plt+0x7858>
   14930:	mov	r0, r2
   14934:	pop	{fp, pc}
   14938:	ldrd	r2, [r1]
   1493c:	ldrd	r0, [r0]
   14940:	eor	r1, r1, r3
   14944:	eor	r0, r0, r2
   14948:	orr	r0, r0, r1
   1494c:	clz	r0, r0
   14950:	lsr	r0, r0, #5
   14954:	bx	lr
   14958:	ldr	r0, [r0, #8]
   1495c:	bx	lr
   14960:	ldr	r0, [r0, #12]
   14964:	bx	lr
   14968:	ldr	r0, [r0, #16]
   1496c:	bx	lr
   14970:	ldm	r0, {r2, ip}
   14974:	mov	r0, #0
   14978:	cmp	r2, ip
   1497c:	bxcs	lr
   14980:	mov	r0, #0
   14984:	ldr	r1, [r2]
   14988:	cmp	r1, #0
   1498c:	beq	149b0 <__assert_fail@plt+0x35d0>
   14990:	mov	r3, #0
   14994:	mov	r1, r2
   14998:	ldr	r1, [r1, #4]
   1499c:	add	r3, r3, #1
   149a0:	cmp	r1, #0
   149a4:	bne	14998 <__assert_fail@plt+0x35b8>
   149a8:	cmp	r3, r0
   149ac:	movhi	r0, r3
   149b0:	add	r2, r2, #8
   149b4:	cmp	r2, ip
   149b8:	bcc	14984 <__assert_fail@plt+0x35a4>
   149bc:	bx	lr
   149c0:	push	{fp, lr}
   149c4:	mov	fp, sp
   149c8:	ldm	r0, {r3, ip}
   149cc:	mov	lr, #0
   149d0:	mov	r1, #0
   149d4:	cmp	r3, ip
   149d8:	bcs	14a14 <__assert_fail@plt+0x3634>
   149dc:	mov	r1, #0
   149e0:	mov	lr, #0
   149e4:	ldr	r2, [r3]
   149e8:	cmp	r2, #0
   149ec:	beq	14a08 <__assert_fail@plt+0x3628>
   149f0:	mov	r2, r3
   149f4:	ldr	r2, [r2, #4]
   149f8:	add	r1, r1, #1
   149fc:	cmp	r2, #0
   14a00:	bne	149f4 <__assert_fail@plt+0x3614>
   14a04:	add	lr, lr, #1
   14a08:	add	r3, r3, #8
   14a0c:	cmp	r3, ip
   14a10:	bcc	149e4 <__assert_fail@plt+0x3604>
   14a14:	ldr	r2, [r0, #12]
   14a18:	cmp	lr, r2
   14a1c:	bne	14a34 <__assert_fail@plt+0x3654>
   14a20:	ldr	r2, [r0, #16]
   14a24:	mov	r0, #1
   14a28:	cmp	r1, r2
   14a2c:	movne	r0, #0
   14a30:	pop	{fp, pc}
   14a34:	mov	r0, #0
   14a38:	pop	{fp, pc}
   14a3c:	nop	{0}
   14a40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a44:	add	fp, sp, #24
   14a48:	sub	sp, sp, #8
   14a4c:	ldr	r6, [r0]
   14a50:	ldmib	r0, {r2, r7, r8}
   14a54:	ldr	r3, [r0, #16]
   14a58:	mov	r4, r1
   14a5c:	mov	r5, #0
   14a60:	cmp	r6, r2
   14a64:	bcs	14aa4 <__assert_fail@plt+0x36c4>
   14a68:	mov	r5, #0
   14a6c:	ldr	r0, [r6]
   14a70:	cmp	r0, #0
   14a74:	beq	14a98 <__assert_fail@plt+0x36b8>
   14a78:	mov	r0, #0
   14a7c:	mov	r1, r6
   14a80:	ldr	r1, [r1, #4]
   14a84:	add	r0, r0, #1
   14a88:	cmp	r1, #0
   14a8c:	bne	14a80 <__assert_fail@plt+0x36a0>
   14a90:	cmp	r0, r5
   14a94:	movhi	r5, r0
   14a98:	add	r6, r6, #8
   14a9c:	cmp	r6, r2
   14aa0:	bcc	14a6c <__assert_fail@plt+0x368c>
   14aa4:	movw	r2, #39176	; 0x9908
   14aa8:	mov	r0, r4
   14aac:	mov	r1, #1
   14ab0:	movt	r2, #1
   14ab4:	bl	112d8 <__fprintf_chk@plt>
   14ab8:	movw	r2, #39200	; 0x9920
   14abc:	mov	r0, r4
   14ac0:	mov	r1, #1
   14ac4:	mov	r3, r7
   14ac8:	movt	r2, #1
   14acc:	bl	112d8 <__fprintf_chk@plt>
   14ad0:	vmov	s0, r8
   14ad4:	vldr	d16, [pc, #76]	; 14b28 <__assert_fail@plt+0x3748>
   14ad8:	movw	r2, #39224	; 0x9938
   14adc:	mov	r0, r4
   14ae0:	mov	r1, #1
   14ae4:	mov	r3, r8
   14ae8:	movt	r2, #1
   14aec:	vcvt.f64.u32	d17, s0
   14af0:	vmov	s0, r7
   14af4:	vcvt.f64.u32	d18, s0
   14af8:	vmul.f64	d16, d17, d16
   14afc:	vdiv.f64	d16, d16, d18
   14b00:	vstr	d16, [sp]
   14b04:	bl	112d8 <__fprintf_chk@plt>
   14b08:	movw	r2, #39257	; 0x9959
   14b0c:	mov	r0, r4
   14b10:	mov	r1, #1
   14b14:	mov	r3, r5
   14b18:	movt	r2, #1
   14b1c:	sub	sp, fp, #24
   14b20:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b24:	b	112d8 <__fprintf_chk@plt>
   14b28:	andeq	r0, r0, r0
   14b2c:	subsmi	r0, r9, r0
   14b30:	push	{r4, r5, r6, r7, fp, lr}
   14b34:	add	fp, sp, #16
   14b38:	mov	r4, r1
   14b3c:	ldr	r1, [r0, #8]
   14b40:	ldr	r2, [r0, #24]
   14b44:	mov	r5, r0
   14b48:	mov	r0, r4
   14b4c:	blx	r2
   14b50:	ldr	r1, [r5, #8]
   14b54:	cmp	r0, r1
   14b58:	bcs	14bb8 <__assert_fail@plt+0x37d8>
   14b5c:	ldr	r7, [r5]
   14b60:	mov	r6, #0
   14b64:	ldr	r1, [r7, r0, lsl #3]!
   14b68:	cmp	r1, #0
   14b6c:	cmpne	r7, #0
   14b70:	bne	14ba0 <__assert_fail@plt+0x37c0>
   14b74:	mov	r0, r6
   14b78:	pop	{r4, r5, r6, r7, fp, pc}
   14b7c:	ldr	r2, [r5, #28]
   14b80:	mov	r0, r4
   14b84:	blx	r2
   14b88:	cmp	r0, #0
   14b8c:	bne	14bb0 <__assert_fail@plt+0x37d0>
   14b90:	ldr	r7, [r7, #4]
   14b94:	cmp	r7, #0
   14b98:	beq	14b74 <__assert_fail@plt+0x3794>
   14b9c:	ldr	r1, [r7]
   14ba0:	cmp	r1, r4
   14ba4:	bne	14b7c <__assert_fail@plt+0x379c>
   14ba8:	mov	r6, r4
   14bac:	b	14b74 <__assert_fail@plt+0x3794>
   14bb0:	ldr	r6, [r7]
   14bb4:	b	14b74 <__assert_fail@plt+0x3794>
   14bb8:	bl	113b0 <abort@plt>
   14bbc:	push	{fp, lr}
   14bc0:	mov	fp, sp
   14bc4:	ldr	r1, [r0, #16]
   14bc8:	cmp	r1, #0
   14bcc:	beq	14bec <__assert_fail@plt+0x380c>
   14bd0:	ldm	r0, {r1, r2}
   14bd4:	cmp	r1, r2
   14bd8:	bcs	14bf4 <__assert_fail@plt+0x3814>
   14bdc:	ldr	r0, [r1], #8
   14be0:	cmp	r0, #0
   14be4:	beq	14bd4 <__assert_fail@plt+0x37f4>
   14be8:	pop	{fp, pc}
   14bec:	mov	r0, #0
   14bf0:	pop	{fp, pc}
   14bf4:	bl	113b0 <abort@plt>
   14bf8:	push	{r4, r5, fp, lr}
   14bfc:	add	fp, sp, #8
   14c00:	mov	r5, r1
   14c04:	ldr	r1, [r0, #8]
   14c08:	ldr	r2, [r0, #24]
   14c0c:	mov	r4, r0
   14c10:	mov	r0, r5
   14c14:	blx	r2
   14c18:	ldr	r1, [r4, #8]
   14c1c:	cmp	r0, r1
   14c20:	bcs	14c84 <__assert_fail@plt+0x38a4>
   14c24:	ldr	r1, [r4]
   14c28:	add	r2, r1, r0, lsl #3
   14c2c:	ldr	r3, [r2]
   14c30:	ldr	r2, [r2, #4]
   14c34:	cmp	r3, r5
   14c38:	beq	14c48 <__assert_fail@plt+0x3868>
   14c3c:	cmp	r2, #0
   14c40:	bne	14c2c <__assert_fail@plt+0x384c>
   14c44:	b	14c58 <__assert_fail@plt+0x3878>
   14c48:	cmp	r2, #0
   14c4c:	beq	14c58 <__assert_fail@plt+0x3878>
   14c50:	ldr	r0, [r2]
   14c54:	pop	{r4, r5, fp, pc}
   14c58:	ldr	r2, [r4, #4]
   14c5c:	add	r0, r1, r0, lsl #3
   14c60:	add	r1, r0, #8
   14c64:	cmp	r1, r2
   14c68:	bcs	14c7c <__assert_fail@plt+0x389c>
   14c6c:	ldr	r0, [r1], #8
   14c70:	cmp	r0, #0
   14c74:	beq	14c64 <__assert_fail@plt+0x3884>
   14c78:	pop	{r4, r5, fp, pc}
   14c7c:	mov	r0, #0
   14c80:	pop	{r4, r5, fp, pc}
   14c84:	bl	113b0 <abort@plt>
   14c88:	push	{r4, r5, fp, lr}
   14c8c:	add	fp, sp, #8
   14c90:	ldm	r0, {r5, lr}
   14c94:	mov	ip, r0
   14c98:	mov	r0, #0
   14c9c:	cmp	r5, lr
   14ca0:	popcs	{r4, r5, fp, pc}
   14ca4:	mov	r0, #0
   14ca8:	ldr	r3, [r5]
   14cac:	cmp	r3, #0
   14cb0:	cmpne	r5, #0
   14cb4:	bne	14cc8 <__assert_fail@plt+0x38e8>
   14cb8:	add	r5, r5, #8
   14cbc:	cmp	r5, lr
   14cc0:	bcc	14ca8 <__assert_fail@plt+0x38c8>
   14cc4:	b	14cf4 <__assert_fail@plt+0x3914>
   14cc8:	mov	r3, r5
   14ccc:	cmp	r0, r2
   14cd0:	bcs	14cf4 <__assert_fail@plt+0x3914>
   14cd4:	ldr	r4, [r3]
   14cd8:	str	r4, [r1, r0, lsl #2]
   14cdc:	add	r0, r0, #1
   14ce0:	ldr	r3, [r3, #4]
   14ce4:	cmp	r3, #0
   14ce8:	bne	14ccc <__assert_fail@plt+0x38ec>
   14cec:	ldr	lr, [ip, #4]
   14cf0:	b	14cb8 <__assert_fail@plt+0x38d8>
   14cf4:	pop	{r4, r5, fp, pc}
   14cf8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14cfc:	add	fp, sp, #24
   14d00:	mov	r5, r1
   14d04:	ldr	r4, [r0]
   14d08:	ldr	r1, [r0, #4]
   14d0c:	mov	r6, #0
   14d10:	cmp	r4, r1
   14d14:	bcs	14d88 <__assert_fail@plt+0x39a8>
   14d18:	mov	r9, r2
   14d1c:	mov	r8, r0
   14d20:	mov	r6, #0
   14d24:	ldr	r0, [r4]
   14d28:	cmp	r0, #0
   14d2c:	cmpne	r4, #0
   14d30:	bne	14d44 <__assert_fail@plt+0x3964>
   14d34:	add	r4, r4, #8
   14d38:	cmp	r4, r1
   14d3c:	bcc	14d24 <__assert_fail@plt+0x3944>
   14d40:	b	14d88 <__assert_fail@plt+0x39a8>
   14d44:	mov	r1, r9
   14d48:	blx	r5
   14d4c:	cmp	r0, #0
   14d50:	beq	14d88 <__assert_fail@plt+0x39a8>
   14d54:	mov	r7, r4
   14d58:	ldr	r7, [r7, #4]
   14d5c:	add	r6, r6, #1
   14d60:	cmp	r7, #0
   14d64:	beq	14d80 <__assert_fail@plt+0x39a0>
   14d68:	ldr	r0, [r7]
   14d6c:	mov	r1, r9
   14d70:	blx	r5
   14d74:	cmp	r0, #0
   14d78:	bne	14d58 <__assert_fail@plt+0x3978>
   14d7c:	b	14d88 <__assert_fail@plt+0x39a8>
   14d80:	ldr	r1, [r8, #4]
   14d84:	b	14d34 <__assert_fail@plt+0x3954>
   14d88:	mov	r0, r6
   14d8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d90:	ldrb	r2, [r0]
   14d94:	cmp	r2, #0
   14d98:	moveq	r0, #0
   14d9c:	bxeq	lr
   14da0:	add	r3, r0, #1
   14da4:	mov	r0, #0
   14da8:	rsb	r0, r0, r0, lsl #5
   14dac:	uxtab	r0, r0, r2
   14db0:	udiv	r2, r0, r1
   14db4:	mls	r0, r2, r1, r0
   14db8:	ldrb	r2, [r3], #1
   14dbc:	cmp	r2, #0
   14dc0:	bne	14da8 <__assert_fail@plt+0x39c8>
   14dc4:	bx	lr
   14dc8:	movw	r1, #39288	; 0x9978
   14dcc:	movt	r1, #1
   14dd0:	vld1.32	{d16-d17}, [r1]!
   14dd4:	ldr	r1, [r1]
   14dd8:	vst1.32	{d16-d17}, [r0]!
   14ddc:	str	r1, [r0]
   14de0:	bx	lr
   14de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14de8:	add	fp, sp, #28
   14dec:	sub	sp, sp, #4
   14df0:	movw	sl, #20184	; 0x4ed8
   14df4:	cmp	r3, #0
   14df8:	movw	r5, #20164	; 0x4ec4
   14dfc:	mov	r8, r0
   14e00:	mov	r0, #40	; 0x28
   14e04:	mov	r7, r1
   14e08:	movt	sl, #1
   14e0c:	movne	sl, r3
   14e10:	cmp	r2, #0
   14e14:	movt	r5, #1
   14e18:	movne	r5, r2
   14e1c:	bl	18490 <__assert_fail@plt+0x70b0>
   14e20:	mov	r9, #0
   14e24:	cmp	r0, #0
   14e28:	beq	14eb8 <__assert_fail@plt+0x3ad8>
   14e2c:	movw	r6, #39288	; 0x9978
   14e30:	cmp	r7, #0
   14e34:	mov	r4, r0
   14e38:	movt	r6, #1
   14e3c:	movne	r6, r7
   14e40:	str	r6, [r0, #20]
   14e44:	bl	14ee8 <__assert_fail@plt+0x3b08>
   14e48:	cmp	r0, #0
   14e4c:	beq	14eb0 <__assert_fail@plt+0x3ad0>
   14e50:	mov	r0, r8
   14e54:	mov	r1, r6
   14e58:	bl	14f94 <__assert_fail@plt+0x3bb4>
   14e5c:	cmp	r0, #0
   14e60:	str	r0, [r4, #8]
   14e64:	beq	14eb0 <__assert_fail@plt+0x3ad0>
   14e68:	mov	r1, #8
   14e6c:	bl	1843c <__assert_fail@plt+0x705c>
   14e70:	cmp	r0, #0
   14e74:	str	r0, [r4]
   14e78:	beq	14eb0 <__assert_fail@plt+0x3ad0>
   14e7c:	ldr	r1, [fp, #8]
   14e80:	mov	r2, #0
   14e84:	str	r5, [r4, #24]
   14e88:	str	sl, [r4, #28]
   14e8c:	mov	r9, r4
   14e90:	str	r1, [r4, #32]
   14e94:	str	r2, [r4, #36]	; 0x24
   14e98:	str	r2, [r4, #12]
   14e9c:	str	r2, [r4, #16]
   14ea0:	ldr	r1, [r4, #8]
   14ea4:	add	r0, r0, r1, lsl #3
   14ea8:	str	r0, [r4, #4]
   14eac:	b	14eb8 <__assert_fail@plt+0x3ad8>
   14eb0:	mov	r0, r4
   14eb4:	bl	18988 <__assert_fail@plt+0x75a8>
   14eb8:	mov	r0, r9
   14ebc:	sub	sp, fp, #28
   14ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec4:	ror	r2, r0, #3
   14ec8:	udiv	r2, r2, r1
   14ecc:	mul	r1, r2, r1
   14ed0:	rsb	r0, r1, r0, ror #3
   14ed4:	bx	lr
   14ed8:	sub	r0, r0, r1
   14edc:	clz	r0, r0
   14ee0:	lsr	r0, r0, #5
   14ee4:	bx	lr
   14ee8:	ldr	r3, [r0, #20]
   14eec:	movw	r2, #39288	; 0x9978
   14ef0:	mov	r1, r0
   14ef4:	mov	r0, #1
   14ef8:	movt	r2, #1
   14efc:	cmp	r3, r2
   14f00:	beq	14f84 <__assert_fail@plt+0x3ba4>
   14f04:	vldr	s2, [pc, #124]	; 14f88 <__assert_fail@plt+0x3ba8>
   14f08:	vldr	s0, [r3, #8]
   14f0c:	vcmpe.f32	s0, s2
   14f10:	vmrs	APSR_nzcv, fpscr
   14f14:	ble	14f7c <__assert_fail@plt+0x3b9c>
   14f18:	vldr	s4, [pc, #108]	; 14f8c <__assert_fail@plt+0x3bac>
   14f1c:	vcmpe.f32	s0, s4
   14f20:	vmrs	APSR_nzcv, fpscr
   14f24:	bpl	14f7c <__assert_fail@plt+0x3b9c>
   14f28:	vldr	s4, [pc, #96]	; 14f90 <__assert_fail@plt+0x3bb0>
   14f2c:	vldr	s6, [r3, #12]
   14f30:	vcmpe.f32	s6, s4
   14f34:	vmrs	APSR_nzcv, fpscr
   14f38:	ble	14f7c <__assert_fail@plt+0x3b9c>
   14f3c:	vldr	s4, [r3]
   14f40:	vcmpe.f32	s4, #0.0
   14f44:	vmrs	APSR_nzcv, fpscr
   14f48:	blt	14f7c <__assert_fail@plt+0x3b9c>
   14f4c:	vadd.f32	s2, s4, s2
   14f50:	vcmpe.f32	s2, s0
   14f54:	vmrs	APSR_nzcv, fpscr
   14f58:	bpl	14f7c <__assert_fail@plt+0x3b9c>
   14f5c:	vldr	s0, [r3, #4]
   14f60:	vmov.f32	s4, #112	; 0x3f800000  1.0
   14f64:	vcmpe.f32	s0, s4
   14f68:	vmrs	APSR_nzcv, fpscr
   14f6c:	bhi	14f7c <__assert_fail@plt+0x3b9c>
   14f70:	vcmpe.f32	s2, s0
   14f74:	vmrs	APSR_nzcv, fpscr
   14f78:	bxmi	lr
   14f7c:	mov	r0, #0
   14f80:	str	r2, [r1, #20]
   14f84:	bx	lr
   14f88:	stclcc	12, cr12, [ip, #820]	; 0x334
   14f8c:	svccc	0x00666666
   14f90:	svccc	0x008ccccd
   14f94:	ldrb	r2, [r1, #16]
   14f98:	cmp	r2, #0
   14f9c:	bne	14fcc <__assert_fail@plt+0x3bec>
   14fa0:	vmov	s2, r0
   14fa4:	vldr	s0, [r1, #8]
   14fa8:	vldr	s4, [pc, #156]	; 1504c <__assert_fail@plt+0x3c6c>
   14fac:	mov	r0, #0
   14fb0:	vcvt.f32.u32	s2, s2
   14fb4:	vdiv.f32	s2, s2, s0
   14fb8:	vcmpe.f32	s2, s4
   14fbc:	vcvt.u32.f32	s0, s2
   14fc0:	vmrs	APSR_nzcv, fpscr
   14fc4:	bxge	lr
   14fc8:	vmov	r0, s0
   14fcc:	cmp	r0, #10
   14fd0:	movls	r0, #10
   14fd4:	orr	r0, r0, #1
   14fd8:	cmn	r0, #1
   14fdc:	beq	15038 <__assert_fail@plt+0x3c58>
   14fe0:	mov	r1, #3
   14fe4:	cmp	r0, #10
   14fe8:	bcc	15020 <__assert_fail@plt+0x3c40>
   14fec:	mov	r1, #3
   14ff0:	mov	ip, #9
   14ff4:	mov	r2, #12
   14ff8:	udiv	r3, r0, r1
   14ffc:	mls	r3, r3, r1, r0
   15000:	cmp	r3, #0
   15004:	beq	15020 <__assert_fail@plt+0x3c40>
   15008:	add	r3, ip, r2
   1500c:	add	r2, r2, #8
   15010:	add	r1, r1, #2
   15014:	add	ip, r3, #4
   15018:	cmp	ip, r0
   1501c:	bcc	14ff8 <__assert_fail@plt+0x3c18>
   15020:	udiv	r2, r0, r1
   15024:	mls	r1, r2, r1, r0
   15028:	cmp	r1, #0
   1502c:	bne	15040 <__assert_fail@plt+0x3c60>
   15030:	add	r0, r0, #2
   15034:	b	14fd8 <__assert_fail@plt+0x3bf8>
   15038:	mov	r0, #0
   1503c:	bx	lr
   15040:	cmp	r0, #536870912	; 0x20000000
   15044:	movcs	r0, #0
   15048:	bx	lr
   1504c:	svcmi	0x00800000
   15050:	push	{r4, r5, r6, r7, fp, lr}
   15054:	add	fp, sp, #16
   15058:	mov	r4, r0
   1505c:	ldr	r5, [r0]
   15060:	ldr	r0, [r0, #4]
   15064:	cmp	r5, r0
   15068:	bcs	15100 <__assert_fail@plt+0x3d20>
   1506c:	mov	r6, #0
   15070:	ldr	r1, [r5]
   15074:	cmp	r1, #0
   15078:	beq	150f4 <__assert_fail@plt+0x3d14>
   1507c:	ldr	r1, [r4, #32]
   15080:	ldr	r7, [r5, #4]
   15084:	cmp	r1, #0
   15088:	mov	r0, r1
   1508c:	movwne	r0, #1
   15090:	cmp	r7, #0
   15094:	beq	150d8 <__assert_fail@plt+0x3cf8>
   15098:	tst	r0, #1
   1509c:	beq	150ac <__assert_fail@plt+0x3ccc>
   150a0:	ldr	r0, [r7]
   150a4:	blx	r1
   150a8:	ldr	r1, [r4, #32]
   150ac:	str	r6, [r7]
   150b0:	cmp	r1, #0
   150b4:	ldr	r2, [r7, #4]
   150b8:	ldr	r0, [r4, #36]	; 0x24
   150bc:	str	r0, [r7, #4]
   150c0:	mov	r0, r1
   150c4:	str	r7, [r4, #36]	; 0x24
   150c8:	movwne	r0, #1
   150cc:	cmp	r2, #0
   150d0:	mov	r7, r2
   150d4:	bne	15098 <__assert_fail@plt+0x3cb8>
   150d8:	cmp	r0, #0
   150dc:	beq	150e8 <__assert_fail@plt+0x3d08>
   150e0:	ldr	r0, [r5]
   150e4:	blx	r1
   150e8:	str	r6, [r5]
   150ec:	str	r6, [r5, #4]
   150f0:	ldr	r0, [r4, #4]
   150f4:	add	r5, r5, #8
   150f8:	cmp	r5, r0
   150fc:	bcc	15070 <__assert_fail@plt+0x3c90>
   15100:	mov	r0, #0
   15104:	str	r0, [r4, #12]
   15108:	str	r0, [r4, #16]
   1510c:	pop	{r4, r5, r6, r7, fp, pc}
   15110:	push	{r4, r5, r6, sl, fp, lr}
   15114:	add	fp, sp, #16
   15118:	mov	r4, r0
   1511c:	ldr	r0, [r0, #32]
   15120:	cmp	r0, #0
   15124:	beq	15188 <__assert_fail@plt+0x3da8>
   15128:	ldr	r0, [r4, #16]
   1512c:	cmp	r0, #0
   15130:	beq	15188 <__assert_fail@plt+0x3da8>
   15134:	ldr	r5, [r4]
   15138:	ldr	r1, [r4, #4]
   1513c:	cmp	r5, r1
   15140:	bcs	15188 <__assert_fail@plt+0x3da8>
   15144:	ldr	r0, [r5]
   15148:	cmp	r0, #0
   1514c:	cmpne	r5, #0
   15150:	beq	15180 <__assert_fail@plt+0x3da0>
   15154:	ldr	r1, [r4, #32]
   15158:	blx	r1
   1515c:	ldr	r6, [r5, #4]
   15160:	cmp	r6, #0
   15164:	beq	1517c <__assert_fail@plt+0x3d9c>
   15168:	ldr	r1, [r4, #32]
   1516c:	ldr	r0, [r6]
   15170:	blx	r1
   15174:	ldr	r6, [r6, #4]
   15178:	b	15160 <__assert_fail@plt+0x3d80>
   1517c:	ldr	r1, [r4, #4]
   15180:	add	r5, r5, #8
   15184:	b	1513c <__assert_fail@plt+0x3d5c>
   15188:	ldr	r5, [r4]
   1518c:	ldr	r1, [r4, #4]
   15190:	cmp	r5, r1
   15194:	bcs	151c4 <__assert_fail@plt+0x3de4>
   15198:	ldr	r0, [r5, #4]
   1519c:	cmp	r0, #0
   151a0:	beq	151bc <__assert_fail@plt+0x3ddc>
   151a4:	ldr	r6, [r0, #4]
   151a8:	bl	18988 <__assert_fail@plt+0x75a8>
   151ac:	cmp	r6, #0
   151b0:	mov	r0, r6
   151b4:	bne	151a4 <__assert_fail@plt+0x3dc4>
   151b8:	ldr	r1, [r4, #4]
   151bc:	add	r5, r5, #8
   151c0:	b	15190 <__assert_fail@plt+0x3db0>
   151c4:	ldr	r0, [r4, #36]	; 0x24
   151c8:	cmp	r0, #0
   151cc:	beq	151e4 <__assert_fail@plt+0x3e04>
   151d0:	ldr	r5, [r0, #4]
   151d4:	bl	18988 <__assert_fail@plt+0x75a8>
   151d8:	cmp	r5, #0
   151dc:	mov	r0, r5
   151e0:	bne	151d0 <__assert_fail@plt+0x3df0>
   151e4:	ldr	r0, [r4]
   151e8:	bl	18988 <__assert_fail@plt+0x75a8>
   151ec:	mov	r0, r4
   151f0:	pop	{r4, r5, r6, sl, fp, lr}
   151f4:	b	18988 <__assert_fail@plt+0x75a8>
   151f8:	push	{r4, r5, r6, r7, fp, lr}
   151fc:	add	fp, sp, #16
   15200:	sub	sp, sp, #40	; 0x28
   15204:	mov	r7, r0
   15208:	mov	r2, r1
   1520c:	mov	r4, r0
   15210:	ldr	r1, [r7, #20]!
   15214:	mov	r0, r2
   15218:	bl	14f94 <__assert_fail@plt+0x3bb4>
   1521c:	mov	r5, #0
   15220:	cmp	r0, #0
   15224:	beq	152b8 <__assert_fail@plt+0x3ed8>
   15228:	mov	r6, r0
   1522c:	ldr	r0, [r4, #8]
   15230:	cmp	r6, r0
   15234:	beq	152b4 <__assert_fail@plt+0x3ed4>
   15238:	mov	r0, r6
   1523c:	mov	r1, #8
   15240:	bl	1843c <__assert_fail@plt+0x705c>
   15244:	cmp	r0, #0
   15248:	str	r0, [sp]
   1524c:	beq	152b8 <__assert_fail@plt+0x3ed8>
   15250:	add	r0, r0, r6, lsl #3
   15254:	mov	r1, #0
   15258:	mov	r5, sp
   1525c:	mov	r2, #0
   15260:	str	r1, [sp, #16]
   15264:	str	r1, [sp, #12]
   15268:	str	r6, [sp, #8]
   1526c:	mov	r1, r4
   15270:	str	r0, [sp, #4]
   15274:	add	r0, r5, #20
   15278:	vld1.32	{d16-d17}, [r7]
   1527c:	vst1.32	{d16-d17}, [r0]
   15280:	ldr	r0, [r4, #36]	; 0x24
   15284:	str	r0, [sp, #36]	; 0x24
   15288:	mov	r0, r5
   1528c:	bl	15310 <__assert_fail@plt+0x3f30>
   15290:	cmp	r0, #0
   15294:	beq	152c4 <__assert_fail@plt+0x3ee4>
   15298:	ldr	r0, [r4]
   1529c:	bl	18988 <__assert_fail@plt+0x75a8>
   152a0:	mov	r0, #36	; 0x24
   152a4:	vld1.32	{d16-d17}, [r5], r0
   152a8:	vst1.32	{d16-d17}, [r4], r0
   152ac:	ldr	r0, [r5]
   152b0:	str	r0, [r4]
   152b4:	mov	r5, #1
   152b8:	mov	r0, r5
   152bc:	sub	sp, fp, #16
   152c0:	pop	{r4, r5, r6, r7, fp, pc}
   152c4:	ldr	r0, [sp, #36]	; 0x24
   152c8:	mov	r1, sp
   152cc:	mov	r2, #1
   152d0:	str	r0, [r4, #36]	; 0x24
   152d4:	mov	r0, r4
   152d8:	bl	15310 <__assert_fail@plt+0x3f30>
   152dc:	cmp	r0, #0
   152e0:	beq	1530c <__assert_fail@plt+0x3f2c>
   152e4:	mov	r1, sp
   152e8:	mov	r0, r4
   152ec:	mov	r2, #0
   152f0:	mov	r5, #0
   152f4:	bl	15310 <__assert_fail@plt+0x3f30>
   152f8:	cmp	r0, #0
   152fc:	beq	1530c <__assert_fail@plt+0x3f2c>
   15300:	ldr	r0, [sp]
   15304:	bl	18988 <__assert_fail@plt+0x75a8>
   15308:	b	152b8 <__assert_fail@plt+0x3ed8>
   1530c:	bl	113b0 <abort@plt>
   15310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15314:	add	fp, sp, #28
   15318:	sub	sp, sp, #12
   1531c:	ldr	sl, [r1]
   15320:	str	r1, [sp, #8]
   15324:	ldr	r1, [r1, #4]
   15328:	mov	r7, r0
   1532c:	mov	r0, #1
   15330:	str	r2, [sp, #4]
   15334:	cmp	sl, r1
   15338:	bcs	1548c <__assert_fail@plt+0x40ac>
   1533c:	add	r8, r7, #36	; 0x24
   15340:	mov	r9, #0
   15344:	ldr	r4, [sl]
   15348:	cmp	r4, #0
   1534c:	beq	15474 <__assert_fail@plt+0x4094>
   15350:	ldr	r5, [sl, #4]
   15354:	cmp	r5, #0
   15358:	beq	153d0 <__assert_fail@plt+0x3ff0>
   1535c:	ldr	r1, [r7, #8]
   15360:	ldr	r4, [r5]
   15364:	ldr	r2, [r7, #24]
   15368:	mov	r0, r4
   1536c:	blx	r2
   15370:	ldr	r1, [r7, #8]
   15374:	cmp	r0, r1
   15378:	bcs	1549c <__assert_fail@plt+0x40bc>
   1537c:	ldr	r3, [r7]
   15380:	ldr	r2, [r5, #4]
   15384:	ldr	r6, [r3, r0, lsl #3]
   15388:	cmp	r6, #0
   1538c:	beq	1539c <__assert_fail@plt+0x3fbc>
   15390:	add	r0, r3, r0, lsl #3
   15394:	add	r0, r0, #4
   15398:	b	153b4 <__assert_fail@plt+0x3fd4>
   1539c:	str	r4, [r3, r0, lsl #3]
   153a0:	ldr	r0, [r7, #12]
   153a4:	add	r0, r0, #1
   153a8:	str	r0, [r7, #12]
   153ac:	mov	r0, r8
   153b0:	str	r9, [r5]
   153b4:	ldr	r3, [r0]
   153b8:	cmp	r2, #0
   153bc:	str	r3, [r5, #4]
   153c0:	str	r5, [r0]
   153c4:	mov	r5, r2
   153c8:	bne	15360 <__assert_fail@plt+0x3f80>
   153cc:	ldr	r4, [sl]
   153d0:	ldr	r0, [sp, #4]
   153d4:	str	r9, [sl, #4]
   153d8:	cmp	r0, #0
   153dc:	bne	15474 <__assert_fail@plt+0x4094>
   153e0:	ldr	r1, [r7, #8]
   153e4:	ldr	r2, [r7, #24]
   153e8:	mov	r0, r4
   153ec:	blx	r2
   153f0:	mov	r5, r0
   153f4:	ldr	r0, [r7, #8]
   153f8:	cmp	r5, r0
   153fc:	bcs	1549c <__assert_fail@plt+0x40bc>
   15400:	ldr	r6, [r7]
   15404:	ldr	r0, [r6, r5, lsl #3]
   15408:	cmp	r0, #0
   1540c:	beq	15428 <__assert_fail@plt+0x4048>
   15410:	ldr	r0, [r8]
   15414:	cmp	r0, #0
   15418:	beq	1543c <__assert_fail@plt+0x405c>
   1541c:	ldr	r1, [r0, #4]
   15420:	str	r1, [r8]
   15424:	b	1544c <__assert_fail@plt+0x406c>
   15428:	str	r4, [r6, r5, lsl #3]
   1542c:	ldr	r0, [r7, #12]
   15430:	add	r0, r0, #1
   15434:	str	r0, [r7, #12]
   15438:	b	15460 <__assert_fail@plt+0x4080>
   1543c:	mov	r0, #8
   15440:	bl	18490 <__assert_fail@plt+0x70b0>
   15444:	cmp	r0, #0
   15448:	beq	15494 <__assert_fail@plt+0x40b4>
   1544c:	add	r1, r6, r5, lsl #3
   15450:	str	r4, [r0]
   15454:	ldr	r2, [r1, #4]
   15458:	str	r2, [r0, #4]
   1545c:	str	r0, [r1, #4]
   15460:	ldr	r1, [sp, #8]
   15464:	str	r9, [sl]
   15468:	ldr	r0, [r1, #12]
   1546c:	sub	r0, r0, #1
   15470:	str	r0, [r1, #12]
   15474:	ldr	r0, [sp, #8]
   15478:	add	sl, sl, #8
   1547c:	ldr	r0, [r0, #4]
   15480:	cmp	sl, r0
   15484:	bcc	15344 <__assert_fail@plt+0x3f64>
   15488:	mov	r0, #1
   1548c:	sub	sp, fp, #28
   15490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15494:	mov	r0, #0
   15498:	b	1548c <__assert_fail@plt+0x40ac>
   1549c:	bl	113b0 <abort@plt>
   154a0:	push	{r4, r5, r6, r7, fp, lr}
   154a4:	add	fp, sp, #16
   154a8:	sub	sp, sp, #8
   154ac:	cmp	r1, #0
   154b0:	beq	15628 <__assert_fail@plt+0x4248>
   154b4:	mov	r7, r2
   154b8:	add	r2, sp, #4
   154bc:	mov	r3, #0
   154c0:	mov	r5, r1
   154c4:	mov	r4, r0
   154c8:	mov	r6, #0
   154cc:	bl	15630 <__assert_fail@plt+0x4250>
   154d0:	cmp	r0, #0
   154d4:	beq	154e4 <__assert_fail@plt+0x4104>
   154d8:	cmp	r7, #0
   154dc:	strne	r0, [r7]
   154e0:	b	15614 <__assert_fail@plt+0x4234>
   154e4:	vldr	s0, [r4, #8]
   154e8:	ldr	r0, [r4, #20]
   154ec:	vldr	s2, [r4, #12]
   154f0:	vldr	s4, [r0, #8]
   154f4:	vcvt.f32.u32	s0, s0
   154f8:	vcvt.f32.u32	s2, s2
   154fc:	vmul.f32	s0, s4, s0
   15500:	vcmpe.f32	s0, s2
   15504:	vmrs	APSR_nzcv, fpscr
   15508:	bpl	1559c <__assert_fail@plt+0x41bc>
   1550c:	mov	r0, r4
   15510:	bl	14ee8 <__assert_fail@plt+0x3b08>
   15514:	vldr	s0, [r4, #8]
   15518:	ldr	r0, [r4, #20]
   1551c:	vldr	s4, [r4, #12]
   15520:	vcvt.f32.u32	s2, s0
   15524:	vldr	s0, [r0, #8]
   15528:	vcvt.f32.u32	s4, s4
   1552c:	vmul.f32	s6, s0, s2
   15530:	vcmpe.f32	s6, s4
   15534:	vmrs	APSR_nzcv, fpscr
   15538:	bpl	1559c <__assert_fail@plt+0x41bc>
   1553c:	vldr	s4, [r0, #12]
   15540:	ldrb	r0, [r0, #16]
   15544:	mvn	r6, #0
   15548:	cmp	r0, #0
   1554c:	vmul.f32	s2, s4, s2
   15550:	vldr	s4, [pc, #212]	; 1562c <__assert_fail@plt+0x424c>
   15554:	vmul.f32	s0, s0, s2
   15558:	vseleq.f32	s0, s0, s2
   1555c:	vcmpe.f32	s0, s4
   15560:	vmrs	APSR_nzcv, fpscr
   15564:	bge	15614 <__assert_fail@plt+0x4234>
   15568:	vcvt.u32.f32	s0, s0
   1556c:	mov	r0, r4
   15570:	vmov	r1, s0
   15574:	bl	151f8 <__assert_fail@plt+0x3e18>
   15578:	cmp	r0, #0
   1557c:	beq	15614 <__assert_fail@plt+0x4234>
   15580:	add	r2, sp, #4
   15584:	mov	r0, r4
   15588:	mov	r1, r5
   1558c:	mov	r3, #0
   15590:	bl	15630 <__assert_fail@plt+0x4250>
   15594:	cmp	r0, #0
   15598:	bne	15628 <__assert_fail@plt+0x4248>
   1559c:	ldr	r6, [sp, #4]
   155a0:	ldr	r0, [r6]
   155a4:	cmp	r0, #0
   155a8:	beq	155c4 <__assert_fail@plt+0x41e4>
   155ac:	ldr	r0, [r4, #36]	; 0x24
   155b0:	cmp	r0, #0
   155b4:	beq	155e4 <__assert_fail@plt+0x4204>
   155b8:	ldr	r1, [r0, #4]
   155bc:	str	r1, [r4, #36]	; 0x24
   155c0:	b	155f4 <__assert_fail@plt+0x4214>
   155c4:	str	r5, [r6]
   155c8:	ldr	r0, [r4, #12]
   155cc:	ldr	r1, [r4, #16]
   155d0:	add	r0, r0, #1
   155d4:	add	r1, r1, #1
   155d8:	str	r0, [r4, #12]
   155dc:	str	r1, [r4, #16]
   155e0:	b	15610 <__assert_fail@plt+0x4230>
   155e4:	mov	r0, #8
   155e8:	bl	18490 <__assert_fail@plt+0x70b0>
   155ec:	cmp	r0, #0
   155f0:	beq	15620 <__assert_fail@plt+0x4240>
   155f4:	str	r5, [r0]
   155f8:	ldr	r1, [r6, #4]
   155fc:	str	r1, [r0, #4]
   15600:	str	r0, [r6, #4]
   15604:	ldr	r0, [r4, #16]
   15608:	add	r0, r0, #1
   1560c:	str	r0, [r4, #16]
   15610:	mov	r6, #1
   15614:	mov	r0, r6
   15618:	sub	sp, fp, #16
   1561c:	pop	{r4, r5, r6, r7, fp, pc}
   15620:	mvn	r6, #0
   15624:	b	15614 <__assert_fail@plt+0x4234>
   15628:	bl	113b0 <abort@plt>
   1562c:	svcmi	0x00800000
   15630:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15634:	add	fp, sp, #24
   15638:	mov	r7, r2
   1563c:	mov	r4, r1
   15640:	ldr	r1, [r0, #8]
   15644:	ldr	r2, [r0, #24]
   15648:	mov	r5, r0
   1564c:	mov	r8, r3
   15650:	mov	r0, r4
   15654:	blx	r2
   15658:	ldr	r1, [r5, #8]
   1565c:	cmp	r0, r1
   15660:	bcs	1575c <__assert_fail@plt+0x437c>
   15664:	ldr	r1, [r5]
   15668:	add	r6, r1, r0, lsl #3
   1566c:	str	r6, [r7]
   15670:	ldr	r1, [r1, r0, lsl #3]
   15674:	cmp	r1, #0
   15678:	beq	15710 <__assert_fail@plt+0x4330>
   1567c:	cmp	r1, r4
   15680:	beq	1569c <__assert_fail@plt+0x42bc>
   15684:	ldr	r2, [r5, #28]
   15688:	mov	r0, r4
   1568c:	blx	r2
   15690:	cmp	r0, #0
   15694:	beq	156d0 <__assert_fail@plt+0x42f0>
   15698:	ldr	r4, [r6]
   1569c:	cmp	r8, #0
   156a0:	beq	15714 <__assert_fail@plt+0x4334>
   156a4:	ldr	r0, [r6, #4]
   156a8:	cmp	r0, #0
   156ac:	beq	1571c <__assert_fail@plt+0x433c>
   156b0:	ldm	r0, {r1, r2}
   156b4:	stm	r6, {r1, r2}
   156b8:	mov	r1, #0
   156bc:	str	r1, [r0]
   156c0:	ldr	r1, [r5, #36]	; 0x24
   156c4:	str	r1, [r0, #4]
   156c8:	str	r0, [r5, #36]	; 0x24
   156cc:	b	15714 <__assert_fail@plt+0x4334>
   156d0:	ldr	r0, [r6, #4]!
   156d4:	cmp	r0, #0
   156d8:	beq	15710 <__assert_fail@plt+0x4330>
   156dc:	ldr	r1, [r0]
   156e0:	cmp	r1, r4
   156e4:	beq	15728 <__assert_fail@plt+0x4348>
   156e8:	ldr	r2, [r5, #28]
   156ec:	mov	r0, r4
   156f0:	blx	r2
   156f4:	ldr	r1, [r6]
   156f8:	cmp	r0, #0
   156fc:	bne	15730 <__assert_fail@plt+0x4350>
   15700:	ldr	r0, [r1, #4]!
   15704:	mov	r6, r1
   15708:	cmp	r0, #0
   1570c:	bne	156dc <__assert_fail@plt+0x42fc>
   15710:	mov	r4, #0
   15714:	mov	r0, r4
   15718:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1571c:	mov	r0, #0
   15720:	str	r0, [r6]
   15724:	b	15714 <__assert_fail@plt+0x4334>
   15728:	mov	r1, r0
   1572c:	b	15734 <__assert_fail@plt+0x4354>
   15730:	ldr	r4, [r1]
   15734:	cmp	r8, #0
   15738:	beq	15714 <__assert_fail@plt+0x4334>
   1573c:	ldr	r0, [r1, #4]
   15740:	str	r0, [r6]
   15744:	mov	r0, #0
   15748:	str	r0, [r1]
   1574c:	ldr	r0, [r5, #36]	; 0x24
   15750:	str	r0, [r1, #4]
   15754:	str	r1, [r5, #36]	; 0x24
   15758:	b	15714 <__assert_fail@plt+0x4334>
   1575c:	bl	113b0 <abort@plt>
   15760:	push	{r4, sl, fp, lr}
   15764:	add	fp, sp, #8
   15768:	sub	sp, sp, #8
   1576c:	add	r2, sp, #4
   15770:	mov	r4, r1
   15774:	bl	154a0 <__assert_fail@plt+0x40c0>
   15778:	cmn	r0, #1
   1577c:	beq	15790 <__assert_fail@plt+0x43b0>
   15780:	ldr	r1, [sp, #4]
   15784:	cmp	r0, #0
   15788:	moveq	r4, r1
   1578c:	b	15794 <__assert_fail@plt+0x43b4>
   15790:	mov	r4, #0
   15794:	mov	r0, r4
   15798:	sub	sp, fp, #8
   1579c:	pop	{r4, sl, fp, pc}
   157a0:	push	{r4, r5, r6, sl, fp, lr}
   157a4:	add	fp, sp, #16
   157a8:	sub	sp, sp, #8
   157ac:	add	r2, sp, #4
   157b0:	mov	r3, #1
   157b4:	mov	r4, r0
   157b8:	bl	15630 <__assert_fail@plt+0x4250>
   157bc:	mov	r5, r0
   157c0:	cmp	r0, #0
   157c4:	beq	158a4 <__assert_fail@plt+0x44c4>
   157c8:	ldr	r0, [r4, #16]
   157cc:	sub	r0, r0, #1
   157d0:	str	r0, [r4, #16]
   157d4:	ldr	r0, [sp, #4]
   157d8:	ldr	r0, [r0]
   157dc:	cmp	r0, #0
   157e0:	bne	158a4 <__assert_fail@plt+0x44c4>
   157e4:	ldr	r0, [r4, #12]
   157e8:	vldr	s0, [r4, #8]
   157ec:	sub	r0, r0, #1
   157f0:	str	r0, [r4, #12]
   157f4:	vmov	s4, r0
   157f8:	ldr	r1, [r4, #20]
   157fc:	vldr	s2, [r1]
   15800:	vcvt.f32.u32	s0, s0
   15804:	vcvt.f32.u32	s4, s4
   15808:	vmul.f32	s0, s2, s0
   1580c:	vcmpe.f32	s0, s4
   15810:	vmrs	APSR_nzcv, fpscr
   15814:	ble	158a4 <__assert_fail@plt+0x44c4>
   15818:	mov	r0, r4
   1581c:	bl	14ee8 <__assert_fail@plt+0x3b08>
   15820:	vldr	s0, [r4, #8]
   15824:	ldr	r0, [r4, #20]
   15828:	vldr	s2, [r4, #12]
   1582c:	vcvt.f32.u32	s0, s0
   15830:	vldr	s4, [r0]
   15834:	vcvt.f32.u32	s2, s2
   15838:	vmul.f32	s4, s4, s0
   1583c:	vcmpe.f32	s4, s2
   15840:	vmrs	APSR_nzcv, fpscr
   15844:	ble	158a4 <__assert_fail@plt+0x44c4>
   15848:	vldr	s2, [r0, #4]
   1584c:	ldrb	r1, [r0, #16]
   15850:	cmp	r1, #0
   15854:	vmul.f32	s0, s2, s0
   15858:	bne	15864 <__assert_fail@plt+0x4484>
   1585c:	vldr	s2, [r0, #8]
   15860:	vmul.f32	s0, s0, s2
   15864:	vcvt.u32.f32	s0, s0
   15868:	mov	r0, r4
   1586c:	vmov	r1, s0
   15870:	bl	151f8 <__assert_fail@plt+0x3e18>
   15874:	cmp	r0, #0
   15878:	bne	158a4 <__assert_fail@plt+0x44c4>
   1587c:	ldr	r0, [r4, #36]	; 0x24
   15880:	cmp	r0, #0
   15884:	beq	1589c <__assert_fail@plt+0x44bc>
   15888:	ldr	r6, [r0, #4]
   1588c:	bl	18988 <__assert_fail@plt+0x75a8>
   15890:	cmp	r6, #0
   15894:	mov	r0, r6
   15898:	bne	15888 <__assert_fail@plt+0x44a8>
   1589c:	mov	r0, #0
   158a0:	str	r0, [r4, #36]	; 0x24
   158a4:	mov	r0, r5
   158a8:	sub	sp, fp, #16
   158ac:	pop	{r4, r5, r6, sl, fp, pc}
   158b0:	b	157a0 <__assert_fail@plt+0x43c0>
   158b4:	vdup.32	q8, r1
   158b8:	mov	r2, #0
   158bc:	str	r2, [r0, #20]
   158c0:	str	r2, [r0, #24]
   158c4:	mov	r2, #1
   158c8:	strb	r2, [r0, #28]
   158cc:	vst1.32	{d16-d17}, [r0]!
   158d0:	str	r1, [r0]
   158d4:	bx	lr
   158d8:	ldrb	r0, [r0, #28]
   158dc:	bx	lr
   158e0:	push	{fp, lr}
   158e4:	mov	fp, sp
   158e8:	ldrb	r3, [r0, #28]
   158ec:	ldr	r2, [r0, #20]
   158f0:	eor	lr, r3, #1
   158f4:	add	r2, r2, lr
   158f8:	and	r3, r2, #3
   158fc:	ldr	ip, [r0, r3, lsl #2]
   15900:	str	r1, [r0, r3, lsl #2]
   15904:	str	r3, [r0, #20]
   15908:	ldr	r1, [r0, #24]
   1590c:	cmp	r3, r1
   15910:	addeq	r1, r2, lr
   15914:	andeq	r1, r1, #3
   15918:	streq	r1, [r0, #24]
   1591c:	mov	r1, #0
   15920:	strb	r1, [r0, #28]
   15924:	mov	r0, ip
   15928:	pop	{fp, pc}
   1592c:	push	{fp, lr}
   15930:	mov	fp, sp
   15934:	ldrb	r1, [r0, #28]
   15938:	cmp	r1, #0
   1593c:	bne	15980 <__assert_fail@plt+0x45a0>
   15940:	ldr	r3, [r0, #20]
   15944:	ldr	r2, [r0, #16]
   15948:	ldr	r1, [r0, r3, lsl #2]
   1594c:	str	r2, [r0, r3, lsl #2]
   15950:	ldr	r2, [r0, #20]
   15954:	ldr	r3, [r0, #24]
   15958:	cmp	r2, r3
   1595c:	bne	1596c <__assert_fail@plt+0x458c>
   15960:	mov	r2, #1
   15964:	strb	r2, [r0, #28]
   15968:	b	15978 <__assert_fail@plt+0x4598>
   1596c:	sub	r2, r2, #1
   15970:	and	r2, r2, #3
   15974:	str	r2, [r0, #20]
   15978:	mov	r0, r1
   1597c:	pop	{fp, pc}
   15980:	bl	113b0 <abort@plt>
   15984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15988:	add	fp, sp, #28
   1598c:	sub	sp, sp, #4
   15990:	ldrb	r1, [r0]
   15994:	mov	r4, r0
   15998:	and	r0, r1, #248	; 0xf8
   1599c:	cmp	r0, #48	; 0x30
   159a0:	bne	15a24 <__assert_fail@plt+0x4644>
   159a4:	mov	r0, #0
   159a8:	mov	r5, #0
   159ac:	mov	r2, r4
   159b0:	lsl	r3, r5, #3
   159b4:	uxtab	r1, r3, r1
   159b8:	sub	r5, r1, #48	; 0x30
   159bc:	cmp	r0, r5, lsr #12
   159c0:	bne	15cb8 <__assert_fail@plt+0x48d8>
   159c4:	ldrb	r1, [r2, #1]
   159c8:	add	r6, r2, #1
   159cc:	and	r2, r1, #248	; 0xf8
   159d0:	cmp	r2, #48	; 0x30
   159d4:	mov	r2, r6
   159d8:	beq	159b0 <__assert_fail@plt+0x45d0>
   159dc:	cmp	r1, #0
   159e0:	bne	15cb8 <__assert_fail@plt+0x48d8>
   159e4:	mov	r0, #32
   159e8:	bl	17f50 <__assert_fail@plt+0x6b70>
   159ec:	mov	r1, #0
   159f0:	movw	r2, #317	; 0x13d
   159f4:	and	r3, r5, #3072	; 0xc00
   159f8:	movw	r7, #1023	; 0x3ff
   159fc:	strb	r1, [r0, #17]
   15a00:	strh	r2, [r0]
   15a04:	sub	r2, r6, r4
   15a08:	movw	r1, #4095	; 0xfff
   15a0c:	cmp	r2, #5
   15a10:	str	r1, [r0, #4]
   15a14:	str	r5, [r0, #8]
   15a18:	orrlt	r1, r3, r7
   15a1c:	str	r1, [r0, #12]
   15a20:	b	15cb8 <__assert_fail@plt+0x48d8>
   15a24:	movw	r5, #5
   15a28:	mov	r2, #1
   15a2c:	mvn	r3, #42	; 0x2a
   15a30:	mov	r7, #1
   15a34:	mov	r0, #1
   15a38:	movt	r5, #4
   15a3c:	uxtab	r6, r3, r1
   15a40:	uxtb	r1, r1
   15a44:	cmp	r6, #18
   15a48:	bhi	15a58 <__assert_fail@plt+0x4678>
   15a4c:	tst	r5, r2, lsl r6
   15a50:	mov	r6, #1
   15a54:	bne	15a64 <__assert_fail@plt+0x4684>
   15a58:	cmp	r1, #0
   15a5c:	beq	15a74 <__assert_fail@plt+0x4694>
   15a60:	mov	r6, #0
   15a64:	ldrb	r1, [r4, r7]
   15a68:	add	r0, r6, r0
   15a6c:	add	r7, r7, #1
   15a70:	b	15a3c <__assert_fail@plt+0x465c>
   15a74:	mov	r1, #16
   15a78:	bl	18020 <__assert_fail@plt+0x6c40>
   15a7c:	mov	sl, #0
   15a80:	mov	ip, #1
   15a84:	mvn	lr, #113	; 0x71
   15a88:	mov	r9, #0
   15a8c:	mov	r2, #0
   15a90:	ldrb	r6, [r4]
   15a94:	cmp	r6, #110	; 0x6e
   15a98:	bgt	15ab4 <__assert_fail@plt+0x46d4>
   15a9c:	cmp	r6, #97	; 0x61
   15aa0:	beq	15acc <__assert_fail@plt+0x46ec>
   15aa4:	cmp	r6, #103	; 0x67
   15aa8:	bne	15ae4 <__assert_fail@plt+0x4704>
   15aac:	movw	r3, #1080	; 0x438
   15ab0:	b	15ad8 <__assert_fail@plt+0x46f8>
   15ab4:	cmp	r6, #111	; 0x6f
   15ab8:	beq	15ad4 <__assert_fail@plt+0x46f4>
   15abc:	mov	r3, #2496	; 0x9c0
   15ac0:	cmp	r6, #117	; 0x75
   15ac4:	beq	15ad8 <__assert_fail@plt+0x46f8>
   15ac8:	b	15cb0 <__assert_fail@plt+0x48d0>
   15acc:	movw	r3, #4095	; 0xfff
   15ad0:	b	15ad8 <__assert_fail@plt+0x46f8>
   15ad4:	movw	r3, #519	; 0x207
   15ad8:	orr	r2, r2, r3
   15adc:	add	r4, r4, #1
   15ae0:	b	15a90 <__assert_fail@plt+0x46b0>
   15ae4:	sub	r1, r6, #43	; 0x2b
   15ae8:	cmp	r1, #18
   15aec:	bhi	15cb0 <__assert_fail@plt+0x48d0>
   15af0:	tst	r5, ip, lsl r1
   15af4:	beq	15cb0 <__assert_fail@plt+0x48d0>
   15af8:	ldrb	r3, [r4, #1]
   15afc:	add	r4, r4, #2
   15b00:	sub	r1, r3, #48	; 0x30
   15b04:	cmp	r1, #8
   15b08:	bcs	15b60 <__assert_fail@plt+0x4780>
   15b0c:	mov	r7, #0
   15b10:	lsl	r1, r7, #3
   15b14:	uxtab	r1, r1, r3
   15b18:	sub	r7, r1, #48	; 0x30
   15b1c:	cmp	sl, r7, lsr #12
   15b20:	bne	15cb0 <__assert_fail@plt+0x48d0>
   15b24:	ldrb	r3, [r4], #1
   15b28:	and	r1, r3, #248	; 0xf8
   15b2c:	cmp	r1, #48	; 0x30
   15b30:	beq	15b10 <__assert_fail@plt+0x4730>
   15b34:	cmp	r2, #0
   15b38:	bne	15cb0 <__assert_fail@plt+0x48d0>
   15b3c:	sub	r4, r4, #1
   15b40:	mov	r8, #1
   15b44:	movw	r2, #4095	; 0xfff
   15b48:	cmp	r3, #0
   15b4c:	beq	15b88 <__assert_fail@plt+0x47a8>
   15b50:	cmp	r3, #44	; 0x2c
   15b54:	movw	r3, #4095	; 0xfff
   15b58:	beq	15c30 <__assert_fail@plt+0x4850>
   15b5c:	b	15cb0 <__assert_fail@plt+0x48d0>
   15b60:	cmp	r3, #103	; 0x67
   15b64:	beq	15b90 <__assert_fail@plt+0x47b0>
   15b68:	cmp	r3, #111	; 0x6f
   15b6c:	beq	15ba0 <__assert_fail@plt+0x47c0>
   15b70:	cmp	r3, #117	; 0x75
   15b74:	bne	15bb0 <__assert_fail@plt+0x47d0>
   15b78:	mov	r8, #3
   15b7c:	mov	r3, #0
   15b80:	mov	r7, #448	; 0x1c0
   15b84:	b	15c30 <__assert_fail@plt+0x4850>
   15b88:	movw	r3, #4095	; 0xfff
   15b8c:	b	15c30 <__assert_fail@plt+0x4850>
   15b90:	mov	r8, #3
   15b94:	mov	r3, #0
   15b98:	mov	r7, #56	; 0x38
   15b9c:	b	15c30 <__assert_fail@plt+0x4850>
   15ba0:	mov	r8, #3
   15ba4:	mov	r3, #0
   15ba8:	mov	r7, #7
   15bac:	b	15c30 <__assert_fail@plt+0x4850>
   15bb0:	mov	r8, #1
   15bb4:	mov	r7, #0
   15bb8:	uxtab	r1, lr, r3
   15bbc:	cmp	r1, #6
   15bc0:	bhi	15bf0 <__assert_fail@plt+0x4810>
   15bc4:	add	r3, pc, #0
   15bc8:	ldr	pc, [r3, r1, lsl #2]
   15bcc:	andeq	r5, r1, r8, ror #23
   15bd0:	andeq	r5, r1, r4, lsl #24
   15bd4:	andeq	r5, r1, ip, lsl #24
   15bd8:	andeq	r5, r1, r8, lsr #24
   15bdc:	andeq	r5, r1, r8, lsr #24
   15be0:	andeq	r5, r1, r4, lsl ip
   15be4:	andeq	r5, r1, ip, lsl ip
   15be8:	orr	r7, r7, #292	; 0x124
   15bec:	b	15c20 <__assert_fail@plt+0x4840>
   15bf0:	uxtb	r1, r3
   15bf4:	cmp	r1, #88	; 0x58
   15bf8:	bne	15c28 <__assert_fail@plt+0x4848>
   15bfc:	mov	r8, #2
   15c00:	b	15c20 <__assert_fail@plt+0x4840>
   15c04:	orr	r7, r7, #3072	; 0xc00
   15c08:	b	15c20 <__assert_fail@plt+0x4840>
   15c0c:	orr	r7, r7, #512	; 0x200
   15c10:	b	15c20 <__assert_fail@plt+0x4840>
   15c14:	orr	r7, r7, #146	; 0x92
   15c18:	b	15c20 <__assert_fail@plt+0x4840>
   15c1c:	orr	r7, r7, #73	; 0x49
   15c20:	ldrb	r3, [r4], #1
   15c24:	b	15bb8 <__assert_fail@plt+0x47d8>
   15c28:	sub	r4, r4, #1
   15c2c:	mov	r3, #0
   15c30:	mov	r1, r0
   15c34:	cmp	r3, #0
   15c38:	strb	r6, [r1, r9, lsl #4]!
   15c3c:	stmib	r1, {r2, r7}
   15c40:	strb	r8, [r1, #1]
   15c44:	bne	15c54 <__assert_fail@plt+0x4874>
   15c48:	cmp	r2, #0
   15c4c:	andne	r7, r7, r2
   15c50:	mov	r3, r7
   15c54:	add	r1, r0, r9, lsl #4
   15c58:	add	r7, r9, #1
   15c5c:	str	r3, [r1, #12]
   15c60:	ldrb	r6, [r4]
   15c64:	cmp	r6, #44	; 0x2c
   15c68:	ble	15c88 <__assert_fail@plt+0x48a8>
   15c6c:	cmp	r6, #45	; 0x2d
   15c70:	mov	r9, r7
   15c74:	beq	15af8 <__assert_fail@plt+0x4718>
   15c78:	cmp	r6, #61	; 0x3d
   15c7c:	mov	r9, r7
   15c80:	beq	15af8 <__assert_fail@plt+0x4718>
   15c84:	b	15cb0 <__assert_fail@plt+0x48d0>
   15c88:	cmp	r6, #43	; 0x2b
   15c8c:	mov	r9, r7
   15c90:	beq	15af8 <__assert_fail@plt+0x4718>
   15c94:	cmp	r6, #0
   15c98:	beq	15cc0 <__assert_fail@plt+0x48e0>
   15c9c:	cmp	r6, #44	; 0x2c
   15ca0:	bne	15cb0 <__assert_fail@plt+0x48d0>
   15ca4:	add	r4, r4, #1
   15ca8:	mov	r9, r7
   15cac:	b	15a8c <__assert_fail@plt+0x46ac>
   15cb0:	bl	18988 <__assert_fail@plt+0x75a8>
   15cb4:	mov	r0, #0
   15cb8:	sub	sp, fp, #28
   15cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cc0:	add	r1, r0, r7, lsl #4
   15cc4:	mov	r2, #0
   15cc8:	strb	r2, [r1, #1]
   15ccc:	b	15cb8 <__assert_fail@plt+0x48d8>
   15cd0:	push	{r4, sl, fp, lr}
   15cd4:	add	fp, sp, #8
   15cd8:	sub	sp, sp, #104	; 0x68
   15cdc:	mov	r1, sp
   15ce0:	bl	18e28 <__assert_fail@plt+0x7a48>
   15ce4:	mov	r1, r0
   15ce8:	mov	r0, #0
   15cec:	cmp	r1, #0
   15cf0:	bne	15d1c <__assert_fail@plt+0x493c>
   15cf4:	ldr	r4, [sp, #16]
   15cf8:	mov	r0, #32
   15cfc:	bl	17f50 <__assert_fail@plt+0x6b70>
   15d00:	mov	r1, #0
   15d04:	strb	r1, [r0, #17]
   15d08:	movw	r1, #4095	; 0xfff
   15d0c:	stmib	r0, {r1, r4}
   15d10:	str	r1, [r0, #12]
   15d14:	movw	r1, #317	; 0x13d
   15d18:	strh	r1, [r0]
   15d1c:	sub	sp, fp, #8
   15d20:	pop	{r4, sl, fp, pc}
   15d24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15d28:	add	fp, sp, #24
   15d2c:	ldrb	r4, [r3, #1]
   15d30:	ldr	ip, [fp, #8]
   15d34:	bfc	r0, #12, #20
   15d38:	cmp	r4, #0
   15d3c:	beq	15e1c <__assert_fail@plt+0x4a3c>
   15d40:	cmp	r1, #0
   15d44:	mov	lr, r1
   15d48:	add	r3, r3, #8
   15d4c:	mov	r9, #0
   15d50:	movw	r8, #4095	; 0xfff
   15d54:	movwne	lr, #3072	; 0xc00
   15d58:	mov	r5, r3
   15d5c:	ldr	r7, [r3, #-4]
   15d60:	ldr	r3, [r3]
   15d64:	uxtb	r4, r4
   15d68:	ldr	r6, [r5, #4]
   15d6c:	cmp	r4, #2
   15d70:	bic	r6, lr, r6
   15d74:	beq	15da0 <__assert_fail@plt+0x49c0>
   15d78:	cmp	r4, #3
   15d7c:	bne	15dac <__assert_fail@plt+0x49cc>
   15d80:	and	r4, r3, r0
   15d84:	tst	r4, #146	; 0x92
   15d88:	mov	r3, r4
   15d8c:	orrne	r3, r3, #146	; 0x92
   15d90:	tst	r4, #292	; 0x124
   15d94:	orrne	r3, r3, #292	; 0x124
   15d98:	tst	r4, #73	; 0x49
   15d9c:	b	15da8 <__assert_fail@plt+0x49c8>
   15da0:	and	r4, r0, #73	; 0x49
   15da4:	orrs	r4, r4, r1
   15da8:	orrne	r3, r3, #73	; 0x49
   15dac:	cmp	r7, #0
   15db0:	mov	r4, r7
   15db4:	mvneq	r4, r2
   15db8:	bic	r4, r4, r6
   15dbc:	and	r3, r4, r3
   15dc0:	ldrb	r4, [r5, #-8]
   15dc4:	cmp	r4, #43	; 0x2b
   15dc8:	beq	15df8 <__assert_fail@plt+0x4a18>
   15dcc:	cmp	r4, #45	; 0x2d
   15dd0:	beq	15e00 <__assert_fail@plt+0x4a20>
   15dd4:	cmp	r4, #61	; 0x3d
   15dd8:	bne	15e08 <__assert_fail@plt+0x4a28>
   15ddc:	mvn	r4, r7
   15de0:	cmp	r7, #0
   15de4:	orrne	r6, r6, r4
   15de8:	and	r0, r6, r0
   15dec:	orr	r0, r3, r0
   15df0:	bic	r3, r8, r6
   15df4:	b	15e04 <__assert_fail@plt+0x4a24>
   15df8:	orr	r0, r3, r0
   15dfc:	b	15e04 <__assert_fail@plt+0x4a24>
   15e00:	bic	r0, r0, r3
   15e04:	orr	r9, r3, r9
   15e08:	ldrb	r4, [r5, #9]
   15e0c:	add	r3, r5, #16
   15e10:	cmp	r4, #0
   15e14:	bne	15d58 <__assert_fail@plt+0x4978>
   15e18:	b	15e20 <__assert_fail@plt+0x4a40>
   15e1c:	mov	r9, #0
   15e20:	cmp	ip, #0
   15e24:	strne	r9, [ip]
   15e28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e2c:	sub	sp, sp, #4
   15e30:	push	{fp, lr}
   15e34:	mov	fp, sp
   15e38:	sub	sp, sp, #4
   15e3c:	str	r3, [fp, #8]
   15e40:	tst	r2, #64	; 0x40
   15e44:	mov	r3, #0
   15e48:	ldrne	r3, [fp, #8]
   15e4c:	bl	11278 <openat64@plt>
   15e50:	bl	17a48 <__assert_fail@plt+0x6668>
   15e54:	mov	sp, fp
   15e58:	pop	{fp, lr}
   15e5c:	add	sp, sp, #4
   15e60:	bx	lr
   15e64:	push	{r4, r5, r6, sl, fp, lr}
   15e68:	add	fp, sp, #16
   15e6c:	orr	r2, r2, #18688	; 0x4900
   15e70:	mov	r4, r3
   15e74:	orr	r2, r2, #524288	; 0x80000
   15e78:	bl	15e2c <__assert_fail@plt+0x4a4c>
   15e7c:	mov	r5, r0
   15e80:	mov	r0, #0
   15e84:	cmp	r5, #0
   15e88:	bmi	15ec0 <__assert_fail@plt+0x4ae0>
   15e8c:	mov	r0, r5
   15e90:	bl	11338 <fdopendir@plt>
   15e94:	cmp	r0, #0
   15e98:	beq	15ea4 <__assert_fail@plt+0x4ac4>
   15e9c:	str	r5, [r4]
   15ea0:	pop	{r4, r5, r6, sl, fp, pc}
   15ea4:	bl	11290 <__errno_location@plt>
   15ea8:	ldr	r6, [r0]
   15eac:	mov	r4, r0
   15eb0:	mov	r0, r5
   15eb4:	bl	113bc <close@plt>
   15eb8:	mov	r0, #0
   15ebc:	str	r6, [r4]
   15ec0:	pop	{r4, r5, r6, sl, fp, pc}
   15ec4:	push	{r4, r5, fp, lr}
   15ec8:	add	fp, sp, #8
   15ecc:	cmp	r0, #0
   15ed0:	beq	15f64 <__assert_fail@plt+0x4b84>
   15ed4:	mov	r1, #47	; 0x2f
   15ed8:	mov	r4, r0
   15edc:	bl	11314 <strrchr@plt>
   15ee0:	cmp	r0, #0
   15ee4:	mov	r5, r4
   15ee8:	addne	r5, r0, #1
   15eec:	sub	r0, r5, r4
   15ef0:	cmp	r0, #7
   15ef4:	blt	15f48 <__assert_fail@plt+0x4b68>
   15ef8:	movw	r1, #39364	; 0x99c4
   15efc:	sub	r0, r5, #7
   15f00:	mov	r2, #7
   15f04:	movt	r1, #1
   15f08:	bl	113a4 <strncmp@plt>
   15f0c:	cmp	r0, #0
   15f10:	bne	15f48 <__assert_fail@plt+0x4b68>
   15f14:	movw	r1, #39372	; 0x99cc
   15f18:	mov	r0, r5
   15f1c:	mov	r2, #3
   15f20:	movt	r1, #1
   15f24:	bl	113a4 <strncmp@plt>
   15f28:	cmp	r0, #0
   15f2c:	beq	15f38 <__assert_fail@plt+0x4b58>
   15f30:	mov	r4, r5
   15f34:	b	15f48 <__assert_fail@plt+0x4b68>
   15f38:	movw	r0, #41320	; 0xa168
   15f3c:	add	r4, r5, #3
   15f40:	movt	r0, #2
   15f44:	str	r4, [r0]
   15f48:	movw	r0, #41324	; 0xa16c
   15f4c:	movt	r0, #2
   15f50:	str	r4, [r0]
   15f54:	movw	r0, #41396	; 0xa1b4
   15f58:	movt	r0, #2
   15f5c:	str	r4, [r0]
   15f60:	pop	{r4, r5, fp, pc}
   15f64:	movw	r0, #41336	; 0xa178
   15f68:	movt	r0, #2
   15f6c:	ldr	r1, [r0]
   15f70:	movw	r0, #39308	; 0x998c
   15f74:	movt	r0, #1
   15f78:	bl	11398 <fputs@plt>
   15f7c:	bl	113b0 <abort@plt>
   15f80:	push	{r4, r5, r6, sl, fp, lr}
   15f84:	add	fp, sp, #16
   15f88:	mov	r4, r0
   15f8c:	movw	r0, #41400	; 0xa1b8
   15f90:	movt	r0, #2
   15f94:	cmp	r4, #0
   15f98:	moveq	r4, r0
   15f9c:	bl	11290 <__errno_location@plt>
   15fa0:	ldr	r6, [r0]
   15fa4:	mov	r5, r0
   15fa8:	mov	r0, r4
   15fac:	mov	r1, #48	; 0x30
   15fb0:	bl	182a0 <__assert_fail@plt+0x6ec0>
   15fb4:	str	r6, [r5]
   15fb8:	pop	{r4, r5, r6, sl, fp, pc}
   15fbc:	movw	r1, #41400	; 0xa1b8
   15fc0:	cmp	r0, #0
   15fc4:	movt	r1, #2
   15fc8:	movne	r1, r0
   15fcc:	ldr	r0, [r1]
   15fd0:	bx	lr
   15fd4:	movw	r2, #41400	; 0xa1b8
   15fd8:	cmp	r0, #0
   15fdc:	movt	r2, #2
   15fe0:	movne	r2, r0
   15fe4:	str	r1, [r2]
   15fe8:	bx	lr
   15fec:	movw	r3, #41400	; 0xa1b8
   15ff0:	cmp	r0, #0
   15ff4:	and	r2, r2, #1
   15ff8:	movt	r3, #2
   15ffc:	movne	r3, r0
   16000:	ubfx	r0, r1, #5, #3
   16004:	and	r1, r1, #31
   16008:	add	ip, r3, r0, lsl #2
   1600c:	mov	r0, #1
   16010:	ldr	r3, [ip, #8]
   16014:	and	r0, r0, r3, lsr r1
   16018:	eor	r2, r0, r2
   1601c:	eor	r1, r3, r2, lsl r1
   16020:	str	r1, [ip, #8]
   16024:	bx	lr
   16028:	movw	r2, #41400	; 0xa1b8
   1602c:	cmp	r0, #0
   16030:	movt	r2, #2
   16034:	movne	r2, r0
   16038:	ldr	r0, [r2, #4]
   1603c:	str	r1, [r2, #4]
   16040:	bx	lr
   16044:	push	{fp, lr}
   16048:	mov	fp, sp
   1604c:	movw	r3, #41400	; 0xa1b8
   16050:	cmp	r0, #0
   16054:	movt	r3, #2
   16058:	movne	r3, r0
   1605c:	cmp	r1, #0
   16060:	mov	r0, #10
   16064:	cmpne	r2, #0
   16068:	str	r0, [r3]
   1606c:	bne	16074 <__assert_fail@plt+0x4c94>
   16070:	bl	113b0 <abort@plt>
   16074:	str	r1, [r3, #40]	; 0x28
   16078:	str	r2, [r3, #44]	; 0x2c
   1607c:	pop	{fp, pc}
   16080:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16084:	add	fp, sp, #28
   16088:	sub	sp, sp, #20
   1608c:	mov	r7, r0
   16090:	ldr	r0, [fp, #8]
   16094:	movw	r5, #41400	; 0xa1b8
   16098:	mov	r8, r3
   1609c:	mov	r9, r2
   160a0:	mov	sl, r1
   160a4:	movt	r5, #2
   160a8:	cmp	r0, #0
   160ac:	movne	r5, r0
   160b0:	bl	11290 <__errno_location@plt>
   160b4:	ldr	r2, [r5, #40]	; 0x28
   160b8:	ldr	r3, [r5, #44]	; 0x2c
   160bc:	mov	r4, r0
   160c0:	ldm	r5, {r0, r1}
   160c4:	add	r5, r5, #8
   160c8:	ldr	r6, [r4]
   160cc:	stm	sp, {r0, r1, r5}
   160d0:	mov	r0, r7
   160d4:	mov	r1, sl
   160d8:	str	r2, [sp, #12]
   160dc:	str	r3, [sp, #16]
   160e0:	mov	r2, r9
   160e4:	mov	r3, r8
   160e8:	bl	160f8 <__assert_fail@plt+0x4d18>
   160ec:	str	r6, [r4]
   160f0:	sub	sp, fp, #28
   160f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160fc:	add	fp, sp, #28
   16100:	sub	sp, sp, #156	; 0x9c
   16104:	mov	r5, r0
   16108:	add	r0, r2, #1
   1610c:	mov	r6, r1
   16110:	mov	sl, r3
   16114:	str	r2, [fp, #-80]	; 0xffffffb0
   16118:	str	r0, [sp, #72]	; 0x48
   1611c:	ldr	r0, [fp, #12]
   16120:	and	r1, r0, #1
   16124:	str	r1, [sp, #32]
   16128:	and	r1, r0, #4
   1612c:	str	r1, [sp, #28]
   16130:	ubfx	r9, r0, #1, #1
   16134:	bl	111c4 <__ctype_get_mb_cur_max@plt>
   16138:	str	r0, [sp, #40]	; 0x28
   1613c:	ldr	r0, [fp, #24]
   16140:	ldr	r7, [fp, #8]
   16144:	mov	r1, #0
   16148:	mov	lr, #0
   1614c:	str	r5, [fp, #-84]	; 0xffffffac
   16150:	str	r1, [sp, #60]	; 0x3c
   16154:	mov	r1, #1
   16158:	str	r1, [fp, #-48]	; 0xffffffd0
   1615c:	str	r0, [sp, #80]	; 0x50
   16160:	ldr	r0, [fp, #20]
   16164:	str	r0, [sp, #76]	; 0x4c
   16168:	mov	r0, #0
   1616c:	str	r0, [sp, #56]	; 0x38
   16170:	mov	r0, #0
   16174:	str	r0, [fp, #-88]	; 0xffffffa8
   16178:	mov	r0, #0
   1617c:	str	r0, [fp, #-72]	; 0xffffffb8
   16180:	mov	r0, #0
   16184:	cmp	r7, #10
   16188:	bhi	17164 <__assert_fail@plt+0x5d84>
   1618c:	add	r1, pc, #24
   16190:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16194:	mov	ip, r6
   16198:	mov	r8, #0
   1619c:	mov	r2, #1
   161a0:	mov	r6, #0
   161a4:	mov	r3, sl
   161a8:	ldr	pc, [r1, r7, lsl #2]
   161ac:	muleq	r1, r8, r2
   161b0:	andeq	r6, r1, ip, ror #5
   161b4:	andeq	r6, r1, ip, lsr #5
   161b8:	muleq	r1, r0, r2
   161bc:	andeq	r6, r1, r0, ror #5
   161c0:	andeq	r6, r1, r4, lsl r3
   161c4:			; <UNDEFINED> instruction: 0x000162bc
   161c8:	muleq	r1, r8, r3
   161cc:	ldrdeq	r6, [r1], -r8
   161d0:	ldrdeq	r6, [r1], -r8
   161d4:	andeq	r6, r1, r8, lsl r2
   161d8:	movw	r0, #39454	; 0x9a1e
   161dc:	mov	r1, r7
   161e0:	mov	r6, r5
   161e4:	mov	r4, ip
   161e8:	mov	r5, lr
   161ec:	movt	r0, #1
   161f0:	bl	178c8 <__assert_fail@plt+0x64e8>
   161f4:	str	r0, [sp, #76]	; 0x4c
   161f8:	movw	r0, #39456	; 0x9a20
   161fc:	mov	r1, r7
   16200:	movt	r0, #1
   16204:	bl	178c8 <__assert_fail@plt+0x64e8>
   16208:	mov	lr, r5
   1620c:	mov	r5, r6
   16210:	mov	ip, r4
   16214:	str	r0, [sp, #80]	; 0x50
   16218:	mov	r8, #0
   1621c:	tst	r9, #1
   16220:	str	lr, [sp, #44]	; 0x2c
   16224:	bne	1625c <__assert_fail@plt+0x4e7c>
   16228:	ldr	r0, [sp, #76]	; 0x4c
   1622c:	ldrb	r0, [r0]
   16230:	cmp	r0, #0
   16234:	beq	1625c <__assert_fail@plt+0x4e7c>
   16238:	ldr	r1, [sp, #76]	; 0x4c
   1623c:	mov	r8, #0
   16240:	add	r1, r1, #1
   16244:	cmp	r8, ip
   16248:	strbcc	r0, [r5, r8]
   1624c:	ldrb	r0, [r1, r8]
   16250:	add	r8, r8, #1
   16254:	cmp	r0, #0
   16258:	bne	16244 <__assert_fail@plt+0x4e64>
   1625c:	ldr	r6, [sp, #80]	; 0x50
   16260:	mov	r4, ip
   16264:	mov	r0, r6
   16268:	bl	1126c <strlen@plt>
   1626c:	mov	ip, r4
   16270:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16274:	ldr	lr, [sp, #44]	; 0x2c
   16278:	str	r6, [fp, #-88]	; 0xffffffa8
   1627c:	str	r0, [fp, #-72]	; 0xffffffb8
   16280:	mov	r2, #1
   16284:	mov	r6, r9
   16288:	mov	r3, sl
   1628c:	b	16398 <__assert_fail@plt+0x4fb8>
   16290:	mov	r0, #1
   16294:	b	162ec <__assert_fail@plt+0x4f0c>
   16298:	mov	r7, #0
   1629c:	mov	r8, #0
   162a0:	mov	r2, r0
   162a4:	mov	r6, #0
   162a8:	b	16398 <__assert_fail@plt+0x4fb8>
   162ac:	tst	r9, #1
   162b0:	bne	162ec <__assert_fail@plt+0x4f0c>
   162b4:	mov	r2, r0
   162b8:	b	16344 <__assert_fail@plt+0x4f64>
   162bc:	mov	r0, #1
   162c0:	mov	r8, #0
   162c4:	mov	r7, #5
   162c8:	mov	r2, #1
   162cc:	str	r0, [fp, #-72]	; 0xffffffb8
   162d0:	movw	r0, #39452	; 0x9a1c
   162d4:	movt	r0, #1
   162d8:	str	r0, [fp, #-88]	; 0xffffffa8
   162dc:	b	1630c <__assert_fail@plt+0x4f2c>
   162e0:	mov	r2, #1
   162e4:	tst	r9, #1
   162e8:	beq	16344 <__assert_fail@plt+0x4f64>
   162ec:	mov	r1, #1
   162f0:	mov	r8, #0
   162f4:	mov	r7, #2
   162f8:	mov	r2, r0
   162fc:	str	r1, [fp, #-72]	; 0xffffffb8
   16300:	movw	r1, #39456	; 0x9a20
   16304:	movt	r1, #1
   16308:	str	r1, [fp, #-88]	; 0xffffffa8
   1630c:	mov	r6, #1
   16310:	b	16398 <__assert_fail@plt+0x4fb8>
   16314:	tst	r9, #1
   16318:	beq	16368 <__assert_fail@plt+0x4f88>
   1631c:	mov	r0, #1
   16320:	mov	r8, #0
   16324:	mov	r2, #1
   16328:	mov	r6, #1
   1632c:	mov	r7, #5
   16330:	str	r0, [fp, #-72]	; 0xffffffb8
   16334:	movw	r0, #39452	; 0x9a1c
   16338:	movt	r0, #1
   1633c:	str	r0, [fp, #-88]	; 0xffffffa8
   16340:	b	16398 <__assert_fail@plt+0x4fb8>
   16344:	cmp	ip, #0
   16348:	mov	r8, #1
   1634c:	mov	r6, #0
   16350:	mov	r7, #2
   16354:	movne	r0, #39	; 0x27
   16358:	strbne	r0, [r5]
   1635c:	movw	r0, #39456	; 0x9a20
   16360:	movt	r0, #1
   16364:	b	1638c <__assert_fail@plt+0x4fac>
   16368:	cmp	ip, #0
   1636c:	mov	r8, #1
   16370:	mov	r2, #1
   16374:	mov	r7, #5
   16378:	mov	r6, #0
   1637c:	movne	r0, #34	; 0x22
   16380:	strbne	r0, [r5]
   16384:	movw	r0, #39452	; 0x9a1c
   16388:	movt	r0, #1
   1638c:	str	r0, [fp, #-88]	; 0xffffffa8
   16390:	mov	r0, #1
   16394:	str	r0, [fp, #-72]	; 0xffffffb8
   16398:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1639c:	str	r7, [fp, #-68]	; 0xffffffbc
   163a0:	str	r6, [fp, #-76]	; 0xffffffb4
   163a4:	str	r2, [sp, #84]	; 0x54
   163a8:	cmp	r0, #0
   163ac:	movwne	r0, #1
   163b0:	and	r1, r0, r6
   163b4:	and	r1, r2, r1
   163b8:	str	r1, [sp, #48]	; 0x30
   163bc:	sub	r1, r7, #2
   163c0:	clz	r1, r1
   163c4:	lsr	r1, r1, #5
   163c8:	and	r1, r1, r6
   163cc:	str	r1, [sp, #64]	; 0x40
   163d0:	subs	r1, r7, #2
   163d4:	eor	r7, r6, #1
   163d8:	movwne	r1, #1
   163dc:	str	r7, [sp, #92]	; 0x5c
   163e0:	orr	r7, r1, r7
   163e4:	and	r1, r1, r2
   163e8:	and	r0, r0, r1
   163ec:	str	r7, [sp, #68]	; 0x44
   163f0:	mov	r7, #0
   163f4:	str	r0, [fp, #-60]	; 0xffffffc4
   163f8:	orr	r0, r1, r6
   163fc:	ldr	r1, [fp, #16]
   16400:	eor	r0, r0, #1
   16404:	clz	r1, r1
   16408:	lsr	r1, r1, #5
   1640c:	orr	r0, r1, r0
   16410:	str	r0, [fp, #-64]	; 0xffffffc0
   16414:	eor	r0, r2, #1
   16418:	str	r0, [sp, #52]	; 0x34
   1641c:	cmn	r3, #1
   16420:	beq	16430 <__assert_fail@plt+0x5050>
   16424:	cmp	r7, r3
   16428:	bne	1643c <__assert_fail@plt+0x505c>
   1642c:	b	16f98 <__assert_fail@plt+0x5bb8>
   16430:	ldrb	r0, [r4, r7]
   16434:	cmp	r0, #0
   16438:	beq	16fa0 <__assert_fail@plt+0x5bc0>
   1643c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16440:	cmp	r0, #0
   16444:	beq	1648c <__assert_fail@plt+0x50ac>
   16448:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1644c:	add	r5, r7, r0
   16450:	cmp	r0, #2
   16454:	bcc	164a0 <__assert_fail@plt+0x50c0>
   16458:	mov	r0, #0
   1645c:	cmn	r3, #1
   16460:	str	r0, [fp, #-56]	; 0xffffffc8
   16464:	bne	164a8 <__assert_fail@plt+0x50c8>
   16468:	mov	r0, r4
   1646c:	mov	r4, ip
   16470:	mov	r6, lr
   16474:	bl	1126c <strlen@plt>
   16478:	mov	ip, r4
   1647c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16480:	mov	lr, r6
   16484:	mov	r3, r0
   16488:	b	164a8 <__assert_fail@plt+0x50c8>
   1648c:	mov	r0, #0
   16490:	mov	sl, r3
   16494:	str	r0, [fp, #-56]	; 0xffffffc8
   16498:	mov	r0, #0
   1649c:	b	16514 <__assert_fail@plt+0x5134>
   164a0:	mov	r0, #0
   164a4:	str	r0, [fp, #-56]	; 0xffffffc8
   164a8:	cmp	r5, r3
   164ac:	bls	164c0 <__assert_fail@plt+0x50e0>
   164b0:	ldr	r5, [fp, #-84]	; 0xffffffac
   164b4:	mov	r0, #0
   164b8:	mov	sl, r3
   164bc:	b	16514 <__assert_fail@plt+0x5134>
   164c0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   164c4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   164c8:	add	r0, r4, r7
   164cc:	mov	r5, lr
   164d0:	mov	r6, ip
   164d4:	mov	sl, r3
   164d8:	bl	11260 <bcmp@plt>
   164dc:	ldr	r2, [sp, #92]	; 0x5c
   164e0:	cmp	r0, #0
   164e4:	ldr	r3, [fp, #-84]	; 0xffffffac
   164e8:	mov	r1, r0
   164ec:	movwne	r1, #1
   164f0:	orr	r1, r1, r2
   164f4:	tst	r1, #1
   164f8:	beq	17024 <__assert_fail@plt+0x5c44>
   164fc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16500:	clz	r0, r0
   16504:	mov	lr, r5
   16508:	mov	ip, r6
   1650c:	mov	r5, r3
   16510:	lsr	r0, r0, #5
   16514:	str	r0, [fp, #-52]	; 0xffffffcc
   16518:	ldrb	r6, [r4, r7]
   1651c:	cmp	r6, #126	; 0x7e
   16520:	bhi	16a48 <__assert_fail@plt+0x5668>
   16524:	add	r3, pc, #16
   16528:	mov	r9, #1
   1652c:	mov	r2, #110	; 0x6e
   16530:	mov	r0, #97	; 0x61
   16534:	mov	r1, #0
   16538:	ldr	pc, [r3, r6, lsl #2]
   1653c:	andeq	r6, r1, ip, lsr #17
   16540:	andeq	r6, r1, r8, asr #20
   16544:	andeq	r6, r1, r8, asr #20
   16548:	andeq	r6, r1, r8, asr #20
   1654c:	andeq	r6, r1, r8, asr #20
   16550:	andeq	r6, r1, r8, asr #20
   16554:	andeq	r6, r1, r8, asr #20
   16558:	andeq	r6, r1, r8, asr #21
   1655c:	andeq	r6, r1, ip, lsl #17
   16560:	andeq	r6, r1, r4, lsl #17
   16564:	muleq	r1, r8, r8
   16568:			; <UNDEFINED> instruction: 0x000169b0
   1656c:	andeq	r6, r1, ip, ror r8
   16570:	muleq	r1, r4, r8
   16574:	andeq	r6, r1, r8, asr #20
   16578:	andeq	r6, r1, r8, asr #20
   1657c:	andeq	r6, r1, r8, asr #20
   16580:	andeq	r6, r1, r8, asr #20
   16584:	andeq	r6, r1, r8, asr #20
   16588:	andeq	r6, r1, r8, asr #20
   1658c:	andeq	r6, r1, r8, asr #20
   16590:	andeq	r6, r1, r8, asr #20
   16594:	andeq	r6, r1, r8, asr #20
   16598:	andeq	r6, r1, r8, asr #20
   1659c:	andeq	r6, r1, r8, asr #20
   165a0:	andeq	r6, r1, r8, asr #20
   165a4:	andeq	r6, r1, r8, asr #20
   165a8:	andeq	r6, r1, r8, asr #20
   165ac:	andeq	r6, r1, r8, asr #20
   165b0:	andeq	r6, r1, r8, asr #20
   165b4:	andeq	r6, r1, r8, asr #20
   165b8:	andeq	r6, r1, r8, asr #20
   165bc:	andeq	r6, r1, ip, lsr #16
   165c0:	andeq	r6, r1, r0, lsr r8
   165c4:	andeq	r6, r1, r0, lsr r8
   165c8:	andeq	r6, r1, r4, lsl r8
   165cc:	andeq	r6, r1, r0, lsr r8
   165d0:	andeq	r6, r1, r8, lsr r7
   165d4:	andeq	r6, r1, r0, lsr r8
   165d8:			; <UNDEFINED> instruction: 0x000169b8
   165dc:	andeq	r6, r1, r0, lsr r8
   165e0:	andeq	r6, r1, r0, lsr r8
   165e4:	andeq	r6, r1, r0, lsr r8
   165e8:	andeq	r6, r1, r8, lsr r7
   165ec:	andeq	r6, r1, r8, lsr r7
   165f0:	andeq	r6, r1, r8, lsr r7
   165f4:	andeq	r6, r1, r8, lsr r7
   165f8:	andeq	r6, r1, r8, lsr r7
   165fc:	andeq	r6, r1, r8, lsr r7
   16600:	andeq	r6, r1, r8, lsr r7
   16604:	andeq	r6, r1, r8, lsr r7
   16608:	andeq	r6, r1, r8, lsr r7
   1660c:	andeq	r6, r1, r8, lsr r7
   16610:	andeq	r6, r1, r8, lsr r7
   16614:	andeq	r6, r1, r8, lsr r7
   16618:	andeq	r6, r1, r8, lsr r7
   1661c:	andeq	r6, r1, r8, lsr r7
   16620:	andeq	r6, r1, r8, lsr r7
   16624:	andeq	r6, r1, r8, lsr r7
   16628:	andeq	r6, r1, r0, lsr r8
   1662c:	andeq	r6, r1, r0, lsr r8
   16630:	andeq	r6, r1, r0, lsr r8
   16634:	andeq	r6, r1, r0, lsr r8
   16638:	andeq	r6, r1, r4, lsl #19
   1663c:	andeq	r6, r1, r8, asr #20
   16640:	andeq	r6, r1, r8, lsr r7
   16644:	andeq	r6, r1, r8, lsr r7
   16648:	andeq	r6, r1, r8, lsr r7
   1664c:	andeq	r6, r1, r8, lsr r7
   16650:	andeq	r6, r1, r8, lsr r7
   16654:	andeq	r6, r1, r8, lsr r7
   16658:	andeq	r6, r1, r8, lsr r7
   1665c:	andeq	r6, r1, r8, lsr r7
   16660:	andeq	r6, r1, r8, lsr r7
   16664:	andeq	r6, r1, r8, lsr r7
   16668:	andeq	r6, r1, r8, lsr r7
   1666c:	andeq	r6, r1, r8, lsr r7
   16670:	andeq	r6, r1, r8, lsr r7
   16674:	andeq	r6, r1, r8, lsr r7
   16678:	andeq	r6, r1, r8, lsr r7
   1667c:	andeq	r6, r1, r8, lsr r7
   16680:	andeq	r6, r1, r8, lsr r7
   16684:	andeq	r6, r1, r8, lsr r7
   16688:	andeq	r6, r1, r8, lsr r7
   1668c:	andeq	r6, r1, r8, lsr r7
   16690:	andeq	r6, r1, r8, lsr r7
   16694:	andeq	r6, r1, r8, lsr r7
   16698:	andeq	r6, r1, r8, lsr r7
   1669c:	andeq	r6, r1, r8, lsr r7
   166a0:	andeq	r6, r1, r8, lsr r7
   166a4:	andeq	r6, r1, r8, lsr r7
   166a8:	andeq	r6, r1, r0, lsr r8
   166ac:	andeq	r6, r1, r8, asr r8
   166b0:	andeq	r6, r1, r8, lsr r7
   166b4:	andeq	r6, r1, r0, lsr r8
   166b8:	andeq	r6, r1, r8, lsr r7
   166bc:	andeq	r6, r1, r0, lsr r8
   166c0:	andeq	r6, r1, r8, lsr r7
   166c4:	andeq	r6, r1, r8, lsr r7
   166c8:	andeq	r6, r1, r8, lsr r7
   166cc:	andeq	r6, r1, r8, lsr r7
   166d0:	andeq	r6, r1, r8, lsr r7
   166d4:	andeq	r6, r1, r8, lsr r7
   166d8:	andeq	r6, r1, r8, lsr r7
   166dc:	andeq	r6, r1, r8, lsr r7
   166e0:	andeq	r6, r1, r8, lsr r7
   166e4:	andeq	r6, r1, r8, lsr r7
   166e8:	andeq	r6, r1, r8, lsr r7
   166ec:	andeq	r6, r1, r8, lsr r7
   166f0:	andeq	r6, r1, r8, lsr r7
   166f4:	andeq	r6, r1, r8, lsr r7
   166f8:	andeq	r6, r1, r8, lsr r7
   166fc:	andeq	r6, r1, r8, lsr r7
   16700:	andeq	r6, r1, r8, lsr r7
   16704:	andeq	r6, r1, r8, lsr r7
   16708:	andeq	r6, r1, r8, lsr r7
   1670c:	andeq	r6, r1, r8, lsr r7
   16710:	andeq	r6, r1, r8, lsr r7
   16714:	andeq	r6, r1, r8, lsr r7
   16718:	andeq	r6, r1, r8, lsr r7
   1671c:	andeq	r6, r1, r8, lsr r7
   16720:	andeq	r6, r1, r8, lsr r7
   16724:	andeq	r6, r1, r8, lsr r7
   16728:	andeq	r6, r1, ip, ror #15
   1672c:	andeq	r6, r1, r0, lsr r8
   16730:	andeq	r6, r1, ip, ror #15
   16734:	andeq	r6, r1, r4, lsl r8
   16738:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1673c:	tst	r0, #1
   16740:	bne	1676c <__assert_fail@plt+0x538c>
   16744:	ldr	r1, [fp, #16]
   16748:	ubfx	r0, r6, #5, #3
   1674c:	mov	r2, #1
   16750:	ldr	r0, [r1, r0, lsl #2]
   16754:	and	r1, r6, #31
   16758:	tst	r0, r2, lsl r1
   1675c:	beq	1676c <__assert_fail@plt+0x538c>
   16760:	mov	r0, r6
   16764:	mov	r1, r9
   16768:	b	16780 <__assert_fail@plt+0x53a0>
   1676c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16770:	mov	r1, r9
   16774:	cmp	r0, #0
   16778:	mov	r0, r6
   1677c:	beq	16ecc <__assert_fail@plt+0x5aec>
   16780:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16784:	tst	r2, #1
   16788:	bne	17068 <__assert_fail@plt+0x5c88>
   1678c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16790:	subs	r2, r2, #2
   16794:	movwne	r2, #1
   16798:	orr	r2, r2, lr
   1679c:	tst	r2, #1
   167a0:	bne	167d8 <__assert_fail@plt+0x53f8>
   167a4:	cmp	r8, ip
   167a8:	mov	lr, #1
   167ac:	movcc	r2, #39	; 0x27
   167b0:	strbcc	r2, [r5, r8]
   167b4:	add	r2, r8, #1
   167b8:	cmp	r2, ip
   167bc:	movcc	r3, #36	; 0x24
   167c0:	strbcc	r3, [r5, r2]
   167c4:	add	r2, r8, #2
   167c8:	add	r8, r8, #3
   167cc:	cmp	r2, ip
   167d0:	movcc	r3, #39	; 0x27
   167d4:	strbcc	r3, [r5, r2]
   167d8:	cmp	r8, ip
   167dc:	movcc	r2, #92	; 0x5c
   167e0:	strbcc	r2, [r5, r8]
   167e4:	add	r8, r8, #1
   167e8:	b	16f0c <__assert_fail@plt+0x5b2c>
   167ec:	cmp	sl, #1
   167f0:	beq	16814 <__assert_fail@plt+0x5434>
   167f4:	mov	r9, #0
   167f8:	cmn	sl, #1
   167fc:	bne	16820 <__assert_fail@plt+0x5440>
   16800:	ldrb	r0, [r4, #1]
   16804:	cmp	r0, #0
   16808:	beq	16814 <__assert_fail@plt+0x5434>
   1680c:	mvn	sl, #0
   16810:	b	16820 <__assert_fail@plt+0x5440>
   16814:	mov	r9, #0
   16818:	cmp	r7, #0
   1681c:	beq	1682c <__assert_fail@plt+0x544c>
   16820:	mov	r0, #0
   16824:	str	r0, [fp, #-56]	; 0xffffffc8
   16828:	b	16738 <__assert_fail@plt+0x5358>
   1682c:	mov	r1, #1
   16830:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16834:	cmp	r0, #2
   16838:	bne	16850 <__assert_fail@plt+0x5470>
   1683c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16840:	mov	r9, r1
   16844:	tst	r0, #1
   16848:	beq	16738 <__assert_fail@plt+0x5358>
   1684c:	b	17068 <__assert_fail@plt+0x5c88>
   16850:	mov	r9, r1
   16854:	b	16738 <__assert_fail@plt+0x5358>
   16858:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1685c:	cmp	r0, #2
   16860:	bne	16aa4 <__assert_fail@plt+0x56c4>
   16864:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16868:	tst	r0, #1
   1686c:	bne	17068 <__assert_fail@plt+0x5c88>
   16870:	mov	r0, #0
   16874:	str	r0, [fp, #-56]	; 0xffffffc8
   16878:	b	16abc <__assert_fail@plt+0x56dc>
   1687c:	mov	r0, #102	; 0x66
   16880:	b	16ac8 <__assert_fail@plt+0x56e8>
   16884:	mov	r2, #116	; 0x74
   16888:	b	16898 <__assert_fail@plt+0x54b8>
   1688c:	mov	r0, #98	; 0x62
   16890:	b	16ac8 <__assert_fail@plt+0x56e8>
   16894:	mov	r2, #114	; 0x72
   16898:	ldr	r0, [sp, #68]	; 0x44
   1689c:	tst	r0, #1
   168a0:	mov	r0, r2
   168a4:	bne	16ac8 <__assert_fail@plt+0x56e8>
   168a8:	b	17068 <__assert_fail@plt+0x5c88>
   168ac:	ldr	r0, [sp, #84]	; 0x54
   168b0:	tst	r0, #1
   168b4:	beq	16ae8 <__assert_fail@plt+0x5708>
   168b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   168bc:	tst	r0, #1
   168c0:	bne	17154 <__assert_fail@plt+0x5d74>
   168c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   168c8:	mov	r2, sl
   168cc:	subs	r0, r0, #2
   168d0:	movwne	r0, #1
   168d4:	orr	r0, r0, lr
   168d8:	tst	r0, #1
   168dc:	bne	16914 <__assert_fail@plt+0x5534>
   168e0:	cmp	r8, ip
   168e4:	mov	lr, #1
   168e8:	movcc	r0, #39	; 0x27
   168ec:	strbcc	r0, [r5, r8]
   168f0:	add	r0, r8, #1
   168f4:	cmp	r0, ip
   168f8:	movcc	r1, #36	; 0x24
   168fc:	strbcc	r1, [r5, r0]
   16900:	add	r0, r8, #2
   16904:	add	r8, r8, #3
   16908:	cmp	r0, ip
   1690c:	movcc	r1, #39	; 0x27
   16910:	strbcc	r1, [r5, r0]
   16914:	mov	r1, #1
   16918:	cmp	r8, ip
   1691c:	mov	r9, #0
   16920:	mov	r6, #48	; 0x30
   16924:	str	r1, [fp, #-56]	; 0xffffffc8
   16928:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1692c:	movcc	r0, #92	; 0x5c
   16930:	strbcc	r0, [r5, r8]
   16934:	add	r0, r8, #1
   16938:	cmp	r1, #2
   1693c:	beq	16c44 <__assert_fail@plt+0x5864>
   16940:	add	r1, r7, #1
   16944:	cmp	r1, r2
   16948:	bcs	16c44 <__assert_fail@plt+0x5864>
   1694c:	ldrb	r1, [r4, r1]
   16950:	sub	r1, r1, #48	; 0x30
   16954:	uxtb	r1, r1
   16958:	cmp	r1, #9
   1695c:	bhi	16c44 <__assert_fail@plt+0x5864>
   16960:	cmp	r0, ip
   16964:	movcc	r1, #48	; 0x30
   16968:	strbcc	r1, [r5, r0]
   1696c:	add	r0, r8, #2
   16970:	add	r8, r8, #3
   16974:	cmp	r0, ip
   16978:	movcc	r1, #48	; 0x30
   1697c:	strbcc	r1, [r5, r0]
   16980:	b	16738 <__assert_fail@plt+0x5358>
   16984:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16988:	mov	r6, #63	; 0x3f
   1698c:	cmp	r0, #5
   16990:	beq	16c4c <__assert_fail@plt+0x586c>
   16994:	mov	r1, #0
   16998:	cmp	r0, #2
   1699c:	str	r1, [fp, #-56]	; 0xffffffc8
   169a0:	bne	16d00 <__assert_fail@plt+0x5920>
   169a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   169a8:	mov	r9, #0
   169ac:	b	16844 <__assert_fail@plt+0x5464>
   169b0:	mov	r0, #118	; 0x76
   169b4:	b	16ac8 <__assert_fail@plt+0x56e8>
   169b8:	mov	r0, #1
   169bc:	mov	r6, #39	; 0x27
   169c0:	str	r0, [sp, #60]	; 0x3c
   169c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   169c8:	cmp	r0, #2
   169cc:	bne	16a40 <__assert_fail@plt+0x5660>
   169d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   169d4:	tst	r0, #1
   169d8:	bne	17068 <__assert_fail@plt+0x5c88>
   169dc:	ldr	r2, [sp, #56]	; 0x38
   169e0:	clz	r1, ip
   169e4:	mov	lr, #0
   169e8:	lsr	r1, r1, #5
   169ec:	cmp	r2, #0
   169f0:	mov	r0, r2
   169f4:	movwne	r0, #1
   169f8:	orrs	r0, r0, r1
   169fc:	moveq	r2, ip
   16a00:	moveq	ip, r0
   16a04:	cmp	r8, ip
   16a08:	str	r2, [sp, #56]	; 0x38
   16a0c:	movcc	r0, #39	; 0x27
   16a10:	strbcc	r0, [r5, r8]
   16a14:	add	r0, r8, #1
   16a18:	cmp	r0, ip
   16a1c:	movcc	r1, #92	; 0x5c
   16a20:	strbcc	r1, [r5, r0]
   16a24:	add	r0, r8, #2
   16a28:	add	r8, r8, #3
   16a2c:	cmp	r0, ip
   16a30:	movcc	r1, #39	; 0x27
   16a34:	strbcc	r1, [r5, r0]
   16a38:	mov	r0, #0
   16a3c:	str	r0, [fp, #-56]	; 0xffffffc8
   16a40:	mov	r9, #1
   16a44:	b	16738 <__assert_fail@plt+0x5358>
   16a48:	ldr	r0, [sp, #40]	; 0x28
   16a4c:	str	lr, [sp, #44]	; 0x2c
   16a50:	str	ip, [sp, #88]	; 0x58
   16a54:	cmp	r0, #1
   16a58:	bne	16b08 <__assert_fail@plt+0x5728>
   16a5c:	str	sl, [sp, #36]	; 0x24
   16a60:	bl	11248 <__ctype_b_loc@plt>
   16a64:	ldr	r0, [r0]
   16a68:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16a6c:	mov	r1, #1
   16a70:	add	r0, r0, r6, lsl #1
   16a74:	ldrb	r0, [r0, #1]
   16a78:	ubfx	r9, r0, #6, #1
   16a7c:	ldr	r0, [sp, #52]	; 0x34
   16a80:	ldr	lr, [sp, #44]	; 0x2c
   16a84:	cmp	r1, #1
   16a88:	orr	r3, r9, r0
   16a8c:	bhi	16d08 <__assert_fail@plt+0x5928>
   16a90:	tst	r3, #1
   16a94:	beq	16d08 <__assert_fail@plt+0x5928>
   16a98:	ldr	sl, [sp, #36]	; 0x24
   16a9c:	ldr	ip, [sp, #88]	; 0x58
   16aa0:	b	16738 <__assert_fail@plt+0x5358>
   16aa4:	ldr	r1, [sp, #48]	; 0x30
   16aa8:	mov	r0, #0
   16aac:	str	r0, [fp, #-56]	; 0xffffffc8
   16ab0:	mov	r0, #92	; 0x5c
   16ab4:	cmp	r1, #0
   16ab8:	beq	16ac8 <__assert_fail@plt+0x56e8>
   16abc:	mov	r6, #92	; 0x5c
   16ac0:	mov	r9, #0
   16ac4:	b	16ecc <__assert_fail@plt+0x5aec>
   16ac8:	mov	r1, #0
   16acc:	mov	r9, #0
   16ad0:	str	r1, [fp, #-56]	; 0xffffffc8
   16ad4:	ldr	r1, [sp, #84]	; 0x54
   16ad8:	tst	r1, #1
   16adc:	mov	r1, #0
   16ae0:	beq	16738 <__assert_fail@plt+0x5358>
   16ae4:	b	16780 <__assert_fail@plt+0x53a0>
   16ae8:	ldr	r0, [sp, #32]
   16aec:	mov	r6, #0
   16af0:	mov	r9, #0
   16af4:	cmp	r0, #0
   16af8:	mov	r0, #0
   16afc:	str	r0, [fp, #-56]	; 0xffffffc8
   16b00:	beq	16738 <__assert_fail@plt+0x5358>
   16b04:	b	16f24 <__assert_fail@plt+0x5b44>
   16b08:	mov	r0, #0
   16b0c:	cmn	sl, #1
   16b10:	sub	r3, fp, #40	; 0x28
   16b14:	str	r0, [fp, #-36]	; 0xffffffdc
   16b18:	str	r0, [fp, #-40]	; 0xffffffd8
   16b1c:	bne	16b34 <__assert_fail@plt+0x5754>
   16b20:	mov	r0, r4
   16b24:	bl	1126c <strlen@plt>
   16b28:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16b2c:	sub	r3, fp, #40	; 0x28
   16b30:	mov	sl, r0
   16b34:	ldr	r0, [sp, #72]	; 0x48
   16b38:	mov	r9, #1
   16b3c:	mov	r1, #0
   16b40:	str	sl, [sp, #36]	; 0x24
   16b44:	add	r0, r0, r7
   16b48:	str	r0, [sp, #20]
   16b4c:	add	r0, r1, r7
   16b50:	str	r1, [sp, #24]
   16b54:	add	r1, r4, r0
   16b58:	mov	r4, r0
   16b5c:	sub	r2, sl, r0
   16b60:	sub	r0, fp, #44	; 0x2c
   16b64:	bl	18a8c <__assert_fail@plt+0x76ac>
   16b68:	cmp	r0, #0
   16b6c:	beq	16f78 <__assert_fail@plt+0x5b98>
   16b70:	cmn	r0, #1
   16b74:	beq	16f30 <__assert_fail@plt+0x5b50>
   16b78:	ldr	r2, [sp, #36]	; 0x24
   16b7c:	cmn	r0, #2
   16b80:	beq	16f38 <__assert_fail@plt+0x5b58>
   16b84:	ldr	r2, [sp, #64]	; 0x40
   16b88:	ldr	ip, [sp, #88]	; 0x58
   16b8c:	ldr	r4, [sp, #84]	; 0x54
   16b90:	ldr	lr, [fp, #-48]	; 0xffffffd0
   16b94:	cmp	r0, #2
   16b98:	mov	r1, #0
   16b9c:	movwcc	r1, #1
   16ba0:	eor	r2, r2, #1
   16ba4:	orrs	r1, r2, r1
   16ba8:	bne	16bf8 <__assert_fail@plt+0x5818>
   16bac:	ldr	r1, [sp, #24]
   16bb0:	ldr	r2, [sp, #20]
   16bb4:	add	r1, r2, r1
   16bb8:	sub	r2, r0, #1
   16bbc:	ldrb	r3, [r1]
   16bc0:	sub	r5, r3, #94	; 0x5e
   16bc4:	cmp	r5, #30
   16bc8:	bhi	16be0 <__assert_fail@plt+0x5800>
   16bcc:	mov	r4, #1
   16bd0:	mov	sl, #1073741829	; 0x40000005
   16bd4:	tst	sl, r4, lsl r5
   16bd8:	ldr	r4, [sp, #84]	; 0x54
   16bdc:	bne	17040 <__assert_fail@plt+0x5c60>
   16be0:	sub	r3, r3, #91	; 0x5b
   16be4:	cmp	r3, #2
   16be8:	bcc	17040 <__assert_fail@plt+0x5c60>
   16bec:	add	r1, r1, #1
   16bf0:	subs	r2, r2, #1
   16bf4:	bne	16bbc <__assert_fail@plt+0x57dc>
   16bf8:	ldr	r5, [sp, #24]
   16bfc:	str	lr, [fp, #-48]	; 0xffffffd0
   16c00:	add	r5, r0, r5
   16c04:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16c08:	bl	111a0 <iswprint@plt>
   16c0c:	cmp	r0, #0
   16c10:	sub	r4, fp, #40	; 0x28
   16c14:	movwne	r0, #1
   16c18:	and	r9, r9, r0
   16c1c:	mov	r0, r4
   16c20:	bl	11164 <mbsinit@plt>
   16c24:	mov	r1, r5
   16c28:	mov	r3, r4
   16c2c:	ldr	sl, [sp, #36]	; 0x24
   16c30:	ldr	r5, [fp, #-84]	; 0xffffffac
   16c34:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16c38:	cmp	r0, #0
   16c3c:	beq	16b4c <__assert_fail@plt+0x576c>
   16c40:	b	16a7c <__assert_fail@plt+0x569c>
   16c44:	mov	r8, r0
   16c48:	b	16738 <__assert_fail@plt+0x5358>
   16c4c:	mov	r0, #0
   16c50:	str	r0, [fp, #-56]	; 0xffffffc8
   16c54:	ldr	r0, [sp, #28]
   16c58:	cmp	r0, #0
   16c5c:	beq	16d00 <__assert_fail@plt+0x5920>
   16c60:	add	r0, r7, #2
   16c64:	mov	r1, sl
   16c68:	cmp	r0, sl
   16c6c:	bcs	16d00 <__assert_fail@plt+0x5920>
   16c70:	add	r1, r7, r4
   16c74:	ldrb	r1, [r1, #1]
   16c78:	cmp	r1, #63	; 0x3f
   16c7c:	bne	16d00 <__assert_fail@plt+0x5920>
   16c80:	ldrb	r9, [r4, r0]
   16c84:	sub	r2, r9, #33	; 0x21
   16c88:	cmp	r2, #29
   16c8c:	bhi	16d00 <__assert_fail@plt+0x5920>
   16c90:	mov	r1, r4
   16c94:	movw	r4, #20929	; 0x51c1
   16c98:	mov	r3, #1
   16c9c:	movt	r4, #14336	; 0x3800
   16ca0:	tst	r4, r3, lsl r2
   16ca4:	beq	16f8c <__assert_fail@plt+0x5bac>
   16ca8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16cac:	tst	r2, #1
   16cb0:	bne	1715c <__assert_fail@plt+0x5d7c>
   16cb4:	cmp	r8, ip
   16cb8:	mov	r4, r1
   16cbc:	mov	r7, r0
   16cc0:	mov	r6, r9
   16cc4:	movcc	r2, #63	; 0x3f
   16cc8:	strbcc	r2, [r5, r8]
   16ccc:	add	r2, r8, #1
   16cd0:	cmp	r2, ip
   16cd4:	movcc	r3, #34	; 0x22
   16cd8:	strbcc	r3, [r5, r2]
   16cdc:	add	r2, r8, #2
   16ce0:	cmp	r2, ip
   16ce4:	movcc	r3, #34	; 0x22
   16ce8:	strbcc	r3, [r5, r2]
   16cec:	add	r2, r8, #3
   16cf0:	add	r8, r8, #4
   16cf4:	cmp	r2, ip
   16cf8:	movcc	r3, #63	; 0x3f
   16cfc:	strbcc	r3, [r5, r2]
   16d00:	mov	r9, #0
   16d04:	b	16738 <__assert_fail@plt+0x5358>
   16d08:	ldr	sl, [sp, #36]	; 0x24
   16d0c:	add	r0, r1, r7
   16d10:	mov	r2, #0
   16d14:	str	r3, [sp, #24]
   16d18:	str	r0, [fp, #-56]	; 0xffffffc8
   16d1c:	tst	r3, #1
   16d20:	beq	16d4c <__assert_fail@plt+0x596c>
   16d24:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16d28:	tst	r0, #1
   16d2c:	beq	16e14 <__assert_fail@plt+0x5a34>
   16d30:	ldr	r1, [sp, #88]	; 0x58
   16d34:	mov	r0, r3
   16d38:	cmp	r8, r1
   16d3c:	movcc	r1, #92	; 0x5c
   16d40:	strbcc	r1, [r5, r8]
   16d44:	add	r8, r8, #1
   16d48:	b	16e18 <__assert_fail@plt+0x5a38>
   16d4c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16d50:	tst	r1, #1
   16d54:	bne	17064 <__assert_fail@plt+0x5c84>
   16d58:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16d5c:	subs	r2, r1, #2
   16d60:	movwne	r2, #1
   16d64:	orr	r2, r2, lr
   16d68:	tst	r2, #1
   16d6c:	bne	16db0 <__assert_fail@plt+0x59d0>
   16d70:	ldr	r1, [sp, #88]	; 0x58
   16d74:	add	r2, r8, #1
   16d78:	mov	lr, #1
   16d7c:	cmp	r8, r1
   16d80:	movcc	r1, #39	; 0x27
   16d84:	strbcc	r1, [r5, r8]
   16d88:	ldr	r1, [sp, #88]	; 0x58
   16d8c:	cmp	r2, r1
   16d90:	movcc	r1, #36	; 0x24
   16d94:	strbcc	r1, [r5, r2]
   16d98:	ldr	r1, [sp, #88]	; 0x58
   16d9c:	add	r2, r8, #2
   16da0:	add	r8, r8, #3
   16da4:	cmp	r2, r1
   16da8:	movcc	r1, #39	; 0x27
   16dac:	strbcc	r1, [r5, r2]
   16db0:	ldr	r1, [sp, #88]	; 0x58
   16db4:	add	r2, r8, #1
   16db8:	mov	r0, r3
   16dbc:	cmp	r8, r1
   16dc0:	movcc	r1, #92	; 0x5c
   16dc4:	strbcc	r1, [r5, r8]
   16dc8:	ldr	r1, [sp, #88]	; 0x58
   16dcc:	cmp	r2, r1
   16dd0:	bcs	16de4 <__assert_fail@plt+0x5a04>
   16dd4:	uxtb	r3, r6
   16dd8:	mov	r1, #48	; 0x30
   16ddc:	orr	r3, r1, r3, lsr #6
   16de0:	strb	r3, [r5, r2]
   16de4:	ldr	r1, [sp, #88]	; 0x58
   16de8:	add	r2, r8, #2
   16dec:	add	r8, r8, #3
   16df0:	cmp	r2, r1
   16df4:	lsrcc	r3, r6, #3
   16df8:	movcc	r1, #6
   16dfc:	bficc	r3, r1, #3, #29
   16e00:	mov	r1, #6
   16e04:	bfi	r6, r1, #3, #29
   16e08:	strbcc	r3, [r5, r2]
   16e0c:	mov	r2, #1
   16e10:	b	16e20 <__assert_fail@plt+0x5a40>
   16e14:	mov	r0, r3
   16e18:	mov	r1, #0
   16e1c:	str	r1, [fp, #-52]	; 0xffffffcc
   16e20:	mov	ip, r2
   16e24:	and	r1, r2, #1
   16e28:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16e2c:	add	r3, r7, #1
   16e30:	cmp	r2, r3
   16e34:	bls	16ebc <__assert_fail@plt+0x5adc>
   16e38:	cmp	r1, #0
   16e3c:	mvn	r5, lr
   16e40:	movwne	r1, #1
   16e44:	orr	r5, r5, r1
   16e48:	tst	r5, #1
   16e4c:	bne	16e90 <__assert_fail@plt+0x5ab0>
   16e50:	ldr	r1, [sp, #88]	; 0x58
   16e54:	ldr	r5, [fp, #-84]	; 0xffffffac
   16e58:	mov	r2, r4
   16e5c:	ldr	r4, [sp, #88]	; 0x58
   16e60:	ldr	r0, [sp, #24]
   16e64:	mov	lr, #0
   16e68:	cmp	r8, r1
   16e6c:	movcc	r1, #39	; 0x27
   16e70:	strbcc	r1, [r5, r8]
   16e74:	add	r1, r8, #1
   16e78:	add	r8, r8, #2
   16e7c:	cmp	r1, r4
   16e80:	movcc	r4, #39	; 0x27
   16e84:	strbcc	r4, [r5, r1]
   16e88:	mov	r4, r2
   16e8c:	b	16e94 <__assert_fail@plt+0x5ab4>
   16e90:	ldr	r5, [fp, #-84]	; 0xffffffac
   16e94:	ldr	r1, [sp, #88]	; 0x58
   16e98:	mov	r2, ip
   16e9c:	cmp	r8, r1
   16ea0:	ldr	r1, [sp, #72]	; 0x48
   16ea4:	strbcc	r6, [r5, r8]
   16ea8:	add	r8, r8, #1
   16eac:	ldrb	r6, [r1, r7]
   16eb0:	mov	r7, r3
   16eb4:	mov	r3, r0
   16eb8:	b	16d1c <__assert_fail@plt+0x593c>
   16ebc:	ldr	ip, [sp, #88]	; 0x58
   16ec0:	cmp	r1, #0
   16ec4:	movwne	r1, #1
   16ec8:	str	r1, [fp, #-56]	; 0xffffffc8
   16ecc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16ed0:	cmp	r0, #0
   16ed4:	bne	16f04 <__assert_fail@plt+0x5b24>
   16ed8:	tst	lr, #1
   16edc:	beq	16f04 <__assert_fail@plt+0x5b24>
   16ee0:	cmp	r8, ip
   16ee4:	mov	lr, #0
   16ee8:	movcc	r0, #39	; 0x27
   16eec:	strbcc	r0, [r5, r8]
   16ef0:	add	r0, r8, #1
   16ef4:	add	r8, r8, #2
   16ef8:	cmp	r0, ip
   16efc:	movcc	r1, #39	; 0x27
   16f00:	strbcc	r1, [r5, r0]
   16f04:	mov	r1, r9
   16f08:	mov	r0, r6
   16f0c:	cmp	r8, ip
   16f10:	strbcc	r0, [r5, r8]
   16f14:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16f18:	add	r8, r8, #1
   16f1c:	and	r0, r0, r1
   16f20:	str	r0, [fp, #-48]	; 0xffffffd0
   16f24:	mov	r3, sl
   16f28:	add	r7, r7, #1
   16f2c:	b	1641c <__assert_fail@plt+0x503c>
   16f30:	mov	r9, #0
   16f34:	b	16f78 <__assert_fail@plt+0x5b98>
   16f38:	mov	r9, #0
   16f3c:	cmp	r2, r4
   16f40:	bls	16f78 <__assert_fail@plt+0x5b98>
   16f44:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16f48:	ldr	r1, [sp, #24]
   16f4c:	add	r0, r4, r7
   16f50:	mov	r3, r1
   16f54:	ldrb	r1, [r0, r1]
   16f58:	cmp	r1, #0
   16f5c:	beq	16f84 <__assert_fail@plt+0x5ba4>
   16f60:	add	r3, r3, #1
   16f64:	add	r1, r7, r3
   16f68:	cmp	r1, r2
   16f6c:	mov	r1, r3
   16f70:	bcc	16f50 <__assert_fail@plt+0x5b70>
   16f74:	b	16a7c <__assert_fail@plt+0x569c>
   16f78:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16f7c:	ldr	r1, [sp, #24]
   16f80:	b	16a7c <__assert_fail@plt+0x569c>
   16f84:	mov	r1, r3
   16f88:	b	16a7c <__assert_fail@plt+0x569c>
   16f8c:	mov	r9, #0
   16f90:	mov	r4, r1
   16f94:	b	16738 <__assert_fail@plt+0x5358>
   16f98:	mov	sl, r7
   16f9c:	b	16fa4 <__assert_fail@plt+0x5bc4>
   16fa0:	mvn	sl, #0
   16fa4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16fa8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16fac:	eor	r0, r1, #2
   16fb0:	orr	r0, r0, r8
   16fb4:	clz	r0, r0
   16fb8:	lsr	r0, r0, #5
   16fbc:	tst	r2, r0
   16fc0:	bne	17068 <__assert_fail@plt+0x5c88>
   16fc4:	subs	r0, r1, #2
   16fc8:	movwne	r0, #1
   16fcc:	orr	r0, r2, r0
   16fd0:	tst	r0, #1
   16fd4:	ldreq	r0, [sp, #60]	; 0x3c
   16fd8:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   16fdc:	eoreq	r0, r0, #1
   16fe0:	tsteq	r0, #1
   16fe4:	bne	170fc <__assert_fail@plt+0x5d1c>
   16fe8:	tst	r1, #1
   16fec:	bne	170c8 <__assert_fail@plt+0x5ce8>
   16ff0:	ldr	r6, [sp, #56]	; 0x38
   16ff4:	mov	r9, #0
   16ff8:	cmp	r6, #0
   16ffc:	beq	170f4 <__assert_fail@plt+0x5d14>
   17000:	ldr	r0, [sp, #84]	; 0x54
   17004:	mov	r1, #0
   17008:	mov	r7, #2
   1700c:	cmp	ip, #0
   17010:	str	r1, [fp, #-48]	; 0xffffffd0
   17014:	mov	r1, #0
   17018:	str	r1, [fp, #-76]	; 0xffffffb4
   1701c:	beq	16184 <__assert_fail@plt+0x4da4>
   17020:	b	170fc <__assert_fail@plt+0x5d1c>
   17024:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17028:	ldr	r1, [fp, #12]
   1702c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17030:	mov	r5, r3
   17034:	mov	ip, r6
   17038:	mov	r3, sl
   1703c:	b	1708c <__assert_fail@plt+0x5cac>
   17040:	tst	r4, #1
   17044:	ldr	r5, [fp, #-84]	; 0xffffffac
   17048:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1704c:	ldr	r1, [fp, #12]
   17050:	ldr	r3, [sp, #36]	; 0x24
   17054:	mov	r0, #2
   17058:	movwne	r0, #4
   1705c:	mov	r2, r0
   17060:	b	1708c <__assert_fail@plt+0x5cac>
   17064:	ldr	ip, [sp, #88]	; 0x58
   17068:	ldr	r1, [sp, #84]	; 0x54
   1706c:	mov	r0, #2
   17070:	tst	r1, #1
   17074:	movwne	r0, #4
   17078:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1707c:	ldr	r1, [fp, #12]
   17080:	mov	r3, sl
   17084:	cmp	r2, #2
   17088:	moveq	r2, r0
   1708c:	mov	r0, #0
   17090:	bic	r1, r1, #2
   17094:	str	r2, [sp]
   17098:	mov	r2, r4
   1709c:	str	r0, [sp, #8]
   170a0:	ldr	r0, [sp, #76]	; 0x4c
   170a4:	str	r1, [sp, #4]
   170a8:	mov	r1, ip
   170ac:	str	r0, [sp, #12]
   170b0:	ldr	r0, [sp, #80]	; 0x50
   170b4:	str	r0, [sp, #16]
   170b8:	mov	r0, r5
   170bc:	bl	160f8 <__assert_fail@plt+0x4d18>
   170c0:	mov	r8, r0
   170c4:	b	17148 <__assert_fail@plt+0x5d68>
   170c8:	mov	r0, #5
   170cc:	ldr	r1, [sp, #56]	; 0x38
   170d0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   170d4:	mov	r3, sl
   170d8:	str	r0, [sp]
   170dc:	ldr	r0, [fp, #12]
   170e0:	str	r0, [sp, #4]
   170e4:	ldr	r0, [fp, #16]
   170e8:	str	r0, [sp, #8]
   170ec:	ldr	r0, [sp, #76]	; 0x4c
   170f0:	b	170ac <__assert_fail@plt+0x5ccc>
   170f4:	mov	r0, #0
   170f8:	str	r0, [fp, #-76]	; 0xffffffb4
   170fc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17100:	cmp	r1, #0
   17104:	beq	1713c <__assert_fail@plt+0x5d5c>
   17108:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1710c:	tst	r0, #1
   17110:	bne	1713c <__assert_fail@plt+0x5d5c>
   17114:	ldrb	r0, [r1]
   17118:	cmp	r0, #0
   1711c:	beq	1713c <__assert_fail@plt+0x5d5c>
   17120:	add	r1, r1, #1
   17124:	cmp	r8, ip
   17128:	strbcc	r0, [r5, r8]
   1712c:	add	r8, r8, #1
   17130:	ldrb	r0, [r1], #1
   17134:	cmp	r0, #0
   17138:	bne	17124 <__assert_fail@plt+0x5d44>
   1713c:	cmp	r8, ip
   17140:	movcc	r0, #0
   17144:	strbcc	r0, [r5, r8]
   17148:	mov	r0, r8
   1714c:	sub	sp, fp, #28
   17150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17154:	mov	r0, #4
   17158:	b	17078 <__assert_fail@plt+0x5c98>
   1715c:	mov	r4, r1
   17160:	b	17068 <__assert_fail@plt+0x5c88>
   17164:	bl	113b0 <abort@plt>
   17168:	mov	r3, r2
   1716c:	mov	r2, #0
   17170:	b	17174 <__assert_fail@plt+0x5d94>
   17174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17178:	add	fp, sp, #28
   1717c:	sub	sp, sp, #36	; 0x24
   17180:	movw	r8, #41400	; 0xa1b8
   17184:	cmp	r3, #0
   17188:	mov	r4, r2
   1718c:	str	r2, [sp, #24]
   17190:	mov	r5, r1
   17194:	mov	r6, r0
   17198:	str	r0, [sp, #20]
   1719c:	movt	r8, #2
   171a0:	movne	r8, r3
   171a4:	bl	11290 <__errno_location@plt>
   171a8:	str	r0, [sp, #28]
   171ac:	ldr	r1, [r8, #40]	; 0x28
   171b0:	ldr	r2, [r8, #44]	; 0x2c
   171b4:	ldr	r7, [r0]
   171b8:	cmp	r4, #0
   171bc:	add	sl, r8, #8
   171c0:	mov	r0, #0
   171c4:	ldm	r8, {r3, r9}
   171c8:	orreq	r9, r9, #1
   171cc:	stm	sp, {r3, r9, sl}
   171d0:	str	r1, [sp, #12]
   171d4:	str	r2, [sp, #16]
   171d8:	mov	r1, #0
   171dc:	mov	r2, r6
   171e0:	mov	r3, r5
   171e4:	str	r7, [sp, #32]
   171e8:	mov	r7, r5
   171ec:	bl	160f8 <__assert_fail@plt+0x4d18>
   171f0:	add	r4, r0, #1
   171f4:	mov	r5, r0
   171f8:	mov	r0, r4
   171fc:	bl	17f80 <__assert_fail@plt+0x6ba0>
   17200:	mov	r6, r0
   17204:	ldr	r0, [r8]
   17208:	ldr	r2, [r8, #44]	; 0x2c
   1720c:	ldr	r1, [r8, #40]	; 0x28
   17210:	mov	r3, r7
   17214:	stm	sp, {r0, r9, sl}
   17218:	str	r2, [sp, #16]
   1721c:	ldr	r2, [sp, #20]
   17220:	str	r1, [sp, #12]
   17224:	mov	r0, r6
   17228:	mov	r1, r4
   1722c:	bl	160f8 <__assert_fail@plt+0x4d18>
   17230:	ldr	r0, [sp, #24]
   17234:	ldr	r1, [sp, #32]
   17238:	ldr	r2, [sp, #28]
   1723c:	cmp	r0, #0
   17240:	str	r1, [r2]
   17244:	strne	r5, [r0]
   17248:	mov	r0, r6
   1724c:	sub	sp, fp, #28
   17250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17254:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17258:	add	fp, sp, #24
   1725c:	movw	r5, #41260	; 0xa12c
   17260:	movw	r8, #41256	; 0xa128
   17264:	movt	r5, #2
   17268:	movt	r8, #2
   1726c:	ldr	r0, [r5]
   17270:	ldr	r4, [r8]
   17274:	cmp	r0, #2
   17278:	blt	172a4 <__assert_fail@plt+0x5ec4>
   1727c:	add	r7, r4, #12
   17280:	mov	r6, #0
   17284:	ldr	r0, [r7, r6, lsl #3]
   17288:	bl	18988 <__assert_fail@plt+0x75a8>
   1728c:	ldr	r1, [r5]
   17290:	add	r2, r6, #2
   17294:	add	r0, r6, #1
   17298:	mov	r6, r0
   1729c:	cmp	r2, r1
   172a0:	blt	17284 <__assert_fail@plt+0x5ea4>
   172a4:	ldr	r0, [r4, #4]
   172a8:	movw	r9, #41448	; 0xa1e8
   172ac:	movw	r7, #41264	; 0xa130
   172b0:	movt	r9, #2
   172b4:	movt	r7, #2
   172b8:	cmp	r0, r9
   172bc:	beq	172cc <__assert_fail@plt+0x5eec>
   172c0:	bl	18988 <__assert_fail@plt+0x75a8>
   172c4:	mov	r0, #256	; 0x100
   172c8:	stm	r7, {r0, r9}
   172cc:	cmp	r4, r7
   172d0:	beq	172e0 <__assert_fail@plt+0x5f00>
   172d4:	mov	r0, r4
   172d8:	bl	18988 <__assert_fail@plt+0x75a8>
   172dc:	str	r7, [r8]
   172e0:	mov	r0, #1
   172e4:	str	r0, [r5]
   172e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172ec:	movw	r3, #41400	; 0xa1b8
   172f0:	mvn	r2, #0
   172f4:	movt	r3, #2
   172f8:	b	172fc <__assert_fail@plt+0x5f1c>
   172fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17300:	add	fp, sp, #28
   17304:	sub	sp, sp, #44	; 0x2c
   17308:	mov	r7, r3
   1730c:	str	r2, [sp, #36]	; 0x24
   17310:	str	r1, [sp, #32]
   17314:	mov	r5, r0
   17318:	bl	11290 <__errno_location@plt>
   1731c:	cmp	r5, #0
   17320:	bmi	17490 <__assert_fail@plt+0x60b0>
   17324:	cmn	r5, #-2147483647	; 0x80000001
   17328:	beq	17490 <__assert_fail@plt+0x60b0>
   1732c:	movw	r8, #41260	; 0xa12c
   17330:	movw	r4, #41256	; 0xa128
   17334:	str	r0, [sp, #28]
   17338:	ldr	r0, [r0]
   1733c:	movt	r8, #2
   17340:	movt	r4, #2
   17344:	ldr	r1, [r8]
   17348:	ldr	r6, [r4]
   1734c:	str	r0, [sp, #24]
   17350:	cmp	r1, r5
   17354:	ble	17360 <__assert_fail@plt+0x5f80>
   17358:	mov	sl, r6
   1735c:	b	173cc <__assert_fail@plt+0x5fec>
   17360:	movw	r9, #41264	; 0xa130
   17364:	mov	r0, #8
   17368:	str	r1, [fp, #-32]	; 0xffffffe0
   1736c:	sub	r1, r5, r1
   17370:	mvn	r3, #-2147483648	; 0x80000000
   17374:	movt	r9, #2
   17378:	str	r0, [sp]
   1737c:	add	r2, r1, #1
   17380:	sub	r1, fp, #32
   17384:	subs	r0, r6, r9
   17388:	movne	r0, r6
   1738c:	bl	180b0 <__assert_fail@plt+0x6cd0>
   17390:	mov	sl, r0
   17394:	cmp	r6, r9
   17398:	str	r0, [r4]
   1739c:	bne	173a8 <__assert_fail@plt+0x5fc8>
   173a0:	ldrd	r0, [r9]
   173a4:	stm	sl, {r0, r1}
   173a8:	ldr	r1, [r8]
   173ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   173b0:	add	r0, sl, r1, lsl #3
   173b4:	sub	r1, r2, r1
   173b8:	lsl	r2, r1, #3
   173bc:	mov	r1, #0
   173c0:	bl	112b4 <memset@plt>
   173c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173c8:	str	r0, [r8]
   173cc:	mov	r9, sl
   173d0:	ldm	r7, {r0, r1}
   173d4:	orr	r8, r1, #1
   173d8:	add	r1, r7, #8
   173dc:	ldr	r2, [r7, #40]	; 0x28
   173e0:	ldr	r3, [r7, #44]	; 0x2c
   173e4:	ldr	r6, [r9, r5, lsl #3]!
   173e8:	str	r1, [sp, #20]
   173ec:	ldr	r4, [r9, #4]!
   173f0:	stm	sp, {r0, r8}
   173f4:	add	r0, sp, #8
   173f8:	stm	r0, {r1, r2, r3}
   173fc:	ldr	r2, [sp, #32]
   17400:	ldr	r3, [sp, #36]	; 0x24
   17404:	mov	r1, r6
   17408:	mov	r0, r4
   1740c:	bl	160f8 <__assert_fail@plt+0x4d18>
   17410:	cmp	r6, r0
   17414:	bhi	17478 <__assert_fail@plt+0x6098>
   17418:	add	r6, r0, #1
   1741c:	movw	r0, #41448	; 0xa1e8
   17420:	movt	r0, #2
   17424:	str	r6, [sl, r5, lsl #3]
   17428:	cmp	r4, r0
   1742c:	beq	17438 <__assert_fail@plt+0x6058>
   17430:	mov	r0, r4
   17434:	bl	18988 <__assert_fail@plt+0x75a8>
   17438:	mov	r0, r6
   1743c:	bl	17f80 <__assert_fail@plt+0x6ba0>
   17440:	str	r0, [r9]
   17444:	mov	r4, r0
   17448:	add	r3, sp, #8
   1744c:	ldr	r0, [r7]
   17450:	ldr	r1, [r7, #40]	; 0x28
   17454:	ldr	r2, [r7, #44]	; 0x2c
   17458:	stm	sp, {r0, r8}
   1745c:	ldr	r0, [sp, #20]
   17460:	stm	r3, {r0, r1, r2}
   17464:	ldr	r2, [sp, #32]
   17468:	ldr	r3, [sp, #36]	; 0x24
   1746c:	mov	r0, r4
   17470:	mov	r1, r6
   17474:	bl	160f8 <__assert_fail@plt+0x4d18>
   17478:	ldr	r0, [sp, #28]
   1747c:	ldr	r1, [sp, #24]
   17480:	str	r1, [r0]
   17484:	mov	r0, r4
   17488:	sub	sp, fp, #28
   1748c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17490:	bl	113b0 <abort@plt>
   17494:	movw	r3, #41400	; 0xa1b8
   17498:	movt	r3, #2
   1749c:	b	172fc <__assert_fail@plt+0x5f1c>
   174a0:	movw	r3, #41400	; 0xa1b8
   174a4:	mov	r1, r0
   174a8:	mov	r0, #0
   174ac:	mvn	r2, #0
   174b0:	movt	r3, #2
   174b4:	b	172fc <__assert_fail@plt+0x5f1c>
   174b8:	movw	r3, #41400	; 0xa1b8
   174bc:	mov	r2, r1
   174c0:	mov	r1, r0
   174c4:	mov	r0, #0
   174c8:	movt	r3, #2
   174cc:	b	172fc <__assert_fail@plt+0x5f1c>
   174d0:	push	{fp, lr}
   174d4:	mov	fp, sp
   174d8:	sub	sp, sp, #48	; 0x30
   174dc:	vmov.i32	q8, #0	; 0x00000000
   174e0:	mov	ip, #32
   174e4:	mov	r3, sp
   174e8:	mov	lr, r2
   174ec:	cmp	r1, #10
   174f0:	add	r2, r3, #16
   174f4:	vst1.64	{d16-d17}, [r3], ip
   174f8:	vst1.64	{d16-d17}, [r2]
   174fc:	vst1.64	{d16-d17}, [r3]
   17500:	beq	17520 <__assert_fail@plt+0x6140>
   17504:	str	r1, [sp]
   17508:	mov	r3, sp
   1750c:	mov	r1, lr
   17510:	mvn	r2, #0
   17514:	bl	172fc <__assert_fail@plt+0x5f1c>
   17518:	mov	sp, fp
   1751c:	pop	{fp, pc}
   17520:	bl	113b0 <abort@plt>
   17524:	push	{r4, sl, fp, lr}
   17528:	add	fp, sp, #8
   1752c:	sub	sp, sp, #48	; 0x30
   17530:	vmov.i32	q8, #0	; 0x00000000
   17534:	mov	ip, r3
   17538:	mov	r3, sp
   1753c:	mov	lr, #32
   17540:	cmp	r1, #10
   17544:	add	r4, r3, #16
   17548:	vst1.64	{d16-d17}, [r3], lr
   1754c:	vst1.64	{d16-d17}, [r4]
   17550:	vst1.64	{d16-d17}, [r3]
   17554:	beq	17574 <__assert_fail@plt+0x6194>
   17558:	str	r1, [sp]
   1755c:	mov	r1, r2
   17560:	mov	r3, sp
   17564:	mov	r2, ip
   17568:	bl	172fc <__assert_fail@plt+0x5f1c>
   1756c:	sub	sp, fp, #8
   17570:	pop	{r4, sl, fp, pc}
   17574:	bl	113b0 <abort@plt>
   17578:	mov	r2, r1
   1757c:	mov	r1, r0
   17580:	mov	r0, #0
   17584:	b	174d0 <__assert_fail@plt+0x60f0>
   17588:	mov	r3, r2
   1758c:	mov	r2, r1
   17590:	mov	r1, r0
   17594:	mov	r0, #0
   17598:	b	17524 <__assert_fail@plt+0x6144>
   1759c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   175a0:	add	fp, sp, #24
   175a4:	sub	sp, sp, #48	; 0x30
   175a8:	movw	r8, #41400	; 0xa1b8
   175ac:	mov	lr, r0
   175b0:	mov	r3, sp
   175b4:	mov	ip, r1
   175b8:	movt	r8, #2
   175bc:	mov	r1, r3
   175c0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   175c4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   175c8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   175cc:	stm	r1, {r0, r4, r5, r6, r7, r9}
   175d0:	ubfx	r0, r2, #5, #3
   175d4:	and	r2, r2, #31
   175d8:	mov	r4, #1
   175dc:	add	r0, r3, r0, lsl #2
   175e0:	ldr	r1, [r0, #8]
   175e4:	bic	r4, r4, r1, lsr r2
   175e8:	eor	r1, r1, r4, lsl r2
   175ec:	mov	r2, ip
   175f0:	str	r1, [r0, #8]
   175f4:	mov	r0, #0
   175f8:	mov	r1, lr
   175fc:	bl	172fc <__assert_fail@plt+0x5f1c>
   17600:	sub	sp, fp, #24
   17604:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17608:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1760c:	add	fp, sp, #24
   17610:	sub	sp, sp, #48	; 0x30
   17614:	movw	lr, #41400	; 0xa1b8
   17618:	mov	ip, r0
   1761c:	mov	r3, sp
   17620:	movt	lr, #2
   17624:	mov	r2, r3
   17628:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   1762c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   17630:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   17634:	stm	r2, {r0, r4, r5, r6, r7, r8}
   17638:	ubfx	r0, r1, #5, #3
   1763c:	and	r1, r1, #31
   17640:	mov	r7, #1
   17644:	add	r0, r3, r0, lsl #2
   17648:	ldr	r2, [r0, #8]
   1764c:	bic	r7, r7, r2, lsr r1
   17650:	eor	r1, r2, r7, lsl r1
   17654:	mvn	r2, #0
   17658:	str	r1, [r0, #8]
   1765c:	mov	r0, #0
   17660:	mov	r1, ip
   17664:	bl	172fc <__assert_fail@plt+0x5f1c>
   17668:	sub	sp, fp, #24
   1766c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17670:	push	{r4, r5, r6, r7, fp, lr}
   17674:	add	fp, sp, #16
   17678:	sub	sp, sp, #48	; 0x30
   1767c:	movw	lr, #41400	; 0xa1b8
   17680:	mov	ip, r0
   17684:	mov	r3, sp
   17688:	movt	lr, #2
   1768c:	mov	r2, r3
   17690:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   17694:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17698:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1769c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   176a0:	mov	r1, ip
   176a4:	mvn	r2, #0
   176a8:	ldr	r0, [sp, #12]
   176ac:	orr	r0, r0, #67108864	; 0x4000000
   176b0:	str	r0, [sp, #12]
   176b4:	mov	r0, #0
   176b8:	bl	172fc <__assert_fail@plt+0x5f1c>
   176bc:	sub	sp, fp, #16
   176c0:	pop	{r4, r5, r6, r7, fp, pc}
   176c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   176c8:	add	fp, sp, #24
   176cc:	sub	sp, sp, #48	; 0x30
   176d0:	movw	r8, #41400	; 0xa1b8
   176d4:	mov	ip, r1
   176d8:	mov	lr, r0
   176dc:	mov	r3, sp
   176e0:	movt	r8, #2
   176e4:	mov	r2, r3
   176e8:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   176ec:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   176f0:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   176f4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   176f8:	mov	r1, lr
   176fc:	mov	r2, ip
   17700:	ldr	r0, [sp, #12]
   17704:	orr	r0, r0, #67108864	; 0x4000000
   17708:	str	r0, [sp, #12]
   1770c:	mov	r0, #0
   17710:	bl	172fc <__assert_fail@plt+0x5f1c>
   17714:	sub	sp, fp, #24
   17718:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1771c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17720:	add	fp, sp, #24
   17724:	sub	sp, sp, #96	; 0x60
   17728:	vmov.i32	q8, #0	; 0x00000000
   1772c:	mov	lr, sp
   17730:	mov	ip, r2
   17734:	cmp	r1, #10
   17738:	add	r3, lr, #16
   1773c:	mov	r2, lr
   17740:	vst1.64	{d16-d17}, [r3]
   17744:	mov	r3, #28
   17748:	vst1.64	{d16-d17}, [r2], r3
   1774c:	vst1.32	{d16-d17}, [r2]
   17750:	beq	17790 <__assert_fail@plt+0x63b0>
   17754:	str	r1, [sp, #48]	; 0x30
   17758:	add	r3, sp, #48	; 0x30
   1775c:	ldm	lr!, {r2, r4, r5, r6, r7}
   17760:	add	r1, r3, #4
   17764:	stmia	r1!, {r2, r4, r5, r6, r7}
   17768:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1776c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   17770:	mvn	r2, #0
   17774:	ldr	r1, [sp, #60]	; 0x3c
   17778:	orr	r1, r1, #67108864	; 0x4000000
   1777c:	str	r1, [sp, #60]	; 0x3c
   17780:	mov	r1, ip
   17784:	bl	172fc <__assert_fail@plt+0x5f1c>
   17788:	sub	sp, fp, #24
   1778c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17790:	bl	113b0 <abort@plt>
   17794:	push	{fp, lr}
   17798:	mov	fp, sp
   1779c:	sub	sp, sp, #8
   177a0:	mvn	ip, #0
   177a4:	str	ip, [sp]
   177a8:	bl	177b4 <__assert_fail@plt+0x63d4>
   177ac:	mov	sp, fp
   177b0:	pop	{fp, pc}
   177b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   177b8:	add	fp, sp, #24
   177bc:	sub	sp, sp, #48	; 0x30
   177c0:	movw	ip, #41400	; 0xa1b8
   177c4:	mov	lr, r3
   177c8:	mov	r3, sp
   177cc:	cmp	r1, #0
   177d0:	movt	ip, #2
   177d4:	cmpne	r2, #0
   177d8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   177dc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   177e0:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   177e4:	stm	r3, {r4, r5, r6, r7, r8, r9}
   177e8:	mov	r3, #10
   177ec:	str	r3, [sp]
   177f0:	bne	177f8 <__assert_fail@plt+0x6418>
   177f4:	bl	113b0 <abort@plt>
   177f8:	ldr	ip, [fp, #8]
   177fc:	str	r2, [sp, #44]	; 0x2c
   17800:	str	r1, [sp, #40]	; 0x28
   17804:	mov	r3, sp
   17808:	mov	r1, lr
   1780c:	mov	r2, ip
   17810:	bl	172fc <__assert_fail@plt+0x5f1c>
   17814:	sub	sp, fp, #24
   17818:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1781c:	push	{fp, lr}
   17820:	mov	fp, sp
   17824:	sub	sp, sp, #8
   17828:	mov	r3, r2
   1782c:	mov	r2, r1
   17830:	mov	r1, r0
   17834:	mvn	r0, #0
   17838:	str	r0, [sp]
   1783c:	mov	r0, #0
   17840:	bl	177b4 <__assert_fail@plt+0x63d4>
   17844:	mov	sp, fp
   17848:	pop	{fp, pc}
   1784c:	push	{fp, lr}
   17850:	mov	fp, sp
   17854:	sub	sp, sp, #8
   17858:	mov	ip, r2
   1785c:	mov	r2, r1
   17860:	mov	r1, r0
   17864:	str	r3, [sp]
   17868:	mov	r0, #0
   1786c:	mov	r3, ip
   17870:	bl	177b4 <__assert_fail@plt+0x63d4>
   17874:	mov	sp, fp
   17878:	pop	{fp, pc}
   1787c:	movw	r3, #41272	; 0xa138
   17880:	movt	r3, #2
   17884:	b	172fc <__assert_fail@plt+0x5f1c>
   17888:	movw	r3, #41272	; 0xa138
   1788c:	mov	r2, r1
   17890:	mov	r1, r0
   17894:	mov	r0, #0
   17898:	movt	r3, #2
   1789c:	b	172fc <__assert_fail@plt+0x5f1c>
   178a0:	movw	r3, #41272	; 0xa138
   178a4:	mvn	r2, #0
   178a8:	movt	r3, #2
   178ac:	b	172fc <__assert_fail@plt+0x5f1c>
   178b0:	movw	r3, #41272	; 0xa138
   178b4:	mov	r1, r0
   178b8:	mov	r0, #0
   178bc:	mvn	r2, #0
   178c0:	movt	r3, #2
   178c4:	b	172fc <__assert_fail@plt+0x5f1c>
   178c8:	push	{r4, r5, fp, lr}
   178cc:	add	fp, sp, #8
   178d0:	mov	r5, r0
   178d4:	mov	r4, r1
   178d8:	mov	r0, #0
   178dc:	mov	r2, #5
   178e0:	mov	r1, r5
   178e4:	bl	11170 <dcgettext@plt>
   178e8:	cmp	r0, r5
   178ec:	popne	{r4, r5, fp, pc}
   178f0:	bl	18a54 <__assert_fail@plt+0x7674>
   178f4:	ldrb	r1, [r0]
   178f8:	and	r1, r1, #223	; 0xdf
   178fc:	cmp	r1, #71	; 0x47
   17900:	beq	17968 <__assert_fail@plt+0x6588>
   17904:	cmp	r1, #85	; 0x55
   17908:	bne	179c0 <__assert_fail@plt+0x65e0>
   1790c:	ldrb	r1, [r0, #1]
   17910:	and	r1, r1, #223	; 0xdf
   17914:	cmp	r1, #84	; 0x54
   17918:	bne	179c0 <__assert_fail@plt+0x65e0>
   1791c:	ldrb	r1, [r0, #2]
   17920:	and	r1, r1, #223	; 0xdf
   17924:	cmp	r1, #70	; 0x46
   17928:	bne	179c0 <__assert_fail@plt+0x65e0>
   1792c:	ldrb	r1, [r0, #3]
   17930:	cmp	r1, #45	; 0x2d
   17934:	bne	179c0 <__assert_fail@plt+0x65e0>
   17938:	ldrb	r1, [r0, #4]
   1793c:	cmp	r1, #56	; 0x38
   17940:	bne	179c0 <__assert_fail@plt+0x65e0>
   17944:	ldrb	r0, [r0, #5]
   17948:	cmp	r0, #0
   1794c:	bne	179c0 <__assert_fail@plt+0x65e0>
   17950:	ldrb	r1, [r5]
   17954:	movw	r2, #39458	; 0x9a22
   17958:	movw	r0, #39462	; 0x9a26
   1795c:	movt	r2, #1
   17960:	movt	r0, #1
   17964:	b	179f0 <__assert_fail@plt+0x6610>
   17968:	ldrb	r1, [r0, #1]
   1796c:	and	r1, r1, #223	; 0xdf
   17970:	cmp	r1, #66	; 0x42
   17974:	bne	179c0 <__assert_fail@plt+0x65e0>
   17978:	ldrb	r1, [r0, #2]
   1797c:	cmp	r1, #49	; 0x31
   17980:	bne	179c0 <__assert_fail@plt+0x65e0>
   17984:	ldrb	r1, [r0, #3]
   17988:	cmp	r1, #56	; 0x38
   1798c:	bne	179c0 <__assert_fail@plt+0x65e0>
   17990:	ldrb	r1, [r0, #4]
   17994:	cmp	r1, #48	; 0x30
   17998:	bne	179c0 <__assert_fail@plt+0x65e0>
   1799c:	ldrb	r1, [r0, #5]
   179a0:	cmp	r1, #51	; 0x33
   179a4:	bne	179c0 <__assert_fail@plt+0x65e0>
   179a8:	ldrb	r1, [r0, #6]
   179ac:	cmp	r1, #48	; 0x30
   179b0:	bne	179c0 <__assert_fail@plt+0x65e0>
   179b4:	ldrb	r0, [r0, #7]
   179b8:	cmp	r0, #0
   179bc:	beq	179dc <__assert_fail@plt+0x65fc>
   179c0:	movw	r1, #39452	; 0x9a1c
   179c4:	movw	r0, #39456	; 0x9a20
   179c8:	cmp	r4, #9
   179cc:	movt	r1, #1
   179d0:	movt	r0, #1
   179d4:	moveq	r0, r1
   179d8:	pop	{r4, r5, fp, pc}
   179dc:	ldrb	r1, [r5]
   179e0:	movw	r2, #39466	; 0x9a2a
   179e4:	movw	r0, #39470	; 0x9a2e
   179e8:	movt	r2, #1
   179ec:	movt	r0, #1
   179f0:	cmp	r1, #96	; 0x60
   179f4:	moveq	r0, r2
   179f8:	pop	{r4, r5, fp, pc}
   179fc:	push	{r4, sl, fp, lr}
   17a00:	add	fp, sp, #8
   17a04:	sub	sp, sp, #104	; 0x68
   17a08:	mov	r4, r0
   17a0c:	movw	r0, #40295	; 0x9d67
   17a10:	mov	r1, sp
   17a14:	movt	r0, #1
   17a18:	bl	18e48 <__assert_fail@plt+0x7a68>
   17a1c:	mov	r1, r0
   17a20:	mov	r0, #0
   17a24:	cmp	r1, #0
   17a28:	bne	17a40 <__assert_fail@plt+0x6660>
   17a2c:	ldr	r0, [sp, #96]	; 0x60
   17a30:	ldr	r1, [sp, #100]	; 0x64
   17a34:	ldm	sp, {r2, r3}
   17a38:	stm	r4, {r0, r1, r2, r3}
   17a3c:	mov	r0, r4
   17a40:	sub	sp, fp, #8
   17a44:	pop	{r4, sl, fp, pc}
   17a48:	push	{r4, r5, r6, r7, fp, lr}
   17a4c:	add	fp, sp, #16
   17a50:	mov	r4, r0
   17a54:	cmp	r0, #2
   17a58:	bhi	17a88 <__assert_fail@plt+0x66a8>
   17a5c:	mov	r0, r4
   17a60:	bl	18b2c <__assert_fail@plt+0x774c>
   17a64:	mov	r5, r0
   17a68:	bl	11290 <__errno_location@plt>
   17a6c:	ldr	r7, [r0]
   17a70:	mov	r6, r0
   17a74:	mov	r0, r4
   17a78:	bl	113bc <close@plt>
   17a7c:	mov	r0, r5
   17a80:	str	r7, [r6]
   17a84:	pop	{r4, r5, r6, r7, fp, pc}
   17a88:	mov	r0, r4
   17a8c:	pop	{r4, r5, r6, r7, fp, pc}
   17a90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17a94:	add	fp, sp, #24
   17a98:	sub	sp, sp, #32
   17a9c:	ldr	r6, [fp, #12]
   17aa0:	ldr	r7, [fp, #8]
   17aa4:	mov	r4, r2
   17aa8:	mov	r8, r0
   17aac:	cmp	r1, #0
   17ab0:	beq	17ad8 <__assert_fail@plt+0x66f8>
   17ab4:	movw	r2, #39560	; 0x9a88
   17ab8:	mov	r5, r1
   17abc:	str	r3, [sp, #4]
   17ac0:	str	r4, [sp]
   17ac4:	mov	r0, r8
   17ac8:	mov	r1, #1
   17acc:	movt	r2, #1
   17ad0:	mov	r3, r5
   17ad4:	b	17af0 <__assert_fail@plt+0x6710>
   17ad8:	movw	r2, #39572	; 0x9a94
   17adc:	str	r3, [sp]
   17ae0:	mov	r0, r8
   17ae4:	mov	r1, #1
   17ae8:	mov	r3, r4
   17aec:	movt	r2, #1
   17af0:	bl	112d8 <__fprintf_chk@plt>
   17af4:	movw	r1, #39579	; 0x9a9b
   17af8:	mov	r0, #0
   17afc:	mov	r2, #5
   17b00:	movt	r1, #1
   17b04:	bl	11170 <dcgettext@plt>
   17b08:	movw	r2, #40297	; 0x9d69
   17b0c:	mov	r3, r0
   17b10:	movw	r0, #2022	; 0x7e6
   17b14:	mov	r1, #1
   17b18:	movt	r2, #1
   17b1c:	str	r0, [sp]
   17b20:	mov	r0, r8
   17b24:	bl	112d8 <__fprintf_chk@plt>
   17b28:	movw	r4, #36769	; 0x8fa1
   17b2c:	mov	r1, r8
   17b30:	movt	r4, #1
   17b34:	mov	r0, r4
   17b38:	bl	11104 <fputs_unlocked@plt>
   17b3c:	movw	r1, #39583	; 0x9a9f
   17b40:	mov	r0, #0
   17b44:	mov	r2, #5
   17b48:	movt	r1, #1
   17b4c:	bl	11170 <dcgettext@plt>
   17b50:	movw	r3, #39754	; 0x9b4a
   17b54:	mov	r2, r0
   17b58:	mov	r0, r8
   17b5c:	mov	r1, #1
   17b60:	movt	r3, #1
   17b64:	bl	112d8 <__fprintf_chk@plt>
   17b68:	mov	r0, r4
   17b6c:	mov	r1, r8
   17b70:	bl	11104 <fputs_unlocked@plt>
   17b74:	cmp	r6, #9
   17b78:	bhi	17bdc <__assert_fail@plt+0x67fc>
   17b7c:	add	r0, pc, #0
   17b80:	ldr	pc, [r0, r6, lsl #2]
   17b84:			; <UNDEFINED> instruction: 0x00017db4
   17b88:	andeq	r7, r1, ip, lsr #23
   17b8c:	andeq	r7, r1, r8, ror #23
   17b90:	andeq	r7, r1, r0, lsl ip
   17b94:	andeq	r7, r1, r8, lsr ip
   17b98:	andeq	r7, r1, r0, ror #24
   17b9c:	andeq	r7, r1, r8, lsl #25
   17ba0:	andeq	r7, r1, r0, asr #25
   17ba4:	andeq	r7, r1, r0, ror #26
   17ba8:	andeq	r7, r1, r8, lsl #26
   17bac:	movw	r1, #39788	; 0x9b6c
   17bb0:	mov	r0, #0
   17bb4:	mov	r2, #5
   17bb8:	movt	r1, #1
   17bbc:	bl	11170 <dcgettext@plt>
   17bc0:	ldr	r3, [r7]
   17bc4:	mov	r2, r0
   17bc8:	mov	r0, r8
   17bcc:	mov	r1, #1
   17bd0:	sub	sp, fp, #24
   17bd4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17bd8:	b	112d8 <__fprintf_chk@plt>
   17bdc:	movw	r1, #40107	; 0x9cab
   17be0:	movt	r1, #1
   17be4:	b	17d10 <__assert_fail@plt+0x6930>
   17be8:	movw	r1, #39804	; 0x9b7c
   17bec:	mov	r0, #0
   17bf0:	mov	r2, #5
   17bf4:	movt	r1, #1
   17bf8:	bl	11170 <dcgettext@plt>
   17bfc:	mov	r2, r0
   17c00:	ldr	r3, [r7]
   17c04:	ldr	r0, [r7, #4]
   17c08:	str	r0, [sp]
   17c0c:	b	17cfc <__assert_fail@plt+0x691c>
   17c10:	movw	r1, #39827	; 0x9b93
   17c14:	mov	r0, #0
   17c18:	mov	r2, #5
   17c1c:	movt	r1, #1
   17c20:	bl	11170 <dcgettext@plt>
   17c24:	mov	r2, r0
   17c28:	ldr	r3, [r7]
   17c2c:	ldmib	r7, {r0, r1}
   17c30:	stm	sp, {r0, r1}
   17c34:	b	17cfc <__assert_fail@plt+0x691c>
   17c38:	movw	r1, #39855	; 0x9baf
   17c3c:	mov	r0, #0
   17c40:	mov	r2, #5
   17c44:	movt	r1, #1
   17c48:	bl	11170 <dcgettext@plt>
   17c4c:	ldr	r3, [r7]
   17c50:	mov	r2, r0
   17c54:	ldmib	r7, {r0, r1, r7}
   17c58:	stm	sp, {r0, r1, r7}
   17c5c:	b	17cfc <__assert_fail@plt+0x691c>
   17c60:	movw	r1, #39887	; 0x9bcf
   17c64:	mov	r0, #0
   17c68:	mov	r2, #5
   17c6c:	movt	r1, #1
   17c70:	bl	11170 <dcgettext@plt>
   17c74:	ldr	r3, [r7]
   17c78:	mov	r2, r0
   17c7c:	ldmib	r7, {r0, r1, r6, r7}
   17c80:	stm	sp, {r0, r1, r6, r7}
   17c84:	b	17cfc <__assert_fail@plt+0x691c>
   17c88:	movw	r1, #39923	; 0x9bf3
   17c8c:	mov	r0, #0
   17c90:	mov	r2, #5
   17c94:	movt	r1, #1
   17c98:	bl	11170 <dcgettext@plt>
   17c9c:	mov	r2, r0
   17ca0:	ldr	r3, [r7]
   17ca4:	ldmib	r7, {r0, r1, r6}
   17ca8:	ldr	r5, [r7, #16]
   17cac:	ldr	r7, [r7, #20]
   17cb0:	stm	sp, {r0, r1, r6}
   17cb4:	str	r5, [sp, #12]
   17cb8:	str	r7, [sp, #16]
   17cbc:	b	17cfc <__assert_fail@plt+0x691c>
   17cc0:	movw	r1, #39963	; 0x9c1b
   17cc4:	mov	r0, #0
   17cc8:	mov	r2, #5
   17ccc:	movt	r1, #1
   17cd0:	bl	11170 <dcgettext@plt>
   17cd4:	mov	r2, r0
   17cd8:	ldr	r3, [r7]
   17cdc:	ldmib	r7, {r0, r1, r6}
   17ce0:	ldr	r5, [r7, #16]
   17ce4:	ldr	r4, [r7, #20]
   17ce8:	ldr	r7, [r7, #24]
   17cec:	stm	sp, {r0, r1, r6}
   17cf0:	str	r5, [sp, #12]
   17cf4:	str	r4, [sp, #16]
   17cf8:	str	r7, [sp, #20]
   17cfc:	mov	r0, r8
   17d00:	mov	r1, #1
   17d04:	b	17db0 <__assert_fail@plt+0x69d0>
   17d08:	movw	r1, #40055	; 0x9c77
   17d0c:	movt	r1, #1
   17d10:	mov	r0, #0
   17d14:	mov	r2, #5
   17d18:	bl	11170 <dcgettext@plt>
   17d1c:	mov	ip, r0
   17d20:	ldr	r3, [r7]
   17d24:	ldr	r0, [r7, #4]
   17d28:	ldr	r1, [r7, #8]
   17d2c:	ldr	r6, [r7, #12]
   17d30:	ldr	r5, [r7, #16]
   17d34:	ldr	r4, [r7, #20]
   17d38:	ldr	r2, [r7, #24]
   17d3c:	ldr	lr, [r7, #28]
   17d40:	ldr	r7, [r7, #32]
   17d44:	stm	sp, {r0, r1, r6}
   17d48:	str	r5, [sp, #12]
   17d4c:	str	r4, [sp, #16]
   17d50:	str	r2, [sp, #20]
   17d54:	str	lr, [sp, #24]
   17d58:	str	r7, [sp, #28]
   17d5c:	b	17da4 <__assert_fail@plt+0x69c4>
   17d60:	movw	r1, #40007	; 0x9c47
   17d64:	mov	r0, #0
   17d68:	mov	r2, #5
   17d6c:	movt	r1, #1
   17d70:	bl	11170 <dcgettext@plt>
   17d74:	mov	ip, r0
   17d78:	ldr	r3, [r7]
   17d7c:	ldmib	r7, {r0, r1, r6}
   17d80:	ldr	r5, [r7, #16]
   17d84:	ldr	r4, [r7, #20]
   17d88:	ldr	r2, [r7, #24]
   17d8c:	ldr	r7, [r7, #28]
   17d90:	stm	sp, {r0, r1, r6}
   17d94:	str	r5, [sp, #12]
   17d98:	str	r4, [sp, #16]
   17d9c:	str	r2, [sp, #20]
   17da0:	str	r7, [sp, #24]
   17da4:	mov	r0, r8
   17da8:	mov	r1, #1
   17dac:	mov	r2, ip
   17db0:	bl	112d8 <__fprintf_chk@plt>
   17db4:	sub	sp, fp, #24
   17db8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17dbc:	push	{r4, sl, fp, lr}
   17dc0:	add	fp, sp, #8
   17dc4:	sub	sp, sp, #8
   17dc8:	ldr	ip, [fp, #8]
   17dcc:	mov	lr, #0
   17dd0:	ldr	r4, [ip, lr, lsl #2]
   17dd4:	add	lr, lr, #1
   17dd8:	cmp	r4, #0
   17ddc:	bne	17dd0 <__assert_fail@plt+0x69f0>
   17de0:	sub	r4, lr, #1
   17de4:	str	ip, [sp]
   17de8:	str	r4, [sp, #4]
   17dec:	bl	17a90 <__assert_fail@plt+0x66b0>
   17df0:	sub	sp, fp, #8
   17df4:	pop	{r4, sl, fp, pc}
   17df8:	push	{r4, r5, fp, lr}
   17dfc:	add	fp, sp, #8
   17e00:	sub	sp, sp, #48	; 0x30
   17e04:	ldr	r4, [fp, #8]
   17e08:	mov	ip, #0
   17e0c:	add	lr, sp, #8
   17e10:	ldr	r5, [r4]
   17e14:	cmp	r5, #0
   17e18:	str	r5, [lr, ip, lsl #2]
   17e1c:	beq	17e34 <__assert_fail@plt+0x6a54>
   17e20:	add	ip, ip, #1
   17e24:	add	r4, r4, #4
   17e28:	cmp	ip, #10
   17e2c:	bne	17e10 <__assert_fail@plt+0x6a30>
   17e30:	mov	ip, #10
   17e34:	str	lr, [sp]
   17e38:	str	ip, [sp, #4]
   17e3c:	bl	17a90 <__assert_fail@plt+0x66b0>
   17e40:	sub	sp, fp, #8
   17e44:	pop	{r4, r5, fp, pc}
   17e48:	push	{fp, lr}
   17e4c:	mov	fp, sp
   17e50:	sub	sp, sp, #8
   17e54:	add	ip, fp, #8
   17e58:	str	ip, [sp, #4]
   17e5c:	str	ip, [sp]
   17e60:	bl	17df8 <__assert_fail@plt+0x6a18>
   17e64:	mov	sp, fp
   17e68:	pop	{fp, pc}
   17e6c:	push	{fp, lr}
   17e70:	mov	fp, sp
   17e74:	movw	r0, #41340	; 0xa17c
   17e78:	movt	r0, #2
   17e7c:	ldr	r1, [r0]
   17e80:	movw	r0, #36769	; 0x8fa1
   17e84:	movt	r0, #1
   17e88:	bl	11104 <fputs_unlocked@plt>
   17e8c:	movw	r1, #40167	; 0x9ce7
   17e90:	mov	r0, #0
   17e94:	mov	r2, #5
   17e98:	movt	r1, #1
   17e9c:	bl	11170 <dcgettext@plt>
   17ea0:	movw	r2, #40187	; 0x9cfb
   17ea4:	mov	r1, r0
   17ea8:	mov	r0, #1
   17eac:	movt	r2, #1
   17eb0:	bl	112c0 <__printf_chk@plt>
   17eb4:	movw	r1, #40209	; 0x9d11
   17eb8:	mov	r0, #0
   17ebc:	mov	r2, #5
   17ec0:	movt	r1, #1
   17ec4:	bl	11170 <dcgettext@plt>
   17ec8:	movw	r2, #37505	; 0x9281
   17ecc:	movw	r3, #37799	; 0x93a7
   17ed0:	mov	r1, r0
   17ed4:	mov	r0, #1
   17ed8:	movt	r2, #1
   17edc:	movt	r3, #1
   17ee0:	bl	112c0 <__printf_chk@plt>
   17ee4:	movw	r1, #40229	; 0x9d25
   17ee8:	mov	r0, #0
   17eec:	mov	r2, #5
   17ef0:	movt	r1, #1
   17ef4:	bl	11170 <dcgettext@plt>
   17ef8:	movw	r2, #40268	; 0x9d4c
   17efc:	mov	r1, r0
   17f00:	mov	r0, #1
   17f04:	movt	r2, #1
   17f08:	pop	{fp, lr}
   17f0c:	b	112c0 <__printf_chk@plt>
   17f10:	b	17f14 <__assert_fail@plt+0x6b34>
   17f14:	push	{r4, r5, r6, sl, fp, lr}
   17f18:	add	fp, sp, #16
   17f1c:	mov	r4, r2
   17f20:	mov	r5, r1
   17f24:	mov	r6, r0
   17f28:	bl	18af0 <__assert_fail@plt+0x7710>
   17f2c:	cmp	r0, #0
   17f30:	popne	{r4, r5, r6, sl, fp, pc}
   17f34:	cmp	r6, #0
   17f38:	beq	17f4c <__assert_fail@plt+0x6b6c>
   17f3c:	cmp	r5, #0
   17f40:	cmpne	r4, #0
   17f44:	bne	17f4c <__assert_fail@plt+0x6b6c>
   17f48:	pop	{r4, r5, r6, sl, fp, pc}
   17f4c:	bl	1837c <__assert_fail@plt+0x6f9c>
   17f50:	push	{fp, lr}
   17f54:	mov	fp, sp
   17f58:	bl	18490 <__assert_fail@plt+0x70b0>
   17f5c:	cmp	r0, #0
   17f60:	popne	{fp, pc}
   17f64:	bl	1837c <__assert_fail@plt+0x6f9c>
   17f68:	push	{fp, lr}
   17f6c:	mov	fp, sp
   17f70:	bl	18490 <__assert_fail@plt+0x70b0>
   17f74:	cmp	r0, #0
   17f78:	popne	{fp, pc}
   17f7c:	bl	1837c <__assert_fail@plt+0x6f9c>
   17f80:	push	{fp, lr}
   17f84:	mov	fp, sp
   17f88:	bl	18490 <__assert_fail@plt+0x70b0>
   17f8c:	cmp	r0, #0
   17f90:	popne	{fp, pc}
   17f94:	bl	1837c <__assert_fail@plt+0x6f9c>
   17f98:	push	{r4, r5, fp, lr}
   17f9c:	add	fp, sp, #8
   17fa0:	mov	r4, r1
   17fa4:	mov	r5, r0
   17fa8:	bl	184c0 <__assert_fail@plt+0x70e0>
   17fac:	cmp	r0, #0
   17fb0:	popne	{r4, r5, fp, pc}
   17fb4:	cmp	r5, #0
   17fb8:	beq	17fc8 <__assert_fail@plt+0x6be8>
   17fbc:	cmp	r4, #0
   17fc0:	bne	17fc8 <__assert_fail@plt+0x6be8>
   17fc4:	pop	{r4, r5, fp, pc}
   17fc8:	bl	1837c <__assert_fail@plt+0x6f9c>
   17fcc:	push	{fp, lr}
   17fd0:	mov	fp, sp
   17fd4:	cmp	r1, #0
   17fd8:	orreq	r1, r1, #1
   17fdc:	bl	184c0 <__assert_fail@plt+0x70e0>
   17fe0:	cmp	r0, #0
   17fe4:	popne	{fp, pc}
   17fe8:	bl	1837c <__assert_fail@plt+0x6f9c>
   17fec:	push	{fp, lr}
   17ff0:	mov	fp, sp
   17ff4:	clz	r3, r2
   17ff8:	lsr	ip, r3, #5
   17ffc:	clz	r3, r1
   18000:	lsr	r3, r3, #5
   18004:	orrs	r3, r3, ip
   18008:	movwne	r1, #1
   1800c:	movwne	r2, #1
   18010:	bl	18af0 <__assert_fail@plt+0x7710>
   18014:	cmp	r0, #0
   18018:	popne	{fp, pc}
   1801c:	bl	1837c <__assert_fail@plt+0x6f9c>
   18020:	push	{fp, lr}
   18024:	mov	fp, sp
   18028:	mov	r2, r1
   1802c:	mov	r1, r0
   18030:	mov	r0, #0
   18034:	bl	18af0 <__assert_fail@plt+0x7710>
   18038:	cmp	r0, #0
   1803c:	popne	{fp, pc}
   18040:	bl	1837c <__assert_fail@plt+0x6f9c>
   18044:	mov	r2, r1
   18048:	mov	r1, r0
   1804c:	mov	r0, #0
   18050:	b	17fec <__assert_fail@plt+0x6c0c>
   18054:	mov	r2, #1
   18058:	b	1805c <__assert_fail@plt+0x6c7c>
   1805c:	push	{r4, r5, fp, lr}
   18060:	add	fp, sp, #8
   18064:	ldr	r5, [r1]
   18068:	mov	r4, r1
   1806c:	cmp	r0, #0
   18070:	beq	18088 <__assert_fail@plt+0x6ca8>
   18074:	mov	r1, #1
   18078:	add	r1, r1, r5, lsr #1
   1807c:	adds	r5, r5, r1
   18080:	bcc	180a0 <__assert_fail@plt+0x6cc0>
   18084:	bl	1837c <__assert_fail@plt+0x6f9c>
   18088:	cmp	r5, #0
   1808c:	bne	180a0 <__assert_fail@plt+0x6cc0>
   18090:	mov	r1, #64	; 0x40
   18094:	cmp	r2, #64	; 0x40
   18098:	udiv	r5, r1, r2
   1809c:	addhi	r5, r5, #1
   180a0:	mov	r1, r5
   180a4:	bl	17f14 <__assert_fail@plt+0x6b34>
   180a8:	str	r5, [r4]
   180ac:	pop	{r4, r5, fp, pc}
   180b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   180b4:	add	fp, sp, #24
   180b8:	ldr	r6, [r1]
   180bc:	mov	r8, r1
   180c0:	ldr	r4, [fp, #8]
   180c4:	add	r1, r6, r6, asr #1
   180c8:	cmp	r1, r6
   180cc:	mvnvs	r1, #-2147483648	; 0x80000000
   180d0:	cmp	r1, r3
   180d4:	mov	r5, r1
   180d8:	movgt	r5, r3
   180dc:	cmn	r3, #1
   180e0:	movle	r5, r1
   180e4:	cmn	r4, #1
   180e8:	ble	18108 <__assert_fail@plt+0x6d28>
   180ec:	cmp	r4, #0
   180f0:	beq	1815c <__assert_fail@plt+0x6d7c>
   180f4:	cmn	r5, #1
   180f8:	ble	18130 <__assert_fail@plt+0x6d50>
   180fc:	mvn	r7, #-2147483648	; 0x80000000
   18100:	udiv	r1, r7, r4
   18104:	b	18124 <__assert_fail@plt+0x6d44>
   18108:	cmn	r5, #1
   1810c:	ble	1814c <__assert_fail@plt+0x6d6c>
   18110:	cmn	r4, #1
   18114:	beq	1815c <__assert_fail@plt+0x6d7c>
   18118:	mov	r1, #-2147483648	; 0x80000000
   1811c:	mvn	r7, #-2147483648	; 0x80000000
   18120:	sdiv	r1, r1, r4
   18124:	cmp	r1, r5
   18128:	bge	1815c <__assert_fail@plt+0x6d7c>
   1812c:	b	1816c <__assert_fail@plt+0x6d8c>
   18130:	beq	1815c <__assert_fail@plt+0x6d7c>
   18134:	mov	r1, #-2147483648	; 0x80000000
   18138:	mvn	r7, #-2147483648	; 0x80000000
   1813c:	sdiv	r1, r1, r5
   18140:	cmp	r1, r4
   18144:	bge	1815c <__assert_fail@plt+0x6d7c>
   18148:	b	1816c <__assert_fail@plt+0x6d8c>
   1814c:	mvn	r7, #-2147483648	; 0x80000000
   18150:	sdiv	r1, r7, r4
   18154:	cmp	r5, r1
   18158:	blt	1816c <__assert_fail@plt+0x6d8c>
   1815c:	mul	r1, r5, r4
   18160:	mov	r7, #64	; 0x40
   18164:	cmp	r1, #63	; 0x3f
   18168:	bgt	18174 <__assert_fail@plt+0x6d94>
   1816c:	sdiv	r5, r7, r4
   18170:	mul	r1, r5, r4
   18174:	cmp	r0, #0
   18178:	moveq	r7, #0
   1817c:	streq	r7, [r8]
   18180:	sub	r7, r5, r6
   18184:	cmp	r7, r2
   18188:	bge	1822c <__assert_fail@plt+0x6e4c>
   1818c:	add	r5, r6, r2
   18190:	mov	r2, #0
   18194:	mov	r1, #0
   18198:	cmp	r5, r3
   1819c:	movwgt	r2, #1
   181a0:	cmn	r3, #1
   181a4:	movwgt	r1, #1
   181a8:	cmp	r5, r6
   181ac:	bvs	18214 <__assert_fail@plt+0x6e34>
   181b0:	ands	r1, r1, r2
   181b4:	bne	18214 <__assert_fail@plt+0x6e34>
   181b8:	cmn	r4, #1
   181bc:	ble	181dc <__assert_fail@plt+0x6dfc>
   181c0:	cmp	r4, #0
   181c4:	beq	18228 <__assert_fail@plt+0x6e48>
   181c8:	cmn	r5, #1
   181cc:	ble	18200 <__assert_fail@plt+0x6e20>
   181d0:	mvn	r1, #-2147483648	; 0x80000000
   181d4:	udiv	r1, r1, r4
   181d8:	b	181f4 <__assert_fail@plt+0x6e14>
   181dc:	cmn	r5, #1
   181e0:	ble	18218 <__assert_fail@plt+0x6e38>
   181e4:	cmn	r4, #1
   181e8:	beq	18228 <__assert_fail@plt+0x6e48>
   181ec:	mov	r1, #-2147483648	; 0x80000000
   181f0:	sdiv	r1, r1, r4
   181f4:	cmp	r1, r5
   181f8:	bge	18228 <__assert_fail@plt+0x6e48>
   181fc:	b	18214 <__assert_fail@plt+0x6e34>
   18200:	beq	18228 <__assert_fail@plt+0x6e48>
   18204:	mov	r1, #-2147483648	; 0x80000000
   18208:	sdiv	r1, r1, r5
   1820c:	cmp	r1, r4
   18210:	bge	18228 <__assert_fail@plt+0x6e48>
   18214:	bl	1837c <__assert_fail@plt+0x6f9c>
   18218:	mvn	r1, #-2147483648	; 0x80000000
   1821c:	sdiv	r1, r1, r4
   18220:	cmp	r5, r1
   18224:	blt	18214 <__assert_fail@plt+0x6e34>
   18228:	mul	r1, r5, r4
   1822c:	bl	17f98 <__assert_fail@plt+0x6bb8>
   18230:	str	r5, [r8]
   18234:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18238:	push	{fp, lr}
   1823c:	mov	fp, sp
   18240:	mov	r1, #1
   18244:	bl	1843c <__assert_fail@plt+0x705c>
   18248:	cmp	r0, #0
   1824c:	popne	{fp, pc}
   18250:	bl	1837c <__assert_fail@plt+0x6f9c>
   18254:	push	{fp, lr}
   18258:	mov	fp, sp
   1825c:	bl	1843c <__assert_fail@plt+0x705c>
   18260:	cmp	r0, #0
   18264:	popne	{fp, pc}
   18268:	bl	1837c <__assert_fail@plt+0x6f9c>
   1826c:	push	{fp, lr}
   18270:	mov	fp, sp
   18274:	mov	r1, #1
   18278:	bl	1843c <__assert_fail@plt+0x705c>
   1827c:	cmp	r0, #0
   18280:	popne	{fp, pc}
   18284:	bl	1837c <__assert_fail@plt+0x6f9c>
   18288:	push	{fp, lr}
   1828c:	mov	fp, sp
   18290:	bl	1843c <__assert_fail@plt+0x705c>
   18294:	cmp	r0, #0
   18298:	popne	{fp, pc}
   1829c:	bl	1837c <__assert_fail@plt+0x6f9c>
   182a0:	push	{r4, r5, fp, lr}
   182a4:	add	fp, sp, #8
   182a8:	mov	r5, r0
   182ac:	mov	r0, r1
   182b0:	mov	r4, r1
   182b4:	bl	18490 <__assert_fail@plt+0x70b0>
   182b8:	cmp	r0, #0
   182bc:	beq	182d0 <__assert_fail@plt+0x6ef0>
   182c0:	mov	r1, r5
   182c4:	mov	r2, r4
   182c8:	pop	{r4, r5, fp, lr}
   182cc:	b	11158 <memcpy@plt>
   182d0:	bl	1837c <__assert_fail@plt+0x6f9c>
   182d4:	push	{r4, r5, fp, lr}
   182d8:	add	fp, sp, #8
   182dc:	mov	r5, r0
   182e0:	mov	r0, r1
   182e4:	mov	r4, r1
   182e8:	bl	18490 <__assert_fail@plt+0x70b0>
   182ec:	cmp	r0, #0
   182f0:	beq	18304 <__assert_fail@plt+0x6f24>
   182f4:	mov	r1, r5
   182f8:	mov	r2, r4
   182fc:	pop	{r4, r5, fp, lr}
   18300:	b	11158 <memcpy@plt>
   18304:	bl	1837c <__assert_fail@plt+0x6f9c>
   18308:	push	{r4, r5, fp, lr}
   1830c:	add	fp, sp, #8
   18310:	mov	r5, r0
   18314:	add	r0, r1, #1
   18318:	mov	r4, r1
   1831c:	bl	18490 <__assert_fail@plt+0x70b0>
   18320:	cmp	r0, #0
   18324:	beq	18340 <__assert_fail@plt+0x6f60>
   18328:	mov	r1, #0
   1832c:	mov	r2, r4
   18330:	strb	r1, [r0, r4]
   18334:	mov	r1, r5
   18338:	pop	{r4, r5, fp, lr}
   1833c:	b	11158 <memcpy@plt>
   18340:	bl	1837c <__assert_fail@plt+0x6f9c>
   18344:	push	{r4, r5, fp, lr}
   18348:	add	fp, sp, #8
   1834c:	mov	r4, r0
   18350:	bl	1126c <strlen@plt>
   18354:	add	r5, r0, #1
   18358:	mov	r0, r5
   1835c:	bl	18490 <__assert_fail@plt+0x70b0>
   18360:	cmp	r0, #0
   18364:	beq	18378 <__assert_fail@plt+0x6f98>
   18368:	mov	r1, r4
   1836c:	mov	r2, r5
   18370:	pop	{r4, r5, fp, lr}
   18374:	b	11158 <memcpy@plt>
   18378:	bl	1837c <__assert_fail@plt+0x6f9c>
   1837c:	push	{fp, lr}
   18380:	mov	fp, sp
   18384:	movw	r0, #41248	; 0xa120
   18388:	movw	r1, #40344	; 0x9d98
   1838c:	mov	r2, #5
   18390:	movt	r0, #2
   18394:	movt	r1, #1
   18398:	ldr	r4, [r0]
   1839c:	mov	r0, #0
   183a0:	bl	11170 <dcgettext@plt>
   183a4:	movw	r2, #37678	; 0x932e
   183a8:	mov	r3, r0
   183ac:	mov	r0, r4
   183b0:	mov	r1, #0
   183b4:	movt	r2, #1
   183b8:	bl	111f4 <error@plt>
   183bc:	bl	113b0 <abort@plt>
   183c0:	push	{fp, lr}
   183c4:	mov	fp, sp
   183c8:	orr	r1, r1, #512	; 0x200
   183cc:	bl	12918 <__assert_fail@plt+0x1538>
   183d0:	cmp	r0, #0
   183d4:	popne	{fp, pc}
   183d8:	bl	11290 <__errno_location@plt>
   183dc:	ldr	r0, [r0]
   183e0:	cmp	r0, #22
   183e4:	bne	18408 <__assert_fail@plt+0x7028>
   183e8:	movw	r0, #40361	; 0x9da9
   183ec:	movw	r1, #40377	; 0x9db9
   183f0:	movw	r3, #40388	; 0x9dc4
   183f4:	mov	r2, #41	; 0x29
   183f8:	movt	r0, #1
   183fc:	movt	r1, #1
   18400:	movt	r3, #1
   18404:	bl	113e0 <__assert_fail@plt>
   18408:	bl	1837c <__assert_fail@plt+0x6f9c>
   1840c:	ldr	r0, [r0, #48]	; 0x30
   18410:	and	r0, r0, #17
   18414:	cmp	r0, #16
   18418:	moveq	r0, #1
   1841c:	bxeq	lr
   18420:	cmp	r0, #17
   18424:	movne	r0, #0
   18428:	bxne	lr
   1842c:	ldr	r0, [r1, #48]	; 0x30
   18430:	cmp	r0, #0
   18434:	movwne	r0, #1
   18438:	bx	lr
   1843c:	clz	r2, r1
   18440:	clz	r3, r0
   18444:	lsr	r2, r2, #5
   18448:	lsr	r3, r3, #5
   1844c:	orrs	r2, r3, r2
   18450:	movwne	r1, #1
   18454:	movwne	r0, #1
   18458:	cmp	r1, #0
   1845c:	beq	1848c <__assert_fail@plt+0x70ac>
   18460:	mvn	r2, #-2147483648	; 0x80000000
   18464:	udiv	r2, r2, r1
   18468:	cmp	r2, r0
   1846c:	bcs	1848c <__assert_fail@plt+0x70ac>
   18470:	push	{fp, lr}
   18474:	mov	fp, sp
   18478:	bl	11290 <__errno_location@plt>
   1847c:	mov	r1, #12
   18480:	str	r1, [r0]
   18484:	mov	r0, #0
   18488:	pop	{fp, pc}
   1848c:	b	110f8 <calloc@plt>
   18490:	cmp	r0, #0
   18494:	movweq	r0, #1
   18498:	cmn	r0, #1
   1849c:	ble	184a4 <__assert_fail@plt+0x70c4>
   184a0:	b	1120c <malloc@plt>
   184a4:	push	{fp, lr}
   184a8:	mov	fp, sp
   184ac:	bl	11290 <__errno_location@plt>
   184b0:	mov	r1, #12
   184b4:	str	r1, [r0]
   184b8:	mov	r0, #0
   184bc:	pop	{fp, pc}
   184c0:	push	{fp, lr}
   184c4:	mov	fp, sp
   184c8:	cmp	r0, #0
   184cc:	beq	184e8 <__assert_fail@plt+0x7108>
   184d0:	cmp	r1, #0
   184d4:	beq	184f4 <__assert_fail@plt+0x7114>
   184d8:	cmn	r1, #1
   184dc:	ble	184fc <__assert_fail@plt+0x711c>
   184e0:	pop	{fp, lr}
   184e4:	b	1117c <realloc@plt>
   184e8:	mov	r0, r1
   184ec:	pop	{fp, lr}
   184f0:	b	18490 <__assert_fail@plt+0x70b0>
   184f4:	bl	18988 <__assert_fail@plt+0x75a8>
   184f8:	b	18508 <__assert_fail@plt+0x7128>
   184fc:	bl	11290 <__errno_location@plt>
   18500:	mov	r1, #12
   18504:	str	r1, [r0]
   18508:	mov	r0, #0
   1850c:	pop	{fp, pc}
   18510:	push	{r4, r5, r6, sl, fp, lr}
   18514:	add	fp, sp, #16
   18518:	mov	r4, r0
   1851c:	bl	111d0 <__fpending@plt>
   18520:	mov	r5, r0
   18524:	mov	r0, r4
   18528:	bl	111dc <ferror_unlocked@plt>
   1852c:	mov	r6, r0
   18530:	mov	r0, r4
   18534:	bl	1867c <__assert_fail@plt+0x729c>
   18538:	cmp	r6, #0
   1853c:	beq	1855c <__assert_fail@plt+0x717c>
   18540:	mvn	r4, #0
   18544:	cmp	r0, #0
   18548:	bne	18588 <__assert_fail@plt+0x71a8>
   1854c:	bl	11290 <__errno_location@plt>
   18550:	mov	r1, #0
   18554:	str	r1, [r0]
   18558:	b	18588 <__assert_fail@plt+0x71a8>
   1855c:	cmp	r0, #0
   18560:	mov	r4, r0
   18564:	mvnne	r4, #0
   18568:	cmp	r5, #0
   1856c:	bne	18588 <__assert_fail@plt+0x71a8>
   18570:	cmp	r0, #0
   18574:	beq	18588 <__assert_fail@plt+0x71a8>
   18578:	bl	11290 <__errno_location@plt>
   1857c:	ldr	r0, [r0]
   18580:	subs	r4, r0, #9
   18584:	mvnne	r4, #0
   18588:	mov	r0, r4
   1858c:	pop	{r4, r5, r6, sl, fp, pc}
   18590:	movw	r2, #62998	; 0xf616
   18594:	mov	r1, #0
   18598:	movt	r2, #149	; 0x95
   1859c:	str	r1, [r0, #16]
   185a0:	str	r1, [r0, #20]
   185a4:	str	r2, [r0, #24]
   185a8:	bx	lr
   185ac:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   185b0:	add	fp, sp, #24
   185b4:	ldr	r2, [r0, #24]
   185b8:	movw	r3, #62998	; 0xf616
   185bc:	movt	r3, #149	; 0x95
   185c0:	cmp	r2, r3
   185c4:	bne	1865c <__assert_fail@plt+0x727c>
   185c8:	add	r3, r0, #16
   185cc:	add	ip, r0, #8
   185d0:	ldrd	r4, [r3]
   185d4:	orrs	r2, r4, r5
   185d8:	beq	18614 <__assert_fail@plt+0x7234>
   185dc:	ldr	r6, [r1, #96]	; 0x60
   185e0:	ldr	r9, [r1, #100]	; 0x64
   185e4:	ldm	r0, {r2, r7}
   185e8:	eor	r7, r9, r7
   185ec:	eor	r2, r6, r2
   185f0:	orrs	r2, r2, r7
   185f4:	bne	18614 <__assert_fail@plt+0x7234>
   185f8:	ldm	ip, {r2, r7}
   185fc:	ldm	r1, {r6, r9}
   18600:	eor	r7, r9, r7
   18604:	eor	r2, r6, r2
   18608:	orrs	r2, r2, r7
   1860c:	mov	r2, #1
   18610:	beq	18654 <__assert_fail@plt+0x7274>
   18614:	adds	r6, r4, #1
   18618:	adc	r7, r5, #0
   1861c:	and	r2, r6, r4
   18620:	strd	r6, [r3]
   18624:	and	r3, r7, r5
   18628:	orrs	r2, r2, r3
   1862c:	mov	r2, #0
   18630:	bne	18654 <__assert_fail@plt+0x7274>
   18634:	orrs	r3, r6, r7
   18638:	beq	18650 <__assert_fail@plt+0x7270>
   1863c:	ldrd	r4, [r1]
   18640:	strd	r4, [ip]
   18644:	ldrd	r4, [r1, #96]	; 0x60
   18648:	strd	r4, [r0]
   1864c:	b	18654 <__assert_fail@plt+0x7274>
   18650:	mov	r2, #1
   18654:	mov	r0, r2
   18658:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1865c:	movw	r0, #40466	; 0x9e12
   18660:	movw	r1, #40490	; 0x9e2a
   18664:	movw	r3, #40508	; 0x9e3c
   18668:	mov	r2, #60	; 0x3c
   1866c:	movt	r0, #1
   18670:	movt	r1, #1
   18674:	movt	r3, #1
   18678:	bl	113e0 <__assert_fail@plt>
   1867c:	push	{r4, r5, r6, sl, fp, lr}
   18680:	add	fp, sp, #16
   18684:	sub	sp, sp, #8
   18688:	mov	r4, r0
   1868c:	bl	112cc <fileno@plt>
   18690:	cmn	r0, #1
   18694:	ble	18708 <__assert_fail@plt+0x7328>
   18698:	mov	r0, r4
   1869c:	bl	11224 <__freading@plt>
   186a0:	cmp	r0, #0
   186a4:	beq	186d0 <__assert_fail@plt+0x72f0>
   186a8:	mov	r0, r4
   186ac:	bl	112cc <fileno@plt>
   186b0:	mov	r1, #1
   186b4:	mov	r2, #0
   186b8:	mov	r3, #0
   186bc:	str	r1, [sp]
   186c0:	bl	111b8 <lseek64@plt>
   186c4:	and	r0, r0, r1
   186c8:	cmn	r0, #1
   186cc:	beq	18708 <__assert_fail@plt+0x7328>
   186d0:	mov	r0, r4
   186d4:	bl	1892c <__assert_fail@plt+0x754c>
   186d8:	cmp	r0, #0
   186dc:	beq	18708 <__assert_fail@plt+0x7328>
   186e0:	bl	11290 <__errno_location@plt>
   186e4:	ldr	r6, [r0]
   186e8:	mov	r5, r0
   186ec:	mov	r0, r4
   186f0:	bl	112e4 <fclose@plt>
   186f4:	cmp	r6, #0
   186f8:	strne	r6, [r5]
   186fc:	mvnne	r0, #0
   18700:	sub	sp, fp, #16
   18704:	pop	{r4, r5, r6, sl, fp, pc}
   18708:	mov	r0, r4
   1870c:	sub	sp, fp, #16
   18710:	pop	{r4, r5, r6, sl, fp, lr}
   18714:	b	112e4 <fclose@plt>
   18718:	sub	sp, sp, #8
   1871c:	push	{r4, r5, r6, r7, fp, lr}
   18720:	add	fp, sp, #16
   18724:	sub	sp, sp, #8
   18728:	mov	r5, r0
   1872c:	add	r0, fp, #8
   18730:	cmp	r1, #11
   18734:	str	r2, [fp, #8]
   18738:	str	r3, [fp, #12]
   1873c:	str	r0, [sp, #4]
   18740:	bhi	1877c <__assert_fail@plt+0x739c>
   18744:	mov	r0, #1
   18748:	movw	r2, #1300	; 0x514
   1874c:	tst	r2, r0, lsl r1
   18750:	bne	18834 <__assert_fail@plt+0x7454>
   18754:	movw	r2, #2570	; 0xa0a
   18758:	tst	r2, r0, lsl r1
   1875c:	bne	187a4 <__assert_fail@plt+0x73c4>
   18760:	cmp	r1, #0
   18764:	bne	1877c <__assert_fail@plt+0x739c>
   18768:	ldr	r0, [sp, #4]
   1876c:	add	r1, r0, #4
   18770:	str	r1, [sp, #4]
   18774:	mov	r1, #0
   18778:	b	18840 <__assert_fail@plt+0x7460>
   1877c:	sub	r0, r1, #1024	; 0x400
   18780:	cmp	r0, #10
   18784:	bhi	18834 <__assert_fail@plt+0x7454>
   18788:	mov	r2, #1
   1878c:	movw	r3, #645	; 0x285
   18790:	tst	r3, r2, lsl r0
   18794:	bne	18834 <__assert_fail@plt+0x7454>
   18798:	movw	r3, #1282	; 0x502
   1879c:	tst	r3, r2, lsl r0
   187a0:	beq	187b0 <__assert_fail@plt+0x73d0>
   187a4:	mov	r0, r5
   187a8:	bl	112fc <fcntl64@plt>
   187ac:	b	1884c <__assert_fail@plt+0x746c>
   187b0:	cmp	r0, #6
   187b4:	bne	18834 <__assert_fail@plt+0x7454>
   187b8:	ldr	r0, [sp, #4]
   187bc:	movw	r7, #41704	; 0xa2e8
   187c0:	movt	r7, #2
   187c4:	add	r1, r0, #4
   187c8:	str	r1, [sp, #4]
   187cc:	ldr	r6, [r0]
   187d0:	ldr	r0, [r7]
   187d4:	cmp	r0, #0
   187d8:	bmi	18870 <__assert_fail@plt+0x7490>
   187dc:	mov	r0, r5
   187e0:	movw	r1, #1030	; 0x406
   187e4:	mov	r2, r6
   187e8:	bl	112fc <fcntl64@plt>
   187ec:	mov	r4, r0
   187f0:	cmn	r0, #1
   187f4:	bgt	18864 <__assert_fail@plt+0x7484>
   187f8:	bl	11290 <__errno_location@plt>
   187fc:	ldr	r0, [r0]
   18800:	cmp	r0, #22
   18804:	bne	18864 <__assert_fail@plt+0x7484>
   18808:	mov	r0, r5
   1880c:	mov	r1, #0
   18810:	mov	r2, r6
   18814:	bl	112fc <fcntl64@plt>
   18818:	mov	r4, r0
   1881c:	cmp	r0, #0
   18820:	bmi	18850 <__assert_fail@plt+0x7470>
   18824:	mvn	r0, #0
   18828:	str	r0, [r7]
   1882c:	mov	r0, #1
   18830:	b	18894 <__assert_fail@plt+0x74b4>
   18834:	ldr	r0, [sp, #4]
   18838:	add	r2, r0, #4
   1883c:	str	r2, [sp, #4]
   18840:	ldr	r2, [r0]
   18844:	mov	r0, r5
   18848:	bl	112fc <fcntl64@plt>
   1884c:	mov	r4, r0
   18850:	mov	r0, r4
   18854:	sub	sp, fp, #16
   18858:	pop	{r4, r5, r6, r7, fp, lr}
   1885c:	add	sp, sp, #8
   18860:	bx	lr
   18864:	mov	r0, #1
   18868:	str	r0, [r7]
   1886c:	b	18850 <__assert_fail@plt+0x7470>
   18870:	mov	r0, r5
   18874:	mov	r1, #0
   18878:	mov	r2, r6
   1887c:	bl	112fc <fcntl64@plt>
   18880:	mov	r4, r0
   18884:	ldr	r0, [r7]
   18888:	add	r0, r0, #1
   1888c:	clz	r0, r0
   18890:	lsr	r0, r0, #5
   18894:	cmp	r0, #0
   18898:	beq	18850 <__assert_fail@plt+0x7470>
   1889c:	cmp	r4, #0
   188a0:	bmi	18850 <__assert_fail@plt+0x7470>
   188a4:	mov	r0, r4
   188a8:	mov	r1, #1
   188ac:	bl	112fc <fcntl64@plt>
   188b0:	cmp	r0, #0
   188b4:	bmi	188d0 <__assert_fail@plt+0x74f0>
   188b8:	orr	r2, r0, #1
   188bc:	mov	r0, r4
   188c0:	mov	r1, #2
   188c4:	bl	112fc <fcntl64@plt>
   188c8:	cmn	r0, #1
   188cc:	bne	18850 <__assert_fail@plt+0x7470>
   188d0:	bl	11290 <__errno_location@plt>
   188d4:	ldr	r6, [r0]
   188d8:	mov	r5, r0
   188dc:	mov	r0, r4
   188e0:	bl	113bc <close@plt>
   188e4:	str	r6, [r5]
   188e8:	mvn	r4, #0
   188ec:	b	18850 <__assert_fail@plt+0x7470>
   188f0:	sub	sp, sp, #8
   188f4:	push	{fp, lr}
   188f8:	mov	fp, sp
   188fc:	sub	sp, sp, #8
   18900:	str	r2, [fp, #8]
   18904:	str	r3, [fp, #12]
   18908:	tst	r1, #64	; 0x40
   1890c:	mov	r2, #0
   18910:	ldrne	r2, [fp, #8]
   18914:	bl	11200 <open64@plt>
   18918:	bl	17a48 <__assert_fail@plt+0x6668>
   1891c:	mov	sp, fp
   18920:	pop	{fp, lr}
   18924:	add	sp, sp, #8
   18928:	bx	lr
   1892c:	push	{r4, sl, fp, lr}
   18930:	add	fp, sp, #8
   18934:	sub	sp, sp, #8
   18938:	mov	r4, r0
   1893c:	cmp	r0, #0
   18940:	beq	18978 <__assert_fail@plt+0x7598>
   18944:	mov	r0, r4
   18948:	bl	11224 <__freading@plt>
   1894c:	cmp	r0, #0
   18950:	beq	18978 <__assert_fail@plt+0x7598>
   18954:	ldrb	r0, [r4, #1]
   18958:	tst	r0, #1
   1895c:	beq	18978 <__assert_fail@plt+0x7598>
   18960:	mov	r0, #1
   18964:	mov	r2, #0
   18968:	mov	r3, #0
   1896c:	str	r0, [sp]
   18970:	mov	r0, r4
   18974:	bl	189b0 <__assert_fail@plt+0x75d0>
   18978:	mov	r0, r4
   1897c:	sub	sp, fp, #8
   18980:	pop	{r4, sl, fp, lr}
   18984:	b	11128 <fflush@plt>
   18988:	push	{r4, r5, r6, sl, fp, lr}
   1898c:	add	fp, sp, #16
   18990:	mov	r4, r0
   18994:	bl	11290 <__errno_location@plt>
   18998:	ldr	r6, [r0]
   1899c:	mov	r5, r0
   189a0:	mov	r0, r4
   189a4:	bl	11140 <free@plt>
   189a8:	str	r6, [r5]
   189ac:	pop	{r4, r5, r6, sl, fp, pc}
   189b0:	push	{r4, r5, r6, r7, fp, lr}
   189b4:	add	fp, sp, #16
   189b8:	sub	sp, sp, #8
   189bc:	mov	r4, r0
   189c0:	ldr	r0, [r0, #4]
   189c4:	mov	r5, r3
   189c8:	mov	r6, r2
   189cc:	ldr	r1, [r4, #8]
   189d0:	cmp	r1, r0
   189d4:	bne	189f0 <__assert_fail@plt+0x7610>
   189d8:	ldrd	r0, [r4, #16]
   189dc:	cmp	r1, r0
   189e0:	bne	189f0 <__assert_fail@plt+0x7610>
   189e4:	ldr	r0, [r4, #36]	; 0x24
   189e8:	cmp	r0, #0
   189ec:	beq	18a08 <__assert_fail@plt+0x7628>
   189f0:	mov	r0, r4
   189f4:	mov	r2, r6
   189f8:	mov	r3, r5
   189fc:	sub	sp, fp, #16
   18a00:	pop	{r4, r5, r6, r7, fp, lr}
   18a04:	b	112f0 <fseeko64@plt>
   18a08:	ldr	r7, [fp, #8]
   18a0c:	mov	r0, r4
   18a10:	bl	112cc <fileno@plt>
   18a14:	mov	r2, r6
   18a18:	mov	r3, r5
   18a1c:	str	r7, [sp]
   18a20:	bl	111b8 <lseek64@plt>
   18a24:	and	r2, r0, r1
   18a28:	cmn	r2, #1
   18a2c:	beq	18a48 <__assert_fail@plt+0x7668>
   18a30:	strd	r0, [r4, #80]	; 0x50
   18a34:	ldr	r0, [r4]
   18a38:	bic	r0, r0, #16
   18a3c:	str	r0, [r4]
   18a40:	mov	r0, #0
   18a44:	b	18a4c <__assert_fail@plt+0x766c>
   18a48:	mvn	r0, #0
   18a4c:	sub	sp, fp, #16
   18a50:	pop	{r4, r5, r6, r7, fp, pc}
   18a54:	push	{fp, lr}
   18a58:	mov	fp, sp
   18a5c:	mov	r0, #14
   18a60:	bl	11320 <nl_langinfo@plt>
   18a64:	movw	r1, #36770	; 0x8fa2
   18a68:	cmp	r0, #0
   18a6c:	movt	r1, #1
   18a70:	movne	r1, r0
   18a74:	movw	r0, #40575	; 0x9e7f
   18a78:	ldrb	r2, [r1]
   18a7c:	movt	r0, #1
   18a80:	cmp	r2, #0
   18a84:	movne	r0, r1
   18a88:	pop	{fp, pc}
   18a8c:	push	{r4, r5, r6, r7, fp, lr}
   18a90:	add	fp, sp, #16
   18a94:	sub	sp, sp, #8
   18a98:	cmp	r0, #0
   18a9c:	add	r5, sp, #4
   18aa0:	mov	r7, r2
   18aa4:	mov	r4, r1
   18aa8:	movne	r5, r0
   18aac:	mov	r0, r5
   18ab0:	bl	111e8 <mbrtowc@plt>
   18ab4:	mov	r6, r0
   18ab8:	cmp	r7, #0
   18abc:	beq	18ae4 <__assert_fail@plt+0x7704>
   18ac0:	cmn	r6, #2
   18ac4:	bcc	18ae4 <__assert_fail@plt+0x7704>
   18ac8:	mov	r0, #0
   18acc:	bl	18b38 <__assert_fail@plt+0x7758>
   18ad0:	cmp	r0, #0
   18ad4:	bne	18ae4 <__assert_fail@plt+0x7704>
   18ad8:	ldrb	r0, [r4]
   18adc:	mov	r6, #1
   18ae0:	str	r0, [r5]
   18ae4:	mov	r0, r6
   18ae8:	sub	sp, fp, #16
   18aec:	pop	{r4, r5, r6, r7, fp, pc}
   18af0:	cmp	r2, #0
   18af4:	beq	18b24 <__assert_fail@plt+0x7744>
   18af8:	mvn	r3, #0
   18afc:	udiv	r3, r3, r2
   18b00:	cmp	r3, r1
   18b04:	bcs	18b24 <__assert_fail@plt+0x7744>
   18b08:	push	{fp, lr}
   18b0c:	mov	fp, sp
   18b10:	bl	11290 <__errno_location@plt>
   18b14:	mov	r1, #12
   18b18:	str	r1, [r0]
   18b1c:	mov	r0, #0
   18b20:	pop	{fp, pc}
   18b24:	mul	r1, r2, r1
   18b28:	b	184c0 <__assert_fail@plt+0x70e0>
   18b2c:	mov	r1, #0
   18b30:	mov	r2, #3
   18b34:	b	18718 <__assert_fail@plt+0x7338>
   18b38:	push	{r4, sl, fp, lr}
   18b3c:	add	fp, sp, #8
   18b40:	sub	sp, sp, #264	; 0x108
   18b44:	add	r1, sp, #7
   18b48:	movw	r2, #257	; 0x101
   18b4c:	bl	18ba4 <__assert_fail@plt+0x77c4>
   18b50:	mov	r4, #0
   18b54:	cmp	r0, #0
   18b58:	bne	18b98 <__assert_fail@plt+0x77b8>
   18b5c:	movw	r1, #40581	; 0x9e85
   18b60:	add	r0, sp, #7
   18b64:	mov	r2, #2
   18b68:	movt	r1, #1
   18b6c:	bl	11260 <bcmp@plt>
   18b70:	cmp	r0, #0
   18b74:	beq	18b98 <__assert_fail@plt+0x77b8>
   18b78:	movw	r1, #40583	; 0x9e87
   18b7c:	add	r0, sp, #7
   18b80:	mov	r2, #6
   18b84:	movt	r1, #1
   18b88:	bl	11260 <bcmp@plt>
   18b8c:	cmp	r0, #0
   18b90:	mov	r4, r0
   18b94:	movwne	r4, #1
   18b98:	mov	r0, r4
   18b9c:	sub	sp, fp, #8
   18ba0:	pop	{r4, sl, fp, pc}
   18ba4:	push	{r4, r5, r6, r7, fp, lr}
   18ba8:	add	fp, sp, #16
   18bac:	mov	r4, r1
   18bb0:	mov	r1, #0
   18bb4:	mov	r6, r2
   18bb8:	bl	11308 <setlocale@plt>
   18bbc:	cmp	r0, #0
   18bc0:	beq	18bec <__assert_fail@plt+0x780c>
   18bc4:	mov	r7, r0
   18bc8:	bl	1126c <strlen@plt>
   18bcc:	cmp	r0, r6
   18bd0:	bcs	18c00 <__assert_fail@plt+0x7820>
   18bd4:	add	r2, r0, #1
   18bd8:	mov	r0, r4
   18bdc:	mov	r1, r7
   18be0:	bl	11158 <memcpy@plt>
   18be4:	mov	r5, #0
   18be8:	b	18c28 <__assert_fail@plt+0x7848>
   18bec:	cmp	r6, #0
   18bf0:	mov	r5, #22
   18bf4:	movne	r0, #0
   18bf8:	strbne	r0, [r4]
   18bfc:	b	18c28 <__assert_fail@plt+0x7848>
   18c00:	mov	r5, #34	; 0x22
   18c04:	cmp	r6, #0
   18c08:	beq	18c28 <__assert_fail@plt+0x7848>
   18c0c:	sub	r6, r6, #1
   18c10:	mov	r0, r4
   18c14:	mov	r1, r7
   18c18:	mov	r2, r6
   18c1c:	bl	11158 <memcpy@plt>
   18c20:	mov	r0, #0
   18c24:	strb	r0, [r4, r6]
   18c28:	mov	r0, r5
   18c2c:	pop	{r4, r5, r6, r7, fp, pc}
   18c30:	mov	r1, #0
   18c34:	b	11308 <setlocale@plt>
   18c38:	cmp	r3, #0
   18c3c:	cmpeq	r2, #0
   18c40:	bne	18c58 <__assert_fail@plt+0x7878>
   18c44:	cmp	r1, #0
   18c48:	cmpeq	r0, #0
   18c4c:	mvnne	r1, #0
   18c50:	mvnne	r0, #0
   18c54:	b	18c74 <__assert_fail@plt+0x7894>
   18c58:	sub	sp, sp, #8
   18c5c:	push	{sp, lr}
   18c60:	bl	18c84 <__assert_fail@plt+0x78a4>
   18c64:	ldr	lr, [sp, #4]
   18c68:	add	sp, sp, #8
   18c6c:	pop	{r2, r3}
   18c70:	bx	lr
   18c74:	push	{r1, lr}
   18c78:	mov	r0, #8
   18c7c:	bl	11110 <raise@plt>
   18c80:	pop	{r1, pc}
   18c84:	cmp	r1, r3
   18c88:	cmpeq	r0, r2
   18c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c90:	mov	r4, r0
   18c94:	movcc	r0, #0
   18c98:	mov	r5, r1
   18c9c:	ldr	lr, [sp, #36]	; 0x24
   18ca0:	movcc	r1, r0
   18ca4:	bcc	18da0 <__assert_fail@plt+0x79c0>
   18ca8:	cmp	r3, #0
   18cac:	clzeq	ip, r2
   18cb0:	clzne	ip, r3
   18cb4:	addeq	ip, ip, #32
   18cb8:	cmp	r5, #0
   18cbc:	clzeq	r1, r4
   18cc0:	addeq	r1, r1, #32
   18cc4:	clzne	r1, r5
   18cc8:	sub	ip, ip, r1
   18ccc:	sub	sl, ip, #32
   18cd0:	lsl	r9, r3, ip
   18cd4:	rsb	fp, ip, #32
   18cd8:	orr	r9, r9, r2, lsl sl
   18cdc:	orr	r9, r9, r2, lsr fp
   18ce0:	lsl	r8, r2, ip
   18ce4:	cmp	r5, r9
   18ce8:	cmpeq	r4, r8
   18cec:	movcc	r0, #0
   18cf0:	movcc	r1, r0
   18cf4:	bcc	18d10 <__assert_fail@plt+0x7930>
   18cf8:	mov	r0, #1
   18cfc:	subs	r4, r4, r8
   18d00:	lsl	r1, r0, sl
   18d04:	orr	r1, r1, r0, lsr fp
   18d08:	lsl	r0, r0, ip
   18d0c:	sbc	r5, r5, r9
   18d10:	cmp	ip, #0
   18d14:	beq	18da0 <__assert_fail@plt+0x79c0>
   18d18:	lsr	r6, r8, #1
   18d1c:	orr	r6, r6, r9, lsl #31
   18d20:	lsr	r7, r9, #1
   18d24:	mov	r2, ip
   18d28:	b	18d4c <__assert_fail@plt+0x796c>
   18d2c:	subs	r3, r4, r6
   18d30:	sbc	r8, r5, r7
   18d34:	adds	r3, r3, r3
   18d38:	adc	r8, r8, r8
   18d3c:	adds	r4, r3, #1
   18d40:	adc	r5, r8, #0
   18d44:	subs	r2, r2, #1
   18d48:	beq	18d68 <__assert_fail@plt+0x7988>
   18d4c:	cmp	r5, r7
   18d50:	cmpeq	r4, r6
   18d54:	bcs	18d2c <__assert_fail@plt+0x794c>
   18d58:	adds	r4, r4, r4
   18d5c:	adc	r5, r5, r5
   18d60:	subs	r2, r2, #1
   18d64:	bne	18d4c <__assert_fail@plt+0x796c>
   18d68:	lsr	r3, r4, ip
   18d6c:	orr	r3, r3, r5, lsl fp
   18d70:	lsr	r2, r5, ip
   18d74:	orr	r3, r3, r5, lsr sl
   18d78:	adds	r0, r0, r4
   18d7c:	mov	r4, r3
   18d80:	lsl	r3, r2, ip
   18d84:	orr	r3, r3, r4, lsl sl
   18d88:	lsl	ip, r4, ip
   18d8c:	orr	r3, r3, r4, lsr fp
   18d90:	adc	r1, r1, r5
   18d94:	subs	r0, r0, ip
   18d98:	mov	r5, r2
   18d9c:	sbc	r1, r1, r3
   18da0:	cmp	lr, #0
   18da4:	strdne	r4, [lr]
   18da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18db0:	mov	r7, r0
   18db4:	ldr	r6, [pc, #72]	; 18e04 <__assert_fail@plt+0x7a24>
   18db8:	ldr	r5, [pc, #72]	; 18e08 <__assert_fail@plt+0x7a28>
   18dbc:	add	r6, pc, r6
   18dc0:	add	r5, pc, r5
   18dc4:	sub	r6, r6, r5
   18dc8:	mov	r8, r1
   18dcc:	mov	r9, r2
   18dd0:	bl	110cc <fstatfs64@plt-0x20>
   18dd4:	asrs	r6, r6, #2
   18dd8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ddc:	mov	r4, #0
   18de0:	add	r4, r4, #1
   18de4:	ldr	r3, [r5], #4
   18de8:	mov	r2, r9
   18dec:	mov	r1, r8
   18df0:	mov	r0, r7
   18df4:	blx	r3
   18df8:	cmp	r6, r4
   18dfc:	bne	18de0 <__assert_fail@plt+0x7a00>
   18e00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e04:	andeq	r1, r1, r8, asr #2
   18e08:	andeq	r1, r1, r0, asr #2
   18e0c:	bx	lr
   18e10:	ldr	r3, [pc, #12]	; 18e24 <__assert_fail@plt+0x7a44>
   18e14:	mov	r1, #0
   18e18:	add	r3, pc, r3
   18e1c:	ldr	r2, [r3]
   18e20:	b	112a8 <__cxa_atexit@plt>
   18e24:	strdeq	r1, [r1], -r4
   18e28:	mov	r2, r1
   18e2c:	mov	r1, r0
   18e30:	mov	r0, #3
   18e34:	b	1138c <__xstat64@plt>
   18e38:	mov	r2, r1
   18e3c:	mov	r1, r0
   18e40:	mov	r0, #3
   18e44:	b	111ac <__fxstat64@plt>
   18e48:	mov	r2, r1
   18e4c:	mov	r1, r0
   18e50:	mov	r0, #3
   18e54:	b	113c8 <__lxstat64@plt>
   18e58:	push	{lr}		; (str lr, [sp, #-4]!)
   18e5c:	sub	sp, sp, #12
   18e60:	str	r3, [sp]
   18e64:	mov	r3, r2
   18e68:	mov	r2, r1
   18e6c:	mov	r1, r0
   18e70:	mov	r0, #3
   18e74:	bl	11194 <__fxstatat64@plt>
   18e78:	add	sp, sp, #12
   18e7c:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00018e80 <.fini>:
   18e80:	push	{r3, lr}
   18e84:	pop	{r3, pc}
