
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c24 <.init>:
   10c24:	push	{r3, lr}
   10c28:	bl	10ee4 <__assert_fail@plt+0x48>
   10c2c:	pop	{r3, pc}

Disassembly of section .plt:

00010c30 <calloc@plt-0x14>:
   10c30:	push	{lr}		; (str lr, [sp, #-4]!)
   10c34:	ldr	lr, [pc, #4]	; 10c40 <calloc@plt-0x4>
   10c38:	add	lr, pc, lr
   10c3c:	ldr	pc, [lr, #8]!
   10c40:	andeq	r5, r1, r0, asr #7

00010c44 <calloc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #86016	; 0x15000
   10c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c50 <fputs_unlocked@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #86016	; 0x15000
   10c58:	ldr	pc, [ip, #952]!	; 0x3b8

00010c5c <raise@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #86016	; 0x15000
   10c64:	ldr	pc, [ip, #944]!	; 0x3b0

00010c68 <strcmp@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #86016	; 0x15000
   10c70:	ldr	pc, [ip, #936]!	; 0x3a8

00010c74 <posix_fadvise64@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #86016	; 0x15000
   10c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c80 <fflush@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #86016	; 0x15000
   10c88:	ldr	pc, [ip, #920]!	; 0x398

00010c8c <free@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #86016	; 0x15000
   10c94:	ldr	pc, [ip, #912]!	; 0x390

00010c98 <_exit@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #86016	; 0x15000
   10ca0:	ldr	pc, [ip, #904]!	; 0x388

00010ca4 <memcpy@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #896]!	; 0x380

00010cb0 <mbsinit@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #888]!	; 0x378

00010cbc <memcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #880]!	; 0x370

00010cc8 <fputc_unlocked@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #872]!	; 0x368

00010cd4 <dcgettext@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #864]!	; 0x360

00010ce0 <dup2@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #856]!	; 0x358

00010cec <realloc@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #848]!	; 0x350

00010cf8 <textdomain@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #840]!	; 0x348

00010d04 <iswprint@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #832]!	; 0x340

00010d10 <fwrite@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #824]!	; 0x338

00010d1c <lseek64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #816]!	; 0x330

00010d28 <__ctype_get_mb_cur_max@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #808]!	; 0x328

00010d34 <__fpending@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #800]!	; 0x320

00010d40 <mbrtowc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #792]!	; 0x318

00010d4c <error@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #784]!	; 0x310

00010d58 <open64@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #776]!	; 0x308

00010d64 <puts@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #768]!	; 0x300

00010d70 <malloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #760]!	; 0x2f8

00010d7c <__libc_start_main@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #752]!	; 0x2f0

00010d88 <__freading@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #744]!	; 0x2e8

00010d94 <__gmon_start__@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00010da0 <freopen64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #728]!	; 0x2d8

00010dac <getopt_long@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #720]!	; 0x2d0

00010db8 <__ctype_b_loc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc4 <exit@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd0 <strlen@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00010ddc <__errno_location@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #688]!	; 0x2b0

00010de8 <__cxa_atexit@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #680]!	; 0x2a8

00010df4 <memset@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00010e00 <__printf_chk@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #664]!	; 0x298

00010e0c <fileno@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #656]!	; 0x290

00010e18 <__fprintf_chk@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #648]!	; 0x288

00010e24 <fclose@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #640]!	; 0x280

00010e30 <fseeko64@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #632]!	; 0x278

00010e3c <__uflow@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #624]!	; 0x270

00010e48 <setlocale@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #616]!	; 0x268

00010e54 <strrchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #608]!	; 0x260

00010e60 <nl_langinfo@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #600]!	; 0x258

00010e6c <bindtextdomain@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #592]!	; 0x250

00010e78 <strncmp@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #584]!	; 0x248

00010e84 <abort@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #576]!	; 0x240

00010e90 <close@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #568]!	; 0x238

00010e9c <__assert_fail@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #560]!	; 0x230

Disassembly of section .text:

00010ea8 <.text>:
   10ea8:	mov	fp, #0
   10eac:	mov	lr, #0
   10eb0:	pop	{r1}		; (ldr r1, [sp], #4)
   10eb4:	mov	r2, sp
   10eb8:	push	{r2}		; (str r2, [sp, #-4]!)
   10ebc:	push	{r0}		; (str r0, [sp, #-4]!)
   10ec0:	ldr	ip, [pc, #16]	; 10ed8 <__assert_fail@plt+0x3c>
   10ec4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ec8:	ldr	r0, [pc, #12]	; 10edc <__assert_fail@plt+0x40>
   10ecc:	ldr	r3, [pc, #12]	; 10ee0 <__assert_fail@plt+0x44>
   10ed0:	bl	10d7c <__libc_start_main@plt>
   10ed4:	bl	10e84 <abort@plt>
   10ed8:			; <UNDEFINED> instruction: 0x000155bc
   10edc:	andeq	r1, r1, r0, lsr #10
   10ee0:	andeq	r5, r1, ip, asr r5
   10ee4:	ldr	r3, [pc, #20]	; 10f00 <__assert_fail@plt+0x64>
   10ee8:	ldr	r2, [pc, #20]	; 10f04 <__assert_fail@plt+0x68>
   10eec:	add	r3, pc, r3
   10ef0:	ldr	r2, [r3, r2]
   10ef4:	cmp	r2, #0
   10ef8:	bxeq	lr
   10efc:	b	10d94 <__gmon_start__@plt>
   10f00:	andeq	r5, r1, ip, lsl #2
   10f04:	ldrdeq	r0, [r0], -r8
   10f08:	ldr	r3, [pc, #28]	; 10f2c <__assert_fail@plt+0x90>
   10f0c:	ldr	r0, [pc, #28]	; 10f30 <__assert_fail@plt+0x94>
   10f10:	sub	r3, r3, r0
   10f14:	cmp	r3, #6
   10f18:	bxls	lr
   10f1c:	ldr	r3, [pc, #16]	; 10f34 <__assert_fail@plt+0x98>
   10f20:	cmp	r3, #0
   10f24:	bxeq	lr
   10f28:	bx	r3
   10f2c:	andeq	r6, r2, pc, lsr #2
   10f30:	andeq	r6, r2, ip, lsr #2
   10f34:	andeq	r0, r0, r0
   10f38:	ldr	r1, [pc, #36]	; 10f64 <__assert_fail@plt+0xc8>
   10f3c:	ldr	r0, [pc, #36]	; 10f68 <__assert_fail@plt+0xcc>
   10f40:	sub	r1, r1, r0
   10f44:	asr	r1, r1, #2
   10f48:	add	r1, r1, r1, lsr #31
   10f4c:	asrs	r1, r1, #1
   10f50:	bxeq	lr
   10f54:	ldr	r3, [pc, #16]	; 10f6c <__assert_fail@plt+0xd0>
   10f58:	cmp	r3, #0
   10f5c:	bxeq	lr
   10f60:	bx	r3
   10f64:	andeq	r6, r2, ip, lsr #2
   10f68:	andeq	r6, r2, ip, lsr #2
   10f6c:	andeq	r0, r0, r0
   10f70:	push	{r4, lr}
   10f74:	ldr	r4, [pc, #24]	; 10f94 <__assert_fail@plt+0xf8>
   10f78:	ldrb	r3, [r4]
   10f7c:	cmp	r3, #0
   10f80:	popne	{r4, pc}
   10f84:	bl	10f08 <__assert_fail@plt+0x6c>
   10f88:	mov	r3, #1
   10f8c:	strb	r3, [r4]
   10f90:	pop	{r4, pc}
   10f94:	andeq	r6, r2, r4, asr r1
   10f98:	ldr	r0, [pc, #40]	; 10fc8 <__assert_fail@plt+0x12c>
   10f9c:	ldr	r3, [r0]
   10fa0:	cmp	r3, #0
   10fa4:	bne	10fac <__assert_fail@plt+0x110>
   10fa8:	b	10f38 <__assert_fail@plt+0x9c>
   10fac:	ldr	r3, [pc, #24]	; 10fcc <__assert_fail@plt+0x130>
   10fb0:	cmp	r3, #0
   10fb4:	beq	10fa8 <__assert_fail@plt+0x10c>
   10fb8:	push	{r4, lr}
   10fbc:	blx	r3
   10fc0:	pop	{r4, lr}
   10fc4:	b	10f38 <__assert_fail@plt+0x9c>
   10fc8:	andeq	r5, r2, r4, lsl pc
   10fcc:	andeq	r0, r0, r0
   10fd0:	ldr	r2, [pc, #16]	; 10fe8 <__assert_fail@plt+0x14c>
   10fd4:	ldr	r3, [r2]
   10fd8:	add	r3, r3, #1
   10fdc:	str	r3, [r2]
   10fe0:	mov	r0, #0
   10fe4:	bx	lr
   10fe8:	andeq	r6, r2, r8, asr r1
   10fec:	ldr	r3, [r0, #16]
   10ff0:	cmp	r3, #0
   10ff4:	bne	11028 <__assert_fail@plt+0x18c>
   10ff8:	ldrb	r3, [r0, #13]
   10ffc:	cmp	r3, #0
   11000:	bne	11028 <__assert_fail@plt+0x18c>
   11004:	ldr	r3, [pc, #36]	; 11030 <__assert_fail@plt+0x194>
   11008:	ldr	r3, [r3, #4]
   1100c:	cmp	r3, #0
   11010:	ldr	r3, [pc, #24]	; 11030 <__assert_fail@plt+0x194>
   11014:	streq	r0, [r3, #4]
   11018:	ldrne	r3, [r3, #8]
   1101c:	strne	r0, [r3, #20]
   11020:	ldr	r3, [pc, #8]	; 11030 <__assert_fail@plt+0x194>
   11024:	str	r0, [r3, #8]
   11028:	mov	r0, #0
   1102c:	bx	lr
   11030:	andeq	r6, r2, r8, asr r1
   11034:	push	{r4, r5, r6, lr}
   11038:	mov	r4, r0
   1103c:	mov	r5, r1
   11040:	ldr	r0, [r0, #4]
   11044:	cmp	r0, #0
   11048:	beq	11084 <__assert_fail@plt+0x1e8>
   1104c:	bl	11034 <__assert_fail@plt+0x198>
   11050:	cmp	r0, #0
   11054:	popne	{r4, r5, r6, pc}
   11058:	mov	r0, r4
   1105c:	blx	r5
   11060:	cmp	r0, #0
   11064:	popne	{r4, r5, r6, pc}
   11068:	ldr	r3, [r4, #8]
   1106c:	cmp	r3, #0
   11070:	popeq	{r4, r5, r6, pc}
   11074:	mov	r1, r5
   11078:	mov	r0, r3
   1107c:	bl	11034 <__assert_fail@plt+0x198>
   11080:	pop	{r4, r5, r6, pc}
   11084:	ldr	r3, [r4, #8]
   11088:	cmp	r3, #0
   1108c:	bne	11058 <__assert_fail@plt+0x1bc>
   11090:	mov	r0, r4
   11094:	blx	r1
   11098:	pop	{r4, r5, r6, pc}
   1109c:	push	{lr}		; (str lr, [sp, #-4]!)
   110a0:	sub	sp, sp, #60	; 0x3c
   110a4:	subs	r6, r0, #0
   110a8:	beq	110e4 <__assert_fail@plt+0x248>
   110ac:	ldr	r3, [pc, #704]	; 11374 <__assert_fail@plt+0x4d8>
   110b0:	ldr	r4, [r3]
   110b4:	mov	r2, #5
   110b8:	ldr	r1, [pc, #696]	; 11378 <__assert_fail@plt+0x4dc>
   110bc:	mov	r0, #0
   110c0:	bl	10cd4 <dcgettext@plt>
   110c4:	ldr	r3, [pc, #688]	; 1137c <__assert_fail@plt+0x4e0>
   110c8:	ldr	r3, [r3]
   110cc:	mov	r2, r0
   110d0:	mov	r1, #1
   110d4:	mov	r0, r4
   110d8:	bl	10e18 <__fprintf_chk@plt>
   110dc:	mov	r0, r6
   110e0:	bl	10dc4 <exit@plt>
   110e4:	mov	r2, #5
   110e8:	ldr	r1, [pc, #656]	; 11380 <__assert_fail@plt+0x4e4>
   110ec:	mov	r0, #0
   110f0:	bl	10cd4 <dcgettext@plt>
   110f4:	ldr	r3, [pc, #640]	; 1137c <__assert_fail@plt+0x4e0>
   110f8:	ldr	r2, [r3]
   110fc:	mov	r1, r0
   11100:	mov	r0, #1
   11104:	bl	10e00 <__printf_chk@plt>
   11108:	mov	r2, #5
   1110c:	ldr	r1, [pc, #624]	; 11384 <__assert_fail@plt+0x4e8>
   11110:	mov	r0, #0
   11114:	bl	10cd4 <dcgettext@plt>
   11118:	ldr	r4, [pc, #616]	; 11388 <__assert_fail@plt+0x4ec>
   1111c:	ldr	r1, [r4]
   11120:	bl	10c50 <fputs_unlocked@plt>
   11124:	mov	r2, #5
   11128:	ldr	r1, [pc, #604]	; 1138c <__assert_fail@plt+0x4f0>
   1112c:	mov	r0, #0
   11130:	bl	10cd4 <dcgettext@plt>
   11134:	ldr	r1, [r4]
   11138:	bl	10c50 <fputs_unlocked@plt>
   1113c:	mov	r2, #5
   11140:	ldr	r1, [pc, #584]	; 11390 <__assert_fail@plt+0x4f4>
   11144:	mov	r0, #0
   11148:	bl	10cd4 <dcgettext@plt>
   1114c:	ldr	r1, [r4]
   11150:	bl	10c50 <fputs_unlocked@plt>
   11154:	mov	r2, #5
   11158:	ldr	r1, [pc, #564]	; 11394 <__assert_fail@plt+0x4f8>
   1115c:	mov	r0, #0
   11160:	bl	10cd4 <dcgettext@plt>
   11164:	ldr	r1, [r4]
   11168:	bl	10c50 <fputs_unlocked@plt>
   1116c:	mov	ip, sp
   11170:	ldr	lr, [pc, #544]	; 11398 <__assert_fail@plt+0x4fc>
   11174:	ldm	lr!, {r0, r1, r2, r3}
   11178:	stmia	ip!, {r0, r1, r2, r3}
   1117c:	ldm	lr!, {r0, r1, r2, r3}
   11180:	stmia	ip!, {r0, r1, r2, r3}
   11184:	ldm	lr!, {r0, r1, r2, r3}
   11188:	stmia	ip!, {r0, r1, r2, r3}
   1118c:	ldm	lr, {r0, r1}
   11190:	stm	ip, {r0, r1}
   11194:	ldr	r1, [sp]
   11198:	cmp	r1, #0
   1119c:	moveq	r4, sp
   111a0:	beq	111c8 <__assert_fail@plt+0x32c>
   111a4:	mov	r4, sp
   111a8:	ldr	r5, [pc, #492]	; 1139c <__assert_fail@plt+0x500>
   111ac:	mov	r0, r5
   111b0:	bl	10c68 <strcmp@plt>
   111b4:	cmp	r0, #0
   111b8:	beq	111c8 <__assert_fail@plt+0x32c>
   111bc:	ldr	r1, [r4, #8]!
   111c0:	cmp	r1, #0
   111c4:	bne	111ac <__assert_fail@plt+0x310>
   111c8:	ldr	r4, [r4, #4]
   111cc:	cmp	r4, #0
   111d0:	beq	112e4 <__assert_fail@plt+0x448>
   111d4:	mov	r2, #5
   111d8:	ldr	r1, [pc, #448]	; 113a0 <__assert_fail@plt+0x504>
   111dc:	mov	r0, #0
   111e0:	bl	10cd4 <dcgettext@plt>
   111e4:	ldr	r3, [pc, #440]	; 113a4 <__assert_fail@plt+0x508>
   111e8:	ldr	r2, [pc, #440]	; 113a8 <__assert_fail@plt+0x50c>
   111ec:	mov	r1, r0
   111f0:	mov	r0, #1
   111f4:	bl	10e00 <__printf_chk@plt>
   111f8:	mov	r1, #0
   111fc:	mov	r0, #5
   11200:	bl	10e48 <setlocale@plt>
   11204:	cmp	r0, #0
   11208:	beq	11220 <__assert_fail@plt+0x384>
   1120c:	mov	r2, #3
   11210:	ldr	r1, [pc, #404]	; 113ac <__assert_fail@plt+0x510>
   11214:	bl	10e78 <strncmp@plt>
   11218:	cmp	r0, #0
   1121c:	bne	11280 <__assert_fail@plt+0x3e4>
   11220:	mov	r2, #5
   11224:	ldr	r1, [pc, #388]	; 113b0 <__assert_fail@plt+0x514>
   11228:	mov	r0, #0
   1122c:	bl	10cd4 <dcgettext@plt>
   11230:	ldr	r5, [pc, #356]	; 1139c <__assert_fail@plt+0x500>
   11234:	mov	r3, r5
   11238:	ldr	r2, [pc, #356]	; 113a4 <__assert_fail@plt+0x508>
   1123c:	mov	r1, r0
   11240:	mov	r0, #1
   11244:	bl	10e00 <__printf_chk@plt>
   11248:	mov	r2, #5
   1124c:	ldr	r1, [pc, #352]	; 113b4 <__assert_fail@plt+0x518>
   11250:	mov	r0, #0
   11254:	bl	10cd4 <dcgettext@plt>
   11258:	mov	r1, r0
   1125c:	ldr	r2, [pc, #340]	; 113b8 <__assert_fail@plt+0x51c>
   11260:	ldr	r3, [pc, #340]	; 113bc <__assert_fail@plt+0x520>
   11264:	cmp	r4, r5
   11268:	movne	r3, r2
   1126c:	mov	r2, r4
   11270:	mov	r0, #1
   11274:	bl	10e00 <__printf_chk@plt>
   11278:	b	110dc <__assert_fail@plt+0x240>
   1127c:	ldr	r4, [pc, #280]	; 1139c <__assert_fail@plt+0x500>
   11280:	mov	r2, #5
   11284:	ldr	r1, [pc, #308]	; 113c0 <__assert_fail@plt+0x524>
   11288:	mov	r0, #0
   1128c:	bl	10cd4 <dcgettext@plt>
   11290:	ldr	r3, [pc, #240]	; 11388 <__assert_fail@plt+0x4ec>
   11294:	ldr	r1, [r3]
   11298:	bl	10c50 <fputs_unlocked@plt>
   1129c:	b	11220 <__assert_fail@plt+0x384>
   112a0:	mov	r2, #5
   112a4:	ldr	r1, [pc, #260]	; 113b0 <__assert_fail@plt+0x514>
   112a8:	mov	r0, #0
   112ac:	bl	10cd4 <dcgettext@plt>
   112b0:	ldr	r4, [pc, #228]	; 1139c <__assert_fail@plt+0x500>
   112b4:	mov	r3, r4
   112b8:	ldr	r2, [pc, #228]	; 113a4 <__assert_fail@plt+0x508>
   112bc:	mov	r1, r0
   112c0:	mov	r0, #1
   112c4:	bl	10e00 <__printf_chk@plt>
   112c8:	mov	r2, #5
   112cc:	ldr	r1, [pc, #224]	; 113b4 <__assert_fail@plt+0x518>
   112d0:	mov	r0, #0
   112d4:	bl	10cd4 <dcgettext@plt>
   112d8:	mov	r1, r0
   112dc:	ldr	r3, [pc, #216]	; 113bc <__assert_fail@plt+0x520>
   112e0:	b	1126c <__assert_fail@plt+0x3d0>
   112e4:	mov	r2, #5
   112e8:	ldr	r1, [pc, #176]	; 113a0 <__assert_fail@plt+0x504>
   112ec:	mov	r0, #0
   112f0:	bl	10cd4 <dcgettext@plt>
   112f4:	ldr	r3, [pc, #168]	; 113a4 <__assert_fail@plt+0x508>
   112f8:	ldr	r2, [pc, #168]	; 113a8 <__assert_fail@plt+0x50c>
   112fc:	mov	r1, r0
   11300:	mov	r0, #1
   11304:	bl	10e00 <__printf_chk@plt>
   11308:	mov	r1, #0
   1130c:	mov	r0, #5
   11310:	bl	10e48 <setlocale@plt>
   11314:	cmp	r0, #0
   11318:	beq	112a0 <__assert_fail@plt+0x404>
   1131c:	mov	r2, #3
   11320:	ldr	r1, [pc, #132]	; 113ac <__assert_fail@plt+0x510>
   11324:	bl	10e78 <strncmp@plt>
   11328:	cmp	r0, #0
   1132c:	bne	1127c <__assert_fail@plt+0x3e0>
   11330:	mov	r2, #5
   11334:	ldr	r1, [pc, #116]	; 113b0 <__assert_fail@plt+0x514>
   11338:	mov	r0, #0
   1133c:	bl	10cd4 <dcgettext@plt>
   11340:	ldr	r4, [pc, #84]	; 1139c <__assert_fail@plt+0x500>
   11344:	mov	r3, r4
   11348:	ldr	r2, [pc, #84]	; 113a4 <__assert_fail@plt+0x508>
   1134c:	mov	r1, r0
   11350:	mov	r0, #1
   11354:	bl	10e00 <__printf_chk@plt>
   11358:	mov	r2, #5
   1135c:	ldr	r1, [pc, #80]	; 113b4 <__assert_fail@plt+0x518>
   11360:	mov	r0, #0
   11364:	bl	10cd4 <dcgettext@plt>
   11368:	mov	r1, r0
   1136c:	ldr	r3, [pc, #72]	; 113bc <__assert_fail@plt+0x520>
   11370:	b	1126c <__assert_fail@plt+0x3d0>
   11374:	andeq	r6, r2, r0, asr #2
   11378:	andeq	r5, r1, r8, lsr r6
   1137c:	andeq	r6, r2, r0, ror r1
   11380:	andeq	r5, r1, r0, ror #12
   11384:	andeq	r5, r1, r4, asr #13
   11388:	andeq	r6, r2, ip, asr #2
   1138c:	andeq	r5, r1, r0, ror #14
   11390:	strdeq	r5, [r1], -ip
   11394:	andeq	r5, r1, ip, lsr #14
   11398:	andeq	r5, r1, r4, ror #11
   1139c:	andeq	r5, r1, r0, lsr r6
   113a0:	andeq	r5, r1, r4, ror #14
   113a4:	andeq	r5, r1, ip, ror r7
   113a8:	andeq	r5, r1, r4, lsr #15
   113ac:			; <UNDEFINED> instruction: 0x000157b4
   113b0:	andeq	r5, r1, r0, lsl #16
   113b4:	andeq	r5, r1, ip, lsl r8
   113b8:	andeq	r5, r1, r8, lsr #14
   113bc:	andeq	r5, r1, r4, lsl #19
   113c0:			; <UNDEFINED> instruction: 0x000157b8
   113c4:	ldr	r3, [r0, #16]
   113c8:	cmp	r3, #0
   113cc:	beq	11508 <__assert_fail@plt+0x66c>
   113d0:	ldr	r3, [pc, #320]	; 11518 <__assert_fail@plt+0x67c>
   113d4:	ldr	r2, [r3, #12]
   113d8:	cmp	r2, #0
   113dc:	beq	11420 <__assert_fail@plt+0x584>
   113e0:	ldr	r1, [r0, #24]
   113e4:	cmp	r1, #0
   113e8:	beq	11510 <__assert_fail@plt+0x674>
   113ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   113f0:	ldr	r3, [r1]
   113f4:	cmp	r2, r3
   113f8:	addeq	r4, r0, #24
   113fc:	beq	11430 <__assert_fail@plt+0x594>
   11400:	ldr	r3, [r1, #4]
   11404:	cmp	r3, #0
   11408:	beq	11500 <__assert_fail@plt+0x664>
   1140c:	ldr	ip, [r3]
   11410:	cmp	r2, ip
   11414:	beq	1142c <__assert_fail@plt+0x590>
   11418:	mov	r1, r3
   1141c:	b	11400 <__assert_fail@plt+0x564>
   11420:	str	r0, [r3, #12]
   11424:	mov	r0, #0
   11428:	bx	lr
   1142c:	add	r4, r1, #4
   11430:	ldr	r3, [r0, #20]
   11434:	cmp	r3, #0
   11438:	beq	114ec <__assert_fail@plt+0x650>
   1143c:	mov	r6, r0
   11440:	ldr	r9, [pc, #212]	; 1151c <__assert_fail@plt+0x680>
   11444:	mov	r8, #0
   11448:	ldr	r7, [pc, #200]	; 11518 <__assert_fail@plt+0x67c>
   1144c:	ldr	r5, [r2, #20]
   11450:	ldr	r3, [r2]
   11454:	mov	r2, r9
   11458:	mov	r1, r8
   1145c:	mov	r0, r8
   11460:	bl	10d4c <error@plt>
   11464:	ldr	r3, [r7, #12]
   11468:	cmp	r6, r3
   1146c:	beq	1148c <__assert_fail@plt+0x5f0>
   11470:	str	r8, [r3, #20]
   11474:	str	r5, [r7, #12]
   11478:	mov	r2, r5
   1147c:	cmp	r5, #0
   11480:	bne	1144c <__assert_fail@plt+0x5b0>
   11484:	mov	r0, #1
   11488:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1148c:	ldr	r0, [r4]
   11490:	ldr	r2, [r0]
   11494:	ldr	r3, [r2, #16]
   11498:	sub	r3, r3, #1
   1149c:	str	r3, [r2, #16]
   114a0:	ldr	r3, [r0, #4]
   114a4:	str	r3, [r4]
   114a8:	bl	11f8c <__assert_fail@plt+0x10f0>
   114ac:	ldr	r3, [pc, #100]	; 11518 <__assert_fail@plt+0x67c>
   114b0:	ldr	r3, [r3, #12]
   114b4:	cmp	r3, #0
   114b8:	movne	r1, #0
   114bc:	beq	114e4 <__assert_fail@plt+0x648>
   114c0:	ldr	r2, [r3, #20]
   114c4:	str	r1, [r3, #20]
   114c8:	mov	r3, r2
   114cc:	cmp	r2, #0
   114d0:	bne	114c0 <__assert_fail@plt+0x624>
   114d4:	ldr	r3, [pc, #60]	; 11518 <__assert_fail@plt+0x67c>
   114d8:	str	r2, [r3, #12]
   114dc:	mov	r0, #1
   114e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   114e4:	mov	r0, #1
   114e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   114ec:	str	r2, [r0, #20]
   114f0:	ldr	r3, [pc, #32]	; 11518 <__assert_fail@plt+0x67c>
   114f4:	str	r0, [r3, #12]
   114f8:	mov	r0, #0
   114fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11500:	mov	r0, #0
   11504:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11508:	mov	r0, #0
   1150c:	bx	lr
   11510:	mov	r0, #0
   11514:	bx	lr
   11518:	andeq	r6, r2, r8, asr r1
   1151c:	andeq	r5, r1, r8, lsl #20
   11520:	push	{r7, fp, lr}
   11524:	sub	sp, sp, #60	; 0x3c
   11528:	mov	r5, r0
   1152c:	mov	r4, r1
   11530:	ldr	r0, [r1]
   11534:	bl	123e4 <__assert_fail@plt+0x1548>
   11538:	ldr	r1, [pc, #1876]	; 11c94 <__assert_fail@plt+0xdf8>
   1153c:	mov	r0, #6
   11540:	bl	10e48 <setlocale@plt>
   11544:	ldr	r6, [pc, #1868]	; 11c98 <__assert_fail@plt+0xdfc>
   11548:	ldr	r1, [pc, #1868]	; 11c9c <__assert_fail@plt+0xe00>
   1154c:	mov	r0, r6
   11550:	bl	10e6c <bindtextdomain@plt>
   11554:	mov	r0, r6
   11558:	bl	10cf8 <textdomain@plt>
   1155c:	ldr	r0, [pc, #1852]	; 11ca0 <__assert_fail@plt+0xe04>
   11560:	bl	155c0 <__assert_fail@plt+0x4724>
   11564:	mov	r3, #0
   11568:	str	r3, [sp, #16]
   1156c:	ldr	r3, [pc, #1840]	; 11ca4 <__assert_fail@plt+0xe08>
   11570:	str	r3, [sp, #12]
   11574:	ldr	r3, [pc, #1836]	; 11ca8 <__assert_fail@plt+0xe0c>
   11578:	str	r3, [sp, #8]
   1157c:	mov	r3, #1
   11580:	str	r3, [sp, #4]
   11584:	ldr	r3, [pc, #1824]	; 11cac <__assert_fail@plt+0xe10>
   11588:	ldr	r3, [r3]
   1158c:	str	r3, [sp]
   11590:	ldr	r3, [pc, #1816]	; 11cb0 <__assert_fail@plt+0xe14>
   11594:	ldr	r2, [pc, #1816]	; 11cb4 <__assert_fail@plt+0xe18>
   11598:	mov	r1, r4
   1159c:	mov	r0, r5
   115a0:	bl	12314 <__assert_fail@plt+0x1478>
   115a4:	ldr	r3, [pc, #1804]	; 11cb8 <__assert_fail@plt+0xe1c>
   115a8:	ldr	r3, [r3]
   115ac:	sub	r2, r5, r3
   115b0:	cmp	r2, #1
   115b4:	ble	115fc <__assert_fail@plt+0x760>
   115b8:	mov	r2, #5
   115bc:	ldr	r1, [pc, #1784]	; 11cbc <__assert_fail@plt+0xe20>
   115c0:	mov	r0, #0
   115c4:	bl	10cd4 <dcgettext@plt>
   115c8:	mov	r5, r0
   115cc:	ldr	r3, [pc, #1764]	; 11cb8 <__assert_fail@plt+0xe1c>
   115d0:	ldr	r3, [r3]
   115d4:	add	r3, r3, #1
   115d8:	ldr	r0, [r4, r3, lsl #2]
   115dc:	bl	13f34 <__assert_fail@plt+0x3098>
   115e0:	mov	r3, r0
   115e4:	mov	r2, r5
   115e8:	mov	r1, #0
   115ec:	mov	r0, r1
   115f0:	bl	10d4c <error@plt>
   115f4:	mov	r0, #1
   115f8:	bl	1109c <__assert_fail@plt+0x200>
   115fc:	cmp	r5, r3
   11600:	beq	11bac <__assert_fail@plt+0xd10>
   11604:	ldr	r3, [r4, r3, lsl #2]
   11608:	mov	r4, r3
   1160c:	str	r3, [sp, #40]	; 0x28
   11610:	ldr	r1, [pc, #1704]	; 11cc0 <__assert_fail@plt+0xe24>
   11614:	mov	r0, r3
   11618:	bl	10c68 <strcmp@plt>
   1161c:	mov	r5, r0
   11620:	str	r0, [sp, #44]	; 0x2c
   11624:	mov	r0, #28
   11628:	bl	14cd4 <__assert_fail@plt+0x3e38>
   1162c:	str	r0, [sp, #24]
   11630:	cmp	r5, #0
   11634:	beq	11654 <__assert_fail@plt+0x7b8>
   11638:	ldr	r3, [pc, #1668]	; 11cc4 <__assert_fail@plt+0xe28>
   1163c:	ldr	r2, [r3]
   11640:	ldr	r1, [pc, #1664]	; 11cc8 <__assert_fail@plt+0xe2c>
   11644:	mov	r0, r4
   11648:	bl	12034 <__assert_fail@plt+0x1198>
   1164c:	cmp	r0, #0
   11650:	beq	1167c <__assert_fail@plt+0x7e0>
   11654:	mov	r1, #2
   11658:	ldr	r3, [pc, #1636]	; 11cc4 <__assert_fail@plt+0xe28>
   1165c:	ldr	r0, [r3]
   11660:	bl	11e4c <__assert_fail@plt+0xfb0>
   11664:	add	r0, sp, #48	; 0x30
   11668:	bl	13f48 <__assert_fail@plt+0x30ac>
   1166c:	mov	r3, #0
   11670:	str	r3, [sp, #28]
   11674:	mov	fp, #1
   11678:	b	11914 <__assert_fail@plt+0xa78>
   1167c:	bl	10ddc <__errno_location@plt>
   11680:	ldr	r4, [r0]
   11684:	ldr	r2, [sp, #40]	; 0x28
   11688:	mov	r1, #3
   1168c:	mov	r0, #0
   11690:	bl	13dcc <__assert_fail@plt+0x2f30>
   11694:	mov	r3, r0
   11698:	ldr	r2, [pc, #1580]	; 11ccc <__assert_fail@plt+0xe30>
   1169c:	mov	r1, r4
   116a0:	mov	r0, #1
   116a4:	bl	10d4c <error@plt>
   116a8:	ldr	r3, [pc, #1568]	; 11cd0 <__assert_fail@plt+0xe34>
   116ac:	ldr	r2, [pc, #1568]	; 11cd4 <__assert_fail@plt+0xe38>
   116b0:	ldr	r1, [pc, #1568]	; 11cd8 <__assert_fail@plt+0xe3c>
   116b4:	ldr	r0, [pc, #1568]	; 11cdc <__assert_fail@plt+0xe40>
   116b8:	bl	10e9c <__assert_fail@plt>
   116bc:	ldr	r3, [pc, #1564]	; 11ce0 <__assert_fail@plt+0xe44>
   116c0:	mov	r2, #126	; 0x7e
   116c4:	ldr	r1, [pc, #1548]	; 11cd8 <__assert_fail@plt+0xe3c>
   116c8:	ldr	r0, [pc, #1556]	; 11ce4 <__assert_fail@plt+0xe48>
   116cc:	bl	10e9c <__assert_fail@plt>
   116d0:	mov	r0, #28
   116d4:	bl	14cd4 <__assert_fail@plt+0x3e38>
   116d8:	mov	r4, r0
   116dc:	cmp	r5, #0
   116e0:	beq	116f0 <__assert_fail@plt+0x854>
   116e4:	mov	r0, r5
   116e8:	bl	14d7c <__assert_fail@plt+0x3ee0>
   116ec:	str	r0, [r4]
   116f0:	ldr	r3, [sp, #24]
   116f4:	str	r4, [r3, #8]
   116f8:	b	11904 <__assert_fail@plt+0xa68>
   116fc:	ldr	r3, [pc, #1500]	; 11ce0 <__assert_fail@plt+0xe44>
   11700:	mov	r2, #140	; 0x8c
   11704:	ldr	r1, [pc, #1484]	; 11cd8 <__assert_fail@plt+0xe3c>
   11708:	ldr	r0, [pc, #1496]	; 11ce8 <__assert_fail@plt+0xe4c>
   1170c:	bl	10e9c <__assert_fail@plt>
   11710:	mov	sl, r0
   11714:	mov	r0, #28
   11718:	bl	14cd4 <__assert_fail@plt+0x3e38>
   1171c:	mov	r9, r0
   11720:	cmp	r5, #0
   11724:	beq	11734 <__assert_fail@plt+0x898>
   11728:	mov	r0, r5
   1172c:	bl	14d7c <__assert_fail@plt+0x3ee0>
   11730:	str	r0, [r9]
   11734:	cmp	sl, #0
   11738:	strlt	r9, [r4, #4]
   1173c:	strge	r9, [r4, #8]
   11740:	cmp	r6, #0
   11744:	moveq	r3, #0
   11748:	andne	r3, r8, #1
   1174c:	cmp	r3, #0
   11750:	beq	11818 <__assert_fail@plt+0x97c>
   11754:	ldr	r1, [r6]
   11758:	cmp	r1, #0
   1175c:	beq	11818 <__assert_fail@plt+0x97c>
   11760:	mov	r0, r5
   11764:	bl	10c68 <strcmp@plt>
   11768:	cmp	r0, #0
   1176c:	beq	11818 <__assert_fail@plt+0x97c>
   11770:	cmp	r0, #0
   11774:	blt	1182c <__assert_fail@plt+0x990>
   11778:	ldr	r3, [r6, #8]
   1177c:	str	r3, [sp, #32]
   11780:	str	fp, [sp, #36]	; 0x24
   11784:	ldr	r2, [sp, #32]
   11788:	cmp	r2, r9
   1178c:	beq	11840 <__assert_fail@plt+0x9a4>
   11790:	cmp	r2, #0
   11794:	moveq	r3, #0
   11798:	andne	r3, r8, #1
   1179c:	cmp	r3, #0
   117a0:	beq	11804 <__assert_fail@plt+0x968>
   117a4:	ldr	r1, [r2]
   117a8:	cmp	r1, #0
   117ac:	beq	11804 <__assert_fail@plt+0x968>
   117b0:	ldr	r4, [sp, #32]
   117b4:	mvn	sl, #0
   117b8:	mov	r0, r5
   117bc:	bl	10c68 <strcmp@plt>
   117c0:	cmp	r0, #0
   117c4:	beq	11804 <__assert_fail@plt+0x968>
   117c8:	cmp	r0, #0
   117cc:	strblt	sl, [r4, #12]
   117d0:	ldrlt	r4, [r4, #4]
   117d4:	strbge	fp, [r4, #12]
   117d8:	ldrge	r4, [r4, #8]
   117dc:	cmp	r9, r4
   117e0:	beq	11840 <__assert_fail@plt+0x9a4>
   117e4:	cmp	r4, #0
   117e8:	moveq	r3, #0
   117ec:	andne	r3, r8, #1
   117f0:	cmp	r3, #0
   117f4:	beq	11804 <__assert_fail@plt+0x968>
   117f8:	ldr	r1, [r4]
   117fc:	cmp	r1, #0
   11800:	bne	117b8 <__assert_fail@plt+0x91c>
   11804:	ldr	r3, [pc, #1236]	; 11ce0 <__assert_fail@plt+0xe44>
   11808:	mov	r2, #177	; 0xb1
   1180c:	ldr	r1, [pc, #1220]	; 11cd8 <__assert_fail@plt+0xe3c>
   11810:	ldr	r0, [pc, #1236]	; 11cec <__assert_fail@plt+0xe50>
   11814:	bl	10e9c <__assert_fail@plt>
   11818:	ldr	r3, [pc, #1216]	; 11ce0 <__assert_fail@plt+0xe44>
   1181c:	mov	r2, #163	; 0xa3
   11820:	ldr	r1, [pc, #1200]	; 11cd8 <__assert_fail@plt+0xe3c>
   11824:	ldr	r0, [pc, #1220]	; 11cf0 <__assert_fail@plt+0xe54>
   11828:	bl	10e9c <__assert_fail@plt>
   1182c:	ldr	r3, [r6, #4]
   11830:	str	r3, [sp, #32]
   11834:	mvn	r3, #0
   11838:	str	r3, [sp, #36]	; 0x24
   1183c:	b	11784 <__assert_fail@plt+0x8e8>
   11840:	ldrsb	r3, [r6, #12]
   11844:	cmp	r3, #0
   11848:	beq	118f4 <__assert_fail@plt+0xa58>
   1184c:	ldr	r2, [sp, #36]	; 0x24
   11850:	rsb	r2, r2, #0
   11854:	cmp	r3, r2
   11858:	beq	118f4 <__assert_fail@plt+0xa58>
   1185c:	ldr	r3, [sp, #32]
   11860:	ldrsb	r3, [r3, #12]
   11864:	ldr	r1, [sp, #36]	; 0x24
   11868:	cmp	r3, r1
   1186c:	beq	119c0 <__assert_fail@plt+0xb24>
   11870:	ldr	r3, [sp, #36]	; 0x24
   11874:	cmp	r3, #0
   11878:	blt	11a04 <__assert_fail@plt+0xb68>
   1187c:	ldr	r0, [sp, #32]
   11880:	ldr	r3, [r0, #4]
   11884:	ldr	r1, [r3, #8]
   11888:	str	r1, [r0, #4]
   1188c:	str	r0, [r3, #8]
   11890:	ldr	r1, [r3, #4]
   11894:	str	r1, [r6, #8]
   11898:	str	r6, [r3, #4]
   1189c:	mov	r1, #0
   118a0:	strb	r1, [r6, #12]
   118a4:	ldr	r0, [sp, #32]
   118a8:	strb	r1, [r0, #12]
   118ac:	ldrsb	r1, [r3, #12]
   118b0:	ldr	r0, [sp, #36]	; 0x24
   118b4:	cmp	r1, r0
   118b8:	rsbeq	r1, r1, #0
   118bc:	strbeq	r1, [r6, #12]
   118c0:	beq	118d4 <__assert_fail@plt+0xa38>
   118c4:	cmp	r2, r1
   118c8:	ldreq	r2, [sp, #32]
   118cc:	ldrbeq	r1, [sp, #36]	; 0x24
   118d0:	strbeq	r1, [r2, #12]
   118d4:	mov	r2, #0
   118d8:	strb	r2, [r3, #12]
   118dc:	ldr	r2, [r7, #8]
   118e0:	cmp	r6, r2
   118e4:	streq	r3, [r7, #8]
   118e8:	strne	r3, [r7, #4]
   118ec:	mov	r4, r9
   118f0:	b	11904 <__assert_fail@plt+0xa68>
   118f4:	ldr	r2, [sp, #36]	; 0x24
   118f8:	add	r3, r3, r2
   118fc:	strb	r3, [r6, #12]
   11900:	mov	r4, r9
   11904:	ldr	r3, [sp, #28]
   11908:	cmp	r3, #0
   1190c:	bne	11a28 <__assert_fail@plt+0xb8c>
   11910:	str	r4, [sp, #28]
   11914:	add	r3, sp, #48	; 0x30
   11918:	mov	r2, #3
   1191c:	ldr	r1, [pc, #976]	; 11cf4 <__assert_fail@plt+0xe58>
   11920:	ldr	r0, [pc, #924]	; 11cc4 <__assert_fail@plt+0xe28>
   11924:	ldr	r0, [r0]
   11928:	bl	13f58 <__assert_fail@plt+0x30bc>
   1192c:	cmn	r0, #1
   11930:	beq	11a68 <__assert_fail@plt+0xbcc>
   11934:	cmp	r0, #0
   11938:	beq	116a8 <__assert_fail@plt+0x80c>
   1193c:	ldr	r5, [sp, #52]	; 0x34
   11940:	ldr	r3, [sp, #24]
   11944:	cmp	r3, #0
   11948:	beq	116bc <__assert_fail@plt+0x820>
   1194c:	ldr	r3, [sp, #24]
   11950:	ldr	r4, [r3, #8]
   11954:	cmp	r4, #0
   11958:	ldrne	r7, [sp, #24]
   1195c:	movne	r6, r4
   11960:	beq	116d0 <__assert_fail@plt+0x834>
   11964:	adds	r8, r5, #0
   11968:	movne	r8, #1
   1196c:	cmp	r4, #0
   11970:	cmpne	r5, #0
   11974:	beq	116fc <__assert_fail@plt+0x860>
   11978:	ldr	r1, [r4]
   1197c:	cmp	r1, #0
   11980:	beq	116fc <__assert_fail@plt+0x860>
   11984:	mov	r0, r5
   11988:	bl	10c68 <strcmp@plt>
   1198c:	cmp	r0, #0
   11990:	beq	11904 <__assert_fail@plt+0xa68>
   11994:	ldrlt	r3, [r4, #4]
   11998:	ldrge	r3, [r4, #8]
   1199c:	cmp	r3, #0
   119a0:	beq	11710 <__assert_fail@plt+0x874>
   119a4:	ldrsb	r2, [r3, #12]
   119a8:	cmp	r2, #0
   119ac:	movne	r7, r4
   119b0:	cmp	r2, #0
   119b4:	movne	r6, r3
   119b8:	mov	r4, r3
   119bc:	b	11964 <__assert_fail@plt+0xac8>
   119c0:	cmp	r1, #0
   119c4:	ldr	r2, [sp, #32]
   119c8:	mov	r3, r2
   119cc:	ldrlt	r3, [r2, #8]
   119d0:	strlt	r3, [r6, #4]
   119d4:	movlt	r3, r2
   119d8:	strlt	r6, [r3, #8]
   119dc:	ldrge	r3, [r3, #4]
   119e0:	strge	r3, [r6, #8]
   119e4:	movge	r3, r2
   119e8:	strge	r6, [r3, #4]
   119ec:	mov	r3, #0
   119f0:	ldr	r2, [sp, #32]
   119f4:	strb	r3, [r2, #12]
   119f8:	strb	r3, [r6, #12]
   119fc:	mov	r3, r2
   11a00:	b	118dc <__assert_fail@plt+0xa40>
   11a04:	ldr	r0, [sp, #32]
   11a08:	ldr	r3, [r0, #8]
   11a0c:	ldr	r1, [r3, #4]
   11a10:	str	r1, [r0, #8]
   11a14:	str	r0, [r3, #4]
   11a18:	ldr	r1, [r3, #8]
   11a1c:	str	r1, [r6, #4]
   11a20:	str	r6, [r3, #8]
   11a24:	b	1189c <__assert_fail@plt+0xa00>
   11a28:	ldr	r1, [r4]
   11a2c:	ldr	r0, [r3]
   11a30:	bl	10c68 <strcmp@plt>
   11a34:	cmp	r0, #0
   11a38:	beq	1166c <__assert_fail@plt+0x7d0>
   11a3c:	ldr	r3, [r4, #16]
   11a40:	add	r3, r3, #1
   11a44:	str	r3, [r4, #16]
   11a48:	mov	r0, #8
   11a4c:	bl	147f4 <__assert_fail@plt+0x3958>
   11a50:	str	r4, [r0]
   11a54:	ldr	r2, [sp, #28]
   11a58:	ldr	r3, [r2, #24]
   11a5c:	str	r3, [r0, #4]
   11a60:	str	r0, [r2, #24]
   11a64:	b	1166c <__assert_fail@plt+0x7d0>
   11a68:	ldr	r3, [sp, #28]
   11a6c:	cmp	r3, #0
   11a70:	beq	11aac <__assert_fail@plt+0xc10>
   11a74:	mov	r2, #5
   11a78:	ldr	r1, [pc, #632]	; 11cf8 <__assert_fail@plt+0xe5c>
   11a7c:	mov	r0, #0
   11a80:	bl	10cd4 <dcgettext@plt>
   11a84:	mov	r4, r0
   11a88:	ldr	r2, [sp, #40]	; 0x28
   11a8c:	mov	r1, #3
   11a90:	mov	r0, #0
   11a94:	bl	13dcc <__assert_fail@plt+0x2f30>
   11a98:	mov	r3, r0
   11a9c:	mov	r2, r4
   11aa0:	mov	r1, #0
   11aa4:	mov	r0, #1
   11aa8:	bl	10d4c <error@plt>
   11aac:	ldr	r3, [sp, #24]
   11ab0:	ldr	r8, [r3, #8]
   11ab4:	cmp	r8, #0
   11ab8:	beq	11ac8 <__assert_fail@plt+0xc2c>
   11abc:	ldr	r1, [pc, #568]	; 11cfc <__assert_fail@plt+0xe60>
   11ac0:	mov	r0, r8
   11ac4:	bl	11034 <__assert_fail@plt+0x198>
   11ac8:	mov	r9, #1
   11acc:	ldr	r6, [pc, #556]	; 11d00 <__assert_fail@plt+0xe64>
   11ad0:	ldr	sl, [pc, #556]	; 11d04 <__assert_fail@plt+0xe68>
   11ad4:	ldr	fp, [pc, #556]	; 11d08 <__assert_fail@plt+0xe6c>
   11ad8:	mov	r5, #1
   11adc:	b	11c64 <__assert_fail@plt+0xdc8>
   11ae0:	mov	r2, #5
   11ae4:	mov	r1, fp
   11ae8:	mov	r0, #0
   11aec:	bl	10cd4 <dcgettext@plt>
   11af0:	mov	r4, r0
   11af4:	ldr	r2, [sp, #40]	; 0x28
   11af8:	mov	r1, #3
   11afc:	mov	r0, #0
   11b00:	bl	13dcc <__assert_fail@plt+0x2f30>
   11b04:	mov	r3, r0
   11b08:	mov	r2, r4
   11b0c:	mov	r1, #0
   11b10:	mov	r0, r1
   11b14:	bl	10d4c <error@plt>
   11b18:	mov	r9, #0
   11b1c:	b	11b2c <__assert_fail@plt+0xc90>
   11b20:	ldr	r3, [r6, #12]
   11b24:	cmp	r3, #0
   11b28:	beq	11ad8 <__assert_fail@plt+0xc3c>
   11b2c:	cmp	r8, #0
   11b30:	beq	11b20 <__assert_fail@plt+0xc84>
   11b34:	ldr	r1, [pc, #464]	; 11d0c <__assert_fail@plt+0xe70>
   11b38:	mov	r0, r8
   11b3c:	bl	11034 <__assert_fail@plt+0x198>
   11b40:	b	11b20 <__assert_fail@plt+0xc84>
   11b44:	ldr	r3, [pc, #376]	; 11cc4 <__assert_fail@plt+0xe28>
   11b48:	ldr	r0, [r3]
   11b4c:	bl	11e80 <__assert_fail@plt+0xfe4>
   11b50:	cmp	r0, #0
   11b54:	beq	11ba4 <__assert_fail@plt+0xd08>
   11b58:	bl	10ddc <__errno_location@plt>
   11b5c:	ldr	r4, [r0]
   11b60:	ldr	r3, [sp, #44]	; 0x2c
   11b64:	cmp	r3, #0
   11b68:	bne	11b90 <__assert_fail@plt+0xcf4>
   11b6c:	mov	r2, #5
   11b70:	ldr	r1, [pc, #408]	; 11d10 <__assert_fail@plt+0xe74>
   11b74:	mov	r0, #0
   11b78:	bl	10cd4 <dcgettext@plt>
   11b7c:	mov	r3, r0
   11b80:	ldr	r2, [pc, #324]	; 11ccc <__assert_fail@plt+0xe30>
   11b84:	mov	r1, r4
   11b88:	mov	r0, #1
   11b8c:	bl	10d4c <error@plt>
   11b90:	ldr	r2, [sp, #40]	; 0x28
   11b94:	mov	r1, #3
   11b98:	mov	r0, #0
   11b9c:	bl	13dcc <__assert_fail@plt+0x2f30>
   11ba0:	b	11b7c <__assert_fail@plt+0xce0>
   11ba4:	eor	r0, r9, #1
   11ba8:	bl	10dc4 <exit@plt>
   11bac:	mov	r0, #28
   11bb0:	bl	14cd4 <__assert_fail@plt+0x3e38>
   11bb4:	str	r0, [sp, #24]
   11bb8:	mov	r3, #0
   11bbc:	str	r3, [sp, #44]	; 0x2c
   11bc0:	ldr	r3, [pc, #248]	; 11cc0 <__assert_fail@plt+0xe24>
   11bc4:	str	r3, [sp, #40]	; 0x28
   11bc8:	b	11654 <__assert_fail@plt+0x7b8>
   11bcc:	ldr	r3, [r6, #4]
   11bd0:	cmp	r3, #0
   11bd4:	beq	11ae0 <__assert_fail@plt+0xc44>
   11bd8:	mov	r7, #0
   11bdc:	ldr	r4, [r3, #24]
   11be0:	ldr	r0, [r3]
   11be4:	bl	10d64 <puts@plt>
   11be8:	ldr	ip, [r6, #4]
   11bec:	strb	r5, [ip, #13]
   11bf0:	ldr	r3, [r6]
   11bf4:	sub	r3, r3, #1
   11bf8:	str	r3, [r6]
   11bfc:	cmp	r4, #0
   11c00:	beq	11c48 <__assert_fail@plt+0xdac>
   11c04:	ldr	r1, [r6, #8]
   11c08:	mov	r0, r7
   11c0c:	ldr	r2, [r4]
   11c10:	ldr	r3, [r2, #16]
   11c14:	sub	r3, r3, #1
   11c18:	str	r3, [r2, #16]
   11c1c:	ldr	r3, [r4]
   11c20:	ldr	r2, [r3, #16]
   11c24:	cmp	r2, #0
   11c28:	streq	r3, [r1, #20]
   11c2c:	ldreq	r1, [r4]
   11c30:	moveq	r0, r5
   11c34:	ldr	r4, [r4, #4]
   11c38:	cmp	r4, #0
   11c3c:	bne	11c0c <__assert_fail@plt+0xd70>
   11c40:	cmp	r0, #0
   11c44:	strne	r1, [r6, #8]
   11c48:	ldr	r3, [ip, #20]
   11c4c:	str	r3, [r6, #4]
   11c50:	cmp	r3, #0
   11c54:	bne	11bdc <__assert_fail@plt+0xd40>
   11c58:	ldr	r3, [r6]
   11c5c:	cmp	r3, #0
   11c60:	bne	11ae0 <__assert_fail@plt+0xc44>
   11c64:	ldr	r3, [r6]
   11c68:	cmp	r3, #0
   11c6c:	beq	11b44 <__assert_fail@plt+0xca8>
   11c70:	cmp	r8, #0
   11c74:	beq	11bcc <__assert_fail@plt+0xd30>
   11c78:	mov	r1, sl
   11c7c:	mov	r0, r8
   11c80:	bl	11034 <__assert_fail@plt+0x198>
   11c84:	ldr	r3, [r6, #4]
   11c88:	cmp	r3, #0
   11c8c:	bne	11bd8 <__assert_fail@plt+0xd3c>
   11c90:	b	11c58 <__assert_fail@plt+0xdbc>
   11c94:	andeq	r5, r1, r8, lsr #14
   11c98:	andeq	r5, r1, r8, lsr #15
   11c9c:	andeq	r5, r1, r4, asr r8
   11ca0:	andeq	r1, r1, r4, lsr sp
   11ca4:	andeq	r5, r1, ip, ror #16
   11ca8:	muleq	r1, ip, r0
   11cac:	andeq	r6, r2, r4, ror #1
   11cb0:	andeq	r5, r1, r4, lsr #15
   11cb4:	andeq	r5, r1, r0, lsr r6
   11cb8:	andeq	r6, r2, r8, lsr r1
   11cbc:	andeq	r5, r1, ip, ror r8
   11cc0:	andeq	r5, r1, r0, asr r8
   11cc4:	andeq	r6, r2, r8, asr #2
   11cc8:	muleq	r1, r0, r8
   11ccc:	andeq	r5, r1, r8, lsl #20
   11cd0:	andeq	r5, r1, ip, lsl r6
   11cd4:	andeq	r0, r0, sl, asr #3
   11cd8:	muleq	r1, r8, r8
   11cdc:	andeq	r5, r1, r4, lsr #17
   11ce0:	andeq	r5, r1, r4, lsr #12
   11ce4:			; <UNDEFINED> instruction: 0x000158b0
   11ce8:			; <UNDEFINED> instruction: 0x000158b8
   11cec:	strdeq	r5, [r1], -r8
   11cf0:	andeq	r5, r1, ip, asr #17
   11cf4:	muleq	r1, r4, r8
   11cf8:	andeq	r5, r1, r4, lsr #18
   11cfc:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   11d00:	andeq	r6, r2, r8, asr r1
   11d04:	andeq	r0, r1, ip, ror #31
   11d08:	andeq	r5, r1, r0, asr r9
   11d0c:	andeq	r1, r1, r4, asr #7
   11d10:	andeq	r5, r1, ip, ror #18
   11d14:	ldr	r3, [pc, #4]	; 11d20 <__assert_fail@plt+0xe84>
   11d18:	str	r0, [r3]
   11d1c:	bx	lr
   11d20:	andeq	r6, r2, r8, ror #2
   11d24:	ldr	r3, [pc, #4]	; 11d30 <__assert_fail@plt+0xe94>
   11d28:	strb	r0, [r3, #4]
   11d2c:	bx	lr
   11d30:	andeq	r6, r2, r8, ror #2
   11d34:	push	{r4, r5, r6, lr}
   11d38:	sub	sp, sp, #8
   11d3c:	ldr	r3, [pc, #200]	; 11e0c <__assert_fail@plt+0xf70>
   11d40:	ldr	r0, [r3]
   11d44:	bl	14ea8 <__assert_fail@plt+0x400c>
   11d48:	cmp	r0, #0
   11d4c:	beq	11d70 <__assert_fail@plt+0xed4>
   11d50:	ldr	r3, [pc, #184]	; 11e10 <__assert_fail@plt+0xf74>
   11d54:	ldrb	r3, [r3, #4]
   11d58:	cmp	r3, #0
   11d5c:	beq	11d8c <__assert_fail@plt+0xef0>
   11d60:	bl	10ddc <__errno_location@plt>
   11d64:	ldr	r3, [r0]
   11d68:	cmp	r3, #32
   11d6c:	bne	11d8c <__assert_fail@plt+0xef0>
   11d70:	ldr	r3, [pc, #156]	; 11e14 <__assert_fail@plt+0xf78>
   11d74:	ldr	r0, [r3]
   11d78:	bl	14ea8 <__assert_fail@plt+0x400c>
   11d7c:	cmp	r0, #0
   11d80:	bne	11e00 <__assert_fail@plt+0xf64>
   11d84:	add	sp, sp, #8
   11d88:	pop	{r4, r5, r6, pc}
   11d8c:	mov	r2, #5
   11d90:	ldr	r1, [pc, #128]	; 11e18 <__assert_fail@plt+0xf7c>
   11d94:	mov	r0, #0
   11d98:	bl	10cd4 <dcgettext@plt>
   11d9c:	mov	r4, r0
   11da0:	ldr	r3, [pc, #104]	; 11e10 <__assert_fail@plt+0xf74>
   11da4:	ldr	r5, [r3]
   11da8:	cmp	r5, #0
   11dac:	beq	11de4 <__assert_fail@plt+0xf48>
   11db0:	bl	10ddc <__errno_location@plt>
   11db4:	ldr	r6, [r0]
   11db8:	mov	r0, r5
   11dbc:	bl	13dac <__assert_fail@plt+0x2f10>
   11dc0:	str	r4, [sp]
   11dc4:	mov	r3, r0
   11dc8:	ldr	r2, [pc, #76]	; 11e1c <__assert_fail@plt+0xf80>
   11dcc:	mov	r1, r6
   11dd0:	mov	r0, #0
   11dd4:	bl	10d4c <error@plt>
   11dd8:	ldr	r3, [pc, #64]	; 11e20 <__assert_fail@plt+0xf84>
   11ddc:	ldr	r0, [r3]
   11de0:	bl	10c98 <_exit@plt>
   11de4:	bl	10ddc <__errno_location@plt>
   11de8:	mov	r3, r4
   11dec:	ldr	r2, [pc, #48]	; 11e24 <__assert_fail@plt+0xf88>
   11df0:	ldr	r1, [r0]
   11df4:	mov	r0, #0
   11df8:	bl	10d4c <error@plt>
   11dfc:	b	11dd8 <__assert_fail@plt+0xf3c>
   11e00:	ldr	r3, [pc, #24]	; 11e20 <__assert_fail@plt+0xf84>
   11e04:	ldr	r0, [r3]
   11e08:	bl	10c98 <_exit@plt>
   11e0c:	andeq	r6, r2, ip, asr #2
   11e10:	andeq	r6, r2, r8, ror #2
   11e14:	andeq	r6, r2, r0, asr #2
   11e18:	strdeq	r5, [r1], -r8
   11e1c:	andeq	r5, r1, r4, lsl #20
   11e20:	andeq	r6, r2, r8, ror #1
   11e24:	andeq	r5, r1, r8, lsl #20
   11e28:	push	{r4, r5, lr}
   11e2c:	sub	sp, sp, #20
   11e30:	ldr	r1, [sp, #40]	; 0x28
   11e34:	str	r1, [sp, #8]
   11e38:	ldrd	r4, [sp, #32]
   11e3c:	strd	r4, [sp]
   11e40:	bl	10c74 <posix_fadvise64@plt>
   11e44:	add	sp, sp, #20
   11e48:	pop	{r4, r5, pc}
   11e4c:	cmp	r0, #0
   11e50:	bxeq	lr
   11e54:	push	{r4, lr}
   11e58:	sub	sp, sp, #16
   11e5c:	mov	r4, r1
   11e60:	bl	10e0c <fileno@plt>
   11e64:	str	r4, [sp, #8]
   11e68:	mov	r2, #0
   11e6c:	mov	r3, #0
   11e70:	strd	r2, [sp]
   11e74:	bl	10c74 <posix_fadvise64@plt>
   11e78:	add	sp, sp, #16
   11e7c:	pop	{r4, pc}
   11e80:	push	{r4, r5, r6, lr}
   11e84:	sub	sp, sp, #8
   11e88:	mov	r4, r0
   11e8c:	bl	10e0c <fileno@plt>
   11e90:	cmp	r0, #0
   11e94:	blt	11f0c <__assert_fail@plt+0x1070>
   11e98:	mov	r0, r4
   11e9c:	bl	10d88 <__freading@plt>
   11ea0:	cmp	r0, #0
   11ea4:	beq	11ed8 <__assert_fail@plt+0x103c>
   11ea8:	mov	r0, r4
   11eac:	bl	10e0c <fileno@plt>
   11eb0:	mov	r3, #1
   11eb4:	str	r3, [sp]
   11eb8:	mov	r2, #0
   11ebc:	mov	r3, #0
   11ec0:	bl	10d1c <lseek64@plt>
   11ec4:	mvn	r2, #0
   11ec8:	mvn	r3, #0
   11ecc:	cmp	r1, r3
   11ed0:	cmpeq	r0, r2
   11ed4:	beq	11f18 <__assert_fail@plt+0x107c>
   11ed8:	mov	r0, r4
   11edc:	bl	11f28 <__assert_fail@plt+0x108c>
   11ee0:	cmp	r0, #0
   11ee4:	beq	11f18 <__assert_fail@plt+0x107c>
   11ee8:	bl	10ddc <__errno_location@plt>
   11eec:	mov	r5, r0
   11ef0:	ldr	r6, [r0]
   11ef4:	mov	r0, r4
   11ef8:	bl	10e24 <fclose@plt>
   11efc:	cmp	r6, #0
   11f00:	strne	r6, [r5]
   11f04:	mvnne	r0, #0
   11f08:	b	11f20 <__assert_fail@plt+0x1084>
   11f0c:	mov	r0, r4
   11f10:	bl	10e24 <fclose@plt>
   11f14:	b	11f20 <__assert_fail@plt+0x1084>
   11f18:	mov	r0, r4
   11f1c:	bl	10e24 <fclose@plt>
   11f20:	add	sp, sp, #8
   11f24:	pop	{r4, r5, r6, pc}
   11f28:	push	{r4, lr}
   11f2c:	sub	sp, sp, #8
   11f30:	subs	r4, r0, #0
   11f34:	beq	11f48 <__assert_fail@plt+0x10ac>
   11f38:	mov	r0, r4
   11f3c:	bl	10d88 <__freading@plt>
   11f40:	cmp	r0, #0
   11f44:	bne	11f58 <__assert_fail@plt+0x10bc>
   11f48:	mov	r0, r4
   11f4c:	bl	10c80 <fflush@plt>
   11f50:	add	sp, sp, #8
   11f54:	pop	{r4, pc}
   11f58:	ldr	r3, [r4]
   11f5c:	tst	r3, #256	; 0x100
   11f60:	bne	11f70 <__assert_fail@plt+0x10d4>
   11f64:	mov	r0, r4
   11f68:	bl	10c80 <fflush@plt>
   11f6c:	b	11f50 <__assert_fail@plt+0x10b4>
   11f70:	mov	r3, #1
   11f74:	str	r3, [sp]
   11f78:	mov	r2, #0
   11f7c:	mov	r3, #0
   11f80:	mov	r0, r4
   11f84:	bl	121b0 <__assert_fail@plt+0x1314>
   11f88:	b	11f64 <__assert_fail@plt+0x10c8>
   11f8c:	push	{r4, r5, lr}
   11f90:	sub	sp, sp, #12
   11f94:	mov	r5, r0
   11f98:	bl	10ddc <__errno_location@plt>
   11f9c:	mov	r4, r0
   11fa0:	ldr	r3, [r0]
   11fa4:	str	r3, [sp]
   11fa8:	str	r3, [sp, #4]
   11fac:	mov	r3, #0
   11fb0:	str	r3, [r0]
   11fb4:	mov	r0, r5
   11fb8:	bl	10c8c <free@plt>
   11fbc:	ldr	r3, [r4]
   11fc0:	cmp	r3, #0
   11fc4:	moveq	r3, #4
   11fc8:	movne	r3, #0
   11fcc:	add	r2, sp, #8
   11fd0:	add	r3, r2, r3
   11fd4:	ldr	r3, [r3, #-8]
   11fd8:	str	r3, [r4]
   11fdc:	add	sp, sp, #12
   11fe0:	pop	{r4, r5, pc}
   11fe4:	push	{r4, lr}
   11fe8:	mov	r4, r0
   11fec:	mov	r1, #0
   11ff0:	ldr	r0, [pc, #56]	; 12030 <__assert_fail@plt+0x1194>
   11ff4:	bl	10d58 <open64@plt>
   11ff8:	cmp	r4, r0
   11ffc:	beq	12020 <__assert_fail@plt+0x1184>
   12000:	cmp	r0, #0
   12004:	blt	12028 <__assert_fail@plt+0x118c>
   12008:	bl	10e90 <close@plt>
   1200c:	bl	10ddc <__errno_location@plt>
   12010:	mov	r3, #9
   12014:	str	r3, [r0]
   12018:	mov	r0, #0
   1201c:	pop	{r4, pc}
   12020:	mov	r0, #1
   12024:	pop	{r4, pc}
   12028:	mov	r0, #0
   1202c:	pop	{r4, pc}
   12030:	andeq	r5, r1, ip, lsl #20
   12034:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12038:	mov	r8, r0
   1203c:	mov	r9, r1
   12040:	mov	r6, r2
   12044:	mov	r0, r2
   12048:	bl	10e0c <fileno@plt>
   1204c:	cmp	r0, #1
   12050:	beq	12118 <__assert_fail@plt+0x127c>
   12054:	cmp	r0, #2
   12058:	beq	12110 <__assert_fail@plt+0x1274>
   1205c:	cmp	r0, #0
   12060:	beq	12124 <__assert_fail@plt+0x1288>
   12064:	mov	r1, #2
   12068:	mov	r0, r1
   1206c:	bl	10ce0 <dup2@plt>
   12070:	subs	r4, r0, #2
   12074:	movne	r4, #1
   12078:	mov	r1, #1
   1207c:	mov	r0, r1
   12080:	bl	10ce0 <dup2@plt>
   12084:	subs	r7, r0, #1
   12088:	movne	r7, #1
   1208c:	mov	r1, #0
   12090:	mov	r0, r1
   12094:	bl	10ce0 <dup2@plt>
   12098:	adds	r5, r0, #0
   1209c:	movne	r5, #1
   120a0:	cmp	r5, #0
   120a4:	bne	12134 <__assert_fail@plt+0x1298>
   120a8:	cmp	r7, #0
   120ac:	bne	1214c <__assert_fail@plt+0x12b0>
   120b0:	cmp	r4, #0
   120b4:	beq	120c8 <__assert_fail@plt+0x122c>
   120b8:	mov	r0, #2
   120bc:	bl	11fe4 <__assert_fail@plt+0x1148>
   120c0:	cmp	r0, #0
   120c4:	beq	12194 <__assert_fail@plt+0x12f8>
   120c8:	mov	r2, r6
   120cc:	mov	r1, r9
   120d0:	mov	r0, r8
   120d4:	bl	10da0 <freopen64@plt>
   120d8:	mov	r6, r0
   120dc:	bl	10ddc <__errno_location@plt>
   120e0:	mov	r8, r0
   120e4:	ldr	r9, [r0]
   120e8:	cmp	r4, #0
   120ec:	bne	121a4 <__assert_fail@plt+0x1308>
   120f0:	cmp	r7, #0
   120f4:	bne	12174 <__assert_fail@plt+0x12d8>
   120f8:	cmp	r5, #0
   120fc:	bne	12188 <__assert_fail@plt+0x12ec>
   12100:	cmp	r6, #0
   12104:	streq	r9, [r8]
   12108:	mov	r0, r6
   1210c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12110:	mov	r4, #0
   12114:	b	12078 <__assert_fail@plt+0x11dc>
   12118:	mov	r4, #0
   1211c:	mov	r7, r4
   12120:	b	1208c <__assert_fail@plt+0x11f0>
   12124:	mov	r4, #0
   12128:	mov	r7, r4
   1212c:	mov	r5, r4
   12130:	b	120a0 <__assert_fail@plt+0x1204>
   12134:	mov	r0, #0
   12138:	bl	11fe4 <__assert_fail@plt+0x1148>
   1213c:	cmp	r0, #0
   12140:	bne	120a8 <__assert_fail@plt+0x120c>
   12144:	mov	r6, #0
   12148:	b	120dc <__assert_fail@plt+0x1240>
   1214c:	mov	r0, #1
   12150:	bl	11fe4 <__assert_fail@plt+0x1148>
   12154:	cmp	r0, #0
   12158:	bne	120b0 <__assert_fail@plt+0x1214>
   1215c:	bl	10ddc <__errno_location@plt>
   12160:	mov	r8, r0
   12164:	ldr	r9, [r0]
   12168:	cmp	r4, #0
   1216c:	moveq	r6, #0
   12170:	bne	12180 <__assert_fail@plt+0x12e4>
   12174:	mov	r0, #1
   12178:	bl	10e90 <close@plt>
   1217c:	b	120f8 <__assert_fail@plt+0x125c>
   12180:	mov	r6, #0
   12184:	b	121a4 <__assert_fail@plt+0x1308>
   12188:	mov	r0, #0
   1218c:	bl	10e90 <close@plt>
   12190:	b	12100 <__assert_fail@plt+0x1264>
   12194:	bl	10ddc <__errno_location@plt>
   12198:	mov	r8, r0
   1219c:	ldr	r9, [r0]
   121a0:	mov	r6, #0
   121a4:	mov	r0, #2
   121a8:	bl	10e90 <close@plt>
   121ac:	b	120f0 <__assert_fail@plt+0x1254>
   121b0:	push	{r4, r5, r6, r7, lr}
   121b4:	sub	sp, sp, #12
   121b8:	mov	r4, r0
   121bc:	mov	r6, r2
   121c0:	mov	r7, r3
   121c4:	ldr	r5, [sp, #32]
   121c8:	ldr	r2, [r0, #8]
   121cc:	ldr	r3, [r0, #4]
   121d0:	cmp	r2, r3
   121d4:	beq	121f4 <__assert_fail@plt+0x1358>
   121d8:	str	r5, [sp]
   121dc:	mov	r2, r6
   121e0:	mov	r3, r7
   121e4:	mov	r0, r4
   121e8:	bl	10e30 <fseeko64@plt>
   121ec:	add	sp, sp, #12
   121f0:	pop	{r4, r5, r6, r7, pc}
   121f4:	ldr	r2, [r0, #20]
   121f8:	ldr	r3, [r0, #16]
   121fc:	cmp	r2, r3
   12200:	bne	121d8 <__assert_fail@plt+0x133c>
   12204:	ldr	r3, [r0, #36]	; 0x24
   12208:	cmp	r3, #0
   1220c:	bne	121d8 <__assert_fail@plt+0x133c>
   12210:	bl	10e0c <fileno@plt>
   12214:	str	r5, [sp]
   12218:	mov	r2, r6
   1221c:	mov	r3, r7
   12220:	bl	10d1c <lseek64@plt>
   12224:	mvn	r2, #0
   12228:	mvn	r3, #0
   1222c:	cmp	r1, r3
   12230:	cmpeq	r0, r2
   12234:	beq	12250 <__assert_fail@plt+0x13b4>
   12238:	ldr	r3, [r4]
   1223c:	bic	r3, r3, #16
   12240:	str	r3, [r4]
   12244:	strd	r0, [r4, #80]	; 0x50
   12248:	mov	r0, #0
   1224c:	b	121ec <__assert_fail@plt+0x1350>
   12250:	mvn	r0, #0
   12254:	b	121ec <__assert_fail@plt+0x1350>
   12258:	push	{r4, r5, r6, lr}
   1225c:	sub	sp, sp, #16
   12260:	ldr	ip, [pc, #152]	; 12300 <__assert_fail@plt+0x1464>
   12264:	ldr	r4, [ip]
   12268:	mov	lr, #0
   1226c:	str	lr, [ip]
   12270:	cmp	r0, #2
   12274:	beq	12294 <__assert_fail@plt+0x13f8>
   12278:	ldr	r3, [pc, #128]	; 12300 <__assert_fail@plt+0x1464>
   1227c:	str	r4, [r3]
   12280:	mov	r2, #0
   12284:	ldr	r3, [pc, #120]	; 12304 <__assert_fail@plt+0x1468>
   12288:	str	r2, [r3]
   1228c:	add	sp, sp, #16
   12290:	pop	{r4, r5, r6, pc}
   12294:	mov	r6, r3
   12298:	mov	r5, r2
   1229c:	str	lr, [sp]
   122a0:	ldr	r3, [pc, #96]	; 12308 <__assert_fail@plt+0x146c>
   122a4:	ldr	r2, [pc, #96]	; 1230c <__assert_fail@plt+0x1470>
   122a8:	bl	10dac <getopt_long@plt>
   122ac:	cmn	r0, #1
   122b0:	beq	12278 <__assert_fail@plt+0x13dc>
   122b4:	cmp	r0, #104	; 0x68
   122b8:	beq	122f0 <__assert_fail@plt+0x1454>
   122bc:	cmp	r0, #118	; 0x76
   122c0:	bne	12278 <__assert_fail@plt+0x13dc>
   122c4:	add	r3, sp, #40	; 0x28
   122c8:	str	r3, [sp, #12]
   122cc:	ldr	r2, [pc, #60]	; 12310 <__assert_fail@plt+0x1474>
   122d0:	ldr	r0, [r2]
   122d4:	str	r3, [sp]
   122d8:	ldr	r3, [sp, #32]
   122dc:	mov	r2, r6
   122e0:	mov	r1, r5
   122e4:	bl	146dc <__assert_fail@plt+0x3840>
   122e8:	mov	r0, #0
   122ec:	bl	10dc4 <exit@plt>
   122f0:	mov	r0, #0
   122f4:	ldr	r3, [sp, #36]	; 0x24
   122f8:	blx	r3
   122fc:	b	12278 <__assert_fail@plt+0x13dc>
   12300:	andeq	r6, r2, r0, asr r1
   12304:	andeq	r6, r2, r8, lsr r1
   12308:	andeq	r5, r1, r8, lsl sl
   1230c:	andeq	r5, r1, r8, asr #20
   12310:	andeq	r6, r2, ip, asr #2
   12314:	push	{r4, r5, r6, lr}
   12318:	sub	sp, sp, #16
   1231c:	mov	r5, r2
   12320:	mov	r6, r3
   12324:	ldr	r3, [pc, #160]	; 123cc <__assert_fail@plt+0x1530>
   12328:	ldr	r4, [r3]
   1232c:	mov	r2, #1
   12330:	str	r2, [r3]
   12334:	mov	r3, #0
   12338:	str	r3, [sp]
   1233c:	ldr	r3, [pc, #140]	; 123d0 <__assert_fail@plt+0x1534>
   12340:	ldr	ip, [pc, #140]	; 123d4 <__assert_fail@plt+0x1538>
   12344:	ldr	r2, [pc, #140]	; 123d8 <__assert_fail@plt+0x153c>
   12348:	ldrb	lr, [sp, #36]	; 0x24
   1234c:	cmp	lr, #0
   12350:	moveq	r2, ip
   12354:	bl	10dac <getopt_long@plt>
   12358:	cmn	r0, #1
   1235c:	beq	12390 <__assert_fail@plt+0x14f4>
   12360:	cmp	r0, #104	; 0x68
   12364:	beq	12384 <__assert_fail@plt+0x14e8>
   12368:	cmp	r0, #118	; 0x76
   1236c:	beq	123a0 <__assert_fail@plt+0x1504>
   12370:	ldr	r3, [pc, #100]	; 123dc <__assert_fail@plt+0x1540>
   12374:	ldr	r0, [r3]
   12378:	ldr	r3, [sp, #40]	; 0x28
   1237c:	blx	r3
   12380:	b	12390 <__assert_fail@plt+0x14f4>
   12384:	mov	r0, #0
   12388:	ldr	r3, [sp, #40]	; 0x28
   1238c:	blx	r3
   12390:	ldr	r3, [pc, #52]	; 123cc <__assert_fail@plt+0x1530>
   12394:	str	r4, [r3]
   12398:	add	sp, sp, #16
   1239c:	pop	{r4, r5, r6, pc}
   123a0:	add	r3, sp, #44	; 0x2c
   123a4:	str	r3, [sp, #12]
   123a8:	ldr	r2, [pc, #48]	; 123e0 <__assert_fail@plt+0x1544>
   123ac:	ldr	r0, [r2]
   123b0:	str	r3, [sp]
   123b4:	ldr	r3, [sp, #32]
   123b8:	mov	r2, r6
   123bc:	mov	r1, r5
   123c0:	bl	146dc <__assert_fail@plt+0x3840>
   123c4:	mov	r0, #0
   123c8:	bl	10dc4 <exit@plt>
   123cc:	andeq	r6, r2, r0, asr r1
   123d0:	andeq	r5, r1, r8, lsl sl
   123d4:	andeq	r5, r1, r8, asr #20
   123d8:	andeq	r5, r1, r8, lsr #14
   123dc:	andeq	r6, r2, r8, ror #1
   123e0:	andeq	r6, r2, ip, asr #2
   123e4:	push	{r4, r5, r6, lr}
   123e8:	subs	r4, r0, #0
   123ec:	beq	12464 <__assert_fail@plt+0x15c8>
   123f0:	mov	r1, #47	; 0x2f
   123f4:	mov	r0, r4
   123f8:	bl	10e54 <strrchr@plt>
   123fc:	cmp	r0, #0
   12400:	addne	r5, r0, #1
   12404:	moveq	r5, r4
   12408:	sub	r3, r5, r4
   1240c:	cmp	r3, #6
   12410:	ble	12450 <__assert_fail@plt+0x15b4>
   12414:	mov	r2, #7
   12418:	ldr	r1, [pc, #96]	; 12480 <__assert_fail@plt+0x15e4>
   1241c:	sub	r0, r5, #7
   12420:	bl	10e78 <strncmp@plt>
   12424:	cmp	r0, #0
   12428:	bne	12450 <__assert_fail@plt+0x15b4>
   1242c:	mov	r2, #3
   12430:	ldr	r1, [pc, #76]	; 12484 <__assert_fail@plt+0x15e8>
   12434:	mov	r0, r5
   12438:	bl	10e78 <strncmp@plt>
   1243c:	cmp	r0, #0
   12440:	addeq	r4, r5, #3
   12444:	ldreq	r3, [pc, #60]	; 12488 <__assert_fail@plt+0x15ec>
   12448:	streq	r4, [r3]
   1244c:	movne	r4, r5
   12450:	ldr	r3, [pc, #52]	; 1248c <__assert_fail@plt+0x15f0>
   12454:	str	r4, [r3]
   12458:	ldr	r3, [pc, #48]	; 12490 <__assert_fail@plt+0x15f4>
   1245c:	str	r4, [r3]
   12460:	pop	{r4, r5, r6, pc}
   12464:	ldr	r3, [pc, #40]	; 12494 <__assert_fail@plt+0x15f8>
   12468:	ldr	r3, [r3]
   1246c:	mov	r2, #55	; 0x37
   12470:	mov	r1, #1
   12474:	ldr	r0, [pc, #28]	; 12498 <__assert_fail@plt+0x15fc>
   12478:	bl	10d10 <fwrite@plt>
   1247c:	bl	10e84 <abort@plt>
   12480:	muleq	r1, r4, sl
   12484:	muleq	r1, ip, sl
   12488:	andeq	r6, r2, r0, lsr r1
   1248c:	andeq	r6, r2, r0, ror r1
   12490:	andeq	r6, r2, r4, lsr r1
   12494:	andeq	r6, r2, r0, asr #2
   12498:	andeq	r5, r1, ip, asr sl
   1249c:	push	{r4, r5, r6, lr}
   124a0:	mov	r5, r0
   124a4:	mov	r4, r1
   124a8:	mov	r2, #48	; 0x30
   124ac:	mov	r1, #0
   124b0:	bl	10df4 <memset@plt>
   124b4:	cmp	r4, #10
   124b8:	beq	124c8 <__assert_fail@plt+0x162c>
   124bc:	str	r4, [r5]
   124c0:	mov	r0, r5
   124c4:	pop	{r4, r5, r6, pc}
   124c8:	bl	10e84 <abort@plt>
   124cc:	push	{r4, r5, r6, lr}
   124d0:	mov	r4, r0
   124d4:	mov	r5, r1
   124d8:	mov	r2, #5
   124dc:	mov	r1, r0
   124e0:	mov	r0, #0
   124e4:	bl	10cd4 <dcgettext@plt>
   124e8:	cmp	r4, r0
   124ec:	popne	{r4, r5, r6, pc}
   124f0:	bl	14f20 <__assert_fail@plt+0x4084>
   124f4:	ldrb	r3, [r0]
   124f8:	bic	r3, r3, #32
   124fc:	cmp	r3, #85	; 0x55
   12500:	beq	1257c <__assert_fail@plt+0x16e0>
   12504:	cmp	r3, #71	; 0x47
   12508:	bne	125d8 <__assert_fail@plt+0x173c>
   1250c:	ldrb	r3, [r0, #1]
   12510:	bic	r3, r3, #32
   12514:	cmp	r3, #66	; 0x42
   12518:	bne	125d8 <__assert_fail@plt+0x173c>
   1251c:	ldrb	r3, [r0, #2]
   12520:	cmp	r3, #49	; 0x31
   12524:	bne	125d8 <__assert_fail@plt+0x173c>
   12528:	ldrb	r3, [r0, #3]
   1252c:	cmp	r3, #56	; 0x38
   12530:	bne	125d8 <__assert_fail@plt+0x173c>
   12534:	ldrb	r3, [r0, #4]
   12538:	cmp	r3, #48	; 0x30
   1253c:	bne	125d8 <__assert_fail@plt+0x173c>
   12540:	ldrb	r3, [r0, #5]
   12544:	cmp	r3, #51	; 0x33
   12548:	bne	125d8 <__assert_fail@plt+0x173c>
   1254c:	ldrb	r3, [r0, #6]
   12550:	cmp	r3, #48	; 0x30
   12554:	bne	125d8 <__assert_fail@plt+0x173c>
   12558:	ldrb	r3, [r0, #7]
   1255c:	cmp	r3, #0
   12560:	bne	125d8 <__assert_fail@plt+0x173c>
   12564:	ldrb	r2, [r4]
   12568:	ldr	r3, [pc, #124]	; 125ec <__assert_fail@plt+0x1750>
   1256c:	ldr	r0, [pc, #124]	; 125f0 <__assert_fail@plt+0x1754>
   12570:	cmp	r2, #96	; 0x60
   12574:	movne	r0, r3
   12578:	pop	{r4, r5, r6, pc}
   1257c:	ldrb	r3, [r0, #1]
   12580:	bic	r3, r3, #32
   12584:	cmp	r3, #84	; 0x54
   12588:	bne	125d8 <__assert_fail@plt+0x173c>
   1258c:	ldrb	r3, [r0, #2]
   12590:	bic	r3, r3, #32
   12594:	cmp	r3, #70	; 0x46
   12598:	bne	125d8 <__assert_fail@plt+0x173c>
   1259c:	ldrb	r3, [r0, #3]
   125a0:	cmp	r3, #45	; 0x2d
   125a4:	bne	125d8 <__assert_fail@plt+0x173c>
   125a8:	ldrb	r3, [r0, #4]
   125ac:	cmp	r3, #56	; 0x38
   125b0:	bne	125d8 <__assert_fail@plt+0x173c>
   125b4:	ldrb	r3, [r0, #5]
   125b8:	cmp	r3, #0
   125bc:	bne	125d8 <__assert_fail@plt+0x173c>
   125c0:	ldrb	r2, [r4]
   125c4:	ldr	r3, [pc, #40]	; 125f4 <__assert_fail@plt+0x1758>
   125c8:	ldr	r0, [pc, #40]	; 125f8 <__assert_fail@plt+0x175c>
   125cc:	cmp	r2, #96	; 0x60
   125d0:	movne	r0, r3
   125d4:	pop	{r4, r5, r6, pc}
   125d8:	ldr	r3, [pc, #28]	; 125fc <__assert_fail@plt+0x1760>
   125dc:	ldr	r0, [pc, #28]	; 12600 <__assert_fail@plt+0x1764>
   125e0:	cmp	r5, #9
   125e4:	movne	r0, r3
   125e8:	pop	{r4, r5, r6, pc}
   125ec:	strdeq	r5, [r1], -r8
   125f0:	andeq	r5, r1, r4, lsl #22
   125f4:	strdeq	r5, [r1], -r4
   125f8:	andeq	r5, r1, r8, lsl #22
   125fc:	strdeq	r5, [r1], -ip
   12600:	andeq	r5, r1, r0, lsl #22
   12604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12608:	sub	sp, sp, #116	; 0x74
   1260c:	str	r0, [sp, #36]	; 0x24
   12610:	mov	sl, r1
   12614:	str	r2, [sp, #52]	; 0x34
   12618:	str	r3, [sp, #28]
   1261c:	ldr	r8, [sp, #152]	; 0x98
   12620:	bl	10d28 <__ctype_get_mb_cur_max@plt>
   12624:	str	r0, [sp, #84]	; 0x54
   12628:	ldr	r3, [sp, #156]	; 0x9c
   1262c:	lsr	r3, r3, #1
   12630:	and	r3, r3, #1
   12634:	str	r3, [sp, #32]
   12638:	mov	r3, #1
   1263c:	str	r3, [sp, #40]	; 0x28
   12640:	mov	r3, #0
   12644:	str	r3, [sp, #80]	; 0x50
   12648:	str	r3, [sp, #44]	; 0x2c
   1264c:	str	r3, [sp, #48]	; 0x30
   12650:	str	r3, [sp, #60]	; 0x3c
   12654:	str	r3, [sp, #72]	; 0x48
   12658:	str	r3, [sp, #76]	; 0x4c
   1265c:	mov	r7, sl
   12660:	mov	sl, r8
   12664:	cmp	sl, #10
   12668:	ldrls	pc, [pc, sl, lsl #2]
   1266c:	b	12824 <__assert_fail@plt+0x1988>
   12670:	ldrdeq	r2, [r1], -r4
   12674:	andeq	r2, r1, r4, lsr #13
   12678:	andeq	r2, r1, r0, lsl #16
   1267c:	muleq	r1, ip, r6
   12680:			; <UNDEFINED> instruction: 0x000127b4
   12684:	andeq	r2, r1, r4, ror #13
   12688:	andeq	r3, r1, r0, asr r7
   1268c:	andeq	r2, r1, r8, lsr #16
   12690:	andeq	r2, r1, r0, lsr #14
   12694:	andeq	r2, r1, r0, lsr #14
   12698:	andeq	r2, r1, r0, lsr #14
   1269c:	mov	r3, #1
   126a0:	str	r3, [sp, #48]	; 0x30
   126a4:	mov	r3, #1
   126a8:	str	r3, [sp, #32]
   126ac:	str	r3, [sp, #60]	; 0x3c
   126b0:	ldr	r3, [pc, #4068]	; 1369c <__assert_fail@plt+0x2800>
   126b4:	str	r3, [sp, #72]	; 0x48
   126b8:	mov	fp, #0
   126bc:	mov	sl, #2
   126c0:	mov	r6, #0
   126c4:	ldr	r3, [sp, #48]	; 0x30
   126c8:	eor	r3, r3, #1
   126cc:	str	r3, [sp, #68]	; 0x44
   126d0:	b	12fb8 <__assert_fail@plt+0x211c>
   126d4:	mov	r3, #0
   126d8:	str	r3, [sp, #32]
   126dc:	mov	fp, r3
   126e0:	b	126c0 <__assert_fail@plt+0x1824>
   126e4:	ldr	r3, [sp, #32]
   126e8:	cmp	r3, #0
   126ec:	bne	12840 <__assert_fail@plt+0x19a4>
   126f0:	cmp	r7, #0
   126f4:	beq	12860 <__assert_fail@plt+0x19c4>
   126f8:	ldr	r3, [sp, #36]	; 0x24
   126fc:	mov	r2, #34	; 0x22
   12700:	strb	r2, [r3]
   12704:	mov	r3, #1
   12708:	str	r3, [sp, #48]	; 0x30
   1270c:	str	r3, [sp, #60]	; 0x3c
   12710:	ldr	r3, [pc, #3980]	; 136a4 <__assert_fail@plt+0x2808>
   12714:	str	r3, [sp, #72]	; 0x48
   12718:	mov	fp, #1
   1271c:	b	126c0 <__assert_fail@plt+0x1824>
   12720:	cmp	sl, #10
   12724:	beq	12748 <__assert_fail@plt+0x18ac>
   12728:	mov	r1, sl
   1272c:	ldr	r0, [pc, #3948]	; 136a0 <__assert_fail@plt+0x2804>
   12730:	bl	124cc <__assert_fail@plt+0x1630>
   12734:	str	r0, [sp, #164]	; 0xa4
   12738:	mov	r1, sl
   1273c:	ldr	r0, [pc, #3928]	; 1369c <__assert_fail@plt+0x2800>
   12740:	bl	124cc <__assert_fail@plt+0x1630>
   12744:	str	r0, [sp, #168]	; 0xa8
   12748:	ldr	r3, [sp, #32]
   1274c:	cmp	r3, #0
   12750:	movne	fp, #0
   12754:	bne	1278c <__assert_fail@plt+0x18f0>
   12758:	ldr	r3, [sp, #164]	; 0xa4
   1275c:	ldrb	r3, [r3]
   12760:	cmp	r3, #0
   12764:	beq	127ac <__assert_fail@plt+0x1910>
   12768:	ldr	r2, [sp, #164]	; 0xa4
   1276c:	mov	fp, #0
   12770:	ldr	r1, [sp, #36]	; 0x24
   12774:	cmp	r7, fp
   12778:	strbhi	r3, [r1, fp]
   1277c:	add	fp, fp, #1
   12780:	ldrb	r3, [r2, #1]!
   12784:	cmp	r3, #0
   12788:	bne	12774 <__assert_fail@plt+0x18d8>
   1278c:	ldr	r0, [sp, #168]	; 0xa8
   12790:	bl	10dd0 <strlen@plt>
   12794:	str	r0, [sp, #60]	; 0x3c
   12798:	ldr	r3, [sp, #168]	; 0xa8
   1279c:	str	r3, [sp, #72]	; 0x48
   127a0:	mov	r3, #1
   127a4:	str	r3, [sp, #48]	; 0x30
   127a8:	b	126c0 <__assert_fail@plt+0x1824>
   127ac:	mov	fp, #0
   127b0:	b	1278c <__assert_fail@plt+0x18f0>
   127b4:	ldr	r3, [sp, #32]
   127b8:	cmp	r3, #0
   127bc:	bne	1287c <__assert_fail@plt+0x19e0>
   127c0:	mov	r3, #1
   127c4:	str	r3, [sp, #48]	; 0x30
   127c8:	cmp	r7, #0
   127cc:	beq	12898 <__assert_fail@plt+0x19fc>
   127d0:	ldr	r3, [sp, #36]	; 0x24
   127d4:	mov	r2, #39	; 0x27
   127d8:	strb	r2, [r3]
   127dc:	mov	r3, #0
   127e0:	str	r3, [sp, #32]
   127e4:	mov	r3, #1
   127e8:	str	r3, [sp, #60]	; 0x3c
   127ec:	ldr	r3, [pc, #3752]	; 1369c <__assert_fail@plt+0x2800>
   127f0:	str	r3, [sp, #72]	; 0x48
   127f4:	mov	fp, #1
   127f8:	mov	sl, #2
   127fc:	b	126c0 <__assert_fail@plt+0x1824>
   12800:	ldr	r3, [sp, #32]
   12804:	cmp	r3, #0
   12808:	beq	127c8 <__assert_fail@plt+0x192c>
   1280c:	mov	r3, #1
   12810:	str	r3, [sp, #60]	; 0x3c
   12814:	ldr	r3, [pc, #3712]	; 1369c <__assert_fail@plt+0x2800>
   12818:	str	r3, [sp, #72]	; 0x48
   1281c:	mov	fp, #0
   12820:	b	126c0 <__assert_fail@plt+0x1824>
   12824:	bl	10e84 <abort@plt>
   12828:	mov	r3, #0
   1282c:	str	r3, [sp, #32]
   12830:	mov	r3, #1
   12834:	str	r3, [sp, #48]	; 0x30
   12838:	mov	fp, #0
   1283c:	b	126c0 <__assert_fail@plt+0x1824>
   12840:	ldr	r3, [sp, #32]
   12844:	str	r3, [sp, #48]	; 0x30
   12848:	mov	r3, #1
   1284c:	str	r3, [sp, #60]	; 0x3c
   12850:	ldr	r3, [pc, #3660]	; 136a4 <__assert_fail@plt+0x2808>
   12854:	str	r3, [sp, #72]	; 0x48
   12858:	mov	fp, #0
   1285c:	b	126c0 <__assert_fail@plt+0x1824>
   12860:	mov	r3, #1
   12864:	str	r3, [sp, #48]	; 0x30
   12868:	str	r3, [sp, #60]	; 0x3c
   1286c:	ldr	r3, [pc, #3632]	; 136a4 <__assert_fail@plt+0x2808>
   12870:	str	r3, [sp, #72]	; 0x48
   12874:	mov	fp, #1
   12878:	b	126c0 <__assert_fail@plt+0x1824>
   1287c:	mov	r3, #1
   12880:	str	r3, [sp, #60]	; 0x3c
   12884:	ldr	r3, [pc, #3600]	; 1369c <__assert_fail@plt+0x2800>
   12888:	str	r3, [sp, #72]	; 0x48
   1288c:	mov	fp, #0
   12890:	mov	sl, #2
   12894:	b	126c0 <__assert_fail@plt+0x1824>
   12898:	mov	r3, #0
   1289c:	str	r3, [sp, #32]
   128a0:	mov	r3, #1
   128a4:	str	r3, [sp, #60]	; 0x3c
   128a8:	ldr	r3, [pc, #3564]	; 1369c <__assert_fail@plt+0x2800>
   128ac:	str	r3, [sp, #72]	; 0x48
   128b0:	mov	fp, #1
   128b4:	mov	sl, #2
   128b8:	b	126c0 <__assert_fail@plt+0x1824>
   128bc:	mov	r3, #0
   128c0:	str	r3, [sp, #56]	; 0x38
   128c4:	ldr	r3, [sp, #52]	; 0x34
   128c8:	add	r2, r3, r6
   128cc:	str	r2, [sp, #64]	; 0x40
   128d0:	ldrb	r4, [r3, r6]
   128d4:	cmp	r4, #126	; 0x7e
   128d8:	ldrls	pc, [pc, r4, lsl #2]
   128dc:	b	13118 <__assert_fail@plt+0x227c>
   128e0:	strdeq	r2, [r1], -r8
   128e4:	andeq	r3, r1, r8, lsl r1
   128e8:	andeq	r3, r1, r8, lsl r1
   128ec:	andeq	r3, r1, r8, lsl r1
   128f0:	andeq	r3, r1, r8, lsl r1
   128f4:	andeq	r3, r1, r8, lsl r1
   128f8:	andeq	r3, r1, r8, lsl r1
   128fc:	andeq	r2, r1, r4, asr lr
   12900:	strdeq	r2, [r1], -r0
   12904:	andeq	r2, r1, ip, lsl #28
   12908:	andeq	r2, r1, r4, lsl #28
   1290c:	andeq	r2, r1, r4, ror sp
   12910:	andeq	r2, r1, ip, ror #26
   12914:	andeq	r2, r1, r8, ror #21
   12918:	andeq	r3, r1, r8, lsl r1
   1291c:	andeq	r3, r1, r8, lsl r1
   12920:	andeq	r3, r1, r8, lsl r1
   12924:	andeq	r3, r1, r8, lsl r1
   12928:	andeq	r3, r1, r8, lsl r1
   1292c:	andeq	r3, r1, r8, lsl r1
   12930:	andeq	r3, r1, r8, lsl r1
   12934:	andeq	r3, r1, r8, lsl r1
   12938:	andeq	r3, r1, r8, lsl r1
   1293c:	andeq	r3, r1, r8, lsl r1
   12940:	andeq	r3, r1, r8, lsl r1
   12944:	andeq	r3, r1, r8, lsl r1
   12948:	andeq	r3, r1, r8, lsl r1
   1294c:	andeq	r3, r1, r8, lsl r1
   12950:	andeq	r3, r1, r8, lsl r1
   12954:	andeq	r3, r1, r8, lsl r1
   12958:	andeq	r3, r1, r8, lsl r1
   1295c:	andeq	r3, r1, r8, lsl r1
   12960:	andeq	r2, r1, r8, lsr #29
   12964:	andeq	r2, r1, r4, lsr #29
   12968:	andeq	r2, r1, r4, lsr #29
   1296c:	andeq	r2, r1, ip, ror lr
   12970:	andeq	r2, r1, r4, lsr #29
   12974:	andeq	r3, r1, ip, ror #9
   12978:	andeq	r2, r1, r4, lsr #29
   1297c:	andeq	r3, r1, ip, ror r0
   12980:	andeq	r2, r1, r4, lsr #29
   12984:	andeq	r2, r1, r4, lsr #29
   12988:	andeq	r2, r1, r4, lsr #29
   1298c:	andeq	r3, r1, ip, ror #9
   12990:	andeq	r3, r1, ip, ror #9
   12994:	andeq	r3, r1, ip, ror #9
   12998:	andeq	r3, r1, ip, ror #9
   1299c:	andeq	r3, r1, ip, ror #9
   129a0:	andeq	r3, r1, ip, ror #9
   129a4:	andeq	r3, r1, ip, ror #9
   129a8:	andeq	r3, r1, ip, ror #9
   129ac:	andeq	r3, r1, ip, ror #9
   129b0:	andeq	r3, r1, ip, ror #9
   129b4:	andeq	r3, r1, ip, ror #9
   129b8:	andeq	r3, r1, ip, ror #9
   129bc:	andeq	r3, r1, ip, ror #9
   129c0:	andeq	r3, r1, ip, ror #9
   129c4:	andeq	r3, r1, ip, ror #9
   129c8:	andeq	r3, r1, ip, ror #9
   129cc:	andeq	r2, r1, r4, lsr #29
   129d0:	andeq	r2, r1, r4, lsr #29
   129d4:	andeq	r2, r1, r4, lsr #29
   129d8:	andeq	r2, r1, r4, lsr #29
   129dc:	andeq	r2, r1, r0, lsl #24
   129e0:	andeq	r3, r1, r8, lsl r1
   129e4:	andeq	r3, r1, ip, ror #9
   129e8:	andeq	r3, r1, ip, ror #9
   129ec:	andeq	r3, r1, ip, ror #9
   129f0:	andeq	r3, r1, ip, ror #9
   129f4:	andeq	r3, r1, ip, ror #9
   129f8:	andeq	r3, r1, ip, ror #9
   129fc:	andeq	r3, r1, ip, ror #9
   12a00:	andeq	r3, r1, ip, ror #9
   12a04:	andeq	r3, r1, ip, ror #9
   12a08:	andeq	r3, r1, ip, ror #9
   12a0c:	andeq	r3, r1, ip, ror #9
   12a10:	andeq	r3, r1, ip, ror #9
   12a14:	andeq	r3, r1, ip, ror #9
   12a18:	andeq	r3, r1, ip, ror #9
   12a1c:	andeq	r3, r1, ip, ror #9
   12a20:	andeq	r3, r1, ip, ror #9
   12a24:	andeq	r3, r1, ip, ror #9
   12a28:	andeq	r3, r1, ip, ror #9
   12a2c:	andeq	r3, r1, ip, ror #9
   12a30:	andeq	r3, r1, ip, ror #9
   12a34:	andeq	r3, r1, ip, ror #9
   12a38:	andeq	r3, r1, ip, ror #9
   12a3c:	andeq	r3, r1, ip, ror #9
   12a40:	andeq	r3, r1, ip, ror #9
   12a44:	andeq	r3, r1, ip, ror #9
   12a48:	andeq	r3, r1, ip, ror #9
   12a4c:	andeq	r2, r1, r4, lsr #29
   12a50:	andeq	r2, r1, ip, ror sp
   12a54:	andeq	r3, r1, ip, ror #9
   12a58:	andeq	r2, r1, r4, lsr #29
   12a5c:	andeq	r3, r1, ip, ror #9
   12a60:	andeq	r2, r1, r4, lsr #29
   12a64:	andeq	r3, r1, ip, ror #9
   12a68:	andeq	r3, r1, ip, ror #9
   12a6c:	andeq	r3, r1, ip, ror #9
   12a70:	andeq	r3, r1, ip, ror #9
   12a74:	andeq	r3, r1, ip, ror #9
   12a78:	andeq	r3, r1, ip, ror #9
   12a7c:	andeq	r3, r1, ip, ror #9
   12a80:	andeq	r3, r1, ip, ror #9
   12a84:	andeq	r3, r1, ip, ror #9
   12a88:	andeq	r3, r1, ip, ror #9
   12a8c:	andeq	r3, r1, ip, ror #9
   12a90:	andeq	r3, r1, ip, ror #9
   12a94:	andeq	r3, r1, ip, ror #9
   12a98:	andeq	r3, r1, ip, ror #9
   12a9c:	andeq	r3, r1, ip, ror #9
   12aa0:	andeq	r3, r1, ip, ror #9
   12aa4:	andeq	r3, r1, ip, ror #9
   12aa8:	andeq	r3, r1, ip, ror #9
   12aac:	andeq	r3, r1, ip, ror #9
   12ab0:	andeq	r3, r1, ip, ror #9
   12ab4:	andeq	r3, r1, ip, ror #9
   12ab8:	andeq	r3, r1, ip, ror #9
   12abc:	andeq	r3, r1, ip, ror #9
   12ac0:	andeq	r3, r1, ip, ror #9
   12ac4:	andeq	r3, r1, ip, ror #9
   12ac8:	andeq	r3, r1, ip, ror #9
   12acc:	andeq	r2, r1, ip, asr lr
   12ad0:	andeq	r2, r1, r4, lsr #29
   12ad4:	andeq	r2, r1, ip, asr lr
   12ad8:	andeq	r2, r1, ip, ror lr
   12adc:	mov	r3, #0
   12ae0:	str	r3, [sp, #56]	; 0x38
   12ae4:	b	128c4 <__assert_fail@plt+0x1a28>
   12ae8:	mov	r3, #114	; 0x72
   12aec:	b	12e10 <__assert_fail@plt+0x1f74>
   12af0:	mov	r3, #98	; 0x62
   12af4:	b	12e28 <__assert_fail@plt+0x1f8c>
   12af8:	ldr	r3, [sp, #48]	; 0x30
   12afc:	cmp	r3, #0
   12b00:	beq	12be8 <__assert_fail@plt+0x1d4c>
   12b04:	ldr	r3, [sp, #32]
   12b08:	cmp	r3, #0
   12b0c:	bne	13670 <__assert_fail@plt+0x27d4>
   12b10:	ldr	r3, [sp, #44]	; 0x2c
   12b14:	eor	r3, r3, #1
   12b18:	cmp	sl, #2
   12b1c:	movne	r3, #0
   12b20:	andeq	r3, r3, #1
   12b24:	cmp	r3, #0
   12b28:	moveq	r2, fp
   12b2c:	beq	12b70 <__assert_fail@plt+0x1cd4>
   12b30:	cmp	r7, fp
   12b34:	ldrhi	r2, [sp, #36]	; 0x24
   12b38:	movhi	r1, #39	; 0x27
   12b3c:	strbhi	r1, [r2, fp]
   12b40:	add	r2, fp, #1
   12b44:	cmp	r7, r2
   12b48:	ldrhi	r1, [sp, #36]	; 0x24
   12b4c:	movhi	r0, #36	; 0x24
   12b50:	strbhi	r0, [r1, r2]
   12b54:	add	r2, fp, #2
   12b58:	cmp	r7, r2
   12b5c:	ldrhi	r1, [sp, #36]	; 0x24
   12b60:	movhi	r0, #39	; 0x27
   12b64:	strbhi	r0, [r1, r2]
   12b68:	add	r2, fp, #3
   12b6c:	str	r3, [sp, #44]	; 0x2c
   12b70:	cmp	r7, r2
   12b74:	ldrhi	r3, [sp, #36]	; 0x24
   12b78:	movhi	r1, #92	; 0x5c
   12b7c:	strbhi	r1, [r3, r2]
   12b80:	add	fp, r2, #1
   12b84:	cmp	r5, #0
   12b88:	beq	134f4 <__assert_fail@plt+0x2658>
   12b8c:	add	r3, r6, #1
   12b90:	ldr	r1, [sp, #28]
   12b94:	cmp	r1, r3
   12b98:	bls	13504 <__assert_fail@plt+0x2668>
   12b9c:	ldr	r1, [sp, #52]	; 0x34
   12ba0:	ldrb	r3, [r1, r3]
   12ba4:	sub	r3, r3, #48	; 0x30
   12ba8:	uxtb	r3, r3
   12bac:	cmp	r3, #9
   12bb0:	bhi	13510 <__assert_fail@plt+0x2674>
   12bb4:	cmp	r7, fp
   12bb8:	movhi	r3, #48	; 0x30
   12bbc:	ldrhi	r1, [sp, #36]	; 0x24
   12bc0:	strbhi	r3, [r1, fp]
   12bc4:	add	r3, r2, #2
   12bc8:	cmp	r7, r3
   12bcc:	movhi	r1, #48	; 0x30
   12bd0:	ldrhi	r0, [sp, #36]	; 0x24
   12bd4:	strbhi	r1, [r0, r3]
   12bd8:	add	fp, r2, #3
   12bdc:	ldr	r8, [sp, #32]
   12be0:	mov	r4, #48	; 0x30
   12be4:	b	12ec0 <__assert_fail@plt+0x2024>
   12be8:	ldr	r3, [sp, #156]	; 0x9c
   12bec:	tst	r3, #1
   12bf0:	bne	12fb4 <__assert_fail@plt+0x2118>
   12bf4:	ldr	r5, [sp, #48]	; 0x30
   12bf8:	mov	r8, r5
   12bfc:	b	12ec0 <__assert_fail@plt+0x2024>
   12c00:	cmp	sl, #2
   12c04:	beq	12c1c <__assert_fail@plt+0x1d80>
   12c08:	cmp	sl, #5
   12c0c:	beq	12c34 <__assert_fail@plt+0x1d98>
   12c10:	mov	r8, #0
   12c14:	mov	r5, r8
   12c18:	b	12ec0 <__assert_fail@plt+0x2024>
   12c1c:	ldr	r3, [sp, #32]
   12c20:	cmp	r3, #0
   12c24:	bne	13684 <__assert_fail@plt+0x27e8>
   12c28:	mov	r8, r3
   12c2c:	mov	r5, r3
   12c30:	b	12ec0 <__assert_fail@plt+0x2024>
   12c34:	ldr	r3, [sp, #156]	; 0x9c
   12c38:	tst	r3, #4
   12c3c:	beq	1351c <__assert_fail@plt+0x2680>
   12c40:	add	r3, r6, #2
   12c44:	ldr	r2, [sp, #28]
   12c48:	cmp	r2, r3
   12c4c:	bls	13528 <__assert_fail@plt+0x268c>
   12c50:	ldr	r2, [sp, #52]	; 0x34
   12c54:	add	r2, r2, r6
   12c58:	ldrb	r2, [r2, #1]
   12c5c:	cmp	r2, #63	; 0x3f
   12c60:	movne	r8, #0
   12c64:	movne	r5, r8
   12c68:	bne	12ec0 <__assert_fail@plt+0x2024>
   12c6c:	ldr	r2, [sp, #52]	; 0x34
   12c70:	ldrb	r2, [r2, r3]
   12c74:	sub	r1, r2, #33	; 0x21
   12c78:	cmp	r1, #29
   12c7c:	ldrls	pc, [pc, r1, lsl #2]
   12c80:	b	13534 <__assert_fail@plt+0x2698>
   12c84:	strdeq	r2, [r1], -ip
   12c88:	andeq	r3, r1, r4, lsr r5
   12c8c:	andeq	r3, r1, r4, lsr r5
   12c90:	andeq	r3, r1, r4, lsr r5
   12c94:	andeq	r3, r1, r4, lsr r5
   12c98:	andeq	r3, r1, r4, lsr r5
   12c9c:	strdeq	r2, [r1], -ip
   12ca0:	strdeq	r2, [r1], -ip
   12ca4:	strdeq	r2, [r1], -ip
   12ca8:	andeq	r3, r1, r4, lsr r5
   12cac:	andeq	r3, r1, r4, lsr r5
   12cb0:	andeq	r3, r1, r4, lsr r5
   12cb4:	strdeq	r2, [r1], -ip
   12cb8:	andeq	r3, r1, r4, lsr r5
   12cbc:	strdeq	r2, [r1], -ip
   12cc0:	andeq	r3, r1, r4, lsr r5
   12cc4:	andeq	r3, r1, r4, lsr r5
   12cc8:	andeq	r3, r1, r4, lsr r5
   12ccc:	andeq	r3, r1, r4, lsr r5
   12cd0:	andeq	r3, r1, r4, lsr r5
   12cd4:	andeq	r3, r1, r4, lsr r5
   12cd8:	andeq	r3, r1, r4, lsr r5
   12cdc:	andeq	r3, r1, r4, lsr r5
   12ce0:	andeq	r3, r1, r4, lsr r5
   12ce4:	andeq	r3, r1, r4, lsr r5
   12ce8:	andeq	r3, r1, r4, lsr r5
   12cec:	andeq	r3, r1, r4, lsr r5
   12cf0:	strdeq	r2, [r1], -ip
   12cf4:	strdeq	r2, [r1], -ip
   12cf8:	strdeq	r2, [r1], -ip
   12cfc:	ldr	r1, [sp, #32]
   12d00:	cmp	r1, #0
   12d04:	bne	13744 <__assert_fail@plt+0x28a8>
   12d08:	cmp	r7, fp
   12d0c:	movhi	r1, #63	; 0x3f
   12d10:	ldrhi	r0, [sp, #36]	; 0x24
   12d14:	strbhi	r1, [r0, fp]
   12d18:	add	r1, fp, #1
   12d1c:	cmp	r7, r1
   12d20:	ldrhi	r0, [sp, #36]	; 0x24
   12d24:	movhi	ip, #34	; 0x22
   12d28:	strbhi	ip, [r0, r1]
   12d2c:	add	r1, fp, #2
   12d30:	cmp	r7, r1
   12d34:	ldrhi	r0, [sp, #36]	; 0x24
   12d38:	movhi	ip, #34	; 0x22
   12d3c:	strbhi	ip, [r0, r1]
   12d40:	add	r1, fp, #3
   12d44:	cmp	r7, r1
   12d48:	movhi	r0, #63	; 0x3f
   12d4c:	ldrhi	ip, [sp, #36]	; 0x24
   12d50:	strbhi	r0, [ip, r1]
   12d54:	add	fp, fp, #4
   12d58:	ldr	r5, [sp, #32]
   12d5c:	mov	r8, r5
   12d60:	mov	r4, r2
   12d64:	mov	r6, r3
   12d68:	b	12ec0 <__assert_fail@plt+0x2024>
   12d6c:	mov	r3, #102	; 0x66
   12d70:	b	12e28 <__assert_fail@plt+0x1f8c>
   12d74:	mov	r3, #118	; 0x76
   12d78:	b	12e28 <__assert_fail@plt+0x1f8c>
   12d7c:	cmp	sl, #2
   12d80:	beq	12dec <__assert_fail@plt+0x1f50>
   12d84:	ldr	r3, [sp, #48]	; 0x30
   12d88:	ldr	r2, [sp, #32]
   12d8c:	and	r3, r3, r2
   12d90:	tst	r9, r3
   12d94:	moveq	r3, r4
   12d98:	beq	12e28 <__assert_fail@plt+0x1f8c>
   12d9c:	mov	r8, #0
   12da0:	mov	r5, r8
   12da4:	eor	r5, r5, #1
   12da8:	ldr	r3, [sp, #44]	; 0x2c
   12dac:	and	r5, r5, r3
   12db0:	tst	r5, #255	; 0xff
   12db4:	beq	12f94 <__assert_fail@plt+0x20f8>
   12db8:	cmp	r7, fp
   12dbc:	ldrhi	r3, [sp, #36]	; 0x24
   12dc0:	movhi	r2, #39	; 0x27
   12dc4:	strbhi	r2, [r3, fp]
   12dc8:	add	r3, fp, #1
   12dcc:	cmp	r7, r3
   12dd0:	ldrhi	r2, [sp, #36]	; 0x24
   12dd4:	movhi	r1, #39	; 0x27
   12dd8:	strbhi	r1, [r2, r3]
   12ddc:	add	fp, fp, #2
   12de0:	mov	r3, #0
   12de4:	str	r3, [sp, #44]	; 0x2c
   12de8:	b	12f94 <__assert_fail@plt+0x20f8>
   12dec:	ldr	r3, [sp, #32]
   12df0:	cmp	r3, #0
   12df4:	bne	13690 <__assert_fail@plt+0x27f4>
   12df8:	mov	r8, r3
   12dfc:	mov	r5, r3
   12e00:	b	12da4 <__assert_fail@plt+0x1f08>
   12e04:	mov	r3, #110	; 0x6e
   12e08:	b	12e10 <__assert_fail@plt+0x1f74>
   12e0c:	mov	r3, #116	; 0x74
   12e10:	ldr	r2, [sp, #32]
   12e14:	cmp	sl, #2
   12e18:	movne	r2, #0
   12e1c:	andeq	r2, r2, #1
   12e20:	cmp	r2, #0
   12e24:	bne	12e48 <__assert_fail@plt+0x1fac>
   12e28:	ldr	r2, [sp, #48]	; 0x30
   12e2c:	cmp	r2, #0
   12e30:	moveq	r8, r2
   12e34:	moveq	r5, r2
   12e38:	beq	12ec0 <__assert_fail@plt+0x2024>
   12e3c:	mov	r4, r3
   12e40:	mov	r8, #0
   12e44:	b	12f18 <__assert_fail@plt+0x207c>
   12e48:	mov	r8, sl
   12e4c:	mov	sl, r7
   12e50:	b	136bc <__assert_fail@plt+0x2820>
   12e54:	mov	r3, #97	; 0x61
   12e58:	b	12e28 <__assert_fail@plt+0x1f8c>
   12e5c:	ldr	r3, [sp, #28]
   12e60:	cmn	r3, #1
   12e64:	beq	12e90 <__assert_fail@plt+0x1ff4>
   12e68:	ldr	r3, [sp, #28]
   12e6c:	subs	r3, r3, #1
   12e70:	movne	r3, #1
   12e74:	cmp	r3, #0
   12e78:	bne	13540 <__assert_fail@plt+0x26a4>
   12e7c:	cmp	r6, #0
   12e80:	beq	12ea8 <__assert_fail@plt+0x200c>
   12e84:	mov	r8, #0
   12e88:	mov	r5, r8
   12e8c:	b	12ec0 <__assert_fail@plt+0x2024>
   12e90:	ldr	r3, [sp, #52]	; 0x34
   12e94:	ldrb	r3, [r3, #1]
   12e98:	adds	r3, r3, #0
   12e9c:	movne	r3, #1
   12ea0:	b	12e74 <__assert_fail@plt+0x1fd8>
   12ea4:	mov	r8, #0
   12ea8:	ldr	r5, [sp, #32]
   12eac:	cmp	sl, #2
   12eb0:	movne	r5, #0
   12eb4:	andeq	r5, r5, #1
   12eb8:	cmp	r5, #0
   12ebc:	bne	13070 <__assert_fail@plt+0x21d4>
   12ec0:	ldr	r3, [sp, #68]	; 0x44
   12ec4:	cmp	sl, #2
   12ec8:	orreq	r3, r3, #1
   12ecc:	eor	r3, r3, #1
   12ed0:	ldr	r2, [sp, #32]
   12ed4:	orr	r3, r2, r3
   12ed8:	tst	r3, #255	; 0xff
   12edc:	beq	12f0c <__assert_fail@plt+0x2070>
   12ee0:	ldr	r3, [sp, #160]	; 0xa0
   12ee4:	cmp	r3, #0
   12ee8:	beq	12f0c <__assert_fail@plt+0x2070>
   12eec:	lsr	r2, r4, #5
   12ef0:	uxtb	r2, r2
   12ef4:	and	r3, r4, #31
   12ef8:	ldr	r1, [sp, #160]	; 0xa0
   12efc:	ldr	r2, [r1, r2, lsl #2]
   12f00:	lsr	r3, r2, r3
   12f04:	tst	r3, #1
   12f08:	bne	12f18 <__assert_fail@plt+0x207c>
   12f0c:	ldr	r3, [sp, #56]	; 0x38
   12f10:	cmp	r3, #0
   12f14:	beq	12da4 <__assert_fail@plt+0x1f08>
   12f18:	ldr	r3, [sp, #32]
   12f1c:	cmp	r3, #0
   12f20:	bne	1372c <__assert_fail@plt+0x2890>
   12f24:	ldr	r3, [sp, #44]	; 0x2c
   12f28:	eor	r3, r3, #1
   12f2c:	cmp	sl, #2
   12f30:	movne	r3, #0
   12f34:	andeq	r3, r3, #1
   12f38:	cmp	r3, #0
   12f3c:	beq	12f80 <__assert_fail@plt+0x20e4>
   12f40:	cmp	r7, fp
   12f44:	ldrhi	r2, [sp, #36]	; 0x24
   12f48:	movhi	r1, #39	; 0x27
   12f4c:	strbhi	r1, [r2, fp]
   12f50:	add	r2, fp, #1
   12f54:	cmp	r7, r2
   12f58:	ldrhi	r1, [sp, #36]	; 0x24
   12f5c:	movhi	r0, #36	; 0x24
   12f60:	strbhi	r0, [r1, r2]
   12f64:	add	r2, fp, #2
   12f68:	cmp	r7, r2
   12f6c:	ldrhi	r1, [sp, #36]	; 0x24
   12f70:	movhi	r0, #39	; 0x27
   12f74:	strbhi	r0, [r1, r2]
   12f78:	add	fp, fp, #3
   12f7c:	str	r3, [sp, #44]	; 0x2c
   12f80:	cmp	r7, fp
   12f84:	ldrhi	r3, [sp, #36]	; 0x24
   12f88:	movhi	r2, #92	; 0x5c
   12f8c:	strbhi	r2, [r3, fp]
   12f90:	add	fp, fp, #1
   12f94:	cmp	fp, r7
   12f98:	ldrcc	r3, [sp, #36]	; 0x24
   12f9c:	strbcc	r4, [r3, fp]
   12fa0:	add	fp, fp, #1
   12fa4:	ldr	r3, [sp, #40]	; 0x28
   12fa8:	cmp	r8, #0
   12fac:	moveq	r3, #0
   12fb0:	str	r3, [sp, #40]	; 0x28
   12fb4:	add	r6, r6, #1
   12fb8:	ldr	r3, [sp, #28]
   12fbc:	cmn	r3, #1
   12fc0:	beq	1354c <__assert_fail@plt+0x26b0>
   12fc4:	ldr	r3, [sp, #28]
   12fc8:	subs	r8, r3, r6
   12fcc:	movne	r8, #1
   12fd0:	cmp	r8, #0
   12fd4:	beq	13560 <__assert_fail@plt+0x26c4>
   12fd8:	ldr	r5, [sp, #48]	; 0x30
   12fdc:	cmp	sl, #2
   12fe0:	moveq	r5, #0
   12fe4:	andne	r5, r5, #1
   12fe8:	ldr	r3, [sp, #60]	; 0x3c
   12fec:	adds	r9, r3, #0
   12ff0:	movne	r9, #1
   12ff4:	ands	r2, r5, r9
   12ff8:	str	r2, [sp, #56]	; 0x38
   12ffc:	beq	128c4 <__assert_fail@plt+0x1a28>
   13000:	add	r4, r6, r3
   13004:	ldr	r2, [sp, #28]
   13008:	cmp	r3, #1
   1300c:	movls	r3, #0
   13010:	movhi	r3, #1
   13014:	cmn	r2, #1
   13018:	movne	r3, #0
   1301c:	cmp	r3, #0
   13020:	beq	13030 <__assert_fail@plt+0x2194>
   13024:	ldr	r0, [sp, #52]	; 0x34
   13028:	bl	10dd0 <strlen@plt>
   1302c:	str	r0, [sp, #28]
   13030:	ldr	r3, [sp, #28]
   13034:	cmp	r3, r4
   13038:	bcc	128bc <__assert_fail@plt+0x1a20>
   1303c:	ldr	r2, [sp, #60]	; 0x3c
   13040:	ldr	r1, [sp, #72]	; 0x48
   13044:	ldr	r3, [sp, #52]	; 0x34
   13048:	add	r0, r3, r6
   1304c:	bl	10cbc <memcmp@plt>
   13050:	cmp	r0, #0
   13054:	bne	12adc <__assert_fail@plt+0x1c40>
   13058:	ldr	r3, [sp, #32]
   1305c:	cmp	r3, #0
   13060:	beq	128c4 <__assert_fail@plt+0x1a28>
   13064:	mov	r8, sl
   13068:	mov	sl, r7
   1306c:	b	136bc <__assert_fail@plt+0x2820>
   13070:	mov	r8, sl
   13074:	mov	sl, r7
   13078:	b	136bc <__assert_fail@plt+0x2820>
   1307c:	cmp	sl, #2
   13080:	strne	r8, [sp, #80]	; 0x50
   13084:	movne	r5, #0
   13088:	bne	12ec0 <__assert_fail@plt+0x2024>
   1308c:	ldr	r3, [sp, #32]
   13090:	cmp	r3, #0
   13094:	bne	136a8 <__assert_fail@plt+0x280c>
   13098:	ldr	r2, [sp, #76]	; 0x4c
   1309c:	adds	r3, r7, #0
   130a0:	movne	r3, #1
   130a4:	cmp	r2, #0
   130a8:	movne	r3, #0
   130ac:	cmp	r3, #0
   130b0:	movne	r3, #0
   130b4:	bne	130e4 <__assert_fail@plt+0x2248>
   130b8:	cmp	r7, fp
   130bc:	ldrhi	r3, [sp, #36]	; 0x24
   130c0:	movhi	r2, #39	; 0x27
   130c4:	strbhi	r2, [r3, fp]
   130c8:	add	r3, fp, #1
   130cc:	cmp	r7, r3
   130d0:	ldrhi	r2, [sp, #36]	; 0x24
   130d4:	movhi	r1, #92	; 0x5c
   130d8:	strbhi	r1, [r2, r3]
   130dc:	mov	r3, r7
   130e0:	ldr	r7, [sp, #76]	; 0x4c
   130e4:	add	r2, fp, #2
   130e8:	cmp	r2, r3
   130ec:	ldrcc	r1, [sp, #36]	; 0x24
   130f0:	movcc	r0, #39	; 0x27
   130f4:	strbcc	r0, [r1, r2]
   130f8:	add	fp, fp, #3
   130fc:	ldr	r2, [sp, #32]
   13100:	mov	r5, r2
   13104:	str	r8, [sp, #80]	; 0x50
   13108:	str	r2, [sp, #44]	; 0x2c
   1310c:	str	r7, [sp, #76]	; 0x4c
   13110:	mov	r7, r3
   13114:	b	12ec0 <__assert_fail@plt+0x2024>
   13118:	ldr	r5, [sp, #84]	; 0x54
   1311c:	cmp	r5, #1
   13120:	beq	13150 <__assert_fail@plt+0x22b4>
   13124:	mov	r3, #0
   13128:	str	r3, [sp, #104]	; 0x68
   1312c:	str	r3, [sp, #108]	; 0x6c
   13130:	ldr	r3, [sp, #28]
   13134:	cmn	r3, #1
   13138:	beq	13184 <__assert_fail@plt+0x22e8>
   1313c:	mov	r3, #0
   13140:	str	r4, [sp, #88]	; 0x58
   13144:	str	fp, [sp, #92]	; 0x5c
   13148:	mov	fp, r3
   1314c:	b	132ac <__assert_fail@plt+0x2410>
   13150:	bl	10db8 <__ctype_b_loc@plt>
   13154:	ldr	r2, [r0]
   13158:	lsl	r3, r4, #1
   1315c:	ldrh	r8, [r2, r3]
   13160:	lsr	r8, r8, #14
   13164:	and	r8, r8, #1
   13168:	mov	r2, r5
   1316c:	eor	r5, r8, #1
   13170:	ldr	r3, [sp, #48]	; 0x30
   13174:	and	r5, r5, r3
   13178:	ands	r5, r5, #255	; 0xff
   1317c:	beq	12ec0 <__assert_fail@plt+0x2024>
   13180:	b	13344 <__assert_fail@plt+0x24a8>
   13184:	ldr	r0, [sp, #52]	; 0x34
   13188:	bl	10dd0 <strlen@plt>
   1318c:	str	r0, [sp, #28]
   13190:	b	1313c <__assert_fail@plt+0x22a0>
   13194:	mov	r2, fp
   13198:	mov	r1, r4
   1319c:	ldr	r4, [sp, #88]	; 0x58
   131a0:	ldr	fp, [sp, #92]	; 0x5c
   131a4:	ldr	r0, [sp, #28]
   131a8:	cmp	r0, r5
   131ac:	bls	13378 <__assert_fail@plt+0x24dc>
   131b0:	ldrb	r3, [r1]
   131b4:	cmp	r3, #0
   131b8:	beq	13380 <__assert_fail@plt+0x24e4>
   131bc:	mov	r3, r1
   131c0:	add	r2, r2, #1
   131c4:	add	r1, r6, r2
   131c8:	cmp	r0, r1
   131cc:	bls	13388 <__assert_fail@plt+0x24ec>
   131d0:	ldrb	r1, [r3, #1]!
   131d4:	cmp	r1, #0
   131d8:	bne	131c0 <__assert_fail@plt+0x2324>
   131dc:	mov	r8, #0
   131e0:	b	1333c <__assert_fail@plt+0x24a0>
   131e4:	cmp	r4, r5
   131e8:	beq	13288 <__assert_fail@plt+0x23ec>
   131ec:	ldrb	r3, [r4, #1]!
   131f0:	sub	r3, r3, #91	; 0x5b
   131f4:	cmp	r3, #33	; 0x21
   131f8:	ldrls	pc, [pc, r3, lsl #2]
   131fc:	b	131e4 <__assert_fail@plt+0x2348>
   13200:			; <UNDEFINED> instruction: 0x000136b4
   13204:			; <UNDEFINED> instruction: 0x000136b4
   13208:	andeq	r3, r1, r4, ror #3
   1320c:			; <UNDEFINED> instruction: 0x000136b4
   13210:	andeq	r3, r1, r4, ror #3
   13214:			; <UNDEFINED> instruction: 0x000136b4
   13218:	andeq	r3, r1, r4, ror #3
   1321c:	andeq	r3, r1, r4, ror #3
   13220:	andeq	r3, r1, r4, ror #3
   13224:	andeq	r3, r1, r4, ror #3
   13228:	andeq	r3, r1, r4, ror #3
   1322c:	andeq	r3, r1, r4, ror #3
   13230:	andeq	r3, r1, r4, ror #3
   13234:	andeq	r3, r1, r4, ror #3
   13238:	andeq	r3, r1, r4, ror #3
   1323c:	andeq	r3, r1, r4, ror #3
   13240:	andeq	r3, r1, r4, ror #3
   13244:	andeq	r3, r1, r4, ror #3
   13248:	andeq	r3, r1, r4, ror #3
   1324c:	andeq	r3, r1, r4, ror #3
   13250:	andeq	r3, r1, r4, ror #3
   13254:	andeq	r3, r1, r4, ror #3
   13258:	andeq	r3, r1, r4, ror #3
   1325c:	andeq	r3, r1, r4, ror #3
   13260:	andeq	r3, r1, r4, ror #3
   13264:	andeq	r3, r1, r4, ror #3
   13268:	andeq	r3, r1, r4, ror #3
   1326c:	andeq	r3, r1, r4, ror #3
   13270:	andeq	r3, r1, r4, ror #3
   13274:	andeq	r3, r1, r4, ror #3
   13278:	andeq	r3, r1, r4, ror #3
   1327c:	andeq	r3, r1, r4, ror #3
   13280:	andeq	r3, r1, r4, ror #3
   13284:			; <UNDEFINED> instruction: 0x000136b4
   13288:	ldr	r0, [sp, #100]	; 0x64
   1328c:	bl	10d04 <iswprint@plt>
   13290:	cmp	r0, #0
   13294:	moveq	r8, #0
   13298:	add	fp, fp, r9
   1329c:	add	r0, sp, #104	; 0x68
   132a0:	bl	10cb0 <mbsinit@plt>
   132a4:	cmp	r0, #0
   132a8:	bne	1331c <__assert_fail@plt+0x2480>
   132ac:	add	r5, r6, fp
   132b0:	ldr	r3, [sp, #52]	; 0x34
   132b4:	add	r4, r3, r5
   132b8:	add	r3, sp, #104	; 0x68
   132bc:	ldr	r2, [sp, #28]
   132c0:	sub	r2, r2, r5
   132c4:	mov	r1, r4
   132c8:	add	r0, sp, #100	; 0x64
   132cc:	bl	14f54 <__assert_fail@plt+0x40b8>
   132d0:	subs	r9, r0, #0
   132d4:	beq	13390 <__assert_fail@plt+0x24f4>
   132d8:	cmn	r9, #1
   132dc:	beq	1332c <__assert_fail@plt+0x2490>
   132e0:	cmn	r9, #2
   132e4:	beq	13194 <__assert_fail@plt+0x22f8>
   132e8:	ldr	r3, [sp, #32]
   132ec:	cmp	sl, #2
   132f0:	movne	r3, #0
   132f4:	andeq	r3, r3, #1
   132f8:	cmp	r3, #0
   132fc:	beq	13288 <__assert_fail@plt+0x23ec>
   13300:	cmp	r9, #1
   13304:	bls	13288 <__assert_fail@plt+0x23ec>
   13308:	sub	r3, r9, #1
   1330c:	add	r5, r3, r5
   13310:	ldr	r3, [sp, #52]	; 0x34
   13314:	add	r5, r3, r5
   13318:	b	131ec <__assert_fail@plt+0x2350>
   1331c:	ldr	r4, [sp, #88]	; 0x58
   13320:	mov	r2, fp
   13324:	ldr	fp, [sp, #92]	; 0x5c
   13328:	b	1333c <__assert_fail@plt+0x24a0>
   1332c:	ldr	r4, [sp, #88]	; 0x58
   13330:	mov	r2, fp
   13334:	ldr	fp, [sp, #92]	; 0x5c
   13338:	mov	r8, #0
   1333c:	cmp	r2, #1
   13340:	bls	1316c <__assert_fail@plt+0x22d0>
   13344:	add	r1, r6, r2
   13348:	ldr	ip, [sp, #64]	; 0x40
   1334c:	mov	r5, #0
   13350:	eor	r3, r8, #1
   13354:	ldr	r2, [sp, #48]	; 0x30
   13358:	and	r3, r3, r2
   1335c:	uxtb	r3, r3
   13360:	ldr	r9, [sp, #32]
   13364:	ldr	lr, [sp, #44]	; 0x2c
   13368:	ldr	r2, [sp, #56]	; 0x38
   1336c:	str	r8, [sp, #56]	; 0x38
   13370:	ldr	r0, [sp, #36]	; 0x24
   13374:	b	13410 <__assert_fail@plt+0x2574>
   13378:	mov	r8, #0
   1337c:	b	1333c <__assert_fail@plt+0x24a0>
   13380:	mov	r8, #0
   13384:	b	1333c <__assert_fail@plt+0x24a0>
   13388:	mov	r8, #0
   1338c:	b	1333c <__assert_fail@plt+0x24a0>
   13390:	ldr	r4, [sp, #88]	; 0x58
   13394:	mov	r2, fp
   13398:	ldr	fp, [sp, #92]	; 0x5c
   1339c:	b	1333c <__assert_fail@plt+0x24a0>
   133a0:	cmp	r2, #0
   133a4:	beq	133b8 <__assert_fail@plt+0x251c>
   133a8:	cmp	r7, fp
   133ac:	movhi	r2, #92	; 0x5c
   133b0:	strbhi	r2, [r0, fp]
   133b4:	add	fp, fp, #1
   133b8:	add	r8, r6, #1
   133bc:	cmp	r1, r8
   133c0:	bls	134c8 <__assert_fail@plt+0x262c>
   133c4:	eor	r2, r5, #1
   133c8:	and	r2, r2, lr
   133cc:	ands	r2, r2, #255	; 0xff
   133d0:	beq	134e4 <__assert_fail@plt+0x2648>
   133d4:	cmp	r7, fp
   133d8:	movhi	r2, #39	; 0x27
   133dc:	strbhi	r2, [r0, fp]
   133e0:	add	r2, fp, #1
   133e4:	cmp	r7, r2
   133e8:	movhi	lr, #39	; 0x27
   133ec:	strbhi	lr, [r0, r2]
   133f0:	add	fp, fp, #2
   133f4:	mov	r6, r8
   133f8:	mov	r2, r3
   133fc:	mov	lr, r3
   13400:	cmp	r7, fp
   13404:	strbhi	r4, [r0, fp]
   13408:	add	fp, fp, #1
   1340c:	ldrb	r4, [ip, #1]!
   13410:	cmp	r3, #0
   13414:	beq	133a0 <__assert_fail@plt+0x2504>
   13418:	cmp	r9, #0
   1341c:	bne	13720 <__assert_fail@plt+0x2884>
   13420:	eor	r5, lr, #1
   13424:	cmp	sl, #2
   13428:	movne	r5, #0
   1342c:	andeq	r5, r5, #1
   13430:	cmp	r5, #0
   13434:	beq	1346c <__assert_fail@plt+0x25d0>
   13438:	cmp	r7, fp
   1343c:	movhi	lr, #39	; 0x27
   13440:	strbhi	lr, [r0, fp]
   13444:	add	lr, fp, #1
   13448:	cmp	r7, lr
   1344c:	movhi	r8, #36	; 0x24
   13450:	strbhi	r8, [r0, lr]
   13454:	add	lr, fp, #2
   13458:	cmp	r7, lr
   1345c:	movhi	r8, #39	; 0x27
   13460:	strbhi	r8, [r0, lr]
   13464:	add	fp, fp, #3
   13468:	mov	lr, r5
   1346c:	cmp	r7, fp
   13470:	movhi	r5, #92	; 0x5c
   13474:	strbhi	r5, [r0, fp]
   13478:	add	r5, fp, #1
   1347c:	cmp	r7, r5
   13480:	lsrhi	r8, r4, #6
   13484:	addhi	r8, r8, #48	; 0x30
   13488:	strbhi	r8, [r0, r5]
   1348c:	add	r8, fp, #2
   13490:	cmp	r7, r8
   13494:	lsrhi	r5, r4, #3
   13498:	andhi	r5, r5, #7
   1349c:	addhi	r5, r5, #48	; 0x30
   134a0:	strbhi	r5, [r0, r8]
   134a4:	add	fp, fp, #3
   134a8:	and	r4, r4, #7
   134ac:	add	r4, r4, #48	; 0x30
   134b0:	add	r5, r6, #1
   134b4:	cmp	r1, r5
   134b8:	bls	134d4 <__assert_fail@plt+0x2638>
   134bc:	mov	r6, r5
   134c0:	mov	r5, r3
   134c4:	b	13400 <__assert_fail@plt+0x2564>
   134c8:	str	lr, [sp, #44]	; 0x2c
   134cc:	ldr	r8, [sp, #56]	; 0x38
   134d0:	b	12da4 <__assert_fail@plt+0x1f08>
   134d4:	str	lr, [sp, #44]	; 0x2c
   134d8:	ldr	r8, [sp, #56]	; 0x38
   134dc:	mov	r5, r3
   134e0:	b	12da4 <__assert_fail@plt+0x1f08>
   134e4:	mov	r6, r8
   134e8:	b	13400 <__assert_fail@plt+0x2564>
   134ec:	mov	r5, #0
   134f0:	b	12ec0 <__assert_fail@plt+0x2024>
   134f4:	mov	r8, r5
   134f8:	ldr	r5, [sp, #48]	; 0x30
   134fc:	mov	r4, #48	; 0x30
   13500:	b	12ec0 <__assert_fail@plt+0x2024>
   13504:	ldr	r8, [sp, #32]
   13508:	mov	r4, #48	; 0x30
   1350c:	b	12ec0 <__assert_fail@plt+0x2024>
   13510:	ldr	r8, [sp, #32]
   13514:	mov	r4, #48	; 0x30
   13518:	b	12ec0 <__assert_fail@plt+0x2024>
   1351c:	mov	r8, #0
   13520:	mov	r5, r8
   13524:	b	12ec0 <__assert_fail@plt+0x2024>
   13528:	mov	r8, #0
   1352c:	mov	r5, r8
   13530:	b	12ec0 <__assert_fail@plt+0x2024>
   13534:	mov	r8, #0
   13538:	mov	r5, r8
   1353c:	b	12ec0 <__assert_fail@plt+0x2024>
   13540:	mov	r8, #0
   13544:	mov	r5, r8
   13548:	b	12ec0 <__assert_fail@plt+0x2024>
   1354c:	ldr	r3, [sp, #52]	; 0x34
   13550:	ldrb	r8, [r3, r6]
   13554:	adds	r8, r8, #0
   13558:	movne	r8, #1
   1355c:	b	12fd0 <__assert_fail@plt+0x2134>
   13560:	cmp	sl, #2
   13564:	movne	r3, #0
   13568:	moveq	r3, #1
   1356c:	ldr	r1, [sp, #32]
   13570:	mov	r2, r1
   13574:	and	r2, r2, r3
   13578:	cmp	fp, #0
   1357c:	movne	r2, #0
   13580:	andeq	r2, r2, #1
   13584:	cmp	r2, #0
   13588:	bne	13738 <__assert_fail@plt+0x289c>
   1358c:	eor	r2, r1, #1
   13590:	and	r3, r3, r2
   13594:	ldr	r1, [sp, #80]	; 0x50
   13598:	tst	r1, r3
   1359c:	beq	13614 <__assert_fail@plt+0x2778>
   135a0:	ldr	r3, [sp, #40]	; 0x28
   135a4:	cmp	r3, #0
   135a8:	bne	135d0 <__assert_fail@plt+0x2734>
   135ac:	ldr	r1, [sp, #76]	; 0x4c
   135b0:	clz	r3, r7
   135b4:	lsr	r3, r3, #5
   135b8:	cmp	r1, #0
   135bc:	moveq	r3, #0
   135c0:	cmp	r3, #0
   135c4:	beq	13614 <__assert_fail@plt+0x2778>
   135c8:	ldr	r7, [sp, #76]	; 0x4c
   135cc:	b	12664 <__assert_fail@plt+0x17c8>
   135d0:	ldr	r3, [sp, #168]	; 0xa8
   135d4:	str	r3, [sp, #16]
   135d8:	ldr	r3, [sp, #164]	; 0xa4
   135dc:	str	r3, [sp, #12]
   135e0:	ldr	r3, [sp, #160]	; 0xa0
   135e4:	str	r3, [sp, #8]
   135e8:	ldr	r3, [sp, #156]	; 0x9c
   135ec:	str	r3, [sp, #4]
   135f0:	mov	r3, #5
   135f4:	str	r3, [sp]
   135f8:	ldr	r3, [sp, #28]
   135fc:	ldr	r2, [sp, #52]	; 0x34
   13600:	ldr	r1, [sp, #76]	; 0x4c
   13604:	ldr	r0, [sp, #36]	; 0x24
   13608:	bl	12604 <__assert_fail@plt+0x1768>
   1360c:	mov	fp, r0
   13610:	b	13714 <__assert_fail@plt+0x2878>
   13614:	mov	sl, r7
   13618:	ldr	r3, [sp, #72]	; 0x48
   1361c:	cmp	r3, #0
   13620:	moveq	r2, #0
   13624:	andne	r2, r2, #1
   13628:	cmp	r2, #0
   1362c:	beq	1365c <__assert_fail@plt+0x27c0>
   13630:	mov	r2, r3
   13634:	ldrb	r3, [r3]
   13638:	cmp	r3, #0
   1363c:	beq	1365c <__assert_fail@plt+0x27c0>
   13640:	ldr	r1, [sp, #36]	; 0x24
   13644:	cmp	sl, fp
   13648:	strbhi	r3, [r1, fp]
   1364c:	add	fp, fp, #1
   13650:	ldrb	r3, [r2, #1]!
   13654:	cmp	r3, #0
   13658:	bne	13644 <__assert_fail@plt+0x27a8>
   1365c:	cmp	sl, fp
   13660:	movhi	r3, #0
   13664:	ldrhi	r2, [sp, #36]	; 0x24
   13668:	strbhi	r3, [r2, fp]
   1366c:	b	13714 <__assert_fail@plt+0x2878>
   13670:	mov	r8, sl
   13674:	mov	sl, r7
   13678:	ldr	r3, [sp, #32]
   1367c:	str	r3, [sp, #48]	; 0x30
   13680:	b	136bc <__assert_fail@plt+0x2820>
   13684:	mov	r8, sl
   13688:	mov	sl, r7
   1368c:	b	136bc <__assert_fail@plt+0x2820>
   13690:	mov	r8, sl
   13694:	mov	sl, r7
   13698:	b	136bc <__assert_fail@plt+0x2820>
   1369c:	strdeq	r5, [r1], -ip
   136a0:	andeq	r5, r1, ip, lsl #22
   136a4:	andeq	r5, r1, r0, lsl #22
   136a8:	mov	r8, sl
   136ac:	mov	sl, r7
   136b0:	b	136bc <__assert_fail@plt+0x2820>
   136b4:	mov	r8, sl
   136b8:	mov	sl, r7
   136bc:	ldr	r3, [sp, #48]	; 0x30
   136c0:	cmp	r8, #2
   136c4:	movne	r3, #0
   136c8:	andeq	r3, r3, #1
   136cc:	cmp	r3, #0
   136d0:	movne	r8, #4
   136d4:	ldr	r3, [sp, #168]	; 0xa8
   136d8:	str	r3, [sp, #16]
   136dc:	ldr	r3, [sp, #164]	; 0xa4
   136e0:	str	r3, [sp, #12]
   136e4:	mov	r3, #0
   136e8:	str	r3, [sp, #8]
   136ec:	ldr	r3, [sp, #156]	; 0x9c
   136f0:	bic	r3, r3, #2
   136f4:	str	r3, [sp, #4]
   136f8:	str	r8, [sp]
   136fc:	ldr	r3, [sp, #28]
   13700:	ldr	r2, [sp, #52]	; 0x34
   13704:	mov	r1, sl
   13708:	ldr	r0, [sp, #36]	; 0x24
   1370c:	bl	12604 <__assert_fail@plt+0x1768>
   13710:	mov	fp, r0
   13714:	mov	r0, fp
   13718:	add	sp, sp, #116	; 0x74
   1371c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13720:	mov	r8, sl
   13724:	mov	sl, r7
   13728:	b	136bc <__assert_fail@plt+0x2820>
   1372c:	mov	r8, sl
   13730:	mov	sl, r7
   13734:	b	136bc <__assert_fail@plt+0x2820>
   13738:	mov	r8, sl
   1373c:	mov	sl, r7
   13740:	b	136bc <__assert_fail@plt+0x2820>
   13744:	mov	r8, sl
   13748:	mov	sl, r7
   1374c:	b	136d4 <__assert_fail@plt+0x2838>
   13750:	mov	r3, #1
   13754:	str	r3, [sp, #32]
   13758:	str	r3, [sp, #48]	; 0x30
   1375c:	str	r3, [sp, #60]	; 0x3c
   13760:	ldr	r3, [pc, #-196]	; 136a4 <__assert_fail@plt+0x2808>
   13764:	str	r3, [sp, #72]	; 0x48
   13768:	mov	fp, #0
   1376c:	mov	sl, #5
   13770:	b	126c0 <__assert_fail@plt+0x1824>
   13774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13778:	sub	sp, sp, #52	; 0x34
   1377c:	mov	r5, r0
   13780:	str	r1, [sp, #24]
   13784:	str	r2, [sp, #28]
   13788:	mov	r4, r3
   1378c:	bl	10ddc <__errno_location@plt>
   13790:	str	r0, [sp, #32]
   13794:	ldr	r3, [r0]
   13798:	str	r3, [sp, #36]	; 0x24
   1379c:	ldr	r3, [pc, #396]	; 13930 <__assert_fail@plt+0x2a94>
   137a0:	ldr	r6, [r3]
   137a4:	cmn	r5, #-2147483647	; 0x80000001
   137a8:	movne	r3, #0
   137ac:	moveq	r3, #1
   137b0:	orrs	r3, r3, r5, lsr #31
   137b4:	bne	138f4 <__assert_fail@plt+0x2a58>
   137b8:	ldr	r3, [pc, #368]	; 13930 <__assert_fail@plt+0x2a94>
   137bc:	ldr	r2, [r3, #4]
   137c0:	cmp	r5, r2
   137c4:	blt	1382c <__assert_fail@plt+0x2990>
   137c8:	str	r2, [sp, #44]	; 0x2c
   137cc:	add	r3, r3, #8
   137d0:	cmp	r6, r3
   137d4:	beq	138f8 <__assert_fail@plt+0x2a5c>
   137d8:	sub	r2, r5, r2
   137dc:	mov	r3, #8
   137e0:	str	r3, [sp]
   137e4:	mvn	r3, #-2147483648	; 0x80000000
   137e8:	add	r2, r2, #1
   137ec:	add	r1, sp, #44	; 0x2c
   137f0:	mov	r0, r6
   137f4:	bl	149a0 <__assert_fail@plt+0x3b04>
   137f8:	mov	r6, r0
   137fc:	ldr	r3, [pc, #300]	; 13930 <__assert_fail@plt+0x2a94>
   13800:	str	r0, [r3]
   13804:	ldr	r7, [pc, #292]	; 13930 <__assert_fail@plt+0x2a94>
   13808:	ldr	r0, [r7, #4]
   1380c:	ldr	r2, [sp, #44]	; 0x2c
   13810:	sub	r2, r2, r0
   13814:	lsl	r2, r2, #3
   13818:	mov	r1, #0
   1381c:	add	r0, r6, r0, lsl #3
   13820:	bl	10df4 <memset@plt>
   13824:	ldr	r3, [sp, #44]	; 0x2c
   13828:	str	r3, [r7, #4]
   1382c:	add	fp, r6, r5, lsl #3
   13830:	ldr	r8, [r6, r5, lsl #3]
   13834:	ldr	r7, [fp, #4]
   13838:	ldr	r9, [r4, #4]
   1383c:	orr	r9, r9, #1
   13840:	add	sl, r4, #8
   13844:	ldr	r3, [r4, #44]	; 0x2c
   13848:	str	r3, [sp, #16]
   1384c:	ldr	r3, [r4, #40]	; 0x28
   13850:	str	r3, [sp, #12]
   13854:	str	sl, [sp, #8]
   13858:	str	r9, [sp, #4]
   1385c:	ldr	r3, [r4]
   13860:	str	r3, [sp]
   13864:	ldr	r3, [sp, #28]
   13868:	ldr	r2, [sp, #24]
   1386c:	mov	r1, r8
   13870:	mov	r0, r7
   13874:	bl	12604 <__assert_fail@plt+0x1768>
   13878:	cmp	r8, r0
   1387c:	bhi	138dc <__assert_fail@plt+0x2a40>
   13880:	add	r8, r0, #1
   13884:	str	r8, [r6, r5, lsl #3]
   13888:	ldr	r3, [pc, #164]	; 13934 <__assert_fail@plt+0x2a98>
   1388c:	cmp	r7, r3
   13890:	beq	1389c <__assert_fail@plt+0x2a00>
   13894:	mov	r0, r7
   13898:	bl	11f8c <__assert_fail@plt+0x10f0>
   1389c:	mov	r0, r8
   138a0:	bl	1481c <__assert_fail@plt+0x3980>
   138a4:	mov	r7, r0
   138a8:	str	r0, [fp, #4]
   138ac:	ldr	r3, [r4, #44]	; 0x2c
   138b0:	str	r3, [sp, #16]
   138b4:	ldr	r3, [r4, #40]	; 0x28
   138b8:	str	r3, [sp, #12]
   138bc:	str	sl, [sp, #8]
   138c0:	str	r9, [sp, #4]
   138c4:	ldr	r3, [r4]
   138c8:	str	r3, [sp]
   138cc:	ldr	r3, [sp, #28]
   138d0:	ldr	r2, [sp, #24]
   138d4:	mov	r1, r8
   138d8:	bl	12604 <__assert_fail@plt+0x1768>
   138dc:	ldr	r3, [sp, #32]
   138e0:	ldr	r2, [sp, #36]	; 0x24
   138e4:	str	r2, [r3]
   138e8:	mov	r0, r7
   138ec:	add	sp, sp, #52	; 0x34
   138f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f4:	bl	10e84 <abort@plt>
   138f8:	sub	r2, r5, r2
   138fc:	mov	r3, #8
   13900:	str	r3, [sp]
   13904:	mvn	r3, #-2147483648	; 0x80000000
   13908:	add	r2, r2, #1
   1390c:	add	r1, sp, #44	; 0x2c
   13910:	mov	r0, #0
   13914:	bl	149a0 <__assert_fail@plt+0x3b04>
   13918:	mov	r6, r0
   1391c:	ldr	r3, [pc, #12]	; 13930 <__assert_fail@plt+0x2a94>
   13920:	str	r0, [r3], #8
   13924:	ldm	r3, {r0, r1}
   13928:	stm	r6, {r0, r1}
   1392c:	b	13804 <__assert_fail@plt+0x2968>
   13930:	andeq	r6, r2, ip, ror #1
   13934:	andeq	r6, r2, r4, ror r1
   13938:	push	{r4, r5, r6, lr}
   1393c:	mov	r4, r0
   13940:	bl	10ddc <__errno_location@plt>
   13944:	mov	r5, r0
   13948:	ldr	r6, [r0]
   1394c:	cmp	r4, #0
   13950:	ldr	r3, [pc, #20]	; 1396c <__assert_fail@plt+0x2ad0>
   13954:	moveq	r4, r3
   13958:	mov	r1, #48	; 0x30
   1395c:	mov	r0, r4
   13960:	bl	14d08 <__assert_fail@plt+0x3e6c>
   13964:	str	r6, [r5]
   13968:	pop	{r4, r5, r6, pc}
   1396c:	andeq	r6, r2, r4, ror r2
   13970:	subs	r3, r0, #0
   13974:	ldr	r2, [pc, #8]	; 13984 <__assert_fail@plt+0x2ae8>
   13978:	moveq	r3, r2
   1397c:	ldr	r0, [r3]
   13980:	bx	lr
   13984:	andeq	r6, r2, r4, ror r2
   13988:	subs	r3, r0, #0
   1398c:	ldr	r2, [pc, #8]	; 1399c <__assert_fail@plt+0x2b00>
   13990:	moveq	r3, r2
   13994:	str	r1, [r3]
   13998:	bx	lr
   1399c:	andeq	r6, r2, r4, ror r2
   139a0:	push	{lr}		; (str lr, [sp, #-4]!)
   139a4:	subs	r3, r0, #0
   139a8:	ldr	r0, [pc, #44]	; 139dc <__assert_fail@plt+0x2b40>
   139ac:	moveq	r3, r0
   139b0:	add	r3, r3, #8
   139b4:	lsr	lr, r1, #5
   139b8:	and	r1, r1, #31
   139bc:	ldr	ip, [r3, lr, lsl #2]
   139c0:	lsr	r0, ip, r1
   139c4:	eor	r2, r2, r0
   139c8:	and	r2, r2, #1
   139cc:	eor	r1, ip, r2, lsl r1
   139d0:	str	r1, [r3, lr, lsl #2]
   139d4:	and	r0, r0, #1
   139d8:	pop	{pc}		; (ldr pc, [sp], #4)
   139dc:	andeq	r6, r2, r4, ror r2
   139e0:	subs	r3, r0, #0
   139e4:	ldr	r2, [pc, #12]	; 139f8 <__assert_fail@plt+0x2b5c>
   139e8:	moveq	r3, r2
   139ec:	ldr	r0, [r3, #4]
   139f0:	str	r1, [r3, #4]
   139f4:	bx	lr
   139f8:	andeq	r6, r2, r4, ror r2
   139fc:	subs	r3, r0, #0
   13a00:	ldr	r0, [pc, #40]	; 13a30 <__assert_fail@plt+0x2b94>
   13a04:	moveq	r3, r0
   13a08:	mov	r0, #10
   13a0c:	str	r0, [r3]
   13a10:	cmp	r2, #0
   13a14:	cmpne	r1, #0
   13a18:	beq	13a28 <__assert_fail@plt+0x2b8c>
   13a1c:	str	r1, [r3, #40]	; 0x28
   13a20:	str	r2, [r3, #44]	; 0x2c
   13a24:	bx	lr
   13a28:	push	{r4, lr}
   13a2c:	bl	10e84 <abort@plt>
   13a30:	andeq	r6, r2, r4, ror r2
   13a34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a38:	sub	sp, sp, #24
   13a3c:	mov	r7, r0
   13a40:	mov	r8, r1
   13a44:	mov	r9, r2
   13a48:	mov	sl, r3
   13a4c:	ldr	r4, [sp, #56]	; 0x38
   13a50:	cmp	r4, #0
   13a54:	ldr	r3, [pc, #84]	; 13ab0 <__assert_fail@plt+0x2c14>
   13a58:	moveq	r4, r3
   13a5c:	bl	10ddc <__errno_location@plt>
   13a60:	mov	r5, r0
   13a64:	ldr	r6, [r0]
   13a68:	ldr	r3, [r4, #44]	; 0x2c
   13a6c:	str	r3, [sp, #16]
   13a70:	ldr	r3, [r4, #40]	; 0x28
   13a74:	str	r3, [sp, #12]
   13a78:	add	r3, r4, #8
   13a7c:	str	r3, [sp, #8]
   13a80:	ldr	r3, [r4, #4]
   13a84:	str	r3, [sp, #4]
   13a88:	ldr	r3, [r4]
   13a8c:	str	r3, [sp]
   13a90:	mov	r3, sl
   13a94:	mov	r2, r9
   13a98:	mov	r1, r8
   13a9c:	mov	r0, r7
   13aa0:	bl	12604 <__assert_fail@plt+0x1768>
   13aa4:	str	r6, [r5]
   13aa8:	add	sp, sp, #24
   13aac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ab0:	andeq	r6, r2, r4, ror r2
   13ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab8:	sub	sp, sp, #44	; 0x2c
   13abc:	str	r0, [sp, #28]
   13ac0:	str	r1, [sp, #32]
   13ac4:	mov	r6, r2
   13ac8:	subs	r4, r3, #0
   13acc:	ldr	r3, [pc, #172]	; 13b80 <__assert_fail@plt+0x2ce4>
   13ad0:	moveq	r4, r3
   13ad4:	bl	10ddc <__errno_location@plt>
   13ad8:	mov	r7, r0
   13adc:	ldr	fp, [r0]
   13ae0:	ldr	r5, [r4, #4]
   13ae4:	cmp	r6, #0
   13ae8:	orreq	r5, r5, #1
   13aec:	add	r9, r4, #8
   13af0:	ldr	r3, [r4, #44]	; 0x2c
   13af4:	str	r3, [sp, #16]
   13af8:	ldr	r3, [r4, #40]	; 0x28
   13afc:	str	r3, [sp, #12]
   13b00:	str	r9, [sp, #8]
   13b04:	str	r5, [sp, #4]
   13b08:	ldr	r3, [r4]
   13b0c:	str	r3, [sp]
   13b10:	ldr	r3, [sp, #32]
   13b14:	ldr	r2, [sp, #28]
   13b18:	mov	r1, #0
   13b1c:	mov	r0, r1
   13b20:	bl	12604 <__assert_fail@plt+0x1768>
   13b24:	mov	sl, r0
   13b28:	add	r8, r0, #1
   13b2c:	mov	r0, r8
   13b30:	bl	1481c <__assert_fail@plt+0x3980>
   13b34:	str	r0, [sp, #36]	; 0x24
   13b38:	ldr	r3, [r4, #44]	; 0x2c
   13b3c:	str	r3, [sp, #16]
   13b40:	ldr	r3, [r4, #40]	; 0x28
   13b44:	str	r3, [sp, #12]
   13b48:	str	r9, [sp, #8]
   13b4c:	str	r5, [sp, #4]
   13b50:	ldr	r3, [r4]
   13b54:	str	r3, [sp]
   13b58:	ldr	r3, [sp, #32]
   13b5c:	ldr	r2, [sp, #28]
   13b60:	mov	r1, r8
   13b64:	bl	12604 <__assert_fail@plt+0x1768>
   13b68:	str	fp, [r7]
   13b6c:	cmp	r6, #0
   13b70:	strne	sl, [r6]
   13b74:	ldr	r0, [sp, #36]	; 0x24
   13b78:	add	sp, sp, #44	; 0x2c
   13b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b80:	andeq	r6, r2, r4, ror r2
   13b84:	push	{r4, lr}
   13b88:	mov	r3, r2
   13b8c:	mov	r2, #0
   13b90:	bl	13ab4 <__assert_fail@plt+0x2c18>
   13b94:	pop	{r4, pc}
   13b98:	push	{r4, r5, r6, r7, r8, lr}
   13b9c:	ldr	r3, [pc, #140]	; 13c30 <__assert_fail@plt+0x2d94>
   13ba0:	ldr	r7, [r3]
   13ba4:	ldr	r3, [r3, #4]
   13ba8:	cmp	r3, #1
   13bac:	ble	13bd8 <__assert_fail@plt+0x2d3c>
   13bb0:	mov	r5, r7
   13bb4:	mov	r4, #1
   13bb8:	ldr	r6, [pc, #112]	; 13c30 <__assert_fail@plt+0x2d94>
   13bbc:	ldr	r0, [r5, #12]
   13bc0:	bl	11f8c <__assert_fail@plt+0x10f0>
   13bc4:	add	r4, r4, #1
   13bc8:	add	r5, r5, #8
   13bcc:	ldr	r3, [r6, #4]
   13bd0:	cmp	r3, r4
   13bd4:	bgt	13bbc <__assert_fail@plt+0x2d20>
   13bd8:	ldr	r0, [r7, #4]
   13bdc:	ldr	r3, [pc, #80]	; 13c34 <__assert_fail@plt+0x2d98>
   13be0:	cmp	r0, r3
   13be4:	beq	13c00 <__assert_fail@plt+0x2d64>
   13be8:	bl	11f8c <__assert_fail@plt+0x10f0>
   13bec:	ldr	r3, [pc, #60]	; 13c30 <__assert_fail@plt+0x2d94>
   13bf0:	mov	r2, #256	; 0x100
   13bf4:	str	r2, [r3, #8]
   13bf8:	ldr	r2, [pc, #52]	; 13c34 <__assert_fail@plt+0x2d98>
   13bfc:	str	r2, [r3, #12]
   13c00:	ldr	r3, [pc, #48]	; 13c38 <__assert_fail@plt+0x2d9c>
   13c04:	cmp	r7, r3
   13c08:	beq	13c20 <__assert_fail@plt+0x2d84>
   13c0c:	mov	r0, r7
   13c10:	bl	11f8c <__assert_fail@plt+0x10f0>
   13c14:	ldr	r3, [pc, #20]	; 13c30 <__assert_fail@plt+0x2d94>
   13c18:	add	r2, r3, #8
   13c1c:	str	r2, [r3]
   13c20:	mov	r2, #1
   13c24:	ldr	r3, [pc, #4]	; 13c30 <__assert_fail@plt+0x2d94>
   13c28:	str	r2, [r3, #4]
   13c2c:	pop	{r4, r5, r6, r7, r8, pc}
   13c30:	andeq	r6, r2, ip, ror #1
   13c34:	andeq	r6, r2, r4, ror r1
   13c38:	strdeq	r6, [r2], -r4
   13c3c:	push	{r4, lr}
   13c40:	ldr	r3, [pc, #8]	; 13c50 <__assert_fail@plt+0x2db4>
   13c44:	mvn	r2, #0
   13c48:	bl	13774 <__assert_fail@plt+0x28d8>
   13c4c:	pop	{r4, pc}
   13c50:	andeq	r6, r2, r4, ror r2
   13c54:	push	{r4, lr}
   13c58:	ldr	r3, [pc, #4]	; 13c64 <__assert_fail@plt+0x2dc8>
   13c5c:	bl	13774 <__assert_fail@plt+0x28d8>
   13c60:	pop	{r4, pc}
   13c64:	andeq	r6, r2, r4, ror r2
   13c68:	push	{r4, lr}
   13c6c:	mov	r1, r0
   13c70:	mov	r0, #0
   13c74:	bl	13c3c <__assert_fail@plt+0x2da0>
   13c78:	pop	{r4, pc}
   13c7c:	push	{r4, lr}
   13c80:	mov	r2, r1
   13c84:	mov	r1, r0
   13c88:	mov	r0, #0
   13c8c:	bl	13c54 <__assert_fail@plt+0x2db8>
   13c90:	pop	{r4, pc}
   13c94:	push	{r4, r5, lr}
   13c98:	sub	sp, sp, #52	; 0x34
   13c9c:	mov	r4, r0
   13ca0:	mov	r5, r2
   13ca4:	mov	r0, sp
   13ca8:	bl	1249c <__assert_fail@plt+0x1600>
   13cac:	mov	r3, sp
   13cb0:	mvn	r2, #0
   13cb4:	mov	r1, r5
   13cb8:	mov	r0, r4
   13cbc:	bl	13774 <__assert_fail@plt+0x28d8>
   13cc0:	add	sp, sp, #52	; 0x34
   13cc4:	pop	{r4, r5, pc}
   13cc8:	push	{r4, r5, r6, lr}
   13ccc:	sub	sp, sp, #48	; 0x30
   13cd0:	mov	r4, r0
   13cd4:	mov	r5, r2
   13cd8:	mov	r6, r3
   13cdc:	mov	r0, sp
   13ce0:	bl	1249c <__assert_fail@plt+0x1600>
   13ce4:	mov	r3, sp
   13ce8:	mov	r2, r6
   13cec:	mov	r1, r5
   13cf0:	mov	r0, r4
   13cf4:	bl	13774 <__assert_fail@plt+0x28d8>
   13cf8:	add	sp, sp, #48	; 0x30
   13cfc:	pop	{r4, r5, r6, pc}
   13d00:	push	{r4, lr}
   13d04:	mov	r2, r1
   13d08:	mov	r1, r0
   13d0c:	mov	r0, #0
   13d10:	bl	13c94 <__assert_fail@plt+0x2df8>
   13d14:	pop	{r4, pc}
   13d18:	push	{r4, lr}
   13d1c:	mov	r3, r2
   13d20:	mov	r2, r1
   13d24:	mov	r1, r0
   13d28:	mov	r0, #0
   13d2c:	bl	13cc8 <__assert_fail@plt+0x2e2c>
   13d30:	pop	{r4, pc}
   13d34:	push	{r4, r5, r6, lr}
   13d38:	sub	sp, sp, #48	; 0x30
   13d3c:	mov	r4, r0
   13d40:	mov	r5, r1
   13d44:	mov	r6, r2
   13d48:	mov	ip, sp
   13d4c:	ldr	lr, [pc, #64]	; 13d94 <__assert_fail@plt+0x2ef8>
   13d50:	ldm	lr!, {r0, r1, r2, r3}
   13d54:	stmia	ip!, {r0, r1, r2, r3}
   13d58:	ldm	lr!, {r0, r1, r2, r3}
   13d5c:	stmia	ip!, {r0, r1, r2, r3}
   13d60:	ldm	lr, {r0, r1, r2, r3}
   13d64:	stm	ip, {r0, r1, r2, r3}
   13d68:	mov	r2, #1
   13d6c:	mov	r1, r6
   13d70:	mov	r0, sp
   13d74:	bl	139a0 <__assert_fail@plt+0x2b04>
   13d78:	mov	r3, sp
   13d7c:	mov	r2, r5
   13d80:	mov	r1, r4
   13d84:	mov	r0, #0
   13d88:	bl	13774 <__assert_fail@plt+0x28d8>
   13d8c:	add	sp, sp, #48	; 0x30
   13d90:	pop	{r4, r5, r6, pc}
   13d94:	andeq	r6, r2, r4, ror r2
   13d98:	push	{r4, lr}
   13d9c:	mov	r2, r1
   13da0:	mvn	r1, #0
   13da4:	bl	13d34 <__assert_fail@plt+0x2e98>
   13da8:	pop	{r4, pc}
   13dac:	push	{r4, lr}
   13db0:	mov	r1, #58	; 0x3a
   13db4:	bl	13d98 <__assert_fail@plt+0x2efc>
   13db8:	pop	{r4, pc}
   13dbc:	push	{r4, lr}
   13dc0:	mov	r2, #58	; 0x3a
   13dc4:	bl	13d34 <__assert_fail@plt+0x2e98>
   13dc8:	pop	{r4, pc}
   13dcc:	push	{r4, r5, lr}
   13dd0:	sub	sp, sp, #100	; 0x64
   13dd4:	mov	r4, r0
   13dd8:	mov	r5, r2
   13ddc:	mov	r0, sp
   13de0:	bl	1249c <__assert_fail@plt+0x1600>
   13de4:	add	lr, sp, #48	; 0x30
   13de8:	mov	ip, sp
   13dec:	ldm	ip!, {r0, r1, r2, r3}
   13df0:	stmia	lr!, {r0, r1, r2, r3}
   13df4:	ldm	ip!, {r0, r1, r2, r3}
   13df8:	stmia	lr!, {r0, r1, r2, r3}
   13dfc:	ldm	ip, {r0, r1, r2, r3}
   13e00:	stm	lr, {r0, r1, r2, r3}
   13e04:	mov	r2, #1
   13e08:	mov	r1, #58	; 0x3a
   13e0c:	add	r0, sp, #48	; 0x30
   13e10:	bl	139a0 <__assert_fail@plt+0x2b04>
   13e14:	add	r3, sp, #48	; 0x30
   13e18:	mvn	r2, #0
   13e1c:	mov	r1, r5
   13e20:	mov	r0, r4
   13e24:	bl	13774 <__assert_fail@plt+0x28d8>
   13e28:	add	sp, sp, #100	; 0x64
   13e2c:	pop	{r4, r5, pc}
   13e30:	push	{r4, r5, r6, r7, lr}
   13e34:	sub	sp, sp, #52	; 0x34
   13e38:	mov	r4, r0
   13e3c:	mov	r6, r1
   13e40:	mov	r7, r2
   13e44:	mov	r5, r3
   13e48:	mov	ip, sp
   13e4c:	ldr	lr, [pc, #64]	; 13e94 <__assert_fail@plt+0x2ff8>
   13e50:	ldm	lr!, {r0, r1, r2, r3}
   13e54:	stmia	ip!, {r0, r1, r2, r3}
   13e58:	ldm	lr!, {r0, r1, r2, r3}
   13e5c:	stmia	ip!, {r0, r1, r2, r3}
   13e60:	ldm	lr, {r0, r1, r2, r3}
   13e64:	stm	ip, {r0, r1, r2, r3}
   13e68:	mov	r2, r7
   13e6c:	mov	r1, r6
   13e70:	mov	r0, sp
   13e74:	bl	139fc <__assert_fail@plt+0x2b60>
   13e78:	mov	r3, sp
   13e7c:	ldr	r2, [sp, #72]	; 0x48
   13e80:	mov	r1, r5
   13e84:	mov	r0, r4
   13e88:	bl	13774 <__assert_fail@plt+0x28d8>
   13e8c:	add	sp, sp, #52	; 0x34
   13e90:	pop	{r4, r5, r6, r7, pc}
   13e94:	andeq	r6, r2, r4, ror r2
   13e98:	push	{lr}		; (str lr, [sp, #-4]!)
   13e9c:	sub	sp, sp, #12
   13ea0:	mvn	ip, #0
   13ea4:	str	ip, [sp]
   13ea8:	bl	13e30 <__assert_fail@plt+0x2f94>
   13eac:	add	sp, sp, #12
   13eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb4:	push	{r4, lr}
   13eb8:	mov	r3, r2
   13ebc:	mov	r2, r1
   13ec0:	mov	r1, r0
   13ec4:	mov	r0, #0
   13ec8:	bl	13e98 <__assert_fail@plt+0x2ffc>
   13ecc:	pop	{r4, pc}
   13ed0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ed4:	sub	sp, sp, #12
   13ed8:	str	r3, [sp]
   13edc:	mov	r3, r2
   13ee0:	mov	r2, r1
   13ee4:	mov	r1, r0
   13ee8:	mov	r0, #0
   13eec:	bl	13e30 <__assert_fail@plt+0x2f94>
   13ef0:	add	sp, sp, #12
   13ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ef8:	push	{r4, lr}
   13efc:	ldr	r3, [pc, #4]	; 13f08 <__assert_fail@plt+0x306c>
   13f00:	bl	13774 <__assert_fail@plt+0x28d8>
   13f04:	pop	{r4, pc}
   13f08:	strdeq	r6, [r2], -ip
   13f0c:	push	{r4, lr}
   13f10:	mov	r2, r1
   13f14:	mov	r1, r0
   13f18:	mov	r0, #0
   13f1c:	bl	13ef8 <__assert_fail@plt+0x305c>
   13f20:	pop	{r4, pc}
   13f24:	push	{r4, lr}
   13f28:	mvn	r2, #0
   13f2c:	bl	13ef8 <__assert_fail@plt+0x305c>
   13f30:	pop	{r4, pc}
   13f34:	push	{r4, lr}
   13f38:	mov	r1, r0
   13f3c:	mov	r0, #0
   13f40:	bl	13f24 <__assert_fail@plt+0x3088>
   13f44:	pop	{r4, pc}
   13f48:	mov	r3, #0
   13f4c:	str	r3, [r0]
   13f50:	str	r3, [r0, #4]
   13f54:	bx	lr
   13f58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f5c:	sub	sp, sp, #52	; 0x34
   13f60:	mov	r5, r0
   13f64:	mov	r4, r1
   13f68:	mov	r6, r2
   13f6c:	mov	r9, r3
   13f70:	mov	r2, #32
   13f74:	mov	r1, #0
   13f78:	add	r0, sp, #16
   13f7c:	bl	10df4 <memset@plt>
   13f80:	cmp	r6, #0
   13f84:	beq	13fb8 <__assert_fail@plt+0x311c>
   13f88:	mov	ip, r4
   13f8c:	add	r2, r4, r6
   13f90:	add	r4, sp, #16
   13f94:	mov	r1, #1
   13f98:	ldrb	r3, [ip], #1
   13f9c:	lsr	lr, r3, #5
   13fa0:	and	r3, r3, #31
   13fa4:	ldr	r0, [r4, lr, lsl #2]
   13fa8:	orr	r3, r0, r1, lsl r3
   13fac:	str	r3, [r4, lr, lsl #2]
   13fb0:	cmp	ip, r2
   13fb4:	bne	13f98 <__assert_fail@plt+0x30fc>
   13fb8:	ldr	r3, [r5, #4]
   13fbc:	ldr	r2, [r5, #8]
   13fc0:	cmp	r3, r2
   13fc4:	bcs	13ff8 <__assert_fail@plt+0x315c>
   13fc8:	add	r2, r3, #1
   13fcc:	str	r2, [r5, #4]
   13fd0:	ldrb	r4, [r3]
   13fd4:	lsr	r2, r4, #5
   13fd8:	add	r3, sp, #48	; 0x30
   13fdc:	add	r2, r3, r2, lsl #2
   13fe0:	and	r3, r4, #31
   13fe4:	ldr	r2, [r2, #-32]	; 0xffffffe0
   13fe8:	lsr	r3, r2, r3
   13fec:	tst	r3, #1
   13ff0:	bne	14058 <__assert_fail@plt+0x31bc>
   13ff4:	b	14008 <__assert_fail@plt+0x316c>
   13ff8:	mov	r0, r5
   13ffc:	bl	10e3c <__uflow@plt>
   14000:	subs	r4, r0, #0
   14004:	bge	13fd4 <__assert_fail@plt+0x3138>
   14008:	ldr	r7, [r9, #4]
   1400c:	ldr	r3, [r9]
   14010:	add	r8, sp, #48	; 0x30
   14014:	str	r3, [r8, #-36]!	; 0xffffffdc
   14018:	mov	r6, #0
   1401c:	mov	sl, #1
   14020:	mvn	fp, #0
   14024:	b	140d4 <__assert_fail@plt+0x3238>
   14028:	mov	r0, r5
   1402c:	bl	10e3c <__uflow@plt>
   14030:	subs	r4, r0, #0
   14034:	blt	14008 <__assert_fail@plt+0x316c>
   14038:	lsr	r2, r4, #5
   1403c:	add	r3, sp, #48	; 0x30
   14040:	add	r2, r3, r2, lsl #2
   14044:	and	r3, r4, #31
   14048:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1404c:	lsr	r3, r2, r3
   14050:	tst	r3, #1
   14054:	beq	14008 <__assert_fail@plt+0x316c>
   14058:	ldr	r3, [r5, #4]
   1405c:	ldr	r2, [r5, #8]
   14060:	cmp	r3, r2
   14064:	bcs	14028 <__assert_fail@plt+0x318c>
   14068:	add	r2, r3, #1
   1406c:	str	r2, [r5, #4]
   14070:	ldrb	r4, [r3]
   14074:	b	14038 <__assert_fail@plt+0x319c>
   14078:	str	sl, [sp]
   1407c:	mov	r3, fp
   14080:	mov	r2, sl
   14084:	mov	r1, r8
   14088:	mov	r0, r7
   1408c:	bl	149a0 <__assert_fail@plt+0x3b04>
   14090:	mov	r7, r0
   14094:	b	140f0 <__assert_fail@plt+0x3254>
   14098:	mov	r3, #0
   1409c:	strb	r3, [r7, r6]
   140a0:	str	r7, [r9, #4]
   140a4:	ldr	r3, [sp, #12]
   140a8:	str	r3, [r9]
   140ac:	mov	r0, r6
   140b0:	add	sp, sp, #52	; 0x34
   140b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140b8:	mov	r3, #0
   140bc:	strb	r3, [r7, r6]
   140c0:	b	140a0 <__assert_fail@plt+0x3204>
   140c4:	mov	r0, r5
   140c8:	bl	10e3c <__uflow@plt>
   140cc:	mov	r4, r0
   140d0:	add	r6, r6, #1
   140d4:	clz	r3, r6
   140d8:	lsr	r3, r3, #5
   140dc:	ands	r3, r3, r4, lsr #31
   140e0:	bne	1413c <__assert_fail@plt+0x32a0>
   140e4:	ldr	r3, [sp, #12]
   140e8:	cmp	r6, r3
   140ec:	beq	14078 <__assert_fail@plt+0x31dc>
   140f0:	cmp	r4, #0
   140f4:	blt	14098 <__assert_fail@plt+0x31fc>
   140f8:	lsr	r2, r4, #5
   140fc:	add	r3, sp, #48	; 0x30
   14100:	add	r2, r3, r2, lsl #2
   14104:	and	r3, r4, #31
   14108:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1410c:	lsr	r3, r2, r3
   14110:	tst	r3, #1
   14114:	bne	140b8 <__assert_fail@plt+0x321c>
   14118:	strb	r4, [r7, r6]
   1411c:	ldr	r3, [r5, #4]
   14120:	ldr	r2, [r5, #8]
   14124:	cmp	r3, r2
   14128:	bcs	140c4 <__assert_fail@plt+0x3228>
   1412c:	add	r2, r3, #1
   14130:	str	r2, [r5, #4]
   14134:	ldrb	r4, [r3]
   14138:	b	140d0 <__assert_fail@plt+0x3234>
   1413c:	mvn	r0, #0
   14140:	b	140b0 <__assert_fail@plt+0x3214>
   14144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14148:	sub	sp, sp, #36	; 0x24
   1414c:	mov	sl, r0
   14150:	str	r2, [sp, #8]
   14154:	str	r3, [sp, #12]
   14158:	cmp	r1, #0
   1415c:	addne	r0, r1, #1
   14160:	moveq	r0, #64	; 0x40
   14164:	str	r0, [sp, #20]
   14168:	mov	r1, #4
   1416c:	bl	148ec <__assert_fail@plt+0x3a50>
   14170:	mov	r7, r0
   14174:	mov	r1, #4
   14178:	ldr	r0, [sp, #20]
   1417c:	bl	148ec <__assert_fail@plt+0x3a50>
   14180:	mov	r8, r0
   14184:	mov	r4, #0
   14188:	str	r4, [sp, #24]
   1418c:	str	r4, [sp, #28]
   14190:	mov	fp, #4
   14194:	mov	r9, #1
   14198:	b	141cc <__assert_fail@plt+0x3330>
   1419c:	cmn	r5, #1
   141a0:	beq	14224 <__assert_fail@plt+0x3388>
   141a4:	add	r6, r5, #1
   141a8:	mov	r1, r9
   141ac:	mov	r0, r6
   141b0:	bl	148ec <__assert_fail@plt+0x3a50>
   141b4:	str	r5, [r8, r4, lsl #2]
   141b8:	mov	r2, r6
   141bc:	ldr	r1, [sp, #28]
   141c0:	bl	10ca4 <memcpy@plt>
   141c4:	str	r0, [r7, r4, lsl #2]
   141c8:	add	r4, r4, #1
   141cc:	add	r3, sp, #24
   141d0:	ldr	r2, [sp, #12]
   141d4:	ldr	r1, [sp, #8]
   141d8:	mov	r0, sl
   141dc:	bl	13f58 <__assert_fail@plt+0x30bc>
   141e0:	mov	r5, r0
   141e4:	ldr	r3, [sp, #20]
   141e8:	cmp	r4, r3
   141ec:	blt	1419c <__assert_fail@plt+0x3300>
   141f0:	str	fp, [sp]
   141f4:	mvn	r3, #0
   141f8:	mov	r2, r9
   141fc:	add	r1, sp, #20
   14200:	mov	r0, r7
   14204:	bl	149a0 <__assert_fail@plt+0x3b04>
   14208:	mov	r7, r0
   1420c:	mov	r2, fp
   14210:	ldr	r1, [sp, #20]
   14214:	mov	r0, r8
   14218:	bl	14878 <__assert_fail@plt+0x39dc>
   1421c:	mov	r8, r0
   14220:	b	1419c <__assert_fail@plt+0x3300>
   14224:	mov	r5, r4
   14228:	mov	r3, #0
   1422c:	str	r3, [r7, r4, lsl #2]
   14230:	str	r3, [r8, r4, lsl #2]
   14234:	ldr	r0, [sp, #28]
   14238:	bl	11f8c <__assert_fail@plt+0x10f0>
   1423c:	ldr	r3, [sp, #72]	; 0x48
   14240:	str	r7, [r3]
   14244:	ldr	r3, [sp, #76]	; 0x4c
   14248:	cmp	r3, #0
   1424c:	ldrne	r3, [sp, #76]	; 0x4c
   14250:	strne	r8, [r3]
   14254:	beq	14264 <__assert_fail@plt+0x33c8>
   14258:	mov	r0, r5
   1425c:	add	sp, sp, #36	; 0x24
   14260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14264:	mov	r0, r8
   14268:	bl	11f8c <__assert_fail@plt+0x10f0>
   1426c:	b	14258 <__assert_fail@plt+0x33bc>
   14270:	push	{r4, r5, r6, lr}
   14274:	sub	sp, sp, #32
   14278:	mov	r4, r0
   1427c:	ldr	r5, [sp, #48]	; 0x30
   14280:	ldr	r6, [sp, #52]	; 0x34
   14284:	cmp	r1, #0
   14288:	beq	14340 <__assert_fail@plt+0x34a4>
   1428c:	str	r3, [sp, #4]
   14290:	str	r2, [sp]
   14294:	mov	r3, r1
   14298:	ldr	r2, [pc, #940]	; 1464c <__assert_fail@plt+0x37b0>
   1429c:	mov	r1, #1
   142a0:	bl	10e18 <__fprintf_chk@plt>
   142a4:	mov	r2, #5
   142a8:	ldr	r1, [pc, #928]	; 14650 <__assert_fail@plt+0x37b4>
   142ac:	mov	r0, #0
   142b0:	bl	10cd4 <dcgettext@plt>
   142b4:	ldr	r3, [pc, #920]	; 14654 <__assert_fail@plt+0x37b8>
   142b8:	str	r3, [sp]
   142bc:	mov	r3, r0
   142c0:	ldr	r2, [pc, #912]	; 14658 <__assert_fail@plt+0x37bc>
   142c4:	mov	r1, #1
   142c8:	mov	r0, r4
   142cc:	bl	10e18 <__fprintf_chk@plt>
   142d0:	mov	r1, r4
   142d4:	mov	r0, #10
   142d8:	bl	10cc8 <fputc_unlocked@plt>
   142dc:	mov	r2, #5
   142e0:	ldr	r1, [pc, #884]	; 1465c <__assert_fail@plt+0x37c0>
   142e4:	mov	r0, #0
   142e8:	bl	10cd4 <dcgettext@plt>
   142ec:	ldr	r3, [pc, #876]	; 14660 <__assert_fail@plt+0x37c4>
   142f0:	mov	r2, r0
   142f4:	mov	r1, #1
   142f8:	mov	r0, r4
   142fc:	bl	10e18 <__fprintf_chk@plt>
   14300:	mov	r1, r4
   14304:	mov	r0, #10
   14308:	bl	10cc8 <fputc_unlocked@plt>
   1430c:	cmp	r6, #9
   14310:	ldrls	pc, [pc, r6, lsl #2]
   14314:	b	145e4 <__assert_fail@plt+0x3748>
   14318:	andeq	r4, r1, ip, ror r3
   1431c:	andeq	r4, r1, r8, asr r3
   14320:	andeq	r4, r1, r4, lsl #7
   14324:			; <UNDEFINED> instruction: 0x000143b4
   14328:	andeq	r4, r1, ip, ror #7
   1432c:	andeq	r4, r1, ip, lsr #8
   14330:	andeq	r4, r1, r4, ror r4
   14334:	andeq	r4, r1, r4, asr #9
   14338:	andeq	r4, r1, ip, lsl r5
   1433c:	andeq	r4, r1, ip, ror r5
   14340:	str	r3, [sp]
   14344:	mov	r3, r2
   14348:	ldr	r2, [pc, #788]	; 14664 <__assert_fail@plt+0x37c8>
   1434c:	mov	r1, #1
   14350:	bl	10e18 <__fprintf_chk@plt>
   14354:	b	142a4 <__assert_fail@plt+0x3408>
   14358:	mov	r2, #5
   1435c:	ldr	r1, [pc, #772]	; 14668 <__assert_fail@plt+0x37cc>
   14360:	mov	r0, #0
   14364:	bl	10cd4 <dcgettext@plt>
   14368:	ldr	r3, [r5]
   1436c:	mov	r2, r0
   14370:	mov	r1, #1
   14374:	mov	r0, r4
   14378:	bl	10e18 <__fprintf_chk@plt>
   1437c:	add	sp, sp, #32
   14380:	pop	{r4, r5, r6, pc}
   14384:	mov	r2, #5
   14388:	ldr	r1, [pc, #732]	; 1466c <__assert_fail@plt+0x37d0>
   1438c:	mov	r0, #0
   14390:	bl	10cd4 <dcgettext@plt>
   14394:	ldr	r3, [r5]
   14398:	ldr	r2, [r5, #4]
   1439c:	str	r2, [sp]
   143a0:	mov	r2, r0
   143a4:	mov	r1, #1
   143a8:	mov	r0, r4
   143ac:	bl	10e18 <__fprintf_chk@plt>
   143b0:	b	1437c <__assert_fail@plt+0x34e0>
   143b4:	mov	r2, #5
   143b8:	ldr	r1, [pc, #688]	; 14670 <__assert_fail@plt+0x37d4>
   143bc:	mov	r0, #0
   143c0:	bl	10cd4 <dcgettext@plt>
   143c4:	ldr	r3, [r5]
   143c8:	ldr	r2, [r5, #8]
   143cc:	str	r2, [sp, #4]
   143d0:	ldr	r2, [r5, #4]
   143d4:	str	r2, [sp]
   143d8:	mov	r2, r0
   143dc:	mov	r1, #1
   143e0:	mov	r0, r4
   143e4:	bl	10e18 <__fprintf_chk@plt>
   143e8:	b	1437c <__assert_fail@plt+0x34e0>
   143ec:	mov	r2, #5
   143f0:	ldr	r1, [pc, #636]	; 14674 <__assert_fail@plt+0x37d8>
   143f4:	mov	r0, #0
   143f8:	bl	10cd4 <dcgettext@plt>
   143fc:	ldr	r3, [r5]
   14400:	ldr	r2, [r5, #12]
   14404:	str	r2, [sp, #8]
   14408:	ldr	r2, [r5, #8]
   1440c:	str	r2, [sp, #4]
   14410:	ldr	r2, [r5, #4]
   14414:	str	r2, [sp]
   14418:	mov	r2, r0
   1441c:	mov	r1, #1
   14420:	mov	r0, r4
   14424:	bl	10e18 <__fprintf_chk@plt>
   14428:	b	1437c <__assert_fail@plt+0x34e0>
   1442c:	mov	r2, #5
   14430:	ldr	r1, [pc, #576]	; 14678 <__assert_fail@plt+0x37dc>
   14434:	mov	r0, #0
   14438:	bl	10cd4 <dcgettext@plt>
   1443c:	ldr	r3, [r5]
   14440:	ldr	r2, [r5, #16]
   14444:	str	r2, [sp, #12]
   14448:	ldr	r2, [r5, #12]
   1444c:	str	r2, [sp, #8]
   14450:	ldr	r2, [r5, #8]
   14454:	str	r2, [sp, #4]
   14458:	ldr	r2, [r5, #4]
   1445c:	str	r2, [sp]
   14460:	mov	r2, r0
   14464:	mov	r1, #1
   14468:	mov	r0, r4
   1446c:	bl	10e18 <__fprintf_chk@plt>
   14470:	b	1437c <__assert_fail@plt+0x34e0>
   14474:	mov	r2, #5
   14478:	ldr	r1, [pc, #508]	; 1467c <__assert_fail@plt+0x37e0>
   1447c:	mov	r0, #0
   14480:	bl	10cd4 <dcgettext@plt>
   14484:	ldr	r3, [r5]
   14488:	ldr	r2, [r5, #20]
   1448c:	str	r2, [sp, #16]
   14490:	ldr	r2, [r5, #16]
   14494:	str	r2, [sp, #12]
   14498:	ldr	r2, [r5, #12]
   1449c:	str	r2, [sp, #8]
   144a0:	ldr	r2, [r5, #8]
   144a4:	str	r2, [sp, #4]
   144a8:	ldr	r2, [r5, #4]
   144ac:	str	r2, [sp]
   144b0:	mov	r2, r0
   144b4:	mov	r1, #1
   144b8:	mov	r0, r4
   144bc:	bl	10e18 <__fprintf_chk@plt>
   144c0:	b	1437c <__assert_fail@plt+0x34e0>
   144c4:	mov	r2, #5
   144c8:	ldr	r1, [pc, #432]	; 14680 <__assert_fail@plt+0x37e4>
   144cc:	mov	r0, #0
   144d0:	bl	10cd4 <dcgettext@plt>
   144d4:	ldr	r3, [r5]
   144d8:	ldr	r2, [r5, #24]
   144dc:	str	r2, [sp, #20]
   144e0:	ldr	r2, [r5, #20]
   144e4:	str	r2, [sp, #16]
   144e8:	ldr	r2, [r5, #16]
   144ec:	str	r2, [sp, #12]
   144f0:	ldr	r2, [r5, #12]
   144f4:	str	r2, [sp, #8]
   144f8:	ldr	r2, [r5, #8]
   144fc:	str	r2, [sp, #4]
   14500:	ldr	r2, [r5, #4]
   14504:	str	r2, [sp]
   14508:	mov	r2, r0
   1450c:	mov	r1, #1
   14510:	mov	r0, r4
   14514:	bl	10e18 <__fprintf_chk@plt>
   14518:	b	1437c <__assert_fail@plt+0x34e0>
   1451c:	mov	r2, #5
   14520:	ldr	r1, [pc, #348]	; 14684 <__assert_fail@plt+0x37e8>
   14524:	mov	r0, #0
   14528:	bl	10cd4 <dcgettext@plt>
   1452c:	ldr	r3, [r5]
   14530:	ldr	r2, [r5, #28]
   14534:	str	r2, [sp, #24]
   14538:	ldr	r2, [r5, #24]
   1453c:	str	r2, [sp, #20]
   14540:	ldr	r2, [r5, #20]
   14544:	str	r2, [sp, #16]
   14548:	ldr	r2, [r5, #16]
   1454c:	str	r2, [sp, #12]
   14550:	ldr	r2, [r5, #12]
   14554:	str	r2, [sp, #8]
   14558:	ldr	r2, [r5, #8]
   1455c:	str	r2, [sp, #4]
   14560:	ldr	r2, [r5, #4]
   14564:	str	r2, [sp]
   14568:	mov	r2, r0
   1456c:	mov	r1, #1
   14570:	mov	r0, r4
   14574:	bl	10e18 <__fprintf_chk@plt>
   14578:	b	1437c <__assert_fail@plt+0x34e0>
   1457c:	mov	r2, #5
   14580:	ldr	r1, [pc, #256]	; 14688 <__assert_fail@plt+0x37ec>
   14584:	mov	r0, #0
   14588:	bl	10cd4 <dcgettext@plt>
   1458c:	ldr	r3, [r5]
   14590:	ldr	r2, [r5, #32]
   14594:	str	r2, [sp, #28]
   14598:	ldr	r2, [r5, #28]
   1459c:	str	r2, [sp, #24]
   145a0:	ldr	r2, [r5, #24]
   145a4:	str	r2, [sp, #20]
   145a8:	ldr	r2, [r5, #20]
   145ac:	str	r2, [sp, #16]
   145b0:	ldr	r2, [r5, #16]
   145b4:	str	r2, [sp, #12]
   145b8:	ldr	r2, [r5, #12]
   145bc:	str	r2, [sp, #8]
   145c0:	ldr	r2, [r5, #8]
   145c4:	str	r2, [sp, #4]
   145c8:	ldr	r2, [r5, #4]
   145cc:	str	r2, [sp]
   145d0:	mov	r2, r0
   145d4:	mov	r1, #1
   145d8:	mov	r0, r4
   145dc:	bl	10e18 <__fprintf_chk@plt>
   145e0:	b	1437c <__assert_fail@plt+0x34e0>
   145e4:	mov	r2, #5
   145e8:	ldr	r1, [pc, #156]	; 1468c <__assert_fail@plt+0x37f0>
   145ec:	mov	r0, #0
   145f0:	bl	10cd4 <dcgettext@plt>
   145f4:	ldr	r3, [r5]
   145f8:	ldr	r2, [r5, #32]
   145fc:	str	r2, [sp, #28]
   14600:	ldr	r2, [r5, #28]
   14604:	str	r2, [sp, #24]
   14608:	ldr	r2, [r5, #24]
   1460c:	str	r2, [sp, #20]
   14610:	ldr	r2, [r5, #20]
   14614:	str	r2, [sp, #16]
   14618:	ldr	r2, [r5, #16]
   1461c:	str	r2, [sp, #12]
   14620:	ldr	r2, [r5, #12]
   14624:	str	r2, [sp, #8]
   14628:	ldr	r2, [r5, #8]
   1462c:	str	r2, [sp, #4]
   14630:	ldr	r2, [r5, #4]
   14634:	str	r2, [sp]
   14638:	mov	r2, r0
   1463c:	mov	r1, #1
   14640:	mov	r0, r4
   14644:	bl	10e18 <__fprintf_chk@plt>
   14648:	b	1437c <__assert_fail@plt+0x34e0>
   1464c:	andeq	r5, r1, r8, ror fp
   14650:	andeq	r5, r1, ip, lsl #23
   14654:	andeq	r0, r0, r6, ror #15
   14658:	andeq	r5, r1, r4, ror #28
   1465c:	muleq	r1, r0, fp
   14660:	andeq	r5, r1, ip, lsr ip
   14664:	andeq	r5, r1, r4, lsl #23
   14668:	andeq	r5, r1, r0, ror #24
   1466c:	andeq	r5, r1, r0, ror ip
   14670:	andeq	r5, r1, r8, lsl #25
   14674:	andeq	r5, r1, r4, lsr #25
   14678:	andeq	r5, r1, r4, asr #25
   1467c:	andeq	r5, r1, r8, ror #25
   14680:	andeq	r5, r1, r0, lsl sp
   14684:	andeq	r5, r1, ip, lsr sp
   14688:	andeq	r5, r1, ip, ror #26
   1468c:	andeq	r5, r1, r0, lsr #27
   14690:	push	{r4, r5, lr}
   14694:	sub	sp, sp, #12
   14698:	ldr	r5, [sp, #24]
   1469c:	ldr	ip, [r5]
   146a0:	cmp	ip, #0
   146a4:	beq	146d4 <__assert_fail@plt+0x3838>
   146a8:	mov	lr, r5
   146ac:	mov	ip, #0
   146b0:	add	ip, ip, #1
   146b4:	ldr	r4, [lr, #4]!
   146b8:	cmp	r4, #0
   146bc:	bne	146b0 <__assert_fail@plt+0x3814>
   146c0:	str	ip, [sp, #4]
   146c4:	str	r5, [sp]
   146c8:	bl	14270 <__assert_fail@plt+0x33d4>
   146cc:	add	sp, sp, #12
   146d0:	pop	{r4, r5, pc}
   146d4:	mov	ip, #0
   146d8:	b	146c0 <__assert_fail@plt+0x3824>
   146dc:	push	{r4, r5, lr}
   146e0:	sub	sp, sp, #52	; 0x34
   146e4:	ldr	r4, [sp, #64]	; 0x40
   146e8:	sub	r4, r4, #4
   146ec:	add	r5, sp, #4
   146f0:	mov	ip, #0
   146f4:	ldr	lr, [r4, #4]!
   146f8:	str	lr, [r5, #4]!
   146fc:	cmp	lr, #0
   14700:	beq	14710 <__assert_fail@plt+0x3874>
   14704:	add	ip, ip, #1
   14708:	cmp	ip, #10
   1470c:	bne	146f4 <__assert_fail@plt+0x3858>
   14710:	str	ip, [sp, #4]
   14714:	add	ip, sp, #8
   14718:	str	ip, [sp]
   1471c:	bl	14270 <__assert_fail@plt+0x33d4>
   14720:	add	sp, sp, #52	; 0x34
   14724:	pop	{r4, r5, pc}
   14728:	push	{r3}		; (str r3, [sp, #-4]!)
   1472c:	push	{lr}		; (str lr, [sp, #-4]!)
   14730:	sub	sp, sp, #16
   14734:	add	r3, sp, #24
   14738:	str	r3, [sp, #12]
   1473c:	str	r3, [sp]
   14740:	ldr	r3, [sp, #20]
   14744:	bl	146dc <__assert_fail@plt+0x3840>
   14748:	add	sp, sp, #16
   1474c:	pop	{lr}		; (ldr lr, [sp], #4)
   14750:	add	sp, sp, #4
   14754:	bx	lr
   14758:	push	{r4, lr}
   1475c:	ldr	r3, [pc, #112]	; 147d4 <__assert_fail@plt+0x3938>
   14760:	ldr	r1, [r3]
   14764:	mov	r0, #10
   14768:	bl	10cc8 <fputc_unlocked@plt>
   1476c:	mov	r2, #5
   14770:	ldr	r1, [pc, #96]	; 147d8 <__assert_fail@plt+0x393c>
   14774:	mov	r0, #0
   14778:	bl	10cd4 <dcgettext@plt>
   1477c:	ldr	r2, [pc, #88]	; 147dc <__assert_fail@plt+0x3940>
   14780:	mov	r1, r0
   14784:	mov	r0, #1
   14788:	bl	10e00 <__printf_chk@plt>
   1478c:	mov	r2, #5
   14790:	ldr	r1, [pc, #72]	; 147e0 <__assert_fail@plt+0x3944>
   14794:	mov	r0, #0
   14798:	bl	10cd4 <dcgettext@plt>
   1479c:	ldr	r3, [pc, #64]	; 147e4 <__assert_fail@plt+0x3948>
   147a0:	ldr	r2, [pc, #64]	; 147e8 <__assert_fail@plt+0x394c>
   147a4:	mov	r1, r0
   147a8:	mov	r0, #1
   147ac:	bl	10e00 <__printf_chk@plt>
   147b0:	mov	r2, #5
   147b4:	ldr	r1, [pc, #48]	; 147ec <__assert_fail@plt+0x3950>
   147b8:	mov	r0, #0
   147bc:	bl	10cd4 <dcgettext@plt>
   147c0:	ldr	r2, [pc, #40]	; 147f0 <__assert_fail@plt+0x3954>
   147c4:	mov	r1, r0
   147c8:	mov	r0, #1
   147cc:	bl	10e00 <__printf_chk@plt>
   147d0:	pop	{r4, pc}
   147d4:	andeq	r6, r2, ip, asr #2
   147d8:	ldrdeq	r5, [r1], -ip
   147dc:	strdeq	r5, [r1], -r0
   147e0:	andeq	r5, r1, r8, lsl #28
   147e4:	andeq	r5, r1, ip, ror r7
   147e8:	andeq	r5, r1, r4, lsr #15
   147ec:	andeq	r5, r1, ip, lsl lr
   147f0:	andeq	r5, r1, r4, asr #28
   147f4:	push	{r4, lr}
   147f8:	bl	14e28 <__assert_fail@plt+0x3f8c>
   147fc:	cmp	r0, #0
   14800:	popne	{r4, pc}
   14804:	bl	14d98 <__assert_fail@plt+0x3efc>
   14808:	push	{r4, lr}
   1480c:	bl	14e28 <__assert_fail@plt+0x3f8c>
   14810:	cmp	r0, #0
   14814:	popne	{r4, pc}
   14818:	bl	14d98 <__assert_fail@plt+0x3efc>
   1481c:	push	{r4, lr}
   14820:	bl	147f4 <__assert_fail@plt+0x3958>
   14824:	pop	{r4, pc}
   14828:	push	{r4, r5, r6, lr}
   1482c:	mov	r5, r0
   14830:	mov	r4, r1
   14834:	bl	14e58 <__assert_fail@plt+0x3fbc>
   14838:	cmp	r0, #0
   1483c:	popne	{r4, r5, r6, pc}
   14840:	adds	r4, r4, #0
   14844:	movne	r4, #1
   14848:	cmp	r5, #0
   1484c:	orreq	r4, r4, #1
   14850:	cmp	r4, #0
   14854:	popeq	{r4, r5, r6, pc}
   14858:	bl	14d98 <__assert_fail@plt+0x3efc>
   1485c:	push	{r4, lr}
   14860:	cmp	r1, #0
   14864:	orreq	r1, r1, #1
   14868:	bl	14e58 <__assert_fail@plt+0x3fbc>
   1486c:	cmp	r0, #0
   14870:	popne	{r4, pc}
   14874:	bl	14d98 <__assert_fail@plt+0x3efc>
   14878:	push	{r4, r5, r6, lr}
   1487c:	mov	r6, r0
   14880:	mov	r5, r1
   14884:	mov	r4, r2
   14888:	bl	14fac <__assert_fail@plt+0x4110>
   1488c:	cmp	r0, #0
   14890:	popne	{r4, r5, r6, pc}
   14894:	cmp	r6, #0
   14898:	beq	148a8 <__assert_fail@plt+0x3a0c>
   1489c:	cmp	r5, #0
   148a0:	cmpne	r4, #0
   148a4:	popeq	{r4, r5, r6, pc}
   148a8:	bl	14d98 <__assert_fail@plt+0x3efc>
   148ac:	push	{r4, lr}
   148b0:	bl	14878 <__assert_fail@plt+0x39dc>
   148b4:	pop	{r4, pc}
   148b8:	push	{r4, lr}
   148bc:	mov	ip, r1
   148c0:	mov	r3, r2
   148c4:	cmp	r2, #0
   148c8:	cmpne	r1, #0
   148cc:	moveq	r3, #1
   148d0:	moveq	ip, r3
   148d4:	mov	r2, r3
   148d8:	mov	r1, ip
   148dc:	bl	14fac <__assert_fail@plt+0x4110>
   148e0:	cmp	r0, #0
   148e4:	popne	{r4, pc}
   148e8:	bl	14d98 <__assert_fail@plt+0x3efc>
   148ec:	push	{r4, lr}
   148f0:	mov	r2, r1
   148f4:	mov	r1, r0
   148f8:	mov	r0, #0
   148fc:	bl	14878 <__assert_fail@plt+0x39dc>
   14900:	pop	{r4, pc}
   14904:	push	{r4, lr}
   14908:	mov	r2, r1
   1490c:	mov	r1, r0
   14910:	mov	r0, #0
   14914:	bl	148b8 <__assert_fail@plt+0x3a1c>
   14918:	pop	{r4, pc}
   1491c:	push	{r4, r5, r6, r7, r8, lr}
   14920:	mov	r5, r1
   14924:	mov	r6, r2
   14928:	ldr	r4, [r1]
   1492c:	subs	r7, r0, #0
   14930:	beq	1494c <__assert_fail@plt+0x3ab0>
   14934:	lsr	r2, r4, #1
   14938:	add	r3, r2, #1
   1493c:	mvn	r3, r3
   14940:	cmp	r4, r3
   14944:	bls	14970 <__assert_fail@plt+0x3ad4>
   14948:	bl	14d98 <__assert_fail@plt+0x3efc>
   1494c:	cmp	r4, #0
   14950:	bne	14978 <__assert_fail@plt+0x3adc>
   14954:	mov	r1, r2
   14958:	mov	r0, #64	; 0x40
   1495c:	bl	15100 <__assert_fail@plt+0x4264>
   14960:	cmp	r0, #0
   14964:	movne	r4, r0
   14968:	addeq	r4, r0, #1
   1496c:	b	14978 <__assert_fail@plt+0x3adc>
   14970:	add	r4, r4, #1
   14974:	add	r4, r4, r2
   14978:	mov	r2, r6
   1497c:	mov	r1, r4
   14980:	mov	r0, r7
   14984:	bl	14878 <__assert_fail@plt+0x39dc>
   14988:	str	r4, [r5]
   1498c:	pop	{r4, r5, r6, r7, r8, pc}
   14990:	push	{r4, lr}
   14994:	mov	r2, #1
   14998:	bl	1491c <__assert_fail@plt+0x3a80>
   1499c:	pop	{r4, pc}
   149a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a4:	sub	sp, sp, #12
   149a8:	mov	fp, r0
   149ac:	mov	sl, r1
   149b0:	mov	r9, r2
   149b4:	mov	r7, r3
   149b8:	ldr	r6, [sp, #48]	; 0x30
   149bc:	ldr	r5, [r1]
   149c0:	asrs	r4, r5, #1
   149c4:	bmi	14b20 <__assert_fail@plt+0x3c84>
   149c8:	cmp	r5, #0
   149cc:	blt	14b34 <__assert_fail@plt+0x3c98>
   149d0:	mvn	r3, #-2147483648	; 0x80000000
   149d4:	sub	r3, r3, r4
   149d8:	cmp	r5, r3
   149dc:	movle	r3, #0
   149e0:	movgt	r3, #1
   149e4:	cmp	r3, #0
   149e8:	addeq	r4, r4, r5
   149ec:	mvnne	r4, #-2147483648	; 0x80000000
   149f0:	mvn	r8, r7
   149f4:	lsr	r8, r8, #31
   149f8:	cmp	r7, r4
   149fc:	movge	r3, #0
   14a00:	andlt	r3, r8, #1
   14a04:	cmp	r3, #0
   14a08:	movne	r4, r7
   14a0c:	cmp	r6, #0
   14a10:	blt	14b48 <__assert_fail@plt+0x3cac>
   14a14:	cmp	r6, #0
   14a18:	beq	14bf4 <__assert_fail@plt+0x3d58>
   14a1c:	cmp	r4, #0
   14a20:	blt	14ba4 <__assert_fail@plt+0x3d08>
   14a24:	mov	r1, r6
   14a28:	mvn	r0, #-2147483648	; 0x80000000
   14a2c:	bl	1530c <__assert_fail@plt+0x4470>
   14a30:	cmp	r0, r4
   14a34:	movge	r0, #0
   14a38:	movlt	r0, #1
   14a3c:	cmp	r0, #0
   14a40:	mvnne	r3, #-2147483648	; 0x80000000
   14a44:	strne	r3, [sp, #4]
   14a48:	beq	14bdc <__assert_fail@plt+0x3d40>
   14a4c:	mov	r1, r6
   14a50:	ldr	r0, [sp, #4]
   14a54:	bl	1530c <__assert_fail@plt+0x4470>
   14a58:	mov	r4, r0
   14a5c:	mov	r1, r6
   14a60:	ldr	r0, [sp, #4]
   14a64:	bl	1552c <__assert_fail@plt+0x4690>
   14a68:	ldr	r3, [sp, #4]
   14a6c:	sub	r1, r3, r1
   14a70:	cmp	fp, #0
   14a74:	moveq	r3, #0
   14a78:	streq	r3, [sl]
   14a7c:	sub	r3, r4, r5
   14a80:	cmp	r3, r9
   14a84:	bge	14b0c <__assert_fail@plt+0x3c70>
   14a88:	cmp	r9, #0
   14a8c:	blt	14c00 <__assert_fail@plt+0x3d64>
   14a90:	cmp	r5, #0
   14a94:	blt	14c14 <__assert_fail@plt+0x3d78>
   14a98:	mvn	r3, #-2147483648	; 0x80000000
   14a9c:	sub	r3, r3, r9
   14aa0:	cmp	r5, r3
   14aa4:	movle	r3, #0
   14aa8:	movgt	r3, #1
   14aac:	cmp	r3, #0
   14ab0:	bne	14cbc <__assert_fail@plt+0x3e20>
   14ab4:	add	r5, r5, r9
   14ab8:	mov	r4, r5
   14abc:	cmp	r7, r5
   14ac0:	movge	r7, #0
   14ac4:	andlt	r7, r8, #1
   14ac8:	cmp	r7, #0
   14acc:	bne	14cbc <__assert_fail@plt+0x3e20>
   14ad0:	cmp	r6, #0
   14ad4:	blt	14c28 <__assert_fail@plt+0x3d8c>
   14ad8:	cmp	r6, #0
   14adc:	beq	14b08 <__assert_fail@plt+0x3c6c>
   14ae0:	cmp	r5, #0
   14ae4:	blt	14c84 <__assert_fail@plt+0x3de8>
   14ae8:	mov	r1, r6
   14aec:	mvn	r0, #-2147483648	; 0x80000000
   14af0:	bl	1530c <__assert_fail@plt+0x4470>
   14af4:	cmp	r5, r0
   14af8:	movle	r0, #0
   14afc:	movgt	r0, #1
   14b00:	cmp	r0, #0
   14b04:	bne	14cbc <__assert_fail@plt+0x3e20>
   14b08:	mul	r1, r5, r6
   14b0c:	mov	r0, fp
   14b10:	bl	14828 <__assert_fail@plt+0x398c>
   14b14:	str	r4, [sl]
   14b18:	add	sp, sp, #12
   14b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b20:	rsb	r3, r4, #-2147483648	; 0x80000000
   14b24:	cmp	r5, r3
   14b28:	movge	r3, #0
   14b2c:	movlt	r3, #1
   14b30:	b	149e4 <__assert_fail@plt+0x3b48>
   14b34:	rsb	r3, r5, #-2147483648	; 0x80000000
   14b38:	cmp	r4, r3
   14b3c:	movge	r3, #0
   14b40:	movlt	r3, #1
   14b44:	b	149e4 <__assert_fail@plt+0x3b48>
   14b48:	cmp	r4, #0
   14b4c:	blt	14b74 <__assert_fail@plt+0x3cd8>
   14b50:	cmn	r6, #1
   14b54:	beq	14b90 <__assert_fail@plt+0x3cf4>
   14b58:	mov	r1, r6
   14b5c:	mov	r0, #-2147483648	; 0x80000000
   14b60:	bl	1530c <__assert_fail@plt+0x4470>
   14b64:	cmp	r0, r4
   14b68:	movge	r0, #0
   14b6c:	movlt	r0, #1
   14b70:	b	14a3c <__assert_fail@plt+0x3ba0>
   14b74:	mov	r1, r6
   14b78:	mvn	r0, #-2147483648	; 0x80000000
   14b7c:	bl	1530c <__assert_fail@plt+0x4470>
   14b80:	cmp	r0, r4
   14b84:	movle	r0, #0
   14b88:	movgt	r0, #1
   14b8c:	b	14a3c <__assert_fail@plt+0x3ba0>
   14b90:	add	r0, r4, #-2147483648	; 0x80000000
   14b94:	cmp	r0, #0
   14b98:	movle	r0, #0
   14b9c:	movgt	r0, #1
   14ba0:	b	14a3c <__assert_fail@plt+0x3ba0>
   14ba4:	cmn	r4, #1
   14ba8:	beq	14bc8 <__assert_fail@plt+0x3d2c>
   14bac:	mov	r1, r4
   14bb0:	mov	r0, #-2147483648	; 0x80000000
   14bb4:	bl	1530c <__assert_fail@plt+0x4470>
   14bb8:	cmp	r6, r0
   14bbc:	movle	r0, #0
   14bc0:	movgt	r0, #1
   14bc4:	b	14a3c <__assert_fail@plt+0x3ba0>
   14bc8:	add	r0, r6, #-2147483648	; 0x80000000
   14bcc:	cmp	r0, #0
   14bd0:	movle	r0, #0
   14bd4:	movgt	r0, #1
   14bd8:	b	14a3c <__assert_fail@plt+0x3ba0>
   14bdc:	mul	r1, r6, r4
   14be0:	cmp	r1, #63	; 0x3f
   14be4:	movle	r3, #64	; 0x40
   14be8:	strle	r3, [sp, #4]
   14bec:	bgt	14a70 <__assert_fail@plt+0x3bd4>
   14bf0:	b	14a4c <__assert_fail@plt+0x3bb0>
   14bf4:	mov	r3, #64	; 0x40
   14bf8:	str	r3, [sp, #4]
   14bfc:	b	14a4c <__assert_fail@plt+0x3bb0>
   14c00:	rsb	r3, r9, #-2147483648	; 0x80000000
   14c04:	cmp	r5, r3
   14c08:	movge	r3, #0
   14c0c:	movlt	r3, #1
   14c10:	b	14aac <__assert_fail@plt+0x3c10>
   14c14:	rsb	r3, r5, #-2147483648	; 0x80000000
   14c18:	cmp	r9, r3
   14c1c:	movge	r3, #0
   14c20:	movlt	r3, #1
   14c24:	b	14aac <__assert_fail@plt+0x3c10>
   14c28:	cmp	r5, #0
   14c2c:	blt	14c54 <__assert_fail@plt+0x3db8>
   14c30:	cmn	r6, #1
   14c34:	beq	14c70 <__assert_fail@plt+0x3dd4>
   14c38:	mov	r1, r6
   14c3c:	mov	r0, #-2147483648	; 0x80000000
   14c40:	bl	1530c <__assert_fail@plt+0x4470>
   14c44:	cmp	r5, r0
   14c48:	movle	r0, #0
   14c4c:	movgt	r0, #1
   14c50:	b	14b00 <__assert_fail@plt+0x3c64>
   14c54:	mov	r1, r6
   14c58:	mvn	r0, #-2147483648	; 0x80000000
   14c5c:	bl	1530c <__assert_fail@plt+0x4470>
   14c60:	cmp	r5, r0
   14c64:	movge	r0, #0
   14c68:	movlt	r0, #1
   14c6c:	b	14b00 <__assert_fail@plt+0x3c64>
   14c70:	add	r0, r5, #-2147483648	; 0x80000000
   14c74:	cmp	r0, #0
   14c78:	movle	r0, #0
   14c7c:	movgt	r0, #1
   14c80:	b	14b00 <__assert_fail@plt+0x3c64>
   14c84:	cmn	r5, #1
   14c88:	beq	14ca8 <__assert_fail@plt+0x3e0c>
   14c8c:	mov	r1, r5
   14c90:	mov	r0, #-2147483648	; 0x80000000
   14c94:	bl	1530c <__assert_fail@plt+0x4470>
   14c98:	cmp	r6, r0
   14c9c:	movle	r0, #0
   14ca0:	movgt	r0, #1
   14ca4:	b	14b00 <__assert_fail@plt+0x3c64>
   14ca8:	add	r0, r6, #-2147483648	; 0x80000000
   14cac:	cmp	r0, #0
   14cb0:	movle	r0, #0
   14cb4:	movgt	r0, #1
   14cb8:	b	14b00 <__assert_fail@plt+0x3c64>
   14cbc:	bl	14d98 <__assert_fail@plt+0x3efc>
   14cc0:	push	{r4, lr}
   14cc4:	bl	14dd8 <__assert_fail@plt+0x3f3c>
   14cc8:	cmp	r0, #0
   14ccc:	popne	{r4, pc}
   14cd0:	bl	14d98 <__assert_fail@plt+0x3efc>
   14cd4:	push	{r4, lr}
   14cd8:	mov	r1, #1
   14cdc:	bl	14cc0 <__assert_fail@plt+0x3e24>
   14ce0:	pop	{r4, pc}
   14ce4:	push	{r4, lr}
   14ce8:	bl	14dd8 <__assert_fail@plt+0x3f3c>
   14cec:	cmp	r0, #0
   14cf0:	popne	{r4, pc}
   14cf4:	bl	14d98 <__assert_fail@plt+0x3efc>
   14cf8:	push	{r4, lr}
   14cfc:	mov	r1, #1
   14d00:	bl	14ce4 <__assert_fail@plt+0x3e48>
   14d04:	pop	{r4, pc}
   14d08:	push	{r4, r5, r6, lr}
   14d0c:	mov	r5, r0
   14d10:	mov	r4, r1
   14d14:	mov	r0, r1
   14d18:	bl	147f4 <__assert_fail@plt+0x3958>
   14d1c:	mov	r2, r4
   14d20:	mov	r1, r5
   14d24:	bl	10ca4 <memcpy@plt>
   14d28:	pop	{r4, r5, r6, pc}
   14d2c:	push	{r4, r5, r6, lr}
   14d30:	mov	r5, r0
   14d34:	mov	r4, r1
   14d38:	mov	r0, r1
   14d3c:	bl	14808 <__assert_fail@plt+0x396c>
   14d40:	mov	r2, r4
   14d44:	mov	r1, r5
   14d48:	bl	10ca4 <memcpy@plt>
   14d4c:	pop	{r4, r5, r6, pc}
   14d50:	push	{r4, r5, r6, lr}
   14d54:	mov	r5, r0
   14d58:	mov	r4, r1
   14d5c:	add	r0, r1, #1
   14d60:	bl	14808 <__assert_fail@plt+0x396c>
   14d64:	mov	r2, #0
   14d68:	strb	r2, [r0, r4]
   14d6c:	mov	r2, r4
   14d70:	mov	r1, r5
   14d74:	bl	10ca4 <memcpy@plt>
   14d78:	pop	{r4, r5, r6, pc}
   14d7c:	push	{r4, lr}
   14d80:	mov	r4, r0
   14d84:	bl	10dd0 <strlen@plt>
   14d88:	add	r1, r0, #1
   14d8c:	mov	r0, r4
   14d90:	bl	14d08 <__assert_fail@plt+0x3e6c>
   14d94:	pop	{r4, pc}
   14d98:	push	{r4, lr}
   14d9c:	ldr	r3, [pc, #40]	; 14dcc <__assert_fail@plt+0x3f30>
   14da0:	ldr	r4, [r3]
   14da4:	mov	r2, #5
   14da8:	ldr	r1, [pc, #32]	; 14dd0 <__assert_fail@plt+0x3f34>
   14dac:	mov	r0, #0
   14db0:	bl	10cd4 <dcgettext@plt>
   14db4:	mov	r3, r0
   14db8:	ldr	r2, [pc, #20]	; 14dd4 <__assert_fail@plt+0x3f38>
   14dbc:	mov	r1, #0
   14dc0:	mov	r0, r4
   14dc4:	bl	10d4c <error@plt>
   14dc8:	bl	10e84 <abort@plt>
   14dcc:	andeq	r6, r2, r8, ror #1
   14dd0:	muleq	r1, r4, lr
   14dd4:	andeq	r5, r1, r8, lsl #20
   14dd8:	push	{r4, lr}
   14ddc:	mov	r2, r0
   14de0:	mov	r3, r1
   14de4:	cmp	r1, #0
   14de8:	cmpne	r0, #0
   14dec:	moveq	r3, #1
   14df0:	moveq	r2, r3
   14df4:	umull	r0, r1, r2, r3
   14df8:	cmp	r0, #0
   14dfc:	cmpge	r1, #0
   14e00:	bne	14e14 <__assert_fail@plt+0x3f78>
   14e04:	mov	r1, r3
   14e08:	mov	r0, r2
   14e0c:	bl	10c44 <calloc@plt>
   14e10:	pop	{r4, pc}
   14e14:	bl	10ddc <__errno_location@plt>
   14e18:	mov	r3, #12
   14e1c:	str	r3, [r0]
   14e20:	mov	r0, #0
   14e24:	pop	{r4, pc}
   14e28:	push	{r4, lr}
   14e2c:	cmp	r0, #0
   14e30:	moveq	r0, #1
   14e34:	cmp	r0, #0
   14e38:	blt	14e44 <__assert_fail@plt+0x3fa8>
   14e3c:	bl	10d70 <malloc@plt>
   14e40:	pop	{r4, pc}
   14e44:	bl	10ddc <__errno_location@plt>
   14e48:	mov	r3, #12
   14e4c:	str	r3, [r0]
   14e50:	mov	r0, #0
   14e54:	pop	{r4, pc}
   14e58:	push	{r4, lr}
   14e5c:	cmp	r0, #0
   14e60:	beq	14e7c <__assert_fail@plt+0x3fe0>
   14e64:	cmp	r1, #0
   14e68:	beq	14e88 <__assert_fail@plt+0x3fec>
   14e6c:	cmp	r1, #0
   14e70:	blt	14e94 <__assert_fail@plt+0x3ff8>
   14e74:	bl	10cec <realloc@plt>
   14e78:	pop	{r4, pc}
   14e7c:	mov	r0, r1
   14e80:	bl	14e28 <__assert_fail@plt+0x3f8c>
   14e84:	pop	{r4, pc}
   14e88:	bl	11f8c <__assert_fail@plt+0x10f0>
   14e8c:	mov	r0, #0
   14e90:	pop	{r4, pc}
   14e94:	bl	10ddc <__errno_location@plt>
   14e98:	mov	r3, #12
   14e9c:	str	r3, [r0]
   14ea0:	mov	r0, #0
   14ea4:	pop	{r4, pc}
   14ea8:	push	{r4, r5, r6, lr}
   14eac:	mov	r5, r0
   14eb0:	bl	10d34 <__fpending@plt>
   14eb4:	mov	r6, r0
   14eb8:	ldr	r4, [r5]
   14ebc:	and	r4, r4, #32
   14ec0:	mov	r0, r5
   14ec4:	bl	11e80 <__assert_fail@plt+0xfe4>
   14ec8:	cmp	r4, #0
   14ecc:	bne	14ef4 <__assert_fail@plt+0x4058>
   14ed0:	cmp	r0, #0
   14ed4:	popeq	{r4, r5, r6, pc}
   14ed8:	cmp	r6, #0
   14edc:	bne	14f10 <__assert_fail@plt+0x4074>
   14ee0:	bl	10ddc <__errno_location@plt>
   14ee4:	ldr	r0, [r0]
   14ee8:	subs	r0, r0, #9
   14eec:	mvnne	r0, #0
   14ef0:	pop	{r4, r5, r6, pc}
   14ef4:	cmp	r0, #0
   14ef8:	bne	14f18 <__assert_fail@plt+0x407c>
   14efc:	bl	10ddc <__errno_location@plt>
   14f00:	mov	r3, #0
   14f04:	str	r3, [r0]
   14f08:	mvn	r0, #0
   14f0c:	pop	{r4, r5, r6, pc}
   14f10:	mvn	r0, #0
   14f14:	pop	{r4, r5, r6, pc}
   14f18:	mvn	r0, #0
   14f1c:	pop	{r4, r5, r6, pc}
   14f20:	push	{r4, lr}
   14f24:	mov	r0, #14
   14f28:	bl	10e60 <nl_langinfo@plt>
   14f2c:	cmp	r0, #0
   14f30:	beq	14f48 <__assert_fail@plt+0x40ac>
   14f34:	ldrb	r2, [r0]
   14f38:	ldr	r3, [pc, #16]	; 14f50 <__assert_fail@plt+0x40b4>
   14f3c:	cmp	r2, #0
   14f40:	moveq	r0, r3
   14f44:	pop	{r4, pc}
   14f48:	ldr	r0, [pc]	; 14f50 <__assert_fail@plt+0x40b4>
   14f4c:	pop	{r4, pc}
   14f50:	andeq	r5, r1, r8, lsr #29
   14f54:	push	{r4, r5, r6, r7, lr}
   14f58:	sub	sp, sp, #12
   14f5c:	mov	r7, r1
   14f60:	mov	r5, r2
   14f64:	subs	r6, r0, #0
   14f68:	addeq	r6, sp, #4
   14f6c:	mov	r0, r6
   14f70:	bl	10d40 <mbrtowc@plt>
   14f74:	mov	r4, r0
   14f78:	cmp	r5, #0
   14f7c:	cmnne	r0, #3
   14f80:	bhi	14f90 <__assert_fail@plt+0x40f4>
   14f84:	mov	r0, r4
   14f88:	add	sp, sp, #12
   14f8c:	pop	{r4, r5, r6, r7, pc}
   14f90:	mov	r0, #0
   14f94:	bl	14ff8 <__assert_fail@plt+0x415c>
   14f98:	cmp	r0, #0
   14f9c:	ldrbeq	r3, [r7]
   14fa0:	streq	r3, [r6]
   14fa4:	moveq	r4, #1
   14fa8:	b	14f84 <__assert_fail@plt+0x40e8>
   14fac:	push	{r4, r5, r6, lr}
   14fb0:	mov	r6, r0
   14fb4:	mov	r5, r1
   14fb8:	subs	r4, r2, #0
   14fbc:	beq	14fe8 <__assert_fail@plt+0x414c>
   14fc0:	mov	r1, r4
   14fc4:	mvn	r0, #0
   14fc8:	bl	15100 <__assert_fail@plt+0x4264>
   14fcc:	cmp	r0, r5
   14fd0:	bcs	14fe8 <__assert_fail@plt+0x414c>
   14fd4:	bl	10ddc <__errno_location@plt>
   14fd8:	mov	r3, #12
   14fdc:	str	r3, [r0]
   14fe0:	mov	r0, #0
   14fe4:	pop	{r4, r5, r6, pc}
   14fe8:	mul	r1, r5, r4
   14fec:	mov	r0, r6
   14ff0:	bl	14e58 <__assert_fail@plt+0x3fbc>
   14ff4:	pop	{r4, r5, r6, pc}
   14ff8:	push	{lr}		; (str lr, [sp, #-4]!)
   14ffc:	sub	sp, sp, #268	; 0x10c
   15000:	ldr	r2, [pc, #68]	; 1504c <__assert_fail@plt+0x41b0>
   15004:	add	r1, sp, #4
   15008:	bl	15058 <__assert_fail@plt+0x41bc>
   1500c:	cmp	r0, #0
   15010:	movne	r0, #0
   15014:	bne	15044 <__assert_fail@plt+0x41a8>
   15018:	ldr	r1, [pc, #48]	; 15050 <__assert_fail@plt+0x41b4>
   1501c:	add	r0, sp, #4
   15020:	bl	10c68 <strcmp@plt>
   15024:	cmp	r0, #0
   15028:	moveq	r0, #0
   1502c:	beq	15044 <__assert_fail@plt+0x41a8>
   15030:	ldr	r1, [pc, #28]	; 15054 <__assert_fail@plt+0x41b8>
   15034:	add	r0, sp, #4
   15038:	bl	10c68 <strcmp@plt>
   1503c:	adds	r0, r0, #0
   15040:	movne	r0, #1
   15044:	add	sp, sp, #268	; 0x10c
   15048:	pop	{pc}		; (ldr pc, [sp], #4)
   1504c:	andeq	r0, r0, r1, lsl #2
   15050:			; <UNDEFINED> instruction: 0x00015eb0
   15054:			; <UNDEFINED> instruction: 0x00015eb4
   15058:	push	{r4, r5, r6, lr}
   1505c:	mov	r6, r1
   15060:	mov	r4, r2
   15064:	mov	r1, #0
   15068:	bl	10e48 <setlocale@plt>
   1506c:	subs	r5, r0, #0
   15070:	beq	15094 <__assert_fail@plt+0x41f8>
   15074:	mov	r0, r5
   15078:	bl	10dd0 <strlen@plt>
   1507c:	cmp	r4, r0
   15080:	bhi	150ac <__assert_fail@plt+0x4210>
   15084:	cmp	r4, #0
   15088:	bne	150c4 <__assert_fail@plt+0x4228>
   1508c:	mov	r0, #34	; 0x22
   15090:	pop	{r4, r5, r6, pc}
   15094:	cmp	r4, #0
   15098:	beq	150e8 <__assert_fail@plt+0x424c>
   1509c:	mov	r3, #0
   150a0:	strb	r3, [r6]
   150a4:	mov	r0, #22
   150a8:	pop	{r4, r5, r6, pc}
   150ac:	add	r2, r0, #1
   150b0:	mov	r1, r5
   150b4:	mov	r0, r6
   150b8:	bl	10ca4 <memcpy@plt>
   150bc:	mov	r0, #0
   150c0:	pop	{r4, r5, r6, pc}
   150c4:	sub	r4, r4, #1
   150c8:	mov	r2, r4
   150cc:	mov	r1, r5
   150d0:	mov	r0, r6
   150d4:	bl	10ca4 <memcpy@plt>
   150d8:	mov	r3, #0
   150dc:	strb	r3, [r6, r4]
   150e0:	mov	r0, #34	; 0x22
   150e4:	pop	{r4, r5, r6, pc}
   150e8:	mov	r0, #22
   150ec:	pop	{r4, r5, r6, pc}
   150f0:	push	{r4, lr}
   150f4:	mov	r1, #0
   150f8:	bl	10e48 <setlocale@plt>
   150fc:	pop	{r4, pc}
   15100:	subs	r2, r1, #1
   15104:	bxeq	lr
   15108:	bcc	152e0 <__assert_fail@plt+0x4444>
   1510c:	cmp	r0, r1
   15110:	bls	152c4 <__assert_fail@plt+0x4428>
   15114:	tst	r1, r2
   15118:	beq	152d0 <__assert_fail@plt+0x4434>
   1511c:	clz	r3, r0
   15120:	clz	r2, r1
   15124:	sub	r3, r2, r3
   15128:	rsbs	r3, r3, #31
   1512c:	addne	r3, r3, r3, lsl #1
   15130:	mov	r2, #0
   15134:	addne	pc, pc, r3, lsl #2
   15138:	nop			; (mov r0, r0)
   1513c:	cmp	r0, r1, lsl #31
   15140:	adc	r2, r2, r2
   15144:	subcs	r0, r0, r1, lsl #31
   15148:	cmp	r0, r1, lsl #30
   1514c:	adc	r2, r2, r2
   15150:	subcs	r0, r0, r1, lsl #30
   15154:	cmp	r0, r1, lsl #29
   15158:	adc	r2, r2, r2
   1515c:	subcs	r0, r0, r1, lsl #29
   15160:	cmp	r0, r1, lsl #28
   15164:	adc	r2, r2, r2
   15168:	subcs	r0, r0, r1, lsl #28
   1516c:	cmp	r0, r1, lsl #27
   15170:	adc	r2, r2, r2
   15174:	subcs	r0, r0, r1, lsl #27
   15178:	cmp	r0, r1, lsl #26
   1517c:	adc	r2, r2, r2
   15180:	subcs	r0, r0, r1, lsl #26
   15184:	cmp	r0, r1, lsl #25
   15188:	adc	r2, r2, r2
   1518c:	subcs	r0, r0, r1, lsl #25
   15190:	cmp	r0, r1, lsl #24
   15194:	adc	r2, r2, r2
   15198:	subcs	r0, r0, r1, lsl #24
   1519c:	cmp	r0, r1, lsl #23
   151a0:	adc	r2, r2, r2
   151a4:	subcs	r0, r0, r1, lsl #23
   151a8:	cmp	r0, r1, lsl #22
   151ac:	adc	r2, r2, r2
   151b0:	subcs	r0, r0, r1, lsl #22
   151b4:	cmp	r0, r1, lsl #21
   151b8:	adc	r2, r2, r2
   151bc:	subcs	r0, r0, r1, lsl #21
   151c0:	cmp	r0, r1, lsl #20
   151c4:	adc	r2, r2, r2
   151c8:	subcs	r0, r0, r1, lsl #20
   151cc:	cmp	r0, r1, lsl #19
   151d0:	adc	r2, r2, r2
   151d4:	subcs	r0, r0, r1, lsl #19
   151d8:	cmp	r0, r1, lsl #18
   151dc:	adc	r2, r2, r2
   151e0:	subcs	r0, r0, r1, lsl #18
   151e4:	cmp	r0, r1, lsl #17
   151e8:	adc	r2, r2, r2
   151ec:	subcs	r0, r0, r1, lsl #17
   151f0:	cmp	r0, r1, lsl #16
   151f4:	adc	r2, r2, r2
   151f8:	subcs	r0, r0, r1, lsl #16
   151fc:	cmp	r0, r1, lsl #15
   15200:	adc	r2, r2, r2
   15204:	subcs	r0, r0, r1, lsl #15
   15208:	cmp	r0, r1, lsl #14
   1520c:	adc	r2, r2, r2
   15210:	subcs	r0, r0, r1, lsl #14
   15214:	cmp	r0, r1, lsl #13
   15218:	adc	r2, r2, r2
   1521c:	subcs	r0, r0, r1, lsl #13
   15220:	cmp	r0, r1, lsl #12
   15224:	adc	r2, r2, r2
   15228:	subcs	r0, r0, r1, lsl #12
   1522c:	cmp	r0, r1, lsl #11
   15230:	adc	r2, r2, r2
   15234:	subcs	r0, r0, r1, lsl #11
   15238:	cmp	r0, r1, lsl #10
   1523c:	adc	r2, r2, r2
   15240:	subcs	r0, r0, r1, lsl #10
   15244:	cmp	r0, r1, lsl #9
   15248:	adc	r2, r2, r2
   1524c:	subcs	r0, r0, r1, lsl #9
   15250:	cmp	r0, r1, lsl #8
   15254:	adc	r2, r2, r2
   15258:	subcs	r0, r0, r1, lsl #8
   1525c:	cmp	r0, r1, lsl #7
   15260:	adc	r2, r2, r2
   15264:	subcs	r0, r0, r1, lsl #7
   15268:	cmp	r0, r1, lsl #6
   1526c:	adc	r2, r2, r2
   15270:	subcs	r0, r0, r1, lsl #6
   15274:	cmp	r0, r1, lsl #5
   15278:	adc	r2, r2, r2
   1527c:	subcs	r0, r0, r1, lsl #5
   15280:	cmp	r0, r1, lsl #4
   15284:	adc	r2, r2, r2
   15288:	subcs	r0, r0, r1, lsl #4
   1528c:	cmp	r0, r1, lsl #3
   15290:	adc	r2, r2, r2
   15294:	subcs	r0, r0, r1, lsl #3
   15298:	cmp	r0, r1, lsl #2
   1529c:	adc	r2, r2, r2
   152a0:	subcs	r0, r0, r1, lsl #2
   152a4:	cmp	r0, r1, lsl #1
   152a8:	adc	r2, r2, r2
   152ac:	subcs	r0, r0, r1, lsl #1
   152b0:	cmp	r0, r1
   152b4:	adc	r2, r2, r2
   152b8:	subcs	r0, r0, r1
   152bc:	mov	r0, r2
   152c0:	bx	lr
   152c4:	moveq	r0, #1
   152c8:	movne	r0, #0
   152cc:	bx	lr
   152d0:	clz	r2, r1
   152d4:	rsb	r2, r2, #31
   152d8:	lsr	r0, r0, r2
   152dc:	bx	lr
   152e0:	cmp	r0, #0
   152e4:	mvnne	r0, #0
   152e8:	b	1554c <__assert_fail@plt+0x46b0>
   152ec:	cmp	r1, #0
   152f0:	beq	152e0 <__assert_fail@plt+0x4444>
   152f4:	push	{r0, r1, lr}
   152f8:	bl	15100 <__assert_fail@plt+0x4264>
   152fc:	pop	{r1, r2, lr}
   15300:	mul	r3, r2, r0
   15304:	sub	r1, r1, r3
   15308:	bx	lr
   1530c:	cmp	r1, #0
   15310:	beq	1551c <__assert_fail@plt+0x4680>
   15314:	eor	ip, r0, r1
   15318:	rsbmi	r1, r1, #0
   1531c:	subs	r2, r1, #1
   15320:	beq	154e8 <__assert_fail@plt+0x464c>
   15324:	movs	r3, r0
   15328:	rsbmi	r3, r0, #0
   1532c:	cmp	r3, r1
   15330:	bls	154f4 <__assert_fail@plt+0x4658>
   15334:	tst	r1, r2
   15338:	beq	15504 <__assert_fail@plt+0x4668>
   1533c:	clz	r2, r3
   15340:	clz	r0, r1
   15344:	sub	r2, r0, r2
   15348:	rsbs	r2, r2, #31
   1534c:	addne	r2, r2, r2, lsl #1
   15350:	mov	r0, #0
   15354:	addne	pc, pc, r2, lsl #2
   15358:	nop			; (mov r0, r0)
   1535c:	cmp	r3, r1, lsl #31
   15360:	adc	r0, r0, r0
   15364:	subcs	r3, r3, r1, lsl #31
   15368:	cmp	r3, r1, lsl #30
   1536c:	adc	r0, r0, r0
   15370:	subcs	r3, r3, r1, lsl #30
   15374:	cmp	r3, r1, lsl #29
   15378:	adc	r0, r0, r0
   1537c:	subcs	r3, r3, r1, lsl #29
   15380:	cmp	r3, r1, lsl #28
   15384:	adc	r0, r0, r0
   15388:	subcs	r3, r3, r1, lsl #28
   1538c:	cmp	r3, r1, lsl #27
   15390:	adc	r0, r0, r0
   15394:	subcs	r3, r3, r1, lsl #27
   15398:	cmp	r3, r1, lsl #26
   1539c:	adc	r0, r0, r0
   153a0:	subcs	r3, r3, r1, lsl #26
   153a4:	cmp	r3, r1, lsl #25
   153a8:	adc	r0, r0, r0
   153ac:	subcs	r3, r3, r1, lsl #25
   153b0:	cmp	r3, r1, lsl #24
   153b4:	adc	r0, r0, r0
   153b8:	subcs	r3, r3, r1, lsl #24
   153bc:	cmp	r3, r1, lsl #23
   153c0:	adc	r0, r0, r0
   153c4:	subcs	r3, r3, r1, lsl #23
   153c8:	cmp	r3, r1, lsl #22
   153cc:	adc	r0, r0, r0
   153d0:	subcs	r3, r3, r1, lsl #22
   153d4:	cmp	r3, r1, lsl #21
   153d8:	adc	r0, r0, r0
   153dc:	subcs	r3, r3, r1, lsl #21
   153e0:	cmp	r3, r1, lsl #20
   153e4:	adc	r0, r0, r0
   153e8:	subcs	r3, r3, r1, lsl #20
   153ec:	cmp	r3, r1, lsl #19
   153f0:	adc	r0, r0, r0
   153f4:	subcs	r3, r3, r1, lsl #19
   153f8:	cmp	r3, r1, lsl #18
   153fc:	adc	r0, r0, r0
   15400:	subcs	r3, r3, r1, lsl #18
   15404:	cmp	r3, r1, lsl #17
   15408:	adc	r0, r0, r0
   1540c:	subcs	r3, r3, r1, lsl #17
   15410:	cmp	r3, r1, lsl #16
   15414:	adc	r0, r0, r0
   15418:	subcs	r3, r3, r1, lsl #16
   1541c:	cmp	r3, r1, lsl #15
   15420:	adc	r0, r0, r0
   15424:	subcs	r3, r3, r1, lsl #15
   15428:	cmp	r3, r1, lsl #14
   1542c:	adc	r0, r0, r0
   15430:	subcs	r3, r3, r1, lsl #14
   15434:	cmp	r3, r1, lsl #13
   15438:	adc	r0, r0, r0
   1543c:	subcs	r3, r3, r1, lsl #13
   15440:	cmp	r3, r1, lsl #12
   15444:	adc	r0, r0, r0
   15448:	subcs	r3, r3, r1, lsl #12
   1544c:	cmp	r3, r1, lsl #11
   15450:	adc	r0, r0, r0
   15454:	subcs	r3, r3, r1, lsl #11
   15458:	cmp	r3, r1, lsl #10
   1545c:	adc	r0, r0, r0
   15460:	subcs	r3, r3, r1, lsl #10
   15464:	cmp	r3, r1, lsl #9
   15468:	adc	r0, r0, r0
   1546c:	subcs	r3, r3, r1, lsl #9
   15470:	cmp	r3, r1, lsl #8
   15474:	adc	r0, r0, r0
   15478:	subcs	r3, r3, r1, lsl #8
   1547c:	cmp	r3, r1, lsl #7
   15480:	adc	r0, r0, r0
   15484:	subcs	r3, r3, r1, lsl #7
   15488:	cmp	r3, r1, lsl #6
   1548c:	adc	r0, r0, r0
   15490:	subcs	r3, r3, r1, lsl #6
   15494:	cmp	r3, r1, lsl #5
   15498:	adc	r0, r0, r0
   1549c:	subcs	r3, r3, r1, lsl #5
   154a0:	cmp	r3, r1, lsl #4
   154a4:	adc	r0, r0, r0
   154a8:	subcs	r3, r3, r1, lsl #4
   154ac:	cmp	r3, r1, lsl #3
   154b0:	adc	r0, r0, r0
   154b4:	subcs	r3, r3, r1, lsl #3
   154b8:	cmp	r3, r1, lsl #2
   154bc:	adc	r0, r0, r0
   154c0:	subcs	r3, r3, r1, lsl #2
   154c4:	cmp	r3, r1, lsl #1
   154c8:	adc	r0, r0, r0
   154cc:	subcs	r3, r3, r1, lsl #1
   154d0:	cmp	r3, r1
   154d4:	adc	r0, r0, r0
   154d8:	subcs	r3, r3, r1
   154dc:	cmp	ip, #0
   154e0:	rsbmi	r0, r0, #0
   154e4:	bx	lr
   154e8:	teq	ip, r0
   154ec:	rsbmi	r0, r0, #0
   154f0:	bx	lr
   154f4:	movcc	r0, #0
   154f8:	asreq	r0, ip, #31
   154fc:	orreq	r0, r0, #1
   15500:	bx	lr
   15504:	clz	r2, r1
   15508:	rsb	r2, r2, #31
   1550c:	cmp	ip, #0
   15510:	lsr	r0, r3, r2
   15514:	rsbmi	r0, r0, #0
   15518:	bx	lr
   1551c:	cmp	r0, #0
   15520:	mvngt	r0, #-2147483648	; 0x80000000
   15524:	movlt	r0, #-2147483648	; 0x80000000
   15528:	b	1554c <__assert_fail@plt+0x46b0>
   1552c:	cmp	r1, #0
   15530:	beq	1551c <__assert_fail@plt+0x4680>
   15534:	push	{r0, r1, lr}
   15538:	bl	15314 <__assert_fail@plt+0x4478>
   1553c:	pop	{r1, r2, lr}
   15540:	mul	r3, r2, r0
   15544:	sub	r1, r1, r3
   15548:	bx	lr
   1554c:	push	{r1, lr}
   15550:	mov	r0, #8
   15554:	bl	10c5c <raise@plt>
   15558:	pop	{r1, pc}
   1555c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15560:	mov	r7, r0
   15564:	ldr	r6, [pc, #72]	; 155b4 <__assert_fail@plt+0x4718>
   15568:	ldr	r5, [pc, #72]	; 155b8 <__assert_fail@plt+0x471c>
   1556c:	add	r6, pc, r6
   15570:	add	r5, pc, r5
   15574:	sub	r6, r6, r5
   15578:	mov	r8, r1
   1557c:	mov	r9, r2
   15580:	bl	10c24 <calloc@plt-0x20>
   15584:	asrs	r6, r6, #2
   15588:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1558c:	mov	r4, #0
   15590:	add	r4, r4, #1
   15594:	ldr	r3, [r5], #4
   15598:	mov	r2, r9
   1559c:	mov	r1, r8
   155a0:	mov	r0, r7
   155a4:	blx	r3
   155a8:	cmp	r6, r4
   155ac:	bne	15590 <__assert_fail@plt+0x46f4>
   155b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155b4:	muleq	r1, ip, r9
   155b8:	muleq	r1, r4, r9
   155bc:	bx	lr
   155c0:	ldr	r3, [pc, #12]	; 155d4 <__assert_fail@plt+0x4738>
   155c4:	mov	r1, #0
   155c8:	add	r3, pc, r3
   155cc:	ldr	r2, [r3]
   155d0:	b	10de8 <__cxa_atexit@plt>
   155d4:	andeq	r0, r1, r0, lsl fp

Disassembly of section .fini:

000155d8 <.fini>:
   155d8:	push	{r3, lr}
   155dc:	pop	{r3, pc}
