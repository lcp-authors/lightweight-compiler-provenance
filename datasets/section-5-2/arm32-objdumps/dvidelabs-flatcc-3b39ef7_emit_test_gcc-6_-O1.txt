
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011f98 <.init>:
   11f98:	push	{r3, lr}
   11f9c:	bl	120cc <_start@@Base+0x3c>
   11fa0:	pop	{r3, pc}

Disassembly of section .plt:

00011fa4 <printf@plt-0x14>:
   11fa4:	push	{lr}		; (str lr, [sp, #-4]!)
   11fa8:	ldr	lr, [pc, #4]	; 11fb4 <printf@plt-0x4>
   11fac:	add	lr, pc, lr
   11fb0:	ldr	pc, [lr, #8]!
   11fb4:	andeq	r6, r1, ip, asr #32

00011fb8 <printf@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #90112	; 0x16000
   11fc0:	ldr	pc, [ip, #76]!	; 0x4c

00011fc4 <free@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #90112	; 0x16000
   11fcc:	ldr	pc, [ip, #68]!	; 0x44

00011fd0 <memcpy@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #90112	; 0x16000
   11fd8:	ldr	pc, [ip, #60]!	; 0x3c

00011fdc <memcmp@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #90112	; 0x16000
   11fe4:	ldr	pc, [ip, #52]!	; 0x34

00011fe8 <realloc@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #90112	; 0x16000
   11ff0:	ldr	pc, [ip, #44]!	; 0x2c

00011ff4 <fwrite@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #90112	; 0x16000
   11ffc:	ldr	pc, [ip, #36]!	; 0x24

00012000 <puts@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #90112	; 0x16000
   12008:	ldr	pc, [ip, #28]!

0001200c <malloc@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #90112	; 0x16000
   12014:	ldr	pc, [ip, #20]!

00012018 <__libc_start_main@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #90112	; 0x16000
   12020:	ldr	pc, [ip, #12]!

00012024 <__gmon_start__@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #90112	; 0x16000
   1202c:	ldr	pc, [ip, #4]!

00012030 <strlen@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #86016	; 0x15000
   12038:	ldr	pc, [ip, #4092]!	; 0xffc

0001203c <fprintf@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #86016	; 0x15000
   12044:	ldr	pc, [ip, #4084]!	; 0xff4

00012048 <posix_memalign@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #86016	; 0x15000
   12050:	ldr	pc, [ip, #4076]!	; 0xfec

00012054 <memset@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #86016	; 0x15000
   1205c:	ldr	pc, [ip, #4068]!	; 0xfe4

00012060 <memchr@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #86016	; 0x15000
   12068:	ldr	pc, [ip, #4060]!	; 0xfdc

0001206c <fputc@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #86016	; 0x15000
   12074:	ldr	pc, [ip, #4052]!	; 0xfd4

00012078 <abort@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #86016	; 0x15000
   12080:	ldr	pc, [ip, #4044]!	; 0xfcc

00012084 <__assert_fail@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #86016	; 0x15000
   1208c:	ldr	pc, [ip, #4036]!	; 0xfc4

Disassembly of section .text:

00012090 <_start@@Base>:
   12090:	mov	fp, #0
   12094:	mov	lr, #0
   12098:	pop	{r1}		; (ldr r1, [sp], #4)
   1209c:	mov	r2, sp
   120a0:	push	{r2}		; (str r2, [sp, #-4]!)
   120a4:	push	{r0}		; (str r0, [sp, #-4]!)
   120a8:	ldr	ip, [pc, #16]	; 120c0 <_start@@Base+0x30>
   120ac:	push	{ip}		; (str ip, [sp, #-4]!)
   120b0:	ldr	r0, [pc, #12]	; 120c4 <_start@@Base+0x34>
   120b4:	ldr	r3, [pc, #12]	; 120c8 <_start@@Base+0x38>
   120b8:	bl	12018 <__libc_start_main@plt>
   120bc:	bl	12078 <abort@plt>
   120c0:	andeq	r6, r1, ip, ror pc
   120c4:			; <UNDEFINED> instruction: 0x000128b0
   120c8:	andeq	r6, r1, ip, lsl pc
   120cc:	ldr	r3, [pc, #20]	; 120e8 <_start@@Base+0x58>
   120d0:	ldr	r2, [pc, #20]	; 120ec <_start@@Base+0x5c>
   120d4:	add	r3, pc, r3
   120d8:	ldr	r2, [r3, r2]
   120dc:	cmp	r2, #0
   120e0:	bxeq	lr
   120e4:	b	12024 <__gmon_start__@plt>
   120e8:	andeq	r5, r1, r4, lsr #30
   120ec:	andeq	r0, r0, r4, asr r0
   120f0:	ldr	r3, [pc, #28]	; 12114 <_start@@Base+0x84>
   120f4:	ldr	r0, [pc, #28]	; 12118 <_start@@Base+0x88>
   120f8:	sub	r3, r3, r0
   120fc:	cmp	r3, #6
   12100:	bxls	lr
   12104:	ldr	r3, [pc, #16]	; 1211c <_start@@Base+0x8c>
   12108:	cmp	r3, #0
   1210c:	bxeq	lr
   12110:	bx	r3
   12114:	andeq	r8, r2, r3, rrx
   12118:	andeq	r8, r2, r0, rrx
   1211c:	andeq	r0, r0, r0
   12120:	ldr	r1, [pc, #36]	; 1214c <_start@@Base+0xbc>
   12124:	ldr	r0, [pc, #36]	; 12150 <_start@@Base+0xc0>
   12128:	sub	r1, r1, r0
   1212c:	asr	r1, r1, #2
   12130:	add	r1, r1, r1, lsr #31
   12134:	asrs	r1, r1, #1
   12138:	bxeq	lr
   1213c:	ldr	r3, [pc, #16]	; 12154 <_start@@Base+0xc4>
   12140:	cmp	r3, #0
   12144:	bxeq	lr
   12148:	bx	r3
   1214c:	andeq	r8, r2, r0, rrx
   12150:	andeq	r8, r2, r0, rrx
   12154:	andeq	r0, r0, r0
   12158:	push	{r4, lr}
   1215c:	ldr	r4, [pc, #24]	; 1217c <_start@@Base+0xec>
   12160:	ldrb	r3, [r4]
   12164:	cmp	r3, #0
   12168:	popne	{r4, pc}
   1216c:	bl	120f0 <_start@@Base+0x60>
   12170:	mov	r3, #1
   12174:	strb	r3, [r4]
   12178:	pop	{r4, pc}
   1217c:	andeq	r8, r2, r4, rrx
   12180:	ldr	r0, [pc, #40]	; 121b0 <_start@@Base+0x120>
   12184:	ldr	r3, [r0]
   12188:	cmp	r3, #0
   1218c:	bne	12194 <_start@@Base+0x104>
   12190:	b	12120 <_start@@Base+0x90>
   12194:	ldr	r3, [pc, #24]	; 121b4 <_start@@Base+0x124>
   12198:	cmp	r3, #0
   1219c:	beq	12190 <_start@@Base+0x100>
   121a0:	push	{r4, lr}
   121a4:	blx	r3
   121a8:	pop	{r4, lr}
   121ac:	b	12120 <_start@@Base+0x90>
   121b0:	andeq	r7, r2, r4, lsl pc
   121b4:	andeq	r0, r0, r0

000121b8 <dbg_emitter@@Base>:
   121b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121bc:	mov	r7, r1
   121c0:	mov	r9, r2
   121c4:	mov	r6, r3
   121c8:	ldr	r3, [sp, #40]	; 0x28
   121cc:	mov	r2, r6
   121d0:	mov	r1, r9
   121d4:	ldr	r0, [pc, #124]	; 12258 <dbg_emitter@@Base+0xa0>
   121d8:	bl	11fb8 <printf@plt>
   121dc:	cmp	r9, #0
   121e0:	ble	12228 <dbg_emitter@@Base+0x70>
   121e4:	mov	r5, r7
   121e8:	mov	r4, #0
   121ec:	ldr	sl, [pc, #104]	; 1225c <dbg_emitter@@Base+0xa4>
   121f0:	ldr	fp, [pc, #104]	; 12260 <dbg_emitter@@Base+0xa8>
   121f4:	mov	r8, r4
   121f8:	ldr	r3, [r7, r4, lsl #3]
   121fc:	cmp	r3, sl
   12200:	beq	12230 <dbg_emitter@@Base+0x78>
   12204:	ldr	r3, [r7, r8, lsl #3]
   12208:	cmp	r3, #0
   1220c:	beq	12244 <dbg_emitter@@Base+0x8c>
   12210:	ldr	r3, [r5, #4]
   12214:	add	r6, r6, r3
   12218:	add	r4, r4, #1
   1221c:	add	r5, r5, #8
   12220:	cmp	r9, r4
   12224:	bne	121f4 <dbg_emitter@@Base+0x3c>
   12228:	mov	r0, #0
   1222c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12230:	ldr	r2, [r5, #4]
   12234:	mov	r1, r6
   12238:	mov	r0, fp
   1223c:	bl	11fb8 <printf@plt>
   12240:	b	12204 <dbg_emitter@@Base+0x4c>
   12244:	ldr	r2, [r5, #4]
   12248:	mov	r1, r6
   1224c:	ldr	r0, [pc, #16]	; 12264 <dbg_emitter@@Base+0xac>
   12250:	bl	11fb8 <printf@plt>
   12254:	b	12210 <dbg_emitter@@Base+0x58>
   12258:	andeq	r7, r1, r0
   1225c:			; <UNDEFINED> instruction: 0x000172bc
   12260:	andeq	r7, r1, r4, lsr r0
   12264:	andeq	r7, r1, r8, asr r0

00012268 <debug_test@@Base>:
   12268:	push	{r4, r5, lr}
   1226c:	sub	sp, sp, #284	; 0x11c
   12270:	mov	r2, #40	; 0x28
   12274:	mov	r1, #0
   12278:	add	r0, sp, #8
   1227c:	bl	12054 <memset@plt>
   12280:	ldr	r0, [pc, #340]	; 123dc <debug_test@@Base+0x174>
   12284:	bl	12000 <puts@plt>
   12288:	mov	r4, #0
   1228c:	str	r4, [sp]
   12290:	mov	r3, r4
   12294:	mov	r2, r4
   12298:	ldr	r1, [pc, #320]	; 123e0 <debug_test@@Base+0x178>
   1229c:	add	r0, sp, #48	; 0x30
   122a0:	bl	12ee4 <flatcc_builder_custom_init@@Base>
   122a4:	mvn	r3, #-1073741824	; 0xc0000000
   122a8:	str	r3, [sp, #4]
   122ac:	mov	r3, #4
   122b0:	str	r3, [sp]
   122b4:	mov	r2, #10
   122b8:	add	r1, sp, #8
   122bc:	add	r0, sp, #48	; 0x30
   122c0:	bl	152ac <flatcc_builder_create_vector@@Base>
   122c4:	mov	r5, r0
   122c8:	mov	r3, r4
   122cc:	mov	r2, r4
   122d0:	mov	r1, r4
   122d4:	add	r0, sp, #48	; 0x30
   122d8:	bl	1387c <flatcc_builder_start_buffer@@Base>
   122dc:	cmp	r0, r4
   122e0:	beq	122f8 <debug_test@@Base+0x90>
   122e4:	add	r0, sp, #48	; 0x30
   122e8:	bl	130f0 <flatcc_builder_clear@@Base>
   122ec:	mov	r0, #0
   122f0:	add	sp, sp, #284	; 0x11c
   122f4:	pop	{r4, r5, pc}
   122f8:	mov	r1, #3
   122fc:	add	r0, sp, #48	; 0x30
   12300:	bl	146a8 <flatcc_builder_start_table@@Base>
   12304:	cmp	r0, r4
   12308:	bne	123bc <debug_test@@Base+0x154>
   1230c:	mov	r3, #8
   12310:	mov	r2, r3
   12314:	mov	r1, r4
   12318:	add	r0, sp, #48	; 0x30
   1231c:	bl	160a4 <flatcc_builder_table_add@@Base>
   12320:	cmp	r0, #0
   12324:	beq	123cc <debug_test@@Base+0x164>
   12328:	mov	r2, #42	; 0x2a
   1232c:	mov	r3, #0
   12330:	strd	r2, [r0]
   12334:	cmp	r5, r4
   12338:	bne	12344 <debug_test@@Base+0xdc>
   1233c:	mov	r1, #0
   12340:	b	123c0 <debug_test@@Base+0x158>
   12344:	mov	r1, #2
   12348:	add	r0, sp, #48	; 0x30
   1234c:	bl	16270 <flatcc_builder_table_add_offset@@Base>
   12350:	cmp	r0, #0
   12354:	beq	1233c <debug_test@@Base+0xd4>
   12358:	str	r5, [r0]
   1235c:	mov	r3, #1
   12360:	mov	r2, r3
   12364:	mov	r1, r3
   12368:	add	r0, sp, #48	; 0x30
   1236c:	bl	160a4 <flatcc_builder_table_add@@Base>
   12370:	cmp	r0, #0
   12374:	beq	123d4 <debug_test@@Base+0x16c>
   12378:	mov	r3, #1
   1237c:	strb	r3, [r0]
   12380:	mov	r2, r4
   12384:	ldr	r1, [pc, #88]	; 123e4 <debug_test@@Base+0x17c>
   12388:	add	r0, sp, #48	; 0x30
   1238c:	bl	1504c <flatcc_builder_check_required@@Base>
   12390:	cmp	r0, r4
   12394:	beq	123a8 <debug_test@@Base+0x140>
   12398:	add	r0, sp, #48	; 0x30
   1239c:	bl	150f8 <flatcc_builder_end_table@@Base>
   123a0:	mov	r1, r0
   123a4:	b	123c0 <debug_test@@Base+0x158>
   123a8:	ldr	r3, [pc, #56]	; 123e8 <debug_test@@Base+0x180>
   123ac:	mov	r2, #21
   123b0:	ldr	r1, [pc, #52]	; 123ec <debug_test@@Base+0x184>
   123b4:	ldr	r0, [pc, #52]	; 123f0 <debug_test@@Base+0x188>
   123b8:	bl	12084 <__assert_fail@plt>
   123bc:	mov	r1, #0
   123c0:	add	r0, sp, #48	; 0x30
   123c4:	bl	13934 <flatcc_builder_end_buffer@@Base>
   123c8:	b	122e4 <debug_test@@Base+0x7c>
   123cc:	mov	r1, #0
   123d0:	b	123c0 <debug_test@@Base+0x158>
   123d4:	mov	r1, #0
   123d8:	b	123c0 <debug_test@@Base+0x158>
   123dc:	andeq	r7, r1, r8, lsl #1
   123e0:			; <UNDEFINED> instruction: 0x000121b8
   123e4:	andeq	r6, r1, ip, lsl #31
   123e8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   123ec:	ldrdeq	r7, [r1], -ip
   123f0:	andeq	r7, r1, ip, lsr r1

000123f4 <emit_test@@Base>:
   123f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123f8:	sub	sp, sp, #340	; 0x154
   123fc:	ldr	r4, [pc, #1124]	; 12868 <emit_test@@Base+0x474>
   12400:	add	ip, sp, #276	; 0x114
   12404:	add	lr, r4, #16
   12408:	ldm	lr!, {r0, r1, r2, r3}
   1240c:	stmia	ip!, {r0, r1, r2, r3}
   12410:	ldm	lr!, {r0, r1, r2, r3}
   12414:	stmia	ip!, {r0, r1, r2, r3}
   12418:	ldm	lr!, {r0, r1, r2, r3}
   1241c:	stmia	ip!, {r0, r1, r2, r3}
   12420:	ldm	lr, {r0, r1, r2}
   12424:	stmia	ip!, {r0, r1}
   12428:	strh	r2, [ip], #2
   1242c:	lsr	r2, r2, #16
   12430:	strb	r2, [ip]
   12434:	add	r5, sp, #28
   12438:	add	r3, r4, #76	; 0x4c
   1243c:	ldm	r3, {r0, r1, r2, r3}
   12440:	stm	r5, {r0, r1, r2, r3}
   12444:	add	r0, sp, #44	; 0x2c
   12448:	bl	12f48 <flatcc_builder_init@@Base>
   1244c:	add	r0, sp, #44	; 0x2c
   12450:	bl	16914 <flatcc_builder_get_emit_context@@Base>
   12454:	mov	r4, r0
   12458:	mvn	r3, #-1073741824	; 0xc0000000
   1245c:	str	r3, [sp, #4]
   12460:	mov	r2, #4
   12464:	str	r2, [sp]
   12468:	mov	r3, r2
   1246c:	mov	r1, r5
   12470:	add	r0, sp, #44	; 0x2c
   12474:	bl	152ac <flatcc_builder_create_vector@@Base>
   12478:	mov	r5, r0
   1247c:	mov	r3, #0
   12480:	mov	r2, r3
   12484:	mov	r1, r3
   12488:	add	r0, sp, #44	; 0x2c
   1248c:	bl	1387c <flatcc_builder_start_buffer@@Base>
   12490:	cmp	r0, #0
   12494:	beq	12514 <emit_test@@Base+0x120>
   12498:	ldr	r2, [r4, #4]
   1249c:	ldr	r3, [r4]
   124a0:	cmp	r2, r3
   124a4:	mvnne	r4, #0
   124a8:	bne	127b4 <emit_test@@Base+0x3c0>
   124ac:	ldr	sl, [r4, #8]
   124b0:	cmp	sl, #0
   124b4:	beq	12838 <emit_test@@Base+0x444>
   124b8:	ldr	r4, [r4, #24]
   124bc:	add	r0, sp, #44	; 0x2c
   124c0:	bl	1662c <flatcc_builder_get_buffer_size@@Base>
   124c4:	mov	r8, r0
   124c8:	cmp	r0, r4
   124cc:	bne	125f8 <emit_test@@Base+0x204>
   124d0:	ldr	r4, [pc, #916]	; 1286c <emit_test@@Base+0x478>
   124d4:	mov	r2, r8
   124d8:	ldr	r1, [pc, #912]	; 12870 <emit_test@@Base+0x47c>
   124dc:	ldr	r0, [r4]
   124e0:	bl	1203c <fprintf@plt>
   124e4:	ldr	r6, [r4]
   124e8:	ldr	r2, [pc, #900]	; 12874 <emit_test@@Base+0x480>
   124ec:	ldr	r1, [pc, #900]	; 12878 <emit_test@@Base+0x484>
   124f0:	mov	r0, r6
   124f4:	bl	1203c <fprintf@plt>
   124f8:	cmp	r8, #0
   124fc:	beq	12840 <emit_test@@Base+0x44c>
   12500:	sub	r7, sl, #1
   12504:	mov	r4, #0
   12508:	ldr	r9, [pc, #876]	; 1287c <emit_test@@Base+0x488>
   1250c:	mov	fp, #46	; 0x2e
   12510:	b	12668 <emit_test@@Base+0x274>
   12514:	mov	r1, #3
   12518:	add	r0, sp, #44	; 0x2c
   1251c:	bl	146a8 <flatcc_builder_start_table@@Base>
   12520:	cmp	r0, #0
   12524:	bne	125d8 <emit_test@@Base+0x1e4>
   12528:	mov	r3, #8
   1252c:	mov	r2, r3
   12530:	mov	r1, #0
   12534:	add	r0, sp, #44	; 0x2c
   12538:	bl	160a4 <flatcc_builder_table_add@@Base>
   1253c:	cmp	r0, #0
   12540:	beq	125e8 <emit_test@@Base+0x1f4>
   12544:	mov	r2, #42	; 0x2a
   12548:	mov	r3, #0
   1254c:	strd	r2, [r0]
   12550:	cmp	r5, #0
   12554:	bne	12560 <emit_test@@Base+0x16c>
   12558:	mov	r1, #0
   1255c:	b	125dc <emit_test@@Base+0x1e8>
   12560:	mov	r1, #2
   12564:	add	r0, sp, #44	; 0x2c
   12568:	bl	16270 <flatcc_builder_table_add_offset@@Base>
   1256c:	cmp	r0, #0
   12570:	beq	12558 <emit_test@@Base+0x164>
   12574:	str	r5, [r0]
   12578:	mov	r3, #1
   1257c:	mov	r2, r3
   12580:	mov	r1, r3
   12584:	add	r0, sp, #44	; 0x2c
   12588:	bl	160a4 <flatcc_builder_table_add@@Base>
   1258c:	cmp	r0, #0
   12590:	beq	125f0 <emit_test@@Base+0x1fc>
   12594:	mov	r3, #1
   12598:	strb	r3, [r0]
   1259c:	mov	r2, #0
   125a0:	ldr	r1, [pc, #704]	; 12868 <emit_test@@Base+0x474>
   125a4:	add	r0, sp, #44	; 0x2c
   125a8:	bl	1504c <flatcc_builder_check_required@@Base>
   125ac:	cmp	r0, #0
   125b0:	beq	125c4 <emit_test@@Base+0x1d0>
   125b4:	add	r0, sp, #44	; 0x2c
   125b8:	bl	150f8 <flatcc_builder_end_table@@Base>
   125bc:	mov	r1, r0
   125c0:	b	125dc <emit_test@@Base+0x1e8>
   125c4:	ldr	r3, [pc, #692]	; 12880 <emit_test@@Base+0x48c>
   125c8:	mov	r2, #21
   125cc:	ldr	r1, [pc, #688]	; 12884 <emit_test@@Base+0x490>
   125d0:	ldr	r0, [pc, #688]	; 12888 <emit_test@@Base+0x494>
   125d4:	bl	12084 <__assert_fail@plt>
   125d8:	mov	r1, #0
   125dc:	add	r0, sp, #44	; 0x2c
   125e0:	bl	13934 <flatcc_builder_end_buffer@@Base>
   125e4:	b	12498 <emit_test@@Base+0xa4>
   125e8:	mov	r1, #0
   125ec:	b	125dc <emit_test@@Base+0x1e8>
   125f0:	mov	r1, #0
   125f4:	b	125dc <emit_test@@Base+0x1e8>
   125f8:	ldr	r3, [pc, #652]	; 1288c <emit_test@@Base+0x498>
   125fc:	mov	r2, #101	; 0x65
   12600:	ldr	r1, [pc, #648]	; 12890 <emit_test@@Base+0x49c>
   12604:	ldr	r0, [pc, #648]	; 12894 <emit_test@@Base+0x4a0>
   12608:	bl	12084 <__assert_fail@plt>
   1260c:	mov	r2, r4
   12610:	ldr	r1, [pc, #640]	; 12898 <emit_test@@Base+0x4a4>
   12614:	mov	r0, r6
   12618:	bl	1203c <fprintf@plt>
   1261c:	ldrb	r2, [r7, #1]
   12620:	mov	r1, r9
   12624:	mov	r0, r6
   12628:	bl	1203c <fprintf@plt>
   1262c:	ldrb	r2, [r7, #1]!
   12630:	sub	r3, r2, #32
   12634:	uxtb	r3, r3
   12638:	cmp	r3, #94	; 0x5e
   1263c:	add	r3, sp, #336	; 0x150
   12640:	add	r3, r3, r5
   12644:	strbhi	fp, [r3, #-328]	; 0xfffffeb8
   12648:	strbls	r2, [r3, #-328]	; 0xfffffeb8
   1264c:	add	r3, sp, #336	; 0x150
   12650:	add	r5, r3, r5
   12654:	mov	r3, #0
   12658:	strb	r3, [r5, #-327]	; 0xfffffeb9
   1265c:	add	r4, r4, #1
   12660:	cmp	r8, r4
   12664:	beq	126a4 <emit_test@@Base+0x2b0>
   12668:	ands	r5, r4, #15
   1266c:	bne	1268c <emit_test@@Base+0x298>
   12670:	cmp	r4, #0
   12674:	beq	1260c <emit_test@@Base+0x218>
   12678:	add	r2, sp, #8
   1267c:	ldr	r1, [pc, #536]	; 1289c <emit_test@@Base+0x4a8>
   12680:	mov	r0, r6
   12684:	bl	1203c <fprintf@plt>
   12688:	b	1260c <emit_test@@Base+0x218>
   1268c:	tst	r4, #7
   12690:	bne	1261c <emit_test@@Base+0x228>
   12694:	mov	r1, r6
   12698:	mov	r0, #32
   1269c:	bl	1206c <fputc@plt>
   126a0:	b	1261c <emit_test@@Base+0x228>
   126a4:	tst	r8, #15
   126a8:	beq	126d8 <emit_test@@Base+0x2e4>
   126ac:	ldr	r9, [pc, #492]	; 128a0 <emit_test@@Base+0x4ac>
   126b0:	mov	r7, #3
   126b4:	mov	r5, #1
   126b8:	mov	r3, r6
   126bc:	mov	r2, r7
   126c0:	mov	r1, r5
   126c4:	mov	r0, r9
   126c8:	bl	11ff4 <fwrite@plt>
   126cc:	add	r4, r4, #1
   126d0:	tst	r4, #15
   126d4:	bne	126b8 <emit_test@@Base+0x2c4>
   126d8:	add	r2, sp, #8
   126dc:	ldr	r1, [pc, #440]	; 1289c <emit_test@@Base+0x4a8>
   126e0:	mov	r0, r6
   126e4:	bl	1203c <fprintf@plt>
   126e8:	cmp	r8, #58	; 0x3a
   126ec:	bne	12850 <emit_test@@Base+0x45c>
   126f0:	mov	r2, r8
   126f4:	add	r1, sp, #276	; 0x114
   126f8:	mov	r0, sl
   126fc:	bl	11fdc <memcmp@plt>
   12700:	subs	r4, r0, #0
   12704:	bne	127c0 <emit_test@@Base+0x3cc>
   12708:	ldr	r3, [sl]
   1270c:	adds	r2, sl, r3
   12710:	beq	127d4 <emit_test@@Base+0x3e0>
   12714:	ldr	r3, [sl, r3]
   12718:	sub	r3, r2, r3
   1271c:	ldrh	r1, [r3]
   12720:	cmp	r1, #5
   12724:	bls	127e8 <emit_test@@Base+0x3f4>
   12728:	ldrh	r0, [r3, #4]
   1272c:	cmp	r0, #0
   12730:	beq	127e8 <emit_test@@Base+0x3f4>
   12734:	ldrd	r6, [r2, r0]
   12738:	cmp	r7, #0
   1273c:	cmpeq	r6, #42	; 0x2a
   12740:	bne	127e8 <emit_test@@Base+0x3f4>
   12744:	cmp	r1, #7
   12748:	bls	127fc <emit_test@@Base+0x408>
   1274c:	ldrh	r0, [r3, #6]
   12750:	cmp	r0, #0
   12754:	beq	127fc <emit_test@@Base+0x408>
   12758:	ldrb	r0, [r2, r0]
   1275c:	cmp	r0, #1
   12760:	bne	127fc <emit_test@@Base+0x408>
   12764:	cmp	r1, #9
   12768:	bls	12810 <emit_test@@Base+0x41c>
   1276c:	ldrh	r1, [r3, #8]
   12770:	cmp	r1, #0
   12774:	beq	12810 <emit_test@@Base+0x41c>
   12778:	add	r3, r2, r1
   1277c:	ldr	r2, [r2, r1]
   12780:	add	r2, r2, #4
   12784:	adds	r3, r3, r2
   12788:	beq	12810 <emit_test@@Base+0x41c>
   1278c:	ldr	r2, [r3, #-4]
   12790:	cmp	r2, #4
   12794:	bne	12810 <emit_test@@Base+0x41c>
   12798:	vldr	s14, [r3, #8]
   1279c:	vldr	s15, [pc, #192]	; 12864 <emit_test@@Base+0x470>
   127a0:	vcmp.f32	s14, s15
   127a4:	vmrs	APSR_nzcv, fpscr
   127a8:	bne	12824 <emit_test@@Base+0x430>
   127ac:	add	r0, sp, #44	; 0x2c
   127b0:	bl	130f0 <flatcc_builder_clear@@Base>
   127b4:	mov	r0, r4
   127b8:	add	sp, sp, #340	; 0x154
   127bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c0:	ldr	r3, [pc, #196]	; 1288c <emit_test@@Base+0x498>
   127c4:	mov	r2, #108	; 0x6c
   127c8:	ldr	r1, [pc, #192]	; 12890 <emit_test@@Base+0x49c>
   127cc:	ldr	r0, [pc, #192]	; 12894 <emit_test@@Base+0x4a0>
   127d0:	bl	12084 <__assert_fail@plt>
   127d4:	ldr	r3, [pc, #200]	; 128a4 <emit_test@@Base+0x4b0>
   127d8:	mov	r2, #41	; 0x29
   127dc:	ldr	r1, [pc, #196]	; 128a8 <emit_test@@Base+0x4b4>
   127e0:	ldr	r0, [pc, #196]	; 128ac <emit_test@@Base+0x4b8>
   127e4:	bl	12084 <__assert_fail@plt>
   127e8:	ldr	r3, [pc, #156]	; 1288c <emit_test@@Base+0x498>
   127ec:	mov	r2, #112	; 0x70
   127f0:	ldr	r1, [pc, #152]	; 12890 <emit_test@@Base+0x49c>
   127f4:	ldr	r0, [pc, #152]	; 12894 <emit_test@@Base+0x4a0>
   127f8:	bl	12084 <__assert_fail@plt>
   127fc:	ldr	r3, [pc, #136]	; 1288c <emit_test@@Base+0x498>
   12800:	mov	r2, #113	; 0x71
   12804:	ldr	r1, [pc, #132]	; 12890 <emit_test@@Base+0x49c>
   12808:	ldr	r0, [pc, #132]	; 12894 <emit_test@@Base+0x4a0>
   1280c:	bl	12084 <__assert_fail@plt>
   12810:	ldr	r3, [pc, #116]	; 1288c <emit_test@@Base+0x498>
   12814:	mov	r2, #114	; 0x72
   12818:	ldr	r1, [pc, #112]	; 12890 <emit_test@@Base+0x49c>
   1281c:	ldr	r0, [pc, #112]	; 12894 <emit_test@@Base+0x4a0>
   12820:	bl	12084 <__assert_fail@plt>
   12824:	ldr	r3, [pc, #96]	; 1288c <emit_test@@Base+0x498>
   12828:	mov	r2, #115	; 0x73
   1282c:	ldr	r1, [pc, #92]	; 12890 <emit_test@@Base+0x49c>
   12830:	ldr	r0, [pc, #92]	; 12894 <emit_test@@Base+0x4a0>
   12834:	bl	12084 <__assert_fail@plt>
   12838:	mvn	r4, #0
   1283c:	b	127b4 <emit_test@@Base+0x3c0>
   12840:	add	r2, sp, #8
   12844:	ldr	r1, [pc, #80]	; 1289c <emit_test@@Base+0x4a8>
   12848:	mov	r0, r6
   1284c:	bl	1203c <fprintf@plt>
   12850:	ldr	r3, [pc, #52]	; 1288c <emit_test@@Base+0x498>
   12854:	mov	r2, #106	; 0x6a
   12858:	ldr	r1, [pc, #48]	; 12890 <emit_test@@Base+0x49c>
   1285c:	ldr	r0, [pc, #48]	; 12894 <emit_test@@Base+0x4a0>
   12860:	bl	12084 <__assert_fail@plt>
   12864:	svccc	0x0099999a
   12868:	andeq	r6, r1, ip, lsl #31
   1286c:	andeq	r8, r2, r0, rrx
   12870:	strdeq	r7, [r1], -r4
   12874:	andeq	r7, r1, r8, lsl #4
   12878:	andeq	r7, r1, r4, lsl r2
   1287c:	andeq	r7, r1, ip, lsr #4
   12880:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12884:	ldrdeq	r7, [r1], -ip
   12888:	andeq	r7, r1, ip, lsr r1
   1288c:	andeq	r6, r1, r8, ror #31
   12890:	andeq	r7, r1, r8, lsr #3
   12894:	andeq	r7, r1, r0, ror #20
   12898:	andeq	r7, r1, r4, lsr #4
   1289c:	andeq	r7, r1, ip, lsl r2
   128a0:	andeq	r7, r1, r4, lsr r2
   128a4:	strdeq	r6, [r1], -r4
   128a8:	andeq	r7, r1, r8, lsr r2
   128ac:	muleq	r1, r4, r2

000128b0 <main@@Base>:
   128b0:	push	{r4, lr}
   128b4:	bl	12268 <debug_test@@Base>
   128b8:	mov	r4, r0
   128bc:	bl	123f4 <emit_test@@Base>
   128c0:	orr	r0, r4, r0
   128c4:	pop	{r4, pc}
   128c8:	push	{r4, r5, r6, lr}
   128cc:	sub	sp, sp, #8
   128d0:	mov	r4, r0
   128d4:	mov	r5, r2
   128d8:	ldr	r2, [r0, #28]
   128dc:	mov	r3, #1
   128e0:	str	r3, [sp]
   128e4:	ldr	r6, [r0, #48]	; 0x30
   128e8:	add	r2, r1, r2
   128ec:	add	r1, r0, #60	; 0x3c
   128f0:	ldr	r0, [r0, #40]	; 0x28
   128f4:	blx	r6
   128f8:	cmp	r0, #0
   128fc:	bne	12934 <main@@Base+0x84>
   12900:	ldr	r1, [r4, #28]
   12904:	ldr	r2, [r4, #60]	; 0x3c
   12908:	add	r2, r2, r1
   1290c:	str	r2, [r4, #16]
   12910:	ldr	r3, [r4, #64]	; 0x40
   12914:	sub	r3, r3, r1
   12918:	cmp	r3, r5
   1291c:	movcs	r3, r5
   12920:	str	r3, [r4, #24]
   12924:	ldr	r3, [r4, #32]
   12928:	str	r5, [r3, #4]
   1292c:	add	sp, sp, #8
   12930:	pop	{r4, r5, r6, pc}
   12934:	mvn	r0, #0
   12938:	b	1292c <main@@Base+0x7c>

0001293c <flatcc_builder_default_alloc@@Base>:
   1293c:	push	{r4, r5, r6, r7, r8, lr}
   12940:	mov	r5, r1
   12944:	cmp	r2, #0
   12948:	bne	1296c <flatcc_builder_default_alloc@@Base+0x30>
   1294c:	ldr	r0, [r1]
   12950:	cmp	r0, #0
   12954:	beq	12a38 <flatcc_builder_default_alloc@@Base+0xfc>
   12958:	bl	11fc4 <free@plt>
   1295c:	mov	r0, #0
   12960:	str	r0, [r5]
   12964:	str	r0, [r5, #4]
   12968:	pop	{r4, r5, r6, r7, r8, pc}
   1296c:	mov	r6, r3
   12970:	ldr	r3, [sp, #24]
   12974:	sub	r3, r3, #1
   12978:	cmp	r3, #6
   1297c:	ldrls	pc, [pc, r3, lsl #2]
   12980:	b	12a14 <flatcc_builder_default_alloc@@Base+0xd8>
   12984:	andeq	r2, r1, r8, lsr #19
   12988:	andeq	r2, r1, r4, lsl sl
   1298c:	andeq	r2, r1, r4, lsl sl
   12990:	andeq	r2, r1, r0, lsr #19
   12994:	andeq	r2, r1, ip, lsl sl
   12998:	andeq	r2, r1, r4, lsl sl
   1299c:	andeq	r2, r1, ip, lsl #20
   129a0:	mov	r4, #288	; 0x120
   129a4:	b	129ac <flatcc_builder_default_alloc@@Base+0x70>
   129a8:	mov	r4, #256	; 0x100
   129ac:	cmp	r4, r2
   129b0:	bcs	129c0 <flatcc_builder_default_alloc@@Base+0x84>
   129b4:	lsl	r4, r4, #1
   129b8:	cmp	r2, r4
   129bc:	bhi	129b4 <flatcc_builder_default_alloc@@Base+0x78>
   129c0:	ldr	r3, [r5, #4]
   129c4:	cmp	r2, r3
   129c8:	bhi	129d4 <flatcc_builder_default_alloc@@Base+0x98>
   129cc:	cmp	r4, r3, lsr #1
   129d0:	bls	12a40 <flatcc_builder_default_alloc@@Base+0x104>
   129d4:	mov	r1, r4
   129d8:	ldr	r0, [r5]
   129dc:	bl	11fe8 <realloc@plt>
   129e0:	subs	r7, r0, #0
   129e4:	beq	12a48 <flatcc_builder_default_alloc@@Base+0x10c>
   129e8:	cmp	r6, #0
   129ec:	beq	129fc <flatcc_builder_default_alloc@@Base+0xc0>
   129f0:	ldr	r0, [r5, #4]
   129f4:	cmp	r0, r4
   129f8:	bcc	12a24 <flatcc_builder_default_alloc@@Base+0xe8>
   129fc:	str	r7, [r5]
   12a00:	str	r4, [r5, #4]
   12a04:	mov	r0, #0
   12a08:	pop	{r4, r5, r6, r7, r8, pc}
   12a0c:	mov	r4, #64	; 0x40
   12a10:	b	129ac <flatcc_builder_default_alloc@@Base+0x70>
   12a14:	mov	r4, #32
   12a18:	b	129ac <flatcc_builder_default_alloc@@Base+0x70>
   12a1c:	mov	r4, r2
   12a20:	b	129c0 <flatcc_builder_default_alloc@@Base+0x84>
   12a24:	sub	r2, r4, r0
   12a28:	mov	r1, #0
   12a2c:	add	r0, r7, r0
   12a30:	bl	12054 <memset@plt>
   12a34:	b	129fc <flatcc_builder_default_alloc@@Base+0xc0>
   12a38:	mov	r0, #0
   12a3c:	pop	{r4, r5, r6, r7, r8, pc}
   12a40:	mov	r0, #0
   12a44:	pop	{r4, r5, r6, r7, r8, pc}
   12a48:	mvn	r0, #0
   12a4c:	pop	{r4, r5, r6, r7, r8, pc}
   12a50:	cmp	r2, #0
   12a54:	bne	12a64 <flatcc_builder_default_alloc@@Base+0x128>
   12a58:	ldrh	r2, [r0, #132]	; 0x84
   12a5c:	cmp	r2, #0
   12a60:	moveq	r2, #1
   12a64:	ldrh	ip, [r1]
   12a68:	cmp	ip, #3
   12a6c:	movls	ip, #4
   12a70:	strhls	ip, [r1]
   12a74:	ldrh	ip, [r1]
   12a78:	cmp	ip, r2
   12a7c:	strhcc	r2, [r1]
   12a80:	cmp	r3, #0
   12a84:	bne	12b40 <flatcc_builder_default_alloc@@Base+0x204>
   12a88:	push	{r4, r5, lr}
   12a8c:	sub	sp, sp, #84	; 0x54
   12a90:	ldr	r4, [r0, #140]	; 0x8c
   12a94:	sub	r2, r2, #1
   12a98:	ands	r2, r2, r4
   12a9c:	bne	12aac <flatcc_builder_default_alloc@@Base+0x170>
   12aa0:	mov	r0, #0
   12aa4:	add	sp, sp, #84	; 0x54
   12aa8:	pop	{r4, r5, pc}
   12aac:	str	r2, [sp, #8]
   12ab0:	ldr	r3, [pc, #144]	; 12b48 <flatcc_builder_default_alloc@@Base+0x20c>
   12ab4:	str	r3, [sp, #16]
   12ab8:	str	r2, [sp, #20]
   12abc:	mov	r3, #1
   12ac0:	str	r3, [sp, #12]
   12ac4:	add	r3, r4, r2
   12ac8:	str	r3, [r0, #140]	; 0x8c
   12acc:	cmp	r4, r3
   12ad0:	bgt	12b18 <flatcc_builder_default_alloc@@Base+0x1dc>
   12ad4:	ldr	ip, [r0, #36]	; 0x24
   12ad8:	str	r2, [sp]
   12adc:	ldr	r5, [r0, #44]	; 0x2c
   12ae0:	mov	r3, r4
   12ae4:	mov	r2, #1
   12ae8:	add	r1, sp, #16
   12aec:	mov	r0, ip
   12af0:	blx	r5
   12af4:	cmp	r0, #0
   12af8:	bne	12b2c <flatcc_builder_default_alloc@@Base+0x1f0>
   12afc:	cmn	r4, #1
   12b00:	bne	12aa0 <flatcc_builder_default_alloc@@Base+0x164>
   12b04:	ldr	r3, [pc, #64]	; 12b4c <flatcc_builder_default_alloc@@Base+0x210>
   12b08:	ldr	r2, [pc, #64]	; 12b50 <flatcc_builder_default_alloc@@Base+0x214>
   12b0c:	ldr	r1, [pc, #64]	; 12b54 <flatcc_builder_default_alloc@@Base+0x218>
   12b10:	ldr	r0, [pc, #64]	; 12b58 <flatcc_builder_default_alloc@@Base+0x21c>
   12b14:	bl	12084 <__assert_fail@plt>
   12b18:	ldr	r3, [pc, #60]	; 12b5c <flatcc_builder_default_alloc@@Base+0x220>
   12b1c:	ldr	r2, [pc, #60]	; 12b60 <flatcc_builder_default_alloc@@Base+0x224>
   12b20:	ldr	r1, [pc, #44]	; 12b54 <flatcc_builder_default_alloc@@Base+0x218>
   12b24:	ldr	r0, [pc, #44]	; 12b58 <flatcc_builder_default_alloc@@Base+0x21c>
   12b28:	bl	12084 <__assert_fail@plt>
   12b2c:	ldr	r3, [pc, #40]	; 12b5c <flatcc_builder_default_alloc@@Base+0x220>
   12b30:	ldr	r2, [pc, #44]	; 12b64 <flatcc_builder_default_alloc@@Base+0x228>
   12b34:	ldr	r1, [pc, #24]	; 12b54 <flatcc_builder_default_alloc@@Base+0x218>
   12b38:	ldr	r0, [pc, #24]	; 12b58 <flatcc_builder_default_alloc@@Base+0x21c>
   12b3c:	bl	12084 <__assert_fail@plt>
   12b40:	mov	r0, #0
   12b44:	bx	lr
   12b48:			; <UNDEFINED> instruction: 0x000172bc
   12b4c:	andeq	r7, r1, r8, asr #9
   12b50:			; <UNDEFINED> instruction: 0x000002be
   12b54:	andeq	r7, r1, ip, lsl #20
   12b58:	andeq	r7, r1, r0, ror #20
   12b5c:			; <UNDEFINED> instruction: 0x000174bc
   12b60:	andeq	r0, r0, r1, lsr #5
   12b64:	andeq	r0, r0, r5, lsr #5
   12b68:	push	{r4, r5, r6, r7, lr}
   12b6c:	sub	sp, sp, #12
   12b70:	mov	r4, r0
   12b74:	mov	r6, r1
   12b78:	ldr	r3, [r0, #156]	; 0x9c
   12b7c:	add	r2, r3, #1
   12b80:	str	r2, [r0, #156]	; 0x9c
   12b84:	ldr	r1, [r0, #160]	; 0xa0
   12b88:	cmp	r2, r1
   12b8c:	ble	12c2c <flatcc_builder_default_alloc@@Base+0x2f0>
   12b90:	ldr	r1, [r0, #176]	; 0xb0
   12b94:	cmp	r2, r1
   12b98:	cmpgt	r1, #0
   12b9c:	bgt	12c94 <flatcc_builder_default_alloc@@Base+0x358>
   12ba0:	add	r3, r3, r3, lsl #3
   12ba4:	lsl	r5, r3, #2
   12ba8:	add	r2, r5, #36	; 0x24
   12bac:	ldr	r3, [r0, #88]	; 0x58
   12bb0:	cmp	r2, r3
   12bb4:	bhi	12bf4 <flatcc_builder_default_alloc@@Base+0x2b8>
   12bb8:	ldr	r3, [r4, #84]	; 0x54
   12bbc:	add	r5, r3, r5
   12bc0:	str	r5, [r4, #32]
   12bc4:	cmp	r5, #0
   12bc8:	beq	12c9c <flatcc_builder_default_alloc@@Base+0x360>
   12bcc:	ldr	r3, [r4, #88]	; 0x58
   12bd0:	ldr	r2, [pc, #204]	; 12ca4 <flatcc_builder_default_alloc@@Base+0x368>
   12bd4:	umull	r2, r3, r2, r3
   12bd8:	lsr	r3, r3, #3
   12bdc:	str	r3, [r4, #160]	; 0xa0
   12be0:	ldr	r2, [r4, #176]	; 0xb0
   12be4:	cmp	r2, #0
   12be8:	cmpgt	r3, r2
   12bec:	strgt	r2, [r4, #160]	; 0xa0
   12bf0:	b	12c38 <flatcc_builder_default_alloc@@Base+0x2fc>
   12bf4:	mov	r3, #4
   12bf8:	str	r3, [sp]
   12bfc:	ldr	r7, [r0, #48]	; 0x30
   12c00:	mov	r3, #0
   12c04:	add	r1, r0, #84	; 0x54
   12c08:	ldr	r0, [r0, #40]	; 0x28
   12c0c:	blx	r7
   12c10:	cmp	r0, #0
   12c14:	beq	12bb8 <flatcc_builder_default_alloc@@Base+0x27c>
   12c18:	ldr	r3, [pc, #136]	; 12ca8 <flatcc_builder_default_alloc@@Base+0x36c>
   12c1c:	mov	r2, #308	; 0x134
   12c20:	ldr	r1, [pc, #132]	; 12cac <flatcc_builder_default_alloc@@Base+0x370>
   12c24:	ldr	r0, [pc, #132]	; 12cb0 <flatcc_builder_default_alloc@@Base+0x374>
   12c28:	bl	12084 <__assert_fail@plt>
   12c2c:	ldr	r3, [r0, #32]
   12c30:	add	r3, r3, #36	; 0x24
   12c34:	str	r3, [r0, #32]
   12c38:	ldr	r3, [r4, #32]
   12c3c:	ldr	r2, [r4, #20]
   12c40:	str	r2, [r3, #8]
   12c44:	ldr	r3, [r4, #32]
   12c48:	ldrh	r2, [r4, #130]	; 0x82
   12c4c:	strh	r2, [r3, #12]
   12c50:	strh	r6, [r4, #130]	; 0x82
   12c54:	ldr	r3, [r4, #32]
   12c58:	ldr	r2, [r4, #28]
   12c5c:	str	r2, [r3]
   12c60:	ldr	r3, [r4, #32]
   12c64:	mvn	r2, #3
   12c68:	str	r2, [r3, #4]
   12c6c:	ldr	r3, [r4, #28]
   12c70:	ldr	r2, [r4, #20]
   12c74:	add	r3, r3, r2
   12c78:	add	r3, r3, #7
   12c7c:	bic	r3, r3, #7
   12c80:	str	r3, [r4, #28]
   12c84:	mov	r0, #0
   12c88:	str	r0, [r4, #20]
   12c8c:	add	sp, sp, #12
   12c90:	pop	{r4, r5, r6, r7, pc}
   12c94:	mvn	r0, #0
   12c98:	b	12c8c <flatcc_builder_default_alloc@@Base+0x350>
   12c9c:	mvn	r0, #0
   12ca0:	b	12c8c <flatcc_builder_default_alloc@@Base+0x350>
   12ca4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   12ca8:	ldrdeq	r7, [r1], -r8
   12cac:	andeq	r7, r1, ip, lsl #20
   12cb0:	andeq	r7, r1, r0, ror #20
   12cb4:	push	{r4, r5, r6, r7, r8, lr}
   12cb8:	sub	sp, sp, #88	; 0x58
   12cbc:	cmn	r2, #-1073741823	; 0xc0000001
   12cc0:	bhi	12e74 <flatcc_builder_default_alloc@@Base+0x538>
   12cc4:	ldrh	ip, [r0, #128]	; 0x80
   12cc8:	cmp	ip, #3
   12ccc:	movls	ip, #4
   12cd0:	strhls	ip, [r0, #128]	; 0x80
   12cd4:	str	r2, [sp, #84]	; 0x54
   12cd8:	ldr	r7, [r0, #136]	; 0x88
   12cdc:	and	lr, r7, #3
   12ce0:	mov	ip, #4
   12ce4:	str	ip, [sp, #12]
   12ce8:	add	r4, sp, #84	; 0x54
   12cec:	str	r4, [sp, #20]
   12cf0:	str	ip, [sp, #24]
   12cf4:	mov	ip, #1
   12cf8:	str	ip, [sp, #16]
   12cfc:	lsls	r5, r2, #2
   12d00:	beq	12d1c <flatcc_builder_default_alloc@@Base+0x3e0>
   12d04:	add	ip, r5, #4
   12d08:	str	ip, [sp, #12]
   12d0c:	str	r1, [sp, #28]
   12d10:	str	r5, [sp, #32]
   12d14:	mov	ip, #2
   12d18:	str	ip, [sp, #16]
   12d1c:	cmp	lr, #0
   12d20:	beq	12d50 <flatcc_builder_default_alloc@@Base+0x414>
   12d24:	ldr	ip, [sp, #12]
   12d28:	add	ip, ip, lr
   12d2c:	str	ip, [sp, #12]
   12d30:	ldr	ip, [sp, #16]
   12d34:	add	ip, ip, #1
   12d38:	add	r4, sp, #88	; 0x58
   12d3c:	add	r4, r4, ip, lsl #3
   12d40:	ldr	r6, [pc, #308]	; 12e7c <flatcc_builder_default_alloc@@Base+0x540>
   12d44:	str	r6, [r4, #-76]	; 0xffffffb4
   12d48:	str	lr, [r4, #-72]	; 0xffffffb8
   12d4c:	str	ip, [sp, #16]
   12d50:	mov	r6, r0
   12d54:	ldr	r8, [sp, #12]
   12d58:	sub	r7, r7, r8
   12d5c:	cmp	r2, #0
   12d60:	beq	12e08 <flatcc_builder_default_alloc@@Base+0x4cc>
   12d64:	mov	r2, r1
   12d68:	mov	ip, r3
   12d6c:	add	r5, r1, r5
   12d70:	mvn	r1, #3
   12d74:	b	12da0 <flatcc_builder_default_alloc@@Base+0x464>
   12d78:	cmp	r3, #0
   12d7c:	beq	12df4 <flatcc_builder_default_alloc@@Base+0x4b8>
   12d80:	ldrb	r0, [ip]
   12d84:	cmp	r0, #0
   12d88:	bne	12de0 <flatcc_builder_default_alloc@@Base+0x4a4>
   12d8c:	add	r2, r2, #4
   12d90:	add	ip, ip, #1
   12d94:	sub	r1, r1, #4
   12d98:	cmp	r2, r5
   12d9c:	beq	12e08 <flatcc_builder_default_alloc@@Base+0x4cc>
   12da0:	ldr	lr, [r2]
   12da4:	cmp	lr, #0
   12da8:	beq	12d78 <flatcc_builder_default_alloc@@Base+0x43c>
   12dac:	sub	r4, r1, r7
   12db0:	add	lr, r4, lr
   12db4:	str	lr, [r2]
   12db8:	cmp	r3, #0
   12dbc:	beq	12d8c <flatcc_builder_default_alloc@@Base+0x450>
   12dc0:	ldrb	r0, [ip]
   12dc4:	cmp	r0, #0
   12dc8:	bne	12d8c <flatcc_builder_default_alloc@@Base+0x450>
   12dcc:	ldr	r3, [pc, #172]	; 12e80 <flatcc_builder_default_alloc@@Base+0x544>
   12dd0:	ldr	r2, [pc, #172]	; 12e84 <flatcc_builder_default_alloc@@Base+0x548>
   12dd4:	ldr	r1, [pc, #172]	; 12e88 <flatcc_builder_default_alloc@@Base+0x54c>
   12dd8:	ldr	r0, [pc, #172]	; 12e8c <flatcc_builder_default_alloc@@Base+0x550>
   12ddc:	bl	12084 <__assert_fail@plt>
   12de0:	ldr	r3, [pc, #152]	; 12e80 <flatcc_builder_default_alloc@@Base+0x544>
   12de4:	ldr	r2, [pc, #164]	; 12e90 <flatcc_builder_default_alloc@@Base+0x554>
   12de8:	ldr	r1, [pc, #152]	; 12e88 <flatcc_builder_default_alloc@@Base+0x54c>
   12dec:	ldr	r0, [pc, #160]	; 12e94 <flatcc_builder_default_alloc@@Base+0x558>
   12df0:	bl	12084 <__assert_fail@plt>
   12df4:	ldr	r3, [pc, #132]	; 12e80 <flatcc_builder_default_alloc@@Base+0x544>
   12df8:	ldr	r2, [pc, #152]	; 12e98 <flatcc_builder_default_alloc@@Base+0x55c>
   12dfc:	ldr	r1, [pc, #132]	; 12e88 <flatcc_builder_default_alloc@@Base+0x54c>
   12e00:	ldr	r0, [pc, #148]	; 12e9c <flatcc_builder_default_alloc@@Base+0x560>
   12e04:	bl	12084 <__assert_fail@plt>
   12e08:	ldr	r3, [r6, #136]	; 0x88
   12e0c:	sub	r4, r3, r8
   12e10:	cmp	r3, r4
   12e14:	ble	12e4c <flatcc_builder_default_alloc@@Base+0x510>
   12e18:	str	r8, [sp]
   12e1c:	ldr	r5, [r6, #44]	; 0x2c
   12e20:	mov	r3, r4
   12e24:	ldr	r2, [sp, #16]
   12e28:	add	r1, sp, #20
   12e2c:	ldr	r0, [r6, #36]	; 0x24
   12e30:	blx	r5
   12e34:	cmp	r0, #0
   12e38:	streq	r4, [r6, #136]	; 0x88
   12e3c:	bne	12e60 <flatcc_builder_default_alloc@@Base+0x524>
   12e40:	mov	r0, r4
   12e44:	add	sp, sp, #88	; 0x58
   12e48:	pop	{r4, r5, r6, r7, r8, pc}
   12e4c:	ldr	r3, [pc, #76]	; 12ea0 <flatcc_builder_default_alloc@@Base+0x564>
   12e50:	ldr	r2, [pc, #76]	; 12ea4 <flatcc_builder_default_alloc@@Base+0x568>
   12e54:	ldr	r1, [pc, #44]	; 12e88 <flatcc_builder_default_alloc@@Base+0x54c>
   12e58:	ldr	r0, [pc, #60]	; 12e9c <flatcc_builder_default_alloc@@Base+0x560>
   12e5c:	bl	12084 <__assert_fail@plt>
   12e60:	ldr	r3, [pc, #56]	; 12ea0 <flatcc_builder_default_alloc@@Base+0x564>
   12e64:	ldr	r2, [pc, #60]	; 12ea8 <flatcc_builder_default_alloc@@Base+0x56c>
   12e68:	ldr	r1, [pc, #24]	; 12e88 <flatcc_builder_default_alloc@@Base+0x54c>
   12e6c:	ldr	r0, [pc, #40]	; 12e9c <flatcc_builder_default_alloc@@Base+0x560>
   12e70:	bl	12084 <__assert_fail@plt>
   12e74:	mov	r4, #0
   12e78:	b	12e40 <flatcc_builder_default_alloc@@Base+0x504>
   12e7c:			; <UNDEFINED> instruction: 0x000172bc
   12e80:	andeq	r7, r1, r8, ror #9
   12e84:			; <UNDEFINED> instruction: 0x000005b1
   12e88:	andeq	r7, r1, ip, lsl #20
   12e8c:	andeq	r7, r1, r4, asr sl
   12e90:			; <UNDEFINED> instruction: 0x000005b5
   12e94:	andeq	r7, r1, r4, ror #20
   12e98:			; <UNDEFINED> instruction: 0x000005b7
   12e9c:	andeq	r7, r1, r0, ror #20
   12ea0:	andeq	r7, r1, r8, lsl #10
   12ea4:	andeq	r0, r0, r7, lsl #5
   12ea8:	andeq	r0, r0, fp, lsl #5

00012eac <flatcc_builder_flush_vtable_cache@@Base>:
   12eac:	ldr	r3, [r0, #116]	; 0x74
   12eb0:	cmp	r3, #0
   12eb4:	bxeq	lr
   12eb8:	push	{r4, lr}
   12ebc:	mov	r4, r0
   12ec0:	ldr	r2, [r0, #96]	; 0x60
   12ec4:	mov	r1, #0
   12ec8:	ldr	r0, [r0, #92]	; 0x5c
   12ecc:	bl	12054 <memset@plt>
   12ed0:	mov	r3, #16
   12ed4:	str	r3, [r4, #124]	; 0x7c
   12ed8:	mov	r3, #0
   12edc:	str	r3, [r4, #120]	; 0x78
   12ee0:	pop	{r4, pc}

00012ee4 <flatcc_builder_custom_init@@Base>:
   12ee4:	push	{r4, r5, r6, r7, r8, lr}
   12ee8:	mov	r4, r0
   12eec:	mov	r6, r1
   12ef0:	mov	r7, r2
   12ef4:	mov	r5, r3
   12ef8:	mov	r2, #232	; 0xe8
   12efc:	mov	r1, #0
   12f00:	bl	12054 <memset@plt>
   12f04:	cmp	r6, #0
   12f08:	moveq	r3, #1
   12f0c:	streq	r3, [r4, #184]	; 0xb8
   12f10:	addeq	r7, r4, #188	; 0xbc
   12f14:	ldreq	r6, [pc, #36]	; 12f40 <flatcc_builder_custom_init@@Base+0x5c>
   12f18:	ldr	r3, [pc, #36]	; 12f44 <flatcc_builder_custom_init@@Base+0x60>
   12f1c:	cmp	r5, #0
   12f20:	moveq	r5, r3
   12f24:	ldr	r3, [sp, #24]
   12f28:	str	r3, [r4, #40]	; 0x28
   12f2c:	str	r5, [r4, #48]	; 0x30
   12f30:	str	r7, [r4, #36]	; 0x24
   12f34:	str	r6, [r4, #44]	; 0x2c
   12f38:	mov	r0, #0
   12f3c:	pop	{r4, r5, r6, r7, r8, pc}
   12f40:			; <UNDEFINED> instruction: 0x00016abc
   12f44:	andeq	r2, r1, ip, lsr r9

00012f48 <flatcc_builder_init@@Base>:
   12f48:	push	{r4, lr}
   12f4c:	mov	r4, r0
   12f50:	mov	r2, #232	; 0xe8
   12f54:	mov	r1, #0
   12f58:	bl	12054 <memset@plt>
   12f5c:	mov	r3, #1
   12f60:	str	r3, [r4, #184]	; 0xb8
   12f64:	ldr	r3, [pc, #24]	; 12f84 <flatcc_builder_init@@Base+0x3c>
   12f68:	str	r3, [r4, #48]	; 0x30
   12f6c:	add	r3, r4, #188	; 0xbc
   12f70:	str	r3, [r4, #36]	; 0x24
   12f74:	ldr	r3, [pc, #12]	; 12f88 <flatcc_builder_init@@Base+0x40>
   12f78:	str	r3, [r4, #44]	; 0x2c
   12f7c:	mov	r0, #0
   12f80:	pop	{r4, pc}
   12f84:	andeq	r2, r1, ip, lsr r9
   12f88:			; <UNDEFINED> instruction: 0x00016abc

00012f8c <flatcc_builder_custom_reset@@Base>:
   12f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f90:	sub	sp, sp, #12
   12f94:	mov	r6, r0
   12f98:	mov	fp, r1
   12f9c:	mov	r8, r2
   12fa0:	mov	r4, r0
   12fa4:	mov	r5, #0
   12fa8:	mov	r9, r5
   12fac:	mov	sl, #1
   12fb0:	b	12fd4 <flatcc_builder_custom_reset@@Base+0x48>
   12fb4:	ldr	r2, [r7, #56]	; 0x38
   12fb8:	mov	r1, r9
   12fbc:	ldr	r0, [r7, #52]	; 0x34
   12fc0:	bl	12054 <memset@plt>
   12fc4:	add	r5, r5, #1
   12fc8:	add	r4, r4, #8
   12fcc:	cmp	r5, #8
   12fd0:	beq	1303c <flatcc_builder_custom_reset@@Base+0xb0>
   12fd4:	add	r1, r4, #52	; 0x34
   12fd8:	mov	r7, r4
   12fdc:	ldr	r3, [r4, #52]	; 0x34
   12fe0:	cmp	r3, #0
   12fe4:	beq	1301c <flatcc_builder_custom_reset@@Base+0x90>
   12fe8:	cmp	r5, #5
   12fec:	cmpne	r8, #0
   12ff0:	beq	12fb4 <flatcc_builder_custom_reset@@Base+0x28>
   12ff4:	str	r5, [sp]
   12ff8:	mov	r3, sl
   12ffc:	mov	r2, sl
   13000:	ldr	r0, [r6, #40]	; 0x28
   13004:	ldr	ip, [r6, #48]	; 0x30
   13008:	blx	ip
   1300c:	cmp	r0, #0
   13010:	beq	12fb4 <flatcc_builder_custom_reset@@Base+0x28>
   13014:	mvn	r0, #0
   13018:	b	130b4 <flatcc_builder_custom_reset@@Base+0x128>
   1301c:	ldr	r3, [r4, #56]	; 0x38
   13020:	cmp	r3, #0
   13024:	beq	12fc4 <flatcc_builder_custom_reset@@Base+0x38>
   13028:	ldr	r3, [pc, #156]	; 130cc <flatcc_builder_custom_reset@@Base+0x140>
   1302c:	ldr	r2, [pc, #156]	; 130d0 <flatcc_builder_custom_reset@@Base+0x144>
   13030:	ldr	r1, [pc, #156]	; 130d4 <flatcc_builder_custom_reset@@Base+0x148>
   13034:	ldr	r0, [pc, #156]	; 130d8 <flatcc_builder_custom_reset@@Base+0x14c>
   13038:	bl	12084 <__assert_fail@plt>
   1303c:	mov	r3, #0
   13040:	str	r3, [r6, #120]	; 0x78
   13044:	ldr	r3, [r6, #124]	; 0x7c
   13048:	cmp	r3, #0
   1304c:	movne	r3, #16
   13050:	strne	r3, [r6, #124]	; 0x7c
   13054:	mov	r3, #0
   13058:	strh	r3, [r6, #128]	; 0x80
   1305c:	str	r3, [r6, #136]	; 0x88
   13060:	str	r3, [r6, #140]	; 0x8c
   13064:	str	r3, [r6, #156]	; 0x9c
   13068:	str	r3, [r6, #160]	; 0xa0
   1306c:	str	r3, [r6, #20]
   13070:	str	r3, [r6, #24]
   13074:	str	r3, [r6, #148]	; 0x94
   13078:	str	r3, [r6, #152]	; 0x98
   1307c:	ldr	r2, [r6, #60]	; 0x3c
   13080:	str	r2, [r6, #16]
   13084:	ldr	r2, [r6, #76]	; 0x4c
   13088:	str	r2, [r6]
   1308c:	ldr	r2, [r6, #52]	; 0x34
   13090:	str	r2, [r6, #4]
   13094:	str	r3, [r6, #32]
   13098:	cmp	fp, r3
   1309c:	strne	r3, [r6, #172]	; 0xac
   130a0:	strne	r3, [r6, #176]	; 0xb0
   130a4:	strne	r3, [r6, #180]	; 0xb4
   130a8:	ldr	r0, [r6, #184]	; 0xb8
   130ac:	cmp	r0, #0
   130b0:	bne	130bc <flatcc_builder_custom_reset@@Base+0x130>
   130b4:	add	sp, sp, #12
   130b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130bc:	add	r0, r6, #188	; 0xbc
   130c0:	bl	16984 <flatcc_emitter_reset@@Base>
   130c4:	mov	r0, #0
   130c8:	b	130b4 <flatcc_builder_custom_reset@@Base+0x128>
   130cc:	andeq	r7, r1, r4, lsl r5
   130d0:			; <UNDEFINED> instruction: 0x000001b2
   130d4:	andeq	r7, r1, ip, lsl #20
   130d8:	andeq	r7, r1, r4, ror sl

000130dc <flatcc_builder_reset@@Base>:
   130dc:	push	{r4, lr}
   130e0:	mov	r2, #0
   130e4:	mov	r1, r2
   130e8:	bl	12f8c <flatcc_builder_custom_reset@@Base>
   130ec:	pop	{r4, pc}

000130f0 <flatcc_builder_clear@@Base>:
   130f0:	push	{r4, r5, r6, r7, r8, lr}
   130f4:	sub	sp, sp, #8
   130f8:	mov	r6, r0
   130fc:	add	r5, r0, #52	; 0x34
   13100:	mov	r4, #0
   13104:	mov	r8, r4
   13108:	str	r4, [sp]
   1310c:	ldr	r7, [r6, #48]	; 0x30
   13110:	mov	r3, r8
   13114:	mov	r2, r8
   13118:	mov	r1, r5
   1311c:	ldr	r0, [r6, #40]	; 0x28
   13120:	blx	r7
   13124:	add	r4, r4, #1
   13128:	add	r5, r5, #8
   1312c:	cmp	r4, #8
   13130:	bne	13108 <flatcc_builder_clear@@Base+0x18>
   13134:	ldr	r3, [r6, #184]	; 0xb8
   13138:	cmp	r3, #0
   1313c:	bne	13158 <flatcc_builder_clear@@Base+0x68>
   13140:	mov	r2, #232	; 0xe8
   13144:	mov	r1, #0
   13148:	mov	r0, r6
   1314c:	bl	12054 <memset@plt>
   13150:	add	sp, sp, #8
   13154:	pop	{r4, r5, r6, r7, r8, pc}
   13158:	add	r0, r6, #188	; 0xbc
   1315c:	bl	16a54 <flatcc_emitter_clear@@Base>
   13160:	b	13140 <flatcc_builder_clear@@Base+0x50>

00013164 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13164:	push	{r4, r5, r6, r7, r8, lr}
   13168:	sub	sp, sp, #8
   1316c:	mov	r7, r0
   13170:	add	r4, r1, #3
   13174:	bic	r4, r4, #3
   13178:	add	r4, r4, #4
   1317c:	ldr	r5, [r0, #228]	; 0xe4
   13180:	add	r2, r4, r5
   13184:	ldr	r3, [r0, #112]	; 0x70
   13188:	cmp	r2, r3
   1318c:	bhi	131d4 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   13190:	ldr	r8, [r7, #108]	; 0x6c
   13194:	adds	r6, r8, r5
   13198:	beq	1320c <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   1319c:	mov	r2, r4
   131a0:	mov	r1, #0
   131a4:	mov	r0, r6
   131a8:	bl	12054 <memset@plt>
   131ac:	ldr	r3, [r7, #224]	; 0xe0
   131b0:	str	r3, [r8, r5]
   131b4:	ldr	r1, [r7, #228]	; 0xe4
   131b8:	add	r3, r1, #4
   131bc:	str	r3, [r7, #224]	; 0xe0
   131c0:	add	r4, r4, r1
   131c4:	str	r4, [r7, #228]	; 0xe4
   131c8:	add	r0, r6, #4
   131cc:	add	sp, sp, #8
   131d0:	pop	{r4, r5, r6, r7, r8, pc}
   131d4:	mov	r3, #7
   131d8:	str	r3, [sp]
   131dc:	ldr	r6, [r0, #48]	; 0x30
   131e0:	mov	r3, #0
   131e4:	add	r1, r0, #108	; 0x6c
   131e8:	ldr	r0, [r0, #40]	; 0x28
   131ec:	blx	r6
   131f0:	cmp	r0, #0
   131f4:	beq	13190 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   131f8:	ldr	r3, [pc, #20]	; 13214 <flatcc_builder_enter_user_frame_ptr@@Base+0xb0>
   131fc:	mov	r2, #308	; 0x134
   13200:	ldr	r1, [pc, #16]	; 13218 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   13204:	ldr	r0, [pc, #16]	; 1321c <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   13208:	bl	12084 <__assert_fail@plt>
   1320c:	mov	r0, #0
   13210:	b	131cc <flatcc_builder_enter_user_frame_ptr@@Base+0x68>
   13214:	ldrdeq	r7, [r1], -r8
   13218:	andeq	r7, r1, ip, lsl #20
   1321c:	andeq	r7, r1, r0, ror #20

00013220 <flatcc_builder_enter_user_frame@@Base>:
   13220:	push	{r4, r5, r6, r7, lr}
   13224:	sub	sp, sp, #12
   13228:	mov	r6, r0
   1322c:	add	r4, r1, #3
   13230:	bic	r4, r4, #3
   13234:	add	r4, r4, #4
   13238:	ldr	r5, [r0, #228]	; 0xe4
   1323c:	add	r2, r4, r5
   13240:	ldr	r3, [r0, #112]	; 0x70
   13244:	cmp	r2, r3
   13248:	bhi	1328c <flatcc_builder_enter_user_frame@@Base+0x6c>
   1324c:	ldr	r7, [r6, #108]	; 0x6c
   13250:	adds	r0, r7, r5
   13254:	moveq	r0, #0
   13258:	beq	13284 <flatcc_builder_enter_user_frame@@Base+0x64>
   1325c:	mov	r2, r4
   13260:	mov	r1, #0
   13264:	bl	12054 <memset@plt>
   13268:	ldr	r3, [r6, #224]	; 0xe0
   1326c:	str	r3, [r7, r5]
   13270:	ldr	r1, [r6, #228]	; 0xe4
   13274:	add	r0, r1, #4
   13278:	str	r0, [r6, #224]	; 0xe0
   1327c:	add	r4, r4, r1
   13280:	str	r4, [r6, #228]	; 0xe4
   13284:	add	sp, sp, #12
   13288:	pop	{r4, r5, r6, r7, pc}
   1328c:	mov	r3, #7
   13290:	str	r3, [sp]
   13294:	ldr	r7, [r0, #48]	; 0x30
   13298:	mov	r3, #0
   1329c:	add	r1, r0, #108	; 0x6c
   132a0:	ldr	r0, [r0, #40]	; 0x28
   132a4:	blx	r7
   132a8:	cmp	r0, #0
   132ac:	beq	1324c <flatcc_builder_enter_user_frame@@Base+0x2c>
   132b0:	ldr	r3, [pc, #12]	; 132c4 <flatcc_builder_enter_user_frame@@Base+0xa4>
   132b4:	mov	r2, #308	; 0x134
   132b8:	ldr	r1, [pc, #8]	; 132c8 <flatcc_builder_enter_user_frame@@Base+0xa8>
   132bc:	ldr	r0, [pc, #8]	; 132cc <flatcc_builder_enter_user_frame@@Base+0xac>
   132c0:	bl	12084 <__assert_fail@plt>
   132c4:	ldrdeq	r7, [r1], -r8
   132c8:	andeq	r7, r1, ip, lsl #20
   132cc:	andeq	r7, r1, r0, ror #20

000132d0 <flatcc_builder_exit_user_frame@@Base>:
   132d0:	ldr	r3, [r0, #224]	; 0xe0
   132d4:	cmp	r3, #0
   132d8:	beq	132fc <flatcc_builder_exit_user_frame@@Base+0x2c>
   132dc:	ldr	r2, [r0, #108]	; 0x6c
   132e0:	add	r2, r2, r3
   132e4:	sub	r3, r3, #4
   132e8:	str	r3, [r0, #228]	; 0xe4
   132ec:	ldr	r3, [r2, #-4]
   132f0:	str	r3, [r0, #224]	; 0xe0
   132f4:	mov	r0, r3
   132f8:	bx	lr
   132fc:	push	{r4, lr}
   13300:	ldr	r3, [pc, #12]	; 13314 <flatcc_builder_exit_user_frame@@Base+0x44>
   13304:	ldr	r2, [pc, #12]	; 13318 <flatcc_builder_exit_user_frame@@Base+0x48>
   13308:	ldr	r1, [pc, #12]	; 1331c <flatcc_builder_exit_user_frame@@Base+0x4c>
   1330c:	ldr	r0, [pc, #12]	; 13320 <flatcc_builder_exit_user_frame@@Base+0x50>
   13310:	bl	12084 <__assert_fail@plt>
   13314:	andeq	r7, r1, r0, lsr r5
   13318:	andeq	r0, r0, lr, lsl r2
   1331c:	andeq	r7, r1, ip, lsl #20
   13320:	andeq	r7, r1, r8, lsl #21

00013324 <flatcc_builder_exit_user_frame_at@@Base>:
   13324:	push	{r4, lr}
   13328:	ldr	r3, [r0, #224]	; 0xe0
   1332c:	cmp	r3, r1
   13330:	bcc	13340 <flatcc_builder_exit_user_frame_at@@Base+0x1c>
   13334:	str	r1, [r0, #224]	; 0xe0
   13338:	bl	132d0 <flatcc_builder_exit_user_frame@@Base>
   1333c:	pop	{r4, pc}
   13340:	ldr	r3, [pc, #12]	; 13354 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13344:	ldr	r2, [pc, #12]	; 13358 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13348:	ldr	r1, [pc, #12]	; 1335c <flatcc_builder_exit_user_frame_at@@Base+0x38>
   1334c:	ldr	r0, [pc, #12]	; 13360 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13350:	bl	12084 <__assert_fail@plt>
   13354:	andeq	r7, r1, r0, asr r5
   13358:	andeq	r0, r0, r7, lsr #4
   1335c:	andeq	r7, r1, ip, lsl #20
   13360:	andeq	r7, r1, r4, lsr #21

00013364 <flatcc_builder_get_current_user_frame@@Base>:
   13364:	ldr	r0, [r0, #224]	; 0xe0
   13368:	bx	lr

0001336c <flatcc_builder_get_user_frame_ptr@@Base>:
   1336c:	ldr	r0, [r0, #108]	; 0x6c
   13370:	add	r0, r0, r1
   13374:	bx	lr

00013378 <flatcc_builder_embed_buffer@@Base>:
   13378:	push	{r4, r5, r6, lr}
   1337c:	sub	sp, sp, #88	; 0x58
   13380:	mov	r4, r0
   13384:	mov	r6, r2
   13388:	mov	r5, r3
   1338c:	ldr	r3, [r0, #152]	; 0x98
   13390:	adds	r3, r3, #0
   13394:	movne	r3, #1
   13398:	mov	r2, r1
   1339c:	add	r1, sp, #104	; 0x68
   133a0:	bl	12a50 <flatcc_builder_default_alloc@@Base+0x114>
   133a4:	cmp	r0, #0
   133a8:	bne	134e4 <flatcc_builder_embed_buffer@@Base+0x16c>
   133ac:	ldr	r3, [sp, #108]	; 0x6c
   133b0:	and	r3, r3, #2
   133b4:	cmp	r3, #0
   133b8:	movne	r3, #4
   133bc:	moveq	r3, #0
   133c0:	ldr	r1, [r4, #136]	; 0x88
   133c4:	sub	r2, r1, r5
   133c8:	sub	r3, r2, r3
   133cc:	ldrh	r2, [sp, #104]	; 0x68
   133d0:	sub	r2, r2, #1
   133d4:	and	r3, r3, r2
   133d8:	add	r2, r5, r3
   133dc:	str	r2, [sp, #84]	; 0x54
   133e0:	mov	r2, #0
   133e4:	str	r2, [sp, #12]
   133e8:	str	r2, [sp, #16]
   133ec:	ldr	r2, [r4, #152]	; 0x98
   133f0:	cmp	r2, #0
   133f4:	beq	13414 <flatcc_builder_embed_buffer@@Base+0x9c>
   133f8:	mov	r2, #4
   133fc:	str	r2, [sp, #12]
   13400:	add	r0, sp, #84	; 0x54
   13404:	str	r0, [sp, #20]
   13408:	str	r2, [sp, #24]
   1340c:	mov	r2, #1
   13410:	str	r2, [sp, #16]
   13414:	cmp	r5, #0
   13418:	beq	13444 <flatcc_builder_embed_buffer@@Base+0xcc>
   1341c:	ldr	r2, [sp, #12]
   13420:	add	r2, r2, r5
   13424:	str	r2, [sp, #12]
   13428:	ldr	r2, [sp, #16]
   1342c:	add	r2, r2, #1
   13430:	add	r0, sp, #88	; 0x58
   13434:	add	r0, r0, r2, lsl #3
   13438:	str	r6, [r0, #-76]	; 0xffffffb4
   1343c:	str	r5, [r0, #-72]	; 0xffffffb8
   13440:	str	r2, [sp, #16]
   13444:	cmp	r3, #0
   13448:	beq	13478 <flatcc_builder_embed_buffer@@Base+0x100>
   1344c:	ldr	r2, [sp, #12]
   13450:	add	r2, r2, r3
   13454:	str	r2, [sp, #12]
   13458:	ldr	r2, [sp, #16]
   1345c:	add	r2, r2, #1
   13460:	add	r0, sp, #88	; 0x58
   13464:	add	r0, r0, r2, lsl #3
   13468:	ldr	ip, [pc, #124]	; 134ec <flatcc_builder_embed_buffer@@Base+0x174>
   1346c:	str	ip, [r0, #-76]	; 0xffffffb4
   13470:	str	r3, [r0, #-72]	; 0xffffffb8
   13474:	str	r2, [sp, #16]
   13478:	ldr	r3, [sp, #12]
   1347c:	sub	r5, r1, r3
   13480:	cmp	r1, r5
   13484:	ble	134bc <flatcc_builder_embed_buffer@@Base+0x144>
   13488:	str	r3, [sp]
   1348c:	ldr	r6, [r4, #44]	; 0x2c
   13490:	mov	r3, r5
   13494:	ldr	r2, [sp, #16]
   13498:	add	r1, sp, #20
   1349c:	ldr	r0, [r4, #36]	; 0x24
   134a0:	blx	r6
   134a4:	cmp	r0, #0
   134a8:	streq	r5, [r4, #136]	; 0x88
   134ac:	bne	134d0 <flatcc_builder_embed_buffer@@Base+0x158>
   134b0:	mov	r0, r5
   134b4:	add	sp, sp, #88	; 0x58
   134b8:	pop	{r4, r5, r6, pc}
   134bc:	ldr	r3, [pc, #44]	; 134f0 <flatcc_builder_embed_buffer@@Base+0x178>
   134c0:	ldr	r2, [pc, #44]	; 134f4 <flatcc_builder_embed_buffer@@Base+0x17c>
   134c4:	ldr	r1, [pc, #44]	; 134f8 <flatcc_builder_embed_buffer@@Base+0x180>
   134c8:	ldr	r0, [pc, #44]	; 134fc <flatcc_builder_embed_buffer@@Base+0x184>
   134cc:	bl	12084 <__assert_fail@plt>
   134d0:	ldr	r3, [pc, #24]	; 134f0 <flatcc_builder_embed_buffer@@Base+0x178>
   134d4:	ldr	r2, [pc, #36]	; 13500 <flatcc_builder_embed_buffer@@Base+0x188>
   134d8:	ldr	r1, [pc, #24]	; 134f8 <flatcc_builder_embed_buffer@@Base+0x180>
   134dc:	ldr	r0, [pc, #24]	; 134fc <flatcc_builder_embed_buffer@@Base+0x184>
   134e0:	bl	12084 <__assert_fail@plt>
   134e4:	mov	r5, #0
   134e8:	b	134b0 <flatcc_builder_embed_buffer@@Base+0x138>
   134ec:			; <UNDEFINED> instruction: 0x000172bc
   134f0:	andeq	r7, r1, r8, lsl #10
   134f4:	andeq	r0, r0, r7, lsl #5
   134f8:	andeq	r7, r1, ip, lsl #20
   134fc:	andeq	r7, r1, r0, ror #20
   13500:	andeq	r0, r0, fp, lsl #5

00013504 <flatcc_builder_create_buffer@@Base>:
   13504:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13508:	sub	sp, sp, #96	; 0x60
   1350c:	mov	r5, r0
   13510:	mov	r9, r1
   13514:	mov	r6, r3
   13518:	ldr	r8, [sp, #132]	; 0x84
   1351c:	mov	r3, #0
   13520:	str	r3, [sp, #12]
   13524:	and	r4, r8, #1
   13528:	uxtb	r7, r4
   1352c:	mov	r3, r7
   13530:	add	r1, sp, #128	; 0x80
   13534:	bl	12a50 <flatcc_builder_default_alloc@@Base+0x114>
   13538:	cmp	r0, #0
   1353c:	bne	136e0 <flatcc_builder_create_buffer@@Base+0x1dc>
   13540:	ldrh	r0, [sp, #128]	; 0x80
   13544:	ldrh	r3, [r5, #128]	; 0x80
   13548:	cmp	r3, r0
   1354c:	strhcc	r0, [r5, #128]	; 0x80
   13550:	cmp	r9, #0
   13554:	ldrne	r3, [r9]
   13558:	strne	r3, [sp, #12]
   1355c:	ldr	r1, [sp, #12]
   13560:	cmp	r1, #0
   13564:	movne	r1, #4
   13568:	moveq	r1, #0
   1356c:	tst	r8, #2
   13570:	bne	136e8 <flatcc_builder_create_buffer@@Base+0x1e4>
   13574:	ldr	ip, [r5, #136]	; 0x88
   13578:	mov	r2, ip
   1357c:	sub	r3, ip, #4
   13580:	sub	r3, r3, r1
   13584:	sub	r0, r0, #1
   13588:	and	r3, r3, r0
   1358c:	mov	r0, #0
   13590:	str	r0, [sp, #16]
   13594:	str	r0, [sp, #20]
   13598:	cmp	r4, r0
   1359c:	bne	13704 <flatcc_builder_create_buffer@@Base+0x200>
   135a0:	ldr	lr, [sp, #16]
   135a4:	add	lr, lr, #4
   135a8:	str	lr, [sp, #16]
   135ac:	ldr	r8, [sp, #20]
   135b0:	add	r0, r8, #1
   135b4:	add	r9, sp, #96	; 0x60
   135b8:	add	r9, r9, r0, lsl #3
   135bc:	add	sl, sp, #92	; 0x5c
   135c0:	str	sl, [r9, #-80]	; 0xffffffb0
   135c4:	mov	sl, #4
   135c8:	str	sl, [r9, #-76]	; 0xffffffb4
   135cc:	str	r0, [sp, #20]
   135d0:	cmp	r1, #0
   135d4:	beq	13600 <flatcc_builder_create_buffer@@Base+0xfc>
   135d8:	add	lr, r1, lr
   135dc:	str	lr, [sp, #16]
   135e0:	add	r0, r8, #2
   135e4:	add	lr, sp, #96	; 0x60
   135e8:	add	r0, lr, r0, lsl #3
   135ec:	add	lr, sp, #12
   135f0:	str	lr, [r0, #-80]	; 0xffffffb0
   135f4:	str	r1, [r0, #-76]	; 0xffffffb4
   135f8:	add	r8, r8, #2
   135fc:	str	r8, [sp, #20]
   13600:	cmp	r3, #0
   13604:	beq	13634 <flatcc_builder_create_buffer@@Base+0x130>
   13608:	ldr	r1, [sp, #16]
   1360c:	add	r1, r1, r3
   13610:	str	r1, [sp, #16]
   13614:	ldr	r1, [sp, #20]
   13618:	add	r1, r1, #1
   1361c:	add	r0, sp, #96	; 0x60
   13620:	add	r0, r0, r1, lsl #3
   13624:	ldr	lr, [pc, #248]	; 13724 <flatcc_builder_create_buffer@@Base+0x220>
   13628:	str	lr, [r0, #-80]	; 0xffffffb0
   1362c:	str	r3, [r0, #-76]	; 0xffffffb4
   13630:	str	r1, [sp, #20]
   13634:	ldr	r1, [sp, #16]
   13638:	sub	r3, r2, r1
   1363c:	add	r3, r3, r7, lsl #2
   13640:	cmp	r4, #0
   13644:	ldrne	r2, [r5, #144]	; 0x90
   13648:	ldreq	r2, [r5, #140]	; 0x8c
   1364c:	sub	r2, r2, r3
   13650:	str	r2, [sp, #88]	; 0x58
   13654:	sub	r3, r6, r3
   13658:	str	r3, [sp, #92]	; 0x5c
   1365c:	sub	r4, ip, r1
   13660:	cmp	r4, ip
   13664:	bge	136a4 <flatcc_builder_create_buffer@@Base+0x1a0>
   13668:	str	r1, [sp]
   1366c:	ldr	r6, [r5, #44]	; 0x2c
   13670:	mov	r3, r4
   13674:	ldr	r2, [sp, #20]
   13678:	add	r1, sp, #24
   1367c:	ldr	r0, [r5, #36]	; 0x24
   13680:	blx	r6
   13684:	cmp	r0, #0
   13688:	bne	136b8 <flatcc_builder_create_buffer@@Base+0x1b4>
   1368c:	str	r4, [r5, #136]	; 0x88
   13690:	cmp	r4, #0
   13694:	beq	136cc <flatcc_builder_create_buffer@@Base+0x1c8>
   13698:	mov	r0, r4
   1369c:	add	sp, sp, #96	; 0x60
   136a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136a4:	ldr	r3, [pc, #124]	; 13728 <flatcc_builder_create_buffer@@Base+0x224>
   136a8:	ldr	r2, [pc, #124]	; 1372c <flatcc_builder_create_buffer@@Base+0x228>
   136ac:	ldr	r1, [pc, #124]	; 13730 <flatcc_builder_create_buffer@@Base+0x22c>
   136b0:	ldr	r0, [pc, #124]	; 13734 <flatcc_builder_create_buffer@@Base+0x230>
   136b4:	bl	12084 <__assert_fail@plt>
   136b8:	ldr	r3, [pc, #104]	; 13728 <flatcc_builder_create_buffer@@Base+0x224>
   136bc:	ldr	r2, [pc, #116]	; 13738 <flatcc_builder_create_buffer@@Base+0x234>
   136c0:	ldr	r1, [pc, #104]	; 13730 <flatcc_builder_create_buffer@@Base+0x22c>
   136c4:	ldr	r0, [pc, #104]	; 13734 <flatcc_builder_create_buffer@@Base+0x230>
   136c8:	bl	12084 <__assert_fail@plt>
   136cc:	ldr	r3, [pc, #104]	; 1373c <flatcc_builder_create_buffer@@Base+0x238>
   136d0:	mov	r2, #772	; 0x304
   136d4:	ldr	r1, [pc, #84]	; 13730 <flatcc_builder_create_buffer@@Base+0x22c>
   136d8:	ldr	r0, [pc, #84]	; 13734 <flatcc_builder_create_buffer@@Base+0x230>
   136dc:	bl	12084 <__assert_fail@plt>
   136e0:	mov	r4, #0
   136e4:	b	13698 <flatcc_builder_create_buffer@@Base+0x194>
   136e8:	ldr	ip, [r5, #136]	; 0x88
   136ec:	mov	r2, ip
   136f0:	sub	r3, ip, #8
   136f4:	sub	r3, r3, r1
   136f8:	sub	r0, r0, #1
   136fc:	and	r3, r3, r0
   13700:	mov	r7, #1
   13704:	mov	r0, #4
   13708:	str	r0, [sp, #16]
   1370c:	add	lr, sp, #88	; 0x58
   13710:	str	lr, [sp, #24]
   13714:	str	r0, [sp, #28]
   13718:	mov	r0, #1
   1371c:	str	r0, [sp, #20]
   13720:	b	135a0 <flatcc_builder_create_buffer@@Base+0x9c>
   13724:			; <UNDEFINED> instruction: 0x000172bc
   13728:	andeq	r7, r1, r8, lsl #10
   1372c:	andeq	r0, r0, r7, lsl #5
   13730:	andeq	r7, r1, ip, lsl #20
   13734:	andeq	r7, r1, r0, ror #20
   13738:	andeq	r0, r0, fp, lsl #5
   1373c:	andeq	r7, r1, r4, ror r5

00013740 <flatcc_builder_create_struct@@Base>:
   13740:	push	{r4, r5, r6, lr}
   13744:	sub	sp, sp, #80	; 0x50
   13748:	cmp	r3, #0
   1374c:	beq	137a4 <flatcc_builder_create_struct@@Base+0x64>
   13750:	mov	r4, r0
   13754:	ldrh	r0, [r0, #128]	; 0x80
   13758:	cmp	r0, r3
   1375c:	strhcc	r3, [r4, #128]	; 0x80
   13760:	ldr	ip, [r4, #136]	; 0x88
   13764:	sub	r0, ip, r2
   13768:	sub	r3, r3, #1
   1376c:	and	r3, r3, r0
   13770:	mov	r0, #0
   13774:	str	r0, [sp, #8]
   13778:	str	r0, [sp, #12]
   1377c:	cmp	r2, r0
   13780:	beq	137e0 <flatcc_builder_create_struct@@Base+0xa0>
   13784:	str	r2, [sp, #8]
   13788:	str	r1, [sp, #16]
   1378c:	str	r2, [sp, #20]
   13790:	mov	r2, #1
   13794:	str	r2, [sp, #12]
   13798:	cmp	r3, r0
   1379c:	beq	13814 <flatcc_builder_create_struct@@Base+0xd4>
   137a0:	b	137e8 <flatcc_builder_create_struct@@Base+0xa8>
   137a4:	ldr	r3, [pc, #172]	; 13858 <flatcc_builder_create_struct@@Base+0x118>
   137a8:	ldr	r2, [pc, #172]	; 1385c <flatcc_builder_create_struct@@Base+0x11c>
   137ac:	ldr	r1, [pc, #172]	; 13860 <flatcc_builder_create_struct@@Base+0x120>
   137b0:	ldr	r0, [pc, #172]	; 13864 <flatcc_builder_create_struct@@Base+0x124>
   137b4:	bl	12084 <__assert_fail@plt>
   137b8:	ldr	r3, [pc, #168]	; 13868 <flatcc_builder_create_struct@@Base+0x128>
   137bc:	ldr	r2, [pc, #168]	; 1386c <flatcc_builder_create_struct@@Base+0x12c>
   137c0:	ldr	r1, [pc, #152]	; 13860 <flatcc_builder_create_struct@@Base+0x120>
   137c4:	ldr	r0, [pc, #164]	; 13870 <flatcc_builder_create_struct@@Base+0x130>
   137c8:	bl	12084 <__assert_fail@plt>
   137cc:	ldr	r3, [pc, #148]	; 13868 <flatcc_builder_create_struct@@Base+0x128>
   137d0:	ldr	r2, [pc, #156]	; 13874 <flatcc_builder_create_struct@@Base+0x134>
   137d4:	ldr	r1, [pc, #132]	; 13860 <flatcc_builder_create_struct@@Base+0x120>
   137d8:	ldr	r0, [pc, #144]	; 13870 <flatcc_builder_create_struct@@Base+0x130>
   137dc:	bl	12084 <__assert_fail@plt>
   137e0:	cmp	r3, #0
   137e4:	beq	137b8 <flatcc_builder_create_struct@@Base+0x78>
   137e8:	ldr	r2, [sp, #8]
   137ec:	add	r2, r2, r3
   137f0:	str	r2, [sp, #8]
   137f4:	ldr	r2, [sp, #12]
   137f8:	add	r2, r2, #1
   137fc:	add	r1, sp, #80	; 0x50
   13800:	add	r1, r1, r2, lsl #3
   13804:	ldr	r0, [pc, #108]	; 13878 <flatcc_builder_create_struct@@Base+0x138>
   13808:	str	r0, [r1, #-72]	; 0xffffffb8
   1380c:	str	r3, [r1, #-68]	; 0xffffffbc
   13810:	str	r2, [sp, #12]
   13814:	ldr	r3, [sp, #8]
   13818:	sub	r5, ip, r3
   1381c:	cmp	ip, r5
   13820:	ble	137b8 <flatcc_builder_create_struct@@Base+0x78>
   13824:	str	r3, [sp]
   13828:	ldr	r6, [r4, #44]	; 0x2c
   1382c:	mov	r3, r5
   13830:	ldr	r2, [sp, #12]
   13834:	add	r1, sp, #16
   13838:	ldr	r0, [r4, #36]	; 0x24
   1383c:	blx	r6
   13840:	cmp	r0, #0
   13844:	bne	137cc <flatcc_builder_create_struct@@Base+0x8c>
   13848:	str	r5, [r4, #136]	; 0x88
   1384c:	mov	r0, r5
   13850:	add	sp, sp, #80	; 0x50
   13854:	pop	{r4, r5, r6, pc}
   13858:	muleq	r1, r4, r5
   1385c:	andeq	r0, r0, pc, lsl #6
   13860:	andeq	r7, r1, ip, lsl #20
   13864:	andeq	r7, r1, r4, asr #21
   13868:	andeq	r7, r1, r8, lsl #10
   1386c:	andeq	r0, r0, r7, lsl #5
   13870:	andeq	r7, r1, r0, ror #20
   13874:	andeq	r0, r0, fp, lsl #5
   13878:			; <UNDEFINED> instruction: 0x000172bc

0001387c <flatcc_builder_start_buffer@@Base>:
   1387c:	push	{r4, r5, r6, r7, r8, lr}
   13880:	mov	r4, r0
   13884:	mov	r5, r1
   13888:	mov	r7, r2
   1388c:	mov	r6, r3
   13890:	ldrh	r1, [r0, #128]	; 0x80
   13894:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x22c>
   13898:	cmp	r0, #0
   1389c:	bne	13928 <flatcc_builder_start_buffer@@Base+0xac>
   138a0:	mov	r3, #1
   138a4:	strh	r3, [r4, #128]	; 0x80
   138a8:	ldr	r3, [r4, #32]
   138ac:	ldrh	r2, [r4, #132]	; 0x84
   138b0:	strh	r2, [r3, #34]	; 0x22
   138b4:	strh	r7, [r4, #132]	; 0x84
   138b8:	ldr	r3, [r4, #32]
   138bc:	ldrh	r2, [r4, #164]	; 0xa4
   138c0:	strh	r2, [r3, #32]
   138c4:	strh	r6, [r4, #164]	; 0xa4
   138c8:	ldr	r3, [r4, #32]
   138cc:	ldr	r2, [r4, #144]	; 0x90
   138d0:	str	r2, [r3, #20]
   138d4:	ldr	r3, [r4, #32]
   138d8:	ldr	r2, [r4, #152]	; 0x98
   138dc:	str	r2, [r3, #28]
   138e0:	ldr	r3, [r4, #136]	; 0x88
   138e4:	str	r3, [r4, #144]	; 0x90
   138e8:	ldr	r3, [r4, #148]	; 0x94
   138ec:	add	r2, r3, #1
   138f0:	str	r2, [r4, #148]	; 0x94
   138f4:	str	r3, [r4, #152]	; 0x98
   138f8:	ldr	r3, [r4, #32]
   138fc:	ldr	r2, [r4, #168]	; 0xa8
   13900:	str	r2, [r3, #16]
   13904:	ldr	r3, [pc, #36]	; 13930 <flatcc_builder_start_buffer@@Base+0xb4>
   13908:	cmp	r5, #0
   1390c:	moveq	r5, r3
   13910:	ldr	r3, [r5]
   13914:	str	r3, [r4, #168]	; 0xa8
   13918:	ldr	r3, [r4, #32]
   1391c:	mov	r2, #1
   13920:	strh	r2, [r3, #14]
   13924:	pop	{r4, r5, r6, r7, r8, pc}
   13928:	mvn	r0, #0
   1392c:	pop	{r4, r5, r6, r7, r8, pc}
   13930:			; <UNDEFINED> instruction: 0x000172bc

00013934 <flatcc_builder_end_buffer@@Base>:
   13934:	push	{r4, r5, lr}
   13938:	sub	sp, sp, #12
   1393c:	mov	r4, r0
   13940:	ldrh	r2, [r0, #164]	; 0xa4
   13944:	and	r2, r2, #2
   13948:	ldr	r0, [r0, #152]	; 0x98
   1394c:	cmp	r0, #0
   13950:	moveq	r0, r2
   13954:	orrne	r0, r2, #1
   13958:	ldr	r2, [r4, #32]
   1395c:	ldrh	r2, [r2, #14]
   13960:	cmp	r2, #1
   13964:	bne	139a8 <flatcc_builder_end_buffer@@Base+0x74>
   13968:	ldrh	r2, [r4, #132]	; 0x84
   1396c:	ldrh	r3, [r4, #128]	; 0x80
   13970:	cmp	r3, r2
   13974:	strhcc	r2, [r4, #128]	; 0x80
   13978:	str	r0, [sp, #4]
   1397c:	ldrh	r3, [r4, #128]	; 0x80
   13980:	str	r3, [sp]
   13984:	mov	r3, r1
   13988:	add	r1, r4, #168	; 0xa8
   1398c:	mov	r0, r4
   13990:	bl	13504 <flatcc_builder_create_buffer@@Base>
   13994:	subs	r5, r0, #0
   13998:	bne	139bc <flatcc_builder_end_buffer@@Base+0x88>
   1399c:	mov	r0, r5
   139a0:	add	sp, sp, #12
   139a4:	pop	{r4, r5, pc}
   139a8:	ldr	r3, [pc, #176]	; 13a60 <flatcc_builder_end_buffer@@Base+0x12c>
   139ac:	ldr	r2, [pc, #176]	; 13a64 <flatcc_builder_end_buffer@@Base+0x130>
   139b0:	ldr	r1, [pc, #176]	; 13a68 <flatcc_builder_end_buffer@@Base+0x134>
   139b4:	ldr	r0, [pc, #176]	; 13a6c <flatcc_builder_end_buffer@@Base+0x138>
   139b8:	bl	12084 <__assert_fail@plt>
   139bc:	ldr	r3, [r4, #32]
   139c0:	ldr	r2, [r3, #20]
   139c4:	str	r2, [r4, #144]	; 0x90
   139c8:	ldr	r2, [r3, #28]
   139cc:	str	r2, [r4, #152]	; 0x98
   139d0:	ldr	r2, [r3, #16]
   139d4:	str	r2, [r4, #168]	; 0xa8
   139d8:	ldrh	r3, [r3, #32]
   139dc:	strh	r3, [r4, #164]	; 0xa4
   139e0:	ldr	r2, [r4, #20]
   139e4:	mov	r1, #0
   139e8:	ldr	r0, [r4, #16]
   139ec:	bl	12054 <memset@plt>
   139f0:	ldr	r2, [r4, #32]
   139f4:	ldr	r3, [r2, #8]
   139f8:	str	r3, [r4, #20]
   139fc:	ldr	r0, [r2]
   13a00:	str	r0, [r4, #28]
   13a04:	ldr	r1, [r2, #4]
   13a08:	ldr	r3, [r4, #60]	; 0x3c
   13a0c:	add	r3, r3, r0
   13a10:	str	r3, [r4, #16]
   13a14:	ldr	r3, [r4, #64]	; 0x40
   13a18:	sub	r3, r3, r0
   13a1c:	cmp	r3, r1
   13a20:	movcs	r3, r1
   13a24:	str	r3, [r4, #24]
   13a28:	str	r1, [r2, #4]
   13a2c:	ldrh	r3, [r4, #130]	; 0x82
   13a30:	ldrh	r2, [r4, #128]	; 0x80
   13a34:	cmp	r2, r3
   13a38:	strhcc	r3, [r4, #128]	; 0x80
   13a3c:	ldr	r3, [r4, #32]
   13a40:	ldrh	r2, [r3, #12]
   13a44:	strh	r2, [r4, #130]	; 0x82
   13a48:	sub	r3, r3, #36	; 0x24
   13a4c:	str	r3, [r4, #32]
   13a50:	ldr	r3, [r4, #156]	; 0x9c
   13a54:	sub	r3, r3, #1
   13a58:	str	r3, [r4, #156]	; 0x9c
   13a5c:	b	1399c <flatcc_builder_end_buffer@@Base+0x68>
   13a60:			; <UNDEFINED> instruction: 0x000175b4
   13a64:	andeq	r0, r0, r6, asr #6
   13a68:	andeq	r7, r1, ip, lsl #20
   13a6c:	ldrdeq	r7, [r1], -r0

00013a70 <flatcc_builder_start_struct@@Base>:
   13a70:	push	{r4, r5, r6, lr}
   13a74:	mov	r4, r0
   13a78:	mov	r5, r1
   13a7c:	mov	r1, r2
   13a80:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x22c>
   13a84:	cmp	r0, #0
   13a88:	bne	13b08 <flatcc_builder_start_struct@@Base+0x98>
   13a8c:	ldr	r3, [r4, #32]
   13a90:	mov	r2, #2
   13a94:	strh	r2, [r3, #14]
   13a98:	ldr	r1, [r4, #28]
   13a9c:	ldr	r2, [r4, #60]	; 0x3c
   13aa0:	add	r2, r2, r1
   13aa4:	str	r2, [r4, #16]
   13aa8:	ldr	r3, [r4, #64]	; 0x40
   13aac:	sub	r3, r3, r1
   13ab0:	cmn	r3, #4
   13ab4:	mvnhi	r3, #3
   13ab8:	str	r3, [r4, #24]
   13abc:	ldr	r3, [r4, #32]
   13ac0:	mvn	r2, #3
   13ac4:	str	r2, [r3, #4]
   13ac8:	ldr	r6, [r4, #20]
   13acc:	add	r5, r5, r6
   13ad0:	str	r5, [r4, #20]
   13ad4:	ldr	r3, [r4, #24]
   13ad8:	cmp	r5, r3
   13adc:	bcs	13aec <flatcc_builder_start_struct@@Base+0x7c>
   13ae0:	ldr	r0, [r4, #16]
   13ae4:	add	r0, r0, r6
   13ae8:	pop	{r4, r5, r6, pc}
   13aec:	add	r1, r5, #1
   13af0:	mov	r0, r4
   13af4:	bl	128c8 <main@@Base+0x18>
   13af8:	cmp	r0, #0
   13afc:	beq	13ae0 <flatcc_builder_start_struct@@Base+0x70>
   13b00:	mov	r0, #0
   13b04:	pop	{r4, r5, r6, pc}
   13b08:	mov	r0, #0
   13b0c:	pop	{r4, r5, r6, pc}

00013b10 <flatcc_builder_struct_edit@@Base>:
   13b10:	ldr	r0, [r0, #16]
   13b14:	bx	lr

00013b18 <flatcc_builder_end_struct@@Base>:
   13b18:	push	{r4, r5, r6, lr}
   13b1c:	ldr	r3, [r0, #32]
   13b20:	ldrh	r3, [r3, #14]
   13b24:	cmp	r3, #2
   13b28:	bne	13b50 <flatcc_builder_end_struct@@Base+0x38>
   13b2c:	mov	r4, r0
   13b30:	ldrh	r3, [r0, #130]	; 0x82
   13b34:	ldr	r2, [r0, #20]
   13b38:	ldr	r1, [r0, #16]
   13b3c:	bl	13740 <flatcc_builder_create_struct@@Base>
   13b40:	subs	r5, r0, #0
   13b44:	bne	13b64 <flatcc_builder_end_struct@@Base+0x4c>
   13b48:	mov	r0, r5
   13b4c:	pop	{r4, r5, r6, pc}
   13b50:	ldr	r3, [pc, #140]	; 13be4 <flatcc_builder_end_struct@@Base+0xcc>
   13b54:	mov	r2, #872	; 0x368
   13b58:	ldr	r1, [pc, #136]	; 13be8 <flatcc_builder_end_struct@@Base+0xd0>
   13b5c:	ldr	r0, [pc, #136]	; 13bec <flatcc_builder_end_struct@@Base+0xd4>
   13b60:	bl	12084 <__assert_fail@plt>
   13b64:	ldr	r2, [r4, #20]
   13b68:	mov	r1, #0
   13b6c:	ldr	r0, [r4, #16]
   13b70:	bl	12054 <memset@plt>
   13b74:	ldr	r2, [r4, #32]
   13b78:	ldr	r3, [r2, #8]
   13b7c:	str	r3, [r4, #20]
   13b80:	ldr	r0, [r2]
   13b84:	str	r0, [r4, #28]
   13b88:	ldr	r1, [r2, #4]
   13b8c:	ldr	r3, [r4, #60]	; 0x3c
   13b90:	add	r3, r3, r0
   13b94:	str	r3, [r4, #16]
   13b98:	ldr	r3, [r4, #64]	; 0x40
   13b9c:	sub	r3, r3, r0
   13ba0:	cmp	r3, r1
   13ba4:	movcs	r3, r1
   13ba8:	str	r3, [r4, #24]
   13bac:	str	r1, [r2, #4]
   13bb0:	ldrh	r3, [r4, #130]	; 0x82
   13bb4:	ldrh	r2, [r4, #128]	; 0x80
   13bb8:	cmp	r2, r3
   13bbc:	strhcc	r3, [r4, #128]	; 0x80
   13bc0:	ldr	r3, [r4, #32]
   13bc4:	ldrh	r2, [r3, #12]
   13bc8:	strh	r2, [r4, #130]	; 0x82
   13bcc:	sub	r3, r3, #36	; 0x24
   13bd0:	str	r3, [r4, #32]
   13bd4:	ldr	r3, [r4, #156]	; 0x9c
   13bd8:	sub	r3, r3, #1
   13bdc:	str	r3, [r4, #156]	; 0x9c
   13be0:	b	13b48 <flatcc_builder_end_struct@@Base+0x30>
   13be4:	ldrdeq	r7, [r1], -r0
   13be8:	andeq	r7, r1, ip, lsl #20
   13bec:	strdeq	r7, [r1], -ip

00013bf0 <flatcc_builder_extend_vector@@Base>:
   13bf0:	push	{r4, r5, r6, lr}
   13bf4:	mov	r4, r0
   13bf8:	ldr	r2, [r0, #32]
   13bfc:	ldr	r3, [r2, #20]
   13c00:	add	r0, r1, r3
   13c04:	ldr	ip, [r2, #24]
   13c08:	cmp	r3, r0
   13c0c:	movls	r3, #0
   13c10:	movhi	r3, #1
   13c14:	cmp	ip, r0
   13c18:	orrcc	r3, r3, #1
   13c1c:	cmp	r3, #0
   13c20:	bne	13c54 <flatcc_builder_extend_vector@@Base+0x64>
   13c24:	str	r0, [r2, #20]
   13c28:	ldr	r5, [r4, #20]
   13c2c:	ldr	r3, [r4, #32]
   13c30:	ldr	r3, [r3, #16]
   13c34:	mla	r1, r3, r1, r5
   13c38:	str	r1, [r4, #20]
   13c3c:	ldr	r3, [r4, #24]
   13c40:	cmp	r1, r3
   13c44:	bcs	13c68 <flatcc_builder_extend_vector@@Base+0x78>
   13c48:	ldr	r0, [r4, #16]
   13c4c:	add	r0, r0, r5
   13c50:	pop	{r4, r5, r6, pc}
   13c54:	ldr	r3, [pc, #44]	; 13c88 <flatcc_builder_extend_vector@@Base+0x98>
   13c58:	mov	r2, #892	; 0x37c
   13c5c:	ldr	r1, [pc, #40]	; 13c8c <flatcc_builder_extend_vector@@Base+0x9c>
   13c60:	ldr	r0, [pc, #40]	; 13c90 <flatcc_builder_extend_vector@@Base+0xa0>
   13c64:	bl	12084 <__assert_fail@plt>
   13c68:	mvn	r2, #3
   13c6c:	add	r1, r1, #1
   13c70:	mov	r0, r4
   13c74:	bl	128c8 <main@@Base+0x18>
   13c78:	cmp	r0, #0
   13c7c:	beq	13c48 <flatcc_builder_extend_vector@@Base+0x58>
   13c80:	mov	r0, #0
   13c84:	pop	{r4, r5, r6, pc}
   13c88:	andeq	r7, r1, ip, ror #11
   13c8c:	andeq	r7, r1, ip, lsl #20
   13c90:	andeq	r7, r1, r8, lsr #22

00013c94 <flatcc_builder_vector_push@@Base>:
   13c94:	push	{r4, r5, r6, r7, r8, lr}
   13c98:	ldr	r3, [r0, #32]
   13c9c:	ldrh	r2, [r3, #14]
   13ca0:	cmp	r2, #4
   13ca4:	bne	13d0c <flatcc_builder_vector_push@@Base+0x78>
   13ca8:	mov	r4, r0
   13cac:	mov	r6, r1
   13cb0:	ldr	r2, [r3, #20]
   13cb4:	ldr	r1, [r3, #24]
   13cb8:	cmp	r2, r1
   13cbc:	bhi	13d20 <flatcc_builder_vector_push@@Base+0x8c>
   13cc0:	add	r2, r2, #1
   13cc4:	str	r2, [r3, #20]
   13cc8:	ldr	r3, [r0, #32]
   13ccc:	ldr	r7, [r3, #16]
   13cd0:	ldr	r5, [r0, #20]
   13cd4:	add	r1, r7, r5
   13cd8:	str	r1, [r0, #20]
   13cdc:	ldr	r3, [r0, #24]
   13ce0:	cmp	r1, r3
   13ce4:	bcs	13d34 <flatcc_builder_vector_push@@Base+0xa0>
   13ce8:	ldr	r4, [r4, #16]
   13cec:	adds	r4, r4, r5
   13cf0:	beq	13d04 <flatcc_builder_vector_push@@Base+0x70>
   13cf4:	mov	r2, r7
   13cf8:	mov	r1, r6
   13cfc:	mov	r0, r4
   13d00:	bl	11fd0 <memcpy@plt>
   13d04:	mov	r0, r4
   13d08:	pop	{r4, r5, r6, r7, r8, pc}
   13d0c:	ldr	r3, [pc, #60]	; 13d50 <flatcc_builder_vector_push@@Base+0xbc>
   13d10:	ldr	r2, [pc, #60]	; 13d54 <flatcc_builder_vector_push@@Base+0xc0>
   13d14:	ldr	r1, [pc, #60]	; 13d58 <flatcc_builder_vector_push@@Base+0xc4>
   13d18:	ldr	r0, [pc, #60]	; 13d5c <flatcc_builder_vector_push@@Base+0xc8>
   13d1c:	bl	12084 <__assert_fail@plt>
   13d20:	ldr	r3, [pc, #40]	; 13d50 <flatcc_builder_vector_push@@Base+0xbc>
   13d24:	mov	r2, #908	; 0x38c
   13d28:	ldr	r1, [pc, #40]	; 13d58 <flatcc_builder_vector_push@@Base+0xc4>
   13d2c:	ldr	r0, [pc, #44]	; 13d60 <flatcc_builder_vector_push@@Base+0xcc>
   13d30:	bl	12084 <__assert_fail@plt>
   13d34:	mvn	r2, #3
   13d38:	add	r1, r1, #1
   13d3c:	bl	128c8 <main@@Base+0x18>
   13d40:	cmp	r0, #0
   13d44:	beq	13ce8 <flatcc_builder_vector_push@@Base+0x54>
   13d48:	mov	r4, #0
   13d4c:	b	13d04 <flatcc_builder_vector_push@@Base+0x70>
   13d50:	andeq	r7, r1, r0, lsl #12
   13d54:	andeq	r0, r0, fp, lsl #7
   13d58:	andeq	r7, r1, ip, lsl #20
   13d5c:	andeq	r7, r1, r4, asr #22
   13d60:	andeq	r7, r1, r0, ror fp

00013d64 <flatcc_builder_append_vector@@Base>:
   13d64:	push	{r4, r5, r6, r7, r8, lr}
   13d68:	mov	r5, r1
   13d6c:	ldr	r1, [r0, #32]
   13d70:	ldrh	r3, [r1, #14]
   13d74:	cmp	r3, #4
   13d78:	bne	13df4 <flatcc_builder_append_vector@@Base+0x90>
   13d7c:	mov	r4, r0
   13d80:	ldr	r3, [r1, #20]
   13d84:	add	r0, r2, r3
   13d88:	ldr	ip, [r1, #24]
   13d8c:	cmp	r3, r0
   13d90:	movls	r3, #0
   13d94:	movhi	r3, #1
   13d98:	cmp	ip, r0
   13d9c:	orrcc	r3, r3, #1
   13da0:	cmp	r3, #0
   13da4:	bne	13e08 <flatcc_builder_append_vector@@Base+0xa4>
   13da8:	str	r0, [r1, #20]
   13dac:	ldr	r3, [r4, #32]
   13db0:	ldr	r6, [r3, #16]
   13db4:	mul	r6, r6, r2
   13db8:	ldr	r7, [r4, #20]
   13dbc:	add	r1, r6, r7
   13dc0:	str	r1, [r4, #20]
   13dc4:	ldr	r3, [r4, #24]
   13dc8:	cmp	r1, r3
   13dcc:	bcs	13e1c <flatcc_builder_append_vector@@Base+0xb8>
   13dd0:	ldr	r4, [r4, #16]
   13dd4:	adds	r4, r4, r7
   13dd8:	beq	13dec <flatcc_builder_append_vector@@Base+0x88>
   13ddc:	mov	r2, r6
   13de0:	mov	r1, r5
   13de4:	mov	r0, r4
   13de8:	bl	11fd0 <memcpy@plt>
   13dec:	mov	r0, r4
   13df0:	pop	{r4, r5, r6, r7, r8, pc}
   13df4:	ldr	r3, [pc, #64]	; 13e3c <flatcc_builder_append_vector@@Base+0xd8>
   13df8:	ldr	r2, [pc, #64]	; 13e40 <flatcc_builder_append_vector@@Base+0xdc>
   13dfc:	ldr	r1, [pc, #64]	; 13e44 <flatcc_builder_append_vector@@Base+0xe0>
   13e00:	ldr	r0, [pc, #64]	; 13e48 <flatcc_builder_append_vector@@Base+0xe4>
   13e04:	bl	12084 <__assert_fail@plt>
   13e08:	ldr	r3, [pc, #60]	; 13e4c <flatcc_builder_append_vector@@Base+0xe8>
   13e0c:	mov	r2, #892	; 0x37c
   13e10:	ldr	r1, [pc, #44]	; 13e44 <flatcc_builder_append_vector@@Base+0xe0>
   13e14:	ldr	r0, [pc, #52]	; 13e50 <flatcc_builder_append_vector@@Base+0xec>
   13e18:	bl	12084 <__assert_fail@plt>
   13e1c:	mvn	r2, #3
   13e20:	add	r1, r1, #1
   13e24:	mov	r0, r4
   13e28:	bl	128c8 <main@@Base+0x18>
   13e2c:	cmp	r0, #0
   13e30:	beq	13dd0 <flatcc_builder_append_vector@@Base+0x6c>
   13e34:	mov	r4, #0
   13e38:	b	13dec <flatcc_builder_append_vector@@Base+0x88>
   13e3c:	andeq	r7, r1, ip, lsl r6
   13e40:	muleq	r0, r3, r3
   13e44:	andeq	r7, r1, ip, lsl #20
   13e48:	andeq	r7, r1, r4, asr #22
   13e4c:	andeq	r7, r1, ip, ror #11
   13e50:	andeq	r7, r1, r8, lsr #22

00013e54 <flatcc_builder_extend_offset_vector@@Base>:
   13e54:	push	{r4, r5, r6, lr}
   13e58:	mov	r4, r0
   13e5c:	ldr	r2, [r0, #32]
   13e60:	ldr	r3, [r2, #20]
   13e64:	adds	r3, r1, r3
   13e68:	movcs	ip, #1
   13e6c:	movcc	ip, #0
   13e70:	cmn	r3, #-1073741823	; 0xc0000001
   13e74:	movls	r0, #0
   13e78:	movhi	r0, #1
   13e7c:	orrs	r0, ip, r0
   13e80:	bne	13eac <flatcc_builder_extend_offset_vector@@Base+0x58>
   13e84:	str	r3, [r2, #20]
   13e88:	ldr	r5, [r4, #20]
   13e8c:	add	r1, r5, r1, lsl #2
   13e90:	str	r1, [r4, #20]
   13e94:	ldr	r3, [r4, #24]
   13e98:	cmp	r1, r3
   13e9c:	bcs	13ec0 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   13ea0:	ldr	r0, [r4, #16]
   13ea4:	add	r0, r0, r5
   13ea8:	pop	{r4, r5, r6, pc}
   13eac:	ldr	r3, [pc, #44]	; 13ee0 <flatcc_builder_extend_offset_vector@@Base+0x8c>
   13eb0:	mov	r2, #892	; 0x37c
   13eb4:	ldr	r1, [pc, #40]	; 13ee4 <flatcc_builder_extend_offset_vector@@Base+0x90>
   13eb8:	ldr	r0, [pc, #40]	; 13ee8 <flatcc_builder_extend_offset_vector@@Base+0x94>
   13ebc:	bl	12084 <__assert_fail@plt>
   13ec0:	mvn	r2, #3
   13ec4:	add	r1, r1, #1
   13ec8:	mov	r0, r4
   13ecc:	bl	128c8 <main@@Base+0x18>
   13ed0:	cmp	r0, #0
   13ed4:	beq	13ea0 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   13ed8:	mov	r0, #0
   13edc:	pop	{r4, r5, r6, pc}
   13ee0:	andeq	r7, r1, ip, ror #11
   13ee4:	andeq	r7, r1, ip, lsl #20
   13ee8:	andeq	r7, r1, r8, lsr #22

00013eec <flatcc_builder_offset_vector_push@@Base>:
   13eec:	push	{r4, r5, r6, lr}
   13ef0:	ldr	r2, [r0, #32]
   13ef4:	ldrh	r3, [r2, #14]
   13ef8:	cmp	r3, #5
   13efc:	bne	13f44 <flatcc_builder_offset_vector_push@@Base+0x58>
   13f00:	mov	r4, r0
   13f04:	mov	r6, r1
   13f08:	ldr	r3, [r2, #20]
   13f0c:	cmn	r3, #-1073741823	; 0xc0000001
   13f10:	beq	13f74 <flatcc_builder_offset_vector_push@@Base+0x88>
   13f14:	add	r3, r3, #1
   13f18:	str	r3, [r2, #20]
   13f1c:	ldr	r5, [r0, #20]
   13f20:	add	r3, r5, #4
   13f24:	str	r3, [r0, #20]
   13f28:	ldr	r2, [r0, #24]
   13f2c:	cmp	r3, r2
   13f30:	bcs	13f58 <flatcc_builder_offset_vector_push@@Base+0x6c>
   13f34:	ldr	r3, [r4, #16]
   13f38:	adds	r0, r3, r5
   13f3c:	strne	r6, [r3, r5]
   13f40:	pop	{r4, r5, r6, pc}
   13f44:	ldr	r3, [pc, #48]	; 13f7c <flatcc_builder_offset_vector_push@@Base+0x90>
   13f48:	ldr	r2, [pc, #48]	; 13f80 <flatcc_builder_offset_vector_push@@Base+0x94>
   13f4c:	ldr	r1, [pc, #48]	; 13f84 <flatcc_builder_offset_vector_push@@Base+0x98>
   13f50:	ldr	r0, [pc, #48]	; 13f88 <flatcc_builder_offset_vector_push@@Base+0x9c>
   13f54:	bl	12084 <__assert_fail@plt>
   13f58:	mvn	r2, #3
   13f5c:	add	r1, r5, #5
   13f60:	bl	128c8 <main@@Base+0x18>
   13f64:	cmp	r0, #0
   13f68:	beq	13f34 <flatcc_builder_offset_vector_push@@Base+0x48>
   13f6c:	mov	r0, #0
   13f70:	pop	{r4, r5, r6, pc}
   13f74:	mov	r0, #0
   13f78:	pop	{r4, r5, r6, pc}
   13f7c:	andeq	r7, r1, ip, lsr r6
   13f80:	andeq	r0, r0, r6, lsr #7
   13f84:	andeq	r7, r1, ip, lsl #20
   13f88:			; <UNDEFINED> instruction: 0x00017bb0

00013f8c <flatcc_builder_append_offset_vector@@Base>:
   13f8c:	push	{r4, r5, r6, r7, r8, lr}
   13f90:	mov	r6, r1
   13f94:	ldr	r1, [r0, #32]
   13f98:	ldrh	r3, [r1, #14]
   13f9c:	cmp	r3, #5
   13fa0:	bne	14010 <flatcc_builder_append_offset_vector@@Base+0x84>
   13fa4:	mov	r5, r0
   13fa8:	ldr	r3, [r1, #20]
   13fac:	adds	r3, r2, r3
   13fb0:	movcs	ip, #1
   13fb4:	movcc	ip, #0
   13fb8:	cmn	r3, #-1073741823	; 0xc0000001
   13fbc:	movls	r0, #0
   13fc0:	movhi	r0, #1
   13fc4:	orrs	r0, ip, r0
   13fc8:	bne	14024 <flatcc_builder_append_offset_vector@@Base+0x98>
   13fcc:	str	r3, [r1, #20]
   13fd0:	lsl	r4, r2, #2
   13fd4:	ldr	r7, [r5, #20]
   13fd8:	add	r1, r4, r7
   13fdc:	str	r1, [r5, #20]
   13fe0:	ldr	r3, [r5, #24]
   13fe4:	cmp	r1, r3
   13fe8:	bcs	14038 <flatcc_builder_append_offset_vector@@Base+0xac>
   13fec:	ldr	r5, [r5, #16]
   13ff0:	adds	r5, r5, r7
   13ff4:	beq	14008 <flatcc_builder_append_offset_vector@@Base+0x7c>
   13ff8:	mov	r2, r4
   13ffc:	mov	r1, r6
   14000:	mov	r0, r5
   14004:	bl	11fd0 <memcpy@plt>
   14008:	mov	r0, r5
   1400c:	pop	{r4, r5, r6, r7, r8, pc}
   14010:	ldr	r3, [pc, #64]	; 14058 <flatcc_builder_append_offset_vector@@Base+0xcc>
   14014:	mov	r2, #948	; 0x3b4
   14018:	ldr	r1, [pc, #60]	; 1405c <flatcc_builder_append_offset_vector@@Base+0xd0>
   1401c:	ldr	r0, [pc, #60]	; 14060 <flatcc_builder_append_offset_vector@@Base+0xd4>
   14020:	bl	12084 <__assert_fail@plt>
   14024:	ldr	r3, [pc, #56]	; 14064 <flatcc_builder_append_offset_vector@@Base+0xd8>
   14028:	mov	r2, #892	; 0x37c
   1402c:	ldr	r1, [pc, #40]	; 1405c <flatcc_builder_append_offset_vector@@Base+0xd0>
   14030:	ldr	r0, [pc, #48]	; 14068 <flatcc_builder_append_offset_vector@@Base+0xdc>
   14034:	bl	12084 <__assert_fail@plt>
   14038:	mvn	r2, #3
   1403c:	add	r1, r1, #1
   14040:	mov	r0, r5
   14044:	bl	128c8 <main@@Base+0x18>
   14048:	cmp	r0, #0
   1404c:	beq	13fec <flatcc_builder_append_offset_vector@@Base+0x60>
   14050:	mov	r5, #0
   14054:	b	14008 <flatcc_builder_append_offset_vector@@Base+0x7c>
   14058:	andeq	r7, r1, r0, ror #12
   1405c:	andeq	r7, r1, ip, lsl #20
   14060:			; <UNDEFINED> instruction: 0x00017bb0
   14064:	andeq	r7, r1, ip, ror #11
   14068:	andeq	r7, r1, r8, lsr #22

0001406c <flatcc_builder_extend_string@@Base>:
   1406c:	push	{r4, r5, r6, lr}
   14070:	ldr	r2, [r0, #32]
   14074:	ldrh	r3, [r2, #14]
   14078:	cmp	r3, #6
   1407c:	bne	140b8 <flatcc_builder_extend_string@@Base+0x4c>
   14080:	mov	r4, r0
   14084:	ldr	r3, [r2, #20]
   14088:	adds	r3, r1, r3
   1408c:	bcs	140cc <flatcc_builder_extend_string@@Base+0x60>
   14090:	str	r3, [r2, #20]
   14094:	ldr	r5, [r0, #20]
   14098:	add	r1, r1, r5
   1409c:	str	r1, [r0, #20]
   140a0:	ldr	r3, [r0, #24]
   140a4:	cmp	r1, r3
   140a8:	bcs	140e0 <flatcc_builder_extend_string@@Base+0x74>
   140ac:	ldr	r0, [r4, #16]
   140b0:	add	r0, r0, r5
   140b4:	pop	{r4, r5, r6, pc}
   140b8:	ldr	r3, [pc, #60]	; 140fc <flatcc_builder_extend_string@@Base+0x90>
   140bc:	ldr	r2, [pc, #60]	; 14100 <flatcc_builder_extend_string@@Base+0x94>
   140c0:	ldr	r1, [pc, #60]	; 14104 <flatcc_builder_extend_string@@Base+0x98>
   140c4:	ldr	r0, [pc, #60]	; 14108 <flatcc_builder_extend_string@@Base+0x9c>
   140c8:	bl	12084 <__assert_fail@plt>
   140cc:	ldr	r3, [pc, #56]	; 1410c <flatcc_builder_extend_string@@Base+0xa0>
   140d0:	mov	r2, #892	; 0x37c
   140d4:	ldr	r1, [pc, #40]	; 14104 <flatcc_builder_extend_string@@Base+0x98>
   140d8:	ldr	r0, [pc, #48]	; 14110 <flatcc_builder_extend_string@@Base+0xa4>
   140dc:	bl	12084 <__assert_fail@plt>
   140e0:	mvn	r2, #3
   140e4:	add	r1, r1, #1
   140e8:	bl	128c8 <main@@Base+0x18>
   140ec:	cmp	r0, #0
   140f0:	beq	140ac <flatcc_builder_extend_string@@Base+0x40>
   140f4:	mov	r0, #0
   140f8:	pop	{r4, r5, r6, pc}
   140fc:	andeq	r7, r1, r4, lsl #13
   14100:			; <UNDEFINED> instruction: 0x000003bd
   14104:	andeq	r7, r1, ip, lsl #20
   14108:	andeq	r7, r1, r4, ror #23
   1410c:	andeq	r7, r1, ip, ror #11
   14110:	andeq	r7, r1, r8, lsr #22

00014114 <flatcc_builder_append_string@@Base>:
   14114:	push	{r4, r5, r6, r7, r8, lr}
   14118:	mov	r5, r2
   1411c:	ldr	r2, [r0, #32]
   14120:	ldrh	r3, [r2, #14]
   14124:	cmp	r3, #6
   14128:	bne	14180 <flatcc_builder_append_string@@Base+0x6c>
   1412c:	mov	r4, r0
   14130:	mov	r6, r1
   14134:	ldr	r3, [r2, #20]
   14138:	adds	r3, r5, r3
   1413c:	bcs	14194 <flatcc_builder_append_string@@Base+0x80>
   14140:	str	r3, [r2, #20]
   14144:	ldr	r7, [r0, #20]
   14148:	add	r1, r5, r7
   1414c:	str	r1, [r0, #20]
   14150:	ldr	r3, [r0, #24]
   14154:	cmp	r1, r3
   14158:	bcs	141a8 <flatcc_builder_append_string@@Base+0x94>
   1415c:	ldr	r4, [r4, #16]
   14160:	adds	r4, r4, r7
   14164:	beq	14178 <flatcc_builder_append_string@@Base+0x64>
   14168:	mov	r2, r5
   1416c:	mov	r1, r6
   14170:	mov	r0, r4
   14174:	bl	11fd0 <memcpy@plt>
   14178:	mov	r0, r4
   1417c:	pop	{r4, r5, r6, r7, r8, pc}
   14180:	ldr	r3, [pc, #60]	; 141c4 <flatcc_builder_append_string@@Base+0xb0>
   14184:	ldr	r2, [pc, #60]	; 141c8 <flatcc_builder_append_string@@Base+0xb4>
   14188:	ldr	r1, [pc, #60]	; 141cc <flatcc_builder_append_string@@Base+0xb8>
   1418c:	ldr	r0, [pc, #60]	; 141d0 <flatcc_builder_append_string@@Base+0xbc>
   14190:	bl	12084 <__assert_fail@plt>
   14194:	ldr	r3, [pc, #56]	; 141d4 <flatcc_builder_append_string@@Base+0xc0>
   14198:	mov	r2, #892	; 0x37c
   1419c:	ldr	r1, [pc, #40]	; 141cc <flatcc_builder_append_string@@Base+0xb8>
   141a0:	ldr	r0, [pc, #48]	; 141d8 <flatcc_builder_append_string@@Base+0xc4>
   141a4:	bl	12084 <__assert_fail@plt>
   141a8:	mvn	r2, #3
   141ac:	add	r1, r1, #1
   141b0:	bl	128c8 <main@@Base+0x18>
   141b4:	cmp	r0, #0
   141b8:	beq	1415c <flatcc_builder_append_string@@Base+0x48>
   141bc:	mov	r4, #0
   141c0:	b	14178 <flatcc_builder_append_string@@Base+0x64>
   141c4:	andeq	r7, r1, r4, lsr #13
   141c8:	andeq	r0, r0, r6, asr #7
   141cc:	andeq	r7, r1, ip, lsl #20
   141d0:	andeq	r7, r1, r4, ror #23
   141d4:	andeq	r7, r1, ip, ror #11
   141d8:	andeq	r7, r1, r8, lsr #22

000141dc <flatcc_builder_append_string_str@@Base>:
   141dc:	push	{r4, r5, r6, lr}
   141e0:	mov	r5, r0
   141e4:	mov	r4, r1
   141e8:	mov	r0, r1
   141ec:	bl	12030 <strlen@plt>
   141f0:	mov	r2, r0
   141f4:	mov	r1, r4
   141f8:	mov	r0, r5
   141fc:	bl	14114 <flatcc_builder_append_string@@Base>
   14200:	pop	{r4, r5, r6, pc}

00014204 <flatcc_builder_append_string_strn@@Base>:
   14204:	push	{r4, r5, r6, lr}
   14208:	mov	r6, r0
   1420c:	mov	r4, r1
   14210:	mov	r5, r2
   14214:	mov	r1, #0
   14218:	mov	r0, r4
   1421c:	bl	12060 <memchr@plt>
   14220:	cmp	r0, #0
   14224:	subne	r5, r0, r4
   14228:	mov	r2, r5
   1422c:	mov	r1, r4
   14230:	mov	r0, r6
   14234:	bl	14114 <flatcc_builder_append_string@@Base>
   14238:	pop	{r4, r5, r6, pc}

0001423c <flatcc_builder_truncate_vector@@Base>:
   1423c:	push	{r4, lr}
   14240:	ldr	ip, [r0, #32]
   14244:	ldrh	r3, [ip, #14]
   14248:	cmp	r3, #4
   1424c:	bne	14294 <flatcc_builder_truncate_vector@@Base+0x58>
   14250:	ldr	r3, [ip, #20]
   14254:	cmp	r3, r1
   14258:	bcc	142a8 <flatcc_builder_truncate_vector@@Base+0x6c>
   1425c:	sub	r3, r3, r1
   14260:	str	r3, [ip, #20]
   14264:	ldr	r3, [r0, #32]
   14268:	ldr	r2, [r3, #16]
   1426c:	mul	r2, r2, r1
   14270:	ldr	r3, [r0, #20]
   14274:	sub	r3, r3, r2
   14278:	str	r3, [r0, #20]
   1427c:	ldr	r0, [r0, #16]
   14280:	mov	r1, #0
   14284:	add	r0, r0, r3
   14288:	bl	12054 <memset@plt>
   1428c:	mov	r0, #0
   14290:	pop	{r4, pc}
   14294:	ldr	r3, [pc, #32]	; 142bc <flatcc_builder_truncate_vector@@Base+0x80>
   14298:	ldr	r2, [pc, #32]	; 142c0 <flatcc_builder_truncate_vector@@Base+0x84>
   1429c:	ldr	r1, [pc, #32]	; 142c4 <flatcc_builder_truncate_vector@@Base+0x88>
   142a0:	ldr	r0, [pc, #32]	; 142c8 <flatcc_builder_truncate_vector@@Base+0x8c>
   142a4:	bl	12084 <__assert_fail@plt>
   142a8:	ldr	r3, [pc, #12]	; 142bc <flatcc_builder_truncate_vector@@Base+0x80>
   142ac:	ldr	r2, [pc, #24]	; 142cc <flatcc_builder_truncate_vector@@Base+0x90>
   142b0:	ldr	r1, [pc, #12]	; 142c4 <flatcc_builder_truncate_vector@@Base+0x88>
   142b4:	ldr	r0, [pc, #20]	; 142d0 <flatcc_builder_truncate_vector@@Base+0x94>
   142b8:	bl	12084 <__assert_fail@plt>
   142bc:	andeq	r7, r1, r4, asr #13
   142c0:	ldrdeq	r0, [r0], -r9
   142c4:	andeq	r7, r1, ip, lsl #20
   142c8:	andeq	r7, r1, r4, asr #22
   142cc:	ldrdeq	r0, [r0], -sl
   142d0:	andeq	r7, r1, r0, lsl ip

000142d4 <flatcc_builder_truncate_offset_vector@@Base>:
   142d4:	push	{r4, lr}
   142d8:	ldr	ip, [r0, #32]
   142dc:	ldrh	r3, [ip, #14]
   142e0:	cmp	r3, #5
   142e4:	bne	1432c <flatcc_builder_truncate_offset_vector@@Base+0x58>
   142e8:	ldr	r3, [ip, #20]
   142ec:	cmp	r3, r1
   142f0:	bcc	14340 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   142f4:	sub	r3, r3, r1
   142f8:	str	r3, [ip, #20]
   142fc:	ldr	r3, [r0, #32]
   14300:	ldr	r2, [r3, #16]
   14304:	mul	r2, r2, r1
   14308:	ldr	r3, [r0, #20]
   1430c:	sub	r3, r3, r2
   14310:	str	r3, [r0, #20]
   14314:	ldr	r0, [r0, #16]
   14318:	mov	r1, #0
   1431c:	add	r0, r0, r3
   14320:	bl	12054 <memset@plt>
   14324:	mov	r0, #0
   14328:	pop	{r4, pc}
   1432c:	ldr	r3, [pc, #32]	; 14354 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14330:	ldr	r2, [pc, #32]	; 14358 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   14334:	ldr	r1, [pc, #32]	; 1435c <flatcc_builder_truncate_offset_vector@@Base+0x88>
   14338:	ldr	r0, [pc, #32]	; 14360 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   1433c:	bl	12084 <__assert_fail@plt>
   14340:	ldr	r3, [pc, #12]	; 14354 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14344:	ldr	r2, [pc, #24]	; 14364 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   14348:	ldr	r1, [pc, #12]	; 1435c <flatcc_builder_truncate_offset_vector@@Base+0x88>
   1434c:	ldr	r0, [pc, #20]	; 14368 <flatcc_builder_truncate_offset_vector@@Base+0x94>
   14350:	bl	12084 <__assert_fail@plt>
   14354:	andeq	r7, r1, r4, ror #13
   14358:	andeq	r0, r0, r2, ror #7
   1435c:	andeq	r7, r1, ip, lsl #20
   14360:			; <UNDEFINED> instruction: 0x00017bb0
   14364:	andeq	r0, r0, r3, ror #7
   14368:	andeq	r7, r1, r4, lsr ip

0001436c <flatcc_builder_truncate_string@@Base>:
   1436c:	push	{r4, lr}
   14370:	ldr	r2, [r0, #32]
   14374:	ldrh	r3, [r2, #14]
   14378:	cmp	r3, #6
   1437c:	bne	143bc <flatcc_builder_truncate_string@@Base+0x50>
   14380:	ldr	r3, [r2, #20]
   14384:	cmp	r3, r1
   14388:	bcc	143d0 <flatcc_builder_truncate_string@@Base+0x64>
   1438c:	sub	r3, r3, r1
   14390:	str	r3, [r2, #20]
   14394:	ldr	r3, [r0, #20]
   14398:	sub	r3, r3, r1
   1439c:	str	r3, [r0, #20]
   143a0:	ldr	r0, [r0, #16]
   143a4:	mov	r2, r1
   143a8:	mov	r1, #0
   143ac:	add	r0, r0, r3
   143b0:	bl	12054 <memset@plt>
   143b4:	mov	r0, #0
   143b8:	pop	{r4, pc}
   143bc:	ldr	r3, [pc, #32]	; 143e4 <flatcc_builder_truncate_string@@Base+0x78>
   143c0:	ldr	r2, [pc, #32]	; 143e8 <flatcc_builder_truncate_string@@Base+0x7c>
   143c4:	ldr	r1, [pc, #32]	; 143ec <flatcc_builder_truncate_string@@Base+0x80>
   143c8:	ldr	r0, [pc, #32]	; 143f0 <flatcc_builder_truncate_string@@Base+0x84>
   143cc:	bl	12084 <__assert_fail@plt>
   143d0:	ldr	r3, [pc, #12]	; 143e4 <flatcc_builder_truncate_string@@Base+0x78>
   143d4:	mov	r2, #1004	; 0x3ec
   143d8:	ldr	r1, [pc, #12]	; 143ec <flatcc_builder_truncate_string@@Base+0x80>
   143dc:	ldr	r0, [pc, #16]	; 143f4 <flatcc_builder_truncate_string@@Base+0x88>
   143e0:	bl	12084 <__assert_fail@plt>
   143e4:	andeq	r7, r1, ip, lsl #14
   143e8:	andeq	r0, r0, fp, ror #7
   143ec:	andeq	r7, r1, ip, lsl #20
   143f0:	andeq	r7, r1, r4, ror #23
   143f4:	andeq	r7, r1, r0, ror ip

000143f8 <flatcc_builder_start_vector@@Base>:
   143f8:	push	{r4, r5, r6, lr}
   143fc:	mov	r4, r0
   14400:	mov	r6, r1
   14404:	mov	r5, r3
   14408:	cmp	r2, #4
   1440c:	movcs	r1, r2
   14410:	movcc	r1, #4
   14414:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x22c>
   14418:	cmp	r0, #0
   1441c:	bne	1447c <flatcc_builder_start_vector@@Base+0x84>
   14420:	ldr	r3, [r4, #32]
   14424:	str	r6, [r3, #16]
   14428:	ldr	r3, [r4, #32]
   1442c:	mov	r2, #0
   14430:	str	r2, [r3, #20]
   14434:	ldr	r3, [r4, #32]
   14438:	str	r5, [r3, #24]
   1443c:	ldr	r3, [r4, #32]
   14440:	mov	r2, #4
   14444:	strh	r2, [r3, #14]
   14448:	ldr	r1, [r4, #28]
   1444c:	ldr	r2, [r4, #60]	; 0x3c
   14450:	add	r2, r2, r1
   14454:	str	r2, [r4, #16]
   14458:	ldr	r3, [r4, #64]	; 0x40
   1445c:	sub	r3, r3, r1
   14460:	cmn	r3, #4
   14464:	mvnhi	r3, #3
   14468:	str	r3, [r4, #24]
   1446c:	ldr	r3, [r4, #32]
   14470:	mvn	r2, #3
   14474:	str	r2, [r3, #4]
   14478:	pop	{r4, r5, r6, pc}
   1447c:	mvn	r0, #0
   14480:	pop	{r4, r5, r6, pc}

00014484 <flatcc_builder_start_offset_vector@@Base>:
   14484:	push	{r4, lr}
   14488:	mov	r4, r0
   1448c:	mov	r1, #4
   14490:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x22c>
   14494:	cmp	r0, #0
   14498:	bne	144f4 <flatcc_builder_start_offset_vector@@Base+0x70>
   1449c:	ldr	r3, [r4, #32]
   144a0:	mov	r2, #4
   144a4:	str	r2, [r3, #16]
   144a8:	ldr	r3, [r4, #32]
   144ac:	mov	r2, #0
   144b0:	str	r2, [r3, #20]
   144b4:	ldr	r3, [r4, #32]
   144b8:	mov	r2, #5
   144bc:	strh	r2, [r3, #14]
   144c0:	ldr	r1, [r4, #28]
   144c4:	ldr	r2, [r4, #60]	; 0x3c
   144c8:	add	r2, r2, r1
   144cc:	str	r2, [r4, #16]
   144d0:	ldr	r3, [r4, #64]	; 0x40
   144d4:	sub	r3, r3, r1
   144d8:	cmn	r3, #4
   144dc:	mvnhi	r3, #3
   144e0:	str	r3, [r4, #24]
   144e4:	ldr	r3, [r4, #32]
   144e8:	mvn	r2, #3
   144ec:	str	r2, [r3, #4]
   144f0:	pop	{r4, pc}
   144f4:	mvn	r0, #0
   144f8:	pop	{r4, pc}

000144fc <flatcc_builder_start_string@@Base>:
   144fc:	push	{r4, lr}
   14500:	mov	r4, r0
   14504:	mov	r1, #1
   14508:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x22c>
   1450c:	cmp	r0, #0
   14510:	bne	1456c <flatcc_builder_start_string@@Base+0x70>
   14514:	ldr	r3, [r4, #32]
   14518:	mov	r2, #1
   1451c:	str	r2, [r3, #16]
   14520:	ldr	r3, [r4, #32]
   14524:	mov	r2, #0
   14528:	str	r2, [r3, #20]
   1452c:	ldr	r3, [r4, #32]
   14530:	mov	r2, #6
   14534:	strh	r2, [r3, #14]
   14538:	ldr	r1, [r4, #28]
   1453c:	ldr	r2, [r4, #60]	; 0x3c
   14540:	add	r2, r2, r1
   14544:	str	r2, [r4, #16]
   14548:	ldr	r3, [r4, #64]	; 0x40
   1454c:	sub	r3, r3, r1
   14550:	cmn	r3, #4
   14554:	mvnhi	r3, #3
   14558:	str	r3, [r4, #24]
   1455c:	ldr	r3, [r4, #32]
   14560:	mvn	r2, #3
   14564:	str	r2, [r3, #4]
   14568:	pop	{r4, pc}
   1456c:	mvn	r0, #0
   14570:	pop	{r4, pc}

00014574 <flatcc_builder_reserve_table@@Base>:
   14574:	push	{r4, r5, r6, r7, lr}
   14578:	sub	sp, sp, #12
   1457c:	cmp	r1, #0
   14580:	blt	1460c <flatcc_builder_reserve_table@@Base+0x98>
   14584:	mov	r5, r0
   14588:	ldr	r2, [r0, #32]
   1458c:	ldrh	r6, [r2, #28]
   14590:	ldr	r3, [r2, #16]
   14594:	add	r6, r3, r6, lsl #1
   14598:	add	r1, r1, #2
   1459c:	lsl	r4, r1, #1
   145a0:	add	r2, r6, r4
   145a4:	ldr	r3, [r0, #56]	; 0x38
   145a8:	cmp	r2, r3
   145ac:	bhi	14620 <flatcc_builder_reserve_table@@Base+0xac>
   145b0:	ldr	r3, [r5, #52]	; 0x34
   145b4:	adds	r3, r3, r6
   145b8:	moveq	r3, #0
   145bc:	streq	r3, [r5, #4]
   145c0:	mvneq	r0, #0
   145c4:	beq	14604 <flatcc_builder_reserve_table@@Base+0x90>
   145c8:	add	r3, r3, #4
   145cc:	str	r3, [r5, #4]
   145d0:	ldr	r3, [r5, #32]
   145d4:	ldr	r6, [r3, #20]
   145d8:	add	r2, r4, r6
   145dc:	sub	r2, r2, #3
   145e0:	ldr	r3, [r5, #80]	; 0x50
   145e4:	cmp	r2, r3
   145e8:	bhi	14658 <flatcc_builder_reserve_table@@Base+0xe4>
   145ec:	ldr	r0, [r5, #76]	; 0x4c
   145f0:	add	r0, r0, r6
   145f4:	str	r0, [r5]
   145f8:	cmp	r0, #0
   145fc:	movne	r0, #0
   14600:	mvneq	r0, #0
   14604:	add	sp, sp, #12
   14608:	pop	{r4, r5, r6, r7, pc}
   1460c:	ldr	r3, [pc, #124]	; 14690 <flatcc_builder_reserve_table@@Base+0x11c>
   14610:	ldr	r2, [pc, #124]	; 14694 <flatcc_builder_reserve_table@@Base+0x120>
   14614:	ldr	r1, [pc, #124]	; 14698 <flatcc_builder_reserve_table@@Base+0x124>
   14618:	ldr	r0, [pc, #124]	; 1469c <flatcc_builder_reserve_table@@Base+0x128>
   1461c:	bl	12084 <__assert_fail@plt>
   14620:	mov	r3, #0
   14624:	str	r3, [sp]
   14628:	ldr	r7, [r0, #48]	; 0x30
   1462c:	mov	r3, #1
   14630:	add	r1, r0, #52	; 0x34
   14634:	ldr	r0, [r0, #40]	; 0x28
   14638:	blx	r7
   1463c:	cmp	r0, #0
   14640:	beq	145b0 <flatcc_builder_reserve_table@@Base+0x3c>
   14644:	ldr	r3, [pc, #84]	; 146a0 <flatcc_builder_reserve_table@@Base+0x12c>
   14648:	mov	r2, #308	; 0x134
   1464c:	ldr	r1, [pc, #68]	; 14698 <flatcc_builder_reserve_table@@Base+0x124>
   14650:	ldr	r0, [pc, #76]	; 146a4 <flatcc_builder_reserve_table@@Base+0x130>
   14654:	bl	12084 <__assert_fail@plt>
   14658:	mov	r3, #3
   1465c:	str	r3, [sp]
   14660:	ldr	r4, [r5, #48]	; 0x30
   14664:	mov	r3, #0
   14668:	add	r1, r5, #76	; 0x4c
   1466c:	ldr	r0, [r5, #40]	; 0x28
   14670:	blx	r4
   14674:	cmp	r0, #0
   14678:	beq	145ec <flatcc_builder_reserve_table@@Base+0x78>
   1467c:	ldr	r3, [pc, #28]	; 146a0 <flatcc_builder_reserve_table@@Base+0x12c>
   14680:	mov	r2, #308	; 0x134
   14684:	ldr	r1, [pc, #12]	; 14698 <flatcc_builder_reserve_table@@Base+0x124>
   14688:	ldr	r0, [pc, #20]	; 146a4 <flatcc_builder_reserve_table@@Base+0x130>
   1468c:	bl	12084 <__assert_fail@plt>
   14690:	andeq	r7, r1, ip, lsr #14
   14694:	andeq	r0, r0, r9, lsr #8
   14698:	andeq	r7, r1, ip, lsl #20
   1469c:	muleq	r1, r4, ip
   146a0:	ldrdeq	r7, [r1], -r8
   146a4:	andeq	r7, r1, r0, ror #20

000146a8 <flatcc_builder_start_table@@Base>:
   146a8:	push	{r4, r5, r6, r7, lr}
   146ac:	sub	sp, sp, #12
   146b0:	mov	r4, r0
   146b4:	mov	r5, r1
   146b8:	mov	r1, #4
   146bc:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x22c>
   146c0:	cmp	r0, #0
   146c4:	bne	14854 <flatcc_builder_start_table@@Base+0x1ac>
   146c8:	ldr	r2, [r4, #32]
   146cc:	ldr	r3, [r4, #4]
   146d0:	ldr	r1, [r4, #52]	; 0x34
   146d4:	sub	r3, r3, r1
   146d8:	str	r3, [r2, #16]
   146dc:	ldr	r2, [r4, #32]
   146e0:	ldr	r3, [r4]
   146e4:	ldr	r1, [r4, #76]	; 0x4c
   146e8:	sub	r3, r3, r1
   146ec:	str	r3, [r2, #20]
   146f0:	ldr	r3, [r4, #32]
   146f4:	ldr	r2, [r4, #12]
   146f8:	str	r2, [r3, #24]
   146fc:	ldr	r3, [r4, #32]
   14700:	ldrh	r2, [r4, #8]
   14704:	strh	r2, [r3, #28]
   14708:	ldr	r3, [pc, #340]	; 14864 <flatcc_builder_start_table@@Base+0x1bc>
   1470c:	str	r3, [r4, #12]
   14710:	mov	r3, #0
   14714:	strh	r3, [r4, #8]
   14718:	ldr	r3, [r4, #32]
   1471c:	mov	r2, #3
   14720:	strh	r2, [r3, #14]
   14724:	ldr	r2, [r4, #32]
   14728:	ldrh	r6, [r2, #28]
   1472c:	ldr	r3, [r2, #16]
   14730:	add	r6, r3, r6, lsl #1
   14734:	add	r5, r5, #2
   14738:	lsl	r5, r5, #1
   1473c:	add	r2, r6, r5
   14740:	ldr	r3, [r4, #56]	; 0x38
   14744:	cmp	r2, r3
   14748:	bhi	147e4 <flatcc_builder_start_table@@Base+0x13c>
   1474c:	ldr	r3, [r4, #52]	; 0x34
   14750:	adds	r3, r3, r6
   14754:	moveq	r3, #0
   14758:	streq	r3, [r4, #4]
   1475c:	mvneq	r0, #0
   14760:	beq	147dc <flatcc_builder_start_table@@Base+0x134>
   14764:	add	r3, r3, #4
   14768:	str	r3, [r4, #4]
   1476c:	ldr	r3, [r4, #32]
   14770:	ldr	r6, [r3, #20]
   14774:	sub	r2, r5, #3
   14778:	add	r2, r2, r6
   1477c:	ldr	r3, [r4, #80]	; 0x50
   14780:	cmp	r2, r3
   14784:	bhi	1481c <flatcc_builder_start_table@@Base+0x174>
   14788:	ldr	r0, [r4, #76]	; 0x4c
   1478c:	add	r0, r0, r6
   14790:	str	r0, [r4]
   14794:	cmp	r0, #0
   14798:	movne	r0, #0
   1479c:	mvneq	r0, #0
   147a0:	cmp	r0, #0
   147a4:	bne	1485c <flatcc_builder_start_table@@Base+0x1b4>
   147a8:	ldr	r1, [r4, #28]
   147ac:	ldr	r2, [r4, #60]	; 0x3c
   147b0:	add	r2, r2, r1
   147b4:	str	r2, [r4, #16]
   147b8:	ldr	r3, [r4, #64]	; 0x40
   147bc:	sub	r3, r3, r1
   147c0:	ldr	r2, [pc, #160]	; 14868 <flatcc_builder_start_table@@Base+0x1c0>
   147c4:	cmp	r3, r2
   147c8:	ldrhi	r3, [pc, #152]	; 14868 <flatcc_builder_start_table@@Base+0x1c0>
   147cc:	str	r3, [r4, #24]
   147d0:	ldr	r3, [r4, #32]
   147d4:	ldr	r2, [pc, #140]	; 14868 <flatcc_builder_start_table@@Base+0x1c0>
   147d8:	str	r2, [r3, #4]
   147dc:	add	sp, sp, #12
   147e0:	pop	{r4, r5, r6, r7, pc}
   147e4:	mov	r3, #0
   147e8:	str	r3, [sp]
   147ec:	ldr	r7, [r4, #48]	; 0x30
   147f0:	mov	r3, #1
   147f4:	add	r1, r4, #52	; 0x34
   147f8:	ldr	r0, [r4, #40]	; 0x28
   147fc:	blx	r7
   14800:	cmp	r0, #0
   14804:	beq	1474c <flatcc_builder_start_table@@Base+0xa4>
   14808:	ldr	r3, [pc, #92]	; 1486c <flatcc_builder_start_table@@Base+0x1c4>
   1480c:	mov	r2, #308	; 0x134
   14810:	ldr	r1, [pc, #88]	; 14870 <flatcc_builder_start_table@@Base+0x1c8>
   14814:	ldr	r0, [pc, #88]	; 14874 <flatcc_builder_start_table@@Base+0x1cc>
   14818:	bl	12084 <__assert_fail@plt>
   1481c:	mov	r3, #3
   14820:	str	r3, [sp]
   14824:	ldr	r5, [r4, #48]	; 0x30
   14828:	mov	r3, #0
   1482c:	add	r1, r4, #76	; 0x4c
   14830:	ldr	r0, [r4, #40]	; 0x28
   14834:	blx	r5
   14838:	cmp	r0, #0
   1483c:	beq	14788 <flatcc_builder_start_table@@Base+0xe0>
   14840:	ldr	r3, [pc, #36]	; 1486c <flatcc_builder_start_table@@Base+0x1c4>
   14844:	mov	r2, #308	; 0x134
   14848:	ldr	r1, [pc, #32]	; 14870 <flatcc_builder_start_table@@Base+0x1c8>
   1484c:	ldr	r0, [pc, #32]	; 14874 <flatcc_builder_start_table@@Base+0x1cc>
   14850:	bl	12084 <__assert_fail@plt>
   14854:	mvn	r0, #0
   14858:	b	147dc <flatcc_builder_start_table@@Base+0x134>
   1485c:	mvn	r0, #0
   14860:	b	147dc <flatcc_builder_start_table@@Base+0x134>
   14864:	svccs	0x00693b52
   14868:	strdeq	pc, [r0], -ip
   1486c:	ldrdeq	r7, [r1], -r8
   14870:	andeq	r7, r1, ip, lsl #20
   14874:	andeq	r7, r1, r0, ror #20

00014878 <flatcc_builder_create_vtable@@Base>:
   14878:	push	{r4, r5, r6, lr}
   1487c:	sub	sp, sp, #80	; 0x50
   14880:	mov	r5, r0
   14884:	mov	r3, #0
   14888:	str	r3, [sp, #8]
   1488c:	str	r3, [sp, #12]
   14890:	cmp	r2, #0
   14894:	beq	14918 <flatcc_builder_create_vtable@@Base+0xa0>
   14898:	str	r2, [sp, #8]
   1489c:	str	r1, [sp, #16]
   148a0:	str	r2, [sp, #20]
   148a4:	mov	r3, #1
   148a8:	str	r3, [sp, #12]
   148ac:	ldr	r3, [r0, #152]	; 0x98
   148b0:	cmp	r3, #0
   148b4:	bne	14930 <flatcc_builder_create_vtable@@Base+0xb8>
   148b8:	ldr	r3, [r0, #180]	; 0xb4
   148bc:	cmp	r3, #0
   148c0:	bne	14930 <flatcc_builder_create_vtable@@Base+0xb8>
   148c4:	ldr	r4, [r0, #140]	; 0x8c
   148c8:	mov	r3, r2
   148cc:	add	r2, r2, r4
   148d0:	str	r2, [r0, #140]	; 0x8c
   148d4:	cmp	r4, r2
   148d8:	ble	14990 <flatcc_builder_create_vtable@@Base+0x118>
   148dc:	ldr	r3, [pc, #232]	; 149cc <flatcc_builder_create_vtable@@Base+0x154>
   148e0:	ldr	r2, [pc, #232]	; 149d0 <flatcc_builder_create_vtable@@Base+0x158>
   148e4:	ldr	r1, [pc, #232]	; 149d4 <flatcc_builder_create_vtable@@Base+0x15c>
   148e8:	ldr	r0, [pc, #232]	; 149d8 <flatcc_builder_create_vtable@@Base+0x160>
   148ec:	bl	12084 <__assert_fail@plt>
   148f0:	ldr	r3, [pc, #228]	; 149dc <flatcc_builder_create_vtable@@Base+0x164>
   148f4:	ldr	r2, [pc, #228]	; 149e0 <flatcc_builder_create_vtable@@Base+0x168>
   148f8:	ldr	r1, [pc, #212]	; 149d4 <flatcc_builder_create_vtable@@Base+0x15c>
   148fc:	ldr	r0, [pc, #212]	; 149d8 <flatcc_builder_create_vtable@@Base+0x160>
   14900:	bl	12084 <__assert_fail@plt>
   14904:	ldr	r3, [pc, #208]	; 149dc <flatcc_builder_create_vtable@@Base+0x164>
   14908:	ldr	r2, [pc, #212]	; 149e4 <flatcc_builder_create_vtable@@Base+0x16c>
   1490c:	ldr	r1, [pc, #192]	; 149d4 <flatcc_builder_create_vtable@@Base+0x15c>
   14910:	ldr	r0, [pc, #192]	; 149d8 <flatcc_builder_create_vtable@@Base+0x160>
   14914:	bl	12084 <__assert_fail@plt>
   14918:	ldr	r3, [r0, #152]	; 0x98
   1491c:	cmp	r3, #0
   14920:	bne	148f0 <flatcc_builder_create_vtable@@Base+0x78>
   14924:	ldr	r3, [r0, #180]	; 0xb4
   14928:	cmp	r3, #0
   1492c:	beq	14980 <flatcc_builder_create_vtable@@Base+0x108>
   14930:	ldr	r2, [r5, #136]	; 0x88
   14934:	ldr	r3, [sp, #8]
   14938:	sub	r4, r2, r3
   1493c:	cmp	r2, r4
   14940:	ble	148f0 <flatcc_builder_create_vtable@@Base+0x78>
   14944:	str	r3, [sp]
   14948:	ldr	r6, [r5, #44]	; 0x2c
   1494c:	mov	r3, r4
   14950:	ldr	r2, [sp, #12]
   14954:	add	r1, sp, #16
   14958:	ldr	r0, [r5, #36]	; 0x24
   1495c:	blx	r6
   14960:	cmp	r0, #0
   14964:	bne	14904 <flatcc_builder_create_vtable@@Base+0x8c>
   14968:	str	r4, [r5, #136]	; 0x88
   1496c:	cmp	r4, #0
   14970:	addne	r4, r4, #1
   14974:	mov	r0, r4
   14978:	add	sp, sp, #80	; 0x50
   1497c:	pop	{r4, r5, r6, pc}
   14980:	ldr	r4, [r5, #140]	; 0x8c
   14984:	ldr	r3, [sp, #8]
   14988:	add	r2, r3, r4
   1498c:	str	r2, [r5, #140]	; 0x8c
   14990:	ldr	r0, [r5, #36]	; 0x24
   14994:	str	r3, [sp]
   14998:	ldr	r5, [r5, #44]	; 0x2c
   1499c:	mov	r3, r4
   149a0:	ldr	r2, [sp, #12]
   149a4:	add	r1, sp, #16
   149a8:	blx	r5
   149ac:	cmp	r0, #0
   149b0:	addeq	r4, r4, #1
   149b4:	beq	14974 <flatcc_builder_create_vtable@@Base+0xfc>
   149b8:	ldr	r3, [pc, #12]	; 149cc <flatcc_builder_create_vtable@@Base+0x154>
   149bc:	ldr	r2, [pc, #36]	; 149e8 <flatcc_builder_create_vtable@@Base+0x170>
   149c0:	ldr	r1, [pc, #12]	; 149d4 <flatcc_builder_create_vtable@@Base+0x15c>
   149c4:	ldr	r0, [pc, #12]	; 149d8 <flatcc_builder_create_vtable@@Base+0x160>
   149c8:	bl	12084 <__assert_fail@plt>
   149cc:			; <UNDEFINED> instruction: 0x000174bc
   149d0:	andeq	r0, r0, r1, lsr #5
   149d4:	andeq	r7, r1, ip, lsl #20
   149d8:	andeq	r7, r1, r0, ror #20
   149dc:	andeq	r7, r1, r8, lsl #10
   149e0:	andeq	r0, r0, r7, lsl #5
   149e4:	andeq	r0, r0, fp, lsl #5
   149e8:	andeq	r0, r0, r5, lsr #5

000149ec <flatcc_builder_create_cached_vtable@@Base>:
   149ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149f0:	sub	sp, sp, #28
   149f4:	mov	r8, r0
   149f8:	str	r1, [sp, #8]
   149fc:	mov	r7, r2
   14a00:	mov	fp, r3
   14a04:	ldr	r4, [r0, #116]	; 0x74
   14a08:	cmp	r4, #0
   14a0c:	beq	14a54 <flatcc_builder_create_cached_vtable@@Base+0x68>
   14a10:	ldr	r3, [r8, #116]	; 0x74
   14a14:	rsb	r3, r3, #32
   14a18:	lsr	fp, fp, r3
   14a1c:	ldr	r3, [r8, #92]	; 0x5c
   14a20:	str	r3, [sp, #16]
   14a24:	adds	r2, r3, fp, lsl #2
   14a28:	str	r2, [sp, #20]
   14a2c:	beq	14d24 <flatcc_builder_create_cached_vtable@@Base+0x338>
   14a30:	ldr	r5, [r3, fp, lsl #2]
   14a34:	cmp	r5, #0
   14a38:	beq	14bc4 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   14a3c:	ldr	sl, [r8, #100]	; 0x64
   14a40:	ldr	r6, [r8, #68]	; 0x44
   14a44:	mov	r9, r2
   14a48:	mov	r3, #0
   14a4c:	str	r3, [sp, #12]
   14a50:	b	14b4c <flatcc_builder_create_cached_vtable@@Base+0x160>
   14a54:	add	r6, r0, #92	; 0x5c
   14a58:	ldr	r3, [r0, #124]	; 0x7c
   14a5c:	cmp	r3, #0
   14a60:	bne	14ab8 <flatcc_builder_create_cached_vtable@@Base+0xcc>
   14a64:	ldr	r3, [r0, #104]	; 0x68
   14a68:	cmp	r3, #15
   14a6c:	bls	14acc <flatcc_builder_create_cached_vtable@@Base+0xe0>
   14a70:	ldr	r3, [r8, #100]	; 0x64
   14a74:	cmp	r3, #0
   14a78:	beq	14d44 <flatcc_builder_create_cached_vtable@@Base+0x358>
   14a7c:	mov	r3, #16
   14a80:	str	r3, [r8, #124]	; 0x7c
   14a84:	mov	r3, #5
   14a88:	str	r3, [sp]
   14a8c:	ldr	r5, [r8, #48]	; 0x30
   14a90:	mov	r3, #1
   14a94:	mov	r2, #256	; 0x100
   14a98:	mov	r1, r6
   14a9c:	ldr	r0, [r8, #40]	; 0x28
   14aa0:	blx	r5
   14aa4:	cmp	r0, #0
   14aa8:	bne	14d44 <flatcc_builder_create_cached_vtable@@Base+0x358>
   14aac:	ldr	r1, [r8, #96]	; 0x60
   14ab0:	mov	r3, #256	; 0x100
   14ab4:	b	14b0c <flatcc_builder_create_cached_vtable@@Base+0x120>
   14ab8:	ldr	r3, [pc, #652]	; 14d4c <flatcc_builder_create_cached_vtable@@Base+0x360>
   14abc:	ldr	r2, [pc, #652]	; 14d50 <flatcc_builder_create_cached_vtable@@Base+0x364>
   14ac0:	ldr	r1, [pc, #652]	; 14d54 <flatcc_builder_create_cached_vtable@@Base+0x368>
   14ac4:	ldr	r0, [pc, #652]	; 14d58 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   14ac8:	bl	12084 <__assert_fail@plt>
   14acc:	mov	r3, #6
   14ad0:	str	r3, [sp]
   14ad4:	ldr	r5, [r0, #48]	; 0x30
   14ad8:	mov	r3, #0
   14adc:	mov	r2, #16
   14ae0:	add	r1, r0, #100	; 0x64
   14ae4:	ldr	r0, [r0, #40]	; 0x28
   14ae8:	blx	r5
   14aec:	cmp	r0, #0
   14af0:	beq	14a70 <flatcc_builder_create_cached_vtable@@Base+0x84>
   14af4:	ldr	r3, [pc, #608]	; 14d5c <flatcc_builder_create_cached_vtable@@Base+0x370>
   14af8:	mov	r2, #308	; 0x134
   14afc:	ldr	r1, [pc, #592]	; 14d54 <flatcc_builder_create_cached_vtable@@Base+0x368>
   14b00:	ldr	r0, [pc, #600]	; 14d60 <flatcc_builder_create_cached_vtable@@Base+0x374>
   14b04:	bl	12084 <__assert_fail@plt>
   14b08:	mov	r3, r2
   14b0c:	lsl	r2, r3, #1
   14b10:	cmp	r2, r1
   14b14:	bls	14b08 <flatcc_builder_create_cached_vtable@@Base+0x11c>
   14b18:	lsr	r3, r3, #2
   14b1c:	cmp	r3, #1
   14b20:	bls	14b34 <flatcc_builder_create_cached_vtable@@Base+0x148>
   14b24:	mov	r2, #1
   14b28:	add	r4, r4, #1
   14b2c:	cmp	r3, r2, lsl r4
   14b30:	bhi	14b28 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   14b34:	str	r4, [r8, #116]	; 0x74
   14b38:	b	14a10 <flatcc_builder_create_cached_vtable@@Base+0x24>
   14b3c:	add	r9, r4, #12
   14b40:	ldr	r5, [r4, #12]
   14b44:	cmp	r5, #0
   14b48:	beq	14bcc <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   14b4c:	add	r4, sl, r5
   14b50:	ldr	r3, [r4, #8]
   14b54:	add	r1, r6, r3
   14b58:	ldrh	r3, [r6, r3]
   14b5c:	cmp	r3, r7
   14b60:	bne	14b3c <flatcc_builder_create_cached_vtable@@Base+0x150>
   14b64:	mov	r2, r7
   14b68:	ldr	r0, [sp, #8]
   14b6c:	bl	11fdc <memcmp@plt>
   14b70:	cmp	r0, #0
   14b74:	bne	14b3c <flatcc_builder_create_cached_vtable@@Base+0x150>
   14b78:	ldr	r2, [r4, #4]
   14b7c:	ldr	r3, [r8, #152]	; 0x98
   14b80:	cmp	r2, r3
   14b84:	addne	r9, r4, #12
   14b88:	ldrne	r5, [r4, #12]
   14b8c:	strne	r4, [sp, #12]
   14b90:	bne	14b44 <flatcc_builder_create_cached_vtable@@Base+0x158>
   14b94:	ldr	r3, [sp, #20]
   14b98:	cmp	r3, r9
   14b9c:	beq	14bb8 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   14ba0:	ldr	r3, [r4, #12]
   14ba4:	str	r3, [r9]
   14ba8:	ldr	r2, [sp, #16]
   14bac:	ldr	r3, [r2, fp, lsl #2]
   14bb0:	str	r3, [r4, #12]
   14bb4:	str	r5, [r2, fp, lsl #2]
   14bb8:	ldr	r0, [r4]
   14bbc:	add	sp, sp, #28
   14bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bc4:	mov	r3, #0
   14bc8:	str	r3, [sp, #12]
   14bcc:	ldr	r4, [r8, #124]	; 0x7c
   14bd0:	add	r2, r4, #16
   14bd4:	ldr	r3, [r8, #104]	; 0x68
   14bd8:	cmp	r2, r3
   14bdc:	bhi	14c48 <flatcc_builder_create_cached_vtable@@Base+0x25c>
   14be0:	ldr	r5, [r8, #100]	; 0x64
   14be4:	adds	r6, r5, r4
   14be8:	beq	14d2c <flatcc_builder_create_cached_vtable@@Base+0x340>
   14bec:	ldr	r3, [r8, #124]	; 0x7c
   14bf0:	add	r2, r3, #16
   14bf4:	str	r2, [r8, #124]	; 0x7c
   14bf8:	ldr	r2, [r8, #152]	; 0x98
   14bfc:	str	r2, [r6, #4]
   14c00:	ldr	r1, [sp, #16]
   14c04:	ldr	r2, [r1, fp, lsl #2]
   14c08:	str	r2, [r6, #12]
   14c0c:	str	r3, [r1, fp, lsl #2]
   14c10:	mov	r2, r7
   14c14:	ldr	r1, [sp, #8]
   14c18:	mov	r0, r8
   14c1c:	bl	14878 <flatcc_builder_create_vtable@@Base>
   14c20:	str	r0, [r5, r4]
   14c24:	cmp	r0, #0
   14c28:	beq	14d34 <flatcc_builder_create_cached_vtable@@Base+0x348>
   14c2c:	ldr	r3, [sp, #12]
   14c30:	cmp	r3, #0
   14c34:	beq	14c80 <flatcc_builder_create_cached_vtable@@Base+0x294>
   14c38:	ldr	r3, [r3, #8]
   14c3c:	str	r3, [r6, #8]
   14c40:	ldr	r0, [r5, r4]
   14c44:	b	14bbc <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14c48:	mov	r3, #6
   14c4c:	str	r3, [sp]
   14c50:	ldr	r5, [r8, #48]	; 0x30
   14c54:	mov	r3, #0
   14c58:	add	r1, r8, #100	; 0x64
   14c5c:	ldr	r0, [r8, #40]	; 0x28
   14c60:	blx	r5
   14c64:	cmp	r0, #0
   14c68:	beq	14be0 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   14c6c:	ldr	r3, [pc, #232]	; 14d5c <flatcc_builder_create_cached_vtable@@Base+0x370>
   14c70:	mov	r2, #308	; 0x134
   14c74:	ldr	r1, [pc, #216]	; 14d54 <flatcc_builder_create_cached_vtable@@Base+0x368>
   14c78:	ldr	r0, [pc, #224]	; 14d60 <flatcc_builder_create_cached_vtable@@Base+0x374>
   14c7c:	bl	12084 <__assert_fail@plt>
   14c80:	ldr	r2, [r8, #172]	; 0xac
   14c84:	cmp	r2, #0
   14c88:	beq	14c9c <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   14c8c:	ldr	r3, [r8, #120]	; 0x78
   14c90:	add	r3, r7, r3
   14c94:	cmp	r2, r3
   14c98:	bcc	14ce0 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   14c9c:	ldr	r9, [r8, #120]	; 0x78
   14ca0:	add	r2, r9, r7
   14ca4:	ldr	r3, [r8, #72]	; 0x48
   14ca8:	cmp	r2, r3
   14cac:	bhi	14cec <flatcc_builder_create_cached_vtable@@Base+0x300>
   14cb0:	ldr	r3, [r8, #68]	; 0x44
   14cb4:	adds	r0, r3, r9
   14cb8:	beq	14d3c <flatcc_builder_create_cached_vtable@@Base+0x350>
   14cbc:	ldr	r3, [r8, #120]	; 0x78
   14cc0:	str	r3, [r6, #8]
   14cc4:	ldr	r3, [r8, #120]	; 0x78
   14cc8:	add	r3, r3, r7
   14ccc:	str	r3, [r8, #120]	; 0x78
   14cd0:	mov	r2, r7
   14cd4:	ldr	r1, [sp, #8]
   14cd8:	bl	11fd0 <memcpy@plt>
   14cdc:	b	14c40 <flatcc_builder_create_cached_vtable@@Base+0x254>
   14ce0:	mov	r0, r8
   14ce4:	bl	12eac <flatcc_builder_flush_vtable_cache@@Base>
   14ce8:	b	14c40 <flatcc_builder_create_cached_vtable@@Base+0x254>
   14cec:	mov	r3, #2
   14cf0:	str	r3, [sp]
   14cf4:	ldr	sl, [r8, #48]	; 0x30
   14cf8:	mov	r3, #0
   14cfc:	add	r1, r8, #68	; 0x44
   14d00:	ldr	r0, [r8, #40]	; 0x28
   14d04:	blx	sl
   14d08:	cmp	r0, #0
   14d0c:	beq	14cb0 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   14d10:	ldr	r3, [pc, #68]	; 14d5c <flatcc_builder_create_cached_vtable@@Base+0x370>
   14d14:	mov	r2, #308	; 0x134
   14d18:	ldr	r1, [pc, #52]	; 14d54 <flatcc_builder_create_cached_vtable@@Base+0x368>
   14d1c:	ldr	r0, [pc, #60]	; 14d60 <flatcc_builder_create_cached_vtable@@Base+0x374>
   14d20:	bl	12084 <__assert_fail@plt>
   14d24:	mov	r0, #0
   14d28:	b	14bbc <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14d2c:	mov	r0, #0
   14d30:	b	14bbc <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14d34:	mov	r0, #0
   14d38:	b	14bbc <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14d3c:	mvn	r0, #0
   14d40:	b	14bbc <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14d44:	mov	r0, #0
   14d48:	b	14bbc <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14d4c:	andeq	r7, r1, ip, asr #14
   14d50:	andeq	r0, r0, r6, asr r1
   14d54:	andeq	r7, r1, ip, lsl #20
   14d58:	andeq	r7, r1, r0, lsr #25
   14d5c:	ldrdeq	r7, [r1], -r8
   14d60:	andeq	r7, r1, r0, ror #20

00014d64 <flatcc_builder_create_table@@Base>:
   14d64:	push	{r4, r5, r6, r7, lr}
   14d68:	sub	sp, sp, #92	; 0x5c
   14d6c:	ldr	r4, [sp, #116]	; 0x74
   14d70:	ldr	ip, [sp, #120]	; 0x78
   14d74:	cmp	r4, #0
   14d78:	blt	14eb8 <flatcc_builder_create_table@@Base+0x154>
   14d7c:	mov	r5, r0
   14d80:	tst	ip, #1
   14d84:	beq	14ecc <flatcc_builder_create_table@@Base+0x168>
   14d88:	cmp	r3, #4
   14d8c:	movcs	r0, r3
   14d90:	movcc	r0, #4
   14d94:	ldrh	r3, [r5, #128]	; 0x80
   14d98:	cmp	r3, r0
   14d9c:	strhcc	r0, [r5, #128]	; 0x80
   14da0:	ldr	lr, [r5, #136]	; 0x88
   14da4:	sub	r7, lr, r2
   14da8:	sub	r0, r0, #1
   14dac:	and	r7, r7, r0
   14db0:	mvn	r3, #3
   14db4:	sub	r3, r3, r2
   14db8:	add	r3, r3, lr
   14dbc:	sub	r3, r3, r7
   14dc0:	sub	ip, ip, #1
   14dc4:	sub	ip, r3, ip
   14dc8:	str	ip, [sp, #84]	; 0x54
   14dcc:	cmp	r4, #0
   14dd0:	ble	14e00 <flatcc_builder_create_table@@Base+0x9c>
   14dd4:	ldr	ip, [sp, #112]	; 0x70
   14dd8:	add	r4, ip, r4, lsl #1
   14ddc:	mvn	r6, #3
   14de0:	sub	r6, r6, r3
   14de4:	ldrh	r3, [ip], #2
   14de8:	sub	lr, r6, r3
   14dec:	ldr	r0, [r1, r3]
   14df0:	add	r0, r0, lr
   14df4:	str	r0, [r1, r3]
   14df8:	cmp	ip, r4
   14dfc:	bne	14de4 <flatcc_builder_create_table@@Base+0x80>
   14e00:	mov	r3, #4
   14e04:	str	r3, [sp, #12]
   14e08:	add	r0, sp, #84	; 0x54
   14e0c:	str	r0, [sp, #20]
   14e10:	str	r3, [sp, #24]
   14e14:	mov	r3, #1
   14e18:	str	r3, [sp, #16]
   14e1c:	cmp	r2, #0
   14e20:	beq	14e3c <flatcc_builder_create_table@@Base+0xd8>
   14e24:	add	r3, r2, #4
   14e28:	str	r3, [sp, #12]
   14e2c:	str	r1, [sp, #28]
   14e30:	str	r2, [sp, #32]
   14e34:	mov	r3, #2
   14e38:	str	r3, [sp, #16]
   14e3c:	cmp	r7, #0
   14e40:	beq	14e70 <flatcc_builder_create_table@@Base+0x10c>
   14e44:	ldr	r3, [sp, #12]
   14e48:	add	r3, r3, r7
   14e4c:	str	r3, [sp, #12]
   14e50:	ldr	r3, [sp, #16]
   14e54:	add	r3, r3, #1
   14e58:	add	r2, sp, #88	; 0x58
   14e5c:	add	r2, r2, r3, lsl #3
   14e60:	ldr	r1, [pc, #160]	; 14f08 <flatcc_builder_create_table@@Base+0x1a4>
   14e64:	str	r1, [r2, #-76]	; 0xffffffb4
   14e68:	str	r7, [r2, #-72]	; 0xffffffb8
   14e6c:	str	r3, [sp, #16]
   14e70:	ldr	r2, [r5, #136]	; 0x88
   14e74:	ldr	r3, [sp, #12]
   14e78:	sub	r4, r2, r3
   14e7c:	cmp	r2, r4
   14e80:	ble	14ee0 <flatcc_builder_create_table@@Base+0x17c>
   14e84:	str	r3, [sp]
   14e88:	ldr	r6, [r5, #44]	; 0x2c
   14e8c:	mov	r3, r4
   14e90:	ldr	r2, [sp, #16]
   14e94:	add	r1, sp, #20
   14e98:	ldr	r0, [r5, #36]	; 0x24
   14e9c:	blx	r6
   14ea0:	cmp	r0, #0
   14ea4:	bne	14ef4 <flatcc_builder_create_table@@Base+0x190>
   14ea8:	str	r4, [r5, #136]	; 0x88
   14eac:	mov	r0, r4
   14eb0:	add	sp, sp, #92	; 0x5c
   14eb4:	pop	{r4, r5, r6, r7, pc}
   14eb8:	ldr	r3, [pc, #76]	; 14f0c <flatcc_builder_create_table@@Base+0x1a8>
   14ebc:	ldr	r2, [pc, #76]	; 14f10 <flatcc_builder_create_table@@Base+0x1ac>
   14ec0:	ldr	r1, [pc, #76]	; 14f14 <flatcc_builder_create_table@@Base+0x1b0>
   14ec4:	ldr	r0, [pc, #76]	; 14f18 <flatcc_builder_create_table@@Base+0x1b4>
   14ec8:	bl	12084 <__assert_fail@plt>
   14ecc:	ldr	r3, [pc, #56]	; 14f0c <flatcc_builder_create_table@@Base+0x1a8>
   14ed0:	ldr	r2, [pc, #68]	; 14f1c <flatcc_builder_create_table@@Base+0x1b8>
   14ed4:	ldr	r1, [pc, #56]	; 14f14 <flatcc_builder_create_table@@Base+0x1b0>
   14ed8:	ldr	r0, [pc, #64]	; 14f20 <flatcc_builder_create_table@@Base+0x1bc>
   14edc:	bl	12084 <__assert_fail@plt>
   14ee0:	ldr	r3, [pc, #60]	; 14f24 <flatcc_builder_create_table@@Base+0x1c0>
   14ee4:	ldr	r2, [pc, #60]	; 14f28 <flatcc_builder_create_table@@Base+0x1c4>
   14ee8:	ldr	r1, [pc, #36]	; 14f14 <flatcc_builder_create_table@@Base+0x1b0>
   14eec:	ldr	r0, [pc, #56]	; 14f2c <flatcc_builder_create_table@@Base+0x1c8>
   14ef0:	bl	12084 <__assert_fail@plt>
   14ef4:	ldr	r3, [pc, #40]	; 14f24 <flatcc_builder_create_table@@Base+0x1c0>
   14ef8:	ldr	r2, [pc, #48]	; 14f30 <flatcc_builder_create_table@@Base+0x1cc>
   14efc:	ldr	r1, [pc, #16]	; 14f14 <flatcc_builder_create_table@@Base+0x1b0>
   14f00:	ldr	r0, [pc, #36]	; 14f2c <flatcc_builder_create_table@@Base+0x1c8>
   14f04:	bl	12084 <__assert_fail@plt>
   14f08:			; <UNDEFINED> instruction: 0x000172bc
   14f0c:	andeq	r7, r1, r8, asr r7
   14f10:	ldrdeq	r0, [r0], -r5
   14f14:	andeq	r7, r1, ip, lsl #20
   14f18:			; <UNDEFINED> instruction: 0x00017cb0
   14f1c:	ldrdeq	r0, [r0], -fp
   14f20:	andeq	r7, r1, r4, asr #25
   14f24:	andeq	r7, r1, r8, lsl #10
   14f28:	andeq	r0, r0, r7, lsl #5
   14f2c:	andeq	r7, r1, r0, ror #20
   14f30:	andeq	r0, r0, fp, lsl #5

00014f34 <flatcc_builder_check_required_field@@Base>:
   14f34:	ldr	r3, [r0, #32]
   14f38:	ldrh	r3, [r3, #14]
   14f3c:	cmp	r3, #3
   14f40:	bne	14f6c <flatcc_builder_check_required_field@@Base+0x38>
   14f44:	ldrh	r3, [r0, #8]
   14f48:	cmp	r3, r1
   14f4c:	movls	r0, #0
   14f50:	bls	14f68 <flatcc_builder_check_required_field@@Base+0x34>
   14f54:	ldr	r3, [r0, #4]
   14f58:	lsl	r1, r1, #1
   14f5c:	ldrh	r0, [r3, r1]
   14f60:	adds	r0, r0, #0
   14f64:	movne	r0, #1
   14f68:	bx	lr
   14f6c:	push	{r4, lr}
   14f70:	ldr	r3, [pc, #12]	; 14f84 <flatcc_builder_check_required_field@@Base+0x50>
   14f74:	ldr	r2, [pc, #12]	; 14f88 <flatcc_builder_check_required_field@@Base+0x54>
   14f78:	ldr	r1, [pc, #12]	; 14f8c <flatcc_builder_check_required_field@@Base+0x58>
   14f7c:	ldr	r0, [pc, #12]	; 14f90 <flatcc_builder_check_required_field@@Base+0x5c>
   14f80:	bl	12084 <__assert_fail@plt>
   14f84:	andeq	r7, r1, r4, ror r7
   14f88:	strdeq	r0, [r0], -r8
   14f8c:	andeq	r7, r1, ip, lsl #20
   14f90:	ldrdeq	r7, [r1], -r0

00014f94 <flatcc_builder_check_union_field@@Base>:
   14f94:	ldr	r3, [r0, #32]
   14f98:	ldrh	r3, [r3, #14]
   14f9c:	cmp	r3, #3
   14fa0:	bne	14ffc <flatcc_builder_check_union_field@@Base+0x68>
   14fa4:	cmp	r1, #0
   14fa8:	moveq	r0, #0
   14fac:	beq	15024 <flatcc_builder_check_union_field@@Base+0x90>
   14fb0:	ldrh	r3, [r0, #8]
   14fb4:	cmp	r3, r1
   14fb8:	movls	r0, #0
   14fbc:	bls	15024 <flatcc_builder_check_union_field@@Base+0x90>
   14fc0:	ldr	r3, [r0, #4]
   14fc4:	sub	r1, r1, #-2147483647	; 0x80000001
   14fc8:	lsl	r1, r1, #1
   14fcc:	ldrh	r2, [r3, r1]
   14fd0:	cmp	r2, #0
   14fd4:	beq	15014 <flatcc_builder_check_union_field@@Base+0x80>
   14fd8:	ldr	r0, [r0, #16]
   14fdc:	ldrb	r2, [r0, r2]
   14fe0:	cmp	r2, #0
   14fe4:	bne	15028 <flatcc_builder_check_union_field@@Base+0x94>
   14fe8:	add	r1, r3, r1
   14fec:	ldrh	r0, [r1, #2]
   14ff0:	clz	r0, r0
   14ff4:	lsr	r0, r0, #5
   14ff8:	b	15024 <flatcc_builder_check_union_field@@Base+0x90>
   14ffc:	push	{r4, lr}
   15000:	ldr	r3, [pc, #52]	; 1503c <flatcc_builder_check_union_field@@Base+0xa8>
   15004:	ldr	r2, [pc, #52]	; 15040 <flatcc_builder_check_union_field@@Base+0xac>
   15008:	ldr	r1, [pc, #52]	; 15044 <flatcc_builder_check_union_field@@Base+0xb0>
   1500c:	ldr	r0, [pc, #52]	; 15048 <flatcc_builder_check_union_field@@Base+0xb4>
   15010:	bl	12084 <__assert_fail@plt>
   15014:	add	r1, r3, r1
   15018:	ldrh	r0, [r1, #2]
   1501c:	clz	r0, r0
   15020:	lsr	r0, r0, #5
   15024:	bx	lr
   15028:	add	r1, r3, r1
   1502c:	ldrh	r0, [r1, #2]
   15030:	adds	r0, r0, #0
   15034:	movne	r0, #1
   15038:	b	15024 <flatcc_builder_check_union_field@@Base+0x90>
   1503c:	muleq	r1, r8, r7
   15040:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15044:	andeq	r7, r1, ip, lsl #20
   15048:	ldrdeq	r7, [r1], -r0

0001504c <flatcc_builder_check_required@@Base>:
   1504c:	ldr	r3, [r0, #32]
   15050:	ldrh	r3, [r3, #14]
   15054:	cmp	r3, #3
   15058:	bne	150b8 <flatcc_builder_check_required@@Base+0x6c>
   1505c:	ldrh	r3, [r0, #8]
   15060:	cmp	r3, r2
   15064:	movlt	r0, #0
   15068:	blt	150d4 <flatcc_builder_check_required@@Base+0x88>
   1506c:	cmp	r2, #0
   15070:	ble	150d8 <flatcc_builder_check_required@@Base+0x8c>
   15074:	ldr	ip, [r0, #4]
   15078:	ldrh	r3, [r1]
   1507c:	lsl	r3, r3, #1
   15080:	ldrh	r3, [ip, r3]
   15084:	cmp	r3, #0
   15088:	beq	150e0 <flatcc_builder_check_required@@Base+0x94>
   1508c:	add	r0, r1, #2
   15090:	add	r2, r1, r2, lsl #1
   15094:	cmp	r0, r2
   15098:	beq	150d0 <flatcc_builder_check_required@@Base+0x84>
   1509c:	ldrh	r3, [r0], #2
   150a0:	lsl	r3, r3, #1
   150a4:	ldrh	r3, [ip, r3]
   150a8:	cmp	r3, #0
   150ac:	bne	15094 <flatcc_builder_check_required@@Base+0x48>
   150b0:	mov	r0, #0
   150b4:	b	150d4 <flatcc_builder_check_required@@Base+0x88>
   150b8:	push	{r4, lr}
   150bc:	ldr	r3, [pc, #36]	; 150e8 <flatcc_builder_check_required@@Base+0x9c>
   150c0:	ldr	r2, [pc, #36]	; 150ec <flatcc_builder_check_required@@Base+0xa0>
   150c4:	ldr	r1, [pc, #36]	; 150f0 <flatcc_builder_check_required@@Base+0xa4>
   150c8:	ldr	r0, [pc, #36]	; 150f4 <flatcc_builder_check_required@@Base+0xa8>
   150cc:	bl	12084 <__assert_fail@plt>
   150d0:	mov	r0, #1
   150d4:	bx	lr
   150d8:	mov	r0, #1
   150dc:	b	150d4 <flatcc_builder_check_required@@Base+0x88>
   150e0:	mov	r0, #0
   150e4:	b	150d4 <flatcc_builder_check_required@@Base+0x88>
   150e8:			; <UNDEFINED> instruction: 0x000177bc
   150ec:	andeq	r0, r0, r1, lsl r5
   150f0:	andeq	r7, r1, ip, lsl #20
   150f4:	ldrdeq	r7, [r1], -r0

000150f8 <flatcc_builder_end_table@@Base>:
   150f8:	push	{r4, r5, r6, r7, lr}
   150fc:	sub	sp, sp, #20
   15100:	ldr	r3, [r0, #32]
   15104:	ldrh	r3, [r3, #14]
   15108:	cmp	r3, #3
   1510c:	bne	1517c <flatcc_builder_end_table@@Base+0x84>
   15110:	mov	r4, r0
   15114:	ldr	r1, [r0, #4]
   15118:	sub	r6, r1, #4
   1511c:	ldrh	r5, [r0, #8]
   15120:	add	r5, r5, #2
   15124:	lsl	r5, r5, #1
   15128:	uxth	r5, r5
   1512c:	strh	r5, [r1, #-4]
   15130:	ldr	r3, [r0, #20]
   15134:	add	r3, r3, #4
   15138:	uxth	r2, r3
   1513c:	strh	r2, [r1, #-2]
   15140:	ldr	r3, [r0, #12]
   15144:	eor	r3, r3, r5
   15148:	ldr	r1, [pc, #328]	; 15298 <flatcc_builder_end_table@@Base+0x1a0>
   1514c:	mul	r3, r1, r3
   15150:	eor	r3, r3, r2
   15154:	mul	r3, r1, r3
   15158:	str	r3, [r0, #12]
   1515c:	mov	r2, r5
   15160:	mov	r1, r6
   15164:	bl	149ec <flatcc_builder_create_cached_vtable@@Base>
   15168:	subs	r7, r0, #0
   1516c:	bne	15190 <flatcc_builder_end_table@@Base+0x98>
   15170:	mov	r0, r7
   15174:	add	sp, sp, #20
   15178:	pop	{r4, r5, r6, r7, pc}
   1517c:	ldr	r3, [pc, #280]	; 1529c <flatcc_builder_end_table@@Base+0x1a4>
   15180:	ldr	r2, [pc, #280]	; 152a0 <flatcc_builder_end_table@@Base+0x1a8>
   15184:	ldr	r1, [pc, #280]	; 152a4 <flatcc_builder_end_table@@Base+0x1ac>
   15188:	ldr	r0, [pc, #280]	; 152a8 <flatcc_builder_end_table@@Base+0x1b0>
   1518c:	bl	12084 <__assert_fail@plt>
   15190:	mov	r2, r5
   15194:	mov	r1, #0
   15198:	mov	r0, r6
   1519c:	bl	12054 <memset@plt>
   151a0:	ldr	r3, [r4, #32]
   151a4:	ldr	r1, [r4, #76]	; 0x4c
   151a8:	ldr	r3, [r3, #20]
   151ac:	add	r1, r1, r3
   151b0:	ldrh	r3, [r4, #130]	; 0x82
   151b4:	str	r7, [sp, #8]
   151b8:	ldr	r2, [r4]
   151bc:	sub	r2, r2, r1
   151c0:	asr	r2, r2, #1
   151c4:	str	r2, [sp, #4]
   151c8:	str	r1, [sp]
   151cc:	ldr	r2, [r4, #20]
   151d0:	ldr	r1, [r4, #16]
   151d4:	mov	r0, r4
   151d8:	bl	14d64 <flatcc_builder_create_table@@Base>
   151dc:	subs	r7, r0, #0
   151e0:	beq	15170 <flatcc_builder_end_table@@Base+0x78>
   151e4:	ldr	r3, [r4, #32]
   151e8:	ldr	r2, [r3, #24]
   151ec:	str	r2, [r4, #12]
   151f0:	ldrh	r2, [r3, #28]
   151f4:	strh	r2, [r4, #8]
   151f8:	ldr	r2, [r4, #52]	; 0x34
   151fc:	ldr	r1, [r3, #16]
   15200:	add	r2, r2, r1
   15204:	str	r2, [r4, #4]
   15208:	ldr	r2, [r4, #76]	; 0x4c
   1520c:	ldr	r3, [r3, #20]
   15210:	add	r3, r2, r3
   15214:	str	r3, [r4]
   15218:	ldr	r2, [r4, #20]
   1521c:	mov	r1, #0
   15220:	ldr	r0, [r4, #16]
   15224:	bl	12054 <memset@plt>
   15228:	ldr	r2, [r4, #32]
   1522c:	ldr	r3, [r2, #8]
   15230:	str	r3, [r4, #20]
   15234:	ldr	r0, [r2]
   15238:	str	r0, [r4, #28]
   1523c:	ldr	r1, [r2, #4]
   15240:	ldr	r3, [r4, #60]	; 0x3c
   15244:	add	r3, r3, r0
   15248:	str	r3, [r4, #16]
   1524c:	ldr	r3, [r4, #64]	; 0x40
   15250:	sub	r3, r3, r0
   15254:	cmp	r3, r1
   15258:	movcs	r3, r1
   1525c:	str	r3, [r4, #24]
   15260:	str	r1, [r2, #4]
   15264:	ldrh	r3, [r4, #130]	; 0x82
   15268:	ldrh	r2, [r4, #128]	; 0x80
   1526c:	cmp	r2, r3
   15270:	strhcc	r3, [r4, #128]	; 0x80
   15274:	ldr	r3, [r4, #32]
   15278:	ldrh	r2, [r3, #12]
   1527c:	strh	r2, [r4, #130]	; 0x82
   15280:	sub	r3, r3, #36	; 0x24
   15284:	str	r3, [r4, #32]
   15288:	ldr	r3, [r4, #156]	; 0x9c
   1528c:	sub	r3, r3, #1
   15290:	str	r3, [r4, #156]	; 0x9c
   15294:	b	15170 <flatcc_builder_end_table@@Base+0x78>
   15298:			; <UNDEFINED> instruction: 0x9e3779b1
   1529c:	ldrdeq	r7, [r1], -ip
   152a0:	andeq	r0, r0, r5, lsr #10
   152a4:	andeq	r7, r1, ip, lsl #20
   152a8:	ldrdeq	r7, [r1], -r0

000152ac <flatcc_builder_create_vector@@Base>:
   152ac:	push	{r4, r5, r6, lr}
   152b0:	sub	sp, sp, #88	; 0x58
   152b4:	mov	r4, r0
   152b8:	ldrh	r0, [sp, #104]	; 0x68
   152bc:	ldr	ip, [sp, #108]	; 0x6c
   152c0:	cmp	r2, ip
   152c4:	bhi	153a8 <flatcc_builder_create_vector@@Base+0xfc>
   152c8:	cmp	r0, #4
   152cc:	movcc	r0, #4
   152d0:	ldrh	ip, [r4, #128]	; 0x80
   152d4:	cmp	ip, r0
   152d8:	strhcc	r0, [r4, #128]	; 0x80
   152dc:	mul	r3, r3, r2
   152e0:	str	r2, [sp, #84]	; 0x54
   152e4:	ldr	r2, [r4, #136]	; 0x88
   152e8:	sub	ip, r2, r3
   152ec:	sub	r0, r0, #1
   152f0:	and	r0, r0, ip
   152f4:	mov	ip, #4
   152f8:	str	ip, [sp, #12]
   152fc:	add	lr, sp, #84	; 0x54
   15300:	str	lr, [sp, #20]
   15304:	str	ip, [sp, #24]
   15308:	mov	ip, #1
   1530c:	str	ip, [sp, #16]
   15310:	cmp	r3, #0
   15314:	beq	15330 <flatcc_builder_create_vector@@Base+0x84>
   15318:	add	ip, r3, #4
   1531c:	str	ip, [sp, #12]
   15320:	str	r1, [sp, #28]
   15324:	str	r3, [sp, #32]
   15328:	mov	r3, #2
   1532c:	str	r3, [sp, #16]
   15330:	cmp	r0, #0
   15334:	beq	15364 <flatcc_builder_create_vector@@Base+0xb8>
   15338:	ldr	r3, [sp, #12]
   1533c:	add	r3, r3, r0
   15340:	str	r3, [sp, #12]
   15344:	ldr	r3, [sp, #16]
   15348:	add	r3, r3, #1
   1534c:	add	r1, sp, #88	; 0x58
   15350:	add	r1, r1, r3, lsl #3
   15354:	ldr	ip, [pc, #136]	; 153e4 <flatcc_builder_create_vector@@Base+0x138>
   15358:	str	ip, [r1, #-76]	; 0xffffffb4
   1535c:	str	r0, [r1, #-72]	; 0xffffffb8
   15360:	str	r3, [sp, #16]
   15364:	ldr	r3, [sp, #12]
   15368:	sub	r5, r2, r3
   1536c:	cmp	r2, r5
   15370:	ble	153bc <flatcc_builder_create_vector@@Base+0x110>
   15374:	str	r3, [sp]
   15378:	ldr	r6, [r4, #44]	; 0x2c
   1537c:	mov	r3, r5
   15380:	ldr	r2, [sp, #16]
   15384:	add	r1, sp, #20
   15388:	ldr	r0, [r4, #36]	; 0x24
   1538c:	blx	r6
   15390:	cmp	r0, #0
   15394:	bne	153d0 <flatcc_builder_create_vector@@Base+0x124>
   15398:	str	r5, [r4, #136]	; 0x88
   1539c:	mov	r0, r5
   153a0:	add	sp, sp, #88	; 0x58
   153a4:	pop	{r4, r5, r6, pc}
   153a8:	ldr	r3, [pc, #56]	; 153e8 <flatcc_builder_create_vector@@Base+0x13c>
   153ac:	ldr	r2, [pc, #56]	; 153ec <flatcc_builder_create_vector@@Base+0x140>
   153b0:	ldr	r1, [pc, #56]	; 153f0 <flatcc_builder_create_vector@@Base+0x144>
   153b4:	ldr	r0, [pc, #56]	; 153f4 <flatcc_builder_create_vector@@Base+0x148>
   153b8:	bl	12084 <__assert_fail@plt>
   153bc:	ldr	r3, [pc, #52]	; 153f8 <flatcc_builder_create_vector@@Base+0x14c>
   153c0:	ldr	r2, [pc, #52]	; 153fc <flatcc_builder_create_vector@@Base+0x150>
   153c4:	ldr	r1, [pc, #36]	; 153f0 <flatcc_builder_create_vector@@Base+0x144>
   153c8:	ldr	r0, [pc, #48]	; 15400 <flatcc_builder_create_vector@@Base+0x154>
   153cc:	bl	12084 <__assert_fail@plt>
   153d0:	ldr	r3, [pc, #32]	; 153f8 <flatcc_builder_create_vector@@Base+0x14c>
   153d4:	ldr	r2, [pc, #40]	; 15404 <flatcc_builder_create_vector@@Base+0x158>
   153d8:	ldr	r1, [pc, #16]	; 153f0 <flatcc_builder_create_vector@@Base+0x144>
   153dc:	ldr	r0, [pc, #28]	; 15400 <flatcc_builder_create_vector@@Base+0x154>
   153e0:	bl	12084 <__assert_fail@plt>
   153e4:			; <UNDEFINED> instruction: 0x000172bc
   153e8:	strdeq	r7, [r1], -r8
   153ec:	andeq	r0, r0, r5, asr r5
   153f0:	andeq	r7, r1, ip, lsl #20
   153f4:	strdeq	r7, [r1], -ip
   153f8:	andeq	r7, r1, r8, lsl #10
   153fc:	andeq	r0, r0, r7, lsl #5
   15400:	andeq	r7, r1, r0, ror #20
   15404:	andeq	r0, r0, fp, lsl #5

00015408 <flatcc_builder_end_vector@@Base>:
   15408:	push	{r4, r5, lr}
   1540c:	sub	sp, sp, #12
   15410:	ldr	r1, [r0, #32]
   15414:	ldrh	r3, [r1, #14]
   15418:	cmp	r3, #4
   1541c:	bne	15458 <flatcc_builder_end_vector@@Base+0x50>
   15420:	mov	r4, r0
   15424:	ldr	r3, [r1, #16]
   15428:	ldr	r2, [r1, #20]
   1542c:	ldr	r1, [r1, #24]
   15430:	str	r1, [sp, #4]
   15434:	ldrh	r1, [r0, #130]	; 0x82
   15438:	str	r1, [sp]
   1543c:	ldr	r1, [r0, #16]
   15440:	bl	152ac <flatcc_builder_create_vector@@Base>
   15444:	subs	r5, r0, #0
   15448:	bne	1546c <flatcc_builder_end_vector@@Base+0x64>
   1544c:	mov	r0, r5
   15450:	add	sp, sp, #12
   15454:	pop	{r4, r5, pc}
   15458:	ldr	r3, [pc, #140]	; 154ec <flatcc_builder_end_vector@@Base+0xe4>
   1545c:	ldr	r2, [pc, #140]	; 154f0 <flatcc_builder_end_vector@@Base+0xe8>
   15460:	ldr	r1, [pc, #140]	; 154f4 <flatcc_builder_end_vector@@Base+0xec>
   15464:	ldr	r0, [pc, #140]	; 154f8 <flatcc_builder_end_vector@@Base+0xf0>
   15468:	bl	12084 <__assert_fail@plt>
   1546c:	ldr	r2, [r4, #20]
   15470:	mov	r1, #0
   15474:	ldr	r0, [r4, #16]
   15478:	bl	12054 <memset@plt>
   1547c:	ldr	r2, [r4, #32]
   15480:	ldr	r3, [r2, #8]
   15484:	str	r3, [r4, #20]
   15488:	ldr	r0, [r2]
   1548c:	str	r0, [r4, #28]
   15490:	ldr	r1, [r2, #4]
   15494:	ldr	r3, [r4, #60]	; 0x3c
   15498:	add	r3, r3, r0
   1549c:	str	r3, [r4, #16]
   154a0:	ldr	r3, [r4, #64]	; 0x40
   154a4:	sub	r3, r3, r0
   154a8:	cmp	r3, r1
   154ac:	movcs	r3, r1
   154b0:	str	r3, [r4, #24]
   154b4:	str	r1, [r2, #4]
   154b8:	ldrh	r3, [r4, #130]	; 0x82
   154bc:	ldrh	r2, [r4, #128]	; 0x80
   154c0:	cmp	r2, r3
   154c4:	strhcc	r3, [r4, #128]	; 0x80
   154c8:	ldr	r3, [r4, #32]
   154cc:	ldrh	r2, [r3, #12]
   154d0:	strh	r2, [r4, #130]	; 0x82
   154d4:	sub	r3, r3, #36	; 0x24
   154d8:	str	r3, [r4, #32]
   154dc:	ldr	r3, [r4, #156]	; 0x9c
   154e0:	sub	r3, r3, #1
   154e4:	str	r3, [r4, #156]	; 0x9c
   154e8:	b	1544c <flatcc_builder_end_vector@@Base+0x44>
   154ec:	andeq	r7, r1, r8, lsl r8
   154f0:	andeq	r0, r0, r8, ror r5
   154f4:	andeq	r7, r1, ip, lsl #20
   154f8:	andeq	r7, r1, r4, asr #22

000154fc <flatcc_builder_vector_count@@Base>:
   154fc:	ldr	r3, [r0, #32]
   15500:	ldr	r0, [r3, #20]
   15504:	bx	lr

00015508 <flatcc_builder_vector_edit@@Base>:
   15508:	ldr	r0, [r0, #16]
   1550c:	bx	lr

00015510 <flatcc_builder_create_offset_vector_direct@@Base>:
   15510:	push	{r4, lr}
   15514:	mov	r3, #0
   15518:	bl	12cb4 <flatcc_builder_default_alloc@@Base+0x378>
   1551c:	pop	{r4, pc}

00015520 <flatcc_builder_end_offset_vector@@Base>:
   15520:	push	{r4, r5, r6, lr}
   15524:	ldr	r3, [r0, #32]
   15528:	ldrh	r2, [r3, #14]
   1552c:	cmp	r2, #5
   15530:	bne	15554 <flatcc_builder_end_offset_vector@@Base+0x34>
   15534:	mov	r4, r0
   15538:	ldr	r2, [r3, #20]
   1553c:	ldr	r1, [r0, #16]
   15540:	bl	15510 <flatcc_builder_create_offset_vector_direct@@Base>
   15544:	subs	r5, r0, #0
   15548:	bne	15568 <flatcc_builder_end_offset_vector@@Base+0x48>
   1554c:	mov	r0, r5
   15550:	pop	{r4, r5, r6, pc}
   15554:	ldr	r3, [pc, #140]	; 155e8 <flatcc_builder_end_offset_vector@@Base+0xc8>
   15558:	ldr	r2, [pc, #140]	; 155ec <flatcc_builder_end_offset_vector@@Base+0xcc>
   1555c:	ldr	r1, [pc, #140]	; 155f0 <flatcc_builder_end_offset_vector@@Base+0xd0>
   15560:	ldr	r0, [pc, #140]	; 155f4 <flatcc_builder_end_offset_vector@@Base+0xd4>
   15564:	bl	12084 <__assert_fail@plt>
   15568:	ldr	r2, [r4, #20]
   1556c:	mov	r1, #0
   15570:	ldr	r0, [r4, #16]
   15574:	bl	12054 <memset@plt>
   15578:	ldr	r2, [r4, #32]
   1557c:	ldr	r3, [r2, #8]
   15580:	str	r3, [r4, #20]
   15584:	ldr	r0, [r2]
   15588:	str	r0, [r4, #28]
   1558c:	ldr	r1, [r2, #4]
   15590:	ldr	r3, [r4, #60]	; 0x3c
   15594:	add	r3, r3, r0
   15598:	str	r3, [r4, #16]
   1559c:	ldr	r3, [r4, #64]	; 0x40
   155a0:	sub	r3, r3, r0
   155a4:	cmp	r3, r1
   155a8:	movcs	r3, r1
   155ac:	str	r3, [r4, #24]
   155b0:	str	r1, [r2, #4]
   155b4:	ldrh	r3, [r4, #130]	; 0x82
   155b8:	ldrh	r2, [r4, #128]	; 0x80
   155bc:	cmp	r2, r3
   155c0:	strhcc	r3, [r4, #128]	; 0x80
   155c4:	ldr	r3, [r4, #32]
   155c8:	ldrh	r2, [r3, #12]
   155cc:	strh	r2, [r4, #130]	; 0x82
   155d0:	sub	r3, r3, #36	; 0x24
   155d4:	str	r3, [r4, #32]
   155d8:	ldr	r3, [r4, #156]	; 0x9c
   155dc:	sub	r3, r3, #1
   155e0:	str	r3, [r4, #156]	; 0x9c
   155e4:	b	1554c <flatcc_builder_end_offset_vector@@Base+0x2c>
   155e8:	andeq	r7, r1, r4, lsr r8
   155ec:	andeq	r0, r0, r8, asr #11
   155f0:	andeq	r7, r1, ip, lsl #20
   155f4:			; <UNDEFINED> instruction: 0x00017bb0

000155f8 <flatcc_builder_create_offset_vector@@Base>:
   155f8:	push	{r4, r5, r6, lr}
   155fc:	mov	r4, r0
   15600:	mov	r6, r1
   15604:	mov	r5, r2
   15608:	bl	14484 <flatcc_builder_start_offset_vector@@Base>
   1560c:	cmp	r0, #0
   15610:	beq	1561c <flatcc_builder_create_offset_vector@@Base+0x24>
   15614:	mov	r0, #0
   15618:	pop	{r4, r5, r6, pc}
   1561c:	mov	r1, r5
   15620:	mov	r0, r4
   15624:	bl	13e54 <flatcc_builder_extend_offset_vector@@Base>
   15628:	cmp	r0, #0
   1562c:	beq	15648 <flatcc_builder_create_offset_vector@@Base+0x50>
   15630:	lsl	r2, r5, #2
   15634:	mov	r1, r6
   15638:	bl	11fd0 <memcpy@plt>
   1563c:	mov	r0, r4
   15640:	bl	15520 <flatcc_builder_end_offset_vector@@Base>
   15644:	pop	{r4, r5, r6, pc}
   15648:	mov	r0, #0
   1564c:	pop	{r4, r5, r6, pc}

00015650 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15650:	push	{r4, r5, r6, lr}
   15654:	mov	r4, r0
   15658:	ldr	r2, [r0, #32]
   1565c:	ldrh	r0, [r2, #14]
   15660:	cmp	r0, #5
   15664:	bne	1568c <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   15668:	mov	r3, r1
   1566c:	ldr	r2, [r2, #20]
   15670:	ldr	r1, [r4, #16]
   15674:	mov	r0, r4
   15678:	bl	12cb4 <flatcc_builder_default_alloc@@Base+0x378>
   1567c:	subs	r5, r0, #0
   15680:	bne	156a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   15684:	mov	r0, r5
   15688:	pop	{r4, r5, r6, pc}
   1568c:	ldr	r3, [pc, #140]	; 15720 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   15690:	ldr	r2, [pc, #140]	; 15724 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd4>
   15694:	ldr	r1, [pc, #140]	; 15728 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   15698:	ldr	r0, [pc, #140]	; 1572c <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   1569c:	bl	12084 <__assert_fail@plt>
   156a0:	ldr	r2, [r4, #20]
   156a4:	mov	r1, #0
   156a8:	ldr	r0, [r4, #16]
   156ac:	bl	12054 <memset@plt>
   156b0:	ldr	r2, [r4, #32]
   156b4:	ldr	r3, [r2, #8]
   156b8:	str	r3, [r4, #20]
   156bc:	ldr	r0, [r2]
   156c0:	str	r0, [r4, #28]
   156c4:	ldr	r1, [r2, #4]
   156c8:	ldr	r3, [r4, #60]	; 0x3c
   156cc:	add	r3, r3, r0
   156d0:	str	r3, [r4, #16]
   156d4:	ldr	r3, [r4, #64]	; 0x40
   156d8:	sub	r3, r3, r0
   156dc:	cmp	r3, r1
   156e0:	movcs	r3, r1
   156e4:	str	r3, [r4, #24]
   156e8:	str	r1, [r2, #4]
   156ec:	ldrh	r3, [r4, #130]	; 0x82
   156f0:	ldrh	r2, [r4, #128]	; 0x80
   156f4:	cmp	r2, r3
   156f8:	strhcc	r3, [r4, #128]	; 0x80
   156fc:	ldr	r3, [r4, #32]
   15700:	ldrh	r2, [r3, #12]
   15704:	strh	r2, [r4, #130]	; 0x82
   15708:	sub	r3, r3, #36	; 0x24
   1570c:	str	r3, [r4, #32]
   15710:	ldr	r3, [r4, #156]	; 0x9c
   15714:	sub	r3, r3, #1
   15718:	str	r3, [r4, #156]	; 0x9c
   1571c:	b	15684 <flatcc_builder_end_offset_vector_for_unions@@Base+0x34>
   15720:	andeq	r7, r1, r8, asr r8
   15724:	ldrdeq	r0, [r0], -r5
   15728:	andeq	r7, r1, ip, lsl #20
   1572c:			; <UNDEFINED> instruction: 0x00017bb0

00015730 <flatcc_builder_offset_vector_edit@@Base>:
   15730:	ldr	r0, [r0, #16]
   15734:	bx	lr

00015738 <flatcc_builder_offset_vector_count@@Base>:
   15738:	ldr	r3, [r0, #32]
   1573c:	ldr	r0, [r3, #20]
   15740:	bx	lr

00015744 <flatcc_builder_create_union_vector_direct@@Base>:
   15744:	push	{r4, r5, r6, r7, lr}
   15748:	sub	sp, sp, #12
   1574c:	mov	r4, r0
   15750:	mov	r5, r1
   15754:	mov	r6, r2
   15758:	mov	r1, r3
   1575c:	mov	r3, r2
   15760:	ldr	r2, [sp, #32]
   15764:	mov	r0, r5
   15768:	bl	12cb4 <flatcc_builder_default_alloc@@Base+0x378>
   1576c:	subs	r7, r0, #0
   15770:	bne	1578c <flatcc_builder_create_union_vector_direct@@Base+0x48>
   15774:	mov	r3, #0
   15778:	str	r3, [r4]
   1577c:	str	r3, [r4, #4]
   15780:	mov	r0, r4
   15784:	add	sp, sp, #12
   15788:	pop	{r4, r5, r6, r7, pc}
   1578c:	mvn	r3, #0
   15790:	str	r3, [sp, #4]
   15794:	mov	r3, #1
   15798:	str	r3, [sp]
   1579c:	ldr	r2, [sp, #32]
   157a0:	mov	r1, r6
   157a4:	mov	r0, r5
   157a8:	bl	152ac <flatcc_builder_create_vector@@Base>
   157ac:	cmp	r0, #0
   157b0:	moveq	r3, #0
   157b4:	streq	r3, [r4]
   157b8:	strne	r0, [r4]
   157bc:	str	r7, [r4, #4]
   157c0:	b	15780 <flatcc_builder_create_union_vector_direct@@Base+0x3c>

000157c4 <flatcc_builder_create_union_vector@@Base>:
   157c4:	push	{r4, r5, r6, r7, r8, lr}
   157c8:	sub	sp, sp, #16
   157cc:	mov	r5, r0
   157d0:	mov	r4, r1
   157d4:	mov	r7, r2
   157d8:	mov	r6, r3
   157dc:	mov	r0, r1
   157e0:	bl	14484 <flatcc_builder_start_offset_vector@@Base>
   157e4:	cmp	r0, #0
   157e8:	beq	15804 <flatcc_builder_create_union_vector@@Base+0x40>
   157ec:	mov	r3, #0
   157f0:	str	r3, [r5]
   157f4:	str	r3, [r5, #4]
   157f8:	mov	r0, r5
   157fc:	add	sp, sp, #16
   15800:	pop	{r4, r5, r6, r7, r8, pc}
   15804:	mov	r1, r6
   15808:	mov	r0, r4
   1580c:	bl	13e54 <flatcc_builder_extend_offset_vector@@Base>
   15810:	cmp	r0, #0
   15814:	moveq	r3, #0
   15818:	streq	r3, [r5]
   1581c:	streq	r3, [r5, #4]
   15820:	beq	157f8 <flatcc_builder_create_union_vector@@Base+0x34>
   15824:	ldr	r8, [r4, #20]
   15828:	add	r1, r6, r8
   1582c:	str	r1, [r4, #20]
   15830:	ldr	r3, [r4, #24]
   15834:	cmp	r1, r3
   15838:	bcs	1591c <flatcc_builder_create_union_vector@@Base+0x158>
   1583c:	ldr	r3, [r4, #16]
   15840:	adds	r2, r3, r8
   15844:	beq	15934 <flatcc_builder_create_union_vector@@Base+0x170>
   15848:	cmp	r6, #0
   1584c:	beq	1587c <flatcc_builder_create_union_vector@@Base+0xb8>
   15850:	mov	r1, r7
   15854:	sub	ip, r2, #1
   15858:	sub	r0, r3, #4
   1585c:	add	r7, r7, r6, lsl #3
   15860:	ldrb	lr, [r1]
   15864:	strb	lr, [ip, #1]!
   15868:	ldr	lr, [r1, #4]
   1586c:	str	lr, [r0, #4]!
   15870:	add	r1, r1, #8
   15874:	cmp	r1, r7
   15878:	bne	15860 <flatcc_builder_create_union_vector@@Base+0x9c>
   1587c:	str	r6, [sp]
   15880:	mov	r1, r4
   15884:	add	r0, sp, #8
   15888:	bl	15744 <flatcc_builder_create_union_vector_direct@@Base>
   1588c:	ldr	r7, [sp, #8]
   15890:	ldr	r6, [sp, #12]
   15894:	ldr	r2, [r4, #20]
   15898:	mov	r1, #0
   1589c:	ldr	r0, [r4, #16]
   158a0:	bl	12054 <memset@plt>
   158a4:	ldr	r2, [r4, #32]
   158a8:	ldr	r3, [r2, #8]
   158ac:	str	r3, [r4, #20]
   158b0:	ldr	r0, [r2]
   158b4:	str	r0, [r4, #28]
   158b8:	ldr	r1, [r2, #4]
   158bc:	ldr	r3, [r4, #60]	; 0x3c
   158c0:	add	r3, r3, r0
   158c4:	str	r3, [r4, #16]
   158c8:	ldr	r3, [r4, #64]	; 0x40
   158cc:	sub	r3, r3, r0
   158d0:	cmp	r3, r1
   158d4:	movcs	r3, r1
   158d8:	str	r3, [r4, #24]
   158dc:	str	r1, [r2, #4]
   158e0:	ldrh	r3, [r4, #130]	; 0x82
   158e4:	ldrh	r2, [r4, #128]	; 0x80
   158e8:	cmp	r2, r3
   158ec:	strhcc	r3, [r4, #128]	; 0x80
   158f0:	ldr	r3, [r4, #32]
   158f4:	ldrh	r2, [r3, #12]
   158f8:	strh	r2, [r4, #130]	; 0x82
   158fc:	sub	r3, r3, #36	; 0x24
   15900:	str	r3, [r4, #32]
   15904:	ldr	r3, [r4, #156]	; 0x9c
   15908:	sub	r3, r3, #1
   1590c:	str	r3, [r4, #156]	; 0x9c
   15910:	str	r7, [r5]
   15914:	str	r6, [r5, #4]
   15918:	b	157f8 <flatcc_builder_create_union_vector@@Base+0x34>
   1591c:	mvn	r2, #3
   15920:	add	r1, r1, #1
   15924:	mov	r0, r4
   15928:	bl	128c8 <main@@Base+0x18>
   1592c:	cmp	r0, #0
   15930:	beq	1583c <flatcc_builder_create_union_vector@@Base+0x78>
   15934:	mov	r3, #0
   15938:	str	r3, [r5]
   1593c:	str	r3, [r5, #4]
   15940:	b	157f8 <flatcc_builder_create_union_vector@@Base+0x34>

00015944 <flatcc_builder_start_union_vector@@Base>:
   15944:	push	{r4, lr}
   15948:	mov	r4, r0
   1594c:	mov	r1, #4
   15950:	bl	12b68 <flatcc_builder_default_alloc@@Base+0x22c>
   15954:	cmp	r0, #0
   15958:	bne	159b4 <flatcc_builder_start_union_vector@@Base+0x70>
   1595c:	ldr	r3, [r4, #32]
   15960:	mov	r2, #8
   15964:	str	r2, [r3, #16]
   15968:	ldr	r3, [r4, #32]
   1596c:	mov	r2, #0
   15970:	str	r2, [r3, #20]
   15974:	ldr	r3, [r4, #32]
   15978:	mov	r2, #7
   1597c:	strh	r2, [r3, #14]
   15980:	ldr	r1, [r4, #28]
   15984:	ldr	r2, [r4, #60]	; 0x3c
   15988:	add	r2, r2, r1
   1598c:	str	r2, [r4, #16]
   15990:	ldr	r3, [r4, #64]	; 0x40
   15994:	sub	r3, r3, r1
   15998:	cmn	r3, #4
   1599c:	mvnhi	r3, #3
   159a0:	str	r3, [r4, #24]
   159a4:	ldr	r3, [r4, #32]
   159a8:	mvn	r2, #3
   159ac:	str	r2, [r3, #4]
   159b0:	pop	{r4, pc}
   159b4:	mvn	r0, #0
   159b8:	pop	{r4, pc}

000159bc <flatcc_builder_end_union_vector@@Base>:
   159bc:	push	{r4, r5, r6, r7, r8, lr}
   159c0:	sub	sp, sp, #16
   159c4:	ldr	r3, [r1, #32]
   159c8:	ldrh	r2, [r3, #14]
   159cc:	cmp	r2, #7
   159d0:	bne	15ae8 <flatcc_builder_end_union_vector@@Base+0x12c>
   159d4:	mov	r6, r0
   159d8:	mov	r4, r1
   159dc:	ldr	r5, [r3, #20]
   159e0:	ldr	r8, [r1, #20]
   159e4:	add	r1, r5, r5, lsl #2
   159e8:	add	r1, r1, r8
   159ec:	str	r1, [r4, #20]
   159f0:	ldr	r3, [r4, #24]
   159f4:	cmp	r1, r3
   159f8:	bcs	15afc <flatcc_builder_end_union_vector@@Base+0x140>
   159fc:	ldr	r7, [r4, #16]
   15a00:	adds	r3, r7, r8
   15a04:	beq	15b14 <flatcc_builder_end_union_vector@@Base+0x158>
   15a08:	add	r2, r3, r5, lsl #2
   15a0c:	cmp	r5, #0
   15a10:	beq	15a40 <flatcc_builder_end_union_vector@@Base+0x84>
   15a14:	mov	r1, r7
   15a18:	sub	ip, r2, #1
   15a1c:	sub	r0, r3, #4
   15a20:	add	r7, r7, r5, lsl #3
   15a24:	ldrb	lr, [r1]
   15a28:	strb	lr, [ip, #1]!
   15a2c:	ldr	lr, [r1, #4]
   15a30:	str	lr, [r0, #4]!
   15a34:	add	r1, r1, #8
   15a38:	cmp	r1, r7
   15a3c:	bne	15a24 <flatcc_builder_end_union_vector@@Base+0x68>
   15a40:	str	r5, [sp]
   15a44:	mov	r1, r4
   15a48:	add	r0, sp, #8
   15a4c:	bl	15744 <flatcc_builder_create_union_vector_direct@@Base>
   15a50:	ldr	r7, [sp, #8]
   15a54:	ldr	r5, [sp, #12]
   15a58:	ldr	r2, [r4, #20]
   15a5c:	mov	r1, #0
   15a60:	ldr	r0, [r4, #16]
   15a64:	bl	12054 <memset@plt>
   15a68:	ldr	r2, [r4, #32]
   15a6c:	ldr	r3, [r2, #8]
   15a70:	str	r3, [r4, #20]
   15a74:	ldr	r0, [r2]
   15a78:	str	r0, [r4, #28]
   15a7c:	ldr	r1, [r2, #4]
   15a80:	ldr	r3, [r4, #60]	; 0x3c
   15a84:	add	r3, r3, r0
   15a88:	str	r3, [r4, #16]
   15a8c:	ldr	r3, [r4, #64]	; 0x40
   15a90:	sub	r3, r3, r0
   15a94:	cmp	r3, r1
   15a98:	movcs	r3, r1
   15a9c:	str	r3, [r4, #24]
   15aa0:	str	r1, [r2, #4]
   15aa4:	ldrh	r3, [r4, #130]	; 0x82
   15aa8:	ldrh	r2, [r4, #128]	; 0x80
   15aac:	cmp	r2, r3
   15ab0:	strhcc	r3, [r4, #128]	; 0x80
   15ab4:	ldr	r3, [r4, #32]
   15ab8:	ldrh	r2, [r3, #12]
   15abc:	strh	r2, [r4, #130]	; 0x82
   15ac0:	sub	r3, r3, #36	; 0x24
   15ac4:	str	r3, [r4, #32]
   15ac8:	ldr	r3, [r4, #156]	; 0x9c
   15acc:	sub	r3, r3, #1
   15ad0:	str	r3, [r4, #156]	; 0x9c
   15ad4:	str	r7, [r6]
   15ad8:	str	r5, [r6, #4]
   15adc:	mov	r0, r6
   15ae0:	add	sp, sp, #16
   15ae4:	pop	{r4, r5, r6, r7, r8, pc}
   15ae8:	ldr	r3, [pc, #52]	; 15b24 <flatcc_builder_end_union_vector@@Base+0x168>
   15aec:	ldr	r2, [pc, #52]	; 15b28 <flatcc_builder_end_union_vector@@Base+0x16c>
   15af0:	ldr	r1, [pc, #52]	; 15b2c <flatcc_builder_end_union_vector@@Base+0x170>
   15af4:	ldr	r0, [pc, #52]	; 15b30 <flatcc_builder_end_union_vector@@Base+0x174>
   15af8:	bl	12084 <__assert_fail@plt>
   15afc:	mvn	r2, #3
   15b00:	add	r1, r1, #1
   15b04:	mov	r0, r4
   15b08:	bl	128c8 <main@@Base+0x18>
   15b0c:	cmp	r0, #0
   15b10:	beq	159fc <flatcc_builder_end_union_vector@@Base+0x40>
   15b14:	mov	r3, #0
   15b18:	str	r3, [r6]
   15b1c:	str	r3, [r6, #4]
   15b20:	b	15adc <flatcc_builder_end_union_vector@@Base+0x120>
   15b24:	andeq	r7, r1, r4, lsl #17
   15b28:	andeq	r0, r0, r1, asr r6
   15b2c:	andeq	r7, r1, ip, lsl #20
   15b30:	andeq	r7, r1, r0, lsl sp

00015b34 <flatcc_builder_union_vector_edit@@Base>:
   15b34:	ldr	r0, [r0, #16]
   15b38:	bx	lr

00015b3c <flatcc_builder_union_vector_count@@Base>:
   15b3c:	ldr	r3, [r0, #32]
   15b40:	ldr	r0, [r3, #20]
   15b44:	bx	lr

00015b48 <flatcc_builder_extend_union_vector@@Base>:
   15b48:	push	{r4, r5, r6, lr}
   15b4c:	mov	r4, r0
   15b50:	ldr	r2, [r0, #32]
   15b54:	ldr	r3, [r2, #20]
   15b58:	adds	r3, r1, r3
   15b5c:	movcs	ip, #1
   15b60:	movcc	ip, #0
   15b64:	cmn	r3, #-536870911	; 0xe0000001
   15b68:	movls	r0, #0
   15b6c:	movhi	r0, #1
   15b70:	orrs	r0, ip, r0
   15b74:	bne	15ba0 <flatcc_builder_extend_union_vector@@Base+0x58>
   15b78:	str	r3, [r2, #20]
   15b7c:	ldr	r5, [r4, #20]
   15b80:	add	r1, r5, r1, lsl #3
   15b84:	str	r1, [r4, #20]
   15b88:	ldr	r3, [r4, #24]
   15b8c:	cmp	r1, r3
   15b90:	bcs	15bb4 <flatcc_builder_extend_union_vector@@Base+0x6c>
   15b94:	ldr	r0, [r4, #16]
   15b98:	add	r0, r0, r5
   15b9c:	pop	{r4, r5, r6, pc}
   15ba0:	ldr	r3, [pc, #44]	; 15bd4 <flatcc_builder_extend_union_vector@@Base+0x8c>
   15ba4:	mov	r2, #892	; 0x37c
   15ba8:	ldr	r1, [pc, #40]	; 15bd8 <flatcc_builder_extend_union_vector@@Base+0x90>
   15bac:	ldr	r0, [pc, #40]	; 15bdc <flatcc_builder_extend_union_vector@@Base+0x94>
   15bb0:	bl	12084 <__assert_fail@plt>
   15bb4:	mvn	r2, #3
   15bb8:	add	r1, r1, #1
   15bbc:	mov	r0, r4
   15bc0:	bl	128c8 <main@@Base+0x18>
   15bc4:	cmp	r0, #0
   15bc8:	beq	15b94 <flatcc_builder_extend_union_vector@@Base+0x4c>
   15bcc:	mov	r0, #0
   15bd0:	pop	{r4, r5, r6, pc}
   15bd4:	andeq	r7, r1, ip, ror #11
   15bd8:	andeq	r7, r1, ip, lsl #20
   15bdc:	andeq	r7, r1, r8, lsr #22

00015be0 <flatcc_builder_truncate_union_vector@@Base>:
   15be0:	push	{r4, lr}
   15be4:	ldr	ip, [r0, #32]
   15be8:	ldrh	r3, [ip, #14]
   15bec:	cmp	r3, #7
   15bf0:	bne	15c38 <flatcc_builder_truncate_union_vector@@Base+0x58>
   15bf4:	ldr	r3, [ip, #20]
   15bf8:	cmp	r3, r1
   15bfc:	bcc	15c4c <flatcc_builder_truncate_union_vector@@Base+0x6c>
   15c00:	sub	r3, r3, r1
   15c04:	str	r3, [ip, #20]
   15c08:	ldr	r3, [r0, #32]
   15c0c:	ldr	r2, [r3, #16]
   15c10:	mul	r2, r2, r1
   15c14:	ldr	r3, [r0, #20]
   15c18:	sub	r3, r3, r2
   15c1c:	str	r3, [r0, #20]
   15c20:	ldr	r0, [r0, #16]
   15c24:	mov	r1, #0
   15c28:	add	r0, r0, r3
   15c2c:	bl	12054 <memset@plt>
   15c30:	mov	r0, #0
   15c34:	pop	{r4, pc}
   15c38:	ldr	r3, [pc, #32]	; 15c60 <flatcc_builder_truncate_union_vector@@Base+0x80>
   15c3c:	ldr	r2, [pc, #32]	; 15c64 <flatcc_builder_truncate_union_vector@@Base+0x84>
   15c40:	ldr	r1, [pc, #32]	; 15c68 <flatcc_builder_truncate_union_vector@@Base+0x88>
   15c44:	ldr	r0, [pc, #32]	; 15c6c <flatcc_builder_truncate_union_vector@@Base+0x8c>
   15c48:	bl	12084 <__assert_fail@plt>
   15c4c:	ldr	r3, [pc, #12]	; 15c60 <flatcc_builder_truncate_union_vector@@Base+0x80>
   15c50:	ldr	r2, [pc, #24]	; 15c70 <flatcc_builder_truncate_union_vector@@Base+0x90>
   15c54:	ldr	r1, [pc, #12]	; 15c68 <flatcc_builder_truncate_union_vector@@Base+0x88>
   15c58:	ldr	r0, [pc, #20]	; 15c74 <flatcc_builder_truncate_union_vector@@Base+0x94>
   15c5c:	bl	12084 <__assert_fail@plt>
   15c60:	andeq	r7, r1, r4, lsr #17
   15c64:	andeq	r0, r0, r1, lsl #13
   15c68:	andeq	r7, r1, ip, lsl #20
   15c6c:	andeq	r7, r1, r0, lsl sp
   15c70:	andeq	r0, r0, r2, lsl #13
   15c74:	andeq	r7, r1, r4, lsr ip

00015c78 <flatcc_builder_union_vector_push@@Base>:
   15c78:	push	{r4, r5, lr}
   15c7c:	sub	sp, sp, #12
   15c80:	add	r3, sp, #8
   15c84:	stmdb	r3, {r1, r2}
   15c88:	ldr	r2, [r0, #32]
   15c8c:	ldrh	r3, [r2, #14]
   15c90:	cmp	r3, #7
   15c94:	bne	15cec <flatcc_builder_union_vector_push@@Base+0x74>
   15c98:	mov	r4, r0
   15c9c:	ldr	r3, [r2, #20]
   15ca0:	cmn	r3, #-536870911	; 0xe0000001
   15ca4:	beq	15d1c <flatcc_builder_union_vector_push@@Base+0xa4>
   15ca8:	add	r3, r3, #1
   15cac:	str	r3, [r2, #20]
   15cb0:	ldr	r5, [r0, #20]
   15cb4:	add	r3, r5, #8
   15cb8:	str	r3, [r0, #20]
   15cbc:	ldr	r2, [r0, #24]
   15cc0:	cmp	r3, r2
   15cc4:	bcs	15d00 <flatcc_builder_union_vector_push@@Base+0x88>
   15cc8:	ldr	r3, [r4, #16]
   15ccc:	adds	r3, r3, r5
   15cd0:	moveq	r0, r3
   15cd4:	addne	r2, sp, #8
   15cd8:	ldmdbne	r2, {r0, r1}
   15cdc:	stmne	r3, {r0, r1}
   15ce0:	movne	r0, r3
   15ce4:	add	sp, sp, #12
   15ce8:	pop	{r4, r5, pc}
   15cec:	ldr	r3, [pc, #48]	; 15d24 <flatcc_builder_union_vector_push@@Base+0xac>
   15cf0:	ldr	r2, [pc, #48]	; 15d28 <flatcc_builder_union_vector_push@@Base+0xb0>
   15cf4:	ldr	r1, [pc, #48]	; 15d2c <flatcc_builder_union_vector_push@@Base+0xb4>
   15cf8:	ldr	r0, [pc, #48]	; 15d30 <flatcc_builder_union_vector_push@@Base+0xb8>
   15cfc:	bl	12084 <__assert_fail@plt>
   15d00:	mvn	r2, #3
   15d04:	add	r1, r5, #9
   15d08:	bl	128c8 <main@@Base+0x18>
   15d0c:	cmp	r0, #0
   15d10:	beq	15cc8 <flatcc_builder_union_vector_push@@Base+0x50>
   15d14:	mov	r0, #0
   15d18:	b	15ce4 <flatcc_builder_union_vector_push@@Base+0x6c>
   15d1c:	mov	r0, #0
   15d20:	b	15ce4 <flatcc_builder_union_vector_push@@Base+0x6c>
   15d24:	andeq	r7, r1, ip, asr #17
   15d28:	andeq	r0, r0, sp, lsl #13
   15d2c:	andeq	r7, r1, ip, lsl #20
   15d30:	andeq	r7, r1, r0, lsl sp

00015d34 <flatcc_builder_append_union_vector@@Base>:
   15d34:	push	{r4, r5, r6, r7, r8, lr}
   15d38:	mov	r6, r1
   15d3c:	ldr	r1, [r0, #32]
   15d40:	ldrh	r3, [r1, #14]
   15d44:	cmp	r3, #7
   15d48:	bne	15db8 <flatcc_builder_append_union_vector@@Base+0x84>
   15d4c:	mov	r5, r0
   15d50:	ldr	r3, [r1, #20]
   15d54:	adds	r3, r2, r3
   15d58:	movcs	ip, #1
   15d5c:	movcc	ip, #0
   15d60:	cmn	r3, #-536870911	; 0xe0000001
   15d64:	movls	r0, #0
   15d68:	movhi	r0, #1
   15d6c:	orrs	r0, ip, r0
   15d70:	bne	15dcc <flatcc_builder_append_union_vector@@Base+0x98>
   15d74:	str	r3, [r1, #20]
   15d78:	lsl	r4, r2, #3
   15d7c:	ldr	r7, [r5, #20]
   15d80:	add	r1, r4, r7
   15d84:	str	r1, [r5, #20]
   15d88:	ldr	r3, [r5, #24]
   15d8c:	cmp	r1, r3
   15d90:	bcs	15de0 <flatcc_builder_append_union_vector@@Base+0xac>
   15d94:	ldr	r5, [r5, #16]
   15d98:	adds	r5, r5, r7
   15d9c:	beq	15db0 <flatcc_builder_append_union_vector@@Base+0x7c>
   15da0:	mov	r2, r4
   15da4:	mov	r1, r6
   15da8:	mov	r0, r5
   15dac:	bl	11fd0 <memcpy@plt>
   15db0:	mov	r0, r5
   15db4:	pop	{r4, r5, r6, r7, r8, pc}
   15db8:	ldr	r3, [pc, #64]	; 15e00 <flatcc_builder_append_union_vector@@Base+0xcc>
   15dbc:	ldr	r2, [pc, #64]	; 15e04 <flatcc_builder_append_union_vector@@Base+0xd0>
   15dc0:	ldr	r1, [pc, #64]	; 15e08 <flatcc_builder_append_union_vector@@Base+0xd4>
   15dc4:	ldr	r0, [pc, #64]	; 15e0c <flatcc_builder_append_union_vector@@Base+0xd8>
   15dc8:	bl	12084 <__assert_fail@plt>
   15dcc:	ldr	r3, [pc, #60]	; 15e10 <flatcc_builder_append_union_vector@@Base+0xdc>
   15dd0:	mov	r2, #892	; 0x37c
   15dd4:	ldr	r1, [pc, #44]	; 15e08 <flatcc_builder_append_union_vector@@Base+0xd4>
   15dd8:	ldr	r0, [pc, #52]	; 15e14 <flatcc_builder_append_union_vector@@Base+0xe0>
   15ddc:	bl	12084 <__assert_fail@plt>
   15de0:	mvn	r2, #3
   15de4:	add	r1, r1, #1
   15de8:	mov	r0, r5
   15dec:	bl	128c8 <main@@Base+0x18>
   15df0:	cmp	r0, #0
   15df4:	beq	15d94 <flatcc_builder_append_union_vector@@Base+0x60>
   15df8:	mov	r5, #0
   15dfc:	b	15db0 <flatcc_builder_append_union_vector@@Base+0x7c>
   15e00:	strdeq	r7, [r1], -r0
   15e04:	muleq	r0, ip, r6
   15e08:	andeq	r7, r1, ip, lsl #20
   15e0c:	andeq	r7, r1, r0, lsl sp
   15e10:	andeq	r7, r1, ip, ror #11
   15e14:	andeq	r7, r1, r8, lsr #22

00015e18 <flatcc_builder_create_string@@Base>:
   15e18:	push	{r4, r5, r6, lr}
   15e1c:	sub	sp, sp, #88	; 0x58
   15e20:	mov	r5, r0
   15e24:	str	r2, [sp, #84]	; 0x54
   15e28:	ldr	r0, [r0, #136]	; 0x88
   15e2c:	sub	r3, r0, r2
   15e30:	sub	r3, r3, #1
   15e34:	and	r3, r3, #3
   15e38:	add	r3, r3, #1
   15e3c:	mov	ip, #4
   15e40:	str	ip, [sp, #12]
   15e44:	add	lr, sp, #84	; 0x54
   15e48:	str	lr, [sp, #20]
   15e4c:	str	ip, [sp, #24]
   15e50:	mov	ip, #1
   15e54:	str	ip, [sp, #16]
   15e58:	cmp	r2, #0
   15e5c:	beq	15e78 <flatcc_builder_create_string@@Base+0x60>
   15e60:	add	ip, r2, #4
   15e64:	str	ip, [sp, #12]
   15e68:	str	r1, [sp, #28]
   15e6c:	str	r2, [sp, #32]
   15e70:	mov	r2, #2
   15e74:	str	r2, [sp, #16]
   15e78:	cmp	r3, #0
   15e7c:	beq	15eac <flatcc_builder_create_string@@Base+0x94>
   15e80:	ldr	r2, [sp, #12]
   15e84:	add	r2, r2, r3
   15e88:	str	r2, [sp, #12]
   15e8c:	ldr	r2, [sp, #16]
   15e90:	add	r2, r2, #1
   15e94:	add	r1, sp, #88	; 0x58
   15e98:	add	r1, r1, r2, lsl #3
   15e9c:	ldr	ip, [pc, #116]	; 15f18 <flatcc_builder_create_string@@Base+0x100>
   15ea0:	str	ip, [r1, #-76]	; 0xffffffb4
   15ea4:	str	r3, [r1, #-72]	; 0xffffffb8
   15ea8:	str	r2, [sp, #16]
   15eac:	ldr	r3, [sp, #12]
   15eb0:	sub	r4, r0, r3
   15eb4:	cmp	r0, r4
   15eb8:	ble	15ef0 <flatcc_builder_create_string@@Base+0xd8>
   15ebc:	str	r3, [sp]
   15ec0:	ldr	r6, [r5, #44]	; 0x2c
   15ec4:	mov	r3, r4
   15ec8:	ldr	r2, [sp, #16]
   15ecc:	add	r1, sp, #20
   15ed0:	ldr	r0, [r5, #36]	; 0x24
   15ed4:	blx	r6
   15ed8:	cmp	r0, #0
   15edc:	bne	15f04 <flatcc_builder_create_string@@Base+0xec>
   15ee0:	str	r4, [r5, #136]	; 0x88
   15ee4:	mov	r0, r4
   15ee8:	add	sp, sp, #88	; 0x58
   15eec:	pop	{r4, r5, r6, pc}
   15ef0:	ldr	r3, [pc, #36]	; 15f1c <flatcc_builder_create_string@@Base+0x104>
   15ef4:	ldr	r2, [pc, #36]	; 15f20 <flatcc_builder_create_string@@Base+0x108>
   15ef8:	ldr	r1, [pc, #36]	; 15f24 <flatcc_builder_create_string@@Base+0x10c>
   15efc:	ldr	r0, [pc, #36]	; 15f28 <flatcc_builder_create_string@@Base+0x110>
   15f00:	bl	12084 <__assert_fail@plt>
   15f04:	ldr	r3, [pc, #16]	; 15f1c <flatcc_builder_create_string@@Base+0x104>
   15f08:	ldr	r2, [pc, #28]	; 15f2c <flatcc_builder_create_string@@Base+0x114>
   15f0c:	ldr	r1, [pc, #16]	; 15f24 <flatcc_builder_create_string@@Base+0x10c>
   15f10:	ldr	r0, [pc, #16]	; 15f28 <flatcc_builder_create_string@@Base+0x110>
   15f14:	bl	12084 <__assert_fail@plt>
   15f18:			; <UNDEFINED> instruction: 0x000172bc
   15f1c:	andeq	r7, r1, r8, lsl #10
   15f20:	andeq	r0, r0, r7, lsl #5
   15f24:	andeq	r7, r1, ip, lsl #20
   15f28:	andeq	r7, r1, r0, ror #20
   15f2c:	andeq	r0, r0, fp, lsl #5

00015f30 <flatcc_builder_create_string_str@@Base>:
   15f30:	push	{r4, r5, r6, lr}
   15f34:	mov	r5, r0
   15f38:	mov	r4, r1
   15f3c:	mov	r0, r1
   15f40:	bl	12030 <strlen@plt>
   15f44:	mov	r2, r0
   15f48:	mov	r1, r4
   15f4c:	mov	r0, r5
   15f50:	bl	15e18 <flatcc_builder_create_string@@Base>
   15f54:	pop	{r4, r5, r6, pc}

00015f58 <flatcc_builder_create_string_strn@@Base>:
   15f58:	push	{r4, r5, r6, lr}
   15f5c:	mov	r6, r0
   15f60:	mov	r4, r1
   15f64:	mov	r5, r2
   15f68:	mov	r1, #0
   15f6c:	mov	r0, r4
   15f70:	bl	12060 <memchr@plt>
   15f74:	cmp	r0, #0
   15f78:	subne	r5, r0, r4
   15f7c:	mov	r2, r5
   15f80:	mov	r1, r4
   15f84:	mov	r0, r6
   15f88:	bl	15e18 <flatcc_builder_create_string@@Base>
   15f8c:	pop	{r4, r5, r6, pc}

00015f90 <flatcc_builder_end_string@@Base>:
   15f90:	push	{r4, r5, r6, lr}
   15f94:	ldr	r3, [r0, #32]
   15f98:	ldrh	r2, [r3, #14]
   15f9c:	cmp	r2, #6
   15fa0:	bne	15fd0 <flatcc_builder_end_string@@Base+0x40>
   15fa4:	mov	r4, r0
   15fa8:	ldr	r2, [r3, #20]
   15fac:	ldr	r3, [r0, #20]
   15fb0:	cmp	r2, r3
   15fb4:	bne	15fe4 <flatcc_builder_end_string@@Base+0x54>
   15fb8:	ldr	r1, [r0, #16]
   15fbc:	bl	15e18 <flatcc_builder_create_string@@Base>
   15fc0:	subs	r5, r0, #0
   15fc4:	bne	15ff8 <flatcc_builder_end_string@@Base+0x68>
   15fc8:	mov	r0, r5
   15fcc:	pop	{r4, r5, r6, pc}
   15fd0:	ldr	r3, [pc, #160]	; 16078 <flatcc_builder_end_string@@Base+0xe8>
   15fd4:	ldr	r2, [pc, #160]	; 1607c <flatcc_builder_end_string@@Base+0xec>
   15fd8:	ldr	r1, [pc, #160]	; 16080 <flatcc_builder_end_string@@Base+0xf0>
   15fdc:	ldr	r0, [pc, #160]	; 16084 <flatcc_builder_end_string@@Base+0xf4>
   15fe0:	bl	12084 <__assert_fail@plt>
   15fe4:	ldr	r3, [pc, #140]	; 16078 <flatcc_builder_end_string@@Base+0xe8>
   15fe8:	ldr	r2, [pc, #152]	; 16088 <flatcc_builder_end_string@@Base+0xf8>
   15fec:	ldr	r1, [pc, #140]	; 16080 <flatcc_builder_end_string@@Base+0xf0>
   15ff0:	ldr	r0, [pc, #148]	; 1608c <flatcc_builder_end_string@@Base+0xfc>
   15ff4:	bl	12084 <__assert_fail@plt>
   15ff8:	ldr	r2, [r4, #20]
   15ffc:	mov	r1, #0
   16000:	ldr	r0, [r4, #16]
   16004:	bl	12054 <memset@plt>
   16008:	ldr	r2, [r4, #32]
   1600c:	ldr	r3, [r2, #8]
   16010:	str	r3, [r4, #20]
   16014:	ldr	r0, [r2]
   16018:	str	r0, [r4, #28]
   1601c:	ldr	r1, [r2, #4]
   16020:	ldr	r3, [r4, #60]	; 0x3c
   16024:	add	r3, r3, r0
   16028:	str	r3, [r4, #16]
   1602c:	ldr	r3, [r4, #64]	; 0x40
   16030:	sub	r3, r3, r0
   16034:	cmp	r3, r1
   16038:	movcs	r3, r1
   1603c:	str	r3, [r4, #24]
   16040:	str	r1, [r2, #4]
   16044:	ldrh	r3, [r4, #130]	; 0x82
   16048:	ldrh	r2, [r4, #128]	; 0x80
   1604c:	cmp	r2, r3
   16050:	strhcc	r3, [r4, #128]	; 0x80
   16054:	ldr	r3, [r4, #32]
   16058:	ldrh	r2, [r3, #12]
   1605c:	strh	r2, [r4, #130]	; 0x82
   16060:	sub	r3, r3, #36	; 0x24
   16064:	str	r3, [r4, #32]
   16068:	ldr	r3, [r4, #156]	; 0x9c
   1606c:	sub	r3, r3, #1
   16070:	str	r3, [r4, #156]	; 0x9c
   16074:	b	15fc8 <flatcc_builder_end_string@@Base+0x38>
   16078:	andeq	r7, r1, r4, lsl r9
   1607c:	andeq	r0, r0, r4, asr #13
   16080:	andeq	r7, r1, ip, lsl #20
   16084:	andeq	r7, r1, r4, ror #23
   16088:	andeq	r0, r0, r5, asr #13
   1608c:	andeq	r7, r1, r4, asr #26

00016090 <flatcc_builder_string_edit@@Base>:
   16090:	ldr	r0, [r0, #16]
   16094:	bx	lr

00016098 <flatcc_builder_string_len@@Base>:
   16098:	ldr	r3, [r0, #32]
   1609c:	ldr	r0, [r3, #20]
   160a0:	bx	lr

000160a4 <flatcc_builder_table_add@@Base>:
   160a4:	push	{r4, r5, r6, r7, r8, lr}
   160a8:	mov	r5, r1
   160ac:	ldr	r1, [r0, #32]
   160b0:	ldrh	r1, [r1, #14]
   160b4:	cmp	r1, #3
   160b8:	bne	16164 <flatcc_builder_table_add@@Base+0xc0>
   160bc:	mov	r4, r0
   160c0:	ldr	r1, [pc, #248]	; 161c0 <flatcc_builder_table_add@@Base+0x11c>
   160c4:	cmp	r5, r1
   160c8:	bhi	16178 <flatcc_builder_table_add@@Base+0xd4>
   160cc:	ldrh	r1, [r0, #130]	; 0x82
   160d0:	cmp	r1, r3
   160d4:	strhcc	r3, [r0, #130]	; 0x82
   160d8:	ldr	r0, [r0, #4]
   160dc:	lsl	r1, r5, #1
   160e0:	ldrh	r1, [r0, r1]
   160e4:	cmp	r1, #0
   160e8:	bne	1618c <flatcc_builder_table_add@@Base+0xe8>
   160ec:	ldr	r0, [r4, #12]
   160f0:	eor	r0, r0, r5
   160f4:	ldr	r1, [pc, #200]	; 161c4 <flatcc_builder_table_add@@Base+0x120>
   160f8:	mul	r0, r1, r0
   160fc:	eor	r0, r0, r2
   16100:	mul	r0, r1, r0
   16104:	str	r0, [r4, #12]
   16108:	uxth	r7, r5
   1610c:	sub	r6, r3, #1
   16110:	ldr	r0, [r4, #20]
   16114:	add	r6, r6, r0
   16118:	rsb	r3, r3, #0
   1611c:	and	r6, r6, r3
   16120:	add	r1, r2, r6
   16124:	str	r1, [r4, #20]
   16128:	ldr	r3, [r4, #24]
   1612c:	cmp	r1, r3
   16130:	bcs	161a0 <flatcc_builder_table_add@@Base+0xfc>
   16134:	uxth	r5, r5
   16138:	ldr	r3, [r4, #4]
   1613c:	lsl	r5, r5, #1
   16140:	add	r2, r6, #4
   16144:	strh	r2, [r3, r5]
   16148:	ldrh	r3, [r4, #8]
   1614c:	cmp	r3, r7
   16150:	addls	r7, r7, #1
   16154:	strhls	r7, [r4, #8]
   16158:	ldr	r0, [r4, #16]
   1615c:	add	r0, r0, r6
   16160:	pop	{r4, r5, r6, r7, r8, pc}
   16164:	ldr	r3, [pc, #92]	; 161c8 <flatcc_builder_table_add@@Base+0x124>
   16168:	ldr	r2, [pc, #92]	; 161cc <flatcc_builder_table_add@@Base+0x128>
   1616c:	ldr	r1, [pc, #92]	; 161d0 <flatcc_builder_table_add@@Base+0x12c>
   16170:	ldr	r0, [pc, #92]	; 161d4 <flatcc_builder_table_add@@Base+0x130>
   16174:	bl	12084 <__assert_fail@plt>
   16178:	ldr	r3, [pc, #72]	; 161c8 <flatcc_builder_table_add@@Base+0x124>
   1617c:	ldr	r2, [pc, #84]	; 161d8 <flatcc_builder_table_add@@Base+0x134>
   16180:	ldr	r1, [pc, #72]	; 161d0 <flatcc_builder_table_add@@Base+0x12c>
   16184:	ldr	r0, [pc, #80]	; 161dc <flatcc_builder_table_add@@Base+0x138>
   16188:	bl	12084 <__assert_fail@plt>
   1618c:	ldr	r3, [pc, #52]	; 161c8 <flatcc_builder_table_add@@Base+0x124>
   16190:	ldr	r2, [pc, #72]	; 161e0 <flatcc_builder_table_add@@Base+0x13c>
   16194:	ldr	r1, [pc, #52]	; 161d0 <flatcc_builder_table_add@@Base+0x12c>
   16198:	ldr	r0, [pc, #68]	; 161e4 <flatcc_builder_table_add@@Base+0x140>
   1619c:	bl	12084 <__assert_fail@plt>
   161a0:	ldr	r2, [pc, #64]	; 161e8 <flatcc_builder_table_add@@Base+0x144>
   161a4:	add	r1, r1, #1
   161a8:	mov	r0, r4
   161ac:	bl	128c8 <main@@Base+0x18>
   161b0:	cmp	r0, #0
   161b4:	beq	16134 <flatcc_builder_table_add@@Base+0x90>
   161b8:	mov	r0, #0
   161bc:	pop	{r4, r5, r6, r7, r8, pc}
   161c0:	strdeq	r7, [r0], -ip
   161c4:			; <UNDEFINED> instruction: 0x9e3779b1
   161c8:	andeq	r7, r1, r0, lsr r9
   161cc:	andeq	r0, r0, sp, ror #13
   161d0:	andeq	r7, r1, ip, lsl #20
   161d4:	ldrdeq	r7, [r1], -r0
   161d8:	andeq	r0, r0, lr, ror #13
   161dc:	andeq	r7, r1, r8, ror #26
   161e0:	strdeq	r0, [r0], -r8
   161e4:	andeq	r7, r1, r0, ror #20
   161e8:	strdeq	pc, [r0], -ip

000161ec <flatcc_builder_table_edit@@Base>:
   161ec:	ldr	r3, [r0, #32]
   161f0:	ldrh	r3, [r3, #14]
   161f4:	cmp	r3, #3
   161f8:	bne	16210 <flatcc_builder_table_edit@@Base+0x24>
   161fc:	ldr	r3, [r0, #20]
   16200:	sub	r1, r3, r1
   16204:	ldr	r0, [r0, #16]
   16208:	add	r0, r0, r1
   1620c:	bx	lr
   16210:	push	{r4, lr}
   16214:	ldr	r3, [pc, #12]	; 16228 <flatcc_builder_table_edit@@Base+0x3c>
   16218:	ldr	r2, [pc, #12]	; 1622c <flatcc_builder_table_edit@@Base+0x40>
   1621c:	ldr	r1, [pc, #12]	; 16230 <flatcc_builder_table_edit@@Base+0x44>
   16220:	ldr	r0, [pc, #12]	; 16234 <flatcc_builder_table_edit@@Base+0x48>
   16224:	bl	12084 <__assert_fail@plt>
   16228:	andeq	r7, r1, ip, asr #18
   1622c:	andeq	r0, r0, r2, lsl #14
   16230:	andeq	r7, r1, ip, lsl #20
   16234:	ldrdeq	r7, [r1], -r0

00016238 <flatcc_builder_table_add_copy@@Base>:
   16238:	push	{r4, r5, r6, lr}
   1623c:	mov	r6, r2
   16240:	mov	r5, r3
   16244:	ldrh	r3, [sp, #16]
   16248:	mov	r2, r5
   1624c:	bl	160a4 <flatcc_builder_table_add@@Base>
   16250:	subs	r4, r0, #0
   16254:	beq	16268 <flatcc_builder_table_add_copy@@Base+0x30>
   16258:	mov	r2, r5
   1625c:	mov	r1, r6
   16260:	mov	r0, r4
   16264:	bl	11fd0 <memcpy@plt>
   16268:	mov	r0, r4
   1626c:	pop	{r4, r5, r6, pc}

00016270 <flatcc_builder_table_add_offset@@Base>:
   16270:	push	{r4, r5, r6, r7, r8, lr}
   16274:	ldr	r3, [r0, #32]
   16278:	ldrh	r3, [r3, #14]
   1627c:	cmp	r3, #3
   16280:	bne	16330 <flatcc_builder_table_add_offset@@Base+0xc0>
   16284:	mov	r4, r0
   16288:	mov	r5, r1
   1628c:	ldr	r3, [pc, #240]	; 16384 <flatcc_builder_table_add_offset@@Base+0x114>
   16290:	cmp	r1, r3
   16294:	bhi	16344 <flatcc_builder_table_add_offset@@Base+0xd4>
   16298:	ldr	r2, [r0, #4]
   1629c:	lsl	r3, r1, #1
   162a0:	ldrh	r3, [r2, r3]
   162a4:	cmp	r3, #0
   162a8:	bne	16358 <flatcc_builder_table_add_offset@@Base+0xe8>
   162ac:	ldr	r3, [r0, #12]
   162b0:	eor	r3, r3, r1
   162b4:	ldr	r2, [pc, #204]	; 16388 <flatcc_builder_table_add_offset@@Base+0x118>
   162b8:	mul	r3, r2, r3
   162bc:	eor	r3, r3, #4
   162c0:	mul	r3, r2, r3
   162c4:	str	r3, [r0, #12]
   162c8:	uxth	r7, r1
   162cc:	ldr	r6, [r0, #20]
   162d0:	add	r6, r6, #3
   162d4:	bic	r6, r6, #3
   162d8:	add	r1, r6, #4
   162dc:	str	r1, [r0, #20]
   162e0:	ldr	r3, [r0, #24]
   162e4:	cmp	r1, r3
   162e8:	bhi	1636c <flatcc_builder_table_add_offset@@Base+0xfc>
   162ec:	uxth	r2, r6
   162f0:	uxth	r5, r5
   162f4:	ldr	r3, [r4, #4]
   162f8:	lsl	r5, r5, #1
   162fc:	add	r1, r2, #4
   16300:	strh	r1, [r3, r5]
   16304:	ldrh	r3, [r4, #8]
   16308:	cmp	r3, r7
   1630c:	addls	r7, r7, #1
   16310:	strhls	r7, [r4, #8]
   16314:	ldr	r3, [r4]
   16318:	add	r1, r3, #2
   1631c:	str	r1, [r4]
   16320:	strh	r2, [r3]
   16324:	ldr	r0, [r4, #16]
   16328:	add	r0, r0, r6
   1632c:	pop	{r4, r5, r6, r7, r8, pc}
   16330:	ldr	r3, [pc, #84]	; 1638c <flatcc_builder_table_add_offset@@Base+0x11c>
   16334:	ldr	r2, [pc, #84]	; 16390 <flatcc_builder_table_add_offset@@Base+0x120>
   16338:	ldr	r1, [pc, #84]	; 16394 <flatcc_builder_table_add_offset@@Base+0x124>
   1633c:	ldr	r0, [pc, #84]	; 16398 <flatcc_builder_table_add_offset@@Base+0x128>
   16340:	bl	12084 <__assert_fail@plt>
   16344:	ldr	r3, [pc, #64]	; 1638c <flatcc_builder_table_add_offset@@Base+0x11c>
   16348:	ldr	r2, [pc, #76]	; 1639c <flatcc_builder_table_add_offset@@Base+0x12c>
   1634c:	ldr	r1, [pc, #64]	; 16394 <flatcc_builder_table_add_offset@@Base+0x124>
   16350:	ldr	r0, [pc, #72]	; 163a0 <flatcc_builder_table_add_offset@@Base+0x130>
   16354:	bl	12084 <__assert_fail@plt>
   16358:	ldr	r3, [pc, #44]	; 1638c <flatcc_builder_table_add_offset@@Base+0x11c>
   1635c:	ldr	r2, [pc, #64]	; 163a4 <flatcc_builder_table_add_offset@@Base+0x134>
   16360:	ldr	r1, [pc, #44]	; 16394 <flatcc_builder_table_add_offset@@Base+0x124>
   16364:	ldr	r0, [pc, #60]	; 163a8 <flatcc_builder_table_add_offset@@Base+0x138>
   16368:	bl	12084 <__assert_fail@plt>
   1636c:	ldr	r2, [pc, #56]	; 163ac <flatcc_builder_table_add_offset@@Base+0x13c>
   16370:	bl	128c8 <main@@Base+0x18>
   16374:	cmp	r0, #0
   16378:	beq	162ec <flatcc_builder_table_add_offset@@Base+0x7c>
   1637c:	mov	r0, #0
   16380:	pop	{r4, r5, r6, r7, r8, pc}
   16384:	strdeq	r7, [r0], -ip
   16388:			; <UNDEFINED> instruction: 0x9e3779b1
   1638c:	andeq	r7, r1, r8, ror #18
   16390:	andeq	r0, r0, r3, lsl r7
   16394:	andeq	r7, r1, ip, lsl #20
   16398:	ldrdeq	r7, [r1], -r0
   1639c:	andeq	r0, r0, r4, lsl r7
   163a0:	andeq	r7, r1, r8, ror #26
   163a4:	andeq	r0, r0, fp, lsl r7
   163a8:	andeq	r7, r1, r0, ror #20
   163ac:	strdeq	pc, [r0], -ip

000163b0 <flatcc_builder_table_add_union@@Base>:
   163b0:	push	{r4, r5, r6, r7, lr}
   163b4:	sub	sp, sp, #12
   163b8:	mov	r5, r1
   163bc:	add	r1, sp, #8
   163c0:	stmdb	r1, {r2, r3}
   163c4:	ldr	r3, [r0, #32]
   163c8:	ldrh	r3, [r3, #14]
   163cc:	cmp	r3, #3
   163d0:	bne	16440 <flatcc_builder_table_add_union@@Base+0x90>
   163d4:	mov	r4, r0
   163d8:	ldrb	r7, [sp]
   163dc:	ldr	r6, [sp, #4]
   163e0:	adds	r3, r6, #0
   163e4:	movne	r3, #1
   163e8:	cmp	r7, #0
   163ec:	movne	r3, #0
   163f0:	cmp	r3, #0
   163f4:	bne	16454 <flatcc_builder_table_add_union@@Base+0xa4>
   163f8:	cmp	r6, #0
   163fc:	beq	16414 <flatcc_builder_table_add_union@@Base+0x64>
   16400:	mov	r1, r5
   16404:	bl	16270 <flatcc_builder_table_add_offset@@Base>
   16408:	cmp	r0, #0
   1640c:	strne	r6, [r0]
   16410:	beq	16468 <flatcc_builder_table_add_union@@Base+0xb8>
   16414:	mov	r3, #1
   16418:	mov	r2, r3
   1641c:	sub	r1, r5, #1
   16420:	mov	r0, r4
   16424:	bl	160a4 <flatcc_builder_table_add@@Base>
   16428:	cmp	r0, #0
   1642c:	beq	1647c <flatcc_builder_table_add_union@@Base+0xcc>
   16430:	strb	r7, [r0]
   16434:	mov	r0, #0
   16438:	add	sp, sp, #12
   1643c:	pop	{r4, r5, r6, r7, pc}
   16440:	ldr	r3, [pc, #72]	; 16490 <flatcc_builder_table_add_union@@Base+0xe0>
   16444:	ldr	r2, [pc, #72]	; 16494 <flatcc_builder_table_add_union@@Base+0xe4>
   16448:	ldr	r1, [pc, #72]	; 16498 <flatcc_builder_table_add_union@@Base+0xe8>
   1644c:	ldr	r0, [pc, #72]	; 1649c <flatcc_builder_table_add_union@@Base+0xec>
   16450:	bl	12084 <__assert_fail@plt>
   16454:	ldr	r3, [pc, #52]	; 16490 <flatcc_builder_table_add_union@@Base+0xe0>
   16458:	ldr	r2, [pc, #64]	; 164a0 <flatcc_builder_table_add_union@@Base+0xf0>
   1645c:	ldr	r1, [pc, #52]	; 16498 <flatcc_builder_table_add_union@@Base+0xe8>
   16460:	ldr	r0, [pc, #60]	; 164a4 <flatcc_builder_table_add_union@@Base+0xf4>
   16464:	bl	12084 <__assert_fail@plt>
   16468:	ldr	r3, [pc, #32]	; 16490 <flatcc_builder_table_add_union@@Base+0xe0>
   1646c:	ldr	r2, [pc, #52]	; 164a8 <flatcc_builder_table_add_union@@Base+0xf8>
   16470:	ldr	r1, [pc, #32]	; 16498 <flatcc_builder_table_add_union@@Base+0xe8>
   16474:	ldr	r0, [pc, #48]	; 164ac <flatcc_builder_table_add_union@@Base+0xfc>
   16478:	bl	12084 <__assert_fail@plt>
   1647c:	ldr	r3, [pc, #12]	; 16490 <flatcc_builder_table_add_union@@Base+0xe0>
   16480:	ldr	r2, [pc, #40]	; 164b0 <flatcc_builder_table_add_union@@Base+0x100>
   16484:	ldr	r1, [pc, #12]	; 16498 <flatcc_builder_table_add_union@@Base+0xe8>
   16488:	ldr	r0, [pc, #36]	; 164b4 <flatcc_builder_table_add_union@@Base+0x104>
   1648c:	bl	12084 <__assert_fail@plt>
   16490:	andeq	r7, r1, r8, lsl #19
   16494:	andeq	r0, r0, lr, ror #11
   16498:	andeq	r7, r1, ip, lsl #20
   1649c:	ldrdeq	r7, [r1], -r0
   164a0:	andeq	r0, r0, pc, ror #11
   164a4:	andeq	r7, r1, ip, lsr #27
   164a8:	strdeq	r0, [r0], -r2
   164ac:	ldrdeq	r7, [r1], -r0
   164b0:	strdeq	r0, [r0], -r6
   164b4:	ldrdeq	r7, [r1], -ip

000164b8 <flatcc_builder_table_add_union_vector@@Base>:
   164b8:	push	{r4, r5, r6, r7, lr}
   164bc:	sub	sp, sp, #12
   164c0:	mov	r7, r1
   164c4:	add	r1, sp, #8
   164c8:	stmdb	r1, {r2, r3}
   164cc:	ldr	r4, [sp]
   164d0:	ldr	r6, [sp, #4]
   164d4:	ldr	r3, [r0, #32]
   164d8:	ldrh	r3, [r3, #14]
   164dc:	cmp	r3, #3
   164e0:	bne	1651c <flatcc_builder_table_add_union_vector@@Base+0x64>
   164e4:	mov	r5, r0
   164e8:	clz	r3, r6
   164ec:	lsr	r3, r3, #5
   164f0:	clz	r2, r4
   164f4:	lsr	r2, r2, #5
   164f8:	cmp	r2, r3
   164fc:	beq	16544 <flatcc_builder_table_add_union_vector@@Base+0x8c>
   16500:	adds	r4, r4, #0
   16504:	movne	r4, #1
   16508:	cmp	r4, r3
   1650c:	mvnne	r0, #0
   16510:	beq	16530 <flatcc_builder_table_add_union_vector@@Base+0x78>
   16514:	add	sp, sp, #12
   16518:	pop	{r4, r5, r6, r7, pc}
   1651c:	ldr	r3, [pc, #136]	; 165ac <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16520:	mov	r2, #1536	; 0x600
   16524:	ldr	r1, [pc, #132]	; 165b0 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16528:	ldr	r0, [pc, #132]	; 165b4 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   1652c:	bl	12084 <__assert_fail@plt>
   16530:	ldr	r3, [pc, #116]	; 165ac <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16534:	ldr	r2, [pc, #124]	; 165b8 <flatcc_builder_table_add_union_vector@@Base+0x100>
   16538:	ldr	r1, [pc, #112]	; 165b0 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   1653c:	ldr	r0, [pc, #120]	; 165bc <flatcc_builder_table_add_union_vector@@Base+0x104>
   16540:	bl	12084 <__assert_fail@plt>
   16544:	cmp	r4, #0
   16548:	moveq	r0, #0
   1654c:	beq	16514 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16550:	sub	r1, r7, #1
   16554:	mov	r0, r5
   16558:	bl	16270 <flatcc_builder_table_add_offset@@Base>
   1655c:	cmp	r0, #0
   16560:	beq	16598 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16564:	str	r4, [r0]
   16568:	mov	r1, r7
   1656c:	mov	r0, r5
   16570:	bl	16270 <flatcc_builder_table_add_offset@@Base>
   16574:	cmp	r0, #0
   16578:	strne	r6, [r0]
   1657c:	movne	r0, #0
   16580:	bne	16514 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16584:	ldr	r3, [pc, #32]	; 165ac <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16588:	ldr	r2, [pc, #48]	; 165c0 <flatcc_builder_table_add_union_vector@@Base+0x108>
   1658c:	ldr	r1, [pc, #28]	; 165b0 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16590:	ldr	r0, [pc, #44]	; 165c4 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16594:	bl	12084 <__assert_fail@plt>
   16598:	ldr	r3, [pc, #12]	; 165ac <flatcc_builder_table_add_union_vector@@Base+0xf4>
   1659c:	ldr	r2, [pc, #36]	; 165c8 <flatcc_builder_table_add_union_vector@@Base+0x110>
   165a0:	ldr	r1, [pc, #8]	; 165b0 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   165a4:	ldr	r0, [pc, #24]	; 165c4 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   165a8:	bl	12084 <__assert_fail@plt>
   165ac:	andeq	r7, r1, r8, lsr #19
   165b0:	andeq	r7, r1, ip, lsl #20
   165b4:	ldrdeq	r7, [r1], -r0
   165b8:	andeq	r0, r0, r1, lsl #12
   165bc:	andeq	r7, r1, r8, ror #27
   165c0:	andeq	r0, r0, r8, lsl #12
   165c4:	ldrdeq	r7, [r1], -r0
   165c8:	andeq	r0, r0, r4, lsl #12

000165cc <flatcc_builder_push_buffer_alignment@@Base>:
   165cc:	mov	r3, r0
   165d0:	ldrh	r0, [r0, #128]	; 0x80
   165d4:	mov	r2, #4
   165d8:	strh	r2, [r3, #128]	; 0x80
   165dc:	bx	lr

000165e0 <flatcc_builder_pop_buffer_alignment@@Base>:
   165e0:	ldrh	r3, [r0, #128]	; 0x80
   165e4:	cmp	r3, r1
   165e8:	strhcc	r1, [r0, #128]	; 0x80
   165ec:	bx	lr

000165f0 <flatcc_builder_get_buffer_alignment@@Base>:
   165f0:	ldrh	r0, [r0, #128]	; 0x80
   165f4:	bx	lr

000165f8 <flatcc_builder_set_vtable_clustering@@Base>:
   165f8:	clz	r1, r1
   165fc:	lsr	r1, r1, #5
   16600:	str	r1, [r0, #180]	; 0xb4
   16604:	bx	lr

00016608 <flatcc_builder_set_block_align@@Base>:
   16608:	strh	r1, [r0, #132]	; 0x84
   1660c:	bx	lr

00016610 <flatcc_builder_get_level@@Base>:
   16610:	ldr	r0, [r0, #156]	; 0x9c
   16614:	bx	lr

00016618 <flatcc_builder_set_max_level@@Base>:
   16618:	str	r1, [r0, #176]	; 0xb0
   1661c:	ldr	r3, [r0, #160]	; 0xa0
   16620:	cmp	r1, r3
   16624:	strgt	r1, [r0, #160]	; 0xa0
   16628:	bx	lr

0001662c <flatcc_builder_get_buffer_size@@Base>:
   1662c:	ldr	r2, [r0, #140]	; 0x8c
   16630:	ldr	r0, [r0, #136]	; 0x88
   16634:	sub	r0, r2, r0
   16638:	bx	lr

0001663c <flatcc_builder_get_buffer_start@@Base>:
   1663c:	ldr	r0, [r0, #136]	; 0x88
   16640:	bx	lr

00016644 <flatcc_builder_get_buffer_end@@Base>:
   16644:	ldr	r0, [r0, #140]	; 0x8c
   16648:	bx	lr

0001664c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1664c:	str	r1, [r0, #172]	; 0xac
   16650:	bx	lr

00016654 <flatcc_builder_set_identifier@@Base>:
   16654:	ldr	r3, [pc, #16]	; 1666c <flatcc_builder_set_identifier@@Base+0x18>
   16658:	cmp	r1, #0
   1665c:	moveq	r1, r3
   16660:	ldr	r3, [r1]
   16664:	str	r3, [r0, #168]	; 0xa8
   16668:	bx	lr
   1666c:			; <UNDEFINED> instruction: 0x000172bc

00016670 <flatcc_builder_get_type@@Base>:
   16670:	ldr	r3, [r0, #32]
   16674:	cmp	r3, #0
   16678:	ldrhne	r0, [r3, #14]
   1667c:	moveq	r0, #0
   16680:	bx	lr

00016684 <flatcc_builder_get_type_at@@Base>:
   16684:	cmp	r1, #0
   16688:	ble	166b0 <flatcc_builder_get_type_at@@Base+0x2c>
   1668c:	ldr	r3, [r0, #156]	; 0x9c
   16690:	cmp	r1, r3
   16694:	bgt	166b8 <flatcc_builder_get_type_at@@Base+0x34>
   16698:	sub	r1, r1, r3
   1669c:	ldr	r3, [r0, #32]
   166a0:	add	r1, r1, r1, lsl #3
   166a4:	add	r1, r3, r1, lsl #2
   166a8:	ldrh	r0, [r1, #14]
   166ac:	bx	lr
   166b0:	mov	r0, #0
   166b4:	bx	lr
   166b8:	mov	r0, #0
   166bc:	bx	lr

000166c0 <flatcc_builder_get_direct_buffer@@Base>:
   166c0:	ldr	r3, [r0, #184]	; 0xb8
   166c4:	cmp	r3, #0
   166c8:	beq	16704 <flatcc_builder_get_direct_buffer@@Base+0x44>
   166cc:	ldr	r2, [r0, #188]	; 0xbc
   166d0:	ldr	r3, [r0, #192]	; 0xc0
   166d4:	cmp	r2, r3
   166d8:	beq	166f0 <flatcc_builder_get_direct_buffer@@Base+0x30>
   166dc:	cmp	r1, #0
   166e0:	beq	16718 <flatcc_builder_get_direct_buffer@@Base+0x58>
   166e4:	mov	r0, #0
   166e8:	str	r0, [r1]
   166ec:	bx	lr
   166f0:	cmp	r1, #0
   166f4:	ldrne	r3, [r0, #212]	; 0xd4
   166f8:	strne	r3, [r1]
   166fc:	ldr	r0, [r0, #196]	; 0xc4
   16700:	bx	lr
   16704:	cmp	r1, #0
   16708:	beq	16720 <flatcc_builder_get_direct_buffer@@Base+0x60>
   1670c:	mov	r0, #0
   16710:	str	r0, [r1]
   16714:	bx	lr
   16718:	mov	r0, #0
   1671c:	bx	lr
   16720:	mov	r0, #0
   16724:	bx	lr

00016728 <flatcc_builder_copy_buffer@@Base>:
   16728:	ldr	r3, [r0, #184]	; 0xb8
   1672c:	cmp	r3, #0
   16730:	beq	1675c <flatcc_builder_copy_buffer@@Base+0x34>
   16734:	push	{r4, lr}
   16738:	add	r0, r0, #188	; 0xbc
   1673c:	bl	16e58 <flatcc_emitter_copy_buffer@@Base>
   16740:	cmp	r0, #0
   16744:	popne	{r4, pc}
   16748:	ldr	r3, [pc, #20]	; 16764 <flatcc_builder_copy_buffer@@Base+0x3c>
   1674c:	ldr	r2, [pc, #20]	; 16768 <flatcc_builder_copy_buffer@@Base+0x40>
   16750:	ldr	r1, [pc, #20]	; 1676c <flatcc_builder_copy_buffer@@Base+0x44>
   16754:	ldr	r0, [pc, #20]	; 16770 <flatcc_builder_copy_buffer@@Base+0x48>
   16758:	bl	12084 <__assert_fail@plt>
   1675c:	mov	r0, #0
   16760:	bx	lr
   16764:	ldrdeq	r7, [r1], -r0
   16768:	andeq	r0, r0, r6, lsl #15
   1676c:	andeq	r7, r1, ip, lsl #20
   16770:	andeq	r7, r1, r0, lsl lr

00016774 <flatcc_builder_finalize_buffer@@Base>:
   16774:	push	{r4, r5, r6, lr}
   16778:	mov	r5, r0
   1677c:	ldr	r4, [r0, #140]	; 0x8c
   16780:	ldr	r3, [r0, #136]	; 0x88
   16784:	sub	r4, r4, r3
   16788:	cmp	r1, #0
   1678c:	strne	r4, [r1]
   16790:	mov	r0, r4
   16794:	bl	1200c <malloc@plt>
   16798:	subs	r6, r0, #0
   1679c:	beq	167c0 <flatcc_builder_finalize_buffer@@Base+0x4c>
   167a0:	mov	r2, r4
   167a4:	mov	r1, r6
   167a8:	mov	r0, r5
   167ac:	bl	16728 <flatcc_builder_copy_buffer@@Base>
   167b0:	cmp	r0, #0
   167b4:	beq	167d4 <flatcc_builder_finalize_buffer@@Base+0x60>
   167b8:	mov	r0, r6
   167bc:	pop	{r4, r5, r6, pc}
   167c0:	ldr	r3, [pc, #32]	; 167e8 <flatcc_builder_finalize_buffer@@Base+0x74>
   167c4:	ldr	r2, [pc, #32]	; 167ec <flatcc_builder_finalize_buffer@@Base+0x78>
   167c8:	ldr	r1, [pc, #32]	; 167f0 <flatcc_builder_finalize_buffer@@Base+0x7c>
   167cc:	ldr	r0, [pc, #32]	; 167f4 <flatcc_builder_finalize_buffer@@Base+0x80>
   167d0:	bl	12084 <__assert_fail@plt>
   167d4:	ldr	r3, [pc, #12]	; 167e8 <flatcc_builder_finalize_buffer@@Base+0x74>
   167d8:	ldr	r2, [pc, #24]	; 167f8 <flatcc_builder_finalize_buffer@@Base+0x84>
   167dc:	ldr	r1, [pc, #12]	; 167f0 <flatcc_builder_finalize_buffer@@Base+0x7c>
   167e0:	ldr	r0, [pc, #12]	; 167f4 <flatcc_builder_finalize_buffer@@Base+0x80>
   167e4:	bl	12084 <__assert_fail@plt>
   167e8:	andeq	r7, r1, ip, ror #19
   167ec:	muleq	r0, r8, r7
   167f0:	andeq	r7, r1, ip, lsl #20
   167f4:	andeq	r7, r1, r0, ror #20
   167f8:	muleq	r0, ip, r7

000167fc <flatcc_builder_finalize_aligned_buffer@@Base>:
   167fc:	push	{r4, r5, r6, r7, lr}
   16800:	sub	sp, sp, #12
   16804:	mov	r7, r0
   16808:	ldr	r4, [r0, #140]	; 0x8c
   1680c:	ldr	r3, [r0, #136]	; 0x88
   16810:	sub	r3, r4, r3
   16814:	subs	r6, r1, #0
   16818:	strne	r3, [r6]
   1681c:	ldrh	r1, [r0, #128]	; 0x80
   16820:	sub	r4, r1, #1
   16824:	add	r4, r4, r3
   16828:	rsb	r3, r1, #0
   1682c:	and	r4, r4, r3
   16830:	add	r0, sp, #8
   16834:	mov	r3, #0
   16838:	str	r3, [r0, #-4]!
   1683c:	mov	r2, r4
   16840:	cmp	r1, #4
   16844:	movcc	r1, #4
   16848:	bl	12048 <posix_memalign@plt>
   1684c:	cmp	r0, #0
   16850:	beq	16874 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   16854:	ldr	r0, [sp, #4]
   16858:	cmp	r0, #0
   1685c:	beq	16864 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   16860:	bl	11fc4 <free@plt>
   16864:	cmp	r6, #0
   16868:	mov	r5, #0
   1686c:	strne	r5, [r6]
   16870:	b	16898 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   16874:	ldr	r5, [sp, #4]
   16878:	cmp	r5, #0
   1687c:	beq	16864 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   16880:	mov	r2, r4
   16884:	mov	r1, r5
   16888:	mov	r0, r7
   1688c:	bl	16728 <flatcc_builder_copy_buffer@@Base>
   16890:	cmp	r0, #0
   16894:	beq	168a4 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   16898:	mov	r0, r5
   1689c:	add	sp, sp, #12
   168a0:	pop	{r4, r5, r6, r7, pc}
   168a4:	mov	r0, r5
   168a8:	bl	11fc4 <free@plt>
   168ac:	b	16864 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>

000168b0 <flatcc_builder_aligned_alloc@@Base>:
   168b0:	push	{lr}		; (str lr, [sp, #-4]!)
   168b4:	sub	sp, sp, #12
   168b8:	add	r3, sp, #8
   168bc:	mov	r2, #0
   168c0:	str	r2, [r3, #-4]!
   168c4:	mov	r2, r1
   168c8:	cmp	r0, #4
   168cc:	movcs	r1, r0
   168d0:	movcc	r1, #4
   168d4:	mov	r0, r3
   168d8:	bl	12048 <posix_memalign@plt>
   168dc:	cmp	r0, #0
   168e0:	beq	168fc <flatcc_builder_aligned_alloc@@Base+0x4c>
   168e4:	ldr	r0, [sp, #4]
   168e8:	cmp	r0, #0
   168ec:	beq	168fc <flatcc_builder_aligned_alloc@@Base+0x4c>
   168f0:	bl	11fc4 <free@plt>
   168f4:	mov	r3, #0
   168f8:	str	r3, [sp, #4]
   168fc:	ldr	r0, [sp, #4]
   16900:	add	sp, sp, #12
   16904:	pop	{pc}		; (ldr pc, [sp], #4)

00016908 <flatcc_builder_aligned_free@@Base>:
   16908:	push	{r4, lr}
   1690c:	bl	11fc4 <free@plt>
   16910:	pop	{r4, pc}

00016914 <flatcc_builder_get_emit_context@@Base>:
   16914:	ldr	r0, [r0, #36]	; 0x24
   16918:	bx	lr

0001691c <flatcc_emitter_recycle_page@@Base>:
   1691c:	ldr	r3, [r0]
   16920:	cmp	r3, r1
   16924:	beq	16974 <flatcc_emitter_recycle_page@@Base+0x58>
   16928:	ldr	r3, [r0, #4]
   1692c:	cmp	r1, r3
   16930:	beq	1697c <flatcc_emitter_recycle_page@@Base+0x60>
   16934:	ldr	r3, [r1, #2944]	; 0xb80
   16938:	ldr	r2, [r1, #2948]	; 0xb84
   1693c:	str	r2, [r3, #2948]	; 0xb84
   16940:	ldr	r3, [r1, #2948]	; 0xb84
   16944:	ldr	r2, [r1, #2944]	; 0xb80
   16948:	str	r2, [r3, #2944]	; 0xb80
   1694c:	ldr	r3, [r0]
   16950:	ldr	r3, [r3, #2948]	; 0xb84
   16954:	str	r3, [r1, #2948]	; 0xb84
   16958:	ldr	r2, [r0]
   1695c:	str	r2, [r1, #2944]	; 0xb80
   16960:	str	r1, [r3, #2944]	; 0xb80
   16964:	ldr	r3, [r1, #2944]	; 0xb80
   16968:	str	r1, [r3, #2948]	; 0xb84
   1696c:	mov	r0, #0
   16970:	bx	lr
   16974:	mvn	r0, #0
   16978:	bx	lr
   1697c:	mvn	r0, #0
   16980:	bx	lr

00016984 <flatcc_emitter_reset@@Base>:
   16984:	ldr	r3, [r0]
   16988:	cmp	r3, #0
   1698c:	bxeq	lr
   16990:	str	r3, [r0, #4]
   16994:	add	r2, r3, #1472	; 0x5c0
   16998:	str	r2, [r0, #8]
   1699c:	str	r2, [r0, #16]
   169a0:	mov	r2, #1472	; 0x5c0
   169a4:	str	r2, [r0, #12]
   169a8:	str	r2, [r0, #20]
   169ac:	sub	r2, r2, #2944	; 0xb80
   169b0:	str	r2, [r3, #2952]	; 0xb88
   169b4:	ldr	r3, [r0, #32]
   169b8:	cmp	r3, #0
   169bc:	ldreq	r3, [r0, #24]
   169c0:	streq	r3, [r0, #32]
   169c4:	ldr	r3, [r0, #32]
   169c8:	add	r2, r3, r3, lsl #1
   169cc:	ldr	r3, [r0, #24]
   169d0:	lsr	r3, r3, #2
   169d4:	add	r3, r3, r2, lsr #2
   169d8:	str	r3, [r0, #32]
   169dc:	mov	r2, #0
   169e0:	str	r2, [r0, #24]
   169e4:	ldr	r2, [r0, #28]
   169e8:	cmp	r2, r3, lsl #1
   169ec:	bxls	lr
   169f0:	push	{r4, lr}
   169f4:	mov	r4, r0
   169f8:	ldr	r3, [r0, #4]
   169fc:	ldr	r0, [r3, #2944]	; 0xb80
   16a00:	ldr	r2, [r4]
   16a04:	cmp	r0, r2
   16a08:	popeq	{r4, pc}
   16a0c:	ldr	r2, [r0, #2944]	; 0xb80
   16a10:	str	r2, [r3, #2944]	; 0xb80
   16a14:	ldr	r3, [r0, #2944]	; 0xb80
   16a18:	ldr	r2, [r4, #4]
   16a1c:	str	r2, [r3, #2948]	; 0xb84
   16a20:	bl	11fc4 <free@plt>
   16a24:	ldr	r3, [r4, #28]
   16a28:	sub	r3, r3, #2944	; 0xb80
   16a2c:	str	r3, [r4, #28]
   16a30:	ldr	r2, [r4, #32]
   16a34:	cmp	r3, r2, lsl #1
   16a38:	popls	{r4, pc}
   16a3c:	ldr	r3, [r4, #4]
   16a40:	ldr	r0, [r3, #2944]	; 0xb80
   16a44:	ldr	r2, [r4]
   16a48:	cmp	r0, r2
   16a4c:	bne	16a0c <flatcc_emitter_reset@@Base+0x88>
   16a50:	pop	{r4, pc}

00016a54 <flatcc_emitter_clear@@Base>:
   16a54:	ldr	r3, [r0]
   16a58:	cmp	r3, #0
   16a5c:	bxeq	lr
   16a60:	push	{r4, r5, r6, lr}
   16a64:	mov	r5, r0
   16a68:	ldr	r2, [r3, #2948]	; 0xb84
   16a6c:	mov	r1, #0
   16a70:	str	r1, [r2, #2944]	; 0xb80
   16a74:	ldr	r4, [r3, #2944]	; 0xb80
   16a78:	cmp	r4, r1
   16a7c:	bne	16a8c <flatcc_emitter_clear@@Base+0x38>
   16a80:	mov	r4, r3
   16a84:	b	16aa0 <flatcc_emitter_clear@@Base+0x4c>
   16a88:	mov	r4, r3
   16a8c:	ldr	r0, [r4, #2948]	; 0xb84
   16a90:	bl	11fc4 <free@plt>
   16a94:	ldr	r3, [r4, #2944]	; 0xb80
   16a98:	cmp	r3, #0
   16a9c:	bne	16a88 <flatcc_emitter_clear@@Base+0x34>
   16aa0:	mov	r0, r4
   16aa4:	bl	11fc4 <free@plt>
   16aa8:	mov	r2, #36	; 0x24
   16aac:	mov	r1, #0
   16ab0:	mov	r0, r5
   16ab4:	bl	12054 <memset@plt>
   16ab8:	pop	{r4, r5, r6, pc}

00016abc <flatcc_emitter@@Base>:
   16abc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ac0:	mov	r4, r0
   16ac4:	ldr	ip, [sp, #40]	; 0x28
   16ac8:	ldr	r0, [r0, #24]
   16acc:	add	r0, r0, ip
   16ad0:	str	r0, [r4, #24]
   16ad4:	cmp	r3, #0
   16ad8:	blt	16b04 <flatcc_emitter@@Base+0x48>
   16adc:	ldr	r3, [r4, #20]
   16ae0:	cmp	ip, r3
   16ae4:	bls	16bf0 <flatcc_emitter@@Base+0x134>
   16ae8:	cmp	r2, #0
   16aec:	addne	r7, r1, #8
   16af0:	movne	sl, r2
   16af4:	movne	fp, #2944	; 0xb80
   16af8:	bne	16da4 <flatcc_emitter@@Base+0x2e8>
   16afc:	mov	r0, r2
   16b00:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b04:	ldr	r3, [r4, #12]
   16b08:	cmp	ip, r3
   16b0c:	bhi	16b30 <flatcc_emitter@@Base+0x74>
   16b10:	ldr	r5, [r4, #8]
   16b14:	sub	r5, r5, ip
   16b18:	str	r5, [r4, #8]
   16b1c:	sub	r3, r3, ip
   16b20:	str	r3, [r4, #12]
   16b24:	b	16c04 <flatcc_emitter@@Base+0x148>
   16b28:	mov	r0, r2
   16b2c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b30:	add	r7, r1, r2, lsl #3
   16b34:	mov	r8, r2
   16b38:	mov	fp, #1472	; 0x5c0
   16b3c:	mov	sl, #2944	; 0xb80
   16b40:	b	16d20 <flatcc_emitter@@Base+0x264>
   16b44:	mov	r2, r5
   16b48:	rsb	r1, r2, #0
   16b4c:	ldr	r0, [r4, #8]
   16b50:	add	r0, r0, r1
   16b54:	str	r0, [r4, #8]
   16b58:	sub	r3, r3, r2
   16b5c:	str	r3, [r4, #12]
   16b60:	add	r6, r6, r1
   16b64:	sub	r5, r5, r2
   16b68:	mov	r1, r6
   16b6c:	bl	11fd0 <memcpy@plt>
   16b70:	cmp	r5, #0
   16b74:	beq	16d18 <flatcc_emitter@@Base+0x25c>
   16b78:	ldr	r3, [r4, #12]
   16b7c:	cmp	r3, r5
   16b80:	bcs	16b44 <flatcc_emitter@@Base+0x88>
   16b84:	cmp	r3, #0
   16b88:	movne	r2, r3
   16b8c:	bne	16b48 <flatcc_emitter@@Base+0x8c>
   16b90:	ldr	r9, [r4]
   16b94:	cmp	r9, #0
   16b98:	beq	16e38 <flatcc_emitter@@Base+0x37c>
   16b9c:	ldr	r2, [r9, #2948]	; 0xb84
   16ba0:	ldr	r3, [r4, #4]
   16ba4:	cmp	r2, r3
   16ba8:	beq	16dc0 <flatcc_emitter@@Base+0x304>
   16bac:	ldr	r3, [r9, #2952]	; 0xb88
   16bb0:	sub	r3, r3, #2944	; 0xb80
   16bb4:	str	r3, [r2, #2952]	; 0xb88
   16bb8:	ldr	r3, [r4]
   16bbc:	ldr	r3, [r3, #2948]	; 0xb84
   16bc0:	str	r3, [r4]
   16bc4:	ldr	r3, [r4]
   16bc8:	add	r2, r3, #2944	; 0xb80
   16bcc:	str	r2, [r4, #8]
   16bd0:	str	sl, [r4, #12]
   16bd4:	ldr	r2, [r3, #2944]	; 0xb80
   16bd8:	ldr	r2, [r2, #2952]	; 0xb88
   16bdc:	sub	r2, r2, #2944	; 0xb80
   16be0:	str	r2, [r3, #2952]	; 0xb88
   16be4:	b	16b70 <flatcc_emitter@@Base+0xb4>
   16be8:	mov	r0, #0
   16bec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf0:	ldr	r5, [r4, #16]
   16bf4:	add	r0, r5, ip
   16bf8:	str	r0, [r4, #16]
   16bfc:	sub	r3, r3, ip
   16c00:	str	r3, [r4, #20]
   16c04:	cmp	r2, #0
   16c08:	addne	r4, r1, #8
   16c0c:	movne	r8, r2
   16c10:	beq	16b28 <flatcc_emitter@@Base+0x6c>
   16c14:	ldr	r2, [r4, #-4]
   16c18:	ldr	r1, [r4, #-8]
   16c1c:	mov	r0, r5
   16c20:	bl	11fd0 <memcpy@plt>
   16c24:	ldr	r3, [r4, #-4]
   16c28:	add	r5, r5, r3
   16c2c:	add	r4, r4, #8
   16c30:	subs	r8, r8, #1
   16c34:	bne	16c14 <flatcc_emitter@@Base+0x158>
   16c38:	mov	r0, #0
   16c3c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c40:	ldr	r0, [pc, #520]	; 16e50 <flatcc_emitter@@Base+0x394>
   16c44:	bl	1200c <malloc@plt>
   16c48:	cmp	r0, #0
   16c4c:	beq	16d08 <flatcc_emitter@@Base+0x24c>
   16c50:	ldr	r3, [r4, #28]
   16c54:	add	r3, r3, #2944	; 0xb80
   16c58:	str	r3, [r4, #28]
   16c5c:	str	r5, [r0, #2948]	; 0xb84
   16c60:	str	r9, [r0, #2944]	; 0xb80
   16c64:	str	r0, [r9, #2948]	; 0xb84
   16c68:	ldr	r3, [r4, #4]
   16c6c:	str	r0, [r3, #2944]	; 0xb80
   16c70:	str	r0, [r4, #4]
   16c74:	b	16ce8 <flatcc_emitter@@Base+0x22c>
   16c78:	mov	r5, r6
   16c7c:	mov	r2, r5
   16c80:	mov	r1, r8
   16c84:	ldr	r0, [r4, #16]
   16c88:	bl	11fd0 <memcpy@plt>
   16c8c:	sub	r6, r6, r5
   16c90:	add	r8, r8, r5
   16c94:	ldr	r3, [r4, #16]
   16c98:	add	r3, r3, r5
   16c9c:	str	r3, [r4, #16]
   16ca0:	ldr	r3, [r4, #20]
   16ca4:	sub	r5, r3, r5
   16ca8:	str	r5, [r4, #20]
   16cac:	cmp	r6, #0
   16cb0:	beq	16d98 <flatcc_emitter@@Base+0x2dc>
   16cb4:	ldr	r5, [r4, #20]
   16cb8:	cmp	r5, r6
   16cbc:	bcs	16c78 <flatcc_emitter@@Base+0x1bc>
   16cc0:	cmp	r5, #0
   16cc4:	bne	16c7c <flatcc_emitter@@Base+0x1c0>
   16cc8:	ldr	r5, [r4, #4]
   16ccc:	cmp	r5, #0
   16cd0:	beq	16d80 <flatcc_emitter@@Base+0x2c4>
   16cd4:	ldr	r9, [r5, #2944]	; 0xb80
   16cd8:	ldr	r3, [r4]
   16cdc:	cmp	r9, r3
   16ce0:	strne	r9, [r4, #4]
   16ce4:	beq	16c40 <flatcc_emitter@@Base+0x184>
   16ce8:	ldr	r3, [r4, #4]
   16cec:	str	r3, [r4, #16]
   16cf0:	str	fp, [r4, #20]
   16cf4:	ldr	r2, [r3, #2948]	; 0xb84
   16cf8:	ldr	r2, [r2, #2952]	; 0xb88
   16cfc:	add	r2, r2, #2944	; 0xb80
   16d00:	str	r2, [r3, #2952]	; 0xb88
   16d04:	b	16cac <flatcc_emitter@@Base+0x1f0>
   16d08:	mvn	r0, #0
   16d0c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d10:	mvn	r0, #0
   16d14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d18:	sub	r7, r7, #8
   16d1c:	sub	r8, r8, #1
   16d20:	cmp	r8, #0
   16d24:	beq	16be8 <flatcc_emitter@@Base+0x12c>
   16d28:	ldr	r5, [r7, #-4]
   16d2c:	ldr	r6, [r7, #-8]
   16d30:	add	r6, r6, r5
   16d34:	cmp	r5, #0
   16d38:	bne	16b78 <flatcc_emitter@@Base+0xbc>
   16d3c:	b	16d18 <flatcc_emitter@@Base+0x25c>
   16d40:	ldr	r3, [r4, #28]
   16d44:	add	r3, r3, #2944	; 0xb80
   16d48:	str	r3, [r4, #28]
   16d4c:	str	r0, [r4]
   16d50:	str	r0, [r4, #4]
   16d54:	str	r0, [r0, #2944]	; 0xb80
   16d58:	str	r0, [r0, #2948]	; 0xb84
   16d5c:	add	r3, r0, #1472	; 0x5c0
   16d60:	str	r3, [r4, #8]
   16d64:	str	r3, [r4, #16]
   16d68:	mov	r3, #1472	; 0x5c0
   16d6c:	str	r3, [r4, #12]
   16d70:	str	r3, [r4, #20]
   16d74:	sub	r3, r3, #2944	; 0xb80
   16d78:	str	r3, [r0, #2952]	; 0xb88
   16d7c:	b	16cac <flatcc_emitter@@Base+0x1f0>
   16d80:	ldr	r0, [pc, #200]	; 16e50 <flatcc_emitter@@Base+0x394>
   16d84:	bl	1200c <malloc@plt>
   16d88:	cmp	r0, #0
   16d8c:	bne	16d40 <flatcc_emitter@@Base+0x284>
   16d90:	mvn	r0, #0
   16d94:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d98:	add	r7, r7, #8
   16d9c:	subs	sl, sl, #1
   16da0:	beq	16db8 <flatcc_emitter@@Base+0x2fc>
   16da4:	ldr	r8, [r7, #-8]
   16da8:	ldr	r6, [r7, #-4]
   16dac:	cmp	r6, #0
   16db0:	bne	16cb4 <flatcc_emitter@@Base+0x1f8>
   16db4:	b	16d98 <flatcc_emitter@@Base+0x2dc>
   16db8:	mov	r0, #0
   16dbc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dc0:	ldr	r0, [pc, #136]	; 16e50 <flatcc_emitter@@Base+0x394>
   16dc4:	bl	1200c <malloc@plt>
   16dc8:	cmp	r0, #0
   16dcc:	beq	16d10 <flatcc_emitter@@Base+0x254>
   16dd0:	ldr	r3, [r4, #28]
   16dd4:	add	r3, r3, #2944	; 0xb80
   16dd8:	str	r3, [r4, #28]
   16ddc:	ldr	r3, [r4, #4]
   16de0:	str	r3, [r0, #2948]	; 0xb84
   16de4:	str	r9, [r0, #2944]	; 0xb80
   16de8:	str	r0, [r9, #2948]	; 0xb84
   16dec:	ldr	r3, [r4, #4]
   16df0:	str	r0, [r3, #2944]	; 0xb80
   16df4:	str	r0, [r4]
   16df8:	b	16bc4 <flatcc_emitter@@Base+0x108>
   16dfc:	ldr	r3, [r4, #28]
   16e00:	add	r3, r3, #2944	; 0xb80
   16e04:	str	r3, [r4, #28]
   16e08:	str	r0, [r4]
   16e0c:	str	r0, [r4, #4]
   16e10:	str	r0, [r0, #2944]	; 0xb80
   16e14:	str	r0, [r0, #2948]	; 0xb84
   16e18:	add	r3, r0, #1472	; 0x5c0
   16e1c:	str	r3, [r4, #8]
   16e20:	str	r3, [r4, #16]
   16e24:	str	fp, [r4, #12]
   16e28:	str	fp, [r4, #20]
   16e2c:	ldr	r3, [pc, #32]	; 16e54 <flatcc_emitter@@Base+0x398>
   16e30:	str	r3, [r0, #2952]	; 0xb88
   16e34:	b	16b70 <flatcc_emitter@@Base+0xb4>
   16e38:	ldr	r0, [pc, #16]	; 16e50 <flatcc_emitter@@Base+0x394>
   16e3c:	bl	1200c <malloc@plt>
   16e40:	cmp	r0, #0
   16e44:	bne	16dfc <flatcc_emitter@@Base+0x340>
   16e48:	mvn	r0, #0
   16e4c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e50:	andeq	r0, r0, ip, lsl #23
   16e54:			; <UNDEFINED> instruction: 0xfffffa40

00016e58 <flatcc_emitter_copy_buffer@@Base>:
   16e58:	push	{r4, r5, r6, r7, r8, lr}
   16e5c:	mov	r5, r1
   16e60:	ldr	r1, [r0, #24]
   16e64:	cmp	r1, r2
   16e68:	bhi	16f0c <flatcc_emitter_copy_buffer@@Base+0xb4>
   16e6c:	ldr	r3, [r0]
   16e70:	cmp	r3, #0
   16e74:	beq	16f14 <flatcc_emitter_copy_buffer@@Base+0xbc>
   16e78:	mov	r6, r0
   16e7c:	ldr	r2, [r0, #4]
   16e80:	cmp	r3, r2
   16e84:	beq	16ef8 <flatcc_emitter_copy_buffer@@Base+0xa0>
   16e88:	ldr	r4, [r0, #12]
   16e8c:	rsb	r4, r4, #2944	; 0xb80
   16e90:	mov	r2, r4
   16e94:	ldr	r1, [r0, #8]
   16e98:	mov	r0, r5
   16e9c:	bl	11fd0 <memcpy@plt>
   16ea0:	add	r5, r5, r4
   16ea4:	ldr	r3, [r6]
   16ea8:	ldr	r4, [r3, #2944]	; 0xb80
   16eac:	ldr	r1, [r6, #4]
   16eb0:	cmp	r4, r1
   16eb4:	beq	16ee0 <flatcc_emitter_copy_buffer@@Base+0x88>
   16eb8:	mov	r7, #2944	; 0xb80
   16ebc:	mov	r2, r7
   16ec0:	mov	r1, r4
   16ec4:	mov	r0, r5
   16ec8:	bl	11fd0 <memcpy@plt>
   16ecc:	add	r5, r5, #2944	; 0xb80
   16ed0:	ldr	r4, [r4, #2944]	; 0xb80
   16ed4:	ldr	r1, [r6, #4]
   16ed8:	cmp	r1, r4
   16edc:	bne	16ebc <flatcc_emitter_copy_buffer@@Base+0x64>
   16ee0:	ldr	r2, [r6, #20]
   16ee4:	rsb	r2, r2, #2944	; 0xb80
   16ee8:	mov	r0, r5
   16eec:	bl	11fd0 <memcpy@plt>
   16ef0:	mov	r0, r5
   16ef4:	pop	{r4, r5, r6, r7, r8, pc}
   16ef8:	mov	r2, r1
   16efc:	ldr	r1, [r0, #8]
   16f00:	mov	r0, r5
   16f04:	bl	11fd0 <memcpy@plt>
   16f08:	b	16ef0 <flatcc_emitter_copy_buffer@@Base+0x98>
   16f0c:	mov	r5, #0
   16f10:	b	16ef0 <flatcc_emitter_copy_buffer@@Base+0x98>
   16f14:	mov	r5, #0
   16f18:	b	16ef0 <flatcc_emitter_copy_buffer@@Base+0x98>

00016f1c <__libc_csu_init@@Base>:
   16f1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f20:	mov	r7, r0
   16f24:	ldr	r6, [pc, #72]	; 16f74 <__libc_csu_init@@Base+0x58>
   16f28:	ldr	r5, [pc, #72]	; 16f78 <__libc_csu_init@@Base+0x5c>
   16f2c:	add	r6, pc, r6
   16f30:	add	r5, pc, r5
   16f34:	sub	r6, r6, r5
   16f38:	mov	r8, r1
   16f3c:	mov	r9, r2
   16f40:	bl	11f98 <printf@plt-0x20>
   16f44:	asrs	r6, r6, #2
   16f48:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f4c:	mov	r4, #0
   16f50:	add	r4, r4, #1
   16f54:	ldr	r3, [r5], #4
   16f58:	mov	r2, r9
   16f5c:	mov	r1, r8
   16f60:	mov	r0, r7
   16f64:	blx	r3
   16f68:	cmp	r6, r4
   16f6c:	bne	16f50 <__libc_csu_init@@Base+0x34>
   16f70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f74:	ldrdeq	r0, [r1], -ip
   16f78:	ldrdeq	r0, [r1], -r4

00016f7c <__libc_csu_fini@@Base>:
   16f7c:	bx	lr

Disassembly of section .fini:

00016f80 <.fini>:
   16f80:	push	{r3, lr}
   16f84:	pop	{r3, pc}
