
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r8, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <dcgettext@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <realloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <textdomain@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <iswprint@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <fwrite@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <lseek64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <__ctype_get_mb_cur_max@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__fpending@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <mbrtowc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <error@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <malloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <__libc_start_main@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__freading@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__gmon_start__@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <getopt_long@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <__ctype_b_loc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <exit@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <bcmp@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f38 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r7, r1, ip, asr #7
   110c8:	andeq	r1, r1, ip, asr #8
   110cc:	andeq	r7, r1, ip, ror #6
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f50 <__gmon_start__@plt>
   110ec:	andeq	r7, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r9, r2, r0, lsr r1
   11118:	andeq	r9, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r9, r2, r0, lsr r1
   11150:	andeq	r9, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	r9, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	11408 <__assert_fail@plt+0x380>
   1119c:	movw	r1, #29723	; 0x741b
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10eb4 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #37216	; 0x9160
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #29753	; 0x7439
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10eb4 <dcgettext@plt>
   111dc:	mov	r1, r0
   111e0:	mov	r0, #1
   111e4:	mov	r2, #64	; 0x40
   111e8:	bl	10fc8 <__printf_chk@plt>
   111ec:	movw	r1, #30543	; 0x774f
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10eb4 <dcgettext@plt>
   11200:	movw	r7, #37196	; 0x914c
   11204:	movt	r7, #2
   11208:	ldr	r1, [r7]
   1120c:	bl	10e30 <fputs_unlocked@plt>
   11210:	movw	r1, #30599	; 0x7787
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10eb4 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e30 <fputs_unlocked@plt>
   1122c:	movw	r1, #29823	; 0x747f
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10eb4 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e30 <fputs_unlocked@plt>
   11248:	movw	r1, #30065	; 0x7571
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10eb4 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e30 <fputs_unlocked@plt>
   11264:	movw	r1, #30110	; 0x759e
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10eb4 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e30 <fputs_unlocked@plt>
   11280:	movw	r1, #30164	; 0x75d4
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10eb4 <dcgettext@plt>
   11294:	movw	r5, #30432	; 0x76e0
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r5, #1
   112a4:	mov	r2, r5
   112a8:	mov	r3, r5
   112ac:	bl	10fc8 <__printf_chk@plt>
   112b0:	movw	r0, #31184	; 0x79d0
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movt	r0, #1
   112c0:	add	r1, r0, #32
   112c4:	add	r3, r0, #16
   112c8:	vld1.64	{d18-d19}, [r0], r2
   112cc:	vld1.64	{d16-d17}, [r1]
   112d0:	vld1.64	{d20-d21}, [r3]
   112d4:	vldr	d22, [r0]
   112d8:	add	r1, r6, #32
   112dc:	add	r0, r6, #16
   112e0:	vst1.64	{d16-d17}, [r1]
   112e4:	movw	r1, #30674	; 0x77d2
   112e8:	vst1.64	{d20-d21}, [r0]
   112ec:	mov	r0, r6
   112f0:	movt	r1, #1
   112f4:	vst1.64	{d18-d19}, [r0], r2
   112f8:	vstr	d22, [r0]
   112fc:	mov	r0, r5
   11300:	bl	10e48 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	ldrne	r1, [r6, #8]!
   1130c:	cmpne	r1, #0
   11310:	bne	112fc <__assert_fail@plt+0x274>
   11314:	movw	r1, #30769	; 0x7831
   11318:	ldr	r6, [r6, #4]
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	movt	r1, #1
   11328:	bl	10eb4 <dcgettext@plt>
   1132c:	movw	r2, #30493	; 0x771d
   11330:	movw	r3, #30792	; 0x7848
   11334:	mov	r1, r0
   11338:	mov	r0, #1
   1133c:	movt	r2, #1
   11340:	movt	r3, #1
   11344:	bl	10fc8 <__printf_chk@plt>
   11348:	cmp	r6, #0
   1134c:	mov	r0, #5
   11350:	mov	r1, #0
   11354:	moveq	r6, r5
   11358:	bl	1101c <setlocale@plt>
   1135c:	cmp	r0, #0
   11360:	beq	11398 <__assert_fail@plt+0x310>
   11364:	movw	r1, #30832	; 0x7870
   11368:	mov	r2, #3
   1136c:	movt	r1, #1
   11370:	bl	11070 <strncmp@plt>
   11374:	cmp	r0, #0
   11378:	beq	11398 <__assert_fail@plt+0x310>
   1137c:	movw	r1, #30836	; 0x7874
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10eb4 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10e30 <fputs_unlocked@plt>
   11398:	movw	r1, #30907	; 0x78bb
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10eb4 <dcgettext@plt>
   113ac:	movw	r2, #30792	; 0x7848
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	mov	r3, r5
   113bc:	movt	r2, #1
   113c0:	bl	10fc8 <__printf_chk@plt>
   113c4:	movw	r1, #30934	; 0x78d6
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	movt	r1, #1
   113d4:	bl	10eb4 <dcgettext@plt>
   113d8:	mov	r1, r0
   113dc:	movw	r0, #30702	; 0x77ee
   113e0:	movw	r3, #30984	; 0x7908
   113e4:	cmp	r6, r5
   113e8:	mov	r2, r6
   113ec:	movt	r0, #1
   113f0:	movt	r3, #1
   113f4:	moveq	r3, r0
   113f8:	mov	r0, #1
   113fc:	bl	10fc8 <__printf_chk@plt>
   11400:	mov	r0, r4
   11404:	bl	10f74 <exit@plt>
   11408:	movw	r0, #37184	; 0x9140
   1140c:	movw	r1, #29684	; 0x73f4
   11410:	mov	r2, #5
   11414:	movt	r0, #2
   11418:	movt	r1, #1
   1141c:	ldr	r5, [r0]
   11420:	mov	r0, #0
   11424:	bl	10eb4 <dcgettext@plt>
   11428:	mov	r2, r0
   1142c:	movw	r0, #37216	; 0x9160
   11430:	mov	r1, #1
   11434:	movt	r0, #2
   11438:	ldr	r3, [r0]
   1143c:	mov	r0, r5
   11440:	bl	10fe0 <__fprintf_chk@plt>
   11444:	mov	r0, r4
   11448:	bl	10f74 <exit@plt>
   1144c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11450:	add	fp, sp, #28
   11454:	sub	sp, sp, #28
   11458:	mov	r5, r0
   1145c:	ldr	r0, [r1]
   11460:	mov	r4, r1
   11464:	bl	12868 <__assert_fail@plt+0x17e0>
   11468:	movw	r1, #30984	; 0x7908
   1146c:	mov	r0, #6
   11470:	movt	r1, #1
   11474:	bl	1101c <setlocale@plt>
   11478:	movw	r6, #30497	; 0x7721
   1147c:	movw	r1, #30439	; 0x76e7
   11480:	movt	r6, #1
   11484:	movt	r1, #1
   11488:	mov	r0, r6
   1148c:	bl	11058 <bindtextdomain@plt>
   11490:	mov	r0, r6
   11494:	bl	10ecc <textdomain@plt>
   11498:	movw	r0, #9588	; 0x2574
   1149c:	movt	r0, #1
   114a0:	bl	173d0 <__assert_fail@plt+0x6348>
   114a4:	movw	r9, #30463	; 0x76ff
   114a8:	movw	r7, #31088	; 0x7970
   114ac:	mov	r6, #76	; 0x4c
   114b0:	mov	r8, #0
   114b4:	mov	sl, #0
   114b8:	mov	r0, #0
   114bc:	movt	r9, #1
   114c0:	movt	r7, #1
   114c4:	str	r0, [sp, #12]
   114c8:	mov	r0, r5
   114cc:	mov	r1, r4
   114d0:	mov	r2, r9
   114d4:	mov	r3, r7
   114d8:	str	r8, [sp]
   114dc:	bl	10f5c <getopt_long@plt>
   114e0:	cmp	r0, #99	; 0x63
   114e4:	ble	1156c <__assert_fail@plt+0x4e4>
   114e8:	cmp	r0, #100	; 0x64
   114ec:	beq	1155c <__assert_fail@plt+0x4d4>
   114f0:	cmp	r0, #105	; 0x69
   114f4:	beq	11564 <__assert_fail@plt+0x4dc>
   114f8:	cmp	r0, #119	; 0x77
   114fc:	bne	11744 <__assert_fail@plt+0x6bc>
   11500:	movw	r0, #37200	; 0x9150
   11504:	movw	r1, #30984	; 0x7908
   11508:	mov	r2, #10
   1150c:	add	r3, sp, #16
   11510:	movt	r0, #2
   11514:	movt	r1, #1
   11518:	ldr	r0, [r0]
   1151c:	str	r1, [sp]
   11520:	mov	r1, #0
   11524:	bl	15484 <__assert_fail@plt+0x43fc>
   11528:	cmp	r0, #1
   1152c:	bhi	11700 <__assert_fail@plt+0x678>
   11530:	ldr	r1, [sp, #20]
   11534:	cmn	r1, #1
   11538:	ble	11700 <__assert_fail@plt+0x678>
   1153c:	ldr	r2, [sp, #16]
   11540:	mvn	r3, #-2147483648	; 0x80000000
   11544:	subs	r3, r3, r2
   11548:	rscs	r1, r1, #0
   1154c:	movwlt	r2, #0
   11550:	subs	r6, r0, #1
   11554:	movne	r6, r2
   11558:	b	114c8 <__assert_fail@plt+0x440>
   1155c:	mov	sl, #1
   11560:	b	114c8 <__assert_fail@plt+0x440>
   11564:	mov	r0, #1
   11568:	b	114c4 <__assert_fail@plt+0x43c>
   1156c:	cmn	r0, #3
   11570:	beq	11584 <__assert_fail@plt+0x4fc>
   11574:	cmn	r0, #2
   11578:	bne	115cc <__assert_fail@plt+0x544>
   1157c:	mov	r0, #0
   11580:	bl	11184 <__assert_fail@plt+0xfc>
   11584:	movw	r0, #37096	; 0x90e8
   11588:	movw	r2, #30507	; 0x772b
   1158c:	mov	r1, #0
   11590:	movt	r0, #2
   11594:	movt	r2, #1
   11598:	str	r1, [sp, #4]
   1159c:	movw	r1, #30432	; 0x76e0
   115a0:	movt	r1, #1
   115a4:	ldr	r3, [r0]
   115a8:	movw	r0, #37196	; 0x914c
   115ac:	str	r2, [sp]
   115b0:	movw	r2, #30493	; 0x771d
   115b4:	movt	r0, #2
   115b8:	movt	r2, #1
   115bc:	ldr	r0, [r0]
   115c0:	bl	14cd0 <__assert_fail@plt+0x3c48>
   115c4:	mov	r0, #0
   115c8:	bl	10f74 <exit@plt>
   115cc:	cmn	r0, #1
   115d0:	bne	11744 <__assert_fail@plt+0x6bc>
   115d4:	movw	r7, #37176	; 0x9138
   115d8:	movt	r7, #2
   115dc:	ldr	r0, [r7]
   115e0:	sub	r1, r5, r0
   115e4:	cmp	r1, #2
   115e8:	blt	11630 <__assert_fail@plt+0x5a8>
   115ec:	movw	r1, #30523	; 0x773b
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #1
   115fc:	bl	10eb4 <dcgettext@plt>
   11600:	mov	r5, r0
   11604:	ldr	r0, [r7]
   11608:	add	r0, r4, r0, lsl #2
   1160c:	ldr	r0, [r0, #4]
   11610:	bl	1482c <__assert_fail@plt+0x37a4>
   11614:	mov	r3, r0
   11618:	mov	r0, #0
   1161c:	mov	r1, #0
   11620:	mov	r2, r5
   11624:	bl	10f20 <error@plt>
   11628:	mov	r0, #1
   1162c:	bl	11184 <__assert_fail@plt+0xfc>
   11630:	cmp	r0, r5
   11634:	bge	11640 <__assert_fail@plt+0x5b8>
   11638:	ldr	r4, [r4, r0, lsl #2]
   1163c:	b	11648 <__assert_fail@plt+0x5c0>
   11640:	movw	r4, #31641	; 0x7b99
   11644:	movt	r4, #1
   11648:	movw	r1, #31641	; 0x7b99
   1164c:	mov	r0, r4
   11650:	movt	r1, #1
   11654:	bl	10e48 <strcmp@plt>
   11658:	cmp	r0, #0
   1165c:	bne	11670 <__assert_fail@plt+0x5e8>
   11660:	movw	r0, #37192	; 0x9148
   11664:	movt	r0, #2
   11668:	ldr	r5, [r0]
   1166c:	b	116bc <__assert_fail@plt+0x634>
   11670:	movw	r1, #30540	; 0x774c
   11674:	mov	r0, r4
   11678:	movt	r1, #1
   1167c:	bl	1104c <fopen64@plt>
   11680:	mov	r5, r0
   11684:	cmp	r0, #0
   11688:	bne	116bc <__assert_fail@plt+0x634>
   1168c:	bl	10fa4 <__errno_location@plt>
   11690:	ldr	r5, [r0]
   11694:	mov	r0, #0
   11698:	mov	r1, #3
   1169c:	mov	r2, r4
   116a0:	bl	14580 <__assert_fail@plt+0x34f8>
   116a4:	movw	r2, #30472	; 0x7708
   116a8:	mov	r3, r0
   116ac:	mov	r0, #1
   116b0:	mov	r1, r5
   116b4:	movt	r2, #1
   116b8:	bl	10f20 <error@plt>
   116bc:	mov	r0, r5
   116c0:	mov	r1, #2
   116c4:	bl	12664 <__assert_fail@plt+0x15dc>
   116c8:	movw	r0, #37196	; 0x914c
   116cc:	tst	sl, #1
   116d0:	movt	r0, #2
   116d4:	ldr	r2, [r0]
   116d8:	beq	116f0 <__assert_fail@plt+0x668>
   116dc:	ldr	r0, [sp, #12]
   116e0:	mov	r1, r4
   116e4:	and	r3, r0, #1
   116e8:	mov	r0, r5
   116ec:	bl	1174c <__assert_fail@plt+0x6c4>
   116f0:	mov	r0, r5
   116f4:	mov	r1, r4
   116f8:	mov	r3, r6
   116fc:	bl	1198c <__assert_fail@plt+0x904>
   11700:	movw	r1, #30475	; 0x770b
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	10eb4 <dcgettext@plt>
   11714:	mov	r4, r0
   11718:	movw	r0, #37200	; 0x9150
   1171c:	movt	r0, #2
   11720:	ldr	r0, [r0]
   11724:	bl	1482c <__assert_fail@plt+0x37a4>
   11728:	movw	r2, #30468	; 0x7704
   1172c:	str	r0, [sp]
   11730:	mov	r0, #1
   11734:	mov	r1, #0
   11738:	mov	r3, r4
   1173c:	movt	r2, #1
   11740:	bl	10f20 <error@plt>
   11744:	mov	r0, #1
   11748:	bl	11184 <__assert_fail@plt+0xfc>
   1174c:	push	{fp, lr}
   11750:	mov	fp, sp
   11754:	sub	sp, sp, #32
   11758:	mov	r6, r0
   1175c:	mov	r0, #4096	; 0x1000
   11760:	str	r2, [sp, #16]
   11764:	stmib	sp, {r1, r3}
   11768:	bl	14f04 <__assert_fail@plt+0x3e7c>
   1176c:	mov	r4, r0
   11770:	mov	r0, #3072	; 0xc00
   11774:	bl	14f04 <__assert_fail@plt+0x3e7c>
   11778:	str	r0, [sp, #12]
   1177c:	sub	r0, fp, #8
   11780:	bl	11ef4 <__assert_fail@plt+0xe6c>
   11784:	ldr	r0, [sp, #8]
   11788:	mov	sl, #0
   1178c:	cmp	r0, #0
   11790:	bne	117b0 <__assert_fail@plt+0x728>
   11794:	b	11850 <__assert_fail@plt+0x7c8>
   11798:	cmp	r0, #0
   1179c:	bne	11980 <__assert_fail@plt+0x8f8>
   117a0:	ldr	r0, [sp, #8]
   117a4:	mov	sl, #0
   117a8:	cmp	r0, #0
   117ac:	beq	11850 <__assert_fail@plt+0x7c8>
   117b0:	add	r9, r4, sl
   117b4:	rsb	r2, sl, #4096	; 0x1000
   117b8:	mov	r1, #1
   117bc:	mov	r3, r6
   117c0:	mov	r0, r9
   117c4:	bl	11064 <fread_unlocked@plt>
   117c8:	mov	r8, r0
   117cc:	cmp	r0, #1
   117d0:	blt	1182c <__assert_fail@plt+0x7a4>
   117d4:	mov	r5, #0
   117d8:	add	r0, r5, sl
   117dc:	ldrb	r7, [r4, r0]
   117e0:	mov	r0, r7
   117e4:	bl	11ed4 <__assert_fail@plt+0xe4c>
   117e8:	cmp	r0, #0
   117ec:	bne	11820 <__assert_fail@plt+0x798>
   117f0:	cmp	r7, #61	; 0x3d
   117f4:	beq	11820 <__assert_fail@plt+0x798>
   117f8:	sub	r8, r8, #1
   117fc:	add	r0, r9, r5
   11800:	sub	r2, r8, r5
   11804:	add	r1, r0, #1
   11808:	bl	10e6c <memmove@plt>
   1180c:	cmp	r8, #1
   11810:	blt	1182c <__assert_fail@plt+0x7a4>
   11814:	cmp	r5, r8
   11818:	blt	117d8 <__assert_fail@plt+0x750>
   1181c:	b	1182c <__assert_fail@plt+0x7a4>
   11820:	add	r5, r5, #1
   11824:	cmp	r8, #1
   11828:	bge	11814 <__assert_fail@plt+0x78c>
   1182c:	ldr	r0, [r6]
   11830:	tst	r0, #32
   11834:	bne	1191c <__assert_fail@plt+0x894>
   11838:	add	sl, r8, sl
   1183c:	cmp	sl, #4096	; 0x1000
   11840:	bge	11884 <__assert_fail@plt+0x7fc>
   11844:	ands	r0, r0, #16
   11848:	beq	117b0 <__assert_fail@plt+0x728>
   1184c:	b	11884 <__assert_fail@plt+0x7fc>
   11850:	add	r0, r4, sl
   11854:	rsb	r2, sl, #4096	; 0x1000
   11858:	mov	r1, #1
   1185c:	mov	r3, r6
   11860:	bl	11064 <fread_unlocked@plt>
   11864:	ldr	r1, [r6]
   11868:	tst	r1, #32
   1186c:	bne	1191c <__assert_fail@plt+0x894>
   11870:	add	sl, r0, sl
   11874:	cmp	sl, #4096	; 0x1000
   11878:	bge	11884 <__assert_fail@plt+0x7fc>
   1187c:	ands	r0, r1, #16
   11880:	beq	11850 <__assert_fail@plt+0x7c8>
   11884:	mov	r1, #0
   11888:	mov	r8, r6
   1188c:	ldr	r6, [sp, #12]
   11890:	mov	r0, #3072	; 0xc00
   11894:	cmp	r1, #0
   11898:	mov	r2, sl
   1189c:	mov	r5, r1
   118a0:	mov	r1, r4
   118a4:	str	r0, [fp, #-12]
   118a8:	sub	r0, fp, #12
   118ac:	movne	r2, #0
   118b0:	str	r0, [sp]
   118b4:	sub	r0, fp, #8
   118b8:	mov	r3, r6
   118bc:	bl	11f00 <__assert_fail@plt+0xe78>
   118c0:	ldr	r2, [fp, #-12]
   118c4:	ldr	r3, [sp, #16]
   118c8:	mov	r7, r0
   118cc:	mov	r0, r6
   118d0:	mov	r1, #1
   118d4:	bl	10ea8 <fwrite_unlocked@plt>
   118d8:	ldr	r1, [fp, #-12]
   118dc:	cmp	r0, r1
   118e0:	bcc	11930 <__assert_fail@plt+0x8a8>
   118e4:	cmp	r7, #0
   118e8:	beq	1195c <__assert_fail@plt+0x8d4>
   118ec:	ldr	r0, [r8]
   118f0:	mov	r2, #2
   118f4:	add	r1, r5, #1
   118f8:	mov	r6, r8
   118fc:	ands	r0, r0, #16
   11900:	movweq	r2, #1
   11904:	cmp	r1, r2
   11908:	bcs	11798 <__assert_fail@plt+0x710>
   1190c:	ldr	r2, [fp, #-8]
   11910:	orrs	r2, r5, r2
   11914:	bne	11888 <__assert_fail@plt+0x800>
   11918:	b	11798 <__assert_fail@plt+0x710>
   1191c:	bl	10fa4 <__errno_location@plt>
   11920:	ldr	r4, [r0]
   11924:	movw	r1, #31025	; 0x7931
   11928:	movt	r1, #1
   1192c:	b	11940 <__assert_fail@plt+0x8b8>
   11930:	bl	10fa4 <__errno_location@plt>
   11934:	ldr	r4, [r0]
   11938:	movw	r1, #31036	; 0x793c
   1193c:	movt	r1, #1
   11940:	mov	r0, #0
   11944:	mov	r2, #5
   11948:	bl	10eb4 <dcgettext@plt>
   1194c:	mov	r2, r0
   11950:	mov	r0, #1
   11954:	mov	r1, r4
   11958:	bl	10f20 <error@plt>
   1195c:	movw	r1, #31048	; 0x7948
   11960:	mov	r0, #0
   11964:	mov	r2, #5
   11968:	movt	r1, #1
   1196c:	bl	10eb4 <dcgettext@plt>
   11970:	mov	r2, r0
   11974:	mov	r0, #1
   11978:	mov	r1, #0
   1197c:	bl	10f20 <error@plt>
   11980:	ldr	r1, [sp, #4]
   11984:	mov	r0, r6
   11988:	bl	11bd0 <__assert_fail@plt+0xb48>
   1198c:	push	{fp, lr}
   11990:	mov	fp, sp
   11994:	sub	sp, sp, #16
   11998:	mov	r5, r0
   1199c:	mov	r0, #30720	; 0x7800
   119a0:	str	r3, [fp, #-4]
   119a4:	stm	sp, {r1, r2}
   119a8:	bl	14f04 <__assert_fail@plt+0x3e7c>
   119ac:	mov	r4, r0
   119b0:	mov	r0, #40960	; 0xa000
   119b4:	bl	14f04 <__assert_fail@plt+0x3e7c>
   119b8:	mov	r7, r0
   119bc:	mov	sl, #0
   119c0:	str	r0, [sp, #8]
   119c4:	mov	r6, #0
   119c8:	add	r0, r4, r6
   119cc:	rsb	r2, r6, #30720	; 0x7800
   119d0:	mov	r1, #1
   119d4:	mov	r3, r5
   119d8:	bl	11064 <fread_unlocked@plt>
   119dc:	add	r6, r0, r6
   119e0:	ldr	r0, [r5]
   119e4:	tst	r0, #16
   119e8:	bne	119fc <__assert_fail@plt+0x974>
   119ec:	cmp	r6, #30720	; 0x7800
   119f0:	bge	119fc <__assert_fail@plt+0x974>
   119f4:	ands	r0, r0, #32
   119f8:	beq	119c8 <__assert_fail@plt+0x940>
   119fc:	cmp	r6, #1
   11a00:	blt	11b10 <__assert_fail@plt+0xa88>
   11a04:	movw	r1, #21846	; 0x5556
   11a08:	add	r0, r6, #2
   11a0c:	mov	r2, r7
   11a10:	movt	r1, #21845	; 0x5555
   11a14:	smmul	r0, r0, r1
   11a18:	mov	r1, r6
   11a1c:	add	r0, r0, r0, lsr #31
   11a20:	lsl	r8, r0, #2
   11a24:	mov	r0, r4
   11a28:	mov	r3, r8
   11a2c:	bl	11c60 <__assert_fail@plt+0xbd8>
   11a30:	ldr	r0, [fp, #-4]
   11a34:	cmp	r0, #0
   11a38:	beq	11a44 <__assert_fail@plt+0x9bc>
   11a3c:	mov	r7, #0
   11a40:	b	11a88 <__assert_fail@plt+0xa00>
   11a44:	movw	r0, #37196	; 0x914c
   11a48:	mov	r1, #1
   11a4c:	mov	r2, r8
   11a50:	movt	r0, #2
   11a54:	ldr	r3, [r0]
   11a58:	mov	r0, r7
   11a5c:	bl	10ea8 <fwrite_unlocked@plt>
   11a60:	cmp	r0, r8
   11a64:	bcs	11b10 <__assert_fail@plt+0xa88>
   11a68:	b	11b78 <__assert_fail@plt+0xaf0>
   11a6c:	mov	r1, #10
   11a70:	bl	11010 <__overflow@plt>
   11a74:	mov	sl, #0
   11a78:	cmn	r0, #1
   11a7c:	beq	11b78 <__assert_fail@plt+0xaf0>
   11a80:	cmp	r7, r8
   11a84:	bge	11b10 <__assert_fail@plt+0xa88>
   11a88:	ldr	r0, [fp, #-4]
   11a8c:	sub	r9, r8, r7
   11a90:	sub	r0, r0, sl
   11a94:	cmp	r0, r9
   11a98:	movlt	r9, r0
   11a9c:	cmp	r9, #0
   11aa0:	beq	11ae0 <__assert_fail@plt+0xa58>
   11aa4:	movw	r1, #37196	; 0x914c
   11aa8:	ldr	r0, [sp, #8]
   11aac:	mov	r2, r9
   11ab0:	movt	r1, #2
   11ab4:	ldr	r3, [r1]
   11ab8:	mov	r1, #1
   11abc:	add	r0, r0, r7
   11ac0:	bl	10ea8 <fwrite_unlocked@plt>
   11ac4:	cmp	r0, r9
   11ac8:	bcc	11b78 <__assert_fail@plt+0xaf0>
   11acc:	add	r7, r9, r7
   11ad0:	add	sl, r9, sl
   11ad4:	cmp	r7, r8
   11ad8:	blt	11a88 <__assert_fail@plt+0xa00>
   11adc:	b	11b10 <__assert_fail@plt+0xa88>
   11ae0:	ldr	r0, [sp, #4]
   11ae4:	ldr	r2, [r0, #20]
   11ae8:	ldr	r1, [r0, #24]
   11aec:	cmp	r2, r1
   11af0:	bcs	11a6c <__assert_fail@plt+0x9e4>
   11af4:	add	r1, r2, #1
   11af8:	mov	sl, #0
   11afc:	str	r1, [r0, #20]
   11b00:	mov	r0, #10
   11b04:	strb	r0, [r2]
   11b08:	cmp	r7, r8
   11b0c:	blt	11a88 <__assert_fail@plt+0xa00>
   11b10:	ldr	r0, [r5]
   11b14:	ldr	r7, [sp, #8]
   11b18:	tst	r0, #16
   11b1c:	cmpeq	r6, #30720	; 0x7800
   11b20:	bne	11b2c <__assert_fail@plt+0xaa4>
   11b24:	ands	r0, r0, #32
   11b28:	beq	119c4 <__assert_fail@plt+0x93c>
   11b2c:	ldr	r0, [fp, #-4]
   11b30:	cmp	r0, #0
   11b34:	beq	11b8c <__assert_fail@plt+0xb04>
   11b38:	cmp	sl, #1
   11b3c:	blt	11b8c <__assert_fail@plt+0xb04>
   11b40:	ldr	r0, [sp, #4]
   11b44:	ldr	r2, [r0, #20]
   11b48:	ldr	r1, [r0, #24]
   11b4c:	cmp	r2, r1
   11b50:	bcs	11b68 <__assert_fail@plt+0xae0>
   11b54:	add	r1, r2, #1
   11b58:	str	r1, [r0, #20]
   11b5c:	mov	r1, #10
   11b60:	strb	r1, [r2]
   11b64:	b	11b8c <__assert_fail@plt+0xb04>
   11b68:	mov	r1, #10
   11b6c:	bl	11010 <__overflow@plt>
   11b70:	cmn	r0, #1
   11b74:	bne	11b8c <__assert_fail@plt+0xb04>
   11b78:	bl	10fa4 <__errno_location@plt>
   11b7c:	ldr	r4, [r0]
   11b80:	movw	r1, #31036	; 0x793c
   11b84:	movt	r1, #1
   11b88:	b	11bb4 <__assert_fail@plt+0xb2c>
   11b8c:	ldrb	r0, [r5]
   11b90:	tst	r0, #32
   11b94:	bne	11ba4 <__assert_fail@plt+0xb1c>
   11b98:	ldr	r1, [sp]
   11b9c:	mov	r0, r5
   11ba0:	bl	11bd0 <__assert_fail@plt+0xb48>
   11ba4:	bl	10fa4 <__errno_location@plt>
   11ba8:	ldr	r4, [r0]
   11bac:	movw	r1, #31025	; 0x7931
   11bb0:	movt	r1, #1
   11bb4:	mov	r0, #0
   11bb8:	mov	r2, #5
   11bbc:	bl	10eb4 <dcgettext@plt>
   11bc0:	mov	r2, r0
   11bc4:	mov	r0, #1
   11bc8:	mov	r1, r4
   11bcc:	bl	10f20 <error@plt>
   11bd0:	push	{fp, lr}
   11bd4:	mov	fp, sp
   11bd8:	mov	r5, r1
   11bdc:	bl	126a0 <__assert_fail@plt+0x1618>
   11be0:	cmp	r0, #0
   11be4:	bne	11bf0 <__assert_fail@plt+0xb68>
   11be8:	mov	r0, #0
   11bec:	bl	10f74 <exit@plt>
   11bf0:	movw	r1, #31641	; 0x7b99
   11bf4:	mov	r0, r5
   11bf8:	movt	r1, #1
   11bfc:	bl	10e48 <strcmp@plt>
   11c00:	mov	r6, r0
   11c04:	bl	10fa4 <__errno_location@plt>
   11c08:	ldr	r4, [r0]
   11c0c:	cmp	r6, #0
   11c10:	bne	11c38 <__assert_fail@plt+0xbb0>
   11c14:	movw	r1, #31062	; 0x7956
   11c18:	mov	r0, #0
   11c1c:	mov	r2, #5
   11c20:	movt	r1, #1
   11c24:	bl	10eb4 <dcgettext@plt>
   11c28:	mov	r2, r0
   11c2c:	mov	r0, #1
   11c30:	mov	r1, r4
   11c34:	bl	10f20 <error@plt>
   11c38:	mov	r0, #0
   11c3c:	mov	r1, #3
   11c40:	mov	r2, r5
   11c44:	bl	14580 <__assert_fail@plt+0x34f8>
   11c48:	movw	r2, #30472	; 0x7708
   11c4c:	mov	r3, r0
   11c50:	mov	r0, #1
   11c54:	mov	r1, r4
   11c58:	movt	r2, #1
   11c5c:	bl	10f20 <error@plt>
   11c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c64:	add	fp, sp, #28
   11c68:	tst	r3, #3
   11c6c:	bne	11ce4 <__assert_fail@plt+0xc5c>
   11c70:	asr	r7, r3, #2
   11c74:	add	r7, r7, r7, lsl #1
   11c78:	cmp	r7, r1
   11c7c:	bne	11ce4 <__assert_fail@plt+0xc5c>
   11c80:	cmp	r1, #0
   11c84:	beq	11d00 <__assert_fail@plt+0xc78>
   11c88:	movw	r3, #31255	; 0x7a17
   11c8c:	movt	r3, #1
   11c90:	ldrb	r7, [r0]
   11c94:	subs	r1, r1, #3
   11c98:	ldrb	r6, [r3, r7, lsr #2]
   11c9c:	strb	r6, [r2]
   11ca0:	ldrb	r6, [r0, #1]
   11ca4:	lsr	r5, r6, #4
   11ca8:	bfi	r5, r7, #4, #2
   11cac:	ldrb	r7, [r3, r5]
   11cb0:	strb	r7, [r2, #1]
   11cb4:	ldrb	r7, [r0, #2]
   11cb8:	add	r0, r0, #3
   11cbc:	and	r5, r7, #63	; 0x3f
   11cc0:	lsr	r7, r7, #6
   11cc4:	bfi	r7, r6, #2, #4
   11cc8:	ldrb	r5, [r3, r5]
   11ccc:	ldrb	r7, [r3, r7]
   11cd0:	strb	r5, [r2, #3]
   11cd4:	strb	r7, [r2, #2]
   11cd8:	add	r2, r2, #4
   11cdc:	bne	11c90 <__assert_fail@plt+0xc08>
   11ce0:	b	11d00 <__assert_fail@plt+0xc78>
   11ce4:	cmp	r1, #0
   11ce8:	cmpne	r3, #0
   11cec:	bne	11d04 <__assert_fail@plt+0xc7c>
   11cf0:	cmp	r3, #0
   11cf4:	beq	11d00 <__assert_fail@plt+0xc78>
   11cf8:	mov	r0, #0
   11cfc:	strb	r0, [r2]
   11d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d04:	movw	r6, #31255	; 0x7a17
   11d08:	add	r0, r0, #1
   11d0c:	sub	ip, r3, #3
   11d10:	sub	lr, r3, #2
   11d14:	sub	sl, r3, #1
   11d18:	sub	r9, r3, #4
   11d1c:	mov	r8, #0
   11d20:	mov	r7, #0
   11d24:	movt	r6, #1
   11d28:	ldrb	r3, [r0, #-1]
   11d2c:	mov	r5, r2
   11d30:	cmp	sl, r7
   11d34:	ldrb	r3, [r6, r3, lsr #2]
   11d38:	strb	r3, [r5, r7]!
   11d3c:	beq	11d00 <__assert_fail@plt+0xc78>
   11d40:	cmp	r1, #1
   11d44:	ldrb	r3, [r0, #-1]
   11d48:	mov	r4, #0
   11d4c:	ldrbne	r4, [r0]
   11d50:	lsl	r3, r3, #4
   11d54:	lsrne	r4, r4, #4
   11d58:	cmp	lr, r7
   11d5c:	add	r3, r4, r3
   11d60:	and	r3, r3, #63	; 0x3f
   11d64:	ldrb	r3, [r6, r3]
   11d68:	strb	r3, [r5, #1]
   11d6c:	beq	11d00 <__assert_fail@plt+0xc78>
   11d70:	cmp	r1, #1
   11d74:	beq	11d94 <__assert_fail@plt+0xd0c>
   11d78:	ldrb	r3, [r0]
   11d7c:	subs	r1, r1, #2
   11d80:	lsl	r3, r3, #2
   11d84:	beq	11dfc <__assert_fail@plt+0xd74>
   11d88:	ldrb	r4, [r0, #1]
   11d8c:	lsr	r4, r4, #6
   11d90:	b	11e00 <__assert_fail@plt+0xd78>
   11d94:	mov	r3, #61	; 0x3d
   11d98:	mov	r1, #0
   11d9c:	cmp	ip, r7
   11da0:	strb	r3, [r5, #2]
   11da4:	beq	11d00 <__assert_fail@plt+0xc78>
   11da8:	cmp	r1, #0
   11dac:	beq	11dcc <__assert_fail@plt+0xd44>
   11db0:	ldrb	r3, [r0, #1]
   11db4:	and	r3, r3, #63	; 0x3f
   11db8:	ldrb	r3, [r6, r3]
   11dbc:	cmp	r9, r7
   11dc0:	strb	r3, [r5, #3]
   11dc4:	bne	11ddc <__assert_fail@plt+0xd54>
   11dc8:	b	11d00 <__assert_fail@plt+0xc78>
   11dcc:	mov	r3, #61	; 0x3d
   11dd0:	cmp	r9, r7
   11dd4:	strb	r3, [r5, #3]
   11dd8:	beq	11d00 <__assert_fail@plt+0xc78>
   11ddc:	subs	r1, r1, #1
   11de0:	add	r7, r7, #4
   11de4:	adc	r3, r8, #0
   11de8:	cmp	r1, #0
   11dec:	addne	r0, r0, #3
   11df0:	cmpne	r3, #0
   11df4:	bne	11d28 <__assert_fail@plt+0xca0>
   11df8:	b	11e1c <__assert_fail@plt+0xd94>
   11dfc:	mov	r4, #0
   11e00:	add	r3, r4, r3
   11e04:	and	r3, r3, #63	; 0x3f
   11e08:	ldrb	r3, [r6, r3]
   11e0c:	cmp	ip, r7
   11e10:	strb	r3, [r5, #2]
   11e14:	bne	11da8 <__assert_fail@plt+0xd20>
   11e18:	b	11d00 <__assert_fail@plt+0xc78>
   11e1c:	add	r2, r2, r7
   11e20:	b	11cf8 <__assert_fail@plt+0xc70>
   11e24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e28:	add	fp, sp, #24
   11e2c:	mov	r8, r0
   11e30:	movw	r0, #21846	; 0x5556
   11e34:	mov	r4, r1
   11e38:	mov	r6, r2
   11e3c:	movt	r0, #21845	; 0x5555
   11e40:	smmul	r0, r1, r0
   11e44:	add	r0, r0, r0, lsr #31
   11e48:	add	r1, r0, r0, lsl #1
   11e4c:	subs	r1, r4, r1
   11e50:	addne	r0, r0, #1
   11e54:	cmn	r0, #1
   11e58:	ble	11e68 <__assert_fail@plt+0xde0>
   11e5c:	cmn	r0, #-536870911	; 0xe0000001
   11e60:	ble	11e7c <__assert_fail@plt+0xdf4>
   11e64:	b	11ebc <__assert_fail@plt+0xe34>
   11e68:	beq	11e7c <__assert_fail@plt+0xdf4>
   11e6c:	mov	r1, #-2147483648	; 0x80000000
   11e70:	sdiv	r1, r1, r0
   11e74:	cmp	r1, #4
   11e78:	blt	11ebc <__assert_fail@plt+0xe34>
   11e7c:	cmn	r4, #1
   11e80:	ble	11ebc <__assert_fail@plt+0xe34>
   11e84:	lsl	r7, r0, #2
   11e88:	orr	r5, r7, #1
   11e8c:	mov	r0, r5
   11e90:	bl	16e38 <__assert_fail@plt+0x5db0>
   11e94:	cmp	r0, #0
   11e98:	str	r0, [r6]
   11e9c:	beq	11ecc <__assert_fail@plt+0xe44>
   11ea0:	mov	r2, r0
   11ea4:	mov	r0, r8
   11ea8:	mov	r1, r4
   11eac:	mov	r3, r5
   11eb0:	bl	11c60 <__assert_fail@plt+0xbd8>
   11eb4:	mov	r0, r7
   11eb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ebc:	mov	r7, #0
   11ec0:	mov	r0, r7
   11ec4:	str	r7, [r6]
   11ec8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ecc:	mov	r0, r5
   11ed0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ed4:	movw	r1, #31319	; 0x7a57
   11ed8:	movt	r1, #1
   11edc:	add	r0, r1, r0
   11ee0:	ldrsb	r1, [r0]
   11ee4:	mov	r0, #0
   11ee8:	cmn	r1, #1
   11eec:	movwgt	r0, #1
   11ef0:	bx	lr
   11ef4:	mov	r1, #0
   11ef8:	str	r1, [r0]
   11efc:	bx	lr
   11f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f04:	add	fp, sp, #28
   11f08:	sub	sp, sp, #36	; 0x24
   11f0c:	mov	ip, r0
   11f10:	ldr	r0, [fp, #8]
   11f14:	mov	r4, r1
   11f18:	mov	lr, #0
   11f1c:	cmp	ip, #0
   11f20:	ldr	r9, [r0]
   11f24:	mov	r0, #0
   11f28:	beq	11f40 <__assert_fail@plt+0xeb8>
   11f2c:	clz	r0, r2
   11f30:	lsr	lr, r0, #5
   11f34:	ldr	r0, [ip]
   11f38:	cmp	r0, #0
   11f3c:	movwne	r0, #1
   11f40:	orr	r0, r0, lr
   11f44:	movw	r5, #31319	; 0x7a57
   11f48:	str	ip, [sp, #16]
   11f4c:	str	lr, [sp, #8]
   11f50:	str	r0, [sp, #20]
   11f54:	add	r0, ip, #4
   11f58:	movt	r5, #1
   11f5c:	str	r0, [sp, #4]
   11f60:	clz	r0, ip
   11f64:	lsr	r7, r0, #5
   11f68:	str	r7, [sp, #12]
   11f6c:	b	11f7c <__assert_fail@plt+0xef4>
   11f70:	sub	r2, sl, #1
   11f74:	add	r4, r6, #1
   11f78:	mov	lr, r1
   11f7c:	ldr	r1, [sp, #20]
   11f80:	cmp	r2, #2
   11f84:	mov	r0, #0
   11f88:	movwlt	r0, #1
   11f8c:	orrs	r0, r1, r0
   11f90:	beq	11fcc <__assert_fail@plt+0xf44>
   11f94:	mov	r6, r4
   11f98:	mov	r8, r2
   11f9c:	cmp	r8, #0
   11fa0:	mov	r0, r8
   11fa4:	movwne	r0, #1
   11fa8:	orr	r0, lr, r0
   11fac:	cmp	r0, #1
   11fb0:	bne	1248c <__assert_fail@plt+0x1404>
   11fb4:	mov	r1, lr
   11fb8:	cmp	r8, #0
   11fbc:	beq	1211c <__assert_fail@plt+0x1094>
   11fc0:	mov	sl, r8
   11fc4:	str	r9, [sp, #32]
   11fc8:	b	121b8 <__assert_fail@plt+0x1130>
   11fcc:	sub	r0, r2, #2
   11fd0:	mov	ip, r3
   11fd4:	mov	r1, #0
   11fd8:	mov	sl, r2
   11fdc:	mov	r6, r4
   11fe0:	str	r0, [sp, #28]
   11fe4:	sub	r0, r2, #3
   11fe8:	str	r0, [sp, #24]
   11fec:	mov	r0, #0
   11ff0:	mov	lr, r4
   11ff4:	ldrb	r3, [r4, r0]!
   11ff8:	str	r9, [sp, #32]
   11ffc:	add	r3, r5, r3
   12000:	ldrsb	r7, [r3]
   12004:	cmp	r7, #0
   12008:	bmi	121ac <__assert_fail@plt+0x1124>
   1200c:	ldrb	r3, [r4, #1]
   12010:	add	r3, r5, r3
   12014:	ldrsb	r3, [r3]
   12018:	cmp	r3, #0
   1201c:	bmi	1214c <__assert_fail@plt+0x10c4>
   12020:	cmp	r9, #0
   12024:	beq	1208c <__assert_fail@plt+0x1004>
   12028:	uxtb	r5, r3
   1202c:	sub	r9, r9, #1
   12030:	lsr	r5, r5, #4
   12034:	orr	r5, r5, r7, lsl #2
   12038:	strb	r5, [ip], #1
   1203c:	movw	r5, #31319	; 0x7a57
   12040:	movt	r5, #1
   12044:	ldr	r7, [sp, #28]
   12048:	cmp	r7, r0
   1204c:	beq	12154 <__assert_fail@plt+0x10cc>
   12050:	ldrb	r7, [r4, #2]
   12054:	cmp	r7, #61	; 0x3d
   12058:	beq	1215c <__assert_fail@plt+0x10d4>
   1205c:	add	r5, r5, r7
   12060:	ldrsb	r7, [r5]
   12064:	cmp	r7, #0
   12068:	bmi	12190 <__assert_fail@plt+0x1108>
   1206c:	cmp	r9, #0
   12070:	beq	120a0 <__assert_fail@plt+0x1018>
   12074:	uxtb	r5, r7
   12078:	sub	r9, r9, #1
   1207c:	lsr	r5, r5, #2
   12080:	orr	r3, r5, r3, lsl #4
   12084:	strb	r3, [ip], #1
   12088:	b	120a4 <__assert_fail@plt+0x101c>
   1208c:	mov	r9, #0
   12090:	ldr	r7, [sp, #28]
   12094:	cmp	r7, r0
   12098:	bne	12050 <__assert_fail@plt+0xfc8>
   1209c:	b	12154 <__assert_fail@plt+0x10cc>
   120a0:	mov	r9, #0
   120a4:	ldr	r3, [sp, #24]
   120a8:	movw	r5, #31319	; 0x7a57
   120ac:	movt	r5, #1
   120b0:	cmp	r3, r0
   120b4:	beq	121a8 <__assert_fail@plt+0x1120>
   120b8:	ldrb	r3, [r4, #3]
   120bc:	cmp	r3, #61	; 0x3d
   120c0:	beq	12424 <__assert_fail@plt+0x139c>
   120c4:	add	r3, r5, r3
   120c8:	ldrsb	r3, [r3]
   120cc:	cmp	r3, #0
   120d0:	bmi	121ac <__assert_fail@plt+0x1124>
   120d4:	cmp	r9, #0
   120d8:	sub	r1, r1, #4
   120dc:	add	r6, r4, #4
   120e0:	add	r0, r0, #4
   120e4:	sub	sl, sl, #4
   120e8:	mov	r4, lr
   120ec:	orrne	r3, r3, r7, lsl #6
   120f0:	add	r8, r2, r1
   120f4:	subne	r9, r9, #1
   120f8:	strbne	r3, [ip], #1
   120fc:	cmp	r8, #1
   12100:	bgt	11ff0 <__assert_fail@plt+0xf68>
   12104:	mov	r3, ip
   12108:	ldr	ip, [sp, #16]
   1210c:	ldr	lr, [sp, #8]
   12110:	ldr	r7, [sp, #12]
   12114:	add	r6, r4, r0
   12118:	b	11f9c <__assert_fail@plt+0xf14>
   1211c:	mov	sl, #0
   12120:	str	r9, [sp, #32]
   12124:	add	r5, r6, sl
   12128:	cmp	ip, #0
   1212c:	bne	121d8 <__assert_fail@plt+0x1150>
   12130:	str	r6, [sp, #28]
   12134:	mov	r4, sl
   12138:	mov	lr, r1
   1213c:	mov	r8, #0
   12140:	cmp	r4, #0
   12144:	bne	122b8 <__assert_fail@plt+0x1230>
   12148:	b	12488 <__assert_fail@plt+0x1400>
   1214c:	add	sl, r2, r1
   12150:	b	121ac <__assert_fail@plt+0x1124>
   12154:	mov	sl, #2
   12158:	b	121ac <__assert_fail@plt+0x1124>
   1215c:	ldr	r7, [sp, #12]
   12160:	sub	r3, r2, #4
   12164:	cmp	r3, r0
   12168:	mov	r3, ip
   1216c:	bne	12454 <__assert_fail@plt+0x13cc>
   12170:	add	r2, lr, r0
   12174:	ldr	ip, [sp, #16]
   12178:	ldr	r1, [sp, #8]
   1217c:	mov	sl, #4
   12180:	ldrb	r2, [r2, #3]
   12184:	cmp	r2, #61	; 0x3d
   12188:	bne	121b8 <__assert_fail@plt+0x1130>
   1218c:	b	12440 <__assert_fail@plt+0x13b8>
   12190:	mov	r3, ip
   12194:	add	ip, sp, #8
   12198:	movw	r5, #31319	; 0x7a57
   1219c:	ldm	ip, {r1, r7, ip}
   121a0:	movt	r5, #1
   121a4:	b	121b8 <__assert_fail@plt+0x1130>
   121a8:	mov	sl, #3
   121ac:	mov	r3, ip
   121b0:	add	ip, sp, #8
   121b4:	ldm	ip, {r1, r7, ip}
   121b8:	ldrb	r0, [r6]
   121bc:	subs	r0, r0, #10
   121c0:	movwne	r0, #1
   121c4:	orrs	r0, r0, r7
   121c8:	beq	11f70 <__assert_fail@plt+0xee8>
   121cc:	add	r5, r6, sl
   121d0:	cmp	ip, #0
   121d4:	beq	12130 <__assert_fail@plt+0x10a8>
   121d8:	ldr	r4, [ip]
   121dc:	mov	lr, r1
   121e0:	cmp	r4, #0
   121e4:	beq	121f8 <__assert_fail@plt+0x1170>
   121e8:	cmp	r4, #4
   121ec:	bne	1223c <__assert_fail@plt+0x11b4>
   121f0:	mov	r0, #0
   121f4:	str	r0, [ip]
   121f8:	sub	r0, r5, r6
   121fc:	mov	r4, #0
   12200:	cmp	r0, #4
   12204:	blt	1223c <__assert_fail@plt+0x11b4>
   12208:	mov	r0, r6
   1220c:	mov	r1, #10
   12210:	mov	r2, #4
   12214:	mov	r8, r7
   12218:	mov	r7, lr
   1221c:	str	r3, [sp, #24]
   12220:	bl	10fec <memchr@plt>
   12224:	ldr	r3, [sp, #24]
   12228:	ldr	ip, [sp, #16]
   1222c:	mov	lr, r7
   12230:	mov	r7, r8
   12234:	cmp	r0, #0
   12238:	beq	12464 <__assert_fail@plt+0x13dc>
   1223c:	cmp	sl, #1
   12240:	blt	122a4 <__assert_fail@plt+0x121c>
   12244:	mov	r0, r6
   12248:	ldrb	r1, [r6], #1
   1224c:	cmp	r1, #10
   12250:	bne	12260 <__assert_fail@plt+0x11d8>
   12254:	cmp	r6, r5
   12258:	bcc	12244 <__assert_fail@plt+0x11bc>
   1225c:	b	12288 <__assert_fail@plt+0x1200>
   12260:	add	r2, r4, #1
   12264:	mov	r6, ip
   12268:	str	r2, [r6], r4
   1226c:	strb	r1, [r6, #4]
   12270:	add	r6, r0, #1
   12274:	ldr	r4, [ip]
   12278:	cmp	r6, r5
   1227c:	bcs	12288 <__assert_fail@plt+0x1200>
   12280:	cmp	r4, #4
   12284:	bne	12244 <__assert_fail@plt+0x11bc>
   12288:	add	r0, r0, #1
   1228c:	str	r0, [sp, #28]
   12290:	ldr	r6, [sp, #4]
   12294:	mov	r8, #0
   12298:	cmp	r4, #0
   1229c:	bne	122b8 <__assert_fail@plt+0x1230>
   122a0:	b	12488 <__assert_fail@plt+0x1400>
   122a4:	str	r6, [sp, #28]
   122a8:	ldr	r6, [sp, #4]
   122ac:	mov	r8, #0
   122b0:	cmp	r4, #0
   122b4:	beq	12488 <__assert_fail@plt+0x1400>
   122b8:	cmp	r4, #3
   122bc:	mov	r0, #0
   122c0:	movwgt	r0, #1
   122c4:	orr	r0, lr, r0
   122c8:	orr	r0, r0, r7
   122cc:	cmp	r0, #1
   122d0:	bne	12488 <__assert_fail@plt+0x1400>
   122d4:	cmp	r4, #2
   122d8:	blt	12484 <__assert_fail@plt+0x13fc>
   122dc:	ldrb	r0, [r6]
   122e0:	movw	r1, #31319	; 0x7a57
   122e4:	movt	r1, #1
   122e8:	add	r0, r1, r0
   122ec:	ldrsb	r2, [r0]
   122f0:	cmp	r2, #0
   122f4:	ldrbpl	r0, [r6, #1]
   122f8:	addpl	r0, r1, r0
   122fc:	ldrsbpl	r0, [r0]
   12300:	cmppl	r0, #0
   12304:	bmi	12484 <__assert_fail@plt+0x13fc>
   12308:	ldr	r1, [sp, #32]
   1230c:	mov	sl, r7
   12310:	sub	r7, r9, r1
   12314:	cmp	r1, #0
   12318:	add	r3, r3, r7
   1231c:	beq	123d0 <__assert_fail@plt+0x1348>
   12320:	mov	r9, r1
   12324:	uxtb	r1, r0
   12328:	sub	r9, r9, #1
   1232c:	lsr	r1, r1, #4
   12330:	orr	r2, r1, r2, lsl #2
   12334:	strb	r2, [r3], #1
   12338:	mov	r7, sl
   1233c:	mov	r8, #2
   12340:	cmp	r4, #2
   12344:	beq	1248c <__assert_fail@plt+0x1404>
   12348:	ldrb	r2, [r6, #2]
   1234c:	cmp	r2, #61	; 0x3d
   12350:	bne	12370 <__assert_fail@plt+0x12e8>
   12354:	cmp	r4, #4
   12358:	bne	124b0 <__assert_fail@plt+0x1428>
   1235c:	ldrb	r0, [r6, #3]
   12360:	cmp	r0, #61	; 0x3d
   12364:	ldr	r4, [sp, #28]
   12368:	beq	12414 <__assert_fail@plt+0x138c>
   1236c:	b	1248c <__assert_fail@plt+0x1404>
   12370:	movw	r1, #31319	; 0x7a57
   12374:	movt	r1, #1
   12378:	add	r2, r1, r2
   1237c:	ldrsb	r2, [r2]
   12380:	cmp	r2, #0
   12384:	bmi	124b0 <__assert_fail@plt+0x1428>
   12388:	cmp	r9, #0
   1238c:	beq	12474 <__assert_fail@plt+0x13ec>
   12390:	uxtb	r7, r2
   12394:	sub	r9, r9, #1
   12398:	lsr	r7, r7, #2
   1239c:	orr	r0, r7, r0, lsl #4
   123a0:	mov	r7, sl
   123a4:	strb	r0, [r3], #1
   123a8:	cmp	r4, #3
   123ac:	beq	1248c <__assert_fail@plt+0x1404>
   123b0:	ldrb	r0, [r6, #3]
   123b4:	cmp	r0, #61	; 0x3d
   123b8:	bne	123e8 <__assert_fail@plt+0x1360>
   123bc:	cmp	r4, #4
   123c0:	mov	r8, r4
   123c4:	ldr	r4, [sp, #28]
   123c8:	beq	12414 <__assert_fail@plt+0x138c>
   123cc:	b	1248c <__assert_fail@plt+0x1404>
   123d0:	mov	r9, #0
   123d4:	mov	r7, sl
   123d8:	mov	r8, #2
   123dc:	cmp	r4, #2
   123e0:	bne	12348 <__assert_fail@plt+0x12c0>
   123e4:	b	1248c <__assert_fail@plt+0x1404>
   123e8:	movw	r1, #31319	; 0x7a57
   123ec:	movt	r1, #1
   123f0:	add	r0, r1, r0
   123f4:	ldrsb	r0, [r0]
   123f8:	cmp	r0, #0
   123fc:	bmi	124b0 <__assert_fail@plt+0x1428>
   12400:	cmp	r9, #0
   12404:	ldr	r4, [sp, #28]
   12408:	orrne	r0, r0, r2, lsl #6
   1240c:	subne	r9, r9, #1
   12410:	strbne	r0, [r3], #1
   12414:	sub	r2, r5, r4
   12418:	movw	r5, #31319	; 0x7a57
   1241c:	movt	r5, #1
   12420:	b	11f7c <__assert_fail@plt+0xef4>
   12424:	ldr	r7, [sp, #12]
   12428:	sub	r3, r2, #4
   1242c:	cmp	r3, r0
   12430:	mov	r3, ip
   12434:	bne	12454 <__assert_fail@plt+0x13cc>
   12438:	ldr	ip, [sp, #16]
   1243c:	ldr	r1, [sp, #8]
   12440:	add	r0, lr, r0
   12444:	mov	r8, #0
   12448:	mov	lr, r1
   1244c:	add	r6, r0, #4
   12450:	b	11f9c <__assert_fail@plt+0xf14>
   12454:	add	sl, r2, r1
   12458:	ldr	ip, [sp, #16]
   1245c:	ldr	r1, [sp, #8]
   12460:	b	121b8 <__assert_fail@plt+0x1130>
   12464:	add	r0, r6, #4
   12468:	mov	r4, #4
   1246c:	str	r0, [sp, #28]
   12470:	b	122dc <__assert_fail@plt+0x1254>
   12474:	mov	r9, #0
   12478:	cmp	r4, #3
   1247c:	bne	123b0 <__assert_fail@plt+0x1328>
   12480:	b	1248c <__assert_fail@plt+0x1404>
   12484:	mov	r8, r4
   12488:	ldr	r9, [sp, #32]
   1248c:	ldr	r0, [fp, #8]
   12490:	mov	r1, r0
   12494:	ldr	r0, [r0]
   12498:	sub	r0, r0, r9
   1249c:	str	r0, [r1]
   124a0:	clz	r0, r8
   124a4:	lsr	r0, r0, #5
   124a8:	sub	sp, fp, #28
   124ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b0:	mov	r8, r4
   124b4:	b	1248c <__assert_fail@plt+0x1404>
   124b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   124bc:	add	fp, sp, #24
   124c0:	sub	sp, sp, #8
   124c4:	mov	r7, r0
   124c8:	asr	r0, r2, #2
   124cc:	mov	r4, r3
   124d0:	mov	r6, r2
   124d4:	mov	r8, r1
   124d8:	add	r0, r0, r0, lsl #1
   124dc:	add	r0, r0, #3
   124e0:	str	r0, [sp, #4]
   124e4:	bl	16e38 <__assert_fail@plt+0x5db0>
   124e8:	mov	r5, #1
   124ec:	cmp	r0, #0
   124f0:	str	r0, [r4]
   124f4:	beq	1252c <__assert_fail@plt+0x14a4>
   124f8:	mov	r3, r0
   124fc:	add	r0, sp, #4
   12500:	mov	r1, r8
   12504:	mov	r2, r6
   12508:	str	r0, [sp]
   1250c:	mov	r0, r7
   12510:	bl	11f00 <__assert_fail@plt+0xe78>
   12514:	cmp	r0, #0
   12518:	beq	12538 <__assert_fail@plt+0x14b0>
   1251c:	ldr	r0, [fp, #8]
   12520:	cmp	r0, #0
   12524:	ldrne	r1, [sp, #4]
   12528:	strne	r1, [r0]
   1252c:	mov	r0, r5
   12530:	sub	sp, fp, #24
   12534:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12538:	ldr	r0, [r4]
   1253c:	bl	12798 <__assert_fail@plt+0x1710>
   12540:	mov	r5, #0
   12544:	str	r5, [r4]
   12548:	mov	r0, r5
   1254c:	sub	sp, fp, #24
   12550:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12554:	movw	r1, #37208	; 0x9158
   12558:	movt	r1, #2
   1255c:	str	r0, [r1, #4]
   12560:	bx	lr
   12564:	movw	r1, #37208	; 0x9158
   12568:	movt	r1, #2
   1256c:	strb	r0, [r1]
   12570:	bx	lr
   12574:	push	{r4, r5, r6, sl, fp, lr}
   12578:	add	fp, sp, #16
   1257c:	sub	sp, sp, #8
   12580:	movw	r0, #37196	; 0x914c
   12584:	movt	r0, #2
   12588:	ldr	r0, [r0]
   1258c:	bl	16ebc <__assert_fail@plt+0x5e34>
   12590:	cmp	r0, #0
   12594:	beq	125bc <__assert_fail@plt+0x1534>
   12598:	movw	r5, #37208	; 0x9158
   1259c:	movt	r5, #2
   125a0:	ldrb	r0, [r5]
   125a4:	cmp	r0, #0
   125a8:	beq	125e8 <__assert_fail@plt+0x1560>
   125ac:	bl	10fa4 <__errno_location@plt>
   125b0:	ldr	r0, [r0]
   125b4:	cmp	r0, #32
   125b8:	bne	125e8 <__assert_fail@plt+0x1560>
   125bc:	movw	r0, #37184	; 0x9140
   125c0:	movt	r0, #2
   125c4:	ldr	r0, [r0]
   125c8:	bl	16ebc <__assert_fail@plt+0x5e34>
   125cc:	cmp	r0, #0
   125d0:	subeq	sp, fp, #16
   125d4:	popeq	{r4, r5, r6, sl, fp, pc}
   125d8:	movw	r0, #37100	; 0x90ec
   125dc:	movt	r0, #2
   125e0:	ldr	r0, [r0]
   125e4:	bl	10e84 <_exit@plt>
   125e8:	movw	r1, #31036	; 0x793c
   125ec:	mov	r0, #0
   125f0:	mov	r2, #5
   125f4:	movt	r1, #1
   125f8:	bl	10eb4 <dcgettext@plt>
   125fc:	ldr	r6, [r5, #4]
   12600:	mov	r4, r0
   12604:	bl	10fa4 <__errno_location@plt>
   12608:	ldr	r5, [r0]
   1260c:	cmp	r6, #0
   12610:	bne	1262c <__assert_fail@plt+0x15a4>
   12614:	movw	r2, #30472	; 0x7708
   12618:	mov	r0, #0
   1261c:	mov	r1, r5
   12620:	mov	r3, r4
   12624:	movt	r2, #1
   12628:	b	1264c <__assert_fail@plt+0x15c4>
   1262c:	mov	r0, r6
   12630:	bl	144a4 <__assert_fail@plt+0x341c>
   12634:	movw	r2, #30468	; 0x7704
   12638:	mov	r3, r0
   1263c:	str	r4, [sp]
   12640:	mov	r0, #0
   12644:	mov	r1, r5
   12648:	movt	r2, #1
   1264c:	bl	10f20 <error@plt>
   12650:	movw	r0, #37100	; 0x90ec
   12654:	movt	r0, #2
   12658:	ldr	r0, [r0]
   1265c:	bl	10e84 <_exit@plt>
   12660:	b	10e54 <posix_fadvise64@plt>
   12664:	cmp	r0, #0
   12668:	bxeq	lr
   1266c:	push	{r4, sl, fp, lr}
   12670:	add	fp, sp, #8
   12674:	sub	sp, sp, #16
   12678:	mov	r4, r1
   1267c:	bl	10fd4 <fileno@plt>
   12680:	mov	r1, #0
   12684:	mov	r2, #0
   12688:	mov	r3, #0
   1268c:	str	r1, [sp]
   12690:	stmib	sp, {r1, r4}
   12694:	bl	10e54 <posix_fadvise64@plt>
   12698:	sub	sp, fp, #8
   1269c:	pop	{r4, sl, fp, pc}
   126a0:	push	{r4, r5, r6, sl, fp, lr}
   126a4:	add	fp, sp, #16
   126a8:	sub	sp, sp, #8
   126ac:	mov	r4, r0
   126b0:	bl	10fd4 <fileno@plt>
   126b4:	cmn	r0, #1
   126b8:	ble	1272c <__assert_fail@plt+0x16a4>
   126bc:	mov	r0, r4
   126c0:	bl	10f44 <__freading@plt>
   126c4:	cmp	r0, #0
   126c8:	beq	126f4 <__assert_fail@plt+0x166c>
   126cc:	mov	r0, r4
   126d0:	bl	10fd4 <fileno@plt>
   126d4:	mov	r1, #1
   126d8:	mov	r2, #0
   126dc:	mov	r3, #0
   126e0:	str	r1, [sp]
   126e4:	bl	10ef0 <lseek64@plt>
   126e8:	and	r0, r0, r1
   126ec:	cmn	r0, #1
   126f0:	beq	1272c <__assert_fail@plt+0x16a4>
   126f4:	mov	r0, r4
   126f8:	bl	1273c <__assert_fail@plt+0x16b4>
   126fc:	cmp	r0, #0
   12700:	beq	1272c <__assert_fail@plt+0x16a4>
   12704:	bl	10fa4 <__errno_location@plt>
   12708:	ldr	r6, [r0]
   1270c:	mov	r5, r0
   12710:	mov	r0, r4
   12714:	bl	10ff8 <fclose@plt>
   12718:	cmp	r6, #0
   1271c:	strne	r6, [r5]
   12720:	mvnne	r0, #0
   12724:	sub	sp, fp, #16
   12728:	pop	{r4, r5, r6, sl, fp, pc}
   1272c:	mov	r0, r4
   12730:	sub	sp, fp, #16
   12734:	pop	{r4, r5, r6, sl, fp, lr}
   12738:	b	10ff8 <fclose@plt>
   1273c:	push	{r4, sl, fp, lr}
   12740:	add	fp, sp, #8
   12744:	sub	sp, sp, #8
   12748:	mov	r4, r0
   1274c:	cmp	r0, #0
   12750:	beq	12788 <__assert_fail@plt+0x1700>
   12754:	mov	r0, r4
   12758:	bl	10f44 <__freading@plt>
   1275c:	cmp	r0, #0
   12760:	beq	12788 <__assert_fail@plt+0x1700>
   12764:	ldrb	r0, [r4, #1]
   12768:	tst	r0, #1
   1276c:	beq	12788 <__assert_fail@plt+0x1700>
   12770:	mov	r0, #1
   12774:	mov	r2, #0
   12778:	mov	r3, #0
   1277c:	str	r0, [sp]
   12780:	mov	r0, r4
   12784:	bl	127c0 <__assert_fail@plt+0x1738>
   12788:	mov	r0, r4
   1278c:	sub	sp, fp, #8
   12790:	pop	{r4, sl, fp, lr}
   12794:	b	10e60 <fflush@plt>
   12798:	push	{r4, r5, r6, sl, fp, lr}
   1279c:	add	fp, sp, #16
   127a0:	mov	r4, r0
   127a4:	bl	10fa4 <__errno_location@plt>
   127a8:	ldr	r6, [r0]
   127ac:	mov	r5, r0
   127b0:	mov	r0, r4
   127b4:	bl	10e78 <free@plt>
   127b8:	str	r6, [r5]
   127bc:	pop	{r4, r5, r6, sl, fp, pc}
   127c0:	push	{r4, r5, r6, r7, fp, lr}
   127c4:	add	fp, sp, #16
   127c8:	sub	sp, sp, #8
   127cc:	mov	r4, r0
   127d0:	ldr	r0, [r0, #4]
   127d4:	mov	r5, r3
   127d8:	mov	r6, r2
   127dc:	ldr	r1, [r4, #8]
   127e0:	cmp	r1, r0
   127e4:	bne	12800 <__assert_fail@plt+0x1778>
   127e8:	ldrd	r0, [r4, #16]
   127ec:	cmp	r1, r0
   127f0:	bne	12800 <__assert_fail@plt+0x1778>
   127f4:	ldr	r0, [r4, #36]	; 0x24
   127f8:	cmp	r0, #0
   127fc:	beq	12818 <__assert_fail@plt+0x1790>
   12800:	mov	r0, r4
   12804:	mov	r2, r6
   12808:	mov	r3, r5
   1280c:	sub	sp, fp, #16
   12810:	pop	{r4, r5, r6, r7, fp, lr}
   12814:	b	11004 <fseeko64@plt>
   12818:	ldr	r7, [fp, #8]
   1281c:	mov	r0, r4
   12820:	bl	10fd4 <fileno@plt>
   12824:	mov	r2, r6
   12828:	mov	r3, r5
   1282c:	str	r7, [sp]
   12830:	bl	10ef0 <lseek64@plt>
   12834:	and	r2, r0, r1
   12838:	cmn	r2, #1
   1283c:	beq	1285c <__assert_fail@plt+0x17d4>
   12840:	strd	r0, [r4, #80]	; 0x50
   12844:	ldr	r0, [r4]
   12848:	bic	r0, r0, #16
   1284c:	str	r0, [r4]
   12850:	mov	r0, #0
   12854:	sub	sp, fp, #16
   12858:	pop	{r4, r5, r6, r7, fp, pc}
   1285c:	mvn	r0, #0
   12860:	sub	sp, fp, #16
   12864:	pop	{r4, r5, r6, r7, fp, pc}
   12868:	push	{r4, r5, fp, lr}
   1286c:	add	fp, sp, #8
   12870:	cmp	r0, #0
   12874:	beq	12908 <__assert_fail@plt+0x1880>
   12878:	mov	r1, #47	; 0x2f
   1287c:	mov	r4, r0
   12880:	bl	11028 <strrchr@plt>
   12884:	cmp	r0, #0
   12888:	mov	r5, r4
   1288c:	addne	r5, r0, #1
   12890:	sub	r0, r5, r4
   12894:	cmp	r0, #7
   12898:	blt	128ec <__assert_fail@plt+0x1864>
   1289c:	movw	r1, #31631	; 0x7b8f
   128a0:	sub	r0, r5, #7
   128a4:	mov	r2, #7
   128a8:	movt	r1, #1
   128ac:	bl	11070 <strncmp@plt>
   128b0:	cmp	r0, #0
   128b4:	bne	128ec <__assert_fail@plt+0x1864>
   128b8:	movw	r1, #31639	; 0x7b97
   128bc:	mov	r0, r5
   128c0:	mov	r2, #3
   128c4:	movt	r1, #1
   128c8:	bl	11070 <strncmp@plt>
   128cc:	cmp	r0, #0
   128d0:	beq	128dc <__assert_fail@plt+0x1854>
   128d4:	mov	r4, r5
   128d8:	b	128ec <__assert_fail@plt+0x1864>
   128dc:	movw	r0, #37168	; 0x9130
   128e0:	add	r4, r5, #3
   128e4:	movt	r0, #2
   128e8:	str	r4, [r0]
   128ec:	movw	r0, #37172	; 0x9134
   128f0:	movt	r0, #2
   128f4:	str	r4, [r0]
   128f8:	movw	r0, #37216	; 0x9160
   128fc:	movt	r0, #2
   12900:	str	r4, [r0]
   12904:	pop	{r4, r5, fp, pc}
   12908:	movw	r0, #37184	; 0x9140
   1290c:	mov	r1, #55	; 0x37
   12910:	mov	r2, #1
   12914:	movt	r0, #2
   12918:	ldr	r3, [r0]
   1291c:	movw	r0, #31575	; 0x7b57
   12920:	movt	r0, #1
   12924:	bl	10ee4 <fwrite@plt>
   12928:	bl	1107c <abort@plt>
   1292c:	push	{r4, r5, r6, sl, fp, lr}
   12930:	add	fp, sp, #16
   12934:	mov	r4, r0
   12938:	movw	r0, #37224	; 0x9168
   1293c:	movt	r0, #2
   12940:	cmp	r4, #0
   12944:	moveq	r4, r0
   12948:	bl	10fa4 <__errno_location@plt>
   1294c:	ldr	r6, [r0]
   12950:	mov	r5, r0
   12954:	mov	r0, r4
   12958:	mov	r1, #48	; 0x30
   1295c:	bl	15364 <__assert_fail@plt+0x42dc>
   12960:	str	r6, [r5]
   12964:	pop	{r4, r5, r6, sl, fp, pc}
   12968:	movw	r1, #37224	; 0x9168
   1296c:	cmp	r0, #0
   12970:	movt	r1, #2
   12974:	movne	r1, r0
   12978:	ldr	r0, [r1]
   1297c:	bx	lr
   12980:	movw	r2, #37224	; 0x9168
   12984:	cmp	r0, #0
   12988:	movt	r2, #2
   1298c:	movne	r2, r0
   12990:	str	r1, [r2]
   12994:	bx	lr
   12998:	movw	r3, #37224	; 0x9168
   1299c:	cmp	r0, #0
   129a0:	and	r2, r2, #1
   129a4:	movt	r3, #2
   129a8:	movne	r3, r0
   129ac:	ubfx	r0, r1, #5, #3
   129b0:	and	r1, r1, #31
   129b4:	add	ip, r3, r0, lsl #2
   129b8:	mov	r0, #1
   129bc:	ldr	r3, [ip, #8]
   129c0:	and	r0, r0, r3, lsr r1
   129c4:	eor	r2, r0, r2
   129c8:	eor	r1, r3, r2, lsl r1
   129cc:	str	r1, [ip, #8]
   129d0:	bx	lr
   129d4:	movw	r2, #37224	; 0x9168
   129d8:	cmp	r0, #0
   129dc:	movt	r2, #2
   129e0:	movne	r2, r0
   129e4:	ldr	r0, [r2, #4]
   129e8:	str	r1, [r2, #4]
   129ec:	bx	lr
   129f0:	push	{fp, lr}
   129f4:	mov	fp, sp
   129f8:	movw	r3, #37224	; 0x9168
   129fc:	cmp	r0, #0
   12a00:	movt	r3, #2
   12a04:	movne	r3, r0
   12a08:	cmp	r1, #0
   12a0c:	mov	r0, #10
   12a10:	cmpne	r2, #0
   12a14:	str	r0, [r3]
   12a18:	bne	12a20 <__assert_fail@plt+0x1998>
   12a1c:	bl	1107c <abort@plt>
   12a20:	str	r1, [r3, #40]	; 0x28
   12a24:	str	r2, [r3, #44]	; 0x2c
   12a28:	pop	{fp, pc}
   12a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a30:	add	fp, sp, #28
   12a34:	sub	sp, sp, #20
   12a38:	mov	r7, r0
   12a3c:	ldr	r0, [fp, #8]
   12a40:	movw	r5, #37224	; 0x9168
   12a44:	mov	r8, r3
   12a48:	mov	r9, r2
   12a4c:	mov	sl, r1
   12a50:	movt	r5, #2
   12a54:	cmp	r0, #0
   12a58:	movne	r5, r0
   12a5c:	bl	10fa4 <__errno_location@plt>
   12a60:	ldr	r2, [r5, #40]	; 0x28
   12a64:	ldr	r3, [r5, #44]	; 0x2c
   12a68:	mov	r4, r0
   12a6c:	ldm	r5, {r0, r1}
   12a70:	add	r5, r5, #8
   12a74:	ldr	r6, [r4]
   12a78:	stm	sp, {r0, r1, r5}
   12a7c:	mov	r0, r7
   12a80:	mov	r1, sl
   12a84:	str	r2, [sp, #12]
   12a88:	str	r3, [sp, #16]
   12a8c:	mov	r2, r9
   12a90:	mov	r3, r8
   12a94:	bl	12aa4 <__assert_fail@plt+0x1a1c>
   12a98:	str	r6, [r4]
   12a9c:	sub	sp, fp, #28
   12aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12aa8:	add	fp, sp, #28
   12aac:	sub	sp, sp, #156	; 0x9c
   12ab0:	str	r0, [fp, #-84]	; 0xffffffac
   12ab4:	add	r0, r2, #1
   12ab8:	mov	r6, r1
   12abc:	mov	r7, r3
   12ac0:	str	r2, [fp, #-80]	; 0xffffffb0
   12ac4:	str	r0, [sp, #80]	; 0x50
   12ac8:	ldr	r0, [fp, #12]
   12acc:	and	r1, r0, #1
   12ad0:	str	r1, [sp, #36]	; 0x24
   12ad4:	and	r1, r0, #4
   12ad8:	str	r1, [sp, #32]
   12adc:	ubfx	r8, r0, #1, #1
   12ae0:	bl	10efc <__ctype_get_mb_cur_max@plt>
   12ae4:	str	r0, [sp, #40]	; 0x28
   12ae8:	ldr	r0, [fp, #24]
   12aec:	ldr	r4, [fp, #8]
   12af0:	mov	r1, #0
   12af4:	str	r1, [fp, #-52]	; 0xffffffcc
   12af8:	mov	r1, #0
   12afc:	str	r1, [sp, #60]	; 0x3c
   12b00:	mov	r1, #1
   12b04:	str	r1, [sp, #84]	; 0x54
   12b08:	str	r0, [sp, #76]	; 0x4c
   12b0c:	ldr	r0, [fp, #20]
   12b10:	str	r0, [sp, #72]	; 0x48
   12b14:	mov	r0, #0
   12b18:	str	r0, [sp, #56]	; 0x38
   12b1c:	mov	r0, #0
   12b20:	str	r0, [fp, #-88]	; 0xffffffa8
   12b24:	mov	r0, #0
   12b28:	str	r0, [fp, #-72]	; 0xffffffb8
   12b2c:	mov	r0, #0
   12b30:	cmp	r4, #10
   12b34:	bhi	13e50 <__assert_fail@plt+0x2dc8>
   12b38:	add	r1, pc, #24
   12b3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b40:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12b44:	mov	r5, r6
   12b48:	mov	r9, #0
   12b4c:	mov	r2, #1
   12b50:	mov	r3, #0
   12b54:	ldr	pc, [r1, r4, lsl #2]
   12b58:	andeq	r2, r1, r0, lsr #24
   12b5c:	andeq	r2, r1, ip, asr ip
   12b60:	andeq	r2, r1, r0, lsr ip
   12b64:	andeq	r2, r1, r8, lsl ip
   12b68:	andeq	r2, r1, r0, asr ip
   12b6c:			; <UNDEFINED> instruction: 0x00012cb4
   12b70:	andeq	r2, r1, r0, asr #24
   12b74:	andeq	r2, r1, ip, lsr #30
   12b78:	andeq	r2, r1, r4, lsl #23
   12b7c:	andeq	r2, r1, r4, lsl #23
   12b80:			; <UNDEFINED> instruction: 0x00012dbc
   12b84:	movw	r6, #31721	; 0x7be9
   12b88:	mov	r0, #0
   12b8c:	mov	r2, #5
   12b90:	movt	r6, #1
   12b94:	mov	r1, r6
   12b98:	bl	10eb4 <dcgettext@plt>
   12b9c:	cmp	r0, r6
   12ba0:	str	r0, [sp, #72]	; 0x48
   12ba4:	bne	12d94 <__assert_fail@plt+0x1d0c>
   12ba8:	bl	16f40 <__assert_fail@plt+0x5eb8>
   12bac:	ldrb	r1, [r0]
   12bb0:	and	r1, r1, #223	; 0xdf
   12bb4:	cmp	r1, #71	; 0x47
   12bb8:	beq	12d14 <__assert_fail@plt+0x1c8c>
   12bbc:	cmp	r1, #85	; 0x55
   12bc0:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12bc4:	ldrb	r1, [r0, #1]
   12bc8:	and	r1, r1, #223	; 0xdf
   12bcc:	cmp	r1, #84	; 0x54
   12bd0:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12bd4:	ldrb	r1, [r0, #2]
   12bd8:	and	r1, r1, #223	; 0xdf
   12bdc:	cmp	r1, #70	; 0x46
   12be0:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12be4:	ldrb	r1, [r0, #3]
   12be8:	cmp	r1, #45	; 0x2d
   12bec:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12bf0:	ldrb	r1, [r0, #4]
   12bf4:	cmp	r1, #56	; 0x38
   12bf8:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12bfc:	ldrb	r0, [r0, #5]
   12c00:	cmp	r0, #0
   12c04:	movw	r0, #31725	; 0x7bed
   12c08:	movt	r0, #1
   12c0c:	str	r0, [sp, #72]	; 0x48
   12c10:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12c14:	b	12d94 <__assert_fail@plt+0x1d0c>
   12c18:	mov	r0, #1
   12c1c:	b	12c5c <__assert_fail@plt+0x1bd4>
   12c20:	mov	r4, #0
   12c24:	mov	r9, #0
   12c28:	mov	r2, r0
   12c2c:	b	12cac <__assert_fail@plt+0x1c24>
   12c30:	tst	r8, #1
   12c34:	bne	12c5c <__assert_fail@plt+0x1bd4>
   12c38:	mov	r2, r0
   12c3c:	b	12c84 <__assert_fail@plt+0x1bfc>
   12c40:	mov	r0, #1
   12c44:	mov	r9, #0
   12c48:	mov	r4, #5
   12c4c:	b	12cc8 <__assert_fail@plt+0x1c40>
   12c50:	mov	r2, #1
   12c54:	tst	r8, #1
   12c58:	beq	12c84 <__assert_fail@plt+0x1bfc>
   12c5c:	mov	r1, #1
   12c60:	mov	r9, #0
   12c64:	mov	r4, #2
   12c68:	mov	r2, r0
   12c6c:	mov	r3, #1
   12c70:	str	r1, [fp, #-72]	; 0xffffffb8
   12c74:	movw	r1, #31723	; 0x7beb
   12c78:	movt	r1, #1
   12c7c:	str	r1, [fp, #-88]	; 0xffffffa8
   12c80:	b	12f2c <__assert_fail@plt+0x1ea4>
   12c84:	cmp	r5, #0
   12c88:	mov	r9, #1
   12c8c:	mov	r4, #2
   12c90:	movne	r0, #39	; 0x27
   12c94:	strbne	r0, [ip]
   12c98:	movw	r0, #31723	; 0x7beb
   12c9c:	movt	r0, #1
   12ca0:	str	r0, [fp, #-88]	; 0xffffffa8
   12ca4:	mov	r0, #1
   12ca8:	str	r0, [fp, #-72]	; 0xffffffb8
   12cac:	mov	r3, #0
   12cb0:	b	12f2c <__assert_fail@plt+0x1ea4>
   12cb4:	mov	r4, #5
   12cb8:	tst	r8, #1
   12cbc:	beq	12ce4 <__assert_fail@plt+0x1c5c>
   12cc0:	mov	r0, #1
   12cc4:	mov	r9, #0
   12cc8:	str	r0, [fp, #-72]	; 0xffffffb8
   12ccc:	movw	r0, #31719	; 0x7be7
   12cd0:	mov	r2, #1
   12cd4:	mov	r3, #1
   12cd8:	movt	r0, #1
   12cdc:	str	r0, [fp, #-88]	; 0xffffffa8
   12ce0:	b	12f2c <__assert_fail@plt+0x1ea4>
   12ce4:	cmp	r5, #0
   12ce8:	mov	r3, #0
   12cec:	mov	r9, #1
   12cf0:	mov	r2, #1
   12cf4:	movne	r0, #34	; 0x22
   12cf8:	strbne	r0, [ip]
   12cfc:	movw	r0, #31719	; 0x7be7
   12d00:	movt	r0, #1
   12d04:	str	r0, [fp, #-88]	; 0xffffffa8
   12d08:	mov	r0, #1
   12d0c:	str	r0, [fp, #-72]	; 0xffffffb8
   12d10:	b	12f2c <__assert_fail@plt+0x1ea4>
   12d14:	ldrb	r1, [r0, #1]
   12d18:	and	r1, r1, #223	; 0xdf
   12d1c:	cmp	r1, #66	; 0x42
   12d20:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12d24:	ldrb	r1, [r0, #2]
   12d28:	cmp	r1, #49	; 0x31
   12d2c:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12d30:	ldrb	r1, [r0, #3]
   12d34:	cmp	r1, #56	; 0x38
   12d38:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12d3c:	ldrb	r1, [r0, #4]
   12d40:	cmp	r1, #48	; 0x30
   12d44:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12d48:	ldrb	r1, [r0, #5]
   12d4c:	cmp	r1, #51	; 0x33
   12d50:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12d54:	ldrb	r1, [r0, #6]
   12d58:	cmp	r1, #48	; 0x30
   12d5c:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12d60:	ldrb	r0, [r0, #7]
   12d64:	cmp	r0, #0
   12d68:	movw	r0, #31733	; 0x7bf5
   12d6c:	movt	r0, #1
   12d70:	str	r0, [sp, #72]	; 0x48
   12d74:	beq	12d94 <__assert_fail@plt+0x1d0c>
   12d78:	movw	r1, #31719	; 0x7be7
   12d7c:	movw	r0, #31723	; 0x7beb
   12d80:	cmp	r4, #9
   12d84:	movt	r1, #1
   12d88:	movt	r0, #1
   12d8c:	moveq	r0, r1
   12d90:	str	r0, [sp, #72]	; 0x48
   12d94:	movw	r6, #31723	; 0x7beb
   12d98:	mov	r0, #0
   12d9c:	mov	r2, #5
   12da0:	movt	r6, #1
   12da4:	mov	r1, r6
   12da8:	bl	10eb4 <dcgettext@plt>
   12dac:	cmp	r0, r6
   12db0:	str	r0, [sp, #76]	; 0x4c
   12db4:	beq	12e00 <__assert_fail@plt+0x1d78>
   12db8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12dbc:	mov	r9, #0
   12dc0:	tst	r8, #1
   12dc4:	bne	12f08 <__assert_fail@plt+0x1e80>
   12dc8:	ldr	r0, [sp, #72]	; 0x48
   12dcc:	ldrb	r0, [r0]
   12dd0:	cmp	r0, #0
   12dd4:	beq	12f08 <__assert_fail@plt+0x1e80>
   12dd8:	ldr	r1, [sp, #72]	; 0x48
   12ddc:	mov	r9, #0
   12de0:	add	r1, r1, #1
   12de4:	cmp	r9, r5
   12de8:	strbcc	r0, [ip, r9]
   12dec:	ldrb	r0, [r1, r9]
   12df0:	add	r9, r9, #1
   12df4:	cmp	r0, #0
   12df8:	bne	12de4 <__assert_fail@plt+0x1d5c>
   12dfc:	b	12f08 <__assert_fail@plt+0x1e80>
   12e00:	bl	16f40 <__assert_fail@plt+0x5eb8>
   12e04:	ldrb	r1, [r0]
   12e08:	and	r1, r1, #223	; 0xdf
   12e0c:	cmp	r1, #71	; 0x47
   12e10:	beq	12e80 <__assert_fail@plt+0x1df8>
   12e14:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e18:	cmp	r1, #85	; 0x55
   12e1c:	bne	12edc <__assert_fail@plt+0x1e54>
   12e20:	ldrb	r1, [r0, #1]
   12e24:	and	r1, r1, #223	; 0xdf
   12e28:	cmp	r1, #84	; 0x54
   12e2c:	bne	12edc <__assert_fail@plt+0x1e54>
   12e30:	ldrb	r1, [r0, #2]
   12e34:	and	r1, r1, #223	; 0xdf
   12e38:	cmp	r1, #70	; 0x46
   12e3c:	bne	12edc <__assert_fail@plt+0x1e54>
   12e40:	ldrb	r1, [r0, #3]
   12e44:	cmp	r1, #45	; 0x2d
   12e48:	bne	12edc <__assert_fail@plt+0x1e54>
   12e4c:	ldrb	r1, [r0, #4]
   12e50:	cmp	r1, #56	; 0x38
   12e54:	bne	12edc <__assert_fail@plt+0x1e54>
   12e58:	ldrb	r0, [r0, #5]
   12e5c:	cmp	r0, #0
   12e60:	bne	12edc <__assert_fail@plt+0x1e54>
   12e64:	movw	r0, #31729	; 0x7bf1
   12e68:	movt	r0, #1
   12e6c:	str	r0, [sp, #76]	; 0x4c
   12e70:	mov	r9, #0
   12e74:	tst	r8, #1
   12e78:	beq	12dc8 <__assert_fail@plt+0x1d40>
   12e7c:	b	12f08 <__assert_fail@plt+0x1e80>
   12e80:	ldrb	r1, [r0, #1]
   12e84:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e88:	and	r1, r1, #223	; 0xdf
   12e8c:	cmp	r1, #66	; 0x42
   12e90:	bne	12edc <__assert_fail@plt+0x1e54>
   12e94:	ldrb	r1, [r0, #2]
   12e98:	cmp	r1, #49	; 0x31
   12e9c:	bne	12edc <__assert_fail@plt+0x1e54>
   12ea0:	ldrb	r1, [r0, #3]
   12ea4:	cmp	r1, #56	; 0x38
   12ea8:	bne	12edc <__assert_fail@plt+0x1e54>
   12eac:	ldrb	r1, [r0, #4]
   12eb0:	cmp	r1, #48	; 0x30
   12eb4:	bne	12edc <__assert_fail@plt+0x1e54>
   12eb8:	ldrb	r1, [r0, #5]
   12ebc:	cmp	r1, #51	; 0x33
   12ec0:	bne	12edc <__assert_fail@plt+0x1e54>
   12ec4:	ldrb	r1, [r0, #6]
   12ec8:	cmp	r1, #48	; 0x30
   12ecc:	bne	12edc <__assert_fail@plt+0x1e54>
   12ed0:	ldrb	r0, [r0, #7]
   12ed4:	cmp	r0, #0
   12ed8:	beq	13cf0 <__assert_fail@plt+0x2c68>
   12edc:	movw	r0, #31723	; 0x7beb
   12ee0:	cmp	r4, #9
   12ee4:	movt	r0, #1
   12ee8:	mov	r1, r0
   12eec:	movw	r0, #31719	; 0x7be7
   12ef0:	movt	r0, #1
   12ef4:	moveq	r1, r0
   12ef8:	str	r1, [sp, #76]	; 0x4c
   12efc:	mov	r9, #0
   12f00:	tst	r8, #1
   12f04:	beq	12dc8 <__assert_fail@plt+0x1d40>
   12f08:	ldr	r6, [sp, #76]	; 0x4c
   12f0c:	mov	r0, r6
   12f10:	bl	10f8c <strlen@plt>
   12f14:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f18:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12f1c:	str	r0, [fp, #-72]	; 0xffffffb8
   12f20:	str	r6, [fp, #-88]	; 0xffffffa8
   12f24:	mov	r2, #1
   12f28:	mov	r3, r8
   12f2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f30:	str	r4, [fp, #-64]	; 0xffffffc0
   12f34:	mov	sl, #0
   12f38:	str	r3, [fp, #-76]	; 0xffffffb4
   12f3c:	str	r2, [sp, #88]	; 0x58
   12f40:	cmp	r0, #0
   12f44:	movwne	r0, #1
   12f48:	and	r1, r0, r3
   12f4c:	and	r1, r2, r1
   12f50:	str	r1, [sp, #48]	; 0x30
   12f54:	sub	r1, r4, #2
   12f58:	clz	r1, r1
   12f5c:	lsr	r1, r1, #5
   12f60:	and	r1, r1, r3
   12f64:	str	r1, [sp, #44]	; 0x2c
   12f68:	subs	r1, r4, #2
   12f6c:	eor	r4, r3, #1
   12f70:	movwne	r1, #1
   12f74:	str	r4, [sp, #92]	; 0x5c
   12f78:	orr	r4, r1, r4
   12f7c:	and	r1, r1, r2
   12f80:	and	r0, r0, r1
   12f84:	str	r4, [sp, #64]	; 0x40
   12f88:	ldr	r4, [sp, #84]	; 0x54
   12f8c:	str	r0, [fp, #-60]	; 0xffffffc4
   12f90:	orr	r0, r1, r3
   12f94:	ldr	r1, [fp, #16]
   12f98:	eor	r0, r0, #1
   12f9c:	clz	r1, r1
   12fa0:	lsr	r1, r1, #5
   12fa4:	orr	r0, r1, r0
   12fa8:	str	r0, [fp, #-68]	; 0xffffffbc
   12fac:	eor	r0, r2, #1
   12fb0:	str	r0, [sp, #52]	; 0x34
   12fb4:	cmn	r7, #1
   12fb8:	beq	12fc8 <__assert_fail@plt+0x1f40>
   12fbc:	cmp	sl, r7
   12fc0:	bne	12fd4 <__assert_fail@plt+0x1f4c>
   12fc4:	b	13c68 <__assert_fail@plt+0x2be0>
   12fc8:	ldrb	r0, [lr, sl]
   12fcc:	cmp	r0, #0
   12fd0:	beq	13c70 <__assert_fail@plt+0x2be8>
   12fd4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12fd8:	cmp	r0, #0
   12fdc:	beq	1303c <__assert_fail@plt+0x1fb4>
   12fe0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fe4:	mov	r6, r5
   12fe8:	add	r5, sl, r0
   12fec:	cmp	r0, #2
   12ff0:	bcc	1305c <__assert_fail@plt+0x1fd4>
   12ff4:	mov	r0, #0
   12ff8:	cmn	r7, #1
   12ffc:	str	r0, [fp, #-56]	; 0xffffffc8
   13000:	bne	13018 <__assert_fail@plt+0x1f90>
   13004:	mov	r0, lr
   13008:	bl	10f8c <strlen@plt>
   1300c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13010:	ldr	ip, [fp, #-84]	; 0xffffffac
   13014:	mov	r7, r0
   13018:	cmp	r5, r7
   1301c:	bls	1306c <__assert_fail@plt+0x1fe4>
   13020:	mov	r0, #0
   13024:	mov	r5, r6
   13028:	str	r0, [fp, #-48]	; 0xffffffd0
   1302c:	ldrb	r6, [lr, sl]
   13030:	cmp	r6, #126	; 0x7e
   13034:	bls	130bc <__assert_fail@plt+0x2034>
   13038:	b	13618 <__assert_fail@plt+0x2590>
   1303c:	mov	r0, #0
   13040:	str	r0, [fp, #-56]	; 0xffffffc8
   13044:	mov	r0, #0
   13048:	str	r0, [fp, #-48]	; 0xffffffd0
   1304c:	ldrb	r6, [lr, sl]
   13050:	cmp	r6, #126	; 0x7e
   13054:	bls	130bc <__assert_fail@plt+0x2034>
   13058:	b	13618 <__assert_fail@plt+0x2590>
   1305c:	mov	r0, #0
   13060:	str	r0, [fp, #-56]	; 0xffffffc8
   13064:	cmp	r5, r7
   13068:	bhi	13020 <__assert_fail@plt+0x1f98>
   1306c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13070:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13074:	add	r0, lr, sl
   13078:	bl	10f80 <bcmp@plt>
   1307c:	ldr	r2, [sp, #92]	; 0x5c
   13080:	cmp	r0, #0
   13084:	mov	r1, r0
   13088:	mov	r5, r6
   1308c:	movwne	r1, #1
   13090:	orr	r1, r1, r2
   13094:	tst	r1, #1
   13098:	beq	13d30 <__assert_fail@plt+0x2ca8>
   1309c:	ldr	ip, [fp, #-84]	; 0xffffffac
   130a0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   130a4:	clz	r0, r0
   130a8:	lsr	r0, r0, #5
   130ac:	str	r0, [fp, #-48]	; 0xffffffd0
   130b0:	ldrb	r6, [lr, sl]
   130b4:	cmp	r6, #126	; 0x7e
   130b8:	bhi	13618 <__assert_fail@plt+0x2590>
   130bc:	add	r3, pc, #16
   130c0:	mov	r8, #1
   130c4:	mov	r2, #110	; 0x6e
   130c8:	mov	r0, #97	; 0x61
   130cc:	mov	r1, #0
   130d0:	ldr	pc, [r3, r6, lsl #2]
   130d4:	ldrdeq	r3, [r1], -r0
   130d8:	andeq	r3, r1, r8, lsl r6
   130dc:	andeq	r3, r1, r8, lsl r6
   130e0:	andeq	r3, r1, r8, lsl r6
   130e4:	andeq	r3, r1, r8, lsl r6
   130e8:	andeq	r3, r1, r8, lsl r6
   130ec:	andeq	r3, r1, r8, lsl r6
   130f0:	andeq	r3, r1, ip, asr #13
   130f4:			; <UNDEFINED> instruction: 0x000133b0
   130f8:	andeq	r3, r1, r8, lsr #7
   130fc:			; <UNDEFINED> instruction: 0x000133bc
   13100:	andeq	r3, r1, ip, ror #9
   13104:	andeq	r3, r1, r0, lsr #7
   13108:			; <UNDEFINED> instruction: 0x000133b8
   1310c:	andeq	r3, r1, r8, lsl r6
   13110:	andeq	r3, r1, r8, lsl r6
   13114:	andeq	r3, r1, r8, lsl r6
   13118:	andeq	r3, r1, r8, lsl r6
   1311c:	andeq	r3, r1, r8, lsl r6
   13120:	andeq	r3, r1, r8, lsl r6
   13124:	andeq	r3, r1, r8, lsl r6
   13128:	andeq	r3, r1, r8, lsl r6
   1312c:	andeq	r3, r1, r8, lsl r6
   13130:	andeq	r3, r1, r8, lsl r6
   13134:	andeq	r3, r1, r8, lsl r6
   13138:	andeq	r3, r1, r8, lsl r6
   1313c:	andeq	r3, r1, r8, lsl r6
   13140:	andeq	r3, r1, r8, lsl r6
   13144:	andeq	r3, r1, r8, lsl r6
   13148:	andeq	r3, r1, r8, lsl r6
   1314c:	andeq	r3, r1, r8, lsl r6
   13150:	andeq	r3, r1, r8, lsl r6
   13154:	andeq	r3, r1, r4, asr #6
   13158:	andeq	r3, r1, r8, asr #6
   1315c:	andeq	r3, r1, r8, asr #6
   13160:	andeq	r3, r1, r8, lsr r3
   13164:	andeq	r3, r1, r8, asr #6
   13168:	ldrdeq	r3, [r1], -r0
   1316c:	andeq	r3, r1, r8, asr #6
   13170:	strdeq	r3, [r1], -r4
   13174:	andeq	r3, r1, r8, asr #6
   13178:	andeq	r3, r1, r8, asr #6
   1317c:	andeq	r3, r1, r8, asr #6
   13180:	ldrdeq	r3, [r1], -r0
   13184:	ldrdeq	r3, [r1], -r0
   13188:	ldrdeq	r3, [r1], -r0
   1318c:	ldrdeq	r3, [r1], -r0
   13190:	ldrdeq	r3, [r1], -r0
   13194:	ldrdeq	r3, [r1], -r0
   13198:	ldrdeq	r3, [r1], -r0
   1319c:	ldrdeq	r3, [r1], -r0
   131a0:	ldrdeq	r3, [r1], -r0
   131a4:	ldrdeq	r3, [r1], -r0
   131a8:	ldrdeq	r3, [r1], -r0
   131ac:	ldrdeq	r3, [r1], -r0
   131b0:	ldrdeq	r3, [r1], -r0
   131b4:	ldrdeq	r3, [r1], -r0
   131b8:	ldrdeq	r3, [r1], -r0
   131bc:	ldrdeq	r3, [r1], -r0
   131c0:	andeq	r3, r1, r8, asr #6
   131c4:	andeq	r3, r1, r8, asr #6
   131c8:	andeq	r3, r1, r8, asr #6
   131cc:	andeq	r3, r1, r8, asr #6
   131d0:			; <UNDEFINED> instruction: 0x000134b8
   131d4:	andeq	r3, r1, r8, lsl r6
   131d8:	ldrdeq	r3, [r1], -r0
   131dc:	ldrdeq	r3, [r1], -r0
   131e0:	ldrdeq	r3, [r1], -r0
   131e4:	ldrdeq	r3, [r1], -r0
   131e8:	ldrdeq	r3, [r1], -r0
   131ec:	ldrdeq	r3, [r1], -r0
   131f0:	ldrdeq	r3, [r1], -r0
   131f4:	ldrdeq	r3, [r1], -r0
   131f8:	ldrdeq	r3, [r1], -r0
   131fc:	ldrdeq	r3, [r1], -r0
   13200:	ldrdeq	r3, [r1], -r0
   13204:	ldrdeq	r3, [r1], -r0
   13208:	ldrdeq	r3, [r1], -r0
   1320c:	ldrdeq	r3, [r1], -r0
   13210:	ldrdeq	r3, [r1], -r0
   13214:	ldrdeq	r3, [r1], -r0
   13218:	ldrdeq	r3, [r1], -r0
   1321c:	ldrdeq	r3, [r1], -r0
   13220:	ldrdeq	r3, [r1], -r0
   13224:	ldrdeq	r3, [r1], -r0
   13228:	ldrdeq	r3, [r1], -r0
   1322c:	ldrdeq	r3, [r1], -r0
   13230:	ldrdeq	r3, [r1], -r0
   13234:	ldrdeq	r3, [r1], -r0
   13238:	ldrdeq	r3, [r1], -r0
   1323c:	ldrdeq	r3, [r1], -r0
   13240:	andeq	r3, r1, r8, asr #6
   13244:	andeq	r3, r1, ip, ror r3
   13248:	ldrdeq	r3, [r1], -r0
   1324c:	andeq	r3, r1, r8, asr #6
   13250:	ldrdeq	r3, [r1], -r0
   13254:	andeq	r3, r1, r8, asr #6
   13258:	ldrdeq	r3, [r1], -r0
   1325c:	ldrdeq	r3, [r1], -r0
   13260:	ldrdeq	r3, [r1], -r0
   13264:	ldrdeq	r3, [r1], -r0
   13268:	ldrdeq	r3, [r1], -r0
   1326c:	ldrdeq	r3, [r1], -r0
   13270:	ldrdeq	r3, [r1], -r0
   13274:	ldrdeq	r3, [r1], -r0
   13278:	ldrdeq	r3, [r1], -r0
   1327c:	ldrdeq	r3, [r1], -r0
   13280:	ldrdeq	r3, [r1], -r0
   13284:	ldrdeq	r3, [r1], -r0
   13288:	ldrdeq	r3, [r1], -r0
   1328c:	ldrdeq	r3, [r1], -r0
   13290:	ldrdeq	r3, [r1], -r0
   13294:	ldrdeq	r3, [r1], -r0
   13298:	ldrdeq	r3, [r1], -r0
   1329c:	ldrdeq	r3, [r1], -r0
   132a0:	ldrdeq	r3, [r1], -r0
   132a4:	ldrdeq	r3, [r1], -r0
   132a8:	ldrdeq	r3, [r1], -r0
   132ac:	ldrdeq	r3, [r1], -r0
   132b0:	ldrdeq	r3, [r1], -r0
   132b4:	ldrdeq	r3, [r1], -r0
   132b8:	ldrdeq	r3, [r1], -r0
   132bc:	ldrdeq	r3, [r1], -r0
   132c0:	andeq	r3, r1, r0, lsl r3
   132c4:	andeq	r3, r1, r8, asr #6
   132c8:	andeq	r3, r1, r0, lsl r3
   132cc:	andeq	r3, r1, r8, lsr r3
   132d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   132d4:	tst	r0, #1
   132d8:	bne	13590 <__assert_fail@plt+0x2508>
   132dc:	ldr	r1, [fp, #16]
   132e0:	ubfx	r0, r6, #5, #3
   132e4:	mov	r2, #1
   132e8:	ldr	r0, [r1, r0, lsl #2]
   132ec:	and	r1, r6, #31
   132f0:	tst	r0, r2, lsl r1
   132f4:	beq	13590 <__assert_fail@plt+0x2508>
   132f8:	mov	r0, r6
   132fc:	mov	r1, r8
   13300:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13304:	tst	r2, #1
   13308:	beq	135b0 <__assert_fail@plt+0x2528>
   1330c:	b	13d0c <__assert_fail@plt+0x2c84>
   13310:	cmp	r7, #1
   13314:	beq	13338 <__assert_fail@plt+0x22b0>
   13318:	mov	r8, #0
   1331c:	cmn	r7, #1
   13320:	bne	1357c <__assert_fail@plt+0x24f4>
   13324:	ldrb	r0, [lr, #1]
   13328:	cmp	r0, #0
   1332c:	beq	13338 <__assert_fail@plt+0x22b0>
   13330:	mvn	r7, #0
   13334:	b	1357c <__assert_fail@plt+0x24f4>
   13338:	mov	r8, #0
   1333c:	cmp	sl, #0
   13340:	bne	1357c <__assert_fail@plt+0x24f4>
   13344:	mov	r1, #1
   13348:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1334c:	cmp	r0, #2
   13350:	bne	13368 <__assert_fail@plt+0x22e0>
   13354:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13358:	mov	r8, r1
   1335c:	tst	r0, #1
   13360:	beq	132d0 <__assert_fail@plt+0x2248>
   13364:	b	13d0c <__assert_fail@plt+0x2c84>
   13368:	mov	r8, r1
   1336c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13370:	tst	r0, #1
   13374:	beq	132dc <__assert_fail@plt+0x2254>
   13378:	b	13590 <__assert_fail@plt+0x2508>
   1337c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13380:	cmp	r0, #2
   13384:	bne	13644 <__assert_fail@plt+0x25bc>
   13388:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1338c:	tst	r0, #1
   13390:	bne	13d0c <__assert_fail@plt+0x2c84>
   13394:	mov	r0, #0
   13398:	str	r0, [fp, #-56]	; 0xffffffc8
   1339c:	b	1365c <__assert_fail@plt+0x25d4>
   133a0:	mov	r0, #102	; 0x66
   133a4:	b	136cc <__assert_fail@plt+0x2644>
   133a8:	mov	r2, #116	; 0x74
   133ac:	b	133bc <__assert_fail@plt+0x2334>
   133b0:	mov	r0, #98	; 0x62
   133b4:	b	136cc <__assert_fail@plt+0x2644>
   133b8:	mov	r2, #114	; 0x72
   133bc:	ldr	r0, [sp, #64]	; 0x40
   133c0:	tst	r0, #1
   133c4:	mov	r0, r2
   133c8:	bne	136cc <__assert_fail@plt+0x2644>
   133cc:	b	13d0c <__assert_fail@plt+0x2c84>
   133d0:	ldr	r0, [sp, #88]	; 0x58
   133d4:	tst	r0, #1
   133d8:	beq	136ec <__assert_fail@plt+0x2664>
   133dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133e0:	tst	r0, #1
   133e4:	bne	13e48 <__assert_fail@plt+0x2dc0>
   133e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133ec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   133f0:	subs	r0, r0, #2
   133f4:	movwne	r0, #1
   133f8:	orr	r0, r0, r1
   133fc:	tst	r0, #1
   13400:	bne	1343c <__assert_fail@plt+0x23b4>
   13404:	cmp	r9, r5
   13408:	movcc	r0, #39	; 0x27
   1340c:	strbcc	r0, [ip, r9]
   13410:	add	r0, r9, #1
   13414:	cmp	r0, r5
   13418:	movcc	r1, #36	; 0x24
   1341c:	strbcc	r1, [ip, r0]
   13420:	add	r0, r9, #2
   13424:	add	r9, r9, #3
   13428:	cmp	r0, r5
   1342c:	movcc	r1, #39	; 0x27
   13430:	strbcc	r1, [ip, r0]
   13434:	mov	r0, #1
   13438:	str	r0, [fp, #-52]	; 0xffffffcc
   1343c:	mov	r1, #1
   13440:	cmp	r9, r5
   13444:	mov	r8, #0
   13448:	mov	r6, #48	; 0x30
   1344c:	str	r1, [fp, #-56]	; 0xffffffc8
   13450:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13454:	movcc	r0, #92	; 0x5c
   13458:	strbcc	r0, [ip, r9]
   1345c:	add	r0, r9, #1
   13460:	cmp	r1, #2
   13464:	beq	138b8 <__assert_fail@plt+0x2830>
   13468:	add	r1, sl, #1
   1346c:	cmp	r1, r7
   13470:	bcs	138b8 <__assert_fail@plt+0x2830>
   13474:	ldrb	r1, [lr, r1]
   13478:	sub	r1, r1, #48	; 0x30
   1347c:	uxtb	r1, r1
   13480:	cmp	r1, #9
   13484:	bhi	138b8 <__assert_fail@plt+0x2830>
   13488:	cmp	r0, r5
   1348c:	movcc	r1, #48	; 0x30
   13490:	strbcc	r1, [ip, r0]
   13494:	add	r0, r9, #2
   13498:	add	r9, r9, #3
   1349c:	cmp	r0, r5
   134a0:	movcc	r1, #48	; 0x30
   134a4:	strbcc	r1, [ip, r0]
   134a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   134ac:	tst	r0, #1
   134b0:	beq	132dc <__assert_fail@plt+0x2254>
   134b4:	b	13590 <__assert_fail@plt+0x2508>
   134b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134bc:	mov	r6, #63	; 0x3f
   134c0:	cmp	r0, #5
   134c4:	beq	138cc <__assert_fail@plt+0x2844>
   134c8:	mov	r1, #0
   134cc:	cmp	r0, #2
   134d0:	str	r1, [fp, #-56]	; 0xffffffc8
   134d4:	bne	13994 <__assert_fail@plt+0x290c>
   134d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134dc:	mov	r8, #0
   134e0:	tst	r0, #1
   134e4:	beq	132d0 <__assert_fail@plt+0x2248>
   134e8:	b	13d0c <__assert_fail@plt+0x2c84>
   134ec:	mov	r0, #118	; 0x76
   134f0:	b	136cc <__assert_fail@plt+0x2644>
   134f4:	mov	r0, #1
   134f8:	mov	r6, #39	; 0x27
   134fc:	str	r0, [sp, #60]	; 0x3c
   13500:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13504:	cmp	r0, #2
   13508:	bne	1370c <__assert_fail@plt+0x2684>
   1350c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13510:	tst	r0, #1
   13514:	bne	13d0c <__assert_fail@plt+0x2c84>
   13518:	ldr	r2, [sp, #56]	; 0x38
   1351c:	clz	r1, r5
   13520:	mov	r8, #1
   13524:	lsr	r1, r1, #5
   13528:	cmp	r2, #0
   1352c:	mov	r0, r2
   13530:	movwne	r0, #1
   13534:	orrs	r0, r0, r1
   13538:	moveq	r2, r5
   1353c:	moveq	r5, r0
   13540:	cmp	r9, r5
   13544:	str	r2, [sp, #56]	; 0x38
   13548:	movcc	r0, #39	; 0x27
   1354c:	strbcc	r0, [ip, r9]
   13550:	add	r0, r9, #1
   13554:	cmp	r0, r5
   13558:	movcc	r1, #92	; 0x5c
   1355c:	strbcc	r1, [ip, r0]
   13560:	add	r0, r9, #2
   13564:	add	r9, r9, #3
   13568:	cmp	r0, r5
   1356c:	movcc	r1, #39	; 0x27
   13570:	strbcc	r1, [ip, r0]
   13574:	mov	r0, #0
   13578:	str	r0, [fp, #-52]	; 0xffffffcc
   1357c:	mov	r0, #0
   13580:	str	r0, [fp, #-56]	; 0xffffffc8
   13584:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13588:	tst	r0, #1
   1358c:	beq	132dc <__assert_fail@plt+0x2254>
   13590:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13594:	mov	r1, r8
   13598:	cmp	r0, #0
   1359c:	mov	r0, r6
   135a0:	beq	13664 <__assert_fail@plt+0x25dc>
   135a4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   135a8:	tst	r2, #1
   135ac:	bne	13d0c <__assert_fail@plt+0x2c84>
   135b0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   135b4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   135b8:	subs	r2, r2, #2
   135bc:	movwne	r2, #1
   135c0:	orr	r2, r2, r3
   135c4:	tst	r2, #1
   135c8:	bne	13604 <__assert_fail@plt+0x257c>
   135cc:	cmp	r9, r5
   135d0:	movcc	r2, #39	; 0x27
   135d4:	strbcc	r2, [ip, r9]
   135d8:	add	r2, r9, #1
   135dc:	cmp	r2, r5
   135e0:	movcc	r3, #36	; 0x24
   135e4:	strbcc	r3, [ip, r2]
   135e8:	add	r2, r9, #2
   135ec:	add	r9, r9, #3
   135f0:	cmp	r2, r5
   135f4:	movcc	r3, #39	; 0x27
   135f8:	strbcc	r3, [ip, r2]
   135fc:	mov	r2, #1
   13600:	str	r2, [fp, #-52]	; 0xffffffcc
   13604:	cmp	r9, r5
   13608:	movcc	r2, #92	; 0x5c
   1360c:	strbcc	r2, [ip, r9]
   13610:	add	r9, r9, #1
   13614:	b	136ac <__assert_fail@plt+0x2624>
   13618:	ldr	r0, [sp, #40]	; 0x28
   1361c:	cmp	r0, #1
   13620:	bne	13720 <__assert_fail@plt+0x2698>
   13624:	bl	10f68 <__ctype_b_loc@plt>
   13628:	ldr	r0, [r0]
   1362c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13630:	mov	r1, #1
   13634:	add	r0, r0, r6, lsl #1
   13638:	ldrb	r0, [r0, #1]
   1363c:	ubfx	r8, r0, #6, #1
   13640:	b	13a78 <__assert_fail@plt+0x29f0>
   13644:	ldr	r1, [sp, #48]	; 0x30
   13648:	mov	r0, #0
   1364c:	str	r0, [fp, #-56]	; 0xffffffc8
   13650:	mov	r0, #92	; 0x5c
   13654:	cmp	r1, #0
   13658:	beq	136cc <__assert_fail@plt+0x2644>
   1365c:	mov	r6, #92	; 0x5c
   13660:	mov	r8, #0
   13664:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13668:	cmp	r0, #0
   1366c:	bne	136a4 <__assert_fail@plt+0x261c>
   13670:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13674:	tst	r0, #1
   13678:	beq	136a4 <__assert_fail@plt+0x261c>
   1367c:	cmp	r9, r5
   13680:	movcc	r0, #39	; 0x27
   13684:	strbcc	r0, [ip, r9]
   13688:	add	r0, r9, #1
   1368c:	add	r9, r9, #2
   13690:	cmp	r0, r5
   13694:	movcc	r1, #39	; 0x27
   13698:	strbcc	r1, [ip, r0]
   1369c:	mov	r0, #0
   136a0:	str	r0, [fp, #-52]	; 0xffffffcc
   136a4:	mov	r1, r8
   136a8:	mov	r0, r6
   136ac:	cmp	r9, r5
   136b0:	and	r4, r4, r1
   136b4:	strbcc	r0, [ip, r9]
   136b8:	add	r9, r9, #1
   136bc:	add	sl, sl, #1
   136c0:	cmn	r7, #1
   136c4:	bne	12fbc <__assert_fail@plt+0x1f34>
   136c8:	b	12fc8 <__assert_fail@plt+0x1f40>
   136cc:	mov	r1, #0
   136d0:	mov	r8, #0
   136d4:	str	r1, [fp, #-56]	; 0xffffffc8
   136d8:	ldr	r1, [sp, #88]	; 0x58
   136dc:	tst	r1, #1
   136e0:	mov	r1, #0
   136e4:	beq	132d0 <__assert_fail@plt+0x2248>
   136e8:	b	135a4 <__assert_fail@plt+0x251c>
   136ec:	ldr	r0, [sp, #36]	; 0x24
   136f0:	mov	r6, #0
   136f4:	mov	r8, #0
   136f8:	cmp	r0, #0
   136fc:	mov	r0, #0
   13700:	str	r0, [fp, #-56]	; 0xffffffc8
   13704:	bne	136bc <__assert_fail@plt+0x2634>
   13708:	b	132d0 <__assert_fail@plt+0x2248>
   1370c:	mov	r8, #1
   13710:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13714:	tst	r0, #1
   13718:	beq	132dc <__assert_fail@plt+0x2254>
   1371c:	b	13590 <__assert_fail@plt+0x2508>
   13720:	mov	r0, #0
   13724:	cmn	r7, #1
   13728:	str	r0, [fp, #-36]	; 0xffffffdc
   1372c:	str	r0, [fp, #-40]	; 0xffffffd8
   13730:	bne	13744 <__assert_fail@plt+0x26bc>
   13734:	mov	r0, lr
   13738:	bl	10f8c <strlen@plt>
   1373c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13740:	mov	r7, r0
   13744:	ldr	r0, [sp, #44]	; 0x2c
   13748:	str	r4, [sp, #84]	; 0x54
   1374c:	str	r5, [sp, #28]
   13750:	cmp	r0, #0
   13754:	beq	139a8 <__assert_fail@plt+0x2920>
   13758:	ldr	r0, [sp, #80]	; 0x50
   1375c:	mov	r8, #1
   13760:	mov	r5, #0
   13764:	add	r0, r0, sl
   13768:	str	r0, [sp, #24]
   1376c:	sub	r0, fp, #40	; 0x28
   13770:	mov	r3, r0
   13774:	b	137b0 <__assert_fail@plt+0x2728>
   13778:	ldr	r5, [sp, #68]	; 0x44
   1377c:	add	r5, r0, r5
   13780:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13784:	bl	10ed8 <iswprint@plt>
   13788:	cmp	r0, #0
   1378c:	sub	r4, fp, #40	; 0x28
   13790:	movwne	r0, #1
   13794:	and	r8, r8, r0
   13798:	mov	r0, r4
   1379c:	bl	10e9c <mbsinit@plt>
   137a0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   137a4:	mov	r3, r4
   137a8:	cmp	r0, #0
   137ac:	bne	13a6c <__assert_fail@plt+0x29e4>
   137b0:	str	r5, [sp, #68]	; 0x44
   137b4:	add	r5, r5, sl
   137b8:	sub	r0, fp, #44	; 0x2c
   137bc:	add	r1, lr, r5
   137c0:	sub	r2, r7, r5
   137c4:	bl	16f78 <__assert_fail@plt+0x5ef0>
   137c8:	cmn	r0, #2
   137cc:	beq	13a2c <__assert_fail@plt+0x29a4>
   137d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   137d4:	cmn	r0, #1
   137d8:	beq	13a20 <__assert_fail@plt+0x2998>
   137dc:	cmp	r0, #0
   137e0:	beq	13a24 <__assert_fail@plt+0x299c>
   137e4:	cmp	r0, #2
   137e8:	bcc	13778 <__assert_fail@plt+0x26f0>
   137ec:	ldr	r1, [sp, #68]	; 0x44
   137f0:	ldr	r2, [sp, #24]
   137f4:	add	r1, r2, r1
   137f8:	sub	r2, r0, #1
   137fc:	ldrb	r3, [r1]
   13800:	sub	r3, r3, #91	; 0x5b
   13804:	cmp	r3, #33	; 0x21
   13808:	bls	13828 <__assert_fail@plt+0x27a0>
   1380c:	add	r1, r1, #1
   13810:	subs	r2, r2, #1
   13814:	beq	13778 <__assert_fail@plt+0x26f0>
   13818:	ldrb	r3, [r1]
   1381c:	sub	r3, r3, #91	; 0x5b
   13820:	cmp	r3, #33	; 0x21
   13824:	bhi	1380c <__assert_fail@plt+0x2784>
   13828:	add	r5, pc, #0
   1382c:	ldr	pc, [r5, r3, lsl #2]
   13830:	andeq	r3, r1, r4, asr #26
   13834:	andeq	r3, r1, r4, asr #26
   13838:	andeq	r3, r1, ip, lsl #16
   1383c:	andeq	r3, r1, r4, asr #26
   13840:	andeq	r3, r1, ip, lsl #16
   13844:	andeq	r3, r1, r4, asr #26
   13848:	andeq	r3, r1, ip, lsl #16
   1384c:	andeq	r3, r1, ip, lsl #16
   13850:	andeq	r3, r1, ip, lsl #16
   13854:	andeq	r3, r1, ip, lsl #16
   13858:	andeq	r3, r1, ip, lsl #16
   1385c:	andeq	r3, r1, ip, lsl #16
   13860:	andeq	r3, r1, ip, lsl #16
   13864:	andeq	r3, r1, ip, lsl #16
   13868:	andeq	r3, r1, ip, lsl #16
   1386c:	andeq	r3, r1, ip, lsl #16
   13870:	andeq	r3, r1, ip, lsl #16
   13874:	andeq	r3, r1, ip, lsl #16
   13878:	andeq	r3, r1, ip, lsl #16
   1387c:	andeq	r3, r1, ip, lsl #16
   13880:	andeq	r3, r1, ip, lsl #16
   13884:	andeq	r3, r1, ip, lsl #16
   13888:	andeq	r3, r1, ip, lsl #16
   1388c:	andeq	r3, r1, ip, lsl #16
   13890:	andeq	r3, r1, ip, lsl #16
   13894:	andeq	r3, r1, ip, lsl #16
   13898:	andeq	r3, r1, ip, lsl #16
   1389c:	andeq	r3, r1, ip, lsl #16
   138a0:	andeq	r3, r1, ip, lsl #16
   138a4:	andeq	r3, r1, ip, lsl #16
   138a8:	andeq	r3, r1, ip, lsl #16
   138ac:	andeq	r3, r1, ip, lsl #16
   138b0:	andeq	r3, r1, ip, lsl #16
   138b4:	andeq	r3, r1, r4, asr #26
   138b8:	mov	r9, r0
   138bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138c0:	tst	r0, #1
   138c4:	beq	132dc <__assert_fail@plt+0x2254>
   138c8:	b	13590 <__assert_fail@plt+0x2508>
   138cc:	mov	r0, #0
   138d0:	str	r0, [fp, #-56]	; 0xffffffc8
   138d4:	ldr	r0, [sp, #32]
   138d8:	cmp	r0, #0
   138dc:	beq	13994 <__assert_fail@plt+0x290c>
   138e0:	add	r0, sl, #2
   138e4:	mov	r1, r7
   138e8:	cmp	r0, r7
   138ec:	bcs	13994 <__assert_fail@plt+0x290c>
   138f0:	add	r1, sl, lr
   138f4:	ldrb	r1, [r1, #1]
   138f8:	cmp	r1, #63	; 0x3f
   138fc:	bne	13994 <__assert_fail@plt+0x290c>
   13900:	ldrb	r8, [lr, r0]
   13904:	sub	r2, r8, #33	; 0x21
   13908:	cmp	r2, #29
   1390c:	bhi	13994 <__assert_fail@plt+0x290c>
   13910:	mov	r1, r4
   13914:	movw	r4, #20929	; 0x51c1
   13918:	mov	r3, #1
   1391c:	movt	r4, #14336	; 0x3800
   13920:	tst	r4, r3, lsl r2
   13924:	beq	13c50 <__assert_fail@plt+0x2bc8>
   13928:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1392c:	tst	r2, #1
   13930:	bne	13d0c <__assert_fail@plt+0x2c84>
   13934:	cmp	r9, r5
   13938:	mov	r6, r8
   1393c:	mov	r4, r1
   13940:	mov	sl, r0
   13944:	mov	r8, #0
   13948:	movcc	r2, #63	; 0x3f
   1394c:	strbcc	r2, [ip, r9]
   13950:	add	r2, r9, #1
   13954:	cmp	r2, r5
   13958:	movcc	r3, #34	; 0x22
   1395c:	strbcc	r3, [ip, r2]
   13960:	add	r2, r9, #2
   13964:	cmp	r2, r5
   13968:	movcc	r3, #34	; 0x22
   1396c:	strbcc	r3, [ip, r2]
   13970:	add	r2, r9, #3
   13974:	add	r9, r9, #4
   13978:	cmp	r2, r5
   1397c:	movcc	r3, #63	; 0x3f
   13980:	strbcc	r3, [ip, r2]
   13984:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13988:	tst	r0, #1
   1398c:	beq	132dc <__assert_fail@plt+0x2254>
   13990:	b	13590 <__assert_fail@plt+0x2508>
   13994:	mov	r8, #0
   13998:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1399c:	tst	r0, #1
   139a0:	beq	132dc <__assert_fail@plt+0x2254>
   139a4:	b	13590 <__assert_fail@plt+0x2508>
   139a8:	mov	r8, #1
   139ac:	mov	r5, #0
   139b0:	sub	r4, fp, #40	; 0x28
   139b4:	str	r5, [sp, #68]	; 0x44
   139b8:	add	r5, r5, sl
   139bc:	sub	r0, fp, #44	; 0x2c
   139c0:	mov	r3, r4
   139c4:	add	r1, lr, r5
   139c8:	sub	r2, r7, r5
   139cc:	bl	16f78 <__assert_fail@plt+0x5ef0>
   139d0:	cmn	r0, #2
   139d4:	beq	13a2c <__assert_fail@plt+0x29a4>
   139d8:	cmn	r0, #1
   139dc:	beq	13a20 <__assert_fail@plt+0x2998>
   139e0:	ldr	r5, [sp, #68]	; 0x44
   139e4:	cmp	r0, #0
   139e8:	beq	13a68 <__assert_fail@plt+0x29e0>
   139ec:	add	r5, r0, r5
   139f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   139f4:	bl	10ed8 <iswprint@plt>
   139f8:	cmp	r0, #0
   139fc:	sub	r4, fp, #40	; 0x28
   13a00:	movwne	r0, #1
   13a04:	and	r8, r8, r0
   13a08:	mov	r0, r4
   13a0c:	bl	10e9c <mbsinit@plt>
   13a10:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13a14:	cmp	r0, #0
   13a18:	beq	139b4 <__assert_fail@plt+0x292c>
   13a1c:	b	13a6c <__assert_fail@plt+0x29e4>
   13a20:	mov	r8, #0
   13a24:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13a28:	b	13a60 <__assert_fail@plt+0x29d8>
   13a2c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13a30:	mov	r8, #0
   13a34:	cmp	r5, r7
   13a38:	bcs	13a60 <__assert_fail@plt+0x29d8>
   13a3c:	ldrb	r0, [lr, r5]
   13a40:	cmp	r0, #0
   13a44:	beq	13a60 <__assert_fail@plt+0x29d8>
   13a48:	ldr	r0, [sp, #68]	; 0x44
   13a4c:	add	r0, r0, #1
   13a50:	add	r5, r0, sl
   13a54:	str	r0, [sp, #68]	; 0x44
   13a58:	cmp	r5, r7
   13a5c:	bcc	13a3c <__assert_fail@plt+0x29b4>
   13a60:	ldr	r5, [sp, #68]	; 0x44
   13a64:	b	13a6c <__assert_fail@plt+0x29e4>
   13a68:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13a6c:	mov	r1, r5
   13a70:	ldr	r5, [sp, #28]
   13a74:	ldr	r4, [sp, #84]	; 0x54
   13a78:	ldr	r0, [sp, #52]	; 0x34
   13a7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a80:	cmp	r1, #1
   13a84:	orr	r2, r8, r0
   13a88:	mov	r0, r1
   13a8c:	bhi	13a98 <__assert_fail@plt+0x2a10>
   13a90:	tst	r2, #1
   13a94:	bne	132d0 <__assert_fail@plt+0x2248>
   13a98:	add	r0, r0, sl
   13a9c:	str	r2, [sp, #84]	; 0x54
   13aa0:	str	r0, [fp, #-56]	; 0xffffffc8
   13aa4:	mov	r0, #0
   13aa8:	tst	r2, #1
   13aac:	bne	13b8c <__assert_fail@plt+0x2b04>
   13ab0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13ab4:	tst	r1, #1
   13ab8:	bne	13d0c <__assert_fail@plt+0x2c84>
   13abc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13ac0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13ac4:	subs	r2, r1, #2
   13ac8:	movwne	r2, #1
   13acc:	orr	r2, r2, r0
   13ad0:	tst	r2, #1
   13ad4:	bne	13b10 <__assert_fail@plt+0x2a88>
   13ad8:	cmp	r9, r5
   13adc:	add	r2, r9, #1
   13ae0:	mov	r0, #1
   13ae4:	movcc	r1, #39	; 0x27
   13ae8:	str	r0, [fp, #-52]	; 0xffffffcc
   13aec:	strbcc	r1, [ip, r9]
   13af0:	cmp	r2, r5
   13af4:	movcc	r1, #36	; 0x24
   13af8:	strbcc	r1, [ip, r2]
   13afc:	add	r2, r9, #2
   13b00:	add	r9, r9, #3
   13b04:	cmp	r2, r5
   13b08:	movcc	r1, #39	; 0x27
   13b0c:	strbcc	r1, [ip, r2]
   13b10:	cmp	r9, r5
   13b14:	add	r2, r9, #1
   13b18:	movcc	r1, #92	; 0x5c
   13b1c:	strbcc	r1, [ip, r9]
   13b20:	cmp	r2, r5
   13b24:	bcs	13b38 <__assert_fail@plt+0x2ab0>
   13b28:	uxtb	r3, r6
   13b2c:	mov	r1, #48	; 0x30
   13b30:	orr	r3, r1, r3, lsr #6
   13b34:	strb	r3, [ip, r2]
   13b38:	add	r2, r9, #2
   13b3c:	add	r9, r9, #3
   13b40:	cmp	r2, r5
   13b44:	lsrcc	r3, r6, #3
   13b48:	movcc	r1, #6
   13b4c:	bficc	r3, r1, #3, #29
   13b50:	mov	r1, #6
   13b54:	bfi	r6, r1, #3, #29
   13b58:	strbcc	r3, [ip, r2]
   13b5c:	mov	r2, #1
   13b60:	b	13bc0 <__assert_fail@plt+0x2b38>
   13b64:	ldr	r1, [sp, #80]	; 0x50
   13b68:	cmp	r9, r2
   13b6c:	mov	r5, r2
   13b70:	ldr	r2, [sp, #84]	; 0x54
   13b74:	strbcc	r6, [ip, r9]
   13b78:	add	r9, r9, #1
   13b7c:	ldrb	r6, [r1, sl]
   13b80:	mov	sl, r3
   13b84:	tst	r2, #1
   13b88:	beq	13ab0 <__assert_fail@plt+0x2a28>
   13b8c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13b90:	tst	r1, #1
   13b94:	beq	13bb4 <__assert_fail@plt+0x2b2c>
   13b98:	cmp	r9, r5
   13b9c:	mov	r2, r0
   13ba0:	movcc	r1, #92	; 0x5c
   13ba4:	strbcc	r1, [ip, r9]
   13ba8:	add	r9, r9, #1
   13bac:	mov	r1, #0
   13bb0:	b	13bbc <__assert_fail@plt+0x2b34>
   13bb4:	mov	r1, #0
   13bb8:	mov	r2, r0
   13bbc:	str	r1, [fp, #-48]	; 0xffffffd0
   13bc0:	mov	r0, r2
   13bc4:	and	r1, r2, #1
   13bc8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13bcc:	add	r3, sl, #1
   13bd0:	cmp	r2, r3
   13bd4:	bls	13c34 <__assert_fail@plt+0x2bac>
   13bd8:	mov	r2, r5
   13bdc:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13be0:	cmp	r1, #0
   13be4:	movwne	r1, #1
   13be8:	mvn	r5, r5
   13bec:	orr	r5, r5, r1
   13bf0:	tst	r5, #1
   13bf4:	bne	13b64 <__assert_fail@plt+0x2adc>
   13bf8:	cmp	r9, r2
   13bfc:	movcc	r5, r4
   13c00:	movcc	r4, #39	; 0x27
   13c04:	strbcc	r4, [ip, r9]
   13c08:	movcc	r4, r5
   13c0c:	add	r5, r9, #1
   13c10:	add	r9, r9, #2
   13c14:	cmp	r5, r2
   13c18:	movcc	r1, r4
   13c1c:	movcc	r4, #39	; 0x27
   13c20:	strbcc	r4, [ip, r5]
   13c24:	movcc	r4, r1
   13c28:	mov	r1, #0
   13c2c:	str	r1, [fp, #-52]	; 0xffffffcc
   13c30:	b	13b64 <__assert_fail@plt+0x2adc>
   13c34:	cmp	r1, #0
   13c38:	movwne	r1, #1
   13c3c:	str	r1, [fp, #-56]	; 0xffffffc8
   13c40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13c44:	cmp	r0, #0
   13c48:	beq	13670 <__assert_fail@plt+0x25e8>
   13c4c:	b	136a4 <__assert_fail@plt+0x261c>
   13c50:	mov	r8, #0
   13c54:	mov	r4, r1
   13c58:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c5c:	tst	r0, #1
   13c60:	beq	132dc <__assert_fail@plt+0x2254>
   13c64:	b	13590 <__assert_fail@plt+0x2508>
   13c68:	mov	r7, sl
   13c6c:	b	13c74 <__assert_fail@plt+0x2bec>
   13c70:	mvn	r7, #0
   13c74:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13c78:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13c7c:	ldr	r2, [sp, #88]	; 0x58
   13c80:	eor	r0, r1, #2
   13c84:	orr	r0, r0, r9
   13c88:	clz	r0, r0
   13c8c:	lsr	r0, r0, #5
   13c90:	tst	r3, r0
   13c94:	bne	13d0c <__assert_fail@plt+0x2c84>
   13c98:	subs	r0, r1, #2
   13c9c:	movwne	r0, #1
   13ca0:	orr	r0, r3, r0
   13ca4:	tst	r0, #1
   13ca8:	ldreq	r0, [sp, #60]	; 0x3c
   13cac:	eoreq	r0, r0, #1
   13cb0:	tsteq	r0, #1
   13cb4:	bne	13de8 <__assert_fail@plt+0x2d60>
   13cb8:	tst	r4, #1
   13cbc:	bne	13dac <__assert_fail@plt+0x2d24>
   13cc0:	ldr	r6, [sp, #56]	; 0x38
   13cc4:	mov	r8, #0
   13cc8:	cmp	r6, #0
   13ccc:	beq	13de4 <__assert_fail@plt+0x2d5c>
   13cd0:	mov	r1, #0
   13cd4:	mov	r4, #2
   13cd8:	cmp	r5, #0
   13cdc:	mov	r0, r2
   13ce0:	mov	r3, #0
   13ce4:	str	r1, [sp, #84]	; 0x54
   13ce8:	beq	12b30 <__assert_fail@plt+0x1aa8>
   13cec:	b	13de8 <__assert_fail@plt+0x2d60>
   13cf0:	movw	r0, #31737	; 0x7bf9
   13cf4:	movt	r0, #1
   13cf8:	str	r0, [sp, #76]	; 0x4c
   13cfc:	mov	r9, #0
   13d00:	tst	r8, #1
   13d04:	beq	12dc8 <__assert_fail@plt+0x1d40>
   13d08:	b	12f08 <__assert_fail@plt+0x1e80>
   13d0c:	ldr	r1, [sp, #88]	; 0x58
   13d10:	mov	r0, #2
   13d14:	tst	r1, #1
   13d18:	movwne	r0, #4
   13d1c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13d20:	ldr	r1, [fp, #12]
   13d24:	cmp	r2, #2
   13d28:	moveq	r2, r0
   13d2c:	b	13d64 <__assert_fail@plt+0x2cdc>
   13d30:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d34:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13d38:	ldr	r1, [fp, #12]
   13d3c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13d40:	b	13d64 <__assert_fail@plt+0x2cdc>
   13d44:	ldr	r1, [sp, #88]	; 0x58
   13d48:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13d4c:	ldr	r5, [sp, #28]
   13d50:	mov	r0, #2
   13d54:	tst	r1, #1
   13d58:	ldr	r1, [fp, #12]
   13d5c:	movwne	r0, #4
   13d60:	mov	r2, r0
   13d64:	mov	r0, #0
   13d68:	bic	r1, r1, #2
   13d6c:	str	r2, [sp]
   13d70:	mov	r2, lr
   13d74:	str	r0, [sp, #8]
   13d78:	ldr	r0, [sp, #72]	; 0x48
   13d7c:	str	r1, [sp, #4]
   13d80:	mov	r1, r5
   13d84:	str	r0, [sp, #12]
   13d88:	ldr	r0, [sp, #76]	; 0x4c
   13d8c:	str	r0, [sp, #16]
   13d90:	mov	r0, ip
   13d94:	mov	r3, r7
   13d98:	bl	12aa4 <__assert_fail@plt+0x1a1c>
   13d9c:	mov	r9, r0
   13da0:	mov	r0, r9
   13da4:	sub	sp, fp, #28
   13da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dac:	mov	r0, #5
   13db0:	ldr	r1, [sp, #56]	; 0x38
   13db4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13db8:	str	r0, [sp]
   13dbc:	ldr	r0, [fp, #12]
   13dc0:	str	r0, [sp, #4]
   13dc4:	ldr	r0, [fp, #16]
   13dc8:	str	r0, [sp, #8]
   13dcc:	ldr	r0, [sp, #72]	; 0x48
   13dd0:	str	r0, [sp, #12]
   13dd4:	ldr	r0, [sp, #76]	; 0x4c
   13dd8:	str	r0, [sp, #16]
   13ddc:	ldr	r0, [fp, #-84]	; 0xffffffac
   13de0:	b	13d94 <__assert_fail@plt+0x2d0c>
   13de4:	mov	r3, #0
   13de8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13dec:	cmp	r1, #0
   13df0:	beq	13e2c <__assert_fail@plt+0x2da4>
   13df4:	ldr	r2, [fp, #-84]	; 0xffffffac
   13df8:	tst	r3, #1
   13dfc:	bne	13e30 <__assert_fail@plt+0x2da8>
   13e00:	ldrb	r0, [r1]
   13e04:	cmp	r0, #0
   13e08:	beq	13e30 <__assert_fail@plt+0x2da8>
   13e0c:	add	r1, r1, #1
   13e10:	cmp	r9, r5
   13e14:	strbcc	r0, [r2, r9]
   13e18:	add	r9, r9, #1
   13e1c:	ldrb	r0, [r1], #1
   13e20:	cmp	r0, #0
   13e24:	bne	13e10 <__assert_fail@plt+0x2d88>
   13e28:	b	13e30 <__assert_fail@plt+0x2da8>
   13e2c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13e30:	cmp	r9, r5
   13e34:	movcc	r0, #0
   13e38:	strbcc	r0, [r2, r9]
   13e3c:	mov	r0, r9
   13e40:	sub	sp, fp, #28
   13e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e48:	mov	r0, #4
   13e4c:	b	13d1c <__assert_fail@plt+0x2c94>
   13e50:	bl	1107c <abort@plt>
   13e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e58:	add	fp, sp, #28
   13e5c:	sub	sp, sp, #28
   13e60:	movw	r5, #37224	; 0x9168
   13e64:	cmp	r2, #0
   13e68:	mov	r4, r1
   13e6c:	mov	r7, r0
   13e70:	str	r0, [sp, #20]
   13e74:	movt	r5, #2
   13e78:	movne	r5, r2
   13e7c:	bl	10fa4 <__errno_location@plt>
   13e80:	mov	sl, r0
   13e84:	ldr	r2, [r5, #40]	; 0x28
   13e88:	ldr	r3, [r5, #44]	; 0x2c
   13e8c:	ldm	r5, {r0, r1}
   13e90:	orr	r8, r1, #1
   13e94:	add	r9, r5, #8
   13e98:	mov	r1, #0
   13e9c:	ldr	r6, [sl]
   13ea0:	stm	sp, {r0, r8, r9}
   13ea4:	mov	r0, #0
   13ea8:	str	r2, [sp, #12]
   13eac:	str	r3, [sp, #16]
   13eb0:	mov	r2, r7
   13eb4:	mov	r3, r4
   13eb8:	str	r6, [sp, #24]
   13ebc:	mov	r6, r4
   13ec0:	bl	12aa4 <__assert_fail@plt+0x1a1c>
   13ec4:	add	r7, r0, #1
   13ec8:	mov	r0, r7
   13ecc:	bl	14f34 <__assert_fail@plt+0x3eac>
   13ed0:	mov	r4, r0
   13ed4:	ldr	r0, [r5]
   13ed8:	ldr	r2, [r5, #44]	; 0x2c
   13edc:	ldr	r1, [r5, #40]	; 0x28
   13ee0:	mov	r3, r6
   13ee4:	stm	sp, {r0, r8, r9}
   13ee8:	str	r2, [sp, #16]
   13eec:	ldr	r2, [sp, #20]
   13ef0:	str	r1, [sp, #12]
   13ef4:	mov	r0, r4
   13ef8:	mov	r1, r7
   13efc:	bl	12aa4 <__assert_fail@plt+0x1a1c>
   13f00:	ldr	r0, [sp, #24]
   13f04:	str	r0, [sl]
   13f08:	mov	r0, r4
   13f0c:	sub	sp, fp, #28
   13f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f18:	add	fp, sp, #28
   13f1c:	sub	sp, sp, #36	; 0x24
   13f20:	movw	r8, #37224	; 0x9168
   13f24:	cmp	r3, #0
   13f28:	mov	r4, r2
   13f2c:	str	r2, [sp, #24]
   13f30:	mov	r5, r1
   13f34:	mov	r6, r0
   13f38:	str	r0, [sp, #20]
   13f3c:	movt	r8, #2
   13f40:	movne	r8, r3
   13f44:	bl	10fa4 <__errno_location@plt>
   13f48:	str	r0, [sp, #28]
   13f4c:	ldr	r1, [r8, #40]	; 0x28
   13f50:	ldr	r2, [r8, #44]	; 0x2c
   13f54:	ldr	r7, [r0]
   13f58:	cmp	r4, #0
   13f5c:	add	sl, r8, #8
   13f60:	mov	r0, #0
   13f64:	ldm	r8, {r3, r9}
   13f68:	orreq	r9, r9, #1
   13f6c:	stm	sp, {r3, r9, sl}
   13f70:	str	r1, [sp, #12]
   13f74:	str	r2, [sp, #16]
   13f78:	mov	r1, #0
   13f7c:	mov	r2, r6
   13f80:	mov	r3, r5
   13f84:	str	r7, [sp, #32]
   13f88:	mov	r7, r5
   13f8c:	bl	12aa4 <__assert_fail@plt+0x1a1c>
   13f90:	add	r4, r0, #1
   13f94:	mov	r5, r0
   13f98:	mov	r0, r4
   13f9c:	bl	14f34 <__assert_fail@plt+0x3eac>
   13fa0:	mov	r6, r0
   13fa4:	ldr	r0, [r8]
   13fa8:	ldr	r2, [r8, #44]	; 0x2c
   13fac:	ldr	r1, [r8, #40]	; 0x28
   13fb0:	mov	r3, r7
   13fb4:	stm	sp, {r0, r9, sl}
   13fb8:	str	r2, [sp, #16]
   13fbc:	ldr	r2, [sp, #20]
   13fc0:	str	r1, [sp, #12]
   13fc4:	mov	r0, r6
   13fc8:	mov	r1, r4
   13fcc:	bl	12aa4 <__assert_fail@plt+0x1a1c>
   13fd0:	ldr	r0, [sp, #24]
   13fd4:	ldr	r1, [sp, #32]
   13fd8:	ldr	r2, [sp, #28]
   13fdc:	cmp	r0, #0
   13fe0:	str	r1, [r2]
   13fe4:	strne	r5, [r0]
   13fe8:	mov	r0, r6
   13fec:	sub	sp, fp, #28
   13ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ff4:	push	{r4, r5, r6, r7, fp, lr}
   13ff8:	add	fp, sp, #16
   13ffc:	movw	r4, #37152	; 0x9120
   14000:	movt	r4, #2
   14004:	ldrd	r6, [r4]
   14008:	cmp	r7, #2
   1400c:	blt	14038 <__assert_fail@plt+0x2fb0>
   14010:	add	r5, r6, #12
   14014:	mov	r7, #0
   14018:	ldr	r0, [r5, r7, lsl #3]
   1401c:	bl	12798 <__assert_fail@plt+0x1710>
   14020:	ldr	r1, [r4, #4]
   14024:	add	r2, r7, #2
   14028:	add	r0, r7, #1
   1402c:	mov	r7, r0
   14030:	cmp	r2, r1
   14034:	blt	14018 <__assert_fail@plt+0x2f90>
   14038:	ldr	r0, [r6, #4]
   1403c:	movw	r5, #37272	; 0x9198
   14040:	movt	r5, #2
   14044:	cmp	r0, r5
   14048:	beq	1405c <__assert_fail@plt+0x2fd4>
   1404c:	bl	12798 <__assert_fail@plt+0x1710>
   14050:	mov	r0, #256	; 0x100
   14054:	str	r0, [r4, #8]
   14058:	str	r5, [r4, #12]
   1405c:	add	r5, r4, #8
   14060:	cmp	r6, r5
   14064:	beq	14074 <__assert_fail@plt+0x2fec>
   14068:	mov	r0, r6
   1406c:	bl	12798 <__assert_fail@plt+0x1710>
   14070:	str	r5, [r4]
   14074:	mov	r0, #1
   14078:	str	r0, [r4, #4]
   1407c:	pop	{r4, r5, r6, r7, fp, pc}
   14080:	movw	r3, #37224	; 0x9168
   14084:	mvn	r2, #0
   14088:	movt	r3, #2
   1408c:	b	14090 <__assert_fail@plt+0x3008>
   14090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14094:	add	fp, sp, #28
   14098:	sub	sp, sp, #44	; 0x2c
   1409c:	mov	r7, r3
   140a0:	str	r2, [sp, #36]	; 0x24
   140a4:	str	r1, [sp, #32]
   140a8:	mov	r5, r0
   140ac:	bl	10fa4 <__errno_location@plt>
   140b0:	cmp	r5, #0
   140b4:	bmi	1421c <__assert_fail@plt+0x3194>
   140b8:	cmn	r5, #-2147483647	; 0x80000001
   140bc:	beq	1421c <__assert_fail@plt+0x3194>
   140c0:	movw	r8, #37152	; 0x9120
   140c4:	mov	r4, r0
   140c8:	ldr	r0, [r0]
   140cc:	movt	r8, #2
   140d0:	str	r4, [sp, #28]
   140d4:	ldr	r1, [r8, #4]
   140d8:	ldr	r6, [r8]
   140dc:	str	r0, [sp, #24]
   140e0:	cmp	r1, r5
   140e4:	ble	140f0 <__assert_fail@plt+0x3068>
   140e8:	mov	sl, r6
   140ec:	b	14158 <__assert_fail@plt+0x30d0>
   140f0:	mov	r0, #8
   140f4:	add	r9, r8, #8
   140f8:	str	r1, [fp, #-32]	; 0xffffffe0
   140fc:	sub	r1, r5, r1
   14100:	mvn	r3, #-2147483648	; 0x80000000
   14104:	str	r0, [sp]
   14108:	subs	r0, r6, r9
   1410c:	add	r2, r1, #1
   14110:	sub	r1, fp, #32
   14114:	movne	r0, r6
   14118:	bl	15134 <__assert_fail@plt+0x40ac>
   1411c:	mov	sl, r0
   14120:	cmp	r6, r9
   14124:	str	r0, [r8]
   14128:	bne	14134 <__assert_fail@plt+0x30ac>
   1412c:	ldrd	r0, [r8, #8]
   14130:	stm	sl, {r0, r1}
   14134:	ldr	r1, [r8, #4]
   14138:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1413c:	add	r0, sl, r1, lsl #3
   14140:	sub	r1, r2, r1
   14144:	lsl	r2, r1, #3
   14148:	mov	r1, #0
   1414c:	bl	10fbc <memset@plt>
   14150:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14154:	str	r0, [r8, #4]
   14158:	mov	r9, sl
   1415c:	ldm	r7, {r0, r1}
   14160:	orr	r8, r1, #1
   14164:	add	r1, r7, #8
   14168:	ldr	r2, [r7, #40]	; 0x28
   1416c:	ldr	r3, [r7, #44]	; 0x2c
   14170:	ldr	r6, [r9, r5, lsl #3]!
   14174:	str	r1, [sp, #20]
   14178:	ldr	r4, [r9, #4]!
   1417c:	stm	sp, {r0, r8}
   14180:	add	r0, sp, #8
   14184:	stm	r0, {r1, r2, r3}
   14188:	ldr	r2, [sp, #32]
   1418c:	ldr	r3, [sp, #36]	; 0x24
   14190:	mov	r1, r6
   14194:	mov	r0, r4
   14198:	bl	12aa4 <__assert_fail@plt+0x1a1c>
   1419c:	cmp	r6, r0
   141a0:	bhi	14204 <__assert_fail@plt+0x317c>
   141a4:	add	r6, r0, #1
   141a8:	movw	r0, #37272	; 0x9198
   141ac:	movt	r0, #2
   141b0:	str	r6, [sl, r5, lsl #3]
   141b4:	cmp	r4, r0
   141b8:	beq	141c4 <__assert_fail@plt+0x313c>
   141bc:	mov	r0, r4
   141c0:	bl	12798 <__assert_fail@plt+0x1710>
   141c4:	mov	r0, r6
   141c8:	bl	14f34 <__assert_fail@plt+0x3eac>
   141cc:	str	r0, [r9]
   141d0:	mov	r4, r0
   141d4:	add	r3, sp, #8
   141d8:	ldr	r0, [r7]
   141dc:	ldr	r1, [r7, #40]	; 0x28
   141e0:	ldr	r2, [r7, #44]	; 0x2c
   141e4:	stm	sp, {r0, r8}
   141e8:	ldr	r0, [sp, #20]
   141ec:	stm	r3, {r0, r1, r2}
   141f0:	ldr	r2, [sp, #32]
   141f4:	ldr	r3, [sp, #36]	; 0x24
   141f8:	mov	r0, r4
   141fc:	mov	r1, r6
   14200:	bl	12aa4 <__assert_fail@plt+0x1a1c>
   14204:	ldr	r1, [sp, #24]
   14208:	ldr	r0, [sp, #28]
   1420c:	str	r1, [r0]
   14210:	mov	r0, r4
   14214:	sub	sp, fp, #28
   14218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1421c:	bl	1107c <abort@plt>
   14220:	movw	r3, #37224	; 0x9168
   14224:	movt	r3, #2
   14228:	b	14090 <__assert_fail@plt+0x3008>
   1422c:	movw	r3, #37224	; 0x9168
   14230:	mov	r1, r0
   14234:	mov	r0, #0
   14238:	mvn	r2, #0
   1423c:	movt	r3, #2
   14240:	b	14090 <__assert_fail@plt+0x3008>
   14244:	movw	r3, #37224	; 0x9168
   14248:	mov	r2, r1
   1424c:	mov	r1, r0
   14250:	mov	r0, #0
   14254:	movt	r3, #2
   14258:	b	14090 <__assert_fail@plt+0x3008>
   1425c:	push	{fp, lr}
   14260:	mov	fp, sp
   14264:	sub	sp, sp, #48	; 0x30
   14268:	vmov.i32	q8, #0	; 0x00000000
   1426c:	mov	ip, #32
   14270:	mov	r3, sp
   14274:	mov	lr, r2
   14278:	cmp	r1, #10
   1427c:	add	r2, r3, #16
   14280:	vst1.64	{d16-d17}, [r3], ip
   14284:	vst1.64	{d16-d17}, [r2]
   14288:	vst1.64	{d16-d17}, [r3]
   1428c:	beq	142ac <__assert_fail@plt+0x3224>
   14290:	str	r1, [sp]
   14294:	mov	r3, sp
   14298:	mov	r1, lr
   1429c:	mvn	r2, #0
   142a0:	bl	14090 <__assert_fail@plt+0x3008>
   142a4:	mov	sp, fp
   142a8:	pop	{fp, pc}
   142ac:	bl	1107c <abort@plt>
   142b0:	push	{r4, sl, fp, lr}
   142b4:	add	fp, sp, #8
   142b8:	sub	sp, sp, #48	; 0x30
   142bc:	vmov.i32	q8, #0	; 0x00000000
   142c0:	mov	ip, r3
   142c4:	mov	r3, sp
   142c8:	mov	lr, #32
   142cc:	cmp	r1, #10
   142d0:	add	r4, r3, #16
   142d4:	vst1.64	{d16-d17}, [r3], lr
   142d8:	vst1.64	{d16-d17}, [r4]
   142dc:	vst1.64	{d16-d17}, [r3]
   142e0:	beq	14300 <__assert_fail@plt+0x3278>
   142e4:	str	r1, [sp]
   142e8:	mov	r1, r2
   142ec:	mov	r3, sp
   142f0:	mov	r2, ip
   142f4:	bl	14090 <__assert_fail@plt+0x3008>
   142f8:	sub	sp, fp, #8
   142fc:	pop	{r4, sl, fp, pc}
   14300:	bl	1107c <abort@plt>
   14304:	push	{fp, lr}
   14308:	mov	fp, sp
   1430c:	sub	sp, sp, #48	; 0x30
   14310:	vmov.i32	q8, #0	; 0x00000000
   14314:	mov	r3, sp
   14318:	mov	ip, #32
   1431c:	cmp	r0, #10
   14320:	add	r2, r3, #16
   14324:	vst1.64	{d16-d17}, [r3], ip
   14328:	vst1.64	{d16-d17}, [r2]
   1432c:	vst1.64	{d16-d17}, [r3]
   14330:	beq	14350 <__assert_fail@plt+0x32c8>
   14334:	str	r0, [sp]
   14338:	mov	r3, sp
   1433c:	mov	r0, #0
   14340:	mvn	r2, #0
   14344:	bl	14090 <__assert_fail@plt+0x3008>
   14348:	mov	sp, fp
   1434c:	pop	{fp, pc}
   14350:	bl	1107c <abort@plt>
   14354:	push	{fp, lr}
   14358:	mov	fp, sp
   1435c:	sub	sp, sp, #48	; 0x30
   14360:	vmov.i32	q8, #0	; 0x00000000
   14364:	mov	r3, sp
   14368:	mov	ip, #32
   1436c:	cmp	r0, #10
   14370:	add	lr, r3, #16
   14374:	vst1.64	{d16-d17}, [r3], ip
   14378:	vst1.64	{d16-d17}, [lr]
   1437c:	vst1.64	{d16-d17}, [r3]
   14380:	beq	1439c <__assert_fail@plt+0x3314>
   14384:	str	r0, [sp]
   14388:	mov	r3, sp
   1438c:	mov	r0, #0
   14390:	bl	14090 <__assert_fail@plt+0x3008>
   14394:	mov	sp, fp
   14398:	pop	{fp, pc}
   1439c:	bl	1107c <abort@plt>
   143a0:	push	{r4, sl, fp, lr}
   143a4:	add	fp, sp, #8
   143a8:	sub	sp, sp, #48	; 0x30
   143ac:	mov	lr, r0
   143b0:	movw	r0, #37224	; 0x9168
   143b4:	mov	ip, r1
   143b8:	mov	r1, #32
   143bc:	mov	r4, #1
   143c0:	movt	r0, #2
   143c4:	add	r3, r0, #16
   143c8:	vld1.64	{d16-d17}, [r0], r1
   143cc:	vld1.64	{d20-d21}, [r0]
   143d0:	vld1.64	{d18-d19}, [r3]
   143d4:	mov	r3, sp
   143d8:	add	r0, r3, #32
   143dc:	add	r1, r3, #16
   143e0:	vst1.64	{d20-d21}, [r0]
   143e4:	mov	r0, #28
   143e8:	vst1.64	{d18-d19}, [r1]
   143ec:	mov	r1, r3
   143f0:	and	r0, r0, r2, lsr #3
   143f4:	and	r2, r2, #31
   143f8:	vst1.64	{d16-d17}, [r1], r0
   143fc:	ldr	r0, [r1, #8]
   14400:	bic	r4, r4, r0, lsr r2
   14404:	eor	r0, r0, r4, lsl r2
   14408:	mov	r2, ip
   1440c:	str	r0, [r1, #8]
   14410:	mov	r0, #0
   14414:	mov	r1, lr
   14418:	bl	14090 <__assert_fail@plt+0x3008>
   1441c:	sub	sp, fp, #8
   14420:	pop	{r4, sl, fp, pc}
   14424:	push	{fp, lr}
   14428:	mov	fp, sp
   1442c:	sub	sp, sp, #48	; 0x30
   14430:	mov	ip, r0
   14434:	movw	r0, #37224	; 0x9168
   14438:	mov	r2, #32
   1443c:	movt	r0, #2
   14440:	add	r3, r0, #16
   14444:	vld1.64	{d16-d17}, [r0], r2
   14448:	vld1.64	{d20-d21}, [r0]
   1444c:	vld1.64	{d18-d19}, [r3]
   14450:	mov	r3, sp
   14454:	add	r0, r3, #32
   14458:	add	r2, r3, #16
   1445c:	vst1.64	{d20-d21}, [r0]
   14460:	mov	r0, #28
   14464:	vst1.64	{d18-d19}, [r2]
   14468:	mov	r2, r3
   1446c:	and	r0, r0, r1, lsr #3
   14470:	and	r1, r1, #31
   14474:	vst1.64	{d16-d17}, [r2], r0
   14478:	mov	r0, #1
   1447c:	ldr	lr, [r2, #8]
   14480:	bic	r0, r0, lr, lsr r1
   14484:	eor	r0, lr, r0, lsl r1
   14488:	mov	r1, ip
   1448c:	str	r0, [r2, #8]
   14490:	mov	r0, #0
   14494:	mvn	r2, #0
   14498:	bl	14090 <__assert_fail@plt+0x3008>
   1449c:	mov	sp, fp
   144a0:	pop	{fp, pc}
   144a4:	push	{fp, lr}
   144a8:	mov	fp, sp
   144ac:	sub	sp, sp, #48	; 0x30
   144b0:	mov	r1, r0
   144b4:	movw	r0, #37224	; 0x9168
   144b8:	mov	r3, #32
   144bc:	movt	r0, #2
   144c0:	add	r2, r0, #16
   144c4:	vld1.64	{d16-d17}, [r0], r3
   144c8:	mov	r3, sp
   144cc:	vld1.64	{d18-d19}, [r2]
   144d0:	vld1.64	{d20-d21}, [r0]
   144d4:	add	r2, r3, #16
   144d8:	add	r0, r3, #32
   144dc:	vst1.64	{d18-d19}, [r2]
   144e0:	vst1.64	{d20-d21}, [r0]
   144e4:	mov	r0, #12
   144e8:	mov	r2, r3
   144ec:	vst1.64	{d16-d17}, [r2], r0
   144f0:	ldr	r0, [r2]
   144f4:	orr	r0, r0, #67108864	; 0x4000000
   144f8:	str	r0, [r2]
   144fc:	mov	r0, #0
   14500:	mvn	r2, #0
   14504:	bl	14090 <__assert_fail@plt+0x3008>
   14508:	mov	sp, fp
   1450c:	pop	{fp, pc}
   14510:	push	{fp, lr}
   14514:	mov	fp, sp
   14518:	sub	sp, sp, #48	; 0x30
   1451c:	mov	ip, r1
   14520:	mov	r1, r0
   14524:	movw	r0, #37224	; 0x9168
   14528:	mov	r2, #32
   1452c:	movt	r0, #2
   14530:	add	r3, r0, #16
   14534:	vld1.64	{d16-d17}, [r0], r2
   14538:	vld1.64	{d18-d19}, [r3]
   1453c:	vld1.64	{d20-d21}, [r0]
   14540:	mov	r3, sp
   14544:	add	r2, r3, #16
   14548:	add	r0, r3, #32
   1454c:	vst1.64	{d18-d19}, [r2]
   14550:	vst1.64	{d20-d21}, [r0]
   14554:	mov	r0, #12
   14558:	mov	r2, r3
   1455c:	vst1.64	{d16-d17}, [r2], r0
   14560:	ldr	r0, [r2]
   14564:	orr	r0, r0, #67108864	; 0x4000000
   14568:	str	r0, [r2]
   1456c:	mov	r0, #0
   14570:	mov	r2, ip
   14574:	bl	14090 <__assert_fail@plt+0x3008>
   14578:	mov	sp, fp
   1457c:	pop	{fp, pc}
   14580:	push	{r4, sl, fp, lr}
   14584:	add	fp, sp, #8
   14588:	sub	sp, sp, #96	; 0x60
   1458c:	vmov.i32	q8, #0	; 0x00000000
   14590:	mov	ip, r2
   14594:	mov	r2, sp
   14598:	mov	r4, #28
   1459c:	cmp	r1, #10
   145a0:	mov	r3, r2
   145a4:	add	lr, r2, #16
   145a8:	vst1.64	{d16-d17}, [r3], r4
   145ac:	vst1.64	{d16-d17}, [lr]
   145b0:	vst1.32	{d16-d17}, [r3]
   145b4:	beq	14604 <__assert_fail@plt+0x357c>
   145b8:	vld1.64	{d16-d17}, [r2], r4
   145bc:	vld1.64	{d18-d19}, [lr]
   145c0:	add	r3, sp, #48	; 0x30
   145c4:	vld1.32	{d20-d21}, [r2]
   145c8:	add	r2, r3, #20
   145cc:	add	r4, r3, #4
   145d0:	vst1.32	{d18-d19}, [r2]
   145d4:	add	r2, r3, #32
   145d8:	vst1.32	{d16-d17}, [r4]
   145dc:	vst1.32	{d20-d21}, [r2]
   145e0:	str	r1, [sp, #48]	; 0x30
   145e4:	mvn	r2, #0
   145e8:	ldr	r1, [sp, #60]	; 0x3c
   145ec:	orr	r1, r1, #67108864	; 0x4000000
   145f0:	str	r1, [sp, #60]	; 0x3c
   145f4:	mov	r1, ip
   145f8:	bl	14090 <__assert_fail@plt+0x3008>
   145fc:	sub	sp, fp, #8
   14600:	pop	{r4, sl, fp, pc}
   14604:	bl	1107c <abort@plt>
   14608:	push	{r4, r5, r6, sl, fp, lr}
   1460c:	add	fp, sp, #16
   14610:	sub	sp, sp, #48	; 0x30
   14614:	mov	ip, r3
   14618:	movw	r3, #37224	; 0x9168
   1461c:	mov	r6, #32
   14620:	cmp	r1, #0
   14624:	mov	r4, sp
   14628:	movt	r3, #2
   1462c:	cmpne	r2, #0
   14630:	add	r5, r4, #16
   14634:	add	lr, r3, #16
   14638:	vld1.64	{d16-d17}, [r3], r6
   1463c:	vld1.64	{d18-d19}, [lr]
   14640:	vld1.64	{d20-d21}, [r3]
   14644:	mov	r3, #10
   14648:	vst1.64	{d16-d17}, [r4], r6
   1464c:	vst1.64	{d18-d19}, [r5]
   14650:	vst1.64	{d20-d21}, [r4]
   14654:	str	r3, [sp]
   14658:	bne	14660 <__assert_fail@plt+0x35d8>
   1465c:	bl	1107c <abort@plt>
   14660:	str	r2, [sp, #44]	; 0x2c
   14664:	str	r1, [sp, #40]	; 0x28
   14668:	mov	r3, sp
   1466c:	mov	r1, ip
   14670:	mvn	r2, #0
   14674:	bl	14090 <__assert_fail@plt+0x3008>
   14678:	sub	sp, fp, #16
   1467c:	pop	{r4, r5, r6, sl, fp, pc}
   14680:	push	{r4, r5, r6, sl, fp, lr}
   14684:	add	fp, sp, #16
   14688:	sub	sp, sp, #48	; 0x30
   1468c:	mov	lr, r3
   14690:	movw	r3, #37224	; 0x9168
   14694:	mov	r6, #32
   14698:	cmp	r1, #0
   1469c:	mov	r4, sp
   146a0:	movt	r3, #2
   146a4:	cmpne	r2, #0
   146a8:	add	r5, r4, #16
   146ac:	add	ip, r3, #16
   146b0:	vld1.64	{d16-d17}, [r3], r6
   146b4:	vld1.64	{d18-d19}, [ip]
   146b8:	vld1.64	{d20-d21}, [r3]
   146bc:	mov	r3, #10
   146c0:	vst1.64	{d16-d17}, [r4], r6
   146c4:	vst1.64	{d18-d19}, [r5]
   146c8:	vst1.64	{d20-d21}, [r4]
   146cc:	str	r3, [sp]
   146d0:	bne	146d8 <__assert_fail@plt+0x3650>
   146d4:	bl	1107c <abort@plt>
   146d8:	ldr	ip, [fp, #8]
   146dc:	str	r2, [sp, #44]	; 0x2c
   146e0:	str	r1, [sp, #40]	; 0x28
   146e4:	mov	r3, sp
   146e8:	mov	r1, lr
   146ec:	mov	r2, ip
   146f0:	bl	14090 <__assert_fail@plt+0x3008>
   146f4:	sub	sp, fp, #16
   146f8:	pop	{r4, r5, r6, sl, fp, pc}
   146fc:	push	{r4, sl, fp, lr}
   14700:	add	fp, sp, #8
   14704:	sub	sp, sp, #48	; 0x30
   14708:	movw	r3, #37224	; 0x9168
   1470c:	mov	lr, #32
   14710:	mov	ip, r2
   14714:	cmp	r0, #0
   14718:	movt	r3, #2
   1471c:	cmpne	r1, #0
   14720:	add	r2, r3, #16
   14724:	vld1.64	{d16-d17}, [r3], lr
   14728:	vld1.64	{d20-d21}, [r3]
   1472c:	vld1.64	{d18-d19}, [r2]
   14730:	mov	r2, sp
   14734:	add	r4, r2, #16
   14738:	vst1.64	{d16-d17}, [r2], lr
   1473c:	vst1.64	{d20-d21}, [r2]
   14740:	mov	r2, #10
   14744:	vst1.64	{d18-d19}, [r4]
   14748:	str	r2, [sp]
   1474c:	bne	14754 <__assert_fail@plt+0x36cc>
   14750:	bl	1107c <abort@plt>
   14754:	str	r1, [sp, #44]	; 0x2c
   14758:	str	r0, [sp, #40]	; 0x28
   1475c:	mov	r3, sp
   14760:	mov	r0, #0
   14764:	mov	r1, ip
   14768:	mvn	r2, #0
   1476c:	bl	14090 <__assert_fail@plt+0x3008>
   14770:	sub	sp, fp, #8
   14774:	pop	{r4, sl, fp, pc}
   14778:	push	{r4, r5, fp, lr}
   1477c:	add	fp, sp, #8
   14780:	sub	sp, sp, #48	; 0x30
   14784:	mov	ip, r3
   14788:	movw	r3, #37224	; 0x9168
   1478c:	mov	r4, #32
   14790:	mov	lr, r2
   14794:	cmp	r0, #0
   14798:	movt	r3, #2
   1479c:	cmpne	r1, #0
   147a0:	add	r2, r3, #16
   147a4:	vld1.64	{d16-d17}, [r3], r4
   147a8:	vld1.64	{d20-d21}, [r3]
   147ac:	vld1.64	{d18-d19}, [r2]
   147b0:	mov	r2, sp
   147b4:	add	r5, r2, #16
   147b8:	vst1.64	{d16-d17}, [r2], r4
   147bc:	vst1.64	{d20-d21}, [r2]
   147c0:	mov	r2, #10
   147c4:	vst1.64	{d18-d19}, [r5]
   147c8:	str	r2, [sp]
   147cc:	bne	147d4 <__assert_fail@plt+0x374c>
   147d0:	bl	1107c <abort@plt>
   147d4:	str	r1, [sp, #44]	; 0x2c
   147d8:	str	r0, [sp, #40]	; 0x28
   147dc:	mov	r3, sp
   147e0:	mov	r0, #0
   147e4:	mov	r1, lr
   147e8:	mov	r2, ip
   147ec:	bl	14090 <__assert_fail@plt+0x3008>
   147f0:	sub	sp, fp, #8
   147f4:	pop	{r4, r5, fp, pc}
   147f8:	movw	r3, #37104	; 0x90f0
   147fc:	movt	r3, #2
   14800:	b	14090 <__assert_fail@plt+0x3008>
   14804:	movw	r3, #37104	; 0x90f0
   14808:	mov	r2, r1
   1480c:	mov	r1, r0
   14810:	mov	r0, #0
   14814:	movt	r3, #2
   14818:	b	14090 <__assert_fail@plt+0x3008>
   1481c:	movw	r3, #37104	; 0x90f0
   14820:	mvn	r2, #0
   14824:	movt	r3, #2
   14828:	b	14090 <__assert_fail@plt+0x3008>
   1482c:	movw	r3, #37104	; 0x90f0
   14830:	mov	r1, r0
   14834:	mov	r0, #0
   14838:	mvn	r2, #0
   1483c:	movt	r3, #2
   14840:	b	14090 <__assert_fail@plt+0x3008>
   14844:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14848:	add	fp, sp, #24
   1484c:	sub	sp, sp, #32
   14850:	ldr	r6, [fp, #12]
   14854:	ldr	r7, [fp, #8]
   14858:	mov	r4, r2
   1485c:	mov	r8, r0
   14860:	cmp	r1, #0
   14864:	beq	1488c <__assert_fail@plt+0x3804>
   14868:	movw	r2, #31824	; 0x7c50
   1486c:	mov	r5, r1
   14870:	str	r3, [sp, #4]
   14874:	str	r4, [sp]
   14878:	mov	r0, r8
   1487c:	mov	r1, #1
   14880:	movt	r2, #1
   14884:	mov	r3, r5
   14888:	b	148a4 <__assert_fail@plt+0x381c>
   1488c:	movw	r2, #31836	; 0x7c5c
   14890:	str	r3, [sp]
   14894:	mov	r0, r8
   14898:	mov	r1, #1
   1489c:	mov	r3, r4
   148a0:	movt	r2, #1
   148a4:	bl	10fe0 <__fprintf_chk@plt>
   148a8:	movw	r1, #31843	; 0x7c63
   148ac:	mov	r0, #0
   148b0:	mov	r2, #5
   148b4:	movt	r1, #1
   148b8:	bl	10eb4 <dcgettext@plt>
   148bc:	movw	r2, #32561	; 0x7f31
   148c0:	mov	r3, r0
   148c4:	movw	r0, #2022	; 0x7e6
   148c8:	mov	r1, #1
   148cc:	movt	r2, #1
   148d0:	str	r0, [sp]
   148d4:	mov	r0, r8
   148d8:	bl	10fe0 <__fprintf_chk@plt>
   148dc:	movw	r4, #30983	; 0x7907
   148e0:	mov	r1, r8
   148e4:	movt	r4, #1
   148e8:	mov	r0, r4
   148ec:	bl	10e30 <fputs_unlocked@plt>
   148f0:	movw	r1, #31847	; 0x7c67
   148f4:	mov	r0, #0
   148f8:	mov	r2, #5
   148fc:	movt	r1, #1
   14900:	bl	10eb4 <dcgettext@plt>
   14904:	movw	r3, #32018	; 0x7d12
   14908:	mov	r2, r0
   1490c:	mov	r0, r8
   14910:	mov	r1, #1
   14914:	movt	r3, #1
   14918:	bl	10fe0 <__fprintf_chk@plt>
   1491c:	mov	r0, r4
   14920:	mov	r1, r8
   14924:	bl	10e30 <fputs_unlocked@plt>
   14928:	cmp	r6, #9
   1492c:	bhi	14968 <__assert_fail@plt+0x38e0>
   14930:	add	r0, pc, #0
   14934:	ldr	pc, [r0, r6, lsl #2]
   14938:	andeq	r4, r1, r0, ror #18
   1493c:	andeq	r4, r1, r4, ror r9
   14940:	andeq	r4, r1, r4, lsr #19
   14944:	andeq	r4, r1, ip, asr #19
   14948:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1494c:	andeq	r4, r1, ip, lsl sl
   14950:	andeq	r4, r1, r4, asr #20
   14954:	andeq	r4, r1, ip, ror sl
   14958:	andeq	r4, r1, r4, lsr #22
   1495c:	andeq	r4, r1, ip, asr #21
   14960:	sub	sp, fp, #24
   14964:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14968:	movw	r1, #32371	; 0x7e73
   1496c:	movt	r1, #1
   14970:	b	14ad4 <__assert_fail@plt+0x3a4c>
   14974:	movw	r1, #32052	; 0x7d34
   14978:	mov	r0, #0
   1497c:	mov	r2, #5
   14980:	movt	r1, #1
   14984:	bl	10eb4 <dcgettext@plt>
   14988:	ldr	r3, [r7]
   1498c:	mov	r2, r0
   14990:	mov	r0, r8
   14994:	mov	r1, #1
   14998:	sub	sp, fp, #24
   1499c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   149a0:	b	10fe0 <__fprintf_chk@plt>
   149a4:	movw	r1, #32068	; 0x7d44
   149a8:	mov	r0, #0
   149ac:	mov	r2, #5
   149b0:	movt	r1, #1
   149b4:	bl	10eb4 <dcgettext@plt>
   149b8:	mov	r2, r0
   149bc:	ldr	r3, [r7]
   149c0:	ldr	r0, [r7, #4]
   149c4:	str	r0, [sp]
   149c8:	b	14ab8 <__assert_fail@plt+0x3a30>
   149cc:	movw	r1, #32091	; 0x7d5b
   149d0:	mov	r0, #0
   149d4:	mov	r2, #5
   149d8:	movt	r1, #1
   149dc:	bl	10eb4 <dcgettext@plt>
   149e0:	mov	r2, r0
   149e4:	ldr	r3, [r7]
   149e8:	ldmib	r7, {r0, r1}
   149ec:	stm	sp, {r0, r1}
   149f0:	b	14ab8 <__assert_fail@plt+0x3a30>
   149f4:	movw	r1, #32119	; 0x7d77
   149f8:	mov	r0, #0
   149fc:	mov	r2, #5
   14a00:	movt	r1, #1
   14a04:	bl	10eb4 <dcgettext@plt>
   14a08:	ldr	r3, [r7]
   14a0c:	mov	r2, r0
   14a10:	ldmib	r7, {r0, r1, r7}
   14a14:	stm	sp, {r0, r1, r7}
   14a18:	b	14ab8 <__assert_fail@plt+0x3a30>
   14a1c:	movw	r1, #32151	; 0x7d97
   14a20:	mov	r0, #0
   14a24:	mov	r2, #5
   14a28:	movt	r1, #1
   14a2c:	bl	10eb4 <dcgettext@plt>
   14a30:	ldr	r3, [r7]
   14a34:	mov	r2, r0
   14a38:	ldmib	r7, {r0, r1, r6, r7}
   14a3c:	stm	sp, {r0, r1, r6, r7}
   14a40:	b	14ab8 <__assert_fail@plt+0x3a30>
   14a44:	movw	r1, #32187	; 0x7dbb
   14a48:	mov	r0, #0
   14a4c:	mov	r2, #5
   14a50:	movt	r1, #1
   14a54:	bl	10eb4 <dcgettext@plt>
   14a58:	mov	r2, r0
   14a5c:	ldr	r3, [r7]
   14a60:	ldmib	r7, {r0, r1, r6}
   14a64:	ldr	r5, [r7, #16]
   14a68:	ldr	r7, [r7, #20]
   14a6c:	stm	sp, {r0, r1, r6}
   14a70:	str	r5, [sp, #12]
   14a74:	str	r7, [sp, #16]
   14a78:	b	14ab8 <__assert_fail@plt+0x3a30>
   14a7c:	movw	r1, #32227	; 0x7de3
   14a80:	mov	r0, #0
   14a84:	mov	r2, #5
   14a88:	movt	r1, #1
   14a8c:	bl	10eb4 <dcgettext@plt>
   14a90:	mov	r2, r0
   14a94:	ldr	r3, [r7]
   14a98:	ldmib	r7, {r0, r1, r6}
   14a9c:	ldr	r5, [r7, #16]
   14aa0:	ldr	r4, [r7, #20]
   14aa4:	ldr	r7, [r7, #24]
   14aa8:	stm	sp, {r0, r1, r6}
   14aac:	str	r5, [sp, #12]
   14ab0:	str	r4, [sp, #16]
   14ab4:	str	r7, [sp, #20]
   14ab8:	mov	r0, r8
   14abc:	mov	r1, #1
   14ac0:	bl	10fe0 <__fprintf_chk@plt>
   14ac4:	sub	sp, fp, #24
   14ac8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14acc:	movw	r1, #32319	; 0x7e3f
   14ad0:	movt	r1, #1
   14ad4:	mov	r0, #0
   14ad8:	mov	r2, #5
   14adc:	bl	10eb4 <dcgettext@plt>
   14ae0:	mov	ip, r0
   14ae4:	ldr	r3, [r7]
   14ae8:	ldr	r0, [r7, #4]
   14aec:	ldr	r1, [r7, #8]
   14af0:	ldr	r6, [r7, #12]
   14af4:	ldr	r5, [r7, #16]
   14af8:	ldr	r4, [r7, #20]
   14afc:	ldr	r2, [r7, #24]
   14b00:	ldr	lr, [r7, #28]
   14b04:	ldr	r7, [r7, #32]
   14b08:	stm	sp, {r0, r1, r6}
   14b0c:	str	r5, [sp, #12]
   14b10:	str	r4, [sp, #16]
   14b14:	str	r2, [sp, #20]
   14b18:	str	lr, [sp, #24]
   14b1c:	str	r7, [sp, #28]
   14b20:	b	14b68 <__assert_fail@plt+0x3ae0>
   14b24:	movw	r1, #32271	; 0x7e0f
   14b28:	mov	r0, #0
   14b2c:	mov	r2, #5
   14b30:	movt	r1, #1
   14b34:	bl	10eb4 <dcgettext@plt>
   14b38:	mov	ip, r0
   14b3c:	ldr	r3, [r7]
   14b40:	ldmib	r7, {r0, r1, r6}
   14b44:	ldr	r5, [r7, #16]
   14b48:	ldr	r4, [r7, #20]
   14b4c:	ldr	r2, [r7, #24]
   14b50:	ldr	r7, [r7, #28]
   14b54:	stm	sp, {r0, r1, r6}
   14b58:	str	r5, [sp, #12]
   14b5c:	str	r4, [sp, #16]
   14b60:	str	r2, [sp, #20]
   14b64:	str	r7, [sp, #24]
   14b68:	mov	r0, r8
   14b6c:	mov	r1, #1
   14b70:	mov	r2, ip
   14b74:	bl	10fe0 <__fprintf_chk@plt>
   14b78:	sub	sp, fp, #24
   14b7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b80:	push	{r4, sl, fp, lr}
   14b84:	add	fp, sp, #8
   14b88:	sub	sp, sp, #8
   14b8c:	ldr	ip, [fp, #8]
   14b90:	mov	lr, #0
   14b94:	ldr	r4, [ip, lr, lsl #2]
   14b98:	add	lr, lr, #1
   14b9c:	cmp	r4, #0
   14ba0:	bne	14b94 <__assert_fail@plt+0x3b0c>
   14ba4:	sub	r4, lr, #1
   14ba8:	str	ip, [sp]
   14bac:	str	r4, [sp, #4]
   14bb0:	bl	14844 <__assert_fail@plt+0x37bc>
   14bb4:	sub	sp, fp, #8
   14bb8:	pop	{r4, sl, fp, pc}
   14bbc:	push	{fp, lr}
   14bc0:	mov	fp, sp
   14bc4:	sub	sp, sp, #48	; 0x30
   14bc8:	ldr	ip, [fp, #8]
   14bcc:	ldr	lr, [ip]
   14bd0:	cmp	lr, #0
   14bd4:	str	lr, [sp, #8]
   14bd8:	beq	14c74 <__assert_fail@plt+0x3bec>
   14bdc:	ldr	lr, [ip, #4]
   14be0:	cmp	lr, #0
   14be4:	str	lr, [sp, #12]
   14be8:	beq	14c7c <__assert_fail@plt+0x3bf4>
   14bec:	ldr	lr, [ip, #8]
   14bf0:	cmp	lr, #0
   14bf4:	str	lr, [sp, #16]
   14bf8:	beq	14c84 <__assert_fail@plt+0x3bfc>
   14bfc:	ldr	lr, [ip, #12]
   14c00:	cmp	lr, #0
   14c04:	str	lr, [sp, #20]
   14c08:	beq	14c8c <__assert_fail@plt+0x3c04>
   14c0c:	ldr	lr, [ip, #16]
   14c10:	cmp	lr, #0
   14c14:	str	lr, [sp, #24]
   14c18:	beq	14c94 <__assert_fail@plt+0x3c0c>
   14c1c:	ldr	lr, [ip, #20]
   14c20:	cmp	lr, #0
   14c24:	str	lr, [sp, #28]
   14c28:	beq	14c9c <__assert_fail@plt+0x3c14>
   14c2c:	ldr	lr, [ip, #24]
   14c30:	cmp	lr, #0
   14c34:	str	lr, [sp, #32]
   14c38:	beq	14ca4 <__assert_fail@plt+0x3c1c>
   14c3c:	ldr	lr, [ip, #28]
   14c40:	cmp	lr, #0
   14c44:	str	lr, [sp, #36]	; 0x24
   14c48:	beq	14cac <__assert_fail@plt+0x3c24>
   14c4c:	ldr	lr, [ip, #32]
   14c50:	cmp	lr, #0
   14c54:	str	lr, [sp, #40]	; 0x28
   14c58:	beq	14cb4 <__assert_fail@plt+0x3c2c>
   14c5c:	ldr	lr, [ip, #36]	; 0x24
   14c60:	mov	ip, #10
   14c64:	cmp	lr, #0
   14c68:	str	lr, [sp, #44]	; 0x2c
   14c6c:	movweq	ip, #9
   14c70:	b	14cb8 <__assert_fail@plt+0x3c30>
   14c74:	mov	ip, #0
   14c78:	b	14cb8 <__assert_fail@plt+0x3c30>
   14c7c:	mov	ip, #1
   14c80:	b	14cb8 <__assert_fail@plt+0x3c30>
   14c84:	mov	ip, #2
   14c88:	b	14cb8 <__assert_fail@plt+0x3c30>
   14c8c:	mov	ip, #3
   14c90:	b	14cb8 <__assert_fail@plt+0x3c30>
   14c94:	mov	ip, #4
   14c98:	b	14cb8 <__assert_fail@plt+0x3c30>
   14c9c:	mov	ip, #5
   14ca0:	b	14cb8 <__assert_fail@plt+0x3c30>
   14ca4:	mov	ip, #6
   14ca8:	b	14cb8 <__assert_fail@plt+0x3c30>
   14cac:	mov	ip, #7
   14cb0:	b	14cb8 <__assert_fail@plt+0x3c30>
   14cb4:	mov	ip, #8
   14cb8:	add	lr, sp, #8
   14cbc:	str	ip, [sp, #4]
   14cc0:	str	lr, [sp]
   14cc4:	bl	14844 <__assert_fail@plt+0x37bc>
   14cc8:	mov	sp, fp
   14ccc:	pop	{fp, pc}
   14cd0:	push	{fp, lr}
   14cd4:	mov	fp, sp
   14cd8:	sub	sp, sp, #56	; 0x38
   14cdc:	add	ip, fp, #8
   14ce0:	str	ip, [sp, #12]
   14ce4:	ldr	lr, [fp, #8]
   14ce8:	cmp	lr, #0
   14cec:	str	lr, [sp, #16]
   14cf0:	beq	14d8c <__assert_fail@plt+0x3d04>
   14cf4:	ldr	lr, [ip, #4]
   14cf8:	cmp	lr, #0
   14cfc:	str	lr, [sp, #20]
   14d00:	beq	14d94 <__assert_fail@plt+0x3d0c>
   14d04:	ldr	lr, [ip, #8]
   14d08:	cmp	lr, #0
   14d0c:	str	lr, [sp, #24]
   14d10:	beq	14d9c <__assert_fail@plt+0x3d14>
   14d14:	ldr	lr, [ip, #12]
   14d18:	cmp	lr, #0
   14d1c:	str	lr, [sp, #28]
   14d20:	beq	14da4 <__assert_fail@plt+0x3d1c>
   14d24:	ldr	lr, [ip, #16]
   14d28:	cmp	lr, #0
   14d2c:	str	lr, [sp, #32]
   14d30:	beq	14dac <__assert_fail@plt+0x3d24>
   14d34:	ldr	lr, [ip, #20]
   14d38:	cmp	lr, #0
   14d3c:	str	lr, [sp, #36]	; 0x24
   14d40:	beq	14db4 <__assert_fail@plt+0x3d2c>
   14d44:	ldr	lr, [ip, #24]
   14d48:	cmp	lr, #0
   14d4c:	str	lr, [sp, #40]	; 0x28
   14d50:	beq	14dbc <__assert_fail@plt+0x3d34>
   14d54:	ldr	lr, [ip, #28]
   14d58:	cmp	lr, #0
   14d5c:	str	lr, [sp, #44]	; 0x2c
   14d60:	beq	14dc4 <__assert_fail@plt+0x3d3c>
   14d64:	ldr	lr, [ip, #32]
   14d68:	cmp	lr, #0
   14d6c:	str	lr, [sp, #48]	; 0x30
   14d70:	beq	14dcc <__assert_fail@plt+0x3d44>
   14d74:	ldr	lr, [ip, #36]	; 0x24
   14d78:	mov	ip, #10
   14d7c:	cmp	lr, #0
   14d80:	str	lr, [sp, #52]	; 0x34
   14d84:	movweq	ip, #9
   14d88:	b	14dd0 <__assert_fail@plt+0x3d48>
   14d8c:	mov	ip, #0
   14d90:	b	14dd0 <__assert_fail@plt+0x3d48>
   14d94:	mov	ip, #1
   14d98:	b	14dd0 <__assert_fail@plt+0x3d48>
   14d9c:	mov	ip, #2
   14da0:	b	14dd0 <__assert_fail@plt+0x3d48>
   14da4:	mov	ip, #3
   14da8:	b	14dd0 <__assert_fail@plt+0x3d48>
   14dac:	mov	ip, #4
   14db0:	b	14dd0 <__assert_fail@plt+0x3d48>
   14db4:	mov	ip, #5
   14db8:	b	14dd0 <__assert_fail@plt+0x3d48>
   14dbc:	mov	ip, #6
   14dc0:	b	14dd0 <__assert_fail@plt+0x3d48>
   14dc4:	mov	ip, #7
   14dc8:	b	14dd0 <__assert_fail@plt+0x3d48>
   14dcc:	mov	ip, #8
   14dd0:	add	lr, sp, #16
   14dd4:	str	ip, [sp, #4]
   14dd8:	str	lr, [sp]
   14ddc:	bl	14844 <__assert_fail@plt+0x37bc>
   14de0:	mov	sp, fp
   14de4:	pop	{fp, pc}
   14de8:	push	{fp, lr}
   14dec:	mov	fp, sp
   14df0:	movw	r0, #37196	; 0x914c
   14df4:	movt	r0, #2
   14df8:	ldr	r1, [r0]
   14dfc:	movw	r0, #30983	; 0x7907
   14e00:	movt	r0, #1
   14e04:	bl	10e30 <fputs_unlocked@plt>
   14e08:	movw	r1, #32431	; 0x7eaf
   14e0c:	mov	r0, #0
   14e10:	mov	r2, #5
   14e14:	movt	r1, #1
   14e18:	bl	10eb4 <dcgettext@plt>
   14e1c:	movw	r2, #32451	; 0x7ec3
   14e20:	mov	r1, r0
   14e24:	mov	r0, #1
   14e28:	movt	r2, #1
   14e2c:	bl	10fc8 <__printf_chk@plt>
   14e30:	movw	r1, #32473	; 0x7ed9
   14e34:	mov	r0, #0
   14e38:	mov	r2, #5
   14e3c:	movt	r1, #1
   14e40:	bl	10eb4 <dcgettext@plt>
   14e44:	movw	r2, #30493	; 0x771d
   14e48:	movw	r3, #30792	; 0x7848
   14e4c:	mov	r1, r0
   14e50:	mov	r0, #1
   14e54:	movt	r2, #1
   14e58:	movt	r3, #1
   14e5c:	bl	10fc8 <__printf_chk@plt>
   14e60:	movw	r1, #32493	; 0x7eed
   14e64:	mov	r0, #0
   14e68:	mov	r2, #5
   14e6c:	movt	r1, #1
   14e70:	bl	10eb4 <dcgettext@plt>
   14e74:	movw	r2, #32532	; 0x7f14
   14e78:	mov	r1, r0
   14e7c:	mov	r0, #1
   14e80:	movt	r2, #1
   14e84:	pop	{fp, lr}
   14e88:	b	10fc8 <__printf_chk@plt>
   14e8c:	push	{r4, r5, r6, sl, fp, lr}
   14e90:	add	fp, sp, #16
   14e94:	mov	r4, r2
   14e98:	mov	r5, r1
   14e9c:	mov	r6, r0
   14ea0:	bl	16fdc <__assert_fail@plt+0x5f54>
   14ea4:	cmp	r0, #0
   14ea8:	popne	{r4, r5, r6, sl, fp, pc}
   14eac:	cmp	r6, #0
   14eb0:	beq	14ec4 <__assert_fail@plt+0x3e3c>
   14eb4:	cmp	r5, #0
   14eb8:	cmpne	r4, #0
   14ebc:	bne	14ec4 <__assert_fail@plt+0x3e3c>
   14ec0:	pop	{r4, r5, r6, sl, fp, pc}
   14ec4:	bl	15440 <__assert_fail@plt+0x43b8>
   14ec8:	push	{r4, r5, r6, sl, fp, lr}
   14ecc:	add	fp, sp, #16
   14ed0:	mov	r4, r2
   14ed4:	mov	r5, r1
   14ed8:	mov	r6, r0
   14edc:	bl	16fdc <__assert_fail@plt+0x5f54>
   14ee0:	cmp	r0, #0
   14ee4:	popne	{r4, r5, r6, sl, fp, pc}
   14ee8:	cmp	r6, #0
   14eec:	beq	14f00 <__assert_fail@plt+0x3e78>
   14ef0:	cmp	r5, #0
   14ef4:	cmpne	r4, #0
   14ef8:	bne	14f00 <__assert_fail@plt+0x3e78>
   14efc:	pop	{r4, r5, r6, sl, fp, pc}
   14f00:	bl	15440 <__assert_fail@plt+0x43b8>
   14f04:	push	{fp, lr}
   14f08:	mov	fp, sp
   14f0c:	bl	16e38 <__assert_fail@plt+0x5db0>
   14f10:	cmp	r0, #0
   14f14:	popne	{fp, pc}
   14f18:	bl	15440 <__assert_fail@plt+0x43b8>
   14f1c:	push	{fp, lr}
   14f20:	mov	fp, sp
   14f24:	bl	16e38 <__assert_fail@plt+0x5db0>
   14f28:	cmp	r0, #0
   14f2c:	popne	{fp, pc}
   14f30:	bl	15440 <__assert_fail@plt+0x43b8>
   14f34:	push	{fp, lr}
   14f38:	mov	fp, sp
   14f3c:	bl	16e38 <__assert_fail@plt+0x5db0>
   14f40:	cmp	r0, #0
   14f44:	popne	{fp, pc}
   14f48:	bl	15440 <__assert_fail@plt+0x43b8>
   14f4c:	push	{r4, r5, fp, lr}
   14f50:	add	fp, sp, #8
   14f54:	mov	r4, r1
   14f58:	mov	r5, r0
   14f5c:	bl	16e68 <__assert_fail@plt+0x5de0>
   14f60:	cmp	r0, #0
   14f64:	popne	{r4, r5, fp, pc}
   14f68:	cmp	r5, #0
   14f6c:	beq	14f7c <__assert_fail@plt+0x3ef4>
   14f70:	cmp	r4, #0
   14f74:	bne	14f7c <__assert_fail@plt+0x3ef4>
   14f78:	pop	{r4, r5, fp, pc}
   14f7c:	bl	15440 <__assert_fail@plt+0x43b8>
   14f80:	push	{fp, lr}
   14f84:	mov	fp, sp
   14f88:	cmp	r1, #0
   14f8c:	orreq	r1, r1, #1
   14f90:	bl	16e68 <__assert_fail@plt+0x5de0>
   14f94:	cmp	r0, #0
   14f98:	popne	{fp, pc}
   14f9c:	bl	15440 <__assert_fail@plt+0x43b8>
   14fa0:	push	{fp, lr}
   14fa4:	mov	fp, sp
   14fa8:	clz	r3, r2
   14fac:	lsr	ip, r3, #5
   14fb0:	clz	r3, r1
   14fb4:	lsr	r3, r3, #5
   14fb8:	orrs	r3, r3, ip
   14fbc:	movwne	r1, #1
   14fc0:	movwne	r2, #1
   14fc4:	bl	16fdc <__assert_fail@plt+0x5f54>
   14fc8:	cmp	r0, #0
   14fcc:	popne	{fp, pc}
   14fd0:	bl	15440 <__assert_fail@plt+0x43b8>
   14fd4:	push	{fp, lr}
   14fd8:	mov	fp, sp
   14fdc:	mov	r2, r1
   14fe0:	mov	r1, r0
   14fe4:	mov	r0, #0
   14fe8:	bl	16fdc <__assert_fail@plt+0x5f54>
   14fec:	cmp	r0, #0
   14ff0:	popne	{fp, pc}
   14ff4:	bl	15440 <__assert_fail@plt+0x43b8>
   14ff8:	push	{fp, lr}
   14ffc:	mov	fp, sp
   15000:	mov	r2, r1
   15004:	mov	r1, r0
   15008:	clz	r0, r2
   1500c:	clz	r3, r1
   15010:	lsr	r0, r0, #5
   15014:	lsr	r3, r3, #5
   15018:	orrs	r0, r3, r0
   1501c:	mov	r0, #0
   15020:	movwne	r1, #1
   15024:	movwne	r2, #1
   15028:	bl	16fdc <__assert_fail@plt+0x5f54>
   1502c:	cmp	r0, #0
   15030:	popne	{fp, pc}
   15034:	bl	15440 <__assert_fail@plt+0x43b8>
   15038:	push	{r4, r5, r6, sl, fp, lr}
   1503c:	add	fp, sp, #16
   15040:	ldr	r5, [r1]
   15044:	mov	r4, r1
   15048:	mov	r6, r0
   1504c:	cmp	r0, #0
   15050:	beq	15068 <__assert_fail@plt+0x3fe0>
   15054:	mov	r0, #1
   15058:	add	r0, r0, r5, lsr #1
   1505c:	adds	r5, r5, r0
   15060:	bcc	15070 <__assert_fail@plt+0x3fe8>
   15064:	b	150ac <__assert_fail@plt+0x4024>
   15068:	cmp	r5, #0
   1506c:	movweq	r5, #64	; 0x40
   15070:	mov	r0, r6
   15074:	mov	r1, r5
   15078:	mov	r2, #1
   1507c:	bl	16fdc <__assert_fail@plt+0x5f54>
   15080:	cmp	r5, #0
   15084:	mov	r1, r5
   15088:	movwne	r1, #1
   1508c:	cmp	r0, #0
   15090:	bne	150a4 <__assert_fail@plt+0x401c>
   15094:	clz	r2, r6
   15098:	lsr	r2, r2, #5
   1509c:	orrs	r1, r2, r1
   150a0:	bne	150ac <__assert_fail@plt+0x4024>
   150a4:	str	r5, [r4]
   150a8:	pop	{r4, r5, r6, sl, fp, pc}
   150ac:	bl	15440 <__assert_fail@plt+0x43b8>
   150b0:	push	{r4, r5, r6, r7, fp, lr}
   150b4:	add	fp, sp, #16
   150b8:	ldr	r5, [r1]
   150bc:	mov	r6, r2
   150c0:	mov	r4, r1
   150c4:	mov	r7, r0
   150c8:	cmp	r0, #0
   150cc:	beq	150e4 <__assert_fail@plt+0x405c>
   150d0:	mov	r0, #1
   150d4:	add	r0, r0, r5, lsr #1
   150d8:	adds	r5, r5, r0
   150dc:	bcc	150fc <__assert_fail@plt+0x4074>
   150e0:	b	15130 <__assert_fail@plt+0x40a8>
   150e4:	cmp	r5, #0
   150e8:	bne	150fc <__assert_fail@plt+0x4074>
   150ec:	mov	r0, #64	; 0x40
   150f0:	cmp	r6, #64	; 0x40
   150f4:	udiv	r5, r0, r6
   150f8:	addhi	r5, r5, #1
   150fc:	mov	r0, r7
   15100:	mov	r1, r5
   15104:	mov	r2, r6
   15108:	bl	16fdc <__assert_fail@plt+0x5f54>
   1510c:	cmp	r0, #0
   15110:	bne	15128 <__assert_fail@plt+0x40a0>
   15114:	cmp	r7, #0
   15118:	beq	15130 <__assert_fail@plt+0x40a8>
   1511c:	cmp	r6, #0
   15120:	cmpne	r5, #0
   15124:	bne	15130 <__assert_fail@plt+0x40a8>
   15128:	str	r5, [r4]
   1512c:	pop	{r4, r5, r6, r7, fp, pc}
   15130:	bl	15440 <__assert_fail@plt+0x43b8>
   15134:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15138:	add	fp, sp, #24
   1513c:	mov	r8, r1
   15140:	ldr	r1, [r1]
   15144:	mov	r5, r0
   15148:	add	r0, r1, r1, asr #1
   1514c:	cmp	r0, r1
   15150:	mvnvs	r0, #-2147483648	; 0x80000000
   15154:	cmp	r0, r3
   15158:	mov	r7, r0
   1515c:	movgt	r7, r3
   15160:	cmn	r3, #1
   15164:	movle	r7, r0
   15168:	ldr	r0, [fp, #8]
   1516c:	cmn	r0, #1
   15170:	ble	15198 <__assert_fail@plt+0x4110>
   15174:	cmp	r0, #0
   15178:	beq	151ec <__assert_fail@plt+0x4164>
   1517c:	cmn	r7, #1
   15180:	ble	151c0 <__assert_fail@plt+0x4138>
   15184:	mvn	r4, #-2147483648	; 0x80000000
   15188:	udiv	r6, r4, r0
   1518c:	cmp	r6, r7
   15190:	bge	151ec <__assert_fail@plt+0x4164>
   15194:	b	151fc <__assert_fail@plt+0x4174>
   15198:	cmn	r7, #1
   1519c:	ble	151dc <__assert_fail@plt+0x4154>
   151a0:	cmn	r0, #1
   151a4:	beq	151ec <__assert_fail@plt+0x4164>
   151a8:	mov	r6, #-2147483648	; 0x80000000
   151ac:	mvn	r4, #-2147483648	; 0x80000000
   151b0:	sdiv	r6, r6, r0
   151b4:	cmp	r6, r7
   151b8:	bge	151ec <__assert_fail@plt+0x4164>
   151bc:	b	151fc <__assert_fail@plt+0x4174>
   151c0:	beq	151ec <__assert_fail@plt+0x4164>
   151c4:	mov	r6, #-2147483648	; 0x80000000
   151c8:	mvn	r4, #-2147483648	; 0x80000000
   151cc:	sdiv	r6, r6, r7
   151d0:	cmp	r6, r0
   151d4:	bge	151ec <__assert_fail@plt+0x4164>
   151d8:	b	151fc <__assert_fail@plt+0x4174>
   151dc:	mvn	r4, #-2147483648	; 0x80000000
   151e0:	sdiv	r6, r4, r0
   151e4:	cmp	r7, r6
   151e8:	blt	151fc <__assert_fail@plt+0x4174>
   151ec:	mul	r6, r7, r0
   151f0:	mov	r4, #64	; 0x40
   151f4:	cmp	r6, #63	; 0x3f
   151f8:	bgt	15204 <__assert_fail@plt+0x417c>
   151fc:	sdiv	r7, r4, r0
   15200:	mul	r6, r7, r0
   15204:	cmp	r5, #0
   15208:	moveq	r4, #0
   1520c:	streq	r4, [r8]
   15210:	sub	r4, r7, r1
   15214:	cmp	r4, r2
   15218:	bge	152c4 <__assert_fail@plt+0x423c>
   1521c:	add	r7, r1, r2
   15220:	mov	r6, #0
   15224:	mov	r2, #0
   15228:	cmp	r7, r3
   1522c:	movwgt	r6, #1
   15230:	cmn	r3, #1
   15234:	movwgt	r2, #1
   15238:	cmp	r7, r1
   1523c:	bvs	152f8 <__assert_fail@plt+0x4270>
   15240:	ands	r1, r2, r6
   15244:	bne	152f8 <__assert_fail@plt+0x4270>
   15248:	cmn	r0, #1
   1524c:	ble	15274 <__assert_fail@plt+0x41ec>
   15250:	cmp	r0, #0
   15254:	beq	152c0 <__assert_fail@plt+0x4238>
   15258:	cmn	r7, #1
   1525c:	ble	15298 <__assert_fail@plt+0x4210>
   15260:	mvn	r1, #-2147483648	; 0x80000000
   15264:	udiv	r1, r1, r0
   15268:	cmp	r1, r7
   1526c:	bge	152c0 <__assert_fail@plt+0x4238>
   15270:	b	152f8 <__assert_fail@plt+0x4270>
   15274:	cmn	r7, #1
   15278:	ble	152b0 <__assert_fail@plt+0x4228>
   1527c:	cmn	r0, #1
   15280:	beq	152c0 <__assert_fail@plt+0x4238>
   15284:	mov	r1, #-2147483648	; 0x80000000
   15288:	sdiv	r1, r1, r0
   1528c:	cmp	r1, r7
   15290:	bge	152c0 <__assert_fail@plt+0x4238>
   15294:	b	152f8 <__assert_fail@plt+0x4270>
   15298:	beq	152c0 <__assert_fail@plt+0x4238>
   1529c:	mov	r1, #-2147483648	; 0x80000000
   152a0:	sdiv	r1, r1, r7
   152a4:	cmp	r1, r0
   152a8:	bge	152c0 <__assert_fail@plt+0x4238>
   152ac:	b	152f8 <__assert_fail@plt+0x4270>
   152b0:	mvn	r1, #-2147483648	; 0x80000000
   152b4:	sdiv	r1, r1, r0
   152b8:	cmp	r7, r1
   152bc:	blt	152f8 <__assert_fail@plt+0x4270>
   152c0:	mul	r6, r7, r0
   152c4:	mov	r0, r5
   152c8:	mov	r1, r6
   152cc:	bl	16e68 <__assert_fail@plt+0x5de0>
   152d0:	cmp	r6, #0
   152d4:	movwne	r6, #1
   152d8:	cmp	r0, #0
   152dc:	bne	152f0 <__assert_fail@plt+0x4268>
   152e0:	clz	r1, r5
   152e4:	lsr	r1, r1, #5
   152e8:	orrs	r1, r1, r6
   152ec:	bne	152f8 <__assert_fail@plt+0x4270>
   152f0:	str	r7, [r8]
   152f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   152f8:	bl	15440 <__assert_fail@plt+0x43b8>
   152fc:	push	{fp, lr}
   15300:	mov	fp, sp
   15304:	mov	r1, #1
   15308:	bl	16de4 <__assert_fail@plt+0x5d5c>
   1530c:	cmp	r0, #0
   15310:	popne	{fp, pc}
   15314:	bl	15440 <__assert_fail@plt+0x43b8>
   15318:	push	{fp, lr}
   1531c:	mov	fp, sp
   15320:	bl	16de4 <__assert_fail@plt+0x5d5c>
   15324:	cmp	r0, #0
   15328:	popne	{fp, pc}
   1532c:	bl	15440 <__assert_fail@plt+0x43b8>
   15330:	push	{fp, lr}
   15334:	mov	fp, sp
   15338:	mov	r1, #1
   1533c:	bl	16de4 <__assert_fail@plt+0x5d5c>
   15340:	cmp	r0, #0
   15344:	popne	{fp, pc}
   15348:	bl	15440 <__assert_fail@plt+0x43b8>
   1534c:	push	{fp, lr}
   15350:	mov	fp, sp
   15354:	bl	16de4 <__assert_fail@plt+0x5d5c>
   15358:	cmp	r0, #0
   1535c:	popne	{fp, pc}
   15360:	bl	15440 <__assert_fail@plt+0x43b8>
   15364:	push	{r4, r5, fp, lr}
   15368:	add	fp, sp, #8
   1536c:	mov	r5, r0
   15370:	mov	r0, r1
   15374:	mov	r4, r1
   15378:	bl	16e38 <__assert_fail@plt+0x5db0>
   1537c:	cmp	r0, #0
   15380:	beq	15394 <__assert_fail@plt+0x430c>
   15384:	mov	r1, r5
   15388:	mov	r2, r4
   1538c:	pop	{r4, r5, fp, lr}
   15390:	b	10e90 <memcpy@plt>
   15394:	bl	15440 <__assert_fail@plt+0x43b8>
   15398:	push	{r4, r5, fp, lr}
   1539c:	add	fp, sp, #8
   153a0:	mov	r5, r0
   153a4:	mov	r0, r1
   153a8:	mov	r4, r1
   153ac:	bl	16e38 <__assert_fail@plt+0x5db0>
   153b0:	cmp	r0, #0
   153b4:	beq	153c8 <__assert_fail@plt+0x4340>
   153b8:	mov	r1, r5
   153bc:	mov	r2, r4
   153c0:	pop	{r4, r5, fp, lr}
   153c4:	b	10e90 <memcpy@plt>
   153c8:	bl	15440 <__assert_fail@plt+0x43b8>
   153cc:	push	{r4, r5, fp, lr}
   153d0:	add	fp, sp, #8
   153d4:	mov	r5, r0
   153d8:	add	r0, r1, #1
   153dc:	mov	r4, r1
   153e0:	bl	16e38 <__assert_fail@plt+0x5db0>
   153e4:	cmp	r0, #0
   153e8:	beq	15404 <__assert_fail@plt+0x437c>
   153ec:	mov	r1, #0
   153f0:	mov	r2, r4
   153f4:	strb	r1, [r0, r4]
   153f8:	mov	r1, r5
   153fc:	pop	{r4, r5, fp, lr}
   15400:	b	10e90 <memcpy@plt>
   15404:	bl	15440 <__assert_fail@plt+0x43b8>
   15408:	push	{r4, r5, fp, lr}
   1540c:	add	fp, sp, #8
   15410:	mov	r4, r0
   15414:	bl	10f8c <strlen@plt>
   15418:	add	r5, r0, #1
   1541c:	mov	r0, r5
   15420:	bl	16e38 <__assert_fail@plt+0x5db0>
   15424:	cmp	r0, #0
   15428:	beq	1543c <__assert_fail@plt+0x43b4>
   1542c:	mov	r1, r4
   15430:	mov	r2, r5
   15434:	pop	{r4, r5, fp, lr}
   15438:	b	10e90 <memcpy@plt>
   1543c:	bl	15440 <__assert_fail@plt+0x43b8>
   15440:	push	{fp, lr}
   15444:	mov	fp, sp
   15448:	movw	r0, #37100	; 0x90ec
   1544c:	movw	r1, #32608	; 0x7f60
   15450:	mov	r2, #5
   15454:	movt	r0, #2
   15458:	movt	r1, #1
   1545c:	ldr	r4, [r0]
   15460:	mov	r0, #0
   15464:	bl	10eb4 <dcgettext@plt>
   15468:	movw	r2, #30472	; 0x7708
   1546c:	mov	r3, r0
   15470:	mov	r0, r4
   15474:	mov	r1, #0
   15478:	movt	r2, #1
   1547c:	bl	10f20 <error@plt>
   15480:	bl	1107c <abort@plt>
   15484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15488:	add	fp, sp, #28
   1548c:	sub	sp, sp, #36	; 0x24
   15490:	cmp	r2, #37	; 0x25
   15494:	bcs	16dc4 <__assert_fail@plt+0x5d3c>
   15498:	ldr	r8, [fp, #8]
   1549c:	mov	r9, r3
   154a0:	mov	r6, r2
   154a4:	mov	r7, r1
   154a8:	mov	r4, r0
   154ac:	bl	10fa4 <__errno_location@plt>
   154b0:	cmp	r7, #0
   154b4:	add	sl, sp, #32
   154b8:	mov	r5, r0
   154bc:	mov	r0, #0
   154c0:	mov	r2, r6
   154c4:	mov	r3, #0
   154c8:	movne	sl, r7
   154cc:	str	r0, [r5]
   154d0:	mov	r0, r4
   154d4:	mov	r1, sl
   154d8:	bl	11040 <__strtoll_internal@plt>
   154dc:	mov	r7, r1
   154e0:	ldr	r1, [sl]
   154e4:	cmp	r1, r4
   154e8:	beq	15524 <__assert_fail@plt+0x449c>
   154ec:	mov	r6, r0
   154f0:	ldr	r0, [r5]
   154f4:	cmp	r0, #0
   154f8:	beq	156b0 <__assert_fail@plt+0x4628>
   154fc:	mov	r5, #4
   15500:	cmp	r0, #34	; 0x22
   15504:	bne	15908 <__assert_fail@plt+0x4880>
   15508:	mov	r5, #1
   1550c:	cmp	r8, #0
   15510:	beq	156bc <__assert_fail@plt+0x4634>
   15514:	ldrb	r4, [r1]
   15518:	cmp	r4, #0
   1551c:	bne	1556c <__assert_fail@plt+0x44e4>
   15520:	b	156bc <__assert_fail@plt+0x4634>
   15524:	mov	r5, #4
   15528:	cmp	r8, #0
   1552c:	beq	15908 <__assert_fail@plt+0x4880>
   15530:	mov	r6, r1
   15534:	ldrb	r1, [r4]
   15538:	cmp	r1, #0
   1553c:	beq	15908 <__assert_fail@plt+0x4880>
   15540:	mov	r0, r8
   15544:	bl	10f98 <strchr@plt>
   15548:	cmp	r0, #0
   1554c:	beq	15908 <__assert_fail@plt+0x4880>
   15550:	mov	r1, r6
   15554:	mov	r5, #0
   15558:	mov	r6, #1
   1555c:	mov	r7, #0
   15560:	ldrb	r4, [r1]
   15564:	cmp	r4, #0
   15568:	beq	156bc <__assert_fail@plt+0x4634>
   1556c:	str	r1, [sp, #20]
   15570:	mov	r0, r8
   15574:	mov	r1, r4
   15578:	bl	10f98 <strchr@plt>
   1557c:	cmp	r0, #0
   15580:	beq	15900 <__assert_fail@plt+0x4878>
   15584:	sub	r0, r4, #69	; 0x45
   15588:	mov	r1, #1
   1558c:	mov	r3, #0
   15590:	mov	r2, #1024	; 0x400
   15594:	cmp	r0, #47	; 0x2f
   15598:	str	r1, [sp, #16]
   1559c:	bhi	156d4 <__assert_fail@plt+0x464c>
   155a0:	add	r1, pc, #0
   155a4:	ldr	pc, [r1, r0, lsl #2]
   155a8:	andeq	r5, r1, r8, ror #12
   155ac:	ldrdeq	r5, [r1], -r4
   155b0:	andeq	r5, r1, r8, ror #12
   155b4:	ldrdeq	r5, [r1], -r4
   155b8:	ldrdeq	r5, [r1], -r4
   155bc:	ldrdeq	r5, [r1], -r4
   155c0:	andeq	r5, r1, r8, ror #12
   155c4:	ldrdeq	r5, [r1], -r4
   155c8:	andeq	r5, r1, r8, ror #12
   155cc:	ldrdeq	r5, [r1], -r4
   155d0:	ldrdeq	r5, [r1], -r4
   155d4:	andeq	r5, r1, r8, ror #12
   155d8:	ldrdeq	r5, [r1], -r4
   155dc:	ldrdeq	r5, [r1], -r4
   155e0:	ldrdeq	r5, [r1], -r4
   155e4:	andeq	r5, r1, r8, ror #12
   155e8:	ldrdeq	r5, [r1], -r4
   155ec:	ldrdeq	r5, [r1], -r4
   155f0:	ldrdeq	r5, [r1], -r4
   155f4:	ldrdeq	r5, [r1], -r4
   155f8:	andeq	r5, r1, r8, ror #12
   155fc:	andeq	r5, r1, r8, ror #12
   15600:	ldrdeq	r5, [r1], -r4
   15604:	ldrdeq	r5, [r1], -r4
   15608:	ldrdeq	r5, [r1], -r4
   1560c:	ldrdeq	r5, [r1], -r4
   15610:	ldrdeq	r5, [r1], -r4
   15614:	ldrdeq	r5, [r1], -r4
   15618:	ldrdeq	r5, [r1], -r4
   1561c:	ldrdeq	r5, [r1], -r4
   15620:	ldrdeq	r5, [r1], -r4
   15624:	ldrdeq	r5, [r1], -r4
   15628:	ldrdeq	r5, [r1], -r4
   1562c:	ldrdeq	r5, [r1], -r4
   15630:	andeq	r5, r1, r8, ror #12
   15634:	ldrdeq	r5, [r1], -r4
   15638:	ldrdeq	r5, [r1], -r4
   1563c:	ldrdeq	r5, [r1], -r4
   15640:	andeq	r5, r1, r8, ror #12
   15644:	ldrdeq	r5, [r1], -r4
   15648:	andeq	r5, r1, r8, ror #12
   1564c:	ldrdeq	r5, [r1], -r4
   15650:	ldrdeq	r5, [r1], -r4
   15654:	ldrdeq	r5, [r1], -r4
   15658:	ldrdeq	r5, [r1], -r4
   1565c:	ldrdeq	r5, [r1], -r4
   15660:	ldrdeq	r5, [r1], -r4
   15664:	andeq	r5, r1, r8, ror #12
   15668:	mov	r0, r8
   1566c:	mov	r1, #48	; 0x30
   15670:	bl	10f98 <strchr@plt>
   15674:	cmp	r0, #0
   15678:	beq	156cc <__assert_fail@plt+0x4644>
   1567c:	ldr	r1, [sp, #20]
   15680:	ldrb	r0, [r1, #1]
   15684:	cmp	r0, #66	; 0x42
   15688:	cmpne	r0, #68	; 0x44
   1568c:	bne	15808 <__assert_fail@plt+0x4780>
   15690:	mov	r0, #2
   15694:	mov	r2, #1000	; 0x3e8
   15698:	mov	r3, #0
   1569c:	str	r0, [sp, #16]
   156a0:	sub	r0, r4, #66	; 0x42
   156a4:	cmp	r0, #53	; 0x35
   156a8:	bls	156e0 <__assert_fail@plt+0x4658>
   156ac:	b	15900 <__assert_fail@plt+0x4878>
   156b0:	mov	r5, r0
   156b4:	cmp	r8, #0
   156b8:	bne	15514 <__assert_fail@plt+0x448c>
   156bc:	strd	r6, [r9]
   156c0:	mov	r0, r5
   156c4:	sub	sp, fp, #28
   156c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156cc:	mov	r3, #0
   156d0:	mov	r2, #1024	; 0x400
   156d4:	sub	r0, r4, #66	; 0x42
   156d8:	cmp	r0, #53	; 0x35
   156dc:	bhi	15900 <__assert_fail@plt+0x4878>
   156e0:	add	r1, pc, #8
   156e4:	str	r3, [sp, #28]
   156e8:	str	r2, [sp, #24]
   156ec:	ldr	pc, [r1, r0, lsl #2]
   156f0:	andeq	r5, r1, r8, asr r9
   156f4:	andeq	r5, r1, r0, lsl #18
   156f8:	andeq	r5, r1, r0, lsl #18
   156fc:	andeq	r5, r1, ip, ror #18
   15700:	andeq	r5, r1, r0, lsl #18
   15704:	andeq	r5, r1, r8, asr #15
   15708:	andeq	r5, r1, r0, lsl #18
   1570c:	andeq	r5, r1, r0, lsl #18
   15710:	andeq	r5, r1, r0, lsl #18
   15714:	andeq	r5, r1, ip, lsr r8
   15718:	andeq	r5, r1, r0, lsl #18
   1571c:	andeq	r5, r1, ip, ror #16
   15720:	andeq	r5, r1, r0, lsl #18
   15724:	andeq	r5, r1, r0, lsl #18
   15728:			; <UNDEFINED> instruction: 0x000159b0
   1572c:	andeq	r5, r1, r0, lsl #18
   15730:	andeq	r5, r1, r0, lsl #18
   15734:	andeq	r5, r1, r0, lsl #18
   15738:	andeq	r5, r1, ip, lsr #17
   1573c:	andeq	r5, r1, r0, lsl #18
   15740:	andeq	r5, r1, r0, lsl #18
   15744:	andeq	r5, r1, r0, lsl #18
   15748:	andeq	r5, r1, r0, lsl #18
   1574c:	strdeq	r5, [r1], -r4
   15750:	andeq	r5, r1, r4, lsl r9
   15754:	andeq	r5, r1, r0, lsl #18
   15758:	andeq	r5, r1, r0, lsl #18
   1575c:	andeq	r5, r1, r0, lsl #18
   15760:	andeq	r5, r1, r0, lsl #18
   15764:	andeq	r5, r1, r0, lsl #18
   15768:	andeq	r5, r1, r0, lsl #18
   1576c:	andeq	r5, r1, r0, lsl #18
   15770:	andeq	r5, r1, r8, lsr sl
   15774:			; <UNDEFINED> instruction: 0x000169b0
   15778:	andeq	r5, r1, r0, lsl #18
   1577c:	andeq	r5, r1, r0, lsl #18
   15780:	andeq	r5, r1, r0, lsl #18
   15784:	andeq	r5, r1, r8, asr #15
   15788:	andeq	r5, r1, r0, lsl #18
   1578c:	andeq	r5, r1, r0, lsl #18
   15790:	andeq	r5, r1, r0, lsl #18
   15794:	andeq	r5, r1, ip, lsr r8
   15798:	andeq	r5, r1, r0, lsl #18
   1579c:	andeq	r5, r1, ip, ror #16
   157a0:	andeq	r5, r1, r0, lsl #18
   157a4:	andeq	r5, r1, r0, lsl #18
   157a8:	andeq	r5, r1, r0, lsl #18
   157ac:	andeq	r5, r1, r0, lsl #18
   157b0:	andeq	r5, r1, r0, lsl #18
   157b4:	andeq	r5, r1, r0, lsl #18
   157b8:	andeq	r5, r1, ip, lsr #17
   157bc:	andeq	r5, r1, r0, lsl #18
   157c0:	andeq	r5, r1, r0, lsl #18
   157c4:	andeq	r5, r1, ip, asr #20
   157c8:	cmn	r7, #1
   157cc:	str	r9, [sp, #12]
   157d0:	ble	15a60 <__assert_fail@plt+0x49d8>
   157d4:	ldr	r3, [sp, #28]
   157d8:	mvn	r0, #0
   157dc:	mvn	r1, #-2147483648	; 0x80000000
   157e0:	mvn	r8, #0
   157e4:	mvn	r9, #-2147483648	; 0x80000000
   157e8:	bl	171f8 <__assert_fail@plt+0x6170>
   157ec:	ldr	r2, [sp, #24]
   157f0:	ldr	r3, [sp, #28]
   157f4:	subs	r0, r0, r6
   157f8:	mov	r4, #1
   157fc:	sbcs	r0, r1, r7
   15800:	bge	15aa0 <__assert_fail@plt+0x4a18>
   15804:	b	15ab8 <__assert_fail@plt+0x4a30>
   15808:	cmp	r0, #105	; 0x69
   1580c:	mov	r3, #0
   15810:	bne	158f0 <__assert_fail@plt+0x4868>
   15814:	ldrb	r0, [r1, #2]
   15818:	mov	r1, #1
   1581c:	mov	r2, #1024	; 0x400
   15820:	cmp	r0, #66	; 0x42
   15824:	movweq	r1, #3
   15828:	str	r1, [sp, #16]
   1582c:	sub	r0, r4, #66	; 0x42
   15830:	cmp	r0, #53	; 0x35
   15834:	bls	156e0 <__assert_fail@plt+0x4658>
   15838:	b	15900 <__assert_fail@plt+0x4878>
   1583c:	cmn	r7, #1
   15840:	ble	15af4 <__assert_fail@plt+0x4a6c>
   15844:	ldr	r3, [sp, #28]
   15848:	mvn	r0, #0
   1584c:	mvn	r1, #-2147483648	; 0x80000000
   15850:	bl	171f8 <__assert_fail@plt+0x6170>
   15854:	ldr	r2, [sp, #24]
   15858:	ldr	r3, [sp, #28]
   1585c:	subs	r0, r0, r6
   15860:	sbcs	r0, r1, r7
   15864:	bge	15b28 <__assert_fail@plt+0x4aa0>
   15868:	b	16238 <__assert_fail@plt+0x51b0>
   1586c:	cmn	r7, #1
   15870:	str	r9, [sp, #12]
   15874:	ble	15b3c <__assert_fail@plt+0x4ab4>
   15878:	ldr	r3, [sp, #28]
   1587c:	mvn	r0, #0
   15880:	mvn	r1, #-2147483648	; 0x80000000
   15884:	mvn	r8, #0
   15888:	mvn	r9, #-2147483648	; 0x80000000
   1588c:	bl	171f8 <__assert_fail@plt+0x6170>
   15890:	ldr	r2, [sp, #24]
   15894:	ldr	r3, [sp, #28]
   15898:	subs	r0, r0, r6
   1589c:	mov	r4, #1
   158a0:	sbcs	r0, r1, r7
   158a4:	bge	15b7c <__assert_fail@plt+0x4af4>
   158a8:	b	15b94 <__assert_fail@plt+0x4b0c>
   158ac:	cmn	r7, #1
   158b0:	str	r9, [sp, #12]
   158b4:	ble	15bcc <__assert_fail@plt+0x4b44>
   158b8:	ldr	r3, [sp, #28]
   158bc:	mvn	r0, #0
   158c0:	mvn	r1, #-2147483648	; 0x80000000
   158c4:	mvn	r9, #-2147483648	; 0x80000000
   158c8:	str	r0, [sp, #8]
   158cc:	mvn	r0, #0
   158d0:	bl	171f8 <__assert_fail@plt+0x6170>
   158d4:	ldr	r2, [sp, #24]
   158d8:	ldr	r3, [sp, #28]
   158dc:	subs	r0, r0, r6
   158e0:	mov	r4, #1
   158e4:	sbcs	r0, r1, r7
   158e8:	bge	15c10 <__assert_fail@plt+0x4b88>
   158ec:	b	15c2c <__assert_fail@plt+0x4ba4>
   158f0:	mov	r2, #1024	; 0x400
   158f4:	sub	r0, r4, #66	; 0x42
   158f8:	cmp	r0, #53	; 0x35
   158fc:	bls	156e0 <__assert_fail@plt+0x4658>
   15900:	orr	r5, r5, #2
   15904:	strd	r6, [r9]
   15908:	mov	r0, r5
   1590c:	sub	sp, fp, #28
   15910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15914:	cmp	r7, #0
   15918:	str	r9, [sp, #12]
   1591c:	bmi	15f14 <__assert_fail@plt+0x4e8c>
   15920:	ldr	r3, [sp, #28]
   15924:	mvn	r0, #0
   15928:	mvn	r1, #-2147483648	; 0x80000000
   1592c:	mvn	r9, #-2147483648	; 0x80000000
   15930:	str	r0, [sp, #8]
   15934:	mvn	r0, #0
   15938:	bl	171f8 <__assert_fail@plt+0x6170>
   1593c:	ldr	r2, [sp, #24]
   15940:	ldr	r3, [sp, #28]
   15944:	subs	r0, r0, r6
   15948:	mov	r4, #1
   1594c:	sbcs	r0, r1, r7
   15950:	bge	15f58 <__assert_fail@plt+0x4ed0>
   15954:	b	15f74 <__assert_fail@plt+0x4eec>
   15958:	cmn	r7, #1
   1595c:	ble	15fb0 <__assert_fail@plt+0x4f28>
   15960:	cmp	r7, #2097152	; 0x200000
   15964:	blt	15fe0 <__assert_fail@plt+0x4f58>
   15968:	b	16238 <__assert_fail@plt+0x51b0>
   1596c:	cmp	r7, #0
   15970:	str	r9, [sp, #12]
   15974:	bmi	15ff0 <__assert_fail@plt+0x4f68>
   15978:	ldr	r3, [sp, #28]
   1597c:	mvn	r0, #0
   15980:	mvn	r1, #-2147483648	; 0x80000000
   15984:	mvn	r9, #-2147483648	; 0x80000000
   15988:	str	r0, [sp, #8]
   1598c:	mvn	r0, #0
   15990:	bl	171f8 <__assert_fail@plt+0x6170>
   15994:	ldr	r2, [sp, #24]
   15998:	ldr	r3, [sp, #28]
   1599c:	subs	r0, r0, r6
   159a0:	mov	r4, #1
   159a4:	sbcs	r0, r1, r7
   159a8:	bge	16034 <__assert_fail@plt+0x4fac>
   159ac:	b	16050 <__assert_fail@plt+0x4fc8>
   159b0:	cmp	r7, #0
   159b4:	str	r9, [sp, #12]
   159b8:	bmi	1608c <__assert_fail@plt+0x5004>
   159bc:	ldr	r3, [sp, #28]
   159c0:	mvn	r0, #0
   159c4:	mvn	r1, #-2147483648	; 0x80000000
   159c8:	mvn	r8, #-2147483648	; 0x80000000
   159cc:	str	r0, [sp, #8]
   159d0:	mvn	r0, #0
   159d4:	bl	171f8 <__assert_fail@plt+0x6170>
   159d8:	ldr	r2, [sp, #24]
   159dc:	ldr	r3, [sp, #28]
   159e0:	subs	r0, r0, r6
   159e4:	mov	r4, #1
   159e8:	sbcs	r0, r1, r7
   159ec:	bge	160d0 <__assert_fail@plt+0x5048>
   159f0:	b	160ec <__assert_fail@plt+0x5064>
   159f4:	cmp	r7, #0
   159f8:	str	r9, [sp, #12]
   159fc:	bmi	16128 <__assert_fail@plt+0x50a0>
   15a00:	ldr	r3, [sp, #28]
   15a04:	mvn	r0, #0
   15a08:	mvn	r1, #-2147483648	; 0x80000000
   15a0c:	mvn	r9, #-2147483648	; 0x80000000
   15a10:	str	r0, [sp, #8]
   15a14:	mvn	r0, #0
   15a18:	bl	171f8 <__assert_fail@plt+0x6170>
   15a1c:	ldr	r2, [sp, #24]
   15a20:	ldr	r3, [sp, #28]
   15a24:	subs	r0, r0, r6
   15a28:	mov	r4, #1
   15a2c:	sbcs	r0, r1, r7
   15a30:	bge	1616c <__assert_fail@plt+0x50e4>
   15a34:	b	16188 <__assert_fail@plt+0x5100>
   15a38:	cmn	r7, #1
   15a3c:	ble	161c8 <__assert_fail@plt+0x5140>
   15a40:	cmp	r7, #4194304	; 0x400000
   15a44:	blt	161f8 <__assert_fail@plt+0x5170>
   15a48:	b	16238 <__assert_fail@plt+0x51b0>
   15a4c:	cmn	r7, #1
   15a50:	ble	16208 <__assert_fail@plt+0x5180>
   15a54:	cmp	r7, #1073741824	; 0x40000000
   15a58:	bge	16238 <__assert_fail@plt+0x51b0>
   15a5c:	b	16258 <__assert_fail@plt+0x51d0>
   15a60:	and	r0, r6, r7
   15a64:	cmn	r0, #1
   15a68:	beq	15aa0 <__assert_fail@plt+0x4a18>
   15a6c:	mov	r0, #0
   15a70:	mov	r1, #-2147483648	; 0x80000000
   15a74:	mov	r2, r6
   15a78:	mov	r3, r7
   15a7c:	mov	r8, #0
   15a80:	mov	r9, #-2147483648	; 0x80000000
   15a84:	bl	17124 <__assert_fail@plt+0x609c>
   15a88:	ldr	r2, [sp, #24]
   15a8c:	ldr	r3, [sp, #28]
   15a90:	mov	r4, #1
   15a94:	subs	r0, r0, r2
   15a98:	sbcs	r0, r1, r3
   15a9c:	blt	15c68 <__assert_fail@plt+0x4be0>
   15aa0:	umull	r8, r0, r6, r2
   15aa4:	mov	r4, #0
   15aa8:	mla	r0, r6, r3, r0
   15aac:	mla	r9, r7, r2, r0
   15ab0:	cmp	r9, #0
   15ab4:	bmi	15c68 <__assert_fail@plt+0x4be0>
   15ab8:	ldr	r3, [sp, #28]
   15abc:	mvn	r0, #-2147483648	; 0x80000000
   15ac0:	mvn	r1, #-2147483648	; 0x80000000
   15ac4:	mov	r6, r4
   15ac8:	mvn	r4, #0
   15acc:	str	r0, [sp, #8]
   15ad0:	mvn	r0, #0
   15ad4:	bl	171f8 <__assert_fail@plt+0x6170>
   15ad8:	ldr	r2, [sp, #24]
   15adc:	ldr	r3, [sp, #28]
   15ae0:	subs	r0, r0, r8
   15ae4:	mov	r7, #1
   15ae8:	sbcs	r0, r1, r9
   15aec:	bge	15ca4 <__assert_fail@plt+0x4c1c>
   15af0:	b	15cc0 <__assert_fail@plt+0x4c38>
   15af4:	and	r0, r6, r7
   15af8:	cmn	r0, #1
   15afc:	beq	15b28 <__assert_fail@plt+0x4aa0>
   15b00:	mov	r0, #0
   15b04:	mov	r1, #-2147483648	; 0x80000000
   15b08:	mov	r2, r6
   15b0c:	mov	r3, r7
   15b10:	bl	17124 <__assert_fail@plt+0x609c>
   15b14:	ldr	r2, [sp, #24]
   15b18:	ldr	r3, [sp, #28]
   15b1c:	subs	r0, r0, r2
   15b20:	sbcs	r0, r1, r3
   15b24:	blt	16238 <__assert_fail@plt+0x51b0>
   15b28:	umull	r0, r1, r6, r2
   15b2c:	mla	r1, r6, r3, r1
   15b30:	mla	r7, r7, r2, r1
   15b34:	mov	r6, r0
   15b38:	b	169b0 <__assert_fail@plt+0x5928>
   15b3c:	and	r0, r6, r7
   15b40:	cmn	r0, #1
   15b44:	beq	15b7c <__assert_fail@plt+0x4af4>
   15b48:	mov	r0, #0
   15b4c:	mov	r1, #-2147483648	; 0x80000000
   15b50:	mov	r2, r6
   15b54:	mov	r3, r7
   15b58:	mov	r8, #0
   15b5c:	mov	r9, #-2147483648	; 0x80000000
   15b60:	bl	17124 <__assert_fail@plt+0x609c>
   15b64:	ldr	r2, [sp, #24]
   15b68:	ldr	r3, [sp, #28]
   15b6c:	mov	r4, #1
   15b70:	subs	r0, r0, r2
   15b74:	sbcs	r0, r1, r3
   15b78:	blt	15d54 <__assert_fail@plt+0x4ccc>
   15b7c:	umull	r8, r0, r6, r2
   15b80:	mov	r4, #0
   15b84:	mla	r0, r6, r3, r0
   15b88:	mla	r9, r7, r2, r0
   15b8c:	cmp	r9, #0
   15b90:	bmi	15d54 <__assert_fail@plt+0x4ccc>
   15b94:	ldr	r3, [sp, #28]
   15b98:	mvn	r0, #0
   15b9c:	mvn	r1, #-2147483648	; 0x80000000
   15ba0:	str	r4, [sp, #8]
   15ba4:	mvn	r6, #0
   15ba8:	mvn	r7, #-2147483648	; 0x80000000
   15bac:	bl	171f8 <__assert_fail@plt+0x6170>
   15bb0:	ldr	r4, [sp, #24]
   15bb4:	ldr	r3, [sp, #28]
   15bb8:	subs	r0, r0, r8
   15bbc:	mov	r2, #1
   15bc0:	sbcs	r0, r1, r9
   15bc4:	bge	15d8c <__assert_fail@plt+0x4d04>
   15bc8:	b	15ec4 <__assert_fail@plt+0x4e3c>
   15bcc:	and	r0, r6, r7
   15bd0:	cmn	r0, #1
   15bd4:	beq	15c10 <__assert_fail@plt+0x4b88>
   15bd8:	mov	r0, #0
   15bdc:	mov	r1, #-2147483648	; 0x80000000
   15be0:	mov	r2, r6
   15be4:	mov	r3, r7
   15be8:	bl	17124 <__assert_fail@plt+0x609c>
   15bec:	ldr	r2, [sp, #24]
   15bf0:	ldr	r3, [sp, #28]
   15bf4:	mov	r4, #1
   15bf8:	mov	r9, #-2147483648	; 0x80000000
   15bfc:	subs	r0, r0, r2
   15c00:	sbcs	r0, r1, r3
   15c04:	mov	r0, #0
   15c08:	str	r0, [sp, #8]
   15c0c:	blt	15da0 <__assert_fail@plt+0x4d18>
   15c10:	umull	r1, r0, r6, r2
   15c14:	mov	r4, #0
   15c18:	mla	r0, r6, r3, r0
   15c1c:	mla	r9, r7, r2, r0
   15c20:	str	r1, [sp, #8]
   15c24:	cmp	r9, #0
   15c28:	bmi	15da0 <__assert_fail@plt+0x4d18>
   15c2c:	ldr	r3, [sp, #28]
   15c30:	mvn	r0, #0
   15c34:	mvn	r1, #-2147483648	; 0x80000000
   15c38:	str	r4, [sp, #4]
   15c3c:	mvn	r6, #0
   15c40:	mvn	r8, #-2147483648	; 0x80000000
   15c44:	bl	171f8 <__assert_fail@plt+0x6170>
   15c48:	ldr	r4, [sp, #8]
   15c4c:	ldr	r2, [sp, #24]
   15c50:	ldr	r3, [sp, #28]
   15c54:	mov	r7, #1
   15c58:	subs	r0, r0, r4
   15c5c:	sbcs	r0, r1, r9
   15c60:	bge	15ddc <__assert_fail@plt+0x4d54>
   15c64:	b	15df4 <__assert_fail@plt+0x4d6c>
   15c68:	mov	r0, #-2147483648	; 0x80000000
   15c6c:	mov	r1, #-2147483648	; 0x80000000
   15c70:	mov	r2, r8
   15c74:	mov	r3, r9
   15c78:	mov	r6, r4
   15c7c:	mov	r4, #0
   15c80:	str	r0, [sp, #8]
   15c84:	mov	r0, #0
   15c88:	bl	17124 <__assert_fail@plt+0x609c>
   15c8c:	ldr	r2, [sp, #24]
   15c90:	ldr	r3, [sp, #28]
   15c94:	mov	r7, #1
   15c98:	subs	r0, r0, r2
   15c9c:	sbcs	r0, r1, r3
   15ca0:	blt	15d14 <__assert_fail@plt+0x4c8c>
   15ca4:	umull	r4, r0, r8, r2
   15ca8:	mov	r7, r6
   15cac:	mla	r0, r8, r3, r0
   15cb0:	mla	r0, r9, r2, r0
   15cb4:	cmp	r0, #0
   15cb8:	str	r0, [sp, #8]
   15cbc:	bmi	15d14 <__assert_fail@plt+0x4c8c>
   15cc0:	ldr	r3, [sp, #28]
   15cc4:	mvn	r0, #0
   15cc8:	mvn	r1, #-2147483648	; 0x80000000
   15ccc:	mov	r9, r7
   15cd0:	mvn	r6, #0
   15cd4:	mvn	r7, #-2147483648	; 0x80000000
   15cd8:	bl	171f8 <__assert_fail@plt+0x6170>
   15cdc:	ldr	r8, [sp, #8]
   15ce0:	ldr	r3, [sp, #24]
   15ce4:	ldr	ip, [sp, #28]
   15ce8:	subs	r0, r0, r4
   15cec:	mov	r2, #1
   15cf0:	sbcs	r0, r1, r8
   15cf4:	blt	15d08 <__assert_fail@plt+0x4c80>
   15cf8:	umull	r6, r0, r4, r3
   15cfc:	mov	r2, #0
   15d00:	mla	r0, r4, ip, r0
   15d04:	mla	r7, r8, r3, r0
   15d08:	orr	r3, r2, r9
   15d0c:	ldr	r9, [sp, #12]
   15d10:	b	169b0 <__assert_fail@plt+0x5928>
   15d14:	ldr	r8, [sp, #8]
   15d18:	mov	r0, #0
   15d1c:	mov	r1, #-2147483648	; 0x80000000
   15d20:	mov	r2, r4
   15d24:	mov	r9, r7
   15d28:	mov	r6, #0
   15d2c:	mov	r7, #-2147483648	; 0x80000000
   15d30:	mov	r3, r8
   15d34:	bl	17124 <__assert_fail@plt+0x609c>
   15d38:	ldr	r3, [sp, #24]
   15d3c:	ldr	ip, [sp, #28]
   15d40:	mov	r2, #1
   15d44:	subs	r0, r0, r3
   15d48:	sbcs	r0, r1, ip
   15d4c:	bge	15cf8 <__assert_fail@plt+0x4c70>
   15d50:	b	15d08 <__assert_fail@plt+0x4c80>
   15d54:	mov	r0, #0
   15d58:	mov	r1, #-2147483648	; 0x80000000
   15d5c:	mov	r2, r8
   15d60:	mov	r3, r9
   15d64:	str	r4, [sp, #8]
   15d68:	mov	r6, #0
   15d6c:	mov	r7, #-2147483648	; 0x80000000
   15d70:	bl	17124 <__assert_fail@plt+0x609c>
   15d74:	ldr	r4, [sp, #24]
   15d78:	ldr	r3, [sp, #28]
   15d7c:	mov	r2, #1
   15d80:	subs	r0, r0, r4
   15d84:	sbcs	r0, r1, r3
   15d88:	blt	15ec4 <__assert_fail@plt+0x4e3c>
   15d8c:	umull	r6, r0, r8, r4
   15d90:	mov	r2, #0
   15d94:	mla	r0, r8, r3, r0
   15d98:	mla	r7, r9, r4, r0
   15d9c:	b	15ec4 <__assert_fail@plt+0x4e3c>
   15da0:	str	r4, [sp, #4]
   15da4:	ldr	r4, [sp, #8]
   15da8:	mov	r0, #0
   15dac:	mov	r1, #-2147483648	; 0x80000000
   15db0:	mov	r3, r9
   15db4:	mov	r2, r4
   15db8:	bl	17124 <__assert_fail@plt+0x609c>
   15dbc:	ldr	r2, [sp, #24]
   15dc0:	ldr	r3, [sp, #28]
   15dc4:	mov	r7, #1
   15dc8:	mov	r6, #0
   15dcc:	mov	r8, #-2147483648	; 0x80000000
   15dd0:	subs	r0, r0, r2
   15dd4:	sbcs	r0, r1, r3
   15dd8:	blt	15e2c <__assert_fail@plt+0x4da4>
   15ddc:	umull	r6, r0, r4, r2
   15de0:	ldr	r7, [sp, #4]
   15de4:	mla	r0, r4, r3, r0
   15de8:	mla	r8, r9, r2, r0
   15dec:	cmp	r8, #0
   15df0:	bmi	15e2c <__assert_fail@plt+0x4da4>
   15df4:	ldr	r3, [sp, #28]
   15df8:	mvn	r0, #0
   15dfc:	mvn	r1, #-2147483648	; 0x80000000
   15e00:	str	r7, [sp, #8]
   15e04:	mvn	r4, #0
   15e08:	mvn	r9, #-2147483648	; 0x80000000
   15e0c:	bl	171f8 <__assert_fail@plt+0x6170>
   15e10:	ldr	r2, [sp, #24]
   15e14:	ldr	r3, [sp, #28]
   15e18:	subs	r0, r0, r6
   15e1c:	mov	r7, #1
   15e20:	sbcs	r0, r1, r8
   15e24:	bge	15e64 <__assert_fail@plt+0x4ddc>
   15e28:	b	15e7c <__assert_fail@plt+0x4df4>
   15e2c:	mov	r0, #0
   15e30:	mov	r1, #-2147483648	; 0x80000000
   15e34:	mov	r2, r6
   15e38:	mov	r3, r8
   15e3c:	str	r7, [sp, #8]
   15e40:	bl	17124 <__assert_fail@plt+0x609c>
   15e44:	ldr	r2, [sp, #24]
   15e48:	ldr	r3, [sp, #28]
   15e4c:	mov	r7, #1
   15e50:	mov	r4, #0
   15e54:	mov	r9, #-2147483648	; 0x80000000
   15e58:	subs	r0, r0, r2
   15e5c:	sbcs	r0, r1, r3
   15e60:	blt	15ed4 <__assert_fail@plt+0x4e4c>
   15e64:	umull	r4, r0, r6, r2
   15e68:	ldr	r7, [sp, #8]
   15e6c:	mla	r0, r6, r3, r0
   15e70:	mla	r9, r8, r2, r0
   15e74:	cmp	r9, #0
   15e78:	bmi	15ed4 <__assert_fail@plt+0x4e4c>
   15e7c:	ldr	r3, [sp, #28]
   15e80:	mvn	r0, #0
   15e84:	mvn	r1, #-2147483648	; 0x80000000
   15e88:	str	r7, [sp, #8]
   15e8c:	mvn	r6, #0
   15e90:	mvn	r7, #-2147483648	; 0x80000000
   15e94:	bl	171f8 <__assert_fail@plt+0x6170>
   15e98:	ldr	r3, [sp, #24]
   15e9c:	ldr	ip, [sp, #28]
   15ea0:	subs	r0, r0, r4
   15ea4:	mov	r2, #1
   15ea8:	mov	r8, r4
   15eac:	sbcs	r0, r1, r9
   15eb0:	blt	15ec4 <__assert_fail@plt+0x4e3c>
   15eb4:	umull	r6, r0, r8, r3
   15eb8:	mov	r2, #0
   15ebc:	mla	r0, r8, ip, r0
   15ec0:	mla	r7, r9, r3, r0
   15ec4:	ldr	r0, [sp, #8]
   15ec8:	ldr	r9, [sp, #12]
   15ecc:	orr	r3, r2, r0
   15ed0:	b	169b0 <__assert_fail@plt+0x5928>
   15ed4:	mov	r0, #0
   15ed8:	mov	r1, #-2147483648	; 0x80000000
   15edc:	mov	r2, r4
   15ee0:	mov	r3, r9
   15ee4:	str	r7, [sp, #8]
   15ee8:	mov	r8, r4
   15eec:	bl	17124 <__assert_fail@plt+0x609c>
   15ef0:	ldr	r3, [sp, #24]
   15ef4:	ldr	ip, [sp, #28]
   15ef8:	mov	r2, #1
   15efc:	mov	r6, #0
   15f00:	mov	r7, #-2147483648	; 0x80000000
   15f04:	subs	r0, r0, r3
   15f08:	sbcs	r0, r1, ip
   15f0c:	bge	15eb4 <__assert_fail@plt+0x4e2c>
   15f10:	b	15ec4 <__assert_fail@plt+0x4e3c>
   15f14:	and	r0, r6, r7
   15f18:	cmn	r0, #1
   15f1c:	beq	15f58 <__assert_fail@plt+0x4ed0>
   15f20:	mov	r0, #0
   15f24:	mov	r1, #-2147483648	; 0x80000000
   15f28:	mov	r2, r6
   15f2c:	mov	r3, r7
   15f30:	bl	17124 <__assert_fail@plt+0x609c>
   15f34:	ldr	r2, [sp, #24]
   15f38:	ldr	r3, [sp, #28]
   15f3c:	mov	r4, #1
   15f40:	mov	r9, #-2147483648	; 0x80000000
   15f44:	subs	r0, r0, r2
   15f48:	sbcs	r0, r1, r3
   15f4c:	mov	r0, #0
   15f50:	str	r0, [sp, #8]
   15f54:	blt	16268 <__assert_fail@plt+0x51e0>
   15f58:	umull	r1, r0, r6, r2
   15f5c:	mov	r4, #0
   15f60:	mla	r0, r6, r3, r0
   15f64:	mla	r9, r7, r2, r0
   15f68:	str	r1, [sp, #8]
   15f6c:	cmp	r9, #0
   15f70:	bmi	16268 <__assert_fail@plt+0x51e0>
   15f74:	ldr	r3, [sp, #28]
   15f78:	mvn	r0, #0
   15f7c:	mvn	r1, #-2147483648	; 0x80000000
   15f80:	str	r4, [sp, #4]
   15f84:	mvn	r8, #0
   15f88:	mvn	r4, #-2147483648	; 0x80000000
   15f8c:	bl	171f8 <__assert_fail@plt+0x6170>
   15f90:	ldr	r6, [sp, #8]
   15f94:	ldr	r2, [sp, #24]
   15f98:	ldr	r3, [sp, #28]
   15f9c:	mov	r7, #1
   15fa0:	subs	r0, r0, r6
   15fa4:	sbcs	r0, r1, r9
   15fa8:	bge	162a4 <__assert_fail@plt+0x521c>
   15fac:	b	162bc <__assert_fail@plt+0x5234>
   15fb0:	and	r0, r6, r7
   15fb4:	cmn	r0, #1
   15fb8:	beq	15fe0 <__assert_fail@plt+0x4f58>
   15fbc:	mov	r0, #0
   15fc0:	mov	r1, #-2147483648	; 0x80000000
   15fc4:	mov	r2, r6
   15fc8:	mov	r3, r7
   15fcc:	bl	17124 <__assert_fail@plt+0x609c>
   15fd0:	ldr	r3, [sp, #28]
   15fd4:	subs	r0, r0, #1024	; 0x400
   15fd8:	sbcs	r0, r1, #0
   15fdc:	blt	16238 <__assert_fail@plt+0x51b0>
   15fe0:	lsl	r0, r7, #10
   15fe4:	orr	r7, r0, r6, lsr #22
   15fe8:	lsl	r6, r6, #10
   15fec:	b	169b0 <__assert_fail@plt+0x5928>
   15ff0:	and	r0, r6, r7
   15ff4:	cmn	r0, #1
   15ff8:	beq	16034 <__assert_fail@plt+0x4fac>
   15ffc:	mov	r0, #0
   16000:	mov	r1, #-2147483648	; 0x80000000
   16004:	mov	r2, r6
   16008:	mov	r3, r7
   1600c:	bl	17124 <__assert_fail@plt+0x609c>
   16010:	ldr	r2, [sp, #24]
   16014:	ldr	r3, [sp, #28]
   16018:	mov	r4, #1
   1601c:	mov	r9, #-2147483648	; 0x80000000
   16020:	subs	r0, r0, r2
   16024:	sbcs	r0, r1, r3
   16028:	mov	r0, #0
   1602c:	str	r0, [sp, #8]
   16030:	blt	16580 <__assert_fail@plt+0x54f8>
   16034:	umull	r1, r0, r6, r2
   16038:	mov	r4, #0
   1603c:	mla	r0, r6, r3, r0
   16040:	mla	r9, r7, r2, r0
   16044:	str	r1, [sp, #8]
   16048:	cmp	r9, #0
   1604c:	bmi	16580 <__assert_fail@plt+0x54f8>
   16050:	ldr	r3, [sp, #28]
   16054:	mvn	r0, #0
   16058:	mvn	r1, #-2147483648	; 0x80000000
   1605c:	str	r4, [sp, #4]
   16060:	mvn	r8, #0
   16064:	mvn	r4, #-2147483648	; 0x80000000
   16068:	bl	171f8 <__assert_fail@plt+0x6170>
   1606c:	ldr	r6, [sp, #8]
   16070:	ldr	r2, [sp, #24]
   16074:	ldr	r3, [sp, #28]
   16078:	mov	r7, #1
   1607c:	subs	r0, r0, r6
   16080:	sbcs	r0, r1, r9
   16084:	bge	165bc <__assert_fail@plt+0x5534>
   16088:	b	165d4 <__assert_fail@plt+0x554c>
   1608c:	and	r0, r6, r7
   16090:	cmn	r0, #1
   16094:	beq	160d0 <__assert_fail@plt+0x5048>
   16098:	mov	r0, #0
   1609c:	mov	r1, #-2147483648	; 0x80000000
   160a0:	mov	r2, r6
   160a4:	mov	r3, r7
   160a8:	bl	17124 <__assert_fail@plt+0x609c>
   160ac:	ldr	r2, [sp, #24]
   160b0:	ldr	r3, [sp, #28]
   160b4:	mov	r4, #1
   160b8:	mov	r8, #-2147483648	; 0x80000000
   160bc:	subs	r0, r0, r2
   160c0:	sbcs	r0, r1, r3
   160c4:	mov	r0, #0
   160c8:	str	r0, [sp, #8]
   160cc:	blt	167fc <__assert_fail@plt+0x5774>
   160d0:	umull	r1, r0, r6, r2
   160d4:	mov	r4, #0
   160d8:	mla	r0, r6, r3, r0
   160dc:	mla	r8, r7, r2, r0
   160e0:	str	r1, [sp, #8]
   160e4:	cmp	r8, #0
   160e8:	bmi	167fc <__assert_fail@plt+0x5774>
   160ec:	ldr	r3, [sp, #28]
   160f0:	mvn	r0, #0
   160f4:	mvn	r1, #-2147483648	; 0x80000000
   160f8:	str	r4, [sp, #4]
   160fc:	mvn	r9, #0
   16100:	mvn	r4, #-2147483648	; 0x80000000
   16104:	bl	171f8 <__assert_fail@plt+0x6170>
   16108:	ldr	r6, [sp, #8]
   1610c:	ldr	r2, [sp, #24]
   16110:	ldr	r3, [sp, #28]
   16114:	mov	r7, #1
   16118:	subs	r0, r0, r6
   1611c:	sbcs	r0, r1, r8
   16120:	bge	16838 <__assert_fail@plt+0x57b0>
   16124:	b	16850 <__assert_fail@plt+0x57c8>
   16128:	and	r0, r6, r7
   1612c:	cmn	r0, #1
   16130:	beq	1616c <__assert_fail@plt+0x50e4>
   16134:	mov	r0, #0
   16138:	mov	r1, #-2147483648	; 0x80000000
   1613c:	mov	r2, r6
   16140:	mov	r3, r7
   16144:	bl	17124 <__assert_fail@plt+0x609c>
   16148:	ldr	r2, [sp, #24]
   1614c:	ldr	r3, [sp, #28]
   16150:	mov	r4, #1
   16154:	mov	r9, #-2147483648	; 0x80000000
   16158:	subs	r0, r0, r2
   1615c:	sbcs	r0, r1, r3
   16160:	mov	r0, #0
   16164:	str	r0, [sp, #8]
   16168:	blt	16a18 <__assert_fail@plt+0x5990>
   1616c:	umull	r1, r0, r6, r2
   16170:	mov	r4, #0
   16174:	mla	r0, r6, r3, r0
   16178:	mla	r9, r7, r2, r0
   1617c:	str	r1, [sp, #8]
   16180:	cmp	r9, #0
   16184:	bmi	16a18 <__assert_fail@plt+0x5990>
   16188:	ldr	r3, [sp, #28]
   1618c:	mvn	r0, #0
   16190:	mvn	r1, #-2147483648	; 0x80000000
   16194:	str	r4, [sp]
   16198:	mvn	r8, #-2147483648	; 0x80000000
   1619c:	str	r0, [sp, #4]
   161a0:	mvn	r0, #0
   161a4:	bl	171f8 <__assert_fail@plt+0x6170>
   161a8:	ldr	r6, [sp, #8]
   161ac:	ldr	r2, [sp, #24]
   161b0:	ldr	r3, [sp, #28]
   161b4:	mov	r7, #1
   161b8:	subs	r0, r0, r6
   161bc:	sbcs	r0, r1, r9
   161c0:	bge	16a58 <__assert_fail@plt+0x59d0>
   161c4:	b	16a74 <__assert_fail@plt+0x59ec>
   161c8:	and	r0, r6, r7
   161cc:	cmn	r0, #1
   161d0:	beq	161f8 <__assert_fail@plt+0x5170>
   161d4:	mov	r0, #0
   161d8:	mov	r1, #-2147483648	; 0x80000000
   161dc:	mov	r2, r6
   161e0:	mov	r3, r7
   161e4:	bl	17124 <__assert_fail@plt+0x609c>
   161e8:	ldr	r3, [sp, #28]
   161ec:	subs	r0, r0, #512	; 0x200
   161f0:	sbcs	r0, r1, #0
   161f4:	blt	16238 <__assert_fail@plt+0x51b0>
   161f8:	lsl	r0, r7, #9
   161fc:	orr	r7, r0, r6, lsr #23
   16200:	lsl	r6, r6, #9
   16204:	b	169b0 <__assert_fail@plt+0x5928>
   16208:	and	r0, r6, r7
   1620c:	cmn	r0, #1
   16210:	beq	16258 <__assert_fail@plt+0x51d0>
   16214:	mov	r0, #0
   16218:	mov	r1, #-2147483648	; 0x80000000
   1621c:	mov	r2, r6
   16220:	mov	r3, r7
   16224:	bl	17124 <__assert_fail@plt+0x609c>
   16228:	ldr	r3, [sp, #28]
   1622c:	subs	r0, r0, #2
   16230:	sbcs	r0, r1, #0
   16234:	bge	16258 <__assert_fail@plt+0x51d0>
   16238:	cmp	r7, #0
   1623c:	mvn	r0, #-2147483648	; 0x80000000
   16240:	mvn	r6, #0
   16244:	mov	r3, #1
   16248:	movmi	r0, #-2147483648	; 0x80000000
   1624c:	movwmi	r6, #0
   16250:	mov	r7, r0
   16254:	b	169b0 <__assert_fail@plt+0x5928>
   16258:	lsl	r0, r7, #1
   1625c:	orr	r7, r0, r6, lsr #31
   16260:	lsl	r6, r6, #1
   16264:	b	169b0 <__assert_fail@plt+0x5928>
   16268:	ldr	r6, [sp, #8]
   1626c:	mov	r0, #0
   16270:	mov	r1, #-2147483648	; 0x80000000
   16274:	mov	r3, r9
   16278:	str	r4, [sp, #4]
   1627c:	mov	r2, r6
   16280:	bl	17124 <__assert_fail@plt+0x609c>
   16284:	ldr	r2, [sp, #24]
   16288:	ldr	r3, [sp, #28]
   1628c:	mov	r7, #1
   16290:	mov	r8, #0
   16294:	mov	r4, #-2147483648	; 0x80000000
   16298:	subs	r0, r0, r2
   1629c:	sbcs	r0, r1, r3
   162a0:	blt	162f4 <__assert_fail@plt+0x526c>
   162a4:	umull	r8, r0, r6, r2
   162a8:	ldr	r7, [sp, #4]
   162ac:	mla	r0, r6, r3, r0
   162b0:	mla	r4, r9, r2, r0
   162b4:	cmp	r4, #0
   162b8:	bmi	162f4 <__assert_fail@plt+0x526c>
   162bc:	ldr	r3, [sp, #28]
   162c0:	mvn	r0, #0
   162c4:	mvn	r1, #-2147483648	; 0x80000000
   162c8:	str	r7, [sp, #8]
   162cc:	mvn	r7, #0
   162d0:	mvn	r9, #-2147483648	; 0x80000000
   162d4:	bl	171f8 <__assert_fail@plt+0x6170>
   162d8:	ldr	r2, [sp, #24]
   162dc:	ldr	r3, [sp, #28]
   162e0:	subs	r0, r0, r8
   162e4:	mov	r6, #1
   162e8:	sbcs	r0, r1, r4
   162ec:	bge	1632c <__assert_fail@plt+0x52a4>
   162f0:	b	16344 <__assert_fail@plt+0x52bc>
   162f4:	mov	r0, #0
   162f8:	mov	r1, #-2147483648	; 0x80000000
   162fc:	mov	r2, r8
   16300:	mov	r3, r4
   16304:	str	r7, [sp, #8]
   16308:	bl	17124 <__assert_fail@plt+0x609c>
   1630c:	ldr	r2, [sp, #24]
   16310:	ldr	r3, [sp, #28]
   16314:	mov	r6, #1
   16318:	mov	r7, #0
   1631c:	mov	r9, #-2147483648	; 0x80000000
   16320:	subs	r0, r0, r2
   16324:	sbcs	r0, r1, r3
   16328:	blt	16384 <__assert_fail@plt+0x52fc>
   1632c:	umull	r7, r0, r8, r2
   16330:	ldr	r6, [sp, #8]
   16334:	mla	r0, r8, r3, r0
   16338:	mla	r9, r4, r2, r0
   1633c:	cmp	r9, #0
   16340:	bmi	16384 <__assert_fail@plt+0x52fc>
   16344:	ldr	r3, [sp, #28]
   16348:	mvn	r0, #0
   1634c:	mvn	r1, #-2147483648	; 0x80000000
   16350:	str	r6, [sp, #8]
   16354:	mvn	r8, #0
   16358:	mvn	r4, #-2147483648	; 0x80000000
   1635c:	bl	171f8 <__assert_fail@plt+0x6170>
   16360:	ldr	r2, [sp, #24]
   16364:	ldr	r3, [sp, #28]
   16368:	subs	r0, r0, r7
   1636c:	sbcs	r0, r1, r9
   16370:	bge	163c8 <__assert_fail@plt+0x5340>
   16374:	mov	r0, #1
   16378:	mov	r6, #0
   1637c:	str	r0, [sp, #8]
   16380:	b	163e0 <__assert_fail@plt+0x5358>
   16384:	mov	r0, #0
   16388:	mov	r1, #-2147483648	; 0x80000000
   1638c:	mov	r2, r7
   16390:	mov	r3, r9
   16394:	str	r6, [sp, #8]
   16398:	bl	17124 <__assert_fail@plt+0x609c>
   1639c:	ldr	r2, [sp, #24]
   163a0:	ldr	r3, [sp, #28]
   163a4:	subs	r0, r0, r2
   163a8:	sbcs	r0, r1, r3
   163ac:	bge	163c8 <__assert_fail@plt+0x5340>
   163b0:	mov	r0, #1
   163b4:	mov	r8, #0
   163b8:	mov	r4, #-2147483648	; 0x80000000
   163bc:	mov	r6, #0
   163c0:	str	r0, [sp, #8]
   163c4:	b	16418 <__assert_fail@plt+0x5390>
   163c8:	umull	r8, r0, r7, r2
   163cc:	mov	r6, #0
   163d0:	mla	r0, r7, r3, r0
   163d4:	mla	r4, r9, r2, r0
   163d8:	cmp	r4, #0
   163dc:	bmi	16418 <__assert_fail@plt+0x5390>
   163e0:	ldr	r3, [sp, #28]
   163e4:	mvn	r0, #0
   163e8:	mvn	r1, #-2147483648	; 0x80000000
   163ec:	mvn	r9, #0
   163f0:	mvn	r7, #-2147483648	; 0x80000000
   163f4:	bl	171f8 <__assert_fail@plt+0x6170>
   163f8:	ldr	r2, [sp, #24]
   163fc:	ldr	r3, [sp, #28]
   16400:	subs	r0, r0, r8
   16404:	sbcs	r0, r1, r4
   16408:	bge	16454 <__assert_fail@plt+0x53cc>
   1640c:	mov	r0, #1
   16410:	str	r0, [sp, #8]
   16414:	b	16468 <__assert_fail@plt+0x53e0>
   16418:	mov	r0, #0
   1641c:	mov	r1, #-2147483648	; 0x80000000
   16420:	mov	r2, r8
   16424:	mov	r3, r4
   16428:	bl	17124 <__assert_fail@plt+0x609c>
   1642c:	ldr	r2, [sp, #24]
   16430:	ldr	r3, [sp, #28]
   16434:	subs	r0, r0, r2
   16438:	sbcs	r0, r1, r3
   1643c:	bge	16454 <__assert_fail@plt+0x53cc>
   16440:	mov	r0, #1
   16444:	mov	r9, #0
   16448:	mov	r7, #-2147483648	; 0x80000000
   1644c:	str	r0, [sp, #8]
   16450:	b	164a4 <__assert_fail@plt+0x541c>
   16454:	umull	r9, r0, r8, r2
   16458:	mla	r0, r8, r3, r0
   1645c:	mla	r7, r4, r2, r0
   16460:	cmp	r7, #0
   16464:	bmi	164a4 <__assert_fail@plt+0x541c>
   16468:	ldr	r3, [sp, #28]
   1646c:	mvn	r0, #0
   16470:	mvn	r1, #-2147483648	; 0x80000000
   16474:	mvn	r8, #0
   16478:	mvn	r4, #-2147483648	; 0x80000000
   1647c:	bl	171f8 <__assert_fail@plt+0x6170>
   16480:	ldr	r2, [sp, #24]
   16484:	ldr	r3, [sp, #28]
   16488:	subs	r0, r0, r9
   1648c:	sbcs	r0, r1, r7
   16490:	bge	164e4 <__assert_fail@plt+0x545c>
   16494:	ldr	r9, [sp, #12]
   16498:	mov	r0, #1
   1649c:	str	r0, [sp, #8]
   164a0:	b	164fc <__assert_fail@plt+0x5474>
   164a4:	mov	r0, #0
   164a8:	mov	r1, #-2147483648	; 0x80000000
   164ac:	mov	r2, r9
   164b0:	mov	r3, r7
   164b4:	bl	17124 <__assert_fail@plt+0x609c>
   164b8:	ldr	r2, [sp, #24]
   164bc:	ldr	r3, [sp, #28]
   164c0:	subs	r0, r0, r2
   164c4:	sbcs	r0, r1, r3
   164c8:	bge	164e4 <__assert_fail@plt+0x545c>
   164cc:	ldr	r9, [sp, #12]
   164d0:	mov	r0, #1
   164d4:	mov	r8, #0
   164d8:	mov	r4, #-2147483648	; 0x80000000
   164dc:	str	r0, [sp, #8]
   164e0:	b	1654c <__assert_fail@plt+0x54c4>
   164e4:	umull	r8, r0, r9, r2
   164e8:	mla	r0, r9, r3, r0
   164ec:	ldr	r9, [sp, #12]
   164f0:	mla	r4, r7, r2, r0
   164f4:	cmp	r4, #0
   164f8:	bmi	1654c <__assert_fail@plt+0x54c4>
   164fc:	ldr	r3, [sp, #28]
   16500:	mvn	r0, #0
   16504:	mvn	r1, #-2147483648	; 0x80000000
   16508:	mvn	r6, #0
   1650c:	bl	171f8 <__assert_fail@plt+0x6170>
   16510:	ldr	r7, [sp, #24]
   16514:	ldr	r3, [sp, #28]
   16518:	subs	r0, r0, r8
   1651c:	mov	r2, #1
   16520:	sbcs	r0, r1, r4
   16524:	mvn	r0, #-2147483648	; 0x80000000
   16528:	blt	1653c <__assert_fail@plt+0x54b4>
   1652c:	umull	r6, r0, r8, r7
   16530:	mov	r2, #0
   16534:	mla	r0, r8, r3, r0
   16538:	mla	r0, r4, r7, r0
   1653c:	ldr	r1, [sp, #8]
   16540:	mov	r7, r0
   16544:	orr	r3, r2, r1
   16548:	b	169b0 <__assert_fail@plt+0x5928>
   1654c:	mov	r0, #0
   16550:	mov	r1, #-2147483648	; 0x80000000
   16554:	mov	r2, r8
   16558:	mov	r3, r4
   1655c:	bl	17124 <__assert_fail@plt+0x609c>
   16560:	ldr	r7, [sp, #24]
   16564:	ldr	r3, [sp, #28]
   16568:	mov	r2, #1
   1656c:	subs	r0, r0, r7
   16570:	sbcs	r0, r1, r3
   16574:	mov	r0, #-2147483648	; 0x80000000
   16578:	bge	1652c <__assert_fail@plt+0x54a4>
   1657c:	b	1653c <__assert_fail@plt+0x54b4>
   16580:	ldr	r6, [sp, #8]
   16584:	mov	r0, #0
   16588:	mov	r1, #-2147483648	; 0x80000000
   1658c:	mov	r3, r9
   16590:	str	r4, [sp, #4]
   16594:	mov	r2, r6
   16598:	bl	17124 <__assert_fail@plt+0x609c>
   1659c:	ldr	r2, [sp, #24]
   165a0:	ldr	r3, [sp, #28]
   165a4:	mov	r7, #1
   165a8:	mov	r8, #0
   165ac:	mov	r4, #-2147483648	; 0x80000000
   165b0:	subs	r0, r0, r2
   165b4:	sbcs	r0, r1, r3
   165b8:	blt	16610 <__assert_fail@plt+0x5588>
   165bc:	umull	r8, r0, r6, r2
   165c0:	ldr	r7, [sp, #4]
   165c4:	mla	r0, r6, r3, r0
   165c8:	mla	r4, r9, r2, r0
   165cc:	cmp	r4, #0
   165d0:	bmi	16610 <__assert_fail@plt+0x5588>
   165d4:	ldr	r3, [sp, #28]
   165d8:	mvn	r0, #0
   165dc:	mvn	r1, #-2147483648	; 0x80000000
   165e0:	str	r7, [sp, #4]
   165e4:	mvn	r7, #0
   165e8:	mvn	r9, #-2147483648	; 0x80000000
   165ec:	bl	171f8 <__assert_fail@plt+0x6170>
   165f0:	ldr	r2, [sp, #24]
   165f4:	ldr	r3, [sp, #28]
   165f8:	subs	r0, r0, r8
   165fc:	mov	r6, #1
   16600:	sbcs	r0, r1, r4
   16604:	str	r6, [sp, #8]
   16608:	bge	1664c <__assert_fail@plt+0x55c4>
   1660c:	b	16668 <__assert_fail@plt+0x55e0>
   16610:	mov	r0, #0
   16614:	mov	r1, #-2147483648	; 0x80000000
   16618:	mov	r2, r8
   1661c:	mov	r3, r4
   16620:	str	r7, [sp, #4]
   16624:	bl	17124 <__assert_fail@plt+0x609c>
   16628:	ldr	r2, [sp, #24]
   1662c:	ldr	r3, [sp, #28]
   16630:	mov	r7, #1
   16634:	mov	r9, #-2147483648	; 0x80000000
   16638:	str	r7, [sp, #8]
   1663c:	mov	r7, #0
   16640:	subs	r0, r0, r2
   16644:	sbcs	r0, r1, r3
   16648:	blt	166a0 <__assert_fail@plt+0x5618>
   1664c:	umull	r7, r0, r8, r2
   16650:	mla	r0, r8, r3, r0
   16654:	mla	r9, r4, r2, r0
   16658:	ldr	r0, [sp, #4]
   1665c:	cmp	r9, #0
   16660:	str	r0, [sp, #8]
   16664:	bmi	166a0 <__assert_fail@plt+0x5618>
   16668:	ldr	r3, [sp, #28]
   1666c:	mvn	r0, #0
   16670:	mvn	r1, #-2147483648	; 0x80000000
   16674:	mvn	r4, #0
   16678:	mvn	r8, #-2147483648	; 0x80000000
   1667c:	bl	171f8 <__assert_fail@plt+0x6170>
   16680:	ldr	r2, [sp, #24]
   16684:	ldr	r3, [sp, #28]
   16688:	subs	r0, r0, r7
   1668c:	sbcs	r0, r1, r9
   16690:	bge	166dc <__assert_fail@plt+0x5654>
   16694:	mov	r0, #1
   16698:	str	r0, [sp, #8]
   1669c:	b	166f0 <__assert_fail@plt+0x5668>
   166a0:	mov	r0, #0
   166a4:	mov	r1, #-2147483648	; 0x80000000
   166a8:	mov	r2, r7
   166ac:	mov	r3, r9
   166b0:	bl	17124 <__assert_fail@plt+0x609c>
   166b4:	ldr	r2, [sp, #24]
   166b8:	ldr	r3, [sp, #28]
   166bc:	subs	r0, r0, r2
   166c0:	sbcs	r0, r1, r3
   166c4:	bge	166dc <__assert_fail@plt+0x5654>
   166c8:	mov	r0, #1
   166cc:	mov	r4, #0
   166d0:	mov	r8, #-2147483648	; 0x80000000
   166d4:	str	r0, [sp, #8]
   166d8:	b	16724 <__assert_fail@plt+0x569c>
   166dc:	umull	r4, r0, r7, r2
   166e0:	mla	r0, r7, r3, r0
   166e4:	mla	r8, r9, r2, r0
   166e8:	cmp	r8, #0
   166ec:	bmi	16724 <__assert_fail@plt+0x569c>
   166f0:	ldr	r3, [sp, #28]
   166f4:	mvn	r0, #0
   166f8:	mvn	r1, #-2147483648	; 0x80000000
   166fc:	mvn	r6, #0
   16700:	mvn	r9, #-2147483648	; 0x80000000
   16704:	bl	171f8 <__assert_fail@plt+0x6170>
   16708:	ldr	r2, [sp, #24]
   1670c:	ldr	r3, [sp, #28]
   16710:	subs	r0, r0, r4
   16714:	sbcs	r0, r1, r8
   16718:	bge	1675c <__assert_fail@plt+0x56d4>
   1671c:	mov	r8, #1
   16720:	b	16774 <__assert_fail@plt+0x56ec>
   16724:	mov	r0, #0
   16728:	mov	r1, #-2147483648	; 0x80000000
   1672c:	mov	r2, r4
   16730:	mov	r3, r8
   16734:	bl	17124 <__assert_fail@plt+0x609c>
   16738:	ldr	r2, [sp, #24]
   1673c:	ldr	r3, [sp, #28]
   16740:	subs	r0, r0, r2
   16744:	sbcs	r0, r1, r3
   16748:	bge	1675c <__assert_fail@plt+0x56d4>
   1674c:	mov	r8, #1
   16750:	mov	r6, #0
   16754:	mov	r9, #-2147483648	; 0x80000000
   16758:	b	167c4 <__assert_fail@plt+0x573c>
   1675c:	umull	r6, r0, r4, r2
   16760:	mla	r0, r4, r3, r0
   16764:	mla	r9, r8, r2, r0
   16768:	ldr	r8, [sp, #8]
   1676c:	cmp	r9, #0
   16770:	bmi	167c4 <__assert_fail@plt+0x573c>
   16774:	ldr	r3, [sp, #28]
   16778:	mvn	r0, #0
   1677c:	mvn	r1, #-2147483648	; 0x80000000
   16780:	mvn	r4, #0
   16784:	mvn	r7, #-2147483648	; 0x80000000
   16788:	bl	171f8 <__assert_fail@plt+0x6170>
   1678c:	ldr	r3, [sp, #24]
   16790:	ldr	ip, [sp, #28]
   16794:	subs	r0, r0, r6
   16798:	mov	r2, #1
   1679c:	sbcs	r0, r1, r9
   167a0:	blt	167b4 <__assert_fail@plt+0x572c>
   167a4:	umull	r4, r0, r6, r3
   167a8:	mov	r2, #0
   167ac:	mla	r0, r6, ip, r0
   167b0:	mla	r7, r9, r3, r0
   167b4:	ldr	r9, [sp, #12]
   167b8:	orr	r3, r2, r8
   167bc:	mov	r6, r4
   167c0:	b	169b0 <__assert_fail@plt+0x5928>
   167c4:	mov	r0, #0
   167c8:	mov	r1, #-2147483648	; 0x80000000
   167cc:	mov	r2, r6
   167d0:	mov	r3, r9
   167d4:	bl	17124 <__assert_fail@plt+0x609c>
   167d8:	ldr	r3, [sp, #24]
   167dc:	ldr	ip, [sp, #28]
   167e0:	mov	r2, #1
   167e4:	mov	r4, #0
   167e8:	mov	r7, #-2147483648	; 0x80000000
   167ec:	subs	r0, r0, r3
   167f0:	sbcs	r0, r1, ip
   167f4:	bge	167a4 <__assert_fail@plt+0x571c>
   167f8:	b	167b4 <__assert_fail@plt+0x572c>
   167fc:	ldr	r6, [sp, #8]
   16800:	mov	r0, #0
   16804:	mov	r1, #-2147483648	; 0x80000000
   16808:	mov	r3, r8
   1680c:	str	r4, [sp, #4]
   16810:	mov	r2, r6
   16814:	bl	17124 <__assert_fail@plt+0x609c>
   16818:	ldr	r2, [sp, #24]
   1681c:	ldr	r3, [sp, #28]
   16820:	mov	r7, #1
   16824:	mov	r9, #0
   16828:	mov	r4, #-2147483648	; 0x80000000
   1682c:	subs	r0, r0, r2
   16830:	sbcs	r0, r1, r3
   16834:	blt	1688c <__assert_fail@plt+0x5804>
   16838:	umull	r9, r0, r6, r2
   1683c:	ldr	r7, [sp, #4]
   16840:	mla	r0, r6, r3, r0
   16844:	mla	r4, r8, r2, r0
   16848:	cmp	r4, #0
   1684c:	bmi	1688c <__assert_fail@plt+0x5804>
   16850:	ldr	r3, [sp, #28]
   16854:	mvn	r0, #0
   16858:	mvn	r1, #-2147483648	; 0x80000000
   1685c:	str	r7, [sp, #4]
   16860:	mvn	r8, #0
   16864:	mvn	r7, #-2147483648	; 0x80000000
   16868:	bl	171f8 <__assert_fail@plt+0x6170>
   1686c:	ldr	r2, [sp, #24]
   16870:	ldr	r3, [sp, #28]
   16874:	subs	r0, r0, r9
   16878:	mov	r6, #1
   1687c:	sbcs	r0, r1, r4
   16880:	str	r6, [sp, #8]
   16884:	bge	168c8 <__assert_fail@plt+0x5840>
   16888:	b	168e4 <__assert_fail@plt+0x585c>
   1688c:	mov	r0, #0
   16890:	mov	r1, #-2147483648	; 0x80000000
   16894:	mov	r2, r9
   16898:	mov	r3, r4
   1689c:	str	r7, [sp, #4]
   168a0:	bl	17124 <__assert_fail@plt+0x609c>
   168a4:	ldr	r2, [sp, #24]
   168a8:	ldr	r3, [sp, #28]
   168ac:	mov	r7, #1
   168b0:	mov	r8, #0
   168b4:	str	r7, [sp, #8]
   168b8:	mov	r7, #-2147483648	; 0x80000000
   168bc:	subs	r0, r0, r2
   168c0:	sbcs	r0, r1, r3
   168c4:	blt	16918 <__assert_fail@plt+0x5890>
   168c8:	umull	r8, r0, r9, r2
   168cc:	mla	r0, r9, r3, r0
   168d0:	mla	r7, r4, r2, r0
   168d4:	ldr	r0, [sp, #4]
   168d8:	cmp	r7, #0
   168dc:	str	r0, [sp, #8]
   168e0:	bmi	16918 <__assert_fail@plt+0x5890>
   168e4:	ldr	r3, [sp, #28]
   168e8:	mvn	r0, #0
   168ec:	mvn	r1, #-2147483648	; 0x80000000
   168f0:	mvn	r4, #0
   168f4:	mvn	r9, #-2147483648	; 0x80000000
   168f8:	bl	171f8 <__assert_fail@plt+0x6170>
   168fc:	ldr	r2, [sp, #24]
   16900:	ldr	r3, [sp, #28]
   16904:	subs	r0, r0, r8
   16908:	sbcs	r0, r1, r7
   1690c:	bge	16950 <__assert_fail@plt+0x58c8>
   16910:	mov	r8, #1
   16914:	b	16968 <__assert_fail@plt+0x58e0>
   16918:	mov	r0, #0
   1691c:	mov	r1, #-2147483648	; 0x80000000
   16920:	mov	r2, r8
   16924:	mov	r3, r7
   16928:	bl	17124 <__assert_fail@plt+0x609c>
   1692c:	ldr	r2, [sp, #24]
   16930:	ldr	r3, [sp, #28]
   16934:	subs	r0, r0, r2
   16938:	sbcs	r0, r1, r3
   1693c:	bge	16950 <__assert_fail@plt+0x58c8>
   16940:	mov	r8, #1
   16944:	mov	r4, #0
   16948:	mov	r9, #-2147483648	; 0x80000000
   1694c:	b	169e0 <__assert_fail@plt+0x5958>
   16950:	umull	r4, r0, r8, r2
   16954:	mla	r0, r8, r3, r0
   16958:	ldr	r8, [sp, #8]
   1695c:	mla	r9, r7, r2, r0
   16960:	cmp	r9, #0
   16964:	bmi	169e0 <__assert_fail@plt+0x5958>
   16968:	ldr	r3, [sp, #28]
   1696c:	mvn	r0, #0
   16970:	mvn	r1, #-2147483648	; 0x80000000
   16974:	mvn	r6, #0
   16978:	mvn	r7, #-2147483648	; 0x80000000
   1697c:	bl	171f8 <__assert_fail@plt+0x6170>
   16980:	ldr	r3, [sp, #24]
   16984:	ldr	ip, [sp, #28]
   16988:	subs	r0, r0, r4
   1698c:	mov	r2, #1
   16990:	sbcs	r0, r1, r9
   16994:	blt	169a8 <__assert_fail@plt+0x5920>
   16998:	umull	r6, r0, r4, r3
   1699c:	mov	r2, #0
   169a0:	mla	r0, r4, ip, r0
   169a4:	mla	r7, r9, r3, r0
   169a8:	ldr	r9, [sp, #12]
   169ac:	orr	r3, r2, r8
   169b0:	ldr	r1, [sp, #20]
   169b4:	ldr	r2, [sp, #16]
   169b8:	orr	r5, r3, r5
   169bc:	add	r0, r1, r2
   169c0:	str	r0, [sl]
   169c4:	ldrb	r0, [r1, r2]
   169c8:	cmp	r0, #0
   169cc:	orrne	r5, r5, #2
   169d0:	strd	r6, [r9]
   169d4:	mov	r0, r5
   169d8:	sub	sp, fp, #28
   169dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169e0:	mov	r0, #0
   169e4:	mov	r1, #-2147483648	; 0x80000000
   169e8:	mov	r2, r4
   169ec:	mov	r3, r9
   169f0:	bl	17124 <__assert_fail@plt+0x609c>
   169f4:	ldr	r3, [sp, #24]
   169f8:	ldr	ip, [sp, #28]
   169fc:	mov	r2, #1
   16a00:	mov	r6, #0
   16a04:	mov	r7, #-2147483648	; 0x80000000
   16a08:	subs	r0, r0, r3
   16a0c:	sbcs	r0, r1, ip
   16a10:	bge	16998 <__assert_fail@plt+0x5910>
   16a14:	b	169a8 <__assert_fail@plt+0x5920>
   16a18:	ldr	r6, [sp, #8]
   16a1c:	mov	r0, #0
   16a20:	mov	r1, #-2147483648	; 0x80000000
   16a24:	mov	r3, r9
   16a28:	str	r4, [sp]
   16a2c:	mov	r2, r6
   16a30:	bl	17124 <__assert_fail@plt+0x609c>
   16a34:	ldr	r2, [sp, #24]
   16a38:	ldr	r3, [sp, #28]
   16a3c:	mov	r7, #1
   16a40:	mov	r8, #-2147483648	; 0x80000000
   16a44:	subs	r0, r0, r2
   16a48:	sbcs	r0, r1, r3
   16a4c:	mov	r0, #0
   16a50:	str	r0, [sp, #4]
   16a54:	blt	16ab4 <__assert_fail@plt+0x5a2c>
   16a58:	umull	r1, r0, r6, r2
   16a5c:	ldr	r7, [sp]
   16a60:	mla	r0, r6, r3, r0
   16a64:	mla	r8, r9, r2, r0
   16a68:	str	r1, [sp, #4]
   16a6c:	cmp	r8, #0
   16a70:	bmi	16ab4 <__assert_fail@plt+0x5a2c>
   16a74:	ldr	r3, [sp, #28]
   16a78:	mvn	r0, #0
   16a7c:	mvn	r1, #-2147483648	; 0x80000000
   16a80:	str	r7, [sp]
   16a84:	mvn	r7, #0
   16a88:	mvn	r4, #-2147483648	; 0x80000000
   16a8c:	bl	171f8 <__assert_fail@plt+0x6170>
   16a90:	mov	r6, #1
   16a94:	ldr	r2, [sp, #24]
   16a98:	ldr	r3, [sp, #28]
   16a9c:	str	r6, [sp, #8]
   16aa0:	ldr	r6, [sp, #4]
   16aa4:	subs	r0, r0, r6
   16aa8:	sbcs	r0, r1, r8
   16aac:	bge	16af4 <__assert_fail@plt+0x5a6c>
   16ab0:	b	16b10 <__assert_fail@plt+0x5a88>
   16ab4:	ldr	r6, [sp, #4]
   16ab8:	mov	r0, #0
   16abc:	mov	r1, #-2147483648	; 0x80000000
   16ac0:	mov	r3, r8
   16ac4:	str	r7, [sp]
   16ac8:	mov	r2, r6
   16acc:	bl	17124 <__assert_fail@plt+0x609c>
   16ad0:	ldr	r2, [sp, #24]
   16ad4:	ldr	r3, [sp, #28]
   16ad8:	mov	r7, #1
   16adc:	mov	r4, #-2147483648	; 0x80000000
   16ae0:	str	r7, [sp, #8]
   16ae4:	mov	r7, #0
   16ae8:	subs	r0, r0, r2
   16aec:	sbcs	r0, r1, r3
   16af0:	blt	16b48 <__assert_fail@plt+0x5ac0>
   16af4:	umull	r7, r0, r6, r2
   16af8:	mla	r0, r6, r3, r0
   16afc:	mla	r4, r8, r2, r0
   16b00:	ldr	r0, [sp]
   16b04:	cmp	r4, #0
   16b08:	str	r0, [sp, #8]
   16b0c:	bmi	16b48 <__assert_fail@plt+0x5ac0>
   16b10:	ldr	r3, [sp, #28]
   16b14:	mvn	r0, #0
   16b18:	mvn	r1, #-2147483648	; 0x80000000
   16b1c:	mvn	r9, #0
   16b20:	mvn	r8, #-2147483648	; 0x80000000
   16b24:	bl	171f8 <__assert_fail@plt+0x6170>
   16b28:	ldr	r2, [sp, #24]
   16b2c:	ldr	r3, [sp, #28]
   16b30:	subs	r0, r0, r7
   16b34:	sbcs	r0, r1, r4
   16b38:	bge	16b84 <__assert_fail@plt+0x5afc>
   16b3c:	mov	r0, #1
   16b40:	str	r0, [sp, #8]
   16b44:	b	16b98 <__assert_fail@plt+0x5b10>
   16b48:	mov	r0, #0
   16b4c:	mov	r1, #-2147483648	; 0x80000000
   16b50:	mov	r2, r7
   16b54:	mov	r3, r4
   16b58:	bl	17124 <__assert_fail@plt+0x609c>
   16b5c:	ldr	r2, [sp, #24]
   16b60:	ldr	r3, [sp, #28]
   16b64:	subs	r0, r0, r2
   16b68:	sbcs	r0, r1, r3
   16b6c:	bge	16b84 <__assert_fail@plt+0x5afc>
   16b70:	mov	r0, #1
   16b74:	mov	r9, #0
   16b78:	mov	r8, #-2147483648	; 0x80000000
   16b7c:	str	r0, [sp, #8]
   16b80:	b	16bd0 <__assert_fail@plt+0x5b48>
   16b84:	umull	r9, r0, r7, r2
   16b88:	mla	r0, r7, r3, r0
   16b8c:	mla	r8, r4, r2, r0
   16b90:	cmp	r8, #0
   16b94:	bmi	16bd0 <__assert_fail@plt+0x5b48>
   16b98:	ldr	r3, [sp, #28]
   16b9c:	mvn	r0, #0
   16ba0:	mvn	r1, #-2147483648	; 0x80000000
   16ba4:	mvn	r4, #0
   16ba8:	mvn	r7, #-2147483648	; 0x80000000
   16bac:	bl	171f8 <__assert_fail@plt+0x6170>
   16bb0:	ldr	r2, [sp, #24]
   16bb4:	ldr	r3, [sp, #28]
   16bb8:	subs	r0, r0, r9
   16bbc:	sbcs	r0, r1, r8
   16bc0:	bge	16c0c <__assert_fail@plt+0x5b84>
   16bc4:	mov	r0, #1
   16bc8:	str	r0, [sp, #8]
   16bcc:	b	16c20 <__assert_fail@plt+0x5b98>
   16bd0:	mov	r0, #0
   16bd4:	mov	r1, #-2147483648	; 0x80000000
   16bd8:	mov	r2, r9
   16bdc:	mov	r3, r8
   16be0:	bl	17124 <__assert_fail@plt+0x609c>
   16be4:	ldr	r2, [sp, #24]
   16be8:	ldr	r3, [sp, #28]
   16bec:	subs	r0, r0, r2
   16bf0:	sbcs	r0, r1, r3
   16bf4:	bge	16c0c <__assert_fail@plt+0x5b84>
   16bf8:	mov	r0, #1
   16bfc:	mov	r4, #0
   16c00:	mov	r7, #-2147483648	; 0x80000000
   16c04:	str	r0, [sp, #8]
   16c08:	b	16c58 <__assert_fail@plt+0x5bd0>
   16c0c:	umull	r4, r0, r9, r2
   16c10:	mla	r0, r9, r3, r0
   16c14:	mla	r7, r8, r2, r0
   16c18:	cmp	r7, #0
   16c1c:	bmi	16c58 <__assert_fail@plt+0x5bd0>
   16c20:	ldr	r3, [sp, #28]
   16c24:	mvn	r0, #0
   16c28:	mvn	r1, #-2147483648	; 0x80000000
   16c2c:	mvn	r8, #0
   16c30:	mvn	r9, #-2147483648	; 0x80000000
   16c34:	bl	171f8 <__assert_fail@plt+0x6170>
   16c38:	ldr	r2, [sp, #24]
   16c3c:	ldr	r3, [sp, #28]
   16c40:	subs	r0, r0, r4
   16c44:	sbcs	r0, r1, r7
   16c48:	bge	16c94 <__assert_fail@plt+0x5c0c>
   16c4c:	mov	r0, #1
   16c50:	str	r0, [sp, #8]
   16c54:	b	16ca8 <__assert_fail@plt+0x5c20>
   16c58:	mov	r0, #0
   16c5c:	mov	r1, #-2147483648	; 0x80000000
   16c60:	mov	r2, r4
   16c64:	mov	r3, r7
   16c68:	bl	17124 <__assert_fail@plt+0x609c>
   16c6c:	ldr	r2, [sp, #24]
   16c70:	ldr	r3, [sp, #28]
   16c74:	subs	r0, r0, r2
   16c78:	sbcs	r0, r1, r3
   16c7c:	bge	16c94 <__assert_fail@plt+0x5c0c>
   16c80:	mov	r0, #1
   16c84:	mov	r8, #0
   16c88:	mov	r9, #-2147483648	; 0x80000000
   16c8c:	str	r0, [sp, #8]
   16c90:	b	16ce4 <__assert_fail@plt+0x5c5c>
   16c94:	umull	r8, r0, r4, r2
   16c98:	mla	r0, r4, r3, r0
   16c9c:	mla	r9, r7, r2, r0
   16ca0:	cmp	r9, #0
   16ca4:	bmi	16ce4 <__assert_fail@plt+0x5c5c>
   16ca8:	ldr	r3, [sp, #28]
   16cac:	mvn	r0, #0
   16cb0:	mvn	r1, #-2147483648	; 0x80000000
   16cb4:	mvn	r4, #0
   16cb8:	mvn	r6, #-2147483648	; 0x80000000
   16cbc:	bl	171f8 <__assert_fail@plt+0x6170>
   16cc0:	ldr	r2, [sp, #24]
   16cc4:	ldr	r3, [sp, #28]
   16cc8:	subs	r0, r0, r8
   16ccc:	sbcs	r0, r1, r9
   16cd0:	bge	16d24 <__assert_fail@plt+0x5c9c>
   16cd4:	ldr	r9, [sp, #12]
   16cd8:	mov	r0, #1
   16cdc:	str	r0, [sp, #8]
   16ce0:	b	16d3c <__assert_fail@plt+0x5cb4>
   16ce4:	mov	r0, #0
   16ce8:	mov	r1, #-2147483648	; 0x80000000
   16cec:	mov	r2, r8
   16cf0:	mov	r3, r9
   16cf4:	bl	17124 <__assert_fail@plt+0x609c>
   16cf8:	ldr	r2, [sp, #24]
   16cfc:	ldr	r3, [sp, #28]
   16d00:	subs	r0, r0, r2
   16d04:	sbcs	r0, r1, r3
   16d08:	bge	16d24 <__assert_fail@plt+0x5c9c>
   16d0c:	ldr	r9, [sp, #12]
   16d10:	mov	r0, #1
   16d14:	mov	r4, #0
   16d18:	mov	r6, #-2147483648	; 0x80000000
   16d1c:	str	r0, [sp, #8]
   16d20:	b	16d88 <__assert_fail@plt+0x5d00>
   16d24:	umull	r4, r0, r8, r2
   16d28:	mla	r0, r8, r3, r0
   16d2c:	mla	r6, r9, r2, r0
   16d30:	ldr	r9, [sp, #12]
   16d34:	cmp	r6, #0
   16d38:	bmi	16d88 <__assert_fail@plt+0x5d00>
   16d3c:	ldr	r3, [sp, #28]
   16d40:	mvn	r0, #0
   16d44:	mvn	r1, #-2147483648	; 0x80000000
   16d48:	mov	r8, r6
   16d4c:	mvn	r6, #0
   16d50:	mvn	r7, #-2147483648	; 0x80000000
   16d54:	bl	171f8 <__assert_fail@plt+0x6170>
   16d58:	ldr	r3, [sp, #24]
   16d5c:	ldr	ip, [sp, #28]
   16d60:	subs	r0, r0, r4
   16d64:	mov	r2, #1
   16d68:	sbcs	r0, r1, r8
   16d6c:	blt	16d80 <__assert_fail@plt+0x5cf8>
   16d70:	umull	r6, r0, r4, r3
   16d74:	mov	r2, #0
   16d78:	mla	r0, r4, ip, r0
   16d7c:	mla	r7, r8, r3, r0
   16d80:	ldr	r0, [sp, #8]
   16d84:	b	15ecc <__assert_fail@plt+0x4e44>
   16d88:	mov	r0, #0
   16d8c:	mov	r1, #-2147483648	; 0x80000000
   16d90:	mov	r2, r4
   16d94:	mov	r3, r6
   16d98:	bl	17124 <__assert_fail@plt+0x609c>
   16d9c:	ldr	r3, [sp, #24]
   16da0:	ldr	ip, [sp, #28]
   16da4:	mov	r8, r6
   16da8:	mov	r2, #1
   16dac:	mov	r6, #0
   16db0:	mov	r7, #-2147483648	; 0x80000000
   16db4:	subs	r0, r0, r3
   16db8:	sbcs	r0, r1, ip
   16dbc:	bge	16d70 <__assert_fail@plt+0x5ce8>
   16dc0:	b	16d80 <__assert_fail@plt+0x5cf8>
   16dc4:	movw	r0, #32625	; 0x7f71
   16dc8:	movw	r1, #32663	; 0x7f97
   16dcc:	movw	r3, #32679	; 0x7fa7
   16dd0:	mov	r2, #85	; 0x55
   16dd4:	movt	r0, #1
   16dd8:	movt	r1, #1
   16ddc:	movt	r3, #1
   16de0:	bl	11088 <__assert_fail@plt>
   16de4:	clz	r2, r1
   16de8:	clz	r3, r0
   16dec:	lsr	r2, r2, #5
   16df0:	lsr	r3, r3, #5
   16df4:	orrs	r2, r3, r2
   16df8:	movwne	r1, #1
   16dfc:	movwne	r0, #1
   16e00:	cmp	r1, #0
   16e04:	beq	16e34 <__assert_fail@plt+0x5dac>
   16e08:	mvn	r2, #-2147483648	; 0x80000000
   16e0c:	udiv	r2, r2, r1
   16e10:	cmp	r2, r0
   16e14:	bcs	16e34 <__assert_fail@plt+0x5dac>
   16e18:	push	{fp, lr}
   16e1c:	mov	fp, sp
   16e20:	bl	10fa4 <__errno_location@plt>
   16e24:	mov	r1, #12
   16e28:	str	r1, [r0]
   16e2c:	mov	r0, #0
   16e30:	pop	{fp, pc}
   16e34:	b	10e24 <calloc@plt>
   16e38:	cmp	r0, #0
   16e3c:	movweq	r0, #1
   16e40:	cmn	r0, #1
   16e44:	ble	16e4c <__assert_fail@plt+0x5dc4>
   16e48:	b	10f2c <malloc@plt>
   16e4c:	push	{fp, lr}
   16e50:	mov	fp, sp
   16e54:	bl	10fa4 <__errno_location@plt>
   16e58:	mov	r1, #12
   16e5c:	str	r1, [r0]
   16e60:	mov	r0, #0
   16e64:	pop	{fp, pc}
   16e68:	push	{fp, lr}
   16e6c:	mov	fp, sp
   16e70:	cmp	r0, #0
   16e74:	beq	16e90 <__assert_fail@plt+0x5e08>
   16e78:	cmp	r1, #0
   16e7c:	beq	16e9c <__assert_fail@plt+0x5e14>
   16e80:	cmn	r1, #1
   16e84:	ble	16ea8 <__assert_fail@plt+0x5e20>
   16e88:	pop	{fp, lr}
   16e8c:	b	10ec0 <realloc@plt>
   16e90:	mov	r0, r1
   16e94:	pop	{fp, lr}
   16e98:	b	16e38 <__assert_fail@plt+0x5db0>
   16e9c:	bl	12798 <__assert_fail@plt+0x1710>
   16ea0:	mov	r0, #0
   16ea4:	pop	{fp, pc}
   16ea8:	bl	10fa4 <__errno_location@plt>
   16eac:	mov	r1, #12
   16eb0:	str	r1, [r0]
   16eb4:	mov	r0, #0
   16eb8:	pop	{fp, pc}
   16ebc:	push	{r4, r5, r6, sl, fp, lr}
   16ec0:	add	fp, sp, #16
   16ec4:	mov	r4, r0
   16ec8:	bl	10f08 <__fpending@plt>
   16ecc:	ldr	r6, [r4]
   16ed0:	mov	r5, r0
   16ed4:	mov	r0, r4
   16ed8:	bl	126a0 <__assert_fail@plt+0x1618>
   16edc:	tst	r6, #32
   16ee0:	bne	16f18 <__assert_fail@plt+0x5e90>
   16ee4:	cmp	r0, #0
   16ee8:	mov	r4, r0
   16eec:	mvnne	r4, #0
   16ef0:	cmp	r5, #0
   16ef4:	bne	16f24 <__assert_fail@plt+0x5e9c>
   16ef8:	cmp	r0, #0
   16efc:	beq	16f24 <__assert_fail@plt+0x5e9c>
   16f00:	bl	10fa4 <__errno_location@plt>
   16f04:	ldr	r0, [r0]
   16f08:	subs	r4, r0, #9
   16f0c:	mvnne	r4, #0
   16f10:	mov	r0, r4
   16f14:	pop	{r4, r5, r6, sl, fp, pc}
   16f18:	mvn	r4, #0
   16f1c:	cmp	r0, #0
   16f20:	beq	16f2c <__assert_fail@plt+0x5ea4>
   16f24:	mov	r0, r4
   16f28:	pop	{r4, r5, r6, sl, fp, pc}
   16f2c:	bl	10fa4 <__errno_location@plt>
   16f30:	mov	r1, #0
   16f34:	str	r1, [r0]
   16f38:	mov	r0, r4
   16f3c:	pop	{r4, r5, r6, sl, fp, pc}
   16f40:	push	{fp, lr}
   16f44:	mov	fp, sp
   16f48:	mov	r0, #14
   16f4c:	bl	11034 <nl_langinfo@plt>
   16f50:	movw	r1, #30984	; 0x7908
   16f54:	cmp	r0, #0
   16f58:	movt	r1, #1
   16f5c:	movne	r1, r0
   16f60:	movw	r0, #32757	; 0x7ff5
   16f64:	ldrb	r2, [r1]
   16f68:	movt	r0, #1
   16f6c:	cmp	r2, #0
   16f70:	movne	r0, r1
   16f74:	pop	{fp, pc}
   16f78:	push	{r4, r5, r6, r7, fp, lr}
   16f7c:	add	fp, sp, #16
   16f80:	sub	sp, sp, #8
   16f84:	cmp	r0, #0
   16f88:	add	r5, sp, #4
   16f8c:	mov	r7, r2
   16f90:	mov	r4, r1
   16f94:	movne	r5, r0
   16f98:	mov	r0, r5
   16f9c:	bl	10f14 <mbrtowc@plt>
   16fa0:	mov	r6, r0
   16fa4:	cmp	r7, #0
   16fa8:	beq	16fd0 <__assert_fail@plt+0x5f48>
   16fac:	cmn	r6, #2
   16fb0:	bcc	16fd0 <__assert_fail@plt+0x5f48>
   16fb4:	mov	r0, #0
   16fb8:	bl	17018 <__assert_fail@plt+0x5f90>
   16fbc:	cmp	r0, #0
   16fc0:	bne	16fd0 <__assert_fail@plt+0x5f48>
   16fc4:	ldrb	r0, [r4]
   16fc8:	mov	r6, #1
   16fcc:	str	r0, [r5]
   16fd0:	mov	r0, r6
   16fd4:	sub	sp, fp, #16
   16fd8:	pop	{r4, r5, r6, r7, fp, pc}
   16fdc:	cmp	r2, #0
   16fe0:	beq	17010 <__assert_fail@plt+0x5f88>
   16fe4:	mvn	r3, #0
   16fe8:	udiv	r3, r3, r2
   16fec:	cmp	r3, r1
   16ff0:	bcs	17010 <__assert_fail@plt+0x5f88>
   16ff4:	push	{fp, lr}
   16ff8:	mov	fp, sp
   16ffc:	bl	10fa4 <__errno_location@plt>
   17000:	mov	r1, #12
   17004:	str	r1, [r0]
   17008:	mov	r0, #0
   1700c:	pop	{fp, pc}
   17010:	mul	r1, r2, r1
   17014:	b	16e68 <__assert_fail@plt+0x5de0>
   17018:	push	{r4, sl, fp, lr}
   1701c:	add	fp, sp, #8
   17020:	sub	sp, sp, #264	; 0x108
   17024:	add	r1, sp, #7
   17028:	movw	r2, #257	; 0x101
   1702c:	bl	17084 <__assert_fail@plt+0x5ffc>
   17030:	mov	r4, #0
   17034:	cmp	r0, #0
   17038:	bne	17078 <__assert_fail@plt+0x5ff0>
   1703c:	movw	r1, #32763	; 0x7ffb
   17040:	add	r0, sp, #7
   17044:	mov	r2, #2
   17048:	movt	r1, #1
   1704c:	bl	10f80 <bcmp@plt>
   17050:	cmp	r0, #0
   17054:	beq	17078 <__assert_fail@plt+0x5ff0>
   17058:	movw	r1, #32765	; 0x7ffd
   1705c:	add	r0, sp, #7
   17060:	mov	r2, #6
   17064:	movt	r1, #1
   17068:	bl	10f80 <bcmp@plt>
   1706c:	cmp	r0, #0
   17070:	mov	r4, r0
   17074:	movwne	r4, #1
   17078:	mov	r0, r4
   1707c:	sub	sp, fp, #8
   17080:	pop	{r4, sl, fp, pc}
   17084:	push	{r4, r5, r6, r7, fp, lr}
   17088:	add	fp, sp, #16
   1708c:	mov	r4, r1
   17090:	mov	r1, #0
   17094:	mov	r6, r2
   17098:	bl	1101c <setlocale@plt>
   1709c:	cmp	r0, #0
   170a0:	beq	170d0 <__assert_fail@plt+0x6048>
   170a4:	mov	r7, r0
   170a8:	bl	10f8c <strlen@plt>
   170ac:	cmp	r0, r6
   170b0:	bcs	170ec <__assert_fail@plt+0x6064>
   170b4:	add	r2, r0, #1
   170b8:	mov	r0, r4
   170bc:	mov	r1, r7
   170c0:	bl	10e90 <memcpy@plt>
   170c4:	mov	r5, #0
   170c8:	mov	r0, r5
   170cc:	pop	{r4, r5, r6, r7, fp, pc}
   170d0:	mov	r5, #22
   170d4:	cmp	r6, #0
   170d8:	beq	17114 <__assert_fail@plt+0x608c>
   170dc:	mov	r0, #0
   170e0:	strb	r0, [r4]
   170e4:	mov	r0, r5
   170e8:	pop	{r4, r5, r6, r7, fp, pc}
   170ec:	mov	r5, #34	; 0x22
   170f0:	cmp	r6, #0
   170f4:	beq	17114 <__assert_fail@plt+0x608c>
   170f8:	sub	r6, r6, #1
   170fc:	mov	r0, r4
   17100:	mov	r1, r7
   17104:	mov	r2, r6
   17108:	bl	10e90 <memcpy@plt>
   1710c:	mov	r0, #0
   17110:	strb	r0, [r4, r6]
   17114:	mov	r0, r5
   17118:	pop	{r4, r5, r6, r7, fp, pc}
   1711c:	mov	r1, #0
   17120:	b	1101c <setlocale@plt>
   17124:	cmp	r3, #0
   17128:	cmpeq	r2, #0
   1712c:	bne	17150 <__assert_fail@plt+0x60c8>
   17130:	cmp	r1, #0
   17134:	movlt	r1, #-2147483648	; 0x80000000
   17138:	movlt	r0, #0
   1713c:	blt	1714c <__assert_fail@plt+0x60c4>
   17140:	cmpeq	r0, #0
   17144:	mvnne	r1, #-2147483648	; 0x80000000
   17148:	mvnne	r0, #0
   1714c:	b	17234 <__assert_fail@plt+0x61ac>
   17150:	sub	sp, sp, #8
   17154:	push	{sp, lr}
   17158:	cmp	r1, #0
   1715c:	blt	1717c <__assert_fail@plt+0x60f4>
   17160:	cmp	r3, #0
   17164:	blt	171b0 <__assert_fail@plt+0x6128>
   17168:	bl	17244 <__assert_fail@plt+0x61bc>
   1716c:	ldr	lr, [sp, #4]
   17170:	add	sp, sp, #8
   17174:	pop	{r2, r3}
   17178:	bx	lr
   1717c:	rsbs	r0, r0, #0
   17180:	sbc	r1, r1, r1, lsl #1
   17184:	cmp	r3, #0
   17188:	blt	171d4 <__assert_fail@plt+0x614c>
   1718c:	bl	17244 <__assert_fail@plt+0x61bc>
   17190:	ldr	lr, [sp, #4]
   17194:	add	sp, sp, #8
   17198:	pop	{r2, r3}
   1719c:	rsbs	r0, r0, #0
   171a0:	sbc	r1, r1, r1, lsl #1
   171a4:	rsbs	r2, r2, #0
   171a8:	sbc	r3, r3, r3, lsl #1
   171ac:	bx	lr
   171b0:	rsbs	r2, r2, #0
   171b4:	sbc	r3, r3, r3, lsl #1
   171b8:	bl	17244 <__assert_fail@plt+0x61bc>
   171bc:	ldr	lr, [sp, #4]
   171c0:	add	sp, sp, #8
   171c4:	pop	{r2, r3}
   171c8:	rsbs	r0, r0, #0
   171cc:	sbc	r1, r1, r1, lsl #1
   171d0:	bx	lr
   171d4:	rsbs	r2, r2, #0
   171d8:	sbc	r3, r3, r3, lsl #1
   171dc:	bl	17244 <__assert_fail@plt+0x61bc>
   171e0:	ldr	lr, [sp, #4]
   171e4:	add	sp, sp, #8
   171e8:	pop	{r2, r3}
   171ec:	rsbs	r2, r2, #0
   171f0:	sbc	r3, r3, r3, lsl #1
   171f4:	bx	lr
   171f8:	cmp	r3, #0
   171fc:	cmpeq	r2, #0
   17200:	bne	17218 <__assert_fail@plt+0x6190>
   17204:	cmp	r1, #0
   17208:	cmpeq	r0, #0
   1720c:	mvnne	r1, #0
   17210:	mvnne	r0, #0
   17214:	b	17234 <__assert_fail@plt+0x61ac>
   17218:	sub	sp, sp, #8
   1721c:	push	{sp, lr}
   17220:	bl	17244 <__assert_fail@plt+0x61bc>
   17224:	ldr	lr, [sp, #4]
   17228:	add	sp, sp, #8
   1722c:	pop	{r2, r3}
   17230:	bx	lr
   17234:	push	{r1, lr}
   17238:	mov	r0, #8
   1723c:	bl	10e3c <raise@plt>
   17240:	pop	{r1, pc}
   17244:	cmp	r1, r3
   17248:	cmpeq	r0, r2
   1724c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17250:	mov	r4, r0
   17254:	movcc	r0, #0
   17258:	mov	r5, r1
   1725c:	ldr	lr, [sp, #36]	; 0x24
   17260:	movcc	r1, r0
   17264:	bcc	17360 <__assert_fail@plt+0x62d8>
   17268:	cmp	r3, #0
   1726c:	clzeq	ip, r2
   17270:	clzne	ip, r3
   17274:	addeq	ip, ip, #32
   17278:	cmp	r5, #0
   1727c:	clzeq	r1, r4
   17280:	addeq	r1, r1, #32
   17284:	clzne	r1, r5
   17288:	sub	ip, ip, r1
   1728c:	sub	sl, ip, #32
   17290:	lsl	r9, r3, ip
   17294:	rsb	fp, ip, #32
   17298:	orr	r9, r9, r2, lsl sl
   1729c:	orr	r9, r9, r2, lsr fp
   172a0:	lsl	r8, r2, ip
   172a4:	cmp	r5, r9
   172a8:	cmpeq	r4, r8
   172ac:	movcc	r0, #0
   172b0:	movcc	r1, r0
   172b4:	bcc	172d0 <__assert_fail@plt+0x6248>
   172b8:	mov	r0, #1
   172bc:	subs	r4, r4, r8
   172c0:	lsl	r1, r0, sl
   172c4:	orr	r1, r1, r0, lsr fp
   172c8:	lsl	r0, r0, ip
   172cc:	sbc	r5, r5, r9
   172d0:	cmp	ip, #0
   172d4:	beq	17360 <__assert_fail@plt+0x62d8>
   172d8:	lsr	r6, r8, #1
   172dc:	orr	r6, r6, r9, lsl #31
   172e0:	lsr	r7, r9, #1
   172e4:	mov	r2, ip
   172e8:	b	1730c <__assert_fail@plt+0x6284>
   172ec:	subs	r3, r4, r6
   172f0:	sbc	r8, r5, r7
   172f4:	adds	r3, r3, r3
   172f8:	adc	r8, r8, r8
   172fc:	adds	r4, r3, #1
   17300:	adc	r5, r8, #0
   17304:	subs	r2, r2, #1
   17308:	beq	17328 <__assert_fail@plt+0x62a0>
   1730c:	cmp	r5, r7
   17310:	cmpeq	r4, r6
   17314:	bcs	172ec <__assert_fail@plt+0x6264>
   17318:	adds	r4, r4, r4
   1731c:	adc	r5, r5, r5
   17320:	subs	r2, r2, #1
   17324:	bne	1730c <__assert_fail@plt+0x6284>
   17328:	lsr	r3, r4, ip
   1732c:	orr	r3, r3, r5, lsl fp
   17330:	lsr	r2, r5, ip
   17334:	orr	r3, r3, r5, lsr sl
   17338:	adds	r0, r0, r4
   1733c:	mov	r4, r3
   17340:	lsl	r3, r2, ip
   17344:	orr	r3, r3, r4, lsl sl
   17348:	lsl	ip, r4, ip
   1734c:	orr	r3, r3, r4, lsr fp
   17350:	adc	r1, r1, r5
   17354:	subs	r0, r0, ip
   17358:	mov	r5, r2
   1735c:	sbc	r1, r1, r3
   17360:	cmp	lr, #0
   17364:	strdne	r4, [lr]
   17368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1736c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17370:	mov	r7, r0
   17374:	ldr	r6, [pc, #72]	; 173c4 <__assert_fail@plt+0x633c>
   17378:	ldr	r5, [pc, #72]	; 173c8 <__assert_fail@plt+0x6340>
   1737c:	add	r6, pc, r6
   17380:	add	r5, pc, r5
   17384:	sub	r6, r6, r5
   17388:	mov	r8, r1
   1738c:	mov	r9, r2
   17390:	bl	10e04 <calloc@plt-0x20>
   17394:	asrs	r6, r6, #2
   17398:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1739c:	mov	r4, #0
   173a0:	add	r4, r4, #1
   173a4:	ldr	r3, [r5], #4
   173a8:	mov	r2, r9
   173ac:	mov	r1, r8
   173b0:	mov	r0, r7
   173b4:	blx	r3
   173b8:	cmp	r6, r4
   173bc:	bne	173a0 <__assert_fail@plt+0x6318>
   173c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   173c4:	andeq	r1, r1, r8, lsl #23
   173c8:	andeq	r1, r1, r0, lsl #23
   173cc:	bx	lr
   173d0:	ldr	r3, [pc, #12]	; 173e4 <__assert_fail@plt+0x635c>
   173d4:	mov	r1, #0
   173d8:	add	r3, pc, r3
   173dc:	ldr	r2, [r3]
   173e0:	b	10fb0 <__cxa_atexit@plt>
   173e4:	andeq	r1, r1, r4, lsl #26

Disassembly of section .fini:

000173e8 <.fini>:
   173e8:	push	{r3, lr}
   173ec:	pop	{r3, pc}
